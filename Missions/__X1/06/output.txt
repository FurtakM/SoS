// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 63505 0 0
// Init ;
   8: CALL 62 0 0
// if debug then
  12: LD_EXP 1
  16: IFFALSE 26
// Difficulty := 1 ;
  18: LD_ADDR_OWVAR 67
  22: PUSH
  23: LD_INT 1
  25: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  26: LD_INT 1
  28: PPUSH
  29: LD_INT 3
  31: PPUSH
  32: CALL 6854 0 2
// PrepareArabian ;
  36: CALL 361 0 0
// PrepareRussian ;
  40: CALL 7701 0 0
// Action ;
  44: CALL 15416 0 0
// if debug then
  48: LD_EXP 1
  52: IFFALSE 61
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ;
  61: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 05_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 05_
  80: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_STRING 04_2_GaidarKilled
  88: PPUSH
  89: LD_INT 1
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_STRING 05_ConvoySavedCounter
 104: PPUSH
 105: LD_INT 0
 107: PPUSH
 108: CALL_OW 30
 112: ST_TO_ADDR
// bergkampfArrived := false ;
 113: LD_ADDR_EXP 3
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// omarArrived := false ;
 121: LD_ADDR_EXP 6
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// outpostDestroyed := false ;
 129: LD_ADDR_EXP 4
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// ruLoseCounter := 0 ;
 137: LD_ADDR_EXP 5
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// rolfScriptBase := false ;
 145: LD_ADDR_EXP 9
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// omarScriptBase := false ;
 153: LD_ADDR_EXP 10
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// linkedWithRolf := 0 ;
 161: LD_ADDR_EXP 12
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 169: LD_ADDR_EXP 26
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// rolfDied := false ;
 177: LD_ADDR_EXP 13
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// leninSpotted := false ;
 185: LD_ADDR_EXP 14
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// mortarConstructed := false ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// rolfHasVehicles := false ;
 201: LD_ADDR_EXP 16
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// leninScriptBase := true ;
 209: LD_ADDR_EXP 11
 213: PUSH
 214: LD_INT 1
 216: ST_TO_ADDR
// rolfWantVehicles := false ;
 217: LD_ADDR_EXP 17
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// omarWantVehicles := false ;
 225: LD_ADDR_EXP 18
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// omarHasVehicles := false ;
 233: LD_ADDR_EXP 22
 237: PUSH
 238: LD_INT 0
 240: ST_TO_ADDR
// escapeAllowed := false ;
 241: LD_ADDR_EXP 24
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 8 8$00 , 6 6$00 , 5 5$00 ] [ Difficulty ] ;
 249: LD_ADDR_EXP 19
 253: PUSH
 254: LD_INT 16800
 256: PUSH
 257: LD_INT 12600
 259: PUSH
 260: LD_INT 10500
 262: PUSH
 263: EMPTY
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] ;
 274: LD_ADDR_EXP 20
 278: PUSH
 279: LD_INT 21000
 281: PUSH
 282: LD_INT 18900
 284: PUSH
 285: LD_INT 16800
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: LIST
 292: PUSH
 293: LD_OWVAR 67
 297: ARRAY
 298: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 ] [ Difficulty ] ;
 299: LD_ADDR_EXP 21
 303: PUSH
 304: LD_INT 4
 306: PUSH
 307: LD_INT 5
 309: PUSH
 310: LD_INT 6
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: PUSH
 318: LD_OWVAR 67
 322: ARRAY
 323: ST_TO_ADDR
// omarAttack := false ;
 324: LD_ADDR_EXP 23
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// disableAttackOnHeike := false ;
 332: LD_ADDR_EXP 27
 336: PUSH
 337: LD_INT 0
 339: ST_TO_ADDR
// escapeTimer := 4 4$00 ;
 340: LD_ADDR_EXP 25
 344: PUSH
 345: LD_INT 8400
 347: ST_TO_ADDR
// firstAttack := true ;
 348: LD_ADDR_EXP 28
 352: PUSH
 353: LD_INT 1
 355: ST_TO_ADDR
// end ; end_of_file
 356: LD_VAR 0 1
 360: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , tmp ; begin
 361: LD_INT 0
 363: PPUSH
 364: PPUSH
 365: PPUSH
 366: PPUSH
 367: PPUSH
 368: PPUSH
 369: PPUSH
 370: PPUSH
 371: PPUSH
 372: PPUSH
 373: PPUSH
 374: PPUSH
// uc_nation := 2 ;
 375: LD_ADDR_OWVAR 21
 379: PUSH
 380: LD_INT 2
 382: ST_TO_ADDR
// uc_side := 5 ;
 383: LD_ADDR_OWVAR 20
 387: PUSH
 388: LD_INT 5
 390: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 391: LD_ADDR_EXP 37
 395: PUSH
 396: LD_STRING Abdul
 398: PPUSH
 399: LD_INT 0
 401: PPUSH
 402: LD_STRING 
 404: PPUSH
 405: CALL 24631 0 3
 409: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 410: LD_ADDR_EXP 39
 414: PUSH
 415: LD_STRING Omar
 417: PPUSH
 418: LD_INT 0
 420: PPUSH
 421: LD_STRING 
 423: PPUSH
 424: CALL 24631 0 3
 428: ST_TO_ADDR
// uc_side := 2 ;
 429: LD_ADDR_OWVAR 20
 433: PUSH
 434: LD_INT 2
 436: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 437: LD_ADDR_EXP 29
 441: PUSH
 442: LD_STRING Heike
 444: PPUSH
 445: LD_EXP 1
 449: NOT
 450: PPUSH
 451: LD_EXP 2
 455: PPUSH
 456: CALL 24631 0 3
 460: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 461: LD_ADDR_EXP 32
 465: PUSH
 466: LD_STRING Ibrahim
 468: PPUSH
 469: LD_EXP 1
 473: NOT
 474: PPUSH
 475: LD_EXP 2
 479: PPUSH
 480: CALL 24631 0 3
 484: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 485: LD_ADDR_EXP 30
 489: PUSH
 490: LD_STRING Givi
 492: PPUSH
 493: LD_EXP 1
 497: NOT
 498: PPUSH
 499: LD_EXP 2
 503: PPUSH
 504: CALL 24631 0 3
 508: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 509: LD_ADDR_EXP 33
 513: PUSH
 514: LD_STRING Kamil
 516: PPUSH
 517: LD_EXP 1
 521: NOT
 522: PPUSH
 523: LD_EXP 2
 527: PPUSH
 528: CALL 24631 0 3
 532: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 533: LD_ADDR_EXP 34
 537: PUSH
 538: LD_STRING Kaia
 540: PPUSH
 541: LD_EXP 1
 545: NOT
 546: PPUSH
 547: LD_EXP 2
 551: PPUSH
 552: CALL 24631 0 3
 556: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 557: LD_ADDR_EXP 35
 561: PUSH
 562: LD_STRING Sophia
 564: PPUSH
 565: LD_EXP 1
 569: NOT
 570: PPUSH
 571: LD_EXP 2
 575: PPUSH
 576: CALL 24631 0 3
 580: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 581: LD_ADDR_EXP 36
 585: PUSH
 586: LD_STRING Markov
 588: PPUSH
 589: LD_EXP 1
 593: NOT
 594: PPUSH
 595: LD_EXP 2
 599: PPUSH
 600: CALL 24631 0 3
 604: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 605: LD_ADDR_EXP 41
 609: PUSH
 610: LD_STRING Aviradze
 612: PPUSH
 613: LD_EXP 1
 617: NOT
 618: PPUSH
 619: LD_EXP 2
 623: PPUSH
 624: CALL 24631 0 3
 628: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 629: LD_ADDR_EXP 40
 633: PUSH
 634: LD_STRING Kurt
 636: PPUSH
 637: LD_EXP 1
 641: NOT
 642: PPUSH
 643: LD_EXP 2
 647: PPUSH
 648: CALL 24631 0 3
 652: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 653: LD_ADDR_EXP 31
 657: PUSH
 658: LD_STRING Mike
 660: PPUSH
 661: LD_EXP 1
 665: NOT
 666: PPUSH
 667: LD_EXP 2
 671: PPUSH
 672: CALL 24631 0 3
 676: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 677: LD_ADDR_EXP 38
 681: PUSH
 682: LD_STRING Olaf
 684: PPUSH
 685: LD_INT 0
 687: PPUSH
 688: LD_STRING 
 690: PPUSH
 691: CALL 24631 0 3
 695: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 696: LD_ADDR_EXP 44
 700: PUSH
 701: LD_STRING 05_others
 703: PPUSH
 704: CALL_OW 31
 708: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 709: LD_ADDR_EXP 45
 713: PUSH
 714: LD_STRING 05_apes
 716: PPUSH
 717: CALL_OW 31
 721: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 722: LD_ADDR_VAR 0 5
 726: PUSH
 727: LD_STRING 05_Radar
 729: PPUSH
 730: LD_EXP 1
 734: PPUSH
 735: CALL_OW 30
 739: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 740: LD_ADDR_VAR 0 6
 744: PUSH
 745: LD_STRING 05_RemoteControl
 747: PPUSH
 748: LD_EXP 1
 752: PPUSH
 753: CALL_OW 30
 757: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 758: LD_ADDR_VAR 0 7
 762: PUSH
 763: LD_STRING 05_DrugsTested
 765: PPUSH
 766: LD_EXP 1
 770: PPUSH
 771: CALL_OW 30
 775: ST_TO_ADDR
// if hasDrugs then
 776: LD_VAR 0 7
 780: IFFALSE 795
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 782: LD_INT 5
 784: PPUSH
 785: LD_INT 2
 787: PPUSH
 788: LD_INT 2
 790: PPUSH
 791: CALL_OW 322
// if hasRadar then
 795: LD_VAR 0 5
 799: IFFALSE 814
// SetTech ( tech_radar , 2 , state_researched ) ;
 801: LD_INT 6
 803: PPUSH
 804: LD_INT 2
 806: PPUSH
 807: LD_INT 2
 809: PPUSH
 810: CALL_OW 322
// if hasRemote then
 814: LD_VAR 0 6
 818: IFFALSE 833
// SetTech ( tech_remCont , 2 , state_researched ) ;
 820: LD_INT 15
 822: PPUSH
 823: LD_INT 2
 825: PPUSH
 826: LD_INT 2
 828: PPUSH
 829: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 833: LD_ADDR_VAR 0 12
 837: PUSH
 838: LD_INT 5
 840: PPUSH
 841: LD_INT 0
 843: PPUSH
 844: CALL_OW 517
 848: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 849: LD_ADDR_VAR 0 2
 853: PUSH
 854: DOUBLE
 855: LD_INT 1
 857: DEC
 858: ST_TO_ADDR
 859: LD_VAR 0 12
 863: PUSH
 864: LD_INT 1
 866: ARRAY
 867: PUSH
 868: FOR_TO
 869: IFFALSE 946
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
 871: LD_VAR 0 12
 875: PUSH
 876: LD_INT 1
 878: ARRAY
 879: PUSH
 880: LD_VAR 0 2
 884: ARRAY
 885: PPUSH
 886: LD_VAR 0 12
 890: PUSH
 891: LD_INT 2
 893: ARRAY
 894: PUSH
 895: LD_VAR 0 2
 899: ARRAY
 900: PPUSH
 901: CALL_OW 351
 905: IFFALSE 944
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
 907: LD_VAR 0 12
 911: PUSH
 912: LD_INT 1
 914: ARRAY
 915: PUSH
 916: LD_VAR 0 2
 920: ARRAY
 921: PPUSH
 922: LD_VAR 0 12
 926: PUSH
 927: LD_INT 2
 929: ARRAY
 930: PUSH
 931: LD_VAR 0 2
 935: ARRAY
 936: PPUSH
 937: LD_INT 2
 939: PPUSH
 940: CALL_OW 244
 944: GO 868
 946: POP
 947: POP
// base := [ [ b_depot , 206 , 80 , 1 ] , [ b_bunker , 221 , 95 , 5 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 ] , [ b_lab_full , 217 , 78 , 4 ] , [ b_solar_power , 220 , 99 , 1 ] , [ b_solar_power , 220 , 103 , 1 ] , [ b_solar_power , 216 , 102 , 1 ] , [ b_ext_gun , 203 , 94 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 ] , [ b_ext_track , 199 , 91 , 1 ] , [ b_oil_power , 197 , 81 , 1 ] , [ b_oil_power , 197 , 78 , 3 ] ] ;
 948: LD_ADDR_VAR 0 4
 952: PUSH
 953: LD_INT 0
 955: PUSH
 956: LD_INT 206
 958: PUSH
 959: LD_INT 80
 961: PUSH
 962: LD_INT 1
 964: PUSH
 965: EMPTY
 966: LIST
 967: LIST
 968: LIST
 969: LIST
 970: PUSH
 971: LD_INT 32
 973: PUSH
 974: LD_INT 221
 976: PUSH
 977: LD_INT 95
 979: PUSH
 980: LD_INT 5
 982: PUSH
 983: LD_INT 23
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_INT 32
 995: PUSH
 996: LD_INT 223
 998: PUSH
 999: LD_INT 88
1001: PUSH
1002: LD_INT 5
1004: PUSH
1005: LD_INT 24
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: LIST
1014: PUSH
1015: LD_INT 32
1017: PUSH
1018: LD_INT 202
1020: PUSH
1021: LD_INT 64
1023: PUSH
1024: LD_INT 2
1026: PUSH
1027: LD_INT 25
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: PUSH
1037: LD_INT 3
1039: PUSH
1040: LD_INT 203
1042: PUSH
1043: LD_INT 91
1045: PUSH
1046: LD_INT 1
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: PUSH
1055: LD_INT 8
1057: PUSH
1058: LD_INT 217
1060: PUSH
1061: LD_INT 78
1063: PUSH
1064: LD_INT 4
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: PUSH
1073: LD_INT 27
1075: PUSH
1076: LD_INT 220
1078: PUSH
1079: LD_INT 99
1081: PUSH
1082: LD_INT 1
1084: PUSH
1085: EMPTY
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: PUSH
1091: LD_INT 27
1093: PUSH
1094: LD_INT 220
1096: PUSH
1097: LD_INT 103
1099: PUSH
1100: LD_INT 1
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_INT 27
1111: PUSH
1112: LD_INT 216
1114: PUSH
1115: LD_INT 102
1117: PUSH
1118: LD_INT 1
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_INT 17
1129: PUSH
1130: LD_INT 203
1132: PUSH
1133: LD_INT 94
1135: PUSH
1136: LD_INT 0
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: PUSH
1145: LD_INT 23
1147: PUSH
1148: LD_INT 200
1150: PUSH
1151: LD_INT 88
1153: PUSH
1154: LD_INT 2
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: PUSH
1163: LD_INT 16
1165: PUSH
1166: LD_INT 199
1168: PUSH
1169: LD_INT 91
1171: PUSH
1172: LD_INT 1
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: LIST
1179: LIST
1180: PUSH
1181: LD_INT 26
1183: PUSH
1184: LD_INT 197
1186: PUSH
1187: LD_INT 81
1189: PUSH
1190: LD_INT 1
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: PUSH
1199: LD_INT 26
1201: PUSH
1202: LD_INT 197
1204: PUSH
1205: LD_INT 78
1207: PUSH
1208: LD_INT 3
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: LIST
1215: LIST
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: ST_TO_ADDR
// if hasRadar then
1233: LD_VAR 0 5
1237: IFFALSE 1281
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 ] ) ;
1239: LD_ADDR_VAR 0 4
1243: PUSH
1244: LD_VAR 0 4
1248: PPUSH
1249: LD_VAR 0 4
1253: PUSH
1254: LD_INT 1
1256: PLUS
1257: PPUSH
1258: LD_INT 20
1260: PUSH
1261: LD_INT 203
1263: PUSH
1264: LD_INT 87
1266: PUSH
1267: LD_INT 3
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: PPUSH
1276: CALL_OW 1
1280: ST_TO_ADDR
// if hasRemote then
1281: LD_VAR 0 6
1285: IFFALSE 1329
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 ] ) ;
1287: LD_ADDR_VAR 0 4
1291: PUSH
1292: LD_VAR 0 4
1296: PPUSH
1297: LD_VAR 0 4
1301: PUSH
1302: LD_INT 1
1304: PLUS
1305: PPUSH
1306: LD_INT 22
1308: PUSH
1309: LD_INT 207
1311: PUSH
1312: LD_INT 95
1314: PUSH
1315: LD_INT 5
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: PPUSH
1324: CALL_OW 1
1328: ST_TO_ADDR
// for i in base do
1329: LD_ADDR_VAR 0 2
1333: PUSH
1334: LD_VAR 0 4
1338: PUSH
1339: FOR_IN
1340: IFFALSE 1521
// begin bc_type := i [ 1 ] ;
1342: LD_ADDR_OWVAR 42
1346: PUSH
1347: LD_VAR 0 2
1351: PUSH
1352: LD_INT 1
1354: ARRAY
1355: ST_TO_ADDR
// bc_level := 3 ;
1356: LD_ADDR_OWVAR 43
1360: PUSH
1361: LD_INT 3
1363: ST_TO_ADDR
// if i [ 1 ] = b_lab_full then
1364: LD_VAR 0 2
1368: PUSH
1369: LD_INT 1
1371: ARRAY
1372: PUSH
1373: LD_INT 8
1375: EQUAL
1376: IFFALSE 1411
// begin bc_kind1 := b_lab_weapon ;
1378: LD_ADDR_OWVAR 44
1382: PUSH
1383: LD_INT 10
1385: ST_TO_ADDR
// if hasRadar then
1386: LD_VAR 0 5
1390: IFFALSE 1402
// bc_kind2 := b_lab_opto else
1392: LD_ADDR_OWVAR 45
1396: PUSH
1397: LD_INT 15
1399: ST_TO_ADDR
1400: GO 1411
// bc_kind2 := - 1 ;
1402: LD_ADDR_OWVAR 45
1406: PUSH
1407: LD_INT 1
1409: NEG
1410: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1411: LD_ADDR_VAR 0 3
1415: PUSH
1416: LD_VAR 0 2
1420: PUSH
1421: LD_INT 2
1423: ARRAY
1424: PPUSH
1425: LD_VAR 0 2
1429: PUSH
1430: LD_INT 3
1432: ARRAY
1433: PPUSH
1434: LD_VAR 0 2
1438: PUSH
1439: LD_INT 4
1441: ARRAY
1442: PPUSH
1443: CALL_OW 47
1447: ST_TO_ADDR
// if i > 4 then
1448: LD_VAR 0 2
1452: PUSH
1453: LD_INT 4
1455: GREATER
1456: IFFALSE 1476
// PlaceWeaponTurret ( b , i [ 5 ] ) ;
1458: LD_VAR 0 3
1462: PPUSH
1463: LD_VAR 0 2
1467: PUSH
1468: LD_INT 5
1470: ARRAY
1471: PPUSH
1472: CALL_OW 431
// if i [ 1 ] = b_bunker then
1476: LD_VAR 0 2
1480: PUSH
1481: LD_INT 1
1483: ARRAY
1484: PUSH
1485: LD_INT 32
1487: EQUAL
1488: IFFALSE 1519
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
1490: LD_ADDR_VAR 0 11
1494: PUSH
1495: LD_VAR 0 11
1499: PPUSH
1500: LD_VAR 0 11
1504: PUSH
1505: LD_INT 1
1507: PLUS
1508: PPUSH
1509: LD_VAR 0 3
1513: PPUSH
1514: CALL_OW 1
1518: ST_TO_ADDR
// end ;
1519: GO 1339
1521: POP
1522: POP
// depot := HexInfo ( 206 , 80 ) ;
1523: LD_ADDR_VAR 0 9
1527: PUSH
1528: LD_INT 206
1530: PPUSH
1531: LD_INT 80
1533: PPUSH
1534: CALL_OW 428
1538: ST_TO_ADDR
// factory := HexInfo ( 203 , 91 ) ;
1539: LD_ADDR_VAR 0 8
1543: PUSH
1544: LD_INT 203
1546: PPUSH
1547: LD_INT 91
1549: PPUSH
1550: CALL_OW 428
1554: ST_TO_ADDR
// lab := HexInfo ( 217 , 78 ) ;
1555: LD_ADDR_VAR 0 10
1559: PUSH
1560: LD_INT 217
1562: PPUSH
1563: LD_INT 78
1565: PPUSH
1566: CALL_OW 428
1570: ST_TO_ADDR
// arDepot := depot ;
1571: LD_ADDR_EXP 43
1575: PUSH
1576: LD_VAR 0 9
1580: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 160 ] [ Difficulty ] ) ;
1581: LD_VAR 0 9
1585: PPUSH
1586: CALL_OW 274
1590: PPUSH
1591: LD_INT 1
1593: PPUSH
1594: LD_INT 360
1596: PUSH
1597: LD_INT 260
1599: PUSH
1600: LD_INT 160
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: PUSH
1608: LD_OWVAR 67
1612: ARRAY
1613: PPUSH
1614: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 130 ] [ Difficulty ] ) ;
1618: LD_VAR 0 9
1622: PPUSH
1623: CALL_OW 274
1627: PPUSH
1628: LD_INT 2
1630: PPUSH
1631: LD_INT 200
1633: PUSH
1634: LD_INT 170
1636: PUSH
1637: LD_INT 130
1639: PUSH
1640: EMPTY
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: LD_OWVAR 67
1649: ARRAY
1650: PPUSH
1651: CALL_OW 277
// uc_nation := 2 ;
1655: LD_ADDR_OWVAR 21
1659: PUSH
1660: LD_INT 2
1662: ST_TO_ADDR
// uc_side := 2 ;
1663: LD_ADDR_OWVAR 20
1667: PUSH
1668: LD_INT 2
1670: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
1671: LD_INT 13
1673: PPUSH
1674: LD_INT 1
1676: PPUSH
1677: LD_INT 1
1679: PPUSH
1680: LD_INT 27
1682: PPUSH
1683: LD_INT 33
1685: PPUSH
1686: CALL 29495 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
1690: CALL_OW 45
1694: PPUSH
1695: LD_INT 190
1697: PPUSH
1698: LD_INT 64
1700: PPUSH
1701: LD_INT 5
1703: PPUSH
1704: LD_INT 0
1706: PPUSH
1707: CALL 63299 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
1711: LD_INT 13
1713: PPUSH
1714: LD_INT 1
1716: PPUSH
1717: LD_INT 1
1719: PPUSH
1720: LD_INT 25
1722: PPUSH
1723: LD_INT 22
1725: PPUSH
1726: CALL 29495 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
1730: CALL_OW 45
1734: PPUSH
1735: LD_INT 188
1737: PPUSH
1738: LD_INT 67
1740: PPUSH
1741: LD_INT 5
1743: PPUSH
1744: LD_INT 0
1746: PPUSH
1747: CALL 63299 0 5
// if hasRemote then
1751: LD_VAR 0 6
1755: IFFALSE 1837
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_control_tower , 35 ) ;
1757: LD_INT 13
1759: PPUSH
1760: LD_INT 1
1762: PPUSH
1763: LD_INT 1
1765: PPUSH
1766: LD_INT 31
1768: PPUSH
1769: LD_INT 35
1771: PPUSH
1772: CALL 29495 0 5
// PlaceUnitXYD ( CreateVehicle , 191 , 71 , 5 , false ) ;
1776: CALL_OW 45
1780: PPUSH
1781: LD_INT 191
1783: PPUSH
1784: LD_INT 71
1786: PPUSH
1787: LD_INT 5
1789: PPUSH
1790: LD_INT 0
1792: PPUSH
1793: CALL 63299 0 5
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_remote , ar_gun , 55 ) ;
1797: LD_INT 14
1799: PPUSH
1800: LD_INT 1
1802: PPUSH
1803: LD_INT 2
1805: PPUSH
1806: LD_INT 27
1808: PPUSH
1809: LD_INT 55
1811: PPUSH
1812: CALL 29495 0 5
// PlaceUnitXYD ( CreateVehicle , 199 , 67 , 0 , false ) ;
1816: CALL_OW 45
1820: PPUSH
1821: LD_INT 199
1823: PPUSH
1824: LD_INT 67
1826: PPUSH
1827: LD_INT 0
1829: PPUSH
1830: LD_INT 0
1832: PPUSH
1833: CALL 63299 0 5
// end ; PlaceUnitXY ( Heike , 213 , 87 , false ) ;
1837: LD_EXP 29
1841: PPUSH
1842: LD_INT 213
1844: PPUSH
1845: LD_INT 87
1847: PPUSH
1848: LD_INT 0
1850: PPUSH
1851: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
1855: LD_EXP 29
1859: PPUSH
1860: LD_INT 214
1862: PPUSH
1863: LD_INT 87
1865: PPUSH
1866: CALL_OW 118
// if Kaia then
1870: LD_EXP 34
1874: IFFALSE 1909
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
1876: LD_EXP 34
1880: PPUSH
1881: LD_INT 213
1883: PPUSH
1884: LD_INT 85
1886: PPUSH
1887: LD_INT 0
1889: PPUSH
1890: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
1894: LD_EXP 34
1898: PPUSH
1899: LD_INT 215
1901: PPUSH
1902: LD_INT 87
1904: PPUSH
1905: CALL_OW 118
// end ; if Olaf and Kaia then
1909: LD_EXP 38
1913: PUSH
1914: LD_EXP 34
1918: AND
1919: IFFALSE 1956
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
1921: LD_EXP 38
1925: PPUSH
1926: LD_INT 215
1928: PPUSH
1929: LD_INT 87
1931: PPUSH
1932: LD_INT 0
1934: PPUSH
1935: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
1939: LD_EXP 38
1943: PPUSH
1944: LD_INT 213
1946: PPUSH
1947: LD_INT 85
1949: PPUSH
1950: CALL_OW 118
// end else
1954: GO 1976
// if Olaf then
1956: LD_EXP 38
1960: IFFALSE 1976
// PlaceHumanInUnit ( Olaf , factory ) ;
1962: LD_EXP 38
1966: PPUSH
1967: LD_VAR 0 8
1971: PPUSH
1972: CALL_OW 52
// if Givi then
1976: LD_EXP 30
1980: IFFALSE 2061
// begin if Kaia and Olaf then
1982: LD_EXP 34
1986: PUSH
1987: LD_EXP 38
1991: AND
1992: IFFALSE 2029
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
1994: LD_EXP 30
1998: PPUSH
1999: LD_INT 247
2001: PPUSH
2002: LD_INT 117
2004: PPUSH
2005: LD_INT 0
2007: PPUSH
2008: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2012: LD_EXP 30
2016: PPUSH
2017: LD_INT 248
2019: PPUSH
2020: LD_INT 118
2022: PPUSH
2023: CALL_OW 118
// end else
2027: GO 2061
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2029: LD_EXP 30
2033: PPUSH
2034: LD_INT 216
2036: PPUSH
2037: LD_INT 88
2039: PPUSH
2040: LD_INT 0
2042: PPUSH
2043: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2047: LD_EXP 30
2051: PPUSH
2052: LD_EXP 29
2056: PPUSH
2057: CALL_OW 119
// end ; end ; if Kurt then
2061: LD_EXP 40
2065: IFFALSE 2085
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2067: LD_EXP 40
2071: PPUSH
2072: LD_VAR 0 11
2076: PUSH
2077: LD_INT 2
2079: ARRAY
2080: PPUSH
2081: CALL_OW 52
// if Mike then
2085: LD_EXP 31
2089: IFFALSE 2109
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2091: LD_EXP 31
2095: PPUSH
2096: LD_VAR 0 11
2100: PUSH
2101: LD_INT 3
2103: ARRAY
2104: PPUSH
2105: CALL_OW 52
// if Kamil then
2109: LD_EXP 33
2113: IFFALSE 2175
// begin if Kaia and Olaf then
2115: LD_EXP 34
2119: PUSH
2120: LD_EXP 38
2124: AND
2125: IFFALSE 2143
// PlaceHumanInUnit ( Kamil , depot ) else
2127: LD_EXP 33
2131: PPUSH
2132: LD_VAR 0 9
2136: PPUSH
2137: CALL_OW 52
2141: GO 2175
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
2143: LD_EXP 33
2147: PPUSH
2148: LD_INT 213
2150: PPUSH
2151: LD_INT 87
2153: PPUSH
2154: LD_INT 0
2156: PPUSH
2157: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
2161: LD_EXP 33
2165: PPUSH
2166: LD_EXP 29
2170: PPUSH
2171: CALL_OW 119
// end ; end ; if Sophia then
2175: LD_EXP 35
2179: IFFALSE 2195
// PlaceHumanInUnit ( Sophia , depot ) ;
2181: LD_EXP 35
2185: PPUSH
2186: LD_VAR 0 9
2190: PPUSH
2191: CALL_OW 52
// if Aviradze then
2195: LD_EXP 41
2199: IFFALSE 2215
// PlaceHumanInUnit ( Aviradze , lab ) ;
2201: LD_EXP 41
2205: PPUSH
2206: LD_VAR 0 10
2210: PPUSH
2211: CALL_OW 52
// if Ibrahim then
2215: LD_EXP 32
2219: IFFALSE 2235
// PlaceHumanInUnit ( Ibrahim , lab ) ;
2221: LD_EXP 32
2225: PPUSH
2226: LD_VAR 0 10
2230: PPUSH
2231: CALL_OW 52
// if Markov then
2235: LD_EXP 36
2239: IFFALSE 2255
// PlaceHumanInUnit ( Markov , factory ) ;
2241: LD_EXP 36
2245: PPUSH
2246: LD_VAR 0 8
2250: PPUSH
2251: CALL_OW 52
// if heikeSecondSquad then
2255: LD_EXP 44
2259: IFFALSE 2299
// for i in heikeSecondSquad do
2261: LD_ADDR_VAR 0 2
2265: PUSH
2266: LD_EXP 44
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2297
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
2274: LD_VAR 0 2
2278: PPUSH
2279: LD_INT 190
2281: PPUSH
2282: LD_INT 65
2284: PPUSH
2285: LD_INT 5
2287: PPUSH
2288: LD_INT 0
2290: PPUSH
2291: CALL_OW 50
2295: GO 2271
2297: POP
2298: POP
// if heikeApes then
2299: LD_EXP 45
2303: IFFALSE 2343
// for i in heikeApes do
2305: LD_ADDR_VAR 0 2
2309: PUSH
2310: LD_EXP 45
2314: PUSH
2315: FOR_IN
2316: IFFALSE 2341
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
2318: LD_VAR 0 2
2322: PPUSH
2323: LD_INT 190
2325: PPUSH
2326: LD_INT 70
2328: PPUSH
2329: LD_INT 5
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: CALL_OW 50
2339: GO 2315
2341: POP
2342: POP
// end ;
2343: LD_VAR 0 1
2347: RET
// export function PrepareRolfSquad ; var i , j ; begin
2348: LD_INT 0
2350: PPUSH
2351: PPUSH
2352: PPUSH
// uc_side := 8 ;
2353: LD_ADDR_OWVAR 20
2357: PUSH
2358: LD_INT 8
2360: ST_TO_ADDR
// uc_nation := 2 ;
2361: LD_ADDR_OWVAR 21
2365: PUSH
2366: LD_INT 2
2368: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
2369: LD_ADDR_EXP 42
2373: PUSH
2374: LD_STRING Bergkamp
2376: PPUSH
2377: CALL_OW 25
2381: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
2382: LD_ADDR_EXP 46
2386: PUSH
2387: LD_EXP 42
2391: PUSH
2392: EMPTY
2393: LIST
2394: ST_TO_ADDR
// for i := 1 to 4 do
2395: LD_ADDR_VAR 0 2
2399: PUSH
2400: DOUBLE
2401: LD_INT 1
2403: DEC
2404: ST_TO_ADDR
2405: LD_INT 4
2407: PUSH
2408: FOR_TO
2409: IFFALSE 2489
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
2411: LD_ADDR_VAR 0 3
2415: PUSH
2416: DOUBLE
2417: LD_INT 1
2419: DEC
2420: ST_TO_ADDR
2421: LD_INT 5
2423: PUSH
2424: LD_INT 2
2426: PUSH
2427: LD_INT 3
2429: PUSH
2430: LD_INT 1
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: PUSH
2439: LD_VAR 0 2
2443: ARRAY
2444: PUSH
2445: FOR_TO
2446: IFFALSE 2485
// begin PrepareHuman ( false , i , 5 ) ;
2448: LD_INT 0
2450: PPUSH
2451: LD_VAR 0 2
2455: PPUSH
2456: LD_INT 5
2458: PPUSH
2459: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
2463: LD_ADDR_EXP 46
2467: PUSH
2468: LD_EXP 46
2472: PPUSH
2473: CALL_OW 44
2477: PPUSH
2478: CALL 61368 0 2
2482: ST_TO_ADDR
// end ;
2483: GO 2445
2485: POP
2486: POP
// end ;
2487: GO 2408
2489: POP
2490: POP
// if HexInfo ( 5 , 3 ) then
2491: LD_INT 5
2493: PPUSH
2494: LD_INT 3
2496: PPUSH
2497: CALL_OW 428
2501: IFFALSE 2518
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
2503: LD_INT 5
2505: PPUSH
2506: LD_INT 3
2508: PPUSH
2509: CALL_OW 428
2513: PPUSH
2514: CALL_OW 64
// for i in rolfSquad do
2518: LD_ADDR_VAR 0 2
2522: PUSH
2523: LD_EXP 46
2527: PUSH
2528: FOR_IN
2529: IFFALSE 2665
// begin uc_direction := 2 ;
2531: LD_ADDR_OWVAR 24
2535: PUSH
2536: LD_INT 2
2538: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
2539: LD_VAR 0 2
2543: PPUSH
2544: CALL_OW 257
2548: PUSH
2549: LD_INT 3
2551: EQUAL
2552: IFFALSE 2626
// begin uc_side := 8 ;
2554: LD_ADDR_OWVAR 20
2558: PUSH
2559: LD_INT 8
2561: ST_TO_ADDR
// uc_nation := 2 ;
2562: LD_ADDR_OWVAR 21
2566: PUSH
2567: LD_INT 2
2569: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
2570: LD_INT 13
2572: PPUSH
2573: LD_INT 1
2575: PPUSH
2576: LD_INT 1
2578: PPUSH
2579: LD_INT 27
2581: PPUSH
2582: LD_INT 88
2584: PPUSH
2585: CALL 29495 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
2589: CALL_OW 45
2593: PPUSH
2594: LD_INT 11
2596: PPUSH
2597: LD_INT 0
2599: PPUSH
2600: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
2604: LD_VAR 0 2
2608: PPUSH
2609: LD_INT 5
2611: PPUSH
2612: LD_INT 3
2614: PPUSH
2615: CALL_OW 428
2619: PPUSH
2620: CALL_OW 52
// end else
2624: GO 2641
// PlaceUnitArea ( i , northSpawn , false ) ;
2626: LD_VAR 0 2
2630: PPUSH
2631: LD_INT 11
2633: PPUSH
2634: LD_INT 0
2636: PPUSH
2637: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
2641: LD_VAR 0 2
2645: PPUSH
2646: LD_INT 29
2648: PPUSH
2649: LD_INT 10
2651: PPUSH
2652: CALL_OW 111
// wait ( 0 0$2 ) ;
2656: LD_INT 70
2658: PPUSH
2659: CALL_OW 67
// end ;
2663: GO 2528
2665: POP
2666: POP
// wait ( 0 0$5 ) ;
2667: LD_INT 175
2669: PPUSH
2670: CALL_OW 67
// end ;
2674: LD_VAR 0 1
2678: RET
// export function PrepareRolfBase ; var i , tmp ; begin
2679: LD_INT 0
2681: PPUSH
2682: PPUSH
2683: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
2684: LD_EXP 42
2688: PPUSH
2689: LD_INT 94
2691: PPUSH
2692: LD_INT 63
2694: PPUSH
2695: CALL_OW 428
2699: PPUSH
2700: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
2704: LD_ADDR_VAR 0 3
2708: PUSH
2709: LD_INT 4
2711: PUSH
2712: LD_INT 82
2714: PUSH
2715: LD_INT 64
2717: PUSH
2718: LD_INT 1
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: LIST
2725: LIST
2726: PUSH
2727: LD_INT 31
2729: PUSH
2730: LD_INT 73
2732: PUSH
2733: LD_INT 58
2735: PUSH
2736: LD_INT 0
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: LIST
2743: LIST
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: ST_TO_ADDR
// for i in tmp do
2749: LD_ADDR_VAR 0 2
2753: PUSH
2754: LD_VAR 0 3
2758: PUSH
2759: FOR_IN
2760: IFFALSE 2824
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2762: LD_EXP 46
2766: PPUSH
2767: LD_INT 25
2769: PUSH
2770: LD_INT 2
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PPUSH
2777: CALL_OW 72
2781: PPUSH
2782: LD_VAR 0 2
2786: PUSH
2787: LD_INT 1
2789: ARRAY
2790: PPUSH
2791: LD_VAR 0 2
2795: PUSH
2796: LD_INT 2
2798: ARRAY
2799: PPUSH
2800: LD_VAR 0 2
2804: PUSH
2805: LD_INT 3
2807: ARRAY
2808: PPUSH
2809: LD_VAR 0 2
2813: PUSH
2814: LD_INT 4
2816: ARRAY
2817: PPUSH
2818: CALL_OW 205
2822: GO 2759
2824: POP
2825: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
2826: LD_EXP 46
2830: PUSH
2831: LD_INT 2
2833: ARRAY
2834: PPUSH
2835: LD_INT 63
2837: PPUSH
2838: LD_INT 42
2840: PPUSH
2841: CALL_OW 428
2845: PPUSH
2846: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
2850: LD_EXP 46
2854: PUSH
2855: LD_INT 3
2857: ARRAY
2858: PPUSH
2859: LD_INT 94
2861: PPUSH
2862: LD_INT 63
2864: PPUSH
2865: CALL_OW 428
2869: PPUSH
2870: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2874: LD_INT 35
2876: PPUSH
2877: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
2881: LD_EXP 46
2885: PPUSH
2886: LD_INT 25
2888: PUSH
2889: LD_INT 2
2891: PUSH
2892: EMPTY
2893: LIST
2894: LIST
2895: PUSH
2896: LD_INT 3
2898: PUSH
2899: LD_INT 60
2901: PUSH
2902: EMPTY
2903: LIST
2904: PUSH
2905: EMPTY
2906: LIST
2907: LIST
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: PPUSH
2913: CALL_OW 72
2917: IFFALSE 2874
// rolfScriptBase := true ;
2919: LD_ADDR_EXP 9
2923: PUSH
2924: LD_INT 1
2926: ST_TO_ADDR
// end ;
2927: LD_VAR 0 1
2931: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
2932: LD_EXP 9
2936: PUSH
2937: LD_EXP 42
2941: PPUSH
2942: CALL_OW 255
2946: PUSH
2947: LD_INT 8
2949: EQUAL
2950: AND
2951: IFFALSE 3958
2953: GO 2955
2955: DISABLE
2956: LD_INT 0
2958: PPUSH
2959: PPUSH
2960: PPUSH
2961: PPUSH
2962: PPUSH
2963: PPUSH
2964: PPUSH
2965: PPUSH
2966: PPUSH
2967: PPUSH
// begin enable ;
2968: ENABLE
// if not rolfSquad then
2969: LD_EXP 46
2973: NOT
2974: IFFALSE 2978
// exit ;
2976: GO 3958
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
2978: LD_ADDR_VAR 0 9
2982: PUSH
2983: LD_INT 12
2985: PPUSH
2986: LD_INT 81
2988: PUSH
2989: LD_INT 8
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PPUSH
2996: CALL_OW 70
3000: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
3001: LD_ADDR_VAR 0 5
3005: PUSH
3006: LD_EXP 46
3010: PPUSH
3011: LD_INT 25
3013: PUSH
3014: LD_INT 1
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PPUSH
3021: CALL_OW 72
3025: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
3026: LD_ADDR_VAR 0 6
3030: PUSH
3031: LD_EXP 46
3035: PPUSH
3036: LD_INT 25
3038: PUSH
3039: LD_INT 2
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PPUSH
3046: CALL_OW 72
3050: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
3051: LD_ADDR_VAR 0 8
3055: PUSH
3056: LD_EXP 46
3060: PPUSH
3061: LD_INT 25
3063: PUSH
3064: LD_INT 3
3066: PUSH
3067: EMPTY
3068: LIST
3069: LIST
3070: PPUSH
3071: CALL_OW 72
3075: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
3076: LD_ADDR_VAR 0 7
3080: PUSH
3081: LD_EXP 46
3085: PPUSH
3086: LD_INT 25
3088: PUSH
3089: LD_INT 4
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: PPUSH
3096: CALL_OW 72
3100: ST_TO_ADDR
// if sol then
3101: LD_VAR 0 5
3105: IFFALSE 3403
// for i in sol union Rolf do
3107: LD_ADDR_VAR 0 1
3111: PUSH
3112: LD_VAR 0 5
3116: PUSH
3117: LD_EXP 42
3121: UNION
3122: PUSH
3123: FOR_IN
3124: IFFALSE 3401
// if not IsInUnit ( i ) and not HasTask ( i ) then
3126: LD_VAR 0 1
3130: PPUSH
3131: CALL_OW 310
3135: NOT
3136: PUSH
3137: LD_VAR 0 1
3141: PPUSH
3142: CALL_OW 314
3146: NOT
3147: AND
3148: IFFALSE 3399
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
3150: LD_VAR 0 1
3154: PPUSH
3155: CALL_OW 256
3159: PUSH
3160: LD_INT 500
3162: LESS
3163: PUSH
3164: LD_VAR 0 1
3168: PPUSH
3169: LD_INT 80
3171: PPUSH
3172: LD_INT 49
3174: PPUSH
3175: CALL_OW 297
3179: PUSH
3180: LD_INT 6
3182: GREATER
3183: AND
3184: IFFALSE 3203
// begin ComMoveXY ( i , 80 , 49 ) ;
3186: LD_VAR 0 1
3190: PPUSH
3191: LD_INT 80
3193: PPUSH
3194: LD_INT 49
3196: PPUSH
3197: CALL_OW 111
// continue ;
3201: GO 3123
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
3203: LD_ADDR_VAR 0 4
3207: PUSH
3208: LD_INT 22
3210: PUSH
3211: LD_INT 8
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: PUSH
3218: LD_INT 50
3220: PUSH
3221: EMPTY
3222: LIST
3223: PUSH
3224: LD_INT 2
3226: PUSH
3227: LD_INT 30
3229: PUSH
3230: LD_INT 4
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PUSH
3237: LD_INT 30
3239: PUSH
3240: LD_INT 5
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: LD_INT 30
3249: PUSH
3250: LD_INT 32
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PUSH
3257: LD_INT 30
3259: PUSH
3260: LD_INT 31
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: LIST
3278: PPUSH
3279: CALL_OW 69
3283: ST_TO_ADDR
// if tmp then
3284: LD_VAR 0 4
3288: IFFALSE 3399
// begin for b in tmp do
3290: LD_ADDR_VAR 0 2
3294: PUSH
3295: LD_VAR 0 4
3299: PUSH
3300: FOR_IN
3301: IFFALSE 3397
// begin case GetBType ( b ) of b_armoury , b_barracks :
3303: LD_VAR 0 2
3307: PPUSH
3308: CALL_OW 266
3312: PUSH
3313: LD_INT 4
3315: DOUBLE
3316: EQUAL
3317: IFTRUE 3327
3319: LD_INT 5
3321: DOUBLE
3322: EQUAL
3323: IFTRUE 3327
3325: GO 3338
3327: POP
// p := 6 ; b_breastwork , b_bunker :
3328: LD_ADDR_VAR 0 3
3332: PUSH
3333: LD_INT 6
3335: ST_TO_ADDR
3336: GO 3364
3338: LD_INT 31
3340: DOUBLE
3341: EQUAL
3342: IFTRUE 3352
3344: LD_INT 32
3346: DOUBLE
3347: EQUAL
3348: IFTRUE 3352
3350: GO 3363
3352: POP
// p := 1 ; end ;
3353: LD_ADDR_VAR 0 3
3357: PUSH
3358: LD_INT 1
3360: ST_TO_ADDR
3361: GO 3364
3363: POP
// if UnitsInside ( b ) < p then
3364: LD_VAR 0 2
3368: PPUSH
3369: CALL_OW 313
3373: PUSH
3374: LD_VAR 0 3
3378: LESS
3379: IFFALSE 3395
// ComEnterUnit ( i , b ) ;
3381: LD_VAR 0 1
3385: PPUSH
3386: LD_VAR 0 2
3390: PPUSH
3391: CALL_OW 120
// end ;
3395: GO 3300
3397: POP
3398: POP
// end ; end ;
3399: GO 3123
3401: POP
3402: POP
// if sci then
3403: LD_VAR 0 7
3407: IFFALSE 3462
// for i in sci do
3409: LD_ADDR_VAR 0 1
3413: PUSH
3414: LD_VAR 0 7
3418: PUSH
3419: FOR_IN
3420: IFFALSE 3460
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
3422: LD_VAR 0 1
3426: PPUSH
3427: LD_INT 80
3429: PPUSH
3430: LD_INT 49
3432: PPUSH
3433: CALL_OW 297
3437: PUSH
3438: LD_INT 9
3440: GREATER
3441: IFFALSE 3458
// ComMoveXY ( i , 80 , 49 ) ;
3443: LD_VAR 0 1
3447: PPUSH
3448: LD_INT 80
3450: PPUSH
3451: LD_INT 49
3453: PPUSH
3454: CALL_OW 111
// end ;
3458: GO 3419
3460: POP
3461: POP
// if mech then
3462: LD_VAR 0 8
3466: IFFALSE 3680
// for i in mech do
3468: LD_ADDR_VAR 0 1
3472: PUSH
3473: LD_VAR 0 8
3477: PUSH
3478: FOR_IN
3479: IFFALSE 3678
// begin hasVehicle := IsInUnit ( i ) ;
3481: LD_ADDR_VAR 0 10
3485: PUSH
3486: LD_VAR 0 1
3490: PPUSH
3491: CALL_OW 310
3495: ST_TO_ADDR
// if enemyInBase then
3496: LD_VAR 0 9
3500: IFFALSE 3596
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
3502: LD_VAR 0 10
3506: PUSH
3507: LD_VAR 0 10
3511: PPUSH
3512: CALL_OW 256
3516: PUSH
3517: LD_INT 500
3519: GREATER
3520: AND
3521: IFFALSE 3549
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
3523: LD_VAR 0 10
3527: PPUSH
3528: LD_VAR 0 9
3532: PPUSH
3533: LD_VAR 0 10
3537: PPUSH
3538: CALL_OW 74
3542: PPUSH
3543: CALL_OW 115
3547: GO 3594
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
3549: LD_VAR 0 10
3553: PPUSH
3554: LD_INT 86
3556: PPUSH
3557: LD_INT 49
3559: PPUSH
3560: CALL_OW 297
3564: PUSH
3565: LD_INT 8
3567: GREATER
3568: IFFALSE 3594
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
3570: LD_VAR 0 10
3574: PPUSH
3575: LD_INT 86
3577: PPUSH
3578: LD_INT 49
3580: PPUSH
3581: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
3585: LD_VAR 0 1
3589: PPUSH
3590: CALL 62979 0 1
// end end else
3594: GO 3676
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
3596: LD_VAR 0 1
3600: PPUSH
3601: LD_INT 86
3603: PPUSH
3604: LD_INT 49
3606: PPUSH
3607: CALL_OW 297
3611: PUSH
3612: LD_INT 8
3614: GREATER
3615: IFFALSE 3634
// ComMoveXY ( i , 86 , 49 ) else
3617: LD_VAR 0 1
3621: PPUSH
3622: LD_INT 86
3624: PPUSH
3625: LD_INT 49
3627: PPUSH
3628: CALL_OW 111
3632: GO 3676
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
3634: LD_VAR 0 10
3638: PUSH
3639: LD_VAR 0 10
3643: PPUSH
3644: CALL_OW 256
3648: PUSH
3649: LD_INT 1000
3651: LESS
3652: AND
3653: IFFALSE 3676
// begin SetFuel ( hasVehicle , 100 ) ;
3655: LD_VAR 0 10
3659: PPUSH
3660: LD_INT 100
3662: PPUSH
3663: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
3667: LD_VAR 0 1
3671: PPUSH
3672: CALL 62859 0 1
// end ; end ; end ;
3676: GO 3478
3678: POP
3679: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3680: LD_ADDR_VAR 0 4
3684: PUSH
3685: LD_INT 12
3687: PPUSH
3688: LD_INT 3
3690: PUSH
3691: LD_INT 24
3693: PUSH
3694: LD_INT 1000
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: PUSH
3705: LD_INT 21
3707: PUSH
3708: LD_INT 3
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: PPUSH
3719: CALL_OW 70
3723: ST_TO_ADDR
// if tmp and eng then
3724: LD_VAR 0 4
3728: PUSH
3729: LD_VAR 0 6
3733: AND
3734: IFFALSE 3840
// begin for i in eng do
3736: LD_ADDR_VAR 0 1
3740: PUSH
3741: LD_VAR 0 6
3745: PUSH
3746: FOR_IN
3747: IFFALSE 3838
// if IsInUnit ( i ) then
3749: LD_VAR 0 1
3753: PPUSH
3754: CALL_OW 310
3758: IFFALSE 3771
// ComExitBuilding ( i ) else
3760: LD_VAR 0 1
3764: PPUSH
3765: CALL_OW 122
3769: GO 3836
// if GetLives ( i ) = 1000 then
3771: LD_VAR 0 1
3775: PPUSH
3776: CALL_OW 256
3780: PUSH
3781: LD_INT 1000
3783: EQUAL
3784: IFFALSE 3806
// ComRepairBuilding ( i , tmp [ 1 ] ) else
3786: LD_VAR 0 1
3790: PPUSH
3791: LD_VAR 0 4
3795: PUSH
3796: LD_INT 1
3798: ARRAY
3799: PPUSH
3800: CALL_OW 130
3804: GO 3836
// if GetLives ( i ) < 700 then
3806: LD_VAR 0 1
3810: PPUSH
3811: CALL_OW 256
3815: PUSH
3816: LD_INT 700
3818: LESS
3819: IFFALSE 3836
// ComMoveXY ( i , 80 , 49 ) ;
3821: LD_VAR 0 1
3825: PPUSH
3826: LD_INT 80
3828: PPUSH
3829: LD_INT 49
3831: PPUSH
3832: CALL_OW 111
3836: GO 3746
3838: POP
3839: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
3840: LD_VAR 0 4
3844: NOT
3845: PUSH
3846: LD_VAR 0 6
3850: PPUSH
3851: LD_INT 3
3853: PUSH
3854: LD_INT 54
3856: PUSH
3857: EMPTY
3858: LIST
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: PPUSH
3864: CALL_OW 72
3868: AND
3869: IFFALSE 3958
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
3871: LD_ADDR_VAR 0 1
3875: PUSH
3876: LD_VAR 0 6
3880: PPUSH
3881: LD_INT 3
3883: PUSH
3884: LD_INT 54
3886: PUSH
3887: EMPTY
3888: LIST
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: PPUSH
3894: CALL_OW 72
3898: PUSH
3899: FOR_IN
3900: IFFALSE 3956
// if GetLives ( i ) < 1000 then
3902: LD_VAR 0 1
3906: PPUSH
3907: CALL_OW 256
3911: PUSH
3912: LD_INT 1000
3914: LESS
3915: IFFALSE 3934
// ComMoveXY ( i , 80 , 49 ) else
3917: LD_VAR 0 1
3921: PPUSH
3922: LD_INT 80
3924: PPUSH
3925: LD_INT 49
3927: PPUSH
3928: CALL_OW 111
3932: GO 3954
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
3934: LD_VAR 0 1
3938: PPUSH
3939: LD_INT 86
3941: PPUSH
3942: LD_INT 54
3944: PPUSH
3945: CALL_OW 428
3949: PPUSH
3950: CALL_OW 120
3954: GO 3899
3956: POP
3957: POP
// end ;
3958: PPOPN 10
3960: END
// export function PrepareOmarSquad ; var i , j , p ; begin
3961: LD_INT 0
3963: PPUSH
3964: PPUSH
3965: PPUSH
3966: PPUSH
// uc_side := 5 ;
3967: LD_ADDR_OWVAR 20
3971: PUSH
3972: LD_INT 5
3974: ST_TO_ADDR
// uc_nation := 2 ;
3975: LD_ADDR_OWVAR 21
3979: PUSH
3980: LD_INT 2
3982: ST_TO_ADDR
// omarSquad := [ ] ;
3983: LD_ADDR_EXP 47
3987: PUSH
3988: EMPTY
3989: ST_TO_ADDR
// for i := 1 to 4 do
3990: LD_ADDR_VAR 0 2
3994: PUSH
3995: DOUBLE
3996: LD_INT 1
3998: DEC
3999: ST_TO_ADDR
4000: LD_INT 4
4002: PUSH
4003: FOR_TO
4004: IFFALSE 4127
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
4006: LD_ADDR_VAR 0 3
4010: PUSH
4011: DOUBLE
4012: LD_INT 1
4014: DEC
4015: ST_TO_ADDR
4016: LD_INT 6
4018: PUSH
4019: LD_INT 2
4021: PUSH
4022: LD_INT 2
4024: PUSH
4025: LD_EXP 21
4029: PLUS
4030: PUSH
4031: LD_INT 2
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: LIST
4038: LIST
4039: PUSH
4040: LD_VAR 0 2
4044: ARRAY
4045: PUSH
4046: FOR_TO
4047: IFFALSE 4123
// begin PrepareHuman ( false , i , 5 ) ;
4049: LD_INT 0
4051: PPUSH
4052: LD_VAR 0 2
4056: PPUSH
4057: LD_INT 5
4059: PPUSH
4060: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
4064: LD_ADDR_EXP 47
4068: PUSH
4069: LD_EXP 47
4073: PPUSH
4074: CALL_OW 44
4078: PPUSH
4079: CALL 61368 0 2
4083: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
4084: LD_VAR 0 2
4088: PUSH
4089: LD_INT 1
4091: EQUAL
4092: PUSH
4093: LD_INT 50
4095: PPUSH
4096: CALL_OW 13
4100: AND
4101: IFFALSE 4121
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
4103: LD_EXP 47
4107: PUSH
4108: LD_EXP 47
4112: ARRAY
4113: PPUSH
4114: LD_INT 8
4116: PPUSH
4117: CALL_OW 336
// end ;
4121: GO 4046
4123: POP
4124: POP
// end ;
4125: GO 4003
4127: POP
4128: POP
// if HexInfo ( 340 , 205 ) then
4129: LD_INT 340
4131: PPUSH
4132: LD_INT 205
4134: PPUSH
4135: CALL_OW 428
4139: IFFALSE 4156
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
4141: LD_INT 340
4143: PPUSH
4144: LD_INT 205
4146: PPUSH
4147: CALL_OW 428
4151: PPUSH
4152: CALL_OW 64
// p := 0 ;
4156: LD_ADDR_VAR 0 4
4160: PUSH
4161: LD_INT 0
4163: ST_TO_ADDR
// for i in omarSquad do
4164: LD_ADDR_VAR 0 2
4168: PUSH
4169: LD_EXP 47
4173: PUSH
4174: FOR_IN
4175: IFFALSE 4376
// begin uc_direction := 4 ;
4177: LD_ADDR_OWVAR 24
4181: PUSH
4182: LD_INT 4
4184: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
4185: LD_VAR 0 2
4189: PPUSH
4190: CALL_OW 257
4194: PUSH
4195: LD_INT 3
4197: EQUAL
4198: PUSH
4199: LD_VAR 0 4
4203: PUSH
4204: LD_INT 2
4206: LESS
4207: AND
4208: IFFALSE 4337
// begin p := p + 1 ;
4210: LD_ADDR_VAR 0 4
4214: PUSH
4215: LD_VAR 0 4
4219: PUSH
4220: LD_INT 1
4222: PLUS
4223: ST_TO_ADDR
// uc_side := 5 ;
4224: LD_ADDR_OWVAR 20
4228: PUSH
4229: LD_INT 5
4231: ST_TO_ADDR
// if rand ( 0 , 1 ) then
4232: LD_INT 0
4234: PPUSH
4235: LD_INT 1
4237: PPUSH
4238: CALL_OW 12
4242: IFFALSE 4273
// begin uc_nation := 2 ;
4244: LD_ADDR_OWVAR 21
4248: PUSH
4249: LD_INT 2
4251: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
4252: LD_INT 13
4254: PPUSH
4255: LD_INT 1
4257: PPUSH
4258: LD_INT 1
4260: PPUSH
4261: LD_INT 27
4263: PPUSH
4264: LD_INT 88
4266: PPUSH
4267: CALL 29495 0 5
// end else
4271: GO 4300
// begin uc_nation := 3 ;
4273: LD_ADDR_OWVAR 21
4277: PUSH
4278: LD_INT 3
4280: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
4281: LD_INT 22
4283: PPUSH
4284: LD_INT 1
4286: PPUSH
4287: LD_INT 1
4289: PPUSH
4290: LD_INT 45
4292: PPUSH
4293: LD_INT 88
4295: PPUSH
4296: CALL 29495 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
4300: CALL_OW 45
4304: PPUSH
4305: LD_INT 13
4307: PPUSH
4308: LD_INT 0
4310: PPUSH
4311: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
4315: LD_VAR 0 2
4319: PPUSH
4320: LD_INT 340
4322: PPUSH
4323: LD_INT 205
4325: PPUSH
4326: CALL_OW 428
4330: PPUSH
4331: CALL_OW 52
// end else
4335: GO 4352
// PlaceUnitArea ( i , southSpawn , false ) ;
4337: LD_VAR 0 2
4341: PPUSH
4342: LD_INT 13
4344: PPUSH
4345: LD_INT 0
4347: PPUSH
4348: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
4352: LD_VAR 0 2
4356: PPUSH
4357: LD_INT 333
4359: PPUSH
4360: LD_INT 210
4362: PPUSH
4363: CALL_OW 111
// wait ( 0 0$2 ) ;
4367: LD_INT 70
4369: PPUSH
4370: CALL_OW 67
// end ;
4374: GO 4174
4376: POP
4377: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
4378: LD_EXP 39
4382: PPUSH
4383: LD_INT 340
4385: PPUSH
4386: LD_INT 205
4388: PPUSH
4389: LD_INT 0
4391: PPUSH
4392: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
4396: LD_EXP 39
4400: PPUSH
4401: LD_INT 333
4403: PPUSH
4404: LD_INT 206
4406: PPUSH
4407: CALL_OW 111
// wait ( 0 0$2 ) ;
4411: LD_INT 70
4413: PPUSH
4414: CALL_OW 67
// ComHold ( omarSquad ) ;
4418: LD_EXP 47
4422: PPUSH
4423: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
4427: LD_EXP 39
4431: PUSH
4432: LD_EXP 47
4436: PPUSH
4437: LD_INT 2
4439: PUSH
4440: LD_INT 25
4442: PUSH
4443: LD_INT 1
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PUSH
4450: LD_INT 25
4452: PUSH
4453: LD_INT 8
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: LIST
4464: PPUSH
4465: CALL_OW 72
4469: UNION
4470: PUSH
4471: LD_INT 22
4473: PUSH
4474: LD_INT 5
4476: PUSH
4477: EMPTY
4478: LIST
4479: LIST
4480: PUSH
4481: LD_INT 21
4483: PUSH
4484: LD_INT 2
4486: PUSH
4487: EMPTY
4488: LIST
4489: LIST
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: PPUSH
4495: CALL_OW 69
4499: UNION
4500: PPUSH
4501: LD_INT 315
4503: PPUSH
4504: LD_INT 214
4506: PPUSH
4507: CALL_OW 114
// wait ( 0 0$22 ) ;
4511: LD_INT 770
4513: PPUSH
4514: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
4518: LD_EXP 47
4522: PUSH
4523: LD_EXP 39
4527: UNION
4528: PPUSH
4529: LD_INT 329
4531: PPUSH
4532: LD_INT 231
4534: PPUSH
4535: CALL_OW 114
// end ;
4539: LD_VAR 0 1
4543: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
4544: LD_EXP 10
4548: IFFALSE 5631
4550: GO 4552
4552: DISABLE
4553: LD_INT 0
4555: PPUSH
4556: PPUSH
4557: PPUSH
4558: PPUSH
4559: PPUSH
4560: PPUSH
4561: PPUSH
4562: PPUSH
4563: PPUSH
4564: PPUSH
4565: PPUSH
// begin enable ;
4566: ENABLE
// if not omarSquad then
4567: LD_EXP 47
4571: NOT
4572: IFFALSE 4576
// exit ;
4574: GO 5631
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
4576: LD_ADDR_VAR 0 10
4580: PUSH
4581: LD_INT 14
4583: PPUSH
4584: LD_INT 81
4586: PUSH
4587: LD_INT 5
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PPUSH
4594: CALL_OW 70
4598: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
4599: LD_ADDR_VAR 0 6
4603: PUSH
4604: LD_EXP 47
4608: PPUSH
4609: LD_INT 2
4611: PUSH
4612: LD_INT 25
4614: PUSH
4615: LD_INT 1
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: LD_INT 25
4624: PUSH
4625: LD_INT 8
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: LIST
4636: PPUSH
4637: CALL_OW 72
4641: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
4642: LD_ADDR_VAR 0 7
4646: PUSH
4647: LD_EXP 47
4651: PPUSH
4652: LD_INT 25
4654: PUSH
4655: LD_INT 2
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: PPUSH
4662: CALL_OW 72
4666: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
4667: LD_ADDR_VAR 0 9
4671: PUSH
4672: LD_EXP 47
4676: PPUSH
4677: LD_INT 25
4679: PUSH
4680: LD_INT 3
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: PPUSH
4687: CALL_OW 72
4691: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
4692: LD_ADDR_VAR 0 8
4696: PUSH
4697: LD_EXP 47
4701: PPUSH
4702: LD_INT 25
4704: PUSH
4705: LD_INT 4
4707: PUSH
4708: EMPTY
4709: LIST
4710: LIST
4711: PPUSH
4712: CALL_OW 72
4716: ST_TO_ADDR
// if sol then
4717: LD_VAR 0 6
4721: IFFALSE 5085
// for i in sol do
4723: LD_ADDR_VAR 0 1
4727: PUSH
4728: LD_VAR 0 6
4732: PUSH
4733: FOR_IN
4734: IFFALSE 5083
// if not HasTask ( i ) then
4736: LD_VAR 0 1
4740: PPUSH
4741: CALL_OW 314
4745: NOT
4746: IFFALSE 5081
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
4748: LD_VAR 0 1
4752: PPUSH
4753: CALL_OW 310
4757: NOT
4758: PUSH
4759: LD_VAR 0 1
4763: PPUSH
4764: CALL_OW 256
4768: PUSH
4769: LD_INT 500
4771: LESS
4772: AND
4773: PUSH
4774: LD_VAR 0 1
4778: PPUSH
4779: LD_INT 333
4781: PPUSH
4782: LD_INT 234
4784: PPUSH
4785: CALL_OW 297
4789: PUSH
4790: LD_INT 6
4792: GREATER
4793: AND
4794: IFFALSE 4813
// begin ComMoveXY ( i , 333 , 234 ) ;
4796: LD_VAR 0 1
4800: PPUSH
4801: LD_INT 333
4803: PPUSH
4804: LD_INT 234
4806: PPUSH
4807: CALL_OW 111
// continue ;
4811: GO 4733
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4813: LD_ADDR_VAR 0 5
4817: PUSH
4818: LD_INT 22
4820: PUSH
4821: LD_INT 5
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 58
4830: PUSH
4831: EMPTY
4832: LIST
4833: PUSH
4834: LD_INT 50
4836: PUSH
4837: EMPTY
4838: LIST
4839: PUSH
4840: LD_INT 2
4842: PUSH
4843: LD_INT 30
4845: PUSH
4846: LD_INT 32
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 30
4855: PUSH
4856: LD_INT 31
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: PPUSH
4874: CALL_OW 69
4878: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
4879: LD_VAR 0 5
4883: PUSH
4884: LD_VAR 0 1
4888: PPUSH
4889: CALL_OW 310
4893: PPUSH
4894: CALL_OW 266
4898: PUSH
4899: LD_INT 31
4901: NONEQUAL
4902: AND
4903: IFFALSE 4985
// begin for j in tmp do
4905: LD_ADDR_VAR 0 2
4909: PUSH
4910: LD_VAR 0 5
4914: PUSH
4915: FOR_IN
4916: IFFALSE 4981
// if GetTag ( j ) <> 1 then
4918: LD_VAR 0 2
4922: PPUSH
4923: CALL_OW 110
4927: PUSH
4928: LD_INT 1
4930: NONEQUAL
4931: IFFALSE 4979
// begin SetTag ( j , 1 ) ;
4933: LD_VAR 0 2
4937: PPUSH
4938: LD_INT 1
4940: PPUSH
4941: CALL_OW 109
// if IsInUnit ( i ) then
4945: LD_VAR 0 1
4949: PPUSH
4950: CALL_OW 310
4954: IFFALSE 4965
// ComExit ( i ) ;
4956: LD_VAR 0 1
4960: PPUSH
4961: CALL 61756 0 1
// AddComEnterUnit ( i , j ) ;
4965: LD_VAR 0 1
4969: PPUSH
4970: LD_VAR 0 2
4974: PPUSH
4975: CALL_OW 180
// end ;
4979: GO 4915
4981: POP
4982: POP
// end else
4983: GO 5081
// if not IsInUnit ( i ) then
4985: LD_VAR 0 1
4989: PPUSH
4990: CALL_OW 310
4994: NOT
4995: IFFALSE 5081
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
4997: LD_ADDR_VAR 0 5
5001: PUSH
5002: LD_INT 22
5004: PUSH
5005: LD_INT 5
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: LD_INT 50
5014: PUSH
5015: EMPTY
5016: LIST
5017: PUSH
5018: LD_INT 30
5020: PUSH
5021: LD_INT 4
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: PUSH
5028: EMPTY
5029: LIST
5030: LIST
5031: LIST
5032: PPUSH
5033: CALL_OW 69
5037: ST_TO_ADDR
// if tmp then
5038: LD_VAR 0 5
5042: IFFALSE 5081
// if UnitsInside ( tmp [ 1 ] ) < 6 then
5044: LD_VAR 0 5
5048: PUSH
5049: LD_INT 1
5051: ARRAY
5052: PPUSH
5053: CALL_OW 313
5057: PUSH
5058: LD_INT 6
5060: LESS
5061: IFFALSE 5081
// ComEnterUnit ( i , tmp [ 1 ] ) ;
5063: LD_VAR 0 1
5067: PPUSH
5068: LD_VAR 0 5
5072: PUSH
5073: LD_INT 1
5075: ARRAY
5076: PPUSH
5077: CALL_OW 120
// end ; end ;
5081: GO 4733
5083: POP
5084: POP
// if sci then
5085: LD_VAR 0 8
5089: IFFALSE 5144
// for i in sci do
5091: LD_ADDR_VAR 0 1
5095: PUSH
5096: LD_VAR 0 8
5100: PUSH
5101: FOR_IN
5102: IFFALSE 5142
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
5104: LD_VAR 0 1
5108: PPUSH
5109: LD_INT 333
5111: PPUSH
5112: LD_INT 234
5114: PPUSH
5115: CALL_OW 297
5119: PUSH
5120: LD_INT 9
5122: GREATER
5123: IFFALSE 5140
// ComMoveXY ( i , 333 , 234 ) ;
5125: LD_VAR 0 1
5129: PPUSH
5130: LD_INT 333
5132: PPUSH
5133: LD_INT 234
5135: PPUSH
5136: CALL_OW 111
// end ;
5140: GO 5101
5142: POP
5143: POP
// if mech then
5144: LD_VAR 0 9
5148: IFFALSE 5353
// for i in mech do
5150: LD_ADDR_VAR 0 1
5154: PUSH
5155: LD_VAR 0 9
5159: PUSH
5160: FOR_IN
5161: IFFALSE 5351
// begin hasVehicle := IsInUnit ( i ) ;
5163: LD_ADDR_VAR 0 11
5167: PUSH
5168: LD_VAR 0 1
5172: PPUSH
5173: CALL_OW 310
5177: ST_TO_ADDR
// if enemyInBase then
5178: LD_VAR 0 10
5182: IFFALSE 5269
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
5184: LD_VAR 0 11
5188: PUSH
5189: LD_VAR 0 11
5193: PPUSH
5194: CALL_OW 256
5198: PUSH
5199: LD_INT 500
5201: GREATER
5202: AND
5203: IFFALSE 5231
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
5205: LD_VAR 0 11
5209: PPUSH
5210: LD_VAR 0 10
5214: PPUSH
5215: LD_VAR 0 11
5219: PPUSH
5220: CALL_OW 74
5224: PPUSH
5225: CALL_OW 115
5229: GO 5267
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
5231: LD_VAR 0 11
5235: PPUSH
5236: LD_INT 333
5238: PPUSH
5239: LD_INT 234
5241: PPUSH
5242: CALL_OW 297
5246: PUSH
5247: LD_INT 6
5249: GREATER
5250: IFFALSE 5267
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
5252: LD_VAR 0 11
5256: PPUSH
5257: LD_INT 333
5259: PPUSH
5260: LD_INT 234
5262: PPUSH
5263: CALL_OW 111
// end else
5267: GO 5349
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
5269: LD_VAR 0 1
5273: PPUSH
5274: LD_INT 333
5276: PPUSH
5277: LD_INT 234
5279: PPUSH
5280: CALL_OW 297
5284: PUSH
5285: LD_INT 6
5287: GREATER
5288: IFFALSE 5307
// ComMoveXY ( i , 333 , 234 ) else
5290: LD_VAR 0 1
5294: PPUSH
5295: LD_INT 333
5297: PPUSH
5298: LD_INT 234
5300: PPUSH
5301: CALL_OW 111
5305: GO 5349
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
5307: LD_VAR 0 11
5311: PUSH
5312: LD_VAR 0 11
5316: PPUSH
5317: CALL_OW 256
5321: PUSH
5322: LD_INT 1000
5324: LESS
5325: AND
5326: IFFALSE 5349
// begin SetFuel ( hasVehicle , 100 ) ;
5328: LD_VAR 0 11
5332: PPUSH
5333: LD_INT 100
5335: PPUSH
5336: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
5340: LD_VAR 0 1
5344: PPUSH
5345: CALL 62859 0 1
// end ; end ; end ;
5349: GO 5160
5351: POP
5352: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
5353: LD_ADDR_VAR 0 5
5357: PUSH
5358: LD_INT 14
5360: PPUSH
5361: LD_INT 3
5363: PUSH
5364: LD_INT 24
5366: PUSH
5367: LD_INT 1000
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: PUSH
5374: EMPTY
5375: LIST
5376: LIST
5377: PUSH
5378: LD_INT 21
5380: PUSH
5381: LD_INT 3
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: PUSH
5388: EMPTY
5389: LIST
5390: LIST
5391: PPUSH
5392: CALL_OW 70
5396: ST_TO_ADDR
// if tmp and eng then
5397: LD_VAR 0 5
5401: PUSH
5402: LD_VAR 0 7
5406: AND
5407: IFFALSE 5513
// begin for i in eng do
5409: LD_ADDR_VAR 0 1
5413: PUSH
5414: LD_VAR 0 7
5418: PUSH
5419: FOR_IN
5420: IFFALSE 5511
// if IsInUnit ( i ) then
5422: LD_VAR 0 1
5426: PPUSH
5427: CALL_OW 310
5431: IFFALSE 5444
// ComExitBuilding ( i ) else
5433: LD_VAR 0 1
5437: PPUSH
5438: CALL_OW 122
5442: GO 5509
// if GetLives ( i ) = 1000 then
5444: LD_VAR 0 1
5448: PPUSH
5449: CALL_OW 256
5453: PUSH
5454: LD_INT 1000
5456: EQUAL
5457: IFFALSE 5479
// ComRepairBuilding ( i , tmp [ 1 ] ) else
5459: LD_VAR 0 1
5463: PPUSH
5464: LD_VAR 0 5
5468: PUSH
5469: LD_INT 1
5471: ARRAY
5472: PPUSH
5473: CALL_OW 130
5477: GO 5509
// if GetLives ( i ) < 700 then
5479: LD_VAR 0 1
5483: PPUSH
5484: CALL_OW 256
5488: PUSH
5489: LD_INT 700
5491: LESS
5492: IFFALSE 5509
// ComMoveXY ( i , 333 , 234 ) ;
5494: LD_VAR 0 1
5498: PPUSH
5499: LD_INT 333
5501: PPUSH
5502: LD_INT 234
5504: PPUSH
5505: CALL_OW 111
5509: GO 5419
5511: POP
5512: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
5513: LD_VAR 0 5
5517: NOT
5518: PUSH
5519: LD_VAR 0 7
5523: PPUSH
5524: LD_INT 3
5526: PUSH
5527: LD_INT 54
5529: PUSH
5530: EMPTY
5531: LIST
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PPUSH
5537: CALL_OW 72
5541: AND
5542: IFFALSE 5631
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
5544: LD_ADDR_VAR 0 1
5548: PUSH
5549: LD_VAR 0 7
5553: PPUSH
5554: LD_INT 3
5556: PUSH
5557: LD_INT 54
5559: PUSH
5560: EMPTY
5561: LIST
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PPUSH
5567: CALL_OW 72
5571: PUSH
5572: FOR_IN
5573: IFFALSE 5629
// if GetLives ( i ) < 1000 then
5575: LD_VAR 0 1
5579: PPUSH
5580: CALL_OW 256
5584: PUSH
5585: LD_INT 1000
5587: LESS
5588: IFFALSE 5607
// ComMoveXY ( i , 333 , 234 ) else
5590: LD_VAR 0 1
5594: PPUSH
5595: LD_INT 333
5597: PPUSH
5598: LD_INT 234
5600: PPUSH
5601: CALL_OW 111
5605: GO 5627
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
5607: LD_VAR 0 1
5611: PPUSH
5612: LD_INT 341
5614: PPUSH
5615: LD_INT 232
5617: PPUSH
5618: CALL_OW 428
5622: PPUSH
5623: CALL_OW 120
5627: GO 5572
5629: POP
5630: POP
// end ;
5631: PPOPN 11
5633: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
5634: LD_EXP 39
5638: PPUSH
5639: CALL_OW 256
5643: PUSH
5644: LD_INT 1000
5646: LESS
5647: IFFALSE 5665
5649: GO 5651
5651: DISABLE
// begin enable ;
5652: ENABLE
// SetLives ( Omar , 1000 ) ;
5653: LD_EXP 39
5657: PPUSH
5658: LD_INT 1000
5660: PPUSH
5661: CALL_OW 234
// end ;
5665: END
// every 0 0$1 trigger omarAttack do var i , nearestPoint ;
5666: LD_EXP 23
5670: IFFALSE 6546
5672: GO 5674
5674: DISABLE
5675: LD_INT 0
5677: PPUSH
5678: PPUSH
// begin wait ( 0 0$25 ) ;
5679: LD_INT 875
5681: PPUSH
5682: CALL_OW 67
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
5686: LD_EXP 47
5690: PPUSH
5691: LD_INT 2
5693: PUSH
5694: LD_INT 25
5696: PUSH
5697: LD_INT 1
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: PUSH
5704: LD_INT 25
5706: PUSH
5707: LD_INT 8
5709: PUSH
5710: EMPTY
5711: LIST
5712: LIST
5713: PUSH
5714: EMPTY
5715: LIST
5716: LIST
5717: LIST
5718: PPUSH
5719: CALL_OW 72
5723: PPUSH
5724: CALL_OW 122
// wait ( 0 0$3 ) ;
5728: LD_INT 105
5730: PPUSH
5731: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , 225 , 223 ) ;
5735: LD_EXP 47
5739: PUSH
5740: LD_EXP 39
5744: UNION
5745: PPUSH
5746: LD_INT 225
5748: PPUSH
5749: LD_INT 223
5751: PPUSH
5752: CALL_OW 174
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_type , unit_vehicle ] ] ] ) , 167 , 231 ) ;
5756: LD_INT 22
5758: PUSH
5759: LD_INT 5
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: PUSH
5766: LD_INT 2
5768: PUSH
5769: LD_INT 25
5771: PUSH
5772: LD_INT 1
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: PUSH
5779: LD_INT 25
5781: PUSH
5782: LD_INT 8
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PUSH
5789: LD_INT 21
5791: PUSH
5792: LD_INT 2
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: LIST
5803: LIST
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: PPUSH
5809: CALL_OW 69
5813: PPUSH
5814: LD_INT 167
5816: PPUSH
5817: LD_INT 231
5819: PPUSH
5820: CALL_OW 174
// AddComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 222 , 229 ) ;
5824: LD_EXP 47
5828: PPUSH
5829: LD_INT 25
5831: PUSH
5832: LD_INT 4
5834: PUSH
5835: EMPTY
5836: LIST
5837: LIST
5838: PPUSH
5839: CALL_OW 72
5843: PPUSH
5844: LD_INT 222
5846: PPUSH
5847: LD_INT 229
5849: PPUSH
5850: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5854: LD_INT 35
5856: PPUSH
5857: CALL_OW 67
// for i in omarSquad union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
5861: LD_ADDR_VAR 0 1
5865: PUSH
5866: LD_EXP 47
5870: PUSH
5871: LD_INT 22
5873: PUSH
5874: LD_INT 5
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: PUSH
5881: LD_INT 21
5883: PUSH
5884: LD_INT 2
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: PPUSH
5895: CALL_OW 69
5899: UNION
5900: PUSH
5901: FOR_IN
5902: IFFALSE 6537
// begin if IsDead ( i ) then
5904: LD_VAR 0 1
5908: PPUSH
5909: CALL_OW 301
5913: IFFALSE 5933
// begin omarSquad := omarSquad diff i ;
5915: LD_ADDR_EXP 47
5919: PUSH
5920: LD_EXP 47
5924: PUSH
5925: LD_VAR 0 1
5929: DIFF
5930: ST_TO_ADDR
// continue ;
5931: GO 5901
// end ; if GetClass ( i ) in [ 1 , 8 ] then
5933: LD_VAR 0 1
5937: PPUSH
5938: CALL_OW 257
5942: PUSH
5943: LD_INT 1
5945: PUSH
5946: LD_INT 8
5948: PUSH
5949: EMPTY
5950: LIST
5951: LIST
5952: IN
5953: IFFALSE 6147
// begin if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
5955: LD_VAR 0 1
5959: PPUSH
5960: CALL_OW 256
5964: PUSH
5965: LD_INT 700
5967: LESS
5968: PUSH
5969: LD_VAR 0 1
5973: PPUSH
5974: CALL_OW 110
5978: PUSH
5979: LD_INT 0
5981: EQUAL
5982: AND
5983: IFFALSE 6012
// begin SetTag ( i , 1 ) ;
5985: LD_VAR 0 1
5989: PPUSH
5990: LD_INT 1
5992: PPUSH
5993: CALL_OW 109
// ComMoveXY ( i , 222 , 229 ) ;
5997: LD_VAR 0 1
6001: PPUSH
6002: LD_INT 222
6004: PPUSH
6005: LD_INT 229
6007: PPUSH
6008: CALL_OW 111
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
6012: LD_VAR 0 1
6016: PPUSH
6017: CALL_OW 256
6021: PUSH
6022: LD_INT 1000
6024: EQUAL
6025: PUSH
6026: LD_VAR 0 1
6030: PPUSH
6031: CALL_OW 110
6035: PUSH
6036: LD_INT 1
6038: EQUAL
6039: AND
6040: IFFALSE 6054
// SetTag ( i , 0 ) ;
6042: LD_VAR 0 1
6046: PPUSH
6047: LD_INT 0
6049: PPUSH
6050: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and not HasTask ( i ) then
6054: LD_VAR 0 1
6058: PPUSH
6059: CALL_OW 110
6063: PUSH
6064: LD_INT 0
6066: EQUAL
6067: PUSH
6068: LD_VAR 0 1
6072: PPUSH
6073: CALL_OW 256
6077: PUSH
6078: LD_INT 700
6080: GREATEREQUAL
6081: AND
6082: PUSH
6083: LD_VAR 0 1
6087: PPUSH
6088: CALL_OW 314
6092: NOT
6093: AND
6094: IFFALSE 6147
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6096: LD_INT 18
6098: PPUSH
6099: LD_INT 22
6101: PUSH
6102: LD_INT 3
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PPUSH
6109: CALL_OW 70
6113: IFFALSE 6132
// ComAgressiveMove ( i , 167 , 231 ) else
6115: LD_VAR 0 1
6119: PPUSH
6120: LD_INT 167
6122: PPUSH
6123: LD_INT 231
6125: PPUSH
6126: CALL_OW 114
6130: GO 6147
// ComAgressiveMove ( i , 106 , 153 ) ;
6132: LD_VAR 0 1
6136: PPUSH
6137: LD_INT 106
6139: PPUSH
6140: LD_INT 153
6142: PPUSH
6143: CALL_OW 114
// end ; if GetType ( i ) = unit_vehicle then
6147: LD_VAR 0 1
6151: PPUSH
6152: CALL_OW 247
6156: PUSH
6157: LD_INT 2
6159: EQUAL
6160: IFFALSE 6535
// begin nearestPoint := [ 219 , 219 ] ;
6162: LD_ADDR_VAR 0 2
6166: PUSH
6167: LD_INT 219
6169: PUSH
6170: LD_INT 219
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: ST_TO_ADDR
// if GetDistUnitXY ( i , 156 , 202 ) < GetDistUnitXY ( i , 219 , 219 ) then
6177: LD_VAR 0 1
6181: PPUSH
6182: LD_INT 156
6184: PPUSH
6185: LD_INT 202
6187: PPUSH
6188: CALL_OW 297
6192: PUSH
6193: LD_VAR 0 1
6197: PPUSH
6198: LD_INT 219
6200: PPUSH
6201: LD_INT 219
6203: PPUSH
6204: CALL_OW 297
6208: LESS
6209: IFFALSE 6226
// nearestPoint := [ 156 , 202 ] ;
6211: LD_ADDR_VAR 0 2
6215: PUSH
6216: LD_INT 156
6218: PUSH
6219: LD_INT 202
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: ST_TO_ADDR
// if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
6226: LD_VAR 0 1
6230: PPUSH
6231: CALL_OW 256
6235: PUSH
6236: LD_INT 700
6238: LESS
6239: PUSH
6240: LD_VAR 0 1
6244: PPUSH
6245: CALL_OW 110
6249: PUSH
6250: LD_INT 0
6252: EQUAL
6253: AND
6254: IFFALSE 6295
// begin SetTag ( i , 1 ) ;
6256: LD_VAR 0 1
6260: PPUSH
6261: LD_INT 1
6263: PPUSH
6264: CALL_OW 109
// ComMoveXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) ;
6268: LD_VAR 0 1
6272: PPUSH
6273: LD_VAR 0 2
6277: PUSH
6278: LD_INT 1
6280: ARRAY
6281: PPUSH
6282: LD_VAR 0 2
6286: PUSH
6287: LD_INT 2
6289: ARRAY
6290: PPUSH
6291: CALL_OW 111
// end ; if GetLives ( i ) < 700 and GetTag ( i ) = 1 and IsDrivenBy ( i ) and GetDistUnitXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) < 10 then
6295: LD_VAR 0 1
6299: PPUSH
6300: CALL_OW 256
6304: PUSH
6305: LD_INT 700
6307: LESS
6308: PUSH
6309: LD_VAR 0 1
6313: PPUSH
6314: CALL_OW 110
6318: PUSH
6319: LD_INT 1
6321: EQUAL
6322: AND
6323: PUSH
6324: LD_VAR 0 1
6328: PPUSH
6329: CALL_OW 311
6333: AND
6334: PUSH
6335: LD_VAR 0 1
6339: PPUSH
6340: LD_VAR 0 2
6344: PUSH
6345: LD_INT 1
6347: ARRAY
6348: PPUSH
6349: LD_VAR 0 2
6353: PUSH
6354: LD_INT 2
6356: ARRAY
6357: PPUSH
6358: CALL_OW 297
6362: PUSH
6363: LD_INT 10
6365: LESS
6366: AND
6367: IFFALSE 6378
// ComRepairVehicleAndReturn ( i ) ;
6369: LD_VAR 0 1
6373: PPUSH
6374: CALL 62859 0 1
// if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
6378: LD_VAR 0 1
6382: PPUSH
6383: CALL_OW 256
6387: PUSH
6388: LD_INT 1000
6390: EQUAL
6391: PUSH
6392: LD_VAR 0 1
6396: PPUSH
6397: CALL_OW 110
6401: PUSH
6402: LD_INT 1
6404: EQUAL
6405: AND
6406: PUSH
6407: LD_VAR 0 1
6411: PPUSH
6412: CALL_OW 311
6416: AND
6417: IFFALSE 6431
// SetTag ( i , 0 ) ;
6419: LD_VAR 0 1
6423: PPUSH
6424: LD_INT 0
6426: PPUSH
6427: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and IsDrivenBy ( i ) and not HasTask ( i ) then
6431: LD_VAR 0 1
6435: PPUSH
6436: CALL_OW 110
6440: PUSH
6441: LD_INT 0
6443: EQUAL
6444: PUSH
6445: LD_VAR 0 1
6449: PPUSH
6450: CALL_OW 256
6454: PUSH
6455: LD_INT 700
6457: GREATEREQUAL
6458: AND
6459: PUSH
6460: LD_VAR 0 1
6464: PPUSH
6465: CALL_OW 311
6469: AND
6470: PUSH
6471: LD_VAR 0 1
6475: PPUSH
6476: CALL_OW 314
6480: NOT
6481: AND
6482: IFFALSE 6535
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6484: LD_INT 18
6486: PPUSH
6487: LD_INT 22
6489: PUSH
6490: LD_INT 3
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PPUSH
6497: CALL_OW 70
6501: IFFALSE 6520
// ComAgressiveMove ( i , 167 , 231 ) else
6503: LD_VAR 0 1
6507: PPUSH
6508: LD_INT 167
6510: PPUSH
6511: LD_INT 231
6513: PPUSH
6514: CALL_OW 114
6518: GO 6535
// ComAgressiveMove ( i , 106 , 153 ) ;
6520: LD_VAR 0 1
6524: PPUSH
6525: LD_INT 106
6527: PPUSH
6528: LD_INT 153
6530: PPUSH
6531: CALL_OW 114
// end ; end ;
6535: GO 5901
6537: POP
6538: POP
// until not omarSquad ;
6539: LD_EXP 47
6543: NOT
6544: IFFALSE 5854
// end ; end_of_file
6546: PPOPN 2
6548: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
6549: LD_INT 0
6551: PPUSH
// uc_side := side ;
6552: LD_ADDR_OWVAR 20
6556: PUSH
6557: LD_VAR 0 1
6561: ST_TO_ADDR
// uc_nation := nation ;
6562: LD_ADDR_OWVAR 21
6566: PUSH
6567: LD_VAR 0 2
6571: ST_TO_ADDR
// vc_chassis := chassis ;
6572: LD_ADDR_OWVAR 37
6576: PUSH
6577: LD_VAR 0 3
6581: ST_TO_ADDR
// vc_engine := engine ;
6582: LD_ADDR_OWVAR 39
6586: PUSH
6587: LD_VAR 0 4
6591: ST_TO_ADDR
// vc_control := control ;
6592: LD_ADDR_OWVAR 38
6596: PUSH
6597: LD_VAR 0 5
6601: ST_TO_ADDR
// vc_weapon := weapon ;
6602: LD_ADDR_OWVAR 40
6606: PUSH
6607: LD_VAR 0 6
6611: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6612: LD_ADDR_OWVAR 41
6616: PUSH
6617: LD_VAR 0 7
6621: ST_TO_ADDR
// result := CreateVehicle ;
6622: LD_ADDR_VAR 0 8
6626: PUSH
6627: CALL_OW 45
6631: ST_TO_ADDR
// end ;
6632: LD_VAR 0 8
6636: RET
// export function SayX ( units , ident ) ; var i ; begin
6637: LD_INT 0
6639: PPUSH
6640: PPUSH
// result := false ;
6641: LD_ADDR_VAR 0 3
6645: PUSH
6646: LD_INT 0
6648: ST_TO_ADDR
// if not units then
6649: LD_VAR 0 1
6653: NOT
6654: IFFALSE 6658
// exit ;
6656: GO 6712
// for i in units do
6658: LD_ADDR_VAR 0 4
6662: PUSH
6663: LD_VAR 0 1
6667: PUSH
6668: FOR_IN
6669: IFFALSE 6710
// if IsOk ( i ) then
6671: LD_VAR 0 4
6675: PPUSH
6676: CALL_OW 302
6680: IFFALSE 6708
// begin Say ( i , ident ) ;
6682: LD_VAR 0 4
6686: PPUSH
6687: LD_VAR 0 2
6691: PPUSH
6692: CALL_OW 88
// result := i ;
6696: LD_ADDR_VAR 0 3
6700: PUSH
6701: LD_VAR 0 4
6705: ST_TO_ADDR
// break ;
6706: GO 6710
// end ;
6708: GO 6668
6710: POP
6711: POP
// end ;
6712: LD_VAR 0 3
6716: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
6717: LD_INT 0
6719: PPUSH
6720: PPUSH
// InitUc ;
6721: CALL_OW 18
// InitHc ;
6725: CALL_OW 19
// uc_side := 0 ;
6729: LD_ADDR_OWVAR 20
6733: PUSH
6734: LD_INT 0
6736: ST_TO_ADDR
// uc_nation := 0 ;
6737: LD_ADDR_OWVAR 21
6741: PUSH
6742: LD_INT 0
6744: ST_TO_ADDR
// for i = 1 to amount do
6745: LD_ADDR_VAR 0 4
6749: PUSH
6750: DOUBLE
6751: LD_INT 1
6753: DEC
6754: ST_TO_ADDR
6755: LD_VAR 0 2
6759: PUSH
6760: FOR_TO
6761: IFFALSE 6843
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
6763: LD_ADDR_OWVAR 29
6767: PUSH
6768: LD_INT 9
6770: PPUSH
6771: LD_INT 12
6773: PPUSH
6774: CALL_OW 12
6778: PUSH
6779: LD_INT 9
6781: PPUSH
6782: LD_INT 12
6784: PPUSH
6785: CALL_OW 12
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
6794: LD_ADDR_OWVAR 35
6798: PUSH
6799: LD_INT 1
6801: NEG
6802: PPUSH
6803: LD_INT 1
6805: PPUSH
6806: CALL_OW 12
6810: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
6811: LD_INT 0
6813: PPUSH
6814: LD_INT 12
6816: PPUSH
6817: LD_INT 1
6819: PPUSH
6820: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
6824: CALL_OW 44
6828: PPUSH
6829: LD_VAR 0 1
6833: PPUSH
6834: LD_INT 0
6836: PPUSH
6837: CALL_OW 49
// end ;
6841: GO 6760
6843: POP
6844: POP
// InitHc ;
6845: CALL_OW 19
// end ;
6849: LD_VAR 0 3
6853: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
6854: LD_INT 0
6856: PPUSH
6857: PPUSH
// uc_side := 0 ;
6858: LD_ADDR_OWVAR 20
6862: PUSH
6863: LD_INT 0
6865: ST_TO_ADDR
// uc_nation := 0 ;
6866: LD_ADDR_OWVAR 21
6870: PUSH
6871: LD_INT 0
6873: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 ] [ Difficulty ] ) ;
6874: LD_INT 7
6876: PPUSH
6877: LD_INT 6
6879: PUSH
6880: LD_INT 5
6882: PUSH
6883: LD_INT 4
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: LIST
6890: PUSH
6891: LD_OWVAR 67
6895: ARRAY
6896: PPUSH
6897: CALL 6717 0 2
// for i = 1 to 2 do
6901: LD_ADDR_VAR 0 4
6905: PUSH
6906: DOUBLE
6907: LD_INT 1
6909: DEC
6910: ST_TO_ADDR
6911: LD_INT 2
6913: PUSH
6914: FOR_TO
6915: IFFALSE 6954
// begin vc_chassis := class_mastodont ;
6917: LD_ADDR_OWVAR 37
6921: PUSH
6922: LD_EXP 75
6926: ST_TO_ADDR
// vc_control := control_rider ;
6927: LD_ADDR_OWVAR 38
6931: PUSH
6932: LD_INT 4
6934: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
6935: CALL_OW 45
6939: PPUSH
6940: LD_VAR 0 1
6944: PPUSH
6945: LD_INT 0
6947: PPUSH
6948: CALL 60282 0 3
// end ;
6952: GO 6914
6954: POP
6955: POP
// for i := 1 to 4 do
6956: LD_ADDR_VAR 0 4
6960: PUSH
6961: DOUBLE
6962: LD_INT 1
6964: DEC
6965: ST_TO_ADDR
6966: LD_INT 4
6968: PUSH
6969: FOR_TO
6970: IFFALSE 7009
// begin hc_class := class_horse ;
6972: LD_ADDR_OWVAR 28
6976: PUSH
6977: LD_EXP 76
6981: ST_TO_ADDR
// hc_gallery :=  ;
6982: LD_ADDR_OWVAR 33
6986: PUSH
6987: LD_STRING 
6989: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
6990: CALL_OW 44
6994: PPUSH
6995: LD_VAR 0 1
6999: PPUSH
7000: LD_INT 0
7002: PPUSH
7003: CALL_OW 49
// end ;
7007: GO 6969
7009: POP
7010: POP
// for i = 1 to 5 do
7011: LD_ADDR_VAR 0 4
7015: PUSH
7016: DOUBLE
7017: LD_INT 1
7019: DEC
7020: ST_TO_ADDR
7021: LD_INT 5
7023: PUSH
7024: FOR_TO
7025: IFFALSE 7079
// begin hc_class = class_tiger ;
7027: LD_ADDR_OWVAR 28
7031: PUSH
7032: LD_INT 14
7034: ST_TO_ADDR
// hc_gallery =  ;
7035: LD_ADDR_OWVAR 33
7039: PUSH
7040: LD_STRING 
7042: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
7043: LD_ADDR_OWVAR 35
7047: PUSH
7048: LD_INT 7
7050: NEG
7051: PPUSH
7052: LD_INT 7
7054: PPUSH
7055: CALL_OW 12
7059: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
7060: CALL_OW 44
7064: PPUSH
7065: LD_VAR 0 1
7069: PPUSH
7070: LD_INT 0
7072: PPUSH
7073: CALL 60282 0 3
// end ;
7077: GO 7024
7079: POP
7080: POP
// for i := 1 to 4 do
7081: LD_ADDR_VAR 0 4
7085: PUSH
7086: DOUBLE
7087: LD_INT 1
7089: DEC
7090: ST_TO_ADDR
7091: LD_INT 4
7093: PUSH
7094: FOR_TO
7095: IFFALSE 7132
// begin hc_class := class_phororhacos ;
7097: LD_ADDR_OWVAR 28
7101: PUSH
7102: LD_INT 18
7104: ST_TO_ADDR
// hc_gallery :=  ;
7105: LD_ADDR_OWVAR 33
7109: PUSH
7110: LD_STRING 
7112: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7113: CALL_OW 44
7117: PPUSH
7118: LD_VAR 0 1
7122: PPUSH
7123: LD_INT 0
7125: PPUSH
7126: CALL_OW 49
// end ;
7130: GO 7094
7132: POP
7133: POP
// for i := 1 to 4 do
7134: LD_ADDR_VAR 0 4
7138: PUSH
7139: DOUBLE
7140: LD_INT 1
7142: DEC
7143: ST_TO_ADDR
7144: LD_INT 4
7146: PUSH
7147: FOR_TO
7148: IFFALSE 7185
// begin hc_class := class_baggie ;
7150: LD_ADDR_OWVAR 28
7154: PUSH
7155: LD_INT 13
7157: ST_TO_ADDR
// hc_gallery :=  ;
7158: LD_ADDR_OWVAR 33
7162: PUSH
7163: LD_STRING 
7165: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7166: CALL_OW 44
7170: PPUSH
7171: LD_VAR 0 1
7175: PPUSH
7176: LD_INT 0
7178: PPUSH
7179: CALL_OW 49
// end ;
7183: GO 7147
7185: POP
7186: POP
// for i := 1 to 7 do
7187: LD_ADDR_VAR 0 4
7191: PUSH
7192: DOUBLE
7193: LD_INT 1
7195: DEC
7196: ST_TO_ADDR
7197: LD_INT 7
7199: PUSH
7200: FOR_TO
7201: IFFALSE 7238
// begin hc_class := class_frog ;
7203: LD_ADDR_OWVAR 28
7207: PUSH
7208: LD_INT 19
7210: ST_TO_ADDR
// hc_gallery :=  ;
7211: LD_ADDR_OWVAR 33
7215: PUSH
7216: LD_STRING 
7218: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
7219: CALL_OW 44
7223: PPUSH
7224: LD_VAR 0 2
7228: PPUSH
7229: LD_INT 0
7231: PPUSH
7232: CALL_OW 49
// end ;
7236: GO 7200
7238: POP
7239: POP
// end ;
7240: LD_VAR 0 3
7244: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
7245: LD_INT 0
7247: PPUSH
7248: PPUSH
7249: PPUSH
// if not observer or not unit then
7250: LD_VAR 0 1
7254: NOT
7255: PUSH
7256: LD_VAR 0 2
7260: NOT
7261: OR
7262: IFFALSE 7266
// exit ;
7264: GO 7314
// if not See ( GetSide ( observer ) , unit ) then
7266: LD_VAR 0 1
7270: PPUSH
7271: CALL_OW 255
7275: PPUSH
7276: LD_VAR 0 2
7280: PPUSH
7281: CALL_OW 292
7285: NOT
7286: IFFALSE 7290
// exit ;
7288: GO 7314
// result := GetDistUnits ( observer , unit ) < 12 ;
7290: LD_ADDR_VAR 0 3
7294: PUSH
7295: LD_VAR 0 1
7299: PPUSH
7300: LD_VAR 0 2
7304: PPUSH
7305: CALL_OW 296
7309: PUSH
7310: LD_INT 12
7312: LESS
7313: ST_TO_ADDR
// end ;
7314: LD_VAR 0 3
7318: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
7319: LD_INT 0
7321: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
7322: LD_VAR 0 2
7326: PUSH
7327: LD_INT 1
7329: ARRAY
7330: PPUSH
7331: LD_VAR 0 2
7335: PUSH
7336: LD_INT 2
7338: ARRAY
7339: PPUSH
7340: CALL_OW 488
7344: PUSH
7345: LD_VAR 0 2
7349: PUSH
7350: LD_INT 1
7352: ARRAY
7353: PPUSH
7354: LD_VAR 0 2
7358: PUSH
7359: LD_INT 2
7361: ARRAY
7362: PPUSH
7363: CALL_OW 428
7367: PUSH
7368: LD_INT 0
7370: EQUAL
7371: AND
7372: IFFALSE 7406
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
7374: LD_VAR 0 1
7378: PPUSH
7379: LD_VAR 0 2
7383: PUSH
7384: LD_INT 1
7386: ARRAY
7387: PPUSH
7388: LD_VAR 0 2
7392: PUSH
7393: LD_INT 2
7395: ARRAY
7396: PPUSH
7397: LD_VAR 0 3
7401: PPUSH
7402: CALL_OW 48
// end ;
7406: LD_VAR 0 4
7410: RET
// export function ReverseArray ( array ) ; var i ; begin
7411: LD_INT 0
7413: PPUSH
7414: PPUSH
// if not array then
7415: LD_VAR 0 1
7419: NOT
7420: IFFALSE 7424
// exit ;
7422: GO 7482
// result := [ ] ;
7424: LD_ADDR_VAR 0 2
7428: PUSH
7429: EMPTY
7430: ST_TO_ADDR
// for i := 1 to array do
7431: LD_ADDR_VAR 0 3
7435: PUSH
7436: DOUBLE
7437: LD_INT 1
7439: DEC
7440: ST_TO_ADDR
7441: LD_VAR 0 1
7445: PUSH
7446: FOR_TO
7447: IFFALSE 7480
// result := Insert ( result , 1 , array [ i ] ) ;
7449: LD_ADDR_VAR 0 2
7453: PUSH
7454: LD_VAR 0 2
7458: PPUSH
7459: LD_INT 1
7461: PPUSH
7462: LD_VAR 0 1
7466: PUSH
7467: LD_VAR 0 3
7471: ARRAY
7472: PPUSH
7473: CALL_OW 2
7477: ST_TO_ADDR
7478: GO 7446
7480: POP
7481: POP
// end ;
7482: LD_VAR 0 2
7486: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
7487: LD_INT 0
7489: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
7490: LD_VAR 0 1
7494: PPUSH
7495: LD_VAR 0 2
7499: PPUSH
7500: LD_VAR 0 3
7504: PPUSH
7505: LD_VAR 0 4
7509: PPUSH
7510: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
7514: LD_VAR 0 1
7518: PPUSH
7519: LD_VAR 0 2
7523: PPUSH
7524: LD_VAR 0 3
7528: PPUSH
7529: CALL_OW 331
// end ;
7533: LD_VAR 0 5
7537: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
7538: LD_INT 0
7540: PPUSH
// if not units then
7541: LD_VAR 0 1
7545: NOT
7546: IFFALSE 7550
// exit ;
7548: GO 7633
// result := true ;
7550: LD_ADDR_VAR 0 4
7554: PUSH
7555: LD_INT 1
7557: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
7558: LD_VAR 0 1
7562: PPUSH
7563: LD_INT 26
7565: PUSH
7566: LD_INT 1
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PPUSH
7573: CALL_OW 72
7577: PUSH
7578: LD_INT 1
7580: ARRAY
7581: PPUSH
7582: LD_VAR 0 2
7586: PPUSH
7587: CALL_OW 88
7591: NOT
7592: IFFALSE 7633
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
7594: LD_ADDR_VAR 0 4
7598: PUSH
7599: LD_VAR 0 1
7603: PPUSH
7604: LD_INT 26
7606: PUSH
7607: LD_INT 2
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: PPUSH
7614: CALL_OW 72
7618: PUSH
7619: LD_INT 1
7621: ARRAY
7622: PPUSH
7623: LD_VAR 0 3
7627: PPUSH
7628: CALL_OW 88
7632: ST_TO_ADDR
// end ;
7633: LD_VAR 0 4
7637: RET
// export function SeeGroup ( side , group ) ; var i ; begin
7638: LD_INT 0
7640: PPUSH
7641: PPUSH
// if not group then
7642: LD_VAR 0 2
7646: NOT
7647: IFFALSE 7651
// exit ;
7649: GO 7696
// for i in group do
7651: LD_ADDR_VAR 0 4
7655: PUSH
7656: LD_VAR 0 2
7660: PUSH
7661: FOR_IN
7662: IFFALSE 7694
// if See ( side , i ) then
7664: LD_VAR 0 1
7668: PPUSH
7669: LD_VAR 0 4
7673: PPUSH
7674: CALL_OW 292
7678: IFFALSE 7692
// begin result := true ;
7680: LD_ADDR_VAR 0 3
7684: PUSH
7685: LD_INT 1
7687: ST_TO_ADDR
// exit ;
7688: POP
7689: POP
7690: GO 7696
// end ;
7692: GO 7661
7694: POP
7695: POP
// end ; end_of_file
7696: LD_VAR 0 3
7700: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
7701: LD_INT 0
7703: PPUSH
7704: PPUSH
7705: PPUSH
7706: PPUSH
7707: PPUSH
7708: PPUSH
7709: PPUSH
// uc_side := 3 ;
7710: LD_ADDR_OWVAR 20
7714: PUSH
7715: LD_INT 3
7717: ST_TO_ADDR
// uc_nation := 3 ;
7718: LD_ADDR_OWVAR 21
7722: PUSH
7723: LD_INT 3
7725: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
7726: LD_ADDR_EXP 48
7730: PUSH
7731: LD_STRING Morozov
7733: PPUSH
7734: CALL_OW 25
7738: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
7739: LD_EXP 48
7743: PPUSH
7744: LD_INT 52
7746: PPUSH
7747: CALL_OW 52
// if not gaidarKilled then
7751: LD_EXP 7
7755: NOT
7756: IFFALSE 7789
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
7758: LD_ADDR_EXP 49
7762: PUSH
7763: LD_STRING Gaydar
7765: PPUSH
7766: LD_INT 0
7768: PPUSH
7769: LD_STRING 
7771: PPUSH
7772: CALL 24631 0 3
7776: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
7777: LD_EXP 49
7781: PPUSH
7782: LD_INT 52
7784: PPUSH
7785: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
7789: LD_INT 52
7791: PPUSH
7792: LD_STRING lenin
7794: PPUSH
7795: CALL_OW 500
// ruOutsiders := [ ] ;
7799: LD_ADDR_EXP 51
7803: PUSH
7804: EMPTY
7805: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
7806: LD_ADDR_EXP 53
7810: PUSH
7811: EMPTY
7812: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
7813: LD_ADDR_EXP 54
7817: PUSH
7818: EMPTY
7819: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
7820: LD_ADDR_EXP 55
7824: PUSH
7825: EMPTY
7826: ST_TO_ADDR
// ruAttackers := [ ] ;
7827: LD_ADDR_EXP 56
7831: PUSH
7832: EMPTY
7833: ST_TO_ADDR
// waveStrength := 0 ;
7834: LD_ADDR_EXP 57
7838: PUSH
7839: LD_INT 0
7841: ST_TO_ADDR
// if not gaidarKilled then
7842: LD_EXP 7
7846: NOT
7847: IFFALSE 7857
// waveStrength := 2 ;
7849: LD_ADDR_EXP 57
7853: PUSH
7854: LD_INT 2
7856: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
7857: LD_ADDR_VAR 0 7
7861: PUSH
7862: LD_INT 22
7864: PUSH
7865: LD_INT 3
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: LD_INT 21
7874: PUSH
7875: LD_INT 3
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: PPUSH
7886: CALL_OW 69
7890: ST_TO_ADDR
// for i in tmp do
7891: LD_ADDR_VAR 0 2
7895: PUSH
7896: LD_VAR 0 7
7900: PUSH
7901: FOR_IN
7902: IFFALSE 7935
// SetBLevel ( i , [ 5 , 5 , 6 ] [ Difficulty ] ) ;
7904: LD_VAR 0 2
7908: PPUSH
7909: LD_INT 5
7911: PUSH
7912: LD_INT 5
7914: PUSH
7915: LD_INT 6
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: LIST
7922: PUSH
7923: LD_OWVAR 67
7927: ARRAY
7928: PPUSH
7929: CALL_OW 241
7933: GO 7901
7935: POP
7936: POP
// for i := 1 to 3 do
7937: LD_ADDR_VAR 0 2
7941: PUSH
7942: DOUBLE
7943: LD_INT 1
7945: DEC
7946: ST_TO_ADDR
7947: LD_INT 3
7949: PUSH
7950: FOR_TO
7951: IFFALSE 7989
// begin PrepareHuman ( false , 1 , 0 ) ;
7953: LD_INT 0
7955: PPUSH
7956: LD_INT 1
7958: PPUSH
7959: LD_INT 0
7961: PPUSH
7962: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
7966: CALL_OW 44
7970: PPUSH
7971: LD_INT 75
7973: PPUSH
7974: LD_INT 49
7976: PPUSH
7977: LD_INT 3
7979: PPUSH
7980: LD_INT 0
7982: PPUSH
7983: CALL_OW 50
// end ;
7987: GO 7950
7989: POP
7990: POP
// for i := 1 to 4 do
7991: LD_ADDR_VAR 0 2
7995: PUSH
7996: DOUBLE
7997: LD_INT 1
7999: DEC
8000: ST_TO_ADDR
8001: LD_INT 4
8003: PUSH
8004: FOR_TO
8005: IFFALSE 8051
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
8007: LD_INT 0
8009: PPUSH
8010: LD_INT 1
8012: PPUSH
8013: LD_INT 2
8015: PPUSH
8016: CALL_OW 12
8020: PPUSH
8021: LD_INT 0
8023: PPUSH
8024: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
8028: CALL_OW 44
8032: PPUSH
8033: LD_INT 330
8035: PPUSH
8036: LD_INT 231
8038: PPUSH
8039: LD_INT 5
8041: PPUSH
8042: LD_INT 0
8044: PPUSH
8045: CALL_OW 50
// end ;
8049: GO 8004
8051: POP
8052: POP
// hc_class := 1 ;
8053: LD_ADDR_OWVAR 28
8057: PUSH
8058: LD_INT 1
8060: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
8061: CALL_OW 44
8065: PPUSH
8066: LD_INT 324
8068: PPUSH
8069: LD_INT 219
8071: PPUSH
8072: CALL_OW 428
8076: PPUSH
8077: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
8081: CALL_OW 44
8085: PPUSH
8086: LD_INT 316
8088: PPUSH
8089: LD_INT 223
8091: PPUSH
8092: CALL_OW 428
8096: PPUSH
8097: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
8101: LD_ADDR_VAR 0 7
8105: PUSH
8106: LD_INT 172
8108: PPUSH
8109: LD_INT 198
8111: PPUSH
8112: CALL_OW 428
8116: PPUSH
8117: CALL_OW 274
8121: PUSH
8122: LD_INT 189
8124: PPUSH
8125: LD_INT 156
8127: PPUSH
8128: CALL_OW 428
8132: PPUSH
8133: CALL_OW 274
8137: PUSH
8138: LD_INT 341
8140: PPUSH
8141: LD_INT 232
8143: PPUSH
8144: CALL_OW 428
8148: PPUSH
8149: CALL_OW 274
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: LIST
8158: ST_TO_ADDR
// for i in tmp do
8159: LD_ADDR_VAR 0 2
8163: PUSH
8164: LD_VAR 0 7
8168: PUSH
8169: FOR_IN
8170: IFFALSE 8204
// begin SetResourceType ( i , mat_cans , 200 ) ;
8172: LD_VAR 0 2
8176: PPUSH
8177: LD_INT 1
8179: PPUSH
8180: LD_INT 200
8182: PPUSH
8183: CALL_OW 277
// SetResourceType ( i , mat_oil , 200 ) ;
8187: LD_VAR 0 2
8191: PPUSH
8192: LD_INT 2
8194: PPUSH
8195: LD_INT 200
8197: PPUSH
8198: CALL_OW 277
// end ;
8202: GO 8169
8204: POP
8205: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 177 , 114 ] , [ 138 , 96 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
8206: LD_ADDR_VAR 0 7
8210: PUSH
8211: LD_INT 198
8213: PUSH
8214: LD_INT 158
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: PUSH
8221: LD_INT 203
8223: PUSH
8224: LD_INT 166
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: PUSH
8231: LD_INT 177
8233: PUSH
8234: LD_INT 114
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: PUSH
8241: LD_INT 138
8243: PUSH
8244: LD_INT 96
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: PUSH
8251: LD_INT 181
8253: PUSH
8254: LD_INT 209
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: PUSH
8261: LD_INT 178
8263: PUSH
8264: LD_INT 196
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PUSH
8271: LD_INT 181
8273: PUSH
8274: LD_INT 212
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: ST_TO_ADDR
// for i := 1 to tmp do
8290: LD_ADDR_VAR 0 2
8294: PUSH
8295: DOUBLE
8296: LD_INT 1
8298: DEC
8299: ST_TO_ADDR
8300: LD_VAR 0 7
8304: PUSH
8305: FOR_TO
8306: IFFALSE 8423
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
8308: LD_INT 0
8310: PPUSH
8311: LD_INT 1
8313: PPUSH
8314: LD_INT 4
8316: PUSH
8317: LD_INT 5
8319: PUSH
8320: LD_INT 6
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: LIST
8327: PUSH
8328: LD_OWVAR 67
8332: ARRAY
8333: PPUSH
8334: CALL_OW 380
// un := CreateHuman ;
8338: LD_ADDR_VAR 0 5
8342: PUSH
8343: CALL_OW 44
8347: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
8348: LD_ADDR_VAR 0 4
8352: PUSH
8353: LD_VAR 0 7
8357: PUSH
8358: LD_VAR 0 2
8362: ARRAY
8363: PUSH
8364: LD_INT 1
8366: ARRAY
8367: PPUSH
8368: LD_VAR 0 7
8372: PUSH
8373: LD_VAR 0 2
8377: ARRAY
8378: PUSH
8379: LD_INT 2
8381: ARRAY
8382: PPUSH
8383: CALL_OW 428
8387: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
8388: LD_VAR 0 5
8392: PPUSH
8393: LD_VAR 0 4
8397: PPUSH
8398: CALL 57202 0 1
8402: PPUSH
8403: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8407: LD_VAR 0 5
8411: PPUSH
8412: LD_VAR 0 4
8416: PPUSH
8417: CALL_OW 52
// end ;
8421: GO 8305
8423: POP
8424: POP
// for i := 1 to 3 do
8425: LD_ADDR_VAR 0 2
8429: PUSH
8430: DOUBLE
8431: LD_INT 1
8433: DEC
8434: ST_TO_ADDR
8435: LD_INT 3
8437: PUSH
8438: FOR_TO
8439: IFFALSE 8494
// begin InitHc ;
8441: CALL_OW 19
// uc_nation := 0 ;
8445: LD_ADDR_OWVAR 21
8449: PUSH
8450: LD_INT 0
8452: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
8453: LD_ADDR_OWVAR 28
8457: PUSH
8458: LD_INT 16
8460: ST_TO_ADDR
// un := CreateHuman ;
8461: LD_ADDR_VAR 0 5
8465: PUSH
8466: CALL_OW 44
8470: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
8471: LD_VAR 0 5
8475: PPUSH
8476: LD_INT 194
8478: PPUSH
8479: LD_INT 164
8481: PPUSH
8482: LD_INT 6
8484: PPUSH
8485: LD_INT 0
8487: PPUSH
8488: CALL_OW 50
// end ;
8492: GO 8438
8494: POP
8495: POP
// uc_nation := 3 ;
8496: LD_ADDR_OWVAR 21
8500: PUSH
8501: LD_INT 3
8503: ST_TO_ADDR
// if Difficulty > 1 then
8504: LD_OWVAR 67
8508: PUSH
8509: LD_INT 1
8511: GREATER
8512: IFFALSE 8768
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
8514: LD_INT 24
8516: PPUSH
8517: LD_INT 1
8519: PPUSH
8520: LD_INT 1
8522: PPUSH
8523: LD_INT 44
8525: PPUSH
8526: LD_INT 10
8528: PPUSH
8529: CALL 29495 0 5
// un := CreateVehicle ;
8533: LD_ADDR_VAR 0 5
8537: PUSH
8538: CALL_OW 45
8542: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 162 , 1 , false ) ;
8543: LD_VAR 0 5
8547: PPUSH
8548: LD_INT 199
8550: PPUSH
8551: LD_INT 162
8553: PPUSH
8554: LD_INT 1
8556: PPUSH
8557: LD_INT 0
8559: PPUSH
8560: CALL 63299 0 5
// ComHold ( un ) ;
8564: LD_VAR 0 5
8568: PPUSH
8569: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
8573: LD_INT 0
8575: PPUSH
8576: LD_INT 3
8578: PPUSH
8579: LD_INT 4
8581: PPUSH
8582: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8586: CALL_OW 44
8590: PPUSH
8591: LD_VAR 0 5
8595: PPUSH
8596: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
8600: LD_INT 24
8602: PPUSH
8603: LD_INT 1
8605: PPUSH
8606: LD_INT 1
8608: PPUSH
8609: LD_INT 45
8611: PPUSH
8612: LD_INT 10
8614: PPUSH
8615: CALL 29495 0 5
// un := CreateVehicle ;
8619: LD_ADDR_VAR 0 5
8623: PUSH
8624: CALL_OW 45
8628: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
8629: LD_VAR 0 5
8633: PPUSH
8634: LD_INT 129
8636: PPUSH
8637: LD_INT 93
8639: PPUSH
8640: LD_INT 1
8642: PPUSH
8643: LD_INT 0
8645: PPUSH
8646: CALL 63299 0 5
// ComHold ( un ) ;
8650: LD_VAR 0 5
8654: PPUSH
8655: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
8659: LD_INT 0
8661: PPUSH
8662: LD_INT 3
8664: PPUSH
8665: LD_INT 4
8667: PPUSH
8668: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8672: CALL_OW 44
8676: PPUSH
8677: LD_VAR 0 5
8681: PPUSH
8682: CALL_OW 52
// bc_type := b_armoury ;
8686: LD_ADDR_OWVAR 42
8690: PUSH
8691: LD_INT 4
8693: ST_TO_ADDR
// bc_level := 6 ;
8694: LD_ADDR_OWVAR 43
8698: PUSH
8699: LD_INT 6
8701: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
8702: LD_INT 120
8704: PPUSH
8705: LD_INT 100
8707: PPUSH
8708: LD_INT 5
8710: PPUSH
8711: CALL_OW 47
// for i := 1 to 3 do
8715: LD_ADDR_VAR 0 2
8719: PUSH
8720: DOUBLE
8721: LD_INT 1
8723: DEC
8724: ST_TO_ADDR
8725: LD_INT 3
8727: PUSH
8728: FOR_TO
8729: IFFALSE 8766
// begin PrepareHuman ( false , 1 , 5 ) ;
8731: LD_INT 0
8733: PPUSH
8734: LD_INT 1
8736: PPUSH
8737: LD_INT 5
8739: PPUSH
8740: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
8744: CALL_OW 44
8748: PPUSH
8749: LD_INT 120
8751: PPUSH
8752: LD_INT 100
8754: PPUSH
8755: CALL_OW 428
8759: PPUSH
8760: CALL_OW 52
// end ;
8764: GO 8728
8766: POP
8767: POP
// end ; tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
8768: LD_ADDR_VAR 0 7
8772: PUSH
8773: LD_INT 135
8775: PUSH
8776: LD_INT 100
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: PUSH
8783: LD_INT 137
8785: PUSH
8786: LD_INT 92
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: ST_TO_ADDR
// for i := 1 to tmp do
8797: LD_ADDR_VAR 0 2
8801: PUSH
8802: DOUBLE
8803: LD_INT 1
8805: DEC
8806: ST_TO_ADDR
8807: LD_VAR 0 7
8811: PUSH
8812: FOR_TO
8813: IFFALSE 8979
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
8815: LD_INT 22
8817: PUSH
8818: LD_INT 22
8820: PUSH
8821: LD_INT 24
8823: PUSH
8824: LD_INT 24
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: PUSH
8833: LD_OWVAR 67
8837: PUSH
8838: LD_INT 0
8840: PPUSH
8841: LD_INT 1
8843: PPUSH
8844: CALL_OW 12
8848: PLUS
8849: ARRAY
8850: PPUSH
8851: LD_INT 1
8853: PPUSH
8854: LD_INT 1
8856: PPUSH
8857: LD_INT 44
8859: PPUSH
8860: LD_INT 25
8862: PPUSH
8863: CALL 29495 0 5
// veh := CreateVehicle ;
8867: LD_ADDR_VAR 0 6
8871: PUSH
8872: CALL_OW 45
8876: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8877: LD_VAR 0 6
8881: PPUSH
8882: LD_INT 2
8884: PPUSH
8885: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
8889: LD_VAR 0 6
8893: PPUSH
8894: LD_VAR 0 7
8898: PUSH
8899: LD_VAR 0 2
8903: ARRAY
8904: PUSH
8905: LD_INT 1
8907: ARRAY
8908: PPUSH
8909: LD_VAR 0 7
8913: PUSH
8914: LD_VAR 0 2
8918: ARRAY
8919: PUSH
8920: LD_INT 2
8922: ARRAY
8923: PPUSH
8924: LD_INT 0
8926: PPUSH
8927: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
8931: LD_INT 0
8933: PPUSH
8934: LD_INT 3
8936: PPUSH
8937: LD_INT 6
8939: PPUSH
8940: CALL_OW 380
// un := CreateHuman ;
8944: LD_ADDR_VAR 0 5
8948: PUSH
8949: CALL_OW 44
8953: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8954: LD_VAR 0 5
8958: PPUSH
8959: LD_VAR 0 6
8963: PPUSH
8964: CALL_OW 52
// ComHold ( veh ) ;
8968: LD_VAR 0 6
8972: PPUSH
8973: CALL_OW 140
// end ;
8977: GO 8812
8979: POP
8980: POP
// tmp := [ 191 , 122 ] ;
8981: LD_ADDR_VAR 0 7
8985: PUSH
8986: LD_INT 191
8988: PUSH
8989: LD_INT 122
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
8996: LD_INT 24
8998: PPUSH
8999: LD_INT 1
9001: PPUSH
9002: LD_INT 1
9004: PPUSH
9005: LD_INT 44
9007: PPUSH
9008: LD_INT 30
9010: PPUSH
9011: CALL 29495 0 5
// ruBlockadeTank := CreateVehicle ;
9015: LD_ADDR_EXP 50
9019: PUSH
9020: CALL_OW 45
9024: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
9025: LD_EXP 50
9029: PPUSH
9030: LD_INT 2
9032: PPUSH
9033: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
9037: LD_EXP 50
9041: PPUSH
9042: LD_INT 191
9044: PPUSH
9045: LD_INT 122
9047: PPUSH
9048: LD_INT 0
9050: PPUSH
9051: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 ] [ Difficulty - 1 ] ) ;
9055: LD_INT 1
9057: PPUSH
9058: LD_INT 5
9060: PUSH
9061: LD_INT 6
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: PUSH
9068: LD_OWVAR 67
9072: PUSH
9073: LD_INT 1
9075: MINUS
9076: ARRAY
9077: PPUSH
9078: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
9082: CALL_OW 44
9086: PPUSH
9087: LD_EXP 50
9091: PPUSH
9092: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
9096: LD_EXP 50
9100: PPUSH
9101: CALL_OW 140
// ruBlockadeSquad := [ ] ;
9105: LD_ADDR_EXP 52
9109: PUSH
9110: EMPTY
9111: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 6 ] [ Difficulty ] do
9112: LD_ADDR_VAR 0 2
9116: PUSH
9117: DOUBLE
9118: LD_INT 1
9120: DEC
9121: ST_TO_ADDR
9122: LD_INT 3
9124: PUSH
9125: LD_INT 4
9127: PUSH
9128: LD_INT 6
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: LIST
9135: PUSH
9136: LD_OWVAR 67
9140: ARRAY
9141: PUSH
9142: FOR_TO
9143: IFFALSE 9255
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
9145: LD_INT 0
9147: PPUSH
9148: LD_INT 1
9150: PPUSH
9151: LD_INT 4
9153: PUSH
9154: LD_INT 5
9156: PUSH
9157: LD_INT 6
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: LIST
9164: PUSH
9165: LD_OWVAR 67
9169: ARRAY
9170: PPUSH
9171: CALL_OW 380
// un := CreateHuman ;
9175: LD_ADDR_VAR 0 5
9179: PUSH
9180: CALL_OW 44
9184: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
9185: LD_VAR 0 5
9189: PPUSH
9190: LD_INT 9
9192: PPUSH
9193: LD_INT 0
9195: PPUSH
9196: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
9200: LD_VAR 0 5
9204: PPUSH
9205: LD_INT 198
9207: PPUSH
9208: LD_INT 129
9210: PPUSH
9211: CALL_OW 118
// AddComCrawl ( un ) ;
9215: LD_VAR 0 5
9219: PPUSH
9220: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
9224: LD_ADDR_EXP 52
9228: PUSH
9229: LD_EXP 52
9233: PPUSH
9234: LD_EXP 52
9238: PUSH
9239: LD_INT 1
9241: PLUS
9242: PPUSH
9243: LD_VAR 0 5
9247: PPUSH
9248: CALL_OW 1
9252: ST_TO_ADDR
// end ;
9253: GO 9142
9255: POP
9256: POP
// PrepareHuman ( false , 4 , 5 ) ;
9257: LD_INT 0
9259: PPUSH
9260: LD_INT 4
9262: PPUSH
9263: LD_INT 5
9265: PPUSH
9266: CALL_OW 380
// un := CreateHuman ;
9270: LD_ADDR_VAR 0 5
9274: PUSH
9275: CALL_OW 44
9279: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
9280: LD_VAR 0 5
9284: PPUSH
9285: LD_INT 179
9287: PPUSH
9288: LD_INT 113
9290: PPUSH
9291: LD_INT 0
9293: PPUSH
9294: CALL_OW 48
// ComHold ( un ) ;
9298: LD_VAR 0 5
9302: PPUSH
9303: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
9307: LD_ADDR_EXP 52
9311: PUSH
9312: LD_EXP 52
9316: PPUSH
9317: LD_EXP 52
9321: PUSH
9322: LD_INT 1
9324: PLUS
9325: PPUSH
9326: LD_VAR 0 5
9330: PPUSH
9331: CALL_OW 1
9335: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
9336: LD_ADDR_VAR 0 7
9340: PUSH
9341: LD_INT 167
9343: PPUSH
9344: LD_INT 243
9346: PPUSH
9347: CALL_OW 428
9351: PPUSH
9352: CALL_OW 274
9356: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
9357: LD_VAR 0 7
9361: PPUSH
9362: LD_INT 1
9364: PPUSH
9365: LD_INT 1000
9367: PPUSH
9368: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
9372: LD_VAR 0 7
9376: PPUSH
9377: LD_INT 2
9379: PPUSH
9380: LD_INT 400
9382: PPUSH
9383: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
9387: LD_ADDR_VAR 0 7
9391: PUSH
9392: LD_INT 169
9394: PPUSH
9395: LD_INT 229
9397: PPUSH
9398: CALL_OW 428
9402: ST_TO_ADDR
// for i := 1 to 3 do
9403: LD_ADDR_VAR 0 2
9407: PUSH
9408: DOUBLE
9409: LD_INT 1
9411: DEC
9412: ST_TO_ADDR
9413: LD_INT 3
9415: PUSH
9416: FOR_TO
9417: IFFALSE 9504
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
9419: LD_INT 0
9421: PPUSH
9422: LD_INT 1
9424: PPUSH
9425: LD_INT 4
9427: PUSH
9428: LD_INT 5
9430: PUSH
9431: LD_INT 5
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: LIST
9438: PUSH
9439: LD_OWVAR 67
9443: ARRAY
9444: PPUSH
9445: CALL_OW 380
// un := CreateHuman ;
9449: LD_ADDR_VAR 0 5
9453: PUSH
9454: CALL_OW 44
9458: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
9459: LD_VAR 0 5
9463: PPUSH
9464: LD_VAR 0 7
9468: PPUSH
9469: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
9473: LD_ADDR_EXP 53
9477: PUSH
9478: LD_EXP 53
9482: PPUSH
9483: LD_EXP 53
9487: PUSH
9488: LD_INT 1
9490: PLUS
9491: PPUSH
9492: LD_VAR 0 5
9496: PPUSH
9497: CALL_OW 1
9501: ST_TO_ADDR
// end ;
9502: GO 9416
9504: POP
9505: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
9506: LD_ADDR_VAR 0 7
9510: PUSH
9511: LD_INT 165
9513: PUSH
9514: LD_INT 227
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 173
9523: PUSH
9524: LD_INT 231
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: ST_TO_ADDR
// for i := 1 to tmp do
9535: LD_ADDR_VAR 0 2
9539: PUSH
9540: DOUBLE
9541: LD_INT 1
9543: DEC
9544: ST_TO_ADDR
9545: LD_VAR 0 7
9549: PUSH
9550: FOR_TO
9551: IFFALSE 9668
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
9553: LD_INT 0
9555: PPUSH
9556: LD_INT 1
9558: PPUSH
9559: LD_INT 4
9561: PUSH
9562: LD_INT 5
9564: PUSH
9565: LD_INT 5
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: LIST
9572: PUSH
9573: LD_OWVAR 67
9577: ARRAY
9578: PPUSH
9579: CALL_OW 380
// un := CreateHuman ;
9583: LD_ADDR_VAR 0 5
9587: PUSH
9588: CALL_OW 44
9592: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
9593: LD_VAR 0 5
9597: PPUSH
9598: LD_VAR 0 7
9602: PUSH
9603: LD_VAR 0 2
9607: ARRAY
9608: PUSH
9609: LD_INT 1
9611: ARRAY
9612: PPUSH
9613: LD_VAR 0 7
9617: PUSH
9618: LD_VAR 0 2
9622: ARRAY
9623: PUSH
9624: LD_INT 2
9626: ARRAY
9627: PPUSH
9628: CALL_OW 428
9632: PPUSH
9633: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
9637: LD_ADDR_EXP 53
9641: PUSH
9642: LD_EXP 53
9646: PPUSH
9647: LD_EXP 53
9651: PUSH
9652: LD_INT 1
9654: PLUS
9655: PPUSH
9656: LD_VAR 0 5
9660: PPUSH
9661: CALL_OW 1
9665: ST_TO_ADDR
// end ;
9666: GO 9550
9668: POP
9669: POP
// for i := 1 to 2 do
9670: LD_ADDR_VAR 0 2
9674: PUSH
9675: DOUBLE
9676: LD_INT 1
9678: DEC
9679: ST_TO_ADDR
9680: LD_INT 2
9682: PUSH
9683: FOR_TO
9684: IFFALSE 9739
// begin InitHc ;
9686: CALL_OW 19
// uc_nation := 0 ;
9690: LD_ADDR_OWVAR 21
9694: PUSH
9695: LD_INT 0
9697: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
9698: LD_ADDR_OWVAR 28
9702: PUSH
9703: LD_INT 16
9705: ST_TO_ADDR
// un := CreateHuman ;
9706: LD_ADDR_VAR 0 5
9710: PUSH
9711: CALL_OW 44
9715: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
9716: LD_VAR 0 5
9720: PPUSH
9721: LD_INT 166
9723: PPUSH
9724: LD_INT 233
9726: PPUSH
9727: LD_INT 2
9729: PPUSH
9730: LD_INT 0
9732: PPUSH
9733: CALL_OW 50
// end ;
9737: GO 9683
9739: POP
9740: POP
// uc_nation := 3 ;
9741: LD_ADDR_OWVAR 21
9745: PUSH
9746: LD_INT 3
9748: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
9749: LD_ADDR_VAR 0 7
9753: PUSH
9754: LD_INT 71
9756: PUSH
9757: LD_INT 52
9759: PUSH
9760: LD_INT 11
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: ST_TO_ADDR
// for i in tmp do
9768: LD_ADDR_VAR 0 2
9772: PUSH
9773: LD_VAR 0 7
9777: PUSH
9778: FOR_IN
9779: IFFALSE 9823
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
9781: LD_VAR 0 2
9785: PPUSH
9786: CALL_OW 274
9790: PPUSH
9791: LD_INT 1
9793: PPUSH
9794: LD_INT 3000
9796: PPUSH
9797: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
9801: LD_VAR 0 2
9805: PPUSH
9806: CALL_OW 274
9810: PPUSH
9811: LD_INT 2
9813: PPUSH
9814: LD_INT 600
9816: PPUSH
9817: CALL_OW 277
// end ;
9821: GO 9778
9823: POP
9824: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
9825: LD_ADDR_VAR 0 7
9829: PUSH
9830: LD_INT 41
9832: PUSH
9833: LD_INT 57
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PUSH
9840: LD_INT 38
9842: PUSH
9843: LD_INT 55
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 50
9852: PUSH
9853: LD_INT 73
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: PUSH
9860: LD_INT 51
9862: PUSH
9863: LD_INT 65
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: PUSH
9870: LD_INT 82
9872: PUSH
9873: LD_INT 93
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PUSH
9880: LD_INT 87
9882: PUSH
9883: LD_INT 100
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PUSH
9890: LD_INT 91
9892: PUSH
9893: LD_INT 109
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: PUSH
9900: LD_INT 84
9902: PUSH
9903: LD_INT 120
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: PUSH
9910: LD_INT 113
9912: PUSH
9913: LD_INT 153
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: PUSH
9920: LD_INT 123
9922: PUSH
9923: LD_INT 171
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: PUSH
9930: LD_INT 125
9932: PUSH
9933: LD_INT 178
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: PUSH
9940: LD_INT 125
9942: PUSH
9943: LD_INT 188
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: PUSH
9950: LD_INT 125
9952: PUSH
9953: LD_INT 201
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: PUSH
9960: LD_INT 33
9962: PUSH
9963: LD_INT 60
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 76
9972: PUSH
9973: LD_INT 95
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PUSH
9980: LD_INT 84
9982: PUSH
9983: LD_INT 111
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: PUSH
9990: LD_INT 112
9992: PUSH
9993: LD_INT 165
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: ST_TO_ADDR
// for i := 1 to tmp do
10019: LD_ADDR_VAR 0 2
10023: PUSH
10024: DOUBLE
10025: LD_INT 1
10027: DEC
10028: ST_TO_ADDR
10029: LD_VAR 0 7
10033: PUSH
10034: FOR_TO
10035: IFFALSE 10274
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
10037: LD_ADDR_VAR 0 4
10041: PUSH
10042: LD_VAR 0 7
10046: PUSH
10047: LD_VAR 0 2
10051: ARRAY
10052: PUSH
10053: LD_INT 1
10055: ARRAY
10056: PPUSH
10057: LD_VAR 0 7
10061: PUSH
10062: LD_VAR 0 2
10066: ARRAY
10067: PUSH
10068: LD_INT 2
10070: ARRAY
10071: PPUSH
10072: CALL_OW 428
10076: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
10077: LD_VAR 0 4
10081: PPUSH
10082: CALL_OW 266
10086: PUSH
10087: LD_INT 4
10089: PUSH
10090: LD_INT 5
10092: PUSH
10093: EMPTY
10094: LIST
10095: LIST
10096: IN
10097: IFFALSE 10177
// begin for j := 1 to Difficulty do
10099: LD_ADDR_VAR 0 3
10103: PUSH
10104: DOUBLE
10105: LD_INT 1
10107: DEC
10108: ST_TO_ADDR
10109: LD_OWVAR 67
10113: PUSH
10114: FOR_TO
10115: IFFALSE 10173
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10117: LD_INT 0
10119: PPUSH
10120: LD_INT 1
10122: PPUSH
10123: LD_INT 4
10125: PUSH
10126: LD_INT 5
10128: PUSH
10129: LD_INT 5
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: LIST
10136: PUSH
10137: LD_OWVAR 67
10141: ARRAY
10142: PPUSH
10143: CALL_OW 380
// un := CreateHuman ;
10147: LD_ADDR_VAR 0 5
10151: PUSH
10152: CALL_OW 44
10156: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10157: LD_VAR 0 5
10161: PPUSH
10162: LD_VAR 0 4
10166: PPUSH
10167: CALL_OW 52
// end ;
10171: GO 10114
10173: POP
10174: POP
// end else
10175: GO 10243
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10177: LD_INT 0
10179: PPUSH
10180: LD_INT 1
10182: PPUSH
10183: LD_INT 4
10185: PUSH
10186: LD_INT 5
10188: PUSH
10189: LD_INT 5
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: LIST
10196: PUSH
10197: LD_OWVAR 67
10201: ARRAY
10202: PPUSH
10203: CALL_OW 380
// un := CreateHuman ;
10207: LD_ADDR_VAR 0 5
10211: PUSH
10212: CALL_OW 44
10216: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10217: LD_VAR 0 5
10221: PPUSH
10222: LD_VAR 0 4
10226: PPUSH
10227: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
10231: LD_VAR 0 5
10235: PPUSH
10236: LD_INT 9
10238: PPUSH
10239: CALL_OW 336
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10243: LD_ADDR_EXP 54
10247: PUSH
10248: LD_EXP 54
10252: PPUSH
10253: LD_EXP 54
10257: PUSH
10258: LD_INT 1
10260: PLUS
10261: PPUSH
10262: LD_VAR 0 5
10266: PPUSH
10267: CALL_OW 1
10271: ST_TO_ADDR
// end ;
10272: GO 10034
10274: POP
10275: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
10276: LD_ADDR_VAR 0 4
10280: PUSH
10281: LD_INT 10
10283: PPUSH
10284: LD_INT 22
10286: PUSH
10287: LD_INT 3
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: LD_INT 30
10296: PUSH
10297: LD_INT 32
10299: PUSH
10300: EMPTY
10301: LIST
10302: LIST
10303: PUSH
10304: LD_INT 58
10306: PUSH
10307: EMPTY
10308: LIST
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: LIST
10314: PPUSH
10315: CALL_OW 70
10319: PUSH
10320: FOR_IN
10321: IFFALSE 10447
// begin if not Prob ( [ 40 , 50 , 75 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
10323: LD_INT 40
10325: PUSH
10326: LD_INT 50
10328: PUSH
10329: LD_INT 75
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: LIST
10336: PUSH
10337: LD_OWVAR 67
10341: ARRAY
10342: PUSH
10343: LD_EXP 7
10347: PUSH
10348: LD_INT 10
10350: MUL
10351: MINUS
10352: PPUSH
10353: CALL_OW 13
10357: NOT
10358: IFFALSE 10362
// continue ;
10360: GO 10320
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10362: LD_INT 0
10364: PPUSH
10365: LD_INT 1
10367: PPUSH
10368: LD_INT 4
10370: PUSH
10371: LD_INT 5
10373: PUSH
10374: LD_INT 5
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: LIST
10381: PUSH
10382: LD_OWVAR 67
10386: ARRAY
10387: PPUSH
10388: CALL_OW 380
// un := CreateHuman ;
10392: LD_ADDR_VAR 0 5
10396: PUSH
10397: CALL_OW 44
10401: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10402: LD_VAR 0 5
10406: PPUSH
10407: LD_VAR 0 4
10411: PPUSH
10412: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10416: LD_ADDR_EXP 54
10420: PUSH
10421: LD_EXP 54
10425: PPUSH
10426: LD_EXP 54
10430: PUSH
10431: LD_INT 1
10433: PLUS
10434: PPUSH
10435: LD_VAR 0 5
10439: PPUSH
10440: CALL_OW 1
10444: ST_TO_ADDR
// end ;
10445: GO 10320
10447: POP
10448: POP
// for i := 1 to 5 do
10449: LD_ADDR_VAR 0 2
10453: PUSH
10454: DOUBLE
10455: LD_INT 1
10457: DEC
10458: ST_TO_ADDR
10459: LD_INT 5
10461: PUSH
10462: FOR_TO
10463: IFFALSE 10557
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10465: LD_INT 0
10467: PPUSH
10468: LD_INT 2
10470: PPUSH
10471: LD_INT 4
10473: PUSH
10474: LD_INT 5
10476: PUSH
10477: LD_INT 5
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: LIST
10484: PUSH
10485: LD_OWVAR 67
10489: ARRAY
10490: PPUSH
10491: CALL_OW 380
// un := CreateHuman ;
10495: LD_ADDR_VAR 0 5
10499: PUSH
10500: CALL_OW 44
10504: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
10505: LD_VAR 0 5
10509: PPUSH
10510: LD_INT 66
10512: PPUSH
10513: LD_INT 101
10515: PPUSH
10516: LD_INT 3
10518: PPUSH
10519: LD_INT 0
10521: PPUSH
10522: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10526: LD_ADDR_EXP 54
10530: PUSH
10531: LD_EXP 54
10535: PPUSH
10536: LD_EXP 54
10540: PUSH
10541: LD_INT 1
10543: PLUS
10544: PPUSH
10545: LD_VAR 0 5
10549: PPUSH
10550: CALL_OW 1
10554: ST_TO_ADDR
// end ;
10555: GO 10462
10557: POP
10558: POP
// tmp := [ ruFac1 , ruFac2 ] ;
10559: LD_ADDR_VAR 0 7
10563: PUSH
10564: LD_INT 72
10566: PUSH
10567: LD_INT 12
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: ST_TO_ADDR
// for i := 1 to tmp do
10574: LD_ADDR_VAR 0 2
10578: PUSH
10579: DOUBLE
10580: LD_INT 1
10582: DEC
10583: ST_TO_ADDR
10584: LD_VAR 0 7
10588: PUSH
10589: FOR_TO
10590: IFFALSE 10703
// for j := 1 to 6 do
10592: LD_ADDR_VAR 0 3
10596: PUSH
10597: DOUBLE
10598: LD_INT 1
10600: DEC
10601: ST_TO_ADDR
10602: LD_INT 6
10604: PUSH
10605: FOR_TO
10606: IFFALSE 10699
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10608: LD_INT 0
10610: PPUSH
10611: LD_INT 3
10613: PPUSH
10614: LD_INT 4
10616: PUSH
10617: LD_INT 5
10619: PUSH
10620: LD_INT 5
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: LIST
10627: PUSH
10628: LD_OWVAR 67
10632: ARRAY
10633: PPUSH
10634: CALL_OW 380
// un := CreateHuman ;
10638: LD_ADDR_VAR 0 5
10642: PUSH
10643: CALL_OW 44
10647: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
10648: LD_VAR 0 5
10652: PPUSH
10653: LD_VAR 0 7
10657: PUSH
10658: LD_VAR 0 2
10662: ARRAY
10663: PPUSH
10664: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10668: LD_ADDR_EXP 54
10672: PUSH
10673: LD_EXP 54
10677: PPUSH
10678: LD_EXP 54
10682: PUSH
10683: LD_INT 1
10685: PLUS
10686: PPUSH
10687: LD_VAR 0 5
10691: PPUSH
10692: CALL_OW 1
10696: ST_TO_ADDR
// end ;
10697: GO 10605
10699: POP
10700: POP
10701: GO 10589
10703: POP
10704: POP
// for i := 1 to 3 do
10705: LD_ADDR_VAR 0 2
10709: PUSH
10710: DOUBLE
10711: LD_INT 1
10713: DEC
10714: ST_TO_ADDR
10715: LD_INT 3
10717: PUSH
10718: FOR_TO
10719: IFFALSE 10804
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10721: LD_INT 0
10723: PPUSH
10724: LD_INT 4
10726: PPUSH
10727: LD_INT 4
10729: PUSH
10730: LD_INT 5
10732: PUSH
10733: LD_INT 5
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: LIST
10740: PUSH
10741: LD_OWVAR 67
10745: ARRAY
10746: PPUSH
10747: CALL_OW 380
// un := CreateHuman ;
10751: LD_ADDR_VAR 0 5
10755: PUSH
10756: CALL_OW 44
10760: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
10761: LD_VAR 0 5
10765: PPUSH
10766: LD_INT 17
10768: PPUSH
10769: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10773: LD_ADDR_EXP 54
10777: PUSH
10778: LD_EXP 54
10782: PPUSH
10783: LD_EXP 54
10787: PUSH
10788: LD_INT 1
10790: PLUS
10791: PPUSH
10792: LD_VAR 0 5
10796: PPUSH
10797: CALL_OW 1
10801: ST_TO_ADDR
// end ;
10802: GO 10718
10804: POP
10805: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
10806: LD_ADDR_VAR 0 2
10810: PUSH
10811: DOUBLE
10812: LD_INT 1
10814: DEC
10815: ST_TO_ADDR
10816: LD_INT 2
10818: PUSH
10819: LD_INT 3
10821: PUSH
10822: LD_INT 3
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: LIST
10829: PUSH
10830: LD_OWVAR 67
10834: ARRAY
10835: PUSH
10836: FOR_TO
10837: IFFALSE 10957
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
10839: LD_INT 22
10841: PPUSH
10842: LD_INT 1
10844: PPUSH
10845: LD_INT 1
10847: PPUSH
10848: LD_INT 52
10850: PPUSH
10851: LD_INT 100
10853: PPUSH
10854: CALL 29495 0 5
// veh := CreateVehicle ;
10858: LD_ADDR_VAR 0 6
10862: PUSH
10863: CALL_OW 45
10867: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
10868: LD_INT 0
10870: PPUSH
10871: LD_INT 3
10873: PPUSH
10874: LD_INT 4
10876: PPUSH
10877: CALL_OW 380
// un := CreateHuman ;
10881: LD_ADDR_VAR 0 5
10885: PUSH
10886: CALL_OW 44
10890: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
10891: LD_VAR 0 6
10895: PPUSH
10896: LD_INT 107
10898: PPUSH
10899: LD_INT 182
10901: PPUSH
10902: LD_INT 4
10904: PPUSH
10905: LD_INT 0
10907: PPUSH
10908: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10912: LD_VAR 0 5
10916: PPUSH
10917: LD_VAR 0 6
10921: PPUSH
10922: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10926: LD_ADDR_EXP 54
10930: PUSH
10931: LD_EXP 54
10935: PPUSH
10936: LD_EXP 54
10940: PUSH
10941: LD_INT 1
10943: PLUS
10944: PPUSH
10945: LD_VAR 0 5
10949: PPUSH
10950: CALL_OW 1
10954: ST_TO_ADDR
// end ;
10955: GO 10836
10957: POP
10958: POP
// InitHc ;
10959: CALL_OW 19
// for i := 1 to [ 6 , 8 , 10 ] [ Difficulty ] do
10963: LD_ADDR_VAR 0 2
10967: PUSH
10968: DOUBLE
10969: LD_INT 1
10971: DEC
10972: ST_TO_ADDR
10973: LD_INT 6
10975: PUSH
10976: LD_INT 8
10978: PUSH
10979: LD_INT 10
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: LIST
10986: PUSH
10987: LD_OWVAR 67
10991: ARRAY
10992: PUSH
10993: FOR_TO
10994: IFFALSE 11066
// begin uc_nation := 0 ;
10996: LD_ADDR_OWVAR 21
11000: PUSH
11001: LD_INT 0
11003: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
11004: LD_ADDR_OWVAR 28
11008: PUSH
11009: LD_INT 15
11011: ST_TO_ADDR
// un := CreateHuman ;
11012: LD_ADDR_VAR 0 5
11016: PUSH
11017: CALL_OW 44
11021: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
11022: LD_VAR 0 5
11026: PPUSH
11027: LD_INT 269
11029: PUSH
11030: LD_INT 300
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: LD_VAR 0 2
11041: PUSH
11042: LD_INT 2
11044: MOD
11045: PUSH
11046: LD_INT 1
11048: PLUS
11049: ARRAY
11050: PPUSH
11051: LD_INT 182
11053: PPUSH
11054: LD_INT 4
11056: PPUSH
11057: LD_INT 0
11059: PPUSH
11060: CALL_OW 50
// end ;
11064: GO 10993
11066: POP
11067: POP
// uc_nation := 3 ;
11068: LD_ADDR_OWVAR 21
11072: PUSH
11073: LD_INT 3
11075: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 ] [ Difficulty ] then
11076: LD_EXP 8
11080: PUSH
11081: LD_INT 10
11083: PUSH
11084: LD_INT 8
11086: PUSH
11087: LD_INT 6
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: LIST
11094: PUSH
11095: LD_OWVAR 67
11099: ARRAY
11100: LESS
11101: IFFALSE 11180
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
11103: LD_INT 21
11105: PPUSH
11106: LD_INT 1
11108: PPUSH
11109: LD_INT 1
11111: PPUSH
11112: LD_INT 51
11114: PPUSH
11115: LD_INT 12
11117: PPUSH
11118: CALL 29495 0 5
// veh := CreateVehicle ;
11122: LD_ADDR_VAR 0 6
11126: PUSH
11127: CALL_OW 45
11131: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
11132: LD_VAR 0 6
11136: PPUSH
11137: LD_INT 269
11139: PPUSH
11140: LD_INT 66
11142: PPUSH
11143: LD_INT 4
11145: PPUSH
11146: LD_INT 0
11148: PPUSH
11149: CALL 63299 0 5
// SetLives ( veh , 333 ) ;
11153: LD_VAR 0 6
11157: PPUSH
11158: LD_INT 333
11160: PPUSH
11161: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
11165: LD_VAR 0 6
11169: PPUSH
11170: LD_INT 2
11172: PPUSH
11173: LD_INT 100
11175: PPUSH
11176: CALL_OW 290
// end ; end ;
11180: LD_VAR 0 1
11184: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
11185: LD_EXP 50
11189: PUSH
11190: LD_EXP 50
11194: PPUSH
11195: CALL_OW 255
11199: PUSH
11200: LD_INT 3
11202: EQUAL
11203: AND
11204: IFFALSE 11367
11206: GO 11208
11208: DISABLE
11209: LD_INT 0
11211: PPUSH
// begin enable ;
11212: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
11213: LD_INT 81
11215: PUSH
11216: LD_INT 3
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PUSH
11223: LD_INT 91
11225: PUSH
11226: LD_EXP 50
11230: PUSH
11231: LD_INT 15
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: LIST
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PPUSH
11243: CALL_OW 69
11247: IFFALSE 11327
// begin if not IsDrivenBy ( ruBlockadeTank ) then
11249: LD_EXP 50
11253: PPUSH
11254: CALL_OW 311
11258: NOT
11259: IFFALSE 11325
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
11261: LD_ADDR_VAR 0 1
11265: PUSH
11266: LD_INT 22
11268: PUSH
11269: LD_INT 3
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: LD_INT 21
11278: PUSH
11279: LD_INT 1
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: PUSH
11286: EMPTY
11287: LIST
11288: LIST
11289: PPUSH
11290: CALL_OW 69
11294: PPUSH
11295: LD_EXP 50
11299: PPUSH
11300: CALL_OW 74
11304: ST_TO_ADDR
// if driver then
11305: LD_VAR 0 1
11309: IFFALSE 11325
// ComEnterUnit ( driver , ruBlockadeTank ) ;
11311: LD_VAR 0 1
11315: PPUSH
11316: LD_EXP 50
11320: PPUSH
11321: CALL_OW 120
// end ; exit ;
11325: GO 11367
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
11327: LD_EXP 50
11331: PPUSH
11332: CALL_OW 256
11336: PUSH
11337: LD_INT 1000
11339: LESS
11340: PUSH
11341: LD_EXP 50
11345: PPUSH
11346: CALL_OW 311
11350: AND
11351: IFFALSE 11367
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
11353: LD_EXP 50
11357: PPUSH
11358: CALL_OW 311
11362: PPUSH
11363: CALL 62859 0 1
// end ;
11367: PPOPN 1
11369: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
11370: LD_EXP 52
11374: PPUSH
11375: LD_INT 3
11377: PUSH
11378: LD_INT 24
11380: PUSH
11381: LD_INT 1000
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PPUSH
11392: CALL_OW 72
11396: PUSH
11397: LD_EXP 52
11401: PPUSH
11402: LD_INT 25
11404: PUSH
11405: LD_INT 4
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: LD_INT 50
11414: PUSH
11415: EMPTY
11416: LIST
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PPUSH
11422: CALL_OW 72
11426: AND
11427: IFFALSE 11615
11429: GO 11431
11431: DISABLE
11432: LD_INT 0
11434: PPUSH
11435: PPUSH
11436: PPUSH
// begin enable ;
11437: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
11438: LD_ADDR_VAR 0 3
11442: PUSH
11443: LD_EXP 52
11447: PPUSH
11448: LD_INT 3
11450: PUSH
11451: LD_INT 24
11453: PUSH
11454: LD_INT 1000
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PPUSH
11465: CALL_OW 72
11469: PPUSH
11470: LD_INT 1
11472: PPUSH
11473: CALL 63099 0 2
11477: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
11478: LD_ADDR_VAR 0 2
11482: PUSH
11483: LD_EXP 52
11487: PPUSH
11488: LD_INT 25
11490: PUSH
11491: LD_INT 4
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: PUSH
11498: LD_INT 50
11500: PUSH
11501: EMPTY
11502: LIST
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: PPUSH
11508: CALL_OW 72
11512: PUSH
11513: LD_INT 1
11515: ARRAY
11516: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
11517: LD_VAR 0 2
11521: PPUSH
11522: LD_VAR 0 3
11526: PUSH
11527: LD_INT 1
11529: ARRAY
11530: PPUSH
11531: CALL 58598 0 2
11535: NOT
11536: IFFALSE 11615
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
11538: LD_VAR 0 3
11542: PUSH
11543: LD_INT 1
11545: ARRAY
11546: PPUSH
11547: LD_INT 9
11549: PPUSH
11550: CALL_OW 308
11554: NOT
11555: IFFALSE 11573
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
11557: LD_VAR 0 3
11561: PUSH
11562: LD_INT 1
11564: ARRAY
11565: PPUSH
11566: LD_INT 9
11568: PPUSH
11569: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
11573: LD_VAR 0 2
11577: PPUSH
11578: LD_VAR 0 3
11582: PUSH
11583: LD_INT 1
11585: ARRAY
11586: PPUSH
11587: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
11591: LD_VAR 0 2
11595: PPUSH
11596: LD_INT 179
11598: PPUSH
11599: LD_INT 113
11601: PPUSH
11602: CALL_OW 171
// AddComHold ( sci ) ;
11606: LD_VAR 0 2
11610: PPUSH
11611: CALL_OW 200
// end ; end ;
11615: PPOPN 3
11617: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
11618: LD_INT 2
11620: PPUSH
11621: LD_INT 52
11623: PPUSH
11624: CALL_OW 292
11628: IFFALSE 11733
11630: GO 11632
11632: DISABLE
11633: LD_INT 0
11635: PPUSH
11636: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
11637: LD_ADDR_VAR 0 2
11641: PUSH
11642: LD_EXP 54
11646: PPUSH
11647: LD_INT 25
11649: PUSH
11650: LD_INT 1
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PUSH
11657: LD_INT 50
11659: PUSH
11660: EMPTY
11661: LIST
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PPUSH
11667: CALL_OW 72
11671: ST_TO_ADDR
// if not tmp then
11672: LD_VAR 0 2
11676: NOT
11677: IFFALSE 11681
// exit ;
11679: GO 11733
// for i in tmp do
11681: LD_ADDR_VAR 0 1
11685: PUSH
11686: LD_VAR 0 2
11690: PUSH
11691: FOR_IN
11692: IFFALSE 11731
// begin if IsInUnit ( i ) then
11694: LD_VAR 0 1
11698: PPUSH
11699: CALL_OW 310
11703: IFFALSE 11714
// ComExitBuilding ( i ) ;
11705: LD_VAR 0 1
11709: PPUSH
11710: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
11714: LD_VAR 0 1
11718: PPUSH
11719: LD_INT 84
11721: PPUSH
11722: LD_INT 133
11724: PPUSH
11725: CALL_OW 174
// end ;
11729: GO 11691
11731: POP
11732: POP
// end ;
11733: PPOPN 2
11735: END
// every 0 0$1 trigger leninSpotted do var i , tmp , weapon ;
11736: LD_EXP 14
11740: IFFALSE 11889
11742: GO 11744
11744: DISABLE
11745: LD_INT 0
11747: PPUSH
11748: PPUSH
11749: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
11750: LD_ADDR_VAR 0 2
11754: PUSH
11755: LD_INT 72
11757: PUSH
11758: LD_INT 12
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket , ru_gun ] , [ ru_rocket , ru_heavy_gun ] ] [ Difficulty ] ;
11765: LD_ADDR_VAR 0 3
11769: PUSH
11770: LD_INT 44
11772: PUSH
11773: LD_INT 43
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: PUSH
11780: LD_INT 47
11782: PUSH
11783: LD_INT 44
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: PUSH
11790: LD_INT 47
11792: PUSH
11793: LD_INT 46
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: LIST
11804: PUSH
11805: LD_OWVAR 67
11809: ARRAY
11810: ST_TO_ADDR
// for i := 1 to 6 do
11811: LD_ADDR_VAR 0 1
11815: PUSH
11816: DOUBLE
11817: LD_INT 1
11819: DEC
11820: ST_TO_ADDR
11821: LD_INT 6
11823: PUSH
11824: FOR_TO
11825: IFFALSE 11887
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
11827: LD_VAR 0 2
11831: PPUSH
11832: LD_INT 22
11834: PUSH
11835: LD_INT 23
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: PUSH
11842: LD_VAR 0 1
11846: PUSH
11847: LD_INT 2
11849: MOD
11850: PUSH
11851: LD_INT 1
11853: PLUS
11854: ARRAY
11855: PPUSH
11856: LD_INT 1
11858: PPUSH
11859: LD_INT 1
11861: PPUSH
11862: LD_VAR 0 3
11866: PUSH
11867: LD_VAR 0 1
11871: PUSH
11872: LD_INT 2
11874: MOD
11875: PUSH
11876: LD_INT 1
11878: PLUS
11879: ARRAY
11880: PPUSH
11881: CALL_OW 185
11885: GO 11824
11887: POP
11888: POP
// end ;
11889: PPOPN 3
11891: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
11892: LD_EXP 11
11896: IFFALSE 13045
11898: GO 11900
11900: DISABLE
11901: LD_INT 0
11903: PPUSH
11904: PPUSH
11905: PPUSH
11906: PPUSH
11907: PPUSH
11908: PPUSH
// begin enable ;
11909: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
11910: LD_ADDR_VAR 0 6
11914: PUSH
11915: LD_INT 10
11917: PPUSH
11918: LD_INT 81
11920: PUSH
11921: LD_INT 3
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PPUSH
11928: CALL_OW 70
11932: ST_TO_ADDR
// if ruSpecialVehicleGroup then
11933: LD_EXP 55
11937: IFFALSE 12203
// begin for i in ruSpecialVehicleGroup do
11939: LD_ADDR_VAR 0 1
11943: PUSH
11944: LD_EXP 55
11948: PUSH
11949: FOR_IN
11950: IFFALSE 12201
// begin if enemyInBase then
11952: LD_VAR 0 6
11956: IFFALSE 12199
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
11958: LD_VAR 0 1
11962: PPUSH
11963: CALL_OW 256
11967: PUSH
11968: LD_INT 500
11970: GREATER
11971: PUSH
11972: LD_VAR 0 1
11976: PPUSH
11977: CALL_OW 110
11981: PUSH
11982: LD_INT 0
11984: EQUAL
11985: AND
11986: IFFALSE 12012
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
11988: LD_VAR 0 1
11992: PPUSH
11993: LD_VAR 0 6
11997: PPUSH
11998: LD_VAR 0 1
12002: PPUSH
12003: CALL_OW 74
12007: PPUSH
12008: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
12012: LD_VAR 0 1
12016: PPUSH
12017: CALL_OW 256
12021: PUSH
12022: LD_INT 500
12024: LESSEQUAL
12025: PUSH
12026: LD_VAR 0 1
12030: PPUSH
12031: CALL_OW 110
12035: PUSH
12036: LD_INT 0
12038: EQUAL
12039: AND
12040: IFFALSE 12069
// begin SetTag ( i , 1 ) ;
12042: LD_VAR 0 1
12046: PPUSH
12047: LD_INT 1
12049: PPUSH
12050: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
12054: LD_VAR 0 1
12058: PPUSH
12059: LD_INT 83
12061: PPUSH
12062: LD_INT 134
12064: PPUSH
12065: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
12069: LD_VAR 0 1
12073: PPUSH
12074: CALL_OW 256
12078: PUSH
12079: LD_INT 1000
12081: LESS
12082: PUSH
12083: LD_VAR 0 1
12087: PPUSH
12088: CALL_OW 110
12092: PUSH
12093: LD_INT 1
12095: EQUAL
12096: AND
12097: PUSH
12098: LD_VAR 0 1
12102: PPUSH
12103: LD_INT 83
12105: PPUSH
12106: LD_INT 134
12108: PPUSH
12109: CALL_OW 297
12113: PUSH
12114: LD_INT 6
12116: LESS
12117: AND
12118: IFFALSE 12146
// begin SetFuel ( i , 100 ) ;
12120: LD_VAR 0 1
12124: PPUSH
12125: LD_INT 100
12127: PPUSH
12128: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
12132: LD_VAR 0 1
12136: PPUSH
12137: CALL_OW 310
12141: PPUSH
12142: CALL 62979 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
12146: LD_VAR 0 1
12150: PPUSH
12151: CALL_OW 256
12155: PUSH
12156: LD_INT 1000
12158: EQUAL
12159: PUSH
12160: LD_VAR 0 1
12164: PPUSH
12165: CALL_OW 110
12169: PUSH
12170: LD_INT 1
12172: EQUAL
12173: AND
12174: PUSH
12175: LD_VAR 0 1
12179: PPUSH
12180: CALL_OW 311
12184: AND
12185: IFFALSE 12199
// SetTag ( i , 0 ) ;
12187: LD_VAR 0 1
12191: PPUSH
12192: LD_INT 0
12194: PPUSH
12195: CALL_OW 109
// end ; end ;
12199: GO 11949
12201: POP
12202: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
12203: LD_ADDR_VAR 0 5
12207: PUSH
12208: LD_EXP 54
12212: PPUSH
12213: LD_INT 25
12215: PUSH
12216: LD_INT 4
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: PPUSH
12223: CALL_OW 72
12227: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12228: LD_ADDR_VAR 0 4
12232: PUSH
12233: LD_EXP 54
12237: PPUSH
12238: LD_INT 92
12240: PUSH
12241: LD_INT 92
12243: PUSH
12244: LD_INT 155
12246: PUSH
12247: LD_INT 12
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: PUSH
12256: LD_INT 3
12258: PUSH
12259: LD_INT 24
12261: PUSH
12262: LD_INT 1000
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PPUSH
12277: CALL_OW 72
12281: ST_TO_ADDR
// if sci then
12282: LD_VAR 0 5
12286: IFFALSE 12419
// begin if hurt then
12288: LD_VAR 0 4
12292: IFFALSE 12365
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
12294: LD_VAR 0 5
12298: PPUSH
12299: LD_INT 3
12301: PUSH
12302: LD_INT 54
12304: PUSH
12305: EMPTY
12306: LIST
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: PPUSH
12312: CALL_OW 72
12316: IFFALSE 12345
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
12318: LD_VAR 0 5
12322: PPUSH
12323: LD_INT 3
12325: PUSH
12326: LD_INT 54
12328: PUSH
12329: EMPTY
12330: LIST
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PPUSH
12336: CALL_OW 72
12340: PPUSH
12341: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
12345: LD_VAR 0 5
12349: PPUSH
12350: LD_VAR 0 4
12354: PUSH
12355: LD_INT 1
12357: ARRAY
12358: PPUSH
12359: CALL_OW 188
// end else
12363: GO 12419
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
12365: LD_VAR 0 5
12369: PPUSH
12370: LD_INT 3
12372: PUSH
12373: LD_INT 54
12375: PUSH
12376: EMPTY
12377: LIST
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PPUSH
12383: CALL_OW 72
12387: IFFALSE 12419
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
12389: LD_VAR 0 5
12393: PPUSH
12394: LD_INT 3
12396: PUSH
12397: LD_INT 54
12399: PUSH
12400: EMPTY
12401: LIST
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PPUSH
12407: CALL_OW 72
12411: PPUSH
12412: LD_INT 17
12414: PPUSH
12415: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12419: LD_ADDR_VAR 0 3
12423: PUSH
12424: LD_INT 10
12426: PPUSH
12427: LD_INT 21
12429: PUSH
12430: LD_INT 3
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PUSH
12437: LD_INT 3
12439: PUSH
12440: LD_INT 24
12442: PUSH
12443: LD_INT 1000
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: PPUSH
12458: CALL_OW 70
12462: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
12463: LD_ADDR_VAR 0 2
12467: PUSH
12468: LD_EXP 54
12472: PPUSH
12473: LD_INT 25
12475: PUSH
12476: LD_INT 2
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: PPUSH
12483: CALL_OW 72
12487: PUSH
12488: LD_INT 22
12490: PUSH
12491: LD_INT 3
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: PUSH
12498: LD_INT 34
12500: PUSH
12501: LD_INT 52
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PPUSH
12512: CALL_OW 69
12516: UNION
12517: ST_TO_ADDR
// if not tmp then
12518: LD_VAR 0 2
12522: NOT
12523: IFFALSE 12527
// exit ;
12525: GO 13045
// for i in tmp do
12527: LD_ADDR_VAR 0 1
12531: PUSH
12532: LD_VAR 0 2
12536: PUSH
12537: FOR_IN
12538: IFFALSE 13043
// begin if GetClass ( i ) = 2 then
12540: LD_VAR 0 1
12544: PPUSH
12545: CALL_OW 257
12549: PUSH
12550: LD_INT 2
12552: EQUAL
12553: IFFALSE 12776
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
12555: LD_VAR 0 1
12559: PPUSH
12560: CALL_OW 256
12564: PUSH
12565: LD_INT 1000
12567: EQUAL
12568: PUSH
12569: LD_VAR 0 1
12573: PPUSH
12574: CALL_OW 110
12578: PUSH
12579: LD_INT 1
12581: EQUAL
12582: AND
12583: IFFALSE 12597
// SetTag ( i , 0 ) ;
12585: LD_VAR 0 1
12589: PPUSH
12590: LD_INT 0
12592: PPUSH
12593: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
12597: LD_VAR 0 1
12601: PPUSH
12602: CALL_OW 256
12606: PUSH
12607: LD_INT 500
12609: LESSEQUAL
12610: PUSH
12611: LD_VAR 0 1
12615: PPUSH
12616: CALL_OW 110
12620: PUSH
12621: LD_INT 0
12623: EQUAL
12624: AND
12625: IFFALSE 12654
// begin SetTag ( i , 1 ) ;
12627: LD_VAR 0 1
12631: PPUSH
12632: LD_INT 1
12634: PPUSH
12635: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
12639: LD_VAR 0 1
12643: PPUSH
12644: LD_INT 92
12646: PPUSH
12647: LD_INT 155
12649: PPUSH
12650: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
12654: LD_VAR 0 3
12658: PUSH
12659: LD_VAR 0 1
12663: PPUSH
12664: CALL_OW 256
12668: PUSH
12669: LD_INT 500
12671: GREATER
12672: AND
12673: PUSH
12674: LD_VAR 0 1
12678: PPUSH
12679: CALL_OW 110
12683: PUSH
12684: LD_INT 0
12686: EQUAL
12687: AND
12688: PUSH
12689: LD_VAR 0 1
12693: PPUSH
12694: CALL_OW 314
12698: NOT
12699: AND
12700: IFFALSE 12774
// begin if b then
12702: LD_VAR 0 3
12706: IFFALSE 12738
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
12708: LD_VAR 0 1
12712: PPUSH
12713: LD_VAR 0 3
12717: PUSH
12718: LD_INT 1
12720: PPUSH
12721: LD_VAR 0 3
12725: PPUSH
12726: CALL_OW 12
12730: ARRAY
12731: PPUSH
12732: CALL_OW 130
12736: GO 12774
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
12738: LD_VAR 0 1
12742: PPUSH
12743: LD_INT 94
12745: PPUSH
12746: LD_INT 165
12748: PPUSH
12749: CALL_OW 297
12753: PUSH
12754: LD_INT 8
12756: GREATER
12757: IFFALSE 12774
// ComMoveXY ( i , 94 , 165 ) ;
12759: LD_VAR 0 1
12763: PPUSH
12764: LD_INT 94
12766: PPUSH
12767: LD_INT 165
12769: PPUSH
12770: CALL_OW 111
// end ; end else
12774: GO 13041
// if GetWeapon ( i ) = ru_crane then
12776: LD_VAR 0 1
12780: PPUSH
12781: CALL_OW 264
12785: PUSH
12786: LD_INT 52
12788: EQUAL
12789: IFFALSE 13041
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
12791: LD_VAR 0 1
12795: PPUSH
12796: CALL_OW 256
12800: PUSH
12801: LD_INT 1000
12803: EQUAL
12804: PUSH
12805: LD_VAR 0 1
12809: PPUSH
12810: CALL_OW 110
12814: PUSH
12815: LD_INT 1
12817: EQUAL
12818: AND
12819: IFFALSE 12845
// begin SetTag ( i , 0 ) ;
12821: LD_VAR 0 1
12825: PPUSH
12826: LD_INT 0
12828: PPUSH
12829: CALL_OW 109
// SetFuel ( i , 100 ) ;
12833: LD_VAR 0 1
12837: PPUSH
12838: LD_INT 100
12840: PPUSH
12841: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
12845: LD_VAR 0 1
12849: PPUSH
12850: CALL_OW 256
12854: PUSH
12855: LD_INT 500
12857: LESSEQUAL
12858: PUSH
12859: LD_VAR 0 1
12863: PPUSH
12864: CALL_OW 110
12868: PUSH
12869: LD_INT 0
12871: EQUAL
12872: AND
12873: IFFALSE 12916
// begin SetTag ( i , 1 ) ;
12875: LD_VAR 0 1
12879: PPUSH
12880: LD_INT 1
12882: PPUSH
12883: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
12887: LD_VAR 0 1
12891: PPUSH
12892: LD_INT 83
12894: PPUSH
12895: LD_INT 135
12897: PPUSH
12898: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
12902: LD_VAR 0 1
12906: PPUSH
12907: CALL_OW 310
12911: PPUSH
12912: CALL 62979 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
12916: LD_VAR 0 1
12920: PPUSH
12921: CALL_OW 256
12925: PUSH
12926: LD_INT 500
12928: GREATER
12929: PUSH
12930: LD_VAR 0 1
12934: PPUSH
12935: CALL_OW 110
12939: PUSH
12940: LD_INT 0
12942: EQUAL
12943: AND
12944: PUSH
12945: LD_VAR 0 1
12949: PPUSH
12950: CALL_OW 311
12954: AND
12955: PUSH
12956: LD_VAR 0 1
12960: PPUSH
12961: CALL_OW 314
12965: NOT
12966: AND
12967: IFFALSE 13041
// begin if b then
12969: LD_VAR 0 3
12973: IFFALSE 13005
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
12975: LD_VAR 0 1
12979: PPUSH
12980: LD_VAR 0 3
12984: PUSH
12985: LD_INT 1
12987: PPUSH
12988: LD_VAR 0 3
12992: PPUSH
12993: CALL_OW 12
12997: ARRAY
12998: PPUSH
12999: CALL_OW 130
13003: GO 13041
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
13005: LD_VAR 0 1
13009: PPUSH
13010: LD_INT 94
13012: PPUSH
13013: LD_INT 165
13015: PPUSH
13016: CALL_OW 297
13020: PUSH
13021: LD_INT 8
13023: GREATER
13024: IFFALSE 13041
// ComMoveXY ( i , 94 , 165 ) ;
13026: LD_VAR 0 1
13030: PPUSH
13031: LD_INT 94
13033: PPUSH
13034: LD_INT 165
13036: PPUSH
13037: CALL_OW 111
// end ; end ; end ;
13041: GO 12537
13043: POP
13044: POP
// end ;
13045: PPOPN 6
13047: END
// every 7 7$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp ;
13048: LD_EXP 23
13052: NOT
13053: PUSH
13054: LD_EXP 27
13058: NOT
13059: AND
13060: IFFALSE 13960
13062: GO 13064
13064: DISABLE
13065: LD_INT 0
13067: PPUSH
13068: PPUSH
13069: PPUSH
13070: PPUSH
// begin enable ;
13071: ENABLE
// if Prob ( [ 35 , 45 , 55 ] [ Difficulty ] ) then
13072: LD_INT 35
13074: PUSH
13075: LD_INT 45
13077: PUSH
13078: LD_INT 55
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: LIST
13085: PUSH
13086: LD_OWVAR 67
13090: ARRAY
13091: PPUSH
13092: CALL_OW 13
13096: IFFALSE 13112
// waveStrength := waveStrength + 1 ;
13098: LD_ADDR_EXP 57
13102: PUSH
13103: LD_EXP 57
13107: PUSH
13108: LD_INT 1
13110: PLUS
13111: ST_TO_ADDR
// if waveStrength > [ 4 , 5 , 6 ] [ Difficulty ] then
13112: LD_EXP 57
13116: PUSH
13117: LD_INT 4
13119: PUSH
13120: LD_INT 5
13122: PUSH
13123: LD_INT 6
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: LIST
13130: PUSH
13131: LD_OWVAR 67
13135: ARRAY
13136: GREATER
13137: IFFALSE 13170
// begin waveStrength := waveStrength + Difficulty ;
13139: LD_ADDR_EXP 57
13143: PUSH
13144: LD_EXP 57
13148: PUSH
13149: LD_OWVAR 67
13153: PLUS
13154: ST_TO_ADDR
// disableAttackOnHeike := true ;
13155: LD_ADDR_EXP 27
13159: PUSH
13160: LD_INT 1
13162: ST_TO_ADDR
// wait ( 3 3$00 ) ;
13163: LD_INT 6300
13165: PPUSH
13166: CALL_OW 67
// end ; if disableAttackOnHeike and Difficulty > 1 then
13170: LD_EXP 27
13174: PUSH
13175: LD_OWVAR 67
13179: PUSH
13180: LD_INT 1
13182: GREATER
13183: AND
13184: IFFALSE 13389
// begin for i := 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
13186: LD_ADDR_VAR 0 1
13190: PUSH
13191: DOUBLE
13192: LD_INT 1
13194: DEC
13195: ST_TO_ADDR
13196: LD_INT 3
13198: PUSH
13199: LD_INT 3
13201: PUSH
13202: LD_INT 4
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: LIST
13209: PUSH
13210: LD_OWVAR 67
13214: ARRAY
13215: PUSH
13216: FOR_TO
13217: IFFALSE 13387
// begin InitHc ;
13219: CALL_OW 19
// InitVc ;
13223: CALL_OW 20
// uc_side := 3 ;
13227: LD_ADDR_OWVAR 20
13231: PUSH
13232: LD_INT 3
13234: ST_TO_ADDR
// uc_nation := 3 ;
13235: LD_ADDR_OWVAR 21
13239: PUSH
13240: LD_INT 3
13242: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
13243: LD_INT 0
13245: PPUSH
13246: LD_INT 1
13248: PPUSH
13249: LD_OWVAR 67
13253: PUSH
13254: LD_INT 2
13256: PLUS
13257: PPUSH
13258: CALL_OW 380
// un := CreateHuman ;
13262: LD_ADDR_VAR 0 2
13266: PUSH
13267: CALL_OW 44
13271: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
13272: LD_VAR 0 2
13276: PPUSH
13277: LD_INT 160
13279: PPUSH
13280: LD_INT 3
13282: PPUSH
13283: LD_INT 2
13285: PPUSH
13286: LD_INT 0
13288: PPUSH
13289: CALL 63299 0 5
// SetClass ( un , class_bazooker ) ;
13293: LD_VAR 0 2
13297: PPUSH
13298: LD_INT 9
13300: PPUSH
13301: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
13305: LD_ADDR_EXP 56
13309: PUSH
13310: LD_EXP 56
13314: PPUSH
13315: LD_EXP 56
13319: PUSH
13320: LD_INT 1
13322: PLUS
13323: PPUSH
13324: LD_VAR 0 2
13328: PPUSH
13329: CALL_OW 1
13333: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
13334: LD_VAR 0 2
13338: PPUSH
13339: LD_INT 177
13341: PPUSH
13342: LD_INT 17
13344: PPUSH
13345: CALL_OW 111
// wait ( 0 0$2 ) ;
13349: LD_INT 70
13351: PPUSH
13352: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
13356: LD_ADDR_VAR 0 4
13360: PUSH
13361: LD_VAR 0 4
13365: PPUSH
13366: LD_VAR 0 4
13370: PUSH
13371: LD_INT 1
13373: PLUS
13374: PPUSH
13375: LD_VAR 0 2
13379: PPUSH
13380: CALL_OW 1
13384: ST_TO_ADDR
// end ;
13385: GO 13216
13387: POP
13388: POP
// end ; for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] + waveStrength do
13389: LD_ADDR_VAR 0 1
13393: PUSH
13394: DOUBLE
13395: LD_INT 1
13397: DEC
13398: ST_TO_ADDR
13399: LD_INT 2
13401: PUSH
13402: LD_INT 3
13404: PUSH
13405: LD_INT 4
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: LIST
13412: PUSH
13413: LD_OWVAR 67
13417: ARRAY
13418: PUSH
13419: LD_EXP 57
13423: PLUS
13424: PUSH
13425: FOR_TO
13426: IFFALSE 13735
// begin InitHc ;
13428: CALL_OW 19
// InitVc ;
13432: CALL_OW 20
// uc_side := 3 ;
13436: LD_ADDR_OWVAR 20
13440: PUSH
13441: LD_INT 3
13443: ST_TO_ADDR
// uc_nation := 3 ;
13444: LD_ADDR_OWVAR 21
13448: PUSH
13449: LD_INT 3
13451: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
13452: LD_INT 22
13454: PUSH
13455: LD_INT 23
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PUSH
13462: LD_INT 1
13464: PPUSH
13465: LD_INT 2
13467: PPUSH
13468: CALL_OW 12
13472: ARRAY
13473: PPUSH
13474: LD_INT 1
13476: PPUSH
13477: LD_INT 1
13479: PPUSH
13480: LD_INT 44
13482: PUSH
13483: LD_INT 45
13485: PUSH
13486: LD_INT 43
13488: PUSH
13489: LD_INT 42
13491: PUSH
13492: LD_INT 44
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: PUSH
13502: LD_INT 1
13504: PPUSH
13505: LD_INT 5
13507: PPUSH
13508: CALL_OW 12
13512: ARRAY
13513: PPUSH
13514: LD_INT 99
13516: PPUSH
13517: CALL 29495 0 5
// veh := CreateVehicle ;
13521: LD_ADDR_VAR 0 3
13525: PUSH
13526: CALL_OW 45
13530: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
13531: LD_VAR 0 3
13535: PPUSH
13536: LD_INT 160
13538: PPUSH
13539: LD_INT 3
13541: PPUSH
13542: LD_INT 2
13544: PPUSH
13545: LD_INT 0
13547: PPUSH
13548: CALL 63299 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
13552: LD_ADDR_EXP 56
13556: PUSH
13557: LD_EXP 56
13561: PPUSH
13562: LD_EXP 56
13566: PUSH
13567: LD_INT 1
13569: PLUS
13570: PPUSH
13571: LD_VAR 0 3
13575: PPUSH
13576: CALL_OW 1
13580: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
13581: LD_INT 0
13583: PPUSH
13584: LD_INT 3
13586: PPUSH
13587: LD_OWVAR 67
13591: PUSH
13592: LD_INT 2
13594: PLUS
13595: PPUSH
13596: CALL_OW 380
// un := CreateHuman ;
13600: LD_ADDR_VAR 0 2
13604: PUSH
13605: CALL_OW 44
13609: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13610: LD_VAR 0 2
13614: PPUSH
13615: LD_VAR 0 3
13619: PPUSH
13620: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
13624: LD_ADDR_EXP 56
13628: PUSH
13629: LD_EXP 56
13633: PPUSH
13634: LD_EXP 56
13638: PUSH
13639: LD_INT 1
13641: PLUS
13642: PPUSH
13643: LD_VAR 0 2
13647: PPUSH
13648: CALL_OW 1
13652: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
13653: LD_VAR 0 2
13657: PPUSH
13658: LD_INT 177
13660: PPUSH
13661: LD_INT 17
13663: PPUSH
13664: CALL_OW 111
// wait ( 0 0$2 ) ;
13668: LD_INT 70
13670: PPUSH
13671: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
13675: LD_ADDR_VAR 0 4
13679: PUSH
13680: LD_VAR 0 4
13684: PPUSH
13685: LD_VAR 0 4
13689: PUSH
13690: LD_INT 1
13692: PLUS
13693: PPUSH
13694: LD_VAR 0 3
13698: PPUSH
13699: CALL_OW 1
13703: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
13704: LD_ADDR_VAR 0 4
13708: PUSH
13709: LD_VAR 0 4
13713: PPUSH
13714: LD_VAR 0 4
13718: PUSH
13719: LD_INT 1
13721: PLUS
13722: PPUSH
13723: LD_VAR 0 2
13727: PPUSH
13728: CALL_OW 1
13732: ST_TO_ADDR
// end ;
13733: GO 13425
13735: POP
13736: POP
// for i in tmp do
13737: LD_ADDR_VAR 0 1
13741: PUSH
13742: LD_VAR 0 4
13746: PUSH
13747: FOR_IN
13748: IFFALSE 13838
// begin if Prob ( 50 ) then
13750: LD_INT 50
13752: PPUSH
13753: CALL_OW 13
13757: IFFALSE 13776
// ComAgressiveMove ( i , 206 , 73 ) else
13759: LD_VAR 0 1
13763: PPUSH
13764: LD_INT 206
13766: PPUSH
13767: LD_INT 73
13769: PPUSH
13770: CALL_OW 114
13774: GO 13836
// begin ComAgressiveMove ( i , 206 , 73 ) ;
13776: LD_VAR 0 1
13780: PPUSH
13781: LD_INT 206
13783: PPUSH
13784: LD_INT 73
13786: PPUSH
13787: CALL_OW 114
// AddComAgressiveMove ( i , 257 , 105 ) ;
13791: LD_VAR 0 1
13795: PPUSH
13796: LD_INT 257
13798: PPUSH
13799: LD_INT 105
13801: PPUSH
13802: CALL_OW 174
// AddComAgressiveMove ( i , 227 , 97 ) ;
13806: LD_VAR 0 1
13810: PPUSH
13811: LD_INT 227
13813: PPUSH
13814: LD_INT 97
13816: PPUSH
13817: CALL_OW 174
// AddComAgressiveMove ( i , 206 , 73 ) ;
13821: LD_VAR 0 1
13825: PPUSH
13826: LD_INT 206
13828: PPUSH
13829: LD_INT 73
13831: PPUSH
13832: CALL_OW 174
// end ; end ;
13836: GO 13747
13838: POP
13839: POP
// repeat wait ( 0 0$1 ) ;
13840: LD_INT 35
13842: PPUSH
13843: CALL_OW 67
// for i in tmp do
13847: LD_ADDR_VAR 0 1
13851: PUSH
13852: LD_VAR 0 4
13856: PUSH
13857: FOR_IN
13858: IFFALSE 13937
// if IsDead ( i ) then
13860: LD_VAR 0 1
13864: PPUSH
13865: CALL_OW 301
13869: IFFALSE 13889
// tmp := tmp diff i else
13871: LD_ADDR_VAR 0 4
13875: PUSH
13876: LD_VAR 0 4
13880: PUSH
13881: LD_VAR 0 1
13885: DIFF
13886: ST_TO_ADDR
13887: GO 13935
// if not HasTask ( i ) then
13889: LD_VAR 0 1
13893: PPUSH
13894: CALL_OW 314
13898: NOT
13899: IFFALSE 13935
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
13901: LD_VAR 0 1
13905: PPUSH
13906: LD_INT 81
13908: PUSH
13909: LD_INT 3
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PPUSH
13916: CALL_OW 69
13920: PPUSH
13921: LD_VAR 0 1
13925: PPUSH
13926: CALL_OW 74
13930: PPUSH
13931: CALL_OW 115
13935: GO 13857
13937: POP
13938: POP
// until not tmp ;
13939: LD_VAR 0 4
13943: NOT
13944: IFFALSE 13840
// if firstAttack then
13946: LD_EXP 28
13950: IFFALSE 13960
// firstAttack := false ;
13952: LD_ADDR_EXP 28
13956: PUSH
13957: LD_INT 0
13959: ST_TO_ADDR
// end ;
13960: PPOPN 4
13962: END
// every 8 8$00 trigger not omarAttack and bergkampfArrived and not rolfHasVehicles do var i , un , veh , tmp ;
13963: LD_EXP 23
13967: NOT
13968: PUSH
13969: LD_EXP 3
13973: AND
13974: PUSH
13975: LD_EXP 16
13979: NOT
13980: AND
13981: IFFALSE 14813
13983: GO 13985
13985: DISABLE
13986: LD_INT 0
13988: PPUSH
13989: PPUSH
13990: PPUSH
13991: PPUSH
// begin enable ;
13992: ENABLE
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
13993: LD_ADDR_VAR 0 1
13997: PUSH
13998: DOUBLE
13999: LD_INT 1
14001: DEC
14002: ST_TO_ADDR
14003: LD_INT 1
14005: PUSH
14006: LD_INT 2
14008: PUSH
14009: LD_INT 2
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: LIST
14016: PUSH
14017: LD_OWVAR 67
14021: ARRAY
14022: PUSH
14023: FOR_TO
14024: IFFALSE 14325
// begin InitHc ;
14026: CALL_OW 19
// InitVc ;
14030: CALL_OW 20
// uc_side := 3 ;
14034: LD_ADDR_OWVAR 20
14038: PUSH
14039: LD_INT 3
14041: ST_TO_ADDR
// uc_nation := 3 ;
14042: LD_ADDR_OWVAR 21
14046: PUSH
14047: LD_INT 3
14049: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
14050: LD_INT 22
14052: PUSH
14053: LD_INT 23
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PUSH
14060: LD_INT 1
14062: PPUSH
14063: LD_INT 2
14065: PPUSH
14066: CALL_OW 12
14070: ARRAY
14071: PPUSH
14072: LD_INT 1
14074: PPUSH
14075: LD_INT 1
14077: PPUSH
14078: LD_INT 44
14080: PUSH
14081: LD_INT 43
14083: PUSH
14084: LD_INT 42
14086: PUSH
14087: LD_INT 44
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: PUSH
14096: LD_INT 1
14098: PPUSH
14099: LD_INT 4
14101: PPUSH
14102: CALL_OW 12
14106: ARRAY
14107: PPUSH
14108: LD_INT 99
14110: PPUSH
14111: CALL 29495 0 5
// veh := CreateVehicle ;
14115: LD_ADDR_VAR 0 3
14119: PUSH
14120: CALL_OW 45
14124: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
14125: LD_VAR 0 3
14129: PPUSH
14130: LD_INT 5
14132: PPUSH
14133: LD_INT 3
14135: PPUSH
14136: LD_INT 2
14138: PPUSH
14139: LD_INT 0
14141: PPUSH
14142: CALL 63299 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14146: LD_ADDR_EXP 56
14150: PUSH
14151: LD_EXP 56
14155: PPUSH
14156: LD_EXP 56
14160: PUSH
14161: LD_INT 1
14163: PLUS
14164: PPUSH
14165: LD_VAR 0 3
14169: PPUSH
14170: CALL_OW 1
14174: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
14175: LD_INT 0
14177: PPUSH
14178: LD_INT 3
14180: PPUSH
14181: LD_OWVAR 67
14185: PPUSH
14186: CALL_OW 380
// un := CreateHuman ;
14190: LD_ADDR_VAR 0 2
14194: PUSH
14195: CALL_OW 44
14199: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14200: LD_VAR 0 2
14204: PPUSH
14205: LD_VAR 0 3
14209: PPUSH
14210: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14214: LD_ADDR_EXP 56
14218: PUSH
14219: LD_EXP 56
14223: PPUSH
14224: LD_EXP 56
14228: PUSH
14229: LD_INT 1
14231: PLUS
14232: PPUSH
14233: LD_VAR 0 2
14237: PPUSH
14238: CALL_OW 1
14242: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
14243: LD_VAR 0 2
14247: PPUSH
14248: LD_INT 23
14250: PPUSH
14251: LD_INT 7
14253: PPUSH
14254: CALL_OW 111
// wait ( 0 0$2 ) ;
14258: LD_INT 70
14260: PPUSH
14261: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14265: LD_ADDR_VAR 0 4
14269: PUSH
14270: LD_VAR 0 4
14274: PPUSH
14275: LD_VAR 0 4
14279: PUSH
14280: LD_INT 1
14282: PLUS
14283: PPUSH
14284: LD_VAR 0 3
14288: PPUSH
14289: CALL_OW 1
14293: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14294: LD_ADDR_VAR 0 4
14298: PUSH
14299: LD_VAR 0 4
14303: PPUSH
14304: LD_VAR 0 4
14308: PUSH
14309: LD_INT 1
14311: PLUS
14312: PPUSH
14313: LD_VAR 0 2
14317: PPUSH
14318: CALL_OW 1
14322: ST_TO_ADDR
// end ;
14323: GO 14023
14325: POP
14326: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + waveStrength do
14327: LD_ADDR_VAR 0 1
14331: PUSH
14332: DOUBLE
14333: LD_INT 1
14335: DEC
14336: ST_TO_ADDR
14337: LD_INT 2
14339: PUSH
14340: LD_INT 3
14342: PUSH
14343: LD_INT 3
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: LIST
14350: PUSH
14351: LD_OWVAR 67
14355: ARRAY
14356: PUSH
14357: LD_EXP 57
14361: PLUS
14362: PUSH
14363: FOR_TO
14364: IFFALSE 14673
// begin InitHc ;
14366: CALL_OW 19
// InitVc ;
14370: CALL_OW 20
// uc_side := 3 ;
14374: LD_ADDR_OWVAR 20
14378: PUSH
14379: LD_INT 3
14381: ST_TO_ADDR
// uc_nation := 3 ;
14382: LD_ADDR_OWVAR 21
14386: PUSH
14387: LD_INT 3
14389: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
14390: LD_INT 22
14392: PUSH
14393: LD_INT 23
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PUSH
14400: LD_INT 1
14402: PPUSH
14403: LD_INT 2
14405: PPUSH
14406: CALL_OW 12
14410: ARRAY
14411: PPUSH
14412: LD_INT 1
14414: PPUSH
14415: LD_INT 1
14417: PPUSH
14418: LD_INT 44
14420: PUSH
14421: LD_INT 45
14423: PUSH
14424: LD_INT 43
14426: PUSH
14427: LD_INT 42
14429: PUSH
14430: LD_INT 44
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: PUSH
14440: LD_INT 1
14442: PPUSH
14443: LD_INT 5
14445: PPUSH
14446: CALL_OW 12
14450: ARRAY
14451: PPUSH
14452: LD_INT 99
14454: PPUSH
14455: CALL 29495 0 5
// veh := CreateVehicle ;
14459: LD_ADDR_VAR 0 3
14463: PUSH
14464: CALL_OW 45
14468: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
14469: LD_VAR 0 3
14473: PPUSH
14474: LD_INT 127
14476: PPUSH
14477: LD_INT 243
14479: PPUSH
14480: LD_INT 0
14482: PPUSH
14483: LD_INT 0
14485: PPUSH
14486: CALL 63299 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14490: LD_ADDR_EXP 56
14494: PUSH
14495: LD_EXP 56
14499: PPUSH
14500: LD_EXP 56
14504: PUSH
14505: LD_INT 1
14507: PLUS
14508: PPUSH
14509: LD_VAR 0 3
14513: PPUSH
14514: CALL_OW 1
14518: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
14519: LD_INT 0
14521: PPUSH
14522: LD_INT 3
14524: PPUSH
14525: LD_OWVAR 67
14529: PUSH
14530: LD_INT 2
14532: PLUS
14533: PPUSH
14534: CALL_OW 380
// un := CreateHuman ;
14538: LD_ADDR_VAR 0 2
14542: PUSH
14543: CALL_OW 44
14547: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14548: LD_VAR 0 2
14552: PPUSH
14553: LD_VAR 0 3
14557: PPUSH
14558: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14562: LD_ADDR_EXP 56
14566: PUSH
14567: LD_EXP 56
14571: PPUSH
14572: LD_EXP 56
14576: PUSH
14577: LD_INT 1
14579: PLUS
14580: PPUSH
14581: LD_VAR 0 2
14585: PPUSH
14586: CALL_OW 1
14590: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
14591: LD_VAR 0 2
14595: PPUSH
14596: LD_INT 130
14598: PPUSH
14599: LD_INT 233
14601: PPUSH
14602: CALL_OW 111
// wait ( 0 0$2 ) ;
14606: LD_INT 70
14608: PPUSH
14609: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14613: LD_ADDR_VAR 0 4
14617: PUSH
14618: LD_VAR 0 4
14622: PPUSH
14623: LD_VAR 0 4
14627: PUSH
14628: LD_INT 1
14630: PLUS
14631: PPUSH
14632: LD_VAR 0 3
14636: PPUSH
14637: CALL_OW 1
14641: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14642: LD_ADDR_VAR 0 4
14646: PUSH
14647: LD_VAR 0 4
14651: PPUSH
14652: LD_VAR 0 4
14656: PUSH
14657: LD_INT 1
14659: PLUS
14660: PPUSH
14661: LD_VAR 0 2
14665: PPUSH
14666: CALL_OW 1
14670: ST_TO_ADDR
// end ;
14671: GO 14363
14673: POP
14674: POP
// for i in tmp do
14675: LD_ADDR_VAR 0 1
14679: PUSH
14680: LD_VAR 0 4
14684: PUSH
14685: FOR_IN
14686: IFFALSE 14705
// begin ComAgressiveMove ( i , 76 , 49 ) ;
14688: LD_VAR 0 1
14692: PPUSH
14693: LD_INT 76
14695: PPUSH
14696: LD_INT 49
14698: PPUSH
14699: CALL_OW 114
// end ;
14703: GO 14685
14705: POP
14706: POP
// repeat wait ( 0 0$1 ) ;
14707: LD_INT 35
14709: PPUSH
14710: CALL_OW 67
// for i in tmp do
14714: LD_ADDR_VAR 0 1
14718: PUSH
14719: LD_VAR 0 4
14723: PUSH
14724: FOR_IN
14725: IFFALSE 14804
// if IsDead ( i ) then
14727: LD_VAR 0 1
14731: PPUSH
14732: CALL_OW 301
14736: IFFALSE 14756
// tmp := tmp diff i else
14738: LD_ADDR_VAR 0 4
14742: PUSH
14743: LD_VAR 0 4
14747: PUSH
14748: LD_VAR 0 1
14752: DIFF
14753: ST_TO_ADDR
14754: GO 14802
// if not HasTask ( i ) then
14756: LD_VAR 0 1
14760: PPUSH
14761: CALL_OW 314
14765: NOT
14766: IFFALSE 14802
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
14768: LD_VAR 0 1
14772: PPUSH
14773: LD_INT 81
14775: PUSH
14776: LD_INT 3
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PPUSH
14783: CALL_OW 69
14787: PPUSH
14788: LD_VAR 0 1
14792: PPUSH
14793: CALL_OW 74
14797: PPUSH
14798: CALL_OW 115
14802: GO 14724
14804: POP
14805: POP
// until not tmp ;
14806: LD_VAR 0 4
14810: NOT
14811: IFFALSE 14707
// end ;
14813: PPOPN 4
14815: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
14816: LD_EXP 6
14820: IFFALSE 15291
14822: GO 14824
14824: DISABLE
14825: LD_INT 0
14827: PPUSH
14828: PPUSH
14829: PPUSH
14830: PPUSH
// begin wait ( 3 3$00 ) ;
14831: LD_INT 6300
14833: PPUSH
14834: CALL_OW 67
// for i := 1 to 3 do
14838: LD_ADDR_VAR 0 1
14842: PUSH
14843: DOUBLE
14844: LD_INT 1
14846: DEC
14847: ST_TO_ADDR
14848: LD_INT 3
14850: PUSH
14851: FOR_TO
14852: IFFALSE 15151
// begin InitHc ;
14854: CALL_OW 19
// InitVc ;
14858: CALL_OW 20
// uc_side := 3 ;
14862: LD_ADDR_OWVAR 20
14866: PUSH
14867: LD_INT 3
14869: ST_TO_ADDR
// uc_nation := 3 ;
14870: LD_ADDR_OWVAR 21
14874: PUSH
14875: LD_INT 3
14877: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
14878: LD_INT 22
14880: PUSH
14881: LD_INT 23
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: LD_INT 1
14890: PPUSH
14891: LD_INT 2
14893: PPUSH
14894: CALL_OW 12
14898: ARRAY
14899: PPUSH
14900: LD_INT 1
14902: PPUSH
14903: LD_INT 1
14905: PPUSH
14906: LD_INT 44
14908: PUSH
14909: LD_INT 43
14911: PUSH
14912: LD_INT 42
14914: PUSH
14915: LD_INT 44
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: PUSH
14924: LD_INT 1
14926: PPUSH
14927: LD_INT 4
14929: PPUSH
14930: CALL_OW 12
14934: ARRAY
14935: PPUSH
14936: LD_INT 99
14938: PPUSH
14939: CALL 29495 0 5
// veh := CreateVehicle ;
14943: LD_ADDR_VAR 0 3
14947: PUSH
14948: CALL_OW 45
14952: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
14953: LD_VAR 0 3
14957: PPUSH
14958: LD_INT 293
14960: PPUSH
14961: LD_INT 246
14963: PPUSH
14964: LD_INT 5
14966: PPUSH
14967: LD_INT 0
14969: PPUSH
14970: CALL 63299 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14974: LD_ADDR_EXP 56
14978: PUSH
14979: LD_EXP 56
14983: PPUSH
14984: LD_EXP 56
14988: PUSH
14989: LD_INT 1
14991: PLUS
14992: PPUSH
14993: LD_VAR 0 3
14997: PPUSH
14998: CALL_OW 1
15002: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
15003: LD_INT 0
15005: PPUSH
15006: LD_INT 3
15008: PPUSH
15009: LD_INT 3
15011: PPUSH
15012: CALL_OW 380
// un := CreateHuman ;
15016: LD_ADDR_VAR 0 2
15020: PUSH
15021: CALL_OW 44
15025: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15026: LD_VAR 0 2
15030: PPUSH
15031: LD_VAR 0 3
15035: PPUSH
15036: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
15040: LD_ADDR_EXP 56
15044: PUSH
15045: LD_EXP 56
15049: PPUSH
15050: LD_EXP 56
15054: PUSH
15055: LD_INT 1
15057: PLUS
15058: PPUSH
15059: LD_VAR 0 2
15063: PPUSH
15064: CALL_OW 1
15068: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
15069: LD_VAR 0 2
15073: PPUSH
15074: LD_INT 273
15076: PPUSH
15077: LD_INT 227
15079: PPUSH
15080: CALL_OW 111
// wait ( 0 0$2 ) ;
15084: LD_INT 70
15086: PPUSH
15087: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
15091: LD_ADDR_VAR 0 4
15095: PUSH
15096: LD_VAR 0 4
15100: PPUSH
15101: LD_VAR 0 4
15105: PUSH
15106: LD_INT 1
15108: PLUS
15109: PPUSH
15110: LD_VAR 0 3
15114: PPUSH
15115: CALL_OW 1
15119: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
15120: LD_ADDR_VAR 0 4
15124: PUSH
15125: LD_VAR 0 4
15129: PPUSH
15130: LD_VAR 0 4
15134: PUSH
15135: LD_INT 1
15137: PLUS
15138: PPUSH
15139: LD_VAR 0 2
15143: PPUSH
15144: CALL_OW 1
15148: ST_TO_ADDR
// end ;
15149: GO 14851
15151: POP
15152: POP
// for i in tmp do
15153: LD_ADDR_VAR 0 1
15157: PUSH
15158: LD_VAR 0 4
15162: PUSH
15163: FOR_IN
15164: IFFALSE 15183
// begin ComAgressiveMove ( i , 330 , 231 ) ;
15166: LD_VAR 0 1
15170: PPUSH
15171: LD_INT 330
15173: PPUSH
15174: LD_INT 231
15176: PPUSH
15177: CALL_OW 114
// end ;
15181: GO 15163
15183: POP
15184: POP
// repeat wait ( 0 0$1 ) ;
15185: LD_INT 35
15187: PPUSH
15188: CALL_OW 67
// for i in tmp do
15192: LD_ADDR_VAR 0 1
15196: PUSH
15197: LD_VAR 0 4
15201: PUSH
15202: FOR_IN
15203: IFFALSE 15282
// if IsDead ( i ) then
15205: LD_VAR 0 1
15209: PPUSH
15210: CALL_OW 301
15214: IFFALSE 15234
// tmp := tmp diff i else
15216: LD_ADDR_VAR 0 4
15220: PUSH
15221: LD_VAR 0 4
15225: PUSH
15226: LD_VAR 0 1
15230: DIFF
15231: ST_TO_ADDR
15232: GO 15280
// if not HasTask ( i ) then
15234: LD_VAR 0 1
15238: PPUSH
15239: CALL_OW 314
15243: NOT
15244: IFFALSE 15280
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
15246: LD_VAR 0 1
15250: PPUSH
15251: LD_INT 81
15253: PUSH
15254: LD_INT 3
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PPUSH
15261: CALL_OW 69
15265: PPUSH
15266: LD_VAR 0 1
15270: PPUSH
15271: CALL_OW 74
15275: PPUSH
15276: CALL_OW 115
15280: GO 15202
15282: POP
15283: POP
// until not tmp ;
15284: LD_VAR 0 4
15288: NOT
15289: IFFALSE 15185
// end ;
15291: PPOPN 4
15293: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
15294: LD_INT 3
15296: PUSH
15297: LD_INT 22
15299: PUSH
15300: LD_INT 2
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PUSH
15311: LD_INT 32
15313: PUSH
15314: LD_INT 1
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PPUSH
15325: CALL_OW 69
15329: IFFALSE 15413
15331: GO 15333
15333: DISABLE
15334: LD_INT 0
15336: PPUSH
// begin enable ;
15337: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
15338: LD_ADDR_VAR 0 1
15342: PUSH
15343: LD_INT 3
15345: PUSH
15346: LD_INT 22
15348: PUSH
15349: LD_INT 2
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: PUSH
15360: LD_INT 32
15362: PUSH
15363: LD_INT 1
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: PPUSH
15374: CALL_OW 69
15378: PUSH
15379: FOR_IN
15380: IFFALSE 15411
// if GetFuel ( i ) < 3 then
15382: LD_VAR 0 1
15386: PPUSH
15387: CALL_OW 261
15391: PUSH
15392: LD_INT 3
15394: LESS
15395: IFFALSE 15409
// SetFuel ( i , 3 ) ;
15397: LD_VAR 0 1
15401: PPUSH
15402: LD_INT 3
15404: PPUSH
15405: CALL_OW 240
15409: GO 15379
15411: POP
15412: POP
// end ; end_of_file
15413: PPOPN 1
15415: END
// export function Action ; begin
15416: LD_INT 0
15418: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
15419: LD_INT 2
15421: PPUSH
15422: LD_INT 4
15424: PPUSH
15425: CALL_OW 332
// Video ( true ) ;
15429: LD_INT 1
15431: PPUSH
15432: CALL 61340 0 1
// music_nat := 3 ;
15436: LD_ADDR_OWVAR 71
15440: PUSH
15441: LD_INT 3
15443: ST_TO_ADDR
// music_class := music_recon ;
15444: LD_ADDR_OWVAR 72
15448: PUSH
15449: LD_INT 3
15451: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
15452: LD_INT 213
15454: PPUSH
15455: LD_INT 89
15457: PPUSH
15458: CALL_OW 86
// if Kaia and Olaf then
15462: LD_EXP 34
15466: PUSH
15467: LD_EXP 38
15471: AND
15472: IFFALSE 15478
// SceneKaiaWithOlaf ;
15474: CALL 15533 0 0
// if Givi and Kamil then
15478: LD_EXP 30
15482: PUSH
15483: LD_EXP 33
15487: AND
15488: IFFALSE 15494
// SceneWithGiviAndKamil ;
15490: CALL 16104 0 0
// Video ( false ) ;
15494: LD_INT 0
15496: PPUSH
15497: CALL 61340 0 1
// ChangeMissionObjectives ( M1 ) ;
15501: LD_STRING M1
15503: PPUSH
15504: CALL_OW 337
// music_nat := music_auto ;
15508: LD_ADDR_OWVAR 71
15512: PUSH
15513: LD_INT 0
15515: ST_TO_ADDR
// music_class := music_auto ;
15516: LD_ADDR_OWVAR 72
15520: PUSH
15521: LD_INT 0
15523: ST_TO_ADDR
// SaveForQuickRestart ;
15524: CALL_OW 22
// end ;
15528: LD_VAR 0 1
15532: RET
// export function SceneKaiaWithOlaf ; begin
15533: LD_INT 0
15535: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
15536: LD_INT 22
15538: PUSH
15539: LD_INT 2
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 30
15548: PUSH
15549: LD_INT 3
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: PPUSH
15560: CALL_OW 69
15564: PPUSH
15565: LD_INT 14
15567: PPUSH
15568: LD_INT 1
15570: PPUSH
15571: LD_INT 1
15573: PPUSH
15574: LD_INT 26
15576: PPUSH
15577: CALL_OW 125
// wait ( 0 0$1 ) ;
15581: LD_INT 35
15583: PPUSH
15584: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
15588: LD_EXP 34
15592: PPUSH
15593: LD_STRING DK-Mem-1
15595: PPUSH
15596: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
15600: LD_EXP 34
15604: PPUSH
15605: LD_STRING DK-Mem-2
15607: PPUSH
15608: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
15612: LD_EXP 38
15616: PPUSH
15617: LD_STRING DO-Mem-3
15619: PPUSH
15620: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
15624: LD_EXP 34
15628: PPUSH
15629: LD_STRING DK-Mem-4
15631: PPUSH
15632: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
15636: LD_EXP 38
15640: PPUSH
15641: LD_STRING DO-Mem-5
15643: PPUSH
15644: CALL_OW 88
// wait ( 0 0$2 ) ;
15648: LD_INT 70
15650: PPUSH
15651: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
15655: LD_INT 22
15657: PUSH
15658: LD_INT 2
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PUSH
15665: LD_INT 30
15667: PUSH
15668: LD_INT 3
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PPUSH
15679: CALL_OW 69
15683: PPUSH
15684: LD_INT 90
15686: PPUSH
15687: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
15691: LD_EXP 38
15695: PPUSH
15696: LD_STRING DO-Mem-6
15698: PPUSH
15699: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
15703: LD_EXP 34
15707: PPUSH
15708: LD_STRING DK-Mem-7
15710: PPUSH
15711: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
15715: LD_EXP 29
15719: PPUSH
15720: LD_EXP 34
15724: PPUSH
15725: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
15729: LD_EXP 29
15733: PPUSH
15734: LD_STRING DH-Mem-8
15736: PPUSH
15737: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
15741: LD_EXP 34
15745: PUSH
15746: LD_EXP 38
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: PPUSH
15755: LD_EXP 29
15759: PPUSH
15760: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
15764: LD_EXP 38
15768: PPUSH
15769: LD_STRING DO-Mem-9
15771: PPUSH
15772: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
15776: LD_EXP 38
15780: PPUSH
15781: LD_STRING DO-Mem-10
15783: PPUSH
15784: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
15788: LD_EXP 38
15792: PPUSH
15793: LD_STRING DO-Mem-11
15795: PPUSH
15796: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
15800: LD_EXP 38
15804: PPUSH
15805: LD_STRING DO-Mem-12
15807: PPUSH
15808: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
15812: LD_EXP 34
15816: PPUSH
15817: LD_STRING DK-Mem-13
15819: PPUSH
15820: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
15824: LD_EXP 34
15828: PPUSH
15829: LD_STRING DK-Mem-14
15831: PPUSH
15832: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
15836: LD_EXP 34
15840: PPUSH
15841: LD_STRING DK-Mem-15
15843: PPUSH
15844: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
15848: LD_EXP 34
15852: PPUSH
15853: LD_STRING DK-Mem-16
15855: PPUSH
15856: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
15860: LD_EXP 34
15864: PPUSH
15865: LD_STRING DK-Mem-17
15867: PPUSH
15868: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
15872: LD_EXP 38
15876: PPUSH
15877: LD_EXP 34
15881: PPUSH
15882: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
15886: LD_EXP 38
15890: PPUSH
15891: LD_STRING DO-Mem-18
15893: PPUSH
15894: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
15898: LD_EXP 34
15902: PPUSH
15903: LD_EXP 38
15907: PPUSH
15908: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
15912: LD_EXP 34
15916: PPUSH
15917: LD_STRING DK-Mem-19
15919: PPUSH
15920: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
15924: LD_EXP 38
15928: PPUSH
15929: LD_INT 214
15931: PPUSH
15932: LD_INT 86
15934: PPUSH
15935: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
15939: LD_EXP 38
15943: PPUSH
15944: LD_EXP 34
15948: PPUSH
15949: CALL_OW 179
// if Givi then
15953: LD_EXP 30
15957: IFFALSE 15988
// begin ComMoveXY ( Givi , 217 , 86 ) ;
15959: LD_EXP 30
15963: PPUSH
15964: LD_INT 217
15966: PPUSH
15967: LD_INT 86
15969: PPUSH
15970: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
15974: LD_EXP 30
15978: PPUSH
15979: LD_EXP 29
15983: PPUSH
15984: CALL_OW 179
// end ; if Kamil then
15988: LD_EXP 33
15992: IFFALSE 16032
// begin ComExit ( Kamil ) ;
15994: LD_EXP 33
15998: PPUSH
15999: CALL 61756 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
16003: LD_EXP 33
16007: PPUSH
16008: LD_INT 212
16010: PPUSH
16011: LD_INT 86
16013: PPUSH
16014: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
16018: LD_EXP 33
16022: PPUSH
16023: LD_EXP 29
16027: PPUSH
16028: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
16032: LD_INT 70
16034: PPUSH
16035: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
16039: LD_EXP 29
16043: PPUSH
16044: LD_STRING DH-Mem-20
16046: PPUSH
16047: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
16051: LD_EXP 38
16055: PPUSH
16056: LD_INT 215
16058: PPUSH
16059: LD_INT 87
16061: PPUSH
16062: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
16066: LD_EXP 38
16070: PPUSH
16071: LD_EXP 34
16075: PPUSH
16076: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
16080: LD_EXP 34
16084: PPUSH
16085: LD_STRING DK-Mem-21
16087: PPUSH
16088: CALL_OW 88
// wait ( 0 0$2 ) ;
16092: LD_INT 70
16094: PPUSH
16095: CALL_OW 67
// end ;
16099: LD_VAR 0 1
16103: RET
// export function SceneWithGiviAndKamil ; begin
16104: LD_INT 0
16106: PPUSH
// if Markov then
16107: LD_EXP 36
16111: IFFALSE 16162
// begin if IsInUnit ( Markov ) then
16113: LD_EXP 36
16117: PPUSH
16118: CALL_OW 310
16122: IFFALSE 16133
// ComExit ( Markov ) ;
16124: LD_EXP 36
16128: PPUSH
16129: CALL 61756 0 1
// AddComMoveXY ( Markov , 212 , 88 ) ;
16133: LD_EXP 36
16137: PPUSH
16138: LD_INT 212
16140: PPUSH
16141: LD_INT 88
16143: PPUSH
16144: CALL_OW 171
// AddComTurnUnit ( Markov , Heike ) ;
16148: LD_EXP 36
16152: PPUSH
16153: LD_EXP 29
16157: PPUSH
16158: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
16162: LD_EXP 30
16166: PPUSH
16167: LD_STRING DG-Obj-1
16169: PPUSH
16170: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
16174: LD_EXP 33
16178: PPUSH
16179: LD_STRING DKam-Obj-2
16181: PPUSH
16182: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
16186: LD_EXP 29
16190: PPUSH
16191: LD_EXP 33
16195: PPUSH
16196: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
16200: LD_EXP 33
16204: PPUSH
16205: LD_STRING DKam-Obj-3
16207: PPUSH
16208: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
16212: LD_EXP 36
16216: PPUSH
16217: LD_STRING DMar-Obj-4
16219: PPUSH
16220: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
16224: LD_EXP 33
16228: PPUSH
16229: LD_STRING DKam-Obj-6
16231: PPUSH
16232: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
16236: LD_EXP 33
16240: PPUSH
16241: LD_STRING DKam-Obj-7
16243: PPUSH
16244: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
16248: LD_EXP 33
16252: PPUSH
16253: LD_STRING DKam-Obj-8
16255: PPUSH
16256: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
16260: LD_EXP 29
16264: PPUSH
16265: LD_STRING DH-Obj-9
16267: PPUSH
16268: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
16272: LD_EXP 33
16276: PPUSH
16277: LD_STRING DKam-Obj-10
16279: PPUSH
16280: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
16284: LD_EXP 33
16288: PPUSH
16289: LD_STRING DKam-Obj-11
16291: PPUSH
16292: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
16296: LD_EXP 36
16300: PPUSH
16301: LD_STRING DMar-Obj-12
16303: PPUSH
16304: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
16308: LD_EXP 36
16312: PPUSH
16313: LD_STRING DMar-Obj-13
16315: PPUSH
16316: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
16320: LD_EXP 36
16324: PPUSH
16325: LD_STRING DMar-Obj-14
16327: PPUSH
16328: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
16332: LD_EXP 38
16336: PPUSH
16337: LD_STRING DO-Obj-15
16339: PPUSH
16340: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
16344: LD_EXP 38
16348: PPUSH
16349: LD_STRING DO-Obj-16
16351: PPUSH
16352: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
16356: LD_EXP 29
16360: PPUSH
16361: LD_STRING DH-Obj-17
16363: PPUSH
16364: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
16368: LD_EXP 38
16372: PPUSH
16373: LD_STRING DO-Obj-18
16375: PPUSH
16376: CALL_OW 88
// end ;
16380: LD_VAR 0 1
16384: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
16385: LD_INT 34
16387: PUSH
16388: LD_EXP 63
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: PPUSH
16397: CALL_OW 69
16401: IFFALSE 16598
16403: GO 16405
16405: DISABLE
16406: LD_INT 0
16408: PPUSH
// begin wait ( 0 0$2 ) ;
16409: LD_INT 70
16411: PPUSH
16412: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
16416: LD_INT 34
16418: PUSH
16419: LD_EXP 63
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: PPUSH
16428: CALL_OW 69
16432: PPUSH
16433: CALL_OW 87
// DialogueOn ;
16437: CALL_OW 6
// if Markov then
16441: LD_EXP 36
16445: IFFALSE 16473
// begin Say ( Markov , DMar-Grn-1 ) ;
16447: LD_EXP 36
16451: PPUSH
16452: LD_STRING DMar-Grn-1
16454: PPUSH
16455: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
16459: LD_EXP 29
16463: PPUSH
16464: LD_STRING DH-Grn-2
16466: PPUSH
16467: CALL_OW 88
// end else
16471: GO 16572
// if heikeSecondSquad then
16473: LD_EXP 44
16477: IFFALSE 16572
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
16479: LD_ADDR_VAR 0 1
16483: PUSH
16484: LD_EXP 44
16488: PUSH
16489: LD_INT 1
16491: PPUSH
16492: LD_EXP 44
16496: PPUSH
16497: CALL_OW 12
16501: ARRAY
16502: ST_TO_ADDR
// case GetSex ( random ) of 1 :
16503: LD_VAR 0 1
16507: PPUSH
16508: CALL_OW 258
16512: PUSH
16513: LD_INT 1
16515: DOUBLE
16516: EQUAL
16517: IFTRUE 16521
16519: GO 16536
16521: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
16522: LD_VAR 0 1
16526: PPUSH
16527: LD_STRING DArm-Grn-1
16529: PPUSH
16530: CALL_OW 88
16534: GO 16560
16536: LD_INT 2
16538: DOUBLE
16539: EQUAL
16540: IFTRUE 16544
16542: GO 16559
16544: POP
// Say ( random , DArf-Grn-1 ) ; end ;
16545: LD_VAR 0 1
16549: PPUSH
16550: LD_STRING DArf-Grn-1
16552: PPUSH
16553: CALL_OW 88
16557: GO 16560
16559: POP
// Say ( Heike , DH-Grn-2 ) ;
16560: LD_EXP 29
16564: PPUSH
16565: LD_STRING DH-Grn-2
16567: PPUSH
16568: CALL_OW 88
// end ; DialogueOff ;
16572: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
16576: LD_STRING MortarConstructed
16578: PPUSH
16579: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
16583: LD_STRING SelfPropelledMortar
16585: PPUSH
16586: CALL_OW 339
// mortarConstructed := true ;
16590: LD_ADDR_EXP 15
16594: PUSH
16595: LD_INT 1
16597: ST_TO_ADDR
// end ;
16598: PPOPN 1
16600: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
16601: LD_INT 2
16603: PPUSH
16604: LD_INT 8
16606: PPUSH
16607: CALL_OW 294
16611: IFFALSE 16754
16613: GO 16615
16615: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
16616: LD_INT 200
16618: PPUSH
16619: LD_INT 162
16621: PPUSH
16622: LD_INT 2
16624: PPUSH
16625: LD_INT 6
16627: NEG
16628: PPUSH
16629: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
16633: LD_INT 200
16635: PPUSH
16636: LD_INT 162
16638: PPUSH
16639: LD_INT 2
16641: PPUSH
16642: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
16646: LD_INT 200
16648: PPUSH
16649: LD_INT 162
16651: PPUSH
16652: CALL_OW 84
// if not IsOk ( Kurt ) then
16656: LD_EXP 40
16660: PPUSH
16661: CALL_OW 302
16665: NOT
16666: IFFALSE 16670
// exit ;
16668: GO 16754
// Say ( Kurt , DKs-Otpst-2-1 ) ;
16670: LD_EXP 40
16674: PPUSH
16675: LD_STRING DKs-Otpst-2-1
16677: PPUSH
16678: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
16682: LD_EXP 34
16686: PPUSH
16687: LD_STRING DK-Otpst-2-2
16689: PPUSH
16690: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
16694: LD_EXP 40
16698: PPUSH
16699: LD_STRING DKs-Otpst-2-3
16701: PPUSH
16702: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
16706: LD_EXP 40
16710: PPUSH
16711: LD_STRING DKs-Otpst-2-4
16713: PPUSH
16714: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
16718: LD_EXP 40
16722: PPUSH
16723: LD_STRING DKs-Otpst-2-5
16725: PPUSH
16726: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
16730: LD_EXP 33
16734: PPUSH
16735: LD_STRING DKam-Otpst-2-6
16737: PPUSH
16738: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
16742: LD_EXP 40
16746: PPUSH
16747: LD_STRING DKs-Otpst-2-7
16749: PPUSH
16750: CALL_OW 88
// end ;
16754: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
16755: LD_INT 8
16757: PPUSH
16758: LD_INT 22
16760: PUSH
16761: LD_INT 3
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: LD_INT 21
16770: PUSH
16771: LD_INT 3
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PPUSH
16782: CALL_OW 70
16786: NOT
16787: PUSH
16788: LD_EXP 3
16792: NOT
16793: AND
16794: IFFALSE 17044
16796: GO 16798
16798: DISABLE
16799: LD_INT 0
16801: PPUSH
// begin outpostDestroyed := true ;
16802: LD_ADDR_EXP 4
16806: PUSH
16807: LD_INT 1
16809: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
16810: LD_INT 22
16812: PUSH
16813: LD_INT 2
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 34
16822: PUSH
16823: LD_EXP 63
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PUSH
16832: LD_INT 92
16834: PUSH
16835: LD_INT 195
16837: PUSH
16838: LD_INT 164
16840: PUSH
16841: LD_INT 12
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: LIST
16854: PPUSH
16855: CALL_OW 69
16859: NOT
16860: IFFALSE 16864
// exit ;
16862: GO 17044
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
16864: LD_EXP 30
16868: PPUSH
16869: CALL_OW 302
16873: NOT
16874: PUSH
16875: LD_EXP 34
16879: PPUSH
16880: CALL_OW 302
16884: NOT
16885: OR
16886: IFFALSE 16890
// exit ;
16888: GO 17044
// Say ( Givi , DG-Otpst-1-1 ) ;
16890: LD_EXP 30
16894: PPUSH
16895: LD_STRING DG-Otpst-1-1
16897: PPUSH
16898: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
16902: LD_EXP 34
16906: PPUSH
16907: LD_STRING DK-Otpst-1-2
16909: PPUSH
16910: CALL_OW 88
// if IsOk ( Markov ) then
16914: LD_EXP 36
16918: PPUSH
16919: CALL_OW 302
16923: IFFALSE 16951
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
16925: LD_EXP 36
16929: PPUSH
16930: LD_STRING DMar-Otpst-1-3
16932: PPUSH
16933: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
16937: LD_EXP 36
16941: PPUSH
16942: LD_STRING DMar-Otpst-1-4
16944: PPUSH
16945: CALL_OW 88
// end else
16949: GO 17032
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
16951: LD_ADDR_VAR 0 1
16955: PUSH
16956: LD_EXP 44
16960: PUSH
16961: LD_INT 1
16963: PPUSH
16964: LD_EXP 44
16968: PPUSH
16969: CALL_OW 12
16973: ARRAY
16974: ST_TO_ADDR
// case GetSex ( random ) of 1 :
16975: LD_VAR 0 1
16979: PPUSH
16980: CALL_OW 258
16984: PUSH
16985: LD_INT 1
16987: DOUBLE
16988: EQUAL
16989: IFTRUE 16993
16991: GO 17008
16993: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
16994: LD_VAR 0 1
16998: PPUSH
16999: LD_STRING DArm-Otpst-1-a-3
17001: PPUSH
17002: CALL_OW 88
17006: GO 17032
17008: LD_INT 2
17010: DOUBLE
17011: EQUAL
17012: IFTRUE 17016
17014: GO 17031
17016: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
17017: LD_VAR 0 1
17021: PPUSH
17022: LD_STRING DArf-Otpst-1-a-3
17024: PPUSH
17025: CALL_OW 88
17029: GO 17032
17031: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
17032: LD_EXP 30
17036: PPUSH
17037: LD_STRING DG-Otpst-1-5
17039: PPUSH
17040: CALL_OW 88
// end ;
17044: PPOPN 1
17046: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
17047: LD_EXP 34
17051: PPUSH
17052: CALL_OW 256
17056: PUSH
17057: LD_INT 10
17059: LESS
17060: IFFALSE 17174
17062: GO 17064
17064: DISABLE
// begin DialogueOn ;
17065: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17069: LD_EXP 34
17073: PPUSH
17074: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
17078: LD_EXP 34
17082: PPUSH
17083: LD_STRING DK-Dead-1
17085: PPUSH
17086: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
17090: LD_EXP 29
17094: PPUSH
17095: LD_STRING DH-Dead-2
17097: PPUSH
17098: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
17102: LD_EXP 34
17106: PPUSH
17107: LD_STRING DK-Dead-3
17109: PPUSH
17110: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
17114: LD_EXP 29
17118: PPUSH
17119: LD_STRING DH-Dead-4
17121: PPUSH
17122: CALL_OW 88
// if IsOk ( Mike ) then
17126: LD_EXP 31
17130: PPUSH
17131: CALL_OW 302
17135: IFFALSE 17161
// begin Say ( Mike , DM-Dead-5 ) ;
17137: LD_EXP 31
17141: PPUSH
17142: LD_STRING DM-Dead-5
17144: PPUSH
17145: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
17149: LD_EXP 29
17153: PPUSH
17154: LD_STRING DH-Dead-6
17156: PPUSH
17157: CALL_OW 88
// end ; DialogueOff ;
17161: CALL_OW 7
// KillUnit ( Kaia ) ;
17165: LD_EXP 34
17169: PPUSH
17170: CALL_OW 66
// end ;
17174: END
// every 0 0$1 trigger tick >= 10 10$20 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
17175: LD_OWVAR 1
17179: PUSH
17180: LD_INT 21700
17182: GREATEREQUAL
17183: PUSH
17184: LD_EXP 5
17188: PUSH
17189: LD_INT 5
17191: GREATER
17192: OR
17193: PUSH
17194: LD_INT 22
17196: PUSH
17197: LD_INT 2
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 92
17206: PUSH
17207: LD_INT 103
17209: PUSH
17210: LD_INT 81
17212: PUSH
17213: LD_INT 20
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PPUSH
17226: CALL_OW 69
17230: OR
17231: IFFALSE 17638
17233: GO 17235
17235: DISABLE
17236: LD_INT 0
17238: PPUSH
17239: PPUSH
17240: PPUSH
// begin PrepareRolfSquad ;
17241: CALL 2348 0 0
// dep := HexInfo ( 86 , 54 ) ;
17245: LD_ADDR_VAR 0 3
17249: PUSH
17250: LD_INT 86
17252: PPUSH
17253: LD_INT 54
17255: PPUSH
17256: CALL_OW 428
17260: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
17261: LD_VAR 0 3
17265: PPUSH
17266: CALL_OW 274
17270: PPUSH
17271: LD_INT 1
17273: PPUSH
17274: LD_INT 300
17276: PPUSH
17277: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
17281: LD_VAR 0 3
17285: PPUSH
17286: CALL_OW 274
17290: PPUSH
17291: LD_INT 2
17293: PPUSH
17294: LD_INT 300
17296: PPUSH
17297: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
17301: LD_EXP 46
17305: PPUSH
17306: LD_INT 79
17308: PPUSH
17309: LD_INT 52
17311: PPUSH
17312: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
17316: LD_INT 35
17318: PPUSH
17319: CALL_OW 67
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
17323: LD_INT 12
17325: PPUSH
17326: LD_INT 22
17328: PUSH
17329: LD_INT 3
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: PUSH
17336: LD_INT 21
17338: PUSH
17339: LD_INT 1
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: PPUSH
17350: CALL_OW 70
17354: NOT
17355: IFFALSE 17316
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
17357: LD_ADDR_VAR 0 2
17361: PUSH
17362: LD_INT 12
17364: PPUSH
17365: LD_INT 21
17367: PUSH
17368: LD_INT 3
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PPUSH
17375: CALL_OW 70
17379: ST_TO_ADDR
// for i in tmp do
17380: LD_ADDR_VAR 0 1
17384: PUSH
17385: LD_VAR 0 2
17389: PUSH
17390: FOR_IN
17391: IFFALSE 17407
// SetSide ( i , 8 ) ;
17393: LD_VAR 0 1
17397: PPUSH
17398: LD_INT 8
17400: PPUSH
17401: CALL_OW 235
17405: GO 17390
17407: POP
17408: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
17409: LD_INT 63
17411: PPUSH
17412: LD_INT 42
17414: PPUSH
17415: CALL_OW 428
17419: PPUSH
17420: LD_INT 320
17422: PPUSH
17423: CALL_OW 234
// wait ( 0 0$10 ) ;
17427: LD_INT 350
17429: PPUSH
17430: CALL_OW 67
// DialogueOn ;
17434: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
17438: LD_INT 8
17440: PPUSH
17441: LD_INT 2
17443: PPUSH
17444: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
17448: LD_INT 86
17450: PPUSH
17451: LD_INT 54
17453: PPUSH
17454: CALL_OW 428
17458: PPUSH
17459: LD_STRING antwerp
17461: PPUSH
17462: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
17466: LD_EXP 42
17470: PPUSH
17471: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
17475: LD_EXP 42
17479: PPUSH
17480: LD_STRING DRf-rast-1
17482: PPUSH
17483: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
17487: LD_EXP 29
17491: PPUSH
17492: LD_STRING DH-rast-2
17494: PPUSH
17495: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
17499: LD_EXP 42
17503: PPUSH
17504: LD_STRING DRf-rast-3
17506: PPUSH
17507: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
17511: LD_EXP 42
17515: PPUSH
17516: LD_STRING DRf-rast-4
17518: PPUSH
17519: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
17523: LD_EXP 42
17527: PPUSH
17528: LD_STRING DRf-rast-5
17530: PPUSH
17531: CALL_OW 94
// if IsOk ( Aviradze ) then
17535: LD_EXP 41
17539: PPUSH
17540: CALL_OW 302
17544: IFFALSE 17603
// begin CenterNowOnUnits ( Aviradze ) ;
17546: LD_EXP 41
17550: PPUSH
17551: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
17555: LD_EXP 41
17559: PPUSH
17560: LD_STRING DA-rast-6
17562: PPUSH
17563: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
17567: LD_EXP 29
17571: PPUSH
17572: LD_STRING DH-rast-7
17574: PPUSH
17575: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
17579: LD_EXP 30
17583: PPUSH
17584: LD_STRING DG-rast-8
17586: PPUSH
17587: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
17591: LD_EXP 30
17595: PPUSH
17596: LD_STRING DG-rast-9
17598: PPUSH
17599: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
17603: LD_EXP 29
17607: PPUSH
17608: LD_STRING DH-rast-10
17610: PPUSH
17611: CALL_OW 88
// DialogueOff ;
17615: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
17619: LD_STRING M2
17621: PPUSH
17622: CALL_OW 337
// bergkampfArrived := true ;
17626: LD_ADDR_EXP 3
17630: PUSH
17631: LD_INT 1
17633: ST_TO_ADDR
// PrepareRolfBase ;
17634: CALL 2679 0 0
// end ;
17638: PPOPN 3
17640: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) do var i ;
17641: LD_INT 12
17643: PPUSH
17644: LD_INT 22
17646: PUSH
17647: LD_INT 2
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PPUSH
17654: CALL_OW 70
17658: PUSH
17659: LD_EXP 42
17663: PPUSH
17664: CALL_OW 302
17668: AND
17669: IFFALSE 18229
17671: GO 17673
17673: DISABLE
17674: LD_INT 0
17676: PPUSH
// begin rolfScriptBase := false ;
17677: LD_ADDR_EXP 9
17681: PUSH
17682: LD_INT 0
17684: ST_TO_ADDR
// DialogueOn ;
17685: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
17689: LD_EXP 42
17693: PPUSH
17694: CALL_OW 87
// if rolfSquad >= 10 then
17698: LD_EXP 46
17702: PUSH
17703: LD_INT 10
17705: GREATEREQUAL
17706: IFFALSE 17885
// begin linkedWithRolf := 2 ;
17708: LD_ADDR_EXP 12
17712: PUSH
17713: LD_INT 2
17715: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
17716: LD_EXP 42
17720: PPUSH
17721: LD_STRING DRf-rast-11
17723: PPUSH
17724: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
17728: LD_EXP 29
17732: PPUSH
17733: LD_STRING DH-rast-12
17735: PPUSH
17736: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
17740: LD_EXP 42
17744: PPUSH
17745: LD_STRING DRf-rast-13
17747: PPUSH
17748: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
17752: LD_EXP 29
17756: PPUSH
17757: LD_STRING DH-rast-14
17759: PPUSH
17760: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
17764: LD_EXP 42
17768: PPUSH
17769: LD_STRING DRf-rast-15
17771: PPUSH
17772: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
17776: LD_EXP 29
17780: PPUSH
17781: LD_STRING DH-rast-16
17783: PPUSH
17784: CALL_OW 88
// if IsOk ( Mike ) then
17788: LD_EXP 31
17792: PPUSH
17793: CALL_OW 302
17797: IFFALSE 17871
// begin Say ( Mike , DM-rast-17 ) ;
17799: LD_EXP 31
17803: PPUSH
17804: LD_STRING DM-rast-17
17806: PPUSH
17807: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
17811: LD_EXP 29
17815: PPUSH
17816: LD_STRING DH-rast-18
17818: PPUSH
17819: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
17823: LD_EXP 31
17827: PPUSH
17828: LD_STRING DM-rast-19
17830: PPUSH
17831: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
17835: LD_EXP 29
17839: PPUSH
17840: LD_STRING DH-rast-20
17842: PPUSH
17843: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
17847: LD_EXP 31
17851: PPUSH
17852: LD_STRING DM-rast-21
17854: PPUSH
17855: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
17859: LD_EXP 29
17863: PPUSH
17864: LD_STRING DH-rast-22
17866: PPUSH
17867: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
17871: LD_EXP 29
17875: PPUSH
17876: LD_STRING DH-rast-23
17878: PPUSH
17879: CALL_OW 88
// end else
17883: GO 18035
// begin linkedWithRolf := 1 ;
17885: LD_ADDR_EXP 12
17889: PUSH
17890: LD_INT 1
17892: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
17893: LD_EXP 42
17897: PPUSH
17898: LD_STRING DRf-rast-a-11
17900: PPUSH
17901: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
17905: LD_EXP 29
17909: PPUSH
17910: LD_STRING DH-rast-a-12
17912: PPUSH
17913: CALL_OW 88
// if IsOk ( Kurt ) then
17917: LD_EXP 40
17921: PPUSH
17922: CALL_OW 302
17926: IFFALSE 18023
// begin Say ( Kurt , DKs-rast-a-13 ) ;
17928: LD_EXP 40
17932: PPUSH
17933: LD_STRING DKs-rast-a-13
17935: PPUSH
17936: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
17940: LD_EXP 42
17944: PPUSH
17945: LD_STRING DRf-rast-a-14
17947: PPUSH
17948: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
17952: LD_EXP 42
17956: PPUSH
17957: LD_STRING DRf-rast-a-15
17959: PPUSH
17960: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
17964: LD_EXP 40
17968: PPUSH
17969: LD_STRING DKs-rast-a-16
17971: PPUSH
17972: CALL_OW 88
// if IsOk ( Givi ) then
17976: LD_EXP 30
17980: PPUSH
17981: CALL_OW 302
17985: IFFALSE 18023
// begin Say ( Givi , DG-rast-a-17 ) ;
17987: LD_EXP 30
17991: PPUSH
17992: LD_STRING DG-rast-a-17
17994: PPUSH
17995: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
17999: LD_EXP 30
18003: PPUSH
18004: LD_STRING DG-rast-a-18
18006: PPUSH
18007: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
18011: LD_EXP 40
18015: PPUSH
18016: LD_STRING DKs-rast-a-19
18018: PPUSH
18019: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
18023: LD_EXP 29
18027: PPUSH
18028: LD_STRING DH-rast-a-20
18030: PPUSH
18031: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
18035: LD_EXP 42
18039: PPUSH
18040: LD_STRING DRf-rast-24
18042: PPUSH
18043: CALL_OW 88
// if IsOk ( Aviradze ) then
18047: LD_EXP 41
18051: PPUSH
18052: CALL_OW 302
18056: IFFALSE 18156
// begin Say ( Aviradze , DA-rast-25 ) ;
18058: LD_EXP 41
18062: PPUSH
18063: LD_STRING DA-rast-25
18065: PPUSH
18066: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
18070: LD_EXP 29
18074: PPUSH
18075: LD_STRING DH-rast-26
18077: PPUSH
18078: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
18082: LD_EXP 41
18086: PPUSH
18087: LD_STRING DA-rast-27
18089: PPUSH
18090: CALL_OW 88
// if IsOk ( Markov ) then
18094: LD_EXP 36
18098: PPUSH
18099: CALL_OW 302
18103: IFFALSE 18131
// begin Say ( Markov , DMar-rast-28 ) ;
18105: LD_EXP 36
18109: PPUSH
18110: LD_STRING DMar-rast-28
18112: PPUSH
18113: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
18117: LD_EXP 36
18121: PPUSH
18122: LD_STRING DMar-rast-29
18124: PPUSH
18125: CALL_OW 88
// end else
18129: GO 18154
// if IsOk ( Sophia ) then
18131: LD_EXP 35
18135: PPUSH
18136: CALL_OW 302
18140: IFFALSE 18154
// begin Say ( Sophia , DS-rast-28 ) ;
18142: LD_EXP 35
18146: PPUSH
18147: LD_STRING DS-rast-28
18149: PPUSH
18150: CALL_OW 88
// end ; end else
18154: GO 18179
// if IsOk ( Sophia ) then
18156: LD_EXP 35
18160: PPUSH
18161: CALL_OW 302
18165: IFFALSE 18179
// Say ( Sophia , DS-rast-29 ) ;
18167: LD_EXP 35
18171: PPUSH
18172: LD_STRING DS-rast-29
18174: PPUSH
18175: CALL_OW 88
// DialogueOff ;
18179: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
18183: LD_STRING M3
18185: PPUSH
18186: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
18190: LD_ADDR_VAR 0 1
18194: PUSH
18195: LD_INT 22
18197: PUSH
18198: LD_INT 8
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PPUSH
18205: CALL_OW 69
18209: PUSH
18210: FOR_IN
18211: IFFALSE 18227
// SetSide ( i , 2 ) ;
18213: LD_VAR 0 1
18217: PPUSH
18218: LD_INT 2
18220: PPUSH
18221: CALL_OW 235
18225: GO 18210
18227: POP
18228: POP
// end ;
18229: PPOPN 1
18231: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf do var random ;
18232: LD_EXP 3
18236: PUSH
18237: LD_EXP 42
18241: PPUSH
18242: CALL_OW 256
18246: PUSH
18247: LD_INT 400
18249: LESS
18250: AND
18251: PUSH
18252: LD_EXP 12
18256: NOT
18257: AND
18258: IFFALSE 18532
18260: GO 18262
18262: DISABLE
18263: LD_INT 0
18265: PPUSH
// begin DialogueOn ;
18266: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
18270: LD_EXP 42
18274: PPUSH
18275: LD_STRING DRf-rast-f-11
18277: PPUSH
18278: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
18282: LD_EXP 42
18286: PPUSH
18287: LD_STRING DRf-rast-f-12
18289: PPUSH
18290: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
18294: LD_EXP 42
18298: PPUSH
18299: LD_STRING DRf-rast-f-13
18301: PPUSH
18302: CALL_OW 94
// DialogueOff ;
18306: CALL_OW 7
// KillUnit ( Rolf ) ;
18310: LD_EXP 42
18314: PPUSH
18315: CALL_OW 66
// wait ( 0 0$1 ) ;
18319: LD_INT 35
18321: PPUSH
18322: CALL_OW 67
// if not IsOk ( Givi ) then
18326: LD_EXP 30
18330: PPUSH
18331: CALL_OW 302
18335: NOT
18336: IFFALSE 18340
// exit ;
18338: GO 18532
// DialogueOn ;
18340: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
18344: LD_EXP 30
18348: PPUSH
18349: LD_STRING DG-rast-f-14
18351: PPUSH
18352: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
18356: LD_EXP 30
18360: PPUSH
18361: LD_STRING DG-rast-f-15
18363: PPUSH
18364: CALL_OW 88
// if IsOk ( Kaia ) then
18368: LD_EXP 34
18372: PPUSH
18373: CALL_OW 302
18377: IFFALSE 18393
// Say ( Kaia , DK-rast-f-16 ) else
18379: LD_EXP 34
18383: PPUSH
18384: LD_STRING DK-rast-f-16
18386: PPUSH
18387: CALL_OW 88
18391: GO 18480
// if heikeSecondSquad then
18393: LD_EXP 44
18397: IFFALSE 18480
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
18399: LD_ADDR_VAR 0 1
18403: PUSH
18404: LD_EXP 44
18408: PUSH
18409: LD_INT 1
18411: PPUSH
18412: LD_EXP 44
18416: PPUSH
18417: CALL_OW 12
18421: ARRAY
18422: ST_TO_ADDR
// case GetSex ( random ) of 1 :
18423: LD_VAR 0 1
18427: PPUSH
18428: CALL_OW 258
18432: PUSH
18433: LD_INT 1
18435: DOUBLE
18436: EQUAL
18437: IFTRUE 18441
18439: GO 18456
18441: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
18442: LD_VAR 0 1
18446: PPUSH
18447: LD_STRING DArm-rast-f-a-16
18449: PPUSH
18450: CALL_OW 88
18454: GO 18480
18456: LD_INT 2
18458: DOUBLE
18459: EQUAL
18460: IFTRUE 18464
18462: GO 18479
18464: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
18465: LD_VAR 0 1
18469: PPUSH
18470: LD_STRING DArf-rast-f-a-16
18472: PPUSH
18473: CALL_OW 88
18477: GO 18480
18479: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
18480: LD_EXP 30
18484: PPUSH
18485: LD_STRING DG-rast-f-17
18487: PPUSH
18488: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
18492: LD_EXP 30
18496: PPUSH
18497: LD_STRING DG-rast-f-18
18499: PPUSH
18500: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
18504: LD_EXP 30
18508: PPUSH
18509: LD_STRING DG-rast-f-19
18511: PPUSH
18512: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
18516: LD_EXP 30
18520: PPUSH
18521: LD_STRING DG-rast-f-20
18523: PPUSH
18524: CALL_OW 88
// DialogueOff ;
18528: CALL_OW 7
// end ;
18532: PPOPN 1
18534: END
// every 0 0$1 trigger SeeArea ( 2 , ruMainBase ) do
18535: LD_INT 2
18537: PPUSH
18538: LD_INT 10
18540: PPUSH
18541: CALL_OW 294
18545: IFFALSE 18618
18547: GO 18549
18549: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
18550: LD_EXP 30
18554: PPUSH
18555: LD_STRING DG-Len-1
18557: PPUSH
18558: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
18562: LD_EXP 40
18566: PPUSH
18567: LD_STRING DKs-Len-2
18569: PPUSH
18570: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
18574: LD_EXP 40
18578: PPUSH
18579: LD_STRING DKs-Len-3
18581: PPUSH
18582: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
18586: LD_EXP 29
18590: PPUSH
18591: LD_STRING DH-Len-4
18593: PPUSH
18594: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
18598: LD_EXP 34
18602: PPUSH
18603: LD_STRING DK-Len-5
18605: PPUSH
18606: CALL_OW 88
// leninSpotted := true ;
18610: LD_ADDR_EXP 14
18614: PUSH
18615: LD_INT 1
18617: ST_TO_ADDR
// end ;
18618: END
// every 0 0$1 trigger ( bergkampfArrived and tick > 14 14$00 ) or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 322 , 215 , 20 ] ] ) do var i ;
18619: LD_EXP 3
18623: PUSH
18624: LD_OWVAR 1
18628: PUSH
18629: LD_INT 29400
18631: GREATER
18632: AND
18633: PUSH
18634: LD_INT 22
18636: PUSH
18637: LD_INT 2
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: LD_INT 92
18646: PUSH
18647: LD_INT 322
18649: PUSH
18650: LD_INT 215
18652: PUSH
18653: LD_INT 20
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PPUSH
18666: CALL_OW 69
18670: OR
18671: IFFALSE 19034
18673: GO 18675
18675: DISABLE
18676: LD_INT 0
18678: PPUSH
// begin PrepareOmarSquad ;
18679: CALL 3961 0 0
// repeat wait ( 0 0$1 ) ;
18683: LD_INT 35
18685: PPUSH
18686: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
18690: LD_INT 14
18692: PPUSH
18693: LD_INT 22
18695: PUSH
18696: LD_INT 3
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 2
18705: PUSH
18706: LD_INT 21
18708: PUSH
18709: LD_INT 1
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 59
18718: PUSH
18719: EMPTY
18720: LIST
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: LIST
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PPUSH
18731: CALL_OW 70
18735: NOT
18736: IFFALSE 18683
// for i in omarSquad do
18738: LD_ADDR_VAR 0 1
18742: PUSH
18743: LD_EXP 47
18747: PUSH
18748: FOR_IN
18749: IFFALSE 18780
// if GetLives ( i ) < 750 then
18751: LD_VAR 0 1
18755: PPUSH
18756: CALL_OW 256
18760: PUSH
18761: LD_INT 750
18763: LESS
18764: IFFALSE 18778
// SetLives ( i , 1000 ) ;
18766: LD_VAR 0 1
18770: PPUSH
18771: LD_INT 1000
18773: PPUSH
18774: CALL_OW 234
18778: GO 18748
18780: POP
18781: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
18782: LD_ADDR_VAR 0 1
18786: PUSH
18787: LD_INT 14
18789: PPUSH
18790: LD_INT 21
18792: PUSH
18793: LD_INT 3
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PPUSH
18800: CALL_OW 70
18804: PUSH
18805: FOR_IN
18806: IFFALSE 18822
// SetSide ( i , 5 ) ;
18808: LD_VAR 0 1
18812: PPUSH
18813: LD_INT 5
18815: PPUSH
18816: CALL_OW 235
18820: GO 18805
18822: POP
18823: POP
// wait ( 0 0$3 ) ;
18824: LD_INT 105
18826: PPUSH
18827: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
18831: LD_INT 5
18833: PPUSH
18834: LD_INT 2
18836: PPUSH
18837: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
18841: LD_EXP 39
18845: PPUSH
18846: CALL_OW 87
// DialogueOn ;
18850: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-1 ) ;
18854: LD_EXP 39
18858: PPUSH
18859: LD_STRING DOm-Veh-1
18861: PPUSH
18862: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
18866: LD_EXP 39
18870: PPUSH
18871: LD_STRING DOm-Veh-2
18873: PPUSH
18874: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
18878: LD_EXP 39
18882: PPUSH
18883: LD_STRING DOm-Veh-3
18885: PPUSH
18886: CALL_OW 94
// if mortarConstructed then
18890: LD_EXP 15
18894: IFFALSE 18908
// SayRadio ( Omar , DOm-Veh-4 ) ;
18896: LD_EXP 39
18900: PPUSH
18901: LD_STRING DOm-Veh-4
18903: PPUSH
18904: CALL_OW 94
// Say ( Heike , DH-Veh-5 ) ;
18908: LD_EXP 29
18912: PPUSH
18913: LD_STRING DH-Veh-5
18915: PPUSH
18916: CALL_OW 88
// if IsOk ( Kurt ) then
18920: LD_EXP 40
18924: PPUSH
18925: CALL_OW 302
18929: IFFALSE 18979
// begin Say ( Kurt , DKs-Veh-6 ) ;
18931: LD_EXP 40
18935: PPUSH
18936: LD_STRING DKs-Veh-6
18938: PPUSH
18939: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
18943: LD_EXP 40
18947: PPUSH
18948: LD_STRING DKs-Veh-7
18950: PPUSH
18951: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
18955: LD_EXP 30
18959: PPUSH
18960: LD_STRING DG-Veh-8
18962: PPUSH
18963: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
18967: LD_EXP 31
18971: PPUSH
18972: LD_STRING DM-Veh-9
18974: PPUSH
18975: CALL_OW 88
// end ; DialogueOff ;
18979: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
18983: LD_STRING M4
18985: PPUSH
18986: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
18990: LD_EXP 39
18994: PPUSH
18995: LD_INT 341
18997: PPUSH
18998: LD_INT 232
19000: PPUSH
19001: CALL_OW 428
19005: PPUSH
19006: CALL_OW 120
// omarArrived := true ;
19010: LD_ADDR_EXP 6
19014: PUSH
19015: LD_INT 1
19017: ST_TO_ADDR
// omarScriptBase := true ;
19018: LD_ADDR_EXP 10
19022: PUSH
19023: LD_INT 1
19025: ST_TO_ADDR
// omarWantVehicles := true ;
19026: LD_ADDR_EXP 18
19030: PUSH
19031: LD_INT 1
19033: ST_TO_ADDR
// end ;
19034: PPOPN 1
19036: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
19037: LD_EXP 42
19041: PPUSH
19042: CALL_OW 302
19046: PUSH
19047: LD_EXP 12
19051: AND
19052: PUSH
19053: LD_EXP 6
19057: AND
19058: IFFALSE 19155
19060: GO 19062
19062: DISABLE
// begin CenterNowOnUnits ( Rolf ) ;
19063: LD_EXP 42
19067: PPUSH
19068: CALL_OW 87
// DialogueOn ;
19072: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
19076: LD_EXP 42
19080: PPUSH
19081: LD_STRING DRf-Veh-10
19083: PPUSH
19084: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
19088: LD_EXP 42
19092: PPUSH
19093: LD_STRING DRf-Veh-11
19095: PPUSH
19096: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
19100: LD_EXP 29
19104: PPUSH
19105: LD_STRING DH-Veh-12
19107: PPUSH
19108: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
19112: LD_EXP 29
19116: PPUSH
19117: LD_STRING DH-Veh-13
19119: PPUSH
19120: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
19124: LD_EXP 42
19128: PPUSH
19129: LD_STRING DRf-Veh-14
19131: PPUSH
19132: CALL_OW 88
// DialogueOff ;
19136: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
19140: LD_STRING M5
19142: PPUSH
19143: CALL_OW 337
// rolfWantVehicles := true ;
19147: LD_ADDR_EXP 17
19151: PUSH
19152: LD_INT 1
19154: ST_TO_ADDR
// end ;
19155: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
19156: LD_EXP 18
19160: IFFALSE 19852
19162: GO 19164
19164: DISABLE
19165: LD_INT 0
19167: PPUSH
19168: PPUSH
19169: PPUSH
19170: PPUSH
19171: PPUSH
19172: PPUSH
// begin wait ( 0 0$3 ) ;
19173: LD_INT 105
19175: PPUSH
19176: CALL_OW 67
// Hint ( OmarVehicles ) ;
19180: LD_STRING OmarVehicles
19182: PPUSH
19183: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
19187: LD_INT 16
19189: PPUSH
19190: LD_INT 1
19192: PPUSH
19193: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
19197: LD_INT 35
19199: PPUSH
19200: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
19204: LD_ADDR_EXP 20
19208: PUSH
19209: LD_EXP 20
19213: PUSH
19214: LD_INT 35
19216: MINUS
19217: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
19218: LD_EXP 20
19222: PUSH
19223: LD_INT 0
19225: LESSEQUAL
19226: IFFALSE 19326
// begin display_strings := [ ] ;
19228: LD_ADDR_OWVAR 47
19232: PUSH
19233: EMPTY
19234: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
19235: LD_STRING M4a
19237: PPUSH
19238: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
19242: LD_INT 16
19244: PPUSH
19245: LD_INT 0
19247: PPUSH
19248: CALL_OW 424
// DialogueOn ;
19252: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
19256: LD_EXP 39
19260: PPUSH
19261: LD_STRING DOm-Veh-b-15
19263: PPUSH
19264: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
19268: LD_EXP 29
19272: PPUSH
19273: LD_STRING DH-Veh-b-16
19275: PPUSH
19276: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
19280: LD_EXP 39
19284: PPUSH
19285: LD_STRING DOm-Veh-b-17
19287: PPUSH
19288: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
19292: LD_EXP 34
19296: PPUSH
19297: LD_STRING DK-Veh-b-18
19299: PPUSH
19300: CALL_OW 88
// DialogueOff ;
19304: CALL_OW 7
// omarAttack := true ;
19308: LD_ADDR_EXP 23
19312: PUSH
19313: LD_INT 1
19315: ST_TO_ADDR
// omarScriptBase := false ;
19316: LD_ADDR_EXP 10
19320: PUSH
19321: LD_INT 0
19323: ST_TO_ADDR
// exit ;
19324: GO 19852
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
19326: LD_EXP 21
19330: PUSH
19331: LD_INT 16
19333: PPUSH
19334: LD_INT 22
19336: PUSH
19337: LD_INT 2
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 21
19346: PUSH
19347: LD_INT 2
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 33
19356: PUSH
19357: LD_INT 1
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 58
19366: PUSH
19367: EMPTY
19368: LIST
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: PPUSH
19376: CALL_OW 70
19380: LESSEQUAL
19381: IFFALSE 19197
// omarWaitingForVehiclesTimer := 0 0$00 ;
19383: LD_ADDR_EXP 20
19387: PUSH
19388: LD_INT 0
19390: ST_TO_ADDR
// display_strings := [ ] ;
19391: LD_ADDR_OWVAR 47
19395: PUSH
19396: EMPTY
19397: ST_TO_ADDR
// DialogueOn ;
19398: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
19402: LD_EXP 39
19406: PPUSH
19407: LD_STRING DOm-Veh-a-15
19409: PPUSH
19410: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
19414: LD_EXP 34
19418: PPUSH
19419: LD_STRING DK-Veh-a-16
19421: PPUSH
19422: CALL_OW 88
// DialogueOff ;
19426: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
19430: LD_STRING M4a
19432: PPUSH
19433: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
19437: LD_INT 16
19439: PPUSH
19440: LD_INT 0
19442: PPUSH
19443: CALL_OW 424
// omarHasVehicles := true ;
19447: LD_ADDR_EXP 22
19451: PUSH
19452: LD_INT 1
19454: ST_TO_ADDR
// omarAttack := true ;
19455: LD_ADDR_EXP 23
19459: PUSH
19460: LD_INT 1
19462: ST_TO_ADDR
// omarScriptBase := false ;
19463: LD_ADDR_EXP 10
19467: PUSH
19468: LD_INT 0
19470: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
19471: LD_ADDR_VAR 0 2
19475: PUSH
19476: LD_INT 16
19478: PPUSH
19479: LD_INT 22
19481: PUSH
19482: LD_INT 2
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 21
19491: PUSH
19492: LD_INT 2
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 33
19501: PUSH
19502: LD_INT 1
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 58
19511: PUSH
19512: EMPTY
19513: LIST
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: PPUSH
19521: CALL_OW 70
19525: ST_TO_ADDR
// for i in tmp do
19526: LD_ADDR_VAR 0 1
19530: PUSH
19531: LD_VAR 0 2
19535: PUSH
19536: FOR_IN
19537: IFFALSE 19565
// begin SetFuel ( i , 100 ) ;
19539: LD_VAR 0 1
19543: PPUSH
19544: LD_INT 100
19546: PPUSH
19547: CALL_OW 240
// SetSide ( i , 5 ) ;
19551: LD_VAR 0 1
19555: PPUSH
19556: LD_INT 5
19558: PPUSH
19559: CALL_OW 235
// end ;
19563: GO 19536
19565: POP
19566: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
19567: LD_ADDR_VAR 0 3
19571: PUSH
19572: LD_EXP 47
19576: PPUSH
19577: LD_INT 25
19579: PUSH
19580: LD_INT 2
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PPUSH
19587: CALL_OW 72
19591: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
19592: LD_ADDR_VAR 0 4
19596: PUSH
19597: LD_EXP 47
19601: PPUSH
19602: LD_INT 3
19604: PUSH
19605: LD_INT 55
19607: PUSH
19608: EMPTY
19609: LIST
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: LD_INT 25
19617: PUSH
19618: LD_INT 3
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PPUSH
19629: CALL_OW 72
19633: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
19634: LD_ADDR_VAR 0 5
19638: PUSH
19639: LD_INT 324
19641: PPUSH
19642: LD_INT 234
19644: PPUSH
19645: CALL_OW 428
19649: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
19650: LD_ADDR_VAR 0 6
19654: PUSH
19655: LD_INT 334
19657: PPUSH
19658: LD_INT 241
19660: PPUSH
19661: CALL_OW 428
19665: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
19666: LD_VAR 0 6
19670: PPUSH
19671: CALL_OW 313
19675: PPUSH
19676: CALL_OW 122
// if eng then
19680: LD_VAR 0 3
19684: IFFALSE 19792
// begin if eng + mech <= tmp then
19686: LD_VAR 0 3
19690: PUSH
19691: LD_VAR 0 4
19695: PLUS
19696: PUSH
19697: LD_VAR 0 2
19701: LESSEQUAL
19702: IFFALSE 19757
// begin ComEnterUnit ( eng , workshop ) ;
19704: LD_VAR 0 3
19708: PPUSH
19709: LD_VAR 0 5
19713: PPUSH
19714: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
19718: LD_VAR 0 3
19722: PPUSH
19723: LD_INT 3
19725: PPUSH
19726: CALL_OW 183
// AddComExitBuilding ( eng ) ;
19730: LD_VAR 0 3
19734: PPUSH
19735: CALL_OW 182
// mech := mech union eng ;
19739: LD_ADDR_VAR 0 4
19743: PUSH
19744: LD_VAR 0 4
19748: PUSH
19749: LD_VAR 0 3
19753: UNION
19754: ST_TO_ADDR
// end else
19755: GO 19792
// begin ComEnterUnit ( eng , armoury ) ;
19757: LD_VAR 0 3
19761: PPUSH
19762: LD_VAR 0 6
19766: PPUSH
19767: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
19771: LD_VAR 0 3
19775: PPUSH
19776: LD_INT 1
19778: PPUSH
19779: CALL_OW 183
// AddComExitBuilding ( eng ) ;
19783: LD_VAR 0 3
19787: PPUSH
19788: CALL_OW 182
// end ; end ; for i := 1 to tmp do
19792: LD_ADDR_VAR 0 1
19796: PUSH
19797: DOUBLE
19798: LD_INT 1
19800: DEC
19801: ST_TO_ADDR
19802: LD_VAR 0 2
19806: PUSH
19807: FOR_TO
19808: IFFALSE 19850
// if i <= mech then
19810: LD_VAR 0 1
19814: PUSH
19815: LD_VAR 0 4
19819: LESSEQUAL
19820: IFFALSE 19848
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
19822: LD_VAR 0 4
19826: PUSH
19827: LD_VAR 0 1
19831: ARRAY
19832: PPUSH
19833: LD_VAR 0 2
19837: PUSH
19838: LD_VAR 0 1
19842: ARRAY
19843: PPUSH
19844: CALL_OW 180
19848: GO 19807
19850: POP
19851: POP
// end ;
19852: PPOPN 6
19854: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i ;
19855: LD_EXP 42
19859: PPUSH
19860: CALL_OW 302
19864: PUSH
19865: LD_EXP 17
19869: AND
19870: IFFALSE 20326
19872: GO 19874
19874: DISABLE
19875: LD_INT 0
19877: PPUSH
// begin repeat wait ( 0 0$1 ) ;
19878: LD_INT 35
19880: PPUSH
19881: CALL_OW 67
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
19885: LD_ADDR_EXP 19
19889: PUSH
19890: LD_EXP 19
19894: PUSH
19895: LD_INT 35
19897: MINUS
19898: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 or omarAttack then
19899: LD_EXP 19
19903: PUSH
19904: LD_INT 0
19906: LESSEQUAL
19907: PUSH
19908: LD_EXP 23
19912: OR
19913: IFFALSE 20131
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
19915: LD_ADDR_EXP 19
19919: PUSH
19920: LD_INT 0
19922: ST_TO_ADDR
// display_strings := [ ] ;
19923: LD_ADDR_OWVAR 47
19927: PUSH
19928: EMPTY
19929: ST_TO_ADDR
// DialogueOn ;
19930: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
19934: LD_EXP 42
19938: PPUSH
19939: LD_STRING DRf-Veh-b-19
19941: PPUSH
19942: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
19946: LD_EXP 42
19950: PPUSH
19951: LD_STRING DRf-Veh-b-20
19953: PPUSH
19954: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
19958: LD_EXP 29
19962: PPUSH
19963: LD_STRING DH-Veh-b-21
19965: PPUSH
19966: CALL_OW 88
// if IsOk ( Givi ) then
19970: LD_EXP 30
19974: PPUSH
19975: CALL_OW 302
19979: IFFALSE 20017
// begin Say ( Givi , DG-Veh-b-22 ) ;
19981: LD_EXP 30
19985: PPUSH
19986: LD_STRING DG-Veh-b-22
19988: PPUSH
19989: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
19993: LD_EXP 29
19997: PPUSH
19998: LD_STRING DH-Veh-b-23
20000: PPUSH
20001: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
20005: LD_EXP 30
20009: PPUSH
20010: LD_STRING DG-Veh-b-24
20012: PPUSH
20013: CALL_OW 88
// end ; DialogueOff ;
20017: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
20021: LD_STRING M5a
20023: PPUSH
20024: CALL_OW 337
// for i in rolfSquad do
20028: LD_ADDR_VAR 0 1
20032: PUSH
20033: LD_EXP 46
20037: PUSH
20038: FOR_IN
20039: IFFALSE 20105
// begin SetSide ( i , 8 ) ;
20041: LD_VAR 0 1
20045: PPUSH
20046: LD_INT 8
20048: PPUSH
20049: CALL_OW 235
// if IsDriver ( i ) then
20053: LD_VAR 0 1
20057: PPUSH
20058: CALL 58974 0 1
20062: IFFALSE 20083
// SetSide ( IsInUnit ( i ) , 8 ) else
20064: LD_VAR 0 1
20068: PPUSH
20069: CALL_OW 310
20073: PPUSH
20074: LD_INT 8
20076: PPUSH
20077: CALL_OW 235
20081: GO 20103
// if IsInUnit ( i ) then
20083: LD_VAR 0 1
20087: PPUSH
20088: CALL_OW 310
20092: IFFALSE 20103
// ComExitBuilding ( i ) ;
20094: LD_VAR 0 1
20098: PPUSH
20099: CALL_OW 122
// end ;
20103: GO 20038
20105: POP
20106: POP
// wait ( 0 0$1 ) ;
20107: LD_INT 35
20109: PPUSH
20110: CALL_OW 67
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
20114: LD_EXP 46
20118: PPUSH
20119: LD_INT 229
20121: PPUSH
20122: LD_INT 154
20124: PPUSH
20125: CALL_OW 114
// exit ;
20129: GO 20326
// end ; if IsDead ( Rolf ) then
20131: LD_EXP 42
20135: PPUSH
20136: CALL_OW 301
20140: IFFALSE 20151
// begin ChangeMissionObjectives ( M5a ) ;
20142: LD_STRING M5a
20144: PPUSH
20145: CALL_OW 337
// exit ;
20149: GO 20326
// end ; until UnitFilter ( rolfSquad , [ f_driving ] ) + 0 = rolfSquad + 0 ;
20151: LD_EXP 46
20155: PPUSH
20156: LD_INT 55
20158: PUSH
20159: EMPTY
20160: LIST
20161: PPUSH
20162: CALL_OW 72
20166: PUSH
20167: LD_INT 0
20169: PLUS
20170: PUSH
20171: LD_EXP 46
20175: PUSH
20176: LD_INT 0
20178: PLUS
20179: EQUAL
20180: IFFALSE 19878
// rolfWaitingForVehiclesTimer := 0 0$00 ;
20182: LD_ADDR_EXP 19
20186: PUSH
20187: LD_INT 0
20189: ST_TO_ADDR
// display_strings := [ ] ;
20190: LD_ADDR_OWVAR 47
20194: PUSH
20195: EMPTY
20196: ST_TO_ADDR
// DialogueOn ;
20197: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
20201: LD_EXP 42
20205: PPUSH
20206: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
20210: LD_EXP 42
20214: PPUSH
20215: LD_STRING DRf-Veh-a-17
20217: PPUSH
20218: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
20222: LD_EXP 29
20226: PPUSH
20227: LD_STRING DH-08-Veh-a-18
20229: PPUSH
20230: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
20234: LD_EXP 42
20238: PPUSH
20239: LD_STRING DRf-Veh-a-19
20241: PPUSH
20242: CALL_OW 88
// DialogueOff ;
20246: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
20250: LD_STRING M5a
20252: PPUSH
20253: CALL_OW 337
// rolfHasVehicles := true ;
20257: LD_ADDR_EXP 16
20261: PUSH
20262: LD_INT 1
20264: ST_TO_ADDR
// for i in rolfSquad do
20265: LD_ADDR_VAR 0 1
20269: PUSH
20270: LD_EXP 46
20274: PUSH
20275: FOR_IN
20276: IFFALSE 20309
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
20278: LD_VAR 0 1
20282: PPUSH
20283: CALL_OW 310
20287: PPUSH
20288: LD_INT 8
20290: PPUSH
20291: CALL_OW 235
// SetSide ( i , 8 ) ;
20295: LD_VAR 0 1
20299: PPUSH
20300: LD_INT 8
20302: PPUSH
20303: CALL_OW 235
// end ;
20307: GO 20275
20309: POP
20310: POP
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
20311: LD_EXP 46
20315: PPUSH
20316: LD_INT 229
20318: PPUSH
20319: LD_INT 154
20321: PPUSH
20322: CALL_OW 114
// end ;
20326: PPOPN 1
20328: END
// every 0 0$1 trigger leninSpotted do
20329: LD_EXP 14
20333: IFFALSE 20421
20335: GO 20337
20337: DISABLE
// begin wait ( 0 0$10 ) ;
20338: LD_INT 350
20340: PPUSH
20341: CALL_OW 67
// DialogueOn ;
20345: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
20349: LD_EXP 41
20353: PPUSH
20354: LD_STRING DA-Transmission-1
20356: PPUSH
20357: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
20361: LD_EXP 48
20365: PPUSH
20366: LD_STRING DMzw-Transmission-2
20368: PPUSH
20369: CALL_OW 94
// if gaidarKilled then
20373: LD_EXP 7
20377: IFFALSE 20393
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
20379: LD_EXP 48
20383: PPUSH
20384: LD_STRING DMzw-Transmission-3
20386: PPUSH
20387: CALL_OW 94
20391: GO 20405
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
20393: LD_EXP 48
20397: PPUSH
20398: LD_STRING DMzw-Transmission-a-3
20400: PPUSH
20401: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
20405: LD_EXP 29
20409: PPUSH
20410: LD_STRING DH-Transmission-4
20412: PPUSH
20413: CALL_OW 88
// DialogueOff ;
20417: CALL_OW 7
// end ;
20421: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
20422: LD_INT 22
20424: PUSH
20425: LD_INT 3
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 25
20434: PUSH
20435: LD_INT 9
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 101
20444: PUSH
20445: LD_INT 2
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: LIST
20456: PPUSH
20457: CALL_OW 69
20461: PUSH
20462: LD_EXP 29
20466: PPUSH
20467: CALL_OW 302
20471: AND
20472: IFFALSE 20537
20474: GO 20476
20476: DISABLE
// begin CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
20477: LD_INT 22
20479: PUSH
20480: LD_INT 3
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: LD_INT 25
20489: PUSH
20490: LD_INT 9
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 101
20499: PUSH
20500: LD_INT 2
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: LIST
20511: PPUSH
20512: CALL_OW 69
20516: PUSH
20517: LD_INT 1
20519: ARRAY
20520: PPUSH
20521: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
20525: LD_EXP 29
20529: PPUSH
20530: LD_STRING DH-Rubazooka-1
20532: PPUSH
20533: CALL_OW 88
// end ;
20537: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
20538: LD_INT 19
20540: PPUSH
20541: LD_INT 22
20543: PUSH
20544: LD_INT 3
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: PPUSH
20551: CALL_OW 70
20555: PUSH
20556: LD_EXP 28
20560: AND
20561: IFFALSE 20612
20563: GO 20565
20565: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
20566: LD_INT 19
20568: PPUSH
20569: LD_INT 22
20571: PUSH
20572: LD_INT 3
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PPUSH
20579: CALL_OW 70
20583: PPUSH
20584: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
20588: LD_EXP 29
20592: PPUSH
20593: LD_STRING DH-Ruattfirst-1
20595: PPUSH
20596: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
20600: LD_EXP 29
20604: PPUSH
20605: LD_STRING DH-Ruattfirst-2
20607: PPUSH
20608: CALL_OW 88
// end ;
20612: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
20613: LD_INT 19
20615: PPUSH
20616: LD_INT 22
20618: PUSH
20619: LD_INT 3
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PPUSH
20626: CALL_OW 70
20630: PUSH
20631: LD_EXP 28
20635: NOT
20636: AND
20637: IFFALSE 20676
20639: GO 20641
20641: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
20642: LD_INT 19
20644: PPUSH
20645: LD_INT 22
20647: PUSH
20648: LD_INT 3
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PPUSH
20655: CALL_OW 70
20659: PPUSH
20660: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
20664: LD_EXP 29
20668: PPUSH
20669: LD_STRING DH-Ruattnext-1
20671: PPUSH
20672: CALL_OW 88
// end ;
20676: END
// every 0 0$1 trigger GetResourceType ( GetBase ( arDepot ) , mat_oil ) < 31 and IsOk ( Givi ) do var vehicle , driver , live ;
20677: LD_EXP 43
20681: PPUSH
20682: CALL_OW 274
20686: PPUSH
20687: LD_INT 2
20689: PPUSH
20690: CALL_OW 275
20694: PUSH
20695: LD_INT 31
20697: LESS
20698: PUSH
20699: LD_EXP 30
20703: PPUSH
20704: CALL_OW 302
20708: AND
20709: IFFALSE 21272
20711: GO 20713
20713: DISABLE
20714: LD_INT 0
20716: PPUSH
20717: PPUSH
20718: PPUSH
// begin DialogueOn ;
20719: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
20723: LD_EXP 29
20727: PPUSH
20728: LD_STRING DH-Fuel-1
20730: PPUSH
20731: CALL_OW 88
// Say ( Givi , DG-Fuel-2 ) ;
20735: LD_EXP 30
20739: PPUSH
20740: LD_STRING DG-Fuel-2
20742: PPUSH
20743: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
20747: LD_EXP 30
20751: PPUSH
20752: LD_STRING DG-Fuel-3
20754: PPUSH
20755: CALL_OW 88
// Say ( Givi , DG-Fuel-4 ) ;
20759: LD_EXP 30
20763: PPUSH
20764: LD_STRING DG-Fuel-4
20766: PPUSH
20767: CALL_OW 88
// DialogueOff ;
20771: CALL_OW 7
// Query ( Oil ) ;
20775: LD_STRING Oil
20777: PPUSH
20778: CALL_OW 97
// SetAreaMapShow ( oilArea , 1 ) ;
20782: LD_INT 20
20784: PPUSH
20785: LD_INT 1
20787: PPUSH
20788: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
20792: LD_INT 35
20794: PPUSH
20795: CALL_OW 67
// until FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) ;
20799: LD_INT 20
20801: PPUSH
20802: LD_INT 22
20804: PUSH
20805: LD_INT 2
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: LD_INT 33
20814: PUSH
20815: LD_INT 1
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: LD_INT 2
20824: PUSH
20825: LD_INT 34
20827: PUSH
20828: LD_INT 32
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PUSH
20835: LD_INT 34
20837: PUSH
20838: LD_INT 51
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: LIST
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: LIST
20854: PPUSH
20855: CALL_OW 70
20859: IFFALSE 20792
// SetAreaMapShow ( oilArea , 0 ) ;
20861: LD_INT 20
20863: PPUSH
20864: LD_INT 0
20866: PPUSH
20867: CALL_OW 424
// vehicle := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) [ 1 ] ;
20871: LD_ADDR_VAR 0 1
20875: PUSH
20876: LD_INT 20
20878: PPUSH
20879: LD_INT 22
20881: PUSH
20882: LD_INT 2
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PUSH
20889: LD_INT 33
20891: PUSH
20892: LD_INT 1
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: LD_INT 2
20901: PUSH
20902: LD_INT 34
20904: PUSH
20905: LD_INT 32
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PUSH
20912: LD_INT 34
20914: PUSH
20915: LD_INT 51
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: LIST
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: LIST
20931: PPUSH
20932: CALL_OW 70
20936: PUSH
20937: LD_INT 1
20939: ARRAY
20940: ST_TO_ADDR
// driver := IsDrivenBy ( vehicle ) ;
20941: LD_ADDR_VAR 0 2
20945: PUSH
20946: LD_VAR 0 1
20950: PPUSH
20951: CALL_OW 311
20955: ST_TO_ADDR
// live := GetLives ( vehicle ) ;
20956: LD_ADDR_VAR 0 3
20960: PUSH
20961: LD_VAR 0 1
20965: PPUSH
20966: CALL_OW 256
20970: ST_TO_ADDR
// RemoveUnit ( driver ) ;
20971: LD_VAR 0 2
20975: PPUSH
20976: CALL_OW 64
// RemoveUnit ( vehicle ) ;
20980: LD_VAR 0 1
20984: PPUSH
20985: CALL_OW 64
// wait ( rand ( 3 3$30 , 5 5$00 ) ) ;
20989: LD_INT 7350
20991: PPUSH
20992: LD_INT 10500
20994: PPUSH
20995: CALL_OW 12
20999: PPUSH
21000: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21004: LD_INT 35
21006: PPUSH
21007: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
21011: LD_INT 22
21013: PUSH
21014: LD_INT 3
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: LD_INT 92
21023: PUSH
21024: LD_INT 261
21026: PUSH
21027: LD_INT 71
21029: PUSH
21030: LD_INT 12
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PPUSH
21043: CALL_OW 69
21047: NOT
21048: PUSH
21049: LD_INT 277
21051: PPUSH
21052: LD_INT 80
21054: PPUSH
21055: CALL_OW 428
21059: NOT
21060: AND
21061: IFFALSE 21004
// uc_nation := GetNation ( vehicle ) ;
21063: LD_ADDR_OWVAR 21
21067: PUSH
21068: LD_VAR 0 1
21072: PPUSH
21073: CALL_OW 248
21077: ST_TO_ADDR
// uc_side := 2 ;
21078: LD_ADDR_OWVAR 20
21082: PUSH
21083: LD_INT 2
21085: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( vehicle ) , GetEngine ( vehicle ) , GetControl ( vehicle ) , GetWeapon ( vehicle ) , 66 ) ;
21086: LD_VAR 0 1
21090: PPUSH
21091: CALL_OW 265
21095: PPUSH
21096: LD_VAR 0 1
21100: PPUSH
21101: CALL_OW 262
21105: PPUSH
21106: LD_VAR 0 1
21110: PPUSH
21111: CALL_OW 263
21115: PPUSH
21116: LD_VAR 0 1
21120: PPUSH
21121: CALL_OW 264
21125: PPUSH
21126: LD_INT 66
21128: PPUSH
21129: CALL 29495 0 5
// vehicle := CreateVehicle ;
21133: LD_ADDR_VAR 0 1
21137: PUSH
21138: CALL_OW 45
21142: ST_TO_ADDR
// PlaceUnitXYD ( vehicle , 277 , 80 , 4 , false ) ;
21143: LD_VAR 0 1
21147: PPUSH
21148: LD_INT 277
21150: PPUSH
21151: LD_INT 80
21153: PPUSH
21154: LD_INT 4
21156: PPUSH
21157: LD_INT 0
21159: PPUSH
21160: CALL 63299 0 5
// PlaceHumanInUnit ( driver , vehicle ) ;
21164: LD_VAR 0 2
21168: PPUSH
21169: LD_VAR 0 1
21173: PPUSH
21174: CALL_OW 52
// SetLives ( vehicle , live ) ;
21178: LD_VAR 0 1
21182: PPUSH
21183: LD_VAR 0 3
21187: PPUSH
21188: CALL_OW 234
// if Prob ( [ 70 , 60 , 50 ] [ Difficulty ] ) then
21192: LD_INT 70
21194: PUSH
21195: LD_INT 60
21197: PUSH
21198: LD_INT 50
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: LIST
21205: PUSH
21206: LD_OWVAR 67
21210: ARRAY
21211: PPUSH
21212: CALL_OW 13
21216: IFFALSE 21235
// SetCargo ( vehicle , mat_oil , 100 ) else
21218: LD_VAR 0 1
21222: PPUSH
21223: LD_INT 2
21225: PPUSH
21226: LD_INT 100
21228: PPUSH
21229: CALL_OW 290
21233: GO 21257
// if live > 333 then
21235: LD_VAR 0 3
21239: PUSH
21240: LD_INT 333
21242: GREATER
21243: IFFALSE 21257
// SetLives ( vehicle , 333 ) ;
21245: LD_VAR 0 1
21249: PPUSH
21250: LD_INT 333
21252: PPUSH
21253: CALL_OW 234
// ComMoveXY ( vehicle , 250 , 119 ) ;
21257: LD_VAR 0 1
21261: PPUSH
21262: LD_INT 250
21264: PPUSH
21265: LD_INT 119
21267: PPUSH
21268: CALL_OW 111
// end ;
21272: PPOPN 3
21274: END
// every 0 0$1 trigger leninSpotted and omarAttack do
21275: LD_EXP 14
21279: PUSH
21280: LD_EXP 23
21284: AND
21285: IFFALSE 21585
21287: GO 21289
21289: DISABLE
// begin wait ( 0 0$45 ) ;
21290: LD_INT 1575
21292: PPUSH
21293: CALL_OW 67
// DialogueOn ;
21297: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
21301: LD_EXP 37
21305: PPUSH
21306: LD_STRING DShar-End-1
21308: PPUSH
21309: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
21313: LD_EXP 29
21317: PPUSH
21318: LD_STRING DH-End-2
21320: PPUSH
21321: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
21325: LD_EXP 37
21329: PPUSH
21330: LD_STRING DShar-End-3
21332: PPUSH
21333: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
21337: LD_EXP 29
21341: PPUSH
21342: LD_STRING DH-End-4
21344: PPUSH
21345: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
21349: LD_EXP 37
21353: PPUSH
21354: LD_STRING DShar-End-5
21356: PPUSH
21357: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
21361: LD_EXP 37
21365: PPUSH
21366: LD_STRING DShar-End-6
21368: PPUSH
21369: CALL_OW 94
// dwait ( 0 0$2 ) ;
21373: LD_INT 70
21375: PPUSH
21376: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
21380: LD_EXP 29
21384: PPUSH
21385: LD_STRING DH-End-7
21387: PPUSH
21388: CALL_OW 88
// DialogueOff ;
21392: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
21396: LD_STRING M6
21398: PPUSH
21399: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
21403: LD_INT 17
21405: PPUSH
21406: LD_INT 1
21408: PPUSH
21409: CALL_OW 424
// escapeAllowed := true ;
21413: LD_ADDR_EXP 24
21417: PUSH
21418: LD_INT 1
21420: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21421: LD_INT 35
21423: PPUSH
21424: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
21428: LD_EXP 40
21432: PPUSH
21433: LD_STRING DKs-End-8
21435: PPUSH
21436: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
21440: LD_EXP 34
21444: PPUSH
21445: LD_STRING DK-End-10
21447: PPUSH
21448: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
21452: LD_EXP 40
21456: PPUSH
21457: LD_STRING DKs-End-9
21459: PPUSH
21460: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
21464: LD_EXP 36
21468: PPUSH
21469: LD_STRING DMar-End-11
21471: PPUSH
21472: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
21476: LD_STRING 05_DrugsTested
21478: PPUSH
21479: LD_EXP 1
21483: PPUSH
21484: CALL_OW 30
21488: IFFALSE 21502
// Say ( Mike , DM-End-12 ) ;
21490: LD_EXP 31
21494: PPUSH
21495: LD_STRING DM-End-12
21497: PPUSH
21498: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
21502: LD_EXP 38
21506: PPUSH
21507: LD_STRING DO-End-13
21509: PPUSH
21510: CALL_OW 88
// if IsOk ( Sophia ) then
21514: LD_EXP 35
21518: PPUSH
21519: CALL_OW 302
21523: IFFALSE 21549
// begin Say ( Sophia , DS-End-15 ) ;
21525: LD_EXP 35
21529: PPUSH
21530: LD_STRING DS-End-15
21532: PPUSH
21533: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
21537: LD_EXP 34
21541: PPUSH
21542: LD_STRING DK-End-16
21544: PPUSH
21545: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
21549: LD_EXP 30
21553: PPUSH
21554: LD_STRING DG-End-17
21556: PPUSH
21557: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
21561: LD_EXP 30
21565: PPUSH
21566: LD_STRING DG-End-18
21568: PPUSH
21569: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
21573: LD_EXP 30
21577: PPUSH
21578: LD_STRING DG-End-19
21580: PPUSH
21581: CALL_OW 88
// end ;
21585: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
21586: LD_EXP 24
21590: IFFALSE 21718
21592: GO 21594
21594: DISABLE
21595: LD_INT 0
21597: PPUSH
21598: PPUSH
// begin enable ;
21599: ENABLE
// display_strings := [ #X106-2 , escapeTimer ] ;
21600: LD_ADDR_OWVAR 47
21604: PUSH
21605: LD_STRING #X106-2
21607: PUSH
21608: LD_EXP 25
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
21617: LD_ADDR_EXP 25
21621: PUSH
21622: LD_EXP 25
21626: PUSH
21627: LD_INT 35
21629: MINUS
21630: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
21631: LD_ADDR_VAR 0 2
21635: PUSH
21636: LD_INT 17
21638: PPUSH
21639: LD_INT 22
21641: PUSH
21642: LD_INT 2
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 21
21651: PUSH
21652: LD_INT 1
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 23
21661: PUSH
21662: LD_INT 2
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: LIST
21673: PPUSH
21674: CALL_OW 71
21678: ST_TO_ADDR
// if not outsiders then
21679: LD_VAR 0 2
21683: NOT
21684: IFFALSE 21701
// begin escapeAllowed := false ;
21686: LD_ADDR_EXP 24
21690: PUSH
21691: LD_INT 0
21693: ST_TO_ADDR
// disable ;
21694: DISABLE
// MissionWin ;
21695: CALL 21721 0 0
// exit ;
21699: GO 21718
// end ; if escapeTimer <= 0 0$00 then
21701: LD_EXP 25
21705: PUSH
21706: LD_INT 0
21708: LESSEQUAL
21709: IFFALSE 21718
// YouLost ( TimeOut ) ;
21711: LD_STRING TimeOut
21713: PPUSH
21714: CALL_OW 104
// end ;
21718: PPOPN 2
21720: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
21721: LD_INT 0
21723: PPUSH
21724: PPUSH
21725: PPUSH
21726: PPUSH
21727: PPUSH
// Say ( Heike , DH-End-20 ) ;
21728: LD_EXP 29
21732: PPUSH
21733: LD_STRING DH-End-20
21735: PPUSH
21736: CALL_OW 88
// if rolfDied then
21740: LD_EXP 13
21744: IFFALSE 21759
// AddMedal ( med1 , - 1 ) else
21746: LD_STRING med1
21748: PPUSH
21749: LD_INT 1
21751: NEG
21752: PPUSH
21753: CALL_OW 101
21757: GO 21769
// AddMedal ( med1 , 1 ) ;
21759: LD_STRING med1
21761: PPUSH
21762: LD_INT 1
21764: PPUSH
21765: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
21769: LD_EXP 22
21773: PUSH
21774: LD_EXP 16
21778: AND
21779: IFFALSE 21793
// AddMedal ( med2 , 1 ) else
21781: LD_STRING med2
21783: PPUSH
21784: LD_INT 1
21786: PPUSH
21787: CALL_OW 101
21791: GO 21842
// if omarHasVehicles then
21793: LD_EXP 22
21797: IFFALSE 21812
// AddMedal ( med2 , - 1 ) else
21799: LD_STRING med2
21801: PPUSH
21802: LD_INT 1
21804: NEG
21805: PPUSH
21806: CALL_OW 101
21810: GO 21842
// if rolfHasVehicles then
21812: LD_EXP 16
21816: IFFALSE 21831
// AddMedal ( med2 , - 2 ) else
21818: LD_STRING med2
21820: PPUSH
21821: LD_INT 2
21823: NEG
21824: PPUSH
21825: CALL_OW 101
21829: GO 21842
// AddMedal ( med2 , - 3 ) ;
21831: LD_STRING med2
21833: PPUSH
21834: LD_INT 3
21836: NEG
21837: PPUSH
21838: CALL_OW 101
// if ruLoseCounter >= [ 40 , 55 , 70 ] [ Difficulty ] and heikeLoseCounter = 0 then
21842: LD_EXP 5
21846: PUSH
21847: LD_INT 40
21849: PUSH
21850: LD_INT 55
21852: PUSH
21853: LD_INT 70
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: LIST
21860: PUSH
21861: LD_OWVAR 67
21865: ARRAY
21866: GREATEREQUAL
21867: PUSH
21868: LD_EXP 26
21872: PUSH
21873: LD_INT 0
21875: EQUAL
21876: AND
21877: IFFALSE 21891
// AddMedal ( med3 , 1 ) else
21879: LD_STRING med3
21881: PPUSH
21882: LD_INT 1
21884: PPUSH
21885: CALL_OW 101
21889: GO 21921
// if heikeLoseCounter then
21891: LD_EXP 26
21895: IFFALSE 21910
// AddMedal ( med3 , - 2 ) else
21897: LD_STRING med3
21899: PPUSH
21900: LD_INT 2
21902: NEG
21903: PPUSH
21904: CALL_OW 101
21908: GO 21921
// AddMedal ( med3 , - 1 ) ;
21910: LD_STRING med3
21912: PPUSH
21913: LD_INT 1
21915: NEG
21916: PPUSH
21917: CALL_OW 101
// GiveMedals ( MAIN ) ;
21921: LD_STRING MAIN
21923: PPUSH
21924: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
21928: LD_INT 22
21930: PUSH
21931: LD_INT 2
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 23
21940: PUSH
21941: LD_INT 2
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 21
21950: PUSH
21951: LD_INT 1
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: LIST
21962: PPUSH
21963: CALL_OW 69
21967: PPUSH
21968: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
21972: LD_EXP 29
21976: PPUSH
21977: LD_STRING 06_Heike
21979: PPUSH
21980: CALL_OW 38
// if Aviradze then
21984: LD_EXP 41
21988: IFFALSE 22002
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
21990: LD_EXP 41
21994: PPUSH
21995: LD_STRING 06_Aviradze
21997: PPUSH
21998: CALL_OW 38
// if Ibrahim then
22002: LD_EXP 32
22006: IFFALSE 22020
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
22008: LD_EXP 32
22012: PPUSH
22013: LD_STRING 06_Ibrahim
22015: PPUSH
22016: CALL_OW 38
// if Kamil then
22020: LD_EXP 33
22024: IFFALSE 22038
// SaveCharacters ( Kamil , 06_Kamil ) ;
22026: LD_EXP 33
22030: PPUSH
22031: LD_STRING 06_Kamil
22033: PPUSH
22034: CALL_OW 38
// if Sophia then
22038: LD_EXP 35
22042: IFFALSE 22056
// SaveCharacters ( Sophia , 06_Sophia ) ;
22044: LD_EXP 35
22048: PPUSH
22049: LD_STRING 06_Sophia
22051: PPUSH
22052: CALL_OW 38
// if Kaia then
22056: LD_EXP 34
22060: IFFALSE 22074
// SaveCharacters ( Kaia , 06_Kaia ) ;
22062: LD_EXP 34
22066: PPUSH
22067: LD_STRING 06_Kaia
22069: PPUSH
22070: CALL_OW 38
// if Givi then
22074: LD_EXP 30
22078: IFFALSE 22092
// SaveCharacters ( Givi , 06_Givi ) ;
22080: LD_EXP 30
22084: PPUSH
22085: LD_STRING 06_Givi
22087: PPUSH
22088: CALL_OW 38
// if Mike then
22092: LD_EXP 31
22096: IFFALSE 22110
// SaveCharacters ( Mike , 06_Mike ) ;
22098: LD_EXP 31
22102: PPUSH
22103: LD_STRING 06_Mike
22105: PPUSH
22106: CALL_OW 38
// if Markov then
22110: LD_EXP 36
22114: IFFALSE 22128
// SaveCharacters ( Markov , 06_Markov ) ;
22116: LD_EXP 36
22120: PPUSH
22121: LD_STRING 06_Markov
22123: PPUSH
22124: CALL_OW 38
// if Kurt then
22128: LD_EXP 40
22132: IFFALSE 22146
// SaveCharacters ( Kurt , 06_Kurt ) ;
22134: LD_EXP 40
22138: PPUSH
22139: LD_STRING 06_Kurt
22141: PPUSH
22142: CALL_OW 38
// if heikeSecondSquad then
22146: LD_EXP 44
22150: IFFALSE 22164
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
22152: LD_EXP 44
22156: PPUSH
22157: LD_STRING 06_others
22159: PPUSH
22160: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
22164: LD_ADDR_VAR 0 3
22168: PUSH
22169: LD_INT 22
22171: PUSH
22172: LD_INT 2
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 23
22181: PUSH
22182: LD_INT 0
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PPUSH
22193: CALL_OW 69
22197: ST_TO_ADDR
// if tmp then
22198: LD_VAR 0 3
22202: IFFALSE 22216
// SaveCharacters ( tmp , 06_apes ) ;
22204: LD_VAR 0 3
22208: PPUSH
22209: LD_STRING 06_apes
22211: PPUSH
22212: CALL_OW 38
// if Rolf then
22216: LD_EXP 42
22220: IFFALSE 22271
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
22222: LD_EXP 42
22226: PPUSH
22227: LD_STRING 06_Rolf
22229: PPUSH
22230: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
22234: LD_STRING enableBioCharacter(BIO_ROLF)
22236: PPUSH
22237: CALL_OW 559
// if rolfSquad diff Rolf then
22241: LD_EXP 46
22245: PUSH
22246: LD_EXP 42
22250: DIFF
22251: IFFALSE 22271
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
22253: LD_EXP 46
22257: PUSH
22258: LD_EXP 42
22262: DIFF
22263: PPUSH
22264: LD_STRING 06_RolfSquad
22266: PPUSH
22267: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
22271: LD_ADDR_VAR 0 3
22275: PUSH
22276: LD_INT 17
22278: PPUSH
22279: LD_INT 21
22281: PUSH
22282: LD_INT 2
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PPUSH
22289: CALL_OW 70
22293: ST_TO_ADDR
// if tmp then
22294: LD_VAR 0 3
22298: IFFALSE 22592
// begin tmp2 := [ ] ;
22300: LD_ADDR_VAR 0 4
22304: PUSH
22305: EMPTY
22306: ST_TO_ADDR
// for i in tmp do
22307: LD_ADDR_VAR 0 2
22311: PUSH
22312: LD_VAR 0 3
22316: PUSH
22317: FOR_IN
22318: IFFALSE 22578
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
22320: LD_VAR 0 2
22324: PPUSH
22325: CALL_OW 264
22329: PUSH
22330: LD_INT 32
22332: PUSH
22333: LD_INT 12
22335: PUSH
22336: LD_INT 51
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: LIST
22343: IN
22344: IFFALSE 22481
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
22346: LD_ADDR_VAR 0 5
22350: PUSH
22351: LD_VAR 0 2
22355: PPUSH
22356: LD_INT 1
22358: PPUSH
22359: CALL_OW 289
22363: PUSH
22364: LD_VAR 0 2
22368: PPUSH
22369: LD_INT 2
22371: PPUSH
22372: CALL_OW 289
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
22381: LD_ADDR_VAR 0 4
22385: PUSH
22386: LD_VAR 0 4
22390: PPUSH
22391: LD_VAR 0 4
22395: PUSH
22396: LD_INT 1
22398: PLUS
22399: PPUSH
22400: LD_VAR 0 2
22404: PPUSH
22405: CALL_OW 265
22409: PUSH
22410: LD_VAR 0 2
22414: PPUSH
22415: CALL_OW 262
22419: PUSH
22420: LD_VAR 0 2
22424: PPUSH
22425: CALL_OW 263
22429: PUSH
22430: LD_VAR 0 2
22434: PPUSH
22435: CALL_OW 264
22439: PUSH
22440: LD_VAR 0 2
22444: PPUSH
22445: CALL_OW 248
22449: PUSH
22450: LD_VAR 0 2
22454: PPUSH
22455: CALL_OW 256
22459: PUSH
22460: LD_VAR 0 5
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: PPUSH
22474: CALL_OW 1
22478: ST_TO_ADDR
// end else
22479: GO 22576
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
22481: LD_ADDR_VAR 0 4
22485: PUSH
22486: LD_VAR 0 4
22490: PPUSH
22491: LD_VAR 0 4
22495: PUSH
22496: LD_INT 1
22498: PLUS
22499: PPUSH
22500: LD_VAR 0 2
22504: PPUSH
22505: CALL_OW 265
22509: PUSH
22510: LD_VAR 0 2
22514: PPUSH
22515: CALL_OW 262
22519: PUSH
22520: LD_VAR 0 2
22524: PPUSH
22525: CALL_OW 263
22529: PUSH
22530: LD_VAR 0 2
22534: PPUSH
22535: CALL_OW 264
22539: PUSH
22540: LD_VAR 0 2
22544: PPUSH
22545: CALL_OW 248
22549: PUSH
22550: LD_VAR 0 2
22554: PPUSH
22555: CALL_OW 256
22559: PUSH
22560: EMPTY
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: PPUSH
22571: CALL_OW 1
22575: ST_TO_ADDR
22576: GO 22317
22578: POP
22579: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
22580: LD_VAR 0 4
22584: PPUSH
22585: LD_STRING 06_Vehicles
22587: PPUSH
22588: CALL_OW 39
// end ; YouWin ;
22592: CALL_OW 103
// end ; end_of_file
22596: LD_VAR 0 1
22600: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
22601: LD_INT 0
22603: PPUSH
// begin if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
22604: LD_VAR 0 1
22608: PPUSH
22609: CALL_OW 255
22613: PUSH
22614: LD_INT 2
22616: EQUAL
22617: PUSH
22618: LD_OWVAR 52
22622: AND
22623: PUSH
22624: LD_VAR 0 1
22628: PPUSH
22629: CALL_OW 263
22633: PUSH
22634: LD_INT 1
22636: EQUAL
22637: AND
22638: IFFALSE 22693
// begin driver := IsDrivenBy ( vehicle ) ;
22640: LD_ADDR_VAR 0 3
22644: PUSH
22645: LD_VAR 0 1
22649: PPUSH
22650: CALL_OW 311
22654: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
22655: LD_VAR 0 1
22659: PPUSH
22660: LD_INT 211
22662: PPUSH
22663: LD_INT 101
22665: PPUSH
22666: CALL_OW 111
// AddComExitVehicle ( driver ) ;
22670: LD_VAR 0 3
22674: PPUSH
22675: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
22679: LD_VAR 0 3
22683: PPUSH
22684: LD_VAR 0 2
22688: PPUSH
22689: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
22693: LD_VAR 0 1
22697: PPUSH
22698: CALL_OW 255
22702: PUSH
22703: LD_INT 3
22705: EQUAL
22706: IFFALSE 22737
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
22708: LD_ADDR_EXP 55
22712: PUSH
22713: LD_EXP 55
22717: PPUSH
22718: LD_EXP 55
22722: PUSH
22723: LD_INT 1
22725: PLUS
22726: PPUSH
22727: LD_VAR 0 1
22731: PPUSH
22732: CALL_OW 1
22736: ST_TO_ADDR
// end ;
22737: PPOPN 3
22739: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
22740: LD_VAR 0 1
22744: PPUSH
22745: CALL_OW 255
22749: PUSH
22750: LD_INT 8
22752: EQUAL
22753: PUSH
22754: LD_VAR 0 1
22758: PPUSH
22759: CALL_OW 266
22763: PUSH
22764: LD_INT 4
22766: EQUAL
22767: AND
22768: IFFALSE 22779
// ComUpgrade ( b ) ;
22770: LD_VAR 0 1
22774: PPUSH
22775: CALL_OW 146
// end ;
22779: PPOPN 1
22781: END
// on UnitDestroyed ( un ) do begin if un = Heike then
22782: LD_VAR 0 1
22786: PUSH
22787: LD_EXP 29
22791: EQUAL
22792: IFFALSE 22801
// YouLost ( Heike ) ;
22794: LD_STRING Heike
22796: PPUSH
22797: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] ] ) then
22801: LD_VAR 0 1
22805: PUSH
22806: LD_INT 22
22808: PUSH
22809: LD_INT 2
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 23
22818: PUSH
22819: LD_INT 2
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PPUSH
22830: CALL_OW 69
22834: IN
22835: IFFALSE 22851
// heikeLoseCounter := heikeLoseCounter + 1 ;
22837: LD_ADDR_EXP 26
22841: PUSH
22842: LD_EXP 26
22846: PUSH
22847: LD_INT 1
22849: PLUS
22850: ST_TO_ADDR
// if un = arDepot then
22851: LD_VAR 0 1
22855: PUSH
22856: LD_EXP 43
22860: EQUAL
22861: IFFALSE 22870
// YouLost ( Base ) ;
22863: LD_STRING Base
22865: PPUSH
22866: CALL_OW 104
// if un = Rolf then
22870: LD_VAR 0 1
22874: PUSH
22875: LD_EXP 42
22879: EQUAL
22880: IFFALSE 22890
// rolfDied := true ;
22882: LD_ADDR_EXP 13
22886: PUSH
22887: LD_INT 1
22889: ST_TO_ADDR
// if un in rolfSquad then
22890: LD_VAR 0 1
22894: PUSH
22895: LD_EXP 46
22899: IN
22900: IFFALSE 22918
// rolfSquad := rolfSquad diff un ;
22902: LD_ADDR_EXP 46
22906: PUSH
22907: LD_EXP 46
22911: PUSH
22912: LD_VAR 0 1
22916: DIFF
22917: ST_TO_ADDR
// if un in omarSquad then
22918: LD_VAR 0 1
22922: PUSH
22923: LD_EXP 47
22927: IN
22928: IFFALSE 22946
// omarSquad := omarSquad diff un ;
22930: LD_ADDR_EXP 47
22934: PUSH
22935: LD_EXP 47
22939: PUSH
22940: LD_VAR 0 1
22944: DIFF
22945: ST_TO_ADDR
// if GetSide ( un ) = 3 then
22946: LD_VAR 0 1
22950: PPUSH
22951: CALL_OW 255
22955: PUSH
22956: LD_INT 3
22958: EQUAL
22959: IFFALSE 22975
// ruLoseCounter := ruLoseCounter + 1 ;
22961: LD_ADDR_EXP 5
22965: PUSH
22966: LD_EXP 5
22970: PUSH
22971: LD_INT 1
22973: PLUS
22974: ST_TO_ADDR
// if un in ruAttackers then
22975: LD_VAR 0 1
22979: PUSH
22980: LD_EXP 56
22984: IN
22985: IFFALSE 23003
// ruAttackers := ruAttackers diff un ;
22987: LD_ADDR_EXP 56
22991: PUSH
22992: LD_EXP 56
22996: PUSH
22997: LD_VAR 0 1
23001: DIFF
23002: ST_TO_ADDR
// end ;
23003: PPOPN 1
23005: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
23006: LD_INT 0
23008: PPUSH
23009: PPUSH
23010: PPUSH
23011: PPUSH
// begin if GetSide ( un ) = 3 and not un in ruAttackers then
23012: LD_VAR 0 1
23016: PPUSH
23017: CALL_OW 255
23021: PUSH
23022: LD_INT 3
23024: EQUAL
23025: PUSH
23026: LD_VAR 0 1
23030: PUSH
23031: LD_EXP 56
23035: IN
23036: NOT
23037: AND
23038: IFFALSE 23534
// begin if not IsInArea ( un , ruMainBase ) then
23040: LD_VAR 0 1
23044: PPUSH
23045: LD_INT 10
23047: PPUSH
23048: CALL_OW 308
23052: NOT
23053: IFFALSE 23067
// ComMoveToArea ( un , ruMainBase ) ;
23055: LD_VAR 0 1
23059: PPUSH
23060: LD_INT 10
23062: PPUSH
23063: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
23067: LD_INT 35
23069: PPUSH
23070: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
23074: LD_VAR 0 1
23078: PPUSH
23079: CALL_OW 302
23083: NOT
23084: PUSH
23085: LD_VAR 0 1
23089: PPUSH
23090: LD_INT 10
23092: PPUSH
23093: CALL_OW 308
23097: OR
23098: IFFALSE 23067
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
23100: LD_ADDR_EXP 54
23104: PUSH
23105: LD_EXP 54
23109: PPUSH
23110: LD_EXP 54
23114: PUSH
23115: LD_INT 1
23117: PLUS
23118: PPUSH
23119: LD_VAR 0 1
23123: PPUSH
23124: CALL_OW 1
23128: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
23129: LD_ADDR_VAR 0 8
23133: PUSH
23134: LD_INT 72
23136: PUSH
23137: LD_INT 12
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: ST_TO_ADDR
// if tmp then
23144: LD_VAR 0 8
23148: IFFALSE 23263
// for i in tmp do
23150: LD_ADDR_VAR 0 5
23154: PUSH
23155: LD_VAR 0 8
23159: PUSH
23160: FOR_IN
23161: IFFALSE 23261
// if UnitsInside ( i ) < 6 then
23163: LD_VAR 0 5
23167: PPUSH
23168: CALL_OW 313
23172: PUSH
23173: LD_INT 6
23175: LESS
23176: IFFALSE 23259
// begin AddComEnterUnit ( un , i ) ;
23178: LD_VAR 0 1
23182: PPUSH
23183: LD_VAR 0 5
23187: PPUSH
23188: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
23192: LD_VAR 0 8
23196: PPUSH
23197: LD_INT 22
23199: PUSH
23200: LD_INT 23
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: LD_INT 1
23209: PPUSH
23210: LD_INT 2
23212: PPUSH
23213: CALL_OW 12
23217: ARRAY
23218: PPUSH
23219: LD_INT 1
23221: PPUSH
23222: LD_INT 1
23224: PPUSH
23225: LD_INT 44
23227: PUSH
23228: LD_INT 46
23230: PUSH
23231: LD_INT 47
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 1
23241: PPUSH
23242: LD_INT 3
23244: PPUSH
23245: CALL_OW 12
23249: ARRAY
23250: PPUSH
23251: CALL_OW 185
// exit ;
23255: POP
23256: POP
23257: GO 23534
// end ;
23259: GO 23160
23261: POP
23262: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
23263: LD_ADDR_VAR 0 8
23267: PUSH
23268: LD_INT 10
23270: PPUSH
23271: LD_INT 22
23273: PUSH
23274: LD_INT 3
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 50
23283: PUSH
23284: EMPTY
23285: LIST
23286: PUSH
23287: LD_INT 2
23289: PUSH
23290: LD_INT 30
23292: PUSH
23293: LD_INT 4
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 30
23302: PUSH
23303: LD_INT 5
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 30
23312: PUSH
23313: LD_INT 32
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: LD_INT 30
23322: PUSH
23323: LD_INT 31
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: LIST
23341: PPUSH
23342: CALL_OW 70
23346: ST_TO_ADDR
// if not tmp then
23347: LD_VAR 0 8
23351: NOT
23352: IFFALSE 23371
// begin ComMoveXY ( un , 83 , 133 ) ;
23354: LD_VAR 0 1
23358: PPUSH
23359: LD_INT 83
23361: PPUSH
23362: LD_INT 133
23364: PPUSH
23365: CALL_OW 111
// exit ;
23369: GO 23534
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
23371: LD_ADDR_VAR 0 6
23375: PUSH
23376: LD_VAR 0 1
23380: PPUSH
23381: LD_VAR 0 8
23385: PPUSH
23386: LD_INT 1
23388: PPUSH
23389: LD_INT 1
23391: PPUSH
23392: CALL 30052 0 4
23396: PUSH
23397: FOR_IN
23398: IFFALSE 23532
// begin case GetBType ( b ) of b_armoury , b_barracks :
23400: LD_VAR 0 6
23404: PPUSH
23405: CALL_OW 266
23409: PUSH
23410: LD_INT 4
23412: DOUBLE
23413: EQUAL
23414: IFTRUE 23424
23416: LD_INT 5
23418: DOUBLE
23419: EQUAL
23420: IFTRUE 23424
23422: GO 23435
23424: POP
// p := 6 ; b_breastwork , b_bunker :
23425: LD_ADDR_VAR 0 7
23429: PUSH
23430: LD_INT 6
23432: ST_TO_ADDR
23433: GO 23461
23435: LD_INT 31
23437: DOUBLE
23438: EQUAL
23439: IFTRUE 23449
23441: LD_INT 32
23443: DOUBLE
23444: EQUAL
23445: IFTRUE 23449
23447: GO 23460
23449: POP
// p := 1 ; end ;
23450: LD_ADDR_VAR 0 7
23454: PUSH
23455: LD_INT 1
23457: ST_TO_ADDR
23458: GO 23461
23460: POP
// if UnitsInside ( b ) < p then
23461: LD_VAR 0 6
23465: PPUSH
23466: CALL_OW 313
23470: PUSH
23471: LD_VAR 0 7
23475: LESS
23476: IFFALSE 23530
// begin ComEnterUnit ( un , b ) ;
23478: LD_VAR 0 1
23482: PPUSH
23483: LD_VAR 0 6
23487: PPUSH
23488: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
23492: LD_VAR 0 6
23496: PPUSH
23497: CALL_OW 266
23501: PUSH
23502: LD_INT 4
23504: PUSH
23505: LD_INT 5
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: IN
23512: IFFALSE 23526
// AddComChangeProfession ( un , class_soldier ) ;
23514: LD_VAR 0 1
23518: PPUSH
23519: LD_INT 1
23521: PPUSH
23522: CALL_OW 183
// exit ;
23526: POP
23527: POP
23528: GO 23534
// end ; end ;
23530: GO 23397
23532: POP
23533: POP
// end ; end ;
23534: PPOPN 8
23536: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
23537: LD_INT 0
23539: PPUSH
23540: PPUSH
23541: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
23542: LD_VAR 0 2
23546: PPUSH
23547: CALL_OW 255
23551: PUSH
23552: LD_INT 3
23554: EQUAL
23555: PUSH
23556: LD_VAR 0 2
23560: PPUSH
23561: CALL_OW 257
23565: PUSH
23566: LD_INT 1
23568: EQUAL
23569: AND
23570: PUSH
23571: LD_VAR 0 2
23575: PUSH
23576: LD_EXP 54
23580: IN
23581: NOT
23582: AND
23583: IFFALSE 23896
// begin ComMoveToArea ( un , ruMainBase ) ;
23585: LD_VAR 0 2
23589: PPUSH
23590: LD_INT 10
23592: PPUSH
23593: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
23597: LD_INT 35
23599: PPUSH
23600: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
23604: LD_VAR 0 2
23608: PPUSH
23609: CALL_OW 302
23613: NOT
23614: PUSH
23615: LD_VAR 0 2
23619: PPUSH
23620: LD_INT 10
23622: PPUSH
23623: CALL_OW 308
23627: OR
23628: IFFALSE 23597
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
23630: LD_ADDR_EXP 54
23634: PUSH
23635: LD_EXP 54
23639: PPUSH
23640: LD_EXP 54
23644: PUSH
23645: LD_INT 1
23647: PLUS
23648: PPUSH
23649: LD_VAR 0 2
23653: PPUSH
23654: CALL_OW 1
23658: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
23659: LD_ADDR_VAR 0 4
23663: PUSH
23664: LD_INT 10
23666: PPUSH
23667: LD_INT 22
23669: PUSH
23670: LD_INT 3
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 50
23679: PUSH
23680: EMPTY
23681: LIST
23682: PUSH
23683: LD_INT 2
23685: PUSH
23686: LD_INT 30
23688: PUSH
23689: LD_INT 4
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 30
23698: PUSH
23699: LD_INT 5
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 30
23708: PUSH
23709: LD_INT 32
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 30
23718: PUSH
23719: LD_INT 31
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: LIST
23737: PPUSH
23738: CALL_OW 70
23742: ST_TO_ADDR
// if not tmp then
23743: LD_VAR 0 4
23747: NOT
23748: IFFALSE 23767
// begin ComMoveXY ( un , 83 , 133 ) ;
23750: LD_VAR 0 2
23754: PPUSH
23755: LD_INT 83
23757: PPUSH
23758: LD_INT 133
23760: PPUSH
23761: CALL_OW 111
// exit ;
23765: GO 24145
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
23767: LD_ADDR_VAR 0 5
23771: PUSH
23772: LD_VAR 0 2
23776: PPUSH
23777: LD_VAR 0 4
23781: PPUSH
23782: LD_INT 1
23784: PPUSH
23785: LD_INT 1
23787: PPUSH
23788: CALL 30052 0 4
23792: PUSH
23793: FOR_IN
23794: IFFALSE 23894
// begin case GetBType ( b ) of b_armoury , b_barracks :
23796: LD_VAR 0 5
23800: PPUSH
23801: CALL_OW 266
23805: PUSH
23806: LD_INT 4
23808: DOUBLE
23809: EQUAL
23810: IFTRUE 23820
23812: LD_INT 5
23814: DOUBLE
23815: EQUAL
23816: IFTRUE 23820
23818: GO 23831
23820: POP
// p := 6 ; b_breastwork , b_bunker :
23821: LD_ADDR_VAR 0 3
23825: PUSH
23826: LD_INT 6
23828: ST_TO_ADDR
23829: GO 23857
23831: LD_INT 31
23833: DOUBLE
23834: EQUAL
23835: IFTRUE 23845
23837: LD_INT 32
23839: DOUBLE
23840: EQUAL
23841: IFTRUE 23845
23843: GO 23856
23845: POP
// p := 1 ; end ;
23846: LD_ADDR_VAR 0 3
23850: PUSH
23851: LD_INT 1
23853: ST_TO_ADDR
23854: GO 23857
23856: POP
// if UnitsInside ( b ) < p then
23857: LD_VAR 0 5
23861: PPUSH
23862: CALL_OW 313
23866: PUSH
23867: LD_VAR 0 3
23871: LESS
23872: IFFALSE 23892
// begin ComEnterUnit ( un , b ) ;
23874: LD_VAR 0 2
23878: PPUSH
23879: LD_VAR 0 5
23883: PPUSH
23884: CALL_OW 120
// exit ;
23888: POP
23889: POP
23890: GO 24145
// end ; end ;
23892: GO 23793
23894: POP
23895: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
23896: LD_VAR 0 2
23900: PUSH
23901: LD_EXP 54
23905: IN
23906: PUSH
23907: LD_VAR 0 2
23911: PPUSH
23912: CALL_OW 257
23916: PUSH
23917: LD_INT 1
23919: EQUAL
23920: AND
23921: IFFALSE 24145
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
23923: LD_ADDR_VAR 0 4
23927: PUSH
23928: LD_INT 10
23930: PPUSH
23931: LD_INT 22
23933: PUSH
23934: LD_INT 3
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 50
23943: PUSH
23944: EMPTY
23945: LIST
23946: PUSH
23947: LD_INT 2
23949: PUSH
23950: LD_INT 30
23952: PUSH
23953: LD_INT 4
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 30
23962: PUSH
23963: LD_INT 5
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 30
23972: PUSH
23973: LD_INT 32
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 30
23982: PUSH
23983: LD_INT 31
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: LIST
24001: PPUSH
24002: CALL_OW 70
24006: ST_TO_ADDR
// if not tmp then
24007: LD_VAR 0 4
24011: NOT
24012: IFFALSE 24016
// exit ;
24014: GO 24145
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
24016: LD_ADDR_VAR 0 5
24020: PUSH
24021: LD_VAR 0 2
24025: PPUSH
24026: LD_VAR 0 4
24030: PPUSH
24031: LD_INT 1
24033: PPUSH
24034: LD_INT 1
24036: PPUSH
24037: CALL 30052 0 4
24041: PUSH
24042: FOR_IN
24043: IFFALSE 24143
// begin case GetBType ( b ) of b_armoury , b_barracks :
24045: LD_VAR 0 5
24049: PPUSH
24050: CALL_OW 266
24054: PUSH
24055: LD_INT 4
24057: DOUBLE
24058: EQUAL
24059: IFTRUE 24069
24061: LD_INT 5
24063: DOUBLE
24064: EQUAL
24065: IFTRUE 24069
24067: GO 24080
24069: POP
// p := 6 ; b_breastwork , b_bunker :
24070: LD_ADDR_VAR 0 3
24074: PUSH
24075: LD_INT 6
24077: ST_TO_ADDR
24078: GO 24106
24080: LD_INT 31
24082: DOUBLE
24083: EQUAL
24084: IFTRUE 24094
24086: LD_INT 32
24088: DOUBLE
24089: EQUAL
24090: IFTRUE 24094
24092: GO 24105
24094: POP
// p := 1 ; end ;
24095: LD_ADDR_VAR 0 3
24099: PUSH
24100: LD_INT 1
24102: ST_TO_ADDR
24103: GO 24106
24105: POP
// if UnitsInside ( b ) < p then
24106: LD_VAR 0 5
24110: PPUSH
24111: CALL_OW 313
24115: PUSH
24116: LD_VAR 0 3
24120: LESS
24121: IFFALSE 24141
// begin ComEnterUnit ( un , b ) ;
24123: LD_VAR 0 2
24127: PPUSH
24128: LD_VAR 0 5
24132: PPUSH
24133: CALL_OW 120
// exit ;
24137: POP
24138: POP
24139: GO 24145
// end ; end ;
24141: GO 24042
24143: POP
24144: POP
// end ; end ;
24145: PPOPN 5
24147: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
24148: LD_VAR 0 1
24152: PUSH
24153: LD_INT 2
24155: EQUAL
24156: PUSH
24157: LD_VAR 0 2
24161: PUSH
24162: LD_INT 5
24164: PUSH
24165: LD_INT 8
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: IN
24172: AND
24173: IFFALSE 24182
// YouLost ( FriendlyFire ) ;
24175: LD_STRING FriendlyFire
24177: PPUSH
24178: CALL_OW 104
// end ;
24182: PPOPN 2
24184: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
24185: LD_VAR 0 1
24189: PPUSH
24190: CALL_OW 255
24194: PUSH
24195: LD_INT 8
24197: EQUAL
24198: PUSH
24199: LD_VAR 0 1
24203: PPUSH
24204: CALL_OW 266
24208: PUSH
24209: LD_INT 5
24211: EQUAL
24212: AND
24213: IFFALSE 24227
// SetClass ( unit , class_mortar ) ;
24215: LD_VAR 0 2
24219: PPUSH
24220: LD_INT 8
24222: PPUSH
24223: CALL_OW 336
// end ; end_of_file
24227: PPOPN 2
24229: END
// every 0 0$30 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 300 , 250 , 200 ] [ Difficulty ] do
24230: LD_INT 6
24232: PPUSH
24233: LD_INT 1
24235: PPUSH
24236: CALL_OW 287
24240: PUSH
24241: LD_INT 300
24243: PUSH
24244: LD_INT 250
24246: PUSH
24247: LD_INT 200
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: LIST
24254: PUSH
24255: LD_OWVAR 67
24259: ARRAY
24260: LESS
24261: IFFALSE 24288
24263: GO 24265
24265: DISABLE
// begin enable ;
24266: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
24267: LD_INT 1
24269: PPUSH
24270: LD_INT 5
24272: PPUSH
24273: CALL_OW 12
24277: PPUSH
24278: LD_INT 6
24280: PPUSH
24281: LD_INT 1
24283: PPUSH
24284: CALL_OW 55
// end ; end_of_file
24288: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
24289: LD_EXP 18
24293: PUSH
24294: LD_EXP 20
24298: AND
24299: PUSH
24300: LD_EXP 17
24304: PUSH
24305: LD_EXP 19
24309: AND
24310: OR
24311: IFFALSE 24630
24313: GO 24315
24315: DISABLE
// begin enable ;
24316: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
24317: LD_EXP 18
24321: PUSH
24322: LD_EXP 20
24326: AND
24327: PUSH
24328: LD_EXP 17
24332: PUSH
24333: LD_EXP 19
24337: AND
24338: AND
24339: IFFALSE 24476
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
24341: LD_ADDR_OWVAR 47
24345: PUSH
24346: LD_STRING #X106-1a
24348: PUSH
24349: LD_EXP 21
24353: PUSH
24354: LD_INT 16
24356: PPUSH
24357: LD_INT 22
24359: PUSH
24360: LD_INT 2
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: LD_INT 21
24369: PUSH
24370: LD_INT 2
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: LD_INT 33
24379: PUSH
24380: LD_INT 1
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 58
24389: PUSH
24390: EMPTY
24391: LIST
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: PPUSH
24399: CALL_OW 70
24403: MINUS
24404: PPUSH
24405: CALL 63345 0 1
24409: PUSH
24410: LD_STRING #X106-3a
24412: PUSH
24413: LD_EXP 20
24417: PUSH
24418: LD_STRING #X106-1
24420: PUSH
24421: LD_EXP 46
24425: PUSH
24426: LD_INT 0
24428: PLUS
24429: PUSH
24430: LD_EXP 46
24434: PPUSH
24435: LD_INT 55
24437: PUSH
24438: EMPTY
24439: LIST
24440: PPUSH
24441: CALL_OW 72
24445: PUSH
24446: LD_INT 0
24448: PLUS
24449: MINUS
24450: PPUSH
24451: CALL 63345 0 1
24455: PUSH
24456: LD_STRING #X106-3
24458: PUSH
24459: LD_EXP 19
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: ST_TO_ADDR
// end else
24474: GO 24630
// if omarWantVehicles and omarWaitingForVehiclesTimer then
24476: LD_EXP 18
24480: PUSH
24481: LD_EXP 20
24485: AND
24486: IFFALSE 24573
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
24488: LD_ADDR_OWVAR 47
24492: PUSH
24493: LD_STRING #X106-1a
24495: PUSH
24496: LD_EXP 21
24500: PUSH
24501: LD_INT 16
24503: PPUSH
24504: LD_INT 22
24506: PUSH
24507: LD_INT 2
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 21
24516: PUSH
24517: LD_INT 2
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 33
24526: PUSH
24527: LD_INT 1
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 58
24536: PUSH
24537: EMPTY
24538: LIST
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: PPUSH
24546: CALL_OW 70
24550: MINUS
24551: PPUSH
24552: CALL 63345 0 1
24556: PUSH
24557: LD_STRING #X106-3a
24559: PUSH
24560: LD_EXP 20
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: ST_TO_ADDR
// end else
24571: GO 24630
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
24573: LD_ADDR_OWVAR 47
24577: PUSH
24578: LD_STRING #X106-1
24580: PUSH
24581: LD_EXP 46
24585: PUSH
24586: LD_INT 0
24588: PLUS
24589: PUSH
24590: LD_EXP 46
24594: PPUSH
24595: LD_INT 55
24597: PUSH
24598: EMPTY
24599: LIST
24600: PPUSH
24601: CALL_OW 72
24605: PUSH
24606: LD_INT 0
24608: PLUS
24609: MINUS
24610: PPUSH
24611: CALL 63345 0 1
24615: PUSH
24616: LD_STRING #X106-3
24618: PUSH
24619: LD_EXP 19
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: ST_TO_ADDR
// end ; end ; end_of_file
24630: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24631: LD_INT 0
24633: PPUSH
24634: PPUSH
// if exist_mode then
24635: LD_VAR 0 2
24639: IFFALSE 24664
// unit := CreateCharacter ( prefix & ident ) else
24641: LD_ADDR_VAR 0 5
24645: PUSH
24646: LD_VAR 0 3
24650: PUSH
24651: LD_VAR 0 1
24655: STR
24656: PPUSH
24657: CALL_OW 34
24661: ST_TO_ADDR
24662: GO 24679
// unit := NewCharacter ( ident ) ;
24664: LD_ADDR_VAR 0 5
24668: PUSH
24669: LD_VAR 0 1
24673: PPUSH
24674: CALL_OW 25
24678: ST_TO_ADDR
// result := unit ;
24679: LD_ADDR_VAR 0 4
24683: PUSH
24684: LD_VAR 0 5
24688: ST_TO_ADDR
// end ;
24689: LD_VAR 0 4
24693: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24694: LD_INT 0
24696: PPUSH
24697: PPUSH
// if not side or not nation then
24698: LD_VAR 0 1
24702: NOT
24703: PUSH
24704: LD_VAR 0 2
24708: NOT
24709: OR
24710: IFFALSE 24714
// exit ;
24712: GO 25482
// case nation of nation_american :
24714: LD_VAR 0 2
24718: PUSH
24719: LD_INT 1
24721: DOUBLE
24722: EQUAL
24723: IFTRUE 24727
24725: GO 24941
24727: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24728: LD_ADDR_VAR 0 4
24732: PUSH
24733: LD_INT 35
24735: PUSH
24736: LD_INT 45
24738: PUSH
24739: LD_INT 46
24741: PUSH
24742: LD_INT 47
24744: PUSH
24745: LD_INT 82
24747: PUSH
24748: LD_INT 83
24750: PUSH
24751: LD_INT 84
24753: PUSH
24754: LD_INT 85
24756: PUSH
24757: LD_INT 86
24759: PUSH
24760: LD_INT 1
24762: PUSH
24763: LD_INT 2
24765: PUSH
24766: LD_INT 6
24768: PUSH
24769: LD_INT 15
24771: PUSH
24772: LD_INT 16
24774: PUSH
24775: LD_INT 7
24777: PUSH
24778: LD_INT 12
24780: PUSH
24781: LD_INT 13
24783: PUSH
24784: LD_INT 10
24786: PUSH
24787: LD_INT 14
24789: PUSH
24790: LD_INT 20
24792: PUSH
24793: LD_INT 21
24795: PUSH
24796: LD_INT 22
24798: PUSH
24799: LD_INT 25
24801: PUSH
24802: LD_INT 32
24804: PUSH
24805: LD_INT 27
24807: PUSH
24808: LD_INT 36
24810: PUSH
24811: LD_INT 69
24813: PUSH
24814: LD_INT 39
24816: PUSH
24817: LD_INT 34
24819: PUSH
24820: LD_INT 40
24822: PUSH
24823: LD_INT 48
24825: PUSH
24826: LD_INT 49
24828: PUSH
24829: LD_INT 50
24831: PUSH
24832: LD_INT 51
24834: PUSH
24835: LD_INT 52
24837: PUSH
24838: LD_INT 53
24840: PUSH
24841: LD_INT 54
24843: PUSH
24844: LD_INT 55
24846: PUSH
24847: LD_INT 56
24849: PUSH
24850: LD_INT 57
24852: PUSH
24853: LD_INT 58
24855: PUSH
24856: LD_INT 59
24858: PUSH
24859: LD_INT 60
24861: PUSH
24862: LD_INT 61
24864: PUSH
24865: LD_INT 62
24867: PUSH
24868: LD_INT 80
24870: PUSH
24871: LD_INT 82
24873: PUSH
24874: LD_INT 83
24876: PUSH
24877: LD_INT 84
24879: PUSH
24880: LD_INT 85
24882: PUSH
24883: LD_INT 86
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: ST_TO_ADDR
24939: GO 25406
24941: LD_INT 2
24943: DOUBLE
24944: EQUAL
24945: IFTRUE 24949
24947: GO 25175
24949: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24950: LD_ADDR_VAR 0 4
24954: PUSH
24955: LD_INT 35
24957: PUSH
24958: LD_INT 45
24960: PUSH
24961: LD_INT 46
24963: PUSH
24964: LD_INT 47
24966: PUSH
24967: LD_INT 82
24969: PUSH
24970: LD_INT 83
24972: PUSH
24973: LD_INT 84
24975: PUSH
24976: LD_INT 85
24978: PUSH
24979: LD_INT 87
24981: PUSH
24982: LD_INT 70
24984: PUSH
24985: LD_INT 1
24987: PUSH
24988: LD_INT 11
24990: PUSH
24991: LD_INT 3
24993: PUSH
24994: LD_INT 4
24996: PUSH
24997: LD_INT 5
24999: PUSH
25000: LD_INT 6
25002: PUSH
25003: LD_INT 15
25005: PUSH
25006: LD_INT 18
25008: PUSH
25009: LD_INT 7
25011: PUSH
25012: LD_INT 17
25014: PUSH
25015: LD_INT 8
25017: PUSH
25018: LD_INT 20
25020: PUSH
25021: LD_INT 21
25023: PUSH
25024: LD_INT 22
25026: PUSH
25027: LD_INT 72
25029: PUSH
25030: LD_INT 26
25032: PUSH
25033: LD_INT 69
25035: PUSH
25036: LD_INT 39
25038: PUSH
25039: LD_INT 40
25041: PUSH
25042: LD_INT 41
25044: PUSH
25045: LD_INT 42
25047: PUSH
25048: LD_INT 43
25050: PUSH
25051: LD_INT 48
25053: PUSH
25054: LD_INT 49
25056: PUSH
25057: LD_INT 50
25059: PUSH
25060: LD_INT 51
25062: PUSH
25063: LD_INT 52
25065: PUSH
25066: LD_INT 53
25068: PUSH
25069: LD_INT 54
25071: PUSH
25072: LD_INT 55
25074: PUSH
25075: LD_INT 56
25077: PUSH
25078: LD_INT 60
25080: PUSH
25081: LD_INT 61
25083: PUSH
25084: LD_INT 62
25086: PUSH
25087: LD_INT 66
25089: PUSH
25090: LD_INT 67
25092: PUSH
25093: LD_INT 68
25095: PUSH
25096: LD_INT 81
25098: PUSH
25099: LD_INT 82
25101: PUSH
25102: LD_INT 83
25104: PUSH
25105: LD_INT 84
25107: PUSH
25108: LD_INT 85
25110: PUSH
25111: LD_INT 87
25113: PUSH
25114: LD_INT 88
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: ST_TO_ADDR
25173: GO 25406
25175: LD_INT 3
25177: DOUBLE
25178: EQUAL
25179: IFTRUE 25183
25181: GO 25405
25183: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25184: LD_ADDR_VAR 0 4
25188: PUSH
25189: LD_INT 46
25191: PUSH
25192: LD_INT 47
25194: PUSH
25195: LD_INT 1
25197: PUSH
25198: LD_INT 2
25200: PUSH
25201: LD_INT 82
25203: PUSH
25204: LD_INT 83
25206: PUSH
25207: LD_INT 84
25209: PUSH
25210: LD_INT 85
25212: PUSH
25213: LD_INT 86
25215: PUSH
25216: LD_INT 11
25218: PUSH
25219: LD_INT 9
25221: PUSH
25222: LD_INT 20
25224: PUSH
25225: LD_INT 19
25227: PUSH
25228: LD_INT 21
25230: PUSH
25231: LD_INT 24
25233: PUSH
25234: LD_INT 22
25236: PUSH
25237: LD_INT 25
25239: PUSH
25240: LD_INT 28
25242: PUSH
25243: LD_INT 29
25245: PUSH
25246: LD_INT 30
25248: PUSH
25249: LD_INT 31
25251: PUSH
25252: LD_INT 37
25254: PUSH
25255: LD_INT 38
25257: PUSH
25258: LD_INT 32
25260: PUSH
25261: LD_INT 27
25263: PUSH
25264: LD_INT 33
25266: PUSH
25267: LD_INT 69
25269: PUSH
25270: LD_INT 39
25272: PUSH
25273: LD_INT 34
25275: PUSH
25276: LD_INT 40
25278: PUSH
25279: LD_INT 71
25281: PUSH
25282: LD_INT 23
25284: PUSH
25285: LD_INT 44
25287: PUSH
25288: LD_INT 48
25290: PUSH
25291: LD_INT 49
25293: PUSH
25294: LD_INT 50
25296: PUSH
25297: LD_INT 51
25299: PUSH
25300: LD_INT 52
25302: PUSH
25303: LD_INT 53
25305: PUSH
25306: LD_INT 54
25308: PUSH
25309: LD_INT 55
25311: PUSH
25312: LD_INT 56
25314: PUSH
25315: LD_INT 57
25317: PUSH
25318: LD_INT 58
25320: PUSH
25321: LD_INT 59
25323: PUSH
25324: LD_INT 63
25326: PUSH
25327: LD_INT 64
25329: PUSH
25330: LD_INT 65
25332: PUSH
25333: LD_INT 82
25335: PUSH
25336: LD_INT 83
25338: PUSH
25339: LD_INT 84
25341: PUSH
25342: LD_INT 85
25344: PUSH
25345: LD_INT 86
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: ST_TO_ADDR
25403: GO 25406
25405: POP
// if state > - 1 and state < 3 then
25406: LD_VAR 0 3
25410: PUSH
25411: LD_INT 1
25413: NEG
25414: GREATER
25415: PUSH
25416: LD_VAR 0 3
25420: PUSH
25421: LD_INT 3
25423: LESS
25424: AND
25425: IFFALSE 25482
// for i in result do
25427: LD_ADDR_VAR 0 5
25431: PUSH
25432: LD_VAR 0 4
25436: PUSH
25437: FOR_IN
25438: IFFALSE 25480
// if GetTech ( i , side ) <> state then
25440: LD_VAR 0 5
25444: PPUSH
25445: LD_VAR 0 1
25449: PPUSH
25450: CALL_OW 321
25454: PUSH
25455: LD_VAR 0 3
25459: NONEQUAL
25460: IFFALSE 25478
// result := result diff i ;
25462: LD_ADDR_VAR 0 4
25466: PUSH
25467: LD_VAR 0 4
25471: PUSH
25472: LD_VAR 0 5
25476: DIFF
25477: ST_TO_ADDR
25478: GO 25437
25480: POP
25481: POP
// end ;
25482: LD_VAR 0 4
25486: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25487: LD_INT 0
25489: PPUSH
25490: PPUSH
25491: PPUSH
// result := true ;
25492: LD_ADDR_VAR 0 3
25496: PUSH
25497: LD_INT 1
25499: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25500: LD_ADDR_VAR 0 5
25504: PUSH
25505: LD_VAR 0 2
25509: PPUSH
25510: CALL_OW 480
25514: ST_TO_ADDR
// if not tmp then
25515: LD_VAR 0 5
25519: NOT
25520: IFFALSE 25524
// exit ;
25522: GO 25573
// for i in tmp do
25524: LD_ADDR_VAR 0 4
25528: PUSH
25529: LD_VAR 0 5
25533: PUSH
25534: FOR_IN
25535: IFFALSE 25571
// if GetTech ( i , side ) <> state_researched then
25537: LD_VAR 0 4
25541: PPUSH
25542: LD_VAR 0 1
25546: PPUSH
25547: CALL_OW 321
25551: PUSH
25552: LD_INT 2
25554: NONEQUAL
25555: IFFALSE 25569
// begin result := false ;
25557: LD_ADDR_VAR 0 3
25561: PUSH
25562: LD_INT 0
25564: ST_TO_ADDR
// exit ;
25565: POP
25566: POP
25567: GO 25573
// end ;
25569: GO 25534
25571: POP
25572: POP
// end ;
25573: LD_VAR 0 3
25577: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25578: LD_INT 0
25580: PPUSH
25581: PPUSH
25582: PPUSH
25583: PPUSH
25584: PPUSH
25585: PPUSH
25586: PPUSH
25587: PPUSH
25588: PPUSH
25589: PPUSH
25590: PPUSH
25591: PPUSH
25592: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25593: LD_VAR 0 1
25597: NOT
25598: PUSH
25599: LD_VAR 0 1
25603: PPUSH
25604: CALL_OW 257
25608: PUSH
25609: LD_INT 9
25611: NONEQUAL
25612: OR
25613: IFFALSE 25617
// exit ;
25615: GO 26190
// side := GetSide ( unit ) ;
25617: LD_ADDR_VAR 0 9
25621: PUSH
25622: LD_VAR 0 1
25626: PPUSH
25627: CALL_OW 255
25631: ST_TO_ADDR
// tech_space := tech_spacanom ;
25632: LD_ADDR_VAR 0 12
25636: PUSH
25637: LD_INT 29
25639: ST_TO_ADDR
// tech_time := tech_taurad ;
25640: LD_ADDR_VAR 0 13
25644: PUSH
25645: LD_INT 28
25647: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25648: LD_ADDR_VAR 0 11
25652: PUSH
25653: LD_VAR 0 1
25657: PPUSH
25658: CALL_OW 310
25662: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25663: LD_VAR 0 11
25667: PPUSH
25668: CALL_OW 247
25672: PUSH
25673: LD_INT 2
25675: EQUAL
25676: IFFALSE 25680
// exit ;
25678: GO 26190
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25680: LD_ADDR_VAR 0 8
25684: PUSH
25685: LD_INT 81
25687: PUSH
25688: LD_VAR 0 9
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 3
25699: PUSH
25700: LD_INT 21
25702: PUSH
25703: LD_INT 3
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PPUSH
25718: CALL_OW 69
25722: ST_TO_ADDR
// if not tmp then
25723: LD_VAR 0 8
25727: NOT
25728: IFFALSE 25732
// exit ;
25730: GO 26190
// if in_unit then
25732: LD_VAR 0 11
25736: IFFALSE 25760
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25738: LD_ADDR_VAR 0 10
25742: PUSH
25743: LD_VAR 0 8
25747: PPUSH
25748: LD_VAR 0 11
25752: PPUSH
25753: CALL_OW 74
25757: ST_TO_ADDR
25758: GO 25780
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25760: LD_ADDR_VAR 0 10
25764: PUSH
25765: LD_VAR 0 8
25769: PPUSH
25770: LD_VAR 0 1
25774: PPUSH
25775: CALL_OW 74
25779: ST_TO_ADDR
// if not enemy then
25780: LD_VAR 0 10
25784: NOT
25785: IFFALSE 25789
// exit ;
25787: GO 26190
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25789: LD_VAR 0 11
25793: PUSH
25794: LD_VAR 0 11
25798: PPUSH
25799: LD_VAR 0 10
25803: PPUSH
25804: CALL_OW 296
25808: PUSH
25809: LD_INT 13
25811: GREATER
25812: AND
25813: PUSH
25814: LD_VAR 0 1
25818: PPUSH
25819: LD_VAR 0 10
25823: PPUSH
25824: CALL_OW 296
25828: PUSH
25829: LD_INT 12
25831: GREATER
25832: OR
25833: IFFALSE 25837
// exit ;
25835: GO 26190
// missile := [ 1 ] ;
25837: LD_ADDR_VAR 0 14
25841: PUSH
25842: LD_INT 1
25844: PUSH
25845: EMPTY
25846: LIST
25847: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25848: LD_VAR 0 9
25852: PPUSH
25853: LD_VAR 0 12
25857: PPUSH
25858: CALL_OW 325
25862: IFFALSE 25891
// missile := Insert ( missile , missile + 1 , 2 ) ;
25864: LD_ADDR_VAR 0 14
25868: PUSH
25869: LD_VAR 0 14
25873: PPUSH
25874: LD_VAR 0 14
25878: PUSH
25879: LD_INT 1
25881: PLUS
25882: PPUSH
25883: LD_INT 2
25885: PPUSH
25886: CALL_OW 2
25890: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25891: LD_VAR 0 9
25895: PPUSH
25896: LD_VAR 0 13
25900: PPUSH
25901: CALL_OW 325
25905: PUSH
25906: LD_VAR 0 10
25910: PPUSH
25911: CALL_OW 255
25915: PPUSH
25916: LD_VAR 0 13
25920: PPUSH
25921: CALL_OW 325
25925: NOT
25926: AND
25927: IFFALSE 25956
// missile := Insert ( missile , missile + 1 , 3 ) ;
25929: LD_ADDR_VAR 0 14
25933: PUSH
25934: LD_VAR 0 14
25938: PPUSH
25939: LD_VAR 0 14
25943: PUSH
25944: LD_INT 1
25946: PLUS
25947: PPUSH
25948: LD_INT 3
25950: PPUSH
25951: CALL_OW 2
25955: ST_TO_ADDR
// if missile < 2 then
25956: LD_VAR 0 14
25960: PUSH
25961: LD_INT 2
25963: LESS
25964: IFFALSE 25968
// exit ;
25966: GO 26190
// x := GetX ( enemy ) ;
25968: LD_ADDR_VAR 0 4
25972: PUSH
25973: LD_VAR 0 10
25977: PPUSH
25978: CALL_OW 250
25982: ST_TO_ADDR
// y := GetY ( enemy ) ;
25983: LD_ADDR_VAR 0 5
25987: PUSH
25988: LD_VAR 0 10
25992: PPUSH
25993: CALL_OW 251
25997: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25998: LD_ADDR_VAR 0 6
26002: PUSH
26003: LD_VAR 0 4
26007: PUSH
26008: LD_INT 1
26010: NEG
26011: PPUSH
26012: LD_INT 1
26014: PPUSH
26015: CALL_OW 12
26019: PLUS
26020: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26021: LD_ADDR_VAR 0 7
26025: PUSH
26026: LD_VAR 0 5
26030: PUSH
26031: LD_INT 1
26033: NEG
26034: PPUSH
26035: LD_INT 1
26037: PPUSH
26038: CALL_OW 12
26042: PLUS
26043: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26044: LD_VAR 0 6
26048: PPUSH
26049: LD_VAR 0 7
26053: PPUSH
26054: CALL_OW 488
26058: NOT
26059: IFFALSE 26081
// begin _x := x ;
26061: LD_ADDR_VAR 0 6
26065: PUSH
26066: LD_VAR 0 4
26070: ST_TO_ADDR
// _y := y ;
26071: LD_ADDR_VAR 0 7
26075: PUSH
26076: LD_VAR 0 5
26080: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26081: LD_ADDR_VAR 0 3
26085: PUSH
26086: LD_INT 1
26088: PPUSH
26089: LD_VAR 0 14
26093: PPUSH
26094: CALL_OW 12
26098: ST_TO_ADDR
// case i of 1 :
26099: LD_VAR 0 3
26103: PUSH
26104: LD_INT 1
26106: DOUBLE
26107: EQUAL
26108: IFTRUE 26112
26110: GO 26129
26112: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26113: LD_VAR 0 1
26117: PPUSH
26118: LD_VAR 0 10
26122: PPUSH
26123: CALL_OW 115
26127: GO 26190
26129: LD_INT 2
26131: DOUBLE
26132: EQUAL
26133: IFTRUE 26137
26135: GO 26159
26137: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26138: LD_VAR 0 1
26142: PPUSH
26143: LD_VAR 0 6
26147: PPUSH
26148: LD_VAR 0 7
26152: PPUSH
26153: CALL_OW 153
26157: GO 26190
26159: LD_INT 3
26161: DOUBLE
26162: EQUAL
26163: IFTRUE 26167
26165: GO 26189
26167: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26168: LD_VAR 0 1
26172: PPUSH
26173: LD_VAR 0 6
26177: PPUSH
26178: LD_VAR 0 7
26182: PPUSH
26183: CALL_OW 154
26187: GO 26190
26189: POP
// end ;
26190: LD_VAR 0 2
26194: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26195: LD_INT 0
26197: PPUSH
26198: PPUSH
26199: PPUSH
26200: PPUSH
26201: PPUSH
26202: PPUSH
// if not unit or not building then
26203: LD_VAR 0 1
26207: NOT
26208: PUSH
26209: LD_VAR 0 2
26213: NOT
26214: OR
26215: IFFALSE 26219
// exit ;
26217: GO 26377
// x := GetX ( building ) ;
26219: LD_ADDR_VAR 0 5
26223: PUSH
26224: LD_VAR 0 2
26228: PPUSH
26229: CALL_OW 250
26233: ST_TO_ADDR
// y := GetY ( building ) ;
26234: LD_ADDR_VAR 0 6
26238: PUSH
26239: LD_VAR 0 2
26243: PPUSH
26244: CALL_OW 251
26248: ST_TO_ADDR
// for i = 0 to 5 do
26249: LD_ADDR_VAR 0 4
26253: PUSH
26254: DOUBLE
26255: LD_INT 0
26257: DEC
26258: ST_TO_ADDR
26259: LD_INT 5
26261: PUSH
26262: FOR_TO
26263: IFFALSE 26375
// begin _x := ShiftX ( x , i , 3 ) ;
26265: LD_ADDR_VAR 0 7
26269: PUSH
26270: LD_VAR 0 5
26274: PPUSH
26275: LD_VAR 0 4
26279: PPUSH
26280: LD_INT 3
26282: PPUSH
26283: CALL_OW 272
26287: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26288: LD_ADDR_VAR 0 8
26292: PUSH
26293: LD_VAR 0 6
26297: PPUSH
26298: LD_VAR 0 4
26302: PPUSH
26303: LD_INT 3
26305: PPUSH
26306: CALL_OW 273
26310: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26311: LD_VAR 0 7
26315: PPUSH
26316: LD_VAR 0 8
26320: PPUSH
26321: CALL_OW 488
26325: NOT
26326: IFFALSE 26330
// continue ;
26328: GO 26262
// if HexInfo ( _x , _y ) = 0 then
26330: LD_VAR 0 7
26334: PPUSH
26335: LD_VAR 0 8
26339: PPUSH
26340: CALL_OW 428
26344: PUSH
26345: LD_INT 0
26347: EQUAL
26348: IFFALSE 26373
// begin ComMoveXY ( unit , _x , _y ) ;
26350: LD_VAR 0 1
26354: PPUSH
26355: LD_VAR 0 7
26359: PPUSH
26360: LD_VAR 0 8
26364: PPUSH
26365: CALL_OW 111
// exit ;
26369: POP
26370: POP
26371: GO 26377
// end ; end ;
26373: GO 26262
26375: POP
26376: POP
// end ;
26377: LD_VAR 0 3
26381: RET
// export function ScanBase ( side , base_area ) ; begin
26382: LD_INT 0
26384: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26385: LD_ADDR_VAR 0 3
26389: PUSH
26390: LD_VAR 0 2
26394: PPUSH
26395: LD_INT 81
26397: PUSH
26398: LD_VAR 0 1
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PPUSH
26407: CALL_OW 70
26411: ST_TO_ADDR
// end ;
26412: LD_VAR 0 3
26416: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26417: LD_INT 0
26419: PPUSH
26420: PPUSH
26421: PPUSH
26422: PPUSH
// result := false ;
26423: LD_ADDR_VAR 0 2
26427: PUSH
26428: LD_INT 0
26430: ST_TO_ADDR
// side := GetSide ( unit ) ;
26431: LD_ADDR_VAR 0 3
26435: PUSH
26436: LD_VAR 0 1
26440: PPUSH
26441: CALL_OW 255
26445: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26446: LD_ADDR_VAR 0 4
26450: PUSH
26451: LD_VAR 0 1
26455: PPUSH
26456: CALL_OW 248
26460: ST_TO_ADDR
// case nat of 1 :
26461: LD_VAR 0 4
26465: PUSH
26466: LD_INT 1
26468: DOUBLE
26469: EQUAL
26470: IFTRUE 26474
26472: GO 26485
26474: POP
// tech := tech_lassight ; 2 :
26475: LD_ADDR_VAR 0 5
26479: PUSH
26480: LD_INT 12
26482: ST_TO_ADDR
26483: GO 26524
26485: LD_INT 2
26487: DOUBLE
26488: EQUAL
26489: IFTRUE 26493
26491: GO 26504
26493: POP
// tech := tech_mortar ; 3 :
26494: LD_ADDR_VAR 0 5
26498: PUSH
26499: LD_INT 41
26501: ST_TO_ADDR
26502: GO 26524
26504: LD_INT 3
26506: DOUBLE
26507: EQUAL
26508: IFTRUE 26512
26510: GO 26523
26512: POP
// tech := tech_bazooka ; end ;
26513: LD_ADDR_VAR 0 5
26517: PUSH
26518: LD_INT 44
26520: ST_TO_ADDR
26521: GO 26524
26523: POP
// if Researched ( side , tech ) then
26524: LD_VAR 0 3
26528: PPUSH
26529: LD_VAR 0 5
26533: PPUSH
26534: CALL_OW 325
26538: IFFALSE 26565
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26540: LD_ADDR_VAR 0 2
26544: PUSH
26545: LD_INT 5
26547: PUSH
26548: LD_INT 8
26550: PUSH
26551: LD_INT 9
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: LIST
26558: PUSH
26559: LD_VAR 0 4
26563: ARRAY
26564: ST_TO_ADDR
// end ;
26565: LD_VAR 0 2
26569: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26570: LD_INT 0
26572: PPUSH
26573: PPUSH
26574: PPUSH
// if not mines then
26575: LD_VAR 0 2
26579: NOT
26580: IFFALSE 26584
// exit ;
26582: GO 26728
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26584: LD_ADDR_VAR 0 5
26588: PUSH
26589: LD_INT 81
26591: PUSH
26592: LD_VAR 0 1
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 3
26603: PUSH
26604: LD_INT 21
26606: PUSH
26607: LD_INT 3
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PPUSH
26622: CALL_OW 69
26626: ST_TO_ADDR
// for i in mines do
26627: LD_ADDR_VAR 0 4
26631: PUSH
26632: LD_VAR 0 2
26636: PUSH
26637: FOR_IN
26638: IFFALSE 26726
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26640: LD_VAR 0 4
26644: PUSH
26645: LD_INT 1
26647: ARRAY
26648: PPUSH
26649: LD_VAR 0 4
26653: PUSH
26654: LD_INT 2
26656: ARRAY
26657: PPUSH
26658: CALL_OW 458
26662: NOT
26663: IFFALSE 26667
// continue ;
26665: GO 26637
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26667: LD_VAR 0 4
26671: PUSH
26672: LD_INT 1
26674: ARRAY
26675: PPUSH
26676: LD_VAR 0 4
26680: PUSH
26681: LD_INT 2
26683: ARRAY
26684: PPUSH
26685: CALL_OW 428
26689: PUSH
26690: LD_VAR 0 5
26694: IN
26695: IFFALSE 26724
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26697: LD_VAR 0 4
26701: PUSH
26702: LD_INT 1
26704: ARRAY
26705: PPUSH
26706: LD_VAR 0 4
26710: PUSH
26711: LD_INT 2
26713: ARRAY
26714: PPUSH
26715: LD_VAR 0 1
26719: PPUSH
26720: CALL_OW 456
// end ;
26724: GO 26637
26726: POP
26727: POP
// end ;
26728: LD_VAR 0 3
26732: RET
// export function Count ( array ) ; var i ; begin
26733: LD_INT 0
26735: PPUSH
26736: PPUSH
// result := 0 ;
26737: LD_ADDR_VAR 0 2
26741: PUSH
26742: LD_INT 0
26744: ST_TO_ADDR
// for i in array do
26745: LD_ADDR_VAR 0 3
26749: PUSH
26750: LD_VAR 0 1
26754: PUSH
26755: FOR_IN
26756: IFFALSE 26780
// if i then
26758: LD_VAR 0 3
26762: IFFALSE 26778
// result := result + 1 ;
26764: LD_ADDR_VAR 0 2
26768: PUSH
26769: LD_VAR 0 2
26773: PUSH
26774: LD_INT 1
26776: PLUS
26777: ST_TO_ADDR
26778: GO 26755
26780: POP
26781: POP
// end ;
26782: LD_VAR 0 2
26786: RET
// export function IsEmpty ( building ) ; begin
26787: LD_INT 0
26789: PPUSH
// if not building then
26790: LD_VAR 0 1
26794: NOT
26795: IFFALSE 26799
// exit ;
26797: GO 26842
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26799: LD_ADDR_VAR 0 2
26803: PUSH
26804: LD_VAR 0 1
26808: PUSH
26809: LD_INT 22
26811: PUSH
26812: LD_VAR 0 1
26816: PPUSH
26817: CALL_OW 255
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 58
26828: PUSH
26829: EMPTY
26830: LIST
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PPUSH
26836: CALL_OW 69
26840: IN
26841: ST_TO_ADDR
// end ;
26842: LD_VAR 0 2
26846: RET
// export function IsNotFull ( building ) ; begin
26847: LD_INT 0
26849: PPUSH
// if not building then
26850: LD_VAR 0 1
26854: NOT
26855: IFFALSE 26859
// exit ;
26857: GO 26878
// result := UnitsInside ( building ) < 6 ;
26859: LD_ADDR_VAR 0 2
26863: PUSH
26864: LD_VAR 0 1
26868: PPUSH
26869: CALL_OW 313
26873: PUSH
26874: LD_INT 6
26876: LESS
26877: ST_TO_ADDR
// end ;
26878: LD_VAR 0 2
26882: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26883: LD_INT 0
26885: PPUSH
26886: PPUSH
26887: PPUSH
26888: PPUSH
// tmp := [ ] ;
26889: LD_ADDR_VAR 0 3
26893: PUSH
26894: EMPTY
26895: ST_TO_ADDR
// list := [ ] ;
26896: LD_ADDR_VAR 0 5
26900: PUSH
26901: EMPTY
26902: ST_TO_ADDR
// for i = 16 to 25 do
26903: LD_ADDR_VAR 0 4
26907: PUSH
26908: DOUBLE
26909: LD_INT 16
26911: DEC
26912: ST_TO_ADDR
26913: LD_INT 25
26915: PUSH
26916: FOR_TO
26917: IFFALSE 26990
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26919: LD_ADDR_VAR 0 3
26923: PUSH
26924: LD_VAR 0 3
26928: PUSH
26929: LD_INT 22
26931: PUSH
26932: LD_VAR 0 1
26936: PPUSH
26937: CALL_OW 255
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 91
26948: PUSH
26949: LD_VAR 0 1
26953: PUSH
26954: LD_INT 6
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 30
26964: PUSH
26965: LD_VAR 0 4
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: LIST
26978: PUSH
26979: EMPTY
26980: LIST
26981: PPUSH
26982: CALL_OW 69
26986: ADD
26987: ST_TO_ADDR
26988: GO 26916
26990: POP
26991: POP
// for i = 1 to tmp do
26992: LD_ADDR_VAR 0 4
26996: PUSH
26997: DOUBLE
26998: LD_INT 1
27000: DEC
27001: ST_TO_ADDR
27002: LD_VAR 0 3
27006: PUSH
27007: FOR_TO
27008: IFFALSE 27096
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27010: LD_ADDR_VAR 0 5
27014: PUSH
27015: LD_VAR 0 5
27019: PUSH
27020: LD_VAR 0 3
27024: PUSH
27025: LD_VAR 0 4
27029: ARRAY
27030: PPUSH
27031: CALL_OW 266
27035: PUSH
27036: LD_VAR 0 3
27040: PUSH
27041: LD_VAR 0 4
27045: ARRAY
27046: PPUSH
27047: CALL_OW 250
27051: PUSH
27052: LD_VAR 0 3
27056: PUSH
27057: LD_VAR 0 4
27061: ARRAY
27062: PPUSH
27063: CALL_OW 251
27067: PUSH
27068: LD_VAR 0 3
27072: PUSH
27073: LD_VAR 0 4
27077: ARRAY
27078: PPUSH
27079: CALL_OW 254
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: PUSH
27090: EMPTY
27091: LIST
27092: ADD
27093: ST_TO_ADDR
27094: GO 27007
27096: POP
27097: POP
// result := list ;
27098: LD_ADDR_VAR 0 2
27102: PUSH
27103: LD_VAR 0 5
27107: ST_TO_ADDR
// end ;
27108: LD_VAR 0 2
27112: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27113: LD_INT 0
27115: PPUSH
27116: PPUSH
27117: PPUSH
27118: PPUSH
27119: PPUSH
27120: PPUSH
27121: PPUSH
// if not factory then
27122: LD_VAR 0 1
27126: NOT
27127: IFFALSE 27131
// exit ;
27129: GO 27724
// if control = control_apeman then
27131: LD_VAR 0 4
27135: PUSH
27136: LD_INT 5
27138: EQUAL
27139: IFFALSE 27248
// begin tmp := UnitsInside ( factory ) ;
27141: LD_ADDR_VAR 0 8
27145: PUSH
27146: LD_VAR 0 1
27150: PPUSH
27151: CALL_OW 313
27155: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27156: LD_VAR 0 8
27160: PPUSH
27161: LD_INT 25
27163: PUSH
27164: LD_INT 12
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PPUSH
27171: CALL_OW 72
27175: NOT
27176: IFFALSE 27186
// control := control_manual ;
27178: LD_ADDR_VAR 0 4
27182: PUSH
27183: LD_INT 1
27185: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27186: LD_ADDR_VAR 0 8
27190: PUSH
27191: LD_VAR 0 1
27195: PPUSH
27196: CALL 26883 0 1
27200: ST_TO_ADDR
// if tmp then
27201: LD_VAR 0 8
27205: IFFALSE 27248
// begin for i in tmp do
27207: LD_ADDR_VAR 0 7
27211: PUSH
27212: LD_VAR 0 8
27216: PUSH
27217: FOR_IN
27218: IFFALSE 27246
// if i [ 1 ] = b_ext_radio then
27220: LD_VAR 0 7
27224: PUSH
27225: LD_INT 1
27227: ARRAY
27228: PUSH
27229: LD_INT 22
27231: EQUAL
27232: IFFALSE 27244
// begin control := control_remote ;
27234: LD_ADDR_VAR 0 4
27238: PUSH
27239: LD_INT 2
27241: ST_TO_ADDR
// break ;
27242: GO 27246
// end ;
27244: GO 27217
27246: POP
27247: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27248: LD_VAR 0 1
27252: PPUSH
27253: LD_VAR 0 2
27257: PPUSH
27258: LD_VAR 0 3
27262: PPUSH
27263: LD_VAR 0 4
27267: PPUSH
27268: LD_VAR 0 5
27272: PPUSH
27273: CALL_OW 448
27277: IFFALSE 27312
// begin result := [ chassis , engine , control , weapon ] ;
27279: LD_ADDR_VAR 0 6
27283: PUSH
27284: LD_VAR 0 2
27288: PUSH
27289: LD_VAR 0 3
27293: PUSH
27294: LD_VAR 0 4
27298: PUSH
27299: LD_VAR 0 5
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: ST_TO_ADDR
// exit ;
27310: GO 27724
// end ; _chassis := AvailableChassisList ( factory ) ;
27312: LD_ADDR_VAR 0 9
27316: PUSH
27317: LD_VAR 0 1
27321: PPUSH
27322: CALL_OW 475
27326: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27327: LD_ADDR_VAR 0 11
27331: PUSH
27332: LD_VAR 0 1
27336: PPUSH
27337: CALL_OW 476
27341: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27342: LD_ADDR_VAR 0 12
27346: PUSH
27347: LD_VAR 0 1
27351: PPUSH
27352: CALL_OW 477
27356: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27357: LD_ADDR_VAR 0 10
27361: PUSH
27362: LD_VAR 0 1
27366: PPUSH
27367: CALL_OW 478
27371: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27372: LD_VAR 0 9
27376: NOT
27377: PUSH
27378: LD_VAR 0 11
27382: NOT
27383: OR
27384: PUSH
27385: LD_VAR 0 12
27389: NOT
27390: OR
27391: PUSH
27392: LD_VAR 0 10
27396: NOT
27397: OR
27398: IFFALSE 27433
// begin result := [ chassis , engine , control , weapon ] ;
27400: LD_ADDR_VAR 0 6
27404: PUSH
27405: LD_VAR 0 2
27409: PUSH
27410: LD_VAR 0 3
27414: PUSH
27415: LD_VAR 0 4
27419: PUSH
27420: LD_VAR 0 5
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: ST_TO_ADDR
// exit ;
27431: GO 27724
// end ; if not chassis in _chassis then
27433: LD_VAR 0 2
27437: PUSH
27438: LD_VAR 0 9
27442: IN
27443: NOT
27444: IFFALSE 27470
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27446: LD_ADDR_VAR 0 2
27450: PUSH
27451: LD_VAR 0 9
27455: PUSH
27456: LD_INT 1
27458: PPUSH
27459: LD_VAR 0 9
27463: PPUSH
27464: CALL_OW 12
27468: ARRAY
27469: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27470: LD_VAR 0 2
27474: PPUSH
27475: LD_VAR 0 3
27479: PPUSH
27480: CALL 27729 0 2
27484: NOT
27485: IFFALSE 27544
// repeat engine := _engine [ 1 ] ;
27487: LD_ADDR_VAR 0 3
27491: PUSH
27492: LD_VAR 0 11
27496: PUSH
27497: LD_INT 1
27499: ARRAY
27500: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27501: LD_ADDR_VAR 0 11
27505: PUSH
27506: LD_VAR 0 11
27510: PPUSH
27511: LD_INT 1
27513: PPUSH
27514: CALL_OW 3
27518: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27519: LD_VAR 0 2
27523: PPUSH
27524: LD_VAR 0 3
27528: PPUSH
27529: CALL 27729 0 2
27533: PUSH
27534: LD_VAR 0 11
27538: PUSH
27539: EMPTY
27540: EQUAL
27541: OR
27542: IFFALSE 27487
// if not control in _control then
27544: LD_VAR 0 4
27548: PUSH
27549: LD_VAR 0 12
27553: IN
27554: NOT
27555: IFFALSE 27581
// control := _control [ rand ( 1 , _control ) ] ;
27557: LD_ADDR_VAR 0 4
27561: PUSH
27562: LD_VAR 0 12
27566: PUSH
27567: LD_INT 1
27569: PPUSH
27570: LD_VAR 0 12
27574: PPUSH
27575: CALL_OW 12
27579: ARRAY
27580: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27581: LD_VAR 0 2
27585: PPUSH
27586: LD_VAR 0 5
27590: PPUSH
27591: CALL 27949 0 2
27595: NOT
27596: IFFALSE 27655
// repeat weapon := _weapon [ 1 ] ;
27598: LD_ADDR_VAR 0 5
27602: PUSH
27603: LD_VAR 0 10
27607: PUSH
27608: LD_INT 1
27610: ARRAY
27611: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27612: LD_ADDR_VAR 0 10
27616: PUSH
27617: LD_VAR 0 10
27621: PPUSH
27622: LD_INT 1
27624: PPUSH
27625: CALL_OW 3
27629: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27630: LD_VAR 0 2
27634: PPUSH
27635: LD_VAR 0 5
27639: PPUSH
27640: CALL 27949 0 2
27644: PUSH
27645: LD_VAR 0 10
27649: PUSH
27650: EMPTY
27651: EQUAL
27652: OR
27653: IFFALSE 27598
// result := [ ] ;
27655: LD_ADDR_VAR 0 6
27659: PUSH
27660: EMPTY
27661: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27662: LD_VAR 0 1
27666: PPUSH
27667: LD_VAR 0 2
27671: PPUSH
27672: LD_VAR 0 3
27676: PPUSH
27677: LD_VAR 0 4
27681: PPUSH
27682: LD_VAR 0 5
27686: PPUSH
27687: CALL_OW 448
27691: IFFALSE 27724
// result := [ chassis , engine , control , weapon ] ;
27693: LD_ADDR_VAR 0 6
27697: PUSH
27698: LD_VAR 0 2
27702: PUSH
27703: LD_VAR 0 3
27707: PUSH
27708: LD_VAR 0 4
27712: PUSH
27713: LD_VAR 0 5
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: ST_TO_ADDR
// end ;
27724: LD_VAR 0 6
27728: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27729: LD_INT 0
27731: PPUSH
// if not chassis or not engine then
27732: LD_VAR 0 1
27736: NOT
27737: PUSH
27738: LD_VAR 0 2
27742: NOT
27743: OR
27744: IFFALSE 27748
// exit ;
27746: GO 27944
// case engine of engine_solar :
27748: LD_VAR 0 2
27752: PUSH
27753: LD_INT 2
27755: DOUBLE
27756: EQUAL
27757: IFTRUE 27761
27759: GO 27799
27761: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27762: LD_ADDR_VAR 0 3
27766: PUSH
27767: LD_INT 11
27769: PUSH
27770: LD_INT 12
27772: PUSH
27773: LD_INT 13
27775: PUSH
27776: LD_INT 14
27778: PUSH
27779: LD_INT 1
27781: PUSH
27782: LD_INT 2
27784: PUSH
27785: LD_INT 3
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: ST_TO_ADDR
27797: GO 27928
27799: LD_INT 1
27801: DOUBLE
27802: EQUAL
27803: IFTRUE 27807
27805: GO 27869
27807: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27808: LD_ADDR_VAR 0 3
27812: PUSH
27813: LD_INT 11
27815: PUSH
27816: LD_INT 12
27818: PUSH
27819: LD_INT 13
27821: PUSH
27822: LD_INT 14
27824: PUSH
27825: LD_INT 1
27827: PUSH
27828: LD_INT 2
27830: PUSH
27831: LD_INT 3
27833: PUSH
27834: LD_INT 4
27836: PUSH
27837: LD_INT 5
27839: PUSH
27840: LD_INT 21
27842: PUSH
27843: LD_INT 23
27845: PUSH
27846: LD_INT 22
27848: PUSH
27849: LD_INT 24
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: ST_TO_ADDR
27867: GO 27928
27869: LD_INT 3
27871: DOUBLE
27872: EQUAL
27873: IFTRUE 27877
27875: GO 27927
27877: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27878: LD_ADDR_VAR 0 3
27882: PUSH
27883: LD_INT 13
27885: PUSH
27886: LD_INT 14
27888: PUSH
27889: LD_INT 2
27891: PUSH
27892: LD_INT 3
27894: PUSH
27895: LD_INT 4
27897: PUSH
27898: LD_INT 5
27900: PUSH
27901: LD_INT 21
27903: PUSH
27904: LD_INT 22
27906: PUSH
27907: LD_INT 23
27909: PUSH
27910: LD_INT 24
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: ST_TO_ADDR
27925: GO 27928
27927: POP
// result := ( chassis in result ) ;
27928: LD_ADDR_VAR 0 3
27932: PUSH
27933: LD_VAR 0 1
27937: PUSH
27938: LD_VAR 0 3
27942: IN
27943: ST_TO_ADDR
// end ;
27944: LD_VAR 0 3
27948: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27949: LD_INT 0
27951: PPUSH
// if not chassis or not weapon then
27952: LD_VAR 0 1
27956: NOT
27957: PUSH
27958: LD_VAR 0 2
27962: NOT
27963: OR
27964: IFFALSE 27968
// exit ;
27966: GO 29030
// case weapon of us_machine_gun :
27968: LD_VAR 0 2
27972: PUSH
27973: LD_INT 2
27975: DOUBLE
27976: EQUAL
27977: IFTRUE 27981
27979: GO 28011
27981: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27982: LD_ADDR_VAR 0 3
27986: PUSH
27987: LD_INT 1
27989: PUSH
27990: LD_INT 2
27992: PUSH
27993: LD_INT 3
27995: PUSH
27996: LD_INT 4
27998: PUSH
27999: LD_INT 5
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: ST_TO_ADDR
28009: GO 29014
28011: LD_INT 3
28013: DOUBLE
28014: EQUAL
28015: IFTRUE 28019
28017: GO 28049
28019: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28020: LD_ADDR_VAR 0 3
28024: PUSH
28025: LD_INT 1
28027: PUSH
28028: LD_INT 2
28030: PUSH
28031: LD_INT 3
28033: PUSH
28034: LD_INT 4
28036: PUSH
28037: LD_INT 5
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: ST_TO_ADDR
28047: GO 29014
28049: LD_INT 11
28051: DOUBLE
28052: EQUAL
28053: IFTRUE 28057
28055: GO 28087
28057: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28058: LD_ADDR_VAR 0 3
28062: PUSH
28063: LD_INT 1
28065: PUSH
28066: LD_INT 2
28068: PUSH
28069: LD_INT 3
28071: PUSH
28072: LD_INT 4
28074: PUSH
28075: LD_INT 5
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: ST_TO_ADDR
28085: GO 29014
28087: LD_INT 4
28089: DOUBLE
28090: EQUAL
28091: IFTRUE 28095
28093: GO 28121
28095: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28096: LD_ADDR_VAR 0 3
28100: PUSH
28101: LD_INT 2
28103: PUSH
28104: LD_INT 3
28106: PUSH
28107: LD_INT 4
28109: PUSH
28110: LD_INT 5
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: ST_TO_ADDR
28119: GO 29014
28121: LD_INT 5
28123: DOUBLE
28124: EQUAL
28125: IFTRUE 28129
28127: GO 28155
28129: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28130: LD_ADDR_VAR 0 3
28134: PUSH
28135: LD_INT 2
28137: PUSH
28138: LD_INT 3
28140: PUSH
28141: LD_INT 4
28143: PUSH
28144: LD_INT 5
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: ST_TO_ADDR
28153: GO 29014
28155: LD_INT 9
28157: DOUBLE
28158: EQUAL
28159: IFTRUE 28163
28161: GO 28189
28163: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28164: LD_ADDR_VAR 0 3
28168: PUSH
28169: LD_INT 2
28171: PUSH
28172: LD_INT 3
28174: PUSH
28175: LD_INT 4
28177: PUSH
28178: LD_INT 5
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: ST_TO_ADDR
28187: GO 29014
28189: LD_INT 7
28191: DOUBLE
28192: EQUAL
28193: IFTRUE 28197
28195: GO 28223
28197: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28198: LD_ADDR_VAR 0 3
28202: PUSH
28203: LD_INT 2
28205: PUSH
28206: LD_INT 3
28208: PUSH
28209: LD_INT 4
28211: PUSH
28212: LD_INT 5
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: ST_TO_ADDR
28221: GO 29014
28223: LD_INT 12
28225: DOUBLE
28226: EQUAL
28227: IFTRUE 28231
28229: GO 28257
28231: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28232: LD_ADDR_VAR 0 3
28236: PUSH
28237: LD_INT 2
28239: PUSH
28240: LD_INT 3
28242: PUSH
28243: LD_INT 4
28245: PUSH
28246: LD_INT 5
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: ST_TO_ADDR
28255: GO 29014
28257: LD_INT 13
28259: DOUBLE
28260: EQUAL
28261: IFTRUE 28265
28263: GO 28291
28265: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28266: LD_ADDR_VAR 0 3
28270: PUSH
28271: LD_INT 2
28273: PUSH
28274: LD_INT 3
28276: PUSH
28277: LD_INT 4
28279: PUSH
28280: LD_INT 5
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: ST_TO_ADDR
28289: GO 29014
28291: LD_INT 14
28293: DOUBLE
28294: EQUAL
28295: IFTRUE 28299
28297: GO 28317
28299: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28300: LD_ADDR_VAR 0 3
28304: PUSH
28305: LD_INT 4
28307: PUSH
28308: LD_INT 5
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: ST_TO_ADDR
28315: GO 29014
28317: LD_INT 6
28319: DOUBLE
28320: EQUAL
28321: IFTRUE 28325
28323: GO 28343
28325: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28326: LD_ADDR_VAR 0 3
28330: PUSH
28331: LD_INT 4
28333: PUSH
28334: LD_INT 5
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: ST_TO_ADDR
28341: GO 29014
28343: LD_INT 10
28345: DOUBLE
28346: EQUAL
28347: IFTRUE 28351
28349: GO 28369
28351: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28352: LD_ADDR_VAR 0 3
28356: PUSH
28357: LD_INT 4
28359: PUSH
28360: LD_INT 5
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: ST_TO_ADDR
28367: GO 29014
28369: LD_INT 22
28371: DOUBLE
28372: EQUAL
28373: IFTRUE 28377
28375: GO 28403
28377: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28378: LD_ADDR_VAR 0 3
28382: PUSH
28383: LD_INT 11
28385: PUSH
28386: LD_INT 12
28388: PUSH
28389: LD_INT 13
28391: PUSH
28392: LD_INT 14
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: ST_TO_ADDR
28401: GO 29014
28403: LD_INT 23
28405: DOUBLE
28406: EQUAL
28407: IFTRUE 28411
28409: GO 28437
28411: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28412: LD_ADDR_VAR 0 3
28416: PUSH
28417: LD_INT 11
28419: PUSH
28420: LD_INT 12
28422: PUSH
28423: LD_INT 13
28425: PUSH
28426: LD_INT 14
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: LIST
28433: LIST
28434: ST_TO_ADDR
28435: GO 29014
28437: LD_INT 24
28439: DOUBLE
28440: EQUAL
28441: IFTRUE 28445
28443: GO 28471
28445: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28446: LD_ADDR_VAR 0 3
28450: PUSH
28451: LD_INT 11
28453: PUSH
28454: LD_INT 12
28456: PUSH
28457: LD_INT 13
28459: PUSH
28460: LD_INT 14
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: ST_TO_ADDR
28469: GO 29014
28471: LD_INT 30
28473: DOUBLE
28474: EQUAL
28475: IFTRUE 28479
28477: GO 28505
28479: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28480: LD_ADDR_VAR 0 3
28484: PUSH
28485: LD_INT 11
28487: PUSH
28488: LD_INT 12
28490: PUSH
28491: LD_INT 13
28493: PUSH
28494: LD_INT 14
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: ST_TO_ADDR
28503: GO 29014
28505: LD_INT 25
28507: DOUBLE
28508: EQUAL
28509: IFTRUE 28513
28511: GO 28531
28513: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28514: LD_ADDR_VAR 0 3
28518: PUSH
28519: LD_INT 13
28521: PUSH
28522: LD_INT 14
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: ST_TO_ADDR
28529: GO 29014
28531: LD_INT 27
28533: DOUBLE
28534: EQUAL
28535: IFTRUE 28539
28537: GO 28557
28539: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28540: LD_ADDR_VAR 0 3
28544: PUSH
28545: LD_INT 13
28547: PUSH
28548: LD_INT 14
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: ST_TO_ADDR
28555: GO 29014
28557: LD_EXP 63
28561: DOUBLE
28562: EQUAL
28563: IFTRUE 28567
28565: GO 28593
28567: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28568: LD_ADDR_VAR 0 3
28572: PUSH
28573: LD_INT 11
28575: PUSH
28576: LD_INT 12
28578: PUSH
28579: LD_INT 13
28581: PUSH
28582: LD_INT 14
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: ST_TO_ADDR
28591: GO 29014
28593: LD_INT 28
28595: DOUBLE
28596: EQUAL
28597: IFTRUE 28601
28599: GO 28619
28601: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28602: LD_ADDR_VAR 0 3
28606: PUSH
28607: LD_INT 13
28609: PUSH
28610: LD_INT 14
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: ST_TO_ADDR
28617: GO 29014
28619: LD_INT 29
28621: DOUBLE
28622: EQUAL
28623: IFTRUE 28627
28625: GO 28645
28627: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28628: LD_ADDR_VAR 0 3
28632: PUSH
28633: LD_INT 13
28635: PUSH
28636: LD_INT 14
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: ST_TO_ADDR
28643: GO 29014
28645: LD_INT 31
28647: DOUBLE
28648: EQUAL
28649: IFTRUE 28653
28651: GO 28671
28653: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28654: LD_ADDR_VAR 0 3
28658: PUSH
28659: LD_INT 13
28661: PUSH
28662: LD_INT 14
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: ST_TO_ADDR
28669: GO 29014
28671: LD_INT 26
28673: DOUBLE
28674: EQUAL
28675: IFTRUE 28679
28677: GO 28697
28679: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28680: LD_ADDR_VAR 0 3
28684: PUSH
28685: LD_INT 13
28687: PUSH
28688: LD_INT 14
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: ST_TO_ADDR
28695: GO 29014
28697: LD_INT 42
28699: DOUBLE
28700: EQUAL
28701: IFTRUE 28705
28703: GO 28731
28705: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28706: LD_ADDR_VAR 0 3
28710: PUSH
28711: LD_INT 21
28713: PUSH
28714: LD_INT 22
28716: PUSH
28717: LD_INT 23
28719: PUSH
28720: LD_INT 24
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: ST_TO_ADDR
28729: GO 29014
28731: LD_INT 43
28733: DOUBLE
28734: EQUAL
28735: IFTRUE 28739
28737: GO 28765
28739: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28740: LD_ADDR_VAR 0 3
28744: PUSH
28745: LD_INT 21
28747: PUSH
28748: LD_INT 22
28750: PUSH
28751: LD_INT 23
28753: PUSH
28754: LD_INT 24
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: ST_TO_ADDR
28763: GO 29014
28765: LD_INT 44
28767: DOUBLE
28768: EQUAL
28769: IFTRUE 28773
28771: GO 28799
28773: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28774: LD_ADDR_VAR 0 3
28778: PUSH
28779: LD_INT 21
28781: PUSH
28782: LD_INT 22
28784: PUSH
28785: LD_INT 23
28787: PUSH
28788: LD_INT 24
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: ST_TO_ADDR
28797: GO 29014
28799: LD_INT 45
28801: DOUBLE
28802: EQUAL
28803: IFTRUE 28807
28805: GO 28833
28807: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28808: LD_ADDR_VAR 0 3
28812: PUSH
28813: LD_INT 21
28815: PUSH
28816: LD_INT 22
28818: PUSH
28819: LD_INT 23
28821: PUSH
28822: LD_INT 24
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: ST_TO_ADDR
28831: GO 29014
28833: LD_INT 49
28835: DOUBLE
28836: EQUAL
28837: IFTRUE 28841
28839: GO 28867
28841: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28842: LD_ADDR_VAR 0 3
28846: PUSH
28847: LD_INT 21
28849: PUSH
28850: LD_INT 22
28852: PUSH
28853: LD_INT 23
28855: PUSH
28856: LD_INT 24
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: ST_TO_ADDR
28865: GO 29014
28867: LD_INT 51
28869: DOUBLE
28870: EQUAL
28871: IFTRUE 28875
28873: GO 28901
28875: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28876: LD_ADDR_VAR 0 3
28880: PUSH
28881: LD_INT 21
28883: PUSH
28884: LD_INT 22
28886: PUSH
28887: LD_INT 23
28889: PUSH
28890: LD_INT 24
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: ST_TO_ADDR
28899: GO 29014
28901: LD_INT 52
28903: DOUBLE
28904: EQUAL
28905: IFTRUE 28909
28907: GO 28935
28909: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28910: LD_ADDR_VAR 0 3
28914: PUSH
28915: LD_INT 21
28917: PUSH
28918: LD_INT 22
28920: PUSH
28921: LD_INT 23
28923: PUSH
28924: LD_INT 24
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: ST_TO_ADDR
28933: GO 29014
28935: LD_INT 53
28937: DOUBLE
28938: EQUAL
28939: IFTRUE 28943
28941: GO 28961
28943: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28944: LD_ADDR_VAR 0 3
28948: PUSH
28949: LD_INT 23
28951: PUSH
28952: LD_INT 24
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: ST_TO_ADDR
28959: GO 29014
28961: LD_INT 46
28963: DOUBLE
28964: EQUAL
28965: IFTRUE 28969
28967: GO 28987
28969: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28970: LD_ADDR_VAR 0 3
28974: PUSH
28975: LD_INT 23
28977: PUSH
28978: LD_INT 24
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: ST_TO_ADDR
28985: GO 29014
28987: LD_INT 47
28989: DOUBLE
28990: EQUAL
28991: IFTRUE 28995
28993: GO 29013
28995: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28996: LD_ADDR_VAR 0 3
29000: PUSH
29001: LD_INT 23
29003: PUSH
29004: LD_INT 24
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: ST_TO_ADDR
29011: GO 29014
29013: POP
// result := ( chassis in result ) ;
29014: LD_ADDR_VAR 0 3
29018: PUSH
29019: LD_VAR 0 1
29023: PUSH
29024: LD_VAR 0 3
29028: IN
29029: ST_TO_ADDR
// end ;
29030: LD_VAR 0 3
29034: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29035: LD_INT 0
29037: PPUSH
29038: PPUSH
29039: PPUSH
29040: PPUSH
29041: PPUSH
29042: PPUSH
29043: PPUSH
// result := array ;
29044: LD_ADDR_VAR 0 5
29048: PUSH
29049: LD_VAR 0 1
29053: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29054: LD_VAR 0 1
29058: NOT
29059: PUSH
29060: LD_VAR 0 2
29064: NOT
29065: OR
29066: PUSH
29067: LD_VAR 0 3
29071: NOT
29072: OR
29073: PUSH
29074: LD_VAR 0 2
29078: PUSH
29079: LD_VAR 0 1
29083: GREATER
29084: OR
29085: PUSH
29086: LD_VAR 0 3
29090: PUSH
29091: LD_VAR 0 1
29095: GREATER
29096: OR
29097: IFFALSE 29101
// exit ;
29099: GO 29397
// if direction then
29101: LD_VAR 0 4
29105: IFFALSE 29169
// begin d := 1 ;
29107: LD_ADDR_VAR 0 9
29111: PUSH
29112: LD_INT 1
29114: ST_TO_ADDR
// if i_from > i_to then
29115: LD_VAR 0 2
29119: PUSH
29120: LD_VAR 0 3
29124: GREATER
29125: IFFALSE 29151
// length := ( array - i_from ) + i_to else
29127: LD_ADDR_VAR 0 11
29131: PUSH
29132: LD_VAR 0 1
29136: PUSH
29137: LD_VAR 0 2
29141: MINUS
29142: PUSH
29143: LD_VAR 0 3
29147: PLUS
29148: ST_TO_ADDR
29149: GO 29167
// length := i_to - i_from ;
29151: LD_ADDR_VAR 0 11
29155: PUSH
29156: LD_VAR 0 3
29160: PUSH
29161: LD_VAR 0 2
29165: MINUS
29166: ST_TO_ADDR
// end else
29167: GO 29230
// begin d := - 1 ;
29169: LD_ADDR_VAR 0 9
29173: PUSH
29174: LD_INT 1
29176: NEG
29177: ST_TO_ADDR
// if i_from > i_to then
29178: LD_VAR 0 2
29182: PUSH
29183: LD_VAR 0 3
29187: GREATER
29188: IFFALSE 29208
// length := i_from - i_to else
29190: LD_ADDR_VAR 0 11
29194: PUSH
29195: LD_VAR 0 2
29199: PUSH
29200: LD_VAR 0 3
29204: MINUS
29205: ST_TO_ADDR
29206: GO 29230
// length := ( array - i_to ) + i_from ;
29208: LD_ADDR_VAR 0 11
29212: PUSH
29213: LD_VAR 0 1
29217: PUSH
29218: LD_VAR 0 3
29222: MINUS
29223: PUSH
29224: LD_VAR 0 2
29228: PLUS
29229: ST_TO_ADDR
// end ; if not length then
29230: LD_VAR 0 11
29234: NOT
29235: IFFALSE 29239
// exit ;
29237: GO 29397
// tmp := array ;
29239: LD_ADDR_VAR 0 10
29243: PUSH
29244: LD_VAR 0 1
29248: ST_TO_ADDR
// for i = 1 to length do
29249: LD_ADDR_VAR 0 6
29253: PUSH
29254: DOUBLE
29255: LD_INT 1
29257: DEC
29258: ST_TO_ADDR
29259: LD_VAR 0 11
29263: PUSH
29264: FOR_TO
29265: IFFALSE 29385
// begin for j = 1 to array do
29267: LD_ADDR_VAR 0 7
29271: PUSH
29272: DOUBLE
29273: LD_INT 1
29275: DEC
29276: ST_TO_ADDR
29277: LD_VAR 0 1
29281: PUSH
29282: FOR_TO
29283: IFFALSE 29371
// begin k := j + d ;
29285: LD_ADDR_VAR 0 8
29289: PUSH
29290: LD_VAR 0 7
29294: PUSH
29295: LD_VAR 0 9
29299: PLUS
29300: ST_TO_ADDR
// if k > array then
29301: LD_VAR 0 8
29305: PUSH
29306: LD_VAR 0 1
29310: GREATER
29311: IFFALSE 29321
// k := 1 ;
29313: LD_ADDR_VAR 0 8
29317: PUSH
29318: LD_INT 1
29320: ST_TO_ADDR
// if not k then
29321: LD_VAR 0 8
29325: NOT
29326: IFFALSE 29338
// k := array ;
29328: LD_ADDR_VAR 0 8
29332: PUSH
29333: LD_VAR 0 1
29337: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29338: LD_ADDR_VAR 0 10
29342: PUSH
29343: LD_VAR 0 10
29347: PPUSH
29348: LD_VAR 0 8
29352: PPUSH
29353: LD_VAR 0 1
29357: PUSH
29358: LD_VAR 0 7
29362: ARRAY
29363: PPUSH
29364: CALL_OW 1
29368: ST_TO_ADDR
// end ;
29369: GO 29282
29371: POP
29372: POP
// array := tmp ;
29373: LD_ADDR_VAR 0 1
29377: PUSH
29378: LD_VAR 0 10
29382: ST_TO_ADDR
// end ;
29383: GO 29264
29385: POP
29386: POP
// result := array ;
29387: LD_ADDR_VAR 0 5
29391: PUSH
29392: LD_VAR 0 1
29396: ST_TO_ADDR
// end ;
29397: LD_VAR 0 5
29401: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29402: LD_INT 0
29404: PPUSH
29405: PPUSH
// result := 0 ;
29406: LD_ADDR_VAR 0 3
29410: PUSH
29411: LD_INT 0
29413: ST_TO_ADDR
// if not array or not value in array then
29414: LD_VAR 0 1
29418: NOT
29419: PUSH
29420: LD_VAR 0 2
29424: PUSH
29425: LD_VAR 0 1
29429: IN
29430: NOT
29431: OR
29432: IFFALSE 29436
// exit ;
29434: GO 29490
// for i = 1 to array do
29436: LD_ADDR_VAR 0 4
29440: PUSH
29441: DOUBLE
29442: LD_INT 1
29444: DEC
29445: ST_TO_ADDR
29446: LD_VAR 0 1
29450: PUSH
29451: FOR_TO
29452: IFFALSE 29488
// if value = array [ i ] then
29454: LD_VAR 0 2
29458: PUSH
29459: LD_VAR 0 1
29463: PUSH
29464: LD_VAR 0 4
29468: ARRAY
29469: EQUAL
29470: IFFALSE 29486
// begin result := i ;
29472: LD_ADDR_VAR 0 3
29476: PUSH
29477: LD_VAR 0 4
29481: ST_TO_ADDR
// exit ;
29482: POP
29483: POP
29484: GO 29490
// end ;
29486: GO 29451
29488: POP
29489: POP
// end ;
29490: LD_VAR 0 3
29494: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29495: LD_INT 0
29497: PPUSH
// vc_chassis := chassis ;
29498: LD_ADDR_OWVAR 37
29502: PUSH
29503: LD_VAR 0 1
29507: ST_TO_ADDR
// vc_engine := engine ;
29508: LD_ADDR_OWVAR 39
29512: PUSH
29513: LD_VAR 0 2
29517: ST_TO_ADDR
// vc_control := control ;
29518: LD_ADDR_OWVAR 38
29522: PUSH
29523: LD_VAR 0 3
29527: ST_TO_ADDR
// vc_weapon := weapon ;
29528: LD_ADDR_OWVAR 40
29532: PUSH
29533: LD_VAR 0 4
29537: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29538: LD_ADDR_OWVAR 41
29542: PUSH
29543: LD_VAR 0 5
29547: ST_TO_ADDR
// end ;
29548: LD_VAR 0 6
29552: RET
// export function WantPlant ( unit ) ; var task ; begin
29553: LD_INT 0
29555: PPUSH
29556: PPUSH
// result := false ;
29557: LD_ADDR_VAR 0 2
29561: PUSH
29562: LD_INT 0
29564: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29565: LD_ADDR_VAR 0 3
29569: PUSH
29570: LD_VAR 0 1
29574: PPUSH
29575: CALL_OW 437
29579: ST_TO_ADDR
// if task then
29580: LD_VAR 0 3
29584: IFFALSE 29612
// if task [ 1 ] [ 1 ] = p then
29586: LD_VAR 0 3
29590: PUSH
29591: LD_INT 1
29593: ARRAY
29594: PUSH
29595: LD_INT 1
29597: ARRAY
29598: PUSH
29599: LD_STRING p
29601: EQUAL
29602: IFFALSE 29612
// result := true ;
29604: LD_ADDR_VAR 0 2
29608: PUSH
29609: LD_INT 1
29611: ST_TO_ADDR
// end ;
29612: LD_VAR 0 2
29616: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29617: LD_INT 0
29619: PPUSH
29620: PPUSH
29621: PPUSH
29622: PPUSH
// if pos < 1 then
29623: LD_VAR 0 2
29627: PUSH
29628: LD_INT 1
29630: LESS
29631: IFFALSE 29635
// exit ;
29633: GO 29938
// if pos = 1 then
29635: LD_VAR 0 2
29639: PUSH
29640: LD_INT 1
29642: EQUAL
29643: IFFALSE 29676
// result := Replace ( arr , pos [ 1 ] , value ) else
29645: LD_ADDR_VAR 0 4
29649: PUSH
29650: LD_VAR 0 1
29654: PPUSH
29655: LD_VAR 0 2
29659: PUSH
29660: LD_INT 1
29662: ARRAY
29663: PPUSH
29664: LD_VAR 0 3
29668: PPUSH
29669: CALL_OW 1
29673: ST_TO_ADDR
29674: GO 29938
// begin tmp := arr ;
29676: LD_ADDR_VAR 0 6
29680: PUSH
29681: LD_VAR 0 1
29685: ST_TO_ADDR
// s_arr := [ tmp ] ;
29686: LD_ADDR_VAR 0 7
29690: PUSH
29691: LD_VAR 0 6
29695: PUSH
29696: EMPTY
29697: LIST
29698: ST_TO_ADDR
// for i = 1 to pos - 1 do
29699: LD_ADDR_VAR 0 5
29703: PUSH
29704: DOUBLE
29705: LD_INT 1
29707: DEC
29708: ST_TO_ADDR
29709: LD_VAR 0 2
29713: PUSH
29714: LD_INT 1
29716: MINUS
29717: PUSH
29718: FOR_TO
29719: IFFALSE 29764
// begin tmp := tmp [ pos [ i ] ] ;
29721: LD_ADDR_VAR 0 6
29725: PUSH
29726: LD_VAR 0 6
29730: PUSH
29731: LD_VAR 0 2
29735: PUSH
29736: LD_VAR 0 5
29740: ARRAY
29741: ARRAY
29742: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29743: LD_ADDR_VAR 0 7
29747: PUSH
29748: LD_VAR 0 7
29752: PUSH
29753: LD_VAR 0 6
29757: PUSH
29758: EMPTY
29759: LIST
29760: ADD
29761: ST_TO_ADDR
// end ;
29762: GO 29718
29764: POP
29765: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29766: LD_ADDR_VAR 0 6
29770: PUSH
29771: LD_VAR 0 6
29775: PPUSH
29776: LD_VAR 0 2
29780: PUSH
29781: LD_VAR 0 2
29785: ARRAY
29786: PPUSH
29787: LD_VAR 0 3
29791: PPUSH
29792: CALL_OW 1
29796: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29797: LD_ADDR_VAR 0 7
29801: PUSH
29802: LD_VAR 0 7
29806: PPUSH
29807: LD_VAR 0 7
29811: PPUSH
29812: LD_VAR 0 6
29816: PPUSH
29817: CALL_OW 1
29821: ST_TO_ADDR
// for i = s_arr downto 2 do
29822: LD_ADDR_VAR 0 5
29826: PUSH
29827: DOUBLE
29828: LD_VAR 0 7
29832: INC
29833: ST_TO_ADDR
29834: LD_INT 2
29836: PUSH
29837: FOR_DOWNTO
29838: IFFALSE 29922
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29840: LD_ADDR_VAR 0 6
29844: PUSH
29845: LD_VAR 0 7
29849: PUSH
29850: LD_VAR 0 5
29854: PUSH
29855: LD_INT 1
29857: MINUS
29858: ARRAY
29859: PPUSH
29860: LD_VAR 0 2
29864: PUSH
29865: LD_VAR 0 5
29869: PUSH
29870: LD_INT 1
29872: MINUS
29873: ARRAY
29874: PPUSH
29875: LD_VAR 0 7
29879: PUSH
29880: LD_VAR 0 5
29884: ARRAY
29885: PPUSH
29886: CALL_OW 1
29890: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29891: LD_ADDR_VAR 0 7
29895: PUSH
29896: LD_VAR 0 7
29900: PPUSH
29901: LD_VAR 0 5
29905: PUSH
29906: LD_INT 1
29908: MINUS
29909: PPUSH
29910: LD_VAR 0 6
29914: PPUSH
29915: CALL_OW 1
29919: ST_TO_ADDR
// end ;
29920: GO 29837
29922: POP
29923: POP
// result := s_arr [ 1 ] ;
29924: LD_ADDR_VAR 0 4
29928: PUSH
29929: LD_VAR 0 7
29933: PUSH
29934: LD_INT 1
29936: ARRAY
29937: ST_TO_ADDR
// end ; end ;
29938: LD_VAR 0 4
29942: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29943: LD_INT 0
29945: PPUSH
29946: PPUSH
// if not list then
29947: LD_VAR 0 1
29951: NOT
29952: IFFALSE 29956
// exit ;
29954: GO 30047
// i := list [ pos1 ] ;
29956: LD_ADDR_VAR 0 5
29960: PUSH
29961: LD_VAR 0 1
29965: PUSH
29966: LD_VAR 0 2
29970: ARRAY
29971: ST_TO_ADDR
// if not i then
29972: LD_VAR 0 5
29976: NOT
29977: IFFALSE 29981
// exit ;
29979: GO 30047
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29981: LD_ADDR_VAR 0 1
29985: PUSH
29986: LD_VAR 0 1
29990: PPUSH
29991: LD_VAR 0 2
29995: PPUSH
29996: LD_VAR 0 1
30000: PUSH
30001: LD_VAR 0 3
30005: ARRAY
30006: PPUSH
30007: CALL_OW 1
30011: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30012: LD_ADDR_VAR 0 1
30016: PUSH
30017: LD_VAR 0 1
30021: PPUSH
30022: LD_VAR 0 3
30026: PPUSH
30027: LD_VAR 0 5
30031: PPUSH
30032: CALL_OW 1
30036: ST_TO_ADDR
// result := list ;
30037: LD_ADDR_VAR 0 4
30041: PUSH
30042: LD_VAR 0 1
30046: ST_TO_ADDR
// end ;
30047: LD_VAR 0 4
30051: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30052: LD_INT 0
30054: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30055: LD_ADDR_VAR 0 5
30059: PUSH
30060: LD_VAR 0 1
30064: PPUSH
30065: CALL_OW 250
30069: PPUSH
30070: LD_VAR 0 1
30074: PPUSH
30075: CALL_OW 251
30079: PPUSH
30080: LD_VAR 0 2
30084: PPUSH
30085: LD_VAR 0 3
30089: PPUSH
30090: LD_VAR 0 4
30094: PPUSH
30095: CALL 30105 0 5
30099: ST_TO_ADDR
// end ;
30100: LD_VAR 0 5
30104: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30105: LD_INT 0
30107: PPUSH
30108: PPUSH
30109: PPUSH
30110: PPUSH
// if not list then
30111: LD_VAR 0 3
30115: NOT
30116: IFFALSE 30120
// exit ;
30118: GO 30508
// result := [ ] ;
30120: LD_ADDR_VAR 0 6
30124: PUSH
30125: EMPTY
30126: ST_TO_ADDR
// for i in list do
30127: LD_ADDR_VAR 0 7
30131: PUSH
30132: LD_VAR 0 3
30136: PUSH
30137: FOR_IN
30138: IFFALSE 30340
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30140: LD_ADDR_VAR 0 9
30144: PUSH
30145: LD_VAR 0 7
30149: PPUSH
30150: LD_VAR 0 1
30154: PPUSH
30155: LD_VAR 0 2
30159: PPUSH
30160: CALL_OW 297
30164: ST_TO_ADDR
// if not result then
30165: LD_VAR 0 6
30169: NOT
30170: IFFALSE 30196
// result := [ [ i , tmp ] ] else
30172: LD_ADDR_VAR 0 6
30176: PUSH
30177: LD_VAR 0 7
30181: PUSH
30182: LD_VAR 0 9
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: EMPTY
30192: LIST
30193: ST_TO_ADDR
30194: GO 30338
// begin if result [ result ] [ 2 ] < tmp then
30196: LD_VAR 0 6
30200: PUSH
30201: LD_VAR 0 6
30205: ARRAY
30206: PUSH
30207: LD_INT 2
30209: ARRAY
30210: PUSH
30211: LD_VAR 0 9
30215: LESS
30216: IFFALSE 30258
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30218: LD_ADDR_VAR 0 6
30222: PUSH
30223: LD_VAR 0 6
30227: PPUSH
30228: LD_VAR 0 6
30232: PUSH
30233: LD_INT 1
30235: PLUS
30236: PPUSH
30237: LD_VAR 0 7
30241: PUSH
30242: LD_VAR 0 9
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PPUSH
30251: CALL_OW 2
30255: ST_TO_ADDR
30256: GO 30338
// for j = 1 to result do
30258: LD_ADDR_VAR 0 8
30262: PUSH
30263: DOUBLE
30264: LD_INT 1
30266: DEC
30267: ST_TO_ADDR
30268: LD_VAR 0 6
30272: PUSH
30273: FOR_TO
30274: IFFALSE 30336
// begin if tmp < result [ j ] [ 2 ] then
30276: LD_VAR 0 9
30280: PUSH
30281: LD_VAR 0 6
30285: PUSH
30286: LD_VAR 0 8
30290: ARRAY
30291: PUSH
30292: LD_INT 2
30294: ARRAY
30295: LESS
30296: IFFALSE 30334
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30298: LD_ADDR_VAR 0 6
30302: PUSH
30303: LD_VAR 0 6
30307: PPUSH
30308: LD_VAR 0 8
30312: PPUSH
30313: LD_VAR 0 7
30317: PUSH
30318: LD_VAR 0 9
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PPUSH
30327: CALL_OW 2
30331: ST_TO_ADDR
// break ;
30332: GO 30336
// end ; end ;
30334: GO 30273
30336: POP
30337: POP
// end ; end ;
30338: GO 30137
30340: POP
30341: POP
// if result and not asc then
30342: LD_VAR 0 6
30346: PUSH
30347: LD_VAR 0 4
30351: NOT
30352: AND
30353: IFFALSE 30428
// begin tmp := result ;
30355: LD_ADDR_VAR 0 9
30359: PUSH
30360: LD_VAR 0 6
30364: ST_TO_ADDR
// for i = tmp downto 1 do
30365: LD_ADDR_VAR 0 7
30369: PUSH
30370: DOUBLE
30371: LD_VAR 0 9
30375: INC
30376: ST_TO_ADDR
30377: LD_INT 1
30379: PUSH
30380: FOR_DOWNTO
30381: IFFALSE 30426
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30383: LD_ADDR_VAR 0 6
30387: PUSH
30388: LD_VAR 0 6
30392: PPUSH
30393: LD_VAR 0 9
30397: PUSH
30398: LD_VAR 0 7
30402: MINUS
30403: PUSH
30404: LD_INT 1
30406: PLUS
30407: PPUSH
30408: LD_VAR 0 9
30412: PUSH
30413: LD_VAR 0 7
30417: ARRAY
30418: PPUSH
30419: CALL_OW 1
30423: ST_TO_ADDR
30424: GO 30380
30426: POP
30427: POP
// end ; tmp := [ ] ;
30428: LD_ADDR_VAR 0 9
30432: PUSH
30433: EMPTY
30434: ST_TO_ADDR
// if mode then
30435: LD_VAR 0 5
30439: IFFALSE 30508
// begin for i = 1 to result do
30441: LD_ADDR_VAR 0 7
30445: PUSH
30446: DOUBLE
30447: LD_INT 1
30449: DEC
30450: ST_TO_ADDR
30451: LD_VAR 0 6
30455: PUSH
30456: FOR_TO
30457: IFFALSE 30496
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30459: LD_ADDR_VAR 0 9
30463: PUSH
30464: LD_VAR 0 9
30468: PPUSH
30469: LD_VAR 0 7
30473: PPUSH
30474: LD_VAR 0 6
30478: PUSH
30479: LD_VAR 0 7
30483: ARRAY
30484: PUSH
30485: LD_INT 1
30487: ARRAY
30488: PPUSH
30489: CALL_OW 1
30493: ST_TO_ADDR
30494: GO 30456
30496: POP
30497: POP
// result := tmp ;
30498: LD_ADDR_VAR 0 6
30502: PUSH
30503: LD_VAR 0 9
30507: ST_TO_ADDR
// end ; end ;
30508: LD_VAR 0 6
30512: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30513: LD_INT 0
30515: PPUSH
30516: PPUSH
30517: PPUSH
30518: PPUSH
30519: PPUSH
30520: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30521: LD_ADDR_VAR 0 5
30525: PUSH
30526: LD_INT 0
30528: PUSH
30529: LD_INT 0
30531: PUSH
30532: LD_INT 0
30534: PUSH
30535: EMPTY
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: ST_TO_ADDR
// if not x or not y then
30543: LD_VAR 0 2
30547: NOT
30548: PUSH
30549: LD_VAR 0 3
30553: NOT
30554: OR
30555: IFFALSE 30559
// exit ;
30557: GO 32211
// if not range then
30559: LD_VAR 0 4
30563: NOT
30564: IFFALSE 30574
// range := 10 ;
30566: LD_ADDR_VAR 0 4
30570: PUSH
30571: LD_INT 10
30573: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30574: LD_ADDR_VAR 0 8
30578: PUSH
30579: LD_INT 81
30581: PUSH
30582: LD_VAR 0 1
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 92
30593: PUSH
30594: LD_VAR 0 2
30598: PUSH
30599: LD_VAR 0 3
30603: PUSH
30604: LD_VAR 0 4
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 3
30617: PUSH
30618: LD_INT 21
30620: PUSH
30621: LD_INT 3
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: LIST
30636: PPUSH
30637: CALL_OW 69
30641: ST_TO_ADDR
// if not tmp then
30642: LD_VAR 0 8
30646: NOT
30647: IFFALSE 30651
// exit ;
30649: GO 32211
// for i in tmp do
30651: LD_ADDR_VAR 0 6
30655: PUSH
30656: LD_VAR 0 8
30660: PUSH
30661: FOR_IN
30662: IFFALSE 32186
// begin points := [ 0 , 0 , 0 ] ;
30664: LD_ADDR_VAR 0 9
30668: PUSH
30669: LD_INT 0
30671: PUSH
30672: LD_INT 0
30674: PUSH
30675: LD_INT 0
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: LIST
30682: ST_TO_ADDR
// bpoints := 1 ;
30683: LD_ADDR_VAR 0 10
30687: PUSH
30688: LD_INT 1
30690: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30691: LD_VAR 0 6
30695: PPUSH
30696: CALL_OW 247
30700: PUSH
30701: LD_INT 1
30703: DOUBLE
30704: EQUAL
30705: IFTRUE 30709
30707: GO 31287
30709: POP
// begin if GetClass ( i ) = 1 then
30710: LD_VAR 0 6
30714: PPUSH
30715: CALL_OW 257
30719: PUSH
30720: LD_INT 1
30722: EQUAL
30723: IFFALSE 30744
// points := [ 10 , 5 , 3 ] ;
30725: LD_ADDR_VAR 0 9
30729: PUSH
30730: LD_INT 10
30732: PUSH
30733: LD_INT 5
30735: PUSH
30736: LD_INT 3
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: LIST
30743: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30744: LD_VAR 0 6
30748: PPUSH
30749: CALL_OW 257
30753: PUSH
30754: LD_INT 2
30756: PUSH
30757: LD_INT 3
30759: PUSH
30760: LD_INT 4
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: LIST
30767: IN
30768: IFFALSE 30789
// points := [ 3 , 2 , 1 ] ;
30770: LD_ADDR_VAR 0 9
30774: PUSH
30775: LD_INT 3
30777: PUSH
30778: LD_INT 2
30780: PUSH
30781: LD_INT 1
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: LIST
30788: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30789: LD_VAR 0 6
30793: PPUSH
30794: CALL_OW 257
30798: PUSH
30799: LD_INT 5
30801: EQUAL
30802: IFFALSE 30823
// points := [ 130 , 5 , 2 ] ;
30804: LD_ADDR_VAR 0 9
30808: PUSH
30809: LD_INT 130
30811: PUSH
30812: LD_INT 5
30814: PUSH
30815: LD_INT 2
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: LIST
30822: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30823: LD_VAR 0 6
30827: PPUSH
30828: CALL_OW 257
30832: PUSH
30833: LD_INT 8
30835: EQUAL
30836: IFFALSE 30857
// points := [ 35 , 35 , 30 ] ;
30838: LD_ADDR_VAR 0 9
30842: PUSH
30843: LD_INT 35
30845: PUSH
30846: LD_INT 35
30848: PUSH
30849: LD_INT 30
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: LIST
30856: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30857: LD_VAR 0 6
30861: PPUSH
30862: CALL_OW 257
30866: PUSH
30867: LD_INT 9
30869: EQUAL
30870: IFFALSE 30891
// points := [ 20 , 55 , 40 ] ;
30872: LD_ADDR_VAR 0 9
30876: PUSH
30877: LD_INT 20
30879: PUSH
30880: LD_INT 55
30882: PUSH
30883: LD_INT 40
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: LIST
30890: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30891: LD_VAR 0 6
30895: PPUSH
30896: CALL_OW 257
30900: PUSH
30901: LD_INT 12
30903: PUSH
30904: LD_INT 16
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: IN
30911: IFFALSE 30932
// points := [ 5 , 3 , 2 ] ;
30913: LD_ADDR_VAR 0 9
30917: PUSH
30918: LD_INT 5
30920: PUSH
30921: LD_INT 3
30923: PUSH
30924: LD_INT 2
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: LIST
30931: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30932: LD_VAR 0 6
30936: PPUSH
30937: CALL_OW 257
30941: PUSH
30942: LD_INT 17
30944: EQUAL
30945: IFFALSE 30966
// points := [ 100 , 50 , 75 ] ;
30947: LD_ADDR_VAR 0 9
30951: PUSH
30952: LD_INT 100
30954: PUSH
30955: LD_INT 50
30957: PUSH
30958: LD_INT 75
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: LIST
30965: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30966: LD_VAR 0 6
30970: PPUSH
30971: CALL_OW 257
30975: PUSH
30976: LD_INT 15
30978: EQUAL
30979: IFFALSE 31000
// points := [ 10 , 5 , 3 ] ;
30981: LD_ADDR_VAR 0 9
30985: PUSH
30986: LD_INT 10
30988: PUSH
30989: LD_INT 5
30991: PUSH
30992: LD_INT 3
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: LIST
30999: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31000: LD_VAR 0 6
31004: PPUSH
31005: CALL_OW 257
31009: PUSH
31010: LD_INT 14
31012: EQUAL
31013: IFFALSE 31034
// points := [ 10 , 0 , 0 ] ;
31015: LD_ADDR_VAR 0 9
31019: PUSH
31020: LD_INT 10
31022: PUSH
31023: LD_INT 0
31025: PUSH
31026: LD_INT 0
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: LIST
31033: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31034: LD_VAR 0 6
31038: PPUSH
31039: CALL_OW 257
31043: PUSH
31044: LD_INT 11
31046: EQUAL
31047: IFFALSE 31068
// points := [ 30 , 10 , 5 ] ;
31049: LD_ADDR_VAR 0 9
31053: PUSH
31054: LD_INT 30
31056: PUSH
31057: LD_INT 10
31059: PUSH
31060: LD_INT 5
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: LIST
31067: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31068: LD_VAR 0 1
31072: PPUSH
31073: LD_INT 5
31075: PPUSH
31076: CALL_OW 321
31080: PUSH
31081: LD_INT 2
31083: EQUAL
31084: IFFALSE 31101
// bpoints := bpoints * 1.8 ;
31086: LD_ADDR_VAR 0 10
31090: PUSH
31091: LD_VAR 0 10
31095: PUSH
31096: LD_REAL  1.80000000000000E+0000
31099: MUL
31100: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31101: LD_VAR 0 6
31105: PPUSH
31106: CALL_OW 257
31110: PUSH
31111: LD_INT 1
31113: PUSH
31114: LD_INT 2
31116: PUSH
31117: LD_INT 3
31119: PUSH
31120: LD_INT 4
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: IN
31129: PUSH
31130: LD_VAR 0 1
31134: PPUSH
31135: LD_INT 51
31137: PPUSH
31138: CALL_OW 321
31142: PUSH
31143: LD_INT 2
31145: EQUAL
31146: AND
31147: IFFALSE 31164
// bpoints := bpoints * 1.2 ;
31149: LD_ADDR_VAR 0 10
31153: PUSH
31154: LD_VAR 0 10
31158: PUSH
31159: LD_REAL  1.20000000000000E+0000
31162: MUL
31163: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31164: LD_VAR 0 6
31168: PPUSH
31169: CALL_OW 257
31173: PUSH
31174: LD_INT 5
31176: PUSH
31177: LD_INT 7
31179: PUSH
31180: LD_INT 9
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: LIST
31187: IN
31188: PUSH
31189: LD_VAR 0 1
31193: PPUSH
31194: LD_INT 52
31196: PPUSH
31197: CALL_OW 321
31201: PUSH
31202: LD_INT 2
31204: EQUAL
31205: AND
31206: IFFALSE 31223
// bpoints := bpoints * 1.5 ;
31208: LD_ADDR_VAR 0 10
31212: PUSH
31213: LD_VAR 0 10
31217: PUSH
31218: LD_REAL  1.50000000000000E+0000
31221: MUL
31222: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31223: LD_VAR 0 1
31227: PPUSH
31228: LD_INT 66
31230: PPUSH
31231: CALL_OW 321
31235: PUSH
31236: LD_INT 2
31238: EQUAL
31239: IFFALSE 31256
// bpoints := bpoints * 1.1 ;
31241: LD_ADDR_VAR 0 10
31245: PUSH
31246: LD_VAR 0 10
31250: PUSH
31251: LD_REAL  1.10000000000000E+0000
31254: MUL
31255: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31256: LD_ADDR_VAR 0 10
31260: PUSH
31261: LD_VAR 0 10
31265: PUSH
31266: LD_VAR 0 6
31270: PPUSH
31271: LD_INT 1
31273: PPUSH
31274: CALL_OW 259
31278: PUSH
31279: LD_REAL  1.15000000000000E+0000
31282: MUL
31283: MUL
31284: ST_TO_ADDR
// end ; unit_vehicle :
31285: GO 32115
31287: LD_INT 2
31289: DOUBLE
31290: EQUAL
31291: IFTRUE 31295
31293: GO 32103
31295: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31296: LD_VAR 0 6
31300: PPUSH
31301: CALL_OW 264
31305: PUSH
31306: LD_INT 2
31308: PUSH
31309: LD_INT 42
31311: PUSH
31312: LD_INT 24
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: LIST
31319: IN
31320: IFFALSE 31341
// points := [ 25 , 5 , 3 ] ;
31322: LD_ADDR_VAR 0 9
31326: PUSH
31327: LD_INT 25
31329: PUSH
31330: LD_INT 5
31332: PUSH
31333: LD_INT 3
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: LIST
31340: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31341: LD_VAR 0 6
31345: PPUSH
31346: CALL_OW 264
31350: PUSH
31351: LD_INT 4
31353: PUSH
31354: LD_INT 43
31356: PUSH
31357: LD_INT 25
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: LIST
31364: IN
31365: IFFALSE 31386
// points := [ 40 , 15 , 5 ] ;
31367: LD_ADDR_VAR 0 9
31371: PUSH
31372: LD_INT 40
31374: PUSH
31375: LD_INT 15
31377: PUSH
31378: LD_INT 5
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: LIST
31385: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31386: LD_VAR 0 6
31390: PPUSH
31391: CALL_OW 264
31395: PUSH
31396: LD_INT 3
31398: PUSH
31399: LD_INT 23
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: IN
31406: IFFALSE 31427
// points := [ 7 , 25 , 8 ] ;
31408: LD_ADDR_VAR 0 9
31412: PUSH
31413: LD_INT 7
31415: PUSH
31416: LD_INT 25
31418: PUSH
31419: LD_INT 8
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: LIST
31426: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31427: LD_VAR 0 6
31431: PPUSH
31432: CALL_OW 264
31436: PUSH
31437: LD_INT 5
31439: PUSH
31440: LD_INT 27
31442: PUSH
31443: LD_INT 44
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: LIST
31450: IN
31451: IFFALSE 31472
// points := [ 14 , 50 , 16 ] ;
31453: LD_ADDR_VAR 0 9
31457: PUSH
31458: LD_INT 14
31460: PUSH
31461: LD_INT 50
31463: PUSH
31464: LD_INT 16
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: LIST
31471: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31472: LD_VAR 0 6
31476: PPUSH
31477: CALL_OW 264
31481: PUSH
31482: LD_INT 6
31484: PUSH
31485: LD_INT 46
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: IN
31492: IFFALSE 31513
// points := [ 32 , 120 , 70 ] ;
31494: LD_ADDR_VAR 0 9
31498: PUSH
31499: LD_INT 32
31501: PUSH
31502: LD_INT 120
31504: PUSH
31505: LD_INT 70
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: LIST
31512: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31513: LD_VAR 0 6
31517: PPUSH
31518: CALL_OW 264
31522: PUSH
31523: LD_INT 7
31525: PUSH
31526: LD_INT 28
31528: PUSH
31529: LD_INT 45
31531: PUSH
31532: LD_EXP 63
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: IN
31543: IFFALSE 31564
// points := [ 35 , 20 , 45 ] ;
31545: LD_ADDR_VAR 0 9
31549: PUSH
31550: LD_INT 35
31552: PUSH
31553: LD_INT 20
31555: PUSH
31556: LD_INT 45
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: LIST
31563: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31564: LD_VAR 0 6
31568: PPUSH
31569: CALL_OW 264
31573: PUSH
31574: LD_INT 47
31576: PUSH
31577: EMPTY
31578: LIST
31579: IN
31580: IFFALSE 31601
// points := [ 67 , 45 , 75 ] ;
31582: LD_ADDR_VAR 0 9
31586: PUSH
31587: LD_INT 67
31589: PUSH
31590: LD_INT 45
31592: PUSH
31593: LD_INT 75
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: LIST
31600: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31601: LD_VAR 0 6
31605: PPUSH
31606: CALL_OW 264
31610: PUSH
31611: LD_INT 26
31613: PUSH
31614: EMPTY
31615: LIST
31616: IN
31617: IFFALSE 31638
// points := [ 120 , 30 , 80 ] ;
31619: LD_ADDR_VAR 0 9
31623: PUSH
31624: LD_INT 120
31626: PUSH
31627: LD_INT 30
31629: PUSH
31630: LD_INT 80
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: LIST
31637: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31638: LD_VAR 0 6
31642: PPUSH
31643: CALL_OW 264
31647: PUSH
31648: LD_INT 22
31650: PUSH
31651: EMPTY
31652: LIST
31653: IN
31654: IFFALSE 31675
// points := [ 40 , 1 , 1 ] ;
31656: LD_ADDR_VAR 0 9
31660: PUSH
31661: LD_INT 40
31663: PUSH
31664: LD_INT 1
31666: PUSH
31667: LD_INT 1
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: LIST
31674: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31675: LD_VAR 0 6
31679: PPUSH
31680: CALL_OW 264
31684: PUSH
31685: LD_INT 29
31687: PUSH
31688: EMPTY
31689: LIST
31690: IN
31691: IFFALSE 31712
// points := [ 70 , 200 , 400 ] ;
31693: LD_ADDR_VAR 0 9
31697: PUSH
31698: LD_INT 70
31700: PUSH
31701: LD_INT 200
31703: PUSH
31704: LD_INT 400
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: LIST
31711: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31712: LD_VAR 0 6
31716: PPUSH
31717: CALL_OW 264
31721: PUSH
31722: LD_INT 14
31724: PUSH
31725: LD_INT 53
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: IN
31732: IFFALSE 31753
// points := [ 40 , 10 , 20 ] ;
31734: LD_ADDR_VAR 0 9
31738: PUSH
31739: LD_INT 40
31741: PUSH
31742: LD_INT 10
31744: PUSH
31745: LD_INT 20
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: LIST
31752: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31753: LD_VAR 0 6
31757: PPUSH
31758: CALL_OW 264
31762: PUSH
31763: LD_INT 9
31765: PUSH
31766: EMPTY
31767: LIST
31768: IN
31769: IFFALSE 31790
// points := [ 5 , 70 , 20 ] ;
31771: LD_ADDR_VAR 0 9
31775: PUSH
31776: LD_INT 5
31778: PUSH
31779: LD_INT 70
31781: PUSH
31782: LD_INT 20
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: LIST
31789: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31790: LD_VAR 0 6
31794: PPUSH
31795: CALL_OW 264
31799: PUSH
31800: LD_INT 10
31802: PUSH
31803: EMPTY
31804: LIST
31805: IN
31806: IFFALSE 31827
// points := [ 35 , 110 , 70 ] ;
31808: LD_ADDR_VAR 0 9
31812: PUSH
31813: LD_INT 35
31815: PUSH
31816: LD_INT 110
31818: PUSH
31819: LD_INT 70
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: LIST
31826: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31827: LD_VAR 0 6
31831: PPUSH
31832: CALL_OW 265
31836: PUSH
31837: LD_INT 25
31839: EQUAL
31840: IFFALSE 31861
// points := [ 80 , 65 , 100 ] ;
31842: LD_ADDR_VAR 0 9
31846: PUSH
31847: LD_INT 80
31849: PUSH
31850: LD_INT 65
31852: PUSH
31853: LD_INT 100
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: LIST
31860: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31861: LD_VAR 0 6
31865: PPUSH
31866: CALL_OW 263
31870: PUSH
31871: LD_INT 1
31873: EQUAL
31874: IFFALSE 31909
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31876: LD_ADDR_VAR 0 10
31880: PUSH
31881: LD_VAR 0 10
31885: PUSH
31886: LD_VAR 0 6
31890: PPUSH
31891: CALL_OW 311
31895: PPUSH
31896: LD_INT 3
31898: PPUSH
31899: CALL_OW 259
31903: PUSH
31904: LD_INT 4
31906: MUL
31907: MUL
31908: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31909: LD_VAR 0 6
31913: PPUSH
31914: CALL_OW 263
31918: PUSH
31919: LD_INT 2
31921: EQUAL
31922: IFFALSE 31973
// begin j := IsControledBy ( i ) ;
31924: LD_ADDR_VAR 0 7
31928: PUSH
31929: LD_VAR 0 6
31933: PPUSH
31934: CALL_OW 312
31938: ST_TO_ADDR
// if j then
31939: LD_VAR 0 7
31943: IFFALSE 31973
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31945: LD_ADDR_VAR 0 10
31949: PUSH
31950: LD_VAR 0 10
31954: PUSH
31955: LD_VAR 0 7
31959: PPUSH
31960: LD_INT 3
31962: PPUSH
31963: CALL_OW 259
31967: PUSH
31968: LD_INT 3
31970: MUL
31971: MUL
31972: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31973: LD_VAR 0 6
31977: PPUSH
31978: CALL_OW 264
31982: PUSH
31983: LD_INT 5
31985: PUSH
31986: LD_INT 6
31988: PUSH
31989: LD_INT 46
31991: PUSH
31992: LD_INT 44
31994: PUSH
31995: LD_INT 47
31997: PUSH
31998: LD_INT 45
32000: PUSH
32001: LD_INT 28
32003: PUSH
32004: LD_INT 7
32006: PUSH
32007: LD_INT 27
32009: PUSH
32010: LD_INT 29
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: IN
32025: PUSH
32026: LD_VAR 0 1
32030: PPUSH
32031: LD_INT 52
32033: PPUSH
32034: CALL_OW 321
32038: PUSH
32039: LD_INT 2
32041: EQUAL
32042: AND
32043: IFFALSE 32060
// bpoints := bpoints * 1.2 ;
32045: LD_ADDR_VAR 0 10
32049: PUSH
32050: LD_VAR 0 10
32054: PUSH
32055: LD_REAL  1.20000000000000E+0000
32058: MUL
32059: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32060: LD_VAR 0 6
32064: PPUSH
32065: CALL_OW 264
32069: PUSH
32070: LD_INT 6
32072: PUSH
32073: LD_INT 46
32075: PUSH
32076: LD_INT 47
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: LIST
32083: IN
32084: IFFALSE 32101
// bpoints := bpoints * 1.2 ;
32086: LD_ADDR_VAR 0 10
32090: PUSH
32091: LD_VAR 0 10
32095: PUSH
32096: LD_REAL  1.20000000000000E+0000
32099: MUL
32100: ST_TO_ADDR
// end ; unit_building :
32101: GO 32115
32103: LD_INT 3
32105: DOUBLE
32106: EQUAL
32107: IFTRUE 32111
32109: GO 32114
32111: POP
// ; end ;
32112: GO 32115
32114: POP
// for j = 1 to 3 do
32115: LD_ADDR_VAR 0 7
32119: PUSH
32120: DOUBLE
32121: LD_INT 1
32123: DEC
32124: ST_TO_ADDR
32125: LD_INT 3
32127: PUSH
32128: FOR_TO
32129: IFFALSE 32182
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32131: LD_ADDR_VAR 0 5
32135: PUSH
32136: LD_VAR 0 5
32140: PPUSH
32141: LD_VAR 0 7
32145: PPUSH
32146: LD_VAR 0 5
32150: PUSH
32151: LD_VAR 0 7
32155: ARRAY
32156: PUSH
32157: LD_VAR 0 9
32161: PUSH
32162: LD_VAR 0 7
32166: ARRAY
32167: PUSH
32168: LD_VAR 0 10
32172: MUL
32173: PLUS
32174: PPUSH
32175: CALL_OW 1
32179: ST_TO_ADDR
32180: GO 32128
32182: POP
32183: POP
// end ;
32184: GO 30661
32186: POP
32187: POP
// result := Replace ( result , 4 , tmp ) ;
32188: LD_ADDR_VAR 0 5
32192: PUSH
32193: LD_VAR 0 5
32197: PPUSH
32198: LD_INT 4
32200: PPUSH
32201: LD_VAR 0 8
32205: PPUSH
32206: CALL_OW 1
32210: ST_TO_ADDR
// end ;
32211: LD_VAR 0 5
32215: RET
// export function DangerAtRange ( unit , range ) ; begin
32216: LD_INT 0
32218: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32219: LD_ADDR_VAR 0 3
32223: PUSH
32224: LD_VAR 0 1
32228: PPUSH
32229: CALL_OW 255
32233: PPUSH
32234: LD_VAR 0 1
32238: PPUSH
32239: CALL_OW 250
32243: PPUSH
32244: LD_VAR 0 1
32248: PPUSH
32249: CALL_OW 251
32253: PPUSH
32254: LD_VAR 0 2
32258: PPUSH
32259: CALL 30513 0 4
32263: ST_TO_ADDR
// end ;
32264: LD_VAR 0 3
32268: RET
// export function DangerInArea ( side , area ) ; begin
32269: LD_INT 0
32271: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32272: LD_ADDR_VAR 0 3
32276: PUSH
32277: LD_VAR 0 2
32281: PPUSH
32282: LD_INT 81
32284: PUSH
32285: LD_VAR 0 1
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PPUSH
32294: CALL_OW 70
32298: ST_TO_ADDR
// end ;
32299: LD_VAR 0 3
32303: RET
// export function IsExtension ( b ) ; begin
32304: LD_INT 0
32306: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32307: LD_ADDR_VAR 0 2
32311: PUSH
32312: LD_VAR 0 1
32316: PUSH
32317: LD_INT 23
32319: PUSH
32320: LD_INT 20
32322: PUSH
32323: LD_INT 22
32325: PUSH
32326: LD_INT 17
32328: PUSH
32329: LD_INT 24
32331: PUSH
32332: LD_INT 21
32334: PUSH
32335: LD_INT 19
32337: PUSH
32338: LD_INT 16
32340: PUSH
32341: LD_INT 25
32343: PUSH
32344: LD_INT 18
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: IN
32359: ST_TO_ADDR
// end ;
32360: LD_VAR 0 2
32364: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32365: LD_INT 0
32367: PPUSH
32368: PPUSH
32369: PPUSH
// result := [ ] ;
32370: LD_ADDR_VAR 0 4
32374: PUSH
32375: EMPTY
32376: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32377: LD_ADDR_VAR 0 5
32381: PUSH
32382: LD_VAR 0 2
32386: PPUSH
32387: LD_INT 21
32389: PUSH
32390: LD_INT 3
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PPUSH
32397: CALL_OW 70
32401: ST_TO_ADDR
// if not tmp then
32402: LD_VAR 0 5
32406: NOT
32407: IFFALSE 32411
// exit ;
32409: GO 32475
// if checkLink then
32411: LD_VAR 0 3
32415: IFFALSE 32465
// begin for i in tmp do
32417: LD_ADDR_VAR 0 6
32421: PUSH
32422: LD_VAR 0 5
32426: PUSH
32427: FOR_IN
32428: IFFALSE 32463
// if GetBase ( i ) <> base then
32430: LD_VAR 0 6
32434: PPUSH
32435: CALL_OW 274
32439: PUSH
32440: LD_VAR 0 1
32444: NONEQUAL
32445: IFFALSE 32461
// ComLinkToBase ( base , i ) ;
32447: LD_VAR 0 1
32451: PPUSH
32452: LD_VAR 0 6
32456: PPUSH
32457: CALL_OW 169
32461: GO 32427
32463: POP
32464: POP
// end ; result := tmp ;
32465: LD_ADDR_VAR 0 4
32469: PUSH
32470: LD_VAR 0 5
32474: ST_TO_ADDR
// end ;
32475: LD_VAR 0 4
32479: RET
// export function ComComplete ( units , b ) ; var i ; begin
32480: LD_INT 0
32482: PPUSH
32483: PPUSH
// if not units then
32484: LD_VAR 0 1
32488: NOT
32489: IFFALSE 32493
// exit ;
32491: GO 32583
// for i in units do
32493: LD_ADDR_VAR 0 4
32497: PUSH
32498: LD_VAR 0 1
32502: PUSH
32503: FOR_IN
32504: IFFALSE 32581
// if BuildingStatus ( b ) = bs_build then
32506: LD_VAR 0 2
32510: PPUSH
32511: CALL_OW 461
32515: PUSH
32516: LD_INT 1
32518: EQUAL
32519: IFFALSE 32579
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32521: LD_VAR 0 4
32525: PPUSH
32526: LD_STRING h
32528: PUSH
32529: LD_VAR 0 2
32533: PPUSH
32534: CALL_OW 250
32538: PUSH
32539: LD_VAR 0 2
32543: PPUSH
32544: CALL_OW 251
32548: PUSH
32549: LD_VAR 0 2
32553: PUSH
32554: LD_INT 0
32556: PUSH
32557: LD_INT 0
32559: PUSH
32560: LD_INT 0
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: PUSH
32572: EMPTY
32573: LIST
32574: PPUSH
32575: CALL_OW 446
32579: GO 32503
32581: POP
32582: POP
// end ;
32583: LD_VAR 0 3
32587: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32588: LD_INT 0
32590: PPUSH
32591: PPUSH
32592: PPUSH
32593: PPUSH
32594: PPUSH
32595: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32596: LD_VAR 0 1
32600: NOT
32601: PUSH
32602: LD_VAR 0 1
32606: PPUSH
32607: CALL_OW 263
32611: PUSH
32612: LD_INT 2
32614: NONEQUAL
32615: OR
32616: IFFALSE 32620
// exit ;
32618: GO 32936
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32620: LD_ADDR_VAR 0 6
32624: PUSH
32625: LD_INT 22
32627: PUSH
32628: LD_VAR 0 1
32632: PPUSH
32633: CALL_OW 255
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 2
32644: PUSH
32645: LD_INT 30
32647: PUSH
32648: LD_INT 36
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 34
32657: PUSH
32658: LD_INT 31
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: LIST
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PPUSH
32674: CALL_OW 69
32678: ST_TO_ADDR
// if not tmp then
32679: LD_VAR 0 6
32683: NOT
32684: IFFALSE 32688
// exit ;
32686: GO 32936
// result := [ ] ;
32688: LD_ADDR_VAR 0 2
32692: PUSH
32693: EMPTY
32694: ST_TO_ADDR
// for i in tmp do
32695: LD_ADDR_VAR 0 3
32699: PUSH
32700: LD_VAR 0 6
32704: PUSH
32705: FOR_IN
32706: IFFALSE 32777
// begin t := UnitsInside ( i ) ;
32708: LD_ADDR_VAR 0 4
32712: PUSH
32713: LD_VAR 0 3
32717: PPUSH
32718: CALL_OW 313
32722: ST_TO_ADDR
// if t then
32723: LD_VAR 0 4
32727: IFFALSE 32775
// for j in t do
32729: LD_ADDR_VAR 0 7
32733: PUSH
32734: LD_VAR 0 4
32738: PUSH
32739: FOR_IN
32740: IFFALSE 32773
// result := Replace ( result , result + 1 , j ) ;
32742: LD_ADDR_VAR 0 2
32746: PUSH
32747: LD_VAR 0 2
32751: PPUSH
32752: LD_VAR 0 2
32756: PUSH
32757: LD_INT 1
32759: PLUS
32760: PPUSH
32761: LD_VAR 0 7
32765: PPUSH
32766: CALL_OW 1
32770: ST_TO_ADDR
32771: GO 32739
32773: POP
32774: POP
// end ;
32775: GO 32705
32777: POP
32778: POP
// if not result then
32779: LD_VAR 0 2
32783: NOT
32784: IFFALSE 32788
// exit ;
32786: GO 32936
// mech := result [ 1 ] ;
32788: LD_ADDR_VAR 0 5
32792: PUSH
32793: LD_VAR 0 2
32797: PUSH
32798: LD_INT 1
32800: ARRAY
32801: ST_TO_ADDR
// if result > 1 then
32802: LD_VAR 0 2
32806: PUSH
32807: LD_INT 1
32809: GREATER
32810: IFFALSE 32922
// begin for i = 2 to result do
32812: LD_ADDR_VAR 0 3
32816: PUSH
32817: DOUBLE
32818: LD_INT 2
32820: DEC
32821: ST_TO_ADDR
32822: LD_VAR 0 2
32826: PUSH
32827: FOR_TO
32828: IFFALSE 32920
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32830: LD_ADDR_VAR 0 4
32834: PUSH
32835: LD_VAR 0 2
32839: PUSH
32840: LD_VAR 0 3
32844: ARRAY
32845: PPUSH
32846: LD_INT 3
32848: PPUSH
32849: CALL_OW 259
32853: PUSH
32854: LD_VAR 0 2
32858: PUSH
32859: LD_VAR 0 3
32863: ARRAY
32864: PPUSH
32865: CALL_OW 432
32869: MINUS
32870: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32871: LD_VAR 0 4
32875: PUSH
32876: LD_VAR 0 5
32880: PPUSH
32881: LD_INT 3
32883: PPUSH
32884: CALL_OW 259
32888: PUSH
32889: LD_VAR 0 5
32893: PPUSH
32894: CALL_OW 432
32898: MINUS
32899: GREATEREQUAL
32900: IFFALSE 32918
// mech := result [ i ] ;
32902: LD_ADDR_VAR 0 5
32906: PUSH
32907: LD_VAR 0 2
32911: PUSH
32912: LD_VAR 0 3
32916: ARRAY
32917: ST_TO_ADDR
// end ;
32918: GO 32827
32920: POP
32921: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32922: LD_VAR 0 1
32926: PPUSH
32927: LD_VAR 0 5
32931: PPUSH
32932: CALL_OW 135
// end ;
32936: LD_VAR 0 2
32940: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32941: LD_INT 0
32943: PPUSH
32944: PPUSH
32945: PPUSH
32946: PPUSH
32947: PPUSH
32948: PPUSH
32949: PPUSH
32950: PPUSH
32951: PPUSH
32952: PPUSH
32953: PPUSH
32954: PPUSH
32955: PPUSH
// result := [ ] ;
32956: LD_ADDR_VAR 0 7
32960: PUSH
32961: EMPTY
32962: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32963: LD_VAR 0 1
32967: PPUSH
32968: CALL_OW 266
32972: PUSH
32973: LD_INT 0
32975: PUSH
32976: LD_INT 1
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: IN
32983: NOT
32984: IFFALSE 32988
// exit ;
32986: GO 34622
// if name then
32988: LD_VAR 0 3
32992: IFFALSE 33008
// SetBName ( base_dep , name ) ;
32994: LD_VAR 0 1
32998: PPUSH
32999: LD_VAR 0 3
33003: PPUSH
33004: CALL_OW 500
// base := GetBase ( base_dep ) ;
33008: LD_ADDR_VAR 0 15
33012: PUSH
33013: LD_VAR 0 1
33017: PPUSH
33018: CALL_OW 274
33022: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33023: LD_ADDR_VAR 0 16
33027: PUSH
33028: LD_VAR 0 1
33032: PPUSH
33033: CALL_OW 255
33037: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33038: LD_ADDR_VAR 0 17
33042: PUSH
33043: LD_VAR 0 1
33047: PPUSH
33048: CALL_OW 248
33052: ST_TO_ADDR
// if sources then
33053: LD_VAR 0 5
33057: IFFALSE 33104
// for i = 1 to 3 do
33059: LD_ADDR_VAR 0 8
33063: PUSH
33064: DOUBLE
33065: LD_INT 1
33067: DEC
33068: ST_TO_ADDR
33069: LD_INT 3
33071: PUSH
33072: FOR_TO
33073: IFFALSE 33102
// AddResourceType ( base , i , sources [ i ] ) ;
33075: LD_VAR 0 15
33079: PPUSH
33080: LD_VAR 0 8
33084: PPUSH
33085: LD_VAR 0 5
33089: PUSH
33090: LD_VAR 0 8
33094: ARRAY
33095: PPUSH
33096: CALL_OW 276
33100: GO 33072
33102: POP
33103: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33104: LD_ADDR_VAR 0 18
33108: PUSH
33109: LD_VAR 0 15
33113: PPUSH
33114: LD_VAR 0 2
33118: PPUSH
33119: LD_INT 1
33121: PPUSH
33122: CALL 32365 0 3
33126: ST_TO_ADDR
// InitHc ;
33127: CALL_OW 19
// InitUc ;
33131: CALL_OW 18
// uc_side := side ;
33135: LD_ADDR_OWVAR 20
33139: PUSH
33140: LD_VAR 0 16
33144: ST_TO_ADDR
// uc_nation := nation ;
33145: LD_ADDR_OWVAR 21
33149: PUSH
33150: LD_VAR 0 17
33154: ST_TO_ADDR
// if buildings then
33155: LD_VAR 0 18
33159: IFFALSE 34481
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33161: LD_ADDR_VAR 0 19
33165: PUSH
33166: LD_VAR 0 18
33170: PPUSH
33171: LD_INT 2
33173: PUSH
33174: LD_INT 30
33176: PUSH
33177: LD_INT 29
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 30
33186: PUSH
33187: LD_INT 30
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: LIST
33198: PPUSH
33199: CALL_OW 72
33203: ST_TO_ADDR
// if tmp then
33204: LD_VAR 0 19
33208: IFFALSE 33256
// for i in tmp do
33210: LD_ADDR_VAR 0 8
33214: PUSH
33215: LD_VAR 0 19
33219: PUSH
33220: FOR_IN
33221: IFFALSE 33254
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33223: LD_VAR 0 8
33227: PPUSH
33228: CALL_OW 250
33232: PPUSH
33233: LD_VAR 0 8
33237: PPUSH
33238: CALL_OW 251
33242: PPUSH
33243: LD_VAR 0 16
33247: PPUSH
33248: CALL_OW 441
33252: GO 33220
33254: POP
33255: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33256: LD_VAR 0 18
33260: PPUSH
33261: LD_INT 2
33263: PUSH
33264: LD_INT 30
33266: PUSH
33267: LD_INT 32
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 30
33276: PUSH
33277: LD_INT 33
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: LIST
33288: PPUSH
33289: CALL_OW 72
33293: IFFALSE 33381
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33295: LD_ADDR_VAR 0 8
33299: PUSH
33300: LD_VAR 0 18
33304: PPUSH
33305: LD_INT 2
33307: PUSH
33308: LD_INT 30
33310: PUSH
33311: LD_INT 32
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: LD_INT 30
33320: PUSH
33321: LD_INT 33
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: LIST
33332: PPUSH
33333: CALL_OW 72
33337: PUSH
33338: FOR_IN
33339: IFFALSE 33379
// begin if not GetBWeapon ( i ) then
33341: LD_VAR 0 8
33345: PPUSH
33346: CALL_OW 269
33350: NOT
33351: IFFALSE 33377
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33353: LD_VAR 0 8
33357: PPUSH
33358: LD_VAR 0 8
33362: PPUSH
33363: LD_VAR 0 2
33367: PPUSH
33368: CALL 34627 0 2
33372: PPUSH
33373: CALL_OW 431
// end ;
33377: GO 33338
33379: POP
33380: POP
// end ; for i = 1 to personel do
33381: LD_ADDR_VAR 0 8
33385: PUSH
33386: DOUBLE
33387: LD_INT 1
33389: DEC
33390: ST_TO_ADDR
33391: LD_VAR 0 6
33395: PUSH
33396: FOR_TO
33397: IFFALSE 34461
// begin if i > 4 then
33399: LD_VAR 0 8
33403: PUSH
33404: LD_INT 4
33406: GREATER
33407: IFFALSE 33411
// break ;
33409: GO 34461
// case i of 1 :
33411: LD_VAR 0 8
33415: PUSH
33416: LD_INT 1
33418: DOUBLE
33419: EQUAL
33420: IFTRUE 33424
33422: GO 33504
33424: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33425: LD_ADDR_VAR 0 12
33429: PUSH
33430: LD_VAR 0 18
33434: PPUSH
33435: LD_INT 22
33437: PUSH
33438: LD_VAR 0 16
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 58
33449: PUSH
33450: EMPTY
33451: LIST
33452: PUSH
33453: LD_INT 2
33455: PUSH
33456: LD_INT 30
33458: PUSH
33459: LD_INT 32
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 30
33468: PUSH
33469: LD_INT 4
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 30
33478: PUSH
33479: LD_INT 5
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: LIST
33496: PPUSH
33497: CALL_OW 72
33501: ST_TO_ADDR
33502: GO 33726
33504: LD_INT 2
33506: DOUBLE
33507: EQUAL
33508: IFTRUE 33512
33510: GO 33574
33512: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33513: LD_ADDR_VAR 0 12
33517: PUSH
33518: LD_VAR 0 18
33522: PPUSH
33523: LD_INT 22
33525: PUSH
33526: LD_VAR 0 16
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 2
33537: PUSH
33538: LD_INT 30
33540: PUSH
33541: LD_INT 0
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 30
33550: PUSH
33551: LD_INT 1
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: LIST
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PPUSH
33567: CALL_OW 72
33571: ST_TO_ADDR
33572: GO 33726
33574: LD_INT 3
33576: DOUBLE
33577: EQUAL
33578: IFTRUE 33582
33580: GO 33644
33582: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33583: LD_ADDR_VAR 0 12
33587: PUSH
33588: LD_VAR 0 18
33592: PPUSH
33593: LD_INT 22
33595: PUSH
33596: LD_VAR 0 16
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 2
33607: PUSH
33608: LD_INT 30
33610: PUSH
33611: LD_INT 2
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 30
33620: PUSH
33621: LD_INT 3
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: LIST
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PPUSH
33637: CALL_OW 72
33641: ST_TO_ADDR
33642: GO 33726
33644: LD_INT 4
33646: DOUBLE
33647: EQUAL
33648: IFTRUE 33652
33650: GO 33725
33652: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33653: LD_ADDR_VAR 0 12
33657: PUSH
33658: LD_VAR 0 18
33662: PPUSH
33663: LD_INT 22
33665: PUSH
33666: LD_VAR 0 16
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 2
33677: PUSH
33678: LD_INT 30
33680: PUSH
33681: LD_INT 6
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 30
33690: PUSH
33691: LD_INT 7
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 30
33700: PUSH
33701: LD_INT 8
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PPUSH
33718: CALL_OW 72
33722: ST_TO_ADDR
33723: GO 33726
33725: POP
// if i = 1 then
33726: LD_VAR 0 8
33730: PUSH
33731: LD_INT 1
33733: EQUAL
33734: IFFALSE 33845
// begin tmp := [ ] ;
33736: LD_ADDR_VAR 0 19
33740: PUSH
33741: EMPTY
33742: ST_TO_ADDR
// for j in f do
33743: LD_ADDR_VAR 0 9
33747: PUSH
33748: LD_VAR 0 12
33752: PUSH
33753: FOR_IN
33754: IFFALSE 33827
// if GetBType ( j ) = b_bunker then
33756: LD_VAR 0 9
33760: PPUSH
33761: CALL_OW 266
33765: PUSH
33766: LD_INT 32
33768: EQUAL
33769: IFFALSE 33796
// tmp := Insert ( tmp , 1 , j ) else
33771: LD_ADDR_VAR 0 19
33775: PUSH
33776: LD_VAR 0 19
33780: PPUSH
33781: LD_INT 1
33783: PPUSH
33784: LD_VAR 0 9
33788: PPUSH
33789: CALL_OW 2
33793: ST_TO_ADDR
33794: GO 33825
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33796: LD_ADDR_VAR 0 19
33800: PUSH
33801: LD_VAR 0 19
33805: PPUSH
33806: LD_VAR 0 19
33810: PUSH
33811: LD_INT 1
33813: PLUS
33814: PPUSH
33815: LD_VAR 0 9
33819: PPUSH
33820: CALL_OW 2
33824: ST_TO_ADDR
33825: GO 33753
33827: POP
33828: POP
// if tmp then
33829: LD_VAR 0 19
33833: IFFALSE 33845
// f := tmp ;
33835: LD_ADDR_VAR 0 12
33839: PUSH
33840: LD_VAR 0 19
33844: ST_TO_ADDR
// end ; x := personel [ i ] ;
33845: LD_ADDR_VAR 0 13
33849: PUSH
33850: LD_VAR 0 6
33854: PUSH
33855: LD_VAR 0 8
33859: ARRAY
33860: ST_TO_ADDR
// if x = - 1 then
33861: LD_VAR 0 13
33865: PUSH
33866: LD_INT 1
33868: NEG
33869: EQUAL
33870: IFFALSE 34079
// begin for j in f do
33872: LD_ADDR_VAR 0 9
33876: PUSH
33877: LD_VAR 0 12
33881: PUSH
33882: FOR_IN
33883: IFFALSE 34075
// repeat InitHc ;
33885: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33889: LD_VAR 0 9
33893: PPUSH
33894: CALL_OW 266
33898: PUSH
33899: LD_INT 5
33901: EQUAL
33902: IFFALSE 33972
// begin if UnitsInside ( j ) < 3 then
33904: LD_VAR 0 9
33908: PPUSH
33909: CALL_OW 313
33913: PUSH
33914: LD_INT 3
33916: LESS
33917: IFFALSE 33953
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33919: LD_INT 0
33921: PPUSH
33922: LD_INT 5
33924: PUSH
33925: LD_INT 8
33927: PUSH
33928: LD_INT 9
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: LIST
33935: PUSH
33936: LD_VAR 0 17
33940: ARRAY
33941: PPUSH
33942: LD_VAR 0 4
33946: PPUSH
33947: CALL_OW 380
33951: GO 33970
// PrepareHuman ( false , i , skill ) ;
33953: LD_INT 0
33955: PPUSH
33956: LD_VAR 0 8
33960: PPUSH
33961: LD_VAR 0 4
33965: PPUSH
33966: CALL_OW 380
// end else
33970: GO 33989
// PrepareHuman ( false , i , skill ) ;
33972: LD_INT 0
33974: PPUSH
33975: LD_VAR 0 8
33979: PPUSH
33980: LD_VAR 0 4
33984: PPUSH
33985: CALL_OW 380
// un := CreateHuman ;
33989: LD_ADDR_VAR 0 14
33993: PUSH
33994: CALL_OW 44
33998: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33999: LD_ADDR_VAR 0 7
34003: PUSH
34004: LD_VAR 0 7
34008: PPUSH
34009: LD_INT 1
34011: PPUSH
34012: LD_VAR 0 14
34016: PPUSH
34017: CALL_OW 2
34021: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34022: LD_VAR 0 14
34026: PPUSH
34027: LD_VAR 0 9
34031: PPUSH
34032: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34036: LD_VAR 0 9
34040: PPUSH
34041: CALL_OW 313
34045: PUSH
34046: LD_INT 6
34048: EQUAL
34049: PUSH
34050: LD_VAR 0 9
34054: PPUSH
34055: CALL_OW 266
34059: PUSH
34060: LD_INT 32
34062: PUSH
34063: LD_INT 31
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: IN
34070: OR
34071: IFFALSE 33885
34073: GO 33882
34075: POP
34076: POP
// end else
34077: GO 34459
// for j = 1 to x do
34079: LD_ADDR_VAR 0 9
34083: PUSH
34084: DOUBLE
34085: LD_INT 1
34087: DEC
34088: ST_TO_ADDR
34089: LD_VAR 0 13
34093: PUSH
34094: FOR_TO
34095: IFFALSE 34457
// begin InitHc ;
34097: CALL_OW 19
// if not f then
34101: LD_VAR 0 12
34105: NOT
34106: IFFALSE 34195
// begin PrepareHuman ( false , i , skill ) ;
34108: LD_INT 0
34110: PPUSH
34111: LD_VAR 0 8
34115: PPUSH
34116: LD_VAR 0 4
34120: PPUSH
34121: CALL_OW 380
// un := CreateHuman ;
34125: LD_ADDR_VAR 0 14
34129: PUSH
34130: CALL_OW 44
34134: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34135: LD_ADDR_VAR 0 7
34139: PUSH
34140: LD_VAR 0 7
34144: PPUSH
34145: LD_INT 1
34147: PPUSH
34148: LD_VAR 0 14
34152: PPUSH
34153: CALL_OW 2
34157: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34158: LD_VAR 0 14
34162: PPUSH
34163: LD_VAR 0 1
34167: PPUSH
34168: CALL_OW 250
34172: PPUSH
34173: LD_VAR 0 1
34177: PPUSH
34178: CALL_OW 251
34182: PPUSH
34183: LD_INT 10
34185: PPUSH
34186: LD_INT 0
34188: PPUSH
34189: CALL_OW 50
// continue ;
34193: GO 34094
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34195: LD_VAR 0 12
34199: PUSH
34200: LD_INT 1
34202: ARRAY
34203: PPUSH
34204: CALL_OW 313
34208: PUSH
34209: LD_VAR 0 12
34213: PUSH
34214: LD_INT 1
34216: ARRAY
34217: PPUSH
34218: CALL_OW 266
34222: PUSH
34223: LD_INT 32
34225: PUSH
34226: LD_INT 31
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: IN
34233: AND
34234: PUSH
34235: LD_VAR 0 12
34239: PUSH
34240: LD_INT 1
34242: ARRAY
34243: PPUSH
34244: CALL_OW 313
34248: PUSH
34249: LD_INT 6
34251: EQUAL
34252: OR
34253: IFFALSE 34273
// f := Delete ( f , 1 ) ;
34255: LD_ADDR_VAR 0 12
34259: PUSH
34260: LD_VAR 0 12
34264: PPUSH
34265: LD_INT 1
34267: PPUSH
34268: CALL_OW 3
34272: ST_TO_ADDR
// if not f then
34273: LD_VAR 0 12
34277: NOT
34278: IFFALSE 34296
// begin x := x + 2 ;
34280: LD_ADDR_VAR 0 13
34284: PUSH
34285: LD_VAR 0 13
34289: PUSH
34290: LD_INT 2
34292: PLUS
34293: ST_TO_ADDR
// continue ;
34294: GO 34094
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34296: LD_VAR 0 12
34300: PUSH
34301: LD_INT 1
34303: ARRAY
34304: PPUSH
34305: CALL_OW 266
34309: PUSH
34310: LD_INT 5
34312: EQUAL
34313: IFFALSE 34387
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34315: LD_VAR 0 12
34319: PUSH
34320: LD_INT 1
34322: ARRAY
34323: PPUSH
34324: CALL_OW 313
34328: PUSH
34329: LD_INT 3
34331: LESS
34332: IFFALSE 34368
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34334: LD_INT 0
34336: PPUSH
34337: LD_INT 5
34339: PUSH
34340: LD_INT 8
34342: PUSH
34343: LD_INT 9
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: LIST
34350: PUSH
34351: LD_VAR 0 17
34355: ARRAY
34356: PPUSH
34357: LD_VAR 0 4
34361: PPUSH
34362: CALL_OW 380
34366: GO 34385
// PrepareHuman ( false , i , skill ) ;
34368: LD_INT 0
34370: PPUSH
34371: LD_VAR 0 8
34375: PPUSH
34376: LD_VAR 0 4
34380: PPUSH
34381: CALL_OW 380
// end else
34385: GO 34404
// PrepareHuman ( false , i , skill ) ;
34387: LD_INT 0
34389: PPUSH
34390: LD_VAR 0 8
34394: PPUSH
34395: LD_VAR 0 4
34399: PPUSH
34400: CALL_OW 380
// un := CreateHuman ;
34404: LD_ADDR_VAR 0 14
34408: PUSH
34409: CALL_OW 44
34413: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34414: LD_ADDR_VAR 0 7
34418: PUSH
34419: LD_VAR 0 7
34423: PPUSH
34424: LD_INT 1
34426: PPUSH
34427: LD_VAR 0 14
34431: PPUSH
34432: CALL_OW 2
34436: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34437: LD_VAR 0 14
34441: PPUSH
34442: LD_VAR 0 12
34446: PUSH
34447: LD_INT 1
34449: ARRAY
34450: PPUSH
34451: CALL_OW 52
// end ;
34455: GO 34094
34457: POP
34458: POP
// end ;
34459: GO 33396
34461: POP
34462: POP
// result := result ^ buildings ;
34463: LD_ADDR_VAR 0 7
34467: PUSH
34468: LD_VAR 0 7
34472: PUSH
34473: LD_VAR 0 18
34477: ADD
34478: ST_TO_ADDR
// end else
34479: GO 34622
// begin for i = 1 to personel do
34481: LD_ADDR_VAR 0 8
34485: PUSH
34486: DOUBLE
34487: LD_INT 1
34489: DEC
34490: ST_TO_ADDR
34491: LD_VAR 0 6
34495: PUSH
34496: FOR_TO
34497: IFFALSE 34620
// begin if i > 4 then
34499: LD_VAR 0 8
34503: PUSH
34504: LD_INT 4
34506: GREATER
34507: IFFALSE 34511
// break ;
34509: GO 34620
// x := personel [ i ] ;
34511: LD_ADDR_VAR 0 13
34515: PUSH
34516: LD_VAR 0 6
34520: PUSH
34521: LD_VAR 0 8
34525: ARRAY
34526: ST_TO_ADDR
// if x = - 1 then
34527: LD_VAR 0 13
34531: PUSH
34532: LD_INT 1
34534: NEG
34535: EQUAL
34536: IFFALSE 34540
// continue ;
34538: GO 34496
// PrepareHuman ( false , i , skill ) ;
34540: LD_INT 0
34542: PPUSH
34543: LD_VAR 0 8
34547: PPUSH
34548: LD_VAR 0 4
34552: PPUSH
34553: CALL_OW 380
// un := CreateHuman ;
34557: LD_ADDR_VAR 0 14
34561: PUSH
34562: CALL_OW 44
34566: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34567: LD_VAR 0 14
34571: PPUSH
34572: LD_VAR 0 1
34576: PPUSH
34577: CALL_OW 250
34581: PPUSH
34582: LD_VAR 0 1
34586: PPUSH
34587: CALL_OW 251
34591: PPUSH
34592: LD_INT 10
34594: PPUSH
34595: LD_INT 0
34597: PPUSH
34598: CALL_OW 50
// result := result ^ un ;
34602: LD_ADDR_VAR 0 7
34606: PUSH
34607: LD_VAR 0 7
34611: PUSH
34612: LD_VAR 0 14
34616: ADD
34617: ST_TO_ADDR
// end ;
34618: GO 34496
34620: POP
34621: POP
// end ; end ;
34622: LD_VAR 0 7
34626: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34627: LD_INT 0
34629: PPUSH
34630: PPUSH
34631: PPUSH
34632: PPUSH
34633: PPUSH
34634: PPUSH
34635: PPUSH
34636: PPUSH
34637: PPUSH
34638: PPUSH
34639: PPUSH
34640: PPUSH
34641: PPUSH
34642: PPUSH
34643: PPUSH
34644: PPUSH
// result := false ;
34645: LD_ADDR_VAR 0 3
34649: PUSH
34650: LD_INT 0
34652: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34653: LD_VAR 0 1
34657: NOT
34658: PUSH
34659: LD_VAR 0 1
34663: PPUSH
34664: CALL_OW 266
34668: PUSH
34669: LD_INT 32
34671: PUSH
34672: LD_INT 33
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: IN
34679: NOT
34680: OR
34681: IFFALSE 34685
// exit ;
34683: GO 35794
// nat := GetNation ( tower ) ;
34685: LD_ADDR_VAR 0 12
34689: PUSH
34690: LD_VAR 0 1
34694: PPUSH
34695: CALL_OW 248
34699: ST_TO_ADDR
// side := GetSide ( tower ) ;
34700: LD_ADDR_VAR 0 16
34704: PUSH
34705: LD_VAR 0 1
34709: PPUSH
34710: CALL_OW 255
34714: ST_TO_ADDR
// x := GetX ( tower ) ;
34715: LD_ADDR_VAR 0 10
34719: PUSH
34720: LD_VAR 0 1
34724: PPUSH
34725: CALL_OW 250
34729: ST_TO_ADDR
// y := GetY ( tower ) ;
34730: LD_ADDR_VAR 0 11
34734: PUSH
34735: LD_VAR 0 1
34739: PPUSH
34740: CALL_OW 251
34744: ST_TO_ADDR
// if not x or not y then
34745: LD_VAR 0 10
34749: NOT
34750: PUSH
34751: LD_VAR 0 11
34755: NOT
34756: OR
34757: IFFALSE 34761
// exit ;
34759: GO 35794
// weapon := 0 ;
34761: LD_ADDR_VAR 0 18
34765: PUSH
34766: LD_INT 0
34768: ST_TO_ADDR
// fac_list := [ ] ;
34769: LD_ADDR_VAR 0 17
34773: PUSH
34774: EMPTY
34775: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34776: LD_ADDR_VAR 0 6
34780: PUSH
34781: LD_VAR 0 1
34785: PPUSH
34786: CALL_OW 274
34790: PPUSH
34791: LD_VAR 0 2
34795: PPUSH
34796: LD_INT 0
34798: PPUSH
34799: CALL 32365 0 3
34803: PPUSH
34804: LD_INT 30
34806: PUSH
34807: LD_INT 3
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PPUSH
34814: CALL_OW 72
34818: ST_TO_ADDR
// if not factories then
34819: LD_VAR 0 6
34823: NOT
34824: IFFALSE 34828
// exit ;
34826: GO 35794
// for i in factories do
34828: LD_ADDR_VAR 0 8
34832: PUSH
34833: LD_VAR 0 6
34837: PUSH
34838: FOR_IN
34839: IFFALSE 34864
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34841: LD_ADDR_VAR 0 17
34845: PUSH
34846: LD_VAR 0 17
34850: PUSH
34851: LD_VAR 0 8
34855: PPUSH
34856: CALL_OW 478
34860: UNION
34861: ST_TO_ADDR
34862: GO 34838
34864: POP
34865: POP
// if not fac_list then
34866: LD_VAR 0 17
34870: NOT
34871: IFFALSE 34875
// exit ;
34873: GO 35794
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34875: LD_ADDR_VAR 0 5
34879: PUSH
34880: LD_INT 4
34882: PUSH
34883: LD_INT 5
34885: PUSH
34886: LD_INT 9
34888: PUSH
34889: LD_INT 10
34891: PUSH
34892: LD_INT 6
34894: PUSH
34895: LD_INT 7
34897: PUSH
34898: LD_INT 11
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 27
34912: PUSH
34913: LD_INT 28
34915: PUSH
34916: LD_INT 26
34918: PUSH
34919: LD_INT 30
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 43
34930: PUSH
34931: LD_INT 44
34933: PUSH
34934: LD_INT 46
34936: PUSH
34937: LD_INT 45
34939: PUSH
34940: LD_INT 47
34942: PUSH
34943: LD_INT 49
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: LIST
34958: PUSH
34959: LD_VAR 0 12
34963: ARRAY
34964: ST_TO_ADDR
// list := list isect fac_list ;
34965: LD_ADDR_VAR 0 5
34969: PUSH
34970: LD_VAR 0 5
34974: PUSH
34975: LD_VAR 0 17
34979: ISECT
34980: ST_TO_ADDR
// if not list then
34981: LD_VAR 0 5
34985: NOT
34986: IFFALSE 34990
// exit ;
34988: GO 35794
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34990: LD_VAR 0 12
34994: PUSH
34995: LD_INT 3
34997: EQUAL
34998: PUSH
34999: LD_INT 49
35001: PUSH
35002: LD_VAR 0 5
35006: IN
35007: AND
35008: PUSH
35009: LD_INT 31
35011: PPUSH
35012: LD_VAR 0 16
35016: PPUSH
35017: CALL_OW 321
35021: PUSH
35022: LD_INT 2
35024: EQUAL
35025: AND
35026: IFFALSE 35086
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35028: LD_INT 22
35030: PUSH
35031: LD_VAR 0 16
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 35
35042: PUSH
35043: LD_INT 49
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 91
35052: PUSH
35053: LD_VAR 0 1
35057: PUSH
35058: LD_INT 10
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: LIST
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: LIST
35070: PPUSH
35071: CALL_OW 69
35075: NOT
35076: IFFALSE 35086
// weapon := ru_time_lapser ;
35078: LD_ADDR_VAR 0 18
35082: PUSH
35083: LD_INT 49
35085: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35086: LD_VAR 0 12
35090: PUSH
35091: LD_INT 1
35093: PUSH
35094: LD_INT 2
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: IN
35101: PUSH
35102: LD_INT 11
35104: PUSH
35105: LD_VAR 0 5
35109: IN
35110: PUSH
35111: LD_INT 30
35113: PUSH
35114: LD_VAR 0 5
35118: IN
35119: OR
35120: AND
35121: PUSH
35122: LD_INT 6
35124: PPUSH
35125: LD_VAR 0 16
35129: PPUSH
35130: CALL_OW 321
35134: PUSH
35135: LD_INT 2
35137: EQUAL
35138: AND
35139: IFFALSE 35304
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35141: LD_INT 22
35143: PUSH
35144: LD_VAR 0 16
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 2
35155: PUSH
35156: LD_INT 35
35158: PUSH
35159: LD_INT 11
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 35
35168: PUSH
35169: LD_INT 30
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: LIST
35180: PUSH
35181: LD_INT 91
35183: PUSH
35184: LD_VAR 0 1
35188: PUSH
35189: LD_INT 18
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: LIST
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: LIST
35201: PPUSH
35202: CALL_OW 69
35206: NOT
35207: PUSH
35208: LD_INT 22
35210: PUSH
35211: LD_VAR 0 16
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 2
35222: PUSH
35223: LD_INT 30
35225: PUSH
35226: LD_INT 32
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: LD_INT 30
35235: PUSH
35236: LD_INT 33
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 91
35250: PUSH
35251: LD_VAR 0 1
35255: PUSH
35256: LD_INT 12
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: LIST
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: LIST
35268: PUSH
35269: EMPTY
35270: LIST
35271: PPUSH
35272: CALL_OW 69
35276: PUSH
35277: LD_INT 2
35279: GREATER
35280: AND
35281: IFFALSE 35304
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35283: LD_ADDR_VAR 0 18
35287: PUSH
35288: LD_INT 11
35290: PUSH
35291: LD_INT 30
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_VAR 0 12
35302: ARRAY
35303: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35304: LD_VAR 0 18
35308: NOT
35309: PUSH
35310: LD_INT 40
35312: PPUSH
35313: LD_VAR 0 16
35317: PPUSH
35318: CALL_OW 321
35322: PUSH
35323: LD_INT 2
35325: EQUAL
35326: AND
35327: PUSH
35328: LD_INT 7
35330: PUSH
35331: LD_VAR 0 5
35335: IN
35336: PUSH
35337: LD_INT 28
35339: PUSH
35340: LD_VAR 0 5
35344: IN
35345: OR
35346: PUSH
35347: LD_INT 45
35349: PUSH
35350: LD_VAR 0 5
35354: IN
35355: OR
35356: AND
35357: IFFALSE 35611
// begin hex := GetHexInfo ( x , y ) ;
35359: LD_ADDR_VAR 0 4
35363: PUSH
35364: LD_VAR 0 10
35368: PPUSH
35369: LD_VAR 0 11
35373: PPUSH
35374: CALL_OW 546
35378: ST_TO_ADDR
// if hex [ 1 ] then
35379: LD_VAR 0 4
35383: PUSH
35384: LD_INT 1
35386: ARRAY
35387: IFFALSE 35391
// exit ;
35389: GO 35794
// height := hex [ 2 ] ;
35391: LD_ADDR_VAR 0 15
35395: PUSH
35396: LD_VAR 0 4
35400: PUSH
35401: LD_INT 2
35403: ARRAY
35404: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35405: LD_ADDR_VAR 0 14
35409: PUSH
35410: LD_INT 0
35412: PUSH
35413: LD_INT 2
35415: PUSH
35416: LD_INT 3
35418: PUSH
35419: LD_INT 5
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: ST_TO_ADDR
// for i in tmp do
35428: LD_ADDR_VAR 0 8
35432: PUSH
35433: LD_VAR 0 14
35437: PUSH
35438: FOR_IN
35439: IFFALSE 35609
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35441: LD_ADDR_VAR 0 9
35445: PUSH
35446: LD_VAR 0 10
35450: PPUSH
35451: LD_VAR 0 8
35455: PPUSH
35456: LD_INT 5
35458: PPUSH
35459: CALL_OW 272
35463: PUSH
35464: LD_VAR 0 11
35468: PPUSH
35469: LD_VAR 0 8
35473: PPUSH
35474: LD_INT 5
35476: PPUSH
35477: CALL_OW 273
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35486: LD_VAR 0 9
35490: PUSH
35491: LD_INT 1
35493: ARRAY
35494: PPUSH
35495: LD_VAR 0 9
35499: PUSH
35500: LD_INT 2
35502: ARRAY
35503: PPUSH
35504: CALL_OW 488
35508: IFFALSE 35607
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35510: LD_ADDR_VAR 0 4
35514: PUSH
35515: LD_VAR 0 9
35519: PUSH
35520: LD_INT 1
35522: ARRAY
35523: PPUSH
35524: LD_VAR 0 9
35528: PUSH
35529: LD_INT 2
35531: ARRAY
35532: PPUSH
35533: CALL_OW 546
35537: ST_TO_ADDR
// if hex [ 1 ] then
35538: LD_VAR 0 4
35542: PUSH
35543: LD_INT 1
35545: ARRAY
35546: IFFALSE 35550
// continue ;
35548: GO 35438
// h := hex [ 2 ] ;
35550: LD_ADDR_VAR 0 13
35554: PUSH
35555: LD_VAR 0 4
35559: PUSH
35560: LD_INT 2
35562: ARRAY
35563: ST_TO_ADDR
// if h + 7 < height then
35564: LD_VAR 0 13
35568: PUSH
35569: LD_INT 7
35571: PLUS
35572: PUSH
35573: LD_VAR 0 15
35577: LESS
35578: IFFALSE 35607
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35580: LD_ADDR_VAR 0 18
35584: PUSH
35585: LD_INT 7
35587: PUSH
35588: LD_INT 28
35590: PUSH
35591: LD_INT 45
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: LIST
35598: PUSH
35599: LD_VAR 0 12
35603: ARRAY
35604: ST_TO_ADDR
// break ;
35605: GO 35609
// end ; end ; end ;
35607: GO 35438
35609: POP
35610: POP
// end ; if not weapon then
35611: LD_VAR 0 18
35615: NOT
35616: IFFALSE 35676
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35618: LD_ADDR_VAR 0 5
35622: PUSH
35623: LD_VAR 0 5
35627: PUSH
35628: LD_INT 11
35630: PUSH
35631: LD_INT 30
35633: PUSH
35634: LD_INT 49
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: LIST
35641: DIFF
35642: ST_TO_ADDR
// if not list then
35643: LD_VAR 0 5
35647: NOT
35648: IFFALSE 35652
// exit ;
35650: GO 35794
// weapon := list [ rand ( 1 , list ) ] ;
35652: LD_ADDR_VAR 0 18
35656: PUSH
35657: LD_VAR 0 5
35661: PUSH
35662: LD_INT 1
35664: PPUSH
35665: LD_VAR 0 5
35669: PPUSH
35670: CALL_OW 12
35674: ARRAY
35675: ST_TO_ADDR
// end ; if weapon then
35676: LD_VAR 0 18
35680: IFFALSE 35794
// begin tmp := CostOfWeapon ( weapon ) ;
35682: LD_ADDR_VAR 0 14
35686: PUSH
35687: LD_VAR 0 18
35691: PPUSH
35692: CALL_OW 451
35696: ST_TO_ADDR
// j := GetBase ( tower ) ;
35697: LD_ADDR_VAR 0 9
35701: PUSH
35702: LD_VAR 0 1
35706: PPUSH
35707: CALL_OW 274
35711: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35712: LD_VAR 0 9
35716: PPUSH
35717: LD_INT 1
35719: PPUSH
35720: CALL_OW 275
35724: PUSH
35725: LD_VAR 0 14
35729: PUSH
35730: LD_INT 1
35732: ARRAY
35733: GREATEREQUAL
35734: PUSH
35735: LD_VAR 0 9
35739: PPUSH
35740: LD_INT 2
35742: PPUSH
35743: CALL_OW 275
35747: PUSH
35748: LD_VAR 0 14
35752: PUSH
35753: LD_INT 2
35755: ARRAY
35756: GREATEREQUAL
35757: AND
35758: PUSH
35759: LD_VAR 0 9
35763: PPUSH
35764: LD_INT 3
35766: PPUSH
35767: CALL_OW 275
35771: PUSH
35772: LD_VAR 0 14
35776: PUSH
35777: LD_INT 3
35779: ARRAY
35780: GREATEREQUAL
35781: AND
35782: IFFALSE 35794
// result := weapon ;
35784: LD_ADDR_VAR 0 3
35788: PUSH
35789: LD_VAR 0 18
35793: ST_TO_ADDR
// end ; end ;
35794: LD_VAR 0 3
35798: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35799: LD_INT 0
35801: PPUSH
35802: PPUSH
// result := true ;
35803: LD_ADDR_VAR 0 3
35807: PUSH
35808: LD_INT 1
35810: ST_TO_ADDR
// if array1 = array2 then
35811: LD_VAR 0 1
35815: PUSH
35816: LD_VAR 0 2
35820: EQUAL
35821: IFFALSE 35881
// begin for i = 1 to array1 do
35823: LD_ADDR_VAR 0 4
35827: PUSH
35828: DOUBLE
35829: LD_INT 1
35831: DEC
35832: ST_TO_ADDR
35833: LD_VAR 0 1
35837: PUSH
35838: FOR_TO
35839: IFFALSE 35877
// if array1 [ i ] <> array2 [ i ] then
35841: LD_VAR 0 1
35845: PUSH
35846: LD_VAR 0 4
35850: ARRAY
35851: PUSH
35852: LD_VAR 0 2
35856: PUSH
35857: LD_VAR 0 4
35861: ARRAY
35862: NONEQUAL
35863: IFFALSE 35875
// begin result := false ;
35865: LD_ADDR_VAR 0 3
35869: PUSH
35870: LD_INT 0
35872: ST_TO_ADDR
// break ;
35873: GO 35877
// end ;
35875: GO 35838
35877: POP
35878: POP
// end else
35879: GO 35889
// result := false ;
35881: LD_ADDR_VAR 0 3
35885: PUSH
35886: LD_INT 0
35888: ST_TO_ADDR
// end ;
35889: LD_VAR 0 3
35893: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35894: LD_INT 0
35896: PPUSH
35897: PPUSH
// if not array1 or not array2 then
35898: LD_VAR 0 1
35902: NOT
35903: PUSH
35904: LD_VAR 0 2
35908: NOT
35909: OR
35910: IFFALSE 35914
// exit ;
35912: GO 35978
// result := true ;
35914: LD_ADDR_VAR 0 3
35918: PUSH
35919: LD_INT 1
35921: ST_TO_ADDR
// for i = 1 to array1 do
35922: LD_ADDR_VAR 0 4
35926: PUSH
35927: DOUBLE
35928: LD_INT 1
35930: DEC
35931: ST_TO_ADDR
35932: LD_VAR 0 1
35936: PUSH
35937: FOR_TO
35938: IFFALSE 35976
// if array1 [ i ] <> array2 [ i ] then
35940: LD_VAR 0 1
35944: PUSH
35945: LD_VAR 0 4
35949: ARRAY
35950: PUSH
35951: LD_VAR 0 2
35955: PUSH
35956: LD_VAR 0 4
35960: ARRAY
35961: NONEQUAL
35962: IFFALSE 35974
// begin result := false ;
35964: LD_ADDR_VAR 0 3
35968: PUSH
35969: LD_INT 0
35971: ST_TO_ADDR
// break ;
35972: GO 35976
// end ;
35974: GO 35937
35976: POP
35977: POP
// end ;
35978: LD_VAR 0 3
35982: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35983: LD_INT 0
35985: PPUSH
35986: PPUSH
35987: PPUSH
// pom := GetBase ( fac ) ;
35988: LD_ADDR_VAR 0 5
35992: PUSH
35993: LD_VAR 0 1
35997: PPUSH
35998: CALL_OW 274
36002: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36003: LD_ADDR_VAR 0 4
36007: PUSH
36008: LD_VAR 0 2
36012: PUSH
36013: LD_INT 1
36015: ARRAY
36016: PPUSH
36017: LD_VAR 0 2
36021: PUSH
36022: LD_INT 2
36024: ARRAY
36025: PPUSH
36026: LD_VAR 0 2
36030: PUSH
36031: LD_INT 3
36033: ARRAY
36034: PPUSH
36035: LD_VAR 0 2
36039: PUSH
36040: LD_INT 4
36042: ARRAY
36043: PPUSH
36044: CALL_OW 449
36048: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36049: LD_ADDR_VAR 0 3
36053: PUSH
36054: LD_VAR 0 5
36058: PPUSH
36059: LD_INT 1
36061: PPUSH
36062: CALL_OW 275
36066: PUSH
36067: LD_VAR 0 4
36071: PUSH
36072: LD_INT 1
36074: ARRAY
36075: GREATEREQUAL
36076: PUSH
36077: LD_VAR 0 5
36081: PPUSH
36082: LD_INT 2
36084: PPUSH
36085: CALL_OW 275
36089: PUSH
36090: LD_VAR 0 4
36094: PUSH
36095: LD_INT 2
36097: ARRAY
36098: GREATEREQUAL
36099: AND
36100: PUSH
36101: LD_VAR 0 5
36105: PPUSH
36106: LD_INT 3
36108: PPUSH
36109: CALL_OW 275
36113: PUSH
36114: LD_VAR 0 4
36118: PUSH
36119: LD_INT 3
36121: ARRAY
36122: GREATEREQUAL
36123: AND
36124: ST_TO_ADDR
// end ;
36125: LD_VAR 0 3
36129: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36130: LD_INT 0
36132: PPUSH
36133: PPUSH
36134: PPUSH
36135: PPUSH
// pom := GetBase ( building ) ;
36136: LD_ADDR_VAR 0 3
36140: PUSH
36141: LD_VAR 0 1
36145: PPUSH
36146: CALL_OW 274
36150: ST_TO_ADDR
// if not pom then
36151: LD_VAR 0 3
36155: NOT
36156: IFFALSE 36160
// exit ;
36158: GO 36330
// btype := GetBType ( building ) ;
36160: LD_ADDR_VAR 0 5
36164: PUSH
36165: LD_VAR 0 1
36169: PPUSH
36170: CALL_OW 266
36174: ST_TO_ADDR
// if btype = b_armoury then
36175: LD_VAR 0 5
36179: PUSH
36180: LD_INT 4
36182: EQUAL
36183: IFFALSE 36193
// btype := b_barracks ;
36185: LD_ADDR_VAR 0 5
36189: PUSH
36190: LD_INT 5
36192: ST_TO_ADDR
// if btype = b_depot then
36193: LD_VAR 0 5
36197: PUSH
36198: LD_INT 0
36200: EQUAL
36201: IFFALSE 36211
// btype := b_warehouse ;
36203: LD_ADDR_VAR 0 5
36207: PUSH
36208: LD_INT 1
36210: ST_TO_ADDR
// if btype = b_workshop then
36211: LD_VAR 0 5
36215: PUSH
36216: LD_INT 2
36218: EQUAL
36219: IFFALSE 36229
// btype := b_factory ;
36221: LD_ADDR_VAR 0 5
36225: PUSH
36226: LD_INT 3
36228: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36229: LD_ADDR_VAR 0 4
36233: PUSH
36234: LD_VAR 0 5
36238: PPUSH
36239: LD_VAR 0 1
36243: PPUSH
36244: CALL_OW 248
36248: PPUSH
36249: CALL_OW 450
36253: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36254: LD_ADDR_VAR 0 2
36258: PUSH
36259: LD_VAR 0 3
36263: PPUSH
36264: LD_INT 1
36266: PPUSH
36267: CALL_OW 275
36271: PUSH
36272: LD_VAR 0 4
36276: PUSH
36277: LD_INT 1
36279: ARRAY
36280: GREATEREQUAL
36281: PUSH
36282: LD_VAR 0 3
36286: PPUSH
36287: LD_INT 2
36289: PPUSH
36290: CALL_OW 275
36294: PUSH
36295: LD_VAR 0 4
36299: PUSH
36300: LD_INT 2
36302: ARRAY
36303: GREATEREQUAL
36304: AND
36305: PUSH
36306: LD_VAR 0 3
36310: PPUSH
36311: LD_INT 3
36313: PPUSH
36314: CALL_OW 275
36318: PUSH
36319: LD_VAR 0 4
36323: PUSH
36324: LD_INT 3
36326: ARRAY
36327: GREATEREQUAL
36328: AND
36329: ST_TO_ADDR
// end ;
36330: LD_VAR 0 2
36334: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36335: LD_INT 0
36337: PPUSH
36338: PPUSH
36339: PPUSH
// pom := GetBase ( building ) ;
36340: LD_ADDR_VAR 0 4
36344: PUSH
36345: LD_VAR 0 1
36349: PPUSH
36350: CALL_OW 274
36354: ST_TO_ADDR
// if not pom then
36355: LD_VAR 0 4
36359: NOT
36360: IFFALSE 36364
// exit ;
36362: GO 36465
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36364: LD_ADDR_VAR 0 5
36368: PUSH
36369: LD_VAR 0 2
36373: PPUSH
36374: LD_VAR 0 1
36378: PPUSH
36379: CALL_OW 248
36383: PPUSH
36384: CALL_OW 450
36388: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36389: LD_ADDR_VAR 0 3
36393: PUSH
36394: LD_VAR 0 4
36398: PPUSH
36399: LD_INT 1
36401: PPUSH
36402: CALL_OW 275
36406: PUSH
36407: LD_VAR 0 5
36411: PUSH
36412: LD_INT 1
36414: ARRAY
36415: GREATEREQUAL
36416: PUSH
36417: LD_VAR 0 4
36421: PPUSH
36422: LD_INT 2
36424: PPUSH
36425: CALL_OW 275
36429: PUSH
36430: LD_VAR 0 5
36434: PUSH
36435: LD_INT 2
36437: ARRAY
36438: GREATEREQUAL
36439: AND
36440: PUSH
36441: LD_VAR 0 4
36445: PPUSH
36446: LD_INT 3
36448: PPUSH
36449: CALL_OW 275
36453: PUSH
36454: LD_VAR 0 5
36458: PUSH
36459: LD_INT 3
36461: ARRAY
36462: GREATEREQUAL
36463: AND
36464: ST_TO_ADDR
// end ;
36465: LD_VAR 0 3
36469: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36470: LD_INT 0
36472: PPUSH
36473: PPUSH
36474: PPUSH
36475: PPUSH
36476: PPUSH
36477: PPUSH
36478: PPUSH
36479: PPUSH
36480: PPUSH
36481: PPUSH
36482: PPUSH
// result := false ;
36483: LD_ADDR_VAR 0 8
36487: PUSH
36488: LD_INT 0
36490: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36491: LD_VAR 0 5
36495: NOT
36496: PUSH
36497: LD_VAR 0 1
36501: NOT
36502: OR
36503: PUSH
36504: LD_VAR 0 2
36508: NOT
36509: OR
36510: PUSH
36511: LD_VAR 0 3
36515: NOT
36516: OR
36517: IFFALSE 36521
// exit ;
36519: GO 37335
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36521: LD_ADDR_VAR 0 14
36525: PUSH
36526: LD_VAR 0 1
36530: PPUSH
36531: LD_VAR 0 2
36535: PPUSH
36536: LD_VAR 0 3
36540: PPUSH
36541: LD_VAR 0 4
36545: PPUSH
36546: LD_VAR 0 5
36550: PUSH
36551: LD_INT 1
36553: ARRAY
36554: PPUSH
36555: CALL_OW 248
36559: PPUSH
36560: LD_INT 0
36562: PPUSH
36563: CALL 38572 0 6
36567: ST_TO_ADDR
// if not hexes then
36568: LD_VAR 0 14
36572: NOT
36573: IFFALSE 36577
// exit ;
36575: GO 37335
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36577: LD_ADDR_VAR 0 17
36581: PUSH
36582: LD_VAR 0 5
36586: PPUSH
36587: LD_INT 22
36589: PUSH
36590: LD_VAR 0 13
36594: PPUSH
36595: CALL_OW 255
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 2
36606: PUSH
36607: LD_INT 30
36609: PUSH
36610: LD_INT 0
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 30
36619: PUSH
36620: LD_INT 1
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: LIST
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PPUSH
36636: CALL_OW 72
36640: ST_TO_ADDR
// for i = 1 to hexes do
36641: LD_ADDR_VAR 0 9
36645: PUSH
36646: DOUBLE
36647: LD_INT 1
36649: DEC
36650: ST_TO_ADDR
36651: LD_VAR 0 14
36655: PUSH
36656: FOR_TO
36657: IFFALSE 37333
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36659: LD_ADDR_VAR 0 13
36663: PUSH
36664: LD_VAR 0 14
36668: PUSH
36669: LD_VAR 0 9
36673: ARRAY
36674: PUSH
36675: LD_INT 1
36677: ARRAY
36678: PPUSH
36679: LD_VAR 0 14
36683: PUSH
36684: LD_VAR 0 9
36688: ARRAY
36689: PUSH
36690: LD_INT 2
36692: ARRAY
36693: PPUSH
36694: CALL_OW 428
36698: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36699: LD_VAR 0 14
36703: PUSH
36704: LD_VAR 0 9
36708: ARRAY
36709: PUSH
36710: LD_INT 1
36712: ARRAY
36713: PPUSH
36714: LD_VAR 0 14
36718: PUSH
36719: LD_VAR 0 9
36723: ARRAY
36724: PUSH
36725: LD_INT 2
36727: ARRAY
36728: PPUSH
36729: CALL_OW 351
36733: PUSH
36734: LD_VAR 0 14
36738: PUSH
36739: LD_VAR 0 9
36743: ARRAY
36744: PUSH
36745: LD_INT 1
36747: ARRAY
36748: PPUSH
36749: LD_VAR 0 14
36753: PUSH
36754: LD_VAR 0 9
36758: ARRAY
36759: PUSH
36760: LD_INT 2
36762: ARRAY
36763: PPUSH
36764: CALL_OW 488
36768: NOT
36769: OR
36770: PUSH
36771: LD_VAR 0 13
36775: PPUSH
36776: CALL_OW 247
36780: PUSH
36781: LD_INT 3
36783: EQUAL
36784: OR
36785: IFFALSE 36791
// exit ;
36787: POP
36788: POP
36789: GO 37335
// if not tmp then
36791: LD_VAR 0 13
36795: NOT
36796: IFFALSE 36800
// continue ;
36798: GO 36656
// result := true ;
36800: LD_ADDR_VAR 0 8
36804: PUSH
36805: LD_INT 1
36807: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36808: LD_VAR 0 6
36812: PUSH
36813: LD_VAR 0 13
36817: PPUSH
36818: CALL_OW 247
36822: PUSH
36823: LD_INT 2
36825: EQUAL
36826: AND
36827: PUSH
36828: LD_VAR 0 13
36832: PPUSH
36833: CALL_OW 263
36837: PUSH
36838: LD_INT 1
36840: EQUAL
36841: AND
36842: IFFALSE 37006
// begin if IsDrivenBy ( tmp ) then
36844: LD_VAR 0 13
36848: PPUSH
36849: CALL_OW 311
36853: IFFALSE 36857
// continue ;
36855: GO 36656
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36857: LD_VAR 0 6
36861: PPUSH
36862: LD_INT 3
36864: PUSH
36865: LD_INT 60
36867: PUSH
36868: EMPTY
36869: LIST
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 3
36877: PUSH
36878: LD_INT 55
36880: PUSH
36881: EMPTY
36882: LIST
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PPUSH
36892: CALL_OW 72
36896: IFFALSE 37004
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36898: LD_ADDR_VAR 0 18
36902: PUSH
36903: LD_VAR 0 6
36907: PPUSH
36908: LD_INT 3
36910: PUSH
36911: LD_INT 60
36913: PUSH
36914: EMPTY
36915: LIST
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_INT 3
36923: PUSH
36924: LD_INT 55
36926: PUSH
36927: EMPTY
36928: LIST
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PPUSH
36938: CALL_OW 72
36942: PUSH
36943: LD_INT 1
36945: ARRAY
36946: ST_TO_ADDR
// if IsInUnit ( driver ) then
36947: LD_VAR 0 18
36951: PPUSH
36952: CALL_OW 310
36956: IFFALSE 36967
// ComExit ( driver ) ;
36958: LD_VAR 0 18
36962: PPUSH
36963: CALL 61756 0 1
// AddComEnterUnit ( driver , tmp ) ;
36967: LD_VAR 0 18
36971: PPUSH
36972: LD_VAR 0 13
36976: PPUSH
36977: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36981: LD_VAR 0 18
36985: PPUSH
36986: LD_VAR 0 7
36990: PPUSH
36991: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36995: LD_VAR 0 18
36999: PPUSH
37000: CALL_OW 181
// end ; continue ;
37004: GO 36656
// end ; if not cleaners or not tmp in cleaners then
37006: LD_VAR 0 6
37010: NOT
37011: PUSH
37012: LD_VAR 0 13
37016: PUSH
37017: LD_VAR 0 6
37021: IN
37022: NOT
37023: OR
37024: IFFALSE 37331
// begin if dep then
37026: LD_VAR 0 17
37030: IFFALSE 37166
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37032: LD_ADDR_VAR 0 16
37036: PUSH
37037: LD_VAR 0 17
37041: PUSH
37042: LD_INT 1
37044: ARRAY
37045: PPUSH
37046: CALL_OW 250
37050: PPUSH
37051: LD_VAR 0 17
37055: PUSH
37056: LD_INT 1
37058: ARRAY
37059: PPUSH
37060: CALL_OW 254
37064: PPUSH
37065: LD_INT 5
37067: PPUSH
37068: CALL_OW 272
37072: PUSH
37073: LD_VAR 0 17
37077: PUSH
37078: LD_INT 1
37080: ARRAY
37081: PPUSH
37082: CALL_OW 251
37086: PPUSH
37087: LD_VAR 0 17
37091: PUSH
37092: LD_INT 1
37094: ARRAY
37095: PPUSH
37096: CALL_OW 254
37100: PPUSH
37101: LD_INT 5
37103: PPUSH
37104: CALL_OW 273
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37113: LD_VAR 0 16
37117: PUSH
37118: LD_INT 1
37120: ARRAY
37121: PPUSH
37122: LD_VAR 0 16
37126: PUSH
37127: LD_INT 2
37129: ARRAY
37130: PPUSH
37131: CALL_OW 488
37135: IFFALSE 37166
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37137: LD_VAR 0 13
37141: PPUSH
37142: LD_VAR 0 16
37146: PUSH
37147: LD_INT 1
37149: ARRAY
37150: PPUSH
37151: LD_VAR 0 16
37155: PUSH
37156: LD_INT 2
37158: ARRAY
37159: PPUSH
37160: CALL_OW 111
// continue ;
37164: GO 36656
// end ; end ; r := GetDir ( tmp ) ;
37166: LD_ADDR_VAR 0 15
37170: PUSH
37171: LD_VAR 0 13
37175: PPUSH
37176: CALL_OW 254
37180: ST_TO_ADDR
// if r = 5 then
37181: LD_VAR 0 15
37185: PUSH
37186: LD_INT 5
37188: EQUAL
37189: IFFALSE 37199
// r := 0 ;
37191: LD_ADDR_VAR 0 15
37195: PUSH
37196: LD_INT 0
37198: ST_TO_ADDR
// for j = r to 5 do
37199: LD_ADDR_VAR 0 10
37203: PUSH
37204: DOUBLE
37205: LD_VAR 0 15
37209: DEC
37210: ST_TO_ADDR
37211: LD_INT 5
37213: PUSH
37214: FOR_TO
37215: IFFALSE 37329
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37217: LD_ADDR_VAR 0 11
37221: PUSH
37222: LD_VAR 0 13
37226: PPUSH
37227: CALL_OW 250
37231: PPUSH
37232: LD_VAR 0 10
37236: PPUSH
37237: LD_INT 2
37239: PPUSH
37240: CALL_OW 272
37244: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37245: LD_ADDR_VAR 0 12
37249: PUSH
37250: LD_VAR 0 13
37254: PPUSH
37255: CALL_OW 251
37259: PPUSH
37260: LD_VAR 0 10
37264: PPUSH
37265: LD_INT 2
37267: PPUSH
37268: CALL_OW 273
37272: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37273: LD_VAR 0 11
37277: PPUSH
37278: LD_VAR 0 12
37282: PPUSH
37283: CALL_OW 488
37287: PUSH
37288: LD_VAR 0 11
37292: PPUSH
37293: LD_VAR 0 12
37297: PPUSH
37298: CALL_OW 428
37302: NOT
37303: AND
37304: IFFALSE 37327
// begin ComMoveXY ( tmp , _x , _y ) ;
37306: LD_VAR 0 13
37310: PPUSH
37311: LD_VAR 0 11
37315: PPUSH
37316: LD_VAR 0 12
37320: PPUSH
37321: CALL_OW 111
// break ;
37325: GO 37329
// end ; end ;
37327: GO 37214
37329: POP
37330: POP
// end ; end ;
37331: GO 36656
37333: POP
37334: POP
// end ;
37335: LD_VAR 0 8
37339: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37340: LD_INT 0
37342: PPUSH
// result := true ;
37343: LD_ADDR_VAR 0 3
37347: PUSH
37348: LD_INT 1
37350: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37351: LD_VAR 0 2
37355: PUSH
37356: LD_INT 24
37358: DOUBLE
37359: EQUAL
37360: IFTRUE 37370
37362: LD_INT 33
37364: DOUBLE
37365: EQUAL
37366: IFTRUE 37370
37368: GO 37395
37370: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37371: LD_ADDR_VAR 0 3
37375: PUSH
37376: LD_INT 32
37378: PPUSH
37379: LD_VAR 0 1
37383: PPUSH
37384: CALL_OW 321
37388: PUSH
37389: LD_INT 2
37391: EQUAL
37392: ST_TO_ADDR
37393: GO 37715
37395: LD_INT 20
37397: DOUBLE
37398: EQUAL
37399: IFTRUE 37403
37401: GO 37428
37403: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37404: LD_ADDR_VAR 0 3
37408: PUSH
37409: LD_INT 6
37411: PPUSH
37412: LD_VAR 0 1
37416: PPUSH
37417: CALL_OW 321
37421: PUSH
37422: LD_INT 2
37424: EQUAL
37425: ST_TO_ADDR
37426: GO 37715
37428: LD_INT 22
37430: DOUBLE
37431: EQUAL
37432: IFTRUE 37442
37434: LD_INT 36
37436: DOUBLE
37437: EQUAL
37438: IFTRUE 37442
37440: GO 37467
37442: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37443: LD_ADDR_VAR 0 3
37447: PUSH
37448: LD_INT 15
37450: PPUSH
37451: LD_VAR 0 1
37455: PPUSH
37456: CALL_OW 321
37460: PUSH
37461: LD_INT 2
37463: EQUAL
37464: ST_TO_ADDR
37465: GO 37715
37467: LD_INT 30
37469: DOUBLE
37470: EQUAL
37471: IFTRUE 37475
37473: GO 37500
37475: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37476: LD_ADDR_VAR 0 3
37480: PUSH
37481: LD_INT 20
37483: PPUSH
37484: LD_VAR 0 1
37488: PPUSH
37489: CALL_OW 321
37493: PUSH
37494: LD_INT 2
37496: EQUAL
37497: ST_TO_ADDR
37498: GO 37715
37500: LD_INT 28
37502: DOUBLE
37503: EQUAL
37504: IFTRUE 37514
37506: LD_INT 21
37508: DOUBLE
37509: EQUAL
37510: IFTRUE 37514
37512: GO 37539
37514: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37515: LD_ADDR_VAR 0 3
37519: PUSH
37520: LD_INT 21
37522: PPUSH
37523: LD_VAR 0 1
37527: PPUSH
37528: CALL_OW 321
37532: PUSH
37533: LD_INT 2
37535: EQUAL
37536: ST_TO_ADDR
37537: GO 37715
37539: LD_INT 16
37541: DOUBLE
37542: EQUAL
37543: IFTRUE 37547
37545: GO 37574
37547: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37548: LD_ADDR_VAR 0 3
37552: PUSH
37553: LD_EXP 70
37557: PPUSH
37558: LD_VAR 0 1
37562: PPUSH
37563: CALL_OW 321
37567: PUSH
37568: LD_INT 2
37570: EQUAL
37571: ST_TO_ADDR
37572: GO 37715
37574: LD_INT 19
37576: DOUBLE
37577: EQUAL
37578: IFTRUE 37588
37580: LD_INT 23
37582: DOUBLE
37583: EQUAL
37584: IFTRUE 37588
37586: GO 37615
37588: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37589: LD_ADDR_VAR 0 3
37593: PUSH
37594: LD_EXP 69
37598: PPUSH
37599: LD_VAR 0 1
37603: PPUSH
37604: CALL_OW 321
37608: PUSH
37609: LD_INT 2
37611: EQUAL
37612: ST_TO_ADDR
37613: GO 37715
37615: LD_INT 17
37617: DOUBLE
37618: EQUAL
37619: IFTRUE 37623
37621: GO 37648
37623: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37624: LD_ADDR_VAR 0 3
37628: PUSH
37629: LD_INT 39
37631: PPUSH
37632: LD_VAR 0 1
37636: PPUSH
37637: CALL_OW 321
37641: PUSH
37642: LD_INT 2
37644: EQUAL
37645: ST_TO_ADDR
37646: GO 37715
37648: LD_INT 18
37650: DOUBLE
37651: EQUAL
37652: IFTRUE 37656
37654: GO 37681
37656: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37657: LD_ADDR_VAR 0 3
37661: PUSH
37662: LD_INT 40
37664: PPUSH
37665: LD_VAR 0 1
37669: PPUSH
37670: CALL_OW 321
37674: PUSH
37675: LD_INT 2
37677: EQUAL
37678: ST_TO_ADDR
37679: GO 37715
37681: LD_INT 27
37683: DOUBLE
37684: EQUAL
37685: IFTRUE 37689
37687: GO 37714
37689: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37690: LD_ADDR_VAR 0 3
37694: PUSH
37695: LD_INT 35
37697: PPUSH
37698: LD_VAR 0 1
37702: PPUSH
37703: CALL_OW 321
37707: PUSH
37708: LD_INT 2
37710: EQUAL
37711: ST_TO_ADDR
37712: GO 37715
37714: POP
// end ;
37715: LD_VAR 0 3
37719: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37720: LD_INT 0
37722: PPUSH
37723: PPUSH
37724: PPUSH
37725: PPUSH
37726: PPUSH
37727: PPUSH
37728: PPUSH
37729: PPUSH
37730: PPUSH
37731: PPUSH
37732: PPUSH
// result := false ;
37733: LD_ADDR_VAR 0 6
37737: PUSH
37738: LD_INT 0
37740: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37741: LD_VAR 0 1
37745: NOT
37746: PUSH
37747: LD_VAR 0 1
37751: PPUSH
37752: CALL_OW 266
37756: PUSH
37757: LD_INT 0
37759: PUSH
37760: LD_INT 1
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: IN
37767: NOT
37768: OR
37769: PUSH
37770: LD_VAR 0 2
37774: NOT
37775: OR
37776: PUSH
37777: LD_VAR 0 5
37781: PUSH
37782: LD_INT 0
37784: PUSH
37785: LD_INT 1
37787: PUSH
37788: LD_INT 2
37790: PUSH
37791: LD_INT 3
37793: PUSH
37794: LD_INT 4
37796: PUSH
37797: LD_INT 5
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: IN
37808: NOT
37809: OR
37810: PUSH
37811: LD_VAR 0 3
37815: PPUSH
37816: LD_VAR 0 4
37820: PPUSH
37821: CALL_OW 488
37825: NOT
37826: OR
37827: IFFALSE 37831
// exit ;
37829: GO 38567
// side := GetSide ( depot ) ;
37831: LD_ADDR_VAR 0 9
37835: PUSH
37836: LD_VAR 0 1
37840: PPUSH
37841: CALL_OW 255
37845: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37846: LD_VAR 0 9
37850: PPUSH
37851: LD_VAR 0 2
37855: PPUSH
37856: CALL 37340 0 2
37860: NOT
37861: IFFALSE 37865
// exit ;
37863: GO 38567
// pom := GetBase ( depot ) ;
37865: LD_ADDR_VAR 0 10
37869: PUSH
37870: LD_VAR 0 1
37874: PPUSH
37875: CALL_OW 274
37879: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37880: LD_ADDR_VAR 0 11
37884: PUSH
37885: LD_VAR 0 2
37889: PPUSH
37890: LD_VAR 0 1
37894: PPUSH
37895: CALL_OW 248
37899: PPUSH
37900: CALL_OW 450
37904: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37905: LD_VAR 0 10
37909: PPUSH
37910: LD_INT 1
37912: PPUSH
37913: CALL_OW 275
37917: PUSH
37918: LD_VAR 0 11
37922: PUSH
37923: LD_INT 1
37925: ARRAY
37926: GREATEREQUAL
37927: PUSH
37928: LD_VAR 0 10
37932: PPUSH
37933: LD_INT 2
37935: PPUSH
37936: CALL_OW 275
37940: PUSH
37941: LD_VAR 0 11
37945: PUSH
37946: LD_INT 2
37948: ARRAY
37949: GREATEREQUAL
37950: AND
37951: PUSH
37952: LD_VAR 0 10
37956: PPUSH
37957: LD_INT 3
37959: PPUSH
37960: CALL_OW 275
37964: PUSH
37965: LD_VAR 0 11
37969: PUSH
37970: LD_INT 3
37972: ARRAY
37973: GREATEREQUAL
37974: AND
37975: NOT
37976: IFFALSE 37980
// exit ;
37978: GO 38567
// if GetBType ( depot ) = b_depot then
37980: LD_VAR 0 1
37984: PPUSH
37985: CALL_OW 266
37989: PUSH
37990: LD_INT 0
37992: EQUAL
37993: IFFALSE 38005
// dist := 28 else
37995: LD_ADDR_VAR 0 14
37999: PUSH
38000: LD_INT 28
38002: ST_TO_ADDR
38003: GO 38013
// dist := 36 ;
38005: LD_ADDR_VAR 0 14
38009: PUSH
38010: LD_INT 36
38012: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38013: LD_VAR 0 1
38017: PPUSH
38018: LD_VAR 0 3
38022: PPUSH
38023: LD_VAR 0 4
38027: PPUSH
38028: CALL_OW 297
38032: PUSH
38033: LD_VAR 0 14
38037: GREATER
38038: IFFALSE 38042
// exit ;
38040: GO 38567
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38042: LD_ADDR_VAR 0 12
38046: PUSH
38047: LD_VAR 0 2
38051: PPUSH
38052: LD_VAR 0 3
38056: PPUSH
38057: LD_VAR 0 4
38061: PPUSH
38062: LD_VAR 0 5
38066: PPUSH
38067: LD_VAR 0 1
38071: PPUSH
38072: CALL_OW 248
38076: PPUSH
38077: LD_INT 0
38079: PPUSH
38080: CALL 38572 0 6
38084: ST_TO_ADDR
// if not hexes then
38085: LD_VAR 0 12
38089: NOT
38090: IFFALSE 38094
// exit ;
38092: GO 38567
// hex := GetHexInfo ( x , y ) ;
38094: LD_ADDR_VAR 0 15
38098: PUSH
38099: LD_VAR 0 3
38103: PPUSH
38104: LD_VAR 0 4
38108: PPUSH
38109: CALL_OW 546
38113: ST_TO_ADDR
// if hex [ 1 ] then
38114: LD_VAR 0 15
38118: PUSH
38119: LD_INT 1
38121: ARRAY
38122: IFFALSE 38126
// exit ;
38124: GO 38567
// height := hex [ 2 ] ;
38126: LD_ADDR_VAR 0 13
38130: PUSH
38131: LD_VAR 0 15
38135: PUSH
38136: LD_INT 2
38138: ARRAY
38139: ST_TO_ADDR
// for i = 1 to hexes do
38140: LD_ADDR_VAR 0 7
38144: PUSH
38145: DOUBLE
38146: LD_INT 1
38148: DEC
38149: ST_TO_ADDR
38150: LD_VAR 0 12
38154: PUSH
38155: FOR_TO
38156: IFFALSE 38486
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38158: LD_VAR 0 12
38162: PUSH
38163: LD_VAR 0 7
38167: ARRAY
38168: PUSH
38169: LD_INT 1
38171: ARRAY
38172: PPUSH
38173: LD_VAR 0 12
38177: PUSH
38178: LD_VAR 0 7
38182: ARRAY
38183: PUSH
38184: LD_INT 2
38186: ARRAY
38187: PPUSH
38188: CALL_OW 488
38192: NOT
38193: PUSH
38194: LD_VAR 0 12
38198: PUSH
38199: LD_VAR 0 7
38203: ARRAY
38204: PUSH
38205: LD_INT 1
38207: ARRAY
38208: PPUSH
38209: LD_VAR 0 12
38213: PUSH
38214: LD_VAR 0 7
38218: ARRAY
38219: PUSH
38220: LD_INT 2
38222: ARRAY
38223: PPUSH
38224: CALL_OW 428
38228: PUSH
38229: LD_INT 0
38231: GREATER
38232: OR
38233: PUSH
38234: LD_VAR 0 12
38238: PUSH
38239: LD_VAR 0 7
38243: ARRAY
38244: PUSH
38245: LD_INT 1
38247: ARRAY
38248: PPUSH
38249: LD_VAR 0 12
38253: PUSH
38254: LD_VAR 0 7
38258: ARRAY
38259: PUSH
38260: LD_INT 2
38262: ARRAY
38263: PPUSH
38264: CALL_OW 351
38268: OR
38269: IFFALSE 38275
// exit ;
38271: POP
38272: POP
38273: GO 38567
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38275: LD_ADDR_VAR 0 8
38279: PUSH
38280: LD_VAR 0 12
38284: PUSH
38285: LD_VAR 0 7
38289: ARRAY
38290: PUSH
38291: LD_INT 1
38293: ARRAY
38294: PPUSH
38295: LD_VAR 0 12
38299: PUSH
38300: LD_VAR 0 7
38304: ARRAY
38305: PUSH
38306: LD_INT 2
38308: ARRAY
38309: PPUSH
38310: CALL_OW 546
38314: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38315: LD_VAR 0 8
38319: PUSH
38320: LD_INT 1
38322: ARRAY
38323: PUSH
38324: LD_VAR 0 8
38328: PUSH
38329: LD_INT 2
38331: ARRAY
38332: PUSH
38333: LD_VAR 0 13
38337: PUSH
38338: LD_INT 2
38340: PLUS
38341: GREATER
38342: OR
38343: PUSH
38344: LD_VAR 0 8
38348: PUSH
38349: LD_INT 2
38351: ARRAY
38352: PUSH
38353: LD_VAR 0 13
38357: PUSH
38358: LD_INT 2
38360: MINUS
38361: LESS
38362: OR
38363: PUSH
38364: LD_VAR 0 8
38368: PUSH
38369: LD_INT 3
38371: ARRAY
38372: PUSH
38373: LD_INT 0
38375: PUSH
38376: LD_INT 8
38378: PUSH
38379: LD_INT 9
38381: PUSH
38382: LD_INT 10
38384: PUSH
38385: LD_INT 11
38387: PUSH
38388: LD_INT 12
38390: PUSH
38391: LD_INT 13
38393: PUSH
38394: LD_INT 16
38396: PUSH
38397: LD_INT 17
38399: PUSH
38400: LD_INT 18
38402: PUSH
38403: LD_INT 19
38405: PUSH
38406: LD_INT 20
38408: PUSH
38409: LD_INT 21
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: IN
38427: NOT
38428: OR
38429: PUSH
38430: LD_VAR 0 8
38434: PUSH
38435: LD_INT 5
38437: ARRAY
38438: NOT
38439: OR
38440: PUSH
38441: LD_VAR 0 8
38445: PUSH
38446: LD_INT 6
38448: ARRAY
38449: PUSH
38450: LD_INT 1
38452: PUSH
38453: LD_INT 2
38455: PUSH
38456: LD_INT 7
38458: PUSH
38459: LD_INT 9
38461: PUSH
38462: LD_INT 10
38464: PUSH
38465: LD_INT 11
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: IN
38476: NOT
38477: OR
38478: IFFALSE 38484
// exit ;
38480: POP
38481: POP
38482: GO 38567
// end ;
38484: GO 38155
38486: POP
38487: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38488: LD_VAR 0 9
38492: PPUSH
38493: LD_VAR 0 3
38497: PPUSH
38498: LD_VAR 0 4
38502: PPUSH
38503: LD_INT 20
38505: PPUSH
38506: CALL 30513 0 4
38510: PUSH
38511: LD_INT 4
38513: ARRAY
38514: IFFALSE 38518
// exit ;
38516: GO 38567
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38518: LD_VAR 0 2
38522: PUSH
38523: LD_INT 29
38525: PUSH
38526: LD_INT 30
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: IN
38533: PUSH
38534: LD_VAR 0 3
38538: PPUSH
38539: LD_VAR 0 4
38543: PPUSH
38544: LD_VAR 0 9
38548: PPUSH
38549: CALL_OW 440
38553: NOT
38554: AND
38555: IFFALSE 38559
// exit ;
38557: GO 38567
// result := true ;
38559: LD_ADDR_VAR 0 6
38563: PUSH
38564: LD_INT 1
38566: ST_TO_ADDR
// end ;
38567: LD_VAR 0 6
38571: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38572: LD_INT 0
38574: PPUSH
38575: PPUSH
38576: PPUSH
38577: PPUSH
38578: PPUSH
38579: PPUSH
38580: PPUSH
38581: PPUSH
38582: PPUSH
38583: PPUSH
38584: PPUSH
38585: PPUSH
38586: PPUSH
38587: PPUSH
38588: PPUSH
38589: PPUSH
38590: PPUSH
38591: PPUSH
38592: PPUSH
38593: PPUSH
38594: PPUSH
38595: PPUSH
38596: PPUSH
38597: PPUSH
38598: PPUSH
38599: PPUSH
38600: PPUSH
38601: PPUSH
38602: PPUSH
38603: PPUSH
38604: PPUSH
38605: PPUSH
38606: PPUSH
38607: PPUSH
38608: PPUSH
38609: PPUSH
38610: PPUSH
38611: PPUSH
38612: PPUSH
38613: PPUSH
38614: PPUSH
38615: PPUSH
38616: PPUSH
38617: PPUSH
38618: PPUSH
38619: PPUSH
38620: PPUSH
38621: PPUSH
38622: PPUSH
38623: PPUSH
38624: PPUSH
38625: PPUSH
38626: PPUSH
38627: PPUSH
38628: PPUSH
38629: PPUSH
38630: PPUSH
38631: PPUSH
// result = [ ] ;
38632: LD_ADDR_VAR 0 7
38636: PUSH
38637: EMPTY
38638: ST_TO_ADDR
// temp_list = [ ] ;
38639: LD_ADDR_VAR 0 9
38643: PUSH
38644: EMPTY
38645: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38646: LD_VAR 0 4
38650: PUSH
38651: LD_INT 0
38653: PUSH
38654: LD_INT 1
38656: PUSH
38657: LD_INT 2
38659: PUSH
38660: LD_INT 3
38662: PUSH
38663: LD_INT 4
38665: PUSH
38666: LD_INT 5
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: IN
38677: NOT
38678: PUSH
38679: LD_VAR 0 1
38683: PUSH
38684: LD_INT 0
38686: PUSH
38687: LD_INT 1
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: IN
38694: PUSH
38695: LD_VAR 0 5
38699: PUSH
38700: LD_INT 1
38702: PUSH
38703: LD_INT 2
38705: PUSH
38706: LD_INT 3
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: LIST
38713: IN
38714: NOT
38715: AND
38716: OR
38717: IFFALSE 38721
// exit ;
38719: GO 57112
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38721: LD_VAR 0 1
38725: PUSH
38726: LD_INT 6
38728: PUSH
38729: LD_INT 7
38731: PUSH
38732: LD_INT 8
38734: PUSH
38735: LD_INT 13
38737: PUSH
38738: LD_INT 12
38740: PUSH
38741: LD_INT 15
38743: PUSH
38744: LD_INT 11
38746: PUSH
38747: LD_INT 14
38749: PUSH
38750: LD_INT 10
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: IN
38764: IFFALSE 38774
// btype = b_lab ;
38766: LD_ADDR_VAR 0 1
38770: PUSH
38771: LD_INT 6
38773: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38774: LD_VAR 0 6
38778: PUSH
38779: LD_INT 0
38781: PUSH
38782: LD_INT 1
38784: PUSH
38785: LD_INT 2
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: LIST
38792: IN
38793: NOT
38794: PUSH
38795: LD_VAR 0 1
38799: PUSH
38800: LD_INT 0
38802: PUSH
38803: LD_INT 1
38805: PUSH
38806: LD_INT 2
38808: PUSH
38809: LD_INT 3
38811: PUSH
38812: LD_INT 6
38814: PUSH
38815: LD_INT 36
38817: PUSH
38818: LD_INT 4
38820: PUSH
38821: LD_INT 5
38823: PUSH
38824: LD_INT 31
38826: PUSH
38827: LD_INT 32
38829: PUSH
38830: LD_INT 33
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: IN
38846: NOT
38847: PUSH
38848: LD_VAR 0 6
38852: PUSH
38853: LD_INT 1
38855: EQUAL
38856: AND
38857: OR
38858: PUSH
38859: LD_VAR 0 1
38863: PUSH
38864: LD_INT 2
38866: PUSH
38867: LD_INT 3
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: IN
38874: NOT
38875: PUSH
38876: LD_VAR 0 6
38880: PUSH
38881: LD_INT 2
38883: EQUAL
38884: AND
38885: OR
38886: IFFALSE 38896
// mode = 0 ;
38888: LD_ADDR_VAR 0 6
38892: PUSH
38893: LD_INT 0
38895: ST_TO_ADDR
// case mode of 0 :
38896: LD_VAR 0 6
38900: PUSH
38901: LD_INT 0
38903: DOUBLE
38904: EQUAL
38905: IFTRUE 38909
38907: GO 50362
38909: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38910: LD_ADDR_VAR 0 11
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: LD_INT 0
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 0
38927: PUSH
38928: LD_INT 1
38930: NEG
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 1
38938: PUSH
38939: LD_INT 0
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 1
38948: PUSH
38949: LD_INT 1
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 0
38958: PUSH
38959: LD_INT 1
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 1
38968: NEG
38969: PUSH
38970: LD_INT 0
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 1
38979: NEG
38980: PUSH
38981: LD_INT 1
38983: NEG
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 1
38991: NEG
38992: PUSH
38993: LD_INT 2
38995: NEG
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 0
39003: PUSH
39004: LD_INT 2
39006: NEG
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 1
39014: PUSH
39015: LD_INT 1
39017: NEG
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 1
39025: PUSH
39026: LD_INT 2
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 0
39035: PUSH
39036: LD_INT 2
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 1
39045: NEG
39046: PUSH
39047: LD_INT 1
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 1
39056: PUSH
39057: LD_INT 3
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 0
39066: PUSH
39067: LD_INT 3
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 1
39076: NEG
39077: PUSH
39078: LD_INT 2
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39103: LD_ADDR_VAR 0 12
39107: PUSH
39108: LD_INT 0
39110: PUSH
39111: LD_INT 0
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 0
39120: PUSH
39121: LD_INT 1
39123: NEG
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 1
39131: PUSH
39132: LD_INT 0
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 1
39141: PUSH
39142: LD_INT 1
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 0
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 1
39161: NEG
39162: PUSH
39163: LD_INT 0
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 1
39172: NEG
39173: PUSH
39174: LD_INT 1
39176: NEG
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 1
39184: PUSH
39185: LD_INT 1
39187: NEG
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 2
39195: PUSH
39196: LD_INT 0
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 2
39205: PUSH
39206: LD_INT 1
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 1
39215: NEG
39216: PUSH
39217: LD_INT 1
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 2
39226: NEG
39227: PUSH
39228: LD_INT 0
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 2
39237: NEG
39238: PUSH
39239: LD_INT 1
39241: NEG
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 2
39249: NEG
39250: PUSH
39251: LD_INT 1
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 3
39260: NEG
39261: PUSH
39262: LD_INT 0
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 3
39271: NEG
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39299: LD_ADDR_VAR 0 13
39303: PUSH
39304: LD_INT 0
39306: PUSH
39307: LD_INT 0
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 0
39316: PUSH
39317: LD_INT 1
39319: NEG
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: LD_INT 0
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 1
39337: PUSH
39338: LD_INT 1
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: LD_INT 1
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 1
39357: NEG
39358: PUSH
39359: LD_INT 0
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 1
39368: NEG
39369: PUSH
39370: LD_INT 1
39372: NEG
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 1
39380: NEG
39381: PUSH
39382: LD_INT 2
39384: NEG
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 2
39392: PUSH
39393: LD_INT 1
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 2
39402: PUSH
39403: LD_INT 2
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 1
39412: PUSH
39413: LD_INT 2
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 2
39422: NEG
39423: PUSH
39424: LD_INT 1
39426: NEG
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 2
39434: NEG
39435: PUSH
39436: LD_INT 2
39438: NEG
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 2
39446: NEG
39447: PUSH
39448: LD_INT 3
39450: NEG
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 3
39458: NEG
39459: PUSH
39460: LD_INT 2
39462: NEG
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 3
39470: NEG
39471: PUSH
39472: LD_INT 3
39474: NEG
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39498: LD_ADDR_VAR 0 14
39502: PUSH
39503: LD_INT 0
39505: PUSH
39506: LD_INT 0
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 0
39515: PUSH
39516: LD_INT 1
39518: NEG
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 1
39526: PUSH
39527: LD_INT 0
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 1
39536: PUSH
39537: LD_INT 1
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 0
39546: PUSH
39547: LD_INT 1
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 1
39556: NEG
39557: PUSH
39558: LD_INT 0
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 1
39567: NEG
39568: PUSH
39569: LD_INT 1
39571: NEG
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 1
39579: NEG
39580: PUSH
39581: LD_INT 2
39583: NEG
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 0
39591: PUSH
39592: LD_INT 2
39594: NEG
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 1
39602: PUSH
39603: LD_INT 1
39605: NEG
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 1
39613: PUSH
39614: LD_INT 2
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 0
39623: PUSH
39624: LD_INT 2
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 1
39633: NEG
39634: PUSH
39635: LD_INT 1
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 1
39644: NEG
39645: PUSH
39646: LD_INT 3
39648: NEG
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 0
39656: PUSH
39657: LD_INT 3
39659: NEG
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 1
39667: PUSH
39668: LD_INT 2
39670: NEG
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39694: LD_ADDR_VAR 0 15
39698: PUSH
39699: LD_INT 0
39701: PUSH
39702: LD_INT 0
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 0
39711: PUSH
39712: LD_INT 1
39714: NEG
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 1
39722: PUSH
39723: LD_INT 0
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 1
39732: PUSH
39733: LD_INT 1
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 0
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 1
39752: NEG
39753: PUSH
39754: LD_INT 0
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 1
39763: NEG
39764: PUSH
39765: LD_INT 1
39767: NEG
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 1
39775: PUSH
39776: LD_INT 1
39778: NEG
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 2
39786: PUSH
39787: LD_INT 0
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 2
39796: PUSH
39797: LD_INT 1
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 1
39806: NEG
39807: PUSH
39808: LD_INT 1
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 2
39817: NEG
39818: PUSH
39819: LD_INT 0
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 2
39828: NEG
39829: PUSH
39830: LD_INT 1
39832: NEG
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 2
39840: PUSH
39841: LD_INT 1
39843: NEG
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 3
39851: PUSH
39852: LD_INT 0
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 3
39861: PUSH
39862: LD_INT 1
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39887: LD_ADDR_VAR 0 16
39891: PUSH
39892: LD_INT 0
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 0
39904: PUSH
39905: LD_INT 1
39907: NEG
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 1
39915: PUSH
39916: LD_INT 0
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 1
39925: PUSH
39926: LD_INT 1
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 0
39935: PUSH
39936: LD_INT 1
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 1
39945: NEG
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 1
39956: NEG
39957: PUSH
39958: LD_INT 1
39960: NEG
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 1
39968: NEG
39969: PUSH
39970: LD_INT 2
39972: NEG
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 2
39980: PUSH
39981: LD_INT 1
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 2
39990: PUSH
39991: LD_INT 2
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 1
40000: PUSH
40001: LD_INT 2
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 2
40010: NEG
40011: PUSH
40012: LD_INT 1
40014: NEG
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 2
40022: NEG
40023: PUSH
40024: LD_INT 2
40026: NEG
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 3
40034: PUSH
40035: LD_INT 2
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 3
40044: PUSH
40045: LD_INT 3
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 2
40054: PUSH
40055: LD_INT 3
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40080: LD_ADDR_VAR 0 17
40084: PUSH
40085: LD_INT 0
40087: PUSH
40088: LD_INT 0
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 0
40097: PUSH
40098: LD_INT 1
40100: NEG
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 1
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 1
40118: PUSH
40119: LD_INT 1
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 0
40128: PUSH
40129: LD_INT 1
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 1
40138: NEG
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 1
40149: NEG
40150: PUSH
40151: LD_INT 1
40153: NEG
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 1
40161: NEG
40162: PUSH
40163: LD_INT 2
40165: NEG
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 0
40173: PUSH
40174: LD_INT 2
40176: NEG
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 1
40184: PUSH
40185: LD_INT 1
40187: NEG
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 2
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 2
40205: PUSH
40206: LD_INT 1
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 2
40215: PUSH
40216: LD_INT 2
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 1
40225: PUSH
40226: LD_INT 2
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 0
40235: PUSH
40236: LD_INT 2
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 1
40245: NEG
40246: PUSH
40247: LD_INT 1
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 2
40256: NEG
40257: PUSH
40258: LD_INT 0
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 2
40267: NEG
40268: PUSH
40269: LD_INT 1
40271: NEG
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 2
40279: NEG
40280: PUSH
40281: LD_INT 2
40283: NEG
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40310: LD_ADDR_VAR 0 18
40314: PUSH
40315: LD_INT 0
40317: PUSH
40318: LD_INT 0
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 0
40327: PUSH
40328: LD_INT 1
40330: NEG
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 1
40338: PUSH
40339: LD_INT 0
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 1
40348: PUSH
40349: LD_INT 1
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 0
40358: PUSH
40359: LD_INT 1
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 1
40368: NEG
40369: PUSH
40370: LD_INT 0
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 1
40379: NEG
40380: PUSH
40381: LD_INT 1
40383: NEG
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 1
40391: NEG
40392: PUSH
40393: LD_INT 2
40395: NEG
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 0
40403: PUSH
40404: LD_INT 2
40406: NEG
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 1
40414: PUSH
40415: LD_INT 1
40417: NEG
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 2
40425: PUSH
40426: LD_INT 0
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 2
40435: PUSH
40436: LD_INT 1
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 2
40445: PUSH
40446: LD_INT 2
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 1
40455: PUSH
40456: LD_INT 2
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 0
40465: PUSH
40466: LD_INT 2
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 1
40475: NEG
40476: PUSH
40477: LD_INT 1
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 2
40486: NEG
40487: PUSH
40488: LD_INT 0
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 2
40497: NEG
40498: PUSH
40499: LD_INT 1
40501: NEG
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 2
40509: NEG
40510: PUSH
40511: LD_INT 2
40513: NEG
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40540: LD_ADDR_VAR 0 19
40544: PUSH
40545: LD_INT 0
40547: PUSH
40548: LD_INT 0
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 0
40557: PUSH
40558: LD_INT 1
40560: NEG
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 1
40568: PUSH
40569: LD_INT 0
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 1
40578: PUSH
40579: LD_INT 1
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 0
40588: PUSH
40589: LD_INT 1
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 1
40598: NEG
40599: PUSH
40600: LD_INT 0
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 1
40609: NEG
40610: PUSH
40611: LD_INT 1
40613: NEG
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 1
40621: NEG
40622: PUSH
40623: LD_INT 2
40625: NEG
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 0
40633: PUSH
40634: LD_INT 2
40636: NEG
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 1
40644: PUSH
40645: LD_INT 1
40647: NEG
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 2
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 2
40665: PUSH
40666: LD_INT 1
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 2
40675: PUSH
40676: LD_INT 2
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 1
40685: PUSH
40686: LD_INT 2
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 0
40695: PUSH
40696: LD_INT 2
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 1
40705: NEG
40706: PUSH
40707: LD_INT 1
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 2
40716: NEG
40717: PUSH
40718: LD_INT 0
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 2
40727: NEG
40728: PUSH
40729: LD_INT 1
40731: NEG
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 2
40739: NEG
40740: PUSH
40741: LD_INT 2
40743: NEG
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40770: LD_ADDR_VAR 0 20
40774: PUSH
40775: LD_INT 0
40777: PUSH
40778: LD_INT 0
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 0
40787: PUSH
40788: LD_INT 1
40790: NEG
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 1
40798: PUSH
40799: LD_INT 0
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 1
40808: PUSH
40809: LD_INT 1
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 0
40818: PUSH
40819: LD_INT 1
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 1
40828: NEG
40829: PUSH
40830: LD_INT 0
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 1
40839: NEG
40840: PUSH
40841: LD_INT 1
40843: NEG
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 1
40851: NEG
40852: PUSH
40853: LD_INT 2
40855: NEG
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: LD_INT 2
40866: NEG
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 1
40874: PUSH
40875: LD_INT 1
40877: NEG
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 2
40885: PUSH
40886: LD_INT 0
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 2
40895: PUSH
40896: LD_INT 1
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 2
40905: PUSH
40906: LD_INT 2
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 1
40915: PUSH
40916: LD_INT 2
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 0
40925: PUSH
40926: LD_INT 2
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 1
40935: NEG
40936: PUSH
40937: LD_INT 1
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 2
40946: NEG
40947: PUSH
40948: LD_INT 0
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 2
40957: NEG
40958: PUSH
40959: LD_INT 1
40961: NEG
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 2
40969: NEG
40970: PUSH
40971: LD_INT 2
40973: NEG
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41000: LD_ADDR_VAR 0 21
41004: PUSH
41005: LD_INT 0
41007: PUSH
41008: LD_INT 0
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 0
41017: PUSH
41018: LD_INT 1
41020: NEG
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 1
41028: PUSH
41029: LD_INT 0
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 1
41038: PUSH
41039: LD_INT 1
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 0
41048: PUSH
41049: LD_INT 1
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 1
41058: NEG
41059: PUSH
41060: LD_INT 0
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 1
41069: NEG
41070: PUSH
41071: LD_INT 1
41073: NEG
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 1
41081: NEG
41082: PUSH
41083: LD_INT 2
41085: NEG
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 0
41093: PUSH
41094: LD_INT 2
41096: NEG
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 1
41104: PUSH
41105: LD_INT 1
41107: NEG
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 2
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 2
41125: PUSH
41126: LD_INT 1
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 2
41135: PUSH
41136: LD_INT 2
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 1
41145: PUSH
41146: LD_INT 2
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 0
41155: PUSH
41156: LD_INT 2
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 1
41165: NEG
41166: PUSH
41167: LD_INT 1
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 2
41176: NEG
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 2
41187: NEG
41188: PUSH
41189: LD_INT 1
41191: NEG
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 2
41199: NEG
41200: PUSH
41201: LD_INT 2
41203: NEG
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41230: LD_ADDR_VAR 0 22
41234: PUSH
41235: LD_INT 0
41237: PUSH
41238: LD_INT 0
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 0
41247: PUSH
41248: LD_INT 1
41250: NEG
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 1
41258: PUSH
41259: LD_INT 0
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 1
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 0
41278: PUSH
41279: LD_INT 1
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 1
41288: NEG
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 1
41299: NEG
41300: PUSH
41301: LD_INT 1
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 1
41311: NEG
41312: PUSH
41313: LD_INT 2
41315: NEG
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 0
41323: PUSH
41324: LD_INT 2
41326: NEG
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 1
41334: PUSH
41335: LD_INT 1
41337: NEG
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 2
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 2
41355: PUSH
41356: LD_INT 1
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 2
41365: PUSH
41366: LD_INT 2
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 1
41375: PUSH
41376: LD_INT 2
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 0
41385: PUSH
41386: LD_INT 2
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 1
41395: NEG
41396: PUSH
41397: LD_INT 1
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 2
41406: NEG
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 2
41417: NEG
41418: PUSH
41419: LD_INT 1
41421: NEG
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 2
41429: NEG
41430: PUSH
41431: LD_INT 2
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41460: LD_ADDR_VAR 0 23
41464: PUSH
41465: LD_INT 0
41467: PUSH
41468: LD_INT 0
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 0
41477: PUSH
41478: LD_INT 1
41480: NEG
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 1
41488: PUSH
41489: LD_INT 0
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 1
41498: PUSH
41499: LD_INT 1
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 0
41508: PUSH
41509: LD_INT 1
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 1
41518: NEG
41519: PUSH
41520: LD_INT 0
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 1
41529: NEG
41530: PUSH
41531: LD_INT 1
41533: NEG
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 1
41541: NEG
41542: PUSH
41543: LD_INT 2
41545: NEG
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 0
41553: PUSH
41554: LD_INT 2
41556: NEG
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 1
41564: PUSH
41565: LD_INT 1
41567: NEG
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 2
41575: PUSH
41576: LD_INT 0
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 2
41585: PUSH
41586: LD_INT 1
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 2
41595: PUSH
41596: LD_INT 2
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 1
41605: PUSH
41606: LD_INT 2
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 0
41615: PUSH
41616: LD_INT 2
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 1
41625: NEG
41626: PUSH
41627: LD_INT 1
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 2
41636: NEG
41637: PUSH
41638: LD_INT 0
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 2
41647: NEG
41648: PUSH
41649: LD_INT 1
41651: NEG
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 2
41659: NEG
41660: PUSH
41661: LD_INT 2
41663: NEG
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 2
41671: NEG
41672: PUSH
41673: LD_INT 3
41675: NEG
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 1
41683: NEG
41684: PUSH
41685: LD_INT 3
41687: NEG
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 1
41695: PUSH
41696: LD_INT 2
41698: NEG
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 2
41706: PUSH
41707: LD_INT 1
41709: NEG
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41740: LD_ADDR_VAR 0 24
41744: PUSH
41745: LD_INT 0
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 0
41757: PUSH
41758: LD_INT 1
41760: NEG
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 1
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 1
41778: PUSH
41779: LD_INT 1
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 0
41788: PUSH
41789: LD_INT 1
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 1
41798: NEG
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 1
41809: NEG
41810: PUSH
41811: LD_INT 1
41813: NEG
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: LD_INT 2
41825: NEG
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: LD_INT 2
41836: NEG
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 1
41844: PUSH
41845: LD_INT 1
41847: NEG
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 2
41855: PUSH
41856: LD_INT 0
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 2
41865: PUSH
41866: LD_INT 1
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 2
41875: PUSH
41876: LD_INT 2
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 1
41885: PUSH
41886: LD_INT 2
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 0
41895: PUSH
41896: LD_INT 2
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 1
41905: NEG
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 2
41916: NEG
41917: PUSH
41918: LD_INT 0
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 2
41927: NEG
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 2
41939: NEG
41940: PUSH
41941: LD_INT 2
41943: NEG
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: LD_INT 2
41954: NEG
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 2
41962: PUSH
41963: LD_INT 1
41965: NEG
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 3
41973: PUSH
41974: LD_INT 1
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 3
41983: PUSH
41984: LD_INT 2
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42016: LD_ADDR_VAR 0 25
42020: PUSH
42021: LD_INT 0
42023: PUSH
42024: LD_INT 0
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: LD_INT 1
42036: NEG
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 1
42044: PUSH
42045: LD_INT 0
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 1
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 0
42064: PUSH
42065: LD_INT 1
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 1
42074: NEG
42075: PUSH
42076: LD_INT 0
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: LD_INT 1
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 1
42097: NEG
42098: PUSH
42099: LD_INT 2
42101: NEG
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 0
42109: PUSH
42110: LD_INT 2
42112: NEG
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 2
42131: PUSH
42132: LD_INT 0
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 2
42141: PUSH
42142: LD_INT 1
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 2
42151: PUSH
42152: LD_INT 2
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 1
42161: PUSH
42162: LD_INT 2
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 0
42171: PUSH
42172: LD_INT 2
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 1
42181: NEG
42182: PUSH
42183: LD_INT 1
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 2
42192: NEG
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 2
42203: NEG
42204: PUSH
42205: LD_INT 1
42207: NEG
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 2
42215: NEG
42216: PUSH
42217: LD_INT 2
42219: NEG
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 3
42227: PUSH
42228: LD_INT 1
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 3
42237: PUSH
42238: LD_INT 2
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 2
42247: PUSH
42248: LD_INT 3
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 1
42257: PUSH
42258: LD_INT 3
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42290: LD_ADDR_VAR 0 26
42294: PUSH
42295: LD_INT 0
42297: PUSH
42298: LD_INT 0
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 0
42307: PUSH
42308: LD_INT 1
42310: NEG
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 1
42318: PUSH
42319: LD_INT 0
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: LD_INT 1
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 0
42338: PUSH
42339: LD_INT 1
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 1
42348: NEG
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 1
42359: NEG
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 1
42371: NEG
42372: PUSH
42373: LD_INT 2
42375: NEG
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: LD_INT 2
42386: NEG
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 1
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 2
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 2
42415: PUSH
42416: LD_INT 1
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 2
42425: PUSH
42426: LD_INT 2
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: PUSH
42436: LD_INT 2
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: LD_INT 2
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 1
42455: NEG
42456: PUSH
42457: LD_INT 1
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 2
42466: NEG
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 2
42477: NEG
42478: PUSH
42479: LD_INT 1
42481: NEG
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 2
42489: NEG
42490: PUSH
42491: LD_INT 2
42493: NEG
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 2
42501: PUSH
42502: LD_INT 3
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 1
42511: PUSH
42512: LD_INT 3
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 1
42521: NEG
42522: PUSH
42523: LD_INT 2
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 2
42532: NEG
42533: PUSH
42534: LD_INT 1
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42566: LD_ADDR_VAR 0 27
42570: PUSH
42571: LD_INT 0
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: LD_INT 1
42586: NEG
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 1
42594: PUSH
42595: LD_INT 0
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 1
42604: PUSH
42605: LD_INT 1
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 0
42614: PUSH
42615: LD_INT 1
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 1
42624: NEG
42625: PUSH
42626: LD_INT 0
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 1
42635: NEG
42636: PUSH
42637: LD_INT 1
42639: NEG
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 1
42647: NEG
42648: PUSH
42649: LD_INT 2
42651: NEG
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 0
42659: PUSH
42660: LD_INT 2
42662: NEG
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 1
42670: PUSH
42671: LD_INT 1
42673: NEG
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 2
42681: PUSH
42682: LD_INT 0
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 2
42691: PUSH
42692: LD_INT 1
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 2
42701: PUSH
42702: LD_INT 2
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 1
42711: PUSH
42712: LD_INT 2
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: LD_INT 2
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 1
42731: NEG
42732: PUSH
42733: LD_INT 1
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 2
42742: NEG
42743: PUSH
42744: LD_INT 0
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 2
42753: NEG
42754: PUSH
42755: LD_INT 1
42757: NEG
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 2
42765: NEG
42766: PUSH
42767: LD_INT 2
42769: NEG
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 1
42777: NEG
42778: PUSH
42779: LD_INT 2
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 2
42788: NEG
42789: PUSH
42790: LD_INT 1
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 3
42799: NEG
42800: PUSH
42801: LD_INT 1
42803: NEG
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 3
42811: NEG
42812: PUSH
42813: LD_INT 2
42815: NEG
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42846: LD_ADDR_VAR 0 28
42850: PUSH
42851: LD_INT 0
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 0
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 1
42874: PUSH
42875: LD_INT 0
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 1
42884: PUSH
42885: LD_INT 1
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: LD_INT 1
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 1
42904: NEG
42905: PUSH
42906: LD_INT 0
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 1
42915: NEG
42916: PUSH
42917: LD_INT 1
42919: NEG
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 1
42927: NEG
42928: PUSH
42929: LD_INT 2
42931: NEG
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: LD_INT 2
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: PUSH
42951: LD_INT 1
42953: NEG
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 2
42961: PUSH
42962: LD_INT 0
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 2
42971: PUSH
42972: LD_INT 1
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 2
42981: PUSH
42982: LD_INT 2
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 1
42991: PUSH
42992: LD_INT 2
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 0
43001: PUSH
43002: LD_INT 2
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 1
43011: NEG
43012: PUSH
43013: LD_INT 1
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 2
43022: NEG
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 2
43033: NEG
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 2
43045: NEG
43046: PUSH
43047: LD_INT 2
43049: NEG
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 2
43057: NEG
43058: PUSH
43059: LD_INT 3
43061: NEG
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 1
43069: NEG
43070: PUSH
43071: LD_INT 3
43073: NEG
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 3
43081: NEG
43082: PUSH
43083: LD_INT 1
43085: NEG
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 3
43093: NEG
43094: PUSH
43095: LD_INT 2
43097: NEG
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43128: LD_ADDR_VAR 0 29
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 1
43166: PUSH
43167: LD_INT 1
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 0
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 1
43186: NEG
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 1
43197: NEG
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 1
43209: NEG
43210: PUSH
43211: LD_INT 2
43213: NEG
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 0
43221: PUSH
43222: LD_INT 2
43224: NEG
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: LD_INT 1
43235: NEG
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 2
43243: PUSH
43244: LD_INT 0
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 2
43253: PUSH
43254: LD_INT 1
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: LD_INT 2
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 0
43273: PUSH
43274: LD_INT 2
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 2
43294: NEG
43295: PUSH
43296: LD_INT 1
43298: NEG
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 2
43306: NEG
43307: PUSH
43308: LD_INT 2
43310: NEG
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 2
43318: NEG
43319: PUSH
43320: LD_INT 3
43322: NEG
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 2
43330: PUSH
43331: LD_INT 1
43333: NEG
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 3
43341: PUSH
43342: LD_INT 1
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 1
43351: PUSH
43352: LD_INT 3
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 1
43361: NEG
43362: PUSH
43363: LD_INT 2
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 3
43372: NEG
43373: PUSH
43374: LD_INT 2
43376: NEG
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43407: LD_ADDR_VAR 0 30
43411: PUSH
43412: LD_INT 0
43414: PUSH
43415: LD_INT 0
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 0
43424: PUSH
43425: LD_INT 1
43427: NEG
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 1
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 1
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 0
43455: PUSH
43456: LD_INT 1
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 1
43465: NEG
43466: PUSH
43467: LD_INT 0
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 1
43476: NEG
43477: PUSH
43478: LD_INT 1
43480: NEG
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 1
43488: NEG
43489: PUSH
43490: LD_INT 2
43492: NEG
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 0
43500: PUSH
43501: LD_INT 2
43503: NEG
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 1
43511: PUSH
43512: LD_INT 1
43514: NEG
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 2
43522: PUSH
43523: LD_INT 0
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 2
43532: PUSH
43533: LD_INT 1
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 2
43542: PUSH
43543: LD_INT 2
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 1
43552: PUSH
43553: LD_INT 2
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 2
43573: NEG
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 2
43584: NEG
43585: PUSH
43586: LD_INT 1
43588: NEG
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 1
43596: NEG
43597: PUSH
43598: LD_INT 3
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 1
43608: PUSH
43609: LD_INT 2
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 3
43619: PUSH
43620: LD_INT 2
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 2
43629: PUSH
43630: LD_INT 3
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 2
43639: NEG
43640: PUSH
43641: LD_INT 1
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 3
43650: NEG
43651: PUSH
43652: LD_INT 1
43654: NEG
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43685: LD_ADDR_VAR 0 31
43689: PUSH
43690: LD_INT 0
43692: PUSH
43693: LD_INT 0
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: LD_INT 1
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 0
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 1
43743: NEG
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 1
43754: NEG
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 1
43766: NEG
43767: PUSH
43768: LD_INT 2
43770: NEG
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 1
43778: PUSH
43779: LD_INT 1
43781: NEG
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 2
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 2
43799: PUSH
43800: LD_INT 1
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 2
43809: PUSH
43810: LD_INT 2
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 1
43819: PUSH
43820: LD_INT 2
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 0
43829: PUSH
43830: LD_INT 2
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 1
43839: NEG
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 2
43850: NEG
43851: PUSH
43852: LD_INT 1
43854: NEG
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 2
43862: NEG
43863: PUSH
43864: LD_INT 2
43866: NEG
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 2
43874: NEG
43875: PUSH
43876: LD_INT 3
43878: NEG
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 2
43886: PUSH
43887: LD_INT 1
43889: NEG
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 3
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 1
43907: PUSH
43908: LD_INT 3
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 1
43917: NEG
43918: PUSH
43919: LD_INT 2
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 3
43928: NEG
43929: PUSH
43930: LD_INT 2
43932: NEG
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43963: LD_ADDR_VAR 0 32
43967: PUSH
43968: LD_INT 0
43970: PUSH
43971: LD_INT 0
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 0
43980: PUSH
43981: LD_INT 1
43983: NEG
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 1
43991: PUSH
43992: LD_INT 0
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 1
44001: PUSH
44002: LD_INT 1
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 0
44011: PUSH
44012: LD_INT 1
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 1
44021: NEG
44022: PUSH
44023: LD_INT 0
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: LD_INT 1
44036: NEG
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 1
44044: NEG
44045: PUSH
44046: LD_INT 2
44048: NEG
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: LD_INT 2
44059: NEG
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 1
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 2
44078: PUSH
44079: LD_INT 1
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 2
44088: PUSH
44089: LD_INT 2
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: LD_INT 2
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: LD_INT 2
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 1
44118: NEG
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 2
44129: NEG
44130: PUSH
44131: LD_INT 0
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 2
44140: NEG
44141: PUSH
44142: LD_INT 1
44144: NEG
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 1
44152: NEG
44153: PUSH
44154: LD_INT 3
44156: NEG
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: LD_INT 2
44167: NEG
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 3
44175: PUSH
44176: LD_INT 2
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 2
44185: PUSH
44186: LD_INT 3
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 2
44195: NEG
44196: PUSH
44197: LD_INT 1
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 3
44206: NEG
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44241: LD_ADDR_VAR 0 33
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: LD_INT 1
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 1
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 1
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 0
44289: PUSH
44290: LD_INT 1
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 1
44299: NEG
44300: PUSH
44301: LD_INT 0
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 1
44310: NEG
44311: PUSH
44312: LD_INT 1
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: NEG
44323: PUSH
44324: LD_INT 2
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 1
44334: PUSH
44335: LD_INT 1
44337: NEG
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 2
44345: PUSH
44346: LD_INT 0
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 2
44355: PUSH
44356: LD_INT 1
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: LD_INT 2
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 0
44375: PUSH
44376: LD_INT 2
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 1
44385: NEG
44386: PUSH
44387: LD_INT 1
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 2
44396: NEG
44397: PUSH
44398: LD_INT 0
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 2
44407: NEG
44408: PUSH
44409: LD_INT 1
44411: NEG
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 2
44419: NEG
44420: PUSH
44421: LD_INT 2
44423: NEG
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 2
44431: NEG
44432: PUSH
44433: LD_INT 3
44435: NEG
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 2
44443: PUSH
44444: LD_INT 1
44446: NEG
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 3
44454: PUSH
44455: LD_INT 1
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: LD_INT 3
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 1
44474: NEG
44475: PUSH
44476: LD_INT 2
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 3
44485: NEG
44486: PUSH
44487: LD_INT 2
44489: NEG
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44520: LD_ADDR_VAR 0 34
44524: PUSH
44525: LD_INT 0
44527: PUSH
44528: LD_INT 0
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: LD_INT 1
44540: NEG
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 1
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: LD_INT 1
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 0
44568: PUSH
44569: LD_INT 1
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PUSH
44591: LD_INT 1
44593: NEG
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 1
44601: NEG
44602: PUSH
44603: LD_INT 2
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: LD_INT 2
44616: NEG
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 1
44624: PUSH
44625: LD_INT 1
44627: NEG
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 2
44635: PUSH
44636: LD_INT 1
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 2
44645: PUSH
44646: LD_INT 2
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 1
44655: PUSH
44656: LD_INT 2
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 1
44665: NEG
44666: PUSH
44667: LD_INT 1
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 2
44676: NEG
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 2
44687: NEG
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 2
44699: NEG
44700: PUSH
44701: LD_INT 2
44703: NEG
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 1
44711: NEG
44712: PUSH
44713: LD_INT 3
44715: NEG
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 1
44723: PUSH
44724: LD_INT 2
44726: NEG
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 3
44734: PUSH
44735: LD_INT 2
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 2
44744: PUSH
44745: LD_INT 3
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 2
44754: NEG
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 3
44765: NEG
44766: PUSH
44767: LD_INT 1
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44800: LD_ADDR_VAR 0 35
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: LD_INT 0
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 1
44858: NEG
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 1
44869: NEG
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 2
44881: PUSH
44882: LD_INT 1
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 2
44891: NEG
44892: PUSH
44893: LD_INT 1
44895: NEG
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44912: LD_ADDR_VAR 0 36
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: LD_INT 1
44932: NEG
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 1
44940: PUSH
44941: LD_INT 0
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 1
44950: PUSH
44951: LD_INT 1
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 0
44960: PUSH
44961: LD_INT 1
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 1
44970: NEG
44971: PUSH
44972: LD_INT 0
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 1
44981: NEG
44982: PUSH
44983: LD_INT 1
44985: NEG
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 1
44993: NEG
44994: PUSH
44995: LD_INT 2
44997: NEG
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 1
45005: PUSH
45006: LD_INT 2
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45024: LD_ADDR_VAR 0 37
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: LD_INT 0
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 0
45041: PUSH
45042: LD_INT 1
45044: NEG
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: LD_INT 0
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 1
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 0
45072: PUSH
45073: LD_INT 1
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: LD_INT 0
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: LD_INT 1
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: LD_INT 1
45108: NEG
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: LD_INT 1
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45136: LD_ADDR_VAR 0 38
45140: PUSH
45141: LD_INT 0
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: LD_INT 1
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 0
45184: PUSH
45185: LD_INT 1
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 1
45194: NEG
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 1
45205: NEG
45206: PUSH
45207: LD_INT 1
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 2
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 2
45227: NEG
45228: PUSH
45229: LD_INT 1
45231: NEG
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45248: LD_ADDR_VAR 0 39
45252: PUSH
45253: LD_INT 0
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: LD_INT 1
45268: NEG
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 1
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 1
45286: PUSH
45287: LD_INT 1
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 0
45296: PUSH
45297: LD_INT 1
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 1
45306: NEG
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 1
45317: NEG
45318: PUSH
45319: LD_INT 1
45321: NEG
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 1
45329: NEG
45330: PUSH
45331: LD_INT 2
45333: NEG
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: LD_INT 2
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45360: LD_ADDR_VAR 0 40
45364: PUSH
45365: LD_INT 0
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: LD_INT 1
45380: NEG
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 1
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 1
45398: PUSH
45399: LD_INT 1
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 1
45418: NEG
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: LD_INT 1
45433: NEG
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 1
45441: PUSH
45442: LD_INT 1
45444: NEG
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 1
45452: NEG
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45472: LD_ADDR_VAR 0 41
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 1
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 1
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: LD_INT 1
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 1
45553: NEG
45554: PUSH
45555: LD_INT 2
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: PUSH
45566: LD_INT 1
45568: NEG
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 2
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 2
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 2
45596: PUSH
45597: LD_INT 2
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: LD_INT 2
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: LD_INT 1
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 2
45627: NEG
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 2
45638: NEG
45639: PUSH
45640: LD_INT 1
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 2
45650: NEG
45651: PUSH
45652: LD_INT 2
45654: NEG
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 2
45662: NEG
45663: PUSH
45664: LD_INT 3
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 2
45674: PUSH
45675: LD_INT 1
45677: NEG
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 3
45685: PUSH
45686: LD_INT 0
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 3
45695: PUSH
45696: LD_INT 1
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 3
45705: PUSH
45706: LD_INT 2
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 3
45715: PUSH
45716: LD_INT 3
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 2
45725: PUSH
45726: LD_INT 3
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 2
45735: NEG
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 3
45746: NEG
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 3
45757: NEG
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 3
45769: NEG
45770: PUSH
45771: LD_INT 2
45773: NEG
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 3
45781: NEG
45782: PUSH
45783: LD_INT 3
45785: NEG
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45822: LD_ADDR_VAR 0 42
45826: PUSH
45827: LD_INT 0
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 1
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 1
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: LD_INT 1
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 1
45880: NEG
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 1
45891: NEG
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 1
45903: NEG
45904: PUSH
45905: LD_INT 2
45907: NEG
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: LD_INT 2
45918: NEG
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 2
45937: PUSH
45938: LD_INT 1
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 2
45947: PUSH
45948: LD_INT 2
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: LD_INT 2
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 0
45967: PUSH
45968: LD_INT 2
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 2
45988: NEG
45989: PUSH
45990: LD_INT 1
45992: NEG
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 2
46000: NEG
46001: PUSH
46002: LD_INT 2
46004: NEG
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 2
46012: NEG
46013: PUSH
46014: LD_INT 3
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: LD_INT 3
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: LD_INT 3
46039: NEG
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: LD_INT 2
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 3
46058: PUSH
46059: LD_INT 2
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 3
46068: PUSH
46069: LD_INT 3
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 2
46078: PUSH
46079: LD_INT 3
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: LD_INT 3
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: LD_INT 3
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 1
46108: NEG
46109: PUSH
46110: LD_INT 2
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 3
46119: NEG
46120: PUSH
46121: LD_INT 2
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 3
46131: NEG
46132: PUSH
46133: LD_INT 3
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46172: LD_ADDR_VAR 0 43
46176: PUSH
46177: LD_INT 0
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 0
46189: PUSH
46190: LD_INT 1
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 1
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 1
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: LD_INT 1
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: NEG
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: PUSH
46243: LD_INT 1
46245: NEG
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: LD_INT 2
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 0
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: PUSH
46277: LD_INT 1
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 2
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 2
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: LD_INT 2
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 0
46317: PUSH
46318: LD_INT 2
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 1
46327: NEG
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 2
46338: NEG
46339: PUSH
46340: LD_INT 0
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 2
46349: NEG
46350: PUSH
46351: LD_INT 1
46353: NEG
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: LD_INT 3
46365: NEG
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: LD_INT 3
46376: NEG
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: LD_INT 2
46387: NEG
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 2
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 3
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 3
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 1
46426: PUSH
46427: LD_INT 3
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: LD_INT 3
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 1
46446: NEG
46447: PUSH
46448: LD_INT 2
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 2
46457: NEG
46458: PUSH
46459: LD_INT 1
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 3
46468: NEG
46469: PUSH
46470: LD_INT 0
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 3
46479: NEG
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46520: LD_ADDR_VAR 0 44
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: LD_INT 0
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 1
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: LD_INT 1
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 0
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: NEG
46579: PUSH
46580: LD_INT 0
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: LD_INT 1
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: NEG
46602: PUSH
46603: LD_INT 2
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 1
46613: PUSH
46614: LD_INT 1
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 2
46624: PUSH
46625: LD_INT 0
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 2
46634: PUSH
46635: LD_INT 1
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 2
46644: PUSH
46645: LD_INT 2
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 1
46654: PUSH
46655: LD_INT 2
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: LD_INT 1
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 2
46675: NEG
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 2
46686: NEG
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 2
46698: NEG
46699: PUSH
46700: LD_INT 2
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 2
46710: NEG
46711: PUSH
46712: LD_INT 3
46714: NEG
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 2
46722: PUSH
46723: LD_INT 1
46725: NEG
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 3
46733: PUSH
46734: LD_INT 0
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 3
46743: PUSH
46744: LD_INT 1
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 3
46753: PUSH
46754: LD_INT 2
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 3
46763: PUSH
46764: LD_INT 3
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 2
46773: PUSH
46774: LD_INT 3
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 2
46783: NEG
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 3
46794: NEG
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 3
46805: NEG
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 3
46817: NEG
46818: PUSH
46819: LD_INT 2
46821: NEG
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 3
46829: NEG
46830: PUSH
46831: LD_INT 3
46833: NEG
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46870: LD_ADDR_VAR 0 45
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: LD_INT 0
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 1
46908: PUSH
46909: LD_INT 1
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 0
46918: PUSH
46919: LD_INT 1
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: LD_INT 0
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 1
46939: NEG
46940: PUSH
46941: LD_INT 1
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 1
46951: NEG
46952: PUSH
46953: LD_INT 2
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: LD_INT 2
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: PUSH
46975: LD_INT 1
46977: NEG
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 2
46985: PUSH
46986: LD_INT 1
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 2
46995: PUSH
46996: LD_INT 2
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: LD_INT 2
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 0
47015: PUSH
47016: LD_INT 2
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: NEG
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 2
47036: NEG
47037: PUSH
47038: LD_INT 1
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 2
47048: NEG
47049: PUSH
47050: LD_INT 2
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 2
47060: NEG
47061: PUSH
47062: LD_INT 3
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 1
47072: NEG
47073: PUSH
47074: LD_INT 3
47076: NEG
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: LD_INT 3
47087: NEG
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: PUSH
47096: LD_INT 2
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 3
47106: PUSH
47107: LD_INT 2
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 3
47116: PUSH
47117: LD_INT 3
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 2
47126: PUSH
47127: LD_INT 3
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 1
47136: PUSH
47137: LD_INT 3
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: LD_INT 3
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 1
47156: NEG
47157: PUSH
47158: LD_INT 2
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 3
47167: NEG
47168: PUSH
47169: LD_INT 2
47171: NEG
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 3
47179: NEG
47180: PUSH
47181: LD_INT 3
47183: NEG
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47220: LD_ADDR_VAR 0 46
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: LD_INT 1
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: PUSH
47249: LD_INT 0
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: PUSH
47259: LD_INT 1
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: NEG
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: PUSH
47291: LD_INT 1
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 1
47301: NEG
47302: PUSH
47303: LD_INT 2
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: LD_INT 2
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: LD_INT 1
47327: NEG
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 2
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 2
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: LD_INT 2
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: LD_INT 2
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: LD_INT 1
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 2
47386: NEG
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 2
47397: NEG
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: LD_INT 3
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 0
47421: PUSH
47422: LD_INT 3
47424: NEG
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 1
47432: PUSH
47433: LD_INT 2
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 2
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 3
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 3
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 1
47474: PUSH
47475: LD_INT 3
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: LD_INT 3
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 1
47494: NEG
47495: PUSH
47496: LD_INT 2
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 2
47505: NEG
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 3
47516: NEG
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 3
47527: NEG
47528: PUSH
47529: LD_INT 1
47531: NEG
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47568: LD_ADDR_VAR 0 47
47572: PUSH
47573: LD_INT 0
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 0
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 1
47596: PUSH
47597: LD_INT 0
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: LD_INT 1
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: LD_INT 1
47641: NEG
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 1
47649: NEG
47650: PUSH
47651: LD_INT 2
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: LD_INT 2
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 1
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 2
47683: NEG
47684: PUSH
47685: LD_INT 1
47687: NEG
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 2
47695: NEG
47696: PUSH
47697: LD_INT 2
47699: NEG
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47719: LD_ADDR_VAR 0 48
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: LD_INT 0
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: LD_INT 1
47792: NEG
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: LD_INT 2
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: LD_INT 2
47815: NEG
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: PUSH
47824: LD_INT 1
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 2
47834: PUSH
47835: LD_INT 0
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 2
47844: PUSH
47845: LD_INT 1
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47866: LD_ADDR_VAR 0 49
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: LD_INT 0
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: LD_INT 1
47886: NEG
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: LD_INT 1
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 0
47914: PUSH
47915: LD_INT 1
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 1
47924: NEG
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: LD_INT 1
47939: NEG
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: LD_INT 1
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 2
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 2
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 2
47978: PUSH
47979: LD_INT 2
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 1
47988: PUSH
47989: LD_INT 2
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48010: LD_ADDR_VAR 0 50
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: LD_INT 0
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: LD_INT 1
48030: NEG
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: PUSH
48049: LD_INT 1
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: LD_INT 1
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: LD_INT 0
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: PUSH
48081: LD_INT 1
48083: NEG
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 2
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 2
48101: PUSH
48102: LD_INT 2
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 1
48111: PUSH
48112: LD_INT 2
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 0
48121: PUSH
48122: LD_INT 2
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: NEG
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48154: LD_ADDR_VAR 0 51
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: LD_INT 0
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 0
48171: PUSH
48172: LD_INT 1
48174: NEG
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 1
48182: PUSH
48183: LD_INT 0
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 1
48192: PUSH
48193: LD_INT 1
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 1
48212: NEG
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 1
48223: NEG
48224: PUSH
48225: LD_INT 1
48227: NEG
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: LD_INT 2
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: LD_INT 2
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 1
48255: NEG
48256: PUSH
48257: LD_INT 1
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 2
48266: NEG
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 2
48277: NEG
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48301: LD_ADDR_VAR 0 52
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: LD_INT 0
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: LD_INT 1
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 1
48359: NEG
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: LD_INT 1
48374: NEG
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 1
48382: NEG
48383: PUSH
48384: LD_INT 2
48386: NEG
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 1
48394: NEG
48395: PUSH
48396: LD_INT 1
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 2
48405: NEG
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 2
48416: NEG
48417: PUSH
48418: LD_INT 1
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 2
48428: NEG
48429: PUSH
48430: LD_INT 2
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48452: LD_ADDR_VAR 0 53
48456: PUSH
48457: LD_INT 0
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: LD_INT 2
48537: NEG
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: LD_INT 2
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 1
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 2
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 2
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 2
48587: PUSH
48588: LD_INT 2
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: LD_INT 2
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: LD_INT 2
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: LD_INT 1
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 2
48628: NEG
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 2
48639: NEG
48640: PUSH
48641: LD_INT 1
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 2
48651: NEG
48652: PUSH
48653: LD_INT 2
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48682: LD_ADDR_VAR 0 54
48686: PUSH
48687: LD_INT 0
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 1
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 1
48740: NEG
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: LD_INT 1
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 1
48763: NEG
48764: PUSH
48765: LD_INT 2
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: LD_INT 2
48778: NEG
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 1
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 2
48797: PUSH
48798: LD_INT 0
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 2
48807: PUSH
48808: LD_INT 1
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 2
48817: PUSH
48818: LD_INT 2
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: LD_INT 2
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: LD_INT 2
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: LD_INT 1
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 2
48858: NEG
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 2
48869: NEG
48870: PUSH
48871: LD_INT 1
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 2
48881: NEG
48882: PUSH
48883: LD_INT 2
48885: NEG
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48912: LD_ADDR_VAR 0 55
48916: PUSH
48917: LD_INT 0
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 0
48929: PUSH
48930: LD_INT 1
48932: NEG
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 1
48940: PUSH
48941: LD_INT 0
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 1
48950: PUSH
48951: LD_INT 1
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 1
48970: NEG
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 1
48981: NEG
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 1
48993: NEG
48994: PUSH
48995: LD_INT 2
48997: NEG
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: LD_INT 2
49008: NEG
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 1
49016: PUSH
49017: LD_INT 1
49019: NEG
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 2
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 2
49037: PUSH
49038: LD_INT 1
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 2
49047: PUSH
49048: LD_INT 2
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 1
49057: PUSH
49058: LD_INT 2
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 0
49067: PUSH
49068: LD_INT 2
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 1
49077: NEG
49078: PUSH
49079: LD_INT 1
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 2
49088: NEG
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 2
49099: NEG
49100: PUSH
49101: LD_INT 1
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 2
49111: NEG
49112: PUSH
49113: LD_INT 2
49115: NEG
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49142: LD_ADDR_VAR 0 56
49146: PUSH
49147: LD_INT 0
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: LD_INT 1
49162: NEG
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: LD_INT 0
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: LD_INT 1
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: LD_INT 1
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: LD_INT 1
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: LD_INT 2
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: LD_INT 2
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 2
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 2
49267: PUSH
49268: LD_INT 1
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 2
49277: PUSH
49278: LD_INT 2
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: LD_INT 2
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: NEG
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 2
49318: NEG
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 2
49329: NEG
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 2
49341: NEG
49342: PUSH
49343: LD_INT 2
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49372: LD_ADDR_VAR 0 57
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 1
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: LD_INT 1
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 1
49441: NEG
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: NEG
49454: PUSH
49455: LD_INT 2
49457: NEG
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 0
49465: PUSH
49466: LD_INT 2
49468: NEG
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 1
49476: PUSH
49477: LD_INT 1
49479: NEG
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 2
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 2
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 2
49507: PUSH
49508: LD_INT 2
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: LD_INT 2
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: LD_INT 2
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 1
49537: NEG
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 2
49548: NEG
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 2
49559: NEG
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 2
49571: NEG
49572: PUSH
49573: LD_INT 2
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49602: LD_ADDR_VAR 0 58
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: LD_INT 1
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: NEG
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 1
49683: NEG
49684: PUSH
49685: LD_INT 2
49687: NEG
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: LD_INT 2
49698: NEG
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 1
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 2
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 2
49727: PUSH
49728: LD_INT 1
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 2
49737: PUSH
49738: LD_INT 2
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: LD_INT 2
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: LD_INT 2
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 2
49778: NEG
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 2
49789: NEG
49790: PUSH
49791: LD_INT 1
49793: NEG
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 2
49801: NEG
49802: PUSH
49803: LD_INT 2
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49832: LD_ADDR_VAR 0 59
49836: PUSH
49837: LD_INT 0
49839: PUSH
49840: LD_INT 0
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: LD_INT 1
49852: NEG
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 1
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 1
49890: NEG
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 1
49901: NEG
49902: PUSH
49903: LD_INT 1
49905: NEG
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49920: LD_ADDR_VAR 0 60
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: LD_INT 1
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 1
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: LD_INT 1
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 1
49989: NEG
49990: PUSH
49991: LD_INT 1
49993: NEG
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50008: LD_ADDR_VAR 0 61
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: LD_INT 0
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: LD_INT 1
50028: NEG
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 1
50046: PUSH
50047: LD_INT 1
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 0
50056: PUSH
50057: LD_INT 1
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 1
50077: NEG
50078: PUSH
50079: LD_INT 1
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50096: LD_ADDR_VAR 0 62
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: LD_INT 1
50116: NEG
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 1
50124: PUSH
50125: LD_INT 0
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 1
50134: PUSH
50135: LD_INT 1
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 0
50144: PUSH
50145: LD_INT 1
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 1
50154: NEG
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 1
50165: NEG
50166: PUSH
50167: LD_INT 1
50169: NEG
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50184: LD_ADDR_VAR 0 63
50188: PUSH
50189: LD_INT 0
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: LD_INT 1
50204: NEG
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 1
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 1
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: LD_INT 1
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 1
50242: NEG
50243: PUSH
50244: LD_INT 0
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 1
50253: NEG
50254: PUSH
50255: LD_INT 1
50257: NEG
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50272: LD_ADDR_VAR 0 64
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: LD_INT 1
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 1
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 1
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 0
50320: PUSH
50321: LD_INT 1
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 1
50330: NEG
50331: PUSH
50332: LD_INT 0
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 1
50341: NEG
50342: PUSH
50343: LD_INT 1
50345: NEG
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: ST_TO_ADDR
// end ; 1 :
50360: GO 56257
50362: LD_INT 1
50364: DOUBLE
50365: EQUAL
50366: IFTRUE 50370
50368: GO 52993
50370: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50371: LD_ADDR_VAR 0 11
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: LD_INT 3
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 0
50390: PUSH
50391: LD_INT 3
50393: NEG
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 1
50401: PUSH
50402: LD_INT 2
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: LIST
50414: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50415: LD_ADDR_VAR 0 12
50419: PUSH
50420: LD_INT 2
50422: PUSH
50423: LD_INT 1
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 3
50433: PUSH
50434: LD_INT 0
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 3
50443: PUSH
50444: LD_INT 1
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: LIST
50455: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50456: LD_ADDR_VAR 0 13
50460: PUSH
50461: LD_INT 3
50463: PUSH
50464: LD_INT 2
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 3
50473: PUSH
50474: LD_INT 3
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 2
50483: PUSH
50484: LD_INT 3
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: LIST
50495: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50496: LD_ADDR_VAR 0 14
50500: PUSH
50501: LD_INT 1
50503: PUSH
50504: LD_INT 3
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: LD_INT 3
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 1
50523: NEG
50524: PUSH
50525: LD_INT 2
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: LIST
50536: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50537: LD_ADDR_VAR 0 15
50541: PUSH
50542: LD_INT 2
50544: NEG
50545: PUSH
50546: LD_INT 1
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 3
50555: NEG
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 3
50566: NEG
50567: PUSH
50568: LD_INT 1
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: LIST
50580: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50581: LD_ADDR_VAR 0 16
50585: PUSH
50586: LD_INT 2
50588: NEG
50589: PUSH
50590: LD_INT 3
50592: NEG
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 3
50600: NEG
50601: PUSH
50602: LD_INT 2
50604: NEG
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 3
50612: NEG
50613: PUSH
50614: LD_INT 3
50616: NEG
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: LIST
50626: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50627: LD_ADDR_VAR 0 17
50631: PUSH
50632: LD_INT 1
50634: NEG
50635: PUSH
50636: LD_INT 3
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 0
50646: PUSH
50647: LD_INT 3
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 1
50657: PUSH
50658: LD_INT 2
50660: NEG
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: LIST
50670: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50671: LD_ADDR_VAR 0 18
50675: PUSH
50676: LD_INT 2
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 3
50689: PUSH
50690: LD_INT 0
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 3
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: LIST
50711: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50712: LD_ADDR_VAR 0 19
50716: PUSH
50717: LD_INT 3
50719: PUSH
50720: LD_INT 2
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 3
50729: PUSH
50730: LD_INT 3
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 2
50739: PUSH
50740: LD_INT 3
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: LIST
50751: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50752: LD_ADDR_VAR 0 20
50756: PUSH
50757: LD_INT 1
50759: PUSH
50760: LD_INT 3
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: LD_INT 3
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: LD_INT 2
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: LIST
50792: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50793: LD_ADDR_VAR 0 21
50797: PUSH
50798: LD_INT 2
50800: NEG
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 3
50811: NEG
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 3
50822: NEG
50823: PUSH
50824: LD_INT 1
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: LIST
50836: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50837: LD_ADDR_VAR 0 22
50841: PUSH
50842: LD_INT 2
50844: NEG
50845: PUSH
50846: LD_INT 3
50848: NEG
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 3
50856: NEG
50857: PUSH
50858: LD_INT 2
50860: NEG
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 3
50868: NEG
50869: PUSH
50870: LD_INT 3
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: LIST
50882: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50883: LD_ADDR_VAR 0 23
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: LD_INT 3
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 1
50901: NEG
50902: PUSH
50903: LD_INT 4
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 1
50913: PUSH
50914: LD_INT 3
50916: NEG
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: LIST
50926: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50927: LD_ADDR_VAR 0 24
50931: PUSH
50932: LD_INT 3
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 3
50944: PUSH
50945: LD_INT 1
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 4
50955: PUSH
50956: LD_INT 1
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: LIST
50967: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50968: LD_ADDR_VAR 0 25
50972: PUSH
50973: LD_INT 3
50975: PUSH
50976: LD_INT 3
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 4
50985: PUSH
50986: LD_INT 3
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 3
50995: PUSH
50996: LD_INT 4
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: LIST
51007: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51008: LD_ADDR_VAR 0 26
51012: PUSH
51013: LD_INT 0
51015: PUSH
51016: LD_INT 3
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: LD_INT 4
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 1
51035: NEG
51036: PUSH
51037: LD_INT 3
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: LIST
51048: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51049: LD_ADDR_VAR 0 27
51053: PUSH
51054: LD_INT 3
51056: NEG
51057: PUSH
51058: LD_INT 0
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 3
51067: NEG
51068: PUSH
51069: LD_INT 1
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 4
51078: NEG
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: LIST
51092: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51093: LD_ADDR_VAR 0 28
51097: PUSH
51098: LD_INT 3
51100: NEG
51101: PUSH
51102: LD_INT 3
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 3
51112: NEG
51113: PUSH
51114: LD_INT 4
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 4
51124: NEG
51125: PUSH
51126: LD_INT 3
51128: NEG
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: LIST
51138: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51139: LD_ADDR_VAR 0 29
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: LD_INT 3
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: LD_INT 3
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: LD_INT 2
51172: NEG
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 1
51180: NEG
51181: PUSH
51182: LD_INT 4
51184: NEG
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: LD_INT 4
51195: NEG
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 1
51203: PUSH
51204: LD_INT 3
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 1
51214: NEG
51215: PUSH
51216: LD_INT 5
51218: NEG
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 0
51226: PUSH
51227: LD_INT 5
51229: NEG
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: LD_INT 4
51240: NEG
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: LD_INT 6
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: LD_INT 6
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 1
51271: PUSH
51272: LD_INT 5
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51294: LD_ADDR_VAR 0 30
51298: PUSH
51299: LD_INT 2
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 3
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 3
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 3
51332: PUSH
51333: LD_INT 1
51335: NEG
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 4
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 4
51353: PUSH
51354: LD_INT 1
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 4
51363: PUSH
51364: LD_INT 1
51366: NEG
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 5
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 5
51384: PUSH
51385: LD_INT 1
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 5
51394: PUSH
51395: LD_INT 1
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 6
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 6
51415: PUSH
51416: LD_INT 1
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51437: LD_ADDR_VAR 0 31
51441: PUSH
51442: LD_INT 3
51444: PUSH
51445: LD_INT 2
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 3
51454: PUSH
51455: LD_INT 3
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 2
51464: PUSH
51465: LD_INT 3
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 4
51474: PUSH
51475: LD_INT 3
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 4
51484: PUSH
51485: LD_INT 4
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 3
51494: PUSH
51495: LD_INT 4
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 5
51504: PUSH
51505: LD_INT 4
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 5
51514: PUSH
51515: LD_INT 5
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 4
51524: PUSH
51525: LD_INT 5
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 6
51534: PUSH
51535: LD_INT 5
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 6
51544: PUSH
51545: LD_INT 6
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 5
51554: PUSH
51555: LD_INT 6
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51576: LD_ADDR_VAR 0 32
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: LD_INT 3
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 0
51593: PUSH
51594: LD_INT 3
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 1
51603: NEG
51604: PUSH
51605: LD_INT 2
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: LD_INT 4
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: LD_INT 4
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: LD_INT 3
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: LD_INT 5
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: LD_INT 5
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: LD_INT 4
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: LD_INT 6
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: LD_INT 6
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: NEG
51697: PUSH
51698: LD_INT 5
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51719: LD_ADDR_VAR 0 33
51723: PUSH
51724: LD_INT 2
51726: NEG
51727: PUSH
51728: LD_INT 1
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 3
51737: NEG
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 3
51748: NEG
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 3
51760: NEG
51761: PUSH
51762: LD_INT 1
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 4
51771: NEG
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 4
51782: NEG
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 4
51794: NEG
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 5
51805: NEG
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 5
51816: NEG
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 5
51828: NEG
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 6
51839: NEG
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 6
51850: NEG
51851: PUSH
51852: LD_INT 1
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51874: LD_ADDR_VAR 0 34
51878: PUSH
51879: LD_INT 2
51881: NEG
51882: PUSH
51883: LD_INT 3
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 3
51893: NEG
51894: PUSH
51895: LD_INT 2
51897: NEG
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 3
51905: NEG
51906: PUSH
51907: LD_INT 3
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 3
51917: NEG
51918: PUSH
51919: LD_INT 4
51921: NEG
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 4
51929: NEG
51930: PUSH
51931: LD_INT 3
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 4
51941: NEG
51942: PUSH
51943: LD_INT 4
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 4
51953: NEG
51954: PUSH
51955: LD_INT 5
51957: NEG
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 5
51965: NEG
51966: PUSH
51967: LD_INT 4
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 5
51977: NEG
51978: PUSH
51979: LD_INT 5
51981: NEG
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 5
51989: NEG
51990: PUSH
51991: LD_INT 6
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 6
52001: NEG
52002: PUSH
52003: LD_INT 5
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 6
52013: NEG
52014: PUSH
52015: LD_INT 6
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52037: LD_ADDR_VAR 0 41
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: LD_INT 2
52047: NEG
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: LD_INT 3
52059: NEG
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: PUSH
52068: LD_INT 2
52070: NEG
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: LIST
52080: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52081: LD_ADDR_VAR 0 42
52085: PUSH
52086: LD_INT 2
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 2
52098: PUSH
52099: LD_INT 1
52101: NEG
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 3
52109: PUSH
52110: LD_INT 1
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: LIST
52121: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52122: LD_ADDR_VAR 0 43
52126: PUSH
52127: LD_INT 2
52129: PUSH
52130: LD_INT 2
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 3
52139: PUSH
52140: LD_INT 2
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 2
52149: PUSH
52150: LD_INT 3
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: LIST
52161: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52162: LD_ADDR_VAR 0 44
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: LD_INT 2
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 1
52179: PUSH
52180: LD_INT 3
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 1
52189: NEG
52190: PUSH
52191: LD_INT 2
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: LIST
52202: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52203: LD_ADDR_VAR 0 45
52207: PUSH
52208: LD_INT 2
52210: NEG
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 2
52221: NEG
52222: PUSH
52223: LD_INT 1
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 3
52232: NEG
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: LIST
52246: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52247: LD_ADDR_VAR 0 46
52251: PUSH
52252: LD_INT 2
52254: NEG
52255: PUSH
52256: LD_INT 2
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 2
52266: NEG
52267: PUSH
52268: LD_INT 3
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 3
52278: NEG
52279: PUSH
52280: LD_INT 2
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: LIST
52292: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52293: LD_ADDR_VAR 0 47
52297: PUSH
52298: LD_INT 2
52300: NEG
52301: PUSH
52302: LD_INT 3
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: LD_INT 3
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52326: LD_ADDR_VAR 0 48
52330: PUSH
52331: LD_INT 1
52333: PUSH
52334: LD_INT 2
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 2
52344: PUSH
52345: LD_INT 1
52347: NEG
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52357: LD_ADDR_VAR 0 49
52361: PUSH
52362: LD_INT 3
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 3
52374: PUSH
52375: LD_INT 2
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52386: LD_ADDR_VAR 0 50
52390: PUSH
52391: LD_INT 2
52393: PUSH
52394: LD_INT 3
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: LD_INT 3
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52415: LD_ADDR_VAR 0 51
52419: PUSH
52420: LD_INT 1
52422: NEG
52423: PUSH
52424: LD_INT 2
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 2
52433: NEG
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52446: LD_ADDR_VAR 0 52
52450: PUSH
52451: LD_INT 3
52453: NEG
52454: PUSH
52455: LD_INT 1
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 3
52465: NEG
52466: PUSH
52467: LD_INT 2
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52479: LD_ADDR_VAR 0 53
52483: PUSH
52484: LD_INT 1
52486: NEG
52487: PUSH
52488: LD_INT 3
52490: NEG
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 0
52498: PUSH
52499: LD_INT 3
52501: NEG
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 1
52509: PUSH
52510: LD_INT 2
52512: NEG
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: LIST
52522: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52523: LD_ADDR_VAR 0 54
52527: PUSH
52528: LD_INT 2
52530: PUSH
52531: LD_INT 1
52533: NEG
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 3
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 3
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: LIST
52563: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52564: LD_ADDR_VAR 0 55
52568: PUSH
52569: LD_INT 3
52571: PUSH
52572: LD_INT 2
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 3
52581: PUSH
52582: LD_INT 3
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: LD_INT 3
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: LIST
52603: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52604: LD_ADDR_VAR 0 56
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: LD_INT 3
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: LD_INT 3
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 1
52631: NEG
52632: PUSH
52633: LD_INT 2
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: LIST
52644: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52645: LD_ADDR_VAR 0 57
52649: PUSH
52650: LD_INT 2
52652: NEG
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 3
52663: NEG
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 3
52674: NEG
52675: PUSH
52676: LD_INT 1
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: LIST
52688: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52689: LD_ADDR_VAR 0 58
52693: PUSH
52694: LD_INT 2
52696: NEG
52697: PUSH
52698: LD_INT 3
52700: NEG
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 3
52708: NEG
52709: PUSH
52710: LD_INT 2
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 3
52720: NEG
52721: PUSH
52722: LD_INT 3
52724: NEG
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: LIST
52734: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52735: LD_ADDR_VAR 0 59
52739: PUSH
52740: LD_INT 1
52742: NEG
52743: PUSH
52744: LD_INT 2
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: LD_INT 2
52757: NEG
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: LD_INT 1
52768: NEG
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: LIST
52778: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52779: LD_ADDR_VAR 0 60
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: LD_INT 1
52789: NEG
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 2
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 2
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: LIST
52819: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52820: LD_ADDR_VAR 0 61
52824: PUSH
52825: LD_INT 2
52827: PUSH
52828: LD_INT 1
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 2
52837: PUSH
52838: LD_INT 2
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 1
52847: PUSH
52848: LD_INT 2
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: LIST
52859: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52860: LD_ADDR_VAR 0 62
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: LD_INT 2
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: LD_INT 2
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 1
52887: NEG
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: LIST
52900: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52901: LD_ADDR_VAR 0 63
52905: PUSH
52906: LD_INT 1
52908: NEG
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 2
52919: NEG
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 2
52930: NEG
52931: PUSH
52932: LD_INT 1
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: LIST
52944: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52945: LD_ADDR_VAR 0 64
52949: PUSH
52950: LD_INT 1
52952: NEG
52953: PUSH
52954: LD_INT 2
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 2
52964: NEG
52965: PUSH
52966: LD_INT 1
52968: NEG
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 2
52976: NEG
52977: PUSH
52978: LD_INT 2
52980: NEG
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: LIST
52990: ST_TO_ADDR
// end ; 2 :
52991: GO 56257
52993: LD_INT 2
52995: DOUBLE
52996: EQUAL
52997: IFTRUE 53001
52999: GO 56256
53001: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53002: LD_ADDR_VAR 0 29
53006: PUSH
53007: LD_INT 4
53009: PUSH
53010: LD_INT 0
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 4
53019: PUSH
53020: LD_INT 1
53022: NEG
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 5
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 5
53040: PUSH
53041: LD_INT 1
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 4
53050: PUSH
53051: LD_INT 1
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 3
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 3
53070: PUSH
53071: LD_INT 1
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 3
53081: PUSH
53082: LD_INT 2
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 5
53092: PUSH
53093: LD_INT 2
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 3
53102: PUSH
53103: LD_INT 3
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 3
53112: PUSH
53113: LD_INT 2
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 4
53122: PUSH
53123: LD_INT 3
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 4
53132: PUSH
53133: LD_INT 4
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 3
53142: PUSH
53143: LD_INT 4
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 2
53152: PUSH
53153: LD_INT 3
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 2
53162: PUSH
53163: LD_INT 2
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 4
53172: PUSH
53173: LD_INT 2
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 2
53182: PUSH
53183: LD_INT 4
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: LD_INT 4
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 0
53202: PUSH
53203: LD_INT 3
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: LD_INT 4
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 1
53222: PUSH
53223: LD_INT 5
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: LD_INT 5
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 1
53242: NEG
53243: PUSH
53244: LD_INT 4
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 1
53253: NEG
53254: PUSH
53255: LD_INT 3
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 2
53264: PUSH
53265: LD_INT 5
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 2
53274: NEG
53275: PUSH
53276: LD_INT 3
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 3
53285: NEG
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 3
53296: NEG
53297: PUSH
53298: LD_INT 1
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 2
53308: NEG
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 2
53319: NEG
53320: PUSH
53321: LD_INT 1
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 3
53330: NEG
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 4
53341: NEG
53342: PUSH
53343: LD_INT 0
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 4
53352: NEG
53353: PUSH
53354: LD_INT 1
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 4
53364: NEG
53365: PUSH
53366: LD_INT 2
53368: NEG
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 2
53376: NEG
53377: PUSH
53378: LD_INT 2
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 4
53387: NEG
53388: PUSH
53389: LD_INT 4
53391: NEG
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 4
53399: NEG
53400: PUSH
53401: LD_INT 5
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 3
53411: NEG
53412: PUSH
53413: LD_INT 4
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 3
53423: NEG
53424: PUSH
53425: LD_INT 3
53427: NEG
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 4
53435: NEG
53436: PUSH
53437: LD_INT 3
53439: NEG
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 5
53447: NEG
53448: PUSH
53449: LD_INT 4
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 5
53459: NEG
53460: PUSH
53461: LD_INT 5
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 3
53471: NEG
53472: PUSH
53473: LD_INT 5
53475: NEG
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 5
53483: NEG
53484: PUSH
53485: LD_INT 3
53487: NEG
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53540: LD_ADDR_VAR 0 30
53544: PUSH
53545: LD_INT 4
53547: PUSH
53548: LD_INT 4
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 4
53557: PUSH
53558: LD_INT 3
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 5
53567: PUSH
53568: LD_INT 4
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 5
53577: PUSH
53578: LD_INT 5
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 4
53587: PUSH
53588: LD_INT 5
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 3
53597: PUSH
53598: LD_INT 4
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 3
53607: PUSH
53608: LD_INT 3
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 5
53617: PUSH
53618: LD_INT 3
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 3
53627: PUSH
53628: LD_INT 5
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: LD_INT 3
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: LD_INT 2
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 1
53657: PUSH
53658: LD_INT 3
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 1
53667: PUSH
53668: LD_INT 4
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 0
53677: PUSH
53678: LD_INT 4
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: LD_INT 3
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: NEG
53699: PUSH
53700: LD_INT 2
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 2
53709: PUSH
53710: LD_INT 4
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 2
53719: NEG
53720: PUSH
53721: LD_INT 2
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 4
53730: NEG
53731: PUSH
53732: LD_INT 0
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 4
53741: NEG
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 3
53753: NEG
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 3
53764: NEG
53765: PUSH
53766: LD_INT 1
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 4
53775: NEG
53776: PUSH
53777: LD_INT 1
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 5
53786: NEG
53787: PUSH
53788: LD_INT 0
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 5
53797: NEG
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 5
53809: NEG
53810: PUSH
53811: LD_INT 2
53813: NEG
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 3
53821: NEG
53822: PUSH
53823: LD_INT 2
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 3
53832: NEG
53833: PUSH
53834: LD_INT 3
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 3
53844: NEG
53845: PUSH
53846: LD_INT 4
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 2
53856: NEG
53857: PUSH
53858: LD_INT 3
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 2
53868: NEG
53869: PUSH
53870: LD_INT 2
53872: NEG
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 3
53880: NEG
53881: PUSH
53882: LD_INT 2
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 4
53892: NEG
53893: PUSH
53894: LD_INT 3
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 4
53904: NEG
53905: PUSH
53906: LD_INT 4
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 2
53916: NEG
53917: PUSH
53918: LD_INT 4
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 4
53928: NEG
53929: PUSH
53930: LD_INT 2
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 0
53940: PUSH
53941: LD_INT 4
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: LD_INT 5
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: LD_INT 4
53965: NEG
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 1
53973: PUSH
53974: LD_INT 3
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: LD_INT 3
53987: NEG
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: LD_INT 4
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: NEG
54008: PUSH
54009: LD_INT 5
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 2
54019: PUSH
54020: LD_INT 3
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 2
54030: NEG
54031: PUSH
54032: LD_INT 5
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54087: LD_ADDR_VAR 0 31
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: LD_INT 4
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: LD_INT 3
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 1
54114: PUSH
54115: LD_INT 4
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 1
54124: PUSH
54125: LD_INT 5
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: LD_INT 5
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 1
54144: NEG
54145: PUSH
54146: LD_INT 4
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 1
54155: NEG
54156: PUSH
54157: LD_INT 3
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 2
54166: PUSH
54167: LD_INT 5
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 2
54176: NEG
54177: PUSH
54178: LD_INT 3
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 3
54187: NEG
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 3
54198: NEG
54199: PUSH
54200: LD_INT 1
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 2
54210: NEG
54211: PUSH
54212: LD_INT 0
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 2
54221: NEG
54222: PUSH
54223: LD_INT 1
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 3
54232: NEG
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 4
54243: NEG
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 4
54254: NEG
54255: PUSH
54256: LD_INT 1
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 4
54266: NEG
54267: PUSH
54268: LD_INT 2
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 2
54278: NEG
54279: PUSH
54280: LD_INT 2
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 4
54289: NEG
54290: PUSH
54291: LD_INT 4
54293: NEG
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 4
54301: NEG
54302: PUSH
54303: LD_INT 5
54305: NEG
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 3
54313: NEG
54314: PUSH
54315: LD_INT 4
54317: NEG
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 3
54325: NEG
54326: PUSH
54327: LD_INT 3
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 4
54337: NEG
54338: PUSH
54339: LD_INT 3
54341: NEG
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 5
54349: NEG
54350: PUSH
54351: LD_INT 4
54353: NEG
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 5
54361: NEG
54362: PUSH
54363: LD_INT 5
54365: NEG
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 3
54373: NEG
54374: PUSH
54375: LD_INT 5
54377: NEG
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 5
54385: NEG
54386: PUSH
54387: LD_INT 3
54389: NEG
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: LD_INT 3
54400: NEG
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 0
54408: PUSH
54409: LD_INT 4
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 1
54419: PUSH
54420: LD_INT 3
54422: NEG
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 1
54430: PUSH
54431: LD_INT 2
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: LD_INT 2
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 1
54452: NEG
54453: PUSH
54454: LD_INT 3
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 1
54464: NEG
54465: PUSH
54466: LD_INT 4
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 2
54476: PUSH
54477: LD_INT 2
54479: NEG
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 2
54487: NEG
54488: PUSH
54489: LD_INT 4
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 4
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 4
54509: PUSH
54510: LD_INT 1
54512: NEG
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 5
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 5
54530: PUSH
54531: LD_INT 1
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 4
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 3
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 3
54560: PUSH
54561: LD_INT 1
54563: NEG
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 3
54571: PUSH
54572: LD_INT 2
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 5
54582: PUSH
54583: LD_INT 2
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54637: LD_ADDR_VAR 0 32
54641: PUSH
54642: LD_INT 4
54644: NEG
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 4
54655: NEG
54656: PUSH
54657: LD_INT 1
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 3
54667: NEG
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 3
54678: NEG
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 4
54689: NEG
54690: PUSH
54691: LD_INT 1
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 5
54700: NEG
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 5
54711: NEG
54712: PUSH
54713: LD_INT 1
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 5
54723: NEG
54724: PUSH
54725: LD_INT 2
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 3
54735: NEG
54736: PUSH
54737: LD_INT 2
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 3
54746: NEG
54747: PUSH
54748: LD_INT 3
54750: NEG
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 3
54758: NEG
54759: PUSH
54760: LD_INT 4
54762: NEG
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 2
54770: NEG
54771: PUSH
54772: LD_INT 3
54774: NEG
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 2
54782: NEG
54783: PUSH
54784: LD_INT 2
54786: NEG
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 3
54794: NEG
54795: PUSH
54796: LD_INT 2
54798: NEG
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 4
54806: NEG
54807: PUSH
54808: LD_INT 3
54810: NEG
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 4
54818: NEG
54819: PUSH
54820: LD_INT 4
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 2
54830: NEG
54831: PUSH
54832: LD_INT 4
54834: NEG
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 4
54842: NEG
54843: PUSH
54844: LD_INT 2
54846: NEG
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 0
54854: PUSH
54855: LD_INT 4
54857: NEG
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: LD_INT 5
54868: NEG
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: PUSH
54877: LD_INT 4
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 1
54887: PUSH
54888: LD_INT 3
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 0
54898: PUSH
54899: LD_INT 3
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 1
54909: NEG
54910: PUSH
54911: LD_INT 4
54913: NEG
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 1
54921: NEG
54922: PUSH
54923: LD_INT 5
54925: NEG
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 2
54933: PUSH
54934: LD_INT 3
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 2
54944: NEG
54945: PUSH
54946: LD_INT 5
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 3
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 3
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 4
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 4
54987: PUSH
54988: LD_INT 1
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 3
54997: PUSH
54998: LD_INT 1
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 2
55007: PUSH
55008: LD_INT 0
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 2
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 2
55028: PUSH
55029: LD_INT 2
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 4
55039: PUSH
55040: LD_INT 2
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 4
55049: PUSH
55050: LD_INT 4
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 4
55059: PUSH
55060: LD_INT 3
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 5
55069: PUSH
55070: LD_INT 4
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 5
55079: PUSH
55080: LD_INT 5
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 4
55089: PUSH
55090: LD_INT 5
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 3
55099: PUSH
55100: LD_INT 4
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 3
55109: PUSH
55110: LD_INT 3
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 5
55119: PUSH
55120: LD_INT 3
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 3
55129: PUSH
55130: LD_INT 5
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55184: LD_ADDR_VAR 0 33
55188: PUSH
55189: LD_INT 4
55191: NEG
55192: PUSH
55193: LD_INT 4
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 4
55203: NEG
55204: PUSH
55205: LD_INT 5
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 3
55215: NEG
55216: PUSH
55217: LD_INT 4
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 3
55227: NEG
55228: PUSH
55229: LD_INT 3
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 4
55239: NEG
55240: PUSH
55241: LD_INT 3
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 5
55251: NEG
55252: PUSH
55253: LD_INT 4
55255: NEG
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 5
55263: NEG
55264: PUSH
55265: LD_INT 5
55267: NEG
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 3
55275: NEG
55276: PUSH
55277: LD_INT 5
55279: NEG
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 5
55287: NEG
55288: PUSH
55289: LD_INT 3
55291: NEG
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 0
55299: PUSH
55300: LD_INT 3
55302: NEG
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: LD_INT 4
55313: NEG
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 1
55321: PUSH
55322: LD_INT 3
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: LD_INT 2
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: LD_INT 2
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 1
55354: NEG
55355: PUSH
55356: LD_INT 3
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 1
55366: NEG
55367: PUSH
55368: LD_INT 4
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 2
55378: PUSH
55379: LD_INT 2
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 2
55389: NEG
55390: PUSH
55391: LD_INT 4
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 4
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 4
55411: PUSH
55412: LD_INT 1
55414: NEG
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 5
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 5
55432: PUSH
55433: LD_INT 1
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 4
55442: PUSH
55443: LD_INT 1
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 3
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 3
55462: PUSH
55463: LD_INT 1
55465: NEG
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 3
55473: PUSH
55474: LD_INT 2
55476: NEG
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 5
55484: PUSH
55485: LD_INT 2
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 3
55494: PUSH
55495: LD_INT 3
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 3
55504: PUSH
55505: LD_INT 2
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 4
55514: PUSH
55515: LD_INT 3
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 4
55524: PUSH
55525: LD_INT 4
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 3
55534: PUSH
55535: LD_INT 4
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 2
55544: PUSH
55545: LD_INT 3
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 2
55554: PUSH
55555: LD_INT 2
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 4
55564: PUSH
55565: LD_INT 2
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 2
55574: PUSH
55575: LD_INT 4
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 0
55584: PUSH
55585: LD_INT 4
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 0
55594: PUSH
55595: LD_INT 3
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: LD_INT 4
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: LD_INT 5
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 0
55624: PUSH
55625: LD_INT 5
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 1
55634: NEG
55635: PUSH
55636: LD_INT 4
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 1
55645: NEG
55646: PUSH
55647: LD_INT 3
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 2
55656: PUSH
55657: LD_INT 5
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 2
55666: NEG
55667: PUSH
55668: LD_INT 3
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55722: LD_ADDR_VAR 0 34
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: LD_INT 4
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: LD_INT 5
55743: NEG
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: LD_INT 4
55754: NEG
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: LD_INT 3
55765: NEG
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: LD_INT 3
55776: NEG
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 1
55784: NEG
55785: PUSH
55786: LD_INT 4
55788: NEG
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 1
55796: NEG
55797: PUSH
55798: LD_INT 5
55800: NEG
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 2
55808: PUSH
55809: LD_INT 3
55811: NEG
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 2
55819: NEG
55820: PUSH
55821: LD_INT 5
55823: NEG
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 3
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 3
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 4
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 4
55862: PUSH
55863: LD_INT 1
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 3
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 2
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 2
55892: PUSH
55893: LD_INT 1
55895: NEG
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 2
55903: PUSH
55904: LD_INT 2
55906: NEG
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 4
55914: PUSH
55915: LD_INT 2
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 4
55924: PUSH
55925: LD_INT 4
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 4
55934: PUSH
55935: LD_INT 3
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 5
55944: PUSH
55945: LD_INT 4
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 5
55954: PUSH
55955: LD_INT 5
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 4
55964: PUSH
55965: LD_INT 5
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 3
55974: PUSH
55975: LD_INT 4
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 3
55984: PUSH
55985: LD_INT 3
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 5
55994: PUSH
55995: LD_INT 3
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 3
56004: PUSH
56005: LD_INT 5
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: LD_INT 3
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: LD_INT 2
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 1
56034: PUSH
56035: LD_INT 3
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 1
56044: PUSH
56045: LD_INT 4
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: LD_INT 4
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 1
56064: NEG
56065: PUSH
56066: LD_INT 3
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: LD_INT 2
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 2
56086: PUSH
56087: LD_INT 4
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 2
56096: NEG
56097: PUSH
56098: LD_INT 2
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 4
56107: NEG
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 4
56118: NEG
56119: PUSH
56120: LD_INT 1
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 3
56130: NEG
56131: PUSH
56132: LD_INT 0
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 3
56141: NEG
56142: PUSH
56143: LD_INT 1
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 4
56152: NEG
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 5
56163: NEG
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 5
56174: NEG
56175: PUSH
56176: LD_INT 1
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 5
56186: NEG
56187: PUSH
56188: LD_INT 2
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 3
56198: NEG
56199: PUSH
56200: LD_INT 2
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: ST_TO_ADDR
// end ; end ;
56254: GO 56257
56256: POP
// case btype of b_depot , b_warehouse :
56257: LD_VAR 0 1
56261: PUSH
56262: LD_INT 0
56264: DOUBLE
56265: EQUAL
56266: IFTRUE 56276
56268: LD_INT 1
56270: DOUBLE
56271: EQUAL
56272: IFTRUE 56276
56274: GO 56477
56276: POP
// case nation of nation_american :
56277: LD_VAR 0 5
56281: PUSH
56282: LD_INT 1
56284: DOUBLE
56285: EQUAL
56286: IFTRUE 56290
56288: GO 56346
56290: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56291: LD_ADDR_VAR 0 9
56295: PUSH
56296: LD_VAR 0 11
56300: PUSH
56301: LD_VAR 0 12
56305: PUSH
56306: LD_VAR 0 13
56310: PUSH
56311: LD_VAR 0 14
56315: PUSH
56316: LD_VAR 0 15
56320: PUSH
56321: LD_VAR 0 16
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: PUSH
56334: LD_VAR 0 4
56338: PUSH
56339: LD_INT 1
56341: PLUS
56342: ARRAY
56343: ST_TO_ADDR
56344: GO 56475
56346: LD_INT 2
56348: DOUBLE
56349: EQUAL
56350: IFTRUE 56354
56352: GO 56410
56354: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56355: LD_ADDR_VAR 0 9
56359: PUSH
56360: LD_VAR 0 17
56364: PUSH
56365: LD_VAR 0 18
56369: PUSH
56370: LD_VAR 0 19
56374: PUSH
56375: LD_VAR 0 20
56379: PUSH
56380: LD_VAR 0 21
56384: PUSH
56385: LD_VAR 0 22
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: PUSH
56398: LD_VAR 0 4
56402: PUSH
56403: LD_INT 1
56405: PLUS
56406: ARRAY
56407: ST_TO_ADDR
56408: GO 56475
56410: LD_INT 3
56412: DOUBLE
56413: EQUAL
56414: IFTRUE 56418
56416: GO 56474
56418: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56419: LD_ADDR_VAR 0 9
56423: PUSH
56424: LD_VAR 0 23
56428: PUSH
56429: LD_VAR 0 24
56433: PUSH
56434: LD_VAR 0 25
56438: PUSH
56439: LD_VAR 0 26
56443: PUSH
56444: LD_VAR 0 27
56448: PUSH
56449: LD_VAR 0 28
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: PUSH
56462: LD_VAR 0 4
56466: PUSH
56467: LD_INT 1
56469: PLUS
56470: ARRAY
56471: ST_TO_ADDR
56472: GO 56475
56474: POP
56475: GO 57030
56477: LD_INT 2
56479: DOUBLE
56480: EQUAL
56481: IFTRUE 56491
56483: LD_INT 3
56485: DOUBLE
56486: EQUAL
56487: IFTRUE 56491
56489: GO 56547
56491: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56492: LD_ADDR_VAR 0 9
56496: PUSH
56497: LD_VAR 0 29
56501: PUSH
56502: LD_VAR 0 30
56506: PUSH
56507: LD_VAR 0 31
56511: PUSH
56512: LD_VAR 0 32
56516: PUSH
56517: LD_VAR 0 33
56521: PUSH
56522: LD_VAR 0 34
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: PUSH
56535: LD_VAR 0 4
56539: PUSH
56540: LD_INT 1
56542: PLUS
56543: ARRAY
56544: ST_TO_ADDR
56545: GO 57030
56547: LD_INT 16
56549: DOUBLE
56550: EQUAL
56551: IFTRUE 56609
56553: LD_INT 17
56555: DOUBLE
56556: EQUAL
56557: IFTRUE 56609
56559: LD_INT 18
56561: DOUBLE
56562: EQUAL
56563: IFTRUE 56609
56565: LD_INT 19
56567: DOUBLE
56568: EQUAL
56569: IFTRUE 56609
56571: LD_INT 22
56573: DOUBLE
56574: EQUAL
56575: IFTRUE 56609
56577: LD_INT 20
56579: DOUBLE
56580: EQUAL
56581: IFTRUE 56609
56583: LD_INT 21
56585: DOUBLE
56586: EQUAL
56587: IFTRUE 56609
56589: LD_INT 23
56591: DOUBLE
56592: EQUAL
56593: IFTRUE 56609
56595: LD_INT 24
56597: DOUBLE
56598: EQUAL
56599: IFTRUE 56609
56601: LD_INT 25
56603: DOUBLE
56604: EQUAL
56605: IFTRUE 56609
56607: GO 56665
56609: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56610: LD_ADDR_VAR 0 9
56614: PUSH
56615: LD_VAR 0 35
56619: PUSH
56620: LD_VAR 0 36
56624: PUSH
56625: LD_VAR 0 37
56629: PUSH
56630: LD_VAR 0 38
56634: PUSH
56635: LD_VAR 0 39
56639: PUSH
56640: LD_VAR 0 40
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: PUSH
56653: LD_VAR 0 4
56657: PUSH
56658: LD_INT 1
56660: PLUS
56661: ARRAY
56662: ST_TO_ADDR
56663: GO 57030
56665: LD_INT 6
56667: DOUBLE
56668: EQUAL
56669: IFTRUE 56721
56671: LD_INT 7
56673: DOUBLE
56674: EQUAL
56675: IFTRUE 56721
56677: LD_INT 8
56679: DOUBLE
56680: EQUAL
56681: IFTRUE 56721
56683: LD_INT 13
56685: DOUBLE
56686: EQUAL
56687: IFTRUE 56721
56689: LD_INT 12
56691: DOUBLE
56692: EQUAL
56693: IFTRUE 56721
56695: LD_INT 15
56697: DOUBLE
56698: EQUAL
56699: IFTRUE 56721
56701: LD_INT 11
56703: DOUBLE
56704: EQUAL
56705: IFTRUE 56721
56707: LD_INT 14
56709: DOUBLE
56710: EQUAL
56711: IFTRUE 56721
56713: LD_INT 10
56715: DOUBLE
56716: EQUAL
56717: IFTRUE 56721
56719: GO 56777
56721: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56722: LD_ADDR_VAR 0 9
56726: PUSH
56727: LD_VAR 0 41
56731: PUSH
56732: LD_VAR 0 42
56736: PUSH
56737: LD_VAR 0 43
56741: PUSH
56742: LD_VAR 0 44
56746: PUSH
56747: LD_VAR 0 45
56751: PUSH
56752: LD_VAR 0 46
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: PUSH
56765: LD_VAR 0 4
56769: PUSH
56770: LD_INT 1
56772: PLUS
56773: ARRAY
56774: ST_TO_ADDR
56775: GO 57030
56777: LD_INT 36
56779: DOUBLE
56780: EQUAL
56781: IFTRUE 56785
56783: GO 56841
56785: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56786: LD_ADDR_VAR 0 9
56790: PUSH
56791: LD_VAR 0 47
56795: PUSH
56796: LD_VAR 0 48
56800: PUSH
56801: LD_VAR 0 49
56805: PUSH
56806: LD_VAR 0 50
56810: PUSH
56811: LD_VAR 0 51
56815: PUSH
56816: LD_VAR 0 52
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: PUSH
56829: LD_VAR 0 4
56833: PUSH
56834: LD_INT 1
56836: PLUS
56837: ARRAY
56838: ST_TO_ADDR
56839: GO 57030
56841: LD_INT 4
56843: DOUBLE
56844: EQUAL
56845: IFTRUE 56867
56847: LD_INT 5
56849: DOUBLE
56850: EQUAL
56851: IFTRUE 56867
56853: LD_INT 34
56855: DOUBLE
56856: EQUAL
56857: IFTRUE 56867
56859: LD_INT 37
56861: DOUBLE
56862: EQUAL
56863: IFTRUE 56867
56865: GO 56923
56867: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56868: LD_ADDR_VAR 0 9
56872: PUSH
56873: LD_VAR 0 53
56877: PUSH
56878: LD_VAR 0 54
56882: PUSH
56883: LD_VAR 0 55
56887: PUSH
56888: LD_VAR 0 56
56892: PUSH
56893: LD_VAR 0 57
56897: PUSH
56898: LD_VAR 0 58
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: PUSH
56911: LD_VAR 0 4
56915: PUSH
56916: LD_INT 1
56918: PLUS
56919: ARRAY
56920: ST_TO_ADDR
56921: GO 57030
56923: LD_INT 31
56925: DOUBLE
56926: EQUAL
56927: IFTRUE 56973
56929: LD_INT 32
56931: DOUBLE
56932: EQUAL
56933: IFTRUE 56973
56935: LD_INT 33
56937: DOUBLE
56938: EQUAL
56939: IFTRUE 56973
56941: LD_INT 27
56943: DOUBLE
56944: EQUAL
56945: IFTRUE 56973
56947: LD_INT 26
56949: DOUBLE
56950: EQUAL
56951: IFTRUE 56973
56953: LD_INT 28
56955: DOUBLE
56956: EQUAL
56957: IFTRUE 56973
56959: LD_INT 29
56961: DOUBLE
56962: EQUAL
56963: IFTRUE 56973
56965: LD_INT 30
56967: DOUBLE
56968: EQUAL
56969: IFTRUE 56973
56971: GO 57029
56973: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56974: LD_ADDR_VAR 0 9
56978: PUSH
56979: LD_VAR 0 59
56983: PUSH
56984: LD_VAR 0 60
56988: PUSH
56989: LD_VAR 0 61
56993: PUSH
56994: LD_VAR 0 62
56998: PUSH
56999: LD_VAR 0 63
57003: PUSH
57004: LD_VAR 0 64
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: PUSH
57017: LD_VAR 0 4
57021: PUSH
57022: LD_INT 1
57024: PLUS
57025: ARRAY
57026: ST_TO_ADDR
57027: GO 57030
57029: POP
// temp_list2 = [ ] ;
57030: LD_ADDR_VAR 0 10
57034: PUSH
57035: EMPTY
57036: ST_TO_ADDR
// for i in temp_list do
57037: LD_ADDR_VAR 0 8
57041: PUSH
57042: LD_VAR 0 9
57046: PUSH
57047: FOR_IN
57048: IFFALSE 57100
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57050: LD_ADDR_VAR 0 10
57054: PUSH
57055: LD_VAR 0 10
57059: PUSH
57060: LD_VAR 0 8
57064: PUSH
57065: LD_INT 1
57067: ARRAY
57068: PUSH
57069: LD_VAR 0 2
57073: PLUS
57074: PUSH
57075: LD_VAR 0 8
57079: PUSH
57080: LD_INT 2
57082: ARRAY
57083: PUSH
57084: LD_VAR 0 3
57088: PLUS
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: EMPTY
57095: LIST
57096: ADD
57097: ST_TO_ADDR
57098: GO 57047
57100: POP
57101: POP
// result = temp_list2 ;
57102: LD_ADDR_VAR 0 7
57106: PUSH
57107: LD_VAR 0 10
57111: ST_TO_ADDR
// end ;
57112: LD_VAR 0 7
57116: RET
// export function EnemyInRange ( unit , dist ) ; begin
57117: LD_INT 0
57119: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57120: LD_ADDR_VAR 0 3
57124: PUSH
57125: LD_VAR 0 1
57129: PPUSH
57130: CALL_OW 255
57134: PPUSH
57135: LD_VAR 0 1
57139: PPUSH
57140: CALL_OW 250
57144: PPUSH
57145: LD_VAR 0 1
57149: PPUSH
57150: CALL_OW 251
57154: PPUSH
57155: LD_VAR 0 2
57159: PPUSH
57160: CALL 30513 0 4
57164: PUSH
57165: LD_INT 4
57167: ARRAY
57168: ST_TO_ADDR
// end ;
57169: LD_VAR 0 3
57173: RET
// export function PlayerSeeMe ( unit ) ; begin
57174: LD_INT 0
57176: PPUSH
// result := See ( your_side , unit ) ;
57177: LD_ADDR_VAR 0 2
57181: PUSH
57182: LD_OWVAR 2
57186: PPUSH
57187: LD_VAR 0 1
57191: PPUSH
57192: CALL_OW 292
57196: ST_TO_ADDR
// end ;
57197: LD_VAR 0 2
57201: RET
// export function ReverseDir ( unit ) ; begin
57202: LD_INT 0
57204: PPUSH
// if not unit then
57205: LD_VAR 0 1
57209: NOT
57210: IFFALSE 57214
// exit ;
57212: GO 57237
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57214: LD_ADDR_VAR 0 2
57218: PUSH
57219: LD_VAR 0 1
57223: PPUSH
57224: CALL_OW 254
57228: PUSH
57229: LD_INT 3
57231: PLUS
57232: PUSH
57233: LD_INT 6
57235: MOD
57236: ST_TO_ADDR
// end ;
57237: LD_VAR 0 2
57241: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57242: LD_INT 0
57244: PPUSH
57245: PPUSH
57246: PPUSH
57247: PPUSH
57248: PPUSH
// if not hexes then
57249: LD_VAR 0 2
57253: NOT
57254: IFFALSE 57258
// exit ;
57256: GO 57406
// dist := 9999 ;
57258: LD_ADDR_VAR 0 5
57262: PUSH
57263: LD_INT 9999
57265: ST_TO_ADDR
// for i = 1 to hexes do
57266: LD_ADDR_VAR 0 4
57270: PUSH
57271: DOUBLE
57272: LD_INT 1
57274: DEC
57275: ST_TO_ADDR
57276: LD_VAR 0 2
57280: PUSH
57281: FOR_TO
57282: IFFALSE 57394
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57284: LD_VAR 0 1
57288: PPUSH
57289: LD_VAR 0 2
57293: PUSH
57294: LD_VAR 0 4
57298: ARRAY
57299: PUSH
57300: LD_INT 1
57302: ARRAY
57303: PPUSH
57304: LD_VAR 0 2
57308: PUSH
57309: LD_VAR 0 4
57313: ARRAY
57314: PUSH
57315: LD_INT 2
57317: ARRAY
57318: PPUSH
57319: CALL_OW 297
57323: PUSH
57324: LD_VAR 0 5
57328: LESS
57329: IFFALSE 57392
// begin hex := hexes [ i ] ;
57331: LD_ADDR_VAR 0 7
57335: PUSH
57336: LD_VAR 0 2
57340: PUSH
57341: LD_VAR 0 4
57345: ARRAY
57346: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57347: LD_ADDR_VAR 0 5
57351: PUSH
57352: LD_VAR 0 1
57356: PPUSH
57357: LD_VAR 0 2
57361: PUSH
57362: LD_VAR 0 4
57366: ARRAY
57367: PUSH
57368: LD_INT 1
57370: ARRAY
57371: PPUSH
57372: LD_VAR 0 2
57376: PUSH
57377: LD_VAR 0 4
57381: ARRAY
57382: PUSH
57383: LD_INT 2
57385: ARRAY
57386: PPUSH
57387: CALL_OW 297
57391: ST_TO_ADDR
// end ; end ;
57392: GO 57281
57394: POP
57395: POP
// result := hex ;
57396: LD_ADDR_VAR 0 3
57400: PUSH
57401: LD_VAR 0 7
57405: ST_TO_ADDR
// end ;
57406: LD_VAR 0 3
57410: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57411: LD_INT 0
57413: PPUSH
57414: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57415: LD_VAR 0 1
57419: NOT
57420: PUSH
57421: LD_VAR 0 1
57425: PUSH
57426: LD_INT 21
57428: PUSH
57429: LD_INT 2
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 23
57438: PUSH
57439: LD_INT 2
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PPUSH
57450: CALL_OW 69
57454: IN
57455: NOT
57456: OR
57457: IFFALSE 57461
// exit ;
57459: GO 57508
// for i = 1 to 3 do
57461: LD_ADDR_VAR 0 3
57465: PUSH
57466: DOUBLE
57467: LD_INT 1
57469: DEC
57470: ST_TO_ADDR
57471: LD_INT 3
57473: PUSH
57474: FOR_TO
57475: IFFALSE 57506
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57477: LD_VAR 0 1
57481: PPUSH
57482: CALL_OW 250
57486: PPUSH
57487: LD_VAR 0 1
57491: PPUSH
57492: CALL_OW 251
57496: PPUSH
57497: LD_INT 1
57499: PPUSH
57500: CALL_OW 453
57504: GO 57474
57506: POP
57507: POP
// end ;
57508: LD_VAR 0 2
57512: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57513: LD_INT 0
57515: PPUSH
57516: PPUSH
57517: PPUSH
57518: PPUSH
57519: PPUSH
57520: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57521: LD_VAR 0 1
57525: NOT
57526: PUSH
57527: LD_VAR 0 2
57531: NOT
57532: OR
57533: PUSH
57534: LD_VAR 0 1
57538: PPUSH
57539: CALL_OW 314
57543: OR
57544: IFFALSE 57548
// exit ;
57546: GO 57989
// x := GetX ( enemy_unit ) ;
57548: LD_ADDR_VAR 0 7
57552: PUSH
57553: LD_VAR 0 2
57557: PPUSH
57558: CALL_OW 250
57562: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57563: LD_ADDR_VAR 0 8
57567: PUSH
57568: LD_VAR 0 2
57572: PPUSH
57573: CALL_OW 251
57577: ST_TO_ADDR
// if not x or not y then
57578: LD_VAR 0 7
57582: NOT
57583: PUSH
57584: LD_VAR 0 8
57588: NOT
57589: OR
57590: IFFALSE 57594
// exit ;
57592: GO 57989
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57594: LD_ADDR_VAR 0 6
57598: PUSH
57599: LD_VAR 0 7
57603: PPUSH
57604: LD_INT 0
57606: PPUSH
57607: LD_INT 4
57609: PPUSH
57610: CALL_OW 272
57614: PUSH
57615: LD_VAR 0 8
57619: PPUSH
57620: LD_INT 0
57622: PPUSH
57623: LD_INT 4
57625: PPUSH
57626: CALL_OW 273
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_VAR 0 7
57639: PPUSH
57640: LD_INT 1
57642: PPUSH
57643: LD_INT 4
57645: PPUSH
57646: CALL_OW 272
57650: PUSH
57651: LD_VAR 0 8
57655: PPUSH
57656: LD_INT 1
57658: PPUSH
57659: LD_INT 4
57661: PPUSH
57662: CALL_OW 273
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_VAR 0 7
57675: PPUSH
57676: LD_INT 2
57678: PPUSH
57679: LD_INT 4
57681: PPUSH
57682: CALL_OW 272
57686: PUSH
57687: LD_VAR 0 8
57691: PPUSH
57692: LD_INT 2
57694: PPUSH
57695: LD_INT 4
57697: PPUSH
57698: CALL_OW 273
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_VAR 0 7
57711: PPUSH
57712: LD_INT 3
57714: PPUSH
57715: LD_INT 4
57717: PPUSH
57718: CALL_OW 272
57722: PUSH
57723: LD_VAR 0 8
57727: PPUSH
57728: LD_INT 3
57730: PPUSH
57731: LD_INT 4
57733: PPUSH
57734: CALL_OW 273
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_VAR 0 7
57747: PPUSH
57748: LD_INT 4
57750: PPUSH
57751: LD_INT 4
57753: PPUSH
57754: CALL_OW 272
57758: PUSH
57759: LD_VAR 0 8
57763: PPUSH
57764: LD_INT 4
57766: PPUSH
57767: LD_INT 4
57769: PPUSH
57770: CALL_OW 273
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_VAR 0 7
57783: PPUSH
57784: LD_INT 5
57786: PPUSH
57787: LD_INT 4
57789: PPUSH
57790: CALL_OW 272
57794: PUSH
57795: LD_VAR 0 8
57799: PPUSH
57800: LD_INT 5
57802: PPUSH
57803: LD_INT 4
57805: PPUSH
57806: CALL_OW 273
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: ST_TO_ADDR
// for i = tmp downto 1 do
57823: LD_ADDR_VAR 0 4
57827: PUSH
57828: DOUBLE
57829: LD_VAR 0 6
57833: INC
57834: ST_TO_ADDR
57835: LD_INT 1
57837: PUSH
57838: FOR_DOWNTO
57839: IFFALSE 57940
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57841: LD_VAR 0 6
57845: PUSH
57846: LD_VAR 0 4
57850: ARRAY
57851: PUSH
57852: LD_INT 1
57854: ARRAY
57855: PPUSH
57856: LD_VAR 0 6
57860: PUSH
57861: LD_VAR 0 4
57865: ARRAY
57866: PUSH
57867: LD_INT 2
57869: ARRAY
57870: PPUSH
57871: CALL_OW 488
57875: NOT
57876: PUSH
57877: LD_VAR 0 6
57881: PUSH
57882: LD_VAR 0 4
57886: ARRAY
57887: PUSH
57888: LD_INT 1
57890: ARRAY
57891: PPUSH
57892: LD_VAR 0 6
57896: PUSH
57897: LD_VAR 0 4
57901: ARRAY
57902: PUSH
57903: LD_INT 2
57905: ARRAY
57906: PPUSH
57907: CALL_OW 428
57911: PUSH
57912: LD_INT 0
57914: NONEQUAL
57915: OR
57916: IFFALSE 57938
// tmp := Delete ( tmp , i ) ;
57918: LD_ADDR_VAR 0 6
57922: PUSH
57923: LD_VAR 0 6
57927: PPUSH
57928: LD_VAR 0 4
57932: PPUSH
57933: CALL_OW 3
57937: ST_TO_ADDR
57938: GO 57838
57940: POP
57941: POP
// j := GetClosestHex ( unit , tmp ) ;
57942: LD_ADDR_VAR 0 5
57946: PUSH
57947: LD_VAR 0 1
57951: PPUSH
57952: LD_VAR 0 6
57956: PPUSH
57957: CALL 57242 0 2
57961: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57962: LD_VAR 0 1
57966: PPUSH
57967: LD_VAR 0 5
57971: PUSH
57972: LD_INT 1
57974: ARRAY
57975: PPUSH
57976: LD_VAR 0 5
57980: PUSH
57981: LD_INT 2
57983: ARRAY
57984: PPUSH
57985: CALL_OW 111
// end ;
57989: LD_VAR 0 3
57993: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57994: LD_INT 0
57996: PPUSH
57997: PPUSH
57998: PPUSH
// uc_side = 0 ;
57999: LD_ADDR_OWVAR 20
58003: PUSH
58004: LD_INT 0
58006: ST_TO_ADDR
// uc_nation = 0 ;
58007: LD_ADDR_OWVAR 21
58011: PUSH
58012: LD_INT 0
58014: ST_TO_ADDR
// InitHc_All ( ) ;
58015: CALL_OW 584
// InitVc ;
58019: CALL_OW 20
// if mastodonts then
58023: LD_VAR 0 6
58027: IFFALSE 58094
// for i = 1 to mastodonts do
58029: LD_ADDR_VAR 0 11
58033: PUSH
58034: DOUBLE
58035: LD_INT 1
58037: DEC
58038: ST_TO_ADDR
58039: LD_VAR 0 6
58043: PUSH
58044: FOR_TO
58045: IFFALSE 58092
// begin vc_chassis := 31 ;
58047: LD_ADDR_OWVAR 37
58051: PUSH
58052: LD_INT 31
58054: ST_TO_ADDR
// vc_control := control_rider ;
58055: LD_ADDR_OWVAR 38
58059: PUSH
58060: LD_INT 4
58062: ST_TO_ADDR
// animal := CreateVehicle ;
58063: LD_ADDR_VAR 0 12
58067: PUSH
58068: CALL_OW 45
58072: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58073: LD_VAR 0 12
58077: PPUSH
58078: LD_VAR 0 8
58082: PPUSH
58083: LD_INT 0
58085: PPUSH
58086: CALL 60282 0 3
// end ;
58090: GO 58044
58092: POP
58093: POP
// if horses then
58094: LD_VAR 0 5
58098: IFFALSE 58165
// for i = 1 to horses do
58100: LD_ADDR_VAR 0 11
58104: PUSH
58105: DOUBLE
58106: LD_INT 1
58108: DEC
58109: ST_TO_ADDR
58110: LD_VAR 0 5
58114: PUSH
58115: FOR_TO
58116: IFFALSE 58163
// begin hc_class := 21 ;
58118: LD_ADDR_OWVAR 28
58122: PUSH
58123: LD_INT 21
58125: ST_TO_ADDR
// hc_gallery :=  ;
58126: LD_ADDR_OWVAR 33
58130: PUSH
58131: LD_STRING 
58133: ST_TO_ADDR
// animal := CreateHuman ;
58134: LD_ADDR_VAR 0 12
58138: PUSH
58139: CALL_OW 44
58143: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58144: LD_VAR 0 12
58148: PPUSH
58149: LD_VAR 0 8
58153: PPUSH
58154: LD_INT 0
58156: PPUSH
58157: CALL 60282 0 3
// end ;
58161: GO 58115
58163: POP
58164: POP
// if birds then
58165: LD_VAR 0 1
58169: IFFALSE 58236
// for i = 1 to birds do
58171: LD_ADDR_VAR 0 11
58175: PUSH
58176: DOUBLE
58177: LD_INT 1
58179: DEC
58180: ST_TO_ADDR
58181: LD_VAR 0 1
58185: PUSH
58186: FOR_TO
58187: IFFALSE 58234
// begin hc_class = 18 ;
58189: LD_ADDR_OWVAR 28
58193: PUSH
58194: LD_INT 18
58196: ST_TO_ADDR
// hc_gallery =  ;
58197: LD_ADDR_OWVAR 33
58201: PUSH
58202: LD_STRING 
58204: ST_TO_ADDR
// animal := CreateHuman ;
58205: LD_ADDR_VAR 0 12
58209: PUSH
58210: CALL_OW 44
58214: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58215: LD_VAR 0 12
58219: PPUSH
58220: LD_VAR 0 8
58224: PPUSH
58225: LD_INT 0
58227: PPUSH
58228: CALL 60282 0 3
// end ;
58232: GO 58186
58234: POP
58235: POP
// if tigers then
58236: LD_VAR 0 2
58240: IFFALSE 58324
// for i = 1 to tigers do
58242: LD_ADDR_VAR 0 11
58246: PUSH
58247: DOUBLE
58248: LD_INT 1
58250: DEC
58251: ST_TO_ADDR
58252: LD_VAR 0 2
58256: PUSH
58257: FOR_TO
58258: IFFALSE 58322
// begin hc_class = class_tiger ;
58260: LD_ADDR_OWVAR 28
58264: PUSH
58265: LD_INT 14
58267: ST_TO_ADDR
// hc_gallery =  ;
58268: LD_ADDR_OWVAR 33
58272: PUSH
58273: LD_STRING 
58275: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58276: LD_ADDR_OWVAR 35
58280: PUSH
58281: LD_INT 7
58283: NEG
58284: PPUSH
58285: LD_INT 7
58287: PPUSH
58288: CALL_OW 12
58292: ST_TO_ADDR
// animal := CreateHuman ;
58293: LD_ADDR_VAR 0 12
58297: PUSH
58298: CALL_OW 44
58302: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58303: LD_VAR 0 12
58307: PPUSH
58308: LD_VAR 0 8
58312: PPUSH
58313: LD_INT 0
58315: PPUSH
58316: CALL 60282 0 3
// end ;
58320: GO 58257
58322: POP
58323: POP
// if apemans then
58324: LD_VAR 0 3
58328: IFFALSE 58451
// for i = 1 to apemans do
58330: LD_ADDR_VAR 0 11
58334: PUSH
58335: DOUBLE
58336: LD_INT 1
58338: DEC
58339: ST_TO_ADDR
58340: LD_VAR 0 3
58344: PUSH
58345: FOR_TO
58346: IFFALSE 58449
// begin hc_class = class_apeman ;
58348: LD_ADDR_OWVAR 28
58352: PUSH
58353: LD_INT 12
58355: ST_TO_ADDR
// hc_gallery =  ;
58356: LD_ADDR_OWVAR 33
58360: PUSH
58361: LD_STRING 
58363: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58364: LD_ADDR_OWVAR 35
58368: PUSH
58369: LD_INT 2
58371: NEG
58372: PPUSH
58373: LD_INT 2
58375: PPUSH
58376: CALL_OW 12
58380: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58381: LD_ADDR_OWVAR 31
58385: PUSH
58386: LD_INT 1
58388: PPUSH
58389: LD_INT 3
58391: PPUSH
58392: CALL_OW 12
58396: PUSH
58397: LD_INT 1
58399: PPUSH
58400: LD_INT 3
58402: PPUSH
58403: CALL_OW 12
58407: PUSH
58408: LD_INT 0
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: ST_TO_ADDR
// animal := CreateHuman ;
58420: LD_ADDR_VAR 0 12
58424: PUSH
58425: CALL_OW 44
58429: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58430: LD_VAR 0 12
58434: PPUSH
58435: LD_VAR 0 8
58439: PPUSH
58440: LD_INT 0
58442: PPUSH
58443: CALL 60282 0 3
// end ;
58447: GO 58345
58449: POP
58450: POP
// if enchidnas then
58451: LD_VAR 0 4
58455: IFFALSE 58522
// for i = 1 to enchidnas do
58457: LD_ADDR_VAR 0 11
58461: PUSH
58462: DOUBLE
58463: LD_INT 1
58465: DEC
58466: ST_TO_ADDR
58467: LD_VAR 0 4
58471: PUSH
58472: FOR_TO
58473: IFFALSE 58520
// begin hc_class = 13 ;
58475: LD_ADDR_OWVAR 28
58479: PUSH
58480: LD_INT 13
58482: ST_TO_ADDR
// hc_gallery =  ;
58483: LD_ADDR_OWVAR 33
58487: PUSH
58488: LD_STRING 
58490: ST_TO_ADDR
// animal := CreateHuman ;
58491: LD_ADDR_VAR 0 12
58495: PUSH
58496: CALL_OW 44
58500: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58501: LD_VAR 0 12
58505: PPUSH
58506: LD_VAR 0 8
58510: PPUSH
58511: LD_INT 0
58513: PPUSH
58514: CALL 60282 0 3
// end ;
58518: GO 58472
58520: POP
58521: POP
// if fishes then
58522: LD_VAR 0 7
58526: IFFALSE 58593
// for i = 1 to fishes do
58528: LD_ADDR_VAR 0 11
58532: PUSH
58533: DOUBLE
58534: LD_INT 1
58536: DEC
58537: ST_TO_ADDR
58538: LD_VAR 0 7
58542: PUSH
58543: FOR_TO
58544: IFFALSE 58591
// begin hc_class = 20 ;
58546: LD_ADDR_OWVAR 28
58550: PUSH
58551: LD_INT 20
58553: ST_TO_ADDR
// hc_gallery =  ;
58554: LD_ADDR_OWVAR 33
58558: PUSH
58559: LD_STRING 
58561: ST_TO_ADDR
// animal := CreateHuman ;
58562: LD_ADDR_VAR 0 12
58566: PUSH
58567: CALL_OW 44
58571: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58572: LD_VAR 0 12
58576: PPUSH
58577: LD_VAR 0 9
58581: PPUSH
58582: LD_INT 0
58584: PPUSH
58585: CALL 60282 0 3
// end ;
58589: GO 58543
58591: POP
58592: POP
// end ;
58593: LD_VAR 0 10
58597: RET
// export function WantHeal ( sci , unit ) ; begin
58598: LD_INT 0
58600: PPUSH
// if GetTaskList ( sci ) > 0 then
58601: LD_VAR 0 1
58605: PPUSH
58606: CALL_OW 437
58610: PUSH
58611: LD_INT 0
58613: GREATER
58614: IFFALSE 58684
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58616: LD_VAR 0 1
58620: PPUSH
58621: CALL_OW 437
58625: PUSH
58626: LD_INT 1
58628: ARRAY
58629: PUSH
58630: LD_INT 1
58632: ARRAY
58633: PUSH
58634: LD_STRING l
58636: EQUAL
58637: PUSH
58638: LD_VAR 0 1
58642: PPUSH
58643: CALL_OW 437
58647: PUSH
58648: LD_INT 1
58650: ARRAY
58651: PUSH
58652: LD_INT 4
58654: ARRAY
58655: PUSH
58656: LD_VAR 0 2
58660: EQUAL
58661: AND
58662: IFFALSE 58674
// result := true else
58664: LD_ADDR_VAR 0 3
58668: PUSH
58669: LD_INT 1
58671: ST_TO_ADDR
58672: GO 58682
// result := false ;
58674: LD_ADDR_VAR 0 3
58678: PUSH
58679: LD_INT 0
58681: ST_TO_ADDR
// end else
58682: GO 58692
// result := false ;
58684: LD_ADDR_VAR 0 3
58688: PUSH
58689: LD_INT 0
58691: ST_TO_ADDR
// end ;
58692: LD_VAR 0 3
58696: RET
// export function HealTarget ( sci ) ; begin
58697: LD_INT 0
58699: PPUSH
// if not sci then
58700: LD_VAR 0 1
58704: NOT
58705: IFFALSE 58709
// exit ;
58707: GO 58774
// result := 0 ;
58709: LD_ADDR_VAR 0 2
58713: PUSH
58714: LD_INT 0
58716: ST_TO_ADDR
// if GetTaskList ( sci ) then
58717: LD_VAR 0 1
58721: PPUSH
58722: CALL_OW 437
58726: IFFALSE 58774
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58728: LD_VAR 0 1
58732: PPUSH
58733: CALL_OW 437
58737: PUSH
58738: LD_INT 1
58740: ARRAY
58741: PUSH
58742: LD_INT 1
58744: ARRAY
58745: PUSH
58746: LD_STRING l
58748: EQUAL
58749: IFFALSE 58774
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58751: LD_ADDR_VAR 0 2
58755: PUSH
58756: LD_VAR 0 1
58760: PPUSH
58761: CALL_OW 437
58765: PUSH
58766: LD_INT 1
58768: ARRAY
58769: PUSH
58770: LD_INT 4
58772: ARRAY
58773: ST_TO_ADDR
// end ;
58774: LD_VAR 0 2
58778: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58779: LD_INT 0
58781: PPUSH
58782: PPUSH
58783: PPUSH
58784: PPUSH
// if not base_units then
58785: LD_VAR 0 1
58789: NOT
58790: IFFALSE 58794
// exit ;
58792: GO 58881
// result := false ;
58794: LD_ADDR_VAR 0 2
58798: PUSH
58799: LD_INT 0
58801: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58802: LD_ADDR_VAR 0 5
58806: PUSH
58807: LD_VAR 0 1
58811: PPUSH
58812: LD_INT 21
58814: PUSH
58815: LD_INT 3
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PPUSH
58822: CALL_OW 72
58826: ST_TO_ADDR
// if not tmp then
58827: LD_VAR 0 5
58831: NOT
58832: IFFALSE 58836
// exit ;
58834: GO 58881
// for i in tmp do
58836: LD_ADDR_VAR 0 3
58840: PUSH
58841: LD_VAR 0 5
58845: PUSH
58846: FOR_IN
58847: IFFALSE 58879
// begin result := EnemyInRange ( i , 22 ) ;
58849: LD_ADDR_VAR 0 2
58853: PUSH
58854: LD_VAR 0 3
58858: PPUSH
58859: LD_INT 22
58861: PPUSH
58862: CALL 57117 0 2
58866: ST_TO_ADDR
// if result then
58867: LD_VAR 0 2
58871: IFFALSE 58877
// exit ;
58873: POP
58874: POP
58875: GO 58881
// end ;
58877: GO 58846
58879: POP
58880: POP
// end ;
58881: LD_VAR 0 2
58885: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
58886: LD_INT 0
58888: PPUSH
58889: PPUSH
// if not units then
58890: LD_VAR 0 1
58894: NOT
58895: IFFALSE 58899
// exit ;
58897: GO 58969
// result := [ ] ;
58899: LD_ADDR_VAR 0 3
58903: PUSH
58904: EMPTY
58905: ST_TO_ADDR
// for i in units do
58906: LD_ADDR_VAR 0 4
58910: PUSH
58911: LD_VAR 0 1
58915: PUSH
58916: FOR_IN
58917: IFFALSE 58967
// if GetTag ( i ) = tag then
58919: LD_VAR 0 4
58923: PPUSH
58924: CALL_OW 110
58928: PUSH
58929: LD_VAR 0 2
58933: EQUAL
58934: IFFALSE 58965
// result := Replace ( result , result + 1 , i ) ;
58936: LD_ADDR_VAR 0 3
58940: PUSH
58941: LD_VAR 0 3
58945: PPUSH
58946: LD_VAR 0 3
58950: PUSH
58951: LD_INT 1
58953: PLUS
58954: PPUSH
58955: LD_VAR 0 4
58959: PPUSH
58960: CALL_OW 1
58964: ST_TO_ADDR
58965: GO 58916
58967: POP
58968: POP
// end ;
58969: LD_VAR 0 3
58973: RET
// export function IsDriver ( un ) ; begin
58974: LD_INT 0
58976: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58977: LD_ADDR_VAR 0 2
58981: PUSH
58982: LD_VAR 0 1
58986: PUSH
58987: LD_INT 55
58989: PUSH
58990: EMPTY
58991: LIST
58992: PPUSH
58993: CALL_OW 69
58997: IN
58998: ST_TO_ADDR
// end ;
58999: LD_VAR 0 2
59003: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59004: LD_INT 0
59006: PPUSH
59007: PPUSH
// list := [ ] ;
59008: LD_ADDR_VAR 0 5
59012: PUSH
59013: EMPTY
59014: ST_TO_ADDR
// case d of 0 :
59015: LD_VAR 0 3
59019: PUSH
59020: LD_INT 0
59022: DOUBLE
59023: EQUAL
59024: IFTRUE 59028
59026: GO 59161
59028: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59029: LD_ADDR_VAR 0 5
59033: PUSH
59034: LD_VAR 0 1
59038: PUSH
59039: LD_INT 4
59041: MINUS
59042: PUSH
59043: LD_VAR 0 2
59047: PUSH
59048: LD_INT 4
59050: MINUS
59051: PUSH
59052: LD_INT 2
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: LIST
59059: PUSH
59060: LD_VAR 0 1
59064: PUSH
59065: LD_INT 3
59067: MINUS
59068: PUSH
59069: LD_VAR 0 2
59073: PUSH
59074: LD_INT 1
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: LIST
59081: PUSH
59082: LD_VAR 0 1
59086: PUSH
59087: LD_INT 4
59089: PLUS
59090: PUSH
59091: LD_VAR 0 2
59095: PUSH
59096: LD_INT 4
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: LIST
59103: PUSH
59104: LD_VAR 0 1
59108: PUSH
59109: LD_INT 3
59111: PLUS
59112: PUSH
59113: LD_VAR 0 2
59117: PUSH
59118: LD_INT 3
59120: PLUS
59121: PUSH
59122: LD_INT 5
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: LIST
59129: PUSH
59130: LD_VAR 0 1
59134: PUSH
59135: LD_VAR 0 2
59139: PUSH
59140: LD_INT 4
59142: PLUS
59143: PUSH
59144: LD_INT 0
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: LIST
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: ST_TO_ADDR
// end ; 1 :
59159: GO 59859
59161: LD_INT 1
59163: DOUBLE
59164: EQUAL
59165: IFTRUE 59169
59167: GO 59302
59169: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59170: LD_ADDR_VAR 0 5
59174: PUSH
59175: LD_VAR 0 1
59179: PUSH
59180: LD_VAR 0 2
59184: PUSH
59185: LD_INT 4
59187: MINUS
59188: PUSH
59189: LD_INT 3
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: LIST
59196: PUSH
59197: LD_VAR 0 1
59201: PUSH
59202: LD_INT 3
59204: MINUS
59205: PUSH
59206: LD_VAR 0 2
59210: PUSH
59211: LD_INT 3
59213: MINUS
59214: PUSH
59215: LD_INT 2
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: LIST
59222: PUSH
59223: LD_VAR 0 1
59227: PUSH
59228: LD_INT 4
59230: MINUS
59231: PUSH
59232: LD_VAR 0 2
59236: PUSH
59237: LD_INT 1
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: LIST
59244: PUSH
59245: LD_VAR 0 1
59249: PUSH
59250: LD_VAR 0 2
59254: PUSH
59255: LD_INT 3
59257: PLUS
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: LIST
59266: PUSH
59267: LD_VAR 0 1
59271: PUSH
59272: LD_INT 4
59274: PLUS
59275: PUSH
59276: LD_VAR 0 2
59280: PUSH
59281: LD_INT 4
59283: PLUS
59284: PUSH
59285: LD_INT 5
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: LIST
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: ST_TO_ADDR
// end ; 2 :
59300: GO 59859
59302: LD_INT 2
59304: DOUBLE
59305: EQUAL
59306: IFTRUE 59310
59308: GO 59439
59310: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59311: LD_ADDR_VAR 0 5
59315: PUSH
59316: LD_VAR 0 1
59320: PUSH
59321: LD_VAR 0 2
59325: PUSH
59326: LD_INT 3
59328: MINUS
59329: PUSH
59330: LD_INT 3
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: LIST
59337: PUSH
59338: LD_VAR 0 1
59342: PUSH
59343: LD_INT 4
59345: PLUS
59346: PUSH
59347: LD_VAR 0 2
59351: PUSH
59352: LD_INT 4
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: LIST
59359: PUSH
59360: LD_VAR 0 1
59364: PUSH
59365: LD_VAR 0 2
59369: PUSH
59370: LD_INT 4
59372: PLUS
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: LIST
59381: PUSH
59382: LD_VAR 0 1
59386: PUSH
59387: LD_INT 3
59389: MINUS
59390: PUSH
59391: LD_VAR 0 2
59395: PUSH
59396: LD_INT 1
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: LIST
59403: PUSH
59404: LD_VAR 0 1
59408: PUSH
59409: LD_INT 4
59411: MINUS
59412: PUSH
59413: LD_VAR 0 2
59417: PUSH
59418: LD_INT 4
59420: MINUS
59421: PUSH
59422: LD_INT 2
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: LIST
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: ST_TO_ADDR
// end ; 3 :
59437: GO 59859
59439: LD_INT 3
59441: DOUBLE
59442: EQUAL
59443: IFTRUE 59447
59445: GO 59580
59447: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59448: LD_ADDR_VAR 0 5
59452: PUSH
59453: LD_VAR 0 1
59457: PUSH
59458: LD_INT 3
59460: PLUS
59461: PUSH
59462: LD_VAR 0 2
59466: PUSH
59467: LD_INT 4
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: LIST
59474: PUSH
59475: LD_VAR 0 1
59479: PUSH
59480: LD_INT 4
59482: PLUS
59483: PUSH
59484: LD_VAR 0 2
59488: PUSH
59489: LD_INT 4
59491: PLUS
59492: PUSH
59493: LD_INT 5
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: LIST
59500: PUSH
59501: LD_VAR 0 1
59505: PUSH
59506: LD_INT 4
59508: MINUS
59509: PUSH
59510: LD_VAR 0 2
59514: PUSH
59515: LD_INT 1
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: LIST
59522: PUSH
59523: LD_VAR 0 1
59527: PUSH
59528: LD_VAR 0 2
59532: PUSH
59533: LD_INT 4
59535: MINUS
59536: PUSH
59537: LD_INT 3
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: LIST
59544: PUSH
59545: LD_VAR 0 1
59549: PUSH
59550: LD_INT 3
59552: MINUS
59553: PUSH
59554: LD_VAR 0 2
59558: PUSH
59559: LD_INT 3
59561: MINUS
59562: PUSH
59563: LD_INT 2
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: LIST
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: ST_TO_ADDR
// end ; 4 :
59578: GO 59859
59580: LD_INT 4
59582: DOUBLE
59583: EQUAL
59584: IFTRUE 59588
59586: GO 59721
59588: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59589: LD_ADDR_VAR 0 5
59593: PUSH
59594: LD_VAR 0 1
59598: PUSH
59599: LD_VAR 0 2
59603: PUSH
59604: LD_INT 4
59606: PLUS
59607: PUSH
59608: LD_INT 0
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: LIST
59615: PUSH
59616: LD_VAR 0 1
59620: PUSH
59621: LD_INT 3
59623: PLUS
59624: PUSH
59625: LD_VAR 0 2
59629: PUSH
59630: LD_INT 3
59632: PLUS
59633: PUSH
59634: LD_INT 5
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: LIST
59641: PUSH
59642: LD_VAR 0 1
59646: PUSH
59647: LD_INT 4
59649: PLUS
59650: PUSH
59651: LD_VAR 0 2
59655: PUSH
59656: LD_INT 4
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: LIST
59663: PUSH
59664: LD_VAR 0 1
59668: PUSH
59669: LD_VAR 0 2
59673: PUSH
59674: LD_INT 3
59676: MINUS
59677: PUSH
59678: LD_INT 3
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: LIST
59685: PUSH
59686: LD_VAR 0 1
59690: PUSH
59691: LD_INT 4
59693: MINUS
59694: PUSH
59695: LD_VAR 0 2
59699: PUSH
59700: LD_INT 4
59702: MINUS
59703: PUSH
59704: LD_INT 2
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: LIST
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: ST_TO_ADDR
// end ; 5 :
59719: GO 59859
59721: LD_INT 5
59723: DOUBLE
59724: EQUAL
59725: IFTRUE 59729
59727: GO 59858
59729: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59730: LD_ADDR_VAR 0 5
59734: PUSH
59735: LD_VAR 0 1
59739: PUSH
59740: LD_INT 4
59742: MINUS
59743: PUSH
59744: LD_VAR 0 2
59748: PUSH
59749: LD_INT 1
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: LIST
59756: PUSH
59757: LD_VAR 0 1
59761: PUSH
59762: LD_VAR 0 2
59766: PUSH
59767: LD_INT 4
59769: MINUS
59770: PUSH
59771: LD_INT 3
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: LIST
59778: PUSH
59779: LD_VAR 0 1
59783: PUSH
59784: LD_INT 4
59786: PLUS
59787: PUSH
59788: LD_VAR 0 2
59792: PUSH
59793: LD_INT 4
59795: PLUS
59796: PUSH
59797: LD_INT 5
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: LIST
59804: PUSH
59805: LD_VAR 0 1
59809: PUSH
59810: LD_INT 3
59812: PLUS
59813: PUSH
59814: LD_VAR 0 2
59818: PUSH
59819: LD_INT 4
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: LIST
59826: PUSH
59827: LD_VAR 0 1
59831: PUSH
59832: LD_VAR 0 2
59836: PUSH
59837: LD_INT 3
59839: PLUS
59840: PUSH
59841: LD_INT 0
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: LIST
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: ST_TO_ADDR
// end ; end ;
59856: GO 59859
59858: POP
// result := list ;
59859: LD_ADDR_VAR 0 4
59863: PUSH
59864: LD_VAR 0 5
59868: ST_TO_ADDR
// end ;
59869: LD_VAR 0 4
59873: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59874: LD_INT 0
59876: PPUSH
59877: PPUSH
59878: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59879: LD_VAR 0 1
59883: NOT
59884: PUSH
59885: LD_VAR 0 2
59889: PUSH
59890: LD_INT 1
59892: PUSH
59893: LD_INT 2
59895: PUSH
59896: LD_INT 3
59898: PUSH
59899: LD_INT 4
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: IN
59908: NOT
59909: OR
59910: IFFALSE 59914
// exit ;
59912: GO 60006
// tmp := [ ] ;
59914: LD_ADDR_VAR 0 5
59918: PUSH
59919: EMPTY
59920: ST_TO_ADDR
// for i in units do
59921: LD_ADDR_VAR 0 4
59925: PUSH
59926: LD_VAR 0 1
59930: PUSH
59931: FOR_IN
59932: IFFALSE 59975
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59934: LD_ADDR_VAR 0 5
59938: PUSH
59939: LD_VAR 0 5
59943: PPUSH
59944: LD_VAR 0 5
59948: PUSH
59949: LD_INT 1
59951: PLUS
59952: PPUSH
59953: LD_VAR 0 4
59957: PPUSH
59958: LD_VAR 0 2
59962: PPUSH
59963: CALL_OW 259
59967: PPUSH
59968: CALL_OW 2
59972: ST_TO_ADDR
59973: GO 59931
59975: POP
59976: POP
// if not tmp then
59977: LD_VAR 0 5
59981: NOT
59982: IFFALSE 59986
// exit ;
59984: GO 60006
// result := SortListByListDesc ( units , tmp ) ;
59986: LD_ADDR_VAR 0 3
59990: PUSH
59991: LD_VAR 0 1
59995: PPUSH
59996: LD_VAR 0 5
60000: PPUSH
60001: CALL_OW 77
60005: ST_TO_ADDR
// end ;
60006: LD_VAR 0 3
60010: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60011: LD_INT 0
60013: PPUSH
60014: PPUSH
60015: PPUSH
// result := false ;
60016: LD_ADDR_VAR 0 3
60020: PUSH
60021: LD_INT 0
60023: ST_TO_ADDR
// x := GetX ( building ) ;
60024: LD_ADDR_VAR 0 4
60028: PUSH
60029: LD_VAR 0 2
60033: PPUSH
60034: CALL_OW 250
60038: ST_TO_ADDR
// y := GetY ( building ) ;
60039: LD_ADDR_VAR 0 5
60043: PUSH
60044: LD_VAR 0 2
60048: PPUSH
60049: CALL_OW 251
60053: ST_TO_ADDR
// if not building or not x or not y then
60054: LD_VAR 0 2
60058: NOT
60059: PUSH
60060: LD_VAR 0 4
60064: NOT
60065: OR
60066: PUSH
60067: LD_VAR 0 5
60071: NOT
60072: OR
60073: IFFALSE 60077
// exit ;
60075: GO 60169
// if GetTaskList ( unit ) then
60077: LD_VAR 0 1
60081: PPUSH
60082: CALL_OW 437
60086: IFFALSE 60169
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60088: LD_STRING e
60090: PUSH
60091: LD_VAR 0 1
60095: PPUSH
60096: CALL_OW 437
60100: PUSH
60101: LD_INT 1
60103: ARRAY
60104: PUSH
60105: LD_INT 1
60107: ARRAY
60108: EQUAL
60109: PUSH
60110: LD_VAR 0 4
60114: PUSH
60115: LD_VAR 0 1
60119: PPUSH
60120: CALL_OW 437
60124: PUSH
60125: LD_INT 1
60127: ARRAY
60128: PUSH
60129: LD_INT 2
60131: ARRAY
60132: EQUAL
60133: AND
60134: PUSH
60135: LD_VAR 0 5
60139: PUSH
60140: LD_VAR 0 1
60144: PPUSH
60145: CALL_OW 437
60149: PUSH
60150: LD_INT 1
60152: ARRAY
60153: PUSH
60154: LD_INT 3
60156: ARRAY
60157: EQUAL
60158: AND
60159: IFFALSE 60169
// result := true end ;
60161: LD_ADDR_VAR 0 3
60165: PUSH
60166: LD_INT 1
60168: ST_TO_ADDR
// end ;
60169: LD_VAR 0 3
60173: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60174: LD_INT 0
60176: PPUSH
// result := false ;
60177: LD_ADDR_VAR 0 4
60181: PUSH
60182: LD_INT 0
60184: ST_TO_ADDR
// if GetTaskList ( unit ) then
60185: LD_VAR 0 1
60189: PPUSH
60190: CALL_OW 437
60194: IFFALSE 60277
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60196: LD_STRING M
60198: PUSH
60199: LD_VAR 0 1
60203: PPUSH
60204: CALL_OW 437
60208: PUSH
60209: LD_INT 1
60211: ARRAY
60212: PUSH
60213: LD_INT 1
60215: ARRAY
60216: EQUAL
60217: PUSH
60218: LD_VAR 0 2
60222: PUSH
60223: LD_VAR 0 1
60227: PPUSH
60228: CALL_OW 437
60232: PUSH
60233: LD_INT 1
60235: ARRAY
60236: PUSH
60237: LD_INT 2
60239: ARRAY
60240: EQUAL
60241: AND
60242: PUSH
60243: LD_VAR 0 3
60247: PUSH
60248: LD_VAR 0 1
60252: PPUSH
60253: CALL_OW 437
60257: PUSH
60258: LD_INT 1
60260: ARRAY
60261: PUSH
60262: LD_INT 3
60264: ARRAY
60265: EQUAL
60266: AND
60267: IFFALSE 60277
// result := true ;
60269: LD_ADDR_VAR 0 4
60273: PUSH
60274: LD_INT 1
60276: ST_TO_ADDR
// end ; end ;
60277: LD_VAR 0 4
60281: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60282: LD_INT 0
60284: PPUSH
60285: PPUSH
60286: PPUSH
60287: PPUSH
// if not unit or not area then
60288: LD_VAR 0 1
60292: NOT
60293: PUSH
60294: LD_VAR 0 2
60298: NOT
60299: OR
60300: IFFALSE 60304
// exit ;
60302: GO 60468
// tmp := AreaToList ( area , i ) ;
60304: LD_ADDR_VAR 0 6
60308: PUSH
60309: LD_VAR 0 2
60313: PPUSH
60314: LD_VAR 0 5
60318: PPUSH
60319: CALL_OW 517
60323: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60324: LD_ADDR_VAR 0 5
60328: PUSH
60329: DOUBLE
60330: LD_INT 1
60332: DEC
60333: ST_TO_ADDR
60334: LD_VAR 0 6
60338: PUSH
60339: LD_INT 1
60341: ARRAY
60342: PUSH
60343: FOR_TO
60344: IFFALSE 60466
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60346: LD_ADDR_VAR 0 7
60350: PUSH
60351: LD_VAR 0 6
60355: PUSH
60356: LD_INT 1
60358: ARRAY
60359: PUSH
60360: LD_VAR 0 5
60364: ARRAY
60365: PUSH
60366: LD_VAR 0 6
60370: PUSH
60371: LD_INT 2
60373: ARRAY
60374: PUSH
60375: LD_VAR 0 5
60379: ARRAY
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60385: LD_VAR 0 7
60389: PUSH
60390: LD_INT 1
60392: ARRAY
60393: PPUSH
60394: LD_VAR 0 7
60398: PUSH
60399: LD_INT 2
60401: ARRAY
60402: PPUSH
60403: CALL_OW 428
60407: PUSH
60408: LD_INT 0
60410: EQUAL
60411: IFFALSE 60464
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60413: LD_VAR 0 1
60417: PPUSH
60418: LD_VAR 0 7
60422: PUSH
60423: LD_INT 1
60425: ARRAY
60426: PPUSH
60427: LD_VAR 0 7
60431: PUSH
60432: LD_INT 2
60434: ARRAY
60435: PPUSH
60436: LD_VAR 0 3
60440: PPUSH
60441: CALL_OW 48
// result := IsPlaced ( unit ) ;
60445: LD_ADDR_VAR 0 4
60449: PUSH
60450: LD_VAR 0 1
60454: PPUSH
60455: CALL_OW 305
60459: ST_TO_ADDR
// exit ;
60460: POP
60461: POP
60462: GO 60468
// end ; end ;
60464: GO 60343
60466: POP
60467: POP
// end ;
60468: LD_VAR 0 4
60472: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60473: LD_INT 0
60475: PPUSH
60476: PPUSH
60477: PPUSH
// if not side or side > 8 then
60478: LD_VAR 0 1
60482: NOT
60483: PUSH
60484: LD_VAR 0 1
60488: PUSH
60489: LD_INT 8
60491: GREATER
60492: OR
60493: IFFALSE 60497
// exit ;
60495: GO 60684
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60497: LD_ADDR_VAR 0 4
60501: PUSH
60502: LD_INT 22
60504: PUSH
60505: LD_VAR 0 1
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 21
60516: PUSH
60517: LD_INT 3
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PPUSH
60528: CALL_OW 69
60532: ST_TO_ADDR
// if not tmp then
60533: LD_VAR 0 4
60537: NOT
60538: IFFALSE 60542
// exit ;
60540: GO 60684
// enable_addtolog := true ;
60542: LD_ADDR_OWVAR 81
60546: PUSH
60547: LD_INT 1
60549: ST_TO_ADDR
// AddToLog ( [ ) ;
60550: LD_STRING [
60552: PPUSH
60553: CALL_OW 561
// for i in tmp do
60557: LD_ADDR_VAR 0 3
60561: PUSH
60562: LD_VAR 0 4
60566: PUSH
60567: FOR_IN
60568: IFFALSE 60675
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60570: LD_STRING [
60572: PUSH
60573: LD_VAR 0 3
60577: PPUSH
60578: CALL_OW 266
60582: STR
60583: PUSH
60584: LD_STRING , 
60586: STR
60587: PUSH
60588: LD_VAR 0 3
60592: PPUSH
60593: CALL_OW 250
60597: STR
60598: PUSH
60599: LD_STRING , 
60601: STR
60602: PUSH
60603: LD_VAR 0 3
60607: PPUSH
60608: CALL_OW 251
60612: STR
60613: PUSH
60614: LD_STRING , 
60616: STR
60617: PUSH
60618: LD_VAR 0 3
60622: PPUSH
60623: CALL_OW 254
60627: STR
60628: PUSH
60629: LD_STRING , 
60631: STR
60632: PUSH
60633: LD_VAR 0 3
60637: PPUSH
60638: LD_INT 1
60640: PPUSH
60641: CALL_OW 268
60645: STR
60646: PUSH
60647: LD_STRING , 
60649: STR
60650: PUSH
60651: LD_VAR 0 3
60655: PPUSH
60656: LD_INT 2
60658: PPUSH
60659: CALL_OW 268
60663: STR
60664: PUSH
60665: LD_STRING ],
60667: STR
60668: PPUSH
60669: CALL_OW 561
// end ;
60673: GO 60567
60675: POP
60676: POP
// AddToLog ( ]; ) ;
60677: LD_STRING ];
60679: PPUSH
60680: CALL_OW 561
// end ;
60684: LD_VAR 0 2
60688: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60689: LD_INT 0
60691: PPUSH
60692: PPUSH
60693: PPUSH
60694: PPUSH
60695: PPUSH
// if not area or not rate or not max then
60696: LD_VAR 0 1
60700: NOT
60701: PUSH
60702: LD_VAR 0 2
60706: NOT
60707: OR
60708: PUSH
60709: LD_VAR 0 4
60713: NOT
60714: OR
60715: IFFALSE 60719
// exit ;
60717: GO 60911
// while 1 do
60719: LD_INT 1
60721: IFFALSE 60911
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60723: LD_ADDR_VAR 0 9
60727: PUSH
60728: LD_VAR 0 1
60732: PPUSH
60733: LD_INT 1
60735: PPUSH
60736: CALL_OW 287
60740: PUSH
60741: LD_INT 10
60743: MUL
60744: ST_TO_ADDR
// r := rate / 10 ;
60745: LD_ADDR_VAR 0 7
60749: PUSH
60750: LD_VAR 0 2
60754: PUSH
60755: LD_INT 10
60757: DIVREAL
60758: ST_TO_ADDR
// time := 1 1$00 ;
60759: LD_ADDR_VAR 0 8
60763: PUSH
60764: LD_INT 2100
60766: ST_TO_ADDR
// if amount < min then
60767: LD_VAR 0 9
60771: PUSH
60772: LD_VAR 0 3
60776: LESS
60777: IFFALSE 60795
// r := r * 2 else
60779: LD_ADDR_VAR 0 7
60783: PUSH
60784: LD_VAR 0 7
60788: PUSH
60789: LD_INT 2
60791: MUL
60792: ST_TO_ADDR
60793: GO 60821
// if amount > max then
60795: LD_VAR 0 9
60799: PUSH
60800: LD_VAR 0 4
60804: GREATER
60805: IFFALSE 60821
// r := r / 2 ;
60807: LD_ADDR_VAR 0 7
60811: PUSH
60812: LD_VAR 0 7
60816: PUSH
60817: LD_INT 2
60819: DIVREAL
60820: ST_TO_ADDR
// time := time / r ;
60821: LD_ADDR_VAR 0 8
60825: PUSH
60826: LD_VAR 0 8
60830: PUSH
60831: LD_VAR 0 7
60835: DIVREAL
60836: ST_TO_ADDR
// if time < 0 then
60837: LD_VAR 0 8
60841: PUSH
60842: LD_INT 0
60844: LESS
60845: IFFALSE 60862
// time := time * - 1 ;
60847: LD_ADDR_VAR 0 8
60851: PUSH
60852: LD_VAR 0 8
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: MUL
60861: ST_TO_ADDR
// wait ( time ) ;
60862: LD_VAR 0 8
60866: PPUSH
60867: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
60871: LD_INT 35
60873: PPUSH
60874: LD_INT 875
60876: PPUSH
60877: CALL_OW 12
60881: PPUSH
60882: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60886: LD_INT 1
60888: PPUSH
60889: LD_INT 5
60891: PPUSH
60892: CALL_OW 12
60896: PPUSH
60897: LD_VAR 0 1
60901: PPUSH
60902: LD_INT 1
60904: PPUSH
60905: CALL_OW 55
// end ;
60909: GO 60719
// end ;
60911: LD_VAR 0 5
60915: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60916: LD_INT 0
60918: PPUSH
60919: PPUSH
60920: PPUSH
60921: PPUSH
60922: PPUSH
60923: PPUSH
60924: PPUSH
60925: PPUSH
// if not turrets or not factories then
60926: LD_VAR 0 1
60930: NOT
60931: PUSH
60932: LD_VAR 0 2
60936: NOT
60937: OR
60938: IFFALSE 60942
// exit ;
60940: GO 61249
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60942: LD_ADDR_VAR 0 10
60946: PUSH
60947: LD_INT 5
60949: PUSH
60950: LD_INT 6
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 2
60959: PUSH
60960: LD_INT 4
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 3
60969: PUSH
60970: LD_INT 5
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 24
60984: PUSH
60985: LD_INT 25
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 23
60994: PUSH
60995: LD_INT 27
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 42
61008: PUSH
61009: LD_INT 43
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 44
61018: PUSH
61019: LD_INT 46
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 45
61028: PUSH
61029: LD_INT 47
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: LIST
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: LIST
61045: ST_TO_ADDR
// result := [ ] ;
61046: LD_ADDR_VAR 0 3
61050: PUSH
61051: EMPTY
61052: ST_TO_ADDR
// for i in turrets do
61053: LD_ADDR_VAR 0 4
61057: PUSH
61058: LD_VAR 0 1
61062: PUSH
61063: FOR_IN
61064: IFFALSE 61247
// begin nat := GetNation ( i ) ;
61066: LD_ADDR_VAR 0 7
61070: PUSH
61071: LD_VAR 0 4
61075: PPUSH
61076: CALL_OW 248
61080: ST_TO_ADDR
// weapon := 0 ;
61081: LD_ADDR_VAR 0 8
61085: PUSH
61086: LD_INT 0
61088: ST_TO_ADDR
// if not nat then
61089: LD_VAR 0 7
61093: NOT
61094: IFFALSE 61098
// continue ;
61096: GO 61063
// for j in list [ nat ] do
61098: LD_ADDR_VAR 0 5
61102: PUSH
61103: LD_VAR 0 10
61107: PUSH
61108: LD_VAR 0 7
61112: ARRAY
61113: PUSH
61114: FOR_IN
61115: IFFALSE 61156
// if GetBWeapon ( i ) = j [ 1 ] then
61117: LD_VAR 0 4
61121: PPUSH
61122: CALL_OW 269
61126: PUSH
61127: LD_VAR 0 5
61131: PUSH
61132: LD_INT 1
61134: ARRAY
61135: EQUAL
61136: IFFALSE 61154
// begin weapon := j [ 2 ] ;
61138: LD_ADDR_VAR 0 8
61142: PUSH
61143: LD_VAR 0 5
61147: PUSH
61148: LD_INT 2
61150: ARRAY
61151: ST_TO_ADDR
// break ;
61152: GO 61156
// end ;
61154: GO 61114
61156: POP
61157: POP
// if not weapon then
61158: LD_VAR 0 8
61162: NOT
61163: IFFALSE 61167
// continue ;
61165: GO 61063
// for k in factories do
61167: LD_ADDR_VAR 0 6
61171: PUSH
61172: LD_VAR 0 2
61176: PUSH
61177: FOR_IN
61178: IFFALSE 61243
// begin weapons := AvailableWeaponList ( k ) ;
61180: LD_ADDR_VAR 0 9
61184: PUSH
61185: LD_VAR 0 6
61189: PPUSH
61190: CALL_OW 478
61194: ST_TO_ADDR
// if not weapons then
61195: LD_VAR 0 9
61199: NOT
61200: IFFALSE 61204
// continue ;
61202: GO 61177
// if weapon in weapons then
61204: LD_VAR 0 8
61208: PUSH
61209: LD_VAR 0 9
61213: IN
61214: IFFALSE 61241
// begin result := [ i , weapon ] ;
61216: LD_ADDR_VAR 0 3
61220: PUSH
61221: LD_VAR 0 4
61225: PUSH
61226: LD_VAR 0 8
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: ST_TO_ADDR
// exit ;
61235: POP
61236: POP
61237: POP
61238: POP
61239: GO 61249
// end ; end ;
61241: GO 61177
61243: POP
61244: POP
// end ;
61245: GO 61063
61247: POP
61248: POP
// end ;
61249: LD_VAR 0 3
61253: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61254: LD_INT 0
61256: PPUSH
// if not side or side > 8 then
61257: LD_VAR 0 3
61261: NOT
61262: PUSH
61263: LD_VAR 0 3
61267: PUSH
61268: LD_INT 8
61270: GREATER
61271: OR
61272: IFFALSE 61276
// exit ;
61274: GO 61335
// if not range then
61276: LD_VAR 0 4
61280: NOT
61281: IFFALSE 61292
// range := - 12 ;
61283: LD_ADDR_VAR 0 4
61287: PUSH
61288: LD_INT 12
61290: NEG
61291: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61292: LD_VAR 0 1
61296: PPUSH
61297: LD_VAR 0 2
61301: PPUSH
61302: LD_VAR 0 3
61306: PPUSH
61307: LD_VAR 0 4
61311: PPUSH
61312: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61316: LD_VAR 0 1
61320: PPUSH
61321: LD_VAR 0 2
61325: PPUSH
61326: LD_VAR 0 3
61330: PPUSH
61331: CALL_OW 331
// end ;
61335: LD_VAR 0 5
61339: RET
// export function Video ( mode ) ; begin
61340: LD_INT 0
61342: PPUSH
// ingame_video = mode ;
61343: LD_ADDR_OWVAR 52
61347: PUSH
61348: LD_VAR 0 1
61352: ST_TO_ADDR
// interface_hidden = mode ;
61353: LD_ADDR_OWVAR 54
61357: PUSH
61358: LD_VAR 0 1
61362: ST_TO_ADDR
// end ;
61363: LD_VAR 0 2
61367: RET
// export function Join ( array , element ) ; begin
61368: LD_INT 0
61370: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61371: LD_ADDR_VAR 0 3
61375: PUSH
61376: LD_VAR 0 1
61380: PPUSH
61381: LD_VAR 0 1
61385: PUSH
61386: LD_INT 1
61388: PLUS
61389: PPUSH
61390: LD_VAR 0 2
61394: PPUSH
61395: CALL_OW 1
61399: ST_TO_ADDR
// end ;
61400: LD_VAR 0 3
61404: RET
// export function JoinUnion ( array , element ) ; begin
61405: LD_INT 0
61407: PPUSH
// result := array union element ;
61408: LD_ADDR_VAR 0 3
61412: PUSH
61413: LD_VAR 0 1
61417: PUSH
61418: LD_VAR 0 2
61422: UNION
61423: ST_TO_ADDR
// end ;
61424: LD_VAR 0 3
61428: RET
// export function GetBehemoths ( side ) ; begin
61429: LD_INT 0
61431: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61432: LD_ADDR_VAR 0 2
61436: PUSH
61437: LD_INT 22
61439: PUSH
61440: LD_VAR 0 1
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 31
61451: PUSH
61452: LD_INT 25
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PPUSH
61463: CALL_OW 69
61467: ST_TO_ADDR
// end ;
61468: LD_VAR 0 2
61472: RET
// export function Shuffle ( array ) ; var i , index ; begin
61473: LD_INT 0
61475: PPUSH
61476: PPUSH
61477: PPUSH
// result := [ ] ;
61478: LD_ADDR_VAR 0 2
61482: PUSH
61483: EMPTY
61484: ST_TO_ADDR
// if not array then
61485: LD_VAR 0 1
61489: NOT
61490: IFFALSE 61494
// exit ;
61492: GO 61593
// Randomize ;
61494: CALL_OW 10
// for i = array downto 1 do
61498: LD_ADDR_VAR 0 3
61502: PUSH
61503: DOUBLE
61504: LD_VAR 0 1
61508: INC
61509: ST_TO_ADDR
61510: LD_INT 1
61512: PUSH
61513: FOR_DOWNTO
61514: IFFALSE 61591
// begin index := rand ( 1 , array ) ;
61516: LD_ADDR_VAR 0 4
61520: PUSH
61521: LD_INT 1
61523: PPUSH
61524: LD_VAR 0 1
61528: PPUSH
61529: CALL_OW 12
61533: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61534: LD_ADDR_VAR 0 2
61538: PUSH
61539: LD_VAR 0 2
61543: PPUSH
61544: LD_VAR 0 2
61548: PUSH
61549: LD_INT 1
61551: PLUS
61552: PPUSH
61553: LD_VAR 0 1
61557: PUSH
61558: LD_VAR 0 4
61562: ARRAY
61563: PPUSH
61564: CALL_OW 2
61568: ST_TO_ADDR
// array := Delete ( array , index ) ;
61569: LD_ADDR_VAR 0 1
61573: PUSH
61574: LD_VAR 0 1
61578: PPUSH
61579: LD_VAR 0 4
61583: PPUSH
61584: CALL_OW 3
61588: ST_TO_ADDR
// end ;
61589: GO 61513
61591: POP
61592: POP
// end ;
61593: LD_VAR 0 2
61597: RET
// export function GetBaseMaterials ( base ) ; begin
61598: LD_INT 0
61600: PPUSH
// result := [ 0 , 0 , 0 ] ;
61601: LD_ADDR_VAR 0 2
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: LD_INT 0
61611: PUSH
61612: LD_INT 0
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: LIST
61619: ST_TO_ADDR
// if not base then
61620: LD_VAR 0 1
61624: NOT
61625: IFFALSE 61629
// exit ;
61627: GO 61678
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61629: LD_ADDR_VAR 0 2
61633: PUSH
61634: LD_VAR 0 1
61638: PPUSH
61639: LD_INT 1
61641: PPUSH
61642: CALL_OW 275
61646: PUSH
61647: LD_VAR 0 1
61651: PPUSH
61652: LD_INT 2
61654: PPUSH
61655: CALL_OW 275
61659: PUSH
61660: LD_VAR 0 1
61664: PPUSH
61665: LD_INT 3
61667: PPUSH
61668: CALL_OW 275
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: LIST
61677: ST_TO_ADDR
// end ;
61678: LD_VAR 0 2
61682: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61683: LD_INT 0
61685: PPUSH
61686: PPUSH
// result := array ;
61687: LD_ADDR_VAR 0 3
61691: PUSH
61692: LD_VAR 0 1
61696: ST_TO_ADDR
// if size > 0 then
61697: LD_VAR 0 2
61701: PUSH
61702: LD_INT 0
61704: GREATER
61705: IFFALSE 61751
// for i := array downto size do
61707: LD_ADDR_VAR 0 4
61711: PUSH
61712: DOUBLE
61713: LD_VAR 0 1
61717: INC
61718: ST_TO_ADDR
61719: LD_VAR 0 2
61723: PUSH
61724: FOR_DOWNTO
61725: IFFALSE 61749
// result := Delete ( result , result ) ;
61727: LD_ADDR_VAR 0 3
61731: PUSH
61732: LD_VAR 0 3
61736: PPUSH
61737: LD_VAR 0 3
61741: PPUSH
61742: CALL_OW 3
61746: ST_TO_ADDR
61747: GO 61724
61749: POP
61750: POP
// end ;
61751: LD_VAR 0 3
61755: RET
// export function ComExit ( unit ) ; var tmp ; begin
61756: LD_INT 0
61758: PPUSH
61759: PPUSH
// if not IsInUnit ( unit ) then
61760: LD_VAR 0 1
61764: PPUSH
61765: CALL_OW 310
61769: NOT
61770: IFFALSE 61774
// exit ;
61772: GO 61834
// tmp := IsInUnit ( unit ) ;
61774: LD_ADDR_VAR 0 3
61778: PUSH
61779: LD_VAR 0 1
61783: PPUSH
61784: CALL_OW 310
61788: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61789: LD_VAR 0 3
61793: PPUSH
61794: CALL_OW 247
61798: PUSH
61799: LD_INT 2
61801: EQUAL
61802: IFFALSE 61815
// ComExitVehicle ( unit ) else
61804: LD_VAR 0 1
61808: PPUSH
61809: CALL_OW 121
61813: GO 61824
// ComExitBuilding ( unit ) ;
61815: LD_VAR 0 1
61819: PPUSH
61820: CALL_OW 122
// result := tmp ;
61824: LD_ADDR_VAR 0 2
61828: PUSH
61829: LD_VAR 0 3
61833: ST_TO_ADDR
// end ;
61834: LD_VAR 0 2
61838: RET
// export function ComExitAll ( units ) ; var i ; begin
61839: LD_INT 0
61841: PPUSH
61842: PPUSH
// if not units then
61843: LD_VAR 0 1
61847: NOT
61848: IFFALSE 61852
// exit ;
61850: GO 61878
// for i in units do
61852: LD_ADDR_VAR 0 3
61856: PUSH
61857: LD_VAR 0 1
61861: PUSH
61862: FOR_IN
61863: IFFALSE 61876
// ComExit ( i ) ;
61865: LD_VAR 0 3
61869: PPUSH
61870: CALL 61756 0 1
61874: GO 61862
61876: POP
61877: POP
// end ;
61878: LD_VAR 0 2
61882: RET
// export function ResetHc ; begin
61883: LD_INT 0
61885: PPUSH
// InitHc ;
61886: CALL_OW 19
// hc_importance := 0 ;
61890: LD_ADDR_OWVAR 32
61894: PUSH
61895: LD_INT 0
61897: ST_TO_ADDR
// end ;
61898: LD_VAR 0 1
61902: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61903: LD_INT 0
61905: PPUSH
61906: PPUSH
61907: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61908: LD_ADDR_VAR 0 6
61912: PUSH
61913: LD_VAR 0 1
61917: PUSH
61918: LD_VAR 0 3
61922: PLUS
61923: PUSH
61924: LD_INT 2
61926: DIV
61927: ST_TO_ADDR
// if _x < 0 then
61928: LD_VAR 0 6
61932: PUSH
61933: LD_INT 0
61935: LESS
61936: IFFALSE 61953
// _x := _x * - 1 ;
61938: LD_ADDR_VAR 0 6
61942: PUSH
61943: LD_VAR 0 6
61947: PUSH
61948: LD_INT 1
61950: NEG
61951: MUL
61952: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61953: LD_ADDR_VAR 0 7
61957: PUSH
61958: LD_VAR 0 2
61962: PUSH
61963: LD_VAR 0 4
61967: PLUS
61968: PUSH
61969: LD_INT 2
61971: DIV
61972: ST_TO_ADDR
// if _y < 0 then
61973: LD_VAR 0 7
61977: PUSH
61978: LD_INT 0
61980: LESS
61981: IFFALSE 61998
// _y := _y * - 1 ;
61983: LD_ADDR_VAR 0 7
61987: PUSH
61988: LD_VAR 0 7
61992: PUSH
61993: LD_INT 1
61995: NEG
61996: MUL
61997: ST_TO_ADDR
// result := [ _x , _y ] ;
61998: LD_ADDR_VAR 0 5
62002: PUSH
62003: LD_VAR 0 6
62007: PUSH
62008: LD_VAR 0 7
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: ST_TO_ADDR
// end ;
62017: LD_VAR 0 5
62021: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62022: LD_INT 0
62024: PPUSH
62025: PPUSH
62026: PPUSH
62027: PPUSH
// task := GetTaskList ( unit ) ;
62028: LD_ADDR_VAR 0 7
62032: PUSH
62033: LD_VAR 0 1
62037: PPUSH
62038: CALL_OW 437
62042: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62043: LD_VAR 0 7
62047: NOT
62048: PUSH
62049: LD_VAR 0 1
62053: PPUSH
62054: LD_VAR 0 2
62058: PPUSH
62059: CALL_OW 308
62063: NOT
62064: AND
62065: IFFALSE 62069
// exit ;
62067: GO 62187
// if IsInArea ( unit , area ) then
62069: LD_VAR 0 1
62073: PPUSH
62074: LD_VAR 0 2
62078: PPUSH
62079: CALL_OW 308
62083: IFFALSE 62101
// begin ComMoveToArea ( unit , goAway ) ;
62085: LD_VAR 0 1
62089: PPUSH
62090: LD_VAR 0 3
62094: PPUSH
62095: CALL_OW 113
// exit ;
62099: GO 62187
// end ; if task [ 1 ] [ 1 ] <> M then
62101: LD_VAR 0 7
62105: PUSH
62106: LD_INT 1
62108: ARRAY
62109: PUSH
62110: LD_INT 1
62112: ARRAY
62113: PUSH
62114: LD_STRING M
62116: NONEQUAL
62117: IFFALSE 62121
// exit ;
62119: GO 62187
// x := task [ 1 ] [ 2 ] ;
62121: LD_ADDR_VAR 0 5
62125: PUSH
62126: LD_VAR 0 7
62130: PUSH
62131: LD_INT 1
62133: ARRAY
62134: PUSH
62135: LD_INT 2
62137: ARRAY
62138: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62139: LD_ADDR_VAR 0 6
62143: PUSH
62144: LD_VAR 0 7
62148: PUSH
62149: LD_INT 1
62151: ARRAY
62152: PUSH
62153: LD_INT 3
62155: ARRAY
62156: ST_TO_ADDR
// if InArea ( x , y , area ) then
62157: LD_VAR 0 5
62161: PPUSH
62162: LD_VAR 0 6
62166: PPUSH
62167: LD_VAR 0 2
62171: PPUSH
62172: CALL_OW 309
62176: IFFALSE 62187
// ComStop ( unit ) ;
62178: LD_VAR 0 1
62182: PPUSH
62183: CALL_OW 141
// end ;
62187: LD_VAR 0 4
62191: RET
// export function Abs ( value ) ; begin
62192: LD_INT 0
62194: PPUSH
// result := value ;
62195: LD_ADDR_VAR 0 2
62199: PUSH
62200: LD_VAR 0 1
62204: ST_TO_ADDR
// if value < 0 then
62205: LD_VAR 0 1
62209: PUSH
62210: LD_INT 0
62212: LESS
62213: IFFALSE 62230
// result := value * - 1 ;
62215: LD_ADDR_VAR 0 2
62219: PUSH
62220: LD_VAR 0 1
62224: PUSH
62225: LD_INT 1
62227: NEG
62228: MUL
62229: ST_TO_ADDR
// end ;
62230: LD_VAR 0 2
62234: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62235: LD_INT 0
62237: PPUSH
62238: PPUSH
62239: PPUSH
62240: PPUSH
62241: PPUSH
62242: PPUSH
62243: PPUSH
62244: PPUSH
// if not unit or not building then
62245: LD_VAR 0 1
62249: NOT
62250: PUSH
62251: LD_VAR 0 2
62255: NOT
62256: OR
62257: IFFALSE 62261
// exit ;
62259: GO 62487
// x := GetX ( building ) ;
62261: LD_ADDR_VAR 0 4
62265: PUSH
62266: LD_VAR 0 2
62270: PPUSH
62271: CALL_OW 250
62275: ST_TO_ADDR
// y := GetY ( building ) ;
62276: LD_ADDR_VAR 0 6
62280: PUSH
62281: LD_VAR 0 2
62285: PPUSH
62286: CALL_OW 251
62290: ST_TO_ADDR
// d := GetDir ( building ) ;
62291: LD_ADDR_VAR 0 8
62295: PUSH
62296: LD_VAR 0 2
62300: PPUSH
62301: CALL_OW 254
62305: ST_TO_ADDR
// r := 4 ;
62306: LD_ADDR_VAR 0 9
62310: PUSH
62311: LD_INT 4
62313: ST_TO_ADDR
// for i := 1 to 5 do
62314: LD_ADDR_VAR 0 10
62318: PUSH
62319: DOUBLE
62320: LD_INT 1
62322: DEC
62323: ST_TO_ADDR
62324: LD_INT 5
62326: PUSH
62327: FOR_TO
62328: IFFALSE 62485
// begin _x := ShiftX ( x , d , r + i ) ;
62330: LD_ADDR_VAR 0 5
62334: PUSH
62335: LD_VAR 0 4
62339: PPUSH
62340: LD_VAR 0 8
62344: PPUSH
62345: LD_VAR 0 9
62349: PUSH
62350: LD_VAR 0 10
62354: PLUS
62355: PPUSH
62356: CALL_OW 272
62360: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62361: LD_ADDR_VAR 0 7
62365: PUSH
62366: LD_VAR 0 6
62370: PPUSH
62371: LD_VAR 0 8
62375: PPUSH
62376: LD_VAR 0 9
62380: PUSH
62381: LD_VAR 0 10
62385: PLUS
62386: PPUSH
62387: CALL_OW 273
62391: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62392: LD_VAR 0 5
62396: PPUSH
62397: LD_VAR 0 7
62401: PPUSH
62402: CALL_OW 488
62406: PUSH
62407: LD_VAR 0 5
62411: PPUSH
62412: LD_VAR 0 7
62416: PPUSH
62417: CALL_OW 428
62421: PPUSH
62422: CALL_OW 247
62426: PUSH
62427: LD_INT 3
62429: PUSH
62430: LD_INT 2
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: IN
62437: NOT
62438: AND
62439: IFFALSE 62483
// begin ComMoveXY ( unit , _x , _y ) ;
62441: LD_VAR 0 1
62445: PPUSH
62446: LD_VAR 0 5
62450: PPUSH
62451: LD_VAR 0 7
62455: PPUSH
62456: CALL_OW 111
// result := [ _x , _y ] ;
62460: LD_ADDR_VAR 0 3
62464: PUSH
62465: LD_VAR 0 5
62469: PUSH
62470: LD_VAR 0 7
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: ST_TO_ADDR
// exit ;
62479: POP
62480: POP
62481: GO 62487
// end ; end ;
62483: GO 62327
62485: POP
62486: POP
// end ;
62487: LD_VAR 0 3
62491: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62492: LD_INT 0
62494: PPUSH
62495: PPUSH
62496: PPUSH
// result := 0 ;
62497: LD_ADDR_VAR 0 3
62501: PUSH
62502: LD_INT 0
62504: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62505: LD_VAR 0 1
62509: PUSH
62510: LD_INT 0
62512: LESS
62513: PUSH
62514: LD_VAR 0 1
62518: PUSH
62519: LD_INT 8
62521: GREATER
62522: OR
62523: PUSH
62524: LD_VAR 0 2
62528: PUSH
62529: LD_INT 0
62531: LESS
62532: OR
62533: PUSH
62534: LD_VAR 0 2
62538: PUSH
62539: LD_INT 8
62541: GREATER
62542: OR
62543: IFFALSE 62547
// exit ;
62545: GO 62622
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62547: LD_ADDR_VAR 0 4
62551: PUSH
62552: LD_INT 22
62554: PUSH
62555: LD_VAR 0 2
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PPUSH
62564: CALL_OW 69
62568: PUSH
62569: FOR_IN
62570: IFFALSE 62620
// begin un := UnitShoot ( i ) ;
62572: LD_ADDR_VAR 0 5
62576: PUSH
62577: LD_VAR 0 4
62581: PPUSH
62582: CALL_OW 504
62586: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62587: LD_VAR 0 5
62591: PPUSH
62592: CALL_OW 255
62596: PUSH
62597: LD_VAR 0 1
62601: EQUAL
62602: IFFALSE 62618
// begin result := un ;
62604: LD_ADDR_VAR 0 3
62608: PUSH
62609: LD_VAR 0 5
62613: ST_TO_ADDR
// exit ;
62614: POP
62615: POP
62616: GO 62622
// end ; end ;
62618: GO 62569
62620: POP
62621: POP
// end ;
62622: LD_VAR 0 3
62626: RET
// export function GetCargoBay ( units ) ; begin
62627: LD_INT 0
62629: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62630: LD_ADDR_VAR 0 2
62634: PUSH
62635: LD_VAR 0 1
62639: PPUSH
62640: LD_INT 2
62642: PUSH
62643: LD_INT 34
62645: PUSH
62646: LD_INT 12
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 34
62655: PUSH
62656: LD_INT 51
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 34
62665: PUSH
62666: LD_INT 32
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 34
62675: PUSH
62676: LD_EXP 59
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: PPUSH
62692: CALL_OW 72
62696: ST_TO_ADDR
// end ;
62697: LD_VAR 0 2
62701: RET
// export function Negate ( value ) ; begin
62702: LD_INT 0
62704: PPUSH
// result := not value ;
62705: LD_ADDR_VAR 0 2
62709: PUSH
62710: LD_VAR 0 1
62714: NOT
62715: ST_TO_ADDR
// end ;
62716: LD_VAR 0 2
62720: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
62721: LD_INT 0
62723: PPUSH
// if x1 = x2 then
62724: LD_VAR 0 1
62728: PUSH
62729: LD_VAR 0 3
62733: EQUAL
62734: IFFALSE 62768
// begin if y1 > y2 then
62736: LD_VAR 0 2
62740: PUSH
62741: LD_VAR 0 4
62745: GREATER
62746: IFFALSE 62758
// result := 0 else
62748: LD_ADDR_VAR 0 5
62752: PUSH
62753: LD_INT 0
62755: ST_TO_ADDR
62756: GO 62766
// result := 3 ;
62758: LD_ADDR_VAR 0 5
62762: PUSH
62763: LD_INT 3
62765: ST_TO_ADDR
// exit ;
62766: GO 62854
// end ; if y1 = y2 then
62768: LD_VAR 0 2
62772: PUSH
62773: LD_VAR 0 4
62777: EQUAL
62778: IFFALSE 62812
// begin if x1 > x2 then
62780: LD_VAR 0 1
62784: PUSH
62785: LD_VAR 0 3
62789: GREATER
62790: IFFALSE 62802
// result := 1 else
62792: LD_ADDR_VAR 0 5
62796: PUSH
62797: LD_INT 1
62799: ST_TO_ADDR
62800: GO 62810
// result := 4 ;
62802: LD_ADDR_VAR 0 5
62806: PUSH
62807: LD_INT 4
62809: ST_TO_ADDR
// exit ;
62810: GO 62854
// end ; if x1 > x2 and y1 > y2 then
62812: LD_VAR 0 1
62816: PUSH
62817: LD_VAR 0 3
62821: GREATER
62822: PUSH
62823: LD_VAR 0 2
62827: PUSH
62828: LD_VAR 0 4
62832: GREATER
62833: AND
62834: IFFALSE 62846
// result := 2 else
62836: LD_ADDR_VAR 0 5
62840: PUSH
62841: LD_INT 2
62843: ST_TO_ADDR
62844: GO 62854
// result := 5 ;
62846: LD_ADDR_VAR 0 5
62850: PUSH
62851: LD_INT 5
62853: ST_TO_ADDR
// end ;
62854: LD_VAR 0 5
62858: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62859: LD_INT 0
62861: PPUSH
62862: PPUSH
// if not driver or not IsInUnit ( driver ) then
62863: LD_VAR 0 1
62867: NOT
62868: PUSH
62869: LD_VAR 0 1
62873: PPUSH
62874: CALL_OW 310
62878: NOT
62879: OR
62880: IFFALSE 62884
// exit ;
62882: GO 62974
// vehicle := IsInUnit ( driver ) ;
62884: LD_ADDR_VAR 0 3
62888: PUSH
62889: LD_VAR 0 1
62893: PPUSH
62894: CALL_OW 310
62898: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62899: LD_VAR 0 1
62903: PPUSH
62904: LD_STRING \
62906: PUSH
62907: LD_INT 0
62909: PUSH
62910: LD_INT 0
62912: PUSH
62913: LD_INT 0
62915: PUSH
62916: LD_INT 0
62918: PUSH
62919: LD_INT 0
62921: PUSH
62922: LD_INT 0
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: PUSH
62934: LD_STRING E
62936: PUSH
62937: LD_INT 0
62939: PUSH
62940: LD_INT 0
62942: PUSH
62943: LD_VAR 0 3
62947: PUSH
62948: LD_INT 0
62950: PUSH
62951: LD_INT 0
62953: PUSH
62954: LD_INT 0
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PPUSH
62970: CALL_OW 446
// end ;
62974: LD_VAR 0 2
62978: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62979: LD_INT 0
62981: PPUSH
62982: PPUSH
// if not driver or not IsInUnit ( driver ) then
62983: LD_VAR 0 1
62987: NOT
62988: PUSH
62989: LD_VAR 0 1
62993: PPUSH
62994: CALL_OW 310
62998: NOT
62999: OR
63000: IFFALSE 63004
// exit ;
63002: GO 63094
// vehicle := IsInUnit ( driver ) ;
63004: LD_ADDR_VAR 0 3
63008: PUSH
63009: LD_VAR 0 1
63013: PPUSH
63014: CALL_OW 310
63018: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63019: LD_VAR 0 1
63023: PPUSH
63024: LD_STRING \
63026: PUSH
63027: LD_INT 0
63029: PUSH
63030: LD_INT 0
63032: PUSH
63033: LD_INT 0
63035: PUSH
63036: LD_INT 0
63038: PUSH
63039: LD_INT 0
63041: PUSH
63042: LD_INT 0
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: PUSH
63054: LD_STRING E
63056: PUSH
63057: LD_INT 0
63059: PUSH
63060: LD_INT 0
63062: PUSH
63063: LD_VAR 0 3
63067: PUSH
63068: LD_INT 0
63070: PUSH
63071: LD_INT 0
63073: PUSH
63074: LD_INT 0
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PPUSH
63090: CALL_OW 447
// end ;
63094: LD_VAR 0 2
63098: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63099: LD_INT 0
63101: PPUSH
63102: PPUSH
63103: PPUSH
// tmp := [ ] ;
63104: LD_ADDR_VAR 0 5
63108: PUSH
63109: EMPTY
63110: ST_TO_ADDR
// for i in units do
63111: LD_ADDR_VAR 0 4
63115: PUSH
63116: LD_VAR 0 1
63120: PUSH
63121: FOR_IN
63122: IFFALSE 63160
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63124: LD_ADDR_VAR 0 5
63128: PUSH
63129: LD_VAR 0 5
63133: PPUSH
63134: LD_VAR 0 5
63138: PUSH
63139: LD_INT 1
63141: PLUS
63142: PPUSH
63143: LD_VAR 0 4
63147: PPUSH
63148: CALL_OW 256
63152: PPUSH
63153: CALL_OW 2
63157: ST_TO_ADDR
63158: GO 63121
63160: POP
63161: POP
// if not tmp then
63162: LD_VAR 0 5
63166: NOT
63167: IFFALSE 63171
// exit ;
63169: GO 63219
// if asc then
63171: LD_VAR 0 2
63175: IFFALSE 63199
// result := SortListByListAsc ( units , tmp ) else
63177: LD_ADDR_VAR 0 3
63181: PUSH
63182: LD_VAR 0 1
63186: PPUSH
63187: LD_VAR 0 5
63191: PPUSH
63192: CALL_OW 76
63196: ST_TO_ADDR
63197: GO 63219
// result := SortListByListDesc ( units , tmp ) ;
63199: LD_ADDR_VAR 0 3
63203: PUSH
63204: LD_VAR 0 1
63208: PPUSH
63209: LD_VAR 0 5
63213: PPUSH
63214: CALL_OW 77
63218: ST_TO_ADDR
// end ;
63219: LD_VAR 0 3
63223: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63224: LD_INT 0
63226: PPUSH
63227: PPUSH
// task := GetTaskList ( mech ) ;
63228: LD_ADDR_VAR 0 4
63232: PUSH
63233: LD_VAR 0 1
63237: PPUSH
63238: CALL_OW 437
63242: ST_TO_ADDR
// if not task then
63243: LD_VAR 0 4
63247: NOT
63248: IFFALSE 63252
// exit ;
63250: GO 63294
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63252: LD_ADDR_VAR 0 3
63256: PUSH
63257: LD_VAR 0 4
63261: PUSH
63262: LD_INT 1
63264: ARRAY
63265: PUSH
63266: LD_INT 1
63268: ARRAY
63269: PUSH
63270: LD_STRING r
63272: EQUAL
63273: PUSH
63274: LD_VAR 0 4
63278: PUSH
63279: LD_INT 1
63281: ARRAY
63282: PUSH
63283: LD_INT 4
63285: ARRAY
63286: PUSH
63287: LD_VAR 0 2
63291: EQUAL
63292: AND
63293: ST_TO_ADDR
// end ;
63294: LD_VAR 0 3
63298: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63299: LD_INT 0
63301: PPUSH
// SetDir ( unit , d ) ;
63302: LD_VAR 0 1
63306: PPUSH
63307: LD_VAR 0 4
63311: PPUSH
63312: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63316: LD_VAR 0 1
63320: PPUSH
63321: LD_VAR 0 2
63325: PPUSH
63326: LD_VAR 0 3
63330: PPUSH
63331: LD_VAR 0 5
63335: PPUSH
63336: CALL_OW 48
// end ;
63340: LD_VAR 0 6
63344: RET
// export function ToNaturalNumber ( number ) ; begin
63345: LD_INT 0
63347: PPUSH
// result := number div 1 ;
63348: LD_ADDR_VAR 0 2
63352: PUSH
63353: LD_VAR 0 1
63357: PUSH
63358: LD_INT 1
63360: DIV
63361: ST_TO_ADDR
// if number < 0 then
63362: LD_VAR 0 1
63366: PUSH
63367: LD_INT 0
63369: LESS
63370: IFFALSE 63380
// result := 0 ;
63372: LD_ADDR_VAR 0 2
63376: PUSH
63377: LD_INT 0
63379: ST_TO_ADDR
// end ;
63380: LD_VAR 0 2
63384: RET
// export function SortByClass ( units , class ) ; var un ; begin
63385: LD_INT 0
63387: PPUSH
63388: PPUSH
// if not units or not class then
63389: LD_VAR 0 1
63393: NOT
63394: PUSH
63395: LD_VAR 0 2
63399: NOT
63400: OR
63401: IFFALSE 63405
// exit ;
63403: GO 63500
// result := [ ] ;
63405: LD_ADDR_VAR 0 3
63409: PUSH
63410: EMPTY
63411: ST_TO_ADDR
// for un in units do
63412: LD_ADDR_VAR 0 4
63416: PUSH
63417: LD_VAR 0 1
63421: PUSH
63422: FOR_IN
63423: IFFALSE 63498
// if GetClass ( un ) = class then
63425: LD_VAR 0 4
63429: PPUSH
63430: CALL_OW 257
63434: PUSH
63435: LD_VAR 0 2
63439: EQUAL
63440: IFFALSE 63467
// result := Insert ( result , 1 , un ) else
63442: LD_ADDR_VAR 0 3
63446: PUSH
63447: LD_VAR 0 3
63451: PPUSH
63452: LD_INT 1
63454: PPUSH
63455: LD_VAR 0 4
63459: PPUSH
63460: CALL_OW 2
63464: ST_TO_ADDR
63465: GO 63496
// result := Replace ( result , result + 1 , un ) ;
63467: LD_ADDR_VAR 0 3
63471: PUSH
63472: LD_VAR 0 3
63476: PPUSH
63477: LD_VAR 0 3
63481: PUSH
63482: LD_INT 1
63484: PLUS
63485: PPUSH
63486: LD_VAR 0 4
63490: PPUSH
63491: CALL_OW 1
63495: ST_TO_ADDR
63496: GO 63422
63498: POP
63499: POP
// end ; end_of_file
63500: LD_VAR 0 3
63504: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
63505: LD_INT 0
63507: PPUSH
// ar_miner := 81 ;
63508: LD_ADDR_EXP 65
63512: PUSH
63513: LD_INT 81
63515: ST_TO_ADDR
// ar_crane := 88 ;
63516: LD_ADDR_EXP 64
63520: PUSH
63521: LD_INT 88
63523: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
63524: LD_ADDR_EXP 59
63528: PUSH
63529: LD_INT 89
63531: ST_TO_ADDR
// us_hack := 99 ;
63532: LD_ADDR_EXP 60
63536: PUSH
63537: LD_INT 99
63539: ST_TO_ADDR
// us_artillery := 97 ;
63540: LD_ADDR_EXP 61
63544: PUSH
63545: LD_INT 97
63547: ST_TO_ADDR
// ar_bio_bomb := 91 ;
63548: LD_ADDR_EXP 62
63552: PUSH
63553: LD_INT 91
63555: ST_TO_ADDR
// ar_mortar := 92 ;
63556: LD_ADDR_EXP 63
63560: PUSH
63561: LD_INT 92
63563: ST_TO_ADDR
// ru_radar := 98 ;
63564: LD_ADDR_EXP 58
63568: PUSH
63569: LD_INT 98
63571: ST_TO_ADDR
// tech_Artillery := 80 ;
63572: LD_ADDR_EXP 66
63576: PUSH
63577: LD_INT 80
63579: ST_TO_ADDR
// tech_RadMat := 81 ;
63580: LD_ADDR_EXP 67
63584: PUSH
63585: LD_INT 81
63587: ST_TO_ADDR
// tech_BasicTools := 82 ;
63588: LD_ADDR_EXP 68
63592: PUSH
63593: LD_INT 82
63595: ST_TO_ADDR
// tech_Cargo := 83 ;
63596: LD_ADDR_EXP 69
63600: PUSH
63601: LD_INT 83
63603: ST_TO_ADDR
// tech_Track := 84 ;
63604: LD_ADDR_EXP 70
63608: PUSH
63609: LD_INT 84
63611: ST_TO_ADDR
// tech_Crane := 85 ;
63612: LD_ADDR_EXP 71
63616: PUSH
63617: LD_INT 85
63619: ST_TO_ADDR
// tech_Bulldozer := 86 ;
63620: LD_ADDR_EXP 72
63624: PUSH
63625: LD_INT 86
63627: ST_TO_ADDR
// tech_Hovercraft := 87 ;
63628: LD_ADDR_EXP 73
63632: PUSH
63633: LD_INT 87
63635: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
63636: LD_ADDR_EXP 74
63640: PUSH
63641: LD_INT 88
63643: ST_TO_ADDR
// class_mastodont := 31 ;
63644: LD_ADDR_EXP 75
63648: PUSH
63649: LD_INT 31
63651: ST_TO_ADDR
// class_horse := 21 ;
63652: LD_ADDR_EXP 76
63656: PUSH
63657: LD_INT 21
63659: ST_TO_ADDR
// end ;
63660: LD_VAR 0 1
63664: RET
// every 1 do
63665: GO 63667
63667: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
63668: CALL 63505 0 0
63672: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63673: LD_INT 0
63675: PPUSH
// if p2 = 100 then
63676: LD_VAR 0 2
63680: PUSH
63681: LD_INT 100
63683: EQUAL
63684: IFFALSE 64633
// begin if not StreamModeActive then
63686: LD_EXP 77
63690: NOT
63691: IFFALSE 63701
// StreamModeActive := true ;
63693: LD_ADDR_EXP 77
63697: PUSH
63698: LD_INT 1
63700: ST_TO_ADDR
// if p3 = 0 then
63701: LD_VAR 0 3
63705: PUSH
63706: LD_INT 0
63708: EQUAL
63709: IFFALSE 63715
// InitStreamMode ;
63711: CALL 64793 0 0
// if p3 = 1 then
63715: LD_VAR 0 3
63719: PUSH
63720: LD_INT 1
63722: EQUAL
63723: IFFALSE 63733
// sRocket := true ;
63725: LD_ADDR_EXP 82
63729: PUSH
63730: LD_INT 1
63732: ST_TO_ADDR
// if p3 = 2 then
63733: LD_VAR 0 3
63737: PUSH
63738: LD_INT 2
63740: EQUAL
63741: IFFALSE 63751
// sSpeed := true ;
63743: LD_ADDR_EXP 81
63747: PUSH
63748: LD_INT 1
63750: ST_TO_ADDR
// if p3 = 3 then
63751: LD_VAR 0 3
63755: PUSH
63756: LD_INT 3
63758: EQUAL
63759: IFFALSE 63769
// sEngine := true ;
63761: LD_ADDR_EXP 83
63765: PUSH
63766: LD_INT 1
63768: ST_TO_ADDR
// if p3 = 4 then
63769: LD_VAR 0 3
63773: PUSH
63774: LD_INT 4
63776: EQUAL
63777: IFFALSE 63787
// sSpec := true ;
63779: LD_ADDR_EXP 80
63783: PUSH
63784: LD_INT 1
63786: ST_TO_ADDR
// if p3 = 5 then
63787: LD_VAR 0 3
63791: PUSH
63792: LD_INT 5
63794: EQUAL
63795: IFFALSE 63805
// sLevel := true ;
63797: LD_ADDR_EXP 84
63801: PUSH
63802: LD_INT 1
63804: ST_TO_ADDR
// if p3 = 6 then
63805: LD_VAR 0 3
63809: PUSH
63810: LD_INT 6
63812: EQUAL
63813: IFFALSE 63823
// sArmoury := true ;
63815: LD_ADDR_EXP 85
63819: PUSH
63820: LD_INT 1
63822: ST_TO_ADDR
// if p3 = 7 then
63823: LD_VAR 0 3
63827: PUSH
63828: LD_INT 7
63830: EQUAL
63831: IFFALSE 63841
// sRadar := true ;
63833: LD_ADDR_EXP 86
63837: PUSH
63838: LD_INT 1
63840: ST_TO_ADDR
// if p3 = 8 then
63841: LD_VAR 0 3
63845: PUSH
63846: LD_INT 8
63848: EQUAL
63849: IFFALSE 63859
// sBunker := true ;
63851: LD_ADDR_EXP 87
63855: PUSH
63856: LD_INT 1
63858: ST_TO_ADDR
// if p3 = 9 then
63859: LD_VAR 0 3
63863: PUSH
63864: LD_INT 9
63866: EQUAL
63867: IFFALSE 63877
// sHack := true ;
63869: LD_ADDR_EXP 88
63873: PUSH
63874: LD_INT 1
63876: ST_TO_ADDR
// if p3 = 10 then
63877: LD_VAR 0 3
63881: PUSH
63882: LD_INT 10
63884: EQUAL
63885: IFFALSE 63895
// sFire := true ;
63887: LD_ADDR_EXP 89
63891: PUSH
63892: LD_INT 1
63894: ST_TO_ADDR
// if p3 = 11 then
63895: LD_VAR 0 3
63899: PUSH
63900: LD_INT 11
63902: EQUAL
63903: IFFALSE 63913
// sRefresh := true ;
63905: LD_ADDR_EXP 90
63909: PUSH
63910: LD_INT 1
63912: ST_TO_ADDR
// if p3 = 12 then
63913: LD_VAR 0 3
63917: PUSH
63918: LD_INT 12
63920: EQUAL
63921: IFFALSE 63931
// sExp := true ;
63923: LD_ADDR_EXP 91
63927: PUSH
63928: LD_INT 1
63930: ST_TO_ADDR
// if p3 = 13 then
63931: LD_VAR 0 3
63935: PUSH
63936: LD_INT 13
63938: EQUAL
63939: IFFALSE 63949
// sDepot := true ;
63941: LD_ADDR_EXP 92
63945: PUSH
63946: LD_INT 1
63948: ST_TO_ADDR
// if p3 = 14 then
63949: LD_VAR 0 3
63953: PUSH
63954: LD_INT 14
63956: EQUAL
63957: IFFALSE 63967
// sFlag := true ;
63959: LD_ADDR_EXP 93
63963: PUSH
63964: LD_INT 1
63966: ST_TO_ADDR
// if p3 = 15 then
63967: LD_VAR 0 3
63971: PUSH
63972: LD_INT 15
63974: EQUAL
63975: IFFALSE 63985
// sKamikadze := true ;
63977: LD_ADDR_EXP 101
63981: PUSH
63982: LD_INT 1
63984: ST_TO_ADDR
// if p3 = 16 then
63985: LD_VAR 0 3
63989: PUSH
63990: LD_INT 16
63992: EQUAL
63993: IFFALSE 64003
// sTroll := true ;
63995: LD_ADDR_EXP 102
63999: PUSH
64000: LD_INT 1
64002: ST_TO_ADDR
// if p3 = 17 then
64003: LD_VAR 0 3
64007: PUSH
64008: LD_INT 17
64010: EQUAL
64011: IFFALSE 64021
// sSlow := true ;
64013: LD_ADDR_EXP 103
64017: PUSH
64018: LD_INT 1
64020: ST_TO_ADDR
// if p3 = 18 then
64021: LD_VAR 0 3
64025: PUSH
64026: LD_INT 18
64028: EQUAL
64029: IFFALSE 64039
// sLack := true ;
64031: LD_ADDR_EXP 104
64035: PUSH
64036: LD_INT 1
64038: ST_TO_ADDR
// if p3 = 19 then
64039: LD_VAR 0 3
64043: PUSH
64044: LD_INT 19
64046: EQUAL
64047: IFFALSE 64057
// sTank := true ;
64049: LD_ADDR_EXP 106
64053: PUSH
64054: LD_INT 1
64056: ST_TO_ADDR
// if p3 = 20 then
64057: LD_VAR 0 3
64061: PUSH
64062: LD_INT 20
64064: EQUAL
64065: IFFALSE 64075
// sRemote := true ;
64067: LD_ADDR_EXP 107
64071: PUSH
64072: LD_INT 1
64074: ST_TO_ADDR
// if p3 = 21 then
64075: LD_VAR 0 3
64079: PUSH
64080: LD_INT 21
64082: EQUAL
64083: IFFALSE 64093
// sPowell := true ;
64085: LD_ADDR_EXP 108
64089: PUSH
64090: LD_INT 1
64092: ST_TO_ADDR
// if p3 = 22 then
64093: LD_VAR 0 3
64097: PUSH
64098: LD_INT 22
64100: EQUAL
64101: IFFALSE 64111
// sTeleport := true ;
64103: LD_ADDR_EXP 111
64107: PUSH
64108: LD_INT 1
64110: ST_TO_ADDR
// if p3 = 23 then
64111: LD_VAR 0 3
64115: PUSH
64116: LD_INT 23
64118: EQUAL
64119: IFFALSE 64129
// sOilTower := true ;
64121: LD_ADDR_EXP 113
64125: PUSH
64126: LD_INT 1
64128: ST_TO_ADDR
// if p3 = 24 then
64129: LD_VAR 0 3
64133: PUSH
64134: LD_INT 24
64136: EQUAL
64137: IFFALSE 64147
// sShovel := true ;
64139: LD_ADDR_EXP 114
64143: PUSH
64144: LD_INT 1
64146: ST_TO_ADDR
// if p3 = 25 then
64147: LD_VAR 0 3
64151: PUSH
64152: LD_INT 25
64154: EQUAL
64155: IFFALSE 64165
// sSheik := true ;
64157: LD_ADDR_EXP 115
64161: PUSH
64162: LD_INT 1
64164: ST_TO_ADDR
// if p3 = 26 then
64165: LD_VAR 0 3
64169: PUSH
64170: LD_INT 26
64172: EQUAL
64173: IFFALSE 64183
// sEarthquake := true ;
64175: LD_ADDR_EXP 117
64179: PUSH
64180: LD_INT 1
64182: ST_TO_ADDR
// if p3 = 27 then
64183: LD_VAR 0 3
64187: PUSH
64188: LD_INT 27
64190: EQUAL
64191: IFFALSE 64201
// sAI := true ;
64193: LD_ADDR_EXP 118
64197: PUSH
64198: LD_INT 1
64200: ST_TO_ADDR
// if p3 = 28 then
64201: LD_VAR 0 3
64205: PUSH
64206: LD_INT 28
64208: EQUAL
64209: IFFALSE 64219
// sCargo := true ;
64211: LD_ADDR_EXP 121
64215: PUSH
64216: LD_INT 1
64218: ST_TO_ADDR
// if p3 = 29 then
64219: LD_VAR 0 3
64223: PUSH
64224: LD_INT 29
64226: EQUAL
64227: IFFALSE 64237
// sDLaser := true ;
64229: LD_ADDR_EXP 122
64233: PUSH
64234: LD_INT 1
64236: ST_TO_ADDR
// if p3 = 30 then
64237: LD_VAR 0 3
64241: PUSH
64242: LD_INT 30
64244: EQUAL
64245: IFFALSE 64255
// sExchange := true ;
64247: LD_ADDR_EXP 123
64251: PUSH
64252: LD_INT 1
64254: ST_TO_ADDR
// if p3 = 31 then
64255: LD_VAR 0 3
64259: PUSH
64260: LD_INT 31
64262: EQUAL
64263: IFFALSE 64273
// sFac := true ;
64265: LD_ADDR_EXP 124
64269: PUSH
64270: LD_INT 1
64272: ST_TO_ADDR
// if p3 = 32 then
64273: LD_VAR 0 3
64277: PUSH
64278: LD_INT 32
64280: EQUAL
64281: IFFALSE 64291
// sPower := true ;
64283: LD_ADDR_EXP 125
64287: PUSH
64288: LD_INT 1
64290: ST_TO_ADDR
// if p3 = 33 then
64291: LD_VAR 0 3
64295: PUSH
64296: LD_INT 33
64298: EQUAL
64299: IFFALSE 64309
// sRandom := true ;
64301: LD_ADDR_EXP 126
64305: PUSH
64306: LD_INT 1
64308: ST_TO_ADDR
// if p3 = 34 then
64309: LD_VAR 0 3
64313: PUSH
64314: LD_INT 34
64316: EQUAL
64317: IFFALSE 64327
// sShield := true ;
64319: LD_ADDR_EXP 127
64323: PUSH
64324: LD_INT 1
64326: ST_TO_ADDR
// if p3 = 35 then
64327: LD_VAR 0 3
64331: PUSH
64332: LD_INT 35
64334: EQUAL
64335: IFFALSE 64345
// sTime := true ;
64337: LD_ADDR_EXP 128
64341: PUSH
64342: LD_INT 1
64344: ST_TO_ADDR
// if p3 = 36 then
64345: LD_VAR 0 3
64349: PUSH
64350: LD_INT 36
64352: EQUAL
64353: IFFALSE 64363
// sTools := true ;
64355: LD_ADDR_EXP 129
64359: PUSH
64360: LD_INT 1
64362: ST_TO_ADDR
// if p3 = 101 then
64363: LD_VAR 0 3
64367: PUSH
64368: LD_INT 101
64370: EQUAL
64371: IFFALSE 64381
// sSold := true ;
64373: LD_ADDR_EXP 94
64377: PUSH
64378: LD_INT 1
64380: ST_TO_ADDR
// if p3 = 102 then
64381: LD_VAR 0 3
64385: PUSH
64386: LD_INT 102
64388: EQUAL
64389: IFFALSE 64399
// sDiff := true ;
64391: LD_ADDR_EXP 95
64395: PUSH
64396: LD_INT 1
64398: ST_TO_ADDR
// if p3 = 103 then
64399: LD_VAR 0 3
64403: PUSH
64404: LD_INT 103
64406: EQUAL
64407: IFFALSE 64417
// sFog := true ;
64409: LD_ADDR_EXP 98
64413: PUSH
64414: LD_INT 1
64416: ST_TO_ADDR
// if p3 = 104 then
64417: LD_VAR 0 3
64421: PUSH
64422: LD_INT 104
64424: EQUAL
64425: IFFALSE 64435
// sReset := true ;
64427: LD_ADDR_EXP 99
64431: PUSH
64432: LD_INT 1
64434: ST_TO_ADDR
// if p3 = 105 then
64435: LD_VAR 0 3
64439: PUSH
64440: LD_INT 105
64442: EQUAL
64443: IFFALSE 64453
// sSun := true ;
64445: LD_ADDR_EXP 100
64449: PUSH
64450: LD_INT 1
64452: ST_TO_ADDR
// if p3 = 106 then
64453: LD_VAR 0 3
64457: PUSH
64458: LD_INT 106
64460: EQUAL
64461: IFFALSE 64471
// sTiger := true ;
64463: LD_ADDR_EXP 96
64467: PUSH
64468: LD_INT 1
64470: ST_TO_ADDR
// if p3 = 107 then
64471: LD_VAR 0 3
64475: PUSH
64476: LD_INT 107
64478: EQUAL
64479: IFFALSE 64489
// sBomb := true ;
64481: LD_ADDR_EXP 97
64485: PUSH
64486: LD_INT 1
64488: ST_TO_ADDR
// if p3 = 108 then
64489: LD_VAR 0 3
64493: PUSH
64494: LD_INT 108
64496: EQUAL
64497: IFFALSE 64507
// sWound := true ;
64499: LD_ADDR_EXP 105
64503: PUSH
64504: LD_INT 1
64506: ST_TO_ADDR
// if p3 = 109 then
64507: LD_VAR 0 3
64511: PUSH
64512: LD_INT 109
64514: EQUAL
64515: IFFALSE 64525
// sBetray := true ;
64517: LD_ADDR_EXP 109
64521: PUSH
64522: LD_INT 1
64524: ST_TO_ADDR
// if p3 = 110 then
64525: LD_VAR 0 3
64529: PUSH
64530: LD_INT 110
64532: EQUAL
64533: IFFALSE 64543
// sContamin := true ;
64535: LD_ADDR_EXP 110
64539: PUSH
64540: LD_INT 1
64542: ST_TO_ADDR
// if p3 = 111 then
64543: LD_VAR 0 3
64547: PUSH
64548: LD_INT 111
64550: EQUAL
64551: IFFALSE 64561
// sOil := true ;
64553: LD_ADDR_EXP 112
64557: PUSH
64558: LD_INT 1
64560: ST_TO_ADDR
// if p3 = 112 then
64561: LD_VAR 0 3
64565: PUSH
64566: LD_INT 112
64568: EQUAL
64569: IFFALSE 64579
// sStu := true ;
64571: LD_ADDR_EXP 116
64575: PUSH
64576: LD_INT 1
64578: ST_TO_ADDR
// if p3 = 113 then
64579: LD_VAR 0 3
64583: PUSH
64584: LD_INT 113
64586: EQUAL
64587: IFFALSE 64597
// sBazooka := true ;
64589: LD_ADDR_EXP 119
64593: PUSH
64594: LD_INT 1
64596: ST_TO_ADDR
// if p3 = 114 then
64597: LD_VAR 0 3
64601: PUSH
64602: LD_INT 114
64604: EQUAL
64605: IFFALSE 64615
// sMortar := true ;
64607: LD_ADDR_EXP 120
64611: PUSH
64612: LD_INT 1
64614: ST_TO_ADDR
// if p3 = 115 then
64615: LD_VAR 0 3
64619: PUSH
64620: LD_INT 115
64622: EQUAL
64623: IFFALSE 64633
// sRanger := true ;
64625: LD_ADDR_EXP 130
64629: PUSH
64630: LD_INT 1
64632: ST_TO_ADDR
// end ; if p2 = 101 then
64633: LD_VAR 0 2
64637: PUSH
64638: LD_INT 101
64640: EQUAL
64641: IFFALSE 64769
// begin case p3 of 1 :
64643: LD_VAR 0 3
64647: PUSH
64648: LD_INT 1
64650: DOUBLE
64651: EQUAL
64652: IFTRUE 64656
64654: GO 64663
64656: POP
// hHackUnlimitedResources ; 2 :
64657: CALL 75806 0 0
64661: GO 64769
64663: LD_INT 2
64665: DOUBLE
64666: EQUAL
64667: IFTRUE 64671
64669: GO 64678
64671: POP
// hHackSetLevel10 ; 3 :
64672: CALL 75939 0 0
64676: GO 64769
64678: LD_INT 3
64680: DOUBLE
64681: EQUAL
64682: IFTRUE 64686
64684: GO 64693
64686: POP
// hHackSetLevel10YourUnits ; 4 :
64687: CALL 76024 0 0
64691: GO 64769
64693: LD_INT 4
64695: DOUBLE
64696: EQUAL
64697: IFTRUE 64701
64699: GO 64708
64701: POP
// hHackInvincible ; 5 :
64702: CALL 76472 0 0
64706: GO 64769
64708: LD_INT 5
64710: DOUBLE
64711: EQUAL
64712: IFTRUE 64716
64714: GO 64723
64716: POP
// hHackInvisible ; 6 :
64717: CALL 76583 0 0
64721: GO 64769
64723: LD_INT 6
64725: DOUBLE
64726: EQUAL
64727: IFTRUE 64731
64729: GO 64738
64731: POP
// hHackChangeYourSide ; 7 :
64732: CALL 76640 0 0
64736: GO 64769
64738: LD_INT 7
64740: DOUBLE
64741: EQUAL
64742: IFTRUE 64746
64744: GO 64753
64746: POP
// hHackChangeUnitSide ; 8 :
64747: CALL 76682 0 0
64751: GO 64769
64753: LD_INT 8
64755: DOUBLE
64756: EQUAL
64757: IFTRUE 64761
64759: GO 64768
64761: POP
// hHackFog ; end ;
64762: CALL 76783 0 0
64766: GO 64769
64768: POP
// end ; end ;
64769: LD_VAR 0 7
64773: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
64774: GO 64776
64776: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
64777: LD_STRING initStreamRollete();
64779: PPUSH
64780: CALL_OW 559
// InitStreamMode ;
64784: CALL 64793 0 0
// DefineStreamItems ( ) ;
64788: CALL 65233 0 0
// end ;
64792: END
// function InitStreamMode ; begin
64793: LD_INT 0
64795: PPUSH
// streamModeActive := false ;
64796: LD_ADDR_EXP 77
64800: PUSH
64801: LD_INT 0
64803: ST_TO_ADDR
// normalCounter := 36 ;
64804: LD_ADDR_EXP 78
64808: PUSH
64809: LD_INT 36
64811: ST_TO_ADDR
// hardcoreCounter := 16 ;
64812: LD_ADDR_EXP 79
64816: PUSH
64817: LD_INT 16
64819: ST_TO_ADDR
// sRocket := false ;
64820: LD_ADDR_EXP 82
64824: PUSH
64825: LD_INT 0
64827: ST_TO_ADDR
// sSpeed := false ;
64828: LD_ADDR_EXP 81
64832: PUSH
64833: LD_INT 0
64835: ST_TO_ADDR
// sEngine := false ;
64836: LD_ADDR_EXP 83
64840: PUSH
64841: LD_INT 0
64843: ST_TO_ADDR
// sSpec := false ;
64844: LD_ADDR_EXP 80
64848: PUSH
64849: LD_INT 0
64851: ST_TO_ADDR
// sLevel := false ;
64852: LD_ADDR_EXP 84
64856: PUSH
64857: LD_INT 0
64859: ST_TO_ADDR
// sArmoury := false ;
64860: LD_ADDR_EXP 85
64864: PUSH
64865: LD_INT 0
64867: ST_TO_ADDR
// sRadar := false ;
64868: LD_ADDR_EXP 86
64872: PUSH
64873: LD_INT 0
64875: ST_TO_ADDR
// sBunker := false ;
64876: LD_ADDR_EXP 87
64880: PUSH
64881: LD_INT 0
64883: ST_TO_ADDR
// sHack := false ;
64884: LD_ADDR_EXP 88
64888: PUSH
64889: LD_INT 0
64891: ST_TO_ADDR
// sFire := false ;
64892: LD_ADDR_EXP 89
64896: PUSH
64897: LD_INT 0
64899: ST_TO_ADDR
// sRefresh := false ;
64900: LD_ADDR_EXP 90
64904: PUSH
64905: LD_INT 0
64907: ST_TO_ADDR
// sExp := false ;
64908: LD_ADDR_EXP 91
64912: PUSH
64913: LD_INT 0
64915: ST_TO_ADDR
// sDepot := false ;
64916: LD_ADDR_EXP 92
64920: PUSH
64921: LD_INT 0
64923: ST_TO_ADDR
// sFlag := false ;
64924: LD_ADDR_EXP 93
64928: PUSH
64929: LD_INT 0
64931: ST_TO_ADDR
// sKamikadze := false ;
64932: LD_ADDR_EXP 101
64936: PUSH
64937: LD_INT 0
64939: ST_TO_ADDR
// sTroll := false ;
64940: LD_ADDR_EXP 102
64944: PUSH
64945: LD_INT 0
64947: ST_TO_ADDR
// sSlow := false ;
64948: LD_ADDR_EXP 103
64952: PUSH
64953: LD_INT 0
64955: ST_TO_ADDR
// sLack := false ;
64956: LD_ADDR_EXP 104
64960: PUSH
64961: LD_INT 0
64963: ST_TO_ADDR
// sTank := false ;
64964: LD_ADDR_EXP 106
64968: PUSH
64969: LD_INT 0
64971: ST_TO_ADDR
// sRemote := false ;
64972: LD_ADDR_EXP 107
64976: PUSH
64977: LD_INT 0
64979: ST_TO_ADDR
// sPowell := false ;
64980: LD_ADDR_EXP 108
64984: PUSH
64985: LD_INT 0
64987: ST_TO_ADDR
// sTeleport := false ;
64988: LD_ADDR_EXP 111
64992: PUSH
64993: LD_INT 0
64995: ST_TO_ADDR
// sOilTower := false ;
64996: LD_ADDR_EXP 113
65000: PUSH
65001: LD_INT 0
65003: ST_TO_ADDR
// sShovel := false ;
65004: LD_ADDR_EXP 114
65008: PUSH
65009: LD_INT 0
65011: ST_TO_ADDR
// sSheik := false ;
65012: LD_ADDR_EXP 115
65016: PUSH
65017: LD_INT 0
65019: ST_TO_ADDR
// sEarthquake := false ;
65020: LD_ADDR_EXP 117
65024: PUSH
65025: LD_INT 0
65027: ST_TO_ADDR
// sAI := false ;
65028: LD_ADDR_EXP 118
65032: PUSH
65033: LD_INT 0
65035: ST_TO_ADDR
// sCargo := false ;
65036: LD_ADDR_EXP 121
65040: PUSH
65041: LD_INT 0
65043: ST_TO_ADDR
// sDLaser := false ;
65044: LD_ADDR_EXP 122
65048: PUSH
65049: LD_INT 0
65051: ST_TO_ADDR
// sExchange := false ;
65052: LD_ADDR_EXP 123
65056: PUSH
65057: LD_INT 0
65059: ST_TO_ADDR
// sFac := false ;
65060: LD_ADDR_EXP 124
65064: PUSH
65065: LD_INT 0
65067: ST_TO_ADDR
// sPower := false ;
65068: LD_ADDR_EXP 125
65072: PUSH
65073: LD_INT 0
65075: ST_TO_ADDR
// sRandom := false ;
65076: LD_ADDR_EXP 126
65080: PUSH
65081: LD_INT 0
65083: ST_TO_ADDR
// sShield := false ;
65084: LD_ADDR_EXP 127
65088: PUSH
65089: LD_INT 0
65091: ST_TO_ADDR
// sTime := false ;
65092: LD_ADDR_EXP 128
65096: PUSH
65097: LD_INT 0
65099: ST_TO_ADDR
// sTools := false ;
65100: LD_ADDR_EXP 129
65104: PUSH
65105: LD_INT 0
65107: ST_TO_ADDR
// sSold := false ;
65108: LD_ADDR_EXP 94
65112: PUSH
65113: LD_INT 0
65115: ST_TO_ADDR
// sDiff := false ;
65116: LD_ADDR_EXP 95
65120: PUSH
65121: LD_INT 0
65123: ST_TO_ADDR
// sFog := false ;
65124: LD_ADDR_EXP 98
65128: PUSH
65129: LD_INT 0
65131: ST_TO_ADDR
// sReset := false ;
65132: LD_ADDR_EXP 99
65136: PUSH
65137: LD_INT 0
65139: ST_TO_ADDR
// sSun := false ;
65140: LD_ADDR_EXP 100
65144: PUSH
65145: LD_INT 0
65147: ST_TO_ADDR
// sTiger := false ;
65148: LD_ADDR_EXP 96
65152: PUSH
65153: LD_INT 0
65155: ST_TO_ADDR
// sBomb := false ;
65156: LD_ADDR_EXP 97
65160: PUSH
65161: LD_INT 0
65163: ST_TO_ADDR
// sWound := false ;
65164: LD_ADDR_EXP 105
65168: PUSH
65169: LD_INT 0
65171: ST_TO_ADDR
// sBetray := false ;
65172: LD_ADDR_EXP 109
65176: PUSH
65177: LD_INT 0
65179: ST_TO_ADDR
// sContamin := false ;
65180: LD_ADDR_EXP 110
65184: PUSH
65185: LD_INT 0
65187: ST_TO_ADDR
// sOil := false ;
65188: LD_ADDR_EXP 112
65192: PUSH
65193: LD_INT 0
65195: ST_TO_ADDR
// sStu := false ;
65196: LD_ADDR_EXP 116
65200: PUSH
65201: LD_INT 0
65203: ST_TO_ADDR
// sBazooka := false ;
65204: LD_ADDR_EXP 119
65208: PUSH
65209: LD_INT 0
65211: ST_TO_ADDR
// sMortar := false ;
65212: LD_ADDR_EXP 120
65216: PUSH
65217: LD_INT 0
65219: ST_TO_ADDR
// sRanger := false ;
65220: LD_ADDR_EXP 130
65224: PUSH
65225: LD_INT 0
65227: ST_TO_ADDR
// end ;
65228: LD_VAR 0 1
65232: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
65233: LD_INT 0
65235: PPUSH
65236: PPUSH
65237: PPUSH
65238: PPUSH
65239: PPUSH
// result := [ ] ;
65240: LD_ADDR_VAR 0 1
65244: PUSH
65245: EMPTY
65246: ST_TO_ADDR
// if campaign_id = 1 then
65247: LD_OWVAR 69
65251: PUSH
65252: LD_INT 1
65254: EQUAL
65255: IFFALSE 68193
// begin case mission_number of 1 :
65257: LD_OWVAR 70
65261: PUSH
65262: LD_INT 1
65264: DOUBLE
65265: EQUAL
65266: IFTRUE 65270
65268: GO 65334
65270: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
65271: LD_ADDR_VAR 0 1
65275: PUSH
65276: LD_INT 2
65278: PUSH
65279: LD_INT 4
65281: PUSH
65282: LD_INT 11
65284: PUSH
65285: LD_INT 12
65287: PUSH
65288: LD_INT 15
65290: PUSH
65291: LD_INT 16
65293: PUSH
65294: LD_INT 22
65296: PUSH
65297: LD_INT 23
65299: PUSH
65300: LD_INT 26
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 101
65316: PUSH
65317: LD_INT 102
65319: PUSH
65320: LD_INT 106
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: LIST
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: ST_TO_ADDR
65332: GO 68191
65334: LD_INT 2
65336: DOUBLE
65337: EQUAL
65338: IFTRUE 65342
65340: GO 65414
65342: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
65343: LD_ADDR_VAR 0 1
65347: PUSH
65348: LD_INT 2
65350: PUSH
65351: LD_INT 4
65353: PUSH
65354: LD_INT 11
65356: PUSH
65357: LD_INT 12
65359: PUSH
65360: LD_INT 15
65362: PUSH
65363: LD_INT 16
65365: PUSH
65366: LD_INT 22
65368: PUSH
65369: LD_INT 23
65371: PUSH
65372: LD_INT 26
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: LIST
65379: LIST
65380: LIST
65381: LIST
65382: LIST
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 101
65388: PUSH
65389: LD_INT 102
65391: PUSH
65392: LD_INT 105
65394: PUSH
65395: LD_INT 106
65397: PUSH
65398: LD_INT 108
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: LIST
65405: LIST
65406: LIST
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: ST_TO_ADDR
65412: GO 68191
65414: LD_INT 3
65416: DOUBLE
65417: EQUAL
65418: IFTRUE 65422
65420: GO 65498
65422: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
65423: LD_ADDR_VAR 0 1
65427: PUSH
65428: LD_INT 2
65430: PUSH
65431: LD_INT 4
65433: PUSH
65434: LD_INT 5
65436: PUSH
65437: LD_INT 11
65439: PUSH
65440: LD_INT 12
65442: PUSH
65443: LD_INT 15
65445: PUSH
65446: LD_INT 16
65448: PUSH
65449: LD_INT 22
65451: PUSH
65452: LD_INT 26
65454: PUSH
65455: LD_INT 36
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 101
65472: PUSH
65473: LD_INT 102
65475: PUSH
65476: LD_INT 105
65478: PUSH
65479: LD_INT 106
65481: PUSH
65482: LD_INT 108
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: ST_TO_ADDR
65496: GO 68191
65498: LD_INT 4
65500: DOUBLE
65501: EQUAL
65502: IFTRUE 65506
65504: GO 65590
65506: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
65507: LD_ADDR_VAR 0 1
65511: PUSH
65512: LD_INT 2
65514: PUSH
65515: LD_INT 4
65517: PUSH
65518: LD_INT 5
65520: PUSH
65521: LD_INT 8
65523: PUSH
65524: LD_INT 11
65526: PUSH
65527: LD_INT 12
65529: PUSH
65530: LD_INT 15
65532: PUSH
65533: LD_INT 16
65535: PUSH
65536: LD_INT 22
65538: PUSH
65539: LD_INT 23
65541: PUSH
65542: LD_INT 26
65544: PUSH
65545: LD_INT 36
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 101
65564: PUSH
65565: LD_INT 102
65567: PUSH
65568: LD_INT 105
65570: PUSH
65571: LD_INT 106
65573: PUSH
65574: LD_INT 108
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: ST_TO_ADDR
65588: GO 68191
65590: LD_INT 5
65592: DOUBLE
65593: EQUAL
65594: IFTRUE 65598
65596: GO 65698
65598: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
65599: LD_ADDR_VAR 0 1
65603: PUSH
65604: LD_INT 2
65606: PUSH
65607: LD_INT 4
65609: PUSH
65610: LD_INT 5
65612: PUSH
65613: LD_INT 6
65615: PUSH
65616: LD_INT 8
65618: PUSH
65619: LD_INT 11
65621: PUSH
65622: LD_INT 12
65624: PUSH
65625: LD_INT 15
65627: PUSH
65628: LD_INT 16
65630: PUSH
65631: LD_INT 22
65633: PUSH
65634: LD_INT 23
65636: PUSH
65637: LD_INT 25
65639: PUSH
65640: LD_INT 26
65642: PUSH
65643: LD_INT 36
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 101
65664: PUSH
65665: LD_INT 102
65667: PUSH
65668: LD_INT 105
65670: PUSH
65671: LD_INT 106
65673: PUSH
65674: LD_INT 108
65676: PUSH
65677: LD_INT 109
65679: PUSH
65680: LD_INT 112
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: ST_TO_ADDR
65696: GO 68191
65698: LD_INT 6
65700: DOUBLE
65701: EQUAL
65702: IFTRUE 65706
65704: GO 65826
65706: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
65707: LD_ADDR_VAR 0 1
65711: PUSH
65712: LD_INT 2
65714: PUSH
65715: LD_INT 4
65717: PUSH
65718: LD_INT 5
65720: PUSH
65721: LD_INT 6
65723: PUSH
65724: LD_INT 8
65726: PUSH
65727: LD_INT 11
65729: PUSH
65730: LD_INT 12
65732: PUSH
65733: LD_INT 15
65735: PUSH
65736: LD_INT 16
65738: PUSH
65739: LD_INT 20
65741: PUSH
65742: LD_INT 21
65744: PUSH
65745: LD_INT 22
65747: PUSH
65748: LD_INT 23
65750: PUSH
65751: LD_INT 25
65753: PUSH
65754: LD_INT 26
65756: PUSH
65757: LD_INT 30
65759: PUSH
65760: LD_INT 31
65762: PUSH
65763: LD_INT 32
65765: PUSH
65766: LD_INT 36
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 101
65792: PUSH
65793: LD_INT 102
65795: PUSH
65796: LD_INT 105
65798: PUSH
65799: LD_INT 106
65801: PUSH
65802: LD_INT 108
65804: PUSH
65805: LD_INT 109
65807: PUSH
65808: LD_INT 112
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: ST_TO_ADDR
65824: GO 68191
65826: LD_INT 7
65828: DOUBLE
65829: EQUAL
65830: IFTRUE 65834
65832: GO 65934
65834: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
65835: LD_ADDR_VAR 0 1
65839: PUSH
65840: LD_INT 2
65842: PUSH
65843: LD_INT 4
65845: PUSH
65846: LD_INT 5
65848: PUSH
65849: LD_INT 7
65851: PUSH
65852: LD_INT 11
65854: PUSH
65855: LD_INT 12
65857: PUSH
65858: LD_INT 15
65860: PUSH
65861: LD_INT 16
65863: PUSH
65864: LD_INT 20
65866: PUSH
65867: LD_INT 21
65869: PUSH
65870: LD_INT 22
65872: PUSH
65873: LD_INT 23
65875: PUSH
65876: LD_INT 25
65878: PUSH
65879: LD_INT 26
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 101
65900: PUSH
65901: LD_INT 102
65903: PUSH
65904: LD_INT 103
65906: PUSH
65907: LD_INT 105
65909: PUSH
65910: LD_INT 106
65912: PUSH
65913: LD_INT 108
65915: PUSH
65916: LD_INT 112
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: LIST
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: ST_TO_ADDR
65932: GO 68191
65934: LD_INT 8
65936: DOUBLE
65937: EQUAL
65938: IFTRUE 65942
65940: GO 66070
65942: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
65943: LD_ADDR_VAR 0 1
65947: PUSH
65948: LD_INT 2
65950: PUSH
65951: LD_INT 4
65953: PUSH
65954: LD_INT 5
65956: PUSH
65957: LD_INT 6
65959: PUSH
65960: LD_INT 7
65962: PUSH
65963: LD_INT 8
65965: PUSH
65966: LD_INT 11
65968: PUSH
65969: LD_INT 12
65971: PUSH
65972: LD_INT 15
65974: PUSH
65975: LD_INT 16
65977: PUSH
65978: LD_INT 20
65980: PUSH
65981: LD_INT 21
65983: PUSH
65984: LD_INT 22
65986: PUSH
65987: LD_INT 23
65989: PUSH
65990: LD_INT 25
65992: PUSH
65993: LD_INT 26
65995: PUSH
65996: LD_INT 30
65998: PUSH
65999: LD_INT 31
66001: PUSH
66002: LD_INT 32
66004: PUSH
66005: LD_INT 36
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: LIST
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 101
66032: PUSH
66033: LD_INT 102
66035: PUSH
66036: LD_INT 103
66038: PUSH
66039: LD_INT 105
66041: PUSH
66042: LD_INT 106
66044: PUSH
66045: LD_INT 108
66047: PUSH
66048: LD_INT 109
66050: PUSH
66051: LD_INT 112
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: ST_TO_ADDR
66068: GO 68191
66070: LD_INT 9
66072: DOUBLE
66073: EQUAL
66074: IFTRUE 66078
66076: GO 66214
66078: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
66079: LD_ADDR_VAR 0 1
66083: PUSH
66084: LD_INT 2
66086: PUSH
66087: LD_INT 4
66089: PUSH
66090: LD_INT 5
66092: PUSH
66093: LD_INT 6
66095: PUSH
66096: LD_INT 7
66098: PUSH
66099: LD_INT 8
66101: PUSH
66102: LD_INT 11
66104: PUSH
66105: LD_INT 12
66107: PUSH
66108: LD_INT 15
66110: PUSH
66111: LD_INT 16
66113: PUSH
66114: LD_INT 20
66116: PUSH
66117: LD_INT 21
66119: PUSH
66120: LD_INT 22
66122: PUSH
66123: LD_INT 23
66125: PUSH
66126: LD_INT 25
66128: PUSH
66129: LD_INT 26
66131: PUSH
66132: LD_INT 28
66134: PUSH
66135: LD_INT 30
66137: PUSH
66138: LD_INT 31
66140: PUSH
66141: LD_INT 32
66143: PUSH
66144: LD_INT 36
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 101
66172: PUSH
66173: LD_INT 102
66175: PUSH
66176: LD_INT 103
66178: PUSH
66179: LD_INT 105
66181: PUSH
66182: LD_INT 106
66184: PUSH
66185: LD_INT 108
66187: PUSH
66188: LD_INT 109
66190: PUSH
66191: LD_INT 112
66193: PUSH
66194: LD_INT 114
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: ST_TO_ADDR
66212: GO 68191
66214: LD_INT 10
66216: DOUBLE
66217: EQUAL
66218: IFTRUE 66222
66220: GO 66406
66222: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
66223: LD_ADDR_VAR 0 1
66227: PUSH
66228: LD_INT 2
66230: PUSH
66231: LD_INT 4
66233: PUSH
66234: LD_INT 5
66236: PUSH
66237: LD_INT 6
66239: PUSH
66240: LD_INT 7
66242: PUSH
66243: LD_INT 8
66245: PUSH
66246: LD_INT 9
66248: PUSH
66249: LD_INT 10
66251: PUSH
66252: LD_INT 11
66254: PUSH
66255: LD_INT 12
66257: PUSH
66258: LD_INT 13
66260: PUSH
66261: LD_INT 14
66263: PUSH
66264: LD_INT 15
66266: PUSH
66267: LD_INT 16
66269: PUSH
66270: LD_INT 17
66272: PUSH
66273: LD_INT 18
66275: PUSH
66276: LD_INT 19
66278: PUSH
66279: LD_INT 20
66281: PUSH
66282: LD_INT 21
66284: PUSH
66285: LD_INT 22
66287: PUSH
66288: LD_INT 23
66290: PUSH
66291: LD_INT 24
66293: PUSH
66294: LD_INT 25
66296: PUSH
66297: LD_INT 26
66299: PUSH
66300: LD_INT 28
66302: PUSH
66303: LD_INT 30
66305: PUSH
66306: LD_INT 31
66308: PUSH
66309: LD_INT 32
66311: PUSH
66312: LD_INT 36
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 101
66348: PUSH
66349: LD_INT 102
66351: PUSH
66352: LD_INT 103
66354: PUSH
66355: LD_INT 104
66357: PUSH
66358: LD_INT 105
66360: PUSH
66361: LD_INT 106
66363: PUSH
66364: LD_INT 107
66366: PUSH
66367: LD_INT 108
66369: PUSH
66370: LD_INT 109
66372: PUSH
66373: LD_INT 110
66375: PUSH
66376: LD_INT 111
66378: PUSH
66379: LD_INT 112
66381: PUSH
66382: LD_INT 114
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: ST_TO_ADDR
66404: GO 68191
66406: LD_INT 11
66408: DOUBLE
66409: EQUAL
66410: IFTRUE 66414
66412: GO 66606
66414: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
66415: LD_ADDR_VAR 0 1
66419: PUSH
66420: LD_INT 2
66422: PUSH
66423: LD_INT 3
66425: PUSH
66426: LD_INT 4
66428: PUSH
66429: LD_INT 5
66431: PUSH
66432: LD_INT 6
66434: PUSH
66435: LD_INT 7
66437: PUSH
66438: LD_INT 8
66440: PUSH
66441: LD_INT 9
66443: PUSH
66444: LD_INT 10
66446: PUSH
66447: LD_INT 11
66449: PUSH
66450: LD_INT 12
66452: PUSH
66453: LD_INT 13
66455: PUSH
66456: LD_INT 14
66458: PUSH
66459: LD_INT 15
66461: PUSH
66462: LD_INT 16
66464: PUSH
66465: LD_INT 17
66467: PUSH
66468: LD_INT 18
66470: PUSH
66471: LD_INT 19
66473: PUSH
66474: LD_INT 20
66476: PUSH
66477: LD_INT 21
66479: PUSH
66480: LD_INT 22
66482: PUSH
66483: LD_INT 23
66485: PUSH
66486: LD_INT 24
66488: PUSH
66489: LD_INT 25
66491: PUSH
66492: LD_INT 26
66494: PUSH
66495: LD_INT 28
66497: PUSH
66498: LD_INT 30
66500: PUSH
66501: LD_INT 31
66503: PUSH
66504: LD_INT 32
66506: PUSH
66507: LD_INT 34
66509: PUSH
66510: LD_INT 36
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: LIST
66536: LIST
66537: LIST
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 101
66548: PUSH
66549: LD_INT 102
66551: PUSH
66552: LD_INT 103
66554: PUSH
66555: LD_INT 104
66557: PUSH
66558: LD_INT 105
66560: PUSH
66561: LD_INT 106
66563: PUSH
66564: LD_INT 107
66566: PUSH
66567: LD_INT 108
66569: PUSH
66570: LD_INT 109
66572: PUSH
66573: LD_INT 110
66575: PUSH
66576: LD_INT 111
66578: PUSH
66579: LD_INT 112
66581: PUSH
66582: LD_INT 114
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: LIST
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: ST_TO_ADDR
66604: GO 68191
66606: LD_INT 12
66608: DOUBLE
66609: EQUAL
66610: IFTRUE 66614
66612: GO 66822
66614: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
66615: LD_ADDR_VAR 0 1
66619: PUSH
66620: LD_INT 1
66622: PUSH
66623: LD_INT 2
66625: PUSH
66626: LD_INT 3
66628: PUSH
66629: LD_INT 4
66631: PUSH
66632: LD_INT 5
66634: PUSH
66635: LD_INT 6
66637: PUSH
66638: LD_INT 7
66640: PUSH
66641: LD_INT 8
66643: PUSH
66644: LD_INT 9
66646: PUSH
66647: LD_INT 10
66649: PUSH
66650: LD_INT 11
66652: PUSH
66653: LD_INT 12
66655: PUSH
66656: LD_INT 13
66658: PUSH
66659: LD_INT 14
66661: PUSH
66662: LD_INT 15
66664: PUSH
66665: LD_INT 16
66667: PUSH
66668: LD_INT 17
66670: PUSH
66671: LD_INT 18
66673: PUSH
66674: LD_INT 19
66676: PUSH
66677: LD_INT 20
66679: PUSH
66680: LD_INT 21
66682: PUSH
66683: LD_INT 22
66685: PUSH
66686: LD_INT 23
66688: PUSH
66689: LD_INT 24
66691: PUSH
66692: LD_INT 25
66694: PUSH
66695: LD_INT 26
66697: PUSH
66698: LD_INT 27
66700: PUSH
66701: LD_INT 28
66703: PUSH
66704: LD_INT 30
66706: PUSH
66707: LD_INT 31
66709: PUSH
66710: LD_INT 32
66712: PUSH
66713: LD_INT 33
66715: PUSH
66716: LD_INT 34
66718: PUSH
66719: LD_INT 36
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 101
66760: PUSH
66761: LD_INT 102
66763: PUSH
66764: LD_INT 103
66766: PUSH
66767: LD_INT 104
66769: PUSH
66770: LD_INT 105
66772: PUSH
66773: LD_INT 106
66775: PUSH
66776: LD_INT 107
66778: PUSH
66779: LD_INT 108
66781: PUSH
66782: LD_INT 109
66784: PUSH
66785: LD_INT 110
66787: PUSH
66788: LD_INT 111
66790: PUSH
66791: LD_INT 112
66793: PUSH
66794: LD_INT 113
66796: PUSH
66797: LD_INT 114
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: ST_TO_ADDR
66820: GO 68191
66822: LD_INT 13
66824: DOUBLE
66825: EQUAL
66826: IFTRUE 66830
66828: GO 67026
66830: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
66831: LD_ADDR_VAR 0 1
66835: PUSH
66836: LD_INT 1
66838: PUSH
66839: LD_INT 2
66841: PUSH
66842: LD_INT 3
66844: PUSH
66845: LD_INT 4
66847: PUSH
66848: LD_INT 5
66850: PUSH
66851: LD_INT 8
66853: PUSH
66854: LD_INT 9
66856: PUSH
66857: LD_INT 10
66859: PUSH
66860: LD_INT 11
66862: PUSH
66863: LD_INT 12
66865: PUSH
66866: LD_INT 14
66868: PUSH
66869: LD_INT 15
66871: PUSH
66872: LD_INT 16
66874: PUSH
66875: LD_INT 17
66877: PUSH
66878: LD_INT 18
66880: PUSH
66881: LD_INT 19
66883: PUSH
66884: LD_INT 20
66886: PUSH
66887: LD_INT 21
66889: PUSH
66890: LD_INT 22
66892: PUSH
66893: LD_INT 23
66895: PUSH
66896: LD_INT 24
66898: PUSH
66899: LD_INT 25
66901: PUSH
66902: LD_INT 26
66904: PUSH
66905: LD_INT 27
66907: PUSH
66908: LD_INT 28
66910: PUSH
66911: LD_INT 30
66913: PUSH
66914: LD_INT 31
66916: PUSH
66917: LD_INT 32
66919: PUSH
66920: LD_INT 33
66922: PUSH
66923: LD_INT 34
66925: PUSH
66926: LD_INT 36
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 101
66964: PUSH
66965: LD_INT 102
66967: PUSH
66968: LD_INT 103
66970: PUSH
66971: LD_INT 104
66973: PUSH
66974: LD_INT 105
66976: PUSH
66977: LD_INT 106
66979: PUSH
66980: LD_INT 107
66982: PUSH
66983: LD_INT 108
66985: PUSH
66986: LD_INT 109
66988: PUSH
66989: LD_INT 110
66991: PUSH
66992: LD_INT 111
66994: PUSH
66995: LD_INT 112
66997: PUSH
66998: LD_INT 113
67000: PUSH
67001: LD_INT 114
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: LIST
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: ST_TO_ADDR
67024: GO 68191
67026: LD_INT 14
67028: DOUBLE
67029: EQUAL
67030: IFTRUE 67034
67032: GO 67246
67034: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
67035: LD_ADDR_VAR 0 1
67039: PUSH
67040: LD_INT 1
67042: PUSH
67043: LD_INT 2
67045: PUSH
67046: LD_INT 3
67048: PUSH
67049: LD_INT 4
67051: PUSH
67052: LD_INT 5
67054: PUSH
67055: LD_INT 6
67057: PUSH
67058: LD_INT 7
67060: PUSH
67061: LD_INT 8
67063: PUSH
67064: LD_INT 9
67066: PUSH
67067: LD_INT 10
67069: PUSH
67070: LD_INT 11
67072: PUSH
67073: LD_INT 12
67075: PUSH
67076: LD_INT 13
67078: PUSH
67079: LD_INT 14
67081: PUSH
67082: LD_INT 15
67084: PUSH
67085: LD_INT 16
67087: PUSH
67088: LD_INT 17
67090: PUSH
67091: LD_INT 18
67093: PUSH
67094: LD_INT 19
67096: PUSH
67097: LD_INT 20
67099: PUSH
67100: LD_INT 21
67102: PUSH
67103: LD_INT 22
67105: PUSH
67106: LD_INT 23
67108: PUSH
67109: LD_INT 24
67111: PUSH
67112: LD_INT 25
67114: PUSH
67115: LD_INT 26
67117: PUSH
67118: LD_INT 27
67120: PUSH
67121: LD_INT 28
67123: PUSH
67124: LD_INT 29
67126: PUSH
67127: LD_INT 30
67129: PUSH
67130: LD_INT 31
67132: PUSH
67133: LD_INT 32
67135: PUSH
67136: LD_INT 33
67138: PUSH
67139: LD_INT 34
67141: PUSH
67142: LD_INT 36
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: LIST
67149: LIST
67150: LIST
67151: LIST
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 101
67184: PUSH
67185: LD_INT 102
67187: PUSH
67188: LD_INT 103
67190: PUSH
67191: LD_INT 104
67193: PUSH
67194: LD_INT 105
67196: PUSH
67197: LD_INT 106
67199: PUSH
67200: LD_INT 107
67202: PUSH
67203: LD_INT 108
67205: PUSH
67206: LD_INT 109
67208: PUSH
67209: LD_INT 110
67211: PUSH
67212: LD_INT 111
67214: PUSH
67215: LD_INT 112
67217: PUSH
67218: LD_INT 113
67220: PUSH
67221: LD_INT 114
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: LIST
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: ST_TO_ADDR
67244: GO 68191
67246: LD_INT 15
67248: DOUBLE
67249: EQUAL
67250: IFTRUE 67254
67252: GO 67466
67254: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
67255: LD_ADDR_VAR 0 1
67259: PUSH
67260: LD_INT 1
67262: PUSH
67263: LD_INT 2
67265: PUSH
67266: LD_INT 3
67268: PUSH
67269: LD_INT 4
67271: PUSH
67272: LD_INT 5
67274: PUSH
67275: LD_INT 6
67277: PUSH
67278: LD_INT 7
67280: PUSH
67281: LD_INT 8
67283: PUSH
67284: LD_INT 9
67286: PUSH
67287: LD_INT 10
67289: PUSH
67290: LD_INT 11
67292: PUSH
67293: LD_INT 12
67295: PUSH
67296: LD_INT 13
67298: PUSH
67299: LD_INT 14
67301: PUSH
67302: LD_INT 15
67304: PUSH
67305: LD_INT 16
67307: PUSH
67308: LD_INT 17
67310: PUSH
67311: LD_INT 18
67313: PUSH
67314: LD_INT 19
67316: PUSH
67317: LD_INT 20
67319: PUSH
67320: LD_INT 21
67322: PUSH
67323: LD_INT 22
67325: PUSH
67326: LD_INT 23
67328: PUSH
67329: LD_INT 24
67331: PUSH
67332: LD_INT 25
67334: PUSH
67335: LD_INT 26
67337: PUSH
67338: LD_INT 27
67340: PUSH
67341: LD_INT 28
67343: PUSH
67344: LD_INT 29
67346: PUSH
67347: LD_INT 30
67349: PUSH
67350: LD_INT 31
67352: PUSH
67353: LD_INT 32
67355: PUSH
67356: LD_INT 33
67358: PUSH
67359: LD_INT 34
67361: PUSH
67362: LD_INT 36
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: LIST
67369: LIST
67370: LIST
67371: LIST
67372: LIST
67373: LIST
67374: LIST
67375: LIST
67376: LIST
67377: LIST
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: LIST
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 101
67404: PUSH
67405: LD_INT 102
67407: PUSH
67408: LD_INT 103
67410: PUSH
67411: LD_INT 104
67413: PUSH
67414: LD_INT 105
67416: PUSH
67417: LD_INT 106
67419: PUSH
67420: LD_INT 107
67422: PUSH
67423: LD_INT 108
67425: PUSH
67426: LD_INT 109
67428: PUSH
67429: LD_INT 110
67431: PUSH
67432: LD_INT 111
67434: PUSH
67435: LD_INT 112
67437: PUSH
67438: LD_INT 113
67440: PUSH
67441: LD_INT 114
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: LIST
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: ST_TO_ADDR
67464: GO 68191
67466: LD_INT 16
67468: DOUBLE
67469: EQUAL
67470: IFTRUE 67474
67472: GO 67598
67474: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
67475: LD_ADDR_VAR 0 1
67479: PUSH
67480: LD_INT 2
67482: PUSH
67483: LD_INT 4
67485: PUSH
67486: LD_INT 5
67488: PUSH
67489: LD_INT 7
67491: PUSH
67492: LD_INT 11
67494: PUSH
67495: LD_INT 12
67497: PUSH
67498: LD_INT 15
67500: PUSH
67501: LD_INT 16
67503: PUSH
67504: LD_INT 20
67506: PUSH
67507: LD_INT 21
67509: PUSH
67510: LD_INT 22
67512: PUSH
67513: LD_INT 23
67515: PUSH
67516: LD_INT 25
67518: PUSH
67519: LD_INT 26
67521: PUSH
67522: LD_INT 30
67524: PUSH
67525: LD_INT 31
67527: PUSH
67528: LD_INT 32
67530: PUSH
67531: LD_INT 33
67533: PUSH
67534: LD_INT 34
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: LIST
67556: LIST
67557: PUSH
67558: LD_INT 101
67560: PUSH
67561: LD_INT 102
67563: PUSH
67564: LD_INT 103
67566: PUSH
67567: LD_INT 106
67569: PUSH
67570: LD_INT 108
67572: PUSH
67573: LD_INT 112
67575: PUSH
67576: LD_INT 113
67578: PUSH
67579: LD_INT 114
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: LIST
67586: LIST
67587: LIST
67588: LIST
67589: LIST
67590: LIST
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: ST_TO_ADDR
67596: GO 68191
67598: LD_INT 17
67600: DOUBLE
67601: EQUAL
67602: IFTRUE 67606
67604: GO 67818
67606: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
67607: LD_ADDR_VAR 0 1
67611: PUSH
67612: LD_INT 1
67614: PUSH
67615: LD_INT 2
67617: PUSH
67618: LD_INT 3
67620: PUSH
67621: LD_INT 4
67623: PUSH
67624: LD_INT 5
67626: PUSH
67627: LD_INT 6
67629: PUSH
67630: LD_INT 7
67632: PUSH
67633: LD_INT 8
67635: PUSH
67636: LD_INT 9
67638: PUSH
67639: LD_INT 10
67641: PUSH
67642: LD_INT 11
67644: PUSH
67645: LD_INT 12
67647: PUSH
67648: LD_INT 13
67650: PUSH
67651: LD_INT 14
67653: PUSH
67654: LD_INT 15
67656: PUSH
67657: LD_INT 16
67659: PUSH
67660: LD_INT 17
67662: PUSH
67663: LD_INT 18
67665: PUSH
67666: LD_INT 19
67668: PUSH
67669: LD_INT 20
67671: PUSH
67672: LD_INT 21
67674: PUSH
67675: LD_INT 22
67677: PUSH
67678: LD_INT 23
67680: PUSH
67681: LD_INT 24
67683: PUSH
67684: LD_INT 25
67686: PUSH
67687: LD_INT 26
67689: PUSH
67690: LD_INT 27
67692: PUSH
67693: LD_INT 28
67695: PUSH
67696: LD_INT 29
67698: PUSH
67699: LD_INT 30
67701: PUSH
67702: LD_INT 31
67704: PUSH
67705: LD_INT 32
67707: PUSH
67708: LD_INT 33
67710: PUSH
67711: LD_INT 34
67713: PUSH
67714: LD_INT 36
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: LIST
67753: PUSH
67754: LD_INT 101
67756: PUSH
67757: LD_INT 102
67759: PUSH
67760: LD_INT 103
67762: PUSH
67763: LD_INT 104
67765: PUSH
67766: LD_INT 105
67768: PUSH
67769: LD_INT 106
67771: PUSH
67772: LD_INT 107
67774: PUSH
67775: LD_INT 108
67777: PUSH
67778: LD_INT 109
67780: PUSH
67781: LD_INT 110
67783: PUSH
67784: LD_INT 111
67786: PUSH
67787: LD_INT 112
67789: PUSH
67790: LD_INT 113
67792: PUSH
67793: LD_INT 114
67795: PUSH
67796: EMPTY
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: LIST
67802: LIST
67803: LIST
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: LIST
67810: LIST
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: ST_TO_ADDR
67816: GO 68191
67818: LD_INT 18
67820: DOUBLE
67821: EQUAL
67822: IFTRUE 67826
67824: GO 67962
67826: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
67827: LD_ADDR_VAR 0 1
67831: PUSH
67832: LD_INT 2
67834: PUSH
67835: LD_INT 4
67837: PUSH
67838: LD_INT 5
67840: PUSH
67841: LD_INT 7
67843: PUSH
67844: LD_INT 11
67846: PUSH
67847: LD_INT 12
67849: PUSH
67850: LD_INT 15
67852: PUSH
67853: LD_INT 16
67855: PUSH
67856: LD_INT 20
67858: PUSH
67859: LD_INT 21
67861: PUSH
67862: LD_INT 22
67864: PUSH
67865: LD_INT 23
67867: PUSH
67868: LD_INT 25
67870: PUSH
67871: LD_INT 26
67873: PUSH
67874: LD_INT 30
67876: PUSH
67877: LD_INT 31
67879: PUSH
67880: LD_INT 32
67882: PUSH
67883: LD_INT 33
67885: PUSH
67886: LD_INT 34
67888: PUSH
67889: LD_INT 35
67891: PUSH
67892: LD_INT 36
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 101
67920: PUSH
67921: LD_INT 102
67923: PUSH
67924: LD_INT 103
67926: PUSH
67927: LD_INT 106
67929: PUSH
67930: LD_INT 108
67932: PUSH
67933: LD_INT 112
67935: PUSH
67936: LD_INT 113
67938: PUSH
67939: LD_INT 114
67941: PUSH
67942: LD_INT 115
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: LIST
67954: LIST
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: ST_TO_ADDR
67960: GO 68191
67962: LD_INT 19
67964: DOUBLE
67965: EQUAL
67966: IFTRUE 67970
67968: GO 68190
67970: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
67971: LD_ADDR_VAR 0 1
67975: PUSH
67976: LD_INT 1
67978: PUSH
67979: LD_INT 2
67981: PUSH
67982: LD_INT 3
67984: PUSH
67985: LD_INT 4
67987: PUSH
67988: LD_INT 5
67990: PUSH
67991: LD_INT 6
67993: PUSH
67994: LD_INT 7
67996: PUSH
67997: LD_INT 8
67999: PUSH
68000: LD_INT 9
68002: PUSH
68003: LD_INT 10
68005: PUSH
68006: LD_INT 11
68008: PUSH
68009: LD_INT 12
68011: PUSH
68012: LD_INT 13
68014: PUSH
68015: LD_INT 14
68017: PUSH
68018: LD_INT 15
68020: PUSH
68021: LD_INT 16
68023: PUSH
68024: LD_INT 17
68026: PUSH
68027: LD_INT 18
68029: PUSH
68030: LD_INT 19
68032: PUSH
68033: LD_INT 20
68035: PUSH
68036: LD_INT 21
68038: PUSH
68039: LD_INT 22
68041: PUSH
68042: LD_INT 23
68044: PUSH
68045: LD_INT 24
68047: PUSH
68048: LD_INT 25
68050: PUSH
68051: LD_INT 26
68053: PUSH
68054: LD_INT 27
68056: PUSH
68057: LD_INT 28
68059: PUSH
68060: LD_INT 29
68062: PUSH
68063: LD_INT 30
68065: PUSH
68066: LD_INT 31
68068: PUSH
68069: LD_INT 32
68071: PUSH
68072: LD_INT 33
68074: PUSH
68075: LD_INT 34
68077: PUSH
68078: LD_INT 35
68080: PUSH
68081: LD_INT 36
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: PUSH
68122: LD_INT 101
68124: PUSH
68125: LD_INT 102
68127: PUSH
68128: LD_INT 103
68130: PUSH
68131: LD_INT 104
68133: PUSH
68134: LD_INT 105
68136: PUSH
68137: LD_INT 106
68139: PUSH
68140: LD_INT 107
68142: PUSH
68143: LD_INT 108
68145: PUSH
68146: LD_INT 109
68148: PUSH
68149: LD_INT 110
68151: PUSH
68152: LD_INT 111
68154: PUSH
68155: LD_INT 112
68157: PUSH
68158: LD_INT 113
68160: PUSH
68161: LD_INT 114
68163: PUSH
68164: LD_INT 115
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: LIST
68171: LIST
68172: LIST
68173: LIST
68174: LIST
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: LIST
68180: LIST
68181: LIST
68182: LIST
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: ST_TO_ADDR
68188: GO 68191
68190: POP
// end else
68191: GO 68410
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
68193: LD_ADDR_VAR 0 1
68197: PUSH
68198: LD_INT 1
68200: PUSH
68201: LD_INT 2
68203: PUSH
68204: LD_INT 3
68206: PUSH
68207: LD_INT 4
68209: PUSH
68210: LD_INT 5
68212: PUSH
68213: LD_INT 6
68215: PUSH
68216: LD_INT 7
68218: PUSH
68219: LD_INT 8
68221: PUSH
68222: LD_INT 9
68224: PUSH
68225: LD_INT 10
68227: PUSH
68228: LD_INT 11
68230: PUSH
68231: LD_INT 12
68233: PUSH
68234: LD_INT 13
68236: PUSH
68237: LD_INT 14
68239: PUSH
68240: LD_INT 15
68242: PUSH
68243: LD_INT 16
68245: PUSH
68246: LD_INT 17
68248: PUSH
68249: LD_INT 18
68251: PUSH
68252: LD_INT 19
68254: PUSH
68255: LD_INT 20
68257: PUSH
68258: LD_INT 21
68260: PUSH
68261: LD_INT 22
68263: PUSH
68264: LD_INT 23
68266: PUSH
68267: LD_INT 24
68269: PUSH
68270: LD_INT 25
68272: PUSH
68273: LD_INT 26
68275: PUSH
68276: LD_INT 27
68278: PUSH
68279: LD_INT 28
68281: PUSH
68282: LD_INT 29
68284: PUSH
68285: LD_INT 30
68287: PUSH
68288: LD_INT 31
68290: PUSH
68291: LD_INT 32
68293: PUSH
68294: LD_INT 33
68296: PUSH
68297: LD_INT 34
68299: PUSH
68300: LD_INT 35
68302: PUSH
68303: LD_INT 36
68305: PUSH
68306: EMPTY
68307: LIST
68308: LIST
68309: LIST
68310: LIST
68311: LIST
68312: LIST
68313: LIST
68314: LIST
68315: LIST
68316: LIST
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: LIST
68322: LIST
68323: LIST
68324: LIST
68325: LIST
68326: LIST
68327: LIST
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: PUSH
68344: LD_INT 101
68346: PUSH
68347: LD_INT 102
68349: PUSH
68350: LD_INT 103
68352: PUSH
68353: LD_INT 104
68355: PUSH
68356: LD_INT 105
68358: PUSH
68359: LD_INT 106
68361: PUSH
68362: LD_INT 107
68364: PUSH
68365: LD_INT 108
68367: PUSH
68368: LD_INT 109
68370: PUSH
68371: LD_INT 110
68373: PUSH
68374: LD_INT 111
68376: PUSH
68377: LD_INT 112
68379: PUSH
68380: LD_INT 113
68382: PUSH
68383: LD_INT 114
68385: PUSH
68386: LD_INT 115
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: LIST
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: ST_TO_ADDR
// if result then
68410: LD_VAR 0 1
68414: IFFALSE 68703
// begin normal :=  ;
68416: LD_ADDR_VAR 0 3
68420: PUSH
68421: LD_STRING 
68423: ST_TO_ADDR
// hardcore :=  ;
68424: LD_ADDR_VAR 0 4
68428: PUSH
68429: LD_STRING 
68431: ST_TO_ADDR
// for i = 1 to normalCounter do
68432: LD_ADDR_VAR 0 5
68436: PUSH
68437: DOUBLE
68438: LD_INT 1
68440: DEC
68441: ST_TO_ADDR
68442: LD_EXP 78
68446: PUSH
68447: FOR_TO
68448: IFFALSE 68549
// begin tmp := 0 ;
68450: LD_ADDR_VAR 0 2
68454: PUSH
68455: LD_STRING 0
68457: ST_TO_ADDR
// if result [ 1 ] then
68458: LD_VAR 0 1
68462: PUSH
68463: LD_INT 1
68465: ARRAY
68466: IFFALSE 68531
// if result [ 1 ] [ 1 ] = i then
68468: LD_VAR 0 1
68472: PUSH
68473: LD_INT 1
68475: ARRAY
68476: PUSH
68477: LD_INT 1
68479: ARRAY
68480: PUSH
68481: LD_VAR 0 5
68485: EQUAL
68486: IFFALSE 68531
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
68488: LD_ADDR_VAR 0 1
68492: PUSH
68493: LD_VAR 0 1
68497: PPUSH
68498: LD_INT 1
68500: PPUSH
68501: LD_VAR 0 1
68505: PUSH
68506: LD_INT 1
68508: ARRAY
68509: PPUSH
68510: LD_INT 1
68512: PPUSH
68513: CALL_OW 3
68517: PPUSH
68518: CALL_OW 1
68522: ST_TO_ADDR
// tmp := 1 ;
68523: LD_ADDR_VAR 0 2
68527: PUSH
68528: LD_STRING 1
68530: ST_TO_ADDR
// end ; normal := normal & tmp ;
68531: LD_ADDR_VAR 0 3
68535: PUSH
68536: LD_VAR 0 3
68540: PUSH
68541: LD_VAR 0 2
68545: STR
68546: ST_TO_ADDR
// end ;
68547: GO 68447
68549: POP
68550: POP
// for i = 1 to hardcoreCounter do
68551: LD_ADDR_VAR 0 5
68555: PUSH
68556: DOUBLE
68557: LD_INT 1
68559: DEC
68560: ST_TO_ADDR
68561: LD_EXP 79
68565: PUSH
68566: FOR_TO
68567: IFFALSE 68672
// begin tmp := 0 ;
68569: LD_ADDR_VAR 0 2
68573: PUSH
68574: LD_STRING 0
68576: ST_TO_ADDR
// if result [ 2 ] then
68577: LD_VAR 0 1
68581: PUSH
68582: LD_INT 2
68584: ARRAY
68585: IFFALSE 68654
// if result [ 2 ] [ 1 ] = 100 + i then
68587: LD_VAR 0 1
68591: PUSH
68592: LD_INT 2
68594: ARRAY
68595: PUSH
68596: LD_INT 1
68598: ARRAY
68599: PUSH
68600: LD_INT 100
68602: PUSH
68603: LD_VAR 0 5
68607: PLUS
68608: EQUAL
68609: IFFALSE 68654
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
68611: LD_ADDR_VAR 0 1
68615: PUSH
68616: LD_VAR 0 1
68620: PPUSH
68621: LD_INT 2
68623: PPUSH
68624: LD_VAR 0 1
68628: PUSH
68629: LD_INT 2
68631: ARRAY
68632: PPUSH
68633: LD_INT 1
68635: PPUSH
68636: CALL_OW 3
68640: PPUSH
68641: CALL_OW 1
68645: ST_TO_ADDR
// tmp := 1 ;
68646: LD_ADDR_VAR 0 2
68650: PUSH
68651: LD_STRING 1
68653: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
68654: LD_ADDR_VAR 0 4
68658: PUSH
68659: LD_VAR 0 4
68663: PUSH
68664: LD_VAR 0 2
68668: STR
68669: ST_TO_ADDR
// end ;
68670: GO 68566
68672: POP
68673: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
68674: LD_STRING getStreamItemsFromMission("
68676: PUSH
68677: LD_VAR 0 3
68681: STR
68682: PUSH
68683: LD_STRING ","
68685: STR
68686: PUSH
68687: LD_VAR 0 4
68691: STR
68692: PUSH
68693: LD_STRING ")
68695: STR
68696: PPUSH
68697: CALL_OW 559
// end else
68701: GO 68710
// ToLua ( getStreamItemsFromMission("","") ) ;
68703: LD_STRING getStreamItemsFromMission("","")
68705: PPUSH
68706: CALL_OW 559
// end ;
68710: LD_VAR 0 1
68714: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
68715: LD_EXP 77
68719: PUSH
68720: LD_EXP 82
68724: AND
68725: IFFALSE 68849
68727: GO 68729
68729: DISABLE
68730: LD_INT 0
68732: PPUSH
68733: PPUSH
// begin enable ;
68734: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
68735: LD_ADDR_VAR 0 2
68739: PUSH
68740: LD_INT 22
68742: PUSH
68743: LD_OWVAR 2
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 2
68754: PUSH
68755: LD_INT 34
68757: PUSH
68758: LD_INT 7
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: LD_INT 34
68767: PUSH
68768: LD_INT 45
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 34
68777: PUSH
68778: LD_INT 28
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: PUSH
68785: LD_INT 34
68787: PUSH
68788: LD_INT 47
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PPUSH
68806: CALL_OW 69
68810: ST_TO_ADDR
// if not tmp then
68811: LD_VAR 0 2
68815: NOT
68816: IFFALSE 68820
// exit ;
68818: GO 68849
// for i in tmp do
68820: LD_ADDR_VAR 0 1
68824: PUSH
68825: LD_VAR 0 2
68829: PUSH
68830: FOR_IN
68831: IFFALSE 68847
// begin SetLives ( i , 0 ) ;
68833: LD_VAR 0 1
68837: PPUSH
68838: LD_INT 0
68840: PPUSH
68841: CALL_OW 234
// end ;
68845: GO 68830
68847: POP
68848: POP
// end ;
68849: PPOPN 2
68851: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
68852: LD_EXP 77
68856: PUSH
68857: LD_EXP 83
68861: AND
68862: IFFALSE 68946
68864: GO 68866
68866: DISABLE
68867: LD_INT 0
68869: PPUSH
68870: PPUSH
// begin enable ;
68871: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
68872: LD_ADDR_VAR 0 2
68876: PUSH
68877: LD_INT 22
68879: PUSH
68880: LD_OWVAR 2
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 32
68891: PUSH
68892: LD_INT 3
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: PPUSH
68903: CALL_OW 69
68907: ST_TO_ADDR
// if not tmp then
68908: LD_VAR 0 2
68912: NOT
68913: IFFALSE 68917
// exit ;
68915: GO 68946
// for i in tmp do
68917: LD_ADDR_VAR 0 1
68921: PUSH
68922: LD_VAR 0 2
68926: PUSH
68927: FOR_IN
68928: IFFALSE 68944
// begin SetLives ( i , 0 ) ;
68930: LD_VAR 0 1
68934: PPUSH
68935: LD_INT 0
68937: PPUSH
68938: CALL_OW 234
// end ;
68942: GO 68927
68944: POP
68945: POP
// end ;
68946: PPOPN 2
68948: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
68949: LD_EXP 77
68953: PUSH
68954: LD_EXP 80
68958: AND
68959: IFFALSE 69052
68961: GO 68963
68963: DISABLE
68964: LD_INT 0
68966: PPUSH
// begin enable ;
68967: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
68968: LD_ADDR_VAR 0 1
68972: PUSH
68973: LD_INT 22
68975: PUSH
68976: LD_OWVAR 2
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PUSH
68985: LD_INT 2
68987: PUSH
68988: LD_INT 25
68990: PUSH
68991: LD_INT 5
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: LD_INT 25
69000: PUSH
69001: LD_INT 9
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: LD_INT 25
69010: PUSH
69011: LD_INT 8
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PPUSH
69028: CALL_OW 69
69032: PUSH
69033: FOR_IN
69034: IFFALSE 69050
// begin SetClass ( i , 1 ) ;
69036: LD_VAR 0 1
69040: PPUSH
69041: LD_INT 1
69043: PPUSH
69044: CALL_OW 336
// end ;
69048: GO 69033
69050: POP
69051: POP
// end ;
69052: PPOPN 1
69054: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
69055: LD_EXP 77
69059: PUSH
69060: LD_EXP 81
69064: AND
69065: PUSH
69066: LD_OWVAR 65
69070: PUSH
69071: LD_INT 7
69073: LESS
69074: AND
69075: IFFALSE 69089
69077: GO 69079
69079: DISABLE
// begin enable ;
69080: ENABLE
// game_speed := 7 ;
69081: LD_ADDR_OWVAR 65
69085: PUSH
69086: LD_INT 7
69088: ST_TO_ADDR
// end ;
69089: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
69090: LD_EXP 77
69094: PUSH
69095: LD_EXP 84
69099: AND
69100: IFFALSE 69302
69102: GO 69104
69104: DISABLE
69105: LD_INT 0
69107: PPUSH
69108: PPUSH
69109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
69110: LD_ADDR_VAR 0 3
69114: PUSH
69115: LD_INT 81
69117: PUSH
69118: LD_OWVAR 2
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 21
69129: PUSH
69130: LD_INT 1
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PPUSH
69141: CALL_OW 69
69145: ST_TO_ADDR
// if not tmp then
69146: LD_VAR 0 3
69150: NOT
69151: IFFALSE 69155
// exit ;
69153: GO 69302
// if tmp > 5 then
69155: LD_VAR 0 3
69159: PUSH
69160: LD_INT 5
69162: GREATER
69163: IFFALSE 69175
// k := 5 else
69165: LD_ADDR_VAR 0 2
69169: PUSH
69170: LD_INT 5
69172: ST_TO_ADDR
69173: GO 69185
// k := tmp ;
69175: LD_ADDR_VAR 0 2
69179: PUSH
69180: LD_VAR 0 3
69184: ST_TO_ADDR
// for i := 1 to k do
69185: LD_ADDR_VAR 0 1
69189: PUSH
69190: DOUBLE
69191: LD_INT 1
69193: DEC
69194: ST_TO_ADDR
69195: LD_VAR 0 2
69199: PUSH
69200: FOR_TO
69201: IFFALSE 69300
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
69203: LD_VAR 0 3
69207: PUSH
69208: LD_VAR 0 1
69212: ARRAY
69213: PPUSH
69214: LD_VAR 0 1
69218: PUSH
69219: LD_INT 4
69221: MOD
69222: PUSH
69223: LD_INT 1
69225: PLUS
69226: PPUSH
69227: CALL_OW 259
69231: PUSH
69232: LD_INT 10
69234: LESS
69235: IFFALSE 69298
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
69237: LD_VAR 0 3
69241: PUSH
69242: LD_VAR 0 1
69246: ARRAY
69247: PPUSH
69248: LD_VAR 0 1
69252: PUSH
69253: LD_INT 4
69255: MOD
69256: PUSH
69257: LD_INT 1
69259: PLUS
69260: PPUSH
69261: LD_VAR 0 3
69265: PUSH
69266: LD_VAR 0 1
69270: ARRAY
69271: PPUSH
69272: LD_VAR 0 1
69276: PUSH
69277: LD_INT 4
69279: MOD
69280: PUSH
69281: LD_INT 1
69283: PLUS
69284: PPUSH
69285: CALL_OW 259
69289: PUSH
69290: LD_INT 1
69292: PLUS
69293: PPUSH
69294: CALL_OW 237
69298: GO 69200
69300: POP
69301: POP
// end ;
69302: PPOPN 3
69304: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
69305: LD_EXP 77
69309: PUSH
69310: LD_EXP 85
69314: AND
69315: IFFALSE 69335
69317: GO 69319
69319: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
69320: LD_INT 4
69322: PPUSH
69323: LD_OWVAR 2
69327: PPUSH
69328: LD_INT 0
69330: PPUSH
69331: CALL_OW 324
69335: END
// every 0 0$1 trigger StreamModeActive and sShovel do
69336: LD_EXP 77
69340: PUSH
69341: LD_EXP 114
69345: AND
69346: IFFALSE 69366
69348: GO 69350
69350: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
69351: LD_INT 19
69353: PPUSH
69354: LD_OWVAR 2
69358: PPUSH
69359: LD_INT 0
69361: PPUSH
69362: CALL_OW 324
69366: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
69367: LD_EXP 77
69371: PUSH
69372: LD_EXP 86
69376: AND
69377: IFFALSE 69479
69379: GO 69381
69381: DISABLE
69382: LD_INT 0
69384: PPUSH
69385: PPUSH
// begin enable ;
69386: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
69387: LD_ADDR_VAR 0 2
69391: PUSH
69392: LD_INT 22
69394: PUSH
69395: LD_OWVAR 2
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 2
69406: PUSH
69407: LD_INT 34
69409: PUSH
69410: LD_INT 11
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 34
69419: PUSH
69420: LD_INT 30
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: LIST
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PPUSH
69436: CALL_OW 69
69440: ST_TO_ADDR
// if not tmp then
69441: LD_VAR 0 2
69445: NOT
69446: IFFALSE 69450
// exit ;
69448: GO 69479
// for i in tmp do
69450: LD_ADDR_VAR 0 1
69454: PUSH
69455: LD_VAR 0 2
69459: PUSH
69460: FOR_IN
69461: IFFALSE 69477
// begin SetLives ( i , 0 ) ;
69463: LD_VAR 0 1
69467: PPUSH
69468: LD_INT 0
69470: PPUSH
69471: CALL_OW 234
// end ;
69475: GO 69460
69477: POP
69478: POP
// end ;
69479: PPOPN 2
69481: END
// every 0 0$1 trigger StreamModeActive and sBunker do
69482: LD_EXP 77
69486: PUSH
69487: LD_EXP 87
69491: AND
69492: IFFALSE 69512
69494: GO 69496
69496: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
69497: LD_INT 32
69499: PPUSH
69500: LD_OWVAR 2
69504: PPUSH
69505: LD_INT 0
69507: PPUSH
69508: CALL_OW 324
69512: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
69513: LD_EXP 77
69517: PUSH
69518: LD_EXP 88
69522: AND
69523: IFFALSE 69704
69525: GO 69527
69527: DISABLE
69528: LD_INT 0
69530: PPUSH
69531: PPUSH
69532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
69533: LD_ADDR_VAR 0 2
69537: PUSH
69538: LD_INT 22
69540: PUSH
69541: LD_OWVAR 2
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: PUSH
69550: LD_INT 33
69552: PUSH
69553: LD_INT 3
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: PPUSH
69564: CALL_OW 69
69568: ST_TO_ADDR
// if not tmp then
69569: LD_VAR 0 2
69573: NOT
69574: IFFALSE 69578
// exit ;
69576: GO 69704
// side := 0 ;
69578: LD_ADDR_VAR 0 3
69582: PUSH
69583: LD_INT 0
69585: ST_TO_ADDR
// for i := 1 to 8 do
69586: LD_ADDR_VAR 0 1
69590: PUSH
69591: DOUBLE
69592: LD_INT 1
69594: DEC
69595: ST_TO_ADDR
69596: LD_INT 8
69598: PUSH
69599: FOR_TO
69600: IFFALSE 69648
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
69602: LD_OWVAR 2
69606: PUSH
69607: LD_VAR 0 1
69611: NONEQUAL
69612: PUSH
69613: LD_OWVAR 2
69617: PPUSH
69618: LD_VAR 0 1
69622: PPUSH
69623: CALL_OW 81
69627: PUSH
69628: LD_INT 2
69630: EQUAL
69631: AND
69632: IFFALSE 69646
// begin side := i ;
69634: LD_ADDR_VAR 0 3
69638: PUSH
69639: LD_VAR 0 1
69643: ST_TO_ADDR
// break ;
69644: GO 69648
// end ;
69646: GO 69599
69648: POP
69649: POP
// if not side then
69650: LD_VAR 0 3
69654: NOT
69655: IFFALSE 69659
// exit ;
69657: GO 69704
// for i := 1 to tmp do
69659: LD_ADDR_VAR 0 1
69663: PUSH
69664: DOUBLE
69665: LD_INT 1
69667: DEC
69668: ST_TO_ADDR
69669: LD_VAR 0 2
69673: PUSH
69674: FOR_TO
69675: IFFALSE 69702
// if Prob ( 60 ) then
69677: LD_INT 60
69679: PPUSH
69680: CALL_OW 13
69684: IFFALSE 69700
// SetSide ( i , side ) ;
69686: LD_VAR 0 1
69690: PPUSH
69691: LD_VAR 0 3
69695: PPUSH
69696: CALL_OW 235
69700: GO 69674
69702: POP
69703: POP
// end ;
69704: PPOPN 3
69706: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
69707: LD_EXP 77
69711: PUSH
69712: LD_EXP 90
69716: AND
69717: IFFALSE 69836
69719: GO 69721
69721: DISABLE
69722: LD_INT 0
69724: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
69725: LD_ADDR_VAR 0 1
69729: PUSH
69730: LD_INT 22
69732: PUSH
69733: LD_OWVAR 2
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: LD_INT 21
69744: PUSH
69745: LD_INT 1
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: PUSH
69752: LD_INT 3
69754: PUSH
69755: LD_INT 23
69757: PUSH
69758: LD_INT 0
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: LIST
69773: PPUSH
69774: CALL_OW 69
69778: PUSH
69779: FOR_IN
69780: IFFALSE 69834
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
69782: LD_VAR 0 1
69786: PPUSH
69787: CALL_OW 257
69791: PUSH
69792: LD_INT 1
69794: PUSH
69795: LD_INT 2
69797: PUSH
69798: LD_INT 3
69800: PUSH
69801: LD_INT 4
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: LIST
69808: LIST
69809: IN
69810: IFFALSE 69832
// SetClass ( un , rand ( 1 , 4 ) ) ;
69812: LD_VAR 0 1
69816: PPUSH
69817: LD_INT 1
69819: PPUSH
69820: LD_INT 4
69822: PPUSH
69823: CALL_OW 12
69827: PPUSH
69828: CALL_OW 336
69832: GO 69779
69834: POP
69835: POP
// end ;
69836: PPOPN 1
69838: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
69839: LD_EXP 77
69843: PUSH
69844: LD_EXP 89
69848: AND
69849: IFFALSE 69928
69851: GO 69853
69853: DISABLE
69854: LD_INT 0
69856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
69857: LD_ADDR_VAR 0 1
69861: PUSH
69862: LD_INT 22
69864: PUSH
69865: LD_OWVAR 2
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PUSH
69874: LD_INT 21
69876: PUSH
69877: LD_INT 3
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: PUSH
69884: EMPTY
69885: LIST
69886: LIST
69887: PPUSH
69888: CALL_OW 69
69892: ST_TO_ADDR
// if not tmp then
69893: LD_VAR 0 1
69897: NOT
69898: IFFALSE 69902
// exit ;
69900: GO 69928
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
69902: LD_VAR 0 1
69906: PUSH
69907: LD_INT 1
69909: PPUSH
69910: LD_VAR 0 1
69914: PPUSH
69915: CALL_OW 12
69919: ARRAY
69920: PPUSH
69921: LD_INT 100
69923: PPUSH
69924: CALL_OW 234
// end ;
69928: PPOPN 1
69930: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
69931: LD_EXP 77
69935: PUSH
69936: LD_EXP 91
69940: AND
69941: IFFALSE 70039
69943: GO 69945
69945: DISABLE
69946: LD_INT 0
69948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
69949: LD_ADDR_VAR 0 1
69953: PUSH
69954: LD_INT 22
69956: PUSH
69957: LD_OWVAR 2
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: PUSH
69966: LD_INT 21
69968: PUSH
69969: LD_INT 1
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PPUSH
69980: CALL_OW 69
69984: ST_TO_ADDR
// if not tmp then
69985: LD_VAR 0 1
69989: NOT
69990: IFFALSE 69994
// exit ;
69992: GO 70039
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
69994: LD_VAR 0 1
69998: PUSH
69999: LD_INT 1
70001: PPUSH
70002: LD_VAR 0 1
70006: PPUSH
70007: CALL_OW 12
70011: ARRAY
70012: PPUSH
70013: LD_INT 1
70015: PPUSH
70016: LD_INT 4
70018: PPUSH
70019: CALL_OW 12
70023: PPUSH
70024: LD_INT 3000
70026: PPUSH
70027: LD_INT 9000
70029: PPUSH
70030: CALL_OW 12
70034: PPUSH
70035: CALL_OW 492
// end ;
70039: PPOPN 1
70041: END
// every 0 0$1 trigger StreamModeActive and sDepot do
70042: LD_EXP 77
70046: PUSH
70047: LD_EXP 92
70051: AND
70052: IFFALSE 70072
70054: GO 70056
70056: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
70057: LD_INT 1
70059: PPUSH
70060: LD_OWVAR 2
70064: PPUSH
70065: LD_INT 0
70067: PPUSH
70068: CALL_OW 324
70072: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
70073: LD_EXP 77
70077: PUSH
70078: LD_EXP 93
70082: AND
70083: IFFALSE 70166
70085: GO 70087
70087: DISABLE
70088: LD_INT 0
70090: PPUSH
70091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
70092: LD_ADDR_VAR 0 2
70096: PUSH
70097: LD_INT 22
70099: PUSH
70100: LD_OWVAR 2
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: LD_INT 21
70111: PUSH
70112: LD_INT 3
70114: PUSH
70115: EMPTY
70116: LIST
70117: LIST
70118: PUSH
70119: EMPTY
70120: LIST
70121: LIST
70122: PPUSH
70123: CALL_OW 69
70127: ST_TO_ADDR
// if not tmp then
70128: LD_VAR 0 2
70132: NOT
70133: IFFALSE 70137
// exit ;
70135: GO 70166
// for i in tmp do
70137: LD_ADDR_VAR 0 1
70141: PUSH
70142: LD_VAR 0 2
70146: PUSH
70147: FOR_IN
70148: IFFALSE 70164
// SetBLevel ( i , 10 ) ;
70150: LD_VAR 0 1
70154: PPUSH
70155: LD_INT 10
70157: PPUSH
70158: CALL_OW 241
70162: GO 70147
70164: POP
70165: POP
// end ;
70166: PPOPN 2
70168: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
70169: LD_EXP 77
70173: PUSH
70174: LD_EXP 94
70178: AND
70179: IFFALSE 70290
70181: GO 70183
70183: DISABLE
70184: LD_INT 0
70186: PPUSH
70187: PPUSH
70188: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70189: LD_ADDR_VAR 0 3
70193: PUSH
70194: LD_INT 22
70196: PUSH
70197: LD_OWVAR 2
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: PUSH
70206: LD_INT 25
70208: PUSH
70209: LD_INT 1
70211: PUSH
70212: EMPTY
70213: LIST
70214: LIST
70215: PUSH
70216: EMPTY
70217: LIST
70218: LIST
70219: PPUSH
70220: CALL_OW 69
70224: ST_TO_ADDR
// if not tmp then
70225: LD_VAR 0 3
70229: NOT
70230: IFFALSE 70234
// exit ;
70232: GO 70290
// un := tmp [ rand ( 1 , tmp ) ] ;
70234: LD_ADDR_VAR 0 2
70238: PUSH
70239: LD_VAR 0 3
70243: PUSH
70244: LD_INT 1
70246: PPUSH
70247: LD_VAR 0 3
70251: PPUSH
70252: CALL_OW 12
70256: ARRAY
70257: ST_TO_ADDR
// if Crawls ( un ) then
70258: LD_VAR 0 2
70262: PPUSH
70263: CALL_OW 318
70267: IFFALSE 70278
// ComWalk ( un ) ;
70269: LD_VAR 0 2
70273: PPUSH
70274: CALL_OW 138
// SetClass ( un , class_sniper ) ;
70278: LD_VAR 0 2
70282: PPUSH
70283: LD_INT 5
70285: PPUSH
70286: CALL_OW 336
// end ;
70290: PPOPN 3
70292: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
70293: LD_EXP 77
70297: PUSH
70298: LD_EXP 95
70302: AND
70303: PUSH
70304: LD_OWVAR 67
70308: PUSH
70309: LD_INT 3
70311: LESS
70312: AND
70313: IFFALSE 70332
70315: GO 70317
70317: DISABLE
// Difficulty := Difficulty + 1 ;
70318: LD_ADDR_OWVAR 67
70322: PUSH
70323: LD_OWVAR 67
70327: PUSH
70328: LD_INT 1
70330: PLUS
70331: ST_TO_ADDR
70332: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
70333: LD_EXP 77
70337: PUSH
70338: LD_EXP 96
70342: AND
70343: IFFALSE 70446
70345: GO 70347
70347: DISABLE
70348: LD_INT 0
70350: PPUSH
// begin for i := 1 to 5 do
70351: LD_ADDR_VAR 0 1
70355: PUSH
70356: DOUBLE
70357: LD_INT 1
70359: DEC
70360: ST_TO_ADDR
70361: LD_INT 5
70363: PUSH
70364: FOR_TO
70365: IFFALSE 70444
// begin uc_nation := nation_nature ;
70367: LD_ADDR_OWVAR 21
70371: PUSH
70372: LD_INT 0
70374: ST_TO_ADDR
// uc_side := 0 ;
70375: LD_ADDR_OWVAR 20
70379: PUSH
70380: LD_INT 0
70382: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
70383: LD_ADDR_OWVAR 29
70387: PUSH
70388: LD_INT 12
70390: PUSH
70391: LD_INT 12
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: ST_TO_ADDR
// hc_agressivity := 20 ;
70398: LD_ADDR_OWVAR 35
70402: PUSH
70403: LD_INT 20
70405: ST_TO_ADDR
// hc_class := class_tiger ;
70406: LD_ADDR_OWVAR 28
70410: PUSH
70411: LD_INT 14
70413: ST_TO_ADDR
// hc_gallery :=  ;
70414: LD_ADDR_OWVAR 33
70418: PUSH
70419: LD_STRING 
70421: ST_TO_ADDR
// hc_name :=  ;
70422: LD_ADDR_OWVAR 26
70426: PUSH
70427: LD_STRING 
70429: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
70430: CALL_OW 44
70434: PPUSH
70435: LD_INT 0
70437: PPUSH
70438: CALL_OW 51
// end ;
70442: GO 70364
70444: POP
70445: POP
// end ;
70446: PPOPN 1
70448: END
// every 0 0$1 trigger StreamModeActive and sBomb do
70449: LD_EXP 77
70453: PUSH
70454: LD_EXP 97
70458: AND
70459: IFFALSE 70468
70461: GO 70463
70463: DISABLE
// StreamSibBomb ;
70464: CALL 70469 0 0
70468: END
// export function StreamSibBomb ; var i , x , y ; begin
70469: LD_INT 0
70471: PPUSH
70472: PPUSH
70473: PPUSH
70474: PPUSH
// result := false ;
70475: LD_ADDR_VAR 0 1
70479: PUSH
70480: LD_INT 0
70482: ST_TO_ADDR
// for i := 1 to 16 do
70483: LD_ADDR_VAR 0 2
70487: PUSH
70488: DOUBLE
70489: LD_INT 1
70491: DEC
70492: ST_TO_ADDR
70493: LD_INT 16
70495: PUSH
70496: FOR_TO
70497: IFFALSE 70696
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
70499: LD_ADDR_VAR 0 3
70503: PUSH
70504: LD_INT 10
70506: PUSH
70507: LD_INT 20
70509: PUSH
70510: LD_INT 30
70512: PUSH
70513: LD_INT 40
70515: PUSH
70516: LD_INT 50
70518: PUSH
70519: LD_INT 60
70521: PUSH
70522: LD_INT 70
70524: PUSH
70525: LD_INT 80
70527: PUSH
70528: LD_INT 90
70530: PUSH
70531: LD_INT 100
70533: PUSH
70534: LD_INT 110
70536: PUSH
70537: LD_INT 120
70539: PUSH
70540: LD_INT 130
70542: PUSH
70543: LD_INT 140
70545: PUSH
70546: LD_INT 150
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: LIST
70553: LIST
70554: LIST
70555: LIST
70556: LIST
70557: LIST
70558: LIST
70559: LIST
70560: LIST
70561: LIST
70562: LIST
70563: LIST
70564: LIST
70565: PUSH
70566: LD_INT 1
70568: PPUSH
70569: LD_INT 15
70571: PPUSH
70572: CALL_OW 12
70576: ARRAY
70577: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
70578: LD_ADDR_VAR 0 4
70582: PUSH
70583: LD_INT 10
70585: PUSH
70586: LD_INT 20
70588: PUSH
70589: LD_INT 30
70591: PUSH
70592: LD_INT 40
70594: PUSH
70595: LD_INT 50
70597: PUSH
70598: LD_INT 60
70600: PUSH
70601: LD_INT 70
70603: PUSH
70604: LD_INT 80
70606: PUSH
70607: LD_INT 90
70609: PUSH
70610: LD_INT 100
70612: PUSH
70613: LD_INT 110
70615: PUSH
70616: LD_INT 120
70618: PUSH
70619: LD_INT 130
70621: PUSH
70622: LD_INT 140
70624: PUSH
70625: LD_INT 150
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: PUSH
70645: LD_INT 1
70647: PPUSH
70648: LD_INT 15
70650: PPUSH
70651: CALL_OW 12
70655: ARRAY
70656: ST_TO_ADDR
// if ValidHex ( x , y ) then
70657: LD_VAR 0 3
70661: PPUSH
70662: LD_VAR 0 4
70666: PPUSH
70667: CALL_OW 488
70671: IFFALSE 70694
// begin result := [ x , y ] ;
70673: LD_ADDR_VAR 0 1
70677: PUSH
70678: LD_VAR 0 3
70682: PUSH
70683: LD_VAR 0 4
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: ST_TO_ADDR
// break ;
70692: GO 70696
// end ; end ;
70694: GO 70496
70696: POP
70697: POP
// if result then
70698: LD_VAR 0 1
70702: IFFALSE 70762
// begin ToLua ( playSibBomb() ) ;
70704: LD_STRING playSibBomb()
70706: PPUSH
70707: CALL_OW 559
// wait ( 0 0$14 ) ;
70711: LD_INT 490
70713: PPUSH
70714: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
70718: LD_VAR 0 1
70722: PUSH
70723: LD_INT 1
70725: ARRAY
70726: PPUSH
70727: LD_VAR 0 1
70731: PUSH
70732: LD_INT 2
70734: ARRAY
70735: PPUSH
70736: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
70740: LD_VAR 0 1
70744: PUSH
70745: LD_INT 1
70747: ARRAY
70748: PPUSH
70749: LD_VAR 0 1
70753: PUSH
70754: LD_INT 2
70756: ARRAY
70757: PPUSH
70758: CALL_OW 429
// end ; end ;
70762: LD_VAR 0 1
70766: RET
// every 0 0$1 trigger StreamModeActive and sReset do
70767: LD_EXP 77
70771: PUSH
70772: LD_EXP 99
70776: AND
70777: IFFALSE 70789
70779: GO 70781
70781: DISABLE
// YouLost (  ) ;
70782: LD_STRING 
70784: PPUSH
70785: CALL_OW 104
70789: END
// every 0 0$1 trigger StreamModeActive and sFog do
70790: LD_EXP 77
70794: PUSH
70795: LD_EXP 98
70799: AND
70800: IFFALSE 70814
70802: GO 70804
70804: DISABLE
// FogOff ( your_side ) ;
70805: LD_OWVAR 2
70809: PPUSH
70810: CALL_OW 344
70814: END
// every 0 0$1 trigger StreamModeActive and sSun do
70815: LD_EXP 77
70819: PUSH
70820: LD_EXP 100
70824: AND
70825: IFFALSE 70853
70827: GO 70829
70829: DISABLE
// begin solar_recharge_percent := 0 ;
70830: LD_ADDR_OWVAR 79
70834: PUSH
70835: LD_INT 0
70837: ST_TO_ADDR
// wait ( 5 5$00 ) ;
70838: LD_INT 10500
70840: PPUSH
70841: CALL_OW 67
// solar_recharge_percent := 100 ;
70845: LD_ADDR_OWVAR 79
70849: PUSH
70850: LD_INT 100
70852: ST_TO_ADDR
// end ;
70853: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
70854: LD_EXP 77
70858: PUSH
70859: LD_EXP 101
70863: AND
70864: IFFALSE 71103
70866: GO 70868
70868: DISABLE
70869: LD_INT 0
70871: PPUSH
70872: PPUSH
70873: PPUSH
// begin tmp := [ ] ;
70874: LD_ADDR_VAR 0 3
70878: PUSH
70879: EMPTY
70880: ST_TO_ADDR
// for i := 1 to 6 do
70881: LD_ADDR_VAR 0 1
70885: PUSH
70886: DOUBLE
70887: LD_INT 1
70889: DEC
70890: ST_TO_ADDR
70891: LD_INT 6
70893: PUSH
70894: FOR_TO
70895: IFFALSE 71000
// begin uc_nation := nation_nature ;
70897: LD_ADDR_OWVAR 21
70901: PUSH
70902: LD_INT 0
70904: ST_TO_ADDR
// uc_side := 0 ;
70905: LD_ADDR_OWVAR 20
70909: PUSH
70910: LD_INT 0
70912: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
70913: LD_ADDR_OWVAR 29
70917: PUSH
70918: LD_INT 12
70920: PUSH
70921: LD_INT 12
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: ST_TO_ADDR
// hc_agressivity := 20 ;
70928: LD_ADDR_OWVAR 35
70932: PUSH
70933: LD_INT 20
70935: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
70936: LD_ADDR_OWVAR 28
70940: PUSH
70941: LD_INT 17
70943: ST_TO_ADDR
// hc_gallery :=  ;
70944: LD_ADDR_OWVAR 33
70948: PUSH
70949: LD_STRING 
70951: ST_TO_ADDR
// hc_name :=  ;
70952: LD_ADDR_OWVAR 26
70956: PUSH
70957: LD_STRING 
70959: ST_TO_ADDR
// un := CreateHuman ;
70960: LD_ADDR_VAR 0 2
70964: PUSH
70965: CALL_OW 44
70969: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
70970: LD_VAR 0 2
70974: PPUSH
70975: LD_INT 1
70977: PPUSH
70978: CALL_OW 51
// tmp := tmp ^ un ;
70982: LD_ADDR_VAR 0 3
70986: PUSH
70987: LD_VAR 0 3
70991: PUSH
70992: LD_VAR 0 2
70996: ADD
70997: ST_TO_ADDR
// end ;
70998: GO 70894
71000: POP
71001: POP
// repeat wait ( 0 0$1 ) ;
71002: LD_INT 35
71004: PPUSH
71005: CALL_OW 67
// for un in tmp do
71009: LD_ADDR_VAR 0 2
71013: PUSH
71014: LD_VAR 0 3
71018: PUSH
71019: FOR_IN
71020: IFFALSE 71094
// begin if IsDead ( un ) then
71022: LD_VAR 0 2
71026: PPUSH
71027: CALL_OW 301
71031: IFFALSE 71051
// begin tmp := tmp diff un ;
71033: LD_ADDR_VAR 0 3
71037: PUSH
71038: LD_VAR 0 3
71042: PUSH
71043: LD_VAR 0 2
71047: DIFF
71048: ST_TO_ADDR
// continue ;
71049: GO 71019
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
71051: LD_VAR 0 2
71055: PPUSH
71056: LD_INT 3
71058: PUSH
71059: LD_INT 22
71061: PUSH
71062: LD_INT 0
71064: PUSH
71065: EMPTY
71066: LIST
71067: LIST
71068: PUSH
71069: EMPTY
71070: LIST
71071: LIST
71072: PPUSH
71073: CALL_OW 69
71077: PPUSH
71078: LD_VAR 0 2
71082: PPUSH
71083: CALL_OW 74
71087: PPUSH
71088: CALL_OW 115
// end ;
71092: GO 71019
71094: POP
71095: POP
// until not tmp ;
71096: LD_VAR 0 3
71100: NOT
71101: IFFALSE 71002
// end ;
71103: PPOPN 3
71105: END
// every 0 0$1 trigger StreamModeActive and sTroll do
71106: LD_EXP 77
71110: PUSH
71111: LD_EXP 102
71115: AND
71116: IFFALSE 71170
71118: GO 71120
71120: DISABLE
// begin ToLua ( displayTroll(); ) ;
71121: LD_STRING displayTroll();
71123: PPUSH
71124: CALL_OW 559
// wait ( 3 3$00 ) ;
71128: LD_INT 6300
71130: PPUSH
71131: CALL_OW 67
// ToLua ( hideTroll(); ) ;
71135: LD_STRING hideTroll();
71137: PPUSH
71138: CALL_OW 559
// wait ( 1 1$00 ) ;
71142: LD_INT 2100
71144: PPUSH
71145: CALL_OW 67
// ToLua ( displayTroll(); ) ;
71149: LD_STRING displayTroll();
71151: PPUSH
71152: CALL_OW 559
// wait ( 1 1$00 ) ;
71156: LD_INT 2100
71158: PPUSH
71159: CALL_OW 67
// ToLua ( hideTroll(); ) ;
71163: LD_STRING hideTroll();
71165: PPUSH
71166: CALL_OW 559
// end ;
71170: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
71171: LD_EXP 77
71175: PUSH
71176: LD_EXP 103
71180: AND
71181: IFFALSE 71244
71183: GO 71185
71185: DISABLE
71186: LD_INT 0
71188: PPUSH
// begin p := 0 ;
71189: LD_ADDR_VAR 0 1
71193: PUSH
71194: LD_INT 0
71196: ST_TO_ADDR
// repeat game_speed := 1 ;
71197: LD_ADDR_OWVAR 65
71201: PUSH
71202: LD_INT 1
71204: ST_TO_ADDR
// wait ( 0 0$1 ) ;
71205: LD_INT 35
71207: PPUSH
71208: CALL_OW 67
// p := p + 1 ;
71212: LD_ADDR_VAR 0 1
71216: PUSH
71217: LD_VAR 0 1
71221: PUSH
71222: LD_INT 1
71224: PLUS
71225: ST_TO_ADDR
// until p >= 60 ;
71226: LD_VAR 0 1
71230: PUSH
71231: LD_INT 60
71233: GREATEREQUAL
71234: IFFALSE 71197
// game_speed := 4 ;
71236: LD_ADDR_OWVAR 65
71240: PUSH
71241: LD_INT 4
71243: ST_TO_ADDR
// end ;
71244: PPOPN 1
71246: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
71247: LD_EXP 77
71251: PUSH
71252: LD_EXP 104
71256: AND
71257: IFFALSE 71403
71259: GO 71261
71261: DISABLE
71262: LD_INT 0
71264: PPUSH
71265: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71266: LD_ADDR_VAR 0 1
71270: PUSH
71271: LD_INT 22
71273: PUSH
71274: LD_OWVAR 2
71278: PUSH
71279: EMPTY
71280: LIST
71281: LIST
71282: PUSH
71283: LD_INT 2
71285: PUSH
71286: LD_INT 30
71288: PUSH
71289: LD_INT 0
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: PUSH
71296: LD_INT 30
71298: PUSH
71299: LD_INT 1
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: LIST
71310: PUSH
71311: EMPTY
71312: LIST
71313: LIST
71314: PPUSH
71315: CALL_OW 69
71319: ST_TO_ADDR
// if not depot then
71320: LD_VAR 0 1
71324: NOT
71325: IFFALSE 71329
// exit ;
71327: GO 71403
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
71329: LD_ADDR_VAR 0 2
71333: PUSH
71334: LD_VAR 0 1
71338: PUSH
71339: LD_INT 1
71341: PPUSH
71342: LD_VAR 0 1
71346: PPUSH
71347: CALL_OW 12
71351: ARRAY
71352: PPUSH
71353: CALL_OW 274
71357: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
71358: LD_VAR 0 2
71362: PPUSH
71363: LD_INT 1
71365: PPUSH
71366: LD_INT 0
71368: PPUSH
71369: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
71373: LD_VAR 0 2
71377: PPUSH
71378: LD_INT 2
71380: PPUSH
71381: LD_INT 0
71383: PPUSH
71384: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
71388: LD_VAR 0 2
71392: PPUSH
71393: LD_INT 3
71395: PPUSH
71396: LD_INT 0
71398: PPUSH
71399: CALL_OW 277
// end ;
71403: PPOPN 2
71405: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
71406: LD_EXP 77
71410: PUSH
71411: LD_EXP 105
71415: AND
71416: IFFALSE 71513
71418: GO 71420
71420: DISABLE
71421: LD_INT 0
71423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71424: LD_ADDR_VAR 0 1
71428: PUSH
71429: LD_INT 22
71431: PUSH
71432: LD_OWVAR 2
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: PUSH
71441: LD_INT 21
71443: PUSH
71444: LD_INT 1
71446: PUSH
71447: EMPTY
71448: LIST
71449: LIST
71450: PUSH
71451: LD_INT 3
71453: PUSH
71454: LD_INT 23
71456: PUSH
71457: LD_INT 0
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: PUSH
71464: EMPTY
71465: LIST
71466: LIST
71467: PUSH
71468: EMPTY
71469: LIST
71470: LIST
71471: LIST
71472: PPUSH
71473: CALL_OW 69
71477: ST_TO_ADDR
// if not tmp then
71478: LD_VAR 0 1
71482: NOT
71483: IFFALSE 71487
// exit ;
71485: GO 71513
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
71487: LD_VAR 0 1
71491: PUSH
71492: LD_INT 1
71494: PPUSH
71495: LD_VAR 0 1
71499: PPUSH
71500: CALL_OW 12
71504: ARRAY
71505: PPUSH
71506: LD_INT 200
71508: PPUSH
71509: CALL_OW 234
// end ;
71513: PPOPN 1
71515: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
71516: LD_EXP 77
71520: PUSH
71521: LD_EXP 106
71525: AND
71526: IFFALSE 71605
71528: GO 71530
71530: DISABLE
71531: LD_INT 0
71533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
71534: LD_ADDR_VAR 0 1
71538: PUSH
71539: LD_INT 22
71541: PUSH
71542: LD_OWVAR 2
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: PUSH
71551: LD_INT 21
71553: PUSH
71554: LD_INT 2
71556: PUSH
71557: EMPTY
71558: LIST
71559: LIST
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: PPUSH
71565: CALL_OW 69
71569: ST_TO_ADDR
// if not tmp then
71570: LD_VAR 0 1
71574: NOT
71575: IFFALSE 71579
// exit ;
71577: GO 71605
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
71579: LD_VAR 0 1
71583: PUSH
71584: LD_INT 1
71586: PPUSH
71587: LD_VAR 0 1
71591: PPUSH
71592: CALL_OW 12
71596: ARRAY
71597: PPUSH
71598: LD_INT 60
71600: PPUSH
71601: CALL_OW 234
// end ;
71605: PPOPN 1
71607: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
71608: LD_EXP 77
71612: PUSH
71613: LD_EXP 107
71617: AND
71618: IFFALSE 71717
71620: GO 71622
71622: DISABLE
71623: LD_INT 0
71625: PPUSH
71626: PPUSH
// begin enable ;
71627: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
71628: LD_ADDR_VAR 0 1
71632: PUSH
71633: LD_INT 22
71635: PUSH
71636: LD_OWVAR 2
71640: PUSH
71641: EMPTY
71642: LIST
71643: LIST
71644: PUSH
71645: LD_INT 61
71647: PUSH
71648: EMPTY
71649: LIST
71650: PUSH
71651: LD_INT 33
71653: PUSH
71654: LD_INT 2
71656: PUSH
71657: EMPTY
71658: LIST
71659: LIST
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: LIST
71665: PPUSH
71666: CALL_OW 69
71670: ST_TO_ADDR
// if not tmp then
71671: LD_VAR 0 1
71675: NOT
71676: IFFALSE 71680
// exit ;
71678: GO 71717
// for i in tmp do
71680: LD_ADDR_VAR 0 2
71684: PUSH
71685: LD_VAR 0 1
71689: PUSH
71690: FOR_IN
71691: IFFALSE 71715
// if IsControledBy ( i ) then
71693: LD_VAR 0 2
71697: PPUSH
71698: CALL_OW 312
71702: IFFALSE 71713
// ComUnlink ( i ) ;
71704: LD_VAR 0 2
71708: PPUSH
71709: CALL_OW 136
71713: GO 71690
71715: POP
71716: POP
// end ;
71717: PPOPN 2
71719: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
71720: LD_EXP 77
71724: PUSH
71725: LD_EXP 108
71729: AND
71730: IFFALSE 71870
71732: GO 71734
71734: DISABLE
71735: LD_INT 0
71737: PPUSH
71738: PPUSH
// begin ToLua ( displayPowell(); ) ;
71739: LD_STRING displayPowell();
71741: PPUSH
71742: CALL_OW 559
// uc_side := 0 ;
71746: LD_ADDR_OWVAR 20
71750: PUSH
71751: LD_INT 0
71753: ST_TO_ADDR
// uc_nation := 2 ;
71754: LD_ADDR_OWVAR 21
71758: PUSH
71759: LD_INT 2
71761: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
71762: LD_ADDR_OWVAR 37
71766: PUSH
71767: LD_INT 14
71769: ST_TO_ADDR
// vc_engine := engine_siberite ;
71770: LD_ADDR_OWVAR 39
71774: PUSH
71775: LD_INT 3
71777: ST_TO_ADDR
// vc_control := control_apeman ;
71778: LD_ADDR_OWVAR 38
71782: PUSH
71783: LD_INT 5
71785: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
71786: LD_ADDR_OWVAR 40
71790: PUSH
71791: LD_INT 29
71793: ST_TO_ADDR
// un := CreateVehicle ;
71794: LD_ADDR_VAR 0 2
71798: PUSH
71799: CALL_OW 45
71803: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71804: LD_VAR 0 2
71808: PPUSH
71809: LD_INT 1
71811: PPUSH
71812: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
71816: LD_INT 35
71818: PPUSH
71819: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
71823: LD_VAR 0 2
71827: PPUSH
71828: LD_INT 22
71830: PUSH
71831: LD_OWVAR 2
71835: PUSH
71836: EMPTY
71837: LIST
71838: LIST
71839: PPUSH
71840: CALL_OW 69
71844: PPUSH
71845: LD_VAR 0 2
71849: PPUSH
71850: CALL_OW 74
71854: PPUSH
71855: CALL_OW 115
// until IsDead ( un ) ;
71859: LD_VAR 0 2
71863: PPUSH
71864: CALL_OW 301
71868: IFFALSE 71816
// end ;
71870: PPOPN 2
71872: END
// every 0 0$1 trigger StreamModeActive and sStu do
71873: LD_EXP 77
71877: PUSH
71878: LD_EXP 116
71882: AND
71883: IFFALSE 71899
71885: GO 71887
71887: DISABLE
// begin ToLua ( displayStucuk(); ) ;
71888: LD_STRING displayStucuk();
71890: PPUSH
71891: CALL_OW 559
// ResetFog ;
71895: CALL_OW 335
// end ;
71899: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
71900: LD_EXP 77
71904: PUSH
71905: LD_EXP 109
71909: AND
71910: IFFALSE 72051
71912: GO 71914
71914: DISABLE
71915: LD_INT 0
71917: PPUSH
71918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
71919: LD_ADDR_VAR 0 2
71923: PUSH
71924: LD_INT 22
71926: PUSH
71927: LD_OWVAR 2
71931: PUSH
71932: EMPTY
71933: LIST
71934: LIST
71935: PUSH
71936: LD_INT 21
71938: PUSH
71939: LD_INT 1
71941: PUSH
71942: EMPTY
71943: LIST
71944: LIST
71945: PUSH
71946: EMPTY
71947: LIST
71948: LIST
71949: PPUSH
71950: CALL_OW 69
71954: ST_TO_ADDR
// if not tmp then
71955: LD_VAR 0 2
71959: NOT
71960: IFFALSE 71964
// exit ;
71962: GO 72051
// un := tmp [ rand ( 1 , tmp ) ] ;
71964: LD_ADDR_VAR 0 1
71968: PUSH
71969: LD_VAR 0 2
71973: PUSH
71974: LD_INT 1
71976: PPUSH
71977: LD_VAR 0 2
71981: PPUSH
71982: CALL_OW 12
71986: ARRAY
71987: ST_TO_ADDR
// SetSide ( un , 0 ) ;
71988: LD_VAR 0 1
71992: PPUSH
71993: LD_INT 0
71995: PPUSH
71996: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
72000: LD_VAR 0 1
72004: PPUSH
72005: LD_OWVAR 3
72009: PUSH
72010: LD_VAR 0 1
72014: DIFF
72015: PPUSH
72016: LD_VAR 0 1
72020: PPUSH
72021: CALL_OW 74
72025: PPUSH
72026: CALL_OW 115
// wait ( 0 0$20 ) ;
72030: LD_INT 700
72032: PPUSH
72033: CALL_OW 67
// SetSide ( un , your_side ) ;
72037: LD_VAR 0 1
72041: PPUSH
72042: LD_OWVAR 2
72046: PPUSH
72047: CALL_OW 235
// end ;
72051: PPOPN 2
72053: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
72054: LD_EXP 77
72058: PUSH
72059: LD_EXP 110
72063: AND
72064: IFFALSE 72170
72066: GO 72068
72068: DISABLE
72069: LD_INT 0
72071: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72072: LD_ADDR_VAR 0 1
72076: PUSH
72077: LD_INT 22
72079: PUSH
72080: LD_OWVAR 2
72084: PUSH
72085: EMPTY
72086: LIST
72087: LIST
72088: PUSH
72089: LD_INT 2
72091: PUSH
72092: LD_INT 30
72094: PUSH
72095: LD_INT 0
72097: PUSH
72098: EMPTY
72099: LIST
72100: LIST
72101: PUSH
72102: LD_INT 30
72104: PUSH
72105: LD_INT 1
72107: PUSH
72108: EMPTY
72109: LIST
72110: LIST
72111: PUSH
72112: EMPTY
72113: LIST
72114: LIST
72115: LIST
72116: PUSH
72117: EMPTY
72118: LIST
72119: LIST
72120: PPUSH
72121: CALL_OW 69
72125: ST_TO_ADDR
// if not depot then
72126: LD_VAR 0 1
72130: NOT
72131: IFFALSE 72135
// exit ;
72133: GO 72170
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
72135: LD_VAR 0 1
72139: PUSH
72140: LD_INT 1
72142: ARRAY
72143: PPUSH
72144: CALL_OW 250
72148: PPUSH
72149: LD_VAR 0 1
72153: PUSH
72154: LD_INT 1
72156: ARRAY
72157: PPUSH
72158: CALL_OW 251
72162: PPUSH
72163: LD_INT 70
72165: PPUSH
72166: CALL_OW 495
// end ;
72170: PPOPN 1
72172: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
72173: LD_EXP 77
72177: PUSH
72178: LD_EXP 111
72182: AND
72183: IFFALSE 72394
72185: GO 72187
72187: DISABLE
72188: LD_INT 0
72190: PPUSH
72191: PPUSH
72192: PPUSH
72193: PPUSH
72194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
72195: LD_ADDR_VAR 0 5
72199: PUSH
72200: LD_INT 22
72202: PUSH
72203: LD_OWVAR 2
72207: PUSH
72208: EMPTY
72209: LIST
72210: LIST
72211: PUSH
72212: LD_INT 21
72214: PUSH
72215: LD_INT 1
72217: PUSH
72218: EMPTY
72219: LIST
72220: LIST
72221: PUSH
72222: EMPTY
72223: LIST
72224: LIST
72225: PPUSH
72226: CALL_OW 69
72230: ST_TO_ADDR
// if not tmp then
72231: LD_VAR 0 5
72235: NOT
72236: IFFALSE 72240
// exit ;
72238: GO 72394
// for i in tmp do
72240: LD_ADDR_VAR 0 1
72244: PUSH
72245: LD_VAR 0 5
72249: PUSH
72250: FOR_IN
72251: IFFALSE 72392
// begin d := rand ( 0 , 5 ) ;
72253: LD_ADDR_VAR 0 4
72257: PUSH
72258: LD_INT 0
72260: PPUSH
72261: LD_INT 5
72263: PPUSH
72264: CALL_OW 12
72268: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
72269: LD_ADDR_VAR 0 2
72273: PUSH
72274: LD_VAR 0 1
72278: PPUSH
72279: CALL_OW 250
72283: PPUSH
72284: LD_VAR 0 4
72288: PPUSH
72289: LD_INT 3
72291: PPUSH
72292: LD_INT 12
72294: PPUSH
72295: CALL_OW 12
72299: PPUSH
72300: CALL_OW 272
72304: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
72305: LD_ADDR_VAR 0 3
72309: PUSH
72310: LD_VAR 0 1
72314: PPUSH
72315: CALL_OW 251
72319: PPUSH
72320: LD_VAR 0 4
72324: PPUSH
72325: LD_INT 3
72327: PPUSH
72328: LD_INT 12
72330: PPUSH
72331: CALL_OW 12
72335: PPUSH
72336: CALL_OW 273
72340: ST_TO_ADDR
// if ValidHex ( x , y ) then
72341: LD_VAR 0 2
72345: PPUSH
72346: LD_VAR 0 3
72350: PPUSH
72351: CALL_OW 488
72355: IFFALSE 72390
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
72357: LD_VAR 0 1
72361: PPUSH
72362: LD_VAR 0 2
72366: PPUSH
72367: LD_VAR 0 3
72371: PPUSH
72372: LD_INT 3
72374: PPUSH
72375: LD_INT 6
72377: PPUSH
72378: CALL_OW 12
72382: PPUSH
72383: LD_INT 1
72385: PPUSH
72386: CALL_OW 483
// end ;
72390: GO 72250
72392: POP
72393: POP
// end ;
72394: PPOPN 5
72396: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
72397: LD_EXP 77
72401: PUSH
72402: LD_EXP 112
72406: AND
72407: IFFALSE 72501
72409: GO 72411
72411: DISABLE
72412: LD_INT 0
72414: PPUSH
72415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
72416: LD_ADDR_VAR 0 2
72420: PUSH
72421: LD_INT 22
72423: PUSH
72424: LD_OWVAR 2
72428: PUSH
72429: EMPTY
72430: LIST
72431: LIST
72432: PUSH
72433: LD_INT 32
72435: PUSH
72436: LD_INT 1
72438: PUSH
72439: EMPTY
72440: LIST
72441: LIST
72442: PUSH
72443: LD_INT 21
72445: PUSH
72446: LD_INT 2
72448: PUSH
72449: EMPTY
72450: LIST
72451: LIST
72452: PUSH
72453: EMPTY
72454: LIST
72455: LIST
72456: LIST
72457: PPUSH
72458: CALL_OW 69
72462: ST_TO_ADDR
// if not tmp then
72463: LD_VAR 0 2
72467: NOT
72468: IFFALSE 72472
// exit ;
72470: GO 72501
// for i in tmp do
72472: LD_ADDR_VAR 0 1
72476: PUSH
72477: LD_VAR 0 2
72481: PUSH
72482: FOR_IN
72483: IFFALSE 72499
// SetFuel ( i , 0 ) ;
72485: LD_VAR 0 1
72489: PPUSH
72490: LD_INT 0
72492: PPUSH
72493: CALL_OW 240
72497: GO 72482
72499: POP
72500: POP
// end ;
72501: PPOPN 2
72503: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
72504: LD_EXP 77
72508: PUSH
72509: LD_EXP 113
72513: AND
72514: IFFALSE 72580
72516: GO 72518
72518: DISABLE
72519: LD_INT 0
72521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
72522: LD_ADDR_VAR 0 1
72526: PUSH
72527: LD_INT 22
72529: PUSH
72530: LD_OWVAR 2
72534: PUSH
72535: EMPTY
72536: LIST
72537: LIST
72538: PUSH
72539: LD_INT 30
72541: PUSH
72542: LD_INT 29
72544: PUSH
72545: EMPTY
72546: LIST
72547: LIST
72548: PUSH
72549: EMPTY
72550: LIST
72551: LIST
72552: PPUSH
72553: CALL_OW 69
72557: ST_TO_ADDR
// if not tmp then
72558: LD_VAR 0 1
72562: NOT
72563: IFFALSE 72567
// exit ;
72565: GO 72580
// DestroyUnit ( tmp [ 1 ] ) ;
72567: LD_VAR 0 1
72571: PUSH
72572: LD_INT 1
72574: ARRAY
72575: PPUSH
72576: CALL_OW 65
// end ;
72580: PPOPN 1
72582: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
72583: LD_EXP 77
72587: PUSH
72588: LD_EXP 115
72592: AND
72593: IFFALSE 72722
72595: GO 72597
72597: DISABLE
72598: LD_INT 0
72600: PPUSH
// begin uc_side := 0 ;
72601: LD_ADDR_OWVAR 20
72605: PUSH
72606: LD_INT 0
72608: ST_TO_ADDR
// uc_nation := nation_arabian ;
72609: LD_ADDR_OWVAR 21
72613: PUSH
72614: LD_INT 2
72616: ST_TO_ADDR
// hc_gallery :=  ;
72617: LD_ADDR_OWVAR 33
72621: PUSH
72622: LD_STRING 
72624: ST_TO_ADDR
// hc_name :=  ;
72625: LD_ADDR_OWVAR 26
72629: PUSH
72630: LD_STRING 
72632: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
72633: LD_INT 1
72635: PPUSH
72636: LD_INT 11
72638: PPUSH
72639: LD_INT 10
72641: PPUSH
72642: CALL_OW 380
// un := CreateHuman ;
72646: LD_ADDR_VAR 0 1
72650: PUSH
72651: CALL_OW 44
72655: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
72656: LD_VAR 0 1
72660: PPUSH
72661: LD_INT 1
72663: PPUSH
72664: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
72668: LD_INT 35
72670: PPUSH
72671: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
72675: LD_VAR 0 1
72679: PPUSH
72680: LD_INT 22
72682: PUSH
72683: LD_OWVAR 2
72687: PUSH
72688: EMPTY
72689: LIST
72690: LIST
72691: PPUSH
72692: CALL_OW 69
72696: PPUSH
72697: LD_VAR 0 1
72701: PPUSH
72702: CALL_OW 74
72706: PPUSH
72707: CALL_OW 115
// until IsDead ( un ) ;
72711: LD_VAR 0 1
72715: PPUSH
72716: CALL_OW 301
72720: IFFALSE 72668
// end ;
72722: PPOPN 1
72724: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
72725: LD_EXP 77
72729: PUSH
72730: LD_EXP 117
72734: AND
72735: IFFALSE 72747
72737: GO 72739
72739: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
72740: LD_STRING earthquake(getX(game), 0, 32)
72742: PPUSH
72743: CALL_OW 559
72747: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
72748: LD_EXP 77
72752: PUSH
72753: LD_EXP 118
72757: AND
72758: IFFALSE 72849
72760: GO 72762
72762: DISABLE
72763: LD_INT 0
72765: PPUSH
// begin enable ;
72766: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
72767: LD_ADDR_VAR 0 1
72771: PUSH
72772: LD_INT 22
72774: PUSH
72775: LD_OWVAR 2
72779: PUSH
72780: EMPTY
72781: LIST
72782: LIST
72783: PUSH
72784: LD_INT 21
72786: PUSH
72787: LD_INT 2
72789: PUSH
72790: EMPTY
72791: LIST
72792: LIST
72793: PUSH
72794: LD_INT 33
72796: PUSH
72797: LD_INT 3
72799: PUSH
72800: EMPTY
72801: LIST
72802: LIST
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: LIST
72808: PPUSH
72809: CALL_OW 69
72813: ST_TO_ADDR
// if not tmp then
72814: LD_VAR 0 1
72818: NOT
72819: IFFALSE 72823
// exit ;
72821: GO 72849
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
72823: LD_VAR 0 1
72827: PUSH
72828: LD_INT 1
72830: PPUSH
72831: LD_VAR 0 1
72835: PPUSH
72836: CALL_OW 12
72840: ARRAY
72841: PPUSH
72842: LD_INT 1
72844: PPUSH
72845: CALL_OW 234
// end ;
72849: PPOPN 1
72851: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
72852: LD_EXP 77
72856: PUSH
72857: LD_EXP 119
72861: AND
72862: IFFALSE 73003
72864: GO 72866
72866: DISABLE
72867: LD_INT 0
72869: PPUSH
72870: PPUSH
72871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72872: LD_ADDR_VAR 0 3
72876: PUSH
72877: LD_INT 22
72879: PUSH
72880: LD_OWVAR 2
72884: PUSH
72885: EMPTY
72886: LIST
72887: LIST
72888: PUSH
72889: LD_INT 25
72891: PUSH
72892: LD_INT 1
72894: PUSH
72895: EMPTY
72896: LIST
72897: LIST
72898: PUSH
72899: EMPTY
72900: LIST
72901: LIST
72902: PPUSH
72903: CALL_OW 69
72907: ST_TO_ADDR
// if not tmp then
72908: LD_VAR 0 3
72912: NOT
72913: IFFALSE 72917
// exit ;
72915: GO 73003
// un := tmp [ rand ( 1 , tmp ) ] ;
72917: LD_ADDR_VAR 0 2
72921: PUSH
72922: LD_VAR 0 3
72926: PUSH
72927: LD_INT 1
72929: PPUSH
72930: LD_VAR 0 3
72934: PPUSH
72935: CALL_OW 12
72939: ARRAY
72940: ST_TO_ADDR
// if Crawls ( un ) then
72941: LD_VAR 0 2
72945: PPUSH
72946: CALL_OW 318
72950: IFFALSE 72961
// ComWalk ( un ) ;
72952: LD_VAR 0 2
72956: PPUSH
72957: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
72961: LD_VAR 0 2
72965: PPUSH
72966: LD_INT 9
72968: PPUSH
72969: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
72973: LD_INT 28
72975: PPUSH
72976: LD_OWVAR 2
72980: PPUSH
72981: LD_INT 2
72983: PPUSH
72984: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
72988: LD_INT 29
72990: PPUSH
72991: LD_OWVAR 2
72995: PPUSH
72996: LD_INT 2
72998: PPUSH
72999: CALL_OW 322
// end ;
73003: PPOPN 3
73005: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
73006: LD_EXP 77
73010: PUSH
73011: LD_EXP 120
73015: AND
73016: IFFALSE 73127
73018: GO 73020
73020: DISABLE
73021: LD_INT 0
73023: PPUSH
73024: PPUSH
73025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73026: LD_ADDR_VAR 0 3
73030: PUSH
73031: LD_INT 22
73033: PUSH
73034: LD_OWVAR 2
73038: PUSH
73039: EMPTY
73040: LIST
73041: LIST
73042: PUSH
73043: LD_INT 25
73045: PUSH
73046: LD_INT 1
73048: PUSH
73049: EMPTY
73050: LIST
73051: LIST
73052: PUSH
73053: EMPTY
73054: LIST
73055: LIST
73056: PPUSH
73057: CALL_OW 69
73061: ST_TO_ADDR
// if not tmp then
73062: LD_VAR 0 3
73066: NOT
73067: IFFALSE 73071
// exit ;
73069: GO 73127
// un := tmp [ rand ( 1 , tmp ) ] ;
73071: LD_ADDR_VAR 0 2
73075: PUSH
73076: LD_VAR 0 3
73080: PUSH
73081: LD_INT 1
73083: PPUSH
73084: LD_VAR 0 3
73088: PPUSH
73089: CALL_OW 12
73093: ARRAY
73094: ST_TO_ADDR
// if Crawls ( un ) then
73095: LD_VAR 0 2
73099: PPUSH
73100: CALL_OW 318
73104: IFFALSE 73115
// ComWalk ( un ) ;
73106: LD_VAR 0 2
73110: PPUSH
73111: CALL_OW 138
// SetClass ( un , class_mortar ) ;
73115: LD_VAR 0 2
73119: PPUSH
73120: LD_INT 8
73122: PPUSH
73123: CALL_OW 336
// end ;
73127: PPOPN 3
73129: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
73130: LD_EXP 77
73134: PUSH
73135: LD_EXP 121
73139: AND
73140: IFFALSE 73284
73142: GO 73144
73144: DISABLE
73145: LD_INT 0
73147: PPUSH
73148: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
73149: LD_ADDR_VAR 0 2
73153: PUSH
73154: LD_INT 22
73156: PUSH
73157: LD_OWVAR 2
73161: PUSH
73162: EMPTY
73163: LIST
73164: LIST
73165: PUSH
73166: LD_INT 21
73168: PUSH
73169: LD_INT 2
73171: PUSH
73172: EMPTY
73173: LIST
73174: LIST
73175: PUSH
73176: LD_INT 2
73178: PUSH
73179: LD_INT 34
73181: PUSH
73182: LD_INT 12
73184: PUSH
73185: EMPTY
73186: LIST
73187: LIST
73188: PUSH
73189: LD_INT 34
73191: PUSH
73192: LD_INT 51
73194: PUSH
73195: EMPTY
73196: LIST
73197: LIST
73198: PUSH
73199: LD_INT 34
73201: PUSH
73202: LD_INT 32
73204: PUSH
73205: EMPTY
73206: LIST
73207: LIST
73208: PUSH
73209: EMPTY
73210: LIST
73211: LIST
73212: LIST
73213: LIST
73214: PUSH
73215: EMPTY
73216: LIST
73217: LIST
73218: LIST
73219: PPUSH
73220: CALL_OW 69
73224: ST_TO_ADDR
// if not tmp then
73225: LD_VAR 0 2
73229: NOT
73230: IFFALSE 73234
// exit ;
73232: GO 73284
// for i in tmp do
73234: LD_ADDR_VAR 0 1
73238: PUSH
73239: LD_VAR 0 2
73243: PUSH
73244: FOR_IN
73245: IFFALSE 73282
// if GetCargo ( i , mat_artifact ) = 0 then
73247: LD_VAR 0 1
73251: PPUSH
73252: LD_INT 4
73254: PPUSH
73255: CALL_OW 289
73259: PUSH
73260: LD_INT 0
73262: EQUAL
73263: IFFALSE 73280
// SetCargo ( i , mat_siberit , 100 ) ;
73265: LD_VAR 0 1
73269: PPUSH
73270: LD_INT 3
73272: PPUSH
73273: LD_INT 100
73275: PPUSH
73276: CALL_OW 290
73280: GO 73244
73282: POP
73283: POP
// end ;
73284: PPOPN 2
73286: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
73287: LD_EXP 77
73291: PUSH
73292: LD_EXP 122
73296: AND
73297: IFFALSE 73480
73299: GO 73301
73301: DISABLE
73302: LD_INT 0
73304: PPUSH
73305: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73306: LD_ADDR_VAR 0 2
73310: PUSH
73311: LD_INT 22
73313: PUSH
73314: LD_OWVAR 2
73318: PUSH
73319: EMPTY
73320: LIST
73321: LIST
73322: PPUSH
73323: CALL_OW 69
73327: ST_TO_ADDR
// if not tmp then
73328: LD_VAR 0 2
73332: NOT
73333: IFFALSE 73337
// exit ;
73335: GO 73480
// for i := 1 to 2 do
73337: LD_ADDR_VAR 0 1
73341: PUSH
73342: DOUBLE
73343: LD_INT 1
73345: DEC
73346: ST_TO_ADDR
73347: LD_INT 2
73349: PUSH
73350: FOR_TO
73351: IFFALSE 73478
// begin uc_side := your_side ;
73353: LD_ADDR_OWVAR 20
73357: PUSH
73358: LD_OWVAR 2
73362: ST_TO_ADDR
// uc_nation := nation_american ;
73363: LD_ADDR_OWVAR 21
73367: PUSH
73368: LD_INT 1
73370: ST_TO_ADDR
// vc_chassis := us_morphling ;
73371: LD_ADDR_OWVAR 37
73375: PUSH
73376: LD_INT 5
73378: ST_TO_ADDR
// vc_engine := engine_siberite ;
73379: LD_ADDR_OWVAR 39
73383: PUSH
73384: LD_INT 3
73386: ST_TO_ADDR
// vc_control := control_computer ;
73387: LD_ADDR_OWVAR 38
73391: PUSH
73392: LD_INT 3
73394: ST_TO_ADDR
// vc_weapon := us_double_laser ;
73395: LD_ADDR_OWVAR 40
73399: PUSH
73400: LD_INT 10
73402: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
73403: LD_VAR 0 2
73407: PUSH
73408: LD_INT 1
73410: ARRAY
73411: PPUSH
73412: CALL_OW 310
73416: NOT
73417: IFFALSE 73464
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
73419: CALL_OW 45
73423: PPUSH
73424: LD_VAR 0 2
73428: PUSH
73429: LD_INT 1
73431: ARRAY
73432: PPUSH
73433: CALL_OW 250
73437: PPUSH
73438: LD_VAR 0 2
73442: PUSH
73443: LD_INT 1
73445: ARRAY
73446: PPUSH
73447: CALL_OW 251
73451: PPUSH
73452: LD_INT 12
73454: PPUSH
73455: LD_INT 1
73457: PPUSH
73458: CALL_OW 50
73462: GO 73476
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
73464: CALL_OW 45
73468: PPUSH
73469: LD_INT 1
73471: PPUSH
73472: CALL_OW 51
// end ;
73476: GO 73350
73478: POP
73479: POP
// end ;
73480: PPOPN 2
73482: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
73483: LD_EXP 77
73487: PUSH
73488: LD_EXP 123
73492: AND
73493: IFFALSE 73715
73495: GO 73497
73497: DISABLE
73498: LD_INT 0
73500: PPUSH
73501: PPUSH
73502: PPUSH
73503: PPUSH
73504: PPUSH
73505: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73506: LD_ADDR_VAR 0 6
73510: PUSH
73511: LD_INT 22
73513: PUSH
73514: LD_OWVAR 2
73518: PUSH
73519: EMPTY
73520: LIST
73521: LIST
73522: PUSH
73523: LD_INT 21
73525: PUSH
73526: LD_INT 1
73528: PUSH
73529: EMPTY
73530: LIST
73531: LIST
73532: PUSH
73533: LD_INT 3
73535: PUSH
73536: LD_INT 23
73538: PUSH
73539: LD_INT 0
73541: PUSH
73542: EMPTY
73543: LIST
73544: LIST
73545: PUSH
73546: EMPTY
73547: LIST
73548: LIST
73549: PUSH
73550: EMPTY
73551: LIST
73552: LIST
73553: LIST
73554: PPUSH
73555: CALL_OW 69
73559: ST_TO_ADDR
// if not tmp then
73560: LD_VAR 0 6
73564: NOT
73565: IFFALSE 73569
// exit ;
73567: GO 73715
// s1 := rand ( 1 , 4 ) ;
73569: LD_ADDR_VAR 0 2
73573: PUSH
73574: LD_INT 1
73576: PPUSH
73577: LD_INT 4
73579: PPUSH
73580: CALL_OW 12
73584: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
73585: LD_ADDR_VAR 0 4
73589: PUSH
73590: LD_VAR 0 6
73594: PUSH
73595: LD_INT 1
73597: ARRAY
73598: PPUSH
73599: LD_VAR 0 2
73603: PPUSH
73604: CALL_OW 259
73608: ST_TO_ADDR
// if s1 = 1 then
73609: LD_VAR 0 2
73613: PUSH
73614: LD_INT 1
73616: EQUAL
73617: IFFALSE 73637
// s2 := rand ( 2 , 4 ) else
73619: LD_ADDR_VAR 0 3
73623: PUSH
73624: LD_INT 2
73626: PPUSH
73627: LD_INT 4
73629: PPUSH
73630: CALL_OW 12
73634: ST_TO_ADDR
73635: GO 73645
// s2 := 1 ;
73637: LD_ADDR_VAR 0 3
73641: PUSH
73642: LD_INT 1
73644: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
73645: LD_ADDR_VAR 0 5
73649: PUSH
73650: LD_VAR 0 6
73654: PUSH
73655: LD_INT 1
73657: ARRAY
73658: PPUSH
73659: LD_VAR 0 3
73663: PPUSH
73664: CALL_OW 259
73668: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
73669: LD_VAR 0 6
73673: PUSH
73674: LD_INT 1
73676: ARRAY
73677: PPUSH
73678: LD_VAR 0 2
73682: PPUSH
73683: LD_VAR 0 5
73687: PPUSH
73688: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
73692: LD_VAR 0 6
73696: PUSH
73697: LD_INT 1
73699: ARRAY
73700: PPUSH
73701: LD_VAR 0 3
73705: PPUSH
73706: LD_VAR 0 4
73710: PPUSH
73711: CALL_OW 237
// end ;
73715: PPOPN 6
73717: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
73718: LD_EXP 77
73722: PUSH
73723: LD_EXP 124
73727: AND
73728: IFFALSE 73807
73730: GO 73732
73732: DISABLE
73733: LD_INT 0
73735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
73736: LD_ADDR_VAR 0 1
73740: PUSH
73741: LD_INT 22
73743: PUSH
73744: LD_OWVAR 2
73748: PUSH
73749: EMPTY
73750: LIST
73751: LIST
73752: PUSH
73753: LD_INT 30
73755: PUSH
73756: LD_INT 3
73758: PUSH
73759: EMPTY
73760: LIST
73761: LIST
73762: PUSH
73763: EMPTY
73764: LIST
73765: LIST
73766: PPUSH
73767: CALL_OW 69
73771: ST_TO_ADDR
// if not tmp then
73772: LD_VAR 0 1
73776: NOT
73777: IFFALSE 73781
// exit ;
73779: GO 73807
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
73781: LD_VAR 0 1
73785: PUSH
73786: LD_INT 1
73788: PPUSH
73789: LD_VAR 0 1
73793: PPUSH
73794: CALL_OW 12
73798: ARRAY
73799: PPUSH
73800: LD_INT 1
73802: PPUSH
73803: CALL_OW 234
// end ;
73807: PPOPN 1
73809: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
73810: LD_EXP 77
73814: PUSH
73815: LD_EXP 125
73819: AND
73820: IFFALSE 73932
73822: GO 73824
73824: DISABLE
73825: LD_INT 0
73827: PPUSH
73828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
73829: LD_ADDR_VAR 0 2
73833: PUSH
73834: LD_INT 22
73836: PUSH
73837: LD_OWVAR 2
73841: PUSH
73842: EMPTY
73843: LIST
73844: LIST
73845: PUSH
73846: LD_INT 2
73848: PUSH
73849: LD_INT 30
73851: PUSH
73852: LD_INT 27
73854: PUSH
73855: EMPTY
73856: LIST
73857: LIST
73858: PUSH
73859: LD_INT 30
73861: PUSH
73862: LD_INT 26
73864: PUSH
73865: EMPTY
73866: LIST
73867: LIST
73868: PUSH
73869: LD_INT 30
73871: PUSH
73872: LD_INT 28
73874: PUSH
73875: EMPTY
73876: LIST
73877: LIST
73878: PUSH
73879: EMPTY
73880: LIST
73881: LIST
73882: LIST
73883: LIST
73884: PUSH
73885: EMPTY
73886: LIST
73887: LIST
73888: PPUSH
73889: CALL_OW 69
73893: ST_TO_ADDR
// if not tmp then
73894: LD_VAR 0 2
73898: NOT
73899: IFFALSE 73903
// exit ;
73901: GO 73932
// for i in tmp do
73903: LD_ADDR_VAR 0 1
73907: PUSH
73908: LD_VAR 0 2
73912: PUSH
73913: FOR_IN
73914: IFFALSE 73930
// SetLives ( i , 1 ) ;
73916: LD_VAR 0 1
73920: PPUSH
73921: LD_INT 1
73923: PPUSH
73924: CALL_OW 234
73928: GO 73913
73930: POP
73931: POP
// end ;
73932: PPOPN 2
73934: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
73935: LD_EXP 77
73939: PUSH
73940: LD_EXP 126
73944: AND
73945: IFFALSE 74219
73947: GO 73949
73949: DISABLE
73950: LD_INT 0
73952: PPUSH
73953: PPUSH
73954: PPUSH
// begin i := rand ( 1 , 7 ) ;
73955: LD_ADDR_VAR 0 1
73959: PUSH
73960: LD_INT 1
73962: PPUSH
73963: LD_INT 7
73965: PPUSH
73966: CALL_OW 12
73970: ST_TO_ADDR
// case i of 1 :
73971: LD_VAR 0 1
73975: PUSH
73976: LD_INT 1
73978: DOUBLE
73979: EQUAL
73980: IFTRUE 73984
73982: GO 73994
73984: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
73985: LD_STRING earthquake(getX(game), 0, 32)
73987: PPUSH
73988: CALL_OW 559
73992: GO 74219
73994: LD_INT 2
73996: DOUBLE
73997: EQUAL
73998: IFTRUE 74002
74000: GO 74016
74002: POP
// begin ToLua ( displayStucuk(); ) ;
74003: LD_STRING displayStucuk();
74005: PPUSH
74006: CALL_OW 559
// ResetFog ;
74010: CALL_OW 335
// end ; 3 :
74014: GO 74219
74016: LD_INT 3
74018: DOUBLE
74019: EQUAL
74020: IFTRUE 74024
74022: GO 74128
74024: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74025: LD_ADDR_VAR 0 2
74029: PUSH
74030: LD_INT 22
74032: PUSH
74033: LD_OWVAR 2
74037: PUSH
74038: EMPTY
74039: LIST
74040: LIST
74041: PUSH
74042: LD_INT 25
74044: PUSH
74045: LD_INT 1
74047: PUSH
74048: EMPTY
74049: LIST
74050: LIST
74051: PUSH
74052: EMPTY
74053: LIST
74054: LIST
74055: PPUSH
74056: CALL_OW 69
74060: ST_TO_ADDR
// if not tmp then
74061: LD_VAR 0 2
74065: NOT
74066: IFFALSE 74070
// exit ;
74068: GO 74219
// un := tmp [ rand ( 1 , tmp ) ] ;
74070: LD_ADDR_VAR 0 3
74074: PUSH
74075: LD_VAR 0 2
74079: PUSH
74080: LD_INT 1
74082: PPUSH
74083: LD_VAR 0 2
74087: PPUSH
74088: CALL_OW 12
74092: ARRAY
74093: ST_TO_ADDR
// if Crawls ( un ) then
74094: LD_VAR 0 3
74098: PPUSH
74099: CALL_OW 318
74103: IFFALSE 74114
// ComWalk ( un ) ;
74105: LD_VAR 0 3
74109: PPUSH
74110: CALL_OW 138
// SetClass ( un , class_mortar ) ;
74114: LD_VAR 0 3
74118: PPUSH
74119: LD_INT 8
74121: PPUSH
74122: CALL_OW 336
// end ; 4 :
74126: GO 74219
74128: LD_INT 4
74130: DOUBLE
74131: EQUAL
74132: IFTRUE 74136
74134: GO 74197
74136: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
74137: LD_ADDR_VAR 0 2
74141: PUSH
74142: LD_INT 22
74144: PUSH
74145: LD_OWVAR 2
74149: PUSH
74150: EMPTY
74151: LIST
74152: LIST
74153: PUSH
74154: LD_INT 30
74156: PUSH
74157: LD_INT 29
74159: PUSH
74160: EMPTY
74161: LIST
74162: LIST
74163: PUSH
74164: EMPTY
74165: LIST
74166: LIST
74167: PPUSH
74168: CALL_OW 69
74172: ST_TO_ADDR
// if not tmp then
74173: LD_VAR 0 2
74177: NOT
74178: IFFALSE 74182
// exit ;
74180: GO 74219
// DestroyUnit ( tmp [ 1 ] ) ;
74182: LD_VAR 0 2
74186: PUSH
74187: LD_INT 1
74189: ARRAY
74190: PPUSH
74191: CALL_OW 65
// end ; 5 .. 7 :
74195: GO 74219
74197: LD_INT 5
74199: DOUBLE
74200: GREATEREQUAL
74201: IFFALSE 74209
74203: LD_INT 7
74205: DOUBLE
74206: LESSEQUAL
74207: IFTRUE 74211
74209: GO 74218
74211: POP
// StreamSibBomb ; end ;
74212: CALL 70469 0 0
74216: GO 74219
74218: POP
// end ;
74219: PPOPN 3
74221: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
74222: LD_EXP 77
74226: PUSH
74227: LD_EXP 127
74231: AND
74232: IFFALSE 74388
74234: GO 74236
74236: DISABLE
74237: LD_INT 0
74239: PPUSH
74240: PPUSH
74241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
74242: LD_ADDR_VAR 0 2
74246: PUSH
74247: LD_INT 81
74249: PUSH
74250: LD_OWVAR 2
74254: PUSH
74255: EMPTY
74256: LIST
74257: LIST
74258: PUSH
74259: LD_INT 2
74261: PUSH
74262: LD_INT 21
74264: PUSH
74265: LD_INT 1
74267: PUSH
74268: EMPTY
74269: LIST
74270: LIST
74271: PUSH
74272: LD_INT 21
74274: PUSH
74275: LD_INT 2
74277: PUSH
74278: EMPTY
74279: LIST
74280: LIST
74281: PUSH
74282: EMPTY
74283: LIST
74284: LIST
74285: LIST
74286: PUSH
74287: EMPTY
74288: LIST
74289: LIST
74290: PPUSH
74291: CALL_OW 69
74295: ST_TO_ADDR
// if not tmp then
74296: LD_VAR 0 2
74300: NOT
74301: IFFALSE 74305
// exit ;
74303: GO 74388
// p := 0 ;
74305: LD_ADDR_VAR 0 3
74309: PUSH
74310: LD_INT 0
74312: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
74313: LD_INT 35
74315: PPUSH
74316: CALL_OW 67
// p := p + 1 ;
74320: LD_ADDR_VAR 0 3
74324: PUSH
74325: LD_VAR 0 3
74329: PUSH
74330: LD_INT 1
74332: PLUS
74333: ST_TO_ADDR
// for i in tmp do
74334: LD_ADDR_VAR 0 1
74338: PUSH
74339: LD_VAR 0 2
74343: PUSH
74344: FOR_IN
74345: IFFALSE 74376
// if GetLives ( i ) < 1000 then
74347: LD_VAR 0 1
74351: PPUSH
74352: CALL_OW 256
74356: PUSH
74357: LD_INT 1000
74359: LESS
74360: IFFALSE 74374
// SetLives ( i , 1000 ) ;
74362: LD_VAR 0 1
74366: PPUSH
74367: LD_INT 1000
74369: PPUSH
74370: CALL_OW 234
74374: GO 74344
74376: POP
74377: POP
// until p > 20 ;
74378: LD_VAR 0 3
74382: PUSH
74383: LD_INT 20
74385: GREATER
74386: IFFALSE 74313
// end ;
74388: PPOPN 3
74390: END
// every 0 0$1 trigger StreamModeActive and sTime do
74391: LD_EXP 77
74395: PUSH
74396: LD_EXP 128
74400: AND
74401: IFFALSE 74436
74403: GO 74405
74405: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
74406: LD_INT 28
74408: PPUSH
74409: LD_OWVAR 2
74413: PPUSH
74414: LD_INT 2
74416: PPUSH
74417: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
74421: LD_INT 30
74423: PPUSH
74424: LD_OWVAR 2
74428: PPUSH
74429: LD_INT 2
74431: PPUSH
74432: CALL_OW 322
// end ;
74436: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
74437: LD_EXP 77
74441: PUSH
74442: LD_EXP 129
74446: AND
74447: IFFALSE 74568
74449: GO 74451
74451: DISABLE
74452: LD_INT 0
74454: PPUSH
74455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
74456: LD_ADDR_VAR 0 2
74460: PUSH
74461: LD_INT 22
74463: PUSH
74464: LD_OWVAR 2
74468: PUSH
74469: EMPTY
74470: LIST
74471: LIST
74472: PUSH
74473: LD_INT 21
74475: PUSH
74476: LD_INT 1
74478: PUSH
74479: EMPTY
74480: LIST
74481: LIST
74482: PUSH
74483: LD_INT 3
74485: PUSH
74486: LD_INT 23
74488: PUSH
74489: LD_INT 0
74491: PUSH
74492: EMPTY
74493: LIST
74494: LIST
74495: PUSH
74496: EMPTY
74497: LIST
74498: LIST
74499: PUSH
74500: EMPTY
74501: LIST
74502: LIST
74503: LIST
74504: PPUSH
74505: CALL_OW 69
74509: ST_TO_ADDR
// if not tmp then
74510: LD_VAR 0 2
74514: NOT
74515: IFFALSE 74519
// exit ;
74517: GO 74568
// for i in tmp do
74519: LD_ADDR_VAR 0 1
74523: PUSH
74524: LD_VAR 0 2
74528: PUSH
74529: FOR_IN
74530: IFFALSE 74566
// begin if Crawls ( i ) then
74532: LD_VAR 0 1
74536: PPUSH
74537: CALL_OW 318
74541: IFFALSE 74552
// ComWalk ( i ) ;
74543: LD_VAR 0 1
74547: PPUSH
74548: CALL_OW 138
// SetClass ( i , 2 ) ;
74552: LD_VAR 0 1
74556: PPUSH
74557: LD_INT 2
74559: PPUSH
74560: CALL_OW 336
// end ;
74564: GO 74529
74566: POP
74567: POP
// end ;
74568: PPOPN 2
74570: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
74571: LD_EXP 77
74575: PUSH
74576: LD_EXP 130
74580: AND
74581: IFFALSE 74862
74583: GO 74585
74585: DISABLE
74586: LD_INT 0
74588: PPUSH
74589: PPUSH
74590: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
74591: LD_OWVAR 2
74595: PPUSH
74596: LD_INT 9
74598: PPUSH
74599: LD_INT 1
74601: PPUSH
74602: LD_INT 1
74604: PPUSH
74605: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
74609: LD_INT 9
74611: PPUSH
74612: LD_OWVAR 2
74616: PPUSH
74617: CALL_OW 343
// uc_side := 9 ;
74621: LD_ADDR_OWVAR 20
74625: PUSH
74626: LD_INT 9
74628: ST_TO_ADDR
// uc_nation := 2 ;
74629: LD_ADDR_OWVAR 21
74633: PUSH
74634: LD_INT 2
74636: ST_TO_ADDR
// hc_name := Dark Warrior ;
74637: LD_ADDR_OWVAR 26
74641: PUSH
74642: LD_STRING Dark Warrior
74644: ST_TO_ADDR
// hc_gallery :=  ;
74645: LD_ADDR_OWVAR 33
74649: PUSH
74650: LD_STRING 
74652: ST_TO_ADDR
// hc_noskilllimit := true ;
74653: LD_ADDR_OWVAR 76
74657: PUSH
74658: LD_INT 1
74660: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
74661: LD_ADDR_OWVAR 31
74665: PUSH
74666: LD_INT 30
74668: PUSH
74669: LD_INT 30
74671: PUSH
74672: LD_INT 30
74674: PUSH
74675: LD_INT 30
74677: PUSH
74678: EMPTY
74679: LIST
74680: LIST
74681: LIST
74682: LIST
74683: ST_TO_ADDR
// un := CreateHuman ;
74684: LD_ADDR_VAR 0 3
74688: PUSH
74689: CALL_OW 44
74693: ST_TO_ADDR
// hc_noskilllimit := false ;
74694: LD_ADDR_OWVAR 76
74698: PUSH
74699: LD_INT 0
74701: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
74702: LD_VAR 0 3
74706: PPUSH
74707: LD_INT 1
74709: PPUSH
74710: CALL_OW 51
// p := 0 ;
74714: LD_ADDR_VAR 0 2
74718: PUSH
74719: LD_INT 0
74721: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
74722: LD_INT 35
74724: PPUSH
74725: CALL_OW 67
// p := p + 1 ;
74729: LD_ADDR_VAR 0 2
74733: PUSH
74734: LD_VAR 0 2
74738: PUSH
74739: LD_INT 1
74741: PLUS
74742: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
74743: LD_VAR 0 3
74747: PPUSH
74748: CALL_OW 256
74752: PUSH
74753: LD_INT 1000
74755: LESS
74756: IFFALSE 74770
// SetLives ( un , 1000 ) ;
74758: LD_VAR 0 3
74762: PPUSH
74763: LD_INT 1000
74765: PPUSH
74766: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
74770: LD_VAR 0 3
74774: PPUSH
74775: LD_INT 81
74777: PUSH
74778: LD_OWVAR 2
74782: PUSH
74783: EMPTY
74784: LIST
74785: LIST
74786: PUSH
74787: LD_INT 91
74789: PUSH
74790: LD_VAR 0 3
74794: PUSH
74795: LD_INT 30
74797: PUSH
74798: EMPTY
74799: LIST
74800: LIST
74801: LIST
74802: PUSH
74803: EMPTY
74804: LIST
74805: LIST
74806: PPUSH
74807: CALL_OW 69
74811: PPUSH
74812: LD_VAR 0 3
74816: PPUSH
74817: CALL_OW 74
74821: PPUSH
74822: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
74826: LD_VAR 0 2
74830: PUSH
74831: LD_INT 60
74833: GREATER
74834: PUSH
74835: LD_VAR 0 3
74839: PPUSH
74840: CALL_OW 301
74844: OR
74845: IFFALSE 74722
// if un then
74847: LD_VAR 0 3
74851: IFFALSE 74862
// RemoveUnit ( un ) ;
74853: LD_VAR 0 3
74857: PPUSH
74858: CALL_OW 64
// end ;
74862: PPOPN 3
74864: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
74865: LD_INT 0
74867: PPUSH
// case cmd of 301 :
74868: LD_VAR 0 1
74872: PUSH
74873: LD_INT 301
74875: DOUBLE
74876: EQUAL
74877: IFTRUE 74881
74879: GO 74913
74881: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
74882: LD_VAR 0 6
74886: PPUSH
74887: LD_VAR 0 7
74891: PPUSH
74892: LD_VAR 0 8
74896: PPUSH
74897: LD_VAR 0 4
74901: PPUSH
74902: LD_VAR 0 5
74906: PPUSH
74907: CALL 76114 0 5
74911: GO 75034
74913: LD_INT 302
74915: DOUBLE
74916: EQUAL
74917: IFTRUE 74921
74919: GO 74958
74921: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
74922: LD_VAR 0 6
74926: PPUSH
74927: LD_VAR 0 7
74931: PPUSH
74932: LD_VAR 0 8
74936: PPUSH
74937: LD_VAR 0 9
74941: PPUSH
74942: LD_VAR 0 4
74946: PPUSH
74947: LD_VAR 0 5
74951: PPUSH
74952: CALL 76205 0 6
74956: GO 75034
74958: LD_INT 303
74960: DOUBLE
74961: EQUAL
74962: IFTRUE 74966
74964: GO 75003
74966: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
74967: LD_VAR 0 6
74971: PPUSH
74972: LD_VAR 0 7
74976: PPUSH
74977: LD_VAR 0 8
74981: PPUSH
74982: LD_VAR 0 9
74986: PPUSH
74987: LD_VAR 0 4
74991: PPUSH
74992: LD_VAR 0 5
74996: PPUSH
74997: CALL 75039 0 6
75001: GO 75034
75003: LD_INT 304
75005: DOUBLE
75006: EQUAL
75007: IFTRUE 75011
75009: GO 75033
75011: POP
// hHackTeleport ( unit , x , y ) ; end ;
75012: LD_VAR 0 2
75016: PPUSH
75017: LD_VAR 0 4
75021: PPUSH
75022: LD_VAR 0 5
75026: PPUSH
75027: CALL 76798 0 3
75031: GO 75034
75033: POP
// end ;
75034: LD_VAR 0 12
75038: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
75039: LD_INT 0
75041: PPUSH
75042: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
75043: LD_VAR 0 1
75047: PUSH
75048: LD_INT 1
75050: LESS
75051: PUSH
75052: LD_VAR 0 1
75056: PUSH
75057: LD_INT 3
75059: GREATER
75060: OR
75061: PUSH
75062: LD_VAR 0 5
75066: PPUSH
75067: LD_VAR 0 6
75071: PPUSH
75072: CALL_OW 428
75076: OR
75077: IFFALSE 75081
// exit ;
75079: GO 75801
// uc_side := your_side ;
75081: LD_ADDR_OWVAR 20
75085: PUSH
75086: LD_OWVAR 2
75090: ST_TO_ADDR
// uc_nation := nation ;
75091: LD_ADDR_OWVAR 21
75095: PUSH
75096: LD_VAR 0 1
75100: ST_TO_ADDR
// bc_level = 1 ;
75101: LD_ADDR_OWVAR 43
75105: PUSH
75106: LD_INT 1
75108: ST_TO_ADDR
// case btype of 1 :
75109: LD_VAR 0 2
75113: PUSH
75114: LD_INT 1
75116: DOUBLE
75117: EQUAL
75118: IFTRUE 75122
75120: GO 75133
75122: POP
// bc_type := b_depot ; 2 :
75123: LD_ADDR_OWVAR 42
75127: PUSH
75128: LD_INT 0
75130: ST_TO_ADDR
75131: GO 75745
75133: LD_INT 2
75135: DOUBLE
75136: EQUAL
75137: IFTRUE 75141
75139: GO 75152
75141: POP
// bc_type := b_warehouse ; 3 :
75142: LD_ADDR_OWVAR 42
75146: PUSH
75147: LD_INT 1
75149: ST_TO_ADDR
75150: GO 75745
75152: LD_INT 3
75154: DOUBLE
75155: EQUAL
75156: IFTRUE 75160
75158: GO 75171
75160: POP
// bc_type := b_lab ; 4 .. 9 :
75161: LD_ADDR_OWVAR 42
75165: PUSH
75166: LD_INT 6
75168: ST_TO_ADDR
75169: GO 75745
75171: LD_INT 4
75173: DOUBLE
75174: GREATEREQUAL
75175: IFFALSE 75183
75177: LD_INT 9
75179: DOUBLE
75180: LESSEQUAL
75181: IFTRUE 75185
75183: GO 75237
75185: POP
// begin bc_type := b_lab_half ;
75186: LD_ADDR_OWVAR 42
75190: PUSH
75191: LD_INT 7
75193: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
75194: LD_ADDR_OWVAR 44
75198: PUSH
75199: LD_INT 10
75201: PUSH
75202: LD_INT 11
75204: PUSH
75205: LD_INT 12
75207: PUSH
75208: LD_INT 15
75210: PUSH
75211: LD_INT 14
75213: PUSH
75214: LD_INT 13
75216: PUSH
75217: EMPTY
75218: LIST
75219: LIST
75220: LIST
75221: LIST
75222: LIST
75223: LIST
75224: PUSH
75225: LD_VAR 0 2
75229: PUSH
75230: LD_INT 3
75232: MINUS
75233: ARRAY
75234: ST_TO_ADDR
// end ; 10 .. 13 :
75235: GO 75745
75237: LD_INT 10
75239: DOUBLE
75240: GREATEREQUAL
75241: IFFALSE 75249
75243: LD_INT 13
75245: DOUBLE
75246: LESSEQUAL
75247: IFTRUE 75251
75249: GO 75328
75251: POP
// begin bc_type := b_lab_full ;
75252: LD_ADDR_OWVAR 42
75256: PUSH
75257: LD_INT 8
75259: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
75260: LD_ADDR_OWVAR 44
75264: PUSH
75265: LD_INT 10
75267: PUSH
75268: LD_INT 12
75270: PUSH
75271: LD_INT 14
75273: PUSH
75274: LD_INT 13
75276: PUSH
75277: EMPTY
75278: LIST
75279: LIST
75280: LIST
75281: LIST
75282: PUSH
75283: LD_VAR 0 2
75287: PUSH
75288: LD_INT 9
75290: MINUS
75291: ARRAY
75292: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
75293: LD_ADDR_OWVAR 45
75297: PUSH
75298: LD_INT 11
75300: PUSH
75301: LD_INT 15
75303: PUSH
75304: LD_INT 12
75306: PUSH
75307: LD_INT 15
75309: PUSH
75310: EMPTY
75311: LIST
75312: LIST
75313: LIST
75314: LIST
75315: PUSH
75316: LD_VAR 0 2
75320: PUSH
75321: LD_INT 9
75323: MINUS
75324: ARRAY
75325: ST_TO_ADDR
// end ; 14 :
75326: GO 75745
75328: LD_INT 14
75330: DOUBLE
75331: EQUAL
75332: IFTRUE 75336
75334: GO 75347
75336: POP
// bc_type := b_workshop ; 15 :
75337: LD_ADDR_OWVAR 42
75341: PUSH
75342: LD_INT 2
75344: ST_TO_ADDR
75345: GO 75745
75347: LD_INT 15
75349: DOUBLE
75350: EQUAL
75351: IFTRUE 75355
75353: GO 75366
75355: POP
// bc_type := b_factory ; 16 :
75356: LD_ADDR_OWVAR 42
75360: PUSH
75361: LD_INT 3
75363: ST_TO_ADDR
75364: GO 75745
75366: LD_INT 16
75368: DOUBLE
75369: EQUAL
75370: IFTRUE 75374
75372: GO 75385
75374: POP
// bc_type := b_ext_gun ; 17 :
75375: LD_ADDR_OWVAR 42
75379: PUSH
75380: LD_INT 17
75382: ST_TO_ADDR
75383: GO 75745
75385: LD_INT 17
75387: DOUBLE
75388: EQUAL
75389: IFTRUE 75393
75391: GO 75421
75393: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
75394: LD_ADDR_OWVAR 42
75398: PUSH
75399: LD_INT 19
75401: PUSH
75402: LD_INT 23
75404: PUSH
75405: LD_INT 19
75407: PUSH
75408: EMPTY
75409: LIST
75410: LIST
75411: LIST
75412: PUSH
75413: LD_VAR 0 1
75417: ARRAY
75418: ST_TO_ADDR
75419: GO 75745
75421: LD_INT 18
75423: DOUBLE
75424: EQUAL
75425: IFTRUE 75429
75427: GO 75440
75429: POP
// bc_type := b_ext_radar ; 19 :
75430: LD_ADDR_OWVAR 42
75434: PUSH
75435: LD_INT 20
75437: ST_TO_ADDR
75438: GO 75745
75440: LD_INT 19
75442: DOUBLE
75443: EQUAL
75444: IFTRUE 75448
75446: GO 75459
75448: POP
// bc_type := b_ext_radio ; 20 :
75449: LD_ADDR_OWVAR 42
75453: PUSH
75454: LD_INT 22
75456: ST_TO_ADDR
75457: GO 75745
75459: LD_INT 20
75461: DOUBLE
75462: EQUAL
75463: IFTRUE 75467
75465: GO 75478
75467: POP
// bc_type := b_ext_siberium ; 21 :
75468: LD_ADDR_OWVAR 42
75472: PUSH
75473: LD_INT 21
75475: ST_TO_ADDR
75476: GO 75745
75478: LD_INT 21
75480: DOUBLE
75481: EQUAL
75482: IFTRUE 75486
75484: GO 75497
75486: POP
// bc_type := b_ext_computer ; 22 :
75487: LD_ADDR_OWVAR 42
75491: PUSH
75492: LD_INT 24
75494: ST_TO_ADDR
75495: GO 75745
75497: LD_INT 22
75499: DOUBLE
75500: EQUAL
75501: IFTRUE 75505
75503: GO 75516
75505: POP
// bc_type := b_ext_track ; 23 :
75506: LD_ADDR_OWVAR 42
75510: PUSH
75511: LD_INT 16
75513: ST_TO_ADDR
75514: GO 75745
75516: LD_INT 23
75518: DOUBLE
75519: EQUAL
75520: IFTRUE 75524
75522: GO 75535
75524: POP
// bc_type := b_ext_laser ; 24 :
75525: LD_ADDR_OWVAR 42
75529: PUSH
75530: LD_INT 25
75532: ST_TO_ADDR
75533: GO 75745
75535: LD_INT 24
75537: DOUBLE
75538: EQUAL
75539: IFTRUE 75543
75541: GO 75554
75543: POP
// bc_type := b_control_tower ; 25 :
75544: LD_ADDR_OWVAR 42
75548: PUSH
75549: LD_INT 36
75551: ST_TO_ADDR
75552: GO 75745
75554: LD_INT 25
75556: DOUBLE
75557: EQUAL
75558: IFTRUE 75562
75560: GO 75573
75562: POP
// bc_type := b_breastwork ; 26 :
75563: LD_ADDR_OWVAR 42
75567: PUSH
75568: LD_INT 31
75570: ST_TO_ADDR
75571: GO 75745
75573: LD_INT 26
75575: DOUBLE
75576: EQUAL
75577: IFTRUE 75581
75579: GO 75592
75581: POP
// bc_type := b_bunker ; 27 :
75582: LD_ADDR_OWVAR 42
75586: PUSH
75587: LD_INT 32
75589: ST_TO_ADDR
75590: GO 75745
75592: LD_INT 27
75594: DOUBLE
75595: EQUAL
75596: IFTRUE 75600
75598: GO 75611
75600: POP
// bc_type := b_turret ; 28 :
75601: LD_ADDR_OWVAR 42
75605: PUSH
75606: LD_INT 33
75608: ST_TO_ADDR
75609: GO 75745
75611: LD_INT 28
75613: DOUBLE
75614: EQUAL
75615: IFTRUE 75619
75617: GO 75630
75619: POP
// bc_type := b_armoury ; 29 :
75620: LD_ADDR_OWVAR 42
75624: PUSH
75625: LD_INT 4
75627: ST_TO_ADDR
75628: GO 75745
75630: LD_INT 29
75632: DOUBLE
75633: EQUAL
75634: IFTRUE 75638
75636: GO 75649
75638: POP
// bc_type := b_barracks ; 30 :
75639: LD_ADDR_OWVAR 42
75643: PUSH
75644: LD_INT 5
75646: ST_TO_ADDR
75647: GO 75745
75649: LD_INT 30
75651: DOUBLE
75652: EQUAL
75653: IFTRUE 75657
75655: GO 75668
75657: POP
// bc_type := b_solar_power ; 31 :
75658: LD_ADDR_OWVAR 42
75662: PUSH
75663: LD_INT 27
75665: ST_TO_ADDR
75666: GO 75745
75668: LD_INT 31
75670: DOUBLE
75671: EQUAL
75672: IFTRUE 75676
75674: GO 75687
75676: POP
// bc_type := b_oil_power ; 32 :
75677: LD_ADDR_OWVAR 42
75681: PUSH
75682: LD_INT 26
75684: ST_TO_ADDR
75685: GO 75745
75687: LD_INT 32
75689: DOUBLE
75690: EQUAL
75691: IFTRUE 75695
75693: GO 75706
75695: POP
// bc_type := b_siberite_power ; 33 :
75696: LD_ADDR_OWVAR 42
75700: PUSH
75701: LD_INT 28
75703: ST_TO_ADDR
75704: GO 75745
75706: LD_INT 33
75708: DOUBLE
75709: EQUAL
75710: IFTRUE 75714
75712: GO 75725
75714: POP
// bc_type := b_oil_mine ; 34 :
75715: LD_ADDR_OWVAR 42
75719: PUSH
75720: LD_INT 29
75722: ST_TO_ADDR
75723: GO 75745
75725: LD_INT 34
75727: DOUBLE
75728: EQUAL
75729: IFTRUE 75733
75731: GO 75744
75733: POP
// bc_type := b_siberite_mine ; end ;
75734: LD_ADDR_OWVAR 42
75738: PUSH
75739: LD_INT 30
75741: ST_TO_ADDR
75742: GO 75745
75744: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
75745: LD_ADDR_VAR 0 8
75749: PUSH
75750: LD_VAR 0 5
75754: PPUSH
75755: LD_VAR 0 6
75759: PPUSH
75760: LD_VAR 0 3
75764: PPUSH
75765: CALL_OW 47
75769: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
75770: LD_OWVAR 42
75774: PUSH
75775: LD_INT 32
75777: PUSH
75778: LD_INT 33
75780: PUSH
75781: EMPTY
75782: LIST
75783: LIST
75784: IN
75785: IFFALSE 75801
// PlaceWeaponTurret ( b , weapon ) ;
75787: LD_VAR 0 8
75791: PPUSH
75792: LD_VAR 0 4
75796: PPUSH
75797: CALL_OW 431
// end ;
75801: LD_VAR 0 7
75805: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
75806: LD_INT 0
75808: PPUSH
75809: PPUSH
75810: PPUSH
75811: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75812: LD_ADDR_VAR 0 4
75816: PUSH
75817: LD_INT 22
75819: PUSH
75820: LD_OWVAR 2
75824: PUSH
75825: EMPTY
75826: LIST
75827: LIST
75828: PUSH
75829: LD_INT 2
75831: PUSH
75832: LD_INT 30
75834: PUSH
75835: LD_INT 0
75837: PUSH
75838: EMPTY
75839: LIST
75840: LIST
75841: PUSH
75842: LD_INT 30
75844: PUSH
75845: LD_INT 1
75847: PUSH
75848: EMPTY
75849: LIST
75850: LIST
75851: PUSH
75852: EMPTY
75853: LIST
75854: LIST
75855: LIST
75856: PUSH
75857: EMPTY
75858: LIST
75859: LIST
75860: PPUSH
75861: CALL_OW 69
75865: ST_TO_ADDR
// if not tmp then
75866: LD_VAR 0 4
75870: NOT
75871: IFFALSE 75875
// exit ;
75873: GO 75934
// for i in tmp do
75875: LD_ADDR_VAR 0 2
75879: PUSH
75880: LD_VAR 0 4
75884: PUSH
75885: FOR_IN
75886: IFFALSE 75932
// for j = 1 to 3 do
75888: LD_ADDR_VAR 0 3
75892: PUSH
75893: DOUBLE
75894: LD_INT 1
75896: DEC
75897: ST_TO_ADDR
75898: LD_INT 3
75900: PUSH
75901: FOR_TO
75902: IFFALSE 75928
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
75904: LD_VAR 0 2
75908: PPUSH
75909: CALL_OW 274
75913: PPUSH
75914: LD_VAR 0 3
75918: PPUSH
75919: LD_INT 99999
75921: PPUSH
75922: CALL_OW 277
75926: GO 75901
75928: POP
75929: POP
75930: GO 75885
75932: POP
75933: POP
// end ;
75934: LD_VAR 0 1
75938: RET
// export function hHackSetLevel10 ; var i , j ; begin
75939: LD_INT 0
75941: PPUSH
75942: PPUSH
75943: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75944: LD_ADDR_VAR 0 2
75948: PUSH
75949: LD_INT 21
75951: PUSH
75952: LD_INT 1
75954: PUSH
75955: EMPTY
75956: LIST
75957: LIST
75958: PPUSH
75959: CALL_OW 69
75963: PUSH
75964: FOR_IN
75965: IFFALSE 76017
// if IsSelected ( i ) then
75967: LD_VAR 0 2
75971: PPUSH
75972: CALL_OW 306
75976: IFFALSE 76015
// begin for j := 1 to 4 do
75978: LD_ADDR_VAR 0 3
75982: PUSH
75983: DOUBLE
75984: LD_INT 1
75986: DEC
75987: ST_TO_ADDR
75988: LD_INT 4
75990: PUSH
75991: FOR_TO
75992: IFFALSE 76013
// SetSkill ( i , j , 10 ) ;
75994: LD_VAR 0 2
75998: PPUSH
75999: LD_VAR 0 3
76003: PPUSH
76004: LD_INT 10
76006: PPUSH
76007: CALL_OW 237
76011: GO 75991
76013: POP
76014: POP
// end ;
76015: GO 75964
76017: POP
76018: POP
// end ;
76019: LD_VAR 0 1
76023: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
76024: LD_INT 0
76026: PPUSH
76027: PPUSH
76028: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
76029: LD_ADDR_VAR 0 2
76033: PUSH
76034: LD_INT 22
76036: PUSH
76037: LD_OWVAR 2
76041: PUSH
76042: EMPTY
76043: LIST
76044: LIST
76045: PUSH
76046: LD_INT 21
76048: PUSH
76049: LD_INT 1
76051: PUSH
76052: EMPTY
76053: LIST
76054: LIST
76055: PUSH
76056: EMPTY
76057: LIST
76058: LIST
76059: PPUSH
76060: CALL_OW 69
76064: PUSH
76065: FOR_IN
76066: IFFALSE 76107
// begin for j := 1 to 4 do
76068: LD_ADDR_VAR 0 3
76072: PUSH
76073: DOUBLE
76074: LD_INT 1
76076: DEC
76077: ST_TO_ADDR
76078: LD_INT 4
76080: PUSH
76081: FOR_TO
76082: IFFALSE 76103
// SetSkill ( i , j , 10 ) ;
76084: LD_VAR 0 2
76088: PPUSH
76089: LD_VAR 0 3
76093: PPUSH
76094: LD_INT 10
76096: PPUSH
76097: CALL_OW 237
76101: GO 76081
76103: POP
76104: POP
// end ;
76105: GO 76065
76107: POP
76108: POP
// end ;
76109: LD_VAR 0 1
76113: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
76114: LD_INT 0
76116: PPUSH
// uc_side := your_side ;
76117: LD_ADDR_OWVAR 20
76121: PUSH
76122: LD_OWVAR 2
76126: ST_TO_ADDR
// uc_nation := nation ;
76127: LD_ADDR_OWVAR 21
76131: PUSH
76132: LD_VAR 0 1
76136: ST_TO_ADDR
// InitHc ;
76137: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
76141: LD_INT 0
76143: PPUSH
76144: LD_VAR 0 2
76148: PPUSH
76149: LD_VAR 0 3
76153: PPUSH
76154: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
76158: LD_VAR 0 4
76162: PPUSH
76163: LD_VAR 0 5
76167: PPUSH
76168: CALL_OW 428
76172: PUSH
76173: LD_INT 0
76175: EQUAL
76176: IFFALSE 76200
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
76178: CALL_OW 44
76182: PPUSH
76183: LD_VAR 0 4
76187: PPUSH
76188: LD_VAR 0 5
76192: PPUSH
76193: LD_INT 1
76195: PPUSH
76196: CALL_OW 48
// end ;
76200: LD_VAR 0 6
76204: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
76205: LD_INT 0
76207: PPUSH
76208: PPUSH
// uc_side := your_side ;
76209: LD_ADDR_OWVAR 20
76213: PUSH
76214: LD_OWVAR 2
76218: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
76219: LD_VAR 0 1
76223: PUSH
76224: LD_INT 1
76226: PUSH
76227: LD_INT 2
76229: PUSH
76230: LD_INT 3
76232: PUSH
76233: LD_INT 4
76235: PUSH
76236: LD_INT 5
76238: PUSH
76239: EMPTY
76240: LIST
76241: LIST
76242: LIST
76243: LIST
76244: LIST
76245: IN
76246: IFFALSE 76258
// uc_nation := nation_american else
76248: LD_ADDR_OWVAR 21
76252: PUSH
76253: LD_INT 1
76255: ST_TO_ADDR
76256: GO 76301
// if chassis in [ 11 , 12 , 13 , 14 ] then
76258: LD_VAR 0 1
76262: PUSH
76263: LD_INT 11
76265: PUSH
76266: LD_INT 12
76268: PUSH
76269: LD_INT 13
76271: PUSH
76272: LD_INT 14
76274: PUSH
76275: EMPTY
76276: LIST
76277: LIST
76278: LIST
76279: LIST
76280: IN
76281: IFFALSE 76293
// uc_nation := nation_arabian else
76283: LD_ADDR_OWVAR 21
76287: PUSH
76288: LD_INT 2
76290: ST_TO_ADDR
76291: GO 76301
// uc_nation := nation_russian ;
76293: LD_ADDR_OWVAR 21
76297: PUSH
76298: LD_INT 3
76300: ST_TO_ADDR
// vc_chassis := chassis ;
76301: LD_ADDR_OWVAR 37
76305: PUSH
76306: LD_VAR 0 1
76310: ST_TO_ADDR
// vc_engine := engine ;
76311: LD_ADDR_OWVAR 39
76315: PUSH
76316: LD_VAR 0 2
76320: ST_TO_ADDR
// vc_control := control ;
76321: LD_ADDR_OWVAR 38
76325: PUSH
76326: LD_VAR 0 3
76330: ST_TO_ADDR
// vc_weapon := weapon ;
76331: LD_ADDR_OWVAR 40
76335: PUSH
76336: LD_VAR 0 4
76340: ST_TO_ADDR
// un := CreateVehicle ;
76341: LD_ADDR_VAR 0 8
76345: PUSH
76346: CALL_OW 45
76350: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
76351: LD_VAR 0 8
76355: PPUSH
76356: LD_INT 0
76358: PPUSH
76359: LD_INT 5
76361: PPUSH
76362: CALL_OW 12
76366: PPUSH
76367: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
76371: LD_VAR 0 8
76375: PPUSH
76376: LD_VAR 0 5
76380: PPUSH
76381: LD_VAR 0 6
76385: PPUSH
76386: LD_INT 1
76388: PPUSH
76389: CALL_OW 48
// end ;
76393: LD_VAR 0 7
76397: RET
// export hInvincible ; every 1 do
76398: GO 76400
76400: DISABLE
// hInvincible := [ ] ;
76401: LD_ADDR_EXP 131
76405: PUSH
76406: EMPTY
76407: ST_TO_ADDR
76408: END
// every 10 do var i ;
76409: GO 76411
76411: DISABLE
76412: LD_INT 0
76414: PPUSH
// begin enable ;
76415: ENABLE
// if not hInvincible then
76416: LD_EXP 131
76420: NOT
76421: IFFALSE 76425
// exit ;
76423: GO 76469
// for i in hInvincible do
76425: LD_ADDR_VAR 0 1
76429: PUSH
76430: LD_EXP 131
76434: PUSH
76435: FOR_IN
76436: IFFALSE 76467
// if GetLives ( i ) < 1000 then
76438: LD_VAR 0 1
76442: PPUSH
76443: CALL_OW 256
76447: PUSH
76448: LD_INT 1000
76450: LESS
76451: IFFALSE 76465
// SetLives ( i , 1000 ) ;
76453: LD_VAR 0 1
76457: PPUSH
76458: LD_INT 1000
76460: PPUSH
76461: CALL_OW 234
76465: GO 76435
76467: POP
76468: POP
// end ;
76469: PPOPN 1
76471: END
// export function hHackInvincible ; var i ; begin
76472: LD_INT 0
76474: PPUSH
76475: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
76476: LD_ADDR_VAR 0 2
76480: PUSH
76481: LD_INT 2
76483: PUSH
76484: LD_INT 21
76486: PUSH
76487: LD_INT 1
76489: PUSH
76490: EMPTY
76491: LIST
76492: LIST
76493: PUSH
76494: LD_INT 21
76496: PUSH
76497: LD_INT 2
76499: PUSH
76500: EMPTY
76501: LIST
76502: LIST
76503: PUSH
76504: EMPTY
76505: LIST
76506: LIST
76507: LIST
76508: PPUSH
76509: CALL_OW 69
76513: PUSH
76514: FOR_IN
76515: IFFALSE 76576
// if IsSelected ( i ) then
76517: LD_VAR 0 2
76521: PPUSH
76522: CALL_OW 306
76526: IFFALSE 76574
// begin if i in hInvincible then
76528: LD_VAR 0 2
76532: PUSH
76533: LD_EXP 131
76537: IN
76538: IFFALSE 76558
// hInvincible := hInvincible diff i else
76540: LD_ADDR_EXP 131
76544: PUSH
76545: LD_EXP 131
76549: PUSH
76550: LD_VAR 0 2
76554: DIFF
76555: ST_TO_ADDR
76556: GO 76574
// hInvincible := hInvincible union i ;
76558: LD_ADDR_EXP 131
76562: PUSH
76563: LD_EXP 131
76567: PUSH
76568: LD_VAR 0 2
76572: UNION
76573: ST_TO_ADDR
// end ;
76574: GO 76514
76576: POP
76577: POP
// end ;
76578: LD_VAR 0 1
76582: RET
// export function hHackInvisible ; var i , j ; begin
76583: LD_INT 0
76585: PPUSH
76586: PPUSH
76587: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
76588: LD_ADDR_VAR 0 2
76592: PUSH
76593: LD_INT 21
76595: PUSH
76596: LD_INT 1
76598: PUSH
76599: EMPTY
76600: LIST
76601: LIST
76602: PPUSH
76603: CALL_OW 69
76607: PUSH
76608: FOR_IN
76609: IFFALSE 76633
// if IsSelected ( i ) then
76611: LD_VAR 0 2
76615: PPUSH
76616: CALL_OW 306
76620: IFFALSE 76631
// ComForceInvisible ( i ) ;
76622: LD_VAR 0 2
76626: PPUSH
76627: CALL_OW 496
76631: GO 76608
76633: POP
76634: POP
// end ;
76635: LD_VAR 0 1
76639: RET
// export function hHackChangeYourSide ; begin
76640: LD_INT 0
76642: PPUSH
// if your_side = 8 then
76643: LD_OWVAR 2
76647: PUSH
76648: LD_INT 8
76650: EQUAL
76651: IFFALSE 76663
// your_side := 0 else
76653: LD_ADDR_OWVAR 2
76657: PUSH
76658: LD_INT 0
76660: ST_TO_ADDR
76661: GO 76677
// your_side := your_side + 1 ;
76663: LD_ADDR_OWVAR 2
76667: PUSH
76668: LD_OWVAR 2
76672: PUSH
76673: LD_INT 1
76675: PLUS
76676: ST_TO_ADDR
// end ;
76677: LD_VAR 0 1
76681: RET
// export function hHackChangeUnitSide ; var i , j ; begin
76682: LD_INT 0
76684: PPUSH
76685: PPUSH
76686: PPUSH
// for i in all_units do
76687: LD_ADDR_VAR 0 2
76691: PUSH
76692: LD_OWVAR 3
76696: PUSH
76697: FOR_IN
76698: IFFALSE 76776
// if IsSelected ( i ) then
76700: LD_VAR 0 2
76704: PPUSH
76705: CALL_OW 306
76709: IFFALSE 76774
// begin j := GetSide ( i ) ;
76711: LD_ADDR_VAR 0 3
76715: PUSH
76716: LD_VAR 0 2
76720: PPUSH
76721: CALL_OW 255
76725: ST_TO_ADDR
// if j = 8 then
76726: LD_VAR 0 3
76730: PUSH
76731: LD_INT 8
76733: EQUAL
76734: IFFALSE 76746
// j := 0 else
76736: LD_ADDR_VAR 0 3
76740: PUSH
76741: LD_INT 0
76743: ST_TO_ADDR
76744: GO 76760
// j := j + 1 ;
76746: LD_ADDR_VAR 0 3
76750: PUSH
76751: LD_VAR 0 3
76755: PUSH
76756: LD_INT 1
76758: PLUS
76759: ST_TO_ADDR
// SetSide ( i , j ) ;
76760: LD_VAR 0 2
76764: PPUSH
76765: LD_VAR 0 3
76769: PPUSH
76770: CALL_OW 235
// end ;
76774: GO 76697
76776: POP
76777: POP
// end ;
76778: LD_VAR 0 1
76782: RET
// export function hHackFog ; begin
76783: LD_INT 0
76785: PPUSH
// FogOff ( true ) ;
76786: LD_INT 1
76788: PPUSH
76789: CALL_OW 344
// end ;
76793: LD_VAR 0 1
76797: RET
// export function hHackTeleport ( unit , x , y ) ; begin
76798: LD_INT 0
76800: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
76801: LD_VAR 0 1
76805: PPUSH
76806: LD_VAR 0 2
76810: PPUSH
76811: LD_VAR 0 3
76815: PPUSH
76816: LD_INT 1
76818: PPUSH
76819: LD_INT 1
76821: PPUSH
76822: CALL_OW 483
// CenterOnXY ( x , y ) ;
76826: LD_VAR 0 2
76830: PPUSH
76831: LD_VAR 0 3
76835: PPUSH
76836: CALL_OW 84
// end ; end_of_file
76840: LD_VAR 0 4
76844: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76845: LD_VAR 0 1
76849: PUSH
76850: LD_INT 200
76852: DOUBLE
76853: GREATEREQUAL
76854: IFFALSE 76862
76856: LD_INT 299
76858: DOUBLE
76859: LESSEQUAL
76860: IFTRUE 76864
76862: GO 76896
76864: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76865: LD_VAR 0 1
76869: PPUSH
76870: LD_VAR 0 2
76874: PPUSH
76875: LD_VAR 0 3
76879: PPUSH
76880: LD_VAR 0 4
76884: PPUSH
76885: LD_VAR 0 5
76889: PPUSH
76890: CALL 77140 0 5
76894: GO 76973
76896: LD_INT 300
76898: DOUBLE
76899: GREATEREQUAL
76900: IFFALSE 76908
76902: LD_INT 399
76904: DOUBLE
76905: LESSEQUAL
76906: IFTRUE 76910
76908: GO 76972
76910: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76911: LD_VAR 0 1
76915: PPUSH
76916: LD_VAR 0 2
76920: PPUSH
76921: LD_VAR 0 3
76925: PPUSH
76926: LD_VAR 0 4
76930: PPUSH
76931: LD_VAR 0 5
76935: PPUSH
76936: LD_VAR 0 6
76940: PPUSH
76941: LD_VAR 0 7
76945: PPUSH
76946: LD_VAR 0 8
76950: PPUSH
76951: LD_VAR 0 9
76955: PPUSH
76956: LD_VAR 0 10
76960: PPUSH
76961: LD_VAR 0 11
76965: PPUSH
76966: CALL 74865 0 11
76970: GO 76973
76972: POP
// end ;
76973: PPOPN 11
76975: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76976: LD_VAR 0 1
76980: PPUSH
76981: LD_VAR 0 2
76985: PPUSH
76986: LD_VAR 0 3
76990: PPUSH
76991: LD_VAR 0 4
76995: PPUSH
76996: LD_VAR 0 5
77000: PPUSH
77001: CALL 77122 0 5
// end ; end_of_file
77005: PPOPN 5
77007: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
77008: LD_INT 0
77010: PPUSH
77011: PPUSH
77012: PPUSH
77013: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
77014: LD_VAR 0 1
77018: PPUSH
77019: CALL_OW 264
77023: PUSH
77024: LD_EXP 62
77028: EQUAL
77029: IFFALSE 77101
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
77031: LD_INT 68
77033: PPUSH
77034: LD_VAR 0 1
77038: PPUSH
77039: CALL_OW 255
77043: PPUSH
77044: CALL_OW 321
77048: PUSH
77049: LD_INT 2
77051: EQUAL
77052: IFFALSE 77064
// eff := 70 else
77054: LD_ADDR_VAR 0 4
77058: PUSH
77059: LD_INT 70
77061: ST_TO_ADDR
77062: GO 77072
// eff := 30 ;
77064: LD_ADDR_VAR 0 4
77068: PUSH
77069: LD_INT 30
77071: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
77072: LD_VAR 0 1
77076: PPUSH
77077: CALL_OW 250
77081: PPUSH
77082: LD_VAR 0 1
77086: PPUSH
77087: CALL_OW 251
77091: PPUSH
77092: LD_VAR 0 4
77096: PPUSH
77097: CALL_OW 495
// end ; end ;
77101: LD_VAR 0 2
77105: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
77106: LD_INT 0
77108: PPUSH
// end ;
77109: LD_VAR 0 4
77113: RET
// export function SOS_Command ( cmd ) ; begin
77114: LD_INT 0
77116: PPUSH
// end ;
77117: LD_VAR 0 2
77121: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
77122: LD_INT 0
77124: PPUSH
// if cmd = 121 then
77125: LD_VAR 0 1
77129: PUSH
77130: LD_INT 121
77132: EQUAL
77133: IFFALSE 77135
// end ;
77135: LD_VAR 0 6
77139: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
77140: LD_INT 0
77142: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
77143: LD_VAR 0 1
77147: PUSH
77148: LD_INT 250
77150: EQUAL
77151: PUSH
77152: LD_VAR 0 2
77156: PPUSH
77157: CALL_OW 264
77161: PUSH
77162: LD_EXP 65
77166: EQUAL
77167: AND
77168: IFFALSE 77189
// MinerPlaceMine ( unit , x , y ) ;
77170: LD_VAR 0 2
77174: PPUSH
77175: LD_VAR 0 4
77179: PPUSH
77180: LD_VAR 0 5
77184: PPUSH
77185: CALL 79538 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
77189: LD_VAR 0 1
77193: PUSH
77194: LD_INT 251
77196: EQUAL
77197: PUSH
77198: LD_VAR 0 2
77202: PPUSH
77203: CALL_OW 264
77207: PUSH
77208: LD_EXP 65
77212: EQUAL
77213: AND
77214: IFFALSE 77235
// MinerDetonateMine ( unit , x , y ) ;
77216: LD_VAR 0 2
77220: PPUSH
77221: LD_VAR 0 4
77225: PPUSH
77226: LD_VAR 0 5
77230: PPUSH
77231: CALL 79815 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
77235: LD_VAR 0 1
77239: PUSH
77240: LD_INT 252
77242: EQUAL
77243: PUSH
77244: LD_VAR 0 2
77248: PPUSH
77249: CALL_OW 264
77253: PUSH
77254: LD_EXP 65
77258: EQUAL
77259: AND
77260: IFFALSE 77281
// MinerCreateMinefield ( unit , x , y ) ;
77262: LD_VAR 0 2
77266: PPUSH
77267: LD_VAR 0 4
77271: PPUSH
77272: LD_VAR 0 5
77276: PPUSH
77277: CALL 80232 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
77281: LD_VAR 0 1
77285: PUSH
77286: LD_INT 253
77288: EQUAL
77289: PUSH
77290: LD_VAR 0 2
77294: PPUSH
77295: CALL_OW 257
77299: PUSH
77300: LD_INT 5
77302: EQUAL
77303: AND
77304: IFFALSE 77325
// ComBinocular ( unit , x , y ) ;
77306: LD_VAR 0 2
77310: PPUSH
77311: LD_VAR 0 4
77315: PPUSH
77316: LD_VAR 0 5
77320: PPUSH
77321: CALL 80603 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
77325: LD_VAR 0 1
77329: PUSH
77330: LD_INT 254
77332: EQUAL
77333: PUSH
77334: LD_VAR 0 2
77338: PPUSH
77339: CALL_OW 264
77343: PUSH
77344: LD_EXP 60
77348: EQUAL
77349: AND
77350: PUSH
77351: LD_VAR 0 3
77355: PPUSH
77356: CALL_OW 263
77360: PUSH
77361: LD_INT 3
77363: EQUAL
77364: AND
77365: IFFALSE 77381
// HackDestroyVehicle ( unit , selectedUnit ) ;
77367: LD_VAR 0 2
77371: PPUSH
77372: LD_VAR 0 3
77376: PPUSH
77377: CALL 78898 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
77381: LD_VAR 0 1
77385: PUSH
77386: LD_INT 255
77388: EQUAL
77389: PUSH
77390: LD_VAR 0 2
77394: PPUSH
77395: CALL_OW 264
77399: PUSH
77400: LD_INT 14
77402: PUSH
77403: LD_INT 53
77405: PUSH
77406: EMPTY
77407: LIST
77408: LIST
77409: IN
77410: AND
77411: PUSH
77412: LD_VAR 0 4
77416: PPUSH
77417: LD_VAR 0 5
77421: PPUSH
77422: CALL_OW 488
77426: AND
77427: IFFALSE 77451
// CutTreeXYR ( unit , x , y , 12 ) ;
77429: LD_VAR 0 2
77433: PPUSH
77434: LD_VAR 0 4
77438: PPUSH
77439: LD_VAR 0 5
77443: PPUSH
77444: LD_INT 12
77446: PPUSH
77447: CALL 77464 0 4
// end ;
77451: LD_VAR 0 6
77455: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
77456: LD_INT 0
77458: PPUSH
// end ;
77459: LD_VAR 0 4
77463: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
77464: LD_INT 0
77466: PPUSH
77467: PPUSH
77468: PPUSH
77469: PPUSH
77470: PPUSH
77471: PPUSH
77472: PPUSH
77473: PPUSH
77474: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
77475: LD_VAR 0 1
77479: NOT
77480: PUSH
77481: LD_VAR 0 2
77485: PPUSH
77486: LD_VAR 0 3
77490: PPUSH
77491: CALL_OW 488
77495: NOT
77496: OR
77497: PUSH
77498: LD_VAR 0 4
77502: NOT
77503: OR
77504: IFFALSE 77508
// exit ;
77506: GO 77848
// list := [ ] ;
77508: LD_ADDR_VAR 0 13
77512: PUSH
77513: EMPTY
77514: ST_TO_ADDR
// if x - r < 0 then
77515: LD_VAR 0 2
77519: PUSH
77520: LD_VAR 0 4
77524: MINUS
77525: PUSH
77526: LD_INT 0
77528: LESS
77529: IFFALSE 77541
// min_x := 0 else
77531: LD_ADDR_VAR 0 7
77535: PUSH
77536: LD_INT 0
77538: ST_TO_ADDR
77539: GO 77557
// min_x := x - r ;
77541: LD_ADDR_VAR 0 7
77545: PUSH
77546: LD_VAR 0 2
77550: PUSH
77551: LD_VAR 0 4
77555: MINUS
77556: ST_TO_ADDR
// if y - r < 0 then
77557: LD_VAR 0 3
77561: PUSH
77562: LD_VAR 0 4
77566: MINUS
77567: PUSH
77568: LD_INT 0
77570: LESS
77571: IFFALSE 77583
// min_y := 0 else
77573: LD_ADDR_VAR 0 8
77577: PUSH
77578: LD_INT 0
77580: ST_TO_ADDR
77581: GO 77599
// min_y := y - r ;
77583: LD_ADDR_VAR 0 8
77587: PUSH
77588: LD_VAR 0 3
77592: PUSH
77593: LD_VAR 0 4
77597: MINUS
77598: ST_TO_ADDR
// max_x := x + r ;
77599: LD_ADDR_VAR 0 9
77603: PUSH
77604: LD_VAR 0 2
77608: PUSH
77609: LD_VAR 0 4
77613: PLUS
77614: ST_TO_ADDR
// max_y := y + r ;
77615: LD_ADDR_VAR 0 10
77619: PUSH
77620: LD_VAR 0 3
77624: PUSH
77625: LD_VAR 0 4
77629: PLUS
77630: ST_TO_ADDR
// for _x = min_x to max_x do
77631: LD_ADDR_VAR 0 11
77635: PUSH
77636: DOUBLE
77637: LD_VAR 0 7
77641: DEC
77642: ST_TO_ADDR
77643: LD_VAR 0 9
77647: PUSH
77648: FOR_TO
77649: IFFALSE 77766
// for _y = min_y to max_y do
77651: LD_ADDR_VAR 0 12
77655: PUSH
77656: DOUBLE
77657: LD_VAR 0 8
77661: DEC
77662: ST_TO_ADDR
77663: LD_VAR 0 10
77667: PUSH
77668: FOR_TO
77669: IFFALSE 77762
// begin if not ValidHex ( _x , _y ) then
77671: LD_VAR 0 11
77675: PPUSH
77676: LD_VAR 0 12
77680: PPUSH
77681: CALL_OW 488
77685: NOT
77686: IFFALSE 77690
// continue ;
77688: GO 77668
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
77690: LD_VAR 0 11
77694: PPUSH
77695: LD_VAR 0 12
77699: PPUSH
77700: CALL_OW 351
77704: PUSH
77705: LD_VAR 0 11
77709: PPUSH
77710: LD_VAR 0 12
77714: PPUSH
77715: CALL_OW 554
77719: AND
77720: IFFALSE 77760
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
77722: LD_ADDR_VAR 0 13
77726: PUSH
77727: LD_VAR 0 13
77731: PPUSH
77732: LD_VAR 0 13
77736: PUSH
77737: LD_INT 1
77739: PLUS
77740: PPUSH
77741: LD_VAR 0 11
77745: PUSH
77746: LD_VAR 0 12
77750: PUSH
77751: EMPTY
77752: LIST
77753: LIST
77754: PPUSH
77755: CALL_OW 2
77759: ST_TO_ADDR
// end ;
77760: GO 77668
77762: POP
77763: POP
77764: GO 77648
77766: POP
77767: POP
// if not list then
77768: LD_VAR 0 13
77772: NOT
77773: IFFALSE 77777
// exit ;
77775: GO 77848
// for i in list do
77777: LD_ADDR_VAR 0 6
77781: PUSH
77782: LD_VAR 0 13
77786: PUSH
77787: FOR_IN
77788: IFFALSE 77846
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
77790: LD_VAR 0 1
77794: PPUSH
77795: LD_STRING M
77797: PUSH
77798: LD_VAR 0 6
77802: PUSH
77803: LD_INT 1
77805: ARRAY
77806: PUSH
77807: LD_VAR 0 6
77811: PUSH
77812: LD_INT 2
77814: ARRAY
77815: PUSH
77816: LD_INT 0
77818: PUSH
77819: LD_INT 0
77821: PUSH
77822: LD_INT 0
77824: PUSH
77825: LD_INT 0
77827: PUSH
77828: EMPTY
77829: LIST
77830: LIST
77831: LIST
77832: LIST
77833: LIST
77834: LIST
77835: LIST
77836: PUSH
77837: EMPTY
77838: LIST
77839: PPUSH
77840: CALL_OW 447
77844: GO 77787
77846: POP
77847: POP
// end ;
77848: LD_VAR 0 5
77852: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
77853: LD_EXP 134
77857: NOT
77858: IFFALSE 77908
77860: GO 77862
77862: DISABLE
// begin initHack := true ;
77863: LD_ADDR_EXP 134
77867: PUSH
77868: LD_INT 1
77870: ST_TO_ADDR
// hackTanks := [ ] ;
77871: LD_ADDR_EXP 135
77875: PUSH
77876: EMPTY
77877: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
77878: LD_ADDR_EXP 136
77882: PUSH
77883: EMPTY
77884: ST_TO_ADDR
// hackLimit := 3 ;
77885: LD_ADDR_EXP 137
77889: PUSH
77890: LD_INT 3
77892: ST_TO_ADDR
// hackDist := 12 ;
77893: LD_ADDR_EXP 138
77897: PUSH
77898: LD_INT 12
77900: ST_TO_ADDR
// hackCounter := [ ] ;
77901: LD_ADDR_EXP 139
77905: PUSH
77906: EMPTY
77907: ST_TO_ADDR
// end ;
77908: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
77909: LD_EXP 134
77913: PUSH
77914: LD_INT 34
77916: PUSH
77917: LD_EXP 60
77921: PUSH
77922: EMPTY
77923: LIST
77924: LIST
77925: PPUSH
77926: CALL_OW 69
77930: AND
77931: IFFALSE 78186
77933: GO 77935
77935: DISABLE
77936: LD_INT 0
77938: PPUSH
77939: PPUSH
// begin enable ;
77940: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
77941: LD_ADDR_VAR 0 1
77945: PUSH
77946: LD_INT 34
77948: PUSH
77949: LD_EXP 60
77953: PUSH
77954: EMPTY
77955: LIST
77956: LIST
77957: PPUSH
77958: CALL_OW 69
77962: PUSH
77963: FOR_IN
77964: IFFALSE 78184
// begin if not i in hackTanks then
77966: LD_VAR 0 1
77970: PUSH
77971: LD_EXP 135
77975: IN
77976: NOT
77977: IFFALSE 78060
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
77979: LD_ADDR_EXP 135
77983: PUSH
77984: LD_EXP 135
77988: PPUSH
77989: LD_EXP 135
77993: PUSH
77994: LD_INT 1
77996: PLUS
77997: PPUSH
77998: LD_VAR 0 1
78002: PPUSH
78003: CALL_OW 1
78007: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
78008: LD_ADDR_EXP 136
78012: PUSH
78013: LD_EXP 136
78017: PPUSH
78018: LD_EXP 136
78022: PUSH
78023: LD_INT 1
78025: PLUS
78026: PPUSH
78027: EMPTY
78028: PPUSH
78029: CALL_OW 1
78033: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
78034: LD_ADDR_EXP 139
78038: PUSH
78039: LD_EXP 139
78043: PPUSH
78044: LD_EXP 139
78048: PUSH
78049: LD_INT 1
78051: PLUS
78052: PPUSH
78053: EMPTY
78054: PPUSH
78055: CALL_OW 1
78059: ST_TO_ADDR
// end ; if not IsOk ( i ) then
78060: LD_VAR 0 1
78064: PPUSH
78065: CALL_OW 302
78069: NOT
78070: IFFALSE 78083
// begin HackUnlinkAll ( i ) ;
78072: LD_VAR 0 1
78076: PPUSH
78077: CALL 78189 0 1
// continue ;
78081: GO 77963
// end ; HackCheckCapturedStatus ( i ) ;
78083: LD_VAR 0 1
78087: PPUSH
78088: CALL 78632 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
78092: LD_ADDR_VAR 0 2
78096: PUSH
78097: LD_INT 81
78099: PUSH
78100: LD_VAR 0 1
78104: PPUSH
78105: CALL_OW 255
78109: PUSH
78110: EMPTY
78111: LIST
78112: LIST
78113: PUSH
78114: LD_INT 33
78116: PUSH
78117: LD_INT 3
78119: PUSH
78120: EMPTY
78121: LIST
78122: LIST
78123: PUSH
78124: LD_INT 91
78126: PUSH
78127: LD_VAR 0 1
78131: PUSH
78132: LD_EXP 138
78136: PUSH
78137: EMPTY
78138: LIST
78139: LIST
78140: LIST
78141: PUSH
78142: LD_INT 50
78144: PUSH
78145: EMPTY
78146: LIST
78147: PUSH
78148: EMPTY
78149: LIST
78150: LIST
78151: LIST
78152: LIST
78153: PPUSH
78154: CALL_OW 69
78158: ST_TO_ADDR
// if not tmp then
78159: LD_VAR 0 2
78163: NOT
78164: IFFALSE 78168
// continue ;
78166: GO 77963
// HackLink ( i , tmp ) ;
78168: LD_VAR 0 1
78172: PPUSH
78173: LD_VAR 0 2
78177: PPUSH
78178: CALL 78325 0 2
// end ;
78182: GO 77963
78184: POP
78185: POP
// end ;
78186: PPOPN 2
78188: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
78189: LD_INT 0
78191: PPUSH
78192: PPUSH
78193: PPUSH
// if not hack in hackTanks then
78194: LD_VAR 0 1
78198: PUSH
78199: LD_EXP 135
78203: IN
78204: NOT
78205: IFFALSE 78209
// exit ;
78207: GO 78320
// index := GetElementIndex ( hackTanks , hack ) ;
78209: LD_ADDR_VAR 0 4
78213: PUSH
78214: LD_EXP 135
78218: PPUSH
78219: LD_VAR 0 1
78223: PPUSH
78224: CALL 29402 0 2
78228: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
78229: LD_EXP 136
78233: PUSH
78234: LD_VAR 0 4
78238: ARRAY
78239: IFFALSE 78320
// begin for i in hackTanksCaptured [ index ] do
78241: LD_ADDR_VAR 0 3
78245: PUSH
78246: LD_EXP 136
78250: PUSH
78251: LD_VAR 0 4
78255: ARRAY
78256: PUSH
78257: FOR_IN
78258: IFFALSE 78284
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
78260: LD_VAR 0 3
78264: PUSH
78265: LD_INT 1
78267: ARRAY
78268: PPUSH
78269: LD_VAR 0 3
78273: PUSH
78274: LD_INT 2
78276: ARRAY
78277: PPUSH
78278: CALL_OW 235
78282: GO 78257
78284: POP
78285: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
78286: LD_ADDR_EXP 136
78290: PUSH
78291: LD_EXP 136
78295: PPUSH
78296: LD_VAR 0 4
78300: PPUSH
78301: EMPTY
78302: PPUSH
78303: CALL_OW 1
78307: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
78308: LD_VAR 0 1
78312: PPUSH
78313: LD_INT 0
78315: PPUSH
78316: CALL_OW 505
// end ; end ;
78320: LD_VAR 0 2
78324: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
78325: LD_INT 0
78327: PPUSH
78328: PPUSH
78329: PPUSH
// if not hack in hackTanks or not vehicles then
78330: LD_VAR 0 1
78334: PUSH
78335: LD_EXP 135
78339: IN
78340: NOT
78341: PUSH
78342: LD_VAR 0 2
78346: NOT
78347: OR
78348: IFFALSE 78352
// exit ;
78350: GO 78627
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
78352: LD_ADDR_VAR 0 2
78356: PUSH
78357: LD_VAR 0 1
78361: PPUSH
78362: LD_VAR 0 2
78366: PPUSH
78367: LD_INT 1
78369: PPUSH
78370: LD_INT 1
78372: PPUSH
78373: CALL 30052 0 4
78377: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
78378: LD_ADDR_VAR 0 5
78382: PUSH
78383: LD_EXP 135
78387: PPUSH
78388: LD_VAR 0 1
78392: PPUSH
78393: CALL 29402 0 2
78397: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
78398: LD_EXP 136
78402: PUSH
78403: LD_VAR 0 5
78407: ARRAY
78408: PUSH
78409: LD_EXP 137
78413: LESS
78414: IFFALSE 78603
// begin for i := 1 to vehicles do
78416: LD_ADDR_VAR 0 4
78420: PUSH
78421: DOUBLE
78422: LD_INT 1
78424: DEC
78425: ST_TO_ADDR
78426: LD_VAR 0 2
78430: PUSH
78431: FOR_TO
78432: IFFALSE 78601
// begin if hackTanksCaptured [ index ] = hackLimit then
78434: LD_EXP 136
78438: PUSH
78439: LD_VAR 0 5
78443: ARRAY
78444: PUSH
78445: LD_EXP 137
78449: EQUAL
78450: IFFALSE 78454
// break ;
78452: GO 78601
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
78454: LD_ADDR_EXP 139
78458: PUSH
78459: LD_EXP 139
78463: PPUSH
78464: LD_VAR 0 5
78468: PPUSH
78469: LD_EXP 139
78473: PUSH
78474: LD_VAR 0 5
78478: ARRAY
78479: PUSH
78480: LD_INT 1
78482: PLUS
78483: PPUSH
78484: CALL_OW 1
78488: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
78489: LD_ADDR_EXP 136
78493: PUSH
78494: LD_EXP 136
78498: PPUSH
78499: LD_VAR 0 5
78503: PUSH
78504: LD_EXP 136
78508: PUSH
78509: LD_VAR 0 5
78513: ARRAY
78514: PUSH
78515: LD_INT 1
78517: PLUS
78518: PUSH
78519: EMPTY
78520: LIST
78521: LIST
78522: PPUSH
78523: LD_VAR 0 2
78527: PUSH
78528: LD_VAR 0 4
78532: ARRAY
78533: PUSH
78534: LD_VAR 0 2
78538: PUSH
78539: LD_VAR 0 4
78543: ARRAY
78544: PPUSH
78545: CALL_OW 255
78549: PUSH
78550: EMPTY
78551: LIST
78552: LIST
78553: PPUSH
78554: CALL 29617 0 3
78558: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
78559: LD_VAR 0 2
78563: PUSH
78564: LD_VAR 0 4
78568: ARRAY
78569: PPUSH
78570: LD_VAR 0 1
78574: PPUSH
78575: CALL_OW 255
78579: PPUSH
78580: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
78584: LD_VAR 0 2
78588: PUSH
78589: LD_VAR 0 4
78593: ARRAY
78594: PPUSH
78595: CALL_OW 141
// end ;
78599: GO 78431
78601: POP
78602: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
78603: LD_VAR 0 1
78607: PPUSH
78608: LD_EXP 136
78612: PUSH
78613: LD_VAR 0 5
78617: ARRAY
78618: PUSH
78619: LD_INT 0
78621: PLUS
78622: PPUSH
78623: CALL_OW 505
// end ;
78627: LD_VAR 0 3
78631: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
78632: LD_INT 0
78634: PPUSH
78635: PPUSH
78636: PPUSH
78637: PPUSH
// if not hack in hackTanks then
78638: LD_VAR 0 1
78642: PUSH
78643: LD_EXP 135
78647: IN
78648: NOT
78649: IFFALSE 78653
// exit ;
78651: GO 78893
// index := GetElementIndex ( hackTanks , hack ) ;
78653: LD_ADDR_VAR 0 4
78657: PUSH
78658: LD_EXP 135
78662: PPUSH
78663: LD_VAR 0 1
78667: PPUSH
78668: CALL 29402 0 2
78672: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
78673: LD_ADDR_VAR 0 3
78677: PUSH
78678: DOUBLE
78679: LD_EXP 136
78683: PUSH
78684: LD_VAR 0 4
78688: ARRAY
78689: INC
78690: ST_TO_ADDR
78691: LD_INT 1
78693: PUSH
78694: FOR_DOWNTO
78695: IFFALSE 78867
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
78697: LD_ADDR_VAR 0 5
78701: PUSH
78702: LD_EXP 136
78706: PUSH
78707: LD_VAR 0 4
78711: ARRAY
78712: PUSH
78713: LD_VAR 0 3
78717: ARRAY
78718: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
78719: LD_VAR 0 5
78723: PUSH
78724: LD_INT 1
78726: ARRAY
78727: PPUSH
78728: CALL_OW 302
78732: NOT
78733: PUSH
78734: LD_VAR 0 5
78738: PUSH
78739: LD_INT 1
78741: ARRAY
78742: PPUSH
78743: CALL_OW 255
78747: PUSH
78748: LD_VAR 0 1
78752: PPUSH
78753: CALL_OW 255
78757: NONEQUAL
78758: OR
78759: IFFALSE 78865
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
78761: LD_VAR 0 5
78765: PUSH
78766: LD_INT 1
78768: ARRAY
78769: PPUSH
78770: CALL_OW 305
78774: PUSH
78775: LD_VAR 0 5
78779: PUSH
78780: LD_INT 1
78782: ARRAY
78783: PPUSH
78784: CALL_OW 255
78788: PUSH
78789: LD_VAR 0 1
78793: PPUSH
78794: CALL_OW 255
78798: EQUAL
78799: AND
78800: IFFALSE 78824
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
78802: LD_VAR 0 5
78806: PUSH
78807: LD_INT 1
78809: ARRAY
78810: PPUSH
78811: LD_VAR 0 5
78815: PUSH
78816: LD_INT 2
78818: ARRAY
78819: PPUSH
78820: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
78824: LD_ADDR_EXP 136
78828: PUSH
78829: LD_EXP 136
78833: PPUSH
78834: LD_VAR 0 4
78838: PPUSH
78839: LD_EXP 136
78843: PUSH
78844: LD_VAR 0 4
78848: ARRAY
78849: PPUSH
78850: LD_VAR 0 3
78854: PPUSH
78855: CALL_OW 3
78859: PPUSH
78860: CALL_OW 1
78864: ST_TO_ADDR
// end ; end ;
78865: GO 78694
78867: POP
78868: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
78869: LD_VAR 0 1
78873: PPUSH
78874: LD_EXP 136
78878: PUSH
78879: LD_VAR 0 4
78883: ARRAY
78884: PUSH
78885: LD_INT 0
78887: PLUS
78888: PPUSH
78889: CALL_OW 505
// end ;
78893: LD_VAR 0 2
78897: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
78898: LD_INT 0
78900: PPUSH
78901: PPUSH
78902: PPUSH
78903: PPUSH
// if not hack in hackTanks then
78904: LD_VAR 0 1
78908: PUSH
78909: LD_EXP 135
78913: IN
78914: NOT
78915: IFFALSE 78919
// exit ;
78917: GO 79004
// index := GetElementIndex ( hackTanks , hack ) ;
78919: LD_ADDR_VAR 0 5
78923: PUSH
78924: LD_EXP 135
78928: PPUSH
78929: LD_VAR 0 1
78933: PPUSH
78934: CALL 29402 0 2
78938: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
78939: LD_ADDR_VAR 0 4
78943: PUSH
78944: DOUBLE
78945: LD_INT 1
78947: DEC
78948: ST_TO_ADDR
78949: LD_EXP 136
78953: PUSH
78954: LD_VAR 0 5
78958: ARRAY
78959: PUSH
78960: FOR_TO
78961: IFFALSE 79002
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
78963: LD_EXP 136
78967: PUSH
78968: LD_VAR 0 5
78972: ARRAY
78973: PUSH
78974: LD_VAR 0 4
78978: ARRAY
78979: PUSH
78980: LD_INT 1
78982: ARRAY
78983: PUSH
78984: LD_VAR 0 2
78988: EQUAL
78989: IFFALSE 79000
// KillUnit ( vehicle ) ;
78991: LD_VAR 0 2
78995: PPUSH
78996: CALL_OW 66
79000: GO 78960
79002: POP
79003: POP
// end ;
79004: LD_VAR 0 3
79008: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
79009: LD_EXP 140
79013: NOT
79014: IFFALSE 79049
79016: GO 79018
79018: DISABLE
// begin initMiner := true ;
79019: LD_ADDR_EXP 140
79023: PUSH
79024: LD_INT 1
79026: ST_TO_ADDR
// minersList := [ ] ;
79027: LD_ADDR_EXP 141
79031: PUSH
79032: EMPTY
79033: ST_TO_ADDR
// minerMinesList := [ ] ;
79034: LD_ADDR_EXP 142
79038: PUSH
79039: EMPTY
79040: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
79041: LD_ADDR_EXP 143
79045: PUSH
79046: LD_INT 5
79048: ST_TO_ADDR
// end ;
79049: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
79050: LD_EXP 140
79054: PUSH
79055: LD_INT 34
79057: PUSH
79058: LD_EXP 65
79062: PUSH
79063: EMPTY
79064: LIST
79065: LIST
79066: PPUSH
79067: CALL_OW 69
79071: AND
79072: IFFALSE 79535
79074: GO 79076
79076: DISABLE
79077: LD_INT 0
79079: PPUSH
79080: PPUSH
79081: PPUSH
79082: PPUSH
// begin enable ;
79083: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
79084: LD_ADDR_VAR 0 1
79088: PUSH
79089: LD_INT 34
79091: PUSH
79092: LD_EXP 65
79096: PUSH
79097: EMPTY
79098: LIST
79099: LIST
79100: PPUSH
79101: CALL_OW 69
79105: PUSH
79106: FOR_IN
79107: IFFALSE 79179
// begin if not i in minersList then
79109: LD_VAR 0 1
79113: PUSH
79114: LD_EXP 141
79118: IN
79119: NOT
79120: IFFALSE 79177
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
79122: LD_ADDR_EXP 141
79126: PUSH
79127: LD_EXP 141
79131: PPUSH
79132: LD_EXP 141
79136: PUSH
79137: LD_INT 1
79139: PLUS
79140: PPUSH
79141: LD_VAR 0 1
79145: PPUSH
79146: CALL_OW 1
79150: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
79151: LD_ADDR_EXP 142
79155: PUSH
79156: LD_EXP 142
79160: PPUSH
79161: LD_EXP 142
79165: PUSH
79166: LD_INT 1
79168: PLUS
79169: PPUSH
79170: EMPTY
79171: PPUSH
79172: CALL_OW 1
79176: ST_TO_ADDR
// end end ;
79177: GO 79106
79179: POP
79180: POP
// for i := minerMinesList downto 1 do
79181: LD_ADDR_VAR 0 1
79185: PUSH
79186: DOUBLE
79187: LD_EXP 142
79191: INC
79192: ST_TO_ADDR
79193: LD_INT 1
79195: PUSH
79196: FOR_DOWNTO
79197: IFFALSE 79533
// begin if IsLive ( minersList [ i ] ) then
79199: LD_EXP 141
79203: PUSH
79204: LD_VAR 0 1
79208: ARRAY
79209: PPUSH
79210: CALL_OW 300
79214: IFFALSE 79242
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
79216: LD_EXP 141
79220: PUSH
79221: LD_VAR 0 1
79225: ARRAY
79226: PPUSH
79227: LD_EXP 142
79231: PUSH
79232: LD_VAR 0 1
79236: ARRAY
79237: PPUSH
79238: CALL_OW 505
// if not minerMinesList [ i ] then
79242: LD_EXP 142
79246: PUSH
79247: LD_VAR 0 1
79251: ARRAY
79252: NOT
79253: IFFALSE 79257
// continue ;
79255: GO 79196
// for j := minerMinesList [ i ] downto 1 do
79257: LD_ADDR_VAR 0 2
79261: PUSH
79262: DOUBLE
79263: LD_EXP 142
79267: PUSH
79268: LD_VAR 0 1
79272: ARRAY
79273: INC
79274: ST_TO_ADDR
79275: LD_INT 1
79277: PUSH
79278: FOR_DOWNTO
79279: IFFALSE 79529
// begin side := GetSide ( minersList [ i ] ) ;
79281: LD_ADDR_VAR 0 3
79285: PUSH
79286: LD_EXP 141
79290: PUSH
79291: LD_VAR 0 1
79295: ARRAY
79296: PPUSH
79297: CALL_OW 255
79301: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
79302: LD_ADDR_VAR 0 4
79306: PUSH
79307: LD_EXP 142
79311: PUSH
79312: LD_VAR 0 1
79316: ARRAY
79317: PUSH
79318: LD_VAR 0 2
79322: ARRAY
79323: PUSH
79324: LD_INT 1
79326: ARRAY
79327: PPUSH
79328: LD_EXP 142
79332: PUSH
79333: LD_VAR 0 1
79337: ARRAY
79338: PUSH
79339: LD_VAR 0 2
79343: ARRAY
79344: PUSH
79345: LD_INT 2
79347: ARRAY
79348: PPUSH
79349: CALL_OW 428
79353: ST_TO_ADDR
// if not tmp then
79354: LD_VAR 0 4
79358: NOT
79359: IFFALSE 79363
// continue ;
79361: GO 79278
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
79363: LD_VAR 0 4
79367: PUSH
79368: LD_INT 81
79370: PUSH
79371: LD_VAR 0 3
79375: PUSH
79376: EMPTY
79377: LIST
79378: LIST
79379: PPUSH
79380: CALL_OW 69
79384: IN
79385: PUSH
79386: LD_EXP 142
79390: PUSH
79391: LD_VAR 0 1
79395: ARRAY
79396: PUSH
79397: LD_VAR 0 2
79401: ARRAY
79402: PUSH
79403: LD_INT 1
79405: ARRAY
79406: PPUSH
79407: LD_EXP 142
79411: PUSH
79412: LD_VAR 0 1
79416: ARRAY
79417: PUSH
79418: LD_VAR 0 2
79422: ARRAY
79423: PUSH
79424: LD_INT 2
79426: ARRAY
79427: PPUSH
79428: CALL_OW 458
79432: AND
79433: IFFALSE 79527
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
79435: LD_EXP 142
79439: PUSH
79440: LD_VAR 0 1
79444: ARRAY
79445: PUSH
79446: LD_VAR 0 2
79450: ARRAY
79451: PUSH
79452: LD_INT 1
79454: ARRAY
79455: PPUSH
79456: LD_EXP 142
79460: PUSH
79461: LD_VAR 0 1
79465: ARRAY
79466: PUSH
79467: LD_VAR 0 2
79471: ARRAY
79472: PUSH
79473: LD_INT 2
79475: ARRAY
79476: PPUSH
79477: LD_VAR 0 3
79481: PPUSH
79482: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
79486: LD_ADDR_EXP 142
79490: PUSH
79491: LD_EXP 142
79495: PPUSH
79496: LD_VAR 0 1
79500: PPUSH
79501: LD_EXP 142
79505: PUSH
79506: LD_VAR 0 1
79510: ARRAY
79511: PPUSH
79512: LD_VAR 0 2
79516: PPUSH
79517: CALL_OW 3
79521: PPUSH
79522: CALL_OW 1
79526: ST_TO_ADDR
// end ; end ;
79527: GO 79278
79529: POP
79530: POP
// end ;
79531: GO 79196
79533: POP
79534: POP
// end ;
79535: PPOPN 4
79537: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
79538: LD_INT 0
79540: PPUSH
79541: PPUSH
// result := false ;
79542: LD_ADDR_VAR 0 4
79546: PUSH
79547: LD_INT 0
79549: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
79550: LD_VAR 0 1
79554: PPUSH
79555: CALL_OW 264
79559: PUSH
79560: LD_EXP 65
79564: EQUAL
79565: NOT
79566: IFFALSE 79570
// exit ;
79568: GO 79810
// index := GetElementIndex ( minersList , unit ) ;
79570: LD_ADDR_VAR 0 5
79574: PUSH
79575: LD_EXP 141
79579: PPUSH
79580: LD_VAR 0 1
79584: PPUSH
79585: CALL 29402 0 2
79589: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
79590: LD_EXP 142
79594: PUSH
79595: LD_VAR 0 5
79599: ARRAY
79600: PUSH
79601: LD_EXP 143
79605: GREATEREQUAL
79606: IFFALSE 79610
// exit ;
79608: GO 79810
// ComMoveXY ( unit , x , y ) ;
79610: LD_VAR 0 1
79614: PPUSH
79615: LD_VAR 0 2
79619: PPUSH
79620: LD_VAR 0 3
79624: PPUSH
79625: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
79629: LD_INT 35
79631: PPUSH
79632: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
79636: LD_VAR 0 1
79640: PPUSH
79641: LD_VAR 0 2
79645: PPUSH
79646: LD_VAR 0 3
79650: PPUSH
79651: CALL 60174 0 3
79655: NOT
79656: PUSH
79657: LD_VAR 0 1
79661: PPUSH
79662: CALL_OW 314
79666: AND
79667: IFFALSE 79671
// exit ;
79669: GO 79810
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
79671: LD_VAR 0 2
79675: PPUSH
79676: LD_VAR 0 3
79680: PPUSH
79681: CALL_OW 428
79685: PUSH
79686: LD_VAR 0 1
79690: EQUAL
79691: PUSH
79692: LD_VAR 0 1
79696: PPUSH
79697: CALL_OW 314
79701: NOT
79702: AND
79703: IFFALSE 79629
// PlaySoundXY ( x , y , PlantMine ) ;
79705: LD_VAR 0 2
79709: PPUSH
79710: LD_VAR 0 3
79714: PPUSH
79715: LD_STRING PlantMine
79717: PPUSH
79718: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
79722: LD_VAR 0 2
79726: PPUSH
79727: LD_VAR 0 3
79731: PPUSH
79732: LD_VAR 0 1
79736: PPUSH
79737: CALL_OW 255
79741: PPUSH
79742: LD_INT 0
79744: PPUSH
79745: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
79749: LD_ADDR_EXP 142
79753: PUSH
79754: LD_EXP 142
79758: PPUSH
79759: LD_VAR 0 5
79763: PUSH
79764: LD_EXP 142
79768: PUSH
79769: LD_VAR 0 5
79773: ARRAY
79774: PUSH
79775: LD_INT 1
79777: PLUS
79778: PUSH
79779: EMPTY
79780: LIST
79781: LIST
79782: PPUSH
79783: LD_VAR 0 2
79787: PUSH
79788: LD_VAR 0 3
79792: PUSH
79793: EMPTY
79794: LIST
79795: LIST
79796: PPUSH
79797: CALL 29617 0 3
79801: ST_TO_ADDR
// result := true ;
79802: LD_ADDR_VAR 0 4
79806: PUSH
79807: LD_INT 1
79809: ST_TO_ADDR
// end ;
79810: LD_VAR 0 4
79814: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
79815: LD_INT 0
79817: PPUSH
79818: PPUSH
79819: PPUSH
// if not unit in minersList then
79820: LD_VAR 0 1
79824: PUSH
79825: LD_EXP 141
79829: IN
79830: NOT
79831: IFFALSE 79835
// exit ;
79833: GO 80227
// index := GetElementIndex ( minersList , unit ) ;
79835: LD_ADDR_VAR 0 6
79839: PUSH
79840: LD_EXP 141
79844: PPUSH
79845: LD_VAR 0 1
79849: PPUSH
79850: CALL 29402 0 2
79854: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
79855: LD_ADDR_VAR 0 5
79859: PUSH
79860: DOUBLE
79861: LD_EXP 142
79865: PUSH
79866: LD_VAR 0 6
79870: ARRAY
79871: INC
79872: ST_TO_ADDR
79873: LD_INT 1
79875: PUSH
79876: FOR_DOWNTO
79877: IFFALSE 80038
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
79879: LD_EXP 142
79883: PUSH
79884: LD_VAR 0 6
79888: ARRAY
79889: PUSH
79890: LD_VAR 0 5
79894: ARRAY
79895: PUSH
79896: LD_INT 1
79898: ARRAY
79899: PUSH
79900: LD_VAR 0 2
79904: EQUAL
79905: PUSH
79906: LD_EXP 142
79910: PUSH
79911: LD_VAR 0 6
79915: ARRAY
79916: PUSH
79917: LD_VAR 0 5
79921: ARRAY
79922: PUSH
79923: LD_INT 2
79925: ARRAY
79926: PUSH
79927: LD_VAR 0 3
79931: EQUAL
79932: AND
79933: IFFALSE 80036
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
79935: LD_EXP 142
79939: PUSH
79940: LD_VAR 0 6
79944: ARRAY
79945: PUSH
79946: LD_VAR 0 5
79950: ARRAY
79951: PUSH
79952: LD_INT 1
79954: ARRAY
79955: PPUSH
79956: LD_EXP 142
79960: PUSH
79961: LD_VAR 0 6
79965: ARRAY
79966: PUSH
79967: LD_VAR 0 5
79971: ARRAY
79972: PUSH
79973: LD_INT 2
79975: ARRAY
79976: PPUSH
79977: LD_VAR 0 1
79981: PPUSH
79982: CALL_OW 255
79986: PPUSH
79987: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
79991: LD_ADDR_EXP 142
79995: PUSH
79996: LD_EXP 142
80000: PPUSH
80001: LD_VAR 0 6
80005: PPUSH
80006: LD_EXP 142
80010: PUSH
80011: LD_VAR 0 6
80015: ARRAY
80016: PPUSH
80017: LD_VAR 0 5
80021: PPUSH
80022: CALL_OW 3
80026: PPUSH
80027: CALL_OW 1
80031: ST_TO_ADDR
// exit ;
80032: POP
80033: POP
80034: GO 80227
// end ; end ;
80036: GO 79876
80038: POP
80039: POP
// for i := minerMinesList [ index ] downto 1 do
80040: LD_ADDR_VAR 0 5
80044: PUSH
80045: DOUBLE
80046: LD_EXP 142
80050: PUSH
80051: LD_VAR 0 6
80055: ARRAY
80056: INC
80057: ST_TO_ADDR
80058: LD_INT 1
80060: PUSH
80061: FOR_DOWNTO
80062: IFFALSE 80225
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
80064: LD_EXP 142
80068: PUSH
80069: LD_VAR 0 6
80073: ARRAY
80074: PUSH
80075: LD_VAR 0 5
80079: ARRAY
80080: PUSH
80081: LD_INT 1
80083: ARRAY
80084: PPUSH
80085: LD_EXP 142
80089: PUSH
80090: LD_VAR 0 6
80094: ARRAY
80095: PUSH
80096: LD_VAR 0 5
80100: ARRAY
80101: PUSH
80102: LD_INT 2
80104: ARRAY
80105: PPUSH
80106: LD_VAR 0 2
80110: PPUSH
80111: LD_VAR 0 3
80115: PPUSH
80116: CALL_OW 298
80120: PUSH
80121: LD_INT 6
80123: LESS
80124: IFFALSE 80223
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
80126: LD_EXP 142
80130: PUSH
80131: LD_VAR 0 6
80135: ARRAY
80136: PUSH
80137: LD_VAR 0 5
80141: ARRAY
80142: PUSH
80143: LD_INT 1
80145: ARRAY
80146: PPUSH
80147: LD_EXP 142
80151: PUSH
80152: LD_VAR 0 6
80156: ARRAY
80157: PUSH
80158: LD_VAR 0 5
80162: ARRAY
80163: PUSH
80164: LD_INT 2
80166: ARRAY
80167: PPUSH
80168: LD_VAR 0 1
80172: PPUSH
80173: CALL_OW 255
80177: PPUSH
80178: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
80182: LD_ADDR_EXP 142
80186: PUSH
80187: LD_EXP 142
80191: PPUSH
80192: LD_VAR 0 6
80196: PPUSH
80197: LD_EXP 142
80201: PUSH
80202: LD_VAR 0 6
80206: ARRAY
80207: PPUSH
80208: LD_VAR 0 5
80212: PPUSH
80213: CALL_OW 3
80217: PPUSH
80218: CALL_OW 1
80222: ST_TO_ADDR
// end ; end ;
80223: GO 80061
80225: POP
80226: POP
// end ;
80227: LD_VAR 0 4
80231: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
80232: LD_INT 0
80234: PPUSH
80235: PPUSH
80236: PPUSH
80237: PPUSH
80238: PPUSH
80239: PPUSH
80240: PPUSH
80241: PPUSH
80242: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
80243: LD_VAR 0 1
80247: PPUSH
80248: CALL_OW 264
80252: PUSH
80253: LD_EXP 65
80257: EQUAL
80258: NOT
80259: PUSH
80260: LD_VAR 0 1
80264: PUSH
80265: LD_EXP 141
80269: IN
80270: NOT
80271: OR
80272: IFFALSE 80276
// exit ;
80274: GO 80598
// index := GetElementIndex ( minersList , unit ) ;
80276: LD_ADDR_VAR 0 6
80280: PUSH
80281: LD_EXP 141
80285: PPUSH
80286: LD_VAR 0 1
80290: PPUSH
80291: CALL 29402 0 2
80295: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
80296: LD_ADDR_VAR 0 8
80300: PUSH
80301: LD_EXP 143
80305: PUSH
80306: LD_EXP 142
80310: PUSH
80311: LD_VAR 0 6
80315: ARRAY
80316: MINUS
80317: ST_TO_ADDR
// if not minesFreeAmount then
80318: LD_VAR 0 8
80322: NOT
80323: IFFALSE 80327
// exit ;
80325: GO 80598
// tmp := [ ] ;
80327: LD_ADDR_VAR 0 7
80331: PUSH
80332: EMPTY
80333: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
80334: LD_ADDR_VAR 0 5
80338: PUSH
80339: DOUBLE
80340: LD_INT 1
80342: DEC
80343: ST_TO_ADDR
80344: LD_VAR 0 8
80348: PUSH
80349: FOR_TO
80350: IFFALSE 80545
// begin _d := rand ( 0 , 5 ) ;
80352: LD_ADDR_VAR 0 11
80356: PUSH
80357: LD_INT 0
80359: PPUSH
80360: LD_INT 5
80362: PPUSH
80363: CALL_OW 12
80367: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
80368: LD_ADDR_VAR 0 12
80372: PUSH
80373: LD_INT 2
80375: PPUSH
80376: LD_INT 6
80378: PPUSH
80379: CALL_OW 12
80383: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
80384: LD_ADDR_VAR 0 9
80388: PUSH
80389: LD_VAR 0 2
80393: PPUSH
80394: LD_VAR 0 11
80398: PPUSH
80399: LD_VAR 0 12
80403: PPUSH
80404: CALL_OW 272
80408: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
80409: LD_ADDR_VAR 0 10
80413: PUSH
80414: LD_VAR 0 3
80418: PPUSH
80419: LD_VAR 0 11
80423: PPUSH
80424: LD_VAR 0 12
80428: PPUSH
80429: CALL_OW 273
80433: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
80434: LD_VAR 0 9
80438: PPUSH
80439: LD_VAR 0 10
80443: PPUSH
80444: CALL_OW 488
80448: PUSH
80449: LD_VAR 0 9
80453: PUSH
80454: LD_VAR 0 10
80458: PUSH
80459: EMPTY
80460: LIST
80461: LIST
80462: PUSH
80463: LD_VAR 0 7
80467: IN
80468: NOT
80469: AND
80470: PUSH
80471: LD_VAR 0 9
80475: PPUSH
80476: LD_VAR 0 10
80480: PPUSH
80481: CALL_OW 458
80485: NOT
80486: AND
80487: IFFALSE 80529
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
80489: LD_ADDR_VAR 0 7
80493: PUSH
80494: LD_VAR 0 7
80498: PPUSH
80499: LD_VAR 0 7
80503: PUSH
80504: LD_INT 1
80506: PLUS
80507: PPUSH
80508: LD_VAR 0 9
80512: PUSH
80513: LD_VAR 0 10
80517: PUSH
80518: EMPTY
80519: LIST
80520: LIST
80521: PPUSH
80522: CALL_OW 1
80526: ST_TO_ADDR
80527: GO 80543
// i := i - 1 ;
80529: LD_ADDR_VAR 0 5
80533: PUSH
80534: LD_VAR 0 5
80538: PUSH
80539: LD_INT 1
80541: MINUS
80542: ST_TO_ADDR
// end ;
80543: GO 80349
80545: POP
80546: POP
// for i in tmp do
80547: LD_ADDR_VAR 0 5
80551: PUSH
80552: LD_VAR 0 7
80556: PUSH
80557: FOR_IN
80558: IFFALSE 80596
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
80560: LD_VAR 0 1
80564: PPUSH
80565: LD_VAR 0 5
80569: PUSH
80570: LD_INT 1
80572: ARRAY
80573: PPUSH
80574: LD_VAR 0 5
80578: PUSH
80579: LD_INT 2
80581: ARRAY
80582: PPUSH
80583: CALL 79538 0 3
80587: NOT
80588: IFFALSE 80594
// exit ;
80590: POP
80591: POP
80592: GO 80598
80594: GO 80557
80596: POP
80597: POP
// end ;
80598: LD_VAR 0 4
80602: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
80603: LD_INT 0
80605: PPUSH
80606: PPUSH
80607: PPUSH
80608: PPUSH
80609: PPUSH
80610: PPUSH
80611: PPUSH
// if not GetClass ( unit ) = class_sniper then
80612: LD_VAR 0 1
80616: PPUSH
80617: CALL_OW 257
80621: PUSH
80622: LD_INT 5
80624: EQUAL
80625: NOT
80626: IFFALSE 80630
// exit ;
80628: GO 81018
// dist := 8 ;
80630: LD_ADDR_VAR 0 5
80634: PUSH
80635: LD_INT 8
80637: ST_TO_ADDR
// viewRange := 12 ;
80638: LD_ADDR_VAR 0 7
80642: PUSH
80643: LD_INT 12
80645: ST_TO_ADDR
// side := GetSide ( unit ) ;
80646: LD_ADDR_VAR 0 6
80650: PUSH
80651: LD_VAR 0 1
80655: PPUSH
80656: CALL_OW 255
80660: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
80661: LD_INT 61
80663: PPUSH
80664: LD_VAR 0 6
80668: PPUSH
80669: CALL_OW 321
80673: PUSH
80674: LD_INT 2
80676: EQUAL
80677: IFFALSE 80687
// viewRange := 16 ;
80679: LD_ADDR_VAR 0 7
80683: PUSH
80684: LD_INT 16
80686: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
80687: LD_VAR 0 1
80691: PPUSH
80692: LD_VAR 0 2
80696: PPUSH
80697: LD_VAR 0 3
80701: PPUSH
80702: CALL_OW 297
80706: PUSH
80707: LD_VAR 0 5
80711: GREATER
80712: IFFALSE 80791
// begin ComMoveXY ( unit , x , y ) ;
80714: LD_VAR 0 1
80718: PPUSH
80719: LD_VAR 0 2
80723: PPUSH
80724: LD_VAR 0 3
80728: PPUSH
80729: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
80733: LD_INT 35
80735: PPUSH
80736: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
80740: LD_VAR 0 1
80744: PPUSH
80745: LD_VAR 0 2
80749: PPUSH
80750: LD_VAR 0 3
80754: PPUSH
80755: CALL 60174 0 3
80759: NOT
80760: IFFALSE 80764
// exit ;
80762: GO 81018
// until GetDistUnitXY ( unit , x , y ) < dist ;
80764: LD_VAR 0 1
80768: PPUSH
80769: LD_VAR 0 2
80773: PPUSH
80774: LD_VAR 0 3
80778: PPUSH
80779: CALL_OW 297
80783: PUSH
80784: LD_VAR 0 5
80788: LESS
80789: IFFALSE 80733
// end ; ComTurnXY ( unit , x , y ) ;
80791: LD_VAR 0 1
80795: PPUSH
80796: LD_VAR 0 2
80800: PPUSH
80801: LD_VAR 0 3
80805: PPUSH
80806: CALL_OW 118
// wait ( 5 ) ;
80810: LD_INT 5
80812: PPUSH
80813: CALL_OW 67
// _d := GetDir ( unit ) ;
80817: LD_ADDR_VAR 0 10
80821: PUSH
80822: LD_VAR 0 1
80826: PPUSH
80827: CALL_OW 254
80831: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
80832: LD_ADDR_VAR 0 8
80836: PUSH
80837: LD_VAR 0 1
80841: PPUSH
80842: CALL_OW 250
80846: PPUSH
80847: LD_VAR 0 10
80851: PPUSH
80852: LD_VAR 0 5
80856: PPUSH
80857: CALL_OW 272
80861: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
80862: LD_ADDR_VAR 0 9
80866: PUSH
80867: LD_VAR 0 1
80871: PPUSH
80872: CALL_OW 251
80876: PPUSH
80877: LD_VAR 0 10
80881: PPUSH
80882: LD_VAR 0 5
80886: PPUSH
80887: CALL_OW 273
80891: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80892: LD_VAR 0 8
80896: PPUSH
80897: LD_VAR 0 9
80901: PPUSH
80902: CALL_OW 488
80906: NOT
80907: IFFALSE 80911
// exit ;
80909: GO 81018
// ComAnimCustom ( unit , 1 ) ;
80911: LD_VAR 0 1
80915: PPUSH
80916: LD_INT 1
80918: PPUSH
80919: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
80923: LD_VAR 0 8
80927: PPUSH
80928: LD_VAR 0 9
80932: PPUSH
80933: LD_VAR 0 6
80937: PPUSH
80938: LD_VAR 0 7
80942: PPUSH
80943: CALL_OW 330
// repeat wait ( 1 ) ;
80947: LD_INT 1
80949: PPUSH
80950: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
80954: LD_VAR 0 1
80958: PPUSH
80959: CALL_OW 316
80963: PUSH
80964: LD_VAR 0 1
80968: PPUSH
80969: CALL_OW 314
80973: OR
80974: PUSH
80975: LD_VAR 0 1
80979: PPUSH
80980: CALL_OW 302
80984: NOT
80985: OR
80986: PUSH
80987: LD_VAR 0 1
80991: PPUSH
80992: CALL_OW 301
80996: OR
80997: IFFALSE 80947
// RemoveSeeing ( _x , _y , side ) ;
80999: LD_VAR 0 8
81003: PPUSH
81004: LD_VAR 0 9
81008: PPUSH
81009: LD_VAR 0 6
81013: PPUSH
81014: CALL_OW 331
// end ; end_of_file
81018: LD_VAR 0 4
81022: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81023: LD_VAR 0 1
81027: PPUSH
81028: LD_VAR 0 2
81032: PPUSH
81033: LD_VAR 0 3
81037: PPUSH
81038: LD_VAR 0 4
81042: PPUSH
81043: LD_VAR 0 5
81047: PPUSH
81048: LD_VAR 0 6
81052: PPUSH
81053: CALL 63673 0 6
// end ;
81057: PPOPN 6
81059: END
