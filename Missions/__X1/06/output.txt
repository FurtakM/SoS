// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 50185 0 0
// Init ;
   8: CALL 48 0 0
// CreateNature ( natureArea , swampArea ) ;
  12: LD_INT 1
  14: PPUSH
  15: LD_INT 3
  17: PPUSH
  18: CALL 4040 0 2
// PrepareArabian ;
  22: CALL 160 0 0
// PrepareRussian ;
  26: CALL 4887 0 0
// Action ;
  30: CALL 7939 0 0
// if debug then
  34: LD_EXP 1
  38: IFFALSE 47
// FogOff ( 2 ) ;
  40: LD_INT 2
  42: PPUSH
  43: CALL_OW 344
// end ;
  47: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , rolfScriptBase , omarScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles ; function Init ; begin
  48: LD_INT 0
  50: PPUSH
// debug := true ;
  51: LD_ADDR_EXP 1
  55: PUSH
  56: LD_INT 1
  58: ST_TO_ADDR
// prefix := 05_ ;
  59: LD_ADDR_EXP 2
  63: PUSH
  64: LD_STRING 05_
  66: ST_TO_ADDR
// bergkampfArrived := false ;
  67: LD_ADDR_EXP 3
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// omarArrived := false ;
  75: LD_ADDR_EXP 6
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// outpostDestroyed := false ;
  83: LD_ADDR_EXP 4
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// ruLoseCounter := 0 ;
  91: LD_ADDR_EXP 5
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// rolfScriptBase := false ;
  99: LD_ADDR_EXP 7
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// omarScriptBase := false ;
 107: LD_ADDR_EXP 8
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// linkedWithRolf := 0 ;
 115: LD_ADDR_EXP 9
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// rolfDied := false ;
 123: LD_ADDR_EXP 10
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// leninSpotted := false ;
 131: LD_ADDR_EXP 11
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// mortarConstructed := false ;
 139: LD_ADDR_EXP 12
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// rolfHasVehicles := false ;
 147: LD_ADDR_EXP 13
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// end ; end_of_file
 155: LD_VAR 0 1
 159: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , tmp ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
 164: PPUSH
 165: PPUSH
 166: PPUSH
 167: PPUSH
 168: PPUSH
 169: PPUSH
 170: PPUSH
 171: PPUSH
 172: PPUSH
 173: PPUSH
// uc_nation := 2 ;
 174: LD_ADDR_OWVAR 21
 178: PUSH
 179: LD_INT 2
 181: ST_TO_ADDR
// uc_side := 5 ;
 182: LD_ADDR_OWVAR 20
 186: PUSH
 187: LD_INT 5
 189: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 190: LD_ADDR_EXP 22
 194: PUSH
 195: LD_STRING Abdul
 197: PPUSH
 198: LD_INT 0
 200: PPUSH
 201: LD_STRING 
 203: PPUSH
 204: CALL 11590 0 3
 208: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 209: LD_ADDR_EXP 24
 213: PUSH
 214: LD_STRING Omar
 216: PPUSH
 217: LD_INT 0
 219: PPUSH
 220: LD_STRING 
 222: PPUSH
 223: CALL 11590 0 3
 227: ST_TO_ADDR
// uc_side := 2 ;
 228: LD_ADDR_OWVAR 20
 232: PUSH
 233: LD_INT 2
 235: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 236: LD_ADDR_EXP 14
 240: PUSH
 241: LD_STRING Heike
 243: PPUSH
 244: LD_EXP 1
 248: NOT
 249: PPUSH
 250: LD_EXP 2
 254: PPUSH
 255: CALL 11590 0 3
 259: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 260: LD_ADDR_EXP 17
 264: PUSH
 265: LD_STRING Ibrahim
 267: PPUSH
 268: LD_EXP 1
 272: NOT
 273: PPUSH
 274: LD_EXP 2
 278: PPUSH
 279: CALL 11590 0 3
 283: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 284: LD_ADDR_EXP 15
 288: PUSH
 289: LD_STRING Givi
 291: PPUSH
 292: LD_EXP 1
 296: NOT
 297: PPUSH
 298: LD_EXP 2
 302: PPUSH
 303: CALL 11590 0 3
 307: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 308: LD_ADDR_EXP 18
 312: PUSH
 313: LD_STRING Kamil
 315: PPUSH
 316: LD_EXP 1
 320: NOT
 321: PPUSH
 322: LD_EXP 2
 326: PPUSH
 327: CALL 11590 0 3
 331: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 332: LD_ADDR_EXP 19
 336: PUSH
 337: LD_STRING Kaia
 339: PPUSH
 340: LD_EXP 1
 344: NOT
 345: PPUSH
 346: LD_EXP 2
 350: PPUSH
 351: CALL 11590 0 3
 355: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 356: LD_ADDR_EXP 20
 360: PUSH
 361: LD_STRING Sophia
 363: PPUSH
 364: LD_EXP 1
 368: NOT
 369: PPUSH
 370: LD_EXP 2
 374: PPUSH
 375: CALL 11590 0 3
 379: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 380: LD_ADDR_EXP 21
 384: PUSH
 385: LD_STRING Markov
 387: PPUSH
 388: LD_EXP 1
 392: NOT
 393: PPUSH
 394: LD_EXP 2
 398: PPUSH
 399: CALL 11590 0 3
 403: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 404: LD_ADDR_EXP 26
 408: PUSH
 409: LD_STRING Aviradze
 411: PPUSH
 412: LD_EXP 1
 416: NOT
 417: PPUSH
 418: LD_EXP 2
 422: PPUSH
 423: CALL 11590 0 3
 427: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 428: LD_ADDR_EXP 25
 432: PUSH
 433: LD_STRING Kurt
 435: PPUSH
 436: LD_EXP 1
 440: NOT
 441: PPUSH
 442: LD_EXP 2
 446: PPUSH
 447: CALL 11590 0 3
 451: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 452: LD_ADDR_EXP 16
 456: PUSH
 457: LD_STRING Mike
 459: PPUSH
 460: LD_EXP 1
 464: NOT
 465: PPUSH
 466: LD_EXP 2
 470: PPUSH
 471: CALL 11590 0 3
 475: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 476: LD_ADDR_EXP 23
 480: PUSH
 481: LD_STRING Olaf
 483: PPUSH
 484: LD_INT 0
 486: PPUSH
 487: LD_STRING 
 489: PPUSH
 490: CALL 11590 0 3
 494: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 495: LD_ADDR_EXP 28
 499: PUSH
 500: LD_STRING 05_others
 502: PPUSH
 503: CALL_OW 31
 507: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 508: LD_ADDR_EXP 29
 512: PUSH
 513: LD_STRING 05_apes
 515: PPUSH
 516: CALL_OW 31
 520: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 521: LD_ADDR_VAR 0 5
 525: PUSH
 526: LD_STRING 05_Radar
 528: PPUSH
 529: LD_EXP 1
 533: PPUSH
 534: CALL_OW 30
 538: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 539: LD_ADDR_VAR 0 6
 543: PUSH
 544: LD_STRING 05_RemoteControl
 546: PPUSH
 547: LD_EXP 1
 551: PPUSH
 552: CALL_OW 30
 556: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 557: LD_ADDR_VAR 0 7
 561: PUSH
 562: LD_STRING 05_DrugsTested
 564: PPUSH
 565: LD_EXP 1
 569: PPUSH
 570: CALL_OW 30
 574: ST_TO_ADDR
// if hasDrugs then
 575: LD_VAR 0 7
 579: IFFALSE 594
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 581: LD_INT 5
 583: PPUSH
 584: LD_INT 2
 586: PPUSH
 587: LD_INT 2
 589: PPUSH
 590: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 594: LD_ADDR_VAR 0 12
 598: PUSH
 599: LD_INT 5
 601: PPUSH
 602: LD_INT 0
 604: PPUSH
 605: CALL_OW 517
 609: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 610: LD_ADDR_VAR 0 2
 614: PUSH
 615: DOUBLE
 616: LD_INT 1
 618: DEC
 619: ST_TO_ADDR
 620: LD_VAR 0 12
 624: PUSH
 625: LD_INT 1
 627: ARRAY
 628: PUSH
 629: FOR_TO
 630: IFFALSE 707
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
 632: LD_VAR 0 12
 636: PUSH
 637: LD_INT 1
 639: ARRAY
 640: PUSH
 641: LD_VAR 0 2
 645: ARRAY
 646: PPUSH
 647: LD_VAR 0 12
 651: PUSH
 652: LD_INT 2
 654: ARRAY
 655: PUSH
 656: LD_VAR 0 2
 660: ARRAY
 661: PPUSH
 662: CALL_OW 351
 666: IFFALSE 705
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
 668: LD_VAR 0 12
 672: PUSH
 673: LD_INT 1
 675: ARRAY
 676: PUSH
 677: LD_VAR 0 2
 681: ARRAY
 682: PPUSH
 683: LD_VAR 0 12
 687: PUSH
 688: LD_INT 2
 690: ARRAY
 691: PUSH
 692: LD_VAR 0 2
 696: ARRAY
 697: PPUSH
 698: LD_INT 2
 700: PPUSH
 701: CALL_OW 244
 705: GO 629
 707: POP
 708: POP
// base := [ [ b_depot , 206 , 80 , 1 ] , [ b_bunker , 221 , 95 , 5 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 ] , [ b_lab_full , 217 , 78 , 4 ] , [ b_solar_power , 220 , 99 , 1 ] , [ b_solar_power , 220 , 103 , 1 ] , [ b_solar_power , 216 , 102 , 1 ] , [ b_ext_gun , 203 , 94 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 ] , [ b_ext_track , 199 , 91 , 1 ] , [ b_oil_power , 197 , 81 , 1 ] , [ b_oil_power , 197 , 78 , 3 ] ] ;
 709: LD_ADDR_VAR 0 4
 713: PUSH
 714: LD_INT 0
 716: PUSH
 717: LD_INT 206
 719: PUSH
 720: LD_INT 80
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: PUSH
 732: LD_INT 32
 734: PUSH
 735: LD_INT 221
 737: PUSH
 738: LD_INT 95
 740: PUSH
 741: LD_INT 5
 743: PUSH
 744: LD_INT 23
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: PUSH
 754: LD_INT 32
 756: PUSH
 757: LD_INT 223
 759: PUSH
 760: LD_INT 88
 762: PUSH
 763: LD_INT 5
 765: PUSH
 766: LD_INT 24
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 32
 778: PUSH
 779: LD_INT 202
 781: PUSH
 782: LD_INT 64
 784: PUSH
 785: LD_INT 2
 787: PUSH
 788: LD_INT 25
 790: PUSH
 791: EMPTY
 792: LIST
 793: LIST
 794: LIST
 795: LIST
 796: LIST
 797: PUSH
 798: LD_INT 3
 800: PUSH
 801: LD_INT 203
 803: PUSH
 804: LD_INT 91
 806: PUSH
 807: LD_INT 1
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: LIST
 814: LIST
 815: PUSH
 816: LD_INT 8
 818: PUSH
 819: LD_INT 217
 821: PUSH
 822: LD_INT 78
 824: PUSH
 825: LD_INT 4
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 27
 836: PUSH
 837: LD_INT 220
 839: PUSH
 840: LD_INT 99
 842: PUSH
 843: LD_INT 1
 845: PUSH
 846: EMPTY
 847: LIST
 848: LIST
 849: LIST
 850: LIST
 851: PUSH
 852: LD_INT 27
 854: PUSH
 855: LD_INT 220
 857: PUSH
 858: LD_INT 103
 860: PUSH
 861: LD_INT 1
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: PUSH
 870: LD_INT 27
 872: PUSH
 873: LD_INT 216
 875: PUSH
 876: LD_INT 102
 878: PUSH
 879: LD_INT 1
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: PUSH
 888: LD_INT 17
 890: PUSH
 891: LD_INT 203
 893: PUSH
 894: LD_INT 94
 896: PUSH
 897: LD_INT 0
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: PUSH
 906: LD_INT 23
 908: PUSH
 909: LD_INT 200
 911: PUSH
 912: LD_INT 88
 914: PUSH
 915: LD_INT 2
 917: PUSH
 918: EMPTY
 919: LIST
 920: LIST
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 16
 926: PUSH
 927: LD_INT 199
 929: PUSH
 930: LD_INT 91
 932: PUSH
 933: LD_INT 1
 935: PUSH
 936: EMPTY
 937: LIST
 938: LIST
 939: LIST
 940: LIST
 941: PUSH
 942: LD_INT 26
 944: PUSH
 945: LD_INT 197
 947: PUSH
 948: LD_INT 81
 950: PUSH
 951: LD_INT 1
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: LIST
 958: LIST
 959: PUSH
 960: LD_INT 26
 962: PUSH
 963: LD_INT 197
 965: PUSH
 966: LD_INT 78
 968: PUSH
 969: LD_INT 3
 971: PUSH
 972: EMPTY
 973: LIST
 974: LIST
 975: LIST
 976: LIST
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: LIST
 984: LIST
 985: LIST
 986: LIST
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: LIST
 993: ST_TO_ADDR
// if hasRadar then
 994: LD_VAR 0 5
 998: IFFALSE 1042
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 ] ) ;
1000: LD_ADDR_VAR 0 4
1004: PUSH
1005: LD_VAR 0 4
1009: PPUSH
1010: LD_VAR 0 4
1014: PUSH
1015: LD_INT 1
1017: PLUS
1018: PPUSH
1019: LD_INT 20
1021: PUSH
1022: LD_INT 203
1024: PUSH
1025: LD_INT 87
1027: PUSH
1028: LD_INT 3
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 1
1041: ST_TO_ADDR
// if hasRemote then
1042: LD_VAR 0 6
1046: IFFALSE 1090
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 ] ) ;
1048: LD_ADDR_VAR 0 4
1052: PUSH
1053: LD_VAR 0 4
1057: PPUSH
1058: LD_VAR 0 4
1062: PUSH
1063: LD_INT 1
1065: PLUS
1066: PPUSH
1067: LD_INT 22
1069: PUSH
1070: LD_INT 207
1072: PUSH
1073: LD_INT 95
1075: PUSH
1076: LD_INT 5
1078: PUSH
1079: EMPTY
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: PPUSH
1085: CALL_OW 1
1089: ST_TO_ADDR
// for i in base do
1090: LD_ADDR_VAR 0 2
1094: PUSH
1095: LD_VAR 0 4
1099: PUSH
1100: FOR_IN
1101: IFFALSE 1282
// begin bc_type := i [ 1 ] ;
1103: LD_ADDR_OWVAR 42
1107: PUSH
1108: LD_VAR 0 2
1112: PUSH
1113: LD_INT 1
1115: ARRAY
1116: ST_TO_ADDR
// bc_level := 3 ;
1117: LD_ADDR_OWVAR 43
1121: PUSH
1122: LD_INT 3
1124: ST_TO_ADDR
// if i [ 1 ] = b_lab_full then
1125: LD_VAR 0 2
1129: PUSH
1130: LD_INT 1
1132: ARRAY
1133: PUSH
1134: LD_INT 8
1136: EQUAL
1137: IFFALSE 1172
// begin bc_kind1 := b_lab_weapon ;
1139: LD_ADDR_OWVAR 44
1143: PUSH
1144: LD_INT 10
1146: ST_TO_ADDR
// if hasRadar then
1147: LD_VAR 0 5
1151: IFFALSE 1163
// bc_kind2 := b_lab_opto else
1153: LD_ADDR_OWVAR 45
1157: PUSH
1158: LD_INT 15
1160: ST_TO_ADDR
1161: GO 1172
// bc_kind2 := - 1 ;
1163: LD_ADDR_OWVAR 45
1167: PUSH
1168: LD_INT 1
1170: NEG
1171: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1172: LD_ADDR_VAR 0 3
1176: PUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 2
1184: ARRAY
1185: PPUSH
1186: LD_VAR 0 2
1190: PUSH
1191: LD_INT 3
1193: ARRAY
1194: PPUSH
1195: LD_VAR 0 2
1199: PUSH
1200: LD_INT 4
1202: ARRAY
1203: PPUSH
1204: CALL_OW 47
1208: ST_TO_ADDR
// if i > 4 then
1209: LD_VAR 0 2
1213: PUSH
1214: LD_INT 4
1216: GREATER
1217: IFFALSE 1237
// PlaceWeaponTurret ( b , i [ 5 ] ) ;
1219: LD_VAR 0 3
1223: PPUSH
1224: LD_VAR 0 2
1228: PUSH
1229: LD_INT 5
1231: ARRAY
1232: PPUSH
1233: CALL_OW 431
// if i [ 1 ] = b_bunker then
1237: LD_VAR 0 2
1241: PUSH
1242: LD_INT 1
1244: ARRAY
1245: PUSH
1246: LD_INT 32
1248: EQUAL
1249: IFFALSE 1280
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
1251: LD_ADDR_VAR 0 11
1255: PUSH
1256: LD_VAR 0 11
1260: PPUSH
1261: LD_VAR 0 11
1265: PUSH
1266: LD_INT 1
1268: PLUS
1269: PPUSH
1270: LD_VAR 0 3
1274: PPUSH
1275: CALL_OW 1
1279: ST_TO_ADDR
// end ;
1280: GO 1100
1282: POP
1283: POP
// depot := HexInfo ( 206 , 80 ) ;
1284: LD_ADDR_VAR 0 9
1288: PUSH
1289: LD_INT 206
1291: PPUSH
1292: LD_INT 80
1294: PPUSH
1295: CALL_OW 428
1299: ST_TO_ADDR
// factory := HexInfo ( 203 , 91 ) ;
1300: LD_ADDR_VAR 0 8
1304: PUSH
1305: LD_INT 203
1307: PPUSH
1308: LD_INT 91
1310: PPUSH
1311: CALL_OW 428
1315: ST_TO_ADDR
// lab := HexInfo ( 217 , 78 ) ;
1316: LD_ADDR_VAR 0 10
1320: PUSH
1321: LD_INT 217
1323: PPUSH
1324: LD_INT 78
1326: PPUSH
1327: CALL_OW 428
1331: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 160 ] [ Difficulty ] ) ;
1332: LD_VAR 0 9
1336: PPUSH
1337: CALL_OW 274
1341: PPUSH
1342: LD_INT 1
1344: PPUSH
1345: LD_INT 360
1347: PUSH
1348: LD_INT 260
1350: PUSH
1351: LD_INT 160
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: LIST
1358: PUSH
1359: LD_OWVAR 67
1363: ARRAY
1364: PPUSH
1365: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 130 ] [ Difficulty ] ) ;
1369: LD_VAR 0 9
1373: PPUSH
1374: CALL_OW 274
1378: PPUSH
1379: LD_INT 2
1381: PPUSH
1382: LD_INT 200
1384: PUSH
1385: LD_INT 170
1387: PUSH
1388: LD_INT 130
1390: PUSH
1391: EMPTY
1392: LIST
1393: LIST
1394: LIST
1395: PUSH
1396: LD_OWVAR 67
1400: ARRAY
1401: PPUSH
1402: CALL_OW 277
// PlaceUnitXY ( Heike , 213 , 87 , false ) ;
1406: LD_EXP 14
1410: PPUSH
1411: LD_INT 213
1413: PPUSH
1414: LD_INT 87
1416: PPUSH
1417: LD_INT 0
1419: PPUSH
1420: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
1424: LD_EXP 14
1428: PPUSH
1429: LD_INT 214
1431: PPUSH
1432: LD_INT 87
1434: PPUSH
1435: CALL_OW 118
// if Kaia then
1439: LD_EXP 19
1443: IFFALSE 1478
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
1445: LD_EXP 19
1449: PPUSH
1450: LD_INT 213
1452: PPUSH
1453: LD_INT 85
1455: PPUSH
1456: LD_INT 0
1458: PPUSH
1459: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
1463: LD_EXP 19
1467: PPUSH
1468: LD_INT 215
1470: PPUSH
1471: LD_INT 87
1473: PPUSH
1474: CALL_OW 118
// end ; if Olaf and Kaia then
1478: LD_EXP 23
1482: PUSH
1483: LD_EXP 19
1487: AND
1488: IFFALSE 1525
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
1490: LD_EXP 23
1494: PPUSH
1495: LD_INT 215
1497: PPUSH
1498: LD_INT 87
1500: PPUSH
1501: LD_INT 0
1503: PPUSH
1504: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
1508: LD_EXP 23
1512: PPUSH
1513: LD_INT 213
1515: PPUSH
1516: LD_INT 85
1518: PPUSH
1519: CALL_OW 118
// end else
1523: GO 1545
// if Olaf then
1525: LD_EXP 23
1529: IFFALSE 1545
// PlaceHumanInUnit ( Olaf , factory ) ;
1531: LD_EXP 23
1535: PPUSH
1536: LD_VAR 0 8
1540: PPUSH
1541: CALL_OW 52
// if Givi then
1545: LD_EXP 15
1549: IFFALSE 1630
// begin if Kaia and Olaf then
1551: LD_EXP 19
1555: PUSH
1556: LD_EXP 23
1560: AND
1561: IFFALSE 1598
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
1563: LD_EXP 15
1567: PPUSH
1568: LD_INT 247
1570: PPUSH
1571: LD_INT 117
1573: PPUSH
1574: LD_INT 0
1576: PPUSH
1577: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
1581: LD_EXP 15
1585: PPUSH
1586: LD_INT 248
1588: PPUSH
1589: LD_INT 118
1591: PPUSH
1592: CALL_OW 118
// end else
1596: GO 1630
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
1598: LD_EXP 15
1602: PPUSH
1603: LD_INT 216
1605: PPUSH
1606: LD_INT 88
1608: PPUSH
1609: LD_INT 0
1611: PPUSH
1612: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
1616: LD_EXP 15
1620: PPUSH
1621: LD_EXP 14
1625: PPUSH
1626: CALL_OW 119
// end ; end ; if Kurt then
1630: LD_EXP 25
1634: IFFALSE 1654
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
1636: LD_EXP 25
1640: PPUSH
1641: LD_VAR 0 11
1645: PUSH
1646: LD_INT 2
1648: ARRAY
1649: PPUSH
1650: CALL_OW 52
// if Mike then
1654: LD_EXP 16
1658: IFFALSE 1678
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
1660: LD_EXP 16
1664: PPUSH
1665: LD_VAR 0 11
1669: PUSH
1670: LD_INT 3
1672: ARRAY
1673: PPUSH
1674: CALL_OW 52
// if Kamil then
1678: LD_EXP 18
1682: IFFALSE 1744
// begin if Kaia and Olaf then
1684: LD_EXP 19
1688: PUSH
1689: LD_EXP 23
1693: AND
1694: IFFALSE 1712
// PlaceHumanInUnit ( Kamil , depot ) else
1696: LD_EXP 18
1700: PPUSH
1701: LD_VAR 0 9
1705: PPUSH
1706: CALL_OW 52
1710: GO 1744
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
1712: LD_EXP 18
1716: PPUSH
1717: LD_INT 213
1719: PPUSH
1720: LD_INT 87
1722: PPUSH
1723: LD_INT 0
1725: PPUSH
1726: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
1730: LD_EXP 18
1734: PPUSH
1735: LD_EXP 14
1739: PPUSH
1740: CALL_OW 119
// end ; end ; if Sophia then
1744: LD_EXP 20
1748: IFFALSE 1764
// PlaceHumanInUnit ( Sophia , depot ) ;
1750: LD_EXP 20
1754: PPUSH
1755: LD_VAR 0 9
1759: PPUSH
1760: CALL_OW 52
// if Aviradze then
1764: LD_EXP 26
1768: IFFALSE 1784
// PlaceHumanInUnit ( Aviradze , lab ) ;
1770: LD_EXP 26
1774: PPUSH
1775: LD_VAR 0 10
1779: PPUSH
1780: CALL_OW 52
// if Ibrahim then
1784: LD_EXP 17
1788: IFFALSE 1804
// PlaceHumanInUnit ( Ibrahim , lab ) ;
1790: LD_EXP 17
1794: PPUSH
1795: LD_VAR 0 10
1799: PPUSH
1800: CALL_OW 52
// if Markov then
1804: LD_EXP 21
1808: IFFALSE 1824
// PlaceHumanInUnit ( Markov , factory ) ;
1810: LD_EXP 21
1814: PPUSH
1815: LD_VAR 0 8
1819: PPUSH
1820: CALL_OW 52
// if heikeSecondSquad then
1824: LD_EXP 28
1828: IFFALSE 1868
// for i in heikeSecondSquad do
1830: LD_ADDR_VAR 0 2
1834: PUSH
1835: LD_EXP 28
1839: PUSH
1840: FOR_IN
1841: IFFALSE 1866
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
1843: LD_VAR 0 2
1847: PPUSH
1848: LD_INT 190
1850: PPUSH
1851: LD_INT 65
1853: PPUSH
1854: LD_INT 5
1856: PPUSH
1857: LD_INT 0
1859: PPUSH
1860: CALL_OW 50
1864: GO 1840
1866: POP
1867: POP
// if heikeApes then
1868: LD_EXP 29
1872: IFFALSE 1912
// for i in heikeApes do
1874: LD_ADDR_VAR 0 2
1878: PUSH
1879: LD_EXP 29
1883: PUSH
1884: FOR_IN
1885: IFFALSE 1910
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
1887: LD_VAR 0 2
1891: PPUSH
1892: LD_INT 190
1894: PPUSH
1895: LD_INT 70
1897: PPUSH
1898: LD_INT 5
1900: PPUSH
1901: LD_INT 0
1903: PPUSH
1904: CALL_OW 50
1908: GO 1884
1910: POP
1911: POP
// end ;
1912: LD_VAR 0 1
1916: RET
// export function PrepareRolfSquad ; var i , j ; begin
1917: LD_INT 0
1919: PPUSH
1920: PPUSH
1921: PPUSH
// uc_side := 8 ;
1922: LD_ADDR_OWVAR 20
1926: PUSH
1927: LD_INT 8
1929: ST_TO_ADDR
// uc_nation := 2 ;
1930: LD_ADDR_OWVAR 21
1934: PUSH
1935: LD_INT 2
1937: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
1938: LD_ADDR_EXP 27
1942: PUSH
1943: LD_STRING Bergkamp
1945: PPUSH
1946: CALL_OW 25
1950: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
1951: LD_ADDR_EXP 30
1955: PUSH
1956: LD_EXP 27
1960: PUSH
1961: EMPTY
1962: LIST
1963: ST_TO_ADDR
// for i := 1 to 4 do
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: DOUBLE
1970: LD_INT 1
1972: DEC
1973: ST_TO_ADDR
1974: LD_INT 4
1976: PUSH
1977: FOR_TO
1978: IFFALSE 2058
// begin for j := 1 to [ 6 , 0 , 3 , 1 ] [ i ] do
1980: LD_ADDR_VAR 0 3
1984: PUSH
1985: DOUBLE
1986: LD_INT 1
1988: DEC
1989: ST_TO_ADDR
1990: LD_INT 6
1992: PUSH
1993: LD_INT 0
1995: PUSH
1996: LD_INT 3
1998: PUSH
1999: LD_INT 1
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: PUSH
2008: LD_VAR 0 2
2012: ARRAY
2013: PUSH
2014: FOR_TO
2015: IFFALSE 2054
// begin PrepareHuman ( false , i , 5 ) ;
2017: LD_INT 0
2019: PPUSH
2020: LD_VAR 0 2
2024: PPUSH
2025: LD_INT 5
2027: PPUSH
2028: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
2032: LD_ADDR_EXP 30
2036: PUSH
2037: LD_EXP 30
2041: PPUSH
2042: CALL_OW 44
2046: PPUSH
2047: CALL 48328 0 2
2051: ST_TO_ADDR
// end ;
2052: GO 2014
2054: POP
2055: POP
// end ;
2056: GO 1977
2058: POP
2059: POP
// if HexInfo ( 5 , 3 ) then
2060: LD_INT 5
2062: PPUSH
2063: LD_INT 3
2065: PPUSH
2066: CALL_OW 428
2070: IFFALSE 2087
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
2072: LD_INT 5
2074: PPUSH
2075: LD_INT 3
2077: PPUSH
2078: CALL_OW 428
2082: PPUSH
2083: CALL_OW 64
// for i in rolfSquad do
2087: LD_ADDR_VAR 0 2
2091: PUSH
2092: LD_EXP 30
2096: PUSH
2097: FOR_IN
2098: IFFALSE 2234
// begin uc_direction := 2 ;
2100: LD_ADDR_OWVAR 24
2104: PUSH
2105: LD_INT 2
2107: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
2108: LD_VAR 0 2
2112: PPUSH
2113: CALL_OW 257
2117: PUSH
2118: LD_INT 3
2120: EQUAL
2121: IFFALSE 2195
// begin uc_side := 8 ;
2123: LD_ADDR_OWVAR 20
2127: PUSH
2128: LD_INT 8
2130: ST_TO_ADDR
// uc_nation := 2 ;
2131: LD_ADDR_OWVAR 21
2135: PUSH
2136: LD_INT 2
2138: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
2139: LD_INT 13
2141: PPUSH
2142: LD_INT 1
2144: PPUSH
2145: LD_INT 1
2147: PPUSH
2148: LD_INT 27
2150: PPUSH
2151: LD_INT 88
2153: PPUSH
2154: CALL 16454 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
2158: CALL_OW 45
2162: PPUSH
2163: LD_INT 11
2165: PPUSH
2166: LD_INT 0
2168: PPUSH
2169: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
2173: LD_VAR 0 2
2177: PPUSH
2178: LD_INT 5
2180: PPUSH
2181: LD_INT 3
2183: PPUSH
2184: CALL_OW 428
2188: PPUSH
2189: CALL_OW 52
// end else
2193: GO 2210
// PlaceUnitArea ( i , northSpawn , false ) ;
2195: LD_VAR 0 2
2199: PPUSH
2200: LD_INT 11
2202: PPUSH
2203: LD_INT 0
2205: PPUSH
2206: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
2210: LD_VAR 0 2
2214: PPUSH
2215: LD_INT 29
2217: PPUSH
2218: LD_INT 10
2220: PPUSH
2221: CALL_OW 111
// wait ( 0 0$2 ) ;
2225: LD_INT 70
2227: PPUSH
2228: CALL_OW 67
// end ;
2232: GO 2097
2234: POP
2235: POP
// wait ( 0 0$5 ) ;
2236: LD_INT 175
2238: PPUSH
2239: CALL_OW 67
// end ;
2243: LD_VAR 0 1
2247: RET
// export function PrepareRolfBase ; var i , tmp ; begin
2248: LD_INT 0
2250: PPUSH
2251: PPUSH
2252: PPUSH
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
2253: LD_ADDR_VAR 0 3
2257: PUSH
2258: LD_INT 4
2260: PUSH
2261: LD_INT 82
2263: PUSH
2264: LD_INT 64
2266: PUSH
2267: LD_INT 1
2269: PUSH
2270: EMPTY
2271: LIST
2272: LIST
2273: LIST
2274: LIST
2275: PUSH
2276: LD_INT 31
2278: PUSH
2279: LD_INT 73
2281: PUSH
2282: LD_INT 58
2284: PUSH
2285: LD_INT 0
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: LIST
2292: LIST
2293: PUSH
2294: EMPTY
2295: LIST
2296: LIST
2297: ST_TO_ADDR
// for i in tmp do
2298: LD_ADDR_VAR 0 2
2302: PUSH
2303: LD_VAR 0 3
2307: PUSH
2308: FOR_IN
2309: IFFALSE 2358
// AddComBuild ( Rolf , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2311: LD_EXP 27
2315: PPUSH
2316: LD_VAR 0 2
2320: PUSH
2321: LD_INT 1
2323: ARRAY
2324: PPUSH
2325: LD_VAR 0 2
2329: PUSH
2330: LD_INT 2
2332: ARRAY
2333: PPUSH
2334: LD_VAR 0 2
2338: PUSH
2339: LD_INT 3
2341: ARRAY
2342: PPUSH
2343: LD_VAR 0 2
2347: PUSH
2348: LD_INT 4
2350: ARRAY
2351: PPUSH
2352: CALL_OW 205
2356: GO 2308
2358: POP
2359: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
2360: LD_EXP 30
2364: PUSH
2365: LD_INT 2
2367: ARRAY
2368: PPUSH
2369: LD_INT 63
2371: PPUSH
2372: LD_INT 42
2374: PPUSH
2375: CALL_OW 428
2379: PPUSH
2380: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
2384: LD_EXP 30
2388: PUSH
2389: LD_INT 3
2391: ARRAY
2392: PPUSH
2393: LD_INT 94
2395: PPUSH
2396: LD_INT 63
2398: PPUSH
2399: CALL_OW 428
2403: PPUSH
2404: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2408: LD_INT 35
2410: PPUSH
2411: CALL_OW 67
// until not HasTask ( Rolf ) ;
2415: LD_EXP 27
2419: PPUSH
2420: CALL_OW 314
2424: NOT
2425: IFFALSE 2408
// rolfScriptBase := true ;
2427: LD_ADDR_EXP 7
2431: PUSH
2432: LD_INT 1
2434: ST_TO_ADDR
// end ;
2435: LD_VAR 0 1
2439: RET
// every 0 0$1 trigger rolfScriptBase do var i , b , p , tmp , sol , sci , mech , enemyInBase , hasVehicle ;
2440: LD_EXP 7
2444: IFFALSE 3287
2446: GO 2448
2448: DISABLE
2449: LD_INT 0
2451: PPUSH
2452: PPUSH
2453: PPUSH
2454: PPUSH
2455: PPUSH
2456: PPUSH
2457: PPUSH
2458: PPUSH
2459: PPUSH
// begin enable ;
2460: ENABLE
// if not rolfSquad then
2461: LD_EXP 30
2465: NOT
2466: IFFALSE 2470
// exit ;
2468: GO 3287
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
2470: LD_ADDR_VAR 0 8
2474: PUSH
2475: LD_INT 12
2477: PPUSH
2478: LD_INT 81
2480: PUSH
2481: LD_INT 8
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: PPUSH
2488: CALL_OW 70
2492: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
2493: LD_ADDR_VAR 0 5
2497: PUSH
2498: LD_EXP 30
2502: PPUSH
2503: LD_INT 25
2505: PUSH
2506: LD_INT 1
2508: PUSH
2509: EMPTY
2510: LIST
2511: LIST
2512: PPUSH
2513: CALL_OW 72
2517: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
2518: LD_ADDR_VAR 0 7
2522: PUSH
2523: LD_EXP 30
2527: PPUSH
2528: LD_INT 25
2530: PUSH
2531: LD_INT 3
2533: PUSH
2534: EMPTY
2535: LIST
2536: LIST
2537: PPUSH
2538: CALL_OW 72
2542: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
2543: LD_ADDR_VAR 0 6
2547: PUSH
2548: LD_EXP 30
2552: PPUSH
2553: LD_INT 25
2555: PUSH
2556: LD_INT 4
2558: PUSH
2559: EMPTY
2560: LIST
2561: LIST
2562: PPUSH
2563: CALL_OW 72
2567: ST_TO_ADDR
// if sol then
2568: LD_VAR 0 5
2572: IFFALSE 2847
// for i in sol do
2574: LD_ADDR_VAR 0 1
2578: PUSH
2579: LD_VAR 0 5
2583: PUSH
2584: FOR_IN
2585: IFFALSE 2845
// if not IsInUnit ( i ) and not HasTask ( i ) then
2587: LD_VAR 0 1
2591: PPUSH
2592: CALL_OW 310
2596: NOT
2597: PUSH
2598: LD_VAR 0 1
2602: PPUSH
2603: CALL_OW 314
2607: NOT
2608: AND
2609: IFFALSE 2843
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
2611: LD_VAR 0 1
2615: PPUSH
2616: CALL_OW 256
2620: PUSH
2621: LD_INT 500
2623: LESS
2624: PUSH
2625: LD_VAR 0 1
2629: PPUSH
2630: LD_INT 80
2632: PPUSH
2633: LD_INT 49
2635: PPUSH
2636: CALL_OW 297
2640: PUSH
2641: LD_INT 6
2643: GREATER
2644: AND
2645: IFFALSE 2664
// begin ComMoveXY ( i , 80 , 49 ) ;
2647: LD_VAR 0 1
2651: PPUSH
2652: LD_INT 80
2654: PPUSH
2655: LD_INT 49
2657: PPUSH
2658: CALL_OW 111
// continue ;
2662: GO 2584
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
2664: LD_ADDR_VAR 0 4
2668: PUSH
2669: LD_INT 22
2671: PUSH
2672: LD_INT 8
2674: PUSH
2675: EMPTY
2676: LIST
2677: LIST
2678: PUSH
2679: LD_INT 50
2681: PUSH
2682: EMPTY
2683: LIST
2684: PUSH
2685: LD_INT 2
2687: PUSH
2688: LD_INT 30
2690: PUSH
2691: LD_INT 4
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: PUSH
2698: LD_INT 30
2700: PUSH
2701: LD_INT 32
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PUSH
2708: LD_INT 30
2710: PUSH
2711: LD_INT 31
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: LIST
2722: LIST
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: LIST
2728: PPUSH
2729: CALL_OW 69
2733: ST_TO_ADDR
// if tmp then
2734: LD_VAR 0 4
2738: IFFALSE 2843
// begin for b in tmp do
2740: LD_ADDR_VAR 0 2
2744: PUSH
2745: LD_VAR 0 4
2749: PUSH
2750: FOR_IN
2751: IFFALSE 2841
// begin case GetBType ( b ) of b_armoury :
2753: LD_VAR 0 2
2757: PPUSH
2758: CALL_OW 266
2762: PUSH
2763: LD_INT 4
2765: DOUBLE
2766: EQUAL
2767: IFTRUE 2771
2769: GO 2782
2771: POP
// p := 6 ; b_breastwork , b_bunker :
2772: LD_ADDR_VAR 0 3
2776: PUSH
2777: LD_INT 6
2779: ST_TO_ADDR
2780: GO 2808
2782: LD_INT 31
2784: DOUBLE
2785: EQUAL
2786: IFTRUE 2796
2788: LD_INT 32
2790: DOUBLE
2791: EQUAL
2792: IFTRUE 2796
2794: GO 2807
2796: POP
// p := 1 ; end ;
2797: LD_ADDR_VAR 0 3
2801: PUSH
2802: LD_INT 1
2804: ST_TO_ADDR
2805: GO 2808
2807: POP
// if UnitsInside ( b ) < p then
2808: LD_VAR 0 2
2812: PPUSH
2813: CALL_OW 313
2817: PUSH
2818: LD_VAR 0 3
2822: LESS
2823: IFFALSE 2839
// ComEnterUnit ( i , b ) ;
2825: LD_VAR 0 1
2829: PPUSH
2830: LD_VAR 0 2
2834: PPUSH
2835: CALL_OW 120
// end ;
2839: GO 2750
2841: POP
2842: POP
// end ; end ;
2843: GO 2584
2845: POP
2846: POP
// if sci then
2847: LD_VAR 0 6
2851: IFFALSE 2906
// for i in sci do
2853: LD_ADDR_VAR 0 1
2857: PUSH
2858: LD_VAR 0 6
2862: PUSH
2863: FOR_IN
2864: IFFALSE 2904
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
2866: LD_VAR 0 1
2870: PPUSH
2871: LD_INT 80
2873: PPUSH
2874: LD_INT 49
2876: PPUSH
2877: CALL_OW 297
2881: PUSH
2882: LD_INT 9
2884: GREATER
2885: IFFALSE 2902
// ComMoveXY ( i , 80 , 49 ) ;
2887: LD_VAR 0 1
2891: PPUSH
2892: LD_INT 80
2894: PPUSH
2895: LD_INT 49
2897: PPUSH
2898: CALL_OW 111
// end ;
2902: GO 2863
2904: POP
2905: POP
// if mech then
2906: LD_VAR 0 7
2910: IFFALSE 3115
// for i in mech do
2912: LD_ADDR_VAR 0 1
2916: PUSH
2917: LD_VAR 0 7
2921: PUSH
2922: FOR_IN
2923: IFFALSE 3113
// begin hasVehicle := IsInUnit ( i ) ;
2925: LD_ADDR_VAR 0 9
2929: PUSH
2930: LD_VAR 0 1
2934: PPUSH
2935: CALL_OW 310
2939: ST_TO_ADDR
// if enemyInBase then
2940: LD_VAR 0 8
2944: IFFALSE 3031
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
2946: LD_VAR 0 9
2950: PUSH
2951: LD_VAR 0 9
2955: PPUSH
2956: CALL_OW 256
2960: PUSH
2961: LD_INT 500
2963: GREATER
2964: AND
2965: IFFALSE 2993
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
2967: LD_VAR 0 9
2971: PPUSH
2972: LD_VAR 0 8
2976: PPUSH
2977: LD_VAR 0 9
2981: PPUSH
2982: CALL_OW 74
2986: PPUSH
2987: CALL_OW 115
2991: GO 3029
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 6 then
2993: LD_VAR 0 9
2997: PPUSH
2998: LD_INT 86
3000: PPUSH
3001: LD_INT 49
3003: PPUSH
3004: CALL_OW 297
3008: PUSH
3009: LD_INT 6
3011: GREATER
3012: IFFALSE 3029
// ComMoveXY ( hasVehicle , 86 , 49 ) ;
3014: LD_VAR 0 9
3018: PPUSH
3019: LD_INT 86
3021: PPUSH
3022: LD_INT 49
3024: PPUSH
3025: CALL_OW 111
// end else
3029: GO 3111
// begin if GetDistUnitXY ( i , 86 , 49 ) > 6 then
3031: LD_VAR 0 1
3035: PPUSH
3036: LD_INT 86
3038: PPUSH
3039: LD_INT 49
3041: PPUSH
3042: CALL_OW 297
3046: PUSH
3047: LD_INT 6
3049: GREATER
3050: IFFALSE 3069
// ComMoveXY ( i , 86 , 49 ) else
3052: LD_VAR 0 1
3056: PPUSH
3057: LD_INT 86
3059: PPUSH
3060: LD_INT 49
3062: PPUSH
3063: CALL_OW 111
3067: GO 3111
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
3069: LD_VAR 0 9
3073: PUSH
3074: LD_VAR 0 9
3078: PPUSH
3079: CALL_OW 256
3083: PUSH
3084: LD_INT 1000
3086: LESS
3087: AND
3088: IFFALSE 3111
// begin SetFuel ( hasVehicle , 100 ) ;
3090: LD_VAR 0 9
3094: PPUSH
3095: LD_INT 100
3097: PPUSH
3098: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
3102: LD_VAR 0 1
3106: PPUSH
3107: CALL 49819 0 1
// end ; end ; end ;
3111: GO 2922
3113: POP
3114: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3115: LD_ADDR_VAR 0 4
3119: PUSH
3120: LD_INT 12
3122: PPUSH
3123: LD_INT 3
3125: PUSH
3126: LD_INT 24
3128: PUSH
3129: LD_INT 1000
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PUSH
3140: LD_INT 21
3142: PUSH
3143: LD_INT 3
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PPUSH
3154: CALL_OW 70
3158: ST_TO_ADDR
// if tmp and IsOk ( Rolf ) then
3159: LD_VAR 0 4
3163: PUSH
3164: LD_EXP 27
3168: PPUSH
3169: CALL_OW 302
3173: AND
3174: IFFALSE 3216
// begin if IsInUnit ( Rolf ) then
3176: LD_EXP 27
3180: PPUSH
3181: CALL_OW 310
3185: IFFALSE 3198
// ComExitBuilding ( Rolf ) else
3187: LD_EXP 27
3191: PPUSH
3192: CALL_OW 122
3196: GO 3216
// ComRepairBuilding ( Rolf , tmp [ 1 ] ) ;
3198: LD_EXP 27
3202: PPUSH
3203: LD_VAR 0 4
3207: PUSH
3208: LD_INT 1
3210: ARRAY
3211: PPUSH
3212: CALL_OW 130
// end ; if not tmp then
3216: LD_VAR 0 4
3220: NOT
3221: IFFALSE 3287
// if GetLives ( Rolf ) < 700 then
3223: LD_EXP 27
3227: PPUSH
3228: CALL_OW 256
3232: PUSH
3233: LD_INT 700
3235: LESS
3236: IFFALSE 3255
// ComMoveXY ( Rolf , 80 , 49 ) else
3238: LD_EXP 27
3242: PPUSH
3243: LD_INT 80
3245: PPUSH
3246: LD_INT 49
3248: PPUSH
3249: CALL_OW 111
3253: GO 3287
// if not IsInUnit ( Rolf ) then
3255: LD_EXP 27
3259: PPUSH
3260: CALL_OW 310
3264: NOT
3265: IFFALSE 3287
// ComEnterUnit ( Rolf , HexInfo ( 86 , 54 ) ) ;
3267: LD_EXP 27
3271: PPUSH
3272: LD_INT 86
3274: PPUSH
3275: LD_INT 54
3277: PPUSH
3278: CALL_OW 428
3282: PPUSH
3283: CALL_OW 120
// end ;
3287: PPOPN 9
3289: END
// export function PrepareOmarSquad ; var i , j ; begin
3290: LD_INT 0
3292: PPUSH
3293: PPUSH
3294: PPUSH
// uc_side := 5 ;
3295: LD_ADDR_OWVAR 20
3299: PUSH
3300: LD_INT 5
3302: ST_TO_ADDR
// uc_nation := 2 ;
3303: LD_ADDR_OWVAR 21
3307: PUSH
3308: LD_INT 2
3310: ST_TO_ADDR
// omarSquad := [ ] ;
3311: LD_ADDR_EXP 31
3315: PUSH
3316: EMPTY
3317: ST_TO_ADDR
// for i := 1 to 4 do
3318: LD_ADDR_VAR 0 2
3322: PUSH
3323: DOUBLE
3324: LD_INT 1
3326: DEC
3327: ST_TO_ADDR
3328: LD_INT 4
3330: PUSH
3331: FOR_TO
3332: IFFALSE 3412
// begin for j := 1 to [ 5 , 2 , 6 , 2 ] [ i ] do
3334: LD_ADDR_VAR 0 3
3338: PUSH
3339: DOUBLE
3340: LD_INT 1
3342: DEC
3343: ST_TO_ADDR
3344: LD_INT 5
3346: PUSH
3347: LD_INT 2
3349: PUSH
3350: LD_INT 6
3352: PUSH
3353: LD_INT 2
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: PUSH
3362: LD_VAR 0 2
3366: ARRAY
3367: PUSH
3368: FOR_TO
3369: IFFALSE 3408
// begin PrepareHuman ( false , i , 5 ) ;
3371: LD_INT 0
3373: PPUSH
3374: LD_VAR 0 2
3378: PPUSH
3379: LD_INT 5
3381: PPUSH
3382: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
3386: LD_ADDR_EXP 31
3390: PUSH
3391: LD_EXP 31
3395: PPUSH
3396: CALL_OW 44
3400: PPUSH
3401: CALL 48328 0 2
3405: ST_TO_ADDR
// end ;
3406: GO 3368
3408: POP
3409: POP
// end ;
3410: GO 3331
3412: POP
3413: POP
// if HexInfo ( 340 , 205 ) then
3414: LD_INT 340
3416: PPUSH
3417: LD_INT 205
3419: PPUSH
3420: CALL_OW 428
3424: IFFALSE 3441
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
3426: LD_INT 340
3428: PPUSH
3429: LD_INT 205
3431: PPUSH
3432: CALL_OW 428
3436: PPUSH
3437: CALL_OW 64
// for i in omarSquad do
3441: LD_ADDR_VAR 0 2
3445: PUSH
3446: LD_EXP 31
3450: PUSH
3451: FOR_IN
3452: IFFALSE 3618
// begin uc_direction := 4 ;
3454: LD_ADDR_OWVAR 24
3458: PUSH
3459: LD_INT 4
3461: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and Prob ( 50 ) then
3462: LD_VAR 0 2
3466: PPUSH
3467: CALL_OW 257
3471: PUSH
3472: LD_INT 3
3474: EQUAL
3475: PUSH
3476: LD_INT 50
3478: PPUSH
3479: CALL_OW 13
3483: AND
3484: IFFALSE 3579
// begin uc_side := 5 ;
3486: LD_ADDR_OWVAR 20
3490: PUSH
3491: LD_INT 5
3493: ST_TO_ADDR
// uc_nation := 2 ;
3494: LD_ADDR_OWVAR 21
3498: PUSH
3499: LD_INT 2
3501: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun ] [ i mod 2 + 1 ] , 88 ) ;
3502: LD_INT 13
3504: PPUSH
3505: LD_INT 1
3507: PPUSH
3508: LD_INT 1
3510: PPUSH
3511: LD_INT 25
3513: PUSH
3514: LD_INT 27
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: PUSH
3521: LD_VAR 0 2
3525: PUSH
3526: LD_INT 2
3528: MOD
3529: PUSH
3530: LD_INT 1
3532: PLUS
3533: ARRAY
3534: PPUSH
3535: LD_INT 88
3537: PPUSH
3538: CALL 16454 0 5
// PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
3542: CALL_OW 45
3546: PPUSH
3547: LD_INT 13
3549: PPUSH
3550: LD_INT 0
3552: PPUSH
3553: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
3557: LD_VAR 0 2
3561: PPUSH
3562: LD_INT 340
3564: PPUSH
3565: LD_INT 205
3567: PPUSH
3568: CALL_OW 428
3572: PPUSH
3573: CALL_OW 52
// end else
3577: GO 3594
// PlaceUnitArea ( i , southSpawn , false ) ;
3579: LD_VAR 0 2
3583: PPUSH
3584: LD_INT 13
3586: PPUSH
3587: LD_INT 0
3589: PPUSH
3590: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
3594: LD_VAR 0 2
3598: PPUSH
3599: LD_INT 333
3601: PPUSH
3602: LD_INT 210
3604: PPUSH
3605: CALL_OW 111
// wait ( 0 0$2 ) ;
3609: LD_INT 70
3611: PPUSH
3612: CALL_OW 67
// end ;
3616: GO 3451
3618: POP
3619: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
3620: LD_EXP 24
3624: PPUSH
3625: LD_INT 340
3627: PPUSH
3628: LD_INT 205
3630: PPUSH
3631: LD_INT 0
3633: PPUSH
3634: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
3638: LD_EXP 24
3642: PPUSH
3643: LD_INT 333
3645: PPUSH
3646: LD_INT 206
3648: PPUSH
3649: CALL_OW 111
// wait ( 0 0$5 ) ;
3653: LD_INT 175
3655: PPUSH
3656: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ) , 329 , 231 ) ;
3660: LD_EXP 31
3664: PPUSH
3665: LD_INT 2
3667: PUSH
3668: LD_INT 25
3670: PUSH
3671: LD_INT 1
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PUSH
3678: LD_INT 25
3680: PUSH
3681: LD_INT 3
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: LIST
3692: PPUSH
3693: CALL_OW 72
3697: PPUSH
3698: LD_INT 329
3700: PPUSH
3701: LD_INT 231
3703: PPUSH
3704: CALL_OW 114
// wait ( 0 0$10 ) ;
3708: LD_INT 350
3710: PPUSH
3711: CALL_OW 67
// ComAgressiveMove ( omarSquad , 329 , 231 ) ;
3715: LD_EXP 31
3719: PPUSH
3720: LD_INT 329
3722: PPUSH
3723: LD_INT 231
3725: PPUSH
3726: CALL_OW 114
// end ; end_of_file
3730: LD_VAR 0 1
3734: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
3735: LD_INT 0
3737: PPUSH
// uc_side := side ;
3738: LD_ADDR_OWVAR 20
3742: PUSH
3743: LD_VAR 0 1
3747: ST_TO_ADDR
// uc_nation := nation ;
3748: LD_ADDR_OWVAR 21
3752: PUSH
3753: LD_VAR 0 2
3757: ST_TO_ADDR
// vc_chassis := chassis ;
3758: LD_ADDR_OWVAR 37
3762: PUSH
3763: LD_VAR 0 3
3767: ST_TO_ADDR
// vc_engine := engine ;
3768: LD_ADDR_OWVAR 39
3772: PUSH
3773: LD_VAR 0 4
3777: ST_TO_ADDR
// vc_control := control ;
3778: LD_ADDR_OWVAR 38
3782: PUSH
3783: LD_VAR 0 5
3787: ST_TO_ADDR
// vc_weapon := weapon ;
3788: LD_ADDR_OWVAR 40
3792: PUSH
3793: LD_VAR 0 6
3797: ST_TO_ADDR
// vc_fuel_battery := fuel ;
3798: LD_ADDR_OWVAR 41
3802: PUSH
3803: LD_VAR 0 7
3807: ST_TO_ADDR
// result := CreateVehicle ;
3808: LD_ADDR_VAR 0 8
3812: PUSH
3813: CALL_OW 45
3817: ST_TO_ADDR
// end ;
3818: LD_VAR 0 8
3822: RET
// export function SayX ( units , ident ) ; var i ; begin
3823: LD_INT 0
3825: PPUSH
3826: PPUSH
// result := false ;
3827: LD_ADDR_VAR 0 3
3831: PUSH
3832: LD_INT 0
3834: ST_TO_ADDR
// if not units then
3835: LD_VAR 0 1
3839: NOT
3840: IFFALSE 3844
// exit ;
3842: GO 3898
// for i in units do
3844: LD_ADDR_VAR 0 4
3848: PUSH
3849: LD_VAR 0 1
3853: PUSH
3854: FOR_IN
3855: IFFALSE 3896
// if IsOk ( i ) then
3857: LD_VAR 0 4
3861: PPUSH
3862: CALL_OW 302
3866: IFFALSE 3894
// begin Say ( i , ident ) ;
3868: LD_VAR 0 4
3872: PPUSH
3873: LD_VAR 0 2
3877: PPUSH
3878: CALL_OW 88
// result := i ;
3882: LD_ADDR_VAR 0 3
3886: PUSH
3887: LD_VAR 0 4
3891: ST_TO_ADDR
// break ;
3892: GO 3896
// end ;
3894: GO 3854
3896: POP
3897: POP
// end ;
3898: LD_VAR 0 3
3902: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
3903: LD_INT 0
3905: PPUSH
3906: PPUSH
// InitUc ;
3907: CALL_OW 18
// InitHc ;
3911: CALL_OW 19
// uc_side := 0 ;
3915: LD_ADDR_OWVAR 20
3919: PUSH
3920: LD_INT 0
3922: ST_TO_ADDR
// uc_nation := 0 ;
3923: LD_ADDR_OWVAR 21
3927: PUSH
3928: LD_INT 0
3930: ST_TO_ADDR
// for i = 1 to amount do
3931: LD_ADDR_VAR 0 4
3935: PUSH
3936: DOUBLE
3937: LD_INT 1
3939: DEC
3940: ST_TO_ADDR
3941: LD_VAR 0 2
3945: PUSH
3946: FOR_TO
3947: IFFALSE 4029
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
3949: LD_ADDR_OWVAR 29
3953: PUSH
3954: LD_INT 9
3956: PPUSH
3957: LD_INT 12
3959: PPUSH
3960: CALL_OW 12
3964: PUSH
3965: LD_INT 9
3967: PPUSH
3968: LD_INT 12
3970: PPUSH
3971: CALL_OW 12
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
3980: LD_ADDR_OWVAR 35
3984: PUSH
3985: LD_INT 1
3987: NEG
3988: PPUSH
3989: LD_INT 1
3991: PPUSH
3992: CALL_OW 12
3996: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
3997: LD_INT 0
3999: PPUSH
4000: LD_INT 12
4002: PPUSH
4003: LD_INT 1
4005: PPUSH
4006: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
4010: CALL_OW 44
4014: PPUSH
4015: LD_VAR 0 1
4019: PPUSH
4020: LD_INT 0
4022: PPUSH
4023: CALL_OW 49
// end ;
4027: GO 3946
4029: POP
4030: POP
// InitHc ;
4031: CALL_OW 19
// end ;
4035: LD_VAR 0 3
4039: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
4040: LD_INT 0
4042: PPUSH
4043: PPUSH
// uc_side := 0 ;
4044: LD_ADDR_OWVAR 20
4048: PUSH
4049: LD_INT 0
4051: ST_TO_ADDR
// uc_nation := 0 ;
4052: LD_ADDR_OWVAR 21
4056: PUSH
4057: LD_INT 0
4059: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 ] [ Difficulty ] ) ;
4060: LD_INT 7
4062: PPUSH
4063: LD_INT 6
4065: PUSH
4066: LD_INT 5
4068: PUSH
4069: LD_INT 4
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: LIST
4076: PUSH
4077: LD_OWVAR 67
4081: ARRAY
4082: PPUSH
4083: CALL 3903 0 2
// for i = 1 to 2 do
4087: LD_ADDR_VAR 0 4
4091: PUSH
4092: DOUBLE
4093: LD_INT 1
4095: DEC
4096: ST_TO_ADDR
4097: LD_INT 2
4099: PUSH
4100: FOR_TO
4101: IFFALSE 4140
// begin vc_chassis := class_mastodont ;
4103: LD_ADDR_OWVAR 37
4107: PUSH
4108: LD_EXP 55
4112: ST_TO_ADDR
// vc_control := control_rider ;
4113: LD_ADDR_OWVAR 38
4117: PUSH
4118: LD_INT 4
4120: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
4121: CALL_OW 45
4125: PPUSH
4126: LD_VAR 0 1
4130: PPUSH
4131: LD_INT 0
4133: PPUSH
4134: CALL 47242 0 3
// end ;
4138: GO 4100
4140: POP
4141: POP
// for i := 1 to 4 do
4142: LD_ADDR_VAR 0 4
4146: PUSH
4147: DOUBLE
4148: LD_INT 1
4150: DEC
4151: ST_TO_ADDR
4152: LD_INT 4
4154: PUSH
4155: FOR_TO
4156: IFFALSE 4195
// begin hc_class := class_horse ;
4158: LD_ADDR_OWVAR 28
4162: PUSH
4163: LD_EXP 56
4167: ST_TO_ADDR
// hc_gallery :=  ;
4168: LD_ADDR_OWVAR 33
4172: PUSH
4173: LD_STRING 
4175: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
4176: CALL_OW 44
4180: PPUSH
4181: LD_VAR 0 1
4185: PPUSH
4186: LD_INT 0
4188: PPUSH
4189: CALL_OW 49
// end ;
4193: GO 4155
4195: POP
4196: POP
// for i = 1 to 5 do
4197: LD_ADDR_VAR 0 4
4201: PUSH
4202: DOUBLE
4203: LD_INT 1
4205: DEC
4206: ST_TO_ADDR
4207: LD_INT 5
4209: PUSH
4210: FOR_TO
4211: IFFALSE 4265
// begin hc_class = class_tiger ;
4213: LD_ADDR_OWVAR 28
4217: PUSH
4218: LD_INT 14
4220: ST_TO_ADDR
// hc_gallery =  ;
4221: LD_ADDR_OWVAR 33
4225: PUSH
4226: LD_STRING 
4228: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
4229: LD_ADDR_OWVAR 35
4233: PUSH
4234: LD_INT 7
4236: NEG
4237: PPUSH
4238: LD_INT 7
4240: PPUSH
4241: CALL_OW 12
4245: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
4246: CALL_OW 44
4250: PPUSH
4251: LD_VAR 0 1
4255: PPUSH
4256: LD_INT 0
4258: PPUSH
4259: CALL 47242 0 3
// end ;
4263: GO 4210
4265: POP
4266: POP
// for i := 1 to 4 do
4267: LD_ADDR_VAR 0 4
4271: PUSH
4272: DOUBLE
4273: LD_INT 1
4275: DEC
4276: ST_TO_ADDR
4277: LD_INT 4
4279: PUSH
4280: FOR_TO
4281: IFFALSE 4318
// begin hc_class := class_phororhacos ;
4283: LD_ADDR_OWVAR 28
4287: PUSH
4288: LD_INT 18
4290: ST_TO_ADDR
// hc_gallery :=  ;
4291: LD_ADDR_OWVAR 33
4295: PUSH
4296: LD_STRING 
4298: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
4299: CALL_OW 44
4303: PPUSH
4304: LD_VAR 0 1
4308: PPUSH
4309: LD_INT 0
4311: PPUSH
4312: CALL_OW 49
// end ;
4316: GO 4280
4318: POP
4319: POP
// for i := 1 to 4 do
4320: LD_ADDR_VAR 0 4
4324: PUSH
4325: DOUBLE
4326: LD_INT 1
4328: DEC
4329: ST_TO_ADDR
4330: LD_INT 4
4332: PUSH
4333: FOR_TO
4334: IFFALSE 4371
// begin hc_class := class_baggie ;
4336: LD_ADDR_OWVAR 28
4340: PUSH
4341: LD_INT 13
4343: ST_TO_ADDR
// hc_gallery :=  ;
4344: LD_ADDR_OWVAR 33
4348: PUSH
4349: LD_STRING 
4351: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
4352: CALL_OW 44
4356: PPUSH
4357: LD_VAR 0 1
4361: PPUSH
4362: LD_INT 0
4364: PPUSH
4365: CALL_OW 49
// end ;
4369: GO 4333
4371: POP
4372: POP
// for i := 1 to 7 do
4373: LD_ADDR_VAR 0 4
4377: PUSH
4378: DOUBLE
4379: LD_INT 1
4381: DEC
4382: ST_TO_ADDR
4383: LD_INT 7
4385: PUSH
4386: FOR_TO
4387: IFFALSE 4424
// begin hc_class := class_frog ;
4389: LD_ADDR_OWVAR 28
4393: PUSH
4394: LD_INT 19
4396: ST_TO_ADDR
// hc_gallery :=  ;
4397: LD_ADDR_OWVAR 33
4401: PUSH
4402: LD_STRING 
4404: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
4405: CALL_OW 44
4409: PPUSH
4410: LD_VAR 0 2
4414: PPUSH
4415: LD_INT 0
4417: PPUSH
4418: CALL_OW 49
// end ;
4422: GO 4386
4424: POP
4425: POP
// end ;
4426: LD_VAR 0 3
4430: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
4431: LD_INT 0
4433: PPUSH
4434: PPUSH
4435: PPUSH
// if not observer or not unit then
4436: LD_VAR 0 1
4440: NOT
4441: PUSH
4442: LD_VAR 0 2
4446: NOT
4447: OR
4448: IFFALSE 4452
// exit ;
4450: GO 4500
// if not See ( GetSide ( observer ) , unit ) then
4452: LD_VAR 0 1
4456: PPUSH
4457: CALL_OW 255
4461: PPUSH
4462: LD_VAR 0 2
4466: PPUSH
4467: CALL_OW 292
4471: NOT
4472: IFFALSE 4476
// exit ;
4474: GO 4500
// result := GetDistUnits ( observer , unit ) < 12 ;
4476: LD_ADDR_VAR 0 3
4480: PUSH
4481: LD_VAR 0 1
4485: PPUSH
4486: LD_VAR 0 2
4490: PPUSH
4491: CALL_OW 296
4495: PUSH
4496: LD_INT 12
4498: LESS
4499: ST_TO_ADDR
// end ;
4500: LD_VAR 0 3
4504: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
4505: LD_INT 0
4507: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
4508: LD_VAR 0 2
4512: PUSH
4513: LD_INT 1
4515: ARRAY
4516: PPUSH
4517: LD_VAR 0 2
4521: PUSH
4522: LD_INT 2
4524: ARRAY
4525: PPUSH
4526: CALL_OW 488
4530: PUSH
4531: LD_VAR 0 2
4535: PUSH
4536: LD_INT 1
4538: ARRAY
4539: PPUSH
4540: LD_VAR 0 2
4544: PUSH
4545: LD_INT 2
4547: ARRAY
4548: PPUSH
4549: CALL_OW 428
4553: PUSH
4554: LD_INT 0
4556: EQUAL
4557: AND
4558: IFFALSE 4592
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
4560: LD_VAR 0 1
4564: PPUSH
4565: LD_VAR 0 2
4569: PUSH
4570: LD_INT 1
4572: ARRAY
4573: PPUSH
4574: LD_VAR 0 2
4578: PUSH
4579: LD_INT 2
4581: ARRAY
4582: PPUSH
4583: LD_VAR 0 3
4587: PPUSH
4588: CALL_OW 48
// end ;
4592: LD_VAR 0 4
4596: RET
// export function ReverseArray ( array ) ; var i ; begin
4597: LD_INT 0
4599: PPUSH
4600: PPUSH
// if not array then
4601: LD_VAR 0 1
4605: NOT
4606: IFFALSE 4610
// exit ;
4608: GO 4668
// result := [ ] ;
4610: LD_ADDR_VAR 0 2
4614: PUSH
4615: EMPTY
4616: ST_TO_ADDR
// for i := 1 to array do
4617: LD_ADDR_VAR 0 3
4621: PUSH
4622: DOUBLE
4623: LD_INT 1
4625: DEC
4626: ST_TO_ADDR
4627: LD_VAR 0 1
4631: PUSH
4632: FOR_TO
4633: IFFALSE 4666
// result := Insert ( result , 1 , array [ i ] ) ;
4635: LD_ADDR_VAR 0 2
4639: PUSH
4640: LD_VAR 0 2
4644: PPUSH
4645: LD_INT 1
4647: PPUSH
4648: LD_VAR 0 1
4652: PUSH
4653: LD_VAR 0 3
4657: ARRAY
4658: PPUSH
4659: CALL_OW 2
4663: ST_TO_ADDR
4664: GO 4632
4666: POP
4667: POP
// end ;
4668: LD_VAR 0 2
4672: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
4673: LD_INT 0
4675: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
4676: LD_VAR 0 1
4680: PPUSH
4681: LD_VAR 0 2
4685: PPUSH
4686: LD_VAR 0 3
4690: PPUSH
4691: LD_VAR 0 4
4695: PPUSH
4696: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
4700: LD_VAR 0 1
4704: PPUSH
4705: LD_VAR 0 2
4709: PPUSH
4710: LD_VAR 0 3
4714: PPUSH
4715: CALL_OW 331
// end ;
4719: LD_VAR 0 5
4723: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
4724: LD_INT 0
4726: PPUSH
// if not units then
4727: LD_VAR 0 1
4731: NOT
4732: IFFALSE 4736
// exit ;
4734: GO 4819
// result := true ;
4736: LD_ADDR_VAR 0 4
4740: PUSH
4741: LD_INT 1
4743: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
4744: LD_VAR 0 1
4748: PPUSH
4749: LD_INT 26
4751: PUSH
4752: LD_INT 1
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: PPUSH
4759: CALL_OW 72
4763: PUSH
4764: LD_INT 1
4766: ARRAY
4767: PPUSH
4768: LD_VAR 0 2
4772: PPUSH
4773: CALL_OW 88
4777: NOT
4778: IFFALSE 4819
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
4780: LD_ADDR_VAR 0 4
4784: PUSH
4785: LD_VAR 0 1
4789: PPUSH
4790: LD_INT 26
4792: PUSH
4793: LD_INT 2
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: PPUSH
4800: CALL_OW 72
4804: PUSH
4805: LD_INT 1
4807: ARRAY
4808: PPUSH
4809: LD_VAR 0 3
4813: PPUSH
4814: CALL_OW 88
4818: ST_TO_ADDR
// end ;
4819: LD_VAR 0 4
4823: RET
// export function SeeGroup ( side , group ) ; var i ; begin
4824: LD_INT 0
4826: PPUSH
4827: PPUSH
// if not group then
4828: LD_VAR 0 2
4832: NOT
4833: IFFALSE 4837
// exit ;
4835: GO 4882
// for i in group do
4837: LD_ADDR_VAR 0 4
4841: PUSH
4842: LD_VAR 0 2
4846: PUSH
4847: FOR_IN
4848: IFFALSE 4880
// if See ( side , i ) then
4850: LD_VAR 0 1
4854: PPUSH
4855: LD_VAR 0 4
4859: PPUSH
4860: CALL_OW 292
4864: IFFALSE 4878
// begin result := true ;
4866: LD_ADDR_VAR 0 3
4870: PUSH
4871: LD_INT 1
4873: ST_TO_ADDR
// exit ;
4874: POP
4875: POP
4876: GO 4882
// end ;
4878: GO 4847
4880: POP
4881: POP
// end ; end_of_file
4882: LD_VAR 0 3
4886: RET
// export Morozov ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad ; export function PrepareRussian ; var i , j , b , un , veh , tmp , outpost ; begin
4887: LD_INT 0
4889: PPUSH
4890: PPUSH
4891: PPUSH
4892: PPUSH
4893: PPUSH
4894: PPUSH
4895: PPUSH
4896: PPUSH
// uc_side := 3 ;
4897: LD_ADDR_OWVAR 20
4901: PUSH
4902: LD_INT 3
4904: ST_TO_ADDR
// uc_nation := 3 ;
4905: LD_ADDR_OWVAR 21
4909: PUSH
4910: LD_INT 3
4912: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
4913: LD_ADDR_EXP 32
4917: PUSH
4918: LD_STRING Morozov
4920: PPUSH
4921: CALL_OW 25
4925: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
4926: LD_EXP 32
4930: PPUSH
4931: LD_INT 52
4933: PPUSH
4934: CALL_OW 52
// SetBName ( ruLenin , lenin ) ;
4938: LD_INT 52
4940: PPUSH
4941: LD_STRING lenin
4943: PPUSH
4944: CALL_OW 500
// ruOutsiders := [ ] ;
4948: LD_ADDR_EXP 34
4952: PUSH
4953: EMPTY
4954: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
4955: LD_ADDR_EXP 36
4959: PUSH
4960: EMPTY
4961: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
4962: LD_ADDR_EXP 37
4966: PUSH
4967: EMPTY
4968: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
4969: LD_ADDR_VAR 0 7
4973: PUSH
4974: LD_INT 22
4976: PUSH
4977: LD_INT 3
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PUSH
4984: LD_INT 21
4986: PUSH
4987: LD_INT 3
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PPUSH
4998: CALL_OW 69
5002: ST_TO_ADDR
// for i in tmp do
5003: LD_ADDR_VAR 0 2
5007: PUSH
5008: LD_VAR 0 7
5012: PUSH
5013: FOR_IN
5014: IFFALSE 5047
// SetBLevel ( i , [ 5 , 5 , 6 ] [ Difficulty ] ) ;
5016: LD_VAR 0 2
5020: PPUSH
5021: LD_INT 5
5023: PUSH
5024: LD_INT 5
5026: PUSH
5027: LD_INT 6
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: LIST
5034: PUSH
5035: LD_OWVAR 67
5039: ARRAY
5040: PPUSH
5041: CALL_OW 241
5045: GO 5013
5047: POP
5048: POP
// for i := 1 to 3 do
5049: LD_ADDR_VAR 0 2
5053: PUSH
5054: DOUBLE
5055: LD_INT 1
5057: DEC
5058: ST_TO_ADDR
5059: LD_INT 3
5061: PUSH
5062: FOR_TO
5063: IFFALSE 5101
// begin PrepareHuman ( false , 1 , 0 ) ;
5065: LD_INT 0
5067: PPUSH
5068: LD_INT 1
5070: PPUSH
5071: LD_INT 0
5073: PPUSH
5074: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
5078: CALL_OW 44
5082: PPUSH
5083: LD_INT 75
5085: PPUSH
5086: LD_INT 49
5088: PPUSH
5089: LD_INT 3
5091: PPUSH
5092: LD_INT 0
5094: PPUSH
5095: CALL_OW 50
// end ;
5099: GO 5062
5101: POP
5102: POP
// for i := 1 to 4 do
5103: LD_ADDR_VAR 0 2
5107: PUSH
5108: DOUBLE
5109: LD_INT 1
5111: DEC
5112: ST_TO_ADDR
5113: LD_INT 4
5115: PUSH
5116: FOR_TO
5117: IFFALSE 5163
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
5119: LD_INT 0
5121: PPUSH
5122: LD_INT 1
5124: PPUSH
5125: LD_INT 2
5127: PPUSH
5128: CALL_OW 12
5132: PPUSH
5133: LD_INT 0
5135: PPUSH
5136: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
5140: CALL_OW 44
5144: PPUSH
5145: LD_INT 330
5147: PPUSH
5148: LD_INT 231
5150: PPUSH
5151: LD_INT 5
5153: PPUSH
5154: LD_INT 0
5156: PPUSH
5157: CALL_OW 50
// end ;
5161: GO 5116
5163: POP
5164: POP
// hc_class := 1 ;
5165: LD_ADDR_OWVAR 28
5169: PUSH
5170: LD_INT 1
5172: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
5173: CALL_OW 44
5177: PPUSH
5178: LD_INT 324
5180: PPUSH
5181: LD_INT 219
5183: PPUSH
5184: CALL_OW 428
5188: PPUSH
5189: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
5193: CALL_OW 44
5197: PPUSH
5198: LD_INT 316
5200: PPUSH
5201: LD_INT 223
5203: PPUSH
5204: CALL_OW 428
5208: PPUSH
5209: CALL_OW 52
// outpost := [ ] ;
5213: LD_ADDR_VAR 0 8
5217: PUSH
5218: EMPTY
5219: ST_TO_ADDR
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
5220: LD_ADDR_VAR 0 7
5224: PUSH
5225: LD_INT 172
5227: PPUSH
5228: LD_INT 198
5230: PPUSH
5231: CALL_OW 428
5235: PPUSH
5236: CALL_OW 274
5240: PUSH
5241: LD_INT 189
5243: PPUSH
5244: LD_INT 156
5246: PPUSH
5247: CALL_OW 428
5251: PPUSH
5252: CALL_OW 274
5256: PUSH
5257: LD_INT 341
5259: PPUSH
5260: LD_INT 232
5262: PPUSH
5263: CALL_OW 428
5267: PPUSH
5268: CALL_OW 274
5272: PUSH
5273: EMPTY
5274: LIST
5275: LIST
5276: LIST
5277: ST_TO_ADDR
// for i in tmp do
5278: LD_ADDR_VAR 0 2
5282: PUSH
5283: LD_VAR 0 7
5287: PUSH
5288: FOR_IN
5289: IFFALSE 5323
// begin SetResourceType ( i , mat_cans , 200 ) ;
5291: LD_VAR 0 2
5295: PPUSH
5296: LD_INT 1
5298: PPUSH
5299: LD_INT 200
5301: PPUSH
5302: CALL_OW 277
// SetResourceType ( i , mat_oil , 200 ) ;
5306: LD_VAR 0 2
5310: PPUSH
5311: LD_INT 2
5313: PPUSH
5314: LD_INT 200
5316: PPUSH
5317: CALL_OW 277
// end ;
5321: GO 5288
5323: POP
5324: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 177 , 114 ] , [ 138 , 96 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
5325: LD_ADDR_VAR 0 7
5329: PUSH
5330: LD_INT 198
5332: PUSH
5333: LD_INT 158
5335: PUSH
5336: EMPTY
5337: LIST
5338: LIST
5339: PUSH
5340: LD_INT 203
5342: PUSH
5343: LD_INT 166
5345: PUSH
5346: EMPTY
5347: LIST
5348: LIST
5349: PUSH
5350: LD_INT 177
5352: PUSH
5353: LD_INT 114
5355: PUSH
5356: EMPTY
5357: LIST
5358: LIST
5359: PUSH
5360: LD_INT 138
5362: PUSH
5363: LD_INT 96
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: PUSH
5370: LD_INT 181
5372: PUSH
5373: LD_INT 209
5375: PUSH
5376: EMPTY
5377: LIST
5378: LIST
5379: PUSH
5380: LD_INT 178
5382: PUSH
5383: LD_INT 196
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: PUSH
5390: LD_INT 181
5392: PUSH
5393: LD_INT 212
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PUSH
5400: EMPTY
5401: LIST
5402: LIST
5403: LIST
5404: LIST
5405: LIST
5406: LIST
5407: LIST
5408: ST_TO_ADDR
// for i := 1 to tmp do
5409: LD_ADDR_VAR 0 2
5413: PUSH
5414: DOUBLE
5415: LD_INT 1
5417: DEC
5418: ST_TO_ADDR
5419: LD_VAR 0 7
5423: PUSH
5424: FOR_TO
5425: IFFALSE 5567
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 ] [ Difficulty ] ) ;
5427: LD_INT 0
5429: PPUSH
5430: LD_INT 1
5432: PPUSH
5433: LD_INT 5
5435: PUSH
5436: LD_INT 6
5438: PUSH
5439: LD_INT 7
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: LIST
5446: PUSH
5447: LD_OWVAR 67
5451: ARRAY
5452: PPUSH
5453: CALL_OW 380
// un := CreateHuman ;
5457: LD_ADDR_VAR 0 5
5461: PUSH
5462: CALL_OW 44
5466: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
5467: LD_ADDR_VAR 0 4
5471: PUSH
5472: LD_VAR 0 7
5476: PUSH
5477: LD_VAR 0 2
5481: ARRAY
5482: PUSH
5483: LD_INT 1
5485: ARRAY
5486: PPUSH
5487: LD_VAR 0 7
5491: PUSH
5492: LD_VAR 0 2
5496: ARRAY
5497: PUSH
5498: LD_INT 2
5500: ARRAY
5501: PPUSH
5502: CALL_OW 428
5506: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
5507: LD_VAR 0 5
5511: PPUSH
5512: LD_VAR 0 4
5516: PPUSH
5517: CALL 44162 0 1
5521: PPUSH
5522: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5526: LD_VAR 0 5
5530: PPUSH
5531: LD_VAR 0 4
5535: PPUSH
5536: CALL_OW 52
// outpost := Replace ( outpost , outpost , un ) ;
5540: LD_ADDR_VAR 0 8
5544: PUSH
5545: LD_VAR 0 8
5549: PPUSH
5550: LD_VAR 0 8
5554: PPUSH
5555: LD_VAR 0 5
5559: PPUSH
5560: CALL_OW 1
5564: ST_TO_ADDR
// end ;
5565: GO 5424
5567: POP
5568: POP
// for i := 1 to 2 do
5569: LD_ADDR_VAR 0 2
5573: PUSH
5574: DOUBLE
5575: LD_INT 1
5577: DEC
5578: ST_TO_ADDR
5579: LD_INT 2
5581: PUSH
5582: FOR_TO
5583: IFFALSE 5677
// begin PrepareHuman ( false , 2 , [ 5 , 6 , 7 ] [ Difficulty ] ) ;
5585: LD_INT 0
5587: PPUSH
5588: LD_INT 2
5590: PPUSH
5591: LD_INT 5
5593: PUSH
5594: LD_INT 6
5596: PUSH
5597: LD_INT 7
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: LIST
5604: PUSH
5605: LD_OWVAR 67
5609: ARRAY
5610: PPUSH
5611: CALL_OW 380
// un := CreateHuman ;
5615: LD_ADDR_VAR 0 5
5619: PUSH
5620: CALL_OW 44
5624: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
5625: LD_VAR 0 5
5629: PPUSH
5630: LD_INT 194
5632: PPUSH
5633: LD_INT 164
5635: PPUSH
5636: LD_INT 6
5638: PPUSH
5639: LD_INT 0
5641: PPUSH
5642: CALL_OW 50
// outpost := Replace ( outpost , outpost + 1 , un ) ;
5646: LD_ADDR_VAR 0 8
5650: PUSH
5651: LD_VAR 0 8
5655: PPUSH
5656: LD_VAR 0 8
5660: PUSH
5661: LD_INT 1
5663: PLUS
5664: PPUSH
5665: LD_VAR 0 5
5669: PPUSH
5670: CALL_OW 1
5674: ST_TO_ADDR
// end ;
5675: GO 5582
5677: POP
5678: POP
// tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
5679: LD_ADDR_VAR 0 7
5683: PUSH
5684: LD_INT 135
5686: PUSH
5687: LD_INT 100
5689: PUSH
5690: EMPTY
5691: LIST
5692: LIST
5693: PUSH
5694: LD_INT 137
5696: PUSH
5697: LD_INT 92
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: PUSH
5704: EMPTY
5705: LIST
5706: LIST
5707: ST_TO_ADDR
// for i := 1 to tmp do
5708: LD_ADDR_VAR 0 2
5712: PUSH
5713: DOUBLE
5714: LD_INT 1
5716: DEC
5717: ST_TO_ADDR
5718: LD_VAR 0 7
5722: PUSH
5723: FOR_TO
5724: IFFALSE 5890
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
5726: LD_INT 22
5728: PUSH
5729: LD_INT 22
5731: PUSH
5732: LD_INT 24
5734: PUSH
5735: LD_INT 24
5737: PUSH
5738: EMPTY
5739: LIST
5740: LIST
5741: LIST
5742: LIST
5743: PUSH
5744: LD_OWVAR 67
5748: PUSH
5749: LD_INT 0
5751: PPUSH
5752: LD_INT 1
5754: PPUSH
5755: CALL_OW 12
5759: PLUS
5760: ARRAY
5761: PPUSH
5762: LD_INT 1
5764: PPUSH
5765: LD_INT 1
5767: PPUSH
5768: LD_INT 44
5770: PPUSH
5771: LD_INT 25
5773: PPUSH
5774: CALL 16454 0 5
// veh := CreateVehicle ;
5778: LD_ADDR_VAR 0 6
5782: PUSH
5783: CALL_OW 45
5787: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
5788: LD_VAR 0 6
5792: PPUSH
5793: LD_INT 2
5795: PPUSH
5796: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
5800: LD_VAR 0 6
5804: PPUSH
5805: LD_VAR 0 7
5809: PUSH
5810: LD_VAR 0 2
5814: ARRAY
5815: PUSH
5816: LD_INT 1
5818: ARRAY
5819: PPUSH
5820: LD_VAR 0 7
5824: PUSH
5825: LD_VAR 0 2
5829: ARRAY
5830: PUSH
5831: LD_INT 2
5833: ARRAY
5834: PPUSH
5835: LD_INT 0
5837: PPUSH
5838: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
5842: LD_INT 0
5844: PPUSH
5845: LD_INT 3
5847: PPUSH
5848: LD_INT 6
5850: PPUSH
5851: CALL_OW 380
// un := CreateHuman ;
5855: LD_ADDR_VAR 0 5
5859: PUSH
5860: CALL_OW 44
5864: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5865: LD_VAR 0 5
5869: PPUSH
5870: LD_VAR 0 6
5874: PPUSH
5875: CALL_OW 52
// ComHold ( veh ) ;
5879: LD_VAR 0 6
5883: PPUSH
5884: CALL_OW 140
// end ;
5888: GO 5723
5890: POP
5891: POP
// if Difficulty > 1 then
5892: LD_OWVAR 67
5896: PUSH
5897: LD_INT 1
5899: GREATER
5900: IFFALSE 6257
// begin tmp := [ 191 , 122 ] ;
5902: LD_ADDR_VAR 0 7
5906: PUSH
5907: LD_INT 191
5909: PUSH
5910: LD_INT 122
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
5917: LD_INT 24
5919: PPUSH
5920: LD_INT 1
5922: PPUSH
5923: LD_INT 1
5925: PPUSH
5926: LD_INT 44
5928: PPUSH
5929: LD_INT 30
5931: PPUSH
5932: CALL 16454 0 5
// ruBlockadeTank := CreateVehicle ;
5936: LD_ADDR_EXP 33
5940: PUSH
5941: CALL_OW 45
5945: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
5946: LD_EXP 33
5950: PPUSH
5951: LD_INT 2
5953: PPUSH
5954: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
5958: LD_EXP 33
5962: PPUSH
5963: LD_INT 191
5965: PPUSH
5966: LD_INT 122
5968: PPUSH
5969: LD_INT 0
5971: PPUSH
5972: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 ] [ Difficulty - 1 ] ) ;
5976: LD_INT 1
5978: PPUSH
5979: LD_INT 5
5981: PUSH
5982: LD_INT 6
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: PUSH
5989: LD_OWVAR 67
5993: PUSH
5994: LD_INT 1
5996: MINUS
5997: ARRAY
5998: PPUSH
5999: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
6003: CALL_OW 44
6007: PPUSH
6008: LD_EXP 33
6012: PPUSH
6013: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
6017: LD_EXP 33
6021: PPUSH
6022: CALL_OW 140
// ruBlockadeSquad := [ ] ;
6026: LD_ADDR_EXP 35
6030: PUSH
6031: EMPTY
6032: ST_TO_ADDR
// for i := 1 to [ 3 , 4 ] [ Difficulty - 1 ] do
6033: LD_ADDR_VAR 0 2
6037: PUSH
6038: DOUBLE
6039: LD_INT 1
6041: DEC
6042: ST_TO_ADDR
6043: LD_INT 3
6045: PUSH
6046: LD_INT 4
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: PUSH
6053: LD_OWVAR 67
6057: PUSH
6058: LD_INT 1
6060: MINUS
6061: ARRAY
6062: PUSH
6063: FOR_TO
6064: IFFALSE 6176
// begin PrepareHuman ( false , 1 , [ 5 , 6 ] [ Difficulty - 1 ] ) ;
6066: LD_INT 0
6068: PPUSH
6069: LD_INT 1
6071: PPUSH
6072: LD_INT 5
6074: PUSH
6075: LD_INT 6
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: PUSH
6082: LD_OWVAR 67
6086: PUSH
6087: LD_INT 1
6089: MINUS
6090: ARRAY
6091: PPUSH
6092: CALL_OW 380
// un := CreateHuman ;
6096: LD_ADDR_VAR 0 5
6100: PUSH
6101: CALL_OW 44
6105: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
6106: LD_VAR 0 5
6110: PPUSH
6111: LD_INT 9
6113: PPUSH
6114: LD_INT 0
6116: PPUSH
6117: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
6121: LD_VAR 0 5
6125: PPUSH
6126: LD_INT 198
6128: PPUSH
6129: LD_INT 129
6131: PPUSH
6132: CALL_OW 118
// AddComCrawl ( un ) ;
6136: LD_VAR 0 5
6140: PPUSH
6141: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
6145: LD_ADDR_EXP 35
6149: PUSH
6150: LD_EXP 35
6154: PPUSH
6155: LD_EXP 35
6159: PUSH
6160: LD_INT 1
6162: PLUS
6163: PPUSH
6164: LD_VAR 0 5
6168: PPUSH
6169: CALL_OW 1
6173: ST_TO_ADDR
// end ;
6174: GO 6063
6176: POP
6177: POP
// PrepareHuman ( false , 4 , 5 ) ;
6178: LD_INT 0
6180: PPUSH
6181: LD_INT 4
6183: PPUSH
6184: LD_INT 5
6186: PPUSH
6187: CALL_OW 380
// un := CreateHuman ;
6191: LD_ADDR_VAR 0 5
6195: PUSH
6196: CALL_OW 44
6200: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
6201: LD_VAR 0 5
6205: PPUSH
6206: LD_INT 179
6208: PPUSH
6209: LD_INT 113
6211: PPUSH
6212: LD_INT 0
6214: PPUSH
6215: CALL_OW 48
// ComHold ( un ) ;
6219: LD_VAR 0 5
6223: PPUSH
6224: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
6228: LD_ADDR_EXP 35
6232: PUSH
6233: LD_EXP 35
6237: PPUSH
6238: LD_EXP 35
6242: PUSH
6243: LD_INT 1
6245: PLUS
6246: PPUSH
6247: LD_VAR 0 5
6251: PPUSH
6252: CALL_OW 1
6256: ST_TO_ADDR
// end ; tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
6257: LD_ADDR_VAR 0 7
6261: PUSH
6262: LD_INT 167
6264: PPUSH
6265: LD_INT 243
6267: PPUSH
6268: CALL_OW 428
6272: PPUSH
6273: CALL_OW 274
6277: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
6278: LD_VAR 0 7
6282: PPUSH
6283: LD_INT 1
6285: PPUSH
6286: LD_INT 1000
6288: PPUSH
6289: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
6293: LD_VAR 0 7
6297: PPUSH
6298: LD_INT 2
6300: PPUSH
6301: LD_INT 400
6303: PPUSH
6304: CALL_OW 277
// tmp := HexInfo ( 169 , 226 ) ;
6308: LD_ADDR_VAR 0 7
6312: PUSH
6313: LD_INT 169
6315: PPUSH
6316: LD_INT 226
6318: PPUSH
6319: CALL_OW 428
6323: ST_TO_ADDR
// for i := 1 to 3 do
6324: LD_ADDR_VAR 0 2
6328: PUSH
6329: DOUBLE
6330: LD_INT 1
6332: DEC
6333: ST_TO_ADDR
6334: LD_INT 3
6336: PUSH
6337: FOR_TO
6338: IFFALSE 6425
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
6340: LD_INT 0
6342: PPUSH
6343: LD_INT 1
6345: PPUSH
6346: LD_INT 4
6348: PUSH
6349: LD_INT 5
6351: PUSH
6352: LD_INT 5
6354: PUSH
6355: EMPTY
6356: LIST
6357: LIST
6358: LIST
6359: PUSH
6360: LD_OWVAR 67
6364: ARRAY
6365: PPUSH
6366: CALL_OW 380
// un := CreateHuman ;
6370: LD_ADDR_VAR 0 5
6374: PUSH
6375: CALL_OW 44
6379: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
6380: LD_VAR 0 5
6384: PPUSH
6385: LD_VAR 0 7
6389: PPUSH
6390: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
6394: LD_ADDR_EXP 36
6398: PUSH
6399: LD_EXP 36
6403: PPUSH
6404: LD_EXP 36
6408: PUSH
6409: LD_INT 1
6411: PLUS
6412: PPUSH
6413: LD_VAR 0 5
6417: PPUSH
6418: CALL_OW 1
6422: ST_TO_ADDR
// end ;
6423: GO 6337
6425: POP
6426: POP
// tmp := [ [ 165 , 224 ] , [ 173 , 228 ] ] ;
6427: LD_ADDR_VAR 0 7
6431: PUSH
6432: LD_INT 165
6434: PUSH
6435: LD_INT 224
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: PUSH
6442: LD_INT 173
6444: PUSH
6445: LD_INT 228
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: PUSH
6452: EMPTY
6453: LIST
6454: LIST
6455: ST_TO_ADDR
// for i := 1 to tmp do
6456: LD_ADDR_VAR 0 2
6460: PUSH
6461: DOUBLE
6462: LD_INT 1
6464: DEC
6465: ST_TO_ADDR
6466: LD_VAR 0 7
6470: PUSH
6471: FOR_TO
6472: IFFALSE 6589
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
6474: LD_INT 0
6476: PPUSH
6477: LD_INT 1
6479: PPUSH
6480: LD_INT 4
6482: PUSH
6483: LD_INT 5
6485: PUSH
6486: LD_INT 5
6488: PUSH
6489: EMPTY
6490: LIST
6491: LIST
6492: LIST
6493: PUSH
6494: LD_OWVAR 67
6498: ARRAY
6499: PPUSH
6500: CALL_OW 380
// un := CreateHuman ;
6504: LD_ADDR_VAR 0 5
6508: PUSH
6509: CALL_OW 44
6513: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
6514: LD_VAR 0 5
6518: PPUSH
6519: LD_VAR 0 7
6523: PUSH
6524: LD_VAR 0 2
6528: ARRAY
6529: PUSH
6530: LD_INT 1
6532: ARRAY
6533: PPUSH
6534: LD_VAR 0 7
6538: PUSH
6539: LD_VAR 0 2
6543: ARRAY
6544: PUSH
6545: LD_INT 2
6547: ARRAY
6548: PPUSH
6549: CALL_OW 428
6553: PPUSH
6554: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
6558: LD_ADDR_EXP 36
6562: PUSH
6563: LD_EXP 36
6567: PPUSH
6568: LD_EXP 36
6572: PUSH
6573: LD_INT 1
6575: PLUS
6576: PPUSH
6577: LD_VAR 0 5
6581: PPUSH
6582: CALL_OW 1
6586: ST_TO_ADDR
// end ;
6587: GO 6471
6589: POP
6590: POP
// for i := 1 to 2 do
6591: LD_ADDR_VAR 0 2
6595: PUSH
6596: DOUBLE
6597: LD_INT 1
6599: DEC
6600: ST_TO_ADDR
6601: LD_INT 2
6603: PUSH
6604: FOR_TO
6605: IFFALSE 6653
// begin PrepareHuman ( false , 2 , 3 ) ;
6607: LD_INT 0
6609: PPUSH
6610: LD_INT 2
6612: PPUSH
6613: LD_INT 3
6615: PPUSH
6616: CALL_OW 380
// un := CreateHuman ;
6620: LD_ADDR_VAR 0 5
6624: PUSH
6625: CALL_OW 44
6629: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
6630: LD_VAR 0 5
6634: PPUSH
6635: LD_INT 166
6637: PPUSH
6638: LD_INT 233
6640: PPUSH
6641: LD_INT 2
6643: PPUSH
6644: LD_INT 0
6646: PPUSH
6647: CALL_OW 50
// end ;
6651: GO 6604
6653: POP
6654: POP
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
6655: LD_ADDR_VAR 0 7
6659: PUSH
6660: LD_INT 71
6662: PUSH
6663: LD_INT 52
6665: PUSH
6666: LD_INT 11
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: LIST
6673: ST_TO_ADDR
// for i in tmp do
6674: LD_ADDR_VAR 0 2
6678: PUSH
6679: LD_VAR 0 7
6683: PUSH
6684: FOR_IN
6685: IFFALSE 6729
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
6687: LD_VAR 0 2
6691: PPUSH
6692: CALL_OW 274
6696: PPUSH
6697: LD_INT 1
6699: PPUSH
6700: LD_INT 3000
6702: PPUSH
6703: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
6707: LD_VAR 0 2
6711: PPUSH
6712: CALL_OW 274
6716: PPUSH
6717: LD_INT 2
6719: PPUSH
6720: LD_INT 600
6722: PPUSH
6723: CALL_OW 277
// end ;
6727: GO 6684
6729: POP
6730: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
6731: LD_ADDR_VAR 0 7
6735: PUSH
6736: LD_INT 41
6738: PUSH
6739: LD_INT 57
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: PUSH
6746: LD_INT 38
6748: PUSH
6749: LD_INT 55
6751: PUSH
6752: EMPTY
6753: LIST
6754: LIST
6755: PUSH
6756: LD_INT 50
6758: PUSH
6759: LD_INT 73
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PUSH
6766: LD_INT 51
6768: PUSH
6769: LD_INT 65
6771: PUSH
6772: EMPTY
6773: LIST
6774: LIST
6775: PUSH
6776: LD_INT 82
6778: PUSH
6779: LD_INT 93
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: PUSH
6786: LD_INT 87
6788: PUSH
6789: LD_INT 100
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: PUSH
6796: LD_INT 91
6798: PUSH
6799: LD_INT 109
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: LD_INT 84
6808: PUSH
6809: LD_INT 120
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: PUSH
6816: LD_INT 113
6818: PUSH
6819: LD_INT 153
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 123
6828: PUSH
6829: LD_INT 171
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PUSH
6836: LD_INT 125
6838: PUSH
6839: LD_INT 178
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PUSH
6846: LD_INT 125
6848: PUSH
6849: LD_INT 188
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PUSH
6856: LD_INT 125
6858: PUSH
6859: LD_INT 201
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: LD_INT 33
6868: PUSH
6869: LD_INT 60
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PUSH
6876: LD_INT 76
6878: PUSH
6879: LD_INT 95
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PUSH
6886: LD_INT 84
6888: PUSH
6889: LD_INT 111
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: PUSH
6896: LD_INT 112
6898: PUSH
6899: LD_INT 165
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: ST_TO_ADDR
// for i := 1 to tmp do
6925: LD_ADDR_VAR 0 2
6929: PUSH
6930: DOUBLE
6931: LD_INT 1
6933: DEC
6934: ST_TO_ADDR
6935: LD_VAR 0 7
6939: PUSH
6940: FOR_TO
6941: IFFALSE 7168
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
6943: LD_ADDR_VAR 0 4
6947: PUSH
6948: LD_VAR 0 7
6952: PUSH
6953: LD_VAR 0 2
6957: ARRAY
6958: PUSH
6959: LD_INT 1
6961: ARRAY
6962: PPUSH
6963: LD_VAR 0 7
6967: PUSH
6968: LD_VAR 0 2
6972: ARRAY
6973: PUSH
6974: LD_INT 2
6976: ARRAY
6977: PPUSH
6978: CALL_OW 428
6982: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
6983: LD_VAR 0 4
6987: PPUSH
6988: CALL_OW 266
6992: PUSH
6993: LD_INT 4
6995: PUSH
6996: LD_INT 5
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: IN
7003: IFFALSE 7083
// begin for j := 1 to Difficulty do
7005: LD_ADDR_VAR 0 3
7009: PUSH
7010: DOUBLE
7011: LD_INT 1
7013: DEC
7014: ST_TO_ADDR
7015: LD_OWVAR 67
7019: PUSH
7020: FOR_TO
7021: IFFALSE 7079
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
7023: LD_INT 0
7025: PPUSH
7026: LD_INT 1
7028: PPUSH
7029: LD_INT 4
7031: PUSH
7032: LD_INT 5
7034: PUSH
7035: LD_INT 5
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: LIST
7042: PUSH
7043: LD_OWVAR 67
7047: ARRAY
7048: PPUSH
7049: CALL_OW 380
// un := CreateHuman ;
7053: LD_ADDR_VAR 0 5
7057: PUSH
7058: CALL_OW 44
7062: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
7063: LD_VAR 0 5
7067: PPUSH
7068: LD_VAR 0 4
7072: PPUSH
7073: CALL_OW 52
// end ;
7077: GO 7020
7079: POP
7080: POP
// end else
7081: GO 7137
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
7083: LD_INT 0
7085: PPUSH
7086: LD_INT 1
7088: PPUSH
7089: LD_INT 4
7091: PUSH
7092: LD_INT 5
7094: PUSH
7095: LD_INT 5
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: LIST
7102: PUSH
7103: LD_OWVAR 67
7107: ARRAY
7108: PPUSH
7109: CALL_OW 380
// un := CreateHuman ;
7113: LD_ADDR_VAR 0 5
7117: PUSH
7118: CALL_OW 44
7122: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
7123: LD_VAR 0 5
7127: PPUSH
7128: LD_VAR 0 4
7132: PPUSH
7133: CALL_OW 52
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
7137: LD_ADDR_EXP 37
7141: PUSH
7142: LD_EXP 37
7146: PPUSH
7147: LD_EXP 37
7151: PUSH
7152: LD_INT 1
7154: PLUS
7155: PPUSH
7156: LD_VAR 0 5
7160: PPUSH
7161: CALL_OW 1
7165: ST_TO_ADDR
// end ;
7166: GO 6940
7168: POP
7169: POP
// for i := 1 to 5 do
7170: LD_ADDR_VAR 0 2
7174: PUSH
7175: DOUBLE
7176: LD_INT 1
7178: DEC
7179: ST_TO_ADDR
7180: LD_INT 5
7182: PUSH
7183: FOR_TO
7184: IFFALSE 7278
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
7186: LD_INT 0
7188: PPUSH
7189: LD_INT 2
7191: PPUSH
7192: LD_INT 4
7194: PUSH
7195: LD_INT 5
7197: PUSH
7198: LD_INT 5
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: LIST
7205: PUSH
7206: LD_OWVAR 67
7210: ARRAY
7211: PPUSH
7212: CALL_OW 380
// un := CreateHuman ;
7216: LD_ADDR_VAR 0 5
7220: PUSH
7221: CALL_OW 44
7225: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
7226: LD_VAR 0 5
7230: PPUSH
7231: LD_INT 66
7233: PPUSH
7234: LD_INT 101
7236: PPUSH
7237: LD_INT 3
7239: PPUSH
7240: LD_INT 0
7242: PPUSH
7243: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
7247: LD_ADDR_EXP 37
7251: PUSH
7252: LD_EXP 37
7256: PPUSH
7257: LD_EXP 37
7261: PUSH
7262: LD_INT 1
7264: PLUS
7265: PPUSH
7266: LD_VAR 0 5
7270: PPUSH
7271: CALL_OW 1
7275: ST_TO_ADDR
// end ;
7276: GO 7183
7278: POP
7279: POP
// tmp := [ ruFac1 , ruFac2 ] ;
7280: LD_ADDR_VAR 0 7
7284: PUSH
7285: LD_INT 72
7287: PUSH
7288: LD_INT 12
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: ST_TO_ADDR
// for i := 1 to tmp do
7295: LD_ADDR_VAR 0 2
7299: PUSH
7300: DOUBLE
7301: LD_INT 1
7303: DEC
7304: ST_TO_ADDR
7305: LD_VAR 0 7
7309: PUSH
7310: FOR_TO
7311: IFFALSE 7398
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
7313: LD_INT 0
7315: PPUSH
7316: LD_INT 3
7318: PPUSH
7319: LD_INT 4
7321: PUSH
7322: LD_INT 5
7324: PUSH
7325: LD_INT 5
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: LIST
7332: PUSH
7333: LD_OWVAR 67
7337: ARRAY
7338: PPUSH
7339: CALL_OW 380
// un := CreateHuman ;
7343: LD_ADDR_VAR 0 5
7347: PUSH
7348: CALL_OW 44
7352: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
7353: LD_VAR 0 5
7357: PPUSH
7358: LD_VAR 0 7
7362: PPUSH
7363: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
7367: LD_ADDR_EXP 37
7371: PUSH
7372: LD_EXP 37
7376: PPUSH
7377: LD_EXP 37
7381: PUSH
7382: LD_INT 1
7384: PLUS
7385: PPUSH
7386: LD_VAR 0 5
7390: PPUSH
7391: CALL_OW 1
7395: ST_TO_ADDR
// end ;
7396: GO 7310
7398: POP
7399: POP
// for i := 1 to 3 do
7400: LD_ADDR_VAR 0 2
7404: PUSH
7405: DOUBLE
7406: LD_INT 1
7408: DEC
7409: ST_TO_ADDR
7410: LD_INT 3
7412: PUSH
7413: FOR_TO
7414: IFFALSE 7499
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
7416: LD_INT 0
7418: PPUSH
7419: LD_INT 4
7421: PPUSH
7422: LD_INT 4
7424: PUSH
7425: LD_INT 5
7427: PUSH
7428: LD_INT 5
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: LIST
7435: PUSH
7436: LD_OWVAR 67
7440: ARRAY
7441: PPUSH
7442: CALL_OW 380
// un := CreateHuman ;
7446: LD_ADDR_VAR 0 5
7450: PUSH
7451: CALL_OW 44
7455: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
7456: LD_VAR 0 5
7460: PPUSH
7461: LD_INT 17
7463: PPUSH
7464: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
7468: LD_ADDR_EXP 37
7472: PUSH
7473: LD_EXP 37
7477: PPUSH
7478: LD_EXP 37
7482: PUSH
7483: LD_INT 1
7485: PLUS
7486: PPUSH
7487: LD_VAR 0 5
7491: PPUSH
7492: CALL_OW 1
7496: ST_TO_ADDR
// end ;
7497: GO 7413
7499: POP
7500: POP
// end ;
7501: LD_VAR 0 1
7505: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
7506: LD_EXP 33
7510: PUSH
7511: LD_EXP 33
7515: PPUSH
7516: CALL_OW 255
7520: PUSH
7521: LD_INT 3
7523: EQUAL
7524: AND
7525: IFFALSE 7688
7527: GO 7529
7529: DISABLE
7530: LD_INT 0
7532: PPUSH
// begin enable ;
7533: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
7534: LD_INT 81
7536: PUSH
7537: LD_INT 3
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: PUSH
7544: LD_INT 91
7546: PUSH
7547: LD_EXP 33
7551: PUSH
7552: LD_INT 15
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: LIST
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: PPUSH
7564: CALL_OW 69
7568: IFFALSE 7648
// begin if not IsDrivenBy ( ruBlockadeTank ) then
7570: LD_EXP 33
7574: PPUSH
7575: CALL_OW 311
7579: NOT
7580: IFFALSE 7646
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
7582: LD_ADDR_VAR 0 1
7586: PUSH
7587: LD_INT 22
7589: PUSH
7590: LD_INT 3
7592: PUSH
7593: EMPTY
7594: LIST
7595: LIST
7596: PUSH
7597: LD_INT 21
7599: PUSH
7600: LD_INT 1
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: PPUSH
7611: CALL_OW 69
7615: PPUSH
7616: LD_EXP 33
7620: PPUSH
7621: CALL_OW 74
7625: ST_TO_ADDR
// if driver then
7626: LD_VAR 0 1
7630: IFFALSE 7646
// ComEnterUnit ( driver , ruBlockadeTank ) ;
7632: LD_VAR 0 1
7636: PPUSH
7637: LD_EXP 33
7641: PPUSH
7642: CALL_OW 120
// end ; exit ;
7646: GO 7688
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
7648: LD_EXP 33
7652: PPUSH
7653: CALL_OW 256
7657: PUSH
7658: LD_INT 1000
7660: LESS
7661: PUSH
7662: LD_EXP 33
7666: PPUSH
7667: CALL_OW 311
7671: AND
7672: IFFALSE 7688
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
7674: LD_EXP 33
7678: PPUSH
7679: CALL_OW 311
7683: PPUSH
7684: CALL 49819 0 1
// end ;
7688: PPOPN 1
7690: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
7691: LD_EXP 35
7695: PPUSH
7696: LD_INT 3
7698: PUSH
7699: LD_INT 24
7701: PUSH
7702: LD_INT 1000
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PPUSH
7713: CALL_OW 72
7717: PUSH
7718: LD_EXP 35
7722: PPUSH
7723: LD_INT 25
7725: PUSH
7726: LD_INT 4
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: PUSH
7733: LD_INT 50
7735: PUSH
7736: EMPTY
7737: LIST
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: PPUSH
7743: CALL_OW 72
7747: AND
7748: IFFALSE 7936
7750: GO 7752
7752: DISABLE
7753: LD_INT 0
7755: PPUSH
7756: PPUSH
7757: PPUSH
// begin enable ;
7758: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
7759: LD_ADDR_VAR 0 3
7763: PUSH
7764: LD_EXP 35
7768: PPUSH
7769: LD_INT 3
7771: PUSH
7772: LD_INT 24
7774: PUSH
7775: LD_INT 1000
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PPUSH
7786: CALL_OW 72
7790: PPUSH
7791: LD_INT 1
7793: PPUSH
7794: CALL 49939 0 2
7798: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
7799: LD_ADDR_VAR 0 2
7803: PUSH
7804: LD_EXP 35
7808: PPUSH
7809: LD_INT 25
7811: PUSH
7812: LD_INT 4
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 50
7821: PUSH
7822: EMPTY
7823: LIST
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: PPUSH
7829: CALL_OW 72
7833: PUSH
7834: LD_INT 1
7836: ARRAY
7837: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
7838: LD_VAR 0 2
7842: PPUSH
7843: LD_VAR 0 3
7847: PUSH
7848: LD_INT 1
7850: ARRAY
7851: PPUSH
7852: CALL 45558 0 2
7856: NOT
7857: IFFALSE 7936
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
7859: LD_VAR 0 3
7863: PUSH
7864: LD_INT 1
7866: ARRAY
7867: PPUSH
7868: LD_INT 9
7870: PPUSH
7871: CALL_OW 308
7875: NOT
7876: IFFALSE 7894
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
7878: LD_VAR 0 3
7882: PUSH
7883: LD_INT 1
7885: ARRAY
7886: PPUSH
7887: LD_INT 9
7889: PPUSH
7890: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
7894: LD_VAR 0 2
7898: PPUSH
7899: LD_VAR 0 3
7903: PUSH
7904: LD_INT 1
7906: ARRAY
7907: PPUSH
7908: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
7912: LD_VAR 0 2
7916: PPUSH
7917: LD_INT 179
7919: PPUSH
7920: LD_INT 113
7922: PPUSH
7923: CALL_OW 171
// AddComHold ( sci ) ;
7927: LD_VAR 0 2
7931: PPUSH
7932: CALL_OW 200
// end ; end ; end_of_file
7936: PPOPN 3
7938: END
// export function Action ; begin
7939: LD_INT 0
7941: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
7942: LD_INT 2
7944: PPUSH
7945: LD_INT 4
7947: PPUSH
7948: CALL_OW 332
// Video ( true ) ;
7952: LD_INT 1
7954: PPUSH
7955: CALL 48300 0 1
// CenterNowOnXY ( 213 , 89 ) ;
7959: LD_INT 213
7961: PPUSH
7962: LD_INT 89
7964: PPUSH
7965: CALL_OW 86
// if not debug then
7969: LD_EXP 1
7973: NOT
7974: IFFALSE 8008
// begin if Kaia and Olaf then
7976: LD_EXP 19
7980: PUSH
7981: LD_EXP 23
7985: AND
7986: IFFALSE 7992
// SceneKaiaWithOlaf ;
7988: CALL 8031 0 0
// if Givi and Kamil then
7992: LD_EXP 15
7996: PUSH
7997: LD_EXP 18
8001: AND
8002: IFFALSE 8008
// SceneWithGiviAndKamil ;
8004: CALL 8602 0 0
// end ; Video ( false ) ;
8008: LD_INT 0
8010: PPUSH
8011: CALL 48300 0 1
// ChangeMissionObjectives ( M1 ) ;
8015: LD_STRING M1
8017: PPUSH
8018: CALL_OW 337
// SaveForQuickRestart ;
8022: CALL_OW 22
// end ;
8026: LD_VAR 0 1
8030: RET
// export function SceneKaiaWithOlaf ; begin
8031: LD_INT 0
8033: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
8034: LD_INT 22
8036: PUSH
8037: LD_INT 2
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: PUSH
8044: LD_INT 30
8046: PUSH
8047: LD_INT 3
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: PPUSH
8058: CALL_OW 69
8062: PPUSH
8063: LD_INT 14
8065: PPUSH
8066: LD_INT 1
8068: PPUSH
8069: LD_INT 1
8071: PPUSH
8072: LD_INT 26
8074: PPUSH
8075: CALL_OW 125
// wait ( 0 0$1 ) ;
8079: LD_INT 35
8081: PPUSH
8082: CALL_OW 67
// Say ( Kaia , DK-06-Mem-1 ) ;
8086: LD_EXP 19
8090: PPUSH
8091: LD_STRING DK-06-Mem-1
8093: PPUSH
8094: CALL_OW 88
// Say ( Kaia , DK-06-Mem-2 ) ;
8098: LD_EXP 19
8102: PPUSH
8103: LD_STRING DK-06-Mem-2
8105: PPUSH
8106: CALL_OW 88
// Say ( Olaf , DO-06-Mem-3 ) ;
8110: LD_EXP 23
8114: PPUSH
8115: LD_STRING DO-06-Mem-3
8117: PPUSH
8118: CALL_OW 88
// Say ( Kaia , DK-06-Mem-4 ) ;
8122: LD_EXP 19
8126: PPUSH
8127: LD_STRING DK-06-Mem-4
8129: PPUSH
8130: CALL_OW 88
// Say ( Olaf , DO-06-Mem-5 ) ;
8134: LD_EXP 23
8138: PPUSH
8139: LD_STRING DO-06-Mem-5
8141: PPUSH
8142: CALL_OW 88
// wait ( 0 0$2 ) ;
8146: LD_INT 70
8148: PPUSH
8149: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
8153: LD_INT 22
8155: PUSH
8156: LD_INT 2
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PUSH
8163: LD_INT 30
8165: PUSH
8166: LD_INT 3
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: PPUSH
8177: CALL_OW 69
8181: PPUSH
8182: LD_INT 90
8184: PPUSH
8185: CALL_OW 329
// Say ( Olaf , DO-06-Mem-6 ) ;
8189: LD_EXP 23
8193: PPUSH
8194: LD_STRING DO-06-Mem-6
8196: PPUSH
8197: CALL_OW 88
// Say ( Kaia , DK-06-Mem-7 ) ;
8201: LD_EXP 19
8205: PPUSH
8206: LD_STRING DK-06-Mem-7
8208: PPUSH
8209: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
8213: LD_EXP 14
8217: PPUSH
8218: LD_EXP 19
8222: PPUSH
8223: CALL_OW 119
// Say ( Heike , DH-06-Mem-8 ) ;
8227: LD_EXP 14
8231: PPUSH
8232: LD_STRING DH-06-Mem-8
8234: PPUSH
8235: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
8239: LD_EXP 19
8243: PUSH
8244: LD_EXP 23
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: PPUSH
8253: LD_EXP 14
8257: PPUSH
8258: CALL_OW 119
// Say ( Olaf , DO-06-Mem-9 ) ;
8262: LD_EXP 23
8266: PPUSH
8267: LD_STRING DO-06-Mem-9
8269: PPUSH
8270: CALL_OW 88
// Say ( Olaf , DO-06-Mem-10 ) ;
8274: LD_EXP 23
8278: PPUSH
8279: LD_STRING DO-06-Mem-10
8281: PPUSH
8282: CALL_OW 88
// Say ( Olaf , DO-06-Mem-11 ) ;
8286: LD_EXP 23
8290: PPUSH
8291: LD_STRING DO-06-Mem-11
8293: PPUSH
8294: CALL_OW 88
// Say ( Olaf , DO-06-Mem-12 ) ;
8298: LD_EXP 23
8302: PPUSH
8303: LD_STRING DO-06-Mem-12
8305: PPUSH
8306: CALL_OW 88
// Say ( Kaia , DK-06-Mem-13 ) ;
8310: LD_EXP 19
8314: PPUSH
8315: LD_STRING DK-06-Mem-13
8317: PPUSH
8318: CALL_OW 88
// Say ( Kaia , DK-06-Mem-14 ) ;
8322: LD_EXP 19
8326: PPUSH
8327: LD_STRING DK-06-Mem-14
8329: PPUSH
8330: CALL_OW 88
// Say ( Kaia , DK-06-Mem-15 ) ;
8334: LD_EXP 19
8338: PPUSH
8339: LD_STRING DK-06-Mem-15
8341: PPUSH
8342: CALL_OW 88
// Say ( Kaia , DK-06-Mem-16 ) ;
8346: LD_EXP 19
8350: PPUSH
8351: LD_STRING DK-06-Mem-16
8353: PPUSH
8354: CALL_OW 88
// Say ( Kaia , DK-06-Mem-17 ) ;
8358: LD_EXP 19
8362: PPUSH
8363: LD_STRING DK-06-Mem-17
8365: PPUSH
8366: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
8370: LD_EXP 23
8374: PPUSH
8375: LD_EXP 19
8379: PPUSH
8380: CALL_OW 119
// Say ( Olaf , DO-06-Mem-18 ) ;
8384: LD_EXP 23
8388: PPUSH
8389: LD_STRING DO-06-Mem-18
8391: PPUSH
8392: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
8396: LD_EXP 19
8400: PPUSH
8401: LD_EXP 23
8405: PPUSH
8406: CALL_OW 119
// Say ( Kaia , DK-06-Mem-19 ) ;
8410: LD_EXP 19
8414: PPUSH
8415: LD_STRING DK-06-Mem-19
8417: PPUSH
8418: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
8422: LD_EXP 23
8426: PPUSH
8427: LD_INT 214
8429: PPUSH
8430: LD_INT 86
8432: PPUSH
8433: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
8437: LD_EXP 23
8441: PPUSH
8442: LD_EXP 19
8446: PPUSH
8447: CALL_OW 179
// if Givi then
8451: LD_EXP 15
8455: IFFALSE 8486
// begin ComMoveXY ( Givi , 217 , 86 ) ;
8457: LD_EXP 15
8461: PPUSH
8462: LD_INT 217
8464: PPUSH
8465: LD_INT 86
8467: PPUSH
8468: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
8472: LD_EXP 15
8476: PPUSH
8477: LD_EXP 14
8481: PPUSH
8482: CALL_OW 179
// end ; if Kamil then
8486: LD_EXP 18
8490: IFFALSE 8530
// begin ComExit ( Kamil ) ;
8492: LD_EXP 18
8496: PPUSH
8497: CALL 48716 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
8501: LD_EXP 18
8505: PPUSH
8506: LD_INT 212
8508: PPUSH
8509: LD_INT 86
8511: PPUSH
8512: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
8516: LD_EXP 18
8520: PPUSH
8521: LD_EXP 14
8525: PPUSH
8526: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
8530: LD_INT 70
8532: PPUSH
8533: CALL_OW 67
// Say ( Heike , DH-06-Mem-20 ) ;
8537: LD_EXP 14
8541: PPUSH
8542: LD_STRING DH-06-Mem-20
8544: PPUSH
8545: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
8549: LD_EXP 23
8553: PPUSH
8554: LD_INT 215
8556: PPUSH
8557: LD_INT 87
8559: PPUSH
8560: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
8564: LD_EXP 23
8568: PPUSH
8569: LD_EXP 19
8573: PPUSH
8574: CALL_OW 179
// Say ( Kaia , DK-06-Mem-21 ) ;
8578: LD_EXP 19
8582: PPUSH
8583: LD_STRING DK-06-Mem-21
8585: PPUSH
8586: CALL_OW 88
// wait ( 0 0$2 ) ;
8590: LD_INT 70
8592: PPUSH
8593: CALL_OW 67
// end ;
8597: LD_VAR 0 1
8601: RET
// export function SceneWithGiviAndKamil ; begin
8602: LD_INT 0
8604: PPUSH
// if Markov then
8605: LD_EXP 21
8609: IFFALSE 8660
// begin if IsInUnit ( Markov ) then
8611: LD_EXP 21
8615: PPUSH
8616: CALL_OW 310
8620: IFFALSE 8631
// ComExit ( Markov ) ;
8622: LD_EXP 21
8626: PPUSH
8627: CALL 48716 0 1
// AddComMoveXY ( Markov , 212 , 88 ) ;
8631: LD_EXP 21
8635: PPUSH
8636: LD_INT 212
8638: PPUSH
8639: LD_INT 88
8641: PPUSH
8642: CALL_OW 171
// AddComTurnUnit ( Markov , Heike ) ;
8646: LD_EXP 21
8650: PPUSH
8651: LD_EXP 14
8655: PPUSH
8656: CALL_OW 179
// end ; Say ( Givi , DG-06-Obj-1 ) ;
8660: LD_EXP 15
8664: PPUSH
8665: LD_STRING DG-06-Obj-1
8667: PPUSH
8668: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-2 ) ;
8672: LD_EXP 18
8676: PPUSH
8677: LD_STRING DKam-06-Obj-2
8679: PPUSH
8680: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
8684: LD_EXP 14
8688: PPUSH
8689: LD_EXP 18
8693: PPUSH
8694: CALL_OW 119
// Say ( Kamil , DKam-06-Obj-3 ) ;
8698: LD_EXP 18
8702: PPUSH
8703: LD_STRING DKam-06-Obj-3
8705: PPUSH
8706: CALL_OW 88
// Say ( Markov , DMar-06-Obj-4 ) ;
8710: LD_EXP 21
8714: PPUSH
8715: LD_STRING DMar-06-Obj-4
8717: PPUSH
8718: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-6 ) ;
8722: LD_EXP 18
8726: PPUSH
8727: LD_STRING DKam-06-Obj-6
8729: PPUSH
8730: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-7 ) ;
8734: LD_EXP 18
8738: PPUSH
8739: LD_STRING DKam-06-Obj-7
8741: PPUSH
8742: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-8 ) ;
8746: LD_EXP 18
8750: PPUSH
8751: LD_STRING DKam-06-Obj-8
8753: PPUSH
8754: CALL_OW 88
// Say ( Heike , DH-06-Obj-9 ) ;
8758: LD_EXP 14
8762: PPUSH
8763: LD_STRING DH-06-Obj-9
8765: PPUSH
8766: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-10 ) ;
8770: LD_EXP 18
8774: PPUSH
8775: LD_STRING DKam-06-Obj-10
8777: PPUSH
8778: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-11 ) ;
8782: LD_EXP 18
8786: PPUSH
8787: LD_STRING DKam-06-Obj-11
8789: PPUSH
8790: CALL_OW 88
// Say ( Markov , DMar-06-Obj-12 ) ;
8794: LD_EXP 21
8798: PPUSH
8799: LD_STRING DMar-06-Obj-12
8801: PPUSH
8802: CALL_OW 88
// Say ( Markov , DMar-06-Obj-13 ) ;
8806: LD_EXP 21
8810: PPUSH
8811: LD_STRING DMar-06-Obj-13
8813: PPUSH
8814: CALL_OW 88
// Say ( Markov , DMar-06-Obj-14 ) ;
8818: LD_EXP 21
8822: PPUSH
8823: LD_STRING DMar-06-Obj-14
8825: PPUSH
8826: CALL_OW 88
// Say ( Olaf , DO-06-Obj-15 ) ;
8830: LD_EXP 23
8834: PPUSH
8835: LD_STRING DO-06-Obj-15
8837: PPUSH
8838: CALL_OW 88
// Say ( Olaf , DO-06-Obj-16 ) ;
8842: LD_EXP 23
8846: PPUSH
8847: LD_STRING DO-06-Obj-16
8849: PPUSH
8850: CALL_OW 88
// Say ( Heike , DH-06-Obj-17 ) ;
8854: LD_EXP 14
8858: PPUSH
8859: LD_STRING DH-06-Obj-17
8861: PPUSH
8862: CALL_OW 88
// Say ( Olaf , DO-06-Obj-18 ) ;
8866: LD_EXP 23
8870: PPUSH
8871: LD_STRING DO-06-Obj-18
8873: PPUSH
8874: CALL_OW 88
// end ;
8878: LD_VAR 0 1
8882: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
8883: LD_INT 34
8885: PUSH
8886: LD_EXP 43
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: PPUSH
8895: CALL_OW 69
8899: IFFALSE 9089
8901: GO 8903
8903: DISABLE
8904: LD_INT 0
8906: PPUSH
// begin CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
8907: LD_INT 34
8909: PUSH
8910: LD_EXP 43
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: PPUSH
8919: CALL_OW 69
8923: PPUSH
8924: CALL_OW 87
// DialogueOn ;
8928: CALL_OW 6
// if Markov then
8932: LD_EXP 21
8936: IFFALSE 8964
// begin Say ( Markov , DMar-06-Grn-1 ) ;
8938: LD_EXP 21
8942: PPUSH
8943: LD_STRING DMar-06-Grn-1
8945: PPUSH
8946: CALL_OW 88
// Say ( Heike , DH-06-Grn-2 ) ;
8950: LD_EXP 14
8954: PPUSH
8955: LD_STRING DH-06-Grn-2
8957: PPUSH
8958: CALL_OW 88
// end else
8962: GO 9063
// if heikeSecondSquad then
8964: LD_EXP 28
8968: IFFALSE 9063
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
8970: LD_ADDR_VAR 0 1
8974: PUSH
8975: LD_EXP 28
8979: PUSH
8980: LD_INT 1
8982: PPUSH
8983: LD_EXP 28
8987: PPUSH
8988: CALL_OW 12
8992: ARRAY
8993: ST_TO_ADDR
// case GetSex ( random ) of 1 :
8994: LD_VAR 0 1
8998: PPUSH
8999: CALL_OW 258
9003: PUSH
9004: LD_INT 1
9006: DOUBLE
9007: EQUAL
9008: IFTRUE 9012
9010: GO 9027
9012: POP
// Say ( random , DArm-06-Grn-1 ) ; 2 :
9013: LD_VAR 0 1
9017: PPUSH
9018: LD_STRING DArm-06-Grn-1
9020: PPUSH
9021: CALL_OW 88
9025: GO 9051
9027: LD_INT 2
9029: DOUBLE
9030: EQUAL
9031: IFTRUE 9035
9033: GO 9050
9035: POP
// Say ( random , DArf-06-Grn-1 ) ; end ;
9036: LD_VAR 0 1
9040: PPUSH
9041: LD_STRING DArf-06-Grn-1
9043: PPUSH
9044: CALL_OW 88
9048: GO 9051
9050: POP
// Say ( Heike , DH-06-Grn-2 ) ;
9051: LD_EXP 14
9055: PPUSH
9056: LD_STRING DH-06-Grn-2
9058: PPUSH
9059: CALL_OW 88
// end ; DialogueOff ;
9063: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
9067: LD_STRING MortarConstructed
9069: PPUSH
9070: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
9074: LD_STRING SelfPropelledMortar
9076: PPUSH
9077: CALL_OW 339
// mortarConstructed := true ;
9081: LD_ADDR_EXP 12
9085: PUSH
9086: LD_INT 1
9088: ST_TO_ADDR
// end ;
9089: PPOPN 1
9091: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
9092: LD_INT 2
9094: PPUSH
9095: LD_INT 8
9097: PPUSH
9098: CALL_OW 294
9102: IFFALSE 9245
9104: GO 9106
9106: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
9107: LD_INT 200
9109: PPUSH
9110: LD_INT 162
9112: PPUSH
9113: LD_INT 2
9115: PPUSH
9116: LD_INT 6
9118: NEG
9119: PPUSH
9120: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
9124: LD_INT 200
9126: PPUSH
9127: LD_INT 162
9129: PPUSH
9130: LD_INT 2
9132: PPUSH
9133: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
9137: LD_INT 200
9139: PPUSH
9140: LD_INT 162
9142: PPUSH
9143: CALL_OW 84
// if not IsOk ( Kurt ) then
9147: LD_EXP 25
9151: PPUSH
9152: CALL_OW 302
9156: NOT
9157: IFFALSE 9161
// exit ;
9159: GO 9245
// Say ( Kurt , DKs-06-Otpst-2-1 ) ;
9161: LD_EXP 25
9165: PPUSH
9166: LD_STRING DKs-06-Otpst-2-1
9168: PPUSH
9169: CALL_OW 88
// Say ( Kaia , DK-06-Otpst-2-2 ) ;
9173: LD_EXP 19
9177: PPUSH
9178: LD_STRING DK-06-Otpst-2-2
9180: PPUSH
9181: CALL_OW 88
// Say ( Kurt , DKs-06-Otpst-2-3 ) ;
9185: LD_EXP 25
9189: PPUSH
9190: LD_STRING DKs-06-Otpst-2-3
9192: PPUSH
9193: CALL_OW 88
// Say ( Kurt , DKs-06-Otpst-2-4 ) ;
9197: LD_EXP 25
9201: PPUSH
9202: LD_STRING DKs-06-Otpst-2-4
9204: PPUSH
9205: CALL_OW 88
// Say ( Kurt , DKs-06-Otpst-2-5 ) ;
9209: LD_EXP 25
9213: PPUSH
9214: LD_STRING DKs-06-Otpst-2-5
9216: PPUSH
9217: CALL_OW 88
// Say ( Kamil , DKam-06-Otpst-2-6 ) ;
9221: LD_EXP 18
9225: PPUSH
9226: LD_STRING DKam-06-Otpst-2-6
9228: PPUSH
9229: CALL_OW 88
// Say ( Kurt , DKs-06-Otpst-2-7 ) ;
9233: LD_EXP 25
9237: PPUSH
9238: LD_STRING DKs-06-Otpst-2-7
9240: PPUSH
9241: CALL_OW 88
// end ;
9245: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
9246: LD_INT 8
9248: PPUSH
9249: LD_INT 22
9251: PUSH
9252: LD_INT 3
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: PUSH
9259: LD_INT 21
9261: PUSH
9262: LD_INT 3
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: PPUSH
9273: CALL_OW 70
9277: NOT
9278: PUSH
9279: LD_EXP 3
9283: NOT
9284: AND
9285: IFFALSE 9535
9287: GO 9289
9289: DISABLE
9290: LD_INT 0
9292: PPUSH
// begin outpostDestroyed := true ;
9293: LD_ADDR_EXP 4
9297: PUSH
9298: LD_INT 1
9300: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
9301: LD_INT 22
9303: PUSH
9304: LD_INT 2
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PUSH
9311: LD_INT 34
9313: PUSH
9314: LD_EXP 43
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PUSH
9323: LD_INT 92
9325: PUSH
9326: LD_INT 195
9328: PUSH
9329: LD_INT 164
9331: PUSH
9332: LD_INT 12
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: LIST
9345: PPUSH
9346: CALL_OW 69
9350: NOT
9351: IFFALSE 9355
// exit ;
9353: GO 9535
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
9355: LD_EXP 15
9359: PPUSH
9360: CALL_OW 302
9364: NOT
9365: PUSH
9366: LD_EXP 19
9370: PPUSH
9371: CALL_OW 302
9375: NOT
9376: OR
9377: IFFALSE 9381
// exit ;
9379: GO 9535
// Say ( Givi , DG-06-Otpst-1-1 ) ;
9381: LD_EXP 15
9385: PPUSH
9386: LD_STRING DG-06-Otpst-1-1
9388: PPUSH
9389: CALL_OW 88
// Say ( Kaia , DK-06-Otpst-1-2 ) ;
9393: LD_EXP 19
9397: PPUSH
9398: LD_STRING DK-06-Otpst-1-2
9400: PPUSH
9401: CALL_OW 88
// if IsOk ( Markov ) then
9405: LD_EXP 21
9409: PPUSH
9410: CALL_OW 302
9414: IFFALSE 9442
// begin Say ( Markov , DMar-06-Otpst-1-3 ) ;
9416: LD_EXP 21
9420: PPUSH
9421: LD_STRING DMar-06-Otpst-1-3
9423: PPUSH
9424: CALL_OW 88
// Say ( Markov , DMar-06-Otpst-1-4 ) ;
9428: LD_EXP 21
9432: PPUSH
9433: LD_STRING DMar-06-Otpst-1-4
9435: PPUSH
9436: CALL_OW 88
// end else
9440: GO 9523
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
9442: LD_ADDR_VAR 0 1
9446: PUSH
9447: LD_EXP 28
9451: PUSH
9452: LD_INT 1
9454: PPUSH
9455: LD_EXP 28
9459: PPUSH
9460: CALL_OW 12
9464: ARRAY
9465: ST_TO_ADDR
// case GetSex ( random ) of 1 :
9466: LD_VAR 0 1
9470: PPUSH
9471: CALL_OW 258
9475: PUSH
9476: LD_INT 1
9478: DOUBLE
9479: EQUAL
9480: IFTRUE 9484
9482: GO 9499
9484: POP
// Say ( random , DArm-06-Otpst-1-a-3 ) ; 2 :
9485: LD_VAR 0 1
9489: PPUSH
9490: LD_STRING DArm-06-Otpst-1-a-3
9492: PPUSH
9493: CALL_OW 88
9497: GO 9523
9499: LD_INT 2
9501: DOUBLE
9502: EQUAL
9503: IFTRUE 9507
9505: GO 9522
9507: POP
// Say ( random , DArf-06-Otpst-1-a-3 ) ; end ;
9508: LD_VAR 0 1
9512: PPUSH
9513: LD_STRING DArf-06-Otpst-1-a-3
9515: PPUSH
9516: CALL_OW 88
9520: GO 9523
9522: POP
// end ; Say ( Givi , DG-06-Otpst-1-5 ) ;
9523: LD_EXP 15
9527: PPUSH
9528: LD_STRING DG-06-Otpst-1-5
9530: PPUSH
9531: CALL_OW 88
// end ;
9535: PPOPN 1
9537: END
// every 0 0$1 trigger tick >= 6 6$00 or ruLoseCounter > 3 do var i , tmp , dep ;
9538: LD_OWVAR 1
9542: PUSH
9543: LD_INT 12600
9545: GREATEREQUAL
9546: PUSH
9547: LD_EXP 5
9551: PUSH
9552: LD_INT 3
9554: GREATER
9555: OR
9556: IFFALSE 9998
9558: GO 9560
9560: DISABLE
9561: LD_INT 0
9563: PPUSH
9564: PPUSH
9565: PPUSH
// begin PrepareRolfSquad ;
9566: CALL 1917 0 0
// dep := HexInfo ( 86 , 54 ) ;
9570: LD_ADDR_VAR 0 3
9574: PUSH
9575: LD_INT 86
9577: PPUSH
9578: LD_INT 54
9580: PPUSH
9581: CALL_OW 428
9585: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
9586: LD_VAR 0 3
9590: PPUSH
9591: CALL_OW 274
9595: PPUSH
9596: LD_INT 1
9598: PPUSH
9599: LD_INT 300
9601: PPUSH
9602: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
9606: LD_VAR 0 3
9610: PPUSH
9611: CALL_OW 274
9615: PPUSH
9616: LD_INT 2
9618: PPUSH
9619: LD_INT 300
9621: PPUSH
9622: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
9626: LD_EXP 30
9630: PPUSH
9631: LD_INT 79
9633: PPUSH
9634: LD_INT 52
9636: PPUSH
9637: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
9641: LD_INT 35
9643: PPUSH
9644: CALL_OW 67
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
9648: LD_INT 12
9650: PPUSH
9651: LD_INT 22
9653: PUSH
9654: LD_INT 3
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: PUSH
9661: LD_INT 21
9663: PUSH
9664: LD_INT 1
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: PPUSH
9675: CALL_OW 70
9679: NOT
9680: IFFALSE 9641
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
9682: LD_ADDR_VAR 0 2
9686: PUSH
9687: LD_INT 12
9689: PPUSH
9690: LD_INT 21
9692: PUSH
9693: LD_INT 3
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: PPUSH
9700: CALL_OW 70
9704: ST_TO_ADDR
// for i in tmp do
9705: LD_ADDR_VAR 0 1
9709: PUSH
9710: LD_VAR 0 2
9714: PUSH
9715: FOR_IN
9716: IFFALSE 9732
// SetSide ( i , 8 ) ;
9718: LD_VAR 0 1
9722: PPUSH
9723: LD_INT 8
9725: PPUSH
9726: CALL_OW 235
9730: GO 9715
9732: POP
9733: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
9734: LD_INT 63
9736: PPUSH
9737: LD_INT 42
9739: PPUSH
9740: CALL_OW 428
9744: PPUSH
9745: LD_INT 320
9747: PPUSH
9748: CALL_OW 234
// ComEnterUnit ( Rolf , dep ) ;
9752: LD_EXP 27
9756: PPUSH
9757: LD_VAR 0 3
9761: PPUSH
9762: CALL_OW 120
// AddComChangeProfession ( Rolf , class_engineer ) ;
9766: LD_EXP 27
9770: PPUSH
9771: LD_INT 2
9773: PPUSH
9774: CALL_OW 183
// AddComExitBuilding ( Rolf ) ;
9778: LD_EXP 27
9782: PPUSH
9783: CALL_OW 182
// wait ( 0 0$20 ) ;
9787: LD_INT 700
9789: PPUSH
9790: CALL_OW 67
// DialogueOn ;
9794: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
9798: LD_INT 8
9800: PPUSH
9801: LD_INT 2
9803: PPUSH
9804: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
9808: LD_INT 86
9810: PPUSH
9811: LD_INT 54
9813: PPUSH
9814: CALL_OW 428
9818: PPUSH
9819: LD_STRING antwerp
9821: PPUSH
9822: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
9826: LD_EXP 27
9830: PPUSH
9831: CALL_OW 87
// SayRadio ( Rolf , DRf-06-rast-1 ) ;
9835: LD_EXP 27
9839: PPUSH
9840: LD_STRING DRf-06-rast-1
9842: PPUSH
9843: CALL_OW 94
// Say ( Heike , DH-06-rast-2 ) ;
9847: LD_EXP 14
9851: PPUSH
9852: LD_STRING DH-06-rast-2
9854: PPUSH
9855: CALL_OW 88
// SayRadio ( Rolf , DRf-06-rast-3 ) ;
9859: LD_EXP 27
9863: PPUSH
9864: LD_STRING DRf-06-rast-3
9866: PPUSH
9867: CALL_OW 94
// SayRadio ( Rolf , DRf-06-rast-4 ) ;
9871: LD_EXP 27
9875: PPUSH
9876: LD_STRING DRf-06-rast-4
9878: PPUSH
9879: CALL_OW 94
// SayRadio ( Rolf , DRf-06-rast-5 ) ;
9883: LD_EXP 27
9887: PPUSH
9888: LD_STRING DRf-06-rast-5
9890: PPUSH
9891: CALL_OW 94
// if IsOk ( Aviradze ) then
9895: LD_EXP 26
9899: PPUSH
9900: CALL_OW 302
9904: IFFALSE 9963
// begin CenterNowOnUnits ( Aviradze ) ;
9906: LD_EXP 26
9910: PPUSH
9911: CALL_OW 87
// Say ( Aviradze , DA-06-rast-6 ) ;
9915: LD_EXP 26
9919: PPUSH
9920: LD_STRING DA-06-rast-6
9922: PPUSH
9923: CALL_OW 88
// Say ( Heike , DH-06-rast-7 ) ;
9927: LD_EXP 14
9931: PPUSH
9932: LD_STRING DH-06-rast-7
9934: PPUSH
9935: CALL_OW 88
// Say ( Givi , DG-06-rast-8 ) ;
9939: LD_EXP 15
9943: PPUSH
9944: LD_STRING DG-06-rast-8
9946: PPUSH
9947: CALL_OW 88
// Say ( Givi , DG-06-rast-9 ) ;
9951: LD_EXP 15
9955: PPUSH
9956: LD_STRING DG-06-rast-9
9958: PPUSH
9959: CALL_OW 88
// end ; Say ( Heike , DH-06-rast-10 ) ;
9963: LD_EXP 14
9967: PPUSH
9968: LD_STRING DH-06-rast-10
9970: PPUSH
9971: CALL_OW 88
// DialogueOff ;
9975: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
9979: LD_STRING M2
9981: PPUSH
9982: CALL_OW 337
// bergkampfArrived := true ;
9986: LD_ADDR_EXP 3
9990: PUSH
9991: LD_INT 1
9993: ST_TO_ADDR
// PrepareRolfBase ;
9994: CALL 2248 0 0
// end ;
9998: PPOPN 3
10000: END
// every 0 0$1 trigger GetDistUnits ( Heike , Rolf ) < 8 do var i ;
10001: LD_EXP 14
10005: PPUSH
10006: LD_EXP 27
10010: PPUSH
10011: CALL_OW 296
10015: PUSH
10016: LD_INT 8
10018: LESS
10019: IFFALSE 10579
10021: GO 10023
10023: DISABLE
10024: LD_INT 0
10026: PPUSH
// begin DialogueOn ;
10027: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
10031: LD_EXP 27
10035: PPUSH
10036: CALL_OW 87
// if rolfSquad >= 10 then
10040: LD_EXP 30
10044: PUSH
10045: LD_INT 10
10047: GREATEREQUAL
10048: IFFALSE 10227
// begin linkedWithRolf := 2 ;
10050: LD_ADDR_EXP 9
10054: PUSH
10055: LD_INT 2
10057: ST_TO_ADDR
// Say ( Rolf , DRf-06-rast-11 ) ;
10058: LD_EXP 27
10062: PPUSH
10063: LD_STRING DRf-06-rast-11
10065: PPUSH
10066: CALL_OW 88
// Say ( Heike , DH-06-rast-12 ) ;
10070: LD_EXP 14
10074: PPUSH
10075: LD_STRING DH-06-rast-12
10077: PPUSH
10078: CALL_OW 88
// Say ( Rolf , DRf-06-rast-13 ) ;
10082: LD_EXP 27
10086: PPUSH
10087: LD_STRING DRf-06-rast-13
10089: PPUSH
10090: CALL_OW 88
// Say ( Heike , DH-06-rast-14 ) ;
10094: LD_EXP 14
10098: PPUSH
10099: LD_STRING DH-06-rast-14
10101: PPUSH
10102: CALL_OW 88
// Say ( Rolf , DRf-06-rast-15 ) ;
10106: LD_EXP 27
10110: PPUSH
10111: LD_STRING DRf-06-rast-15
10113: PPUSH
10114: CALL_OW 88
// Say ( Heike , DH-06-rast-16 ) ;
10118: LD_EXP 14
10122: PPUSH
10123: LD_STRING DH-06-rast-16
10125: PPUSH
10126: CALL_OW 88
// if IsOk ( Mike ) then
10130: LD_EXP 16
10134: PPUSH
10135: CALL_OW 302
10139: IFFALSE 10213
// begin Say ( Mike , DM-06-rast-17 ) ;
10141: LD_EXP 16
10145: PPUSH
10146: LD_STRING DM-06-rast-17
10148: PPUSH
10149: CALL_OW 88
// Say ( Heike , DH-06-rast-18 ) ;
10153: LD_EXP 14
10157: PPUSH
10158: LD_STRING DH-06-rast-18
10160: PPUSH
10161: CALL_OW 88
// Say ( Mike , DM-06-rast-19 ) ;
10165: LD_EXP 16
10169: PPUSH
10170: LD_STRING DM-06-rast-19
10172: PPUSH
10173: CALL_OW 88
// Say ( Heike , DH-06-rast-20 ) ;
10177: LD_EXP 14
10181: PPUSH
10182: LD_STRING DH-06-rast-20
10184: PPUSH
10185: CALL_OW 88
// Say ( Mike , DM-06-rast-21 ) ;
10189: LD_EXP 16
10193: PPUSH
10194: LD_STRING DM-06-rast-21
10196: PPUSH
10197: CALL_OW 88
// Say ( Heike , DH-06-rast-22 ) ;
10201: LD_EXP 14
10205: PPUSH
10206: LD_STRING DH-06-rast-22
10208: PPUSH
10209: CALL_OW 88
// end ; Say ( Heike , DH-06-rast-23 ) ;
10213: LD_EXP 14
10217: PPUSH
10218: LD_STRING DH-06-rast-23
10220: PPUSH
10221: CALL_OW 88
// end else
10225: GO 10377
// begin linkedWithRolf := 1 ;
10227: LD_ADDR_EXP 9
10231: PUSH
10232: LD_INT 1
10234: ST_TO_ADDR
// Say ( Rolf , DRf-06-rast-a-11 ) ;
10235: LD_EXP 27
10239: PPUSH
10240: LD_STRING DRf-06-rast-a-11
10242: PPUSH
10243: CALL_OW 88
// Say ( Heike , DH-06-rast-a-12 ) ;
10247: LD_EXP 14
10251: PPUSH
10252: LD_STRING DH-06-rast-a-12
10254: PPUSH
10255: CALL_OW 88
// if IsOk ( Kurt ) then
10259: LD_EXP 25
10263: PPUSH
10264: CALL_OW 302
10268: IFFALSE 10365
// begin Say ( Kurt , DKs-06-rast-a-13 ) ;
10270: LD_EXP 25
10274: PPUSH
10275: LD_STRING DKs-06-rast-a-13
10277: PPUSH
10278: CALL_OW 88
// Say ( Rolf , DRf-06-rast-a-14 ) ;
10282: LD_EXP 27
10286: PPUSH
10287: LD_STRING DRf-06-rast-a-14
10289: PPUSH
10290: CALL_OW 88
// Say ( Rolf , DRf-06-rast-a-15 ) ;
10294: LD_EXP 27
10298: PPUSH
10299: LD_STRING DRf-06-rast-a-15
10301: PPUSH
10302: CALL_OW 88
// Say ( Kurt , DKs-06-rast-a-16 ) ;
10306: LD_EXP 25
10310: PPUSH
10311: LD_STRING DKs-06-rast-a-16
10313: PPUSH
10314: CALL_OW 88
// if IsOk ( Givi ) then
10318: LD_EXP 15
10322: PPUSH
10323: CALL_OW 302
10327: IFFALSE 10365
// begin Say ( Givi , DG-06-rast-a-17 ) ;
10329: LD_EXP 15
10333: PPUSH
10334: LD_STRING DG-06-rast-a-17
10336: PPUSH
10337: CALL_OW 88
// Say ( Givi , DG-06-rast-a-18 ) ;
10341: LD_EXP 15
10345: PPUSH
10346: LD_STRING DG-06-rast-a-18
10348: PPUSH
10349: CALL_OW 88
// Say ( Kurt , DKs-06-rast-a-19 ) ;
10353: LD_EXP 25
10357: PPUSH
10358: LD_STRING DKs-06-rast-a-19
10360: PPUSH
10361: CALL_OW 88
// end ; end ; Say ( Heike , DH-06-rast-a-20 ) ;
10365: LD_EXP 14
10369: PPUSH
10370: LD_STRING DH-06-rast-a-20
10372: PPUSH
10373: CALL_OW 88
// end ; Say ( Rolf , DRf-06-rast-24 ) ;
10377: LD_EXP 27
10381: PPUSH
10382: LD_STRING DRf-06-rast-24
10384: PPUSH
10385: CALL_OW 88
// if IsOk ( Aviradze ) then
10389: LD_EXP 26
10393: PPUSH
10394: CALL_OW 302
10398: IFFALSE 10498
// begin Say ( Aviradze , DA-06-rast-25 ) ;
10400: LD_EXP 26
10404: PPUSH
10405: LD_STRING DA-06-rast-25
10407: PPUSH
10408: CALL_OW 88
// Say ( Heike , DH-06-rast-26 ) ;
10412: LD_EXP 14
10416: PPUSH
10417: LD_STRING DH-06-rast-26
10419: PPUSH
10420: CALL_OW 88
// Say ( Aviradze , DA-06-rast-27 ) ;
10424: LD_EXP 26
10428: PPUSH
10429: LD_STRING DA-06-rast-27
10431: PPUSH
10432: CALL_OW 88
// if IsOk ( Markov ) then
10436: LD_EXP 21
10440: PPUSH
10441: CALL_OW 302
10445: IFFALSE 10473
// begin Say ( Markov , DMar-06-rast-28 ) ;
10447: LD_EXP 21
10451: PPUSH
10452: LD_STRING DMar-06-rast-28
10454: PPUSH
10455: CALL_OW 88
// Say ( Markov , DMar-06-rast-29 ) ;
10459: LD_EXP 21
10463: PPUSH
10464: LD_STRING DMar-06-rast-29
10466: PPUSH
10467: CALL_OW 88
// end else
10471: GO 10496
// if IsOk ( Sophia ) then
10473: LD_EXP 20
10477: PPUSH
10478: CALL_OW 302
10482: IFFALSE 10496
// begin Say ( Sophia , DS-06-rast-28 ) ;
10484: LD_EXP 20
10488: PPUSH
10489: LD_STRING DS-06-rast-28
10491: PPUSH
10492: CALL_OW 88
// end ; end else
10496: GO 10521
// if IsOk ( Sophia ) then
10498: LD_EXP 20
10502: PPUSH
10503: CALL_OW 302
10507: IFFALSE 10521
// Say ( Sophia , DS-06-rast-29 ) ;
10509: LD_EXP 20
10513: PPUSH
10514: LD_STRING DS-06-rast-29
10516: PPUSH
10517: CALL_OW 88
// DialogueOff ;
10521: CALL_OW 7
// rolfScriptBase := false ;
10525: LD_ADDR_EXP 7
10529: PUSH
10530: LD_INT 0
10532: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
10533: LD_STRING M3
10535: PPUSH
10536: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
10540: LD_ADDR_VAR 0 1
10544: PUSH
10545: LD_INT 22
10547: PUSH
10548: LD_INT 8
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PPUSH
10555: CALL_OW 69
10559: PUSH
10560: FOR_IN
10561: IFFALSE 10577
// SetSide ( i , 2 ) ;
10563: LD_VAR 0 1
10567: PPUSH
10568: LD_INT 2
10570: PPUSH
10571: CALL_OW 235
10575: GO 10560
10577: POP
10578: POP
// end ;
10579: PPOPN 1
10581: END
// every 0 0$1 trigger GetLives ( Rolf ) < 400 and not linkedWithRolf do var random ;
10582: LD_EXP 27
10586: PPUSH
10587: CALL_OW 256
10591: PUSH
10592: LD_INT 400
10594: LESS
10595: PUSH
10596: LD_EXP 9
10600: NOT
10601: AND
10602: IFFALSE 10884
10604: GO 10606
10606: DISABLE
10607: LD_INT 0
10609: PPUSH
// begin DialogueOn ;
10610: CALL_OW 6
// SayRadio ( Rolf , DRf-06-rast-f-11 ) ;
10614: LD_EXP 27
10618: PPUSH
10619: LD_STRING DRf-06-rast-f-11
10621: PPUSH
10622: CALL_OW 94
// SayRadio ( Rolf , DRf-06-rast-f-12 ) ;
10626: LD_EXP 27
10630: PPUSH
10631: LD_STRING DRf-06-rast-f-12
10633: PPUSH
10634: CALL_OW 94
// SayRadio ( Rolf , DRf-06-rast-f-13 ) ;
10638: LD_EXP 27
10642: PPUSH
10643: LD_STRING DRf-06-rast-f-13
10645: PPUSH
10646: CALL_OW 94
// DialogueOff ;
10650: CALL_OW 7
// KillUnit ( Rolf ) ;
10654: LD_EXP 27
10658: PPUSH
10659: CALL_OW 66
// rolfDied := true ;
10663: LD_ADDR_EXP 10
10667: PUSH
10668: LD_INT 1
10670: ST_TO_ADDR
// wait ( 0 0$1 ) ;
10671: LD_INT 35
10673: PPUSH
10674: CALL_OW 67
// if not IsOk ( Givi ) then
10678: LD_EXP 15
10682: PPUSH
10683: CALL_OW 302
10687: NOT
10688: IFFALSE 10692
// exit ;
10690: GO 10884
// DialogueOn ;
10692: CALL_OW 6
// Say ( Givi , DG-06-rast-f-14 ) ;
10696: LD_EXP 15
10700: PPUSH
10701: LD_STRING DG-06-rast-f-14
10703: PPUSH
10704: CALL_OW 88
// Say ( Givi , DG-06-rast-f-15 ) ;
10708: LD_EXP 15
10712: PPUSH
10713: LD_STRING DG-06-rast-f-15
10715: PPUSH
10716: CALL_OW 88
// if IsOk ( Kaia ) then
10720: LD_EXP 19
10724: PPUSH
10725: CALL_OW 302
10729: IFFALSE 10745
// Say ( Kaia , DK-06-rast-f-16 ) else
10731: LD_EXP 19
10735: PPUSH
10736: LD_STRING DK-06-rast-f-16
10738: PPUSH
10739: CALL_OW 88
10743: GO 10832
// if heikeSecondSquad then
10745: LD_EXP 28
10749: IFFALSE 10832
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
10751: LD_ADDR_VAR 0 1
10755: PUSH
10756: LD_EXP 28
10760: PUSH
10761: LD_INT 1
10763: PPUSH
10764: LD_EXP 28
10768: PPUSH
10769: CALL_OW 12
10773: ARRAY
10774: ST_TO_ADDR
// case GetSex ( random ) of 1 :
10775: LD_VAR 0 1
10779: PPUSH
10780: CALL_OW 258
10784: PUSH
10785: LD_INT 1
10787: DOUBLE
10788: EQUAL
10789: IFTRUE 10793
10791: GO 10808
10793: POP
// Say ( random , DArm-06-rast-f-a-16 ) ; 2 :
10794: LD_VAR 0 1
10798: PPUSH
10799: LD_STRING DArm-06-rast-f-a-16
10801: PPUSH
10802: CALL_OW 88
10806: GO 10832
10808: LD_INT 2
10810: DOUBLE
10811: EQUAL
10812: IFTRUE 10816
10814: GO 10831
10816: POP
// Say ( random , DArf-06-rast-f-a-16 ) ; end ;
10817: LD_VAR 0 1
10821: PPUSH
10822: LD_STRING DArf-06-rast-f-a-16
10824: PPUSH
10825: CALL_OW 88
10829: GO 10832
10831: POP
// end ; Say ( Givi , DG-06-rast-f-17 ) ;
10832: LD_EXP 15
10836: PPUSH
10837: LD_STRING DG-06-rast-f-17
10839: PPUSH
10840: CALL_OW 88
// Say ( Givi , DG-06-rast-f-18 ) ;
10844: LD_EXP 15
10848: PPUSH
10849: LD_STRING DG-06-rast-f-18
10851: PPUSH
10852: CALL_OW 88
// Say ( Givi , DG-06-rast-f-19 ) ;
10856: LD_EXP 15
10860: PPUSH
10861: LD_STRING DG-06-rast-f-19
10863: PPUSH
10864: CALL_OW 88
// Say ( Givi , DG-06-rast-f-20 ) ;
10868: LD_EXP 15
10872: PPUSH
10873: LD_STRING DG-06-rast-f-20
10875: PPUSH
10876: CALL_OW 88
// DialogueOff ;
10880: CALL_OW 7
// end ;
10884: PPOPN 1
10886: END
// every 0 0$1 trigger SeeArea ( 2 , ruMainBase ) do
10887: LD_INT 2
10889: PPUSH
10890: LD_INT 10
10892: PPUSH
10893: CALL_OW 294
10897: IFFALSE 10970
10899: GO 10901
10901: DISABLE
// begin Say ( Givi , DG-06-Len-1 ) ;
10902: LD_EXP 15
10906: PPUSH
10907: LD_STRING DG-06-Len-1
10909: PPUSH
10910: CALL_OW 88
// Say ( Kurt , DKs-06-Len-2 ) ;
10914: LD_EXP 25
10918: PPUSH
10919: LD_STRING DKs-06-Len-2
10921: PPUSH
10922: CALL_OW 88
// Say ( Kurt , DKs-06-Len-3 ) ;
10926: LD_EXP 25
10930: PPUSH
10931: LD_STRING DKs-06-Len-3
10933: PPUSH
10934: CALL_OW 88
// Say ( Heike , DH-06-Len-4 ) ;
10938: LD_EXP 14
10942: PPUSH
10943: LD_STRING DH-06-Len-4
10945: PPUSH
10946: CALL_OW 88
// Say ( Kaia , DK-06-Len-5 ) ;
10950: LD_EXP 19
10954: PPUSH
10955: LD_STRING DK-06-Len-5
10957: PPUSH
10958: CALL_OW 88
// leninSpotted := true ;
10962: LD_ADDR_EXP 11
10966: PUSH
10967: LD_INT 1
10969: ST_TO_ADDR
// end ;
10970: END
// every 0 0$1 trigger ( bergkampfArrived and tick > 10 10$00 ) or debug do var i ;
10971: LD_EXP 3
10975: PUSH
10976: LD_OWVAR 1
10980: PUSH
10981: LD_INT 21000
10983: GREATER
10984: AND
10985: PUSH
10986: LD_EXP 1
10990: OR
10991: IFFALSE 11268
10993: GO 10995
10995: DISABLE
10996: LD_INT 0
10998: PPUSH
// begin PrepareOmarSquad ;
10999: CALL 3290 0 0
// repeat wait ( 0 0$1 ) ;
11003: LD_INT 35
11005: PPUSH
11006: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
11010: LD_INT 14
11012: PPUSH
11013: LD_INT 22
11015: PUSH
11016: LD_INT 3
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PUSH
11023: LD_INT 21
11025: PUSH
11026: LD_INT 1
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PPUSH
11037: CALL_OW 70
11041: NOT
11042: IFFALSE 11003
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
11044: LD_ADDR_VAR 0 1
11048: PUSH
11049: LD_INT 14
11051: PPUSH
11052: LD_INT 21
11054: PUSH
11055: LD_INT 3
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: PPUSH
11062: CALL_OW 70
11066: PUSH
11067: FOR_IN
11068: IFFALSE 11084
// SetSide ( i , 5 ) ;
11070: LD_VAR 0 1
11074: PPUSH
11075: LD_INT 5
11077: PPUSH
11078: CALL_OW 235
11082: GO 11067
11084: POP
11085: POP
// wait ( 0 0$3 ) ;
11086: LD_INT 105
11088: PPUSH
11089: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
11093: LD_INT 5
11095: PPUSH
11096: LD_INT 2
11098: PPUSH
11099: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
11103: LD_EXP 24
11107: PPUSH
11108: CALL_OW 87
// DialogueOn ;
11112: CALL_OW 6
// SayRadio ( Omar , DOm-06-Veh-1 ) ;
11116: LD_EXP 24
11120: PPUSH
11121: LD_STRING DOm-06-Veh-1
11123: PPUSH
11124: CALL_OW 94
// SayRadio ( Omar , DOm-06-Veh-2 ) ;
11128: LD_EXP 24
11132: PPUSH
11133: LD_STRING DOm-06-Veh-2
11135: PPUSH
11136: CALL_OW 94
// SayRadio ( Omar , DOm-06-Veh-3 ) ;
11140: LD_EXP 24
11144: PPUSH
11145: LD_STRING DOm-06-Veh-3
11147: PPUSH
11148: CALL_OW 94
// if mortarConstructed then
11152: LD_EXP 12
11156: IFFALSE 11170
// SayRadio ( Omar , DOm-06-Veh-4 ) ;
11158: LD_EXP 24
11162: PPUSH
11163: LD_STRING DOm-06-Veh-4
11165: PPUSH
11166: CALL_OW 94
// Say ( Heike , DH-06-Veh-5 ) ;
11170: LD_EXP 14
11174: PPUSH
11175: LD_STRING DH-06-Veh-5
11177: PPUSH
11178: CALL_OW 88
// if IsOk ( Kurt ) then
11182: LD_EXP 25
11186: PPUSH
11187: CALL_OW 302
11191: IFFALSE 11241
// begin Say ( Kurt , DKs-06-Veh-6 ) ;
11193: LD_EXP 25
11197: PPUSH
11198: LD_STRING DKs-06-Veh-6
11200: PPUSH
11201: CALL_OW 88
// Say ( Kurt , DKs-06-Veh-7 ) ;
11205: LD_EXP 25
11209: PPUSH
11210: LD_STRING DKs-06-Veh-7
11212: PPUSH
11213: CALL_OW 88
// Say ( Givi , DG-06-Veh-8 ) ;
11217: LD_EXP 15
11221: PPUSH
11222: LD_STRING DG-06-Veh-8
11224: PPUSH
11225: CALL_OW 88
// Say ( Mike , DM-06-Veh-9 ) ;
11229: LD_EXP 16
11233: PPUSH
11234: LD_STRING DM-06-Veh-9
11236: PPUSH
11237: CALL_OW 88
// end ; DialogueOff ;
11241: CALL_OW 7
// omarArrived := true ;
11245: LD_ADDR_EXP 6
11249: PUSH
11250: LD_INT 1
11252: ST_TO_ADDR
// omarScriptBase := true ;
11253: LD_ADDR_EXP 8
11257: PUSH
11258: LD_INT 1
11260: ST_TO_ADDR
// ChangeMissionObjectives ( M4 ) ;
11261: LD_STRING M4
11263: PPUSH
11264: CALL_OW 337
// end ;
11268: PPOPN 1
11270: END
// every 0 0$1 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
11271: LD_EXP 27
11275: PPUSH
11276: CALL_OW 302
11280: PUSH
11281: LD_EXP 9
11285: AND
11286: PUSH
11287: LD_EXP 6
11291: AND
11292: IFFALSE 11381
11294: GO 11296
11296: DISABLE
// begin CenterNowOnUnits ( Rolf ) ;
11297: LD_EXP 27
11301: PPUSH
11302: CALL_OW 87
// DialogueOn ;
11306: CALL_OW 6
// Say ( Rolf , DRf-06-Veh-10 ) ;
11310: LD_EXP 27
11314: PPUSH
11315: LD_STRING DRf-06-Veh-10
11317: PPUSH
11318: CALL_OW 88
// Say ( Rolf , DRf-06-Veh-11 ) ;
11322: LD_EXP 27
11326: PPUSH
11327: LD_STRING DRf-06-Veh-11
11329: PPUSH
11330: CALL_OW 88
// Say ( Heike , DH-06-Veh-12 ) ;
11334: LD_EXP 14
11338: PPUSH
11339: LD_STRING DH-06-Veh-12
11341: PPUSH
11342: CALL_OW 88
// Say ( Heike , DH-06-Veh-13 ) ;
11346: LD_EXP 14
11350: PPUSH
11351: LD_STRING DH-06-Veh-13
11353: PPUSH
11354: CALL_OW 88
// Say ( Rolf , DRf-06-Veh-14 ) ;
11358: LD_EXP 27
11362: PPUSH
11363: LD_STRING DRf-06-Veh-14
11365: PPUSH
11366: CALL_OW 88
// DialogueOff ;
11370: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
11374: LD_STRING M5
11376: PPUSH
11377: CALL_OW 337
// end ; end_of_file
11381: END
// on VehicleConstructed ( vehicle , factory ) do var driver ;
11382: LD_INT 0
11384: PPUSH
// begin if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
11385: LD_VAR 0 1
11389: PPUSH
11390: CALL_OW 255
11394: PUSH
11395: LD_INT 2
11397: EQUAL
11398: PUSH
11399: LD_OWVAR 52
11403: AND
11404: PUSH
11405: LD_VAR 0 1
11409: PPUSH
11410: CALL_OW 263
11414: PUSH
11415: LD_INT 1
11417: EQUAL
11418: AND
11419: IFFALSE 11474
// begin driver := IsDrivenBy ( vehicle ) ;
11421: LD_ADDR_VAR 0 3
11425: PUSH
11426: LD_VAR 0 1
11430: PPUSH
11431: CALL_OW 311
11435: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
11436: LD_VAR 0 1
11440: PPUSH
11441: LD_INT 211
11443: PPUSH
11444: LD_INT 101
11446: PPUSH
11447: CALL_OW 111
// AddComExitVehicle ( driver ) ;
11451: LD_VAR 0 3
11455: PPUSH
11456: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
11460: LD_VAR 0 3
11464: PPUSH
11465: LD_VAR 0 2
11469: PPUSH
11470: CALL_OW 180
// end ; end ;
11474: PPOPN 3
11476: END
// on UnitDestroyed ( un ) do begin if un = Heike then
11477: LD_VAR 0 1
11481: PUSH
11482: LD_EXP 14
11486: EQUAL
11487: IFFALSE 11496
// YouLost ( Heike ) ;
11489: LD_STRING Heike
11491: PPUSH
11492: CALL_OW 104
// if GetSide ( un ) = 3 then
11496: LD_VAR 0 1
11500: PPUSH
11501: CALL_OW 255
11505: PUSH
11506: LD_INT 3
11508: EQUAL
11509: IFFALSE 11525
// ruLoseCounter := ruLoseCounter + 1 ;
11511: LD_ADDR_EXP 5
11515: PUSH
11516: LD_EXP 5
11520: PUSH
11521: LD_INT 1
11523: PLUS
11524: ST_TO_ADDR
// end ;
11525: PPOPN 1
11527: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin end ; end_of_file
11528: PPOPN 4
11530: END
// every 0 0$30 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 300 , 250 , 200 ] [ Difficulty ] do
11531: LD_INT 6
11533: PPUSH
11534: LD_INT 1
11536: PPUSH
11537: CALL_OW 287
11541: PUSH
11542: LD_INT 300
11544: PUSH
11545: LD_INT 250
11547: PUSH
11548: LD_INT 200
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: LIST
11555: PUSH
11556: LD_OWVAR 67
11560: ARRAY
11561: LESS
11562: IFFALSE 11589
11564: GO 11566
11566: DISABLE
// begin enable ;
11567: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
11568: LD_INT 1
11570: PPUSH
11571: LD_INT 5
11573: PPUSH
11574: CALL_OW 12
11578: PPUSH
11579: LD_INT 6
11581: PPUSH
11582: LD_INT 1
11584: PPUSH
11585: CALL_OW 55
// end ; end_of_file
11589: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
11590: LD_INT 0
11592: PPUSH
11593: PPUSH
// if exist_mode then
11594: LD_VAR 0 2
11598: IFFALSE 11623
// unit := CreateCharacter ( prefix & ident ) else
11600: LD_ADDR_VAR 0 5
11604: PUSH
11605: LD_VAR 0 3
11609: PUSH
11610: LD_VAR 0 1
11614: STR
11615: PPUSH
11616: CALL_OW 34
11620: ST_TO_ADDR
11621: GO 11638
// unit := NewCharacter ( ident ) ;
11623: LD_ADDR_VAR 0 5
11627: PUSH
11628: LD_VAR 0 1
11632: PPUSH
11633: CALL_OW 25
11637: ST_TO_ADDR
// result := unit ;
11638: LD_ADDR_VAR 0 4
11642: PUSH
11643: LD_VAR 0 5
11647: ST_TO_ADDR
// end ;
11648: LD_VAR 0 4
11652: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
11653: LD_INT 0
11655: PPUSH
11656: PPUSH
// if not side or not nation then
11657: LD_VAR 0 1
11661: NOT
11662: PUSH
11663: LD_VAR 0 2
11667: NOT
11668: OR
11669: IFFALSE 11673
// exit ;
11671: GO 12441
// case nation of nation_american :
11673: LD_VAR 0 2
11677: PUSH
11678: LD_INT 1
11680: DOUBLE
11681: EQUAL
11682: IFTRUE 11686
11684: GO 11900
11686: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
11687: LD_ADDR_VAR 0 4
11691: PUSH
11692: LD_INT 35
11694: PUSH
11695: LD_INT 45
11697: PUSH
11698: LD_INT 46
11700: PUSH
11701: LD_INT 47
11703: PUSH
11704: LD_INT 82
11706: PUSH
11707: LD_INT 83
11709: PUSH
11710: LD_INT 84
11712: PUSH
11713: LD_INT 85
11715: PUSH
11716: LD_INT 86
11718: PUSH
11719: LD_INT 1
11721: PUSH
11722: LD_INT 2
11724: PUSH
11725: LD_INT 6
11727: PUSH
11728: LD_INT 15
11730: PUSH
11731: LD_INT 16
11733: PUSH
11734: LD_INT 7
11736: PUSH
11737: LD_INT 12
11739: PUSH
11740: LD_INT 13
11742: PUSH
11743: LD_INT 10
11745: PUSH
11746: LD_INT 14
11748: PUSH
11749: LD_INT 20
11751: PUSH
11752: LD_INT 21
11754: PUSH
11755: LD_INT 22
11757: PUSH
11758: LD_INT 25
11760: PUSH
11761: LD_INT 32
11763: PUSH
11764: LD_INT 27
11766: PUSH
11767: LD_INT 36
11769: PUSH
11770: LD_INT 69
11772: PUSH
11773: LD_INT 39
11775: PUSH
11776: LD_INT 34
11778: PUSH
11779: LD_INT 40
11781: PUSH
11782: LD_INT 48
11784: PUSH
11785: LD_INT 49
11787: PUSH
11788: LD_INT 50
11790: PUSH
11791: LD_INT 51
11793: PUSH
11794: LD_INT 52
11796: PUSH
11797: LD_INT 53
11799: PUSH
11800: LD_INT 54
11802: PUSH
11803: LD_INT 55
11805: PUSH
11806: LD_INT 56
11808: PUSH
11809: LD_INT 57
11811: PUSH
11812: LD_INT 58
11814: PUSH
11815: LD_INT 59
11817: PUSH
11818: LD_INT 60
11820: PUSH
11821: LD_INT 61
11823: PUSH
11824: LD_INT 62
11826: PUSH
11827: LD_INT 80
11829: PUSH
11830: LD_INT 82
11832: PUSH
11833: LD_INT 83
11835: PUSH
11836: LD_INT 84
11838: PUSH
11839: LD_INT 85
11841: PUSH
11842: LD_INT 86
11844: PUSH
11845: EMPTY
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: ST_TO_ADDR
11898: GO 12365
11900: LD_INT 2
11902: DOUBLE
11903: EQUAL
11904: IFTRUE 11908
11906: GO 12134
11908: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
11909: LD_ADDR_VAR 0 4
11913: PUSH
11914: LD_INT 35
11916: PUSH
11917: LD_INT 45
11919: PUSH
11920: LD_INT 46
11922: PUSH
11923: LD_INT 47
11925: PUSH
11926: LD_INT 82
11928: PUSH
11929: LD_INT 83
11931: PUSH
11932: LD_INT 84
11934: PUSH
11935: LD_INT 85
11937: PUSH
11938: LD_INT 87
11940: PUSH
11941: LD_INT 70
11943: PUSH
11944: LD_INT 1
11946: PUSH
11947: LD_INT 11
11949: PUSH
11950: LD_INT 3
11952: PUSH
11953: LD_INT 4
11955: PUSH
11956: LD_INT 5
11958: PUSH
11959: LD_INT 6
11961: PUSH
11962: LD_INT 15
11964: PUSH
11965: LD_INT 18
11967: PUSH
11968: LD_INT 7
11970: PUSH
11971: LD_INT 17
11973: PUSH
11974: LD_INT 8
11976: PUSH
11977: LD_INT 20
11979: PUSH
11980: LD_INT 21
11982: PUSH
11983: LD_INT 22
11985: PUSH
11986: LD_INT 72
11988: PUSH
11989: LD_INT 26
11991: PUSH
11992: LD_INT 69
11994: PUSH
11995: LD_INT 39
11997: PUSH
11998: LD_INT 40
12000: PUSH
12001: LD_INT 41
12003: PUSH
12004: LD_INT 42
12006: PUSH
12007: LD_INT 43
12009: PUSH
12010: LD_INT 48
12012: PUSH
12013: LD_INT 49
12015: PUSH
12016: LD_INT 50
12018: PUSH
12019: LD_INT 51
12021: PUSH
12022: LD_INT 52
12024: PUSH
12025: LD_INT 53
12027: PUSH
12028: LD_INT 54
12030: PUSH
12031: LD_INT 55
12033: PUSH
12034: LD_INT 56
12036: PUSH
12037: LD_INT 60
12039: PUSH
12040: LD_INT 61
12042: PUSH
12043: LD_INT 62
12045: PUSH
12046: LD_INT 66
12048: PUSH
12049: LD_INT 67
12051: PUSH
12052: LD_INT 68
12054: PUSH
12055: LD_INT 81
12057: PUSH
12058: LD_INT 82
12060: PUSH
12061: LD_INT 83
12063: PUSH
12064: LD_INT 84
12066: PUSH
12067: LD_INT 85
12069: PUSH
12070: LD_INT 87
12072: PUSH
12073: LD_INT 88
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: ST_TO_ADDR
12132: GO 12365
12134: LD_INT 3
12136: DOUBLE
12137: EQUAL
12138: IFTRUE 12142
12140: GO 12364
12142: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
12143: LD_ADDR_VAR 0 4
12147: PUSH
12148: LD_INT 46
12150: PUSH
12151: LD_INT 47
12153: PUSH
12154: LD_INT 1
12156: PUSH
12157: LD_INT 2
12159: PUSH
12160: LD_INT 82
12162: PUSH
12163: LD_INT 83
12165: PUSH
12166: LD_INT 84
12168: PUSH
12169: LD_INT 85
12171: PUSH
12172: LD_INT 86
12174: PUSH
12175: LD_INT 11
12177: PUSH
12178: LD_INT 9
12180: PUSH
12181: LD_INT 20
12183: PUSH
12184: LD_INT 19
12186: PUSH
12187: LD_INT 21
12189: PUSH
12190: LD_INT 24
12192: PUSH
12193: LD_INT 22
12195: PUSH
12196: LD_INT 25
12198: PUSH
12199: LD_INT 28
12201: PUSH
12202: LD_INT 29
12204: PUSH
12205: LD_INT 30
12207: PUSH
12208: LD_INT 31
12210: PUSH
12211: LD_INT 37
12213: PUSH
12214: LD_INT 38
12216: PUSH
12217: LD_INT 32
12219: PUSH
12220: LD_INT 27
12222: PUSH
12223: LD_INT 33
12225: PUSH
12226: LD_INT 69
12228: PUSH
12229: LD_INT 39
12231: PUSH
12232: LD_INT 34
12234: PUSH
12235: LD_INT 40
12237: PUSH
12238: LD_INT 71
12240: PUSH
12241: LD_INT 23
12243: PUSH
12244: LD_INT 44
12246: PUSH
12247: LD_INT 48
12249: PUSH
12250: LD_INT 49
12252: PUSH
12253: LD_INT 50
12255: PUSH
12256: LD_INT 51
12258: PUSH
12259: LD_INT 52
12261: PUSH
12262: LD_INT 53
12264: PUSH
12265: LD_INT 54
12267: PUSH
12268: LD_INT 55
12270: PUSH
12271: LD_INT 56
12273: PUSH
12274: LD_INT 57
12276: PUSH
12277: LD_INT 58
12279: PUSH
12280: LD_INT 59
12282: PUSH
12283: LD_INT 63
12285: PUSH
12286: LD_INT 64
12288: PUSH
12289: LD_INT 65
12291: PUSH
12292: LD_INT 82
12294: PUSH
12295: LD_INT 83
12297: PUSH
12298: LD_INT 84
12300: PUSH
12301: LD_INT 85
12303: PUSH
12304: LD_INT 86
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: ST_TO_ADDR
12362: GO 12365
12364: POP
// if state > - 1 and state < 3 then
12365: LD_VAR 0 3
12369: PUSH
12370: LD_INT 1
12372: NEG
12373: GREATER
12374: PUSH
12375: LD_VAR 0 3
12379: PUSH
12380: LD_INT 3
12382: LESS
12383: AND
12384: IFFALSE 12441
// for i in result do
12386: LD_ADDR_VAR 0 5
12390: PUSH
12391: LD_VAR 0 4
12395: PUSH
12396: FOR_IN
12397: IFFALSE 12439
// if GetTech ( i , side ) <> state then
12399: LD_VAR 0 5
12403: PPUSH
12404: LD_VAR 0 1
12408: PPUSH
12409: CALL_OW 321
12413: PUSH
12414: LD_VAR 0 3
12418: NONEQUAL
12419: IFFALSE 12437
// result := result diff i ;
12421: LD_ADDR_VAR 0 4
12425: PUSH
12426: LD_VAR 0 4
12430: PUSH
12431: LD_VAR 0 5
12435: DIFF
12436: ST_TO_ADDR
12437: GO 12396
12439: POP
12440: POP
// end ;
12441: LD_VAR 0 4
12445: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
12446: LD_INT 0
12448: PPUSH
12449: PPUSH
12450: PPUSH
// result := true ;
12451: LD_ADDR_VAR 0 3
12455: PUSH
12456: LD_INT 1
12458: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
12459: LD_ADDR_VAR 0 5
12463: PUSH
12464: LD_VAR 0 2
12468: PPUSH
12469: CALL_OW 480
12473: ST_TO_ADDR
// if not tmp then
12474: LD_VAR 0 5
12478: NOT
12479: IFFALSE 12483
// exit ;
12481: GO 12532
// for i in tmp do
12483: LD_ADDR_VAR 0 4
12487: PUSH
12488: LD_VAR 0 5
12492: PUSH
12493: FOR_IN
12494: IFFALSE 12530
// if GetTech ( i , side ) <> state_researched then
12496: LD_VAR 0 4
12500: PPUSH
12501: LD_VAR 0 1
12505: PPUSH
12506: CALL_OW 321
12510: PUSH
12511: LD_INT 2
12513: NONEQUAL
12514: IFFALSE 12528
// begin result := false ;
12516: LD_ADDR_VAR 0 3
12520: PUSH
12521: LD_INT 0
12523: ST_TO_ADDR
// exit ;
12524: POP
12525: POP
12526: GO 12532
// end ;
12528: GO 12493
12530: POP
12531: POP
// end ;
12532: LD_VAR 0 3
12536: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
12537: LD_INT 0
12539: PPUSH
12540: PPUSH
12541: PPUSH
12542: PPUSH
12543: PPUSH
12544: PPUSH
12545: PPUSH
12546: PPUSH
12547: PPUSH
12548: PPUSH
12549: PPUSH
12550: PPUSH
12551: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
12552: LD_VAR 0 1
12556: NOT
12557: PUSH
12558: LD_VAR 0 1
12562: PPUSH
12563: CALL_OW 257
12567: PUSH
12568: LD_INT 9
12570: NONEQUAL
12571: OR
12572: IFFALSE 12576
// exit ;
12574: GO 13149
// side := GetSide ( unit ) ;
12576: LD_ADDR_VAR 0 9
12580: PUSH
12581: LD_VAR 0 1
12585: PPUSH
12586: CALL_OW 255
12590: ST_TO_ADDR
// tech_space := tech_spacanom ;
12591: LD_ADDR_VAR 0 12
12595: PUSH
12596: LD_INT 29
12598: ST_TO_ADDR
// tech_time := tech_taurad ;
12599: LD_ADDR_VAR 0 13
12603: PUSH
12604: LD_INT 28
12606: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
12607: LD_ADDR_VAR 0 11
12611: PUSH
12612: LD_VAR 0 1
12616: PPUSH
12617: CALL_OW 310
12621: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
12622: LD_VAR 0 11
12626: PPUSH
12627: CALL_OW 247
12631: PUSH
12632: LD_INT 2
12634: EQUAL
12635: IFFALSE 12639
// exit ;
12637: GO 13149
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12639: LD_ADDR_VAR 0 8
12643: PUSH
12644: LD_INT 81
12646: PUSH
12647: LD_VAR 0 9
12651: PUSH
12652: EMPTY
12653: LIST
12654: LIST
12655: PUSH
12656: LD_INT 3
12658: PUSH
12659: LD_INT 21
12661: PUSH
12662: LD_INT 3
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: PPUSH
12677: CALL_OW 69
12681: ST_TO_ADDR
// if not tmp then
12682: LD_VAR 0 8
12686: NOT
12687: IFFALSE 12691
// exit ;
12689: GO 13149
// if in_unit then
12691: LD_VAR 0 11
12695: IFFALSE 12719
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
12697: LD_ADDR_VAR 0 10
12701: PUSH
12702: LD_VAR 0 8
12706: PPUSH
12707: LD_VAR 0 11
12711: PPUSH
12712: CALL_OW 74
12716: ST_TO_ADDR
12717: GO 12739
// enemy := NearestUnitToUnit ( tmp , unit ) ;
12719: LD_ADDR_VAR 0 10
12723: PUSH
12724: LD_VAR 0 8
12728: PPUSH
12729: LD_VAR 0 1
12733: PPUSH
12734: CALL_OW 74
12738: ST_TO_ADDR
// if not enemy then
12739: LD_VAR 0 10
12743: NOT
12744: IFFALSE 12748
// exit ;
12746: GO 13149
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
12748: LD_VAR 0 11
12752: PUSH
12753: LD_VAR 0 11
12757: PPUSH
12758: LD_VAR 0 10
12762: PPUSH
12763: CALL_OW 296
12767: PUSH
12768: LD_INT 13
12770: GREATER
12771: AND
12772: PUSH
12773: LD_VAR 0 1
12777: PPUSH
12778: LD_VAR 0 10
12782: PPUSH
12783: CALL_OW 296
12787: PUSH
12788: LD_INT 12
12790: GREATER
12791: OR
12792: IFFALSE 12796
// exit ;
12794: GO 13149
// missile := [ 1 ] ;
12796: LD_ADDR_VAR 0 14
12800: PUSH
12801: LD_INT 1
12803: PUSH
12804: EMPTY
12805: LIST
12806: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12807: LD_VAR 0 9
12811: PPUSH
12812: LD_VAR 0 12
12816: PPUSH
12817: CALL_OW 325
12821: IFFALSE 12850
// missile := Insert ( missile , missile + 1 , 2 ) ;
12823: LD_ADDR_VAR 0 14
12827: PUSH
12828: LD_VAR 0 14
12832: PPUSH
12833: LD_VAR 0 14
12837: PUSH
12838: LD_INT 1
12840: PLUS
12841: PPUSH
12842: LD_INT 2
12844: PPUSH
12845: CALL_OW 2
12849: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12850: LD_VAR 0 9
12854: PPUSH
12855: LD_VAR 0 13
12859: PPUSH
12860: CALL_OW 325
12864: PUSH
12865: LD_VAR 0 10
12869: PPUSH
12870: CALL_OW 255
12874: PPUSH
12875: LD_VAR 0 13
12879: PPUSH
12880: CALL_OW 325
12884: NOT
12885: AND
12886: IFFALSE 12915
// missile := Insert ( missile , missile + 1 , 3 ) ;
12888: LD_ADDR_VAR 0 14
12892: PUSH
12893: LD_VAR 0 14
12897: PPUSH
12898: LD_VAR 0 14
12902: PUSH
12903: LD_INT 1
12905: PLUS
12906: PPUSH
12907: LD_INT 3
12909: PPUSH
12910: CALL_OW 2
12914: ST_TO_ADDR
// if missile < 2 then
12915: LD_VAR 0 14
12919: PUSH
12920: LD_INT 2
12922: LESS
12923: IFFALSE 12927
// exit ;
12925: GO 13149
// x := GetX ( enemy ) ;
12927: LD_ADDR_VAR 0 4
12931: PUSH
12932: LD_VAR 0 10
12936: PPUSH
12937: CALL_OW 250
12941: ST_TO_ADDR
// y := GetY ( enemy ) ;
12942: LD_ADDR_VAR 0 5
12946: PUSH
12947: LD_VAR 0 10
12951: PPUSH
12952: CALL_OW 251
12956: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12957: LD_ADDR_VAR 0 6
12961: PUSH
12962: LD_VAR 0 4
12966: PUSH
12967: LD_INT 1
12969: NEG
12970: PPUSH
12971: LD_INT 1
12973: PPUSH
12974: CALL_OW 12
12978: PLUS
12979: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12980: LD_ADDR_VAR 0 7
12984: PUSH
12985: LD_VAR 0 5
12989: PUSH
12990: LD_INT 1
12992: NEG
12993: PPUSH
12994: LD_INT 1
12996: PPUSH
12997: CALL_OW 12
13001: PLUS
13002: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
13003: LD_VAR 0 6
13007: PPUSH
13008: LD_VAR 0 7
13012: PPUSH
13013: CALL_OW 488
13017: NOT
13018: IFFALSE 13040
// begin _x := x ;
13020: LD_ADDR_VAR 0 6
13024: PUSH
13025: LD_VAR 0 4
13029: ST_TO_ADDR
// _y := y ;
13030: LD_ADDR_VAR 0 7
13034: PUSH
13035: LD_VAR 0 5
13039: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
13040: LD_ADDR_VAR 0 3
13044: PUSH
13045: LD_INT 1
13047: PPUSH
13048: LD_VAR 0 14
13052: PPUSH
13053: CALL_OW 12
13057: ST_TO_ADDR
// case i of 1 :
13058: LD_VAR 0 3
13062: PUSH
13063: LD_INT 1
13065: DOUBLE
13066: EQUAL
13067: IFTRUE 13071
13069: GO 13088
13071: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
13072: LD_VAR 0 1
13076: PPUSH
13077: LD_VAR 0 10
13081: PPUSH
13082: CALL_OW 115
13086: GO 13149
13088: LD_INT 2
13090: DOUBLE
13091: EQUAL
13092: IFTRUE 13096
13094: GO 13118
13096: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
13097: LD_VAR 0 1
13101: PPUSH
13102: LD_VAR 0 6
13106: PPUSH
13107: LD_VAR 0 7
13111: PPUSH
13112: CALL_OW 153
13116: GO 13149
13118: LD_INT 3
13120: DOUBLE
13121: EQUAL
13122: IFTRUE 13126
13124: GO 13148
13126: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
13127: LD_VAR 0 1
13131: PPUSH
13132: LD_VAR 0 6
13136: PPUSH
13137: LD_VAR 0 7
13141: PPUSH
13142: CALL_OW 154
13146: GO 13149
13148: POP
// end ;
13149: LD_VAR 0 2
13153: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
13154: LD_INT 0
13156: PPUSH
13157: PPUSH
13158: PPUSH
13159: PPUSH
13160: PPUSH
13161: PPUSH
// if not unit or not building then
13162: LD_VAR 0 1
13166: NOT
13167: PUSH
13168: LD_VAR 0 2
13172: NOT
13173: OR
13174: IFFALSE 13178
// exit ;
13176: GO 13336
// x := GetX ( building ) ;
13178: LD_ADDR_VAR 0 5
13182: PUSH
13183: LD_VAR 0 2
13187: PPUSH
13188: CALL_OW 250
13192: ST_TO_ADDR
// y := GetY ( building ) ;
13193: LD_ADDR_VAR 0 6
13197: PUSH
13198: LD_VAR 0 2
13202: PPUSH
13203: CALL_OW 251
13207: ST_TO_ADDR
// for i = 0 to 5 do
13208: LD_ADDR_VAR 0 4
13212: PUSH
13213: DOUBLE
13214: LD_INT 0
13216: DEC
13217: ST_TO_ADDR
13218: LD_INT 5
13220: PUSH
13221: FOR_TO
13222: IFFALSE 13334
// begin _x := ShiftX ( x , i , 3 ) ;
13224: LD_ADDR_VAR 0 7
13228: PUSH
13229: LD_VAR 0 5
13233: PPUSH
13234: LD_VAR 0 4
13238: PPUSH
13239: LD_INT 3
13241: PPUSH
13242: CALL_OW 272
13246: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
13247: LD_ADDR_VAR 0 8
13251: PUSH
13252: LD_VAR 0 6
13256: PPUSH
13257: LD_VAR 0 4
13261: PPUSH
13262: LD_INT 3
13264: PPUSH
13265: CALL_OW 273
13269: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
13270: LD_VAR 0 7
13274: PPUSH
13275: LD_VAR 0 8
13279: PPUSH
13280: CALL_OW 488
13284: NOT
13285: IFFALSE 13289
// continue ;
13287: GO 13221
// if HexInfo ( _x , _y ) = 0 then
13289: LD_VAR 0 7
13293: PPUSH
13294: LD_VAR 0 8
13298: PPUSH
13299: CALL_OW 428
13303: PUSH
13304: LD_INT 0
13306: EQUAL
13307: IFFALSE 13332
// begin ComMoveXY ( unit , _x , _y ) ;
13309: LD_VAR 0 1
13313: PPUSH
13314: LD_VAR 0 7
13318: PPUSH
13319: LD_VAR 0 8
13323: PPUSH
13324: CALL_OW 111
// exit ;
13328: POP
13329: POP
13330: GO 13336
// end ; end ;
13332: GO 13221
13334: POP
13335: POP
// end ;
13336: LD_VAR 0 3
13340: RET
// export function ScanBase ( side , base_area ) ; begin
13341: LD_INT 0
13343: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
13344: LD_ADDR_VAR 0 3
13348: PUSH
13349: LD_VAR 0 2
13353: PPUSH
13354: LD_INT 81
13356: PUSH
13357: LD_VAR 0 1
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PPUSH
13366: CALL_OW 70
13370: ST_TO_ADDR
// end ;
13371: LD_VAR 0 3
13375: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
13376: LD_INT 0
13378: PPUSH
13379: PPUSH
13380: PPUSH
13381: PPUSH
// result := false ;
13382: LD_ADDR_VAR 0 2
13386: PUSH
13387: LD_INT 0
13389: ST_TO_ADDR
// side := GetSide ( unit ) ;
13390: LD_ADDR_VAR 0 3
13394: PUSH
13395: LD_VAR 0 1
13399: PPUSH
13400: CALL_OW 255
13404: ST_TO_ADDR
// nat := GetNation ( unit ) ;
13405: LD_ADDR_VAR 0 4
13409: PUSH
13410: LD_VAR 0 1
13414: PPUSH
13415: CALL_OW 248
13419: ST_TO_ADDR
// case nat of 1 :
13420: LD_VAR 0 4
13424: PUSH
13425: LD_INT 1
13427: DOUBLE
13428: EQUAL
13429: IFTRUE 13433
13431: GO 13444
13433: POP
// tech := tech_lassight ; 2 :
13434: LD_ADDR_VAR 0 5
13438: PUSH
13439: LD_INT 12
13441: ST_TO_ADDR
13442: GO 13483
13444: LD_INT 2
13446: DOUBLE
13447: EQUAL
13448: IFTRUE 13452
13450: GO 13463
13452: POP
// tech := tech_mortar ; 3 :
13453: LD_ADDR_VAR 0 5
13457: PUSH
13458: LD_INT 41
13460: ST_TO_ADDR
13461: GO 13483
13463: LD_INT 3
13465: DOUBLE
13466: EQUAL
13467: IFTRUE 13471
13469: GO 13482
13471: POP
// tech := tech_bazooka ; end ;
13472: LD_ADDR_VAR 0 5
13476: PUSH
13477: LD_INT 44
13479: ST_TO_ADDR
13480: GO 13483
13482: POP
// if Researched ( side , tech ) then
13483: LD_VAR 0 3
13487: PPUSH
13488: LD_VAR 0 5
13492: PPUSH
13493: CALL_OW 325
13497: IFFALSE 13524
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
13499: LD_ADDR_VAR 0 2
13503: PUSH
13504: LD_INT 5
13506: PUSH
13507: LD_INT 8
13509: PUSH
13510: LD_INT 9
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: LIST
13517: PUSH
13518: LD_VAR 0 4
13522: ARRAY
13523: ST_TO_ADDR
// end ;
13524: LD_VAR 0 2
13528: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
13529: LD_INT 0
13531: PPUSH
13532: PPUSH
13533: PPUSH
// if not mines then
13534: LD_VAR 0 2
13538: NOT
13539: IFFALSE 13543
// exit ;
13541: GO 13687
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13543: LD_ADDR_VAR 0 5
13547: PUSH
13548: LD_INT 81
13550: PUSH
13551: LD_VAR 0 1
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: LD_INT 3
13562: PUSH
13563: LD_INT 21
13565: PUSH
13566: LD_INT 3
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PPUSH
13581: CALL_OW 69
13585: ST_TO_ADDR
// for i in mines do
13586: LD_ADDR_VAR 0 4
13590: PUSH
13591: LD_VAR 0 2
13595: PUSH
13596: FOR_IN
13597: IFFALSE 13685
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
13599: LD_VAR 0 4
13603: PUSH
13604: LD_INT 1
13606: ARRAY
13607: PPUSH
13608: LD_VAR 0 4
13612: PUSH
13613: LD_INT 2
13615: ARRAY
13616: PPUSH
13617: CALL_OW 458
13621: NOT
13622: IFFALSE 13626
// continue ;
13624: GO 13596
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
13626: LD_VAR 0 4
13630: PUSH
13631: LD_INT 1
13633: ARRAY
13634: PPUSH
13635: LD_VAR 0 4
13639: PUSH
13640: LD_INT 2
13642: ARRAY
13643: PPUSH
13644: CALL_OW 428
13648: PUSH
13649: LD_VAR 0 5
13653: IN
13654: IFFALSE 13683
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
13656: LD_VAR 0 4
13660: PUSH
13661: LD_INT 1
13663: ARRAY
13664: PPUSH
13665: LD_VAR 0 4
13669: PUSH
13670: LD_INT 2
13672: ARRAY
13673: PPUSH
13674: LD_VAR 0 1
13678: PPUSH
13679: CALL_OW 456
// end ;
13683: GO 13596
13685: POP
13686: POP
// end ;
13687: LD_VAR 0 3
13691: RET
// export function Count ( array ) ; var i ; begin
13692: LD_INT 0
13694: PPUSH
13695: PPUSH
// result := 0 ;
13696: LD_ADDR_VAR 0 2
13700: PUSH
13701: LD_INT 0
13703: ST_TO_ADDR
// for i in array do
13704: LD_ADDR_VAR 0 3
13708: PUSH
13709: LD_VAR 0 1
13713: PUSH
13714: FOR_IN
13715: IFFALSE 13739
// if i then
13717: LD_VAR 0 3
13721: IFFALSE 13737
// result := result + 1 ;
13723: LD_ADDR_VAR 0 2
13727: PUSH
13728: LD_VAR 0 2
13732: PUSH
13733: LD_INT 1
13735: PLUS
13736: ST_TO_ADDR
13737: GO 13714
13739: POP
13740: POP
// end ;
13741: LD_VAR 0 2
13745: RET
// export function IsEmpty ( building ) ; begin
13746: LD_INT 0
13748: PPUSH
// if not building then
13749: LD_VAR 0 1
13753: NOT
13754: IFFALSE 13758
// exit ;
13756: GO 13801
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
13758: LD_ADDR_VAR 0 2
13762: PUSH
13763: LD_VAR 0 1
13767: PUSH
13768: LD_INT 22
13770: PUSH
13771: LD_VAR 0 1
13775: PPUSH
13776: CALL_OW 255
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: PUSH
13785: LD_INT 58
13787: PUSH
13788: EMPTY
13789: LIST
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: PPUSH
13795: CALL_OW 69
13799: IN
13800: ST_TO_ADDR
// end ;
13801: LD_VAR 0 2
13805: RET
// export function IsNotFull ( building ) ; begin
13806: LD_INT 0
13808: PPUSH
// if not building then
13809: LD_VAR 0 1
13813: NOT
13814: IFFALSE 13818
// exit ;
13816: GO 13837
// result := UnitsInside ( building ) < 6 ;
13818: LD_ADDR_VAR 0 2
13822: PUSH
13823: LD_VAR 0 1
13827: PPUSH
13828: CALL_OW 313
13832: PUSH
13833: LD_INT 6
13835: LESS
13836: ST_TO_ADDR
// end ;
13837: LD_VAR 0 2
13841: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
13842: LD_INT 0
13844: PPUSH
13845: PPUSH
13846: PPUSH
13847: PPUSH
// tmp := [ ] ;
13848: LD_ADDR_VAR 0 3
13852: PUSH
13853: EMPTY
13854: ST_TO_ADDR
// list := [ ] ;
13855: LD_ADDR_VAR 0 5
13859: PUSH
13860: EMPTY
13861: ST_TO_ADDR
// for i = 16 to 25 do
13862: LD_ADDR_VAR 0 4
13866: PUSH
13867: DOUBLE
13868: LD_INT 16
13870: DEC
13871: ST_TO_ADDR
13872: LD_INT 25
13874: PUSH
13875: FOR_TO
13876: IFFALSE 13949
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
13878: LD_ADDR_VAR 0 3
13882: PUSH
13883: LD_VAR 0 3
13887: PUSH
13888: LD_INT 22
13890: PUSH
13891: LD_VAR 0 1
13895: PPUSH
13896: CALL_OW 255
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PUSH
13905: LD_INT 91
13907: PUSH
13908: LD_VAR 0 1
13912: PUSH
13913: LD_INT 6
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: LIST
13920: PUSH
13921: LD_INT 30
13923: PUSH
13924: LD_VAR 0 4
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: LIST
13937: PUSH
13938: EMPTY
13939: LIST
13940: PPUSH
13941: CALL_OW 69
13945: ADD
13946: ST_TO_ADDR
13947: GO 13875
13949: POP
13950: POP
// for i = 1 to tmp do
13951: LD_ADDR_VAR 0 4
13955: PUSH
13956: DOUBLE
13957: LD_INT 1
13959: DEC
13960: ST_TO_ADDR
13961: LD_VAR 0 3
13965: PUSH
13966: FOR_TO
13967: IFFALSE 14055
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
13969: LD_ADDR_VAR 0 5
13973: PUSH
13974: LD_VAR 0 5
13978: PUSH
13979: LD_VAR 0 3
13983: PUSH
13984: LD_VAR 0 4
13988: ARRAY
13989: PPUSH
13990: CALL_OW 266
13994: PUSH
13995: LD_VAR 0 3
13999: PUSH
14000: LD_VAR 0 4
14004: ARRAY
14005: PPUSH
14006: CALL_OW 250
14010: PUSH
14011: LD_VAR 0 3
14015: PUSH
14016: LD_VAR 0 4
14020: ARRAY
14021: PPUSH
14022: CALL_OW 251
14026: PUSH
14027: LD_VAR 0 3
14031: PUSH
14032: LD_VAR 0 4
14036: ARRAY
14037: PPUSH
14038: CALL_OW 254
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: PUSH
14049: EMPTY
14050: LIST
14051: ADD
14052: ST_TO_ADDR
14053: GO 13966
14055: POP
14056: POP
// result := list ;
14057: LD_ADDR_VAR 0 2
14061: PUSH
14062: LD_VAR 0 5
14066: ST_TO_ADDR
// end ;
14067: LD_VAR 0 2
14071: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
14072: LD_INT 0
14074: PPUSH
14075: PPUSH
14076: PPUSH
14077: PPUSH
14078: PPUSH
14079: PPUSH
14080: PPUSH
// if not factory then
14081: LD_VAR 0 1
14085: NOT
14086: IFFALSE 14090
// exit ;
14088: GO 14683
// if control = control_apeman then
14090: LD_VAR 0 4
14094: PUSH
14095: LD_INT 5
14097: EQUAL
14098: IFFALSE 14207
// begin tmp := UnitsInside ( factory ) ;
14100: LD_ADDR_VAR 0 8
14104: PUSH
14105: LD_VAR 0 1
14109: PPUSH
14110: CALL_OW 313
14114: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
14115: LD_VAR 0 8
14119: PPUSH
14120: LD_INT 25
14122: PUSH
14123: LD_INT 12
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PPUSH
14130: CALL_OW 72
14134: NOT
14135: IFFALSE 14145
// control := control_manual ;
14137: LD_ADDR_VAR 0 4
14141: PUSH
14142: LD_INT 1
14144: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
14145: LD_ADDR_VAR 0 8
14149: PUSH
14150: LD_VAR 0 1
14154: PPUSH
14155: CALL 13842 0 1
14159: ST_TO_ADDR
// if tmp then
14160: LD_VAR 0 8
14164: IFFALSE 14207
// begin for i in tmp do
14166: LD_ADDR_VAR 0 7
14170: PUSH
14171: LD_VAR 0 8
14175: PUSH
14176: FOR_IN
14177: IFFALSE 14205
// if i [ 1 ] = b_ext_radio then
14179: LD_VAR 0 7
14183: PUSH
14184: LD_INT 1
14186: ARRAY
14187: PUSH
14188: LD_INT 22
14190: EQUAL
14191: IFFALSE 14203
// begin control := control_remote ;
14193: LD_ADDR_VAR 0 4
14197: PUSH
14198: LD_INT 2
14200: ST_TO_ADDR
// break ;
14201: GO 14205
// end ;
14203: GO 14176
14205: POP
14206: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14207: LD_VAR 0 1
14211: PPUSH
14212: LD_VAR 0 2
14216: PPUSH
14217: LD_VAR 0 3
14221: PPUSH
14222: LD_VAR 0 4
14226: PPUSH
14227: LD_VAR 0 5
14231: PPUSH
14232: CALL_OW 448
14236: IFFALSE 14271
// begin result := [ chassis , engine , control , weapon ] ;
14238: LD_ADDR_VAR 0 6
14242: PUSH
14243: LD_VAR 0 2
14247: PUSH
14248: LD_VAR 0 3
14252: PUSH
14253: LD_VAR 0 4
14257: PUSH
14258: LD_VAR 0 5
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: ST_TO_ADDR
// exit ;
14269: GO 14683
// end ; _chassis := AvailableChassisList ( factory ) ;
14271: LD_ADDR_VAR 0 9
14275: PUSH
14276: LD_VAR 0 1
14280: PPUSH
14281: CALL_OW 475
14285: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
14286: LD_ADDR_VAR 0 11
14290: PUSH
14291: LD_VAR 0 1
14295: PPUSH
14296: CALL_OW 476
14300: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
14301: LD_ADDR_VAR 0 12
14305: PUSH
14306: LD_VAR 0 1
14310: PPUSH
14311: CALL_OW 477
14315: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
14316: LD_ADDR_VAR 0 10
14320: PUSH
14321: LD_VAR 0 1
14325: PPUSH
14326: CALL_OW 478
14330: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
14331: LD_VAR 0 9
14335: NOT
14336: PUSH
14337: LD_VAR 0 11
14341: NOT
14342: OR
14343: PUSH
14344: LD_VAR 0 12
14348: NOT
14349: OR
14350: PUSH
14351: LD_VAR 0 10
14355: NOT
14356: OR
14357: IFFALSE 14392
// begin result := [ chassis , engine , control , weapon ] ;
14359: LD_ADDR_VAR 0 6
14363: PUSH
14364: LD_VAR 0 2
14368: PUSH
14369: LD_VAR 0 3
14373: PUSH
14374: LD_VAR 0 4
14378: PUSH
14379: LD_VAR 0 5
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: ST_TO_ADDR
// exit ;
14390: GO 14683
// end ; if not chassis in _chassis then
14392: LD_VAR 0 2
14396: PUSH
14397: LD_VAR 0 9
14401: IN
14402: NOT
14403: IFFALSE 14429
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
14405: LD_ADDR_VAR 0 2
14409: PUSH
14410: LD_VAR 0 9
14414: PUSH
14415: LD_INT 1
14417: PPUSH
14418: LD_VAR 0 9
14422: PPUSH
14423: CALL_OW 12
14427: ARRAY
14428: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
14429: LD_VAR 0 2
14433: PPUSH
14434: LD_VAR 0 3
14438: PPUSH
14439: CALL 14688 0 2
14443: NOT
14444: IFFALSE 14503
// repeat engine := _engine [ 1 ] ;
14446: LD_ADDR_VAR 0 3
14450: PUSH
14451: LD_VAR 0 11
14455: PUSH
14456: LD_INT 1
14458: ARRAY
14459: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
14460: LD_ADDR_VAR 0 11
14464: PUSH
14465: LD_VAR 0 11
14469: PPUSH
14470: LD_INT 1
14472: PPUSH
14473: CALL_OW 3
14477: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
14478: LD_VAR 0 2
14482: PPUSH
14483: LD_VAR 0 3
14487: PPUSH
14488: CALL 14688 0 2
14492: PUSH
14493: LD_VAR 0 11
14497: PUSH
14498: EMPTY
14499: EQUAL
14500: OR
14501: IFFALSE 14446
// if not control in _control then
14503: LD_VAR 0 4
14507: PUSH
14508: LD_VAR 0 12
14512: IN
14513: NOT
14514: IFFALSE 14540
// control := _control [ rand ( 1 , _control ) ] ;
14516: LD_ADDR_VAR 0 4
14520: PUSH
14521: LD_VAR 0 12
14525: PUSH
14526: LD_INT 1
14528: PPUSH
14529: LD_VAR 0 12
14533: PPUSH
14534: CALL_OW 12
14538: ARRAY
14539: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
14540: LD_VAR 0 2
14544: PPUSH
14545: LD_VAR 0 5
14549: PPUSH
14550: CALL 14908 0 2
14554: NOT
14555: IFFALSE 14614
// repeat weapon := _weapon [ 1 ] ;
14557: LD_ADDR_VAR 0 5
14561: PUSH
14562: LD_VAR 0 10
14566: PUSH
14567: LD_INT 1
14569: ARRAY
14570: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
14571: LD_ADDR_VAR 0 10
14575: PUSH
14576: LD_VAR 0 10
14580: PPUSH
14581: LD_INT 1
14583: PPUSH
14584: CALL_OW 3
14588: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
14589: LD_VAR 0 2
14593: PPUSH
14594: LD_VAR 0 5
14598: PPUSH
14599: CALL 14908 0 2
14603: PUSH
14604: LD_VAR 0 10
14608: PUSH
14609: EMPTY
14610: EQUAL
14611: OR
14612: IFFALSE 14557
// result := [ ] ;
14614: LD_ADDR_VAR 0 6
14618: PUSH
14619: EMPTY
14620: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14621: LD_VAR 0 1
14625: PPUSH
14626: LD_VAR 0 2
14630: PPUSH
14631: LD_VAR 0 3
14635: PPUSH
14636: LD_VAR 0 4
14640: PPUSH
14641: LD_VAR 0 5
14645: PPUSH
14646: CALL_OW 448
14650: IFFALSE 14683
// result := [ chassis , engine , control , weapon ] ;
14652: LD_ADDR_VAR 0 6
14656: PUSH
14657: LD_VAR 0 2
14661: PUSH
14662: LD_VAR 0 3
14666: PUSH
14667: LD_VAR 0 4
14671: PUSH
14672: LD_VAR 0 5
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: ST_TO_ADDR
// end ;
14683: LD_VAR 0 6
14687: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
14688: LD_INT 0
14690: PPUSH
// if not chassis or not engine then
14691: LD_VAR 0 1
14695: NOT
14696: PUSH
14697: LD_VAR 0 2
14701: NOT
14702: OR
14703: IFFALSE 14707
// exit ;
14705: GO 14903
// case engine of engine_solar :
14707: LD_VAR 0 2
14711: PUSH
14712: LD_INT 2
14714: DOUBLE
14715: EQUAL
14716: IFTRUE 14720
14718: GO 14758
14720: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
14721: LD_ADDR_VAR 0 3
14725: PUSH
14726: LD_INT 11
14728: PUSH
14729: LD_INT 12
14731: PUSH
14732: LD_INT 13
14734: PUSH
14735: LD_INT 14
14737: PUSH
14738: LD_INT 1
14740: PUSH
14741: LD_INT 2
14743: PUSH
14744: LD_INT 3
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: ST_TO_ADDR
14756: GO 14887
14758: LD_INT 1
14760: DOUBLE
14761: EQUAL
14762: IFTRUE 14766
14764: GO 14828
14766: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
14767: LD_ADDR_VAR 0 3
14771: PUSH
14772: LD_INT 11
14774: PUSH
14775: LD_INT 12
14777: PUSH
14778: LD_INT 13
14780: PUSH
14781: LD_INT 14
14783: PUSH
14784: LD_INT 1
14786: PUSH
14787: LD_INT 2
14789: PUSH
14790: LD_INT 3
14792: PUSH
14793: LD_INT 4
14795: PUSH
14796: LD_INT 5
14798: PUSH
14799: LD_INT 21
14801: PUSH
14802: LD_INT 23
14804: PUSH
14805: LD_INT 22
14807: PUSH
14808: LD_INT 24
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: ST_TO_ADDR
14826: GO 14887
14828: LD_INT 3
14830: DOUBLE
14831: EQUAL
14832: IFTRUE 14836
14834: GO 14886
14836: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14837: LD_ADDR_VAR 0 3
14841: PUSH
14842: LD_INT 13
14844: PUSH
14845: LD_INT 14
14847: PUSH
14848: LD_INT 2
14850: PUSH
14851: LD_INT 3
14853: PUSH
14854: LD_INT 4
14856: PUSH
14857: LD_INT 5
14859: PUSH
14860: LD_INT 21
14862: PUSH
14863: LD_INT 22
14865: PUSH
14866: LD_INT 23
14868: PUSH
14869: LD_INT 24
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: ST_TO_ADDR
14884: GO 14887
14886: POP
// result := ( chassis in result ) ;
14887: LD_ADDR_VAR 0 3
14891: PUSH
14892: LD_VAR 0 1
14896: PUSH
14897: LD_VAR 0 3
14901: IN
14902: ST_TO_ADDR
// end ;
14903: LD_VAR 0 3
14907: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
14908: LD_INT 0
14910: PPUSH
// if not chassis or not weapon then
14911: LD_VAR 0 1
14915: NOT
14916: PUSH
14917: LD_VAR 0 2
14921: NOT
14922: OR
14923: IFFALSE 14927
// exit ;
14925: GO 15989
// case weapon of us_machine_gun :
14927: LD_VAR 0 2
14931: PUSH
14932: LD_INT 2
14934: DOUBLE
14935: EQUAL
14936: IFTRUE 14940
14938: GO 14970
14940: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
14941: LD_ADDR_VAR 0 3
14945: PUSH
14946: LD_INT 1
14948: PUSH
14949: LD_INT 2
14951: PUSH
14952: LD_INT 3
14954: PUSH
14955: LD_INT 4
14957: PUSH
14958: LD_INT 5
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: ST_TO_ADDR
14968: GO 15973
14970: LD_INT 3
14972: DOUBLE
14973: EQUAL
14974: IFTRUE 14978
14976: GO 15008
14978: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
14979: LD_ADDR_VAR 0 3
14983: PUSH
14984: LD_INT 1
14986: PUSH
14987: LD_INT 2
14989: PUSH
14990: LD_INT 3
14992: PUSH
14993: LD_INT 4
14995: PUSH
14996: LD_INT 5
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: ST_TO_ADDR
15006: GO 15973
15008: LD_INT 11
15010: DOUBLE
15011: EQUAL
15012: IFTRUE 15016
15014: GO 15046
15016: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
15017: LD_ADDR_VAR 0 3
15021: PUSH
15022: LD_INT 1
15024: PUSH
15025: LD_INT 2
15027: PUSH
15028: LD_INT 3
15030: PUSH
15031: LD_INT 4
15033: PUSH
15034: LD_INT 5
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: ST_TO_ADDR
15044: GO 15973
15046: LD_INT 4
15048: DOUBLE
15049: EQUAL
15050: IFTRUE 15054
15052: GO 15080
15054: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
15055: LD_ADDR_VAR 0 3
15059: PUSH
15060: LD_INT 2
15062: PUSH
15063: LD_INT 3
15065: PUSH
15066: LD_INT 4
15068: PUSH
15069: LD_INT 5
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: ST_TO_ADDR
15078: GO 15973
15080: LD_INT 5
15082: DOUBLE
15083: EQUAL
15084: IFTRUE 15088
15086: GO 15114
15088: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
15089: LD_ADDR_VAR 0 3
15093: PUSH
15094: LD_INT 2
15096: PUSH
15097: LD_INT 3
15099: PUSH
15100: LD_INT 4
15102: PUSH
15103: LD_INT 5
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: ST_TO_ADDR
15112: GO 15973
15114: LD_INT 9
15116: DOUBLE
15117: EQUAL
15118: IFTRUE 15122
15120: GO 15148
15122: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
15123: LD_ADDR_VAR 0 3
15127: PUSH
15128: LD_INT 2
15130: PUSH
15131: LD_INT 3
15133: PUSH
15134: LD_INT 4
15136: PUSH
15137: LD_INT 5
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: ST_TO_ADDR
15146: GO 15973
15148: LD_INT 7
15150: DOUBLE
15151: EQUAL
15152: IFTRUE 15156
15154: GO 15182
15156: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
15157: LD_ADDR_VAR 0 3
15161: PUSH
15162: LD_INT 2
15164: PUSH
15165: LD_INT 3
15167: PUSH
15168: LD_INT 4
15170: PUSH
15171: LD_INT 5
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: ST_TO_ADDR
15180: GO 15973
15182: LD_INT 12
15184: DOUBLE
15185: EQUAL
15186: IFTRUE 15190
15188: GO 15216
15190: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
15191: LD_ADDR_VAR 0 3
15195: PUSH
15196: LD_INT 2
15198: PUSH
15199: LD_INT 3
15201: PUSH
15202: LD_INT 4
15204: PUSH
15205: LD_INT 5
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: ST_TO_ADDR
15214: GO 15973
15216: LD_INT 13
15218: DOUBLE
15219: EQUAL
15220: IFTRUE 15224
15222: GO 15250
15224: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
15225: LD_ADDR_VAR 0 3
15229: PUSH
15230: LD_INT 2
15232: PUSH
15233: LD_INT 3
15235: PUSH
15236: LD_INT 4
15238: PUSH
15239: LD_INT 5
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: ST_TO_ADDR
15248: GO 15973
15250: LD_INT 14
15252: DOUBLE
15253: EQUAL
15254: IFTRUE 15258
15256: GO 15276
15258: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
15259: LD_ADDR_VAR 0 3
15263: PUSH
15264: LD_INT 4
15266: PUSH
15267: LD_INT 5
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: ST_TO_ADDR
15274: GO 15973
15276: LD_INT 6
15278: DOUBLE
15279: EQUAL
15280: IFTRUE 15284
15282: GO 15302
15284: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
15285: LD_ADDR_VAR 0 3
15289: PUSH
15290: LD_INT 4
15292: PUSH
15293: LD_INT 5
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: ST_TO_ADDR
15300: GO 15973
15302: LD_INT 10
15304: DOUBLE
15305: EQUAL
15306: IFTRUE 15310
15308: GO 15328
15310: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
15311: LD_ADDR_VAR 0 3
15315: PUSH
15316: LD_INT 4
15318: PUSH
15319: LD_INT 5
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: ST_TO_ADDR
15326: GO 15973
15328: LD_INT 22
15330: DOUBLE
15331: EQUAL
15332: IFTRUE 15336
15334: GO 15362
15336: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
15337: LD_ADDR_VAR 0 3
15341: PUSH
15342: LD_INT 11
15344: PUSH
15345: LD_INT 12
15347: PUSH
15348: LD_INT 13
15350: PUSH
15351: LD_INT 14
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: ST_TO_ADDR
15360: GO 15973
15362: LD_INT 23
15364: DOUBLE
15365: EQUAL
15366: IFTRUE 15370
15368: GO 15396
15370: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
15371: LD_ADDR_VAR 0 3
15375: PUSH
15376: LD_INT 11
15378: PUSH
15379: LD_INT 12
15381: PUSH
15382: LD_INT 13
15384: PUSH
15385: LD_INT 14
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: ST_TO_ADDR
15394: GO 15973
15396: LD_INT 24
15398: DOUBLE
15399: EQUAL
15400: IFTRUE 15404
15402: GO 15430
15404: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
15405: LD_ADDR_VAR 0 3
15409: PUSH
15410: LD_INT 11
15412: PUSH
15413: LD_INT 12
15415: PUSH
15416: LD_INT 13
15418: PUSH
15419: LD_INT 14
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: ST_TO_ADDR
15428: GO 15973
15430: LD_INT 30
15432: DOUBLE
15433: EQUAL
15434: IFTRUE 15438
15436: GO 15464
15438: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
15439: LD_ADDR_VAR 0 3
15443: PUSH
15444: LD_INT 11
15446: PUSH
15447: LD_INT 12
15449: PUSH
15450: LD_INT 13
15452: PUSH
15453: LD_INT 14
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: ST_TO_ADDR
15462: GO 15973
15464: LD_INT 25
15466: DOUBLE
15467: EQUAL
15468: IFTRUE 15472
15470: GO 15490
15472: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
15473: LD_ADDR_VAR 0 3
15477: PUSH
15478: LD_INT 13
15480: PUSH
15481: LD_INT 14
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: ST_TO_ADDR
15488: GO 15973
15490: LD_INT 27
15492: DOUBLE
15493: EQUAL
15494: IFTRUE 15498
15496: GO 15516
15498: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
15499: LD_ADDR_VAR 0 3
15503: PUSH
15504: LD_INT 13
15506: PUSH
15507: LD_INT 14
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: ST_TO_ADDR
15514: GO 15973
15516: LD_EXP 43
15520: DOUBLE
15521: EQUAL
15522: IFTRUE 15526
15524: GO 15552
15526: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
15527: LD_ADDR_VAR 0 3
15531: PUSH
15532: LD_INT 11
15534: PUSH
15535: LD_INT 12
15537: PUSH
15538: LD_INT 13
15540: PUSH
15541: LD_INT 14
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: ST_TO_ADDR
15550: GO 15973
15552: LD_INT 28
15554: DOUBLE
15555: EQUAL
15556: IFTRUE 15560
15558: GO 15578
15560: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
15561: LD_ADDR_VAR 0 3
15565: PUSH
15566: LD_INT 13
15568: PUSH
15569: LD_INT 14
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: ST_TO_ADDR
15576: GO 15973
15578: LD_INT 29
15580: DOUBLE
15581: EQUAL
15582: IFTRUE 15586
15584: GO 15604
15586: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
15587: LD_ADDR_VAR 0 3
15591: PUSH
15592: LD_INT 13
15594: PUSH
15595: LD_INT 14
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: ST_TO_ADDR
15602: GO 15973
15604: LD_INT 31
15606: DOUBLE
15607: EQUAL
15608: IFTRUE 15612
15610: GO 15630
15612: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
15613: LD_ADDR_VAR 0 3
15617: PUSH
15618: LD_INT 13
15620: PUSH
15621: LD_INT 14
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: ST_TO_ADDR
15628: GO 15973
15630: LD_INT 26
15632: DOUBLE
15633: EQUAL
15634: IFTRUE 15638
15636: GO 15656
15638: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
15639: LD_ADDR_VAR 0 3
15643: PUSH
15644: LD_INT 13
15646: PUSH
15647: LD_INT 14
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: ST_TO_ADDR
15654: GO 15973
15656: LD_INT 42
15658: DOUBLE
15659: EQUAL
15660: IFTRUE 15664
15662: GO 15690
15664: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
15665: LD_ADDR_VAR 0 3
15669: PUSH
15670: LD_INT 21
15672: PUSH
15673: LD_INT 22
15675: PUSH
15676: LD_INT 23
15678: PUSH
15679: LD_INT 24
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: ST_TO_ADDR
15688: GO 15973
15690: LD_INT 43
15692: DOUBLE
15693: EQUAL
15694: IFTRUE 15698
15696: GO 15724
15698: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
15699: LD_ADDR_VAR 0 3
15703: PUSH
15704: LD_INT 21
15706: PUSH
15707: LD_INT 22
15709: PUSH
15710: LD_INT 23
15712: PUSH
15713: LD_INT 24
15715: PUSH
15716: EMPTY
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: ST_TO_ADDR
15722: GO 15973
15724: LD_INT 44
15726: DOUBLE
15727: EQUAL
15728: IFTRUE 15732
15730: GO 15758
15732: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
15733: LD_ADDR_VAR 0 3
15737: PUSH
15738: LD_INT 21
15740: PUSH
15741: LD_INT 22
15743: PUSH
15744: LD_INT 23
15746: PUSH
15747: LD_INT 24
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: ST_TO_ADDR
15756: GO 15973
15758: LD_INT 45
15760: DOUBLE
15761: EQUAL
15762: IFTRUE 15766
15764: GO 15792
15766: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
15767: LD_ADDR_VAR 0 3
15771: PUSH
15772: LD_INT 21
15774: PUSH
15775: LD_INT 22
15777: PUSH
15778: LD_INT 23
15780: PUSH
15781: LD_INT 24
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: ST_TO_ADDR
15790: GO 15973
15792: LD_INT 49
15794: DOUBLE
15795: EQUAL
15796: IFTRUE 15800
15798: GO 15826
15800: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
15801: LD_ADDR_VAR 0 3
15805: PUSH
15806: LD_INT 21
15808: PUSH
15809: LD_INT 22
15811: PUSH
15812: LD_INT 23
15814: PUSH
15815: LD_INT 24
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: ST_TO_ADDR
15824: GO 15973
15826: LD_INT 51
15828: DOUBLE
15829: EQUAL
15830: IFTRUE 15834
15832: GO 15860
15834: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
15835: LD_ADDR_VAR 0 3
15839: PUSH
15840: LD_INT 21
15842: PUSH
15843: LD_INT 22
15845: PUSH
15846: LD_INT 23
15848: PUSH
15849: LD_INT 24
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: ST_TO_ADDR
15858: GO 15973
15860: LD_INT 52
15862: DOUBLE
15863: EQUAL
15864: IFTRUE 15868
15866: GO 15894
15868: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
15869: LD_ADDR_VAR 0 3
15873: PUSH
15874: LD_INT 21
15876: PUSH
15877: LD_INT 22
15879: PUSH
15880: LD_INT 23
15882: PUSH
15883: LD_INT 24
15885: PUSH
15886: EMPTY
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: ST_TO_ADDR
15892: GO 15973
15894: LD_INT 53
15896: DOUBLE
15897: EQUAL
15898: IFTRUE 15902
15900: GO 15920
15902: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
15903: LD_ADDR_VAR 0 3
15907: PUSH
15908: LD_INT 23
15910: PUSH
15911: LD_INT 24
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: ST_TO_ADDR
15918: GO 15973
15920: LD_INT 46
15922: DOUBLE
15923: EQUAL
15924: IFTRUE 15928
15926: GO 15946
15928: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
15929: LD_ADDR_VAR 0 3
15933: PUSH
15934: LD_INT 23
15936: PUSH
15937: LD_INT 24
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: ST_TO_ADDR
15944: GO 15973
15946: LD_INT 47
15948: DOUBLE
15949: EQUAL
15950: IFTRUE 15954
15952: GO 15972
15954: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15955: LD_ADDR_VAR 0 3
15959: PUSH
15960: LD_INT 23
15962: PUSH
15963: LD_INT 24
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: ST_TO_ADDR
15970: GO 15973
15972: POP
// result := ( chassis in result ) ;
15973: LD_ADDR_VAR 0 3
15977: PUSH
15978: LD_VAR 0 1
15982: PUSH
15983: LD_VAR 0 3
15987: IN
15988: ST_TO_ADDR
// end ;
15989: LD_VAR 0 3
15993: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
15994: LD_INT 0
15996: PPUSH
15997: PPUSH
15998: PPUSH
15999: PPUSH
16000: PPUSH
16001: PPUSH
16002: PPUSH
// result := array ;
16003: LD_ADDR_VAR 0 5
16007: PUSH
16008: LD_VAR 0 1
16012: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
16013: LD_VAR 0 1
16017: NOT
16018: PUSH
16019: LD_VAR 0 2
16023: NOT
16024: OR
16025: PUSH
16026: LD_VAR 0 3
16030: NOT
16031: OR
16032: PUSH
16033: LD_VAR 0 2
16037: PUSH
16038: LD_VAR 0 1
16042: GREATER
16043: OR
16044: PUSH
16045: LD_VAR 0 3
16049: PUSH
16050: LD_VAR 0 1
16054: GREATER
16055: OR
16056: IFFALSE 16060
// exit ;
16058: GO 16356
// if direction then
16060: LD_VAR 0 4
16064: IFFALSE 16128
// begin d := 1 ;
16066: LD_ADDR_VAR 0 9
16070: PUSH
16071: LD_INT 1
16073: ST_TO_ADDR
// if i_from > i_to then
16074: LD_VAR 0 2
16078: PUSH
16079: LD_VAR 0 3
16083: GREATER
16084: IFFALSE 16110
// length := ( array - i_from ) + i_to else
16086: LD_ADDR_VAR 0 11
16090: PUSH
16091: LD_VAR 0 1
16095: PUSH
16096: LD_VAR 0 2
16100: MINUS
16101: PUSH
16102: LD_VAR 0 3
16106: PLUS
16107: ST_TO_ADDR
16108: GO 16126
// length := i_to - i_from ;
16110: LD_ADDR_VAR 0 11
16114: PUSH
16115: LD_VAR 0 3
16119: PUSH
16120: LD_VAR 0 2
16124: MINUS
16125: ST_TO_ADDR
// end else
16126: GO 16189
// begin d := - 1 ;
16128: LD_ADDR_VAR 0 9
16132: PUSH
16133: LD_INT 1
16135: NEG
16136: ST_TO_ADDR
// if i_from > i_to then
16137: LD_VAR 0 2
16141: PUSH
16142: LD_VAR 0 3
16146: GREATER
16147: IFFALSE 16167
// length := i_from - i_to else
16149: LD_ADDR_VAR 0 11
16153: PUSH
16154: LD_VAR 0 2
16158: PUSH
16159: LD_VAR 0 3
16163: MINUS
16164: ST_TO_ADDR
16165: GO 16189
// length := ( array - i_to ) + i_from ;
16167: LD_ADDR_VAR 0 11
16171: PUSH
16172: LD_VAR 0 1
16176: PUSH
16177: LD_VAR 0 3
16181: MINUS
16182: PUSH
16183: LD_VAR 0 2
16187: PLUS
16188: ST_TO_ADDR
// end ; if not length then
16189: LD_VAR 0 11
16193: NOT
16194: IFFALSE 16198
// exit ;
16196: GO 16356
// tmp := array ;
16198: LD_ADDR_VAR 0 10
16202: PUSH
16203: LD_VAR 0 1
16207: ST_TO_ADDR
// for i = 1 to length do
16208: LD_ADDR_VAR 0 6
16212: PUSH
16213: DOUBLE
16214: LD_INT 1
16216: DEC
16217: ST_TO_ADDR
16218: LD_VAR 0 11
16222: PUSH
16223: FOR_TO
16224: IFFALSE 16344
// begin for j = 1 to array do
16226: LD_ADDR_VAR 0 7
16230: PUSH
16231: DOUBLE
16232: LD_INT 1
16234: DEC
16235: ST_TO_ADDR
16236: LD_VAR 0 1
16240: PUSH
16241: FOR_TO
16242: IFFALSE 16330
// begin k := j + d ;
16244: LD_ADDR_VAR 0 8
16248: PUSH
16249: LD_VAR 0 7
16253: PUSH
16254: LD_VAR 0 9
16258: PLUS
16259: ST_TO_ADDR
// if k > array then
16260: LD_VAR 0 8
16264: PUSH
16265: LD_VAR 0 1
16269: GREATER
16270: IFFALSE 16280
// k := 1 ;
16272: LD_ADDR_VAR 0 8
16276: PUSH
16277: LD_INT 1
16279: ST_TO_ADDR
// if not k then
16280: LD_VAR 0 8
16284: NOT
16285: IFFALSE 16297
// k := array ;
16287: LD_ADDR_VAR 0 8
16291: PUSH
16292: LD_VAR 0 1
16296: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
16297: LD_ADDR_VAR 0 10
16301: PUSH
16302: LD_VAR 0 10
16306: PPUSH
16307: LD_VAR 0 8
16311: PPUSH
16312: LD_VAR 0 1
16316: PUSH
16317: LD_VAR 0 7
16321: ARRAY
16322: PPUSH
16323: CALL_OW 1
16327: ST_TO_ADDR
// end ;
16328: GO 16241
16330: POP
16331: POP
// array := tmp ;
16332: LD_ADDR_VAR 0 1
16336: PUSH
16337: LD_VAR 0 10
16341: ST_TO_ADDR
// end ;
16342: GO 16223
16344: POP
16345: POP
// result := array ;
16346: LD_ADDR_VAR 0 5
16350: PUSH
16351: LD_VAR 0 1
16355: ST_TO_ADDR
// end ;
16356: LD_VAR 0 5
16360: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
16361: LD_INT 0
16363: PPUSH
16364: PPUSH
// result := 0 ;
16365: LD_ADDR_VAR 0 3
16369: PUSH
16370: LD_INT 0
16372: ST_TO_ADDR
// if not array or not value in array then
16373: LD_VAR 0 1
16377: NOT
16378: PUSH
16379: LD_VAR 0 2
16383: PUSH
16384: LD_VAR 0 1
16388: IN
16389: NOT
16390: OR
16391: IFFALSE 16395
// exit ;
16393: GO 16449
// for i = 1 to array do
16395: LD_ADDR_VAR 0 4
16399: PUSH
16400: DOUBLE
16401: LD_INT 1
16403: DEC
16404: ST_TO_ADDR
16405: LD_VAR 0 1
16409: PUSH
16410: FOR_TO
16411: IFFALSE 16447
// if value = array [ i ] then
16413: LD_VAR 0 2
16417: PUSH
16418: LD_VAR 0 1
16422: PUSH
16423: LD_VAR 0 4
16427: ARRAY
16428: EQUAL
16429: IFFALSE 16445
// begin result := i ;
16431: LD_ADDR_VAR 0 3
16435: PUSH
16436: LD_VAR 0 4
16440: ST_TO_ADDR
// exit ;
16441: POP
16442: POP
16443: GO 16449
// end ;
16445: GO 16410
16447: POP
16448: POP
// end ;
16449: LD_VAR 0 3
16453: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
16454: LD_INT 0
16456: PPUSH
// vc_chassis := chassis ;
16457: LD_ADDR_OWVAR 37
16461: PUSH
16462: LD_VAR 0 1
16466: ST_TO_ADDR
// vc_engine := engine ;
16467: LD_ADDR_OWVAR 39
16471: PUSH
16472: LD_VAR 0 2
16476: ST_TO_ADDR
// vc_control := control ;
16477: LD_ADDR_OWVAR 38
16481: PUSH
16482: LD_VAR 0 3
16486: ST_TO_ADDR
// vc_weapon := weapon ;
16487: LD_ADDR_OWVAR 40
16491: PUSH
16492: LD_VAR 0 4
16496: ST_TO_ADDR
// vc_fuel_battery := fuel ;
16497: LD_ADDR_OWVAR 41
16501: PUSH
16502: LD_VAR 0 5
16506: ST_TO_ADDR
// end ;
16507: LD_VAR 0 6
16511: RET
// export function WantPlant ( unit ) ; var task ; begin
16512: LD_INT 0
16514: PPUSH
16515: PPUSH
// result := false ;
16516: LD_ADDR_VAR 0 2
16520: PUSH
16521: LD_INT 0
16523: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
16524: LD_ADDR_VAR 0 3
16528: PUSH
16529: LD_VAR 0 1
16533: PPUSH
16534: CALL_OW 437
16538: ST_TO_ADDR
// if task then
16539: LD_VAR 0 3
16543: IFFALSE 16571
// if task [ 1 ] [ 1 ] = p then
16545: LD_VAR 0 3
16549: PUSH
16550: LD_INT 1
16552: ARRAY
16553: PUSH
16554: LD_INT 1
16556: ARRAY
16557: PUSH
16558: LD_STRING p
16560: EQUAL
16561: IFFALSE 16571
// result := true ;
16563: LD_ADDR_VAR 0 2
16567: PUSH
16568: LD_INT 1
16570: ST_TO_ADDR
// end ;
16571: LD_VAR 0 2
16575: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
16576: LD_INT 0
16578: PPUSH
16579: PPUSH
16580: PPUSH
16581: PPUSH
// if pos < 1 then
16582: LD_VAR 0 2
16586: PUSH
16587: LD_INT 1
16589: LESS
16590: IFFALSE 16594
// exit ;
16592: GO 16897
// if pos = 1 then
16594: LD_VAR 0 2
16598: PUSH
16599: LD_INT 1
16601: EQUAL
16602: IFFALSE 16635
// result := Replace ( arr , pos [ 1 ] , value ) else
16604: LD_ADDR_VAR 0 4
16608: PUSH
16609: LD_VAR 0 1
16613: PPUSH
16614: LD_VAR 0 2
16618: PUSH
16619: LD_INT 1
16621: ARRAY
16622: PPUSH
16623: LD_VAR 0 3
16627: PPUSH
16628: CALL_OW 1
16632: ST_TO_ADDR
16633: GO 16897
// begin tmp := arr ;
16635: LD_ADDR_VAR 0 6
16639: PUSH
16640: LD_VAR 0 1
16644: ST_TO_ADDR
// s_arr := [ tmp ] ;
16645: LD_ADDR_VAR 0 7
16649: PUSH
16650: LD_VAR 0 6
16654: PUSH
16655: EMPTY
16656: LIST
16657: ST_TO_ADDR
// for i = 1 to pos - 1 do
16658: LD_ADDR_VAR 0 5
16662: PUSH
16663: DOUBLE
16664: LD_INT 1
16666: DEC
16667: ST_TO_ADDR
16668: LD_VAR 0 2
16672: PUSH
16673: LD_INT 1
16675: MINUS
16676: PUSH
16677: FOR_TO
16678: IFFALSE 16723
// begin tmp := tmp [ pos [ i ] ] ;
16680: LD_ADDR_VAR 0 6
16684: PUSH
16685: LD_VAR 0 6
16689: PUSH
16690: LD_VAR 0 2
16694: PUSH
16695: LD_VAR 0 5
16699: ARRAY
16700: ARRAY
16701: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
16702: LD_ADDR_VAR 0 7
16706: PUSH
16707: LD_VAR 0 7
16711: PUSH
16712: LD_VAR 0 6
16716: PUSH
16717: EMPTY
16718: LIST
16719: ADD
16720: ST_TO_ADDR
// end ;
16721: GO 16677
16723: POP
16724: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
16725: LD_ADDR_VAR 0 6
16729: PUSH
16730: LD_VAR 0 6
16734: PPUSH
16735: LD_VAR 0 2
16739: PUSH
16740: LD_VAR 0 2
16744: ARRAY
16745: PPUSH
16746: LD_VAR 0 3
16750: PPUSH
16751: CALL_OW 1
16755: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
16756: LD_ADDR_VAR 0 7
16760: PUSH
16761: LD_VAR 0 7
16765: PPUSH
16766: LD_VAR 0 7
16770: PPUSH
16771: LD_VAR 0 6
16775: PPUSH
16776: CALL_OW 1
16780: ST_TO_ADDR
// for i = s_arr downto 2 do
16781: LD_ADDR_VAR 0 5
16785: PUSH
16786: DOUBLE
16787: LD_VAR 0 7
16791: INC
16792: ST_TO_ADDR
16793: LD_INT 2
16795: PUSH
16796: FOR_DOWNTO
16797: IFFALSE 16881
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
16799: LD_ADDR_VAR 0 6
16803: PUSH
16804: LD_VAR 0 7
16808: PUSH
16809: LD_VAR 0 5
16813: PUSH
16814: LD_INT 1
16816: MINUS
16817: ARRAY
16818: PPUSH
16819: LD_VAR 0 2
16823: PUSH
16824: LD_VAR 0 5
16828: PUSH
16829: LD_INT 1
16831: MINUS
16832: ARRAY
16833: PPUSH
16834: LD_VAR 0 7
16838: PUSH
16839: LD_VAR 0 5
16843: ARRAY
16844: PPUSH
16845: CALL_OW 1
16849: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
16850: LD_ADDR_VAR 0 7
16854: PUSH
16855: LD_VAR 0 7
16859: PPUSH
16860: LD_VAR 0 5
16864: PUSH
16865: LD_INT 1
16867: MINUS
16868: PPUSH
16869: LD_VAR 0 6
16873: PPUSH
16874: CALL_OW 1
16878: ST_TO_ADDR
// end ;
16879: GO 16796
16881: POP
16882: POP
// result := s_arr [ 1 ] ;
16883: LD_ADDR_VAR 0 4
16887: PUSH
16888: LD_VAR 0 7
16892: PUSH
16893: LD_INT 1
16895: ARRAY
16896: ST_TO_ADDR
// end ; end ;
16897: LD_VAR 0 4
16901: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
16902: LD_INT 0
16904: PPUSH
16905: PPUSH
// if not list then
16906: LD_VAR 0 1
16910: NOT
16911: IFFALSE 16915
// exit ;
16913: GO 17006
// i := list [ pos1 ] ;
16915: LD_ADDR_VAR 0 5
16919: PUSH
16920: LD_VAR 0 1
16924: PUSH
16925: LD_VAR 0 2
16929: ARRAY
16930: ST_TO_ADDR
// if not i then
16931: LD_VAR 0 5
16935: NOT
16936: IFFALSE 16940
// exit ;
16938: GO 17006
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
16940: LD_ADDR_VAR 0 1
16944: PUSH
16945: LD_VAR 0 1
16949: PPUSH
16950: LD_VAR 0 2
16954: PPUSH
16955: LD_VAR 0 1
16959: PUSH
16960: LD_VAR 0 3
16964: ARRAY
16965: PPUSH
16966: CALL_OW 1
16970: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
16971: LD_ADDR_VAR 0 1
16975: PUSH
16976: LD_VAR 0 1
16980: PPUSH
16981: LD_VAR 0 3
16985: PPUSH
16986: LD_VAR 0 5
16990: PPUSH
16991: CALL_OW 1
16995: ST_TO_ADDR
// result := list ;
16996: LD_ADDR_VAR 0 4
17000: PUSH
17001: LD_VAR 0 1
17005: ST_TO_ADDR
// end ;
17006: LD_VAR 0 4
17010: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
17011: LD_INT 0
17013: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
17014: LD_ADDR_VAR 0 5
17018: PUSH
17019: LD_VAR 0 1
17023: PPUSH
17024: CALL_OW 250
17028: PPUSH
17029: LD_VAR 0 1
17033: PPUSH
17034: CALL_OW 251
17038: PPUSH
17039: LD_VAR 0 2
17043: PPUSH
17044: LD_VAR 0 3
17048: PPUSH
17049: LD_VAR 0 4
17053: PPUSH
17054: CALL 17064 0 5
17058: ST_TO_ADDR
// end ;
17059: LD_VAR 0 5
17063: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
17064: LD_INT 0
17066: PPUSH
17067: PPUSH
17068: PPUSH
17069: PPUSH
// if not list then
17070: LD_VAR 0 3
17074: NOT
17075: IFFALSE 17079
// exit ;
17077: GO 17467
// result := [ ] ;
17079: LD_ADDR_VAR 0 6
17083: PUSH
17084: EMPTY
17085: ST_TO_ADDR
// for i in list do
17086: LD_ADDR_VAR 0 7
17090: PUSH
17091: LD_VAR 0 3
17095: PUSH
17096: FOR_IN
17097: IFFALSE 17299
// begin tmp := GetDistUnitXY ( i , x , y ) ;
17099: LD_ADDR_VAR 0 9
17103: PUSH
17104: LD_VAR 0 7
17108: PPUSH
17109: LD_VAR 0 1
17113: PPUSH
17114: LD_VAR 0 2
17118: PPUSH
17119: CALL_OW 297
17123: ST_TO_ADDR
// if not result then
17124: LD_VAR 0 6
17128: NOT
17129: IFFALSE 17155
// result := [ [ i , tmp ] ] else
17131: LD_ADDR_VAR 0 6
17135: PUSH
17136: LD_VAR 0 7
17140: PUSH
17141: LD_VAR 0 9
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PUSH
17150: EMPTY
17151: LIST
17152: ST_TO_ADDR
17153: GO 17297
// begin if result [ result ] [ 2 ] < tmp then
17155: LD_VAR 0 6
17159: PUSH
17160: LD_VAR 0 6
17164: ARRAY
17165: PUSH
17166: LD_INT 2
17168: ARRAY
17169: PUSH
17170: LD_VAR 0 9
17174: LESS
17175: IFFALSE 17217
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
17177: LD_ADDR_VAR 0 6
17181: PUSH
17182: LD_VAR 0 6
17186: PPUSH
17187: LD_VAR 0 6
17191: PUSH
17192: LD_INT 1
17194: PLUS
17195: PPUSH
17196: LD_VAR 0 7
17200: PUSH
17201: LD_VAR 0 9
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PPUSH
17210: CALL_OW 2
17214: ST_TO_ADDR
17215: GO 17297
// for j = 1 to result do
17217: LD_ADDR_VAR 0 8
17221: PUSH
17222: DOUBLE
17223: LD_INT 1
17225: DEC
17226: ST_TO_ADDR
17227: LD_VAR 0 6
17231: PUSH
17232: FOR_TO
17233: IFFALSE 17295
// begin if tmp < result [ j ] [ 2 ] then
17235: LD_VAR 0 9
17239: PUSH
17240: LD_VAR 0 6
17244: PUSH
17245: LD_VAR 0 8
17249: ARRAY
17250: PUSH
17251: LD_INT 2
17253: ARRAY
17254: LESS
17255: IFFALSE 17293
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17257: LD_ADDR_VAR 0 6
17261: PUSH
17262: LD_VAR 0 6
17266: PPUSH
17267: LD_VAR 0 8
17271: PPUSH
17272: LD_VAR 0 7
17276: PUSH
17277: LD_VAR 0 9
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PPUSH
17286: CALL_OW 2
17290: ST_TO_ADDR
// break ;
17291: GO 17295
// end ; end ;
17293: GO 17232
17295: POP
17296: POP
// end ; end ;
17297: GO 17096
17299: POP
17300: POP
// if result and not asc then
17301: LD_VAR 0 6
17305: PUSH
17306: LD_VAR 0 4
17310: NOT
17311: AND
17312: IFFALSE 17387
// begin tmp := result ;
17314: LD_ADDR_VAR 0 9
17318: PUSH
17319: LD_VAR 0 6
17323: ST_TO_ADDR
// for i = tmp downto 1 do
17324: LD_ADDR_VAR 0 7
17328: PUSH
17329: DOUBLE
17330: LD_VAR 0 9
17334: INC
17335: ST_TO_ADDR
17336: LD_INT 1
17338: PUSH
17339: FOR_DOWNTO
17340: IFFALSE 17385
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
17342: LD_ADDR_VAR 0 6
17346: PUSH
17347: LD_VAR 0 6
17351: PPUSH
17352: LD_VAR 0 9
17356: PUSH
17357: LD_VAR 0 7
17361: MINUS
17362: PUSH
17363: LD_INT 1
17365: PLUS
17366: PPUSH
17367: LD_VAR 0 9
17371: PUSH
17372: LD_VAR 0 7
17376: ARRAY
17377: PPUSH
17378: CALL_OW 1
17382: ST_TO_ADDR
17383: GO 17339
17385: POP
17386: POP
// end ; tmp := [ ] ;
17387: LD_ADDR_VAR 0 9
17391: PUSH
17392: EMPTY
17393: ST_TO_ADDR
// if mode then
17394: LD_VAR 0 5
17398: IFFALSE 17467
// begin for i = 1 to result do
17400: LD_ADDR_VAR 0 7
17404: PUSH
17405: DOUBLE
17406: LD_INT 1
17408: DEC
17409: ST_TO_ADDR
17410: LD_VAR 0 6
17414: PUSH
17415: FOR_TO
17416: IFFALSE 17455
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
17418: LD_ADDR_VAR 0 9
17422: PUSH
17423: LD_VAR 0 9
17427: PPUSH
17428: LD_VAR 0 7
17432: PPUSH
17433: LD_VAR 0 6
17437: PUSH
17438: LD_VAR 0 7
17442: ARRAY
17443: PUSH
17444: LD_INT 1
17446: ARRAY
17447: PPUSH
17448: CALL_OW 1
17452: ST_TO_ADDR
17453: GO 17415
17455: POP
17456: POP
// result := tmp ;
17457: LD_ADDR_VAR 0 6
17461: PUSH
17462: LD_VAR 0 9
17466: ST_TO_ADDR
// end ; end ;
17467: LD_VAR 0 6
17471: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
17472: LD_INT 0
17474: PPUSH
17475: PPUSH
17476: PPUSH
17477: PPUSH
17478: PPUSH
17479: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
17480: LD_ADDR_VAR 0 5
17484: PUSH
17485: LD_INT 0
17487: PUSH
17488: LD_INT 0
17490: PUSH
17491: LD_INT 0
17493: PUSH
17494: EMPTY
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: ST_TO_ADDR
// if not x or not y then
17502: LD_VAR 0 2
17506: NOT
17507: PUSH
17508: LD_VAR 0 3
17512: NOT
17513: OR
17514: IFFALSE 17518
// exit ;
17516: GO 19170
// if not range then
17518: LD_VAR 0 4
17522: NOT
17523: IFFALSE 17533
// range := 10 ;
17525: LD_ADDR_VAR 0 4
17529: PUSH
17530: LD_INT 10
17532: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17533: LD_ADDR_VAR 0 8
17537: PUSH
17538: LD_INT 81
17540: PUSH
17541: LD_VAR 0 1
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 92
17552: PUSH
17553: LD_VAR 0 2
17557: PUSH
17558: LD_VAR 0 3
17562: PUSH
17563: LD_VAR 0 4
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 3
17576: PUSH
17577: LD_INT 21
17579: PUSH
17580: LD_INT 3
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: LIST
17595: PPUSH
17596: CALL_OW 69
17600: ST_TO_ADDR
// if not tmp then
17601: LD_VAR 0 8
17605: NOT
17606: IFFALSE 17610
// exit ;
17608: GO 19170
// for i in tmp do
17610: LD_ADDR_VAR 0 6
17614: PUSH
17615: LD_VAR 0 8
17619: PUSH
17620: FOR_IN
17621: IFFALSE 19145
// begin points := [ 0 , 0 , 0 ] ;
17623: LD_ADDR_VAR 0 9
17627: PUSH
17628: LD_INT 0
17630: PUSH
17631: LD_INT 0
17633: PUSH
17634: LD_INT 0
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: LIST
17641: ST_TO_ADDR
// bpoints := 1 ;
17642: LD_ADDR_VAR 0 10
17646: PUSH
17647: LD_INT 1
17649: ST_TO_ADDR
// case GetType ( i ) of unit_human :
17650: LD_VAR 0 6
17654: PPUSH
17655: CALL_OW 247
17659: PUSH
17660: LD_INT 1
17662: DOUBLE
17663: EQUAL
17664: IFTRUE 17668
17666: GO 18246
17668: POP
// begin if GetClass ( i ) = 1 then
17669: LD_VAR 0 6
17673: PPUSH
17674: CALL_OW 257
17678: PUSH
17679: LD_INT 1
17681: EQUAL
17682: IFFALSE 17703
// points := [ 10 , 5 , 3 ] ;
17684: LD_ADDR_VAR 0 9
17688: PUSH
17689: LD_INT 10
17691: PUSH
17692: LD_INT 5
17694: PUSH
17695: LD_INT 3
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: LIST
17702: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
17703: LD_VAR 0 6
17707: PPUSH
17708: CALL_OW 257
17712: PUSH
17713: LD_INT 2
17715: PUSH
17716: LD_INT 3
17718: PUSH
17719: LD_INT 4
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: LIST
17726: IN
17727: IFFALSE 17748
// points := [ 3 , 2 , 1 ] ;
17729: LD_ADDR_VAR 0 9
17733: PUSH
17734: LD_INT 3
17736: PUSH
17737: LD_INT 2
17739: PUSH
17740: LD_INT 1
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: LIST
17747: ST_TO_ADDR
// if GetClass ( i ) = 5 then
17748: LD_VAR 0 6
17752: PPUSH
17753: CALL_OW 257
17757: PUSH
17758: LD_INT 5
17760: EQUAL
17761: IFFALSE 17782
// points := [ 130 , 5 , 2 ] ;
17763: LD_ADDR_VAR 0 9
17767: PUSH
17768: LD_INT 130
17770: PUSH
17771: LD_INT 5
17773: PUSH
17774: LD_INT 2
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: LIST
17781: ST_TO_ADDR
// if GetClass ( i ) = 8 then
17782: LD_VAR 0 6
17786: PPUSH
17787: CALL_OW 257
17791: PUSH
17792: LD_INT 8
17794: EQUAL
17795: IFFALSE 17816
// points := [ 35 , 35 , 30 ] ;
17797: LD_ADDR_VAR 0 9
17801: PUSH
17802: LD_INT 35
17804: PUSH
17805: LD_INT 35
17807: PUSH
17808: LD_INT 30
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: LIST
17815: ST_TO_ADDR
// if GetClass ( i ) = 9 then
17816: LD_VAR 0 6
17820: PPUSH
17821: CALL_OW 257
17825: PUSH
17826: LD_INT 9
17828: EQUAL
17829: IFFALSE 17850
// points := [ 20 , 55 , 40 ] ;
17831: LD_ADDR_VAR 0 9
17835: PUSH
17836: LD_INT 20
17838: PUSH
17839: LD_INT 55
17841: PUSH
17842: LD_INT 40
17844: PUSH
17845: EMPTY
17846: LIST
17847: LIST
17848: LIST
17849: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
17850: LD_VAR 0 6
17854: PPUSH
17855: CALL_OW 257
17859: PUSH
17860: LD_INT 12
17862: PUSH
17863: LD_INT 16
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: IN
17870: IFFALSE 17891
// points := [ 5 , 3 , 2 ] ;
17872: LD_ADDR_VAR 0 9
17876: PUSH
17877: LD_INT 5
17879: PUSH
17880: LD_INT 3
17882: PUSH
17883: LD_INT 2
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: LIST
17890: ST_TO_ADDR
// if GetClass ( i ) = 17 then
17891: LD_VAR 0 6
17895: PPUSH
17896: CALL_OW 257
17900: PUSH
17901: LD_INT 17
17903: EQUAL
17904: IFFALSE 17925
// points := [ 100 , 50 , 75 ] ;
17906: LD_ADDR_VAR 0 9
17910: PUSH
17911: LD_INT 100
17913: PUSH
17914: LD_INT 50
17916: PUSH
17917: LD_INT 75
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: LIST
17924: ST_TO_ADDR
// if GetClass ( i ) = 15 then
17925: LD_VAR 0 6
17929: PPUSH
17930: CALL_OW 257
17934: PUSH
17935: LD_INT 15
17937: EQUAL
17938: IFFALSE 17959
// points := [ 10 , 5 , 3 ] ;
17940: LD_ADDR_VAR 0 9
17944: PUSH
17945: LD_INT 10
17947: PUSH
17948: LD_INT 5
17950: PUSH
17951: LD_INT 3
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: LIST
17958: ST_TO_ADDR
// if GetClass ( i ) = 14 then
17959: LD_VAR 0 6
17963: PPUSH
17964: CALL_OW 257
17968: PUSH
17969: LD_INT 14
17971: EQUAL
17972: IFFALSE 17993
// points := [ 10 , 0 , 0 ] ;
17974: LD_ADDR_VAR 0 9
17978: PUSH
17979: LD_INT 10
17981: PUSH
17982: LD_INT 0
17984: PUSH
17985: LD_INT 0
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: LIST
17992: ST_TO_ADDR
// if GetClass ( i ) = 11 then
17993: LD_VAR 0 6
17997: PPUSH
17998: CALL_OW 257
18002: PUSH
18003: LD_INT 11
18005: EQUAL
18006: IFFALSE 18027
// points := [ 30 , 10 , 5 ] ;
18008: LD_ADDR_VAR 0 9
18012: PUSH
18013: LD_INT 30
18015: PUSH
18016: LD_INT 10
18018: PUSH
18019: LD_INT 5
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: LIST
18026: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
18027: LD_VAR 0 1
18031: PPUSH
18032: LD_INT 5
18034: PPUSH
18035: CALL_OW 321
18039: PUSH
18040: LD_INT 2
18042: EQUAL
18043: IFFALSE 18060
// bpoints := bpoints * 1.8 ;
18045: LD_ADDR_VAR 0 10
18049: PUSH
18050: LD_VAR 0 10
18054: PUSH
18055: LD_REAL  1.80000000000000E+0000
18058: MUL
18059: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
18060: LD_VAR 0 6
18064: PPUSH
18065: CALL_OW 257
18069: PUSH
18070: LD_INT 1
18072: PUSH
18073: LD_INT 2
18075: PUSH
18076: LD_INT 3
18078: PUSH
18079: LD_INT 4
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: IN
18088: PUSH
18089: LD_VAR 0 1
18093: PPUSH
18094: LD_INT 51
18096: PPUSH
18097: CALL_OW 321
18101: PUSH
18102: LD_INT 2
18104: EQUAL
18105: AND
18106: IFFALSE 18123
// bpoints := bpoints * 1.2 ;
18108: LD_ADDR_VAR 0 10
18112: PUSH
18113: LD_VAR 0 10
18117: PUSH
18118: LD_REAL  1.20000000000000E+0000
18121: MUL
18122: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
18123: LD_VAR 0 6
18127: PPUSH
18128: CALL_OW 257
18132: PUSH
18133: LD_INT 5
18135: PUSH
18136: LD_INT 7
18138: PUSH
18139: LD_INT 9
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: LIST
18146: IN
18147: PUSH
18148: LD_VAR 0 1
18152: PPUSH
18153: LD_INT 52
18155: PPUSH
18156: CALL_OW 321
18160: PUSH
18161: LD_INT 2
18163: EQUAL
18164: AND
18165: IFFALSE 18182
// bpoints := bpoints * 1.5 ;
18167: LD_ADDR_VAR 0 10
18171: PUSH
18172: LD_VAR 0 10
18176: PUSH
18177: LD_REAL  1.50000000000000E+0000
18180: MUL
18181: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
18182: LD_VAR 0 1
18186: PPUSH
18187: LD_INT 66
18189: PPUSH
18190: CALL_OW 321
18194: PUSH
18195: LD_INT 2
18197: EQUAL
18198: IFFALSE 18215
// bpoints := bpoints * 1.1 ;
18200: LD_ADDR_VAR 0 10
18204: PUSH
18205: LD_VAR 0 10
18209: PUSH
18210: LD_REAL  1.10000000000000E+0000
18213: MUL
18214: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
18215: LD_ADDR_VAR 0 10
18219: PUSH
18220: LD_VAR 0 10
18224: PUSH
18225: LD_VAR 0 6
18229: PPUSH
18230: LD_INT 1
18232: PPUSH
18233: CALL_OW 259
18237: PUSH
18238: LD_REAL  1.15000000000000E+0000
18241: MUL
18242: MUL
18243: ST_TO_ADDR
// end ; unit_vehicle :
18244: GO 19074
18246: LD_INT 2
18248: DOUBLE
18249: EQUAL
18250: IFTRUE 18254
18252: GO 19062
18254: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
18255: LD_VAR 0 6
18259: PPUSH
18260: CALL_OW 264
18264: PUSH
18265: LD_INT 2
18267: PUSH
18268: LD_INT 42
18270: PUSH
18271: LD_INT 24
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: LIST
18278: IN
18279: IFFALSE 18300
// points := [ 25 , 5 , 3 ] ;
18281: LD_ADDR_VAR 0 9
18285: PUSH
18286: LD_INT 25
18288: PUSH
18289: LD_INT 5
18291: PUSH
18292: LD_INT 3
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: LIST
18299: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
18300: LD_VAR 0 6
18304: PPUSH
18305: CALL_OW 264
18309: PUSH
18310: LD_INT 4
18312: PUSH
18313: LD_INT 43
18315: PUSH
18316: LD_INT 25
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: LIST
18323: IN
18324: IFFALSE 18345
// points := [ 40 , 15 , 5 ] ;
18326: LD_ADDR_VAR 0 9
18330: PUSH
18331: LD_INT 40
18333: PUSH
18334: LD_INT 15
18336: PUSH
18337: LD_INT 5
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: LIST
18344: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
18345: LD_VAR 0 6
18349: PPUSH
18350: CALL_OW 264
18354: PUSH
18355: LD_INT 3
18357: PUSH
18358: LD_INT 23
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: IN
18365: IFFALSE 18386
// points := [ 7 , 25 , 8 ] ;
18367: LD_ADDR_VAR 0 9
18371: PUSH
18372: LD_INT 7
18374: PUSH
18375: LD_INT 25
18377: PUSH
18378: LD_INT 8
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: LIST
18385: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
18386: LD_VAR 0 6
18390: PPUSH
18391: CALL_OW 264
18395: PUSH
18396: LD_INT 5
18398: PUSH
18399: LD_INT 27
18401: PUSH
18402: LD_INT 44
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: LIST
18409: IN
18410: IFFALSE 18431
// points := [ 14 , 50 , 16 ] ;
18412: LD_ADDR_VAR 0 9
18416: PUSH
18417: LD_INT 14
18419: PUSH
18420: LD_INT 50
18422: PUSH
18423: LD_INT 16
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: LIST
18430: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
18431: LD_VAR 0 6
18435: PPUSH
18436: CALL_OW 264
18440: PUSH
18441: LD_INT 6
18443: PUSH
18444: LD_INT 46
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: IN
18451: IFFALSE 18472
// points := [ 32 , 120 , 70 ] ;
18453: LD_ADDR_VAR 0 9
18457: PUSH
18458: LD_INT 32
18460: PUSH
18461: LD_INT 120
18463: PUSH
18464: LD_INT 70
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: LIST
18471: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
18472: LD_VAR 0 6
18476: PPUSH
18477: CALL_OW 264
18481: PUSH
18482: LD_INT 7
18484: PUSH
18485: LD_INT 28
18487: PUSH
18488: LD_INT 45
18490: PUSH
18491: LD_EXP 43
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: IN
18502: IFFALSE 18523
// points := [ 35 , 20 , 45 ] ;
18504: LD_ADDR_VAR 0 9
18508: PUSH
18509: LD_INT 35
18511: PUSH
18512: LD_INT 20
18514: PUSH
18515: LD_INT 45
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: LIST
18522: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
18523: LD_VAR 0 6
18527: PPUSH
18528: CALL_OW 264
18532: PUSH
18533: LD_INT 47
18535: PUSH
18536: EMPTY
18537: LIST
18538: IN
18539: IFFALSE 18560
// points := [ 67 , 45 , 75 ] ;
18541: LD_ADDR_VAR 0 9
18545: PUSH
18546: LD_INT 67
18548: PUSH
18549: LD_INT 45
18551: PUSH
18552: LD_INT 75
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: LIST
18559: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
18560: LD_VAR 0 6
18564: PPUSH
18565: CALL_OW 264
18569: PUSH
18570: LD_INT 26
18572: PUSH
18573: EMPTY
18574: LIST
18575: IN
18576: IFFALSE 18597
// points := [ 120 , 30 , 80 ] ;
18578: LD_ADDR_VAR 0 9
18582: PUSH
18583: LD_INT 120
18585: PUSH
18586: LD_INT 30
18588: PUSH
18589: LD_INT 80
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: LIST
18596: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
18597: LD_VAR 0 6
18601: PPUSH
18602: CALL_OW 264
18606: PUSH
18607: LD_INT 22
18609: PUSH
18610: EMPTY
18611: LIST
18612: IN
18613: IFFALSE 18634
// points := [ 40 , 1 , 1 ] ;
18615: LD_ADDR_VAR 0 9
18619: PUSH
18620: LD_INT 40
18622: PUSH
18623: LD_INT 1
18625: PUSH
18626: LD_INT 1
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: LIST
18633: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
18634: LD_VAR 0 6
18638: PPUSH
18639: CALL_OW 264
18643: PUSH
18644: LD_INT 29
18646: PUSH
18647: EMPTY
18648: LIST
18649: IN
18650: IFFALSE 18671
// points := [ 70 , 200 , 400 ] ;
18652: LD_ADDR_VAR 0 9
18656: PUSH
18657: LD_INT 70
18659: PUSH
18660: LD_INT 200
18662: PUSH
18663: LD_INT 400
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: LIST
18670: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
18671: LD_VAR 0 6
18675: PPUSH
18676: CALL_OW 264
18680: PUSH
18681: LD_INT 14
18683: PUSH
18684: LD_INT 53
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: IN
18691: IFFALSE 18712
// points := [ 40 , 10 , 20 ] ;
18693: LD_ADDR_VAR 0 9
18697: PUSH
18698: LD_INT 40
18700: PUSH
18701: LD_INT 10
18703: PUSH
18704: LD_INT 20
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: LIST
18711: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
18712: LD_VAR 0 6
18716: PPUSH
18717: CALL_OW 264
18721: PUSH
18722: LD_INT 9
18724: PUSH
18725: EMPTY
18726: LIST
18727: IN
18728: IFFALSE 18749
// points := [ 5 , 70 , 20 ] ;
18730: LD_ADDR_VAR 0 9
18734: PUSH
18735: LD_INT 5
18737: PUSH
18738: LD_INT 70
18740: PUSH
18741: LD_INT 20
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: LIST
18748: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
18749: LD_VAR 0 6
18753: PPUSH
18754: CALL_OW 264
18758: PUSH
18759: LD_INT 10
18761: PUSH
18762: EMPTY
18763: LIST
18764: IN
18765: IFFALSE 18786
// points := [ 35 , 110 , 70 ] ;
18767: LD_ADDR_VAR 0 9
18771: PUSH
18772: LD_INT 35
18774: PUSH
18775: LD_INT 110
18777: PUSH
18778: LD_INT 70
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: LIST
18785: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
18786: LD_VAR 0 6
18790: PPUSH
18791: CALL_OW 265
18795: PUSH
18796: LD_INT 25
18798: EQUAL
18799: IFFALSE 18820
// points := [ 80 , 65 , 100 ] ;
18801: LD_ADDR_VAR 0 9
18805: PUSH
18806: LD_INT 80
18808: PUSH
18809: LD_INT 65
18811: PUSH
18812: LD_INT 100
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: LIST
18819: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
18820: LD_VAR 0 6
18824: PPUSH
18825: CALL_OW 263
18829: PUSH
18830: LD_INT 1
18832: EQUAL
18833: IFFALSE 18868
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
18835: LD_ADDR_VAR 0 10
18839: PUSH
18840: LD_VAR 0 10
18844: PUSH
18845: LD_VAR 0 6
18849: PPUSH
18850: CALL_OW 311
18854: PPUSH
18855: LD_INT 3
18857: PPUSH
18858: CALL_OW 259
18862: PUSH
18863: LD_INT 4
18865: MUL
18866: MUL
18867: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
18868: LD_VAR 0 6
18872: PPUSH
18873: CALL_OW 263
18877: PUSH
18878: LD_INT 2
18880: EQUAL
18881: IFFALSE 18932
// begin j := IsControledBy ( i ) ;
18883: LD_ADDR_VAR 0 7
18887: PUSH
18888: LD_VAR 0 6
18892: PPUSH
18893: CALL_OW 312
18897: ST_TO_ADDR
// if j then
18898: LD_VAR 0 7
18902: IFFALSE 18932
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
18904: LD_ADDR_VAR 0 10
18908: PUSH
18909: LD_VAR 0 10
18913: PUSH
18914: LD_VAR 0 7
18918: PPUSH
18919: LD_INT 3
18921: PPUSH
18922: CALL_OW 259
18926: PUSH
18927: LD_INT 3
18929: MUL
18930: MUL
18931: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
18932: LD_VAR 0 6
18936: PPUSH
18937: CALL_OW 264
18941: PUSH
18942: LD_INT 5
18944: PUSH
18945: LD_INT 6
18947: PUSH
18948: LD_INT 46
18950: PUSH
18951: LD_INT 44
18953: PUSH
18954: LD_INT 47
18956: PUSH
18957: LD_INT 45
18959: PUSH
18960: LD_INT 28
18962: PUSH
18963: LD_INT 7
18965: PUSH
18966: LD_INT 27
18968: PUSH
18969: LD_INT 29
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: IN
18984: PUSH
18985: LD_VAR 0 1
18989: PPUSH
18990: LD_INT 52
18992: PPUSH
18993: CALL_OW 321
18997: PUSH
18998: LD_INT 2
19000: EQUAL
19001: AND
19002: IFFALSE 19019
// bpoints := bpoints * 1.2 ;
19004: LD_ADDR_VAR 0 10
19008: PUSH
19009: LD_VAR 0 10
19013: PUSH
19014: LD_REAL  1.20000000000000E+0000
19017: MUL
19018: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
19019: LD_VAR 0 6
19023: PPUSH
19024: CALL_OW 264
19028: PUSH
19029: LD_INT 6
19031: PUSH
19032: LD_INT 46
19034: PUSH
19035: LD_INT 47
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: LIST
19042: IN
19043: IFFALSE 19060
// bpoints := bpoints * 1.2 ;
19045: LD_ADDR_VAR 0 10
19049: PUSH
19050: LD_VAR 0 10
19054: PUSH
19055: LD_REAL  1.20000000000000E+0000
19058: MUL
19059: ST_TO_ADDR
// end ; unit_building :
19060: GO 19074
19062: LD_INT 3
19064: DOUBLE
19065: EQUAL
19066: IFTRUE 19070
19068: GO 19073
19070: POP
// ; end ;
19071: GO 19074
19073: POP
// for j = 1 to 3 do
19074: LD_ADDR_VAR 0 7
19078: PUSH
19079: DOUBLE
19080: LD_INT 1
19082: DEC
19083: ST_TO_ADDR
19084: LD_INT 3
19086: PUSH
19087: FOR_TO
19088: IFFALSE 19141
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
19090: LD_ADDR_VAR 0 5
19094: PUSH
19095: LD_VAR 0 5
19099: PPUSH
19100: LD_VAR 0 7
19104: PPUSH
19105: LD_VAR 0 5
19109: PUSH
19110: LD_VAR 0 7
19114: ARRAY
19115: PUSH
19116: LD_VAR 0 9
19120: PUSH
19121: LD_VAR 0 7
19125: ARRAY
19126: PUSH
19127: LD_VAR 0 10
19131: MUL
19132: PLUS
19133: PPUSH
19134: CALL_OW 1
19138: ST_TO_ADDR
19139: GO 19087
19141: POP
19142: POP
// end ;
19143: GO 17620
19145: POP
19146: POP
// result := Replace ( result , 4 , tmp ) ;
19147: LD_ADDR_VAR 0 5
19151: PUSH
19152: LD_VAR 0 5
19156: PPUSH
19157: LD_INT 4
19159: PPUSH
19160: LD_VAR 0 8
19164: PPUSH
19165: CALL_OW 1
19169: ST_TO_ADDR
// end ;
19170: LD_VAR 0 5
19174: RET
// export function DangerAtRange ( unit , range ) ; begin
19175: LD_INT 0
19177: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
19178: LD_ADDR_VAR 0 3
19182: PUSH
19183: LD_VAR 0 1
19187: PPUSH
19188: CALL_OW 255
19192: PPUSH
19193: LD_VAR 0 1
19197: PPUSH
19198: CALL_OW 250
19202: PPUSH
19203: LD_VAR 0 1
19207: PPUSH
19208: CALL_OW 251
19212: PPUSH
19213: LD_VAR 0 2
19217: PPUSH
19218: CALL 17472 0 4
19222: ST_TO_ADDR
// end ;
19223: LD_VAR 0 3
19227: RET
// export function DangerInArea ( side , area ) ; begin
19228: LD_INT 0
19230: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
19231: LD_ADDR_VAR 0 3
19235: PUSH
19236: LD_VAR 0 2
19240: PPUSH
19241: LD_INT 81
19243: PUSH
19244: LD_VAR 0 1
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PPUSH
19253: CALL_OW 70
19257: ST_TO_ADDR
// end ;
19258: LD_VAR 0 3
19262: RET
// export function IsExtension ( b ) ; begin
19263: LD_INT 0
19265: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
19266: LD_ADDR_VAR 0 2
19270: PUSH
19271: LD_VAR 0 1
19275: PUSH
19276: LD_INT 23
19278: PUSH
19279: LD_INT 20
19281: PUSH
19282: LD_INT 22
19284: PUSH
19285: LD_INT 17
19287: PUSH
19288: LD_INT 24
19290: PUSH
19291: LD_INT 21
19293: PUSH
19294: LD_INT 19
19296: PUSH
19297: LD_INT 16
19299: PUSH
19300: LD_INT 25
19302: PUSH
19303: LD_INT 18
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: IN
19318: ST_TO_ADDR
// end ;
19319: LD_VAR 0 2
19323: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
19324: LD_INT 0
19326: PPUSH
19327: PPUSH
19328: PPUSH
// result := [ ] ;
19329: LD_ADDR_VAR 0 4
19333: PUSH
19334: EMPTY
19335: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
19336: LD_ADDR_VAR 0 5
19340: PUSH
19341: LD_VAR 0 2
19345: PPUSH
19346: LD_INT 21
19348: PUSH
19349: LD_INT 3
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PPUSH
19356: CALL_OW 70
19360: ST_TO_ADDR
// if not tmp then
19361: LD_VAR 0 5
19365: NOT
19366: IFFALSE 19370
// exit ;
19368: GO 19434
// if checkLink then
19370: LD_VAR 0 3
19374: IFFALSE 19424
// begin for i in tmp do
19376: LD_ADDR_VAR 0 6
19380: PUSH
19381: LD_VAR 0 5
19385: PUSH
19386: FOR_IN
19387: IFFALSE 19422
// if GetBase ( i ) <> base then
19389: LD_VAR 0 6
19393: PPUSH
19394: CALL_OW 274
19398: PUSH
19399: LD_VAR 0 1
19403: NONEQUAL
19404: IFFALSE 19420
// ComLinkToBase ( base , i ) ;
19406: LD_VAR 0 1
19410: PPUSH
19411: LD_VAR 0 6
19415: PPUSH
19416: CALL_OW 169
19420: GO 19386
19422: POP
19423: POP
// end ; result := tmp ;
19424: LD_ADDR_VAR 0 4
19428: PUSH
19429: LD_VAR 0 5
19433: ST_TO_ADDR
// end ;
19434: LD_VAR 0 4
19438: RET
// export function ComComplete ( units , b ) ; var i ; begin
19439: LD_INT 0
19441: PPUSH
19442: PPUSH
// if not units then
19443: LD_VAR 0 1
19447: NOT
19448: IFFALSE 19452
// exit ;
19450: GO 19542
// for i in units do
19452: LD_ADDR_VAR 0 4
19456: PUSH
19457: LD_VAR 0 1
19461: PUSH
19462: FOR_IN
19463: IFFALSE 19540
// if BuildingStatus ( b ) = bs_build then
19465: LD_VAR 0 2
19469: PPUSH
19470: CALL_OW 461
19474: PUSH
19475: LD_INT 1
19477: EQUAL
19478: IFFALSE 19538
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
19480: LD_VAR 0 4
19484: PPUSH
19485: LD_STRING h
19487: PUSH
19488: LD_VAR 0 2
19492: PPUSH
19493: CALL_OW 250
19497: PUSH
19498: LD_VAR 0 2
19502: PPUSH
19503: CALL_OW 251
19507: PUSH
19508: LD_VAR 0 2
19512: PUSH
19513: LD_INT 0
19515: PUSH
19516: LD_INT 0
19518: PUSH
19519: LD_INT 0
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: PUSH
19531: EMPTY
19532: LIST
19533: PPUSH
19534: CALL_OW 446
19538: GO 19462
19540: POP
19541: POP
// end ;
19542: LD_VAR 0 3
19546: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
19547: LD_INT 0
19549: PPUSH
19550: PPUSH
19551: PPUSH
19552: PPUSH
19553: PPUSH
19554: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
19555: LD_VAR 0 1
19559: NOT
19560: PUSH
19561: LD_VAR 0 1
19565: PPUSH
19566: CALL_OW 263
19570: PUSH
19571: LD_INT 2
19573: EQUAL
19574: NOT
19575: OR
19576: IFFALSE 19580
// exit ;
19578: GO 19896
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
19580: LD_ADDR_VAR 0 6
19584: PUSH
19585: LD_INT 22
19587: PUSH
19588: LD_VAR 0 1
19592: PPUSH
19593: CALL_OW 255
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 2
19604: PUSH
19605: LD_INT 30
19607: PUSH
19608: LD_INT 36
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: LD_INT 34
19617: PUSH
19618: LD_INT 31
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: LIST
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PPUSH
19634: CALL_OW 69
19638: ST_TO_ADDR
// if not tmp then
19639: LD_VAR 0 6
19643: NOT
19644: IFFALSE 19648
// exit ;
19646: GO 19896
// result := [ ] ;
19648: LD_ADDR_VAR 0 2
19652: PUSH
19653: EMPTY
19654: ST_TO_ADDR
// for i in tmp do
19655: LD_ADDR_VAR 0 3
19659: PUSH
19660: LD_VAR 0 6
19664: PUSH
19665: FOR_IN
19666: IFFALSE 19737
// begin t := UnitsInside ( i ) ;
19668: LD_ADDR_VAR 0 4
19672: PUSH
19673: LD_VAR 0 3
19677: PPUSH
19678: CALL_OW 313
19682: ST_TO_ADDR
// if t then
19683: LD_VAR 0 4
19687: IFFALSE 19735
// for j in t do
19689: LD_ADDR_VAR 0 7
19693: PUSH
19694: LD_VAR 0 4
19698: PUSH
19699: FOR_IN
19700: IFFALSE 19733
// result := Insert ( result , result + 1 , j ) ;
19702: LD_ADDR_VAR 0 2
19706: PUSH
19707: LD_VAR 0 2
19711: PPUSH
19712: LD_VAR 0 2
19716: PUSH
19717: LD_INT 1
19719: PLUS
19720: PPUSH
19721: LD_VAR 0 7
19725: PPUSH
19726: CALL_OW 2
19730: ST_TO_ADDR
19731: GO 19699
19733: POP
19734: POP
// end ;
19735: GO 19665
19737: POP
19738: POP
// if not result then
19739: LD_VAR 0 2
19743: NOT
19744: IFFALSE 19748
// exit ;
19746: GO 19896
// mech := result [ 1 ] ;
19748: LD_ADDR_VAR 0 5
19752: PUSH
19753: LD_VAR 0 2
19757: PUSH
19758: LD_INT 1
19760: ARRAY
19761: ST_TO_ADDR
// if result > 1 then
19762: LD_VAR 0 2
19766: PUSH
19767: LD_INT 1
19769: GREATER
19770: IFFALSE 19882
// for i = 2 to result do
19772: LD_ADDR_VAR 0 3
19776: PUSH
19777: DOUBLE
19778: LD_INT 2
19780: DEC
19781: ST_TO_ADDR
19782: LD_VAR 0 2
19786: PUSH
19787: FOR_TO
19788: IFFALSE 19880
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
19790: LD_ADDR_VAR 0 4
19794: PUSH
19795: LD_VAR 0 2
19799: PUSH
19800: LD_VAR 0 3
19804: ARRAY
19805: PPUSH
19806: LD_INT 3
19808: PPUSH
19809: CALL_OW 259
19813: PUSH
19814: LD_VAR 0 2
19818: PUSH
19819: LD_VAR 0 3
19823: ARRAY
19824: PPUSH
19825: CALL_OW 432
19829: MINUS
19830: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
19831: LD_VAR 0 4
19835: PUSH
19836: LD_VAR 0 5
19840: PPUSH
19841: LD_INT 3
19843: PPUSH
19844: CALL_OW 259
19848: PUSH
19849: LD_VAR 0 5
19853: PPUSH
19854: CALL_OW 432
19858: MINUS
19859: GREATEREQUAL
19860: IFFALSE 19878
// mech := result [ i ] ;
19862: LD_ADDR_VAR 0 5
19866: PUSH
19867: LD_VAR 0 2
19871: PUSH
19872: LD_VAR 0 3
19876: ARRAY
19877: ST_TO_ADDR
// end ;
19878: GO 19787
19880: POP
19881: POP
// ComLinkTo ( vehicle , mech ) ;
19882: LD_VAR 0 1
19886: PPUSH
19887: LD_VAR 0 5
19891: PPUSH
19892: CALL_OW 135
// end ;
19896: LD_VAR 0 2
19900: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
19901: LD_INT 0
19903: PPUSH
19904: PPUSH
19905: PPUSH
19906: PPUSH
19907: PPUSH
19908: PPUSH
19909: PPUSH
19910: PPUSH
19911: PPUSH
19912: PPUSH
19913: PPUSH
19914: PPUSH
19915: PPUSH
// result := [ ] ;
19916: LD_ADDR_VAR 0 7
19920: PUSH
19921: EMPTY
19922: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
19923: LD_VAR 0 1
19927: PPUSH
19928: CALL_OW 266
19932: PUSH
19933: LD_INT 0
19935: PUSH
19936: LD_INT 1
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: IN
19943: NOT
19944: IFFALSE 19948
// exit ;
19946: GO 21582
// if name then
19948: LD_VAR 0 3
19952: IFFALSE 19968
// SetBName ( base_dep , name ) ;
19954: LD_VAR 0 1
19958: PPUSH
19959: LD_VAR 0 3
19963: PPUSH
19964: CALL_OW 500
// base := GetBase ( base_dep ) ;
19968: LD_ADDR_VAR 0 15
19972: PUSH
19973: LD_VAR 0 1
19977: PPUSH
19978: CALL_OW 274
19982: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
19983: LD_ADDR_VAR 0 16
19987: PUSH
19988: LD_VAR 0 1
19992: PPUSH
19993: CALL_OW 255
19997: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
19998: LD_ADDR_VAR 0 17
20002: PUSH
20003: LD_VAR 0 1
20007: PPUSH
20008: CALL_OW 248
20012: ST_TO_ADDR
// if sources then
20013: LD_VAR 0 5
20017: IFFALSE 20064
// for i = 1 to 3 do
20019: LD_ADDR_VAR 0 8
20023: PUSH
20024: DOUBLE
20025: LD_INT 1
20027: DEC
20028: ST_TO_ADDR
20029: LD_INT 3
20031: PUSH
20032: FOR_TO
20033: IFFALSE 20062
// AddResourceType ( base , i , sources [ i ] ) ;
20035: LD_VAR 0 15
20039: PPUSH
20040: LD_VAR 0 8
20044: PPUSH
20045: LD_VAR 0 5
20049: PUSH
20050: LD_VAR 0 8
20054: ARRAY
20055: PPUSH
20056: CALL_OW 276
20060: GO 20032
20062: POP
20063: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
20064: LD_ADDR_VAR 0 18
20068: PUSH
20069: LD_VAR 0 15
20073: PPUSH
20074: LD_VAR 0 2
20078: PPUSH
20079: LD_INT 1
20081: PPUSH
20082: CALL 19324 0 3
20086: ST_TO_ADDR
// InitHc ;
20087: CALL_OW 19
// InitUc ;
20091: CALL_OW 18
// uc_side := side ;
20095: LD_ADDR_OWVAR 20
20099: PUSH
20100: LD_VAR 0 16
20104: ST_TO_ADDR
// uc_nation := nation ;
20105: LD_ADDR_OWVAR 21
20109: PUSH
20110: LD_VAR 0 17
20114: ST_TO_ADDR
// if buildings then
20115: LD_VAR 0 18
20119: IFFALSE 21441
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
20121: LD_ADDR_VAR 0 19
20125: PUSH
20126: LD_VAR 0 18
20130: PPUSH
20131: LD_INT 2
20133: PUSH
20134: LD_INT 30
20136: PUSH
20137: LD_INT 29
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: LD_INT 30
20146: PUSH
20147: LD_INT 30
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: LIST
20158: PPUSH
20159: CALL_OW 72
20163: ST_TO_ADDR
// if tmp then
20164: LD_VAR 0 19
20168: IFFALSE 20216
// for i in tmp do
20170: LD_ADDR_VAR 0 8
20174: PUSH
20175: LD_VAR 0 19
20179: PUSH
20180: FOR_IN
20181: IFFALSE 20214
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
20183: LD_VAR 0 8
20187: PPUSH
20188: CALL_OW 250
20192: PPUSH
20193: LD_VAR 0 8
20197: PPUSH
20198: CALL_OW 251
20202: PPUSH
20203: LD_VAR 0 16
20207: PPUSH
20208: CALL_OW 441
20212: GO 20180
20214: POP
20215: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
20216: LD_VAR 0 18
20220: PPUSH
20221: LD_INT 2
20223: PUSH
20224: LD_INT 30
20226: PUSH
20227: LD_INT 32
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PUSH
20234: LD_INT 30
20236: PUSH
20237: LD_INT 33
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: LIST
20248: PPUSH
20249: CALL_OW 72
20253: IFFALSE 20341
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
20255: LD_ADDR_VAR 0 8
20259: PUSH
20260: LD_VAR 0 18
20264: PPUSH
20265: LD_INT 2
20267: PUSH
20268: LD_INT 30
20270: PUSH
20271: LD_INT 32
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 30
20280: PUSH
20281: LD_INT 33
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: LIST
20292: PPUSH
20293: CALL_OW 72
20297: PUSH
20298: FOR_IN
20299: IFFALSE 20339
// begin if not GetBWeapon ( i ) then
20301: LD_VAR 0 8
20305: PPUSH
20306: CALL_OW 269
20310: NOT
20311: IFFALSE 20337
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
20313: LD_VAR 0 8
20317: PPUSH
20318: LD_VAR 0 8
20322: PPUSH
20323: LD_VAR 0 2
20327: PPUSH
20328: CALL 21587 0 2
20332: PPUSH
20333: CALL_OW 431
// end ;
20337: GO 20298
20339: POP
20340: POP
// end ; for i = 1 to personel do
20341: LD_ADDR_VAR 0 8
20345: PUSH
20346: DOUBLE
20347: LD_INT 1
20349: DEC
20350: ST_TO_ADDR
20351: LD_VAR 0 6
20355: PUSH
20356: FOR_TO
20357: IFFALSE 21421
// begin if i > 4 then
20359: LD_VAR 0 8
20363: PUSH
20364: LD_INT 4
20366: GREATER
20367: IFFALSE 20371
// break ;
20369: GO 21421
// case i of 1 :
20371: LD_VAR 0 8
20375: PUSH
20376: LD_INT 1
20378: DOUBLE
20379: EQUAL
20380: IFTRUE 20384
20382: GO 20464
20384: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
20385: LD_ADDR_VAR 0 12
20389: PUSH
20390: LD_VAR 0 18
20394: PPUSH
20395: LD_INT 22
20397: PUSH
20398: LD_VAR 0 16
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: PUSH
20407: LD_INT 58
20409: PUSH
20410: EMPTY
20411: LIST
20412: PUSH
20413: LD_INT 2
20415: PUSH
20416: LD_INT 30
20418: PUSH
20419: LD_INT 32
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 30
20428: PUSH
20429: LD_INT 4
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 30
20438: PUSH
20439: LD_INT 5
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: LIST
20456: PPUSH
20457: CALL_OW 72
20461: ST_TO_ADDR
20462: GO 20686
20464: LD_INT 2
20466: DOUBLE
20467: EQUAL
20468: IFTRUE 20472
20470: GO 20534
20472: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
20473: LD_ADDR_VAR 0 12
20477: PUSH
20478: LD_VAR 0 18
20482: PPUSH
20483: LD_INT 22
20485: PUSH
20486: LD_VAR 0 16
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 2
20497: PUSH
20498: LD_INT 30
20500: PUSH
20501: LD_INT 0
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: LD_INT 30
20510: PUSH
20511: LD_INT 1
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: LIST
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PPUSH
20527: CALL_OW 72
20531: ST_TO_ADDR
20532: GO 20686
20534: LD_INT 3
20536: DOUBLE
20537: EQUAL
20538: IFTRUE 20542
20540: GO 20604
20542: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
20543: LD_ADDR_VAR 0 12
20547: PUSH
20548: LD_VAR 0 18
20552: PPUSH
20553: LD_INT 22
20555: PUSH
20556: LD_VAR 0 16
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 2
20567: PUSH
20568: LD_INT 30
20570: PUSH
20571: LD_INT 2
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 30
20580: PUSH
20581: LD_INT 3
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: LIST
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PPUSH
20597: CALL_OW 72
20601: ST_TO_ADDR
20602: GO 20686
20604: LD_INT 4
20606: DOUBLE
20607: EQUAL
20608: IFTRUE 20612
20610: GO 20685
20612: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
20613: LD_ADDR_VAR 0 12
20617: PUSH
20618: LD_VAR 0 18
20622: PPUSH
20623: LD_INT 22
20625: PUSH
20626: LD_VAR 0 16
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 2
20637: PUSH
20638: LD_INT 30
20640: PUSH
20641: LD_INT 6
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 30
20650: PUSH
20651: LD_INT 7
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 30
20660: PUSH
20661: LD_INT 8
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: PPUSH
20678: CALL_OW 72
20682: ST_TO_ADDR
20683: GO 20686
20685: POP
// if i = 1 then
20686: LD_VAR 0 8
20690: PUSH
20691: LD_INT 1
20693: EQUAL
20694: IFFALSE 20805
// begin tmp := [ ] ;
20696: LD_ADDR_VAR 0 19
20700: PUSH
20701: EMPTY
20702: ST_TO_ADDR
// for j in f do
20703: LD_ADDR_VAR 0 9
20707: PUSH
20708: LD_VAR 0 12
20712: PUSH
20713: FOR_IN
20714: IFFALSE 20787
// if GetBType ( j ) = b_bunker then
20716: LD_VAR 0 9
20720: PPUSH
20721: CALL_OW 266
20725: PUSH
20726: LD_INT 32
20728: EQUAL
20729: IFFALSE 20756
// tmp := Insert ( tmp , 1 , j ) else
20731: LD_ADDR_VAR 0 19
20735: PUSH
20736: LD_VAR 0 19
20740: PPUSH
20741: LD_INT 1
20743: PPUSH
20744: LD_VAR 0 9
20748: PPUSH
20749: CALL_OW 2
20753: ST_TO_ADDR
20754: GO 20785
// tmp := Insert ( tmp , tmp + 1 , j ) ;
20756: LD_ADDR_VAR 0 19
20760: PUSH
20761: LD_VAR 0 19
20765: PPUSH
20766: LD_VAR 0 19
20770: PUSH
20771: LD_INT 1
20773: PLUS
20774: PPUSH
20775: LD_VAR 0 9
20779: PPUSH
20780: CALL_OW 2
20784: ST_TO_ADDR
20785: GO 20713
20787: POP
20788: POP
// if tmp then
20789: LD_VAR 0 19
20793: IFFALSE 20805
// f := tmp ;
20795: LD_ADDR_VAR 0 12
20799: PUSH
20800: LD_VAR 0 19
20804: ST_TO_ADDR
// end ; x := personel [ i ] ;
20805: LD_ADDR_VAR 0 13
20809: PUSH
20810: LD_VAR 0 6
20814: PUSH
20815: LD_VAR 0 8
20819: ARRAY
20820: ST_TO_ADDR
// if x = - 1 then
20821: LD_VAR 0 13
20825: PUSH
20826: LD_INT 1
20828: NEG
20829: EQUAL
20830: IFFALSE 21039
// begin for j in f do
20832: LD_ADDR_VAR 0 9
20836: PUSH
20837: LD_VAR 0 12
20841: PUSH
20842: FOR_IN
20843: IFFALSE 21035
// repeat InitHc ;
20845: CALL_OW 19
// if GetBType ( j ) = b_barracks then
20849: LD_VAR 0 9
20853: PPUSH
20854: CALL_OW 266
20858: PUSH
20859: LD_INT 5
20861: EQUAL
20862: IFFALSE 20932
// begin if UnitsInside ( j ) < 3 then
20864: LD_VAR 0 9
20868: PPUSH
20869: CALL_OW 313
20873: PUSH
20874: LD_INT 3
20876: LESS
20877: IFFALSE 20913
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20879: LD_INT 0
20881: PPUSH
20882: LD_INT 5
20884: PUSH
20885: LD_INT 8
20887: PUSH
20888: LD_INT 9
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: LIST
20895: PUSH
20896: LD_VAR 0 17
20900: ARRAY
20901: PPUSH
20902: LD_VAR 0 4
20906: PPUSH
20907: CALL_OW 380
20911: GO 20930
// PrepareHuman ( false , i , skill ) ;
20913: LD_INT 0
20915: PPUSH
20916: LD_VAR 0 8
20920: PPUSH
20921: LD_VAR 0 4
20925: PPUSH
20926: CALL_OW 380
// end else
20930: GO 20949
// PrepareHuman ( false , i , skill ) ;
20932: LD_INT 0
20934: PPUSH
20935: LD_VAR 0 8
20939: PPUSH
20940: LD_VAR 0 4
20944: PPUSH
20945: CALL_OW 380
// un := CreateHuman ;
20949: LD_ADDR_VAR 0 14
20953: PUSH
20954: CALL_OW 44
20958: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20959: LD_ADDR_VAR 0 7
20963: PUSH
20964: LD_VAR 0 7
20968: PPUSH
20969: LD_INT 1
20971: PPUSH
20972: LD_VAR 0 14
20976: PPUSH
20977: CALL_OW 2
20981: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
20982: LD_VAR 0 14
20986: PPUSH
20987: LD_VAR 0 9
20991: PPUSH
20992: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
20996: LD_VAR 0 9
21000: PPUSH
21001: CALL_OW 313
21005: PUSH
21006: LD_INT 6
21008: EQUAL
21009: PUSH
21010: LD_VAR 0 9
21014: PPUSH
21015: CALL_OW 266
21019: PUSH
21020: LD_INT 32
21022: PUSH
21023: LD_INT 31
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: IN
21030: OR
21031: IFFALSE 20845
21033: GO 20842
21035: POP
21036: POP
// end else
21037: GO 21419
// for j = 1 to x do
21039: LD_ADDR_VAR 0 9
21043: PUSH
21044: DOUBLE
21045: LD_INT 1
21047: DEC
21048: ST_TO_ADDR
21049: LD_VAR 0 13
21053: PUSH
21054: FOR_TO
21055: IFFALSE 21417
// begin InitHc ;
21057: CALL_OW 19
// if not f then
21061: LD_VAR 0 12
21065: NOT
21066: IFFALSE 21155
// begin PrepareHuman ( false , i , skill ) ;
21068: LD_INT 0
21070: PPUSH
21071: LD_VAR 0 8
21075: PPUSH
21076: LD_VAR 0 4
21080: PPUSH
21081: CALL_OW 380
// un := CreateHuman ;
21085: LD_ADDR_VAR 0 14
21089: PUSH
21090: CALL_OW 44
21094: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21095: LD_ADDR_VAR 0 7
21099: PUSH
21100: LD_VAR 0 7
21104: PPUSH
21105: LD_INT 1
21107: PPUSH
21108: LD_VAR 0 14
21112: PPUSH
21113: CALL_OW 2
21117: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21118: LD_VAR 0 14
21122: PPUSH
21123: LD_VAR 0 1
21127: PPUSH
21128: CALL_OW 250
21132: PPUSH
21133: LD_VAR 0 1
21137: PPUSH
21138: CALL_OW 251
21142: PPUSH
21143: LD_INT 10
21145: PPUSH
21146: LD_INT 0
21148: PPUSH
21149: CALL_OW 50
// continue ;
21153: GO 21054
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
21155: LD_VAR 0 12
21159: PUSH
21160: LD_INT 1
21162: ARRAY
21163: PPUSH
21164: CALL_OW 313
21168: PUSH
21169: LD_VAR 0 12
21173: PUSH
21174: LD_INT 1
21176: ARRAY
21177: PPUSH
21178: CALL_OW 266
21182: PUSH
21183: LD_INT 32
21185: PUSH
21186: LD_INT 31
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: IN
21193: AND
21194: PUSH
21195: LD_VAR 0 12
21199: PUSH
21200: LD_INT 1
21202: ARRAY
21203: PPUSH
21204: CALL_OW 313
21208: PUSH
21209: LD_INT 6
21211: EQUAL
21212: OR
21213: IFFALSE 21233
// f := Delete ( f , 1 ) ;
21215: LD_ADDR_VAR 0 12
21219: PUSH
21220: LD_VAR 0 12
21224: PPUSH
21225: LD_INT 1
21227: PPUSH
21228: CALL_OW 3
21232: ST_TO_ADDR
// if not f then
21233: LD_VAR 0 12
21237: NOT
21238: IFFALSE 21256
// begin x := x + 2 ;
21240: LD_ADDR_VAR 0 13
21244: PUSH
21245: LD_VAR 0 13
21249: PUSH
21250: LD_INT 2
21252: PLUS
21253: ST_TO_ADDR
// continue ;
21254: GO 21054
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
21256: LD_VAR 0 12
21260: PUSH
21261: LD_INT 1
21263: ARRAY
21264: PPUSH
21265: CALL_OW 266
21269: PUSH
21270: LD_INT 5
21272: EQUAL
21273: IFFALSE 21347
// begin if UnitsInside ( f [ 1 ] ) < 3 then
21275: LD_VAR 0 12
21279: PUSH
21280: LD_INT 1
21282: ARRAY
21283: PPUSH
21284: CALL_OW 313
21288: PUSH
21289: LD_INT 3
21291: LESS
21292: IFFALSE 21328
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21294: LD_INT 0
21296: PPUSH
21297: LD_INT 5
21299: PUSH
21300: LD_INT 8
21302: PUSH
21303: LD_INT 9
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: LIST
21310: PUSH
21311: LD_VAR 0 17
21315: ARRAY
21316: PPUSH
21317: LD_VAR 0 4
21321: PPUSH
21322: CALL_OW 380
21326: GO 21345
// PrepareHuman ( false , i , skill ) ;
21328: LD_INT 0
21330: PPUSH
21331: LD_VAR 0 8
21335: PPUSH
21336: LD_VAR 0 4
21340: PPUSH
21341: CALL_OW 380
// end else
21345: GO 21364
// PrepareHuman ( false , i , skill ) ;
21347: LD_INT 0
21349: PPUSH
21350: LD_VAR 0 8
21354: PPUSH
21355: LD_VAR 0 4
21359: PPUSH
21360: CALL_OW 380
// un := CreateHuman ;
21364: LD_ADDR_VAR 0 14
21368: PUSH
21369: CALL_OW 44
21373: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21374: LD_ADDR_VAR 0 7
21378: PUSH
21379: LD_VAR 0 7
21383: PPUSH
21384: LD_INT 1
21386: PPUSH
21387: LD_VAR 0 14
21391: PPUSH
21392: CALL_OW 2
21396: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
21397: LD_VAR 0 14
21401: PPUSH
21402: LD_VAR 0 12
21406: PUSH
21407: LD_INT 1
21409: ARRAY
21410: PPUSH
21411: CALL_OW 52
// end ;
21415: GO 21054
21417: POP
21418: POP
// end ;
21419: GO 20356
21421: POP
21422: POP
// result := result ^ buildings ;
21423: LD_ADDR_VAR 0 7
21427: PUSH
21428: LD_VAR 0 7
21432: PUSH
21433: LD_VAR 0 18
21437: ADD
21438: ST_TO_ADDR
// end else
21439: GO 21582
// begin for i = 1 to personel do
21441: LD_ADDR_VAR 0 8
21445: PUSH
21446: DOUBLE
21447: LD_INT 1
21449: DEC
21450: ST_TO_ADDR
21451: LD_VAR 0 6
21455: PUSH
21456: FOR_TO
21457: IFFALSE 21580
// begin if i > 4 then
21459: LD_VAR 0 8
21463: PUSH
21464: LD_INT 4
21466: GREATER
21467: IFFALSE 21471
// break ;
21469: GO 21580
// x := personel [ i ] ;
21471: LD_ADDR_VAR 0 13
21475: PUSH
21476: LD_VAR 0 6
21480: PUSH
21481: LD_VAR 0 8
21485: ARRAY
21486: ST_TO_ADDR
// if x = - 1 then
21487: LD_VAR 0 13
21491: PUSH
21492: LD_INT 1
21494: NEG
21495: EQUAL
21496: IFFALSE 21500
// continue ;
21498: GO 21456
// PrepareHuman ( false , i , skill ) ;
21500: LD_INT 0
21502: PPUSH
21503: LD_VAR 0 8
21507: PPUSH
21508: LD_VAR 0 4
21512: PPUSH
21513: CALL_OW 380
// un := CreateHuman ;
21517: LD_ADDR_VAR 0 14
21521: PUSH
21522: CALL_OW 44
21526: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21527: LD_VAR 0 14
21531: PPUSH
21532: LD_VAR 0 1
21536: PPUSH
21537: CALL_OW 250
21541: PPUSH
21542: LD_VAR 0 1
21546: PPUSH
21547: CALL_OW 251
21551: PPUSH
21552: LD_INT 10
21554: PPUSH
21555: LD_INT 0
21557: PPUSH
21558: CALL_OW 50
// result := result ^ un ;
21562: LD_ADDR_VAR 0 7
21566: PUSH
21567: LD_VAR 0 7
21571: PUSH
21572: LD_VAR 0 14
21576: ADD
21577: ST_TO_ADDR
// end ;
21578: GO 21456
21580: POP
21581: POP
// end ; end ;
21582: LD_VAR 0 7
21586: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
21587: LD_INT 0
21589: PPUSH
21590: PPUSH
21591: PPUSH
21592: PPUSH
21593: PPUSH
21594: PPUSH
21595: PPUSH
21596: PPUSH
21597: PPUSH
21598: PPUSH
21599: PPUSH
21600: PPUSH
21601: PPUSH
21602: PPUSH
21603: PPUSH
21604: PPUSH
// result := false ;
21605: LD_ADDR_VAR 0 3
21609: PUSH
21610: LD_INT 0
21612: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
21613: LD_VAR 0 1
21617: NOT
21618: PUSH
21619: LD_VAR 0 1
21623: PPUSH
21624: CALL_OW 266
21628: PUSH
21629: LD_INT 32
21631: PUSH
21632: LD_INT 33
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: IN
21639: NOT
21640: OR
21641: IFFALSE 21645
// exit ;
21643: GO 22754
// nat := GetNation ( tower ) ;
21645: LD_ADDR_VAR 0 12
21649: PUSH
21650: LD_VAR 0 1
21654: PPUSH
21655: CALL_OW 248
21659: ST_TO_ADDR
// side := GetSide ( tower ) ;
21660: LD_ADDR_VAR 0 16
21664: PUSH
21665: LD_VAR 0 1
21669: PPUSH
21670: CALL_OW 255
21674: ST_TO_ADDR
// x := GetX ( tower ) ;
21675: LD_ADDR_VAR 0 10
21679: PUSH
21680: LD_VAR 0 1
21684: PPUSH
21685: CALL_OW 250
21689: ST_TO_ADDR
// y := GetY ( tower ) ;
21690: LD_ADDR_VAR 0 11
21694: PUSH
21695: LD_VAR 0 1
21699: PPUSH
21700: CALL_OW 251
21704: ST_TO_ADDR
// if not x or not y then
21705: LD_VAR 0 10
21709: NOT
21710: PUSH
21711: LD_VAR 0 11
21715: NOT
21716: OR
21717: IFFALSE 21721
// exit ;
21719: GO 22754
// weapon := 0 ;
21721: LD_ADDR_VAR 0 18
21725: PUSH
21726: LD_INT 0
21728: ST_TO_ADDR
// fac_list := [ ] ;
21729: LD_ADDR_VAR 0 17
21733: PUSH
21734: EMPTY
21735: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
21736: LD_ADDR_VAR 0 6
21740: PUSH
21741: LD_VAR 0 1
21745: PPUSH
21746: CALL_OW 274
21750: PPUSH
21751: LD_VAR 0 2
21755: PPUSH
21756: LD_INT 0
21758: PPUSH
21759: CALL 19324 0 3
21763: PPUSH
21764: LD_INT 30
21766: PUSH
21767: LD_INT 3
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PPUSH
21774: CALL_OW 72
21778: ST_TO_ADDR
// if not factories then
21779: LD_VAR 0 6
21783: NOT
21784: IFFALSE 21788
// exit ;
21786: GO 22754
// for i in factories do
21788: LD_ADDR_VAR 0 8
21792: PUSH
21793: LD_VAR 0 6
21797: PUSH
21798: FOR_IN
21799: IFFALSE 21824
// fac_list := fac_list union AvailableWeaponList ( i ) ;
21801: LD_ADDR_VAR 0 17
21805: PUSH
21806: LD_VAR 0 17
21810: PUSH
21811: LD_VAR 0 8
21815: PPUSH
21816: CALL_OW 478
21820: UNION
21821: ST_TO_ADDR
21822: GO 21798
21824: POP
21825: POP
// if not fac_list then
21826: LD_VAR 0 17
21830: NOT
21831: IFFALSE 21835
// exit ;
21833: GO 22754
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
21835: LD_ADDR_VAR 0 5
21839: PUSH
21840: LD_INT 4
21842: PUSH
21843: LD_INT 5
21845: PUSH
21846: LD_INT 9
21848: PUSH
21849: LD_INT 10
21851: PUSH
21852: LD_INT 6
21854: PUSH
21855: LD_INT 7
21857: PUSH
21858: LD_INT 11
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 27
21872: PUSH
21873: LD_INT 28
21875: PUSH
21876: LD_INT 26
21878: PUSH
21879: LD_INT 30
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: PUSH
21888: LD_INT 43
21890: PUSH
21891: LD_INT 44
21893: PUSH
21894: LD_INT 46
21896: PUSH
21897: LD_INT 45
21899: PUSH
21900: LD_INT 47
21902: PUSH
21903: LD_INT 49
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: LIST
21918: PUSH
21919: LD_VAR 0 12
21923: ARRAY
21924: ST_TO_ADDR
// list := list isect fac_list ;
21925: LD_ADDR_VAR 0 5
21929: PUSH
21930: LD_VAR 0 5
21934: PUSH
21935: LD_VAR 0 17
21939: ISECT
21940: ST_TO_ADDR
// if not list then
21941: LD_VAR 0 5
21945: NOT
21946: IFFALSE 21950
// exit ;
21948: GO 22754
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
21950: LD_VAR 0 12
21954: PUSH
21955: LD_INT 3
21957: EQUAL
21958: PUSH
21959: LD_INT 49
21961: PUSH
21962: LD_VAR 0 5
21966: IN
21967: AND
21968: PUSH
21969: LD_INT 31
21971: PPUSH
21972: LD_VAR 0 16
21976: PPUSH
21977: CALL_OW 321
21981: PUSH
21982: LD_INT 2
21984: EQUAL
21985: AND
21986: IFFALSE 22046
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
21988: LD_INT 22
21990: PUSH
21991: LD_VAR 0 16
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 35
22002: PUSH
22003: LD_INT 49
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: LD_INT 91
22012: PUSH
22013: LD_VAR 0 1
22017: PUSH
22018: LD_INT 10
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: LIST
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: LIST
22030: PPUSH
22031: CALL_OW 69
22035: NOT
22036: IFFALSE 22046
// weapon := ru_time_lapser ;
22038: LD_ADDR_VAR 0 18
22042: PUSH
22043: LD_INT 49
22045: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
22046: LD_VAR 0 12
22050: PUSH
22051: LD_INT 1
22053: PUSH
22054: LD_INT 2
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: IN
22061: PUSH
22062: LD_INT 11
22064: PUSH
22065: LD_VAR 0 5
22069: IN
22070: PUSH
22071: LD_INT 30
22073: PUSH
22074: LD_VAR 0 5
22078: IN
22079: OR
22080: AND
22081: PUSH
22082: LD_INT 6
22084: PPUSH
22085: LD_VAR 0 16
22089: PPUSH
22090: CALL_OW 321
22094: PUSH
22095: LD_INT 2
22097: EQUAL
22098: AND
22099: IFFALSE 22264
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
22101: LD_INT 22
22103: PUSH
22104: LD_VAR 0 16
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PUSH
22113: LD_INT 2
22115: PUSH
22116: LD_INT 35
22118: PUSH
22119: LD_INT 11
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 35
22128: PUSH
22129: LD_INT 30
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 91
22143: PUSH
22144: LD_VAR 0 1
22148: PUSH
22149: LD_INT 18
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: LIST
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: LIST
22161: PPUSH
22162: CALL_OW 69
22166: NOT
22167: PUSH
22168: LD_INT 22
22170: PUSH
22171: LD_VAR 0 16
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: LD_INT 2
22182: PUSH
22183: LD_INT 30
22185: PUSH
22186: LD_INT 32
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 30
22195: PUSH
22196: LD_INT 33
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 91
22210: PUSH
22211: LD_VAR 0 1
22215: PUSH
22216: LD_INT 12
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: LIST
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: LIST
22228: PUSH
22229: EMPTY
22230: LIST
22231: PPUSH
22232: CALL_OW 69
22236: PUSH
22237: LD_INT 2
22239: GREATER
22240: AND
22241: IFFALSE 22264
// weapon := [ us_radar , ar_radar ] [ nat ] ;
22243: LD_ADDR_VAR 0 18
22247: PUSH
22248: LD_INT 11
22250: PUSH
22251: LD_INT 30
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_VAR 0 12
22262: ARRAY
22263: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
22264: LD_VAR 0 18
22268: NOT
22269: PUSH
22270: LD_INT 40
22272: PPUSH
22273: LD_VAR 0 16
22277: PPUSH
22278: CALL_OW 321
22282: PUSH
22283: LD_INT 2
22285: EQUAL
22286: AND
22287: PUSH
22288: LD_INT 7
22290: PUSH
22291: LD_VAR 0 5
22295: IN
22296: PUSH
22297: LD_INT 28
22299: PUSH
22300: LD_VAR 0 5
22304: IN
22305: OR
22306: PUSH
22307: LD_INT 45
22309: PUSH
22310: LD_VAR 0 5
22314: IN
22315: OR
22316: AND
22317: IFFALSE 22571
// begin hex := GetHexInfo ( x , y ) ;
22319: LD_ADDR_VAR 0 4
22323: PUSH
22324: LD_VAR 0 10
22328: PPUSH
22329: LD_VAR 0 11
22333: PPUSH
22334: CALL_OW 546
22338: ST_TO_ADDR
// if hex [ 1 ] then
22339: LD_VAR 0 4
22343: PUSH
22344: LD_INT 1
22346: ARRAY
22347: IFFALSE 22351
// exit ;
22349: GO 22754
// height := hex [ 2 ] ;
22351: LD_ADDR_VAR 0 15
22355: PUSH
22356: LD_VAR 0 4
22360: PUSH
22361: LD_INT 2
22363: ARRAY
22364: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
22365: LD_ADDR_VAR 0 14
22369: PUSH
22370: LD_INT 0
22372: PUSH
22373: LD_INT 2
22375: PUSH
22376: LD_INT 3
22378: PUSH
22379: LD_INT 5
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: ST_TO_ADDR
// for i in tmp do
22388: LD_ADDR_VAR 0 8
22392: PUSH
22393: LD_VAR 0 14
22397: PUSH
22398: FOR_IN
22399: IFFALSE 22569
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
22401: LD_ADDR_VAR 0 9
22405: PUSH
22406: LD_VAR 0 10
22410: PPUSH
22411: LD_VAR 0 8
22415: PPUSH
22416: LD_INT 5
22418: PPUSH
22419: CALL_OW 272
22423: PUSH
22424: LD_VAR 0 11
22428: PPUSH
22429: LD_VAR 0 8
22433: PPUSH
22434: LD_INT 5
22436: PPUSH
22437: CALL_OW 273
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
22446: LD_VAR 0 9
22450: PUSH
22451: LD_INT 1
22453: ARRAY
22454: PPUSH
22455: LD_VAR 0 9
22459: PUSH
22460: LD_INT 2
22462: ARRAY
22463: PPUSH
22464: CALL_OW 488
22468: IFFALSE 22567
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
22470: LD_ADDR_VAR 0 4
22474: PUSH
22475: LD_VAR 0 9
22479: PUSH
22480: LD_INT 1
22482: ARRAY
22483: PPUSH
22484: LD_VAR 0 9
22488: PUSH
22489: LD_INT 2
22491: ARRAY
22492: PPUSH
22493: CALL_OW 546
22497: ST_TO_ADDR
// if hex [ 1 ] then
22498: LD_VAR 0 4
22502: PUSH
22503: LD_INT 1
22505: ARRAY
22506: IFFALSE 22510
// continue ;
22508: GO 22398
// h := hex [ 2 ] ;
22510: LD_ADDR_VAR 0 13
22514: PUSH
22515: LD_VAR 0 4
22519: PUSH
22520: LD_INT 2
22522: ARRAY
22523: ST_TO_ADDR
// if h + 7 < height then
22524: LD_VAR 0 13
22528: PUSH
22529: LD_INT 7
22531: PLUS
22532: PUSH
22533: LD_VAR 0 15
22537: LESS
22538: IFFALSE 22567
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
22540: LD_ADDR_VAR 0 18
22544: PUSH
22545: LD_INT 7
22547: PUSH
22548: LD_INT 28
22550: PUSH
22551: LD_INT 45
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: LIST
22558: PUSH
22559: LD_VAR 0 12
22563: ARRAY
22564: ST_TO_ADDR
// break ;
22565: GO 22569
// end ; end ; end ;
22567: GO 22398
22569: POP
22570: POP
// end ; if not weapon then
22571: LD_VAR 0 18
22575: NOT
22576: IFFALSE 22636
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
22578: LD_ADDR_VAR 0 5
22582: PUSH
22583: LD_VAR 0 5
22587: PUSH
22588: LD_INT 11
22590: PUSH
22591: LD_INT 30
22593: PUSH
22594: LD_INT 49
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: LIST
22601: DIFF
22602: ST_TO_ADDR
// if not list then
22603: LD_VAR 0 5
22607: NOT
22608: IFFALSE 22612
// exit ;
22610: GO 22754
// weapon := list [ rand ( 1 , list ) ] ;
22612: LD_ADDR_VAR 0 18
22616: PUSH
22617: LD_VAR 0 5
22621: PUSH
22622: LD_INT 1
22624: PPUSH
22625: LD_VAR 0 5
22629: PPUSH
22630: CALL_OW 12
22634: ARRAY
22635: ST_TO_ADDR
// end ; if weapon then
22636: LD_VAR 0 18
22640: IFFALSE 22754
// begin tmp := CostOfWeapon ( weapon ) ;
22642: LD_ADDR_VAR 0 14
22646: PUSH
22647: LD_VAR 0 18
22651: PPUSH
22652: CALL_OW 451
22656: ST_TO_ADDR
// j := GetBase ( tower ) ;
22657: LD_ADDR_VAR 0 9
22661: PUSH
22662: LD_VAR 0 1
22666: PPUSH
22667: CALL_OW 274
22671: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
22672: LD_VAR 0 9
22676: PPUSH
22677: LD_INT 1
22679: PPUSH
22680: CALL_OW 275
22684: PUSH
22685: LD_VAR 0 14
22689: PUSH
22690: LD_INT 1
22692: ARRAY
22693: GREATEREQUAL
22694: PUSH
22695: LD_VAR 0 9
22699: PPUSH
22700: LD_INT 2
22702: PPUSH
22703: CALL_OW 275
22707: PUSH
22708: LD_VAR 0 14
22712: PUSH
22713: LD_INT 2
22715: ARRAY
22716: GREATEREQUAL
22717: AND
22718: PUSH
22719: LD_VAR 0 9
22723: PPUSH
22724: LD_INT 3
22726: PPUSH
22727: CALL_OW 275
22731: PUSH
22732: LD_VAR 0 14
22736: PUSH
22737: LD_INT 3
22739: ARRAY
22740: GREATEREQUAL
22741: AND
22742: IFFALSE 22754
// result := weapon ;
22744: LD_ADDR_VAR 0 3
22748: PUSH
22749: LD_VAR 0 18
22753: ST_TO_ADDR
// end ; end ;
22754: LD_VAR 0 3
22758: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
22759: LD_INT 0
22761: PPUSH
22762: PPUSH
// result := true ;
22763: LD_ADDR_VAR 0 3
22767: PUSH
22768: LD_INT 1
22770: ST_TO_ADDR
// if array1 = array2 then
22771: LD_VAR 0 1
22775: PUSH
22776: LD_VAR 0 2
22780: EQUAL
22781: IFFALSE 22841
// begin for i = 1 to array1 do
22783: LD_ADDR_VAR 0 4
22787: PUSH
22788: DOUBLE
22789: LD_INT 1
22791: DEC
22792: ST_TO_ADDR
22793: LD_VAR 0 1
22797: PUSH
22798: FOR_TO
22799: IFFALSE 22837
// if array1 [ i ] <> array2 [ i ] then
22801: LD_VAR 0 1
22805: PUSH
22806: LD_VAR 0 4
22810: ARRAY
22811: PUSH
22812: LD_VAR 0 2
22816: PUSH
22817: LD_VAR 0 4
22821: ARRAY
22822: NONEQUAL
22823: IFFALSE 22835
// begin result := false ;
22825: LD_ADDR_VAR 0 3
22829: PUSH
22830: LD_INT 0
22832: ST_TO_ADDR
// break ;
22833: GO 22837
// end ;
22835: GO 22798
22837: POP
22838: POP
// end else
22839: GO 22849
// result := false ;
22841: LD_ADDR_VAR 0 3
22845: PUSH
22846: LD_INT 0
22848: ST_TO_ADDR
// end ;
22849: LD_VAR 0 3
22853: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
22854: LD_INT 0
22856: PPUSH
22857: PPUSH
// if not array1 or not array2 then
22858: LD_VAR 0 1
22862: NOT
22863: PUSH
22864: LD_VAR 0 2
22868: NOT
22869: OR
22870: IFFALSE 22874
// exit ;
22872: GO 22938
// result := true ;
22874: LD_ADDR_VAR 0 3
22878: PUSH
22879: LD_INT 1
22881: ST_TO_ADDR
// for i = 1 to array1 do
22882: LD_ADDR_VAR 0 4
22886: PUSH
22887: DOUBLE
22888: LD_INT 1
22890: DEC
22891: ST_TO_ADDR
22892: LD_VAR 0 1
22896: PUSH
22897: FOR_TO
22898: IFFALSE 22936
// if array1 [ i ] <> array2 [ i ] then
22900: LD_VAR 0 1
22904: PUSH
22905: LD_VAR 0 4
22909: ARRAY
22910: PUSH
22911: LD_VAR 0 2
22915: PUSH
22916: LD_VAR 0 4
22920: ARRAY
22921: NONEQUAL
22922: IFFALSE 22934
// begin result := false ;
22924: LD_ADDR_VAR 0 3
22928: PUSH
22929: LD_INT 0
22931: ST_TO_ADDR
// break ;
22932: GO 22936
// end ;
22934: GO 22897
22936: POP
22937: POP
// end ;
22938: LD_VAR 0 3
22942: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
22943: LD_INT 0
22945: PPUSH
22946: PPUSH
22947: PPUSH
// pom := GetBase ( fac ) ;
22948: LD_ADDR_VAR 0 5
22952: PUSH
22953: LD_VAR 0 1
22957: PPUSH
22958: CALL_OW 274
22962: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
22963: LD_ADDR_VAR 0 4
22967: PUSH
22968: LD_VAR 0 2
22972: PUSH
22973: LD_INT 1
22975: ARRAY
22976: PPUSH
22977: LD_VAR 0 2
22981: PUSH
22982: LD_INT 2
22984: ARRAY
22985: PPUSH
22986: LD_VAR 0 2
22990: PUSH
22991: LD_INT 3
22993: ARRAY
22994: PPUSH
22995: LD_VAR 0 2
22999: PUSH
23000: LD_INT 4
23002: ARRAY
23003: PPUSH
23004: CALL_OW 449
23008: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23009: LD_ADDR_VAR 0 3
23013: PUSH
23014: LD_VAR 0 5
23018: PPUSH
23019: LD_INT 1
23021: PPUSH
23022: CALL_OW 275
23026: PUSH
23027: LD_VAR 0 4
23031: PUSH
23032: LD_INT 1
23034: ARRAY
23035: GREATEREQUAL
23036: PUSH
23037: LD_VAR 0 5
23041: PPUSH
23042: LD_INT 2
23044: PPUSH
23045: CALL_OW 275
23049: PUSH
23050: LD_VAR 0 4
23054: PUSH
23055: LD_INT 2
23057: ARRAY
23058: GREATEREQUAL
23059: AND
23060: PUSH
23061: LD_VAR 0 5
23065: PPUSH
23066: LD_INT 3
23068: PPUSH
23069: CALL_OW 275
23073: PUSH
23074: LD_VAR 0 4
23078: PUSH
23079: LD_INT 3
23081: ARRAY
23082: GREATEREQUAL
23083: AND
23084: ST_TO_ADDR
// end ;
23085: LD_VAR 0 3
23089: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
23090: LD_INT 0
23092: PPUSH
23093: PPUSH
23094: PPUSH
23095: PPUSH
// pom := GetBase ( building ) ;
23096: LD_ADDR_VAR 0 3
23100: PUSH
23101: LD_VAR 0 1
23105: PPUSH
23106: CALL_OW 274
23110: ST_TO_ADDR
// if not pom then
23111: LD_VAR 0 3
23115: NOT
23116: IFFALSE 23120
// exit ;
23118: GO 23290
// btype := GetBType ( building ) ;
23120: LD_ADDR_VAR 0 5
23124: PUSH
23125: LD_VAR 0 1
23129: PPUSH
23130: CALL_OW 266
23134: ST_TO_ADDR
// if btype = b_armoury then
23135: LD_VAR 0 5
23139: PUSH
23140: LD_INT 4
23142: EQUAL
23143: IFFALSE 23153
// btype := b_barracks ;
23145: LD_ADDR_VAR 0 5
23149: PUSH
23150: LD_INT 5
23152: ST_TO_ADDR
// if btype = b_depot then
23153: LD_VAR 0 5
23157: PUSH
23158: LD_INT 0
23160: EQUAL
23161: IFFALSE 23171
// btype := b_warehouse ;
23163: LD_ADDR_VAR 0 5
23167: PUSH
23168: LD_INT 1
23170: ST_TO_ADDR
// if btype = b_workshop then
23171: LD_VAR 0 5
23175: PUSH
23176: LD_INT 2
23178: EQUAL
23179: IFFALSE 23189
// btype := b_factory ;
23181: LD_ADDR_VAR 0 5
23185: PUSH
23186: LD_INT 3
23188: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23189: LD_ADDR_VAR 0 4
23193: PUSH
23194: LD_VAR 0 5
23198: PPUSH
23199: LD_VAR 0 1
23203: PPUSH
23204: CALL_OW 248
23208: PPUSH
23209: CALL_OW 450
23213: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23214: LD_ADDR_VAR 0 2
23218: PUSH
23219: LD_VAR 0 3
23223: PPUSH
23224: LD_INT 1
23226: PPUSH
23227: CALL_OW 275
23231: PUSH
23232: LD_VAR 0 4
23236: PUSH
23237: LD_INT 1
23239: ARRAY
23240: GREATEREQUAL
23241: PUSH
23242: LD_VAR 0 3
23246: PPUSH
23247: LD_INT 2
23249: PPUSH
23250: CALL_OW 275
23254: PUSH
23255: LD_VAR 0 4
23259: PUSH
23260: LD_INT 2
23262: ARRAY
23263: GREATEREQUAL
23264: AND
23265: PUSH
23266: LD_VAR 0 3
23270: PPUSH
23271: LD_INT 3
23273: PPUSH
23274: CALL_OW 275
23278: PUSH
23279: LD_VAR 0 4
23283: PUSH
23284: LD_INT 3
23286: ARRAY
23287: GREATEREQUAL
23288: AND
23289: ST_TO_ADDR
// end ;
23290: LD_VAR 0 2
23294: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
23295: LD_INT 0
23297: PPUSH
23298: PPUSH
23299: PPUSH
// pom := GetBase ( building ) ;
23300: LD_ADDR_VAR 0 4
23304: PUSH
23305: LD_VAR 0 1
23309: PPUSH
23310: CALL_OW 274
23314: ST_TO_ADDR
// if not pom then
23315: LD_VAR 0 4
23319: NOT
23320: IFFALSE 23324
// exit ;
23322: GO 23425
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23324: LD_ADDR_VAR 0 5
23328: PUSH
23329: LD_VAR 0 2
23333: PPUSH
23334: LD_VAR 0 1
23338: PPUSH
23339: CALL_OW 248
23343: PPUSH
23344: CALL_OW 450
23348: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23349: LD_ADDR_VAR 0 3
23353: PUSH
23354: LD_VAR 0 4
23358: PPUSH
23359: LD_INT 1
23361: PPUSH
23362: CALL_OW 275
23366: PUSH
23367: LD_VAR 0 5
23371: PUSH
23372: LD_INT 1
23374: ARRAY
23375: GREATEREQUAL
23376: PUSH
23377: LD_VAR 0 4
23381: PPUSH
23382: LD_INT 2
23384: PPUSH
23385: CALL_OW 275
23389: PUSH
23390: LD_VAR 0 5
23394: PUSH
23395: LD_INT 2
23397: ARRAY
23398: GREATEREQUAL
23399: AND
23400: PUSH
23401: LD_VAR 0 4
23405: PPUSH
23406: LD_INT 3
23408: PPUSH
23409: CALL_OW 275
23413: PUSH
23414: LD_VAR 0 5
23418: PUSH
23419: LD_INT 3
23421: ARRAY
23422: GREATEREQUAL
23423: AND
23424: ST_TO_ADDR
// end ;
23425: LD_VAR 0 3
23429: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
23430: LD_INT 0
23432: PPUSH
23433: PPUSH
23434: PPUSH
23435: PPUSH
23436: PPUSH
23437: PPUSH
23438: PPUSH
23439: PPUSH
23440: PPUSH
23441: PPUSH
23442: PPUSH
// result := false ;
23443: LD_ADDR_VAR 0 8
23447: PUSH
23448: LD_INT 0
23450: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
23451: LD_VAR 0 5
23455: NOT
23456: PUSH
23457: LD_VAR 0 1
23461: NOT
23462: OR
23463: PUSH
23464: LD_VAR 0 2
23468: NOT
23469: OR
23470: PUSH
23471: LD_VAR 0 3
23475: NOT
23476: OR
23477: IFFALSE 23481
// exit ;
23479: GO 24295
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
23481: LD_ADDR_VAR 0 14
23485: PUSH
23486: LD_VAR 0 1
23490: PPUSH
23491: LD_VAR 0 2
23495: PPUSH
23496: LD_VAR 0 3
23500: PPUSH
23501: LD_VAR 0 4
23505: PPUSH
23506: LD_VAR 0 5
23510: PUSH
23511: LD_INT 1
23513: ARRAY
23514: PPUSH
23515: CALL_OW 248
23519: PPUSH
23520: LD_INT 0
23522: PPUSH
23523: CALL 25532 0 6
23527: ST_TO_ADDR
// if not hexes then
23528: LD_VAR 0 14
23532: NOT
23533: IFFALSE 23537
// exit ;
23535: GO 24295
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23537: LD_ADDR_VAR 0 17
23541: PUSH
23542: LD_VAR 0 5
23546: PPUSH
23547: LD_INT 22
23549: PUSH
23550: LD_VAR 0 13
23554: PPUSH
23555: CALL_OW 255
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 2
23566: PUSH
23567: LD_INT 30
23569: PUSH
23570: LD_INT 0
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 30
23579: PUSH
23580: LD_INT 1
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: LIST
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PPUSH
23596: CALL_OW 72
23600: ST_TO_ADDR
// for i = 1 to hexes do
23601: LD_ADDR_VAR 0 9
23605: PUSH
23606: DOUBLE
23607: LD_INT 1
23609: DEC
23610: ST_TO_ADDR
23611: LD_VAR 0 14
23615: PUSH
23616: FOR_TO
23617: IFFALSE 24293
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23619: LD_ADDR_VAR 0 13
23623: PUSH
23624: LD_VAR 0 14
23628: PUSH
23629: LD_VAR 0 9
23633: ARRAY
23634: PUSH
23635: LD_INT 1
23637: ARRAY
23638: PPUSH
23639: LD_VAR 0 14
23643: PUSH
23644: LD_VAR 0 9
23648: ARRAY
23649: PUSH
23650: LD_INT 2
23652: ARRAY
23653: PPUSH
23654: CALL_OW 428
23658: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
23659: LD_VAR 0 14
23663: PUSH
23664: LD_VAR 0 9
23668: ARRAY
23669: PUSH
23670: LD_INT 1
23672: ARRAY
23673: PPUSH
23674: LD_VAR 0 14
23678: PUSH
23679: LD_VAR 0 9
23683: ARRAY
23684: PUSH
23685: LD_INT 2
23687: ARRAY
23688: PPUSH
23689: CALL_OW 351
23693: PUSH
23694: LD_VAR 0 14
23698: PUSH
23699: LD_VAR 0 9
23703: ARRAY
23704: PUSH
23705: LD_INT 1
23707: ARRAY
23708: PPUSH
23709: LD_VAR 0 14
23713: PUSH
23714: LD_VAR 0 9
23718: ARRAY
23719: PUSH
23720: LD_INT 2
23722: ARRAY
23723: PPUSH
23724: CALL_OW 488
23728: NOT
23729: OR
23730: PUSH
23731: LD_VAR 0 13
23735: PPUSH
23736: CALL_OW 247
23740: PUSH
23741: LD_INT 3
23743: EQUAL
23744: OR
23745: IFFALSE 23751
// exit ;
23747: POP
23748: POP
23749: GO 24295
// if not tmp then
23751: LD_VAR 0 13
23755: NOT
23756: IFFALSE 23760
// continue ;
23758: GO 23616
// result := true ;
23760: LD_ADDR_VAR 0 8
23764: PUSH
23765: LD_INT 1
23767: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
23768: LD_VAR 0 6
23772: PUSH
23773: LD_VAR 0 13
23777: PPUSH
23778: CALL_OW 247
23782: PUSH
23783: LD_INT 2
23785: EQUAL
23786: AND
23787: PUSH
23788: LD_VAR 0 13
23792: PPUSH
23793: CALL_OW 263
23797: PUSH
23798: LD_INT 1
23800: EQUAL
23801: AND
23802: IFFALSE 23966
// begin if IsDrivenBy ( tmp ) then
23804: LD_VAR 0 13
23808: PPUSH
23809: CALL_OW 311
23813: IFFALSE 23817
// continue ;
23815: GO 23616
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
23817: LD_VAR 0 6
23821: PPUSH
23822: LD_INT 3
23824: PUSH
23825: LD_INT 60
23827: PUSH
23828: EMPTY
23829: LIST
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 3
23837: PUSH
23838: LD_INT 55
23840: PUSH
23841: EMPTY
23842: LIST
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PPUSH
23852: CALL_OW 72
23856: IFFALSE 23964
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
23858: LD_ADDR_VAR 0 18
23862: PUSH
23863: LD_VAR 0 6
23867: PPUSH
23868: LD_INT 3
23870: PUSH
23871: LD_INT 60
23873: PUSH
23874: EMPTY
23875: LIST
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 3
23883: PUSH
23884: LD_INT 55
23886: PUSH
23887: EMPTY
23888: LIST
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PPUSH
23898: CALL_OW 72
23902: PUSH
23903: LD_INT 1
23905: ARRAY
23906: ST_TO_ADDR
// if IsInUnit ( driver ) then
23907: LD_VAR 0 18
23911: PPUSH
23912: CALL_OW 310
23916: IFFALSE 23927
// ComExit ( driver ) ;
23918: LD_VAR 0 18
23922: PPUSH
23923: CALL 48716 0 1
// AddComEnterUnit ( driver , tmp ) ;
23927: LD_VAR 0 18
23931: PPUSH
23932: LD_VAR 0 13
23936: PPUSH
23937: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
23941: LD_VAR 0 18
23945: PPUSH
23946: LD_VAR 0 7
23950: PPUSH
23951: CALL_OW 173
// AddComExitVehicle ( driver ) ;
23955: LD_VAR 0 18
23959: PPUSH
23960: CALL_OW 181
// end ; continue ;
23964: GO 23616
// end ; if not cleaners or not tmp in cleaners then
23966: LD_VAR 0 6
23970: NOT
23971: PUSH
23972: LD_VAR 0 13
23976: PUSH
23977: LD_VAR 0 6
23981: IN
23982: NOT
23983: OR
23984: IFFALSE 24291
// begin if dep then
23986: LD_VAR 0 17
23990: IFFALSE 24126
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
23992: LD_ADDR_VAR 0 16
23996: PUSH
23997: LD_VAR 0 17
24001: PUSH
24002: LD_INT 1
24004: ARRAY
24005: PPUSH
24006: CALL_OW 250
24010: PPUSH
24011: LD_VAR 0 17
24015: PUSH
24016: LD_INT 1
24018: ARRAY
24019: PPUSH
24020: CALL_OW 254
24024: PPUSH
24025: LD_INT 5
24027: PPUSH
24028: CALL_OW 272
24032: PUSH
24033: LD_VAR 0 17
24037: PUSH
24038: LD_INT 1
24040: ARRAY
24041: PPUSH
24042: CALL_OW 251
24046: PPUSH
24047: LD_VAR 0 17
24051: PUSH
24052: LD_INT 1
24054: ARRAY
24055: PPUSH
24056: CALL_OW 254
24060: PPUSH
24061: LD_INT 5
24063: PPUSH
24064: CALL_OW 273
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
24073: LD_VAR 0 16
24077: PUSH
24078: LD_INT 1
24080: ARRAY
24081: PPUSH
24082: LD_VAR 0 16
24086: PUSH
24087: LD_INT 2
24089: ARRAY
24090: PPUSH
24091: CALL_OW 488
24095: IFFALSE 24126
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
24097: LD_VAR 0 13
24101: PPUSH
24102: LD_VAR 0 16
24106: PUSH
24107: LD_INT 1
24109: ARRAY
24110: PPUSH
24111: LD_VAR 0 16
24115: PUSH
24116: LD_INT 2
24118: ARRAY
24119: PPUSH
24120: CALL_OW 111
// continue ;
24124: GO 23616
// end ; end ; r := GetDir ( tmp ) ;
24126: LD_ADDR_VAR 0 15
24130: PUSH
24131: LD_VAR 0 13
24135: PPUSH
24136: CALL_OW 254
24140: ST_TO_ADDR
// if r = 5 then
24141: LD_VAR 0 15
24145: PUSH
24146: LD_INT 5
24148: EQUAL
24149: IFFALSE 24159
// r := 0 ;
24151: LD_ADDR_VAR 0 15
24155: PUSH
24156: LD_INT 0
24158: ST_TO_ADDR
// for j = r to 5 do
24159: LD_ADDR_VAR 0 10
24163: PUSH
24164: DOUBLE
24165: LD_VAR 0 15
24169: DEC
24170: ST_TO_ADDR
24171: LD_INT 5
24173: PUSH
24174: FOR_TO
24175: IFFALSE 24289
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
24177: LD_ADDR_VAR 0 11
24181: PUSH
24182: LD_VAR 0 13
24186: PPUSH
24187: CALL_OW 250
24191: PPUSH
24192: LD_VAR 0 10
24196: PPUSH
24197: LD_INT 2
24199: PPUSH
24200: CALL_OW 272
24204: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
24205: LD_ADDR_VAR 0 12
24209: PUSH
24210: LD_VAR 0 13
24214: PPUSH
24215: CALL_OW 251
24219: PPUSH
24220: LD_VAR 0 10
24224: PPUSH
24225: LD_INT 2
24227: PPUSH
24228: CALL_OW 273
24232: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
24233: LD_VAR 0 11
24237: PPUSH
24238: LD_VAR 0 12
24242: PPUSH
24243: CALL_OW 488
24247: PUSH
24248: LD_VAR 0 11
24252: PPUSH
24253: LD_VAR 0 12
24257: PPUSH
24258: CALL_OW 428
24262: NOT
24263: AND
24264: IFFALSE 24287
// begin ComMoveXY ( tmp , _x , _y ) ;
24266: LD_VAR 0 13
24270: PPUSH
24271: LD_VAR 0 11
24275: PPUSH
24276: LD_VAR 0 12
24280: PPUSH
24281: CALL_OW 111
// break ;
24285: GO 24289
// end ; end ;
24287: GO 24174
24289: POP
24290: POP
// end ; end ;
24291: GO 23616
24293: POP
24294: POP
// end ;
24295: LD_VAR 0 8
24299: RET
// export function BuildingTechInvented ( side , btype ) ; begin
24300: LD_INT 0
24302: PPUSH
// result := true ;
24303: LD_ADDR_VAR 0 3
24307: PUSH
24308: LD_INT 1
24310: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
24311: LD_VAR 0 2
24315: PUSH
24316: LD_INT 24
24318: DOUBLE
24319: EQUAL
24320: IFTRUE 24330
24322: LD_INT 33
24324: DOUBLE
24325: EQUAL
24326: IFTRUE 24330
24328: GO 24355
24330: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
24331: LD_ADDR_VAR 0 3
24335: PUSH
24336: LD_INT 32
24338: PPUSH
24339: LD_VAR 0 1
24343: PPUSH
24344: CALL_OW 321
24348: PUSH
24349: LD_INT 2
24351: EQUAL
24352: ST_TO_ADDR
24353: GO 24675
24355: LD_INT 20
24357: DOUBLE
24358: EQUAL
24359: IFTRUE 24363
24361: GO 24388
24363: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
24364: LD_ADDR_VAR 0 3
24368: PUSH
24369: LD_INT 6
24371: PPUSH
24372: LD_VAR 0 1
24376: PPUSH
24377: CALL_OW 321
24381: PUSH
24382: LD_INT 2
24384: EQUAL
24385: ST_TO_ADDR
24386: GO 24675
24388: LD_INT 22
24390: DOUBLE
24391: EQUAL
24392: IFTRUE 24402
24394: LD_INT 36
24396: DOUBLE
24397: EQUAL
24398: IFTRUE 24402
24400: GO 24427
24402: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
24403: LD_ADDR_VAR 0 3
24407: PUSH
24408: LD_INT 15
24410: PPUSH
24411: LD_VAR 0 1
24415: PPUSH
24416: CALL_OW 321
24420: PUSH
24421: LD_INT 2
24423: EQUAL
24424: ST_TO_ADDR
24425: GO 24675
24427: LD_INT 30
24429: DOUBLE
24430: EQUAL
24431: IFTRUE 24435
24433: GO 24460
24435: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
24436: LD_ADDR_VAR 0 3
24440: PUSH
24441: LD_INT 20
24443: PPUSH
24444: LD_VAR 0 1
24448: PPUSH
24449: CALL_OW 321
24453: PUSH
24454: LD_INT 2
24456: EQUAL
24457: ST_TO_ADDR
24458: GO 24675
24460: LD_INT 28
24462: DOUBLE
24463: EQUAL
24464: IFTRUE 24474
24466: LD_INT 21
24468: DOUBLE
24469: EQUAL
24470: IFTRUE 24474
24472: GO 24499
24474: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
24475: LD_ADDR_VAR 0 3
24479: PUSH
24480: LD_INT 21
24482: PPUSH
24483: LD_VAR 0 1
24487: PPUSH
24488: CALL_OW 321
24492: PUSH
24493: LD_INT 2
24495: EQUAL
24496: ST_TO_ADDR
24497: GO 24675
24499: LD_INT 16
24501: DOUBLE
24502: EQUAL
24503: IFTRUE 24507
24505: GO 24534
24507: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
24508: LD_ADDR_VAR 0 3
24512: PUSH
24513: LD_EXP 50
24517: PPUSH
24518: LD_VAR 0 1
24522: PPUSH
24523: CALL_OW 321
24527: PUSH
24528: LD_INT 2
24530: EQUAL
24531: ST_TO_ADDR
24532: GO 24675
24534: LD_INT 19
24536: DOUBLE
24537: EQUAL
24538: IFTRUE 24548
24540: LD_INT 23
24542: DOUBLE
24543: EQUAL
24544: IFTRUE 24548
24546: GO 24575
24548: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
24549: LD_ADDR_VAR 0 3
24553: PUSH
24554: LD_EXP 49
24558: PPUSH
24559: LD_VAR 0 1
24563: PPUSH
24564: CALL_OW 321
24568: PUSH
24569: LD_INT 2
24571: EQUAL
24572: ST_TO_ADDR
24573: GO 24675
24575: LD_INT 17
24577: DOUBLE
24578: EQUAL
24579: IFTRUE 24583
24581: GO 24608
24583: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
24584: LD_ADDR_VAR 0 3
24588: PUSH
24589: LD_INT 39
24591: PPUSH
24592: LD_VAR 0 1
24596: PPUSH
24597: CALL_OW 321
24601: PUSH
24602: LD_INT 2
24604: EQUAL
24605: ST_TO_ADDR
24606: GO 24675
24608: LD_INT 18
24610: DOUBLE
24611: EQUAL
24612: IFTRUE 24616
24614: GO 24641
24616: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
24617: LD_ADDR_VAR 0 3
24621: PUSH
24622: LD_INT 40
24624: PPUSH
24625: LD_VAR 0 1
24629: PPUSH
24630: CALL_OW 321
24634: PUSH
24635: LD_INT 2
24637: EQUAL
24638: ST_TO_ADDR
24639: GO 24675
24641: LD_INT 27
24643: DOUBLE
24644: EQUAL
24645: IFTRUE 24649
24647: GO 24674
24649: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
24650: LD_ADDR_VAR 0 3
24654: PUSH
24655: LD_INT 35
24657: PPUSH
24658: LD_VAR 0 1
24662: PPUSH
24663: CALL_OW 321
24667: PUSH
24668: LD_INT 2
24670: EQUAL
24671: ST_TO_ADDR
24672: GO 24675
24674: POP
// end ;
24675: LD_VAR 0 3
24679: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
24680: LD_INT 0
24682: PPUSH
24683: PPUSH
24684: PPUSH
24685: PPUSH
24686: PPUSH
24687: PPUSH
24688: PPUSH
24689: PPUSH
24690: PPUSH
24691: PPUSH
24692: PPUSH
// result := false ;
24693: LD_ADDR_VAR 0 6
24697: PUSH
24698: LD_INT 0
24700: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
24701: LD_VAR 0 1
24705: NOT
24706: PUSH
24707: LD_VAR 0 1
24711: PPUSH
24712: CALL_OW 266
24716: PUSH
24717: LD_INT 0
24719: PUSH
24720: LD_INT 1
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: IN
24727: NOT
24728: OR
24729: PUSH
24730: LD_VAR 0 2
24734: NOT
24735: OR
24736: PUSH
24737: LD_VAR 0 5
24741: PUSH
24742: LD_INT 0
24744: PUSH
24745: LD_INT 1
24747: PUSH
24748: LD_INT 2
24750: PUSH
24751: LD_INT 3
24753: PUSH
24754: LD_INT 4
24756: PUSH
24757: LD_INT 5
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: IN
24768: NOT
24769: OR
24770: PUSH
24771: LD_VAR 0 3
24775: PPUSH
24776: LD_VAR 0 4
24780: PPUSH
24781: CALL_OW 488
24785: NOT
24786: OR
24787: IFFALSE 24791
// exit ;
24789: GO 25527
// side := GetSide ( depot ) ;
24791: LD_ADDR_VAR 0 9
24795: PUSH
24796: LD_VAR 0 1
24800: PPUSH
24801: CALL_OW 255
24805: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
24806: LD_VAR 0 9
24810: PPUSH
24811: LD_VAR 0 2
24815: PPUSH
24816: CALL 24300 0 2
24820: NOT
24821: IFFALSE 24825
// exit ;
24823: GO 25527
// pom := GetBase ( depot ) ;
24825: LD_ADDR_VAR 0 10
24829: PUSH
24830: LD_VAR 0 1
24834: PPUSH
24835: CALL_OW 274
24839: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
24840: LD_ADDR_VAR 0 11
24844: PUSH
24845: LD_VAR 0 2
24849: PPUSH
24850: LD_VAR 0 1
24854: PPUSH
24855: CALL_OW 248
24859: PPUSH
24860: CALL_OW 450
24864: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
24865: LD_VAR 0 10
24869: PPUSH
24870: LD_INT 1
24872: PPUSH
24873: CALL_OW 275
24877: PUSH
24878: LD_VAR 0 11
24882: PUSH
24883: LD_INT 1
24885: ARRAY
24886: GREATEREQUAL
24887: PUSH
24888: LD_VAR 0 10
24892: PPUSH
24893: LD_INT 2
24895: PPUSH
24896: CALL_OW 275
24900: PUSH
24901: LD_VAR 0 11
24905: PUSH
24906: LD_INT 2
24908: ARRAY
24909: GREATEREQUAL
24910: AND
24911: PUSH
24912: LD_VAR 0 10
24916: PPUSH
24917: LD_INT 3
24919: PPUSH
24920: CALL_OW 275
24924: PUSH
24925: LD_VAR 0 11
24929: PUSH
24930: LD_INT 3
24932: ARRAY
24933: GREATEREQUAL
24934: AND
24935: NOT
24936: IFFALSE 24940
// exit ;
24938: GO 25527
// if GetBType ( depot ) = b_depot then
24940: LD_VAR 0 1
24944: PPUSH
24945: CALL_OW 266
24949: PUSH
24950: LD_INT 0
24952: EQUAL
24953: IFFALSE 24965
// dist := 28 else
24955: LD_ADDR_VAR 0 14
24959: PUSH
24960: LD_INT 28
24962: ST_TO_ADDR
24963: GO 24973
// dist := 36 ;
24965: LD_ADDR_VAR 0 14
24969: PUSH
24970: LD_INT 36
24972: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
24973: LD_VAR 0 1
24977: PPUSH
24978: LD_VAR 0 3
24982: PPUSH
24983: LD_VAR 0 4
24987: PPUSH
24988: CALL_OW 297
24992: PUSH
24993: LD_VAR 0 14
24997: GREATER
24998: IFFALSE 25002
// exit ;
25000: GO 25527
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
25002: LD_ADDR_VAR 0 12
25006: PUSH
25007: LD_VAR 0 2
25011: PPUSH
25012: LD_VAR 0 3
25016: PPUSH
25017: LD_VAR 0 4
25021: PPUSH
25022: LD_VAR 0 5
25026: PPUSH
25027: LD_VAR 0 1
25031: PPUSH
25032: CALL_OW 248
25036: PPUSH
25037: LD_INT 0
25039: PPUSH
25040: CALL 25532 0 6
25044: ST_TO_ADDR
// if not hexes then
25045: LD_VAR 0 12
25049: NOT
25050: IFFALSE 25054
// exit ;
25052: GO 25527
// hex := GetHexInfo ( x , y ) ;
25054: LD_ADDR_VAR 0 15
25058: PUSH
25059: LD_VAR 0 3
25063: PPUSH
25064: LD_VAR 0 4
25068: PPUSH
25069: CALL_OW 546
25073: ST_TO_ADDR
// if hex [ 1 ] then
25074: LD_VAR 0 15
25078: PUSH
25079: LD_INT 1
25081: ARRAY
25082: IFFALSE 25086
// exit ;
25084: GO 25527
// height := hex [ 2 ] ;
25086: LD_ADDR_VAR 0 13
25090: PUSH
25091: LD_VAR 0 15
25095: PUSH
25096: LD_INT 2
25098: ARRAY
25099: ST_TO_ADDR
// for i = 1 to hexes do
25100: LD_ADDR_VAR 0 7
25104: PUSH
25105: DOUBLE
25106: LD_INT 1
25108: DEC
25109: ST_TO_ADDR
25110: LD_VAR 0 12
25114: PUSH
25115: FOR_TO
25116: IFFALSE 25446
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
25118: LD_VAR 0 12
25122: PUSH
25123: LD_VAR 0 7
25127: ARRAY
25128: PUSH
25129: LD_INT 1
25131: ARRAY
25132: PPUSH
25133: LD_VAR 0 12
25137: PUSH
25138: LD_VAR 0 7
25142: ARRAY
25143: PUSH
25144: LD_INT 2
25146: ARRAY
25147: PPUSH
25148: CALL_OW 488
25152: NOT
25153: PUSH
25154: LD_VAR 0 12
25158: PUSH
25159: LD_VAR 0 7
25163: ARRAY
25164: PUSH
25165: LD_INT 1
25167: ARRAY
25168: PPUSH
25169: LD_VAR 0 12
25173: PUSH
25174: LD_VAR 0 7
25178: ARRAY
25179: PUSH
25180: LD_INT 2
25182: ARRAY
25183: PPUSH
25184: CALL_OW 428
25188: PUSH
25189: LD_INT 0
25191: GREATER
25192: OR
25193: PUSH
25194: LD_VAR 0 12
25198: PUSH
25199: LD_VAR 0 7
25203: ARRAY
25204: PUSH
25205: LD_INT 1
25207: ARRAY
25208: PPUSH
25209: LD_VAR 0 12
25213: PUSH
25214: LD_VAR 0 7
25218: ARRAY
25219: PUSH
25220: LD_INT 2
25222: ARRAY
25223: PPUSH
25224: CALL_OW 351
25228: OR
25229: IFFALSE 25235
// exit ;
25231: POP
25232: POP
25233: GO 25527
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25235: LD_ADDR_VAR 0 8
25239: PUSH
25240: LD_VAR 0 12
25244: PUSH
25245: LD_VAR 0 7
25249: ARRAY
25250: PUSH
25251: LD_INT 1
25253: ARRAY
25254: PPUSH
25255: LD_VAR 0 12
25259: PUSH
25260: LD_VAR 0 7
25264: ARRAY
25265: PUSH
25266: LD_INT 2
25268: ARRAY
25269: PPUSH
25270: CALL_OW 546
25274: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
25275: LD_VAR 0 8
25279: PUSH
25280: LD_INT 1
25282: ARRAY
25283: PUSH
25284: LD_VAR 0 8
25288: PUSH
25289: LD_INT 2
25291: ARRAY
25292: PUSH
25293: LD_VAR 0 13
25297: PUSH
25298: LD_INT 2
25300: PLUS
25301: GREATER
25302: OR
25303: PUSH
25304: LD_VAR 0 8
25308: PUSH
25309: LD_INT 2
25311: ARRAY
25312: PUSH
25313: LD_VAR 0 13
25317: PUSH
25318: LD_INT 2
25320: MINUS
25321: LESS
25322: OR
25323: PUSH
25324: LD_VAR 0 8
25328: PUSH
25329: LD_INT 3
25331: ARRAY
25332: PUSH
25333: LD_INT 0
25335: PUSH
25336: LD_INT 8
25338: PUSH
25339: LD_INT 9
25341: PUSH
25342: LD_INT 10
25344: PUSH
25345: LD_INT 11
25347: PUSH
25348: LD_INT 12
25350: PUSH
25351: LD_INT 13
25353: PUSH
25354: LD_INT 16
25356: PUSH
25357: LD_INT 17
25359: PUSH
25360: LD_INT 18
25362: PUSH
25363: LD_INT 19
25365: PUSH
25366: LD_INT 20
25368: PUSH
25369: LD_INT 21
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: IN
25387: NOT
25388: OR
25389: PUSH
25390: LD_VAR 0 8
25394: PUSH
25395: LD_INT 5
25397: ARRAY
25398: NOT
25399: OR
25400: PUSH
25401: LD_VAR 0 8
25405: PUSH
25406: LD_INT 6
25408: ARRAY
25409: PUSH
25410: LD_INT 1
25412: PUSH
25413: LD_INT 2
25415: PUSH
25416: LD_INT 7
25418: PUSH
25419: LD_INT 9
25421: PUSH
25422: LD_INT 10
25424: PUSH
25425: LD_INT 11
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: IN
25436: NOT
25437: OR
25438: IFFALSE 25444
// exit ;
25440: POP
25441: POP
25442: GO 25527
// end ;
25444: GO 25115
25446: POP
25447: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
25448: LD_VAR 0 9
25452: PPUSH
25453: LD_VAR 0 3
25457: PPUSH
25458: LD_VAR 0 4
25462: PPUSH
25463: LD_INT 20
25465: PPUSH
25466: CALL 17472 0 4
25470: PUSH
25471: LD_INT 4
25473: ARRAY
25474: IFFALSE 25478
// exit ;
25476: GO 25527
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
25478: LD_VAR 0 2
25482: PUSH
25483: LD_INT 29
25485: PUSH
25486: LD_INT 30
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: IN
25493: PUSH
25494: LD_VAR 0 3
25498: PPUSH
25499: LD_VAR 0 4
25503: PPUSH
25504: LD_VAR 0 9
25508: PPUSH
25509: CALL_OW 440
25513: NOT
25514: AND
25515: IFFALSE 25519
// exit ;
25517: GO 25527
// result := true ;
25519: LD_ADDR_VAR 0 6
25523: PUSH
25524: LD_INT 1
25526: ST_TO_ADDR
// end ;
25527: LD_VAR 0 6
25531: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
25532: LD_INT 0
25534: PPUSH
25535: PPUSH
25536: PPUSH
25537: PPUSH
25538: PPUSH
25539: PPUSH
25540: PPUSH
25541: PPUSH
25542: PPUSH
25543: PPUSH
25544: PPUSH
25545: PPUSH
25546: PPUSH
25547: PPUSH
25548: PPUSH
25549: PPUSH
25550: PPUSH
25551: PPUSH
25552: PPUSH
25553: PPUSH
25554: PPUSH
25555: PPUSH
25556: PPUSH
25557: PPUSH
25558: PPUSH
25559: PPUSH
25560: PPUSH
25561: PPUSH
25562: PPUSH
25563: PPUSH
25564: PPUSH
25565: PPUSH
25566: PPUSH
25567: PPUSH
25568: PPUSH
25569: PPUSH
25570: PPUSH
25571: PPUSH
25572: PPUSH
25573: PPUSH
25574: PPUSH
25575: PPUSH
25576: PPUSH
25577: PPUSH
25578: PPUSH
25579: PPUSH
25580: PPUSH
25581: PPUSH
25582: PPUSH
25583: PPUSH
25584: PPUSH
25585: PPUSH
25586: PPUSH
25587: PPUSH
25588: PPUSH
25589: PPUSH
25590: PPUSH
25591: PPUSH
// result = [ ] ;
25592: LD_ADDR_VAR 0 7
25596: PUSH
25597: EMPTY
25598: ST_TO_ADDR
// temp_list = [ ] ;
25599: LD_ADDR_VAR 0 9
25603: PUSH
25604: EMPTY
25605: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
25606: LD_VAR 0 4
25610: PUSH
25611: LD_INT 0
25613: PUSH
25614: LD_INT 1
25616: PUSH
25617: LD_INT 2
25619: PUSH
25620: LD_INT 3
25622: PUSH
25623: LD_INT 4
25625: PUSH
25626: LD_INT 5
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: IN
25637: NOT
25638: PUSH
25639: LD_VAR 0 1
25643: PUSH
25644: LD_INT 0
25646: PUSH
25647: LD_INT 1
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: IN
25654: PUSH
25655: LD_VAR 0 5
25659: PUSH
25660: LD_INT 1
25662: PUSH
25663: LD_INT 2
25665: PUSH
25666: LD_INT 3
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: LIST
25673: IN
25674: NOT
25675: AND
25676: OR
25677: IFFALSE 25681
// exit ;
25679: GO 44072
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
25681: LD_VAR 0 1
25685: PUSH
25686: LD_INT 6
25688: PUSH
25689: LD_INT 7
25691: PUSH
25692: LD_INT 8
25694: PUSH
25695: LD_INT 13
25697: PUSH
25698: LD_INT 12
25700: PUSH
25701: LD_INT 15
25703: PUSH
25704: LD_INT 11
25706: PUSH
25707: LD_INT 14
25709: PUSH
25710: LD_INT 10
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: IN
25724: IFFALSE 25734
// btype = b_lab ;
25726: LD_ADDR_VAR 0 1
25730: PUSH
25731: LD_INT 6
25733: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
25734: LD_VAR 0 6
25738: PUSH
25739: LD_INT 0
25741: PUSH
25742: LD_INT 1
25744: PUSH
25745: LD_INT 2
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: LIST
25752: IN
25753: NOT
25754: PUSH
25755: LD_VAR 0 1
25759: PUSH
25760: LD_INT 0
25762: PUSH
25763: LD_INT 1
25765: PUSH
25766: LD_INT 2
25768: PUSH
25769: LD_INT 3
25771: PUSH
25772: LD_INT 6
25774: PUSH
25775: LD_INT 36
25777: PUSH
25778: LD_INT 4
25780: PUSH
25781: LD_INT 5
25783: PUSH
25784: LD_INT 31
25786: PUSH
25787: LD_INT 32
25789: PUSH
25790: LD_INT 33
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: IN
25806: NOT
25807: PUSH
25808: LD_VAR 0 6
25812: PUSH
25813: LD_INT 1
25815: EQUAL
25816: AND
25817: OR
25818: PUSH
25819: LD_VAR 0 1
25823: PUSH
25824: LD_INT 2
25826: PUSH
25827: LD_INT 3
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: IN
25834: NOT
25835: PUSH
25836: LD_VAR 0 6
25840: PUSH
25841: LD_INT 2
25843: EQUAL
25844: AND
25845: OR
25846: IFFALSE 25856
// mode = 0 ;
25848: LD_ADDR_VAR 0 6
25852: PUSH
25853: LD_INT 0
25855: ST_TO_ADDR
// case mode of 0 :
25856: LD_VAR 0 6
25860: PUSH
25861: LD_INT 0
25863: DOUBLE
25864: EQUAL
25865: IFTRUE 25869
25867: GO 37322
25869: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25870: LD_ADDR_VAR 0 11
25874: PUSH
25875: LD_INT 0
25877: PUSH
25878: LD_INT 0
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: LD_INT 0
25887: PUSH
25888: LD_INT 1
25890: NEG
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 1
25898: PUSH
25899: LD_INT 0
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 1
25908: PUSH
25909: LD_INT 1
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 0
25918: PUSH
25919: LD_INT 1
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 1
25928: NEG
25929: PUSH
25930: LD_INT 0
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: LD_INT 1
25939: NEG
25940: PUSH
25941: LD_INT 1
25943: NEG
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 1
25951: NEG
25952: PUSH
25953: LD_INT 2
25955: NEG
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 0
25963: PUSH
25964: LD_INT 2
25966: NEG
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 1
25974: PUSH
25975: LD_INT 1
25977: NEG
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 1
25985: PUSH
25986: LD_INT 2
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 0
25995: PUSH
25996: LD_INT 2
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: LD_INT 1
26005: NEG
26006: PUSH
26007: LD_INT 1
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 1
26016: PUSH
26017: LD_INT 3
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 0
26026: PUSH
26027: LD_INT 3
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 1
26036: NEG
26037: PUSH
26038: LD_INT 2
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26063: LD_ADDR_VAR 0 12
26067: PUSH
26068: LD_INT 0
26070: PUSH
26071: LD_INT 0
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: LD_INT 0
26080: PUSH
26081: LD_INT 1
26083: NEG
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 1
26091: PUSH
26092: LD_INT 0
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 1
26101: PUSH
26102: LD_INT 1
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 0
26111: PUSH
26112: LD_INT 1
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_INT 1
26121: NEG
26122: PUSH
26123: LD_INT 0
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 1
26132: NEG
26133: PUSH
26134: LD_INT 1
26136: NEG
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 1
26144: PUSH
26145: LD_INT 1
26147: NEG
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 2
26155: PUSH
26156: LD_INT 0
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: LD_INT 2
26165: PUSH
26166: LD_INT 1
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PUSH
26173: LD_INT 1
26175: NEG
26176: PUSH
26177: LD_INT 1
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 2
26186: NEG
26187: PUSH
26188: LD_INT 0
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 2
26197: NEG
26198: PUSH
26199: LD_INT 1
26201: NEG
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 2
26209: NEG
26210: PUSH
26211: LD_INT 1
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 3
26220: NEG
26221: PUSH
26222: LD_INT 0
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 3
26231: NEG
26232: PUSH
26233: LD_INT 1
26235: NEG
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26259: LD_ADDR_VAR 0 13
26263: PUSH
26264: LD_INT 0
26266: PUSH
26267: LD_INT 0
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 0
26276: PUSH
26277: LD_INT 1
26279: NEG
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 1
26287: PUSH
26288: LD_INT 0
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 1
26297: PUSH
26298: LD_INT 1
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 0
26307: PUSH
26308: LD_INT 1
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 1
26317: NEG
26318: PUSH
26319: LD_INT 0
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PUSH
26326: LD_INT 1
26328: NEG
26329: PUSH
26330: LD_INT 1
26332: NEG
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 1
26340: NEG
26341: PUSH
26342: LD_INT 2
26344: NEG
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 2
26352: PUSH
26353: LD_INT 1
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 2
26362: PUSH
26363: LD_INT 2
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 1
26372: PUSH
26373: LD_INT 2
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 2
26382: NEG
26383: PUSH
26384: LD_INT 1
26386: NEG
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 2
26394: NEG
26395: PUSH
26396: LD_INT 2
26398: NEG
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 2
26406: NEG
26407: PUSH
26408: LD_INT 3
26410: NEG
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 3
26418: NEG
26419: PUSH
26420: LD_INT 2
26422: NEG
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 3
26430: NEG
26431: PUSH
26432: LD_INT 3
26434: NEG
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26458: LD_ADDR_VAR 0 14
26462: PUSH
26463: LD_INT 0
26465: PUSH
26466: LD_INT 0
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 0
26475: PUSH
26476: LD_INT 1
26478: NEG
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: LD_INT 1
26486: PUSH
26487: LD_INT 0
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PUSH
26494: LD_INT 1
26496: PUSH
26497: LD_INT 1
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 0
26506: PUSH
26507: LD_INT 1
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: LD_INT 1
26516: NEG
26517: PUSH
26518: LD_INT 0
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 1
26527: NEG
26528: PUSH
26529: LD_INT 1
26531: NEG
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 1
26539: NEG
26540: PUSH
26541: LD_INT 2
26543: NEG
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 0
26551: PUSH
26552: LD_INT 2
26554: NEG
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 1
26562: PUSH
26563: LD_INT 1
26565: NEG
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 1
26573: PUSH
26574: LD_INT 2
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 0
26583: PUSH
26584: LD_INT 2
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 1
26593: NEG
26594: PUSH
26595: LD_INT 1
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 1
26604: NEG
26605: PUSH
26606: LD_INT 3
26608: NEG
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 0
26616: PUSH
26617: LD_INT 3
26619: NEG
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 1
26627: PUSH
26628: LD_INT 2
26630: NEG
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26654: LD_ADDR_VAR 0 15
26658: PUSH
26659: LD_INT 0
26661: PUSH
26662: LD_INT 0
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 0
26671: PUSH
26672: LD_INT 1
26674: NEG
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 1
26682: PUSH
26683: LD_INT 0
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: LD_INT 1
26692: PUSH
26693: LD_INT 1
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 0
26702: PUSH
26703: LD_INT 1
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 1
26712: NEG
26713: PUSH
26714: LD_INT 0
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 1
26723: NEG
26724: PUSH
26725: LD_INT 1
26727: NEG
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 1
26735: PUSH
26736: LD_INT 1
26738: NEG
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 2
26746: PUSH
26747: LD_INT 0
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 2
26756: PUSH
26757: LD_INT 1
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 1
26766: NEG
26767: PUSH
26768: LD_INT 1
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 2
26777: NEG
26778: PUSH
26779: LD_INT 0
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 2
26788: NEG
26789: PUSH
26790: LD_INT 1
26792: NEG
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 2
26800: PUSH
26801: LD_INT 1
26803: NEG
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 3
26811: PUSH
26812: LD_INT 0
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 3
26821: PUSH
26822: LD_INT 1
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26847: LD_ADDR_VAR 0 16
26851: PUSH
26852: LD_INT 0
26854: PUSH
26855: LD_INT 0
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 0
26864: PUSH
26865: LD_INT 1
26867: NEG
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: LD_INT 1
26875: PUSH
26876: LD_INT 0
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 1
26885: PUSH
26886: LD_INT 1
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 0
26895: PUSH
26896: LD_INT 1
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 1
26905: NEG
26906: PUSH
26907: LD_INT 0
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 1
26916: NEG
26917: PUSH
26918: LD_INT 1
26920: NEG
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 1
26928: NEG
26929: PUSH
26930: LD_INT 2
26932: NEG
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: LD_INT 2
26940: PUSH
26941: LD_INT 1
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: PUSH
26948: LD_INT 2
26950: PUSH
26951: LD_INT 2
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: PUSH
26958: LD_INT 1
26960: PUSH
26961: LD_INT 2
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 2
26970: NEG
26971: PUSH
26972: LD_INT 1
26974: NEG
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: LD_INT 2
26982: NEG
26983: PUSH
26984: LD_INT 2
26986: NEG
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 3
26994: PUSH
26995: LD_INT 2
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: LD_INT 3
27004: PUSH
27005: LD_INT 3
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 2
27014: PUSH
27015: LD_INT 3
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27040: LD_ADDR_VAR 0 17
27044: PUSH
27045: LD_INT 0
27047: PUSH
27048: LD_INT 0
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: LD_INT 0
27057: PUSH
27058: LD_INT 1
27060: NEG
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 1
27068: PUSH
27069: LD_INT 0
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 1
27078: PUSH
27079: LD_INT 1
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 0
27088: PUSH
27089: LD_INT 1
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 1
27098: NEG
27099: PUSH
27100: LD_INT 0
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 1
27109: NEG
27110: PUSH
27111: LD_INT 1
27113: NEG
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 1
27121: NEG
27122: PUSH
27123: LD_INT 2
27125: NEG
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 0
27133: PUSH
27134: LD_INT 2
27136: NEG
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 1
27144: PUSH
27145: LD_INT 1
27147: NEG
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 2
27155: PUSH
27156: LD_INT 0
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 2
27165: PUSH
27166: LD_INT 1
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 2
27175: PUSH
27176: LD_INT 2
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 1
27185: PUSH
27186: LD_INT 2
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 0
27195: PUSH
27196: LD_INT 2
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 1
27205: NEG
27206: PUSH
27207: LD_INT 1
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 2
27216: NEG
27217: PUSH
27218: LD_INT 0
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 2
27227: NEG
27228: PUSH
27229: LD_INT 1
27231: NEG
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 2
27239: NEG
27240: PUSH
27241: LD_INT 2
27243: NEG
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27270: LD_ADDR_VAR 0 18
27274: PUSH
27275: LD_INT 0
27277: PUSH
27278: LD_INT 0
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 0
27287: PUSH
27288: LD_INT 1
27290: NEG
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 1
27298: PUSH
27299: LD_INT 0
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 1
27308: PUSH
27309: LD_INT 1
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 0
27318: PUSH
27319: LD_INT 1
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 1
27328: NEG
27329: PUSH
27330: LD_INT 0
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 1
27339: NEG
27340: PUSH
27341: LD_INT 1
27343: NEG
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 1
27351: NEG
27352: PUSH
27353: LD_INT 2
27355: NEG
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: LD_INT 0
27363: PUSH
27364: LD_INT 2
27366: NEG
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 1
27374: PUSH
27375: LD_INT 1
27377: NEG
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: LD_INT 2
27385: PUSH
27386: LD_INT 0
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 2
27395: PUSH
27396: LD_INT 1
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 2
27405: PUSH
27406: LD_INT 2
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 1
27415: PUSH
27416: LD_INT 2
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 0
27425: PUSH
27426: LD_INT 2
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 1
27435: NEG
27436: PUSH
27437: LD_INT 1
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 2
27446: NEG
27447: PUSH
27448: LD_INT 0
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: LD_INT 2
27457: NEG
27458: PUSH
27459: LD_INT 1
27461: NEG
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 2
27469: NEG
27470: PUSH
27471: LD_INT 2
27473: NEG
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27500: LD_ADDR_VAR 0 19
27504: PUSH
27505: LD_INT 0
27507: PUSH
27508: LD_INT 0
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: LD_INT 0
27517: PUSH
27518: LD_INT 1
27520: NEG
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 1
27528: PUSH
27529: LD_INT 0
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 1
27538: PUSH
27539: LD_INT 1
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: PUSH
27546: LD_INT 0
27548: PUSH
27549: LD_INT 1
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 1
27558: NEG
27559: PUSH
27560: LD_INT 0
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 1
27569: NEG
27570: PUSH
27571: LD_INT 1
27573: NEG
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 1
27581: NEG
27582: PUSH
27583: LD_INT 2
27585: NEG
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 0
27593: PUSH
27594: LD_INT 2
27596: NEG
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 1
27604: PUSH
27605: LD_INT 1
27607: NEG
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 2
27615: PUSH
27616: LD_INT 0
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 2
27625: PUSH
27626: LD_INT 1
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 2
27635: PUSH
27636: LD_INT 2
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 1
27645: PUSH
27646: LD_INT 2
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 0
27655: PUSH
27656: LD_INT 2
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 1
27665: NEG
27666: PUSH
27667: LD_INT 1
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 2
27676: NEG
27677: PUSH
27678: LD_INT 0
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 2
27687: NEG
27688: PUSH
27689: LD_INT 1
27691: NEG
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 2
27699: NEG
27700: PUSH
27701: LD_INT 2
27703: NEG
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27730: LD_ADDR_VAR 0 20
27734: PUSH
27735: LD_INT 0
27737: PUSH
27738: LD_INT 0
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 0
27747: PUSH
27748: LD_INT 1
27750: NEG
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 1
27758: PUSH
27759: LD_INT 0
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 1
27768: PUSH
27769: LD_INT 1
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 0
27778: PUSH
27779: LD_INT 1
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 1
27788: NEG
27789: PUSH
27790: LD_INT 0
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 1
27799: NEG
27800: PUSH
27801: LD_INT 1
27803: NEG
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 1
27811: NEG
27812: PUSH
27813: LD_INT 2
27815: NEG
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 0
27823: PUSH
27824: LD_INT 2
27826: NEG
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 1
27834: PUSH
27835: LD_INT 1
27837: NEG
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 2
27845: PUSH
27846: LD_INT 0
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 2
27855: PUSH
27856: LD_INT 1
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 2
27865: PUSH
27866: LD_INT 2
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 1
27875: PUSH
27876: LD_INT 2
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 0
27885: PUSH
27886: LD_INT 2
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 1
27895: NEG
27896: PUSH
27897: LD_INT 1
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 2
27906: NEG
27907: PUSH
27908: LD_INT 0
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 2
27917: NEG
27918: PUSH
27919: LD_INT 1
27921: NEG
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 2
27929: NEG
27930: PUSH
27931: LD_INT 2
27933: NEG
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27960: LD_ADDR_VAR 0 21
27964: PUSH
27965: LD_INT 0
27967: PUSH
27968: LD_INT 0
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 0
27977: PUSH
27978: LD_INT 1
27980: NEG
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 1
27988: PUSH
27989: LD_INT 0
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: PUSH
27996: LD_INT 1
27998: PUSH
27999: LD_INT 1
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PUSH
28006: LD_INT 0
28008: PUSH
28009: LD_INT 1
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 1
28018: NEG
28019: PUSH
28020: LD_INT 0
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 1
28029: NEG
28030: PUSH
28031: LD_INT 1
28033: NEG
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 1
28041: NEG
28042: PUSH
28043: LD_INT 2
28045: NEG
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 0
28053: PUSH
28054: LD_INT 2
28056: NEG
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 1
28064: PUSH
28065: LD_INT 1
28067: NEG
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 2
28075: PUSH
28076: LD_INT 0
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 2
28085: PUSH
28086: LD_INT 1
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 2
28095: PUSH
28096: LD_INT 2
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 1
28105: PUSH
28106: LD_INT 2
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 0
28115: PUSH
28116: LD_INT 2
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 1
28125: NEG
28126: PUSH
28127: LD_INT 1
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 2
28136: NEG
28137: PUSH
28138: LD_INT 0
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 2
28147: NEG
28148: PUSH
28149: LD_INT 1
28151: NEG
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 2
28159: NEG
28160: PUSH
28161: LD_INT 2
28163: NEG
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28190: LD_ADDR_VAR 0 22
28194: PUSH
28195: LD_INT 0
28197: PUSH
28198: LD_INT 0
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 0
28207: PUSH
28208: LD_INT 1
28210: NEG
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 1
28218: PUSH
28219: LD_INT 0
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 1
28228: PUSH
28229: LD_INT 1
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: LD_INT 0
28238: PUSH
28239: LD_INT 1
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: LD_INT 1
28248: NEG
28249: PUSH
28250: LD_INT 0
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 1
28259: NEG
28260: PUSH
28261: LD_INT 1
28263: NEG
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 1
28271: NEG
28272: PUSH
28273: LD_INT 2
28275: NEG
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 0
28283: PUSH
28284: LD_INT 2
28286: NEG
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: LD_INT 1
28294: PUSH
28295: LD_INT 1
28297: NEG
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 2
28305: PUSH
28306: LD_INT 0
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 2
28315: PUSH
28316: LD_INT 1
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 2
28325: PUSH
28326: LD_INT 2
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 1
28335: PUSH
28336: LD_INT 2
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 0
28345: PUSH
28346: LD_INT 2
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: LD_INT 1
28355: NEG
28356: PUSH
28357: LD_INT 1
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 2
28366: NEG
28367: PUSH
28368: LD_INT 0
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 2
28377: NEG
28378: PUSH
28379: LD_INT 1
28381: NEG
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 2
28389: NEG
28390: PUSH
28391: LD_INT 2
28393: NEG
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28420: LD_ADDR_VAR 0 23
28424: PUSH
28425: LD_INT 0
28427: PUSH
28428: LD_INT 0
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: LD_INT 0
28437: PUSH
28438: LD_INT 1
28440: NEG
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 1
28448: PUSH
28449: LD_INT 0
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: LD_INT 1
28458: PUSH
28459: LD_INT 1
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: LD_INT 0
28468: PUSH
28469: LD_INT 1
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 1
28478: NEG
28479: PUSH
28480: LD_INT 0
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 1
28489: NEG
28490: PUSH
28491: LD_INT 1
28493: NEG
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 1
28501: NEG
28502: PUSH
28503: LD_INT 2
28505: NEG
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 0
28513: PUSH
28514: LD_INT 2
28516: NEG
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 1
28524: PUSH
28525: LD_INT 1
28527: NEG
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 2
28535: PUSH
28536: LD_INT 0
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 2
28545: PUSH
28546: LD_INT 1
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 2
28555: PUSH
28556: LD_INT 2
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 1
28565: PUSH
28566: LD_INT 2
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 0
28575: PUSH
28576: LD_INT 2
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 1
28585: NEG
28586: PUSH
28587: LD_INT 1
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 2
28596: NEG
28597: PUSH
28598: LD_INT 0
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 2
28607: NEG
28608: PUSH
28609: LD_INT 1
28611: NEG
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 2
28619: NEG
28620: PUSH
28621: LD_INT 2
28623: NEG
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 2
28631: NEG
28632: PUSH
28633: LD_INT 3
28635: NEG
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 1
28643: NEG
28644: PUSH
28645: LD_INT 3
28647: NEG
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 1
28655: PUSH
28656: LD_INT 2
28658: NEG
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 2
28666: PUSH
28667: LD_INT 1
28669: NEG
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
28700: LD_ADDR_VAR 0 24
28704: PUSH
28705: LD_INT 0
28707: PUSH
28708: LD_INT 0
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 0
28717: PUSH
28718: LD_INT 1
28720: NEG
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: LD_INT 1
28728: PUSH
28729: LD_INT 0
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 1
28738: PUSH
28739: LD_INT 1
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: LD_INT 0
28748: PUSH
28749: LD_INT 1
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: LD_INT 1
28758: NEG
28759: PUSH
28760: LD_INT 0
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 1
28769: NEG
28770: PUSH
28771: LD_INT 1
28773: NEG
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 1
28781: NEG
28782: PUSH
28783: LD_INT 2
28785: NEG
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 0
28793: PUSH
28794: LD_INT 2
28796: NEG
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 1
28804: PUSH
28805: LD_INT 1
28807: NEG
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 2
28815: PUSH
28816: LD_INT 0
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 2
28825: PUSH
28826: LD_INT 1
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 2
28835: PUSH
28836: LD_INT 2
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: LD_INT 1
28845: PUSH
28846: LD_INT 2
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: LD_INT 0
28855: PUSH
28856: LD_INT 2
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 1
28865: NEG
28866: PUSH
28867: LD_INT 1
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_INT 2
28876: NEG
28877: PUSH
28878: LD_INT 0
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 2
28887: NEG
28888: PUSH
28889: LD_INT 1
28891: NEG
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 2
28899: NEG
28900: PUSH
28901: LD_INT 2
28903: NEG
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 1
28911: PUSH
28912: LD_INT 2
28914: NEG
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 2
28922: PUSH
28923: LD_INT 1
28925: NEG
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 3
28933: PUSH
28934: LD_INT 1
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 3
28943: PUSH
28944: LD_INT 2
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28976: LD_ADDR_VAR 0 25
28980: PUSH
28981: LD_INT 0
28983: PUSH
28984: LD_INT 0
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 0
28993: PUSH
28994: LD_INT 1
28996: NEG
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 1
29004: PUSH
29005: LD_INT 0
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 1
29014: PUSH
29015: LD_INT 1
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 0
29024: PUSH
29025: LD_INT 1
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 1
29034: NEG
29035: PUSH
29036: LD_INT 0
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 1
29045: NEG
29046: PUSH
29047: LD_INT 1
29049: NEG
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 1
29057: NEG
29058: PUSH
29059: LD_INT 2
29061: NEG
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 0
29069: PUSH
29070: LD_INT 2
29072: NEG
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: LD_INT 1
29080: PUSH
29081: LD_INT 1
29083: NEG
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PUSH
29089: LD_INT 2
29091: PUSH
29092: LD_INT 0
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: PUSH
29099: LD_INT 2
29101: PUSH
29102: LD_INT 1
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 2
29111: PUSH
29112: LD_INT 2
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 1
29121: PUSH
29122: LD_INT 2
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 0
29131: PUSH
29132: LD_INT 2
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 1
29141: NEG
29142: PUSH
29143: LD_INT 1
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 2
29152: NEG
29153: PUSH
29154: LD_INT 0
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 2
29163: NEG
29164: PUSH
29165: LD_INT 1
29167: NEG
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 2
29175: NEG
29176: PUSH
29177: LD_INT 2
29179: NEG
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 3
29187: PUSH
29188: LD_INT 1
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 3
29197: PUSH
29198: LD_INT 2
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 2
29207: PUSH
29208: LD_INT 3
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 1
29217: PUSH
29218: LD_INT 3
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29250: LD_ADDR_VAR 0 26
29254: PUSH
29255: LD_INT 0
29257: PUSH
29258: LD_INT 0
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 0
29267: PUSH
29268: LD_INT 1
29270: NEG
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 1
29278: PUSH
29279: LD_INT 0
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PUSH
29286: LD_INT 1
29288: PUSH
29289: LD_INT 1
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 0
29298: PUSH
29299: LD_INT 1
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 1
29308: NEG
29309: PUSH
29310: LD_INT 0
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 1
29319: NEG
29320: PUSH
29321: LD_INT 1
29323: NEG
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 1
29331: NEG
29332: PUSH
29333: LD_INT 2
29335: NEG
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 0
29343: PUSH
29344: LD_INT 2
29346: NEG
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 1
29354: PUSH
29355: LD_INT 1
29357: NEG
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 2
29365: PUSH
29366: LD_INT 0
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 2
29375: PUSH
29376: LD_INT 1
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 2
29385: PUSH
29386: LD_INT 2
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 1
29395: PUSH
29396: LD_INT 2
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 0
29405: PUSH
29406: LD_INT 2
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 1
29415: NEG
29416: PUSH
29417: LD_INT 1
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 2
29426: NEG
29427: PUSH
29428: LD_INT 0
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 2
29437: NEG
29438: PUSH
29439: LD_INT 1
29441: NEG
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 2
29449: NEG
29450: PUSH
29451: LD_INT 2
29453: NEG
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 2
29461: PUSH
29462: LD_INT 3
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 1
29471: PUSH
29472: LD_INT 3
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 1
29481: NEG
29482: PUSH
29483: LD_INT 2
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 2
29492: NEG
29493: PUSH
29494: LD_INT 1
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29526: LD_ADDR_VAR 0 27
29530: PUSH
29531: LD_INT 0
29533: PUSH
29534: LD_INT 0
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 0
29543: PUSH
29544: LD_INT 1
29546: NEG
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 1
29554: PUSH
29555: LD_INT 0
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 1
29564: PUSH
29565: LD_INT 1
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 0
29574: PUSH
29575: LD_INT 1
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 1
29584: NEG
29585: PUSH
29586: LD_INT 0
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 1
29595: NEG
29596: PUSH
29597: LD_INT 1
29599: NEG
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: LD_INT 1
29607: NEG
29608: PUSH
29609: LD_INT 2
29611: NEG
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: LD_INT 0
29619: PUSH
29620: LD_INT 2
29622: NEG
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 1
29630: PUSH
29631: LD_INT 1
29633: NEG
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 2
29641: PUSH
29642: LD_INT 0
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 2
29651: PUSH
29652: LD_INT 1
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PUSH
29659: LD_INT 2
29661: PUSH
29662: LD_INT 2
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: LD_INT 1
29671: PUSH
29672: LD_INT 2
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PUSH
29679: LD_INT 0
29681: PUSH
29682: LD_INT 2
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 1
29691: NEG
29692: PUSH
29693: LD_INT 1
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 2
29702: NEG
29703: PUSH
29704: LD_INT 0
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 2
29713: NEG
29714: PUSH
29715: LD_INT 1
29717: NEG
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 2
29725: NEG
29726: PUSH
29727: LD_INT 2
29729: NEG
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 1
29737: NEG
29738: PUSH
29739: LD_INT 2
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: LD_INT 2
29748: NEG
29749: PUSH
29750: LD_INT 1
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: LD_INT 3
29759: NEG
29760: PUSH
29761: LD_INT 1
29763: NEG
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: LD_INT 3
29771: NEG
29772: PUSH
29773: LD_INT 2
29775: NEG
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29806: LD_ADDR_VAR 0 28
29810: PUSH
29811: LD_INT 0
29813: PUSH
29814: LD_INT 0
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 0
29823: PUSH
29824: LD_INT 1
29826: NEG
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 1
29834: PUSH
29835: LD_INT 0
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 1
29844: PUSH
29845: LD_INT 1
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 0
29854: PUSH
29855: LD_INT 1
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 1
29864: NEG
29865: PUSH
29866: LD_INT 0
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 1
29875: NEG
29876: PUSH
29877: LD_INT 1
29879: NEG
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 1
29887: NEG
29888: PUSH
29889: LD_INT 2
29891: NEG
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 0
29899: PUSH
29900: LD_INT 2
29902: NEG
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 1
29910: PUSH
29911: LD_INT 1
29913: NEG
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 2
29921: PUSH
29922: LD_INT 0
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 2
29931: PUSH
29932: LD_INT 1
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 2
29941: PUSH
29942: LD_INT 2
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 1
29951: PUSH
29952: LD_INT 2
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 0
29961: PUSH
29962: LD_INT 2
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 1
29971: NEG
29972: PUSH
29973: LD_INT 1
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 2
29982: NEG
29983: PUSH
29984: LD_INT 0
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 2
29993: NEG
29994: PUSH
29995: LD_INT 1
29997: NEG
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 2
30005: NEG
30006: PUSH
30007: LD_INT 2
30009: NEG
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: LD_INT 2
30017: NEG
30018: PUSH
30019: LD_INT 3
30021: NEG
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 1
30029: NEG
30030: PUSH
30031: LD_INT 3
30033: NEG
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 3
30041: NEG
30042: PUSH
30043: LD_INT 1
30045: NEG
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: LD_INT 3
30053: NEG
30054: PUSH
30055: LD_INT 2
30057: NEG
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30088: LD_ADDR_VAR 0 29
30092: PUSH
30093: LD_INT 0
30095: PUSH
30096: LD_INT 0
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 0
30105: PUSH
30106: LD_INT 1
30108: NEG
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 1
30116: PUSH
30117: LD_INT 0
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 1
30126: PUSH
30127: LD_INT 1
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 0
30136: PUSH
30137: LD_INT 1
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 1
30146: NEG
30147: PUSH
30148: LD_INT 0
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 1
30157: NEG
30158: PUSH
30159: LD_INT 1
30161: NEG
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 1
30169: NEG
30170: PUSH
30171: LD_INT 2
30173: NEG
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 0
30181: PUSH
30182: LD_INT 2
30184: NEG
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 1
30192: PUSH
30193: LD_INT 1
30195: NEG
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 2
30203: PUSH
30204: LD_INT 0
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 2
30213: PUSH
30214: LD_INT 1
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 1
30223: PUSH
30224: LD_INT 2
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 0
30233: PUSH
30234: LD_INT 2
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 1
30243: NEG
30244: PUSH
30245: LD_INT 1
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 2
30254: NEG
30255: PUSH
30256: LD_INT 1
30258: NEG
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 2
30266: NEG
30267: PUSH
30268: LD_INT 2
30270: NEG
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 2
30278: NEG
30279: PUSH
30280: LD_INT 3
30282: NEG
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 2
30290: PUSH
30291: LD_INT 1
30293: NEG
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 3
30301: PUSH
30302: LD_INT 1
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 1
30311: PUSH
30312: LD_INT 3
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 1
30321: NEG
30322: PUSH
30323: LD_INT 2
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 3
30332: NEG
30333: PUSH
30334: LD_INT 2
30336: NEG
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30367: LD_ADDR_VAR 0 30
30371: PUSH
30372: LD_INT 0
30374: PUSH
30375: LD_INT 0
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 0
30384: PUSH
30385: LD_INT 1
30387: NEG
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 1
30395: PUSH
30396: LD_INT 0
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 1
30405: PUSH
30406: LD_INT 1
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 0
30415: PUSH
30416: LD_INT 1
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 1
30425: NEG
30426: PUSH
30427: LD_INT 0
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: LD_INT 1
30436: NEG
30437: PUSH
30438: LD_INT 1
30440: NEG
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 1
30448: NEG
30449: PUSH
30450: LD_INT 2
30452: NEG
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 0
30460: PUSH
30461: LD_INT 2
30463: NEG
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 1
30471: PUSH
30472: LD_INT 1
30474: NEG
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 2
30482: PUSH
30483: LD_INT 0
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 2
30492: PUSH
30493: LD_INT 1
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 2
30502: PUSH
30503: LD_INT 2
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 1
30512: PUSH
30513: LD_INT 2
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 1
30522: NEG
30523: PUSH
30524: LD_INT 1
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 2
30533: NEG
30534: PUSH
30535: LD_INT 0
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 2
30544: NEG
30545: PUSH
30546: LD_INT 1
30548: NEG
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 1
30556: NEG
30557: PUSH
30558: LD_INT 3
30560: NEG
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 1
30568: PUSH
30569: LD_INT 2
30571: NEG
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 3
30579: PUSH
30580: LD_INT 2
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 2
30589: PUSH
30590: LD_INT 3
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 2
30599: NEG
30600: PUSH
30601: LD_INT 1
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 3
30610: NEG
30611: PUSH
30612: LD_INT 1
30614: NEG
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30645: LD_ADDR_VAR 0 31
30649: PUSH
30650: LD_INT 0
30652: PUSH
30653: LD_INT 0
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 0
30662: PUSH
30663: LD_INT 1
30665: NEG
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 1
30673: PUSH
30674: LD_INT 0
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 1
30683: PUSH
30684: LD_INT 1
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 0
30693: PUSH
30694: LD_INT 1
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 1
30703: NEG
30704: PUSH
30705: LD_INT 0
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 1
30714: NEG
30715: PUSH
30716: LD_INT 1
30718: NEG
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 1
30726: NEG
30727: PUSH
30728: LD_INT 2
30730: NEG
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 1
30738: PUSH
30739: LD_INT 1
30741: NEG
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 2
30749: PUSH
30750: LD_INT 0
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 2
30759: PUSH
30760: LD_INT 1
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 2
30769: PUSH
30770: LD_INT 2
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 1
30779: PUSH
30780: LD_INT 2
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 0
30789: PUSH
30790: LD_INT 2
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 1
30799: NEG
30800: PUSH
30801: LD_INT 1
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 2
30810: NEG
30811: PUSH
30812: LD_INT 1
30814: NEG
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 2
30822: NEG
30823: PUSH
30824: LD_INT 2
30826: NEG
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 2
30834: NEG
30835: PUSH
30836: LD_INT 3
30838: NEG
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 2
30846: PUSH
30847: LD_INT 1
30849: NEG
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 3
30857: PUSH
30858: LD_INT 1
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 1
30867: PUSH
30868: LD_INT 3
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 1
30877: NEG
30878: PUSH
30879: LD_INT 2
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 3
30888: NEG
30889: PUSH
30890: LD_INT 2
30892: NEG
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30923: LD_ADDR_VAR 0 32
30927: PUSH
30928: LD_INT 0
30930: PUSH
30931: LD_INT 0
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 0
30940: PUSH
30941: LD_INT 1
30943: NEG
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 1
30951: PUSH
30952: LD_INT 0
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 1
30961: PUSH
30962: LD_INT 1
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 0
30971: PUSH
30972: LD_INT 1
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: LD_INT 1
30981: NEG
30982: PUSH
30983: LD_INT 0
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 1
30992: NEG
30993: PUSH
30994: LD_INT 1
30996: NEG
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 1
31004: NEG
31005: PUSH
31006: LD_INT 2
31008: NEG
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: LD_INT 0
31016: PUSH
31017: LD_INT 2
31019: NEG
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 1
31027: PUSH
31028: LD_INT 1
31030: NEG
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 2
31038: PUSH
31039: LD_INT 1
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 2
31048: PUSH
31049: LD_INT 2
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 1
31058: PUSH
31059: LD_INT 2
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 0
31068: PUSH
31069: LD_INT 2
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 1
31078: NEG
31079: PUSH
31080: LD_INT 1
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 2
31089: NEG
31090: PUSH
31091: LD_INT 0
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 2
31100: NEG
31101: PUSH
31102: LD_INT 1
31104: NEG
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 1
31112: NEG
31113: PUSH
31114: LD_INT 3
31116: NEG
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 1
31124: PUSH
31125: LD_INT 2
31127: NEG
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 3
31135: PUSH
31136: LD_INT 2
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 2
31145: PUSH
31146: LD_INT 3
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 2
31155: NEG
31156: PUSH
31157: LD_INT 1
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 3
31166: NEG
31167: PUSH
31168: LD_INT 1
31170: NEG
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31201: LD_ADDR_VAR 0 33
31205: PUSH
31206: LD_INT 0
31208: PUSH
31209: LD_INT 0
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 0
31218: PUSH
31219: LD_INT 1
31221: NEG
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 1
31229: PUSH
31230: LD_INT 0
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 1
31239: PUSH
31240: LD_INT 1
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 0
31249: PUSH
31250: LD_INT 1
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: LD_INT 1
31259: NEG
31260: PUSH
31261: LD_INT 0
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 1
31270: NEG
31271: PUSH
31272: LD_INT 1
31274: NEG
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 1
31282: NEG
31283: PUSH
31284: LD_INT 2
31286: NEG
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 1
31294: PUSH
31295: LD_INT 1
31297: NEG
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 2
31305: PUSH
31306: LD_INT 0
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 2
31315: PUSH
31316: LD_INT 1
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 1
31325: PUSH
31326: LD_INT 2
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 0
31335: PUSH
31336: LD_INT 2
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 1
31345: NEG
31346: PUSH
31347: LD_INT 1
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 2
31356: NEG
31357: PUSH
31358: LD_INT 0
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 2
31367: NEG
31368: PUSH
31369: LD_INT 1
31371: NEG
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 2
31379: NEG
31380: PUSH
31381: LD_INT 2
31383: NEG
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 2
31391: NEG
31392: PUSH
31393: LD_INT 3
31395: NEG
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 2
31403: PUSH
31404: LD_INT 1
31406: NEG
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 3
31414: PUSH
31415: LD_INT 1
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 1
31424: PUSH
31425: LD_INT 3
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 1
31434: NEG
31435: PUSH
31436: LD_INT 2
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 3
31445: NEG
31446: PUSH
31447: LD_INT 2
31449: NEG
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31480: LD_ADDR_VAR 0 34
31484: PUSH
31485: LD_INT 0
31487: PUSH
31488: LD_INT 0
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 0
31497: PUSH
31498: LD_INT 1
31500: NEG
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 1
31508: PUSH
31509: LD_INT 0
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 1
31518: PUSH
31519: LD_INT 1
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 0
31528: PUSH
31529: LD_INT 1
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 1
31538: NEG
31539: PUSH
31540: LD_INT 0
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 1
31549: NEG
31550: PUSH
31551: LD_INT 1
31553: NEG
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 1
31561: NEG
31562: PUSH
31563: LD_INT 2
31565: NEG
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: LD_INT 0
31573: PUSH
31574: LD_INT 2
31576: NEG
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 1
31584: PUSH
31585: LD_INT 1
31587: NEG
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 2
31595: PUSH
31596: LD_INT 1
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 2
31605: PUSH
31606: LD_INT 2
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 1
31615: PUSH
31616: LD_INT 2
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 1
31625: NEG
31626: PUSH
31627: LD_INT 1
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 2
31636: NEG
31637: PUSH
31638: LD_INT 0
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 2
31647: NEG
31648: PUSH
31649: LD_INT 1
31651: NEG
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 2
31659: NEG
31660: PUSH
31661: LD_INT 2
31663: NEG
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 1
31671: NEG
31672: PUSH
31673: LD_INT 3
31675: NEG
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 1
31683: PUSH
31684: LD_INT 2
31686: NEG
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 3
31694: PUSH
31695: LD_INT 2
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 2
31704: PUSH
31705: LD_INT 3
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 2
31714: NEG
31715: PUSH
31716: LD_INT 1
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 3
31725: NEG
31726: PUSH
31727: LD_INT 1
31729: NEG
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31760: LD_ADDR_VAR 0 35
31764: PUSH
31765: LD_INT 0
31767: PUSH
31768: LD_INT 0
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 0
31777: PUSH
31778: LD_INT 1
31780: NEG
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 1
31788: PUSH
31789: LD_INT 0
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 1
31798: PUSH
31799: LD_INT 1
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 0
31808: PUSH
31809: LD_INT 1
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 1
31818: NEG
31819: PUSH
31820: LD_INT 0
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 1
31829: NEG
31830: PUSH
31831: LD_INT 1
31833: NEG
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 2
31841: PUSH
31842: LD_INT 1
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 2
31851: NEG
31852: PUSH
31853: LD_INT 1
31855: NEG
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31872: LD_ADDR_VAR 0 36
31876: PUSH
31877: LD_INT 0
31879: PUSH
31880: LD_INT 0
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 0
31889: PUSH
31890: LD_INT 1
31892: NEG
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 1
31900: PUSH
31901: LD_INT 0
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 1
31910: PUSH
31911: LD_INT 1
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 0
31920: PUSH
31921: LD_INT 1
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 1
31930: NEG
31931: PUSH
31932: LD_INT 0
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 1
31941: NEG
31942: PUSH
31943: LD_INT 1
31945: NEG
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 1
31953: NEG
31954: PUSH
31955: LD_INT 2
31957: NEG
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 1
31965: PUSH
31966: LD_INT 2
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31984: LD_ADDR_VAR 0 37
31988: PUSH
31989: LD_INT 0
31991: PUSH
31992: LD_INT 0
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 0
32001: PUSH
32002: LD_INT 1
32004: NEG
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 1
32012: PUSH
32013: LD_INT 0
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 1
32022: PUSH
32023: LD_INT 1
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 0
32032: PUSH
32033: LD_INT 1
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 1
32042: NEG
32043: PUSH
32044: LD_INT 0
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 1
32053: NEG
32054: PUSH
32055: LD_INT 1
32057: NEG
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 1
32065: PUSH
32066: LD_INT 1
32068: NEG
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 1
32076: NEG
32077: PUSH
32078: LD_INT 1
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32096: LD_ADDR_VAR 0 38
32100: PUSH
32101: LD_INT 0
32103: PUSH
32104: LD_INT 0
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 0
32113: PUSH
32114: LD_INT 1
32116: NEG
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 1
32124: PUSH
32125: LD_INT 0
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 1
32134: PUSH
32135: LD_INT 1
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 0
32144: PUSH
32145: LD_INT 1
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 1
32154: NEG
32155: PUSH
32156: LD_INT 0
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 1
32165: NEG
32166: PUSH
32167: LD_INT 1
32169: NEG
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 2
32177: PUSH
32178: LD_INT 1
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 2
32187: NEG
32188: PUSH
32189: LD_INT 1
32191: NEG
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32208: LD_ADDR_VAR 0 39
32212: PUSH
32213: LD_INT 0
32215: PUSH
32216: LD_INT 0
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 0
32225: PUSH
32226: LD_INT 1
32228: NEG
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 1
32236: PUSH
32237: LD_INT 0
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 1
32246: PUSH
32247: LD_INT 1
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 0
32256: PUSH
32257: LD_INT 1
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 1
32266: NEG
32267: PUSH
32268: LD_INT 0
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 1
32277: NEG
32278: PUSH
32279: LD_INT 1
32281: NEG
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 1
32289: NEG
32290: PUSH
32291: LD_INT 2
32293: NEG
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 1
32301: PUSH
32302: LD_INT 2
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32320: LD_ADDR_VAR 0 40
32324: PUSH
32325: LD_INT 0
32327: PUSH
32328: LD_INT 0
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 0
32337: PUSH
32338: LD_INT 1
32340: NEG
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 1
32348: PUSH
32349: LD_INT 0
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 1
32358: PUSH
32359: LD_INT 1
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 0
32368: PUSH
32369: LD_INT 1
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 1
32378: NEG
32379: PUSH
32380: LD_INT 0
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 1
32389: NEG
32390: PUSH
32391: LD_INT 1
32393: NEG
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 1
32401: PUSH
32402: LD_INT 1
32404: NEG
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 1
32412: NEG
32413: PUSH
32414: LD_INT 1
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32432: LD_ADDR_VAR 0 41
32436: PUSH
32437: LD_INT 0
32439: PUSH
32440: LD_INT 0
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 0
32449: PUSH
32450: LD_INT 1
32452: NEG
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 1
32460: PUSH
32461: LD_INT 0
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 1
32470: PUSH
32471: LD_INT 1
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 0
32480: PUSH
32481: LD_INT 1
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 1
32490: NEG
32491: PUSH
32492: LD_INT 0
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 1
32501: NEG
32502: PUSH
32503: LD_INT 1
32505: NEG
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 1
32513: NEG
32514: PUSH
32515: LD_INT 2
32517: NEG
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 1
32525: PUSH
32526: LD_INT 1
32528: NEG
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 2
32536: PUSH
32537: LD_INT 0
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 2
32546: PUSH
32547: LD_INT 1
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 2
32556: PUSH
32557: LD_INT 2
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 1
32566: PUSH
32567: LD_INT 2
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 1
32576: NEG
32577: PUSH
32578: LD_INT 1
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 2
32587: NEG
32588: PUSH
32589: LD_INT 0
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 2
32598: NEG
32599: PUSH
32600: LD_INT 1
32602: NEG
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 2
32610: NEG
32611: PUSH
32612: LD_INT 2
32614: NEG
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 2
32622: NEG
32623: PUSH
32624: LD_INT 3
32626: NEG
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 2
32634: PUSH
32635: LD_INT 1
32637: NEG
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 3
32645: PUSH
32646: LD_INT 0
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 3
32655: PUSH
32656: LD_INT 1
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: LD_INT 3
32665: PUSH
32666: LD_INT 2
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 3
32675: PUSH
32676: LD_INT 3
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 2
32685: PUSH
32686: LD_INT 3
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 2
32695: NEG
32696: PUSH
32697: LD_INT 1
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 3
32706: NEG
32707: PUSH
32708: LD_INT 0
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 3
32717: NEG
32718: PUSH
32719: LD_INT 1
32721: NEG
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 3
32729: NEG
32730: PUSH
32731: LD_INT 2
32733: NEG
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 3
32741: NEG
32742: PUSH
32743: LD_INT 3
32745: NEG
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32782: LD_ADDR_VAR 0 42
32786: PUSH
32787: LD_INT 0
32789: PUSH
32790: LD_INT 0
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 0
32799: PUSH
32800: LD_INT 1
32802: NEG
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 1
32810: PUSH
32811: LD_INT 0
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 1
32820: PUSH
32821: LD_INT 1
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 0
32830: PUSH
32831: LD_INT 1
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 1
32840: NEG
32841: PUSH
32842: LD_INT 0
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 1
32851: NEG
32852: PUSH
32853: LD_INT 1
32855: NEG
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 1
32863: NEG
32864: PUSH
32865: LD_INT 2
32867: NEG
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 0
32875: PUSH
32876: LD_INT 2
32878: NEG
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 1
32886: PUSH
32887: LD_INT 1
32889: NEG
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 2
32897: PUSH
32898: LD_INT 1
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 2
32907: PUSH
32908: LD_INT 2
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 1
32917: PUSH
32918: LD_INT 2
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 0
32927: PUSH
32928: LD_INT 2
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 1
32937: NEG
32938: PUSH
32939: LD_INT 1
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 2
32948: NEG
32949: PUSH
32950: LD_INT 1
32952: NEG
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 2
32960: NEG
32961: PUSH
32962: LD_INT 2
32964: NEG
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 2
32972: NEG
32973: PUSH
32974: LD_INT 3
32976: NEG
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 1
32984: NEG
32985: PUSH
32986: LD_INT 3
32988: NEG
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 0
32996: PUSH
32997: LD_INT 3
32999: NEG
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 1
33007: PUSH
33008: LD_INT 2
33010: NEG
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 3
33018: PUSH
33019: LD_INT 2
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 3
33028: PUSH
33029: LD_INT 3
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 2
33038: PUSH
33039: LD_INT 3
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 1
33048: PUSH
33049: LD_INT 3
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 0
33058: PUSH
33059: LD_INT 3
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 1
33068: NEG
33069: PUSH
33070: LD_INT 2
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 3
33079: NEG
33080: PUSH
33081: LD_INT 2
33083: NEG
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 3
33091: NEG
33092: PUSH
33093: LD_INT 3
33095: NEG
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33132: LD_ADDR_VAR 0 43
33136: PUSH
33137: LD_INT 0
33139: PUSH
33140: LD_INT 0
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 0
33149: PUSH
33150: LD_INT 1
33152: NEG
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 1
33160: PUSH
33161: LD_INT 0
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 1
33170: PUSH
33171: LD_INT 1
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 0
33180: PUSH
33181: LD_INT 1
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 1
33190: NEG
33191: PUSH
33192: LD_INT 0
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: LD_INT 1
33201: NEG
33202: PUSH
33203: LD_INT 1
33205: NEG
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 1
33213: NEG
33214: PUSH
33215: LD_INT 2
33217: NEG
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 0
33225: PUSH
33226: LD_INT 2
33228: NEG
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: LD_INT 1
33236: PUSH
33237: LD_INT 1
33239: NEG
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 2
33247: PUSH
33248: LD_INT 0
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 2
33257: PUSH
33258: LD_INT 1
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 1
33267: PUSH
33268: LD_INT 2
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 0
33277: PUSH
33278: LD_INT 2
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 1
33287: NEG
33288: PUSH
33289: LD_INT 1
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 2
33298: NEG
33299: PUSH
33300: LD_INT 0
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 2
33309: NEG
33310: PUSH
33311: LD_INT 1
33313: NEG
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 1
33321: NEG
33322: PUSH
33323: LD_INT 3
33325: NEG
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 0
33333: PUSH
33334: LD_INT 3
33336: NEG
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 1
33344: PUSH
33345: LD_INT 2
33347: NEG
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 2
33355: PUSH
33356: LD_INT 1
33358: NEG
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 3
33366: PUSH
33367: LD_INT 0
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 3
33376: PUSH
33377: LD_INT 1
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 1
33386: PUSH
33387: LD_INT 3
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 0
33396: PUSH
33397: LD_INT 3
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 1
33406: NEG
33407: PUSH
33408: LD_INT 2
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 2
33417: NEG
33418: PUSH
33419: LD_INT 1
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 3
33428: NEG
33429: PUSH
33430: LD_INT 0
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 3
33439: NEG
33440: PUSH
33441: LD_INT 1
33443: NEG
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33480: LD_ADDR_VAR 0 44
33484: PUSH
33485: LD_INT 0
33487: PUSH
33488: LD_INT 0
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 0
33497: PUSH
33498: LD_INT 1
33500: NEG
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 1
33508: PUSH
33509: LD_INT 0
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 1
33518: PUSH
33519: LD_INT 1
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 0
33528: PUSH
33529: LD_INT 1
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 1
33538: NEG
33539: PUSH
33540: LD_INT 0
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 1
33549: NEG
33550: PUSH
33551: LD_INT 1
33553: NEG
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 1
33561: NEG
33562: PUSH
33563: LD_INT 2
33565: NEG
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 1
33573: PUSH
33574: LD_INT 1
33576: NEG
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 2
33584: PUSH
33585: LD_INT 0
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 2
33594: PUSH
33595: LD_INT 1
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 2
33604: PUSH
33605: LD_INT 2
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 1
33614: PUSH
33615: LD_INT 2
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 1
33624: NEG
33625: PUSH
33626: LD_INT 1
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 2
33635: NEG
33636: PUSH
33637: LD_INT 0
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 2
33646: NEG
33647: PUSH
33648: LD_INT 1
33650: NEG
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: PUSH
33656: LD_INT 2
33658: NEG
33659: PUSH
33660: LD_INT 2
33662: NEG
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 2
33670: NEG
33671: PUSH
33672: LD_INT 3
33674: NEG
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PUSH
33680: LD_INT 2
33682: PUSH
33683: LD_INT 1
33685: NEG
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 3
33693: PUSH
33694: LD_INT 0
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 3
33703: PUSH
33704: LD_INT 1
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 3
33713: PUSH
33714: LD_INT 2
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 3
33723: PUSH
33724: LD_INT 3
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 2
33733: PUSH
33734: LD_INT 3
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 2
33743: NEG
33744: PUSH
33745: LD_INT 1
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 3
33754: NEG
33755: PUSH
33756: LD_INT 0
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 3
33765: NEG
33766: PUSH
33767: LD_INT 1
33769: NEG
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 3
33777: NEG
33778: PUSH
33779: LD_INT 2
33781: NEG
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 3
33789: NEG
33790: PUSH
33791: LD_INT 3
33793: NEG
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33830: LD_ADDR_VAR 0 45
33834: PUSH
33835: LD_INT 0
33837: PUSH
33838: LD_INT 0
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 0
33847: PUSH
33848: LD_INT 1
33850: NEG
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 1
33858: PUSH
33859: LD_INT 0
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 1
33868: PUSH
33869: LD_INT 1
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 0
33878: PUSH
33879: LD_INT 1
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 1
33888: NEG
33889: PUSH
33890: LD_INT 0
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 1
33899: NEG
33900: PUSH
33901: LD_INT 1
33903: NEG
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 1
33911: NEG
33912: PUSH
33913: LD_INT 2
33915: NEG
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 0
33923: PUSH
33924: LD_INT 2
33926: NEG
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 1
33934: PUSH
33935: LD_INT 1
33937: NEG
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 2
33945: PUSH
33946: LD_INT 1
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 2
33955: PUSH
33956: LD_INT 2
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 1
33965: PUSH
33966: LD_INT 2
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 0
33975: PUSH
33976: LD_INT 2
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 1
33985: NEG
33986: PUSH
33987: LD_INT 1
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 2
33996: NEG
33997: PUSH
33998: LD_INT 1
34000: NEG
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 2
34008: NEG
34009: PUSH
34010: LD_INT 2
34012: NEG
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 2
34020: NEG
34021: PUSH
34022: LD_INT 3
34024: NEG
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 1
34032: NEG
34033: PUSH
34034: LD_INT 3
34036: NEG
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 0
34044: PUSH
34045: LD_INT 3
34047: NEG
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 1
34055: PUSH
34056: LD_INT 2
34058: NEG
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 3
34066: PUSH
34067: LD_INT 2
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 3
34076: PUSH
34077: LD_INT 3
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 2
34086: PUSH
34087: LD_INT 3
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 1
34096: PUSH
34097: LD_INT 3
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 0
34106: PUSH
34107: LD_INT 3
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 1
34116: NEG
34117: PUSH
34118: LD_INT 2
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 3
34127: NEG
34128: PUSH
34129: LD_INT 2
34131: NEG
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 3
34139: NEG
34140: PUSH
34141: LD_INT 3
34143: NEG
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34180: LD_ADDR_VAR 0 46
34184: PUSH
34185: LD_INT 0
34187: PUSH
34188: LD_INT 0
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 0
34197: PUSH
34198: LD_INT 1
34200: NEG
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 1
34208: PUSH
34209: LD_INT 0
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 1
34218: PUSH
34219: LD_INT 1
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: LD_INT 0
34228: PUSH
34229: LD_INT 1
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 1
34238: NEG
34239: PUSH
34240: LD_INT 0
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 1
34249: NEG
34250: PUSH
34251: LD_INT 1
34253: NEG
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 1
34261: NEG
34262: PUSH
34263: LD_INT 2
34265: NEG
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 0
34273: PUSH
34274: LD_INT 2
34276: NEG
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 1
34284: PUSH
34285: LD_INT 1
34287: NEG
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 2
34295: PUSH
34296: LD_INT 0
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 2
34305: PUSH
34306: LD_INT 1
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 1
34315: PUSH
34316: LD_INT 2
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 0
34325: PUSH
34326: LD_INT 2
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 1
34335: NEG
34336: PUSH
34337: LD_INT 1
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 2
34346: NEG
34347: PUSH
34348: LD_INT 0
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 2
34357: NEG
34358: PUSH
34359: LD_INT 1
34361: NEG
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 1
34369: NEG
34370: PUSH
34371: LD_INT 3
34373: NEG
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 0
34381: PUSH
34382: LD_INT 3
34384: NEG
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 1
34392: PUSH
34393: LD_INT 2
34395: NEG
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 2
34403: PUSH
34404: LD_INT 1
34406: NEG
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 3
34414: PUSH
34415: LD_INT 0
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 3
34424: PUSH
34425: LD_INT 1
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: LD_INT 1
34434: PUSH
34435: LD_INT 3
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 0
34444: PUSH
34445: LD_INT 3
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 1
34454: NEG
34455: PUSH
34456: LD_INT 2
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 2
34465: NEG
34466: PUSH
34467: LD_INT 1
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 3
34476: NEG
34477: PUSH
34478: LD_INT 0
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 3
34487: NEG
34488: PUSH
34489: LD_INT 1
34491: NEG
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34528: LD_ADDR_VAR 0 47
34532: PUSH
34533: LD_INT 0
34535: PUSH
34536: LD_INT 0
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: PUSH
34543: LD_INT 0
34545: PUSH
34546: LD_INT 1
34548: NEG
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 1
34556: PUSH
34557: LD_INT 0
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 1
34566: PUSH
34567: LD_INT 1
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 0
34576: PUSH
34577: LD_INT 1
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 1
34586: NEG
34587: PUSH
34588: LD_INT 0
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 1
34597: NEG
34598: PUSH
34599: LD_INT 1
34601: NEG
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 1
34609: NEG
34610: PUSH
34611: LD_INT 2
34613: NEG
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 0
34621: PUSH
34622: LD_INT 2
34624: NEG
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 1
34632: PUSH
34633: LD_INT 1
34635: NEG
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 2
34643: NEG
34644: PUSH
34645: LD_INT 1
34647: NEG
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 2
34655: NEG
34656: PUSH
34657: LD_INT 2
34659: NEG
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34679: LD_ADDR_VAR 0 48
34683: PUSH
34684: LD_INT 0
34686: PUSH
34687: LD_INT 0
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 0
34696: PUSH
34697: LD_INT 1
34699: NEG
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 1
34707: PUSH
34708: LD_INT 0
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 1
34717: PUSH
34718: LD_INT 1
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 0
34727: PUSH
34728: LD_INT 1
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 1
34737: NEG
34738: PUSH
34739: LD_INT 0
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 1
34748: NEG
34749: PUSH
34750: LD_INT 1
34752: NEG
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 1
34760: NEG
34761: PUSH
34762: LD_INT 2
34764: NEG
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 0
34772: PUSH
34773: LD_INT 2
34775: NEG
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 1
34783: PUSH
34784: LD_INT 1
34786: NEG
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 2
34794: PUSH
34795: LD_INT 0
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 2
34804: PUSH
34805: LD_INT 1
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34826: LD_ADDR_VAR 0 49
34830: PUSH
34831: LD_INT 0
34833: PUSH
34834: LD_INT 0
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 0
34843: PUSH
34844: LD_INT 1
34846: NEG
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 1
34854: PUSH
34855: LD_INT 0
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 1
34864: PUSH
34865: LD_INT 1
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 0
34874: PUSH
34875: LD_INT 1
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 1
34884: NEG
34885: PUSH
34886: LD_INT 0
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 1
34895: NEG
34896: PUSH
34897: LD_INT 1
34899: NEG
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 1
34907: PUSH
34908: LD_INT 1
34910: NEG
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 2
34918: PUSH
34919: LD_INT 0
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 2
34928: PUSH
34929: LD_INT 1
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 2
34938: PUSH
34939: LD_INT 2
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 1
34948: PUSH
34949: LD_INT 2
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34970: LD_ADDR_VAR 0 50
34974: PUSH
34975: LD_INT 0
34977: PUSH
34978: LD_INT 0
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 0
34987: PUSH
34988: LD_INT 1
34990: NEG
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_INT 1
34998: PUSH
34999: LD_INT 0
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 1
35008: PUSH
35009: LD_INT 1
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 0
35018: PUSH
35019: LD_INT 1
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 1
35028: NEG
35029: PUSH
35030: LD_INT 0
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 1
35039: NEG
35040: PUSH
35041: LD_INT 1
35043: NEG
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 2
35051: PUSH
35052: LD_INT 1
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 2
35061: PUSH
35062: LD_INT 2
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 1
35071: PUSH
35072: LD_INT 2
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 0
35081: PUSH
35082: LD_INT 2
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 1
35091: NEG
35092: PUSH
35093: LD_INT 1
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35114: LD_ADDR_VAR 0 51
35118: PUSH
35119: LD_INT 0
35121: PUSH
35122: LD_INT 0
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 0
35131: PUSH
35132: LD_INT 1
35134: NEG
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 1
35142: PUSH
35143: LD_INT 0
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 1
35152: PUSH
35153: LD_INT 1
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 0
35162: PUSH
35163: LD_INT 1
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 1
35172: NEG
35173: PUSH
35174: LD_INT 0
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: LD_INT 1
35183: NEG
35184: PUSH
35185: LD_INT 1
35187: NEG
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 1
35195: PUSH
35196: LD_INT 2
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 0
35205: PUSH
35206: LD_INT 2
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: LD_INT 1
35215: NEG
35216: PUSH
35217: LD_INT 1
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 2
35226: NEG
35227: PUSH
35228: LD_INT 0
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 2
35237: NEG
35238: PUSH
35239: LD_INT 1
35241: NEG
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35261: LD_ADDR_VAR 0 52
35265: PUSH
35266: LD_INT 0
35268: PUSH
35269: LD_INT 0
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 0
35278: PUSH
35279: LD_INT 1
35281: NEG
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 1
35289: PUSH
35290: LD_INT 0
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 1
35299: PUSH
35300: LD_INT 1
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 0
35309: PUSH
35310: LD_INT 1
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 1
35319: NEG
35320: PUSH
35321: LD_INT 0
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 1
35330: NEG
35331: PUSH
35332: LD_INT 1
35334: NEG
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 1
35342: NEG
35343: PUSH
35344: LD_INT 2
35346: NEG
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 1
35354: NEG
35355: PUSH
35356: LD_INT 1
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 2
35365: NEG
35366: PUSH
35367: LD_INT 0
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 2
35376: NEG
35377: PUSH
35378: LD_INT 1
35380: NEG
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 2
35388: NEG
35389: PUSH
35390: LD_INT 2
35392: NEG
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35412: LD_ADDR_VAR 0 53
35416: PUSH
35417: LD_INT 0
35419: PUSH
35420: LD_INT 0
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PUSH
35427: LD_INT 0
35429: PUSH
35430: LD_INT 1
35432: NEG
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 1
35440: PUSH
35441: LD_INT 0
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 1
35450: PUSH
35451: LD_INT 1
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 0
35460: PUSH
35461: LD_INT 1
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 1
35470: NEG
35471: PUSH
35472: LD_INT 0
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 1
35481: NEG
35482: PUSH
35483: LD_INT 1
35485: NEG
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 1
35493: NEG
35494: PUSH
35495: LD_INT 2
35497: NEG
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 0
35505: PUSH
35506: LD_INT 2
35508: NEG
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: LD_INT 1
35516: PUSH
35517: LD_INT 1
35519: NEG
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 2
35527: PUSH
35528: LD_INT 0
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 2
35537: PUSH
35538: LD_INT 1
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 2
35547: PUSH
35548: LD_INT 2
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 1
35557: PUSH
35558: LD_INT 2
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 0
35567: PUSH
35568: LD_INT 2
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 1
35577: NEG
35578: PUSH
35579: LD_INT 1
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 2
35588: NEG
35589: PUSH
35590: LD_INT 0
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 2
35599: NEG
35600: PUSH
35601: LD_INT 1
35603: NEG
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 2
35611: NEG
35612: PUSH
35613: LD_INT 2
35615: NEG
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35642: LD_ADDR_VAR 0 54
35646: PUSH
35647: LD_INT 0
35649: PUSH
35650: LD_INT 0
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 0
35659: PUSH
35660: LD_INT 1
35662: NEG
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 1
35670: PUSH
35671: LD_INT 0
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 1
35680: PUSH
35681: LD_INT 1
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 0
35690: PUSH
35691: LD_INT 1
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 1
35700: NEG
35701: PUSH
35702: LD_INT 0
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 1
35711: NEG
35712: PUSH
35713: LD_INT 1
35715: NEG
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 1
35723: NEG
35724: PUSH
35725: LD_INT 2
35727: NEG
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 0
35735: PUSH
35736: LD_INT 2
35738: NEG
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 1
35746: PUSH
35747: LD_INT 1
35749: NEG
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 2
35757: PUSH
35758: LD_INT 0
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 2
35767: PUSH
35768: LD_INT 1
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 2
35777: PUSH
35778: LD_INT 2
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 1
35787: PUSH
35788: LD_INT 2
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 0
35797: PUSH
35798: LD_INT 2
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 1
35807: NEG
35808: PUSH
35809: LD_INT 1
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 2
35818: NEG
35819: PUSH
35820: LD_INT 0
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 2
35829: NEG
35830: PUSH
35831: LD_INT 1
35833: NEG
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 2
35841: NEG
35842: PUSH
35843: LD_INT 2
35845: NEG
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35872: LD_ADDR_VAR 0 55
35876: PUSH
35877: LD_INT 0
35879: PUSH
35880: LD_INT 0
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 0
35889: PUSH
35890: LD_INT 1
35892: NEG
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 1
35900: PUSH
35901: LD_INT 0
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 1
35910: PUSH
35911: LD_INT 1
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 0
35920: PUSH
35921: LD_INT 1
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 1
35930: NEG
35931: PUSH
35932: LD_INT 0
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 1
35941: NEG
35942: PUSH
35943: LD_INT 1
35945: NEG
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 1
35953: NEG
35954: PUSH
35955: LD_INT 2
35957: NEG
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 0
35965: PUSH
35966: LD_INT 2
35968: NEG
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 1
35976: PUSH
35977: LD_INT 1
35979: NEG
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 2
35987: PUSH
35988: LD_INT 0
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 2
35997: PUSH
35998: LD_INT 1
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 2
36007: PUSH
36008: LD_INT 2
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 1
36017: PUSH
36018: LD_INT 2
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 0
36027: PUSH
36028: LD_INT 2
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 1
36037: NEG
36038: PUSH
36039: LD_INT 1
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_INT 2
36048: NEG
36049: PUSH
36050: LD_INT 0
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 2
36059: NEG
36060: PUSH
36061: LD_INT 1
36063: NEG
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 2
36071: NEG
36072: PUSH
36073: LD_INT 2
36075: NEG
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36102: LD_ADDR_VAR 0 56
36106: PUSH
36107: LD_INT 0
36109: PUSH
36110: LD_INT 0
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 0
36119: PUSH
36120: LD_INT 1
36122: NEG
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 1
36130: PUSH
36131: LD_INT 0
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 1
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 0
36150: PUSH
36151: LD_INT 1
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 1
36160: NEG
36161: PUSH
36162: LD_INT 0
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 1
36171: NEG
36172: PUSH
36173: LD_INT 1
36175: NEG
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 1
36183: NEG
36184: PUSH
36185: LD_INT 2
36187: NEG
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 0
36195: PUSH
36196: LD_INT 2
36198: NEG
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 1
36206: PUSH
36207: LD_INT 1
36209: NEG
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 2
36217: PUSH
36218: LD_INT 0
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 2
36227: PUSH
36228: LD_INT 1
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 2
36237: PUSH
36238: LD_INT 2
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 1
36247: PUSH
36248: LD_INT 2
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 0
36257: PUSH
36258: LD_INT 2
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 1
36267: NEG
36268: PUSH
36269: LD_INT 1
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 2
36278: NEG
36279: PUSH
36280: LD_INT 0
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 2
36289: NEG
36290: PUSH
36291: LD_INT 1
36293: NEG
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 2
36301: NEG
36302: PUSH
36303: LD_INT 2
36305: NEG
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36332: LD_ADDR_VAR 0 57
36336: PUSH
36337: LD_INT 0
36339: PUSH
36340: LD_INT 0
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 0
36349: PUSH
36350: LD_INT 1
36352: NEG
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: LD_INT 0
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: LD_INT 1
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 0
36380: PUSH
36381: LD_INT 1
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 1
36390: NEG
36391: PUSH
36392: LD_INT 0
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 1
36401: NEG
36402: PUSH
36403: LD_INT 1
36405: NEG
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 1
36413: NEG
36414: PUSH
36415: LD_INT 2
36417: NEG
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 0
36425: PUSH
36426: LD_INT 2
36428: NEG
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 1
36436: PUSH
36437: LD_INT 1
36439: NEG
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 2
36447: PUSH
36448: LD_INT 0
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 2
36457: PUSH
36458: LD_INT 1
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 2
36467: PUSH
36468: LD_INT 2
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 1
36477: PUSH
36478: LD_INT 2
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 0
36487: PUSH
36488: LD_INT 2
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 1
36497: NEG
36498: PUSH
36499: LD_INT 1
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 2
36508: NEG
36509: PUSH
36510: LD_INT 0
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 2
36519: NEG
36520: PUSH
36521: LD_INT 1
36523: NEG
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 2
36531: NEG
36532: PUSH
36533: LD_INT 2
36535: NEG
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36562: LD_ADDR_VAR 0 58
36566: PUSH
36567: LD_INT 0
36569: PUSH
36570: LD_INT 0
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 0
36579: PUSH
36580: LD_INT 1
36582: NEG
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 1
36590: PUSH
36591: LD_INT 0
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 1
36600: PUSH
36601: LD_INT 1
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 0
36610: PUSH
36611: LD_INT 1
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 1
36620: NEG
36621: PUSH
36622: LD_INT 0
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 1
36631: NEG
36632: PUSH
36633: LD_INT 1
36635: NEG
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 1
36643: NEG
36644: PUSH
36645: LD_INT 2
36647: NEG
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 0
36655: PUSH
36656: LD_INT 2
36658: NEG
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 1
36666: PUSH
36667: LD_INT 1
36669: NEG
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 2
36677: PUSH
36678: LD_INT 0
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 2
36687: PUSH
36688: LD_INT 1
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 2
36697: PUSH
36698: LD_INT 2
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 1
36707: PUSH
36708: LD_INT 2
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 0
36717: PUSH
36718: LD_INT 2
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 1
36727: NEG
36728: PUSH
36729: LD_INT 1
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 2
36738: NEG
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 2
36749: NEG
36750: PUSH
36751: LD_INT 1
36753: NEG
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 2
36761: NEG
36762: PUSH
36763: LD_INT 2
36765: NEG
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36792: LD_ADDR_VAR 0 59
36796: PUSH
36797: LD_INT 0
36799: PUSH
36800: LD_INT 0
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 0
36809: PUSH
36810: LD_INT 1
36812: NEG
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: LD_INT 0
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 1
36830: PUSH
36831: LD_INT 1
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 0
36840: PUSH
36841: LD_INT 1
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 1
36850: NEG
36851: PUSH
36852: LD_INT 0
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 1
36861: NEG
36862: PUSH
36863: LD_INT 1
36865: NEG
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36880: LD_ADDR_VAR 0 60
36884: PUSH
36885: LD_INT 0
36887: PUSH
36888: LD_INT 0
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 0
36897: PUSH
36898: LD_INT 1
36900: NEG
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 1
36908: PUSH
36909: LD_INT 0
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 1
36918: PUSH
36919: LD_INT 1
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 0
36928: PUSH
36929: LD_INT 1
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 1
36938: NEG
36939: PUSH
36940: LD_INT 0
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 1
36949: NEG
36950: PUSH
36951: LD_INT 1
36953: NEG
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36968: LD_ADDR_VAR 0 61
36972: PUSH
36973: LD_INT 0
36975: PUSH
36976: LD_INT 0
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 0
36985: PUSH
36986: LD_INT 1
36988: NEG
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 1
36996: PUSH
36997: LD_INT 0
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 1
37006: PUSH
37007: LD_INT 1
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 0
37016: PUSH
37017: LD_INT 1
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 1
37026: NEG
37027: PUSH
37028: LD_INT 0
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 1
37037: NEG
37038: PUSH
37039: LD_INT 1
37041: NEG
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37056: LD_ADDR_VAR 0 62
37060: PUSH
37061: LD_INT 0
37063: PUSH
37064: LD_INT 0
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 0
37073: PUSH
37074: LD_INT 1
37076: NEG
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 1
37084: PUSH
37085: LD_INT 0
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 1
37094: PUSH
37095: LD_INT 1
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 0
37104: PUSH
37105: LD_INT 1
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 1
37114: NEG
37115: PUSH
37116: LD_INT 0
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 1
37125: NEG
37126: PUSH
37127: LD_INT 1
37129: NEG
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37144: LD_ADDR_VAR 0 63
37148: PUSH
37149: LD_INT 0
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: LD_INT 1
37164: NEG
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 1
37172: PUSH
37173: LD_INT 0
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 1
37182: PUSH
37183: LD_INT 1
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 0
37192: PUSH
37193: LD_INT 1
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 1
37202: NEG
37203: PUSH
37204: LD_INT 0
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 1
37213: NEG
37214: PUSH
37215: LD_INT 1
37217: NEG
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37232: LD_ADDR_VAR 0 64
37236: PUSH
37237: LD_INT 0
37239: PUSH
37240: LD_INT 0
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 0
37249: PUSH
37250: LD_INT 1
37252: NEG
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 1
37260: PUSH
37261: LD_INT 0
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 1
37270: PUSH
37271: LD_INT 1
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 0
37280: PUSH
37281: LD_INT 1
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 1
37290: NEG
37291: PUSH
37292: LD_INT 0
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 1
37301: NEG
37302: PUSH
37303: LD_INT 1
37305: NEG
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: ST_TO_ADDR
// end ; 1 :
37320: GO 43217
37322: LD_INT 1
37324: DOUBLE
37325: EQUAL
37326: IFTRUE 37330
37328: GO 39953
37330: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37331: LD_ADDR_VAR 0 11
37335: PUSH
37336: LD_INT 1
37338: NEG
37339: PUSH
37340: LD_INT 3
37342: NEG
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: PUSH
37348: LD_INT 0
37350: PUSH
37351: LD_INT 3
37353: NEG
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 1
37361: PUSH
37362: LD_INT 2
37364: NEG
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: LIST
37374: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37375: LD_ADDR_VAR 0 12
37379: PUSH
37380: LD_INT 2
37382: PUSH
37383: LD_INT 1
37385: NEG
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 3
37393: PUSH
37394: LD_INT 0
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 3
37403: PUSH
37404: LD_INT 1
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: LIST
37415: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37416: LD_ADDR_VAR 0 13
37420: PUSH
37421: LD_INT 3
37423: PUSH
37424: LD_INT 2
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 3
37433: PUSH
37434: LD_INT 3
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 2
37443: PUSH
37444: LD_INT 3
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: LIST
37455: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37456: LD_ADDR_VAR 0 14
37460: PUSH
37461: LD_INT 1
37463: PUSH
37464: LD_INT 3
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 0
37473: PUSH
37474: LD_INT 3
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 1
37483: NEG
37484: PUSH
37485: LD_INT 2
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: LIST
37496: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37497: LD_ADDR_VAR 0 15
37501: PUSH
37502: LD_INT 2
37504: NEG
37505: PUSH
37506: LD_INT 1
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 3
37515: NEG
37516: PUSH
37517: LD_INT 0
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 3
37526: NEG
37527: PUSH
37528: LD_INT 1
37530: NEG
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: LIST
37540: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37541: LD_ADDR_VAR 0 16
37545: PUSH
37546: LD_INT 2
37548: NEG
37549: PUSH
37550: LD_INT 3
37552: NEG
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 3
37560: NEG
37561: PUSH
37562: LD_INT 2
37564: NEG
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 3
37572: NEG
37573: PUSH
37574: LD_INT 3
37576: NEG
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: LIST
37586: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37587: LD_ADDR_VAR 0 17
37591: PUSH
37592: LD_INT 1
37594: NEG
37595: PUSH
37596: LD_INT 3
37598: NEG
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: LD_INT 3
37609: NEG
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 1
37617: PUSH
37618: LD_INT 2
37620: NEG
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: LIST
37630: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37631: LD_ADDR_VAR 0 18
37635: PUSH
37636: LD_INT 2
37638: PUSH
37639: LD_INT 1
37641: NEG
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 3
37649: PUSH
37650: LD_INT 0
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 3
37659: PUSH
37660: LD_INT 1
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: LIST
37671: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37672: LD_ADDR_VAR 0 19
37676: PUSH
37677: LD_INT 3
37679: PUSH
37680: LD_INT 2
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 3
37689: PUSH
37690: LD_INT 3
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 2
37699: PUSH
37700: LD_INT 3
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: LIST
37711: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37712: LD_ADDR_VAR 0 20
37716: PUSH
37717: LD_INT 1
37719: PUSH
37720: LD_INT 3
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 0
37729: PUSH
37730: LD_INT 3
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 1
37739: NEG
37740: PUSH
37741: LD_INT 2
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: LIST
37752: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37753: LD_ADDR_VAR 0 21
37757: PUSH
37758: LD_INT 2
37760: NEG
37761: PUSH
37762: LD_INT 1
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 3
37771: NEG
37772: PUSH
37773: LD_INT 0
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 3
37782: NEG
37783: PUSH
37784: LD_INT 1
37786: NEG
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: LIST
37796: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37797: LD_ADDR_VAR 0 22
37801: PUSH
37802: LD_INT 2
37804: NEG
37805: PUSH
37806: LD_INT 3
37808: NEG
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 3
37816: NEG
37817: PUSH
37818: LD_INT 2
37820: NEG
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 3
37828: NEG
37829: PUSH
37830: LD_INT 3
37832: NEG
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: LIST
37842: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
37843: LD_ADDR_VAR 0 23
37847: PUSH
37848: LD_INT 0
37850: PUSH
37851: LD_INT 3
37853: NEG
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 1
37861: NEG
37862: PUSH
37863: LD_INT 4
37865: NEG
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 1
37873: PUSH
37874: LD_INT 3
37876: NEG
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: LIST
37886: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
37887: LD_ADDR_VAR 0 24
37891: PUSH
37892: LD_INT 3
37894: PUSH
37895: LD_INT 0
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 3
37904: PUSH
37905: LD_INT 1
37907: NEG
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 4
37915: PUSH
37916: LD_INT 1
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: LIST
37927: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
37928: LD_ADDR_VAR 0 25
37932: PUSH
37933: LD_INT 3
37935: PUSH
37936: LD_INT 3
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 4
37945: PUSH
37946: LD_INT 3
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 3
37955: PUSH
37956: LD_INT 4
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: LIST
37967: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37968: LD_ADDR_VAR 0 26
37972: PUSH
37973: LD_INT 0
37975: PUSH
37976: LD_INT 3
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 1
37985: PUSH
37986: LD_INT 4
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 1
37995: NEG
37996: PUSH
37997: LD_INT 3
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: LIST
38008: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
38009: LD_ADDR_VAR 0 27
38013: PUSH
38014: LD_INT 3
38016: NEG
38017: PUSH
38018: LD_INT 0
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 3
38027: NEG
38028: PUSH
38029: LD_INT 1
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 4
38038: NEG
38039: PUSH
38040: LD_INT 1
38042: NEG
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: LIST
38052: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
38053: LD_ADDR_VAR 0 28
38057: PUSH
38058: LD_INT 3
38060: NEG
38061: PUSH
38062: LD_INT 3
38064: NEG
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 3
38072: NEG
38073: PUSH
38074: LD_INT 4
38076: NEG
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 4
38084: NEG
38085: PUSH
38086: LD_INT 3
38088: NEG
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: LIST
38098: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
38099: LD_ADDR_VAR 0 29
38103: PUSH
38104: LD_INT 1
38106: NEG
38107: PUSH
38108: LD_INT 3
38110: NEG
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 0
38118: PUSH
38119: LD_INT 3
38121: NEG
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 1
38129: PUSH
38130: LD_INT 2
38132: NEG
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 1
38140: NEG
38141: PUSH
38142: LD_INT 4
38144: NEG
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 0
38152: PUSH
38153: LD_INT 4
38155: NEG
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 1
38163: PUSH
38164: LD_INT 3
38166: NEG
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 1
38174: NEG
38175: PUSH
38176: LD_INT 5
38178: NEG
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 0
38186: PUSH
38187: LD_INT 5
38189: NEG
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 1
38197: PUSH
38198: LD_INT 4
38200: NEG
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 1
38208: NEG
38209: PUSH
38210: LD_INT 6
38212: NEG
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 0
38220: PUSH
38221: LD_INT 6
38223: NEG
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 1
38231: PUSH
38232: LD_INT 5
38234: NEG
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
38254: LD_ADDR_VAR 0 30
38258: PUSH
38259: LD_INT 2
38261: PUSH
38262: LD_INT 1
38264: NEG
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 3
38272: PUSH
38273: LD_INT 0
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 3
38282: PUSH
38283: LD_INT 1
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 3
38292: PUSH
38293: LD_INT 1
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 4
38303: PUSH
38304: LD_INT 0
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 4
38313: PUSH
38314: LD_INT 1
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 4
38323: PUSH
38324: LD_INT 1
38326: NEG
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 5
38334: PUSH
38335: LD_INT 0
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 5
38344: PUSH
38345: LD_INT 1
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 5
38354: PUSH
38355: LD_INT 1
38357: NEG
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 6
38365: PUSH
38366: LD_INT 0
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 6
38375: PUSH
38376: LD_INT 1
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
38397: LD_ADDR_VAR 0 31
38401: PUSH
38402: LD_INT 3
38404: PUSH
38405: LD_INT 2
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 3
38414: PUSH
38415: LD_INT 3
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 2
38424: PUSH
38425: LD_INT 3
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 4
38434: PUSH
38435: LD_INT 3
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 4
38444: PUSH
38445: LD_INT 4
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 3
38454: PUSH
38455: LD_INT 4
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 5
38464: PUSH
38465: LD_INT 4
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 5
38474: PUSH
38475: LD_INT 5
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 4
38484: PUSH
38485: LD_INT 5
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: LD_INT 6
38494: PUSH
38495: LD_INT 5
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 6
38504: PUSH
38505: LD_INT 6
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 5
38514: PUSH
38515: LD_INT 6
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38536: LD_ADDR_VAR 0 32
38540: PUSH
38541: LD_INT 1
38543: PUSH
38544: LD_INT 3
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 0
38553: PUSH
38554: LD_INT 3
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 1
38563: NEG
38564: PUSH
38565: LD_INT 2
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 1
38574: PUSH
38575: LD_INT 4
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 0
38584: PUSH
38585: LD_INT 4
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 1
38594: NEG
38595: PUSH
38596: LD_INT 3
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 1
38605: PUSH
38606: LD_INT 5
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 0
38615: PUSH
38616: LD_INT 5
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 1
38625: NEG
38626: PUSH
38627: LD_INT 4
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 1
38636: PUSH
38637: LD_INT 6
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 0
38646: PUSH
38647: LD_INT 6
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 1
38656: NEG
38657: PUSH
38658: LD_INT 5
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
38679: LD_ADDR_VAR 0 33
38683: PUSH
38684: LD_INT 2
38686: NEG
38687: PUSH
38688: LD_INT 1
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 3
38697: NEG
38698: PUSH
38699: LD_INT 0
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 3
38708: NEG
38709: PUSH
38710: LD_INT 1
38712: NEG
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 3
38720: NEG
38721: PUSH
38722: LD_INT 1
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 4
38731: NEG
38732: PUSH
38733: LD_INT 0
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 4
38742: NEG
38743: PUSH
38744: LD_INT 1
38746: NEG
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 4
38754: NEG
38755: PUSH
38756: LD_INT 1
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 5
38765: NEG
38766: PUSH
38767: LD_INT 0
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 5
38776: NEG
38777: PUSH
38778: LD_INT 1
38780: NEG
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 5
38788: NEG
38789: PUSH
38790: LD_INT 1
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 6
38799: NEG
38800: PUSH
38801: LD_INT 0
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 6
38810: NEG
38811: PUSH
38812: LD_INT 1
38814: NEG
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
38834: LD_ADDR_VAR 0 34
38838: PUSH
38839: LD_INT 2
38841: NEG
38842: PUSH
38843: LD_INT 3
38845: NEG
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 3
38853: NEG
38854: PUSH
38855: LD_INT 2
38857: NEG
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 3
38865: NEG
38866: PUSH
38867: LD_INT 3
38869: NEG
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 3
38877: NEG
38878: PUSH
38879: LD_INT 4
38881: NEG
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 4
38889: NEG
38890: PUSH
38891: LD_INT 3
38893: NEG
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 4
38901: NEG
38902: PUSH
38903: LD_INT 4
38905: NEG
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 4
38913: NEG
38914: PUSH
38915: LD_INT 5
38917: NEG
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 5
38925: NEG
38926: PUSH
38927: LD_INT 4
38929: NEG
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 5
38937: NEG
38938: PUSH
38939: LD_INT 5
38941: NEG
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 5
38949: NEG
38950: PUSH
38951: LD_INT 6
38953: NEG
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 6
38961: NEG
38962: PUSH
38963: LD_INT 5
38965: NEG
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 6
38973: NEG
38974: PUSH
38975: LD_INT 6
38977: NEG
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38997: LD_ADDR_VAR 0 41
39001: PUSH
39002: LD_INT 0
39004: PUSH
39005: LD_INT 2
39007: NEG
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 1
39015: NEG
39016: PUSH
39017: LD_INT 3
39019: NEG
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 1
39027: PUSH
39028: LD_INT 2
39030: NEG
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: LIST
39040: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
39041: LD_ADDR_VAR 0 42
39045: PUSH
39046: LD_INT 2
39048: PUSH
39049: LD_INT 0
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 2
39058: PUSH
39059: LD_INT 1
39061: NEG
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 3
39069: PUSH
39070: LD_INT 1
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: LIST
39081: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
39082: LD_ADDR_VAR 0 43
39086: PUSH
39087: LD_INT 2
39089: PUSH
39090: LD_INT 2
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 3
39099: PUSH
39100: LD_INT 2
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 2
39109: PUSH
39110: LD_INT 3
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: LIST
39121: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
39122: LD_ADDR_VAR 0 44
39126: PUSH
39127: LD_INT 0
39129: PUSH
39130: LD_INT 2
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 1
39139: PUSH
39140: LD_INT 3
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 1
39149: NEG
39150: PUSH
39151: LD_INT 2
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: LIST
39162: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39163: LD_ADDR_VAR 0 45
39167: PUSH
39168: LD_INT 2
39170: NEG
39171: PUSH
39172: LD_INT 0
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 2
39181: NEG
39182: PUSH
39183: LD_INT 1
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 3
39192: NEG
39193: PUSH
39194: LD_INT 1
39196: NEG
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: LIST
39206: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
39207: LD_ADDR_VAR 0 46
39211: PUSH
39212: LD_INT 2
39214: NEG
39215: PUSH
39216: LD_INT 2
39218: NEG
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 2
39226: NEG
39227: PUSH
39228: LD_INT 3
39230: NEG
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 3
39238: NEG
39239: PUSH
39240: LD_INT 2
39242: NEG
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: LIST
39252: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
39253: LD_ADDR_VAR 0 47
39257: PUSH
39258: LD_INT 2
39260: NEG
39261: PUSH
39262: LD_INT 3
39264: NEG
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 1
39272: NEG
39273: PUSH
39274: LD_INT 3
39276: NEG
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39286: LD_ADDR_VAR 0 48
39290: PUSH
39291: LD_INT 1
39293: PUSH
39294: LD_INT 2
39296: NEG
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 2
39304: PUSH
39305: LD_INT 1
39307: NEG
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
39317: LD_ADDR_VAR 0 49
39321: PUSH
39322: LD_INT 3
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 3
39334: PUSH
39335: LD_INT 2
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
39346: LD_ADDR_VAR 0 50
39350: PUSH
39351: LD_INT 2
39353: PUSH
39354: LD_INT 3
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 1
39363: PUSH
39364: LD_INT 3
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39375: LD_ADDR_VAR 0 51
39379: PUSH
39380: LD_INT 1
39382: NEG
39383: PUSH
39384: LD_INT 2
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 2
39393: NEG
39394: PUSH
39395: LD_INT 1
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39406: LD_ADDR_VAR 0 52
39410: PUSH
39411: LD_INT 3
39413: NEG
39414: PUSH
39415: LD_INT 1
39417: NEG
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 3
39425: NEG
39426: PUSH
39427: LD_INT 2
39429: NEG
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39439: LD_ADDR_VAR 0 53
39443: PUSH
39444: LD_INT 1
39446: NEG
39447: PUSH
39448: LD_INT 3
39450: NEG
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 0
39458: PUSH
39459: LD_INT 3
39461: NEG
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: LD_INT 2
39472: NEG
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: LIST
39482: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39483: LD_ADDR_VAR 0 54
39487: PUSH
39488: LD_INT 2
39490: PUSH
39491: LD_INT 1
39493: NEG
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 3
39501: PUSH
39502: LD_INT 0
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 3
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: LIST
39523: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39524: LD_ADDR_VAR 0 55
39528: PUSH
39529: LD_INT 3
39531: PUSH
39532: LD_INT 2
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 3
39541: PUSH
39542: LD_INT 3
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 2
39551: PUSH
39552: LD_INT 3
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: LIST
39563: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39564: LD_ADDR_VAR 0 56
39568: PUSH
39569: LD_INT 1
39571: PUSH
39572: LD_INT 3
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 0
39581: PUSH
39582: LD_INT 3
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 1
39591: NEG
39592: PUSH
39593: LD_INT 2
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: LIST
39604: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39605: LD_ADDR_VAR 0 57
39609: PUSH
39610: LD_INT 2
39612: NEG
39613: PUSH
39614: LD_INT 1
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 3
39623: NEG
39624: PUSH
39625: LD_INT 0
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 3
39634: NEG
39635: PUSH
39636: LD_INT 1
39638: NEG
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: LIST
39648: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39649: LD_ADDR_VAR 0 58
39653: PUSH
39654: LD_INT 2
39656: NEG
39657: PUSH
39658: LD_INT 3
39660: NEG
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 3
39668: NEG
39669: PUSH
39670: LD_INT 2
39672: NEG
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 3
39680: NEG
39681: PUSH
39682: LD_INT 3
39684: NEG
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: LIST
39694: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
39695: LD_ADDR_VAR 0 59
39699: PUSH
39700: LD_INT 1
39702: NEG
39703: PUSH
39704: LD_INT 2
39706: NEG
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 0
39714: PUSH
39715: LD_INT 2
39717: NEG
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 1
39725: PUSH
39726: LD_INT 1
39728: NEG
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: LIST
39738: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39739: LD_ADDR_VAR 0 60
39743: PUSH
39744: LD_INT 1
39746: PUSH
39747: LD_INT 1
39749: NEG
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 2
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 2
39767: PUSH
39768: LD_INT 1
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: LIST
39779: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39780: LD_ADDR_VAR 0 61
39784: PUSH
39785: LD_INT 2
39787: PUSH
39788: LD_INT 1
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 2
39797: PUSH
39798: LD_INT 2
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 1
39807: PUSH
39808: LD_INT 2
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: LIST
39819: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39820: LD_ADDR_VAR 0 62
39824: PUSH
39825: LD_INT 1
39827: PUSH
39828: LD_INT 2
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 0
39837: PUSH
39838: LD_INT 2
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 1
39847: NEG
39848: PUSH
39849: LD_INT 1
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: LIST
39860: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39861: LD_ADDR_VAR 0 63
39865: PUSH
39866: LD_INT 1
39868: NEG
39869: PUSH
39870: LD_INT 1
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 2
39879: NEG
39880: PUSH
39881: LD_INT 0
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 2
39890: NEG
39891: PUSH
39892: LD_INT 1
39894: NEG
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: LIST
39904: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39905: LD_ADDR_VAR 0 64
39909: PUSH
39910: LD_INT 1
39912: NEG
39913: PUSH
39914: LD_INT 2
39916: NEG
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 2
39924: NEG
39925: PUSH
39926: LD_INT 1
39928: NEG
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 2
39936: NEG
39937: PUSH
39938: LD_INT 2
39940: NEG
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: LIST
39950: ST_TO_ADDR
// end ; 2 :
39951: GO 43217
39953: LD_INT 2
39955: DOUBLE
39956: EQUAL
39957: IFTRUE 39961
39959: GO 43216
39961: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39962: LD_ADDR_VAR 0 29
39966: PUSH
39967: LD_INT 4
39969: PUSH
39970: LD_INT 0
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 4
39979: PUSH
39980: LD_INT 1
39982: NEG
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 5
39990: PUSH
39991: LD_INT 0
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 5
40000: PUSH
40001: LD_INT 1
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 4
40010: PUSH
40011: LD_INT 1
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 3
40020: PUSH
40021: LD_INT 0
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 3
40030: PUSH
40031: LD_INT 1
40033: NEG
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 3
40041: PUSH
40042: LD_INT 2
40044: NEG
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 5
40052: PUSH
40053: LD_INT 2
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 3
40062: PUSH
40063: LD_INT 3
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 3
40072: PUSH
40073: LD_INT 2
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 4
40082: PUSH
40083: LD_INT 3
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 4
40092: PUSH
40093: LD_INT 4
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 3
40102: PUSH
40103: LD_INT 4
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 2
40112: PUSH
40113: LD_INT 3
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 2
40122: PUSH
40123: LD_INT 2
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 4
40132: PUSH
40133: LD_INT 2
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 2
40142: PUSH
40143: LD_INT 4
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 0
40152: PUSH
40153: LD_INT 4
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 0
40162: PUSH
40163: LD_INT 3
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 1
40172: PUSH
40173: LD_INT 4
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: LD_INT 5
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 0
40192: PUSH
40193: LD_INT 5
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 1
40202: NEG
40203: PUSH
40204: LD_INT 4
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 1
40213: NEG
40214: PUSH
40215: LD_INT 3
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 2
40224: PUSH
40225: LD_INT 5
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 2
40234: NEG
40235: PUSH
40236: LD_INT 3
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 3
40245: NEG
40246: PUSH
40247: LD_INT 0
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 3
40256: NEG
40257: PUSH
40258: LD_INT 1
40260: NEG
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 2
40268: NEG
40269: PUSH
40270: LD_INT 0
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 2
40279: NEG
40280: PUSH
40281: LD_INT 1
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 3
40290: NEG
40291: PUSH
40292: LD_INT 1
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 4
40301: NEG
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 4
40312: NEG
40313: PUSH
40314: LD_INT 1
40316: NEG
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 4
40324: NEG
40325: PUSH
40326: LD_INT 2
40328: NEG
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 2
40336: NEG
40337: PUSH
40338: LD_INT 2
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 4
40347: NEG
40348: PUSH
40349: LD_INT 4
40351: NEG
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 4
40359: NEG
40360: PUSH
40361: LD_INT 5
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 3
40371: NEG
40372: PUSH
40373: LD_INT 4
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 3
40383: NEG
40384: PUSH
40385: LD_INT 3
40387: NEG
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 4
40395: NEG
40396: PUSH
40397: LD_INT 3
40399: NEG
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 5
40407: NEG
40408: PUSH
40409: LD_INT 4
40411: NEG
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 5
40419: NEG
40420: PUSH
40421: LD_INT 5
40423: NEG
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 3
40431: NEG
40432: PUSH
40433: LD_INT 5
40435: NEG
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 5
40443: NEG
40444: PUSH
40445: LD_INT 3
40447: NEG
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
40500: LD_ADDR_VAR 0 30
40504: PUSH
40505: LD_INT 4
40507: PUSH
40508: LD_INT 4
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 4
40517: PUSH
40518: LD_INT 3
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 5
40527: PUSH
40528: LD_INT 4
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 5
40537: PUSH
40538: LD_INT 5
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 4
40547: PUSH
40548: LD_INT 5
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 3
40557: PUSH
40558: LD_INT 4
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 3
40567: PUSH
40568: LD_INT 3
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 5
40577: PUSH
40578: LD_INT 3
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 3
40587: PUSH
40588: LD_INT 5
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 0
40597: PUSH
40598: LD_INT 3
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 0
40607: PUSH
40608: LD_INT 2
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: LD_INT 1
40617: PUSH
40618: LD_INT 3
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 1
40627: PUSH
40628: LD_INT 4
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 0
40637: PUSH
40638: LD_INT 4
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 1
40647: NEG
40648: PUSH
40649: LD_INT 3
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 1
40658: NEG
40659: PUSH
40660: LD_INT 2
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 2
40669: PUSH
40670: LD_INT 4
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 2
40679: NEG
40680: PUSH
40681: LD_INT 2
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 4
40690: NEG
40691: PUSH
40692: LD_INT 0
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 4
40701: NEG
40702: PUSH
40703: LD_INT 1
40705: NEG
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 3
40713: NEG
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 3
40724: NEG
40725: PUSH
40726: LD_INT 1
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 4
40735: NEG
40736: PUSH
40737: LD_INT 1
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 5
40746: NEG
40747: PUSH
40748: LD_INT 0
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 5
40757: NEG
40758: PUSH
40759: LD_INT 1
40761: NEG
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 5
40769: NEG
40770: PUSH
40771: LD_INT 2
40773: NEG
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 3
40781: NEG
40782: PUSH
40783: LD_INT 2
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 3
40792: NEG
40793: PUSH
40794: LD_INT 3
40796: NEG
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 3
40804: NEG
40805: PUSH
40806: LD_INT 4
40808: NEG
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 2
40816: NEG
40817: PUSH
40818: LD_INT 3
40820: NEG
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 2
40828: NEG
40829: PUSH
40830: LD_INT 2
40832: NEG
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 3
40840: NEG
40841: PUSH
40842: LD_INT 2
40844: NEG
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 4
40852: NEG
40853: PUSH
40854: LD_INT 3
40856: NEG
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 4
40864: NEG
40865: PUSH
40866: LD_INT 4
40868: NEG
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 2
40876: NEG
40877: PUSH
40878: LD_INT 4
40880: NEG
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 4
40888: NEG
40889: PUSH
40890: LD_INT 2
40892: NEG
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 0
40900: PUSH
40901: LD_INT 4
40903: NEG
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 0
40911: PUSH
40912: LD_INT 5
40914: NEG
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 1
40922: PUSH
40923: LD_INT 4
40925: NEG
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 1
40933: PUSH
40934: LD_INT 3
40936: NEG
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 0
40944: PUSH
40945: LD_INT 3
40947: NEG
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 1
40955: NEG
40956: PUSH
40957: LD_INT 4
40959: NEG
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 1
40967: NEG
40968: PUSH
40969: LD_INT 5
40971: NEG
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 2
40979: PUSH
40980: LD_INT 3
40982: NEG
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 2
40990: NEG
40991: PUSH
40992: LD_INT 5
40994: NEG
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
41047: LD_ADDR_VAR 0 31
41051: PUSH
41052: LD_INT 0
41054: PUSH
41055: LD_INT 4
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 0
41064: PUSH
41065: LD_INT 3
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: LD_INT 4
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: LD_INT 5
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: LD_INT 5
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 1
41104: NEG
41105: PUSH
41106: LD_INT 4
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 1
41115: NEG
41116: PUSH
41117: LD_INT 3
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 2
41126: PUSH
41127: LD_INT 5
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 2
41136: NEG
41137: PUSH
41138: LD_INT 3
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 3
41147: NEG
41148: PUSH
41149: LD_INT 0
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 3
41158: NEG
41159: PUSH
41160: LD_INT 1
41162: NEG
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 2
41170: NEG
41171: PUSH
41172: LD_INT 0
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 2
41181: NEG
41182: PUSH
41183: LD_INT 1
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 3
41192: NEG
41193: PUSH
41194: LD_INT 1
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 4
41203: NEG
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 4
41214: NEG
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 4
41226: NEG
41227: PUSH
41228: LD_INT 2
41230: NEG
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 2
41238: NEG
41239: PUSH
41240: LD_INT 2
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 4
41249: NEG
41250: PUSH
41251: LD_INT 4
41253: NEG
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 4
41261: NEG
41262: PUSH
41263: LD_INT 5
41265: NEG
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 3
41273: NEG
41274: PUSH
41275: LD_INT 4
41277: NEG
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 3
41285: NEG
41286: PUSH
41287: LD_INT 3
41289: NEG
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 4
41297: NEG
41298: PUSH
41299: LD_INT 3
41301: NEG
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 5
41309: NEG
41310: PUSH
41311: LD_INT 4
41313: NEG
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 5
41321: NEG
41322: PUSH
41323: LD_INT 5
41325: NEG
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 3
41333: NEG
41334: PUSH
41335: LD_INT 5
41337: NEG
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 5
41345: NEG
41346: PUSH
41347: LD_INT 3
41349: NEG
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: LD_INT 3
41360: NEG
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 0
41368: PUSH
41369: LD_INT 4
41371: NEG
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 1
41379: PUSH
41380: LD_INT 3
41382: NEG
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 1
41390: PUSH
41391: LD_INT 2
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 0
41401: PUSH
41402: LD_INT 2
41404: NEG
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 1
41412: NEG
41413: PUSH
41414: LD_INT 3
41416: NEG
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 1
41424: NEG
41425: PUSH
41426: LD_INT 4
41428: NEG
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 2
41436: PUSH
41437: LD_INT 2
41439: NEG
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 2
41447: NEG
41448: PUSH
41449: LD_INT 4
41451: NEG
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 4
41459: PUSH
41460: LD_INT 0
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 4
41469: PUSH
41470: LD_INT 1
41472: NEG
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 5
41480: PUSH
41481: LD_INT 0
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 5
41490: PUSH
41491: LD_INT 1
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 4
41500: PUSH
41501: LD_INT 1
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 3
41510: PUSH
41511: LD_INT 0
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 3
41520: PUSH
41521: LD_INT 1
41523: NEG
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 3
41531: PUSH
41532: LD_INT 2
41534: NEG
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 5
41542: PUSH
41543: LD_INT 2
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
41597: LD_ADDR_VAR 0 32
41601: PUSH
41602: LD_INT 4
41604: NEG
41605: PUSH
41606: LD_INT 0
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 4
41615: NEG
41616: PUSH
41617: LD_INT 1
41619: NEG
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 3
41627: NEG
41628: PUSH
41629: LD_INT 0
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 3
41638: NEG
41639: PUSH
41640: LD_INT 1
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 4
41649: NEG
41650: PUSH
41651: LD_INT 1
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 5
41660: NEG
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 5
41671: NEG
41672: PUSH
41673: LD_INT 1
41675: NEG
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 5
41683: NEG
41684: PUSH
41685: LD_INT 2
41687: NEG
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 3
41695: NEG
41696: PUSH
41697: LD_INT 2
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 3
41706: NEG
41707: PUSH
41708: LD_INT 3
41710: NEG
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 3
41718: NEG
41719: PUSH
41720: LD_INT 4
41722: NEG
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 2
41730: NEG
41731: PUSH
41732: LD_INT 3
41734: NEG
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 2
41742: NEG
41743: PUSH
41744: LD_INT 2
41746: NEG
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 3
41754: NEG
41755: PUSH
41756: LD_INT 2
41758: NEG
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 4
41766: NEG
41767: PUSH
41768: LD_INT 3
41770: NEG
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 4
41778: NEG
41779: PUSH
41780: LD_INT 4
41782: NEG
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 2
41790: NEG
41791: PUSH
41792: LD_INT 4
41794: NEG
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 4
41802: NEG
41803: PUSH
41804: LD_INT 2
41806: NEG
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 0
41814: PUSH
41815: LD_INT 4
41817: NEG
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: LD_INT 5
41828: NEG
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: LD_INT 4
41839: NEG
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 1
41847: PUSH
41848: LD_INT 3
41850: NEG
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 0
41858: PUSH
41859: LD_INT 3
41861: NEG
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 1
41869: NEG
41870: PUSH
41871: LD_INT 4
41873: NEG
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 1
41881: NEG
41882: PUSH
41883: LD_INT 5
41885: NEG
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 2
41893: PUSH
41894: LD_INT 3
41896: NEG
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 2
41904: NEG
41905: PUSH
41906: LD_INT 5
41908: NEG
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 3
41916: PUSH
41917: LD_INT 0
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 3
41926: PUSH
41927: LD_INT 1
41929: NEG
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 4
41937: PUSH
41938: LD_INT 0
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 4
41947: PUSH
41948: LD_INT 1
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 3
41957: PUSH
41958: LD_INT 1
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 2
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 2
41977: PUSH
41978: LD_INT 1
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 2
41988: PUSH
41989: LD_INT 2
41991: NEG
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 4
41999: PUSH
42000: LD_INT 2
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 4
42009: PUSH
42010: LD_INT 4
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 4
42019: PUSH
42020: LD_INT 3
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 5
42029: PUSH
42030: LD_INT 4
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 5
42039: PUSH
42040: LD_INT 5
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 4
42049: PUSH
42050: LD_INT 5
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 3
42059: PUSH
42060: LD_INT 4
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 3
42069: PUSH
42070: LD_INT 3
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 5
42079: PUSH
42080: LD_INT 3
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 3
42089: PUSH
42090: LD_INT 5
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
42144: LD_ADDR_VAR 0 33
42148: PUSH
42149: LD_INT 4
42151: NEG
42152: PUSH
42153: LD_INT 4
42155: NEG
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 4
42163: NEG
42164: PUSH
42165: LD_INT 5
42167: NEG
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 3
42175: NEG
42176: PUSH
42177: LD_INT 4
42179: NEG
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 3
42187: NEG
42188: PUSH
42189: LD_INT 3
42191: NEG
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 4
42199: NEG
42200: PUSH
42201: LD_INT 3
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 5
42211: NEG
42212: PUSH
42213: LD_INT 4
42215: NEG
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 5
42223: NEG
42224: PUSH
42225: LD_INT 5
42227: NEG
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 3
42235: NEG
42236: PUSH
42237: LD_INT 5
42239: NEG
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 5
42247: NEG
42248: PUSH
42249: LD_INT 3
42251: NEG
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: LD_INT 3
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 0
42270: PUSH
42271: LD_INT 4
42273: NEG
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: LD_INT 3
42284: NEG
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 1
42292: PUSH
42293: LD_INT 2
42295: NEG
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 0
42303: PUSH
42304: LD_INT 2
42306: NEG
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 1
42314: NEG
42315: PUSH
42316: LD_INT 3
42318: NEG
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 1
42326: NEG
42327: PUSH
42328: LD_INT 4
42330: NEG
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 2
42338: PUSH
42339: LD_INT 2
42341: NEG
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 2
42349: NEG
42350: PUSH
42351: LD_INT 4
42353: NEG
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 4
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 4
42371: PUSH
42372: LD_INT 1
42374: NEG
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 5
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 5
42392: PUSH
42393: LD_INT 1
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 4
42402: PUSH
42403: LD_INT 1
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 3
42412: PUSH
42413: LD_INT 0
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 3
42422: PUSH
42423: LD_INT 1
42425: NEG
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 3
42433: PUSH
42434: LD_INT 2
42436: NEG
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 5
42444: PUSH
42445: LD_INT 2
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 3
42454: PUSH
42455: LD_INT 3
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 3
42464: PUSH
42465: LD_INT 2
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 4
42474: PUSH
42475: LD_INT 3
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 4
42484: PUSH
42485: LD_INT 4
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 3
42494: PUSH
42495: LD_INT 4
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 2
42504: PUSH
42505: LD_INT 3
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 2
42514: PUSH
42515: LD_INT 2
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 4
42524: PUSH
42525: LD_INT 2
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 2
42534: PUSH
42535: LD_INT 4
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: LD_INT 4
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: LD_INT 3
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 1
42564: PUSH
42565: LD_INT 4
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 1
42574: PUSH
42575: LD_INT 5
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 0
42584: PUSH
42585: LD_INT 5
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 1
42594: NEG
42595: PUSH
42596: LD_INT 4
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 1
42605: NEG
42606: PUSH
42607: LD_INT 3
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 2
42616: PUSH
42617: LD_INT 5
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 2
42626: NEG
42627: PUSH
42628: LD_INT 3
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
42682: LD_ADDR_VAR 0 34
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: LD_INT 4
42692: NEG
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 0
42700: PUSH
42701: LD_INT 5
42703: NEG
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 1
42711: PUSH
42712: LD_INT 4
42714: NEG
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 1
42722: PUSH
42723: LD_INT 3
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 0
42733: PUSH
42734: LD_INT 3
42736: NEG
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 1
42744: NEG
42745: PUSH
42746: LD_INT 4
42748: NEG
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 1
42756: NEG
42757: PUSH
42758: LD_INT 5
42760: NEG
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 2
42768: PUSH
42769: LD_INT 3
42771: NEG
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 2
42779: NEG
42780: PUSH
42781: LD_INT 5
42783: NEG
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 3
42791: PUSH
42792: LD_INT 0
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 3
42801: PUSH
42802: LD_INT 1
42804: NEG
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 4
42812: PUSH
42813: LD_INT 0
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 4
42822: PUSH
42823: LD_INT 1
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 3
42832: PUSH
42833: LD_INT 1
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 2
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 2
42852: PUSH
42853: LD_INT 1
42855: NEG
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 2
42863: PUSH
42864: LD_INT 2
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 4
42874: PUSH
42875: LD_INT 2
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 4
42884: PUSH
42885: LD_INT 4
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 4
42894: PUSH
42895: LD_INT 3
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 5
42904: PUSH
42905: LD_INT 4
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 5
42914: PUSH
42915: LD_INT 5
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 4
42924: PUSH
42925: LD_INT 5
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 3
42934: PUSH
42935: LD_INT 4
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 3
42944: PUSH
42945: LD_INT 3
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 5
42954: PUSH
42955: LD_INT 3
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 3
42964: PUSH
42965: LD_INT 5
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: LD_INT 3
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: LD_INT 2
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: LD_INT 3
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: PUSH
43005: LD_INT 4
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: LD_INT 4
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 1
43024: NEG
43025: PUSH
43026: LD_INT 3
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 1
43035: NEG
43036: PUSH
43037: LD_INT 2
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 2
43046: PUSH
43047: LD_INT 4
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 2
43056: NEG
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 4
43067: NEG
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 4
43078: NEG
43079: PUSH
43080: LD_INT 1
43082: NEG
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 3
43090: NEG
43091: PUSH
43092: LD_INT 0
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 3
43101: NEG
43102: PUSH
43103: LD_INT 1
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 4
43112: NEG
43113: PUSH
43114: LD_INT 1
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 5
43123: NEG
43124: PUSH
43125: LD_INT 0
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 5
43134: NEG
43135: PUSH
43136: LD_INT 1
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 5
43146: NEG
43147: PUSH
43148: LD_INT 2
43150: NEG
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 3
43158: NEG
43159: PUSH
43160: LD_INT 2
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: ST_TO_ADDR
// end ; end ;
43214: GO 43217
43216: POP
// case btype of b_depot , b_warehouse :
43217: LD_VAR 0 1
43221: PUSH
43222: LD_INT 0
43224: DOUBLE
43225: EQUAL
43226: IFTRUE 43236
43228: LD_INT 1
43230: DOUBLE
43231: EQUAL
43232: IFTRUE 43236
43234: GO 43437
43236: POP
// case nation of nation_american :
43237: LD_VAR 0 5
43241: PUSH
43242: LD_INT 1
43244: DOUBLE
43245: EQUAL
43246: IFTRUE 43250
43248: GO 43306
43250: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
43251: LD_ADDR_VAR 0 9
43255: PUSH
43256: LD_VAR 0 11
43260: PUSH
43261: LD_VAR 0 12
43265: PUSH
43266: LD_VAR 0 13
43270: PUSH
43271: LD_VAR 0 14
43275: PUSH
43276: LD_VAR 0 15
43280: PUSH
43281: LD_VAR 0 16
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: PUSH
43294: LD_VAR 0 4
43298: PUSH
43299: LD_INT 1
43301: PLUS
43302: ARRAY
43303: ST_TO_ADDR
43304: GO 43435
43306: LD_INT 2
43308: DOUBLE
43309: EQUAL
43310: IFTRUE 43314
43312: GO 43370
43314: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
43315: LD_ADDR_VAR 0 9
43319: PUSH
43320: LD_VAR 0 17
43324: PUSH
43325: LD_VAR 0 18
43329: PUSH
43330: LD_VAR 0 19
43334: PUSH
43335: LD_VAR 0 20
43339: PUSH
43340: LD_VAR 0 21
43344: PUSH
43345: LD_VAR 0 22
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: PUSH
43358: LD_VAR 0 4
43362: PUSH
43363: LD_INT 1
43365: PLUS
43366: ARRAY
43367: ST_TO_ADDR
43368: GO 43435
43370: LD_INT 3
43372: DOUBLE
43373: EQUAL
43374: IFTRUE 43378
43376: GO 43434
43378: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
43379: LD_ADDR_VAR 0 9
43383: PUSH
43384: LD_VAR 0 23
43388: PUSH
43389: LD_VAR 0 24
43393: PUSH
43394: LD_VAR 0 25
43398: PUSH
43399: LD_VAR 0 26
43403: PUSH
43404: LD_VAR 0 27
43408: PUSH
43409: LD_VAR 0 28
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: PUSH
43422: LD_VAR 0 4
43426: PUSH
43427: LD_INT 1
43429: PLUS
43430: ARRAY
43431: ST_TO_ADDR
43432: GO 43435
43434: POP
43435: GO 43990
43437: LD_INT 2
43439: DOUBLE
43440: EQUAL
43441: IFTRUE 43451
43443: LD_INT 3
43445: DOUBLE
43446: EQUAL
43447: IFTRUE 43451
43449: GO 43507
43451: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
43452: LD_ADDR_VAR 0 9
43456: PUSH
43457: LD_VAR 0 29
43461: PUSH
43462: LD_VAR 0 30
43466: PUSH
43467: LD_VAR 0 31
43471: PUSH
43472: LD_VAR 0 32
43476: PUSH
43477: LD_VAR 0 33
43481: PUSH
43482: LD_VAR 0 34
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: PUSH
43495: LD_VAR 0 4
43499: PUSH
43500: LD_INT 1
43502: PLUS
43503: ARRAY
43504: ST_TO_ADDR
43505: GO 43990
43507: LD_INT 16
43509: DOUBLE
43510: EQUAL
43511: IFTRUE 43569
43513: LD_INT 17
43515: DOUBLE
43516: EQUAL
43517: IFTRUE 43569
43519: LD_INT 18
43521: DOUBLE
43522: EQUAL
43523: IFTRUE 43569
43525: LD_INT 19
43527: DOUBLE
43528: EQUAL
43529: IFTRUE 43569
43531: LD_INT 22
43533: DOUBLE
43534: EQUAL
43535: IFTRUE 43569
43537: LD_INT 20
43539: DOUBLE
43540: EQUAL
43541: IFTRUE 43569
43543: LD_INT 21
43545: DOUBLE
43546: EQUAL
43547: IFTRUE 43569
43549: LD_INT 23
43551: DOUBLE
43552: EQUAL
43553: IFTRUE 43569
43555: LD_INT 24
43557: DOUBLE
43558: EQUAL
43559: IFTRUE 43569
43561: LD_INT 25
43563: DOUBLE
43564: EQUAL
43565: IFTRUE 43569
43567: GO 43625
43569: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
43570: LD_ADDR_VAR 0 9
43574: PUSH
43575: LD_VAR 0 35
43579: PUSH
43580: LD_VAR 0 36
43584: PUSH
43585: LD_VAR 0 37
43589: PUSH
43590: LD_VAR 0 38
43594: PUSH
43595: LD_VAR 0 39
43599: PUSH
43600: LD_VAR 0 40
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: PUSH
43613: LD_VAR 0 4
43617: PUSH
43618: LD_INT 1
43620: PLUS
43621: ARRAY
43622: ST_TO_ADDR
43623: GO 43990
43625: LD_INT 6
43627: DOUBLE
43628: EQUAL
43629: IFTRUE 43681
43631: LD_INT 7
43633: DOUBLE
43634: EQUAL
43635: IFTRUE 43681
43637: LD_INT 8
43639: DOUBLE
43640: EQUAL
43641: IFTRUE 43681
43643: LD_INT 13
43645: DOUBLE
43646: EQUAL
43647: IFTRUE 43681
43649: LD_INT 12
43651: DOUBLE
43652: EQUAL
43653: IFTRUE 43681
43655: LD_INT 15
43657: DOUBLE
43658: EQUAL
43659: IFTRUE 43681
43661: LD_INT 11
43663: DOUBLE
43664: EQUAL
43665: IFTRUE 43681
43667: LD_INT 14
43669: DOUBLE
43670: EQUAL
43671: IFTRUE 43681
43673: LD_INT 10
43675: DOUBLE
43676: EQUAL
43677: IFTRUE 43681
43679: GO 43737
43681: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
43682: LD_ADDR_VAR 0 9
43686: PUSH
43687: LD_VAR 0 41
43691: PUSH
43692: LD_VAR 0 42
43696: PUSH
43697: LD_VAR 0 43
43701: PUSH
43702: LD_VAR 0 44
43706: PUSH
43707: LD_VAR 0 45
43711: PUSH
43712: LD_VAR 0 46
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: PUSH
43725: LD_VAR 0 4
43729: PUSH
43730: LD_INT 1
43732: PLUS
43733: ARRAY
43734: ST_TO_ADDR
43735: GO 43990
43737: LD_INT 36
43739: DOUBLE
43740: EQUAL
43741: IFTRUE 43745
43743: GO 43801
43745: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
43746: LD_ADDR_VAR 0 9
43750: PUSH
43751: LD_VAR 0 47
43755: PUSH
43756: LD_VAR 0 48
43760: PUSH
43761: LD_VAR 0 49
43765: PUSH
43766: LD_VAR 0 50
43770: PUSH
43771: LD_VAR 0 51
43775: PUSH
43776: LD_VAR 0 52
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: PUSH
43789: LD_VAR 0 4
43793: PUSH
43794: LD_INT 1
43796: PLUS
43797: ARRAY
43798: ST_TO_ADDR
43799: GO 43990
43801: LD_INT 4
43803: DOUBLE
43804: EQUAL
43805: IFTRUE 43827
43807: LD_INT 5
43809: DOUBLE
43810: EQUAL
43811: IFTRUE 43827
43813: LD_INT 34
43815: DOUBLE
43816: EQUAL
43817: IFTRUE 43827
43819: LD_INT 37
43821: DOUBLE
43822: EQUAL
43823: IFTRUE 43827
43825: GO 43883
43827: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
43828: LD_ADDR_VAR 0 9
43832: PUSH
43833: LD_VAR 0 53
43837: PUSH
43838: LD_VAR 0 54
43842: PUSH
43843: LD_VAR 0 55
43847: PUSH
43848: LD_VAR 0 56
43852: PUSH
43853: LD_VAR 0 57
43857: PUSH
43858: LD_VAR 0 58
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: PUSH
43871: LD_VAR 0 4
43875: PUSH
43876: LD_INT 1
43878: PLUS
43879: ARRAY
43880: ST_TO_ADDR
43881: GO 43990
43883: LD_INT 31
43885: DOUBLE
43886: EQUAL
43887: IFTRUE 43933
43889: LD_INT 32
43891: DOUBLE
43892: EQUAL
43893: IFTRUE 43933
43895: LD_INT 33
43897: DOUBLE
43898: EQUAL
43899: IFTRUE 43933
43901: LD_INT 27
43903: DOUBLE
43904: EQUAL
43905: IFTRUE 43933
43907: LD_INT 26
43909: DOUBLE
43910: EQUAL
43911: IFTRUE 43933
43913: LD_INT 28
43915: DOUBLE
43916: EQUAL
43917: IFTRUE 43933
43919: LD_INT 29
43921: DOUBLE
43922: EQUAL
43923: IFTRUE 43933
43925: LD_INT 30
43927: DOUBLE
43928: EQUAL
43929: IFTRUE 43933
43931: GO 43989
43933: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
43934: LD_ADDR_VAR 0 9
43938: PUSH
43939: LD_VAR 0 59
43943: PUSH
43944: LD_VAR 0 60
43948: PUSH
43949: LD_VAR 0 61
43953: PUSH
43954: LD_VAR 0 62
43958: PUSH
43959: LD_VAR 0 63
43963: PUSH
43964: LD_VAR 0 64
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: PUSH
43977: LD_VAR 0 4
43981: PUSH
43982: LD_INT 1
43984: PLUS
43985: ARRAY
43986: ST_TO_ADDR
43987: GO 43990
43989: POP
// temp_list2 = [ ] ;
43990: LD_ADDR_VAR 0 10
43994: PUSH
43995: EMPTY
43996: ST_TO_ADDR
// for i in temp_list do
43997: LD_ADDR_VAR 0 8
44001: PUSH
44002: LD_VAR 0 9
44006: PUSH
44007: FOR_IN
44008: IFFALSE 44060
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
44010: LD_ADDR_VAR 0 10
44014: PUSH
44015: LD_VAR 0 10
44019: PUSH
44020: LD_VAR 0 8
44024: PUSH
44025: LD_INT 1
44027: ARRAY
44028: PUSH
44029: LD_VAR 0 2
44033: PLUS
44034: PUSH
44035: LD_VAR 0 8
44039: PUSH
44040: LD_INT 2
44042: ARRAY
44043: PUSH
44044: LD_VAR 0 3
44048: PLUS
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: EMPTY
44055: LIST
44056: ADD
44057: ST_TO_ADDR
44058: GO 44007
44060: POP
44061: POP
// result = temp_list2 ;
44062: LD_ADDR_VAR 0 7
44066: PUSH
44067: LD_VAR 0 10
44071: ST_TO_ADDR
// end ;
44072: LD_VAR 0 7
44076: RET
// export function EnemyInRange ( unit , dist ) ; begin
44077: LD_INT 0
44079: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
44080: LD_ADDR_VAR 0 3
44084: PUSH
44085: LD_VAR 0 1
44089: PPUSH
44090: CALL_OW 255
44094: PPUSH
44095: LD_VAR 0 1
44099: PPUSH
44100: CALL_OW 250
44104: PPUSH
44105: LD_VAR 0 1
44109: PPUSH
44110: CALL_OW 251
44114: PPUSH
44115: LD_VAR 0 2
44119: PPUSH
44120: CALL 17472 0 4
44124: PUSH
44125: LD_INT 4
44127: ARRAY
44128: ST_TO_ADDR
// end ;
44129: LD_VAR 0 3
44133: RET
// export function PlayerSeeMe ( unit ) ; begin
44134: LD_INT 0
44136: PPUSH
// result := See ( your_side , unit ) ;
44137: LD_ADDR_VAR 0 2
44141: PUSH
44142: LD_OWVAR 2
44146: PPUSH
44147: LD_VAR 0 1
44151: PPUSH
44152: CALL_OW 292
44156: ST_TO_ADDR
// end ;
44157: LD_VAR 0 2
44161: RET
// export function ReverseDir ( unit ) ; begin
44162: LD_INT 0
44164: PPUSH
// if not unit then
44165: LD_VAR 0 1
44169: NOT
44170: IFFALSE 44174
// exit ;
44172: GO 44197
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
44174: LD_ADDR_VAR 0 2
44178: PUSH
44179: LD_VAR 0 1
44183: PPUSH
44184: CALL_OW 254
44188: PUSH
44189: LD_INT 3
44191: PLUS
44192: PUSH
44193: LD_INT 6
44195: MOD
44196: ST_TO_ADDR
// end ;
44197: LD_VAR 0 2
44201: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
44202: LD_INT 0
44204: PPUSH
44205: PPUSH
44206: PPUSH
44207: PPUSH
44208: PPUSH
// if not hexes then
44209: LD_VAR 0 2
44213: NOT
44214: IFFALSE 44218
// exit ;
44216: GO 44366
// dist := 9999 ;
44218: LD_ADDR_VAR 0 5
44222: PUSH
44223: LD_INT 9999
44225: ST_TO_ADDR
// for i = 1 to hexes do
44226: LD_ADDR_VAR 0 4
44230: PUSH
44231: DOUBLE
44232: LD_INT 1
44234: DEC
44235: ST_TO_ADDR
44236: LD_VAR 0 2
44240: PUSH
44241: FOR_TO
44242: IFFALSE 44354
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
44244: LD_VAR 0 1
44248: PPUSH
44249: LD_VAR 0 2
44253: PUSH
44254: LD_VAR 0 4
44258: ARRAY
44259: PUSH
44260: LD_INT 1
44262: ARRAY
44263: PPUSH
44264: LD_VAR 0 2
44268: PUSH
44269: LD_VAR 0 4
44273: ARRAY
44274: PUSH
44275: LD_INT 2
44277: ARRAY
44278: PPUSH
44279: CALL_OW 297
44283: PUSH
44284: LD_VAR 0 5
44288: LESS
44289: IFFALSE 44352
// begin hex := hexes [ i ] ;
44291: LD_ADDR_VAR 0 7
44295: PUSH
44296: LD_VAR 0 2
44300: PUSH
44301: LD_VAR 0 4
44305: ARRAY
44306: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44307: LD_ADDR_VAR 0 5
44311: PUSH
44312: LD_VAR 0 1
44316: PPUSH
44317: LD_VAR 0 2
44321: PUSH
44322: LD_VAR 0 4
44326: ARRAY
44327: PUSH
44328: LD_INT 1
44330: ARRAY
44331: PPUSH
44332: LD_VAR 0 2
44336: PUSH
44337: LD_VAR 0 4
44341: ARRAY
44342: PUSH
44343: LD_INT 2
44345: ARRAY
44346: PPUSH
44347: CALL_OW 297
44351: ST_TO_ADDR
// end ; end ;
44352: GO 44241
44354: POP
44355: POP
// result := hex ;
44356: LD_ADDR_VAR 0 3
44360: PUSH
44361: LD_VAR 0 7
44365: ST_TO_ADDR
// end ;
44366: LD_VAR 0 3
44370: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
44371: LD_INT 0
44373: PPUSH
44374: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
44375: LD_VAR 0 1
44379: NOT
44380: PUSH
44381: LD_VAR 0 1
44385: PUSH
44386: LD_INT 21
44388: PUSH
44389: LD_INT 2
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 23
44398: PUSH
44399: LD_INT 2
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PPUSH
44410: CALL_OW 69
44414: IN
44415: NOT
44416: OR
44417: IFFALSE 44421
// exit ;
44419: GO 44468
// for i = 1 to 3 do
44421: LD_ADDR_VAR 0 3
44425: PUSH
44426: DOUBLE
44427: LD_INT 1
44429: DEC
44430: ST_TO_ADDR
44431: LD_INT 3
44433: PUSH
44434: FOR_TO
44435: IFFALSE 44466
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
44437: LD_VAR 0 1
44441: PPUSH
44442: CALL_OW 250
44446: PPUSH
44447: LD_VAR 0 1
44451: PPUSH
44452: CALL_OW 251
44456: PPUSH
44457: LD_INT 1
44459: PPUSH
44460: CALL_OW 453
44464: GO 44434
44466: POP
44467: POP
// end ;
44468: LD_VAR 0 2
44472: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44473: LD_INT 0
44475: PPUSH
44476: PPUSH
44477: PPUSH
44478: PPUSH
44479: PPUSH
44480: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
44481: LD_VAR 0 1
44485: NOT
44486: PUSH
44487: LD_VAR 0 2
44491: NOT
44492: OR
44493: PUSH
44494: LD_VAR 0 1
44498: PPUSH
44499: CALL_OW 314
44503: OR
44504: IFFALSE 44508
// exit ;
44506: GO 44949
// x := GetX ( enemy_unit ) ;
44508: LD_ADDR_VAR 0 7
44512: PUSH
44513: LD_VAR 0 2
44517: PPUSH
44518: CALL_OW 250
44522: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
44523: LD_ADDR_VAR 0 8
44527: PUSH
44528: LD_VAR 0 2
44532: PPUSH
44533: CALL_OW 251
44537: ST_TO_ADDR
// if not x or not y then
44538: LD_VAR 0 7
44542: NOT
44543: PUSH
44544: LD_VAR 0 8
44548: NOT
44549: OR
44550: IFFALSE 44554
// exit ;
44552: GO 44949
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
44554: LD_ADDR_VAR 0 6
44558: PUSH
44559: LD_VAR 0 7
44563: PPUSH
44564: LD_INT 0
44566: PPUSH
44567: LD_INT 4
44569: PPUSH
44570: CALL_OW 272
44574: PUSH
44575: LD_VAR 0 8
44579: PPUSH
44580: LD_INT 0
44582: PPUSH
44583: LD_INT 4
44585: PPUSH
44586: CALL_OW 273
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_VAR 0 7
44599: PPUSH
44600: LD_INT 1
44602: PPUSH
44603: LD_INT 4
44605: PPUSH
44606: CALL_OW 272
44610: PUSH
44611: LD_VAR 0 8
44615: PPUSH
44616: LD_INT 1
44618: PPUSH
44619: LD_INT 4
44621: PPUSH
44622: CALL_OW 273
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_VAR 0 7
44635: PPUSH
44636: LD_INT 2
44638: PPUSH
44639: LD_INT 4
44641: PPUSH
44642: CALL_OW 272
44646: PUSH
44647: LD_VAR 0 8
44651: PPUSH
44652: LD_INT 2
44654: PPUSH
44655: LD_INT 4
44657: PPUSH
44658: CALL_OW 273
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_VAR 0 7
44671: PPUSH
44672: LD_INT 3
44674: PPUSH
44675: LD_INT 4
44677: PPUSH
44678: CALL_OW 272
44682: PUSH
44683: LD_VAR 0 8
44687: PPUSH
44688: LD_INT 3
44690: PPUSH
44691: LD_INT 4
44693: PPUSH
44694: CALL_OW 273
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_VAR 0 7
44707: PPUSH
44708: LD_INT 4
44710: PPUSH
44711: LD_INT 4
44713: PPUSH
44714: CALL_OW 272
44718: PUSH
44719: LD_VAR 0 8
44723: PPUSH
44724: LD_INT 4
44726: PPUSH
44727: LD_INT 4
44729: PPUSH
44730: CALL_OW 273
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_VAR 0 7
44743: PPUSH
44744: LD_INT 5
44746: PPUSH
44747: LD_INT 4
44749: PPUSH
44750: CALL_OW 272
44754: PUSH
44755: LD_VAR 0 8
44759: PPUSH
44760: LD_INT 5
44762: PPUSH
44763: LD_INT 4
44765: PPUSH
44766: CALL_OW 273
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: ST_TO_ADDR
// for i = tmp downto 1 do
44783: LD_ADDR_VAR 0 4
44787: PUSH
44788: DOUBLE
44789: LD_VAR 0 6
44793: INC
44794: ST_TO_ADDR
44795: LD_INT 1
44797: PUSH
44798: FOR_DOWNTO
44799: IFFALSE 44900
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
44801: LD_VAR 0 6
44805: PUSH
44806: LD_VAR 0 4
44810: ARRAY
44811: PUSH
44812: LD_INT 1
44814: ARRAY
44815: PPUSH
44816: LD_VAR 0 6
44820: PUSH
44821: LD_VAR 0 4
44825: ARRAY
44826: PUSH
44827: LD_INT 2
44829: ARRAY
44830: PPUSH
44831: CALL_OW 488
44835: NOT
44836: PUSH
44837: LD_VAR 0 6
44841: PUSH
44842: LD_VAR 0 4
44846: ARRAY
44847: PUSH
44848: LD_INT 1
44850: ARRAY
44851: PPUSH
44852: LD_VAR 0 6
44856: PUSH
44857: LD_VAR 0 4
44861: ARRAY
44862: PUSH
44863: LD_INT 2
44865: ARRAY
44866: PPUSH
44867: CALL_OW 428
44871: PUSH
44872: LD_INT 0
44874: NONEQUAL
44875: OR
44876: IFFALSE 44898
// tmp := Delete ( tmp , i ) ;
44878: LD_ADDR_VAR 0 6
44882: PUSH
44883: LD_VAR 0 6
44887: PPUSH
44888: LD_VAR 0 4
44892: PPUSH
44893: CALL_OW 3
44897: ST_TO_ADDR
44898: GO 44798
44900: POP
44901: POP
// j := GetClosestHex ( unit , tmp ) ;
44902: LD_ADDR_VAR 0 5
44906: PUSH
44907: LD_VAR 0 1
44911: PPUSH
44912: LD_VAR 0 6
44916: PPUSH
44917: CALL 44202 0 2
44921: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44922: LD_VAR 0 1
44926: PPUSH
44927: LD_VAR 0 5
44931: PUSH
44932: LD_INT 1
44934: ARRAY
44935: PPUSH
44936: LD_VAR 0 5
44940: PUSH
44941: LD_INT 2
44943: ARRAY
44944: PPUSH
44945: CALL_OW 111
// end ;
44949: LD_VAR 0 3
44953: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44954: LD_INT 0
44956: PPUSH
44957: PPUSH
44958: PPUSH
// uc_side = 0 ;
44959: LD_ADDR_OWVAR 20
44963: PUSH
44964: LD_INT 0
44966: ST_TO_ADDR
// uc_nation = 0 ;
44967: LD_ADDR_OWVAR 21
44971: PUSH
44972: LD_INT 0
44974: ST_TO_ADDR
// InitHc_All ( ) ;
44975: CALL_OW 584
// InitVc ;
44979: CALL_OW 20
// if mastodonts then
44983: LD_VAR 0 6
44987: IFFALSE 45054
// for i = 1 to mastodonts do
44989: LD_ADDR_VAR 0 11
44993: PUSH
44994: DOUBLE
44995: LD_INT 1
44997: DEC
44998: ST_TO_ADDR
44999: LD_VAR 0 6
45003: PUSH
45004: FOR_TO
45005: IFFALSE 45052
// begin vc_chassis := 31 ;
45007: LD_ADDR_OWVAR 37
45011: PUSH
45012: LD_INT 31
45014: ST_TO_ADDR
// vc_control := control_rider ;
45015: LD_ADDR_OWVAR 38
45019: PUSH
45020: LD_INT 4
45022: ST_TO_ADDR
// animal := CreateVehicle ;
45023: LD_ADDR_VAR 0 12
45027: PUSH
45028: CALL_OW 45
45032: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45033: LD_VAR 0 12
45037: PPUSH
45038: LD_VAR 0 8
45042: PPUSH
45043: LD_INT 0
45045: PPUSH
45046: CALL 47242 0 3
// end ;
45050: GO 45004
45052: POP
45053: POP
// if horses then
45054: LD_VAR 0 5
45058: IFFALSE 45125
// for i = 1 to horses do
45060: LD_ADDR_VAR 0 11
45064: PUSH
45065: DOUBLE
45066: LD_INT 1
45068: DEC
45069: ST_TO_ADDR
45070: LD_VAR 0 5
45074: PUSH
45075: FOR_TO
45076: IFFALSE 45123
// begin hc_class := 21 ;
45078: LD_ADDR_OWVAR 28
45082: PUSH
45083: LD_INT 21
45085: ST_TO_ADDR
// hc_gallery :=  ;
45086: LD_ADDR_OWVAR 33
45090: PUSH
45091: LD_STRING 
45093: ST_TO_ADDR
// animal := CreateHuman ;
45094: LD_ADDR_VAR 0 12
45098: PUSH
45099: CALL_OW 44
45103: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45104: LD_VAR 0 12
45108: PPUSH
45109: LD_VAR 0 8
45113: PPUSH
45114: LD_INT 0
45116: PPUSH
45117: CALL 47242 0 3
// end ;
45121: GO 45075
45123: POP
45124: POP
// if birds then
45125: LD_VAR 0 1
45129: IFFALSE 45196
// for i = 1 to birds do
45131: LD_ADDR_VAR 0 11
45135: PUSH
45136: DOUBLE
45137: LD_INT 1
45139: DEC
45140: ST_TO_ADDR
45141: LD_VAR 0 1
45145: PUSH
45146: FOR_TO
45147: IFFALSE 45194
// begin hc_class = 18 ;
45149: LD_ADDR_OWVAR 28
45153: PUSH
45154: LD_INT 18
45156: ST_TO_ADDR
// hc_gallery =  ;
45157: LD_ADDR_OWVAR 33
45161: PUSH
45162: LD_STRING 
45164: ST_TO_ADDR
// animal := CreateHuman ;
45165: LD_ADDR_VAR 0 12
45169: PUSH
45170: CALL_OW 44
45174: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45175: LD_VAR 0 12
45179: PPUSH
45180: LD_VAR 0 8
45184: PPUSH
45185: LD_INT 0
45187: PPUSH
45188: CALL 47242 0 3
// end ;
45192: GO 45146
45194: POP
45195: POP
// if tigers then
45196: LD_VAR 0 2
45200: IFFALSE 45284
// for i = 1 to tigers do
45202: LD_ADDR_VAR 0 11
45206: PUSH
45207: DOUBLE
45208: LD_INT 1
45210: DEC
45211: ST_TO_ADDR
45212: LD_VAR 0 2
45216: PUSH
45217: FOR_TO
45218: IFFALSE 45282
// begin hc_class = class_tiger ;
45220: LD_ADDR_OWVAR 28
45224: PUSH
45225: LD_INT 14
45227: ST_TO_ADDR
// hc_gallery =  ;
45228: LD_ADDR_OWVAR 33
45232: PUSH
45233: LD_STRING 
45235: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45236: LD_ADDR_OWVAR 35
45240: PUSH
45241: LD_INT 7
45243: NEG
45244: PPUSH
45245: LD_INT 7
45247: PPUSH
45248: CALL_OW 12
45252: ST_TO_ADDR
// animal := CreateHuman ;
45253: LD_ADDR_VAR 0 12
45257: PUSH
45258: CALL_OW 44
45262: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45263: LD_VAR 0 12
45267: PPUSH
45268: LD_VAR 0 8
45272: PPUSH
45273: LD_INT 0
45275: PPUSH
45276: CALL 47242 0 3
// end ;
45280: GO 45217
45282: POP
45283: POP
// if apemans then
45284: LD_VAR 0 3
45288: IFFALSE 45411
// for i = 1 to apemans do
45290: LD_ADDR_VAR 0 11
45294: PUSH
45295: DOUBLE
45296: LD_INT 1
45298: DEC
45299: ST_TO_ADDR
45300: LD_VAR 0 3
45304: PUSH
45305: FOR_TO
45306: IFFALSE 45409
// begin hc_class = class_apeman ;
45308: LD_ADDR_OWVAR 28
45312: PUSH
45313: LD_INT 12
45315: ST_TO_ADDR
// hc_gallery =  ;
45316: LD_ADDR_OWVAR 33
45320: PUSH
45321: LD_STRING 
45323: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
45324: LD_ADDR_OWVAR 35
45328: PUSH
45329: LD_INT 2
45331: NEG
45332: PPUSH
45333: LD_INT 2
45335: PPUSH
45336: CALL_OW 12
45340: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45341: LD_ADDR_OWVAR 31
45345: PUSH
45346: LD_INT 1
45348: PPUSH
45349: LD_INT 3
45351: PPUSH
45352: CALL_OW 12
45356: PUSH
45357: LD_INT 1
45359: PPUSH
45360: LD_INT 3
45362: PPUSH
45363: CALL_OW 12
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: ST_TO_ADDR
// animal := CreateHuman ;
45380: LD_ADDR_VAR 0 12
45384: PUSH
45385: CALL_OW 44
45389: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45390: LD_VAR 0 12
45394: PPUSH
45395: LD_VAR 0 8
45399: PPUSH
45400: LD_INT 0
45402: PPUSH
45403: CALL 47242 0 3
// end ;
45407: GO 45305
45409: POP
45410: POP
// if enchidnas then
45411: LD_VAR 0 4
45415: IFFALSE 45482
// for i = 1 to enchidnas do
45417: LD_ADDR_VAR 0 11
45421: PUSH
45422: DOUBLE
45423: LD_INT 1
45425: DEC
45426: ST_TO_ADDR
45427: LD_VAR 0 4
45431: PUSH
45432: FOR_TO
45433: IFFALSE 45480
// begin hc_class = 13 ;
45435: LD_ADDR_OWVAR 28
45439: PUSH
45440: LD_INT 13
45442: ST_TO_ADDR
// hc_gallery =  ;
45443: LD_ADDR_OWVAR 33
45447: PUSH
45448: LD_STRING 
45450: ST_TO_ADDR
// animal := CreateHuman ;
45451: LD_ADDR_VAR 0 12
45455: PUSH
45456: CALL_OW 44
45460: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45461: LD_VAR 0 12
45465: PPUSH
45466: LD_VAR 0 8
45470: PPUSH
45471: LD_INT 0
45473: PPUSH
45474: CALL 47242 0 3
// end ;
45478: GO 45432
45480: POP
45481: POP
// if fishes then
45482: LD_VAR 0 7
45486: IFFALSE 45553
// for i = 1 to fishes do
45488: LD_ADDR_VAR 0 11
45492: PUSH
45493: DOUBLE
45494: LD_INT 1
45496: DEC
45497: ST_TO_ADDR
45498: LD_VAR 0 7
45502: PUSH
45503: FOR_TO
45504: IFFALSE 45551
// begin hc_class = 20 ;
45506: LD_ADDR_OWVAR 28
45510: PUSH
45511: LD_INT 20
45513: ST_TO_ADDR
// hc_gallery =  ;
45514: LD_ADDR_OWVAR 33
45518: PUSH
45519: LD_STRING 
45521: ST_TO_ADDR
// animal := CreateHuman ;
45522: LD_ADDR_VAR 0 12
45526: PUSH
45527: CALL_OW 44
45531: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45532: LD_VAR 0 12
45536: PPUSH
45537: LD_VAR 0 9
45541: PPUSH
45542: LD_INT 0
45544: PPUSH
45545: CALL 47242 0 3
// end ;
45549: GO 45503
45551: POP
45552: POP
// end ;
45553: LD_VAR 0 10
45557: RET
// export function WantHeal ( sci , unit ) ; begin
45558: LD_INT 0
45560: PPUSH
// if GetTaskList ( sci ) > 0 then
45561: LD_VAR 0 1
45565: PPUSH
45566: CALL_OW 437
45570: PUSH
45571: LD_INT 0
45573: GREATER
45574: IFFALSE 45644
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45576: LD_VAR 0 1
45580: PPUSH
45581: CALL_OW 437
45585: PUSH
45586: LD_INT 1
45588: ARRAY
45589: PUSH
45590: LD_INT 1
45592: ARRAY
45593: PUSH
45594: LD_STRING l
45596: EQUAL
45597: PUSH
45598: LD_VAR 0 1
45602: PPUSH
45603: CALL_OW 437
45607: PUSH
45608: LD_INT 1
45610: ARRAY
45611: PUSH
45612: LD_INT 4
45614: ARRAY
45615: PUSH
45616: LD_VAR 0 2
45620: EQUAL
45621: AND
45622: IFFALSE 45634
// result := true else
45624: LD_ADDR_VAR 0 3
45628: PUSH
45629: LD_INT 1
45631: ST_TO_ADDR
45632: GO 45642
// result := false ;
45634: LD_ADDR_VAR 0 3
45638: PUSH
45639: LD_INT 0
45641: ST_TO_ADDR
// end else
45642: GO 45652
// result := false ;
45644: LD_ADDR_VAR 0 3
45648: PUSH
45649: LD_INT 0
45651: ST_TO_ADDR
// end ;
45652: LD_VAR 0 3
45656: RET
// export function HealTarget ( sci ) ; begin
45657: LD_INT 0
45659: PPUSH
// if not sci then
45660: LD_VAR 0 1
45664: NOT
45665: IFFALSE 45669
// exit ;
45667: GO 45734
// result := 0 ;
45669: LD_ADDR_VAR 0 2
45673: PUSH
45674: LD_INT 0
45676: ST_TO_ADDR
// if GetTaskList ( sci ) then
45677: LD_VAR 0 1
45681: PPUSH
45682: CALL_OW 437
45686: IFFALSE 45734
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45688: LD_VAR 0 1
45692: PPUSH
45693: CALL_OW 437
45697: PUSH
45698: LD_INT 1
45700: ARRAY
45701: PUSH
45702: LD_INT 1
45704: ARRAY
45705: PUSH
45706: LD_STRING l
45708: EQUAL
45709: IFFALSE 45734
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45711: LD_ADDR_VAR 0 2
45715: PUSH
45716: LD_VAR 0 1
45720: PPUSH
45721: CALL_OW 437
45725: PUSH
45726: LD_INT 1
45728: ARRAY
45729: PUSH
45730: LD_INT 4
45732: ARRAY
45733: ST_TO_ADDR
// end ;
45734: LD_VAR 0 2
45738: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45739: LD_INT 0
45741: PPUSH
45742: PPUSH
45743: PPUSH
45744: PPUSH
// if not base_units then
45745: LD_VAR 0 1
45749: NOT
45750: IFFALSE 45754
// exit ;
45752: GO 45841
// result := false ;
45754: LD_ADDR_VAR 0 2
45758: PUSH
45759: LD_INT 0
45761: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45762: LD_ADDR_VAR 0 5
45766: PUSH
45767: LD_VAR 0 1
45771: PPUSH
45772: LD_INT 21
45774: PUSH
45775: LD_INT 3
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PPUSH
45782: CALL_OW 72
45786: ST_TO_ADDR
// if not tmp then
45787: LD_VAR 0 5
45791: NOT
45792: IFFALSE 45796
// exit ;
45794: GO 45841
// for i in tmp do
45796: LD_ADDR_VAR 0 3
45800: PUSH
45801: LD_VAR 0 5
45805: PUSH
45806: FOR_IN
45807: IFFALSE 45839
// begin result := EnemyInRange ( i , 22 ) ;
45809: LD_ADDR_VAR 0 2
45813: PUSH
45814: LD_VAR 0 3
45818: PPUSH
45819: LD_INT 22
45821: PPUSH
45822: CALL 44077 0 2
45826: ST_TO_ADDR
// if result then
45827: LD_VAR 0 2
45831: IFFALSE 45837
// exit ;
45833: POP
45834: POP
45835: GO 45841
// end ;
45837: GO 45806
45839: POP
45840: POP
// end ;
45841: LD_VAR 0 2
45845: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
45846: LD_INT 0
45848: PPUSH
45849: PPUSH
// if not units then
45850: LD_VAR 0 1
45854: NOT
45855: IFFALSE 45859
// exit ;
45857: GO 45929
// result := [ ] ;
45859: LD_ADDR_VAR 0 3
45863: PUSH
45864: EMPTY
45865: ST_TO_ADDR
// for i in units do
45866: LD_ADDR_VAR 0 4
45870: PUSH
45871: LD_VAR 0 1
45875: PUSH
45876: FOR_IN
45877: IFFALSE 45927
// if GetTag ( i ) = tag then
45879: LD_VAR 0 4
45883: PPUSH
45884: CALL_OW 110
45888: PUSH
45889: LD_VAR 0 2
45893: EQUAL
45894: IFFALSE 45925
// result := Insert ( result , result + 1 , i ) ;
45896: LD_ADDR_VAR 0 3
45900: PUSH
45901: LD_VAR 0 3
45905: PPUSH
45906: LD_VAR 0 3
45910: PUSH
45911: LD_INT 1
45913: PLUS
45914: PPUSH
45915: LD_VAR 0 4
45919: PPUSH
45920: CALL_OW 2
45924: ST_TO_ADDR
45925: GO 45876
45927: POP
45928: POP
// end ;
45929: LD_VAR 0 3
45933: RET
// export function IsDriver ( un ) ; begin
45934: LD_INT 0
45936: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
45937: LD_ADDR_VAR 0 2
45941: PUSH
45942: LD_VAR 0 1
45946: PUSH
45947: LD_INT 55
45949: PUSH
45950: EMPTY
45951: LIST
45952: PPUSH
45953: CALL_OW 69
45957: IN
45958: ST_TO_ADDR
// end ;
45959: LD_VAR 0 2
45963: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
45964: LD_INT 0
45966: PPUSH
45967: PPUSH
// list := [ ] ;
45968: LD_ADDR_VAR 0 5
45972: PUSH
45973: EMPTY
45974: ST_TO_ADDR
// case d of 0 :
45975: LD_VAR 0 3
45979: PUSH
45980: LD_INT 0
45982: DOUBLE
45983: EQUAL
45984: IFTRUE 45988
45986: GO 46121
45988: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
45989: LD_ADDR_VAR 0 5
45993: PUSH
45994: LD_VAR 0 1
45998: PUSH
45999: LD_INT 4
46001: MINUS
46002: PUSH
46003: LD_VAR 0 2
46007: PUSH
46008: LD_INT 4
46010: MINUS
46011: PUSH
46012: LD_INT 2
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: LIST
46019: PUSH
46020: LD_VAR 0 1
46024: PUSH
46025: LD_INT 3
46027: MINUS
46028: PUSH
46029: LD_VAR 0 2
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: LIST
46041: PUSH
46042: LD_VAR 0 1
46046: PUSH
46047: LD_INT 4
46049: PLUS
46050: PUSH
46051: LD_VAR 0 2
46055: PUSH
46056: LD_INT 4
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: LIST
46063: PUSH
46064: LD_VAR 0 1
46068: PUSH
46069: LD_INT 3
46071: PLUS
46072: PUSH
46073: LD_VAR 0 2
46077: PUSH
46078: LD_INT 3
46080: PLUS
46081: PUSH
46082: LD_INT 5
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: LIST
46089: PUSH
46090: LD_VAR 0 1
46094: PUSH
46095: LD_VAR 0 2
46099: PUSH
46100: LD_INT 4
46102: PLUS
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: LIST
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: ST_TO_ADDR
// end ; 1 :
46119: GO 46819
46121: LD_INT 1
46123: DOUBLE
46124: EQUAL
46125: IFTRUE 46129
46127: GO 46262
46129: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
46130: LD_ADDR_VAR 0 5
46134: PUSH
46135: LD_VAR 0 1
46139: PUSH
46140: LD_VAR 0 2
46144: PUSH
46145: LD_INT 4
46147: MINUS
46148: PUSH
46149: LD_INT 3
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: LIST
46156: PUSH
46157: LD_VAR 0 1
46161: PUSH
46162: LD_INT 3
46164: MINUS
46165: PUSH
46166: LD_VAR 0 2
46170: PUSH
46171: LD_INT 3
46173: MINUS
46174: PUSH
46175: LD_INT 2
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: LIST
46182: PUSH
46183: LD_VAR 0 1
46187: PUSH
46188: LD_INT 4
46190: MINUS
46191: PUSH
46192: LD_VAR 0 2
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: LIST
46204: PUSH
46205: LD_VAR 0 1
46209: PUSH
46210: LD_VAR 0 2
46214: PUSH
46215: LD_INT 3
46217: PLUS
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: LIST
46226: PUSH
46227: LD_VAR 0 1
46231: PUSH
46232: LD_INT 4
46234: PLUS
46235: PUSH
46236: LD_VAR 0 2
46240: PUSH
46241: LD_INT 4
46243: PLUS
46244: PUSH
46245: LD_INT 5
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: LIST
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: ST_TO_ADDR
// end ; 2 :
46260: GO 46819
46262: LD_INT 2
46264: DOUBLE
46265: EQUAL
46266: IFTRUE 46270
46268: GO 46399
46270: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
46271: LD_ADDR_VAR 0 5
46275: PUSH
46276: LD_VAR 0 1
46280: PUSH
46281: LD_VAR 0 2
46285: PUSH
46286: LD_INT 3
46288: MINUS
46289: PUSH
46290: LD_INT 3
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: LIST
46297: PUSH
46298: LD_VAR 0 1
46302: PUSH
46303: LD_INT 4
46305: PLUS
46306: PUSH
46307: LD_VAR 0 2
46311: PUSH
46312: LD_INT 4
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: LIST
46319: PUSH
46320: LD_VAR 0 1
46324: PUSH
46325: LD_VAR 0 2
46329: PUSH
46330: LD_INT 4
46332: PLUS
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: LIST
46341: PUSH
46342: LD_VAR 0 1
46346: PUSH
46347: LD_INT 3
46349: MINUS
46350: PUSH
46351: LD_VAR 0 2
46355: PUSH
46356: LD_INT 1
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: LIST
46363: PUSH
46364: LD_VAR 0 1
46368: PUSH
46369: LD_INT 4
46371: MINUS
46372: PUSH
46373: LD_VAR 0 2
46377: PUSH
46378: LD_INT 4
46380: MINUS
46381: PUSH
46382: LD_INT 2
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: LIST
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: ST_TO_ADDR
// end ; 3 :
46397: GO 46819
46399: LD_INT 3
46401: DOUBLE
46402: EQUAL
46403: IFTRUE 46407
46405: GO 46540
46407: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46408: LD_ADDR_VAR 0 5
46412: PUSH
46413: LD_VAR 0 1
46417: PUSH
46418: LD_INT 3
46420: PLUS
46421: PUSH
46422: LD_VAR 0 2
46426: PUSH
46427: LD_INT 4
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: LIST
46434: PUSH
46435: LD_VAR 0 1
46439: PUSH
46440: LD_INT 4
46442: PLUS
46443: PUSH
46444: LD_VAR 0 2
46448: PUSH
46449: LD_INT 4
46451: PLUS
46452: PUSH
46453: LD_INT 5
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: LIST
46460: PUSH
46461: LD_VAR 0 1
46465: PUSH
46466: LD_INT 4
46468: MINUS
46469: PUSH
46470: LD_VAR 0 2
46474: PUSH
46475: LD_INT 1
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: LIST
46482: PUSH
46483: LD_VAR 0 1
46487: PUSH
46488: LD_VAR 0 2
46492: PUSH
46493: LD_INT 4
46495: MINUS
46496: PUSH
46497: LD_INT 3
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: LIST
46504: PUSH
46505: LD_VAR 0 1
46509: PUSH
46510: LD_INT 3
46512: MINUS
46513: PUSH
46514: LD_VAR 0 2
46518: PUSH
46519: LD_INT 3
46521: MINUS
46522: PUSH
46523: LD_INT 2
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: LIST
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: ST_TO_ADDR
// end ; 4 :
46538: GO 46819
46540: LD_INT 4
46542: DOUBLE
46543: EQUAL
46544: IFTRUE 46548
46546: GO 46681
46548: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
46549: LD_ADDR_VAR 0 5
46553: PUSH
46554: LD_VAR 0 1
46558: PUSH
46559: LD_VAR 0 2
46563: PUSH
46564: LD_INT 4
46566: PLUS
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: LIST
46575: PUSH
46576: LD_VAR 0 1
46580: PUSH
46581: LD_INT 3
46583: PLUS
46584: PUSH
46585: LD_VAR 0 2
46589: PUSH
46590: LD_INT 3
46592: PLUS
46593: PUSH
46594: LD_INT 5
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: LIST
46601: PUSH
46602: LD_VAR 0 1
46606: PUSH
46607: LD_INT 4
46609: PLUS
46610: PUSH
46611: LD_VAR 0 2
46615: PUSH
46616: LD_INT 4
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: LIST
46623: PUSH
46624: LD_VAR 0 1
46628: PUSH
46629: LD_VAR 0 2
46633: PUSH
46634: LD_INT 3
46636: MINUS
46637: PUSH
46638: LD_INT 3
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: LIST
46645: PUSH
46646: LD_VAR 0 1
46650: PUSH
46651: LD_INT 4
46653: MINUS
46654: PUSH
46655: LD_VAR 0 2
46659: PUSH
46660: LD_INT 4
46662: MINUS
46663: PUSH
46664: LD_INT 2
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: LIST
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: ST_TO_ADDR
// end ; 5 :
46679: GO 46819
46681: LD_INT 5
46683: DOUBLE
46684: EQUAL
46685: IFTRUE 46689
46687: GO 46818
46689: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46690: LD_ADDR_VAR 0 5
46694: PUSH
46695: LD_VAR 0 1
46699: PUSH
46700: LD_INT 4
46702: MINUS
46703: PUSH
46704: LD_VAR 0 2
46708: PUSH
46709: LD_INT 1
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: LIST
46716: PUSH
46717: LD_VAR 0 1
46721: PUSH
46722: LD_VAR 0 2
46726: PUSH
46727: LD_INT 4
46729: MINUS
46730: PUSH
46731: LD_INT 3
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: LIST
46738: PUSH
46739: LD_VAR 0 1
46743: PUSH
46744: LD_INT 4
46746: PLUS
46747: PUSH
46748: LD_VAR 0 2
46752: PUSH
46753: LD_INT 4
46755: PLUS
46756: PUSH
46757: LD_INT 5
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: LIST
46764: PUSH
46765: LD_VAR 0 1
46769: PUSH
46770: LD_INT 3
46772: PLUS
46773: PUSH
46774: LD_VAR 0 2
46778: PUSH
46779: LD_INT 4
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: LIST
46786: PUSH
46787: LD_VAR 0 1
46791: PUSH
46792: LD_VAR 0 2
46796: PUSH
46797: LD_INT 3
46799: PLUS
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: LIST
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: ST_TO_ADDR
// end ; end ;
46816: GO 46819
46818: POP
// result := list ;
46819: LD_ADDR_VAR 0 4
46823: PUSH
46824: LD_VAR 0 5
46828: ST_TO_ADDR
// end ;
46829: LD_VAR 0 4
46833: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46834: LD_INT 0
46836: PPUSH
46837: PPUSH
46838: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46839: LD_VAR 0 1
46843: NOT
46844: PUSH
46845: LD_VAR 0 2
46849: PUSH
46850: LD_INT 1
46852: PUSH
46853: LD_INT 2
46855: PUSH
46856: LD_INT 3
46858: PUSH
46859: LD_INT 4
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: IN
46868: NOT
46869: OR
46870: IFFALSE 46874
// exit ;
46872: GO 46966
// tmp := [ ] ;
46874: LD_ADDR_VAR 0 5
46878: PUSH
46879: EMPTY
46880: ST_TO_ADDR
// for i in units do
46881: LD_ADDR_VAR 0 4
46885: PUSH
46886: LD_VAR 0 1
46890: PUSH
46891: FOR_IN
46892: IFFALSE 46935
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
46894: LD_ADDR_VAR 0 5
46898: PUSH
46899: LD_VAR 0 5
46903: PPUSH
46904: LD_VAR 0 5
46908: PUSH
46909: LD_INT 1
46911: PLUS
46912: PPUSH
46913: LD_VAR 0 4
46917: PPUSH
46918: LD_VAR 0 2
46922: PPUSH
46923: CALL_OW 259
46927: PPUSH
46928: CALL_OW 2
46932: ST_TO_ADDR
46933: GO 46891
46935: POP
46936: POP
// if not tmp then
46937: LD_VAR 0 5
46941: NOT
46942: IFFALSE 46946
// exit ;
46944: GO 46966
// result := SortListByListDesc ( units , tmp ) ;
46946: LD_ADDR_VAR 0 3
46950: PUSH
46951: LD_VAR 0 1
46955: PPUSH
46956: LD_VAR 0 5
46960: PPUSH
46961: CALL_OW 77
46965: ST_TO_ADDR
// end ;
46966: LD_VAR 0 3
46970: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
46971: LD_INT 0
46973: PPUSH
46974: PPUSH
46975: PPUSH
// result := false ;
46976: LD_ADDR_VAR 0 3
46980: PUSH
46981: LD_INT 0
46983: ST_TO_ADDR
// x := GetX ( building ) ;
46984: LD_ADDR_VAR 0 4
46988: PUSH
46989: LD_VAR 0 2
46993: PPUSH
46994: CALL_OW 250
46998: ST_TO_ADDR
// y := GetY ( building ) ;
46999: LD_ADDR_VAR 0 5
47003: PUSH
47004: LD_VAR 0 2
47008: PPUSH
47009: CALL_OW 251
47013: ST_TO_ADDR
// if not building or not x or not y then
47014: LD_VAR 0 2
47018: NOT
47019: PUSH
47020: LD_VAR 0 4
47024: NOT
47025: OR
47026: PUSH
47027: LD_VAR 0 5
47031: NOT
47032: OR
47033: IFFALSE 47037
// exit ;
47035: GO 47129
// if GetTaskList ( unit ) then
47037: LD_VAR 0 1
47041: PPUSH
47042: CALL_OW 437
47046: IFFALSE 47129
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47048: LD_STRING e
47050: PUSH
47051: LD_VAR 0 1
47055: PPUSH
47056: CALL_OW 437
47060: PUSH
47061: LD_INT 1
47063: ARRAY
47064: PUSH
47065: LD_INT 1
47067: ARRAY
47068: EQUAL
47069: PUSH
47070: LD_VAR 0 4
47074: PUSH
47075: LD_VAR 0 1
47079: PPUSH
47080: CALL_OW 437
47084: PUSH
47085: LD_INT 1
47087: ARRAY
47088: PUSH
47089: LD_INT 2
47091: ARRAY
47092: EQUAL
47093: AND
47094: PUSH
47095: LD_VAR 0 5
47099: PUSH
47100: LD_VAR 0 1
47104: PPUSH
47105: CALL_OW 437
47109: PUSH
47110: LD_INT 1
47112: ARRAY
47113: PUSH
47114: LD_INT 3
47116: ARRAY
47117: EQUAL
47118: AND
47119: IFFALSE 47129
// result := true end ;
47121: LD_ADDR_VAR 0 3
47125: PUSH
47126: LD_INT 1
47128: ST_TO_ADDR
// end ;
47129: LD_VAR 0 3
47133: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
47134: LD_INT 0
47136: PPUSH
// result := false ;
47137: LD_ADDR_VAR 0 4
47141: PUSH
47142: LD_INT 0
47144: ST_TO_ADDR
// if GetTaskList ( unit ) then
47145: LD_VAR 0 1
47149: PPUSH
47150: CALL_OW 437
47154: IFFALSE 47237
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47156: LD_STRING M
47158: PUSH
47159: LD_VAR 0 1
47163: PPUSH
47164: CALL_OW 437
47168: PUSH
47169: LD_INT 1
47171: ARRAY
47172: PUSH
47173: LD_INT 1
47175: ARRAY
47176: EQUAL
47177: PUSH
47178: LD_VAR 0 2
47182: PUSH
47183: LD_VAR 0 1
47187: PPUSH
47188: CALL_OW 437
47192: PUSH
47193: LD_INT 1
47195: ARRAY
47196: PUSH
47197: LD_INT 2
47199: ARRAY
47200: EQUAL
47201: AND
47202: PUSH
47203: LD_VAR 0 3
47207: PUSH
47208: LD_VAR 0 1
47212: PPUSH
47213: CALL_OW 437
47217: PUSH
47218: LD_INT 1
47220: ARRAY
47221: PUSH
47222: LD_INT 3
47224: ARRAY
47225: EQUAL
47226: AND
47227: IFFALSE 47237
// result := true ;
47229: LD_ADDR_VAR 0 4
47233: PUSH
47234: LD_INT 1
47236: ST_TO_ADDR
// end ; end ;
47237: LD_VAR 0 4
47241: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
47242: LD_INT 0
47244: PPUSH
47245: PPUSH
47246: PPUSH
47247: PPUSH
// if not unit or not area then
47248: LD_VAR 0 1
47252: NOT
47253: PUSH
47254: LD_VAR 0 2
47258: NOT
47259: OR
47260: IFFALSE 47264
// exit ;
47262: GO 47428
// tmp := AreaToList ( area , i ) ;
47264: LD_ADDR_VAR 0 6
47268: PUSH
47269: LD_VAR 0 2
47273: PPUSH
47274: LD_VAR 0 5
47278: PPUSH
47279: CALL_OW 517
47283: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
47284: LD_ADDR_VAR 0 5
47288: PUSH
47289: DOUBLE
47290: LD_INT 1
47292: DEC
47293: ST_TO_ADDR
47294: LD_VAR 0 6
47298: PUSH
47299: LD_INT 1
47301: ARRAY
47302: PUSH
47303: FOR_TO
47304: IFFALSE 47426
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
47306: LD_ADDR_VAR 0 7
47310: PUSH
47311: LD_VAR 0 6
47315: PUSH
47316: LD_INT 1
47318: ARRAY
47319: PUSH
47320: LD_VAR 0 5
47324: ARRAY
47325: PUSH
47326: LD_VAR 0 6
47330: PUSH
47331: LD_INT 2
47333: ARRAY
47334: PUSH
47335: LD_VAR 0 5
47339: ARRAY
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
47345: LD_VAR 0 7
47349: PUSH
47350: LD_INT 1
47352: ARRAY
47353: PPUSH
47354: LD_VAR 0 7
47358: PUSH
47359: LD_INT 2
47361: ARRAY
47362: PPUSH
47363: CALL_OW 428
47367: PUSH
47368: LD_INT 0
47370: EQUAL
47371: IFFALSE 47424
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
47373: LD_VAR 0 1
47377: PPUSH
47378: LD_VAR 0 7
47382: PUSH
47383: LD_INT 1
47385: ARRAY
47386: PPUSH
47387: LD_VAR 0 7
47391: PUSH
47392: LD_INT 2
47394: ARRAY
47395: PPUSH
47396: LD_VAR 0 3
47400: PPUSH
47401: CALL_OW 48
// result := IsPlaced ( unit ) ;
47405: LD_ADDR_VAR 0 4
47409: PUSH
47410: LD_VAR 0 1
47414: PPUSH
47415: CALL_OW 305
47419: ST_TO_ADDR
// exit ;
47420: POP
47421: POP
47422: GO 47428
// end ; end ;
47424: GO 47303
47426: POP
47427: POP
// end ;
47428: LD_VAR 0 4
47432: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47433: LD_INT 0
47435: PPUSH
47436: PPUSH
47437: PPUSH
// if not side or side > 8 then
47438: LD_VAR 0 1
47442: NOT
47443: PUSH
47444: LD_VAR 0 1
47448: PUSH
47449: LD_INT 8
47451: GREATER
47452: OR
47453: IFFALSE 47457
// exit ;
47455: GO 47644
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47457: LD_ADDR_VAR 0 4
47461: PUSH
47462: LD_INT 22
47464: PUSH
47465: LD_VAR 0 1
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 21
47476: PUSH
47477: LD_INT 3
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PPUSH
47488: CALL_OW 69
47492: ST_TO_ADDR
// if not tmp then
47493: LD_VAR 0 4
47497: NOT
47498: IFFALSE 47502
// exit ;
47500: GO 47644
// enable_addtolog := true ;
47502: LD_ADDR_OWVAR 81
47506: PUSH
47507: LD_INT 1
47509: ST_TO_ADDR
// AddToLog ( [ ) ;
47510: LD_STRING [
47512: PPUSH
47513: CALL_OW 561
// for i in tmp do
47517: LD_ADDR_VAR 0 3
47521: PUSH
47522: LD_VAR 0 4
47526: PUSH
47527: FOR_IN
47528: IFFALSE 47635
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
47530: LD_STRING [
47532: PUSH
47533: LD_VAR 0 3
47537: PPUSH
47538: CALL_OW 266
47542: STR
47543: PUSH
47544: LD_STRING , 
47546: STR
47547: PUSH
47548: LD_VAR 0 3
47552: PPUSH
47553: CALL_OW 250
47557: STR
47558: PUSH
47559: LD_STRING , 
47561: STR
47562: PUSH
47563: LD_VAR 0 3
47567: PPUSH
47568: CALL_OW 251
47572: STR
47573: PUSH
47574: LD_STRING , 
47576: STR
47577: PUSH
47578: LD_VAR 0 3
47582: PPUSH
47583: CALL_OW 254
47587: STR
47588: PUSH
47589: LD_STRING , 
47591: STR
47592: PUSH
47593: LD_VAR 0 3
47597: PPUSH
47598: LD_INT 1
47600: PPUSH
47601: CALL_OW 268
47605: STR
47606: PUSH
47607: LD_STRING , 
47609: STR
47610: PUSH
47611: LD_VAR 0 3
47615: PPUSH
47616: LD_INT 2
47618: PPUSH
47619: CALL_OW 268
47623: STR
47624: PUSH
47625: LD_STRING ],
47627: STR
47628: PPUSH
47629: CALL_OW 561
// end ;
47633: GO 47527
47635: POP
47636: POP
// AddToLog ( ]; ) ;
47637: LD_STRING ];
47639: PPUSH
47640: CALL_OW 561
// end ;
47644: LD_VAR 0 2
47648: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47649: LD_INT 0
47651: PPUSH
47652: PPUSH
47653: PPUSH
47654: PPUSH
47655: PPUSH
// if not area or not rate or not max then
47656: LD_VAR 0 1
47660: NOT
47661: PUSH
47662: LD_VAR 0 2
47666: NOT
47667: OR
47668: PUSH
47669: LD_VAR 0 4
47673: NOT
47674: OR
47675: IFFALSE 47679
// exit ;
47677: GO 47871
// while 1 do
47679: LD_INT 1
47681: IFFALSE 47871
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
47683: LD_ADDR_VAR 0 9
47687: PUSH
47688: LD_VAR 0 1
47692: PPUSH
47693: LD_INT 1
47695: PPUSH
47696: CALL_OW 287
47700: PUSH
47701: LD_INT 10
47703: MUL
47704: ST_TO_ADDR
// r := rate / 10 ;
47705: LD_ADDR_VAR 0 7
47709: PUSH
47710: LD_VAR 0 2
47714: PUSH
47715: LD_INT 10
47717: DIVREAL
47718: ST_TO_ADDR
// time := 1 1$00 ;
47719: LD_ADDR_VAR 0 8
47723: PUSH
47724: LD_INT 2100
47726: ST_TO_ADDR
// if amount < min then
47727: LD_VAR 0 9
47731: PUSH
47732: LD_VAR 0 3
47736: LESS
47737: IFFALSE 47755
// r := r * 2 else
47739: LD_ADDR_VAR 0 7
47743: PUSH
47744: LD_VAR 0 7
47748: PUSH
47749: LD_INT 2
47751: MUL
47752: ST_TO_ADDR
47753: GO 47781
// if amount > max then
47755: LD_VAR 0 9
47759: PUSH
47760: LD_VAR 0 4
47764: GREATER
47765: IFFALSE 47781
// r := r / 2 ;
47767: LD_ADDR_VAR 0 7
47771: PUSH
47772: LD_VAR 0 7
47776: PUSH
47777: LD_INT 2
47779: DIVREAL
47780: ST_TO_ADDR
// time := time / r ;
47781: LD_ADDR_VAR 0 8
47785: PUSH
47786: LD_VAR 0 8
47790: PUSH
47791: LD_VAR 0 7
47795: DIVREAL
47796: ST_TO_ADDR
// if time < 0 then
47797: LD_VAR 0 8
47801: PUSH
47802: LD_INT 0
47804: LESS
47805: IFFALSE 47822
// time := time * - 1 ;
47807: LD_ADDR_VAR 0 8
47811: PUSH
47812: LD_VAR 0 8
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: MUL
47821: ST_TO_ADDR
// wait ( time ) ;
47822: LD_VAR 0 8
47826: PPUSH
47827: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
47831: LD_INT 35
47833: PPUSH
47834: LD_INT 875
47836: PPUSH
47837: CALL_OW 12
47841: PPUSH
47842: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47846: LD_INT 1
47848: PPUSH
47849: LD_INT 5
47851: PPUSH
47852: CALL_OW 12
47856: PPUSH
47857: LD_VAR 0 1
47861: PPUSH
47862: LD_INT 1
47864: PPUSH
47865: CALL_OW 55
// end ;
47869: GO 47679
// end ;
47871: LD_VAR 0 5
47875: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47876: LD_INT 0
47878: PPUSH
47879: PPUSH
47880: PPUSH
47881: PPUSH
47882: PPUSH
47883: PPUSH
47884: PPUSH
47885: PPUSH
// if not turrets or not factories then
47886: LD_VAR 0 1
47890: NOT
47891: PUSH
47892: LD_VAR 0 2
47896: NOT
47897: OR
47898: IFFALSE 47902
// exit ;
47900: GO 48209
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47902: LD_ADDR_VAR 0 10
47906: PUSH
47907: LD_INT 5
47909: PUSH
47910: LD_INT 6
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 2
47919: PUSH
47920: LD_INT 4
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 3
47929: PUSH
47930: LD_INT 5
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 24
47944: PUSH
47945: LD_INT 25
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 23
47954: PUSH
47955: LD_INT 27
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 42
47968: PUSH
47969: LD_INT 43
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 44
47978: PUSH
47979: LD_INT 46
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 45
47988: PUSH
47989: LD_INT 47
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: LIST
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: LIST
48005: ST_TO_ADDR
// result := [ ] ;
48006: LD_ADDR_VAR 0 3
48010: PUSH
48011: EMPTY
48012: ST_TO_ADDR
// for i in turrets do
48013: LD_ADDR_VAR 0 4
48017: PUSH
48018: LD_VAR 0 1
48022: PUSH
48023: FOR_IN
48024: IFFALSE 48207
// begin nat := GetNation ( i ) ;
48026: LD_ADDR_VAR 0 7
48030: PUSH
48031: LD_VAR 0 4
48035: PPUSH
48036: CALL_OW 248
48040: ST_TO_ADDR
// weapon := 0 ;
48041: LD_ADDR_VAR 0 8
48045: PUSH
48046: LD_INT 0
48048: ST_TO_ADDR
// if not nat then
48049: LD_VAR 0 7
48053: NOT
48054: IFFALSE 48058
// continue ;
48056: GO 48023
// for j in list [ nat ] do
48058: LD_ADDR_VAR 0 5
48062: PUSH
48063: LD_VAR 0 10
48067: PUSH
48068: LD_VAR 0 7
48072: ARRAY
48073: PUSH
48074: FOR_IN
48075: IFFALSE 48116
// if GetBWeapon ( i ) = j [ 1 ] then
48077: LD_VAR 0 4
48081: PPUSH
48082: CALL_OW 269
48086: PUSH
48087: LD_VAR 0 5
48091: PUSH
48092: LD_INT 1
48094: ARRAY
48095: EQUAL
48096: IFFALSE 48114
// begin weapon := j [ 2 ] ;
48098: LD_ADDR_VAR 0 8
48102: PUSH
48103: LD_VAR 0 5
48107: PUSH
48108: LD_INT 2
48110: ARRAY
48111: ST_TO_ADDR
// break ;
48112: GO 48116
// end ;
48114: GO 48074
48116: POP
48117: POP
// if not weapon then
48118: LD_VAR 0 8
48122: NOT
48123: IFFALSE 48127
// continue ;
48125: GO 48023
// for k in factories do
48127: LD_ADDR_VAR 0 6
48131: PUSH
48132: LD_VAR 0 2
48136: PUSH
48137: FOR_IN
48138: IFFALSE 48203
// begin weapons := AvailableWeaponList ( k ) ;
48140: LD_ADDR_VAR 0 9
48144: PUSH
48145: LD_VAR 0 6
48149: PPUSH
48150: CALL_OW 478
48154: ST_TO_ADDR
// if not weapons then
48155: LD_VAR 0 9
48159: NOT
48160: IFFALSE 48164
// continue ;
48162: GO 48137
// if weapon in weapons then
48164: LD_VAR 0 8
48168: PUSH
48169: LD_VAR 0 9
48173: IN
48174: IFFALSE 48201
// begin result := [ i , weapon ] ;
48176: LD_ADDR_VAR 0 3
48180: PUSH
48181: LD_VAR 0 4
48185: PUSH
48186: LD_VAR 0 8
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: ST_TO_ADDR
// exit ;
48195: POP
48196: POP
48197: POP
48198: POP
48199: GO 48209
// end ; end ;
48201: GO 48137
48203: POP
48204: POP
// end ;
48205: GO 48023
48207: POP
48208: POP
// end ;
48209: LD_VAR 0 3
48213: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
48214: LD_INT 0
48216: PPUSH
// if not side or side > 8 then
48217: LD_VAR 0 3
48221: NOT
48222: PUSH
48223: LD_VAR 0 3
48227: PUSH
48228: LD_INT 8
48230: GREATER
48231: OR
48232: IFFALSE 48236
// exit ;
48234: GO 48295
// if not range then
48236: LD_VAR 0 4
48240: NOT
48241: IFFALSE 48252
// range := - 12 ;
48243: LD_ADDR_VAR 0 4
48247: PUSH
48248: LD_INT 12
48250: NEG
48251: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
48252: LD_VAR 0 1
48256: PPUSH
48257: LD_VAR 0 2
48261: PPUSH
48262: LD_VAR 0 3
48266: PPUSH
48267: LD_VAR 0 4
48271: PPUSH
48272: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
48276: LD_VAR 0 1
48280: PPUSH
48281: LD_VAR 0 2
48285: PPUSH
48286: LD_VAR 0 3
48290: PPUSH
48291: CALL_OW 331
// end ;
48295: LD_VAR 0 5
48299: RET
// export function Video ( mode ) ; begin
48300: LD_INT 0
48302: PPUSH
// ingame_video = mode ;
48303: LD_ADDR_OWVAR 52
48307: PUSH
48308: LD_VAR 0 1
48312: ST_TO_ADDR
// interface_hidden = mode ;
48313: LD_ADDR_OWVAR 54
48317: PUSH
48318: LD_VAR 0 1
48322: ST_TO_ADDR
// end ;
48323: LD_VAR 0 2
48327: RET
// export function Join ( array , element ) ; begin
48328: LD_INT 0
48330: PPUSH
// result := Replace ( array , array + 1 , element ) ;
48331: LD_ADDR_VAR 0 3
48335: PUSH
48336: LD_VAR 0 1
48340: PPUSH
48341: LD_VAR 0 1
48345: PUSH
48346: LD_INT 1
48348: PLUS
48349: PPUSH
48350: LD_VAR 0 2
48354: PPUSH
48355: CALL_OW 1
48359: ST_TO_ADDR
// end ;
48360: LD_VAR 0 3
48364: RET
// export function JoinUnion ( array , element ) ; begin
48365: LD_INT 0
48367: PPUSH
// result := array union element ;
48368: LD_ADDR_VAR 0 3
48372: PUSH
48373: LD_VAR 0 1
48377: PUSH
48378: LD_VAR 0 2
48382: UNION
48383: ST_TO_ADDR
// end ;
48384: LD_VAR 0 3
48388: RET
// export function GetBehemoths ( side ) ; begin
48389: LD_INT 0
48391: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
48392: LD_ADDR_VAR 0 2
48396: PUSH
48397: LD_INT 22
48399: PUSH
48400: LD_VAR 0 1
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 31
48411: PUSH
48412: LD_INT 25
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PPUSH
48423: CALL_OW 69
48427: ST_TO_ADDR
// end ;
48428: LD_VAR 0 2
48432: RET
// export function Shuffle ( array ) ; var i , index ; begin
48433: LD_INT 0
48435: PPUSH
48436: PPUSH
48437: PPUSH
// result := [ ] ;
48438: LD_ADDR_VAR 0 2
48442: PUSH
48443: EMPTY
48444: ST_TO_ADDR
// if not array then
48445: LD_VAR 0 1
48449: NOT
48450: IFFALSE 48454
// exit ;
48452: GO 48553
// Randomize ;
48454: CALL_OW 10
// for i = array downto 1 do
48458: LD_ADDR_VAR 0 3
48462: PUSH
48463: DOUBLE
48464: LD_VAR 0 1
48468: INC
48469: ST_TO_ADDR
48470: LD_INT 1
48472: PUSH
48473: FOR_DOWNTO
48474: IFFALSE 48551
// begin index := rand ( 1 , array ) ;
48476: LD_ADDR_VAR 0 4
48480: PUSH
48481: LD_INT 1
48483: PPUSH
48484: LD_VAR 0 1
48488: PPUSH
48489: CALL_OW 12
48493: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
48494: LD_ADDR_VAR 0 2
48498: PUSH
48499: LD_VAR 0 2
48503: PPUSH
48504: LD_VAR 0 2
48508: PUSH
48509: LD_INT 1
48511: PLUS
48512: PPUSH
48513: LD_VAR 0 1
48517: PUSH
48518: LD_VAR 0 4
48522: ARRAY
48523: PPUSH
48524: CALL_OW 2
48528: ST_TO_ADDR
// array := Delete ( array , index ) ;
48529: LD_ADDR_VAR 0 1
48533: PUSH
48534: LD_VAR 0 1
48538: PPUSH
48539: LD_VAR 0 4
48543: PPUSH
48544: CALL_OW 3
48548: ST_TO_ADDR
// end ;
48549: GO 48473
48551: POP
48552: POP
// end ;
48553: LD_VAR 0 2
48557: RET
// export function GetBaseMaterials ( base ) ; begin
48558: LD_INT 0
48560: PPUSH
// result := [ 0 , 0 , 0 ] ;
48561: LD_ADDR_VAR 0 2
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: LIST
48579: ST_TO_ADDR
// if not base then
48580: LD_VAR 0 1
48584: NOT
48585: IFFALSE 48589
// exit ;
48587: GO 48638
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
48589: LD_ADDR_VAR 0 2
48593: PUSH
48594: LD_VAR 0 1
48598: PPUSH
48599: LD_INT 1
48601: PPUSH
48602: CALL_OW 275
48606: PUSH
48607: LD_VAR 0 1
48611: PPUSH
48612: LD_INT 2
48614: PPUSH
48615: CALL_OW 275
48619: PUSH
48620: LD_VAR 0 1
48624: PPUSH
48625: LD_INT 3
48627: PPUSH
48628: CALL_OW 275
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: LIST
48637: ST_TO_ADDR
// end ;
48638: LD_VAR 0 2
48642: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48643: LD_INT 0
48645: PPUSH
48646: PPUSH
// result := array ;
48647: LD_ADDR_VAR 0 3
48651: PUSH
48652: LD_VAR 0 1
48656: ST_TO_ADDR
// if size > 0 then
48657: LD_VAR 0 2
48661: PUSH
48662: LD_INT 0
48664: GREATER
48665: IFFALSE 48711
// for i := array downto size do
48667: LD_ADDR_VAR 0 4
48671: PUSH
48672: DOUBLE
48673: LD_VAR 0 1
48677: INC
48678: ST_TO_ADDR
48679: LD_VAR 0 2
48683: PUSH
48684: FOR_DOWNTO
48685: IFFALSE 48709
// result := Delete ( result , result ) ;
48687: LD_ADDR_VAR 0 3
48691: PUSH
48692: LD_VAR 0 3
48696: PPUSH
48697: LD_VAR 0 3
48701: PPUSH
48702: CALL_OW 3
48706: ST_TO_ADDR
48707: GO 48684
48709: POP
48710: POP
// end ;
48711: LD_VAR 0 3
48715: RET
// export function ComExit ( unit ) ; var tmp ; begin
48716: LD_INT 0
48718: PPUSH
48719: PPUSH
// if not IsInUnit ( unit ) then
48720: LD_VAR 0 1
48724: PPUSH
48725: CALL_OW 310
48729: NOT
48730: IFFALSE 48734
// exit ;
48732: GO 48794
// tmp := IsInUnit ( unit ) ;
48734: LD_ADDR_VAR 0 3
48738: PUSH
48739: LD_VAR 0 1
48743: PPUSH
48744: CALL_OW 310
48748: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48749: LD_VAR 0 3
48753: PPUSH
48754: CALL_OW 247
48758: PUSH
48759: LD_INT 2
48761: EQUAL
48762: IFFALSE 48775
// ComExitVehicle ( unit ) else
48764: LD_VAR 0 1
48768: PPUSH
48769: CALL_OW 121
48773: GO 48784
// ComExitBuilding ( unit ) ;
48775: LD_VAR 0 1
48779: PPUSH
48780: CALL_OW 122
// result := tmp ;
48784: LD_ADDR_VAR 0 2
48788: PUSH
48789: LD_VAR 0 3
48793: ST_TO_ADDR
// end ;
48794: LD_VAR 0 2
48798: RET
// export function ComExitAll ( units ) ; var i ; begin
48799: LD_INT 0
48801: PPUSH
48802: PPUSH
// if not units then
48803: LD_VAR 0 1
48807: NOT
48808: IFFALSE 48812
// exit ;
48810: GO 48838
// for i in units do
48812: LD_ADDR_VAR 0 3
48816: PUSH
48817: LD_VAR 0 1
48821: PUSH
48822: FOR_IN
48823: IFFALSE 48836
// ComExit ( i ) ;
48825: LD_VAR 0 3
48829: PPUSH
48830: CALL 48716 0 1
48834: GO 48822
48836: POP
48837: POP
// end ;
48838: LD_VAR 0 2
48842: RET
// export function ResetHc ; begin
48843: LD_INT 0
48845: PPUSH
// InitHc ;
48846: CALL_OW 19
// hc_importance := 0 ;
48850: LD_ADDR_OWVAR 32
48854: PUSH
48855: LD_INT 0
48857: ST_TO_ADDR
// end ;
48858: LD_VAR 0 1
48862: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
48863: LD_INT 0
48865: PPUSH
48866: PPUSH
48867: PPUSH
// _x := ( x1 + x2 ) div 2 ;
48868: LD_ADDR_VAR 0 6
48872: PUSH
48873: LD_VAR 0 1
48877: PUSH
48878: LD_VAR 0 3
48882: PLUS
48883: PUSH
48884: LD_INT 2
48886: DIV
48887: ST_TO_ADDR
// if _x < 0 then
48888: LD_VAR 0 6
48892: PUSH
48893: LD_INT 0
48895: LESS
48896: IFFALSE 48913
// _x := _x * - 1 ;
48898: LD_ADDR_VAR 0 6
48902: PUSH
48903: LD_VAR 0 6
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: MUL
48912: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
48913: LD_ADDR_VAR 0 7
48917: PUSH
48918: LD_VAR 0 2
48922: PUSH
48923: LD_VAR 0 4
48927: PLUS
48928: PUSH
48929: LD_INT 2
48931: DIV
48932: ST_TO_ADDR
// if _y < 0 then
48933: LD_VAR 0 7
48937: PUSH
48938: LD_INT 0
48940: LESS
48941: IFFALSE 48958
// _y := _y * - 1 ;
48943: LD_ADDR_VAR 0 7
48947: PUSH
48948: LD_VAR 0 7
48952: PUSH
48953: LD_INT 1
48955: NEG
48956: MUL
48957: ST_TO_ADDR
// result := [ _x , _y ] ;
48958: LD_ADDR_VAR 0 5
48962: PUSH
48963: LD_VAR 0 6
48967: PUSH
48968: LD_VAR 0 7
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: ST_TO_ADDR
// end ;
48977: LD_VAR 0 5
48981: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
48982: LD_INT 0
48984: PPUSH
48985: PPUSH
48986: PPUSH
48987: PPUSH
// task := GetTaskList ( unit ) ;
48988: LD_ADDR_VAR 0 7
48992: PUSH
48993: LD_VAR 0 1
48997: PPUSH
48998: CALL_OW 437
49002: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
49003: LD_VAR 0 7
49007: NOT
49008: PUSH
49009: LD_VAR 0 1
49013: PPUSH
49014: LD_VAR 0 2
49018: PPUSH
49019: CALL_OW 308
49023: NOT
49024: AND
49025: IFFALSE 49029
// exit ;
49027: GO 49147
// if IsInArea ( unit , area ) then
49029: LD_VAR 0 1
49033: PPUSH
49034: LD_VAR 0 2
49038: PPUSH
49039: CALL_OW 308
49043: IFFALSE 49061
// begin ComMoveToArea ( unit , goAway ) ;
49045: LD_VAR 0 1
49049: PPUSH
49050: LD_VAR 0 3
49054: PPUSH
49055: CALL_OW 113
// exit ;
49059: GO 49147
// end ; if task [ 1 ] [ 1 ] <> M then
49061: LD_VAR 0 7
49065: PUSH
49066: LD_INT 1
49068: ARRAY
49069: PUSH
49070: LD_INT 1
49072: ARRAY
49073: PUSH
49074: LD_STRING M
49076: NONEQUAL
49077: IFFALSE 49081
// exit ;
49079: GO 49147
// x := task [ 1 ] [ 2 ] ;
49081: LD_ADDR_VAR 0 5
49085: PUSH
49086: LD_VAR 0 7
49090: PUSH
49091: LD_INT 1
49093: ARRAY
49094: PUSH
49095: LD_INT 2
49097: ARRAY
49098: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
49099: LD_ADDR_VAR 0 6
49103: PUSH
49104: LD_VAR 0 7
49108: PUSH
49109: LD_INT 1
49111: ARRAY
49112: PUSH
49113: LD_INT 3
49115: ARRAY
49116: ST_TO_ADDR
// if InArea ( x , y , area ) then
49117: LD_VAR 0 5
49121: PPUSH
49122: LD_VAR 0 6
49126: PPUSH
49127: LD_VAR 0 2
49131: PPUSH
49132: CALL_OW 309
49136: IFFALSE 49147
// ComStop ( unit ) ;
49138: LD_VAR 0 1
49142: PPUSH
49143: CALL_OW 141
// end ;
49147: LD_VAR 0 4
49151: RET
// export function Abs ( value ) ; begin
49152: LD_INT 0
49154: PPUSH
// result := value ;
49155: LD_ADDR_VAR 0 2
49159: PUSH
49160: LD_VAR 0 1
49164: ST_TO_ADDR
// if value < 0 then
49165: LD_VAR 0 1
49169: PUSH
49170: LD_INT 0
49172: LESS
49173: IFFALSE 49190
// result := value * - 1 ;
49175: LD_ADDR_VAR 0 2
49179: PUSH
49180: LD_VAR 0 1
49184: PUSH
49185: LD_INT 1
49187: NEG
49188: MUL
49189: ST_TO_ADDR
// end ;
49190: LD_VAR 0 2
49194: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
49195: LD_INT 0
49197: PPUSH
49198: PPUSH
49199: PPUSH
49200: PPUSH
49201: PPUSH
49202: PPUSH
49203: PPUSH
49204: PPUSH
// if not unit or not building then
49205: LD_VAR 0 1
49209: NOT
49210: PUSH
49211: LD_VAR 0 2
49215: NOT
49216: OR
49217: IFFALSE 49221
// exit ;
49219: GO 49447
// x := GetX ( building ) ;
49221: LD_ADDR_VAR 0 4
49225: PUSH
49226: LD_VAR 0 2
49230: PPUSH
49231: CALL_OW 250
49235: ST_TO_ADDR
// y := GetY ( building ) ;
49236: LD_ADDR_VAR 0 6
49240: PUSH
49241: LD_VAR 0 2
49245: PPUSH
49246: CALL_OW 251
49250: ST_TO_ADDR
// d := GetDir ( building ) ;
49251: LD_ADDR_VAR 0 8
49255: PUSH
49256: LD_VAR 0 2
49260: PPUSH
49261: CALL_OW 254
49265: ST_TO_ADDR
// r := 4 ;
49266: LD_ADDR_VAR 0 9
49270: PUSH
49271: LD_INT 4
49273: ST_TO_ADDR
// for i := 1 to 5 do
49274: LD_ADDR_VAR 0 10
49278: PUSH
49279: DOUBLE
49280: LD_INT 1
49282: DEC
49283: ST_TO_ADDR
49284: LD_INT 5
49286: PUSH
49287: FOR_TO
49288: IFFALSE 49445
// begin _x := ShiftX ( x , d , r + i ) ;
49290: LD_ADDR_VAR 0 5
49294: PUSH
49295: LD_VAR 0 4
49299: PPUSH
49300: LD_VAR 0 8
49304: PPUSH
49305: LD_VAR 0 9
49309: PUSH
49310: LD_VAR 0 10
49314: PLUS
49315: PPUSH
49316: CALL_OW 272
49320: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
49321: LD_ADDR_VAR 0 7
49325: PUSH
49326: LD_VAR 0 6
49330: PPUSH
49331: LD_VAR 0 8
49335: PPUSH
49336: LD_VAR 0 9
49340: PUSH
49341: LD_VAR 0 10
49345: PLUS
49346: PPUSH
49347: CALL_OW 273
49351: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
49352: LD_VAR 0 5
49356: PPUSH
49357: LD_VAR 0 7
49361: PPUSH
49362: CALL_OW 488
49366: PUSH
49367: LD_VAR 0 5
49371: PPUSH
49372: LD_VAR 0 7
49376: PPUSH
49377: CALL_OW 428
49381: PPUSH
49382: CALL_OW 247
49386: PUSH
49387: LD_INT 3
49389: PUSH
49390: LD_INT 2
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: IN
49397: NOT
49398: AND
49399: IFFALSE 49443
// begin ComMoveXY ( unit , _x , _y ) ;
49401: LD_VAR 0 1
49405: PPUSH
49406: LD_VAR 0 5
49410: PPUSH
49411: LD_VAR 0 7
49415: PPUSH
49416: CALL_OW 111
// result := [ _x , _y ] ;
49420: LD_ADDR_VAR 0 3
49424: PUSH
49425: LD_VAR 0 5
49429: PUSH
49430: LD_VAR 0 7
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: ST_TO_ADDR
// exit ;
49439: POP
49440: POP
49441: GO 49447
// end ; end ;
49443: GO 49287
49445: POP
49446: POP
// end ;
49447: LD_VAR 0 3
49451: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
49452: LD_INT 0
49454: PPUSH
49455: PPUSH
49456: PPUSH
// result := 0 ;
49457: LD_ADDR_VAR 0 3
49461: PUSH
49462: LD_INT 0
49464: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
49465: LD_VAR 0 1
49469: PUSH
49470: LD_INT 0
49472: LESS
49473: PUSH
49474: LD_VAR 0 1
49478: PUSH
49479: LD_INT 8
49481: GREATER
49482: OR
49483: PUSH
49484: LD_VAR 0 2
49488: PUSH
49489: LD_INT 0
49491: LESS
49492: OR
49493: PUSH
49494: LD_VAR 0 2
49498: PUSH
49499: LD_INT 8
49501: GREATER
49502: OR
49503: IFFALSE 49507
// exit ;
49505: GO 49582
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
49507: LD_ADDR_VAR 0 4
49511: PUSH
49512: LD_INT 22
49514: PUSH
49515: LD_VAR 0 2
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PPUSH
49524: CALL_OW 69
49528: PUSH
49529: FOR_IN
49530: IFFALSE 49580
// begin un := UnitShoot ( i ) ;
49532: LD_ADDR_VAR 0 5
49536: PUSH
49537: LD_VAR 0 4
49541: PPUSH
49542: CALL_OW 504
49546: ST_TO_ADDR
// if GetSide ( un ) = side1 then
49547: LD_VAR 0 5
49551: PPUSH
49552: CALL_OW 255
49556: PUSH
49557: LD_VAR 0 1
49561: EQUAL
49562: IFFALSE 49578
// begin result := un ;
49564: LD_ADDR_VAR 0 3
49568: PUSH
49569: LD_VAR 0 5
49573: ST_TO_ADDR
// exit ;
49574: POP
49575: POP
49576: GO 49582
// end ; end ;
49578: GO 49529
49580: POP
49581: POP
// end ;
49582: LD_VAR 0 3
49586: RET
// export function GetCargoBay ( units ) ; begin
49587: LD_INT 0
49589: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
49590: LD_ADDR_VAR 0 2
49594: PUSH
49595: LD_VAR 0 1
49599: PPUSH
49600: LD_INT 2
49602: PUSH
49603: LD_INT 34
49605: PUSH
49606: LD_INT 12
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 34
49615: PUSH
49616: LD_INT 51
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 34
49625: PUSH
49626: LD_INT 32
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 34
49635: PUSH
49636: LD_EXP 39
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: PPUSH
49652: CALL_OW 72
49656: ST_TO_ADDR
// end ;
49657: LD_VAR 0 2
49661: RET
// export function Negate ( value ) ; begin
49662: LD_INT 0
49664: PPUSH
// result := not value ;
49665: LD_ADDR_VAR 0 2
49669: PUSH
49670: LD_VAR 0 1
49674: NOT
49675: ST_TO_ADDR
// end ;
49676: LD_VAR 0 2
49680: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
49681: LD_INT 0
49683: PPUSH
// if x1 = x2 then
49684: LD_VAR 0 1
49688: PUSH
49689: LD_VAR 0 3
49693: EQUAL
49694: IFFALSE 49728
// begin if y1 > y2 then
49696: LD_VAR 0 2
49700: PUSH
49701: LD_VAR 0 4
49705: GREATER
49706: IFFALSE 49718
// result := 0 else
49708: LD_ADDR_VAR 0 5
49712: PUSH
49713: LD_INT 0
49715: ST_TO_ADDR
49716: GO 49726
// result := 3 ;
49718: LD_ADDR_VAR 0 5
49722: PUSH
49723: LD_INT 3
49725: ST_TO_ADDR
// exit ;
49726: GO 49814
// end ; if y1 = y2 then
49728: LD_VAR 0 2
49732: PUSH
49733: LD_VAR 0 4
49737: EQUAL
49738: IFFALSE 49772
// begin if x1 > x2 then
49740: LD_VAR 0 1
49744: PUSH
49745: LD_VAR 0 3
49749: GREATER
49750: IFFALSE 49762
// result := 1 else
49752: LD_ADDR_VAR 0 5
49756: PUSH
49757: LD_INT 1
49759: ST_TO_ADDR
49760: GO 49770
// result := 4 ;
49762: LD_ADDR_VAR 0 5
49766: PUSH
49767: LD_INT 4
49769: ST_TO_ADDR
// exit ;
49770: GO 49814
// end ; if x1 > x2 and y1 > y2 then
49772: LD_VAR 0 1
49776: PUSH
49777: LD_VAR 0 3
49781: GREATER
49782: PUSH
49783: LD_VAR 0 2
49787: PUSH
49788: LD_VAR 0 4
49792: GREATER
49793: AND
49794: IFFALSE 49806
// result := 2 else
49796: LD_ADDR_VAR 0 5
49800: PUSH
49801: LD_INT 2
49803: ST_TO_ADDR
49804: GO 49814
// result := 5 ;
49806: LD_ADDR_VAR 0 5
49810: PUSH
49811: LD_INT 5
49813: ST_TO_ADDR
// end ;
49814: LD_VAR 0 5
49818: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49819: LD_INT 0
49821: PPUSH
49822: PPUSH
// if not driver or not IsInUnit ( driver ) then
49823: LD_VAR 0 1
49827: NOT
49828: PUSH
49829: LD_VAR 0 1
49833: PPUSH
49834: CALL_OW 310
49838: NOT
49839: OR
49840: IFFALSE 49844
// exit ;
49842: GO 49934
// vehicle := IsInUnit ( driver ) ;
49844: LD_ADDR_VAR 0 3
49848: PUSH
49849: LD_VAR 0 1
49853: PPUSH
49854: CALL_OW 310
49858: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49859: LD_VAR 0 1
49863: PPUSH
49864: LD_STRING \
49866: PUSH
49867: LD_INT 0
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: PUSH
49894: LD_STRING E
49896: PUSH
49897: LD_INT 0
49899: PUSH
49900: LD_INT 0
49902: PUSH
49903: LD_VAR 0 3
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: LD_INT 0
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PPUSH
49930: CALL_OW 446
// end ;
49934: LD_VAR 0 2
49938: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
49939: LD_INT 0
49941: PPUSH
49942: PPUSH
49943: PPUSH
// tmp := [ ] ;
49944: LD_ADDR_VAR 0 5
49948: PUSH
49949: EMPTY
49950: ST_TO_ADDR
// for i in units do
49951: LD_ADDR_VAR 0 4
49955: PUSH
49956: LD_VAR 0 1
49960: PUSH
49961: FOR_IN
49962: IFFALSE 50000
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
49964: LD_ADDR_VAR 0 5
49968: PUSH
49969: LD_VAR 0 5
49973: PPUSH
49974: LD_VAR 0 5
49978: PUSH
49979: LD_INT 1
49981: PLUS
49982: PPUSH
49983: LD_VAR 0 4
49987: PPUSH
49988: CALL_OW 256
49992: PPUSH
49993: CALL_OW 2
49997: ST_TO_ADDR
49998: GO 49961
50000: POP
50001: POP
// if not tmp then
50002: LD_VAR 0 5
50006: NOT
50007: IFFALSE 50011
// exit ;
50009: GO 50059
// if asc then
50011: LD_VAR 0 2
50015: IFFALSE 50039
// result := SortListByListAsc ( units , tmp ) else
50017: LD_ADDR_VAR 0 3
50021: PUSH
50022: LD_VAR 0 1
50026: PPUSH
50027: LD_VAR 0 5
50031: PPUSH
50032: CALL_OW 76
50036: ST_TO_ADDR
50037: GO 50059
// result := SortListByListDesc ( units , tmp ) ;
50039: LD_ADDR_VAR 0 3
50043: PUSH
50044: LD_VAR 0 1
50048: PPUSH
50049: LD_VAR 0 5
50053: PPUSH
50054: CALL_OW 77
50058: ST_TO_ADDR
// end ;
50059: LD_VAR 0 3
50063: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50064: LD_INT 0
50066: PPUSH
50067: PPUSH
// task := GetTaskList ( mech ) ;
50068: LD_ADDR_VAR 0 4
50072: PUSH
50073: LD_VAR 0 1
50077: PPUSH
50078: CALL_OW 437
50082: ST_TO_ADDR
// if not task then
50083: LD_VAR 0 4
50087: NOT
50088: IFFALSE 50092
// exit ;
50090: GO 50134
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50092: LD_ADDR_VAR 0 3
50096: PUSH
50097: LD_VAR 0 4
50101: PUSH
50102: LD_INT 1
50104: ARRAY
50105: PUSH
50106: LD_INT 1
50108: ARRAY
50109: PUSH
50110: LD_STRING r
50112: EQUAL
50113: PUSH
50114: LD_VAR 0 4
50118: PUSH
50119: LD_INT 1
50121: ARRAY
50122: PUSH
50123: LD_INT 4
50125: ARRAY
50126: PUSH
50127: LD_VAR 0 2
50131: EQUAL
50132: AND
50133: ST_TO_ADDR
// end ;
50134: LD_VAR 0 3
50138: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
50139: LD_INT 0
50141: PPUSH
// SetDir ( unit , d ) ;
50142: LD_VAR 0 1
50146: PPUSH
50147: LD_VAR 0 4
50151: PPUSH
50152: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
50156: LD_VAR 0 1
50160: PPUSH
50161: LD_VAR 0 2
50165: PPUSH
50166: LD_VAR 0 3
50170: PPUSH
50171: LD_VAR 0 5
50175: PPUSH
50176: CALL_OW 48
// end ; end_of_file
50180: LD_VAR 0 6
50184: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
50185: LD_INT 0
50187: PPUSH
// ar_miner := 81 ;
50188: LD_ADDR_EXP 45
50192: PUSH
50193: LD_INT 81
50195: ST_TO_ADDR
// ar_crane := 88 ;
50196: LD_ADDR_EXP 44
50200: PUSH
50201: LD_INT 88
50203: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
50204: LD_ADDR_EXP 39
50208: PUSH
50209: LD_INT 89
50211: ST_TO_ADDR
// us_hack := 99 ;
50212: LD_ADDR_EXP 40
50216: PUSH
50217: LD_INT 99
50219: ST_TO_ADDR
// us_artillery := 97 ;
50220: LD_ADDR_EXP 41
50224: PUSH
50225: LD_INT 97
50227: ST_TO_ADDR
// ar_bio_bomb := 91 ;
50228: LD_ADDR_EXP 42
50232: PUSH
50233: LD_INT 91
50235: ST_TO_ADDR
// ar_mortar := 92 ;
50236: LD_ADDR_EXP 43
50240: PUSH
50241: LD_INT 92
50243: ST_TO_ADDR
// ru_radar := 98 ;
50244: LD_ADDR_EXP 38
50248: PUSH
50249: LD_INT 98
50251: ST_TO_ADDR
// tech_Artillery := 80 ;
50252: LD_ADDR_EXP 46
50256: PUSH
50257: LD_INT 80
50259: ST_TO_ADDR
// tech_RadMat := 81 ;
50260: LD_ADDR_EXP 47
50264: PUSH
50265: LD_INT 81
50267: ST_TO_ADDR
// tech_BasicTools := 82 ;
50268: LD_ADDR_EXP 48
50272: PUSH
50273: LD_INT 82
50275: ST_TO_ADDR
// tech_Cargo := 83 ;
50276: LD_ADDR_EXP 49
50280: PUSH
50281: LD_INT 83
50283: ST_TO_ADDR
// tech_Track := 84 ;
50284: LD_ADDR_EXP 50
50288: PUSH
50289: LD_INT 84
50291: ST_TO_ADDR
// tech_Crane := 85 ;
50292: LD_ADDR_EXP 51
50296: PUSH
50297: LD_INT 85
50299: ST_TO_ADDR
// tech_Bulldozer := 86 ;
50300: LD_ADDR_EXP 52
50304: PUSH
50305: LD_INT 86
50307: ST_TO_ADDR
// tech_Hovercraft := 87 ;
50308: LD_ADDR_EXP 53
50312: PUSH
50313: LD_INT 87
50315: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
50316: LD_ADDR_EXP 54
50320: PUSH
50321: LD_INT 88
50323: ST_TO_ADDR
// class_mastodont := 31 ;
50324: LD_ADDR_EXP 55
50328: PUSH
50329: LD_INT 31
50331: ST_TO_ADDR
// class_horse := 21 ;
50332: LD_ADDR_EXP 56
50336: PUSH
50337: LD_INT 21
50339: ST_TO_ADDR
// end ;
50340: LD_VAR 0 1
50344: RET
// every 1 do
50345: GO 50347
50347: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
50348: CALL 50185 0 0
50352: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
50353: LD_INT 0
50355: PPUSH
// if p2 = 100 then
50356: LD_VAR 0 2
50360: PUSH
50361: LD_INT 100
50363: EQUAL
50364: IFFALSE 51313
// begin if not StreamModeActive then
50366: LD_EXP 57
50370: NOT
50371: IFFALSE 50381
// StreamModeActive := true ;
50373: LD_ADDR_EXP 57
50377: PUSH
50378: LD_INT 1
50380: ST_TO_ADDR
// if p3 = 0 then
50381: LD_VAR 0 3
50385: PUSH
50386: LD_INT 0
50388: EQUAL
50389: IFFALSE 50395
// InitStreamMode ;
50391: CALL 51473 0 0
// if p3 = 1 then
50395: LD_VAR 0 3
50399: PUSH
50400: LD_INT 1
50402: EQUAL
50403: IFFALSE 50413
// sRocket := true ;
50405: LD_ADDR_EXP 62
50409: PUSH
50410: LD_INT 1
50412: ST_TO_ADDR
// if p3 = 2 then
50413: LD_VAR 0 3
50417: PUSH
50418: LD_INT 2
50420: EQUAL
50421: IFFALSE 50431
// sSpeed := true ;
50423: LD_ADDR_EXP 61
50427: PUSH
50428: LD_INT 1
50430: ST_TO_ADDR
// if p3 = 3 then
50431: LD_VAR 0 3
50435: PUSH
50436: LD_INT 3
50438: EQUAL
50439: IFFALSE 50449
// sEngine := true ;
50441: LD_ADDR_EXP 63
50445: PUSH
50446: LD_INT 1
50448: ST_TO_ADDR
// if p3 = 4 then
50449: LD_VAR 0 3
50453: PUSH
50454: LD_INT 4
50456: EQUAL
50457: IFFALSE 50467
// sSpec := true ;
50459: LD_ADDR_EXP 60
50463: PUSH
50464: LD_INT 1
50466: ST_TO_ADDR
// if p3 = 5 then
50467: LD_VAR 0 3
50471: PUSH
50472: LD_INT 5
50474: EQUAL
50475: IFFALSE 50485
// sLevel := true ;
50477: LD_ADDR_EXP 64
50481: PUSH
50482: LD_INT 1
50484: ST_TO_ADDR
// if p3 = 6 then
50485: LD_VAR 0 3
50489: PUSH
50490: LD_INT 6
50492: EQUAL
50493: IFFALSE 50503
// sArmoury := true ;
50495: LD_ADDR_EXP 65
50499: PUSH
50500: LD_INT 1
50502: ST_TO_ADDR
// if p3 = 7 then
50503: LD_VAR 0 3
50507: PUSH
50508: LD_INT 7
50510: EQUAL
50511: IFFALSE 50521
// sRadar := true ;
50513: LD_ADDR_EXP 66
50517: PUSH
50518: LD_INT 1
50520: ST_TO_ADDR
// if p3 = 8 then
50521: LD_VAR 0 3
50525: PUSH
50526: LD_INT 8
50528: EQUAL
50529: IFFALSE 50539
// sBunker := true ;
50531: LD_ADDR_EXP 67
50535: PUSH
50536: LD_INT 1
50538: ST_TO_ADDR
// if p3 = 9 then
50539: LD_VAR 0 3
50543: PUSH
50544: LD_INT 9
50546: EQUAL
50547: IFFALSE 50557
// sHack := true ;
50549: LD_ADDR_EXP 68
50553: PUSH
50554: LD_INT 1
50556: ST_TO_ADDR
// if p3 = 10 then
50557: LD_VAR 0 3
50561: PUSH
50562: LD_INT 10
50564: EQUAL
50565: IFFALSE 50575
// sFire := true ;
50567: LD_ADDR_EXP 69
50571: PUSH
50572: LD_INT 1
50574: ST_TO_ADDR
// if p3 = 11 then
50575: LD_VAR 0 3
50579: PUSH
50580: LD_INT 11
50582: EQUAL
50583: IFFALSE 50593
// sRefresh := true ;
50585: LD_ADDR_EXP 70
50589: PUSH
50590: LD_INT 1
50592: ST_TO_ADDR
// if p3 = 12 then
50593: LD_VAR 0 3
50597: PUSH
50598: LD_INT 12
50600: EQUAL
50601: IFFALSE 50611
// sExp := true ;
50603: LD_ADDR_EXP 71
50607: PUSH
50608: LD_INT 1
50610: ST_TO_ADDR
// if p3 = 13 then
50611: LD_VAR 0 3
50615: PUSH
50616: LD_INT 13
50618: EQUAL
50619: IFFALSE 50629
// sDepot := true ;
50621: LD_ADDR_EXP 72
50625: PUSH
50626: LD_INT 1
50628: ST_TO_ADDR
// if p3 = 14 then
50629: LD_VAR 0 3
50633: PUSH
50634: LD_INT 14
50636: EQUAL
50637: IFFALSE 50647
// sFlag := true ;
50639: LD_ADDR_EXP 73
50643: PUSH
50644: LD_INT 1
50646: ST_TO_ADDR
// if p3 = 15 then
50647: LD_VAR 0 3
50651: PUSH
50652: LD_INT 15
50654: EQUAL
50655: IFFALSE 50665
// sKamikadze := true ;
50657: LD_ADDR_EXP 81
50661: PUSH
50662: LD_INT 1
50664: ST_TO_ADDR
// if p3 = 16 then
50665: LD_VAR 0 3
50669: PUSH
50670: LD_INT 16
50672: EQUAL
50673: IFFALSE 50683
// sTroll := true ;
50675: LD_ADDR_EXP 82
50679: PUSH
50680: LD_INT 1
50682: ST_TO_ADDR
// if p3 = 17 then
50683: LD_VAR 0 3
50687: PUSH
50688: LD_INT 17
50690: EQUAL
50691: IFFALSE 50701
// sSlow := true ;
50693: LD_ADDR_EXP 83
50697: PUSH
50698: LD_INT 1
50700: ST_TO_ADDR
// if p3 = 18 then
50701: LD_VAR 0 3
50705: PUSH
50706: LD_INT 18
50708: EQUAL
50709: IFFALSE 50719
// sLack := true ;
50711: LD_ADDR_EXP 84
50715: PUSH
50716: LD_INT 1
50718: ST_TO_ADDR
// if p3 = 19 then
50719: LD_VAR 0 3
50723: PUSH
50724: LD_INT 19
50726: EQUAL
50727: IFFALSE 50737
// sTank := true ;
50729: LD_ADDR_EXP 86
50733: PUSH
50734: LD_INT 1
50736: ST_TO_ADDR
// if p3 = 20 then
50737: LD_VAR 0 3
50741: PUSH
50742: LD_INT 20
50744: EQUAL
50745: IFFALSE 50755
// sRemote := true ;
50747: LD_ADDR_EXP 87
50751: PUSH
50752: LD_INT 1
50754: ST_TO_ADDR
// if p3 = 21 then
50755: LD_VAR 0 3
50759: PUSH
50760: LD_INT 21
50762: EQUAL
50763: IFFALSE 50773
// sPowell := true ;
50765: LD_ADDR_EXP 88
50769: PUSH
50770: LD_INT 1
50772: ST_TO_ADDR
// if p3 = 22 then
50773: LD_VAR 0 3
50777: PUSH
50778: LD_INT 22
50780: EQUAL
50781: IFFALSE 50791
// sTeleport := true ;
50783: LD_ADDR_EXP 91
50787: PUSH
50788: LD_INT 1
50790: ST_TO_ADDR
// if p3 = 23 then
50791: LD_VAR 0 3
50795: PUSH
50796: LD_INT 23
50798: EQUAL
50799: IFFALSE 50809
// sOilTower := true ;
50801: LD_ADDR_EXP 93
50805: PUSH
50806: LD_INT 1
50808: ST_TO_ADDR
// if p3 = 24 then
50809: LD_VAR 0 3
50813: PUSH
50814: LD_INT 24
50816: EQUAL
50817: IFFALSE 50827
// sShovel := true ;
50819: LD_ADDR_EXP 94
50823: PUSH
50824: LD_INT 1
50826: ST_TO_ADDR
// if p3 = 25 then
50827: LD_VAR 0 3
50831: PUSH
50832: LD_INT 25
50834: EQUAL
50835: IFFALSE 50845
// sSheik := true ;
50837: LD_ADDR_EXP 95
50841: PUSH
50842: LD_INT 1
50844: ST_TO_ADDR
// if p3 = 26 then
50845: LD_VAR 0 3
50849: PUSH
50850: LD_INT 26
50852: EQUAL
50853: IFFALSE 50863
// sEarthquake := true ;
50855: LD_ADDR_EXP 97
50859: PUSH
50860: LD_INT 1
50862: ST_TO_ADDR
// if p3 = 27 then
50863: LD_VAR 0 3
50867: PUSH
50868: LD_INT 27
50870: EQUAL
50871: IFFALSE 50881
// sAI := true ;
50873: LD_ADDR_EXP 98
50877: PUSH
50878: LD_INT 1
50880: ST_TO_ADDR
// if p3 = 28 then
50881: LD_VAR 0 3
50885: PUSH
50886: LD_INT 28
50888: EQUAL
50889: IFFALSE 50899
// sCargo := true ;
50891: LD_ADDR_EXP 101
50895: PUSH
50896: LD_INT 1
50898: ST_TO_ADDR
// if p3 = 29 then
50899: LD_VAR 0 3
50903: PUSH
50904: LD_INT 29
50906: EQUAL
50907: IFFALSE 50917
// sDLaser := true ;
50909: LD_ADDR_EXP 102
50913: PUSH
50914: LD_INT 1
50916: ST_TO_ADDR
// if p3 = 30 then
50917: LD_VAR 0 3
50921: PUSH
50922: LD_INT 30
50924: EQUAL
50925: IFFALSE 50935
// sExchange := true ;
50927: LD_ADDR_EXP 103
50931: PUSH
50932: LD_INT 1
50934: ST_TO_ADDR
// if p3 = 31 then
50935: LD_VAR 0 3
50939: PUSH
50940: LD_INT 31
50942: EQUAL
50943: IFFALSE 50953
// sFac := true ;
50945: LD_ADDR_EXP 104
50949: PUSH
50950: LD_INT 1
50952: ST_TO_ADDR
// if p3 = 32 then
50953: LD_VAR 0 3
50957: PUSH
50958: LD_INT 32
50960: EQUAL
50961: IFFALSE 50971
// sPower := true ;
50963: LD_ADDR_EXP 105
50967: PUSH
50968: LD_INT 1
50970: ST_TO_ADDR
// if p3 = 33 then
50971: LD_VAR 0 3
50975: PUSH
50976: LD_INT 33
50978: EQUAL
50979: IFFALSE 50989
// sRandom := true ;
50981: LD_ADDR_EXP 106
50985: PUSH
50986: LD_INT 1
50988: ST_TO_ADDR
// if p3 = 34 then
50989: LD_VAR 0 3
50993: PUSH
50994: LD_INT 34
50996: EQUAL
50997: IFFALSE 51007
// sShield := true ;
50999: LD_ADDR_EXP 107
51003: PUSH
51004: LD_INT 1
51006: ST_TO_ADDR
// if p3 = 35 then
51007: LD_VAR 0 3
51011: PUSH
51012: LD_INT 35
51014: EQUAL
51015: IFFALSE 51025
// sTime := true ;
51017: LD_ADDR_EXP 108
51021: PUSH
51022: LD_INT 1
51024: ST_TO_ADDR
// if p3 = 36 then
51025: LD_VAR 0 3
51029: PUSH
51030: LD_INT 36
51032: EQUAL
51033: IFFALSE 51043
// sTools := true ;
51035: LD_ADDR_EXP 109
51039: PUSH
51040: LD_INT 1
51042: ST_TO_ADDR
// if p3 = 101 then
51043: LD_VAR 0 3
51047: PUSH
51048: LD_INT 101
51050: EQUAL
51051: IFFALSE 51061
// sSold := true ;
51053: LD_ADDR_EXP 74
51057: PUSH
51058: LD_INT 1
51060: ST_TO_ADDR
// if p3 = 102 then
51061: LD_VAR 0 3
51065: PUSH
51066: LD_INT 102
51068: EQUAL
51069: IFFALSE 51079
// sDiff := true ;
51071: LD_ADDR_EXP 75
51075: PUSH
51076: LD_INT 1
51078: ST_TO_ADDR
// if p3 = 103 then
51079: LD_VAR 0 3
51083: PUSH
51084: LD_INT 103
51086: EQUAL
51087: IFFALSE 51097
// sFog := true ;
51089: LD_ADDR_EXP 78
51093: PUSH
51094: LD_INT 1
51096: ST_TO_ADDR
// if p3 = 104 then
51097: LD_VAR 0 3
51101: PUSH
51102: LD_INT 104
51104: EQUAL
51105: IFFALSE 51115
// sReset := true ;
51107: LD_ADDR_EXP 79
51111: PUSH
51112: LD_INT 1
51114: ST_TO_ADDR
// if p3 = 105 then
51115: LD_VAR 0 3
51119: PUSH
51120: LD_INT 105
51122: EQUAL
51123: IFFALSE 51133
// sSun := true ;
51125: LD_ADDR_EXP 80
51129: PUSH
51130: LD_INT 1
51132: ST_TO_ADDR
// if p3 = 106 then
51133: LD_VAR 0 3
51137: PUSH
51138: LD_INT 106
51140: EQUAL
51141: IFFALSE 51151
// sTiger := true ;
51143: LD_ADDR_EXP 76
51147: PUSH
51148: LD_INT 1
51150: ST_TO_ADDR
// if p3 = 107 then
51151: LD_VAR 0 3
51155: PUSH
51156: LD_INT 107
51158: EQUAL
51159: IFFALSE 51169
// sBomb := true ;
51161: LD_ADDR_EXP 77
51165: PUSH
51166: LD_INT 1
51168: ST_TO_ADDR
// if p3 = 108 then
51169: LD_VAR 0 3
51173: PUSH
51174: LD_INT 108
51176: EQUAL
51177: IFFALSE 51187
// sWound := true ;
51179: LD_ADDR_EXP 85
51183: PUSH
51184: LD_INT 1
51186: ST_TO_ADDR
// if p3 = 109 then
51187: LD_VAR 0 3
51191: PUSH
51192: LD_INT 109
51194: EQUAL
51195: IFFALSE 51205
// sBetray := true ;
51197: LD_ADDR_EXP 89
51201: PUSH
51202: LD_INT 1
51204: ST_TO_ADDR
// if p3 = 110 then
51205: LD_VAR 0 3
51209: PUSH
51210: LD_INT 110
51212: EQUAL
51213: IFFALSE 51223
// sContamin := true ;
51215: LD_ADDR_EXP 90
51219: PUSH
51220: LD_INT 1
51222: ST_TO_ADDR
// if p3 = 111 then
51223: LD_VAR 0 3
51227: PUSH
51228: LD_INT 111
51230: EQUAL
51231: IFFALSE 51241
// sOil := true ;
51233: LD_ADDR_EXP 92
51237: PUSH
51238: LD_INT 1
51240: ST_TO_ADDR
// if p3 = 112 then
51241: LD_VAR 0 3
51245: PUSH
51246: LD_INT 112
51248: EQUAL
51249: IFFALSE 51259
// sStu := true ;
51251: LD_ADDR_EXP 96
51255: PUSH
51256: LD_INT 1
51258: ST_TO_ADDR
// if p3 = 113 then
51259: LD_VAR 0 3
51263: PUSH
51264: LD_INT 113
51266: EQUAL
51267: IFFALSE 51277
// sBazooka := true ;
51269: LD_ADDR_EXP 99
51273: PUSH
51274: LD_INT 1
51276: ST_TO_ADDR
// if p3 = 114 then
51277: LD_VAR 0 3
51281: PUSH
51282: LD_INT 114
51284: EQUAL
51285: IFFALSE 51295
// sMortar := true ;
51287: LD_ADDR_EXP 100
51291: PUSH
51292: LD_INT 1
51294: ST_TO_ADDR
// if p3 = 115 then
51295: LD_VAR 0 3
51299: PUSH
51300: LD_INT 115
51302: EQUAL
51303: IFFALSE 51313
// sRanger := true ;
51305: LD_ADDR_EXP 110
51309: PUSH
51310: LD_INT 1
51312: ST_TO_ADDR
// end ; if p2 = 101 then
51313: LD_VAR 0 2
51317: PUSH
51318: LD_INT 101
51320: EQUAL
51321: IFFALSE 51449
// begin case p3 of 1 :
51323: LD_VAR 0 3
51327: PUSH
51328: LD_INT 1
51330: DOUBLE
51331: EQUAL
51332: IFTRUE 51336
51334: GO 51343
51336: POP
// hHackUnlimitedResources ; 2 :
51337: CALL 62486 0 0
51341: GO 51449
51343: LD_INT 2
51345: DOUBLE
51346: EQUAL
51347: IFTRUE 51351
51349: GO 51358
51351: POP
// hHackSetLevel10 ; 3 :
51352: CALL 62619 0 0
51356: GO 51449
51358: LD_INT 3
51360: DOUBLE
51361: EQUAL
51362: IFTRUE 51366
51364: GO 51373
51366: POP
// hHackSetLevel10YourUnits ; 4 :
51367: CALL 62704 0 0
51371: GO 51449
51373: LD_INT 4
51375: DOUBLE
51376: EQUAL
51377: IFTRUE 51381
51379: GO 51388
51381: POP
// hHackInvincible ; 5 :
51382: CALL 63152 0 0
51386: GO 51449
51388: LD_INT 5
51390: DOUBLE
51391: EQUAL
51392: IFTRUE 51396
51394: GO 51403
51396: POP
// hHackInvisible ; 6 :
51397: CALL 63263 0 0
51401: GO 51449
51403: LD_INT 6
51405: DOUBLE
51406: EQUAL
51407: IFTRUE 51411
51409: GO 51418
51411: POP
// hHackChangeYourSide ; 7 :
51412: CALL 63320 0 0
51416: GO 51449
51418: LD_INT 7
51420: DOUBLE
51421: EQUAL
51422: IFTRUE 51426
51424: GO 51433
51426: POP
// hHackChangeUnitSide ; 8 :
51427: CALL 63362 0 0
51431: GO 51449
51433: LD_INT 8
51435: DOUBLE
51436: EQUAL
51437: IFTRUE 51441
51439: GO 51448
51441: POP
// hHackFog ; end ;
51442: CALL 63463 0 0
51446: GO 51449
51448: POP
// end ; end ;
51449: LD_VAR 0 7
51453: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
51454: GO 51456
51456: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
51457: LD_STRING initStreamRollete();
51459: PPUSH
51460: CALL_OW 559
// InitStreamMode ;
51464: CALL 51473 0 0
// DefineStreamItems ( ) ;
51468: CALL 51913 0 0
// end ;
51472: END
// function InitStreamMode ; begin
51473: LD_INT 0
51475: PPUSH
// streamModeActive := false ;
51476: LD_ADDR_EXP 57
51480: PUSH
51481: LD_INT 0
51483: ST_TO_ADDR
// normalCounter := 36 ;
51484: LD_ADDR_EXP 58
51488: PUSH
51489: LD_INT 36
51491: ST_TO_ADDR
// hardcoreCounter := 16 ;
51492: LD_ADDR_EXP 59
51496: PUSH
51497: LD_INT 16
51499: ST_TO_ADDR
// sRocket := false ;
51500: LD_ADDR_EXP 62
51504: PUSH
51505: LD_INT 0
51507: ST_TO_ADDR
// sSpeed := false ;
51508: LD_ADDR_EXP 61
51512: PUSH
51513: LD_INT 0
51515: ST_TO_ADDR
// sEngine := false ;
51516: LD_ADDR_EXP 63
51520: PUSH
51521: LD_INT 0
51523: ST_TO_ADDR
// sSpec := false ;
51524: LD_ADDR_EXP 60
51528: PUSH
51529: LD_INT 0
51531: ST_TO_ADDR
// sLevel := false ;
51532: LD_ADDR_EXP 64
51536: PUSH
51537: LD_INT 0
51539: ST_TO_ADDR
// sArmoury := false ;
51540: LD_ADDR_EXP 65
51544: PUSH
51545: LD_INT 0
51547: ST_TO_ADDR
// sRadar := false ;
51548: LD_ADDR_EXP 66
51552: PUSH
51553: LD_INT 0
51555: ST_TO_ADDR
// sBunker := false ;
51556: LD_ADDR_EXP 67
51560: PUSH
51561: LD_INT 0
51563: ST_TO_ADDR
// sHack := false ;
51564: LD_ADDR_EXP 68
51568: PUSH
51569: LD_INT 0
51571: ST_TO_ADDR
// sFire := false ;
51572: LD_ADDR_EXP 69
51576: PUSH
51577: LD_INT 0
51579: ST_TO_ADDR
// sRefresh := false ;
51580: LD_ADDR_EXP 70
51584: PUSH
51585: LD_INT 0
51587: ST_TO_ADDR
// sExp := false ;
51588: LD_ADDR_EXP 71
51592: PUSH
51593: LD_INT 0
51595: ST_TO_ADDR
// sDepot := false ;
51596: LD_ADDR_EXP 72
51600: PUSH
51601: LD_INT 0
51603: ST_TO_ADDR
// sFlag := false ;
51604: LD_ADDR_EXP 73
51608: PUSH
51609: LD_INT 0
51611: ST_TO_ADDR
// sKamikadze := false ;
51612: LD_ADDR_EXP 81
51616: PUSH
51617: LD_INT 0
51619: ST_TO_ADDR
// sTroll := false ;
51620: LD_ADDR_EXP 82
51624: PUSH
51625: LD_INT 0
51627: ST_TO_ADDR
// sSlow := false ;
51628: LD_ADDR_EXP 83
51632: PUSH
51633: LD_INT 0
51635: ST_TO_ADDR
// sLack := false ;
51636: LD_ADDR_EXP 84
51640: PUSH
51641: LD_INT 0
51643: ST_TO_ADDR
// sTank := false ;
51644: LD_ADDR_EXP 86
51648: PUSH
51649: LD_INT 0
51651: ST_TO_ADDR
// sRemote := false ;
51652: LD_ADDR_EXP 87
51656: PUSH
51657: LD_INT 0
51659: ST_TO_ADDR
// sPowell := false ;
51660: LD_ADDR_EXP 88
51664: PUSH
51665: LD_INT 0
51667: ST_TO_ADDR
// sTeleport := false ;
51668: LD_ADDR_EXP 91
51672: PUSH
51673: LD_INT 0
51675: ST_TO_ADDR
// sOilTower := false ;
51676: LD_ADDR_EXP 93
51680: PUSH
51681: LD_INT 0
51683: ST_TO_ADDR
// sShovel := false ;
51684: LD_ADDR_EXP 94
51688: PUSH
51689: LD_INT 0
51691: ST_TO_ADDR
// sSheik := false ;
51692: LD_ADDR_EXP 95
51696: PUSH
51697: LD_INT 0
51699: ST_TO_ADDR
// sEarthquake := false ;
51700: LD_ADDR_EXP 97
51704: PUSH
51705: LD_INT 0
51707: ST_TO_ADDR
// sAI := false ;
51708: LD_ADDR_EXP 98
51712: PUSH
51713: LD_INT 0
51715: ST_TO_ADDR
// sCargo := false ;
51716: LD_ADDR_EXP 101
51720: PUSH
51721: LD_INT 0
51723: ST_TO_ADDR
// sDLaser := false ;
51724: LD_ADDR_EXP 102
51728: PUSH
51729: LD_INT 0
51731: ST_TO_ADDR
// sExchange := false ;
51732: LD_ADDR_EXP 103
51736: PUSH
51737: LD_INT 0
51739: ST_TO_ADDR
// sFac := false ;
51740: LD_ADDR_EXP 104
51744: PUSH
51745: LD_INT 0
51747: ST_TO_ADDR
// sPower := false ;
51748: LD_ADDR_EXP 105
51752: PUSH
51753: LD_INT 0
51755: ST_TO_ADDR
// sRandom := false ;
51756: LD_ADDR_EXP 106
51760: PUSH
51761: LD_INT 0
51763: ST_TO_ADDR
// sShield := false ;
51764: LD_ADDR_EXP 107
51768: PUSH
51769: LD_INT 0
51771: ST_TO_ADDR
// sTime := false ;
51772: LD_ADDR_EXP 108
51776: PUSH
51777: LD_INT 0
51779: ST_TO_ADDR
// sTools := false ;
51780: LD_ADDR_EXP 109
51784: PUSH
51785: LD_INT 0
51787: ST_TO_ADDR
// sSold := false ;
51788: LD_ADDR_EXP 74
51792: PUSH
51793: LD_INT 0
51795: ST_TO_ADDR
// sDiff := false ;
51796: LD_ADDR_EXP 75
51800: PUSH
51801: LD_INT 0
51803: ST_TO_ADDR
// sFog := false ;
51804: LD_ADDR_EXP 78
51808: PUSH
51809: LD_INT 0
51811: ST_TO_ADDR
// sReset := false ;
51812: LD_ADDR_EXP 79
51816: PUSH
51817: LD_INT 0
51819: ST_TO_ADDR
// sSun := false ;
51820: LD_ADDR_EXP 80
51824: PUSH
51825: LD_INT 0
51827: ST_TO_ADDR
// sTiger := false ;
51828: LD_ADDR_EXP 76
51832: PUSH
51833: LD_INT 0
51835: ST_TO_ADDR
// sBomb := false ;
51836: LD_ADDR_EXP 77
51840: PUSH
51841: LD_INT 0
51843: ST_TO_ADDR
// sWound := false ;
51844: LD_ADDR_EXP 85
51848: PUSH
51849: LD_INT 0
51851: ST_TO_ADDR
// sBetray := false ;
51852: LD_ADDR_EXP 89
51856: PUSH
51857: LD_INT 0
51859: ST_TO_ADDR
// sContamin := false ;
51860: LD_ADDR_EXP 90
51864: PUSH
51865: LD_INT 0
51867: ST_TO_ADDR
// sOil := false ;
51868: LD_ADDR_EXP 92
51872: PUSH
51873: LD_INT 0
51875: ST_TO_ADDR
// sStu := false ;
51876: LD_ADDR_EXP 96
51880: PUSH
51881: LD_INT 0
51883: ST_TO_ADDR
// sBazooka := false ;
51884: LD_ADDR_EXP 99
51888: PUSH
51889: LD_INT 0
51891: ST_TO_ADDR
// sMortar := false ;
51892: LD_ADDR_EXP 100
51896: PUSH
51897: LD_INT 0
51899: ST_TO_ADDR
// sRanger := false ;
51900: LD_ADDR_EXP 110
51904: PUSH
51905: LD_INT 0
51907: ST_TO_ADDR
// end ;
51908: LD_VAR 0 1
51912: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
51913: LD_INT 0
51915: PPUSH
51916: PPUSH
51917: PPUSH
51918: PPUSH
51919: PPUSH
// result := [ ] ;
51920: LD_ADDR_VAR 0 1
51924: PUSH
51925: EMPTY
51926: ST_TO_ADDR
// if campaign_id = 1 then
51927: LD_OWVAR 69
51931: PUSH
51932: LD_INT 1
51934: EQUAL
51935: IFFALSE 54873
// begin case mission_number of 1 :
51937: LD_OWVAR 70
51941: PUSH
51942: LD_INT 1
51944: DOUBLE
51945: EQUAL
51946: IFTRUE 51950
51948: GO 52014
51950: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
51951: LD_ADDR_VAR 0 1
51955: PUSH
51956: LD_INT 2
51958: PUSH
51959: LD_INT 4
51961: PUSH
51962: LD_INT 11
51964: PUSH
51965: LD_INT 12
51967: PUSH
51968: LD_INT 15
51970: PUSH
51971: LD_INT 16
51973: PUSH
51974: LD_INT 22
51976: PUSH
51977: LD_INT 23
51979: PUSH
51980: LD_INT 26
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 101
51996: PUSH
51997: LD_INT 102
51999: PUSH
52000: LD_INT 106
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: LIST
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: ST_TO_ADDR
52012: GO 54871
52014: LD_INT 2
52016: DOUBLE
52017: EQUAL
52018: IFTRUE 52022
52020: GO 52094
52022: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
52023: LD_ADDR_VAR 0 1
52027: PUSH
52028: LD_INT 2
52030: PUSH
52031: LD_INT 4
52033: PUSH
52034: LD_INT 11
52036: PUSH
52037: LD_INT 12
52039: PUSH
52040: LD_INT 15
52042: PUSH
52043: LD_INT 16
52045: PUSH
52046: LD_INT 22
52048: PUSH
52049: LD_INT 23
52051: PUSH
52052: LD_INT 26
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 101
52068: PUSH
52069: LD_INT 102
52071: PUSH
52072: LD_INT 105
52074: PUSH
52075: LD_INT 106
52077: PUSH
52078: LD_INT 108
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: ST_TO_ADDR
52092: GO 54871
52094: LD_INT 3
52096: DOUBLE
52097: EQUAL
52098: IFTRUE 52102
52100: GO 52178
52102: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
52103: LD_ADDR_VAR 0 1
52107: PUSH
52108: LD_INT 2
52110: PUSH
52111: LD_INT 4
52113: PUSH
52114: LD_INT 5
52116: PUSH
52117: LD_INT 11
52119: PUSH
52120: LD_INT 12
52122: PUSH
52123: LD_INT 15
52125: PUSH
52126: LD_INT 16
52128: PUSH
52129: LD_INT 22
52131: PUSH
52132: LD_INT 26
52134: PUSH
52135: LD_INT 36
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 101
52152: PUSH
52153: LD_INT 102
52155: PUSH
52156: LD_INT 105
52158: PUSH
52159: LD_INT 106
52161: PUSH
52162: LD_INT 108
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: ST_TO_ADDR
52176: GO 54871
52178: LD_INT 4
52180: DOUBLE
52181: EQUAL
52182: IFTRUE 52186
52184: GO 52270
52186: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
52187: LD_ADDR_VAR 0 1
52191: PUSH
52192: LD_INT 2
52194: PUSH
52195: LD_INT 4
52197: PUSH
52198: LD_INT 5
52200: PUSH
52201: LD_INT 8
52203: PUSH
52204: LD_INT 11
52206: PUSH
52207: LD_INT 12
52209: PUSH
52210: LD_INT 15
52212: PUSH
52213: LD_INT 16
52215: PUSH
52216: LD_INT 22
52218: PUSH
52219: LD_INT 23
52221: PUSH
52222: LD_INT 26
52224: PUSH
52225: LD_INT 36
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 101
52244: PUSH
52245: LD_INT 102
52247: PUSH
52248: LD_INT 105
52250: PUSH
52251: LD_INT 106
52253: PUSH
52254: LD_INT 108
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: ST_TO_ADDR
52268: GO 54871
52270: LD_INT 5
52272: DOUBLE
52273: EQUAL
52274: IFTRUE 52278
52276: GO 52378
52278: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
52279: LD_ADDR_VAR 0 1
52283: PUSH
52284: LD_INT 2
52286: PUSH
52287: LD_INT 4
52289: PUSH
52290: LD_INT 5
52292: PUSH
52293: LD_INT 6
52295: PUSH
52296: LD_INT 8
52298: PUSH
52299: LD_INT 11
52301: PUSH
52302: LD_INT 12
52304: PUSH
52305: LD_INT 15
52307: PUSH
52308: LD_INT 16
52310: PUSH
52311: LD_INT 22
52313: PUSH
52314: LD_INT 23
52316: PUSH
52317: LD_INT 25
52319: PUSH
52320: LD_INT 26
52322: PUSH
52323: LD_INT 36
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 101
52344: PUSH
52345: LD_INT 102
52347: PUSH
52348: LD_INT 105
52350: PUSH
52351: LD_INT 106
52353: PUSH
52354: LD_INT 108
52356: PUSH
52357: LD_INT 109
52359: PUSH
52360: LD_INT 112
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: ST_TO_ADDR
52376: GO 54871
52378: LD_INT 6
52380: DOUBLE
52381: EQUAL
52382: IFTRUE 52386
52384: GO 52506
52386: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
52387: LD_ADDR_VAR 0 1
52391: PUSH
52392: LD_INT 2
52394: PUSH
52395: LD_INT 4
52397: PUSH
52398: LD_INT 5
52400: PUSH
52401: LD_INT 6
52403: PUSH
52404: LD_INT 8
52406: PUSH
52407: LD_INT 11
52409: PUSH
52410: LD_INT 12
52412: PUSH
52413: LD_INT 15
52415: PUSH
52416: LD_INT 16
52418: PUSH
52419: LD_INT 20
52421: PUSH
52422: LD_INT 21
52424: PUSH
52425: LD_INT 22
52427: PUSH
52428: LD_INT 23
52430: PUSH
52431: LD_INT 25
52433: PUSH
52434: LD_INT 26
52436: PUSH
52437: LD_INT 30
52439: PUSH
52440: LD_INT 31
52442: PUSH
52443: LD_INT 32
52445: PUSH
52446: LD_INT 36
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 101
52472: PUSH
52473: LD_INT 102
52475: PUSH
52476: LD_INT 105
52478: PUSH
52479: LD_INT 106
52481: PUSH
52482: LD_INT 108
52484: PUSH
52485: LD_INT 109
52487: PUSH
52488: LD_INT 112
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: ST_TO_ADDR
52504: GO 54871
52506: LD_INT 7
52508: DOUBLE
52509: EQUAL
52510: IFTRUE 52514
52512: GO 52614
52514: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
52515: LD_ADDR_VAR 0 1
52519: PUSH
52520: LD_INT 2
52522: PUSH
52523: LD_INT 4
52525: PUSH
52526: LD_INT 5
52528: PUSH
52529: LD_INT 7
52531: PUSH
52532: LD_INT 11
52534: PUSH
52535: LD_INT 12
52537: PUSH
52538: LD_INT 15
52540: PUSH
52541: LD_INT 16
52543: PUSH
52544: LD_INT 20
52546: PUSH
52547: LD_INT 21
52549: PUSH
52550: LD_INT 22
52552: PUSH
52553: LD_INT 23
52555: PUSH
52556: LD_INT 25
52558: PUSH
52559: LD_INT 26
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 101
52580: PUSH
52581: LD_INT 102
52583: PUSH
52584: LD_INT 103
52586: PUSH
52587: LD_INT 105
52589: PUSH
52590: LD_INT 106
52592: PUSH
52593: LD_INT 108
52595: PUSH
52596: LD_INT 112
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: ST_TO_ADDR
52612: GO 54871
52614: LD_INT 8
52616: DOUBLE
52617: EQUAL
52618: IFTRUE 52622
52620: GO 52750
52622: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
52623: LD_ADDR_VAR 0 1
52627: PUSH
52628: LD_INT 2
52630: PUSH
52631: LD_INT 4
52633: PUSH
52634: LD_INT 5
52636: PUSH
52637: LD_INT 6
52639: PUSH
52640: LD_INT 7
52642: PUSH
52643: LD_INT 8
52645: PUSH
52646: LD_INT 11
52648: PUSH
52649: LD_INT 12
52651: PUSH
52652: LD_INT 15
52654: PUSH
52655: LD_INT 16
52657: PUSH
52658: LD_INT 20
52660: PUSH
52661: LD_INT 21
52663: PUSH
52664: LD_INT 22
52666: PUSH
52667: LD_INT 23
52669: PUSH
52670: LD_INT 25
52672: PUSH
52673: LD_INT 26
52675: PUSH
52676: LD_INT 30
52678: PUSH
52679: LD_INT 31
52681: PUSH
52682: LD_INT 32
52684: PUSH
52685: LD_INT 36
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 101
52712: PUSH
52713: LD_INT 102
52715: PUSH
52716: LD_INT 103
52718: PUSH
52719: LD_INT 105
52721: PUSH
52722: LD_INT 106
52724: PUSH
52725: LD_INT 108
52727: PUSH
52728: LD_INT 109
52730: PUSH
52731: LD_INT 112
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: ST_TO_ADDR
52748: GO 54871
52750: LD_INT 9
52752: DOUBLE
52753: EQUAL
52754: IFTRUE 52758
52756: GO 52894
52758: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
52759: LD_ADDR_VAR 0 1
52763: PUSH
52764: LD_INT 2
52766: PUSH
52767: LD_INT 4
52769: PUSH
52770: LD_INT 5
52772: PUSH
52773: LD_INT 6
52775: PUSH
52776: LD_INT 7
52778: PUSH
52779: LD_INT 8
52781: PUSH
52782: LD_INT 11
52784: PUSH
52785: LD_INT 12
52787: PUSH
52788: LD_INT 15
52790: PUSH
52791: LD_INT 16
52793: PUSH
52794: LD_INT 20
52796: PUSH
52797: LD_INT 21
52799: PUSH
52800: LD_INT 22
52802: PUSH
52803: LD_INT 23
52805: PUSH
52806: LD_INT 25
52808: PUSH
52809: LD_INT 26
52811: PUSH
52812: LD_INT 28
52814: PUSH
52815: LD_INT 30
52817: PUSH
52818: LD_INT 31
52820: PUSH
52821: LD_INT 32
52823: PUSH
52824: LD_INT 36
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 101
52852: PUSH
52853: LD_INT 102
52855: PUSH
52856: LD_INT 103
52858: PUSH
52859: LD_INT 105
52861: PUSH
52862: LD_INT 106
52864: PUSH
52865: LD_INT 108
52867: PUSH
52868: LD_INT 109
52870: PUSH
52871: LD_INT 112
52873: PUSH
52874: LD_INT 114
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: ST_TO_ADDR
52892: GO 54871
52894: LD_INT 10
52896: DOUBLE
52897: EQUAL
52898: IFTRUE 52902
52900: GO 53086
52902: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
52903: LD_ADDR_VAR 0 1
52907: PUSH
52908: LD_INT 2
52910: PUSH
52911: LD_INT 4
52913: PUSH
52914: LD_INT 5
52916: PUSH
52917: LD_INT 6
52919: PUSH
52920: LD_INT 7
52922: PUSH
52923: LD_INT 8
52925: PUSH
52926: LD_INT 9
52928: PUSH
52929: LD_INT 10
52931: PUSH
52932: LD_INT 11
52934: PUSH
52935: LD_INT 12
52937: PUSH
52938: LD_INT 13
52940: PUSH
52941: LD_INT 14
52943: PUSH
52944: LD_INT 15
52946: PUSH
52947: LD_INT 16
52949: PUSH
52950: LD_INT 17
52952: PUSH
52953: LD_INT 18
52955: PUSH
52956: LD_INT 19
52958: PUSH
52959: LD_INT 20
52961: PUSH
52962: LD_INT 21
52964: PUSH
52965: LD_INT 22
52967: PUSH
52968: LD_INT 23
52970: PUSH
52971: LD_INT 24
52973: PUSH
52974: LD_INT 25
52976: PUSH
52977: LD_INT 26
52979: PUSH
52980: LD_INT 28
52982: PUSH
52983: LD_INT 30
52985: PUSH
52986: LD_INT 31
52988: PUSH
52989: LD_INT 32
52991: PUSH
52992: LD_INT 36
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 101
53028: PUSH
53029: LD_INT 102
53031: PUSH
53032: LD_INT 103
53034: PUSH
53035: LD_INT 104
53037: PUSH
53038: LD_INT 105
53040: PUSH
53041: LD_INT 106
53043: PUSH
53044: LD_INT 107
53046: PUSH
53047: LD_INT 108
53049: PUSH
53050: LD_INT 109
53052: PUSH
53053: LD_INT 110
53055: PUSH
53056: LD_INT 111
53058: PUSH
53059: LD_INT 112
53061: PUSH
53062: LD_INT 114
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: ST_TO_ADDR
53084: GO 54871
53086: LD_INT 11
53088: DOUBLE
53089: EQUAL
53090: IFTRUE 53094
53092: GO 53286
53094: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
53095: LD_ADDR_VAR 0 1
53099: PUSH
53100: LD_INT 2
53102: PUSH
53103: LD_INT 3
53105: PUSH
53106: LD_INT 4
53108: PUSH
53109: LD_INT 5
53111: PUSH
53112: LD_INT 6
53114: PUSH
53115: LD_INT 7
53117: PUSH
53118: LD_INT 8
53120: PUSH
53121: LD_INT 9
53123: PUSH
53124: LD_INT 10
53126: PUSH
53127: LD_INT 11
53129: PUSH
53130: LD_INT 12
53132: PUSH
53133: LD_INT 13
53135: PUSH
53136: LD_INT 14
53138: PUSH
53139: LD_INT 15
53141: PUSH
53142: LD_INT 16
53144: PUSH
53145: LD_INT 17
53147: PUSH
53148: LD_INT 18
53150: PUSH
53151: LD_INT 19
53153: PUSH
53154: LD_INT 20
53156: PUSH
53157: LD_INT 21
53159: PUSH
53160: LD_INT 22
53162: PUSH
53163: LD_INT 23
53165: PUSH
53166: LD_INT 24
53168: PUSH
53169: LD_INT 25
53171: PUSH
53172: LD_INT 26
53174: PUSH
53175: LD_INT 28
53177: PUSH
53178: LD_INT 30
53180: PUSH
53181: LD_INT 31
53183: PUSH
53184: LD_INT 32
53186: PUSH
53187: LD_INT 34
53189: PUSH
53190: LD_INT 36
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 101
53228: PUSH
53229: LD_INT 102
53231: PUSH
53232: LD_INT 103
53234: PUSH
53235: LD_INT 104
53237: PUSH
53238: LD_INT 105
53240: PUSH
53241: LD_INT 106
53243: PUSH
53244: LD_INT 107
53246: PUSH
53247: LD_INT 108
53249: PUSH
53250: LD_INT 109
53252: PUSH
53253: LD_INT 110
53255: PUSH
53256: LD_INT 111
53258: PUSH
53259: LD_INT 112
53261: PUSH
53262: LD_INT 114
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: ST_TO_ADDR
53284: GO 54871
53286: LD_INT 12
53288: DOUBLE
53289: EQUAL
53290: IFTRUE 53294
53292: GO 53502
53294: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
53295: LD_ADDR_VAR 0 1
53299: PUSH
53300: LD_INT 1
53302: PUSH
53303: LD_INT 2
53305: PUSH
53306: LD_INT 3
53308: PUSH
53309: LD_INT 4
53311: PUSH
53312: LD_INT 5
53314: PUSH
53315: LD_INT 6
53317: PUSH
53318: LD_INT 7
53320: PUSH
53321: LD_INT 8
53323: PUSH
53324: LD_INT 9
53326: PUSH
53327: LD_INT 10
53329: PUSH
53330: LD_INT 11
53332: PUSH
53333: LD_INT 12
53335: PUSH
53336: LD_INT 13
53338: PUSH
53339: LD_INT 14
53341: PUSH
53342: LD_INT 15
53344: PUSH
53345: LD_INT 16
53347: PUSH
53348: LD_INT 17
53350: PUSH
53351: LD_INT 18
53353: PUSH
53354: LD_INT 19
53356: PUSH
53357: LD_INT 20
53359: PUSH
53360: LD_INT 21
53362: PUSH
53363: LD_INT 22
53365: PUSH
53366: LD_INT 23
53368: PUSH
53369: LD_INT 24
53371: PUSH
53372: LD_INT 25
53374: PUSH
53375: LD_INT 26
53377: PUSH
53378: LD_INT 27
53380: PUSH
53381: LD_INT 28
53383: PUSH
53384: LD_INT 30
53386: PUSH
53387: LD_INT 31
53389: PUSH
53390: LD_INT 32
53392: PUSH
53393: LD_INT 33
53395: PUSH
53396: LD_INT 34
53398: PUSH
53399: LD_INT 36
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 101
53440: PUSH
53441: LD_INT 102
53443: PUSH
53444: LD_INT 103
53446: PUSH
53447: LD_INT 104
53449: PUSH
53450: LD_INT 105
53452: PUSH
53453: LD_INT 106
53455: PUSH
53456: LD_INT 107
53458: PUSH
53459: LD_INT 108
53461: PUSH
53462: LD_INT 109
53464: PUSH
53465: LD_INT 110
53467: PUSH
53468: LD_INT 111
53470: PUSH
53471: LD_INT 112
53473: PUSH
53474: LD_INT 113
53476: PUSH
53477: LD_INT 114
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: ST_TO_ADDR
53500: GO 54871
53502: LD_INT 13
53504: DOUBLE
53505: EQUAL
53506: IFTRUE 53510
53508: GO 53706
53510: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
53511: LD_ADDR_VAR 0 1
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: LD_INT 2
53521: PUSH
53522: LD_INT 3
53524: PUSH
53525: LD_INT 4
53527: PUSH
53528: LD_INT 5
53530: PUSH
53531: LD_INT 8
53533: PUSH
53534: LD_INT 9
53536: PUSH
53537: LD_INT 10
53539: PUSH
53540: LD_INT 11
53542: PUSH
53543: LD_INT 12
53545: PUSH
53546: LD_INT 14
53548: PUSH
53549: LD_INT 15
53551: PUSH
53552: LD_INT 16
53554: PUSH
53555: LD_INT 17
53557: PUSH
53558: LD_INT 18
53560: PUSH
53561: LD_INT 19
53563: PUSH
53564: LD_INT 20
53566: PUSH
53567: LD_INT 21
53569: PUSH
53570: LD_INT 22
53572: PUSH
53573: LD_INT 23
53575: PUSH
53576: LD_INT 24
53578: PUSH
53579: LD_INT 25
53581: PUSH
53582: LD_INT 26
53584: PUSH
53585: LD_INT 27
53587: PUSH
53588: LD_INT 28
53590: PUSH
53591: LD_INT 30
53593: PUSH
53594: LD_INT 31
53596: PUSH
53597: LD_INT 32
53599: PUSH
53600: LD_INT 33
53602: PUSH
53603: LD_INT 34
53605: PUSH
53606: LD_INT 36
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 101
53644: PUSH
53645: LD_INT 102
53647: PUSH
53648: LD_INT 103
53650: PUSH
53651: LD_INT 104
53653: PUSH
53654: LD_INT 105
53656: PUSH
53657: LD_INT 106
53659: PUSH
53660: LD_INT 107
53662: PUSH
53663: LD_INT 108
53665: PUSH
53666: LD_INT 109
53668: PUSH
53669: LD_INT 110
53671: PUSH
53672: LD_INT 111
53674: PUSH
53675: LD_INT 112
53677: PUSH
53678: LD_INT 113
53680: PUSH
53681: LD_INT 114
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: ST_TO_ADDR
53704: GO 54871
53706: LD_INT 14
53708: DOUBLE
53709: EQUAL
53710: IFTRUE 53714
53712: GO 53926
53714: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
53715: LD_ADDR_VAR 0 1
53719: PUSH
53720: LD_INT 1
53722: PUSH
53723: LD_INT 2
53725: PUSH
53726: LD_INT 3
53728: PUSH
53729: LD_INT 4
53731: PUSH
53732: LD_INT 5
53734: PUSH
53735: LD_INT 6
53737: PUSH
53738: LD_INT 7
53740: PUSH
53741: LD_INT 8
53743: PUSH
53744: LD_INT 9
53746: PUSH
53747: LD_INT 10
53749: PUSH
53750: LD_INT 11
53752: PUSH
53753: LD_INT 12
53755: PUSH
53756: LD_INT 13
53758: PUSH
53759: LD_INT 14
53761: PUSH
53762: LD_INT 15
53764: PUSH
53765: LD_INT 16
53767: PUSH
53768: LD_INT 17
53770: PUSH
53771: LD_INT 18
53773: PUSH
53774: LD_INT 19
53776: PUSH
53777: LD_INT 20
53779: PUSH
53780: LD_INT 21
53782: PUSH
53783: LD_INT 22
53785: PUSH
53786: LD_INT 23
53788: PUSH
53789: LD_INT 24
53791: PUSH
53792: LD_INT 25
53794: PUSH
53795: LD_INT 26
53797: PUSH
53798: LD_INT 27
53800: PUSH
53801: LD_INT 28
53803: PUSH
53804: LD_INT 29
53806: PUSH
53807: LD_INT 30
53809: PUSH
53810: LD_INT 31
53812: PUSH
53813: LD_INT 32
53815: PUSH
53816: LD_INT 33
53818: PUSH
53819: LD_INT 34
53821: PUSH
53822: LD_INT 36
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 101
53864: PUSH
53865: LD_INT 102
53867: PUSH
53868: LD_INT 103
53870: PUSH
53871: LD_INT 104
53873: PUSH
53874: LD_INT 105
53876: PUSH
53877: LD_INT 106
53879: PUSH
53880: LD_INT 107
53882: PUSH
53883: LD_INT 108
53885: PUSH
53886: LD_INT 109
53888: PUSH
53889: LD_INT 110
53891: PUSH
53892: LD_INT 111
53894: PUSH
53895: LD_INT 112
53897: PUSH
53898: LD_INT 113
53900: PUSH
53901: LD_INT 114
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: ST_TO_ADDR
53924: GO 54871
53926: LD_INT 15
53928: DOUBLE
53929: EQUAL
53930: IFTRUE 53934
53932: GO 54146
53934: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
53935: LD_ADDR_VAR 0 1
53939: PUSH
53940: LD_INT 1
53942: PUSH
53943: LD_INT 2
53945: PUSH
53946: LD_INT 3
53948: PUSH
53949: LD_INT 4
53951: PUSH
53952: LD_INT 5
53954: PUSH
53955: LD_INT 6
53957: PUSH
53958: LD_INT 7
53960: PUSH
53961: LD_INT 8
53963: PUSH
53964: LD_INT 9
53966: PUSH
53967: LD_INT 10
53969: PUSH
53970: LD_INT 11
53972: PUSH
53973: LD_INT 12
53975: PUSH
53976: LD_INT 13
53978: PUSH
53979: LD_INT 14
53981: PUSH
53982: LD_INT 15
53984: PUSH
53985: LD_INT 16
53987: PUSH
53988: LD_INT 17
53990: PUSH
53991: LD_INT 18
53993: PUSH
53994: LD_INT 19
53996: PUSH
53997: LD_INT 20
53999: PUSH
54000: LD_INT 21
54002: PUSH
54003: LD_INT 22
54005: PUSH
54006: LD_INT 23
54008: PUSH
54009: LD_INT 24
54011: PUSH
54012: LD_INT 25
54014: PUSH
54015: LD_INT 26
54017: PUSH
54018: LD_INT 27
54020: PUSH
54021: LD_INT 28
54023: PUSH
54024: LD_INT 29
54026: PUSH
54027: LD_INT 30
54029: PUSH
54030: LD_INT 31
54032: PUSH
54033: LD_INT 32
54035: PUSH
54036: LD_INT 33
54038: PUSH
54039: LD_INT 34
54041: PUSH
54042: LD_INT 36
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 101
54084: PUSH
54085: LD_INT 102
54087: PUSH
54088: LD_INT 103
54090: PUSH
54091: LD_INT 104
54093: PUSH
54094: LD_INT 105
54096: PUSH
54097: LD_INT 106
54099: PUSH
54100: LD_INT 107
54102: PUSH
54103: LD_INT 108
54105: PUSH
54106: LD_INT 109
54108: PUSH
54109: LD_INT 110
54111: PUSH
54112: LD_INT 111
54114: PUSH
54115: LD_INT 112
54117: PUSH
54118: LD_INT 113
54120: PUSH
54121: LD_INT 114
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: ST_TO_ADDR
54144: GO 54871
54146: LD_INT 16
54148: DOUBLE
54149: EQUAL
54150: IFTRUE 54154
54152: GO 54278
54154: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
54155: LD_ADDR_VAR 0 1
54159: PUSH
54160: LD_INT 2
54162: PUSH
54163: LD_INT 4
54165: PUSH
54166: LD_INT 5
54168: PUSH
54169: LD_INT 7
54171: PUSH
54172: LD_INT 11
54174: PUSH
54175: LD_INT 12
54177: PUSH
54178: LD_INT 15
54180: PUSH
54181: LD_INT 16
54183: PUSH
54184: LD_INT 20
54186: PUSH
54187: LD_INT 21
54189: PUSH
54190: LD_INT 22
54192: PUSH
54193: LD_INT 23
54195: PUSH
54196: LD_INT 25
54198: PUSH
54199: LD_INT 26
54201: PUSH
54202: LD_INT 30
54204: PUSH
54205: LD_INT 31
54207: PUSH
54208: LD_INT 32
54210: PUSH
54211: LD_INT 33
54213: PUSH
54214: LD_INT 34
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 101
54240: PUSH
54241: LD_INT 102
54243: PUSH
54244: LD_INT 103
54246: PUSH
54247: LD_INT 106
54249: PUSH
54250: LD_INT 108
54252: PUSH
54253: LD_INT 112
54255: PUSH
54256: LD_INT 113
54258: PUSH
54259: LD_INT 114
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: ST_TO_ADDR
54276: GO 54871
54278: LD_INT 17
54280: DOUBLE
54281: EQUAL
54282: IFTRUE 54286
54284: GO 54498
54286: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
54287: LD_ADDR_VAR 0 1
54291: PUSH
54292: LD_INT 1
54294: PUSH
54295: LD_INT 2
54297: PUSH
54298: LD_INT 3
54300: PUSH
54301: LD_INT 4
54303: PUSH
54304: LD_INT 5
54306: PUSH
54307: LD_INT 6
54309: PUSH
54310: LD_INT 7
54312: PUSH
54313: LD_INT 8
54315: PUSH
54316: LD_INT 9
54318: PUSH
54319: LD_INT 10
54321: PUSH
54322: LD_INT 11
54324: PUSH
54325: LD_INT 12
54327: PUSH
54328: LD_INT 13
54330: PUSH
54331: LD_INT 14
54333: PUSH
54334: LD_INT 15
54336: PUSH
54337: LD_INT 16
54339: PUSH
54340: LD_INT 17
54342: PUSH
54343: LD_INT 18
54345: PUSH
54346: LD_INT 19
54348: PUSH
54349: LD_INT 20
54351: PUSH
54352: LD_INT 21
54354: PUSH
54355: LD_INT 22
54357: PUSH
54358: LD_INT 23
54360: PUSH
54361: LD_INT 24
54363: PUSH
54364: LD_INT 25
54366: PUSH
54367: LD_INT 26
54369: PUSH
54370: LD_INT 27
54372: PUSH
54373: LD_INT 28
54375: PUSH
54376: LD_INT 29
54378: PUSH
54379: LD_INT 30
54381: PUSH
54382: LD_INT 31
54384: PUSH
54385: LD_INT 32
54387: PUSH
54388: LD_INT 33
54390: PUSH
54391: LD_INT 34
54393: PUSH
54394: LD_INT 36
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 101
54436: PUSH
54437: LD_INT 102
54439: PUSH
54440: LD_INT 103
54442: PUSH
54443: LD_INT 104
54445: PUSH
54446: LD_INT 105
54448: PUSH
54449: LD_INT 106
54451: PUSH
54452: LD_INT 107
54454: PUSH
54455: LD_INT 108
54457: PUSH
54458: LD_INT 109
54460: PUSH
54461: LD_INT 110
54463: PUSH
54464: LD_INT 111
54466: PUSH
54467: LD_INT 112
54469: PUSH
54470: LD_INT 113
54472: PUSH
54473: LD_INT 114
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: ST_TO_ADDR
54496: GO 54871
54498: LD_INT 18
54500: DOUBLE
54501: EQUAL
54502: IFTRUE 54506
54504: GO 54642
54506: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
54507: LD_ADDR_VAR 0 1
54511: PUSH
54512: LD_INT 2
54514: PUSH
54515: LD_INT 4
54517: PUSH
54518: LD_INT 5
54520: PUSH
54521: LD_INT 7
54523: PUSH
54524: LD_INT 11
54526: PUSH
54527: LD_INT 12
54529: PUSH
54530: LD_INT 15
54532: PUSH
54533: LD_INT 16
54535: PUSH
54536: LD_INT 20
54538: PUSH
54539: LD_INT 21
54541: PUSH
54542: LD_INT 22
54544: PUSH
54545: LD_INT 23
54547: PUSH
54548: LD_INT 25
54550: PUSH
54551: LD_INT 26
54553: PUSH
54554: LD_INT 30
54556: PUSH
54557: LD_INT 31
54559: PUSH
54560: LD_INT 32
54562: PUSH
54563: LD_INT 33
54565: PUSH
54566: LD_INT 34
54568: PUSH
54569: LD_INT 35
54571: PUSH
54572: LD_INT 36
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 101
54600: PUSH
54601: LD_INT 102
54603: PUSH
54604: LD_INT 103
54606: PUSH
54607: LD_INT 106
54609: PUSH
54610: LD_INT 108
54612: PUSH
54613: LD_INT 112
54615: PUSH
54616: LD_INT 113
54618: PUSH
54619: LD_INT 114
54621: PUSH
54622: LD_INT 115
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: ST_TO_ADDR
54640: GO 54871
54642: LD_INT 19
54644: DOUBLE
54645: EQUAL
54646: IFTRUE 54650
54648: GO 54870
54650: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
54651: LD_ADDR_VAR 0 1
54655: PUSH
54656: LD_INT 1
54658: PUSH
54659: LD_INT 2
54661: PUSH
54662: LD_INT 3
54664: PUSH
54665: LD_INT 4
54667: PUSH
54668: LD_INT 5
54670: PUSH
54671: LD_INT 6
54673: PUSH
54674: LD_INT 7
54676: PUSH
54677: LD_INT 8
54679: PUSH
54680: LD_INT 9
54682: PUSH
54683: LD_INT 10
54685: PUSH
54686: LD_INT 11
54688: PUSH
54689: LD_INT 12
54691: PUSH
54692: LD_INT 13
54694: PUSH
54695: LD_INT 14
54697: PUSH
54698: LD_INT 15
54700: PUSH
54701: LD_INT 16
54703: PUSH
54704: LD_INT 17
54706: PUSH
54707: LD_INT 18
54709: PUSH
54710: LD_INT 19
54712: PUSH
54713: LD_INT 20
54715: PUSH
54716: LD_INT 21
54718: PUSH
54719: LD_INT 22
54721: PUSH
54722: LD_INT 23
54724: PUSH
54725: LD_INT 24
54727: PUSH
54728: LD_INT 25
54730: PUSH
54731: LD_INT 26
54733: PUSH
54734: LD_INT 27
54736: PUSH
54737: LD_INT 28
54739: PUSH
54740: LD_INT 29
54742: PUSH
54743: LD_INT 30
54745: PUSH
54746: LD_INT 31
54748: PUSH
54749: LD_INT 32
54751: PUSH
54752: LD_INT 33
54754: PUSH
54755: LD_INT 34
54757: PUSH
54758: LD_INT 35
54760: PUSH
54761: LD_INT 36
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 101
54804: PUSH
54805: LD_INT 102
54807: PUSH
54808: LD_INT 103
54810: PUSH
54811: LD_INT 104
54813: PUSH
54814: LD_INT 105
54816: PUSH
54817: LD_INT 106
54819: PUSH
54820: LD_INT 107
54822: PUSH
54823: LD_INT 108
54825: PUSH
54826: LD_INT 109
54828: PUSH
54829: LD_INT 110
54831: PUSH
54832: LD_INT 111
54834: PUSH
54835: LD_INT 112
54837: PUSH
54838: LD_INT 113
54840: PUSH
54841: LD_INT 114
54843: PUSH
54844: LD_INT 115
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: ST_TO_ADDR
54868: GO 54871
54870: POP
// end else
54871: GO 55090
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
54873: LD_ADDR_VAR 0 1
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: LD_INT 2
54883: PUSH
54884: LD_INT 3
54886: PUSH
54887: LD_INT 4
54889: PUSH
54890: LD_INT 5
54892: PUSH
54893: LD_INT 6
54895: PUSH
54896: LD_INT 7
54898: PUSH
54899: LD_INT 8
54901: PUSH
54902: LD_INT 9
54904: PUSH
54905: LD_INT 10
54907: PUSH
54908: LD_INT 11
54910: PUSH
54911: LD_INT 12
54913: PUSH
54914: LD_INT 13
54916: PUSH
54917: LD_INT 14
54919: PUSH
54920: LD_INT 15
54922: PUSH
54923: LD_INT 16
54925: PUSH
54926: LD_INT 17
54928: PUSH
54929: LD_INT 18
54931: PUSH
54932: LD_INT 19
54934: PUSH
54935: LD_INT 20
54937: PUSH
54938: LD_INT 21
54940: PUSH
54941: LD_INT 22
54943: PUSH
54944: LD_INT 23
54946: PUSH
54947: LD_INT 24
54949: PUSH
54950: LD_INT 25
54952: PUSH
54953: LD_INT 26
54955: PUSH
54956: LD_INT 27
54958: PUSH
54959: LD_INT 28
54961: PUSH
54962: LD_INT 29
54964: PUSH
54965: LD_INT 30
54967: PUSH
54968: LD_INT 31
54970: PUSH
54971: LD_INT 32
54973: PUSH
54974: LD_INT 33
54976: PUSH
54977: LD_INT 34
54979: PUSH
54980: LD_INT 35
54982: PUSH
54983: LD_INT 36
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 101
55026: PUSH
55027: LD_INT 102
55029: PUSH
55030: LD_INT 103
55032: PUSH
55033: LD_INT 104
55035: PUSH
55036: LD_INT 105
55038: PUSH
55039: LD_INT 106
55041: PUSH
55042: LD_INT 107
55044: PUSH
55045: LD_INT 108
55047: PUSH
55048: LD_INT 109
55050: PUSH
55051: LD_INT 110
55053: PUSH
55054: LD_INT 111
55056: PUSH
55057: LD_INT 112
55059: PUSH
55060: LD_INT 113
55062: PUSH
55063: LD_INT 114
55065: PUSH
55066: LD_INT 115
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: ST_TO_ADDR
// if result then
55090: LD_VAR 0 1
55094: IFFALSE 55383
// begin normal :=  ;
55096: LD_ADDR_VAR 0 3
55100: PUSH
55101: LD_STRING 
55103: ST_TO_ADDR
// hardcore :=  ;
55104: LD_ADDR_VAR 0 4
55108: PUSH
55109: LD_STRING 
55111: ST_TO_ADDR
// for i = 1 to normalCounter do
55112: LD_ADDR_VAR 0 5
55116: PUSH
55117: DOUBLE
55118: LD_INT 1
55120: DEC
55121: ST_TO_ADDR
55122: LD_EXP 58
55126: PUSH
55127: FOR_TO
55128: IFFALSE 55229
// begin tmp := 0 ;
55130: LD_ADDR_VAR 0 2
55134: PUSH
55135: LD_STRING 0
55137: ST_TO_ADDR
// if result [ 1 ] then
55138: LD_VAR 0 1
55142: PUSH
55143: LD_INT 1
55145: ARRAY
55146: IFFALSE 55211
// if result [ 1 ] [ 1 ] = i then
55148: LD_VAR 0 1
55152: PUSH
55153: LD_INT 1
55155: ARRAY
55156: PUSH
55157: LD_INT 1
55159: ARRAY
55160: PUSH
55161: LD_VAR 0 5
55165: EQUAL
55166: IFFALSE 55211
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
55168: LD_ADDR_VAR 0 1
55172: PUSH
55173: LD_VAR 0 1
55177: PPUSH
55178: LD_INT 1
55180: PPUSH
55181: LD_VAR 0 1
55185: PUSH
55186: LD_INT 1
55188: ARRAY
55189: PPUSH
55190: LD_INT 1
55192: PPUSH
55193: CALL_OW 3
55197: PPUSH
55198: CALL_OW 1
55202: ST_TO_ADDR
// tmp := 1 ;
55203: LD_ADDR_VAR 0 2
55207: PUSH
55208: LD_STRING 1
55210: ST_TO_ADDR
// end ; normal := normal & tmp ;
55211: LD_ADDR_VAR 0 3
55215: PUSH
55216: LD_VAR 0 3
55220: PUSH
55221: LD_VAR 0 2
55225: STR
55226: ST_TO_ADDR
// end ;
55227: GO 55127
55229: POP
55230: POP
// for i = 1 to hardcoreCounter do
55231: LD_ADDR_VAR 0 5
55235: PUSH
55236: DOUBLE
55237: LD_INT 1
55239: DEC
55240: ST_TO_ADDR
55241: LD_EXP 59
55245: PUSH
55246: FOR_TO
55247: IFFALSE 55352
// begin tmp := 0 ;
55249: LD_ADDR_VAR 0 2
55253: PUSH
55254: LD_STRING 0
55256: ST_TO_ADDR
// if result [ 2 ] then
55257: LD_VAR 0 1
55261: PUSH
55262: LD_INT 2
55264: ARRAY
55265: IFFALSE 55334
// if result [ 2 ] [ 1 ] = 100 + i then
55267: LD_VAR 0 1
55271: PUSH
55272: LD_INT 2
55274: ARRAY
55275: PUSH
55276: LD_INT 1
55278: ARRAY
55279: PUSH
55280: LD_INT 100
55282: PUSH
55283: LD_VAR 0 5
55287: PLUS
55288: EQUAL
55289: IFFALSE 55334
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
55291: LD_ADDR_VAR 0 1
55295: PUSH
55296: LD_VAR 0 1
55300: PPUSH
55301: LD_INT 2
55303: PPUSH
55304: LD_VAR 0 1
55308: PUSH
55309: LD_INT 2
55311: ARRAY
55312: PPUSH
55313: LD_INT 1
55315: PPUSH
55316: CALL_OW 3
55320: PPUSH
55321: CALL_OW 1
55325: ST_TO_ADDR
// tmp := 1 ;
55326: LD_ADDR_VAR 0 2
55330: PUSH
55331: LD_STRING 1
55333: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
55334: LD_ADDR_VAR 0 4
55338: PUSH
55339: LD_VAR 0 4
55343: PUSH
55344: LD_VAR 0 2
55348: STR
55349: ST_TO_ADDR
// end ;
55350: GO 55246
55352: POP
55353: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
55354: LD_STRING getStreamItemsFromMission("
55356: PUSH
55357: LD_VAR 0 3
55361: STR
55362: PUSH
55363: LD_STRING ","
55365: STR
55366: PUSH
55367: LD_VAR 0 4
55371: STR
55372: PUSH
55373: LD_STRING ")
55375: STR
55376: PPUSH
55377: CALL_OW 559
// end else
55381: GO 55390
// ToLua ( getStreamItemsFromMission("","") ) ;
55383: LD_STRING getStreamItemsFromMission("","")
55385: PPUSH
55386: CALL_OW 559
// end ;
55390: LD_VAR 0 1
55394: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
55395: LD_EXP 57
55399: PUSH
55400: LD_EXP 62
55404: AND
55405: IFFALSE 55529
55407: GO 55409
55409: DISABLE
55410: LD_INT 0
55412: PPUSH
55413: PPUSH
// begin enable ;
55414: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
55415: LD_ADDR_VAR 0 2
55419: PUSH
55420: LD_INT 22
55422: PUSH
55423: LD_OWVAR 2
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 2
55434: PUSH
55435: LD_INT 34
55437: PUSH
55438: LD_INT 7
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 34
55447: PUSH
55448: LD_INT 45
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 34
55457: PUSH
55458: LD_INT 28
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 34
55467: PUSH
55468: LD_INT 47
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PPUSH
55486: CALL_OW 69
55490: ST_TO_ADDR
// if not tmp then
55491: LD_VAR 0 2
55495: NOT
55496: IFFALSE 55500
// exit ;
55498: GO 55529
// for i in tmp do
55500: LD_ADDR_VAR 0 1
55504: PUSH
55505: LD_VAR 0 2
55509: PUSH
55510: FOR_IN
55511: IFFALSE 55527
// begin SetLives ( i , 0 ) ;
55513: LD_VAR 0 1
55517: PPUSH
55518: LD_INT 0
55520: PPUSH
55521: CALL_OW 234
// end ;
55525: GO 55510
55527: POP
55528: POP
// end ;
55529: PPOPN 2
55531: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
55532: LD_EXP 57
55536: PUSH
55537: LD_EXP 63
55541: AND
55542: IFFALSE 55626
55544: GO 55546
55546: DISABLE
55547: LD_INT 0
55549: PPUSH
55550: PPUSH
// begin enable ;
55551: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
55552: LD_ADDR_VAR 0 2
55556: PUSH
55557: LD_INT 22
55559: PUSH
55560: LD_OWVAR 2
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 32
55571: PUSH
55572: LD_INT 3
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PPUSH
55583: CALL_OW 69
55587: ST_TO_ADDR
// if not tmp then
55588: LD_VAR 0 2
55592: NOT
55593: IFFALSE 55597
// exit ;
55595: GO 55626
// for i in tmp do
55597: LD_ADDR_VAR 0 1
55601: PUSH
55602: LD_VAR 0 2
55606: PUSH
55607: FOR_IN
55608: IFFALSE 55624
// begin SetLives ( i , 0 ) ;
55610: LD_VAR 0 1
55614: PPUSH
55615: LD_INT 0
55617: PPUSH
55618: CALL_OW 234
// end ;
55622: GO 55607
55624: POP
55625: POP
// end ;
55626: PPOPN 2
55628: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
55629: LD_EXP 57
55633: PUSH
55634: LD_EXP 60
55638: AND
55639: IFFALSE 55732
55641: GO 55643
55643: DISABLE
55644: LD_INT 0
55646: PPUSH
// begin enable ;
55647: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
55648: LD_ADDR_VAR 0 1
55652: PUSH
55653: LD_INT 22
55655: PUSH
55656: LD_OWVAR 2
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 2
55667: PUSH
55668: LD_INT 25
55670: PUSH
55671: LD_INT 5
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 25
55680: PUSH
55681: LD_INT 9
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 25
55690: PUSH
55691: LD_INT 8
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PPUSH
55708: CALL_OW 69
55712: PUSH
55713: FOR_IN
55714: IFFALSE 55730
// begin SetClass ( i , 1 ) ;
55716: LD_VAR 0 1
55720: PPUSH
55721: LD_INT 1
55723: PPUSH
55724: CALL_OW 336
// end ;
55728: GO 55713
55730: POP
55731: POP
// end ;
55732: PPOPN 1
55734: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
55735: LD_EXP 57
55739: PUSH
55740: LD_EXP 61
55744: AND
55745: PUSH
55746: LD_OWVAR 65
55750: PUSH
55751: LD_INT 7
55753: LESS
55754: AND
55755: IFFALSE 55769
55757: GO 55759
55759: DISABLE
// begin enable ;
55760: ENABLE
// game_speed := 7 ;
55761: LD_ADDR_OWVAR 65
55765: PUSH
55766: LD_INT 7
55768: ST_TO_ADDR
// end ;
55769: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
55770: LD_EXP 57
55774: PUSH
55775: LD_EXP 64
55779: AND
55780: IFFALSE 55982
55782: GO 55784
55784: DISABLE
55785: LD_INT 0
55787: PPUSH
55788: PPUSH
55789: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
55790: LD_ADDR_VAR 0 3
55794: PUSH
55795: LD_INT 81
55797: PUSH
55798: LD_OWVAR 2
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 21
55809: PUSH
55810: LD_INT 1
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PPUSH
55821: CALL_OW 69
55825: ST_TO_ADDR
// if not tmp then
55826: LD_VAR 0 3
55830: NOT
55831: IFFALSE 55835
// exit ;
55833: GO 55982
// if tmp > 5 then
55835: LD_VAR 0 3
55839: PUSH
55840: LD_INT 5
55842: GREATER
55843: IFFALSE 55855
// k := 5 else
55845: LD_ADDR_VAR 0 2
55849: PUSH
55850: LD_INT 5
55852: ST_TO_ADDR
55853: GO 55865
// k := tmp ;
55855: LD_ADDR_VAR 0 2
55859: PUSH
55860: LD_VAR 0 3
55864: ST_TO_ADDR
// for i := 1 to k do
55865: LD_ADDR_VAR 0 1
55869: PUSH
55870: DOUBLE
55871: LD_INT 1
55873: DEC
55874: ST_TO_ADDR
55875: LD_VAR 0 2
55879: PUSH
55880: FOR_TO
55881: IFFALSE 55980
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
55883: LD_VAR 0 3
55887: PUSH
55888: LD_VAR 0 1
55892: ARRAY
55893: PPUSH
55894: LD_VAR 0 1
55898: PUSH
55899: LD_INT 4
55901: MOD
55902: PUSH
55903: LD_INT 1
55905: PLUS
55906: PPUSH
55907: CALL_OW 259
55911: PUSH
55912: LD_INT 10
55914: LESS
55915: IFFALSE 55978
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
55917: LD_VAR 0 3
55921: PUSH
55922: LD_VAR 0 1
55926: ARRAY
55927: PPUSH
55928: LD_VAR 0 1
55932: PUSH
55933: LD_INT 4
55935: MOD
55936: PUSH
55937: LD_INT 1
55939: PLUS
55940: PPUSH
55941: LD_VAR 0 3
55945: PUSH
55946: LD_VAR 0 1
55950: ARRAY
55951: PPUSH
55952: LD_VAR 0 1
55956: PUSH
55957: LD_INT 4
55959: MOD
55960: PUSH
55961: LD_INT 1
55963: PLUS
55964: PPUSH
55965: CALL_OW 259
55969: PUSH
55970: LD_INT 1
55972: PLUS
55973: PPUSH
55974: CALL_OW 237
55978: GO 55880
55980: POP
55981: POP
// end ;
55982: PPOPN 3
55984: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
55985: LD_EXP 57
55989: PUSH
55990: LD_EXP 65
55994: AND
55995: IFFALSE 56015
55997: GO 55999
55999: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
56000: LD_INT 4
56002: PPUSH
56003: LD_OWVAR 2
56007: PPUSH
56008: LD_INT 0
56010: PPUSH
56011: CALL_OW 324
56015: END
// every 0 0$1 trigger StreamModeActive and sShovel do
56016: LD_EXP 57
56020: PUSH
56021: LD_EXP 94
56025: AND
56026: IFFALSE 56046
56028: GO 56030
56030: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
56031: LD_INT 19
56033: PPUSH
56034: LD_OWVAR 2
56038: PPUSH
56039: LD_INT 0
56041: PPUSH
56042: CALL_OW 324
56046: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
56047: LD_EXP 57
56051: PUSH
56052: LD_EXP 66
56056: AND
56057: IFFALSE 56159
56059: GO 56061
56061: DISABLE
56062: LD_INT 0
56064: PPUSH
56065: PPUSH
// begin enable ;
56066: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
56067: LD_ADDR_VAR 0 2
56071: PUSH
56072: LD_INT 22
56074: PUSH
56075: LD_OWVAR 2
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 2
56086: PUSH
56087: LD_INT 34
56089: PUSH
56090: LD_INT 11
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 34
56099: PUSH
56100: LD_INT 30
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: LIST
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PPUSH
56116: CALL_OW 69
56120: ST_TO_ADDR
// if not tmp then
56121: LD_VAR 0 2
56125: NOT
56126: IFFALSE 56130
// exit ;
56128: GO 56159
// for i in tmp do
56130: LD_ADDR_VAR 0 1
56134: PUSH
56135: LD_VAR 0 2
56139: PUSH
56140: FOR_IN
56141: IFFALSE 56157
// begin SetLives ( i , 0 ) ;
56143: LD_VAR 0 1
56147: PPUSH
56148: LD_INT 0
56150: PPUSH
56151: CALL_OW 234
// end ;
56155: GO 56140
56157: POP
56158: POP
// end ;
56159: PPOPN 2
56161: END
// every 0 0$1 trigger StreamModeActive and sBunker do
56162: LD_EXP 57
56166: PUSH
56167: LD_EXP 67
56171: AND
56172: IFFALSE 56192
56174: GO 56176
56176: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
56177: LD_INT 32
56179: PPUSH
56180: LD_OWVAR 2
56184: PPUSH
56185: LD_INT 0
56187: PPUSH
56188: CALL_OW 324
56192: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
56193: LD_EXP 57
56197: PUSH
56198: LD_EXP 68
56202: AND
56203: IFFALSE 56384
56205: GO 56207
56207: DISABLE
56208: LD_INT 0
56210: PPUSH
56211: PPUSH
56212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
56213: LD_ADDR_VAR 0 2
56217: PUSH
56218: LD_INT 22
56220: PUSH
56221: LD_OWVAR 2
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 33
56232: PUSH
56233: LD_INT 3
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PPUSH
56244: CALL_OW 69
56248: ST_TO_ADDR
// if not tmp then
56249: LD_VAR 0 2
56253: NOT
56254: IFFALSE 56258
// exit ;
56256: GO 56384
// side := 0 ;
56258: LD_ADDR_VAR 0 3
56262: PUSH
56263: LD_INT 0
56265: ST_TO_ADDR
// for i := 1 to 8 do
56266: LD_ADDR_VAR 0 1
56270: PUSH
56271: DOUBLE
56272: LD_INT 1
56274: DEC
56275: ST_TO_ADDR
56276: LD_INT 8
56278: PUSH
56279: FOR_TO
56280: IFFALSE 56328
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
56282: LD_OWVAR 2
56286: PUSH
56287: LD_VAR 0 1
56291: NONEQUAL
56292: PUSH
56293: LD_OWVAR 2
56297: PPUSH
56298: LD_VAR 0 1
56302: PPUSH
56303: CALL_OW 81
56307: PUSH
56308: LD_INT 2
56310: EQUAL
56311: AND
56312: IFFALSE 56326
// begin side := i ;
56314: LD_ADDR_VAR 0 3
56318: PUSH
56319: LD_VAR 0 1
56323: ST_TO_ADDR
// break ;
56324: GO 56328
// end ;
56326: GO 56279
56328: POP
56329: POP
// if not side then
56330: LD_VAR 0 3
56334: NOT
56335: IFFALSE 56339
// exit ;
56337: GO 56384
// for i := 1 to tmp do
56339: LD_ADDR_VAR 0 1
56343: PUSH
56344: DOUBLE
56345: LD_INT 1
56347: DEC
56348: ST_TO_ADDR
56349: LD_VAR 0 2
56353: PUSH
56354: FOR_TO
56355: IFFALSE 56382
// if Prob ( 60 ) then
56357: LD_INT 60
56359: PPUSH
56360: CALL_OW 13
56364: IFFALSE 56380
// SetSide ( i , side ) ;
56366: LD_VAR 0 1
56370: PPUSH
56371: LD_VAR 0 3
56375: PPUSH
56376: CALL_OW 235
56380: GO 56354
56382: POP
56383: POP
// end ;
56384: PPOPN 3
56386: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
56387: LD_EXP 57
56391: PUSH
56392: LD_EXP 70
56396: AND
56397: IFFALSE 56516
56399: GO 56401
56401: DISABLE
56402: LD_INT 0
56404: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
56405: LD_ADDR_VAR 0 1
56409: PUSH
56410: LD_INT 22
56412: PUSH
56413: LD_OWVAR 2
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 21
56424: PUSH
56425: LD_INT 1
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 3
56434: PUSH
56435: LD_INT 23
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: LIST
56453: PPUSH
56454: CALL_OW 69
56458: PUSH
56459: FOR_IN
56460: IFFALSE 56514
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
56462: LD_VAR 0 1
56466: PPUSH
56467: CALL_OW 257
56471: PUSH
56472: LD_INT 1
56474: PUSH
56475: LD_INT 2
56477: PUSH
56478: LD_INT 3
56480: PUSH
56481: LD_INT 4
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: IN
56490: IFFALSE 56512
// SetClass ( un , rand ( 1 , 4 ) ) ;
56492: LD_VAR 0 1
56496: PPUSH
56497: LD_INT 1
56499: PPUSH
56500: LD_INT 4
56502: PPUSH
56503: CALL_OW 12
56507: PPUSH
56508: CALL_OW 336
56512: GO 56459
56514: POP
56515: POP
// end ;
56516: PPOPN 1
56518: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
56519: LD_EXP 57
56523: PUSH
56524: LD_EXP 69
56528: AND
56529: IFFALSE 56608
56531: GO 56533
56533: DISABLE
56534: LD_INT 0
56536: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
56537: LD_ADDR_VAR 0 1
56541: PUSH
56542: LD_INT 22
56544: PUSH
56545: LD_OWVAR 2
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 21
56556: PUSH
56557: LD_INT 3
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PPUSH
56568: CALL_OW 69
56572: ST_TO_ADDR
// if not tmp then
56573: LD_VAR 0 1
56577: NOT
56578: IFFALSE 56582
// exit ;
56580: GO 56608
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
56582: LD_VAR 0 1
56586: PUSH
56587: LD_INT 1
56589: PPUSH
56590: LD_VAR 0 1
56594: PPUSH
56595: CALL_OW 12
56599: ARRAY
56600: PPUSH
56601: LD_INT 100
56603: PPUSH
56604: CALL_OW 234
// end ;
56608: PPOPN 1
56610: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
56611: LD_EXP 57
56615: PUSH
56616: LD_EXP 71
56620: AND
56621: IFFALSE 56719
56623: GO 56625
56625: DISABLE
56626: LD_INT 0
56628: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
56629: LD_ADDR_VAR 0 1
56633: PUSH
56634: LD_INT 22
56636: PUSH
56637: LD_OWVAR 2
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 21
56648: PUSH
56649: LD_INT 1
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PPUSH
56660: CALL_OW 69
56664: ST_TO_ADDR
// if not tmp then
56665: LD_VAR 0 1
56669: NOT
56670: IFFALSE 56674
// exit ;
56672: GO 56719
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
56674: LD_VAR 0 1
56678: PUSH
56679: LD_INT 1
56681: PPUSH
56682: LD_VAR 0 1
56686: PPUSH
56687: CALL_OW 12
56691: ARRAY
56692: PPUSH
56693: LD_INT 1
56695: PPUSH
56696: LD_INT 4
56698: PPUSH
56699: CALL_OW 12
56703: PPUSH
56704: LD_INT 3000
56706: PPUSH
56707: LD_INT 9000
56709: PPUSH
56710: CALL_OW 12
56714: PPUSH
56715: CALL_OW 492
// end ;
56719: PPOPN 1
56721: END
// every 0 0$1 trigger StreamModeActive and sDepot do
56722: LD_EXP 57
56726: PUSH
56727: LD_EXP 72
56731: AND
56732: IFFALSE 56752
56734: GO 56736
56736: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
56737: LD_INT 1
56739: PPUSH
56740: LD_OWVAR 2
56744: PPUSH
56745: LD_INT 0
56747: PPUSH
56748: CALL_OW 324
56752: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
56753: LD_EXP 57
56757: PUSH
56758: LD_EXP 73
56762: AND
56763: IFFALSE 56846
56765: GO 56767
56767: DISABLE
56768: LD_INT 0
56770: PPUSH
56771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
56772: LD_ADDR_VAR 0 2
56776: PUSH
56777: LD_INT 22
56779: PUSH
56780: LD_OWVAR 2
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 21
56791: PUSH
56792: LD_INT 3
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PPUSH
56803: CALL_OW 69
56807: ST_TO_ADDR
// if not tmp then
56808: LD_VAR 0 2
56812: NOT
56813: IFFALSE 56817
// exit ;
56815: GO 56846
// for i in tmp do
56817: LD_ADDR_VAR 0 1
56821: PUSH
56822: LD_VAR 0 2
56826: PUSH
56827: FOR_IN
56828: IFFALSE 56844
// SetBLevel ( i , 10 ) ;
56830: LD_VAR 0 1
56834: PPUSH
56835: LD_INT 10
56837: PPUSH
56838: CALL_OW 241
56842: GO 56827
56844: POP
56845: POP
// end ;
56846: PPOPN 2
56848: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
56849: LD_EXP 57
56853: PUSH
56854: LD_EXP 74
56858: AND
56859: IFFALSE 56970
56861: GO 56863
56863: DISABLE
56864: LD_INT 0
56866: PPUSH
56867: PPUSH
56868: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56869: LD_ADDR_VAR 0 3
56873: PUSH
56874: LD_INT 22
56876: PUSH
56877: LD_OWVAR 2
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 25
56888: PUSH
56889: LD_INT 1
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PPUSH
56900: CALL_OW 69
56904: ST_TO_ADDR
// if not tmp then
56905: LD_VAR 0 3
56909: NOT
56910: IFFALSE 56914
// exit ;
56912: GO 56970
// un := tmp [ rand ( 1 , tmp ) ] ;
56914: LD_ADDR_VAR 0 2
56918: PUSH
56919: LD_VAR 0 3
56923: PUSH
56924: LD_INT 1
56926: PPUSH
56927: LD_VAR 0 3
56931: PPUSH
56932: CALL_OW 12
56936: ARRAY
56937: ST_TO_ADDR
// if Crawls ( un ) then
56938: LD_VAR 0 2
56942: PPUSH
56943: CALL_OW 318
56947: IFFALSE 56958
// ComWalk ( un ) ;
56949: LD_VAR 0 2
56953: PPUSH
56954: CALL_OW 138
// SetClass ( un , class_sniper ) ;
56958: LD_VAR 0 2
56962: PPUSH
56963: LD_INT 5
56965: PPUSH
56966: CALL_OW 336
// end ;
56970: PPOPN 3
56972: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
56973: LD_EXP 57
56977: PUSH
56978: LD_EXP 75
56982: AND
56983: PUSH
56984: LD_OWVAR 67
56988: PUSH
56989: LD_INT 3
56991: LESS
56992: AND
56993: IFFALSE 57012
56995: GO 56997
56997: DISABLE
// Difficulty := Difficulty + 1 ;
56998: LD_ADDR_OWVAR 67
57002: PUSH
57003: LD_OWVAR 67
57007: PUSH
57008: LD_INT 1
57010: PLUS
57011: ST_TO_ADDR
57012: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
57013: LD_EXP 57
57017: PUSH
57018: LD_EXP 76
57022: AND
57023: IFFALSE 57126
57025: GO 57027
57027: DISABLE
57028: LD_INT 0
57030: PPUSH
// begin for i := 1 to 5 do
57031: LD_ADDR_VAR 0 1
57035: PUSH
57036: DOUBLE
57037: LD_INT 1
57039: DEC
57040: ST_TO_ADDR
57041: LD_INT 5
57043: PUSH
57044: FOR_TO
57045: IFFALSE 57124
// begin uc_nation := nation_nature ;
57047: LD_ADDR_OWVAR 21
57051: PUSH
57052: LD_INT 0
57054: ST_TO_ADDR
// uc_side := 0 ;
57055: LD_ADDR_OWVAR 20
57059: PUSH
57060: LD_INT 0
57062: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
57063: LD_ADDR_OWVAR 29
57067: PUSH
57068: LD_INT 12
57070: PUSH
57071: LD_INT 12
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: ST_TO_ADDR
// hc_agressivity := 20 ;
57078: LD_ADDR_OWVAR 35
57082: PUSH
57083: LD_INT 20
57085: ST_TO_ADDR
// hc_class := class_tiger ;
57086: LD_ADDR_OWVAR 28
57090: PUSH
57091: LD_INT 14
57093: ST_TO_ADDR
// hc_gallery :=  ;
57094: LD_ADDR_OWVAR 33
57098: PUSH
57099: LD_STRING 
57101: ST_TO_ADDR
// hc_name :=  ;
57102: LD_ADDR_OWVAR 26
57106: PUSH
57107: LD_STRING 
57109: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
57110: CALL_OW 44
57114: PPUSH
57115: LD_INT 0
57117: PPUSH
57118: CALL_OW 51
// end ;
57122: GO 57044
57124: POP
57125: POP
// end ;
57126: PPOPN 1
57128: END
// every 0 0$1 trigger StreamModeActive and sBomb do
57129: LD_EXP 57
57133: PUSH
57134: LD_EXP 77
57138: AND
57139: IFFALSE 57148
57141: GO 57143
57143: DISABLE
// StreamSibBomb ;
57144: CALL 57149 0 0
57148: END
// export function StreamSibBomb ; var i , x , y ; begin
57149: LD_INT 0
57151: PPUSH
57152: PPUSH
57153: PPUSH
57154: PPUSH
// result := false ;
57155: LD_ADDR_VAR 0 1
57159: PUSH
57160: LD_INT 0
57162: ST_TO_ADDR
// for i := 1 to 16 do
57163: LD_ADDR_VAR 0 2
57167: PUSH
57168: DOUBLE
57169: LD_INT 1
57171: DEC
57172: ST_TO_ADDR
57173: LD_INT 16
57175: PUSH
57176: FOR_TO
57177: IFFALSE 57376
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
57179: LD_ADDR_VAR 0 3
57183: PUSH
57184: LD_INT 10
57186: PUSH
57187: LD_INT 20
57189: PUSH
57190: LD_INT 30
57192: PUSH
57193: LD_INT 40
57195: PUSH
57196: LD_INT 50
57198: PUSH
57199: LD_INT 60
57201: PUSH
57202: LD_INT 70
57204: PUSH
57205: LD_INT 80
57207: PUSH
57208: LD_INT 90
57210: PUSH
57211: LD_INT 100
57213: PUSH
57214: LD_INT 110
57216: PUSH
57217: LD_INT 120
57219: PUSH
57220: LD_INT 130
57222: PUSH
57223: LD_INT 140
57225: PUSH
57226: LD_INT 150
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 1
57248: PPUSH
57249: LD_INT 15
57251: PPUSH
57252: CALL_OW 12
57256: ARRAY
57257: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
57258: LD_ADDR_VAR 0 4
57262: PUSH
57263: LD_INT 10
57265: PUSH
57266: LD_INT 20
57268: PUSH
57269: LD_INT 30
57271: PUSH
57272: LD_INT 40
57274: PUSH
57275: LD_INT 50
57277: PUSH
57278: LD_INT 60
57280: PUSH
57281: LD_INT 70
57283: PUSH
57284: LD_INT 80
57286: PUSH
57287: LD_INT 90
57289: PUSH
57290: LD_INT 100
57292: PUSH
57293: LD_INT 110
57295: PUSH
57296: LD_INT 120
57298: PUSH
57299: LD_INT 130
57301: PUSH
57302: LD_INT 140
57304: PUSH
57305: LD_INT 150
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 1
57327: PPUSH
57328: LD_INT 15
57330: PPUSH
57331: CALL_OW 12
57335: ARRAY
57336: ST_TO_ADDR
// if ValidHex ( x , y ) then
57337: LD_VAR 0 3
57341: PPUSH
57342: LD_VAR 0 4
57346: PPUSH
57347: CALL_OW 488
57351: IFFALSE 57374
// begin result := [ x , y ] ;
57353: LD_ADDR_VAR 0 1
57357: PUSH
57358: LD_VAR 0 3
57362: PUSH
57363: LD_VAR 0 4
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: ST_TO_ADDR
// break ;
57372: GO 57376
// end ; end ;
57374: GO 57176
57376: POP
57377: POP
// if result then
57378: LD_VAR 0 1
57382: IFFALSE 57442
// begin ToLua ( playSibBomb() ) ;
57384: LD_STRING playSibBomb()
57386: PPUSH
57387: CALL_OW 559
// wait ( 0 0$14 ) ;
57391: LD_INT 490
57393: PPUSH
57394: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
57398: LD_VAR 0 1
57402: PUSH
57403: LD_INT 1
57405: ARRAY
57406: PPUSH
57407: LD_VAR 0 1
57411: PUSH
57412: LD_INT 2
57414: ARRAY
57415: PPUSH
57416: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
57420: LD_VAR 0 1
57424: PUSH
57425: LD_INT 1
57427: ARRAY
57428: PPUSH
57429: LD_VAR 0 1
57433: PUSH
57434: LD_INT 2
57436: ARRAY
57437: PPUSH
57438: CALL_OW 429
// end ; end ;
57442: LD_VAR 0 1
57446: RET
// every 0 0$1 trigger StreamModeActive and sReset do
57447: LD_EXP 57
57451: PUSH
57452: LD_EXP 79
57456: AND
57457: IFFALSE 57469
57459: GO 57461
57461: DISABLE
// YouLost (  ) ;
57462: LD_STRING 
57464: PPUSH
57465: CALL_OW 104
57469: END
// every 0 0$1 trigger StreamModeActive and sFog do
57470: LD_EXP 57
57474: PUSH
57475: LD_EXP 78
57479: AND
57480: IFFALSE 57494
57482: GO 57484
57484: DISABLE
// FogOff ( your_side ) ;
57485: LD_OWVAR 2
57489: PPUSH
57490: CALL_OW 344
57494: END
// every 0 0$1 trigger StreamModeActive and sSun do
57495: LD_EXP 57
57499: PUSH
57500: LD_EXP 80
57504: AND
57505: IFFALSE 57533
57507: GO 57509
57509: DISABLE
// begin solar_recharge_percent := 0 ;
57510: LD_ADDR_OWVAR 79
57514: PUSH
57515: LD_INT 0
57517: ST_TO_ADDR
// wait ( 5 5$00 ) ;
57518: LD_INT 10500
57520: PPUSH
57521: CALL_OW 67
// solar_recharge_percent := 100 ;
57525: LD_ADDR_OWVAR 79
57529: PUSH
57530: LD_INT 100
57532: ST_TO_ADDR
// end ;
57533: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
57534: LD_EXP 57
57538: PUSH
57539: LD_EXP 81
57543: AND
57544: IFFALSE 57783
57546: GO 57548
57548: DISABLE
57549: LD_INT 0
57551: PPUSH
57552: PPUSH
57553: PPUSH
// begin tmp := [ ] ;
57554: LD_ADDR_VAR 0 3
57558: PUSH
57559: EMPTY
57560: ST_TO_ADDR
// for i := 1 to 6 do
57561: LD_ADDR_VAR 0 1
57565: PUSH
57566: DOUBLE
57567: LD_INT 1
57569: DEC
57570: ST_TO_ADDR
57571: LD_INT 6
57573: PUSH
57574: FOR_TO
57575: IFFALSE 57680
// begin uc_nation := nation_nature ;
57577: LD_ADDR_OWVAR 21
57581: PUSH
57582: LD_INT 0
57584: ST_TO_ADDR
// uc_side := 0 ;
57585: LD_ADDR_OWVAR 20
57589: PUSH
57590: LD_INT 0
57592: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
57593: LD_ADDR_OWVAR 29
57597: PUSH
57598: LD_INT 12
57600: PUSH
57601: LD_INT 12
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: ST_TO_ADDR
// hc_agressivity := 20 ;
57608: LD_ADDR_OWVAR 35
57612: PUSH
57613: LD_INT 20
57615: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
57616: LD_ADDR_OWVAR 28
57620: PUSH
57621: LD_INT 17
57623: ST_TO_ADDR
// hc_gallery :=  ;
57624: LD_ADDR_OWVAR 33
57628: PUSH
57629: LD_STRING 
57631: ST_TO_ADDR
// hc_name :=  ;
57632: LD_ADDR_OWVAR 26
57636: PUSH
57637: LD_STRING 
57639: ST_TO_ADDR
// un := CreateHuman ;
57640: LD_ADDR_VAR 0 2
57644: PUSH
57645: CALL_OW 44
57649: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
57650: LD_VAR 0 2
57654: PPUSH
57655: LD_INT 1
57657: PPUSH
57658: CALL_OW 51
// tmp := tmp ^ un ;
57662: LD_ADDR_VAR 0 3
57666: PUSH
57667: LD_VAR 0 3
57671: PUSH
57672: LD_VAR 0 2
57676: ADD
57677: ST_TO_ADDR
// end ;
57678: GO 57574
57680: POP
57681: POP
// repeat wait ( 0 0$1 ) ;
57682: LD_INT 35
57684: PPUSH
57685: CALL_OW 67
// for un in tmp do
57689: LD_ADDR_VAR 0 2
57693: PUSH
57694: LD_VAR 0 3
57698: PUSH
57699: FOR_IN
57700: IFFALSE 57774
// begin if IsDead ( un ) then
57702: LD_VAR 0 2
57706: PPUSH
57707: CALL_OW 301
57711: IFFALSE 57731
// begin tmp := tmp diff un ;
57713: LD_ADDR_VAR 0 3
57717: PUSH
57718: LD_VAR 0 3
57722: PUSH
57723: LD_VAR 0 2
57727: DIFF
57728: ST_TO_ADDR
// continue ;
57729: GO 57699
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
57731: LD_VAR 0 2
57735: PPUSH
57736: LD_INT 3
57738: PUSH
57739: LD_INT 22
57741: PUSH
57742: LD_INT 0
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PPUSH
57753: CALL_OW 69
57757: PPUSH
57758: LD_VAR 0 2
57762: PPUSH
57763: CALL_OW 74
57767: PPUSH
57768: CALL_OW 115
// end ;
57772: GO 57699
57774: POP
57775: POP
// until not tmp ;
57776: LD_VAR 0 3
57780: NOT
57781: IFFALSE 57682
// end ;
57783: PPOPN 3
57785: END
// every 0 0$1 trigger StreamModeActive and sTroll do
57786: LD_EXP 57
57790: PUSH
57791: LD_EXP 82
57795: AND
57796: IFFALSE 57850
57798: GO 57800
57800: DISABLE
// begin ToLua ( displayTroll(); ) ;
57801: LD_STRING displayTroll();
57803: PPUSH
57804: CALL_OW 559
// wait ( 3 3$00 ) ;
57808: LD_INT 6300
57810: PPUSH
57811: CALL_OW 67
// ToLua ( hideTroll(); ) ;
57815: LD_STRING hideTroll();
57817: PPUSH
57818: CALL_OW 559
// wait ( 1 1$00 ) ;
57822: LD_INT 2100
57824: PPUSH
57825: CALL_OW 67
// ToLua ( displayTroll(); ) ;
57829: LD_STRING displayTroll();
57831: PPUSH
57832: CALL_OW 559
// wait ( 1 1$00 ) ;
57836: LD_INT 2100
57838: PPUSH
57839: CALL_OW 67
// ToLua ( hideTroll(); ) ;
57843: LD_STRING hideTroll();
57845: PPUSH
57846: CALL_OW 559
// end ;
57850: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
57851: LD_EXP 57
57855: PUSH
57856: LD_EXP 83
57860: AND
57861: IFFALSE 57924
57863: GO 57865
57865: DISABLE
57866: LD_INT 0
57868: PPUSH
// begin p := 0 ;
57869: LD_ADDR_VAR 0 1
57873: PUSH
57874: LD_INT 0
57876: ST_TO_ADDR
// repeat game_speed := 1 ;
57877: LD_ADDR_OWVAR 65
57881: PUSH
57882: LD_INT 1
57884: ST_TO_ADDR
// wait ( 0 0$1 ) ;
57885: LD_INT 35
57887: PPUSH
57888: CALL_OW 67
// p := p + 1 ;
57892: LD_ADDR_VAR 0 1
57896: PUSH
57897: LD_VAR 0 1
57901: PUSH
57902: LD_INT 1
57904: PLUS
57905: ST_TO_ADDR
// until p >= 60 ;
57906: LD_VAR 0 1
57910: PUSH
57911: LD_INT 60
57913: GREATEREQUAL
57914: IFFALSE 57877
// game_speed := 4 ;
57916: LD_ADDR_OWVAR 65
57920: PUSH
57921: LD_INT 4
57923: ST_TO_ADDR
// end ;
57924: PPOPN 1
57926: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
57927: LD_EXP 57
57931: PUSH
57932: LD_EXP 84
57936: AND
57937: IFFALSE 58083
57939: GO 57941
57941: DISABLE
57942: LD_INT 0
57944: PPUSH
57945: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57946: LD_ADDR_VAR 0 1
57950: PUSH
57951: LD_INT 22
57953: PUSH
57954: LD_OWVAR 2
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 2
57965: PUSH
57966: LD_INT 30
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 30
57978: PUSH
57979: LD_INT 1
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: LIST
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PPUSH
57995: CALL_OW 69
57999: ST_TO_ADDR
// if not depot then
58000: LD_VAR 0 1
58004: NOT
58005: IFFALSE 58009
// exit ;
58007: GO 58083
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
58009: LD_ADDR_VAR 0 2
58013: PUSH
58014: LD_VAR 0 1
58018: PUSH
58019: LD_INT 1
58021: PPUSH
58022: LD_VAR 0 1
58026: PPUSH
58027: CALL_OW 12
58031: ARRAY
58032: PPUSH
58033: CALL_OW 274
58037: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
58038: LD_VAR 0 2
58042: PPUSH
58043: LD_INT 1
58045: PPUSH
58046: LD_INT 0
58048: PPUSH
58049: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
58053: LD_VAR 0 2
58057: PPUSH
58058: LD_INT 2
58060: PPUSH
58061: LD_INT 0
58063: PPUSH
58064: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
58068: LD_VAR 0 2
58072: PPUSH
58073: LD_INT 3
58075: PPUSH
58076: LD_INT 0
58078: PPUSH
58079: CALL_OW 277
// end ;
58083: PPOPN 2
58085: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
58086: LD_EXP 57
58090: PUSH
58091: LD_EXP 85
58095: AND
58096: IFFALSE 58193
58098: GO 58100
58100: DISABLE
58101: LD_INT 0
58103: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58104: LD_ADDR_VAR 0 1
58108: PUSH
58109: LD_INT 22
58111: PUSH
58112: LD_OWVAR 2
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 21
58123: PUSH
58124: LD_INT 1
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 3
58133: PUSH
58134: LD_INT 23
58136: PUSH
58137: LD_INT 0
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: LIST
58152: PPUSH
58153: CALL_OW 69
58157: ST_TO_ADDR
// if not tmp then
58158: LD_VAR 0 1
58162: NOT
58163: IFFALSE 58167
// exit ;
58165: GO 58193
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
58167: LD_VAR 0 1
58171: PUSH
58172: LD_INT 1
58174: PPUSH
58175: LD_VAR 0 1
58179: PPUSH
58180: CALL_OW 12
58184: ARRAY
58185: PPUSH
58186: LD_INT 200
58188: PPUSH
58189: CALL_OW 234
// end ;
58193: PPOPN 1
58195: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
58196: LD_EXP 57
58200: PUSH
58201: LD_EXP 86
58205: AND
58206: IFFALSE 58285
58208: GO 58210
58210: DISABLE
58211: LD_INT 0
58213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
58214: LD_ADDR_VAR 0 1
58218: PUSH
58219: LD_INT 22
58221: PUSH
58222: LD_OWVAR 2
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 21
58233: PUSH
58234: LD_INT 2
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PPUSH
58245: CALL_OW 69
58249: ST_TO_ADDR
// if not tmp then
58250: LD_VAR 0 1
58254: NOT
58255: IFFALSE 58259
// exit ;
58257: GO 58285
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
58259: LD_VAR 0 1
58263: PUSH
58264: LD_INT 1
58266: PPUSH
58267: LD_VAR 0 1
58271: PPUSH
58272: CALL_OW 12
58276: ARRAY
58277: PPUSH
58278: LD_INT 60
58280: PPUSH
58281: CALL_OW 234
// end ;
58285: PPOPN 1
58287: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
58288: LD_EXP 57
58292: PUSH
58293: LD_EXP 87
58297: AND
58298: IFFALSE 58397
58300: GO 58302
58302: DISABLE
58303: LD_INT 0
58305: PPUSH
58306: PPUSH
// begin enable ;
58307: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
58308: LD_ADDR_VAR 0 1
58312: PUSH
58313: LD_INT 22
58315: PUSH
58316: LD_OWVAR 2
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 61
58327: PUSH
58328: EMPTY
58329: LIST
58330: PUSH
58331: LD_INT 33
58333: PUSH
58334: LD_INT 2
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: LIST
58345: PPUSH
58346: CALL_OW 69
58350: ST_TO_ADDR
// if not tmp then
58351: LD_VAR 0 1
58355: NOT
58356: IFFALSE 58360
// exit ;
58358: GO 58397
// for i in tmp do
58360: LD_ADDR_VAR 0 2
58364: PUSH
58365: LD_VAR 0 1
58369: PUSH
58370: FOR_IN
58371: IFFALSE 58395
// if IsControledBy ( i ) then
58373: LD_VAR 0 2
58377: PPUSH
58378: CALL_OW 312
58382: IFFALSE 58393
// ComUnlink ( i ) ;
58384: LD_VAR 0 2
58388: PPUSH
58389: CALL_OW 136
58393: GO 58370
58395: POP
58396: POP
// end ;
58397: PPOPN 2
58399: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
58400: LD_EXP 57
58404: PUSH
58405: LD_EXP 88
58409: AND
58410: IFFALSE 58550
58412: GO 58414
58414: DISABLE
58415: LD_INT 0
58417: PPUSH
58418: PPUSH
// begin ToLua ( displayPowell(); ) ;
58419: LD_STRING displayPowell();
58421: PPUSH
58422: CALL_OW 559
// uc_side := 0 ;
58426: LD_ADDR_OWVAR 20
58430: PUSH
58431: LD_INT 0
58433: ST_TO_ADDR
// uc_nation := 2 ;
58434: LD_ADDR_OWVAR 21
58438: PUSH
58439: LD_INT 2
58441: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
58442: LD_ADDR_OWVAR 37
58446: PUSH
58447: LD_INT 14
58449: ST_TO_ADDR
// vc_engine := engine_siberite ;
58450: LD_ADDR_OWVAR 39
58454: PUSH
58455: LD_INT 3
58457: ST_TO_ADDR
// vc_control := control_apeman ;
58458: LD_ADDR_OWVAR 38
58462: PUSH
58463: LD_INT 5
58465: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
58466: LD_ADDR_OWVAR 40
58470: PUSH
58471: LD_INT 29
58473: ST_TO_ADDR
// un := CreateVehicle ;
58474: LD_ADDR_VAR 0 2
58478: PUSH
58479: CALL_OW 45
58483: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58484: LD_VAR 0 2
58488: PPUSH
58489: LD_INT 1
58491: PPUSH
58492: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
58496: LD_INT 35
58498: PPUSH
58499: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
58503: LD_VAR 0 2
58507: PPUSH
58508: LD_INT 22
58510: PUSH
58511: LD_OWVAR 2
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PPUSH
58520: CALL_OW 69
58524: PPUSH
58525: LD_VAR 0 2
58529: PPUSH
58530: CALL_OW 74
58534: PPUSH
58535: CALL_OW 115
// until IsDead ( un ) ;
58539: LD_VAR 0 2
58543: PPUSH
58544: CALL_OW 301
58548: IFFALSE 58496
// end ;
58550: PPOPN 2
58552: END
// every 0 0$1 trigger StreamModeActive and sStu do
58553: LD_EXP 57
58557: PUSH
58558: LD_EXP 96
58562: AND
58563: IFFALSE 58579
58565: GO 58567
58567: DISABLE
// begin ToLua ( displayStucuk(); ) ;
58568: LD_STRING displayStucuk();
58570: PPUSH
58571: CALL_OW 559
// ResetFog ;
58575: CALL_OW 335
// end ;
58579: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
58580: LD_EXP 57
58584: PUSH
58585: LD_EXP 89
58589: AND
58590: IFFALSE 58731
58592: GO 58594
58594: DISABLE
58595: LD_INT 0
58597: PPUSH
58598: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
58599: LD_ADDR_VAR 0 2
58603: PUSH
58604: LD_INT 22
58606: PUSH
58607: LD_OWVAR 2
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 21
58618: PUSH
58619: LD_INT 1
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PPUSH
58630: CALL_OW 69
58634: ST_TO_ADDR
// if not tmp then
58635: LD_VAR 0 2
58639: NOT
58640: IFFALSE 58644
// exit ;
58642: GO 58731
// un := tmp [ rand ( 1 , tmp ) ] ;
58644: LD_ADDR_VAR 0 1
58648: PUSH
58649: LD_VAR 0 2
58653: PUSH
58654: LD_INT 1
58656: PPUSH
58657: LD_VAR 0 2
58661: PPUSH
58662: CALL_OW 12
58666: ARRAY
58667: ST_TO_ADDR
// SetSide ( un , 0 ) ;
58668: LD_VAR 0 1
58672: PPUSH
58673: LD_INT 0
58675: PPUSH
58676: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
58680: LD_VAR 0 1
58684: PPUSH
58685: LD_OWVAR 3
58689: PUSH
58690: LD_VAR 0 1
58694: DIFF
58695: PPUSH
58696: LD_VAR 0 1
58700: PPUSH
58701: CALL_OW 74
58705: PPUSH
58706: CALL_OW 115
// wait ( 0 0$20 ) ;
58710: LD_INT 700
58712: PPUSH
58713: CALL_OW 67
// SetSide ( un , your_side ) ;
58717: LD_VAR 0 1
58721: PPUSH
58722: LD_OWVAR 2
58726: PPUSH
58727: CALL_OW 235
// end ;
58731: PPOPN 2
58733: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
58734: LD_EXP 57
58738: PUSH
58739: LD_EXP 90
58743: AND
58744: IFFALSE 58850
58746: GO 58748
58748: DISABLE
58749: LD_INT 0
58751: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58752: LD_ADDR_VAR 0 1
58756: PUSH
58757: LD_INT 22
58759: PUSH
58760: LD_OWVAR 2
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 2
58771: PUSH
58772: LD_INT 30
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 30
58784: PUSH
58785: LD_INT 1
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: LIST
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PPUSH
58801: CALL_OW 69
58805: ST_TO_ADDR
// if not depot then
58806: LD_VAR 0 1
58810: NOT
58811: IFFALSE 58815
// exit ;
58813: GO 58850
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
58815: LD_VAR 0 1
58819: PUSH
58820: LD_INT 1
58822: ARRAY
58823: PPUSH
58824: CALL_OW 250
58828: PPUSH
58829: LD_VAR 0 1
58833: PUSH
58834: LD_INT 1
58836: ARRAY
58837: PPUSH
58838: CALL_OW 251
58842: PPUSH
58843: LD_INT 70
58845: PPUSH
58846: CALL_OW 495
// end ;
58850: PPOPN 1
58852: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
58853: LD_EXP 57
58857: PUSH
58858: LD_EXP 91
58862: AND
58863: IFFALSE 59074
58865: GO 58867
58867: DISABLE
58868: LD_INT 0
58870: PPUSH
58871: PPUSH
58872: PPUSH
58873: PPUSH
58874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
58875: LD_ADDR_VAR 0 5
58879: PUSH
58880: LD_INT 22
58882: PUSH
58883: LD_OWVAR 2
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 21
58894: PUSH
58895: LD_INT 1
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PPUSH
58906: CALL_OW 69
58910: ST_TO_ADDR
// if not tmp then
58911: LD_VAR 0 5
58915: NOT
58916: IFFALSE 58920
// exit ;
58918: GO 59074
// for i in tmp do
58920: LD_ADDR_VAR 0 1
58924: PUSH
58925: LD_VAR 0 5
58929: PUSH
58930: FOR_IN
58931: IFFALSE 59072
// begin d := rand ( 0 , 5 ) ;
58933: LD_ADDR_VAR 0 4
58937: PUSH
58938: LD_INT 0
58940: PPUSH
58941: LD_INT 5
58943: PPUSH
58944: CALL_OW 12
58948: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
58949: LD_ADDR_VAR 0 2
58953: PUSH
58954: LD_VAR 0 1
58958: PPUSH
58959: CALL_OW 250
58963: PPUSH
58964: LD_VAR 0 4
58968: PPUSH
58969: LD_INT 3
58971: PPUSH
58972: LD_INT 12
58974: PPUSH
58975: CALL_OW 12
58979: PPUSH
58980: CALL_OW 272
58984: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
58985: LD_ADDR_VAR 0 3
58989: PUSH
58990: LD_VAR 0 1
58994: PPUSH
58995: CALL_OW 251
58999: PPUSH
59000: LD_VAR 0 4
59004: PPUSH
59005: LD_INT 3
59007: PPUSH
59008: LD_INT 12
59010: PPUSH
59011: CALL_OW 12
59015: PPUSH
59016: CALL_OW 273
59020: ST_TO_ADDR
// if ValidHex ( x , y ) then
59021: LD_VAR 0 2
59025: PPUSH
59026: LD_VAR 0 3
59030: PPUSH
59031: CALL_OW 488
59035: IFFALSE 59070
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
59037: LD_VAR 0 1
59041: PPUSH
59042: LD_VAR 0 2
59046: PPUSH
59047: LD_VAR 0 3
59051: PPUSH
59052: LD_INT 3
59054: PPUSH
59055: LD_INT 6
59057: PPUSH
59058: CALL_OW 12
59062: PPUSH
59063: LD_INT 1
59065: PPUSH
59066: CALL_OW 483
// end ;
59070: GO 58930
59072: POP
59073: POP
// end ;
59074: PPOPN 5
59076: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
59077: LD_EXP 57
59081: PUSH
59082: LD_EXP 92
59086: AND
59087: IFFALSE 59181
59089: GO 59091
59091: DISABLE
59092: LD_INT 0
59094: PPUSH
59095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
59096: LD_ADDR_VAR 0 2
59100: PUSH
59101: LD_INT 22
59103: PUSH
59104: LD_OWVAR 2
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 32
59115: PUSH
59116: LD_INT 1
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 21
59125: PUSH
59126: LD_INT 2
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: LIST
59137: PPUSH
59138: CALL_OW 69
59142: ST_TO_ADDR
// if not tmp then
59143: LD_VAR 0 2
59147: NOT
59148: IFFALSE 59152
// exit ;
59150: GO 59181
// for i in tmp do
59152: LD_ADDR_VAR 0 1
59156: PUSH
59157: LD_VAR 0 2
59161: PUSH
59162: FOR_IN
59163: IFFALSE 59179
// SetFuel ( i , 0 ) ;
59165: LD_VAR 0 1
59169: PPUSH
59170: LD_INT 0
59172: PPUSH
59173: CALL_OW 240
59177: GO 59162
59179: POP
59180: POP
// end ;
59181: PPOPN 2
59183: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
59184: LD_EXP 57
59188: PUSH
59189: LD_EXP 93
59193: AND
59194: IFFALSE 59260
59196: GO 59198
59198: DISABLE
59199: LD_INT 0
59201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
59202: LD_ADDR_VAR 0 1
59206: PUSH
59207: LD_INT 22
59209: PUSH
59210: LD_OWVAR 2
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 30
59221: PUSH
59222: LD_INT 29
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PPUSH
59233: CALL_OW 69
59237: ST_TO_ADDR
// if not tmp then
59238: LD_VAR 0 1
59242: NOT
59243: IFFALSE 59247
// exit ;
59245: GO 59260
// DestroyUnit ( tmp [ 1 ] ) ;
59247: LD_VAR 0 1
59251: PUSH
59252: LD_INT 1
59254: ARRAY
59255: PPUSH
59256: CALL_OW 65
// end ;
59260: PPOPN 1
59262: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
59263: LD_EXP 57
59267: PUSH
59268: LD_EXP 95
59272: AND
59273: IFFALSE 59402
59275: GO 59277
59277: DISABLE
59278: LD_INT 0
59280: PPUSH
// begin uc_side := 0 ;
59281: LD_ADDR_OWVAR 20
59285: PUSH
59286: LD_INT 0
59288: ST_TO_ADDR
// uc_nation := nation_arabian ;
59289: LD_ADDR_OWVAR 21
59293: PUSH
59294: LD_INT 2
59296: ST_TO_ADDR
// hc_gallery :=  ;
59297: LD_ADDR_OWVAR 33
59301: PUSH
59302: LD_STRING 
59304: ST_TO_ADDR
// hc_name :=  ;
59305: LD_ADDR_OWVAR 26
59309: PUSH
59310: LD_STRING 
59312: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
59313: LD_INT 1
59315: PPUSH
59316: LD_INT 11
59318: PPUSH
59319: LD_INT 10
59321: PPUSH
59322: CALL_OW 380
// un := CreateHuman ;
59326: LD_ADDR_VAR 0 1
59330: PUSH
59331: CALL_OW 44
59335: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59336: LD_VAR 0 1
59340: PPUSH
59341: LD_INT 1
59343: PPUSH
59344: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
59348: LD_INT 35
59350: PPUSH
59351: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
59355: LD_VAR 0 1
59359: PPUSH
59360: LD_INT 22
59362: PUSH
59363: LD_OWVAR 2
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PPUSH
59372: CALL_OW 69
59376: PPUSH
59377: LD_VAR 0 1
59381: PPUSH
59382: CALL_OW 74
59386: PPUSH
59387: CALL_OW 115
// until IsDead ( un ) ;
59391: LD_VAR 0 1
59395: PPUSH
59396: CALL_OW 301
59400: IFFALSE 59348
// end ;
59402: PPOPN 1
59404: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
59405: LD_EXP 57
59409: PUSH
59410: LD_EXP 97
59414: AND
59415: IFFALSE 59427
59417: GO 59419
59419: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
59420: LD_STRING earthquake(getX(game), 0, 32)
59422: PPUSH
59423: CALL_OW 559
59427: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
59428: LD_EXP 57
59432: PUSH
59433: LD_EXP 98
59437: AND
59438: IFFALSE 59529
59440: GO 59442
59442: DISABLE
59443: LD_INT 0
59445: PPUSH
// begin enable ;
59446: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
59447: LD_ADDR_VAR 0 1
59451: PUSH
59452: LD_INT 22
59454: PUSH
59455: LD_OWVAR 2
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 21
59466: PUSH
59467: LD_INT 2
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 33
59476: PUSH
59477: LD_INT 3
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: LIST
59488: PPUSH
59489: CALL_OW 69
59493: ST_TO_ADDR
// if not tmp then
59494: LD_VAR 0 1
59498: NOT
59499: IFFALSE 59503
// exit ;
59501: GO 59529
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
59503: LD_VAR 0 1
59507: PUSH
59508: LD_INT 1
59510: PPUSH
59511: LD_VAR 0 1
59515: PPUSH
59516: CALL_OW 12
59520: ARRAY
59521: PPUSH
59522: LD_INT 1
59524: PPUSH
59525: CALL_OW 234
// end ;
59529: PPOPN 1
59531: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
59532: LD_EXP 57
59536: PUSH
59537: LD_EXP 99
59541: AND
59542: IFFALSE 59683
59544: GO 59546
59546: DISABLE
59547: LD_INT 0
59549: PPUSH
59550: PPUSH
59551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59552: LD_ADDR_VAR 0 3
59556: PUSH
59557: LD_INT 22
59559: PUSH
59560: LD_OWVAR 2
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 25
59571: PUSH
59572: LD_INT 1
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PPUSH
59583: CALL_OW 69
59587: ST_TO_ADDR
// if not tmp then
59588: LD_VAR 0 3
59592: NOT
59593: IFFALSE 59597
// exit ;
59595: GO 59683
// un := tmp [ rand ( 1 , tmp ) ] ;
59597: LD_ADDR_VAR 0 2
59601: PUSH
59602: LD_VAR 0 3
59606: PUSH
59607: LD_INT 1
59609: PPUSH
59610: LD_VAR 0 3
59614: PPUSH
59615: CALL_OW 12
59619: ARRAY
59620: ST_TO_ADDR
// if Crawls ( un ) then
59621: LD_VAR 0 2
59625: PPUSH
59626: CALL_OW 318
59630: IFFALSE 59641
// ComWalk ( un ) ;
59632: LD_VAR 0 2
59636: PPUSH
59637: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
59641: LD_VAR 0 2
59645: PPUSH
59646: LD_INT 9
59648: PPUSH
59649: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
59653: LD_INT 28
59655: PPUSH
59656: LD_OWVAR 2
59660: PPUSH
59661: LD_INT 2
59663: PPUSH
59664: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
59668: LD_INT 29
59670: PPUSH
59671: LD_OWVAR 2
59675: PPUSH
59676: LD_INT 2
59678: PPUSH
59679: CALL_OW 322
// end ;
59683: PPOPN 3
59685: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
59686: LD_EXP 57
59690: PUSH
59691: LD_EXP 100
59695: AND
59696: IFFALSE 59807
59698: GO 59700
59700: DISABLE
59701: LD_INT 0
59703: PPUSH
59704: PPUSH
59705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59706: LD_ADDR_VAR 0 3
59710: PUSH
59711: LD_INT 22
59713: PUSH
59714: LD_OWVAR 2
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 25
59725: PUSH
59726: LD_INT 1
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PPUSH
59737: CALL_OW 69
59741: ST_TO_ADDR
// if not tmp then
59742: LD_VAR 0 3
59746: NOT
59747: IFFALSE 59751
// exit ;
59749: GO 59807
// un := tmp [ rand ( 1 , tmp ) ] ;
59751: LD_ADDR_VAR 0 2
59755: PUSH
59756: LD_VAR 0 3
59760: PUSH
59761: LD_INT 1
59763: PPUSH
59764: LD_VAR 0 3
59768: PPUSH
59769: CALL_OW 12
59773: ARRAY
59774: ST_TO_ADDR
// if Crawls ( un ) then
59775: LD_VAR 0 2
59779: PPUSH
59780: CALL_OW 318
59784: IFFALSE 59795
// ComWalk ( un ) ;
59786: LD_VAR 0 2
59790: PPUSH
59791: CALL_OW 138
// SetClass ( un , class_mortar ) ;
59795: LD_VAR 0 2
59799: PPUSH
59800: LD_INT 8
59802: PPUSH
59803: CALL_OW 336
// end ;
59807: PPOPN 3
59809: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
59810: LD_EXP 57
59814: PUSH
59815: LD_EXP 101
59819: AND
59820: IFFALSE 59964
59822: GO 59824
59824: DISABLE
59825: LD_INT 0
59827: PPUSH
59828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
59829: LD_ADDR_VAR 0 2
59833: PUSH
59834: LD_INT 22
59836: PUSH
59837: LD_OWVAR 2
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 21
59848: PUSH
59849: LD_INT 2
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 2
59858: PUSH
59859: LD_INT 34
59861: PUSH
59862: LD_INT 12
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 34
59871: PUSH
59872: LD_INT 51
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 34
59881: PUSH
59882: LD_INT 32
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: LIST
59899: PPUSH
59900: CALL_OW 69
59904: ST_TO_ADDR
// if not tmp then
59905: LD_VAR 0 2
59909: NOT
59910: IFFALSE 59914
// exit ;
59912: GO 59964
// for i in tmp do
59914: LD_ADDR_VAR 0 1
59918: PUSH
59919: LD_VAR 0 2
59923: PUSH
59924: FOR_IN
59925: IFFALSE 59962
// if GetCargo ( i , mat_artifact ) = 0 then
59927: LD_VAR 0 1
59931: PPUSH
59932: LD_INT 4
59934: PPUSH
59935: CALL_OW 289
59939: PUSH
59940: LD_INT 0
59942: EQUAL
59943: IFFALSE 59960
// SetCargo ( i , mat_siberit , 100 ) ;
59945: LD_VAR 0 1
59949: PPUSH
59950: LD_INT 3
59952: PPUSH
59953: LD_INT 100
59955: PPUSH
59956: CALL_OW 290
59960: GO 59924
59962: POP
59963: POP
// end ;
59964: PPOPN 2
59966: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
59967: LD_EXP 57
59971: PUSH
59972: LD_EXP 102
59976: AND
59977: IFFALSE 60160
59979: GO 59981
59981: DISABLE
59982: LD_INT 0
59984: PPUSH
59985: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59986: LD_ADDR_VAR 0 2
59990: PUSH
59991: LD_INT 22
59993: PUSH
59994: LD_OWVAR 2
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PPUSH
60003: CALL_OW 69
60007: ST_TO_ADDR
// if not tmp then
60008: LD_VAR 0 2
60012: NOT
60013: IFFALSE 60017
// exit ;
60015: GO 60160
// for i := 1 to 2 do
60017: LD_ADDR_VAR 0 1
60021: PUSH
60022: DOUBLE
60023: LD_INT 1
60025: DEC
60026: ST_TO_ADDR
60027: LD_INT 2
60029: PUSH
60030: FOR_TO
60031: IFFALSE 60158
// begin uc_side := your_side ;
60033: LD_ADDR_OWVAR 20
60037: PUSH
60038: LD_OWVAR 2
60042: ST_TO_ADDR
// uc_nation := nation_american ;
60043: LD_ADDR_OWVAR 21
60047: PUSH
60048: LD_INT 1
60050: ST_TO_ADDR
// vc_chassis := us_morphling ;
60051: LD_ADDR_OWVAR 37
60055: PUSH
60056: LD_INT 5
60058: ST_TO_ADDR
// vc_engine := engine_siberite ;
60059: LD_ADDR_OWVAR 39
60063: PUSH
60064: LD_INT 3
60066: ST_TO_ADDR
// vc_control := control_computer ;
60067: LD_ADDR_OWVAR 38
60071: PUSH
60072: LD_INT 3
60074: ST_TO_ADDR
// vc_weapon := us_double_laser ;
60075: LD_ADDR_OWVAR 40
60079: PUSH
60080: LD_INT 10
60082: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
60083: LD_VAR 0 2
60087: PUSH
60088: LD_INT 1
60090: ARRAY
60091: PPUSH
60092: CALL_OW 310
60096: NOT
60097: IFFALSE 60144
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
60099: CALL_OW 45
60103: PPUSH
60104: LD_VAR 0 2
60108: PUSH
60109: LD_INT 1
60111: ARRAY
60112: PPUSH
60113: CALL_OW 250
60117: PPUSH
60118: LD_VAR 0 2
60122: PUSH
60123: LD_INT 1
60125: ARRAY
60126: PPUSH
60127: CALL_OW 251
60131: PPUSH
60132: LD_INT 12
60134: PPUSH
60135: LD_INT 1
60137: PPUSH
60138: CALL_OW 50
60142: GO 60156
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
60144: CALL_OW 45
60148: PPUSH
60149: LD_INT 1
60151: PPUSH
60152: CALL_OW 51
// end ;
60156: GO 60030
60158: POP
60159: POP
// end ;
60160: PPOPN 2
60162: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
60163: LD_EXP 57
60167: PUSH
60168: LD_EXP 103
60172: AND
60173: IFFALSE 60395
60175: GO 60177
60177: DISABLE
60178: LD_INT 0
60180: PPUSH
60181: PPUSH
60182: PPUSH
60183: PPUSH
60184: PPUSH
60185: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60186: LD_ADDR_VAR 0 6
60190: PUSH
60191: LD_INT 22
60193: PUSH
60194: LD_OWVAR 2
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 21
60205: PUSH
60206: LD_INT 1
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 3
60215: PUSH
60216: LD_INT 23
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: LIST
60234: PPUSH
60235: CALL_OW 69
60239: ST_TO_ADDR
// if not tmp then
60240: LD_VAR 0 6
60244: NOT
60245: IFFALSE 60249
// exit ;
60247: GO 60395
// s1 := rand ( 1 , 4 ) ;
60249: LD_ADDR_VAR 0 2
60253: PUSH
60254: LD_INT 1
60256: PPUSH
60257: LD_INT 4
60259: PPUSH
60260: CALL_OW 12
60264: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
60265: LD_ADDR_VAR 0 4
60269: PUSH
60270: LD_VAR 0 6
60274: PUSH
60275: LD_INT 1
60277: ARRAY
60278: PPUSH
60279: LD_VAR 0 2
60283: PPUSH
60284: CALL_OW 259
60288: ST_TO_ADDR
// if s1 = 1 then
60289: LD_VAR 0 2
60293: PUSH
60294: LD_INT 1
60296: EQUAL
60297: IFFALSE 60317
// s2 := rand ( 2 , 4 ) else
60299: LD_ADDR_VAR 0 3
60303: PUSH
60304: LD_INT 2
60306: PPUSH
60307: LD_INT 4
60309: PPUSH
60310: CALL_OW 12
60314: ST_TO_ADDR
60315: GO 60325
// s2 := 1 ;
60317: LD_ADDR_VAR 0 3
60321: PUSH
60322: LD_INT 1
60324: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
60325: LD_ADDR_VAR 0 5
60329: PUSH
60330: LD_VAR 0 6
60334: PUSH
60335: LD_INT 1
60337: ARRAY
60338: PPUSH
60339: LD_VAR 0 3
60343: PPUSH
60344: CALL_OW 259
60348: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
60349: LD_VAR 0 6
60353: PUSH
60354: LD_INT 1
60356: ARRAY
60357: PPUSH
60358: LD_VAR 0 2
60362: PPUSH
60363: LD_VAR 0 5
60367: PPUSH
60368: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
60372: LD_VAR 0 6
60376: PUSH
60377: LD_INT 1
60379: ARRAY
60380: PPUSH
60381: LD_VAR 0 3
60385: PPUSH
60386: LD_VAR 0 4
60390: PPUSH
60391: CALL_OW 237
// end ;
60395: PPOPN 6
60397: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
60398: LD_EXP 57
60402: PUSH
60403: LD_EXP 104
60407: AND
60408: IFFALSE 60487
60410: GO 60412
60412: DISABLE
60413: LD_INT 0
60415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
60416: LD_ADDR_VAR 0 1
60420: PUSH
60421: LD_INT 22
60423: PUSH
60424: LD_OWVAR 2
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 30
60435: PUSH
60436: LD_INT 3
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PPUSH
60447: CALL_OW 69
60451: ST_TO_ADDR
// if not tmp then
60452: LD_VAR 0 1
60456: NOT
60457: IFFALSE 60461
// exit ;
60459: GO 60487
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
60461: LD_VAR 0 1
60465: PUSH
60466: LD_INT 1
60468: PPUSH
60469: LD_VAR 0 1
60473: PPUSH
60474: CALL_OW 12
60478: ARRAY
60479: PPUSH
60480: LD_INT 1
60482: PPUSH
60483: CALL_OW 234
// end ;
60487: PPOPN 1
60489: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
60490: LD_EXP 57
60494: PUSH
60495: LD_EXP 105
60499: AND
60500: IFFALSE 60612
60502: GO 60504
60504: DISABLE
60505: LD_INT 0
60507: PPUSH
60508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
60509: LD_ADDR_VAR 0 2
60513: PUSH
60514: LD_INT 22
60516: PUSH
60517: LD_OWVAR 2
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 2
60528: PUSH
60529: LD_INT 30
60531: PUSH
60532: LD_INT 27
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 30
60541: PUSH
60542: LD_INT 26
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 30
60551: PUSH
60552: LD_INT 28
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PPUSH
60569: CALL_OW 69
60573: ST_TO_ADDR
// if not tmp then
60574: LD_VAR 0 2
60578: NOT
60579: IFFALSE 60583
// exit ;
60581: GO 60612
// for i in tmp do
60583: LD_ADDR_VAR 0 1
60587: PUSH
60588: LD_VAR 0 2
60592: PUSH
60593: FOR_IN
60594: IFFALSE 60610
// SetLives ( i , 1 ) ;
60596: LD_VAR 0 1
60600: PPUSH
60601: LD_INT 1
60603: PPUSH
60604: CALL_OW 234
60608: GO 60593
60610: POP
60611: POP
// end ;
60612: PPOPN 2
60614: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
60615: LD_EXP 57
60619: PUSH
60620: LD_EXP 106
60624: AND
60625: IFFALSE 60899
60627: GO 60629
60629: DISABLE
60630: LD_INT 0
60632: PPUSH
60633: PPUSH
60634: PPUSH
// begin i := rand ( 1 , 7 ) ;
60635: LD_ADDR_VAR 0 1
60639: PUSH
60640: LD_INT 1
60642: PPUSH
60643: LD_INT 7
60645: PPUSH
60646: CALL_OW 12
60650: ST_TO_ADDR
// case i of 1 :
60651: LD_VAR 0 1
60655: PUSH
60656: LD_INT 1
60658: DOUBLE
60659: EQUAL
60660: IFTRUE 60664
60662: GO 60674
60664: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
60665: LD_STRING earthquake(getX(game), 0, 32)
60667: PPUSH
60668: CALL_OW 559
60672: GO 60899
60674: LD_INT 2
60676: DOUBLE
60677: EQUAL
60678: IFTRUE 60682
60680: GO 60696
60682: POP
// begin ToLua ( displayStucuk(); ) ;
60683: LD_STRING displayStucuk();
60685: PPUSH
60686: CALL_OW 559
// ResetFog ;
60690: CALL_OW 335
// end ; 3 :
60694: GO 60899
60696: LD_INT 3
60698: DOUBLE
60699: EQUAL
60700: IFTRUE 60704
60702: GO 60808
60704: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60705: LD_ADDR_VAR 0 2
60709: PUSH
60710: LD_INT 22
60712: PUSH
60713: LD_OWVAR 2
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 25
60724: PUSH
60725: LD_INT 1
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PPUSH
60736: CALL_OW 69
60740: ST_TO_ADDR
// if not tmp then
60741: LD_VAR 0 2
60745: NOT
60746: IFFALSE 60750
// exit ;
60748: GO 60899
// un := tmp [ rand ( 1 , tmp ) ] ;
60750: LD_ADDR_VAR 0 3
60754: PUSH
60755: LD_VAR 0 2
60759: PUSH
60760: LD_INT 1
60762: PPUSH
60763: LD_VAR 0 2
60767: PPUSH
60768: CALL_OW 12
60772: ARRAY
60773: ST_TO_ADDR
// if Crawls ( un ) then
60774: LD_VAR 0 3
60778: PPUSH
60779: CALL_OW 318
60783: IFFALSE 60794
// ComWalk ( un ) ;
60785: LD_VAR 0 3
60789: PPUSH
60790: CALL_OW 138
// SetClass ( un , class_mortar ) ;
60794: LD_VAR 0 3
60798: PPUSH
60799: LD_INT 8
60801: PPUSH
60802: CALL_OW 336
// end ; 4 :
60806: GO 60899
60808: LD_INT 4
60810: DOUBLE
60811: EQUAL
60812: IFTRUE 60816
60814: GO 60877
60816: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
60817: LD_ADDR_VAR 0 2
60821: PUSH
60822: LD_INT 22
60824: PUSH
60825: LD_OWVAR 2
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 30
60836: PUSH
60837: LD_INT 29
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PPUSH
60848: CALL_OW 69
60852: ST_TO_ADDR
// if not tmp then
60853: LD_VAR 0 2
60857: NOT
60858: IFFALSE 60862
// exit ;
60860: GO 60899
// DestroyUnit ( tmp [ 1 ] ) ;
60862: LD_VAR 0 2
60866: PUSH
60867: LD_INT 1
60869: ARRAY
60870: PPUSH
60871: CALL_OW 65
// end ; 5 .. 7 :
60875: GO 60899
60877: LD_INT 5
60879: DOUBLE
60880: GREATEREQUAL
60881: IFFALSE 60889
60883: LD_INT 7
60885: DOUBLE
60886: LESSEQUAL
60887: IFTRUE 60891
60889: GO 60898
60891: POP
// StreamSibBomb ; end ;
60892: CALL 57149 0 0
60896: GO 60899
60898: POP
// end ;
60899: PPOPN 3
60901: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
60902: LD_EXP 57
60906: PUSH
60907: LD_EXP 107
60911: AND
60912: IFFALSE 61068
60914: GO 60916
60916: DISABLE
60917: LD_INT 0
60919: PPUSH
60920: PPUSH
60921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
60922: LD_ADDR_VAR 0 2
60926: PUSH
60927: LD_INT 81
60929: PUSH
60930: LD_OWVAR 2
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 2
60941: PUSH
60942: LD_INT 21
60944: PUSH
60945: LD_INT 1
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 21
60954: PUSH
60955: LD_INT 2
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: LIST
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PPUSH
60971: CALL_OW 69
60975: ST_TO_ADDR
// if not tmp then
60976: LD_VAR 0 2
60980: NOT
60981: IFFALSE 60985
// exit ;
60983: GO 61068
// p := 0 ;
60985: LD_ADDR_VAR 0 3
60989: PUSH
60990: LD_INT 0
60992: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
60993: LD_INT 35
60995: PPUSH
60996: CALL_OW 67
// p := p + 1 ;
61000: LD_ADDR_VAR 0 3
61004: PUSH
61005: LD_VAR 0 3
61009: PUSH
61010: LD_INT 1
61012: PLUS
61013: ST_TO_ADDR
// for i in tmp do
61014: LD_ADDR_VAR 0 1
61018: PUSH
61019: LD_VAR 0 2
61023: PUSH
61024: FOR_IN
61025: IFFALSE 61056
// if GetLives ( i ) < 1000 then
61027: LD_VAR 0 1
61031: PPUSH
61032: CALL_OW 256
61036: PUSH
61037: LD_INT 1000
61039: LESS
61040: IFFALSE 61054
// SetLives ( i , 1000 ) ;
61042: LD_VAR 0 1
61046: PPUSH
61047: LD_INT 1000
61049: PPUSH
61050: CALL_OW 234
61054: GO 61024
61056: POP
61057: POP
// until p > 20 ;
61058: LD_VAR 0 3
61062: PUSH
61063: LD_INT 20
61065: GREATER
61066: IFFALSE 60993
// end ;
61068: PPOPN 3
61070: END
// every 0 0$1 trigger StreamModeActive and sTime do
61071: LD_EXP 57
61075: PUSH
61076: LD_EXP 108
61080: AND
61081: IFFALSE 61116
61083: GO 61085
61085: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
61086: LD_INT 28
61088: PPUSH
61089: LD_OWVAR 2
61093: PPUSH
61094: LD_INT 2
61096: PPUSH
61097: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
61101: LD_INT 30
61103: PPUSH
61104: LD_OWVAR 2
61108: PPUSH
61109: LD_INT 2
61111: PPUSH
61112: CALL_OW 322
// end ;
61116: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
61117: LD_EXP 57
61121: PUSH
61122: LD_EXP 109
61126: AND
61127: IFFALSE 61248
61129: GO 61131
61131: DISABLE
61132: LD_INT 0
61134: PPUSH
61135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61136: LD_ADDR_VAR 0 2
61140: PUSH
61141: LD_INT 22
61143: PUSH
61144: LD_OWVAR 2
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 21
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 3
61165: PUSH
61166: LD_INT 23
61168: PUSH
61169: LD_INT 0
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: LIST
61184: PPUSH
61185: CALL_OW 69
61189: ST_TO_ADDR
// if not tmp then
61190: LD_VAR 0 2
61194: NOT
61195: IFFALSE 61199
// exit ;
61197: GO 61248
// for i in tmp do
61199: LD_ADDR_VAR 0 1
61203: PUSH
61204: LD_VAR 0 2
61208: PUSH
61209: FOR_IN
61210: IFFALSE 61246
// begin if Crawls ( i ) then
61212: LD_VAR 0 1
61216: PPUSH
61217: CALL_OW 318
61221: IFFALSE 61232
// ComWalk ( i ) ;
61223: LD_VAR 0 1
61227: PPUSH
61228: CALL_OW 138
// SetClass ( i , 2 ) ;
61232: LD_VAR 0 1
61236: PPUSH
61237: LD_INT 2
61239: PPUSH
61240: CALL_OW 336
// end ;
61244: GO 61209
61246: POP
61247: POP
// end ;
61248: PPOPN 2
61250: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
61251: LD_EXP 57
61255: PUSH
61256: LD_EXP 110
61260: AND
61261: IFFALSE 61542
61263: GO 61265
61265: DISABLE
61266: LD_INT 0
61268: PPUSH
61269: PPUSH
61270: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
61271: LD_OWVAR 2
61275: PPUSH
61276: LD_INT 9
61278: PPUSH
61279: LD_INT 1
61281: PPUSH
61282: LD_INT 1
61284: PPUSH
61285: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
61289: LD_INT 9
61291: PPUSH
61292: LD_OWVAR 2
61296: PPUSH
61297: CALL_OW 343
// uc_side := 9 ;
61301: LD_ADDR_OWVAR 20
61305: PUSH
61306: LD_INT 9
61308: ST_TO_ADDR
// uc_nation := 2 ;
61309: LD_ADDR_OWVAR 21
61313: PUSH
61314: LD_INT 2
61316: ST_TO_ADDR
// hc_name := Dark Warrior ;
61317: LD_ADDR_OWVAR 26
61321: PUSH
61322: LD_STRING Dark Warrior
61324: ST_TO_ADDR
// hc_gallery :=  ;
61325: LD_ADDR_OWVAR 33
61329: PUSH
61330: LD_STRING 
61332: ST_TO_ADDR
// hc_noskilllimit := true ;
61333: LD_ADDR_OWVAR 76
61337: PUSH
61338: LD_INT 1
61340: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
61341: LD_ADDR_OWVAR 31
61345: PUSH
61346: LD_INT 30
61348: PUSH
61349: LD_INT 30
61351: PUSH
61352: LD_INT 30
61354: PUSH
61355: LD_INT 30
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: ST_TO_ADDR
// un := CreateHuman ;
61364: LD_ADDR_VAR 0 3
61368: PUSH
61369: CALL_OW 44
61373: ST_TO_ADDR
// hc_noskilllimit := false ;
61374: LD_ADDR_OWVAR 76
61378: PUSH
61379: LD_INT 0
61381: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
61382: LD_VAR 0 3
61386: PPUSH
61387: LD_INT 1
61389: PPUSH
61390: CALL_OW 51
// p := 0 ;
61394: LD_ADDR_VAR 0 2
61398: PUSH
61399: LD_INT 0
61401: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
61402: LD_INT 35
61404: PPUSH
61405: CALL_OW 67
// p := p + 1 ;
61409: LD_ADDR_VAR 0 2
61413: PUSH
61414: LD_VAR 0 2
61418: PUSH
61419: LD_INT 1
61421: PLUS
61422: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
61423: LD_VAR 0 3
61427: PPUSH
61428: CALL_OW 256
61432: PUSH
61433: LD_INT 1000
61435: LESS
61436: IFFALSE 61450
// SetLives ( un , 1000 ) ;
61438: LD_VAR 0 3
61442: PPUSH
61443: LD_INT 1000
61445: PPUSH
61446: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
61450: LD_VAR 0 3
61454: PPUSH
61455: LD_INT 81
61457: PUSH
61458: LD_OWVAR 2
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 91
61469: PUSH
61470: LD_VAR 0 3
61474: PUSH
61475: LD_INT 30
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: LIST
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PPUSH
61487: CALL_OW 69
61491: PPUSH
61492: LD_VAR 0 3
61496: PPUSH
61497: CALL_OW 74
61501: PPUSH
61502: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
61506: LD_VAR 0 2
61510: PUSH
61511: LD_INT 60
61513: GREATER
61514: PUSH
61515: LD_VAR 0 3
61519: PPUSH
61520: CALL_OW 301
61524: OR
61525: IFFALSE 61402
// if un then
61527: LD_VAR 0 3
61531: IFFALSE 61542
// RemoveUnit ( un ) ;
61533: LD_VAR 0 3
61537: PPUSH
61538: CALL_OW 64
// end ;
61542: PPOPN 3
61544: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61545: LD_INT 0
61547: PPUSH
// case cmd of 301 :
61548: LD_VAR 0 1
61552: PUSH
61553: LD_INT 301
61555: DOUBLE
61556: EQUAL
61557: IFTRUE 61561
61559: GO 61593
61561: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
61562: LD_VAR 0 6
61566: PPUSH
61567: LD_VAR 0 7
61571: PPUSH
61572: LD_VAR 0 8
61576: PPUSH
61577: LD_VAR 0 4
61581: PPUSH
61582: LD_VAR 0 5
61586: PPUSH
61587: CALL 62794 0 5
61591: GO 61714
61593: LD_INT 302
61595: DOUBLE
61596: EQUAL
61597: IFTRUE 61601
61599: GO 61638
61601: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
61602: LD_VAR 0 6
61606: PPUSH
61607: LD_VAR 0 7
61611: PPUSH
61612: LD_VAR 0 8
61616: PPUSH
61617: LD_VAR 0 9
61621: PPUSH
61622: LD_VAR 0 4
61626: PPUSH
61627: LD_VAR 0 5
61631: PPUSH
61632: CALL 62885 0 6
61636: GO 61714
61638: LD_INT 303
61640: DOUBLE
61641: EQUAL
61642: IFTRUE 61646
61644: GO 61683
61646: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
61647: LD_VAR 0 6
61651: PPUSH
61652: LD_VAR 0 7
61656: PPUSH
61657: LD_VAR 0 8
61661: PPUSH
61662: LD_VAR 0 9
61666: PPUSH
61667: LD_VAR 0 4
61671: PPUSH
61672: LD_VAR 0 5
61676: PPUSH
61677: CALL 61719 0 6
61681: GO 61714
61683: LD_INT 304
61685: DOUBLE
61686: EQUAL
61687: IFTRUE 61691
61689: GO 61713
61691: POP
// hHackTeleport ( unit , x , y ) ; end ;
61692: LD_VAR 0 2
61696: PPUSH
61697: LD_VAR 0 4
61701: PPUSH
61702: LD_VAR 0 5
61706: PPUSH
61707: CALL 63478 0 3
61711: GO 61714
61713: POP
// end ;
61714: LD_VAR 0 12
61718: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
61719: LD_INT 0
61721: PPUSH
61722: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
61723: LD_VAR 0 1
61727: PUSH
61728: LD_INT 1
61730: LESS
61731: PUSH
61732: LD_VAR 0 1
61736: PUSH
61737: LD_INT 3
61739: GREATER
61740: OR
61741: PUSH
61742: LD_VAR 0 5
61746: PPUSH
61747: LD_VAR 0 6
61751: PPUSH
61752: CALL_OW 428
61756: OR
61757: IFFALSE 61761
// exit ;
61759: GO 62481
// uc_side := your_side ;
61761: LD_ADDR_OWVAR 20
61765: PUSH
61766: LD_OWVAR 2
61770: ST_TO_ADDR
// uc_nation := nation ;
61771: LD_ADDR_OWVAR 21
61775: PUSH
61776: LD_VAR 0 1
61780: ST_TO_ADDR
// bc_level = 1 ;
61781: LD_ADDR_OWVAR 43
61785: PUSH
61786: LD_INT 1
61788: ST_TO_ADDR
// case btype of 1 :
61789: LD_VAR 0 2
61793: PUSH
61794: LD_INT 1
61796: DOUBLE
61797: EQUAL
61798: IFTRUE 61802
61800: GO 61813
61802: POP
// bc_type := b_depot ; 2 :
61803: LD_ADDR_OWVAR 42
61807: PUSH
61808: LD_INT 0
61810: ST_TO_ADDR
61811: GO 62425
61813: LD_INT 2
61815: DOUBLE
61816: EQUAL
61817: IFTRUE 61821
61819: GO 61832
61821: POP
// bc_type := b_warehouse ; 3 :
61822: LD_ADDR_OWVAR 42
61826: PUSH
61827: LD_INT 1
61829: ST_TO_ADDR
61830: GO 62425
61832: LD_INT 3
61834: DOUBLE
61835: EQUAL
61836: IFTRUE 61840
61838: GO 61851
61840: POP
// bc_type := b_lab ; 4 .. 9 :
61841: LD_ADDR_OWVAR 42
61845: PUSH
61846: LD_INT 6
61848: ST_TO_ADDR
61849: GO 62425
61851: LD_INT 4
61853: DOUBLE
61854: GREATEREQUAL
61855: IFFALSE 61863
61857: LD_INT 9
61859: DOUBLE
61860: LESSEQUAL
61861: IFTRUE 61865
61863: GO 61917
61865: POP
// begin bc_type := b_lab_half ;
61866: LD_ADDR_OWVAR 42
61870: PUSH
61871: LD_INT 7
61873: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
61874: LD_ADDR_OWVAR 44
61878: PUSH
61879: LD_INT 10
61881: PUSH
61882: LD_INT 11
61884: PUSH
61885: LD_INT 12
61887: PUSH
61888: LD_INT 15
61890: PUSH
61891: LD_INT 14
61893: PUSH
61894: LD_INT 13
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: PUSH
61905: LD_VAR 0 2
61909: PUSH
61910: LD_INT 3
61912: MINUS
61913: ARRAY
61914: ST_TO_ADDR
// end ; 10 .. 13 :
61915: GO 62425
61917: LD_INT 10
61919: DOUBLE
61920: GREATEREQUAL
61921: IFFALSE 61929
61923: LD_INT 13
61925: DOUBLE
61926: LESSEQUAL
61927: IFTRUE 61931
61929: GO 62008
61931: POP
// begin bc_type := b_lab_full ;
61932: LD_ADDR_OWVAR 42
61936: PUSH
61937: LD_INT 8
61939: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
61940: LD_ADDR_OWVAR 44
61944: PUSH
61945: LD_INT 10
61947: PUSH
61948: LD_INT 12
61950: PUSH
61951: LD_INT 14
61953: PUSH
61954: LD_INT 13
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: PUSH
61963: LD_VAR 0 2
61967: PUSH
61968: LD_INT 9
61970: MINUS
61971: ARRAY
61972: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
61973: LD_ADDR_OWVAR 45
61977: PUSH
61978: LD_INT 11
61980: PUSH
61981: LD_INT 15
61983: PUSH
61984: LD_INT 12
61986: PUSH
61987: LD_INT 15
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: PUSH
61996: LD_VAR 0 2
62000: PUSH
62001: LD_INT 9
62003: MINUS
62004: ARRAY
62005: ST_TO_ADDR
// end ; 14 :
62006: GO 62425
62008: LD_INT 14
62010: DOUBLE
62011: EQUAL
62012: IFTRUE 62016
62014: GO 62027
62016: POP
// bc_type := b_workshop ; 15 :
62017: LD_ADDR_OWVAR 42
62021: PUSH
62022: LD_INT 2
62024: ST_TO_ADDR
62025: GO 62425
62027: LD_INT 15
62029: DOUBLE
62030: EQUAL
62031: IFTRUE 62035
62033: GO 62046
62035: POP
// bc_type := b_factory ; 16 :
62036: LD_ADDR_OWVAR 42
62040: PUSH
62041: LD_INT 3
62043: ST_TO_ADDR
62044: GO 62425
62046: LD_INT 16
62048: DOUBLE
62049: EQUAL
62050: IFTRUE 62054
62052: GO 62065
62054: POP
// bc_type := b_ext_gun ; 17 :
62055: LD_ADDR_OWVAR 42
62059: PUSH
62060: LD_INT 17
62062: ST_TO_ADDR
62063: GO 62425
62065: LD_INT 17
62067: DOUBLE
62068: EQUAL
62069: IFTRUE 62073
62071: GO 62101
62073: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
62074: LD_ADDR_OWVAR 42
62078: PUSH
62079: LD_INT 19
62081: PUSH
62082: LD_INT 23
62084: PUSH
62085: LD_INT 19
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: LIST
62092: PUSH
62093: LD_VAR 0 1
62097: ARRAY
62098: ST_TO_ADDR
62099: GO 62425
62101: LD_INT 18
62103: DOUBLE
62104: EQUAL
62105: IFTRUE 62109
62107: GO 62120
62109: POP
// bc_type := b_ext_radar ; 19 :
62110: LD_ADDR_OWVAR 42
62114: PUSH
62115: LD_INT 20
62117: ST_TO_ADDR
62118: GO 62425
62120: LD_INT 19
62122: DOUBLE
62123: EQUAL
62124: IFTRUE 62128
62126: GO 62139
62128: POP
// bc_type := b_ext_radio ; 20 :
62129: LD_ADDR_OWVAR 42
62133: PUSH
62134: LD_INT 22
62136: ST_TO_ADDR
62137: GO 62425
62139: LD_INT 20
62141: DOUBLE
62142: EQUAL
62143: IFTRUE 62147
62145: GO 62158
62147: POP
// bc_type := b_ext_siberium ; 21 :
62148: LD_ADDR_OWVAR 42
62152: PUSH
62153: LD_INT 21
62155: ST_TO_ADDR
62156: GO 62425
62158: LD_INT 21
62160: DOUBLE
62161: EQUAL
62162: IFTRUE 62166
62164: GO 62177
62166: POP
// bc_type := b_ext_computer ; 22 :
62167: LD_ADDR_OWVAR 42
62171: PUSH
62172: LD_INT 24
62174: ST_TO_ADDR
62175: GO 62425
62177: LD_INT 22
62179: DOUBLE
62180: EQUAL
62181: IFTRUE 62185
62183: GO 62196
62185: POP
// bc_type := b_ext_track ; 23 :
62186: LD_ADDR_OWVAR 42
62190: PUSH
62191: LD_INT 16
62193: ST_TO_ADDR
62194: GO 62425
62196: LD_INT 23
62198: DOUBLE
62199: EQUAL
62200: IFTRUE 62204
62202: GO 62215
62204: POP
// bc_type := b_ext_laser ; 24 :
62205: LD_ADDR_OWVAR 42
62209: PUSH
62210: LD_INT 25
62212: ST_TO_ADDR
62213: GO 62425
62215: LD_INT 24
62217: DOUBLE
62218: EQUAL
62219: IFTRUE 62223
62221: GO 62234
62223: POP
// bc_type := b_control_tower ; 25 :
62224: LD_ADDR_OWVAR 42
62228: PUSH
62229: LD_INT 36
62231: ST_TO_ADDR
62232: GO 62425
62234: LD_INT 25
62236: DOUBLE
62237: EQUAL
62238: IFTRUE 62242
62240: GO 62253
62242: POP
// bc_type := b_breastwork ; 26 :
62243: LD_ADDR_OWVAR 42
62247: PUSH
62248: LD_INT 31
62250: ST_TO_ADDR
62251: GO 62425
62253: LD_INT 26
62255: DOUBLE
62256: EQUAL
62257: IFTRUE 62261
62259: GO 62272
62261: POP
// bc_type := b_bunker ; 27 :
62262: LD_ADDR_OWVAR 42
62266: PUSH
62267: LD_INT 32
62269: ST_TO_ADDR
62270: GO 62425
62272: LD_INT 27
62274: DOUBLE
62275: EQUAL
62276: IFTRUE 62280
62278: GO 62291
62280: POP
// bc_type := b_turret ; 28 :
62281: LD_ADDR_OWVAR 42
62285: PUSH
62286: LD_INT 33
62288: ST_TO_ADDR
62289: GO 62425
62291: LD_INT 28
62293: DOUBLE
62294: EQUAL
62295: IFTRUE 62299
62297: GO 62310
62299: POP
// bc_type := b_armoury ; 29 :
62300: LD_ADDR_OWVAR 42
62304: PUSH
62305: LD_INT 4
62307: ST_TO_ADDR
62308: GO 62425
62310: LD_INT 29
62312: DOUBLE
62313: EQUAL
62314: IFTRUE 62318
62316: GO 62329
62318: POP
// bc_type := b_barracks ; 30 :
62319: LD_ADDR_OWVAR 42
62323: PUSH
62324: LD_INT 5
62326: ST_TO_ADDR
62327: GO 62425
62329: LD_INT 30
62331: DOUBLE
62332: EQUAL
62333: IFTRUE 62337
62335: GO 62348
62337: POP
// bc_type := b_solar_power ; 31 :
62338: LD_ADDR_OWVAR 42
62342: PUSH
62343: LD_INT 27
62345: ST_TO_ADDR
62346: GO 62425
62348: LD_INT 31
62350: DOUBLE
62351: EQUAL
62352: IFTRUE 62356
62354: GO 62367
62356: POP
// bc_type := b_oil_power ; 32 :
62357: LD_ADDR_OWVAR 42
62361: PUSH
62362: LD_INT 26
62364: ST_TO_ADDR
62365: GO 62425
62367: LD_INT 32
62369: DOUBLE
62370: EQUAL
62371: IFTRUE 62375
62373: GO 62386
62375: POP
// bc_type := b_siberite_power ; 33 :
62376: LD_ADDR_OWVAR 42
62380: PUSH
62381: LD_INT 28
62383: ST_TO_ADDR
62384: GO 62425
62386: LD_INT 33
62388: DOUBLE
62389: EQUAL
62390: IFTRUE 62394
62392: GO 62405
62394: POP
// bc_type := b_oil_mine ; 34 :
62395: LD_ADDR_OWVAR 42
62399: PUSH
62400: LD_INT 29
62402: ST_TO_ADDR
62403: GO 62425
62405: LD_INT 34
62407: DOUBLE
62408: EQUAL
62409: IFTRUE 62413
62411: GO 62424
62413: POP
// bc_type := b_siberite_mine ; end ;
62414: LD_ADDR_OWVAR 42
62418: PUSH
62419: LD_INT 30
62421: ST_TO_ADDR
62422: GO 62425
62424: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
62425: LD_ADDR_VAR 0 8
62429: PUSH
62430: LD_VAR 0 5
62434: PPUSH
62435: LD_VAR 0 6
62439: PPUSH
62440: LD_VAR 0 3
62444: PPUSH
62445: CALL_OW 47
62449: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
62450: LD_OWVAR 42
62454: PUSH
62455: LD_INT 32
62457: PUSH
62458: LD_INT 33
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: IN
62465: IFFALSE 62481
// PlaceWeaponTurret ( b , weapon ) ;
62467: LD_VAR 0 8
62471: PPUSH
62472: LD_VAR 0 4
62476: PPUSH
62477: CALL_OW 431
// end ;
62481: LD_VAR 0 7
62485: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
62486: LD_INT 0
62488: PPUSH
62489: PPUSH
62490: PPUSH
62491: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62492: LD_ADDR_VAR 0 4
62496: PUSH
62497: LD_INT 22
62499: PUSH
62500: LD_OWVAR 2
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 2
62511: PUSH
62512: LD_INT 30
62514: PUSH
62515: LD_INT 0
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 30
62524: PUSH
62525: LD_INT 1
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: LIST
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PPUSH
62541: CALL_OW 69
62545: ST_TO_ADDR
// if not tmp then
62546: LD_VAR 0 4
62550: NOT
62551: IFFALSE 62555
// exit ;
62553: GO 62614
// for i in tmp do
62555: LD_ADDR_VAR 0 2
62559: PUSH
62560: LD_VAR 0 4
62564: PUSH
62565: FOR_IN
62566: IFFALSE 62612
// for j = 1 to 3 do
62568: LD_ADDR_VAR 0 3
62572: PUSH
62573: DOUBLE
62574: LD_INT 1
62576: DEC
62577: ST_TO_ADDR
62578: LD_INT 3
62580: PUSH
62581: FOR_TO
62582: IFFALSE 62608
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
62584: LD_VAR 0 2
62588: PPUSH
62589: CALL_OW 274
62593: PPUSH
62594: LD_VAR 0 3
62598: PPUSH
62599: LD_INT 99999
62601: PPUSH
62602: CALL_OW 277
62606: GO 62581
62608: POP
62609: POP
62610: GO 62565
62612: POP
62613: POP
// end ;
62614: LD_VAR 0 1
62618: RET
// export function hHackSetLevel10 ; var i , j ; begin
62619: LD_INT 0
62621: PPUSH
62622: PPUSH
62623: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
62624: LD_ADDR_VAR 0 2
62628: PUSH
62629: LD_INT 21
62631: PUSH
62632: LD_INT 1
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PPUSH
62639: CALL_OW 69
62643: PUSH
62644: FOR_IN
62645: IFFALSE 62697
// if IsSelected ( i ) then
62647: LD_VAR 0 2
62651: PPUSH
62652: CALL_OW 306
62656: IFFALSE 62695
// begin for j := 1 to 4 do
62658: LD_ADDR_VAR 0 3
62662: PUSH
62663: DOUBLE
62664: LD_INT 1
62666: DEC
62667: ST_TO_ADDR
62668: LD_INT 4
62670: PUSH
62671: FOR_TO
62672: IFFALSE 62693
// SetSkill ( i , j , 10 ) ;
62674: LD_VAR 0 2
62678: PPUSH
62679: LD_VAR 0 3
62683: PPUSH
62684: LD_INT 10
62686: PPUSH
62687: CALL_OW 237
62691: GO 62671
62693: POP
62694: POP
// end ;
62695: GO 62644
62697: POP
62698: POP
// end ;
62699: LD_VAR 0 1
62703: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
62704: LD_INT 0
62706: PPUSH
62707: PPUSH
62708: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
62709: LD_ADDR_VAR 0 2
62713: PUSH
62714: LD_INT 22
62716: PUSH
62717: LD_OWVAR 2
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 21
62728: PUSH
62729: LD_INT 1
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PPUSH
62740: CALL_OW 69
62744: PUSH
62745: FOR_IN
62746: IFFALSE 62787
// begin for j := 1 to 4 do
62748: LD_ADDR_VAR 0 3
62752: PUSH
62753: DOUBLE
62754: LD_INT 1
62756: DEC
62757: ST_TO_ADDR
62758: LD_INT 4
62760: PUSH
62761: FOR_TO
62762: IFFALSE 62783
// SetSkill ( i , j , 10 ) ;
62764: LD_VAR 0 2
62768: PPUSH
62769: LD_VAR 0 3
62773: PPUSH
62774: LD_INT 10
62776: PPUSH
62777: CALL_OW 237
62781: GO 62761
62783: POP
62784: POP
// end ;
62785: GO 62745
62787: POP
62788: POP
// end ;
62789: LD_VAR 0 1
62793: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
62794: LD_INT 0
62796: PPUSH
// uc_side := your_side ;
62797: LD_ADDR_OWVAR 20
62801: PUSH
62802: LD_OWVAR 2
62806: ST_TO_ADDR
// uc_nation := nation ;
62807: LD_ADDR_OWVAR 21
62811: PUSH
62812: LD_VAR 0 1
62816: ST_TO_ADDR
// InitHc ;
62817: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
62821: LD_INT 0
62823: PPUSH
62824: LD_VAR 0 2
62828: PPUSH
62829: LD_VAR 0 3
62833: PPUSH
62834: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
62838: LD_VAR 0 4
62842: PPUSH
62843: LD_VAR 0 5
62847: PPUSH
62848: CALL_OW 428
62852: PUSH
62853: LD_INT 0
62855: EQUAL
62856: IFFALSE 62880
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
62858: CALL_OW 44
62862: PPUSH
62863: LD_VAR 0 4
62867: PPUSH
62868: LD_VAR 0 5
62872: PPUSH
62873: LD_INT 1
62875: PPUSH
62876: CALL_OW 48
// end ;
62880: LD_VAR 0 6
62884: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
62885: LD_INT 0
62887: PPUSH
62888: PPUSH
// uc_side := your_side ;
62889: LD_ADDR_OWVAR 20
62893: PUSH
62894: LD_OWVAR 2
62898: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
62899: LD_VAR 0 1
62903: PUSH
62904: LD_INT 1
62906: PUSH
62907: LD_INT 2
62909: PUSH
62910: LD_INT 3
62912: PUSH
62913: LD_INT 4
62915: PUSH
62916: LD_INT 5
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: IN
62926: IFFALSE 62938
// uc_nation := nation_american else
62928: LD_ADDR_OWVAR 21
62932: PUSH
62933: LD_INT 1
62935: ST_TO_ADDR
62936: GO 62981
// if chassis in [ 11 , 12 , 13 , 14 ] then
62938: LD_VAR 0 1
62942: PUSH
62943: LD_INT 11
62945: PUSH
62946: LD_INT 12
62948: PUSH
62949: LD_INT 13
62951: PUSH
62952: LD_INT 14
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: IN
62961: IFFALSE 62973
// uc_nation := nation_arabian else
62963: LD_ADDR_OWVAR 21
62967: PUSH
62968: LD_INT 2
62970: ST_TO_ADDR
62971: GO 62981
// uc_nation := nation_russian ;
62973: LD_ADDR_OWVAR 21
62977: PUSH
62978: LD_INT 3
62980: ST_TO_ADDR
// vc_chassis := chassis ;
62981: LD_ADDR_OWVAR 37
62985: PUSH
62986: LD_VAR 0 1
62990: ST_TO_ADDR
// vc_engine := engine ;
62991: LD_ADDR_OWVAR 39
62995: PUSH
62996: LD_VAR 0 2
63000: ST_TO_ADDR
// vc_control := control ;
63001: LD_ADDR_OWVAR 38
63005: PUSH
63006: LD_VAR 0 3
63010: ST_TO_ADDR
// vc_weapon := weapon ;
63011: LD_ADDR_OWVAR 40
63015: PUSH
63016: LD_VAR 0 4
63020: ST_TO_ADDR
// un := CreateVehicle ;
63021: LD_ADDR_VAR 0 8
63025: PUSH
63026: CALL_OW 45
63030: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
63031: LD_VAR 0 8
63035: PPUSH
63036: LD_INT 0
63038: PPUSH
63039: LD_INT 5
63041: PPUSH
63042: CALL_OW 12
63046: PPUSH
63047: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
63051: LD_VAR 0 8
63055: PPUSH
63056: LD_VAR 0 5
63060: PPUSH
63061: LD_VAR 0 6
63065: PPUSH
63066: LD_INT 1
63068: PPUSH
63069: CALL_OW 48
// end ;
63073: LD_VAR 0 7
63077: RET
// export hInvincible ; every 1 do
63078: GO 63080
63080: DISABLE
// hInvincible := [ ] ;
63081: LD_ADDR_EXP 111
63085: PUSH
63086: EMPTY
63087: ST_TO_ADDR
63088: END
// every 10 do var i ;
63089: GO 63091
63091: DISABLE
63092: LD_INT 0
63094: PPUSH
// begin enable ;
63095: ENABLE
// if not hInvincible then
63096: LD_EXP 111
63100: NOT
63101: IFFALSE 63105
// exit ;
63103: GO 63149
// for i in hInvincible do
63105: LD_ADDR_VAR 0 1
63109: PUSH
63110: LD_EXP 111
63114: PUSH
63115: FOR_IN
63116: IFFALSE 63147
// if GetLives ( i ) < 1000 then
63118: LD_VAR 0 1
63122: PPUSH
63123: CALL_OW 256
63127: PUSH
63128: LD_INT 1000
63130: LESS
63131: IFFALSE 63145
// SetLives ( i , 1000 ) ;
63133: LD_VAR 0 1
63137: PPUSH
63138: LD_INT 1000
63140: PPUSH
63141: CALL_OW 234
63145: GO 63115
63147: POP
63148: POP
// end ;
63149: PPOPN 1
63151: END
// export function hHackInvincible ; var i ; begin
63152: LD_INT 0
63154: PPUSH
63155: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
63156: LD_ADDR_VAR 0 2
63160: PUSH
63161: LD_INT 2
63163: PUSH
63164: LD_INT 21
63166: PUSH
63167: LD_INT 1
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 21
63176: PUSH
63177: LD_INT 2
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: LIST
63188: PPUSH
63189: CALL_OW 69
63193: PUSH
63194: FOR_IN
63195: IFFALSE 63256
// if IsSelected ( i ) then
63197: LD_VAR 0 2
63201: PPUSH
63202: CALL_OW 306
63206: IFFALSE 63254
// begin if i in hInvincible then
63208: LD_VAR 0 2
63212: PUSH
63213: LD_EXP 111
63217: IN
63218: IFFALSE 63238
// hInvincible := hInvincible diff i else
63220: LD_ADDR_EXP 111
63224: PUSH
63225: LD_EXP 111
63229: PUSH
63230: LD_VAR 0 2
63234: DIFF
63235: ST_TO_ADDR
63236: GO 63254
// hInvincible := hInvincible union i ;
63238: LD_ADDR_EXP 111
63242: PUSH
63243: LD_EXP 111
63247: PUSH
63248: LD_VAR 0 2
63252: UNION
63253: ST_TO_ADDR
// end ;
63254: GO 63194
63256: POP
63257: POP
// end ;
63258: LD_VAR 0 1
63262: RET
// export function hHackInvisible ; var i , j ; begin
63263: LD_INT 0
63265: PPUSH
63266: PPUSH
63267: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
63268: LD_ADDR_VAR 0 2
63272: PUSH
63273: LD_INT 21
63275: PUSH
63276: LD_INT 1
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PPUSH
63283: CALL_OW 69
63287: PUSH
63288: FOR_IN
63289: IFFALSE 63313
// if IsSelected ( i ) then
63291: LD_VAR 0 2
63295: PPUSH
63296: CALL_OW 306
63300: IFFALSE 63311
// ComForceInvisible ( i ) ;
63302: LD_VAR 0 2
63306: PPUSH
63307: CALL_OW 496
63311: GO 63288
63313: POP
63314: POP
// end ;
63315: LD_VAR 0 1
63319: RET
// export function hHackChangeYourSide ; begin
63320: LD_INT 0
63322: PPUSH
// if your_side = 8 then
63323: LD_OWVAR 2
63327: PUSH
63328: LD_INT 8
63330: EQUAL
63331: IFFALSE 63343
// your_side := 0 else
63333: LD_ADDR_OWVAR 2
63337: PUSH
63338: LD_INT 0
63340: ST_TO_ADDR
63341: GO 63357
// your_side := your_side + 1 ;
63343: LD_ADDR_OWVAR 2
63347: PUSH
63348: LD_OWVAR 2
63352: PUSH
63353: LD_INT 1
63355: PLUS
63356: ST_TO_ADDR
// end ;
63357: LD_VAR 0 1
63361: RET
// export function hHackChangeUnitSide ; var i , j ; begin
63362: LD_INT 0
63364: PPUSH
63365: PPUSH
63366: PPUSH
// for i in all_units do
63367: LD_ADDR_VAR 0 2
63371: PUSH
63372: LD_OWVAR 3
63376: PUSH
63377: FOR_IN
63378: IFFALSE 63456
// if IsSelected ( i ) then
63380: LD_VAR 0 2
63384: PPUSH
63385: CALL_OW 306
63389: IFFALSE 63454
// begin j := GetSide ( i ) ;
63391: LD_ADDR_VAR 0 3
63395: PUSH
63396: LD_VAR 0 2
63400: PPUSH
63401: CALL_OW 255
63405: ST_TO_ADDR
// if j = 8 then
63406: LD_VAR 0 3
63410: PUSH
63411: LD_INT 8
63413: EQUAL
63414: IFFALSE 63426
// j := 0 else
63416: LD_ADDR_VAR 0 3
63420: PUSH
63421: LD_INT 0
63423: ST_TO_ADDR
63424: GO 63440
// j := j + 1 ;
63426: LD_ADDR_VAR 0 3
63430: PUSH
63431: LD_VAR 0 3
63435: PUSH
63436: LD_INT 1
63438: PLUS
63439: ST_TO_ADDR
// SetSide ( i , j ) ;
63440: LD_VAR 0 2
63444: PPUSH
63445: LD_VAR 0 3
63449: PPUSH
63450: CALL_OW 235
// end ;
63454: GO 63377
63456: POP
63457: POP
// end ;
63458: LD_VAR 0 1
63462: RET
// export function hHackFog ; begin
63463: LD_INT 0
63465: PPUSH
// FogOff ( true ) ;
63466: LD_INT 1
63468: PPUSH
63469: CALL_OW 344
// end ;
63473: LD_VAR 0 1
63477: RET
// export function hHackTeleport ( unit , x , y ) ; begin
63478: LD_INT 0
63480: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
63481: LD_VAR 0 1
63485: PPUSH
63486: LD_VAR 0 2
63490: PPUSH
63491: LD_VAR 0 3
63495: PPUSH
63496: LD_INT 1
63498: PPUSH
63499: LD_INT 1
63501: PPUSH
63502: CALL_OW 483
// CenterOnXY ( x , y ) ;
63506: LD_VAR 0 2
63510: PPUSH
63511: LD_VAR 0 3
63515: PPUSH
63516: CALL_OW 84
// end ; end_of_file
63520: LD_VAR 0 4
63524: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
63525: LD_VAR 0 1
63529: PUSH
63530: LD_INT 200
63532: DOUBLE
63533: GREATEREQUAL
63534: IFFALSE 63542
63536: LD_INT 299
63538: DOUBLE
63539: LESSEQUAL
63540: IFTRUE 63544
63542: GO 63576
63544: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
63545: LD_VAR 0 1
63549: PPUSH
63550: LD_VAR 0 2
63554: PPUSH
63555: LD_VAR 0 3
63559: PPUSH
63560: LD_VAR 0 4
63564: PPUSH
63565: LD_VAR 0 5
63569: PPUSH
63570: CALL 63820 0 5
63574: GO 63653
63576: LD_INT 300
63578: DOUBLE
63579: GREATEREQUAL
63580: IFFALSE 63588
63582: LD_INT 399
63584: DOUBLE
63585: LESSEQUAL
63586: IFTRUE 63590
63588: GO 63652
63590: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
63591: LD_VAR 0 1
63595: PPUSH
63596: LD_VAR 0 2
63600: PPUSH
63601: LD_VAR 0 3
63605: PPUSH
63606: LD_VAR 0 4
63610: PPUSH
63611: LD_VAR 0 5
63615: PPUSH
63616: LD_VAR 0 6
63620: PPUSH
63621: LD_VAR 0 7
63625: PPUSH
63626: LD_VAR 0 8
63630: PPUSH
63631: LD_VAR 0 9
63635: PPUSH
63636: LD_VAR 0 10
63640: PPUSH
63641: LD_VAR 0 11
63645: PPUSH
63646: CALL 61545 0 11
63650: GO 63653
63652: POP
// end ;
63653: PPOPN 11
63655: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
63656: LD_VAR 0 1
63660: PPUSH
63661: LD_VAR 0 2
63665: PPUSH
63666: LD_VAR 0 3
63670: PPUSH
63671: LD_VAR 0 4
63675: PPUSH
63676: LD_VAR 0 5
63680: PPUSH
63681: CALL 63802 0 5
// end ; end_of_file
63685: PPOPN 5
63687: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
63688: LD_INT 0
63690: PPUSH
63691: PPUSH
63692: PPUSH
63693: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
63694: LD_VAR 0 1
63698: PPUSH
63699: CALL_OW 264
63703: PUSH
63704: LD_EXP 42
63708: EQUAL
63709: IFFALSE 63781
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
63711: LD_INT 68
63713: PPUSH
63714: LD_VAR 0 1
63718: PPUSH
63719: CALL_OW 255
63723: PPUSH
63724: CALL_OW 321
63728: PUSH
63729: LD_INT 2
63731: EQUAL
63732: IFFALSE 63744
// eff := 70 else
63734: LD_ADDR_VAR 0 4
63738: PUSH
63739: LD_INT 70
63741: ST_TO_ADDR
63742: GO 63752
// eff := 30 ;
63744: LD_ADDR_VAR 0 4
63748: PUSH
63749: LD_INT 30
63751: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
63752: LD_VAR 0 1
63756: PPUSH
63757: CALL_OW 250
63761: PPUSH
63762: LD_VAR 0 1
63766: PPUSH
63767: CALL_OW 251
63771: PPUSH
63772: LD_VAR 0 4
63776: PPUSH
63777: CALL_OW 495
// end ; end ;
63781: LD_VAR 0 2
63785: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
63786: LD_INT 0
63788: PPUSH
// end ;
63789: LD_VAR 0 4
63793: RET
// export function SOS_Command ( cmd ) ; begin
63794: LD_INT 0
63796: PPUSH
// end ;
63797: LD_VAR 0 2
63801: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
63802: LD_INT 0
63804: PPUSH
// if cmd = 121 then
63805: LD_VAR 0 1
63809: PUSH
63810: LD_INT 121
63812: EQUAL
63813: IFFALSE 63815
// end ;
63815: LD_VAR 0 6
63819: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
63820: LD_INT 0
63822: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
63823: LD_VAR 0 1
63827: PUSH
63828: LD_INT 250
63830: EQUAL
63831: PUSH
63832: LD_VAR 0 2
63836: PPUSH
63837: CALL_OW 264
63841: PUSH
63842: LD_EXP 45
63846: EQUAL
63847: AND
63848: IFFALSE 63869
// MinerPlaceMine ( unit , x , y ) ;
63850: LD_VAR 0 2
63854: PPUSH
63855: LD_VAR 0 4
63859: PPUSH
63860: LD_VAR 0 5
63864: PPUSH
63865: CALL 66218 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
63869: LD_VAR 0 1
63873: PUSH
63874: LD_INT 251
63876: EQUAL
63877: PUSH
63878: LD_VAR 0 2
63882: PPUSH
63883: CALL_OW 264
63887: PUSH
63888: LD_EXP 45
63892: EQUAL
63893: AND
63894: IFFALSE 63915
// MinerDetonateMine ( unit , x , y ) ;
63896: LD_VAR 0 2
63900: PPUSH
63901: LD_VAR 0 4
63905: PPUSH
63906: LD_VAR 0 5
63910: PPUSH
63911: CALL 66495 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
63915: LD_VAR 0 1
63919: PUSH
63920: LD_INT 252
63922: EQUAL
63923: PUSH
63924: LD_VAR 0 2
63928: PPUSH
63929: CALL_OW 264
63933: PUSH
63934: LD_EXP 45
63938: EQUAL
63939: AND
63940: IFFALSE 63961
// MinerCreateMinefield ( unit , x , y ) ;
63942: LD_VAR 0 2
63946: PPUSH
63947: LD_VAR 0 4
63951: PPUSH
63952: LD_VAR 0 5
63956: PPUSH
63957: CALL 66912 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
63961: LD_VAR 0 1
63965: PUSH
63966: LD_INT 253
63968: EQUAL
63969: PUSH
63970: LD_VAR 0 2
63974: PPUSH
63975: CALL_OW 257
63979: PUSH
63980: LD_INT 5
63982: EQUAL
63983: AND
63984: IFFALSE 64005
// ComBinocular ( unit , x , y ) ;
63986: LD_VAR 0 2
63990: PPUSH
63991: LD_VAR 0 4
63995: PPUSH
63996: LD_VAR 0 5
64000: PPUSH
64001: CALL 67283 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
64005: LD_VAR 0 1
64009: PUSH
64010: LD_INT 254
64012: EQUAL
64013: PUSH
64014: LD_VAR 0 2
64018: PPUSH
64019: CALL_OW 264
64023: PUSH
64024: LD_EXP 40
64028: EQUAL
64029: AND
64030: PUSH
64031: LD_VAR 0 3
64035: PPUSH
64036: CALL_OW 263
64040: PUSH
64041: LD_INT 3
64043: EQUAL
64044: AND
64045: IFFALSE 64061
// HackDestroyVehicle ( unit , selectedUnit ) ;
64047: LD_VAR 0 2
64051: PPUSH
64052: LD_VAR 0 3
64056: PPUSH
64057: CALL 65578 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
64061: LD_VAR 0 1
64065: PUSH
64066: LD_INT 255
64068: EQUAL
64069: PUSH
64070: LD_VAR 0 2
64074: PPUSH
64075: CALL_OW 264
64079: PUSH
64080: LD_INT 14
64082: PUSH
64083: LD_INT 53
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: IN
64090: AND
64091: PUSH
64092: LD_VAR 0 4
64096: PPUSH
64097: LD_VAR 0 5
64101: PPUSH
64102: CALL_OW 488
64106: AND
64107: IFFALSE 64131
// CutTreeXYR ( unit , x , y , 12 ) ;
64109: LD_VAR 0 2
64113: PPUSH
64114: LD_VAR 0 4
64118: PPUSH
64119: LD_VAR 0 5
64123: PPUSH
64124: LD_INT 12
64126: PPUSH
64127: CALL 64144 0 4
// end ;
64131: LD_VAR 0 6
64135: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
64136: LD_INT 0
64138: PPUSH
// end ;
64139: LD_VAR 0 4
64143: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
64144: LD_INT 0
64146: PPUSH
64147: PPUSH
64148: PPUSH
64149: PPUSH
64150: PPUSH
64151: PPUSH
64152: PPUSH
64153: PPUSH
64154: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
64155: LD_VAR 0 1
64159: NOT
64160: PUSH
64161: LD_VAR 0 2
64165: PPUSH
64166: LD_VAR 0 3
64170: PPUSH
64171: CALL_OW 488
64175: NOT
64176: OR
64177: PUSH
64178: LD_VAR 0 4
64182: NOT
64183: OR
64184: IFFALSE 64188
// exit ;
64186: GO 64528
// list := [ ] ;
64188: LD_ADDR_VAR 0 13
64192: PUSH
64193: EMPTY
64194: ST_TO_ADDR
// if x - r < 0 then
64195: LD_VAR 0 2
64199: PUSH
64200: LD_VAR 0 4
64204: MINUS
64205: PUSH
64206: LD_INT 0
64208: LESS
64209: IFFALSE 64221
// min_x := 0 else
64211: LD_ADDR_VAR 0 7
64215: PUSH
64216: LD_INT 0
64218: ST_TO_ADDR
64219: GO 64237
// min_x := x - r ;
64221: LD_ADDR_VAR 0 7
64225: PUSH
64226: LD_VAR 0 2
64230: PUSH
64231: LD_VAR 0 4
64235: MINUS
64236: ST_TO_ADDR
// if y - r < 0 then
64237: LD_VAR 0 3
64241: PUSH
64242: LD_VAR 0 4
64246: MINUS
64247: PUSH
64248: LD_INT 0
64250: LESS
64251: IFFALSE 64263
// min_y := 0 else
64253: LD_ADDR_VAR 0 8
64257: PUSH
64258: LD_INT 0
64260: ST_TO_ADDR
64261: GO 64279
// min_y := y - r ;
64263: LD_ADDR_VAR 0 8
64267: PUSH
64268: LD_VAR 0 3
64272: PUSH
64273: LD_VAR 0 4
64277: MINUS
64278: ST_TO_ADDR
// max_x := x + r ;
64279: LD_ADDR_VAR 0 9
64283: PUSH
64284: LD_VAR 0 2
64288: PUSH
64289: LD_VAR 0 4
64293: PLUS
64294: ST_TO_ADDR
// max_y := y + r ;
64295: LD_ADDR_VAR 0 10
64299: PUSH
64300: LD_VAR 0 3
64304: PUSH
64305: LD_VAR 0 4
64309: PLUS
64310: ST_TO_ADDR
// for _x = min_x to max_x do
64311: LD_ADDR_VAR 0 11
64315: PUSH
64316: DOUBLE
64317: LD_VAR 0 7
64321: DEC
64322: ST_TO_ADDR
64323: LD_VAR 0 9
64327: PUSH
64328: FOR_TO
64329: IFFALSE 64446
// for _y = min_y to max_y do
64331: LD_ADDR_VAR 0 12
64335: PUSH
64336: DOUBLE
64337: LD_VAR 0 8
64341: DEC
64342: ST_TO_ADDR
64343: LD_VAR 0 10
64347: PUSH
64348: FOR_TO
64349: IFFALSE 64442
// begin if not ValidHex ( _x , _y ) then
64351: LD_VAR 0 11
64355: PPUSH
64356: LD_VAR 0 12
64360: PPUSH
64361: CALL_OW 488
64365: NOT
64366: IFFALSE 64370
// continue ;
64368: GO 64348
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
64370: LD_VAR 0 11
64374: PPUSH
64375: LD_VAR 0 12
64379: PPUSH
64380: CALL_OW 351
64384: PUSH
64385: LD_VAR 0 11
64389: PPUSH
64390: LD_VAR 0 12
64394: PPUSH
64395: CALL_OW 554
64399: AND
64400: IFFALSE 64440
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
64402: LD_ADDR_VAR 0 13
64406: PUSH
64407: LD_VAR 0 13
64411: PPUSH
64412: LD_VAR 0 13
64416: PUSH
64417: LD_INT 1
64419: PLUS
64420: PPUSH
64421: LD_VAR 0 11
64425: PUSH
64426: LD_VAR 0 12
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PPUSH
64435: CALL_OW 2
64439: ST_TO_ADDR
// end ;
64440: GO 64348
64442: POP
64443: POP
64444: GO 64328
64446: POP
64447: POP
// if not list then
64448: LD_VAR 0 13
64452: NOT
64453: IFFALSE 64457
// exit ;
64455: GO 64528
// for i in list do
64457: LD_ADDR_VAR 0 6
64461: PUSH
64462: LD_VAR 0 13
64466: PUSH
64467: FOR_IN
64468: IFFALSE 64526
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
64470: LD_VAR 0 1
64474: PPUSH
64475: LD_STRING M
64477: PUSH
64478: LD_VAR 0 6
64482: PUSH
64483: LD_INT 1
64485: ARRAY
64486: PUSH
64487: LD_VAR 0 6
64491: PUSH
64492: LD_INT 2
64494: ARRAY
64495: PUSH
64496: LD_INT 0
64498: PUSH
64499: LD_INT 0
64501: PUSH
64502: LD_INT 0
64504: PUSH
64505: LD_INT 0
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: PUSH
64517: EMPTY
64518: LIST
64519: PPUSH
64520: CALL_OW 447
64524: GO 64467
64526: POP
64527: POP
// end ;
64528: LD_VAR 0 5
64532: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
64533: LD_EXP 114
64537: NOT
64538: IFFALSE 64588
64540: GO 64542
64542: DISABLE
// begin initHack := true ;
64543: LD_ADDR_EXP 114
64547: PUSH
64548: LD_INT 1
64550: ST_TO_ADDR
// hackTanks := [ ] ;
64551: LD_ADDR_EXP 115
64555: PUSH
64556: EMPTY
64557: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
64558: LD_ADDR_EXP 116
64562: PUSH
64563: EMPTY
64564: ST_TO_ADDR
// hackLimit := 3 ;
64565: LD_ADDR_EXP 117
64569: PUSH
64570: LD_INT 3
64572: ST_TO_ADDR
// hackDist := 12 ;
64573: LD_ADDR_EXP 118
64577: PUSH
64578: LD_INT 12
64580: ST_TO_ADDR
// hackCounter := [ ] ;
64581: LD_ADDR_EXP 119
64585: PUSH
64586: EMPTY
64587: ST_TO_ADDR
// end ;
64588: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
64589: LD_EXP 114
64593: PUSH
64594: LD_INT 34
64596: PUSH
64597: LD_EXP 40
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PPUSH
64606: CALL_OW 69
64610: AND
64611: IFFALSE 64866
64613: GO 64615
64615: DISABLE
64616: LD_INT 0
64618: PPUSH
64619: PPUSH
// begin enable ;
64620: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
64621: LD_ADDR_VAR 0 1
64625: PUSH
64626: LD_INT 34
64628: PUSH
64629: LD_EXP 40
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PPUSH
64638: CALL_OW 69
64642: PUSH
64643: FOR_IN
64644: IFFALSE 64864
// begin if not i in hackTanks then
64646: LD_VAR 0 1
64650: PUSH
64651: LD_EXP 115
64655: IN
64656: NOT
64657: IFFALSE 64740
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
64659: LD_ADDR_EXP 115
64663: PUSH
64664: LD_EXP 115
64668: PPUSH
64669: LD_EXP 115
64673: PUSH
64674: LD_INT 1
64676: PLUS
64677: PPUSH
64678: LD_VAR 0 1
64682: PPUSH
64683: CALL_OW 1
64687: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
64688: LD_ADDR_EXP 116
64692: PUSH
64693: LD_EXP 116
64697: PPUSH
64698: LD_EXP 116
64702: PUSH
64703: LD_INT 1
64705: PLUS
64706: PPUSH
64707: EMPTY
64708: PPUSH
64709: CALL_OW 1
64713: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
64714: LD_ADDR_EXP 119
64718: PUSH
64719: LD_EXP 119
64723: PPUSH
64724: LD_EXP 119
64728: PUSH
64729: LD_INT 1
64731: PLUS
64732: PPUSH
64733: EMPTY
64734: PPUSH
64735: CALL_OW 1
64739: ST_TO_ADDR
// end ; if not IsOk ( i ) then
64740: LD_VAR 0 1
64744: PPUSH
64745: CALL_OW 302
64749: NOT
64750: IFFALSE 64763
// begin HackUnlinkAll ( i ) ;
64752: LD_VAR 0 1
64756: PPUSH
64757: CALL 64869 0 1
// continue ;
64761: GO 64643
// end ; HackCheckCapturedStatus ( i ) ;
64763: LD_VAR 0 1
64767: PPUSH
64768: CALL 65312 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
64772: LD_ADDR_VAR 0 2
64776: PUSH
64777: LD_INT 81
64779: PUSH
64780: LD_VAR 0 1
64784: PPUSH
64785: CALL_OW 255
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 33
64796: PUSH
64797: LD_INT 3
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 91
64806: PUSH
64807: LD_VAR 0 1
64811: PUSH
64812: LD_EXP 118
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 50
64824: PUSH
64825: EMPTY
64826: LIST
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: PPUSH
64834: CALL_OW 69
64838: ST_TO_ADDR
// if not tmp then
64839: LD_VAR 0 2
64843: NOT
64844: IFFALSE 64848
// continue ;
64846: GO 64643
// HackLink ( i , tmp ) ;
64848: LD_VAR 0 1
64852: PPUSH
64853: LD_VAR 0 2
64857: PPUSH
64858: CALL 65005 0 2
// end ;
64862: GO 64643
64864: POP
64865: POP
// end ;
64866: PPOPN 2
64868: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
64869: LD_INT 0
64871: PPUSH
64872: PPUSH
64873: PPUSH
// if not hack in hackTanks then
64874: LD_VAR 0 1
64878: PUSH
64879: LD_EXP 115
64883: IN
64884: NOT
64885: IFFALSE 64889
// exit ;
64887: GO 65000
// index := GetElementIndex ( hackTanks , hack ) ;
64889: LD_ADDR_VAR 0 4
64893: PUSH
64894: LD_EXP 115
64898: PPUSH
64899: LD_VAR 0 1
64903: PPUSH
64904: CALL 16361 0 2
64908: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
64909: LD_EXP 116
64913: PUSH
64914: LD_VAR 0 4
64918: ARRAY
64919: IFFALSE 65000
// begin for i in hackTanksCaptured [ index ] do
64921: LD_ADDR_VAR 0 3
64925: PUSH
64926: LD_EXP 116
64930: PUSH
64931: LD_VAR 0 4
64935: ARRAY
64936: PUSH
64937: FOR_IN
64938: IFFALSE 64964
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
64940: LD_VAR 0 3
64944: PUSH
64945: LD_INT 1
64947: ARRAY
64948: PPUSH
64949: LD_VAR 0 3
64953: PUSH
64954: LD_INT 2
64956: ARRAY
64957: PPUSH
64958: CALL_OW 235
64962: GO 64937
64964: POP
64965: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
64966: LD_ADDR_EXP 116
64970: PUSH
64971: LD_EXP 116
64975: PPUSH
64976: LD_VAR 0 4
64980: PPUSH
64981: EMPTY
64982: PPUSH
64983: CALL_OW 1
64987: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
64988: LD_VAR 0 1
64992: PPUSH
64993: LD_INT 0
64995: PPUSH
64996: CALL_OW 505
// end ; end ;
65000: LD_VAR 0 2
65004: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
65005: LD_INT 0
65007: PPUSH
65008: PPUSH
65009: PPUSH
// if not hack in hackTanks or not vehicles then
65010: LD_VAR 0 1
65014: PUSH
65015: LD_EXP 115
65019: IN
65020: NOT
65021: PUSH
65022: LD_VAR 0 2
65026: NOT
65027: OR
65028: IFFALSE 65032
// exit ;
65030: GO 65307
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
65032: LD_ADDR_VAR 0 2
65036: PUSH
65037: LD_VAR 0 1
65041: PPUSH
65042: LD_VAR 0 2
65046: PPUSH
65047: LD_INT 1
65049: PPUSH
65050: LD_INT 1
65052: PPUSH
65053: CALL 17011 0 4
65057: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
65058: LD_ADDR_VAR 0 5
65062: PUSH
65063: LD_EXP 115
65067: PPUSH
65068: LD_VAR 0 1
65072: PPUSH
65073: CALL 16361 0 2
65077: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
65078: LD_EXP 116
65082: PUSH
65083: LD_VAR 0 5
65087: ARRAY
65088: PUSH
65089: LD_EXP 117
65093: LESS
65094: IFFALSE 65283
// begin for i := 1 to vehicles do
65096: LD_ADDR_VAR 0 4
65100: PUSH
65101: DOUBLE
65102: LD_INT 1
65104: DEC
65105: ST_TO_ADDR
65106: LD_VAR 0 2
65110: PUSH
65111: FOR_TO
65112: IFFALSE 65281
// begin if hackTanksCaptured [ index ] = hackLimit then
65114: LD_EXP 116
65118: PUSH
65119: LD_VAR 0 5
65123: ARRAY
65124: PUSH
65125: LD_EXP 117
65129: EQUAL
65130: IFFALSE 65134
// break ;
65132: GO 65281
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
65134: LD_ADDR_EXP 119
65138: PUSH
65139: LD_EXP 119
65143: PPUSH
65144: LD_VAR 0 5
65148: PPUSH
65149: LD_EXP 119
65153: PUSH
65154: LD_VAR 0 5
65158: ARRAY
65159: PUSH
65160: LD_INT 1
65162: PLUS
65163: PPUSH
65164: CALL_OW 1
65168: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
65169: LD_ADDR_EXP 116
65173: PUSH
65174: LD_EXP 116
65178: PPUSH
65179: LD_VAR 0 5
65183: PUSH
65184: LD_EXP 116
65188: PUSH
65189: LD_VAR 0 5
65193: ARRAY
65194: PUSH
65195: LD_INT 1
65197: PLUS
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PPUSH
65203: LD_VAR 0 2
65207: PUSH
65208: LD_VAR 0 4
65212: ARRAY
65213: PUSH
65214: LD_VAR 0 2
65218: PUSH
65219: LD_VAR 0 4
65223: ARRAY
65224: PPUSH
65225: CALL_OW 255
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PPUSH
65234: CALL 16576 0 3
65238: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
65239: LD_VAR 0 2
65243: PUSH
65244: LD_VAR 0 4
65248: ARRAY
65249: PPUSH
65250: LD_VAR 0 1
65254: PPUSH
65255: CALL_OW 255
65259: PPUSH
65260: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
65264: LD_VAR 0 2
65268: PUSH
65269: LD_VAR 0 4
65273: ARRAY
65274: PPUSH
65275: CALL_OW 141
// end ;
65279: GO 65111
65281: POP
65282: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
65283: LD_VAR 0 1
65287: PPUSH
65288: LD_EXP 116
65292: PUSH
65293: LD_VAR 0 5
65297: ARRAY
65298: PUSH
65299: LD_INT 0
65301: PLUS
65302: PPUSH
65303: CALL_OW 505
// end ;
65307: LD_VAR 0 3
65311: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
65312: LD_INT 0
65314: PPUSH
65315: PPUSH
65316: PPUSH
65317: PPUSH
// if not hack in hackTanks then
65318: LD_VAR 0 1
65322: PUSH
65323: LD_EXP 115
65327: IN
65328: NOT
65329: IFFALSE 65333
// exit ;
65331: GO 65573
// index := GetElementIndex ( hackTanks , hack ) ;
65333: LD_ADDR_VAR 0 4
65337: PUSH
65338: LD_EXP 115
65342: PPUSH
65343: LD_VAR 0 1
65347: PPUSH
65348: CALL 16361 0 2
65352: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
65353: LD_ADDR_VAR 0 3
65357: PUSH
65358: DOUBLE
65359: LD_EXP 116
65363: PUSH
65364: LD_VAR 0 4
65368: ARRAY
65369: INC
65370: ST_TO_ADDR
65371: LD_INT 1
65373: PUSH
65374: FOR_DOWNTO
65375: IFFALSE 65547
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
65377: LD_ADDR_VAR 0 5
65381: PUSH
65382: LD_EXP 116
65386: PUSH
65387: LD_VAR 0 4
65391: ARRAY
65392: PUSH
65393: LD_VAR 0 3
65397: ARRAY
65398: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
65399: LD_VAR 0 5
65403: PUSH
65404: LD_INT 1
65406: ARRAY
65407: PPUSH
65408: CALL_OW 302
65412: NOT
65413: PUSH
65414: LD_VAR 0 5
65418: PUSH
65419: LD_INT 1
65421: ARRAY
65422: PPUSH
65423: CALL_OW 255
65427: PUSH
65428: LD_VAR 0 1
65432: PPUSH
65433: CALL_OW 255
65437: NONEQUAL
65438: OR
65439: IFFALSE 65545
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
65441: LD_VAR 0 5
65445: PUSH
65446: LD_INT 1
65448: ARRAY
65449: PPUSH
65450: CALL_OW 305
65454: PUSH
65455: LD_VAR 0 5
65459: PUSH
65460: LD_INT 1
65462: ARRAY
65463: PPUSH
65464: CALL_OW 255
65468: PUSH
65469: LD_VAR 0 1
65473: PPUSH
65474: CALL_OW 255
65478: EQUAL
65479: AND
65480: IFFALSE 65504
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
65482: LD_VAR 0 5
65486: PUSH
65487: LD_INT 1
65489: ARRAY
65490: PPUSH
65491: LD_VAR 0 5
65495: PUSH
65496: LD_INT 2
65498: ARRAY
65499: PPUSH
65500: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
65504: LD_ADDR_EXP 116
65508: PUSH
65509: LD_EXP 116
65513: PPUSH
65514: LD_VAR 0 4
65518: PPUSH
65519: LD_EXP 116
65523: PUSH
65524: LD_VAR 0 4
65528: ARRAY
65529: PPUSH
65530: LD_VAR 0 3
65534: PPUSH
65535: CALL_OW 3
65539: PPUSH
65540: CALL_OW 1
65544: ST_TO_ADDR
// end ; end ;
65545: GO 65374
65547: POP
65548: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
65549: LD_VAR 0 1
65553: PPUSH
65554: LD_EXP 116
65558: PUSH
65559: LD_VAR 0 4
65563: ARRAY
65564: PUSH
65565: LD_INT 0
65567: PLUS
65568: PPUSH
65569: CALL_OW 505
// end ;
65573: LD_VAR 0 2
65577: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
65578: LD_INT 0
65580: PPUSH
65581: PPUSH
65582: PPUSH
65583: PPUSH
// if not hack in hackTanks then
65584: LD_VAR 0 1
65588: PUSH
65589: LD_EXP 115
65593: IN
65594: NOT
65595: IFFALSE 65599
// exit ;
65597: GO 65684
// index := GetElementIndex ( hackTanks , hack ) ;
65599: LD_ADDR_VAR 0 5
65603: PUSH
65604: LD_EXP 115
65608: PPUSH
65609: LD_VAR 0 1
65613: PPUSH
65614: CALL 16361 0 2
65618: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
65619: LD_ADDR_VAR 0 4
65623: PUSH
65624: DOUBLE
65625: LD_INT 1
65627: DEC
65628: ST_TO_ADDR
65629: LD_EXP 116
65633: PUSH
65634: LD_VAR 0 5
65638: ARRAY
65639: PUSH
65640: FOR_TO
65641: IFFALSE 65682
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
65643: LD_EXP 116
65647: PUSH
65648: LD_VAR 0 5
65652: ARRAY
65653: PUSH
65654: LD_VAR 0 4
65658: ARRAY
65659: PUSH
65660: LD_INT 1
65662: ARRAY
65663: PUSH
65664: LD_VAR 0 2
65668: EQUAL
65669: IFFALSE 65680
// KillUnit ( vehicle ) ;
65671: LD_VAR 0 2
65675: PPUSH
65676: CALL_OW 66
65680: GO 65640
65682: POP
65683: POP
// end ;
65684: LD_VAR 0 3
65688: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
65689: LD_EXP 120
65693: NOT
65694: IFFALSE 65729
65696: GO 65698
65698: DISABLE
// begin initMiner := true ;
65699: LD_ADDR_EXP 120
65703: PUSH
65704: LD_INT 1
65706: ST_TO_ADDR
// minersList := [ ] ;
65707: LD_ADDR_EXP 121
65711: PUSH
65712: EMPTY
65713: ST_TO_ADDR
// minerMinesList := [ ] ;
65714: LD_ADDR_EXP 122
65718: PUSH
65719: EMPTY
65720: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
65721: LD_ADDR_EXP 123
65725: PUSH
65726: LD_INT 5
65728: ST_TO_ADDR
// end ;
65729: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
65730: LD_EXP 120
65734: PUSH
65735: LD_INT 34
65737: PUSH
65738: LD_EXP 45
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PPUSH
65747: CALL_OW 69
65751: AND
65752: IFFALSE 66215
65754: GO 65756
65756: DISABLE
65757: LD_INT 0
65759: PPUSH
65760: PPUSH
65761: PPUSH
65762: PPUSH
// begin enable ;
65763: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
65764: LD_ADDR_VAR 0 1
65768: PUSH
65769: LD_INT 34
65771: PUSH
65772: LD_EXP 45
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PPUSH
65781: CALL_OW 69
65785: PUSH
65786: FOR_IN
65787: IFFALSE 65859
// begin if not i in minersList then
65789: LD_VAR 0 1
65793: PUSH
65794: LD_EXP 121
65798: IN
65799: NOT
65800: IFFALSE 65857
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
65802: LD_ADDR_EXP 121
65806: PUSH
65807: LD_EXP 121
65811: PPUSH
65812: LD_EXP 121
65816: PUSH
65817: LD_INT 1
65819: PLUS
65820: PPUSH
65821: LD_VAR 0 1
65825: PPUSH
65826: CALL_OW 1
65830: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
65831: LD_ADDR_EXP 122
65835: PUSH
65836: LD_EXP 122
65840: PPUSH
65841: LD_EXP 122
65845: PUSH
65846: LD_INT 1
65848: PLUS
65849: PPUSH
65850: EMPTY
65851: PPUSH
65852: CALL_OW 1
65856: ST_TO_ADDR
// end end ;
65857: GO 65786
65859: POP
65860: POP
// for i := minerMinesList downto 1 do
65861: LD_ADDR_VAR 0 1
65865: PUSH
65866: DOUBLE
65867: LD_EXP 122
65871: INC
65872: ST_TO_ADDR
65873: LD_INT 1
65875: PUSH
65876: FOR_DOWNTO
65877: IFFALSE 66213
// begin if IsLive ( minersList [ i ] ) then
65879: LD_EXP 121
65883: PUSH
65884: LD_VAR 0 1
65888: ARRAY
65889: PPUSH
65890: CALL_OW 300
65894: IFFALSE 65922
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
65896: LD_EXP 121
65900: PUSH
65901: LD_VAR 0 1
65905: ARRAY
65906: PPUSH
65907: LD_EXP 122
65911: PUSH
65912: LD_VAR 0 1
65916: ARRAY
65917: PPUSH
65918: CALL_OW 505
// if not minerMinesList [ i ] then
65922: LD_EXP 122
65926: PUSH
65927: LD_VAR 0 1
65931: ARRAY
65932: NOT
65933: IFFALSE 65937
// continue ;
65935: GO 65876
// for j := minerMinesList [ i ] downto 1 do
65937: LD_ADDR_VAR 0 2
65941: PUSH
65942: DOUBLE
65943: LD_EXP 122
65947: PUSH
65948: LD_VAR 0 1
65952: ARRAY
65953: INC
65954: ST_TO_ADDR
65955: LD_INT 1
65957: PUSH
65958: FOR_DOWNTO
65959: IFFALSE 66209
// begin side := GetSide ( minersList [ i ] ) ;
65961: LD_ADDR_VAR 0 3
65965: PUSH
65966: LD_EXP 121
65970: PUSH
65971: LD_VAR 0 1
65975: ARRAY
65976: PPUSH
65977: CALL_OW 255
65981: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
65982: LD_ADDR_VAR 0 4
65986: PUSH
65987: LD_EXP 122
65991: PUSH
65992: LD_VAR 0 1
65996: ARRAY
65997: PUSH
65998: LD_VAR 0 2
66002: ARRAY
66003: PUSH
66004: LD_INT 1
66006: ARRAY
66007: PPUSH
66008: LD_EXP 122
66012: PUSH
66013: LD_VAR 0 1
66017: ARRAY
66018: PUSH
66019: LD_VAR 0 2
66023: ARRAY
66024: PUSH
66025: LD_INT 2
66027: ARRAY
66028: PPUSH
66029: CALL_OW 428
66033: ST_TO_ADDR
// if not tmp then
66034: LD_VAR 0 4
66038: NOT
66039: IFFALSE 66043
// continue ;
66041: GO 65958
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
66043: LD_VAR 0 4
66047: PUSH
66048: LD_INT 81
66050: PUSH
66051: LD_VAR 0 3
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PPUSH
66060: CALL_OW 69
66064: IN
66065: PUSH
66066: LD_EXP 122
66070: PUSH
66071: LD_VAR 0 1
66075: ARRAY
66076: PUSH
66077: LD_VAR 0 2
66081: ARRAY
66082: PUSH
66083: LD_INT 1
66085: ARRAY
66086: PPUSH
66087: LD_EXP 122
66091: PUSH
66092: LD_VAR 0 1
66096: ARRAY
66097: PUSH
66098: LD_VAR 0 2
66102: ARRAY
66103: PUSH
66104: LD_INT 2
66106: ARRAY
66107: PPUSH
66108: CALL_OW 458
66112: AND
66113: IFFALSE 66207
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
66115: LD_EXP 122
66119: PUSH
66120: LD_VAR 0 1
66124: ARRAY
66125: PUSH
66126: LD_VAR 0 2
66130: ARRAY
66131: PUSH
66132: LD_INT 1
66134: ARRAY
66135: PPUSH
66136: LD_EXP 122
66140: PUSH
66141: LD_VAR 0 1
66145: ARRAY
66146: PUSH
66147: LD_VAR 0 2
66151: ARRAY
66152: PUSH
66153: LD_INT 2
66155: ARRAY
66156: PPUSH
66157: LD_VAR 0 3
66161: PPUSH
66162: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
66166: LD_ADDR_EXP 122
66170: PUSH
66171: LD_EXP 122
66175: PPUSH
66176: LD_VAR 0 1
66180: PPUSH
66181: LD_EXP 122
66185: PUSH
66186: LD_VAR 0 1
66190: ARRAY
66191: PPUSH
66192: LD_VAR 0 2
66196: PPUSH
66197: CALL_OW 3
66201: PPUSH
66202: CALL_OW 1
66206: ST_TO_ADDR
// end ; end ;
66207: GO 65958
66209: POP
66210: POP
// end ;
66211: GO 65876
66213: POP
66214: POP
// end ;
66215: PPOPN 4
66217: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
66218: LD_INT 0
66220: PPUSH
66221: PPUSH
// result := false ;
66222: LD_ADDR_VAR 0 4
66226: PUSH
66227: LD_INT 0
66229: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
66230: LD_VAR 0 1
66234: PPUSH
66235: CALL_OW 264
66239: PUSH
66240: LD_EXP 45
66244: EQUAL
66245: NOT
66246: IFFALSE 66250
// exit ;
66248: GO 66490
// index := GetElementIndex ( minersList , unit ) ;
66250: LD_ADDR_VAR 0 5
66254: PUSH
66255: LD_EXP 121
66259: PPUSH
66260: LD_VAR 0 1
66264: PPUSH
66265: CALL 16361 0 2
66269: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
66270: LD_EXP 122
66274: PUSH
66275: LD_VAR 0 5
66279: ARRAY
66280: PUSH
66281: LD_EXP 123
66285: GREATEREQUAL
66286: IFFALSE 66290
// exit ;
66288: GO 66490
// ComMoveXY ( unit , x , y ) ;
66290: LD_VAR 0 1
66294: PPUSH
66295: LD_VAR 0 2
66299: PPUSH
66300: LD_VAR 0 3
66304: PPUSH
66305: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
66309: LD_INT 35
66311: PPUSH
66312: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
66316: LD_VAR 0 1
66320: PPUSH
66321: LD_VAR 0 2
66325: PPUSH
66326: LD_VAR 0 3
66330: PPUSH
66331: CALL 47134 0 3
66335: NOT
66336: PUSH
66337: LD_VAR 0 1
66341: PPUSH
66342: CALL_OW 314
66346: AND
66347: IFFALSE 66351
// exit ;
66349: GO 66490
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
66351: LD_VAR 0 2
66355: PPUSH
66356: LD_VAR 0 3
66360: PPUSH
66361: CALL_OW 428
66365: PUSH
66366: LD_VAR 0 1
66370: EQUAL
66371: PUSH
66372: LD_VAR 0 1
66376: PPUSH
66377: CALL_OW 314
66381: NOT
66382: AND
66383: IFFALSE 66309
// PlaySoundXY ( x , y , PlantMine ) ;
66385: LD_VAR 0 2
66389: PPUSH
66390: LD_VAR 0 3
66394: PPUSH
66395: LD_STRING PlantMine
66397: PPUSH
66398: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
66402: LD_VAR 0 2
66406: PPUSH
66407: LD_VAR 0 3
66411: PPUSH
66412: LD_VAR 0 1
66416: PPUSH
66417: CALL_OW 255
66421: PPUSH
66422: LD_INT 0
66424: PPUSH
66425: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
66429: LD_ADDR_EXP 122
66433: PUSH
66434: LD_EXP 122
66438: PPUSH
66439: LD_VAR 0 5
66443: PUSH
66444: LD_EXP 122
66448: PUSH
66449: LD_VAR 0 5
66453: ARRAY
66454: PUSH
66455: LD_INT 1
66457: PLUS
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PPUSH
66463: LD_VAR 0 2
66467: PUSH
66468: LD_VAR 0 3
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PPUSH
66477: CALL 16576 0 3
66481: ST_TO_ADDR
// result := true ;
66482: LD_ADDR_VAR 0 4
66486: PUSH
66487: LD_INT 1
66489: ST_TO_ADDR
// end ;
66490: LD_VAR 0 4
66494: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
66495: LD_INT 0
66497: PPUSH
66498: PPUSH
66499: PPUSH
// if not unit in minersList then
66500: LD_VAR 0 1
66504: PUSH
66505: LD_EXP 121
66509: IN
66510: NOT
66511: IFFALSE 66515
// exit ;
66513: GO 66907
// index := GetElementIndex ( minersList , unit ) ;
66515: LD_ADDR_VAR 0 6
66519: PUSH
66520: LD_EXP 121
66524: PPUSH
66525: LD_VAR 0 1
66529: PPUSH
66530: CALL 16361 0 2
66534: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
66535: LD_ADDR_VAR 0 5
66539: PUSH
66540: DOUBLE
66541: LD_EXP 122
66545: PUSH
66546: LD_VAR 0 6
66550: ARRAY
66551: INC
66552: ST_TO_ADDR
66553: LD_INT 1
66555: PUSH
66556: FOR_DOWNTO
66557: IFFALSE 66718
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
66559: LD_EXP 122
66563: PUSH
66564: LD_VAR 0 6
66568: ARRAY
66569: PUSH
66570: LD_VAR 0 5
66574: ARRAY
66575: PUSH
66576: LD_INT 1
66578: ARRAY
66579: PUSH
66580: LD_VAR 0 2
66584: EQUAL
66585: PUSH
66586: LD_EXP 122
66590: PUSH
66591: LD_VAR 0 6
66595: ARRAY
66596: PUSH
66597: LD_VAR 0 5
66601: ARRAY
66602: PUSH
66603: LD_INT 2
66605: ARRAY
66606: PUSH
66607: LD_VAR 0 3
66611: EQUAL
66612: AND
66613: IFFALSE 66716
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
66615: LD_EXP 122
66619: PUSH
66620: LD_VAR 0 6
66624: ARRAY
66625: PUSH
66626: LD_VAR 0 5
66630: ARRAY
66631: PUSH
66632: LD_INT 1
66634: ARRAY
66635: PPUSH
66636: LD_EXP 122
66640: PUSH
66641: LD_VAR 0 6
66645: ARRAY
66646: PUSH
66647: LD_VAR 0 5
66651: ARRAY
66652: PUSH
66653: LD_INT 2
66655: ARRAY
66656: PPUSH
66657: LD_VAR 0 1
66661: PPUSH
66662: CALL_OW 255
66666: PPUSH
66667: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
66671: LD_ADDR_EXP 122
66675: PUSH
66676: LD_EXP 122
66680: PPUSH
66681: LD_VAR 0 6
66685: PPUSH
66686: LD_EXP 122
66690: PUSH
66691: LD_VAR 0 6
66695: ARRAY
66696: PPUSH
66697: LD_VAR 0 5
66701: PPUSH
66702: CALL_OW 3
66706: PPUSH
66707: CALL_OW 1
66711: ST_TO_ADDR
// exit ;
66712: POP
66713: POP
66714: GO 66907
// end ; end ;
66716: GO 66556
66718: POP
66719: POP
// for i := minerMinesList [ index ] downto 1 do
66720: LD_ADDR_VAR 0 5
66724: PUSH
66725: DOUBLE
66726: LD_EXP 122
66730: PUSH
66731: LD_VAR 0 6
66735: ARRAY
66736: INC
66737: ST_TO_ADDR
66738: LD_INT 1
66740: PUSH
66741: FOR_DOWNTO
66742: IFFALSE 66905
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
66744: LD_EXP 122
66748: PUSH
66749: LD_VAR 0 6
66753: ARRAY
66754: PUSH
66755: LD_VAR 0 5
66759: ARRAY
66760: PUSH
66761: LD_INT 1
66763: ARRAY
66764: PPUSH
66765: LD_EXP 122
66769: PUSH
66770: LD_VAR 0 6
66774: ARRAY
66775: PUSH
66776: LD_VAR 0 5
66780: ARRAY
66781: PUSH
66782: LD_INT 2
66784: ARRAY
66785: PPUSH
66786: LD_VAR 0 2
66790: PPUSH
66791: LD_VAR 0 3
66795: PPUSH
66796: CALL_OW 298
66800: PUSH
66801: LD_INT 6
66803: LESS
66804: IFFALSE 66903
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
66806: LD_EXP 122
66810: PUSH
66811: LD_VAR 0 6
66815: ARRAY
66816: PUSH
66817: LD_VAR 0 5
66821: ARRAY
66822: PUSH
66823: LD_INT 1
66825: ARRAY
66826: PPUSH
66827: LD_EXP 122
66831: PUSH
66832: LD_VAR 0 6
66836: ARRAY
66837: PUSH
66838: LD_VAR 0 5
66842: ARRAY
66843: PUSH
66844: LD_INT 2
66846: ARRAY
66847: PPUSH
66848: LD_VAR 0 1
66852: PPUSH
66853: CALL_OW 255
66857: PPUSH
66858: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
66862: LD_ADDR_EXP 122
66866: PUSH
66867: LD_EXP 122
66871: PPUSH
66872: LD_VAR 0 6
66876: PPUSH
66877: LD_EXP 122
66881: PUSH
66882: LD_VAR 0 6
66886: ARRAY
66887: PPUSH
66888: LD_VAR 0 5
66892: PPUSH
66893: CALL_OW 3
66897: PPUSH
66898: CALL_OW 1
66902: ST_TO_ADDR
// end ; end ;
66903: GO 66741
66905: POP
66906: POP
// end ;
66907: LD_VAR 0 4
66911: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
66912: LD_INT 0
66914: PPUSH
66915: PPUSH
66916: PPUSH
66917: PPUSH
66918: PPUSH
66919: PPUSH
66920: PPUSH
66921: PPUSH
66922: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
66923: LD_VAR 0 1
66927: PPUSH
66928: CALL_OW 264
66932: PUSH
66933: LD_EXP 45
66937: EQUAL
66938: NOT
66939: PUSH
66940: LD_VAR 0 1
66944: PUSH
66945: LD_EXP 121
66949: IN
66950: NOT
66951: OR
66952: IFFALSE 66956
// exit ;
66954: GO 67278
// index := GetElementIndex ( minersList , unit ) ;
66956: LD_ADDR_VAR 0 6
66960: PUSH
66961: LD_EXP 121
66965: PPUSH
66966: LD_VAR 0 1
66970: PPUSH
66971: CALL 16361 0 2
66975: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
66976: LD_ADDR_VAR 0 8
66980: PUSH
66981: LD_EXP 123
66985: PUSH
66986: LD_EXP 122
66990: PUSH
66991: LD_VAR 0 6
66995: ARRAY
66996: MINUS
66997: ST_TO_ADDR
// if not minesFreeAmount then
66998: LD_VAR 0 8
67002: NOT
67003: IFFALSE 67007
// exit ;
67005: GO 67278
// tmp := [ ] ;
67007: LD_ADDR_VAR 0 7
67011: PUSH
67012: EMPTY
67013: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
67014: LD_ADDR_VAR 0 5
67018: PUSH
67019: DOUBLE
67020: LD_INT 1
67022: DEC
67023: ST_TO_ADDR
67024: LD_VAR 0 8
67028: PUSH
67029: FOR_TO
67030: IFFALSE 67225
// begin _d := rand ( 0 , 5 ) ;
67032: LD_ADDR_VAR 0 11
67036: PUSH
67037: LD_INT 0
67039: PPUSH
67040: LD_INT 5
67042: PPUSH
67043: CALL_OW 12
67047: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
67048: LD_ADDR_VAR 0 12
67052: PUSH
67053: LD_INT 2
67055: PPUSH
67056: LD_INT 6
67058: PPUSH
67059: CALL_OW 12
67063: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
67064: LD_ADDR_VAR 0 9
67068: PUSH
67069: LD_VAR 0 2
67073: PPUSH
67074: LD_VAR 0 11
67078: PPUSH
67079: LD_VAR 0 12
67083: PPUSH
67084: CALL_OW 272
67088: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
67089: LD_ADDR_VAR 0 10
67093: PUSH
67094: LD_VAR 0 3
67098: PPUSH
67099: LD_VAR 0 11
67103: PPUSH
67104: LD_VAR 0 12
67108: PPUSH
67109: CALL_OW 273
67113: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
67114: LD_VAR 0 9
67118: PPUSH
67119: LD_VAR 0 10
67123: PPUSH
67124: CALL_OW 488
67128: PUSH
67129: LD_VAR 0 9
67133: PUSH
67134: LD_VAR 0 10
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PUSH
67143: LD_VAR 0 7
67147: IN
67148: NOT
67149: AND
67150: PUSH
67151: LD_VAR 0 9
67155: PPUSH
67156: LD_VAR 0 10
67160: PPUSH
67161: CALL_OW 458
67165: NOT
67166: AND
67167: IFFALSE 67209
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
67169: LD_ADDR_VAR 0 7
67173: PUSH
67174: LD_VAR 0 7
67178: PPUSH
67179: LD_VAR 0 7
67183: PUSH
67184: LD_INT 1
67186: PLUS
67187: PPUSH
67188: LD_VAR 0 9
67192: PUSH
67193: LD_VAR 0 10
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PPUSH
67202: CALL_OW 1
67206: ST_TO_ADDR
67207: GO 67223
// i := i - 1 ;
67209: LD_ADDR_VAR 0 5
67213: PUSH
67214: LD_VAR 0 5
67218: PUSH
67219: LD_INT 1
67221: MINUS
67222: ST_TO_ADDR
// end ;
67223: GO 67029
67225: POP
67226: POP
// for i in tmp do
67227: LD_ADDR_VAR 0 5
67231: PUSH
67232: LD_VAR 0 7
67236: PUSH
67237: FOR_IN
67238: IFFALSE 67276
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
67240: LD_VAR 0 1
67244: PPUSH
67245: LD_VAR 0 5
67249: PUSH
67250: LD_INT 1
67252: ARRAY
67253: PPUSH
67254: LD_VAR 0 5
67258: PUSH
67259: LD_INT 2
67261: ARRAY
67262: PPUSH
67263: CALL 66218 0 3
67267: NOT
67268: IFFALSE 67274
// exit ;
67270: POP
67271: POP
67272: GO 67278
67274: GO 67237
67276: POP
67277: POP
// end ;
67278: LD_VAR 0 4
67282: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
67283: LD_INT 0
67285: PPUSH
67286: PPUSH
67287: PPUSH
67288: PPUSH
67289: PPUSH
67290: PPUSH
67291: PPUSH
// if not GetClass ( unit ) = class_sniper then
67292: LD_VAR 0 1
67296: PPUSH
67297: CALL_OW 257
67301: PUSH
67302: LD_INT 5
67304: EQUAL
67305: NOT
67306: IFFALSE 67310
// exit ;
67308: GO 67698
// dist := 8 ;
67310: LD_ADDR_VAR 0 5
67314: PUSH
67315: LD_INT 8
67317: ST_TO_ADDR
// viewRange := 12 ;
67318: LD_ADDR_VAR 0 7
67322: PUSH
67323: LD_INT 12
67325: ST_TO_ADDR
// side := GetSide ( unit ) ;
67326: LD_ADDR_VAR 0 6
67330: PUSH
67331: LD_VAR 0 1
67335: PPUSH
67336: CALL_OW 255
67340: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
67341: LD_INT 61
67343: PPUSH
67344: LD_VAR 0 6
67348: PPUSH
67349: CALL_OW 321
67353: PUSH
67354: LD_INT 2
67356: EQUAL
67357: IFFALSE 67367
// viewRange := 16 ;
67359: LD_ADDR_VAR 0 7
67363: PUSH
67364: LD_INT 16
67366: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
67367: LD_VAR 0 1
67371: PPUSH
67372: LD_VAR 0 2
67376: PPUSH
67377: LD_VAR 0 3
67381: PPUSH
67382: CALL_OW 297
67386: PUSH
67387: LD_VAR 0 5
67391: GREATER
67392: IFFALSE 67471
// begin ComMoveXY ( unit , x , y ) ;
67394: LD_VAR 0 1
67398: PPUSH
67399: LD_VAR 0 2
67403: PPUSH
67404: LD_VAR 0 3
67408: PPUSH
67409: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
67413: LD_INT 35
67415: PPUSH
67416: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
67420: LD_VAR 0 1
67424: PPUSH
67425: LD_VAR 0 2
67429: PPUSH
67430: LD_VAR 0 3
67434: PPUSH
67435: CALL 47134 0 3
67439: NOT
67440: IFFALSE 67444
// exit ;
67442: GO 67698
// until GetDistUnitXY ( unit , x , y ) < dist ;
67444: LD_VAR 0 1
67448: PPUSH
67449: LD_VAR 0 2
67453: PPUSH
67454: LD_VAR 0 3
67458: PPUSH
67459: CALL_OW 297
67463: PUSH
67464: LD_VAR 0 5
67468: LESS
67469: IFFALSE 67413
// end ; ComTurnXY ( unit , x , y ) ;
67471: LD_VAR 0 1
67475: PPUSH
67476: LD_VAR 0 2
67480: PPUSH
67481: LD_VAR 0 3
67485: PPUSH
67486: CALL_OW 118
// wait ( 5 ) ;
67490: LD_INT 5
67492: PPUSH
67493: CALL_OW 67
// _d := GetDir ( unit ) ;
67497: LD_ADDR_VAR 0 10
67501: PUSH
67502: LD_VAR 0 1
67506: PPUSH
67507: CALL_OW 254
67511: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
67512: LD_ADDR_VAR 0 8
67516: PUSH
67517: LD_VAR 0 1
67521: PPUSH
67522: CALL_OW 250
67526: PPUSH
67527: LD_VAR 0 10
67531: PPUSH
67532: LD_VAR 0 5
67536: PPUSH
67537: CALL_OW 272
67541: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
67542: LD_ADDR_VAR 0 9
67546: PUSH
67547: LD_VAR 0 1
67551: PPUSH
67552: CALL_OW 251
67556: PPUSH
67557: LD_VAR 0 10
67561: PPUSH
67562: LD_VAR 0 5
67566: PPUSH
67567: CALL_OW 273
67571: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67572: LD_VAR 0 8
67576: PPUSH
67577: LD_VAR 0 9
67581: PPUSH
67582: CALL_OW 488
67586: NOT
67587: IFFALSE 67591
// exit ;
67589: GO 67698
// ComAnimCustom ( unit , 1 ) ;
67591: LD_VAR 0 1
67595: PPUSH
67596: LD_INT 1
67598: PPUSH
67599: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
67603: LD_VAR 0 8
67607: PPUSH
67608: LD_VAR 0 9
67612: PPUSH
67613: LD_VAR 0 6
67617: PPUSH
67618: LD_VAR 0 7
67622: PPUSH
67623: CALL_OW 330
// repeat wait ( 1 ) ;
67627: LD_INT 1
67629: PPUSH
67630: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
67634: LD_VAR 0 1
67638: PPUSH
67639: CALL_OW 316
67643: PUSH
67644: LD_VAR 0 1
67648: PPUSH
67649: CALL_OW 314
67653: OR
67654: PUSH
67655: LD_VAR 0 1
67659: PPUSH
67660: CALL_OW 302
67664: NOT
67665: OR
67666: PUSH
67667: LD_VAR 0 1
67671: PPUSH
67672: CALL_OW 301
67676: OR
67677: IFFALSE 67627
// RemoveSeeing ( _x , _y , side ) ;
67679: LD_VAR 0 8
67683: PPUSH
67684: LD_VAR 0 9
67688: PPUSH
67689: LD_VAR 0 6
67693: PPUSH
67694: CALL_OW 331
// end ; end_of_file
67698: LD_VAR 0 4
67702: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67703: LD_VAR 0 1
67707: PPUSH
67708: LD_VAR 0 2
67712: PPUSH
67713: LD_VAR 0 3
67717: PPUSH
67718: LD_VAR 0 4
67722: PPUSH
67723: LD_VAR 0 5
67727: PPUSH
67728: LD_VAR 0 6
67732: PPUSH
67733: CALL 50353 0 6
// end ;
67737: PPOPN 6
67739: END
