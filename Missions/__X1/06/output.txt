// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 65885 0 0
// Init ;
   8: CALL 62 0 0
// if debug then
  12: LD_EXP 1
  16: IFFALSE 26
// Difficulty := 4 ;
  18: LD_ADDR_OWVAR 67
  22: PUSH
  23: LD_INT 4
  25: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  26: LD_INT 1
  28: PPUSH
  29: LD_INT 3
  31: PPUSH
  32: CALL 6882 0 2
// PrepareArabian ;
  36: CALL 381 0 0
// PrepareRussian ;
  40: CALL 7733 0 0
// Action ;
  44: CALL 15895 0 0
// if debug then
  48: LD_EXP 1
  52: IFFALSE 61
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ;
  61: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack , canRolfJoin ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 05_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 05_
  80: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_STRING 04_2_GaidarKilled
  88: PPUSH
  89: LD_INT 1
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_STRING 05_ConvoySavedCounter
 104: PPUSH
 105: LD_INT 0
 107: PPUSH
 108: CALL_OW 30
 112: ST_TO_ADDR
// bergkampfArrived := false ;
 113: LD_ADDR_EXP 3
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// omarArrived := false ;
 121: LD_ADDR_EXP 6
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// outpostDestroyed := false ;
 129: LD_ADDR_EXP 4
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// ruLoseCounter := 0 ;
 137: LD_ADDR_EXP 5
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// rolfScriptBase := false ;
 145: LD_ADDR_EXP 9
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// omarScriptBase := false ;
 153: LD_ADDR_EXP 10
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// linkedWithRolf := 0 ;
 161: LD_ADDR_EXP 12
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 169: LD_ADDR_EXP 26
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// rolfDied := false ;
 177: LD_ADDR_EXP 13
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// leninSpotted := false ;
 185: LD_ADDR_EXP 14
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// mortarConstructed := false ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// rolfHasVehicles := false ;
 201: LD_ADDR_EXP 16
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// leninScriptBase := true ;
 209: LD_ADDR_EXP 11
 213: PUSH
 214: LD_INT 1
 216: ST_TO_ADDR
// rolfWantVehicles := false ;
 217: LD_ADDR_EXP 17
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// omarWantVehicles := false ;
 225: LD_ADDR_EXP 18
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// omarHasVehicles := false ;
 233: LD_ADDR_EXP 22
 237: PUSH
 238: LD_INT 0
 240: ST_TO_ADDR
// escapeAllowed := false ;
 241: LD_ADDR_EXP 24
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 8 8$00 , 6 6$00 , 5 5$30 , 5 5$00 ] [ Difficulty ] ;
 249: LD_ADDR_EXP 19
 253: PUSH
 254: LD_INT 16800
 256: PUSH
 257: LD_INT 12600
 259: PUSH
 260: LD_INT 11550
 262: PUSH
 263: LD_INT 10500
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: PUSH
 272: LD_OWVAR 67
 276: ARRAY
 277: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 10 10$00 , 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] ;
 278: LD_ADDR_EXP 20
 282: PUSH
 283: LD_INT 21000
 285: PUSH
 286: LD_INT 18900
 288: PUSH
 289: LD_INT 16800
 291: PUSH
 292: LD_INT 14700
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: LIST
 299: LIST
 300: PUSH
 301: LD_OWVAR 67
 305: ARRAY
 306: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 307: LD_ADDR_EXP 21
 311: PUSH
 312: LD_INT 4
 314: PUSH
 315: LD_INT 5
 317: PUSH
 318: LD_INT 6
 320: PUSH
 321: LD_INT 6
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: PUSH
 330: LD_OWVAR 67
 334: ARRAY
 335: ST_TO_ADDR
// omarAttack := false ;
 336: LD_ADDR_EXP 23
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// disableAttackOnHeike := false ;
 344: LD_ADDR_EXP 27
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// escapeTimer := 4 4$00 ;
 352: LD_ADDR_EXP 25
 356: PUSH
 357: LD_INT 8400
 359: ST_TO_ADDR
// firstAttack := true ;
 360: LD_ADDR_EXP 28
 364: PUSH
 365: LD_INT 1
 367: ST_TO_ADDR
// canRolfJoin := true ;
 368: LD_ADDR_EXP 29
 372: PUSH
 373: LD_INT 1
 375: ST_TO_ADDR
// end ; end_of_file
 376: LD_VAR 0 1
 380: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , tmp ; begin
 381: LD_INT 0
 383: PPUSH
 384: PPUSH
 385: PPUSH
 386: PPUSH
 387: PPUSH
 388: PPUSH
 389: PPUSH
 390: PPUSH
 391: PPUSH
 392: PPUSH
 393: PPUSH
 394: PPUSH
// uc_nation := 2 ;
 395: LD_ADDR_OWVAR 21
 399: PUSH
 400: LD_INT 2
 402: ST_TO_ADDR
// uc_side := 5 ;
 403: LD_ADDR_OWVAR 20
 407: PUSH
 408: LD_INT 5
 410: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 411: LD_ADDR_EXP 38
 415: PUSH
 416: LD_STRING Abdul
 418: PPUSH
 419: LD_INT 0
 421: PPUSH
 422: LD_STRING 
 424: PPUSH
 425: CALL 25297 0 3
 429: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 430: LD_ADDR_EXP 40
 434: PUSH
 435: LD_STRING Omar
 437: PPUSH
 438: LD_INT 0
 440: PPUSH
 441: LD_STRING 
 443: PPUSH
 444: CALL 25297 0 3
 448: ST_TO_ADDR
// uc_side := 2 ;
 449: LD_ADDR_OWVAR 20
 453: PUSH
 454: LD_INT 2
 456: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 457: LD_ADDR_EXP 30
 461: PUSH
 462: LD_STRING Heike
 464: PPUSH
 465: LD_EXP 1
 469: NOT
 470: PPUSH
 471: LD_EXP 2
 475: PPUSH
 476: CALL 25297 0 3
 480: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 481: LD_ADDR_EXP 33
 485: PUSH
 486: LD_STRING Ibrahim
 488: PPUSH
 489: LD_EXP 1
 493: NOT
 494: PPUSH
 495: LD_EXP 2
 499: PPUSH
 500: CALL 25297 0 3
 504: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 505: LD_ADDR_EXP 31
 509: PUSH
 510: LD_STRING Givi
 512: PPUSH
 513: LD_EXP 1
 517: NOT
 518: PPUSH
 519: LD_EXP 2
 523: PPUSH
 524: CALL 25297 0 3
 528: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 529: LD_ADDR_EXP 34
 533: PUSH
 534: LD_STRING Kamil
 536: PPUSH
 537: LD_EXP 1
 541: NOT
 542: PPUSH
 543: LD_EXP 2
 547: PPUSH
 548: CALL 25297 0 3
 552: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 553: LD_ADDR_EXP 35
 557: PUSH
 558: LD_STRING Kaia
 560: PPUSH
 561: LD_EXP 1
 565: NOT
 566: PPUSH
 567: LD_EXP 2
 571: PPUSH
 572: CALL 25297 0 3
 576: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 577: LD_ADDR_EXP 36
 581: PUSH
 582: LD_STRING Sophia
 584: PPUSH
 585: LD_EXP 1
 589: NOT
 590: PPUSH
 591: LD_EXP 2
 595: PPUSH
 596: CALL 25297 0 3
 600: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 601: LD_ADDR_EXP 37
 605: PUSH
 606: LD_STRING Markov
 608: PPUSH
 609: LD_EXP 1
 613: NOT
 614: PPUSH
 615: LD_EXP 2
 619: PPUSH
 620: CALL 25297 0 3
 624: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 625: LD_ADDR_EXP 42
 629: PUSH
 630: LD_STRING Aviradze
 632: PPUSH
 633: LD_EXP 1
 637: NOT
 638: PPUSH
 639: LD_EXP 2
 643: PPUSH
 644: CALL 25297 0 3
 648: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 649: LD_ADDR_EXP 41
 653: PUSH
 654: LD_STRING Kurt
 656: PPUSH
 657: LD_EXP 1
 661: NOT
 662: PPUSH
 663: LD_EXP 2
 667: PPUSH
 668: CALL 25297 0 3
 672: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 673: LD_ADDR_EXP 32
 677: PUSH
 678: LD_STRING Mike
 680: PPUSH
 681: LD_EXP 1
 685: NOT
 686: PPUSH
 687: LD_EXP 2
 691: PPUSH
 692: CALL 25297 0 3
 696: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 697: LD_ADDR_EXP 39
 701: PUSH
 702: LD_STRING Olaf
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: LD_STRING 
 710: PPUSH
 711: CALL 25297 0 3
 715: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 716: LD_ADDR_EXP 45
 720: PUSH
 721: LD_STRING 05_others
 723: PPUSH
 724: CALL_OW 31
 728: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 729: LD_ADDR_EXP 46
 733: PUSH
 734: LD_STRING 05_apes
 736: PPUSH
 737: CALL_OW 31
 741: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 742: LD_ADDR_VAR 0 5
 746: PUSH
 747: LD_STRING 05_Radar
 749: PPUSH
 750: LD_EXP 1
 754: PPUSH
 755: CALL_OW 30
 759: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 760: LD_ADDR_VAR 0 6
 764: PUSH
 765: LD_STRING 05_RemoteControl
 767: PPUSH
 768: LD_EXP 1
 772: PPUSH
 773: CALL_OW 30
 777: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 778: LD_ADDR_VAR 0 7
 782: PUSH
 783: LD_STRING 05_DrugsTested
 785: PPUSH
 786: LD_EXP 1
 790: PPUSH
 791: CALL_OW 30
 795: ST_TO_ADDR
// if hasDrugs then
 796: LD_VAR 0 7
 800: IFFALSE 815
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 802: LD_INT 5
 804: PPUSH
 805: LD_INT 2
 807: PPUSH
 808: LD_INT 2
 810: PPUSH
 811: CALL_OW 322
// if hasRadar then
 815: LD_VAR 0 5
 819: IFFALSE 834
// SetTech ( tech_radar , 2 , state_researched ) ;
 821: LD_INT 6
 823: PPUSH
 824: LD_INT 2
 826: PPUSH
 827: LD_INT 2
 829: PPUSH
 830: CALL_OW 322
// if hasRemote then
 834: LD_VAR 0 6
 838: IFFALSE 853
// SetTech ( tech_remCont , 2 , state_researched ) ;
 840: LD_INT 15
 842: PPUSH
 843: LD_INT 2
 845: PPUSH
 846: LD_INT 2
 848: PPUSH
 849: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 853: LD_ADDR_VAR 0 12
 857: PUSH
 858: LD_INT 5
 860: PPUSH
 861: LD_INT 0
 863: PPUSH
 864: CALL_OW 517
 868: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: DOUBLE
 875: LD_INT 1
 877: DEC
 878: ST_TO_ADDR
 879: LD_VAR 0 12
 883: PUSH
 884: LD_INT 1
 886: ARRAY
 887: PUSH
 888: FOR_TO
 889: IFFALSE 966
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
 891: LD_VAR 0 12
 895: PUSH
 896: LD_INT 1
 898: ARRAY
 899: PUSH
 900: LD_VAR 0 2
 904: ARRAY
 905: PPUSH
 906: LD_VAR 0 12
 910: PUSH
 911: LD_INT 2
 913: ARRAY
 914: PUSH
 915: LD_VAR 0 2
 919: ARRAY
 920: PPUSH
 921: CALL_OW 351
 925: IFFALSE 964
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
 927: LD_VAR 0 12
 931: PUSH
 932: LD_INT 1
 934: ARRAY
 935: PUSH
 936: LD_VAR 0 2
 940: ARRAY
 941: PPUSH
 942: LD_VAR 0 12
 946: PUSH
 947: LD_INT 2
 949: ARRAY
 950: PUSH
 951: LD_VAR 0 2
 955: ARRAY
 956: PPUSH
 957: LD_INT 2
 959: PPUSH
 960: CALL_OW 244
 964: GO 888
 966: POP
 967: POP
// base := [ [ b_depot , 206 , 80 , 1 ] , [ b_bunker , 221 , 95 , 5 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 ] , [ b_lab_full , 217 , 78 , 4 ] , [ b_solar_power , 220 , 99 , 1 ] , [ b_solar_power , 220 , 103 , 1 ] , [ b_solar_power , 216 , 102 , 1 ] , [ b_ext_gun , 203 , 94 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 ] , [ b_ext_track , 199 , 91 , 1 ] , [ b_oil_power , 197 , 81 , 1 ] , [ b_oil_power , 197 , 78 , 3 ] ] ;
 968: LD_ADDR_VAR 0 4
 972: PUSH
 973: LD_INT 0
 975: PUSH
 976: LD_INT 206
 978: PUSH
 979: LD_INT 80
 981: PUSH
 982: LD_INT 1
 984: PUSH
 985: EMPTY
 986: LIST
 987: LIST
 988: LIST
 989: LIST
 990: PUSH
 991: LD_INT 32
 993: PUSH
 994: LD_INT 221
 996: PUSH
 997: LD_INT 95
 999: PUSH
1000: LD_INT 5
1002: PUSH
1003: LD_INT 23
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: PUSH
1013: LD_INT 32
1015: PUSH
1016: LD_INT 223
1018: PUSH
1019: LD_INT 88
1021: PUSH
1022: LD_INT 5
1024: PUSH
1025: LD_INT 24
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: PUSH
1035: LD_INT 32
1037: PUSH
1038: LD_INT 202
1040: PUSH
1041: LD_INT 64
1043: PUSH
1044: LD_INT 2
1046: PUSH
1047: LD_INT 25
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: PUSH
1057: LD_INT 3
1059: PUSH
1060: LD_INT 203
1062: PUSH
1063: LD_INT 91
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: EMPTY
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: PUSH
1075: LD_INT 8
1077: PUSH
1078: LD_INT 217
1080: PUSH
1081: LD_INT 78
1083: PUSH
1084: LD_INT 4
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: PUSH
1093: LD_INT 27
1095: PUSH
1096: LD_INT 220
1098: PUSH
1099: LD_INT 99
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: PUSH
1111: LD_INT 27
1113: PUSH
1114: LD_INT 220
1116: PUSH
1117: LD_INT 103
1119: PUSH
1120: LD_INT 1
1122: PUSH
1123: EMPTY
1124: LIST
1125: LIST
1126: LIST
1127: LIST
1128: PUSH
1129: LD_INT 27
1131: PUSH
1132: LD_INT 216
1134: PUSH
1135: LD_INT 102
1137: PUSH
1138: LD_INT 1
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: PUSH
1147: LD_INT 17
1149: PUSH
1150: LD_INT 203
1152: PUSH
1153: LD_INT 94
1155: PUSH
1156: LD_INT 0
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 23
1167: PUSH
1168: LD_INT 200
1170: PUSH
1171: LD_INT 88
1173: PUSH
1174: LD_INT 2
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: LIST
1181: LIST
1182: PUSH
1183: LD_INT 16
1185: PUSH
1186: LD_INT 199
1188: PUSH
1189: LD_INT 91
1191: PUSH
1192: LD_INT 1
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: LIST
1199: LIST
1200: PUSH
1201: LD_INT 26
1203: PUSH
1204: LD_INT 197
1206: PUSH
1207: LD_INT 81
1209: PUSH
1210: LD_INT 1
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: LIST
1217: LIST
1218: PUSH
1219: LD_INT 26
1221: PUSH
1222: LD_INT 197
1224: PUSH
1225: LD_INT 78
1227: PUSH
1228: LD_INT 3
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: ST_TO_ADDR
// if hasRadar then
1253: LD_VAR 0 5
1257: IFFALSE 1301
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 ] ) ;
1259: LD_ADDR_VAR 0 4
1263: PUSH
1264: LD_VAR 0 4
1268: PPUSH
1269: LD_VAR 0 4
1273: PUSH
1274: LD_INT 1
1276: PLUS
1277: PPUSH
1278: LD_INT 20
1280: PUSH
1281: LD_INT 203
1283: PUSH
1284: LD_INT 87
1286: PUSH
1287: LD_INT 3
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: PPUSH
1296: CALL_OW 1
1300: ST_TO_ADDR
// if hasRemote then
1301: LD_VAR 0 6
1305: IFFALSE 1349
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 ] ) ;
1307: LD_ADDR_VAR 0 4
1311: PUSH
1312: LD_VAR 0 4
1316: PPUSH
1317: LD_VAR 0 4
1321: PUSH
1322: LD_INT 1
1324: PLUS
1325: PPUSH
1326: LD_INT 22
1328: PUSH
1329: LD_INT 207
1331: PUSH
1332: LD_INT 95
1334: PUSH
1335: LD_INT 5
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: PPUSH
1344: CALL_OW 1
1348: ST_TO_ADDR
// for i in base do
1349: LD_ADDR_VAR 0 2
1353: PUSH
1354: LD_VAR 0 4
1358: PUSH
1359: FOR_IN
1360: IFFALSE 1541
// begin bc_type := i [ 1 ] ;
1362: LD_ADDR_OWVAR 42
1366: PUSH
1367: LD_VAR 0 2
1371: PUSH
1372: LD_INT 1
1374: ARRAY
1375: ST_TO_ADDR
// bc_level := 3 ;
1376: LD_ADDR_OWVAR 43
1380: PUSH
1381: LD_INT 3
1383: ST_TO_ADDR
// if i [ 1 ] = b_lab_full then
1384: LD_VAR 0 2
1388: PUSH
1389: LD_INT 1
1391: ARRAY
1392: PUSH
1393: LD_INT 8
1395: EQUAL
1396: IFFALSE 1431
// begin bc_kind1 := b_lab_weapon ;
1398: LD_ADDR_OWVAR 44
1402: PUSH
1403: LD_INT 10
1405: ST_TO_ADDR
// if hasRadar then
1406: LD_VAR 0 5
1410: IFFALSE 1422
// bc_kind2 := b_lab_opto else
1412: LD_ADDR_OWVAR 45
1416: PUSH
1417: LD_INT 15
1419: ST_TO_ADDR
1420: GO 1431
// bc_kind2 := - 1 ;
1422: LD_ADDR_OWVAR 45
1426: PUSH
1427: LD_INT 1
1429: NEG
1430: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1431: LD_ADDR_VAR 0 3
1435: PUSH
1436: LD_VAR 0 2
1440: PUSH
1441: LD_INT 2
1443: ARRAY
1444: PPUSH
1445: LD_VAR 0 2
1449: PUSH
1450: LD_INT 3
1452: ARRAY
1453: PPUSH
1454: LD_VAR 0 2
1458: PUSH
1459: LD_INT 4
1461: ARRAY
1462: PPUSH
1463: CALL_OW 47
1467: ST_TO_ADDR
// if i > 4 then
1468: LD_VAR 0 2
1472: PUSH
1473: LD_INT 4
1475: GREATER
1476: IFFALSE 1496
// PlaceWeaponTurret ( b , i [ 5 ] ) ;
1478: LD_VAR 0 3
1482: PPUSH
1483: LD_VAR 0 2
1487: PUSH
1488: LD_INT 5
1490: ARRAY
1491: PPUSH
1492: CALL_OW 431
// if i [ 1 ] = b_bunker then
1496: LD_VAR 0 2
1500: PUSH
1501: LD_INT 1
1503: ARRAY
1504: PUSH
1505: LD_INT 32
1507: EQUAL
1508: IFFALSE 1539
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
1510: LD_ADDR_VAR 0 11
1514: PUSH
1515: LD_VAR 0 11
1519: PPUSH
1520: LD_VAR 0 11
1524: PUSH
1525: LD_INT 1
1527: PLUS
1528: PPUSH
1529: LD_VAR 0 3
1533: PPUSH
1534: CALL_OW 1
1538: ST_TO_ADDR
// end ;
1539: GO 1359
1541: POP
1542: POP
// depot := HexInfo ( 206 , 80 ) ;
1543: LD_ADDR_VAR 0 9
1547: PUSH
1548: LD_INT 206
1550: PPUSH
1551: LD_INT 80
1553: PPUSH
1554: CALL_OW 428
1558: ST_TO_ADDR
// factory := HexInfo ( 203 , 91 ) ;
1559: LD_ADDR_VAR 0 8
1563: PUSH
1564: LD_INT 203
1566: PPUSH
1567: LD_INT 91
1569: PPUSH
1570: CALL_OW 428
1574: ST_TO_ADDR
// lab := HexInfo ( 217 , 78 ) ;
1575: LD_ADDR_VAR 0 10
1579: PUSH
1580: LD_INT 217
1582: PPUSH
1583: LD_INT 78
1585: PPUSH
1586: CALL_OW 428
1590: ST_TO_ADDR
// arDepot := depot ;
1591: LD_ADDR_EXP 44
1595: PUSH
1596: LD_VAR 0 9
1600: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 160 , 120 ] [ Difficulty ] ) ;
1601: LD_VAR 0 9
1605: PPUSH
1606: CALL_OW 274
1610: PPUSH
1611: LD_INT 1
1613: PPUSH
1614: LD_INT 360
1616: PUSH
1617: LD_INT 260
1619: PUSH
1620: LD_INT 160
1622: PUSH
1623: LD_INT 120
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: PUSH
1632: LD_OWVAR 67
1636: ARRAY
1637: PPUSH
1638: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 130 , 100 ] [ Difficulty ] ) ;
1642: LD_VAR 0 9
1646: PPUSH
1647: CALL_OW 274
1651: PPUSH
1652: LD_INT 2
1654: PPUSH
1655: LD_INT 200
1657: PUSH
1658: LD_INT 170
1660: PUSH
1661: LD_INT 130
1663: PUSH
1664: LD_INT 100
1666: PUSH
1667: EMPTY
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: PUSH
1673: LD_OWVAR 67
1677: ARRAY
1678: PPUSH
1679: CALL_OW 277
// uc_nation := 2 ;
1683: LD_ADDR_OWVAR 21
1687: PUSH
1688: LD_INT 2
1690: ST_TO_ADDR
// uc_side := 2 ;
1691: LD_ADDR_OWVAR 20
1695: PUSH
1696: LD_INT 2
1698: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
1699: LD_INT 13
1701: PPUSH
1702: LD_INT 1
1704: PPUSH
1705: LD_INT 1
1707: PPUSH
1708: LD_INT 27
1710: PPUSH
1711: LD_INT 33
1713: PPUSH
1714: CALL 30314 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
1718: CALL_OW 45
1722: PPUSH
1723: LD_INT 190
1725: PPUSH
1726: LD_INT 64
1728: PPUSH
1729: LD_INT 5
1731: PPUSH
1732: LD_INT 0
1734: PPUSH
1735: CALL 64263 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
1739: LD_INT 13
1741: PPUSH
1742: LD_INT 1
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: LD_INT 25
1750: PPUSH
1751: LD_INT 22
1753: PPUSH
1754: CALL 30314 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
1758: CALL_OW 45
1762: PPUSH
1763: LD_INT 188
1765: PPUSH
1766: LD_INT 67
1768: PPUSH
1769: LD_INT 5
1771: PPUSH
1772: LD_INT 0
1774: PPUSH
1775: CALL 64263 0 5
// if hasRemote then
1779: LD_VAR 0 6
1783: IFFALSE 1865
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_control_tower , 35 ) ;
1785: LD_INT 13
1787: PPUSH
1788: LD_INT 1
1790: PPUSH
1791: LD_INT 1
1793: PPUSH
1794: LD_INT 31
1796: PPUSH
1797: LD_INT 35
1799: PPUSH
1800: CALL 30314 0 5
// PlaceUnitXYD ( CreateVehicle , 191 , 71 , 5 , false ) ;
1804: CALL_OW 45
1808: PPUSH
1809: LD_INT 191
1811: PPUSH
1812: LD_INT 71
1814: PPUSH
1815: LD_INT 5
1817: PPUSH
1818: LD_INT 0
1820: PPUSH
1821: CALL 64263 0 5
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_remote , ar_gun , 55 ) ;
1825: LD_INT 14
1827: PPUSH
1828: LD_INT 1
1830: PPUSH
1831: LD_INT 2
1833: PPUSH
1834: LD_INT 27
1836: PPUSH
1837: LD_INT 55
1839: PPUSH
1840: CALL 30314 0 5
// PlaceUnitXYD ( CreateVehicle , 199 , 67 , 0 , false ) ;
1844: CALL_OW 45
1848: PPUSH
1849: LD_INT 199
1851: PPUSH
1852: LD_INT 67
1854: PPUSH
1855: LD_INT 0
1857: PPUSH
1858: LD_INT 0
1860: PPUSH
1861: CALL 64263 0 5
// end ; PlaceUnitXY ( Heike , 213 , 87 , false ) ;
1865: LD_EXP 30
1869: PPUSH
1870: LD_INT 213
1872: PPUSH
1873: LD_INT 87
1875: PPUSH
1876: LD_INT 0
1878: PPUSH
1879: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
1883: LD_EXP 30
1887: PPUSH
1888: LD_INT 214
1890: PPUSH
1891: LD_INT 87
1893: PPUSH
1894: CALL_OW 118
// if Kaia then
1898: LD_EXP 35
1902: IFFALSE 1937
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
1904: LD_EXP 35
1908: PPUSH
1909: LD_INT 213
1911: PPUSH
1912: LD_INT 85
1914: PPUSH
1915: LD_INT 0
1917: PPUSH
1918: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
1922: LD_EXP 35
1926: PPUSH
1927: LD_INT 215
1929: PPUSH
1930: LD_INT 87
1932: PPUSH
1933: CALL_OW 118
// end ; if Olaf and Kaia then
1937: LD_EXP 39
1941: PUSH
1942: LD_EXP 35
1946: AND
1947: IFFALSE 1984
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
1949: LD_EXP 39
1953: PPUSH
1954: LD_INT 215
1956: PPUSH
1957: LD_INT 87
1959: PPUSH
1960: LD_INT 0
1962: PPUSH
1963: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
1967: LD_EXP 39
1971: PPUSH
1972: LD_INT 213
1974: PPUSH
1975: LD_INT 85
1977: PPUSH
1978: CALL_OW 118
// end else
1982: GO 2004
// if Olaf then
1984: LD_EXP 39
1988: IFFALSE 2004
// PlaceHumanInUnit ( Olaf , factory ) ;
1990: LD_EXP 39
1994: PPUSH
1995: LD_VAR 0 8
1999: PPUSH
2000: CALL_OW 52
// if Givi then
2004: LD_EXP 31
2008: IFFALSE 2089
// begin if Kaia and Olaf then
2010: LD_EXP 35
2014: PUSH
2015: LD_EXP 39
2019: AND
2020: IFFALSE 2057
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
2022: LD_EXP 31
2026: PPUSH
2027: LD_INT 247
2029: PPUSH
2030: LD_INT 117
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2040: LD_EXP 31
2044: PPUSH
2045: LD_INT 248
2047: PPUSH
2048: LD_INT 118
2050: PPUSH
2051: CALL_OW 118
// end else
2055: GO 2089
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2057: LD_EXP 31
2061: PPUSH
2062: LD_INT 216
2064: PPUSH
2065: LD_INT 88
2067: PPUSH
2068: LD_INT 0
2070: PPUSH
2071: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2075: LD_EXP 31
2079: PPUSH
2080: LD_EXP 30
2084: PPUSH
2085: CALL_OW 119
// end ; end ; if Kurt then
2089: LD_EXP 41
2093: IFFALSE 2113
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2095: LD_EXP 41
2099: PPUSH
2100: LD_VAR 0 11
2104: PUSH
2105: LD_INT 2
2107: ARRAY
2108: PPUSH
2109: CALL_OW 52
// if Mike then
2113: LD_EXP 32
2117: IFFALSE 2137
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2119: LD_EXP 32
2123: PPUSH
2124: LD_VAR 0 11
2128: PUSH
2129: LD_INT 3
2131: ARRAY
2132: PPUSH
2133: CALL_OW 52
// if Kamil then
2137: LD_EXP 34
2141: IFFALSE 2203
// begin if Kaia and Olaf then
2143: LD_EXP 35
2147: PUSH
2148: LD_EXP 39
2152: AND
2153: IFFALSE 2171
// PlaceHumanInUnit ( Kamil , depot ) else
2155: LD_EXP 34
2159: PPUSH
2160: LD_VAR 0 9
2164: PPUSH
2165: CALL_OW 52
2169: GO 2203
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
2171: LD_EXP 34
2175: PPUSH
2176: LD_INT 213
2178: PPUSH
2179: LD_INT 87
2181: PPUSH
2182: LD_INT 0
2184: PPUSH
2185: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
2189: LD_EXP 34
2193: PPUSH
2194: LD_EXP 30
2198: PPUSH
2199: CALL_OW 119
// end ; end ; if Sophia then
2203: LD_EXP 36
2207: IFFALSE 2223
// PlaceHumanInUnit ( Sophia , depot ) ;
2209: LD_EXP 36
2213: PPUSH
2214: LD_VAR 0 9
2218: PPUSH
2219: CALL_OW 52
// if Aviradze then
2223: LD_EXP 42
2227: IFFALSE 2243
// PlaceHumanInUnit ( Aviradze , lab ) ;
2229: LD_EXP 42
2233: PPUSH
2234: LD_VAR 0 10
2238: PPUSH
2239: CALL_OW 52
// if Ibrahim then
2243: LD_EXP 33
2247: IFFALSE 2263
// PlaceHumanInUnit ( Ibrahim , lab ) ;
2249: LD_EXP 33
2253: PPUSH
2254: LD_VAR 0 10
2258: PPUSH
2259: CALL_OW 52
// if Markov then
2263: LD_EXP 37
2267: IFFALSE 2283
// PlaceHumanInUnit ( Markov , factory ) ;
2269: LD_EXP 37
2273: PPUSH
2274: LD_VAR 0 8
2278: PPUSH
2279: CALL_OW 52
// if heikeSecondSquad then
2283: LD_EXP 45
2287: IFFALSE 2327
// for i in heikeSecondSquad do
2289: LD_ADDR_VAR 0 2
2293: PUSH
2294: LD_EXP 45
2298: PUSH
2299: FOR_IN
2300: IFFALSE 2325
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
2302: LD_VAR 0 2
2306: PPUSH
2307: LD_INT 190
2309: PPUSH
2310: LD_INT 65
2312: PPUSH
2313: LD_INT 5
2315: PPUSH
2316: LD_INT 0
2318: PPUSH
2319: CALL_OW 50
2323: GO 2299
2325: POP
2326: POP
// if heikeApes then
2327: LD_EXP 46
2331: IFFALSE 2371
// for i in heikeApes do
2333: LD_ADDR_VAR 0 2
2337: PUSH
2338: LD_EXP 46
2342: PUSH
2343: FOR_IN
2344: IFFALSE 2369
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
2346: LD_VAR 0 2
2350: PPUSH
2351: LD_INT 190
2353: PPUSH
2354: LD_INT 70
2356: PPUSH
2357: LD_INT 5
2359: PPUSH
2360: LD_INT 0
2362: PPUSH
2363: CALL_OW 50
2367: GO 2343
2369: POP
2370: POP
// end ;
2371: LD_VAR 0 1
2375: RET
// export function PrepareRolfSquad ; var i , j ; begin
2376: LD_INT 0
2378: PPUSH
2379: PPUSH
2380: PPUSH
// uc_side := 8 ;
2381: LD_ADDR_OWVAR 20
2385: PUSH
2386: LD_INT 8
2388: ST_TO_ADDR
// uc_nation := 2 ;
2389: LD_ADDR_OWVAR 21
2393: PUSH
2394: LD_INT 2
2396: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
2397: LD_ADDR_EXP 43
2401: PUSH
2402: LD_STRING Bergkamp
2404: PPUSH
2405: CALL_OW 25
2409: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
2410: LD_ADDR_EXP 47
2414: PUSH
2415: LD_EXP 43
2419: PUSH
2420: EMPTY
2421: LIST
2422: ST_TO_ADDR
// for i := 1 to 4 do
2423: LD_ADDR_VAR 0 2
2427: PUSH
2428: DOUBLE
2429: LD_INT 1
2431: DEC
2432: ST_TO_ADDR
2433: LD_INT 4
2435: PUSH
2436: FOR_TO
2437: IFFALSE 2517
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
2439: LD_ADDR_VAR 0 3
2443: PUSH
2444: DOUBLE
2445: LD_INT 1
2447: DEC
2448: ST_TO_ADDR
2449: LD_INT 5
2451: PUSH
2452: LD_INT 2
2454: PUSH
2455: LD_INT 3
2457: PUSH
2458: LD_INT 1
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: LIST
2465: LIST
2466: PUSH
2467: LD_VAR 0 2
2471: ARRAY
2472: PUSH
2473: FOR_TO
2474: IFFALSE 2513
// begin PrepareHuman ( false , i , 5 ) ;
2476: LD_INT 0
2478: PPUSH
2479: LD_VAR 0 2
2483: PPUSH
2484: LD_INT 5
2486: PPUSH
2487: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
2491: LD_ADDR_EXP 47
2495: PUSH
2496: LD_EXP 47
2500: PPUSH
2501: CALL_OW 44
2505: PPUSH
2506: CALL 62131 0 2
2510: ST_TO_ADDR
// end ;
2511: GO 2473
2513: POP
2514: POP
// end ;
2515: GO 2436
2517: POP
2518: POP
// if HexInfo ( 5 , 3 ) then
2519: LD_INT 5
2521: PPUSH
2522: LD_INT 3
2524: PPUSH
2525: CALL_OW 428
2529: IFFALSE 2546
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
2531: LD_INT 5
2533: PPUSH
2534: LD_INT 3
2536: PPUSH
2537: CALL_OW 428
2541: PPUSH
2542: CALL_OW 64
// for i in rolfSquad do
2546: LD_ADDR_VAR 0 2
2550: PUSH
2551: LD_EXP 47
2555: PUSH
2556: FOR_IN
2557: IFFALSE 2693
// begin uc_direction := 2 ;
2559: LD_ADDR_OWVAR 24
2563: PUSH
2564: LD_INT 2
2566: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
2567: LD_VAR 0 2
2571: PPUSH
2572: CALL_OW 257
2576: PUSH
2577: LD_INT 3
2579: EQUAL
2580: IFFALSE 2654
// begin uc_side := 8 ;
2582: LD_ADDR_OWVAR 20
2586: PUSH
2587: LD_INT 8
2589: ST_TO_ADDR
// uc_nation := 2 ;
2590: LD_ADDR_OWVAR 21
2594: PUSH
2595: LD_INT 2
2597: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
2598: LD_INT 13
2600: PPUSH
2601: LD_INT 1
2603: PPUSH
2604: LD_INT 1
2606: PPUSH
2607: LD_INT 27
2609: PPUSH
2610: LD_INT 88
2612: PPUSH
2613: CALL 30314 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
2617: CALL_OW 45
2621: PPUSH
2622: LD_INT 11
2624: PPUSH
2625: LD_INT 0
2627: PPUSH
2628: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
2632: LD_VAR 0 2
2636: PPUSH
2637: LD_INT 5
2639: PPUSH
2640: LD_INT 3
2642: PPUSH
2643: CALL_OW 428
2647: PPUSH
2648: CALL_OW 52
// end else
2652: GO 2669
// PlaceUnitArea ( i , northSpawn , false ) ;
2654: LD_VAR 0 2
2658: PPUSH
2659: LD_INT 11
2661: PPUSH
2662: LD_INT 0
2664: PPUSH
2665: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
2669: LD_VAR 0 2
2673: PPUSH
2674: LD_INT 29
2676: PPUSH
2677: LD_INT 10
2679: PPUSH
2680: CALL_OW 111
// wait ( 0 0$2 ) ;
2684: LD_INT 70
2686: PPUSH
2687: CALL_OW 67
// end ;
2691: GO 2556
2693: POP
2694: POP
// wait ( 0 0$5 ) ;
2695: LD_INT 175
2697: PPUSH
2698: CALL_OW 67
// end ;
2702: LD_VAR 0 1
2706: RET
// export function PrepareRolfBase ; var i , tmp ; begin
2707: LD_INT 0
2709: PPUSH
2710: PPUSH
2711: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
2712: LD_EXP 43
2716: PPUSH
2717: LD_INT 94
2719: PPUSH
2720: LD_INT 63
2722: PPUSH
2723: CALL_OW 428
2727: PPUSH
2728: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
2732: LD_ADDR_VAR 0 3
2736: PUSH
2737: LD_INT 4
2739: PUSH
2740: LD_INT 82
2742: PUSH
2743: LD_INT 64
2745: PUSH
2746: LD_INT 1
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: LIST
2753: LIST
2754: PUSH
2755: LD_INT 31
2757: PUSH
2758: LD_INT 73
2760: PUSH
2761: LD_INT 58
2763: PUSH
2764: LD_INT 0
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: LIST
2771: LIST
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: ST_TO_ADDR
// for i in tmp do
2777: LD_ADDR_VAR 0 2
2781: PUSH
2782: LD_VAR 0 3
2786: PUSH
2787: FOR_IN
2788: IFFALSE 2852
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2790: LD_EXP 47
2794: PPUSH
2795: LD_INT 25
2797: PUSH
2798: LD_INT 2
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PPUSH
2805: CALL_OW 72
2809: PPUSH
2810: LD_VAR 0 2
2814: PUSH
2815: LD_INT 1
2817: ARRAY
2818: PPUSH
2819: LD_VAR 0 2
2823: PUSH
2824: LD_INT 2
2826: ARRAY
2827: PPUSH
2828: LD_VAR 0 2
2832: PUSH
2833: LD_INT 3
2835: ARRAY
2836: PPUSH
2837: LD_VAR 0 2
2841: PUSH
2842: LD_INT 4
2844: ARRAY
2845: PPUSH
2846: CALL_OW 205
2850: GO 2787
2852: POP
2853: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
2854: LD_EXP 47
2858: PUSH
2859: LD_INT 2
2861: ARRAY
2862: PPUSH
2863: LD_INT 63
2865: PPUSH
2866: LD_INT 42
2868: PPUSH
2869: CALL_OW 428
2873: PPUSH
2874: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
2878: LD_EXP 47
2882: PUSH
2883: LD_INT 3
2885: ARRAY
2886: PPUSH
2887: LD_INT 94
2889: PPUSH
2890: LD_INT 63
2892: PPUSH
2893: CALL_OW 428
2897: PPUSH
2898: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2902: LD_INT 35
2904: PPUSH
2905: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
2909: LD_EXP 47
2913: PPUSH
2914: LD_INT 25
2916: PUSH
2917: LD_INT 2
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: PUSH
2924: LD_INT 3
2926: PUSH
2927: LD_INT 60
2929: PUSH
2930: EMPTY
2931: LIST
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PPUSH
2941: CALL_OW 72
2945: IFFALSE 2902
// rolfScriptBase := true ;
2947: LD_ADDR_EXP 9
2951: PUSH
2952: LD_INT 1
2954: ST_TO_ADDR
// end ;
2955: LD_VAR 0 1
2959: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
2960: LD_EXP 9
2964: PUSH
2965: LD_EXP 43
2969: PPUSH
2970: CALL_OW 255
2974: PUSH
2975: LD_INT 8
2977: EQUAL
2978: AND
2979: IFFALSE 3986
2981: GO 2983
2983: DISABLE
2984: LD_INT 0
2986: PPUSH
2987: PPUSH
2988: PPUSH
2989: PPUSH
2990: PPUSH
2991: PPUSH
2992: PPUSH
2993: PPUSH
2994: PPUSH
2995: PPUSH
// begin enable ;
2996: ENABLE
// if not rolfSquad then
2997: LD_EXP 47
3001: NOT
3002: IFFALSE 3006
// exit ;
3004: GO 3986
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
3006: LD_ADDR_VAR 0 9
3010: PUSH
3011: LD_INT 12
3013: PPUSH
3014: LD_INT 81
3016: PUSH
3017: LD_INT 8
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: PPUSH
3024: CALL_OW 70
3028: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
3029: LD_ADDR_VAR 0 5
3033: PUSH
3034: LD_EXP 47
3038: PPUSH
3039: LD_INT 25
3041: PUSH
3042: LD_INT 1
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 72
3053: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
3054: LD_ADDR_VAR 0 6
3058: PUSH
3059: LD_EXP 47
3063: PPUSH
3064: LD_INT 25
3066: PUSH
3067: LD_INT 2
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: PPUSH
3074: CALL_OW 72
3078: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
3079: LD_ADDR_VAR 0 8
3083: PUSH
3084: LD_EXP 47
3088: PPUSH
3089: LD_INT 25
3091: PUSH
3092: LD_INT 3
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PPUSH
3099: CALL_OW 72
3103: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
3104: LD_ADDR_VAR 0 7
3108: PUSH
3109: LD_EXP 47
3113: PPUSH
3114: LD_INT 25
3116: PUSH
3117: LD_INT 4
3119: PUSH
3120: EMPTY
3121: LIST
3122: LIST
3123: PPUSH
3124: CALL_OW 72
3128: ST_TO_ADDR
// if sol then
3129: LD_VAR 0 5
3133: IFFALSE 3431
// for i in sol union Rolf do
3135: LD_ADDR_VAR 0 1
3139: PUSH
3140: LD_VAR 0 5
3144: PUSH
3145: LD_EXP 43
3149: UNION
3150: PUSH
3151: FOR_IN
3152: IFFALSE 3429
// if not IsInUnit ( i ) and not HasTask ( i ) then
3154: LD_VAR 0 1
3158: PPUSH
3159: CALL_OW 310
3163: NOT
3164: PUSH
3165: LD_VAR 0 1
3169: PPUSH
3170: CALL_OW 314
3174: NOT
3175: AND
3176: IFFALSE 3427
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
3178: LD_VAR 0 1
3182: PPUSH
3183: CALL_OW 256
3187: PUSH
3188: LD_INT 500
3190: LESS
3191: PUSH
3192: LD_VAR 0 1
3196: PPUSH
3197: LD_INT 80
3199: PPUSH
3200: LD_INT 49
3202: PPUSH
3203: CALL_OW 297
3207: PUSH
3208: LD_INT 6
3210: GREATER
3211: AND
3212: IFFALSE 3231
// begin ComMoveXY ( i , 80 , 49 ) ;
3214: LD_VAR 0 1
3218: PPUSH
3219: LD_INT 80
3221: PPUSH
3222: LD_INT 49
3224: PPUSH
3225: CALL_OW 111
// continue ;
3229: GO 3151
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
3231: LD_ADDR_VAR 0 4
3235: PUSH
3236: LD_INT 22
3238: PUSH
3239: LD_INT 8
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: PUSH
3246: LD_INT 50
3248: PUSH
3249: EMPTY
3250: LIST
3251: PUSH
3252: LD_INT 2
3254: PUSH
3255: LD_INT 30
3257: PUSH
3258: LD_INT 4
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: PUSH
3265: LD_INT 30
3267: PUSH
3268: LD_INT 5
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PUSH
3275: LD_INT 30
3277: PUSH
3278: LD_INT 32
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PUSH
3285: LD_INT 30
3287: PUSH
3288: LD_INT 31
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: LIST
3306: PPUSH
3307: CALL_OW 69
3311: ST_TO_ADDR
// if tmp then
3312: LD_VAR 0 4
3316: IFFALSE 3427
// begin for b in tmp do
3318: LD_ADDR_VAR 0 2
3322: PUSH
3323: LD_VAR 0 4
3327: PUSH
3328: FOR_IN
3329: IFFALSE 3425
// begin case GetBType ( b ) of b_armoury , b_barracks :
3331: LD_VAR 0 2
3335: PPUSH
3336: CALL_OW 266
3340: PUSH
3341: LD_INT 4
3343: DOUBLE
3344: EQUAL
3345: IFTRUE 3355
3347: LD_INT 5
3349: DOUBLE
3350: EQUAL
3351: IFTRUE 3355
3353: GO 3366
3355: POP
// p := 6 ; b_breastwork , b_bunker :
3356: LD_ADDR_VAR 0 3
3360: PUSH
3361: LD_INT 6
3363: ST_TO_ADDR
3364: GO 3392
3366: LD_INT 31
3368: DOUBLE
3369: EQUAL
3370: IFTRUE 3380
3372: LD_INT 32
3374: DOUBLE
3375: EQUAL
3376: IFTRUE 3380
3378: GO 3391
3380: POP
// p := 1 ; end ;
3381: LD_ADDR_VAR 0 3
3385: PUSH
3386: LD_INT 1
3388: ST_TO_ADDR
3389: GO 3392
3391: POP
// if UnitsInside ( b ) < p then
3392: LD_VAR 0 2
3396: PPUSH
3397: CALL_OW 313
3401: PUSH
3402: LD_VAR 0 3
3406: LESS
3407: IFFALSE 3423
// ComEnterUnit ( i , b ) ;
3409: LD_VAR 0 1
3413: PPUSH
3414: LD_VAR 0 2
3418: PPUSH
3419: CALL_OW 120
// end ;
3423: GO 3328
3425: POP
3426: POP
// end ; end ;
3427: GO 3151
3429: POP
3430: POP
// if sci then
3431: LD_VAR 0 7
3435: IFFALSE 3490
// for i in sci do
3437: LD_ADDR_VAR 0 1
3441: PUSH
3442: LD_VAR 0 7
3446: PUSH
3447: FOR_IN
3448: IFFALSE 3488
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
3450: LD_VAR 0 1
3454: PPUSH
3455: LD_INT 80
3457: PPUSH
3458: LD_INT 49
3460: PPUSH
3461: CALL_OW 297
3465: PUSH
3466: LD_INT 9
3468: GREATER
3469: IFFALSE 3486
// ComMoveXY ( i , 80 , 49 ) ;
3471: LD_VAR 0 1
3475: PPUSH
3476: LD_INT 80
3478: PPUSH
3479: LD_INT 49
3481: PPUSH
3482: CALL_OW 111
// end ;
3486: GO 3447
3488: POP
3489: POP
// if mech then
3490: LD_VAR 0 8
3494: IFFALSE 3708
// for i in mech do
3496: LD_ADDR_VAR 0 1
3500: PUSH
3501: LD_VAR 0 8
3505: PUSH
3506: FOR_IN
3507: IFFALSE 3706
// begin hasVehicle := IsInUnit ( i ) ;
3509: LD_ADDR_VAR 0 10
3513: PUSH
3514: LD_VAR 0 1
3518: PPUSH
3519: CALL_OW 310
3523: ST_TO_ADDR
// if enemyInBase then
3524: LD_VAR 0 9
3528: IFFALSE 3624
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
3530: LD_VAR 0 10
3534: PUSH
3535: LD_VAR 0 10
3539: PPUSH
3540: CALL_OW 256
3544: PUSH
3545: LD_INT 500
3547: GREATER
3548: AND
3549: IFFALSE 3577
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
3551: LD_VAR 0 10
3555: PPUSH
3556: LD_VAR 0 9
3560: PPUSH
3561: LD_VAR 0 10
3565: PPUSH
3566: CALL_OW 74
3570: PPUSH
3571: CALL_OW 115
3575: GO 3622
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
3577: LD_VAR 0 10
3581: PPUSH
3582: LD_INT 86
3584: PPUSH
3585: LD_INT 49
3587: PPUSH
3588: CALL_OW 297
3592: PUSH
3593: LD_INT 8
3595: GREATER
3596: IFFALSE 3622
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
3598: LD_VAR 0 10
3602: PPUSH
3603: LD_INT 86
3605: PPUSH
3606: LD_INT 49
3608: PPUSH
3609: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
3613: LD_VAR 0 1
3617: PPUSH
3618: CALL 63943 0 1
// end end else
3622: GO 3704
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
3624: LD_VAR 0 1
3628: PPUSH
3629: LD_INT 86
3631: PPUSH
3632: LD_INT 49
3634: PPUSH
3635: CALL_OW 297
3639: PUSH
3640: LD_INT 8
3642: GREATER
3643: IFFALSE 3662
// ComMoveXY ( i , 86 , 49 ) else
3645: LD_VAR 0 1
3649: PPUSH
3650: LD_INT 86
3652: PPUSH
3653: LD_INT 49
3655: PPUSH
3656: CALL_OW 111
3660: GO 3704
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
3662: LD_VAR 0 10
3666: PUSH
3667: LD_VAR 0 10
3671: PPUSH
3672: CALL_OW 256
3676: PUSH
3677: LD_INT 1000
3679: LESS
3680: AND
3681: IFFALSE 3704
// begin SetFuel ( hasVehicle , 100 ) ;
3683: LD_VAR 0 10
3687: PPUSH
3688: LD_INT 100
3690: PPUSH
3691: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
3695: LD_VAR 0 1
3699: PPUSH
3700: CALL 63823 0 1
// end ; end ; end ;
3704: GO 3506
3706: POP
3707: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3708: LD_ADDR_VAR 0 4
3712: PUSH
3713: LD_INT 12
3715: PPUSH
3716: LD_INT 3
3718: PUSH
3719: LD_INT 24
3721: PUSH
3722: LD_INT 1000
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: PUSH
3729: EMPTY
3730: LIST
3731: LIST
3732: PUSH
3733: LD_INT 21
3735: PUSH
3736: LD_INT 3
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PUSH
3743: EMPTY
3744: LIST
3745: LIST
3746: PPUSH
3747: CALL_OW 70
3751: ST_TO_ADDR
// if tmp and eng then
3752: LD_VAR 0 4
3756: PUSH
3757: LD_VAR 0 6
3761: AND
3762: IFFALSE 3868
// begin for i in eng do
3764: LD_ADDR_VAR 0 1
3768: PUSH
3769: LD_VAR 0 6
3773: PUSH
3774: FOR_IN
3775: IFFALSE 3866
// if IsInUnit ( i ) then
3777: LD_VAR 0 1
3781: PPUSH
3782: CALL_OW 310
3786: IFFALSE 3799
// ComExitBuilding ( i ) else
3788: LD_VAR 0 1
3792: PPUSH
3793: CALL_OW 122
3797: GO 3864
// if GetLives ( i ) = 1000 then
3799: LD_VAR 0 1
3803: PPUSH
3804: CALL_OW 256
3808: PUSH
3809: LD_INT 1000
3811: EQUAL
3812: IFFALSE 3834
// ComRepairBuilding ( i , tmp [ 1 ] ) else
3814: LD_VAR 0 1
3818: PPUSH
3819: LD_VAR 0 4
3823: PUSH
3824: LD_INT 1
3826: ARRAY
3827: PPUSH
3828: CALL_OW 130
3832: GO 3864
// if GetLives ( i ) < 700 then
3834: LD_VAR 0 1
3838: PPUSH
3839: CALL_OW 256
3843: PUSH
3844: LD_INT 700
3846: LESS
3847: IFFALSE 3864
// ComMoveXY ( i , 80 , 49 ) ;
3849: LD_VAR 0 1
3853: PPUSH
3854: LD_INT 80
3856: PPUSH
3857: LD_INT 49
3859: PPUSH
3860: CALL_OW 111
3864: GO 3774
3866: POP
3867: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
3868: LD_VAR 0 4
3872: NOT
3873: PUSH
3874: LD_VAR 0 6
3878: PPUSH
3879: LD_INT 3
3881: PUSH
3882: LD_INT 54
3884: PUSH
3885: EMPTY
3886: LIST
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: PPUSH
3892: CALL_OW 72
3896: AND
3897: IFFALSE 3986
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
3899: LD_ADDR_VAR 0 1
3903: PUSH
3904: LD_VAR 0 6
3908: PPUSH
3909: LD_INT 3
3911: PUSH
3912: LD_INT 54
3914: PUSH
3915: EMPTY
3916: LIST
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PPUSH
3922: CALL_OW 72
3926: PUSH
3927: FOR_IN
3928: IFFALSE 3984
// if GetLives ( i ) < 1000 then
3930: LD_VAR 0 1
3934: PPUSH
3935: CALL_OW 256
3939: PUSH
3940: LD_INT 1000
3942: LESS
3943: IFFALSE 3962
// ComMoveXY ( i , 80 , 49 ) else
3945: LD_VAR 0 1
3949: PPUSH
3950: LD_INT 80
3952: PPUSH
3953: LD_INT 49
3955: PPUSH
3956: CALL_OW 111
3960: GO 3982
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
3962: LD_VAR 0 1
3966: PPUSH
3967: LD_INT 86
3969: PPUSH
3970: LD_INT 54
3972: PPUSH
3973: CALL_OW 428
3977: PPUSH
3978: CALL_OW 120
3982: GO 3927
3984: POP
3985: POP
// end ;
3986: PPOPN 10
3988: END
// export function PrepareOmarSquad ; var i , j , p ; begin
3989: LD_INT 0
3991: PPUSH
3992: PPUSH
3993: PPUSH
3994: PPUSH
// uc_side := 5 ;
3995: LD_ADDR_OWVAR 20
3999: PUSH
4000: LD_INT 5
4002: ST_TO_ADDR
// uc_nation := 2 ;
4003: LD_ADDR_OWVAR 21
4007: PUSH
4008: LD_INT 2
4010: ST_TO_ADDR
// omarSquad := [ ] ;
4011: LD_ADDR_EXP 48
4015: PUSH
4016: EMPTY
4017: ST_TO_ADDR
// for i := 1 to 4 do
4018: LD_ADDR_VAR 0 2
4022: PUSH
4023: DOUBLE
4024: LD_INT 1
4026: DEC
4027: ST_TO_ADDR
4028: LD_INT 4
4030: PUSH
4031: FOR_TO
4032: IFFALSE 4155
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
4034: LD_ADDR_VAR 0 3
4038: PUSH
4039: DOUBLE
4040: LD_INT 1
4042: DEC
4043: ST_TO_ADDR
4044: LD_INT 6
4046: PUSH
4047: LD_INT 2
4049: PUSH
4050: LD_INT 2
4052: PUSH
4053: LD_EXP 21
4057: PLUS
4058: PUSH
4059: LD_INT 2
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: PUSH
4068: LD_VAR 0 2
4072: ARRAY
4073: PUSH
4074: FOR_TO
4075: IFFALSE 4151
// begin PrepareHuman ( false , i , 5 ) ;
4077: LD_INT 0
4079: PPUSH
4080: LD_VAR 0 2
4084: PPUSH
4085: LD_INT 5
4087: PPUSH
4088: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
4092: LD_ADDR_EXP 48
4096: PUSH
4097: LD_EXP 48
4101: PPUSH
4102: CALL_OW 44
4106: PPUSH
4107: CALL 62131 0 2
4111: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
4112: LD_VAR 0 2
4116: PUSH
4117: LD_INT 1
4119: EQUAL
4120: PUSH
4121: LD_INT 50
4123: PPUSH
4124: CALL_OW 13
4128: AND
4129: IFFALSE 4149
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
4131: LD_EXP 48
4135: PUSH
4136: LD_EXP 48
4140: ARRAY
4141: PPUSH
4142: LD_INT 8
4144: PPUSH
4145: CALL_OW 336
// end ;
4149: GO 4074
4151: POP
4152: POP
// end ;
4153: GO 4031
4155: POP
4156: POP
// if HexInfo ( 340 , 205 ) then
4157: LD_INT 340
4159: PPUSH
4160: LD_INT 205
4162: PPUSH
4163: CALL_OW 428
4167: IFFALSE 4184
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
4169: LD_INT 340
4171: PPUSH
4172: LD_INT 205
4174: PPUSH
4175: CALL_OW 428
4179: PPUSH
4180: CALL_OW 64
// p := 0 ;
4184: LD_ADDR_VAR 0 4
4188: PUSH
4189: LD_INT 0
4191: ST_TO_ADDR
// for i in omarSquad do
4192: LD_ADDR_VAR 0 2
4196: PUSH
4197: LD_EXP 48
4201: PUSH
4202: FOR_IN
4203: IFFALSE 4404
// begin uc_direction := 4 ;
4205: LD_ADDR_OWVAR 24
4209: PUSH
4210: LD_INT 4
4212: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
4213: LD_VAR 0 2
4217: PPUSH
4218: CALL_OW 257
4222: PUSH
4223: LD_INT 3
4225: EQUAL
4226: PUSH
4227: LD_VAR 0 4
4231: PUSH
4232: LD_INT 2
4234: LESS
4235: AND
4236: IFFALSE 4365
// begin p := p + 1 ;
4238: LD_ADDR_VAR 0 4
4242: PUSH
4243: LD_VAR 0 4
4247: PUSH
4248: LD_INT 1
4250: PLUS
4251: ST_TO_ADDR
// uc_side := 5 ;
4252: LD_ADDR_OWVAR 20
4256: PUSH
4257: LD_INT 5
4259: ST_TO_ADDR
// if rand ( 0 , 1 ) then
4260: LD_INT 0
4262: PPUSH
4263: LD_INT 1
4265: PPUSH
4266: CALL_OW 12
4270: IFFALSE 4301
// begin uc_nation := 2 ;
4272: LD_ADDR_OWVAR 21
4276: PUSH
4277: LD_INT 2
4279: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
4280: LD_INT 13
4282: PPUSH
4283: LD_INT 1
4285: PPUSH
4286: LD_INT 1
4288: PPUSH
4289: LD_INT 27
4291: PPUSH
4292: LD_INT 88
4294: PPUSH
4295: CALL 30314 0 5
// end else
4299: GO 4328
// begin uc_nation := 3 ;
4301: LD_ADDR_OWVAR 21
4305: PUSH
4306: LD_INT 3
4308: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
4309: LD_INT 22
4311: PPUSH
4312: LD_INT 1
4314: PPUSH
4315: LD_INT 1
4317: PPUSH
4318: LD_INT 45
4320: PPUSH
4321: LD_INT 88
4323: PPUSH
4324: CALL 30314 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
4328: CALL_OW 45
4332: PPUSH
4333: LD_INT 13
4335: PPUSH
4336: LD_INT 0
4338: PPUSH
4339: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
4343: LD_VAR 0 2
4347: PPUSH
4348: LD_INT 340
4350: PPUSH
4351: LD_INT 205
4353: PPUSH
4354: CALL_OW 428
4358: PPUSH
4359: CALL_OW 52
// end else
4363: GO 4380
// PlaceUnitArea ( i , southSpawn , false ) ;
4365: LD_VAR 0 2
4369: PPUSH
4370: LD_INT 13
4372: PPUSH
4373: LD_INT 0
4375: PPUSH
4376: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
4380: LD_VAR 0 2
4384: PPUSH
4385: LD_INT 333
4387: PPUSH
4388: LD_INT 210
4390: PPUSH
4391: CALL_OW 111
// wait ( 0 0$2 ) ;
4395: LD_INT 70
4397: PPUSH
4398: CALL_OW 67
// end ;
4402: GO 4202
4404: POP
4405: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
4406: LD_EXP 40
4410: PPUSH
4411: LD_INT 340
4413: PPUSH
4414: LD_INT 205
4416: PPUSH
4417: LD_INT 0
4419: PPUSH
4420: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
4424: LD_EXP 40
4428: PPUSH
4429: LD_INT 333
4431: PPUSH
4432: LD_INT 206
4434: PPUSH
4435: CALL_OW 111
// wait ( 0 0$2 ) ;
4439: LD_INT 70
4441: PPUSH
4442: CALL_OW 67
// ComHold ( omarSquad ) ;
4446: LD_EXP 48
4450: PPUSH
4451: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
4455: LD_EXP 40
4459: PUSH
4460: LD_EXP 48
4464: PPUSH
4465: LD_INT 2
4467: PUSH
4468: LD_INT 25
4470: PUSH
4471: LD_INT 1
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: PUSH
4478: LD_INT 25
4480: PUSH
4481: LD_INT 8
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: LIST
4492: PPUSH
4493: CALL_OW 72
4497: UNION
4498: PUSH
4499: LD_INT 22
4501: PUSH
4502: LD_INT 5
4504: PUSH
4505: EMPTY
4506: LIST
4507: LIST
4508: PUSH
4509: LD_INT 21
4511: PUSH
4512: LD_INT 2
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PPUSH
4523: CALL_OW 69
4527: UNION
4528: PPUSH
4529: LD_INT 315
4531: PPUSH
4532: LD_INT 214
4534: PPUSH
4535: CALL_OW 114
// wait ( 0 0$22 ) ;
4539: LD_INT 770
4541: PPUSH
4542: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
4546: LD_EXP 48
4550: PUSH
4551: LD_EXP 40
4555: UNION
4556: PPUSH
4557: LD_INT 329
4559: PPUSH
4560: LD_INT 231
4562: PPUSH
4563: CALL_OW 114
// end ;
4567: LD_VAR 0 1
4571: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
4572: LD_EXP 10
4576: IFFALSE 5659
4578: GO 4580
4580: DISABLE
4581: LD_INT 0
4583: PPUSH
4584: PPUSH
4585: PPUSH
4586: PPUSH
4587: PPUSH
4588: PPUSH
4589: PPUSH
4590: PPUSH
4591: PPUSH
4592: PPUSH
4593: PPUSH
// begin enable ;
4594: ENABLE
// if not omarSquad then
4595: LD_EXP 48
4599: NOT
4600: IFFALSE 4604
// exit ;
4602: GO 5659
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
4604: LD_ADDR_VAR 0 10
4608: PUSH
4609: LD_INT 14
4611: PPUSH
4612: LD_INT 81
4614: PUSH
4615: LD_INT 5
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PPUSH
4622: CALL_OW 70
4626: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
4627: LD_ADDR_VAR 0 6
4631: PUSH
4632: LD_EXP 48
4636: PPUSH
4637: LD_INT 2
4639: PUSH
4640: LD_INT 25
4642: PUSH
4643: LD_INT 1
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: PUSH
4650: LD_INT 25
4652: PUSH
4653: LD_INT 8
4655: PUSH
4656: EMPTY
4657: LIST
4658: LIST
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: LIST
4664: PPUSH
4665: CALL_OW 72
4669: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
4670: LD_ADDR_VAR 0 7
4674: PUSH
4675: LD_EXP 48
4679: PPUSH
4680: LD_INT 25
4682: PUSH
4683: LD_INT 2
4685: PUSH
4686: EMPTY
4687: LIST
4688: LIST
4689: PPUSH
4690: CALL_OW 72
4694: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
4695: LD_ADDR_VAR 0 9
4699: PUSH
4700: LD_EXP 48
4704: PPUSH
4705: LD_INT 25
4707: PUSH
4708: LD_INT 3
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: PPUSH
4715: CALL_OW 72
4719: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
4720: LD_ADDR_VAR 0 8
4724: PUSH
4725: LD_EXP 48
4729: PPUSH
4730: LD_INT 25
4732: PUSH
4733: LD_INT 4
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PPUSH
4740: CALL_OW 72
4744: ST_TO_ADDR
// if sol then
4745: LD_VAR 0 6
4749: IFFALSE 5113
// for i in sol do
4751: LD_ADDR_VAR 0 1
4755: PUSH
4756: LD_VAR 0 6
4760: PUSH
4761: FOR_IN
4762: IFFALSE 5111
// if not HasTask ( i ) then
4764: LD_VAR 0 1
4768: PPUSH
4769: CALL_OW 314
4773: NOT
4774: IFFALSE 5109
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
4776: LD_VAR 0 1
4780: PPUSH
4781: CALL_OW 310
4785: NOT
4786: PUSH
4787: LD_VAR 0 1
4791: PPUSH
4792: CALL_OW 256
4796: PUSH
4797: LD_INT 500
4799: LESS
4800: AND
4801: PUSH
4802: LD_VAR 0 1
4806: PPUSH
4807: LD_INT 333
4809: PPUSH
4810: LD_INT 234
4812: PPUSH
4813: CALL_OW 297
4817: PUSH
4818: LD_INT 6
4820: GREATER
4821: AND
4822: IFFALSE 4841
// begin ComMoveXY ( i , 333 , 234 ) ;
4824: LD_VAR 0 1
4828: PPUSH
4829: LD_INT 333
4831: PPUSH
4832: LD_INT 234
4834: PPUSH
4835: CALL_OW 111
// continue ;
4839: GO 4761
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4841: LD_ADDR_VAR 0 5
4845: PUSH
4846: LD_INT 22
4848: PUSH
4849: LD_INT 5
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PUSH
4856: LD_INT 58
4858: PUSH
4859: EMPTY
4860: LIST
4861: PUSH
4862: LD_INT 50
4864: PUSH
4865: EMPTY
4866: LIST
4867: PUSH
4868: LD_INT 2
4870: PUSH
4871: LD_INT 30
4873: PUSH
4874: LD_INT 32
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: LD_INT 30
4883: PUSH
4884: LD_INT 31
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: LIST
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: PPUSH
4902: CALL_OW 69
4906: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
4907: LD_VAR 0 5
4911: PUSH
4912: LD_VAR 0 1
4916: PPUSH
4917: CALL_OW 310
4921: PPUSH
4922: CALL_OW 266
4926: PUSH
4927: LD_INT 31
4929: NONEQUAL
4930: AND
4931: IFFALSE 5013
// begin for j in tmp do
4933: LD_ADDR_VAR 0 2
4937: PUSH
4938: LD_VAR 0 5
4942: PUSH
4943: FOR_IN
4944: IFFALSE 5009
// if GetTag ( j ) <> 1 then
4946: LD_VAR 0 2
4950: PPUSH
4951: CALL_OW 110
4955: PUSH
4956: LD_INT 1
4958: NONEQUAL
4959: IFFALSE 5007
// begin SetTag ( j , 1 ) ;
4961: LD_VAR 0 2
4965: PPUSH
4966: LD_INT 1
4968: PPUSH
4969: CALL_OW 109
// if IsInUnit ( i ) then
4973: LD_VAR 0 1
4977: PPUSH
4978: CALL_OW 310
4982: IFFALSE 4993
// ComExit ( i ) ;
4984: LD_VAR 0 1
4988: PPUSH
4989: CALL 62519 0 1
// AddComEnterUnit ( i , j ) ;
4993: LD_VAR 0 1
4997: PPUSH
4998: LD_VAR 0 2
5002: PPUSH
5003: CALL_OW 180
// end ;
5007: GO 4943
5009: POP
5010: POP
// end else
5011: GO 5109
// if not IsInUnit ( i ) then
5013: LD_VAR 0 1
5017: PPUSH
5018: CALL_OW 310
5022: NOT
5023: IFFALSE 5109
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
5025: LD_ADDR_VAR 0 5
5029: PUSH
5030: LD_INT 22
5032: PUSH
5033: LD_INT 5
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PUSH
5040: LD_INT 50
5042: PUSH
5043: EMPTY
5044: LIST
5045: PUSH
5046: LD_INT 30
5048: PUSH
5049: LD_INT 4
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: LIST
5060: PPUSH
5061: CALL_OW 69
5065: ST_TO_ADDR
// if tmp then
5066: LD_VAR 0 5
5070: IFFALSE 5109
// if UnitsInside ( tmp [ 1 ] ) < 6 then
5072: LD_VAR 0 5
5076: PUSH
5077: LD_INT 1
5079: ARRAY
5080: PPUSH
5081: CALL_OW 313
5085: PUSH
5086: LD_INT 6
5088: LESS
5089: IFFALSE 5109
// ComEnterUnit ( i , tmp [ 1 ] ) ;
5091: LD_VAR 0 1
5095: PPUSH
5096: LD_VAR 0 5
5100: PUSH
5101: LD_INT 1
5103: ARRAY
5104: PPUSH
5105: CALL_OW 120
// end ; end ;
5109: GO 4761
5111: POP
5112: POP
// if sci then
5113: LD_VAR 0 8
5117: IFFALSE 5172
// for i in sci do
5119: LD_ADDR_VAR 0 1
5123: PUSH
5124: LD_VAR 0 8
5128: PUSH
5129: FOR_IN
5130: IFFALSE 5170
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
5132: LD_VAR 0 1
5136: PPUSH
5137: LD_INT 333
5139: PPUSH
5140: LD_INT 234
5142: PPUSH
5143: CALL_OW 297
5147: PUSH
5148: LD_INT 9
5150: GREATER
5151: IFFALSE 5168
// ComMoveXY ( i , 333 , 234 ) ;
5153: LD_VAR 0 1
5157: PPUSH
5158: LD_INT 333
5160: PPUSH
5161: LD_INT 234
5163: PPUSH
5164: CALL_OW 111
// end ;
5168: GO 5129
5170: POP
5171: POP
// if mech then
5172: LD_VAR 0 9
5176: IFFALSE 5381
// for i in mech do
5178: LD_ADDR_VAR 0 1
5182: PUSH
5183: LD_VAR 0 9
5187: PUSH
5188: FOR_IN
5189: IFFALSE 5379
// begin hasVehicle := IsInUnit ( i ) ;
5191: LD_ADDR_VAR 0 11
5195: PUSH
5196: LD_VAR 0 1
5200: PPUSH
5201: CALL_OW 310
5205: ST_TO_ADDR
// if enemyInBase then
5206: LD_VAR 0 10
5210: IFFALSE 5297
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
5212: LD_VAR 0 11
5216: PUSH
5217: LD_VAR 0 11
5221: PPUSH
5222: CALL_OW 256
5226: PUSH
5227: LD_INT 500
5229: GREATER
5230: AND
5231: IFFALSE 5259
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
5233: LD_VAR 0 11
5237: PPUSH
5238: LD_VAR 0 10
5242: PPUSH
5243: LD_VAR 0 11
5247: PPUSH
5248: CALL_OW 74
5252: PPUSH
5253: CALL_OW 115
5257: GO 5295
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
5259: LD_VAR 0 11
5263: PPUSH
5264: LD_INT 333
5266: PPUSH
5267: LD_INT 234
5269: PPUSH
5270: CALL_OW 297
5274: PUSH
5275: LD_INT 6
5277: GREATER
5278: IFFALSE 5295
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
5280: LD_VAR 0 11
5284: PPUSH
5285: LD_INT 333
5287: PPUSH
5288: LD_INT 234
5290: PPUSH
5291: CALL_OW 111
// end else
5295: GO 5377
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
5297: LD_VAR 0 1
5301: PPUSH
5302: LD_INT 333
5304: PPUSH
5305: LD_INT 234
5307: PPUSH
5308: CALL_OW 297
5312: PUSH
5313: LD_INT 6
5315: GREATER
5316: IFFALSE 5335
// ComMoveXY ( i , 333 , 234 ) else
5318: LD_VAR 0 1
5322: PPUSH
5323: LD_INT 333
5325: PPUSH
5326: LD_INT 234
5328: PPUSH
5329: CALL_OW 111
5333: GO 5377
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
5335: LD_VAR 0 11
5339: PUSH
5340: LD_VAR 0 11
5344: PPUSH
5345: CALL_OW 256
5349: PUSH
5350: LD_INT 1000
5352: LESS
5353: AND
5354: IFFALSE 5377
// begin SetFuel ( hasVehicle , 100 ) ;
5356: LD_VAR 0 11
5360: PPUSH
5361: LD_INT 100
5363: PPUSH
5364: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
5368: LD_VAR 0 1
5372: PPUSH
5373: CALL 63823 0 1
// end ; end ; end ;
5377: GO 5188
5379: POP
5380: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
5381: LD_ADDR_VAR 0 5
5385: PUSH
5386: LD_INT 14
5388: PPUSH
5389: LD_INT 3
5391: PUSH
5392: LD_INT 24
5394: PUSH
5395: LD_INT 1000
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PUSH
5406: LD_INT 21
5408: PUSH
5409: LD_INT 3
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: PPUSH
5420: CALL_OW 70
5424: ST_TO_ADDR
// if tmp and eng then
5425: LD_VAR 0 5
5429: PUSH
5430: LD_VAR 0 7
5434: AND
5435: IFFALSE 5541
// begin for i in eng do
5437: LD_ADDR_VAR 0 1
5441: PUSH
5442: LD_VAR 0 7
5446: PUSH
5447: FOR_IN
5448: IFFALSE 5539
// if IsInUnit ( i ) then
5450: LD_VAR 0 1
5454: PPUSH
5455: CALL_OW 310
5459: IFFALSE 5472
// ComExitBuilding ( i ) else
5461: LD_VAR 0 1
5465: PPUSH
5466: CALL_OW 122
5470: GO 5537
// if GetLives ( i ) = 1000 then
5472: LD_VAR 0 1
5476: PPUSH
5477: CALL_OW 256
5481: PUSH
5482: LD_INT 1000
5484: EQUAL
5485: IFFALSE 5507
// ComRepairBuilding ( i , tmp [ 1 ] ) else
5487: LD_VAR 0 1
5491: PPUSH
5492: LD_VAR 0 5
5496: PUSH
5497: LD_INT 1
5499: ARRAY
5500: PPUSH
5501: CALL_OW 130
5505: GO 5537
// if GetLives ( i ) < 700 then
5507: LD_VAR 0 1
5511: PPUSH
5512: CALL_OW 256
5516: PUSH
5517: LD_INT 700
5519: LESS
5520: IFFALSE 5537
// ComMoveXY ( i , 333 , 234 ) ;
5522: LD_VAR 0 1
5526: PPUSH
5527: LD_INT 333
5529: PPUSH
5530: LD_INT 234
5532: PPUSH
5533: CALL_OW 111
5537: GO 5447
5539: POP
5540: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
5541: LD_VAR 0 5
5545: NOT
5546: PUSH
5547: LD_VAR 0 7
5551: PPUSH
5552: LD_INT 3
5554: PUSH
5555: LD_INT 54
5557: PUSH
5558: EMPTY
5559: LIST
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PPUSH
5565: CALL_OW 72
5569: AND
5570: IFFALSE 5659
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
5572: LD_ADDR_VAR 0 1
5576: PUSH
5577: LD_VAR 0 7
5581: PPUSH
5582: LD_INT 3
5584: PUSH
5585: LD_INT 54
5587: PUSH
5588: EMPTY
5589: LIST
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PPUSH
5595: CALL_OW 72
5599: PUSH
5600: FOR_IN
5601: IFFALSE 5657
// if GetLives ( i ) < 1000 then
5603: LD_VAR 0 1
5607: PPUSH
5608: CALL_OW 256
5612: PUSH
5613: LD_INT 1000
5615: LESS
5616: IFFALSE 5635
// ComMoveXY ( i , 333 , 234 ) else
5618: LD_VAR 0 1
5622: PPUSH
5623: LD_INT 333
5625: PPUSH
5626: LD_INT 234
5628: PPUSH
5629: CALL_OW 111
5633: GO 5655
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
5635: LD_VAR 0 1
5639: PPUSH
5640: LD_INT 341
5642: PPUSH
5643: LD_INT 232
5645: PPUSH
5646: CALL_OW 428
5650: PPUSH
5651: CALL_OW 120
5655: GO 5600
5657: POP
5658: POP
// end ;
5659: PPOPN 11
5661: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
5662: LD_EXP 40
5666: PPUSH
5667: CALL_OW 256
5671: PUSH
5672: LD_INT 1000
5674: LESS
5675: IFFALSE 5693
5677: GO 5679
5679: DISABLE
// begin enable ;
5680: ENABLE
// SetLives ( Omar , 1000 ) ;
5681: LD_EXP 40
5685: PPUSH
5686: LD_INT 1000
5688: PPUSH
5689: CALL_OW 234
// end ;
5693: END
// every 0 0$1 trigger omarAttack do var i , nearestPoint ;
5694: LD_EXP 23
5698: IFFALSE 6574
5700: GO 5702
5702: DISABLE
5703: LD_INT 0
5705: PPUSH
5706: PPUSH
// begin wait ( 0 0$25 ) ;
5707: LD_INT 875
5709: PPUSH
5710: CALL_OW 67
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
5714: LD_EXP 48
5718: PPUSH
5719: LD_INT 2
5721: PUSH
5722: LD_INT 25
5724: PUSH
5725: LD_INT 1
5727: PUSH
5728: EMPTY
5729: LIST
5730: LIST
5731: PUSH
5732: LD_INT 25
5734: PUSH
5735: LD_INT 8
5737: PUSH
5738: EMPTY
5739: LIST
5740: LIST
5741: PUSH
5742: EMPTY
5743: LIST
5744: LIST
5745: LIST
5746: PPUSH
5747: CALL_OW 72
5751: PPUSH
5752: CALL_OW 122
// wait ( 0 0$3 ) ;
5756: LD_INT 105
5758: PPUSH
5759: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , 225 , 223 ) ;
5763: LD_EXP 48
5767: PUSH
5768: LD_EXP 40
5772: UNION
5773: PPUSH
5774: LD_INT 225
5776: PPUSH
5777: LD_INT 223
5779: PPUSH
5780: CALL_OW 174
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_type , unit_vehicle ] ] ] ) , 167 , 231 ) ;
5784: LD_INT 22
5786: PUSH
5787: LD_INT 5
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: PUSH
5794: LD_INT 2
5796: PUSH
5797: LD_INT 25
5799: PUSH
5800: LD_INT 1
5802: PUSH
5803: EMPTY
5804: LIST
5805: LIST
5806: PUSH
5807: LD_INT 25
5809: PUSH
5810: LD_INT 8
5812: PUSH
5813: EMPTY
5814: LIST
5815: LIST
5816: PUSH
5817: LD_INT 21
5819: PUSH
5820: LD_INT 2
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: LIST
5831: LIST
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: PPUSH
5837: CALL_OW 69
5841: PPUSH
5842: LD_INT 167
5844: PPUSH
5845: LD_INT 231
5847: PPUSH
5848: CALL_OW 174
// AddComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 222 , 229 ) ;
5852: LD_EXP 48
5856: PPUSH
5857: LD_INT 25
5859: PUSH
5860: LD_INT 4
5862: PUSH
5863: EMPTY
5864: LIST
5865: LIST
5866: PPUSH
5867: CALL_OW 72
5871: PPUSH
5872: LD_INT 222
5874: PPUSH
5875: LD_INT 229
5877: PPUSH
5878: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5882: LD_INT 35
5884: PPUSH
5885: CALL_OW 67
// for i in omarSquad union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
5889: LD_ADDR_VAR 0 1
5893: PUSH
5894: LD_EXP 48
5898: PUSH
5899: LD_INT 22
5901: PUSH
5902: LD_INT 5
5904: PUSH
5905: EMPTY
5906: LIST
5907: LIST
5908: PUSH
5909: LD_INT 21
5911: PUSH
5912: LD_INT 2
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: PPUSH
5923: CALL_OW 69
5927: UNION
5928: PUSH
5929: FOR_IN
5930: IFFALSE 6565
// begin if IsDead ( i ) then
5932: LD_VAR 0 1
5936: PPUSH
5937: CALL_OW 301
5941: IFFALSE 5961
// begin omarSquad := omarSquad diff i ;
5943: LD_ADDR_EXP 48
5947: PUSH
5948: LD_EXP 48
5952: PUSH
5953: LD_VAR 0 1
5957: DIFF
5958: ST_TO_ADDR
// continue ;
5959: GO 5929
// end ; if GetClass ( i ) in [ 1 , 8 ] then
5961: LD_VAR 0 1
5965: PPUSH
5966: CALL_OW 257
5970: PUSH
5971: LD_INT 1
5973: PUSH
5974: LD_INT 8
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: IN
5981: IFFALSE 6175
// begin if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
5983: LD_VAR 0 1
5987: PPUSH
5988: CALL_OW 256
5992: PUSH
5993: LD_INT 700
5995: LESS
5996: PUSH
5997: LD_VAR 0 1
6001: PPUSH
6002: CALL_OW 110
6006: PUSH
6007: LD_INT 0
6009: EQUAL
6010: AND
6011: IFFALSE 6040
// begin SetTag ( i , 1 ) ;
6013: LD_VAR 0 1
6017: PPUSH
6018: LD_INT 1
6020: PPUSH
6021: CALL_OW 109
// ComMoveXY ( i , 222 , 229 ) ;
6025: LD_VAR 0 1
6029: PPUSH
6030: LD_INT 222
6032: PPUSH
6033: LD_INT 229
6035: PPUSH
6036: CALL_OW 111
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
6040: LD_VAR 0 1
6044: PPUSH
6045: CALL_OW 256
6049: PUSH
6050: LD_INT 1000
6052: EQUAL
6053: PUSH
6054: LD_VAR 0 1
6058: PPUSH
6059: CALL_OW 110
6063: PUSH
6064: LD_INT 1
6066: EQUAL
6067: AND
6068: IFFALSE 6082
// SetTag ( i , 0 ) ;
6070: LD_VAR 0 1
6074: PPUSH
6075: LD_INT 0
6077: PPUSH
6078: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and not HasTask ( i ) then
6082: LD_VAR 0 1
6086: PPUSH
6087: CALL_OW 110
6091: PUSH
6092: LD_INT 0
6094: EQUAL
6095: PUSH
6096: LD_VAR 0 1
6100: PPUSH
6101: CALL_OW 256
6105: PUSH
6106: LD_INT 700
6108: GREATEREQUAL
6109: AND
6110: PUSH
6111: LD_VAR 0 1
6115: PPUSH
6116: CALL_OW 314
6120: NOT
6121: AND
6122: IFFALSE 6175
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6124: LD_INT 18
6126: PPUSH
6127: LD_INT 22
6129: PUSH
6130: LD_INT 3
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: PPUSH
6137: CALL_OW 70
6141: IFFALSE 6160
// ComAgressiveMove ( i , 167 , 231 ) else
6143: LD_VAR 0 1
6147: PPUSH
6148: LD_INT 167
6150: PPUSH
6151: LD_INT 231
6153: PPUSH
6154: CALL_OW 114
6158: GO 6175
// ComAgressiveMove ( i , 106 , 153 ) ;
6160: LD_VAR 0 1
6164: PPUSH
6165: LD_INT 106
6167: PPUSH
6168: LD_INT 153
6170: PPUSH
6171: CALL_OW 114
// end ; if GetType ( i ) = unit_vehicle then
6175: LD_VAR 0 1
6179: PPUSH
6180: CALL_OW 247
6184: PUSH
6185: LD_INT 2
6187: EQUAL
6188: IFFALSE 6563
// begin nearestPoint := [ 219 , 219 ] ;
6190: LD_ADDR_VAR 0 2
6194: PUSH
6195: LD_INT 219
6197: PUSH
6198: LD_INT 219
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: ST_TO_ADDR
// if GetDistUnitXY ( i , 156 , 202 ) < GetDistUnitXY ( i , 219 , 219 ) then
6205: LD_VAR 0 1
6209: PPUSH
6210: LD_INT 156
6212: PPUSH
6213: LD_INT 202
6215: PPUSH
6216: CALL_OW 297
6220: PUSH
6221: LD_VAR 0 1
6225: PPUSH
6226: LD_INT 219
6228: PPUSH
6229: LD_INT 219
6231: PPUSH
6232: CALL_OW 297
6236: LESS
6237: IFFALSE 6254
// nearestPoint := [ 156 , 202 ] ;
6239: LD_ADDR_VAR 0 2
6243: PUSH
6244: LD_INT 156
6246: PUSH
6247: LD_INT 202
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: ST_TO_ADDR
// if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
6254: LD_VAR 0 1
6258: PPUSH
6259: CALL_OW 256
6263: PUSH
6264: LD_INT 700
6266: LESS
6267: PUSH
6268: LD_VAR 0 1
6272: PPUSH
6273: CALL_OW 110
6277: PUSH
6278: LD_INT 0
6280: EQUAL
6281: AND
6282: IFFALSE 6323
// begin SetTag ( i , 1 ) ;
6284: LD_VAR 0 1
6288: PPUSH
6289: LD_INT 1
6291: PPUSH
6292: CALL_OW 109
// ComMoveXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) ;
6296: LD_VAR 0 1
6300: PPUSH
6301: LD_VAR 0 2
6305: PUSH
6306: LD_INT 1
6308: ARRAY
6309: PPUSH
6310: LD_VAR 0 2
6314: PUSH
6315: LD_INT 2
6317: ARRAY
6318: PPUSH
6319: CALL_OW 111
// end ; if GetLives ( i ) < 700 and GetTag ( i ) = 1 and IsDrivenBy ( i ) and GetDistUnitXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) < 10 then
6323: LD_VAR 0 1
6327: PPUSH
6328: CALL_OW 256
6332: PUSH
6333: LD_INT 700
6335: LESS
6336: PUSH
6337: LD_VAR 0 1
6341: PPUSH
6342: CALL_OW 110
6346: PUSH
6347: LD_INT 1
6349: EQUAL
6350: AND
6351: PUSH
6352: LD_VAR 0 1
6356: PPUSH
6357: CALL_OW 311
6361: AND
6362: PUSH
6363: LD_VAR 0 1
6367: PPUSH
6368: LD_VAR 0 2
6372: PUSH
6373: LD_INT 1
6375: ARRAY
6376: PPUSH
6377: LD_VAR 0 2
6381: PUSH
6382: LD_INT 2
6384: ARRAY
6385: PPUSH
6386: CALL_OW 297
6390: PUSH
6391: LD_INT 10
6393: LESS
6394: AND
6395: IFFALSE 6406
// ComRepairVehicleAndReturn ( i ) ;
6397: LD_VAR 0 1
6401: PPUSH
6402: CALL 63823 0 1
// if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
6406: LD_VAR 0 1
6410: PPUSH
6411: CALL_OW 256
6415: PUSH
6416: LD_INT 1000
6418: EQUAL
6419: PUSH
6420: LD_VAR 0 1
6424: PPUSH
6425: CALL_OW 110
6429: PUSH
6430: LD_INT 1
6432: EQUAL
6433: AND
6434: PUSH
6435: LD_VAR 0 1
6439: PPUSH
6440: CALL_OW 311
6444: AND
6445: IFFALSE 6459
// SetTag ( i , 0 ) ;
6447: LD_VAR 0 1
6451: PPUSH
6452: LD_INT 0
6454: PPUSH
6455: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and IsDrivenBy ( i ) and not HasTask ( i ) then
6459: LD_VAR 0 1
6463: PPUSH
6464: CALL_OW 110
6468: PUSH
6469: LD_INT 0
6471: EQUAL
6472: PUSH
6473: LD_VAR 0 1
6477: PPUSH
6478: CALL_OW 256
6482: PUSH
6483: LD_INT 700
6485: GREATEREQUAL
6486: AND
6487: PUSH
6488: LD_VAR 0 1
6492: PPUSH
6493: CALL_OW 311
6497: AND
6498: PUSH
6499: LD_VAR 0 1
6503: PPUSH
6504: CALL_OW 314
6508: NOT
6509: AND
6510: IFFALSE 6563
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6512: LD_INT 18
6514: PPUSH
6515: LD_INT 22
6517: PUSH
6518: LD_INT 3
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: PPUSH
6525: CALL_OW 70
6529: IFFALSE 6548
// ComAgressiveMove ( i , 167 , 231 ) else
6531: LD_VAR 0 1
6535: PPUSH
6536: LD_INT 167
6538: PPUSH
6539: LD_INT 231
6541: PPUSH
6542: CALL_OW 114
6546: GO 6563
// ComAgressiveMove ( i , 106 , 153 ) ;
6548: LD_VAR 0 1
6552: PPUSH
6553: LD_INT 106
6555: PPUSH
6556: LD_INT 153
6558: PPUSH
6559: CALL_OW 114
// end ; end ;
6563: GO 5929
6565: POP
6566: POP
// until not omarSquad ;
6567: LD_EXP 48
6571: NOT
6572: IFFALSE 5882
// end ; end_of_file
6574: PPOPN 2
6576: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
6577: LD_INT 0
6579: PPUSH
// uc_side := side ;
6580: LD_ADDR_OWVAR 20
6584: PUSH
6585: LD_VAR 0 1
6589: ST_TO_ADDR
// uc_nation := nation ;
6590: LD_ADDR_OWVAR 21
6594: PUSH
6595: LD_VAR 0 2
6599: ST_TO_ADDR
// vc_chassis := chassis ;
6600: LD_ADDR_OWVAR 37
6604: PUSH
6605: LD_VAR 0 3
6609: ST_TO_ADDR
// vc_engine := engine ;
6610: LD_ADDR_OWVAR 39
6614: PUSH
6615: LD_VAR 0 4
6619: ST_TO_ADDR
// vc_control := control ;
6620: LD_ADDR_OWVAR 38
6624: PUSH
6625: LD_VAR 0 5
6629: ST_TO_ADDR
// vc_weapon := weapon ;
6630: LD_ADDR_OWVAR 40
6634: PUSH
6635: LD_VAR 0 6
6639: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6640: LD_ADDR_OWVAR 41
6644: PUSH
6645: LD_VAR 0 7
6649: ST_TO_ADDR
// result := CreateVehicle ;
6650: LD_ADDR_VAR 0 8
6654: PUSH
6655: CALL_OW 45
6659: ST_TO_ADDR
// end ;
6660: LD_VAR 0 8
6664: RET
// export function SayX ( units , ident ) ; var i ; begin
6665: LD_INT 0
6667: PPUSH
6668: PPUSH
// result := false ;
6669: LD_ADDR_VAR 0 3
6673: PUSH
6674: LD_INT 0
6676: ST_TO_ADDR
// if not units then
6677: LD_VAR 0 1
6681: NOT
6682: IFFALSE 6686
// exit ;
6684: GO 6740
// for i in units do
6686: LD_ADDR_VAR 0 4
6690: PUSH
6691: LD_VAR 0 1
6695: PUSH
6696: FOR_IN
6697: IFFALSE 6738
// if IsOk ( i ) then
6699: LD_VAR 0 4
6703: PPUSH
6704: CALL_OW 302
6708: IFFALSE 6736
// begin Say ( i , ident ) ;
6710: LD_VAR 0 4
6714: PPUSH
6715: LD_VAR 0 2
6719: PPUSH
6720: CALL_OW 88
// result := i ;
6724: LD_ADDR_VAR 0 3
6728: PUSH
6729: LD_VAR 0 4
6733: ST_TO_ADDR
// break ;
6734: GO 6738
// end ;
6736: GO 6696
6738: POP
6739: POP
// end ;
6740: LD_VAR 0 3
6744: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
6745: LD_INT 0
6747: PPUSH
6748: PPUSH
// InitUc ;
6749: CALL_OW 18
// InitHc ;
6753: CALL_OW 19
// uc_side := 0 ;
6757: LD_ADDR_OWVAR 20
6761: PUSH
6762: LD_INT 0
6764: ST_TO_ADDR
// uc_nation := 0 ;
6765: LD_ADDR_OWVAR 21
6769: PUSH
6770: LD_INT 0
6772: ST_TO_ADDR
// for i = 1 to amount do
6773: LD_ADDR_VAR 0 4
6777: PUSH
6778: DOUBLE
6779: LD_INT 1
6781: DEC
6782: ST_TO_ADDR
6783: LD_VAR 0 2
6787: PUSH
6788: FOR_TO
6789: IFFALSE 6871
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
6791: LD_ADDR_OWVAR 29
6795: PUSH
6796: LD_INT 9
6798: PPUSH
6799: LD_INT 12
6801: PPUSH
6802: CALL_OW 12
6806: PUSH
6807: LD_INT 9
6809: PPUSH
6810: LD_INT 12
6812: PPUSH
6813: CALL_OW 12
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
6822: LD_ADDR_OWVAR 35
6826: PUSH
6827: LD_INT 1
6829: NEG
6830: PPUSH
6831: LD_INT 1
6833: PPUSH
6834: CALL_OW 12
6838: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
6839: LD_INT 0
6841: PPUSH
6842: LD_INT 12
6844: PPUSH
6845: LD_INT 1
6847: PPUSH
6848: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
6852: CALL_OW 44
6856: PPUSH
6857: LD_VAR 0 1
6861: PPUSH
6862: LD_INT 0
6864: PPUSH
6865: CALL_OW 49
// end ;
6869: GO 6788
6871: POP
6872: POP
// InitHc ;
6873: CALL_OW 19
// end ;
6877: LD_VAR 0 3
6881: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
6882: LD_INT 0
6884: PPUSH
6885: PPUSH
// uc_side := 0 ;
6886: LD_ADDR_OWVAR 20
6890: PUSH
6891: LD_INT 0
6893: ST_TO_ADDR
// uc_nation := 0 ;
6894: LD_ADDR_OWVAR 21
6898: PUSH
6899: LD_INT 0
6901: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) ;
6902: LD_INT 7
6904: PPUSH
6905: LD_INT 6
6907: PUSH
6908: LD_INT 5
6910: PUSH
6911: LD_INT 4
6913: PUSH
6914: LD_INT 3
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: PUSH
6923: LD_OWVAR 67
6927: ARRAY
6928: PPUSH
6929: CALL 6745 0 2
// for i = 1 to 2 do
6933: LD_ADDR_VAR 0 4
6937: PUSH
6938: DOUBLE
6939: LD_INT 1
6941: DEC
6942: ST_TO_ADDR
6943: LD_INT 2
6945: PUSH
6946: FOR_TO
6947: IFFALSE 6986
// begin vc_chassis := class_mastodont ;
6949: LD_ADDR_OWVAR 37
6953: PUSH
6954: LD_EXP 77
6958: ST_TO_ADDR
// vc_control := control_rider ;
6959: LD_ADDR_OWVAR 38
6963: PUSH
6964: LD_INT 4
6966: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
6967: CALL_OW 45
6971: PPUSH
6972: LD_VAR 0 1
6976: PPUSH
6977: LD_INT 0
6979: PPUSH
6980: CALL 61048 0 3
// end ;
6984: GO 6946
6986: POP
6987: POP
// for i := 1 to 4 do
6988: LD_ADDR_VAR 0 4
6992: PUSH
6993: DOUBLE
6994: LD_INT 1
6996: DEC
6997: ST_TO_ADDR
6998: LD_INT 4
7000: PUSH
7001: FOR_TO
7002: IFFALSE 7041
// begin hc_class := class_horse ;
7004: LD_ADDR_OWVAR 28
7008: PUSH
7009: LD_EXP 78
7013: ST_TO_ADDR
// hc_gallery :=  ;
7014: LD_ADDR_OWVAR 33
7018: PUSH
7019: LD_STRING 
7021: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7022: CALL_OW 44
7026: PPUSH
7027: LD_VAR 0 1
7031: PPUSH
7032: LD_INT 0
7034: PPUSH
7035: CALL_OW 49
// end ;
7039: GO 7001
7041: POP
7042: POP
// for i = 1 to 5 do
7043: LD_ADDR_VAR 0 4
7047: PUSH
7048: DOUBLE
7049: LD_INT 1
7051: DEC
7052: ST_TO_ADDR
7053: LD_INT 5
7055: PUSH
7056: FOR_TO
7057: IFFALSE 7111
// begin hc_class = class_tiger ;
7059: LD_ADDR_OWVAR 28
7063: PUSH
7064: LD_INT 14
7066: ST_TO_ADDR
// hc_gallery =  ;
7067: LD_ADDR_OWVAR 33
7071: PUSH
7072: LD_STRING 
7074: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
7075: LD_ADDR_OWVAR 35
7079: PUSH
7080: LD_INT 7
7082: NEG
7083: PPUSH
7084: LD_INT 7
7086: PPUSH
7087: CALL_OW 12
7091: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
7092: CALL_OW 44
7096: PPUSH
7097: LD_VAR 0 1
7101: PPUSH
7102: LD_INT 0
7104: PPUSH
7105: CALL 61048 0 3
// end ;
7109: GO 7056
7111: POP
7112: POP
// for i := 1 to 4 do
7113: LD_ADDR_VAR 0 4
7117: PUSH
7118: DOUBLE
7119: LD_INT 1
7121: DEC
7122: ST_TO_ADDR
7123: LD_INT 4
7125: PUSH
7126: FOR_TO
7127: IFFALSE 7164
// begin hc_class := class_phororhacos ;
7129: LD_ADDR_OWVAR 28
7133: PUSH
7134: LD_INT 18
7136: ST_TO_ADDR
// hc_gallery :=  ;
7137: LD_ADDR_OWVAR 33
7141: PUSH
7142: LD_STRING 
7144: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7145: CALL_OW 44
7149: PPUSH
7150: LD_VAR 0 1
7154: PPUSH
7155: LD_INT 0
7157: PPUSH
7158: CALL_OW 49
// end ;
7162: GO 7126
7164: POP
7165: POP
// for i := 1 to 4 do
7166: LD_ADDR_VAR 0 4
7170: PUSH
7171: DOUBLE
7172: LD_INT 1
7174: DEC
7175: ST_TO_ADDR
7176: LD_INT 4
7178: PUSH
7179: FOR_TO
7180: IFFALSE 7217
// begin hc_class := class_baggie ;
7182: LD_ADDR_OWVAR 28
7186: PUSH
7187: LD_INT 13
7189: ST_TO_ADDR
// hc_gallery :=  ;
7190: LD_ADDR_OWVAR 33
7194: PUSH
7195: LD_STRING 
7197: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7198: CALL_OW 44
7202: PPUSH
7203: LD_VAR 0 1
7207: PPUSH
7208: LD_INT 0
7210: PPUSH
7211: CALL_OW 49
// end ;
7215: GO 7179
7217: POP
7218: POP
// for i := 1 to 7 do
7219: LD_ADDR_VAR 0 4
7223: PUSH
7224: DOUBLE
7225: LD_INT 1
7227: DEC
7228: ST_TO_ADDR
7229: LD_INT 7
7231: PUSH
7232: FOR_TO
7233: IFFALSE 7270
// begin hc_class := class_frog ;
7235: LD_ADDR_OWVAR 28
7239: PUSH
7240: LD_INT 19
7242: ST_TO_ADDR
// hc_gallery :=  ;
7243: LD_ADDR_OWVAR 33
7247: PUSH
7248: LD_STRING 
7250: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
7251: CALL_OW 44
7255: PPUSH
7256: LD_VAR 0 2
7260: PPUSH
7261: LD_INT 0
7263: PPUSH
7264: CALL_OW 49
// end ;
7268: GO 7232
7270: POP
7271: POP
// end ;
7272: LD_VAR 0 3
7276: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
7277: LD_INT 0
7279: PPUSH
7280: PPUSH
7281: PPUSH
// if not observer or not unit then
7282: LD_VAR 0 1
7286: NOT
7287: PUSH
7288: LD_VAR 0 2
7292: NOT
7293: OR
7294: IFFALSE 7298
// exit ;
7296: GO 7346
// if not See ( GetSide ( observer ) , unit ) then
7298: LD_VAR 0 1
7302: PPUSH
7303: CALL_OW 255
7307: PPUSH
7308: LD_VAR 0 2
7312: PPUSH
7313: CALL_OW 292
7317: NOT
7318: IFFALSE 7322
// exit ;
7320: GO 7346
// result := GetDistUnits ( observer , unit ) < 12 ;
7322: LD_ADDR_VAR 0 3
7326: PUSH
7327: LD_VAR 0 1
7331: PPUSH
7332: LD_VAR 0 2
7336: PPUSH
7337: CALL_OW 296
7341: PUSH
7342: LD_INT 12
7344: LESS
7345: ST_TO_ADDR
// end ;
7346: LD_VAR 0 3
7350: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
7351: LD_INT 0
7353: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
7354: LD_VAR 0 2
7358: PUSH
7359: LD_INT 1
7361: ARRAY
7362: PPUSH
7363: LD_VAR 0 2
7367: PUSH
7368: LD_INT 2
7370: ARRAY
7371: PPUSH
7372: CALL_OW 488
7376: PUSH
7377: LD_VAR 0 2
7381: PUSH
7382: LD_INT 1
7384: ARRAY
7385: PPUSH
7386: LD_VAR 0 2
7390: PUSH
7391: LD_INT 2
7393: ARRAY
7394: PPUSH
7395: CALL_OW 428
7399: PUSH
7400: LD_INT 0
7402: EQUAL
7403: AND
7404: IFFALSE 7438
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
7406: LD_VAR 0 1
7410: PPUSH
7411: LD_VAR 0 2
7415: PUSH
7416: LD_INT 1
7418: ARRAY
7419: PPUSH
7420: LD_VAR 0 2
7424: PUSH
7425: LD_INT 2
7427: ARRAY
7428: PPUSH
7429: LD_VAR 0 3
7433: PPUSH
7434: CALL_OW 48
// end ;
7438: LD_VAR 0 4
7442: RET
// export function ReverseArray ( array ) ; var i ; begin
7443: LD_INT 0
7445: PPUSH
7446: PPUSH
// if not array then
7447: LD_VAR 0 1
7451: NOT
7452: IFFALSE 7456
// exit ;
7454: GO 7514
// result := [ ] ;
7456: LD_ADDR_VAR 0 2
7460: PUSH
7461: EMPTY
7462: ST_TO_ADDR
// for i := 1 to array do
7463: LD_ADDR_VAR 0 3
7467: PUSH
7468: DOUBLE
7469: LD_INT 1
7471: DEC
7472: ST_TO_ADDR
7473: LD_VAR 0 1
7477: PUSH
7478: FOR_TO
7479: IFFALSE 7512
// result := Insert ( result , 1 , array [ i ] ) ;
7481: LD_ADDR_VAR 0 2
7485: PUSH
7486: LD_VAR 0 2
7490: PPUSH
7491: LD_INT 1
7493: PPUSH
7494: LD_VAR 0 1
7498: PUSH
7499: LD_VAR 0 3
7503: ARRAY
7504: PPUSH
7505: CALL_OW 2
7509: ST_TO_ADDR
7510: GO 7478
7512: POP
7513: POP
// end ;
7514: LD_VAR 0 2
7518: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
7519: LD_INT 0
7521: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
7522: LD_VAR 0 1
7526: PPUSH
7527: LD_VAR 0 2
7531: PPUSH
7532: LD_VAR 0 3
7536: PPUSH
7537: LD_VAR 0 4
7541: PPUSH
7542: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
7546: LD_VAR 0 1
7550: PPUSH
7551: LD_VAR 0 2
7555: PPUSH
7556: LD_VAR 0 3
7560: PPUSH
7561: CALL_OW 331
// end ;
7565: LD_VAR 0 5
7569: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
7570: LD_INT 0
7572: PPUSH
// if not units then
7573: LD_VAR 0 1
7577: NOT
7578: IFFALSE 7582
// exit ;
7580: GO 7665
// result := true ;
7582: LD_ADDR_VAR 0 4
7586: PUSH
7587: LD_INT 1
7589: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
7590: LD_VAR 0 1
7594: PPUSH
7595: LD_INT 26
7597: PUSH
7598: LD_INT 1
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: PPUSH
7605: CALL_OW 72
7609: PUSH
7610: LD_INT 1
7612: ARRAY
7613: PPUSH
7614: LD_VAR 0 2
7618: PPUSH
7619: CALL_OW 88
7623: NOT
7624: IFFALSE 7665
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
7626: LD_ADDR_VAR 0 4
7630: PUSH
7631: LD_VAR 0 1
7635: PPUSH
7636: LD_INT 26
7638: PUSH
7639: LD_INT 2
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PPUSH
7646: CALL_OW 72
7650: PUSH
7651: LD_INT 1
7653: ARRAY
7654: PPUSH
7655: LD_VAR 0 3
7659: PPUSH
7660: CALL_OW 88
7664: ST_TO_ADDR
// end ;
7665: LD_VAR 0 4
7669: RET
// export function SeeGroup ( side , group ) ; var i ; begin
7670: LD_INT 0
7672: PPUSH
7673: PPUSH
// if not group then
7674: LD_VAR 0 2
7678: NOT
7679: IFFALSE 7683
// exit ;
7681: GO 7728
// for i in group do
7683: LD_ADDR_VAR 0 4
7687: PUSH
7688: LD_VAR 0 2
7692: PUSH
7693: FOR_IN
7694: IFFALSE 7726
// if See ( side , i ) then
7696: LD_VAR 0 1
7700: PPUSH
7701: LD_VAR 0 4
7705: PPUSH
7706: CALL_OW 292
7710: IFFALSE 7724
// begin result := true ;
7712: LD_ADDR_VAR 0 3
7716: PUSH
7717: LD_INT 1
7719: ST_TO_ADDR
// exit ;
7720: POP
7721: POP
7722: GO 7728
// end ;
7724: GO 7693
7726: POP
7727: POP
// end ; end_of_file
7728: LD_VAR 0 3
7732: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
7733: LD_INT 0
7735: PPUSH
7736: PPUSH
7737: PPUSH
7738: PPUSH
7739: PPUSH
7740: PPUSH
7741: PPUSH
// uc_side := 3 ;
7742: LD_ADDR_OWVAR 20
7746: PUSH
7747: LD_INT 3
7749: ST_TO_ADDR
// uc_nation := 3 ;
7750: LD_ADDR_OWVAR 21
7754: PUSH
7755: LD_INT 3
7757: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
7758: LD_ADDR_EXP 49
7762: PUSH
7763: LD_STRING Morozov
7765: PPUSH
7766: CALL_OW 25
7770: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
7771: LD_EXP 49
7775: PPUSH
7776: LD_INT 52
7778: PPUSH
7779: CALL_OW 52
// if not gaidarKilled then
7783: LD_EXP 7
7787: NOT
7788: IFFALSE 7821
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
7790: LD_ADDR_EXP 50
7794: PUSH
7795: LD_STRING Gaydar
7797: PPUSH
7798: LD_INT 0
7800: PPUSH
7801: LD_STRING 
7803: PPUSH
7804: CALL 25297 0 3
7808: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
7809: LD_EXP 50
7813: PPUSH
7814: LD_INT 52
7816: PPUSH
7817: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
7821: LD_INT 52
7823: PPUSH
7824: LD_STRING lenin
7826: PPUSH
7827: CALL_OW 500
// ruOutsiders := [ ] ;
7831: LD_ADDR_EXP 52
7835: PUSH
7836: EMPTY
7837: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
7838: LD_ADDR_EXP 54
7842: PUSH
7843: EMPTY
7844: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
7845: LD_ADDR_EXP 55
7849: PUSH
7850: EMPTY
7851: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
7852: LD_ADDR_EXP 56
7856: PUSH
7857: EMPTY
7858: ST_TO_ADDR
// ruAttackers := [ ] ;
7859: LD_ADDR_EXP 57
7863: PUSH
7864: EMPTY
7865: ST_TO_ADDR
// waveStrength := 0 ;
7866: LD_ADDR_EXP 58
7870: PUSH
7871: LD_INT 0
7873: ST_TO_ADDR
// if not gaidarKilled then
7874: LD_EXP 7
7878: NOT
7879: IFFALSE 7889
// waveStrength := 2 ;
7881: LD_ADDR_EXP 58
7885: PUSH
7886: LD_INT 2
7888: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
7889: LD_ADDR_VAR 0 7
7893: PUSH
7894: LD_INT 22
7896: PUSH
7897: LD_INT 3
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PUSH
7904: LD_INT 21
7906: PUSH
7907: LD_INT 3
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PPUSH
7918: CALL_OW 69
7922: ST_TO_ADDR
// for i in tmp do
7923: LD_ADDR_VAR 0 2
7927: PUSH
7928: LD_VAR 0 7
7932: PUSH
7933: FOR_IN
7934: IFFALSE 7971
// SetBLevel ( i , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
7936: LD_VAR 0 2
7940: PPUSH
7941: LD_INT 5
7943: PUSH
7944: LD_INT 6
7946: PUSH
7947: LD_INT 7
7949: PUSH
7950: LD_INT 8
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: PUSH
7959: LD_OWVAR 67
7963: ARRAY
7964: PPUSH
7965: CALL_OW 241
7969: GO 7933
7971: POP
7972: POP
// for i := 1 to 3 do
7973: LD_ADDR_VAR 0 2
7977: PUSH
7978: DOUBLE
7979: LD_INT 1
7981: DEC
7982: ST_TO_ADDR
7983: LD_INT 3
7985: PUSH
7986: FOR_TO
7987: IFFALSE 8025
// begin PrepareHuman ( false , 1 , 0 ) ;
7989: LD_INT 0
7991: PPUSH
7992: LD_INT 1
7994: PPUSH
7995: LD_INT 0
7997: PPUSH
7998: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
8002: CALL_OW 44
8006: PPUSH
8007: LD_INT 75
8009: PPUSH
8010: LD_INT 49
8012: PPUSH
8013: LD_INT 3
8015: PPUSH
8016: LD_INT 0
8018: PPUSH
8019: CALL_OW 50
// end ;
8023: GO 7986
8025: POP
8026: POP
// for i := 1 to 4 do
8027: LD_ADDR_VAR 0 2
8031: PUSH
8032: DOUBLE
8033: LD_INT 1
8035: DEC
8036: ST_TO_ADDR
8037: LD_INT 4
8039: PUSH
8040: FOR_TO
8041: IFFALSE 8087
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
8043: LD_INT 0
8045: PPUSH
8046: LD_INT 1
8048: PPUSH
8049: LD_INT 2
8051: PPUSH
8052: CALL_OW 12
8056: PPUSH
8057: LD_INT 0
8059: PPUSH
8060: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
8064: CALL_OW 44
8068: PPUSH
8069: LD_INT 330
8071: PPUSH
8072: LD_INT 231
8074: PPUSH
8075: LD_INT 5
8077: PPUSH
8078: LD_INT 0
8080: PPUSH
8081: CALL_OW 50
// end ;
8085: GO 8040
8087: POP
8088: POP
// hc_class := 1 ;
8089: LD_ADDR_OWVAR 28
8093: PUSH
8094: LD_INT 1
8096: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
8097: CALL_OW 44
8101: PPUSH
8102: LD_INT 324
8104: PPUSH
8105: LD_INT 219
8107: PPUSH
8108: CALL_OW 428
8112: PPUSH
8113: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
8117: CALL_OW 44
8121: PPUSH
8122: LD_INT 316
8124: PPUSH
8125: LD_INT 223
8127: PPUSH
8128: CALL_OW 428
8132: PPUSH
8133: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
8137: LD_ADDR_VAR 0 7
8141: PUSH
8142: LD_INT 172
8144: PPUSH
8145: LD_INT 198
8147: PPUSH
8148: CALL_OW 428
8152: PPUSH
8153: CALL_OW 274
8157: PUSH
8158: LD_INT 189
8160: PPUSH
8161: LD_INT 156
8163: PPUSH
8164: CALL_OW 428
8168: PPUSH
8169: CALL_OW 274
8173: PUSH
8174: LD_INT 341
8176: PPUSH
8177: LD_INT 232
8179: PPUSH
8180: CALL_OW 428
8184: PPUSH
8185: CALL_OW 274
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: LIST
8194: ST_TO_ADDR
// for i in tmp do
8195: LD_ADDR_VAR 0 2
8199: PUSH
8200: LD_VAR 0 7
8204: PUSH
8205: FOR_IN
8206: IFFALSE 8240
// begin SetResourceType ( i , mat_cans , 200 ) ;
8208: LD_VAR 0 2
8212: PPUSH
8213: LD_INT 1
8215: PPUSH
8216: LD_INT 200
8218: PPUSH
8219: CALL_OW 277
// SetResourceType ( i , mat_oil , 200 ) ;
8223: LD_VAR 0 2
8227: PPUSH
8228: LD_INT 2
8230: PPUSH
8231: LD_INT 200
8233: PPUSH
8234: CALL_OW 277
// end ;
8238: GO 8205
8240: POP
8241: POP
// tmp := [ [ 177 , 114 ] , [ 138 , 96 ] ] ;
8242: LD_ADDR_VAR 0 7
8246: PUSH
8247: LD_INT 177
8249: PUSH
8250: LD_INT 114
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: PUSH
8257: LD_INT 138
8259: PUSH
8260: LD_INT 96
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: ST_TO_ADDR
// for i := 1 to tmp do
8271: LD_ADDR_VAR 0 2
8275: PUSH
8276: DOUBLE
8277: LD_INT 1
8279: DEC
8280: ST_TO_ADDR
8281: LD_VAR 0 7
8285: PUSH
8286: FOR_TO
8287: IFFALSE 8370
// begin PrepareHuman ( false , class_bazooker , 6 ) ;
8289: LD_INT 0
8291: PPUSH
8292: LD_INT 9
8294: PPUSH
8295: LD_INT 6
8297: PPUSH
8298: CALL_OW 380
// un := CreateHuman ;
8302: LD_ADDR_VAR 0 5
8306: PUSH
8307: CALL_OW 44
8311: ST_TO_ADDR
// SetDir ( un , 2 ) ;
8312: LD_VAR 0 5
8316: PPUSH
8317: LD_INT 2
8319: PPUSH
8320: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
8324: LD_VAR 0 5
8328: PPUSH
8329: LD_VAR 0 7
8333: PUSH
8334: LD_VAR 0 2
8338: ARRAY
8339: PUSH
8340: LD_INT 1
8342: ARRAY
8343: PPUSH
8344: LD_VAR 0 7
8348: PUSH
8349: LD_VAR 0 2
8353: ARRAY
8354: PUSH
8355: LD_INT 2
8357: ARRAY
8358: PPUSH
8359: CALL_OW 428
8363: PPUSH
8364: CALL_OW 52
// end ;
8368: GO 8286
8370: POP
8371: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
8372: LD_ADDR_VAR 0 7
8376: PUSH
8377: LD_INT 198
8379: PUSH
8380: LD_INT 158
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: PUSH
8387: LD_INT 203
8389: PUSH
8390: LD_INT 166
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: PUSH
8397: LD_INT 181
8399: PUSH
8400: LD_INT 209
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: PUSH
8407: LD_INT 178
8409: PUSH
8410: LD_INT 196
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: PUSH
8417: LD_INT 181
8419: PUSH
8420: LD_INT 212
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: ST_TO_ADDR
// for i := 1 to tmp do
8434: LD_ADDR_VAR 0 2
8438: PUSH
8439: DOUBLE
8440: LD_INT 1
8442: DEC
8443: ST_TO_ADDR
8444: LD_VAR 0 7
8448: PUSH
8449: FOR_TO
8450: IFFALSE 8571
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
8452: LD_INT 0
8454: PPUSH
8455: LD_INT 1
8457: PPUSH
8458: LD_INT 4
8460: PUSH
8461: LD_INT 5
8463: PUSH
8464: LD_INT 6
8466: PUSH
8467: LD_INT 7
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: PUSH
8476: LD_OWVAR 67
8480: ARRAY
8481: PPUSH
8482: CALL_OW 380
// un := CreateHuman ;
8486: LD_ADDR_VAR 0 5
8490: PUSH
8491: CALL_OW 44
8495: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
8496: LD_ADDR_VAR 0 4
8500: PUSH
8501: LD_VAR 0 7
8505: PUSH
8506: LD_VAR 0 2
8510: ARRAY
8511: PUSH
8512: LD_INT 1
8514: ARRAY
8515: PPUSH
8516: LD_VAR 0 7
8520: PUSH
8521: LD_VAR 0 2
8525: ARRAY
8526: PUSH
8527: LD_INT 2
8529: ARRAY
8530: PPUSH
8531: CALL_OW 428
8535: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
8536: LD_VAR 0 5
8540: PPUSH
8541: LD_VAR 0 4
8545: PPUSH
8546: CALL 58021 0 1
8550: PPUSH
8551: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8555: LD_VAR 0 5
8559: PPUSH
8560: LD_VAR 0 4
8564: PPUSH
8565: CALL_OW 52
// end ;
8569: GO 8449
8571: POP
8572: POP
// for i := 1 to 3 do
8573: LD_ADDR_VAR 0 2
8577: PUSH
8578: DOUBLE
8579: LD_INT 1
8581: DEC
8582: ST_TO_ADDR
8583: LD_INT 3
8585: PUSH
8586: FOR_TO
8587: IFFALSE 8642
// begin InitHc ;
8589: CALL_OW 19
// uc_nation := 0 ;
8593: LD_ADDR_OWVAR 21
8597: PUSH
8598: LD_INT 0
8600: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
8601: LD_ADDR_OWVAR 28
8605: PUSH
8606: LD_INT 16
8608: ST_TO_ADDR
// un := CreateHuman ;
8609: LD_ADDR_VAR 0 5
8613: PUSH
8614: CALL_OW 44
8618: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
8619: LD_VAR 0 5
8623: PPUSH
8624: LD_INT 194
8626: PPUSH
8627: LD_INT 164
8629: PPUSH
8630: LD_INT 6
8632: PPUSH
8633: LD_INT 0
8635: PPUSH
8636: CALL_OW 50
// end ;
8640: GO 8586
8642: POP
8643: POP
// uc_nation := 3 ;
8644: LD_ADDR_OWVAR 21
8648: PUSH
8649: LD_INT 3
8651: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
8652: LD_INT 24
8654: PPUSH
8655: LD_INT 1
8657: PPUSH
8658: LD_INT 1
8660: PPUSH
8661: LD_INT 44
8663: PPUSH
8664: LD_INT 10
8666: PPUSH
8667: CALL 30314 0 5
// un := CreateVehicle ;
8671: LD_ADDR_VAR 0 5
8675: PUSH
8676: CALL_OW 45
8680: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 162 , 1 , false ) ;
8681: LD_VAR 0 5
8685: PPUSH
8686: LD_INT 199
8688: PPUSH
8689: LD_INT 162
8691: PPUSH
8692: LD_INT 1
8694: PPUSH
8695: LD_INT 0
8697: PPUSH
8698: CALL 64263 0 5
// ComHold ( un ) ;
8702: LD_VAR 0 5
8706: PPUSH
8707: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
8711: LD_INT 0
8713: PPUSH
8714: LD_INT 3
8716: PPUSH
8717: LD_INT 4
8719: PPUSH
8720: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8724: CALL_OW 44
8728: PPUSH
8729: LD_VAR 0 5
8733: PPUSH
8734: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
8738: LD_INT 24
8740: PPUSH
8741: LD_INT 1
8743: PPUSH
8744: LD_INT 1
8746: PPUSH
8747: LD_INT 45
8749: PPUSH
8750: LD_INT 10
8752: PPUSH
8753: CALL 30314 0 5
// un := CreateVehicle ;
8757: LD_ADDR_VAR 0 5
8761: PUSH
8762: CALL_OW 45
8766: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
8767: LD_VAR 0 5
8771: PPUSH
8772: LD_INT 129
8774: PPUSH
8775: LD_INT 93
8777: PPUSH
8778: LD_INT 1
8780: PPUSH
8781: LD_INT 0
8783: PPUSH
8784: CALL 64263 0 5
// ComHold ( un ) ;
8788: LD_VAR 0 5
8792: PPUSH
8793: CALL_OW 140
// if Difficulty > 1 then
8797: LD_OWVAR 67
8801: PUSH
8802: LD_INT 1
8804: GREATER
8805: IFFALSE 8979
// begin PrepareHuman ( false , 3 , 4 ) ;
8807: LD_INT 0
8809: PPUSH
8810: LD_INT 3
8812: PPUSH
8813: LD_INT 4
8815: PPUSH
8816: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8820: CALL_OW 44
8824: PPUSH
8825: LD_VAR 0 5
8829: PPUSH
8830: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
8834: LD_INT 24
8836: PPUSH
8837: LD_INT 1
8839: PPUSH
8840: LD_INT 1
8842: PPUSH
8843: LD_INT 45
8845: PPUSH
8846: LD_INT 10
8848: PPUSH
8849: CALL 30314 0 5
// un := CreateVehicle ;
8853: LD_ADDR_VAR 0 5
8857: PUSH
8858: CALL_OW 45
8862: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 92 , 2 , false ) ;
8863: LD_VAR 0 5
8867: PPUSH
8868: LD_INT 134
8870: PPUSH
8871: LD_INT 92
8873: PPUSH
8874: LD_INT 2
8876: PPUSH
8877: LD_INT 0
8879: PPUSH
8880: CALL 64263 0 5
// ComHold ( un ) ;
8884: LD_VAR 0 5
8888: PPUSH
8889: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
8893: LD_INT 0
8895: PPUSH
8896: LD_INT 3
8898: PPUSH
8899: LD_INT 4
8901: PPUSH
8902: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8906: CALL_OW 44
8910: PPUSH
8911: LD_VAR 0 5
8915: PPUSH
8916: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
8920: LD_INT 24
8922: PPUSH
8923: LD_INT 1
8925: PPUSH
8926: LD_INT 1
8928: PPUSH
8929: LD_INT 45
8931: PPUSH
8932: LD_INT 10
8934: PPUSH
8935: CALL 30314 0 5
// un := CreateVehicle ;
8939: LD_ADDR_VAR 0 5
8943: PUSH
8944: CALL_OW 45
8948: ST_TO_ADDR
// PlaceUnitXYD ( un , 200 , 173 , 1 , false ) ;
8949: LD_VAR 0 5
8953: PPUSH
8954: LD_INT 200
8956: PPUSH
8957: LD_INT 173
8959: PPUSH
8960: LD_INT 1
8962: PPUSH
8963: LD_INT 0
8965: PPUSH
8966: CALL 64263 0 5
// ComHold ( un ) ;
8970: LD_VAR 0 5
8974: PPUSH
8975: CALL_OW 140
// end ; PrepareHuman ( false , 3 , 4 ) ;
8979: LD_INT 0
8981: PPUSH
8982: LD_INT 3
8984: PPUSH
8985: LD_INT 4
8987: PPUSH
8988: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8992: CALL_OW 44
8996: PPUSH
8997: LD_VAR 0 5
9001: PPUSH
9002: CALL_OW 52
// bc_type := b_armoury ;
9006: LD_ADDR_OWVAR 42
9010: PUSH
9011: LD_INT 4
9013: ST_TO_ADDR
// if Difficulty > 1 then
9014: LD_OWVAR 67
9018: PUSH
9019: LD_INT 1
9021: GREATER
9022: IFFALSE 9032
// bc_type := b_barracks ;
9024: LD_ADDR_OWVAR 42
9028: PUSH
9029: LD_INT 5
9031: ST_TO_ADDR
// bc_level := 6 ;
9032: LD_ADDR_OWVAR 43
9036: PUSH
9037: LD_INT 6
9039: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
9040: LD_INT 120
9042: PPUSH
9043: LD_INT 100
9045: PPUSH
9046: LD_INT 5
9048: PPUSH
9049: CALL_OW 47
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
9053: LD_ADDR_VAR 0 2
9057: PUSH
9058: DOUBLE
9059: LD_INT 1
9061: DEC
9062: ST_TO_ADDR
9063: LD_INT 3
9065: PUSH
9066: LD_INT 3
9068: PUSH
9069: LD_INT 4
9071: PUSH
9072: LD_INT 4
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: PUSH
9081: LD_OWVAR 67
9085: ARRAY
9086: PUSH
9087: FOR_TO
9088: IFFALSE 9146
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_bazooker , class_bazooker ] [ Difficulty ] , 5 ) ;
9090: LD_INT 0
9092: PPUSH
9093: LD_INT 1
9095: PUSH
9096: LD_INT 1
9098: PUSH
9099: LD_INT 9
9101: PUSH
9102: LD_INT 9
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: PUSH
9111: LD_OWVAR 67
9115: ARRAY
9116: PPUSH
9117: LD_INT 5
9119: PPUSH
9120: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
9124: CALL_OW 44
9128: PPUSH
9129: LD_INT 120
9131: PPUSH
9132: LD_INT 100
9134: PPUSH
9135: CALL_OW 428
9139: PPUSH
9140: CALL_OW 52
// end ;
9144: GO 9087
9146: POP
9147: POP
// tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
9148: LD_ADDR_VAR 0 7
9152: PUSH
9153: LD_INT 135
9155: PUSH
9156: LD_INT 100
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PUSH
9163: LD_INT 137
9165: PUSH
9166: LD_INT 92
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: PUSH
9173: EMPTY
9174: LIST
9175: LIST
9176: ST_TO_ADDR
// for i := 1 to tmp do
9177: LD_ADDR_VAR 0 2
9181: PUSH
9182: DOUBLE
9183: LD_INT 1
9185: DEC
9186: ST_TO_ADDR
9187: LD_VAR 0 7
9191: PUSH
9192: FOR_TO
9193: IFFALSE 9363
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
9195: LD_INT 22
9197: PUSH
9198: LD_INT 22
9200: PUSH
9201: LD_INT 24
9203: PUSH
9204: LD_INT 24
9206: PUSH
9207: LD_INT 24
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: PUSH
9217: LD_OWVAR 67
9221: PUSH
9222: LD_INT 0
9224: PPUSH
9225: LD_INT 1
9227: PPUSH
9228: CALL_OW 12
9232: PLUS
9233: ARRAY
9234: PPUSH
9235: LD_INT 1
9237: PPUSH
9238: LD_INT 1
9240: PPUSH
9241: LD_INT 44
9243: PPUSH
9244: LD_INT 25
9246: PPUSH
9247: CALL 30314 0 5
// veh := CreateVehicle ;
9251: LD_ADDR_VAR 0 6
9255: PUSH
9256: CALL_OW 45
9260: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
9261: LD_VAR 0 6
9265: PPUSH
9266: LD_INT 2
9268: PPUSH
9269: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
9273: LD_VAR 0 6
9277: PPUSH
9278: LD_VAR 0 7
9282: PUSH
9283: LD_VAR 0 2
9287: ARRAY
9288: PUSH
9289: LD_INT 1
9291: ARRAY
9292: PPUSH
9293: LD_VAR 0 7
9297: PUSH
9298: LD_VAR 0 2
9302: ARRAY
9303: PUSH
9304: LD_INT 2
9306: ARRAY
9307: PPUSH
9308: LD_INT 0
9310: PPUSH
9311: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
9315: LD_INT 0
9317: PPUSH
9318: LD_INT 3
9320: PPUSH
9321: LD_INT 6
9323: PPUSH
9324: CALL_OW 380
// un := CreateHuman ;
9328: LD_ADDR_VAR 0 5
9332: PUSH
9333: CALL_OW 44
9337: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9338: LD_VAR 0 5
9342: PPUSH
9343: LD_VAR 0 6
9347: PPUSH
9348: CALL_OW 52
// ComHold ( veh ) ;
9352: LD_VAR 0 6
9356: PPUSH
9357: CALL_OW 140
// end ;
9361: GO 9192
9363: POP
9364: POP
// tmp := [ 191 , 122 ] ;
9365: LD_ADDR_VAR 0 7
9369: PUSH
9370: LD_INT 191
9372: PUSH
9373: LD_INT 122
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
9380: LD_INT 24
9382: PPUSH
9383: LD_INT 1
9385: PPUSH
9386: LD_INT 1
9388: PPUSH
9389: LD_INT 44
9391: PPUSH
9392: LD_INT 30
9394: PPUSH
9395: CALL 30314 0 5
// ruBlockadeTank := CreateVehicle ;
9399: LD_ADDR_EXP 51
9403: PUSH
9404: CALL_OW 45
9408: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
9409: LD_EXP 51
9413: PPUSH
9414: LD_INT 2
9416: PPUSH
9417: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
9421: LD_EXP 51
9425: PPUSH
9426: LD_INT 191
9428: PPUSH
9429: LD_INT 122
9431: PPUSH
9432: LD_INT 0
9434: PPUSH
9435: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 , 7 ] [ Difficulty - 1 ] ) ;
9439: LD_INT 1
9441: PPUSH
9442: LD_INT 5
9444: PUSH
9445: LD_INT 6
9447: PUSH
9448: LD_INT 7
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: LIST
9455: PUSH
9456: LD_OWVAR 67
9460: PUSH
9461: LD_INT 1
9463: MINUS
9464: ARRAY
9465: PPUSH
9466: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
9470: CALL_OW 44
9474: PPUSH
9475: LD_EXP 51
9479: PPUSH
9480: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
9484: LD_EXP 51
9488: PPUSH
9489: CALL_OW 140
// ruBlockadeSquad := [ ] ;
9493: LD_ADDR_EXP 53
9497: PUSH
9498: EMPTY
9499: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 6 , 6 ] [ Difficulty ] do
9500: LD_ADDR_VAR 0 2
9504: PUSH
9505: DOUBLE
9506: LD_INT 1
9508: DEC
9509: ST_TO_ADDR
9510: LD_INT 3
9512: PUSH
9513: LD_INT 4
9515: PUSH
9516: LD_INT 6
9518: PUSH
9519: LD_INT 6
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: PUSH
9528: LD_OWVAR 67
9532: ARRAY
9533: PUSH
9534: FOR_TO
9535: IFFALSE 9651
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
9537: LD_INT 0
9539: PPUSH
9540: LD_INT 1
9542: PPUSH
9543: LD_INT 4
9545: PUSH
9546: LD_INT 5
9548: PUSH
9549: LD_INT 6
9551: PUSH
9552: LD_INT 7
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: PUSH
9561: LD_OWVAR 67
9565: ARRAY
9566: PPUSH
9567: CALL_OW 380
// un := CreateHuman ;
9571: LD_ADDR_VAR 0 5
9575: PUSH
9576: CALL_OW 44
9580: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
9581: LD_VAR 0 5
9585: PPUSH
9586: LD_INT 9
9588: PPUSH
9589: LD_INT 0
9591: PPUSH
9592: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
9596: LD_VAR 0 5
9600: PPUSH
9601: LD_INT 198
9603: PPUSH
9604: LD_INT 129
9606: PPUSH
9607: CALL_OW 118
// AddComCrawl ( un ) ;
9611: LD_VAR 0 5
9615: PPUSH
9616: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
9620: LD_ADDR_EXP 53
9624: PUSH
9625: LD_EXP 53
9629: PPUSH
9630: LD_EXP 53
9634: PUSH
9635: LD_INT 1
9637: PLUS
9638: PPUSH
9639: LD_VAR 0 5
9643: PPUSH
9644: CALL_OW 1
9648: ST_TO_ADDR
// end ;
9649: GO 9534
9651: POP
9652: POP
// PrepareHuman ( false , 4 , 5 ) ;
9653: LD_INT 0
9655: PPUSH
9656: LD_INT 4
9658: PPUSH
9659: LD_INT 5
9661: PPUSH
9662: CALL_OW 380
// un := CreateHuman ;
9666: LD_ADDR_VAR 0 5
9670: PUSH
9671: CALL_OW 44
9675: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
9676: LD_VAR 0 5
9680: PPUSH
9681: LD_INT 179
9683: PPUSH
9684: LD_INT 113
9686: PPUSH
9687: LD_INT 0
9689: PPUSH
9690: CALL_OW 48
// ComHold ( un ) ;
9694: LD_VAR 0 5
9698: PPUSH
9699: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
9703: LD_ADDR_EXP 53
9707: PUSH
9708: LD_EXP 53
9712: PPUSH
9713: LD_EXP 53
9717: PUSH
9718: LD_INT 1
9720: PLUS
9721: PPUSH
9722: LD_VAR 0 5
9726: PPUSH
9727: CALL_OW 1
9731: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
9732: LD_ADDR_VAR 0 7
9736: PUSH
9737: LD_INT 167
9739: PPUSH
9740: LD_INT 243
9742: PPUSH
9743: CALL_OW 428
9747: PPUSH
9748: CALL_OW 274
9752: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
9753: LD_VAR 0 7
9757: PPUSH
9758: LD_INT 1
9760: PPUSH
9761: LD_INT 1000
9763: PPUSH
9764: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
9768: LD_VAR 0 7
9772: PPUSH
9773: LD_INT 2
9775: PPUSH
9776: LD_INT 400
9778: PPUSH
9779: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
9783: LD_ADDR_VAR 0 7
9787: PUSH
9788: LD_INT 169
9790: PPUSH
9791: LD_INT 229
9793: PPUSH
9794: CALL_OW 428
9798: ST_TO_ADDR
// for i := 1 to 3 do
9799: LD_ADDR_VAR 0 2
9803: PUSH
9804: DOUBLE
9805: LD_INT 1
9807: DEC
9808: ST_TO_ADDR
9809: LD_INT 3
9811: PUSH
9812: FOR_TO
9813: IFFALSE 9904
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9815: LD_INT 0
9817: PPUSH
9818: LD_INT 1
9820: PPUSH
9821: LD_INT 4
9823: PUSH
9824: LD_INT 5
9826: PUSH
9827: LD_INT 5
9829: PUSH
9830: LD_INT 6
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: PUSH
9839: LD_OWVAR 67
9843: ARRAY
9844: PPUSH
9845: CALL_OW 380
// un := CreateHuman ;
9849: LD_ADDR_VAR 0 5
9853: PUSH
9854: CALL_OW 44
9858: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
9859: LD_VAR 0 5
9863: PPUSH
9864: LD_VAR 0 7
9868: PPUSH
9869: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
9873: LD_ADDR_EXP 54
9877: PUSH
9878: LD_EXP 54
9882: PPUSH
9883: LD_EXP 54
9887: PUSH
9888: LD_INT 1
9890: PLUS
9891: PPUSH
9892: LD_VAR 0 5
9896: PPUSH
9897: CALL_OW 1
9901: ST_TO_ADDR
// end ;
9902: GO 9812
9904: POP
9905: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
9906: LD_ADDR_VAR 0 7
9910: PUSH
9911: LD_INT 165
9913: PUSH
9914: LD_INT 227
9916: PUSH
9917: EMPTY
9918: LIST
9919: LIST
9920: PUSH
9921: LD_INT 173
9923: PUSH
9924: LD_INT 231
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: ST_TO_ADDR
// for i := 1 to tmp do
9935: LD_ADDR_VAR 0 2
9939: PUSH
9940: DOUBLE
9941: LD_INT 1
9943: DEC
9944: ST_TO_ADDR
9945: LD_VAR 0 7
9949: PUSH
9950: FOR_TO
9951: IFFALSE 10072
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9953: LD_INT 0
9955: PPUSH
9956: LD_INT 1
9958: PPUSH
9959: LD_INT 4
9961: PUSH
9962: LD_INT 5
9964: PUSH
9965: LD_INT 5
9967: PUSH
9968: LD_INT 6
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: PUSH
9977: LD_OWVAR 67
9981: ARRAY
9982: PPUSH
9983: CALL_OW 380
// un := CreateHuman ;
9987: LD_ADDR_VAR 0 5
9991: PUSH
9992: CALL_OW 44
9996: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
9997: LD_VAR 0 5
10001: PPUSH
10002: LD_VAR 0 7
10006: PUSH
10007: LD_VAR 0 2
10011: ARRAY
10012: PUSH
10013: LD_INT 1
10015: ARRAY
10016: PPUSH
10017: LD_VAR 0 7
10021: PUSH
10022: LD_VAR 0 2
10026: ARRAY
10027: PUSH
10028: LD_INT 2
10030: ARRAY
10031: PPUSH
10032: CALL_OW 428
10036: PPUSH
10037: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
10041: LD_ADDR_EXP 54
10045: PUSH
10046: LD_EXP 54
10050: PPUSH
10051: LD_EXP 54
10055: PUSH
10056: LD_INT 1
10058: PLUS
10059: PPUSH
10060: LD_VAR 0 5
10064: PPUSH
10065: CALL_OW 1
10069: ST_TO_ADDR
// end ;
10070: GO 9950
10072: POP
10073: POP
// for i := 1 to 2 do
10074: LD_ADDR_VAR 0 2
10078: PUSH
10079: DOUBLE
10080: LD_INT 1
10082: DEC
10083: ST_TO_ADDR
10084: LD_INT 2
10086: PUSH
10087: FOR_TO
10088: IFFALSE 10143
// begin InitHc ;
10090: CALL_OW 19
// uc_nation := 0 ;
10094: LD_ADDR_OWVAR 21
10098: PUSH
10099: LD_INT 0
10101: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
10102: LD_ADDR_OWVAR 28
10106: PUSH
10107: LD_INT 16
10109: ST_TO_ADDR
// un := CreateHuman ;
10110: LD_ADDR_VAR 0 5
10114: PUSH
10115: CALL_OW 44
10119: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
10120: LD_VAR 0 5
10124: PPUSH
10125: LD_INT 166
10127: PPUSH
10128: LD_INT 233
10130: PPUSH
10131: LD_INT 2
10133: PPUSH
10134: LD_INT 0
10136: PPUSH
10137: CALL_OW 50
// end ;
10141: GO 10087
10143: POP
10144: POP
// uc_nation := 3 ;
10145: LD_ADDR_OWVAR 21
10149: PUSH
10150: LD_INT 3
10152: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
10153: LD_ADDR_VAR 0 7
10157: PUSH
10158: LD_INT 71
10160: PUSH
10161: LD_INT 52
10163: PUSH
10164: LD_INT 11
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: LIST
10171: ST_TO_ADDR
// for i in tmp do
10172: LD_ADDR_VAR 0 2
10176: PUSH
10177: LD_VAR 0 7
10181: PUSH
10182: FOR_IN
10183: IFFALSE 10227
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
10185: LD_VAR 0 2
10189: PPUSH
10190: CALL_OW 274
10194: PPUSH
10195: LD_INT 1
10197: PPUSH
10198: LD_INT 3000
10200: PPUSH
10201: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
10205: LD_VAR 0 2
10209: PPUSH
10210: CALL_OW 274
10214: PPUSH
10215: LD_INT 2
10217: PPUSH
10218: LD_INT 600
10220: PPUSH
10221: CALL_OW 277
// end ;
10225: GO 10182
10227: POP
10228: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
10229: LD_ADDR_VAR 0 7
10233: PUSH
10234: LD_INT 41
10236: PUSH
10237: LD_INT 57
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: LD_INT 38
10246: PUSH
10247: LD_INT 55
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: LD_INT 50
10256: PUSH
10257: LD_INT 73
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: LD_INT 51
10266: PUSH
10267: LD_INT 65
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: PUSH
10274: LD_INT 82
10276: PUSH
10277: LD_INT 93
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PUSH
10284: LD_INT 87
10286: PUSH
10287: LD_INT 100
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: LD_INT 91
10296: PUSH
10297: LD_INT 109
10299: PUSH
10300: EMPTY
10301: LIST
10302: LIST
10303: PUSH
10304: LD_INT 84
10306: PUSH
10307: LD_INT 120
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: PUSH
10314: LD_INT 113
10316: PUSH
10317: LD_INT 153
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: PUSH
10324: LD_INT 123
10326: PUSH
10327: LD_INT 171
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: PUSH
10334: LD_INT 125
10336: PUSH
10337: LD_INT 178
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: PUSH
10344: LD_INT 125
10346: PUSH
10347: LD_INT 188
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PUSH
10354: LD_INT 125
10356: PUSH
10357: LD_INT 201
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: PUSH
10364: LD_INT 33
10366: PUSH
10367: LD_INT 60
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PUSH
10374: LD_INT 76
10376: PUSH
10377: LD_INT 95
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: LD_INT 84
10386: PUSH
10387: LD_INT 111
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: PUSH
10394: LD_INT 112
10396: PUSH
10397: LD_INT 165
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: ST_TO_ADDR
// for i := 1 to tmp do
10423: LD_ADDR_VAR 0 2
10427: PUSH
10428: DOUBLE
10429: LD_INT 1
10431: DEC
10432: ST_TO_ADDR
10433: LD_VAR 0 7
10437: PUSH
10438: FOR_TO
10439: IFFALSE 10686
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
10441: LD_ADDR_VAR 0 4
10445: PUSH
10446: LD_VAR 0 7
10450: PUSH
10451: LD_VAR 0 2
10455: ARRAY
10456: PUSH
10457: LD_INT 1
10459: ARRAY
10460: PPUSH
10461: LD_VAR 0 7
10465: PUSH
10466: LD_VAR 0 2
10470: ARRAY
10471: PUSH
10472: LD_INT 2
10474: ARRAY
10475: PPUSH
10476: CALL_OW 428
10480: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
10481: LD_VAR 0 4
10485: PPUSH
10486: CALL_OW 266
10490: PUSH
10491: LD_INT 4
10493: PUSH
10494: LD_INT 5
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: IN
10501: IFFALSE 10585
// begin for j := 1 to Difficulty do
10503: LD_ADDR_VAR 0 3
10507: PUSH
10508: DOUBLE
10509: LD_INT 1
10511: DEC
10512: ST_TO_ADDR
10513: LD_OWVAR 67
10517: PUSH
10518: FOR_TO
10519: IFFALSE 10581
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10521: LD_INT 0
10523: PPUSH
10524: LD_INT 1
10526: PPUSH
10527: LD_INT 4
10529: PUSH
10530: LD_INT 5
10532: PUSH
10533: LD_INT 5
10535: PUSH
10536: LD_INT 6
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: PUSH
10545: LD_OWVAR 67
10549: ARRAY
10550: PPUSH
10551: CALL_OW 380
// un := CreateHuman ;
10555: LD_ADDR_VAR 0 5
10559: PUSH
10560: CALL_OW 44
10564: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10565: LD_VAR 0 5
10569: PPUSH
10570: LD_VAR 0 4
10574: PPUSH
10575: CALL_OW 52
// end ;
10579: GO 10518
10581: POP
10582: POP
// end else
10583: GO 10655
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10585: LD_INT 0
10587: PPUSH
10588: LD_INT 1
10590: PPUSH
10591: LD_INT 4
10593: PUSH
10594: LD_INT 5
10596: PUSH
10597: LD_INT 5
10599: PUSH
10600: LD_INT 6
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: PUSH
10609: LD_OWVAR 67
10613: ARRAY
10614: PPUSH
10615: CALL_OW 380
// un := CreateHuman ;
10619: LD_ADDR_VAR 0 5
10623: PUSH
10624: CALL_OW 44
10628: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10629: LD_VAR 0 5
10633: PPUSH
10634: LD_VAR 0 4
10638: PPUSH
10639: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
10643: LD_VAR 0 5
10647: PPUSH
10648: LD_INT 9
10650: PPUSH
10651: CALL_OW 336
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10655: LD_ADDR_EXP 55
10659: PUSH
10660: LD_EXP 55
10664: PPUSH
10665: LD_EXP 55
10669: PUSH
10670: LD_INT 1
10672: PLUS
10673: PPUSH
10674: LD_VAR 0 5
10678: PPUSH
10679: CALL_OW 1
10683: ST_TO_ADDR
// end ;
10684: GO 10438
10686: POP
10687: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
10688: LD_ADDR_VAR 0 4
10692: PUSH
10693: LD_INT 10
10695: PPUSH
10696: LD_INT 22
10698: PUSH
10699: LD_INT 3
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PUSH
10706: LD_INT 30
10708: PUSH
10709: LD_INT 32
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: PUSH
10716: LD_INT 58
10718: PUSH
10719: EMPTY
10720: LIST
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: LIST
10726: PPUSH
10727: CALL_OW 70
10731: PUSH
10732: FOR_IN
10733: IFFALSE 10867
// begin if not Prob ( [ 40 , 50 , 75 , 80 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
10735: LD_INT 40
10737: PUSH
10738: LD_INT 50
10740: PUSH
10741: LD_INT 75
10743: PUSH
10744: LD_INT 80
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: PUSH
10753: LD_OWVAR 67
10757: ARRAY
10758: PUSH
10759: LD_EXP 7
10763: PUSH
10764: LD_INT 10
10766: MUL
10767: MINUS
10768: PPUSH
10769: CALL_OW 13
10773: NOT
10774: IFFALSE 10778
// continue ;
10776: GO 10732
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10778: LD_INT 0
10780: PPUSH
10781: LD_INT 1
10783: PPUSH
10784: LD_INT 4
10786: PUSH
10787: LD_INT 5
10789: PUSH
10790: LD_INT 5
10792: PUSH
10793: LD_INT 6
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: PUSH
10802: LD_OWVAR 67
10806: ARRAY
10807: PPUSH
10808: CALL_OW 380
// un := CreateHuman ;
10812: LD_ADDR_VAR 0 5
10816: PUSH
10817: CALL_OW 44
10821: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10822: LD_VAR 0 5
10826: PPUSH
10827: LD_VAR 0 4
10831: PPUSH
10832: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10836: LD_ADDR_EXP 55
10840: PUSH
10841: LD_EXP 55
10845: PPUSH
10846: LD_EXP 55
10850: PUSH
10851: LD_INT 1
10853: PLUS
10854: PPUSH
10855: LD_VAR 0 5
10859: PPUSH
10860: CALL_OW 1
10864: ST_TO_ADDR
// end ;
10865: GO 10732
10867: POP
10868: POP
// for i := 1 to 5 do
10869: LD_ADDR_VAR 0 2
10873: PUSH
10874: DOUBLE
10875: LD_INT 1
10877: DEC
10878: ST_TO_ADDR
10879: LD_INT 5
10881: PUSH
10882: FOR_TO
10883: IFFALSE 10981
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10885: LD_INT 0
10887: PPUSH
10888: LD_INT 2
10890: PPUSH
10891: LD_INT 4
10893: PUSH
10894: LD_INT 5
10896: PUSH
10897: LD_INT 5
10899: PUSH
10900: LD_INT 6
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: PUSH
10909: LD_OWVAR 67
10913: ARRAY
10914: PPUSH
10915: CALL_OW 380
// un := CreateHuman ;
10919: LD_ADDR_VAR 0 5
10923: PUSH
10924: CALL_OW 44
10928: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
10929: LD_VAR 0 5
10933: PPUSH
10934: LD_INT 66
10936: PPUSH
10937: LD_INT 101
10939: PPUSH
10940: LD_INT 3
10942: PPUSH
10943: LD_INT 0
10945: PPUSH
10946: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10950: LD_ADDR_EXP 55
10954: PUSH
10955: LD_EXP 55
10959: PPUSH
10960: LD_EXP 55
10964: PUSH
10965: LD_INT 1
10967: PLUS
10968: PPUSH
10969: LD_VAR 0 5
10973: PPUSH
10974: CALL_OW 1
10978: ST_TO_ADDR
// end ;
10979: GO 10882
10981: POP
10982: POP
// tmp := [ ruFac1 , ruFac2 ] ;
10983: LD_ADDR_VAR 0 7
10987: PUSH
10988: LD_INT 72
10990: PUSH
10991: LD_INT 12
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: ST_TO_ADDR
// for i := 1 to tmp do
10998: LD_ADDR_VAR 0 2
11002: PUSH
11003: DOUBLE
11004: LD_INT 1
11006: DEC
11007: ST_TO_ADDR
11008: LD_VAR 0 7
11012: PUSH
11013: FOR_TO
11014: IFFALSE 11131
// for j := 1 to 6 do
11016: LD_ADDR_VAR 0 3
11020: PUSH
11021: DOUBLE
11022: LD_INT 1
11024: DEC
11025: ST_TO_ADDR
11026: LD_INT 6
11028: PUSH
11029: FOR_TO
11030: IFFALSE 11127
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
11032: LD_INT 0
11034: PPUSH
11035: LD_INT 3
11037: PPUSH
11038: LD_INT 4
11040: PUSH
11041: LD_INT 5
11043: PUSH
11044: LD_INT 5
11046: PUSH
11047: LD_INT 6
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: PUSH
11056: LD_OWVAR 67
11060: ARRAY
11061: PPUSH
11062: CALL_OW 380
// un := CreateHuman ;
11066: LD_ADDR_VAR 0 5
11070: PUSH
11071: CALL_OW 44
11075: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
11076: LD_VAR 0 5
11080: PPUSH
11081: LD_VAR 0 7
11085: PUSH
11086: LD_VAR 0 2
11090: ARRAY
11091: PPUSH
11092: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
11096: LD_ADDR_EXP 55
11100: PUSH
11101: LD_EXP 55
11105: PPUSH
11106: LD_EXP 55
11110: PUSH
11111: LD_INT 1
11113: PLUS
11114: PPUSH
11115: LD_VAR 0 5
11119: PPUSH
11120: CALL_OW 1
11124: ST_TO_ADDR
// end ;
11125: GO 11029
11127: POP
11128: POP
11129: GO 11013
11131: POP
11132: POP
// for i := 1 to 3 do
11133: LD_ADDR_VAR 0 2
11137: PUSH
11138: DOUBLE
11139: LD_INT 1
11141: DEC
11142: ST_TO_ADDR
11143: LD_INT 3
11145: PUSH
11146: FOR_TO
11147: IFFALSE 11236
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
11149: LD_INT 0
11151: PPUSH
11152: LD_INT 4
11154: PPUSH
11155: LD_INT 4
11157: PUSH
11158: LD_INT 5
11160: PUSH
11161: LD_INT 5
11163: PUSH
11164: LD_INT 6
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: PUSH
11173: LD_OWVAR 67
11177: ARRAY
11178: PPUSH
11179: CALL_OW 380
// un := CreateHuman ;
11183: LD_ADDR_VAR 0 5
11187: PUSH
11188: CALL_OW 44
11192: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
11193: LD_VAR 0 5
11197: PPUSH
11198: LD_INT 17
11200: PPUSH
11201: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
11205: LD_ADDR_EXP 55
11209: PUSH
11210: LD_EXP 55
11214: PPUSH
11215: LD_EXP 55
11219: PUSH
11220: LD_INT 1
11222: PLUS
11223: PPUSH
11224: LD_VAR 0 5
11228: PPUSH
11229: CALL_OW 1
11233: ST_TO_ADDR
// end ;
11234: GO 11146
11236: POP
11237: POP
// for i := 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
11238: LD_ADDR_VAR 0 2
11242: PUSH
11243: DOUBLE
11244: LD_INT 1
11246: DEC
11247: ST_TO_ADDR
11248: LD_INT 2
11250: PUSH
11251: LD_INT 3
11253: PUSH
11254: LD_INT 3
11256: PUSH
11257: LD_INT 3
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: PUSH
11266: LD_OWVAR 67
11270: ARRAY
11271: PUSH
11272: FOR_TO
11273: IFFALSE 11393
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
11275: LD_INT 22
11277: PPUSH
11278: LD_INT 1
11280: PPUSH
11281: LD_INT 1
11283: PPUSH
11284: LD_INT 52
11286: PPUSH
11287: LD_INT 100
11289: PPUSH
11290: CALL 30314 0 5
// veh := CreateVehicle ;
11294: LD_ADDR_VAR 0 6
11298: PUSH
11299: CALL_OW 45
11303: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
11304: LD_INT 0
11306: PPUSH
11307: LD_INT 3
11309: PPUSH
11310: LD_INT 4
11312: PPUSH
11313: CALL_OW 380
// un := CreateHuman ;
11317: LD_ADDR_VAR 0 5
11321: PUSH
11322: CALL_OW 44
11326: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
11327: LD_VAR 0 6
11331: PPUSH
11332: LD_INT 107
11334: PPUSH
11335: LD_INT 182
11337: PPUSH
11338: LD_INT 4
11340: PPUSH
11341: LD_INT 0
11343: PPUSH
11344: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
11348: LD_VAR 0 5
11352: PPUSH
11353: LD_VAR 0 6
11357: PPUSH
11358: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
11362: LD_ADDR_EXP 55
11366: PUSH
11367: LD_EXP 55
11371: PPUSH
11372: LD_EXP 55
11376: PUSH
11377: LD_INT 1
11379: PLUS
11380: PPUSH
11381: LD_VAR 0 5
11385: PPUSH
11386: CALL_OW 1
11390: ST_TO_ADDR
// end ;
11391: GO 11272
11393: POP
11394: POP
// InitHc ;
11395: CALL_OW 19
// for i := 1 to [ 6 , 8 , 10 , 12 ] [ Difficulty ] do
11399: LD_ADDR_VAR 0 2
11403: PUSH
11404: DOUBLE
11405: LD_INT 1
11407: DEC
11408: ST_TO_ADDR
11409: LD_INT 6
11411: PUSH
11412: LD_INT 8
11414: PUSH
11415: LD_INT 10
11417: PUSH
11418: LD_INT 12
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: PUSH
11427: LD_OWVAR 67
11431: ARRAY
11432: PUSH
11433: FOR_TO
11434: IFFALSE 11506
// begin uc_nation := 0 ;
11436: LD_ADDR_OWVAR 21
11440: PUSH
11441: LD_INT 0
11443: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
11444: LD_ADDR_OWVAR 28
11448: PUSH
11449: LD_INT 15
11451: ST_TO_ADDR
// un := CreateHuman ;
11452: LD_ADDR_VAR 0 5
11456: PUSH
11457: CALL_OW 44
11461: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
11462: LD_VAR 0 5
11466: PPUSH
11467: LD_INT 269
11469: PUSH
11470: LD_INT 300
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: PUSH
11477: LD_VAR 0 2
11481: PUSH
11482: LD_INT 2
11484: MOD
11485: PUSH
11486: LD_INT 1
11488: PLUS
11489: ARRAY
11490: PPUSH
11491: LD_INT 182
11493: PPUSH
11494: LD_INT 4
11496: PPUSH
11497: LD_INT 0
11499: PPUSH
11500: CALL_OW 50
// end ;
11504: GO 11433
11506: POP
11507: POP
// uc_nation := 3 ;
11508: LD_ADDR_OWVAR 21
11512: PUSH
11513: LD_INT 3
11515: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
11516: LD_EXP 8
11520: PUSH
11521: LD_INT 10
11523: PUSH
11524: LD_INT 8
11526: PUSH
11527: LD_INT 6
11529: PUSH
11530: LD_INT 5
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: PUSH
11539: LD_OWVAR 67
11543: ARRAY
11544: LESS
11545: IFFALSE 11624
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
11547: LD_INT 21
11549: PPUSH
11550: LD_INT 1
11552: PPUSH
11553: LD_INT 1
11555: PPUSH
11556: LD_INT 51
11558: PPUSH
11559: LD_INT 12
11561: PPUSH
11562: CALL 30314 0 5
// veh := CreateVehicle ;
11566: LD_ADDR_VAR 0 6
11570: PUSH
11571: CALL_OW 45
11575: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
11576: LD_VAR 0 6
11580: PPUSH
11581: LD_INT 269
11583: PPUSH
11584: LD_INT 66
11586: PPUSH
11587: LD_INT 4
11589: PPUSH
11590: LD_INT 0
11592: PPUSH
11593: CALL 64263 0 5
// SetLives ( veh , 333 ) ;
11597: LD_VAR 0 6
11601: PPUSH
11602: LD_INT 333
11604: PPUSH
11605: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
11609: LD_VAR 0 6
11613: PPUSH
11614: LD_INT 2
11616: PPUSH
11617: LD_INT 100
11619: PPUSH
11620: CALL_OW 290
// end ; end ;
11624: LD_VAR 0 1
11628: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
11629: LD_EXP 51
11633: PUSH
11634: LD_EXP 51
11638: PPUSH
11639: CALL_OW 255
11643: PUSH
11644: LD_INT 3
11646: EQUAL
11647: AND
11648: IFFALSE 11811
11650: GO 11652
11652: DISABLE
11653: LD_INT 0
11655: PPUSH
// begin enable ;
11656: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
11657: LD_INT 81
11659: PUSH
11660: LD_INT 3
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PUSH
11667: LD_INT 91
11669: PUSH
11670: LD_EXP 51
11674: PUSH
11675: LD_INT 15
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: LIST
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PPUSH
11687: CALL_OW 69
11691: IFFALSE 11771
// begin if not IsDrivenBy ( ruBlockadeTank ) then
11693: LD_EXP 51
11697: PPUSH
11698: CALL_OW 311
11702: NOT
11703: IFFALSE 11769
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
11705: LD_ADDR_VAR 0 1
11709: PUSH
11710: LD_INT 22
11712: PUSH
11713: LD_INT 3
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: LD_INT 21
11722: PUSH
11723: LD_INT 1
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: PPUSH
11734: CALL_OW 69
11738: PPUSH
11739: LD_EXP 51
11743: PPUSH
11744: CALL_OW 74
11748: ST_TO_ADDR
// if driver then
11749: LD_VAR 0 1
11753: IFFALSE 11769
// ComEnterUnit ( driver , ruBlockadeTank ) ;
11755: LD_VAR 0 1
11759: PPUSH
11760: LD_EXP 51
11764: PPUSH
11765: CALL_OW 120
// end ; exit ;
11769: GO 11811
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
11771: LD_EXP 51
11775: PPUSH
11776: CALL_OW 256
11780: PUSH
11781: LD_INT 1000
11783: LESS
11784: PUSH
11785: LD_EXP 51
11789: PPUSH
11790: CALL_OW 311
11794: AND
11795: IFFALSE 11811
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
11797: LD_EXP 51
11801: PPUSH
11802: CALL_OW 311
11806: PPUSH
11807: CALL 63823 0 1
// end ;
11811: PPOPN 1
11813: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
11814: LD_EXP 53
11818: PPUSH
11819: LD_INT 3
11821: PUSH
11822: LD_INT 24
11824: PUSH
11825: LD_INT 1000
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PPUSH
11836: CALL_OW 72
11840: PUSH
11841: LD_EXP 53
11845: PPUSH
11846: LD_INT 25
11848: PUSH
11849: LD_INT 4
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: LD_INT 50
11858: PUSH
11859: EMPTY
11860: LIST
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PPUSH
11866: CALL_OW 72
11870: AND
11871: IFFALSE 12059
11873: GO 11875
11875: DISABLE
11876: LD_INT 0
11878: PPUSH
11879: PPUSH
11880: PPUSH
// begin enable ;
11881: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
11882: LD_ADDR_VAR 0 3
11886: PUSH
11887: LD_EXP 53
11891: PPUSH
11892: LD_INT 3
11894: PUSH
11895: LD_INT 24
11897: PUSH
11898: LD_INT 1000
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PPUSH
11909: CALL_OW 72
11913: PPUSH
11914: LD_INT 1
11916: PPUSH
11917: CALL 64063 0 2
11921: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
11922: LD_ADDR_VAR 0 2
11926: PUSH
11927: LD_EXP 53
11931: PPUSH
11932: LD_INT 25
11934: PUSH
11935: LD_INT 4
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: PUSH
11942: LD_INT 50
11944: PUSH
11945: EMPTY
11946: LIST
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PPUSH
11952: CALL_OW 72
11956: PUSH
11957: LD_INT 1
11959: ARRAY
11960: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
11961: LD_VAR 0 2
11965: PPUSH
11966: LD_VAR 0 3
11970: PUSH
11971: LD_INT 1
11973: ARRAY
11974: PPUSH
11975: CALL 59417 0 2
11979: NOT
11980: IFFALSE 12059
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
11982: LD_VAR 0 3
11986: PUSH
11987: LD_INT 1
11989: ARRAY
11990: PPUSH
11991: LD_INT 9
11993: PPUSH
11994: CALL_OW 308
11998: NOT
11999: IFFALSE 12017
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
12001: LD_VAR 0 3
12005: PUSH
12006: LD_INT 1
12008: ARRAY
12009: PPUSH
12010: LD_INT 9
12012: PPUSH
12013: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
12017: LD_VAR 0 2
12021: PPUSH
12022: LD_VAR 0 3
12026: PUSH
12027: LD_INT 1
12029: ARRAY
12030: PPUSH
12031: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
12035: LD_VAR 0 2
12039: PPUSH
12040: LD_INT 179
12042: PPUSH
12043: LD_INT 113
12045: PPUSH
12046: CALL_OW 171
// AddComHold ( sci ) ;
12050: LD_VAR 0 2
12054: PPUSH
12055: CALL_OW 200
// end ; end ;
12059: PPOPN 3
12061: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
12062: LD_INT 2
12064: PPUSH
12065: LD_INT 52
12067: PPUSH
12068: CALL_OW 292
12072: IFFALSE 12177
12074: GO 12076
12076: DISABLE
12077: LD_INT 0
12079: PPUSH
12080: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
12081: LD_ADDR_VAR 0 2
12085: PUSH
12086: LD_EXP 55
12090: PPUSH
12091: LD_INT 25
12093: PUSH
12094: LD_INT 1
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PUSH
12101: LD_INT 50
12103: PUSH
12104: EMPTY
12105: LIST
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PPUSH
12111: CALL_OW 72
12115: ST_TO_ADDR
// if not tmp then
12116: LD_VAR 0 2
12120: NOT
12121: IFFALSE 12125
// exit ;
12123: GO 12177
// for i in tmp do
12125: LD_ADDR_VAR 0 1
12129: PUSH
12130: LD_VAR 0 2
12134: PUSH
12135: FOR_IN
12136: IFFALSE 12175
// begin if IsInUnit ( i ) then
12138: LD_VAR 0 1
12142: PPUSH
12143: CALL_OW 310
12147: IFFALSE 12158
// ComExitBuilding ( i ) ;
12149: LD_VAR 0 1
12153: PPUSH
12154: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
12158: LD_VAR 0 1
12162: PPUSH
12163: LD_INT 84
12165: PPUSH
12166: LD_INT 133
12168: PPUSH
12169: CALL_OW 174
// end ;
12173: GO 12135
12175: POP
12176: POP
// end ;
12177: PPOPN 2
12179: END
// every 0 0$1 trigger leninSpotted do var i , tmp , weapon ;
12180: LD_EXP 14
12184: IFFALSE 12344
12186: GO 12188
12188: DISABLE
12189: LD_INT 0
12191: PPUSH
12192: PPUSH
12193: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
12194: LD_ADDR_VAR 0 2
12198: PUSH
12199: LD_INT 72
12201: PUSH
12202: LD_INT 12
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket_launcher , ru_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] ] [ Difficulty ] ;
12209: LD_ADDR_VAR 0 3
12213: PUSH
12214: LD_INT 44
12216: PUSH
12217: LD_INT 43
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: PUSH
12224: LD_INT 45
12226: PUSH
12227: LD_INT 44
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PUSH
12234: LD_INT 45
12236: PUSH
12237: LD_INT 46
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: LD_INT 45
12246: PUSH
12247: LD_INT 46
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: PUSH
12260: LD_OWVAR 67
12264: ARRAY
12265: ST_TO_ADDR
// for i := 1 to 6 do
12266: LD_ADDR_VAR 0 1
12270: PUSH
12271: DOUBLE
12272: LD_INT 1
12274: DEC
12275: ST_TO_ADDR
12276: LD_INT 6
12278: PUSH
12279: FOR_TO
12280: IFFALSE 12342
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
12282: LD_VAR 0 2
12286: PPUSH
12287: LD_INT 22
12289: PUSH
12290: LD_INT 23
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: PUSH
12297: LD_VAR 0 1
12301: PUSH
12302: LD_INT 2
12304: MOD
12305: PUSH
12306: LD_INT 1
12308: PLUS
12309: ARRAY
12310: PPUSH
12311: LD_INT 1
12313: PPUSH
12314: LD_INT 1
12316: PPUSH
12317: LD_VAR 0 3
12321: PUSH
12322: LD_VAR 0 1
12326: PUSH
12327: LD_INT 2
12329: MOD
12330: PUSH
12331: LD_INT 1
12333: PLUS
12334: ARRAY
12335: PPUSH
12336: CALL_OW 185
12340: GO 12279
12342: POP
12343: POP
// end ;
12344: PPOPN 3
12346: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
12347: LD_EXP 11
12351: IFFALSE 13500
12353: GO 12355
12355: DISABLE
12356: LD_INT 0
12358: PPUSH
12359: PPUSH
12360: PPUSH
12361: PPUSH
12362: PPUSH
12363: PPUSH
// begin enable ;
12364: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
12365: LD_ADDR_VAR 0 6
12369: PUSH
12370: LD_INT 10
12372: PPUSH
12373: LD_INT 81
12375: PUSH
12376: LD_INT 3
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PPUSH
12383: CALL_OW 70
12387: ST_TO_ADDR
// if ruSpecialVehicleGroup then
12388: LD_EXP 56
12392: IFFALSE 12658
// begin for i in ruSpecialVehicleGroup do
12394: LD_ADDR_VAR 0 1
12398: PUSH
12399: LD_EXP 56
12403: PUSH
12404: FOR_IN
12405: IFFALSE 12656
// begin if enemyInBase then
12407: LD_VAR 0 6
12411: IFFALSE 12654
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
12413: LD_VAR 0 1
12417: PPUSH
12418: CALL_OW 256
12422: PUSH
12423: LD_INT 500
12425: GREATER
12426: PUSH
12427: LD_VAR 0 1
12431: PPUSH
12432: CALL_OW 110
12436: PUSH
12437: LD_INT 0
12439: EQUAL
12440: AND
12441: IFFALSE 12467
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
12443: LD_VAR 0 1
12447: PPUSH
12448: LD_VAR 0 6
12452: PPUSH
12453: LD_VAR 0 1
12457: PPUSH
12458: CALL_OW 74
12462: PPUSH
12463: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
12467: LD_VAR 0 1
12471: PPUSH
12472: CALL_OW 256
12476: PUSH
12477: LD_INT 500
12479: LESSEQUAL
12480: PUSH
12481: LD_VAR 0 1
12485: PPUSH
12486: CALL_OW 110
12490: PUSH
12491: LD_INT 0
12493: EQUAL
12494: AND
12495: IFFALSE 12524
// begin SetTag ( i , 1 ) ;
12497: LD_VAR 0 1
12501: PPUSH
12502: LD_INT 1
12504: PPUSH
12505: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
12509: LD_VAR 0 1
12513: PPUSH
12514: LD_INT 83
12516: PPUSH
12517: LD_INT 134
12519: PPUSH
12520: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
12524: LD_VAR 0 1
12528: PPUSH
12529: CALL_OW 256
12533: PUSH
12534: LD_INT 1000
12536: LESS
12537: PUSH
12538: LD_VAR 0 1
12542: PPUSH
12543: CALL_OW 110
12547: PUSH
12548: LD_INT 1
12550: EQUAL
12551: AND
12552: PUSH
12553: LD_VAR 0 1
12557: PPUSH
12558: LD_INT 83
12560: PPUSH
12561: LD_INT 134
12563: PPUSH
12564: CALL_OW 297
12568: PUSH
12569: LD_INT 6
12571: LESS
12572: AND
12573: IFFALSE 12601
// begin SetFuel ( i , 100 ) ;
12575: LD_VAR 0 1
12579: PPUSH
12580: LD_INT 100
12582: PPUSH
12583: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
12587: LD_VAR 0 1
12591: PPUSH
12592: CALL_OW 310
12596: PPUSH
12597: CALL 63943 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
12601: LD_VAR 0 1
12605: PPUSH
12606: CALL_OW 256
12610: PUSH
12611: LD_INT 1000
12613: EQUAL
12614: PUSH
12615: LD_VAR 0 1
12619: PPUSH
12620: CALL_OW 110
12624: PUSH
12625: LD_INT 1
12627: EQUAL
12628: AND
12629: PUSH
12630: LD_VAR 0 1
12634: PPUSH
12635: CALL_OW 311
12639: AND
12640: IFFALSE 12654
// SetTag ( i , 0 ) ;
12642: LD_VAR 0 1
12646: PPUSH
12647: LD_INT 0
12649: PPUSH
12650: CALL_OW 109
// end ; end ;
12654: GO 12404
12656: POP
12657: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
12658: LD_ADDR_VAR 0 5
12662: PUSH
12663: LD_EXP 55
12667: PPUSH
12668: LD_INT 25
12670: PUSH
12671: LD_INT 4
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: PPUSH
12678: CALL_OW 72
12682: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12683: LD_ADDR_VAR 0 4
12687: PUSH
12688: LD_EXP 55
12692: PPUSH
12693: LD_INT 92
12695: PUSH
12696: LD_INT 92
12698: PUSH
12699: LD_INT 155
12701: PUSH
12702: LD_INT 12
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: PUSH
12711: LD_INT 3
12713: PUSH
12714: LD_INT 24
12716: PUSH
12717: LD_INT 1000
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PPUSH
12732: CALL_OW 72
12736: ST_TO_ADDR
// if sci then
12737: LD_VAR 0 5
12741: IFFALSE 12874
// begin if hurt then
12743: LD_VAR 0 4
12747: IFFALSE 12820
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
12749: LD_VAR 0 5
12753: PPUSH
12754: LD_INT 3
12756: PUSH
12757: LD_INT 54
12759: PUSH
12760: EMPTY
12761: LIST
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: PPUSH
12767: CALL_OW 72
12771: IFFALSE 12800
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
12773: LD_VAR 0 5
12777: PPUSH
12778: LD_INT 3
12780: PUSH
12781: LD_INT 54
12783: PUSH
12784: EMPTY
12785: LIST
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PPUSH
12791: CALL_OW 72
12795: PPUSH
12796: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
12800: LD_VAR 0 5
12804: PPUSH
12805: LD_VAR 0 4
12809: PUSH
12810: LD_INT 1
12812: ARRAY
12813: PPUSH
12814: CALL_OW 188
// end else
12818: GO 12874
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
12820: LD_VAR 0 5
12824: PPUSH
12825: LD_INT 3
12827: PUSH
12828: LD_INT 54
12830: PUSH
12831: EMPTY
12832: LIST
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PPUSH
12838: CALL_OW 72
12842: IFFALSE 12874
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
12844: LD_VAR 0 5
12848: PPUSH
12849: LD_INT 3
12851: PUSH
12852: LD_INT 54
12854: PUSH
12855: EMPTY
12856: LIST
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: PPUSH
12862: CALL_OW 72
12866: PPUSH
12867: LD_INT 17
12869: PPUSH
12870: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12874: LD_ADDR_VAR 0 3
12878: PUSH
12879: LD_INT 10
12881: PPUSH
12882: LD_INT 21
12884: PUSH
12885: LD_INT 3
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: PUSH
12892: LD_INT 3
12894: PUSH
12895: LD_INT 24
12897: PUSH
12898: LD_INT 1000
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PPUSH
12913: CALL_OW 70
12917: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
12918: LD_ADDR_VAR 0 2
12922: PUSH
12923: LD_EXP 55
12927: PPUSH
12928: LD_INT 25
12930: PUSH
12931: LD_INT 2
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: PPUSH
12938: CALL_OW 72
12942: PUSH
12943: LD_INT 22
12945: PUSH
12946: LD_INT 3
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: PUSH
12953: LD_INT 34
12955: PUSH
12956: LD_INT 52
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: PPUSH
12967: CALL_OW 69
12971: UNION
12972: ST_TO_ADDR
// if not tmp then
12973: LD_VAR 0 2
12977: NOT
12978: IFFALSE 12982
// exit ;
12980: GO 13500
// for i in tmp do
12982: LD_ADDR_VAR 0 1
12986: PUSH
12987: LD_VAR 0 2
12991: PUSH
12992: FOR_IN
12993: IFFALSE 13498
// begin if GetClass ( i ) = 2 then
12995: LD_VAR 0 1
12999: PPUSH
13000: CALL_OW 257
13004: PUSH
13005: LD_INT 2
13007: EQUAL
13008: IFFALSE 13231
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
13010: LD_VAR 0 1
13014: PPUSH
13015: CALL_OW 256
13019: PUSH
13020: LD_INT 1000
13022: EQUAL
13023: PUSH
13024: LD_VAR 0 1
13028: PPUSH
13029: CALL_OW 110
13033: PUSH
13034: LD_INT 1
13036: EQUAL
13037: AND
13038: IFFALSE 13052
// SetTag ( i , 0 ) ;
13040: LD_VAR 0 1
13044: PPUSH
13045: LD_INT 0
13047: PPUSH
13048: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
13052: LD_VAR 0 1
13056: PPUSH
13057: CALL_OW 256
13061: PUSH
13062: LD_INT 500
13064: LESSEQUAL
13065: PUSH
13066: LD_VAR 0 1
13070: PPUSH
13071: CALL_OW 110
13075: PUSH
13076: LD_INT 0
13078: EQUAL
13079: AND
13080: IFFALSE 13109
// begin SetTag ( i , 1 ) ;
13082: LD_VAR 0 1
13086: PPUSH
13087: LD_INT 1
13089: PPUSH
13090: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
13094: LD_VAR 0 1
13098: PPUSH
13099: LD_INT 92
13101: PPUSH
13102: LD_INT 155
13104: PPUSH
13105: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
13109: LD_VAR 0 3
13113: PUSH
13114: LD_VAR 0 1
13118: PPUSH
13119: CALL_OW 256
13123: PUSH
13124: LD_INT 500
13126: GREATER
13127: AND
13128: PUSH
13129: LD_VAR 0 1
13133: PPUSH
13134: CALL_OW 110
13138: PUSH
13139: LD_INT 0
13141: EQUAL
13142: AND
13143: PUSH
13144: LD_VAR 0 1
13148: PPUSH
13149: CALL_OW 314
13153: NOT
13154: AND
13155: IFFALSE 13229
// begin if b then
13157: LD_VAR 0 3
13161: IFFALSE 13193
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
13163: LD_VAR 0 1
13167: PPUSH
13168: LD_VAR 0 3
13172: PUSH
13173: LD_INT 1
13175: PPUSH
13176: LD_VAR 0 3
13180: PPUSH
13181: CALL_OW 12
13185: ARRAY
13186: PPUSH
13187: CALL_OW 130
13191: GO 13229
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
13193: LD_VAR 0 1
13197: PPUSH
13198: LD_INT 94
13200: PPUSH
13201: LD_INT 165
13203: PPUSH
13204: CALL_OW 297
13208: PUSH
13209: LD_INT 8
13211: GREATER
13212: IFFALSE 13229
// ComMoveXY ( i , 94 , 165 ) ;
13214: LD_VAR 0 1
13218: PPUSH
13219: LD_INT 94
13221: PPUSH
13222: LD_INT 165
13224: PPUSH
13225: CALL_OW 111
// end ; end else
13229: GO 13496
// if GetWeapon ( i ) = ru_crane then
13231: LD_VAR 0 1
13235: PPUSH
13236: CALL_OW 264
13240: PUSH
13241: LD_INT 52
13243: EQUAL
13244: IFFALSE 13496
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
13246: LD_VAR 0 1
13250: PPUSH
13251: CALL_OW 256
13255: PUSH
13256: LD_INT 1000
13258: EQUAL
13259: PUSH
13260: LD_VAR 0 1
13264: PPUSH
13265: CALL_OW 110
13269: PUSH
13270: LD_INT 1
13272: EQUAL
13273: AND
13274: IFFALSE 13300
// begin SetTag ( i , 0 ) ;
13276: LD_VAR 0 1
13280: PPUSH
13281: LD_INT 0
13283: PPUSH
13284: CALL_OW 109
// SetFuel ( i , 100 ) ;
13288: LD_VAR 0 1
13292: PPUSH
13293: LD_INT 100
13295: PPUSH
13296: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
13300: LD_VAR 0 1
13304: PPUSH
13305: CALL_OW 256
13309: PUSH
13310: LD_INT 500
13312: LESSEQUAL
13313: PUSH
13314: LD_VAR 0 1
13318: PPUSH
13319: CALL_OW 110
13323: PUSH
13324: LD_INT 0
13326: EQUAL
13327: AND
13328: IFFALSE 13371
// begin SetTag ( i , 1 ) ;
13330: LD_VAR 0 1
13334: PPUSH
13335: LD_INT 1
13337: PPUSH
13338: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
13342: LD_VAR 0 1
13346: PPUSH
13347: LD_INT 83
13349: PPUSH
13350: LD_INT 135
13352: PPUSH
13353: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
13357: LD_VAR 0 1
13361: PPUSH
13362: CALL_OW 310
13366: PPUSH
13367: CALL 63943 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
13371: LD_VAR 0 1
13375: PPUSH
13376: CALL_OW 256
13380: PUSH
13381: LD_INT 500
13383: GREATER
13384: PUSH
13385: LD_VAR 0 1
13389: PPUSH
13390: CALL_OW 110
13394: PUSH
13395: LD_INT 0
13397: EQUAL
13398: AND
13399: PUSH
13400: LD_VAR 0 1
13404: PPUSH
13405: CALL_OW 311
13409: AND
13410: PUSH
13411: LD_VAR 0 1
13415: PPUSH
13416: CALL_OW 314
13420: NOT
13421: AND
13422: IFFALSE 13496
// begin if b then
13424: LD_VAR 0 3
13428: IFFALSE 13460
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
13430: LD_VAR 0 1
13434: PPUSH
13435: LD_VAR 0 3
13439: PUSH
13440: LD_INT 1
13442: PPUSH
13443: LD_VAR 0 3
13447: PPUSH
13448: CALL_OW 12
13452: ARRAY
13453: PPUSH
13454: CALL_OW 130
13458: GO 13496
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
13460: LD_VAR 0 1
13464: PPUSH
13465: LD_INT 94
13467: PPUSH
13468: LD_INT 165
13470: PPUSH
13471: CALL_OW 297
13475: PUSH
13476: LD_INT 8
13478: GREATER
13479: IFFALSE 13496
// ComMoveXY ( i , 94 , 165 ) ;
13481: LD_VAR 0 1
13485: PPUSH
13486: LD_INT 94
13488: PPUSH
13489: LD_INT 165
13491: PPUSH
13492: CALL_OW 111
// end ; end ; end ;
13496: GO 12992
13498: POP
13499: POP
// end ;
13500: PPOPN 6
13502: END
// every 8 8$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp ;
13503: LD_EXP 23
13507: NOT
13508: PUSH
13509: LD_EXP 27
13513: NOT
13514: AND
13515: IFFALSE 14431
13517: GO 13519
13519: DISABLE
13520: LD_INT 0
13522: PPUSH
13523: PPUSH
13524: PPUSH
13525: PPUSH
// begin enable ;
13526: ENABLE
// if Prob ( [ 35 , 45 , 55 , 60 ] [ Difficulty ] ) then
13527: LD_INT 35
13529: PUSH
13530: LD_INT 45
13532: PUSH
13533: LD_INT 55
13535: PUSH
13536: LD_INT 60
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: PUSH
13545: LD_OWVAR 67
13549: ARRAY
13550: PPUSH
13551: CALL_OW 13
13555: IFFALSE 13571
// waveStrength := waveStrength + 1 ;
13557: LD_ADDR_EXP 58
13561: PUSH
13562: LD_EXP 58
13566: PUSH
13567: LD_INT 1
13569: PLUS
13570: ST_TO_ADDR
// if waveStrength > [ 4 , 5 , 6 , 7 ] [ Difficulty ] then
13571: LD_EXP 58
13575: PUSH
13576: LD_INT 4
13578: PUSH
13579: LD_INT 5
13581: PUSH
13582: LD_INT 6
13584: PUSH
13585: LD_INT 7
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: PUSH
13594: LD_OWVAR 67
13598: ARRAY
13599: GREATER
13600: IFFALSE 13633
// begin waveStrength := waveStrength + Difficulty ;
13602: LD_ADDR_EXP 58
13606: PUSH
13607: LD_EXP 58
13611: PUSH
13612: LD_OWVAR 67
13616: PLUS
13617: ST_TO_ADDR
// disableAttackOnHeike := true ;
13618: LD_ADDR_EXP 27
13622: PUSH
13623: LD_INT 1
13625: ST_TO_ADDR
// wait ( 3 3$00 ) ;
13626: LD_INT 6300
13628: PPUSH
13629: CALL_OW 67
// end ; if disableAttackOnHeike and Difficulty > 1 then
13633: LD_EXP 27
13637: PUSH
13638: LD_OWVAR 67
13642: PUSH
13643: LD_INT 1
13645: GREATER
13646: AND
13647: IFFALSE 13856
// begin for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
13649: LD_ADDR_VAR 0 1
13653: PUSH
13654: DOUBLE
13655: LD_INT 1
13657: DEC
13658: ST_TO_ADDR
13659: LD_INT 3
13661: PUSH
13662: LD_INT 3
13664: PUSH
13665: LD_INT 4
13667: PUSH
13668: LD_INT 4
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: PUSH
13677: LD_OWVAR 67
13681: ARRAY
13682: PUSH
13683: FOR_TO
13684: IFFALSE 13854
// begin InitHc ;
13686: CALL_OW 19
// InitVc ;
13690: CALL_OW 20
// uc_side := 3 ;
13694: LD_ADDR_OWVAR 20
13698: PUSH
13699: LD_INT 3
13701: ST_TO_ADDR
// uc_nation := 3 ;
13702: LD_ADDR_OWVAR 21
13706: PUSH
13707: LD_INT 3
13709: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
13710: LD_INT 0
13712: PPUSH
13713: LD_INT 1
13715: PPUSH
13716: LD_OWVAR 67
13720: PUSH
13721: LD_INT 2
13723: PLUS
13724: PPUSH
13725: CALL_OW 380
// un := CreateHuman ;
13729: LD_ADDR_VAR 0 2
13733: PUSH
13734: CALL_OW 44
13738: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
13739: LD_VAR 0 2
13743: PPUSH
13744: LD_INT 160
13746: PPUSH
13747: LD_INT 3
13749: PPUSH
13750: LD_INT 2
13752: PPUSH
13753: LD_INT 0
13755: PPUSH
13756: CALL 64263 0 5
// SetClass ( un , class_bazooker ) ;
13760: LD_VAR 0 2
13764: PPUSH
13765: LD_INT 9
13767: PPUSH
13768: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
13772: LD_ADDR_EXP 57
13776: PUSH
13777: LD_EXP 57
13781: PPUSH
13782: LD_EXP 57
13786: PUSH
13787: LD_INT 1
13789: PLUS
13790: PPUSH
13791: LD_VAR 0 2
13795: PPUSH
13796: CALL_OW 1
13800: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
13801: LD_VAR 0 2
13805: PPUSH
13806: LD_INT 177
13808: PPUSH
13809: LD_INT 17
13811: PPUSH
13812: CALL_OW 111
// wait ( 0 0$2 ) ;
13816: LD_INT 70
13818: PPUSH
13819: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
13823: LD_ADDR_VAR 0 4
13827: PUSH
13828: LD_VAR 0 4
13832: PPUSH
13833: LD_VAR 0 4
13837: PUSH
13838: LD_INT 1
13840: PLUS
13841: PPUSH
13842: LD_VAR 0 2
13846: PPUSH
13847: CALL_OW 1
13851: ST_TO_ADDR
// end ;
13852: GO 13683
13854: POP
13855: POP
// end ; for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] + waveStrength do
13856: LD_ADDR_VAR 0 1
13860: PUSH
13861: DOUBLE
13862: LD_INT 1
13864: DEC
13865: ST_TO_ADDR
13866: LD_INT 2
13868: PUSH
13869: LD_INT 3
13871: PUSH
13872: LD_INT 4
13874: PUSH
13875: LD_INT 5
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: PUSH
13884: LD_OWVAR 67
13888: ARRAY
13889: PUSH
13890: LD_EXP 58
13894: PLUS
13895: PUSH
13896: FOR_TO
13897: IFFALSE 14206
// begin InitHc ;
13899: CALL_OW 19
// InitVc ;
13903: CALL_OW 20
// uc_side := 3 ;
13907: LD_ADDR_OWVAR 20
13911: PUSH
13912: LD_INT 3
13914: ST_TO_ADDR
// uc_nation := 3 ;
13915: LD_ADDR_OWVAR 21
13919: PUSH
13920: LD_INT 3
13922: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
13923: LD_INT 22
13925: PUSH
13926: LD_INT 23
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PUSH
13933: LD_INT 1
13935: PPUSH
13936: LD_INT 2
13938: PPUSH
13939: CALL_OW 12
13943: ARRAY
13944: PPUSH
13945: LD_INT 1
13947: PPUSH
13948: LD_INT 1
13950: PPUSH
13951: LD_INT 44
13953: PUSH
13954: LD_INT 45
13956: PUSH
13957: LD_INT 43
13959: PUSH
13960: LD_INT 42
13962: PUSH
13963: LD_INT 44
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: PUSH
13973: LD_INT 1
13975: PPUSH
13976: LD_INT 5
13978: PPUSH
13979: CALL_OW 12
13983: ARRAY
13984: PPUSH
13985: LD_INT 99
13987: PPUSH
13988: CALL 30314 0 5
// veh := CreateVehicle ;
13992: LD_ADDR_VAR 0 3
13996: PUSH
13997: CALL_OW 45
14001: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
14002: LD_VAR 0 3
14006: PPUSH
14007: LD_INT 160
14009: PPUSH
14010: LD_INT 3
14012: PPUSH
14013: LD_INT 2
14015: PPUSH
14016: LD_INT 0
14018: PPUSH
14019: CALL 64263 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14023: LD_ADDR_EXP 57
14027: PUSH
14028: LD_EXP 57
14032: PPUSH
14033: LD_EXP 57
14037: PUSH
14038: LD_INT 1
14040: PLUS
14041: PPUSH
14042: LD_VAR 0 3
14046: PPUSH
14047: CALL_OW 1
14051: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
14052: LD_INT 0
14054: PPUSH
14055: LD_INT 3
14057: PPUSH
14058: LD_OWVAR 67
14062: PUSH
14063: LD_INT 2
14065: PLUS
14066: PPUSH
14067: CALL_OW 380
// un := CreateHuman ;
14071: LD_ADDR_VAR 0 2
14075: PUSH
14076: CALL_OW 44
14080: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14081: LD_VAR 0 2
14085: PPUSH
14086: LD_VAR 0 3
14090: PPUSH
14091: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14095: LD_ADDR_EXP 57
14099: PUSH
14100: LD_EXP 57
14104: PPUSH
14105: LD_EXP 57
14109: PUSH
14110: LD_INT 1
14112: PLUS
14113: PPUSH
14114: LD_VAR 0 2
14118: PPUSH
14119: CALL_OW 1
14123: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
14124: LD_VAR 0 2
14128: PPUSH
14129: LD_INT 177
14131: PPUSH
14132: LD_INT 17
14134: PPUSH
14135: CALL_OW 111
// wait ( 0 0$2 ) ;
14139: LD_INT 70
14141: PPUSH
14142: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14146: LD_ADDR_VAR 0 4
14150: PUSH
14151: LD_VAR 0 4
14155: PPUSH
14156: LD_VAR 0 4
14160: PUSH
14161: LD_INT 1
14163: PLUS
14164: PPUSH
14165: LD_VAR 0 3
14169: PPUSH
14170: CALL_OW 1
14174: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14175: LD_ADDR_VAR 0 4
14179: PUSH
14180: LD_VAR 0 4
14184: PPUSH
14185: LD_VAR 0 4
14189: PUSH
14190: LD_INT 1
14192: PLUS
14193: PPUSH
14194: LD_VAR 0 2
14198: PPUSH
14199: CALL_OW 1
14203: ST_TO_ADDR
// end ;
14204: GO 13896
14206: POP
14207: POP
// for i in tmp do
14208: LD_ADDR_VAR 0 1
14212: PUSH
14213: LD_VAR 0 4
14217: PUSH
14218: FOR_IN
14219: IFFALSE 14309
// begin if Prob ( 50 ) then
14221: LD_INT 50
14223: PPUSH
14224: CALL_OW 13
14228: IFFALSE 14247
// ComAgressiveMove ( i , 206 , 73 ) else
14230: LD_VAR 0 1
14234: PPUSH
14235: LD_INT 206
14237: PPUSH
14238: LD_INT 73
14240: PPUSH
14241: CALL_OW 114
14245: GO 14307
// begin ComAgressiveMove ( i , 206 , 73 ) ;
14247: LD_VAR 0 1
14251: PPUSH
14252: LD_INT 206
14254: PPUSH
14255: LD_INT 73
14257: PPUSH
14258: CALL_OW 114
// AddComAgressiveMove ( i , 257 , 105 ) ;
14262: LD_VAR 0 1
14266: PPUSH
14267: LD_INT 257
14269: PPUSH
14270: LD_INT 105
14272: PPUSH
14273: CALL_OW 174
// AddComAgressiveMove ( i , 227 , 97 ) ;
14277: LD_VAR 0 1
14281: PPUSH
14282: LD_INT 227
14284: PPUSH
14285: LD_INT 97
14287: PPUSH
14288: CALL_OW 174
// AddComAgressiveMove ( i , 206 , 73 ) ;
14292: LD_VAR 0 1
14296: PPUSH
14297: LD_INT 206
14299: PPUSH
14300: LD_INT 73
14302: PPUSH
14303: CALL_OW 174
// end ; end ;
14307: GO 14218
14309: POP
14310: POP
// repeat wait ( 0 0$1 ) ;
14311: LD_INT 35
14313: PPUSH
14314: CALL_OW 67
// for i in tmp do
14318: LD_ADDR_VAR 0 1
14322: PUSH
14323: LD_VAR 0 4
14327: PUSH
14328: FOR_IN
14329: IFFALSE 14408
// if IsDead ( i ) then
14331: LD_VAR 0 1
14335: PPUSH
14336: CALL_OW 301
14340: IFFALSE 14360
// tmp := tmp diff i else
14342: LD_ADDR_VAR 0 4
14346: PUSH
14347: LD_VAR 0 4
14351: PUSH
14352: LD_VAR 0 1
14356: DIFF
14357: ST_TO_ADDR
14358: GO 14406
// if not HasTask ( i ) then
14360: LD_VAR 0 1
14364: PPUSH
14365: CALL_OW 314
14369: NOT
14370: IFFALSE 14406
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
14372: LD_VAR 0 1
14376: PPUSH
14377: LD_INT 81
14379: PUSH
14380: LD_INT 3
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: PPUSH
14387: CALL_OW 69
14391: PPUSH
14392: LD_VAR 0 1
14396: PPUSH
14397: CALL_OW 74
14401: PPUSH
14402: CALL_OW 115
14406: GO 14328
14408: POP
14409: POP
// until not tmp ;
14410: LD_VAR 0 4
14414: NOT
14415: IFFALSE 14311
// if firstAttack then
14417: LD_EXP 28
14421: IFFALSE 14431
// firstAttack := false ;
14423: LD_ADDR_EXP 28
14427: PUSH
14428: LD_INT 0
14430: ST_TO_ADDR
// end ;
14431: PPOPN 4
14433: END
// every 8 8$00 trigger not omarAttack and bergkampfArrived and not rolfHasVehicles do var i , un , veh , tmp ;
14434: LD_EXP 23
14438: NOT
14439: PUSH
14440: LD_EXP 3
14444: AND
14445: PUSH
14446: LD_EXP 16
14450: NOT
14451: AND
14452: IFFALSE 15292
14454: GO 14456
14456: DISABLE
14457: LD_INT 0
14459: PPUSH
14460: PPUSH
14461: PPUSH
14462: PPUSH
// begin enable ;
14463: ENABLE
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
14464: LD_ADDR_VAR 0 1
14468: PUSH
14469: DOUBLE
14470: LD_INT 1
14472: DEC
14473: ST_TO_ADDR
14474: LD_INT 1
14476: PUSH
14477: LD_INT 2
14479: PUSH
14480: LD_INT 2
14482: PUSH
14483: LD_INT 3
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: PUSH
14492: LD_OWVAR 67
14496: ARRAY
14497: PUSH
14498: FOR_TO
14499: IFFALSE 14800
// begin InitHc ;
14501: CALL_OW 19
// InitVc ;
14505: CALL_OW 20
// uc_side := 3 ;
14509: LD_ADDR_OWVAR 20
14513: PUSH
14514: LD_INT 3
14516: ST_TO_ADDR
// uc_nation := 3 ;
14517: LD_ADDR_OWVAR 21
14521: PUSH
14522: LD_INT 3
14524: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
14525: LD_INT 22
14527: PUSH
14528: LD_INT 23
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: PUSH
14535: LD_INT 1
14537: PPUSH
14538: LD_INT 2
14540: PPUSH
14541: CALL_OW 12
14545: ARRAY
14546: PPUSH
14547: LD_INT 1
14549: PPUSH
14550: LD_INT 1
14552: PPUSH
14553: LD_INT 44
14555: PUSH
14556: LD_INT 43
14558: PUSH
14559: LD_INT 42
14561: PUSH
14562: LD_INT 44
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: PUSH
14571: LD_INT 1
14573: PPUSH
14574: LD_INT 4
14576: PPUSH
14577: CALL_OW 12
14581: ARRAY
14582: PPUSH
14583: LD_INT 99
14585: PPUSH
14586: CALL 30314 0 5
// veh := CreateVehicle ;
14590: LD_ADDR_VAR 0 3
14594: PUSH
14595: CALL_OW 45
14599: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
14600: LD_VAR 0 3
14604: PPUSH
14605: LD_INT 5
14607: PPUSH
14608: LD_INT 3
14610: PPUSH
14611: LD_INT 2
14613: PPUSH
14614: LD_INT 0
14616: PPUSH
14617: CALL 64263 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14621: LD_ADDR_EXP 57
14625: PUSH
14626: LD_EXP 57
14630: PPUSH
14631: LD_EXP 57
14635: PUSH
14636: LD_INT 1
14638: PLUS
14639: PPUSH
14640: LD_VAR 0 3
14644: PPUSH
14645: CALL_OW 1
14649: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
14650: LD_INT 0
14652: PPUSH
14653: LD_INT 3
14655: PPUSH
14656: LD_OWVAR 67
14660: PPUSH
14661: CALL_OW 380
// un := CreateHuman ;
14665: LD_ADDR_VAR 0 2
14669: PUSH
14670: CALL_OW 44
14674: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14675: LD_VAR 0 2
14679: PPUSH
14680: LD_VAR 0 3
14684: PPUSH
14685: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14689: LD_ADDR_EXP 57
14693: PUSH
14694: LD_EXP 57
14698: PPUSH
14699: LD_EXP 57
14703: PUSH
14704: LD_INT 1
14706: PLUS
14707: PPUSH
14708: LD_VAR 0 2
14712: PPUSH
14713: CALL_OW 1
14717: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
14718: LD_VAR 0 2
14722: PPUSH
14723: LD_INT 23
14725: PPUSH
14726: LD_INT 7
14728: PPUSH
14729: CALL_OW 111
// wait ( 0 0$2 ) ;
14733: LD_INT 70
14735: PPUSH
14736: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14740: LD_ADDR_VAR 0 4
14744: PUSH
14745: LD_VAR 0 4
14749: PPUSH
14750: LD_VAR 0 4
14754: PUSH
14755: LD_INT 1
14757: PLUS
14758: PPUSH
14759: LD_VAR 0 3
14763: PPUSH
14764: CALL_OW 1
14768: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14769: LD_ADDR_VAR 0 4
14773: PUSH
14774: LD_VAR 0 4
14778: PPUSH
14779: LD_VAR 0 4
14783: PUSH
14784: LD_INT 1
14786: PLUS
14787: PPUSH
14788: LD_VAR 0 2
14792: PPUSH
14793: CALL_OW 1
14797: ST_TO_ADDR
// end ;
14798: GO 14498
14800: POP
14801: POP
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + waveStrength do
14802: LD_ADDR_VAR 0 1
14806: PUSH
14807: DOUBLE
14808: LD_INT 1
14810: DEC
14811: ST_TO_ADDR
14812: LD_INT 3
14814: PUSH
14815: LD_INT 4
14817: PUSH
14818: LD_INT 4
14820: PUSH
14821: LD_INT 5
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: PUSH
14830: LD_OWVAR 67
14834: ARRAY
14835: PUSH
14836: LD_EXP 58
14840: PLUS
14841: PUSH
14842: FOR_TO
14843: IFFALSE 15152
// begin InitHc ;
14845: CALL_OW 19
// InitVc ;
14849: CALL_OW 20
// uc_side := 3 ;
14853: LD_ADDR_OWVAR 20
14857: PUSH
14858: LD_INT 3
14860: ST_TO_ADDR
// uc_nation := 3 ;
14861: LD_ADDR_OWVAR 21
14865: PUSH
14866: LD_INT 3
14868: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
14869: LD_INT 22
14871: PUSH
14872: LD_INT 23
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: LD_INT 1
14881: PPUSH
14882: LD_INT 2
14884: PPUSH
14885: CALL_OW 12
14889: ARRAY
14890: PPUSH
14891: LD_INT 1
14893: PPUSH
14894: LD_INT 1
14896: PPUSH
14897: LD_INT 44
14899: PUSH
14900: LD_INT 45
14902: PUSH
14903: LD_INT 43
14905: PUSH
14906: LD_INT 42
14908: PUSH
14909: LD_INT 44
14911: PUSH
14912: EMPTY
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: PUSH
14919: LD_INT 1
14921: PPUSH
14922: LD_INT 5
14924: PPUSH
14925: CALL_OW 12
14929: ARRAY
14930: PPUSH
14931: LD_INT 99
14933: PPUSH
14934: CALL 30314 0 5
// veh := CreateVehicle ;
14938: LD_ADDR_VAR 0 3
14942: PUSH
14943: CALL_OW 45
14947: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
14948: LD_VAR 0 3
14952: PPUSH
14953: LD_INT 127
14955: PPUSH
14956: LD_INT 243
14958: PPUSH
14959: LD_INT 0
14961: PPUSH
14962: LD_INT 0
14964: PPUSH
14965: CALL 64263 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14969: LD_ADDR_EXP 57
14973: PUSH
14974: LD_EXP 57
14978: PPUSH
14979: LD_EXP 57
14983: PUSH
14984: LD_INT 1
14986: PLUS
14987: PPUSH
14988: LD_VAR 0 3
14992: PPUSH
14993: CALL_OW 1
14997: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
14998: LD_INT 0
15000: PPUSH
15001: LD_INT 3
15003: PPUSH
15004: LD_OWVAR 67
15008: PUSH
15009: LD_INT 2
15011: PLUS
15012: PPUSH
15013: CALL_OW 380
// un := CreateHuman ;
15017: LD_ADDR_VAR 0 2
15021: PUSH
15022: CALL_OW 44
15026: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15027: LD_VAR 0 2
15031: PPUSH
15032: LD_VAR 0 3
15036: PPUSH
15037: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
15041: LD_ADDR_EXP 57
15045: PUSH
15046: LD_EXP 57
15050: PPUSH
15051: LD_EXP 57
15055: PUSH
15056: LD_INT 1
15058: PLUS
15059: PPUSH
15060: LD_VAR 0 2
15064: PPUSH
15065: CALL_OW 1
15069: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
15070: LD_VAR 0 2
15074: PPUSH
15075: LD_INT 130
15077: PPUSH
15078: LD_INT 233
15080: PPUSH
15081: CALL_OW 111
// wait ( 0 0$2 ) ;
15085: LD_INT 70
15087: PPUSH
15088: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
15092: LD_ADDR_VAR 0 4
15096: PUSH
15097: LD_VAR 0 4
15101: PPUSH
15102: LD_VAR 0 4
15106: PUSH
15107: LD_INT 1
15109: PLUS
15110: PPUSH
15111: LD_VAR 0 3
15115: PPUSH
15116: CALL_OW 1
15120: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
15121: LD_ADDR_VAR 0 4
15125: PUSH
15126: LD_VAR 0 4
15130: PPUSH
15131: LD_VAR 0 4
15135: PUSH
15136: LD_INT 1
15138: PLUS
15139: PPUSH
15140: LD_VAR 0 2
15144: PPUSH
15145: CALL_OW 1
15149: ST_TO_ADDR
// end ;
15150: GO 14842
15152: POP
15153: POP
// for i in tmp do
15154: LD_ADDR_VAR 0 1
15158: PUSH
15159: LD_VAR 0 4
15163: PUSH
15164: FOR_IN
15165: IFFALSE 15184
// ComAgressiveMove ( i , 76 , 49 ) ;
15167: LD_VAR 0 1
15171: PPUSH
15172: LD_INT 76
15174: PPUSH
15175: LD_INT 49
15177: PPUSH
15178: CALL_OW 114
15182: GO 15164
15184: POP
15185: POP
// repeat wait ( 0 0$1 ) ;
15186: LD_INT 35
15188: PPUSH
15189: CALL_OW 67
// for i in tmp do
15193: LD_ADDR_VAR 0 1
15197: PUSH
15198: LD_VAR 0 4
15202: PUSH
15203: FOR_IN
15204: IFFALSE 15283
// if IsDead ( i ) then
15206: LD_VAR 0 1
15210: PPUSH
15211: CALL_OW 301
15215: IFFALSE 15235
// tmp := tmp diff i else
15217: LD_ADDR_VAR 0 4
15221: PUSH
15222: LD_VAR 0 4
15226: PUSH
15227: LD_VAR 0 1
15231: DIFF
15232: ST_TO_ADDR
15233: GO 15281
// if not HasTask ( i ) then
15235: LD_VAR 0 1
15239: PPUSH
15240: CALL_OW 314
15244: NOT
15245: IFFALSE 15281
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
15247: LD_VAR 0 1
15251: PPUSH
15252: LD_INT 81
15254: PUSH
15255: LD_INT 3
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: PPUSH
15262: CALL_OW 69
15266: PPUSH
15267: LD_VAR 0 1
15271: PPUSH
15272: CALL_OW 74
15276: PPUSH
15277: CALL_OW 115
15281: GO 15203
15283: POP
15284: POP
// until not tmp ;
15285: LD_VAR 0 4
15289: NOT
15290: IFFALSE 15186
// end ;
15292: PPOPN 4
15294: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
15295: LD_EXP 6
15299: IFFALSE 15770
15301: GO 15303
15303: DISABLE
15304: LD_INT 0
15306: PPUSH
15307: PPUSH
15308: PPUSH
15309: PPUSH
// begin wait ( 3 3$00 ) ;
15310: LD_INT 6300
15312: PPUSH
15313: CALL_OW 67
// for i := 1 to 3 do
15317: LD_ADDR_VAR 0 1
15321: PUSH
15322: DOUBLE
15323: LD_INT 1
15325: DEC
15326: ST_TO_ADDR
15327: LD_INT 3
15329: PUSH
15330: FOR_TO
15331: IFFALSE 15630
// begin InitHc ;
15333: CALL_OW 19
// InitVc ;
15337: CALL_OW 20
// uc_side := 3 ;
15341: LD_ADDR_OWVAR 20
15345: PUSH
15346: LD_INT 3
15348: ST_TO_ADDR
// uc_nation := 3 ;
15349: LD_ADDR_OWVAR 21
15353: PUSH
15354: LD_INT 3
15356: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
15357: LD_INT 22
15359: PUSH
15360: LD_INT 23
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: LD_INT 1
15369: PPUSH
15370: LD_INT 2
15372: PPUSH
15373: CALL_OW 12
15377: ARRAY
15378: PPUSH
15379: LD_INT 1
15381: PPUSH
15382: LD_INT 1
15384: PPUSH
15385: LD_INT 44
15387: PUSH
15388: LD_INT 43
15390: PUSH
15391: LD_INT 42
15393: PUSH
15394: LD_INT 44
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: PUSH
15403: LD_INT 1
15405: PPUSH
15406: LD_INT 4
15408: PPUSH
15409: CALL_OW 12
15413: ARRAY
15414: PPUSH
15415: LD_INT 99
15417: PPUSH
15418: CALL 30314 0 5
// veh := CreateVehicle ;
15422: LD_ADDR_VAR 0 3
15426: PUSH
15427: CALL_OW 45
15431: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
15432: LD_VAR 0 3
15436: PPUSH
15437: LD_INT 293
15439: PPUSH
15440: LD_INT 246
15442: PPUSH
15443: LD_INT 5
15445: PPUSH
15446: LD_INT 0
15448: PPUSH
15449: CALL 64263 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
15453: LD_ADDR_EXP 57
15457: PUSH
15458: LD_EXP 57
15462: PPUSH
15463: LD_EXP 57
15467: PUSH
15468: LD_INT 1
15470: PLUS
15471: PPUSH
15472: LD_VAR 0 3
15476: PPUSH
15477: CALL_OW 1
15481: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
15482: LD_INT 0
15484: PPUSH
15485: LD_INT 3
15487: PPUSH
15488: LD_INT 3
15490: PPUSH
15491: CALL_OW 380
// un := CreateHuman ;
15495: LD_ADDR_VAR 0 2
15499: PUSH
15500: CALL_OW 44
15504: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15505: LD_VAR 0 2
15509: PPUSH
15510: LD_VAR 0 3
15514: PPUSH
15515: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
15519: LD_ADDR_EXP 57
15523: PUSH
15524: LD_EXP 57
15528: PPUSH
15529: LD_EXP 57
15533: PUSH
15534: LD_INT 1
15536: PLUS
15537: PPUSH
15538: LD_VAR 0 2
15542: PPUSH
15543: CALL_OW 1
15547: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
15548: LD_VAR 0 2
15552: PPUSH
15553: LD_INT 273
15555: PPUSH
15556: LD_INT 227
15558: PPUSH
15559: CALL_OW 111
// wait ( 0 0$2 ) ;
15563: LD_INT 70
15565: PPUSH
15566: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
15570: LD_ADDR_VAR 0 4
15574: PUSH
15575: LD_VAR 0 4
15579: PPUSH
15580: LD_VAR 0 4
15584: PUSH
15585: LD_INT 1
15587: PLUS
15588: PPUSH
15589: LD_VAR 0 3
15593: PPUSH
15594: CALL_OW 1
15598: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
15599: LD_ADDR_VAR 0 4
15603: PUSH
15604: LD_VAR 0 4
15608: PPUSH
15609: LD_VAR 0 4
15613: PUSH
15614: LD_INT 1
15616: PLUS
15617: PPUSH
15618: LD_VAR 0 2
15622: PPUSH
15623: CALL_OW 1
15627: ST_TO_ADDR
// end ;
15628: GO 15330
15630: POP
15631: POP
// for i in tmp do
15632: LD_ADDR_VAR 0 1
15636: PUSH
15637: LD_VAR 0 4
15641: PUSH
15642: FOR_IN
15643: IFFALSE 15662
// ComAgressiveMove ( i , 330 , 231 ) ;
15645: LD_VAR 0 1
15649: PPUSH
15650: LD_INT 330
15652: PPUSH
15653: LD_INT 231
15655: PPUSH
15656: CALL_OW 114
15660: GO 15642
15662: POP
15663: POP
// repeat wait ( 0 0$1 ) ;
15664: LD_INT 35
15666: PPUSH
15667: CALL_OW 67
// for i in tmp do
15671: LD_ADDR_VAR 0 1
15675: PUSH
15676: LD_VAR 0 4
15680: PUSH
15681: FOR_IN
15682: IFFALSE 15761
// if IsDead ( i ) then
15684: LD_VAR 0 1
15688: PPUSH
15689: CALL_OW 301
15693: IFFALSE 15713
// tmp := tmp diff i else
15695: LD_ADDR_VAR 0 4
15699: PUSH
15700: LD_VAR 0 4
15704: PUSH
15705: LD_VAR 0 1
15709: DIFF
15710: ST_TO_ADDR
15711: GO 15759
// if not HasTask ( i ) then
15713: LD_VAR 0 1
15717: PPUSH
15718: CALL_OW 314
15722: NOT
15723: IFFALSE 15759
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
15725: LD_VAR 0 1
15729: PPUSH
15730: LD_INT 81
15732: PUSH
15733: LD_INT 3
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: PPUSH
15740: CALL_OW 69
15744: PPUSH
15745: LD_VAR 0 1
15749: PPUSH
15750: CALL_OW 74
15754: PPUSH
15755: CALL_OW 115
15759: GO 15681
15761: POP
15762: POP
// until not tmp ;
15763: LD_VAR 0 4
15767: NOT
15768: IFFALSE 15664
// end ;
15770: PPOPN 4
15772: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
15773: LD_INT 3
15775: PUSH
15776: LD_INT 22
15778: PUSH
15779: LD_INT 2
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PUSH
15790: LD_INT 32
15792: PUSH
15793: LD_INT 1
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PPUSH
15804: CALL_OW 69
15808: IFFALSE 15892
15810: GO 15812
15812: DISABLE
15813: LD_INT 0
15815: PPUSH
// begin enable ;
15816: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
15817: LD_ADDR_VAR 0 1
15821: PUSH
15822: LD_INT 3
15824: PUSH
15825: LD_INT 22
15827: PUSH
15828: LD_INT 2
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: PUSH
15835: EMPTY
15836: LIST
15837: LIST
15838: PUSH
15839: LD_INT 32
15841: PUSH
15842: LD_INT 1
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: PPUSH
15853: CALL_OW 69
15857: PUSH
15858: FOR_IN
15859: IFFALSE 15890
// if GetFuel ( i ) < 3 then
15861: LD_VAR 0 1
15865: PPUSH
15866: CALL_OW 261
15870: PUSH
15871: LD_INT 3
15873: LESS
15874: IFFALSE 15888
// SetFuel ( i , 3 ) ;
15876: LD_VAR 0 1
15880: PPUSH
15881: LD_INT 3
15883: PPUSH
15884: CALL_OW 240
15888: GO 15858
15890: POP
15891: POP
// end ; end_of_file
15892: PPOPN 1
15894: END
// export function Action ; begin
15895: LD_INT 0
15897: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
15898: LD_INT 2
15900: PPUSH
15901: LD_INT 4
15903: PPUSH
15904: CALL_OW 332
// Video ( true ) ;
15908: LD_INT 1
15910: PPUSH
15911: CALL 62103 0 1
// music_nat := 3 ;
15915: LD_ADDR_OWVAR 71
15919: PUSH
15920: LD_INT 3
15922: ST_TO_ADDR
// music_class := music_recon ;
15923: LD_ADDR_OWVAR 72
15927: PUSH
15928: LD_INT 3
15930: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
15931: LD_INT 213
15933: PPUSH
15934: LD_INT 89
15936: PPUSH
15937: CALL_OW 86
// if not debug then
15941: LD_EXP 1
15945: NOT
15946: IFFALSE 15980
// begin if Kaia and Olaf then
15948: LD_EXP 35
15952: PUSH
15953: LD_EXP 39
15957: AND
15958: IFFALSE 15964
// SceneKaiaWithOlaf ;
15960: CALL 16019 0 0
// if Givi and Kamil then
15964: LD_EXP 31
15968: PUSH
15969: LD_EXP 34
15973: AND
15974: IFFALSE 15980
// SceneWithGiviAndKamil ;
15976: CALL 16590 0 0
// end ; Video ( false ) ;
15980: LD_INT 0
15982: PPUSH
15983: CALL 62103 0 1
// ChangeMissionObjectives ( M1 ) ;
15987: LD_STRING M1
15989: PPUSH
15990: CALL_OW 337
// music_nat := music_auto ;
15994: LD_ADDR_OWVAR 71
15998: PUSH
15999: LD_INT 0
16001: ST_TO_ADDR
// music_class := music_auto ;
16002: LD_ADDR_OWVAR 72
16006: PUSH
16007: LD_INT 0
16009: ST_TO_ADDR
// SaveForQuickRestart ;
16010: CALL_OW 22
// end ;
16014: LD_VAR 0 1
16018: RET
// export function SceneKaiaWithOlaf ; begin
16019: LD_INT 0
16021: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
16022: LD_INT 22
16024: PUSH
16025: LD_INT 2
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PUSH
16032: LD_INT 30
16034: PUSH
16035: LD_INT 3
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: PPUSH
16046: CALL_OW 69
16050: PPUSH
16051: LD_INT 14
16053: PPUSH
16054: LD_INT 1
16056: PPUSH
16057: LD_INT 1
16059: PPUSH
16060: LD_INT 26
16062: PPUSH
16063: CALL_OW 125
// wait ( 0 0$1 ) ;
16067: LD_INT 35
16069: PPUSH
16070: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
16074: LD_EXP 35
16078: PPUSH
16079: LD_STRING DK-Mem-1
16081: PPUSH
16082: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
16086: LD_EXP 35
16090: PPUSH
16091: LD_STRING DK-Mem-2
16093: PPUSH
16094: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
16098: LD_EXP 39
16102: PPUSH
16103: LD_STRING DO-Mem-3
16105: PPUSH
16106: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
16110: LD_EXP 35
16114: PPUSH
16115: LD_STRING DK-Mem-4
16117: PPUSH
16118: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
16122: LD_EXP 39
16126: PPUSH
16127: LD_STRING DO-Mem-5
16129: PPUSH
16130: CALL_OW 88
// wait ( 0 0$2 ) ;
16134: LD_INT 70
16136: PPUSH
16137: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
16141: LD_INT 22
16143: PUSH
16144: LD_INT 2
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: PUSH
16151: LD_INT 30
16153: PUSH
16154: LD_INT 3
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PPUSH
16165: CALL_OW 69
16169: PPUSH
16170: LD_INT 90
16172: PPUSH
16173: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
16177: LD_EXP 39
16181: PPUSH
16182: LD_STRING DO-Mem-6
16184: PPUSH
16185: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
16189: LD_EXP 35
16193: PPUSH
16194: LD_STRING DK-Mem-7
16196: PPUSH
16197: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
16201: LD_EXP 30
16205: PPUSH
16206: LD_EXP 35
16210: PPUSH
16211: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
16215: LD_EXP 30
16219: PPUSH
16220: LD_STRING DH-Mem-8
16222: PPUSH
16223: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
16227: LD_EXP 35
16231: PUSH
16232: LD_EXP 39
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: PPUSH
16241: LD_EXP 30
16245: PPUSH
16246: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
16250: LD_EXP 39
16254: PPUSH
16255: LD_STRING DO-Mem-9
16257: PPUSH
16258: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
16262: LD_EXP 39
16266: PPUSH
16267: LD_STRING DO-Mem-10
16269: PPUSH
16270: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
16274: LD_EXP 39
16278: PPUSH
16279: LD_STRING DO-Mem-11
16281: PPUSH
16282: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
16286: LD_EXP 39
16290: PPUSH
16291: LD_STRING DO-Mem-12
16293: PPUSH
16294: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
16298: LD_EXP 35
16302: PPUSH
16303: LD_STRING DK-Mem-13
16305: PPUSH
16306: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
16310: LD_EXP 35
16314: PPUSH
16315: LD_STRING DK-Mem-14
16317: PPUSH
16318: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
16322: LD_EXP 35
16326: PPUSH
16327: LD_STRING DK-Mem-15
16329: PPUSH
16330: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
16334: LD_EXP 35
16338: PPUSH
16339: LD_STRING DK-Mem-16
16341: PPUSH
16342: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
16346: LD_EXP 35
16350: PPUSH
16351: LD_STRING DK-Mem-17
16353: PPUSH
16354: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
16358: LD_EXP 39
16362: PPUSH
16363: LD_EXP 35
16367: PPUSH
16368: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
16372: LD_EXP 39
16376: PPUSH
16377: LD_STRING DO-Mem-18
16379: PPUSH
16380: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
16384: LD_EXP 35
16388: PPUSH
16389: LD_EXP 39
16393: PPUSH
16394: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
16398: LD_EXP 35
16402: PPUSH
16403: LD_STRING DK-Mem-19
16405: PPUSH
16406: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
16410: LD_EXP 39
16414: PPUSH
16415: LD_INT 214
16417: PPUSH
16418: LD_INT 86
16420: PPUSH
16421: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
16425: LD_EXP 39
16429: PPUSH
16430: LD_EXP 35
16434: PPUSH
16435: CALL_OW 179
// if Givi then
16439: LD_EXP 31
16443: IFFALSE 16474
// begin ComMoveXY ( Givi , 217 , 86 ) ;
16445: LD_EXP 31
16449: PPUSH
16450: LD_INT 217
16452: PPUSH
16453: LD_INT 86
16455: PPUSH
16456: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
16460: LD_EXP 31
16464: PPUSH
16465: LD_EXP 30
16469: PPUSH
16470: CALL_OW 179
// end ; if Kamil then
16474: LD_EXP 34
16478: IFFALSE 16518
// begin ComExit ( Kamil ) ;
16480: LD_EXP 34
16484: PPUSH
16485: CALL 62519 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
16489: LD_EXP 34
16493: PPUSH
16494: LD_INT 212
16496: PPUSH
16497: LD_INT 86
16499: PPUSH
16500: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
16504: LD_EXP 34
16508: PPUSH
16509: LD_EXP 30
16513: PPUSH
16514: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
16518: LD_INT 70
16520: PPUSH
16521: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
16525: LD_EXP 30
16529: PPUSH
16530: LD_STRING DH-Mem-20
16532: PPUSH
16533: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
16537: LD_EXP 39
16541: PPUSH
16542: LD_INT 215
16544: PPUSH
16545: LD_INT 87
16547: PPUSH
16548: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
16552: LD_EXP 39
16556: PPUSH
16557: LD_EXP 35
16561: PPUSH
16562: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
16566: LD_EXP 35
16570: PPUSH
16571: LD_STRING DK-Mem-21
16573: PPUSH
16574: CALL_OW 88
// wait ( 0 0$2 ) ;
16578: LD_INT 70
16580: PPUSH
16581: CALL_OW 67
// end ;
16585: LD_VAR 0 1
16589: RET
// export function SceneWithGiviAndKamil ; begin
16590: LD_INT 0
16592: PPUSH
// if Markov then
16593: LD_EXP 37
16597: IFFALSE 16648
// begin if IsInUnit ( Markov ) then
16599: LD_EXP 37
16603: PPUSH
16604: CALL_OW 310
16608: IFFALSE 16619
// ComExit ( Markov ) ;
16610: LD_EXP 37
16614: PPUSH
16615: CALL 62519 0 1
// AddComMoveXY ( Markov , 212 , 88 ) ;
16619: LD_EXP 37
16623: PPUSH
16624: LD_INT 212
16626: PPUSH
16627: LD_INT 88
16629: PPUSH
16630: CALL_OW 171
// AddComTurnUnit ( Markov , Heike ) ;
16634: LD_EXP 37
16638: PPUSH
16639: LD_EXP 30
16643: PPUSH
16644: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
16648: LD_EXP 31
16652: PPUSH
16653: LD_STRING DG-Obj-1
16655: PPUSH
16656: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
16660: LD_EXP 34
16664: PPUSH
16665: LD_STRING DKam-Obj-2
16667: PPUSH
16668: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
16672: LD_EXP 30
16676: PPUSH
16677: LD_EXP 34
16681: PPUSH
16682: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
16686: LD_EXP 34
16690: PPUSH
16691: LD_STRING DKam-Obj-3
16693: PPUSH
16694: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
16698: LD_EXP 37
16702: PPUSH
16703: LD_STRING DMar-Obj-4
16705: PPUSH
16706: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
16710: LD_EXP 34
16714: PPUSH
16715: LD_STRING DKam-Obj-6
16717: PPUSH
16718: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
16722: LD_EXP 34
16726: PPUSH
16727: LD_STRING DKam-Obj-7
16729: PPUSH
16730: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
16734: LD_EXP 34
16738: PPUSH
16739: LD_STRING DKam-Obj-8
16741: PPUSH
16742: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
16746: LD_EXP 30
16750: PPUSH
16751: LD_STRING DH-Obj-9
16753: PPUSH
16754: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
16758: LD_EXP 34
16762: PPUSH
16763: LD_STRING DKam-Obj-10
16765: PPUSH
16766: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
16770: LD_EXP 34
16774: PPUSH
16775: LD_STRING DKam-Obj-11
16777: PPUSH
16778: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
16782: LD_EXP 37
16786: PPUSH
16787: LD_STRING DMar-Obj-12
16789: PPUSH
16790: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
16794: LD_EXP 37
16798: PPUSH
16799: LD_STRING DMar-Obj-13
16801: PPUSH
16802: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
16806: LD_EXP 37
16810: PPUSH
16811: LD_STRING DMar-Obj-14
16813: PPUSH
16814: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
16818: LD_EXP 39
16822: PPUSH
16823: LD_STRING DO-Obj-15
16825: PPUSH
16826: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
16830: LD_EXP 39
16834: PPUSH
16835: LD_STRING DO-Obj-16
16837: PPUSH
16838: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
16842: LD_EXP 30
16846: PPUSH
16847: LD_STRING DH-Obj-17
16849: PPUSH
16850: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
16854: LD_EXP 39
16858: PPUSH
16859: LD_STRING DO-Obj-18
16861: PPUSH
16862: CALL_OW 88
// end ;
16866: LD_VAR 0 1
16870: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
16871: LD_INT 34
16873: PUSH
16874: LD_EXP 64
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PPUSH
16883: CALL_OW 69
16887: IFFALSE 17084
16889: GO 16891
16891: DISABLE
16892: LD_INT 0
16894: PPUSH
// begin wait ( 0 0$2 ) ;
16895: LD_INT 70
16897: PPUSH
16898: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
16902: LD_INT 34
16904: PUSH
16905: LD_EXP 64
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PPUSH
16914: CALL_OW 69
16918: PPUSH
16919: CALL_OW 87
// DialogueOn ;
16923: CALL_OW 6
// if Markov then
16927: LD_EXP 37
16931: IFFALSE 16959
// begin Say ( Markov , DMar-Grn-1 ) ;
16933: LD_EXP 37
16937: PPUSH
16938: LD_STRING DMar-Grn-1
16940: PPUSH
16941: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
16945: LD_EXP 30
16949: PPUSH
16950: LD_STRING DH-Grn-2
16952: PPUSH
16953: CALL_OW 88
// end else
16957: GO 17058
// if heikeSecondSquad then
16959: LD_EXP 45
16963: IFFALSE 17058
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
16965: LD_ADDR_VAR 0 1
16969: PUSH
16970: LD_EXP 45
16974: PUSH
16975: LD_INT 1
16977: PPUSH
16978: LD_EXP 45
16982: PPUSH
16983: CALL_OW 12
16987: ARRAY
16988: ST_TO_ADDR
// case GetSex ( random ) of 1 :
16989: LD_VAR 0 1
16993: PPUSH
16994: CALL_OW 258
16998: PUSH
16999: LD_INT 1
17001: DOUBLE
17002: EQUAL
17003: IFTRUE 17007
17005: GO 17022
17007: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
17008: LD_VAR 0 1
17012: PPUSH
17013: LD_STRING DArm-Grn-1
17015: PPUSH
17016: CALL_OW 88
17020: GO 17046
17022: LD_INT 2
17024: DOUBLE
17025: EQUAL
17026: IFTRUE 17030
17028: GO 17045
17030: POP
// Say ( random , DArf-Grn-1 ) ; end ;
17031: LD_VAR 0 1
17035: PPUSH
17036: LD_STRING DArf-Grn-1
17038: PPUSH
17039: CALL_OW 88
17043: GO 17046
17045: POP
// Say ( Heike , DH-Grn-2 ) ;
17046: LD_EXP 30
17050: PPUSH
17051: LD_STRING DH-Grn-2
17053: PPUSH
17054: CALL_OW 88
// end ; DialogueOff ;
17058: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
17062: LD_STRING MortarConstructed
17064: PPUSH
17065: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
17069: LD_STRING SelfPropelledMortar
17071: PPUSH
17072: CALL_OW 339
// mortarConstructed := true ;
17076: LD_ADDR_EXP 15
17080: PUSH
17081: LD_INT 1
17083: ST_TO_ADDR
// end ;
17084: PPOPN 1
17086: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
17087: LD_INT 2
17089: PPUSH
17090: LD_INT 8
17092: PPUSH
17093: CALL_OW 294
17097: IFFALSE 17240
17099: GO 17101
17101: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
17102: LD_INT 200
17104: PPUSH
17105: LD_INT 162
17107: PPUSH
17108: LD_INT 2
17110: PPUSH
17111: LD_INT 6
17113: NEG
17114: PPUSH
17115: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
17119: LD_INT 200
17121: PPUSH
17122: LD_INT 162
17124: PPUSH
17125: LD_INT 2
17127: PPUSH
17128: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
17132: LD_INT 200
17134: PPUSH
17135: LD_INT 162
17137: PPUSH
17138: CALL_OW 84
// if not IsOk ( Kurt ) then
17142: LD_EXP 41
17146: PPUSH
17147: CALL_OW 302
17151: NOT
17152: IFFALSE 17156
// exit ;
17154: GO 17240
// Say ( Kurt , DKs-Otpst-2-1 ) ;
17156: LD_EXP 41
17160: PPUSH
17161: LD_STRING DKs-Otpst-2-1
17163: PPUSH
17164: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
17168: LD_EXP 35
17172: PPUSH
17173: LD_STRING DK-Otpst-2-2
17175: PPUSH
17176: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
17180: LD_EXP 41
17184: PPUSH
17185: LD_STRING DKs-Otpst-2-3
17187: PPUSH
17188: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
17192: LD_EXP 41
17196: PPUSH
17197: LD_STRING DKs-Otpst-2-4
17199: PPUSH
17200: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
17204: LD_EXP 41
17208: PPUSH
17209: LD_STRING DKs-Otpst-2-5
17211: PPUSH
17212: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
17216: LD_EXP 34
17220: PPUSH
17221: LD_STRING DKam-Otpst-2-6
17223: PPUSH
17224: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
17228: LD_EXP 41
17232: PPUSH
17233: LD_STRING DKs-Otpst-2-7
17235: PPUSH
17236: CALL_OW 88
// end ;
17240: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
17241: LD_INT 8
17243: PPUSH
17244: LD_INT 22
17246: PUSH
17247: LD_INT 3
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: PUSH
17254: LD_INT 21
17256: PUSH
17257: LD_INT 3
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PPUSH
17268: CALL_OW 70
17272: NOT
17273: PUSH
17274: LD_EXP 3
17278: NOT
17279: AND
17280: IFFALSE 17530
17282: GO 17284
17284: DISABLE
17285: LD_INT 0
17287: PPUSH
// begin outpostDestroyed := true ;
17288: LD_ADDR_EXP 4
17292: PUSH
17293: LD_INT 1
17295: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
17296: LD_INT 22
17298: PUSH
17299: LD_INT 2
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: PUSH
17306: LD_INT 34
17308: PUSH
17309: LD_EXP 64
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: LD_INT 92
17320: PUSH
17321: LD_INT 195
17323: PUSH
17324: LD_INT 164
17326: PUSH
17327: LD_INT 12
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: LIST
17340: PPUSH
17341: CALL_OW 69
17345: NOT
17346: IFFALSE 17350
// exit ;
17348: GO 17530
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
17350: LD_EXP 31
17354: PPUSH
17355: CALL_OW 302
17359: NOT
17360: PUSH
17361: LD_EXP 35
17365: PPUSH
17366: CALL_OW 302
17370: NOT
17371: OR
17372: IFFALSE 17376
// exit ;
17374: GO 17530
// Say ( Givi , DG-Otpst-1-1 ) ;
17376: LD_EXP 31
17380: PPUSH
17381: LD_STRING DG-Otpst-1-1
17383: PPUSH
17384: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
17388: LD_EXP 35
17392: PPUSH
17393: LD_STRING DK-Otpst-1-2
17395: PPUSH
17396: CALL_OW 88
// if IsOk ( Markov ) then
17400: LD_EXP 37
17404: PPUSH
17405: CALL_OW 302
17409: IFFALSE 17437
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
17411: LD_EXP 37
17415: PPUSH
17416: LD_STRING DMar-Otpst-1-3
17418: PPUSH
17419: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
17423: LD_EXP 37
17427: PPUSH
17428: LD_STRING DMar-Otpst-1-4
17430: PPUSH
17431: CALL_OW 88
// end else
17435: GO 17518
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
17437: LD_ADDR_VAR 0 1
17441: PUSH
17442: LD_EXP 45
17446: PUSH
17447: LD_INT 1
17449: PPUSH
17450: LD_EXP 45
17454: PPUSH
17455: CALL_OW 12
17459: ARRAY
17460: ST_TO_ADDR
// case GetSex ( random ) of 1 :
17461: LD_VAR 0 1
17465: PPUSH
17466: CALL_OW 258
17470: PUSH
17471: LD_INT 1
17473: DOUBLE
17474: EQUAL
17475: IFTRUE 17479
17477: GO 17494
17479: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
17480: LD_VAR 0 1
17484: PPUSH
17485: LD_STRING DArm-Otpst-1-a-3
17487: PPUSH
17488: CALL_OW 88
17492: GO 17518
17494: LD_INT 2
17496: DOUBLE
17497: EQUAL
17498: IFTRUE 17502
17500: GO 17517
17502: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
17503: LD_VAR 0 1
17507: PPUSH
17508: LD_STRING DArf-Otpst-1-a-3
17510: PPUSH
17511: CALL_OW 88
17515: GO 17518
17517: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
17518: LD_EXP 31
17522: PPUSH
17523: LD_STRING DG-Otpst-1-5
17525: PPUSH
17526: CALL_OW 88
// end ;
17530: PPOPN 1
17532: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
17533: LD_EXP 35
17537: PPUSH
17538: CALL_OW 256
17542: PUSH
17543: LD_INT 10
17545: LESS
17546: IFFALSE 17660
17548: GO 17550
17550: DISABLE
// begin DialogueOn ;
17551: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17555: LD_EXP 35
17559: PPUSH
17560: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
17564: LD_EXP 35
17568: PPUSH
17569: LD_STRING DK-Dead-1
17571: PPUSH
17572: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
17576: LD_EXP 30
17580: PPUSH
17581: LD_STRING DH-Dead-2
17583: PPUSH
17584: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
17588: LD_EXP 35
17592: PPUSH
17593: LD_STRING DK-Dead-3
17595: PPUSH
17596: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
17600: LD_EXP 30
17604: PPUSH
17605: LD_STRING DH-Dead-4
17607: PPUSH
17608: CALL_OW 88
// if IsOk ( Mike ) then
17612: LD_EXP 32
17616: PPUSH
17617: CALL_OW 302
17621: IFFALSE 17647
// begin Say ( Mike , DM-Dead-5 ) ;
17623: LD_EXP 32
17627: PPUSH
17628: LD_STRING DM-Dead-5
17630: PPUSH
17631: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
17635: LD_EXP 30
17639: PPUSH
17640: LD_STRING DH-Dead-6
17642: PPUSH
17643: CALL_OW 88
// end ; DialogueOff ;
17647: CALL_OW 7
// KillUnit ( Kaia ) ;
17651: LD_EXP 35
17655: PPUSH
17656: CALL_OW 66
// end ;
17660: END
// every 0 0$1 trigger tick >= 10 10$20 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
17661: LD_OWVAR 1
17665: PUSH
17666: LD_INT 21700
17668: GREATEREQUAL
17669: PUSH
17670: LD_EXP 5
17674: PUSH
17675: LD_INT 5
17677: GREATER
17678: OR
17679: PUSH
17680: LD_INT 22
17682: PUSH
17683: LD_INT 2
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PUSH
17690: LD_INT 92
17692: PUSH
17693: LD_INT 103
17695: PUSH
17696: LD_INT 81
17698: PUSH
17699: LD_INT 20
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PPUSH
17712: CALL_OW 69
17716: OR
17717: IFFALSE 18124
17719: GO 17721
17721: DISABLE
17722: LD_INT 0
17724: PPUSH
17725: PPUSH
17726: PPUSH
// begin PrepareRolfSquad ;
17727: CALL 2376 0 0
// dep := HexInfo ( 86 , 54 ) ;
17731: LD_ADDR_VAR 0 3
17735: PUSH
17736: LD_INT 86
17738: PPUSH
17739: LD_INT 54
17741: PPUSH
17742: CALL_OW 428
17746: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
17747: LD_VAR 0 3
17751: PPUSH
17752: CALL_OW 274
17756: PPUSH
17757: LD_INT 1
17759: PPUSH
17760: LD_INT 300
17762: PPUSH
17763: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
17767: LD_VAR 0 3
17771: PPUSH
17772: CALL_OW 274
17776: PPUSH
17777: LD_INT 2
17779: PPUSH
17780: LD_INT 300
17782: PPUSH
17783: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
17787: LD_EXP 47
17791: PPUSH
17792: LD_INT 79
17794: PPUSH
17795: LD_INT 52
17797: PPUSH
17798: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
17802: LD_INT 35
17804: PPUSH
17805: CALL_OW 67
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
17809: LD_INT 12
17811: PPUSH
17812: LD_INT 22
17814: PUSH
17815: LD_INT 3
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: LD_INT 21
17824: PUSH
17825: LD_INT 1
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: PPUSH
17836: CALL_OW 70
17840: NOT
17841: IFFALSE 17802
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
17843: LD_ADDR_VAR 0 2
17847: PUSH
17848: LD_INT 12
17850: PPUSH
17851: LD_INT 21
17853: PUSH
17854: LD_INT 3
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PPUSH
17861: CALL_OW 70
17865: ST_TO_ADDR
// for i in tmp do
17866: LD_ADDR_VAR 0 1
17870: PUSH
17871: LD_VAR 0 2
17875: PUSH
17876: FOR_IN
17877: IFFALSE 17893
// SetSide ( i , 8 ) ;
17879: LD_VAR 0 1
17883: PPUSH
17884: LD_INT 8
17886: PPUSH
17887: CALL_OW 235
17891: GO 17876
17893: POP
17894: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
17895: LD_INT 63
17897: PPUSH
17898: LD_INT 42
17900: PPUSH
17901: CALL_OW 428
17905: PPUSH
17906: LD_INT 320
17908: PPUSH
17909: CALL_OW 234
// wait ( 0 0$10 ) ;
17913: LD_INT 350
17915: PPUSH
17916: CALL_OW 67
// DialogueOn ;
17920: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
17924: LD_INT 8
17926: PPUSH
17927: LD_INT 2
17929: PPUSH
17930: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
17934: LD_INT 86
17936: PPUSH
17937: LD_INT 54
17939: PPUSH
17940: CALL_OW 428
17944: PPUSH
17945: LD_STRING antwerp
17947: PPUSH
17948: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
17952: LD_EXP 43
17956: PPUSH
17957: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
17961: LD_EXP 43
17965: PPUSH
17966: LD_STRING DRf-rast-1
17968: PPUSH
17969: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
17973: LD_EXP 30
17977: PPUSH
17978: LD_STRING DH-rast-2
17980: PPUSH
17981: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
17985: LD_EXP 43
17989: PPUSH
17990: LD_STRING DRf-rast-3
17992: PPUSH
17993: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
17997: LD_EXP 43
18001: PPUSH
18002: LD_STRING DRf-rast-4
18004: PPUSH
18005: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
18009: LD_EXP 43
18013: PPUSH
18014: LD_STRING DRf-rast-5
18016: PPUSH
18017: CALL_OW 94
// if IsOk ( Aviradze ) then
18021: LD_EXP 42
18025: PPUSH
18026: CALL_OW 302
18030: IFFALSE 18089
// begin CenterNowOnUnits ( Aviradze ) ;
18032: LD_EXP 42
18036: PPUSH
18037: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
18041: LD_EXP 42
18045: PPUSH
18046: LD_STRING DA-rast-6
18048: PPUSH
18049: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
18053: LD_EXP 30
18057: PPUSH
18058: LD_STRING DH-rast-7
18060: PPUSH
18061: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
18065: LD_EXP 31
18069: PPUSH
18070: LD_STRING DG-rast-8
18072: PPUSH
18073: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
18077: LD_EXP 31
18081: PPUSH
18082: LD_STRING DG-rast-9
18084: PPUSH
18085: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
18089: LD_EXP 30
18093: PPUSH
18094: LD_STRING DH-rast-10
18096: PPUSH
18097: CALL_OW 88
// DialogueOff ;
18101: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18105: LD_STRING M2
18107: PPUSH
18108: CALL_OW 337
// bergkampfArrived := true ;
18112: LD_ADDR_EXP 3
18116: PUSH
18117: LD_INT 1
18119: ST_TO_ADDR
// PrepareRolfBase ;
18120: CALL 2707 0 0
// end ;
18124: PPOPN 3
18126: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) and canRolfJoin do var i ;
18127: LD_INT 12
18129: PPUSH
18130: LD_INT 22
18132: PUSH
18133: LD_INT 2
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PPUSH
18140: CALL_OW 70
18144: PUSH
18145: LD_EXP 43
18149: PPUSH
18150: CALL_OW 302
18154: AND
18155: PUSH
18156: LD_EXP 29
18160: AND
18161: IFFALSE 18721
18163: GO 18165
18165: DISABLE
18166: LD_INT 0
18168: PPUSH
// begin rolfScriptBase := false ;
18169: LD_ADDR_EXP 9
18173: PUSH
18174: LD_INT 0
18176: ST_TO_ADDR
// DialogueOn ;
18177: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
18181: LD_EXP 43
18185: PPUSH
18186: CALL_OW 87
// if rolfSquad >= 10 then
18190: LD_EXP 47
18194: PUSH
18195: LD_INT 10
18197: GREATEREQUAL
18198: IFFALSE 18377
// begin linkedWithRolf := 2 ;
18200: LD_ADDR_EXP 12
18204: PUSH
18205: LD_INT 2
18207: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
18208: LD_EXP 43
18212: PPUSH
18213: LD_STRING DRf-rast-11
18215: PPUSH
18216: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
18220: LD_EXP 30
18224: PPUSH
18225: LD_STRING DH-rast-12
18227: PPUSH
18228: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
18232: LD_EXP 43
18236: PPUSH
18237: LD_STRING DRf-rast-13
18239: PPUSH
18240: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
18244: LD_EXP 30
18248: PPUSH
18249: LD_STRING DH-rast-14
18251: PPUSH
18252: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
18256: LD_EXP 43
18260: PPUSH
18261: LD_STRING DRf-rast-15
18263: PPUSH
18264: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
18268: LD_EXP 30
18272: PPUSH
18273: LD_STRING DH-rast-16
18275: PPUSH
18276: CALL_OW 88
// if IsOk ( Mike ) then
18280: LD_EXP 32
18284: PPUSH
18285: CALL_OW 302
18289: IFFALSE 18363
// begin Say ( Mike , DM-rast-17 ) ;
18291: LD_EXP 32
18295: PPUSH
18296: LD_STRING DM-rast-17
18298: PPUSH
18299: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
18303: LD_EXP 30
18307: PPUSH
18308: LD_STRING DH-rast-18
18310: PPUSH
18311: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
18315: LD_EXP 32
18319: PPUSH
18320: LD_STRING DM-rast-19
18322: PPUSH
18323: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
18327: LD_EXP 30
18331: PPUSH
18332: LD_STRING DH-rast-20
18334: PPUSH
18335: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
18339: LD_EXP 32
18343: PPUSH
18344: LD_STRING DM-rast-21
18346: PPUSH
18347: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
18351: LD_EXP 30
18355: PPUSH
18356: LD_STRING DH-rast-22
18358: PPUSH
18359: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
18363: LD_EXP 30
18367: PPUSH
18368: LD_STRING DH-rast-23
18370: PPUSH
18371: CALL_OW 88
// end else
18375: GO 18527
// begin linkedWithRolf := 1 ;
18377: LD_ADDR_EXP 12
18381: PUSH
18382: LD_INT 1
18384: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
18385: LD_EXP 43
18389: PPUSH
18390: LD_STRING DRf-rast-a-11
18392: PPUSH
18393: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
18397: LD_EXP 30
18401: PPUSH
18402: LD_STRING DH-rast-a-12
18404: PPUSH
18405: CALL_OW 88
// if IsOk ( Kurt ) then
18409: LD_EXP 41
18413: PPUSH
18414: CALL_OW 302
18418: IFFALSE 18515
// begin Say ( Kurt , DKs-rast-a-13 ) ;
18420: LD_EXP 41
18424: PPUSH
18425: LD_STRING DKs-rast-a-13
18427: PPUSH
18428: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
18432: LD_EXP 43
18436: PPUSH
18437: LD_STRING DRf-rast-a-14
18439: PPUSH
18440: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
18444: LD_EXP 43
18448: PPUSH
18449: LD_STRING DRf-rast-a-15
18451: PPUSH
18452: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
18456: LD_EXP 41
18460: PPUSH
18461: LD_STRING DKs-rast-a-16
18463: PPUSH
18464: CALL_OW 88
// if IsOk ( Givi ) then
18468: LD_EXP 31
18472: PPUSH
18473: CALL_OW 302
18477: IFFALSE 18515
// begin Say ( Givi , DG-rast-a-17 ) ;
18479: LD_EXP 31
18483: PPUSH
18484: LD_STRING DG-rast-a-17
18486: PPUSH
18487: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
18491: LD_EXP 31
18495: PPUSH
18496: LD_STRING DG-rast-a-18
18498: PPUSH
18499: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
18503: LD_EXP 41
18507: PPUSH
18508: LD_STRING DKs-rast-a-19
18510: PPUSH
18511: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
18515: LD_EXP 30
18519: PPUSH
18520: LD_STRING DH-rast-a-20
18522: PPUSH
18523: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
18527: LD_EXP 43
18531: PPUSH
18532: LD_STRING DRf-rast-24
18534: PPUSH
18535: CALL_OW 88
// if IsOk ( Aviradze ) then
18539: LD_EXP 42
18543: PPUSH
18544: CALL_OW 302
18548: IFFALSE 18648
// begin Say ( Aviradze , DA-rast-25 ) ;
18550: LD_EXP 42
18554: PPUSH
18555: LD_STRING DA-rast-25
18557: PPUSH
18558: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
18562: LD_EXP 30
18566: PPUSH
18567: LD_STRING DH-rast-26
18569: PPUSH
18570: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
18574: LD_EXP 42
18578: PPUSH
18579: LD_STRING DA-rast-27
18581: PPUSH
18582: CALL_OW 88
// if IsOk ( Markov ) then
18586: LD_EXP 37
18590: PPUSH
18591: CALL_OW 302
18595: IFFALSE 18623
// begin Say ( Markov , DMar-rast-28 ) ;
18597: LD_EXP 37
18601: PPUSH
18602: LD_STRING DMar-rast-28
18604: PPUSH
18605: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
18609: LD_EXP 37
18613: PPUSH
18614: LD_STRING DMar-rast-29
18616: PPUSH
18617: CALL_OW 88
// end else
18621: GO 18646
// if IsOk ( Sophia ) then
18623: LD_EXP 36
18627: PPUSH
18628: CALL_OW 302
18632: IFFALSE 18646
// begin Say ( Sophia , DS-rast-28 ) ;
18634: LD_EXP 36
18638: PPUSH
18639: LD_STRING DS-rast-28
18641: PPUSH
18642: CALL_OW 88
// end ; end else
18646: GO 18671
// if IsOk ( Sophia ) then
18648: LD_EXP 36
18652: PPUSH
18653: CALL_OW 302
18657: IFFALSE 18671
// Say ( Sophia , DS-rast-29 ) ;
18659: LD_EXP 36
18663: PPUSH
18664: LD_STRING DS-rast-29
18666: PPUSH
18667: CALL_OW 88
// DialogueOff ;
18671: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
18675: LD_STRING M3
18677: PPUSH
18678: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
18682: LD_ADDR_VAR 0 1
18686: PUSH
18687: LD_INT 22
18689: PUSH
18690: LD_INT 8
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: PPUSH
18697: CALL_OW 69
18701: PUSH
18702: FOR_IN
18703: IFFALSE 18719
// SetSide ( i , 2 ) ;
18705: LD_VAR 0 1
18709: PPUSH
18710: LD_INT 2
18712: PPUSH
18713: CALL_OW 235
18717: GO 18702
18719: POP
18720: POP
// end ;
18721: PPOPN 1
18723: END
// every 0 0$1 trigger omarAttack and not linkedWithRolf and canRolfJoin do var i ;
18724: LD_EXP 23
18728: PUSH
18729: LD_EXP 12
18733: NOT
18734: AND
18735: PUSH
18736: LD_EXP 29
18740: AND
18741: IFFALSE 18832
18743: GO 18745
18745: DISABLE
18746: LD_INT 0
18748: PPUSH
// begin canRolfJoin := false ;
18749: LD_ADDR_EXP 29
18753: PUSH
18754: LD_INT 0
18756: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
18757: LD_STRING M3
18759: PPUSH
18760: CALL_OW 337
// for i in rolfSquad do
18764: LD_ADDR_VAR 0 1
18768: PUSH
18769: LD_EXP 47
18773: PUSH
18774: FOR_IN
18775: IFFALSE 18830
// begin ComExit ( i ) ;
18777: LD_VAR 0 1
18781: PPUSH
18782: CALL 62519 0 1
// AddComAgressiveMove ( i , 147 , 162 ) ;
18786: LD_VAR 0 1
18790: PPUSH
18791: LD_INT 147
18793: PPUSH
18794: LD_INT 162
18796: PPUSH
18797: CALL_OW 174
// AddComWait ( i , 0 0$30 ) ;
18801: LD_VAR 0 1
18805: PPUSH
18806: LD_INT 1050
18808: PPUSH
18809: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 162 ) ;
18813: LD_VAR 0 1
18817: PPUSH
18818: LD_INT 103
18820: PPUSH
18821: LD_INT 162
18823: PPUSH
18824: CALL_OW 174
// end ;
18828: GO 18774
18830: POP
18831: POP
// end ;
18832: PPOPN 1
18834: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf and canRolfJoin do var random ;
18835: LD_EXP 3
18839: PUSH
18840: LD_EXP 43
18844: PPUSH
18845: CALL_OW 256
18849: PUSH
18850: LD_INT 400
18852: LESS
18853: AND
18854: PUSH
18855: LD_EXP 12
18859: NOT
18860: AND
18861: PUSH
18862: LD_EXP 29
18866: AND
18867: IFFALSE 19141
18869: GO 18871
18871: DISABLE
18872: LD_INT 0
18874: PPUSH
// begin DialogueOn ;
18875: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
18879: LD_EXP 43
18883: PPUSH
18884: LD_STRING DRf-rast-f-11
18886: PPUSH
18887: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
18891: LD_EXP 43
18895: PPUSH
18896: LD_STRING DRf-rast-f-12
18898: PPUSH
18899: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
18903: LD_EXP 43
18907: PPUSH
18908: LD_STRING DRf-rast-f-13
18910: PPUSH
18911: CALL_OW 94
// DialogueOff ;
18915: CALL_OW 7
// KillUnit ( Rolf ) ;
18919: LD_EXP 43
18923: PPUSH
18924: CALL_OW 66
// wait ( 0 0$1 ) ;
18928: LD_INT 35
18930: PPUSH
18931: CALL_OW 67
// if not IsOk ( Givi ) then
18935: LD_EXP 31
18939: PPUSH
18940: CALL_OW 302
18944: NOT
18945: IFFALSE 18949
// exit ;
18947: GO 19141
// DialogueOn ;
18949: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
18953: LD_EXP 31
18957: PPUSH
18958: LD_STRING DG-rast-f-14
18960: PPUSH
18961: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
18965: LD_EXP 31
18969: PPUSH
18970: LD_STRING DG-rast-f-15
18972: PPUSH
18973: CALL_OW 88
// if IsOk ( Kaia ) then
18977: LD_EXP 35
18981: PPUSH
18982: CALL_OW 302
18986: IFFALSE 19002
// Say ( Kaia , DK-rast-f-16 ) else
18988: LD_EXP 35
18992: PPUSH
18993: LD_STRING DK-rast-f-16
18995: PPUSH
18996: CALL_OW 88
19000: GO 19089
// if heikeSecondSquad then
19002: LD_EXP 45
19006: IFFALSE 19089
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
19008: LD_ADDR_VAR 0 1
19012: PUSH
19013: LD_EXP 45
19017: PUSH
19018: LD_INT 1
19020: PPUSH
19021: LD_EXP 45
19025: PPUSH
19026: CALL_OW 12
19030: ARRAY
19031: ST_TO_ADDR
// case GetSex ( random ) of 1 :
19032: LD_VAR 0 1
19036: PPUSH
19037: CALL_OW 258
19041: PUSH
19042: LD_INT 1
19044: DOUBLE
19045: EQUAL
19046: IFTRUE 19050
19048: GO 19065
19050: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
19051: LD_VAR 0 1
19055: PPUSH
19056: LD_STRING DArm-rast-f-a-16
19058: PPUSH
19059: CALL_OW 88
19063: GO 19089
19065: LD_INT 2
19067: DOUBLE
19068: EQUAL
19069: IFTRUE 19073
19071: GO 19088
19073: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
19074: LD_VAR 0 1
19078: PPUSH
19079: LD_STRING DArf-rast-f-a-16
19081: PPUSH
19082: CALL_OW 88
19086: GO 19089
19088: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
19089: LD_EXP 31
19093: PPUSH
19094: LD_STRING DG-rast-f-17
19096: PPUSH
19097: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
19101: LD_EXP 31
19105: PPUSH
19106: LD_STRING DG-rast-f-18
19108: PPUSH
19109: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
19113: LD_EXP 31
19117: PPUSH
19118: LD_STRING DG-rast-f-19
19120: PPUSH
19121: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
19125: LD_EXP 31
19129: PPUSH
19130: LD_STRING DG-rast-f-20
19132: PPUSH
19133: CALL_OW 88
// DialogueOff ;
19137: CALL_OW 7
// end ;
19141: PPOPN 1
19143: END
// every 0 0$1 trigger SeeArea ( 2 , ruMainBase ) do
19144: LD_INT 2
19146: PPUSH
19147: LD_INT 10
19149: PPUSH
19150: CALL_OW 294
19154: IFFALSE 19227
19156: GO 19158
19158: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
19159: LD_EXP 31
19163: PPUSH
19164: LD_STRING DG-Len-1
19166: PPUSH
19167: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
19171: LD_EXP 41
19175: PPUSH
19176: LD_STRING DKs-Len-2
19178: PPUSH
19179: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
19183: LD_EXP 41
19187: PPUSH
19188: LD_STRING DKs-Len-3
19190: PPUSH
19191: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
19195: LD_EXP 30
19199: PPUSH
19200: LD_STRING DH-Len-4
19202: PPUSH
19203: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
19207: LD_EXP 35
19211: PPUSH
19212: LD_STRING DK-Len-5
19214: PPUSH
19215: CALL_OW 88
// leninSpotted := true ;
19219: LD_ADDR_EXP 14
19223: PUSH
19224: LD_INT 1
19226: ST_TO_ADDR
// end ;
19227: END
// every 0 0$1 trigger ( bergkampfArrived and tick > 17 17$00 ) or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 322 , 215 , 20 ] ] ) do var i ;
19228: LD_EXP 3
19232: PUSH
19233: LD_OWVAR 1
19237: PUSH
19238: LD_INT 35700
19240: GREATER
19241: AND
19242: PUSH
19243: LD_INT 22
19245: PUSH
19246: LD_INT 2
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: LD_INT 92
19255: PUSH
19256: LD_INT 322
19258: PUSH
19259: LD_INT 215
19261: PUSH
19262: LD_INT 20
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PPUSH
19275: CALL_OW 69
19279: OR
19280: IFFALSE 19643
19282: GO 19284
19284: DISABLE
19285: LD_INT 0
19287: PPUSH
// begin PrepareOmarSquad ;
19288: CALL 3989 0 0
// repeat wait ( 0 0$1 ) ;
19292: LD_INT 35
19294: PPUSH
19295: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
19299: LD_INT 14
19301: PPUSH
19302: LD_INT 22
19304: PUSH
19305: LD_INT 3
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: LD_INT 2
19314: PUSH
19315: LD_INT 21
19317: PUSH
19318: LD_INT 1
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: LD_INT 59
19327: PUSH
19328: EMPTY
19329: LIST
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: LIST
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PPUSH
19340: CALL_OW 70
19344: NOT
19345: IFFALSE 19292
// for i in omarSquad do
19347: LD_ADDR_VAR 0 1
19351: PUSH
19352: LD_EXP 48
19356: PUSH
19357: FOR_IN
19358: IFFALSE 19389
// if GetLives ( i ) < 750 then
19360: LD_VAR 0 1
19364: PPUSH
19365: CALL_OW 256
19369: PUSH
19370: LD_INT 750
19372: LESS
19373: IFFALSE 19387
// SetLives ( i , 1000 ) ;
19375: LD_VAR 0 1
19379: PPUSH
19380: LD_INT 1000
19382: PPUSH
19383: CALL_OW 234
19387: GO 19357
19389: POP
19390: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
19391: LD_ADDR_VAR 0 1
19395: PUSH
19396: LD_INT 14
19398: PPUSH
19399: LD_INT 21
19401: PUSH
19402: LD_INT 3
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PPUSH
19409: CALL_OW 70
19413: PUSH
19414: FOR_IN
19415: IFFALSE 19431
// SetSide ( i , 5 ) ;
19417: LD_VAR 0 1
19421: PPUSH
19422: LD_INT 5
19424: PPUSH
19425: CALL_OW 235
19429: GO 19414
19431: POP
19432: POP
// wait ( 0 0$3 ) ;
19433: LD_INT 105
19435: PPUSH
19436: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
19440: LD_INT 5
19442: PPUSH
19443: LD_INT 2
19445: PPUSH
19446: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
19450: LD_EXP 40
19454: PPUSH
19455: CALL_OW 87
// DialogueOn ;
19459: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-1 ) ;
19463: LD_EXP 40
19467: PPUSH
19468: LD_STRING DOm-Veh-1
19470: PPUSH
19471: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
19475: LD_EXP 40
19479: PPUSH
19480: LD_STRING DOm-Veh-2
19482: PPUSH
19483: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
19487: LD_EXP 40
19491: PPUSH
19492: LD_STRING DOm-Veh-3
19494: PPUSH
19495: CALL_OW 94
// if mortarConstructed then
19499: LD_EXP 15
19503: IFFALSE 19517
// SayRadio ( Omar , DOm-Veh-4 ) ;
19505: LD_EXP 40
19509: PPUSH
19510: LD_STRING DOm-Veh-4
19512: PPUSH
19513: CALL_OW 94
// Say ( Heike , DH-Veh-5 ) ;
19517: LD_EXP 30
19521: PPUSH
19522: LD_STRING DH-Veh-5
19524: PPUSH
19525: CALL_OW 88
// if IsOk ( Kurt ) then
19529: LD_EXP 41
19533: PPUSH
19534: CALL_OW 302
19538: IFFALSE 19588
// begin Say ( Kurt , DKs-Veh-6 ) ;
19540: LD_EXP 41
19544: PPUSH
19545: LD_STRING DKs-Veh-6
19547: PPUSH
19548: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
19552: LD_EXP 41
19556: PPUSH
19557: LD_STRING DKs-Veh-7
19559: PPUSH
19560: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
19564: LD_EXP 31
19568: PPUSH
19569: LD_STRING DG-Veh-8
19571: PPUSH
19572: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
19576: LD_EXP 32
19580: PPUSH
19581: LD_STRING DM-Veh-9
19583: PPUSH
19584: CALL_OW 88
// end ; DialogueOff ;
19588: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
19592: LD_STRING M4
19594: PPUSH
19595: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
19599: LD_EXP 40
19603: PPUSH
19604: LD_INT 341
19606: PPUSH
19607: LD_INT 232
19609: PPUSH
19610: CALL_OW 428
19614: PPUSH
19615: CALL_OW 120
// omarArrived := true ;
19619: LD_ADDR_EXP 6
19623: PUSH
19624: LD_INT 1
19626: ST_TO_ADDR
// omarScriptBase := true ;
19627: LD_ADDR_EXP 10
19631: PUSH
19632: LD_INT 1
19634: ST_TO_ADDR
// omarWantVehicles := true ;
19635: LD_ADDR_EXP 18
19639: PUSH
19640: LD_INT 1
19642: ST_TO_ADDR
// end ;
19643: PPOPN 1
19645: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
19646: LD_EXP 43
19650: PPUSH
19651: CALL_OW 302
19655: PUSH
19656: LD_EXP 12
19660: AND
19661: PUSH
19662: LD_EXP 6
19666: AND
19667: IFFALSE 19771
19669: GO 19671
19671: DISABLE
// begin wait ( 0 0$20 ) ;
19672: LD_INT 700
19674: PPUSH
19675: CALL_OW 67
// CenterNowOnUnits ( Rolf ) ;
19679: LD_EXP 43
19683: PPUSH
19684: CALL_OW 87
// DialogueOn ;
19688: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
19692: LD_EXP 43
19696: PPUSH
19697: LD_STRING DRf-Veh-10
19699: PPUSH
19700: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
19704: LD_EXP 43
19708: PPUSH
19709: LD_STRING DRf-Veh-11
19711: PPUSH
19712: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
19716: LD_EXP 30
19720: PPUSH
19721: LD_STRING DH-Veh-12
19723: PPUSH
19724: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
19728: LD_EXP 30
19732: PPUSH
19733: LD_STRING DH-Veh-13
19735: PPUSH
19736: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
19740: LD_EXP 43
19744: PPUSH
19745: LD_STRING DRf-Veh-14
19747: PPUSH
19748: CALL_OW 88
// DialogueOff ;
19752: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
19756: LD_STRING M5
19758: PPUSH
19759: CALL_OW 337
// rolfWantVehicles := true ;
19763: LD_ADDR_EXP 17
19767: PUSH
19768: LD_INT 1
19770: ST_TO_ADDR
// end ;
19771: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
19772: LD_EXP 18
19776: IFFALSE 20475
19778: GO 19780
19780: DISABLE
19781: LD_INT 0
19783: PPUSH
19784: PPUSH
19785: PPUSH
19786: PPUSH
19787: PPUSH
19788: PPUSH
// begin wait ( 0 0$3 ) ;
19789: LD_INT 105
19791: PPUSH
19792: CALL_OW 67
// Hint ( OmarVehicles ) ;
19796: LD_STRING OmarVehicles
19798: PPUSH
19799: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
19803: LD_INT 16
19805: PPUSH
19806: LD_INT 1
19808: PPUSH
19809: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
19813: LD_INT 35
19815: PPUSH
19816: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
19820: LD_ADDR_EXP 20
19824: PUSH
19825: LD_EXP 20
19829: PUSH
19830: LD_INT 35
19832: MINUS
19833: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
19834: LD_EXP 20
19838: PUSH
19839: LD_INT 0
19841: LESSEQUAL
19842: IFFALSE 19942
// begin display_strings := [ ] ;
19844: LD_ADDR_OWVAR 47
19848: PUSH
19849: EMPTY
19850: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
19851: LD_STRING M4a
19853: PPUSH
19854: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
19858: LD_INT 16
19860: PPUSH
19861: LD_INT 0
19863: PPUSH
19864: CALL_OW 424
// DialogueOn ;
19868: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
19872: LD_EXP 40
19876: PPUSH
19877: LD_STRING DOm-Veh-b-15
19879: PPUSH
19880: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
19884: LD_EXP 30
19888: PPUSH
19889: LD_STRING DH-Veh-b-16
19891: PPUSH
19892: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
19896: LD_EXP 40
19900: PPUSH
19901: LD_STRING DOm-Veh-b-17
19903: PPUSH
19904: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
19908: LD_EXP 35
19912: PPUSH
19913: LD_STRING DK-Veh-b-18
19915: PPUSH
19916: CALL_OW 88
// DialogueOff ;
19920: CALL_OW 7
// omarAttack := true ;
19924: LD_ADDR_EXP 23
19928: PUSH
19929: LD_INT 1
19931: ST_TO_ADDR
// omarScriptBase := false ;
19932: LD_ADDR_EXP 10
19936: PUSH
19937: LD_INT 0
19939: ST_TO_ADDR
// exit ;
19940: GO 20475
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
19942: LD_EXP 21
19946: PUSH
19947: LD_INT 16
19949: PPUSH
19950: LD_INT 22
19952: PUSH
19953: LD_INT 2
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: LD_INT 21
19962: PUSH
19963: LD_INT 2
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PUSH
19970: LD_INT 33
19972: PUSH
19973: LD_INT 1
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 58
19982: PUSH
19983: EMPTY
19984: LIST
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: PPUSH
19992: CALL_OW 70
19996: LESSEQUAL
19997: IFFALSE 19813
// omarWaitingForVehiclesTimer := 0 0$00 ;
19999: LD_ADDR_EXP 20
20003: PUSH
20004: LD_INT 0
20006: ST_TO_ADDR
// display_strings := [ ] ;
20007: LD_ADDR_OWVAR 47
20011: PUSH
20012: EMPTY
20013: ST_TO_ADDR
// DialogueOn ;
20014: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
20018: LD_EXP 40
20022: PPUSH
20023: LD_STRING DOm-Veh-a-15
20025: PPUSH
20026: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
20030: LD_EXP 35
20034: PPUSH
20035: LD_STRING DK-Veh-a-16
20037: PPUSH
20038: CALL_OW 88
// DialogueOff ;
20042: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
20046: LD_STRING M4a
20048: PPUSH
20049: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
20053: LD_INT 16
20055: PPUSH
20056: LD_INT 0
20058: PPUSH
20059: CALL_OW 424
// omarHasVehicles := true ;
20063: LD_ADDR_EXP 22
20067: PUSH
20068: LD_INT 1
20070: ST_TO_ADDR
// wait ( 1 1$00 ) ;
20071: LD_INT 2100
20073: PPUSH
20074: CALL_OW 67
// omarAttack := true ;
20078: LD_ADDR_EXP 23
20082: PUSH
20083: LD_INT 1
20085: ST_TO_ADDR
// omarScriptBase := false ;
20086: LD_ADDR_EXP 10
20090: PUSH
20091: LD_INT 0
20093: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
20094: LD_ADDR_VAR 0 2
20098: PUSH
20099: LD_INT 16
20101: PPUSH
20102: LD_INT 22
20104: PUSH
20105: LD_INT 2
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 21
20114: PUSH
20115: LD_INT 2
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: PUSH
20122: LD_INT 33
20124: PUSH
20125: LD_INT 1
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 58
20134: PUSH
20135: EMPTY
20136: LIST
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: PPUSH
20144: CALL_OW 70
20148: ST_TO_ADDR
// for i in tmp do
20149: LD_ADDR_VAR 0 1
20153: PUSH
20154: LD_VAR 0 2
20158: PUSH
20159: FOR_IN
20160: IFFALSE 20188
// begin SetFuel ( i , 100 ) ;
20162: LD_VAR 0 1
20166: PPUSH
20167: LD_INT 100
20169: PPUSH
20170: CALL_OW 240
// SetSide ( i , 5 ) ;
20174: LD_VAR 0 1
20178: PPUSH
20179: LD_INT 5
20181: PPUSH
20182: CALL_OW 235
// end ;
20186: GO 20159
20188: POP
20189: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
20190: LD_ADDR_VAR 0 3
20194: PUSH
20195: LD_EXP 48
20199: PPUSH
20200: LD_INT 25
20202: PUSH
20203: LD_INT 2
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PPUSH
20210: CALL_OW 72
20214: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
20215: LD_ADDR_VAR 0 4
20219: PUSH
20220: LD_EXP 48
20224: PPUSH
20225: LD_INT 3
20227: PUSH
20228: LD_INT 55
20230: PUSH
20231: EMPTY
20232: LIST
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: LD_INT 25
20240: PUSH
20241: LD_INT 3
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PPUSH
20252: CALL_OW 72
20256: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
20257: LD_ADDR_VAR 0 5
20261: PUSH
20262: LD_INT 324
20264: PPUSH
20265: LD_INT 234
20267: PPUSH
20268: CALL_OW 428
20272: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
20273: LD_ADDR_VAR 0 6
20277: PUSH
20278: LD_INT 334
20280: PPUSH
20281: LD_INT 241
20283: PPUSH
20284: CALL_OW 428
20288: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
20289: LD_VAR 0 6
20293: PPUSH
20294: CALL_OW 313
20298: PPUSH
20299: CALL_OW 122
// if eng then
20303: LD_VAR 0 3
20307: IFFALSE 20415
// begin if eng + mech <= tmp then
20309: LD_VAR 0 3
20313: PUSH
20314: LD_VAR 0 4
20318: PLUS
20319: PUSH
20320: LD_VAR 0 2
20324: LESSEQUAL
20325: IFFALSE 20380
// begin ComEnterUnit ( eng , workshop ) ;
20327: LD_VAR 0 3
20331: PPUSH
20332: LD_VAR 0 5
20336: PPUSH
20337: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
20341: LD_VAR 0 3
20345: PPUSH
20346: LD_INT 3
20348: PPUSH
20349: CALL_OW 183
// AddComExitBuilding ( eng ) ;
20353: LD_VAR 0 3
20357: PPUSH
20358: CALL_OW 182
// mech := mech union eng ;
20362: LD_ADDR_VAR 0 4
20366: PUSH
20367: LD_VAR 0 4
20371: PUSH
20372: LD_VAR 0 3
20376: UNION
20377: ST_TO_ADDR
// end else
20378: GO 20415
// begin ComEnterUnit ( eng , armoury ) ;
20380: LD_VAR 0 3
20384: PPUSH
20385: LD_VAR 0 6
20389: PPUSH
20390: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
20394: LD_VAR 0 3
20398: PPUSH
20399: LD_INT 1
20401: PPUSH
20402: CALL_OW 183
// AddComExitBuilding ( eng ) ;
20406: LD_VAR 0 3
20410: PPUSH
20411: CALL_OW 182
// end ; end ; for i := 1 to tmp do
20415: LD_ADDR_VAR 0 1
20419: PUSH
20420: DOUBLE
20421: LD_INT 1
20423: DEC
20424: ST_TO_ADDR
20425: LD_VAR 0 2
20429: PUSH
20430: FOR_TO
20431: IFFALSE 20473
// if i <= mech then
20433: LD_VAR 0 1
20437: PUSH
20438: LD_VAR 0 4
20442: LESSEQUAL
20443: IFFALSE 20471
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
20445: LD_VAR 0 4
20449: PUSH
20450: LD_VAR 0 1
20454: ARRAY
20455: PPUSH
20456: LD_VAR 0 2
20460: PUSH
20461: LD_VAR 0 1
20465: ARRAY
20466: PPUSH
20467: CALL_OW 180
20471: GO 20430
20473: POP
20474: POP
// end ;
20475: PPOPN 6
20477: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i ;
20478: LD_EXP 43
20482: PPUSH
20483: CALL_OW 302
20487: PUSH
20488: LD_EXP 17
20492: AND
20493: IFFALSE 20949
20495: GO 20497
20497: DISABLE
20498: LD_INT 0
20500: PPUSH
// begin repeat wait ( 0 0$1 ) ;
20501: LD_INT 35
20503: PPUSH
20504: CALL_OW 67
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
20508: LD_ADDR_EXP 19
20512: PUSH
20513: LD_EXP 19
20517: PUSH
20518: LD_INT 35
20520: MINUS
20521: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 or omarAttack then
20522: LD_EXP 19
20526: PUSH
20527: LD_INT 0
20529: LESSEQUAL
20530: PUSH
20531: LD_EXP 23
20535: OR
20536: IFFALSE 20754
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
20538: LD_ADDR_EXP 19
20542: PUSH
20543: LD_INT 0
20545: ST_TO_ADDR
// display_strings := [ ] ;
20546: LD_ADDR_OWVAR 47
20550: PUSH
20551: EMPTY
20552: ST_TO_ADDR
// DialogueOn ;
20553: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
20557: LD_EXP 43
20561: PPUSH
20562: LD_STRING DRf-Veh-b-19
20564: PPUSH
20565: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
20569: LD_EXP 43
20573: PPUSH
20574: LD_STRING DRf-Veh-b-20
20576: PPUSH
20577: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
20581: LD_EXP 30
20585: PPUSH
20586: LD_STRING DH-Veh-b-21
20588: PPUSH
20589: CALL_OW 88
// if IsOk ( Givi ) then
20593: LD_EXP 31
20597: PPUSH
20598: CALL_OW 302
20602: IFFALSE 20640
// begin Say ( Givi , DG-Veh-b-22 ) ;
20604: LD_EXP 31
20608: PPUSH
20609: LD_STRING DG-Veh-b-22
20611: PPUSH
20612: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
20616: LD_EXP 30
20620: PPUSH
20621: LD_STRING DH-Veh-b-23
20623: PPUSH
20624: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
20628: LD_EXP 31
20632: PPUSH
20633: LD_STRING DG-Veh-b-24
20635: PPUSH
20636: CALL_OW 88
// end ; DialogueOff ;
20640: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
20644: LD_STRING M5a
20646: PPUSH
20647: CALL_OW 337
// for i in rolfSquad do
20651: LD_ADDR_VAR 0 1
20655: PUSH
20656: LD_EXP 47
20660: PUSH
20661: FOR_IN
20662: IFFALSE 20728
// begin SetSide ( i , 8 ) ;
20664: LD_VAR 0 1
20668: PPUSH
20669: LD_INT 8
20671: PPUSH
20672: CALL_OW 235
// if IsDriver ( i ) then
20676: LD_VAR 0 1
20680: PPUSH
20681: CALL 59740 0 1
20685: IFFALSE 20706
// SetSide ( IsInUnit ( i ) , 8 ) else
20687: LD_VAR 0 1
20691: PPUSH
20692: CALL_OW 310
20696: PPUSH
20697: LD_INT 8
20699: PPUSH
20700: CALL_OW 235
20704: GO 20726
// if IsInUnit ( i ) then
20706: LD_VAR 0 1
20710: PPUSH
20711: CALL_OW 310
20715: IFFALSE 20726
// ComExitBuilding ( i ) ;
20717: LD_VAR 0 1
20721: PPUSH
20722: CALL_OW 122
// end ;
20726: GO 20661
20728: POP
20729: POP
// wait ( 0 0$1 ) ;
20730: LD_INT 35
20732: PPUSH
20733: CALL_OW 67
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
20737: LD_EXP 47
20741: PPUSH
20742: LD_INT 229
20744: PPUSH
20745: LD_INT 154
20747: PPUSH
20748: CALL_OW 114
// exit ;
20752: GO 20949
// end ; if IsDead ( Rolf ) then
20754: LD_EXP 43
20758: PPUSH
20759: CALL_OW 301
20763: IFFALSE 20774
// begin ChangeMissionObjectives ( M5a ) ;
20765: LD_STRING M5a
20767: PPUSH
20768: CALL_OW 337
// exit ;
20772: GO 20949
// end ; until UnitFilter ( rolfSquad , [ f_driving ] ) + 0 = rolfSquad + 0 ;
20774: LD_EXP 47
20778: PPUSH
20779: LD_INT 55
20781: PUSH
20782: EMPTY
20783: LIST
20784: PPUSH
20785: CALL_OW 72
20789: PUSH
20790: LD_INT 0
20792: PLUS
20793: PUSH
20794: LD_EXP 47
20798: PUSH
20799: LD_INT 0
20801: PLUS
20802: EQUAL
20803: IFFALSE 20501
// rolfWaitingForVehiclesTimer := 0 0$00 ;
20805: LD_ADDR_EXP 19
20809: PUSH
20810: LD_INT 0
20812: ST_TO_ADDR
// display_strings := [ ] ;
20813: LD_ADDR_OWVAR 47
20817: PUSH
20818: EMPTY
20819: ST_TO_ADDR
// DialogueOn ;
20820: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
20824: LD_EXP 43
20828: PPUSH
20829: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
20833: LD_EXP 43
20837: PPUSH
20838: LD_STRING DRf-Veh-a-17
20840: PPUSH
20841: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
20845: LD_EXP 30
20849: PPUSH
20850: LD_STRING DH-08-Veh-a-18
20852: PPUSH
20853: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
20857: LD_EXP 43
20861: PPUSH
20862: LD_STRING DRf-Veh-a-19
20864: PPUSH
20865: CALL_OW 88
// DialogueOff ;
20869: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
20873: LD_STRING M5a
20875: PPUSH
20876: CALL_OW 337
// rolfHasVehicles := true ;
20880: LD_ADDR_EXP 16
20884: PUSH
20885: LD_INT 1
20887: ST_TO_ADDR
// for i in rolfSquad do
20888: LD_ADDR_VAR 0 1
20892: PUSH
20893: LD_EXP 47
20897: PUSH
20898: FOR_IN
20899: IFFALSE 20932
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
20901: LD_VAR 0 1
20905: PPUSH
20906: CALL_OW 310
20910: PPUSH
20911: LD_INT 8
20913: PPUSH
20914: CALL_OW 235
// SetSide ( i , 8 ) ;
20918: LD_VAR 0 1
20922: PPUSH
20923: LD_INT 8
20925: PPUSH
20926: CALL_OW 235
// end ;
20930: GO 20898
20932: POP
20933: POP
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
20934: LD_EXP 47
20938: PPUSH
20939: LD_INT 229
20941: PPUSH
20942: LD_INT 154
20944: PPUSH
20945: CALL_OW 114
// end ;
20949: PPOPN 1
20951: END
// every 0 0$1 trigger leninSpotted do
20952: LD_EXP 14
20956: IFFALSE 21044
20958: GO 20960
20960: DISABLE
// begin wait ( 0 0$10 ) ;
20961: LD_INT 350
20963: PPUSH
20964: CALL_OW 67
// DialogueOn ;
20968: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
20972: LD_EXP 42
20976: PPUSH
20977: LD_STRING DA-Transmission-1
20979: PPUSH
20980: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
20984: LD_EXP 49
20988: PPUSH
20989: LD_STRING DMzw-Transmission-2
20991: PPUSH
20992: CALL_OW 94
// if gaidarKilled then
20996: LD_EXP 7
21000: IFFALSE 21016
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
21002: LD_EXP 49
21006: PPUSH
21007: LD_STRING DMzw-Transmission-3
21009: PPUSH
21010: CALL_OW 94
21014: GO 21028
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
21016: LD_EXP 49
21020: PPUSH
21021: LD_STRING DMzw-Transmission-a-3
21023: PPUSH
21024: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
21028: LD_EXP 30
21032: PPUSH
21033: LD_STRING DH-Transmission-4
21035: PPUSH
21036: CALL_OW 88
// DialogueOff ;
21040: CALL_OW 7
// end ;
21044: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
21045: LD_INT 22
21047: PUSH
21048: LD_INT 3
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: LD_INT 25
21057: PUSH
21058: LD_INT 9
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PUSH
21065: LD_INT 101
21067: PUSH
21068: LD_INT 2
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: LIST
21079: PPUSH
21080: CALL_OW 69
21084: PUSH
21085: LD_EXP 30
21089: PPUSH
21090: CALL_OW 302
21094: AND
21095: IFFALSE 21160
21097: GO 21099
21099: DISABLE
// begin CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
21100: LD_INT 22
21102: PUSH
21103: LD_INT 3
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 25
21112: PUSH
21113: LD_INT 9
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: LD_INT 101
21122: PUSH
21123: LD_INT 2
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: LIST
21134: PPUSH
21135: CALL_OW 69
21139: PUSH
21140: LD_INT 1
21142: ARRAY
21143: PPUSH
21144: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
21148: LD_EXP 30
21152: PPUSH
21153: LD_STRING DH-Rubazooka-1
21155: PPUSH
21156: CALL_OW 88
// end ;
21160: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
21161: LD_INT 19
21163: PPUSH
21164: LD_INT 22
21166: PUSH
21167: LD_INT 3
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PPUSH
21174: CALL_OW 70
21178: PUSH
21179: LD_EXP 28
21183: AND
21184: IFFALSE 21235
21186: GO 21188
21188: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
21189: LD_INT 19
21191: PPUSH
21192: LD_INT 22
21194: PUSH
21195: LD_INT 3
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PPUSH
21202: CALL_OW 70
21206: PPUSH
21207: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
21211: LD_EXP 30
21215: PPUSH
21216: LD_STRING DH-Ruattfirst-1
21218: PPUSH
21219: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
21223: LD_EXP 30
21227: PPUSH
21228: LD_STRING DH-Ruattfirst-2
21230: PPUSH
21231: CALL_OW 88
// end ;
21235: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
21236: LD_INT 19
21238: PPUSH
21239: LD_INT 22
21241: PUSH
21242: LD_INT 3
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PPUSH
21249: CALL_OW 70
21253: PUSH
21254: LD_EXP 28
21258: NOT
21259: AND
21260: IFFALSE 21299
21262: GO 21264
21264: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
21265: LD_INT 19
21267: PPUSH
21268: LD_INT 22
21270: PUSH
21271: LD_INT 3
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PPUSH
21278: CALL_OW 70
21282: PPUSH
21283: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
21287: LD_EXP 30
21291: PPUSH
21292: LD_STRING DH-Ruattnext-1
21294: PPUSH
21295: CALL_OW 88
// end ;
21299: END
// every 0 0$1 trigger GetResourceType ( GetBase ( arDepot ) , mat_oil ) < 31 and IsOk ( Givi ) do var vehicle , driver , live ;
21300: LD_EXP 44
21304: PPUSH
21305: CALL_OW 274
21309: PPUSH
21310: LD_INT 2
21312: PPUSH
21313: CALL_OW 275
21317: PUSH
21318: LD_INT 31
21320: LESS
21321: PUSH
21322: LD_EXP 31
21326: PPUSH
21327: CALL_OW 302
21331: AND
21332: IFFALSE 21887
21334: GO 21336
21336: DISABLE
21337: LD_INT 0
21339: PPUSH
21340: PPUSH
21341: PPUSH
// begin DialogueOn ;
21342: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
21346: LD_EXP 30
21350: PPUSH
21351: LD_STRING DH-Fuel-1
21353: PPUSH
21354: CALL_OW 88
// Say ( Givi , DG-Fuel-2 ) ;
21358: LD_EXP 31
21362: PPUSH
21363: LD_STRING DG-Fuel-2
21365: PPUSH
21366: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
21370: LD_EXP 31
21374: PPUSH
21375: LD_STRING DG-Fuel-3
21377: PPUSH
21378: CALL_OW 88
// DialogueOff ;
21382: CALL_OW 7
// Query ( Oil ) ;
21386: LD_STRING Oil
21388: PPUSH
21389: CALL_OW 97
// SetAreaMapShow ( oilArea , 1 ) ;
21393: LD_INT 20
21395: PPUSH
21396: LD_INT 1
21398: PPUSH
21399: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
21403: LD_INT 35
21405: PPUSH
21406: CALL_OW 67
// until FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) ;
21410: LD_INT 20
21412: PPUSH
21413: LD_INT 22
21415: PUSH
21416: LD_INT 2
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: LD_INT 33
21425: PUSH
21426: LD_INT 1
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 2
21435: PUSH
21436: LD_INT 34
21438: PUSH
21439: LD_INT 32
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: LD_INT 34
21448: PUSH
21449: LD_INT 51
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: LIST
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: LIST
21465: PPUSH
21466: CALL_OW 70
21470: IFFALSE 21403
// SetAreaMapShow ( oilArea , 0 ) ;
21472: LD_INT 20
21474: PPUSH
21475: LD_INT 0
21477: PPUSH
21478: CALL_OW 424
// vehicle := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) [ 1 ] ;
21482: LD_ADDR_VAR 0 1
21486: PUSH
21487: LD_INT 20
21489: PPUSH
21490: LD_INT 22
21492: PUSH
21493: LD_INT 2
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 33
21502: PUSH
21503: LD_INT 1
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 2
21512: PUSH
21513: LD_INT 34
21515: PUSH
21516: LD_INT 32
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 34
21525: PUSH
21526: LD_INT 51
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: LIST
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: LIST
21542: PPUSH
21543: CALL_OW 70
21547: PUSH
21548: LD_INT 1
21550: ARRAY
21551: ST_TO_ADDR
// driver := IsDrivenBy ( vehicle ) ;
21552: LD_ADDR_VAR 0 2
21556: PUSH
21557: LD_VAR 0 1
21561: PPUSH
21562: CALL_OW 311
21566: ST_TO_ADDR
// live := GetLives ( vehicle ) ;
21567: LD_ADDR_VAR 0 3
21571: PUSH
21572: LD_VAR 0 1
21576: PPUSH
21577: CALL_OW 256
21581: ST_TO_ADDR
// RemoveUnit ( driver ) ;
21582: LD_VAR 0 2
21586: PPUSH
21587: CALL_OW 64
// RemoveUnit ( vehicle ) ;
21591: LD_VAR 0 1
21595: PPUSH
21596: CALL_OW 64
// wait ( rand ( 4 4$30 , 5 5$30 ) ) ;
21600: LD_INT 9450
21602: PPUSH
21603: LD_INT 11550
21605: PPUSH
21606: CALL_OW 12
21610: PPUSH
21611: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21615: LD_INT 35
21617: PPUSH
21618: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
21622: LD_INT 22
21624: PUSH
21625: LD_INT 3
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: LD_INT 92
21634: PUSH
21635: LD_INT 261
21637: PUSH
21638: LD_INT 71
21640: PUSH
21641: LD_INT 12
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: PPUSH
21654: CALL_OW 69
21658: NOT
21659: PUSH
21660: LD_INT 277
21662: PPUSH
21663: LD_INT 80
21665: PPUSH
21666: CALL_OW 428
21670: NOT
21671: AND
21672: IFFALSE 21615
// uc_nation := GetNation ( vehicle ) ;
21674: LD_ADDR_OWVAR 21
21678: PUSH
21679: LD_VAR 0 1
21683: PPUSH
21684: CALL_OW 248
21688: ST_TO_ADDR
// uc_side := 2 ;
21689: LD_ADDR_OWVAR 20
21693: PUSH
21694: LD_INT 2
21696: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( vehicle ) , GetEngine ( vehicle ) , GetControl ( vehicle ) , GetWeapon ( vehicle ) , 66 ) ;
21697: LD_VAR 0 1
21701: PPUSH
21702: CALL_OW 265
21706: PPUSH
21707: LD_VAR 0 1
21711: PPUSH
21712: CALL_OW 262
21716: PPUSH
21717: LD_VAR 0 1
21721: PPUSH
21722: CALL_OW 263
21726: PPUSH
21727: LD_VAR 0 1
21731: PPUSH
21732: CALL_OW 264
21736: PPUSH
21737: LD_INT 66
21739: PPUSH
21740: CALL 30314 0 5
// vehicle := CreateVehicle ;
21744: LD_ADDR_VAR 0 1
21748: PUSH
21749: CALL_OW 45
21753: ST_TO_ADDR
// PlaceUnitXYD ( vehicle , 277 , 80 , 4 , false ) ;
21754: LD_VAR 0 1
21758: PPUSH
21759: LD_INT 277
21761: PPUSH
21762: LD_INT 80
21764: PPUSH
21765: LD_INT 4
21767: PPUSH
21768: LD_INT 0
21770: PPUSH
21771: CALL 64263 0 5
// PlaceHumanInUnit ( driver , vehicle ) ;
21775: LD_VAR 0 2
21779: PPUSH
21780: LD_VAR 0 1
21784: PPUSH
21785: CALL_OW 52
// SetLives ( vehicle , live ) ;
21789: LD_VAR 0 1
21793: PPUSH
21794: LD_VAR 0 3
21798: PPUSH
21799: CALL_OW 234
// if Prob ( [ 70 , 60 , 50 , 40 ] [ Difficulty ] ) then
21803: LD_INT 70
21805: PUSH
21806: LD_INT 60
21808: PUSH
21809: LD_INT 50
21811: PUSH
21812: LD_INT 40
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: PUSH
21821: LD_OWVAR 67
21825: ARRAY
21826: PPUSH
21827: CALL_OW 13
21831: IFFALSE 21850
// SetCargo ( vehicle , mat_oil , 100 ) else
21833: LD_VAR 0 1
21837: PPUSH
21838: LD_INT 2
21840: PPUSH
21841: LD_INT 100
21843: PPUSH
21844: CALL_OW 290
21848: GO 21872
// if live > 333 then
21850: LD_VAR 0 3
21854: PUSH
21855: LD_INT 333
21857: GREATER
21858: IFFALSE 21872
// SetLives ( vehicle , 333 ) ;
21860: LD_VAR 0 1
21864: PPUSH
21865: LD_INT 333
21867: PPUSH
21868: CALL_OW 234
// ComMoveXY ( vehicle , 250 , 119 ) ;
21872: LD_VAR 0 1
21876: PPUSH
21877: LD_INT 250
21879: PPUSH
21880: LD_INT 119
21882: PPUSH
21883: CALL_OW 111
// end ;
21887: PPOPN 3
21889: END
// every 0 0$1 trigger leninSpotted and omarAttack do
21890: LD_EXP 14
21894: PUSH
21895: LD_EXP 23
21899: AND
21900: IFFALSE 22200
21902: GO 21904
21904: DISABLE
// begin wait ( 0 0$45 ) ;
21905: LD_INT 1575
21907: PPUSH
21908: CALL_OW 67
// DialogueOn ;
21912: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
21916: LD_EXP 38
21920: PPUSH
21921: LD_STRING DShar-End-1
21923: PPUSH
21924: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
21928: LD_EXP 30
21932: PPUSH
21933: LD_STRING DH-End-2
21935: PPUSH
21936: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
21940: LD_EXP 38
21944: PPUSH
21945: LD_STRING DShar-End-3
21947: PPUSH
21948: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
21952: LD_EXP 30
21956: PPUSH
21957: LD_STRING DH-End-4
21959: PPUSH
21960: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
21964: LD_EXP 38
21968: PPUSH
21969: LD_STRING DShar-End-5
21971: PPUSH
21972: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
21976: LD_EXP 38
21980: PPUSH
21981: LD_STRING DShar-End-6
21983: PPUSH
21984: CALL_OW 94
// dwait ( 0 0$2 ) ;
21988: LD_INT 70
21990: PPUSH
21991: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
21995: LD_EXP 30
21999: PPUSH
22000: LD_STRING DH-End-7
22002: PPUSH
22003: CALL_OW 88
// DialogueOff ;
22007: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
22011: LD_STRING M6
22013: PPUSH
22014: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
22018: LD_INT 17
22020: PPUSH
22021: LD_INT 1
22023: PPUSH
22024: CALL_OW 424
// escapeAllowed := true ;
22028: LD_ADDR_EXP 24
22032: PUSH
22033: LD_INT 1
22035: ST_TO_ADDR
// wait ( 0 0$2 ) ;
22036: LD_INT 70
22038: PPUSH
22039: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
22043: LD_EXP 41
22047: PPUSH
22048: LD_STRING DKs-End-8
22050: PPUSH
22051: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
22055: LD_EXP 35
22059: PPUSH
22060: LD_STRING DK-End-10
22062: PPUSH
22063: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
22067: LD_EXP 41
22071: PPUSH
22072: LD_STRING DKs-End-9
22074: PPUSH
22075: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
22079: LD_EXP 37
22083: PPUSH
22084: LD_STRING DMar-End-11
22086: PPUSH
22087: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
22091: LD_STRING 05_DrugsTested
22093: PPUSH
22094: LD_EXP 1
22098: PPUSH
22099: CALL_OW 30
22103: IFFALSE 22117
// Say ( Mike , DM-End-12 ) ;
22105: LD_EXP 32
22109: PPUSH
22110: LD_STRING DM-End-12
22112: PPUSH
22113: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
22117: LD_EXP 39
22121: PPUSH
22122: LD_STRING DO-End-13
22124: PPUSH
22125: CALL_OW 88
// if IsOk ( Sophia ) then
22129: LD_EXP 36
22133: PPUSH
22134: CALL_OW 302
22138: IFFALSE 22164
// begin Say ( Sophia , DS-End-15 ) ;
22140: LD_EXP 36
22144: PPUSH
22145: LD_STRING DS-End-15
22147: PPUSH
22148: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
22152: LD_EXP 35
22156: PPUSH
22157: LD_STRING DK-End-16
22159: PPUSH
22160: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
22164: LD_EXP 31
22168: PPUSH
22169: LD_STRING DG-End-17
22171: PPUSH
22172: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
22176: LD_EXP 31
22180: PPUSH
22181: LD_STRING DG-End-18
22183: PPUSH
22184: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
22188: LD_EXP 31
22192: PPUSH
22193: LD_STRING DG-End-19
22195: PPUSH
22196: CALL_OW 88
// end ;
22200: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
22201: LD_EXP 24
22205: IFFALSE 22333
22207: GO 22209
22209: DISABLE
22210: LD_INT 0
22212: PPUSH
22213: PPUSH
// begin enable ;
22214: ENABLE
// display_strings := [ #X106-2 , escapeTimer ] ;
22215: LD_ADDR_OWVAR 47
22219: PUSH
22220: LD_STRING #X106-2
22222: PUSH
22223: LD_EXP 25
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
22232: LD_ADDR_EXP 25
22236: PUSH
22237: LD_EXP 25
22241: PUSH
22242: LD_INT 35
22244: MINUS
22245: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
22246: LD_ADDR_VAR 0 2
22250: PUSH
22251: LD_INT 17
22253: PPUSH
22254: LD_INT 22
22256: PUSH
22257: LD_INT 2
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: LD_INT 21
22266: PUSH
22267: LD_INT 1
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 23
22276: PUSH
22277: LD_INT 2
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: LIST
22288: PPUSH
22289: CALL_OW 71
22293: ST_TO_ADDR
// if not outsiders then
22294: LD_VAR 0 2
22298: NOT
22299: IFFALSE 22316
// begin escapeAllowed := false ;
22301: LD_ADDR_EXP 24
22305: PUSH
22306: LD_INT 0
22308: ST_TO_ADDR
// disable ;
22309: DISABLE
// MissionWin ;
22310: CALL 22336 0 0
// exit ;
22314: GO 22333
// end ; if escapeTimer <= 0 0$00 then
22316: LD_EXP 25
22320: PUSH
22321: LD_INT 0
22323: LESSEQUAL
22324: IFFALSE 22333
// YouLost ( TimeOut ) ;
22326: LD_STRING TimeOut
22328: PPUSH
22329: CALL_OW 104
// end ;
22333: PPOPN 2
22335: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
22336: LD_INT 0
22338: PPUSH
22339: PPUSH
22340: PPUSH
22341: PPUSH
22342: PPUSH
// Say ( Heike , DH-End-20 ) ;
22343: LD_EXP 30
22347: PPUSH
22348: LD_STRING DH-End-20
22350: PPUSH
22351: CALL_OW 88
// if rolfDied then
22355: LD_EXP 13
22359: IFFALSE 22374
// AddMedal ( med1 , - 1 ) else
22361: LD_STRING med1
22363: PPUSH
22364: LD_INT 1
22366: NEG
22367: PPUSH
22368: CALL_OW 101
22372: GO 22404
// if not canRolfJoin then
22374: LD_EXP 29
22378: NOT
22379: IFFALSE 22394
// AddMedal ( med1 , - 2 ) else
22381: LD_STRING med1
22383: PPUSH
22384: LD_INT 2
22386: NEG
22387: PPUSH
22388: CALL_OW 101
22392: GO 22404
// AddMedal ( med1 , 1 ) ;
22394: LD_STRING med1
22396: PPUSH
22397: LD_INT 1
22399: PPUSH
22400: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
22404: LD_EXP 22
22408: PUSH
22409: LD_EXP 16
22413: AND
22414: IFFALSE 22428
// AddMedal ( med2 , 1 ) else
22416: LD_STRING med2
22418: PPUSH
22419: LD_INT 1
22421: PPUSH
22422: CALL_OW 101
22426: GO 22477
// if omarHasVehicles then
22428: LD_EXP 22
22432: IFFALSE 22447
// AddMedal ( med2 , - 1 ) else
22434: LD_STRING med2
22436: PPUSH
22437: LD_INT 1
22439: NEG
22440: PPUSH
22441: CALL_OW 101
22445: GO 22477
// if rolfHasVehicles then
22447: LD_EXP 16
22451: IFFALSE 22466
// AddMedal ( med2 , - 2 ) else
22453: LD_STRING med2
22455: PPUSH
22456: LD_INT 2
22458: NEG
22459: PPUSH
22460: CALL_OW 101
22464: GO 22477
// AddMedal ( med2 , - 3 ) ;
22466: LD_STRING med2
22468: PPUSH
22469: LD_INT 3
22471: NEG
22472: PPUSH
22473: CALL_OW 101
// if ruLoseCounter >= [ 30 , 45 , 50 , 62 ] [ Difficulty ] and heikeLoseCounter = 0 then
22477: LD_EXP 5
22481: PUSH
22482: LD_INT 30
22484: PUSH
22485: LD_INT 45
22487: PUSH
22488: LD_INT 50
22490: PUSH
22491: LD_INT 62
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: PUSH
22500: LD_OWVAR 67
22504: ARRAY
22505: GREATEREQUAL
22506: PUSH
22507: LD_EXP 26
22511: PUSH
22512: LD_INT 0
22514: EQUAL
22515: AND
22516: IFFALSE 22530
// AddMedal ( med3 , 1 ) else
22518: LD_STRING med3
22520: PPUSH
22521: LD_INT 1
22523: PPUSH
22524: CALL_OW 101
22528: GO 22560
// if heikeLoseCounter then
22530: LD_EXP 26
22534: IFFALSE 22549
// AddMedal ( med3 , - 2 ) else
22536: LD_STRING med3
22538: PPUSH
22539: LD_INT 2
22541: NEG
22542: PPUSH
22543: CALL_OW 101
22547: GO 22560
// AddMedal ( med3 , - 1 ) ;
22549: LD_STRING med3
22551: PPUSH
22552: LD_INT 1
22554: NEG
22555: PPUSH
22556: CALL_OW 101
// GiveMedals ( MAIN ) ;
22560: LD_STRING MAIN
22562: PPUSH
22563: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
22567: LD_INT 22
22569: PUSH
22570: LD_INT 2
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 23
22579: PUSH
22580: LD_INT 2
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 21
22589: PUSH
22590: LD_INT 1
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: LIST
22601: PPUSH
22602: CALL_OW 69
22606: PPUSH
22607: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
22611: LD_EXP 30
22615: PPUSH
22616: LD_STRING 06_Heike
22618: PPUSH
22619: CALL_OW 38
// if Aviradze then
22623: LD_EXP 42
22627: IFFALSE 22641
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
22629: LD_EXP 42
22633: PPUSH
22634: LD_STRING 06_Aviradze
22636: PPUSH
22637: CALL_OW 38
// if Ibrahim then
22641: LD_EXP 33
22645: IFFALSE 22659
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
22647: LD_EXP 33
22651: PPUSH
22652: LD_STRING 06_Ibrahim
22654: PPUSH
22655: CALL_OW 38
// if Kamil then
22659: LD_EXP 34
22663: IFFALSE 22677
// SaveCharacters ( Kamil , 06_Kamil ) ;
22665: LD_EXP 34
22669: PPUSH
22670: LD_STRING 06_Kamil
22672: PPUSH
22673: CALL_OW 38
// if Sophia then
22677: LD_EXP 36
22681: IFFALSE 22695
// SaveCharacters ( Sophia , 06_Sophia ) ;
22683: LD_EXP 36
22687: PPUSH
22688: LD_STRING 06_Sophia
22690: PPUSH
22691: CALL_OW 38
// if Kaia then
22695: LD_EXP 35
22699: IFFALSE 22713
// SaveCharacters ( Kaia , 06_Kaia ) ;
22701: LD_EXP 35
22705: PPUSH
22706: LD_STRING 06_Kaia
22708: PPUSH
22709: CALL_OW 38
// if Givi then
22713: LD_EXP 31
22717: IFFALSE 22731
// SaveCharacters ( Givi , 06_Givi ) ;
22719: LD_EXP 31
22723: PPUSH
22724: LD_STRING 06_Givi
22726: PPUSH
22727: CALL_OW 38
// if Mike then
22731: LD_EXP 32
22735: IFFALSE 22749
// SaveCharacters ( Mike , 06_Mike ) ;
22737: LD_EXP 32
22741: PPUSH
22742: LD_STRING 06_Mike
22744: PPUSH
22745: CALL_OW 38
// if Markov then
22749: LD_EXP 37
22753: IFFALSE 22767
// SaveCharacters ( Markov , 06_Markov ) ;
22755: LD_EXP 37
22759: PPUSH
22760: LD_STRING 06_Markov
22762: PPUSH
22763: CALL_OW 38
// if Kurt then
22767: LD_EXP 41
22771: IFFALSE 22785
// SaveCharacters ( Kurt , 06_Kurt ) ;
22773: LD_EXP 41
22777: PPUSH
22778: LD_STRING 06_Kurt
22780: PPUSH
22781: CALL_OW 38
// if heikeSecondSquad then
22785: LD_EXP 45
22789: IFFALSE 22803
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
22791: LD_EXP 45
22795: PPUSH
22796: LD_STRING 06_others
22798: PPUSH
22799: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
22803: LD_ADDR_VAR 0 3
22807: PUSH
22808: LD_INT 22
22810: PUSH
22811: LD_INT 2
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 23
22820: PUSH
22821: LD_INT 0
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PPUSH
22832: CALL_OW 69
22836: ST_TO_ADDR
// if tmp then
22837: LD_VAR 0 3
22841: IFFALSE 22855
// SaveCharacters ( tmp , 06_apes ) ;
22843: LD_VAR 0 3
22847: PPUSH
22848: LD_STRING 06_apes
22850: PPUSH
22851: CALL_OW 38
// if Rolf then
22855: LD_EXP 43
22859: IFFALSE 22910
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
22861: LD_EXP 43
22865: PPUSH
22866: LD_STRING 06_Rolf
22868: PPUSH
22869: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
22873: LD_STRING enableBioCharacter(BIO_ROLF)
22875: PPUSH
22876: CALL_OW 559
// if rolfSquad diff Rolf then
22880: LD_EXP 47
22884: PUSH
22885: LD_EXP 43
22889: DIFF
22890: IFFALSE 22910
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
22892: LD_EXP 47
22896: PUSH
22897: LD_EXP 43
22901: DIFF
22902: PPUSH
22903: LD_STRING 06_RolfSquad
22905: PPUSH
22906: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
22910: LD_ADDR_VAR 0 3
22914: PUSH
22915: LD_INT 17
22917: PPUSH
22918: LD_INT 21
22920: PUSH
22921: LD_INT 2
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PPUSH
22928: CALL_OW 70
22932: ST_TO_ADDR
// if tmp then
22933: LD_VAR 0 3
22937: IFFALSE 23231
// begin tmp2 := [ ] ;
22939: LD_ADDR_VAR 0 4
22943: PUSH
22944: EMPTY
22945: ST_TO_ADDR
// for i in tmp do
22946: LD_ADDR_VAR 0 2
22950: PUSH
22951: LD_VAR 0 3
22955: PUSH
22956: FOR_IN
22957: IFFALSE 23217
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
22959: LD_VAR 0 2
22963: PPUSH
22964: CALL_OW 264
22968: PUSH
22969: LD_INT 32
22971: PUSH
22972: LD_INT 12
22974: PUSH
22975: LD_INT 51
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: LIST
22982: IN
22983: IFFALSE 23120
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
22985: LD_ADDR_VAR 0 5
22989: PUSH
22990: LD_VAR 0 2
22994: PPUSH
22995: LD_INT 1
22997: PPUSH
22998: CALL_OW 289
23002: PUSH
23003: LD_VAR 0 2
23007: PPUSH
23008: LD_INT 2
23010: PPUSH
23011: CALL_OW 289
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
23020: LD_ADDR_VAR 0 4
23024: PUSH
23025: LD_VAR 0 4
23029: PPUSH
23030: LD_VAR 0 4
23034: PUSH
23035: LD_INT 1
23037: PLUS
23038: PPUSH
23039: LD_VAR 0 2
23043: PPUSH
23044: CALL_OW 265
23048: PUSH
23049: LD_VAR 0 2
23053: PPUSH
23054: CALL_OW 262
23058: PUSH
23059: LD_VAR 0 2
23063: PPUSH
23064: CALL_OW 263
23068: PUSH
23069: LD_VAR 0 2
23073: PPUSH
23074: CALL_OW 264
23078: PUSH
23079: LD_VAR 0 2
23083: PPUSH
23084: CALL_OW 248
23088: PUSH
23089: LD_VAR 0 2
23093: PPUSH
23094: CALL_OW 256
23098: PUSH
23099: LD_VAR 0 5
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: PPUSH
23113: CALL_OW 1
23117: ST_TO_ADDR
// end else
23118: GO 23215
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
23120: LD_ADDR_VAR 0 4
23124: PUSH
23125: LD_VAR 0 4
23129: PPUSH
23130: LD_VAR 0 4
23134: PUSH
23135: LD_INT 1
23137: PLUS
23138: PPUSH
23139: LD_VAR 0 2
23143: PPUSH
23144: CALL_OW 265
23148: PUSH
23149: LD_VAR 0 2
23153: PPUSH
23154: CALL_OW 262
23158: PUSH
23159: LD_VAR 0 2
23163: PPUSH
23164: CALL_OW 263
23168: PUSH
23169: LD_VAR 0 2
23173: PPUSH
23174: CALL_OW 264
23178: PUSH
23179: LD_VAR 0 2
23183: PPUSH
23184: CALL_OW 248
23188: PUSH
23189: LD_VAR 0 2
23193: PPUSH
23194: CALL_OW 256
23198: PUSH
23199: EMPTY
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: PPUSH
23210: CALL_OW 1
23214: ST_TO_ADDR
23215: GO 22956
23217: POP
23218: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
23219: LD_VAR 0 4
23223: PPUSH
23224: LD_STRING 06_Vehicles
23226: PPUSH
23227: CALL_OW 39
// end ; YouWin ;
23231: CALL_OW 103
// end ; end_of_file
23235: LD_VAR 0 1
23239: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
23240: LD_INT 0
23242: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
23243: LD_VAR 0 1
23247: PPUSH
23248: LD_VAR 0 2
23252: PPUSH
23253: CALL 80680 0 2
// if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
23257: LD_VAR 0 1
23261: PPUSH
23262: CALL_OW 255
23266: PUSH
23267: LD_INT 2
23269: EQUAL
23270: PUSH
23271: LD_OWVAR 52
23275: AND
23276: PUSH
23277: LD_VAR 0 1
23281: PPUSH
23282: CALL_OW 263
23286: PUSH
23287: LD_INT 1
23289: EQUAL
23290: AND
23291: IFFALSE 23346
// begin driver := IsDrivenBy ( vehicle ) ;
23293: LD_ADDR_VAR 0 3
23297: PUSH
23298: LD_VAR 0 1
23302: PPUSH
23303: CALL_OW 311
23307: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
23308: LD_VAR 0 1
23312: PPUSH
23313: LD_INT 211
23315: PPUSH
23316: LD_INT 101
23318: PPUSH
23319: CALL_OW 111
// AddComExitVehicle ( driver ) ;
23323: LD_VAR 0 3
23327: PPUSH
23328: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23332: LD_VAR 0 3
23336: PPUSH
23337: LD_VAR 0 2
23341: PPUSH
23342: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
23346: LD_VAR 0 1
23350: PPUSH
23351: CALL_OW 255
23355: PUSH
23356: LD_INT 3
23358: EQUAL
23359: IFFALSE 23390
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
23361: LD_ADDR_EXP 56
23365: PUSH
23366: LD_EXP 56
23370: PPUSH
23371: LD_EXP 56
23375: PUSH
23376: LD_INT 1
23378: PLUS
23379: PPUSH
23380: LD_VAR 0 1
23384: PPUSH
23385: CALL_OW 1
23389: ST_TO_ADDR
// end ;
23390: PPOPN 3
23392: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
23393: LD_VAR 0 1
23397: PPUSH
23398: CALL_OW 255
23402: PUSH
23403: LD_INT 8
23405: EQUAL
23406: PUSH
23407: LD_VAR 0 1
23411: PPUSH
23412: CALL_OW 266
23416: PUSH
23417: LD_INT 4
23419: EQUAL
23420: AND
23421: IFFALSE 23432
// ComUpgrade ( b ) ;
23423: LD_VAR 0 1
23427: PPUSH
23428: CALL_OW 146
// end ;
23432: PPOPN 1
23434: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
23435: LD_VAR 0 1
23439: PPUSH
23440: CALL 80558 0 1
// if un = Heike then
23444: LD_VAR 0 1
23448: PUSH
23449: LD_EXP 30
23453: EQUAL
23454: IFFALSE 23463
// YouLost ( Heike ) ;
23456: LD_STRING Heike
23458: PPUSH
23459: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] ] ) then
23463: LD_VAR 0 1
23467: PUSH
23468: LD_INT 22
23470: PUSH
23471: LD_INT 2
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: PUSH
23478: LD_INT 23
23480: PUSH
23481: LD_INT 2
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PPUSH
23492: CALL_OW 69
23496: IN
23497: IFFALSE 23513
// heikeLoseCounter := heikeLoseCounter + 1 ;
23499: LD_ADDR_EXP 26
23503: PUSH
23504: LD_EXP 26
23508: PUSH
23509: LD_INT 1
23511: PLUS
23512: ST_TO_ADDR
// if un = arDepot then
23513: LD_VAR 0 1
23517: PUSH
23518: LD_EXP 44
23522: EQUAL
23523: IFFALSE 23532
// YouLost ( Base ) ;
23525: LD_STRING Base
23527: PPUSH
23528: CALL_OW 104
// if un = Rolf then
23532: LD_VAR 0 1
23536: PUSH
23537: LD_EXP 43
23541: EQUAL
23542: IFFALSE 23552
// rolfDied := true ;
23544: LD_ADDR_EXP 13
23548: PUSH
23549: LD_INT 1
23551: ST_TO_ADDR
// if un in rolfSquad then
23552: LD_VAR 0 1
23556: PUSH
23557: LD_EXP 47
23561: IN
23562: IFFALSE 23580
// rolfSquad := rolfSquad diff un ;
23564: LD_ADDR_EXP 47
23568: PUSH
23569: LD_EXP 47
23573: PUSH
23574: LD_VAR 0 1
23578: DIFF
23579: ST_TO_ADDR
// if un in omarSquad then
23580: LD_VAR 0 1
23584: PUSH
23585: LD_EXP 48
23589: IN
23590: IFFALSE 23608
// omarSquad := omarSquad diff un ;
23592: LD_ADDR_EXP 48
23596: PUSH
23597: LD_EXP 48
23601: PUSH
23602: LD_VAR 0 1
23606: DIFF
23607: ST_TO_ADDR
// if GetSide ( un ) = 3 then
23608: LD_VAR 0 1
23612: PPUSH
23613: CALL_OW 255
23617: PUSH
23618: LD_INT 3
23620: EQUAL
23621: IFFALSE 23637
// ruLoseCounter := ruLoseCounter + 1 ;
23623: LD_ADDR_EXP 5
23627: PUSH
23628: LD_EXP 5
23632: PUSH
23633: LD_INT 1
23635: PLUS
23636: ST_TO_ADDR
// if un in ruAttackers then
23637: LD_VAR 0 1
23641: PUSH
23642: LD_EXP 57
23646: IN
23647: IFFALSE 23665
// ruAttackers := ruAttackers diff un ;
23649: LD_ADDR_EXP 57
23653: PUSH
23654: LD_EXP 57
23658: PUSH
23659: LD_VAR 0 1
23663: DIFF
23664: ST_TO_ADDR
// end ;
23665: PPOPN 1
23667: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
23668: LD_INT 0
23670: PPUSH
23671: PPUSH
23672: PPUSH
23673: PPUSH
// begin if GetSide ( un ) = 3 and not un in ruAttackers then
23674: LD_VAR 0 1
23678: PPUSH
23679: CALL_OW 255
23683: PUSH
23684: LD_INT 3
23686: EQUAL
23687: PUSH
23688: LD_VAR 0 1
23692: PUSH
23693: LD_EXP 57
23697: IN
23698: NOT
23699: AND
23700: IFFALSE 24196
// begin if not IsInArea ( un , ruMainBase ) then
23702: LD_VAR 0 1
23706: PPUSH
23707: LD_INT 10
23709: PPUSH
23710: CALL_OW 308
23714: NOT
23715: IFFALSE 23729
// ComMoveToArea ( un , ruMainBase ) ;
23717: LD_VAR 0 1
23721: PPUSH
23722: LD_INT 10
23724: PPUSH
23725: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
23729: LD_INT 35
23731: PPUSH
23732: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
23736: LD_VAR 0 1
23740: PPUSH
23741: CALL_OW 302
23745: NOT
23746: PUSH
23747: LD_VAR 0 1
23751: PPUSH
23752: LD_INT 10
23754: PPUSH
23755: CALL_OW 308
23759: OR
23760: IFFALSE 23729
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
23762: LD_ADDR_EXP 55
23766: PUSH
23767: LD_EXP 55
23771: PPUSH
23772: LD_EXP 55
23776: PUSH
23777: LD_INT 1
23779: PLUS
23780: PPUSH
23781: LD_VAR 0 1
23785: PPUSH
23786: CALL_OW 1
23790: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
23791: LD_ADDR_VAR 0 8
23795: PUSH
23796: LD_INT 72
23798: PUSH
23799: LD_INT 12
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: ST_TO_ADDR
// if tmp then
23806: LD_VAR 0 8
23810: IFFALSE 23925
// for i in tmp do
23812: LD_ADDR_VAR 0 5
23816: PUSH
23817: LD_VAR 0 8
23821: PUSH
23822: FOR_IN
23823: IFFALSE 23923
// if UnitsInside ( i ) < 6 then
23825: LD_VAR 0 5
23829: PPUSH
23830: CALL_OW 313
23834: PUSH
23835: LD_INT 6
23837: LESS
23838: IFFALSE 23921
// begin AddComEnterUnit ( un , i ) ;
23840: LD_VAR 0 1
23844: PPUSH
23845: LD_VAR 0 5
23849: PPUSH
23850: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
23854: LD_VAR 0 8
23858: PPUSH
23859: LD_INT 22
23861: PUSH
23862: LD_INT 23
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 1
23871: PPUSH
23872: LD_INT 2
23874: PPUSH
23875: CALL_OW 12
23879: ARRAY
23880: PPUSH
23881: LD_INT 1
23883: PPUSH
23884: LD_INT 1
23886: PPUSH
23887: LD_INT 44
23889: PUSH
23890: LD_INT 46
23892: PUSH
23893: LD_INT 47
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 1
23903: PPUSH
23904: LD_INT 3
23906: PPUSH
23907: CALL_OW 12
23911: ARRAY
23912: PPUSH
23913: CALL_OW 185
// exit ;
23917: POP
23918: POP
23919: GO 24196
// end ;
23921: GO 23822
23923: POP
23924: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
23925: LD_ADDR_VAR 0 8
23929: PUSH
23930: LD_INT 10
23932: PPUSH
23933: LD_INT 22
23935: PUSH
23936: LD_INT 3
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 50
23945: PUSH
23946: EMPTY
23947: LIST
23948: PUSH
23949: LD_INT 2
23951: PUSH
23952: LD_INT 30
23954: PUSH
23955: LD_INT 4
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: LD_INT 30
23964: PUSH
23965: LD_INT 5
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 30
23974: PUSH
23975: LD_INT 32
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 30
23984: PUSH
23985: LD_INT 31
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: LIST
24003: PPUSH
24004: CALL_OW 70
24008: ST_TO_ADDR
// if not tmp then
24009: LD_VAR 0 8
24013: NOT
24014: IFFALSE 24033
// begin ComMoveXY ( un , 83 , 133 ) ;
24016: LD_VAR 0 1
24020: PPUSH
24021: LD_INT 83
24023: PPUSH
24024: LD_INT 133
24026: PPUSH
24027: CALL_OW 111
// exit ;
24031: GO 24196
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
24033: LD_ADDR_VAR 0 6
24037: PUSH
24038: LD_VAR 0 1
24042: PPUSH
24043: LD_VAR 0 8
24047: PPUSH
24048: LD_INT 1
24050: PPUSH
24051: LD_INT 1
24053: PPUSH
24054: CALL 30871 0 4
24058: PUSH
24059: FOR_IN
24060: IFFALSE 24194
// begin case GetBType ( b ) of b_armoury , b_barracks :
24062: LD_VAR 0 6
24066: PPUSH
24067: CALL_OW 266
24071: PUSH
24072: LD_INT 4
24074: DOUBLE
24075: EQUAL
24076: IFTRUE 24086
24078: LD_INT 5
24080: DOUBLE
24081: EQUAL
24082: IFTRUE 24086
24084: GO 24097
24086: POP
// p := 6 ; b_breastwork , b_bunker :
24087: LD_ADDR_VAR 0 7
24091: PUSH
24092: LD_INT 6
24094: ST_TO_ADDR
24095: GO 24123
24097: LD_INT 31
24099: DOUBLE
24100: EQUAL
24101: IFTRUE 24111
24103: LD_INT 32
24105: DOUBLE
24106: EQUAL
24107: IFTRUE 24111
24109: GO 24122
24111: POP
// p := 1 ; end ;
24112: LD_ADDR_VAR 0 7
24116: PUSH
24117: LD_INT 1
24119: ST_TO_ADDR
24120: GO 24123
24122: POP
// if UnitsInside ( b ) < p then
24123: LD_VAR 0 6
24127: PPUSH
24128: CALL_OW 313
24132: PUSH
24133: LD_VAR 0 7
24137: LESS
24138: IFFALSE 24192
// begin ComEnterUnit ( un , b ) ;
24140: LD_VAR 0 1
24144: PPUSH
24145: LD_VAR 0 6
24149: PPUSH
24150: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
24154: LD_VAR 0 6
24158: PPUSH
24159: CALL_OW 266
24163: PUSH
24164: LD_INT 4
24166: PUSH
24167: LD_INT 5
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: IN
24174: IFFALSE 24188
// AddComChangeProfession ( un , class_soldier ) ;
24176: LD_VAR 0 1
24180: PPUSH
24181: LD_INT 1
24183: PPUSH
24184: CALL_OW 183
// exit ;
24188: POP
24189: POP
24190: GO 24196
// end ; end ;
24192: GO 24059
24194: POP
24195: POP
// end ; end ;
24196: PPOPN 8
24198: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
24199: LD_INT 0
24201: PPUSH
24202: PPUSH
24203: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
24204: LD_VAR 0 2
24208: PPUSH
24209: CALL_OW 255
24213: PUSH
24214: LD_INT 3
24216: EQUAL
24217: PUSH
24218: LD_VAR 0 2
24222: PPUSH
24223: CALL_OW 257
24227: PUSH
24228: LD_INT 1
24230: EQUAL
24231: AND
24232: PUSH
24233: LD_VAR 0 2
24237: PUSH
24238: LD_EXP 55
24242: IN
24243: NOT
24244: AND
24245: IFFALSE 24558
// begin ComMoveToArea ( un , ruMainBase ) ;
24247: LD_VAR 0 2
24251: PPUSH
24252: LD_INT 10
24254: PPUSH
24255: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
24259: LD_INT 35
24261: PPUSH
24262: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
24266: LD_VAR 0 2
24270: PPUSH
24271: CALL_OW 302
24275: NOT
24276: PUSH
24277: LD_VAR 0 2
24281: PPUSH
24282: LD_INT 10
24284: PPUSH
24285: CALL_OW 308
24289: OR
24290: IFFALSE 24259
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
24292: LD_ADDR_EXP 55
24296: PUSH
24297: LD_EXP 55
24301: PPUSH
24302: LD_EXP 55
24306: PUSH
24307: LD_INT 1
24309: PLUS
24310: PPUSH
24311: LD_VAR 0 2
24315: PPUSH
24316: CALL_OW 1
24320: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
24321: LD_ADDR_VAR 0 4
24325: PUSH
24326: LD_INT 10
24328: PPUSH
24329: LD_INT 22
24331: PUSH
24332: LD_INT 3
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 50
24341: PUSH
24342: EMPTY
24343: LIST
24344: PUSH
24345: LD_INT 2
24347: PUSH
24348: LD_INT 30
24350: PUSH
24351: LD_INT 4
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 30
24360: PUSH
24361: LD_INT 5
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: PUSH
24368: LD_INT 30
24370: PUSH
24371: LD_INT 32
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: PUSH
24378: LD_INT 30
24380: PUSH
24381: LD_INT 31
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: LIST
24399: PPUSH
24400: CALL_OW 70
24404: ST_TO_ADDR
// if not tmp then
24405: LD_VAR 0 4
24409: NOT
24410: IFFALSE 24429
// begin ComMoveXY ( un , 83 , 133 ) ;
24412: LD_VAR 0 2
24416: PPUSH
24417: LD_INT 83
24419: PPUSH
24420: LD_INT 133
24422: PPUSH
24423: CALL_OW 111
// exit ;
24427: GO 24807
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
24429: LD_ADDR_VAR 0 5
24433: PUSH
24434: LD_VAR 0 2
24438: PPUSH
24439: LD_VAR 0 4
24443: PPUSH
24444: LD_INT 1
24446: PPUSH
24447: LD_INT 1
24449: PPUSH
24450: CALL 30871 0 4
24454: PUSH
24455: FOR_IN
24456: IFFALSE 24556
// begin case GetBType ( b ) of b_armoury , b_barracks :
24458: LD_VAR 0 5
24462: PPUSH
24463: CALL_OW 266
24467: PUSH
24468: LD_INT 4
24470: DOUBLE
24471: EQUAL
24472: IFTRUE 24482
24474: LD_INT 5
24476: DOUBLE
24477: EQUAL
24478: IFTRUE 24482
24480: GO 24493
24482: POP
// p := 6 ; b_breastwork , b_bunker :
24483: LD_ADDR_VAR 0 3
24487: PUSH
24488: LD_INT 6
24490: ST_TO_ADDR
24491: GO 24519
24493: LD_INT 31
24495: DOUBLE
24496: EQUAL
24497: IFTRUE 24507
24499: LD_INT 32
24501: DOUBLE
24502: EQUAL
24503: IFTRUE 24507
24505: GO 24518
24507: POP
// p := 1 ; end ;
24508: LD_ADDR_VAR 0 3
24512: PUSH
24513: LD_INT 1
24515: ST_TO_ADDR
24516: GO 24519
24518: POP
// if UnitsInside ( b ) < p then
24519: LD_VAR 0 5
24523: PPUSH
24524: CALL_OW 313
24528: PUSH
24529: LD_VAR 0 3
24533: LESS
24534: IFFALSE 24554
// begin ComEnterUnit ( un , b ) ;
24536: LD_VAR 0 2
24540: PPUSH
24541: LD_VAR 0 5
24545: PPUSH
24546: CALL_OW 120
// exit ;
24550: POP
24551: POP
24552: GO 24807
// end ; end ;
24554: GO 24455
24556: POP
24557: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
24558: LD_VAR 0 2
24562: PUSH
24563: LD_EXP 55
24567: IN
24568: PUSH
24569: LD_VAR 0 2
24573: PPUSH
24574: CALL_OW 257
24578: PUSH
24579: LD_INT 1
24581: EQUAL
24582: AND
24583: IFFALSE 24807
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
24585: LD_ADDR_VAR 0 4
24589: PUSH
24590: LD_INT 10
24592: PPUSH
24593: LD_INT 22
24595: PUSH
24596: LD_INT 3
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 50
24605: PUSH
24606: EMPTY
24607: LIST
24608: PUSH
24609: LD_INT 2
24611: PUSH
24612: LD_INT 30
24614: PUSH
24615: LD_INT 4
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 30
24624: PUSH
24625: LD_INT 5
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 30
24634: PUSH
24635: LD_INT 32
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: LD_INT 30
24644: PUSH
24645: LD_INT 31
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: LIST
24663: PPUSH
24664: CALL_OW 70
24668: ST_TO_ADDR
// if not tmp then
24669: LD_VAR 0 4
24673: NOT
24674: IFFALSE 24678
// exit ;
24676: GO 24807
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
24678: LD_ADDR_VAR 0 5
24682: PUSH
24683: LD_VAR 0 2
24687: PPUSH
24688: LD_VAR 0 4
24692: PPUSH
24693: LD_INT 1
24695: PPUSH
24696: LD_INT 1
24698: PPUSH
24699: CALL 30871 0 4
24703: PUSH
24704: FOR_IN
24705: IFFALSE 24805
// begin case GetBType ( b ) of b_armoury , b_barracks :
24707: LD_VAR 0 5
24711: PPUSH
24712: CALL_OW 266
24716: PUSH
24717: LD_INT 4
24719: DOUBLE
24720: EQUAL
24721: IFTRUE 24731
24723: LD_INT 5
24725: DOUBLE
24726: EQUAL
24727: IFTRUE 24731
24729: GO 24742
24731: POP
// p := 6 ; b_breastwork , b_bunker :
24732: LD_ADDR_VAR 0 3
24736: PUSH
24737: LD_INT 6
24739: ST_TO_ADDR
24740: GO 24768
24742: LD_INT 31
24744: DOUBLE
24745: EQUAL
24746: IFTRUE 24756
24748: LD_INT 32
24750: DOUBLE
24751: EQUAL
24752: IFTRUE 24756
24754: GO 24767
24756: POP
// p := 1 ; end ;
24757: LD_ADDR_VAR 0 3
24761: PUSH
24762: LD_INT 1
24764: ST_TO_ADDR
24765: GO 24768
24767: POP
// if UnitsInside ( b ) < p then
24768: LD_VAR 0 5
24772: PPUSH
24773: CALL_OW 313
24777: PUSH
24778: LD_VAR 0 3
24782: LESS
24783: IFFALSE 24803
// begin ComEnterUnit ( un , b ) ;
24785: LD_VAR 0 2
24789: PPUSH
24790: LD_VAR 0 5
24794: PPUSH
24795: CALL_OW 120
// exit ;
24799: POP
24800: POP
24801: GO 24807
// end ; end ;
24803: GO 24704
24805: POP
24806: POP
// end ; end ;
24807: PPOPN 5
24809: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
24810: LD_VAR 0 1
24814: PUSH
24815: LD_INT 2
24817: EQUAL
24818: PUSH
24819: LD_VAR 0 2
24823: PUSH
24824: LD_INT 5
24826: PUSH
24827: LD_INT 8
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: IN
24834: AND
24835: IFFALSE 24844
// YouLost ( FriendlyFire ) ;
24837: LD_STRING FriendlyFire
24839: PPUSH
24840: CALL_OW 104
// end ;
24844: PPOPN 2
24846: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
24847: LD_VAR 0 1
24851: PPUSH
24852: CALL_OW 255
24856: PUSH
24857: LD_INT 8
24859: EQUAL
24860: PUSH
24861: LD_VAR 0 1
24865: PPUSH
24866: CALL_OW 266
24870: PUSH
24871: LD_INT 5
24873: EQUAL
24874: AND
24875: IFFALSE 24889
// SetClass ( unit , class_mortar ) ;
24877: LD_VAR 0 2
24881: PPUSH
24882: LD_INT 8
24884: PPUSH
24885: CALL_OW 336
// end ; end_of_file
24889: PPOPN 2
24891: END
// every 0 0$50 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 300 , 250 , 200 , 150 ] [ Difficulty ] do
24892: LD_INT 6
24894: PPUSH
24895: LD_INT 1
24897: PPUSH
24898: CALL_OW 287
24902: PUSH
24903: LD_INT 300
24905: PUSH
24906: LD_INT 250
24908: PUSH
24909: LD_INT 200
24911: PUSH
24912: LD_INT 150
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: PUSH
24921: LD_OWVAR 67
24925: ARRAY
24926: LESS
24927: IFFALSE 24954
24929: GO 24931
24931: DISABLE
// begin enable ;
24932: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
24933: LD_INT 1
24935: PPUSH
24936: LD_INT 5
24938: PPUSH
24939: CALL_OW 12
24943: PPUSH
24944: LD_INT 6
24946: PPUSH
24947: LD_INT 1
24949: PPUSH
24950: CALL_OW 55
// end ; end_of_file
24954: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
24955: LD_EXP 18
24959: PUSH
24960: LD_EXP 20
24964: AND
24965: PUSH
24966: LD_EXP 17
24970: PUSH
24971: LD_EXP 19
24975: AND
24976: OR
24977: IFFALSE 25296
24979: GO 24981
24981: DISABLE
// begin enable ;
24982: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
24983: LD_EXP 18
24987: PUSH
24988: LD_EXP 20
24992: AND
24993: PUSH
24994: LD_EXP 17
24998: PUSH
24999: LD_EXP 19
25003: AND
25004: AND
25005: IFFALSE 25142
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
25007: LD_ADDR_OWVAR 47
25011: PUSH
25012: LD_STRING #X106-1a
25014: PUSH
25015: LD_EXP 21
25019: PUSH
25020: LD_INT 16
25022: PPUSH
25023: LD_INT 22
25025: PUSH
25026: LD_INT 2
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 21
25035: PUSH
25036: LD_INT 2
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 33
25045: PUSH
25046: LD_INT 1
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 58
25055: PUSH
25056: EMPTY
25057: LIST
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: PPUSH
25065: CALL_OW 70
25069: MINUS
25070: PPUSH
25071: CALL 64309 0 1
25075: PUSH
25076: LD_STRING #X106-3a
25078: PUSH
25079: LD_EXP 20
25083: PUSH
25084: LD_STRING #X106-1
25086: PUSH
25087: LD_EXP 47
25091: PUSH
25092: LD_INT 0
25094: PLUS
25095: PUSH
25096: LD_EXP 47
25100: PPUSH
25101: LD_INT 55
25103: PUSH
25104: EMPTY
25105: LIST
25106: PPUSH
25107: CALL_OW 72
25111: PUSH
25112: LD_INT 0
25114: PLUS
25115: MINUS
25116: PPUSH
25117: CALL 64309 0 1
25121: PUSH
25122: LD_STRING #X106-3
25124: PUSH
25125: LD_EXP 19
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: ST_TO_ADDR
// end else
25140: GO 25296
// if omarWantVehicles and omarWaitingForVehiclesTimer then
25142: LD_EXP 18
25146: PUSH
25147: LD_EXP 20
25151: AND
25152: IFFALSE 25239
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
25154: LD_ADDR_OWVAR 47
25158: PUSH
25159: LD_STRING #X106-1a
25161: PUSH
25162: LD_EXP 21
25166: PUSH
25167: LD_INT 16
25169: PPUSH
25170: LD_INT 22
25172: PUSH
25173: LD_INT 2
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 21
25182: PUSH
25183: LD_INT 2
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 33
25192: PUSH
25193: LD_INT 1
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 58
25202: PUSH
25203: EMPTY
25204: LIST
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: PPUSH
25212: CALL_OW 70
25216: MINUS
25217: PPUSH
25218: CALL 64309 0 1
25222: PUSH
25223: LD_STRING #X106-3a
25225: PUSH
25226: LD_EXP 20
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: ST_TO_ADDR
// end else
25237: GO 25296
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
25239: LD_ADDR_OWVAR 47
25243: PUSH
25244: LD_STRING #X106-1
25246: PUSH
25247: LD_EXP 47
25251: PUSH
25252: LD_INT 0
25254: PLUS
25255: PUSH
25256: LD_EXP 47
25260: PPUSH
25261: LD_INT 55
25263: PUSH
25264: EMPTY
25265: LIST
25266: PPUSH
25267: CALL_OW 72
25271: PUSH
25272: LD_INT 0
25274: PLUS
25275: MINUS
25276: PPUSH
25277: CALL 64309 0 1
25281: PUSH
25282: LD_STRING #X106-3
25284: PUSH
25285: LD_EXP 19
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: ST_TO_ADDR
// end ; end ; end_of_file
25296: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25297: LD_INT 0
25299: PPUSH
25300: PPUSH
// if exist_mode then
25301: LD_VAR 0 2
25305: IFFALSE 25330
// unit := CreateCharacter ( prefix & ident ) else
25307: LD_ADDR_VAR 0 5
25311: PUSH
25312: LD_VAR 0 3
25316: PUSH
25317: LD_VAR 0 1
25321: STR
25322: PPUSH
25323: CALL_OW 34
25327: ST_TO_ADDR
25328: GO 25345
// unit := NewCharacter ( ident ) ;
25330: LD_ADDR_VAR 0 5
25334: PUSH
25335: LD_VAR 0 1
25339: PPUSH
25340: CALL_OW 25
25344: ST_TO_ADDR
// result := unit ;
25345: LD_ADDR_VAR 0 4
25349: PUSH
25350: LD_VAR 0 5
25354: ST_TO_ADDR
// end ;
25355: LD_VAR 0 4
25359: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25360: LD_INT 0
25362: PPUSH
25363: PPUSH
// if not side or not nation then
25364: LD_VAR 0 1
25368: NOT
25369: PUSH
25370: LD_VAR 0 2
25374: NOT
25375: OR
25376: IFFALSE 25380
// exit ;
25378: GO 26148
// case nation of nation_american :
25380: LD_VAR 0 2
25384: PUSH
25385: LD_INT 1
25387: DOUBLE
25388: EQUAL
25389: IFTRUE 25393
25391: GO 25607
25393: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25394: LD_ADDR_VAR 0 4
25398: PUSH
25399: LD_INT 35
25401: PUSH
25402: LD_INT 45
25404: PUSH
25405: LD_INT 46
25407: PUSH
25408: LD_INT 47
25410: PUSH
25411: LD_INT 82
25413: PUSH
25414: LD_INT 83
25416: PUSH
25417: LD_INT 84
25419: PUSH
25420: LD_INT 85
25422: PUSH
25423: LD_INT 86
25425: PUSH
25426: LD_INT 1
25428: PUSH
25429: LD_INT 2
25431: PUSH
25432: LD_INT 6
25434: PUSH
25435: LD_INT 15
25437: PUSH
25438: LD_INT 16
25440: PUSH
25441: LD_INT 7
25443: PUSH
25444: LD_INT 12
25446: PUSH
25447: LD_INT 13
25449: PUSH
25450: LD_INT 10
25452: PUSH
25453: LD_INT 14
25455: PUSH
25456: LD_INT 20
25458: PUSH
25459: LD_INT 21
25461: PUSH
25462: LD_INT 22
25464: PUSH
25465: LD_INT 25
25467: PUSH
25468: LD_INT 32
25470: PUSH
25471: LD_INT 27
25473: PUSH
25474: LD_INT 36
25476: PUSH
25477: LD_INT 69
25479: PUSH
25480: LD_INT 39
25482: PUSH
25483: LD_INT 34
25485: PUSH
25486: LD_INT 40
25488: PUSH
25489: LD_INT 48
25491: PUSH
25492: LD_INT 49
25494: PUSH
25495: LD_INT 50
25497: PUSH
25498: LD_INT 51
25500: PUSH
25501: LD_INT 52
25503: PUSH
25504: LD_INT 53
25506: PUSH
25507: LD_INT 54
25509: PUSH
25510: LD_INT 55
25512: PUSH
25513: LD_INT 56
25515: PUSH
25516: LD_INT 57
25518: PUSH
25519: LD_INT 58
25521: PUSH
25522: LD_INT 59
25524: PUSH
25525: LD_INT 60
25527: PUSH
25528: LD_INT 61
25530: PUSH
25531: LD_INT 62
25533: PUSH
25534: LD_INT 80
25536: PUSH
25537: LD_INT 82
25539: PUSH
25540: LD_INT 83
25542: PUSH
25543: LD_INT 84
25545: PUSH
25546: LD_INT 85
25548: PUSH
25549: LD_INT 86
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: ST_TO_ADDR
25605: GO 26072
25607: LD_INT 2
25609: DOUBLE
25610: EQUAL
25611: IFTRUE 25615
25613: GO 25841
25615: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25616: LD_ADDR_VAR 0 4
25620: PUSH
25621: LD_INT 35
25623: PUSH
25624: LD_INT 45
25626: PUSH
25627: LD_INT 46
25629: PUSH
25630: LD_INT 47
25632: PUSH
25633: LD_INT 82
25635: PUSH
25636: LD_INT 83
25638: PUSH
25639: LD_INT 84
25641: PUSH
25642: LD_INT 85
25644: PUSH
25645: LD_INT 87
25647: PUSH
25648: LD_INT 70
25650: PUSH
25651: LD_INT 1
25653: PUSH
25654: LD_INT 11
25656: PUSH
25657: LD_INT 3
25659: PUSH
25660: LD_INT 4
25662: PUSH
25663: LD_INT 5
25665: PUSH
25666: LD_INT 6
25668: PUSH
25669: LD_INT 15
25671: PUSH
25672: LD_INT 18
25674: PUSH
25675: LD_INT 7
25677: PUSH
25678: LD_INT 17
25680: PUSH
25681: LD_INT 8
25683: PUSH
25684: LD_INT 20
25686: PUSH
25687: LD_INT 21
25689: PUSH
25690: LD_INT 22
25692: PUSH
25693: LD_INT 72
25695: PUSH
25696: LD_INT 26
25698: PUSH
25699: LD_INT 69
25701: PUSH
25702: LD_INT 39
25704: PUSH
25705: LD_INT 40
25707: PUSH
25708: LD_INT 41
25710: PUSH
25711: LD_INT 42
25713: PUSH
25714: LD_INT 43
25716: PUSH
25717: LD_INT 48
25719: PUSH
25720: LD_INT 49
25722: PUSH
25723: LD_INT 50
25725: PUSH
25726: LD_INT 51
25728: PUSH
25729: LD_INT 52
25731: PUSH
25732: LD_INT 53
25734: PUSH
25735: LD_INT 54
25737: PUSH
25738: LD_INT 55
25740: PUSH
25741: LD_INT 56
25743: PUSH
25744: LD_INT 60
25746: PUSH
25747: LD_INT 61
25749: PUSH
25750: LD_INT 62
25752: PUSH
25753: LD_INT 66
25755: PUSH
25756: LD_INT 67
25758: PUSH
25759: LD_INT 68
25761: PUSH
25762: LD_INT 81
25764: PUSH
25765: LD_INT 82
25767: PUSH
25768: LD_INT 83
25770: PUSH
25771: LD_INT 84
25773: PUSH
25774: LD_INT 85
25776: PUSH
25777: LD_INT 87
25779: PUSH
25780: LD_INT 88
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: ST_TO_ADDR
25839: GO 26072
25841: LD_INT 3
25843: DOUBLE
25844: EQUAL
25845: IFTRUE 25849
25847: GO 26071
25849: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25850: LD_ADDR_VAR 0 4
25854: PUSH
25855: LD_INT 46
25857: PUSH
25858: LD_INT 47
25860: PUSH
25861: LD_INT 1
25863: PUSH
25864: LD_INT 2
25866: PUSH
25867: LD_INT 82
25869: PUSH
25870: LD_INT 83
25872: PUSH
25873: LD_INT 84
25875: PUSH
25876: LD_INT 85
25878: PUSH
25879: LD_INT 86
25881: PUSH
25882: LD_INT 11
25884: PUSH
25885: LD_INT 9
25887: PUSH
25888: LD_INT 20
25890: PUSH
25891: LD_INT 19
25893: PUSH
25894: LD_INT 21
25896: PUSH
25897: LD_INT 24
25899: PUSH
25900: LD_INT 22
25902: PUSH
25903: LD_INT 25
25905: PUSH
25906: LD_INT 28
25908: PUSH
25909: LD_INT 29
25911: PUSH
25912: LD_INT 30
25914: PUSH
25915: LD_INT 31
25917: PUSH
25918: LD_INT 37
25920: PUSH
25921: LD_INT 38
25923: PUSH
25924: LD_INT 32
25926: PUSH
25927: LD_INT 27
25929: PUSH
25930: LD_INT 33
25932: PUSH
25933: LD_INT 69
25935: PUSH
25936: LD_INT 39
25938: PUSH
25939: LD_INT 34
25941: PUSH
25942: LD_INT 40
25944: PUSH
25945: LD_INT 71
25947: PUSH
25948: LD_INT 23
25950: PUSH
25951: LD_INT 44
25953: PUSH
25954: LD_INT 48
25956: PUSH
25957: LD_INT 49
25959: PUSH
25960: LD_INT 50
25962: PUSH
25963: LD_INT 51
25965: PUSH
25966: LD_INT 52
25968: PUSH
25969: LD_INT 53
25971: PUSH
25972: LD_INT 54
25974: PUSH
25975: LD_INT 55
25977: PUSH
25978: LD_INT 56
25980: PUSH
25981: LD_INT 57
25983: PUSH
25984: LD_INT 58
25986: PUSH
25987: LD_INT 59
25989: PUSH
25990: LD_INT 63
25992: PUSH
25993: LD_INT 64
25995: PUSH
25996: LD_INT 65
25998: PUSH
25999: LD_INT 82
26001: PUSH
26002: LD_INT 83
26004: PUSH
26005: LD_INT 84
26007: PUSH
26008: LD_INT 85
26010: PUSH
26011: LD_INT 86
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: ST_TO_ADDR
26069: GO 26072
26071: POP
// if state > - 1 and state < 3 then
26072: LD_VAR 0 3
26076: PUSH
26077: LD_INT 1
26079: NEG
26080: GREATER
26081: PUSH
26082: LD_VAR 0 3
26086: PUSH
26087: LD_INT 3
26089: LESS
26090: AND
26091: IFFALSE 26148
// for i in result do
26093: LD_ADDR_VAR 0 5
26097: PUSH
26098: LD_VAR 0 4
26102: PUSH
26103: FOR_IN
26104: IFFALSE 26146
// if GetTech ( i , side ) <> state then
26106: LD_VAR 0 5
26110: PPUSH
26111: LD_VAR 0 1
26115: PPUSH
26116: CALL_OW 321
26120: PUSH
26121: LD_VAR 0 3
26125: NONEQUAL
26126: IFFALSE 26144
// result := result diff i ;
26128: LD_ADDR_VAR 0 4
26132: PUSH
26133: LD_VAR 0 4
26137: PUSH
26138: LD_VAR 0 5
26142: DIFF
26143: ST_TO_ADDR
26144: GO 26103
26146: POP
26147: POP
// end ;
26148: LD_VAR 0 4
26152: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26153: LD_INT 0
26155: PPUSH
26156: PPUSH
26157: PPUSH
// result := true ;
26158: LD_ADDR_VAR 0 3
26162: PUSH
26163: LD_INT 1
26165: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26166: LD_ADDR_VAR 0 5
26170: PUSH
26171: LD_VAR 0 2
26175: PPUSH
26176: CALL_OW 480
26180: ST_TO_ADDR
// if not tmp then
26181: LD_VAR 0 5
26185: NOT
26186: IFFALSE 26190
// exit ;
26188: GO 26239
// for i in tmp do
26190: LD_ADDR_VAR 0 4
26194: PUSH
26195: LD_VAR 0 5
26199: PUSH
26200: FOR_IN
26201: IFFALSE 26237
// if GetTech ( i , side ) <> state_researched then
26203: LD_VAR 0 4
26207: PPUSH
26208: LD_VAR 0 1
26212: PPUSH
26213: CALL_OW 321
26217: PUSH
26218: LD_INT 2
26220: NONEQUAL
26221: IFFALSE 26235
// begin result := false ;
26223: LD_ADDR_VAR 0 3
26227: PUSH
26228: LD_INT 0
26230: ST_TO_ADDR
// exit ;
26231: POP
26232: POP
26233: GO 26239
// end ;
26235: GO 26200
26237: POP
26238: POP
// end ;
26239: LD_VAR 0 3
26243: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26244: LD_INT 0
26246: PPUSH
26247: PPUSH
26248: PPUSH
26249: PPUSH
26250: PPUSH
26251: PPUSH
26252: PPUSH
26253: PPUSH
26254: PPUSH
26255: PPUSH
26256: PPUSH
26257: PPUSH
26258: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26259: LD_VAR 0 1
26263: NOT
26264: PUSH
26265: LD_VAR 0 1
26269: PPUSH
26270: CALL_OW 257
26274: PUSH
26275: LD_INT 9
26277: NONEQUAL
26278: OR
26279: IFFALSE 26283
// exit ;
26281: GO 26856
// side := GetSide ( unit ) ;
26283: LD_ADDR_VAR 0 9
26287: PUSH
26288: LD_VAR 0 1
26292: PPUSH
26293: CALL_OW 255
26297: ST_TO_ADDR
// tech_space := tech_spacanom ;
26298: LD_ADDR_VAR 0 12
26302: PUSH
26303: LD_INT 29
26305: ST_TO_ADDR
// tech_time := tech_taurad ;
26306: LD_ADDR_VAR 0 13
26310: PUSH
26311: LD_INT 28
26313: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26314: LD_ADDR_VAR 0 11
26318: PUSH
26319: LD_VAR 0 1
26323: PPUSH
26324: CALL_OW 310
26328: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26329: LD_VAR 0 11
26333: PPUSH
26334: CALL_OW 247
26338: PUSH
26339: LD_INT 2
26341: EQUAL
26342: IFFALSE 26346
// exit ;
26344: GO 26856
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26346: LD_ADDR_VAR 0 8
26350: PUSH
26351: LD_INT 81
26353: PUSH
26354: LD_VAR 0 9
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 3
26365: PUSH
26366: LD_INT 21
26368: PUSH
26369: LD_INT 3
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PPUSH
26384: CALL_OW 69
26388: ST_TO_ADDR
// if not tmp then
26389: LD_VAR 0 8
26393: NOT
26394: IFFALSE 26398
// exit ;
26396: GO 26856
// if in_unit then
26398: LD_VAR 0 11
26402: IFFALSE 26426
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26404: LD_ADDR_VAR 0 10
26408: PUSH
26409: LD_VAR 0 8
26413: PPUSH
26414: LD_VAR 0 11
26418: PPUSH
26419: CALL_OW 74
26423: ST_TO_ADDR
26424: GO 26446
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26426: LD_ADDR_VAR 0 10
26430: PUSH
26431: LD_VAR 0 8
26435: PPUSH
26436: LD_VAR 0 1
26440: PPUSH
26441: CALL_OW 74
26445: ST_TO_ADDR
// if not enemy then
26446: LD_VAR 0 10
26450: NOT
26451: IFFALSE 26455
// exit ;
26453: GO 26856
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26455: LD_VAR 0 11
26459: PUSH
26460: LD_VAR 0 11
26464: PPUSH
26465: LD_VAR 0 10
26469: PPUSH
26470: CALL_OW 296
26474: PUSH
26475: LD_INT 13
26477: GREATER
26478: AND
26479: PUSH
26480: LD_VAR 0 1
26484: PPUSH
26485: LD_VAR 0 10
26489: PPUSH
26490: CALL_OW 296
26494: PUSH
26495: LD_INT 12
26497: GREATER
26498: OR
26499: IFFALSE 26503
// exit ;
26501: GO 26856
// missile := [ 1 ] ;
26503: LD_ADDR_VAR 0 14
26507: PUSH
26508: LD_INT 1
26510: PUSH
26511: EMPTY
26512: LIST
26513: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26514: LD_VAR 0 9
26518: PPUSH
26519: LD_VAR 0 12
26523: PPUSH
26524: CALL_OW 325
26528: IFFALSE 26557
// missile := Replace ( missile , missile + 1 , 2 ) ;
26530: LD_ADDR_VAR 0 14
26534: PUSH
26535: LD_VAR 0 14
26539: PPUSH
26540: LD_VAR 0 14
26544: PUSH
26545: LD_INT 1
26547: PLUS
26548: PPUSH
26549: LD_INT 2
26551: PPUSH
26552: CALL_OW 1
26556: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26557: LD_VAR 0 9
26561: PPUSH
26562: LD_VAR 0 13
26566: PPUSH
26567: CALL_OW 325
26571: PUSH
26572: LD_VAR 0 10
26576: PPUSH
26577: CALL_OW 255
26581: PPUSH
26582: LD_VAR 0 13
26586: PPUSH
26587: CALL_OW 325
26591: NOT
26592: AND
26593: IFFALSE 26622
// missile := Replace ( missile , missile + 1 , 3 ) ;
26595: LD_ADDR_VAR 0 14
26599: PUSH
26600: LD_VAR 0 14
26604: PPUSH
26605: LD_VAR 0 14
26609: PUSH
26610: LD_INT 1
26612: PLUS
26613: PPUSH
26614: LD_INT 3
26616: PPUSH
26617: CALL_OW 1
26621: ST_TO_ADDR
// if missile < 2 then
26622: LD_VAR 0 14
26626: PUSH
26627: LD_INT 2
26629: LESS
26630: IFFALSE 26634
// exit ;
26632: GO 26856
// x := GetX ( enemy ) ;
26634: LD_ADDR_VAR 0 4
26638: PUSH
26639: LD_VAR 0 10
26643: PPUSH
26644: CALL_OW 250
26648: ST_TO_ADDR
// y := GetY ( enemy ) ;
26649: LD_ADDR_VAR 0 5
26653: PUSH
26654: LD_VAR 0 10
26658: PPUSH
26659: CALL_OW 251
26663: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26664: LD_ADDR_VAR 0 6
26668: PUSH
26669: LD_VAR 0 4
26673: PUSH
26674: LD_INT 1
26676: NEG
26677: PPUSH
26678: LD_INT 1
26680: PPUSH
26681: CALL_OW 12
26685: PLUS
26686: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26687: LD_ADDR_VAR 0 7
26691: PUSH
26692: LD_VAR 0 5
26696: PUSH
26697: LD_INT 1
26699: NEG
26700: PPUSH
26701: LD_INT 1
26703: PPUSH
26704: CALL_OW 12
26708: PLUS
26709: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26710: LD_VAR 0 6
26714: PPUSH
26715: LD_VAR 0 7
26719: PPUSH
26720: CALL_OW 488
26724: NOT
26725: IFFALSE 26747
// begin _x := x ;
26727: LD_ADDR_VAR 0 6
26731: PUSH
26732: LD_VAR 0 4
26736: ST_TO_ADDR
// _y := y ;
26737: LD_ADDR_VAR 0 7
26741: PUSH
26742: LD_VAR 0 5
26746: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26747: LD_ADDR_VAR 0 3
26751: PUSH
26752: LD_INT 1
26754: PPUSH
26755: LD_VAR 0 14
26759: PPUSH
26760: CALL_OW 12
26764: ST_TO_ADDR
// case i of 1 :
26765: LD_VAR 0 3
26769: PUSH
26770: LD_INT 1
26772: DOUBLE
26773: EQUAL
26774: IFTRUE 26778
26776: GO 26795
26778: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26779: LD_VAR 0 1
26783: PPUSH
26784: LD_VAR 0 10
26788: PPUSH
26789: CALL_OW 115
26793: GO 26856
26795: LD_INT 2
26797: DOUBLE
26798: EQUAL
26799: IFTRUE 26803
26801: GO 26825
26803: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26804: LD_VAR 0 1
26808: PPUSH
26809: LD_VAR 0 6
26813: PPUSH
26814: LD_VAR 0 7
26818: PPUSH
26819: CALL_OW 153
26823: GO 26856
26825: LD_INT 3
26827: DOUBLE
26828: EQUAL
26829: IFTRUE 26833
26831: GO 26855
26833: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26834: LD_VAR 0 1
26838: PPUSH
26839: LD_VAR 0 6
26843: PPUSH
26844: LD_VAR 0 7
26848: PPUSH
26849: CALL_OW 154
26853: GO 26856
26855: POP
// end ;
26856: LD_VAR 0 2
26860: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26861: LD_INT 0
26863: PPUSH
26864: PPUSH
26865: PPUSH
26866: PPUSH
26867: PPUSH
26868: PPUSH
// if not unit or not building then
26869: LD_VAR 0 1
26873: NOT
26874: PUSH
26875: LD_VAR 0 2
26879: NOT
26880: OR
26881: IFFALSE 26885
// exit ;
26883: GO 27043
// x := GetX ( building ) ;
26885: LD_ADDR_VAR 0 5
26889: PUSH
26890: LD_VAR 0 2
26894: PPUSH
26895: CALL_OW 250
26899: ST_TO_ADDR
// y := GetY ( building ) ;
26900: LD_ADDR_VAR 0 6
26904: PUSH
26905: LD_VAR 0 2
26909: PPUSH
26910: CALL_OW 251
26914: ST_TO_ADDR
// for i = 0 to 5 do
26915: LD_ADDR_VAR 0 4
26919: PUSH
26920: DOUBLE
26921: LD_INT 0
26923: DEC
26924: ST_TO_ADDR
26925: LD_INT 5
26927: PUSH
26928: FOR_TO
26929: IFFALSE 27041
// begin _x := ShiftX ( x , i , 3 ) ;
26931: LD_ADDR_VAR 0 7
26935: PUSH
26936: LD_VAR 0 5
26940: PPUSH
26941: LD_VAR 0 4
26945: PPUSH
26946: LD_INT 3
26948: PPUSH
26949: CALL_OW 272
26953: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26954: LD_ADDR_VAR 0 8
26958: PUSH
26959: LD_VAR 0 6
26963: PPUSH
26964: LD_VAR 0 4
26968: PPUSH
26969: LD_INT 3
26971: PPUSH
26972: CALL_OW 273
26976: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26977: LD_VAR 0 7
26981: PPUSH
26982: LD_VAR 0 8
26986: PPUSH
26987: CALL_OW 488
26991: NOT
26992: IFFALSE 26996
// continue ;
26994: GO 26928
// if HexInfo ( _x , _y ) = 0 then
26996: LD_VAR 0 7
27000: PPUSH
27001: LD_VAR 0 8
27005: PPUSH
27006: CALL_OW 428
27010: PUSH
27011: LD_INT 0
27013: EQUAL
27014: IFFALSE 27039
// begin ComMoveXY ( unit , _x , _y ) ;
27016: LD_VAR 0 1
27020: PPUSH
27021: LD_VAR 0 7
27025: PPUSH
27026: LD_VAR 0 8
27030: PPUSH
27031: CALL_OW 111
// exit ;
27035: POP
27036: POP
27037: GO 27043
// end ; end ;
27039: GO 26928
27041: POP
27042: POP
// end ;
27043: LD_VAR 0 3
27047: RET
// export function ScanBase ( side , base_area ) ; begin
27048: LD_INT 0
27050: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27051: LD_ADDR_VAR 0 3
27055: PUSH
27056: LD_VAR 0 2
27060: PPUSH
27061: LD_INT 81
27063: PUSH
27064: LD_VAR 0 1
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PPUSH
27073: CALL_OW 70
27077: ST_TO_ADDR
// end ;
27078: LD_VAR 0 3
27082: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27083: LD_INT 0
27085: PPUSH
27086: PPUSH
27087: PPUSH
27088: PPUSH
// result := false ;
27089: LD_ADDR_VAR 0 2
27093: PUSH
27094: LD_INT 0
27096: ST_TO_ADDR
// side := GetSide ( unit ) ;
27097: LD_ADDR_VAR 0 3
27101: PUSH
27102: LD_VAR 0 1
27106: PPUSH
27107: CALL_OW 255
27111: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27112: LD_ADDR_VAR 0 4
27116: PUSH
27117: LD_VAR 0 1
27121: PPUSH
27122: CALL_OW 248
27126: ST_TO_ADDR
// case nat of 1 :
27127: LD_VAR 0 4
27131: PUSH
27132: LD_INT 1
27134: DOUBLE
27135: EQUAL
27136: IFTRUE 27140
27138: GO 27151
27140: POP
// tech := tech_lassight ; 2 :
27141: LD_ADDR_VAR 0 5
27145: PUSH
27146: LD_INT 12
27148: ST_TO_ADDR
27149: GO 27190
27151: LD_INT 2
27153: DOUBLE
27154: EQUAL
27155: IFTRUE 27159
27157: GO 27170
27159: POP
// tech := tech_mortar ; 3 :
27160: LD_ADDR_VAR 0 5
27164: PUSH
27165: LD_INT 41
27167: ST_TO_ADDR
27168: GO 27190
27170: LD_INT 3
27172: DOUBLE
27173: EQUAL
27174: IFTRUE 27178
27176: GO 27189
27178: POP
// tech := tech_bazooka ; end ;
27179: LD_ADDR_VAR 0 5
27183: PUSH
27184: LD_INT 44
27186: ST_TO_ADDR
27187: GO 27190
27189: POP
// if Researched ( side , tech ) then
27190: LD_VAR 0 3
27194: PPUSH
27195: LD_VAR 0 5
27199: PPUSH
27200: CALL_OW 325
27204: IFFALSE 27231
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27206: LD_ADDR_VAR 0 2
27210: PUSH
27211: LD_INT 5
27213: PUSH
27214: LD_INT 8
27216: PUSH
27217: LD_INT 9
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: LIST
27224: PUSH
27225: LD_VAR 0 4
27229: ARRAY
27230: ST_TO_ADDR
// end ;
27231: LD_VAR 0 2
27235: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27236: LD_INT 0
27238: PPUSH
27239: PPUSH
27240: PPUSH
// if not mines then
27241: LD_VAR 0 2
27245: NOT
27246: IFFALSE 27250
// exit ;
27248: GO 27394
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27250: LD_ADDR_VAR 0 5
27254: PUSH
27255: LD_INT 81
27257: PUSH
27258: LD_VAR 0 1
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 3
27269: PUSH
27270: LD_INT 21
27272: PUSH
27273: LD_INT 3
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PPUSH
27288: CALL_OW 69
27292: ST_TO_ADDR
// for i in mines do
27293: LD_ADDR_VAR 0 4
27297: PUSH
27298: LD_VAR 0 2
27302: PUSH
27303: FOR_IN
27304: IFFALSE 27392
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27306: LD_VAR 0 4
27310: PUSH
27311: LD_INT 1
27313: ARRAY
27314: PPUSH
27315: LD_VAR 0 4
27319: PUSH
27320: LD_INT 2
27322: ARRAY
27323: PPUSH
27324: CALL_OW 458
27328: NOT
27329: IFFALSE 27333
// continue ;
27331: GO 27303
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27333: LD_VAR 0 4
27337: PUSH
27338: LD_INT 1
27340: ARRAY
27341: PPUSH
27342: LD_VAR 0 4
27346: PUSH
27347: LD_INT 2
27349: ARRAY
27350: PPUSH
27351: CALL_OW 428
27355: PUSH
27356: LD_VAR 0 5
27360: IN
27361: IFFALSE 27390
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27363: LD_VAR 0 4
27367: PUSH
27368: LD_INT 1
27370: ARRAY
27371: PPUSH
27372: LD_VAR 0 4
27376: PUSH
27377: LD_INT 2
27379: ARRAY
27380: PPUSH
27381: LD_VAR 0 1
27385: PPUSH
27386: CALL_OW 456
// end ;
27390: GO 27303
27392: POP
27393: POP
// end ;
27394: LD_VAR 0 3
27398: RET
// export function Count ( array ) ; var i ; begin
27399: LD_INT 0
27401: PPUSH
27402: PPUSH
// result := 0 ;
27403: LD_ADDR_VAR 0 2
27407: PUSH
27408: LD_INT 0
27410: ST_TO_ADDR
// for i in array do
27411: LD_ADDR_VAR 0 3
27415: PUSH
27416: LD_VAR 0 1
27420: PUSH
27421: FOR_IN
27422: IFFALSE 27446
// if i then
27424: LD_VAR 0 3
27428: IFFALSE 27444
// result := result + 1 ;
27430: LD_ADDR_VAR 0 2
27434: PUSH
27435: LD_VAR 0 2
27439: PUSH
27440: LD_INT 1
27442: PLUS
27443: ST_TO_ADDR
27444: GO 27421
27446: POP
27447: POP
// end ;
27448: LD_VAR 0 2
27452: RET
// export function IsEmpty ( building ) ; begin
27453: LD_INT 0
27455: PPUSH
// if not building then
27456: LD_VAR 0 1
27460: NOT
27461: IFFALSE 27465
// exit ;
27463: GO 27508
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27465: LD_ADDR_VAR 0 2
27469: PUSH
27470: LD_VAR 0 1
27474: PUSH
27475: LD_INT 22
27477: PUSH
27478: LD_VAR 0 1
27482: PPUSH
27483: CALL_OW 255
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 58
27494: PUSH
27495: EMPTY
27496: LIST
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PPUSH
27502: CALL_OW 69
27506: IN
27507: ST_TO_ADDR
// end ;
27508: LD_VAR 0 2
27512: RET
// export function IsNotFull ( building ) ; var places ; begin
27513: LD_INT 0
27515: PPUSH
27516: PPUSH
// if not building then
27517: LD_VAR 0 1
27521: NOT
27522: IFFALSE 27526
// exit ;
27524: GO 27697
// result := false ;
27526: LD_ADDR_VAR 0 2
27530: PUSH
27531: LD_INT 0
27533: ST_TO_ADDR
// places := 0 ;
27534: LD_ADDR_VAR 0 3
27538: PUSH
27539: LD_INT 0
27541: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
27542: LD_VAR 0 1
27546: PPUSH
27547: CALL_OW 266
27551: PUSH
27552: LD_INT 0
27554: DOUBLE
27555: EQUAL
27556: IFTRUE 27614
27558: LD_INT 1
27560: DOUBLE
27561: EQUAL
27562: IFTRUE 27614
27564: LD_INT 6
27566: DOUBLE
27567: EQUAL
27568: IFTRUE 27614
27570: LD_INT 7
27572: DOUBLE
27573: EQUAL
27574: IFTRUE 27614
27576: LD_INT 8
27578: DOUBLE
27579: EQUAL
27580: IFTRUE 27614
27582: LD_INT 4
27584: DOUBLE
27585: EQUAL
27586: IFTRUE 27614
27588: LD_INT 5
27590: DOUBLE
27591: EQUAL
27592: IFTRUE 27614
27594: LD_INT 2
27596: DOUBLE
27597: EQUAL
27598: IFTRUE 27614
27600: LD_INT 3
27602: DOUBLE
27603: EQUAL
27604: IFTRUE 27614
27606: LD_INT 35
27608: DOUBLE
27609: EQUAL
27610: IFTRUE 27614
27612: GO 27625
27614: POP
// places := 6 ; b_bunker , b_breastwork :
27615: LD_ADDR_VAR 0 3
27619: PUSH
27620: LD_INT 6
27622: ST_TO_ADDR
27623: GO 27670
27625: LD_INT 32
27627: DOUBLE
27628: EQUAL
27629: IFTRUE 27639
27631: LD_INT 31
27633: DOUBLE
27634: EQUAL
27635: IFTRUE 27639
27637: GO 27650
27639: POP
// places := 1 ; b_control_tower :
27640: LD_ADDR_VAR 0 3
27644: PUSH
27645: LD_INT 1
27647: ST_TO_ADDR
27648: GO 27670
27650: LD_INT 36
27652: DOUBLE
27653: EQUAL
27654: IFTRUE 27658
27656: GO 27669
27658: POP
// places := 3 ; end ;
27659: LD_ADDR_VAR 0 3
27663: PUSH
27664: LD_INT 3
27666: ST_TO_ADDR
27667: GO 27670
27669: POP
// if places then
27670: LD_VAR 0 3
27674: IFFALSE 27697
// result := UnitsInside ( building ) < places ;
27676: LD_ADDR_VAR 0 2
27680: PUSH
27681: LD_VAR 0 1
27685: PPUSH
27686: CALL_OW 313
27690: PUSH
27691: LD_VAR 0 3
27695: LESS
27696: ST_TO_ADDR
// end ;
27697: LD_VAR 0 2
27701: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27702: LD_INT 0
27704: PPUSH
27705: PPUSH
27706: PPUSH
27707: PPUSH
// tmp := [ ] ;
27708: LD_ADDR_VAR 0 3
27712: PUSH
27713: EMPTY
27714: ST_TO_ADDR
// list := [ ] ;
27715: LD_ADDR_VAR 0 5
27719: PUSH
27720: EMPTY
27721: ST_TO_ADDR
// for i = 16 to 25 do
27722: LD_ADDR_VAR 0 4
27726: PUSH
27727: DOUBLE
27728: LD_INT 16
27730: DEC
27731: ST_TO_ADDR
27732: LD_INT 25
27734: PUSH
27735: FOR_TO
27736: IFFALSE 27809
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27738: LD_ADDR_VAR 0 3
27742: PUSH
27743: LD_VAR 0 3
27747: PUSH
27748: LD_INT 22
27750: PUSH
27751: LD_VAR 0 1
27755: PPUSH
27756: CALL_OW 255
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 91
27767: PUSH
27768: LD_VAR 0 1
27772: PUSH
27773: LD_INT 6
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: LIST
27780: PUSH
27781: LD_INT 30
27783: PUSH
27784: LD_VAR 0 4
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: LIST
27797: PUSH
27798: EMPTY
27799: LIST
27800: PPUSH
27801: CALL_OW 69
27805: ADD
27806: ST_TO_ADDR
27807: GO 27735
27809: POP
27810: POP
// for i = 1 to tmp do
27811: LD_ADDR_VAR 0 4
27815: PUSH
27816: DOUBLE
27817: LD_INT 1
27819: DEC
27820: ST_TO_ADDR
27821: LD_VAR 0 3
27825: PUSH
27826: FOR_TO
27827: IFFALSE 27915
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27829: LD_ADDR_VAR 0 5
27833: PUSH
27834: LD_VAR 0 5
27838: PUSH
27839: LD_VAR 0 3
27843: PUSH
27844: LD_VAR 0 4
27848: ARRAY
27849: PPUSH
27850: CALL_OW 266
27854: PUSH
27855: LD_VAR 0 3
27859: PUSH
27860: LD_VAR 0 4
27864: ARRAY
27865: PPUSH
27866: CALL_OW 250
27870: PUSH
27871: LD_VAR 0 3
27875: PUSH
27876: LD_VAR 0 4
27880: ARRAY
27881: PPUSH
27882: CALL_OW 251
27886: PUSH
27887: LD_VAR 0 3
27891: PUSH
27892: LD_VAR 0 4
27896: ARRAY
27897: PPUSH
27898: CALL_OW 254
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: PUSH
27909: EMPTY
27910: LIST
27911: ADD
27912: ST_TO_ADDR
27913: GO 27826
27915: POP
27916: POP
// result := list ;
27917: LD_ADDR_VAR 0 2
27921: PUSH
27922: LD_VAR 0 5
27926: ST_TO_ADDR
// end ;
27927: LD_VAR 0 2
27931: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27932: LD_INT 0
27934: PPUSH
27935: PPUSH
27936: PPUSH
27937: PPUSH
27938: PPUSH
27939: PPUSH
27940: PPUSH
// if not factory then
27941: LD_VAR 0 1
27945: NOT
27946: IFFALSE 27950
// exit ;
27948: GO 28543
// if control = control_apeman then
27950: LD_VAR 0 4
27954: PUSH
27955: LD_INT 5
27957: EQUAL
27958: IFFALSE 28067
// begin tmp := UnitsInside ( factory ) ;
27960: LD_ADDR_VAR 0 8
27964: PUSH
27965: LD_VAR 0 1
27969: PPUSH
27970: CALL_OW 313
27974: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27975: LD_VAR 0 8
27979: PPUSH
27980: LD_INT 25
27982: PUSH
27983: LD_INT 12
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PPUSH
27990: CALL_OW 72
27994: NOT
27995: IFFALSE 28005
// control := control_manual ;
27997: LD_ADDR_VAR 0 4
28001: PUSH
28002: LD_INT 1
28004: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28005: LD_ADDR_VAR 0 8
28009: PUSH
28010: LD_VAR 0 1
28014: PPUSH
28015: CALL 27702 0 1
28019: ST_TO_ADDR
// if tmp then
28020: LD_VAR 0 8
28024: IFFALSE 28067
// begin for i in tmp do
28026: LD_ADDR_VAR 0 7
28030: PUSH
28031: LD_VAR 0 8
28035: PUSH
28036: FOR_IN
28037: IFFALSE 28065
// if i [ 1 ] = b_ext_radio then
28039: LD_VAR 0 7
28043: PUSH
28044: LD_INT 1
28046: ARRAY
28047: PUSH
28048: LD_INT 22
28050: EQUAL
28051: IFFALSE 28063
// begin control := control_remote ;
28053: LD_ADDR_VAR 0 4
28057: PUSH
28058: LD_INT 2
28060: ST_TO_ADDR
// break ;
28061: GO 28065
// end ;
28063: GO 28036
28065: POP
28066: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28067: LD_VAR 0 1
28071: PPUSH
28072: LD_VAR 0 2
28076: PPUSH
28077: LD_VAR 0 3
28081: PPUSH
28082: LD_VAR 0 4
28086: PPUSH
28087: LD_VAR 0 5
28091: PPUSH
28092: CALL_OW 448
28096: IFFALSE 28131
// begin result := [ chassis , engine , control , weapon ] ;
28098: LD_ADDR_VAR 0 6
28102: PUSH
28103: LD_VAR 0 2
28107: PUSH
28108: LD_VAR 0 3
28112: PUSH
28113: LD_VAR 0 4
28117: PUSH
28118: LD_VAR 0 5
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: ST_TO_ADDR
// exit ;
28129: GO 28543
// end ; _chassis := AvailableChassisList ( factory ) ;
28131: LD_ADDR_VAR 0 9
28135: PUSH
28136: LD_VAR 0 1
28140: PPUSH
28141: CALL_OW 475
28145: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28146: LD_ADDR_VAR 0 11
28150: PUSH
28151: LD_VAR 0 1
28155: PPUSH
28156: CALL_OW 476
28160: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28161: LD_ADDR_VAR 0 12
28165: PUSH
28166: LD_VAR 0 1
28170: PPUSH
28171: CALL_OW 477
28175: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28176: LD_ADDR_VAR 0 10
28180: PUSH
28181: LD_VAR 0 1
28185: PPUSH
28186: CALL_OW 478
28190: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28191: LD_VAR 0 9
28195: NOT
28196: PUSH
28197: LD_VAR 0 11
28201: NOT
28202: OR
28203: PUSH
28204: LD_VAR 0 12
28208: NOT
28209: OR
28210: PUSH
28211: LD_VAR 0 10
28215: NOT
28216: OR
28217: IFFALSE 28252
// begin result := [ chassis , engine , control , weapon ] ;
28219: LD_ADDR_VAR 0 6
28223: PUSH
28224: LD_VAR 0 2
28228: PUSH
28229: LD_VAR 0 3
28233: PUSH
28234: LD_VAR 0 4
28238: PUSH
28239: LD_VAR 0 5
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: ST_TO_ADDR
// exit ;
28250: GO 28543
// end ; if not chassis in _chassis then
28252: LD_VAR 0 2
28256: PUSH
28257: LD_VAR 0 9
28261: IN
28262: NOT
28263: IFFALSE 28289
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28265: LD_ADDR_VAR 0 2
28269: PUSH
28270: LD_VAR 0 9
28274: PUSH
28275: LD_INT 1
28277: PPUSH
28278: LD_VAR 0 9
28282: PPUSH
28283: CALL_OW 12
28287: ARRAY
28288: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28289: LD_VAR 0 2
28293: PPUSH
28294: LD_VAR 0 3
28298: PPUSH
28299: CALL 28548 0 2
28303: NOT
28304: IFFALSE 28363
// repeat engine := _engine [ 1 ] ;
28306: LD_ADDR_VAR 0 3
28310: PUSH
28311: LD_VAR 0 11
28315: PUSH
28316: LD_INT 1
28318: ARRAY
28319: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28320: LD_ADDR_VAR 0 11
28324: PUSH
28325: LD_VAR 0 11
28329: PPUSH
28330: LD_INT 1
28332: PPUSH
28333: CALL_OW 3
28337: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28338: LD_VAR 0 2
28342: PPUSH
28343: LD_VAR 0 3
28347: PPUSH
28348: CALL 28548 0 2
28352: PUSH
28353: LD_VAR 0 11
28357: PUSH
28358: EMPTY
28359: EQUAL
28360: OR
28361: IFFALSE 28306
// if not control in _control then
28363: LD_VAR 0 4
28367: PUSH
28368: LD_VAR 0 12
28372: IN
28373: NOT
28374: IFFALSE 28400
// control := _control [ rand ( 1 , _control ) ] ;
28376: LD_ADDR_VAR 0 4
28380: PUSH
28381: LD_VAR 0 12
28385: PUSH
28386: LD_INT 1
28388: PPUSH
28389: LD_VAR 0 12
28393: PPUSH
28394: CALL_OW 12
28398: ARRAY
28399: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28400: LD_VAR 0 2
28404: PPUSH
28405: LD_VAR 0 5
28409: PPUSH
28410: CALL 28768 0 2
28414: NOT
28415: IFFALSE 28474
// repeat weapon := _weapon [ 1 ] ;
28417: LD_ADDR_VAR 0 5
28421: PUSH
28422: LD_VAR 0 10
28426: PUSH
28427: LD_INT 1
28429: ARRAY
28430: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28431: LD_ADDR_VAR 0 10
28435: PUSH
28436: LD_VAR 0 10
28440: PPUSH
28441: LD_INT 1
28443: PPUSH
28444: CALL_OW 3
28448: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28449: LD_VAR 0 2
28453: PPUSH
28454: LD_VAR 0 5
28458: PPUSH
28459: CALL 28768 0 2
28463: PUSH
28464: LD_VAR 0 10
28468: PUSH
28469: EMPTY
28470: EQUAL
28471: OR
28472: IFFALSE 28417
// result := [ ] ;
28474: LD_ADDR_VAR 0 6
28478: PUSH
28479: EMPTY
28480: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28481: LD_VAR 0 1
28485: PPUSH
28486: LD_VAR 0 2
28490: PPUSH
28491: LD_VAR 0 3
28495: PPUSH
28496: LD_VAR 0 4
28500: PPUSH
28501: LD_VAR 0 5
28505: PPUSH
28506: CALL_OW 448
28510: IFFALSE 28543
// result := [ chassis , engine , control , weapon ] ;
28512: LD_ADDR_VAR 0 6
28516: PUSH
28517: LD_VAR 0 2
28521: PUSH
28522: LD_VAR 0 3
28526: PUSH
28527: LD_VAR 0 4
28531: PUSH
28532: LD_VAR 0 5
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: ST_TO_ADDR
// end ;
28543: LD_VAR 0 6
28547: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28548: LD_INT 0
28550: PPUSH
// if not chassis or not engine then
28551: LD_VAR 0 1
28555: NOT
28556: PUSH
28557: LD_VAR 0 2
28561: NOT
28562: OR
28563: IFFALSE 28567
// exit ;
28565: GO 28763
// case engine of engine_solar :
28567: LD_VAR 0 2
28571: PUSH
28572: LD_INT 2
28574: DOUBLE
28575: EQUAL
28576: IFTRUE 28580
28578: GO 28618
28580: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28581: LD_ADDR_VAR 0 3
28585: PUSH
28586: LD_INT 11
28588: PUSH
28589: LD_INT 12
28591: PUSH
28592: LD_INT 13
28594: PUSH
28595: LD_INT 14
28597: PUSH
28598: LD_INT 1
28600: PUSH
28601: LD_INT 2
28603: PUSH
28604: LD_INT 3
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: ST_TO_ADDR
28616: GO 28747
28618: LD_INT 1
28620: DOUBLE
28621: EQUAL
28622: IFTRUE 28626
28624: GO 28688
28626: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28627: LD_ADDR_VAR 0 3
28631: PUSH
28632: LD_INT 11
28634: PUSH
28635: LD_INT 12
28637: PUSH
28638: LD_INT 13
28640: PUSH
28641: LD_INT 14
28643: PUSH
28644: LD_INT 1
28646: PUSH
28647: LD_INT 2
28649: PUSH
28650: LD_INT 3
28652: PUSH
28653: LD_INT 4
28655: PUSH
28656: LD_INT 5
28658: PUSH
28659: LD_INT 21
28661: PUSH
28662: LD_INT 23
28664: PUSH
28665: LD_INT 22
28667: PUSH
28668: LD_INT 24
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: ST_TO_ADDR
28686: GO 28747
28688: LD_INT 3
28690: DOUBLE
28691: EQUAL
28692: IFTRUE 28696
28694: GO 28746
28696: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28697: LD_ADDR_VAR 0 3
28701: PUSH
28702: LD_INT 13
28704: PUSH
28705: LD_INT 14
28707: PUSH
28708: LD_INT 2
28710: PUSH
28711: LD_INT 3
28713: PUSH
28714: LD_INT 4
28716: PUSH
28717: LD_INT 5
28719: PUSH
28720: LD_INT 21
28722: PUSH
28723: LD_INT 22
28725: PUSH
28726: LD_INT 23
28728: PUSH
28729: LD_INT 24
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: ST_TO_ADDR
28744: GO 28747
28746: POP
// result := ( chassis in result ) ;
28747: LD_ADDR_VAR 0 3
28751: PUSH
28752: LD_VAR 0 1
28756: PUSH
28757: LD_VAR 0 3
28761: IN
28762: ST_TO_ADDR
// end ;
28763: LD_VAR 0 3
28767: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28768: LD_INT 0
28770: PPUSH
// if not chassis or not weapon then
28771: LD_VAR 0 1
28775: NOT
28776: PUSH
28777: LD_VAR 0 2
28781: NOT
28782: OR
28783: IFFALSE 28787
// exit ;
28785: GO 29849
// case weapon of us_machine_gun :
28787: LD_VAR 0 2
28791: PUSH
28792: LD_INT 2
28794: DOUBLE
28795: EQUAL
28796: IFTRUE 28800
28798: GO 28830
28800: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28801: LD_ADDR_VAR 0 3
28805: PUSH
28806: LD_INT 1
28808: PUSH
28809: LD_INT 2
28811: PUSH
28812: LD_INT 3
28814: PUSH
28815: LD_INT 4
28817: PUSH
28818: LD_INT 5
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: ST_TO_ADDR
28828: GO 29833
28830: LD_INT 3
28832: DOUBLE
28833: EQUAL
28834: IFTRUE 28838
28836: GO 28868
28838: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28839: LD_ADDR_VAR 0 3
28843: PUSH
28844: LD_INT 1
28846: PUSH
28847: LD_INT 2
28849: PUSH
28850: LD_INT 3
28852: PUSH
28853: LD_INT 4
28855: PUSH
28856: LD_INT 5
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: ST_TO_ADDR
28866: GO 29833
28868: LD_INT 11
28870: DOUBLE
28871: EQUAL
28872: IFTRUE 28876
28874: GO 28906
28876: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28877: LD_ADDR_VAR 0 3
28881: PUSH
28882: LD_INT 1
28884: PUSH
28885: LD_INT 2
28887: PUSH
28888: LD_INT 3
28890: PUSH
28891: LD_INT 4
28893: PUSH
28894: LD_INT 5
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: ST_TO_ADDR
28904: GO 29833
28906: LD_INT 4
28908: DOUBLE
28909: EQUAL
28910: IFTRUE 28914
28912: GO 28940
28914: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28915: LD_ADDR_VAR 0 3
28919: PUSH
28920: LD_INT 2
28922: PUSH
28923: LD_INT 3
28925: PUSH
28926: LD_INT 4
28928: PUSH
28929: LD_INT 5
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: ST_TO_ADDR
28938: GO 29833
28940: LD_INT 5
28942: DOUBLE
28943: EQUAL
28944: IFTRUE 28948
28946: GO 28974
28948: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28949: LD_ADDR_VAR 0 3
28953: PUSH
28954: LD_INT 2
28956: PUSH
28957: LD_INT 3
28959: PUSH
28960: LD_INT 4
28962: PUSH
28963: LD_INT 5
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: ST_TO_ADDR
28972: GO 29833
28974: LD_INT 9
28976: DOUBLE
28977: EQUAL
28978: IFTRUE 28982
28980: GO 29008
28982: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28983: LD_ADDR_VAR 0 3
28987: PUSH
28988: LD_INT 2
28990: PUSH
28991: LD_INT 3
28993: PUSH
28994: LD_INT 4
28996: PUSH
28997: LD_INT 5
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: ST_TO_ADDR
29006: GO 29833
29008: LD_INT 7
29010: DOUBLE
29011: EQUAL
29012: IFTRUE 29016
29014: GO 29042
29016: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29017: LD_ADDR_VAR 0 3
29021: PUSH
29022: LD_INT 2
29024: PUSH
29025: LD_INT 3
29027: PUSH
29028: LD_INT 4
29030: PUSH
29031: LD_INT 5
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: ST_TO_ADDR
29040: GO 29833
29042: LD_INT 12
29044: DOUBLE
29045: EQUAL
29046: IFTRUE 29050
29048: GO 29076
29050: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29051: LD_ADDR_VAR 0 3
29055: PUSH
29056: LD_INT 2
29058: PUSH
29059: LD_INT 3
29061: PUSH
29062: LD_INT 4
29064: PUSH
29065: LD_INT 5
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: ST_TO_ADDR
29074: GO 29833
29076: LD_INT 13
29078: DOUBLE
29079: EQUAL
29080: IFTRUE 29084
29082: GO 29110
29084: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29085: LD_ADDR_VAR 0 3
29089: PUSH
29090: LD_INT 2
29092: PUSH
29093: LD_INT 3
29095: PUSH
29096: LD_INT 4
29098: PUSH
29099: LD_INT 5
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: ST_TO_ADDR
29108: GO 29833
29110: LD_INT 14
29112: DOUBLE
29113: EQUAL
29114: IFTRUE 29118
29116: GO 29136
29118: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29119: LD_ADDR_VAR 0 3
29123: PUSH
29124: LD_INT 4
29126: PUSH
29127: LD_INT 5
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: ST_TO_ADDR
29134: GO 29833
29136: LD_INT 6
29138: DOUBLE
29139: EQUAL
29140: IFTRUE 29144
29142: GO 29162
29144: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29145: LD_ADDR_VAR 0 3
29149: PUSH
29150: LD_INT 4
29152: PUSH
29153: LD_INT 5
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: ST_TO_ADDR
29160: GO 29833
29162: LD_INT 10
29164: DOUBLE
29165: EQUAL
29166: IFTRUE 29170
29168: GO 29188
29170: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29171: LD_ADDR_VAR 0 3
29175: PUSH
29176: LD_INT 4
29178: PUSH
29179: LD_INT 5
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: ST_TO_ADDR
29186: GO 29833
29188: LD_INT 22
29190: DOUBLE
29191: EQUAL
29192: IFTRUE 29196
29194: GO 29222
29196: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29197: LD_ADDR_VAR 0 3
29201: PUSH
29202: LD_INT 11
29204: PUSH
29205: LD_INT 12
29207: PUSH
29208: LD_INT 13
29210: PUSH
29211: LD_INT 14
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: ST_TO_ADDR
29220: GO 29833
29222: LD_INT 23
29224: DOUBLE
29225: EQUAL
29226: IFTRUE 29230
29228: GO 29256
29230: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29231: LD_ADDR_VAR 0 3
29235: PUSH
29236: LD_INT 11
29238: PUSH
29239: LD_INT 12
29241: PUSH
29242: LD_INT 13
29244: PUSH
29245: LD_INT 14
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: ST_TO_ADDR
29254: GO 29833
29256: LD_INT 24
29258: DOUBLE
29259: EQUAL
29260: IFTRUE 29264
29262: GO 29290
29264: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29265: LD_ADDR_VAR 0 3
29269: PUSH
29270: LD_INT 11
29272: PUSH
29273: LD_INT 12
29275: PUSH
29276: LD_INT 13
29278: PUSH
29279: LD_INT 14
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: ST_TO_ADDR
29288: GO 29833
29290: LD_INT 30
29292: DOUBLE
29293: EQUAL
29294: IFTRUE 29298
29296: GO 29324
29298: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29299: LD_ADDR_VAR 0 3
29303: PUSH
29304: LD_INT 11
29306: PUSH
29307: LD_INT 12
29309: PUSH
29310: LD_INT 13
29312: PUSH
29313: LD_INT 14
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: ST_TO_ADDR
29322: GO 29833
29324: LD_INT 25
29326: DOUBLE
29327: EQUAL
29328: IFTRUE 29332
29330: GO 29350
29332: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29333: LD_ADDR_VAR 0 3
29337: PUSH
29338: LD_INT 13
29340: PUSH
29341: LD_INT 14
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: ST_TO_ADDR
29348: GO 29833
29350: LD_INT 27
29352: DOUBLE
29353: EQUAL
29354: IFTRUE 29358
29356: GO 29376
29358: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29359: LD_ADDR_VAR 0 3
29363: PUSH
29364: LD_INT 13
29366: PUSH
29367: LD_INT 14
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: ST_TO_ADDR
29374: GO 29833
29376: LD_EXP 64
29380: DOUBLE
29381: EQUAL
29382: IFTRUE 29386
29384: GO 29412
29386: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29387: LD_ADDR_VAR 0 3
29391: PUSH
29392: LD_INT 11
29394: PUSH
29395: LD_INT 12
29397: PUSH
29398: LD_INT 13
29400: PUSH
29401: LD_INT 14
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: ST_TO_ADDR
29410: GO 29833
29412: LD_INT 28
29414: DOUBLE
29415: EQUAL
29416: IFTRUE 29420
29418: GO 29438
29420: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29421: LD_ADDR_VAR 0 3
29425: PUSH
29426: LD_INT 13
29428: PUSH
29429: LD_INT 14
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: ST_TO_ADDR
29436: GO 29833
29438: LD_INT 29
29440: DOUBLE
29441: EQUAL
29442: IFTRUE 29446
29444: GO 29464
29446: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29447: LD_ADDR_VAR 0 3
29451: PUSH
29452: LD_INT 13
29454: PUSH
29455: LD_INT 14
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: ST_TO_ADDR
29462: GO 29833
29464: LD_INT 31
29466: DOUBLE
29467: EQUAL
29468: IFTRUE 29472
29470: GO 29490
29472: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29473: LD_ADDR_VAR 0 3
29477: PUSH
29478: LD_INT 13
29480: PUSH
29481: LD_INT 14
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: ST_TO_ADDR
29488: GO 29833
29490: LD_INT 26
29492: DOUBLE
29493: EQUAL
29494: IFTRUE 29498
29496: GO 29516
29498: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29499: LD_ADDR_VAR 0 3
29503: PUSH
29504: LD_INT 13
29506: PUSH
29507: LD_INT 14
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: ST_TO_ADDR
29514: GO 29833
29516: LD_INT 42
29518: DOUBLE
29519: EQUAL
29520: IFTRUE 29524
29522: GO 29550
29524: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29525: LD_ADDR_VAR 0 3
29529: PUSH
29530: LD_INT 21
29532: PUSH
29533: LD_INT 22
29535: PUSH
29536: LD_INT 23
29538: PUSH
29539: LD_INT 24
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: ST_TO_ADDR
29548: GO 29833
29550: LD_INT 43
29552: DOUBLE
29553: EQUAL
29554: IFTRUE 29558
29556: GO 29584
29558: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29559: LD_ADDR_VAR 0 3
29563: PUSH
29564: LD_INT 21
29566: PUSH
29567: LD_INT 22
29569: PUSH
29570: LD_INT 23
29572: PUSH
29573: LD_INT 24
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: ST_TO_ADDR
29582: GO 29833
29584: LD_INT 44
29586: DOUBLE
29587: EQUAL
29588: IFTRUE 29592
29590: GO 29618
29592: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29593: LD_ADDR_VAR 0 3
29597: PUSH
29598: LD_INT 21
29600: PUSH
29601: LD_INT 22
29603: PUSH
29604: LD_INT 23
29606: PUSH
29607: LD_INT 24
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: ST_TO_ADDR
29616: GO 29833
29618: LD_INT 45
29620: DOUBLE
29621: EQUAL
29622: IFTRUE 29626
29624: GO 29652
29626: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29627: LD_ADDR_VAR 0 3
29631: PUSH
29632: LD_INT 21
29634: PUSH
29635: LD_INT 22
29637: PUSH
29638: LD_INT 23
29640: PUSH
29641: LD_INT 24
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: ST_TO_ADDR
29650: GO 29833
29652: LD_INT 49
29654: DOUBLE
29655: EQUAL
29656: IFTRUE 29660
29658: GO 29686
29660: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29661: LD_ADDR_VAR 0 3
29665: PUSH
29666: LD_INT 21
29668: PUSH
29669: LD_INT 22
29671: PUSH
29672: LD_INT 23
29674: PUSH
29675: LD_INT 24
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: ST_TO_ADDR
29684: GO 29833
29686: LD_INT 51
29688: DOUBLE
29689: EQUAL
29690: IFTRUE 29694
29692: GO 29720
29694: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29695: LD_ADDR_VAR 0 3
29699: PUSH
29700: LD_INT 21
29702: PUSH
29703: LD_INT 22
29705: PUSH
29706: LD_INT 23
29708: PUSH
29709: LD_INT 24
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: ST_TO_ADDR
29718: GO 29833
29720: LD_INT 52
29722: DOUBLE
29723: EQUAL
29724: IFTRUE 29728
29726: GO 29754
29728: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29729: LD_ADDR_VAR 0 3
29733: PUSH
29734: LD_INT 21
29736: PUSH
29737: LD_INT 22
29739: PUSH
29740: LD_INT 23
29742: PUSH
29743: LD_INT 24
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: ST_TO_ADDR
29752: GO 29833
29754: LD_INT 53
29756: DOUBLE
29757: EQUAL
29758: IFTRUE 29762
29760: GO 29780
29762: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29763: LD_ADDR_VAR 0 3
29767: PUSH
29768: LD_INT 23
29770: PUSH
29771: LD_INT 24
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: ST_TO_ADDR
29778: GO 29833
29780: LD_INT 46
29782: DOUBLE
29783: EQUAL
29784: IFTRUE 29788
29786: GO 29806
29788: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29789: LD_ADDR_VAR 0 3
29793: PUSH
29794: LD_INT 23
29796: PUSH
29797: LD_INT 24
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: ST_TO_ADDR
29804: GO 29833
29806: LD_INT 47
29808: DOUBLE
29809: EQUAL
29810: IFTRUE 29814
29812: GO 29832
29814: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29815: LD_ADDR_VAR 0 3
29819: PUSH
29820: LD_INT 23
29822: PUSH
29823: LD_INT 24
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: ST_TO_ADDR
29830: GO 29833
29832: POP
// result := ( chassis in result ) ;
29833: LD_ADDR_VAR 0 3
29837: PUSH
29838: LD_VAR 0 1
29842: PUSH
29843: LD_VAR 0 3
29847: IN
29848: ST_TO_ADDR
// end ;
29849: LD_VAR 0 3
29853: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29854: LD_INT 0
29856: PPUSH
29857: PPUSH
29858: PPUSH
29859: PPUSH
29860: PPUSH
29861: PPUSH
29862: PPUSH
// result := array ;
29863: LD_ADDR_VAR 0 5
29867: PUSH
29868: LD_VAR 0 1
29872: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29873: LD_VAR 0 1
29877: NOT
29878: PUSH
29879: LD_VAR 0 2
29883: NOT
29884: OR
29885: PUSH
29886: LD_VAR 0 3
29890: NOT
29891: OR
29892: PUSH
29893: LD_VAR 0 2
29897: PUSH
29898: LD_VAR 0 1
29902: GREATER
29903: OR
29904: PUSH
29905: LD_VAR 0 3
29909: PUSH
29910: LD_VAR 0 1
29914: GREATER
29915: OR
29916: IFFALSE 29920
// exit ;
29918: GO 30216
// if direction then
29920: LD_VAR 0 4
29924: IFFALSE 29988
// begin d := 1 ;
29926: LD_ADDR_VAR 0 9
29930: PUSH
29931: LD_INT 1
29933: ST_TO_ADDR
// if i_from > i_to then
29934: LD_VAR 0 2
29938: PUSH
29939: LD_VAR 0 3
29943: GREATER
29944: IFFALSE 29970
// length := ( array - i_from ) + i_to else
29946: LD_ADDR_VAR 0 11
29950: PUSH
29951: LD_VAR 0 1
29955: PUSH
29956: LD_VAR 0 2
29960: MINUS
29961: PUSH
29962: LD_VAR 0 3
29966: PLUS
29967: ST_TO_ADDR
29968: GO 29986
// length := i_to - i_from ;
29970: LD_ADDR_VAR 0 11
29974: PUSH
29975: LD_VAR 0 3
29979: PUSH
29980: LD_VAR 0 2
29984: MINUS
29985: ST_TO_ADDR
// end else
29986: GO 30049
// begin d := - 1 ;
29988: LD_ADDR_VAR 0 9
29992: PUSH
29993: LD_INT 1
29995: NEG
29996: ST_TO_ADDR
// if i_from > i_to then
29997: LD_VAR 0 2
30001: PUSH
30002: LD_VAR 0 3
30006: GREATER
30007: IFFALSE 30027
// length := i_from - i_to else
30009: LD_ADDR_VAR 0 11
30013: PUSH
30014: LD_VAR 0 2
30018: PUSH
30019: LD_VAR 0 3
30023: MINUS
30024: ST_TO_ADDR
30025: GO 30049
// length := ( array - i_to ) + i_from ;
30027: LD_ADDR_VAR 0 11
30031: PUSH
30032: LD_VAR 0 1
30036: PUSH
30037: LD_VAR 0 3
30041: MINUS
30042: PUSH
30043: LD_VAR 0 2
30047: PLUS
30048: ST_TO_ADDR
// end ; if not length then
30049: LD_VAR 0 11
30053: NOT
30054: IFFALSE 30058
// exit ;
30056: GO 30216
// tmp := array ;
30058: LD_ADDR_VAR 0 10
30062: PUSH
30063: LD_VAR 0 1
30067: ST_TO_ADDR
// for i = 1 to length do
30068: LD_ADDR_VAR 0 6
30072: PUSH
30073: DOUBLE
30074: LD_INT 1
30076: DEC
30077: ST_TO_ADDR
30078: LD_VAR 0 11
30082: PUSH
30083: FOR_TO
30084: IFFALSE 30204
// begin for j = 1 to array do
30086: LD_ADDR_VAR 0 7
30090: PUSH
30091: DOUBLE
30092: LD_INT 1
30094: DEC
30095: ST_TO_ADDR
30096: LD_VAR 0 1
30100: PUSH
30101: FOR_TO
30102: IFFALSE 30190
// begin k := j + d ;
30104: LD_ADDR_VAR 0 8
30108: PUSH
30109: LD_VAR 0 7
30113: PUSH
30114: LD_VAR 0 9
30118: PLUS
30119: ST_TO_ADDR
// if k > array then
30120: LD_VAR 0 8
30124: PUSH
30125: LD_VAR 0 1
30129: GREATER
30130: IFFALSE 30140
// k := 1 ;
30132: LD_ADDR_VAR 0 8
30136: PUSH
30137: LD_INT 1
30139: ST_TO_ADDR
// if not k then
30140: LD_VAR 0 8
30144: NOT
30145: IFFALSE 30157
// k := array ;
30147: LD_ADDR_VAR 0 8
30151: PUSH
30152: LD_VAR 0 1
30156: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30157: LD_ADDR_VAR 0 10
30161: PUSH
30162: LD_VAR 0 10
30166: PPUSH
30167: LD_VAR 0 8
30171: PPUSH
30172: LD_VAR 0 1
30176: PUSH
30177: LD_VAR 0 7
30181: ARRAY
30182: PPUSH
30183: CALL_OW 1
30187: ST_TO_ADDR
// end ;
30188: GO 30101
30190: POP
30191: POP
// array := tmp ;
30192: LD_ADDR_VAR 0 1
30196: PUSH
30197: LD_VAR 0 10
30201: ST_TO_ADDR
// end ;
30202: GO 30083
30204: POP
30205: POP
// result := array ;
30206: LD_ADDR_VAR 0 5
30210: PUSH
30211: LD_VAR 0 1
30215: ST_TO_ADDR
// end ;
30216: LD_VAR 0 5
30220: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30221: LD_INT 0
30223: PPUSH
30224: PPUSH
// result := 0 ;
30225: LD_ADDR_VAR 0 3
30229: PUSH
30230: LD_INT 0
30232: ST_TO_ADDR
// if not array or not value in array then
30233: LD_VAR 0 1
30237: NOT
30238: PUSH
30239: LD_VAR 0 2
30243: PUSH
30244: LD_VAR 0 1
30248: IN
30249: NOT
30250: OR
30251: IFFALSE 30255
// exit ;
30253: GO 30309
// for i = 1 to array do
30255: LD_ADDR_VAR 0 4
30259: PUSH
30260: DOUBLE
30261: LD_INT 1
30263: DEC
30264: ST_TO_ADDR
30265: LD_VAR 0 1
30269: PUSH
30270: FOR_TO
30271: IFFALSE 30307
// if value = array [ i ] then
30273: LD_VAR 0 2
30277: PUSH
30278: LD_VAR 0 1
30282: PUSH
30283: LD_VAR 0 4
30287: ARRAY
30288: EQUAL
30289: IFFALSE 30305
// begin result := i ;
30291: LD_ADDR_VAR 0 3
30295: PUSH
30296: LD_VAR 0 4
30300: ST_TO_ADDR
// exit ;
30301: POP
30302: POP
30303: GO 30309
// end ;
30305: GO 30270
30307: POP
30308: POP
// end ;
30309: LD_VAR 0 3
30313: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30314: LD_INT 0
30316: PPUSH
// vc_chassis := chassis ;
30317: LD_ADDR_OWVAR 37
30321: PUSH
30322: LD_VAR 0 1
30326: ST_TO_ADDR
// vc_engine := engine ;
30327: LD_ADDR_OWVAR 39
30331: PUSH
30332: LD_VAR 0 2
30336: ST_TO_ADDR
// vc_control := control ;
30337: LD_ADDR_OWVAR 38
30341: PUSH
30342: LD_VAR 0 3
30346: ST_TO_ADDR
// vc_weapon := weapon ;
30347: LD_ADDR_OWVAR 40
30351: PUSH
30352: LD_VAR 0 4
30356: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30357: LD_ADDR_OWVAR 41
30361: PUSH
30362: LD_VAR 0 5
30366: ST_TO_ADDR
// end ;
30367: LD_VAR 0 6
30371: RET
// export function WantPlant ( unit ) ; var task ; begin
30372: LD_INT 0
30374: PPUSH
30375: PPUSH
// result := false ;
30376: LD_ADDR_VAR 0 2
30380: PUSH
30381: LD_INT 0
30383: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30384: LD_ADDR_VAR 0 3
30388: PUSH
30389: LD_VAR 0 1
30393: PPUSH
30394: CALL_OW 437
30398: ST_TO_ADDR
// if task then
30399: LD_VAR 0 3
30403: IFFALSE 30431
// if task [ 1 ] [ 1 ] = p then
30405: LD_VAR 0 3
30409: PUSH
30410: LD_INT 1
30412: ARRAY
30413: PUSH
30414: LD_INT 1
30416: ARRAY
30417: PUSH
30418: LD_STRING p
30420: EQUAL
30421: IFFALSE 30431
// result := true ;
30423: LD_ADDR_VAR 0 2
30427: PUSH
30428: LD_INT 1
30430: ST_TO_ADDR
// end ;
30431: LD_VAR 0 2
30435: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30436: LD_INT 0
30438: PPUSH
30439: PPUSH
30440: PPUSH
30441: PPUSH
// if pos < 1 then
30442: LD_VAR 0 2
30446: PUSH
30447: LD_INT 1
30449: LESS
30450: IFFALSE 30454
// exit ;
30452: GO 30757
// if pos = 1 then
30454: LD_VAR 0 2
30458: PUSH
30459: LD_INT 1
30461: EQUAL
30462: IFFALSE 30495
// result := Replace ( arr , pos [ 1 ] , value ) else
30464: LD_ADDR_VAR 0 4
30468: PUSH
30469: LD_VAR 0 1
30473: PPUSH
30474: LD_VAR 0 2
30478: PUSH
30479: LD_INT 1
30481: ARRAY
30482: PPUSH
30483: LD_VAR 0 3
30487: PPUSH
30488: CALL_OW 1
30492: ST_TO_ADDR
30493: GO 30757
// begin tmp := arr ;
30495: LD_ADDR_VAR 0 6
30499: PUSH
30500: LD_VAR 0 1
30504: ST_TO_ADDR
// s_arr := [ tmp ] ;
30505: LD_ADDR_VAR 0 7
30509: PUSH
30510: LD_VAR 0 6
30514: PUSH
30515: EMPTY
30516: LIST
30517: ST_TO_ADDR
// for i = 1 to pos - 1 do
30518: LD_ADDR_VAR 0 5
30522: PUSH
30523: DOUBLE
30524: LD_INT 1
30526: DEC
30527: ST_TO_ADDR
30528: LD_VAR 0 2
30532: PUSH
30533: LD_INT 1
30535: MINUS
30536: PUSH
30537: FOR_TO
30538: IFFALSE 30583
// begin tmp := tmp [ pos [ i ] ] ;
30540: LD_ADDR_VAR 0 6
30544: PUSH
30545: LD_VAR 0 6
30549: PUSH
30550: LD_VAR 0 2
30554: PUSH
30555: LD_VAR 0 5
30559: ARRAY
30560: ARRAY
30561: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30562: LD_ADDR_VAR 0 7
30566: PUSH
30567: LD_VAR 0 7
30571: PUSH
30572: LD_VAR 0 6
30576: PUSH
30577: EMPTY
30578: LIST
30579: ADD
30580: ST_TO_ADDR
// end ;
30581: GO 30537
30583: POP
30584: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30585: LD_ADDR_VAR 0 6
30589: PUSH
30590: LD_VAR 0 6
30594: PPUSH
30595: LD_VAR 0 2
30599: PUSH
30600: LD_VAR 0 2
30604: ARRAY
30605: PPUSH
30606: LD_VAR 0 3
30610: PPUSH
30611: CALL_OW 1
30615: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30616: LD_ADDR_VAR 0 7
30620: PUSH
30621: LD_VAR 0 7
30625: PPUSH
30626: LD_VAR 0 7
30630: PPUSH
30631: LD_VAR 0 6
30635: PPUSH
30636: CALL_OW 1
30640: ST_TO_ADDR
// for i = s_arr downto 2 do
30641: LD_ADDR_VAR 0 5
30645: PUSH
30646: DOUBLE
30647: LD_VAR 0 7
30651: INC
30652: ST_TO_ADDR
30653: LD_INT 2
30655: PUSH
30656: FOR_DOWNTO
30657: IFFALSE 30741
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30659: LD_ADDR_VAR 0 6
30663: PUSH
30664: LD_VAR 0 7
30668: PUSH
30669: LD_VAR 0 5
30673: PUSH
30674: LD_INT 1
30676: MINUS
30677: ARRAY
30678: PPUSH
30679: LD_VAR 0 2
30683: PUSH
30684: LD_VAR 0 5
30688: PUSH
30689: LD_INT 1
30691: MINUS
30692: ARRAY
30693: PPUSH
30694: LD_VAR 0 7
30698: PUSH
30699: LD_VAR 0 5
30703: ARRAY
30704: PPUSH
30705: CALL_OW 1
30709: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30710: LD_ADDR_VAR 0 7
30714: PUSH
30715: LD_VAR 0 7
30719: PPUSH
30720: LD_VAR 0 5
30724: PUSH
30725: LD_INT 1
30727: MINUS
30728: PPUSH
30729: LD_VAR 0 6
30733: PPUSH
30734: CALL_OW 1
30738: ST_TO_ADDR
// end ;
30739: GO 30656
30741: POP
30742: POP
// result := s_arr [ 1 ] ;
30743: LD_ADDR_VAR 0 4
30747: PUSH
30748: LD_VAR 0 7
30752: PUSH
30753: LD_INT 1
30755: ARRAY
30756: ST_TO_ADDR
// end ; end ;
30757: LD_VAR 0 4
30761: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30762: LD_INT 0
30764: PPUSH
30765: PPUSH
// if not list then
30766: LD_VAR 0 1
30770: NOT
30771: IFFALSE 30775
// exit ;
30773: GO 30866
// i := list [ pos1 ] ;
30775: LD_ADDR_VAR 0 5
30779: PUSH
30780: LD_VAR 0 1
30784: PUSH
30785: LD_VAR 0 2
30789: ARRAY
30790: ST_TO_ADDR
// if not i then
30791: LD_VAR 0 5
30795: NOT
30796: IFFALSE 30800
// exit ;
30798: GO 30866
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30800: LD_ADDR_VAR 0 1
30804: PUSH
30805: LD_VAR 0 1
30809: PPUSH
30810: LD_VAR 0 2
30814: PPUSH
30815: LD_VAR 0 1
30819: PUSH
30820: LD_VAR 0 3
30824: ARRAY
30825: PPUSH
30826: CALL_OW 1
30830: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30831: LD_ADDR_VAR 0 1
30835: PUSH
30836: LD_VAR 0 1
30840: PPUSH
30841: LD_VAR 0 3
30845: PPUSH
30846: LD_VAR 0 5
30850: PPUSH
30851: CALL_OW 1
30855: ST_TO_ADDR
// result := list ;
30856: LD_ADDR_VAR 0 4
30860: PUSH
30861: LD_VAR 0 1
30865: ST_TO_ADDR
// end ;
30866: LD_VAR 0 4
30870: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30871: LD_INT 0
30873: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30874: LD_ADDR_VAR 0 5
30878: PUSH
30879: LD_VAR 0 1
30883: PPUSH
30884: CALL_OW 250
30888: PPUSH
30889: LD_VAR 0 1
30893: PPUSH
30894: CALL_OW 251
30898: PPUSH
30899: LD_VAR 0 2
30903: PPUSH
30904: LD_VAR 0 3
30908: PPUSH
30909: LD_VAR 0 4
30913: PPUSH
30914: CALL 30924 0 5
30918: ST_TO_ADDR
// end ;
30919: LD_VAR 0 5
30923: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30924: LD_INT 0
30926: PPUSH
30927: PPUSH
30928: PPUSH
30929: PPUSH
// if not list then
30930: LD_VAR 0 3
30934: NOT
30935: IFFALSE 30939
// exit ;
30937: GO 31327
// result := [ ] ;
30939: LD_ADDR_VAR 0 6
30943: PUSH
30944: EMPTY
30945: ST_TO_ADDR
// for i in list do
30946: LD_ADDR_VAR 0 7
30950: PUSH
30951: LD_VAR 0 3
30955: PUSH
30956: FOR_IN
30957: IFFALSE 31159
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30959: LD_ADDR_VAR 0 9
30963: PUSH
30964: LD_VAR 0 7
30968: PPUSH
30969: LD_VAR 0 1
30973: PPUSH
30974: LD_VAR 0 2
30978: PPUSH
30979: CALL_OW 297
30983: ST_TO_ADDR
// if not result then
30984: LD_VAR 0 6
30988: NOT
30989: IFFALSE 31015
// result := [ [ i , tmp ] ] else
30991: LD_ADDR_VAR 0 6
30995: PUSH
30996: LD_VAR 0 7
31000: PUSH
31001: LD_VAR 0 9
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: EMPTY
31011: LIST
31012: ST_TO_ADDR
31013: GO 31157
// begin if result [ result ] [ 2 ] < tmp then
31015: LD_VAR 0 6
31019: PUSH
31020: LD_VAR 0 6
31024: ARRAY
31025: PUSH
31026: LD_INT 2
31028: ARRAY
31029: PUSH
31030: LD_VAR 0 9
31034: LESS
31035: IFFALSE 31077
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31037: LD_ADDR_VAR 0 6
31041: PUSH
31042: LD_VAR 0 6
31046: PPUSH
31047: LD_VAR 0 6
31051: PUSH
31052: LD_INT 1
31054: PLUS
31055: PPUSH
31056: LD_VAR 0 7
31060: PUSH
31061: LD_VAR 0 9
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PPUSH
31070: CALL_OW 2
31074: ST_TO_ADDR
31075: GO 31157
// for j = 1 to result do
31077: LD_ADDR_VAR 0 8
31081: PUSH
31082: DOUBLE
31083: LD_INT 1
31085: DEC
31086: ST_TO_ADDR
31087: LD_VAR 0 6
31091: PUSH
31092: FOR_TO
31093: IFFALSE 31155
// begin if tmp < result [ j ] [ 2 ] then
31095: LD_VAR 0 9
31099: PUSH
31100: LD_VAR 0 6
31104: PUSH
31105: LD_VAR 0 8
31109: ARRAY
31110: PUSH
31111: LD_INT 2
31113: ARRAY
31114: LESS
31115: IFFALSE 31153
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31117: LD_ADDR_VAR 0 6
31121: PUSH
31122: LD_VAR 0 6
31126: PPUSH
31127: LD_VAR 0 8
31131: PPUSH
31132: LD_VAR 0 7
31136: PUSH
31137: LD_VAR 0 9
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PPUSH
31146: CALL_OW 2
31150: ST_TO_ADDR
// break ;
31151: GO 31155
// end ; end ;
31153: GO 31092
31155: POP
31156: POP
// end ; end ;
31157: GO 30956
31159: POP
31160: POP
// if result and not asc then
31161: LD_VAR 0 6
31165: PUSH
31166: LD_VAR 0 4
31170: NOT
31171: AND
31172: IFFALSE 31247
// begin tmp := result ;
31174: LD_ADDR_VAR 0 9
31178: PUSH
31179: LD_VAR 0 6
31183: ST_TO_ADDR
// for i = tmp downto 1 do
31184: LD_ADDR_VAR 0 7
31188: PUSH
31189: DOUBLE
31190: LD_VAR 0 9
31194: INC
31195: ST_TO_ADDR
31196: LD_INT 1
31198: PUSH
31199: FOR_DOWNTO
31200: IFFALSE 31245
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31202: LD_ADDR_VAR 0 6
31206: PUSH
31207: LD_VAR 0 6
31211: PPUSH
31212: LD_VAR 0 9
31216: PUSH
31217: LD_VAR 0 7
31221: MINUS
31222: PUSH
31223: LD_INT 1
31225: PLUS
31226: PPUSH
31227: LD_VAR 0 9
31231: PUSH
31232: LD_VAR 0 7
31236: ARRAY
31237: PPUSH
31238: CALL_OW 1
31242: ST_TO_ADDR
31243: GO 31199
31245: POP
31246: POP
// end ; tmp := [ ] ;
31247: LD_ADDR_VAR 0 9
31251: PUSH
31252: EMPTY
31253: ST_TO_ADDR
// if mode then
31254: LD_VAR 0 5
31258: IFFALSE 31327
// begin for i = 1 to result do
31260: LD_ADDR_VAR 0 7
31264: PUSH
31265: DOUBLE
31266: LD_INT 1
31268: DEC
31269: ST_TO_ADDR
31270: LD_VAR 0 6
31274: PUSH
31275: FOR_TO
31276: IFFALSE 31315
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31278: LD_ADDR_VAR 0 9
31282: PUSH
31283: LD_VAR 0 9
31287: PPUSH
31288: LD_VAR 0 7
31292: PPUSH
31293: LD_VAR 0 6
31297: PUSH
31298: LD_VAR 0 7
31302: ARRAY
31303: PUSH
31304: LD_INT 1
31306: ARRAY
31307: PPUSH
31308: CALL_OW 1
31312: ST_TO_ADDR
31313: GO 31275
31315: POP
31316: POP
// result := tmp ;
31317: LD_ADDR_VAR 0 6
31321: PUSH
31322: LD_VAR 0 9
31326: ST_TO_ADDR
// end ; end ;
31327: LD_VAR 0 6
31331: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31332: LD_INT 0
31334: PPUSH
31335: PPUSH
31336: PPUSH
31337: PPUSH
31338: PPUSH
31339: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31340: LD_ADDR_VAR 0 5
31344: PUSH
31345: LD_INT 0
31347: PUSH
31348: LD_INT 0
31350: PUSH
31351: LD_INT 0
31353: PUSH
31354: EMPTY
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: ST_TO_ADDR
// if not x or not y then
31362: LD_VAR 0 2
31366: NOT
31367: PUSH
31368: LD_VAR 0 3
31372: NOT
31373: OR
31374: IFFALSE 31378
// exit ;
31376: GO 33030
// if not range then
31378: LD_VAR 0 4
31382: NOT
31383: IFFALSE 31393
// range := 10 ;
31385: LD_ADDR_VAR 0 4
31389: PUSH
31390: LD_INT 10
31392: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31393: LD_ADDR_VAR 0 8
31397: PUSH
31398: LD_INT 81
31400: PUSH
31401: LD_VAR 0 1
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 92
31412: PUSH
31413: LD_VAR 0 2
31417: PUSH
31418: LD_VAR 0 3
31422: PUSH
31423: LD_VAR 0 4
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 3
31436: PUSH
31437: LD_INT 21
31439: PUSH
31440: LD_INT 3
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: LIST
31455: PPUSH
31456: CALL_OW 69
31460: ST_TO_ADDR
// if not tmp then
31461: LD_VAR 0 8
31465: NOT
31466: IFFALSE 31470
// exit ;
31468: GO 33030
// for i in tmp do
31470: LD_ADDR_VAR 0 6
31474: PUSH
31475: LD_VAR 0 8
31479: PUSH
31480: FOR_IN
31481: IFFALSE 33005
// begin points := [ 0 , 0 , 0 ] ;
31483: LD_ADDR_VAR 0 9
31487: PUSH
31488: LD_INT 0
31490: PUSH
31491: LD_INT 0
31493: PUSH
31494: LD_INT 0
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: LIST
31501: ST_TO_ADDR
// bpoints := 1 ;
31502: LD_ADDR_VAR 0 10
31506: PUSH
31507: LD_INT 1
31509: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31510: LD_VAR 0 6
31514: PPUSH
31515: CALL_OW 247
31519: PUSH
31520: LD_INT 1
31522: DOUBLE
31523: EQUAL
31524: IFTRUE 31528
31526: GO 32106
31528: POP
// begin if GetClass ( i ) = 1 then
31529: LD_VAR 0 6
31533: PPUSH
31534: CALL_OW 257
31538: PUSH
31539: LD_INT 1
31541: EQUAL
31542: IFFALSE 31563
// points := [ 10 , 5 , 3 ] ;
31544: LD_ADDR_VAR 0 9
31548: PUSH
31549: LD_INT 10
31551: PUSH
31552: LD_INT 5
31554: PUSH
31555: LD_INT 3
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: LIST
31562: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31563: LD_VAR 0 6
31567: PPUSH
31568: CALL_OW 257
31572: PUSH
31573: LD_INT 2
31575: PUSH
31576: LD_INT 3
31578: PUSH
31579: LD_INT 4
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: LIST
31586: IN
31587: IFFALSE 31608
// points := [ 3 , 2 , 1 ] ;
31589: LD_ADDR_VAR 0 9
31593: PUSH
31594: LD_INT 3
31596: PUSH
31597: LD_INT 2
31599: PUSH
31600: LD_INT 1
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: LIST
31607: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31608: LD_VAR 0 6
31612: PPUSH
31613: CALL_OW 257
31617: PUSH
31618: LD_INT 5
31620: EQUAL
31621: IFFALSE 31642
// points := [ 130 , 5 , 2 ] ;
31623: LD_ADDR_VAR 0 9
31627: PUSH
31628: LD_INT 130
31630: PUSH
31631: LD_INT 5
31633: PUSH
31634: LD_INT 2
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: LIST
31641: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31642: LD_VAR 0 6
31646: PPUSH
31647: CALL_OW 257
31651: PUSH
31652: LD_INT 8
31654: EQUAL
31655: IFFALSE 31676
// points := [ 35 , 35 , 30 ] ;
31657: LD_ADDR_VAR 0 9
31661: PUSH
31662: LD_INT 35
31664: PUSH
31665: LD_INT 35
31667: PUSH
31668: LD_INT 30
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: LIST
31675: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31676: LD_VAR 0 6
31680: PPUSH
31681: CALL_OW 257
31685: PUSH
31686: LD_INT 9
31688: EQUAL
31689: IFFALSE 31710
// points := [ 20 , 55 , 40 ] ;
31691: LD_ADDR_VAR 0 9
31695: PUSH
31696: LD_INT 20
31698: PUSH
31699: LD_INT 55
31701: PUSH
31702: LD_INT 40
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: LIST
31709: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31710: LD_VAR 0 6
31714: PPUSH
31715: CALL_OW 257
31719: PUSH
31720: LD_INT 12
31722: PUSH
31723: LD_INT 16
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: IN
31730: IFFALSE 31751
// points := [ 5 , 3 , 2 ] ;
31732: LD_ADDR_VAR 0 9
31736: PUSH
31737: LD_INT 5
31739: PUSH
31740: LD_INT 3
31742: PUSH
31743: LD_INT 2
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: LIST
31750: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31751: LD_VAR 0 6
31755: PPUSH
31756: CALL_OW 257
31760: PUSH
31761: LD_INT 17
31763: EQUAL
31764: IFFALSE 31785
// points := [ 100 , 50 , 75 ] ;
31766: LD_ADDR_VAR 0 9
31770: PUSH
31771: LD_INT 100
31773: PUSH
31774: LD_INT 50
31776: PUSH
31777: LD_INT 75
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: LIST
31784: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31785: LD_VAR 0 6
31789: PPUSH
31790: CALL_OW 257
31794: PUSH
31795: LD_INT 15
31797: EQUAL
31798: IFFALSE 31819
// points := [ 10 , 5 , 3 ] ;
31800: LD_ADDR_VAR 0 9
31804: PUSH
31805: LD_INT 10
31807: PUSH
31808: LD_INT 5
31810: PUSH
31811: LD_INT 3
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: LIST
31818: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31819: LD_VAR 0 6
31823: PPUSH
31824: CALL_OW 257
31828: PUSH
31829: LD_INT 14
31831: EQUAL
31832: IFFALSE 31853
// points := [ 10 , 0 , 0 ] ;
31834: LD_ADDR_VAR 0 9
31838: PUSH
31839: LD_INT 10
31841: PUSH
31842: LD_INT 0
31844: PUSH
31845: LD_INT 0
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: LIST
31852: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31853: LD_VAR 0 6
31857: PPUSH
31858: CALL_OW 257
31862: PUSH
31863: LD_INT 11
31865: EQUAL
31866: IFFALSE 31887
// points := [ 30 , 10 , 5 ] ;
31868: LD_ADDR_VAR 0 9
31872: PUSH
31873: LD_INT 30
31875: PUSH
31876: LD_INT 10
31878: PUSH
31879: LD_INT 5
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: LIST
31886: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31887: LD_VAR 0 1
31891: PPUSH
31892: LD_INT 5
31894: PPUSH
31895: CALL_OW 321
31899: PUSH
31900: LD_INT 2
31902: EQUAL
31903: IFFALSE 31920
// bpoints := bpoints * 1.8 ;
31905: LD_ADDR_VAR 0 10
31909: PUSH
31910: LD_VAR 0 10
31914: PUSH
31915: LD_REAL  1.80000000000000E+0000
31918: MUL
31919: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31920: LD_VAR 0 6
31924: PPUSH
31925: CALL_OW 257
31929: PUSH
31930: LD_INT 1
31932: PUSH
31933: LD_INT 2
31935: PUSH
31936: LD_INT 3
31938: PUSH
31939: LD_INT 4
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: IN
31948: PUSH
31949: LD_VAR 0 1
31953: PPUSH
31954: LD_INT 51
31956: PPUSH
31957: CALL_OW 321
31961: PUSH
31962: LD_INT 2
31964: EQUAL
31965: AND
31966: IFFALSE 31983
// bpoints := bpoints * 1.2 ;
31968: LD_ADDR_VAR 0 10
31972: PUSH
31973: LD_VAR 0 10
31977: PUSH
31978: LD_REAL  1.20000000000000E+0000
31981: MUL
31982: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31983: LD_VAR 0 6
31987: PPUSH
31988: CALL_OW 257
31992: PUSH
31993: LD_INT 5
31995: PUSH
31996: LD_INT 7
31998: PUSH
31999: LD_INT 9
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: LIST
32006: IN
32007: PUSH
32008: LD_VAR 0 1
32012: PPUSH
32013: LD_INT 52
32015: PPUSH
32016: CALL_OW 321
32020: PUSH
32021: LD_INT 2
32023: EQUAL
32024: AND
32025: IFFALSE 32042
// bpoints := bpoints * 1.5 ;
32027: LD_ADDR_VAR 0 10
32031: PUSH
32032: LD_VAR 0 10
32036: PUSH
32037: LD_REAL  1.50000000000000E+0000
32040: MUL
32041: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32042: LD_VAR 0 1
32046: PPUSH
32047: LD_INT 66
32049: PPUSH
32050: CALL_OW 321
32054: PUSH
32055: LD_INT 2
32057: EQUAL
32058: IFFALSE 32075
// bpoints := bpoints * 1.1 ;
32060: LD_ADDR_VAR 0 10
32064: PUSH
32065: LD_VAR 0 10
32069: PUSH
32070: LD_REAL  1.10000000000000E+0000
32073: MUL
32074: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32075: LD_ADDR_VAR 0 10
32079: PUSH
32080: LD_VAR 0 10
32084: PUSH
32085: LD_VAR 0 6
32089: PPUSH
32090: LD_INT 1
32092: PPUSH
32093: CALL_OW 259
32097: PUSH
32098: LD_REAL  1.15000000000000E+0000
32101: MUL
32102: MUL
32103: ST_TO_ADDR
// end ; unit_vehicle :
32104: GO 32934
32106: LD_INT 2
32108: DOUBLE
32109: EQUAL
32110: IFTRUE 32114
32112: GO 32922
32114: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32115: LD_VAR 0 6
32119: PPUSH
32120: CALL_OW 264
32124: PUSH
32125: LD_INT 2
32127: PUSH
32128: LD_INT 42
32130: PUSH
32131: LD_INT 24
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: LIST
32138: IN
32139: IFFALSE 32160
// points := [ 25 , 5 , 3 ] ;
32141: LD_ADDR_VAR 0 9
32145: PUSH
32146: LD_INT 25
32148: PUSH
32149: LD_INT 5
32151: PUSH
32152: LD_INT 3
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: LIST
32159: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32160: LD_VAR 0 6
32164: PPUSH
32165: CALL_OW 264
32169: PUSH
32170: LD_INT 4
32172: PUSH
32173: LD_INT 43
32175: PUSH
32176: LD_INT 25
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: LIST
32183: IN
32184: IFFALSE 32205
// points := [ 40 , 15 , 5 ] ;
32186: LD_ADDR_VAR 0 9
32190: PUSH
32191: LD_INT 40
32193: PUSH
32194: LD_INT 15
32196: PUSH
32197: LD_INT 5
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: LIST
32204: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32205: LD_VAR 0 6
32209: PPUSH
32210: CALL_OW 264
32214: PUSH
32215: LD_INT 3
32217: PUSH
32218: LD_INT 23
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: IN
32225: IFFALSE 32246
// points := [ 7 , 25 , 8 ] ;
32227: LD_ADDR_VAR 0 9
32231: PUSH
32232: LD_INT 7
32234: PUSH
32235: LD_INT 25
32237: PUSH
32238: LD_INT 8
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: LIST
32245: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32246: LD_VAR 0 6
32250: PPUSH
32251: CALL_OW 264
32255: PUSH
32256: LD_INT 5
32258: PUSH
32259: LD_INT 27
32261: PUSH
32262: LD_INT 44
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: LIST
32269: IN
32270: IFFALSE 32291
// points := [ 14 , 50 , 16 ] ;
32272: LD_ADDR_VAR 0 9
32276: PUSH
32277: LD_INT 14
32279: PUSH
32280: LD_INT 50
32282: PUSH
32283: LD_INT 16
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: LIST
32290: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32291: LD_VAR 0 6
32295: PPUSH
32296: CALL_OW 264
32300: PUSH
32301: LD_INT 6
32303: PUSH
32304: LD_INT 46
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: IN
32311: IFFALSE 32332
// points := [ 32 , 120 , 70 ] ;
32313: LD_ADDR_VAR 0 9
32317: PUSH
32318: LD_INT 32
32320: PUSH
32321: LD_INT 120
32323: PUSH
32324: LD_INT 70
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: LIST
32331: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32332: LD_VAR 0 6
32336: PPUSH
32337: CALL_OW 264
32341: PUSH
32342: LD_INT 7
32344: PUSH
32345: LD_INT 28
32347: PUSH
32348: LD_INT 45
32350: PUSH
32351: LD_EXP 64
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: IN
32362: IFFALSE 32383
// points := [ 35 , 20 , 45 ] ;
32364: LD_ADDR_VAR 0 9
32368: PUSH
32369: LD_INT 35
32371: PUSH
32372: LD_INT 20
32374: PUSH
32375: LD_INT 45
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: LIST
32382: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32383: LD_VAR 0 6
32387: PPUSH
32388: CALL_OW 264
32392: PUSH
32393: LD_INT 47
32395: PUSH
32396: EMPTY
32397: LIST
32398: IN
32399: IFFALSE 32420
// points := [ 67 , 45 , 75 ] ;
32401: LD_ADDR_VAR 0 9
32405: PUSH
32406: LD_INT 67
32408: PUSH
32409: LD_INT 45
32411: PUSH
32412: LD_INT 75
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: LIST
32419: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32420: LD_VAR 0 6
32424: PPUSH
32425: CALL_OW 264
32429: PUSH
32430: LD_INT 26
32432: PUSH
32433: EMPTY
32434: LIST
32435: IN
32436: IFFALSE 32457
// points := [ 120 , 30 , 80 ] ;
32438: LD_ADDR_VAR 0 9
32442: PUSH
32443: LD_INT 120
32445: PUSH
32446: LD_INT 30
32448: PUSH
32449: LD_INT 80
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: LIST
32456: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32457: LD_VAR 0 6
32461: PPUSH
32462: CALL_OW 264
32466: PUSH
32467: LD_INT 22
32469: PUSH
32470: EMPTY
32471: LIST
32472: IN
32473: IFFALSE 32494
// points := [ 40 , 1 , 1 ] ;
32475: LD_ADDR_VAR 0 9
32479: PUSH
32480: LD_INT 40
32482: PUSH
32483: LD_INT 1
32485: PUSH
32486: LD_INT 1
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: LIST
32493: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32494: LD_VAR 0 6
32498: PPUSH
32499: CALL_OW 264
32503: PUSH
32504: LD_INT 29
32506: PUSH
32507: EMPTY
32508: LIST
32509: IN
32510: IFFALSE 32531
// points := [ 70 , 200 , 400 ] ;
32512: LD_ADDR_VAR 0 9
32516: PUSH
32517: LD_INT 70
32519: PUSH
32520: LD_INT 200
32522: PUSH
32523: LD_INT 400
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: LIST
32530: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32531: LD_VAR 0 6
32535: PPUSH
32536: CALL_OW 264
32540: PUSH
32541: LD_INT 14
32543: PUSH
32544: LD_INT 53
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: IN
32551: IFFALSE 32572
// points := [ 40 , 10 , 20 ] ;
32553: LD_ADDR_VAR 0 9
32557: PUSH
32558: LD_INT 40
32560: PUSH
32561: LD_INT 10
32563: PUSH
32564: LD_INT 20
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: LIST
32571: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32572: LD_VAR 0 6
32576: PPUSH
32577: CALL_OW 264
32581: PUSH
32582: LD_INT 9
32584: PUSH
32585: EMPTY
32586: LIST
32587: IN
32588: IFFALSE 32609
// points := [ 5 , 70 , 20 ] ;
32590: LD_ADDR_VAR 0 9
32594: PUSH
32595: LD_INT 5
32597: PUSH
32598: LD_INT 70
32600: PUSH
32601: LD_INT 20
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: LIST
32608: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32609: LD_VAR 0 6
32613: PPUSH
32614: CALL_OW 264
32618: PUSH
32619: LD_INT 10
32621: PUSH
32622: EMPTY
32623: LIST
32624: IN
32625: IFFALSE 32646
// points := [ 35 , 110 , 70 ] ;
32627: LD_ADDR_VAR 0 9
32631: PUSH
32632: LD_INT 35
32634: PUSH
32635: LD_INT 110
32637: PUSH
32638: LD_INT 70
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: LIST
32645: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32646: LD_VAR 0 6
32650: PPUSH
32651: CALL_OW 265
32655: PUSH
32656: LD_INT 25
32658: EQUAL
32659: IFFALSE 32680
// points := [ 80 , 65 , 100 ] ;
32661: LD_ADDR_VAR 0 9
32665: PUSH
32666: LD_INT 80
32668: PUSH
32669: LD_INT 65
32671: PUSH
32672: LD_INT 100
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: LIST
32679: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32680: LD_VAR 0 6
32684: PPUSH
32685: CALL_OW 263
32689: PUSH
32690: LD_INT 1
32692: EQUAL
32693: IFFALSE 32728
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32695: LD_ADDR_VAR 0 10
32699: PUSH
32700: LD_VAR 0 10
32704: PUSH
32705: LD_VAR 0 6
32709: PPUSH
32710: CALL_OW 311
32714: PPUSH
32715: LD_INT 3
32717: PPUSH
32718: CALL_OW 259
32722: PUSH
32723: LD_INT 4
32725: MUL
32726: MUL
32727: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32728: LD_VAR 0 6
32732: PPUSH
32733: CALL_OW 263
32737: PUSH
32738: LD_INT 2
32740: EQUAL
32741: IFFALSE 32792
// begin j := IsControledBy ( i ) ;
32743: LD_ADDR_VAR 0 7
32747: PUSH
32748: LD_VAR 0 6
32752: PPUSH
32753: CALL_OW 312
32757: ST_TO_ADDR
// if j then
32758: LD_VAR 0 7
32762: IFFALSE 32792
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32764: LD_ADDR_VAR 0 10
32768: PUSH
32769: LD_VAR 0 10
32773: PUSH
32774: LD_VAR 0 7
32778: PPUSH
32779: LD_INT 3
32781: PPUSH
32782: CALL_OW 259
32786: PUSH
32787: LD_INT 3
32789: MUL
32790: MUL
32791: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32792: LD_VAR 0 6
32796: PPUSH
32797: CALL_OW 264
32801: PUSH
32802: LD_INT 5
32804: PUSH
32805: LD_INT 6
32807: PUSH
32808: LD_INT 46
32810: PUSH
32811: LD_INT 44
32813: PUSH
32814: LD_INT 47
32816: PUSH
32817: LD_INT 45
32819: PUSH
32820: LD_INT 28
32822: PUSH
32823: LD_INT 7
32825: PUSH
32826: LD_INT 27
32828: PUSH
32829: LD_INT 29
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: IN
32844: PUSH
32845: LD_VAR 0 1
32849: PPUSH
32850: LD_INT 52
32852: PPUSH
32853: CALL_OW 321
32857: PUSH
32858: LD_INT 2
32860: EQUAL
32861: AND
32862: IFFALSE 32879
// bpoints := bpoints * 1.2 ;
32864: LD_ADDR_VAR 0 10
32868: PUSH
32869: LD_VAR 0 10
32873: PUSH
32874: LD_REAL  1.20000000000000E+0000
32877: MUL
32878: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32879: LD_VAR 0 6
32883: PPUSH
32884: CALL_OW 264
32888: PUSH
32889: LD_INT 6
32891: PUSH
32892: LD_INT 46
32894: PUSH
32895: LD_INT 47
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: LIST
32902: IN
32903: IFFALSE 32920
// bpoints := bpoints * 1.2 ;
32905: LD_ADDR_VAR 0 10
32909: PUSH
32910: LD_VAR 0 10
32914: PUSH
32915: LD_REAL  1.20000000000000E+0000
32918: MUL
32919: ST_TO_ADDR
// end ; unit_building :
32920: GO 32934
32922: LD_INT 3
32924: DOUBLE
32925: EQUAL
32926: IFTRUE 32930
32928: GO 32933
32930: POP
// ; end ;
32931: GO 32934
32933: POP
// for j = 1 to 3 do
32934: LD_ADDR_VAR 0 7
32938: PUSH
32939: DOUBLE
32940: LD_INT 1
32942: DEC
32943: ST_TO_ADDR
32944: LD_INT 3
32946: PUSH
32947: FOR_TO
32948: IFFALSE 33001
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32950: LD_ADDR_VAR 0 5
32954: PUSH
32955: LD_VAR 0 5
32959: PPUSH
32960: LD_VAR 0 7
32964: PPUSH
32965: LD_VAR 0 5
32969: PUSH
32970: LD_VAR 0 7
32974: ARRAY
32975: PUSH
32976: LD_VAR 0 9
32980: PUSH
32981: LD_VAR 0 7
32985: ARRAY
32986: PUSH
32987: LD_VAR 0 10
32991: MUL
32992: PLUS
32993: PPUSH
32994: CALL_OW 1
32998: ST_TO_ADDR
32999: GO 32947
33001: POP
33002: POP
// end ;
33003: GO 31480
33005: POP
33006: POP
// result := Replace ( result , 4 , tmp ) ;
33007: LD_ADDR_VAR 0 5
33011: PUSH
33012: LD_VAR 0 5
33016: PPUSH
33017: LD_INT 4
33019: PPUSH
33020: LD_VAR 0 8
33024: PPUSH
33025: CALL_OW 1
33029: ST_TO_ADDR
// end ;
33030: LD_VAR 0 5
33034: RET
// export function DangerAtRange ( unit , range ) ; begin
33035: LD_INT 0
33037: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33038: LD_ADDR_VAR 0 3
33042: PUSH
33043: LD_VAR 0 1
33047: PPUSH
33048: CALL_OW 255
33052: PPUSH
33053: LD_VAR 0 1
33057: PPUSH
33058: CALL_OW 250
33062: PPUSH
33063: LD_VAR 0 1
33067: PPUSH
33068: CALL_OW 251
33072: PPUSH
33073: LD_VAR 0 2
33077: PPUSH
33078: CALL 31332 0 4
33082: ST_TO_ADDR
// end ;
33083: LD_VAR 0 3
33087: RET
// export function DangerInArea ( side , area ) ; begin
33088: LD_INT 0
33090: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33091: LD_ADDR_VAR 0 3
33095: PUSH
33096: LD_VAR 0 2
33100: PPUSH
33101: LD_INT 81
33103: PUSH
33104: LD_VAR 0 1
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PPUSH
33113: CALL_OW 70
33117: ST_TO_ADDR
// end ;
33118: LD_VAR 0 3
33122: RET
// export function IsExtension ( b ) ; begin
33123: LD_INT 0
33125: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33126: LD_ADDR_VAR 0 2
33130: PUSH
33131: LD_VAR 0 1
33135: PUSH
33136: LD_INT 23
33138: PUSH
33139: LD_INT 20
33141: PUSH
33142: LD_INT 22
33144: PUSH
33145: LD_INT 17
33147: PUSH
33148: LD_INT 24
33150: PUSH
33151: LD_INT 21
33153: PUSH
33154: LD_INT 19
33156: PUSH
33157: LD_INT 16
33159: PUSH
33160: LD_INT 25
33162: PUSH
33163: LD_INT 18
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: IN
33178: ST_TO_ADDR
// end ;
33179: LD_VAR 0 2
33183: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33184: LD_INT 0
33186: PPUSH
33187: PPUSH
33188: PPUSH
// result := [ ] ;
33189: LD_ADDR_VAR 0 4
33193: PUSH
33194: EMPTY
33195: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33196: LD_ADDR_VAR 0 5
33200: PUSH
33201: LD_VAR 0 2
33205: PPUSH
33206: LD_INT 21
33208: PUSH
33209: LD_INT 3
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PPUSH
33216: CALL_OW 70
33220: ST_TO_ADDR
// if not tmp then
33221: LD_VAR 0 5
33225: NOT
33226: IFFALSE 33230
// exit ;
33228: GO 33294
// if checkLink then
33230: LD_VAR 0 3
33234: IFFALSE 33284
// begin for i in tmp do
33236: LD_ADDR_VAR 0 6
33240: PUSH
33241: LD_VAR 0 5
33245: PUSH
33246: FOR_IN
33247: IFFALSE 33282
// if GetBase ( i ) <> base then
33249: LD_VAR 0 6
33253: PPUSH
33254: CALL_OW 274
33258: PUSH
33259: LD_VAR 0 1
33263: NONEQUAL
33264: IFFALSE 33280
// ComLinkToBase ( base , i ) ;
33266: LD_VAR 0 1
33270: PPUSH
33271: LD_VAR 0 6
33275: PPUSH
33276: CALL_OW 169
33280: GO 33246
33282: POP
33283: POP
// end ; result := tmp ;
33284: LD_ADDR_VAR 0 4
33288: PUSH
33289: LD_VAR 0 5
33293: ST_TO_ADDR
// end ;
33294: LD_VAR 0 4
33298: RET
// export function ComComplete ( units , b ) ; var i ; begin
33299: LD_INT 0
33301: PPUSH
33302: PPUSH
// if not units then
33303: LD_VAR 0 1
33307: NOT
33308: IFFALSE 33312
// exit ;
33310: GO 33402
// for i in units do
33312: LD_ADDR_VAR 0 4
33316: PUSH
33317: LD_VAR 0 1
33321: PUSH
33322: FOR_IN
33323: IFFALSE 33400
// if BuildingStatus ( b ) = bs_build then
33325: LD_VAR 0 2
33329: PPUSH
33330: CALL_OW 461
33334: PUSH
33335: LD_INT 1
33337: EQUAL
33338: IFFALSE 33398
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33340: LD_VAR 0 4
33344: PPUSH
33345: LD_STRING h
33347: PUSH
33348: LD_VAR 0 2
33352: PPUSH
33353: CALL_OW 250
33357: PUSH
33358: LD_VAR 0 2
33362: PPUSH
33363: CALL_OW 251
33367: PUSH
33368: LD_VAR 0 2
33372: PUSH
33373: LD_INT 0
33375: PUSH
33376: LD_INT 0
33378: PUSH
33379: LD_INT 0
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: PUSH
33391: EMPTY
33392: LIST
33393: PPUSH
33394: CALL_OW 446
33398: GO 33322
33400: POP
33401: POP
// end ;
33402: LD_VAR 0 3
33406: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33407: LD_INT 0
33409: PPUSH
33410: PPUSH
33411: PPUSH
33412: PPUSH
33413: PPUSH
33414: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33415: LD_VAR 0 1
33419: NOT
33420: PUSH
33421: LD_VAR 0 1
33425: PPUSH
33426: CALL_OW 263
33430: PUSH
33431: LD_INT 2
33433: NONEQUAL
33434: OR
33435: IFFALSE 33439
// exit ;
33437: GO 33755
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33439: LD_ADDR_VAR 0 6
33443: PUSH
33444: LD_INT 22
33446: PUSH
33447: LD_VAR 0 1
33451: PPUSH
33452: CALL_OW 255
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 2
33463: PUSH
33464: LD_INT 30
33466: PUSH
33467: LD_INT 36
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 34
33476: PUSH
33477: LD_INT 31
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: LIST
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PPUSH
33493: CALL_OW 69
33497: ST_TO_ADDR
// if not tmp then
33498: LD_VAR 0 6
33502: NOT
33503: IFFALSE 33507
// exit ;
33505: GO 33755
// result := [ ] ;
33507: LD_ADDR_VAR 0 2
33511: PUSH
33512: EMPTY
33513: ST_TO_ADDR
// for i in tmp do
33514: LD_ADDR_VAR 0 3
33518: PUSH
33519: LD_VAR 0 6
33523: PUSH
33524: FOR_IN
33525: IFFALSE 33596
// begin t := UnitsInside ( i ) ;
33527: LD_ADDR_VAR 0 4
33531: PUSH
33532: LD_VAR 0 3
33536: PPUSH
33537: CALL_OW 313
33541: ST_TO_ADDR
// if t then
33542: LD_VAR 0 4
33546: IFFALSE 33594
// for j in t do
33548: LD_ADDR_VAR 0 7
33552: PUSH
33553: LD_VAR 0 4
33557: PUSH
33558: FOR_IN
33559: IFFALSE 33592
// result := Replace ( result , result + 1 , j ) ;
33561: LD_ADDR_VAR 0 2
33565: PUSH
33566: LD_VAR 0 2
33570: PPUSH
33571: LD_VAR 0 2
33575: PUSH
33576: LD_INT 1
33578: PLUS
33579: PPUSH
33580: LD_VAR 0 7
33584: PPUSH
33585: CALL_OW 1
33589: ST_TO_ADDR
33590: GO 33558
33592: POP
33593: POP
// end ;
33594: GO 33524
33596: POP
33597: POP
// if not result then
33598: LD_VAR 0 2
33602: NOT
33603: IFFALSE 33607
// exit ;
33605: GO 33755
// mech := result [ 1 ] ;
33607: LD_ADDR_VAR 0 5
33611: PUSH
33612: LD_VAR 0 2
33616: PUSH
33617: LD_INT 1
33619: ARRAY
33620: ST_TO_ADDR
// if result > 1 then
33621: LD_VAR 0 2
33625: PUSH
33626: LD_INT 1
33628: GREATER
33629: IFFALSE 33741
// begin for i = 2 to result do
33631: LD_ADDR_VAR 0 3
33635: PUSH
33636: DOUBLE
33637: LD_INT 2
33639: DEC
33640: ST_TO_ADDR
33641: LD_VAR 0 2
33645: PUSH
33646: FOR_TO
33647: IFFALSE 33739
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33649: LD_ADDR_VAR 0 4
33653: PUSH
33654: LD_VAR 0 2
33658: PUSH
33659: LD_VAR 0 3
33663: ARRAY
33664: PPUSH
33665: LD_INT 3
33667: PPUSH
33668: CALL_OW 259
33672: PUSH
33673: LD_VAR 0 2
33677: PUSH
33678: LD_VAR 0 3
33682: ARRAY
33683: PPUSH
33684: CALL_OW 432
33688: MINUS
33689: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33690: LD_VAR 0 4
33694: PUSH
33695: LD_VAR 0 5
33699: PPUSH
33700: LD_INT 3
33702: PPUSH
33703: CALL_OW 259
33707: PUSH
33708: LD_VAR 0 5
33712: PPUSH
33713: CALL_OW 432
33717: MINUS
33718: GREATEREQUAL
33719: IFFALSE 33737
// mech := result [ i ] ;
33721: LD_ADDR_VAR 0 5
33725: PUSH
33726: LD_VAR 0 2
33730: PUSH
33731: LD_VAR 0 3
33735: ARRAY
33736: ST_TO_ADDR
// end ;
33737: GO 33646
33739: POP
33740: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33741: LD_VAR 0 1
33745: PPUSH
33746: LD_VAR 0 5
33750: PPUSH
33751: CALL_OW 135
// end ;
33755: LD_VAR 0 2
33759: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33760: LD_INT 0
33762: PPUSH
33763: PPUSH
33764: PPUSH
33765: PPUSH
33766: PPUSH
33767: PPUSH
33768: PPUSH
33769: PPUSH
33770: PPUSH
33771: PPUSH
33772: PPUSH
33773: PPUSH
33774: PPUSH
// result := [ ] ;
33775: LD_ADDR_VAR 0 7
33779: PUSH
33780: EMPTY
33781: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33782: LD_VAR 0 1
33786: PPUSH
33787: CALL_OW 266
33791: PUSH
33792: LD_INT 0
33794: PUSH
33795: LD_INT 1
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: IN
33802: NOT
33803: IFFALSE 33807
// exit ;
33805: GO 35441
// if name then
33807: LD_VAR 0 3
33811: IFFALSE 33827
// SetBName ( base_dep , name ) ;
33813: LD_VAR 0 1
33817: PPUSH
33818: LD_VAR 0 3
33822: PPUSH
33823: CALL_OW 500
// base := GetBase ( base_dep ) ;
33827: LD_ADDR_VAR 0 15
33831: PUSH
33832: LD_VAR 0 1
33836: PPUSH
33837: CALL_OW 274
33841: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33842: LD_ADDR_VAR 0 16
33846: PUSH
33847: LD_VAR 0 1
33851: PPUSH
33852: CALL_OW 255
33856: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33857: LD_ADDR_VAR 0 17
33861: PUSH
33862: LD_VAR 0 1
33866: PPUSH
33867: CALL_OW 248
33871: ST_TO_ADDR
// if sources then
33872: LD_VAR 0 5
33876: IFFALSE 33923
// for i = 1 to 3 do
33878: LD_ADDR_VAR 0 8
33882: PUSH
33883: DOUBLE
33884: LD_INT 1
33886: DEC
33887: ST_TO_ADDR
33888: LD_INT 3
33890: PUSH
33891: FOR_TO
33892: IFFALSE 33921
// AddResourceType ( base , i , sources [ i ] ) ;
33894: LD_VAR 0 15
33898: PPUSH
33899: LD_VAR 0 8
33903: PPUSH
33904: LD_VAR 0 5
33908: PUSH
33909: LD_VAR 0 8
33913: ARRAY
33914: PPUSH
33915: CALL_OW 276
33919: GO 33891
33921: POP
33922: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33923: LD_ADDR_VAR 0 18
33927: PUSH
33928: LD_VAR 0 15
33932: PPUSH
33933: LD_VAR 0 2
33937: PPUSH
33938: LD_INT 1
33940: PPUSH
33941: CALL 33184 0 3
33945: ST_TO_ADDR
// InitHc ;
33946: CALL_OW 19
// InitUc ;
33950: CALL_OW 18
// uc_side := side ;
33954: LD_ADDR_OWVAR 20
33958: PUSH
33959: LD_VAR 0 16
33963: ST_TO_ADDR
// uc_nation := nation ;
33964: LD_ADDR_OWVAR 21
33968: PUSH
33969: LD_VAR 0 17
33973: ST_TO_ADDR
// if buildings then
33974: LD_VAR 0 18
33978: IFFALSE 35300
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33980: LD_ADDR_VAR 0 19
33984: PUSH
33985: LD_VAR 0 18
33989: PPUSH
33990: LD_INT 2
33992: PUSH
33993: LD_INT 30
33995: PUSH
33996: LD_INT 29
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 30
34005: PUSH
34006: LD_INT 30
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: LIST
34017: PPUSH
34018: CALL_OW 72
34022: ST_TO_ADDR
// if tmp then
34023: LD_VAR 0 19
34027: IFFALSE 34075
// for i in tmp do
34029: LD_ADDR_VAR 0 8
34033: PUSH
34034: LD_VAR 0 19
34038: PUSH
34039: FOR_IN
34040: IFFALSE 34073
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34042: LD_VAR 0 8
34046: PPUSH
34047: CALL_OW 250
34051: PPUSH
34052: LD_VAR 0 8
34056: PPUSH
34057: CALL_OW 251
34061: PPUSH
34062: LD_VAR 0 16
34066: PPUSH
34067: CALL_OW 441
34071: GO 34039
34073: POP
34074: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34075: LD_VAR 0 18
34079: PPUSH
34080: LD_INT 2
34082: PUSH
34083: LD_INT 30
34085: PUSH
34086: LD_INT 32
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 30
34095: PUSH
34096: LD_INT 33
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: LIST
34107: PPUSH
34108: CALL_OW 72
34112: IFFALSE 34200
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34114: LD_ADDR_VAR 0 8
34118: PUSH
34119: LD_VAR 0 18
34123: PPUSH
34124: LD_INT 2
34126: PUSH
34127: LD_INT 30
34129: PUSH
34130: LD_INT 32
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 30
34139: PUSH
34140: LD_INT 33
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: LIST
34151: PPUSH
34152: CALL_OW 72
34156: PUSH
34157: FOR_IN
34158: IFFALSE 34198
// begin if not GetBWeapon ( i ) then
34160: LD_VAR 0 8
34164: PPUSH
34165: CALL_OW 269
34169: NOT
34170: IFFALSE 34196
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34172: LD_VAR 0 8
34176: PPUSH
34177: LD_VAR 0 8
34181: PPUSH
34182: LD_VAR 0 2
34186: PPUSH
34187: CALL 35446 0 2
34191: PPUSH
34192: CALL_OW 431
// end ;
34196: GO 34157
34198: POP
34199: POP
// end ; for i = 1 to personel do
34200: LD_ADDR_VAR 0 8
34204: PUSH
34205: DOUBLE
34206: LD_INT 1
34208: DEC
34209: ST_TO_ADDR
34210: LD_VAR 0 6
34214: PUSH
34215: FOR_TO
34216: IFFALSE 35280
// begin if i > 4 then
34218: LD_VAR 0 8
34222: PUSH
34223: LD_INT 4
34225: GREATER
34226: IFFALSE 34230
// break ;
34228: GO 35280
// case i of 1 :
34230: LD_VAR 0 8
34234: PUSH
34235: LD_INT 1
34237: DOUBLE
34238: EQUAL
34239: IFTRUE 34243
34241: GO 34323
34243: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34244: LD_ADDR_VAR 0 12
34248: PUSH
34249: LD_VAR 0 18
34253: PPUSH
34254: LD_INT 22
34256: PUSH
34257: LD_VAR 0 16
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 58
34268: PUSH
34269: EMPTY
34270: LIST
34271: PUSH
34272: LD_INT 2
34274: PUSH
34275: LD_INT 30
34277: PUSH
34278: LD_INT 32
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: PUSH
34285: LD_INT 30
34287: PUSH
34288: LD_INT 4
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 30
34297: PUSH
34298: LD_INT 5
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: LIST
34315: PPUSH
34316: CALL_OW 72
34320: ST_TO_ADDR
34321: GO 34545
34323: LD_INT 2
34325: DOUBLE
34326: EQUAL
34327: IFTRUE 34331
34329: GO 34393
34331: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34332: LD_ADDR_VAR 0 12
34336: PUSH
34337: LD_VAR 0 18
34341: PPUSH
34342: LD_INT 22
34344: PUSH
34345: LD_VAR 0 16
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 2
34356: PUSH
34357: LD_INT 30
34359: PUSH
34360: LD_INT 0
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 30
34369: PUSH
34370: LD_INT 1
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: LIST
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PPUSH
34386: CALL_OW 72
34390: ST_TO_ADDR
34391: GO 34545
34393: LD_INT 3
34395: DOUBLE
34396: EQUAL
34397: IFTRUE 34401
34399: GO 34463
34401: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34402: LD_ADDR_VAR 0 12
34406: PUSH
34407: LD_VAR 0 18
34411: PPUSH
34412: LD_INT 22
34414: PUSH
34415: LD_VAR 0 16
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 2
34426: PUSH
34427: LD_INT 30
34429: PUSH
34430: LD_INT 2
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 30
34439: PUSH
34440: LD_INT 3
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: LIST
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PPUSH
34456: CALL_OW 72
34460: ST_TO_ADDR
34461: GO 34545
34463: LD_INT 4
34465: DOUBLE
34466: EQUAL
34467: IFTRUE 34471
34469: GO 34544
34471: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34472: LD_ADDR_VAR 0 12
34476: PUSH
34477: LD_VAR 0 18
34481: PPUSH
34482: LD_INT 22
34484: PUSH
34485: LD_VAR 0 16
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 2
34496: PUSH
34497: LD_INT 30
34499: PUSH
34500: LD_INT 6
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 30
34509: PUSH
34510: LD_INT 7
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 30
34519: PUSH
34520: LD_INT 8
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PPUSH
34537: CALL_OW 72
34541: ST_TO_ADDR
34542: GO 34545
34544: POP
// if i = 1 then
34545: LD_VAR 0 8
34549: PUSH
34550: LD_INT 1
34552: EQUAL
34553: IFFALSE 34664
// begin tmp := [ ] ;
34555: LD_ADDR_VAR 0 19
34559: PUSH
34560: EMPTY
34561: ST_TO_ADDR
// for j in f do
34562: LD_ADDR_VAR 0 9
34566: PUSH
34567: LD_VAR 0 12
34571: PUSH
34572: FOR_IN
34573: IFFALSE 34646
// if GetBType ( j ) = b_bunker then
34575: LD_VAR 0 9
34579: PPUSH
34580: CALL_OW 266
34584: PUSH
34585: LD_INT 32
34587: EQUAL
34588: IFFALSE 34615
// tmp := Insert ( tmp , 1 , j ) else
34590: LD_ADDR_VAR 0 19
34594: PUSH
34595: LD_VAR 0 19
34599: PPUSH
34600: LD_INT 1
34602: PPUSH
34603: LD_VAR 0 9
34607: PPUSH
34608: CALL_OW 2
34612: ST_TO_ADDR
34613: GO 34644
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34615: LD_ADDR_VAR 0 19
34619: PUSH
34620: LD_VAR 0 19
34624: PPUSH
34625: LD_VAR 0 19
34629: PUSH
34630: LD_INT 1
34632: PLUS
34633: PPUSH
34634: LD_VAR 0 9
34638: PPUSH
34639: CALL_OW 2
34643: ST_TO_ADDR
34644: GO 34572
34646: POP
34647: POP
// if tmp then
34648: LD_VAR 0 19
34652: IFFALSE 34664
// f := tmp ;
34654: LD_ADDR_VAR 0 12
34658: PUSH
34659: LD_VAR 0 19
34663: ST_TO_ADDR
// end ; x := personel [ i ] ;
34664: LD_ADDR_VAR 0 13
34668: PUSH
34669: LD_VAR 0 6
34673: PUSH
34674: LD_VAR 0 8
34678: ARRAY
34679: ST_TO_ADDR
// if x = - 1 then
34680: LD_VAR 0 13
34684: PUSH
34685: LD_INT 1
34687: NEG
34688: EQUAL
34689: IFFALSE 34898
// begin for j in f do
34691: LD_ADDR_VAR 0 9
34695: PUSH
34696: LD_VAR 0 12
34700: PUSH
34701: FOR_IN
34702: IFFALSE 34894
// repeat InitHc ;
34704: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34708: LD_VAR 0 9
34712: PPUSH
34713: CALL_OW 266
34717: PUSH
34718: LD_INT 5
34720: EQUAL
34721: IFFALSE 34791
// begin if UnitsInside ( j ) < 3 then
34723: LD_VAR 0 9
34727: PPUSH
34728: CALL_OW 313
34732: PUSH
34733: LD_INT 3
34735: LESS
34736: IFFALSE 34772
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34738: LD_INT 0
34740: PPUSH
34741: LD_INT 5
34743: PUSH
34744: LD_INT 8
34746: PUSH
34747: LD_INT 9
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: LIST
34754: PUSH
34755: LD_VAR 0 17
34759: ARRAY
34760: PPUSH
34761: LD_VAR 0 4
34765: PPUSH
34766: CALL_OW 380
34770: GO 34789
// PrepareHuman ( false , i , skill ) ;
34772: LD_INT 0
34774: PPUSH
34775: LD_VAR 0 8
34779: PPUSH
34780: LD_VAR 0 4
34784: PPUSH
34785: CALL_OW 380
// end else
34789: GO 34808
// PrepareHuman ( false , i , skill ) ;
34791: LD_INT 0
34793: PPUSH
34794: LD_VAR 0 8
34798: PPUSH
34799: LD_VAR 0 4
34803: PPUSH
34804: CALL_OW 380
// un := CreateHuman ;
34808: LD_ADDR_VAR 0 14
34812: PUSH
34813: CALL_OW 44
34817: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34818: LD_ADDR_VAR 0 7
34822: PUSH
34823: LD_VAR 0 7
34827: PPUSH
34828: LD_INT 1
34830: PPUSH
34831: LD_VAR 0 14
34835: PPUSH
34836: CALL_OW 2
34840: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34841: LD_VAR 0 14
34845: PPUSH
34846: LD_VAR 0 9
34850: PPUSH
34851: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34855: LD_VAR 0 9
34859: PPUSH
34860: CALL_OW 313
34864: PUSH
34865: LD_INT 6
34867: EQUAL
34868: PUSH
34869: LD_VAR 0 9
34873: PPUSH
34874: CALL_OW 266
34878: PUSH
34879: LD_INT 32
34881: PUSH
34882: LD_INT 31
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: IN
34889: OR
34890: IFFALSE 34704
34892: GO 34701
34894: POP
34895: POP
// end else
34896: GO 35278
// for j = 1 to x do
34898: LD_ADDR_VAR 0 9
34902: PUSH
34903: DOUBLE
34904: LD_INT 1
34906: DEC
34907: ST_TO_ADDR
34908: LD_VAR 0 13
34912: PUSH
34913: FOR_TO
34914: IFFALSE 35276
// begin InitHc ;
34916: CALL_OW 19
// if not f then
34920: LD_VAR 0 12
34924: NOT
34925: IFFALSE 35014
// begin PrepareHuman ( false , i , skill ) ;
34927: LD_INT 0
34929: PPUSH
34930: LD_VAR 0 8
34934: PPUSH
34935: LD_VAR 0 4
34939: PPUSH
34940: CALL_OW 380
// un := CreateHuman ;
34944: LD_ADDR_VAR 0 14
34948: PUSH
34949: CALL_OW 44
34953: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34954: LD_ADDR_VAR 0 7
34958: PUSH
34959: LD_VAR 0 7
34963: PPUSH
34964: LD_INT 1
34966: PPUSH
34967: LD_VAR 0 14
34971: PPUSH
34972: CALL_OW 2
34976: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34977: LD_VAR 0 14
34981: PPUSH
34982: LD_VAR 0 1
34986: PPUSH
34987: CALL_OW 250
34991: PPUSH
34992: LD_VAR 0 1
34996: PPUSH
34997: CALL_OW 251
35001: PPUSH
35002: LD_INT 10
35004: PPUSH
35005: LD_INT 0
35007: PPUSH
35008: CALL_OW 50
// continue ;
35012: GO 34913
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35014: LD_VAR 0 12
35018: PUSH
35019: LD_INT 1
35021: ARRAY
35022: PPUSH
35023: CALL_OW 313
35027: PUSH
35028: LD_VAR 0 12
35032: PUSH
35033: LD_INT 1
35035: ARRAY
35036: PPUSH
35037: CALL_OW 266
35041: PUSH
35042: LD_INT 32
35044: PUSH
35045: LD_INT 31
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: IN
35052: AND
35053: PUSH
35054: LD_VAR 0 12
35058: PUSH
35059: LD_INT 1
35061: ARRAY
35062: PPUSH
35063: CALL_OW 313
35067: PUSH
35068: LD_INT 6
35070: EQUAL
35071: OR
35072: IFFALSE 35092
// f := Delete ( f , 1 ) ;
35074: LD_ADDR_VAR 0 12
35078: PUSH
35079: LD_VAR 0 12
35083: PPUSH
35084: LD_INT 1
35086: PPUSH
35087: CALL_OW 3
35091: ST_TO_ADDR
// if not f then
35092: LD_VAR 0 12
35096: NOT
35097: IFFALSE 35115
// begin x := x + 2 ;
35099: LD_ADDR_VAR 0 13
35103: PUSH
35104: LD_VAR 0 13
35108: PUSH
35109: LD_INT 2
35111: PLUS
35112: ST_TO_ADDR
// continue ;
35113: GO 34913
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35115: LD_VAR 0 12
35119: PUSH
35120: LD_INT 1
35122: ARRAY
35123: PPUSH
35124: CALL_OW 266
35128: PUSH
35129: LD_INT 5
35131: EQUAL
35132: IFFALSE 35206
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35134: LD_VAR 0 12
35138: PUSH
35139: LD_INT 1
35141: ARRAY
35142: PPUSH
35143: CALL_OW 313
35147: PUSH
35148: LD_INT 3
35150: LESS
35151: IFFALSE 35187
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35153: LD_INT 0
35155: PPUSH
35156: LD_INT 5
35158: PUSH
35159: LD_INT 8
35161: PUSH
35162: LD_INT 9
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: LIST
35169: PUSH
35170: LD_VAR 0 17
35174: ARRAY
35175: PPUSH
35176: LD_VAR 0 4
35180: PPUSH
35181: CALL_OW 380
35185: GO 35204
// PrepareHuman ( false , i , skill ) ;
35187: LD_INT 0
35189: PPUSH
35190: LD_VAR 0 8
35194: PPUSH
35195: LD_VAR 0 4
35199: PPUSH
35200: CALL_OW 380
// end else
35204: GO 35223
// PrepareHuman ( false , i , skill ) ;
35206: LD_INT 0
35208: PPUSH
35209: LD_VAR 0 8
35213: PPUSH
35214: LD_VAR 0 4
35218: PPUSH
35219: CALL_OW 380
// un := CreateHuman ;
35223: LD_ADDR_VAR 0 14
35227: PUSH
35228: CALL_OW 44
35232: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35233: LD_ADDR_VAR 0 7
35237: PUSH
35238: LD_VAR 0 7
35242: PPUSH
35243: LD_INT 1
35245: PPUSH
35246: LD_VAR 0 14
35250: PPUSH
35251: CALL_OW 2
35255: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35256: LD_VAR 0 14
35260: PPUSH
35261: LD_VAR 0 12
35265: PUSH
35266: LD_INT 1
35268: ARRAY
35269: PPUSH
35270: CALL_OW 52
// end ;
35274: GO 34913
35276: POP
35277: POP
// end ;
35278: GO 34215
35280: POP
35281: POP
// result := result ^ buildings ;
35282: LD_ADDR_VAR 0 7
35286: PUSH
35287: LD_VAR 0 7
35291: PUSH
35292: LD_VAR 0 18
35296: ADD
35297: ST_TO_ADDR
// end else
35298: GO 35441
// begin for i = 1 to personel do
35300: LD_ADDR_VAR 0 8
35304: PUSH
35305: DOUBLE
35306: LD_INT 1
35308: DEC
35309: ST_TO_ADDR
35310: LD_VAR 0 6
35314: PUSH
35315: FOR_TO
35316: IFFALSE 35439
// begin if i > 4 then
35318: LD_VAR 0 8
35322: PUSH
35323: LD_INT 4
35325: GREATER
35326: IFFALSE 35330
// break ;
35328: GO 35439
// x := personel [ i ] ;
35330: LD_ADDR_VAR 0 13
35334: PUSH
35335: LD_VAR 0 6
35339: PUSH
35340: LD_VAR 0 8
35344: ARRAY
35345: ST_TO_ADDR
// if x = - 1 then
35346: LD_VAR 0 13
35350: PUSH
35351: LD_INT 1
35353: NEG
35354: EQUAL
35355: IFFALSE 35359
// continue ;
35357: GO 35315
// PrepareHuman ( false , i , skill ) ;
35359: LD_INT 0
35361: PPUSH
35362: LD_VAR 0 8
35366: PPUSH
35367: LD_VAR 0 4
35371: PPUSH
35372: CALL_OW 380
// un := CreateHuman ;
35376: LD_ADDR_VAR 0 14
35380: PUSH
35381: CALL_OW 44
35385: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35386: LD_VAR 0 14
35390: PPUSH
35391: LD_VAR 0 1
35395: PPUSH
35396: CALL_OW 250
35400: PPUSH
35401: LD_VAR 0 1
35405: PPUSH
35406: CALL_OW 251
35410: PPUSH
35411: LD_INT 10
35413: PPUSH
35414: LD_INT 0
35416: PPUSH
35417: CALL_OW 50
// result := result ^ un ;
35421: LD_ADDR_VAR 0 7
35425: PUSH
35426: LD_VAR 0 7
35430: PUSH
35431: LD_VAR 0 14
35435: ADD
35436: ST_TO_ADDR
// end ;
35437: GO 35315
35439: POP
35440: POP
// end ; end ;
35441: LD_VAR 0 7
35445: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35446: LD_INT 0
35448: PPUSH
35449: PPUSH
35450: PPUSH
35451: PPUSH
35452: PPUSH
35453: PPUSH
35454: PPUSH
35455: PPUSH
35456: PPUSH
35457: PPUSH
35458: PPUSH
35459: PPUSH
35460: PPUSH
35461: PPUSH
35462: PPUSH
35463: PPUSH
// result := false ;
35464: LD_ADDR_VAR 0 3
35468: PUSH
35469: LD_INT 0
35471: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35472: LD_VAR 0 1
35476: NOT
35477: PUSH
35478: LD_VAR 0 1
35482: PPUSH
35483: CALL_OW 266
35487: PUSH
35488: LD_INT 32
35490: PUSH
35491: LD_INT 33
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: IN
35498: NOT
35499: OR
35500: IFFALSE 35504
// exit ;
35502: GO 36613
// nat := GetNation ( tower ) ;
35504: LD_ADDR_VAR 0 12
35508: PUSH
35509: LD_VAR 0 1
35513: PPUSH
35514: CALL_OW 248
35518: ST_TO_ADDR
// side := GetSide ( tower ) ;
35519: LD_ADDR_VAR 0 16
35523: PUSH
35524: LD_VAR 0 1
35528: PPUSH
35529: CALL_OW 255
35533: ST_TO_ADDR
// x := GetX ( tower ) ;
35534: LD_ADDR_VAR 0 10
35538: PUSH
35539: LD_VAR 0 1
35543: PPUSH
35544: CALL_OW 250
35548: ST_TO_ADDR
// y := GetY ( tower ) ;
35549: LD_ADDR_VAR 0 11
35553: PUSH
35554: LD_VAR 0 1
35558: PPUSH
35559: CALL_OW 251
35563: ST_TO_ADDR
// if not x or not y then
35564: LD_VAR 0 10
35568: NOT
35569: PUSH
35570: LD_VAR 0 11
35574: NOT
35575: OR
35576: IFFALSE 35580
// exit ;
35578: GO 36613
// weapon := 0 ;
35580: LD_ADDR_VAR 0 18
35584: PUSH
35585: LD_INT 0
35587: ST_TO_ADDR
// fac_list := [ ] ;
35588: LD_ADDR_VAR 0 17
35592: PUSH
35593: EMPTY
35594: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35595: LD_ADDR_VAR 0 6
35599: PUSH
35600: LD_VAR 0 1
35604: PPUSH
35605: CALL_OW 274
35609: PPUSH
35610: LD_VAR 0 2
35614: PPUSH
35615: LD_INT 0
35617: PPUSH
35618: CALL 33184 0 3
35622: PPUSH
35623: LD_INT 30
35625: PUSH
35626: LD_INT 3
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PPUSH
35633: CALL_OW 72
35637: ST_TO_ADDR
// if not factories then
35638: LD_VAR 0 6
35642: NOT
35643: IFFALSE 35647
// exit ;
35645: GO 36613
// for i in factories do
35647: LD_ADDR_VAR 0 8
35651: PUSH
35652: LD_VAR 0 6
35656: PUSH
35657: FOR_IN
35658: IFFALSE 35683
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35660: LD_ADDR_VAR 0 17
35664: PUSH
35665: LD_VAR 0 17
35669: PUSH
35670: LD_VAR 0 8
35674: PPUSH
35675: CALL_OW 478
35679: UNION
35680: ST_TO_ADDR
35681: GO 35657
35683: POP
35684: POP
// if not fac_list then
35685: LD_VAR 0 17
35689: NOT
35690: IFFALSE 35694
// exit ;
35692: GO 36613
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35694: LD_ADDR_VAR 0 5
35698: PUSH
35699: LD_INT 4
35701: PUSH
35702: LD_INT 5
35704: PUSH
35705: LD_INT 9
35707: PUSH
35708: LD_INT 10
35710: PUSH
35711: LD_INT 6
35713: PUSH
35714: LD_INT 7
35716: PUSH
35717: LD_INT 11
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 27
35731: PUSH
35732: LD_INT 28
35734: PUSH
35735: LD_INT 26
35737: PUSH
35738: LD_INT 30
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 43
35749: PUSH
35750: LD_INT 44
35752: PUSH
35753: LD_INT 46
35755: PUSH
35756: LD_INT 45
35758: PUSH
35759: LD_INT 47
35761: PUSH
35762: LD_INT 49
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: LIST
35777: PUSH
35778: LD_VAR 0 12
35782: ARRAY
35783: ST_TO_ADDR
// list := list isect fac_list ;
35784: LD_ADDR_VAR 0 5
35788: PUSH
35789: LD_VAR 0 5
35793: PUSH
35794: LD_VAR 0 17
35798: ISECT
35799: ST_TO_ADDR
// if not list then
35800: LD_VAR 0 5
35804: NOT
35805: IFFALSE 35809
// exit ;
35807: GO 36613
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35809: LD_VAR 0 12
35813: PUSH
35814: LD_INT 3
35816: EQUAL
35817: PUSH
35818: LD_INT 49
35820: PUSH
35821: LD_VAR 0 5
35825: IN
35826: AND
35827: PUSH
35828: LD_INT 31
35830: PPUSH
35831: LD_VAR 0 16
35835: PPUSH
35836: CALL_OW 321
35840: PUSH
35841: LD_INT 2
35843: EQUAL
35844: AND
35845: IFFALSE 35905
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35847: LD_INT 22
35849: PUSH
35850: LD_VAR 0 16
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 35
35861: PUSH
35862: LD_INT 49
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 91
35871: PUSH
35872: LD_VAR 0 1
35876: PUSH
35877: LD_INT 10
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: LIST
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: LIST
35889: PPUSH
35890: CALL_OW 69
35894: NOT
35895: IFFALSE 35905
// weapon := ru_time_lapser ;
35897: LD_ADDR_VAR 0 18
35901: PUSH
35902: LD_INT 49
35904: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35905: LD_VAR 0 12
35909: PUSH
35910: LD_INT 1
35912: PUSH
35913: LD_INT 2
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: IN
35920: PUSH
35921: LD_INT 11
35923: PUSH
35924: LD_VAR 0 5
35928: IN
35929: PUSH
35930: LD_INT 30
35932: PUSH
35933: LD_VAR 0 5
35937: IN
35938: OR
35939: AND
35940: PUSH
35941: LD_INT 6
35943: PPUSH
35944: LD_VAR 0 16
35948: PPUSH
35949: CALL_OW 321
35953: PUSH
35954: LD_INT 2
35956: EQUAL
35957: AND
35958: IFFALSE 36123
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35960: LD_INT 22
35962: PUSH
35963: LD_VAR 0 16
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 2
35974: PUSH
35975: LD_INT 35
35977: PUSH
35978: LD_INT 11
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 35
35987: PUSH
35988: LD_INT 30
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 91
36002: PUSH
36003: LD_VAR 0 1
36007: PUSH
36008: LD_INT 18
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: LIST
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: LIST
36020: PPUSH
36021: CALL_OW 69
36025: NOT
36026: PUSH
36027: LD_INT 22
36029: PUSH
36030: LD_VAR 0 16
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 2
36041: PUSH
36042: LD_INT 30
36044: PUSH
36045: LD_INT 32
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 30
36054: PUSH
36055: LD_INT 33
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 91
36069: PUSH
36070: LD_VAR 0 1
36074: PUSH
36075: LD_INT 12
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: LIST
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: LIST
36087: PUSH
36088: EMPTY
36089: LIST
36090: PPUSH
36091: CALL_OW 69
36095: PUSH
36096: LD_INT 2
36098: GREATER
36099: AND
36100: IFFALSE 36123
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36102: LD_ADDR_VAR 0 18
36106: PUSH
36107: LD_INT 11
36109: PUSH
36110: LD_INT 30
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_VAR 0 12
36121: ARRAY
36122: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36123: LD_VAR 0 18
36127: NOT
36128: PUSH
36129: LD_INT 40
36131: PPUSH
36132: LD_VAR 0 16
36136: PPUSH
36137: CALL_OW 321
36141: PUSH
36142: LD_INT 2
36144: EQUAL
36145: AND
36146: PUSH
36147: LD_INT 7
36149: PUSH
36150: LD_VAR 0 5
36154: IN
36155: PUSH
36156: LD_INT 28
36158: PUSH
36159: LD_VAR 0 5
36163: IN
36164: OR
36165: PUSH
36166: LD_INT 45
36168: PUSH
36169: LD_VAR 0 5
36173: IN
36174: OR
36175: AND
36176: IFFALSE 36430
// begin hex := GetHexInfo ( x , y ) ;
36178: LD_ADDR_VAR 0 4
36182: PUSH
36183: LD_VAR 0 10
36187: PPUSH
36188: LD_VAR 0 11
36192: PPUSH
36193: CALL_OW 546
36197: ST_TO_ADDR
// if hex [ 1 ] then
36198: LD_VAR 0 4
36202: PUSH
36203: LD_INT 1
36205: ARRAY
36206: IFFALSE 36210
// exit ;
36208: GO 36613
// height := hex [ 2 ] ;
36210: LD_ADDR_VAR 0 15
36214: PUSH
36215: LD_VAR 0 4
36219: PUSH
36220: LD_INT 2
36222: ARRAY
36223: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36224: LD_ADDR_VAR 0 14
36228: PUSH
36229: LD_INT 0
36231: PUSH
36232: LD_INT 2
36234: PUSH
36235: LD_INT 3
36237: PUSH
36238: LD_INT 5
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: ST_TO_ADDR
// for i in tmp do
36247: LD_ADDR_VAR 0 8
36251: PUSH
36252: LD_VAR 0 14
36256: PUSH
36257: FOR_IN
36258: IFFALSE 36428
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36260: LD_ADDR_VAR 0 9
36264: PUSH
36265: LD_VAR 0 10
36269: PPUSH
36270: LD_VAR 0 8
36274: PPUSH
36275: LD_INT 5
36277: PPUSH
36278: CALL_OW 272
36282: PUSH
36283: LD_VAR 0 11
36287: PPUSH
36288: LD_VAR 0 8
36292: PPUSH
36293: LD_INT 5
36295: PPUSH
36296: CALL_OW 273
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36305: LD_VAR 0 9
36309: PUSH
36310: LD_INT 1
36312: ARRAY
36313: PPUSH
36314: LD_VAR 0 9
36318: PUSH
36319: LD_INT 2
36321: ARRAY
36322: PPUSH
36323: CALL_OW 488
36327: IFFALSE 36426
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36329: LD_ADDR_VAR 0 4
36333: PUSH
36334: LD_VAR 0 9
36338: PUSH
36339: LD_INT 1
36341: ARRAY
36342: PPUSH
36343: LD_VAR 0 9
36347: PUSH
36348: LD_INT 2
36350: ARRAY
36351: PPUSH
36352: CALL_OW 546
36356: ST_TO_ADDR
// if hex [ 1 ] then
36357: LD_VAR 0 4
36361: PUSH
36362: LD_INT 1
36364: ARRAY
36365: IFFALSE 36369
// continue ;
36367: GO 36257
// h := hex [ 2 ] ;
36369: LD_ADDR_VAR 0 13
36373: PUSH
36374: LD_VAR 0 4
36378: PUSH
36379: LD_INT 2
36381: ARRAY
36382: ST_TO_ADDR
// if h + 7 < height then
36383: LD_VAR 0 13
36387: PUSH
36388: LD_INT 7
36390: PLUS
36391: PUSH
36392: LD_VAR 0 15
36396: LESS
36397: IFFALSE 36426
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36399: LD_ADDR_VAR 0 18
36403: PUSH
36404: LD_INT 7
36406: PUSH
36407: LD_INT 28
36409: PUSH
36410: LD_INT 45
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: LIST
36417: PUSH
36418: LD_VAR 0 12
36422: ARRAY
36423: ST_TO_ADDR
// break ;
36424: GO 36428
// end ; end ; end ;
36426: GO 36257
36428: POP
36429: POP
// end ; if not weapon then
36430: LD_VAR 0 18
36434: NOT
36435: IFFALSE 36495
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36437: LD_ADDR_VAR 0 5
36441: PUSH
36442: LD_VAR 0 5
36446: PUSH
36447: LD_INT 11
36449: PUSH
36450: LD_INT 30
36452: PUSH
36453: LD_INT 49
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: LIST
36460: DIFF
36461: ST_TO_ADDR
// if not list then
36462: LD_VAR 0 5
36466: NOT
36467: IFFALSE 36471
// exit ;
36469: GO 36613
// weapon := list [ rand ( 1 , list ) ] ;
36471: LD_ADDR_VAR 0 18
36475: PUSH
36476: LD_VAR 0 5
36480: PUSH
36481: LD_INT 1
36483: PPUSH
36484: LD_VAR 0 5
36488: PPUSH
36489: CALL_OW 12
36493: ARRAY
36494: ST_TO_ADDR
// end ; if weapon then
36495: LD_VAR 0 18
36499: IFFALSE 36613
// begin tmp := CostOfWeapon ( weapon ) ;
36501: LD_ADDR_VAR 0 14
36505: PUSH
36506: LD_VAR 0 18
36510: PPUSH
36511: CALL_OW 451
36515: ST_TO_ADDR
// j := GetBase ( tower ) ;
36516: LD_ADDR_VAR 0 9
36520: PUSH
36521: LD_VAR 0 1
36525: PPUSH
36526: CALL_OW 274
36530: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36531: LD_VAR 0 9
36535: PPUSH
36536: LD_INT 1
36538: PPUSH
36539: CALL_OW 275
36543: PUSH
36544: LD_VAR 0 14
36548: PUSH
36549: LD_INT 1
36551: ARRAY
36552: GREATEREQUAL
36553: PUSH
36554: LD_VAR 0 9
36558: PPUSH
36559: LD_INT 2
36561: PPUSH
36562: CALL_OW 275
36566: PUSH
36567: LD_VAR 0 14
36571: PUSH
36572: LD_INT 2
36574: ARRAY
36575: GREATEREQUAL
36576: AND
36577: PUSH
36578: LD_VAR 0 9
36582: PPUSH
36583: LD_INT 3
36585: PPUSH
36586: CALL_OW 275
36590: PUSH
36591: LD_VAR 0 14
36595: PUSH
36596: LD_INT 3
36598: ARRAY
36599: GREATEREQUAL
36600: AND
36601: IFFALSE 36613
// result := weapon ;
36603: LD_ADDR_VAR 0 3
36607: PUSH
36608: LD_VAR 0 18
36612: ST_TO_ADDR
// end ; end ;
36613: LD_VAR 0 3
36617: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36618: LD_INT 0
36620: PPUSH
36621: PPUSH
// result := true ;
36622: LD_ADDR_VAR 0 3
36626: PUSH
36627: LD_INT 1
36629: ST_TO_ADDR
// if array1 = array2 then
36630: LD_VAR 0 1
36634: PUSH
36635: LD_VAR 0 2
36639: EQUAL
36640: IFFALSE 36700
// begin for i = 1 to array1 do
36642: LD_ADDR_VAR 0 4
36646: PUSH
36647: DOUBLE
36648: LD_INT 1
36650: DEC
36651: ST_TO_ADDR
36652: LD_VAR 0 1
36656: PUSH
36657: FOR_TO
36658: IFFALSE 36696
// if array1 [ i ] <> array2 [ i ] then
36660: LD_VAR 0 1
36664: PUSH
36665: LD_VAR 0 4
36669: ARRAY
36670: PUSH
36671: LD_VAR 0 2
36675: PUSH
36676: LD_VAR 0 4
36680: ARRAY
36681: NONEQUAL
36682: IFFALSE 36694
// begin result := false ;
36684: LD_ADDR_VAR 0 3
36688: PUSH
36689: LD_INT 0
36691: ST_TO_ADDR
// break ;
36692: GO 36696
// end ;
36694: GO 36657
36696: POP
36697: POP
// end else
36698: GO 36708
// result := false ;
36700: LD_ADDR_VAR 0 3
36704: PUSH
36705: LD_INT 0
36707: ST_TO_ADDR
// end ;
36708: LD_VAR 0 3
36712: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36713: LD_INT 0
36715: PPUSH
36716: PPUSH
// if not array1 or not array2 then
36717: LD_VAR 0 1
36721: NOT
36722: PUSH
36723: LD_VAR 0 2
36727: NOT
36728: OR
36729: IFFALSE 36733
// exit ;
36731: GO 36797
// result := true ;
36733: LD_ADDR_VAR 0 3
36737: PUSH
36738: LD_INT 1
36740: ST_TO_ADDR
// for i = 1 to array1 do
36741: LD_ADDR_VAR 0 4
36745: PUSH
36746: DOUBLE
36747: LD_INT 1
36749: DEC
36750: ST_TO_ADDR
36751: LD_VAR 0 1
36755: PUSH
36756: FOR_TO
36757: IFFALSE 36795
// if array1 [ i ] <> array2 [ i ] then
36759: LD_VAR 0 1
36763: PUSH
36764: LD_VAR 0 4
36768: ARRAY
36769: PUSH
36770: LD_VAR 0 2
36774: PUSH
36775: LD_VAR 0 4
36779: ARRAY
36780: NONEQUAL
36781: IFFALSE 36793
// begin result := false ;
36783: LD_ADDR_VAR 0 3
36787: PUSH
36788: LD_INT 0
36790: ST_TO_ADDR
// break ;
36791: GO 36795
// end ;
36793: GO 36756
36795: POP
36796: POP
// end ;
36797: LD_VAR 0 3
36801: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36802: LD_INT 0
36804: PPUSH
36805: PPUSH
36806: PPUSH
// pom := GetBase ( fac ) ;
36807: LD_ADDR_VAR 0 5
36811: PUSH
36812: LD_VAR 0 1
36816: PPUSH
36817: CALL_OW 274
36821: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36822: LD_ADDR_VAR 0 4
36826: PUSH
36827: LD_VAR 0 2
36831: PUSH
36832: LD_INT 1
36834: ARRAY
36835: PPUSH
36836: LD_VAR 0 2
36840: PUSH
36841: LD_INT 2
36843: ARRAY
36844: PPUSH
36845: LD_VAR 0 2
36849: PUSH
36850: LD_INT 3
36852: ARRAY
36853: PPUSH
36854: LD_VAR 0 2
36858: PUSH
36859: LD_INT 4
36861: ARRAY
36862: PPUSH
36863: CALL_OW 449
36867: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36868: LD_ADDR_VAR 0 3
36872: PUSH
36873: LD_VAR 0 5
36877: PPUSH
36878: LD_INT 1
36880: PPUSH
36881: CALL_OW 275
36885: PUSH
36886: LD_VAR 0 4
36890: PUSH
36891: LD_INT 1
36893: ARRAY
36894: GREATEREQUAL
36895: PUSH
36896: LD_VAR 0 5
36900: PPUSH
36901: LD_INT 2
36903: PPUSH
36904: CALL_OW 275
36908: PUSH
36909: LD_VAR 0 4
36913: PUSH
36914: LD_INT 2
36916: ARRAY
36917: GREATEREQUAL
36918: AND
36919: PUSH
36920: LD_VAR 0 5
36924: PPUSH
36925: LD_INT 3
36927: PPUSH
36928: CALL_OW 275
36932: PUSH
36933: LD_VAR 0 4
36937: PUSH
36938: LD_INT 3
36940: ARRAY
36941: GREATEREQUAL
36942: AND
36943: ST_TO_ADDR
// end ;
36944: LD_VAR 0 3
36948: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36949: LD_INT 0
36951: PPUSH
36952: PPUSH
36953: PPUSH
36954: PPUSH
// pom := GetBase ( building ) ;
36955: LD_ADDR_VAR 0 3
36959: PUSH
36960: LD_VAR 0 1
36964: PPUSH
36965: CALL_OW 274
36969: ST_TO_ADDR
// if not pom then
36970: LD_VAR 0 3
36974: NOT
36975: IFFALSE 36979
// exit ;
36977: GO 37149
// btype := GetBType ( building ) ;
36979: LD_ADDR_VAR 0 5
36983: PUSH
36984: LD_VAR 0 1
36988: PPUSH
36989: CALL_OW 266
36993: ST_TO_ADDR
// if btype = b_armoury then
36994: LD_VAR 0 5
36998: PUSH
36999: LD_INT 4
37001: EQUAL
37002: IFFALSE 37012
// btype := b_barracks ;
37004: LD_ADDR_VAR 0 5
37008: PUSH
37009: LD_INT 5
37011: ST_TO_ADDR
// if btype = b_depot then
37012: LD_VAR 0 5
37016: PUSH
37017: LD_INT 0
37019: EQUAL
37020: IFFALSE 37030
// btype := b_warehouse ;
37022: LD_ADDR_VAR 0 5
37026: PUSH
37027: LD_INT 1
37029: ST_TO_ADDR
// if btype = b_workshop then
37030: LD_VAR 0 5
37034: PUSH
37035: LD_INT 2
37037: EQUAL
37038: IFFALSE 37048
// btype := b_factory ;
37040: LD_ADDR_VAR 0 5
37044: PUSH
37045: LD_INT 3
37047: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37048: LD_ADDR_VAR 0 4
37052: PUSH
37053: LD_VAR 0 5
37057: PPUSH
37058: LD_VAR 0 1
37062: PPUSH
37063: CALL_OW 248
37067: PPUSH
37068: CALL_OW 450
37072: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37073: LD_ADDR_VAR 0 2
37077: PUSH
37078: LD_VAR 0 3
37082: PPUSH
37083: LD_INT 1
37085: PPUSH
37086: CALL_OW 275
37090: PUSH
37091: LD_VAR 0 4
37095: PUSH
37096: LD_INT 1
37098: ARRAY
37099: GREATEREQUAL
37100: PUSH
37101: LD_VAR 0 3
37105: PPUSH
37106: LD_INT 2
37108: PPUSH
37109: CALL_OW 275
37113: PUSH
37114: LD_VAR 0 4
37118: PUSH
37119: LD_INT 2
37121: ARRAY
37122: GREATEREQUAL
37123: AND
37124: PUSH
37125: LD_VAR 0 3
37129: PPUSH
37130: LD_INT 3
37132: PPUSH
37133: CALL_OW 275
37137: PUSH
37138: LD_VAR 0 4
37142: PUSH
37143: LD_INT 3
37145: ARRAY
37146: GREATEREQUAL
37147: AND
37148: ST_TO_ADDR
// end ;
37149: LD_VAR 0 2
37153: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37154: LD_INT 0
37156: PPUSH
37157: PPUSH
37158: PPUSH
// pom := GetBase ( building ) ;
37159: LD_ADDR_VAR 0 4
37163: PUSH
37164: LD_VAR 0 1
37168: PPUSH
37169: CALL_OW 274
37173: ST_TO_ADDR
// if not pom then
37174: LD_VAR 0 4
37178: NOT
37179: IFFALSE 37183
// exit ;
37181: GO 37284
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37183: LD_ADDR_VAR 0 5
37187: PUSH
37188: LD_VAR 0 2
37192: PPUSH
37193: LD_VAR 0 1
37197: PPUSH
37198: CALL_OW 248
37202: PPUSH
37203: CALL_OW 450
37207: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37208: LD_ADDR_VAR 0 3
37212: PUSH
37213: LD_VAR 0 4
37217: PPUSH
37218: LD_INT 1
37220: PPUSH
37221: CALL_OW 275
37225: PUSH
37226: LD_VAR 0 5
37230: PUSH
37231: LD_INT 1
37233: ARRAY
37234: GREATEREQUAL
37235: PUSH
37236: LD_VAR 0 4
37240: PPUSH
37241: LD_INT 2
37243: PPUSH
37244: CALL_OW 275
37248: PUSH
37249: LD_VAR 0 5
37253: PUSH
37254: LD_INT 2
37256: ARRAY
37257: GREATEREQUAL
37258: AND
37259: PUSH
37260: LD_VAR 0 4
37264: PPUSH
37265: LD_INT 3
37267: PPUSH
37268: CALL_OW 275
37272: PUSH
37273: LD_VAR 0 5
37277: PUSH
37278: LD_INT 3
37280: ARRAY
37281: GREATEREQUAL
37282: AND
37283: ST_TO_ADDR
// end ;
37284: LD_VAR 0 3
37288: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37289: LD_INT 0
37291: PPUSH
37292: PPUSH
37293: PPUSH
37294: PPUSH
37295: PPUSH
37296: PPUSH
37297: PPUSH
37298: PPUSH
37299: PPUSH
37300: PPUSH
37301: PPUSH
// result := false ;
37302: LD_ADDR_VAR 0 8
37306: PUSH
37307: LD_INT 0
37309: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37310: LD_VAR 0 5
37314: NOT
37315: PUSH
37316: LD_VAR 0 1
37320: NOT
37321: OR
37322: PUSH
37323: LD_VAR 0 2
37327: NOT
37328: OR
37329: PUSH
37330: LD_VAR 0 3
37334: NOT
37335: OR
37336: IFFALSE 37340
// exit ;
37338: GO 38154
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37340: LD_ADDR_VAR 0 14
37344: PUSH
37345: LD_VAR 0 1
37349: PPUSH
37350: LD_VAR 0 2
37354: PPUSH
37355: LD_VAR 0 3
37359: PPUSH
37360: LD_VAR 0 4
37364: PPUSH
37365: LD_VAR 0 5
37369: PUSH
37370: LD_INT 1
37372: ARRAY
37373: PPUSH
37374: CALL_OW 248
37378: PPUSH
37379: LD_INT 0
37381: PPUSH
37382: CALL 39391 0 6
37386: ST_TO_ADDR
// if not hexes then
37387: LD_VAR 0 14
37391: NOT
37392: IFFALSE 37396
// exit ;
37394: GO 38154
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37396: LD_ADDR_VAR 0 17
37400: PUSH
37401: LD_VAR 0 5
37405: PPUSH
37406: LD_INT 22
37408: PUSH
37409: LD_VAR 0 13
37413: PPUSH
37414: CALL_OW 255
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 2
37425: PUSH
37426: LD_INT 30
37428: PUSH
37429: LD_INT 0
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 30
37438: PUSH
37439: LD_INT 1
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: LIST
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PPUSH
37455: CALL_OW 72
37459: ST_TO_ADDR
// for i = 1 to hexes do
37460: LD_ADDR_VAR 0 9
37464: PUSH
37465: DOUBLE
37466: LD_INT 1
37468: DEC
37469: ST_TO_ADDR
37470: LD_VAR 0 14
37474: PUSH
37475: FOR_TO
37476: IFFALSE 38152
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37478: LD_ADDR_VAR 0 13
37482: PUSH
37483: LD_VAR 0 14
37487: PUSH
37488: LD_VAR 0 9
37492: ARRAY
37493: PUSH
37494: LD_INT 1
37496: ARRAY
37497: PPUSH
37498: LD_VAR 0 14
37502: PUSH
37503: LD_VAR 0 9
37507: ARRAY
37508: PUSH
37509: LD_INT 2
37511: ARRAY
37512: PPUSH
37513: CALL_OW 428
37517: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37518: LD_VAR 0 14
37522: PUSH
37523: LD_VAR 0 9
37527: ARRAY
37528: PUSH
37529: LD_INT 1
37531: ARRAY
37532: PPUSH
37533: LD_VAR 0 14
37537: PUSH
37538: LD_VAR 0 9
37542: ARRAY
37543: PUSH
37544: LD_INT 2
37546: ARRAY
37547: PPUSH
37548: CALL_OW 351
37552: PUSH
37553: LD_VAR 0 14
37557: PUSH
37558: LD_VAR 0 9
37562: ARRAY
37563: PUSH
37564: LD_INT 1
37566: ARRAY
37567: PPUSH
37568: LD_VAR 0 14
37572: PUSH
37573: LD_VAR 0 9
37577: ARRAY
37578: PUSH
37579: LD_INT 2
37581: ARRAY
37582: PPUSH
37583: CALL_OW 488
37587: NOT
37588: OR
37589: PUSH
37590: LD_VAR 0 13
37594: PPUSH
37595: CALL_OW 247
37599: PUSH
37600: LD_INT 3
37602: EQUAL
37603: OR
37604: IFFALSE 37610
// exit ;
37606: POP
37607: POP
37608: GO 38154
// if not tmp then
37610: LD_VAR 0 13
37614: NOT
37615: IFFALSE 37619
// continue ;
37617: GO 37475
// result := true ;
37619: LD_ADDR_VAR 0 8
37623: PUSH
37624: LD_INT 1
37626: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37627: LD_VAR 0 6
37631: PUSH
37632: LD_VAR 0 13
37636: PPUSH
37637: CALL_OW 247
37641: PUSH
37642: LD_INT 2
37644: EQUAL
37645: AND
37646: PUSH
37647: LD_VAR 0 13
37651: PPUSH
37652: CALL_OW 263
37656: PUSH
37657: LD_INT 1
37659: EQUAL
37660: AND
37661: IFFALSE 37825
// begin if IsDrivenBy ( tmp ) then
37663: LD_VAR 0 13
37667: PPUSH
37668: CALL_OW 311
37672: IFFALSE 37676
// continue ;
37674: GO 37475
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37676: LD_VAR 0 6
37680: PPUSH
37681: LD_INT 3
37683: PUSH
37684: LD_INT 60
37686: PUSH
37687: EMPTY
37688: LIST
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 3
37696: PUSH
37697: LD_INT 55
37699: PUSH
37700: EMPTY
37701: LIST
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PPUSH
37711: CALL_OW 72
37715: IFFALSE 37823
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37717: LD_ADDR_VAR 0 18
37721: PUSH
37722: LD_VAR 0 6
37726: PPUSH
37727: LD_INT 3
37729: PUSH
37730: LD_INT 60
37732: PUSH
37733: EMPTY
37734: LIST
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 3
37742: PUSH
37743: LD_INT 55
37745: PUSH
37746: EMPTY
37747: LIST
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PPUSH
37757: CALL_OW 72
37761: PUSH
37762: LD_INT 1
37764: ARRAY
37765: ST_TO_ADDR
// if IsInUnit ( driver ) then
37766: LD_VAR 0 18
37770: PPUSH
37771: CALL_OW 310
37775: IFFALSE 37786
// ComExit ( driver ) ;
37777: LD_VAR 0 18
37781: PPUSH
37782: CALL 62519 0 1
// AddComEnterUnit ( driver , tmp ) ;
37786: LD_VAR 0 18
37790: PPUSH
37791: LD_VAR 0 13
37795: PPUSH
37796: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37800: LD_VAR 0 18
37804: PPUSH
37805: LD_VAR 0 7
37809: PPUSH
37810: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37814: LD_VAR 0 18
37818: PPUSH
37819: CALL_OW 181
// end ; continue ;
37823: GO 37475
// end ; if not cleaners or not tmp in cleaners then
37825: LD_VAR 0 6
37829: NOT
37830: PUSH
37831: LD_VAR 0 13
37835: PUSH
37836: LD_VAR 0 6
37840: IN
37841: NOT
37842: OR
37843: IFFALSE 38150
// begin if dep then
37845: LD_VAR 0 17
37849: IFFALSE 37985
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37851: LD_ADDR_VAR 0 16
37855: PUSH
37856: LD_VAR 0 17
37860: PUSH
37861: LD_INT 1
37863: ARRAY
37864: PPUSH
37865: CALL_OW 250
37869: PPUSH
37870: LD_VAR 0 17
37874: PUSH
37875: LD_INT 1
37877: ARRAY
37878: PPUSH
37879: CALL_OW 254
37883: PPUSH
37884: LD_INT 5
37886: PPUSH
37887: CALL_OW 272
37891: PUSH
37892: LD_VAR 0 17
37896: PUSH
37897: LD_INT 1
37899: ARRAY
37900: PPUSH
37901: CALL_OW 251
37905: PPUSH
37906: LD_VAR 0 17
37910: PUSH
37911: LD_INT 1
37913: ARRAY
37914: PPUSH
37915: CALL_OW 254
37919: PPUSH
37920: LD_INT 5
37922: PPUSH
37923: CALL_OW 273
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37932: LD_VAR 0 16
37936: PUSH
37937: LD_INT 1
37939: ARRAY
37940: PPUSH
37941: LD_VAR 0 16
37945: PUSH
37946: LD_INT 2
37948: ARRAY
37949: PPUSH
37950: CALL_OW 488
37954: IFFALSE 37985
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37956: LD_VAR 0 13
37960: PPUSH
37961: LD_VAR 0 16
37965: PUSH
37966: LD_INT 1
37968: ARRAY
37969: PPUSH
37970: LD_VAR 0 16
37974: PUSH
37975: LD_INT 2
37977: ARRAY
37978: PPUSH
37979: CALL_OW 111
// continue ;
37983: GO 37475
// end ; end ; r := GetDir ( tmp ) ;
37985: LD_ADDR_VAR 0 15
37989: PUSH
37990: LD_VAR 0 13
37994: PPUSH
37995: CALL_OW 254
37999: ST_TO_ADDR
// if r = 5 then
38000: LD_VAR 0 15
38004: PUSH
38005: LD_INT 5
38007: EQUAL
38008: IFFALSE 38018
// r := 0 ;
38010: LD_ADDR_VAR 0 15
38014: PUSH
38015: LD_INT 0
38017: ST_TO_ADDR
// for j = r to 5 do
38018: LD_ADDR_VAR 0 10
38022: PUSH
38023: DOUBLE
38024: LD_VAR 0 15
38028: DEC
38029: ST_TO_ADDR
38030: LD_INT 5
38032: PUSH
38033: FOR_TO
38034: IFFALSE 38148
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38036: LD_ADDR_VAR 0 11
38040: PUSH
38041: LD_VAR 0 13
38045: PPUSH
38046: CALL_OW 250
38050: PPUSH
38051: LD_VAR 0 10
38055: PPUSH
38056: LD_INT 2
38058: PPUSH
38059: CALL_OW 272
38063: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38064: LD_ADDR_VAR 0 12
38068: PUSH
38069: LD_VAR 0 13
38073: PPUSH
38074: CALL_OW 251
38078: PPUSH
38079: LD_VAR 0 10
38083: PPUSH
38084: LD_INT 2
38086: PPUSH
38087: CALL_OW 273
38091: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38092: LD_VAR 0 11
38096: PPUSH
38097: LD_VAR 0 12
38101: PPUSH
38102: CALL_OW 488
38106: PUSH
38107: LD_VAR 0 11
38111: PPUSH
38112: LD_VAR 0 12
38116: PPUSH
38117: CALL_OW 428
38121: NOT
38122: AND
38123: IFFALSE 38146
// begin ComMoveXY ( tmp , _x , _y ) ;
38125: LD_VAR 0 13
38129: PPUSH
38130: LD_VAR 0 11
38134: PPUSH
38135: LD_VAR 0 12
38139: PPUSH
38140: CALL_OW 111
// break ;
38144: GO 38148
// end ; end ;
38146: GO 38033
38148: POP
38149: POP
// end ; end ;
38150: GO 37475
38152: POP
38153: POP
// end ;
38154: LD_VAR 0 8
38158: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38159: LD_INT 0
38161: PPUSH
// result := true ;
38162: LD_ADDR_VAR 0 3
38166: PUSH
38167: LD_INT 1
38169: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38170: LD_VAR 0 2
38174: PUSH
38175: LD_INT 24
38177: DOUBLE
38178: EQUAL
38179: IFTRUE 38189
38181: LD_INT 33
38183: DOUBLE
38184: EQUAL
38185: IFTRUE 38189
38187: GO 38214
38189: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38190: LD_ADDR_VAR 0 3
38194: PUSH
38195: LD_INT 32
38197: PPUSH
38198: LD_VAR 0 1
38202: PPUSH
38203: CALL_OW 321
38207: PUSH
38208: LD_INT 2
38210: EQUAL
38211: ST_TO_ADDR
38212: GO 38534
38214: LD_INT 20
38216: DOUBLE
38217: EQUAL
38218: IFTRUE 38222
38220: GO 38247
38222: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38223: LD_ADDR_VAR 0 3
38227: PUSH
38228: LD_INT 6
38230: PPUSH
38231: LD_VAR 0 1
38235: PPUSH
38236: CALL_OW 321
38240: PUSH
38241: LD_INT 2
38243: EQUAL
38244: ST_TO_ADDR
38245: GO 38534
38247: LD_INT 22
38249: DOUBLE
38250: EQUAL
38251: IFTRUE 38261
38253: LD_INT 36
38255: DOUBLE
38256: EQUAL
38257: IFTRUE 38261
38259: GO 38286
38261: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38262: LD_ADDR_VAR 0 3
38266: PUSH
38267: LD_INT 15
38269: PPUSH
38270: LD_VAR 0 1
38274: PPUSH
38275: CALL_OW 321
38279: PUSH
38280: LD_INT 2
38282: EQUAL
38283: ST_TO_ADDR
38284: GO 38534
38286: LD_INT 30
38288: DOUBLE
38289: EQUAL
38290: IFTRUE 38294
38292: GO 38319
38294: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38295: LD_ADDR_VAR 0 3
38299: PUSH
38300: LD_INT 20
38302: PPUSH
38303: LD_VAR 0 1
38307: PPUSH
38308: CALL_OW 321
38312: PUSH
38313: LD_INT 2
38315: EQUAL
38316: ST_TO_ADDR
38317: GO 38534
38319: LD_INT 28
38321: DOUBLE
38322: EQUAL
38323: IFTRUE 38333
38325: LD_INT 21
38327: DOUBLE
38328: EQUAL
38329: IFTRUE 38333
38331: GO 38358
38333: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38334: LD_ADDR_VAR 0 3
38338: PUSH
38339: LD_INT 21
38341: PPUSH
38342: LD_VAR 0 1
38346: PPUSH
38347: CALL_OW 321
38351: PUSH
38352: LD_INT 2
38354: EQUAL
38355: ST_TO_ADDR
38356: GO 38534
38358: LD_INT 16
38360: DOUBLE
38361: EQUAL
38362: IFTRUE 38366
38364: GO 38393
38366: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38367: LD_ADDR_VAR 0 3
38371: PUSH
38372: LD_EXP 72
38376: PPUSH
38377: LD_VAR 0 1
38381: PPUSH
38382: CALL_OW 321
38386: PUSH
38387: LD_INT 2
38389: EQUAL
38390: ST_TO_ADDR
38391: GO 38534
38393: LD_INT 19
38395: DOUBLE
38396: EQUAL
38397: IFTRUE 38407
38399: LD_INT 23
38401: DOUBLE
38402: EQUAL
38403: IFTRUE 38407
38405: GO 38434
38407: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38408: LD_ADDR_VAR 0 3
38412: PUSH
38413: LD_EXP 71
38417: PPUSH
38418: LD_VAR 0 1
38422: PPUSH
38423: CALL_OW 321
38427: PUSH
38428: LD_INT 2
38430: EQUAL
38431: ST_TO_ADDR
38432: GO 38534
38434: LD_INT 17
38436: DOUBLE
38437: EQUAL
38438: IFTRUE 38442
38440: GO 38467
38442: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38443: LD_ADDR_VAR 0 3
38447: PUSH
38448: LD_INT 39
38450: PPUSH
38451: LD_VAR 0 1
38455: PPUSH
38456: CALL_OW 321
38460: PUSH
38461: LD_INT 2
38463: EQUAL
38464: ST_TO_ADDR
38465: GO 38534
38467: LD_INT 18
38469: DOUBLE
38470: EQUAL
38471: IFTRUE 38475
38473: GO 38500
38475: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38476: LD_ADDR_VAR 0 3
38480: PUSH
38481: LD_INT 40
38483: PPUSH
38484: LD_VAR 0 1
38488: PPUSH
38489: CALL_OW 321
38493: PUSH
38494: LD_INT 2
38496: EQUAL
38497: ST_TO_ADDR
38498: GO 38534
38500: LD_INT 27
38502: DOUBLE
38503: EQUAL
38504: IFTRUE 38508
38506: GO 38533
38508: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38509: LD_ADDR_VAR 0 3
38513: PUSH
38514: LD_INT 35
38516: PPUSH
38517: LD_VAR 0 1
38521: PPUSH
38522: CALL_OW 321
38526: PUSH
38527: LD_INT 2
38529: EQUAL
38530: ST_TO_ADDR
38531: GO 38534
38533: POP
// end ;
38534: LD_VAR 0 3
38538: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38539: LD_INT 0
38541: PPUSH
38542: PPUSH
38543: PPUSH
38544: PPUSH
38545: PPUSH
38546: PPUSH
38547: PPUSH
38548: PPUSH
38549: PPUSH
38550: PPUSH
38551: PPUSH
// result := false ;
38552: LD_ADDR_VAR 0 6
38556: PUSH
38557: LD_INT 0
38559: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38560: LD_VAR 0 1
38564: NOT
38565: PUSH
38566: LD_VAR 0 1
38570: PPUSH
38571: CALL_OW 266
38575: PUSH
38576: LD_INT 0
38578: PUSH
38579: LD_INT 1
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: IN
38586: NOT
38587: OR
38588: PUSH
38589: LD_VAR 0 2
38593: NOT
38594: OR
38595: PUSH
38596: LD_VAR 0 5
38600: PUSH
38601: LD_INT 0
38603: PUSH
38604: LD_INT 1
38606: PUSH
38607: LD_INT 2
38609: PUSH
38610: LD_INT 3
38612: PUSH
38613: LD_INT 4
38615: PUSH
38616: LD_INT 5
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: IN
38627: NOT
38628: OR
38629: PUSH
38630: LD_VAR 0 3
38634: PPUSH
38635: LD_VAR 0 4
38639: PPUSH
38640: CALL_OW 488
38644: NOT
38645: OR
38646: IFFALSE 38650
// exit ;
38648: GO 39386
// side := GetSide ( depot ) ;
38650: LD_ADDR_VAR 0 9
38654: PUSH
38655: LD_VAR 0 1
38659: PPUSH
38660: CALL_OW 255
38664: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38665: LD_VAR 0 9
38669: PPUSH
38670: LD_VAR 0 2
38674: PPUSH
38675: CALL 38159 0 2
38679: NOT
38680: IFFALSE 38684
// exit ;
38682: GO 39386
// pom := GetBase ( depot ) ;
38684: LD_ADDR_VAR 0 10
38688: PUSH
38689: LD_VAR 0 1
38693: PPUSH
38694: CALL_OW 274
38698: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38699: LD_ADDR_VAR 0 11
38703: PUSH
38704: LD_VAR 0 2
38708: PPUSH
38709: LD_VAR 0 1
38713: PPUSH
38714: CALL_OW 248
38718: PPUSH
38719: CALL_OW 450
38723: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38724: LD_VAR 0 10
38728: PPUSH
38729: LD_INT 1
38731: PPUSH
38732: CALL_OW 275
38736: PUSH
38737: LD_VAR 0 11
38741: PUSH
38742: LD_INT 1
38744: ARRAY
38745: GREATEREQUAL
38746: PUSH
38747: LD_VAR 0 10
38751: PPUSH
38752: LD_INT 2
38754: PPUSH
38755: CALL_OW 275
38759: PUSH
38760: LD_VAR 0 11
38764: PUSH
38765: LD_INT 2
38767: ARRAY
38768: GREATEREQUAL
38769: AND
38770: PUSH
38771: LD_VAR 0 10
38775: PPUSH
38776: LD_INT 3
38778: PPUSH
38779: CALL_OW 275
38783: PUSH
38784: LD_VAR 0 11
38788: PUSH
38789: LD_INT 3
38791: ARRAY
38792: GREATEREQUAL
38793: AND
38794: NOT
38795: IFFALSE 38799
// exit ;
38797: GO 39386
// if GetBType ( depot ) = b_depot then
38799: LD_VAR 0 1
38803: PPUSH
38804: CALL_OW 266
38808: PUSH
38809: LD_INT 0
38811: EQUAL
38812: IFFALSE 38824
// dist := 28 else
38814: LD_ADDR_VAR 0 14
38818: PUSH
38819: LD_INT 28
38821: ST_TO_ADDR
38822: GO 38832
// dist := 36 ;
38824: LD_ADDR_VAR 0 14
38828: PUSH
38829: LD_INT 36
38831: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38832: LD_VAR 0 1
38836: PPUSH
38837: LD_VAR 0 3
38841: PPUSH
38842: LD_VAR 0 4
38846: PPUSH
38847: CALL_OW 297
38851: PUSH
38852: LD_VAR 0 14
38856: GREATER
38857: IFFALSE 38861
// exit ;
38859: GO 39386
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38861: LD_ADDR_VAR 0 12
38865: PUSH
38866: LD_VAR 0 2
38870: PPUSH
38871: LD_VAR 0 3
38875: PPUSH
38876: LD_VAR 0 4
38880: PPUSH
38881: LD_VAR 0 5
38885: PPUSH
38886: LD_VAR 0 1
38890: PPUSH
38891: CALL_OW 248
38895: PPUSH
38896: LD_INT 0
38898: PPUSH
38899: CALL 39391 0 6
38903: ST_TO_ADDR
// if not hexes then
38904: LD_VAR 0 12
38908: NOT
38909: IFFALSE 38913
// exit ;
38911: GO 39386
// hex := GetHexInfo ( x , y ) ;
38913: LD_ADDR_VAR 0 15
38917: PUSH
38918: LD_VAR 0 3
38922: PPUSH
38923: LD_VAR 0 4
38927: PPUSH
38928: CALL_OW 546
38932: ST_TO_ADDR
// if hex [ 1 ] then
38933: LD_VAR 0 15
38937: PUSH
38938: LD_INT 1
38940: ARRAY
38941: IFFALSE 38945
// exit ;
38943: GO 39386
// height := hex [ 2 ] ;
38945: LD_ADDR_VAR 0 13
38949: PUSH
38950: LD_VAR 0 15
38954: PUSH
38955: LD_INT 2
38957: ARRAY
38958: ST_TO_ADDR
// for i = 1 to hexes do
38959: LD_ADDR_VAR 0 7
38963: PUSH
38964: DOUBLE
38965: LD_INT 1
38967: DEC
38968: ST_TO_ADDR
38969: LD_VAR 0 12
38973: PUSH
38974: FOR_TO
38975: IFFALSE 39305
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38977: LD_VAR 0 12
38981: PUSH
38982: LD_VAR 0 7
38986: ARRAY
38987: PUSH
38988: LD_INT 1
38990: ARRAY
38991: PPUSH
38992: LD_VAR 0 12
38996: PUSH
38997: LD_VAR 0 7
39001: ARRAY
39002: PUSH
39003: LD_INT 2
39005: ARRAY
39006: PPUSH
39007: CALL_OW 488
39011: NOT
39012: PUSH
39013: LD_VAR 0 12
39017: PUSH
39018: LD_VAR 0 7
39022: ARRAY
39023: PUSH
39024: LD_INT 1
39026: ARRAY
39027: PPUSH
39028: LD_VAR 0 12
39032: PUSH
39033: LD_VAR 0 7
39037: ARRAY
39038: PUSH
39039: LD_INT 2
39041: ARRAY
39042: PPUSH
39043: CALL_OW 428
39047: PUSH
39048: LD_INT 0
39050: GREATER
39051: OR
39052: PUSH
39053: LD_VAR 0 12
39057: PUSH
39058: LD_VAR 0 7
39062: ARRAY
39063: PUSH
39064: LD_INT 1
39066: ARRAY
39067: PPUSH
39068: LD_VAR 0 12
39072: PUSH
39073: LD_VAR 0 7
39077: ARRAY
39078: PUSH
39079: LD_INT 2
39081: ARRAY
39082: PPUSH
39083: CALL_OW 351
39087: OR
39088: IFFALSE 39094
// exit ;
39090: POP
39091: POP
39092: GO 39386
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39094: LD_ADDR_VAR 0 8
39098: PUSH
39099: LD_VAR 0 12
39103: PUSH
39104: LD_VAR 0 7
39108: ARRAY
39109: PUSH
39110: LD_INT 1
39112: ARRAY
39113: PPUSH
39114: LD_VAR 0 12
39118: PUSH
39119: LD_VAR 0 7
39123: ARRAY
39124: PUSH
39125: LD_INT 2
39127: ARRAY
39128: PPUSH
39129: CALL_OW 546
39133: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39134: LD_VAR 0 8
39138: PUSH
39139: LD_INT 1
39141: ARRAY
39142: PUSH
39143: LD_VAR 0 8
39147: PUSH
39148: LD_INT 2
39150: ARRAY
39151: PUSH
39152: LD_VAR 0 13
39156: PUSH
39157: LD_INT 2
39159: PLUS
39160: GREATER
39161: OR
39162: PUSH
39163: LD_VAR 0 8
39167: PUSH
39168: LD_INT 2
39170: ARRAY
39171: PUSH
39172: LD_VAR 0 13
39176: PUSH
39177: LD_INT 2
39179: MINUS
39180: LESS
39181: OR
39182: PUSH
39183: LD_VAR 0 8
39187: PUSH
39188: LD_INT 3
39190: ARRAY
39191: PUSH
39192: LD_INT 0
39194: PUSH
39195: LD_INT 8
39197: PUSH
39198: LD_INT 9
39200: PUSH
39201: LD_INT 10
39203: PUSH
39204: LD_INT 11
39206: PUSH
39207: LD_INT 12
39209: PUSH
39210: LD_INT 13
39212: PUSH
39213: LD_INT 16
39215: PUSH
39216: LD_INT 17
39218: PUSH
39219: LD_INT 18
39221: PUSH
39222: LD_INT 19
39224: PUSH
39225: LD_INT 20
39227: PUSH
39228: LD_INT 21
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: IN
39246: NOT
39247: OR
39248: PUSH
39249: LD_VAR 0 8
39253: PUSH
39254: LD_INT 5
39256: ARRAY
39257: NOT
39258: OR
39259: PUSH
39260: LD_VAR 0 8
39264: PUSH
39265: LD_INT 6
39267: ARRAY
39268: PUSH
39269: LD_INT 1
39271: PUSH
39272: LD_INT 2
39274: PUSH
39275: LD_INT 7
39277: PUSH
39278: LD_INT 9
39280: PUSH
39281: LD_INT 10
39283: PUSH
39284: LD_INT 11
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: IN
39295: NOT
39296: OR
39297: IFFALSE 39303
// exit ;
39299: POP
39300: POP
39301: GO 39386
// end ;
39303: GO 38974
39305: POP
39306: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39307: LD_VAR 0 9
39311: PPUSH
39312: LD_VAR 0 3
39316: PPUSH
39317: LD_VAR 0 4
39321: PPUSH
39322: LD_INT 20
39324: PPUSH
39325: CALL 31332 0 4
39329: PUSH
39330: LD_INT 4
39332: ARRAY
39333: IFFALSE 39337
// exit ;
39335: GO 39386
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39337: LD_VAR 0 2
39341: PUSH
39342: LD_INT 29
39344: PUSH
39345: LD_INT 30
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: IN
39352: PUSH
39353: LD_VAR 0 3
39357: PPUSH
39358: LD_VAR 0 4
39362: PPUSH
39363: LD_VAR 0 9
39367: PPUSH
39368: CALL_OW 440
39372: NOT
39373: AND
39374: IFFALSE 39378
// exit ;
39376: GO 39386
// result := true ;
39378: LD_ADDR_VAR 0 6
39382: PUSH
39383: LD_INT 1
39385: ST_TO_ADDR
// end ;
39386: LD_VAR 0 6
39390: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39391: LD_INT 0
39393: PPUSH
39394: PPUSH
39395: PPUSH
39396: PPUSH
39397: PPUSH
39398: PPUSH
39399: PPUSH
39400: PPUSH
39401: PPUSH
39402: PPUSH
39403: PPUSH
39404: PPUSH
39405: PPUSH
39406: PPUSH
39407: PPUSH
39408: PPUSH
39409: PPUSH
39410: PPUSH
39411: PPUSH
39412: PPUSH
39413: PPUSH
39414: PPUSH
39415: PPUSH
39416: PPUSH
39417: PPUSH
39418: PPUSH
39419: PPUSH
39420: PPUSH
39421: PPUSH
39422: PPUSH
39423: PPUSH
39424: PPUSH
39425: PPUSH
39426: PPUSH
39427: PPUSH
39428: PPUSH
39429: PPUSH
39430: PPUSH
39431: PPUSH
39432: PPUSH
39433: PPUSH
39434: PPUSH
39435: PPUSH
39436: PPUSH
39437: PPUSH
39438: PPUSH
39439: PPUSH
39440: PPUSH
39441: PPUSH
39442: PPUSH
39443: PPUSH
39444: PPUSH
39445: PPUSH
39446: PPUSH
39447: PPUSH
39448: PPUSH
39449: PPUSH
39450: PPUSH
// result = [ ] ;
39451: LD_ADDR_VAR 0 7
39455: PUSH
39456: EMPTY
39457: ST_TO_ADDR
// temp_list = [ ] ;
39458: LD_ADDR_VAR 0 9
39462: PUSH
39463: EMPTY
39464: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39465: LD_VAR 0 4
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: LD_INT 1
39475: PUSH
39476: LD_INT 2
39478: PUSH
39479: LD_INT 3
39481: PUSH
39482: LD_INT 4
39484: PUSH
39485: LD_INT 5
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: IN
39496: NOT
39497: PUSH
39498: LD_VAR 0 1
39502: PUSH
39503: LD_INT 0
39505: PUSH
39506: LD_INT 1
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: IN
39513: PUSH
39514: LD_VAR 0 5
39518: PUSH
39519: LD_INT 1
39521: PUSH
39522: LD_INT 2
39524: PUSH
39525: LD_INT 3
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: LIST
39532: IN
39533: NOT
39534: AND
39535: OR
39536: IFFALSE 39540
// exit ;
39538: GO 57931
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39540: LD_VAR 0 1
39544: PUSH
39545: LD_INT 6
39547: PUSH
39548: LD_INT 7
39550: PUSH
39551: LD_INT 8
39553: PUSH
39554: LD_INT 13
39556: PUSH
39557: LD_INT 12
39559: PUSH
39560: LD_INT 15
39562: PUSH
39563: LD_INT 11
39565: PUSH
39566: LD_INT 14
39568: PUSH
39569: LD_INT 10
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: IN
39583: IFFALSE 39593
// btype = b_lab ;
39585: LD_ADDR_VAR 0 1
39589: PUSH
39590: LD_INT 6
39592: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39593: LD_VAR 0 6
39597: PUSH
39598: LD_INT 0
39600: PUSH
39601: LD_INT 1
39603: PUSH
39604: LD_INT 2
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: LIST
39611: IN
39612: NOT
39613: PUSH
39614: LD_VAR 0 1
39618: PUSH
39619: LD_INT 0
39621: PUSH
39622: LD_INT 1
39624: PUSH
39625: LD_INT 2
39627: PUSH
39628: LD_INT 3
39630: PUSH
39631: LD_INT 6
39633: PUSH
39634: LD_INT 36
39636: PUSH
39637: LD_INT 4
39639: PUSH
39640: LD_INT 5
39642: PUSH
39643: LD_INT 31
39645: PUSH
39646: LD_INT 32
39648: PUSH
39649: LD_INT 33
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: IN
39665: NOT
39666: PUSH
39667: LD_VAR 0 6
39671: PUSH
39672: LD_INT 1
39674: EQUAL
39675: AND
39676: OR
39677: PUSH
39678: LD_VAR 0 1
39682: PUSH
39683: LD_INT 2
39685: PUSH
39686: LD_INT 3
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: IN
39693: NOT
39694: PUSH
39695: LD_VAR 0 6
39699: PUSH
39700: LD_INT 2
39702: EQUAL
39703: AND
39704: OR
39705: IFFALSE 39715
// mode = 0 ;
39707: LD_ADDR_VAR 0 6
39711: PUSH
39712: LD_INT 0
39714: ST_TO_ADDR
// case mode of 0 :
39715: LD_VAR 0 6
39719: PUSH
39720: LD_INT 0
39722: DOUBLE
39723: EQUAL
39724: IFTRUE 39728
39726: GO 51181
39728: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39729: LD_ADDR_VAR 0 11
39733: PUSH
39734: LD_INT 0
39736: PUSH
39737: LD_INT 0
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 0
39746: PUSH
39747: LD_INT 1
39749: NEG
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 1
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 1
39767: PUSH
39768: LD_INT 1
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 0
39777: PUSH
39778: LD_INT 1
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 1
39787: NEG
39788: PUSH
39789: LD_INT 0
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 1
39798: NEG
39799: PUSH
39800: LD_INT 1
39802: NEG
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 1
39810: NEG
39811: PUSH
39812: LD_INT 2
39814: NEG
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 0
39822: PUSH
39823: LD_INT 2
39825: NEG
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 1
39833: PUSH
39834: LD_INT 1
39836: NEG
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 1
39844: PUSH
39845: LD_INT 2
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 0
39854: PUSH
39855: LD_INT 2
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 1
39864: NEG
39865: PUSH
39866: LD_INT 1
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 1
39875: PUSH
39876: LD_INT 3
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 0
39885: PUSH
39886: LD_INT 3
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 1
39895: NEG
39896: PUSH
39897: LD_INT 2
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: LIST
39914: LIST
39915: LIST
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39922: LD_ADDR_VAR 0 12
39926: PUSH
39927: LD_INT 0
39929: PUSH
39930: LD_INT 0
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 0
39939: PUSH
39940: LD_INT 1
39942: NEG
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 1
39950: PUSH
39951: LD_INT 0
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 1
39960: PUSH
39961: LD_INT 1
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 0
39970: PUSH
39971: LD_INT 1
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 1
39980: NEG
39981: PUSH
39982: LD_INT 0
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 1
39991: NEG
39992: PUSH
39993: LD_INT 1
39995: NEG
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 1
40003: PUSH
40004: LD_INT 1
40006: NEG
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 2
40014: PUSH
40015: LD_INT 0
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 2
40024: PUSH
40025: LD_INT 1
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 1
40034: NEG
40035: PUSH
40036: LD_INT 1
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 2
40045: NEG
40046: PUSH
40047: LD_INT 0
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 2
40056: NEG
40057: PUSH
40058: LD_INT 1
40060: NEG
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 2
40068: NEG
40069: PUSH
40070: LD_INT 1
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 3
40079: NEG
40080: PUSH
40081: LD_INT 0
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 3
40090: NEG
40091: PUSH
40092: LD_INT 1
40094: NEG
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40118: LD_ADDR_VAR 0 13
40122: PUSH
40123: LD_INT 0
40125: PUSH
40126: LD_INT 0
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 0
40135: PUSH
40136: LD_INT 1
40138: NEG
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 1
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 1
40156: PUSH
40157: LD_INT 1
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 0
40166: PUSH
40167: LD_INT 1
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 1
40176: NEG
40177: PUSH
40178: LD_INT 0
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 1
40187: NEG
40188: PUSH
40189: LD_INT 1
40191: NEG
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 1
40199: NEG
40200: PUSH
40201: LD_INT 2
40203: NEG
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 2
40211: PUSH
40212: LD_INT 1
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 2
40221: PUSH
40222: LD_INT 2
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 1
40231: PUSH
40232: LD_INT 2
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 2
40241: NEG
40242: PUSH
40243: LD_INT 1
40245: NEG
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 2
40253: NEG
40254: PUSH
40255: LD_INT 2
40257: NEG
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 2
40265: NEG
40266: PUSH
40267: LD_INT 3
40269: NEG
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 3
40277: NEG
40278: PUSH
40279: LD_INT 2
40281: NEG
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 3
40289: NEG
40290: PUSH
40291: LD_INT 3
40293: NEG
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40317: LD_ADDR_VAR 0 14
40321: PUSH
40322: LD_INT 0
40324: PUSH
40325: LD_INT 0
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 0
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 1
40345: PUSH
40346: LD_INT 0
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 1
40355: PUSH
40356: LD_INT 1
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 0
40365: PUSH
40366: LD_INT 1
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 1
40375: NEG
40376: PUSH
40377: LD_INT 0
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 1
40386: NEG
40387: PUSH
40388: LD_INT 1
40390: NEG
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 1
40398: NEG
40399: PUSH
40400: LD_INT 2
40402: NEG
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 0
40410: PUSH
40411: LD_INT 2
40413: NEG
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 1
40421: PUSH
40422: LD_INT 1
40424: NEG
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 1
40432: PUSH
40433: LD_INT 2
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 0
40442: PUSH
40443: LD_INT 2
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 1
40452: NEG
40453: PUSH
40454: LD_INT 1
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 1
40463: NEG
40464: PUSH
40465: LD_INT 3
40467: NEG
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 0
40475: PUSH
40476: LD_INT 3
40478: NEG
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 1
40486: PUSH
40487: LD_INT 2
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40513: LD_ADDR_VAR 0 15
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 0
40530: PUSH
40531: LD_INT 1
40533: NEG
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 1
40541: PUSH
40542: LD_INT 0
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 1
40551: PUSH
40552: LD_INT 1
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 0
40561: PUSH
40562: LD_INT 1
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 1
40571: NEG
40572: PUSH
40573: LD_INT 0
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 1
40582: NEG
40583: PUSH
40584: LD_INT 1
40586: NEG
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 1
40594: PUSH
40595: LD_INT 1
40597: NEG
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 2
40605: PUSH
40606: LD_INT 0
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 2
40615: PUSH
40616: LD_INT 1
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 1
40625: NEG
40626: PUSH
40627: LD_INT 1
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 2
40636: NEG
40637: PUSH
40638: LD_INT 0
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 2
40647: NEG
40648: PUSH
40649: LD_INT 1
40651: NEG
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 2
40659: PUSH
40660: LD_INT 1
40662: NEG
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 3
40670: PUSH
40671: LD_INT 0
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 3
40680: PUSH
40681: LD_INT 1
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40706: LD_ADDR_VAR 0 16
40710: PUSH
40711: LD_INT 0
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 0
40723: PUSH
40724: LD_INT 1
40726: NEG
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 1
40734: PUSH
40735: LD_INT 0
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 1
40744: PUSH
40745: LD_INT 1
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 0
40754: PUSH
40755: LD_INT 1
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 1
40764: NEG
40765: PUSH
40766: LD_INT 0
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 1
40775: NEG
40776: PUSH
40777: LD_INT 1
40779: NEG
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 1
40787: NEG
40788: PUSH
40789: LD_INT 2
40791: NEG
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 2
40799: PUSH
40800: LD_INT 1
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 2
40809: PUSH
40810: LD_INT 2
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 1
40819: PUSH
40820: LD_INT 2
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 2
40829: NEG
40830: PUSH
40831: LD_INT 1
40833: NEG
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 2
40841: NEG
40842: PUSH
40843: LD_INT 2
40845: NEG
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 3
40853: PUSH
40854: LD_INT 2
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 3
40863: PUSH
40864: LD_INT 3
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 2
40873: PUSH
40874: LD_INT 3
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40899: LD_ADDR_VAR 0 17
40903: PUSH
40904: LD_INT 0
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 0
40916: PUSH
40917: LD_INT 1
40919: NEG
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 1
40927: PUSH
40928: LD_INT 0
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 1
40937: PUSH
40938: LD_INT 1
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 0
40947: PUSH
40948: LD_INT 1
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 1
40957: NEG
40958: PUSH
40959: LD_INT 0
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 1
40968: NEG
40969: PUSH
40970: LD_INT 1
40972: NEG
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 1
40980: NEG
40981: PUSH
40982: LD_INT 2
40984: NEG
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 0
40992: PUSH
40993: LD_INT 2
40995: NEG
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 1
41003: PUSH
41004: LD_INT 1
41006: NEG
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 2
41014: PUSH
41015: LD_INT 0
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 2
41024: PUSH
41025: LD_INT 1
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 2
41034: PUSH
41035: LD_INT 2
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 1
41044: PUSH
41045: LD_INT 2
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 0
41054: PUSH
41055: LD_INT 2
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 1
41064: NEG
41065: PUSH
41066: LD_INT 1
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 2
41075: NEG
41076: PUSH
41077: LD_INT 0
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 2
41086: NEG
41087: PUSH
41088: LD_INT 1
41090: NEG
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 2
41098: NEG
41099: PUSH
41100: LD_INT 2
41102: NEG
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41129: LD_ADDR_VAR 0 18
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: LD_INT 0
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 0
41146: PUSH
41147: LD_INT 1
41149: NEG
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 1
41157: PUSH
41158: LD_INT 0
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: LD_INT 1
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 0
41177: PUSH
41178: LD_INT 1
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 1
41187: NEG
41188: PUSH
41189: LD_INT 0
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 1
41198: NEG
41199: PUSH
41200: LD_INT 1
41202: NEG
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 1
41210: NEG
41211: PUSH
41212: LD_INT 2
41214: NEG
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 0
41222: PUSH
41223: LD_INT 2
41225: NEG
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: LD_INT 1
41236: NEG
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 2
41244: PUSH
41245: LD_INT 0
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 2
41254: PUSH
41255: LD_INT 1
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 2
41264: PUSH
41265: LD_INT 2
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 1
41274: PUSH
41275: LD_INT 2
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 0
41284: PUSH
41285: LD_INT 2
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 1
41294: NEG
41295: PUSH
41296: LD_INT 1
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 2
41305: NEG
41306: PUSH
41307: LD_INT 0
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 2
41316: NEG
41317: PUSH
41318: LD_INT 1
41320: NEG
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 2
41328: NEG
41329: PUSH
41330: LD_INT 2
41332: NEG
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41359: LD_ADDR_VAR 0 19
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: LD_INT 0
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 0
41376: PUSH
41377: LD_INT 1
41379: NEG
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 1
41387: PUSH
41388: LD_INT 0
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 1
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 0
41407: PUSH
41408: LD_INT 1
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 1
41417: NEG
41418: PUSH
41419: LD_INT 0
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 1
41428: NEG
41429: PUSH
41430: LD_INT 1
41432: NEG
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 1
41440: NEG
41441: PUSH
41442: LD_INT 2
41444: NEG
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 0
41452: PUSH
41453: LD_INT 2
41455: NEG
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 1
41463: PUSH
41464: LD_INT 1
41466: NEG
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 2
41474: PUSH
41475: LD_INT 0
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 2
41484: PUSH
41485: LD_INT 1
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 2
41494: PUSH
41495: LD_INT 2
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 1
41504: PUSH
41505: LD_INT 2
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 0
41514: PUSH
41515: LD_INT 2
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 1
41524: NEG
41525: PUSH
41526: LD_INT 1
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 2
41535: NEG
41536: PUSH
41537: LD_INT 0
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 2
41546: NEG
41547: PUSH
41548: LD_INT 1
41550: NEG
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 2
41558: NEG
41559: PUSH
41560: LD_INT 2
41562: NEG
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41589: LD_ADDR_VAR 0 20
41593: PUSH
41594: LD_INT 0
41596: PUSH
41597: LD_INT 0
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 0
41606: PUSH
41607: LD_INT 1
41609: NEG
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 1
41617: PUSH
41618: LD_INT 0
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 1
41627: PUSH
41628: LD_INT 1
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 0
41637: PUSH
41638: LD_INT 1
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 1
41647: NEG
41648: PUSH
41649: LD_INT 0
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 1
41658: NEG
41659: PUSH
41660: LD_INT 1
41662: NEG
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 1
41670: NEG
41671: PUSH
41672: LD_INT 2
41674: NEG
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 0
41682: PUSH
41683: LD_INT 2
41685: NEG
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 1
41693: PUSH
41694: LD_INT 1
41696: NEG
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 2
41704: PUSH
41705: LD_INT 0
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 2
41714: PUSH
41715: LD_INT 1
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 2
41724: PUSH
41725: LD_INT 2
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 1
41734: PUSH
41735: LD_INT 2
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 0
41744: PUSH
41745: LD_INT 2
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 1
41754: NEG
41755: PUSH
41756: LD_INT 1
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 2
41765: NEG
41766: PUSH
41767: LD_INT 0
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 2
41776: NEG
41777: PUSH
41778: LD_INT 1
41780: NEG
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 2
41788: NEG
41789: PUSH
41790: LD_INT 2
41792: NEG
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41819: LD_ADDR_VAR 0 21
41823: PUSH
41824: LD_INT 0
41826: PUSH
41827: LD_INT 0
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 0
41836: PUSH
41837: LD_INT 1
41839: NEG
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 1
41847: PUSH
41848: LD_INT 0
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 1
41857: PUSH
41858: LD_INT 1
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 0
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 1
41877: NEG
41878: PUSH
41879: LD_INT 0
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 1
41888: NEG
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: LD_INT 2
41904: NEG
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 0
41912: PUSH
41913: LD_INT 2
41915: NEG
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: LD_INT 1
41926: NEG
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 2
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 2
41944: PUSH
41945: LD_INT 1
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 2
41954: PUSH
41955: LD_INT 2
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 1
41964: PUSH
41965: LD_INT 2
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 0
41974: PUSH
41975: LD_INT 2
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 1
41984: NEG
41985: PUSH
41986: LD_INT 1
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 2
41995: NEG
41996: PUSH
41997: LD_INT 0
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 2
42006: NEG
42007: PUSH
42008: LD_INT 1
42010: NEG
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 2
42018: NEG
42019: PUSH
42020: LD_INT 2
42022: NEG
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42049: LD_ADDR_VAR 0 22
42053: PUSH
42054: LD_INT 0
42056: PUSH
42057: LD_INT 0
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: LD_INT 1
42069: NEG
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 1
42077: PUSH
42078: LD_INT 0
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 1
42087: PUSH
42088: LD_INT 1
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: LD_INT 1
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 1
42107: NEG
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 1
42118: NEG
42119: PUSH
42120: LD_INT 1
42122: NEG
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 1
42130: NEG
42131: PUSH
42132: LD_INT 2
42134: NEG
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: LD_INT 2
42145: NEG
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 1
42153: PUSH
42154: LD_INT 1
42156: NEG
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 2
42164: PUSH
42165: LD_INT 0
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 2
42174: PUSH
42175: LD_INT 1
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 2
42184: PUSH
42185: LD_INT 2
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 1
42194: PUSH
42195: LD_INT 2
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 0
42204: PUSH
42205: LD_INT 2
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 1
42214: NEG
42215: PUSH
42216: LD_INT 1
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 2
42225: NEG
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 2
42236: NEG
42237: PUSH
42238: LD_INT 1
42240: NEG
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 2
42248: NEG
42249: PUSH
42250: LD_INT 2
42252: NEG
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42279: LD_ADDR_VAR 0 23
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: LD_INT 0
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: LD_INT 1
42299: NEG
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 1
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: LD_INT 1
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 0
42327: PUSH
42328: LD_INT 1
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 1
42337: NEG
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 1
42348: NEG
42349: PUSH
42350: LD_INT 1
42352: NEG
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 1
42360: NEG
42361: PUSH
42362: LD_INT 2
42364: NEG
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 0
42372: PUSH
42373: LD_INT 2
42375: NEG
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 1
42383: PUSH
42384: LD_INT 1
42386: NEG
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 2
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 2
42404: PUSH
42405: LD_INT 1
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 2
42414: PUSH
42415: LD_INT 2
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 1
42424: PUSH
42425: LD_INT 2
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 0
42434: PUSH
42435: LD_INT 2
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 1
42444: NEG
42445: PUSH
42446: LD_INT 1
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 2
42455: NEG
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 2
42466: NEG
42467: PUSH
42468: LD_INT 1
42470: NEG
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 2
42478: NEG
42479: PUSH
42480: LD_INT 2
42482: NEG
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 2
42490: NEG
42491: PUSH
42492: LD_INT 3
42494: NEG
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: NEG
42503: PUSH
42504: LD_INT 3
42506: NEG
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 1
42514: PUSH
42515: LD_INT 2
42517: NEG
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 2
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42559: LD_ADDR_VAR 0 24
42563: PUSH
42564: LD_INT 0
42566: PUSH
42567: LD_INT 0
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: LD_INT 1
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 1
42587: PUSH
42588: LD_INT 0
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 1
42597: PUSH
42598: LD_INT 1
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 0
42607: PUSH
42608: LD_INT 1
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 1
42617: NEG
42618: PUSH
42619: LD_INT 0
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: LD_INT 1
42632: NEG
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: LD_INT 2
42644: NEG
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: LD_INT 2
42655: NEG
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 2
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 2
42684: PUSH
42685: LD_INT 1
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 2
42694: PUSH
42695: LD_INT 2
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 1
42704: PUSH
42705: LD_INT 2
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 0
42714: PUSH
42715: LD_INT 2
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 1
42724: NEG
42725: PUSH
42726: LD_INT 1
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 2
42735: NEG
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 2
42746: NEG
42747: PUSH
42748: LD_INT 1
42750: NEG
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 2
42758: NEG
42759: PUSH
42760: LD_INT 2
42762: NEG
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 1
42770: PUSH
42771: LD_INT 2
42773: NEG
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 2
42781: PUSH
42782: LD_INT 1
42784: NEG
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 3
42792: PUSH
42793: LD_INT 1
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 3
42802: PUSH
42803: LD_INT 2
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42835: LD_ADDR_VAR 0 25
42839: PUSH
42840: LD_INT 0
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 0
42852: PUSH
42853: LD_INT 1
42855: NEG
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 1
42863: PUSH
42864: LD_INT 0
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 1
42873: PUSH
42874: LD_INT 1
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 0
42883: PUSH
42884: LD_INT 1
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 1
42893: NEG
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 1
42904: NEG
42905: PUSH
42906: LD_INT 1
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 1
42916: NEG
42917: PUSH
42918: LD_INT 2
42920: NEG
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: LD_INT 2
42931: NEG
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 1
42939: PUSH
42940: LD_INT 1
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 2
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 2
42960: PUSH
42961: LD_INT 1
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 2
42970: PUSH
42971: LD_INT 2
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 1
42980: PUSH
42981: LD_INT 2
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 0
42990: PUSH
42991: LD_INT 2
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 1
43000: NEG
43001: PUSH
43002: LD_INT 1
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 2
43011: NEG
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 2
43022: NEG
43023: PUSH
43024: LD_INT 1
43026: NEG
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 2
43034: NEG
43035: PUSH
43036: LD_INT 2
43038: NEG
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 3
43046: PUSH
43047: LD_INT 1
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 3
43056: PUSH
43057: LD_INT 2
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 2
43066: PUSH
43067: LD_INT 3
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 1
43076: PUSH
43077: LD_INT 3
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43109: LD_ADDR_VAR 0 26
43113: PUSH
43114: LD_INT 0
43116: PUSH
43117: LD_INT 0
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: LD_INT 1
43129: NEG
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 1
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 1
43147: PUSH
43148: LD_INT 1
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 0
43157: PUSH
43158: LD_INT 1
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 1
43167: NEG
43168: PUSH
43169: LD_INT 0
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 1
43178: NEG
43179: PUSH
43180: LD_INT 1
43182: NEG
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 1
43190: NEG
43191: PUSH
43192: LD_INT 2
43194: NEG
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 0
43202: PUSH
43203: LD_INT 2
43205: NEG
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 1
43213: PUSH
43214: LD_INT 1
43216: NEG
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 2
43224: PUSH
43225: LD_INT 0
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 2
43234: PUSH
43235: LD_INT 1
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 2
43244: PUSH
43245: LD_INT 2
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 1
43254: PUSH
43255: LD_INT 2
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: LD_INT 2
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 1
43274: NEG
43275: PUSH
43276: LD_INT 1
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 2
43285: NEG
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 2
43296: NEG
43297: PUSH
43298: LD_INT 1
43300: NEG
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 2
43308: NEG
43309: PUSH
43310: LD_INT 2
43312: NEG
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 2
43320: PUSH
43321: LD_INT 3
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 1
43330: PUSH
43331: LD_INT 3
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 1
43340: NEG
43341: PUSH
43342: LD_INT 2
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 2
43351: NEG
43352: PUSH
43353: LD_INT 1
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43385: LD_ADDR_VAR 0 27
43389: PUSH
43390: LD_INT 0
43392: PUSH
43393: LD_INT 0
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: LD_INT 1
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 1
43413: PUSH
43414: LD_INT 0
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 1
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 0
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 1
43443: NEG
43444: PUSH
43445: LD_INT 0
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 1
43454: NEG
43455: PUSH
43456: LD_INT 1
43458: NEG
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 1
43466: NEG
43467: PUSH
43468: LD_INT 2
43470: NEG
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 0
43478: PUSH
43479: LD_INT 2
43481: NEG
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 1
43489: PUSH
43490: LD_INT 1
43492: NEG
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 2
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 2
43510: PUSH
43511: LD_INT 1
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 2
43520: PUSH
43521: LD_INT 2
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 1
43530: PUSH
43531: LD_INT 2
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 0
43540: PUSH
43541: LD_INT 2
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 1
43550: NEG
43551: PUSH
43552: LD_INT 1
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 2
43561: NEG
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 2
43572: NEG
43573: PUSH
43574: LD_INT 1
43576: NEG
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 2
43584: NEG
43585: PUSH
43586: LD_INT 2
43588: NEG
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 1
43596: NEG
43597: PUSH
43598: LD_INT 2
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 2
43607: NEG
43608: PUSH
43609: LD_INT 1
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 3
43618: NEG
43619: PUSH
43620: LD_INT 1
43622: NEG
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 3
43630: NEG
43631: PUSH
43632: LD_INT 2
43634: NEG
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43665: LD_ADDR_VAR 0 28
43669: PUSH
43670: LD_INT 0
43672: PUSH
43673: LD_INT 0
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 0
43682: PUSH
43683: LD_INT 1
43685: NEG
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 1
43693: PUSH
43694: LD_INT 0
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: LD_INT 1
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: LD_INT 1
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: PUSH
43725: LD_INT 0
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: NEG
43735: PUSH
43736: LD_INT 1
43738: NEG
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 1
43746: NEG
43747: PUSH
43748: LD_INT 2
43750: NEG
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: LD_INT 2
43761: NEG
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 1
43769: PUSH
43770: LD_INT 1
43772: NEG
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 2
43780: PUSH
43781: LD_INT 0
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 2
43790: PUSH
43791: LD_INT 1
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 2
43800: PUSH
43801: LD_INT 2
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: LD_INT 2
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 0
43820: PUSH
43821: LD_INT 2
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 1
43830: NEG
43831: PUSH
43832: LD_INT 1
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 2
43841: NEG
43842: PUSH
43843: LD_INT 0
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 2
43852: NEG
43853: PUSH
43854: LD_INT 1
43856: NEG
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 2
43864: NEG
43865: PUSH
43866: LD_INT 2
43868: NEG
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 2
43876: NEG
43877: PUSH
43878: LD_INT 3
43880: NEG
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 1
43888: NEG
43889: PUSH
43890: LD_INT 3
43892: NEG
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 3
43900: NEG
43901: PUSH
43902: LD_INT 1
43904: NEG
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 3
43912: NEG
43913: PUSH
43914: LD_INT 2
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43947: LD_ADDR_VAR 0 29
43951: PUSH
43952: LD_INT 0
43954: PUSH
43955: LD_INT 0
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 0
43964: PUSH
43965: LD_INT 1
43967: NEG
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 1
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 1
43985: PUSH
43986: LD_INT 1
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: LD_INT 1
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 1
44005: NEG
44006: PUSH
44007: LD_INT 0
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 1
44016: NEG
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 1
44028: NEG
44029: PUSH
44030: LD_INT 2
44032: NEG
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 0
44040: PUSH
44041: LD_INT 2
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: LD_INT 1
44054: NEG
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 2
44062: PUSH
44063: LD_INT 0
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 2
44072: PUSH
44073: LD_INT 1
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: LD_INT 2
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 0
44092: PUSH
44093: LD_INT 2
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 1
44102: NEG
44103: PUSH
44104: LD_INT 1
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 2
44113: NEG
44114: PUSH
44115: LD_INT 1
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 2
44125: NEG
44126: PUSH
44127: LD_INT 2
44129: NEG
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 2
44137: NEG
44138: PUSH
44139: LD_INT 3
44141: NEG
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 2
44149: PUSH
44150: LD_INT 1
44152: NEG
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 3
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 1
44170: PUSH
44171: LD_INT 3
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: LD_INT 2
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 3
44191: NEG
44192: PUSH
44193: LD_INT 2
44195: NEG
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44226: LD_ADDR_VAR 0 30
44230: PUSH
44231: LD_INT 0
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: LD_INT 1
44246: NEG
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 1
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 1
44264: PUSH
44265: LD_INT 1
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 0
44274: PUSH
44275: LD_INT 1
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 1
44284: NEG
44285: PUSH
44286: LD_INT 0
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: LD_INT 1
44299: NEG
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: LD_INT 2
44311: NEG
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 0
44319: PUSH
44320: LD_INT 2
44322: NEG
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 1
44330: PUSH
44331: LD_INT 1
44333: NEG
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 2
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 2
44351: PUSH
44352: LD_INT 1
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 2
44361: PUSH
44362: LD_INT 2
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 1
44371: PUSH
44372: LD_INT 2
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 1
44381: NEG
44382: PUSH
44383: LD_INT 1
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 2
44392: NEG
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 2
44403: NEG
44404: PUSH
44405: LD_INT 1
44407: NEG
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: LD_INT 3
44419: NEG
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 1
44427: PUSH
44428: LD_INT 2
44430: NEG
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 3
44438: PUSH
44439: LD_INT 2
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 2
44448: PUSH
44449: LD_INT 3
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 2
44458: NEG
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 3
44469: NEG
44470: PUSH
44471: LD_INT 1
44473: NEG
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44504: LD_ADDR_VAR 0 31
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: LD_INT 1
44524: NEG
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 1
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: LD_INT 1
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 1
44573: NEG
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: NEG
44586: PUSH
44587: LD_INT 2
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: LD_INT 1
44600: NEG
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 2
44608: PUSH
44609: LD_INT 0
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 2
44618: PUSH
44619: LD_INT 1
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 2
44628: PUSH
44629: LD_INT 2
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 1
44638: PUSH
44639: LD_INT 2
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 0
44648: PUSH
44649: LD_INT 2
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 1
44658: NEG
44659: PUSH
44660: LD_INT 1
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 2
44669: NEG
44670: PUSH
44671: LD_INT 1
44673: NEG
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 2
44681: NEG
44682: PUSH
44683: LD_INT 2
44685: NEG
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 2
44693: NEG
44694: PUSH
44695: LD_INT 3
44697: NEG
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 2
44705: PUSH
44706: LD_INT 1
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 3
44716: PUSH
44717: LD_INT 1
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 1
44726: PUSH
44727: LD_INT 3
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: NEG
44737: PUSH
44738: LD_INT 2
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 3
44747: NEG
44748: PUSH
44749: LD_INT 2
44751: NEG
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44782: LD_ADDR_VAR 0 32
44786: PUSH
44787: LD_INT 0
44789: PUSH
44790: LD_INT 0
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 0
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 1
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 1
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: LD_INT 1
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 1
44840: NEG
44841: PUSH
44842: LD_INT 0
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: NEG
44852: PUSH
44853: LD_INT 1
44855: NEG
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: LD_INT 2
44867: NEG
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: LD_INT 2
44878: NEG
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: LD_INT 1
44889: NEG
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 2
44897: PUSH
44898: LD_INT 1
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 2
44907: PUSH
44908: LD_INT 2
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 1
44917: PUSH
44918: LD_INT 2
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 0
44927: PUSH
44928: LD_INT 2
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 1
44937: NEG
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 2
44948: NEG
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 2
44959: NEG
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: LD_INT 3
44975: NEG
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 1
44983: PUSH
44984: LD_INT 2
44986: NEG
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 3
44994: PUSH
44995: LD_INT 2
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 2
45004: PUSH
45005: LD_INT 3
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 2
45014: NEG
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 3
45025: NEG
45026: PUSH
45027: LD_INT 1
45029: NEG
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45060: LD_ADDR_VAR 0 33
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: LD_INT 1
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 1
45088: PUSH
45089: LD_INT 0
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: NEG
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 1
45129: NEG
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 1
45141: NEG
45142: PUSH
45143: LD_INT 2
45145: NEG
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 2
45174: PUSH
45175: LD_INT 1
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: LD_INT 2
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: LD_INT 2
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 2
45215: NEG
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 2
45226: NEG
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 2
45238: NEG
45239: PUSH
45240: LD_INT 2
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 2
45250: NEG
45251: PUSH
45252: LD_INT 3
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 2
45262: PUSH
45263: LD_INT 1
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 3
45273: PUSH
45274: LD_INT 1
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: LD_INT 3
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: LD_INT 2
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 3
45304: NEG
45305: PUSH
45306: LD_INT 2
45308: NEG
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45339: LD_ADDR_VAR 0 34
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: LD_INT 1
45359: NEG
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 1
45408: NEG
45409: PUSH
45410: LD_INT 1
45412: NEG
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 1
45420: NEG
45421: PUSH
45422: LD_INT 2
45424: NEG
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: LD_INT 2
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: PUSH
45444: LD_INT 1
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 2
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 2
45464: PUSH
45465: LD_INT 2
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 1
45474: PUSH
45475: LD_INT 2
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 1
45484: NEG
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 2
45495: NEG
45496: PUSH
45497: LD_INT 0
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 2
45506: NEG
45507: PUSH
45508: LD_INT 1
45510: NEG
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 2
45518: NEG
45519: PUSH
45520: LD_INT 2
45522: NEG
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: LD_INT 3
45534: NEG
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 1
45542: PUSH
45543: LD_INT 2
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 3
45553: PUSH
45554: LD_INT 2
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 2
45563: PUSH
45564: LD_INT 3
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 2
45573: NEG
45574: PUSH
45575: LD_INT 1
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 3
45584: NEG
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45619: LD_ADDR_VAR 0 35
45623: PUSH
45624: LD_INT 0
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: LD_INT 1
45639: NEG
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 1
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 1
45657: PUSH
45658: LD_INT 1
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 0
45667: PUSH
45668: LD_INT 1
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: NEG
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: LD_INT 1
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 2
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 2
45710: NEG
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45731: LD_ADDR_VAR 0 36
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 0
45748: PUSH
45749: LD_INT 1
45751: NEG
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 1
45769: PUSH
45770: LD_INT 1
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 0
45779: PUSH
45780: LD_INT 1
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 1
45789: NEG
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: LD_INT 1
45804: NEG
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: LD_INT 2
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: PUSH
45825: LD_INT 2
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45843: LD_ADDR_VAR 0 37
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 1
45901: NEG
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: NEG
45913: PUSH
45914: LD_INT 1
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: PUSH
45925: LD_INT 1
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 1
45935: NEG
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45955: LD_ADDR_VAR 0 38
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: LD_INT 0
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 0
45972: PUSH
45973: LD_INT 1
45975: NEG
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 1
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 1
45993: PUSH
45994: LD_INT 1
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: LD_INT 1
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 1
46013: NEG
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 2
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 2
46046: NEG
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46067: LD_ADDR_VAR 0 39
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: LD_INT 1
46087: NEG
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 1
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: LD_INT 1
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: LD_INT 1
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 1
46125: NEG
46126: PUSH
46127: LD_INT 0
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 1
46136: NEG
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 1
46148: NEG
46149: PUSH
46150: LD_INT 2
46152: NEG
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 1
46160: PUSH
46161: LD_INT 2
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46179: LD_ADDR_VAR 0 40
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: LD_INT 0
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: LD_INT 1
46199: NEG
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: NEG
46238: PUSH
46239: LD_INT 0
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: NEG
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 1
46260: PUSH
46261: LD_INT 1
46263: NEG
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 1
46271: NEG
46272: PUSH
46273: LD_INT 1
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46291: LD_ADDR_VAR 0 41
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: LD_INT 1
46311: NEG
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: PUSH
46320: LD_INT 0
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 1
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: LD_INT 1
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 1
46360: NEG
46361: PUSH
46362: LD_INT 1
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 1
46372: NEG
46373: PUSH
46374: LD_INT 2
46376: NEG
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: LD_INT 1
46387: NEG
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 2
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 2
46405: PUSH
46406: LD_INT 1
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 2
46415: PUSH
46416: LD_INT 2
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 1
46425: PUSH
46426: LD_INT 2
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 1
46435: NEG
46436: PUSH
46437: LD_INT 1
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 2
46446: NEG
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 2
46457: NEG
46458: PUSH
46459: LD_INT 1
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 2
46469: NEG
46470: PUSH
46471: LD_INT 2
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 2
46481: NEG
46482: PUSH
46483: LD_INT 3
46485: NEG
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 2
46493: PUSH
46494: LD_INT 1
46496: NEG
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 3
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 3
46514: PUSH
46515: LD_INT 1
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 3
46524: PUSH
46525: LD_INT 2
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 3
46534: PUSH
46535: LD_INT 3
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 2
46544: PUSH
46545: LD_INT 3
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 2
46554: NEG
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 3
46565: NEG
46566: PUSH
46567: LD_INT 0
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 3
46576: NEG
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 3
46588: NEG
46589: PUSH
46590: LD_INT 2
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 3
46600: NEG
46601: PUSH
46602: LD_INT 3
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46641: LD_ADDR_VAR 0 42
46645: PUSH
46646: LD_INT 0
46648: PUSH
46649: LD_INT 0
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 0
46658: PUSH
46659: LD_INT 1
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 1
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 1
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 0
46689: PUSH
46690: LD_INT 1
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: NEG
46700: PUSH
46701: LD_INT 0
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: LD_INT 1
46714: NEG
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 1
46722: NEG
46723: PUSH
46724: LD_INT 2
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 0
46734: PUSH
46735: LD_INT 2
46737: NEG
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 1
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 2
46756: PUSH
46757: LD_INT 1
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 2
46766: PUSH
46767: LD_INT 2
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 1
46776: PUSH
46777: LD_INT 2
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: LD_INT 2
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 1
46796: NEG
46797: PUSH
46798: LD_INT 1
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 2
46807: NEG
46808: PUSH
46809: LD_INT 1
46811: NEG
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 2
46819: NEG
46820: PUSH
46821: LD_INT 2
46823: NEG
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 2
46831: NEG
46832: PUSH
46833: LD_INT 3
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: LD_INT 3
46847: NEG
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: LD_INT 3
46858: NEG
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 1
46866: PUSH
46867: LD_INT 2
46869: NEG
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 3
46877: PUSH
46878: LD_INT 2
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 3
46887: PUSH
46888: LD_INT 3
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 2
46897: PUSH
46898: LD_INT 3
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 1
46907: PUSH
46908: LD_INT 3
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: LD_INT 3
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 1
46927: NEG
46928: PUSH
46929: LD_INT 2
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 3
46938: NEG
46939: PUSH
46940: LD_INT 2
46942: NEG
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 3
46950: NEG
46951: PUSH
46952: LD_INT 3
46954: NEG
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46991: LD_ADDR_VAR 0 43
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: LD_INT 1
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: LD_INT 1
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: LD_INT 1
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 1
47072: NEG
47073: PUSH
47074: LD_INT 2
47076: NEG
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: LD_INT 2
47087: NEG
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 2
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 2
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: LD_INT 2
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: LD_INT 2
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: NEG
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 2
47157: NEG
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 2
47168: NEG
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 1
47180: NEG
47181: PUSH
47182: LD_INT 3
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: LD_INT 3
47195: NEG
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: LD_INT 2
47206: NEG
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 2
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 3
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 3
47235: PUSH
47236: LD_INT 1
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 1
47245: PUSH
47246: LD_INT 3
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 0
47255: PUSH
47256: LD_INT 3
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 1
47265: NEG
47266: PUSH
47267: LD_INT 2
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 2
47276: NEG
47277: PUSH
47278: LD_INT 1
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 3
47287: NEG
47288: PUSH
47289: LD_INT 0
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 3
47298: NEG
47299: PUSH
47300: LD_INT 1
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47339: LD_ADDR_VAR 0 44
47343: PUSH
47344: LD_INT 0
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: LD_INT 1
47359: NEG
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 1
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 1
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 0
47387: PUSH
47388: LD_INT 1
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: NEG
47398: PUSH
47399: LD_INT 0
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: LD_INT 1
47412: NEG
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 1
47420: NEG
47421: PUSH
47422: LD_INT 2
47424: NEG
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 1
47432: PUSH
47433: LD_INT 1
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 2
47443: PUSH
47444: LD_INT 0
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 2
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 2
47463: PUSH
47464: LD_INT 2
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 1
47473: PUSH
47474: LD_INT 2
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 1
47483: NEG
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 2
47494: NEG
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 2
47505: NEG
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 2
47517: NEG
47518: PUSH
47519: LD_INT 2
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 2
47529: NEG
47530: PUSH
47531: LD_INT 3
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 2
47541: PUSH
47542: LD_INT 1
47544: NEG
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 3
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 3
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 3
47572: PUSH
47573: LD_INT 2
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 3
47582: PUSH
47583: LD_INT 3
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 2
47592: PUSH
47593: LD_INT 3
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 2
47602: NEG
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 3
47613: NEG
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 3
47624: NEG
47625: PUSH
47626: LD_INT 1
47628: NEG
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 3
47636: NEG
47637: PUSH
47638: LD_INT 2
47640: NEG
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 3
47648: NEG
47649: PUSH
47650: LD_INT 3
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47689: LD_ADDR_VAR 0 45
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: LD_INT 0
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 1
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 0
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 1
47747: NEG
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 1
47770: NEG
47771: PUSH
47772: LD_INT 2
47774: NEG
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 0
47782: PUSH
47783: LD_INT 2
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 2
47804: PUSH
47805: LD_INT 1
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 2
47814: PUSH
47815: LD_INT 2
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 1
47824: PUSH
47825: LD_INT 2
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: LD_INT 2
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 1
47844: NEG
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 2
47855: NEG
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 2
47867: NEG
47868: PUSH
47869: LD_INT 2
47871: NEG
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 2
47879: NEG
47880: PUSH
47881: LD_INT 3
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 1
47891: NEG
47892: PUSH
47893: LD_INT 3
47895: NEG
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: LD_INT 3
47906: NEG
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: LD_INT 2
47917: NEG
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 3
47925: PUSH
47926: LD_INT 2
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 3
47935: PUSH
47936: LD_INT 3
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 2
47945: PUSH
47946: LD_INT 3
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: LD_INT 3
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: LD_INT 3
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 1
47975: NEG
47976: PUSH
47977: LD_INT 2
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 3
47986: NEG
47987: PUSH
47988: LD_INT 2
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 3
47998: NEG
47999: PUSH
48000: LD_INT 3
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48039: LD_ADDR_VAR 0 46
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: LD_INT 1
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 1
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 1
48108: NEG
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 1
48120: NEG
48121: PUSH
48122: LD_INT 2
48124: NEG
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: LD_INT 2
48135: NEG
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 1
48143: PUSH
48144: LD_INT 1
48146: NEG
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 2
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 2
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 1
48174: PUSH
48175: LD_INT 2
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 0
48184: PUSH
48185: LD_INT 2
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 2
48205: NEG
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 2
48216: NEG
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 1
48228: NEG
48229: PUSH
48230: LD_INT 3
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: LD_INT 3
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: LD_INT 2
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 2
48262: PUSH
48263: LD_INT 1
48265: NEG
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 3
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 3
48283: PUSH
48284: LD_INT 1
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: LD_INT 3
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: LD_INT 3
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: LD_INT 2
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: NEG
48325: PUSH
48326: LD_INT 1
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 3
48335: NEG
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 3
48346: NEG
48347: PUSH
48348: LD_INT 1
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48387: LD_ADDR_VAR 0 47
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: LD_INT 0
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: LD_INT 1
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: LD_INT 1
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: NEG
48469: PUSH
48470: LD_INT 2
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: LD_INT 2
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 2
48502: NEG
48503: PUSH
48504: LD_INT 1
48506: NEG
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 2
48514: NEG
48515: PUSH
48516: LD_INT 2
48518: NEG
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48538: LD_ADDR_VAR 0 48
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: LD_INT 0
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: LD_INT 1
48558: NEG
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 1
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: LD_INT 1
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 1
48596: NEG
48597: PUSH
48598: LD_INT 0
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 1
48607: NEG
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 1
48619: NEG
48620: PUSH
48621: LD_INT 2
48623: NEG
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: LD_INT 2
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: LD_INT 1
48645: NEG
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 2
48653: PUSH
48654: LD_INT 0
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 2
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48685: LD_ADDR_VAR 0 49
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: LD_INT 1
48705: NEG
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: LD_INT 1
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: LD_INT 1
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: NEG
48755: PUSH
48756: LD_INT 1
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 1
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 2
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 2
48787: PUSH
48788: LD_INT 1
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 2
48797: PUSH
48798: LD_INT 2
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: LD_INT 2
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48829: LD_ADDR_VAR 0 50
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: LD_INT 1
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 1
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: LD_INT 1
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 2
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 2
48920: PUSH
48921: LD_INT 2
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 1
48930: PUSH
48931: LD_INT 2
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: LD_INT 2
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 1
48950: NEG
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48973: LD_ADDR_VAR 0 51
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: LD_INT 0
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: LD_INT 1
48993: NEG
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 1
49011: PUSH
49012: LD_INT 1
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 1
49031: NEG
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 1
49042: NEG
49043: PUSH
49044: LD_INT 1
49046: NEG
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: LD_INT 2
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: LD_INT 2
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 1
49074: NEG
49075: PUSH
49076: LD_INT 1
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 2
49085: NEG
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 2
49096: NEG
49097: PUSH
49098: LD_INT 1
49100: NEG
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49120: LD_ADDR_VAR 0 52
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: PUSH
49149: LD_INT 0
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 0
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: NEG
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 1
49201: NEG
49202: PUSH
49203: LD_INT 2
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 1
49213: NEG
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 2
49224: NEG
49225: PUSH
49226: LD_INT 0
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 2
49235: NEG
49236: PUSH
49237: LD_INT 1
49239: NEG
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 2
49247: NEG
49248: PUSH
49249: LD_INT 2
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49271: LD_ADDR_VAR 0 53
49275: PUSH
49276: LD_INT 0
49278: PUSH
49279: LD_INT 0
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: LD_INT 1
49291: NEG
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: LD_INT 0
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 1
49309: PUSH
49310: LD_INT 1
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: LD_INT 1
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 1
49340: NEG
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: LD_INT 2
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 0
49364: PUSH
49365: LD_INT 2
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 1
49375: PUSH
49376: LD_INT 1
49378: NEG
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 2
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 2
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 2
49406: PUSH
49407: LD_INT 2
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 1
49416: PUSH
49417: LD_INT 2
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 0
49426: PUSH
49427: LD_INT 2
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: NEG
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 2
49447: NEG
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 2
49458: NEG
49459: PUSH
49460: LD_INT 1
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 2
49470: NEG
49471: PUSH
49472: LD_INT 2
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49501: LD_ADDR_VAR 0 54
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: LD_INT 0
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: LD_INT 1
49521: NEG
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 1
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 1
49539: PUSH
49540: LD_INT 1
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 0
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 1
49559: NEG
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 1
49570: NEG
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: NEG
49583: PUSH
49584: LD_INT 2
49586: NEG
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: LD_INT 2
49597: NEG
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 2
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 2
49626: PUSH
49627: LD_INT 1
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 2
49636: PUSH
49637: LD_INT 2
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: PUSH
49647: LD_INT 2
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 0
49656: PUSH
49657: LD_INT 2
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: NEG
49667: PUSH
49668: LD_INT 1
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 2
49677: NEG
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 2
49688: NEG
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 2
49700: NEG
49701: PUSH
49702: LD_INT 2
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49731: LD_ADDR_VAR 0 55
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 1
49759: PUSH
49760: LD_INT 0
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: LD_INT 1
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 1
49812: NEG
49813: PUSH
49814: LD_INT 2
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: LD_INT 2
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 1
49835: PUSH
49836: LD_INT 1
49838: NEG
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 2
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 2
49856: PUSH
49857: LD_INT 1
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 2
49866: PUSH
49867: LD_INT 2
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 1
49876: PUSH
49877: LD_INT 2
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 0
49886: PUSH
49887: LD_INT 2
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 1
49896: NEG
49897: PUSH
49898: LD_INT 1
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 2
49907: NEG
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 2
49918: NEG
49919: PUSH
49920: LD_INT 1
49922: NEG
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 2
49930: NEG
49931: PUSH
49932: LD_INT 2
49934: NEG
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49961: LD_ADDR_VAR 0 56
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: LD_INT 1
49981: NEG
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 1
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 1
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 0
50009: PUSH
50010: LD_INT 1
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 1
50019: NEG
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 1
50030: NEG
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 1
50042: NEG
50043: PUSH
50044: LD_INT 2
50046: NEG
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 0
50054: PUSH
50055: LD_INT 2
50057: NEG
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: LD_INT 1
50068: NEG
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 2
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 2
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 2
50096: PUSH
50097: LD_INT 2
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: LD_INT 2
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 0
50116: PUSH
50117: LD_INT 2
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 1
50126: NEG
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 2
50137: NEG
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 2
50148: NEG
50149: PUSH
50150: LD_INT 1
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 2
50160: NEG
50161: PUSH
50162: LD_INT 2
50164: NEG
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50191: LD_ADDR_VAR 0 57
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 0
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: LD_INT 0
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 0
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 1
50272: NEG
50273: PUSH
50274: LD_INT 2
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: LD_INT 2
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: LD_INT 1
50298: NEG
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 2
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 2
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 2
50326: PUSH
50327: LD_INT 2
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: LD_INT 2
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: LD_INT 2
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 1
50356: NEG
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 2
50367: NEG
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 2
50378: NEG
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 2
50390: NEG
50391: PUSH
50392: LD_INT 2
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50421: LD_ADDR_VAR 0 58
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: LD_INT 1
50441: NEG
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 1
50490: NEG
50491: PUSH
50492: LD_INT 1
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 1
50502: NEG
50503: PUSH
50504: LD_INT 2
50506: NEG
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 0
50514: PUSH
50515: LD_INT 2
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: LD_INT 1
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 2
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 2
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 2
50556: PUSH
50557: LD_INT 2
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 1
50566: PUSH
50567: LD_INT 2
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 0
50576: PUSH
50577: LD_INT 2
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 1
50586: NEG
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 2
50597: NEG
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 2
50608: NEG
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 2
50620: NEG
50621: PUSH
50622: LD_INT 2
50624: NEG
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50651: LD_ADDR_VAR 0 59
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 0
50668: PUSH
50669: LD_INT 1
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 1
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 0
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: NEG
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 1
50720: NEG
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50739: LD_ADDR_VAR 0 60
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: LD_INT 1
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 1
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: LD_INT 1
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50827: LD_ADDR_VAR 0 61
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: LD_INT 0
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: LD_INT 1
50847: NEG
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 0
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: LD_INT 1
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50915: LD_ADDR_VAR 0 62
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 0
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: NEG
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 1
50984: NEG
50985: PUSH
50986: LD_INT 1
50988: NEG
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51003: LD_ADDR_VAR 0 63
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: LD_INT 0
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: LD_INT 1
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 0
51051: PUSH
51052: LD_INT 1
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 1
51061: NEG
51062: PUSH
51063: LD_INT 0
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51091: LD_ADDR_VAR 0 64
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 1
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: LD_INT 1
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 1
51149: NEG
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: LD_INT 1
51164: NEG
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: ST_TO_ADDR
// end ; 1 :
51179: GO 57076
51181: LD_INT 1
51183: DOUBLE
51184: EQUAL
51185: IFTRUE 51189
51187: GO 53812
51189: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51190: LD_ADDR_VAR 0 11
51194: PUSH
51195: LD_INT 1
51197: NEG
51198: PUSH
51199: LD_INT 3
51201: NEG
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: LD_INT 3
51212: NEG
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: LD_INT 2
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: LIST
51233: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51234: LD_ADDR_VAR 0 12
51238: PUSH
51239: LD_INT 2
51241: PUSH
51242: LD_INT 1
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 3
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 3
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: LIST
51274: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51275: LD_ADDR_VAR 0 13
51279: PUSH
51280: LD_INT 3
51282: PUSH
51283: LD_INT 2
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 3
51292: PUSH
51293: LD_INT 3
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 2
51302: PUSH
51303: LD_INT 3
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: LIST
51314: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51315: LD_ADDR_VAR 0 14
51319: PUSH
51320: LD_INT 1
51322: PUSH
51323: LD_INT 3
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 0
51332: PUSH
51333: LD_INT 3
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: NEG
51343: PUSH
51344: LD_INT 2
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: LIST
51355: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51356: LD_ADDR_VAR 0 15
51360: PUSH
51361: LD_INT 2
51363: NEG
51364: PUSH
51365: LD_INT 1
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 3
51374: NEG
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 3
51385: NEG
51386: PUSH
51387: LD_INT 1
51389: NEG
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: LIST
51399: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51400: LD_ADDR_VAR 0 16
51404: PUSH
51405: LD_INT 2
51407: NEG
51408: PUSH
51409: LD_INT 3
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 3
51419: NEG
51420: PUSH
51421: LD_INT 2
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 3
51431: NEG
51432: PUSH
51433: LD_INT 3
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: LIST
51445: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51446: LD_ADDR_VAR 0 17
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: LD_INT 3
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: LD_INT 3
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 1
51476: PUSH
51477: LD_INT 2
51479: NEG
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: LIST
51489: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51490: LD_ADDR_VAR 0 18
51494: PUSH
51495: LD_INT 2
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 3
51508: PUSH
51509: LD_INT 0
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 3
51518: PUSH
51519: LD_INT 1
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: LIST
51530: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51531: LD_ADDR_VAR 0 19
51535: PUSH
51536: LD_INT 3
51538: PUSH
51539: LD_INT 2
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 3
51548: PUSH
51549: LD_INT 3
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 2
51558: PUSH
51559: LD_INT 3
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: LIST
51570: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51571: LD_ADDR_VAR 0 20
51575: PUSH
51576: LD_INT 1
51578: PUSH
51579: LD_INT 3
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: LD_INT 3
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 1
51598: NEG
51599: PUSH
51600: LD_INT 2
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: LIST
51611: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51612: LD_ADDR_VAR 0 21
51616: PUSH
51617: LD_INT 2
51619: NEG
51620: PUSH
51621: LD_INT 1
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 3
51630: NEG
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 3
51641: NEG
51642: PUSH
51643: LD_INT 1
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: LIST
51655: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51656: LD_ADDR_VAR 0 22
51660: PUSH
51661: LD_INT 2
51663: NEG
51664: PUSH
51665: LD_INT 3
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 3
51675: NEG
51676: PUSH
51677: LD_INT 2
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 3
51687: NEG
51688: PUSH
51689: LD_INT 3
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: LIST
51701: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51702: LD_ADDR_VAR 0 23
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: LD_INT 3
51712: NEG
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 1
51720: NEG
51721: PUSH
51722: LD_INT 4
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 1
51732: PUSH
51733: LD_INT 3
51735: NEG
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: LIST
51745: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51746: LD_ADDR_VAR 0 24
51750: PUSH
51751: LD_INT 3
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 3
51763: PUSH
51764: LD_INT 1
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 4
51774: PUSH
51775: LD_INT 1
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: LIST
51786: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51787: LD_ADDR_VAR 0 25
51791: PUSH
51792: LD_INT 3
51794: PUSH
51795: LD_INT 3
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 4
51804: PUSH
51805: LD_INT 3
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 3
51814: PUSH
51815: LD_INT 4
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: LIST
51826: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51827: LD_ADDR_VAR 0 26
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: LD_INT 3
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 1
51844: PUSH
51845: LD_INT 4
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 1
51854: NEG
51855: PUSH
51856: LD_INT 3
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: LIST
51867: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51868: LD_ADDR_VAR 0 27
51872: PUSH
51873: LD_INT 3
51875: NEG
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 3
51886: NEG
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 4
51897: NEG
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: LIST
51911: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51912: LD_ADDR_VAR 0 28
51916: PUSH
51917: LD_INT 3
51919: NEG
51920: PUSH
51921: LD_INT 3
51923: NEG
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 3
51931: NEG
51932: PUSH
51933: LD_INT 4
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 4
51943: NEG
51944: PUSH
51945: LD_INT 3
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: LIST
51957: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51958: LD_ADDR_VAR 0 29
51962: PUSH
51963: LD_INT 1
51965: NEG
51966: PUSH
51967: LD_INT 3
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: LD_INT 3
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: PUSH
51989: LD_INT 2
51991: NEG
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 1
51999: NEG
52000: PUSH
52001: LD_INT 4
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 0
52011: PUSH
52012: LD_INT 4
52014: NEG
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 1
52022: PUSH
52023: LD_INT 3
52025: NEG
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 1
52033: NEG
52034: PUSH
52035: LD_INT 5
52037: NEG
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: LD_INT 5
52048: NEG
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: LD_INT 4
52059: NEG
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: NEG
52068: PUSH
52069: LD_INT 6
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: LD_INT 6
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 1
52090: PUSH
52091: LD_INT 5
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52113: LD_ADDR_VAR 0 30
52117: PUSH
52118: LD_INT 2
52120: PUSH
52121: LD_INT 1
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 3
52131: PUSH
52132: LD_INT 0
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 3
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 3
52151: PUSH
52152: LD_INT 1
52154: NEG
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 4
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 4
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 4
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 5
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 5
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 5
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 6
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 6
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52256: LD_ADDR_VAR 0 31
52260: PUSH
52261: LD_INT 3
52263: PUSH
52264: LD_INT 2
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 3
52273: PUSH
52274: LD_INT 3
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 2
52283: PUSH
52284: LD_INT 3
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 4
52293: PUSH
52294: LD_INT 3
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 4
52303: PUSH
52304: LD_INT 4
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 3
52313: PUSH
52314: LD_INT 4
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 5
52323: PUSH
52324: LD_INT 4
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 5
52333: PUSH
52334: LD_INT 5
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 4
52343: PUSH
52344: LD_INT 5
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 6
52353: PUSH
52354: LD_INT 5
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 6
52363: PUSH
52364: LD_INT 6
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 5
52373: PUSH
52374: LD_INT 6
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52395: LD_ADDR_VAR 0 32
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: LD_INT 3
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 0
52412: PUSH
52413: LD_INT 3
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 1
52422: NEG
52423: PUSH
52424: LD_INT 2
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 1
52433: PUSH
52434: LD_INT 4
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 0
52443: PUSH
52444: LD_INT 4
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 1
52453: NEG
52454: PUSH
52455: LD_INT 3
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: LD_INT 5
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 0
52474: PUSH
52475: LD_INT 5
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: LD_INT 4
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 1
52495: PUSH
52496: LD_INT 6
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: LD_INT 6
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: LD_INT 5
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52538: LD_ADDR_VAR 0 33
52542: PUSH
52543: LD_INT 2
52545: NEG
52546: PUSH
52547: LD_INT 1
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 3
52556: NEG
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 3
52567: NEG
52568: PUSH
52569: LD_INT 1
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 3
52579: NEG
52580: PUSH
52581: LD_INT 1
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 4
52590: NEG
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 4
52601: NEG
52602: PUSH
52603: LD_INT 1
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 4
52613: NEG
52614: PUSH
52615: LD_INT 1
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 5
52624: NEG
52625: PUSH
52626: LD_INT 0
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 5
52635: NEG
52636: PUSH
52637: LD_INT 1
52639: NEG
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 5
52647: NEG
52648: PUSH
52649: LD_INT 1
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 6
52658: NEG
52659: PUSH
52660: LD_INT 0
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 6
52669: NEG
52670: PUSH
52671: LD_INT 1
52673: NEG
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52693: LD_ADDR_VAR 0 34
52697: PUSH
52698: LD_INT 2
52700: NEG
52701: PUSH
52702: LD_INT 3
52704: NEG
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 3
52712: NEG
52713: PUSH
52714: LD_INT 2
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 3
52724: NEG
52725: PUSH
52726: LD_INT 3
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 3
52736: NEG
52737: PUSH
52738: LD_INT 4
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 4
52748: NEG
52749: PUSH
52750: LD_INT 3
52752: NEG
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 4
52760: NEG
52761: PUSH
52762: LD_INT 4
52764: NEG
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 4
52772: NEG
52773: PUSH
52774: LD_INT 5
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 5
52784: NEG
52785: PUSH
52786: LD_INT 4
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 5
52796: NEG
52797: PUSH
52798: LD_INT 5
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 5
52808: NEG
52809: PUSH
52810: LD_INT 6
52812: NEG
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 6
52820: NEG
52821: PUSH
52822: LD_INT 5
52824: NEG
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 6
52832: NEG
52833: PUSH
52834: LD_INT 6
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52856: LD_ADDR_VAR 0 41
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: LD_INT 2
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: LD_INT 3
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 1
52886: PUSH
52887: LD_INT 2
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: LIST
52899: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52900: LD_ADDR_VAR 0 42
52904: PUSH
52905: LD_INT 2
52907: PUSH
52908: LD_INT 0
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 2
52917: PUSH
52918: LD_INT 1
52920: NEG
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 3
52928: PUSH
52929: LD_INT 1
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: LIST
52940: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52941: LD_ADDR_VAR 0 43
52945: PUSH
52946: LD_INT 2
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 3
52958: PUSH
52959: LD_INT 2
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 2
52968: PUSH
52969: LD_INT 3
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: LIST
52980: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52981: LD_ADDR_VAR 0 44
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: LD_INT 2
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: PUSH
52999: LD_INT 3
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 1
53008: NEG
53009: PUSH
53010: LD_INT 2
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: LIST
53021: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53022: LD_ADDR_VAR 0 45
53026: PUSH
53027: LD_INT 2
53029: NEG
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 2
53040: NEG
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 3
53051: NEG
53052: PUSH
53053: LD_INT 1
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: LIST
53065: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53066: LD_ADDR_VAR 0 46
53070: PUSH
53071: LD_INT 2
53073: NEG
53074: PUSH
53075: LD_INT 2
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 2
53085: NEG
53086: PUSH
53087: LD_INT 3
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 3
53097: NEG
53098: PUSH
53099: LD_INT 2
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: LIST
53111: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53112: LD_ADDR_VAR 0 47
53116: PUSH
53117: LD_INT 2
53119: NEG
53120: PUSH
53121: LD_INT 3
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: NEG
53132: PUSH
53133: LD_INT 3
53135: NEG
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53145: LD_ADDR_VAR 0 48
53149: PUSH
53150: LD_INT 1
53152: PUSH
53153: LD_INT 2
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 2
53163: PUSH
53164: LD_INT 1
53166: NEG
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53176: LD_ADDR_VAR 0 49
53180: PUSH
53181: LD_INT 3
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 3
53193: PUSH
53194: LD_INT 2
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53205: LD_ADDR_VAR 0 50
53209: PUSH
53210: LD_INT 2
53212: PUSH
53213: LD_INT 3
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 1
53222: PUSH
53223: LD_INT 3
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53234: LD_ADDR_VAR 0 51
53238: PUSH
53239: LD_INT 1
53241: NEG
53242: PUSH
53243: LD_INT 2
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 2
53252: NEG
53253: PUSH
53254: LD_INT 1
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53265: LD_ADDR_VAR 0 52
53269: PUSH
53270: LD_INT 3
53272: NEG
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 3
53284: NEG
53285: PUSH
53286: LD_INT 2
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53298: LD_ADDR_VAR 0 53
53302: PUSH
53303: LD_INT 1
53305: NEG
53306: PUSH
53307: LD_INT 3
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: LD_INT 3
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: LD_INT 2
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: LIST
53341: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53342: LD_ADDR_VAR 0 54
53346: PUSH
53347: LD_INT 2
53349: PUSH
53350: LD_INT 1
53352: NEG
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 3
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 3
53370: PUSH
53371: LD_INT 1
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: LIST
53382: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53383: LD_ADDR_VAR 0 55
53387: PUSH
53388: LD_INT 3
53390: PUSH
53391: LD_INT 2
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 3
53400: PUSH
53401: LD_INT 3
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 2
53410: PUSH
53411: LD_INT 3
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: LIST
53422: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53423: LD_ADDR_VAR 0 56
53427: PUSH
53428: LD_INT 1
53430: PUSH
53431: LD_INT 3
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 0
53440: PUSH
53441: LD_INT 3
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 1
53450: NEG
53451: PUSH
53452: LD_INT 2
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: LIST
53463: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53464: LD_ADDR_VAR 0 57
53468: PUSH
53469: LD_INT 2
53471: NEG
53472: PUSH
53473: LD_INT 1
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 3
53482: NEG
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 3
53493: NEG
53494: PUSH
53495: LD_INT 1
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: LIST
53507: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53508: LD_ADDR_VAR 0 58
53512: PUSH
53513: LD_INT 2
53515: NEG
53516: PUSH
53517: LD_INT 3
53519: NEG
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 3
53527: NEG
53528: PUSH
53529: LD_INT 2
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 3
53539: NEG
53540: PUSH
53541: LD_INT 3
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: LIST
53553: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53554: LD_ADDR_VAR 0 59
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: LD_INT 2
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: LD_INT 2
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: LD_INT 1
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: LIST
53597: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53598: LD_ADDR_VAR 0 60
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 2
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 2
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: LIST
53638: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53639: LD_ADDR_VAR 0 61
53643: PUSH
53644: LD_INT 2
53646: PUSH
53647: LD_INT 1
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 2
53656: PUSH
53657: LD_INT 2
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: LD_INT 2
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: LIST
53678: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53679: LD_ADDR_VAR 0 62
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: LD_INT 2
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: LD_INT 2
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 1
53706: NEG
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: LIST
53719: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53720: LD_ADDR_VAR 0 63
53724: PUSH
53725: LD_INT 1
53727: NEG
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 2
53738: NEG
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 2
53749: NEG
53750: PUSH
53751: LD_INT 1
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: LIST
53763: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53764: LD_ADDR_VAR 0 64
53768: PUSH
53769: LD_INT 1
53771: NEG
53772: PUSH
53773: LD_INT 2
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 2
53783: NEG
53784: PUSH
53785: LD_INT 1
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 2
53795: NEG
53796: PUSH
53797: LD_INT 2
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: LIST
53809: ST_TO_ADDR
// end ; 2 :
53810: GO 57076
53812: LD_INT 2
53814: DOUBLE
53815: EQUAL
53816: IFTRUE 53820
53818: GO 57075
53820: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53821: LD_ADDR_VAR 0 29
53825: PUSH
53826: LD_INT 4
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 4
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 5
53849: PUSH
53850: LD_INT 0
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 5
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 4
53869: PUSH
53870: LD_INT 1
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 3
53879: PUSH
53880: LD_INT 0
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 3
53889: PUSH
53890: LD_INT 1
53892: NEG
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 3
53900: PUSH
53901: LD_INT 2
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 5
53911: PUSH
53912: LD_INT 2
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 3
53921: PUSH
53922: LD_INT 3
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 3
53931: PUSH
53932: LD_INT 2
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 4
53941: PUSH
53942: LD_INT 3
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 4
53951: PUSH
53952: LD_INT 4
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 3
53961: PUSH
53962: LD_INT 4
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 2
53971: PUSH
53972: LD_INT 3
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 2
53981: PUSH
53982: LD_INT 2
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 4
53991: PUSH
53992: LD_INT 2
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 2
54001: PUSH
54002: LD_INT 4
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 0
54011: PUSH
54012: LD_INT 4
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: LD_INT 3
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 1
54031: PUSH
54032: LD_INT 4
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 1
54041: PUSH
54042: LD_INT 5
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: LD_INT 5
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: LD_INT 4
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 1
54072: NEG
54073: PUSH
54074: LD_INT 3
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 2
54083: PUSH
54084: LD_INT 5
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 2
54093: NEG
54094: PUSH
54095: LD_INT 3
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 3
54104: NEG
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 3
54115: NEG
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 2
54127: NEG
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 2
54138: NEG
54139: PUSH
54140: LD_INT 1
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 3
54149: NEG
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 4
54160: NEG
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 4
54171: NEG
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 4
54183: NEG
54184: PUSH
54185: LD_INT 2
54187: NEG
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 2
54195: NEG
54196: PUSH
54197: LD_INT 2
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 4
54206: NEG
54207: PUSH
54208: LD_INT 4
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 4
54218: NEG
54219: PUSH
54220: LD_INT 5
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 3
54230: NEG
54231: PUSH
54232: LD_INT 4
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 3
54242: NEG
54243: PUSH
54244: LD_INT 3
54246: NEG
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 4
54254: NEG
54255: PUSH
54256: LD_INT 3
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 5
54266: NEG
54267: PUSH
54268: LD_INT 4
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 5
54278: NEG
54279: PUSH
54280: LD_INT 5
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 3
54290: NEG
54291: PUSH
54292: LD_INT 5
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 5
54302: NEG
54303: PUSH
54304: LD_INT 3
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54359: LD_ADDR_VAR 0 30
54363: PUSH
54364: LD_INT 4
54366: PUSH
54367: LD_INT 4
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 4
54376: PUSH
54377: LD_INT 3
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 5
54386: PUSH
54387: LD_INT 4
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 5
54396: PUSH
54397: LD_INT 5
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 4
54406: PUSH
54407: LD_INT 5
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 3
54416: PUSH
54417: LD_INT 4
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 3
54426: PUSH
54427: LD_INT 3
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 5
54436: PUSH
54437: LD_INT 3
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 3
54446: PUSH
54447: LD_INT 5
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: LD_INT 3
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: LD_INT 2
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: PUSH
54477: LD_INT 3
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 1
54486: PUSH
54487: LD_INT 4
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: LD_INT 4
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: LD_INT 3
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 1
54517: NEG
54518: PUSH
54519: LD_INT 2
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: LD_INT 4
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 2
54538: NEG
54539: PUSH
54540: LD_INT 2
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 4
54549: NEG
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 4
54560: NEG
54561: PUSH
54562: LD_INT 1
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 3
54572: NEG
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 3
54583: NEG
54584: PUSH
54585: LD_INT 1
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 4
54594: NEG
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 5
54605: NEG
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 5
54616: NEG
54617: PUSH
54618: LD_INT 1
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 5
54628: NEG
54629: PUSH
54630: LD_INT 2
54632: NEG
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 3
54640: NEG
54641: PUSH
54642: LD_INT 2
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 3
54651: NEG
54652: PUSH
54653: LD_INT 3
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 3
54663: NEG
54664: PUSH
54665: LD_INT 4
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 2
54675: NEG
54676: PUSH
54677: LD_INT 3
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 2
54687: NEG
54688: PUSH
54689: LD_INT 2
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 3
54699: NEG
54700: PUSH
54701: LD_INT 2
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 4
54711: NEG
54712: PUSH
54713: LD_INT 3
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 4
54723: NEG
54724: PUSH
54725: LD_INT 4
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 2
54735: NEG
54736: PUSH
54737: LD_INT 4
54739: NEG
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 4
54747: NEG
54748: PUSH
54749: LD_INT 2
54751: NEG
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: LD_INT 4
54762: NEG
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 0
54770: PUSH
54771: LD_INT 5
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: LD_INT 4
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 1
54792: PUSH
54793: LD_INT 3
54795: NEG
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: LD_INT 3
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: LD_INT 4
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 1
54826: NEG
54827: PUSH
54828: LD_INT 5
54830: NEG
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 2
54838: PUSH
54839: LD_INT 3
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 2
54849: NEG
54850: PUSH
54851: LD_INT 5
54853: NEG
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54906: LD_ADDR_VAR 0 31
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: LD_INT 4
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: LD_INT 3
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 1
54933: PUSH
54934: LD_INT 4
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 1
54943: PUSH
54944: LD_INT 5
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 0
54953: PUSH
54954: LD_INT 5
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: LD_INT 4
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 1
54974: NEG
54975: PUSH
54976: LD_INT 3
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 2
54985: PUSH
54986: LD_INT 5
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 2
54995: NEG
54996: PUSH
54997: LD_INT 3
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 3
55006: NEG
55007: PUSH
55008: LD_INT 0
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 3
55017: NEG
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 2
55029: NEG
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 2
55040: NEG
55041: PUSH
55042: LD_INT 1
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 3
55051: NEG
55052: PUSH
55053: LD_INT 1
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 4
55062: NEG
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 4
55073: NEG
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 4
55085: NEG
55086: PUSH
55087: LD_INT 2
55089: NEG
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 2
55097: NEG
55098: PUSH
55099: LD_INT 2
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 4
55108: NEG
55109: PUSH
55110: LD_INT 4
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 4
55120: NEG
55121: PUSH
55122: LD_INT 5
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 3
55132: NEG
55133: PUSH
55134: LD_INT 4
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 3
55144: NEG
55145: PUSH
55146: LD_INT 3
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 4
55156: NEG
55157: PUSH
55158: LD_INT 3
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 5
55168: NEG
55169: PUSH
55170: LD_INT 4
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 5
55180: NEG
55181: PUSH
55182: LD_INT 5
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 3
55192: NEG
55193: PUSH
55194: LD_INT 5
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 5
55204: NEG
55205: PUSH
55206: LD_INT 3
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: LD_INT 3
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: LD_INT 4
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 1
55238: PUSH
55239: LD_INT 3
55241: NEG
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: LD_INT 2
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: LD_INT 2
55263: NEG
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 1
55271: NEG
55272: PUSH
55273: LD_INT 3
55275: NEG
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 1
55283: NEG
55284: PUSH
55285: LD_INT 4
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 2
55295: PUSH
55296: LD_INT 2
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 2
55306: NEG
55307: PUSH
55308: LD_INT 4
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 4
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 4
55328: PUSH
55329: LD_INT 1
55331: NEG
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 5
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 5
55349: PUSH
55350: LD_INT 1
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 4
55359: PUSH
55360: LD_INT 1
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 3
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 3
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 3
55390: PUSH
55391: LD_INT 2
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 5
55401: PUSH
55402: LD_INT 2
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55456: LD_ADDR_VAR 0 32
55460: PUSH
55461: LD_INT 4
55463: NEG
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 4
55474: NEG
55475: PUSH
55476: LD_INT 1
55478: NEG
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 3
55486: NEG
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 3
55497: NEG
55498: PUSH
55499: LD_INT 1
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 4
55508: NEG
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 5
55519: NEG
55520: PUSH
55521: LD_INT 0
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 5
55530: NEG
55531: PUSH
55532: LD_INT 1
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 5
55542: NEG
55543: PUSH
55544: LD_INT 2
55546: NEG
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 3
55554: NEG
55555: PUSH
55556: LD_INT 2
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 3
55565: NEG
55566: PUSH
55567: LD_INT 3
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 3
55577: NEG
55578: PUSH
55579: LD_INT 4
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 2
55589: NEG
55590: PUSH
55591: LD_INT 3
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 2
55601: NEG
55602: PUSH
55603: LD_INT 2
55605: NEG
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 3
55613: NEG
55614: PUSH
55615: LD_INT 2
55617: NEG
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 4
55625: NEG
55626: PUSH
55627: LD_INT 3
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 4
55637: NEG
55638: PUSH
55639: LD_INT 4
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 2
55649: NEG
55650: PUSH
55651: LD_INT 4
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 4
55661: NEG
55662: PUSH
55663: LD_INT 2
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 0
55673: PUSH
55674: LD_INT 4
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: LD_INT 5
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: LD_INT 4
55698: NEG
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 1
55706: PUSH
55707: LD_INT 3
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: LD_INT 3
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: NEG
55729: PUSH
55730: LD_INT 4
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 1
55740: NEG
55741: PUSH
55742: LD_INT 5
55744: NEG
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 2
55752: PUSH
55753: LD_INT 3
55755: NEG
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 2
55763: NEG
55764: PUSH
55765: LD_INT 5
55767: NEG
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 3
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 3
55785: PUSH
55786: LD_INT 1
55788: NEG
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 4
55796: PUSH
55797: LD_INT 0
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 4
55806: PUSH
55807: LD_INT 1
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 3
55816: PUSH
55817: LD_INT 1
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 2
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 2
55836: PUSH
55837: LD_INT 1
55839: NEG
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 2
55847: PUSH
55848: LD_INT 2
55850: NEG
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 4
55858: PUSH
55859: LD_INT 2
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 4
55868: PUSH
55869: LD_INT 4
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 4
55878: PUSH
55879: LD_INT 3
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 5
55888: PUSH
55889: LD_INT 4
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 5
55898: PUSH
55899: LD_INT 5
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 4
55908: PUSH
55909: LD_INT 5
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 3
55918: PUSH
55919: LD_INT 4
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 3
55928: PUSH
55929: LD_INT 3
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 5
55938: PUSH
55939: LD_INT 3
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 3
55948: PUSH
55949: LD_INT 5
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56003: LD_ADDR_VAR 0 33
56007: PUSH
56008: LD_INT 4
56010: NEG
56011: PUSH
56012: LD_INT 4
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 4
56022: NEG
56023: PUSH
56024: LD_INT 5
56026: NEG
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 3
56034: NEG
56035: PUSH
56036: LD_INT 4
56038: NEG
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 3
56046: NEG
56047: PUSH
56048: LD_INT 3
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 4
56058: NEG
56059: PUSH
56060: LD_INT 3
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 5
56070: NEG
56071: PUSH
56072: LD_INT 4
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 5
56082: NEG
56083: PUSH
56084: LD_INT 5
56086: NEG
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 3
56094: NEG
56095: PUSH
56096: LD_INT 5
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 5
56106: NEG
56107: PUSH
56108: LD_INT 3
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: LD_INT 3
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: LD_INT 4
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 1
56140: PUSH
56141: LD_INT 3
56143: NEG
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 1
56151: PUSH
56152: LD_INT 2
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: LD_INT 2
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 1
56173: NEG
56174: PUSH
56175: LD_INT 3
56177: NEG
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: LD_INT 4
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 2
56197: PUSH
56198: LD_INT 2
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 2
56208: NEG
56209: PUSH
56210: LD_INT 4
56212: NEG
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 4
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 4
56230: PUSH
56231: LD_INT 1
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 5
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 5
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 4
56261: PUSH
56262: LD_INT 1
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 3
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 3
56281: PUSH
56282: LD_INT 1
56284: NEG
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 3
56292: PUSH
56293: LD_INT 2
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 5
56303: PUSH
56304: LD_INT 2
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 3
56313: PUSH
56314: LD_INT 3
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 3
56323: PUSH
56324: LD_INT 2
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 4
56333: PUSH
56334: LD_INT 3
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 4
56343: PUSH
56344: LD_INT 4
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 3
56353: PUSH
56354: LD_INT 4
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 2
56363: PUSH
56364: LD_INT 3
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 2
56373: PUSH
56374: LD_INT 2
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 4
56383: PUSH
56384: LD_INT 2
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 2
56393: PUSH
56394: LD_INT 4
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: LD_INT 4
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: LD_INT 3
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 1
56423: PUSH
56424: LD_INT 4
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 1
56433: PUSH
56434: LD_INT 5
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: LD_INT 5
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: LD_INT 4
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: LD_INT 3
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 2
56475: PUSH
56476: LD_INT 5
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 2
56485: NEG
56486: PUSH
56487: LD_INT 3
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56541: LD_ADDR_VAR 0 34
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: LD_INT 4
56551: NEG
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: LD_INT 5
56562: NEG
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: LD_INT 4
56573: NEG
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 1
56581: PUSH
56582: LD_INT 3
56584: NEG
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: LD_INT 3
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 1
56603: NEG
56604: PUSH
56605: LD_INT 4
56607: NEG
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 1
56615: NEG
56616: PUSH
56617: LD_INT 5
56619: NEG
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 2
56627: PUSH
56628: LD_INT 3
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 2
56638: NEG
56639: PUSH
56640: LD_INT 5
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 3
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 3
56660: PUSH
56661: LD_INT 1
56663: NEG
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 4
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 4
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 3
56691: PUSH
56692: LD_INT 1
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 2
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 2
56711: PUSH
56712: LD_INT 1
56714: NEG
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 2
56722: PUSH
56723: LD_INT 2
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 4
56733: PUSH
56734: LD_INT 2
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 4
56743: PUSH
56744: LD_INT 4
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 4
56753: PUSH
56754: LD_INT 3
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 5
56763: PUSH
56764: LD_INT 4
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 5
56773: PUSH
56774: LD_INT 5
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 4
56783: PUSH
56784: LD_INT 5
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 3
56793: PUSH
56794: LD_INT 4
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 3
56803: PUSH
56804: LD_INT 3
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 5
56813: PUSH
56814: LD_INT 3
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 3
56823: PUSH
56824: LD_INT 5
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: LD_INT 3
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: LD_INT 2
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: LD_INT 3
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: LD_INT 4
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: LD_INT 4
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: LD_INT 3
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: NEG
56895: PUSH
56896: LD_INT 2
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 2
56905: PUSH
56906: LD_INT 4
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 2
56915: NEG
56916: PUSH
56917: LD_INT 2
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 4
56926: NEG
56927: PUSH
56928: LD_INT 0
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 4
56937: NEG
56938: PUSH
56939: LD_INT 1
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 3
56949: NEG
56950: PUSH
56951: LD_INT 0
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 3
56960: NEG
56961: PUSH
56962: LD_INT 1
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 4
56971: NEG
56972: PUSH
56973: LD_INT 1
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 5
56982: NEG
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 5
56993: NEG
56994: PUSH
56995: LD_INT 1
56997: NEG
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 5
57005: NEG
57006: PUSH
57007: LD_INT 2
57009: NEG
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 3
57017: NEG
57018: PUSH
57019: LD_INT 2
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: ST_TO_ADDR
// end ; end ;
57073: GO 57076
57075: POP
// case btype of b_depot , b_warehouse :
57076: LD_VAR 0 1
57080: PUSH
57081: LD_INT 0
57083: DOUBLE
57084: EQUAL
57085: IFTRUE 57095
57087: LD_INT 1
57089: DOUBLE
57090: EQUAL
57091: IFTRUE 57095
57093: GO 57296
57095: POP
// case nation of nation_american :
57096: LD_VAR 0 5
57100: PUSH
57101: LD_INT 1
57103: DOUBLE
57104: EQUAL
57105: IFTRUE 57109
57107: GO 57165
57109: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57110: LD_ADDR_VAR 0 9
57114: PUSH
57115: LD_VAR 0 11
57119: PUSH
57120: LD_VAR 0 12
57124: PUSH
57125: LD_VAR 0 13
57129: PUSH
57130: LD_VAR 0 14
57134: PUSH
57135: LD_VAR 0 15
57139: PUSH
57140: LD_VAR 0 16
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: PUSH
57153: LD_VAR 0 4
57157: PUSH
57158: LD_INT 1
57160: PLUS
57161: ARRAY
57162: ST_TO_ADDR
57163: GO 57294
57165: LD_INT 2
57167: DOUBLE
57168: EQUAL
57169: IFTRUE 57173
57171: GO 57229
57173: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57174: LD_ADDR_VAR 0 9
57178: PUSH
57179: LD_VAR 0 17
57183: PUSH
57184: LD_VAR 0 18
57188: PUSH
57189: LD_VAR 0 19
57193: PUSH
57194: LD_VAR 0 20
57198: PUSH
57199: LD_VAR 0 21
57203: PUSH
57204: LD_VAR 0 22
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: PUSH
57217: LD_VAR 0 4
57221: PUSH
57222: LD_INT 1
57224: PLUS
57225: ARRAY
57226: ST_TO_ADDR
57227: GO 57294
57229: LD_INT 3
57231: DOUBLE
57232: EQUAL
57233: IFTRUE 57237
57235: GO 57293
57237: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57238: LD_ADDR_VAR 0 9
57242: PUSH
57243: LD_VAR 0 23
57247: PUSH
57248: LD_VAR 0 24
57252: PUSH
57253: LD_VAR 0 25
57257: PUSH
57258: LD_VAR 0 26
57262: PUSH
57263: LD_VAR 0 27
57267: PUSH
57268: LD_VAR 0 28
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: PUSH
57281: LD_VAR 0 4
57285: PUSH
57286: LD_INT 1
57288: PLUS
57289: ARRAY
57290: ST_TO_ADDR
57291: GO 57294
57293: POP
57294: GO 57849
57296: LD_INT 2
57298: DOUBLE
57299: EQUAL
57300: IFTRUE 57310
57302: LD_INT 3
57304: DOUBLE
57305: EQUAL
57306: IFTRUE 57310
57308: GO 57366
57310: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57311: LD_ADDR_VAR 0 9
57315: PUSH
57316: LD_VAR 0 29
57320: PUSH
57321: LD_VAR 0 30
57325: PUSH
57326: LD_VAR 0 31
57330: PUSH
57331: LD_VAR 0 32
57335: PUSH
57336: LD_VAR 0 33
57340: PUSH
57341: LD_VAR 0 34
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: PUSH
57354: LD_VAR 0 4
57358: PUSH
57359: LD_INT 1
57361: PLUS
57362: ARRAY
57363: ST_TO_ADDR
57364: GO 57849
57366: LD_INT 16
57368: DOUBLE
57369: EQUAL
57370: IFTRUE 57428
57372: LD_INT 17
57374: DOUBLE
57375: EQUAL
57376: IFTRUE 57428
57378: LD_INT 18
57380: DOUBLE
57381: EQUAL
57382: IFTRUE 57428
57384: LD_INT 19
57386: DOUBLE
57387: EQUAL
57388: IFTRUE 57428
57390: LD_INT 22
57392: DOUBLE
57393: EQUAL
57394: IFTRUE 57428
57396: LD_INT 20
57398: DOUBLE
57399: EQUAL
57400: IFTRUE 57428
57402: LD_INT 21
57404: DOUBLE
57405: EQUAL
57406: IFTRUE 57428
57408: LD_INT 23
57410: DOUBLE
57411: EQUAL
57412: IFTRUE 57428
57414: LD_INT 24
57416: DOUBLE
57417: EQUAL
57418: IFTRUE 57428
57420: LD_INT 25
57422: DOUBLE
57423: EQUAL
57424: IFTRUE 57428
57426: GO 57484
57428: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57429: LD_ADDR_VAR 0 9
57433: PUSH
57434: LD_VAR 0 35
57438: PUSH
57439: LD_VAR 0 36
57443: PUSH
57444: LD_VAR 0 37
57448: PUSH
57449: LD_VAR 0 38
57453: PUSH
57454: LD_VAR 0 39
57458: PUSH
57459: LD_VAR 0 40
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: PUSH
57472: LD_VAR 0 4
57476: PUSH
57477: LD_INT 1
57479: PLUS
57480: ARRAY
57481: ST_TO_ADDR
57482: GO 57849
57484: LD_INT 6
57486: DOUBLE
57487: EQUAL
57488: IFTRUE 57540
57490: LD_INT 7
57492: DOUBLE
57493: EQUAL
57494: IFTRUE 57540
57496: LD_INT 8
57498: DOUBLE
57499: EQUAL
57500: IFTRUE 57540
57502: LD_INT 13
57504: DOUBLE
57505: EQUAL
57506: IFTRUE 57540
57508: LD_INT 12
57510: DOUBLE
57511: EQUAL
57512: IFTRUE 57540
57514: LD_INT 15
57516: DOUBLE
57517: EQUAL
57518: IFTRUE 57540
57520: LD_INT 11
57522: DOUBLE
57523: EQUAL
57524: IFTRUE 57540
57526: LD_INT 14
57528: DOUBLE
57529: EQUAL
57530: IFTRUE 57540
57532: LD_INT 10
57534: DOUBLE
57535: EQUAL
57536: IFTRUE 57540
57538: GO 57596
57540: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57541: LD_ADDR_VAR 0 9
57545: PUSH
57546: LD_VAR 0 41
57550: PUSH
57551: LD_VAR 0 42
57555: PUSH
57556: LD_VAR 0 43
57560: PUSH
57561: LD_VAR 0 44
57565: PUSH
57566: LD_VAR 0 45
57570: PUSH
57571: LD_VAR 0 46
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: PUSH
57584: LD_VAR 0 4
57588: PUSH
57589: LD_INT 1
57591: PLUS
57592: ARRAY
57593: ST_TO_ADDR
57594: GO 57849
57596: LD_INT 36
57598: DOUBLE
57599: EQUAL
57600: IFTRUE 57604
57602: GO 57660
57604: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57605: LD_ADDR_VAR 0 9
57609: PUSH
57610: LD_VAR 0 47
57614: PUSH
57615: LD_VAR 0 48
57619: PUSH
57620: LD_VAR 0 49
57624: PUSH
57625: LD_VAR 0 50
57629: PUSH
57630: LD_VAR 0 51
57634: PUSH
57635: LD_VAR 0 52
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: PUSH
57648: LD_VAR 0 4
57652: PUSH
57653: LD_INT 1
57655: PLUS
57656: ARRAY
57657: ST_TO_ADDR
57658: GO 57849
57660: LD_INT 4
57662: DOUBLE
57663: EQUAL
57664: IFTRUE 57686
57666: LD_INT 5
57668: DOUBLE
57669: EQUAL
57670: IFTRUE 57686
57672: LD_INT 34
57674: DOUBLE
57675: EQUAL
57676: IFTRUE 57686
57678: LD_INT 37
57680: DOUBLE
57681: EQUAL
57682: IFTRUE 57686
57684: GO 57742
57686: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57687: LD_ADDR_VAR 0 9
57691: PUSH
57692: LD_VAR 0 53
57696: PUSH
57697: LD_VAR 0 54
57701: PUSH
57702: LD_VAR 0 55
57706: PUSH
57707: LD_VAR 0 56
57711: PUSH
57712: LD_VAR 0 57
57716: PUSH
57717: LD_VAR 0 58
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: PUSH
57730: LD_VAR 0 4
57734: PUSH
57735: LD_INT 1
57737: PLUS
57738: ARRAY
57739: ST_TO_ADDR
57740: GO 57849
57742: LD_INT 31
57744: DOUBLE
57745: EQUAL
57746: IFTRUE 57792
57748: LD_INT 32
57750: DOUBLE
57751: EQUAL
57752: IFTRUE 57792
57754: LD_INT 33
57756: DOUBLE
57757: EQUAL
57758: IFTRUE 57792
57760: LD_INT 27
57762: DOUBLE
57763: EQUAL
57764: IFTRUE 57792
57766: LD_INT 26
57768: DOUBLE
57769: EQUAL
57770: IFTRUE 57792
57772: LD_INT 28
57774: DOUBLE
57775: EQUAL
57776: IFTRUE 57792
57778: LD_INT 29
57780: DOUBLE
57781: EQUAL
57782: IFTRUE 57792
57784: LD_INT 30
57786: DOUBLE
57787: EQUAL
57788: IFTRUE 57792
57790: GO 57848
57792: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57793: LD_ADDR_VAR 0 9
57797: PUSH
57798: LD_VAR 0 59
57802: PUSH
57803: LD_VAR 0 60
57807: PUSH
57808: LD_VAR 0 61
57812: PUSH
57813: LD_VAR 0 62
57817: PUSH
57818: LD_VAR 0 63
57822: PUSH
57823: LD_VAR 0 64
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: PUSH
57836: LD_VAR 0 4
57840: PUSH
57841: LD_INT 1
57843: PLUS
57844: ARRAY
57845: ST_TO_ADDR
57846: GO 57849
57848: POP
// temp_list2 = [ ] ;
57849: LD_ADDR_VAR 0 10
57853: PUSH
57854: EMPTY
57855: ST_TO_ADDR
// for i in temp_list do
57856: LD_ADDR_VAR 0 8
57860: PUSH
57861: LD_VAR 0 9
57865: PUSH
57866: FOR_IN
57867: IFFALSE 57919
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57869: LD_ADDR_VAR 0 10
57873: PUSH
57874: LD_VAR 0 10
57878: PUSH
57879: LD_VAR 0 8
57883: PUSH
57884: LD_INT 1
57886: ARRAY
57887: PUSH
57888: LD_VAR 0 2
57892: PLUS
57893: PUSH
57894: LD_VAR 0 8
57898: PUSH
57899: LD_INT 2
57901: ARRAY
57902: PUSH
57903: LD_VAR 0 3
57907: PLUS
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: EMPTY
57914: LIST
57915: ADD
57916: ST_TO_ADDR
57917: GO 57866
57919: POP
57920: POP
// result = temp_list2 ;
57921: LD_ADDR_VAR 0 7
57925: PUSH
57926: LD_VAR 0 10
57930: ST_TO_ADDR
// end ;
57931: LD_VAR 0 7
57935: RET
// export function EnemyInRange ( unit , dist ) ; begin
57936: LD_INT 0
57938: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57939: LD_ADDR_VAR 0 3
57943: PUSH
57944: LD_VAR 0 1
57948: PPUSH
57949: CALL_OW 255
57953: PPUSH
57954: LD_VAR 0 1
57958: PPUSH
57959: CALL_OW 250
57963: PPUSH
57964: LD_VAR 0 1
57968: PPUSH
57969: CALL_OW 251
57973: PPUSH
57974: LD_VAR 0 2
57978: PPUSH
57979: CALL 31332 0 4
57983: PUSH
57984: LD_INT 4
57986: ARRAY
57987: ST_TO_ADDR
// end ;
57988: LD_VAR 0 3
57992: RET
// export function PlayerSeeMe ( unit ) ; begin
57993: LD_INT 0
57995: PPUSH
// result := See ( your_side , unit ) ;
57996: LD_ADDR_VAR 0 2
58000: PUSH
58001: LD_OWVAR 2
58005: PPUSH
58006: LD_VAR 0 1
58010: PPUSH
58011: CALL_OW 292
58015: ST_TO_ADDR
// end ;
58016: LD_VAR 0 2
58020: RET
// export function ReverseDir ( unit ) ; begin
58021: LD_INT 0
58023: PPUSH
// if not unit then
58024: LD_VAR 0 1
58028: NOT
58029: IFFALSE 58033
// exit ;
58031: GO 58056
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58033: LD_ADDR_VAR 0 2
58037: PUSH
58038: LD_VAR 0 1
58042: PPUSH
58043: CALL_OW 254
58047: PUSH
58048: LD_INT 3
58050: PLUS
58051: PUSH
58052: LD_INT 6
58054: MOD
58055: ST_TO_ADDR
// end ;
58056: LD_VAR 0 2
58060: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
58061: LD_INT 0
58063: PPUSH
58064: PPUSH
58065: PPUSH
58066: PPUSH
58067: PPUSH
// if not hexes then
58068: LD_VAR 0 2
58072: NOT
58073: IFFALSE 58077
// exit ;
58075: GO 58225
// dist := 9999 ;
58077: LD_ADDR_VAR 0 5
58081: PUSH
58082: LD_INT 9999
58084: ST_TO_ADDR
// for i = 1 to hexes do
58085: LD_ADDR_VAR 0 4
58089: PUSH
58090: DOUBLE
58091: LD_INT 1
58093: DEC
58094: ST_TO_ADDR
58095: LD_VAR 0 2
58099: PUSH
58100: FOR_TO
58101: IFFALSE 58213
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
58103: LD_VAR 0 1
58107: PPUSH
58108: LD_VAR 0 2
58112: PUSH
58113: LD_VAR 0 4
58117: ARRAY
58118: PUSH
58119: LD_INT 1
58121: ARRAY
58122: PPUSH
58123: LD_VAR 0 2
58127: PUSH
58128: LD_VAR 0 4
58132: ARRAY
58133: PUSH
58134: LD_INT 2
58136: ARRAY
58137: PPUSH
58138: CALL_OW 297
58142: PUSH
58143: LD_VAR 0 5
58147: LESS
58148: IFFALSE 58211
// begin hex := hexes [ i ] ;
58150: LD_ADDR_VAR 0 7
58154: PUSH
58155: LD_VAR 0 2
58159: PUSH
58160: LD_VAR 0 4
58164: ARRAY
58165: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58166: LD_ADDR_VAR 0 5
58170: PUSH
58171: LD_VAR 0 1
58175: PPUSH
58176: LD_VAR 0 2
58180: PUSH
58181: LD_VAR 0 4
58185: ARRAY
58186: PUSH
58187: LD_INT 1
58189: ARRAY
58190: PPUSH
58191: LD_VAR 0 2
58195: PUSH
58196: LD_VAR 0 4
58200: ARRAY
58201: PUSH
58202: LD_INT 2
58204: ARRAY
58205: PPUSH
58206: CALL_OW 297
58210: ST_TO_ADDR
// end ; end ;
58211: GO 58100
58213: POP
58214: POP
// result := hex ;
58215: LD_ADDR_VAR 0 3
58219: PUSH
58220: LD_VAR 0 7
58224: ST_TO_ADDR
// end ;
58225: LD_VAR 0 3
58229: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58230: LD_INT 0
58232: PPUSH
58233: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58234: LD_VAR 0 1
58238: NOT
58239: PUSH
58240: LD_VAR 0 1
58244: PUSH
58245: LD_INT 21
58247: PUSH
58248: LD_INT 2
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 23
58257: PUSH
58258: LD_INT 2
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PPUSH
58269: CALL_OW 69
58273: IN
58274: NOT
58275: OR
58276: IFFALSE 58280
// exit ;
58278: GO 58327
// for i = 1 to 3 do
58280: LD_ADDR_VAR 0 3
58284: PUSH
58285: DOUBLE
58286: LD_INT 1
58288: DEC
58289: ST_TO_ADDR
58290: LD_INT 3
58292: PUSH
58293: FOR_TO
58294: IFFALSE 58325
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58296: LD_VAR 0 1
58300: PPUSH
58301: CALL_OW 250
58305: PPUSH
58306: LD_VAR 0 1
58310: PPUSH
58311: CALL_OW 251
58315: PPUSH
58316: LD_INT 1
58318: PPUSH
58319: CALL_OW 453
58323: GO 58293
58325: POP
58326: POP
// end ;
58327: LD_VAR 0 2
58331: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58332: LD_INT 0
58334: PPUSH
58335: PPUSH
58336: PPUSH
58337: PPUSH
58338: PPUSH
58339: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58340: LD_VAR 0 1
58344: NOT
58345: PUSH
58346: LD_VAR 0 2
58350: NOT
58351: OR
58352: PUSH
58353: LD_VAR 0 1
58357: PPUSH
58358: CALL_OW 314
58362: OR
58363: IFFALSE 58367
// exit ;
58365: GO 58808
// x := GetX ( enemy_unit ) ;
58367: LD_ADDR_VAR 0 7
58371: PUSH
58372: LD_VAR 0 2
58376: PPUSH
58377: CALL_OW 250
58381: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58382: LD_ADDR_VAR 0 8
58386: PUSH
58387: LD_VAR 0 2
58391: PPUSH
58392: CALL_OW 251
58396: ST_TO_ADDR
// if not x or not y then
58397: LD_VAR 0 7
58401: NOT
58402: PUSH
58403: LD_VAR 0 8
58407: NOT
58408: OR
58409: IFFALSE 58413
// exit ;
58411: GO 58808
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58413: LD_ADDR_VAR 0 6
58417: PUSH
58418: LD_VAR 0 7
58422: PPUSH
58423: LD_INT 0
58425: PPUSH
58426: LD_INT 4
58428: PPUSH
58429: CALL_OW 272
58433: PUSH
58434: LD_VAR 0 8
58438: PPUSH
58439: LD_INT 0
58441: PPUSH
58442: LD_INT 4
58444: PPUSH
58445: CALL_OW 273
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_VAR 0 7
58458: PPUSH
58459: LD_INT 1
58461: PPUSH
58462: LD_INT 4
58464: PPUSH
58465: CALL_OW 272
58469: PUSH
58470: LD_VAR 0 8
58474: PPUSH
58475: LD_INT 1
58477: PPUSH
58478: LD_INT 4
58480: PPUSH
58481: CALL_OW 273
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_VAR 0 7
58494: PPUSH
58495: LD_INT 2
58497: PPUSH
58498: LD_INT 4
58500: PPUSH
58501: CALL_OW 272
58505: PUSH
58506: LD_VAR 0 8
58510: PPUSH
58511: LD_INT 2
58513: PPUSH
58514: LD_INT 4
58516: PPUSH
58517: CALL_OW 273
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_VAR 0 7
58530: PPUSH
58531: LD_INT 3
58533: PPUSH
58534: LD_INT 4
58536: PPUSH
58537: CALL_OW 272
58541: PUSH
58542: LD_VAR 0 8
58546: PPUSH
58547: LD_INT 3
58549: PPUSH
58550: LD_INT 4
58552: PPUSH
58553: CALL_OW 273
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_VAR 0 7
58566: PPUSH
58567: LD_INT 4
58569: PPUSH
58570: LD_INT 4
58572: PPUSH
58573: CALL_OW 272
58577: PUSH
58578: LD_VAR 0 8
58582: PPUSH
58583: LD_INT 4
58585: PPUSH
58586: LD_INT 4
58588: PPUSH
58589: CALL_OW 273
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_VAR 0 7
58602: PPUSH
58603: LD_INT 5
58605: PPUSH
58606: LD_INT 4
58608: PPUSH
58609: CALL_OW 272
58613: PUSH
58614: LD_VAR 0 8
58618: PPUSH
58619: LD_INT 5
58621: PPUSH
58622: LD_INT 4
58624: PPUSH
58625: CALL_OW 273
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: ST_TO_ADDR
// for i = tmp downto 1 do
58642: LD_ADDR_VAR 0 4
58646: PUSH
58647: DOUBLE
58648: LD_VAR 0 6
58652: INC
58653: ST_TO_ADDR
58654: LD_INT 1
58656: PUSH
58657: FOR_DOWNTO
58658: IFFALSE 58759
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58660: LD_VAR 0 6
58664: PUSH
58665: LD_VAR 0 4
58669: ARRAY
58670: PUSH
58671: LD_INT 1
58673: ARRAY
58674: PPUSH
58675: LD_VAR 0 6
58679: PUSH
58680: LD_VAR 0 4
58684: ARRAY
58685: PUSH
58686: LD_INT 2
58688: ARRAY
58689: PPUSH
58690: CALL_OW 488
58694: NOT
58695: PUSH
58696: LD_VAR 0 6
58700: PUSH
58701: LD_VAR 0 4
58705: ARRAY
58706: PUSH
58707: LD_INT 1
58709: ARRAY
58710: PPUSH
58711: LD_VAR 0 6
58715: PUSH
58716: LD_VAR 0 4
58720: ARRAY
58721: PUSH
58722: LD_INT 2
58724: ARRAY
58725: PPUSH
58726: CALL_OW 428
58730: PUSH
58731: LD_INT 0
58733: NONEQUAL
58734: OR
58735: IFFALSE 58757
// tmp := Delete ( tmp , i ) ;
58737: LD_ADDR_VAR 0 6
58741: PUSH
58742: LD_VAR 0 6
58746: PPUSH
58747: LD_VAR 0 4
58751: PPUSH
58752: CALL_OW 3
58756: ST_TO_ADDR
58757: GO 58657
58759: POP
58760: POP
// j := GetClosestHex ( unit , tmp ) ;
58761: LD_ADDR_VAR 0 5
58765: PUSH
58766: LD_VAR 0 1
58770: PPUSH
58771: LD_VAR 0 6
58775: PPUSH
58776: CALL 58061 0 2
58780: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58781: LD_VAR 0 1
58785: PPUSH
58786: LD_VAR 0 5
58790: PUSH
58791: LD_INT 1
58793: ARRAY
58794: PPUSH
58795: LD_VAR 0 5
58799: PUSH
58800: LD_INT 2
58802: ARRAY
58803: PPUSH
58804: CALL_OW 111
// end ;
58808: LD_VAR 0 3
58812: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58813: LD_INT 0
58815: PPUSH
58816: PPUSH
58817: PPUSH
// uc_side = 0 ;
58818: LD_ADDR_OWVAR 20
58822: PUSH
58823: LD_INT 0
58825: ST_TO_ADDR
// uc_nation = 0 ;
58826: LD_ADDR_OWVAR 21
58830: PUSH
58831: LD_INT 0
58833: ST_TO_ADDR
// InitHc_All ( ) ;
58834: CALL_OW 584
// InitVc ;
58838: CALL_OW 20
// if mastodonts then
58842: LD_VAR 0 6
58846: IFFALSE 58913
// for i = 1 to mastodonts do
58848: LD_ADDR_VAR 0 11
58852: PUSH
58853: DOUBLE
58854: LD_INT 1
58856: DEC
58857: ST_TO_ADDR
58858: LD_VAR 0 6
58862: PUSH
58863: FOR_TO
58864: IFFALSE 58911
// begin vc_chassis := 31 ;
58866: LD_ADDR_OWVAR 37
58870: PUSH
58871: LD_INT 31
58873: ST_TO_ADDR
// vc_control := control_rider ;
58874: LD_ADDR_OWVAR 38
58878: PUSH
58879: LD_INT 4
58881: ST_TO_ADDR
// animal := CreateVehicle ;
58882: LD_ADDR_VAR 0 12
58886: PUSH
58887: CALL_OW 45
58891: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58892: LD_VAR 0 12
58896: PPUSH
58897: LD_VAR 0 8
58901: PPUSH
58902: LD_INT 0
58904: PPUSH
58905: CALL 61048 0 3
// end ;
58909: GO 58863
58911: POP
58912: POP
// if horses then
58913: LD_VAR 0 5
58917: IFFALSE 58984
// for i = 1 to horses do
58919: LD_ADDR_VAR 0 11
58923: PUSH
58924: DOUBLE
58925: LD_INT 1
58927: DEC
58928: ST_TO_ADDR
58929: LD_VAR 0 5
58933: PUSH
58934: FOR_TO
58935: IFFALSE 58982
// begin hc_class := 21 ;
58937: LD_ADDR_OWVAR 28
58941: PUSH
58942: LD_INT 21
58944: ST_TO_ADDR
// hc_gallery :=  ;
58945: LD_ADDR_OWVAR 33
58949: PUSH
58950: LD_STRING 
58952: ST_TO_ADDR
// animal := CreateHuman ;
58953: LD_ADDR_VAR 0 12
58957: PUSH
58958: CALL_OW 44
58962: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58963: LD_VAR 0 12
58967: PPUSH
58968: LD_VAR 0 8
58972: PPUSH
58973: LD_INT 0
58975: PPUSH
58976: CALL 61048 0 3
// end ;
58980: GO 58934
58982: POP
58983: POP
// if birds then
58984: LD_VAR 0 1
58988: IFFALSE 59055
// for i = 1 to birds do
58990: LD_ADDR_VAR 0 11
58994: PUSH
58995: DOUBLE
58996: LD_INT 1
58998: DEC
58999: ST_TO_ADDR
59000: LD_VAR 0 1
59004: PUSH
59005: FOR_TO
59006: IFFALSE 59053
// begin hc_class = 18 ;
59008: LD_ADDR_OWVAR 28
59012: PUSH
59013: LD_INT 18
59015: ST_TO_ADDR
// hc_gallery =  ;
59016: LD_ADDR_OWVAR 33
59020: PUSH
59021: LD_STRING 
59023: ST_TO_ADDR
// animal := CreateHuman ;
59024: LD_ADDR_VAR 0 12
59028: PUSH
59029: CALL_OW 44
59033: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59034: LD_VAR 0 12
59038: PPUSH
59039: LD_VAR 0 8
59043: PPUSH
59044: LD_INT 0
59046: PPUSH
59047: CALL 61048 0 3
// end ;
59051: GO 59005
59053: POP
59054: POP
// if tigers then
59055: LD_VAR 0 2
59059: IFFALSE 59143
// for i = 1 to tigers do
59061: LD_ADDR_VAR 0 11
59065: PUSH
59066: DOUBLE
59067: LD_INT 1
59069: DEC
59070: ST_TO_ADDR
59071: LD_VAR 0 2
59075: PUSH
59076: FOR_TO
59077: IFFALSE 59141
// begin hc_class = class_tiger ;
59079: LD_ADDR_OWVAR 28
59083: PUSH
59084: LD_INT 14
59086: ST_TO_ADDR
// hc_gallery =  ;
59087: LD_ADDR_OWVAR 33
59091: PUSH
59092: LD_STRING 
59094: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59095: LD_ADDR_OWVAR 35
59099: PUSH
59100: LD_INT 7
59102: NEG
59103: PPUSH
59104: LD_INT 7
59106: PPUSH
59107: CALL_OW 12
59111: ST_TO_ADDR
// animal := CreateHuman ;
59112: LD_ADDR_VAR 0 12
59116: PUSH
59117: CALL_OW 44
59121: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59122: LD_VAR 0 12
59126: PPUSH
59127: LD_VAR 0 8
59131: PPUSH
59132: LD_INT 0
59134: PPUSH
59135: CALL 61048 0 3
// end ;
59139: GO 59076
59141: POP
59142: POP
// if apemans then
59143: LD_VAR 0 3
59147: IFFALSE 59270
// for i = 1 to apemans do
59149: LD_ADDR_VAR 0 11
59153: PUSH
59154: DOUBLE
59155: LD_INT 1
59157: DEC
59158: ST_TO_ADDR
59159: LD_VAR 0 3
59163: PUSH
59164: FOR_TO
59165: IFFALSE 59268
// begin hc_class = class_apeman ;
59167: LD_ADDR_OWVAR 28
59171: PUSH
59172: LD_INT 12
59174: ST_TO_ADDR
// hc_gallery =  ;
59175: LD_ADDR_OWVAR 33
59179: PUSH
59180: LD_STRING 
59182: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59183: LD_ADDR_OWVAR 35
59187: PUSH
59188: LD_INT 2
59190: NEG
59191: PPUSH
59192: LD_INT 2
59194: PPUSH
59195: CALL_OW 12
59199: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59200: LD_ADDR_OWVAR 31
59204: PUSH
59205: LD_INT 1
59207: PPUSH
59208: LD_INT 3
59210: PPUSH
59211: CALL_OW 12
59215: PUSH
59216: LD_INT 1
59218: PPUSH
59219: LD_INT 3
59221: PPUSH
59222: CALL_OW 12
59226: PUSH
59227: LD_INT 0
59229: PUSH
59230: LD_INT 0
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: ST_TO_ADDR
// animal := CreateHuman ;
59239: LD_ADDR_VAR 0 12
59243: PUSH
59244: CALL_OW 44
59248: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59249: LD_VAR 0 12
59253: PPUSH
59254: LD_VAR 0 8
59258: PPUSH
59259: LD_INT 0
59261: PPUSH
59262: CALL 61048 0 3
// end ;
59266: GO 59164
59268: POP
59269: POP
// if enchidnas then
59270: LD_VAR 0 4
59274: IFFALSE 59341
// for i = 1 to enchidnas do
59276: LD_ADDR_VAR 0 11
59280: PUSH
59281: DOUBLE
59282: LD_INT 1
59284: DEC
59285: ST_TO_ADDR
59286: LD_VAR 0 4
59290: PUSH
59291: FOR_TO
59292: IFFALSE 59339
// begin hc_class = 13 ;
59294: LD_ADDR_OWVAR 28
59298: PUSH
59299: LD_INT 13
59301: ST_TO_ADDR
// hc_gallery =  ;
59302: LD_ADDR_OWVAR 33
59306: PUSH
59307: LD_STRING 
59309: ST_TO_ADDR
// animal := CreateHuman ;
59310: LD_ADDR_VAR 0 12
59314: PUSH
59315: CALL_OW 44
59319: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59320: LD_VAR 0 12
59324: PPUSH
59325: LD_VAR 0 8
59329: PPUSH
59330: LD_INT 0
59332: PPUSH
59333: CALL 61048 0 3
// end ;
59337: GO 59291
59339: POP
59340: POP
// if fishes then
59341: LD_VAR 0 7
59345: IFFALSE 59412
// for i = 1 to fishes do
59347: LD_ADDR_VAR 0 11
59351: PUSH
59352: DOUBLE
59353: LD_INT 1
59355: DEC
59356: ST_TO_ADDR
59357: LD_VAR 0 7
59361: PUSH
59362: FOR_TO
59363: IFFALSE 59410
// begin hc_class = 20 ;
59365: LD_ADDR_OWVAR 28
59369: PUSH
59370: LD_INT 20
59372: ST_TO_ADDR
// hc_gallery =  ;
59373: LD_ADDR_OWVAR 33
59377: PUSH
59378: LD_STRING 
59380: ST_TO_ADDR
// animal := CreateHuman ;
59381: LD_ADDR_VAR 0 12
59385: PUSH
59386: CALL_OW 44
59390: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59391: LD_VAR 0 12
59395: PPUSH
59396: LD_VAR 0 9
59400: PPUSH
59401: LD_INT 0
59403: PPUSH
59404: CALL 61048 0 3
// end ;
59408: GO 59362
59410: POP
59411: POP
// end ;
59412: LD_VAR 0 10
59416: RET
// export function WantHeal ( sci , unit ) ; begin
59417: LD_INT 0
59419: PPUSH
// if GetTaskList ( sci ) > 0 then
59420: LD_VAR 0 1
59424: PPUSH
59425: CALL_OW 437
59429: PUSH
59430: LD_INT 0
59432: GREATER
59433: IFFALSE 59503
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59435: LD_VAR 0 1
59439: PPUSH
59440: CALL_OW 437
59444: PUSH
59445: LD_INT 1
59447: ARRAY
59448: PUSH
59449: LD_INT 1
59451: ARRAY
59452: PUSH
59453: LD_STRING l
59455: EQUAL
59456: PUSH
59457: LD_VAR 0 1
59461: PPUSH
59462: CALL_OW 437
59466: PUSH
59467: LD_INT 1
59469: ARRAY
59470: PUSH
59471: LD_INT 4
59473: ARRAY
59474: PUSH
59475: LD_VAR 0 2
59479: EQUAL
59480: AND
59481: IFFALSE 59493
// result := true else
59483: LD_ADDR_VAR 0 3
59487: PUSH
59488: LD_INT 1
59490: ST_TO_ADDR
59491: GO 59501
// result := false ;
59493: LD_ADDR_VAR 0 3
59497: PUSH
59498: LD_INT 0
59500: ST_TO_ADDR
// end else
59501: GO 59511
// result := false ;
59503: LD_ADDR_VAR 0 3
59507: PUSH
59508: LD_INT 0
59510: ST_TO_ADDR
// end ;
59511: LD_VAR 0 3
59515: RET
// export function HealTarget ( sci ) ; begin
59516: LD_INT 0
59518: PPUSH
// if not sci then
59519: LD_VAR 0 1
59523: NOT
59524: IFFALSE 59528
// exit ;
59526: GO 59593
// result := 0 ;
59528: LD_ADDR_VAR 0 2
59532: PUSH
59533: LD_INT 0
59535: ST_TO_ADDR
// if GetTaskList ( sci ) then
59536: LD_VAR 0 1
59540: PPUSH
59541: CALL_OW 437
59545: IFFALSE 59593
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59547: LD_VAR 0 1
59551: PPUSH
59552: CALL_OW 437
59556: PUSH
59557: LD_INT 1
59559: ARRAY
59560: PUSH
59561: LD_INT 1
59563: ARRAY
59564: PUSH
59565: LD_STRING l
59567: EQUAL
59568: IFFALSE 59593
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59570: LD_ADDR_VAR 0 2
59574: PUSH
59575: LD_VAR 0 1
59579: PPUSH
59580: CALL_OW 437
59584: PUSH
59585: LD_INT 1
59587: ARRAY
59588: PUSH
59589: LD_INT 4
59591: ARRAY
59592: ST_TO_ADDR
// end ;
59593: LD_VAR 0 2
59597: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59598: LD_INT 0
59600: PPUSH
59601: PPUSH
59602: PPUSH
59603: PPUSH
// if not base_units then
59604: LD_VAR 0 1
59608: NOT
59609: IFFALSE 59613
// exit ;
59611: GO 59700
// result := false ;
59613: LD_ADDR_VAR 0 2
59617: PUSH
59618: LD_INT 0
59620: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59621: LD_ADDR_VAR 0 5
59625: PUSH
59626: LD_VAR 0 1
59630: PPUSH
59631: LD_INT 21
59633: PUSH
59634: LD_INT 3
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PPUSH
59641: CALL_OW 72
59645: ST_TO_ADDR
// if not tmp then
59646: LD_VAR 0 5
59650: NOT
59651: IFFALSE 59655
// exit ;
59653: GO 59700
// for i in tmp do
59655: LD_ADDR_VAR 0 3
59659: PUSH
59660: LD_VAR 0 5
59664: PUSH
59665: FOR_IN
59666: IFFALSE 59698
// begin result := EnemyInRange ( i , 22 ) ;
59668: LD_ADDR_VAR 0 2
59672: PUSH
59673: LD_VAR 0 3
59677: PPUSH
59678: LD_INT 22
59680: PPUSH
59681: CALL 57936 0 2
59685: ST_TO_ADDR
// if result then
59686: LD_VAR 0 2
59690: IFFALSE 59696
// exit ;
59692: POP
59693: POP
59694: GO 59700
// end ;
59696: GO 59665
59698: POP
59699: POP
// end ;
59700: LD_VAR 0 2
59704: RET
// export function FilterByTag ( units , tag ) ; begin
59705: LD_INT 0
59707: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59708: LD_ADDR_VAR 0 3
59712: PUSH
59713: LD_VAR 0 1
59717: PPUSH
59718: LD_INT 120
59720: PUSH
59721: LD_VAR 0 2
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PPUSH
59730: CALL_OW 72
59734: ST_TO_ADDR
// end ;
59735: LD_VAR 0 3
59739: RET
// export function IsDriver ( un ) ; begin
59740: LD_INT 0
59742: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59743: LD_ADDR_VAR 0 2
59747: PUSH
59748: LD_VAR 0 1
59752: PUSH
59753: LD_INT 55
59755: PUSH
59756: EMPTY
59757: LIST
59758: PPUSH
59759: CALL_OW 69
59763: IN
59764: ST_TO_ADDR
// end ;
59765: LD_VAR 0 2
59769: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59770: LD_INT 0
59772: PPUSH
59773: PPUSH
// list := [ ] ;
59774: LD_ADDR_VAR 0 5
59778: PUSH
59779: EMPTY
59780: ST_TO_ADDR
// case d of 0 :
59781: LD_VAR 0 3
59785: PUSH
59786: LD_INT 0
59788: DOUBLE
59789: EQUAL
59790: IFTRUE 59794
59792: GO 59927
59794: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59795: LD_ADDR_VAR 0 5
59799: PUSH
59800: LD_VAR 0 1
59804: PUSH
59805: LD_INT 4
59807: MINUS
59808: PUSH
59809: LD_VAR 0 2
59813: PUSH
59814: LD_INT 4
59816: MINUS
59817: PUSH
59818: LD_INT 2
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: LIST
59825: PUSH
59826: LD_VAR 0 1
59830: PUSH
59831: LD_INT 3
59833: MINUS
59834: PUSH
59835: LD_VAR 0 2
59839: PUSH
59840: LD_INT 1
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: LIST
59847: PUSH
59848: LD_VAR 0 1
59852: PUSH
59853: LD_INT 4
59855: PLUS
59856: PUSH
59857: LD_VAR 0 2
59861: PUSH
59862: LD_INT 4
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: LIST
59869: PUSH
59870: LD_VAR 0 1
59874: PUSH
59875: LD_INT 3
59877: PLUS
59878: PUSH
59879: LD_VAR 0 2
59883: PUSH
59884: LD_INT 3
59886: PLUS
59887: PUSH
59888: LD_INT 5
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: LIST
59895: PUSH
59896: LD_VAR 0 1
59900: PUSH
59901: LD_VAR 0 2
59905: PUSH
59906: LD_INT 4
59908: PLUS
59909: PUSH
59910: LD_INT 0
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: LIST
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: ST_TO_ADDR
// end ; 1 :
59925: GO 60625
59927: LD_INT 1
59929: DOUBLE
59930: EQUAL
59931: IFTRUE 59935
59933: GO 60068
59935: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59936: LD_ADDR_VAR 0 5
59940: PUSH
59941: LD_VAR 0 1
59945: PUSH
59946: LD_VAR 0 2
59950: PUSH
59951: LD_INT 4
59953: MINUS
59954: PUSH
59955: LD_INT 3
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: LIST
59962: PUSH
59963: LD_VAR 0 1
59967: PUSH
59968: LD_INT 3
59970: MINUS
59971: PUSH
59972: LD_VAR 0 2
59976: PUSH
59977: LD_INT 3
59979: MINUS
59980: PUSH
59981: LD_INT 2
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: LIST
59988: PUSH
59989: LD_VAR 0 1
59993: PUSH
59994: LD_INT 4
59996: MINUS
59997: PUSH
59998: LD_VAR 0 2
60002: PUSH
60003: LD_INT 1
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: LIST
60010: PUSH
60011: LD_VAR 0 1
60015: PUSH
60016: LD_VAR 0 2
60020: PUSH
60021: LD_INT 3
60023: PLUS
60024: PUSH
60025: LD_INT 0
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: LIST
60032: PUSH
60033: LD_VAR 0 1
60037: PUSH
60038: LD_INT 4
60040: PLUS
60041: PUSH
60042: LD_VAR 0 2
60046: PUSH
60047: LD_INT 4
60049: PLUS
60050: PUSH
60051: LD_INT 5
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: LIST
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: ST_TO_ADDR
// end ; 2 :
60066: GO 60625
60068: LD_INT 2
60070: DOUBLE
60071: EQUAL
60072: IFTRUE 60076
60074: GO 60205
60076: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60077: LD_ADDR_VAR 0 5
60081: PUSH
60082: LD_VAR 0 1
60086: PUSH
60087: LD_VAR 0 2
60091: PUSH
60092: LD_INT 3
60094: MINUS
60095: PUSH
60096: LD_INT 3
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: LIST
60103: PUSH
60104: LD_VAR 0 1
60108: PUSH
60109: LD_INT 4
60111: PLUS
60112: PUSH
60113: LD_VAR 0 2
60117: PUSH
60118: LD_INT 4
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: LIST
60125: PUSH
60126: LD_VAR 0 1
60130: PUSH
60131: LD_VAR 0 2
60135: PUSH
60136: LD_INT 4
60138: PLUS
60139: PUSH
60140: LD_INT 0
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: LIST
60147: PUSH
60148: LD_VAR 0 1
60152: PUSH
60153: LD_INT 3
60155: MINUS
60156: PUSH
60157: LD_VAR 0 2
60161: PUSH
60162: LD_INT 1
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: LIST
60169: PUSH
60170: LD_VAR 0 1
60174: PUSH
60175: LD_INT 4
60177: MINUS
60178: PUSH
60179: LD_VAR 0 2
60183: PUSH
60184: LD_INT 4
60186: MINUS
60187: PUSH
60188: LD_INT 2
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: LIST
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: ST_TO_ADDR
// end ; 3 :
60203: GO 60625
60205: LD_INT 3
60207: DOUBLE
60208: EQUAL
60209: IFTRUE 60213
60211: GO 60346
60213: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60214: LD_ADDR_VAR 0 5
60218: PUSH
60219: LD_VAR 0 1
60223: PUSH
60224: LD_INT 3
60226: PLUS
60227: PUSH
60228: LD_VAR 0 2
60232: PUSH
60233: LD_INT 4
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: LIST
60240: PUSH
60241: LD_VAR 0 1
60245: PUSH
60246: LD_INT 4
60248: PLUS
60249: PUSH
60250: LD_VAR 0 2
60254: PUSH
60255: LD_INT 4
60257: PLUS
60258: PUSH
60259: LD_INT 5
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: LIST
60266: PUSH
60267: LD_VAR 0 1
60271: PUSH
60272: LD_INT 4
60274: MINUS
60275: PUSH
60276: LD_VAR 0 2
60280: PUSH
60281: LD_INT 1
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: LIST
60288: PUSH
60289: LD_VAR 0 1
60293: PUSH
60294: LD_VAR 0 2
60298: PUSH
60299: LD_INT 4
60301: MINUS
60302: PUSH
60303: LD_INT 3
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: LIST
60310: PUSH
60311: LD_VAR 0 1
60315: PUSH
60316: LD_INT 3
60318: MINUS
60319: PUSH
60320: LD_VAR 0 2
60324: PUSH
60325: LD_INT 3
60327: MINUS
60328: PUSH
60329: LD_INT 2
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: LIST
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: ST_TO_ADDR
// end ; 4 :
60344: GO 60625
60346: LD_INT 4
60348: DOUBLE
60349: EQUAL
60350: IFTRUE 60354
60352: GO 60487
60354: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60355: LD_ADDR_VAR 0 5
60359: PUSH
60360: LD_VAR 0 1
60364: PUSH
60365: LD_VAR 0 2
60369: PUSH
60370: LD_INT 4
60372: PLUS
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: LIST
60381: PUSH
60382: LD_VAR 0 1
60386: PUSH
60387: LD_INT 3
60389: PLUS
60390: PUSH
60391: LD_VAR 0 2
60395: PUSH
60396: LD_INT 3
60398: PLUS
60399: PUSH
60400: LD_INT 5
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: LIST
60407: PUSH
60408: LD_VAR 0 1
60412: PUSH
60413: LD_INT 4
60415: PLUS
60416: PUSH
60417: LD_VAR 0 2
60421: PUSH
60422: LD_INT 4
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: LIST
60429: PUSH
60430: LD_VAR 0 1
60434: PUSH
60435: LD_VAR 0 2
60439: PUSH
60440: LD_INT 3
60442: MINUS
60443: PUSH
60444: LD_INT 3
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: LIST
60451: PUSH
60452: LD_VAR 0 1
60456: PUSH
60457: LD_INT 4
60459: MINUS
60460: PUSH
60461: LD_VAR 0 2
60465: PUSH
60466: LD_INT 4
60468: MINUS
60469: PUSH
60470: LD_INT 2
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: LIST
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: ST_TO_ADDR
// end ; 5 :
60485: GO 60625
60487: LD_INT 5
60489: DOUBLE
60490: EQUAL
60491: IFTRUE 60495
60493: GO 60624
60495: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60496: LD_ADDR_VAR 0 5
60500: PUSH
60501: LD_VAR 0 1
60505: PUSH
60506: LD_INT 4
60508: MINUS
60509: PUSH
60510: LD_VAR 0 2
60514: PUSH
60515: LD_INT 1
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: LIST
60522: PUSH
60523: LD_VAR 0 1
60527: PUSH
60528: LD_VAR 0 2
60532: PUSH
60533: LD_INT 4
60535: MINUS
60536: PUSH
60537: LD_INT 3
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: LIST
60544: PUSH
60545: LD_VAR 0 1
60549: PUSH
60550: LD_INT 4
60552: PLUS
60553: PUSH
60554: LD_VAR 0 2
60558: PUSH
60559: LD_INT 4
60561: PLUS
60562: PUSH
60563: LD_INT 5
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: LIST
60570: PUSH
60571: LD_VAR 0 1
60575: PUSH
60576: LD_INT 3
60578: PLUS
60579: PUSH
60580: LD_VAR 0 2
60584: PUSH
60585: LD_INT 4
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: LIST
60592: PUSH
60593: LD_VAR 0 1
60597: PUSH
60598: LD_VAR 0 2
60602: PUSH
60603: LD_INT 3
60605: PLUS
60606: PUSH
60607: LD_INT 0
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: LIST
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: ST_TO_ADDR
// end ; end ;
60622: GO 60625
60624: POP
// result := list ;
60625: LD_ADDR_VAR 0 4
60629: PUSH
60630: LD_VAR 0 5
60634: ST_TO_ADDR
// end ;
60635: LD_VAR 0 4
60639: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60640: LD_INT 0
60642: PPUSH
60643: PPUSH
60644: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60645: LD_VAR 0 1
60649: NOT
60650: PUSH
60651: LD_VAR 0 2
60655: PUSH
60656: LD_INT 1
60658: PUSH
60659: LD_INT 2
60661: PUSH
60662: LD_INT 3
60664: PUSH
60665: LD_INT 4
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: IN
60674: NOT
60675: OR
60676: IFFALSE 60680
// exit ;
60678: GO 60772
// tmp := [ ] ;
60680: LD_ADDR_VAR 0 5
60684: PUSH
60685: EMPTY
60686: ST_TO_ADDR
// for i in units do
60687: LD_ADDR_VAR 0 4
60691: PUSH
60692: LD_VAR 0 1
60696: PUSH
60697: FOR_IN
60698: IFFALSE 60741
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60700: LD_ADDR_VAR 0 5
60704: PUSH
60705: LD_VAR 0 5
60709: PPUSH
60710: LD_VAR 0 5
60714: PUSH
60715: LD_INT 1
60717: PLUS
60718: PPUSH
60719: LD_VAR 0 4
60723: PPUSH
60724: LD_VAR 0 2
60728: PPUSH
60729: CALL_OW 259
60733: PPUSH
60734: CALL_OW 2
60738: ST_TO_ADDR
60739: GO 60697
60741: POP
60742: POP
// if not tmp then
60743: LD_VAR 0 5
60747: NOT
60748: IFFALSE 60752
// exit ;
60750: GO 60772
// result := SortListByListDesc ( units , tmp ) ;
60752: LD_ADDR_VAR 0 3
60756: PUSH
60757: LD_VAR 0 1
60761: PPUSH
60762: LD_VAR 0 5
60766: PPUSH
60767: CALL_OW 77
60771: ST_TO_ADDR
// end ;
60772: LD_VAR 0 3
60776: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60777: LD_INT 0
60779: PPUSH
60780: PPUSH
60781: PPUSH
// result := false ;
60782: LD_ADDR_VAR 0 3
60786: PUSH
60787: LD_INT 0
60789: ST_TO_ADDR
// x := GetX ( building ) ;
60790: LD_ADDR_VAR 0 4
60794: PUSH
60795: LD_VAR 0 2
60799: PPUSH
60800: CALL_OW 250
60804: ST_TO_ADDR
// y := GetY ( building ) ;
60805: LD_ADDR_VAR 0 5
60809: PUSH
60810: LD_VAR 0 2
60814: PPUSH
60815: CALL_OW 251
60819: ST_TO_ADDR
// if not building or not x or not y then
60820: LD_VAR 0 2
60824: NOT
60825: PUSH
60826: LD_VAR 0 4
60830: NOT
60831: OR
60832: PUSH
60833: LD_VAR 0 5
60837: NOT
60838: OR
60839: IFFALSE 60843
// exit ;
60841: GO 60935
// if GetTaskList ( unit ) then
60843: LD_VAR 0 1
60847: PPUSH
60848: CALL_OW 437
60852: IFFALSE 60935
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60854: LD_STRING e
60856: PUSH
60857: LD_VAR 0 1
60861: PPUSH
60862: CALL_OW 437
60866: PUSH
60867: LD_INT 1
60869: ARRAY
60870: PUSH
60871: LD_INT 1
60873: ARRAY
60874: EQUAL
60875: PUSH
60876: LD_VAR 0 4
60880: PUSH
60881: LD_VAR 0 1
60885: PPUSH
60886: CALL_OW 437
60890: PUSH
60891: LD_INT 1
60893: ARRAY
60894: PUSH
60895: LD_INT 2
60897: ARRAY
60898: EQUAL
60899: AND
60900: PUSH
60901: LD_VAR 0 5
60905: PUSH
60906: LD_VAR 0 1
60910: PPUSH
60911: CALL_OW 437
60915: PUSH
60916: LD_INT 1
60918: ARRAY
60919: PUSH
60920: LD_INT 3
60922: ARRAY
60923: EQUAL
60924: AND
60925: IFFALSE 60935
// result := true end ;
60927: LD_ADDR_VAR 0 3
60931: PUSH
60932: LD_INT 1
60934: ST_TO_ADDR
// end ;
60935: LD_VAR 0 3
60939: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60940: LD_INT 0
60942: PPUSH
// result := false ;
60943: LD_ADDR_VAR 0 4
60947: PUSH
60948: LD_INT 0
60950: ST_TO_ADDR
// if GetTaskList ( unit ) then
60951: LD_VAR 0 1
60955: PPUSH
60956: CALL_OW 437
60960: IFFALSE 61043
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60962: LD_STRING M
60964: PUSH
60965: LD_VAR 0 1
60969: PPUSH
60970: CALL_OW 437
60974: PUSH
60975: LD_INT 1
60977: ARRAY
60978: PUSH
60979: LD_INT 1
60981: ARRAY
60982: EQUAL
60983: PUSH
60984: LD_VAR 0 2
60988: PUSH
60989: LD_VAR 0 1
60993: PPUSH
60994: CALL_OW 437
60998: PUSH
60999: LD_INT 1
61001: ARRAY
61002: PUSH
61003: LD_INT 2
61005: ARRAY
61006: EQUAL
61007: AND
61008: PUSH
61009: LD_VAR 0 3
61013: PUSH
61014: LD_VAR 0 1
61018: PPUSH
61019: CALL_OW 437
61023: PUSH
61024: LD_INT 1
61026: ARRAY
61027: PUSH
61028: LD_INT 3
61030: ARRAY
61031: EQUAL
61032: AND
61033: IFFALSE 61043
// result := true ;
61035: LD_ADDR_VAR 0 4
61039: PUSH
61040: LD_INT 1
61042: ST_TO_ADDR
// end ; end ;
61043: LD_VAR 0 4
61047: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61048: LD_INT 0
61050: PPUSH
61051: PPUSH
61052: PPUSH
61053: PPUSH
// if not unit or not area then
61054: LD_VAR 0 1
61058: NOT
61059: PUSH
61060: LD_VAR 0 2
61064: NOT
61065: OR
61066: IFFALSE 61070
// exit ;
61068: GO 61234
// tmp := AreaToList ( area , i ) ;
61070: LD_ADDR_VAR 0 6
61074: PUSH
61075: LD_VAR 0 2
61079: PPUSH
61080: LD_VAR 0 5
61084: PPUSH
61085: CALL_OW 517
61089: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61090: LD_ADDR_VAR 0 5
61094: PUSH
61095: DOUBLE
61096: LD_INT 1
61098: DEC
61099: ST_TO_ADDR
61100: LD_VAR 0 6
61104: PUSH
61105: LD_INT 1
61107: ARRAY
61108: PUSH
61109: FOR_TO
61110: IFFALSE 61232
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61112: LD_ADDR_VAR 0 7
61116: PUSH
61117: LD_VAR 0 6
61121: PUSH
61122: LD_INT 1
61124: ARRAY
61125: PUSH
61126: LD_VAR 0 5
61130: ARRAY
61131: PUSH
61132: LD_VAR 0 6
61136: PUSH
61137: LD_INT 2
61139: ARRAY
61140: PUSH
61141: LD_VAR 0 5
61145: ARRAY
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61151: LD_VAR 0 7
61155: PUSH
61156: LD_INT 1
61158: ARRAY
61159: PPUSH
61160: LD_VAR 0 7
61164: PUSH
61165: LD_INT 2
61167: ARRAY
61168: PPUSH
61169: CALL_OW 428
61173: PUSH
61174: LD_INT 0
61176: EQUAL
61177: IFFALSE 61230
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61179: LD_VAR 0 1
61183: PPUSH
61184: LD_VAR 0 7
61188: PUSH
61189: LD_INT 1
61191: ARRAY
61192: PPUSH
61193: LD_VAR 0 7
61197: PUSH
61198: LD_INT 2
61200: ARRAY
61201: PPUSH
61202: LD_VAR 0 3
61206: PPUSH
61207: CALL_OW 48
// result := IsPlaced ( unit ) ;
61211: LD_ADDR_VAR 0 4
61215: PUSH
61216: LD_VAR 0 1
61220: PPUSH
61221: CALL_OW 305
61225: ST_TO_ADDR
// exit ;
61226: POP
61227: POP
61228: GO 61234
// end ; end ;
61230: GO 61109
61232: POP
61233: POP
// end ;
61234: LD_VAR 0 4
61238: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61239: LD_INT 0
61241: PPUSH
61242: PPUSH
61243: PPUSH
// if not side or side > 8 then
61244: LD_VAR 0 1
61248: NOT
61249: PUSH
61250: LD_VAR 0 1
61254: PUSH
61255: LD_INT 8
61257: GREATER
61258: OR
61259: IFFALSE 61263
// exit ;
61261: GO 61450
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61263: LD_ADDR_VAR 0 4
61267: PUSH
61268: LD_INT 22
61270: PUSH
61271: LD_VAR 0 1
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 21
61282: PUSH
61283: LD_INT 3
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PPUSH
61294: CALL_OW 69
61298: ST_TO_ADDR
// if not tmp then
61299: LD_VAR 0 4
61303: NOT
61304: IFFALSE 61308
// exit ;
61306: GO 61450
// enable_addtolog := true ;
61308: LD_ADDR_OWVAR 81
61312: PUSH
61313: LD_INT 1
61315: ST_TO_ADDR
// AddToLog ( [ ) ;
61316: LD_STRING [
61318: PPUSH
61319: CALL_OW 561
// for i in tmp do
61323: LD_ADDR_VAR 0 3
61327: PUSH
61328: LD_VAR 0 4
61332: PUSH
61333: FOR_IN
61334: IFFALSE 61441
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61336: LD_STRING [
61338: PUSH
61339: LD_VAR 0 3
61343: PPUSH
61344: CALL_OW 266
61348: STR
61349: PUSH
61350: LD_STRING , 
61352: STR
61353: PUSH
61354: LD_VAR 0 3
61358: PPUSH
61359: CALL_OW 250
61363: STR
61364: PUSH
61365: LD_STRING , 
61367: STR
61368: PUSH
61369: LD_VAR 0 3
61373: PPUSH
61374: CALL_OW 251
61378: STR
61379: PUSH
61380: LD_STRING , 
61382: STR
61383: PUSH
61384: LD_VAR 0 3
61388: PPUSH
61389: CALL_OW 254
61393: STR
61394: PUSH
61395: LD_STRING , 
61397: STR
61398: PUSH
61399: LD_VAR 0 3
61403: PPUSH
61404: LD_INT 1
61406: PPUSH
61407: CALL_OW 268
61411: STR
61412: PUSH
61413: LD_STRING , 
61415: STR
61416: PUSH
61417: LD_VAR 0 3
61421: PPUSH
61422: LD_INT 2
61424: PPUSH
61425: CALL_OW 268
61429: STR
61430: PUSH
61431: LD_STRING ],
61433: STR
61434: PPUSH
61435: CALL_OW 561
// end ;
61439: GO 61333
61441: POP
61442: POP
// AddToLog ( ]; ) ;
61443: LD_STRING ];
61445: PPUSH
61446: CALL_OW 561
// end ;
61450: LD_VAR 0 2
61454: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61455: LD_INT 0
61457: PPUSH
61458: PPUSH
61459: PPUSH
61460: PPUSH
61461: PPUSH
// if not area or not rate or not max then
61462: LD_VAR 0 1
61466: NOT
61467: PUSH
61468: LD_VAR 0 2
61472: NOT
61473: OR
61474: PUSH
61475: LD_VAR 0 4
61479: NOT
61480: OR
61481: IFFALSE 61485
// exit ;
61483: GO 61674
// while 1 do
61485: LD_INT 1
61487: IFFALSE 61674
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61489: LD_ADDR_VAR 0 9
61493: PUSH
61494: LD_VAR 0 1
61498: PPUSH
61499: LD_INT 1
61501: PPUSH
61502: CALL_OW 287
61506: PUSH
61507: LD_INT 10
61509: MUL
61510: ST_TO_ADDR
// r := rate / 10 ;
61511: LD_ADDR_VAR 0 7
61515: PUSH
61516: LD_VAR 0 2
61520: PUSH
61521: LD_INT 10
61523: DIVREAL
61524: ST_TO_ADDR
// time := 1 1$00 ;
61525: LD_ADDR_VAR 0 8
61529: PUSH
61530: LD_INT 2100
61532: ST_TO_ADDR
// if amount < min then
61533: LD_VAR 0 9
61537: PUSH
61538: LD_VAR 0 3
61542: LESS
61543: IFFALSE 61561
// r := r * 2 else
61545: LD_ADDR_VAR 0 7
61549: PUSH
61550: LD_VAR 0 7
61554: PUSH
61555: LD_INT 2
61557: MUL
61558: ST_TO_ADDR
61559: GO 61587
// if amount > max then
61561: LD_VAR 0 9
61565: PUSH
61566: LD_VAR 0 4
61570: GREATER
61571: IFFALSE 61587
// r := r / 2 ;
61573: LD_ADDR_VAR 0 7
61577: PUSH
61578: LD_VAR 0 7
61582: PUSH
61583: LD_INT 2
61585: DIVREAL
61586: ST_TO_ADDR
// time := time / r ;
61587: LD_ADDR_VAR 0 8
61591: PUSH
61592: LD_VAR 0 8
61596: PUSH
61597: LD_VAR 0 7
61601: DIVREAL
61602: ST_TO_ADDR
// if time < 0 then
61603: LD_VAR 0 8
61607: PUSH
61608: LD_INT 0
61610: LESS
61611: IFFALSE 61628
// time := time * - 1 ;
61613: LD_ADDR_VAR 0 8
61617: PUSH
61618: LD_VAR 0 8
61622: PUSH
61623: LD_INT 1
61625: NEG
61626: MUL
61627: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61628: LD_VAR 0 8
61632: PUSH
61633: LD_INT 35
61635: PPUSH
61636: LD_INT 875
61638: PPUSH
61639: CALL_OW 12
61643: PLUS
61644: PPUSH
61645: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61649: LD_INT 1
61651: PPUSH
61652: LD_INT 5
61654: PPUSH
61655: CALL_OW 12
61659: PPUSH
61660: LD_VAR 0 1
61664: PPUSH
61665: LD_INT 1
61667: PPUSH
61668: CALL_OW 55
// end ;
61672: GO 61485
// end ;
61674: LD_VAR 0 5
61678: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61679: LD_INT 0
61681: PPUSH
61682: PPUSH
61683: PPUSH
61684: PPUSH
61685: PPUSH
61686: PPUSH
61687: PPUSH
61688: PPUSH
// if not turrets or not factories then
61689: LD_VAR 0 1
61693: NOT
61694: PUSH
61695: LD_VAR 0 2
61699: NOT
61700: OR
61701: IFFALSE 61705
// exit ;
61703: GO 62012
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61705: LD_ADDR_VAR 0 10
61709: PUSH
61710: LD_INT 5
61712: PUSH
61713: LD_INT 6
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 2
61722: PUSH
61723: LD_INT 4
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 3
61732: PUSH
61733: LD_INT 5
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 24
61747: PUSH
61748: LD_INT 25
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 23
61757: PUSH
61758: LD_INT 27
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 42
61771: PUSH
61772: LD_INT 43
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 44
61781: PUSH
61782: LD_INT 46
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 45
61791: PUSH
61792: LD_INT 47
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: LIST
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: LIST
61808: ST_TO_ADDR
// result := [ ] ;
61809: LD_ADDR_VAR 0 3
61813: PUSH
61814: EMPTY
61815: ST_TO_ADDR
// for i in turrets do
61816: LD_ADDR_VAR 0 4
61820: PUSH
61821: LD_VAR 0 1
61825: PUSH
61826: FOR_IN
61827: IFFALSE 62010
// begin nat := GetNation ( i ) ;
61829: LD_ADDR_VAR 0 7
61833: PUSH
61834: LD_VAR 0 4
61838: PPUSH
61839: CALL_OW 248
61843: ST_TO_ADDR
// weapon := 0 ;
61844: LD_ADDR_VAR 0 8
61848: PUSH
61849: LD_INT 0
61851: ST_TO_ADDR
// if not nat then
61852: LD_VAR 0 7
61856: NOT
61857: IFFALSE 61861
// continue ;
61859: GO 61826
// for j in list [ nat ] do
61861: LD_ADDR_VAR 0 5
61865: PUSH
61866: LD_VAR 0 10
61870: PUSH
61871: LD_VAR 0 7
61875: ARRAY
61876: PUSH
61877: FOR_IN
61878: IFFALSE 61919
// if GetBWeapon ( i ) = j [ 1 ] then
61880: LD_VAR 0 4
61884: PPUSH
61885: CALL_OW 269
61889: PUSH
61890: LD_VAR 0 5
61894: PUSH
61895: LD_INT 1
61897: ARRAY
61898: EQUAL
61899: IFFALSE 61917
// begin weapon := j [ 2 ] ;
61901: LD_ADDR_VAR 0 8
61905: PUSH
61906: LD_VAR 0 5
61910: PUSH
61911: LD_INT 2
61913: ARRAY
61914: ST_TO_ADDR
// break ;
61915: GO 61919
// end ;
61917: GO 61877
61919: POP
61920: POP
// if not weapon then
61921: LD_VAR 0 8
61925: NOT
61926: IFFALSE 61930
// continue ;
61928: GO 61826
// for k in factories do
61930: LD_ADDR_VAR 0 6
61934: PUSH
61935: LD_VAR 0 2
61939: PUSH
61940: FOR_IN
61941: IFFALSE 62006
// begin weapons := AvailableWeaponList ( k ) ;
61943: LD_ADDR_VAR 0 9
61947: PUSH
61948: LD_VAR 0 6
61952: PPUSH
61953: CALL_OW 478
61957: ST_TO_ADDR
// if not weapons then
61958: LD_VAR 0 9
61962: NOT
61963: IFFALSE 61967
// continue ;
61965: GO 61940
// if weapon in weapons then
61967: LD_VAR 0 8
61971: PUSH
61972: LD_VAR 0 9
61976: IN
61977: IFFALSE 62004
// begin result := [ i , weapon ] ;
61979: LD_ADDR_VAR 0 3
61983: PUSH
61984: LD_VAR 0 4
61988: PUSH
61989: LD_VAR 0 8
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: ST_TO_ADDR
// exit ;
61998: POP
61999: POP
62000: POP
62001: POP
62002: GO 62012
// end ; end ;
62004: GO 61940
62006: POP
62007: POP
// end ;
62008: GO 61826
62010: POP
62011: POP
// end ;
62012: LD_VAR 0 3
62016: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62017: LD_INT 0
62019: PPUSH
// if not side or side > 8 then
62020: LD_VAR 0 3
62024: NOT
62025: PUSH
62026: LD_VAR 0 3
62030: PUSH
62031: LD_INT 8
62033: GREATER
62034: OR
62035: IFFALSE 62039
// exit ;
62037: GO 62098
// if not range then
62039: LD_VAR 0 4
62043: NOT
62044: IFFALSE 62055
// range := - 12 ;
62046: LD_ADDR_VAR 0 4
62050: PUSH
62051: LD_INT 12
62053: NEG
62054: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62055: LD_VAR 0 1
62059: PPUSH
62060: LD_VAR 0 2
62064: PPUSH
62065: LD_VAR 0 3
62069: PPUSH
62070: LD_VAR 0 4
62074: PPUSH
62075: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62079: LD_VAR 0 1
62083: PPUSH
62084: LD_VAR 0 2
62088: PPUSH
62089: LD_VAR 0 3
62093: PPUSH
62094: CALL_OW 331
// end ;
62098: LD_VAR 0 5
62102: RET
// export function Video ( mode ) ; begin
62103: LD_INT 0
62105: PPUSH
// ingame_video = mode ;
62106: LD_ADDR_OWVAR 52
62110: PUSH
62111: LD_VAR 0 1
62115: ST_TO_ADDR
// interface_hidden = mode ;
62116: LD_ADDR_OWVAR 54
62120: PUSH
62121: LD_VAR 0 1
62125: ST_TO_ADDR
// end ;
62126: LD_VAR 0 2
62130: RET
// export function Join ( array , element ) ; begin
62131: LD_INT 0
62133: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62134: LD_ADDR_VAR 0 3
62138: PUSH
62139: LD_VAR 0 1
62143: PPUSH
62144: LD_VAR 0 1
62148: PUSH
62149: LD_INT 1
62151: PLUS
62152: PPUSH
62153: LD_VAR 0 2
62157: PPUSH
62158: CALL_OW 1
62162: ST_TO_ADDR
// end ;
62163: LD_VAR 0 3
62167: RET
// export function JoinUnion ( array , element ) ; begin
62168: LD_INT 0
62170: PPUSH
// result := array union element ;
62171: LD_ADDR_VAR 0 3
62175: PUSH
62176: LD_VAR 0 1
62180: PUSH
62181: LD_VAR 0 2
62185: UNION
62186: ST_TO_ADDR
// end ;
62187: LD_VAR 0 3
62191: RET
// export function GetBehemoths ( side ) ; begin
62192: LD_INT 0
62194: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62195: LD_ADDR_VAR 0 2
62199: PUSH
62200: LD_INT 22
62202: PUSH
62203: LD_VAR 0 1
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 31
62214: PUSH
62215: LD_INT 25
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PPUSH
62226: CALL_OW 69
62230: ST_TO_ADDR
// end ;
62231: LD_VAR 0 2
62235: RET
// export function Shuffle ( array ) ; var i , index ; begin
62236: LD_INT 0
62238: PPUSH
62239: PPUSH
62240: PPUSH
// result := [ ] ;
62241: LD_ADDR_VAR 0 2
62245: PUSH
62246: EMPTY
62247: ST_TO_ADDR
// if not array then
62248: LD_VAR 0 1
62252: NOT
62253: IFFALSE 62257
// exit ;
62255: GO 62356
// Randomize ;
62257: CALL_OW 10
// for i = array downto 1 do
62261: LD_ADDR_VAR 0 3
62265: PUSH
62266: DOUBLE
62267: LD_VAR 0 1
62271: INC
62272: ST_TO_ADDR
62273: LD_INT 1
62275: PUSH
62276: FOR_DOWNTO
62277: IFFALSE 62354
// begin index := rand ( 1 , array ) ;
62279: LD_ADDR_VAR 0 4
62283: PUSH
62284: LD_INT 1
62286: PPUSH
62287: LD_VAR 0 1
62291: PPUSH
62292: CALL_OW 12
62296: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62297: LD_ADDR_VAR 0 2
62301: PUSH
62302: LD_VAR 0 2
62306: PPUSH
62307: LD_VAR 0 2
62311: PUSH
62312: LD_INT 1
62314: PLUS
62315: PPUSH
62316: LD_VAR 0 1
62320: PUSH
62321: LD_VAR 0 4
62325: ARRAY
62326: PPUSH
62327: CALL_OW 2
62331: ST_TO_ADDR
// array := Delete ( array , index ) ;
62332: LD_ADDR_VAR 0 1
62336: PUSH
62337: LD_VAR 0 1
62341: PPUSH
62342: LD_VAR 0 4
62346: PPUSH
62347: CALL_OW 3
62351: ST_TO_ADDR
// end ;
62352: GO 62276
62354: POP
62355: POP
// end ;
62356: LD_VAR 0 2
62360: RET
// export function GetBaseMaterials ( base ) ; begin
62361: LD_INT 0
62363: PPUSH
// result := [ 0 , 0 , 0 ] ;
62364: LD_ADDR_VAR 0 2
62368: PUSH
62369: LD_INT 0
62371: PUSH
62372: LD_INT 0
62374: PUSH
62375: LD_INT 0
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: LIST
62382: ST_TO_ADDR
// if not base then
62383: LD_VAR 0 1
62387: NOT
62388: IFFALSE 62392
// exit ;
62390: GO 62441
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62392: LD_ADDR_VAR 0 2
62396: PUSH
62397: LD_VAR 0 1
62401: PPUSH
62402: LD_INT 1
62404: PPUSH
62405: CALL_OW 275
62409: PUSH
62410: LD_VAR 0 1
62414: PPUSH
62415: LD_INT 2
62417: PPUSH
62418: CALL_OW 275
62422: PUSH
62423: LD_VAR 0 1
62427: PPUSH
62428: LD_INT 3
62430: PPUSH
62431: CALL_OW 275
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: LIST
62440: ST_TO_ADDR
// end ;
62441: LD_VAR 0 2
62445: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62446: LD_INT 0
62448: PPUSH
62449: PPUSH
// result := array ;
62450: LD_ADDR_VAR 0 3
62454: PUSH
62455: LD_VAR 0 1
62459: ST_TO_ADDR
// if size > 0 then
62460: LD_VAR 0 2
62464: PUSH
62465: LD_INT 0
62467: GREATER
62468: IFFALSE 62514
// for i := array downto size do
62470: LD_ADDR_VAR 0 4
62474: PUSH
62475: DOUBLE
62476: LD_VAR 0 1
62480: INC
62481: ST_TO_ADDR
62482: LD_VAR 0 2
62486: PUSH
62487: FOR_DOWNTO
62488: IFFALSE 62512
// result := Delete ( result , result ) ;
62490: LD_ADDR_VAR 0 3
62494: PUSH
62495: LD_VAR 0 3
62499: PPUSH
62500: LD_VAR 0 3
62504: PPUSH
62505: CALL_OW 3
62509: ST_TO_ADDR
62510: GO 62487
62512: POP
62513: POP
// end ;
62514: LD_VAR 0 3
62518: RET
// export function ComExit ( unit ) ; var tmp ; begin
62519: LD_INT 0
62521: PPUSH
62522: PPUSH
// if not IsInUnit ( unit ) then
62523: LD_VAR 0 1
62527: PPUSH
62528: CALL_OW 310
62532: NOT
62533: IFFALSE 62537
// exit ;
62535: GO 62597
// tmp := IsInUnit ( unit ) ;
62537: LD_ADDR_VAR 0 3
62541: PUSH
62542: LD_VAR 0 1
62546: PPUSH
62547: CALL_OW 310
62551: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62552: LD_VAR 0 3
62556: PPUSH
62557: CALL_OW 247
62561: PUSH
62562: LD_INT 2
62564: EQUAL
62565: IFFALSE 62578
// ComExitVehicle ( unit ) else
62567: LD_VAR 0 1
62571: PPUSH
62572: CALL_OW 121
62576: GO 62587
// ComExitBuilding ( unit ) ;
62578: LD_VAR 0 1
62582: PPUSH
62583: CALL_OW 122
// result := tmp ;
62587: LD_ADDR_VAR 0 2
62591: PUSH
62592: LD_VAR 0 3
62596: ST_TO_ADDR
// end ;
62597: LD_VAR 0 2
62601: RET
// export function ComExitAll ( units ) ; var i ; begin
62602: LD_INT 0
62604: PPUSH
62605: PPUSH
// if not units then
62606: LD_VAR 0 1
62610: NOT
62611: IFFALSE 62615
// exit ;
62613: GO 62641
// for i in units do
62615: LD_ADDR_VAR 0 3
62619: PUSH
62620: LD_VAR 0 1
62624: PUSH
62625: FOR_IN
62626: IFFALSE 62639
// ComExit ( i ) ;
62628: LD_VAR 0 3
62632: PPUSH
62633: CALL 62519 0 1
62637: GO 62625
62639: POP
62640: POP
// end ;
62641: LD_VAR 0 2
62645: RET
// export function ResetHc ; begin
62646: LD_INT 0
62648: PPUSH
// InitHc ;
62649: CALL_OW 19
// hc_importance := 0 ;
62653: LD_ADDR_OWVAR 32
62657: PUSH
62658: LD_INT 0
62660: ST_TO_ADDR
// end ;
62661: LD_VAR 0 1
62665: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62666: LD_INT 0
62668: PPUSH
62669: PPUSH
62670: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62671: LD_ADDR_VAR 0 6
62675: PUSH
62676: LD_VAR 0 1
62680: PUSH
62681: LD_VAR 0 3
62685: PLUS
62686: PUSH
62687: LD_INT 2
62689: DIV
62690: ST_TO_ADDR
// if _x < 0 then
62691: LD_VAR 0 6
62695: PUSH
62696: LD_INT 0
62698: LESS
62699: IFFALSE 62716
// _x := _x * - 1 ;
62701: LD_ADDR_VAR 0 6
62705: PUSH
62706: LD_VAR 0 6
62710: PUSH
62711: LD_INT 1
62713: NEG
62714: MUL
62715: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62716: LD_ADDR_VAR 0 7
62720: PUSH
62721: LD_VAR 0 2
62725: PUSH
62726: LD_VAR 0 4
62730: PLUS
62731: PUSH
62732: LD_INT 2
62734: DIV
62735: ST_TO_ADDR
// if _y < 0 then
62736: LD_VAR 0 7
62740: PUSH
62741: LD_INT 0
62743: LESS
62744: IFFALSE 62761
// _y := _y * - 1 ;
62746: LD_ADDR_VAR 0 7
62750: PUSH
62751: LD_VAR 0 7
62755: PUSH
62756: LD_INT 1
62758: NEG
62759: MUL
62760: ST_TO_ADDR
// result := [ _x , _y ] ;
62761: LD_ADDR_VAR 0 5
62765: PUSH
62766: LD_VAR 0 6
62770: PUSH
62771: LD_VAR 0 7
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: ST_TO_ADDR
// end ;
62780: LD_VAR 0 5
62784: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62785: LD_INT 0
62787: PPUSH
62788: PPUSH
62789: PPUSH
62790: PPUSH
// task := GetTaskList ( unit ) ;
62791: LD_ADDR_VAR 0 7
62795: PUSH
62796: LD_VAR 0 1
62800: PPUSH
62801: CALL_OW 437
62805: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62806: LD_VAR 0 7
62810: NOT
62811: PUSH
62812: LD_VAR 0 1
62816: PPUSH
62817: LD_VAR 0 2
62821: PPUSH
62822: CALL_OW 308
62826: NOT
62827: AND
62828: IFFALSE 62832
// exit ;
62830: GO 62950
// if IsInArea ( unit , area ) then
62832: LD_VAR 0 1
62836: PPUSH
62837: LD_VAR 0 2
62841: PPUSH
62842: CALL_OW 308
62846: IFFALSE 62864
// begin ComMoveToArea ( unit , goAway ) ;
62848: LD_VAR 0 1
62852: PPUSH
62853: LD_VAR 0 3
62857: PPUSH
62858: CALL_OW 113
// exit ;
62862: GO 62950
// end ; if task [ 1 ] [ 1 ] <> M then
62864: LD_VAR 0 7
62868: PUSH
62869: LD_INT 1
62871: ARRAY
62872: PUSH
62873: LD_INT 1
62875: ARRAY
62876: PUSH
62877: LD_STRING M
62879: NONEQUAL
62880: IFFALSE 62884
// exit ;
62882: GO 62950
// x := task [ 1 ] [ 2 ] ;
62884: LD_ADDR_VAR 0 5
62888: PUSH
62889: LD_VAR 0 7
62893: PUSH
62894: LD_INT 1
62896: ARRAY
62897: PUSH
62898: LD_INT 2
62900: ARRAY
62901: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62902: LD_ADDR_VAR 0 6
62906: PUSH
62907: LD_VAR 0 7
62911: PUSH
62912: LD_INT 1
62914: ARRAY
62915: PUSH
62916: LD_INT 3
62918: ARRAY
62919: ST_TO_ADDR
// if InArea ( x , y , area ) then
62920: LD_VAR 0 5
62924: PPUSH
62925: LD_VAR 0 6
62929: PPUSH
62930: LD_VAR 0 2
62934: PPUSH
62935: CALL_OW 309
62939: IFFALSE 62950
// ComStop ( unit ) ;
62941: LD_VAR 0 1
62945: PPUSH
62946: CALL_OW 141
// end ;
62950: LD_VAR 0 4
62954: RET
// export function Abs ( value ) ; begin
62955: LD_INT 0
62957: PPUSH
// result := value ;
62958: LD_ADDR_VAR 0 2
62962: PUSH
62963: LD_VAR 0 1
62967: ST_TO_ADDR
// if value < 0 then
62968: LD_VAR 0 1
62972: PUSH
62973: LD_INT 0
62975: LESS
62976: IFFALSE 62993
// result := value * - 1 ;
62978: LD_ADDR_VAR 0 2
62982: PUSH
62983: LD_VAR 0 1
62987: PUSH
62988: LD_INT 1
62990: NEG
62991: MUL
62992: ST_TO_ADDR
// end ;
62993: LD_VAR 0 2
62997: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62998: LD_INT 0
63000: PPUSH
63001: PPUSH
63002: PPUSH
63003: PPUSH
63004: PPUSH
63005: PPUSH
63006: PPUSH
63007: PPUSH
// if not unit or not building then
63008: LD_VAR 0 1
63012: NOT
63013: PUSH
63014: LD_VAR 0 2
63018: NOT
63019: OR
63020: IFFALSE 63024
// exit ;
63022: GO 63250
// x := GetX ( building ) ;
63024: LD_ADDR_VAR 0 4
63028: PUSH
63029: LD_VAR 0 2
63033: PPUSH
63034: CALL_OW 250
63038: ST_TO_ADDR
// y := GetY ( building ) ;
63039: LD_ADDR_VAR 0 6
63043: PUSH
63044: LD_VAR 0 2
63048: PPUSH
63049: CALL_OW 251
63053: ST_TO_ADDR
// d := GetDir ( building ) ;
63054: LD_ADDR_VAR 0 8
63058: PUSH
63059: LD_VAR 0 2
63063: PPUSH
63064: CALL_OW 254
63068: ST_TO_ADDR
// r := 4 ;
63069: LD_ADDR_VAR 0 9
63073: PUSH
63074: LD_INT 4
63076: ST_TO_ADDR
// for i := 1 to 5 do
63077: LD_ADDR_VAR 0 10
63081: PUSH
63082: DOUBLE
63083: LD_INT 1
63085: DEC
63086: ST_TO_ADDR
63087: LD_INT 5
63089: PUSH
63090: FOR_TO
63091: IFFALSE 63248
// begin _x := ShiftX ( x , d , r + i ) ;
63093: LD_ADDR_VAR 0 5
63097: PUSH
63098: LD_VAR 0 4
63102: PPUSH
63103: LD_VAR 0 8
63107: PPUSH
63108: LD_VAR 0 9
63112: PUSH
63113: LD_VAR 0 10
63117: PLUS
63118: PPUSH
63119: CALL_OW 272
63123: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63124: LD_ADDR_VAR 0 7
63128: PUSH
63129: LD_VAR 0 6
63133: PPUSH
63134: LD_VAR 0 8
63138: PPUSH
63139: LD_VAR 0 9
63143: PUSH
63144: LD_VAR 0 10
63148: PLUS
63149: PPUSH
63150: CALL_OW 273
63154: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63155: LD_VAR 0 5
63159: PPUSH
63160: LD_VAR 0 7
63164: PPUSH
63165: CALL_OW 488
63169: PUSH
63170: LD_VAR 0 5
63174: PPUSH
63175: LD_VAR 0 7
63179: PPUSH
63180: CALL_OW 428
63184: PPUSH
63185: CALL_OW 247
63189: PUSH
63190: LD_INT 3
63192: PUSH
63193: LD_INT 2
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: IN
63200: NOT
63201: AND
63202: IFFALSE 63246
// begin ComMoveXY ( unit , _x , _y ) ;
63204: LD_VAR 0 1
63208: PPUSH
63209: LD_VAR 0 5
63213: PPUSH
63214: LD_VAR 0 7
63218: PPUSH
63219: CALL_OW 111
// result := [ _x , _y ] ;
63223: LD_ADDR_VAR 0 3
63227: PUSH
63228: LD_VAR 0 5
63232: PUSH
63233: LD_VAR 0 7
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: ST_TO_ADDR
// exit ;
63242: POP
63243: POP
63244: GO 63250
// end ; end ;
63246: GO 63090
63248: POP
63249: POP
// end ;
63250: LD_VAR 0 3
63254: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63255: LD_INT 0
63257: PPUSH
63258: PPUSH
63259: PPUSH
// result := 0 ;
63260: LD_ADDR_VAR 0 3
63264: PUSH
63265: LD_INT 0
63267: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63268: LD_VAR 0 1
63272: PUSH
63273: LD_INT 0
63275: LESS
63276: PUSH
63277: LD_VAR 0 1
63281: PUSH
63282: LD_INT 8
63284: GREATER
63285: OR
63286: PUSH
63287: LD_VAR 0 2
63291: PUSH
63292: LD_INT 0
63294: LESS
63295: OR
63296: PUSH
63297: LD_VAR 0 2
63301: PUSH
63302: LD_INT 8
63304: GREATER
63305: OR
63306: IFFALSE 63310
// exit ;
63308: GO 63385
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63310: LD_ADDR_VAR 0 4
63314: PUSH
63315: LD_INT 22
63317: PUSH
63318: LD_VAR 0 2
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PPUSH
63327: CALL_OW 69
63331: PUSH
63332: FOR_IN
63333: IFFALSE 63383
// begin un := UnitShoot ( i ) ;
63335: LD_ADDR_VAR 0 5
63339: PUSH
63340: LD_VAR 0 4
63344: PPUSH
63345: CALL_OW 504
63349: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63350: LD_VAR 0 5
63354: PPUSH
63355: CALL_OW 255
63359: PUSH
63360: LD_VAR 0 1
63364: EQUAL
63365: IFFALSE 63381
// begin result := un ;
63367: LD_ADDR_VAR 0 3
63371: PUSH
63372: LD_VAR 0 5
63376: ST_TO_ADDR
// exit ;
63377: POP
63378: POP
63379: GO 63385
// end ; end ;
63381: GO 63332
63383: POP
63384: POP
// end ;
63385: LD_VAR 0 3
63389: RET
// export function GetCargoBay ( units ) ; begin
63390: LD_INT 0
63392: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63393: LD_ADDR_VAR 0 2
63397: PUSH
63398: LD_VAR 0 1
63402: PPUSH
63403: LD_INT 2
63405: PUSH
63406: LD_INT 34
63408: PUSH
63409: LD_INT 12
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 34
63418: PUSH
63419: LD_INT 51
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 34
63428: PUSH
63429: LD_INT 32
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 34
63438: PUSH
63439: LD_EXP 60
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: PPUSH
63455: CALL_OW 72
63459: ST_TO_ADDR
// end ;
63460: LD_VAR 0 2
63464: RET
// export function Negate ( value ) ; begin
63465: LD_INT 0
63467: PPUSH
// result := not value ;
63468: LD_ADDR_VAR 0 2
63472: PUSH
63473: LD_VAR 0 1
63477: NOT
63478: ST_TO_ADDR
// end ;
63479: LD_VAR 0 2
63483: RET
// export function Inc ( value ) ; begin
63484: LD_INT 0
63486: PPUSH
// result := value + 1 ;
63487: LD_ADDR_VAR 0 2
63491: PUSH
63492: LD_VAR 0 1
63496: PUSH
63497: LD_INT 1
63499: PLUS
63500: ST_TO_ADDR
// end ;
63501: LD_VAR 0 2
63505: RET
// export function Dec ( value ) ; begin
63506: LD_INT 0
63508: PPUSH
// result := value - 1 ;
63509: LD_ADDR_VAR 0 2
63513: PUSH
63514: LD_VAR 0 1
63518: PUSH
63519: LD_INT 1
63521: MINUS
63522: ST_TO_ADDR
// end ;
63523: LD_VAR 0 2
63527: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63528: LD_INT 0
63530: PPUSH
63531: PPUSH
63532: PPUSH
63533: PPUSH
63534: PPUSH
63535: PPUSH
63536: PPUSH
63537: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63538: LD_VAR 0 1
63542: PPUSH
63543: LD_VAR 0 2
63547: PPUSH
63548: CALL_OW 488
63552: NOT
63553: PUSH
63554: LD_VAR 0 3
63558: PPUSH
63559: LD_VAR 0 4
63563: PPUSH
63564: CALL_OW 488
63568: NOT
63569: OR
63570: IFFALSE 63583
// begin result := - 1 ;
63572: LD_ADDR_VAR 0 5
63576: PUSH
63577: LD_INT 1
63579: NEG
63580: ST_TO_ADDR
// exit ;
63581: GO 63818
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63583: LD_ADDR_VAR 0 12
63587: PUSH
63588: LD_VAR 0 1
63592: PPUSH
63593: LD_VAR 0 2
63597: PPUSH
63598: LD_VAR 0 3
63602: PPUSH
63603: LD_VAR 0 4
63607: PPUSH
63608: CALL 62666 0 4
63612: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63613: LD_ADDR_VAR 0 11
63617: PUSH
63618: LD_VAR 0 1
63622: PPUSH
63623: LD_VAR 0 2
63627: PPUSH
63628: LD_VAR 0 12
63632: PUSH
63633: LD_INT 1
63635: ARRAY
63636: PPUSH
63637: LD_VAR 0 12
63641: PUSH
63642: LD_INT 2
63644: ARRAY
63645: PPUSH
63646: CALL_OW 298
63650: ST_TO_ADDR
// distance := 9999 ;
63651: LD_ADDR_VAR 0 10
63655: PUSH
63656: LD_INT 9999
63658: ST_TO_ADDR
// for i := 0 to 5 do
63659: LD_ADDR_VAR 0 6
63663: PUSH
63664: DOUBLE
63665: LD_INT 0
63667: DEC
63668: ST_TO_ADDR
63669: LD_INT 5
63671: PUSH
63672: FOR_TO
63673: IFFALSE 63816
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63675: LD_ADDR_VAR 0 7
63679: PUSH
63680: LD_VAR 0 1
63684: PPUSH
63685: LD_VAR 0 6
63689: PPUSH
63690: LD_VAR 0 11
63694: PPUSH
63695: CALL_OW 272
63699: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63700: LD_ADDR_VAR 0 8
63704: PUSH
63705: LD_VAR 0 2
63709: PPUSH
63710: LD_VAR 0 6
63714: PPUSH
63715: LD_VAR 0 11
63719: PPUSH
63720: CALL_OW 273
63724: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63725: LD_VAR 0 7
63729: PPUSH
63730: LD_VAR 0 8
63734: PPUSH
63735: CALL_OW 488
63739: NOT
63740: IFFALSE 63744
// continue ;
63742: GO 63672
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63744: LD_ADDR_VAR 0 9
63748: PUSH
63749: LD_VAR 0 12
63753: PUSH
63754: LD_INT 1
63756: ARRAY
63757: PPUSH
63758: LD_VAR 0 12
63762: PUSH
63763: LD_INT 2
63765: ARRAY
63766: PPUSH
63767: LD_VAR 0 7
63771: PPUSH
63772: LD_VAR 0 8
63776: PPUSH
63777: CALL_OW 298
63781: ST_TO_ADDR
// if tmp < distance then
63782: LD_VAR 0 9
63786: PUSH
63787: LD_VAR 0 10
63791: LESS
63792: IFFALSE 63814
// begin result := i ;
63794: LD_ADDR_VAR 0 5
63798: PUSH
63799: LD_VAR 0 6
63803: ST_TO_ADDR
// distance := tmp ;
63804: LD_ADDR_VAR 0 10
63808: PUSH
63809: LD_VAR 0 9
63813: ST_TO_ADDR
// end ; end ;
63814: GO 63672
63816: POP
63817: POP
// end ;
63818: LD_VAR 0 5
63822: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63823: LD_INT 0
63825: PPUSH
63826: PPUSH
// if not driver or not IsInUnit ( driver ) then
63827: LD_VAR 0 1
63831: NOT
63832: PUSH
63833: LD_VAR 0 1
63837: PPUSH
63838: CALL_OW 310
63842: NOT
63843: OR
63844: IFFALSE 63848
// exit ;
63846: GO 63938
// vehicle := IsInUnit ( driver ) ;
63848: LD_ADDR_VAR 0 3
63852: PUSH
63853: LD_VAR 0 1
63857: PPUSH
63858: CALL_OW 310
63862: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63863: LD_VAR 0 1
63867: PPUSH
63868: LD_STRING \
63870: PUSH
63871: LD_INT 0
63873: PUSH
63874: LD_INT 0
63876: PUSH
63877: LD_INT 0
63879: PUSH
63880: LD_INT 0
63882: PUSH
63883: LD_INT 0
63885: PUSH
63886: LD_INT 0
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: PUSH
63898: LD_STRING E
63900: PUSH
63901: LD_INT 0
63903: PUSH
63904: LD_INT 0
63906: PUSH
63907: LD_VAR 0 3
63911: PUSH
63912: LD_INT 0
63914: PUSH
63915: LD_INT 0
63917: PUSH
63918: LD_INT 0
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PPUSH
63934: CALL_OW 446
// end ;
63938: LD_VAR 0 2
63942: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63943: LD_INT 0
63945: PPUSH
63946: PPUSH
// if not driver or not IsInUnit ( driver ) then
63947: LD_VAR 0 1
63951: NOT
63952: PUSH
63953: LD_VAR 0 1
63957: PPUSH
63958: CALL_OW 310
63962: NOT
63963: OR
63964: IFFALSE 63968
// exit ;
63966: GO 64058
// vehicle := IsInUnit ( driver ) ;
63968: LD_ADDR_VAR 0 3
63972: PUSH
63973: LD_VAR 0 1
63977: PPUSH
63978: CALL_OW 310
63982: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63983: LD_VAR 0 1
63987: PPUSH
63988: LD_STRING \
63990: PUSH
63991: LD_INT 0
63993: PUSH
63994: LD_INT 0
63996: PUSH
63997: LD_INT 0
63999: PUSH
64000: LD_INT 0
64002: PUSH
64003: LD_INT 0
64005: PUSH
64006: LD_INT 0
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: PUSH
64018: LD_STRING E
64020: PUSH
64021: LD_INT 0
64023: PUSH
64024: LD_INT 0
64026: PUSH
64027: LD_VAR 0 3
64031: PUSH
64032: LD_INT 0
64034: PUSH
64035: LD_INT 0
64037: PUSH
64038: LD_INT 0
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PPUSH
64054: CALL_OW 447
// end ;
64058: LD_VAR 0 2
64062: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64063: LD_INT 0
64065: PPUSH
64066: PPUSH
64067: PPUSH
// tmp := [ ] ;
64068: LD_ADDR_VAR 0 5
64072: PUSH
64073: EMPTY
64074: ST_TO_ADDR
// for i in units do
64075: LD_ADDR_VAR 0 4
64079: PUSH
64080: LD_VAR 0 1
64084: PUSH
64085: FOR_IN
64086: IFFALSE 64124
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64088: LD_ADDR_VAR 0 5
64092: PUSH
64093: LD_VAR 0 5
64097: PPUSH
64098: LD_VAR 0 5
64102: PUSH
64103: LD_INT 1
64105: PLUS
64106: PPUSH
64107: LD_VAR 0 4
64111: PPUSH
64112: CALL_OW 256
64116: PPUSH
64117: CALL_OW 2
64121: ST_TO_ADDR
64122: GO 64085
64124: POP
64125: POP
// if not tmp then
64126: LD_VAR 0 5
64130: NOT
64131: IFFALSE 64135
// exit ;
64133: GO 64183
// if asc then
64135: LD_VAR 0 2
64139: IFFALSE 64163
// result := SortListByListAsc ( units , tmp ) else
64141: LD_ADDR_VAR 0 3
64145: PUSH
64146: LD_VAR 0 1
64150: PPUSH
64151: LD_VAR 0 5
64155: PPUSH
64156: CALL_OW 76
64160: ST_TO_ADDR
64161: GO 64183
// result := SortListByListDesc ( units , tmp ) ;
64163: LD_ADDR_VAR 0 3
64167: PUSH
64168: LD_VAR 0 1
64172: PPUSH
64173: LD_VAR 0 5
64177: PPUSH
64178: CALL_OW 77
64182: ST_TO_ADDR
// end ;
64183: LD_VAR 0 3
64187: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64188: LD_INT 0
64190: PPUSH
64191: PPUSH
// task := GetTaskList ( mech ) ;
64192: LD_ADDR_VAR 0 4
64196: PUSH
64197: LD_VAR 0 1
64201: PPUSH
64202: CALL_OW 437
64206: ST_TO_ADDR
// if not task then
64207: LD_VAR 0 4
64211: NOT
64212: IFFALSE 64216
// exit ;
64214: GO 64258
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64216: LD_ADDR_VAR 0 3
64220: PUSH
64221: LD_VAR 0 4
64225: PUSH
64226: LD_INT 1
64228: ARRAY
64229: PUSH
64230: LD_INT 1
64232: ARRAY
64233: PUSH
64234: LD_STRING r
64236: EQUAL
64237: PUSH
64238: LD_VAR 0 4
64242: PUSH
64243: LD_INT 1
64245: ARRAY
64246: PUSH
64247: LD_INT 4
64249: ARRAY
64250: PUSH
64251: LD_VAR 0 2
64255: EQUAL
64256: AND
64257: ST_TO_ADDR
// end ;
64258: LD_VAR 0 3
64262: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64263: LD_INT 0
64265: PPUSH
// SetDir ( unit , d ) ;
64266: LD_VAR 0 1
64270: PPUSH
64271: LD_VAR 0 4
64275: PPUSH
64276: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64280: LD_VAR 0 1
64284: PPUSH
64285: LD_VAR 0 2
64289: PPUSH
64290: LD_VAR 0 3
64294: PPUSH
64295: LD_VAR 0 5
64299: PPUSH
64300: CALL_OW 48
// end ;
64304: LD_VAR 0 6
64308: RET
// export function ToNaturalNumber ( number ) ; begin
64309: LD_INT 0
64311: PPUSH
// result := number div 1 ;
64312: LD_ADDR_VAR 0 2
64316: PUSH
64317: LD_VAR 0 1
64321: PUSH
64322: LD_INT 1
64324: DIV
64325: ST_TO_ADDR
// if number < 0 then
64326: LD_VAR 0 1
64330: PUSH
64331: LD_INT 0
64333: LESS
64334: IFFALSE 64344
// result := 0 ;
64336: LD_ADDR_VAR 0 2
64340: PUSH
64341: LD_INT 0
64343: ST_TO_ADDR
// end ;
64344: LD_VAR 0 2
64348: RET
// export function SortByClass ( units , class ) ; var un ; begin
64349: LD_INT 0
64351: PPUSH
64352: PPUSH
// if not units or not class then
64353: LD_VAR 0 1
64357: NOT
64358: PUSH
64359: LD_VAR 0 2
64363: NOT
64364: OR
64365: IFFALSE 64369
// exit ;
64367: GO 64464
// result := [ ] ;
64369: LD_ADDR_VAR 0 3
64373: PUSH
64374: EMPTY
64375: ST_TO_ADDR
// for un in units do
64376: LD_ADDR_VAR 0 4
64380: PUSH
64381: LD_VAR 0 1
64385: PUSH
64386: FOR_IN
64387: IFFALSE 64462
// if GetClass ( un ) = class then
64389: LD_VAR 0 4
64393: PPUSH
64394: CALL_OW 257
64398: PUSH
64399: LD_VAR 0 2
64403: EQUAL
64404: IFFALSE 64431
// result := Insert ( result , 1 , un ) else
64406: LD_ADDR_VAR 0 3
64410: PUSH
64411: LD_VAR 0 3
64415: PPUSH
64416: LD_INT 1
64418: PPUSH
64419: LD_VAR 0 4
64423: PPUSH
64424: CALL_OW 2
64428: ST_TO_ADDR
64429: GO 64460
// result := Replace ( result , result + 1 , un ) ;
64431: LD_ADDR_VAR 0 3
64435: PUSH
64436: LD_VAR 0 3
64440: PPUSH
64441: LD_VAR 0 3
64445: PUSH
64446: LD_INT 1
64448: PLUS
64449: PPUSH
64450: LD_VAR 0 4
64454: PPUSH
64455: CALL_OW 1
64459: ST_TO_ADDR
64460: GO 64386
64462: POP
64463: POP
// end ;
64464: LD_VAR 0 3
64468: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64469: LD_INT 0
64471: PPUSH
64472: PPUSH
64473: PPUSH
64474: PPUSH
64475: PPUSH
64476: PPUSH
64477: PPUSH
// result := [ ] ;
64478: LD_ADDR_VAR 0 4
64482: PUSH
64483: EMPTY
64484: ST_TO_ADDR
// if x - r < 0 then
64485: LD_VAR 0 1
64489: PUSH
64490: LD_VAR 0 3
64494: MINUS
64495: PUSH
64496: LD_INT 0
64498: LESS
64499: IFFALSE 64511
// min_x := 0 else
64501: LD_ADDR_VAR 0 8
64505: PUSH
64506: LD_INT 0
64508: ST_TO_ADDR
64509: GO 64527
// min_x := x - r ;
64511: LD_ADDR_VAR 0 8
64515: PUSH
64516: LD_VAR 0 1
64520: PUSH
64521: LD_VAR 0 3
64525: MINUS
64526: ST_TO_ADDR
// if y - r < 0 then
64527: LD_VAR 0 2
64531: PUSH
64532: LD_VAR 0 3
64536: MINUS
64537: PUSH
64538: LD_INT 0
64540: LESS
64541: IFFALSE 64553
// min_y := 0 else
64543: LD_ADDR_VAR 0 7
64547: PUSH
64548: LD_INT 0
64550: ST_TO_ADDR
64551: GO 64569
// min_y := y - r ;
64553: LD_ADDR_VAR 0 7
64557: PUSH
64558: LD_VAR 0 2
64562: PUSH
64563: LD_VAR 0 3
64567: MINUS
64568: ST_TO_ADDR
// max_x := x + r ;
64569: LD_ADDR_VAR 0 9
64573: PUSH
64574: LD_VAR 0 1
64578: PUSH
64579: LD_VAR 0 3
64583: PLUS
64584: ST_TO_ADDR
// max_y := y + r ;
64585: LD_ADDR_VAR 0 10
64589: PUSH
64590: LD_VAR 0 2
64594: PUSH
64595: LD_VAR 0 3
64599: PLUS
64600: ST_TO_ADDR
// for _x = min_x to max_x do
64601: LD_ADDR_VAR 0 5
64605: PUSH
64606: DOUBLE
64607: LD_VAR 0 8
64611: DEC
64612: ST_TO_ADDR
64613: LD_VAR 0 9
64617: PUSH
64618: FOR_TO
64619: IFFALSE 64720
// for _y = min_y to max_y do
64621: LD_ADDR_VAR 0 6
64625: PUSH
64626: DOUBLE
64627: LD_VAR 0 7
64631: DEC
64632: ST_TO_ADDR
64633: LD_VAR 0 10
64637: PUSH
64638: FOR_TO
64639: IFFALSE 64716
// begin if not ValidHex ( _x , _y ) then
64641: LD_VAR 0 5
64645: PPUSH
64646: LD_VAR 0 6
64650: PPUSH
64651: CALL_OW 488
64655: NOT
64656: IFFALSE 64660
// continue ;
64658: GO 64638
// if GetResourceTypeXY ( _x , _y ) then
64660: LD_VAR 0 5
64664: PPUSH
64665: LD_VAR 0 6
64669: PPUSH
64670: CALL_OW 283
64674: IFFALSE 64714
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64676: LD_ADDR_VAR 0 4
64680: PUSH
64681: LD_VAR 0 4
64685: PPUSH
64686: LD_VAR 0 4
64690: PUSH
64691: LD_INT 1
64693: PLUS
64694: PPUSH
64695: LD_VAR 0 5
64699: PUSH
64700: LD_VAR 0 6
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PPUSH
64709: CALL_OW 1
64713: ST_TO_ADDR
// end ;
64714: GO 64638
64716: POP
64717: POP
64718: GO 64618
64720: POP
64721: POP
// end ;
64722: LD_VAR 0 4
64726: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64727: LD_INT 0
64729: PPUSH
64730: PPUSH
64731: PPUSH
64732: PPUSH
64733: PPUSH
64734: PPUSH
64735: PPUSH
64736: PPUSH
// if not units then
64737: LD_VAR 0 1
64741: NOT
64742: IFFALSE 64746
// exit ;
64744: GO 65272
// result := UnitFilter ( units , [ f_ok ] ) ;
64746: LD_ADDR_VAR 0 3
64750: PUSH
64751: LD_VAR 0 1
64755: PPUSH
64756: LD_INT 50
64758: PUSH
64759: EMPTY
64760: LIST
64761: PPUSH
64762: CALL_OW 72
64766: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64767: LD_ADDR_VAR 0 8
64771: PUSH
64772: LD_VAR 0 1
64776: PUSH
64777: LD_INT 1
64779: ARRAY
64780: PPUSH
64781: CALL_OW 255
64785: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
64786: LD_ADDR_VAR 0 10
64790: PUSH
64791: LD_INT 29
64793: PUSH
64794: LD_EXP 63
64798: PUSH
64799: LD_INT 49
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: LIST
64806: ST_TO_ADDR
// if not result then
64807: LD_VAR 0 3
64811: NOT
64812: IFFALSE 64816
// exit ;
64814: GO 65272
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64816: LD_ADDR_VAR 0 5
64820: PUSH
64821: LD_INT 81
64823: PUSH
64824: LD_VAR 0 8
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PPUSH
64833: CALL_OW 69
64837: ST_TO_ADDR
// for i in result do
64838: LD_ADDR_VAR 0 4
64842: PUSH
64843: LD_VAR 0 3
64847: PUSH
64848: FOR_IN
64849: IFFALSE 65270
// begin tag := GetTag ( i ) + 1 ;
64851: LD_ADDR_VAR 0 9
64855: PUSH
64856: LD_VAR 0 4
64860: PPUSH
64861: CALL_OW 110
64865: PUSH
64866: LD_INT 1
64868: PLUS
64869: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64870: LD_ADDR_VAR 0 7
64874: PUSH
64875: LD_VAR 0 4
64879: PPUSH
64880: CALL_OW 250
64884: PPUSH
64885: LD_VAR 0 4
64889: PPUSH
64890: CALL_OW 251
64894: PPUSH
64895: LD_INT 6
64897: PPUSH
64898: CALL 64469 0 3
64902: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64903: LD_VAR 0 4
64907: PPUSH
64908: CALL_OW 247
64912: PUSH
64913: LD_INT 2
64915: EQUAL
64916: PUSH
64917: LD_VAR 0 7
64921: AND
64922: PUSH
64923: LD_VAR 0 4
64927: PPUSH
64928: CALL_OW 264
64932: PUSH
64933: LD_VAR 0 10
64937: IN
64938: NOT
64939: AND
64940: IFFALSE 64979
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64942: LD_VAR 0 4
64946: PPUSH
64947: LD_VAR 0 7
64951: PUSH
64952: LD_INT 1
64954: ARRAY
64955: PUSH
64956: LD_INT 1
64958: ARRAY
64959: PPUSH
64960: LD_VAR 0 7
64964: PUSH
64965: LD_INT 1
64967: ARRAY
64968: PUSH
64969: LD_INT 2
64971: ARRAY
64972: PPUSH
64973: CALL_OW 116
64977: GO 65268
// if path > tag then
64979: LD_VAR 0 2
64983: PUSH
64984: LD_VAR 0 9
64988: GREATER
64989: IFFALSE 65197
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
64991: LD_ADDR_VAR 0 6
64995: PUSH
64996: LD_VAR 0 5
65000: PPUSH
65001: LD_INT 91
65003: PUSH
65004: LD_VAR 0 4
65008: PUSH
65009: LD_INT 8
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: LIST
65016: PPUSH
65017: CALL_OW 72
65021: ST_TO_ADDR
// if nearEnemy then
65022: LD_VAR 0 6
65026: IFFALSE 65095
// begin if GetWeapon ( i ) = ru_time_lapser then
65028: LD_VAR 0 4
65032: PPUSH
65033: CALL_OW 264
65037: PUSH
65038: LD_INT 49
65040: EQUAL
65041: IFFALSE 65069
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65043: LD_VAR 0 4
65047: PPUSH
65048: LD_VAR 0 6
65052: PPUSH
65053: LD_VAR 0 4
65057: PPUSH
65058: CALL_OW 74
65062: PPUSH
65063: CALL_OW 112
65067: GO 65093
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65069: LD_VAR 0 4
65073: PPUSH
65074: LD_VAR 0 6
65078: PPUSH
65079: LD_VAR 0 4
65083: PPUSH
65084: CALL_OW 74
65088: PPUSH
65089: CALL_OW 115
// end else
65093: GO 65195
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65095: LD_VAR 0 4
65099: PPUSH
65100: LD_VAR 0 2
65104: PUSH
65105: LD_VAR 0 9
65109: ARRAY
65110: PUSH
65111: LD_INT 1
65113: ARRAY
65114: PPUSH
65115: LD_VAR 0 2
65119: PUSH
65120: LD_VAR 0 9
65124: ARRAY
65125: PUSH
65126: LD_INT 2
65128: ARRAY
65129: PPUSH
65130: CALL_OW 297
65134: PUSH
65135: LD_INT 6
65137: GREATER
65138: IFFALSE 65181
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65140: LD_VAR 0 4
65144: PPUSH
65145: LD_VAR 0 2
65149: PUSH
65150: LD_VAR 0 9
65154: ARRAY
65155: PUSH
65156: LD_INT 1
65158: ARRAY
65159: PPUSH
65160: LD_VAR 0 2
65164: PUSH
65165: LD_VAR 0 9
65169: ARRAY
65170: PUSH
65171: LD_INT 2
65173: ARRAY
65174: PPUSH
65175: CALL_OW 114
65179: GO 65195
// SetTag ( i , tag ) ;
65181: LD_VAR 0 4
65185: PPUSH
65186: LD_VAR 0 9
65190: PPUSH
65191: CALL_OW 109
// end else
65195: GO 65268
// if enemy then
65197: LD_VAR 0 5
65201: IFFALSE 65268
// begin if GetWeapon ( i ) = ru_time_lapser then
65203: LD_VAR 0 4
65207: PPUSH
65208: CALL_OW 264
65212: PUSH
65213: LD_INT 49
65215: EQUAL
65216: IFFALSE 65244
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65218: LD_VAR 0 4
65222: PPUSH
65223: LD_VAR 0 5
65227: PPUSH
65228: LD_VAR 0 4
65232: PPUSH
65233: CALL_OW 74
65237: PPUSH
65238: CALL_OW 112
65242: GO 65268
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65244: LD_VAR 0 4
65248: PPUSH
65249: LD_VAR 0 5
65253: PPUSH
65254: LD_VAR 0 4
65258: PPUSH
65259: CALL_OW 74
65263: PPUSH
65264: CALL_OW 115
// end ; end ;
65268: GO 64848
65270: POP
65271: POP
// end ;
65272: LD_VAR 0 3
65276: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65277: LD_INT 0
65279: PPUSH
65280: PPUSH
65281: PPUSH
// if not unit or IsInUnit ( unit ) then
65282: LD_VAR 0 1
65286: NOT
65287: PUSH
65288: LD_VAR 0 1
65292: PPUSH
65293: CALL_OW 310
65297: OR
65298: IFFALSE 65302
// exit ;
65300: GO 65393
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65302: LD_ADDR_VAR 0 4
65306: PUSH
65307: LD_VAR 0 1
65311: PPUSH
65312: CALL_OW 250
65316: PPUSH
65317: LD_VAR 0 2
65321: PPUSH
65322: LD_INT 1
65324: PPUSH
65325: CALL_OW 272
65329: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65330: LD_ADDR_VAR 0 5
65334: PUSH
65335: LD_VAR 0 1
65339: PPUSH
65340: CALL_OW 251
65344: PPUSH
65345: LD_VAR 0 2
65349: PPUSH
65350: LD_INT 1
65352: PPUSH
65353: CALL_OW 273
65357: ST_TO_ADDR
// if ValidHex ( x , y ) then
65358: LD_VAR 0 4
65362: PPUSH
65363: LD_VAR 0 5
65367: PPUSH
65368: CALL_OW 488
65372: IFFALSE 65393
// ComTurnXY ( unit , x , y ) ;
65374: LD_VAR 0 1
65378: PPUSH
65379: LD_VAR 0 4
65383: PPUSH
65384: LD_VAR 0 5
65388: PPUSH
65389: CALL_OW 118
// end ;
65393: LD_VAR 0 3
65397: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65398: LD_INT 0
65400: PPUSH
65401: PPUSH
// result := false ;
65402: LD_ADDR_VAR 0 3
65406: PUSH
65407: LD_INT 0
65409: ST_TO_ADDR
// if not units then
65410: LD_VAR 0 2
65414: NOT
65415: IFFALSE 65419
// exit ;
65417: GO 65464
// for i in units do
65419: LD_ADDR_VAR 0 4
65423: PUSH
65424: LD_VAR 0 2
65428: PUSH
65429: FOR_IN
65430: IFFALSE 65462
// if See ( side , i ) then
65432: LD_VAR 0 1
65436: PPUSH
65437: LD_VAR 0 4
65441: PPUSH
65442: CALL_OW 292
65446: IFFALSE 65460
// begin result := true ;
65448: LD_ADDR_VAR 0 3
65452: PUSH
65453: LD_INT 1
65455: ST_TO_ADDR
// exit ;
65456: POP
65457: POP
65458: GO 65464
// end ;
65460: GO 65429
65462: POP
65463: POP
// end ;
65464: LD_VAR 0 3
65468: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65469: LD_INT 0
65471: PPUSH
65472: PPUSH
65473: PPUSH
65474: PPUSH
// if not unit or not points then
65475: LD_VAR 0 1
65479: NOT
65480: PUSH
65481: LD_VAR 0 2
65485: NOT
65486: OR
65487: IFFALSE 65491
// exit ;
65489: GO 65581
// dist := 99999 ;
65491: LD_ADDR_VAR 0 5
65495: PUSH
65496: LD_INT 99999
65498: ST_TO_ADDR
// for i in points do
65499: LD_ADDR_VAR 0 4
65503: PUSH
65504: LD_VAR 0 2
65508: PUSH
65509: FOR_IN
65510: IFFALSE 65579
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65512: LD_ADDR_VAR 0 6
65516: PUSH
65517: LD_VAR 0 1
65521: PPUSH
65522: LD_VAR 0 4
65526: PUSH
65527: LD_INT 1
65529: ARRAY
65530: PPUSH
65531: LD_VAR 0 4
65535: PUSH
65536: LD_INT 2
65538: ARRAY
65539: PPUSH
65540: CALL_OW 297
65544: ST_TO_ADDR
// if tmpDist < dist then
65545: LD_VAR 0 6
65549: PUSH
65550: LD_VAR 0 5
65554: LESS
65555: IFFALSE 65577
// begin result := i ;
65557: LD_ADDR_VAR 0 3
65561: PUSH
65562: LD_VAR 0 4
65566: ST_TO_ADDR
// dist := tmpDist ;
65567: LD_ADDR_VAR 0 5
65571: PUSH
65572: LD_VAR 0 6
65576: ST_TO_ADDR
// end ; end ;
65577: GO 65509
65579: POP
65580: POP
// end ;
65581: LD_VAR 0 3
65585: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65586: LD_INT 0
65588: PPUSH
// uc_side := side ;
65589: LD_ADDR_OWVAR 20
65593: PUSH
65594: LD_VAR 0 1
65598: ST_TO_ADDR
// uc_nation := 3 ;
65599: LD_ADDR_OWVAR 21
65603: PUSH
65604: LD_INT 3
65606: ST_TO_ADDR
// vc_chassis := 25 ;
65607: LD_ADDR_OWVAR 37
65611: PUSH
65612: LD_INT 25
65614: ST_TO_ADDR
// vc_engine := engine_siberite ;
65615: LD_ADDR_OWVAR 39
65619: PUSH
65620: LD_INT 3
65622: ST_TO_ADDR
// vc_control := control_computer ;
65623: LD_ADDR_OWVAR 38
65627: PUSH
65628: LD_INT 3
65630: ST_TO_ADDR
// vc_weapon := 59 ;
65631: LD_ADDR_OWVAR 40
65635: PUSH
65636: LD_INT 59
65638: ST_TO_ADDR
// result := CreateVehicle ;
65639: LD_ADDR_VAR 0 5
65643: PUSH
65644: CALL_OW 45
65648: ST_TO_ADDR
// SetDir ( result , d ) ;
65649: LD_VAR 0 5
65653: PPUSH
65654: LD_VAR 0 4
65658: PPUSH
65659: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65663: LD_VAR 0 5
65667: PPUSH
65668: LD_VAR 0 2
65672: PPUSH
65673: LD_VAR 0 3
65677: PPUSH
65678: LD_INT 0
65680: PPUSH
65681: CALL_OW 48
// end ;
65685: LD_VAR 0 5
65689: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65690: LD_INT 0
65692: PPUSH
65693: PPUSH
65694: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65695: LD_ADDR_VAR 0 2
65699: PUSH
65700: LD_INT 0
65702: PUSH
65703: LD_INT 0
65705: PUSH
65706: LD_INT 0
65708: PUSH
65709: LD_INT 0
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65718: LD_VAR 0 1
65722: NOT
65723: PUSH
65724: LD_VAR 0 1
65728: PPUSH
65729: CALL_OW 264
65733: PUSH
65734: LD_INT 12
65736: PUSH
65737: LD_INT 51
65739: PUSH
65740: LD_INT 32
65742: PUSH
65743: LD_EXP 60
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: IN
65754: NOT
65755: OR
65756: IFFALSE 65760
// exit ;
65758: GO 65858
// for i := 1 to 3 do
65760: LD_ADDR_VAR 0 3
65764: PUSH
65765: DOUBLE
65766: LD_INT 1
65768: DEC
65769: ST_TO_ADDR
65770: LD_INT 3
65772: PUSH
65773: FOR_TO
65774: IFFALSE 65856
// begin tmp := GetCargo ( cargo , i ) ;
65776: LD_ADDR_VAR 0 4
65780: PUSH
65781: LD_VAR 0 1
65785: PPUSH
65786: LD_VAR 0 3
65790: PPUSH
65791: CALL_OW 289
65795: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65796: LD_ADDR_VAR 0 2
65800: PUSH
65801: LD_VAR 0 2
65805: PPUSH
65806: LD_VAR 0 3
65810: PPUSH
65811: LD_VAR 0 4
65815: PPUSH
65816: CALL_OW 1
65820: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65821: LD_ADDR_VAR 0 2
65825: PUSH
65826: LD_VAR 0 2
65830: PPUSH
65831: LD_INT 4
65833: PPUSH
65834: LD_VAR 0 2
65838: PUSH
65839: LD_INT 4
65841: ARRAY
65842: PUSH
65843: LD_VAR 0 4
65847: PLUS
65848: PPUSH
65849: CALL_OW 1
65853: ST_TO_ADDR
// end ;
65854: GO 65773
65856: POP
65857: POP
// end ;
65858: LD_VAR 0 2
65862: RET
// export function Length ( array ) ; begin
65863: LD_INT 0
65865: PPUSH
// result := array + 0 ;
65866: LD_ADDR_VAR 0 2
65870: PUSH
65871: LD_VAR 0 1
65875: PUSH
65876: LD_INT 0
65878: PLUS
65879: ST_TO_ADDR
// end ; end_of_file
65880: LD_VAR 0 2
65884: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
65885: LD_INT 0
65887: PPUSH
// ar_miner := 81 ;
65888: LD_ADDR_EXP 66
65892: PUSH
65893: LD_INT 81
65895: ST_TO_ADDR
// ar_crane := 88 ;
65896: LD_ADDR_EXP 65
65900: PUSH
65901: LD_INT 88
65903: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
65904: LD_ADDR_EXP 60
65908: PUSH
65909: LD_INT 89
65911: ST_TO_ADDR
// us_hack := 99 ;
65912: LD_ADDR_EXP 61
65916: PUSH
65917: LD_INT 99
65919: ST_TO_ADDR
// us_artillery := 97 ;
65920: LD_ADDR_EXP 62
65924: PUSH
65925: LD_INT 97
65927: ST_TO_ADDR
// ar_bio_bomb := 91 ;
65928: LD_ADDR_EXP 63
65932: PUSH
65933: LD_INT 91
65935: ST_TO_ADDR
// ar_mortar := 92 ;
65936: LD_ADDR_EXP 64
65940: PUSH
65941: LD_INT 92
65943: ST_TO_ADDR
// ru_flamethrower := 93 ;
65944: LD_ADDR_EXP 67
65948: PUSH
65949: LD_INT 93
65951: ST_TO_ADDR
// ru_radar := 98 ;
65952: LD_ADDR_EXP 59
65956: PUSH
65957: LD_INT 98
65959: ST_TO_ADDR
// tech_Artillery := 80 ;
65960: LD_ADDR_EXP 68
65964: PUSH
65965: LD_INT 80
65967: ST_TO_ADDR
// tech_RadMat := 81 ;
65968: LD_ADDR_EXP 69
65972: PUSH
65973: LD_INT 81
65975: ST_TO_ADDR
// tech_BasicTools := 82 ;
65976: LD_ADDR_EXP 70
65980: PUSH
65981: LD_INT 82
65983: ST_TO_ADDR
// tech_Cargo := 83 ;
65984: LD_ADDR_EXP 71
65988: PUSH
65989: LD_INT 83
65991: ST_TO_ADDR
// tech_Track := 84 ;
65992: LD_ADDR_EXP 72
65996: PUSH
65997: LD_INT 84
65999: ST_TO_ADDR
// tech_Crane := 85 ;
66000: LD_ADDR_EXP 73
66004: PUSH
66005: LD_INT 85
66007: ST_TO_ADDR
// tech_Bulldozer := 86 ;
66008: LD_ADDR_EXP 74
66012: PUSH
66013: LD_INT 86
66015: ST_TO_ADDR
// tech_Hovercraft := 87 ;
66016: LD_ADDR_EXP 75
66020: PUSH
66021: LD_INT 87
66023: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
66024: LD_ADDR_EXP 76
66028: PUSH
66029: LD_INT 88
66031: ST_TO_ADDR
// class_mastodont := 31 ;
66032: LD_ADDR_EXP 77
66036: PUSH
66037: LD_INT 31
66039: ST_TO_ADDR
// class_horse := 21 ;
66040: LD_ADDR_EXP 78
66044: PUSH
66045: LD_INT 21
66047: ST_TO_ADDR
// end ;
66048: LD_VAR 0 1
66052: RET
// every 1 do
66053: GO 66055
66055: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
66056: CALL 65885 0 0
66060: END
// every 0 0$1 do
66061: GO 66063
66063: DISABLE
// begin enable ;
66064: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
66065: LD_STRING updateTimer(
66067: PUSH
66068: LD_OWVAR 1
66072: STR
66073: PUSH
66074: LD_STRING );
66076: STR
66077: PPUSH
66078: CALL_OW 559
// end ;
66082: END
// export function SOS_MapStart ( ) ; begin
66083: LD_INT 0
66085: PPUSH
// if streamModeActive then
66086: LD_EXP 79
66090: IFFALSE 66099
// DefineStreamItems ( true ) ;
66092: LD_INT 1
66094: PPUSH
66095: CALL 67749 0 1
// UpdateFactoryWaypoints ( ) ;
66099: CALL 81496 0 0
// end ;
66103: LD_VAR 0 1
66107: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
66108: LD_INT 0
66110: PPUSH
// if p2 = 100 then
66111: LD_VAR 0 2
66115: PUSH
66116: LD_INT 100
66118: EQUAL
66119: IFFALSE 67122
// begin if not StreamModeActive then
66121: LD_EXP 79
66125: NOT
66126: IFFALSE 66136
// StreamModeActive := true ;
66128: LD_ADDR_EXP 79
66132: PUSH
66133: LD_INT 1
66135: ST_TO_ADDR
// if p3 = 0 then
66136: LD_VAR 0 3
66140: PUSH
66141: LD_INT 0
66143: EQUAL
66144: IFFALSE 66150
// InitStreamMode ;
66146: CALL 67285 0 0
// if p3 = 1 then
66150: LD_VAR 0 3
66154: PUSH
66155: LD_INT 1
66157: EQUAL
66158: IFFALSE 66168
// sRocket := true ;
66160: LD_ADDR_EXP 84
66164: PUSH
66165: LD_INT 1
66167: ST_TO_ADDR
// if p3 = 2 then
66168: LD_VAR 0 3
66172: PUSH
66173: LD_INT 2
66175: EQUAL
66176: IFFALSE 66186
// sSpeed := true ;
66178: LD_ADDR_EXP 83
66182: PUSH
66183: LD_INT 1
66185: ST_TO_ADDR
// if p3 = 3 then
66186: LD_VAR 0 3
66190: PUSH
66191: LD_INT 3
66193: EQUAL
66194: IFFALSE 66204
// sEngine := true ;
66196: LD_ADDR_EXP 85
66200: PUSH
66201: LD_INT 1
66203: ST_TO_ADDR
// if p3 = 4 then
66204: LD_VAR 0 3
66208: PUSH
66209: LD_INT 4
66211: EQUAL
66212: IFFALSE 66222
// sSpec := true ;
66214: LD_ADDR_EXP 82
66218: PUSH
66219: LD_INT 1
66221: ST_TO_ADDR
// if p3 = 5 then
66222: LD_VAR 0 3
66226: PUSH
66227: LD_INT 5
66229: EQUAL
66230: IFFALSE 66240
// sLevel := true ;
66232: LD_ADDR_EXP 86
66236: PUSH
66237: LD_INT 1
66239: ST_TO_ADDR
// if p3 = 6 then
66240: LD_VAR 0 3
66244: PUSH
66245: LD_INT 6
66247: EQUAL
66248: IFFALSE 66258
// sArmoury := true ;
66250: LD_ADDR_EXP 87
66254: PUSH
66255: LD_INT 1
66257: ST_TO_ADDR
// if p3 = 7 then
66258: LD_VAR 0 3
66262: PUSH
66263: LD_INT 7
66265: EQUAL
66266: IFFALSE 66276
// sRadar := true ;
66268: LD_ADDR_EXP 88
66272: PUSH
66273: LD_INT 1
66275: ST_TO_ADDR
// if p3 = 8 then
66276: LD_VAR 0 3
66280: PUSH
66281: LD_INT 8
66283: EQUAL
66284: IFFALSE 66294
// sBunker := true ;
66286: LD_ADDR_EXP 89
66290: PUSH
66291: LD_INT 1
66293: ST_TO_ADDR
// if p3 = 9 then
66294: LD_VAR 0 3
66298: PUSH
66299: LD_INT 9
66301: EQUAL
66302: IFFALSE 66312
// sHack := true ;
66304: LD_ADDR_EXP 90
66308: PUSH
66309: LD_INT 1
66311: ST_TO_ADDR
// if p3 = 10 then
66312: LD_VAR 0 3
66316: PUSH
66317: LD_INT 10
66319: EQUAL
66320: IFFALSE 66330
// sFire := true ;
66322: LD_ADDR_EXP 91
66326: PUSH
66327: LD_INT 1
66329: ST_TO_ADDR
// if p3 = 11 then
66330: LD_VAR 0 3
66334: PUSH
66335: LD_INT 11
66337: EQUAL
66338: IFFALSE 66348
// sRefresh := true ;
66340: LD_ADDR_EXP 92
66344: PUSH
66345: LD_INT 1
66347: ST_TO_ADDR
// if p3 = 12 then
66348: LD_VAR 0 3
66352: PUSH
66353: LD_INT 12
66355: EQUAL
66356: IFFALSE 66366
// sExp := true ;
66358: LD_ADDR_EXP 93
66362: PUSH
66363: LD_INT 1
66365: ST_TO_ADDR
// if p3 = 13 then
66366: LD_VAR 0 3
66370: PUSH
66371: LD_INT 13
66373: EQUAL
66374: IFFALSE 66384
// sDepot := true ;
66376: LD_ADDR_EXP 94
66380: PUSH
66381: LD_INT 1
66383: ST_TO_ADDR
// if p3 = 14 then
66384: LD_VAR 0 3
66388: PUSH
66389: LD_INT 14
66391: EQUAL
66392: IFFALSE 66402
// sFlag := true ;
66394: LD_ADDR_EXP 95
66398: PUSH
66399: LD_INT 1
66401: ST_TO_ADDR
// if p3 = 15 then
66402: LD_VAR 0 3
66406: PUSH
66407: LD_INT 15
66409: EQUAL
66410: IFFALSE 66420
// sKamikadze := true ;
66412: LD_ADDR_EXP 103
66416: PUSH
66417: LD_INT 1
66419: ST_TO_ADDR
// if p3 = 16 then
66420: LD_VAR 0 3
66424: PUSH
66425: LD_INT 16
66427: EQUAL
66428: IFFALSE 66438
// sTroll := true ;
66430: LD_ADDR_EXP 104
66434: PUSH
66435: LD_INT 1
66437: ST_TO_ADDR
// if p3 = 17 then
66438: LD_VAR 0 3
66442: PUSH
66443: LD_INT 17
66445: EQUAL
66446: IFFALSE 66456
// sSlow := true ;
66448: LD_ADDR_EXP 105
66452: PUSH
66453: LD_INT 1
66455: ST_TO_ADDR
// if p3 = 18 then
66456: LD_VAR 0 3
66460: PUSH
66461: LD_INT 18
66463: EQUAL
66464: IFFALSE 66474
// sLack := true ;
66466: LD_ADDR_EXP 106
66470: PUSH
66471: LD_INT 1
66473: ST_TO_ADDR
// if p3 = 19 then
66474: LD_VAR 0 3
66478: PUSH
66479: LD_INT 19
66481: EQUAL
66482: IFFALSE 66492
// sTank := true ;
66484: LD_ADDR_EXP 108
66488: PUSH
66489: LD_INT 1
66491: ST_TO_ADDR
// if p3 = 20 then
66492: LD_VAR 0 3
66496: PUSH
66497: LD_INT 20
66499: EQUAL
66500: IFFALSE 66510
// sRemote := true ;
66502: LD_ADDR_EXP 109
66506: PUSH
66507: LD_INT 1
66509: ST_TO_ADDR
// if p3 = 21 then
66510: LD_VAR 0 3
66514: PUSH
66515: LD_INT 21
66517: EQUAL
66518: IFFALSE 66528
// sPowell := true ;
66520: LD_ADDR_EXP 110
66524: PUSH
66525: LD_INT 1
66527: ST_TO_ADDR
// if p3 = 22 then
66528: LD_VAR 0 3
66532: PUSH
66533: LD_INT 22
66535: EQUAL
66536: IFFALSE 66546
// sTeleport := true ;
66538: LD_ADDR_EXP 113
66542: PUSH
66543: LD_INT 1
66545: ST_TO_ADDR
// if p3 = 23 then
66546: LD_VAR 0 3
66550: PUSH
66551: LD_INT 23
66553: EQUAL
66554: IFFALSE 66564
// sOilTower := true ;
66556: LD_ADDR_EXP 115
66560: PUSH
66561: LD_INT 1
66563: ST_TO_ADDR
// if p3 = 24 then
66564: LD_VAR 0 3
66568: PUSH
66569: LD_INT 24
66571: EQUAL
66572: IFFALSE 66582
// sShovel := true ;
66574: LD_ADDR_EXP 116
66578: PUSH
66579: LD_INT 1
66581: ST_TO_ADDR
// if p3 = 25 then
66582: LD_VAR 0 3
66586: PUSH
66587: LD_INT 25
66589: EQUAL
66590: IFFALSE 66600
// sSheik := true ;
66592: LD_ADDR_EXP 117
66596: PUSH
66597: LD_INT 1
66599: ST_TO_ADDR
// if p3 = 26 then
66600: LD_VAR 0 3
66604: PUSH
66605: LD_INT 26
66607: EQUAL
66608: IFFALSE 66618
// sEarthquake := true ;
66610: LD_ADDR_EXP 119
66614: PUSH
66615: LD_INT 1
66617: ST_TO_ADDR
// if p3 = 27 then
66618: LD_VAR 0 3
66622: PUSH
66623: LD_INT 27
66625: EQUAL
66626: IFFALSE 66636
// sAI := true ;
66628: LD_ADDR_EXP 120
66632: PUSH
66633: LD_INT 1
66635: ST_TO_ADDR
// if p3 = 28 then
66636: LD_VAR 0 3
66640: PUSH
66641: LD_INT 28
66643: EQUAL
66644: IFFALSE 66654
// sCargo := true ;
66646: LD_ADDR_EXP 123
66650: PUSH
66651: LD_INT 1
66653: ST_TO_ADDR
// if p3 = 29 then
66654: LD_VAR 0 3
66658: PUSH
66659: LD_INT 29
66661: EQUAL
66662: IFFALSE 66672
// sDLaser := true ;
66664: LD_ADDR_EXP 124
66668: PUSH
66669: LD_INT 1
66671: ST_TO_ADDR
// if p3 = 30 then
66672: LD_VAR 0 3
66676: PUSH
66677: LD_INT 30
66679: EQUAL
66680: IFFALSE 66690
// sExchange := true ;
66682: LD_ADDR_EXP 125
66686: PUSH
66687: LD_INT 1
66689: ST_TO_ADDR
// if p3 = 31 then
66690: LD_VAR 0 3
66694: PUSH
66695: LD_INT 31
66697: EQUAL
66698: IFFALSE 66708
// sFac := true ;
66700: LD_ADDR_EXP 126
66704: PUSH
66705: LD_INT 1
66707: ST_TO_ADDR
// if p3 = 32 then
66708: LD_VAR 0 3
66712: PUSH
66713: LD_INT 32
66715: EQUAL
66716: IFFALSE 66726
// sPower := true ;
66718: LD_ADDR_EXP 127
66722: PUSH
66723: LD_INT 1
66725: ST_TO_ADDR
// if p3 = 33 then
66726: LD_VAR 0 3
66730: PUSH
66731: LD_INT 33
66733: EQUAL
66734: IFFALSE 66744
// sRandom := true ;
66736: LD_ADDR_EXP 128
66740: PUSH
66741: LD_INT 1
66743: ST_TO_ADDR
// if p3 = 34 then
66744: LD_VAR 0 3
66748: PUSH
66749: LD_INT 34
66751: EQUAL
66752: IFFALSE 66762
// sShield := true ;
66754: LD_ADDR_EXP 129
66758: PUSH
66759: LD_INT 1
66761: ST_TO_ADDR
// if p3 = 35 then
66762: LD_VAR 0 3
66766: PUSH
66767: LD_INT 35
66769: EQUAL
66770: IFFALSE 66780
// sTime := true ;
66772: LD_ADDR_EXP 130
66776: PUSH
66777: LD_INT 1
66779: ST_TO_ADDR
// if p3 = 36 then
66780: LD_VAR 0 3
66784: PUSH
66785: LD_INT 36
66787: EQUAL
66788: IFFALSE 66798
// sTools := true ;
66790: LD_ADDR_EXP 131
66794: PUSH
66795: LD_INT 1
66797: ST_TO_ADDR
// if p3 = 101 then
66798: LD_VAR 0 3
66802: PUSH
66803: LD_INT 101
66805: EQUAL
66806: IFFALSE 66816
// sSold := true ;
66808: LD_ADDR_EXP 96
66812: PUSH
66813: LD_INT 1
66815: ST_TO_ADDR
// if p3 = 102 then
66816: LD_VAR 0 3
66820: PUSH
66821: LD_INT 102
66823: EQUAL
66824: IFFALSE 66834
// sDiff := true ;
66826: LD_ADDR_EXP 97
66830: PUSH
66831: LD_INT 1
66833: ST_TO_ADDR
// if p3 = 103 then
66834: LD_VAR 0 3
66838: PUSH
66839: LD_INT 103
66841: EQUAL
66842: IFFALSE 66852
// sFog := true ;
66844: LD_ADDR_EXP 100
66848: PUSH
66849: LD_INT 1
66851: ST_TO_ADDR
// if p3 = 104 then
66852: LD_VAR 0 3
66856: PUSH
66857: LD_INT 104
66859: EQUAL
66860: IFFALSE 66870
// sReset := true ;
66862: LD_ADDR_EXP 101
66866: PUSH
66867: LD_INT 1
66869: ST_TO_ADDR
// if p3 = 105 then
66870: LD_VAR 0 3
66874: PUSH
66875: LD_INT 105
66877: EQUAL
66878: IFFALSE 66888
// sSun := true ;
66880: LD_ADDR_EXP 102
66884: PUSH
66885: LD_INT 1
66887: ST_TO_ADDR
// if p3 = 106 then
66888: LD_VAR 0 3
66892: PUSH
66893: LD_INT 106
66895: EQUAL
66896: IFFALSE 66906
// sTiger := true ;
66898: LD_ADDR_EXP 98
66902: PUSH
66903: LD_INT 1
66905: ST_TO_ADDR
// if p3 = 107 then
66906: LD_VAR 0 3
66910: PUSH
66911: LD_INT 107
66913: EQUAL
66914: IFFALSE 66924
// sBomb := true ;
66916: LD_ADDR_EXP 99
66920: PUSH
66921: LD_INT 1
66923: ST_TO_ADDR
// if p3 = 108 then
66924: LD_VAR 0 3
66928: PUSH
66929: LD_INT 108
66931: EQUAL
66932: IFFALSE 66942
// sWound := true ;
66934: LD_ADDR_EXP 107
66938: PUSH
66939: LD_INT 1
66941: ST_TO_ADDR
// if p3 = 109 then
66942: LD_VAR 0 3
66946: PUSH
66947: LD_INT 109
66949: EQUAL
66950: IFFALSE 66960
// sBetray := true ;
66952: LD_ADDR_EXP 111
66956: PUSH
66957: LD_INT 1
66959: ST_TO_ADDR
// if p3 = 110 then
66960: LD_VAR 0 3
66964: PUSH
66965: LD_INT 110
66967: EQUAL
66968: IFFALSE 66978
// sContamin := true ;
66970: LD_ADDR_EXP 112
66974: PUSH
66975: LD_INT 1
66977: ST_TO_ADDR
// if p3 = 111 then
66978: LD_VAR 0 3
66982: PUSH
66983: LD_INT 111
66985: EQUAL
66986: IFFALSE 66996
// sOil := true ;
66988: LD_ADDR_EXP 114
66992: PUSH
66993: LD_INT 1
66995: ST_TO_ADDR
// if p3 = 112 then
66996: LD_VAR 0 3
67000: PUSH
67001: LD_INT 112
67003: EQUAL
67004: IFFALSE 67014
// sStu := true ;
67006: LD_ADDR_EXP 118
67010: PUSH
67011: LD_INT 1
67013: ST_TO_ADDR
// if p3 = 113 then
67014: LD_VAR 0 3
67018: PUSH
67019: LD_INT 113
67021: EQUAL
67022: IFFALSE 67032
// sBazooka := true ;
67024: LD_ADDR_EXP 121
67028: PUSH
67029: LD_INT 1
67031: ST_TO_ADDR
// if p3 = 114 then
67032: LD_VAR 0 3
67036: PUSH
67037: LD_INT 114
67039: EQUAL
67040: IFFALSE 67050
// sMortar := true ;
67042: LD_ADDR_EXP 122
67046: PUSH
67047: LD_INT 1
67049: ST_TO_ADDR
// if p3 = 115 then
67050: LD_VAR 0 3
67054: PUSH
67055: LD_INT 115
67057: EQUAL
67058: IFFALSE 67068
// sRanger := true ;
67060: LD_ADDR_EXP 132
67064: PUSH
67065: LD_INT 1
67067: ST_TO_ADDR
// if p3 = 116 then
67068: LD_VAR 0 3
67072: PUSH
67073: LD_INT 116
67075: EQUAL
67076: IFFALSE 67086
// sComputer := true ;
67078: LD_ADDR_EXP 133
67082: PUSH
67083: LD_INT 1
67085: ST_TO_ADDR
// if p3 = 117 then
67086: LD_VAR 0 3
67090: PUSH
67091: LD_INT 117
67093: EQUAL
67094: IFFALSE 67104
// s30 := true ;
67096: LD_ADDR_EXP 134
67100: PUSH
67101: LD_INT 1
67103: ST_TO_ADDR
// if p3 = 118 then
67104: LD_VAR 0 3
67108: PUSH
67109: LD_INT 118
67111: EQUAL
67112: IFFALSE 67122
// s60 := true ;
67114: LD_ADDR_EXP 135
67118: PUSH
67119: LD_INT 1
67121: ST_TO_ADDR
// end ; if p2 = 101 then
67122: LD_VAR 0 2
67126: PUSH
67127: LD_INT 101
67129: EQUAL
67130: IFFALSE 67258
// begin case p3 of 1 :
67132: LD_VAR 0 3
67136: PUSH
67137: LD_INT 1
67139: DOUBLE
67140: EQUAL
67141: IFTRUE 67145
67143: GO 67152
67145: POP
// hHackUnlimitedResources ; 2 :
67146: CALL 79356 0 0
67150: GO 67258
67152: LD_INT 2
67154: DOUBLE
67155: EQUAL
67156: IFTRUE 67160
67158: GO 67167
67160: POP
// hHackSetLevel10 ; 3 :
67161: CALL 79489 0 0
67165: GO 67258
67167: LD_INT 3
67169: DOUBLE
67170: EQUAL
67171: IFTRUE 67175
67173: GO 67182
67175: POP
// hHackSetLevel10YourUnits ; 4 :
67176: CALL 79574 0 0
67180: GO 67258
67182: LD_INT 4
67184: DOUBLE
67185: EQUAL
67186: IFTRUE 67190
67188: GO 67197
67190: POP
// hHackInvincible ; 5 :
67191: CALL 80022 0 0
67195: GO 67258
67197: LD_INT 5
67199: DOUBLE
67200: EQUAL
67201: IFTRUE 67205
67203: GO 67212
67205: POP
// hHackInvisible ; 6 :
67206: CALL 80133 0 0
67210: GO 67258
67212: LD_INT 6
67214: DOUBLE
67215: EQUAL
67216: IFTRUE 67220
67218: GO 67227
67220: POP
// hHackChangeYourSide ; 7 :
67221: CALL 80190 0 0
67225: GO 67258
67227: LD_INT 7
67229: DOUBLE
67230: EQUAL
67231: IFTRUE 67235
67233: GO 67242
67235: POP
// hHackChangeUnitSide ; 8 :
67236: CALL 80232 0 0
67240: GO 67258
67242: LD_INT 8
67244: DOUBLE
67245: EQUAL
67246: IFTRUE 67250
67248: GO 67257
67250: POP
// hHackFog ; end ;
67251: CALL 80333 0 0
67255: GO 67258
67257: POP
// end ; end ;
67258: LD_VAR 0 7
67262: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
67263: GO 67265
67265: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
67266: LD_STRING initStreamRollete();
67268: PPUSH
67269: CALL_OW 559
// InitStreamMode ;
67273: CALL 67285 0 0
// DefineStreamItems ( false ) ;
67277: LD_INT 0
67279: PPUSH
67280: CALL 67749 0 1
// end ;
67284: END
// function InitStreamMode ; begin
67285: LD_INT 0
67287: PPUSH
// streamModeActive := false ;
67288: LD_ADDR_EXP 79
67292: PUSH
67293: LD_INT 0
67295: ST_TO_ADDR
// normalCounter := 36 ;
67296: LD_ADDR_EXP 80
67300: PUSH
67301: LD_INT 36
67303: ST_TO_ADDR
// hardcoreCounter := 18 ;
67304: LD_ADDR_EXP 81
67308: PUSH
67309: LD_INT 18
67311: ST_TO_ADDR
// sRocket := false ;
67312: LD_ADDR_EXP 84
67316: PUSH
67317: LD_INT 0
67319: ST_TO_ADDR
// sSpeed := false ;
67320: LD_ADDR_EXP 83
67324: PUSH
67325: LD_INT 0
67327: ST_TO_ADDR
// sEngine := false ;
67328: LD_ADDR_EXP 85
67332: PUSH
67333: LD_INT 0
67335: ST_TO_ADDR
// sSpec := false ;
67336: LD_ADDR_EXP 82
67340: PUSH
67341: LD_INT 0
67343: ST_TO_ADDR
// sLevel := false ;
67344: LD_ADDR_EXP 86
67348: PUSH
67349: LD_INT 0
67351: ST_TO_ADDR
// sArmoury := false ;
67352: LD_ADDR_EXP 87
67356: PUSH
67357: LD_INT 0
67359: ST_TO_ADDR
// sRadar := false ;
67360: LD_ADDR_EXP 88
67364: PUSH
67365: LD_INT 0
67367: ST_TO_ADDR
// sBunker := false ;
67368: LD_ADDR_EXP 89
67372: PUSH
67373: LD_INT 0
67375: ST_TO_ADDR
// sHack := false ;
67376: LD_ADDR_EXP 90
67380: PUSH
67381: LD_INT 0
67383: ST_TO_ADDR
// sFire := false ;
67384: LD_ADDR_EXP 91
67388: PUSH
67389: LD_INT 0
67391: ST_TO_ADDR
// sRefresh := false ;
67392: LD_ADDR_EXP 92
67396: PUSH
67397: LD_INT 0
67399: ST_TO_ADDR
// sExp := false ;
67400: LD_ADDR_EXP 93
67404: PUSH
67405: LD_INT 0
67407: ST_TO_ADDR
// sDepot := false ;
67408: LD_ADDR_EXP 94
67412: PUSH
67413: LD_INT 0
67415: ST_TO_ADDR
// sFlag := false ;
67416: LD_ADDR_EXP 95
67420: PUSH
67421: LD_INT 0
67423: ST_TO_ADDR
// sKamikadze := false ;
67424: LD_ADDR_EXP 103
67428: PUSH
67429: LD_INT 0
67431: ST_TO_ADDR
// sTroll := false ;
67432: LD_ADDR_EXP 104
67436: PUSH
67437: LD_INT 0
67439: ST_TO_ADDR
// sSlow := false ;
67440: LD_ADDR_EXP 105
67444: PUSH
67445: LD_INT 0
67447: ST_TO_ADDR
// sLack := false ;
67448: LD_ADDR_EXP 106
67452: PUSH
67453: LD_INT 0
67455: ST_TO_ADDR
// sTank := false ;
67456: LD_ADDR_EXP 108
67460: PUSH
67461: LD_INT 0
67463: ST_TO_ADDR
// sRemote := false ;
67464: LD_ADDR_EXP 109
67468: PUSH
67469: LD_INT 0
67471: ST_TO_ADDR
// sPowell := false ;
67472: LD_ADDR_EXP 110
67476: PUSH
67477: LD_INT 0
67479: ST_TO_ADDR
// sTeleport := false ;
67480: LD_ADDR_EXP 113
67484: PUSH
67485: LD_INT 0
67487: ST_TO_ADDR
// sOilTower := false ;
67488: LD_ADDR_EXP 115
67492: PUSH
67493: LD_INT 0
67495: ST_TO_ADDR
// sShovel := false ;
67496: LD_ADDR_EXP 116
67500: PUSH
67501: LD_INT 0
67503: ST_TO_ADDR
// sSheik := false ;
67504: LD_ADDR_EXP 117
67508: PUSH
67509: LD_INT 0
67511: ST_TO_ADDR
// sEarthquake := false ;
67512: LD_ADDR_EXP 119
67516: PUSH
67517: LD_INT 0
67519: ST_TO_ADDR
// sAI := false ;
67520: LD_ADDR_EXP 120
67524: PUSH
67525: LD_INT 0
67527: ST_TO_ADDR
// sCargo := false ;
67528: LD_ADDR_EXP 123
67532: PUSH
67533: LD_INT 0
67535: ST_TO_ADDR
// sDLaser := false ;
67536: LD_ADDR_EXP 124
67540: PUSH
67541: LD_INT 0
67543: ST_TO_ADDR
// sExchange := false ;
67544: LD_ADDR_EXP 125
67548: PUSH
67549: LD_INT 0
67551: ST_TO_ADDR
// sFac := false ;
67552: LD_ADDR_EXP 126
67556: PUSH
67557: LD_INT 0
67559: ST_TO_ADDR
// sPower := false ;
67560: LD_ADDR_EXP 127
67564: PUSH
67565: LD_INT 0
67567: ST_TO_ADDR
// sRandom := false ;
67568: LD_ADDR_EXP 128
67572: PUSH
67573: LD_INT 0
67575: ST_TO_ADDR
// sShield := false ;
67576: LD_ADDR_EXP 129
67580: PUSH
67581: LD_INT 0
67583: ST_TO_ADDR
// sTime := false ;
67584: LD_ADDR_EXP 130
67588: PUSH
67589: LD_INT 0
67591: ST_TO_ADDR
// sTools := false ;
67592: LD_ADDR_EXP 131
67596: PUSH
67597: LD_INT 0
67599: ST_TO_ADDR
// sSold := false ;
67600: LD_ADDR_EXP 96
67604: PUSH
67605: LD_INT 0
67607: ST_TO_ADDR
// sDiff := false ;
67608: LD_ADDR_EXP 97
67612: PUSH
67613: LD_INT 0
67615: ST_TO_ADDR
// sFog := false ;
67616: LD_ADDR_EXP 100
67620: PUSH
67621: LD_INT 0
67623: ST_TO_ADDR
// sReset := false ;
67624: LD_ADDR_EXP 101
67628: PUSH
67629: LD_INT 0
67631: ST_TO_ADDR
// sSun := false ;
67632: LD_ADDR_EXP 102
67636: PUSH
67637: LD_INT 0
67639: ST_TO_ADDR
// sTiger := false ;
67640: LD_ADDR_EXP 98
67644: PUSH
67645: LD_INT 0
67647: ST_TO_ADDR
// sBomb := false ;
67648: LD_ADDR_EXP 99
67652: PUSH
67653: LD_INT 0
67655: ST_TO_ADDR
// sWound := false ;
67656: LD_ADDR_EXP 107
67660: PUSH
67661: LD_INT 0
67663: ST_TO_ADDR
// sBetray := false ;
67664: LD_ADDR_EXP 111
67668: PUSH
67669: LD_INT 0
67671: ST_TO_ADDR
// sContamin := false ;
67672: LD_ADDR_EXP 112
67676: PUSH
67677: LD_INT 0
67679: ST_TO_ADDR
// sOil := false ;
67680: LD_ADDR_EXP 114
67684: PUSH
67685: LD_INT 0
67687: ST_TO_ADDR
// sStu := false ;
67688: LD_ADDR_EXP 118
67692: PUSH
67693: LD_INT 0
67695: ST_TO_ADDR
// sBazooka := false ;
67696: LD_ADDR_EXP 121
67700: PUSH
67701: LD_INT 0
67703: ST_TO_ADDR
// sMortar := false ;
67704: LD_ADDR_EXP 122
67708: PUSH
67709: LD_INT 0
67711: ST_TO_ADDR
// sRanger := false ;
67712: LD_ADDR_EXP 132
67716: PUSH
67717: LD_INT 0
67719: ST_TO_ADDR
// sComputer := false ;
67720: LD_ADDR_EXP 133
67724: PUSH
67725: LD_INT 0
67727: ST_TO_ADDR
// s30 := false ;
67728: LD_ADDR_EXP 134
67732: PUSH
67733: LD_INT 0
67735: ST_TO_ADDR
// s60 := false ;
67736: LD_ADDR_EXP 135
67740: PUSH
67741: LD_INT 0
67743: ST_TO_ADDR
// end ;
67744: LD_VAR 0 1
67748: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
67749: LD_INT 0
67751: PPUSH
67752: PPUSH
67753: PPUSH
67754: PPUSH
67755: PPUSH
67756: PPUSH
67757: PPUSH
// result := [ ] ;
67758: LD_ADDR_VAR 0 2
67762: PUSH
67763: EMPTY
67764: ST_TO_ADDR
// if campaign_id = 1 then
67765: LD_OWVAR 69
67769: PUSH
67770: LD_INT 1
67772: EQUAL
67773: IFFALSE 70939
// begin case mission_number of 1 :
67775: LD_OWVAR 70
67779: PUSH
67780: LD_INT 1
67782: DOUBLE
67783: EQUAL
67784: IFTRUE 67788
67786: GO 67864
67788: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
67789: LD_ADDR_VAR 0 2
67793: PUSH
67794: LD_INT 2
67796: PUSH
67797: LD_INT 4
67799: PUSH
67800: LD_INT 11
67802: PUSH
67803: LD_INT 12
67805: PUSH
67806: LD_INT 15
67808: PUSH
67809: LD_INT 16
67811: PUSH
67812: LD_INT 22
67814: PUSH
67815: LD_INT 23
67817: PUSH
67818: LD_INT 26
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: PUSH
67832: LD_INT 101
67834: PUSH
67835: LD_INT 102
67837: PUSH
67838: LD_INT 106
67840: PUSH
67841: LD_INT 116
67843: PUSH
67844: LD_INT 117
67846: PUSH
67847: LD_INT 118
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: ST_TO_ADDR
67862: GO 70937
67864: LD_INT 2
67866: DOUBLE
67867: EQUAL
67868: IFTRUE 67872
67870: GO 67956
67872: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
67873: LD_ADDR_VAR 0 2
67877: PUSH
67878: LD_INT 2
67880: PUSH
67881: LD_INT 4
67883: PUSH
67884: LD_INT 11
67886: PUSH
67887: LD_INT 12
67889: PUSH
67890: LD_INT 15
67892: PUSH
67893: LD_INT 16
67895: PUSH
67896: LD_INT 22
67898: PUSH
67899: LD_INT 23
67901: PUSH
67902: LD_INT 26
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 101
67918: PUSH
67919: LD_INT 102
67921: PUSH
67922: LD_INT 105
67924: PUSH
67925: LD_INT 106
67927: PUSH
67928: LD_INT 108
67930: PUSH
67931: LD_INT 116
67933: PUSH
67934: LD_INT 117
67936: PUSH
67937: LD_INT 118
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: LIST
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: ST_TO_ADDR
67954: GO 70937
67956: LD_INT 3
67958: DOUBLE
67959: EQUAL
67960: IFTRUE 67964
67962: GO 68052
67964: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
67965: LD_ADDR_VAR 0 2
67969: PUSH
67970: LD_INT 2
67972: PUSH
67973: LD_INT 4
67975: PUSH
67976: LD_INT 5
67978: PUSH
67979: LD_INT 11
67981: PUSH
67982: LD_INT 12
67984: PUSH
67985: LD_INT 15
67987: PUSH
67988: LD_INT 16
67990: PUSH
67991: LD_INT 22
67993: PUSH
67994: LD_INT 26
67996: PUSH
67997: LD_INT 36
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 101
68014: PUSH
68015: LD_INT 102
68017: PUSH
68018: LD_INT 105
68020: PUSH
68021: LD_INT 106
68023: PUSH
68024: LD_INT 108
68026: PUSH
68027: LD_INT 116
68029: PUSH
68030: LD_INT 117
68032: PUSH
68033: LD_INT 118
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: ST_TO_ADDR
68050: GO 70937
68052: LD_INT 4
68054: DOUBLE
68055: EQUAL
68056: IFTRUE 68060
68058: GO 68156
68060: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
68061: LD_ADDR_VAR 0 2
68065: PUSH
68066: LD_INT 2
68068: PUSH
68069: LD_INT 4
68071: PUSH
68072: LD_INT 5
68074: PUSH
68075: LD_INT 8
68077: PUSH
68078: LD_INT 11
68080: PUSH
68081: LD_INT 12
68083: PUSH
68084: LD_INT 15
68086: PUSH
68087: LD_INT 16
68089: PUSH
68090: LD_INT 22
68092: PUSH
68093: LD_INT 23
68095: PUSH
68096: LD_INT 26
68098: PUSH
68099: LD_INT 36
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 101
68118: PUSH
68119: LD_INT 102
68121: PUSH
68122: LD_INT 105
68124: PUSH
68125: LD_INT 106
68127: PUSH
68128: LD_INT 108
68130: PUSH
68131: LD_INT 116
68133: PUSH
68134: LD_INT 117
68136: PUSH
68137: LD_INT 118
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: ST_TO_ADDR
68154: GO 70937
68156: LD_INT 5
68158: DOUBLE
68159: EQUAL
68160: IFTRUE 68164
68162: GO 68276
68164: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
68165: LD_ADDR_VAR 0 2
68169: PUSH
68170: LD_INT 2
68172: PUSH
68173: LD_INT 4
68175: PUSH
68176: LD_INT 5
68178: PUSH
68179: LD_INT 6
68181: PUSH
68182: LD_INT 8
68184: PUSH
68185: LD_INT 11
68187: PUSH
68188: LD_INT 12
68190: PUSH
68191: LD_INT 15
68193: PUSH
68194: LD_INT 16
68196: PUSH
68197: LD_INT 22
68199: PUSH
68200: LD_INT 23
68202: PUSH
68203: LD_INT 25
68205: PUSH
68206: LD_INT 26
68208: PUSH
68209: LD_INT 36
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: LIST
68221: LIST
68222: LIST
68223: LIST
68224: LIST
68225: LIST
68226: LIST
68227: PUSH
68228: LD_INT 101
68230: PUSH
68231: LD_INT 102
68233: PUSH
68234: LD_INT 105
68236: PUSH
68237: LD_INT 106
68239: PUSH
68240: LD_INT 108
68242: PUSH
68243: LD_INT 109
68245: PUSH
68246: LD_INT 112
68248: PUSH
68249: LD_INT 116
68251: PUSH
68252: LD_INT 117
68254: PUSH
68255: LD_INT 118
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: ST_TO_ADDR
68274: GO 70937
68276: LD_INT 6
68278: DOUBLE
68279: EQUAL
68280: IFTRUE 68284
68282: GO 68416
68284: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
68285: LD_ADDR_VAR 0 2
68289: PUSH
68290: LD_INT 2
68292: PUSH
68293: LD_INT 4
68295: PUSH
68296: LD_INT 5
68298: PUSH
68299: LD_INT 6
68301: PUSH
68302: LD_INT 8
68304: PUSH
68305: LD_INT 11
68307: PUSH
68308: LD_INT 12
68310: PUSH
68311: LD_INT 15
68313: PUSH
68314: LD_INT 16
68316: PUSH
68317: LD_INT 20
68319: PUSH
68320: LD_INT 21
68322: PUSH
68323: LD_INT 22
68325: PUSH
68326: LD_INT 23
68328: PUSH
68329: LD_INT 25
68331: PUSH
68332: LD_INT 26
68334: PUSH
68335: LD_INT 30
68337: PUSH
68338: LD_INT 31
68340: PUSH
68341: LD_INT 32
68343: PUSH
68344: LD_INT 36
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: LIST
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: PUSH
68368: LD_INT 101
68370: PUSH
68371: LD_INT 102
68373: PUSH
68374: LD_INT 105
68376: PUSH
68377: LD_INT 106
68379: PUSH
68380: LD_INT 108
68382: PUSH
68383: LD_INT 109
68385: PUSH
68386: LD_INT 112
68388: PUSH
68389: LD_INT 116
68391: PUSH
68392: LD_INT 117
68394: PUSH
68395: LD_INT 118
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: ST_TO_ADDR
68414: GO 70937
68416: LD_INT 7
68418: DOUBLE
68419: EQUAL
68420: IFTRUE 68424
68422: GO 68536
68424: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
68425: LD_ADDR_VAR 0 2
68429: PUSH
68430: LD_INT 2
68432: PUSH
68433: LD_INT 4
68435: PUSH
68436: LD_INT 5
68438: PUSH
68439: LD_INT 7
68441: PUSH
68442: LD_INT 11
68444: PUSH
68445: LD_INT 12
68447: PUSH
68448: LD_INT 15
68450: PUSH
68451: LD_INT 16
68453: PUSH
68454: LD_INT 20
68456: PUSH
68457: LD_INT 21
68459: PUSH
68460: LD_INT 22
68462: PUSH
68463: LD_INT 23
68465: PUSH
68466: LD_INT 25
68468: PUSH
68469: LD_INT 26
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: PUSH
68488: LD_INT 101
68490: PUSH
68491: LD_INT 102
68493: PUSH
68494: LD_INT 103
68496: PUSH
68497: LD_INT 105
68499: PUSH
68500: LD_INT 106
68502: PUSH
68503: LD_INT 108
68505: PUSH
68506: LD_INT 112
68508: PUSH
68509: LD_INT 116
68511: PUSH
68512: LD_INT 117
68514: PUSH
68515: LD_INT 118
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: ST_TO_ADDR
68534: GO 70937
68536: LD_INT 8
68538: DOUBLE
68539: EQUAL
68540: IFTRUE 68544
68542: GO 68684
68544: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
68545: LD_ADDR_VAR 0 2
68549: PUSH
68550: LD_INT 2
68552: PUSH
68553: LD_INT 4
68555: PUSH
68556: LD_INT 5
68558: PUSH
68559: LD_INT 6
68561: PUSH
68562: LD_INT 7
68564: PUSH
68565: LD_INT 8
68567: PUSH
68568: LD_INT 11
68570: PUSH
68571: LD_INT 12
68573: PUSH
68574: LD_INT 15
68576: PUSH
68577: LD_INT 16
68579: PUSH
68580: LD_INT 20
68582: PUSH
68583: LD_INT 21
68585: PUSH
68586: LD_INT 22
68588: PUSH
68589: LD_INT 23
68591: PUSH
68592: LD_INT 25
68594: PUSH
68595: LD_INT 26
68597: PUSH
68598: LD_INT 30
68600: PUSH
68601: LD_INT 31
68603: PUSH
68604: LD_INT 32
68606: PUSH
68607: LD_INT 36
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: LIST
68614: LIST
68615: LIST
68616: LIST
68617: LIST
68618: LIST
68619: LIST
68620: LIST
68621: LIST
68622: LIST
68623: LIST
68624: LIST
68625: LIST
68626: LIST
68627: LIST
68628: LIST
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 101
68634: PUSH
68635: LD_INT 102
68637: PUSH
68638: LD_INT 103
68640: PUSH
68641: LD_INT 105
68643: PUSH
68644: LD_INT 106
68646: PUSH
68647: LD_INT 108
68649: PUSH
68650: LD_INT 109
68652: PUSH
68653: LD_INT 112
68655: PUSH
68656: LD_INT 116
68658: PUSH
68659: LD_INT 117
68661: PUSH
68662: LD_INT 118
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: ST_TO_ADDR
68682: GO 70937
68684: LD_INT 9
68686: DOUBLE
68687: EQUAL
68688: IFTRUE 68692
68690: GO 68840
68692: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
68693: LD_ADDR_VAR 0 2
68697: PUSH
68698: LD_INT 2
68700: PUSH
68701: LD_INT 4
68703: PUSH
68704: LD_INT 5
68706: PUSH
68707: LD_INT 6
68709: PUSH
68710: LD_INT 7
68712: PUSH
68713: LD_INT 8
68715: PUSH
68716: LD_INT 11
68718: PUSH
68719: LD_INT 12
68721: PUSH
68722: LD_INT 15
68724: PUSH
68725: LD_INT 16
68727: PUSH
68728: LD_INT 20
68730: PUSH
68731: LD_INT 21
68733: PUSH
68734: LD_INT 22
68736: PUSH
68737: LD_INT 23
68739: PUSH
68740: LD_INT 25
68742: PUSH
68743: LD_INT 26
68745: PUSH
68746: LD_INT 28
68748: PUSH
68749: LD_INT 30
68751: PUSH
68752: LD_INT 31
68754: PUSH
68755: LD_INT 32
68757: PUSH
68758: LD_INT 36
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: PUSH
68784: LD_INT 101
68786: PUSH
68787: LD_INT 102
68789: PUSH
68790: LD_INT 103
68792: PUSH
68793: LD_INT 105
68795: PUSH
68796: LD_INT 106
68798: PUSH
68799: LD_INT 108
68801: PUSH
68802: LD_INT 109
68804: PUSH
68805: LD_INT 112
68807: PUSH
68808: LD_INT 114
68810: PUSH
68811: LD_INT 116
68813: PUSH
68814: LD_INT 117
68816: PUSH
68817: LD_INT 118
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: ST_TO_ADDR
68838: GO 70937
68840: LD_INT 10
68842: DOUBLE
68843: EQUAL
68844: IFTRUE 68848
68846: GO 69044
68848: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
68849: LD_ADDR_VAR 0 2
68853: PUSH
68854: LD_INT 2
68856: PUSH
68857: LD_INT 4
68859: PUSH
68860: LD_INT 5
68862: PUSH
68863: LD_INT 6
68865: PUSH
68866: LD_INT 7
68868: PUSH
68869: LD_INT 8
68871: PUSH
68872: LD_INT 9
68874: PUSH
68875: LD_INT 10
68877: PUSH
68878: LD_INT 11
68880: PUSH
68881: LD_INT 12
68883: PUSH
68884: LD_INT 13
68886: PUSH
68887: LD_INT 14
68889: PUSH
68890: LD_INT 15
68892: PUSH
68893: LD_INT 16
68895: PUSH
68896: LD_INT 17
68898: PUSH
68899: LD_INT 18
68901: PUSH
68902: LD_INT 19
68904: PUSH
68905: LD_INT 20
68907: PUSH
68908: LD_INT 21
68910: PUSH
68911: LD_INT 22
68913: PUSH
68914: LD_INT 23
68916: PUSH
68917: LD_INT 24
68919: PUSH
68920: LD_INT 25
68922: PUSH
68923: LD_INT 26
68925: PUSH
68926: LD_INT 28
68928: PUSH
68929: LD_INT 30
68931: PUSH
68932: LD_INT 31
68934: PUSH
68935: LD_INT 32
68937: PUSH
68938: LD_INT 36
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 101
68974: PUSH
68975: LD_INT 102
68977: PUSH
68978: LD_INT 103
68980: PUSH
68981: LD_INT 104
68983: PUSH
68984: LD_INT 105
68986: PUSH
68987: LD_INT 106
68989: PUSH
68990: LD_INT 107
68992: PUSH
68993: LD_INT 108
68995: PUSH
68996: LD_INT 109
68998: PUSH
68999: LD_INT 110
69001: PUSH
69002: LD_INT 111
69004: PUSH
69005: LD_INT 112
69007: PUSH
69008: LD_INT 114
69010: PUSH
69011: LD_INT 116
69013: PUSH
69014: LD_INT 117
69016: PUSH
69017: LD_INT 118
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: ST_TO_ADDR
69042: GO 70937
69044: LD_INT 11
69046: DOUBLE
69047: EQUAL
69048: IFTRUE 69052
69050: GO 69256
69052: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
69053: LD_ADDR_VAR 0 2
69057: PUSH
69058: LD_INT 2
69060: PUSH
69061: LD_INT 3
69063: PUSH
69064: LD_INT 4
69066: PUSH
69067: LD_INT 5
69069: PUSH
69070: LD_INT 6
69072: PUSH
69073: LD_INT 7
69075: PUSH
69076: LD_INT 8
69078: PUSH
69079: LD_INT 9
69081: PUSH
69082: LD_INT 10
69084: PUSH
69085: LD_INT 11
69087: PUSH
69088: LD_INT 12
69090: PUSH
69091: LD_INT 13
69093: PUSH
69094: LD_INT 14
69096: PUSH
69097: LD_INT 15
69099: PUSH
69100: LD_INT 16
69102: PUSH
69103: LD_INT 17
69105: PUSH
69106: LD_INT 18
69108: PUSH
69109: LD_INT 19
69111: PUSH
69112: LD_INT 20
69114: PUSH
69115: LD_INT 21
69117: PUSH
69118: LD_INT 22
69120: PUSH
69121: LD_INT 23
69123: PUSH
69124: LD_INT 24
69126: PUSH
69127: LD_INT 25
69129: PUSH
69130: LD_INT 26
69132: PUSH
69133: LD_INT 28
69135: PUSH
69136: LD_INT 30
69138: PUSH
69139: LD_INT 31
69141: PUSH
69142: LD_INT 32
69144: PUSH
69145: LD_INT 34
69147: PUSH
69148: LD_INT 36
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: LIST
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: LIST
69160: LIST
69161: LIST
69162: LIST
69163: LIST
69164: LIST
69165: LIST
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: LIST
69183: PUSH
69184: LD_INT 101
69186: PUSH
69187: LD_INT 102
69189: PUSH
69190: LD_INT 103
69192: PUSH
69193: LD_INT 104
69195: PUSH
69196: LD_INT 105
69198: PUSH
69199: LD_INT 106
69201: PUSH
69202: LD_INT 107
69204: PUSH
69205: LD_INT 108
69207: PUSH
69208: LD_INT 109
69210: PUSH
69211: LD_INT 110
69213: PUSH
69214: LD_INT 111
69216: PUSH
69217: LD_INT 112
69219: PUSH
69220: LD_INT 114
69222: PUSH
69223: LD_INT 116
69225: PUSH
69226: LD_INT 117
69228: PUSH
69229: LD_INT 118
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: ST_TO_ADDR
69254: GO 70937
69256: LD_INT 12
69258: DOUBLE
69259: EQUAL
69260: IFTRUE 69264
69262: GO 69484
69264: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
69265: LD_ADDR_VAR 0 2
69269: PUSH
69270: LD_INT 1
69272: PUSH
69273: LD_INT 2
69275: PUSH
69276: LD_INT 3
69278: PUSH
69279: LD_INT 4
69281: PUSH
69282: LD_INT 5
69284: PUSH
69285: LD_INT 6
69287: PUSH
69288: LD_INT 7
69290: PUSH
69291: LD_INT 8
69293: PUSH
69294: LD_INT 9
69296: PUSH
69297: LD_INT 10
69299: PUSH
69300: LD_INT 11
69302: PUSH
69303: LD_INT 12
69305: PUSH
69306: LD_INT 13
69308: PUSH
69309: LD_INT 14
69311: PUSH
69312: LD_INT 15
69314: PUSH
69315: LD_INT 16
69317: PUSH
69318: LD_INT 17
69320: PUSH
69321: LD_INT 18
69323: PUSH
69324: LD_INT 19
69326: PUSH
69327: LD_INT 20
69329: PUSH
69330: LD_INT 21
69332: PUSH
69333: LD_INT 22
69335: PUSH
69336: LD_INT 23
69338: PUSH
69339: LD_INT 24
69341: PUSH
69342: LD_INT 25
69344: PUSH
69345: LD_INT 26
69347: PUSH
69348: LD_INT 27
69350: PUSH
69351: LD_INT 28
69353: PUSH
69354: LD_INT 30
69356: PUSH
69357: LD_INT 31
69359: PUSH
69360: LD_INT 32
69362: PUSH
69363: LD_INT 33
69365: PUSH
69366: LD_INT 34
69368: PUSH
69369: LD_INT 36
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: LIST
69376: LIST
69377: LIST
69378: LIST
69379: LIST
69380: LIST
69381: LIST
69382: LIST
69383: LIST
69384: LIST
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: LIST
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: PUSH
69408: LD_INT 101
69410: PUSH
69411: LD_INT 102
69413: PUSH
69414: LD_INT 103
69416: PUSH
69417: LD_INT 104
69419: PUSH
69420: LD_INT 105
69422: PUSH
69423: LD_INT 106
69425: PUSH
69426: LD_INT 107
69428: PUSH
69429: LD_INT 108
69431: PUSH
69432: LD_INT 109
69434: PUSH
69435: LD_INT 110
69437: PUSH
69438: LD_INT 111
69440: PUSH
69441: LD_INT 112
69443: PUSH
69444: LD_INT 113
69446: PUSH
69447: LD_INT 114
69449: PUSH
69450: LD_INT 116
69452: PUSH
69453: LD_INT 117
69455: PUSH
69456: LD_INT 118
69458: PUSH
69459: EMPTY
69460: LIST
69461: LIST
69462: LIST
69463: LIST
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: ST_TO_ADDR
69482: GO 70937
69484: LD_INT 13
69486: DOUBLE
69487: EQUAL
69488: IFTRUE 69492
69490: GO 69700
69492: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
69493: LD_ADDR_VAR 0 2
69497: PUSH
69498: LD_INT 1
69500: PUSH
69501: LD_INT 2
69503: PUSH
69504: LD_INT 3
69506: PUSH
69507: LD_INT 4
69509: PUSH
69510: LD_INT 5
69512: PUSH
69513: LD_INT 8
69515: PUSH
69516: LD_INT 9
69518: PUSH
69519: LD_INT 10
69521: PUSH
69522: LD_INT 11
69524: PUSH
69525: LD_INT 12
69527: PUSH
69528: LD_INT 14
69530: PUSH
69531: LD_INT 15
69533: PUSH
69534: LD_INT 16
69536: PUSH
69537: LD_INT 17
69539: PUSH
69540: LD_INT 18
69542: PUSH
69543: LD_INT 19
69545: PUSH
69546: LD_INT 20
69548: PUSH
69549: LD_INT 21
69551: PUSH
69552: LD_INT 22
69554: PUSH
69555: LD_INT 23
69557: PUSH
69558: LD_INT 24
69560: PUSH
69561: LD_INT 25
69563: PUSH
69564: LD_INT 26
69566: PUSH
69567: LD_INT 27
69569: PUSH
69570: LD_INT 28
69572: PUSH
69573: LD_INT 30
69575: PUSH
69576: LD_INT 31
69578: PUSH
69579: LD_INT 32
69581: PUSH
69582: LD_INT 33
69584: PUSH
69585: LD_INT 34
69587: PUSH
69588: LD_INT 36
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: LIST
69595: LIST
69596: LIST
69597: LIST
69598: LIST
69599: LIST
69600: LIST
69601: LIST
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: LIST
69608: LIST
69609: LIST
69610: LIST
69611: LIST
69612: LIST
69613: LIST
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: PUSH
69624: LD_INT 101
69626: PUSH
69627: LD_INT 102
69629: PUSH
69630: LD_INT 103
69632: PUSH
69633: LD_INT 104
69635: PUSH
69636: LD_INT 105
69638: PUSH
69639: LD_INT 106
69641: PUSH
69642: LD_INT 107
69644: PUSH
69645: LD_INT 108
69647: PUSH
69648: LD_INT 109
69650: PUSH
69651: LD_INT 110
69653: PUSH
69654: LD_INT 111
69656: PUSH
69657: LD_INT 112
69659: PUSH
69660: LD_INT 113
69662: PUSH
69663: LD_INT 114
69665: PUSH
69666: LD_INT 116
69668: PUSH
69669: LD_INT 117
69671: PUSH
69672: LD_INT 118
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: LIST
69679: LIST
69680: LIST
69681: LIST
69682: LIST
69683: LIST
69684: LIST
69685: LIST
69686: LIST
69687: LIST
69688: LIST
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: ST_TO_ADDR
69698: GO 70937
69700: LD_INT 14
69702: DOUBLE
69703: EQUAL
69704: IFTRUE 69708
69706: GO 69932
69708: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
69709: LD_ADDR_VAR 0 2
69713: PUSH
69714: LD_INT 1
69716: PUSH
69717: LD_INT 2
69719: PUSH
69720: LD_INT 3
69722: PUSH
69723: LD_INT 4
69725: PUSH
69726: LD_INT 5
69728: PUSH
69729: LD_INT 6
69731: PUSH
69732: LD_INT 7
69734: PUSH
69735: LD_INT 8
69737: PUSH
69738: LD_INT 9
69740: PUSH
69741: LD_INT 10
69743: PUSH
69744: LD_INT 11
69746: PUSH
69747: LD_INT 12
69749: PUSH
69750: LD_INT 13
69752: PUSH
69753: LD_INT 14
69755: PUSH
69756: LD_INT 15
69758: PUSH
69759: LD_INT 16
69761: PUSH
69762: LD_INT 17
69764: PUSH
69765: LD_INT 18
69767: PUSH
69768: LD_INT 19
69770: PUSH
69771: LD_INT 20
69773: PUSH
69774: LD_INT 21
69776: PUSH
69777: LD_INT 22
69779: PUSH
69780: LD_INT 23
69782: PUSH
69783: LD_INT 24
69785: PUSH
69786: LD_INT 25
69788: PUSH
69789: LD_INT 26
69791: PUSH
69792: LD_INT 27
69794: PUSH
69795: LD_INT 28
69797: PUSH
69798: LD_INT 29
69800: PUSH
69801: LD_INT 30
69803: PUSH
69804: LD_INT 31
69806: PUSH
69807: LD_INT 32
69809: PUSH
69810: LD_INT 33
69812: PUSH
69813: LD_INT 34
69815: PUSH
69816: LD_INT 36
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: LIST
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: LIST
69830: LIST
69831: LIST
69832: LIST
69833: LIST
69834: LIST
69835: LIST
69836: LIST
69837: LIST
69838: LIST
69839: LIST
69840: LIST
69841: LIST
69842: LIST
69843: LIST
69844: LIST
69845: LIST
69846: LIST
69847: LIST
69848: LIST
69849: LIST
69850: LIST
69851: LIST
69852: LIST
69853: LIST
69854: LIST
69855: PUSH
69856: LD_INT 101
69858: PUSH
69859: LD_INT 102
69861: PUSH
69862: LD_INT 103
69864: PUSH
69865: LD_INT 104
69867: PUSH
69868: LD_INT 105
69870: PUSH
69871: LD_INT 106
69873: PUSH
69874: LD_INT 107
69876: PUSH
69877: LD_INT 108
69879: PUSH
69880: LD_INT 109
69882: PUSH
69883: LD_INT 110
69885: PUSH
69886: LD_INT 111
69888: PUSH
69889: LD_INT 112
69891: PUSH
69892: LD_INT 113
69894: PUSH
69895: LD_INT 114
69897: PUSH
69898: LD_INT 116
69900: PUSH
69901: LD_INT 117
69903: PUSH
69904: LD_INT 118
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: LIST
69911: LIST
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: LIST
69919: LIST
69920: LIST
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: ST_TO_ADDR
69930: GO 70937
69932: LD_INT 15
69934: DOUBLE
69935: EQUAL
69936: IFTRUE 69940
69938: GO 70164
69940: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
69941: LD_ADDR_VAR 0 2
69945: PUSH
69946: LD_INT 1
69948: PUSH
69949: LD_INT 2
69951: PUSH
69952: LD_INT 3
69954: PUSH
69955: LD_INT 4
69957: PUSH
69958: LD_INT 5
69960: PUSH
69961: LD_INT 6
69963: PUSH
69964: LD_INT 7
69966: PUSH
69967: LD_INT 8
69969: PUSH
69970: LD_INT 9
69972: PUSH
69973: LD_INT 10
69975: PUSH
69976: LD_INT 11
69978: PUSH
69979: LD_INT 12
69981: PUSH
69982: LD_INT 13
69984: PUSH
69985: LD_INT 14
69987: PUSH
69988: LD_INT 15
69990: PUSH
69991: LD_INT 16
69993: PUSH
69994: LD_INT 17
69996: PUSH
69997: LD_INT 18
69999: PUSH
70000: LD_INT 19
70002: PUSH
70003: LD_INT 20
70005: PUSH
70006: LD_INT 21
70008: PUSH
70009: LD_INT 22
70011: PUSH
70012: LD_INT 23
70014: PUSH
70015: LD_INT 24
70017: PUSH
70018: LD_INT 25
70020: PUSH
70021: LD_INT 26
70023: PUSH
70024: LD_INT 27
70026: PUSH
70027: LD_INT 28
70029: PUSH
70030: LD_INT 29
70032: PUSH
70033: LD_INT 30
70035: PUSH
70036: LD_INT 31
70038: PUSH
70039: LD_INT 32
70041: PUSH
70042: LD_INT 33
70044: PUSH
70045: LD_INT 34
70047: PUSH
70048: LD_INT 36
70050: PUSH
70051: EMPTY
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 101
70090: PUSH
70091: LD_INT 102
70093: PUSH
70094: LD_INT 103
70096: PUSH
70097: LD_INT 104
70099: PUSH
70100: LD_INT 105
70102: PUSH
70103: LD_INT 106
70105: PUSH
70106: LD_INT 107
70108: PUSH
70109: LD_INT 108
70111: PUSH
70112: LD_INT 109
70114: PUSH
70115: LD_INT 110
70117: PUSH
70118: LD_INT 111
70120: PUSH
70121: LD_INT 112
70123: PUSH
70124: LD_INT 113
70126: PUSH
70127: LD_INT 114
70129: PUSH
70130: LD_INT 116
70132: PUSH
70133: LD_INT 117
70135: PUSH
70136: LD_INT 118
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: LIST
70145: LIST
70146: LIST
70147: LIST
70148: LIST
70149: LIST
70150: LIST
70151: LIST
70152: LIST
70153: LIST
70154: LIST
70155: LIST
70156: LIST
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: ST_TO_ADDR
70162: GO 70937
70164: LD_INT 16
70166: DOUBLE
70167: EQUAL
70168: IFTRUE 70172
70170: GO 70308
70172: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
70173: LD_ADDR_VAR 0 2
70177: PUSH
70178: LD_INT 2
70180: PUSH
70181: LD_INT 4
70183: PUSH
70184: LD_INT 5
70186: PUSH
70187: LD_INT 7
70189: PUSH
70190: LD_INT 11
70192: PUSH
70193: LD_INT 12
70195: PUSH
70196: LD_INT 15
70198: PUSH
70199: LD_INT 16
70201: PUSH
70202: LD_INT 20
70204: PUSH
70205: LD_INT 21
70207: PUSH
70208: LD_INT 22
70210: PUSH
70211: LD_INT 23
70213: PUSH
70214: LD_INT 25
70216: PUSH
70217: LD_INT 26
70219: PUSH
70220: LD_INT 30
70222: PUSH
70223: LD_INT 31
70225: PUSH
70226: LD_INT 32
70228: PUSH
70229: LD_INT 33
70231: PUSH
70232: LD_INT 34
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: LIST
70239: LIST
70240: LIST
70241: LIST
70242: LIST
70243: LIST
70244: LIST
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: LIST
70253: LIST
70254: LIST
70255: PUSH
70256: LD_INT 101
70258: PUSH
70259: LD_INT 102
70261: PUSH
70262: LD_INT 103
70264: PUSH
70265: LD_INT 106
70267: PUSH
70268: LD_INT 108
70270: PUSH
70271: LD_INT 112
70273: PUSH
70274: LD_INT 113
70276: PUSH
70277: LD_INT 114
70279: PUSH
70280: LD_INT 116
70282: PUSH
70283: LD_INT 117
70285: PUSH
70286: LD_INT 118
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: ST_TO_ADDR
70306: GO 70937
70308: LD_INT 17
70310: DOUBLE
70311: EQUAL
70312: IFTRUE 70316
70314: GO 70540
70316: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
70317: LD_ADDR_VAR 0 2
70321: PUSH
70322: LD_INT 1
70324: PUSH
70325: LD_INT 2
70327: PUSH
70328: LD_INT 3
70330: PUSH
70331: LD_INT 4
70333: PUSH
70334: LD_INT 5
70336: PUSH
70337: LD_INT 6
70339: PUSH
70340: LD_INT 7
70342: PUSH
70343: LD_INT 8
70345: PUSH
70346: LD_INT 9
70348: PUSH
70349: LD_INT 10
70351: PUSH
70352: LD_INT 11
70354: PUSH
70355: LD_INT 12
70357: PUSH
70358: LD_INT 13
70360: PUSH
70361: LD_INT 14
70363: PUSH
70364: LD_INT 15
70366: PUSH
70367: LD_INT 16
70369: PUSH
70370: LD_INT 17
70372: PUSH
70373: LD_INT 18
70375: PUSH
70376: LD_INT 19
70378: PUSH
70379: LD_INT 20
70381: PUSH
70382: LD_INT 21
70384: PUSH
70385: LD_INT 22
70387: PUSH
70388: LD_INT 23
70390: PUSH
70391: LD_INT 24
70393: PUSH
70394: LD_INT 25
70396: PUSH
70397: LD_INT 26
70399: PUSH
70400: LD_INT 27
70402: PUSH
70403: LD_INT 28
70405: PUSH
70406: LD_INT 29
70408: PUSH
70409: LD_INT 30
70411: PUSH
70412: LD_INT 31
70414: PUSH
70415: LD_INT 32
70417: PUSH
70418: LD_INT 33
70420: PUSH
70421: LD_INT 34
70423: PUSH
70424: LD_INT 36
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: LIST
70431: LIST
70432: LIST
70433: LIST
70434: LIST
70435: LIST
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: LIST
70443: LIST
70444: LIST
70445: LIST
70446: LIST
70447: LIST
70448: LIST
70449: LIST
70450: LIST
70451: LIST
70452: LIST
70453: LIST
70454: LIST
70455: LIST
70456: LIST
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: LIST
70462: LIST
70463: PUSH
70464: LD_INT 101
70466: PUSH
70467: LD_INT 102
70469: PUSH
70470: LD_INT 103
70472: PUSH
70473: LD_INT 104
70475: PUSH
70476: LD_INT 105
70478: PUSH
70479: LD_INT 106
70481: PUSH
70482: LD_INT 107
70484: PUSH
70485: LD_INT 108
70487: PUSH
70488: LD_INT 109
70490: PUSH
70491: LD_INT 110
70493: PUSH
70494: LD_INT 111
70496: PUSH
70497: LD_INT 112
70499: PUSH
70500: LD_INT 113
70502: PUSH
70503: LD_INT 114
70505: PUSH
70506: LD_INT 116
70508: PUSH
70509: LD_INT 117
70511: PUSH
70512: LD_INT 118
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: ST_TO_ADDR
70538: GO 70937
70540: LD_INT 18
70542: DOUBLE
70543: EQUAL
70544: IFTRUE 70548
70546: GO 70696
70548: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
70549: LD_ADDR_VAR 0 2
70553: PUSH
70554: LD_INT 2
70556: PUSH
70557: LD_INT 4
70559: PUSH
70560: LD_INT 5
70562: PUSH
70563: LD_INT 7
70565: PUSH
70566: LD_INT 11
70568: PUSH
70569: LD_INT 12
70571: PUSH
70572: LD_INT 15
70574: PUSH
70575: LD_INT 16
70577: PUSH
70578: LD_INT 20
70580: PUSH
70581: LD_INT 21
70583: PUSH
70584: LD_INT 22
70586: PUSH
70587: LD_INT 23
70589: PUSH
70590: LD_INT 25
70592: PUSH
70593: LD_INT 26
70595: PUSH
70596: LD_INT 30
70598: PUSH
70599: LD_INT 31
70601: PUSH
70602: LD_INT 32
70604: PUSH
70605: LD_INT 33
70607: PUSH
70608: LD_INT 34
70610: PUSH
70611: LD_INT 35
70613: PUSH
70614: LD_INT 36
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: PUSH
70640: LD_INT 101
70642: PUSH
70643: LD_INT 102
70645: PUSH
70646: LD_INT 103
70648: PUSH
70649: LD_INT 106
70651: PUSH
70652: LD_INT 108
70654: PUSH
70655: LD_INT 112
70657: PUSH
70658: LD_INT 113
70660: PUSH
70661: LD_INT 114
70663: PUSH
70664: LD_INT 115
70666: PUSH
70667: LD_INT 116
70669: PUSH
70670: LD_INT 117
70672: PUSH
70673: LD_INT 118
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: LIST
70680: LIST
70681: LIST
70682: LIST
70683: LIST
70684: LIST
70685: LIST
70686: LIST
70687: LIST
70688: LIST
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: ST_TO_ADDR
70694: GO 70937
70696: LD_INT 19
70698: DOUBLE
70699: EQUAL
70700: IFTRUE 70704
70702: GO 70936
70704: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
70705: LD_ADDR_VAR 0 2
70709: PUSH
70710: LD_INT 1
70712: PUSH
70713: LD_INT 2
70715: PUSH
70716: LD_INT 3
70718: PUSH
70719: LD_INT 4
70721: PUSH
70722: LD_INT 5
70724: PUSH
70725: LD_INT 6
70727: PUSH
70728: LD_INT 7
70730: PUSH
70731: LD_INT 8
70733: PUSH
70734: LD_INT 9
70736: PUSH
70737: LD_INT 10
70739: PUSH
70740: LD_INT 11
70742: PUSH
70743: LD_INT 12
70745: PUSH
70746: LD_INT 13
70748: PUSH
70749: LD_INT 14
70751: PUSH
70752: LD_INT 15
70754: PUSH
70755: LD_INT 16
70757: PUSH
70758: LD_INT 17
70760: PUSH
70761: LD_INT 18
70763: PUSH
70764: LD_INT 19
70766: PUSH
70767: LD_INT 20
70769: PUSH
70770: LD_INT 21
70772: PUSH
70773: LD_INT 22
70775: PUSH
70776: LD_INT 23
70778: PUSH
70779: LD_INT 24
70781: PUSH
70782: LD_INT 25
70784: PUSH
70785: LD_INT 26
70787: PUSH
70788: LD_INT 27
70790: PUSH
70791: LD_INT 28
70793: PUSH
70794: LD_INT 29
70796: PUSH
70797: LD_INT 30
70799: PUSH
70800: LD_INT 31
70802: PUSH
70803: LD_INT 32
70805: PUSH
70806: LD_INT 33
70808: PUSH
70809: LD_INT 34
70811: PUSH
70812: LD_INT 35
70814: PUSH
70815: LD_INT 36
70817: PUSH
70818: EMPTY
70819: LIST
70820: LIST
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: LIST
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: LIST
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: PUSH
70856: LD_INT 101
70858: PUSH
70859: LD_INT 102
70861: PUSH
70862: LD_INT 103
70864: PUSH
70865: LD_INT 104
70867: PUSH
70868: LD_INT 105
70870: PUSH
70871: LD_INT 106
70873: PUSH
70874: LD_INT 107
70876: PUSH
70877: LD_INT 108
70879: PUSH
70880: LD_INT 109
70882: PUSH
70883: LD_INT 110
70885: PUSH
70886: LD_INT 111
70888: PUSH
70889: LD_INT 112
70891: PUSH
70892: LD_INT 113
70894: PUSH
70895: LD_INT 114
70897: PUSH
70898: LD_INT 115
70900: PUSH
70901: LD_INT 116
70903: PUSH
70904: LD_INT 117
70906: PUSH
70907: LD_INT 118
70909: PUSH
70910: EMPTY
70911: LIST
70912: LIST
70913: LIST
70914: LIST
70915: LIST
70916: LIST
70917: LIST
70918: LIST
70919: LIST
70920: LIST
70921: LIST
70922: LIST
70923: LIST
70924: LIST
70925: LIST
70926: LIST
70927: LIST
70928: LIST
70929: PUSH
70930: EMPTY
70931: LIST
70932: LIST
70933: ST_TO_ADDR
70934: GO 70937
70936: POP
// end else
70937: GO 71168
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
70939: LD_ADDR_VAR 0 2
70943: PUSH
70944: LD_INT 1
70946: PUSH
70947: LD_INT 2
70949: PUSH
70950: LD_INT 3
70952: PUSH
70953: LD_INT 4
70955: PUSH
70956: LD_INT 5
70958: PUSH
70959: LD_INT 6
70961: PUSH
70962: LD_INT 7
70964: PUSH
70965: LD_INT 8
70967: PUSH
70968: LD_INT 9
70970: PUSH
70971: LD_INT 10
70973: PUSH
70974: LD_INT 11
70976: PUSH
70977: LD_INT 12
70979: PUSH
70980: LD_INT 13
70982: PUSH
70983: LD_INT 14
70985: PUSH
70986: LD_INT 15
70988: PUSH
70989: LD_INT 16
70991: PUSH
70992: LD_INT 17
70994: PUSH
70995: LD_INT 18
70997: PUSH
70998: LD_INT 19
71000: PUSH
71001: LD_INT 20
71003: PUSH
71004: LD_INT 21
71006: PUSH
71007: LD_INT 22
71009: PUSH
71010: LD_INT 23
71012: PUSH
71013: LD_INT 24
71015: PUSH
71016: LD_INT 25
71018: PUSH
71019: LD_INT 26
71021: PUSH
71022: LD_INT 27
71024: PUSH
71025: LD_INT 28
71027: PUSH
71028: LD_INT 29
71030: PUSH
71031: LD_INT 30
71033: PUSH
71034: LD_INT 31
71036: PUSH
71037: LD_INT 32
71039: PUSH
71040: LD_INT 33
71042: PUSH
71043: LD_INT 34
71045: PUSH
71046: LD_INT 35
71048: PUSH
71049: LD_INT 36
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: LIST
71065: LIST
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: LIST
71077: LIST
71078: LIST
71079: LIST
71080: LIST
71081: LIST
71082: LIST
71083: LIST
71084: LIST
71085: LIST
71086: LIST
71087: LIST
71088: LIST
71089: PUSH
71090: LD_INT 101
71092: PUSH
71093: LD_INT 102
71095: PUSH
71096: LD_INT 103
71098: PUSH
71099: LD_INT 104
71101: PUSH
71102: LD_INT 105
71104: PUSH
71105: LD_INT 106
71107: PUSH
71108: LD_INT 107
71110: PUSH
71111: LD_INT 108
71113: PUSH
71114: LD_INT 109
71116: PUSH
71117: LD_INT 110
71119: PUSH
71120: LD_INT 111
71122: PUSH
71123: LD_INT 112
71125: PUSH
71126: LD_INT 113
71128: PUSH
71129: LD_INT 114
71131: PUSH
71132: LD_INT 115
71134: PUSH
71135: LD_INT 116
71137: PUSH
71138: LD_INT 117
71140: PUSH
71141: LD_INT 118
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: LIST
71148: LIST
71149: LIST
71150: LIST
71151: LIST
71152: LIST
71153: LIST
71154: LIST
71155: LIST
71156: LIST
71157: LIST
71158: LIST
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: PUSH
71164: EMPTY
71165: LIST
71166: LIST
71167: ST_TO_ADDR
// if result then
71168: LD_VAR 0 2
71172: IFFALSE 71958
// begin normal :=  ;
71174: LD_ADDR_VAR 0 5
71178: PUSH
71179: LD_STRING 
71181: ST_TO_ADDR
// hardcore :=  ;
71182: LD_ADDR_VAR 0 6
71186: PUSH
71187: LD_STRING 
71189: ST_TO_ADDR
// active :=  ;
71190: LD_ADDR_VAR 0 7
71194: PUSH
71195: LD_STRING 
71197: ST_TO_ADDR
// for i = 1 to normalCounter do
71198: LD_ADDR_VAR 0 8
71202: PUSH
71203: DOUBLE
71204: LD_INT 1
71206: DEC
71207: ST_TO_ADDR
71208: LD_EXP 80
71212: PUSH
71213: FOR_TO
71214: IFFALSE 71315
// begin tmp := 0 ;
71216: LD_ADDR_VAR 0 3
71220: PUSH
71221: LD_STRING 0
71223: ST_TO_ADDR
// if result [ 1 ] then
71224: LD_VAR 0 2
71228: PUSH
71229: LD_INT 1
71231: ARRAY
71232: IFFALSE 71297
// if result [ 1 ] [ 1 ] = i then
71234: LD_VAR 0 2
71238: PUSH
71239: LD_INT 1
71241: ARRAY
71242: PUSH
71243: LD_INT 1
71245: ARRAY
71246: PUSH
71247: LD_VAR 0 8
71251: EQUAL
71252: IFFALSE 71297
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
71254: LD_ADDR_VAR 0 2
71258: PUSH
71259: LD_VAR 0 2
71263: PPUSH
71264: LD_INT 1
71266: PPUSH
71267: LD_VAR 0 2
71271: PUSH
71272: LD_INT 1
71274: ARRAY
71275: PPUSH
71276: LD_INT 1
71278: PPUSH
71279: CALL_OW 3
71283: PPUSH
71284: CALL_OW 1
71288: ST_TO_ADDR
// tmp := 1 ;
71289: LD_ADDR_VAR 0 3
71293: PUSH
71294: LD_STRING 1
71296: ST_TO_ADDR
// end ; normal := normal & tmp ;
71297: LD_ADDR_VAR 0 5
71301: PUSH
71302: LD_VAR 0 5
71306: PUSH
71307: LD_VAR 0 3
71311: STR
71312: ST_TO_ADDR
// end ;
71313: GO 71213
71315: POP
71316: POP
// for i = 1 to hardcoreCounter do
71317: LD_ADDR_VAR 0 8
71321: PUSH
71322: DOUBLE
71323: LD_INT 1
71325: DEC
71326: ST_TO_ADDR
71327: LD_EXP 81
71331: PUSH
71332: FOR_TO
71333: IFFALSE 71438
// begin tmp := 0 ;
71335: LD_ADDR_VAR 0 3
71339: PUSH
71340: LD_STRING 0
71342: ST_TO_ADDR
// if result [ 2 ] then
71343: LD_VAR 0 2
71347: PUSH
71348: LD_INT 2
71350: ARRAY
71351: IFFALSE 71420
// if result [ 2 ] [ 1 ] = 100 + i then
71353: LD_VAR 0 2
71357: PUSH
71358: LD_INT 2
71360: ARRAY
71361: PUSH
71362: LD_INT 1
71364: ARRAY
71365: PUSH
71366: LD_INT 100
71368: PUSH
71369: LD_VAR 0 8
71373: PLUS
71374: EQUAL
71375: IFFALSE 71420
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
71377: LD_ADDR_VAR 0 2
71381: PUSH
71382: LD_VAR 0 2
71386: PPUSH
71387: LD_INT 2
71389: PPUSH
71390: LD_VAR 0 2
71394: PUSH
71395: LD_INT 2
71397: ARRAY
71398: PPUSH
71399: LD_INT 1
71401: PPUSH
71402: CALL_OW 3
71406: PPUSH
71407: CALL_OW 1
71411: ST_TO_ADDR
// tmp := 1 ;
71412: LD_ADDR_VAR 0 3
71416: PUSH
71417: LD_STRING 1
71419: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
71420: LD_ADDR_VAR 0 6
71424: PUSH
71425: LD_VAR 0 6
71429: PUSH
71430: LD_VAR 0 3
71434: STR
71435: ST_TO_ADDR
// end ;
71436: GO 71332
71438: POP
71439: POP
// if isGameLoad then
71440: LD_VAR 0 1
71444: IFFALSE 71919
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
71446: LD_ADDR_VAR 0 4
71450: PUSH
71451: LD_EXP 84
71455: PUSH
71456: LD_EXP 83
71460: PUSH
71461: LD_EXP 85
71465: PUSH
71466: LD_EXP 82
71470: PUSH
71471: LD_EXP 86
71475: PUSH
71476: LD_EXP 87
71480: PUSH
71481: LD_EXP 88
71485: PUSH
71486: LD_EXP 89
71490: PUSH
71491: LD_EXP 90
71495: PUSH
71496: LD_EXP 91
71500: PUSH
71501: LD_EXP 92
71505: PUSH
71506: LD_EXP 93
71510: PUSH
71511: LD_EXP 94
71515: PUSH
71516: LD_EXP 95
71520: PUSH
71521: LD_EXP 103
71525: PUSH
71526: LD_EXP 104
71530: PUSH
71531: LD_EXP 105
71535: PUSH
71536: LD_EXP 106
71540: PUSH
71541: LD_EXP 108
71545: PUSH
71546: LD_EXP 109
71550: PUSH
71551: LD_EXP 110
71555: PUSH
71556: LD_EXP 113
71560: PUSH
71561: LD_EXP 115
71565: PUSH
71566: LD_EXP 116
71570: PUSH
71571: LD_EXP 117
71575: PUSH
71576: LD_EXP 119
71580: PUSH
71581: LD_EXP 120
71585: PUSH
71586: LD_EXP 123
71590: PUSH
71591: LD_EXP 124
71595: PUSH
71596: LD_EXP 125
71600: PUSH
71601: LD_EXP 126
71605: PUSH
71606: LD_EXP 127
71610: PUSH
71611: LD_EXP 128
71615: PUSH
71616: LD_EXP 129
71620: PUSH
71621: LD_EXP 130
71625: PUSH
71626: LD_EXP 131
71630: PUSH
71631: LD_EXP 96
71635: PUSH
71636: LD_EXP 97
71640: PUSH
71641: LD_EXP 100
71645: PUSH
71646: LD_EXP 101
71650: PUSH
71651: LD_EXP 102
71655: PUSH
71656: LD_EXP 98
71660: PUSH
71661: LD_EXP 99
71665: PUSH
71666: LD_EXP 107
71670: PUSH
71671: LD_EXP 111
71675: PUSH
71676: LD_EXP 112
71680: PUSH
71681: LD_EXP 114
71685: PUSH
71686: LD_EXP 118
71690: PUSH
71691: LD_EXP 121
71695: PUSH
71696: LD_EXP 122
71700: PUSH
71701: LD_EXP 132
71705: PUSH
71706: LD_EXP 133
71710: PUSH
71711: LD_EXP 134
71715: PUSH
71716: LD_EXP 135
71720: PUSH
71721: EMPTY
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: LIST
71737: LIST
71738: LIST
71739: LIST
71740: LIST
71741: LIST
71742: LIST
71743: LIST
71744: LIST
71745: LIST
71746: LIST
71747: LIST
71748: LIST
71749: LIST
71750: LIST
71751: LIST
71752: LIST
71753: LIST
71754: LIST
71755: LIST
71756: LIST
71757: LIST
71758: LIST
71759: LIST
71760: LIST
71761: LIST
71762: LIST
71763: LIST
71764: LIST
71765: LIST
71766: LIST
71767: LIST
71768: LIST
71769: LIST
71770: LIST
71771: LIST
71772: LIST
71773: LIST
71774: LIST
71775: LIST
71776: ST_TO_ADDR
// tmp :=  ;
71777: LD_ADDR_VAR 0 3
71781: PUSH
71782: LD_STRING 
71784: ST_TO_ADDR
// for i = 1 to normalCounter do
71785: LD_ADDR_VAR 0 8
71789: PUSH
71790: DOUBLE
71791: LD_INT 1
71793: DEC
71794: ST_TO_ADDR
71795: LD_EXP 80
71799: PUSH
71800: FOR_TO
71801: IFFALSE 71837
// begin if flags [ i ] then
71803: LD_VAR 0 4
71807: PUSH
71808: LD_VAR 0 8
71812: ARRAY
71813: IFFALSE 71835
// tmp := tmp & i & ; ;
71815: LD_ADDR_VAR 0 3
71819: PUSH
71820: LD_VAR 0 3
71824: PUSH
71825: LD_VAR 0 8
71829: STR
71830: PUSH
71831: LD_STRING ;
71833: STR
71834: ST_TO_ADDR
// end ;
71835: GO 71800
71837: POP
71838: POP
// for i = 1 to hardcoreCounter do
71839: LD_ADDR_VAR 0 8
71843: PUSH
71844: DOUBLE
71845: LD_INT 1
71847: DEC
71848: ST_TO_ADDR
71849: LD_EXP 81
71853: PUSH
71854: FOR_TO
71855: IFFALSE 71901
// begin if flags [ normalCounter + i ] then
71857: LD_VAR 0 4
71861: PUSH
71862: LD_EXP 80
71866: PUSH
71867: LD_VAR 0 8
71871: PLUS
71872: ARRAY
71873: IFFALSE 71899
// tmp := tmp & ( 100 + i ) & ; ;
71875: LD_ADDR_VAR 0 3
71879: PUSH
71880: LD_VAR 0 3
71884: PUSH
71885: LD_INT 100
71887: PUSH
71888: LD_VAR 0 8
71892: PLUS
71893: STR
71894: PUSH
71895: LD_STRING ;
71897: STR
71898: ST_TO_ADDR
// end ;
71899: GO 71854
71901: POP
71902: POP
// if tmp then
71903: LD_VAR 0 3
71907: IFFALSE 71919
// active := tmp ;
71909: LD_ADDR_VAR 0 7
71913: PUSH
71914: LD_VAR 0 3
71918: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
71919: LD_STRING getStreamItemsFromMission("
71921: PUSH
71922: LD_VAR 0 5
71926: STR
71927: PUSH
71928: LD_STRING ","
71930: STR
71931: PUSH
71932: LD_VAR 0 6
71936: STR
71937: PUSH
71938: LD_STRING ","
71940: STR
71941: PUSH
71942: LD_VAR 0 7
71946: STR
71947: PUSH
71948: LD_STRING ")
71950: STR
71951: PPUSH
71952: CALL_OW 559
// end else
71956: GO 71965
// ToLua ( getStreamItemsFromMission("","","") ) ;
71958: LD_STRING getStreamItemsFromMission("","","")
71960: PPUSH
71961: CALL_OW 559
// end ;
71965: LD_VAR 0 2
71969: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
71970: LD_EXP 79
71974: PUSH
71975: LD_EXP 84
71979: AND
71980: IFFALSE 72104
71982: GO 71984
71984: DISABLE
71985: LD_INT 0
71987: PPUSH
71988: PPUSH
// begin enable ;
71989: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
71990: LD_ADDR_VAR 0 2
71994: PUSH
71995: LD_INT 22
71997: PUSH
71998: LD_OWVAR 2
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: PUSH
72007: LD_INT 2
72009: PUSH
72010: LD_INT 34
72012: PUSH
72013: LD_INT 7
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: PUSH
72020: LD_INT 34
72022: PUSH
72023: LD_INT 45
72025: PUSH
72026: EMPTY
72027: LIST
72028: LIST
72029: PUSH
72030: LD_INT 34
72032: PUSH
72033: LD_INT 28
72035: PUSH
72036: EMPTY
72037: LIST
72038: LIST
72039: PUSH
72040: LD_INT 34
72042: PUSH
72043: LD_INT 47
72045: PUSH
72046: EMPTY
72047: LIST
72048: LIST
72049: PUSH
72050: EMPTY
72051: LIST
72052: LIST
72053: LIST
72054: LIST
72055: LIST
72056: PUSH
72057: EMPTY
72058: LIST
72059: LIST
72060: PPUSH
72061: CALL_OW 69
72065: ST_TO_ADDR
// if not tmp then
72066: LD_VAR 0 2
72070: NOT
72071: IFFALSE 72075
// exit ;
72073: GO 72104
// for i in tmp do
72075: LD_ADDR_VAR 0 1
72079: PUSH
72080: LD_VAR 0 2
72084: PUSH
72085: FOR_IN
72086: IFFALSE 72102
// begin SetLives ( i , 0 ) ;
72088: LD_VAR 0 1
72092: PPUSH
72093: LD_INT 0
72095: PPUSH
72096: CALL_OW 234
// end ;
72100: GO 72085
72102: POP
72103: POP
// end ;
72104: PPOPN 2
72106: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
72107: LD_EXP 79
72111: PUSH
72112: LD_EXP 85
72116: AND
72117: IFFALSE 72201
72119: GO 72121
72121: DISABLE
72122: LD_INT 0
72124: PPUSH
72125: PPUSH
// begin enable ;
72126: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
72127: LD_ADDR_VAR 0 2
72131: PUSH
72132: LD_INT 22
72134: PUSH
72135: LD_OWVAR 2
72139: PUSH
72140: EMPTY
72141: LIST
72142: LIST
72143: PUSH
72144: LD_INT 32
72146: PUSH
72147: LD_INT 3
72149: PUSH
72150: EMPTY
72151: LIST
72152: LIST
72153: PUSH
72154: EMPTY
72155: LIST
72156: LIST
72157: PPUSH
72158: CALL_OW 69
72162: ST_TO_ADDR
// if not tmp then
72163: LD_VAR 0 2
72167: NOT
72168: IFFALSE 72172
// exit ;
72170: GO 72201
// for i in tmp do
72172: LD_ADDR_VAR 0 1
72176: PUSH
72177: LD_VAR 0 2
72181: PUSH
72182: FOR_IN
72183: IFFALSE 72199
// begin SetLives ( i , 0 ) ;
72185: LD_VAR 0 1
72189: PPUSH
72190: LD_INT 0
72192: PPUSH
72193: CALL_OW 234
// end ;
72197: GO 72182
72199: POP
72200: POP
// end ;
72201: PPOPN 2
72203: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
72204: LD_EXP 79
72208: PUSH
72209: LD_EXP 82
72213: AND
72214: IFFALSE 72307
72216: GO 72218
72218: DISABLE
72219: LD_INT 0
72221: PPUSH
// begin enable ;
72222: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
72223: LD_ADDR_VAR 0 1
72227: PUSH
72228: LD_INT 22
72230: PUSH
72231: LD_OWVAR 2
72235: PUSH
72236: EMPTY
72237: LIST
72238: LIST
72239: PUSH
72240: LD_INT 2
72242: PUSH
72243: LD_INT 25
72245: PUSH
72246: LD_INT 5
72248: PUSH
72249: EMPTY
72250: LIST
72251: LIST
72252: PUSH
72253: LD_INT 25
72255: PUSH
72256: LD_INT 9
72258: PUSH
72259: EMPTY
72260: LIST
72261: LIST
72262: PUSH
72263: LD_INT 25
72265: PUSH
72266: LD_INT 8
72268: PUSH
72269: EMPTY
72270: LIST
72271: LIST
72272: PUSH
72273: EMPTY
72274: LIST
72275: LIST
72276: LIST
72277: LIST
72278: PUSH
72279: EMPTY
72280: LIST
72281: LIST
72282: PPUSH
72283: CALL_OW 69
72287: PUSH
72288: FOR_IN
72289: IFFALSE 72305
// begin SetClass ( i , 1 ) ;
72291: LD_VAR 0 1
72295: PPUSH
72296: LD_INT 1
72298: PPUSH
72299: CALL_OW 336
// end ;
72303: GO 72288
72305: POP
72306: POP
// end ;
72307: PPOPN 1
72309: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
72310: LD_EXP 79
72314: PUSH
72315: LD_EXP 83
72319: AND
72320: PUSH
72321: LD_OWVAR 65
72325: PUSH
72326: LD_INT 7
72328: LESS
72329: AND
72330: IFFALSE 72344
72332: GO 72334
72334: DISABLE
// begin enable ;
72335: ENABLE
// game_speed := 7 ;
72336: LD_ADDR_OWVAR 65
72340: PUSH
72341: LD_INT 7
72343: ST_TO_ADDR
// end ;
72344: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
72345: LD_EXP 79
72349: PUSH
72350: LD_EXP 86
72354: AND
72355: IFFALSE 72557
72357: GO 72359
72359: DISABLE
72360: LD_INT 0
72362: PPUSH
72363: PPUSH
72364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
72365: LD_ADDR_VAR 0 3
72369: PUSH
72370: LD_INT 81
72372: PUSH
72373: LD_OWVAR 2
72377: PUSH
72378: EMPTY
72379: LIST
72380: LIST
72381: PUSH
72382: LD_INT 21
72384: PUSH
72385: LD_INT 1
72387: PUSH
72388: EMPTY
72389: LIST
72390: LIST
72391: PUSH
72392: EMPTY
72393: LIST
72394: LIST
72395: PPUSH
72396: CALL_OW 69
72400: ST_TO_ADDR
// if not tmp then
72401: LD_VAR 0 3
72405: NOT
72406: IFFALSE 72410
// exit ;
72408: GO 72557
// if tmp > 5 then
72410: LD_VAR 0 3
72414: PUSH
72415: LD_INT 5
72417: GREATER
72418: IFFALSE 72430
// k := 5 else
72420: LD_ADDR_VAR 0 2
72424: PUSH
72425: LD_INT 5
72427: ST_TO_ADDR
72428: GO 72440
// k := tmp ;
72430: LD_ADDR_VAR 0 2
72434: PUSH
72435: LD_VAR 0 3
72439: ST_TO_ADDR
// for i := 1 to k do
72440: LD_ADDR_VAR 0 1
72444: PUSH
72445: DOUBLE
72446: LD_INT 1
72448: DEC
72449: ST_TO_ADDR
72450: LD_VAR 0 2
72454: PUSH
72455: FOR_TO
72456: IFFALSE 72555
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
72458: LD_VAR 0 3
72462: PUSH
72463: LD_VAR 0 1
72467: ARRAY
72468: PPUSH
72469: LD_VAR 0 1
72473: PUSH
72474: LD_INT 4
72476: MOD
72477: PUSH
72478: LD_INT 1
72480: PLUS
72481: PPUSH
72482: CALL_OW 259
72486: PUSH
72487: LD_INT 10
72489: LESS
72490: IFFALSE 72553
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
72492: LD_VAR 0 3
72496: PUSH
72497: LD_VAR 0 1
72501: ARRAY
72502: PPUSH
72503: LD_VAR 0 1
72507: PUSH
72508: LD_INT 4
72510: MOD
72511: PUSH
72512: LD_INT 1
72514: PLUS
72515: PPUSH
72516: LD_VAR 0 3
72520: PUSH
72521: LD_VAR 0 1
72525: ARRAY
72526: PPUSH
72527: LD_VAR 0 1
72531: PUSH
72532: LD_INT 4
72534: MOD
72535: PUSH
72536: LD_INT 1
72538: PLUS
72539: PPUSH
72540: CALL_OW 259
72544: PUSH
72545: LD_INT 1
72547: PLUS
72548: PPUSH
72549: CALL_OW 237
72553: GO 72455
72555: POP
72556: POP
// end ;
72557: PPOPN 3
72559: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
72560: LD_EXP 79
72564: PUSH
72565: LD_EXP 87
72569: AND
72570: IFFALSE 72590
72572: GO 72574
72574: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
72575: LD_INT 4
72577: PPUSH
72578: LD_OWVAR 2
72582: PPUSH
72583: LD_INT 0
72585: PPUSH
72586: CALL_OW 324
72590: END
// every 0 0$1 trigger StreamModeActive and sShovel do
72591: LD_EXP 79
72595: PUSH
72596: LD_EXP 116
72600: AND
72601: IFFALSE 72621
72603: GO 72605
72605: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
72606: LD_INT 19
72608: PPUSH
72609: LD_OWVAR 2
72613: PPUSH
72614: LD_INT 0
72616: PPUSH
72617: CALL_OW 324
72621: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
72622: LD_EXP 79
72626: PUSH
72627: LD_EXP 88
72631: AND
72632: IFFALSE 72734
72634: GO 72636
72636: DISABLE
72637: LD_INT 0
72639: PPUSH
72640: PPUSH
// begin enable ;
72641: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
72642: LD_ADDR_VAR 0 2
72646: PUSH
72647: LD_INT 22
72649: PUSH
72650: LD_OWVAR 2
72654: PUSH
72655: EMPTY
72656: LIST
72657: LIST
72658: PUSH
72659: LD_INT 2
72661: PUSH
72662: LD_INT 34
72664: PUSH
72665: LD_INT 11
72667: PUSH
72668: EMPTY
72669: LIST
72670: LIST
72671: PUSH
72672: LD_INT 34
72674: PUSH
72675: LD_INT 30
72677: PUSH
72678: EMPTY
72679: LIST
72680: LIST
72681: PUSH
72682: EMPTY
72683: LIST
72684: LIST
72685: LIST
72686: PUSH
72687: EMPTY
72688: LIST
72689: LIST
72690: PPUSH
72691: CALL_OW 69
72695: ST_TO_ADDR
// if not tmp then
72696: LD_VAR 0 2
72700: NOT
72701: IFFALSE 72705
// exit ;
72703: GO 72734
// for i in tmp do
72705: LD_ADDR_VAR 0 1
72709: PUSH
72710: LD_VAR 0 2
72714: PUSH
72715: FOR_IN
72716: IFFALSE 72732
// begin SetLives ( i , 0 ) ;
72718: LD_VAR 0 1
72722: PPUSH
72723: LD_INT 0
72725: PPUSH
72726: CALL_OW 234
// end ;
72730: GO 72715
72732: POP
72733: POP
// end ;
72734: PPOPN 2
72736: END
// every 0 0$1 trigger StreamModeActive and sBunker do
72737: LD_EXP 79
72741: PUSH
72742: LD_EXP 89
72746: AND
72747: IFFALSE 72767
72749: GO 72751
72751: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
72752: LD_INT 32
72754: PPUSH
72755: LD_OWVAR 2
72759: PPUSH
72760: LD_INT 0
72762: PPUSH
72763: CALL_OW 324
72767: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
72768: LD_EXP 79
72772: PUSH
72773: LD_EXP 90
72777: AND
72778: IFFALSE 72959
72780: GO 72782
72782: DISABLE
72783: LD_INT 0
72785: PPUSH
72786: PPUSH
72787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
72788: LD_ADDR_VAR 0 2
72792: PUSH
72793: LD_INT 22
72795: PUSH
72796: LD_OWVAR 2
72800: PUSH
72801: EMPTY
72802: LIST
72803: LIST
72804: PUSH
72805: LD_INT 33
72807: PUSH
72808: LD_INT 3
72810: PUSH
72811: EMPTY
72812: LIST
72813: LIST
72814: PUSH
72815: EMPTY
72816: LIST
72817: LIST
72818: PPUSH
72819: CALL_OW 69
72823: ST_TO_ADDR
// if not tmp then
72824: LD_VAR 0 2
72828: NOT
72829: IFFALSE 72833
// exit ;
72831: GO 72959
// side := 0 ;
72833: LD_ADDR_VAR 0 3
72837: PUSH
72838: LD_INT 0
72840: ST_TO_ADDR
// for i := 1 to 8 do
72841: LD_ADDR_VAR 0 1
72845: PUSH
72846: DOUBLE
72847: LD_INT 1
72849: DEC
72850: ST_TO_ADDR
72851: LD_INT 8
72853: PUSH
72854: FOR_TO
72855: IFFALSE 72903
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
72857: LD_OWVAR 2
72861: PUSH
72862: LD_VAR 0 1
72866: NONEQUAL
72867: PUSH
72868: LD_OWVAR 2
72872: PPUSH
72873: LD_VAR 0 1
72877: PPUSH
72878: CALL_OW 81
72882: PUSH
72883: LD_INT 2
72885: EQUAL
72886: AND
72887: IFFALSE 72901
// begin side := i ;
72889: LD_ADDR_VAR 0 3
72893: PUSH
72894: LD_VAR 0 1
72898: ST_TO_ADDR
// break ;
72899: GO 72903
// end ;
72901: GO 72854
72903: POP
72904: POP
// if not side then
72905: LD_VAR 0 3
72909: NOT
72910: IFFALSE 72914
// exit ;
72912: GO 72959
// for i := 1 to tmp do
72914: LD_ADDR_VAR 0 1
72918: PUSH
72919: DOUBLE
72920: LD_INT 1
72922: DEC
72923: ST_TO_ADDR
72924: LD_VAR 0 2
72928: PUSH
72929: FOR_TO
72930: IFFALSE 72957
// if Prob ( 60 ) then
72932: LD_INT 60
72934: PPUSH
72935: CALL_OW 13
72939: IFFALSE 72955
// SetSide ( i , side ) ;
72941: LD_VAR 0 1
72945: PPUSH
72946: LD_VAR 0 3
72950: PPUSH
72951: CALL_OW 235
72955: GO 72929
72957: POP
72958: POP
// end ;
72959: PPOPN 3
72961: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
72962: LD_EXP 79
72966: PUSH
72967: LD_EXP 92
72971: AND
72972: IFFALSE 73091
72974: GO 72976
72976: DISABLE
72977: LD_INT 0
72979: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
72980: LD_ADDR_VAR 0 1
72984: PUSH
72985: LD_INT 22
72987: PUSH
72988: LD_OWVAR 2
72992: PUSH
72993: EMPTY
72994: LIST
72995: LIST
72996: PUSH
72997: LD_INT 21
72999: PUSH
73000: LD_INT 1
73002: PUSH
73003: EMPTY
73004: LIST
73005: LIST
73006: PUSH
73007: LD_INT 3
73009: PUSH
73010: LD_INT 23
73012: PUSH
73013: LD_INT 0
73015: PUSH
73016: EMPTY
73017: LIST
73018: LIST
73019: PUSH
73020: EMPTY
73021: LIST
73022: LIST
73023: PUSH
73024: EMPTY
73025: LIST
73026: LIST
73027: LIST
73028: PPUSH
73029: CALL_OW 69
73033: PUSH
73034: FOR_IN
73035: IFFALSE 73089
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
73037: LD_VAR 0 1
73041: PPUSH
73042: CALL_OW 257
73046: PUSH
73047: LD_INT 1
73049: PUSH
73050: LD_INT 2
73052: PUSH
73053: LD_INT 3
73055: PUSH
73056: LD_INT 4
73058: PUSH
73059: EMPTY
73060: LIST
73061: LIST
73062: LIST
73063: LIST
73064: IN
73065: IFFALSE 73087
// SetClass ( un , rand ( 1 , 4 ) ) ;
73067: LD_VAR 0 1
73071: PPUSH
73072: LD_INT 1
73074: PPUSH
73075: LD_INT 4
73077: PPUSH
73078: CALL_OW 12
73082: PPUSH
73083: CALL_OW 336
73087: GO 73034
73089: POP
73090: POP
// end ;
73091: PPOPN 1
73093: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
73094: LD_EXP 79
73098: PUSH
73099: LD_EXP 91
73103: AND
73104: IFFALSE 73183
73106: GO 73108
73108: DISABLE
73109: LD_INT 0
73111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
73112: LD_ADDR_VAR 0 1
73116: PUSH
73117: LD_INT 22
73119: PUSH
73120: LD_OWVAR 2
73124: PUSH
73125: EMPTY
73126: LIST
73127: LIST
73128: PUSH
73129: LD_INT 21
73131: PUSH
73132: LD_INT 3
73134: PUSH
73135: EMPTY
73136: LIST
73137: LIST
73138: PUSH
73139: EMPTY
73140: LIST
73141: LIST
73142: PPUSH
73143: CALL_OW 69
73147: ST_TO_ADDR
// if not tmp then
73148: LD_VAR 0 1
73152: NOT
73153: IFFALSE 73157
// exit ;
73155: GO 73183
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
73157: LD_VAR 0 1
73161: PUSH
73162: LD_INT 1
73164: PPUSH
73165: LD_VAR 0 1
73169: PPUSH
73170: CALL_OW 12
73174: ARRAY
73175: PPUSH
73176: LD_INT 100
73178: PPUSH
73179: CALL_OW 234
// end ;
73183: PPOPN 1
73185: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
73186: LD_EXP 79
73190: PUSH
73191: LD_EXP 93
73195: AND
73196: IFFALSE 73294
73198: GO 73200
73200: DISABLE
73201: LD_INT 0
73203: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73204: LD_ADDR_VAR 0 1
73208: PUSH
73209: LD_INT 22
73211: PUSH
73212: LD_OWVAR 2
73216: PUSH
73217: EMPTY
73218: LIST
73219: LIST
73220: PUSH
73221: LD_INT 21
73223: PUSH
73224: LD_INT 1
73226: PUSH
73227: EMPTY
73228: LIST
73229: LIST
73230: PUSH
73231: EMPTY
73232: LIST
73233: LIST
73234: PPUSH
73235: CALL_OW 69
73239: ST_TO_ADDR
// if not tmp then
73240: LD_VAR 0 1
73244: NOT
73245: IFFALSE 73249
// exit ;
73247: GO 73294
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
73249: LD_VAR 0 1
73253: PUSH
73254: LD_INT 1
73256: PPUSH
73257: LD_VAR 0 1
73261: PPUSH
73262: CALL_OW 12
73266: ARRAY
73267: PPUSH
73268: LD_INT 1
73270: PPUSH
73271: LD_INT 4
73273: PPUSH
73274: CALL_OW 12
73278: PPUSH
73279: LD_INT 3000
73281: PPUSH
73282: LD_INT 9000
73284: PPUSH
73285: CALL_OW 12
73289: PPUSH
73290: CALL_OW 492
// end ;
73294: PPOPN 1
73296: END
// every 0 0$1 trigger StreamModeActive and sDepot do
73297: LD_EXP 79
73301: PUSH
73302: LD_EXP 94
73306: AND
73307: IFFALSE 73327
73309: GO 73311
73311: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
73312: LD_INT 1
73314: PPUSH
73315: LD_OWVAR 2
73319: PPUSH
73320: LD_INT 0
73322: PPUSH
73323: CALL_OW 324
73327: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
73328: LD_EXP 79
73332: PUSH
73333: LD_EXP 95
73337: AND
73338: IFFALSE 73421
73340: GO 73342
73342: DISABLE
73343: LD_INT 0
73345: PPUSH
73346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
73347: LD_ADDR_VAR 0 2
73351: PUSH
73352: LD_INT 22
73354: PUSH
73355: LD_OWVAR 2
73359: PUSH
73360: EMPTY
73361: LIST
73362: LIST
73363: PUSH
73364: LD_INT 21
73366: PUSH
73367: LD_INT 3
73369: PUSH
73370: EMPTY
73371: LIST
73372: LIST
73373: PUSH
73374: EMPTY
73375: LIST
73376: LIST
73377: PPUSH
73378: CALL_OW 69
73382: ST_TO_ADDR
// if not tmp then
73383: LD_VAR 0 2
73387: NOT
73388: IFFALSE 73392
// exit ;
73390: GO 73421
// for i in tmp do
73392: LD_ADDR_VAR 0 1
73396: PUSH
73397: LD_VAR 0 2
73401: PUSH
73402: FOR_IN
73403: IFFALSE 73419
// SetBLevel ( i , 10 ) ;
73405: LD_VAR 0 1
73409: PPUSH
73410: LD_INT 10
73412: PPUSH
73413: CALL_OW 241
73417: GO 73402
73419: POP
73420: POP
// end ;
73421: PPOPN 2
73423: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
73424: LD_EXP 79
73428: PUSH
73429: LD_EXP 96
73433: AND
73434: IFFALSE 73545
73436: GO 73438
73438: DISABLE
73439: LD_INT 0
73441: PPUSH
73442: PPUSH
73443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73444: LD_ADDR_VAR 0 3
73448: PUSH
73449: LD_INT 22
73451: PUSH
73452: LD_OWVAR 2
73456: PUSH
73457: EMPTY
73458: LIST
73459: LIST
73460: PUSH
73461: LD_INT 25
73463: PUSH
73464: LD_INT 1
73466: PUSH
73467: EMPTY
73468: LIST
73469: LIST
73470: PUSH
73471: EMPTY
73472: LIST
73473: LIST
73474: PPUSH
73475: CALL_OW 69
73479: ST_TO_ADDR
// if not tmp then
73480: LD_VAR 0 3
73484: NOT
73485: IFFALSE 73489
// exit ;
73487: GO 73545
// un := tmp [ rand ( 1 , tmp ) ] ;
73489: LD_ADDR_VAR 0 2
73493: PUSH
73494: LD_VAR 0 3
73498: PUSH
73499: LD_INT 1
73501: PPUSH
73502: LD_VAR 0 3
73506: PPUSH
73507: CALL_OW 12
73511: ARRAY
73512: ST_TO_ADDR
// if Crawls ( un ) then
73513: LD_VAR 0 2
73517: PPUSH
73518: CALL_OW 318
73522: IFFALSE 73533
// ComWalk ( un ) ;
73524: LD_VAR 0 2
73528: PPUSH
73529: CALL_OW 138
// SetClass ( un , class_sniper ) ;
73533: LD_VAR 0 2
73537: PPUSH
73538: LD_INT 5
73540: PPUSH
73541: CALL_OW 336
// end ;
73545: PPOPN 3
73547: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
73548: LD_EXP 79
73552: PUSH
73553: LD_EXP 97
73557: AND
73558: PUSH
73559: LD_OWVAR 67
73563: PUSH
73564: LD_INT 4
73566: LESS
73567: AND
73568: IFFALSE 73587
73570: GO 73572
73572: DISABLE
// begin Difficulty := Difficulty + 1 ;
73573: LD_ADDR_OWVAR 67
73577: PUSH
73578: LD_OWVAR 67
73582: PUSH
73583: LD_INT 1
73585: PLUS
73586: ST_TO_ADDR
// end ;
73587: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
73588: LD_EXP 79
73592: PUSH
73593: LD_EXP 98
73597: AND
73598: IFFALSE 73701
73600: GO 73602
73602: DISABLE
73603: LD_INT 0
73605: PPUSH
// begin for i := 1 to 5 do
73606: LD_ADDR_VAR 0 1
73610: PUSH
73611: DOUBLE
73612: LD_INT 1
73614: DEC
73615: ST_TO_ADDR
73616: LD_INT 5
73618: PUSH
73619: FOR_TO
73620: IFFALSE 73699
// begin uc_nation := nation_nature ;
73622: LD_ADDR_OWVAR 21
73626: PUSH
73627: LD_INT 0
73629: ST_TO_ADDR
// uc_side := 0 ;
73630: LD_ADDR_OWVAR 20
73634: PUSH
73635: LD_INT 0
73637: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
73638: LD_ADDR_OWVAR 29
73642: PUSH
73643: LD_INT 12
73645: PUSH
73646: LD_INT 12
73648: PUSH
73649: EMPTY
73650: LIST
73651: LIST
73652: ST_TO_ADDR
// hc_agressivity := 20 ;
73653: LD_ADDR_OWVAR 35
73657: PUSH
73658: LD_INT 20
73660: ST_TO_ADDR
// hc_class := class_tiger ;
73661: LD_ADDR_OWVAR 28
73665: PUSH
73666: LD_INT 14
73668: ST_TO_ADDR
// hc_gallery :=  ;
73669: LD_ADDR_OWVAR 33
73673: PUSH
73674: LD_STRING 
73676: ST_TO_ADDR
// hc_name :=  ;
73677: LD_ADDR_OWVAR 26
73681: PUSH
73682: LD_STRING 
73684: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
73685: CALL_OW 44
73689: PPUSH
73690: LD_INT 0
73692: PPUSH
73693: CALL_OW 51
// end ;
73697: GO 73619
73699: POP
73700: POP
// end ;
73701: PPOPN 1
73703: END
// every 0 0$1 trigger StreamModeActive and sBomb do
73704: LD_EXP 79
73708: PUSH
73709: LD_EXP 99
73713: AND
73714: IFFALSE 73723
73716: GO 73718
73718: DISABLE
// StreamSibBomb ;
73719: CALL 73724 0 0
73723: END
// export function StreamSibBomb ; var i , x , y ; begin
73724: LD_INT 0
73726: PPUSH
73727: PPUSH
73728: PPUSH
73729: PPUSH
// result := false ;
73730: LD_ADDR_VAR 0 1
73734: PUSH
73735: LD_INT 0
73737: ST_TO_ADDR
// for i := 1 to 16 do
73738: LD_ADDR_VAR 0 2
73742: PUSH
73743: DOUBLE
73744: LD_INT 1
73746: DEC
73747: ST_TO_ADDR
73748: LD_INT 16
73750: PUSH
73751: FOR_TO
73752: IFFALSE 73951
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
73754: LD_ADDR_VAR 0 3
73758: PUSH
73759: LD_INT 10
73761: PUSH
73762: LD_INT 20
73764: PUSH
73765: LD_INT 30
73767: PUSH
73768: LD_INT 40
73770: PUSH
73771: LD_INT 50
73773: PUSH
73774: LD_INT 60
73776: PUSH
73777: LD_INT 70
73779: PUSH
73780: LD_INT 80
73782: PUSH
73783: LD_INT 90
73785: PUSH
73786: LD_INT 100
73788: PUSH
73789: LD_INT 110
73791: PUSH
73792: LD_INT 120
73794: PUSH
73795: LD_INT 130
73797: PUSH
73798: LD_INT 140
73800: PUSH
73801: LD_INT 150
73803: PUSH
73804: EMPTY
73805: LIST
73806: LIST
73807: LIST
73808: LIST
73809: LIST
73810: LIST
73811: LIST
73812: LIST
73813: LIST
73814: LIST
73815: LIST
73816: LIST
73817: LIST
73818: LIST
73819: LIST
73820: PUSH
73821: LD_INT 1
73823: PPUSH
73824: LD_INT 15
73826: PPUSH
73827: CALL_OW 12
73831: ARRAY
73832: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
73833: LD_ADDR_VAR 0 4
73837: PUSH
73838: LD_INT 10
73840: PUSH
73841: LD_INT 20
73843: PUSH
73844: LD_INT 30
73846: PUSH
73847: LD_INT 40
73849: PUSH
73850: LD_INT 50
73852: PUSH
73853: LD_INT 60
73855: PUSH
73856: LD_INT 70
73858: PUSH
73859: LD_INT 80
73861: PUSH
73862: LD_INT 90
73864: PUSH
73865: LD_INT 100
73867: PUSH
73868: LD_INT 110
73870: PUSH
73871: LD_INT 120
73873: PUSH
73874: LD_INT 130
73876: PUSH
73877: LD_INT 140
73879: PUSH
73880: LD_INT 150
73882: PUSH
73883: EMPTY
73884: LIST
73885: LIST
73886: LIST
73887: LIST
73888: LIST
73889: LIST
73890: LIST
73891: LIST
73892: LIST
73893: LIST
73894: LIST
73895: LIST
73896: LIST
73897: LIST
73898: LIST
73899: PUSH
73900: LD_INT 1
73902: PPUSH
73903: LD_INT 15
73905: PPUSH
73906: CALL_OW 12
73910: ARRAY
73911: ST_TO_ADDR
// if ValidHex ( x , y ) then
73912: LD_VAR 0 3
73916: PPUSH
73917: LD_VAR 0 4
73921: PPUSH
73922: CALL_OW 488
73926: IFFALSE 73949
// begin result := [ x , y ] ;
73928: LD_ADDR_VAR 0 1
73932: PUSH
73933: LD_VAR 0 3
73937: PUSH
73938: LD_VAR 0 4
73942: PUSH
73943: EMPTY
73944: LIST
73945: LIST
73946: ST_TO_ADDR
// break ;
73947: GO 73951
// end ; end ;
73949: GO 73751
73951: POP
73952: POP
// if result then
73953: LD_VAR 0 1
73957: IFFALSE 74017
// begin ToLua ( playSibBomb() ) ;
73959: LD_STRING playSibBomb()
73961: PPUSH
73962: CALL_OW 559
// wait ( 0 0$14 ) ;
73966: LD_INT 490
73968: PPUSH
73969: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
73973: LD_VAR 0 1
73977: PUSH
73978: LD_INT 1
73980: ARRAY
73981: PPUSH
73982: LD_VAR 0 1
73986: PUSH
73987: LD_INT 2
73989: ARRAY
73990: PPUSH
73991: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
73995: LD_VAR 0 1
73999: PUSH
74000: LD_INT 1
74002: ARRAY
74003: PPUSH
74004: LD_VAR 0 1
74008: PUSH
74009: LD_INT 2
74011: ARRAY
74012: PPUSH
74013: CALL_OW 429
// end ; end ;
74017: LD_VAR 0 1
74021: RET
// every 0 0$1 trigger StreamModeActive and sReset do
74022: LD_EXP 79
74026: PUSH
74027: LD_EXP 101
74031: AND
74032: IFFALSE 74044
74034: GO 74036
74036: DISABLE
// YouLost (  ) ;
74037: LD_STRING 
74039: PPUSH
74040: CALL_OW 104
74044: END
// every 0 0$1 trigger StreamModeActive and sFog do
74045: LD_EXP 79
74049: PUSH
74050: LD_EXP 100
74054: AND
74055: IFFALSE 74069
74057: GO 74059
74059: DISABLE
// FogOff ( your_side ) ;
74060: LD_OWVAR 2
74064: PPUSH
74065: CALL_OW 344
74069: END
// every 0 0$1 trigger StreamModeActive and sSun do
74070: LD_EXP 79
74074: PUSH
74075: LD_EXP 102
74079: AND
74080: IFFALSE 74108
74082: GO 74084
74084: DISABLE
// begin solar_recharge_percent := 0 ;
74085: LD_ADDR_OWVAR 79
74089: PUSH
74090: LD_INT 0
74092: ST_TO_ADDR
// wait ( 5 5$00 ) ;
74093: LD_INT 10500
74095: PPUSH
74096: CALL_OW 67
// solar_recharge_percent := 100 ;
74100: LD_ADDR_OWVAR 79
74104: PUSH
74105: LD_INT 100
74107: ST_TO_ADDR
// end ;
74108: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
74109: LD_EXP 79
74113: PUSH
74114: LD_EXP 103
74118: AND
74119: IFFALSE 74358
74121: GO 74123
74123: DISABLE
74124: LD_INT 0
74126: PPUSH
74127: PPUSH
74128: PPUSH
// begin tmp := [ ] ;
74129: LD_ADDR_VAR 0 3
74133: PUSH
74134: EMPTY
74135: ST_TO_ADDR
// for i := 1 to 6 do
74136: LD_ADDR_VAR 0 1
74140: PUSH
74141: DOUBLE
74142: LD_INT 1
74144: DEC
74145: ST_TO_ADDR
74146: LD_INT 6
74148: PUSH
74149: FOR_TO
74150: IFFALSE 74255
// begin uc_nation := nation_nature ;
74152: LD_ADDR_OWVAR 21
74156: PUSH
74157: LD_INT 0
74159: ST_TO_ADDR
// uc_side := 0 ;
74160: LD_ADDR_OWVAR 20
74164: PUSH
74165: LD_INT 0
74167: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
74168: LD_ADDR_OWVAR 29
74172: PUSH
74173: LD_INT 12
74175: PUSH
74176: LD_INT 12
74178: PUSH
74179: EMPTY
74180: LIST
74181: LIST
74182: ST_TO_ADDR
// hc_agressivity := 20 ;
74183: LD_ADDR_OWVAR 35
74187: PUSH
74188: LD_INT 20
74190: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
74191: LD_ADDR_OWVAR 28
74195: PUSH
74196: LD_INT 17
74198: ST_TO_ADDR
// hc_gallery :=  ;
74199: LD_ADDR_OWVAR 33
74203: PUSH
74204: LD_STRING 
74206: ST_TO_ADDR
// hc_name :=  ;
74207: LD_ADDR_OWVAR 26
74211: PUSH
74212: LD_STRING 
74214: ST_TO_ADDR
// un := CreateHuman ;
74215: LD_ADDR_VAR 0 2
74219: PUSH
74220: CALL_OW 44
74224: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
74225: LD_VAR 0 2
74229: PPUSH
74230: LD_INT 1
74232: PPUSH
74233: CALL_OW 51
// tmp := tmp ^ un ;
74237: LD_ADDR_VAR 0 3
74241: PUSH
74242: LD_VAR 0 3
74246: PUSH
74247: LD_VAR 0 2
74251: ADD
74252: ST_TO_ADDR
// end ;
74253: GO 74149
74255: POP
74256: POP
// repeat wait ( 0 0$1 ) ;
74257: LD_INT 35
74259: PPUSH
74260: CALL_OW 67
// for un in tmp do
74264: LD_ADDR_VAR 0 2
74268: PUSH
74269: LD_VAR 0 3
74273: PUSH
74274: FOR_IN
74275: IFFALSE 74349
// begin if IsDead ( un ) then
74277: LD_VAR 0 2
74281: PPUSH
74282: CALL_OW 301
74286: IFFALSE 74306
// begin tmp := tmp diff un ;
74288: LD_ADDR_VAR 0 3
74292: PUSH
74293: LD_VAR 0 3
74297: PUSH
74298: LD_VAR 0 2
74302: DIFF
74303: ST_TO_ADDR
// continue ;
74304: GO 74274
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
74306: LD_VAR 0 2
74310: PPUSH
74311: LD_INT 3
74313: PUSH
74314: LD_INT 22
74316: PUSH
74317: LD_INT 0
74319: PUSH
74320: EMPTY
74321: LIST
74322: LIST
74323: PUSH
74324: EMPTY
74325: LIST
74326: LIST
74327: PPUSH
74328: CALL_OW 69
74332: PPUSH
74333: LD_VAR 0 2
74337: PPUSH
74338: CALL_OW 74
74342: PPUSH
74343: CALL_OW 115
// end ;
74347: GO 74274
74349: POP
74350: POP
// until not tmp ;
74351: LD_VAR 0 3
74355: NOT
74356: IFFALSE 74257
// end ;
74358: PPOPN 3
74360: END
// every 0 0$1 trigger StreamModeActive and sTroll do
74361: LD_EXP 79
74365: PUSH
74366: LD_EXP 104
74370: AND
74371: IFFALSE 74425
74373: GO 74375
74375: DISABLE
// begin ToLua ( displayTroll(); ) ;
74376: LD_STRING displayTroll();
74378: PPUSH
74379: CALL_OW 559
// wait ( 3 3$00 ) ;
74383: LD_INT 6300
74385: PPUSH
74386: CALL_OW 67
// ToLua ( hideTroll(); ) ;
74390: LD_STRING hideTroll();
74392: PPUSH
74393: CALL_OW 559
// wait ( 1 1$00 ) ;
74397: LD_INT 2100
74399: PPUSH
74400: CALL_OW 67
// ToLua ( displayTroll(); ) ;
74404: LD_STRING displayTroll();
74406: PPUSH
74407: CALL_OW 559
// wait ( 1 1$00 ) ;
74411: LD_INT 2100
74413: PPUSH
74414: CALL_OW 67
// ToLua ( hideTroll(); ) ;
74418: LD_STRING hideTroll();
74420: PPUSH
74421: CALL_OW 559
// end ;
74425: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
74426: LD_EXP 79
74430: PUSH
74431: LD_EXP 105
74435: AND
74436: IFFALSE 74499
74438: GO 74440
74440: DISABLE
74441: LD_INT 0
74443: PPUSH
// begin p := 0 ;
74444: LD_ADDR_VAR 0 1
74448: PUSH
74449: LD_INT 0
74451: ST_TO_ADDR
// repeat game_speed := 1 ;
74452: LD_ADDR_OWVAR 65
74456: PUSH
74457: LD_INT 1
74459: ST_TO_ADDR
// wait ( 0 0$1 ) ;
74460: LD_INT 35
74462: PPUSH
74463: CALL_OW 67
// p := p + 1 ;
74467: LD_ADDR_VAR 0 1
74471: PUSH
74472: LD_VAR 0 1
74476: PUSH
74477: LD_INT 1
74479: PLUS
74480: ST_TO_ADDR
// until p >= 60 ;
74481: LD_VAR 0 1
74485: PUSH
74486: LD_INT 60
74488: GREATEREQUAL
74489: IFFALSE 74452
// game_speed := 4 ;
74491: LD_ADDR_OWVAR 65
74495: PUSH
74496: LD_INT 4
74498: ST_TO_ADDR
// end ;
74499: PPOPN 1
74501: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
74502: LD_EXP 79
74506: PUSH
74507: LD_EXP 106
74511: AND
74512: IFFALSE 74658
74514: GO 74516
74516: DISABLE
74517: LD_INT 0
74519: PPUSH
74520: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
74521: LD_ADDR_VAR 0 1
74525: PUSH
74526: LD_INT 22
74528: PUSH
74529: LD_OWVAR 2
74533: PUSH
74534: EMPTY
74535: LIST
74536: LIST
74537: PUSH
74538: LD_INT 2
74540: PUSH
74541: LD_INT 30
74543: PUSH
74544: LD_INT 0
74546: PUSH
74547: EMPTY
74548: LIST
74549: LIST
74550: PUSH
74551: LD_INT 30
74553: PUSH
74554: LD_INT 1
74556: PUSH
74557: EMPTY
74558: LIST
74559: LIST
74560: PUSH
74561: EMPTY
74562: LIST
74563: LIST
74564: LIST
74565: PUSH
74566: EMPTY
74567: LIST
74568: LIST
74569: PPUSH
74570: CALL_OW 69
74574: ST_TO_ADDR
// if not depot then
74575: LD_VAR 0 1
74579: NOT
74580: IFFALSE 74584
// exit ;
74582: GO 74658
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
74584: LD_ADDR_VAR 0 2
74588: PUSH
74589: LD_VAR 0 1
74593: PUSH
74594: LD_INT 1
74596: PPUSH
74597: LD_VAR 0 1
74601: PPUSH
74602: CALL_OW 12
74606: ARRAY
74607: PPUSH
74608: CALL_OW 274
74612: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
74613: LD_VAR 0 2
74617: PPUSH
74618: LD_INT 1
74620: PPUSH
74621: LD_INT 0
74623: PPUSH
74624: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
74628: LD_VAR 0 2
74632: PPUSH
74633: LD_INT 2
74635: PPUSH
74636: LD_INT 0
74638: PPUSH
74639: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
74643: LD_VAR 0 2
74647: PPUSH
74648: LD_INT 3
74650: PPUSH
74651: LD_INT 0
74653: PPUSH
74654: CALL_OW 277
// end ;
74658: PPOPN 2
74660: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
74661: LD_EXP 79
74665: PUSH
74666: LD_EXP 107
74670: AND
74671: IFFALSE 74768
74673: GO 74675
74675: DISABLE
74676: LD_INT 0
74678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
74679: LD_ADDR_VAR 0 1
74683: PUSH
74684: LD_INT 22
74686: PUSH
74687: LD_OWVAR 2
74691: PUSH
74692: EMPTY
74693: LIST
74694: LIST
74695: PUSH
74696: LD_INT 21
74698: PUSH
74699: LD_INT 1
74701: PUSH
74702: EMPTY
74703: LIST
74704: LIST
74705: PUSH
74706: LD_INT 3
74708: PUSH
74709: LD_INT 23
74711: PUSH
74712: LD_INT 0
74714: PUSH
74715: EMPTY
74716: LIST
74717: LIST
74718: PUSH
74719: EMPTY
74720: LIST
74721: LIST
74722: PUSH
74723: EMPTY
74724: LIST
74725: LIST
74726: LIST
74727: PPUSH
74728: CALL_OW 69
74732: ST_TO_ADDR
// if not tmp then
74733: LD_VAR 0 1
74737: NOT
74738: IFFALSE 74742
// exit ;
74740: GO 74768
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
74742: LD_VAR 0 1
74746: PUSH
74747: LD_INT 1
74749: PPUSH
74750: LD_VAR 0 1
74754: PPUSH
74755: CALL_OW 12
74759: ARRAY
74760: PPUSH
74761: LD_INT 200
74763: PPUSH
74764: CALL_OW 234
// end ;
74768: PPOPN 1
74770: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
74771: LD_EXP 79
74775: PUSH
74776: LD_EXP 108
74780: AND
74781: IFFALSE 74860
74783: GO 74785
74785: DISABLE
74786: LD_INT 0
74788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
74789: LD_ADDR_VAR 0 1
74793: PUSH
74794: LD_INT 22
74796: PUSH
74797: LD_OWVAR 2
74801: PUSH
74802: EMPTY
74803: LIST
74804: LIST
74805: PUSH
74806: LD_INT 21
74808: PUSH
74809: LD_INT 2
74811: PUSH
74812: EMPTY
74813: LIST
74814: LIST
74815: PUSH
74816: EMPTY
74817: LIST
74818: LIST
74819: PPUSH
74820: CALL_OW 69
74824: ST_TO_ADDR
// if not tmp then
74825: LD_VAR 0 1
74829: NOT
74830: IFFALSE 74834
// exit ;
74832: GO 74860
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
74834: LD_VAR 0 1
74838: PUSH
74839: LD_INT 1
74841: PPUSH
74842: LD_VAR 0 1
74846: PPUSH
74847: CALL_OW 12
74851: ARRAY
74852: PPUSH
74853: LD_INT 60
74855: PPUSH
74856: CALL_OW 234
// end ;
74860: PPOPN 1
74862: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
74863: LD_EXP 79
74867: PUSH
74868: LD_EXP 109
74872: AND
74873: IFFALSE 74972
74875: GO 74877
74877: DISABLE
74878: LD_INT 0
74880: PPUSH
74881: PPUSH
// begin enable ;
74882: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
74883: LD_ADDR_VAR 0 1
74887: PUSH
74888: LD_INT 22
74890: PUSH
74891: LD_OWVAR 2
74895: PUSH
74896: EMPTY
74897: LIST
74898: LIST
74899: PUSH
74900: LD_INT 61
74902: PUSH
74903: EMPTY
74904: LIST
74905: PUSH
74906: LD_INT 33
74908: PUSH
74909: LD_INT 2
74911: PUSH
74912: EMPTY
74913: LIST
74914: LIST
74915: PUSH
74916: EMPTY
74917: LIST
74918: LIST
74919: LIST
74920: PPUSH
74921: CALL_OW 69
74925: ST_TO_ADDR
// if not tmp then
74926: LD_VAR 0 1
74930: NOT
74931: IFFALSE 74935
// exit ;
74933: GO 74972
// for i in tmp do
74935: LD_ADDR_VAR 0 2
74939: PUSH
74940: LD_VAR 0 1
74944: PUSH
74945: FOR_IN
74946: IFFALSE 74970
// if IsControledBy ( i ) then
74948: LD_VAR 0 2
74952: PPUSH
74953: CALL_OW 312
74957: IFFALSE 74968
// ComUnlink ( i ) ;
74959: LD_VAR 0 2
74963: PPUSH
74964: CALL_OW 136
74968: GO 74945
74970: POP
74971: POP
// end ;
74972: PPOPN 2
74974: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
74975: LD_EXP 79
74979: PUSH
74980: LD_EXP 110
74984: AND
74985: IFFALSE 75125
74987: GO 74989
74989: DISABLE
74990: LD_INT 0
74992: PPUSH
74993: PPUSH
// begin ToLua ( displayPowell(); ) ;
74994: LD_STRING displayPowell();
74996: PPUSH
74997: CALL_OW 559
// uc_side := 0 ;
75001: LD_ADDR_OWVAR 20
75005: PUSH
75006: LD_INT 0
75008: ST_TO_ADDR
// uc_nation := 2 ;
75009: LD_ADDR_OWVAR 21
75013: PUSH
75014: LD_INT 2
75016: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
75017: LD_ADDR_OWVAR 37
75021: PUSH
75022: LD_INT 14
75024: ST_TO_ADDR
// vc_engine := engine_siberite ;
75025: LD_ADDR_OWVAR 39
75029: PUSH
75030: LD_INT 3
75032: ST_TO_ADDR
// vc_control := control_apeman ;
75033: LD_ADDR_OWVAR 38
75037: PUSH
75038: LD_INT 5
75040: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
75041: LD_ADDR_OWVAR 40
75045: PUSH
75046: LD_INT 29
75048: ST_TO_ADDR
// un := CreateVehicle ;
75049: LD_ADDR_VAR 0 2
75053: PUSH
75054: CALL_OW 45
75058: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
75059: LD_VAR 0 2
75063: PPUSH
75064: LD_INT 1
75066: PPUSH
75067: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
75071: LD_INT 35
75073: PPUSH
75074: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
75078: LD_VAR 0 2
75082: PPUSH
75083: LD_INT 22
75085: PUSH
75086: LD_OWVAR 2
75090: PUSH
75091: EMPTY
75092: LIST
75093: LIST
75094: PPUSH
75095: CALL_OW 69
75099: PPUSH
75100: LD_VAR 0 2
75104: PPUSH
75105: CALL_OW 74
75109: PPUSH
75110: CALL_OW 115
// until IsDead ( un ) ;
75114: LD_VAR 0 2
75118: PPUSH
75119: CALL_OW 301
75123: IFFALSE 75071
// end ;
75125: PPOPN 2
75127: END
// every 0 0$1 trigger StreamModeActive and sStu do
75128: LD_EXP 79
75132: PUSH
75133: LD_EXP 118
75137: AND
75138: IFFALSE 75154
75140: GO 75142
75142: DISABLE
// begin ToLua ( displayStucuk(); ) ;
75143: LD_STRING displayStucuk();
75145: PPUSH
75146: CALL_OW 559
// ResetFog ;
75150: CALL_OW 335
// end ;
75154: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
75155: LD_EXP 79
75159: PUSH
75160: LD_EXP 111
75164: AND
75165: IFFALSE 75306
75167: GO 75169
75169: DISABLE
75170: LD_INT 0
75172: PPUSH
75173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
75174: LD_ADDR_VAR 0 2
75178: PUSH
75179: LD_INT 22
75181: PUSH
75182: LD_OWVAR 2
75186: PUSH
75187: EMPTY
75188: LIST
75189: LIST
75190: PUSH
75191: LD_INT 21
75193: PUSH
75194: LD_INT 1
75196: PUSH
75197: EMPTY
75198: LIST
75199: LIST
75200: PUSH
75201: EMPTY
75202: LIST
75203: LIST
75204: PPUSH
75205: CALL_OW 69
75209: ST_TO_ADDR
// if not tmp then
75210: LD_VAR 0 2
75214: NOT
75215: IFFALSE 75219
// exit ;
75217: GO 75306
// un := tmp [ rand ( 1 , tmp ) ] ;
75219: LD_ADDR_VAR 0 1
75223: PUSH
75224: LD_VAR 0 2
75228: PUSH
75229: LD_INT 1
75231: PPUSH
75232: LD_VAR 0 2
75236: PPUSH
75237: CALL_OW 12
75241: ARRAY
75242: ST_TO_ADDR
// SetSide ( un , 0 ) ;
75243: LD_VAR 0 1
75247: PPUSH
75248: LD_INT 0
75250: PPUSH
75251: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
75255: LD_VAR 0 1
75259: PPUSH
75260: LD_OWVAR 3
75264: PUSH
75265: LD_VAR 0 1
75269: DIFF
75270: PPUSH
75271: LD_VAR 0 1
75275: PPUSH
75276: CALL_OW 74
75280: PPUSH
75281: CALL_OW 115
// wait ( 0 0$20 ) ;
75285: LD_INT 700
75287: PPUSH
75288: CALL_OW 67
// SetSide ( un , your_side ) ;
75292: LD_VAR 0 1
75296: PPUSH
75297: LD_OWVAR 2
75301: PPUSH
75302: CALL_OW 235
// end ;
75306: PPOPN 2
75308: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
75309: LD_EXP 79
75313: PUSH
75314: LD_EXP 112
75318: AND
75319: IFFALSE 75425
75321: GO 75323
75323: DISABLE
75324: LD_INT 0
75326: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75327: LD_ADDR_VAR 0 1
75331: PUSH
75332: LD_INT 22
75334: PUSH
75335: LD_OWVAR 2
75339: PUSH
75340: EMPTY
75341: LIST
75342: LIST
75343: PUSH
75344: LD_INT 2
75346: PUSH
75347: LD_INT 30
75349: PUSH
75350: LD_INT 0
75352: PUSH
75353: EMPTY
75354: LIST
75355: LIST
75356: PUSH
75357: LD_INT 30
75359: PUSH
75360: LD_INT 1
75362: PUSH
75363: EMPTY
75364: LIST
75365: LIST
75366: PUSH
75367: EMPTY
75368: LIST
75369: LIST
75370: LIST
75371: PUSH
75372: EMPTY
75373: LIST
75374: LIST
75375: PPUSH
75376: CALL_OW 69
75380: ST_TO_ADDR
// if not depot then
75381: LD_VAR 0 1
75385: NOT
75386: IFFALSE 75390
// exit ;
75388: GO 75425
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
75390: LD_VAR 0 1
75394: PUSH
75395: LD_INT 1
75397: ARRAY
75398: PPUSH
75399: CALL_OW 250
75403: PPUSH
75404: LD_VAR 0 1
75408: PUSH
75409: LD_INT 1
75411: ARRAY
75412: PPUSH
75413: CALL_OW 251
75417: PPUSH
75418: LD_INT 70
75420: PPUSH
75421: CALL_OW 495
// end ;
75425: PPOPN 1
75427: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
75428: LD_EXP 79
75432: PUSH
75433: LD_EXP 113
75437: AND
75438: IFFALSE 75649
75440: GO 75442
75442: DISABLE
75443: LD_INT 0
75445: PPUSH
75446: PPUSH
75447: PPUSH
75448: PPUSH
75449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
75450: LD_ADDR_VAR 0 5
75454: PUSH
75455: LD_INT 22
75457: PUSH
75458: LD_OWVAR 2
75462: PUSH
75463: EMPTY
75464: LIST
75465: LIST
75466: PUSH
75467: LD_INT 21
75469: PUSH
75470: LD_INT 1
75472: PUSH
75473: EMPTY
75474: LIST
75475: LIST
75476: PUSH
75477: EMPTY
75478: LIST
75479: LIST
75480: PPUSH
75481: CALL_OW 69
75485: ST_TO_ADDR
// if not tmp then
75486: LD_VAR 0 5
75490: NOT
75491: IFFALSE 75495
// exit ;
75493: GO 75649
// for i in tmp do
75495: LD_ADDR_VAR 0 1
75499: PUSH
75500: LD_VAR 0 5
75504: PUSH
75505: FOR_IN
75506: IFFALSE 75647
// begin d := rand ( 0 , 5 ) ;
75508: LD_ADDR_VAR 0 4
75512: PUSH
75513: LD_INT 0
75515: PPUSH
75516: LD_INT 5
75518: PPUSH
75519: CALL_OW 12
75523: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
75524: LD_ADDR_VAR 0 2
75528: PUSH
75529: LD_VAR 0 1
75533: PPUSH
75534: CALL_OW 250
75538: PPUSH
75539: LD_VAR 0 4
75543: PPUSH
75544: LD_INT 3
75546: PPUSH
75547: LD_INT 12
75549: PPUSH
75550: CALL_OW 12
75554: PPUSH
75555: CALL_OW 272
75559: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
75560: LD_ADDR_VAR 0 3
75564: PUSH
75565: LD_VAR 0 1
75569: PPUSH
75570: CALL_OW 251
75574: PPUSH
75575: LD_VAR 0 4
75579: PPUSH
75580: LD_INT 3
75582: PPUSH
75583: LD_INT 12
75585: PPUSH
75586: CALL_OW 12
75590: PPUSH
75591: CALL_OW 273
75595: ST_TO_ADDR
// if ValidHex ( x , y ) then
75596: LD_VAR 0 2
75600: PPUSH
75601: LD_VAR 0 3
75605: PPUSH
75606: CALL_OW 488
75610: IFFALSE 75645
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
75612: LD_VAR 0 1
75616: PPUSH
75617: LD_VAR 0 2
75621: PPUSH
75622: LD_VAR 0 3
75626: PPUSH
75627: LD_INT 3
75629: PPUSH
75630: LD_INT 6
75632: PPUSH
75633: CALL_OW 12
75637: PPUSH
75638: LD_INT 1
75640: PPUSH
75641: CALL_OW 483
// end ;
75645: GO 75505
75647: POP
75648: POP
// end ;
75649: PPOPN 5
75651: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
75652: LD_EXP 79
75656: PUSH
75657: LD_EXP 114
75661: AND
75662: IFFALSE 75756
75664: GO 75666
75666: DISABLE
75667: LD_INT 0
75669: PPUSH
75670: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
75671: LD_ADDR_VAR 0 2
75675: PUSH
75676: LD_INT 22
75678: PUSH
75679: LD_OWVAR 2
75683: PUSH
75684: EMPTY
75685: LIST
75686: LIST
75687: PUSH
75688: LD_INT 32
75690: PUSH
75691: LD_INT 1
75693: PUSH
75694: EMPTY
75695: LIST
75696: LIST
75697: PUSH
75698: LD_INT 21
75700: PUSH
75701: LD_INT 2
75703: PUSH
75704: EMPTY
75705: LIST
75706: LIST
75707: PUSH
75708: EMPTY
75709: LIST
75710: LIST
75711: LIST
75712: PPUSH
75713: CALL_OW 69
75717: ST_TO_ADDR
// if not tmp then
75718: LD_VAR 0 2
75722: NOT
75723: IFFALSE 75727
// exit ;
75725: GO 75756
// for i in tmp do
75727: LD_ADDR_VAR 0 1
75731: PUSH
75732: LD_VAR 0 2
75736: PUSH
75737: FOR_IN
75738: IFFALSE 75754
// SetFuel ( i , 0 ) ;
75740: LD_VAR 0 1
75744: PPUSH
75745: LD_INT 0
75747: PPUSH
75748: CALL_OW 240
75752: GO 75737
75754: POP
75755: POP
// end ;
75756: PPOPN 2
75758: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
75759: LD_EXP 79
75763: PUSH
75764: LD_EXP 115
75768: AND
75769: IFFALSE 75835
75771: GO 75773
75773: DISABLE
75774: LD_INT 0
75776: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
75777: LD_ADDR_VAR 0 1
75781: PUSH
75782: LD_INT 22
75784: PUSH
75785: LD_OWVAR 2
75789: PUSH
75790: EMPTY
75791: LIST
75792: LIST
75793: PUSH
75794: LD_INT 30
75796: PUSH
75797: LD_INT 29
75799: PUSH
75800: EMPTY
75801: LIST
75802: LIST
75803: PUSH
75804: EMPTY
75805: LIST
75806: LIST
75807: PPUSH
75808: CALL_OW 69
75812: ST_TO_ADDR
// if not tmp then
75813: LD_VAR 0 1
75817: NOT
75818: IFFALSE 75822
// exit ;
75820: GO 75835
// DestroyUnit ( tmp [ 1 ] ) ;
75822: LD_VAR 0 1
75826: PUSH
75827: LD_INT 1
75829: ARRAY
75830: PPUSH
75831: CALL_OW 65
// end ;
75835: PPOPN 1
75837: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
75838: LD_EXP 79
75842: PUSH
75843: LD_EXP 117
75847: AND
75848: IFFALSE 75977
75850: GO 75852
75852: DISABLE
75853: LD_INT 0
75855: PPUSH
// begin uc_side := 0 ;
75856: LD_ADDR_OWVAR 20
75860: PUSH
75861: LD_INT 0
75863: ST_TO_ADDR
// uc_nation := nation_arabian ;
75864: LD_ADDR_OWVAR 21
75868: PUSH
75869: LD_INT 2
75871: ST_TO_ADDR
// hc_gallery :=  ;
75872: LD_ADDR_OWVAR 33
75876: PUSH
75877: LD_STRING 
75879: ST_TO_ADDR
// hc_name :=  ;
75880: LD_ADDR_OWVAR 26
75884: PUSH
75885: LD_STRING 
75887: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
75888: LD_INT 1
75890: PPUSH
75891: LD_INT 11
75893: PPUSH
75894: LD_INT 10
75896: PPUSH
75897: CALL_OW 380
// un := CreateHuman ;
75901: LD_ADDR_VAR 0 1
75905: PUSH
75906: CALL_OW 44
75910: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
75911: LD_VAR 0 1
75915: PPUSH
75916: LD_INT 1
75918: PPUSH
75919: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
75923: LD_INT 35
75925: PPUSH
75926: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
75930: LD_VAR 0 1
75934: PPUSH
75935: LD_INT 22
75937: PUSH
75938: LD_OWVAR 2
75942: PUSH
75943: EMPTY
75944: LIST
75945: LIST
75946: PPUSH
75947: CALL_OW 69
75951: PPUSH
75952: LD_VAR 0 1
75956: PPUSH
75957: CALL_OW 74
75961: PPUSH
75962: CALL_OW 115
// until IsDead ( un ) ;
75966: LD_VAR 0 1
75970: PPUSH
75971: CALL_OW 301
75975: IFFALSE 75923
// end ;
75977: PPOPN 1
75979: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
75980: LD_EXP 79
75984: PUSH
75985: LD_EXP 119
75989: AND
75990: IFFALSE 76002
75992: GO 75994
75994: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
75995: LD_STRING earthquake(getX(game), 0, 32)
75997: PPUSH
75998: CALL_OW 559
76002: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
76003: LD_EXP 79
76007: PUSH
76008: LD_EXP 120
76012: AND
76013: IFFALSE 76104
76015: GO 76017
76017: DISABLE
76018: LD_INT 0
76020: PPUSH
// begin enable ;
76021: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
76022: LD_ADDR_VAR 0 1
76026: PUSH
76027: LD_INT 22
76029: PUSH
76030: LD_OWVAR 2
76034: PUSH
76035: EMPTY
76036: LIST
76037: LIST
76038: PUSH
76039: LD_INT 21
76041: PUSH
76042: LD_INT 2
76044: PUSH
76045: EMPTY
76046: LIST
76047: LIST
76048: PUSH
76049: LD_INT 33
76051: PUSH
76052: LD_INT 3
76054: PUSH
76055: EMPTY
76056: LIST
76057: LIST
76058: PUSH
76059: EMPTY
76060: LIST
76061: LIST
76062: LIST
76063: PPUSH
76064: CALL_OW 69
76068: ST_TO_ADDR
// if not tmp then
76069: LD_VAR 0 1
76073: NOT
76074: IFFALSE 76078
// exit ;
76076: GO 76104
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
76078: LD_VAR 0 1
76082: PUSH
76083: LD_INT 1
76085: PPUSH
76086: LD_VAR 0 1
76090: PPUSH
76091: CALL_OW 12
76095: ARRAY
76096: PPUSH
76097: LD_INT 1
76099: PPUSH
76100: CALL_OW 234
// end ;
76104: PPOPN 1
76106: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
76107: LD_EXP 79
76111: PUSH
76112: LD_EXP 121
76116: AND
76117: IFFALSE 76258
76119: GO 76121
76121: DISABLE
76122: LD_INT 0
76124: PPUSH
76125: PPUSH
76126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
76127: LD_ADDR_VAR 0 3
76131: PUSH
76132: LD_INT 22
76134: PUSH
76135: LD_OWVAR 2
76139: PUSH
76140: EMPTY
76141: LIST
76142: LIST
76143: PUSH
76144: LD_INT 25
76146: PUSH
76147: LD_INT 1
76149: PUSH
76150: EMPTY
76151: LIST
76152: LIST
76153: PUSH
76154: EMPTY
76155: LIST
76156: LIST
76157: PPUSH
76158: CALL_OW 69
76162: ST_TO_ADDR
// if not tmp then
76163: LD_VAR 0 3
76167: NOT
76168: IFFALSE 76172
// exit ;
76170: GO 76258
// un := tmp [ rand ( 1 , tmp ) ] ;
76172: LD_ADDR_VAR 0 2
76176: PUSH
76177: LD_VAR 0 3
76181: PUSH
76182: LD_INT 1
76184: PPUSH
76185: LD_VAR 0 3
76189: PPUSH
76190: CALL_OW 12
76194: ARRAY
76195: ST_TO_ADDR
// if Crawls ( un ) then
76196: LD_VAR 0 2
76200: PPUSH
76201: CALL_OW 318
76205: IFFALSE 76216
// ComWalk ( un ) ;
76207: LD_VAR 0 2
76211: PPUSH
76212: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
76216: LD_VAR 0 2
76220: PPUSH
76221: LD_INT 9
76223: PPUSH
76224: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
76228: LD_INT 28
76230: PPUSH
76231: LD_OWVAR 2
76235: PPUSH
76236: LD_INT 2
76238: PPUSH
76239: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
76243: LD_INT 29
76245: PPUSH
76246: LD_OWVAR 2
76250: PPUSH
76251: LD_INT 2
76253: PPUSH
76254: CALL_OW 322
// end ;
76258: PPOPN 3
76260: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
76261: LD_EXP 79
76265: PUSH
76266: LD_EXP 122
76270: AND
76271: IFFALSE 76382
76273: GO 76275
76275: DISABLE
76276: LD_INT 0
76278: PPUSH
76279: PPUSH
76280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
76281: LD_ADDR_VAR 0 3
76285: PUSH
76286: LD_INT 22
76288: PUSH
76289: LD_OWVAR 2
76293: PUSH
76294: EMPTY
76295: LIST
76296: LIST
76297: PUSH
76298: LD_INT 25
76300: PUSH
76301: LD_INT 1
76303: PUSH
76304: EMPTY
76305: LIST
76306: LIST
76307: PUSH
76308: EMPTY
76309: LIST
76310: LIST
76311: PPUSH
76312: CALL_OW 69
76316: ST_TO_ADDR
// if not tmp then
76317: LD_VAR 0 3
76321: NOT
76322: IFFALSE 76326
// exit ;
76324: GO 76382
// un := tmp [ rand ( 1 , tmp ) ] ;
76326: LD_ADDR_VAR 0 2
76330: PUSH
76331: LD_VAR 0 3
76335: PUSH
76336: LD_INT 1
76338: PPUSH
76339: LD_VAR 0 3
76343: PPUSH
76344: CALL_OW 12
76348: ARRAY
76349: ST_TO_ADDR
// if Crawls ( un ) then
76350: LD_VAR 0 2
76354: PPUSH
76355: CALL_OW 318
76359: IFFALSE 76370
// ComWalk ( un ) ;
76361: LD_VAR 0 2
76365: PPUSH
76366: CALL_OW 138
// SetClass ( un , class_mortar ) ;
76370: LD_VAR 0 2
76374: PPUSH
76375: LD_INT 8
76377: PPUSH
76378: CALL_OW 336
// end ;
76382: PPOPN 3
76384: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
76385: LD_EXP 79
76389: PUSH
76390: LD_EXP 123
76394: AND
76395: IFFALSE 76539
76397: GO 76399
76399: DISABLE
76400: LD_INT 0
76402: PPUSH
76403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
76404: LD_ADDR_VAR 0 2
76408: PUSH
76409: LD_INT 22
76411: PUSH
76412: LD_OWVAR 2
76416: PUSH
76417: EMPTY
76418: LIST
76419: LIST
76420: PUSH
76421: LD_INT 21
76423: PUSH
76424: LD_INT 2
76426: PUSH
76427: EMPTY
76428: LIST
76429: LIST
76430: PUSH
76431: LD_INT 2
76433: PUSH
76434: LD_INT 34
76436: PUSH
76437: LD_INT 12
76439: PUSH
76440: EMPTY
76441: LIST
76442: LIST
76443: PUSH
76444: LD_INT 34
76446: PUSH
76447: LD_INT 51
76449: PUSH
76450: EMPTY
76451: LIST
76452: LIST
76453: PUSH
76454: LD_INT 34
76456: PUSH
76457: LD_INT 32
76459: PUSH
76460: EMPTY
76461: LIST
76462: LIST
76463: PUSH
76464: EMPTY
76465: LIST
76466: LIST
76467: LIST
76468: LIST
76469: PUSH
76470: EMPTY
76471: LIST
76472: LIST
76473: LIST
76474: PPUSH
76475: CALL_OW 69
76479: ST_TO_ADDR
// if not tmp then
76480: LD_VAR 0 2
76484: NOT
76485: IFFALSE 76489
// exit ;
76487: GO 76539
// for i in tmp do
76489: LD_ADDR_VAR 0 1
76493: PUSH
76494: LD_VAR 0 2
76498: PUSH
76499: FOR_IN
76500: IFFALSE 76537
// if GetCargo ( i , mat_artifact ) = 0 then
76502: LD_VAR 0 1
76506: PPUSH
76507: LD_INT 4
76509: PPUSH
76510: CALL_OW 289
76514: PUSH
76515: LD_INT 0
76517: EQUAL
76518: IFFALSE 76535
// SetCargo ( i , mat_siberit , 100 ) ;
76520: LD_VAR 0 1
76524: PPUSH
76525: LD_INT 3
76527: PPUSH
76528: LD_INT 100
76530: PPUSH
76531: CALL_OW 290
76535: GO 76499
76537: POP
76538: POP
// end ;
76539: PPOPN 2
76541: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
76542: LD_EXP 79
76546: PUSH
76547: LD_EXP 124
76551: AND
76552: IFFALSE 76735
76554: GO 76556
76556: DISABLE
76557: LD_INT 0
76559: PPUSH
76560: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
76561: LD_ADDR_VAR 0 2
76565: PUSH
76566: LD_INT 22
76568: PUSH
76569: LD_OWVAR 2
76573: PUSH
76574: EMPTY
76575: LIST
76576: LIST
76577: PPUSH
76578: CALL_OW 69
76582: ST_TO_ADDR
// if not tmp then
76583: LD_VAR 0 2
76587: NOT
76588: IFFALSE 76592
// exit ;
76590: GO 76735
// for i := 1 to 2 do
76592: LD_ADDR_VAR 0 1
76596: PUSH
76597: DOUBLE
76598: LD_INT 1
76600: DEC
76601: ST_TO_ADDR
76602: LD_INT 2
76604: PUSH
76605: FOR_TO
76606: IFFALSE 76733
// begin uc_side := your_side ;
76608: LD_ADDR_OWVAR 20
76612: PUSH
76613: LD_OWVAR 2
76617: ST_TO_ADDR
// uc_nation := nation_american ;
76618: LD_ADDR_OWVAR 21
76622: PUSH
76623: LD_INT 1
76625: ST_TO_ADDR
// vc_chassis := us_morphling ;
76626: LD_ADDR_OWVAR 37
76630: PUSH
76631: LD_INT 5
76633: ST_TO_ADDR
// vc_engine := engine_siberite ;
76634: LD_ADDR_OWVAR 39
76638: PUSH
76639: LD_INT 3
76641: ST_TO_ADDR
// vc_control := control_computer ;
76642: LD_ADDR_OWVAR 38
76646: PUSH
76647: LD_INT 3
76649: ST_TO_ADDR
// vc_weapon := us_double_laser ;
76650: LD_ADDR_OWVAR 40
76654: PUSH
76655: LD_INT 10
76657: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
76658: LD_VAR 0 2
76662: PUSH
76663: LD_INT 1
76665: ARRAY
76666: PPUSH
76667: CALL_OW 310
76671: NOT
76672: IFFALSE 76719
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
76674: CALL_OW 45
76678: PPUSH
76679: LD_VAR 0 2
76683: PUSH
76684: LD_INT 1
76686: ARRAY
76687: PPUSH
76688: CALL_OW 250
76692: PPUSH
76693: LD_VAR 0 2
76697: PUSH
76698: LD_INT 1
76700: ARRAY
76701: PPUSH
76702: CALL_OW 251
76706: PPUSH
76707: LD_INT 12
76709: PPUSH
76710: LD_INT 1
76712: PPUSH
76713: CALL_OW 50
76717: GO 76731
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
76719: CALL_OW 45
76723: PPUSH
76724: LD_INT 1
76726: PPUSH
76727: CALL_OW 51
// end ;
76731: GO 76605
76733: POP
76734: POP
// end ;
76735: PPOPN 2
76737: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
76738: LD_EXP 79
76742: PUSH
76743: LD_EXP 125
76747: AND
76748: IFFALSE 76970
76750: GO 76752
76752: DISABLE
76753: LD_INT 0
76755: PPUSH
76756: PPUSH
76757: PPUSH
76758: PPUSH
76759: PPUSH
76760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
76761: LD_ADDR_VAR 0 6
76765: PUSH
76766: LD_INT 22
76768: PUSH
76769: LD_OWVAR 2
76773: PUSH
76774: EMPTY
76775: LIST
76776: LIST
76777: PUSH
76778: LD_INT 21
76780: PUSH
76781: LD_INT 1
76783: PUSH
76784: EMPTY
76785: LIST
76786: LIST
76787: PUSH
76788: LD_INT 3
76790: PUSH
76791: LD_INT 23
76793: PUSH
76794: LD_INT 0
76796: PUSH
76797: EMPTY
76798: LIST
76799: LIST
76800: PUSH
76801: EMPTY
76802: LIST
76803: LIST
76804: PUSH
76805: EMPTY
76806: LIST
76807: LIST
76808: LIST
76809: PPUSH
76810: CALL_OW 69
76814: ST_TO_ADDR
// if not tmp then
76815: LD_VAR 0 6
76819: NOT
76820: IFFALSE 76824
// exit ;
76822: GO 76970
// s1 := rand ( 1 , 4 ) ;
76824: LD_ADDR_VAR 0 2
76828: PUSH
76829: LD_INT 1
76831: PPUSH
76832: LD_INT 4
76834: PPUSH
76835: CALL_OW 12
76839: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
76840: LD_ADDR_VAR 0 4
76844: PUSH
76845: LD_VAR 0 6
76849: PUSH
76850: LD_INT 1
76852: ARRAY
76853: PPUSH
76854: LD_VAR 0 2
76858: PPUSH
76859: CALL_OW 259
76863: ST_TO_ADDR
// if s1 = 1 then
76864: LD_VAR 0 2
76868: PUSH
76869: LD_INT 1
76871: EQUAL
76872: IFFALSE 76892
// s2 := rand ( 2 , 4 ) else
76874: LD_ADDR_VAR 0 3
76878: PUSH
76879: LD_INT 2
76881: PPUSH
76882: LD_INT 4
76884: PPUSH
76885: CALL_OW 12
76889: ST_TO_ADDR
76890: GO 76900
// s2 := 1 ;
76892: LD_ADDR_VAR 0 3
76896: PUSH
76897: LD_INT 1
76899: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
76900: LD_ADDR_VAR 0 5
76904: PUSH
76905: LD_VAR 0 6
76909: PUSH
76910: LD_INT 1
76912: ARRAY
76913: PPUSH
76914: LD_VAR 0 3
76918: PPUSH
76919: CALL_OW 259
76923: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
76924: LD_VAR 0 6
76928: PUSH
76929: LD_INT 1
76931: ARRAY
76932: PPUSH
76933: LD_VAR 0 2
76937: PPUSH
76938: LD_VAR 0 5
76942: PPUSH
76943: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
76947: LD_VAR 0 6
76951: PUSH
76952: LD_INT 1
76954: ARRAY
76955: PPUSH
76956: LD_VAR 0 3
76960: PPUSH
76961: LD_VAR 0 4
76965: PPUSH
76966: CALL_OW 237
// end ;
76970: PPOPN 6
76972: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
76973: LD_EXP 79
76977: PUSH
76978: LD_EXP 126
76982: AND
76983: IFFALSE 77062
76985: GO 76987
76987: DISABLE
76988: LD_INT 0
76990: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
76991: LD_ADDR_VAR 0 1
76995: PUSH
76996: LD_INT 22
76998: PUSH
76999: LD_OWVAR 2
77003: PUSH
77004: EMPTY
77005: LIST
77006: LIST
77007: PUSH
77008: LD_INT 30
77010: PUSH
77011: LD_INT 3
77013: PUSH
77014: EMPTY
77015: LIST
77016: LIST
77017: PUSH
77018: EMPTY
77019: LIST
77020: LIST
77021: PPUSH
77022: CALL_OW 69
77026: ST_TO_ADDR
// if not tmp then
77027: LD_VAR 0 1
77031: NOT
77032: IFFALSE 77036
// exit ;
77034: GO 77062
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
77036: LD_VAR 0 1
77040: PUSH
77041: LD_INT 1
77043: PPUSH
77044: LD_VAR 0 1
77048: PPUSH
77049: CALL_OW 12
77053: ARRAY
77054: PPUSH
77055: LD_INT 1
77057: PPUSH
77058: CALL_OW 234
// end ;
77062: PPOPN 1
77064: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
77065: LD_EXP 79
77069: PUSH
77070: LD_EXP 127
77074: AND
77075: IFFALSE 77187
77077: GO 77079
77079: DISABLE
77080: LD_INT 0
77082: PPUSH
77083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
77084: LD_ADDR_VAR 0 2
77088: PUSH
77089: LD_INT 22
77091: PUSH
77092: LD_OWVAR 2
77096: PUSH
77097: EMPTY
77098: LIST
77099: LIST
77100: PUSH
77101: LD_INT 2
77103: PUSH
77104: LD_INT 30
77106: PUSH
77107: LD_INT 27
77109: PUSH
77110: EMPTY
77111: LIST
77112: LIST
77113: PUSH
77114: LD_INT 30
77116: PUSH
77117: LD_INT 26
77119: PUSH
77120: EMPTY
77121: LIST
77122: LIST
77123: PUSH
77124: LD_INT 30
77126: PUSH
77127: LD_INT 28
77129: PUSH
77130: EMPTY
77131: LIST
77132: LIST
77133: PUSH
77134: EMPTY
77135: LIST
77136: LIST
77137: LIST
77138: LIST
77139: PUSH
77140: EMPTY
77141: LIST
77142: LIST
77143: PPUSH
77144: CALL_OW 69
77148: ST_TO_ADDR
// if not tmp then
77149: LD_VAR 0 2
77153: NOT
77154: IFFALSE 77158
// exit ;
77156: GO 77187
// for i in tmp do
77158: LD_ADDR_VAR 0 1
77162: PUSH
77163: LD_VAR 0 2
77167: PUSH
77168: FOR_IN
77169: IFFALSE 77185
// SetLives ( i , 1 ) ;
77171: LD_VAR 0 1
77175: PPUSH
77176: LD_INT 1
77178: PPUSH
77179: CALL_OW 234
77183: GO 77168
77185: POP
77186: POP
// end ;
77187: PPOPN 2
77189: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
77190: LD_EXP 79
77194: PUSH
77195: LD_EXP 128
77199: AND
77200: IFFALSE 77487
77202: GO 77204
77204: DISABLE
77205: LD_INT 0
77207: PPUSH
77208: PPUSH
77209: PPUSH
// begin i := rand ( 1 , 7 ) ;
77210: LD_ADDR_VAR 0 1
77214: PUSH
77215: LD_INT 1
77217: PPUSH
77218: LD_INT 7
77220: PPUSH
77221: CALL_OW 12
77225: ST_TO_ADDR
// case i of 1 :
77226: LD_VAR 0 1
77230: PUSH
77231: LD_INT 1
77233: DOUBLE
77234: EQUAL
77235: IFTRUE 77239
77237: GO 77249
77239: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
77240: LD_STRING earthquake(getX(game), 0, 32)
77242: PPUSH
77243: CALL_OW 559
77247: GO 77487
77249: LD_INT 2
77251: DOUBLE
77252: EQUAL
77253: IFTRUE 77257
77255: GO 77271
77257: POP
// begin ToLua ( displayStucuk(); ) ;
77258: LD_STRING displayStucuk();
77260: PPUSH
77261: CALL_OW 559
// ResetFog ;
77265: CALL_OW 335
// end ; 3 :
77269: GO 77487
77271: LD_INT 3
77273: DOUBLE
77274: EQUAL
77275: IFTRUE 77279
77277: GO 77383
77279: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77280: LD_ADDR_VAR 0 2
77284: PUSH
77285: LD_INT 22
77287: PUSH
77288: LD_OWVAR 2
77292: PUSH
77293: EMPTY
77294: LIST
77295: LIST
77296: PUSH
77297: LD_INT 25
77299: PUSH
77300: LD_INT 1
77302: PUSH
77303: EMPTY
77304: LIST
77305: LIST
77306: PUSH
77307: EMPTY
77308: LIST
77309: LIST
77310: PPUSH
77311: CALL_OW 69
77315: ST_TO_ADDR
// if not tmp then
77316: LD_VAR 0 2
77320: NOT
77321: IFFALSE 77325
// exit ;
77323: GO 77487
// un := tmp [ rand ( 1 , tmp ) ] ;
77325: LD_ADDR_VAR 0 3
77329: PUSH
77330: LD_VAR 0 2
77334: PUSH
77335: LD_INT 1
77337: PPUSH
77338: LD_VAR 0 2
77342: PPUSH
77343: CALL_OW 12
77347: ARRAY
77348: ST_TO_ADDR
// if Crawls ( un ) then
77349: LD_VAR 0 3
77353: PPUSH
77354: CALL_OW 318
77358: IFFALSE 77369
// ComWalk ( un ) ;
77360: LD_VAR 0 3
77364: PPUSH
77365: CALL_OW 138
// SetClass ( un , class_mortar ) ;
77369: LD_VAR 0 3
77373: PPUSH
77374: LD_INT 8
77376: PPUSH
77377: CALL_OW 336
// end ; 4 :
77381: GO 77487
77383: LD_INT 4
77385: DOUBLE
77386: EQUAL
77387: IFTRUE 77391
77389: GO 77465
77391: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
77392: LD_ADDR_VAR 0 2
77396: PUSH
77397: LD_INT 22
77399: PUSH
77400: LD_OWVAR 2
77404: PUSH
77405: EMPTY
77406: LIST
77407: LIST
77408: PUSH
77409: LD_INT 30
77411: PUSH
77412: LD_INT 29
77414: PUSH
77415: EMPTY
77416: LIST
77417: LIST
77418: PUSH
77419: EMPTY
77420: LIST
77421: LIST
77422: PPUSH
77423: CALL_OW 69
77427: ST_TO_ADDR
// if not tmp then
77428: LD_VAR 0 2
77432: NOT
77433: IFFALSE 77437
// exit ;
77435: GO 77487
// CenterNowOnUnits ( tmp [ 1 ] ) ;
77437: LD_VAR 0 2
77441: PUSH
77442: LD_INT 1
77444: ARRAY
77445: PPUSH
77446: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
77450: LD_VAR 0 2
77454: PUSH
77455: LD_INT 1
77457: ARRAY
77458: PPUSH
77459: CALL_OW 65
// end ; 5 .. 7 :
77463: GO 77487
77465: LD_INT 5
77467: DOUBLE
77468: GREATEREQUAL
77469: IFFALSE 77477
77471: LD_INT 7
77473: DOUBLE
77474: LESSEQUAL
77475: IFTRUE 77479
77477: GO 77486
77479: POP
// StreamSibBomb ; end ;
77480: CALL 73724 0 0
77484: GO 77487
77486: POP
// end ;
77487: PPOPN 3
77489: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
77490: LD_EXP 79
77494: PUSH
77495: LD_EXP 129
77499: AND
77500: IFFALSE 77656
77502: GO 77504
77504: DISABLE
77505: LD_INT 0
77507: PPUSH
77508: PPUSH
77509: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
77510: LD_ADDR_VAR 0 2
77514: PUSH
77515: LD_INT 81
77517: PUSH
77518: LD_OWVAR 2
77522: PUSH
77523: EMPTY
77524: LIST
77525: LIST
77526: PUSH
77527: LD_INT 2
77529: PUSH
77530: LD_INT 21
77532: PUSH
77533: LD_INT 1
77535: PUSH
77536: EMPTY
77537: LIST
77538: LIST
77539: PUSH
77540: LD_INT 21
77542: PUSH
77543: LD_INT 2
77545: PUSH
77546: EMPTY
77547: LIST
77548: LIST
77549: PUSH
77550: EMPTY
77551: LIST
77552: LIST
77553: LIST
77554: PUSH
77555: EMPTY
77556: LIST
77557: LIST
77558: PPUSH
77559: CALL_OW 69
77563: ST_TO_ADDR
// if not tmp then
77564: LD_VAR 0 2
77568: NOT
77569: IFFALSE 77573
// exit ;
77571: GO 77656
// p := 0 ;
77573: LD_ADDR_VAR 0 3
77577: PUSH
77578: LD_INT 0
77580: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
77581: LD_INT 35
77583: PPUSH
77584: CALL_OW 67
// p := p + 1 ;
77588: LD_ADDR_VAR 0 3
77592: PUSH
77593: LD_VAR 0 3
77597: PUSH
77598: LD_INT 1
77600: PLUS
77601: ST_TO_ADDR
// for i in tmp do
77602: LD_ADDR_VAR 0 1
77606: PUSH
77607: LD_VAR 0 2
77611: PUSH
77612: FOR_IN
77613: IFFALSE 77644
// if GetLives ( i ) < 1000 then
77615: LD_VAR 0 1
77619: PPUSH
77620: CALL_OW 256
77624: PUSH
77625: LD_INT 1000
77627: LESS
77628: IFFALSE 77642
// SetLives ( i , 1000 ) ;
77630: LD_VAR 0 1
77634: PPUSH
77635: LD_INT 1000
77637: PPUSH
77638: CALL_OW 234
77642: GO 77612
77644: POP
77645: POP
// until p > 20 ;
77646: LD_VAR 0 3
77650: PUSH
77651: LD_INT 20
77653: GREATER
77654: IFFALSE 77581
// end ;
77656: PPOPN 3
77658: END
// every 0 0$1 trigger StreamModeActive and sTime do
77659: LD_EXP 79
77663: PUSH
77664: LD_EXP 130
77668: AND
77669: IFFALSE 77704
77671: GO 77673
77673: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
77674: LD_INT 28
77676: PPUSH
77677: LD_OWVAR 2
77681: PPUSH
77682: LD_INT 2
77684: PPUSH
77685: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
77689: LD_INT 30
77691: PPUSH
77692: LD_OWVAR 2
77696: PPUSH
77697: LD_INT 2
77699: PPUSH
77700: CALL_OW 322
// end ;
77704: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
77705: LD_EXP 79
77709: PUSH
77710: LD_EXP 131
77714: AND
77715: IFFALSE 77836
77717: GO 77719
77719: DISABLE
77720: LD_INT 0
77722: PPUSH
77723: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
77724: LD_ADDR_VAR 0 2
77728: PUSH
77729: LD_INT 22
77731: PUSH
77732: LD_OWVAR 2
77736: PUSH
77737: EMPTY
77738: LIST
77739: LIST
77740: PUSH
77741: LD_INT 21
77743: PUSH
77744: LD_INT 1
77746: PUSH
77747: EMPTY
77748: LIST
77749: LIST
77750: PUSH
77751: LD_INT 3
77753: PUSH
77754: LD_INT 23
77756: PUSH
77757: LD_INT 0
77759: PUSH
77760: EMPTY
77761: LIST
77762: LIST
77763: PUSH
77764: EMPTY
77765: LIST
77766: LIST
77767: PUSH
77768: EMPTY
77769: LIST
77770: LIST
77771: LIST
77772: PPUSH
77773: CALL_OW 69
77777: ST_TO_ADDR
// if not tmp then
77778: LD_VAR 0 2
77782: NOT
77783: IFFALSE 77787
// exit ;
77785: GO 77836
// for i in tmp do
77787: LD_ADDR_VAR 0 1
77791: PUSH
77792: LD_VAR 0 2
77796: PUSH
77797: FOR_IN
77798: IFFALSE 77834
// begin if Crawls ( i ) then
77800: LD_VAR 0 1
77804: PPUSH
77805: CALL_OW 318
77809: IFFALSE 77820
// ComWalk ( i ) ;
77811: LD_VAR 0 1
77815: PPUSH
77816: CALL_OW 138
// SetClass ( i , 2 ) ;
77820: LD_VAR 0 1
77824: PPUSH
77825: LD_INT 2
77827: PPUSH
77828: CALL_OW 336
// end ;
77832: GO 77797
77834: POP
77835: POP
// end ;
77836: PPOPN 2
77838: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
77839: LD_EXP 79
77843: PUSH
77844: LD_EXP 132
77848: AND
77849: IFFALSE 78137
77851: GO 77853
77853: DISABLE
77854: LD_INT 0
77856: PPUSH
77857: PPUSH
77858: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
77859: LD_OWVAR 2
77863: PPUSH
77864: LD_INT 9
77866: PPUSH
77867: LD_INT 1
77869: PPUSH
77870: LD_INT 1
77872: PPUSH
77873: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
77877: LD_INT 9
77879: PPUSH
77880: LD_OWVAR 2
77884: PPUSH
77885: CALL_OW 343
// uc_side := 9 ;
77889: LD_ADDR_OWVAR 20
77893: PUSH
77894: LD_INT 9
77896: ST_TO_ADDR
// uc_nation := 2 ;
77897: LD_ADDR_OWVAR 21
77901: PUSH
77902: LD_INT 2
77904: ST_TO_ADDR
// hc_name := Dark Warrior ;
77905: LD_ADDR_OWVAR 26
77909: PUSH
77910: LD_STRING Dark Warrior
77912: ST_TO_ADDR
// hc_gallery :=  ;
77913: LD_ADDR_OWVAR 33
77917: PUSH
77918: LD_STRING 
77920: ST_TO_ADDR
// hc_noskilllimit := true ;
77921: LD_ADDR_OWVAR 76
77925: PUSH
77926: LD_INT 1
77928: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
77929: LD_ADDR_OWVAR 31
77933: PUSH
77934: LD_INT 30
77936: PUSH
77937: LD_INT 30
77939: PUSH
77940: LD_INT 30
77942: PUSH
77943: LD_INT 30
77945: PUSH
77946: EMPTY
77947: LIST
77948: LIST
77949: LIST
77950: LIST
77951: ST_TO_ADDR
// un := CreateHuman ;
77952: LD_ADDR_VAR 0 3
77956: PUSH
77957: CALL_OW 44
77961: ST_TO_ADDR
// hc_noskilllimit := false ;
77962: LD_ADDR_OWVAR 76
77966: PUSH
77967: LD_INT 0
77969: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
77970: LD_VAR 0 3
77974: PPUSH
77975: LD_INT 1
77977: PPUSH
77978: CALL_OW 51
// ToLua ( playRanger() ) ;
77982: LD_STRING playRanger()
77984: PPUSH
77985: CALL_OW 559
// p := 0 ;
77989: LD_ADDR_VAR 0 2
77993: PUSH
77994: LD_INT 0
77996: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
77997: LD_INT 35
77999: PPUSH
78000: CALL_OW 67
// p := p + 1 ;
78004: LD_ADDR_VAR 0 2
78008: PUSH
78009: LD_VAR 0 2
78013: PUSH
78014: LD_INT 1
78016: PLUS
78017: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
78018: LD_VAR 0 3
78022: PPUSH
78023: CALL_OW 256
78027: PUSH
78028: LD_INT 1000
78030: LESS
78031: IFFALSE 78045
// SetLives ( un , 1000 ) ;
78033: LD_VAR 0 3
78037: PPUSH
78038: LD_INT 1000
78040: PPUSH
78041: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
78045: LD_VAR 0 3
78049: PPUSH
78050: LD_INT 81
78052: PUSH
78053: LD_OWVAR 2
78057: PUSH
78058: EMPTY
78059: LIST
78060: LIST
78061: PUSH
78062: LD_INT 91
78064: PUSH
78065: LD_VAR 0 3
78069: PUSH
78070: LD_INT 30
78072: PUSH
78073: EMPTY
78074: LIST
78075: LIST
78076: LIST
78077: PUSH
78078: EMPTY
78079: LIST
78080: LIST
78081: PPUSH
78082: CALL_OW 69
78086: PPUSH
78087: LD_VAR 0 3
78091: PPUSH
78092: CALL_OW 74
78096: PPUSH
78097: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
78101: LD_VAR 0 2
78105: PUSH
78106: LD_INT 80
78108: GREATER
78109: PUSH
78110: LD_VAR 0 3
78114: PPUSH
78115: CALL_OW 301
78119: OR
78120: IFFALSE 77997
// if un then
78122: LD_VAR 0 3
78126: IFFALSE 78137
// RemoveUnit ( un ) ;
78128: LD_VAR 0 3
78132: PPUSH
78133: CALL_OW 64
// end ;
78137: PPOPN 3
78139: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
78140: LD_EXP 133
78144: IFFALSE 78260
78146: GO 78148
78148: DISABLE
78149: LD_INT 0
78151: PPUSH
78152: PPUSH
78153: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
78154: LD_ADDR_VAR 0 2
78158: PUSH
78159: LD_INT 81
78161: PUSH
78162: LD_OWVAR 2
78166: PUSH
78167: EMPTY
78168: LIST
78169: LIST
78170: PUSH
78171: LD_INT 21
78173: PUSH
78174: LD_INT 1
78176: PUSH
78177: EMPTY
78178: LIST
78179: LIST
78180: PUSH
78181: EMPTY
78182: LIST
78183: LIST
78184: PPUSH
78185: CALL_OW 69
78189: ST_TO_ADDR
// ToLua ( playComputer() ) ;
78190: LD_STRING playComputer()
78192: PPUSH
78193: CALL_OW 559
// if not tmp then
78197: LD_VAR 0 2
78201: NOT
78202: IFFALSE 78206
// exit ;
78204: GO 78260
// for i in tmp do
78206: LD_ADDR_VAR 0 1
78210: PUSH
78211: LD_VAR 0 2
78215: PUSH
78216: FOR_IN
78217: IFFALSE 78258
// for j := 1 to 4 do
78219: LD_ADDR_VAR 0 3
78223: PUSH
78224: DOUBLE
78225: LD_INT 1
78227: DEC
78228: ST_TO_ADDR
78229: LD_INT 4
78231: PUSH
78232: FOR_TO
78233: IFFALSE 78254
// SetSkill ( i , j , 10 ) ;
78235: LD_VAR 0 1
78239: PPUSH
78240: LD_VAR 0 3
78244: PPUSH
78245: LD_INT 10
78247: PPUSH
78248: CALL_OW 237
78252: GO 78232
78254: POP
78255: POP
78256: GO 78216
78258: POP
78259: POP
// end ;
78260: PPOPN 3
78262: END
// every 0 0$1 trigger s30 do var i , tmp ;
78263: LD_EXP 134
78267: IFFALSE 78336
78269: GO 78271
78271: DISABLE
78272: LD_INT 0
78274: PPUSH
78275: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
78276: LD_ADDR_VAR 0 2
78280: PUSH
78281: LD_INT 22
78283: PUSH
78284: LD_OWVAR 2
78288: PUSH
78289: EMPTY
78290: LIST
78291: LIST
78292: PPUSH
78293: CALL_OW 69
78297: ST_TO_ADDR
// if not tmp then
78298: LD_VAR 0 2
78302: NOT
78303: IFFALSE 78307
// exit ;
78305: GO 78336
// for i in tmp do
78307: LD_ADDR_VAR 0 1
78311: PUSH
78312: LD_VAR 0 2
78316: PUSH
78317: FOR_IN
78318: IFFALSE 78334
// SetLives ( i , 300 ) ;
78320: LD_VAR 0 1
78324: PPUSH
78325: LD_INT 300
78327: PPUSH
78328: CALL_OW 234
78332: GO 78317
78334: POP
78335: POP
// end ;
78336: PPOPN 2
78338: END
// every 0 0$1 trigger s60 do var i , tmp ;
78339: LD_EXP 135
78343: IFFALSE 78412
78345: GO 78347
78347: DISABLE
78348: LD_INT 0
78350: PPUSH
78351: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
78352: LD_ADDR_VAR 0 2
78356: PUSH
78357: LD_INT 22
78359: PUSH
78360: LD_OWVAR 2
78364: PUSH
78365: EMPTY
78366: LIST
78367: LIST
78368: PPUSH
78369: CALL_OW 69
78373: ST_TO_ADDR
// if not tmp then
78374: LD_VAR 0 2
78378: NOT
78379: IFFALSE 78383
// exit ;
78381: GO 78412
// for i in tmp do
78383: LD_ADDR_VAR 0 1
78387: PUSH
78388: LD_VAR 0 2
78392: PUSH
78393: FOR_IN
78394: IFFALSE 78410
// SetLives ( i , 600 ) ;
78396: LD_VAR 0 1
78400: PPUSH
78401: LD_INT 600
78403: PPUSH
78404: CALL_OW 234
78408: GO 78393
78410: POP
78411: POP
// end ;
78412: PPOPN 2
78414: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
78415: LD_INT 0
78417: PPUSH
// case cmd of 301 :
78418: LD_VAR 0 1
78422: PUSH
78423: LD_INT 301
78425: DOUBLE
78426: EQUAL
78427: IFTRUE 78431
78429: GO 78463
78431: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
78432: LD_VAR 0 6
78436: PPUSH
78437: LD_VAR 0 7
78441: PPUSH
78442: LD_VAR 0 8
78446: PPUSH
78447: LD_VAR 0 4
78451: PPUSH
78452: LD_VAR 0 5
78456: PPUSH
78457: CALL 79664 0 5
78461: GO 78584
78463: LD_INT 302
78465: DOUBLE
78466: EQUAL
78467: IFTRUE 78471
78469: GO 78508
78471: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
78472: LD_VAR 0 6
78476: PPUSH
78477: LD_VAR 0 7
78481: PPUSH
78482: LD_VAR 0 8
78486: PPUSH
78487: LD_VAR 0 9
78491: PPUSH
78492: LD_VAR 0 4
78496: PPUSH
78497: LD_VAR 0 5
78501: PPUSH
78502: CALL 79755 0 6
78506: GO 78584
78508: LD_INT 303
78510: DOUBLE
78511: EQUAL
78512: IFTRUE 78516
78514: GO 78553
78516: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
78517: LD_VAR 0 6
78521: PPUSH
78522: LD_VAR 0 7
78526: PPUSH
78527: LD_VAR 0 8
78531: PPUSH
78532: LD_VAR 0 9
78536: PPUSH
78537: LD_VAR 0 4
78541: PPUSH
78542: LD_VAR 0 5
78546: PPUSH
78547: CALL 78589 0 6
78551: GO 78584
78553: LD_INT 304
78555: DOUBLE
78556: EQUAL
78557: IFTRUE 78561
78559: GO 78583
78561: POP
// hHackTeleport ( unit , x , y ) ; end ;
78562: LD_VAR 0 2
78566: PPUSH
78567: LD_VAR 0 4
78571: PPUSH
78572: LD_VAR 0 5
78576: PPUSH
78577: CALL 80348 0 3
78581: GO 78584
78583: POP
// end ;
78584: LD_VAR 0 12
78588: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
78589: LD_INT 0
78591: PPUSH
78592: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
78593: LD_VAR 0 1
78597: PUSH
78598: LD_INT 1
78600: LESS
78601: PUSH
78602: LD_VAR 0 1
78606: PUSH
78607: LD_INT 3
78609: GREATER
78610: OR
78611: PUSH
78612: LD_VAR 0 5
78616: PPUSH
78617: LD_VAR 0 6
78621: PPUSH
78622: CALL_OW 428
78626: OR
78627: IFFALSE 78631
// exit ;
78629: GO 79351
// uc_side := your_side ;
78631: LD_ADDR_OWVAR 20
78635: PUSH
78636: LD_OWVAR 2
78640: ST_TO_ADDR
// uc_nation := nation ;
78641: LD_ADDR_OWVAR 21
78645: PUSH
78646: LD_VAR 0 1
78650: ST_TO_ADDR
// bc_level = 1 ;
78651: LD_ADDR_OWVAR 43
78655: PUSH
78656: LD_INT 1
78658: ST_TO_ADDR
// case btype of 1 :
78659: LD_VAR 0 2
78663: PUSH
78664: LD_INT 1
78666: DOUBLE
78667: EQUAL
78668: IFTRUE 78672
78670: GO 78683
78672: POP
// bc_type := b_depot ; 2 :
78673: LD_ADDR_OWVAR 42
78677: PUSH
78678: LD_INT 0
78680: ST_TO_ADDR
78681: GO 79295
78683: LD_INT 2
78685: DOUBLE
78686: EQUAL
78687: IFTRUE 78691
78689: GO 78702
78691: POP
// bc_type := b_warehouse ; 3 :
78692: LD_ADDR_OWVAR 42
78696: PUSH
78697: LD_INT 1
78699: ST_TO_ADDR
78700: GO 79295
78702: LD_INT 3
78704: DOUBLE
78705: EQUAL
78706: IFTRUE 78710
78708: GO 78721
78710: POP
// bc_type := b_lab ; 4 .. 9 :
78711: LD_ADDR_OWVAR 42
78715: PUSH
78716: LD_INT 6
78718: ST_TO_ADDR
78719: GO 79295
78721: LD_INT 4
78723: DOUBLE
78724: GREATEREQUAL
78725: IFFALSE 78733
78727: LD_INT 9
78729: DOUBLE
78730: LESSEQUAL
78731: IFTRUE 78735
78733: GO 78787
78735: POP
// begin bc_type := b_lab_half ;
78736: LD_ADDR_OWVAR 42
78740: PUSH
78741: LD_INT 7
78743: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
78744: LD_ADDR_OWVAR 44
78748: PUSH
78749: LD_INT 10
78751: PUSH
78752: LD_INT 11
78754: PUSH
78755: LD_INT 12
78757: PUSH
78758: LD_INT 15
78760: PUSH
78761: LD_INT 14
78763: PUSH
78764: LD_INT 13
78766: PUSH
78767: EMPTY
78768: LIST
78769: LIST
78770: LIST
78771: LIST
78772: LIST
78773: LIST
78774: PUSH
78775: LD_VAR 0 2
78779: PUSH
78780: LD_INT 3
78782: MINUS
78783: ARRAY
78784: ST_TO_ADDR
// end ; 10 .. 13 :
78785: GO 79295
78787: LD_INT 10
78789: DOUBLE
78790: GREATEREQUAL
78791: IFFALSE 78799
78793: LD_INT 13
78795: DOUBLE
78796: LESSEQUAL
78797: IFTRUE 78801
78799: GO 78878
78801: POP
// begin bc_type := b_lab_full ;
78802: LD_ADDR_OWVAR 42
78806: PUSH
78807: LD_INT 8
78809: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
78810: LD_ADDR_OWVAR 44
78814: PUSH
78815: LD_INT 10
78817: PUSH
78818: LD_INT 12
78820: PUSH
78821: LD_INT 14
78823: PUSH
78824: LD_INT 13
78826: PUSH
78827: EMPTY
78828: LIST
78829: LIST
78830: LIST
78831: LIST
78832: PUSH
78833: LD_VAR 0 2
78837: PUSH
78838: LD_INT 9
78840: MINUS
78841: ARRAY
78842: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
78843: LD_ADDR_OWVAR 45
78847: PUSH
78848: LD_INT 11
78850: PUSH
78851: LD_INT 15
78853: PUSH
78854: LD_INT 12
78856: PUSH
78857: LD_INT 15
78859: PUSH
78860: EMPTY
78861: LIST
78862: LIST
78863: LIST
78864: LIST
78865: PUSH
78866: LD_VAR 0 2
78870: PUSH
78871: LD_INT 9
78873: MINUS
78874: ARRAY
78875: ST_TO_ADDR
// end ; 14 :
78876: GO 79295
78878: LD_INT 14
78880: DOUBLE
78881: EQUAL
78882: IFTRUE 78886
78884: GO 78897
78886: POP
// bc_type := b_workshop ; 15 :
78887: LD_ADDR_OWVAR 42
78891: PUSH
78892: LD_INT 2
78894: ST_TO_ADDR
78895: GO 79295
78897: LD_INT 15
78899: DOUBLE
78900: EQUAL
78901: IFTRUE 78905
78903: GO 78916
78905: POP
// bc_type := b_factory ; 16 :
78906: LD_ADDR_OWVAR 42
78910: PUSH
78911: LD_INT 3
78913: ST_TO_ADDR
78914: GO 79295
78916: LD_INT 16
78918: DOUBLE
78919: EQUAL
78920: IFTRUE 78924
78922: GO 78935
78924: POP
// bc_type := b_ext_gun ; 17 :
78925: LD_ADDR_OWVAR 42
78929: PUSH
78930: LD_INT 17
78932: ST_TO_ADDR
78933: GO 79295
78935: LD_INT 17
78937: DOUBLE
78938: EQUAL
78939: IFTRUE 78943
78941: GO 78971
78943: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
78944: LD_ADDR_OWVAR 42
78948: PUSH
78949: LD_INT 19
78951: PUSH
78952: LD_INT 23
78954: PUSH
78955: LD_INT 19
78957: PUSH
78958: EMPTY
78959: LIST
78960: LIST
78961: LIST
78962: PUSH
78963: LD_VAR 0 1
78967: ARRAY
78968: ST_TO_ADDR
78969: GO 79295
78971: LD_INT 18
78973: DOUBLE
78974: EQUAL
78975: IFTRUE 78979
78977: GO 78990
78979: POP
// bc_type := b_ext_radar ; 19 :
78980: LD_ADDR_OWVAR 42
78984: PUSH
78985: LD_INT 20
78987: ST_TO_ADDR
78988: GO 79295
78990: LD_INT 19
78992: DOUBLE
78993: EQUAL
78994: IFTRUE 78998
78996: GO 79009
78998: POP
// bc_type := b_ext_radio ; 20 :
78999: LD_ADDR_OWVAR 42
79003: PUSH
79004: LD_INT 22
79006: ST_TO_ADDR
79007: GO 79295
79009: LD_INT 20
79011: DOUBLE
79012: EQUAL
79013: IFTRUE 79017
79015: GO 79028
79017: POP
// bc_type := b_ext_siberium ; 21 :
79018: LD_ADDR_OWVAR 42
79022: PUSH
79023: LD_INT 21
79025: ST_TO_ADDR
79026: GO 79295
79028: LD_INT 21
79030: DOUBLE
79031: EQUAL
79032: IFTRUE 79036
79034: GO 79047
79036: POP
// bc_type := b_ext_computer ; 22 :
79037: LD_ADDR_OWVAR 42
79041: PUSH
79042: LD_INT 24
79044: ST_TO_ADDR
79045: GO 79295
79047: LD_INT 22
79049: DOUBLE
79050: EQUAL
79051: IFTRUE 79055
79053: GO 79066
79055: POP
// bc_type := b_ext_track ; 23 :
79056: LD_ADDR_OWVAR 42
79060: PUSH
79061: LD_INT 16
79063: ST_TO_ADDR
79064: GO 79295
79066: LD_INT 23
79068: DOUBLE
79069: EQUAL
79070: IFTRUE 79074
79072: GO 79085
79074: POP
// bc_type := b_ext_laser ; 24 :
79075: LD_ADDR_OWVAR 42
79079: PUSH
79080: LD_INT 25
79082: ST_TO_ADDR
79083: GO 79295
79085: LD_INT 24
79087: DOUBLE
79088: EQUAL
79089: IFTRUE 79093
79091: GO 79104
79093: POP
// bc_type := b_control_tower ; 25 :
79094: LD_ADDR_OWVAR 42
79098: PUSH
79099: LD_INT 36
79101: ST_TO_ADDR
79102: GO 79295
79104: LD_INT 25
79106: DOUBLE
79107: EQUAL
79108: IFTRUE 79112
79110: GO 79123
79112: POP
// bc_type := b_breastwork ; 26 :
79113: LD_ADDR_OWVAR 42
79117: PUSH
79118: LD_INT 31
79120: ST_TO_ADDR
79121: GO 79295
79123: LD_INT 26
79125: DOUBLE
79126: EQUAL
79127: IFTRUE 79131
79129: GO 79142
79131: POP
// bc_type := b_bunker ; 27 :
79132: LD_ADDR_OWVAR 42
79136: PUSH
79137: LD_INT 32
79139: ST_TO_ADDR
79140: GO 79295
79142: LD_INT 27
79144: DOUBLE
79145: EQUAL
79146: IFTRUE 79150
79148: GO 79161
79150: POP
// bc_type := b_turret ; 28 :
79151: LD_ADDR_OWVAR 42
79155: PUSH
79156: LD_INT 33
79158: ST_TO_ADDR
79159: GO 79295
79161: LD_INT 28
79163: DOUBLE
79164: EQUAL
79165: IFTRUE 79169
79167: GO 79180
79169: POP
// bc_type := b_armoury ; 29 :
79170: LD_ADDR_OWVAR 42
79174: PUSH
79175: LD_INT 4
79177: ST_TO_ADDR
79178: GO 79295
79180: LD_INT 29
79182: DOUBLE
79183: EQUAL
79184: IFTRUE 79188
79186: GO 79199
79188: POP
// bc_type := b_barracks ; 30 :
79189: LD_ADDR_OWVAR 42
79193: PUSH
79194: LD_INT 5
79196: ST_TO_ADDR
79197: GO 79295
79199: LD_INT 30
79201: DOUBLE
79202: EQUAL
79203: IFTRUE 79207
79205: GO 79218
79207: POP
// bc_type := b_solar_power ; 31 :
79208: LD_ADDR_OWVAR 42
79212: PUSH
79213: LD_INT 27
79215: ST_TO_ADDR
79216: GO 79295
79218: LD_INT 31
79220: DOUBLE
79221: EQUAL
79222: IFTRUE 79226
79224: GO 79237
79226: POP
// bc_type := b_oil_power ; 32 :
79227: LD_ADDR_OWVAR 42
79231: PUSH
79232: LD_INT 26
79234: ST_TO_ADDR
79235: GO 79295
79237: LD_INT 32
79239: DOUBLE
79240: EQUAL
79241: IFTRUE 79245
79243: GO 79256
79245: POP
// bc_type := b_siberite_power ; 33 :
79246: LD_ADDR_OWVAR 42
79250: PUSH
79251: LD_INT 28
79253: ST_TO_ADDR
79254: GO 79295
79256: LD_INT 33
79258: DOUBLE
79259: EQUAL
79260: IFTRUE 79264
79262: GO 79275
79264: POP
// bc_type := b_oil_mine ; 34 :
79265: LD_ADDR_OWVAR 42
79269: PUSH
79270: LD_INT 29
79272: ST_TO_ADDR
79273: GO 79295
79275: LD_INT 34
79277: DOUBLE
79278: EQUAL
79279: IFTRUE 79283
79281: GO 79294
79283: POP
// bc_type := b_siberite_mine ; end ;
79284: LD_ADDR_OWVAR 42
79288: PUSH
79289: LD_INT 30
79291: ST_TO_ADDR
79292: GO 79295
79294: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
79295: LD_ADDR_VAR 0 8
79299: PUSH
79300: LD_VAR 0 5
79304: PPUSH
79305: LD_VAR 0 6
79309: PPUSH
79310: LD_VAR 0 3
79314: PPUSH
79315: CALL_OW 47
79319: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
79320: LD_OWVAR 42
79324: PUSH
79325: LD_INT 32
79327: PUSH
79328: LD_INT 33
79330: PUSH
79331: EMPTY
79332: LIST
79333: LIST
79334: IN
79335: IFFALSE 79351
// PlaceWeaponTurret ( b , weapon ) ;
79337: LD_VAR 0 8
79341: PPUSH
79342: LD_VAR 0 4
79346: PPUSH
79347: CALL_OW 431
// end ;
79351: LD_VAR 0 7
79355: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
79356: LD_INT 0
79358: PPUSH
79359: PPUSH
79360: PPUSH
79361: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79362: LD_ADDR_VAR 0 4
79366: PUSH
79367: LD_INT 22
79369: PUSH
79370: LD_OWVAR 2
79374: PUSH
79375: EMPTY
79376: LIST
79377: LIST
79378: PUSH
79379: LD_INT 2
79381: PUSH
79382: LD_INT 30
79384: PUSH
79385: LD_INT 0
79387: PUSH
79388: EMPTY
79389: LIST
79390: LIST
79391: PUSH
79392: LD_INT 30
79394: PUSH
79395: LD_INT 1
79397: PUSH
79398: EMPTY
79399: LIST
79400: LIST
79401: PUSH
79402: EMPTY
79403: LIST
79404: LIST
79405: LIST
79406: PUSH
79407: EMPTY
79408: LIST
79409: LIST
79410: PPUSH
79411: CALL_OW 69
79415: ST_TO_ADDR
// if not tmp then
79416: LD_VAR 0 4
79420: NOT
79421: IFFALSE 79425
// exit ;
79423: GO 79484
// for i in tmp do
79425: LD_ADDR_VAR 0 2
79429: PUSH
79430: LD_VAR 0 4
79434: PUSH
79435: FOR_IN
79436: IFFALSE 79482
// for j = 1 to 3 do
79438: LD_ADDR_VAR 0 3
79442: PUSH
79443: DOUBLE
79444: LD_INT 1
79446: DEC
79447: ST_TO_ADDR
79448: LD_INT 3
79450: PUSH
79451: FOR_TO
79452: IFFALSE 79478
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
79454: LD_VAR 0 2
79458: PPUSH
79459: CALL_OW 274
79463: PPUSH
79464: LD_VAR 0 3
79468: PPUSH
79469: LD_INT 99999
79471: PPUSH
79472: CALL_OW 277
79476: GO 79451
79478: POP
79479: POP
79480: GO 79435
79482: POP
79483: POP
// end ;
79484: LD_VAR 0 1
79488: RET
// export function hHackSetLevel10 ; var i , j ; begin
79489: LD_INT 0
79491: PPUSH
79492: PPUSH
79493: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
79494: LD_ADDR_VAR 0 2
79498: PUSH
79499: LD_INT 21
79501: PUSH
79502: LD_INT 1
79504: PUSH
79505: EMPTY
79506: LIST
79507: LIST
79508: PPUSH
79509: CALL_OW 69
79513: PUSH
79514: FOR_IN
79515: IFFALSE 79567
// if IsSelected ( i ) then
79517: LD_VAR 0 2
79521: PPUSH
79522: CALL_OW 306
79526: IFFALSE 79565
// begin for j := 1 to 4 do
79528: LD_ADDR_VAR 0 3
79532: PUSH
79533: DOUBLE
79534: LD_INT 1
79536: DEC
79537: ST_TO_ADDR
79538: LD_INT 4
79540: PUSH
79541: FOR_TO
79542: IFFALSE 79563
// SetSkill ( i , j , 10 ) ;
79544: LD_VAR 0 2
79548: PPUSH
79549: LD_VAR 0 3
79553: PPUSH
79554: LD_INT 10
79556: PPUSH
79557: CALL_OW 237
79561: GO 79541
79563: POP
79564: POP
// end ;
79565: GO 79514
79567: POP
79568: POP
// end ;
79569: LD_VAR 0 1
79573: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
79574: LD_INT 0
79576: PPUSH
79577: PPUSH
79578: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
79579: LD_ADDR_VAR 0 2
79583: PUSH
79584: LD_INT 22
79586: PUSH
79587: LD_OWVAR 2
79591: PUSH
79592: EMPTY
79593: LIST
79594: LIST
79595: PUSH
79596: LD_INT 21
79598: PUSH
79599: LD_INT 1
79601: PUSH
79602: EMPTY
79603: LIST
79604: LIST
79605: PUSH
79606: EMPTY
79607: LIST
79608: LIST
79609: PPUSH
79610: CALL_OW 69
79614: PUSH
79615: FOR_IN
79616: IFFALSE 79657
// begin for j := 1 to 4 do
79618: LD_ADDR_VAR 0 3
79622: PUSH
79623: DOUBLE
79624: LD_INT 1
79626: DEC
79627: ST_TO_ADDR
79628: LD_INT 4
79630: PUSH
79631: FOR_TO
79632: IFFALSE 79653
// SetSkill ( i , j , 10 ) ;
79634: LD_VAR 0 2
79638: PPUSH
79639: LD_VAR 0 3
79643: PPUSH
79644: LD_INT 10
79646: PPUSH
79647: CALL_OW 237
79651: GO 79631
79653: POP
79654: POP
// end ;
79655: GO 79615
79657: POP
79658: POP
// end ;
79659: LD_VAR 0 1
79663: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
79664: LD_INT 0
79666: PPUSH
// uc_side := your_side ;
79667: LD_ADDR_OWVAR 20
79671: PUSH
79672: LD_OWVAR 2
79676: ST_TO_ADDR
// uc_nation := nation ;
79677: LD_ADDR_OWVAR 21
79681: PUSH
79682: LD_VAR 0 1
79686: ST_TO_ADDR
// InitHc ;
79687: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
79691: LD_INT 0
79693: PPUSH
79694: LD_VAR 0 2
79698: PPUSH
79699: LD_VAR 0 3
79703: PPUSH
79704: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
79708: LD_VAR 0 4
79712: PPUSH
79713: LD_VAR 0 5
79717: PPUSH
79718: CALL_OW 428
79722: PUSH
79723: LD_INT 0
79725: EQUAL
79726: IFFALSE 79750
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
79728: CALL_OW 44
79732: PPUSH
79733: LD_VAR 0 4
79737: PPUSH
79738: LD_VAR 0 5
79742: PPUSH
79743: LD_INT 1
79745: PPUSH
79746: CALL_OW 48
// end ;
79750: LD_VAR 0 6
79754: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
79755: LD_INT 0
79757: PPUSH
79758: PPUSH
// uc_side := your_side ;
79759: LD_ADDR_OWVAR 20
79763: PUSH
79764: LD_OWVAR 2
79768: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
79769: LD_VAR 0 1
79773: PUSH
79774: LD_INT 1
79776: PUSH
79777: LD_INT 2
79779: PUSH
79780: LD_INT 3
79782: PUSH
79783: LD_INT 4
79785: PUSH
79786: LD_INT 5
79788: PUSH
79789: EMPTY
79790: LIST
79791: LIST
79792: LIST
79793: LIST
79794: LIST
79795: IN
79796: IFFALSE 79808
// uc_nation := nation_american else
79798: LD_ADDR_OWVAR 21
79802: PUSH
79803: LD_INT 1
79805: ST_TO_ADDR
79806: GO 79851
// if chassis in [ 11 , 12 , 13 , 14 ] then
79808: LD_VAR 0 1
79812: PUSH
79813: LD_INT 11
79815: PUSH
79816: LD_INT 12
79818: PUSH
79819: LD_INT 13
79821: PUSH
79822: LD_INT 14
79824: PUSH
79825: EMPTY
79826: LIST
79827: LIST
79828: LIST
79829: LIST
79830: IN
79831: IFFALSE 79843
// uc_nation := nation_arabian else
79833: LD_ADDR_OWVAR 21
79837: PUSH
79838: LD_INT 2
79840: ST_TO_ADDR
79841: GO 79851
// uc_nation := nation_russian ;
79843: LD_ADDR_OWVAR 21
79847: PUSH
79848: LD_INT 3
79850: ST_TO_ADDR
// vc_chassis := chassis ;
79851: LD_ADDR_OWVAR 37
79855: PUSH
79856: LD_VAR 0 1
79860: ST_TO_ADDR
// vc_engine := engine ;
79861: LD_ADDR_OWVAR 39
79865: PUSH
79866: LD_VAR 0 2
79870: ST_TO_ADDR
// vc_control := control ;
79871: LD_ADDR_OWVAR 38
79875: PUSH
79876: LD_VAR 0 3
79880: ST_TO_ADDR
// vc_weapon := weapon ;
79881: LD_ADDR_OWVAR 40
79885: PUSH
79886: LD_VAR 0 4
79890: ST_TO_ADDR
// un := CreateVehicle ;
79891: LD_ADDR_VAR 0 8
79895: PUSH
79896: CALL_OW 45
79900: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
79901: LD_VAR 0 8
79905: PPUSH
79906: LD_INT 0
79908: PPUSH
79909: LD_INT 5
79911: PPUSH
79912: CALL_OW 12
79916: PPUSH
79917: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
79921: LD_VAR 0 8
79925: PPUSH
79926: LD_VAR 0 5
79930: PPUSH
79931: LD_VAR 0 6
79935: PPUSH
79936: LD_INT 1
79938: PPUSH
79939: CALL_OW 48
// end ;
79943: LD_VAR 0 7
79947: RET
// export hInvincible ; every 1 do
79948: GO 79950
79950: DISABLE
// hInvincible := [ ] ;
79951: LD_ADDR_EXP 136
79955: PUSH
79956: EMPTY
79957: ST_TO_ADDR
79958: END
// every 10 do var i ;
79959: GO 79961
79961: DISABLE
79962: LD_INT 0
79964: PPUSH
// begin enable ;
79965: ENABLE
// if not hInvincible then
79966: LD_EXP 136
79970: NOT
79971: IFFALSE 79975
// exit ;
79973: GO 80019
// for i in hInvincible do
79975: LD_ADDR_VAR 0 1
79979: PUSH
79980: LD_EXP 136
79984: PUSH
79985: FOR_IN
79986: IFFALSE 80017
// if GetLives ( i ) < 1000 then
79988: LD_VAR 0 1
79992: PPUSH
79993: CALL_OW 256
79997: PUSH
79998: LD_INT 1000
80000: LESS
80001: IFFALSE 80015
// SetLives ( i , 1000 ) ;
80003: LD_VAR 0 1
80007: PPUSH
80008: LD_INT 1000
80010: PPUSH
80011: CALL_OW 234
80015: GO 79985
80017: POP
80018: POP
// end ;
80019: PPOPN 1
80021: END
// export function hHackInvincible ; var i ; begin
80022: LD_INT 0
80024: PPUSH
80025: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
80026: LD_ADDR_VAR 0 2
80030: PUSH
80031: LD_INT 2
80033: PUSH
80034: LD_INT 21
80036: PUSH
80037: LD_INT 1
80039: PUSH
80040: EMPTY
80041: LIST
80042: LIST
80043: PUSH
80044: LD_INT 21
80046: PUSH
80047: LD_INT 2
80049: PUSH
80050: EMPTY
80051: LIST
80052: LIST
80053: PUSH
80054: EMPTY
80055: LIST
80056: LIST
80057: LIST
80058: PPUSH
80059: CALL_OW 69
80063: PUSH
80064: FOR_IN
80065: IFFALSE 80126
// if IsSelected ( i ) then
80067: LD_VAR 0 2
80071: PPUSH
80072: CALL_OW 306
80076: IFFALSE 80124
// begin if i in hInvincible then
80078: LD_VAR 0 2
80082: PUSH
80083: LD_EXP 136
80087: IN
80088: IFFALSE 80108
// hInvincible := hInvincible diff i else
80090: LD_ADDR_EXP 136
80094: PUSH
80095: LD_EXP 136
80099: PUSH
80100: LD_VAR 0 2
80104: DIFF
80105: ST_TO_ADDR
80106: GO 80124
// hInvincible := hInvincible union i ;
80108: LD_ADDR_EXP 136
80112: PUSH
80113: LD_EXP 136
80117: PUSH
80118: LD_VAR 0 2
80122: UNION
80123: ST_TO_ADDR
// end ;
80124: GO 80064
80126: POP
80127: POP
// end ;
80128: LD_VAR 0 1
80132: RET
// export function hHackInvisible ; var i , j ; begin
80133: LD_INT 0
80135: PPUSH
80136: PPUSH
80137: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
80138: LD_ADDR_VAR 0 2
80142: PUSH
80143: LD_INT 21
80145: PUSH
80146: LD_INT 1
80148: PUSH
80149: EMPTY
80150: LIST
80151: LIST
80152: PPUSH
80153: CALL_OW 69
80157: PUSH
80158: FOR_IN
80159: IFFALSE 80183
// if IsSelected ( i ) then
80161: LD_VAR 0 2
80165: PPUSH
80166: CALL_OW 306
80170: IFFALSE 80181
// ComForceInvisible ( i ) ;
80172: LD_VAR 0 2
80176: PPUSH
80177: CALL_OW 496
80181: GO 80158
80183: POP
80184: POP
// end ;
80185: LD_VAR 0 1
80189: RET
// export function hHackChangeYourSide ; begin
80190: LD_INT 0
80192: PPUSH
// if your_side = 8 then
80193: LD_OWVAR 2
80197: PUSH
80198: LD_INT 8
80200: EQUAL
80201: IFFALSE 80213
// your_side := 0 else
80203: LD_ADDR_OWVAR 2
80207: PUSH
80208: LD_INT 0
80210: ST_TO_ADDR
80211: GO 80227
// your_side := your_side + 1 ;
80213: LD_ADDR_OWVAR 2
80217: PUSH
80218: LD_OWVAR 2
80222: PUSH
80223: LD_INT 1
80225: PLUS
80226: ST_TO_ADDR
// end ;
80227: LD_VAR 0 1
80231: RET
// export function hHackChangeUnitSide ; var i , j ; begin
80232: LD_INT 0
80234: PPUSH
80235: PPUSH
80236: PPUSH
// for i in all_units do
80237: LD_ADDR_VAR 0 2
80241: PUSH
80242: LD_OWVAR 3
80246: PUSH
80247: FOR_IN
80248: IFFALSE 80326
// if IsSelected ( i ) then
80250: LD_VAR 0 2
80254: PPUSH
80255: CALL_OW 306
80259: IFFALSE 80324
// begin j := GetSide ( i ) ;
80261: LD_ADDR_VAR 0 3
80265: PUSH
80266: LD_VAR 0 2
80270: PPUSH
80271: CALL_OW 255
80275: ST_TO_ADDR
// if j = 8 then
80276: LD_VAR 0 3
80280: PUSH
80281: LD_INT 8
80283: EQUAL
80284: IFFALSE 80296
// j := 0 else
80286: LD_ADDR_VAR 0 3
80290: PUSH
80291: LD_INT 0
80293: ST_TO_ADDR
80294: GO 80310
// j := j + 1 ;
80296: LD_ADDR_VAR 0 3
80300: PUSH
80301: LD_VAR 0 3
80305: PUSH
80306: LD_INT 1
80308: PLUS
80309: ST_TO_ADDR
// SetSide ( i , j ) ;
80310: LD_VAR 0 2
80314: PPUSH
80315: LD_VAR 0 3
80319: PPUSH
80320: CALL_OW 235
// end ;
80324: GO 80247
80326: POP
80327: POP
// end ;
80328: LD_VAR 0 1
80332: RET
// export function hHackFog ; begin
80333: LD_INT 0
80335: PPUSH
// FogOff ( true ) ;
80336: LD_INT 1
80338: PPUSH
80339: CALL_OW 344
// end ;
80343: LD_VAR 0 1
80347: RET
// export function hHackTeleport ( unit , x , y ) ; begin
80348: LD_INT 0
80350: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
80351: LD_VAR 0 1
80355: PPUSH
80356: LD_VAR 0 2
80360: PPUSH
80361: LD_VAR 0 3
80365: PPUSH
80366: LD_INT 1
80368: PPUSH
80369: LD_INT 1
80371: PPUSH
80372: CALL_OW 483
// CenterOnXY ( x , y ) ;
80376: LD_VAR 0 2
80380: PPUSH
80381: LD_VAR 0 3
80385: PPUSH
80386: CALL_OW 84
// end ; end_of_file
80390: LD_VAR 0 4
80394: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80395: LD_VAR 0 1
80399: PUSH
80400: LD_INT 200
80402: DOUBLE
80403: GREATEREQUAL
80404: IFFALSE 80412
80406: LD_INT 299
80408: DOUBLE
80409: LESSEQUAL
80410: IFTRUE 80414
80412: GO 80446
80414: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80415: LD_VAR 0 1
80419: PPUSH
80420: LD_VAR 0 2
80424: PPUSH
80425: LD_VAR 0 3
80429: PPUSH
80430: LD_VAR 0 4
80434: PPUSH
80435: LD_VAR 0 5
80439: PPUSH
80440: CALL 80936 0 5
80444: GO 80523
80446: LD_INT 300
80448: DOUBLE
80449: GREATEREQUAL
80450: IFFALSE 80458
80452: LD_INT 399
80454: DOUBLE
80455: LESSEQUAL
80456: IFTRUE 80460
80458: GO 80522
80460: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80461: LD_VAR 0 1
80465: PPUSH
80466: LD_VAR 0 2
80470: PPUSH
80471: LD_VAR 0 3
80475: PPUSH
80476: LD_VAR 0 4
80480: PPUSH
80481: LD_VAR 0 5
80485: PPUSH
80486: LD_VAR 0 6
80490: PPUSH
80491: LD_VAR 0 7
80495: PPUSH
80496: LD_VAR 0 8
80500: PPUSH
80501: LD_VAR 0 9
80505: PPUSH
80506: LD_VAR 0 10
80510: PPUSH
80511: LD_VAR 0 11
80515: PPUSH
80516: CALL 78415 0 11
80520: GO 80523
80522: POP
// end ;
80523: PPOPN 11
80525: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80526: LD_VAR 0 1
80530: PPUSH
80531: LD_VAR 0 2
80535: PPUSH
80536: LD_VAR 0 3
80540: PPUSH
80541: LD_VAR 0 4
80545: PPUSH
80546: LD_VAR 0 5
80550: PPUSH
80551: CALL 80672 0 5
// end ; end_of_file
80555: PPOPN 5
80557: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
80558: LD_INT 0
80560: PPUSH
80561: PPUSH
80562: PPUSH
80563: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
80564: LD_VAR 0 1
80568: PPUSH
80569: CALL_OW 264
80573: PUSH
80574: LD_EXP 63
80578: EQUAL
80579: IFFALSE 80651
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
80581: LD_INT 68
80583: PPUSH
80584: LD_VAR 0 1
80588: PPUSH
80589: CALL_OW 255
80593: PPUSH
80594: CALL_OW 321
80598: PUSH
80599: LD_INT 2
80601: EQUAL
80602: IFFALSE 80614
// eff := 70 else
80604: LD_ADDR_VAR 0 4
80608: PUSH
80609: LD_INT 70
80611: ST_TO_ADDR
80612: GO 80622
// eff := 30 ;
80614: LD_ADDR_VAR 0 4
80618: PUSH
80619: LD_INT 30
80621: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
80622: LD_VAR 0 1
80626: PPUSH
80627: CALL_OW 250
80631: PPUSH
80632: LD_VAR 0 1
80636: PPUSH
80637: CALL_OW 251
80641: PPUSH
80642: LD_VAR 0 4
80646: PPUSH
80647: CALL_OW 495
// end ; end ;
80651: LD_VAR 0 2
80655: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
80656: LD_INT 0
80658: PPUSH
// end ;
80659: LD_VAR 0 4
80663: RET
// export function SOS_Command ( cmd ) ; begin
80664: LD_INT 0
80666: PPUSH
// end ;
80667: LD_VAR 0 2
80671: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
80672: LD_INT 0
80674: PPUSH
// end ;
80675: LD_VAR 0 6
80679: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
80680: LD_INT 0
80682: PPUSH
80683: PPUSH
// if not vehicle or not factory then
80684: LD_VAR 0 1
80688: NOT
80689: PUSH
80690: LD_VAR 0 2
80694: NOT
80695: OR
80696: IFFALSE 80700
// exit ;
80698: GO 80931
// if factoryWaypoints >= factory then
80700: LD_EXP 137
80704: PUSH
80705: LD_VAR 0 2
80709: GREATEREQUAL
80710: IFFALSE 80931
// if factoryWaypoints [ factory ] then
80712: LD_EXP 137
80716: PUSH
80717: LD_VAR 0 2
80721: ARRAY
80722: IFFALSE 80931
// begin if GetControl ( vehicle ) = control_manual then
80724: LD_VAR 0 1
80728: PPUSH
80729: CALL_OW 263
80733: PUSH
80734: LD_INT 1
80736: EQUAL
80737: IFFALSE 80818
// begin driver := IsDrivenBy ( vehicle ) ;
80739: LD_ADDR_VAR 0 4
80743: PUSH
80744: LD_VAR 0 1
80748: PPUSH
80749: CALL_OW 311
80753: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
80754: LD_VAR 0 4
80758: PPUSH
80759: LD_EXP 137
80763: PUSH
80764: LD_VAR 0 2
80768: ARRAY
80769: PUSH
80770: LD_INT 3
80772: ARRAY
80773: PPUSH
80774: LD_EXP 137
80778: PUSH
80779: LD_VAR 0 2
80783: ARRAY
80784: PUSH
80785: LD_INT 4
80787: ARRAY
80788: PPUSH
80789: CALL_OW 171
// AddComExitVehicle ( driver ) ;
80793: LD_VAR 0 4
80797: PPUSH
80798: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
80802: LD_VAR 0 4
80806: PPUSH
80807: LD_VAR 0 2
80811: PPUSH
80812: CALL_OW 180
// end else
80816: GO 80931
// if GetControl ( vehicle ) = control_remote then
80818: LD_VAR 0 1
80822: PPUSH
80823: CALL_OW 263
80827: PUSH
80828: LD_INT 2
80830: EQUAL
80831: IFFALSE 80892
// begin wait ( 0 0$2 ) ;
80833: LD_INT 70
80835: PPUSH
80836: CALL_OW 67
// if Connect ( vehicle ) then
80840: LD_VAR 0 1
80844: PPUSH
80845: CALL 33407 0 1
80849: IFFALSE 80890
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
80851: LD_VAR 0 1
80855: PPUSH
80856: LD_EXP 137
80860: PUSH
80861: LD_VAR 0 2
80865: ARRAY
80866: PUSH
80867: LD_INT 3
80869: ARRAY
80870: PPUSH
80871: LD_EXP 137
80875: PUSH
80876: LD_VAR 0 2
80880: ARRAY
80881: PUSH
80882: LD_INT 4
80884: ARRAY
80885: PPUSH
80886: CALL_OW 171
// end else
80890: GO 80931
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
80892: LD_VAR 0 1
80896: PPUSH
80897: LD_EXP 137
80901: PUSH
80902: LD_VAR 0 2
80906: ARRAY
80907: PUSH
80908: LD_INT 3
80910: ARRAY
80911: PPUSH
80912: LD_EXP 137
80916: PUSH
80917: LD_VAR 0 2
80921: ARRAY
80922: PUSH
80923: LD_INT 4
80925: ARRAY
80926: PPUSH
80927: CALL_OW 171
// end ; end ;
80931: LD_VAR 0 3
80935: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
80936: LD_INT 0
80938: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
80939: LD_VAR 0 1
80943: PUSH
80944: LD_INT 250
80946: EQUAL
80947: PUSH
80948: LD_VAR 0 2
80952: PPUSH
80953: CALL_OW 264
80957: PUSH
80958: LD_EXP 66
80962: EQUAL
80963: AND
80964: IFFALSE 80985
// MinerPlaceMine ( unit , x , y ) ;
80966: LD_VAR 0 2
80970: PPUSH
80971: LD_VAR 0 4
80975: PPUSH
80976: LD_VAR 0 5
80980: PPUSH
80981: CALL 83713 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
80985: LD_VAR 0 1
80989: PUSH
80990: LD_INT 251
80992: EQUAL
80993: PUSH
80994: LD_VAR 0 2
80998: PPUSH
80999: CALL_OW 264
81003: PUSH
81004: LD_EXP 66
81008: EQUAL
81009: AND
81010: IFFALSE 81031
// MinerDetonateMine ( unit , x , y ) ;
81012: LD_VAR 0 2
81016: PPUSH
81017: LD_VAR 0 4
81021: PPUSH
81022: LD_VAR 0 5
81026: PPUSH
81027: CALL 83990 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
81031: LD_VAR 0 1
81035: PUSH
81036: LD_INT 252
81038: EQUAL
81039: PUSH
81040: LD_VAR 0 2
81044: PPUSH
81045: CALL_OW 264
81049: PUSH
81050: LD_EXP 66
81054: EQUAL
81055: AND
81056: IFFALSE 81077
// MinerCreateMinefield ( unit , x , y ) ;
81058: LD_VAR 0 2
81062: PPUSH
81063: LD_VAR 0 4
81067: PPUSH
81068: LD_VAR 0 5
81072: PPUSH
81073: CALL 84407 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
81077: LD_VAR 0 1
81081: PUSH
81082: LD_INT 253
81084: EQUAL
81085: PUSH
81086: LD_VAR 0 2
81090: PPUSH
81091: CALL_OW 257
81095: PUSH
81096: LD_INT 5
81098: EQUAL
81099: AND
81100: IFFALSE 81121
// ComBinocular ( unit , x , y ) ;
81102: LD_VAR 0 2
81106: PPUSH
81107: LD_VAR 0 4
81111: PPUSH
81112: LD_VAR 0 5
81116: PPUSH
81117: CALL 84778 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
81121: LD_VAR 0 1
81125: PUSH
81126: LD_INT 254
81128: EQUAL
81129: PUSH
81130: LD_VAR 0 2
81134: PPUSH
81135: CALL_OW 264
81139: PUSH
81140: LD_EXP 61
81144: EQUAL
81145: AND
81146: PUSH
81147: LD_VAR 0 3
81151: PPUSH
81152: CALL_OW 263
81156: PUSH
81157: LD_INT 3
81159: EQUAL
81160: AND
81161: IFFALSE 81177
// HackDestroyVehicle ( unit , selectedUnit ) ;
81163: LD_VAR 0 2
81167: PPUSH
81168: LD_VAR 0 3
81172: PPUSH
81173: CALL 83073 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
81177: LD_VAR 0 1
81181: PUSH
81182: LD_INT 255
81184: EQUAL
81185: PUSH
81186: LD_VAR 0 2
81190: PPUSH
81191: CALL_OW 264
81195: PUSH
81196: LD_INT 14
81198: PUSH
81199: LD_INT 53
81201: PUSH
81202: EMPTY
81203: LIST
81204: LIST
81205: IN
81206: AND
81207: PUSH
81208: LD_VAR 0 4
81212: PPUSH
81213: LD_VAR 0 5
81217: PPUSH
81218: CALL_OW 488
81222: AND
81223: IFFALSE 81247
// CutTreeXYR ( unit , x , y , 12 ) ;
81225: LD_VAR 0 2
81229: PPUSH
81230: LD_VAR 0 4
81234: PPUSH
81235: LD_VAR 0 5
81239: PPUSH
81240: LD_INT 12
81242: PPUSH
81243: CALL 81639 0 4
// if cmd = 256 then
81247: LD_VAR 0 1
81251: PUSH
81252: LD_INT 256
81254: EQUAL
81255: IFFALSE 81276
// SetFactoryWaypoint ( unit , x , y ) ;
81257: LD_VAR 0 2
81261: PPUSH
81262: LD_VAR 0 4
81266: PPUSH
81267: LD_VAR 0 5
81271: PPUSH
81272: CALL 81281 0 3
// end ;
81276: LD_VAR 0 6
81280: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
81281: LD_INT 0
81283: PPUSH
81284: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
81285: LD_VAR 0 1
81289: NOT
81290: PUSH
81291: LD_VAR 0 2
81295: PPUSH
81296: LD_VAR 0 3
81300: PPUSH
81301: CALL_OW 488
81305: NOT
81306: OR
81307: PUSH
81308: LD_VAR 0 1
81312: PPUSH
81313: CALL_OW 266
81317: PUSH
81318: LD_INT 3
81320: NONEQUAL
81321: PUSH
81322: LD_VAR 0 1
81326: PPUSH
81327: CALL_OW 247
81331: PUSH
81332: LD_INT 1
81334: EQUAL
81335: NOT
81336: AND
81337: OR
81338: IFFALSE 81342
// exit ;
81340: GO 81491
// if GetType ( factory ) = unit_human then
81342: LD_VAR 0 1
81346: PPUSH
81347: CALL_OW 247
81351: PUSH
81352: LD_INT 1
81354: EQUAL
81355: IFFALSE 81372
// factory := IsInUnit ( factory ) ;
81357: LD_ADDR_VAR 0 1
81361: PUSH
81362: LD_VAR 0 1
81366: PPUSH
81367: CALL_OW 310
81371: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
81372: LD_VAR 0 1
81376: PPUSH
81377: CALL_OW 266
81381: PUSH
81382: LD_INT 3
81384: NONEQUAL
81385: IFFALSE 81389
// exit ;
81387: GO 81491
// if HexInfo ( x , y ) = factory then
81389: LD_VAR 0 2
81393: PPUSH
81394: LD_VAR 0 3
81398: PPUSH
81399: CALL_OW 428
81403: PUSH
81404: LD_VAR 0 1
81408: EQUAL
81409: IFFALSE 81436
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
81411: LD_ADDR_EXP 137
81415: PUSH
81416: LD_EXP 137
81420: PPUSH
81421: LD_VAR 0 1
81425: PPUSH
81426: LD_INT 0
81428: PPUSH
81429: CALL_OW 1
81433: ST_TO_ADDR
81434: GO 81487
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
81436: LD_ADDR_EXP 137
81440: PUSH
81441: LD_EXP 137
81445: PPUSH
81446: LD_VAR 0 1
81450: PPUSH
81451: LD_VAR 0 1
81455: PPUSH
81456: CALL_OW 255
81460: PUSH
81461: LD_VAR 0 1
81465: PUSH
81466: LD_VAR 0 2
81470: PUSH
81471: LD_VAR 0 3
81475: PUSH
81476: EMPTY
81477: LIST
81478: LIST
81479: LIST
81480: LIST
81481: PPUSH
81482: CALL_OW 1
81486: ST_TO_ADDR
// UpdateFactoryWaypoints ;
81487: CALL 81496 0 0
// end ;
81491: LD_VAR 0 4
81495: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
81496: LD_INT 0
81498: PPUSH
81499: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
81500: LD_STRING resetFactoryWaypoint();
81502: PPUSH
81503: CALL_OW 559
// if factoryWaypoints then
81507: LD_EXP 137
81511: IFFALSE 81634
// begin for i := 1 to factoryWaypoints do
81513: LD_ADDR_VAR 0 2
81517: PUSH
81518: DOUBLE
81519: LD_INT 1
81521: DEC
81522: ST_TO_ADDR
81523: LD_EXP 137
81527: PUSH
81528: FOR_TO
81529: IFFALSE 81632
// if factoryWaypoints [ i ] then
81531: LD_EXP 137
81535: PUSH
81536: LD_VAR 0 2
81540: ARRAY
81541: IFFALSE 81630
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
81543: LD_STRING setFactoryWaypointXY(
81545: PUSH
81546: LD_EXP 137
81550: PUSH
81551: LD_VAR 0 2
81555: ARRAY
81556: PUSH
81557: LD_INT 1
81559: ARRAY
81560: STR
81561: PUSH
81562: LD_STRING ,
81564: STR
81565: PUSH
81566: LD_EXP 137
81570: PUSH
81571: LD_VAR 0 2
81575: ARRAY
81576: PUSH
81577: LD_INT 2
81579: ARRAY
81580: STR
81581: PUSH
81582: LD_STRING ,
81584: STR
81585: PUSH
81586: LD_EXP 137
81590: PUSH
81591: LD_VAR 0 2
81595: ARRAY
81596: PUSH
81597: LD_INT 3
81599: ARRAY
81600: STR
81601: PUSH
81602: LD_STRING ,
81604: STR
81605: PUSH
81606: LD_EXP 137
81610: PUSH
81611: LD_VAR 0 2
81615: ARRAY
81616: PUSH
81617: LD_INT 4
81619: ARRAY
81620: STR
81621: PUSH
81622: LD_STRING )
81624: STR
81625: PPUSH
81626: CALL_OW 559
81630: GO 81528
81632: POP
81633: POP
// end ; end ;
81634: LD_VAR 0 1
81638: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
81639: LD_INT 0
81641: PPUSH
81642: PPUSH
81643: PPUSH
81644: PPUSH
81645: PPUSH
81646: PPUSH
81647: PPUSH
81648: PPUSH
81649: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
81650: LD_VAR 0 1
81654: NOT
81655: PUSH
81656: LD_VAR 0 2
81660: PPUSH
81661: LD_VAR 0 3
81665: PPUSH
81666: CALL_OW 488
81670: NOT
81671: OR
81672: PUSH
81673: LD_VAR 0 4
81677: NOT
81678: OR
81679: IFFALSE 81683
// exit ;
81681: GO 82023
// list := [ ] ;
81683: LD_ADDR_VAR 0 13
81687: PUSH
81688: EMPTY
81689: ST_TO_ADDR
// if x - r < 0 then
81690: LD_VAR 0 2
81694: PUSH
81695: LD_VAR 0 4
81699: MINUS
81700: PUSH
81701: LD_INT 0
81703: LESS
81704: IFFALSE 81716
// min_x := 0 else
81706: LD_ADDR_VAR 0 7
81710: PUSH
81711: LD_INT 0
81713: ST_TO_ADDR
81714: GO 81732
// min_x := x - r ;
81716: LD_ADDR_VAR 0 7
81720: PUSH
81721: LD_VAR 0 2
81725: PUSH
81726: LD_VAR 0 4
81730: MINUS
81731: ST_TO_ADDR
// if y - r < 0 then
81732: LD_VAR 0 3
81736: PUSH
81737: LD_VAR 0 4
81741: MINUS
81742: PUSH
81743: LD_INT 0
81745: LESS
81746: IFFALSE 81758
// min_y := 0 else
81748: LD_ADDR_VAR 0 8
81752: PUSH
81753: LD_INT 0
81755: ST_TO_ADDR
81756: GO 81774
// min_y := y - r ;
81758: LD_ADDR_VAR 0 8
81762: PUSH
81763: LD_VAR 0 3
81767: PUSH
81768: LD_VAR 0 4
81772: MINUS
81773: ST_TO_ADDR
// max_x := x + r ;
81774: LD_ADDR_VAR 0 9
81778: PUSH
81779: LD_VAR 0 2
81783: PUSH
81784: LD_VAR 0 4
81788: PLUS
81789: ST_TO_ADDR
// max_y := y + r ;
81790: LD_ADDR_VAR 0 10
81794: PUSH
81795: LD_VAR 0 3
81799: PUSH
81800: LD_VAR 0 4
81804: PLUS
81805: ST_TO_ADDR
// for _x = min_x to max_x do
81806: LD_ADDR_VAR 0 11
81810: PUSH
81811: DOUBLE
81812: LD_VAR 0 7
81816: DEC
81817: ST_TO_ADDR
81818: LD_VAR 0 9
81822: PUSH
81823: FOR_TO
81824: IFFALSE 81941
// for _y = min_y to max_y do
81826: LD_ADDR_VAR 0 12
81830: PUSH
81831: DOUBLE
81832: LD_VAR 0 8
81836: DEC
81837: ST_TO_ADDR
81838: LD_VAR 0 10
81842: PUSH
81843: FOR_TO
81844: IFFALSE 81937
// begin if not ValidHex ( _x , _y ) then
81846: LD_VAR 0 11
81850: PPUSH
81851: LD_VAR 0 12
81855: PPUSH
81856: CALL_OW 488
81860: NOT
81861: IFFALSE 81865
// continue ;
81863: GO 81843
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
81865: LD_VAR 0 11
81869: PPUSH
81870: LD_VAR 0 12
81874: PPUSH
81875: CALL_OW 351
81879: PUSH
81880: LD_VAR 0 11
81884: PPUSH
81885: LD_VAR 0 12
81889: PPUSH
81890: CALL_OW 554
81894: AND
81895: IFFALSE 81935
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
81897: LD_ADDR_VAR 0 13
81901: PUSH
81902: LD_VAR 0 13
81906: PPUSH
81907: LD_VAR 0 13
81911: PUSH
81912: LD_INT 1
81914: PLUS
81915: PPUSH
81916: LD_VAR 0 11
81920: PUSH
81921: LD_VAR 0 12
81925: PUSH
81926: EMPTY
81927: LIST
81928: LIST
81929: PPUSH
81930: CALL_OW 2
81934: ST_TO_ADDR
// end ;
81935: GO 81843
81937: POP
81938: POP
81939: GO 81823
81941: POP
81942: POP
// if not list then
81943: LD_VAR 0 13
81947: NOT
81948: IFFALSE 81952
// exit ;
81950: GO 82023
// for i in list do
81952: LD_ADDR_VAR 0 6
81956: PUSH
81957: LD_VAR 0 13
81961: PUSH
81962: FOR_IN
81963: IFFALSE 82021
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
81965: LD_VAR 0 1
81969: PPUSH
81970: LD_STRING M
81972: PUSH
81973: LD_VAR 0 6
81977: PUSH
81978: LD_INT 1
81980: ARRAY
81981: PUSH
81982: LD_VAR 0 6
81986: PUSH
81987: LD_INT 2
81989: ARRAY
81990: PUSH
81991: LD_INT 0
81993: PUSH
81994: LD_INT 0
81996: PUSH
81997: LD_INT 0
81999: PUSH
82000: LD_INT 0
82002: PUSH
82003: EMPTY
82004: LIST
82005: LIST
82006: LIST
82007: LIST
82008: LIST
82009: LIST
82010: LIST
82011: PUSH
82012: EMPTY
82013: LIST
82014: PPUSH
82015: CALL_OW 447
82019: GO 81962
82021: POP
82022: POP
// end ;
82023: LD_VAR 0 5
82027: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
82028: LD_EXP 138
82032: NOT
82033: IFFALSE 82083
82035: GO 82037
82037: DISABLE
// begin initHack := true ;
82038: LD_ADDR_EXP 138
82042: PUSH
82043: LD_INT 1
82045: ST_TO_ADDR
// hackTanks := [ ] ;
82046: LD_ADDR_EXP 139
82050: PUSH
82051: EMPTY
82052: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
82053: LD_ADDR_EXP 140
82057: PUSH
82058: EMPTY
82059: ST_TO_ADDR
// hackLimit := 3 ;
82060: LD_ADDR_EXP 141
82064: PUSH
82065: LD_INT 3
82067: ST_TO_ADDR
// hackDist := 12 ;
82068: LD_ADDR_EXP 142
82072: PUSH
82073: LD_INT 12
82075: ST_TO_ADDR
// hackCounter := [ ] ;
82076: LD_ADDR_EXP 143
82080: PUSH
82081: EMPTY
82082: ST_TO_ADDR
// end ;
82083: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
82084: LD_EXP 138
82088: PUSH
82089: LD_INT 34
82091: PUSH
82092: LD_EXP 61
82096: PUSH
82097: EMPTY
82098: LIST
82099: LIST
82100: PPUSH
82101: CALL_OW 69
82105: AND
82106: IFFALSE 82361
82108: GO 82110
82110: DISABLE
82111: LD_INT 0
82113: PPUSH
82114: PPUSH
// begin enable ;
82115: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
82116: LD_ADDR_VAR 0 1
82120: PUSH
82121: LD_INT 34
82123: PUSH
82124: LD_EXP 61
82128: PUSH
82129: EMPTY
82130: LIST
82131: LIST
82132: PPUSH
82133: CALL_OW 69
82137: PUSH
82138: FOR_IN
82139: IFFALSE 82359
// begin if not i in hackTanks then
82141: LD_VAR 0 1
82145: PUSH
82146: LD_EXP 139
82150: IN
82151: NOT
82152: IFFALSE 82235
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
82154: LD_ADDR_EXP 139
82158: PUSH
82159: LD_EXP 139
82163: PPUSH
82164: LD_EXP 139
82168: PUSH
82169: LD_INT 1
82171: PLUS
82172: PPUSH
82173: LD_VAR 0 1
82177: PPUSH
82178: CALL_OW 1
82182: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
82183: LD_ADDR_EXP 140
82187: PUSH
82188: LD_EXP 140
82192: PPUSH
82193: LD_EXP 140
82197: PUSH
82198: LD_INT 1
82200: PLUS
82201: PPUSH
82202: EMPTY
82203: PPUSH
82204: CALL_OW 1
82208: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
82209: LD_ADDR_EXP 143
82213: PUSH
82214: LD_EXP 143
82218: PPUSH
82219: LD_EXP 143
82223: PUSH
82224: LD_INT 1
82226: PLUS
82227: PPUSH
82228: EMPTY
82229: PPUSH
82230: CALL_OW 1
82234: ST_TO_ADDR
// end ; if not IsOk ( i ) then
82235: LD_VAR 0 1
82239: PPUSH
82240: CALL_OW 302
82244: NOT
82245: IFFALSE 82258
// begin HackUnlinkAll ( i ) ;
82247: LD_VAR 0 1
82251: PPUSH
82252: CALL 82364 0 1
// continue ;
82256: GO 82138
// end ; HackCheckCapturedStatus ( i ) ;
82258: LD_VAR 0 1
82262: PPUSH
82263: CALL 82807 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
82267: LD_ADDR_VAR 0 2
82271: PUSH
82272: LD_INT 81
82274: PUSH
82275: LD_VAR 0 1
82279: PPUSH
82280: CALL_OW 255
82284: PUSH
82285: EMPTY
82286: LIST
82287: LIST
82288: PUSH
82289: LD_INT 33
82291: PUSH
82292: LD_INT 3
82294: PUSH
82295: EMPTY
82296: LIST
82297: LIST
82298: PUSH
82299: LD_INT 91
82301: PUSH
82302: LD_VAR 0 1
82306: PUSH
82307: LD_EXP 142
82311: PUSH
82312: EMPTY
82313: LIST
82314: LIST
82315: LIST
82316: PUSH
82317: LD_INT 50
82319: PUSH
82320: EMPTY
82321: LIST
82322: PUSH
82323: EMPTY
82324: LIST
82325: LIST
82326: LIST
82327: LIST
82328: PPUSH
82329: CALL_OW 69
82333: ST_TO_ADDR
// if not tmp then
82334: LD_VAR 0 2
82338: NOT
82339: IFFALSE 82343
// continue ;
82341: GO 82138
// HackLink ( i , tmp ) ;
82343: LD_VAR 0 1
82347: PPUSH
82348: LD_VAR 0 2
82352: PPUSH
82353: CALL 82500 0 2
// end ;
82357: GO 82138
82359: POP
82360: POP
// end ;
82361: PPOPN 2
82363: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
82364: LD_INT 0
82366: PPUSH
82367: PPUSH
82368: PPUSH
// if not hack in hackTanks then
82369: LD_VAR 0 1
82373: PUSH
82374: LD_EXP 139
82378: IN
82379: NOT
82380: IFFALSE 82384
// exit ;
82382: GO 82495
// index := GetElementIndex ( hackTanks , hack ) ;
82384: LD_ADDR_VAR 0 4
82388: PUSH
82389: LD_EXP 139
82393: PPUSH
82394: LD_VAR 0 1
82398: PPUSH
82399: CALL 30221 0 2
82403: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
82404: LD_EXP 140
82408: PUSH
82409: LD_VAR 0 4
82413: ARRAY
82414: IFFALSE 82495
// begin for i in hackTanksCaptured [ index ] do
82416: LD_ADDR_VAR 0 3
82420: PUSH
82421: LD_EXP 140
82425: PUSH
82426: LD_VAR 0 4
82430: ARRAY
82431: PUSH
82432: FOR_IN
82433: IFFALSE 82459
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
82435: LD_VAR 0 3
82439: PUSH
82440: LD_INT 1
82442: ARRAY
82443: PPUSH
82444: LD_VAR 0 3
82448: PUSH
82449: LD_INT 2
82451: ARRAY
82452: PPUSH
82453: CALL_OW 235
82457: GO 82432
82459: POP
82460: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
82461: LD_ADDR_EXP 140
82465: PUSH
82466: LD_EXP 140
82470: PPUSH
82471: LD_VAR 0 4
82475: PPUSH
82476: EMPTY
82477: PPUSH
82478: CALL_OW 1
82482: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
82483: LD_VAR 0 1
82487: PPUSH
82488: LD_INT 0
82490: PPUSH
82491: CALL_OW 505
// end ; end ;
82495: LD_VAR 0 2
82499: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
82500: LD_INT 0
82502: PPUSH
82503: PPUSH
82504: PPUSH
// if not hack in hackTanks or not vehicles then
82505: LD_VAR 0 1
82509: PUSH
82510: LD_EXP 139
82514: IN
82515: NOT
82516: PUSH
82517: LD_VAR 0 2
82521: NOT
82522: OR
82523: IFFALSE 82527
// exit ;
82525: GO 82802
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
82527: LD_ADDR_VAR 0 2
82531: PUSH
82532: LD_VAR 0 1
82536: PPUSH
82537: LD_VAR 0 2
82541: PPUSH
82542: LD_INT 1
82544: PPUSH
82545: LD_INT 1
82547: PPUSH
82548: CALL 30871 0 4
82552: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
82553: LD_ADDR_VAR 0 5
82557: PUSH
82558: LD_EXP 139
82562: PPUSH
82563: LD_VAR 0 1
82567: PPUSH
82568: CALL 30221 0 2
82572: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
82573: LD_EXP 140
82577: PUSH
82578: LD_VAR 0 5
82582: ARRAY
82583: PUSH
82584: LD_EXP 141
82588: LESS
82589: IFFALSE 82778
// begin for i := 1 to vehicles do
82591: LD_ADDR_VAR 0 4
82595: PUSH
82596: DOUBLE
82597: LD_INT 1
82599: DEC
82600: ST_TO_ADDR
82601: LD_VAR 0 2
82605: PUSH
82606: FOR_TO
82607: IFFALSE 82776
// begin if hackTanksCaptured [ index ] = hackLimit then
82609: LD_EXP 140
82613: PUSH
82614: LD_VAR 0 5
82618: ARRAY
82619: PUSH
82620: LD_EXP 141
82624: EQUAL
82625: IFFALSE 82629
// break ;
82627: GO 82776
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
82629: LD_ADDR_EXP 143
82633: PUSH
82634: LD_EXP 143
82638: PPUSH
82639: LD_VAR 0 5
82643: PPUSH
82644: LD_EXP 143
82648: PUSH
82649: LD_VAR 0 5
82653: ARRAY
82654: PUSH
82655: LD_INT 1
82657: PLUS
82658: PPUSH
82659: CALL_OW 1
82663: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
82664: LD_ADDR_EXP 140
82668: PUSH
82669: LD_EXP 140
82673: PPUSH
82674: LD_VAR 0 5
82678: PUSH
82679: LD_EXP 140
82683: PUSH
82684: LD_VAR 0 5
82688: ARRAY
82689: PUSH
82690: LD_INT 1
82692: PLUS
82693: PUSH
82694: EMPTY
82695: LIST
82696: LIST
82697: PPUSH
82698: LD_VAR 0 2
82702: PUSH
82703: LD_VAR 0 4
82707: ARRAY
82708: PUSH
82709: LD_VAR 0 2
82713: PUSH
82714: LD_VAR 0 4
82718: ARRAY
82719: PPUSH
82720: CALL_OW 255
82724: PUSH
82725: EMPTY
82726: LIST
82727: LIST
82728: PPUSH
82729: CALL 30436 0 3
82733: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
82734: LD_VAR 0 2
82738: PUSH
82739: LD_VAR 0 4
82743: ARRAY
82744: PPUSH
82745: LD_VAR 0 1
82749: PPUSH
82750: CALL_OW 255
82754: PPUSH
82755: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
82759: LD_VAR 0 2
82763: PUSH
82764: LD_VAR 0 4
82768: ARRAY
82769: PPUSH
82770: CALL_OW 141
// end ;
82774: GO 82606
82776: POP
82777: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
82778: LD_VAR 0 1
82782: PPUSH
82783: LD_EXP 140
82787: PUSH
82788: LD_VAR 0 5
82792: ARRAY
82793: PUSH
82794: LD_INT 0
82796: PLUS
82797: PPUSH
82798: CALL_OW 505
// end ;
82802: LD_VAR 0 3
82806: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
82807: LD_INT 0
82809: PPUSH
82810: PPUSH
82811: PPUSH
82812: PPUSH
// if not hack in hackTanks then
82813: LD_VAR 0 1
82817: PUSH
82818: LD_EXP 139
82822: IN
82823: NOT
82824: IFFALSE 82828
// exit ;
82826: GO 83068
// index := GetElementIndex ( hackTanks , hack ) ;
82828: LD_ADDR_VAR 0 4
82832: PUSH
82833: LD_EXP 139
82837: PPUSH
82838: LD_VAR 0 1
82842: PPUSH
82843: CALL 30221 0 2
82847: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
82848: LD_ADDR_VAR 0 3
82852: PUSH
82853: DOUBLE
82854: LD_EXP 140
82858: PUSH
82859: LD_VAR 0 4
82863: ARRAY
82864: INC
82865: ST_TO_ADDR
82866: LD_INT 1
82868: PUSH
82869: FOR_DOWNTO
82870: IFFALSE 83042
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
82872: LD_ADDR_VAR 0 5
82876: PUSH
82877: LD_EXP 140
82881: PUSH
82882: LD_VAR 0 4
82886: ARRAY
82887: PUSH
82888: LD_VAR 0 3
82892: ARRAY
82893: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
82894: LD_VAR 0 5
82898: PUSH
82899: LD_INT 1
82901: ARRAY
82902: PPUSH
82903: CALL_OW 302
82907: NOT
82908: PUSH
82909: LD_VAR 0 5
82913: PUSH
82914: LD_INT 1
82916: ARRAY
82917: PPUSH
82918: CALL_OW 255
82922: PUSH
82923: LD_VAR 0 1
82927: PPUSH
82928: CALL_OW 255
82932: NONEQUAL
82933: OR
82934: IFFALSE 83040
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
82936: LD_VAR 0 5
82940: PUSH
82941: LD_INT 1
82943: ARRAY
82944: PPUSH
82945: CALL_OW 305
82949: PUSH
82950: LD_VAR 0 5
82954: PUSH
82955: LD_INT 1
82957: ARRAY
82958: PPUSH
82959: CALL_OW 255
82963: PUSH
82964: LD_VAR 0 1
82968: PPUSH
82969: CALL_OW 255
82973: EQUAL
82974: AND
82975: IFFALSE 82999
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
82977: LD_VAR 0 5
82981: PUSH
82982: LD_INT 1
82984: ARRAY
82985: PPUSH
82986: LD_VAR 0 5
82990: PUSH
82991: LD_INT 2
82993: ARRAY
82994: PPUSH
82995: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
82999: LD_ADDR_EXP 140
83003: PUSH
83004: LD_EXP 140
83008: PPUSH
83009: LD_VAR 0 4
83013: PPUSH
83014: LD_EXP 140
83018: PUSH
83019: LD_VAR 0 4
83023: ARRAY
83024: PPUSH
83025: LD_VAR 0 3
83029: PPUSH
83030: CALL_OW 3
83034: PPUSH
83035: CALL_OW 1
83039: ST_TO_ADDR
// end ; end ;
83040: GO 82869
83042: POP
83043: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
83044: LD_VAR 0 1
83048: PPUSH
83049: LD_EXP 140
83053: PUSH
83054: LD_VAR 0 4
83058: ARRAY
83059: PUSH
83060: LD_INT 0
83062: PLUS
83063: PPUSH
83064: CALL_OW 505
// end ;
83068: LD_VAR 0 2
83072: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
83073: LD_INT 0
83075: PPUSH
83076: PPUSH
83077: PPUSH
83078: PPUSH
// if not hack in hackTanks then
83079: LD_VAR 0 1
83083: PUSH
83084: LD_EXP 139
83088: IN
83089: NOT
83090: IFFALSE 83094
// exit ;
83092: GO 83179
// index := GetElementIndex ( hackTanks , hack ) ;
83094: LD_ADDR_VAR 0 5
83098: PUSH
83099: LD_EXP 139
83103: PPUSH
83104: LD_VAR 0 1
83108: PPUSH
83109: CALL 30221 0 2
83113: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
83114: LD_ADDR_VAR 0 4
83118: PUSH
83119: DOUBLE
83120: LD_INT 1
83122: DEC
83123: ST_TO_ADDR
83124: LD_EXP 140
83128: PUSH
83129: LD_VAR 0 5
83133: ARRAY
83134: PUSH
83135: FOR_TO
83136: IFFALSE 83177
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
83138: LD_EXP 140
83142: PUSH
83143: LD_VAR 0 5
83147: ARRAY
83148: PUSH
83149: LD_VAR 0 4
83153: ARRAY
83154: PUSH
83155: LD_INT 1
83157: ARRAY
83158: PUSH
83159: LD_VAR 0 2
83163: EQUAL
83164: IFFALSE 83175
// KillUnit ( vehicle ) ;
83166: LD_VAR 0 2
83170: PPUSH
83171: CALL_OW 66
83175: GO 83135
83177: POP
83178: POP
// end ;
83179: LD_VAR 0 3
83183: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
83184: LD_EXP 144
83188: NOT
83189: IFFALSE 83224
83191: GO 83193
83193: DISABLE
// begin initMiner := true ;
83194: LD_ADDR_EXP 144
83198: PUSH
83199: LD_INT 1
83201: ST_TO_ADDR
// minersList := [ ] ;
83202: LD_ADDR_EXP 145
83206: PUSH
83207: EMPTY
83208: ST_TO_ADDR
// minerMinesList := [ ] ;
83209: LD_ADDR_EXP 146
83213: PUSH
83214: EMPTY
83215: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
83216: LD_ADDR_EXP 147
83220: PUSH
83221: LD_INT 5
83223: ST_TO_ADDR
// end ;
83224: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
83225: LD_EXP 144
83229: PUSH
83230: LD_INT 34
83232: PUSH
83233: LD_EXP 66
83237: PUSH
83238: EMPTY
83239: LIST
83240: LIST
83241: PPUSH
83242: CALL_OW 69
83246: AND
83247: IFFALSE 83710
83249: GO 83251
83251: DISABLE
83252: LD_INT 0
83254: PPUSH
83255: PPUSH
83256: PPUSH
83257: PPUSH
// begin enable ;
83258: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
83259: LD_ADDR_VAR 0 1
83263: PUSH
83264: LD_INT 34
83266: PUSH
83267: LD_EXP 66
83271: PUSH
83272: EMPTY
83273: LIST
83274: LIST
83275: PPUSH
83276: CALL_OW 69
83280: PUSH
83281: FOR_IN
83282: IFFALSE 83354
// begin if not i in minersList then
83284: LD_VAR 0 1
83288: PUSH
83289: LD_EXP 145
83293: IN
83294: NOT
83295: IFFALSE 83352
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
83297: LD_ADDR_EXP 145
83301: PUSH
83302: LD_EXP 145
83306: PPUSH
83307: LD_EXP 145
83311: PUSH
83312: LD_INT 1
83314: PLUS
83315: PPUSH
83316: LD_VAR 0 1
83320: PPUSH
83321: CALL_OW 1
83325: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
83326: LD_ADDR_EXP 146
83330: PUSH
83331: LD_EXP 146
83335: PPUSH
83336: LD_EXP 146
83340: PUSH
83341: LD_INT 1
83343: PLUS
83344: PPUSH
83345: EMPTY
83346: PPUSH
83347: CALL_OW 1
83351: ST_TO_ADDR
// end end ;
83352: GO 83281
83354: POP
83355: POP
// for i := minerMinesList downto 1 do
83356: LD_ADDR_VAR 0 1
83360: PUSH
83361: DOUBLE
83362: LD_EXP 146
83366: INC
83367: ST_TO_ADDR
83368: LD_INT 1
83370: PUSH
83371: FOR_DOWNTO
83372: IFFALSE 83708
// begin if IsLive ( minersList [ i ] ) then
83374: LD_EXP 145
83378: PUSH
83379: LD_VAR 0 1
83383: ARRAY
83384: PPUSH
83385: CALL_OW 300
83389: IFFALSE 83417
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
83391: LD_EXP 145
83395: PUSH
83396: LD_VAR 0 1
83400: ARRAY
83401: PPUSH
83402: LD_EXP 146
83406: PUSH
83407: LD_VAR 0 1
83411: ARRAY
83412: PPUSH
83413: CALL_OW 505
// if not minerMinesList [ i ] then
83417: LD_EXP 146
83421: PUSH
83422: LD_VAR 0 1
83426: ARRAY
83427: NOT
83428: IFFALSE 83432
// continue ;
83430: GO 83371
// for j := minerMinesList [ i ] downto 1 do
83432: LD_ADDR_VAR 0 2
83436: PUSH
83437: DOUBLE
83438: LD_EXP 146
83442: PUSH
83443: LD_VAR 0 1
83447: ARRAY
83448: INC
83449: ST_TO_ADDR
83450: LD_INT 1
83452: PUSH
83453: FOR_DOWNTO
83454: IFFALSE 83704
// begin side := GetSide ( minersList [ i ] ) ;
83456: LD_ADDR_VAR 0 3
83460: PUSH
83461: LD_EXP 145
83465: PUSH
83466: LD_VAR 0 1
83470: ARRAY
83471: PPUSH
83472: CALL_OW 255
83476: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
83477: LD_ADDR_VAR 0 4
83481: PUSH
83482: LD_EXP 146
83486: PUSH
83487: LD_VAR 0 1
83491: ARRAY
83492: PUSH
83493: LD_VAR 0 2
83497: ARRAY
83498: PUSH
83499: LD_INT 1
83501: ARRAY
83502: PPUSH
83503: LD_EXP 146
83507: PUSH
83508: LD_VAR 0 1
83512: ARRAY
83513: PUSH
83514: LD_VAR 0 2
83518: ARRAY
83519: PUSH
83520: LD_INT 2
83522: ARRAY
83523: PPUSH
83524: CALL_OW 428
83528: ST_TO_ADDR
// if not tmp then
83529: LD_VAR 0 4
83533: NOT
83534: IFFALSE 83538
// continue ;
83536: GO 83453
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
83538: LD_VAR 0 4
83542: PUSH
83543: LD_INT 81
83545: PUSH
83546: LD_VAR 0 3
83550: PUSH
83551: EMPTY
83552: LIST
83553: LIST
83554: PPUSH
83555: CALL_OW 69
83559: IN
83560: PUSH
83561: LD_EXP 146
83565: PUSH
83566: LD_VAR 0 1
83570: ARRAY
83571: PUSH
83572: LD_VAR 0 2
83576: ARRAY
83577: PUSH
83578: LD_INT 1
83580: ARRAY
83581: PPUSH
83582: LD_EXP 146
83586: PUSH
83587: LD_VAR 0 1
83591: ARRAY
83592: PUSH
83593: LD_VAR 0 2
83597: ARRAY
83598: PUSH
83599: LD_INT 2
83601: ARRAY
83602: PPUSH
83603: CALL_OW 458
83607: AND
83608: IFFALSE 83702
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
83610: LD_EXP 146
83614: PUSH
83615: LD_VAR 0 1
83619: ARRAY
83620: PUSH
83621: LD_VAR 0 2
83625: ARRAY
83626: PUSH
83627: LD_INT 1
83629: ARRAY
83630: PPUSH
83631: LD_EXP 146
83635: PUSH
83636: LD_VAR 0 1
83640: ARRAY
83641: PUSH
83642: LD_VAR 0 2
83646: ARRAY
83647: PUSH
83648: LD_INT 2
83650: ARRAY
83651: PPUSH
83652: LD_VAR 0 3
83656: PPUSH
83657: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
83661: LD_ADDR_EXP 146
83665: PUSH
83666: LD_EXP 146
83670: PPUSH
83671: LD_VAR 0 1
83675: PPUSH
83676: LD_EXP 146
83680: PUSH
83681: LD_VAR 0 1
83685: ARRAY
83686: PPUSH
83687: LD_VAR 0 2
83691: PPUSH
83692: CALL_OW 3
83696: PPUSH
83697: CALL_OW 1
83701: ST_TO_ADDR
// end ; end ;
83702: GO 83453
83704: POP
83705: POP
// end ;
83706: GO 83371
83708: POP
83709: POP
// end ;
83710: PPOPN 4
83712: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
83713: LD_INT 0
83715: PPUSH
83716: PPUSH
// result := false ;
83717: LD_ADDR_VAR 0 4
83721: PUSH
83722: LD_INT 0
83724: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
83725: LD_VAR 0 1
83729: PPUSH
83730: CALL_OW 264
83734: PUSH
83735: LD_EXP 66
83739: EQUAL
83740: NOT
83741: IFFALSE 83745
// exit ;
83743: GO 83985
// index := GetElementIndex ( minersList , unit ) ;
83745: LD_ADDR_VAR 0 5
83749: PUSH
83750: LD_EXP 145
83754: PPUSH
83755: LD_VAR 0 1
83759: PPUSH
83760: CALL 30221 0 2
83764: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
83765: LD_EXP 146
83769: PUSH
83770: LD_VAR 0 5
83774: ARRAY
83775: PUSH
83776: LD_EXP 147
83780: GREATEREQUAL
83781: IFFALSE 83785
// exit ;
83783: GO 83985
// ComMoveXY ( unit , x , y ) ;
83785: LD_VAR 0 1
83789: PPUSH
83790: LD_VAR 0 2
83794: PPUSH
83795: LD_VAR 0 3
83799: PPUSH
83800: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
83804: LD_INT 35
83806: PPUSH
83807: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
83811: LD_VAR 0 1
83815: PPUSH
83816: LD_VAR 0 2
83820: PPUSH
83821: LD_VAR 0 3
83825: PPUSH
83826: CALL 60940 0 3
83830: NOT
83831: PUSH
83832: LD_VAR 0 1
83836: PPUSH
83837: CALL_OW 314
83841: AND
83842: IFFALSE 83846
// exit ;
83844: GO 83985
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
83846: LD_VAR 0 2
83850: PPUSH
83851: LD_VAR 0 3
83855: PPUSH
83856: CALL_OW 428
83860: PUSH
83861: LD_VAR 0 1
83865: EQUAL
83866: PUSH
83867: LD_VAR 0 1
83871: PPUSH
83872: CALL_OW 314
83876: NOT
83877: AND
83878: IFFALSE 83804
// PlaySoundXY ( x , y , PlantMine ) ;
83880: LD_VAR 0 2
83884: PPUSH
83885: LD_VAR 0 3
83889: PPUSH
83890: LD_STRING PlantMine
83892: PPUSH
83893: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
83897: LD_VAR 0 2
83901: PPUSH
83902: LD_VAR 0 3
83906: PPUSH
83907: LD_VAR 0 1
83911: PPUSH
83912: CALL_OW 255
83916: PPUSH
83917: LD_INT 0
83919: PPUSH
83920: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
83924: LD_ADDR_EXP 146
83928: PUSH
83929: LD_EXP 146
83933: PPUSH
83934: LD_VAR 0 5
83938: PUSH
83939: LD_EXP 146
83943: PUSH
83944: LD_VAR 0 5
83948: ARRAY
83949: PUSH
83950: LD_INT 1
83952: PLUS
83953: PUSH
83954: EMPTY
83955: LIST
83956: LIST
83957: PPUSH
83958: LD_VAR 0 2
83962: PUSH
83963: LD_VAR 0 3
83967: PUSH
83968: EMPTY
83969: LIST
83970: LIST
83971: PPUSH
83972: CALL 30436 0 3
83976: ST_TO_ADDR
// result := true ;
83977: LD_ADDR_VAR 0 4
83981: PUSH
83982: LD_INT 1
83984: ST_TO_ADDR
// end ;
83985: LD_VAR 0 4
83989: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
83990: LD_INT 0
83992: PPUSH
83993: PPUSH
83994: PPUSH
// if not unit in minersList then
83995: LD_VAR 0 1
83999: PUSH
84000: LD_EXP 145
84004: IN
84005: NOT
84006: IFFALSE 84010
// exit ;
84008: GO 84402
// index := GetElementIndex ( minersList , unit ) ;
84010: LD_ADDR_VAR 0 6
84014: PUSH
84015: LD_EXP 145
84019: PPUSH
84020: LD_VAR 0 1
84024: PPUSH
84025: CALL 30221 0 2
84029: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
84030: LD_ADDR_VAR 0 5
84034: PUSH
84035: DOUBLE
84036: LD_EXP 146
84040: PUSH
84041: LD_VAR 0 6
84045: ARRAY
84046: INC
84047: ST_TO_ADDR
84048: LD_INT 1
84050: PUSH
84051: FOR_DOWNTO
84052: IFFALSE 84213
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
84054: LD_EXP 146
84058: PUSH
84059: LD_VAR 0 6
84063: ARRAY
84064: PUSH
84065: LD_VAR 0 5
84069: ARRAY
84070: PUSH
84071: LD_INT 1
84073: ARRAY
84074: PUSH
84075: LD_VAR 0 2
84079: EQUAL
84080: PUSH
84081: LD_EXP 146
84085: PUSH
84086: LD_VAR 0 6
84090: ARRAY
84091: PUSH
84092: LD_VAR 0 5
84096: ARRAY
84097: PUSH
84098: LD_INT 2
84100: ARRAY
84101: PUSH
84102: LD_VAR 0 3
84106: EQUAL
84107: AND
84108: IFFALSE 84211
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
84110: LD_EXP 146
84114: PUSH
84115: LD_VAR 0 6
84119: ARRAY
84120: PUSH
84121: LD_VAR 0 5
84125: ARRAY
84126: PUSH
84127: LD_INT 1
84129: ARRAY
84130: PPUSH
84131: LD_EXP 146
84135: PUSH
84136: LD_VAR 0 6
84140: ARRAY
84141: PUSH
84142: LD_VAR 0 5
84146: ARRAY
84147: PUSH
84148: LD_INT 2
84150: ARRAY
84151: PPUSH
84152: LD_VAR 0 1
84156: PPUSH
84157: CALL_OW 255
84161: PPUSH
84162: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
84166: LD_ADDR_EXP 146
84170: PUSH
84171: LD_EXP 146
84175: PPUSH
84176: LD_VAR 0 6
84180: PPUSH
84181: LD_EXP 146
84185: PUSH
84186: LD_VAR 0 6
84190: ARRAY
84191: PPUSH
84192: LD_VAR 0 5
84196: PPUSH
84197: CALL_OW 3
84201: PPUSH
84202: CALL_OW 1
84206: ST_TO_ADDR
// exit ;
84207: POP
84208: POP
84209: GO 84402
// end ; end ;
84211: GO 84051
84213: POP
84214: POP
// for i := minerMinesList [ index ] downto 1 do
84215: LD_ADDR_VAR 0 5
84219: PUSH
84220: DOUBLE
84221: LD_EXP 146
84225: PUSH
84226: LD_VAR 0 6
84230: ARRAY
84231: INC
84232: ST_TO_ADDR
84233: LD_INT 1
84235: PUSH
84236: FOR_DOWNTO
84237: IFFALSE 84400
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
84239: LD_EXP 146
84243: PUSH
84244: LD_VAR 0 6
84248: ARRAY
84249: PUSH
84250: LD_VAR 0 5
84254: ARRAY
84255: PUSH
84256: LD_INT 1
84258: ARRAY
84259: PPUSH
84260: LD_EXP 146
84264: PUSH
84265: LD_VAR 0 6
84269: ARRAY
84270: PUSH
84271: LD_VAR 0 5
84275: ARRAY
84276: PUSH
84277: LD_INT 2
84279: ARRAY
84280: PPUSH
84281: LD_VAR 0 2
84285: PPUSH
84286: LD_VAR 0 3
84290: PPUSH
84291: CALL_OW 298
84295: PUSH
84296: LD_INT 6
84298: LESS
84299: IFFALSE 84398
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
84301: LD_EXP 146
84305: PUSH
84306: LD_VAR 0 6
84310: ARRAY
84311: PUSH
84312: LD_VAR 0 5
84316: ARRAY
84317: PUSH
84318: LD_INT 1
84320: ARRAY
84321: PPUSH
84322: LD_EXP 146
84326: PUSH
84327: LD_VAR 0 6
84331: ARRAY
84332: PUSH
84333: LD_VAR 0 5
84337: ARRAY
84338: PUSH
84339: LD_INT 2
84341: ARRAY
84342: PPUSH
84343: LD_VAR 0 1
84347: PPUSH
84348: CALL_OW 255
84352: PPUSH
84353: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
84357: LD_ADDR_EXP 146
84361: PUSH
84362: LD_EXP 146
84366: PPUSH
84367: LD_VAR 0 6
84371: PPUSH
84372: LD_EXP 146
84376: PUSH
84377: LD_VAR 0 6
84381: ARRAY
84382: PPUSH
84383: LD_VAR 0 5
84387: PPUSH
84388: CALL_OW 3
84392: PPUSH
84393: CALL_OW 1
84397: ST_TO_ADDR
// end ; end ;
84398: GO 84236
84400: POP
84401: POP
// end ;
84402: LD_VAR 0 4
84406: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
84407: LD_INT 0
84409: PPUSH
84410: PPUSH
84411: PPUSH
84412: PPUSH
84413: PPUSH
84414: PPUSH
84415: PPUSH
84416: PPUSH
84417: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
84418: LD_VAR 0 1
84422: PPUSH
84423: CALL_OW 264
84427: PUSH
84428: LD_EXP 66
84432: EQUAL
84433: NOT
84434: PUSH
84435: LD_VAR 0 1
84439: PUSH
84440: LD_EXP 145
84444: IN
84445: NOT
84446: OR
84447: IFFALSE 84451
// exit ;
84449: GO 84773
// index := GetElementIndex ( minersList , unit ) ;
84451: LD_ADDR_VAR 0 6
84455: PUSH
84456: LD_EXP 145
84460: PPUSH
84461: LD_VAR 0 1
84465: PPUSH
84466: CALL 30221 0 2
84470: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
84471: LD_ADDR_VAR 0 8
84475: PUSH
84476: LD_EXP 147
84480: PUSH
84481: LD_EXP 146
84485: PUSH
84486: LD_VAR 0 6
84490: ARRAY
84491: MINUS
84492: ST_TO_ADDR
// if not minesFreeAmount then
84493: LD_VAR 0 8
84497: NOT
84498: IFFALSE 84502
// exit ;
84500: GO 84773
// tmp := [ ] ;
84502: LD_ADDR_VAR 0 7
84506: PUSH
84507: EMPTY
84508: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
84509: LD_ADDR_VAR 0 5
84513: PUSH
84514: DOUBLE
84515: LD_INT 1
84517: DEC
84518: ST_TO_ADDR
84519: LD_VAR 0 8
84523: PUSH
84524: FOR_TO
84525: IFFALSE 84720
// begin _d := rand ( 0 , 5 ) ;
84527: LD_ADDR_VAR 0 11
84531: PUSH
84532: LD_INT 0
84534: PPUSH
84535: LD_INT 5
84537: PPUSH
84538: CALL_OW 12
84542: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
84543: LD_ADDR_VAR 0 12
84547: PUSH
84548: LD_INT 2
84550: PPUSH
84551: LD_INT 6
84553: PPUSH
84554: CALL_OW 12
84558: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
84559: LD_ADDR_VAR 0 9
84563: PUSH
84564: LD_VAR 0 2
84568: PPUSH
84569: LD_VAR 0 11
84573: PPUSH
84574: LD_VAR 0 12
84578: PPUSH
84579: CALL_OW 272
84583: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
84584: LD_ADDR_VAR 0 10
84588: PUSH
84589: LD_VAR 0 3
84593: PPUSH
84594: LD_VAR 0 11
84598: PPUSH
84599: LD_VAR 0 12
84603: PPUSH
84604: CALL_OW 273
84608: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
84609: LD_VAR 0 9
84613: PPUSH
84614: LD_VAR 0 10
84618: PPUSH
84619: CALL_OW 488
84623: PUSH
84624: LD_VAR 0 9
84628: PUSH
84629: LD_VAR 0 10
84633: PUSH
84634: EMPTY
84635: LIST
84636: LIST
84637: PUSH
84638: LD_VAR 0 7
84642: IN
84643: NOT
84644: AND
84645: PUSH
84646: LD_VAR 0 9
84650: PPUSH
84651: LD_VAR 0 10
84655: PPUSH
84656: CALL_OW 458
84660: NOT
84661: AND
84662: IFFALSE 84704
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
84664: LD_ADDR_VAR 0 7
84668: PUSH
84669: LD_VAR 0 7
84673: PPUSH
84674: LD_VAR 0 7
84678: PUSH
84679: LD_INT 1
84681: PLUS
84682: PPUSH
84683: LD_VAR 0 9
84687: PUSH
84688: LD_VAR 0 10
84692: PUSH
84693: EMPTY
84694: LIST
84695: LIST
84696: PPUSH
84697: CALL_OW 1
84701: ST_TO_ADDR
84702: GO 84718
// i := i - 1 ;
84704: LD_ADDR_VAR 0 5
84708: PUSH
84709: LD_VAR 0 5
84713: PUSH
84714: LD_INT 1
84716: MINUS
84717: ST_TO_ADDR
// end ;
84718: GO 84524
84720: POP
84721: POP
// for i in tmp do
84722: LD_ADDR_VAR 0 5
84726: PUSH
84727: LD_VAR 0 7
84731: PUSH
84732: FOR_IN
84733: IFFALSE 84771
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
84735: LD_VAR 0 1
84739: PPUSH
84740: LD_VAR 0 5
84744: PUSH
84745: LD_INT 1
84747: ARRAY
84748: PPUSH
84749: LD_VAR 0 5
84753: PUSH
84754: LD_INT 2
84756: ARRAY
84757: PPUSH
84758: CALL 83713 0 3
84762: NOT
84763: IFFALSE 84769
// exit ;
84765: POP
84766: POP
84767: GO 84773
84769: GO 84732
84771: POP
84772: POP
// end ;
84773: LD_VAR 0 4
84777: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
84778: LD_INT 0
84780: PPUSH
84781: PPUSH
84782: PPUSH
84783: PPUSH
84784: PPUSH
84785: PPUSH
84786: PPUSH
// if not GetClass ( unit ) = class_sniper then
84787: LD_VAR 0 1
84791: PPUSH
84792: CALL_OW 257
84796: PUSH
84797: LD_INT 5
84799: EQUAL
84800: NOT
84801: IFFALSE 84805
// exit ;
84803: GO 85193
// dist := 8 ;
84805: LD_ADDR_VAR 0 5
84809: PUSH
84810: LD_INT 8
84812: ST_TO_ADDR
// viewRange := 12 ;
84813: LD_ADDR_VAR 0 7
84817: PUSH
84818: LD_INT 12
84820: ST_TO_ADDR
// side := GetSide ( unit ) ;
84821: LD_ADDR_VAR 0 6
84825: PUSH
84826: LD_VAR 0 1
84830: PPUSH
84831: CALL_OW 255
84835: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
84836: LD_INT 61
84838: PPUSH
84839: LD_VAR 0 6
84843: PPUSH
84844: CALL_OW 321
84848: PUSH
84849: LD_INT 2
84851: EQUAL
84852: IFFALSE 84862
// viewRange := 16 ;
84854: LD_ADDR_VAR 0 7
84858: PUSH
84859: LD_INT 16
84861: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
84862: LD_VAR 0 1
84866: PPUSH
84867: LD_VAR 0 2
84871: PPUSH
84872: LD_VAR 0 3
84876: PPUSH
84877: CALL_OW 297
84881: PUSH
84882: LD_VAR 0 5
84886: GREATER
84887: IFFALSE 84966
// begin ComMoveXY ( unit , x , y ) ;
84889: LD_VAR 0 1
84893: PPUSH
84894: LD_VAR 0 2
84898: PPUSH
84899: LD_VAR 0 3
84903: PPUSH
84904: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
84908: LD_INT 35
84910: PPUSH
84911: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
84915: LD_VAR 0 1
84919: PPUSH
84920: LD_VAR 0 2
84924: PPUSH
84925: LD_VAR 0 3
84929: PPUSH
84930: CALL 60940 0 3
84934: NOT
84935: IFFALSE 84939
// exit ;
84937: GO 85193
// until GetDistUnitXY ( unit , x , y ) < dist ;
84939: LD_VAR 0 1
84943: PPUSH
84944: LD_VAR 0 2
84948: PPUSH
84949: LD_VAR 0 3
84953: PPUSH
84954: CALL_OW 297
84958: PUSH
84959: LD_VAR 0 5
84963: LESS
84964: IFFALSE 84908
// end ; ComTurnXY ( unit , x , y ) ;
84966: LD_VAR 0 1
84970: PPUSH
84971: LD_VAR 0 2
84975: PPUSH
84976: LD_VAR 0 3
84980: PPUSH
84981: CALL_OW 118
// wait ( 5 ) ;
84985: LD_INT 5
84987: PPUSH
84988: CALL_OW 67
// _d := GetDir ( unit ) ;
84992: LD_ADDR_VAR 0 10
84996: PUSH
84997: LD_VAR 0 1
85001: PPUSH
85002: CALL_OW 254
85006: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
85007: LD_ADDR_VAR 0 8
85011: PUSH
85012: LD_VAR 0 1
85016: PPUSH
85017: CALL_OW 250
85021: PPUSH
85022: LD_VAR 0 10
85026: PPUSH
85027: LD_VAR 0 5
85031: PPUSH
85032: CALL_OW 272
85036: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
85037: LD_ADDR_VAR 0 9
85041: PUSH
85042: LD_VAR 0 1
85046: PPUSH
85047: CALL_OW 251
85051: PPUSH
85052: LD_VAR 0 10
85056: PPUSH
85057: LD_VAR 0 5
85061: PPUSH
85062: CALL_OW 273
85066: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
85067: LD_VAR 0 8
85071: PPUSH
85072: LD_VAR 0 9
85076: PPUSH
85077: CALL_OW 488
85081: NOT
85082: IFFALSE 85086
// exit ;
85084: GO 85193
// ComAnimCustom ( unit , 1 ) ;
85086: LD_VAR 0 1
85090: PPUSH
85091: LD_INT 1
85093: PPUSH
85094: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
85098: LD_VAR 0 8
85102: PPUSH
85103: LD_VAR 0 9
85107: PPUSH
85108: LD_VAR 0 6
85112: PPUSH
85113: LD_VAR 0 7
85117: PPUSH
85118: CALL_OW 330
// repeat wait ( 1 ) ;
85122: LD_INT 1
85124: PPUSH
85125: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
85129: LD_VAR 0 1
85133: PPUSH
85134: CALL_OW 316
85138: PUSH
85139: LD_VAR 0 1
85143: PPUSH
85144: CALL_OW 314
85148: OR
85149: PUSH
85150: LD_VAR 0 1
85154: PPUSH
85155: CALL_OW 302
85159: NOT
85160: OR
85161: PUSH
85162: LD_VAR 0 1
85166: PPUSH
85167: CALL_OW 301
85171: OR
85172: IFFALSE 85122
// RemoveSeeing ( _x , _y , side ) ;
85174: LD_VAR 0 8
85178: PPUSH
85179: LD_VAR 0 9
85183: PPUSH
85184: LD_VAR 0 6
85188: PPUSH
85189: CALL_OW 331
// end ; end_of_file
85193: LD_VAR 0 4
85197: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
85198: LD_VAR 0 1
85202: PPUSH
85203: LD_VAR 0 2
85207: PPUSH
85208: LD_VAR 0 3
85212: PPUSH
85213: LD_VAR 0 4
85217: PPUSH
85218: LD_VAR 0 5
85222: PPUSH
85223: LD_VAR 0 6
85227: PPUSH
85228: CALL 66108 0 6
// end ;
85232: PPOPN 6
85234: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
85235: LD_INT 0
85237: PPUSH
// begin if not units then
85238: LD_VAR 0 1
85242: NOT
85243: IFFALSE 85247
// exit ;
85245: GO 85247
// end ;
85247: PPOPN 7
85249: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
85250: CALL 66083 0 0
// end ;
85254: PPOPN 1
85256: END
