// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 58 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 22
// Difficulty := 4 ;
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 4
  21: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  22: LD_INT 1
  24: PPUSH
  25: LD_INT 3
  27: PPUSH
  28: CALL 9927 0 2
// PrepareArabian ;
  32: CALL 408 0 0
// PrepareRussian ;
  36: CALL 10718 0 0
// Action ;
  40: CALL 18909 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 57
// FogOff ( 2 ) ;
  50: LD_INT 2
  52: PPUSH
  53: CALL_OW 344
// end ;
  57: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack , canRolfJoin , buildingsFromPrev , gameActive , rolfAttack ; function Init ; begin
  58: LD_INT 0
  60: PPUSH
// debug := false ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// prefix := 05_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 05_
  76: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_STRING 04_2_GaidarKilled
  84: PPUSH
  85: LD_INT 1
  87: PPUSH
  88: CALL_OW 30
  92: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  93: LD_ADDR_EXP 8
  97: PUSH
  98: LD_STRING 05_ConvoySavedCounter
 100: PPUSH
 101: LD_INT 0
 103: PPUSH
 104: CALL_OW 30
 108: ST_TO_ADDR
// buildingsFromPrev := LoadVariable ( 05_Buildings , [ ] ) ;
 109: LD_ADDR_EXP 30
 113: PUSH
 114: LD_STRING 05_Buildings
 116: PPUSH
 117: EMPTY
 118: PPUSH
 119: CALL_OW 30
 123: ST_TO_ADDR
// bergkampfArrived := false ;
 124: LD_ADDR_EXP 3
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// omarArrived := false ;
 132: LD_ADDR_EXP 6
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// outpostDestroyed := false ;
 140: LD_ADDR_EXP 4
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// ruLoseCounter := 0 ;
 148: LD_ADDR_EXP 5
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// rolfScriptBase := false ;
 156: LD_ADDR_EXP 9
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// omarScriptBase := false ;
 164: LD_ADDR_EXP 10
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// linkedWithRolf := 0 ;
 172: LD_ADDR_EXP 12
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 180: LD_ADDR_EXP 26
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// rolfDied := false ;
 188: LD_ADDR_EXP 13
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// leninSpotted := false ;
 196: LD_ADDR_EXP 14
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// mortarConstructed := false ;
 204: LD_ADDR_EXP 15
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// rolfHasVehicles := false ;
 212: LD_ADDR_EXP 16
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// leninScriptBase := true ;
 220: LD_ADDR_EXP 11
 224: PUSH
 225: LD_INT 1
 227: ST_TO_ADDR
// rolfWantVehicles := false ;
 228: LD_ADDR_EXP 17
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// omarWantVehicles := false ;
 236: LD_ADDR_EXP 18
 240: PUSH
 241: LD_INT 0
 243: ST_TO_ADDR
// omarHasVehicles := false ;
 244: LD_ADDR_EXP 22
 248: PUSH
 249: LD_INT 0
 251: ST_TO_ADDR
// escapeAllowed := false ;
 252: LD_ADDR_EXP 24
 256: PUSH
 257: LD_INT 0
 259: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 260: LD_ADDR_EXP 19
 264: PUSH
 265: LD_INT 31500
 267: PUSH
 268: LD_INT 28350
 270: PUSH
 271: LD_INT 25900
 273: PUSH
 274: LD_INT 24150
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: PUSH
 283: LD_OWVAR 67
 287: ARRAY
 288: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 289: LD_ADDR_EXP 20
 293: PUSH
 294: LD_INT 31500
 296: PUSH
 297: LD_INT 28350
 299: PUSH
 300: LD_INT 25900
 302: PUSH
 303: LD_INT 24150
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: LIST
 310: LIST
 311: PUSH
 312: LD_OWVAR 67
 316: ARRAY
 317: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 318: LD_ADDR_EXP 21
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: LD_INT 5
 328: PUSH
 329: LD_INT 6
 331: PUSH
 332: LD_INT 6
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: LIST
 339: LIST
 340: PUSH
 341: LD_OWVAR 67
 345: ARRAY
 346: ST_TO_ADDR
// omarAttack := false ;
 347: LD_ADDR_EXP 23
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// disableAttackOnHeike := false ;
 355: LD_ADDR_EXP 27
 359: PUSH
 360: LD_INT 0
 362: ST_TO_ADDR
// escapeTimer := 8 8$30 ;
 363: LD_ADDR_EXP 25
 367: PUSH
 368: LD_INT 17850
 370: ST_TO_ADDR
// firstAttack := true ;
 371: LD_ADDR_EXP 28
 375: PUSH
 376: LD_INT 1
 378: ST_TO_ADDR
// canRolfJoin := true ;
 379: LD_ADDR_EXP 29
 383: PUSH
 384: LD_INT 1
 386: ST_TO_ADDR
// gameActive := false ;
 387: LD_ADDR_EXP 31
 391: PUSH
 392: LD_INT 0
 394: ST_TO_ADDR
// rolfAttack := false ;
 395: LD_ADDR_EXP 32
 399: PUSH
 400: LD_INT 0
 402: ST_TO_ADDR
// end ; end_of_file
 403: LD_VAR 0 1
 407: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , tmp ; begin
 408: LD_INT 0
 410: PPUSH
 411: PPUSH
 412: PPUSH
 413: PPUSH
 414: PPUSH
 415: PPUSH
 416: PPUSH
 417: PPUSH
 418: PPUSH
 419: PPUSH
 420: PPUSH
 421: PPUSH
// uc_nation := 2 ;
 422: LD_ADDR_OWVAR 21
 426: PUSH
 427: LD_INT 2
 429: ST_TO_ADDR
// uc_side := 5 ;
 430: LD_ADDR_OWVAR 20
 434: PUSH
 435: LD_INT 5
 437: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 438: LD_ADDR_EXP 41
 442: PUSH
 443: LD_STRING Abdul
 445: PPUSH
 446: LD_INT 0
 448: PPUSH
 449: LD_STRING 
 451: PPUSH
 452: CALL 28963 0 3
 456: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 457: LD_ADDR_EXP 43
 461: PUSH
 462: LD_STRING Omar
 464: PPUSH
 465: LD_INT 0
 467: PPUSH
 468: LD_STRING 
 470: PPUSH
 471: CALL 28963 0 3
 475: ST_TO_ADDR
// uc_side := 2 ;
 476: LD_ADDR_OWVAR 20
 480: PUSH
 481: LD_INT 2
 483: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 484: LD_ADDR_EXP 33
 488: PUSH
 489: LD_STRING Heike
 491: PPUSH
 492: LD_EXP 1
 496: NOT
 497: PPUSH
 498: LD_EXP 2
 502: PPUSH
 503: CALL 28963 0 3
 507: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 508: LD_ADDR_EXP 36
 512: PUSH
 513: LD_STRING Ibrahim
 515: PPUSH
 516: LD_EXP 1
 520: NOT
 521: PPUSH
 522: LD_EXP 2
 526: PPUSH
 527: CALL 28963 0 3
 531: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 532: LD_ADDR_EXP 34
 536: PUSH
 537: LD_STRING Givi
 539: PPUSH
 540: LD_EXP 1
 544: NOT
 545: PPUSH
 546: LD_EXP 2
 550: PPUSH
 551: CALL 28963 0 3
 555: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 556: LD_ADDR_EXP 37
 560: PUSH
 561: LD_STRING Kamil
 563: PPUSH
 564: LD_EXP 1
 568: NOT
 569: PPUSH
 570: LD_EXP 2
 574: PPUSH
 575: CALL 28963 0 3
 579: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 580: LD_ADDR_EXP 38
 584: PUSH
 585: LD_STRING Kaia
 587: PPUSH
 588: LD_EXP 1
 592: NOT
 593: PPUSH
 594: LD_EXP 2
 598: PPUSH
 599: CALL 28963 0 3
 603: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 604: LD_ADDR_EXP 39
 608: PUSH
 609: LD_STRING Sophia
 611: PPUSH
 612: LD_EXP 1
 616: NOT
 617: PPUSH
 618: LD_EXP 2
 622: PPUSH
 623: CALL 28963 0 3
 627: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 628: LD_ADDR_EXP 40
 632: PUSH
 633: LD_STRING Markov
 635: PPUSH
 636: LD_EXP 1
 640: NOT
 641: PPUSH
 642: LD_EXP 2
 646: PPUSH
 647: CALL 28963 0 3
 651: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 652: LD_ADDR_EXP 45
 656: PUSH
 657: LD_STRING Aviradze
 659: PPUSH
 660: LD_EXP 1
 664: NOT
 665: PPUSH
 666: LD_EXP 2
 670: PPUSH
 671: CALL 28963 0 3
 675: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 676: LD_ADDR_EXP 44
 680: PUSH
 681: LD_STRING Kurt
 683: PPUSH
 684: LD_EXP 1
 688: NOT
 689: PPUSH
 690: LD_EXP 2
 694: PPUSH
 695: CALL 28963 0 3
 699: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 700: LD_ADDR_EXP 35
 704: PUSH
 705: LD_STRING Mike
 707: PPUSH
 708: LD_EXP 1
 712: NOT
 713: PPUSH
 714: LD_EXP 2
 718: PPUSH
 719: CALL 28963 0 3
 723: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 724: LD_ADDR_EXP 42
 728: PUSH
 729: LD_STRING Olaf
 731: PPUSH
 732: LD_INT 0
 734: PPUSH
 735: LD_STRING 
 737: PPUSH
 738: CALL 28963 0 3
 742: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 743: LD_ADDR_EXP 48
 747: PUSH
 748: LD_STRING 05_others
 750: PPUSH
 751: CALL_OW 31
 755: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 756: LD_ADDR_EXP 49
 760: PUSH
 761: LD_STRING 05_apes
 763: PPUSH
 764: CALL_OW 31
 768: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 769: LD_ADDR_VAR 0 5
 773: PUSH
 774: LD_STRING 05_Radar
 776: PPUSH
 777: LD_EXP 1
 781: PPUSH
 782: CALL_OW 30
 786: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 787: LD_ADDR_VAR 0 6
 791: PUSH
 792: LD_STRING 05_RemoteControl
 794: PPUSH
 795: LD_EXP 1
 799: PPUSH
 800: CALL_OW 30
 804: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 805: LD_ADDR_VAR 0 7
 809: PUSH
 810: LD_STRING 05_DrugsTested
 812: PPUSH
 813: LD_EXP 1
 817: PPUSH
 818: CALL_OW 30
 822: ST_TO_ADDR
// if hasDrugs then
 823: LD_VAR 0 7
 827: IFFALSE 842
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 829: LD_INT 5
 831: PPUSH
 832: LD_INT 2
 834: PPUSH
 835: LD_INT 2
 837: PPUSH
 838: CALL_OW 322
// if hasRadar then
 842: LD_VAR 0 5
 846: IFFALSE 861
// SetTech ( tech_radar , 2 , state_researched ) ;
 848: LD_INT 6
 850: PPUSH
 851: LD_INT 2
 853: PPUSH
 854: LD_INT 2
 856: PPUSH
 857: CALL_OW 322
// if hasRemote then
 861: LD_VAR 0 6
 865: IFFALSE 880
// SetTech ( tech_remCont , 2 , state_researched ) ;
 867: LD_INT 15
 869: PPUSH
 870: LD_INT 2
 872: PPUSH
 873: LD_INT 2
 875: PPUSH
 876: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 880: LD_ADDR_VAR 0 12
 884: PUSH
 885: LD_INT 5
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 517
 895: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 896: LD_ADDR_VAR 0 2
 900: PUSH
 901: DOUBLE
 902: LD_INT 1
 904: DEC
 905: ST_TO_ADDR
 906: LD_VAR 0 12
 910: PUSH
 911: LD_INT 1
 913: ARRAY
 914: PUSH
 915: FOR_TO
 916: IFFALSE 993
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
 918: LD_VAR 0 12
 922: PUSH
 923: LD_INT 1
 925: ARRAY
 926: PUSH
 927: LD_VAR 0 2
 931: ARRAY
 932: PPUSH
 933: LD_VAR 0 12
 937: PUSH
 938: LD_INT 2
 940: ARRAY
 941: PUSH
 942: LD_VAR 0 2
 946: ARRAY
 947: PPUSH
 948: CALL_OW 351
 952: IFFALSE 991
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
 954: LD_VAR 0 12
 958: PUSH
 959: LD_INT 1
 961: ARRAY
 962: PUSH
 963: LD_VAR 0 2
 967: ARRAY
 968: PPUSH
 969: LD_VAR 0 12
 973: PUSH
 974: LD_INT 2
 976: ARRAY
 977: PUSH
 978: LD_VAR 0 2
 982: ARRAY
 983: PPUSH
 984: LD_INT 2
 986: PPUSH
 987: CALL_OW 244
 991: GO 915
 993: POP
 994: POP
// base := [ ] ;
 995: LD_ADDR_VAR 0 4
 999: PUSH
1000: EMPTY
1001: ST_TO_ADDR
// if debug then
1002: LD_EXP 1
1006: IFFALSE 1056
// begin base := [ [ b_warehouse , 51 , 77 , 1 , nation_russian , 3 , 0 , 0 , 0 ] , ] ;
1008: LD_ADDR_VAR 0 4
1012: PUSH
1013: LD_INT 1
1015: PUSH
1016: LD_INT 51
1018: PUSH
1019: LD_INT 77
1021: PUSH
1022: LD_INT 1
1024: PUSH
1025: LD_INT 3
1027: PUSH
1028: LD_INT 3
1030: PUSH
1031: LD_INT 0
1033: PUSH
1034: LD_INT 0
1036: PUSH
1037: LD_INT 0
1039: PUSH
1040: EMPTY
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: PUSH
1051: EMPTY
1052: LIST
1053: ST_TO_ADDR
// end else
1054: GO 1072
// if buildingsFromPrev then
1056: LD_EXP 30
1060: IFFALSE 1072
// base := buildingsFromPrev ;
1062: LD_ADDR_VAR 0 4
1066: PUSH
1067: LD_EXP 30
1071: ST_TO_ADDR
// if base then
1072: LD_VAR 0 4
1076: IFFALSE 1274
// for i := 1 to base do
1078: LD_ADDR_VAR 0 2
1082: PUSH
1083: DOUBLE
1084: LD_INT 1
1086: DEC
1087: ST_TO_ADDR
1088: LD_VAR 0 4
1092: PUSH
1093: FOR_TO
1094: IFFALSE 1272
// base := Replace ( base , i , [ base [ i ] [ 1 ] , base [ i ] [ 2 ] + 155 , base [ i ] [ 3 ] + 3 , base [ i ] [ 4 ] , base [ i ] [ 5 ] , base [ i ] [ 6 ] , base [ i ] [ 7 ] , base [ i ] [ 8 ] , base [ i ] [ 9 ] ] ) ;
1096: LD_ADDR_VAR 0 4
1100: PUSH
1101: LD_VAR 0 4
1105: PPUSH
1106: LD_VAR 0 2
1110: PPUSH
1111: LD_VAR 0 4
1115: PUSH
1116: LD_VAR 0 2
1120: ARRAY
1121: PUSH
1122: LD_INT 1
1124: ARRAY
1125: PUSH
1126: LD_VAR 0 4
1130: PUSH
1131: LD_VAR 0 2
1135: ARRAY
1136: PUSH
1137: LD_INT 2
1139: ARRAY
1140: PUSH
1141: LD_INT 155
1143: PLUS
1144: PUSH
1145: LD_VAR 0 4
1149: PUSH
1150: LD_VAR 0 2
1154: ARRAY
1155: PUSH
1156: LD_INT 3
1158: ARRAY
1159: PUSH
1160: LD_INT 3
1162: PLUS
1163: PUSH
1164: LD_VAR 0 4
1168: PUSH
1169: LD_VAR 0 2
1173: ARRAY
1174: PUSH
1175: LD_INT 4
1177: ARRAY
1178: PUSH
1179: LD_VAR 0 4
1183: PUSH
1184: LD_VAR 0 2
1188: ARRAY
1189: PUSH
1190: LD_INT 5
1192: ARRAY
1193: PUSH
1194: LD_VAR 0 4
1198: PUSH
1199: LD_VAR 0 2
1203: ARRAY
1204: PUSH
1205: LD_INT 6
1207: ARRAY
1208: PUSH
1209: LD_VAR 0 4
1213: PUSH
1214: LD_VAR 0 2
1218: ARRAY
1219: PUSH
1220: LD_INT 7
1222: ARRAY
1223: PUSH
1224: LD_VAR 0 4
1228: PUSH
1229: LD_VAR 0 2
1233: ARRAY
1234: PUSH
1235: LD_INT 8
1237: ARRAY
1238: PUSH
1239: LD_VAR 0 4
1243: PUSH
1244: LD_VAR 0 2
1248: ARRAY
1249: PUSH
1250: LD_INT 9
1252: ARRAY
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: PPUSH
1265: CALL_OW 1
1269: ST_TO_ADDR
1270: GO 1093
1272: POP
1273: POP
// base := base ^ [ [ b_depot , 206 , 80 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_bunker , 221 , 95 , 5 , nation_arabian , 3 , 0 , 0 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , nation_arabian , 3 , 0 , 0 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , nation_arabian , 3 , 0 , 0 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_lab_full , 217 , 78 , 4 , nation_arabian , 3 , b_lab_weapon , 0 , 0 ] , [ b_solar_power , 220 , 99 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 220 , 103 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 216 , 102 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_gun , 203 , 94 , 0 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_track , 199 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 81 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 78 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ] ;
1274: LD_ADDR_VAR 0 4
1278: PUSH
1279: LD_VAR 0 4
1283: PUSH
1284: LD_INT 0
1286: PUSH
1287: LD_INT 206
1289: PUSH
1290: LD_INT 80
1292: PUSH
1293: LD_INT 1
1295: PUSH
1296: LD_INT 2
1298: PUSH
1299: LD_INT 3
1301: PUSH
1302: LD_INT 0
1304: PUSH
1305: LD_INT 0
1307: PUSH
1308: LD_INT 0
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: PUSH
1322: LD_INT 32
1324: PUSH
1325: LD_INT 221
1327: PUSH
1328: LD_INT 95
1330: PUSH
1331: LD_INT 5
1333: PUSH
1334: LD_INT 2
1336: PUSH
1337: LD_INT 3
1339: PUSH
1340: LD_INT 0
1342: PUSH
1343: LD_INT 0
1345: PUSH
1346: LD_INT 23
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: PUSH
1360: LD_INT 32
1362: PUSH
1363: LD_INT 223
1365: PUSH
1366: LD_INT 88
1368: PUSH
1369: LD_INT 5
1371: PUSH
1372: LD_INT 2
1374: PUSH
1375: LD_INT 3
1377: PUSH
1378: LD_INT 0
1380: PUSH
1381: LD_INT 0
1383: PUSH
1384: LD_INT 24
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: PUSH
1398: LD_INT 32
1400: PUSH
1401: LD_INT 202
1403: PUSH
1404: LD_INT 64
1406: PUSH
1407: LD_INT 2
1409: PUSH
1410: LD_INT 2
1412: PUSH
1413: LD_INT 3
1415: PUSH
1416: LD_INT 0
1418: PUSH
1419: LD_INT 0
1421: PUSH
1422: LD_INT 25
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: PUSH
1436: LD_INT 3
1438: PUSH
1439: LD_INT 203
1441: PUSH
1442: LD_INT 91
1444: PUSH
1445: LD_INT 1
1447: PUSH
1448: LD_INT 2
1450: PUSH
1451: LD_INT 3
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: LD_INT 0
1459: PUSH
1460: LD_INT 0
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 8
1476: PUSH
1477: LD_INT 217
1479: PUSH
1480: LD_INT 78
1482: PUSH
1483: LD_INT 4
1485: PUSH
1486: LD_INT 2
1488: PUSH
1489: LD_INT 3
1491: PUSH
1492: LD_INT 10
1494: PUSH
1495: LD_INT 0
1497: PUSH
1498: LD_INT 0
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 27
1514: PUSH
1515: LD_INT 220
1517: PUSH
1518: LD_INT 99
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 2
1526: PUSH
1527: LD_INT 3
1529: PUSH
1530: LD_INT 0
1532: PUSH
1533: LD_INT 0
1535: PUSH
1536: LD_INT 0
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: PUSH
1550: LD_INT 27
1552: PUSH
1553: LD_INT 220
1555: PUSH
1556: LD_INT 103
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: LD_INT 2
1564: PUSH
1565: LD_INT 3
1567: PUSH
1568: LD_INT 0
1570: PUSH
1571: LD_INT 0
1573: PUSH
1574: LD_INT 0
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: PUSH
1588: LD_INT 27
1590: PUSH
1591: LD_INT 216
1593: PUSH
1594: LD_INT 102
1596: PUSH
1597: LD_INT 1
1599: PUSH
1600: LD_INT 2
1602: PUSH
1603: LD_INT 3
1605: PUSH
1606: LD_INT 0
1608: PUSH
1609: LD_INT 0
1611: PUSH
1612: LD_INT 0
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 17
1628: PUSH
1629: LD_INT 203
1631: PUSH
1632: LD_INT 94
1634: PUSH
1635: LD_INT 0
1637: PUSH
1638: LD_INT 2
1640: PUSH
1641: LD_INT 3
1643: PUSH
1644: LD_INT 0
1646: PUSH
1647: LD_INT 0
1649: PUSH
1650: LD_INT 0
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 23
1666: PUSH
1667: LD_INT 200
1669: PUSH
1670: LD_INT 88
1672: PUSH
1673: LD_INT 2
1675: PUSH
1676: LD_INT 2
1678: PUSH
1679: LD_INT 3
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: LD_INT 0
1687: PUSH
1688: LD_INT 0
1690: PUSH
1691: EMPTY
1692: LIST
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: PUSH
1702: LD_INT 16
1704: PUSH
1705: LD_INT 199
1707: PUSH
1708: LD_INT 91
1710: PUSH
1711: LD_INT 1
1713: PUSH
1714: LD_INT 2
1716: PUSH
1717: LD_INT 3
1719: PUSH
1720: LD_INT 0
1722: PUSH
1723: LD_INT 0
1725: PUSH
1726: LD_INT 0
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: PUSH
1740: LD_INT 26
1742: PUSH
1743: LD_INT 197
1745: PUSH
1746: LD_INT 81
1748: PUSH
1749: LD_INT 1
1751: PUSH
1752: LD_INT 2
1754: PUSH
1755: LD_INT 3
1757: PUSH
1758: LD_INT 0
1760: PUSH
1761: LD_INT 0
1763: PUSH
1764: LD_INT 0
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: LIST
1777: PUSH
1778: LD_INT 26
1780: PUSH
1781: LD_INT 197
1783: PUSH
1784: LD_INT 78
1786: PUSH
1787: LD_INT 3
1789: PUSH
1790: LD_INT 2
1792: PUSH
1793: LD_INT 3
1795: PUSH
1796: LD_INT 0
1798: PUSH
1799: LD_INT 0
1801: PUSH
1802: LD_INT 0
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: PUSH
1816: EMPTY
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: ADD
1832: ST_TO_ADDR
// if hasRadar then
1833: LD_VAR 0 5
1837: IFFALSE 1901
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
1839: LD_ADDR_VAR 0 4
1843: PUSH
1844: LD_VAR 0 4
1848: PPUSH
1849: LD_VAR 0 4
1853: PUSH
1854: LD_INT 1
1856: PLUS
1857: PPUSH
1858: LD_INT 20
1860: PUSH
1861: LD_INT 203
1863: PUSH
1864: LD_INT 87
1866: PUSH
1867: LD_INT 3
1869: PUSH
1870: LD_INT 2
1872: PUSH
1873: LD_INT 3
1875: PUSH
1876: LD_INT 0
1878: PUSH
1879: LD_INT 0
1881: PUSH
1882: LD_INT 0
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: PPUSH
1896: CALL_OW 1
1900: ST_TO_ADDR
// if hasRemote then
1901: LD_VAR 0 6
1905: IFFALSE 1969
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
1907: LD_ADDR_VAR 0 4
1911: PUSH
1912: LD_VAR 0 4
1916: PPUSH
1917: LD_VAR 0 4
1921: PUSH
1922: LD_INT 1
1924: PLUS
1925: PPUSH
1926: LD_INT 22
1928: PUSH
1929: LD_INT 207
1931: PUSH
1932: LD_INT 95
1934: PUSH
1935: LD_INT 5
1937: PUSH
1938: LD_INT 2
1940: PUSH
1941: LD_INT 3
1943: PUSH
1944: LD_INT 0
1946: PUSH
1947: LD_INT 0
1949: PUSH
1950: LD_INT 0
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: PPUSH
1964: CALL_OW 1
1968: ST_TO_ADDR
// for i in base do
1969: LD_ADDR_VAR 0 2
1973: PUSH
1974: LD_VAR 0 4
1978: PUSH
1979: FOR_IN
1980: IFFALSE 2319
// begin if HexInfo ( i [ 2 ] , i [ 3 ] ) then
1982: LD_VAR 0 2
1986: PUSH
1987: LD_INT 2
1989: ARRAY
1990: PPUSH
1991: LD_VAR 0 2
1995: PUSH
1996: LD_INT 3
1998: ARRAY
1999: PPUSH
2000: CALL_OW 428
2004: IFFALSE 2008
// continue ;
2006: GO 1979
// uc_nation := i [ 5 ] ;
2008: LD_ADDR_OWVAR 21
2012: PUSH
2013: LD_VAR 0 2
2017: PUSH
2018: LD_INT 5
2020: ARRAY
2021: ST_TO_ADDR
// InitBc ;
2022: CALL_OW 21
// bc_type := i [ 1 ] ;
2026: LD_ADDR_OWVAR 42
2030: PUSH
2031: LD_VAR 0 2
2035: PUSH
2036: LD_INT 1
2038: ARRAY
2039: ST_TO_ADDR
// bc_level := i [ 6 ] ;
2040: LD_ADDR_OWVAR 43
2044: PUSH
2045: LD_VAR 0 2
2049: PUSH
2050: LD_INT 6
2052: ARRAY
2053: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 5 ] = nation_arabian and not i [ 8 ] then
2054: LD_VAR 0 2
2058: PUSH
2059: LD_INT 1
2061: ARRAY
2062: PUSH
2063: LD_INT 8
2065: EQUAL
2066: PUSH
2067: LD_VAR 0 2
2071: PUSH
2072: LD_INT 5
2074: ARRAY
2075: PUSH
2076: LD_INT 2
2078: EQUAL
2079: AND
2080: PUSH
2081: LD_VAR 0 2
2085: PUSH
2086: LD_INT 8
2088: ARRAY
2089: NOT
2090: AND
2091: IFFALSE 2126
// begin bc_kind1 := b_lab_weapon ;
2093: LD_ADDR_OWVAR 44
2097: PUSH
2098: LD_INT 10
2100: ST_TO_ADDR
// if hasRadar then
2101: LD_VAR 0 5
2105: IFFALSE 2117
// bc_kind2 := b_lab_opto else
2107: LD_ADDR_OWVAR 45
2111: PUSH
2112: LD_INT 15
2114: ST_TO_ADDR
2115: GO 2126
// bc_kind2 := - 1 ;
2117: LD_ADDR_OWVAR 45
2121: PUSH
2122: LD_INT 1
2124: NEG
2125: ST_TO_ADDR
// end ; if i [ 1 ] in [ b_lab_half , b_lab_full ] and i [ 7 ] then
2126: LD_VAR 0 2
2130: PUSH
2131: LD_INT 1
2133: ARRAY
2134: PUSH
2135: LD_INT 7
2137: PUSH
2138: LD_INT 8
2140: PUSH
2141: EMPTY
2142: LIST
2143: LIST
2144: IN
2145: PUSH
2146: LD_VAR 0 2
2150: PUSH
2151: LD_INT 7
2153: ARRAY
2154: AND
2155: IFFALSE 2171
// bc_kind1 := i [ 7 ] ;
2157: LD_ADDR_OWVAR 44
2161: PUSH
2162: LD_VAR 0 2
2166: PUSH
2167: LD_INT 7
2169: ARRAY
2170: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 8 ] then
2171: LD_VAR 0 2
2175: PUSH
2176: LD_INT 1
2178: ARRAY
2179: PUSH
2180: LD_INT 8
2182: EQUAL
2183: PUSH
2184: LD_VAR 0 2
2188: PUSH
2189: LD_INT 8
2191: ARRAY
2192: AND
2193: IFFALSE 2209
// bc_kind1 := i [ 8 ] ;
2195: LD_ADDR_OWVAR 44
2199: PUSH
2200: LD_VAR 0 2
2204: PUSH
2205: LD_INT 8
2207: ARRAY
2208: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2209: LD_ADDR_VAR 0 3
2213: PUSH
2214: LD_VAR 0 2
2218: PUSH
2219: LD_INT 2
2221: ARRAY
2222: PPUSH
2223: LD_VAR 0 2
2227: PUSH
2228: LD_INT 3
2230: ARRAY
2231: PPUSH
2232: LD_VAR 0 2
2236: PUSH
2237: LD_INT 4
2239: ARRAY
2240: PPUSH
2241: CALL_OW 47
2245: ST_TO_ADDR
// if i [ 9 ] then
2246: LD_VAR 0 2
2250: PUSH
2251: LD_INT 9
2253: ARRAY
2254: IFFALSE 2274
// PlaceWeaponTurret ( b , i [ 9 ] ) ;
2256: LD_VAR 0 3
2260: PPUSH
2261: LD_VAR 0 2
2265: PUSH
2266: LD_INT 9
2268: ARRAY
2269: PPUSH
2270: CALL_OW 431
// if i [ 1 ] = b_bunker then
2274: LD_VAR 0 2
2278: PUSH
2279: LD_INT 1
2281: ARRAY
2282: PUSH
2283: LD_INT 32
2285: EQUAL
2286: IFFALSE 2317
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
2288: LD_ADDR_VAR 0 11
2292: PUSH
2293: LD_VAR 0 11
2297: PPUSH
2298: LD_VAR 0 11
2302: PUSH
2303: LD_INT 1
2305: PLUS
2306: PPUSH
2307: LD_VAR 0 3
2311: PPUSH
2312: CALL_OW 1
2316: ST_TO_ADDR
// end ;
2317: GO 1979
2319: POP
2320: POP
// depot := HexInfo ( 206 , 80 ) ;
2321: LD_ADDR_VAR 0 9
2325: PUSH
2326: LD_INT 206
2328: PPUSH
2329: LD_INT 80
2331: PPUSH
2332: CALL_OW 428
2336: ST_TO_ADDR
// factory := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) ;
2337: LD_ADDR_VAR 0 8
2341: PUSH
2342: LD_INT 22
2344: PUSH
2345: LD_INT 2
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: PUSH
2352: LD_INT 30
2354: PUSH
2355: LD_INT 3
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: PPUSH
2366: CALL_OW 69
2370: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2371: LD_ADDR_VAR 0 10
2375: PUSH
2376: LD_INT 22
2378: PUSH
2379: LD_INT 2
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: PUSH
2386: LD_INT 2
2388: PUSH
2389: LD_INT 30
2391: PUSH
2392: LD_INT 6
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PUSH
2399: LD_INT 30
2401: PUSH
2402: LD_INT 7
2404: PUSH
2405: EMPTY
2406: LIST
2407: LIST
2408: PUSH
2409: LD_INT 30
2411: PUSH
2412: LD_INT 8
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PPUSH
2429: CALL_OW 69
2433: ST_TO_ADDR
// arDepot := depot ;
2434: LD_ADDR_EXP 47
2438: PUSH
2439: LD_VAR 0 9
2443: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 190 , 150 ] [ Difficulty ] ) ;
2444: LD_VAR 0 9
2448: PPUSH
2449: CALL_OW 274
2453: PPUSH
2454: LD_INT 1
2456: PPUSH
2457: LD_INT 360
2459: PUSH
2460: LD_INT 260
2462: PUSH
2463: LD_INT 190
2465: PUSH
2466: LD_INT 150
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: LIST
2473: LIST
2474: PUSH
2475: LD_OWVAR 67
2479: ARRAY
2480: PPUSH
2481: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 150 , 120 ] [ Difficulty ] ) ;
2485: LD_VAR 0 9
2489: PPUSH
2490: CALL_OW 274
2494: PPUSH
2495: LD_INT 2
2497: PPUSH
2498: LD_INT 200
2500: PUSH
2501: LD_INT 170
2503: PUSH
2504: LD_INT 150
2506: PUSH
2507: LD_INT 120
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: LIST
2514: LIST
2515: PUSH
2516: LD_OWVAR 67
2520: ARRAY
2521: PPUSH
2522: CALL_OW 277
// uc_nation := 2 ;
2526: LD_ADDR_OWVAR 21
2530: PUSH
2531: LD_INT 2
2533: ST_TO_ADDR
// uc_side := 2 ;
2534: LD_ADDR_OWVAR 20
2538: PUSH
2539: LD_INT 2
2541: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
2542: LD_INT 13
2544: PPUSH
2545: LD_INT 1
2547: PPUSH
2548: LD_INT 1
2550: PPUSH
2551: LD_INT 27
2553: PPUSH
2554: LD_INT 33
2556: PPUSH
2557: CALL 33978 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
2561: CALL_OW 45
2565: PPUSH
2566: LD_INT 190
2568: PPUSH
2569: LD_INT 64
2571: PPUSH
2572: LD_INT 5
2574: PPUSH
2575: LD_INT 0
2577: PPUSH
2578: CALL 68543 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
2582: LD_INT 13
2584: PPUSH
2585: LD_INT 1
2587: PPUSH
2588: LD_INT 1
2590: PPUSH
2591: LD_INT 25
2593: PPUSH
2594: LD_INT 22
2596: PPUSH
2597: CALL 33978 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
2601: CALL_OW 45
2605: PPUSH
2606: LD_INT 188
2608: PPUSH
2609: LD_INT 67
2611: PPUSH
2612: LD_INT 5
2614: PPUSH
2615: LD_INT 0
2617: PPUSH
2618: CALL 68543 0 5
// if hasRemote then
2622: LD_VAR 0 6
2626: IFFALSE 2708
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_control_tower , 35 ) ;
2628: LD_INT 13
2630: PPUSH
2631: LD_INT 1
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_INT 31
2639: PPUSH
2640: LD_INT 35
2642: PPUSH
2643: CALL 33978 0 5
// PlaceUnitXYD ( CreateVehicle , 191 , 71 , 5 , false ) ;
2647: CALL_OW 45
2651: PPUSH
2652: LD_INT 191
2654: PPUSH
2655: LD_INT 71
2657: PPUSH
2658: LD_INT 5
2660: PPUSH
2661: LD_INT 0
2663: PPUSH
2664: CALL 68543 0 5
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_remote , ar_gun , 55 ) ;
2668: LD_INT 14
2670: PPUSH
2671: LD_INT 1
2673: PPUSH
2674: LD_INT 2
2676: PPUSH
2677: LD_INT 27
2679: PPUSH
2680: LD_INT 55
2682: PPUSH
2683: CALL 33978 0 5
// PlaceUnitXYD ( CreateVehicle , 199 , 67 , 0 , false ) ;
2687: CALL_OW 45
2691: PPUSH
2692: LD_INT 199
2694: PPUSH
2695: LD_INT 67
2697: PPUSH
2698: LD_INT 0
2700: PPUSH
2701: LD_INT 0
2703: PPUSH
2704: CALL 68543 0 5
// end ; PlaceUnitXY ( Heike , 213 , 87 , false ) ;
2708: LD_EXP 33
2712: PPUSH
2713: LD_INT 213
2715: PPUSH
2716: LD_INT 87
2718: PPUSH
2719: LD_INT 0
2721: PPUSH
2722: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
2726: LD_EXP 33
2730: PPUSH
2731: LD_INT 214
2733: PPUSH
2734: LD_INT 87
2736: PPUSH
2737: CALL_OW 118
// if Kaia then
2741: LD_EXP 38
2745: IFFALSE 2780
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
2747: LD_EXP 38
2751: PPUSH
2752: LD_INT 213
2754: PPUSH
2755: LD_INT 85
2757: PPUSH
2758: LD_INT 0
2760: PPUSH
2761: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
2765: LD_EXP 38
2769: PPUSH
2770: LD_INT 215
2772: PPUSH
2773: LD_INT 87
2775: PPUSH
2776: CALL_OW 118
// end ; if Olaf and Kaia then
2780: LD_EXP 42
2784: PUSH
2785: LD_EXP 38
2789: AND
2790: IFFALSE 2827
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
2792: LD_EXP 42
2796: PPUSH
2797: LD_INT 215
2799: PPUSH
2800: LD_INT 87
2802: PPUSH
2803: LD_INT 0
2805: PPUSH
2806: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
2810: LD_EXP 42
2814: PPUSH
2815: LD_INT 213
2817: PPUSH
2818: LD_INT 85
2820: PPUSH
2821: CALL_OW 118
// end else
2825: GO 2847
// if Olaf then
2827: LD_EXP 42
2831: IFFALSE 2847
// PlaceHumanInUnit ( Olaf , factory ) ;
2833: LD_EXP 42
2837: PPUSH
2838: LD_VAR 0 8
2842: PPUSH
2843: CALL_OW 52
// if Givi then
2847: LD_EXP 34
2851: IFFALSE 2932
// begin if Kaia and Olaf then
2853: LD_EXP 38
2857: PUSH
2858: LD_EXP 42
2862: AND
2863: IFFALSE 2900
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
2865: LD_EXP 34
2869: PPUSH
2870: LD_INT 247
2872: PPUSH
2873: LD_INT 117
2875: PPUSH
2876: LD_INT 0
2878: PPUSH
2879: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2883: LD_EXP 34
2887: PPUSH
2888: LD_INT 248
2890: PPUSH
2891: LD_INT 118
2893: PPUSH
2894: CALL_OW 118
// end else
2898: GO 2932
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2900: LD_EXP 34
2904: PPUSH
2905: LD_INT 216
2907: PPUSH
2908: LD_INT 88
2910: PPUSH
2911: LD_INT 0
2913: PPUSH
2914: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2918: LD_EXP 34
2922: PPUSH
2923: LD_EXP 33
2927: PPUSH
2928: CALL_OW 119
// end ; end ; if Kurt then
2932: LD_EXP 44
2936: IFFALSE 2956
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2938: LD_EXP 44
2942: PPUSH
2943: LD_VAR 0 11
2947: PUSH
2948: LD_INT 2
2950: ARRAY
2951: PPUSH
2952: CALL_OW 52
// if Mike then
2956: LD_EXP 35
2960: IFFALSE 2980
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2962: LD_EXP 35
2966: PPUSH
2967: LD_VAR 0 11
2971: PUSH
2972: LD_INT 3
2974: ARRAY
2975: PPUSH
2976: CALL_OW 52
// if Kamil then
2980: LD_EXP 37
2984: IFFALSE 3046
// begin if Kaia and Olaf then
2986: LD_EXP 38
2990: PUSH
2991: LD_EXP 42
2995: AND
2996: IFFALSE 3014
// PlaceHumanInUnit ( Kamil , depot ) else
2998: LD_EXP 37
3002: PPUSH
3003: LD_VAR 0 9
3007: PPUSH
3008: CALL_OW 52
3012: GO 3046
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
3014: LD_EXP 37
3018: PPUSH
3019: LD_INT 213
3021: PPUSH
3022: LD_INT 87
3024: PPUSH
3025: LD_INT 0
3027: PPUSH
3028: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
3032: LD_EXP 37
3036: PPUSH
3037: LD_EXP 33
3041: PPUSH
3042: CALL_OW 119
// end ; end ; if Sophia then
3046: LD_EXP 39
3050: IFFALSE 3066
// PlaceHumanInUnit ( Sophia , depot ) ;
3052: LD_EXP 39
3056: PPUSH
3057: LD_VAR 0 9
3061: PPUSH
3062: CALL_OW 52
// if Aviradze then
3066: LD_EXP 45
3070: IFFALSE 3119
// if lab then
3072: LD_VAR 0 10
3076: IFFALSE 3098
// PlaceHumanInUnit ( Aviradze , lab [ 1 ] ) else
3078: LD_EXP 45
3082: PPUSH
3083: LD_VAR 0 10
3087: PUSH
3088: LD_INT 1
3090: ARRAY
3091: PPUSH
3092: CALL_OW 52
3096: GO 3119
// PlaceUnitXYR ( Aviradze , 210 , 87 , 3 , false ) ;
3098: LD_EXP 45
3102: PPUSH
3103: LD_INT 210
3105: PPUSH
3106: LD_INT 87
3108: PPUSH
3109: LD_INT 3
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 50
// if Ibrahim then
3119: LD_EXP 36
3123: IFFALSE 3172
// if lab then
3125: LD_VAR 0 10
3129: IFFALSE 3151
// PlaceHumanInUnit ( Ibrahim , lab [ 1 ] ) else
3131: LD_EXP 36
3135: PPUSH
3136: LD_VAR 0 10
3140: PUSH
3141: LD_INT 1
3143: ARRAY
3144: PPUSH
3145: CALL_OW 52
3149: GO 3172
// PlaceUnitXYR ( Ibrahim , 210 , 87 , 3 , false ) ;
3151: LD_EXP 36
3155: PPUSH
3156: LD_INT 210
3158: PPUSH
3159: LD_INT 87
3161: PPUSH
3162: LD_INT 3
3164: PPUSH
3165: LD_INT 0
3167: PPUSH
3168: CALL_OW 50
// if Markov then
3172: LD_EXP 40
3176: IFFALSE 3225
// if factory then
3178: LD_VAR 0 8
3182: IFFALSE 3204
// PlaceHumanInUnit ( Markov , factory [ 1 ] ) else
3184: LD_EXP 40
3188: PPUSH
3189: LD_VAR 0 8
3193: PUSH
3194: LD_INT 1
3196: ARRAY
3197: PPUSH
3198: CALL_OW 52
3202: GO 3225
// PlaceUnitXYR ( Markov , 210 , 87 , 3 , false ) ;
3204: LD_EXP 40
3208: PPUSH
3209: LD_INT 210
3211: PPUSH
3212: LD_INT 87
3214: PPUSH
3215: LD_INT 3
3217: PPUSH
3218: LD_INT 0
3220: PPUSH
3221: CALL_OW 50
// if heikeSecondSquad then
3225: LD_EXP 48
3229: IFFALSE 3269
// for i in heikeSecondSquad do
3231: LD_ADDR_VAR 0 2
3235: PUSH
3236: LD_EXP 48
3240: PUSH
3241: FOR_IN
3242: IFFALSE 3267
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
3244: LD_VAR 0 2
3248: PPUSH
3249: LD_INT 190
3251: PPUSH
3252: LD_INT 65
3254: PPUSH
3255: LD_INT 5
3257: PPUSH
3258: LD_INT 0
3260: PPUSH
3261: CALL_OW 50
3265: GO 3241
3267: POP
3268: POP
// if heikeApes then
3269: LD_EXP 49
3273: IFFALSE 3313
// for i in heikeApes do
3275: LD_ADDR_VAR 0 2
3279: PUSH
3280: LD_EXP 49
3284: PUSH
3285: FOR_IN
3286: IFFALSE 3311
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
3288: LD_VAR 0 2
3292: PPUSH
3293: LD_INT 190
3295: PPUSH
3296: LD_INT 70
3298: PPUSH
3299: LD_INT 5
3301: PPUSH
3302: LD_INT 0
3304: PPUSH
3305: CALL_OW 50
3309: GO 3285
3311: POP
3312: POP
// end ;
3313: LD_VAR 0 1
3317: RET
// export function PrepareRolfSquad ; var i , j ; begin
3318: LD_INT 0
3320: PPUSH
3321: PPUSH
3322: PPUSH
// uc_side := 8 ;
3323: LD_ADDR_OWVAR 20
3327: PUSH
3328: LD_INT 8
3330: ST_TO_ADDR
// uc_nation := 2 ;
3331: LD_ADDR_OWVAR 21
3335: PUSH
3336: LD_INT 2
3338: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
3339: LD_ADDR_EXP 46
3343: PUSH
3344: LD_STRING Bergkamp
3346: PPUSH
3347: CALL_OW 25
3351: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
3352: LD_ADDR_EXP 50
3356: PUSH
3357: LD_EXP 46
3361: PUSH
3362: EMPTY
3363: LIST
3364: ST_TO_ADDR
// for i := 1 to 4 do
3365: LD_ADDR_VAR 0 2
3369: PUSH
3370: DOUBLE
3371: LD_INT 1
3373: DEC
3374: ST_TO_ADDR
3375: LD_INT 4
3377: PUSH
3378: FOR_TO
3379: IFFALSE 3459
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
3381: LD_ADDR_VAR 0 3
3385: PUSH
3386: DOUBLE
3387: LD_INT 1
3389: DEC
3390: ST_TO_ADDR
3391: LD_INT 5
3393: PUSH
3394: LD_INT 2
3396: PUSH
3397: LD_INT 3
3399: PUSH
3400: LD_INT 1
3402: PUSH
3403: EMPTY
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: PUSH
3409: LD_VAR 0 2
3413: ARRAY
3414: PUSH
3415: FOR_TO
3416: IFFALSE 3455
// begin PrepareHuman ( false , i , 5 ) ;
3418: LD_INT 0
3420: PPUSH
3421: LD_VAR 0 2
3425: PPUSH
3426: LD_INT 5
3428: PPUSH
3429: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
3433: LD_ADDR_EXP 50
3437: PUSH
3438: LD_EXP 50
3442: PPUSH
3443: CALL_OW 44
3447: PPUSH
3448: CALL 66403 0 2
3452: ST_TO_ADDR
// end ;
3453: GO 3415
3455: POP
3456: POP
// end ;
3457: GO 3378
3459: POP
3460: POP
// if HexInfo ( 5 , 3 ) then
3461: LD_INT 5
3463: PPUSH
3464: LD_INT 3
3466: PPUSH
3467: CALL_OW 428
3471: IFFALSE 3488
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
3473: LD_INT 5
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: CALL_OW 428
3483: PPUSH
3484: CALL_OW 64
// for i in rolfSquad do
3488: LD_ADDR_VAR 0 2
3492: PUSH
3493: LD_EXP 50
3497: PUSH
3498: FOR_IN
3499: IFFALSE 3635
// begin uc_direction := 2 ;
3501: LD_ADDR_OWVAR 24
3505: PUSH
3506: LD_INT 2
3508: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
3509: LD_VAR 0 2
3513: PPUSH
3514: CALL_OW 257
3518: PUSH
3519: LD_INT 3
3521: EQUAL
3522: IFFALSE 3596
// begin uc_side := 8 ;
3524: LD_ADDR_OWVAR 20
3528: PUSH
3529: LD_INT 8
3531: ST_TO_ADDR
// uc_nation := 2 ;
3532: LD_ADDR_OWVAR 21
3536: PUSH
3537: LD_INT 2
3539: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
3540: LD_INT 13
3542: PPUSH
3543: LD_INT 1
3545: PPUSH
3546: LD_INT 1
3548: PPUSH
3549: LD_INT 27
3551: PPUSH
3552: LD_INT 88
3554: PPUSH
3555: CALL 33978 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
3559: CALL_OW 45
3563: PPUSH
3564: LD_INT 11
3566: PPUSH
3567: LD_INT 0
3569: PPUSH
3570: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
3574: LD_VAR 0 2
3578: PPUSH
3579: LD_INT 5
3581: PPUSH
3582: LD_INT 3
3584: PPUSH
3585: CALL_OW 428
3589: PPUSH
3590: CALL_OW 52
// end else
3594: GO 3611
// PlaceUnitArea ( i , northSpawn , false ) ;
3596: LD_VAR 0 2
3600: PPUSH
3601: LD_INT 11
3603: PPUSH
3604: LD_INT 0
3606: PPUSH
3607: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
3611: LD_VAR 0 2
3615: PPUSH
3616: LD_INT 29
3618: PPUSH
3619: LD_INT 10
3621: PPUSH
3622: CALL_OW 111
// wait ( 0 0$2 ) ;
3626: LD_INT 70
3628: PPUSH
3629: CALL_OW 67
// end ;
3633: GO 3498
3635: POP
3636: POP
// wait ( 0 0$5 ) ;
3637: LD_INT 175
3639: PPUSH
3640: CALL_OW 67
// end ;
3644: LD_VAR 0 1
3648: RET
// export function PrepareRolfBase ; var i , tmp ; begin
3649: LD_INT 0
3651: PPUSH
3652: PPUSH
3653: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
3654: LD_EXP 46
3658: PPUSH
3659: LD_INT 94
3661: PPUSH
3662: LD_INT 63
3664: PPUSH
3665: CALL_OW 428
3669: PPUSH
3670: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
3674: LD_ADDR_VAR 0 3
3678: PUSH
3679: LD_INT 4
3681: PUSH
3682: LD_INT 82
3684: PUSH
3685: LD_INT 64
3687: PUSH
3688: LD_INT 1
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: PUSH
3697: LD_INT 31
3699: PUSH
3700: LD_INT 73
3702: PUSH
3703: LD_INT 58
3705: PUSH
3706: LD_INT 0
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: ST_TO_ADDR
// for i in tmp do
3719: LD_ADDR_VAR 0 2
3723: PUSH
3724: LD_VAR 0 3
3728: PUSH
3729: FOR_IN
3730: IFFALSE 3794
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3732: LD_EXP 50
3736: PPUSH
3737: LD_INT 25
3739: PUSH
3740: LD_INT 2
3742: PUSH
3743: EMPTY
3744: LIST
3745: LIST
3746: PPUSH
3747: CALL_OW 72
3751: PPUSH
3752: LD_VAR 0 2
3756: PUSH
3757: LD_INT 1
3759: ARRAY
3760: PPUSH
3761: LD_VAR 0 2
3765: PUSH
3766: LD_INT 2
3768: ARRAY
3769: PPUSH
3770: LD_VAR 0 2
3774: PUSH
3775: LD_INT 3
3777: ARRAY
3778: PPUSH
3779: LD_VAR 0 2
3783: PUSH
3784: LD_INT 4
3786: ARRAY
3787: PPUSH
3788: CALL_OW 205
3792: GO 3729
3794: POP
3795: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
3796: LD_EXP 50
3800: PUSH
3801: LD_INT 2
3803: ARRAY
3804: PPUSH
3805: LD_INT 63
3807: PPUSH
3808: LD_INT 42
3810: PPUSH
3811: CALL_OW 428
3815: PPUSH
3816: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
3820: LD_EXP 50
3824: PUSH
3825: LD_INT 3
3827: ARRAY
3828: PPUSH
3829: LD_INT 94
3831: PPUSH
3832: LD_INT 63
3834: PPUSH
3835: CALL_OW 428
3839: PPUSH
3840: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3844: LD_INT 35
3846: PPUSH
3847: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
3851: LD_EXP 50
3855: PPUSH
3856: LD_INT 25
3858: PUSH
3859: LD_INT 2
3861: PUSH
3862: EMPTY
3863: LIST
3864: LIST
3865: PUSH
3866: LD_INT 3
3868: PUSH
3869: LD_INT 60
3871: PUSH
3872: EMPTY
3873: LIST
3874: PUSH
3875: EMPTY
3876: LIST
3877: LIST
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: PPUSH
3883: CALL_OW 72
3887: IFFALSE 3844
// rolfScriptBase := true ;
3889: LD_ADDR_EXP 9
3893: PUSH
3894: LD_INT 1
3896: ST_TO_ADDR
// end ;
3897: LD_VAR 0 1
3901: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
3902: LD_EXP 9
3906: PUSH
3907: LD_EXP 46
3911: PPUSH
3912: CALL_OW 255
3916: PUSH
3917: LD_INT 8
3919: EQUAL
3920: AND
3921: IFFALSE 4928
3923: GO 3925
3925: DISABLE
3926: LD_INT 0
3928: PPUSH
3929: PPUSH
3930: PPUSH
3931: PPUSH
3932: PPUSH
3933: PPUSH
3934: PPUSH
3935: PPUSH
3936: PPUSH
3937: PPUSH
// begin enable ;
3938: ENABLE
// if not rolfSquad then
3939: LD_EXP 50
3943: NOT
3944: IFFALSE 3948
// exit ;
3946: GO 4928
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
3948: LD_ADDR_VAR 0 9
3952: PUSH
3953: LD_INT 12
3955: PPUSH
3956: LD_INT 81
3958: PUSH
3959: LD_INT 8
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PPUSH
3966: CALL_OW 70
3970: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
3971: LD_ADDR_VAR 0 5
3975: PUSH
3976: LD_EXP 50
3980: PPUSH
3981: LD_INT 25
3983: PUSH
3984: LD_INT 1
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: PPUSH
3991: CALL_OW 72
3995: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
3996: LD_ADDR_VAR 0 6
4000: PUSH
4001: LD_EXP 50
4005: PPUSH
4006: LD_INT 25
4008: PUSH
4009: LD_INT 2
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: PPUSH
4016: CALL_OW 72
4020: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
4021: LD_ADDR_VAR 0 8
4025: PUSH
4026: LD_EXP 50
4030: PPUSH
4031: LD_INT 25
4033: PUSH
4034: LD_INT 3
4036: PUSH
4037: EMPTY
4038: LIST
4039: LIST
4040: PPUSH
4041: CALL_OW 72
4045: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
4046: LD_ADDR_VAR 0 7
4050: PUSH
4051: LD_EXP 50
4055: PPUSH
4056: LD_INT 25
4058: PUSH
4059: LD_INT 4
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: PPUSH
4066: CALL_OW 72
4070: ST_TO_ADDR
// if sol then
4071: LD_VAR 0 5
4075: IFFALSE 4373
// for i in sol union Rolf do
4077: LD_ADDR_VAR 0 1
4081: PUSH
4082: LD_VAR 0 5
4086: PUSH
4087: LD_EXP 46
4091: UNION
4092: PUSH
4093: FOR_IN
4094: IFFALSE 4371
// if not IsInUnit ( i ) and not HasTask ( i ) then
4096: LD_VAR 0 1
4100: PPUSH
4101: CALL_OW 310
4105: NOT
4106: PUSH
4107: LD_VAR 0 1
4111: PPUSH
4112: CALL_OW 314
4116: NOT
4117: AND
4118: IFFALSE 4369
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
4120: LD_VAR 0 1
4124: PPUSH
4125: CALL_OW 256
4129: PUSH
4130: LD_INT 500
4132: LESS
4133: PUSH
4134: LD_VAR 0 1
4138: PPUSH
4139: LD_INT 80
4141: PPUSH
4142: LD_INT 49
4144: PPUSH
4145: CALL_OW 297
4149: PUSH
4150: LD_INT 6
4152: GREATER
4153: AND
4154: IFFALSE 4173
// begin ComMoveXY ( i , 80 , 49 ) ;
4156: LD_VAR 0 1
4160: PPUSH
4161: LD_INT 80
4163: PPUSH
4164: LD_INT 49
4166: PPUSH
4167: CALL_OW 111
// continue ;
4171: GO 4093
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4173: LD_ADDR_VAR 0 4
4177: PUSH
4178: LD_INT 22
4180: PUSH
4181: LD_INT 8
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 50
4190: PUSH
4191: EMPTY
4192: LIST
4193: PUSH
4194: LD_INT 2
4196: PUSH
4197: LD_INT 30
4199: PUSH
4200: LD_INT 4
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 30
4209: PUSH
4210: LD_INT 5
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: LD_INT 30
4219: PUSH
4220: LD_INT 32
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PUSH
4227: LD_INT 30
4229: PUSH
4230: LD_INT 31
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: PUSH
4237: EMPTY
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: PPUSH
4249: CALL_OW 69
4253: ST_TO_ADDR
// if tmp then
4254: LD_VAR 0 4
4258: IFFALSE 4369
// begin for b in tmp do
4260: LD_ADDR_VAR 0 2
4264: PUSH
4265: LD_VAR 0 4
4269: PUSH
4270: FOR_IN
4271: IFFALSE 4367
// begin case GetBType ( b ) of b_armoury , b_barracks :
4273: LD_VAR 0 2
4277: PPUSH
4278: CALL_OW 266
4282: PUSH
4283: LD_INT 4
4285: DOUBLE
4286: EQUAL
4287: IFTRUE 4297
4289: LD_INT 5
4291: DOUBLE
4292: EQUAL
4293: IFTRUE 4297
4295: GO 4308
4297: POP
// p := 6 ; b_breastwork , b_bunker :
4298: LD_ADDR_VAR 0 3
4302: PUSH
4303: LD_INT 6
4305: ST_TO_ADDR
4306: GO 4334
4308: LD_INT 31
4310: DOUBLE
4311: EQUAL
4312: IFTRUE 4322
4314: LD_INT 32
4316: DOUBLE
4317: EQUAL
4318: IFTRUE 4322
4320: GO 4333
4322: POP
// p := 1 ; end ;
4323: LD_ADDR_VAR 0 3
4327: PUSH
4328: LD_INT 1
4330: ST_TO_ADDR
4331: GO 4334
4333: POP
// if UnitsInside ( b ) < p then
4334: LD_VAR 0 2
4338: PPUSH
4339: CALL_OW 313
4343: PUSH
4344: LD_VAR 0 3
4348: LESS
4349: IFFALSE 4365
// ComEnterUnit ( i , b ) ;
4351: LD_VAR 0 1
4355: PPUSH
4356: LD_VAR 0 2
4360: PPUSH
4361: CALL_OW 120
// end ;
4365: GO 4270
4367: POP
4368: POP
// end ; end ;
4369: GO 4093
4371: POP
4372: POP
// if sci then
4373: LD_VAR 0 7
4377: IFFALSE 4432
// for i in sci do
4379: LD_ADDR_VAR 0 1
4383: PUSH
4384: LD_VAR 0 7
4388: PUSH
4389: FOR_IN
4390: IFFALSE 4430
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
4392: LD_VAR 0 1
4396: PPUSH
4397: LD_INT 80
4399: PPUSH
4400: LD_INT 49
4402: PPUSH
4403: CALL_OW 297
4407: PUSH
4408: LD_INT 9
4410: GREATER
4411: IFFALSE 4428
// ComMoveXY ( i , 80 , 49 ) ;
4413: LD_VAR 0 1
4417: PPUSH
4418: LD_INT 80
4420: PPUSH
4421: LD_INT 49
4423: PPUSH
4424: CALL_OW 111
// end ;
4428: GO 4389
4430: POP
4431: POP
// if mech then
4432: LD_VAR 0 8
4436: IFFALSE 4650
// for i in mech do
4438: LD_ADDR_VAR 0 1
4442: PUSH
4443: LD_VAR 0 8
4447: PUSH
4448: FOR_IN
4449: IFFALSE 4648
// begin hasVehicle := IsInUnit ( i ) ;
4451: LD_ADDR_VAR 0 10
4455: PUSH
4456: LD_VAR 0 1
4460: PPUSH
4461: CALL_OW 310
4465: ST_TO_ADDR
// if enemyInBase then
4466: LD_VAR 0 9
4470: IFFALSE 4566
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
4472: LD_VAR 0 10
4476: PUSH
4477: LD_VAR 0 10
4481: PPUSH
4482: CALL_OW 256
4486: PUSH
4487: LD_INT 500
4489: GREATER
4490: AND
4491: IFFALSE 4519
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
4493: LD_VAR 0 10
4497: PPUSH
4498: LD_VAR 0 9
4502: PPUSH
4503: LD_VAR 0 10
4507: PPUSH
4508: CALL_OW 74
4512: PPUSH
4513: CALL_OW 115
4517: GO 4564
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
4519: LD_VAR 0 10
4523: PPUSH
4524: LD_INT 86
4526: PPUSH
4527: LD_INT 49
4529: PPUSH
4530: CALL_OW 297
4534: PUSH
4535: LD_INT 8
4537: GREATER
4538: IFFALSE 4564
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
4540: LD_VAR 0 10
4544: PPUSH
4545: LD_INT 86
4547: PPUSH
4548: LD_INT 49
4550: PPUSH
4551: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
4555: LD_VAR 0 1
4559: PPUSH
4560: CALL 68223 0 1
// end end else
4564: GO 4646
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
4566: LD_VAR 0 1
4570: PPUSH
4571: LD_INT 86
4573: PPUSH
4574: LD_INT 49
4576: PPUSH
4577: CALL_OW 297
4581: PUSH
4582: LD_INT 8
4584: GREATER
4585: IFFALSE 4604
// ComMoveXY ( i , 86 , 49 ) else
4587: LD_VAR 0 1
4591: PPUSH
4592: LD_INT 86
4594: PPUSH
4595: LD_INT 49
4597: PPUSH
4598: CALL_OW 111
4602: GO 4646
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
4604: LD_VAR 0 10
4608: PUSH
4609: LD_VAR 0 10
4613: PPUSH
4614: CALL_OW 256
4618: PUSH
4619: LD_INT 1000
4621: LESS
4622: AND
4623: IFFALSE 4646
// begin SetFuel ( hasVehicle , 100 ) ;
4625: LD_VAR 0 10
4629: PPUSH
4630: LD_INT 100
4632: PPUSH
4633: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
4637: LD_VAR 0 1
4641: PPUSH
4642: CALL 68103 0 1
// end ; end ; end ;
4646: GO 4448
4648: POP
4649: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4650: LD_ADDR_VAR 0 4
4654: PUSH
4655: LD_INT 12
4657: PPUSH
4658: LD_INT 3
4660: PUSH
4661: LD_INT 24
4663: PUSH
4664: LD_INT 1000
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: PUSH
4675: LD_INT 21
4677: PUSH
4678: LD_INT 3
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PPUSH
4689: CALL_OW 70
4693: ST_TO_ADDR
// if tmp and eng then
4694: LD_VAR 0 4
4698: PUSH
4699: LD_VAR 0 6
4703: AND
4704: IFFALSE 4810
// begin for i in eng do
4706: LD_ADDR_VAR 0 1
4710: PUSH
4711: LD_VAR 0 6
4715: PUSH
4716: FOR_IN
4717: IFFALSE 4808
// if IsInUnit ( i ) then
4719: LD_VAR 0 1
4723: PPUSH
4724: CALL_OW 310
4728: IFFALSE 4741
// ComExitBuilding ( i ) else
4730: LD_VAR 0 1
4734: PPUSH
4735: CALL_OW 122
4739: GO 4806
// if GetLives ( i ) = 1000 then
4741: LD_VAR 0 1
4745: PPUSH
4746: CALL_OW 256
4750: PUSH
4751: LD_INT 1000
4753: EQUAL
4754: IFFALSE 4776
// ComRepairBuilding ( i , tmp [ 1 ] ) else
4756: LD_VAR 0 1
4760: PPUSH
4761: LD_VAR 0 4
4765: PUSH
4766: LD_INT 1
4768: ARRAY
4769: PPUSH
4770: CALL_OW 130
4774: GO 4806
// if GetLives ( i ) < 700 then
4776: LD_VAR 0 1
4780: PPUSH
4781: CALL_OW 256
4785: PUSH
4786: LD_INT 700
4788: LESS
4789: IFFALSE 4806
// ComMoveXY ( i , 80 , 49 ) ;
4791: LD_VAR 0 1
4795: PPUSH
4796: LD_INT 80
4798: PPUSH
4799: LD_INT 49
4801: PPUSH
4802: CALL_OW 111
4806: GO 4716
4808: POP
4809: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
4810: LD_VAR 0 4
4814: NOT
4815: PUSH
4816: LD_VAR 0 6
4820: PPUSH
4821: LD_INT 3
4823: PUSH
4824: LD_INT 54
4826: PUSH
4827: EMPTY
4828: LIST
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: PPUSH
4834: CALL_OW 72
4838: AND
4839: IFFALSE 4928
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
4841: LD_ADDR_VAR 0 1
4845: PUSH
4846: LD_VAR 0 6
4850: PPUSH
4851: LD_INT 3
4853: PUSH
4854: LD_INT 54
4856: PUSH
4857: EMPTY
4858: LIST
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: PPUSH
4864: CALL_OW 72
4868: PUSH
4869: FOR_IN
4870: IFFALSE 4926
// if GetLives ( i ) < 1000 then
4872: LD_VAR 0 1
4876: PPUSH
4877: CALL_OW 256
4881: PUSH
4882: LD_INT 1000
4884: LESS
4885: IFFALSE 4904
// ComMoveXY ( i , 80 , 49 ) else
4887: LD_VAR 0 1
4891: PPUSH
4892: LD_INT 80
4894: PPUSH
4895: LD_INT 49
4897: PPUSH
4898: CALL_OW 111
4902: GO 4924
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
4904: LD_VAR 0 1
4908: PPUSH
4909: LD_INT 86
4911: PPUSH
4912: LD_INT 54
4914: PPUSH
4915: CALL_OW 428
4919: PPUSH
4920: CALL_OW 120
4924: GO 4869
4926: POP
4927: POP
// end ;
4928: PPOPN 10
4930: END
// export function PrepareOmarSquad ; var i , j , p ; begin
4931: LD_INT 0
4933: PPUSH
4934: PPUSH
4935: PPUSH
4936: PPUSH
// uc_side := 5 ;
4937: LD_ADDR_OWVAR 20
4941: PUSH
4942: LD_INT 5
4944: ST_TO_ADDR
// uc_nation := 2 ;
4945: LD_ADDR_OWVAR 21
4949: PUSH
4950: LD_INT 2
4952: ST_TO_ADDR
// omarSquad := [ ] ;
4953: LD_ADDR_EXP 51
4957: PUSH
4958: EMPTY
4959: ST_TO_ADDR
// for i := 1 to 4 do
4960: LD_ADDR_VAR 0 2
4964: PUSH
4965: DOUBLE
4966: LD_INT 1
4968: DEC
4969: ST_TO_ADDR
4970: LD_INT 4
4972: PUSH
4973: FOR_TO
4974: IFFALSE 5097
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
4976: LD_ADDR_VAR 0 3
4980: PUSH
4981: DOUBLE
4982: LD_INT 1
4984: DEC
4985: ST_TO_ADDR
4986: LD_INT 6
4988: PUSH
4989: LD_INT 2
4991: PUSH
4992: LD_INT 2
4994: PUSH
4995: LD_EXP 21
4999: PLUS
5000: PUSH
5001: LD_INT 2
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: PUSH
5010: LD_VAR 0 2
5014: ARRAY
5015: PUSH
5016: FOR_TO
5017: IFFALSE 5093
// begin PrepareHuman ( false , i , 5 ) ;
5019: LD_INT 0
5021: PPUSH
5022: LD_VAR 0 2
5026: PPUSH
5027: LD_INT 5
5029: PPUSH
5030: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
5034: LD_ADDR_EXP 51
5038: PUSH
5039: LD_EXP 51
5043: PPUSH
5044: CALL_OW 44
5048: PPUSH
5049: CALL 66403 0 2
5053: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
5054: LD_VAR 0 2
5058: PUSH
5059: LD_INT 1
5061: EQUAL
5062: PUSH
5063: LD_INT 50
5065: PPUSH
5066: CALL_OW 13
5070: AND
5071: IFFALSE 5091
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
5073: LD_EXP 51
5077: PUSH
5078: LD_EXP 51
5082: ARRAY
5083: PPUSH
5084: LD_INT 8
5086: PPUSH
5087: CALL_OW 336
// end ;
5091: GO 5016
5093: POP
5094: POP
// end ;
5095: GO 4973
5097: POP
5098: POP
// if HexInfo ( 340 , 205 ) then
5099: LD_INT 340
5101: PPUSH
5102: LD_INT 205
5104: PPUSH
5105: CALL_OW 428
5109: IFFALSE 5126
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
5111: LD_INT 340
5113: PPUSH
5114: LD_INT 205
5116: PPUSH
5117: CALL_OW 428
5121: PPUSH
5122: CALL_OW 64
// p := 0 ;
5126: LD_ADDR_VAR 0 4
5130: PUSH
5131: LD_INT 0
5133: ST_TO_ADDR
// for i in omarSquad do
5134: LD_ADDR_VAR 0 2
5138: PUSH
5139: LD_EXP 51
5143: PUSH
5144: FOR_IN
5145: IFFALSE 5346
// begin uc_direction := 4 ;
5147: LD_ADDR_OWVAR 24
5151: PUSH
5152: LD_INT 4
5154: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
5155: LD_VAR 0 2
5159: PPUSH
5160: CALL_OW 257
5164: PUSH
5165: LD_INT 3
5167: EQUAL
5168: PUSH
5169: LD_VAR 0 4
5173: PUSH
5174: LD_INT 2
5176: LESS
5177: AND
5178: IFFALSE 5307
// begin p := p + 1 ;
5180: LD_ADDR_VAR 0 4
5184: PUSH
5185: LD_VAR 0 4
5189: PUSH
5190: LD_INT 1
5192: PLUS
5193: ST_TO_ADDR
// uc_side := 5 ;
5194: LD_ADDR_OWVAR 20
5198: PUSH
5199: LD_INT 5
5201: ST_TO_ADDR
// if rand ( 0 , 1 ) then
5202: LD_INT 0
5204: PPUSH
5205: LD_INT 1
5207: PPUSH
5208: CALL_OW 12
5212: IFFALSE 5243
// begin uc_nation := 2 ;
5214: LD_ADDR_OWVAR 21
5218: PUSH
5219: LD_INT 2
5221: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
5222: LD_INT 13
5224: PPUSH
5225: LD_INT 1
5227: PPUSH
5228: LD_INT 1
5230: PPUSH
5231: LD_INT 27
5233: PPUSH
5234: LD_INT 88
5236: PPUSH
5237: CALL 33978 0 5
// end else
5241: GO 5270
// begin uc_nation := 3 ;
5243: LD_ADDR_OWVAR 21
5247: PUSH
5248: LD_INT 3
5250: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
5251: LD_INT 22
5253: PPUSH
5254: LD_INT 1
5256: PPUSH
5257: LD_INT 1
5259: PPUSH
5260: LD_INT 45
5262: PPUSH
5263: LD_INT 88
5265: PPUSH
5266: CALL 33978 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
5270: CALL_OW 45
5274: PPUSH
5275: LD_INT 13
5277: PPUSH
5278: LD_INT 0
5280: PPUSH
5281: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
5285: LD_VAR 0 2
5289: PPUSH
5290: LD_INT 340
5292: PPUSH
5293: LD_INT 205
5295: PPUSH
5296: CALL_OW 428
5300: PPUSH
5301: CALL_OW 52
// end else
5305: GO 5322
// PlaceUnitArea ( i , southSpawn , false ) ;
5307: LD_VAR 0 2
5311: PPUSH
5312: LD_INT 13
5314: PPUSH
5315: LD_INT 0
5317: PPUSH
5318: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
5322: LD_VAR 0 2
5326: PPUSH
5327: LD_INT 333
5329: PPUSH
5330: LD_INT 210
5332: PPUSH
5333: CALL_OW 111
// wait ( 0 0$2 ) ;
5337: LD_INT 70
5339: PPUSH
5340: CALL_OW 67
// end ;
5344: GO 5144
5346: POP
5347: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
5348: LD_EXP 43
5352: PPUSH
5353: LD_INT 340
5355: PPUSH
5356: LD_INT 205
5358: PPUSH
5359: LD_INT 0
5361: PPUSH
5362: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
5366: LD_EXP 43
5370: PPUSH
5371: LD_INT 333
5373: PPUSH
5374: LD_INT 206
5376: PPUSH
5377: CALL_OW 111
// wait ( 0 0$2 ) ;
5381: LD_INT 70
5383: PPUSH
5384: CALL_OW 67
// ComHold ( omarSquad ) ;
5388: LD_EXP 51
5392: PPUSH
5393: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
5397: LD_EXP 43
5401: PUSH
5402: LD_EXP 51
5406: PPUSH
5407: LD_INT 2
5409: PUSH
5410: LD_INT 25
5412: PUSH
5413: LD_INT 1
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: PUSH
5420: LD_INT 25
5422: PUSH
5423: LD_INT 8
5425: PUSH
5426: EMPTY
5427: LIST
5428: LIST
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: LIST
5434: PPUSH
5435: CALL_OW 72
5439: UNION
5440: PUSH
5441: LD_INT 22
5443: PUSH
5444: LD_INT 5
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: PUSH
5451: LD_INT 21
5453: PUSH
5454: LD_INT 2
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PPUSH
5465: CALL_OW 69
5469: UNION
5470: PPUSH
5471: LD_INT 315
5473: PPUSH
5474: LD_INT 214
5476: PPUSH
5477: CALL_OW 114
// wait ( 0 0$22 ) ;
5481: LD_INT 770
5483: PPUSH
5484: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
5488: LD_EXP 51
5492: PUSH
5493: LD_EXP 43
5497: UNION
5498: PPUSH
5499: LD_INT 329
5501: PPUSH
5502: LD_INT 231
5504: PPUSH
5505: CALL_OW 114
// end ;
5509: LD_VAR 0 1
5513: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
5514: LD_EXP 10
5518: IFFALSE 6601
5520: GO 5522
5522: DISABLE
5523: LD_INT 0
5525: PPUSH
5526: PPUSH
5527: PPUSH
5528: PPUSH
5529: PPUSH
5530: PPUSH
5531: PPUSH
5532: PPUSH
5533: PPUSH
5534: PPUSH
5535: PPUSH
// begin enable ;
5536: ENABLE
// if not omarSquad then
5537: LD_EXP 51
5541: NOT
5542: IFFALSE 5546
// exit ;
5544: GO 6601
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
5546: LD_ADDR_VAR 0 10
5550: PUSH
5551: LD_INT 14
5553: PPUSH
5554: LD_INT 81
5556: PUSH
5557: LD_INT 5
5559: PUSH
5560: EMPTY
5561: LIST
5562: LIST
5563: PPUSH
5564: CALL_OW 70
5568: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
5569: LD_ADDR_VAR 0 6
5573: PUSH
5574: LD_EXP 51
5578: PPUSH
5579: LD_INT 2
5581: PUSH
5582: LD_INT 25
5584: PUSH
5585: LD_INT 1
5587: PUSH
5588: EMPTY
5589: LIST
5590: LIST
5591: PUSH
5592: LD_INT 25
5594: PUSH
5595: LD_INT 8
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: LIST
5606: PPUSH
5607: CALL_OW 72
5611: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
5612: LD_ADDR_VAR 0 7
5616: PUSH
5617: LD_EXP 51
5621: PPUSH
5622: LD_INT 25
5624: PUSH
5625: LD_INT 2
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: PPUSH
5632: CALL_OW 72
5636: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
5637: LD_ADDR_VAR 0 9
5641: PUSH
5642: LD_EXP 51
5646: PPUSH
5647: LD_INT 25
5649: PUSH
5650: LD_INT 3
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: PPUSH
5657: CALL_OW 72
5661: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
5662: LD_ADDR_VAR 0 8
5666: PUSH
5667: LD_EXP 51
5671: PPUSH
5672: LD_INT 25
5674: PUSH
5675: LD_INT 4
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PPUSH
5682: CALL_OW 72
5686: ST_TO_ADDR
// if sol then
5687: LD_VAR 0 6
5691: IFFALSE 6055
// for i in sol do
5693: LD_ADDR_VAR 0 1
5697: PUSH
5698: LD_VAR 0 6
5702: PUSH
5703: FOR_IN
5704: IFFALSE 6053
// if not HasTask ( i ) then
5706: LD_VAR 0 1
5710: PPUSH
5711: CALL_OW 314
5715: NOT
5716: IFFALSE 6051
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
5718: LD_VAR 0 1
5722: PPUSH
5723: CALL_OW 310
5727: NOT
5728: PUSH
5729: LD_VAR 0 1
5733: PPUSH
5734: CALL_OW 256
5738: PUSH
5739: LD_INT 500
5741: LESS
5742: AND
5743: PUSH
5744: LD_VAR 0 1
5748: PPUSH
5749: LD_INT 333
5751: PPUSH
5752: LD_INT 234
5754: PPUSH
5755: CALL_OW 297
5759: PUSH
5760: LD_INT 6
5762: GREATER
5763: AND
5764: IFFALSE 5783
// begin ComMoveXY ( i , 333 , 234 ) ;
5766: LD_VAR 0 1
5770: PPUSH
5771: LD_INT 333
5773: PPUSH
5774: LD_INT 234
5776: PPUSH
5777: CALL_OW 111
// continue ;
5781: GO 5703
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
5783: LD_ADDR_VAR 0 5
5787: PUSH
5788: LD_INT 22
5790: PUSH
5791: LD_INT 5
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: PUSH
5798: LD_INT 58
5800: PUSH
5801: EMPTY
5802: LIST
5803: PUSH
5804: LD_INT 50
5806: PUSH
5807: EMPTY
5808: LIST
5809: PUSH
5810: LD_INT 2
5812: PUSH
5813: LD_INT 30
5815: PUSH
5816: LD_INT 32
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PUSH
5823: LD_INT 30
5825: PUSH
5826: LD_INT 31
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: LIST
5837: PUSH
5838: EMPTY
5839: LIST
5840: LIST
5841: LIST
5842: LIST
5843: PPUSH
5844: CALL_OW 69
5848: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
5849: LD_VAR 0 5
5853: PUSH
5854: LD_VAR 0 1
5858: PPUSH
5859: CALL_OW 310
5863: PPUSH
5864: CALL_OW 266
5868: PUSH
5869: LD_INT 31
5871: NONEQUAL
5872: AND
5873: IFFALSE 5955
// begin for j in tmp do
5875: LD_ADDR_VAR 0 2
5879: PUSH
5880: LD_VAR 0 5
5884: PUSH
5885: FOR_IN
5886: IFFALSE 5951
// if GetTag ( j ) <> 1 then
5888: LD_VAR 0 2
5892: PPUSH
5893: CALL_OW 110
5897: PUSH
5898: LD_INT 1
5900: NONEQUAL
5901: IFFALSE 5949
// begin SetTag ( j , 1 ) ;
5903: LD_VAR 0 2
5907: PPUSH
5908: LD_INT 1
5910: PPUSH
5911: CALL_OW 109
// if IsInUnit ( i ) then
5915: LD_VAR 0 1
5919: PPUSH
5920: CALL_OW 310
5924: IFFALSE 5935
// ComExit ( i ) ;
5926: LD_VAR 0 1
5930: PPUSH
5931: CALL 66801 0 1
// AddComEnterUnit ( i , j ) ;
5935: LD_VAR 0 1
5939: PPUSH
5940: LD_VAR 0 2
5944: PPUSH
5945: CALL_OW 180
// end ;
5949: GO 5885
5951: POP
5952: POP
// end else
5953: GO 6051
// if not IsInUnit ( i ) then
5955: LD_VAR 0 1
5959: PPUSH
5960: CALL_OW 310
5964: NOT
5965: IFFALSE 6051
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
5967: LD_ADDR_VAR 0 5
5971: PUSH
5972: LD_INT 22
5974: PUSH
5975: LD_INT 5
5977: PUSH
5978: EMPTY
5979: LIST
5980: LIST
5981: PUSH
5982: LD_INT 50
5984: PUSH
5985: EMPTY
5986: LIST
5987: PUSH
5988: LD_INT 30
5990: PUSH
5991: LD_INT 4
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PUSH
5998: EMPTY
5999: LIST
6000: LIST
6001: LIST
6002: PPUSH
6003: CALL_OW 69
6007: ST_TO_ADDR
// if tmp then
6008: LD_VAR 0 5
6012: IFFALSE 6051
// if UnitsInside ( tmp [ 1 ] ) < 6 then
6014: LD_VAR 0 5
6018: PUSH
6019: LD_INT 1
6021: ARRAY
6022: PPUSH
6023: CALL_OW 313
6027: PUSH
6028: LD_INT 6
6030: LESS
6031: IFFALSE 6051
// ComEnterUnit ( i , tmp [ 1 ] ) ;
6033: LD_VAR 0 1
6037: PPUSH
6038: LD_VAR 0 5
6042: PUSH
6043: LD_INT 1
6045: ARRAY
6046: PPUSH
6047: CALL_OW 120
// end ; end ;
6051: GO 5703
6053: POP
6054: POP
// if sci then
6055: LD_VAR 0 8
6059: IFFALSE 6114
// for i in sci do
6061: LD_ADDR_VAR 0 1
6065: PUSH
6066: LD_VAR 0 8
6070: PUSH
6071: FOR_IN
6072: IFFALSE 6112
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
6074: LD_VAR 0 1
6078: PPUSH
6079: LD_INT 333
6081: PPUSH
6082: LD_INT 234
6084: PPUSH
6085: CALL_OW 297
6089: PUSH
6090: LD_INT 9
6092: GREATER
6093: IFFALSE 6110
// ComMoveXY ( i , 333 , 234 ) ;
6095: LD_VAR 0 1
6099: PPUSH
6100: LD_INT 333
6102: PPUSH
6103: LD_INT 234
6105: PPUSH
6106: CALL_OW 111
// end ;
6110: GO 6071
6112: POP
6113: POP
// if mech then
6114: LD_VAR 0 9
6118: IFFALSE 6323
// for i in mech do
6120: LD_ADDR_VAR 0 1
6124: PUSH
6125: LD_VAR 0 9
6129: PUSH
6130: FOR_IN
6131: IFFALSE 6321
// begin hasVehicle := IsInUnit ( i ) ;
6133: LD_ADDR_VAR 0 11
6137: PUSH
6138: LD_VAR 0 1
6142: PPUSH
6143: CALL_OW 310
6147: ST_TO_ADDR
// if enemyInBase then
6148: LD_VAR 0 10
6152: IFFALSE 6239
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
6154: LD_VAR 0 11
6158: PUSH
6159: LD_VAR 0 11
6163: PPUSH
6164: CALL_OW 256
6168: PUSH
6169: LD_INT 500
6171: GREATER
6172: AND
6173: IFFALSE 6201
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
6175: LD_VAR 0 11
6179: PPUSH
6180: LD_VAR 0 10
6184: PPUSH
6185: LD_VAR 0 11
6189: PPUSH
6190: CALL_OW 74
6194: PPUSH
6195: CALL_OW 115
6199: GO 6237
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
6201: LD_VAR 0 11
6205: PPUSH
6206: LD_INT 333
6208: PPUSH
6209: LD_INT 234
6211: PPUSH
6212: CALL_OW 297
6216: PUSH
6217: LD_INT 6
6219: GREATER
6220: IFFALSE 6237
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
6222: LD_VAR 0 11
6226: PPUSH
6227: LD_INT 333
6229: PPUSH
6230: LD_INT 234
6232: PPUSH
6233: CALL_OW 111
// end else
6237: GO 6319
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
6239: LD_VAR 0 1
6243: PPUSH
6244: LD_INT 333
6246: PPUSH
6247: LD_INT 234
6249: PPUSH
6250: CALL_OW 297
6254: PUSH
6255: LD_INT 6
6257: GREATER
6258: IFFALSE 6277
// ComMoveXY ( i , 333 , 234 ) else
6260: LD_VAR 0 1
6264: PPUSH
6265: LD_INT 333
6267: PPUSH
6268: LD_INT 234
6270: PPUSH
6271: CALL_OW 111
6275: GO 6319
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
6277: LD_VAR 0 11
6281: PUSH
6282: LD_VAR 0 11
6286: PPUSH
6287: CALL_OW 256
6291: PUSH
6292: LD_INT 1000
6294: LESS
6295: AND
6296: IFFALSE 6319
// begin SetFuel ( hasVehicle , 100 ) ;
6298: LD_VAR 0 11
6302: PPUSH
6303: LD_INT 100
6305: PPUSH
6306: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
6310: LD_VAR 0 1
6314: PPUSH
6315: CALL 68103 0 1
// end ; end ; end ;
6319: GO 6130
6321: POP
6322: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6323: LD_ADDR_VAR 0 5
6327: PUSH
6328: LD_INT 14
6330: PPUSH
6331: LD_INT 3
6333: PUSH
6334: LD_INT 24
6336: PUSH
6337: LD_INT 1000
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PUSH
6348: LD_INT 21
6350: PUSH
6351: LD_INT 3
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: PPUSH
6362: CALL_OW 70
6366: ST_TO_ADDR
// if tmp and eng then
6367: LD_VAR 0 5
6371: PUSH
6372: LD_VAR 0 7
6376: AND
6377: IFFALSE 6483
// begin for i in eng do
6379: LD_ADDR_VAR 0 1
6383: PUSH
6384: LD_VAR 0 7
6388: PUSH
6389: FOR_IN
6390: IFFALSE 6481
// if IsInUnit ( i ) then
6392: LD_VAR 0 1
6396: PPUSH
6397: CALL_OW 310
6401: IFFALSE 6414
// ComExitBuilding ( i ) else
6403: LD_VAR 0 1
6407: PPUSH
6408: CALL_OW 122
6412: GO 6479
// if GetLives ( i ) = 1000 then
6414: LD_VAR 0 1
6418: PPUSH
6419: CALL_OW 256
6423: PUSH
6424: LD_INT 1000
6426: EQUAL
6427: IFFALSE 6449
// ComRepairBuilding ( i , tmp [ 1 ] ) else
6429: LD_VAR 0 1
6433: PPUSH
6434: LD_VAR 0 5
6438: PUSH
6439: LD_INT 1
6441: ARRAY
6442: PPUSH
6443: CALL_OW 130
6447: GO 6479
// if GetLives ( i ) < 700 then
6449: LD_VAR 0 1
6453: PPUSH
6454: CALL_OW 256
6458: PUSH
6459: LD_INT 700
6461: LESS
6462: IFFALSE 6479
// ComMoveXY ( i , 333 , 234 ) ;
6464: LD_VAR 0 1
6468: PPUSH
6469: LD_INT 333
6471: PPUSH
6472: LD_INT 234
6474: PPUSH
6475: CALL_OW 111
6479: GO 6389
6481: POP
6482: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
6483: LD_VAR 0 5
6487: NOT
6488: PUSH
6489: LD_VAR 0 7
6493: PPUSH
6494: LD_INT 3
6496: PUSH
6497: LD_INT 54
6499: PUSH
6500: EMPTY
6501: LIST
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: PPUSH
6507: CALL_OW 72
6511: AND
6512: IFFALSE 6601
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
6514: LD_ADDR_VAR 0 1
6518: PUSH
6519: LD_VAR 0 7
6523: PPUSH
6524: LD_INT 3
6526: PUSH
6527: LD_INT 54
6529: PUSH
6530: EMPTY
6531: LIST
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: PPUSH
6537: CALL_OW 72
6541: PUSH
6542: FOR_IN
6543: IFFALSE 6599
// if GetLives ( i ) < 1000 then
6545: LD_VAR 0 1
6549: PPUSH
6550: CALL_OW 256
6554: PUSH
6555: LD_INT 1000
6557: LESS
6558: IFFALSE 6577
// ComMoveXY ( i , 333 , 234 ) else
6560: LD_VAR 0 1
6564: PPUSH
6565: LD_INT 333
6567: PPUSH
6568: LD_INT 234
6570: PPUSH
6571: CALL_OW 111
6575: GO 6597
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
6577: LD_VAR 0 1
6581: PPUSH
6582: LD_INT 341
6584: PPUSH
6585: LD_INT 232
6587: PPUSH
6588: CALL_OW 428
6592: PPUSH
6593: CALL_OW 120
6597: GO 6542
6599: POP
6600: POP
// end ;
6601: PPOPN 11
6603: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
6604: LD_EXP 43
6608: PPUSH
6609: CALL_OW 256
6613: PUSH
6614: LD_INT 1000
6616: LESS
6617: IFFALSE 6635
6619: GO 6621
6621: DISABLE
// begin enable ;
6622: ENABLE
// SetLives ( Omar , 1000 ) ;
6623: LD_EXP 43
6627: PPUSH
6628: LD_INT 1000
6630: PPUSH
6631: CALL_OW 234
// end ;
6635: END
// every 0 0$1 trigger GetLives ( Rolf ) < 1000 and rolfAttack do
6636: LD_EXP 46
6640: PPUSH
6641: CALL_OW 256
6645: PUSH
6646: LD_INT 1000
6648: LESS
6649: PUSH
6650: LD_EXP 32
6654: AND
6655: IFFALSE 6673
6657: GO 6659
6659: DISABLE
// begin enable ;
6660: ENABLE
// SetLives ( Rolf , 1000 ) ;
6661: LD_EXP 46
6665: PPUSH
6666: LD_INT 1000
6668: PPUSH
6669: CALL_OW 234
// end ;
6673: END
// every 0 0$1 trigger rolfAttack do var i , tmp , mech , path , tag , rolfCoords ;
6674: LD_EXP 32
6678: IFFALSE 7341
6680: GO 6682
6682: DISABLE
6683: LD_INT 0
6685: PPUSH
6686: PPUSH
6687: PPUSH
6688: PPUSH
6689: PPUSH
6690: PPUSH
// begin path := [ [ 215 , 162 ] , [ 195 , 163 ] , [ 174 , 162 ] , [ 145 , 163 ] , [ 127 , 163 ] ] ;
6691: LD_ADDR_VAR 0 4
6695: PUSH
6696: LD_INT 215
6698: PUSH
6699: LD_INT 162
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: PUSH
6706: LD_INT 195
6708: PUSH
6709: LD_INT 163
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: LD_INT 174
6718: PUSH
6719: LD_INT 162
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: PUSH
6726: LD_INT 145
6728: PUSH
6729: LD_INT 163
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: PUSH
6736: LD_INT 127
6738: PUSH
6739: LD_INT 163
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: ST_TO_ADDR
// rolfCoords := [ 221 , 161 ] ;
6753: LD_ADDR_VAR 0 6
6757: PUSH
6758: LD_INT 221
6760: PUSH
6761: LD_INT 161
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: ST_TO_ADDR
// tmp := Rolf union rolfSquad ;
6768: LD_ADDR_VAR 0 2
6772: PUSH
6773: LD_EXP 46
6777: PUSH
6778: LD_EXP 50
6782: UNION
6783: ST_TO_ADDR
// if not tmp then
6784: LD_VAR 0 2
6788: NOT
6789: IFFALSE 6793
// exit ;
6791: GO 7341
// ComMoveXY ( tmp , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
6793: LD_VAR 0 2
6797: PPUSH
6798: LD_VAR 0 6
6802: PUSH
6803: LD_INT 1
6805: ARRAY
6806: PPUSH
6807: LD_VAR 0 6
6811: PUSH
6812: LD_INT 2
6814: ARRAY
6815: PPUSH
6816: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6820: LD_INT 35
6822: PPUSH
6823: CALL_OW 67
// tmp := UnitFilter ( rolfSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
6827: LD_ADDR_VAR 0 2
6831: PUSH
6832: LD_EXP 50
6836: PPUSH
6837: LD_INT 2
6839: PUSH
6840: LD_INT 25
6842: PUSH
6843: LD_INT 1
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PUSH
6850: LD_INT 25
6852: PUSH
6853: LD_INT 8
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: LIST
6864: PPUSH
6865: CALL_OW 72
6869: ST_TO_ADDR
// if tmp then
6870: LD_VAR 0 2
6874: IFFALSE 7027
// begin for i in tmp do
6876: LD_ADDR_VAR 0 1
6880: PUSH
6881: LD_VAR 0 2
6885: PUSH
6886: FOR_IN
6887: IFFALSE 7025
// begin tag := GetTag ( i ) ;
6889: LD_ADDR_VAR 0 5
6893: PUSH
6894: LD_VAR 0 1
6898: PPUSH
6899: CALL_OW 110
6903: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
6904: LD_VAR 0 1
6908: PPUSH
6909: CALL_OW 256
6913: PUSH
6914: LD_INT 800
6916: LESS
6917: PUSH
6918: LD_VAR 0 5
6922: PUSH
6923: LD_INT 101
6925: LESS
6926: AND
6927: IFFALSE 6970
// begin SetTag ( i , 101 ) ;
6929: LD_VAR 0 1
6933: PPUSH
6934: LD_INT 101
6936: PPUSH
6937: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
6941: LD_VAR 0 1
6945: PPUSH
6946: LD_VAR 0 6
6950: PUSH
6951: LD_INT 1
6953: ARRAY
6954: PPUSH
6955: LD_VAR 0 6
6959: PUSH
6960: LD_INT 2
6962: ARRAY
6963: PPUSH
6964: CALL_OW 111
// end else
6968: GO 7023
// if tag = 101 then
6970: LD_VAR 0 5
6974: PUSH
6975: LD_INT 101
6977: EQUAL
6978: IFFALSE 7009
// begin if GetLives ( i ) = 1000 then
6980: LD_VAR 0 1
6984: PPUSH
6985: CALL_OW 256
6989: PUSH
6990: LD_INT 1000
6992: EQUAL
6993: IFFALSE 7007
// SetTag ( i , 0 ) ;
6995: LD_VAR 0 1
6999: PPUSH
7000: LD_INT 0
7002: PPUSH
7003: CALL_OW 109
// end else
7007: GO 7023
// AgressiveMove ( i , path ) ;
7009: LD_VAR 0 1
7013: PPUSH
7014: LD_VAR 0 4
7018: PPUSH
7019: CALL 69007 0 2
// end ;
7023: GO 6886
7025: POP
7026: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
7027: LD_ADDR_VAR 0 2
7031: PUSH
7032: LD_INT 22
7034: PUSH
7035: LD_INT 8
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: PUSH
7042: LD_INT 21
7044: PUSH
7045: LD_INT 2
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: PUSH
7052: LD_INT 3
7054: PUSH
7055: LD_INT 34
7057: PUSH
7058: LD_INT 32
7060: PUSH
7061: EMPTY
7062: LIST
7063: LIST
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: PUSH
7069: EMPTY
7070: LIST
7071: LIST
7072: LIST
7073: PPUSH
7074: CALL_OW 69
7078: ST_TO_ADDR
// if not tmp then
7079: LD_VAR 0 2
7083: NOT
7084: IFFALSE 7088
// continue ;
7086: GO 6820
// for i in tmp do
7088: LD_ADDR_VAR 0 1
7092: PUSH
7093: LD_VAR 0 2
7097: PUSH
7098: FOR_IN
7099: IFFALSE 7332
// begin mech := IsDrivenBy ( i ) ;
7101: LD_ADDR_VAR 0 3
7105: PUSH
7106: LD_VAR 0 1
7110: PPUSH
7111: CALL_OW 311
7115: ST_TO_ADDR
// if not mech then
7116: LD_VAR 0 3
7120: NOT
7121: IFFALSE 7125
// continue ;
7123: GO 7098
// tag := GetTag ( i ) ;
7125: LD_ADDR_VAR 0 5
7129: PUSH
7130: LD_VAR 0 1
7134: PPUSH
7135: CALL_OW 110
7139: ST_TO_ADDR
// if GetLives ( i ) >= 600 and tag < 101 then
7140: LD_VAR 0 1
7144: PPUSH
7145: CALL_OW 256
7149: PUSH
7150: LD_INT 600
7152: GREATEREQUAL
7153: PUSH
7154: LD_VAR 0 5
7158: PUSH
7159: LD_INT 101
7161: LESS
7162: AND
7163: IFFALSE 7179
// AgressiveMove ( i , path ) ;
7165: LD_VAR 0 1
7169: PPUSH
7170: LD_VAR 0 4
7174: PPUSH
7175: CALL 69007 0 2
// if GetLives ( i ) < 600 and tag < 101 then
7179: LD_VAR 0 1
7183: PPUSH
7184: CALL_OW 256
7188: PUSH
7189: LD_INT 600
7191: LESS
7192: PUSH
7193: LD_VAR 0 5
7197: PUSH
7198: LD_INT 101
7200: LESS
7201: AND
7202: IFFALSE 7243
// begin SetTag ( i , 101 ) ;
7204: LD_VAR 0 1
7208: PPUSH
7209: LD_INT 101
7211: PPUSH
7212: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7216: LD_VAR 0 1
7220: PPUSH
7221: LD_VAR 0 6
7225: PUSH
7226: LD_INT 1
7228: ARRAY
7229: PPUSH
7230: LD_VAR 0 6
7234: PUSH
7235: LD_INT 2
7237: ARRAY
7238: PPUSH
7239: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) < 9 and mech then
7243: LD_VAR 0 5
7247: PUSH
7248: LD_INT 101
7250: EQUAL
7251: PUSH
7252: LD_VAR 0 1
7256: PPUSH
7257: LD_VAR 0 6
7261: PUSH
7262: LD_INT 1
7264: ARRAY
7265: PPUSH
7266: LD_VAR 0 6
7270: PUSH
7271: LD_INT 2
7273: ARRAY
7274: PPUSH
7275: CALL_OW 297
7279: PUSH
7280: LD_INT 9
7282: LESS
7283: AND
7284: PUSH
7285: LD_VAR 0 3
7289: AND
7290: IFFALSE 7330
// begin if GetLives ( i ) < 1000 then
7292: LD_VAR 0 1
7296: PPUSH
7297: CALL_OW 256
7301: PUSH
7302: LD_INT 1000
7304: LESS
7305: IFFALSE 7318
// AddComRepairVehicleAndReturn ( mech ) else
7307: LD_VAR 0 3
7311: PPUSH
7312: CALL 68223 0 1
7316: GO 7330
// SetTag ( i , 0 ) ;
7318: LD_VAR 0 1
7322: PPUSH
7323: LD_INT 0
7325: PPUSH
7326: CALL_OW 109
// end ; end ;
7330: GO 7098
7332: POP
7333: POP
// until not tmp ;
7334: LD_VAR 0 2
7338: NOT
7339: IFFALSE 6820
// end ;
7341: PPOPN 6
7343: END
// every 0 0$1 trigger omarAttack do var i , cargo , tmp , tag , mech , x , path , omarAttackCoords ;
7344: LD_EXP 23
7348: IFFALSE 8576
7350: GO 7352
7352: DISABLE
7353: LD_INT 0
7355: PPUSH
7356: PPUSH
7357: PPUSH
7358: PPUSH
7359: PPUSH
7360: PPUSH
7361: PPUSH
7362: PPUSH
// begin path := [ [ 209 , 221 ] , [ 190 , 220 ] , [ 177 , 220 ] , [ 168 , 223 ] , [ 150 , 206 ] ] ;
7363: LD_ADDR_VAR 0 7
7367: PUSH
7368: LD_INT 209
7370: PUSH
7371: LD_INT 221
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: PUSH
7378: LD_INT 190
7380: PUSH
7381: LD_INT 220
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: PUSH
7388: LD_INT 177
7390: PUSH
7391: LD_INT 220
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: PUSH
7398: LD_INT 168
7400: PUSH
7401: LD_INT 223
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: PUSH
7408: LD_INT 150
7410: PUSH
7411: LD_INT 206
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: LIST
7424: ST_TO_ADDR
// omarAttackCoords := [ 219 , 225 , 0 ] ;
7425: LD_ADDR_VAR 0 8
7429: PUSH
7430: LD_INT 219
7432: PUSH
7433: LD_INT 225
7435: PUSH
7436: LD_INT 0
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: LIST
7443: ST_TO_ADDR
// for i := 1 to 2 do
7444: LD_ADDR_VAR 0 1
7448: PUSH
7449: DOUBLE
7450: LD_INT 1
7452: DEC
7453: ST_TO_ADDR
7454: LD_INT 2
7456: PUSH
7457: FOR_TO
7458: IFFALSE 7607
// begin uc_side := 5 ;
7460: LD_ADDR_OWVAR 20
7464: PUSH
7465: LD_INT 5
7467: ST_TO_ADDR
// uc_nation := 2 ;
7468: LD_ADDR_OWVAR 21
7472: PUSH
7473: LD_INT 2
7475: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
7476: LD_INT 14
7478: PPUSH
7479: LD_INT 1
7481: PPUSH
7482: LD_INT 1
7484: PPUSH
7485: LD_INT 32
7487: PPUSH
7488: LD_INT 80
7490: PPUSH
7491: CALL 33978 0 5
// cargo := Join ( cargo , CreateVehicle ) ;
7495: LD_ADDR_VAR 0 2
7499: PUSH
7500: LD_VAR 0 2
7504: PPUSH
7505: CALL_OW 45
7509: PPUSH
7510: CALL 66403 0 2
7514: ST_TO_ADDR
// SetDir ( cargo [ i ] , 4 ) ;
7515: LD_VAR 0 2
7519: PUSH
7520: LD_VAR 0 1
7524: ARRAY
7525: PPUSH
7526: LD_INT 4
7528: PPUSH
7529: CALL_OW 233
// PlaceUnitArea ( cargo [ i ] , omarVehiclesArea , false ) ;
7533: LD_VAR 0 2
7537: PUSH
7538: LD_VAR 0 1
7542: ARRAY
7543: PPUSH
7544: LD_INT 16
7546: PPUSH
7547: LD_INT 0
7549: PPUSH
7550: CALL_OW 49
// PrepareMechanic ( false , 4 ) ;
7554: LD_INT 0
7556: PPUSH
7557: LD_INT 4
7559: PPUSH
7560: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo [ i ] ) ;
7564: CALL_OW 44
7568: PPUSH
7569: LD_VAR 0 2
7573: PUSH
7574: LD_VAR 0 1
7578: ARRAY
7579: PPUSH
7580: CALL_OW 52
// ComMoveXY ( cargo [ i ] , 337 , 232 ) ;
7584: LD_VAR 0 2
7588: PUSH
7589: LD_VAR 0 1
7593: ARRAY
7594: PPUSH
7595: LD_INT 337
7597: PPUSH
7598: LD_INT 232
7600: PPUSH
7601: CALL_OW 111
// end ;
7605: GO 7457
7607: POP
7608: POP
// wait ( 0 0$25 ) ;
7609: LD_INT 875
7611: PPUSH
7612: CALL_OW 67
// for i := 1 to 2 do
7616: LD_ADDR_VAR 0 1
7620: PUSH
7621: DOUBLE
7622: LD_INT 1
7624: DEC
7625: ST_TO_ADDR
7626: LD_INT 2
7628: PUSH
7629: FOR_TO
7630: IFFALSE 7655
// SetCargo ( cargo [ i ] , mat_oil , 100 ) ;
7632: LD_VAR 0 2
7636: PUSH
7637: LD_VAR 0 1
7641: ARRAY
7642: PPUSH
7643: LD_INT 2
7645: PPUSH
7646: LD_INT 100
7648: PPUSH
7649: CALL_OW 290
7653: GO 7629
7655: POP
7656: POP
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
7657: LD_EXP 51
7661: PPUSH
7662: LD_INT 2
7664: PUSH
7665: LD_INT 25
7667: PUSH
7668: LD_INT 1
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: PUSH
7675: LD_INT 25
7677: PUSH
7678: LD_INT 8
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: LIST
7689: PPUSH
7690: CALL_OW 72
7694: PPUSH
7695: CALL_OW 122
// wait ( 0 0$3 ) ;
7699: LD_INT 105
7701: PPUSH
7702: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
7706: LD_EXP 51
7710: PUSH
7711: LD_EXP 43
7715: UNION
7716: PPUSH
7717: LD_VAR 0 8
7721: PUSH
7722: LD_INT 1
7724: ARRAY
7725: PPUSH
7726: LD_VAR 0 8
7730: PUSH
7731: LD_INT 2
7733: ARRAY
7734: PPUSH
7735: CALL_OW 174
// wait ( 0 0$3 ) ;
7739: LD_INT 105
7741: PPUSH
7742: CALL_OW 67
// AddComMoveXY ( cargo , 218 , 217 ) ;
7746: LD_VAR 0 2
7750: PPUSH
7751: LD_INT 218
7753: PPUSH
7754: LD_INT 217
7756: PPUSH
7757: CALL_OW 171
// wait ( 1 1$00 ) ;
7761: LD_INT 2100
7763: PPUSH
7764: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7768: LD_INT 35
7770: PPUSH
7771: CALL_OW 67
// if omarAttackCoords [ 3 ] = 0 then
7775: LD_VAR 0 8
7779: PUSH
7780: LD_INT 3
7782: ARRAY
7783: PUSH
7784: LD_INT 0
7786: EQUAL
7787: IFFALSE 7892
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 168 , 229 , 12 ] ] ) = 0 then
7789: LD_INT 22
7791: PUSH
7792: LD_INT 3
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: PUSH
7799: LD_INT 92
7801: PUSH
7802: LD_INT 168
7804: PUSH
7805: LD_INT 229
7807: PUSH
7808: LD_INT 12
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PPUSH
7821: CALL_OW 69
7825: PUSH
7826: LD_INT 0
7828: EQUAL
7829: IFFALSE 7892
// begin omarAttackCoords := [ 167 , 222 , 1 ] ;
7831: LD_ADDR_VAR 0 8
7835: PUSH
7836: LD_INT 167
7838: PUSH
7839: LD_INT 222
7841: PUSH
7842: LD_INT 1
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: LIST
7849: ST_TO_ADDR
// AddComMoveXY ( Omar ^ cargo ^ UnitFilter ( omarSquad , [ f_class , 4 ] ) , 167 , 222 ) ;
7850: LD_EXP 43
7854: PUSH
7855: LD_VAR 0 2
7859: ADD
7860: PUSH
7861: LD_EXP 51
7865: PPUSH
7866: LD_INT 25
7868: PUSH
7869: LD_INT 4
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: PPUSH
7876: CALL_OW 72
7880: ADD
7881: PPUSH
7882: LD_INT 167
7884: PPUSH
7885: LD_INT 222
7887: PPUSH
7888: CALL_OW 171
// end ; tmp := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
7892: LD_ADDR_VAR 0 3
7896: PUSH
7897: LD_EXP 51
7901: PPUSH
7902: LD_INT 2
7904: PUSH
7905: LD_INT 25
7907: PUSH
7908: LD_INT 1
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: LD_INT 25
7917: PUSH
7918: LD_INT 8
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: LIST
7929: PPUSH
7930: CALL_OW 72
7934: ST_TO_ADDR
// if tmp then
7935: LD_VAR 0 3
7939: IFFALSE 8092
// begin for i in tmp do
7941: LD_ADDR_VAR 0 1
7945: PUSH
7946: LD_VAR 0 3
7950: PUSH
7951: FOR_IN
7952: IFFALSE 8090
// begin tag := GetTag ( i ) ;
7954: LD_ADDR_VAR 0 4
7958: PUSH
7959: LD_VAR 0 1
7963: PPUSH
7964: CALL_OW 110
7968: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
7969: LD_VAR 0 1
7973: PPUSH
7974: CALL_OW 256
7978: PUSH
7979: LD_INT 800
7981: LESS
7982: PUSH
7983: LD_VAR 0 4
7987: PUSH
7988: LD_INT 101
7990: LESS
7991: AND
7992: IFFALSE 8035
// begin SetTag ( i , 101 ) ;
7994: LD_VAR 0 1
7998: PPUSH
7999: LD_INT 101
8001: PPUSH
8002: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8006: LD_VAR 0 1
8010: PPUSH
8011: LD_VAR 0 8
8015: PUSH
8016: LD_INT 1
8018: ARRAY
8019: PPUSH
8020: LD_VAR 0 8
8024: PUSH
8025: LD_INT 2
8027: ARRAY
8028: PPUSH
8029: CALL_OW 111
// end else
8033: GO 8088
// if tag = 101 then
8035: LD_VAR 0 4
8039: PUSH
8040: LD_INT 101
8042: EQUAL
8043: IFFALSE 8074
// begin if GetLives ( i ) = 1000 then
8045: LD_VAR 0 1
8049: PPUSH
8050: CALL_OW 256
8054: PUSH
8055: LD_INT 1000
8057: EQUAL
8058: IFFALSE 8072
// SetTag ( i , 0 ) ;
8060: LD_VAR 0 1
8064: PPUSH
8065: LD_INT 0
8067: PPUSH
8068: CALL_OW 109
// end else
8072: GO 8088
// AgressiveMove ( i , path ) ;
8074: LD_VAR 0 1
8078: PPUSH
8079: LD_VAR 0 7
8083: PPUSH
8084: CALL 69007 0 2
// end ;
8088: GO 7951
8090: POP
8091: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
8092: LD_ADDR_VAR 0 3
8096: PUSH
8097: LD_INT 22
8099: PUSH
8100: LD_INT 5
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: PUSH
8107: LD_INT 21
8109: PUSH
8110: LD_INT 2
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: PUSH
8117: LD_INT 3
8119: PUSH
8120: LD_INT 34
8122: PUSH
8123: LD_INT 32
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: LIST
8138: PPUSH
8139: CALL_OW 69
8143: ST_TO_ADDR
// if not tmp then
8144: LD_VAR 0 3
8148: NOT
8149: IFFALSE 8153
// continue ;
8151: GO 7768
// for i in tmp do
8153: LD_ADDR_VAR 0 1
8157: PUSH
8158: LD_VAR 0 3
8162: PUSH
8163: FOR_IN
8164: IFFALSE 8567
// begin mech := IsDrivenBy ( i ) ;
8166: LD_ADDR_VAR 0 5
8170: PUSH
8171: LD_VAR 0 1
8175: PPUSH
8176: CALL_OW 311
8180: ST_TO_ADDR
// if not mech then
8181: LD_VAR 0 5
8185: NOT
8186: IFFALSE 8190
// continue ;
8188: GO 8163
// tag := GetTag ( i ) ;
8190: LD_ADDR_VAR 0 4
8194: PUSH
8195: LD_VAR 0 1
8199: PPUSH
8200: CALL_OW 110
8204: ST_TO_ADDR
// if GetFuel ( i ) > 90 and tag = 102 then
8205: LD_VAR 0 1
8209: PPUSH
8210: CALL_OW 261
8214: PUSH
8215: LD_INT 90
8217: GREATER
8218: PUSH
8219: LD_VAR 0 4
8223: PUSH
8224: LD_INT 102
8226: EQUAL
8227: AND
8228: IFFALSE 8244
// SetTag ( i , 0 ) else
8230: LD_VAR 0 1
8234: PPUSH
8235: LD_INT 0
8237: PPUSH
8238: CALL_OW 109
8242: GO 8340
// if GetTag ( i ) = 102 then
8244: LD_VAR 0 1
8248: PPUSH
8249: CALL_OW 110
8253: PUSH
8254: LD_INT 102
8256: EQUAL
8257: IFFALSE 8340
// begin x := rand ( 1 , 2 ) ;
8259: LD_ADDR_VAR 0 6
8263: PUSH
8264: LD_INT 1
8266: PPUSH
8267: LD_INT 2
8269: PPUSH
8270: CALL_OW 12
8274: ST_TO_ADDR
// AddComMoveUnit ( i , cargo [ x ] ) ;
8275: LD_VAR 0 1
8279: PPUSH
8280: LD_VAR 0 2
8284: PUSH
8285: LD_VAR 0 6
8289: ARRAY
8290: PPUSH
8291: CALL_OW 172
// if GetCargo ( cargo [ x ] , mat_oil ) < 20 then
8295: LD_VAR 0 2
8299: PUSH
8300: LD_VAR 0 6
8304: ARRAY
8305: PPUSH
8306: LD_INT 2
8308: PPUSH
8309: CALL_OW 289
8313: PUSH
8314: LD_INT 20
8316: LESS
8317: IFFALSE 8340
// SetCargo ( cargo [ x ] , mat_oil , 100 ) ;
8319: LD_VAR 0 2
8323: PUSH
8324: LD_VAR 0 6
8328: ARRAY
8329: PPUSH
8330: LD_INT 2
8332: PPUSH
8333: LD_INT 100
8335: PPUSH
8336: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and tag < 101 then
8340: LD_VAR 0 1
8344: PPUSH
8345: CALL_OW 256
8349: PUSH
8350: LD_INT 600
8352: GREATEREQUAL
8353: PUSH
8354: LD_VAR 0 4
8358: PUSH
8359: LD_INT 101
8361: LESS
8362: AND
8363: IFFALSE 8379
// AgressiveMove ( i , path ) ;
8365: LD_VAR 0 1
8369: PPUSH
8370: LD_VAR 0 7
8374: PPUSH
8375: CALL 69007 0 2
// if GetLives ( i ) < 600 and tag < 101 then
8379: LD_VAR 0 1
8383: PPUSH
8384: CALL_OW 256
8388: PUSH
8389: LD_INT 600
8391: LESS
8392: PUSH
8393: LD_VAR 0 4
8397: PUSH
8398: LD_INT 101
8400: LESS
8401: AND
8402: IFFALSE 8443
// begin SetTag ( i , 101 ) ;
8404: LD_VAR 0 1
8408: PPUSH
8409: LD_INT 101
8411: PPUSH
8412: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8416: LD_VAR 0 1
8420: PPUSH
8421: LD_VAR 0 8
8425: PUSH
8426: LD_INT 1
8428: ARRAY
8429: PPUSH
8430: LD_VAR 0 8
8434: PUSH
8435: LD_INT 2
8437: ARRAY
8438: PPUSH
8439: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) < 9 and mech then
8443: LD_VAR 0 4
8447: PUSH
8448: LD_INT 101
8450: EQUAL
8451: PUSH
8452: LD_VAR 0 1
8456: PPUSH
8457: LD_VAR 0 8
8461: PUSH
8462: LD_INT 1
8464: ARRAY
8465: PPUSH
8466: LD_VAR 0 8
8470: PUSH
8471: LD_INT 2
8473: ARRAY
8474: PPUSH
8475: CALL_OW 297
8479: PUSH
8480: LD_INT 9
8482: LESS
8483: AND
8484: PUSH
8485: LD_VAR 0 5
8489: AND
8490: IFFALSE 8565
// begin if GetLives ( i ) < 1000 then
8492: LD_VAR 0 1
8496: PPUSH
8497: CALL_OW 256
8501: PUSH
8502: LD_INT 1000
8504: LESS
8505: IFFALSE 8518
// AddComRepairVehicleAndReturn ( mech ) else
8507: LD_VAR 0 5
8511: PPUSH
8512: CALL 68223 0 1
8516: GO 8565
// if GetFuel ( i ) <= 90 and cargo then
8518: LD_VAR 0 1
8522: PPUSH
8523: CALL_OW 261
8527: PUSH
8528: LD_INT 90
8530: LESSEQUAL
8531: PUSH
8532: LD_VAR 0 2
8536: AND
8537: IFFALSE 8553
// SetTag ( i , 102 ) else
8539: LD_VAR 0 1
8543: PPUSH
8544: LD_INT 102
8546: PPUSH
8547: CALL_OW 109
8551: GO 8565
// SetTag ( i , 0 ) ;
8553: LD_VAR 0 1
8557: PPUSH
8558: LD_INT 0
8560: PPUSH
8561: CALL_OW 109
// end ; end ;
8565: GO 8163
8567: POP
8568: POP
// until not tmp ;
8569: LD_VAR 0 3
8573: NOT
8574: IFFALSE 7768
// end ;
8576: PPOPN 8
8578: END
// export function GoForOil ; var i , tmp , data , chance , vehicle , needOil , heikeInConvoy , success ; begin
8579: LD_INT 0
8581: PPUSH
8582: PPUSH
8583: PPUSH
8584: PPUSH
8585: PPUSH
8586: PPUSH
8587: PPUSH
8588: PPUSH
8589: PPUSH
// SetAreaMapShow ( oilArea , 1 ) ;
8590: LD_INT 20
8592: PPUSH
8593: LD_INT 1
8595: PPUSH
8596: CALL_OW 424
// repeat wait ( 0 0$5 ) ;
8600: LD_INT 175
8602: PPUSH
8603: CALL_OW 67
// heikeInConvoy := false ;
8607: LD_ADDR_VAR 0 8
8611: PUSH
8612: LD_INT 0
8614: ST_TO_ADDR
// needOil := false ;
8615: LD_ADDR_VAR 0 7
8619: PUSH
8620: LD_INT 0
8622: ST_TO_ADDR
// tmp := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] ] ) ;
8623: LD_ADDR_VAR 0 3
8627: PUSH
8628: LD_INT 20
8630: PPUSH
8631: LD_INT 22
8633: PUSH
8634: LD_INT 2
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: PUSH
8641: LD_INT 3
8643: PUSH
8644: LD_INT 2
8646: PUSH
8647: LD_INT 34
8649: PUSH
8650: LD_INT 88
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: PUSH
8657: LD_INT 34
8659: PUSH
8660: LD_INT 31
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: PUSH
8667: EMPTY
8668: LIST
8669: LIST
8670: LIST
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: PUSH
8676: LD_INT 33
8678: PUSH
8679: LD_INT 1
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: LIST
8690: PPUSH
8691: CALL_OW 70
8695: ST_TO_ADDR
// for i in tmp do
8696: LD_ADDR_VAR 0 2
8700: PUSH
8701: LD_VAR 0 3
8705: PUSH
8706: FOR_IN
8707: IFFALSE 8792
// begin if IsDrivenBy ( i ) = Heike then
8709: LD_VAR 0 2
8713: PPUSH
8714: CALL_OW 311
8718: PUSH
8719: LD_EXP 33
8723: EQUAL
8724: IFFALSE 8743
// begin heikeInConvoy := true ;
8726: LD_ADDR_VAR 0 8
8730: PUSH
8731: LD_INT 1
8733: ST_TO_ADDR
// Query ( QHeikeConvoy ) ;
8734: LD_STRING QHeikeConvoy
8736: PPUSH
8737: CALL_OW 97
// break ;
8741: GO 8792
// end ; if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 10 then
8743: LD_VAR 0 2
8747: PPUSH
8748: CALL_OW 262
8752: PUSH
8753: LD_INT 1
8755: EQUAL
8756: PUSH
8757: LD_VAR 0 2
8761: PPUSH
8762: CALL_OW 261
8766: PUSH
8767: LD_INT 10
8769: LESS
8770: AND
8771: IFFALSE 8790
// begin needOil := true ;
8773: LD_ADDR_VAR 0 7
8777: PUSH
8778: LD_INT 1
8780: ST_TO_ADDR
// Query ( QNeedOil ) ;
8781: LD_STRING QNeedOil
8783: PPUSH
8784: CALL_OW 97
// break ;
8788: GO 8792
// end ; end ;
8790: GO 8706
8792: POP
8793: POP
// if not needOil and not heikeInConvoy and UnitFilter ( tmp , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
8794: LD_VAR 0 7
8798: NOT
8799: PUSH
8800: LD_VAR 0 8
8804: NOT
8805: AND
8806: PUSH
8807: LD_VAR 0 3
8811: PPUSH
8812: LD_INT 2
8814: PUSH
8815: LD_INT 34
8817: PUSH
8818: LD_INT 32
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: PUSH
8825: LD_INT 34
8827: PUSH
8828: LD_INT 51
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: LIST
8839: PPUSH
8840: CALL_OW 72
8844: AND
8845: IFFALSE 8862
// if Query ( QConvoy ) = 1 then
8847: LD_STRING QConvoy
8849: PPUSH
8850: CALL_OW 97
8854: PUSH
8855: LD_INT 1
8857: EQUAL
8858: IFFALSE 8862
// break ;
8860: GO 8866
// until false ;
8862: LD_INT 0
8864: IFFALSE 8600
// SetAreaMapShow ( oilArea , 0 ) ;
8866: LD_INT 20
8868: PPUSH
8869: LD_INT 0
8871: PPUSH
8872: CALL_OW 424
// data := [ ] ;
8876: LD_ADDR_VAR 0 4
8880: PUSH
8881: EMPTY
8882: ST_TO_ADDR
// chance := [ 60 , 50 , 40 , 30 ] [ Difficulty ] ;
8883: LD_ADDR_VAR 0 5
8887: PUSH
8888: LD_INT 60
8890: PUSH
8891: LD_INT 50
8893: PUSH
8894: LD_INT 40
8896: PUSH
8897: LD_INT 30
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: PUSH
8906: LD_OWVAR 67
8910: ARRAY
8911: ST_TO_ADDR
// for i in tmp do
8912: LD_ADDR_VAR 0 2
8916: PUSH
8917: LD_VAR 0 3
8921: PUSH
8922: FOR_IN
8923: IFFALSE 9020
// begin data := Join ( data , [ i , IsDrivenBy ( i ) , GetLives ( i ) , GetFuel ( i ) , ] ) ;
8925: LD_ADDR_VAR 0 4
8929: PUSH
8930: LD_VAR 0 4
8934: PPUSH
8935: LD_VAR 0 2
8939: PUSH
8940: LD_VAR 0 2
8944: PPUSH
8945: CALL_OW 311
8949: PUSH
8950: LD_VAR 0 2
8954: PPUSH
8955: CALL_OW 256
8959: PUSH
8960: LD_VAR 0 2
8964: PPUSH
8965: CALL_OW 261
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: PPUSH
8976: CALL 66403 0 2
8980: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
8981: LD_VAR 0 2
8985: PPUSH
8986: CALL_OW 311
8990: PPUSH
8991: CALL_OW 64
// RemoveUnit ( i ) ;
8995: LD_VAR 0 2
8999: PPUSH
9000: CALL_OW 64
// chance := chance + 20 ;
9004: LD_ADDR_VAR 0 5
9008: PUSH
9009: LD_VAR 0 5
9013: PUSH
9014: LD_INT 20
9016: PLUS
9017: ST_TO_ADDR
// end ;
9018: GO 8922
9020: POP
9021: POP
// wait ( rand ( 0 0$45 , 2 2$30 ) ) ;
9022: LD_INT 1575
9024: PPUSH
9025: LD_INT 5250
9027: PPUSH
9028: CALL_OW 12
9032: PPUSH
9033: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
9037: LD_INT 35
9039: PPUSH
9040: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
9044: LD_INT 22
9046: PUSH
9047: LD_INT 3
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: PUSH
9054: LD_INT 92
9056: PUSH
9057: LD_INT 261
9059: PUSH
9060: LD_INT 71
9062: PUSH
9063: LD_INT 12
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: PUSH
9072: EMPTY
9073: LIST
9074: LIST
9075: PPUSH
9076: CALL_OW 69
9080: NOT
9081: PUSH
9082: LD_INT 277
9084: PPUSH
9085: LD_INT 80
9087: PPUSH
9088: CALL_OW 428
9092: NOT
9093: AND
9094: IFFALSE 9037
// for i in data do
9096: LD_ADDR_VAR 0 2
9100: PUSH
9101: LD_VAR 0 4
9105: PUSH
9106: FOR_IN
9107: IFFALSE 9494
// begin uc_nation := GetNation ( i [ 1 ] ) ;
9109: LD_ADDR_OWVAR 21
9113: PUSH
9114: LD_VAR 0 2
9118: PUSH
9119: LD_INT 1
9121: ARRAY
9122: PPUSH
9123: CALL_OW 248
9127: ST_TO_ADDR
// uc_side := 2 ;
9128: LD_ADDR_OWVAR 20
9132: PUSH
9133: LD_INT 2
9135: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( i [ 1 ] ) , GetEngine ( i [ 1 ] ) , GetControl ( i [ 1 ] ) , GetWeapon ( i [ 1 ] ) , 66 ) ;
9136: LD_VAR 0 2
9140: PUSH
9141: LD_INT 1
9143: ARRAY
9144: PPUSH
9145: CALL_OW 265
9149: PPUSH
9150: LD_VAR 0 2
9154: PUSH
9155: LD_INT 1
9157: ARRAY
9158: PPUSH
9159: CALL_OW 262
9163: PPUSH
9164: LD_VAR 0 2
9168: PUSH
9169: LD_INT 1
9171: ARRAY
9172: PPUSH
9173: CALL_OW 263
9177: PPUSH
9178: LD_VAR 0 2
9182: PUSH
9183: LD_INT 1
9185: ARRAY
9186: PPUSH
9187: CALL_OW 264
9191: PPUSH
9192: LD_INT 66
9194: PPUSH
9195: CALL 33978 0 5
// vehicle := CreateVehicle ;
9199: LD_ADDR_VAR 0 6
9203: PUSH
9204: CALL_OW 45
9208: ST_TO_ADDR
// PlaceUnitXYD ( vehicle , 277 , 80 , 4 , false ) ;
9209: LD_VAR 0 6
9213: PPUSH
9214: LD_INT 277
9216: PPUSH
9217: LD_INT 80
9219: PPUSH
9220: LD_INT 4
9222: PPUSH
9223: LD_INT 0
9225: PPUSH
9226: CALL 68543 0 5
// PlaceHumanInUnit ( i [ 2 ] , vehicle ) ;
9230: LD_VAR 0 2
9234: PUSH
9235: LD_INT 2
9237: ARRAY
9238: PPUSH
9239: LD_VAR 0 6
9243: PPUSH
9244: CALL_OW 52
// SetLives ( vehicle , i [ 3 ] ) ;
9248: LD_VAR 0 6
9252: PPUSH
9253: LD_VAR 0 2
9257: PUSH
9258: LD_INT 3
9260: ARRAY
9261: PPUSH
9262: CALL_OW 234
// success := Prob ( chance ) ;
9266: LD_ADDR_VAR 0 9
9270: PUSH
9271: LD_VAR 0 5
9275: PPUSH
9276: CALL_OW 13
9280: ST_TO_ADDR
// if success then
9281: LD_VAR 0 9
9285: IFFALSE 9353
// begin if GetEngine ( vehicle ) = engine_combustion then
9287: LD_VAR 0 6
9291: PPUSH
9292: CALL_OW 262
9296: PUSH
9297: LD_INT 1
9299: EQUAL
9300: IFFALSE 9314
// SetFuel ( vehicle , 90 ) ;
9302: LD_VAR 0 6
9306: PPUSH
9307: LD_INT 90
9309: PPUSH
9310: CALL_OW 240
// if GetWeapon ( vehicle ) in [ ar_cargo_bay , ru_cargo_bay ] then
9314: LD_VAR 0 6
9318: PPUSH
9319: CALL_OW 264
9323: PUSH
9324: LD_INT 32
9326: PUSH
9327: LD_INT 51
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: IN
9334: IFFALSE 9351
// SetCargo ( vehicle , mat_oil , 100 ) ;
9336: LD_VAR 0 6
9340: PPUSH
9341: LD_INT 2
9343: PPUSH
9344: LD_INT 100
9346: PPUSH
9347: CALL_OW 290
// end else
9351: GO 9425
// begin if i [ 3 ] > 333 then
9353: LD_VAR 0 2
9357: PUSH
9358: LD_INT 3
9360: ARRAY
9361: PUSH
9362: LD_INT 333
9364: GREATER
9365: IFFALSE 9379
// SetLives ( vehicle , 333 ) ;
9367: LD_VAR 0 6
9371: PPUSH
9372: LD_INT 333
9374: PPUSH
9375: CALL_OW 234
// if i [ 4 ] > 20 then
9379: LD_VAR 0 2
9383: PUSH
9384: LD_INT 4
9386: ARRAY
9387: PUSH
9388: LD_INT 20
9390: GREATER
9391: IFFALSE 9407
// SetFuel ( vehicle , 20 ) else
9393: LD_VAR 0 6
9397: PPUSH
9398: LD_INT 20
9400: PPUSH
9401: CALL_OW 240
9405: GO 9425
// SetFuel ( vehicle , i [ 4 ] ) ;
9407: LD_VAR 0 6
9411: PPUSH
9412: LD_VAR 0 2
9416: PUSH
9417: LD_INT 4
9419: ARRAY
9420: PPUSH
9421: CALL_OW 240
// end ; ComMoveXY ( vehicle , 250 , 119 ) ;
9425: LD_VAR 0 6
9429: PPUSH
9430: LD_INT 250
9432: PPUSH
9433: LD_INT 119
9435: PPUSH
9436: CALL_OW 111
// AddComMoveXY ( vehicle , 211 , 80 ) ;
9440: LD_VAR 0 6
9444: PPUSH
9445: LD_INT 211
9447: PPUSH
9448: LD_INT 80
9450: PPUSH
9451: CALL_OW 171
// repeat wait ( 0 0$5 ) ;
9455: LD_INT 175
9457: PPUSH
9458: CALL_OW 67
// until not FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_placed ] ] ) ;
9462: LD_INT 20
9464: PPUSH
9465: LD_INT 22
9467: PUSH
9468: LD_INT 2
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: PUSH
9475: LD_INT 52
9477: PUSH
9478: EMPTY
9479: LIST
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PPUSH
9485: CALL_OW 70
9489: NOT
9490: IFFALSE 9455
// end ;
9492: GO 9106
9494: POP
9495: POP
// wait ( 0 0$10 ) ;
9496: LD_INT 350
9498: PPUSH
9499: CALL_OW 67
// GoForOil ;
9503: CALL 8579 0 0
// end ;
9507: LD_VAR 0 1
9511: RET
// every 0 0$2 trigger FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do var i ;
9512: LD_INT 22
9514: PPUSH
9515: LD_INT 21
9517: PUSH
9518: LD_INT 2
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: PUSH
9525: LD_INT 22
9527: PUSH
9528: LD_INT 5
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PUSH
9535: LD_INT 58
9537: PUSH
9538: EMPTY
9539: LIST
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: LIST
9545: PPUSH
9546: CALL_OW 70
9550: IFFALSE 9619
9552: GO 9554
9554: DISABLE
9555: LD_INT 0
9557: PPUSH
// begin enable ;
9558: ENABLE
// for i in FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do
9559: LD_ADDR_VAR 0 1
9563: PUSH
9564: LD_INT 22
9566: PPUSH
9567: LD_INT 21
9569: PUSH
9570: LD_INT 2
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 22
9579: PUSH
9580: LD_INT 5
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 58
9589: PUSH
9590: EMPTY
9591: LIST
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: LIST
9597: PPUSH
9598: CALL_OW 70
9602: PUSH
9603: FOR_IN
9604: IFFALSE 9617
// KillUnit ( i ) ;
9606: LD_VAR 0 1
9610: PPUSH
9611: CALL_OW 66
9615: GO 9603
9617: POP
9618: POP
// end ; end_of_file
9619: PPOPN 1
9621: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
9622: LD_INT 0
9624: PPUSH
// uc_side := side ;
9625: LD_ADDR_OWVAR 20
9629: PUSH
9630: LD_VAR 0 1
9634: ST_TO_ADDR
// uc_nation := nation ;
9635: LD_ADDR_OWVAR 21
9639: PUSH
9640: LD_VAR 0 2
9644: ST_TO_ADDR
// vc_chassis := chassis ;
9645: LD_ADDR_OWVAR 37
9649: PUSH
9650: LD_VAR 0 3
9654: ST_TO_ADDR
// vc_engine := engine ;
9655: LD_ADDR_OWVAR 39
9659: PUSH
9660: LD_VAR 0 4
9664: ST_TO_ADDR
// vc_control := control ;
9665: LD_ADDR_OWVAR 38
9669: PUSH
9670: LD_VAR 0 5
9674: ST_TO_ADDR
// vc_weapon := weapon ;
9675: LD_ADDR_OWVAR 40
9679: PUSH
9680: LD_VAR 0 6
9684: ST_TO_ADDR
// vc_fuel_battery := fuel ;
9685: LD_ADDR_OWVAR 41
9689: PUSH
9690: LD_VAR 0 7
9694: ST_TO_ADDR
// result := CreateVehicle ;
9695: LD_ADDR_VAR 0 8
9699: PUSH
9700: CALL_OW 45
9704: ST_TO_ADDR
// end ;
9705: LD_VAR 0 8
9709: RET
// export function SayX ( units , ident ) ; var i ; begin
9710: LD_INT 0
9712: PPUSH
9713: PPUSH
// result := false ;
9714: LD_ADDR_VAR 0 3
9718: PUSH
9719: LD_INT 0
9721: ST_TO_ADDR
// if not units then
9722: LD_VAR 0 1
9726: NOT
9727: IFFALSE 9731
// exit ;
9729: GO 9785
// for i in units do
9731: LD_ADDR_VAR 0 4
9735: PUSH
9736: LD_VAR 0 1
9740: PUSH
9741: FOR_IN
9742: IFFALSE 9783
// if IsOk ( i ) then
9744: LD_VAR 0 4
9748: PPUSH
9749: CALL_OW 302
9753: IFFALSE 9781
// begin Say ( i , ident ) ;
9755: LD_VAR 0 4
9759: PPUSH
9760: LD_VAR 0 2
9764: PPUSH
9765: CALL_OW 88
// result := i ;
9769: LD_ADDR_VAR 0 3
9773: PUSH
9774: LD_VAR 0 4
9778: ST_TO_ADDR
// break ;
9779: GO 9783
// end ;
9781: GO 9741
9783: POP
9784: POP
// end ;
9785: LD_VAR 0 3
9789: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
9790: LD_INT 0
9792: PPUSH
9793: PPUSH
// InitUc ;
9794: CALL_OW 18
// InitHc ;
9798: CALL_OW 19
// uc_side := 0 ;
9802: LD_ADDR_OWVAR 20
9806: PUSH
9807: LD_INT 0
9809: ST_TO_ADDR
// uc_nation := 0 ;
9810: LD_ADDR_OWVAR 21
9814: PUSH
9815: LD_INT 0
9817: ST_TO_ADDR
// for i = 1 to amount do
9818: LD_ADDR_VAR 0 4
9822: PUSH
9823: DOUBLE
9824: LD_INT 1
9826: DEC
9827: ST_TO_ADDR
9828: LD_VAR 0 2
9832: PUSH
9833: FOR_TO
9834: IFFALSE 9916
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
9836: LD_ADDR_OWVAR 29
9840: PUSH
9841: LD_INT 9
9843: PPUSH
9844: LD_INT 12
9846: PPUSH
9847: CALL_OW 12
9851: PUSH
9852: LD_INT 9
9854: PPUSH
9855: LD_INT 12
9857: PPUSH
9858: CALL_OW 12
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
9867: LD_ADDR_OWVAR 35
9871: PUSH
9872: LD_INT 1
9874: NEG
9875: PPUSH
9876: LD_INT 1
9878: PPUSH
9879: CALL_OW 12
9883: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9884: LD_INT 0
9886: PPUSH
9887: LD_INT 12
9889: PPUSH
9890: LD_INT 1
9892: PPUSH
9893: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
9897: CALL_OW 44
9901: PPUSH
9902: LD_VAR 0 1
9906: PPUSH
9907: LD_INT 0
9909: PPUSH
9910: CALL_OW 49
// end ;
9914: GO 9833
9916: POP
9917: POP
// InitHc ;
9918: CALL_OW 19
// end ;
9922: LD_VAR 0 3
9926: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
9927: LD_INT 0
9929: PPUSH
9930: PPUSH
// uc_side := 0 ;
9931: LD_ADDR_OWVAR 20
9935: PUSH
9936: LD_INT 0
9938: ST_TO_ADDR
// uc_nation := 0 ;
9939: LD_ADDR_OWVAR 21
9943: PUSH
9944: LD_INT 0
9946: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) ;
9947: LD_INT 7
9949: PPUSH
9950: LD_INT 6
9952: PUSH
9953: LD_INT 5
9955: PUSH
9956: LD_INT 4
9958: PUSH
9959: LD_INT 3
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: PUSH
9968: LD_OWVAR 67
9972: ARRAY
9973: PPUSH
9974: CALL 9790 0 2
// for i = 1 to 2 do
9978: LD_ADDR_VAR 0 4
9982: PUSH
9983: DOUBLE
9984: LD_INT 1
9986: DEC
9987: ST_TO_ADDR
9988: LD_INT 2
9990: PUSH
9991: FOR_TO
9992: IFFALSE 10029
// begin vc_chassis := class_mastodont ;
9994: LD_ADDR_OWVAR 37
9998: PUSH
9999: LD_INT 31
10001: ST_TO_ADDR
// vc_control := control_rider ;
10002: LD_ADDR_OWVAR 38
10006: PUSH
10007: LD_INT 4
10009: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
10010: CALL_OW 45
10014: PPUSH
10015: LD_VAR 0 1
10019: PPUSH
10020: LD_INT 0
10022: PPUSH
10023: CALL 65320 0 3
// end ;
10027: GO 9991
10029: POP
10030: POP
// InitHc ;
10031: CALL_OW 19
// for i := 1 to 4 do
10035: LD_ADDR_VAR 0 4
10039: PUSH
10040: DOUBLE
10041: LD_INT 1
10043: DEC
10044: ST_TO_ADDR
10045: LD_INT 4
10047: PUSH
10048: FOR_TO
10049: IFFALSE 10086
// begin hc_class := class_horse ;
10051: LD_ADDR_OWVAR 28
10055: PUSH
10056: LD_INT 21
10058: ST_TO_ADDR
// hc_gallery :=  ;
10059: LD_ADDR_OWVAR 33
10063: PUSH
10064: LD_STRING 
10066: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10067: CALL_OW 44
10071: PPUSH
10072: LD_VAR 0 1
10076: PPUSH
10077: LD_INT 0
10079: PPUSH
10080: CALL_OW 49
// end ;
10084: GO 10048
10086: POP
10087: POP
// InitHc ;
10088: CALL_OW 19
// for i = 1 to 5 do
10092: LD_ADDR_VAR 0 4
10096: PUSH
10097: DOUBLE
10098: LD_INT 1
10100: DEC
10101: ST_TO_ADDR
10102: LD_INT 5
10104: PUSH
10105: FOR_TO
10106: IFFALSE 10160
// begin hc_class = class_tiger ;
10108: LD_ADDR_OWVAR 28
10112: PUSH
10113: LD_INT 14
10115: ST_TO_ADDR
// hc_gallery =  ;
10116: LD_ADDR_OWVAR 33
10120: PUSH
10121: LD_STRING 
10123: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
10124: LD_ADDR_OWVAR 35
10128: PUSH
10129: LD_INT 7
10131: NEG
10132: PPUSH
10133: LD_INT 7
10135: PPUSH
10136: CALL_OW 12
10140: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
10141: CALL_OW 44
10145: PPUSH
10146: LD_VAR 0 1
10150: PPUSH
10151: LD_INT 0
10153: PPUSH
10154: CALL 65320 0 3
// end ;
10158: GO 10105
10160: POP
10161: POP
// InitHc ;
10162: CALL_OW 19
// for i := 1 to 4 do
10166: LD_ADDR_VAR 0 4
10170: PUSH
10171: DOUBLE
10172: LD_INT 1
10174: DEC
10175: ST_TO_ADDR
10176: LD_INT 4
10178: PUSH
10179: FOR_TO
10180: IFFALSE 10217
// begin hc_class := class_phororhacos ;
10182: LD_ADDR_OWVAR 28
10186: PUSH
10187: LD_INT 18
10189: ST_TO_ADDR
// hc_gallery :=  ;
10190: LD_ADDR_OWVAR 33
10194: PUSH
10195: LD_STRING 
10197: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10198: CALL_OW 44
10202: PPUSH
10203: LD_VAR 0 1
10207: PPUSH
10208: LD_INT 0
10210: PPUSH
10211: CALL_OW 49
// end ;
10215: GO 10179
10217: POP
10218: POP
// InitHc ;
10219: CALL_OW 19
// for i := 1 to 4 do
10223: LD_ADDR_VAR 0 4
10227: PUSH
10228: DOUBLE
10229: LD_INT 1
10231: DEC
10232: ST_TO_ADDR
10233: LD_INT 4
10235: PUSH
10236: FOR_TO
10237: IFFALSE 10274
// begin hc_class := class_baggie ;
10239: LD_ADDR_OWVAR 28
10243: PUSH
10244: LD_INT 13
10246: ST_TO_ADDR
// hc_gallery :=  ;
10247: LD_ADDR_OWVAR 33
10251: PUSH
10252: LD_STRING 
10254: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10255: CALL_OW 44
10259: PPUSH
10260: LD_VAR 0 1
10264: PPUSH
10265: LD_INT 0
10267: PPUSH
10268: CALL_OW 49
// end ;
10272: GO 10236
10274: POP
10275: POP
// InitHc ;
10276: CALL_OW 19
// for i := 1 to 7 do
10280: LD_ADDR_VAR 0 4
10284: PUSH
10285: DOUBLE
10286: LD_INT 1
10288: DEC
10289: ST_TO_ADDR
10290: LD_INT 7
10292: PUSH
10293: FOR_TO
10294: IFFALSE 10331
// begin hc_class := class_frog ;
10296: LD_ADDR_OWVAR 28
10300: PUSH
10301: LD_INT 19
10303: ST_TO_ADDR
// hc_gallery :=  ;
10304: LD_ADDR_OWVAR 33
10308: PUSH
10309: LD_STRING 
10311: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
10312: CALL_OW 44
10316: PPUSH
10317: LD_VAR 0 2
10321: PPUSH
10322: LD_INT 0
10324: PPUSH
10325: CALL_OW 49
// end ;
10329: GO 10293
10331: POP
10332: POP
// end ;
10333: LD_VAR 0 3
10337: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
10338: LD_INT 0
10340: PPUSH
10341: PPUSH
10342: PPUSH
// if not observer or not unit then
10343: LD_VAR 0 1
10347: NOT
10348: PUSH
10349: LD_VAR 0 2
10353: NOT
10354: OR
10355: IFFALSE 10359
// exit ;
10357: GO 10407
// if not See ( GetSide ( observer ) , unit ) then
10359: LD_VAR 0 1
10363: PPUSH
10364: CALL_OW 255
10368: PPUSH
10369: LD_VAR 0 2
10373: PPUSH
10374: CALL_OW 292
10378: NOT
10379: IFFALSE 10383
// exit ;
10381: GO 10407
// result := GetDistUnits ( observer , unit ) < 12 ;
10383: LD_ADDR_VAR 0 3
10387: PUSH
10388: LD_VAR 0 1
10392: PPUSH
10393: LD_VAR 0 2
10397: PPUSH
10398: CALL_OW 296
10402: PUSH
10403: LD_INT 12
10405: LESS
10406: ST_TO_ADDR
// end ;
10407: LD_VAR 0 3
10411: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
10412: LD_INT 0
10414: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
10415: LD_VAR 0 2
10419: PUSH
10420: LD_INT 1
10422: ARRAY
10423: PPUSH
10424: LD_VAR 0 2
10428: PUSH
10429: LD_INT 2
10431: ARRAY
10432: PPUSH
10433: CALL_OW 488
10437: PUSH
10438: LD_VAR 0 2
10442: PUSH
10443: LD_INT 1
10445: ARRAY
10446: PPUSH
10447: LD_VAR 0 2
10451: PUSH
10452: LD_INT 2
10454: ARRAY
10455: PPUSH
10456: CALL_OW 428
10460: PUSH
10461: LD_INT 0
10463: EQUAL
10464: AND
10465: IFFALSE 10499
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
10467: LD_VAR 0 1
10471: PPUSH
10472: LD_VAR 0 2
10476: PUSH
10477: LD_INT 1
10479: ARRAY
10480: PPUSH
10481: LD_VAR 0 2
10485: PUSH
10486: LD_INT 2
10488: ARRAY
10489: PPUSH
10490: LD_VAR 0 3
10494: PPUSH
10495: CALL_OW 48
// end ;
10499: LD_VAR 0 4
10503: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
10504: LD_INT 0
10506: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
10507: LD_VAR 0 1
10511: PPUSH
10512: LD_VAR 0 2
10516: PPUSH
10517: LD_VAR 0 3
10521: PPUSH
10522: LD_VAR 0 4
10526: PPUSH
10527: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
10531: LD_VAR 0 1
10535: PPUSH
10536: LD_VAR 0 2
10540: PPUSH
10541: LD_VAR 0 3
10545: PPUSH
10546: CALL_OW 331
// end ;
10550: LD_VAR 0 5
10554: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
10555: LD_INT 0
10557: PPUSH
// if not units then
10558: LD_VAR 0 1
10562: NOT
10563: IFFALSE 10567
// exit ;
10565: GO 10650
// result := true ;
10567: LD_ADDR_VAR 0 4
10571: PUSH
10572: LD_INT 1
10574: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
10575: LD_VAR 0 1
10579: PPUSH
10580: LD_INT 26
10582: PUSH
10583: LD_INT 1
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PPUSH
10590: CALL_OW 72
10594: PUSH
10595: LD_INT 1
10597: ARRAY
10598: PPUSH
10599: LD_VAR 0 2
10603: PPUSH
10604: CALL_OW 88
10608: NOT
10609: IFFALSE 10650
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
10611: LD_ADDR_VAR 0 4
10615: PUSH
10616: LD_VAR 0 1
10620: PPUSH
10621: LD_INT 26
10623: PUSH
10624: LD_INT 2
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PPUSH
10631: CALL_OW 72
10635: PUSH
10636: LD_INT 1
10638: ARRAY
10639: PPUSH
10640: LD_VAR 0 3
10644: PPUSH
10645: CALL_OW 88
10649: ST_TO_ADDR
// end ;
10650: LD_VAR 0 4
10654: RET
// export function SeeGroup ( side , group ) ; var i ; begin
10655: LD_INT 0
10657: PPUSH
10658: PPUSH
// if not group then
10659: LD_VAR 0 2
10663: NOT
10664: IFFALSE 10668
// exit ;
10666: GO 10713
// for i in group do
10668: LD_ADDR_VAR 0 4
10672: PUSH
10673: LD_VAR 0 2
10677: PUSH
10678: FOR_IN
10679: IFFALSE 10711
// if See ( side , i ) then
10681: LD_VAR 0 1
10685: PPUSH
10686: LD_VAR 0 4
10690: PPUSH
10691: CALL_OW 292
10695: IFFALSE 10709
// begin result := true ;
10697: LD_ADDR_VAR 0 3
10701: PUSH
10702: LD_INT 1
10704: ST_TO_ADDR
// exit ;
10705: POP
10706: POP
10707: GO 10713
// end ;
10709: GO 10678
10711: POP
10712: POP
// end ; end_of_file
10713: LD_VAR 0 3
10717: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
10718: LD_INT 0
10720: PPUSH
10721: PPUSH
10722: PPUSH
10723: PPUSH
10724: PPUSH
10725: PPUSH
10726: PPUSH
// uc_side := 3 ;
10727: LD_ADDR_OWVAR 20
10731: PUSH
10732: LD_INT 3
10734: ST_TO_ADDR
// uc_nation := 3 ;
10735: LD_ADDR_OWVAR 21
10739: PUSH
10740: LD_INT 3
10742: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
10743: LD_ADDR_EXP 52
10747: PUSH
10748: LD_STRING Morozov
10750: PPUSH
10751: CALL_OW 25
10755: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
10756: LD_EXP 52
10760: PPUSH
10761: LD_INT 52
10763: PPUSH
10764: CALL_OW 52
// if not gaidarKilled then
10768: LD_EXP 7
10772: NOT
10773: IFFALSE 10806
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
10775: LD_ADDR_EXP 53
10779: PUSH
10780: LD_STRING Gaydar
10782: PPUSH
10783: LD_INT 0
10785: PPUSH
10786: LD_STRING 
10788: PPUSH
10789: CALL 28963 0 3
10793: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
10794: LD_EXP 53
10798: PPUSH
10799: LD_INT 52
10801: PPUSH
10802: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
10806: LD_INT 52
10808: PPUSH
10809: LD_STRING lenin
10811: PPUSH
10812: CALL_OW 500
// ruOutsiders := [ ] ;
10816: LD_ADDR_EXP 55
10820: PUSH
10821: EMPTY
10822: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
10823: LD_ADDR_EXP 57
10827: PUSH
10828: EMPTY
10829: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
10830: LD_ADDR_EXP 58
10834: PUSH
10835: EMPTY
10836: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
10837: LD_ADDR_EXP 59
10841: PUSH
10842: EMPTY
10843: ST_TO_ADDR
// ruAttackers := [ ] ;
10844: LD_ADDR_EXP 60
10848: PUSH
10849: EMPTY
10850: ST_TO_ADDR
// waveStrength := 0 ;
10851: LD_ADDR_EXP 61
10855: PUSH
10856: LD_INT 0
10858: ST_TO_ADDR
// if not gaidarKilled then
10859: LD_EXP 7
10863: NOT
10864: IFFALSE 10874
// waveStrength := 2 ;
10866: LD_ADDR_EXP 61
10870: PUSH
10871: LD_INT 2
10873: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
10874: LD_ADDR_VAR 0 7
10878: PUSH
10879: LD_INT 22
10881: PUSH
10882: LD_INT 3
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: LD_INT 21
10891: PUSH
10892: LD_INT 3
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PPUSH
10903: CALL_OW 69
10907: ST_TO_ADDR
// for i in tmp do
10908: LD_ADDR_VAR 0 2
10912: PUSH
10913: LD_VAR 0 7
10917: PUSH
10918: FOR_IN
10919: IFFALSE 10956
// SetBLevel ( i , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
10921: LD_VAR 0 2
10925: PPUSH
10926: LD_INT 5
10928: PUSH
10929: LD_INT 6
10931: PUSH
10932: LD_INT 7
10934: PUSH
10935: LD_INT 8
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: PUSH
10944: LD_OWVAR 67
10948: ARRAY
10949: PPUSH
10950: CALL_OW 241
10954: GO 10918
10956: POP
10957: POP
// for i := 1 to 3 do
10958: LD_ADDR_VAR 0 2
10962: PUSH
10963: DOUBLE
10964: LD_INT 1
10966: DEC
10967: ST_TO_ADDR
10968: LD_INT 3
10970: PUSH
10971: FOR_TO
10972: IFFALSE 11010
// begin PrepareHuman ( false , 1 , 0 ) ;
10974: LD_INT 0
10976: PPUSH
10977: LD_INT 1
10979: PPUSH
10980: LD_INT 0
10982: PPUSH
10983: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
10987: CALL_OW 44
10991: PPUSH
10992: LD_INT 75
10994: PPUSH
10995: LD_INT 49
10997: PPUSH
10998: LD_INT 3
11000: PPUSH
11001: LD_INT 0
11003: PPUSH
11004: CALL_OW 50
// end ;
11008: GO 10971
11010: POP
11011: POP
// for i := 1 to 4 do
11012: LD_ADDR_VAR 0 2
11016: PUSH
11017: DOUBLE
11018: LD_INT 1
11020: DEC
11021: ST_TO_ADDR
11022: LD_INT 4
11024: PUSH
11025: FOR_TO
11026: IFFALSE 11072
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
11028: LD_INT 0
11030: PPUSH
11031: LD_INT 1
11033: PPUSH
11034: LD_INT 2
11036: PPUSH
11037: CALL_OW 12
11041: PPUSH
11042: LD_INT 0
11044: PPUSH
11045: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
11049: CALL_OW 44
11053: PPUSH
11054: LD_INT 330
11056: PPUSH
11057: LD_INT 231
11059: PPUSH
11060: LD_INT 5
11062: PPUSH
11063: LD_INT 0
11065: PPUSH
11066: CALL_OW 50
// end ;
11070: GO 11025
11072: POP
11073: POP
// hc_class := 1 ;
11074: LD_ADDR_OWVAR 28
11078: PUSH
11079: LD_INT 1
11081: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
11082: CALL_OW 44
11086: PPUSH
11087: LD_INT 324
11089: PPUSH
11090: LD_INT 219
11092: PPUSH
11093: CALL_OW 428
11097: PPUSH
11098: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
11102: CALL_OW 44
11106: PPUSH
11107: LD_INT 316
11109: PPUSH
11110: LD_INT 223
11112: PPUSH
11113: CALL_OW 428
11117: PPUSH
11118: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
11122: LD_ADDR_VAR 0 7
11126: PUSH
11127: LD_INT 172
11129: PPUSH
11130: LD_INT 198
11132: PPUSH
11133: CALL_OW 428
11137: PPUSH
11138: CALL_OW 274
11142: PUSH
11143: LD_INT 189
11145: PPUSH
11146: LD_INT 156
11148: PPUSH
11149: CALL_OW 428
11153: PPUSH
11154: CALL_OW 274
11158: PUSH
11159: LD_INT 341
11161: PPUSH
11162: LD_INT 232
11164: PPUSH
11165: CALL_OW 428
11169: PPUSH
11170: CALL_OW 274
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: LIST
11179: ST_TO_ADDR
// for i in tmp do
11180: LD_ADDR_VAR 0 2
11184: PUSH
11185: LD_VAR 0 7
11189: PUSH
11190: FOR_IN
11191: IFFALSE 11225
// begin SetResourceType ( i , mat_cans , 200 ) ;
11193: LD_VAR 0 2
11197: PPUSH
11198: LD_INT 1
11200: PPUSH
11201: LD_INT 200
11203: PPUSH
11204: CALL_OW 277
// SetResourceType ( i , mat_oil , 300 ) ;
11208: LD_VAR 0 2
11212: PPUSH
11213: LD_INT 2
11215: PPUSH
11216: LD_INT 300
11218: PPUSH
11219: CALL_OW 277
// end ;
11223: GO 11190
11225: POP
11226: POP
// tmp := [ [ 177 , 114 ] , [ 138 , 96 ] ] ;
11227: LD_ADDR_VAR 0 7
11231: PUSH
11232: LD_INT 177
11234: PUSH
11235: LD_INT 114
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: PUSH
11242: LD_INT 138
11244: PUSH
11245: LD_INT 96
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: ST_TO_ADDR
// for i := 1 to tmp do
11256: LD_ADDR_VAR 0 2
11260: PUSH
11261: DOUBLE
11262: LD_INT 1
11264: DEC
11265: ST_TO_ADDR
11266: LD_VAR 0 7
11270: PUSH
11271: FOR_TO
11272: IFFALSE 11355
// begin PrepareHuman ( false , class_bazooker , 6 ) ;
11274: LD_INT 0
11276: PPUSH
11277: LD_INT 9
11279: PPUSH
11280: LD_INT 6
11282: PPUSH
11283: CALL_OW 380
// un := CreateHuman ;
11287: LD_ADDR_VAR 0 5
11291: PUSH
11292: CALL_OW 44
11296: ST_TO_ADDR
// SetDir ( un , 2 ) ;
11297: LD_VAR 0 5
11301: PPUSH
11302: LD_INT 2
11304: PPUSH
11305: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
11309: LD_VAR 0 5
11313: PPUSH
11314: LD_VAR 0 7
11318: PUSH
11319: LD_VAR 0 2
11323: ARRAY
11324: PUSH
11325: LD_INT 1
11327: ARRAY
11328: PPUSH
11329: LD_VAR 0 7
11333: PUSH
11334: LD_VAR 0 2
11338: ARRAY
11339: PUSH
11340: LD_INT 2
11342: ARRAY
11343: PPUSH
11344: CALL_OW 428
11348: PPUSH
11349: CALL_OW 52
// end ;
11353: GO 11271
11355: POP
11356: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
11357: LD_ADDR_VAR 0 7
11361: PUSH
11362: LD_INT 198
11364: PUSH
11365: LD_INT 158
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: PUSH
11372: LD_INT 203
11374: PUSH
11375: LD_INT 166
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: PUSH
11382: LD_INT 181
11384: PUSH
11385: LD_INT 209
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PUSH
11392: LD_INT 178
11394: PUSH
11395: LD_INT 196
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 181
11404: PUSH
11405: LD_INT 212
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: ST_TO_ADDR
// for i := 1 to tmp do
11419: LD_ADDR_VAR 0 2
11423: PUSH
11424: DOUBLE
11425: LD_INT 1
11427: DEC
11428: ST_TO_ADDR
11429: LD_VAR 0 7
11433: PUSH
11434: FOR_TO
11435: IFFALSE 11556
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
11437: LD_INT 0
11439: PPUSH
11440: LD_INT 1
11442: PPUSH
11443: LD_INT 4
11445: PUSH
11446: LD_INT 5
11448: PUSH
11449: LD_INT 6
11451: PUSH
11452: LD_INT 7
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: PUSH
11461: LD_OWVAR 67
11465: ARRAY
11466: PPUSH
11467: CALL_OW 380
// un := CreateHuman ;
11471: LD_ADDR_VAR 0 5
11475: PUSH
11476: CALL_OW 44
11480: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
11481: LD_ADDR_VAR 0 4
11485: PUSH
11486: LD_VAR 0 7
11490: PUSH
11491: LD_VAR 0 2
11495: ARRAY
11496: PUSH
11497: LD_INT 1
11499: ARRAY
11500: PPUSH
11501: LD_VAR 0 7
11505: PUSH
11506: LD_VAR 0 2
11510: ARRAY
11511: PUSH
11512: LD_INT 2
11514: ARRAY
11515: PPUSH
11516: CALL_OW 428
11520: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
11521: LD_VAR 0 5
11525: PPUSH
11526: LD_VAR 0 4
11530: PPUSH
11531: CALL 61679 0 1
11535: PPUSH
11536: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
11540: LD_VAR 0 5
11544: PPUSH
11545: LD_VAR 0 4
11549: PPUSH
11550: CALL_OW 52
// end ;
11554: GO 11434
11556: POP
11557: POP
// for i := 1 to 3 do
11558: LD_ADDR_VAR 0 2
11562: PUSH
11563: DOUBLE
11564: LD_INT 1
11566: DEC
11567: ST_TO_ADDR
11568: LD_INT 3
11570: PUSH
11571: FOR_TO
11572: IFFALSE 11627
// begin InitHc ;
11574: CALL_OW 19
// uc_nation := 0 ;
11578: LD_ADDR_OWVAR 21
11582: PUSH
11583: LD_INT 0
11585: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
11586: LD_ADDR_OWVAR 28
11590: PUSH
11591: LD_INT 16
11593: ST_TO_ADDR
// un := CreateHuman ;
11594: LD_ADDR_VAR 0 5
11598: PUSH
11599: CALL_OW 44
11603: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
11604: LD_VAR 0 5
11608: PPUSH
11609: LD_INT 194
11611: PPUSH
11612: LD_INT 164
11614: PPUSH
11615: LD_INT 6
11617: PPUSH
11618: LD_INT 0
11620: PPUSH
11621: CALL_OW 50
// end ;
11625: GO 11571
11627: POP
11628: POP
// uc_nation := 3 ;
11629: LD_ADDR_OWVAR 21
11633: PUSH
11634: LD_INT 3
11636: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
11637: LD_INT 24
11639: PPUSH
11640: LD_INT 1
11642: PPUSH
11643: LD_INT 1
11645: PPUSH
11646: LD_INT 44
11648: PPUSH
11649: LD_INT 10
11651: PPUSH
11652: CALL 33978 0 5
// un := CreateVehicle ;
11656: LD_ADDR_VAR 0 5
11660: PUSH
11661: CALL_OW 45
11665: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 166 , 1 , false ) ;
11666: LD_VAR 0 5
11670: PPUSH
11671: LD_INT 199
11673: PPUSH
11674: LD_INT 166
11676: PPUSH
11677: LD_INT 1
11679: PPUSH
11680: LD_INT 0
11682: PPUSH
11683: CALL 68543 0 5
// ComHold ( un ) ;
11687: LD_VAR 0 5
11691: PPUSH
11692: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
11696: LD_INT 0
11698: PPUSH
11699: LD_INT 3
11701: PPUSH
11702: LD_INT 4
11704: PPUSH
11705: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
11709: CALL_OW 44
11713: PPUSH
11714: LD_VAR 0 5
11718: PPUSH
11719: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
11723: LD_INT 24
11725: PPUSH
11726: LD_INT 1
11728: PPUSH
11729: LD_INT 1
11731: PPUSH
11732: LD_INT 45
11734: PPUSH
11735: LD_INT 10
11737: PPUSH
11738: CALL 33978 0 5
// un := CreateVehicle ;
11742: LD_ADDR_VAR 0 5
11746: PUSH
11747: CALL_OW 45
11751: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
11752: LD_VAR 0 5
11756: PPUSH
11757: LD_INT 129
11759: PPUSH
11760: LD_INT 93
11762: PPUSH
11763: LD_INT 1
11765: PPUSH
11766: LD_INT 0
11768: PPUSH
11769: CALL 68543 0 5
// ComHold ( un ) ;
11773: LD_VAR 0 5
11777: PPUSH
11778: CALL_OW 140
// if Difficulty > 1 then
11782: LD_OWVAR 67
11786: PUSH
11787: LD_INT 1
11789: GREATER
11790: IFFALSE 11878
// begin PrepareHuman ( false , 3 , 4 ) ;
11792: LD_INT 0
11794: PPUSH
11795: LD_INT 3
11797: PPUSH
11798: LD_INT 4
11800: PPUSH
11801: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
11805: CALL_OW 44
11809: PPUSH
11810: LD_VAR 0 5
11814: PPUSH
11815: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
11819: LD_INT 24
11821: PPUSH
11822: LD_INT 1
11824: PPUSH
11825: LD_INT 1
11827: PPUSH
11828: LD_INT 45
11830: PPUSH
11831: LD_INT 10
11833: PPUSH
11834: CALL 33978 0 5
// un := CreateVehicle ;
11838: LD_ADDR_VAR 0 5
11842: PUSH
11843: CALL_OW 45
11847: ST_TO_ADDR
// PlaceUnitXYD ( un , 200 , 173 , 1 , false ) ;
11848: LD_VAR 0 5
11852: PPUSH
11853: LD_INT 200
11855: PPUSH
11856: LD_INT 173
11858: PPUSH
11859: LD_INT 1
11861: PPUSH
11862: LD_INT 0
11864: PPUSH
11865: CALL 68543 0 5
// ComHold ( un ) ;
11869: LD_VAR 0 5
11873: PPUSH
11874: CALL_OW 140
// end ; PrepareHuman ( false , 3 , 4 ) ;
11878: LD_INT 0
11880: PPUSH
11881: LD_INT 3
11883: PPUSH
11884: LD_INT 4
11886: PPUSH
11887: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
11891: CALL_OW 44
11895: PPUSH
11896: LD_VAR 0 5
11900: PPUSH
11901: CALL_OW 52
// bc_type := b_armoury ;
11905: LD_ADDR_OWVAR 42
11909: PUSH
11910: LD_INT 4
11912: ST_TO_ADDR
// if Difficulty > 1 then
11913: LD_OWVAR 67
11917: PUSH
11918: LD_INT 1
11920: GREATER
11921: IFFALSE 11931
// bc_type := b_barracks ;
11923: LD_ADDR_OWVAR 42
11927: PUSH
11928: LD_INT 5
11930: ST_TO_ADDR
// bc_level := 6 ;
11931: LD_ADDR_OWVAR 43
11935: PUSH
11936: LD_INT 6
11938: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
11939: LD_INT 120
11941: PPUSH
11942: LD_INT 100
11944: PPUSH
11945: LD_INT 5
11947: PPUSH
11948: CALL_OW 47
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
11952: LD_ADDR_VAR 0 2
11956: PUSH
11957: DOUBLE
11958: LD_INT 1
11960: DEC
11961: ST_TO_ADDR
11962: LD_INT 3
11964: PUSH
11965: LD_INT 3
11967: PUSH
11968: LD_INT 4
11970: PUSH
11971: LD_INT 4
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: PUSH
11980: LD_OWVAR 67
11984: ARRAY
11985: PUSH
11986: FOR_TO
11987: IFFALSE 12045
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_bazooker , class_bazooker ] [ Difficulty ] , 5 ) ;
11989: LD_INT 0
11991: PPUSH
11992: LD_INT 1
11994: PUSH
11995: LD_INT 1
11997: PUSH
11998: LD_INT 9
12000: PUSH
12001: LD_INT 9
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: PUSH
12010: LD_OWVAR 67
12014: ARRAY
12015: PPUSH
12016: LD_INT 5
12018: PPUSH
12019: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
12023: CALL_OW 44
12027: PPUSH
12028: LD_INT 120
12030: PPUSH
12031: LD_INT 100
12033: PPUSH
12034: CALL_OW 428
12038: PPUSH
12039: CALL_OW 52
// end ;
12043: GO 11986
12045: POP
12046: POP
// tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
12047: LD_ADDR_VAR 0 7
12051: PUSH
12052: LD_INT 135
12054: PUSH
12055: LD_INT 100
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: PUSH
12062: LD_INT 137
12064: PUSH
12065: LD_INT 92
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: ST_TO_ADDR
// for i := 1 to tmp do
12076: LD_ADDR_VAR 0 2
12080: PUSH
12081: DOUBLE
12082: LD_INT 1
12084: DEC
12085: ST_TO_ADDR
12086: LD_VAR 0 7
12090: PUSH
12091: FOR_TO
12092: IFFALSE 12262
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
12094: LD_INT 22
12096: PUSH
12097: LD_INT 22
12099: PUSH
12100: LD_INT 24
12102: PUSH
12103: LD_INT 24
12105: PUSH
12106: LD_INT 24
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: PUSH
12116: LD_OWVAR 67
12120: PUSH
12121: LD_INT 0
12123: PPUSH
12124: LD_INT 1
12126: PPUSH
12127: CALL_OW 12
12131: PLUS
12132: ARRAY
12133: PPUSH
12134: LD_INT 1
12136: PPUSH
12137: LD_INT 1
12139: PPUSH
12140: LD_INT 44
12142: PPUSH
12143: LD_INT 25
12145: PPUSH
12146: CALL 33978 0 5
// veh := CreateVehicle ;
12150: LD_ADDR_VAR 0 6
12154: PUSH
12155: CALL_OW 45
12159: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12160: LD_VAR 0 6
12164: PPUSH
12165: LD_INT 2
12167: PPUSH
12168: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
12172: LD_VAR 0 6
12176: PPUSH
12177: LD_VAR 0 7
12181: PUSH
12182: LD_VAR 0 2
12186: ARRAY
12187: PUSH
12188: LD_INT 1
12190: ARRAY
12191: PPUSH
12192: LD_VAR 0 7
12196: PUSH
12197: LD_VAR 0 2
12201: ARRAY
12202: PUSH
12203: LD_INT 2
12205: ARRAY
12206: PPUSH
12207: LD_INT 0
12209: PPUSH
12210: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
12214: LD_INT 0
12216: PPUSH
12217: LD_INT 3
12219: PPUSH
12220: LD_INT 6
12222: PPUSH
12223: CALL_OW 380
// un := CreateHuman ;
12227: LD_ADDR_VAR 0 5
12231: PUSH
12232: CALL_OW 44
12236: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12237: LD_VAR 0 5
12241: PPUSH
12242: LD_VAR 0 6
12246: PPUSH
12247: CALL_OW 52
// ComHold ( veh ) ;
12251: LD_VAR 0 6
12255: PPUSH
12256: CALL_OW 140
// end ;
12260: GO 12091
12262: POP
12263: POP
// tmp := [ 191 , 122 ] ;
12264: LD_ADDR_VAR 0 7
12268: PUSH
12269: LD_INT 191
12271: PUSH
12272: LD_INT 122
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
12279: LD_INT 24
12281: PPUSH
12282: LD_INT 1
12284: PPUSH
12285: LD_INT 1
12287: PPUSH
12288: LD_INT 44
12290: PPUSH
12291: LD_INT 30
12293: PPUSH
12294: CALL 33978 0 5
// ruBlockadeTank := CreateVehicle ;
12298: LD_ADDR_EXP 54
12302: PUSH
12303: CALL_OW 45
12307: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
12308: LD_EXP 54
12312: PPUSH
12313: LD_INT 2
12315: PPUSH
12316: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
12320: LD_EXP 54
12324: PPUSH
12325: LD_INT 191
12327: PPUSH
12328: LD_INT 122
12330: PPUSH
12331: LD_INT 0
12333: PPUSH
12334: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 , 7 ] [ Difficulty - 1 ] ) ;
12338: LD_INT 1
12340: PPUSH
12341: LD_INT 5
12343: PUSH
12344: LD_INT 6
12346: PUSH
12347: LD_INT 7
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: LIST
12354: PUSH
12355: LD_OWVAR 67
12359: PUSH
12360: LD_INT 1
12362: MINUS
12363: ARRAY
12364: PPUSH
12365: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
12369: CALL_OW 44
12373: PPUSH
12374: LD_EXP 54
12378: PPUSH
12379: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
12383: LD_EXP 54
12387: PPUSH
12388: CALL_OW 140
// ruBlockadeSquad := [ ] ;
12392: LD_ADDR_EXP 56
12396: PUSH
12397: EMPTY
12398: ST_TO_ADDR
// for i := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
12399: LD_ADDR_VAR 0 2
12403: PUSH
12404: DOUBLE
12405: LD_INT 1
12407: DEC
12408: ST_TO_ADDR
12409: LD_INT 2
12411: PUSH
12412: LD_INT 2
12414: PUSH
12415: LD_INT 3
12417: PUSH
12418: LD_INT 3
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: PUSH
12427: LD_OWVAR 67
12431: ARRAY
12432: PUSH
12433: FOR_TO
12434: IFFALSE 12550
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
12436: LD_INT 0
12438: PPUSH
12439: LD_INT 1
12441: PPUSH
12442: LD_INT 4
12444: PUSH
12445: LD_INT 5
12447: PUSH
12448: LD_INT 6
12450: PUSH
12451: LD_INT 7
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: PUSH
12460: LD_OWVAR 67
12464: ARRAY
12465: PPUSH
12466: CALL_OW 380
// un := CreateHuman ;
12470: LD_ADDR_VAR 0 5
12474: PUSH
12475: CALL_OW 44
12479: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
12480: LD_VAR 0 5
12484: PPUSH
12485: LD_INT 9
12487: PPUSH
12488: LD_INT 0
12490: PPUSH
12491: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
12495: LD_VAR 0 5
12499: PPUSH
12500: LD_INT 198
12502: PPUSH
12503: LD_INT 129
12505: PPUSH
12506: CALL_OW 118
// AddComCrawl ( un ) ;
12510: LD_VAR 0 5
12514: PPUSH
12515: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
12519: LD_ADDR_EXP 56
12523: PUSH
12524: LD_EXP 56
12528: PPUSH
12529: LD_EXP 56
12533: PUSH
12534: LD_INT 1
12536: PLUS
12537: PPUSH
12538: LD_VAR 0 5
12542: PPUSH
12543: CALL_OW 1
12547: ST_TO_ADDR
// end ;
12548: GO 12433
12550: POP
12551: POP
// PrepareHuman ( false , 4 , 5 ) ;
12552: LD_INT 0
12554: PPUSH
12555: LD_INT 4
12557: PPUSH
12558: LD_INT 5
12560: PPUSH
12561: CALL_OW 380
// un := CreateHuman ;
12565: LD_ADDR_VAR 0 5
12569: PUSH
12570: CALL_OW 44
12574: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
12575: LD_VAR 0 5
12579: PPUSH
12580: LD_INT 179
12582: PPUSH
12583: LD_INT 113
12585: PPUSH
12586: LD_INT 0
12588: PPUSH
12589: CALL_OW 48
// ComHold ( un ) ;
12593: LD_VAR 0 5
12597: PPUSH
12598: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
12602: LD_ADDR_EXP 56
12606: PUSH
12607: LD_EXP 56
12611: PPUSH
12612: LD_EXP 56
12616: PUSH
12617: LD_INT 1
12619: PLUS
12620: PPUSH
12621: LD_VAR 0 5
12625: PPUSH
12626: CALL_OW 1
12630: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
12631: LD_ADDR_VAR 0 7
12635: PUSH
12636: LD_INT 167
12638: PPUSH
12639: LD_INT 243
12641: PPUSH
12642: CALL_OW 428
12646: PPUSH
12647: CALL_OW 274
12651: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
12652: LD_VAR 0 7
12656: PPUSH
12657: LD_INT 1
12659: PPUSH
12660: LD_INT 1000
12662: PPUSH
12663: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
12667: LD_VAR 0 7
12671: PPUSH
12672: LD_INT 2
12674: PPUSH
12675: LD_INT 400
12677: PPUSH
12678: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
12682: LD_ADDR_VAR 0 7
12686: PUSH
12687: LD_INT 169
12689: PPUSH
12690: LD_INT 229
12692: PPUSH
12693: CALL_OW 428
12697: ST_TO_ADDR
// for i := 1 to 3 do
12698: LD_ADDR_VAR 0 2
12702: PUSH
12703: DOUBLE
12704: LD_INT 1
12706: DEC
12707: ST_TO_ADDR
12708: LD_INT 3
12710: PUSH
12711: FOR_TO
12712: IFFALSE 12803
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
12714: LD_INT 0
12716: PPUSH
12717: LD_INT 1
12719: PPUSH
12720: LD_INT 4
12722: PUSH
12723: LD_INT 5
12725: PUSH
12726: LD_INT 5
12728: PUSH
12729: LD_INT 6
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: PUSH
12738: LD_OWVAR 67
12742: ARRAY
12743: PPUSH
12744: CALL_OW 380
// un := CreateHuman ;
12748: LD_ADDR_VAR 0 5
12752: PUSH
12753: CALL_OW 44
12757: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
12758: LD_VAR 0 5
12762: PPUSH
12763: LD_VAR 0 7
12767: PPUSH
12768: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
12772: LD_ADDR_EXP 57
12776: PUSH
12777: LD_EXP 57
12781: PPUSH
12782: LD_EXP 57
12786: PUSH
12787: LD_INT 1
12789: PLUS
12790: PPUSH
12791: LD_VAR 0 5
12795: PPUSH
12796: CALL_OW 1
12800: ST_TO_ADDR
// end ;
12801: GO 12711
12803: POP
12804: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
12805: LD_ADDR_VAR 0 7
12809: PUSH
12810: LD_INT 165
12812: PUSH
12813: LD_INT 227
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: PUSH
12820: LD_INT 173
12822: PUSH
12823: LD_INT 231
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: ST_TO_ADDR
// for i := 1 to tmp do
12834: LD_ADDR_VAR 0 2
12838: PUSH
12839: DOUBLE
12840: LD_INT 1
12842: DEC
12843: ST_TO_ADDR
12844: LD_VAR 0 7
12848: PUSH
12849: FOR_TO
12850: IFFALSE 12971
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
12852: LD_INT 0
12854: PPUSH
12855: LD_INT 1
12857: PPUSH
12858: LD_INT 4
12860: PUSH
12861: LD_INT 5
12863: PUSH
12864: LD_INT 5
12866: PUSH
12867: LD_INT 6
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: PUSH
12876: LD_OWVAR 67
12880: ARRAY
12881: PPUSH
12882: CALL_OW 380
// un := CreateHuman ;
12886: LD_ADDR_VAR 0 5
12890: PUSH
12891: CALL_OW 44
12895: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
12896: LD_VAR 0 5
12900: PPUSH
12901: LD_VAR 0 7
12905: PUSH
12906: LD_VAR 0 2
12910: ARRAY
12911: PUSH
12912: LD_INT 1
12914: ARRAY
12915: PPUSH
12916: LD_VAR 0 7
12920: PUSH
12921: LD_VAR 0 2
12925: ARRAY
12926: PUSH
12927: LD_INT 2
12929: ARRAY
12930: PPUSH
12931: CALL_OW 428
12935: PPUSH
12936: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
12940: LD_ADDR_EXP 57
12944: PUSH
12945: LD_EXP 57
12949: PPUSH
12950: LD_EXP 57
12954: PUSH
12955: LD_INT 1
12957: PLUS
12958: PPUSH
12959: LD_VAR 0 5
12963: PPUSH
12964: CALL_OW 1
12968: ST_TO_ADDR
// end ;
12969: GO 12849
12971: POP
12972: POP
// for i := 1 to 2 do
12973: LD_ADDR_VAR 0 2
12977: PUSH
12978: DOUBLE
12979: LD_INT 1
12981: DEC
12982: ST_TO_ADDR
12983: LD_INT 2
12985: PUSH
12986: FOR_TO
12987: IFFALSE 13042
// begin InitHc ;
12989: CALL_OW 19
// uc_nation := 0 ;
12993: LD_ADDR_OWVAR 21
12997: PUSH
12998: LD_INT 0
13000: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
13001: LD_ADDR_OWVAR 28
13005: PUSH
13006: LD_INT 16
13008: ST_TO_ADDR
// un := CreateHuman ;
13009: LD_ADDR_VAR 0 5
13013: PUSH
13014: CALL_OW 44
13018: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
13019: LD_VAR 0 5
13023: PPUSH
13024: LD_INT 166
13026: PPUSH
13027: LD_INT 233
13029: PPUSH
13030: LD_INT 2
13032: PPUSH
13033: LD_INT 0
13035: PPUSH
13036: CALL_OW 50
// end ;
13040: GO 12986
13042: POP
13043: POP
// uc_nation := 3 ;
13044: LD_ADDR_OWVAR 21
13048: PUSH
13049: LD_INT 3
13051: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
13052: LD_ADDR_VAR 0 7
13056: PUSH
13057: LD_INT 71
13059: PUSH
13060: LD_INT 52
13062: PUSH
13063: LD_INT 11
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: LIST
13070: ST_TO_ADDR
// for i in tmp do
13071: LD_ADDR_VAR 0 2
13075: PUSH
13076: LD_VAR 0 7
13080: PUSH
13081: FOR_IN
13082: IFFALSE 13126
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
13084: LD_VAR 0 2
13088: PPUSH
13089: CALL_OW 274
13093: PPUSH
13094: LD_INT 1
13096: PPUSH
13097: LD_INT 3000
13099: PPUSH
13100: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
13104: LD_VAR 0 2
13108: PPUSH
13109: CALL_OW 274
13113: PPUSH
13114: LD_INT 2
13116: PPUSH
13117: LD_INT 600
13119: PPUSH
13120: CALL_OW 277
// end ;
13124: GO 13081
13126: POP
13127: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
13128: LD_ADDR_VAR 0 7
13132: PUSH
13133: LD_INT 41
13135: PUSH
13136: LD_INT 57
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PUSH
13143: LD_INT 38
13145: PUSH
13146: LD_INT 55
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: PUSH
13153: LD_INT 50
13155: PUSH
13156: LD_INT 73
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PUSH
13163: LD_INT 51
13165: PUSH
13166: LD_INT 65
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: LD_INT 82
13175: PUSH
13176: LD_INT 93
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: LD_INT 87
13185: PUSH
13186: LD_INT 100
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: PUSH
13193: LD_INT 91
13195: PUSH
13196: LD_INT 109
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: PUSH
13203: LD_INT 84
13205: PUSH
13206: LD_INT 120
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: LD_INT 113
13215: PUSH
13216: LD_INT 153
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: LD_INT 123
13225: PUSH
13226: LD_INT 171
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: PUSH
13233: LD_INT 125
13235: PUSH
13236: LD_INT 178
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: PUSH
13243: LD_INT 125
13245: PUSH
13246: LD_INT 188
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: PUSH
13253: LD_INT 125
13255: PUSH
13256: LD_INT 201
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: PUSH
13263: LD_INT 33
13265: PUSH
13266: LD_INT 60
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: PUSH
13273: LD_INT 76
13275: PUSH
13276: LD_INT 95
13278: PUSH
13279: EMPTY
13280: LIST
13281: LIST
13282: PUSH
13283: LD_INT 84
13285: PUSH
13286: LD_INT 111
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: PUSH
13293: LD_INT 112
13295: PUSH
13296: LD_INT 165
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: ST_TO_ADDR
// for i := 1 to tmp do
13322: LD_ADDR_VAR 0 2
13326: PUSH
13327: DOUBLE
13328: LD_INT 1
13330: DEC
13331: ST_TO_ADDR
13332: LD_VAR 0 7
13336: PUSH
13337: FOR_TO
13338: IFFALSE 13585
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
13340: LD_ADDR_VAR 0 4
13344: PUSH
13345: LD_VAR 0 7
13349: PUSH
13350: LD_VAR 0 2
13354: ARRAY
13355: PUSH
13356: LD_INT 1
13358: ARRAY
13359: PPUSH
13360: LD_VAR 0 7
13364: PUSH
13365: LD_VAR 0 2
13369: ARRAY
13370: PUSH
13371: LD_INT 2
13373: ARRAY
13374: PPUSH
13375: CALL_OW 428
13379: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
13380: LD_VAR 0 4
13384: PPUSH
13385: CALL_OW 266
13389: PUSH
13390: LD_INT 4
13392: PUSH
13393: LD_INT 5
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: IN
13400: IFFALSE 13496
// begin for j := 1 to Difficulty do
13402: LD_ADDR_VAR 0 3
13406: PUSH
13407: DOUBLE
13408: LD_INT 1
13410: DEC
13411: ST_TO_ADDR
13412: LD_OWVAR 67
13416: PUSH
13417: FOR_TO
13418: IFFALSE 13492
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13420: LD_INT 0
13422: PPUSH
13423: LD_INT 1
13425: PPUSH
13426: LD_INT 4
13428: PUSH
13429: LD_INT 5
13431: PUSH
13432: LD_INT 5
13434: PUSH
13435: LD_INT 6
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: PUSH
13444: LD_OWVAR 67
13448: ARRAY
13449: PPUSH
13450: CALL_OW 380
// un := CreateHuman ;
13454: LD_ADDR_VAR 0 5
13458: PUSH
13459: CALL_OW 44
13463: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13464: LD_VAR 0 5
13468: PPUSH
13469: LD_VAR 0 4
13473: PPUSH
13474: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
13478: LD_VAR 0 5
13482: PPUSH
13483: LD_INT 9
13485: PPUSH
13486: CALL_OW 336
// end ;
13490: GO 13417
13492: POP
13493: POP
// end else
13494: GO 13554
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13496: LD_INT 0
13498: PPUSH
13499: LD_INT 1
13501: PPUSH
13502: LD_INT 4
13504: PUSH
13505: LD_INT 5
13507: PUSH
13508: LD_INT 5
13510: PUSH
13511: LD_INT 6
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: PUSH
13520: LD_OWVAR 67
13524: ARRAY
13525: PPUSH
13526: CALL_OW 380
// un := CreateHuman ;
13530: LD_ADDR_VAR 0 5
13534: PUSH
13535: CALL_OW 44
13539: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13540: LD_VAR 0 5
13544: PPUSH
13545: LD_VAR 0 4
13549: PPUSH
13550: CALL_OW 52
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13554: LD_ADDR_EXP 58
13558: PUSH
13559: LD_EXP 58
13563: PPUSH
13564: LD_EXP 58
13568: PUSH
13569: LD_INT 1
13571: PLUS
13572: PPUSH
13573: LD_VAR 0 5
13577: PPUSH
13578: CALL_OW 1
13582: ST_TO_ADDR
// end ;
13583: GO 13337
13585: POP
13586: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
13587: LD_ADDR_VAR 0 4
13591: PUSH
13592: LD_INT 10
13594: PPUSH
13595: LD_INT 22
13597: PUSH
13598: LD_INT 3
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: PUSH
13605: LD_INT 30
13607: PUSH
13608: LD_INT 32
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: PUSH
13615: LD_INT 58
13617: PUSH
13618: EMPTY
13619: LIST
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: LIST
13625: PPUSH
13626: CALL_OW 70
13630: PUSH
13631: FOR_IN
13632: IFFALSE 13766
// begin if not Prob ( [ 40 , 50 , 75 , 80 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
13634: LD_INT 40
13636: PUSH
13637: LD_INT 50
13639: PUSH
13640: LD_INT 75
13642: PUSH
13643: LD_INT 80
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: PUSH
13652: LD_OWVAR 67
13656: ARRAY
13657: PUSH
13658: LD_EXP 7
13662: PUSH
13663: LD_INT 10
13665: MUL
13666: MINUS
13667: PPUSH
13668: CALL_OW 13
13672: NOT
13673: IFFALSE 13677
// continue ;
13675: GO 13631
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13677: LD_INT 0
13679: PPUSH
13680: LD_INT 1
13682: PPUSH
13683: LD_INT 4
13685: PUSH
13686: LD_INT 5
13688: PUSH
13689: LD_INT 5
13691: PUSH
13692: LD_INT 6
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: PUSH
13701: LD_OWVAR 67
13705: ARRAY
13706: PPUSH
13707: CALL_OW 380
// un := CreateHuman ;
13711: LD_ADDR_VAR 0 5
13715: PUSH
13716: CALL_OW 44
13720: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13721: LD_VAR 0 5
13725: PPUSH
13726: LD_VAR 0 4
13730: PPUSH
13731: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13735: LD_ADDR_EXP 58
13739: PUSH
13740: LD_EXP 58
13744: PPUSH
13745: LD_EXP 58
13749: PUSH
13750: LD_INT 1
13752: PLUS
13753: PPUSH
13754: LD_VAR 0 5
13758: PPUSH
13759: CALL_OW 1
13763: ST_TO_ADDR
// end ;
13764: GO 13631
13766: POP
13767: POP
// for i := 1 to 5 do
13768: LD_ADDR_VAR 0 2
13772: PUSH
13773: DOUBLE
13774: LD_INT 1
13776: DEC
13777: ST_TO_ADDR
13778: LD_INT 5
13780: PUSH
13781: FOR_TO
13782: IFFALSE 13880
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13784: LD_INT 0
13786: PPUSH
13787: LD_INT 2
13789: PPUSH
13790: LD_INT 4
13792: PUSH
13793: LD_INT 5
13795: PUSH
13796: LD_INT 5
13798: PUSH
13799: LD_INT 6
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: PUSH
13808: LD_OWVAR 67
13812: ARRAY
13813: PPUSH
13814: CALL_OW 380
// un := CreateHuman ;
13818: LD_ADDR_VAR 0 5
13822: PUSH
13823: CALL_OW 44
13827: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
13828: LD_VAR 0 5
13832: PPUSH
13833: LD_INT 66
13835: PPUSH
13836: LD_INT 101
13838: PPUSH
13839: LD_INT 3
13841: PPUSH
13842: LD_INT 0
13844: PPUSH
13845: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13849: LD_ADDR_EXP 58
13853: PUSH
13854: LD_EXP 58
13858: PPUSH
13859: LD_EXP 58
13863: PUSH
13864: LD_INT 1
13866: PLUS
13867: PPUSH
13868: LD_VAR 0 5
13872: PPUSH
13873: CALL_OW 1
13877: ST_TO_ADDR
// end ;
13878: GO 13781
13880: POP
13881: POP
// tmp := [ ruFac1 , ruFac2 ] ;
13882: LD_ADDR_VAR 0 7
13886: PUSH
13887: LD_INT 72
13889: PUSH
13890: LD_INT 12
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: ST_TO_ADDR
// for i := 1 to tmp do
13897: LD_ADDR_VAR 0 2
13901: PUSH
13902: DOUBLE
13903: LD_INT 1
13905: DEC
13906: ST_TO_ADDR
13907: LD_VAR 0 7
13911: PUSH
13912: FOR_TO
13913: IFFALSE 14030
// for j := 1 to 6 do
13915: LD_ADDR_VAR 0 3
13919: PUSH
13920: DOUBLE
13921: LD_INT 1
13923: DEC
13924: ST_TO_ADDR
13925: LD_INT 6
13927: PUSH
13928: FOR_TO
13929: IFFALSE 14026
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13931: LD_INT 0
13933: PPUSH
13934: LD_INT 3
13936: PPUSH
13937: LD_INT 4
13939: PUSH
13940: LD_INT 5
13942: PUSH
13943: LD_INT 5
13945: PUSH
13946: LD_INT 6
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: PUSH
13955: LD_OWVAR 67
13959: ARRAY
13960: PPUSH
13961: CALL_OW 380
// un := CreateHuman ;
13965: LD_ADDR_VAR 0 5
13969: PUSH
13970: CALL_OW 44
13974: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
13975: LD_VAR 0 5
13979: PPUSH
13980: LD_VAR 0 7
13984: PUSH
13985: LD_VAR 0 2
13989: ARRAY
13990: PPUSH
13991: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13995: LD_ADDR_EXP 58
13999: PUSH
14000: LD_EXP 58
14004: PPUSH
14005: LD_EXP 58
14009: PUSH
14010: LD_INT 1
14012: PLUS
14013: PPUSH
14014: LD_VAR 0 5
14018: PPUSH
14019: CALL_OW 1
14023: ST_TO_ADDR
// end ;
14024: GO 13928
14026: POP
14027: POP
14028: GO 13912
14030: POP
14031: POP
// for i := 1 to 3 do
14032: LD_ADDR_VAR 0 2
14036: PUSH
14037: DOUBLE
14038: LD_INT 1
14040: DEC
14041: ST_TO_ADDR
14042: LD_INT 3
14044: PUSH
14045: FOR_TO
14046: IFFALSE 14135
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14048: LD_INT 0
14050: PPUSH
14051: LD_INT 4
14053: PPUSH
14054: LD_INT 4
14056: PUSH
14057: LD_INT 5
14059: PUSH
14060: LD_INT 5
14062: PUSH
14063: LD_INT 6
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: PUSH
14072: LD_OWVAR 67
14076: ARRAY
14077: PPUSH
14078: CALL_OW 380
// un := CreateHuman ;
14082: LD_ADDR_VAR 0 5
14086: PUSH
14087: CALL_OW 44
14091: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
14092: LD_VAR 0 5
14096: PPUSH
14097: LD_INT 17
14099: PPUSH
14100: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14104: LD_ADDR_EXP 58
14108: PUSH
14109: LD_EXP 58
14113: PPUSH
14114: LD_EXP 58
14118: PUSH
14119: LD_INT 1
14121: PLUS
14122: PPUSH
14123: LD_VAR 0 5
14127: PPUSH
14128: CALL_OW 1
14132: ST_TO_ADDR
// end ;
14133: GO 14045
14135: POP
14136: POP
// for i := 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
14137: LD_ADDR_VAR 0 2
14141: PUSH
14142: DOUBLE
14143: LD_INT 1
14145: DEC
14146: ST_TO_ADDR
14147: LD_INT 2
14149: PUSH
14150: LD_INT 3
14152: PUSH
14153: LD_INT 3
14155: PUSH
14156: LD_INT 3
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: PUSH
14165: LD_OWVAR 67
14169: ARRAY
14170: PUSH
14171: FOR_TO
14172: IFFALSE 14292
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
14174: LD_INT 22
14176: PPUSH
14177: LD_INT 1
14179: PPUSH
14180: LD_INT 1
14182: PPUSH
14183: LD_INT 52
14185: PPUSH
14186: LD_INT 100
14188: PPUSH
14189: CALL 33978 0 5
// veh := CreateVehicle ;
14193: LD_ADDR_VAR 0 6
14197: PUSH
14198: CALL_OW 45
14202: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
14203: LD_INT 0
14205: PPUSH
14206: LD_INT 3
14208: PPUSH
14209: LD_INT 4
14211: PPUSH
14212: CALL_OW 380
// un := CreateHuman ;
14216: LD_ADDR_VAR 0 5
14220: PUSH
14221: CALL_OW 44
14225: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
14226: LD_VAR 0 6
14230: PPUSH
14231: LD_INT 107
14233: PPUSH
14234: LD_INT 182
14236: PPUSH
14237: LD_INT 4
14239: PPUSH
14240: LD_INT 0
14242: PPUSH
14243: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
14247: LD_VAR 0 5
14251: PPUSH
14252: LD_VAR 0 6
14256: PPUSH
14257: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14261: LD_ADDR_EXP 58
14265: PUSH
14266: LD_EXP 58
14270: PPUSH
14271: LD_EXP 58
14275: PUSH
14276: LD_INT 1
14278: PLUS
14279: PPUSH
14280: LD_VAR 0 5
14284: PPUSH
14285: CALL_OW 1
14289: ST_TO_ADDR
// end ;
14290: GO 14171
14292: POP
14293: POP
// InitHc ;
14294: CALL_OW 19
// for i := 1 to [ 3 , 5 , 6 , 8 ] [ Difficulty ] do
14298: LD_ADDR_VAR 0 2
14302: PUSH
14303: DOUBLE
14304: LD_INT 1
14306: DEC
14307: ST_TO_ADDR
14308: LD_INT 3
14310: PUSH
14311: LD_INT 5
14313: PUSH
14314: LD_INT 6
14316: PUSH
14317: LD_INT 8
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: PUSH
14326: LD_OWVAR 67
14330: ARRAY
14331: PUSH
14332: FOR_TO
14333: IFFALSE 14428
// begin uc_nation := 0 ;
14335: LD_ADDR_OWVAR 21
14339: PUSH
14340: LD_INT 0
14342: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
14343: LD_ADDR_OWVAR 28
14347: PUSH
14348: LD_INT 15
14350: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
14351: LD_ADDR_OWVAR 31
14355: PUSH
14356: LD_INT 3
14358: PUSH
14359: LD_INT 0
14361: PUSH
14362: LD_INT 0
14364: PUSH
14365: LD_INT 0
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: ST_TO_ADDR
// un := CreateHuman ;
14374: LD_ADDR_VAR 0 5
14378: PUSH
14379: CALL_OW 44
14383: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
14384: LD_VAR 0 5
14388: PPUSH
14389: LD_INT 269
14391: PUSH
14392: LD_INT 300
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: LD_VAR 0 2
14403: PUSH
14404: LD_INT 2
14406: MOD
14407: PUSH
14408: LD_INT 1
14410: PLUS
14411: ARRAY
14412: PPUSH
14413: LD_INT 182
14415: PPUSH
14416: LD_INT 4
14418: PPUSH
14419: LD_INT 0
14421: PPUSH
14422: CALL_OW 50
// end ;
14426: GO 14332
14428: POP
14429: POP
// uc_nation := 3 ;
14430: LD_ADDR_OWVAR 21
14434: PUSH
14435: LD_INT 3
14437: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
14438: LD_EXP 8
14442: PUSH
14443: LD_INT 10
14445: PUSH
14446: LD_INT 8
14448: PUSH
14449: LD_INT 6
14451: PUSH
14452: LD_INT 5
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: PUSH
14461: LD_OWVAR 67
14465: ARRAY
14466: LESS
14467: IFFALSE 14546
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
14469: LD_INT 21
14471: PPUSH
14472: LD_INT 1
14474: PPUSH
14475: LD_INT 1
14477: PPUSH
14478: LD_INT 51
14480: PPUSH
14481: LD_INT 12
14483: PPUSH
14484: CALL 33978 0 5
// veh := CreateVehicle ;
14488: LD_ADDR_VAR 0 6
14492: PUSH
14493: CALL_OW 45
14497: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
14498: LD_VAR 0 6
14502: PPUSH
14503: LD_INT 269
14505: PPUSH
14506: LD_INT 66
14508: PPUSH
14509: LD_INT 4
14511: PPUSH
14512: LD_INT 0
14514: PPUSH
14515: CALL 68543 0 5
// SetLives ( veh , 333 ) ;
14519: LD_VAR 0 6
14523: PPUSH
14524: LD_INT 333
14526: PPUSH
14527: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
14531: LD_VAR 0 6
14535: PPUSH
14536: LD_INT 2
14538: PPUSH
14539: LD_INT 100
14541: PPUSH
14542: CALL_OW 290
// end ; end ;
14546: LD_VAR 0 1
14550: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
14551: LD_EXP 54
14555: PUSH
14556: LD_EXP 54
14560: PPUSH
14561: CALL_OW 255
14565: PUSH
14566: LD_INT 3
14568: EQUAL
14569: AND
14570: IFFALSE 14733
14572: GO 14574
14574: DISABLE
14575: LD_INT 0
14577: PPUSH
// begin enable ;
14578: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
14579: LD_INT 81
14581: PUSH
14582: LD_INT 3
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: PUSH
14589: LD_INT 91
14591: PUSH
14592: LD_EXP 54
14596: PUSH
14597: LD_INT 15
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: LIST
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: PPUSH
14609: CALL_OW 69
14613: IFFALSE 14693
// begin if not IsDrivenBy ( ruBlockadeTank ) then
14615: LD_EXP 54
14619: PPUSH
14620: CALL_OW 311
14624: NOT
14625: IFFALSE 14691
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
14627: LD_ADDR_VAR 0 1
14631: PUSH
14632: LD_INT 22
14634: PUSH
14635: LD_INT 3
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: PUSH
14642: LD_INT 21
14644: PUSH
14645: LD_INT 1
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: PPUSH
14656: CALL_OW 69
14660: PPUSH
14661: LD_EXP 54
14665: PPUSH
14666: CALL_OW 74
14670: ST_TO_ADDR
// if driver then
14671: LD_VAR 0 1
14675: IFFALSE 14691
// ComEnterUnit ( driver , ruBlockadeTank ) ;
14677: LD_VAR 0 1
14681: PPUSH
14682: LD_EXP 54
14686: PPUSH
14687: CALL_OW 120
// end ; exit ;
14691: GO 14733
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
14693: LD_EXP 54
14697: PPUSH
14698: CALL_OW 256
14702: PUSH
14703: LD_INT 1000
14705: LESS
14706: PUSH
14707: LD_EXP 54
14711: PPUSH
14712: CALL_OW 311
14716: AND
14717: IFFALSE 14733
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
14719: LD_EXP 54
14723: PPUSH
14724: CALL_OW 311
14728: PPUSH
14729: CALL 68103 0 1
// end ;
14733: PPOPN 1
14735: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
14736: LD_EXP 56
14740: PPUSH
14741: LD_INT 3
14743: PUSH
14744: LD_INT 24
14746: PUSH
14747: LD_INT 1000
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PPUSH
14758: CALL_OW 72
14762: PUSH
14763: LD_EXP 56
14767: PPUSH
14768: LD_INT 25
14770: PUSH
14771: LD_INT 4
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PUSH
14778: LD_INT 50
14780: PUSH
14781: EMPTY
14782: LIST
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PPUSH
14788: CALL_OW 72
14792: AND
14793: IFFALSE 14981
14795: GO 14797
14797: DISABLE
14798: LD_INT 0
14800: PPUSH
14801: PPUSH
14802: PPUSH
// begin enable ;
14803: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
14804: LD_ADDR_VAR 0 3
14808: PUSH
14809: LD_EXP 56
14813: PPUSH
14814: LD_INT 3
14816: PUSH
14817: LD_INT 24
14819: PUSH
14820: LD_INT 1000
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PPUSH
14831: CALL_OW 72
14835: PPUSH
14836: LD_INT 1
14838: PPUSH
14839: CALL 68343 0 2
14843: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
14844: LD_ADDR_VAR 0 2
14848: PUSH
14849: LD_EXP 56
14853: PPUSH
14854: LD_INT 25
14856: PUSH
14857: LD_INT 4
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: PUSH
14864: LD_INT 50
14866: PUSH
14867: EMPTY
14868: LIST
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: PPUSH
14874: CALL_OW 72
14878: PUSH
14879: LD_INT 1
14881: ARRAY
14882: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
14883: LD_VAR 0 2
14887: PPUSH
14888: LD_VAR 0 3
14892: PUSH
14893: LD_INT 1
14895: ARRAY
14896: PPUSH
14897: CALL 63698 0 2
14901: NOT
14902: IFFALSE 14981
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
14904: LD_VAR 0 3
14908: PUSH
14909: LD_INT 1
14911: ARRAY
14912: PPUSH
14913: LD_INT 9
14915: PPUSH
14916: CALL_OW 308
14920: NOT
14921: IFFALSE 14939
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
14923: LD_VAR 0 3
14927: PUSH
14928: LD_INT 1
14930: ARRAY
14931: PPUSH
14932: LD_INT 9
14934: PPUSH
14935: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
14939: LD_VAR 0 2
14943: PPUSH
14944: LD_VAR 0 3
14948: PUSH
14949: LD_INT 1
14951: ARRAY
14952: PPUSH
14953: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
14957: LD_VAR 0 2
14961: PPUSH
14962: LD_INT 179
14964: PPUSH
14965: LD_INT 113
14967: PPUSH
14968: CALL_OW 171
// AddComHold ( sci ) ;
14972: LD_VAR 0 2
14976: PPUSH
14977: CALL_OW 200
// end ; end ;
14981: PPOPN 3
14983: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
14984: LD_INT 2
14986: PPUSH
14987: LD_INT 52
14989: PPUSH
14990: CALL_OW 292
14994: IFFALSE 15099
14996: GO 14998
14998: DISABLE
14999: LD_INT 0
15001: PPUSH
15002: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
15003: LD_ADDR_VAR 0 2
15007: PUSH
15008: LD_EXP 58
15012: PPUSH
15013: LD_INT 25
15015: PUSH
15016: LD_INT 1
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: PUSH
15023: LD_INT 50
15025: PUSH
15026: EMPTY
15027: LIST
15028: PUSH
15029: EMPTY
15030: LIST
15031: LIST
15032: PPUSH
15033: CALL_OW 72
15037: ST_TO_ADDR
// if not tmp then
15038: LD_VAR 0 2
15042: NOT
15043: IFFALSE 15047
// exit ;
15045: GO 15099
// for i in tmp do
15047: LD_ADDR_VAR 0 1
15051: PUSH
15052: LD_VAR 0 2
15056: PUSH
15057: FOR_IN
15058: IFFALSE 15097
// begin if IsInUnit ( i ) then
15060: LD_VAR 0 1
15064: PPUSH
15065: CALL_OW 310
15069: IFFALSE 15080
// ComExitBuilding ( i ) ;
15071: LD_VAR 0 1
15075: PPUSH
15076: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
15080: LD_VAR 0 1
15084: PPUSH
15085: LD_INT 84
15087: PPUSH
15088: LD_INT 133
15090: PPUSH
15091: CALL_OW 174
// end ;
15095: GO 15057
15097: POP
15098: POP
// end ;
15099: PPOPN 2
15101: END
// every 0 0$10 trigger leninSpotted do var i , tmp , weapon ;
15102: LD_EXP 14
15106: IFFALSE 15287
15108: GO 15110
15110: DISABLE
15111: LD_INT 0
15113: PPUSH
15114: PPUSH
15115: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
15116: LD_ADDR_VAR 0 2
15120: PUSH
15121: LD_INT 72
15123: PUSH
15124: LD_INT 12
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket_launcher , ru_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] ] [ Difficulty ] ;
15131: LD_ADDR_VAR 0 3
15135: PUSH
15136: LD_INT 44
15138: PUSH
15139: LD_INT 43
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: PUSH
15146: LD_INT 45
15148: PUSH
15149: LD_INT 44
15151: PUSH
15152: EMPTY
15153: LIST
15154: LIST
15155: PUSH
15156: LD_INT 45
15158: PUSH
15159: LD_INT 46
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: PUSH
15166: LD_INT 45
15168: PUSH
15169: LD_INT 46
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: PUSH
15182: LD_OWVAR 67
15186: ARRAY
15187: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
15188: LD_ADDR_VAR 0 1
15192: PUSH
15193: DOUBLE
15194: LD_INT 1
15196: DEC
15197: ST_TO_ADDR
15198: LD_INT 1
15200: PUSH
15201: LD_INT 2
15203: PUSH
15204: LD_INT 2
15206: PUSH
15207: LD_INT 3
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: PUSH
15216: LD_OWVAR 67
15220: ARRAY
15221: PUSH
15222: FOR_TO
15223: IFFALSE 15285
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
15225: LD_VAR 0 2
15229: PPUSH
15230: LD_INT 22
15232: PUSH
15233: LD_INT 23
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: LD_VAR 0 1
15244: PUSH
15245: LD_INT 2
15247: MOD
15248: PUSH
15249: LD_INT 1
15251: PLUS
15252: ARRAY
15253: PPUSH
15254: LD_INT 1
15256: PPUSH
15257: LD_INT 1
15259: PPUSH
15260: LD_VAR 0 3
15264: PUSH
15265: LD_VAR 0 1
15269: PUSH
15270: LD_INT 2
15272: MOD
15273: PUSH
15274: LD_INT 1
15276: PLUS
15277: ARRAY
15278: PPUSH
15279: CALL_OW 185
15283: GO 15222
15285: POP
15286: POP
// end ;
15287: PPOPN 3
15289: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
15290: LD_EXP 11
15294: IFFALSE 16443
15296: GO 15298
15298: DISABLE
15299: LD_INT 0
15301: PPUSH
15302: PPUSH
15303: PPUSH
15304: PPUSH
15305: PPUSH
15306: PPUSH
// begin enable ;
15307: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
15308: LD_ADDR_VAR 0 6
15312: PUSH
15313: LD_INT 10
15315: PPUSH
15316: LD_INT 81
15318: PUSH
15319: LD_INT 3
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PPUSH
15326: CALL_OW 70
15330: ST_TO_ADDR
// if ruSpecialVehicleGroup then
15331: LD_EXP 59
15335: IFFALSE 15601
// begin for i in ruSpecialVehicleGroup do
15337: LD_ADDR_VAR 0 1
15341: PUSH
15342: LD_EXP 59
15346: PUSH
15347: FOR_IN
15348: IFFALSE 15599
// begin if enemyInBase then
15350: LD_VAR 0 6
15354: IFFALSE 15597
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
15356: LD_VAR 0 1
15360: PPUSH
15361: CALL_OW 256
15365: PUSH
15366: LD_INT 500
15368: GREATER
15369: PUSH
15370: LD_VAR 0 1
15374: PPUSH
15375: CALL_OW 110
15379: PUSH
15380: LD_INT 0
15382: EQUAL
15383: AND
15384: IFFALSE 15410
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
15386: LD_VAR 0 1
15390: PPUSH
15391: LD_VAR 0 6
15395: PPUSH
15396: LD_VAR 0 1
15400: PPUSH
15401: CALL_OW 74
15405: PPUSH
15406: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
15410: LD_VAR 0 1
15414: PPUSH
15415: CALL_OW 256
15419: PUSH
15420: LD_INT 500
15422: LESSEQUAL
15423: PUSH
15424: LD_VAR 0 1
15428: PPUSH
15429: CALL_OW 110
15433: PUSH
15434: LD_INT 0
15436: EQUAL
15437: AND
15438: IFFALSE 15467
// begin SetTag ( i , 1 ) ;
15440: LD_VAR 0 1
15444: PPUSH
15445: LD_INT 1
15447: PPUSH
15448: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
15452: LD_VAR 0 1
15456: PPUSH
15457: LD_INT 83
15459: PPUSH
15460: LD_INT 134
15462: PPUSH
15463: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
15467: LD_VAR 0 1
15471: PPUSH
15472: CALL_OW 256
15476: PUSH
15477: LD_INT 1000
15479: LESS
15480: PUSH
15481: LD_VAR 0 1
15485: PPUSH
15486: CALL_OW 110
15490: PUSH
15491: LD_INT 1
15493: EQUAL
15494: AND
15495: PUSH
15496: LD_VAR 0 1
15500: PPUSH
15501: LD_INT 83
15503: PPUSH
15504: LD_INT 134
15506: PPUSH
15507: CALL_OW 297
15511: PUSH
15512: LD_INT 6
15514: LESS
15515: AND
15516: IFFALSE 15544
// begin SetFuel ( i , 100 ) ;
15518: LD_VAR 0 1
15522: PPUSH
15523: LD_INT 100
15525: PPUSH
15526: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
15530: LD_VAR 0 1
15534: PPUSH
15535: CALL_OW 310
15539: PPUSH
15540: CALL 68223 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
15544: LD_VAR 0 1
15548: PPUSH
15549: CALL_OW 256
15553: PUSH
15554: LD_INT 1000
15556: EQUAL
15557: PUSH
15558: LD_VAR 0 1
15562: PPUSH
15563: CALL_OW 110
15567: PUSH
15568: LD_INT 1
15570: EQUAL
15571: AND
15572: PUSH
15573: LD_VAR 0 1
15577: PPUSH
15578: CALL_OW 311
15582: AND
15583: IFFALSE 15597
// SetTag ( i , 0 ) ;
15585: LD_VAR 0 1
15589: PPUSH
15590: LD_INT 0
15592: PPUSH
15593: CALL_OW 109
// end ; end ;
15597: GO 15347
15599: POP
15600: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
15601: LD_ADDR_VAR 0 5
15605: PUSH
15606: LD_EXP 58
15610: PPUSH
15611: LD_INT 25
15613: PUSH
15614: LD_INT 4
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PPUSH
15621: CALL_OW 72
15625: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15626: LD_ADDR_VAR 0 4
15630: PUSH
15631: LD_EXP 58
15635: PPUSH
15636: LD_INT 92
15638: PUSH
15639: LD_INT 92
15641: PUSH
15642: LD_INT 155
15644: PUSH
15645: LD_INT 12
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: PUSH
15654: LD_INT 3
15656: PUSH
15657: LD_INT 24
15659: PUSH
15660: LD_INT 1000
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: PPUSH
15675: CALL_OW 72
15679: ST_TO_ADDR
// if sci then
15680: LD_VAR 0 5
15684: IFFALSE 15817
// begin if hurt then
15686: LD_VAR 0 4
15690: IFFALSE 15763
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
15692: LD_VAR 0 5
15696: PPUSH
15697: LD_INT 3
15699: PUSH
15700: LD_INT 54
15702: PUSH
15703: EMPTY
15704: LIST
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: PPUSH
15710: CALL_OW 72
15714: IFFALSE 15743
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
15716: LD_VAR 0 5
15720: PPUSH
15721: LD_INT 3
15723: PUSH
15724: LD_INT 54
15726: PUSH
15727: EMPTY
15728: LIST
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PPUSH
15734: CALL_OW 72
15738: PPUSH
15739: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
15743: LD_VAR 0 5
15747: PPUSH
15748: LD_VAR 0 4
15752: PUSH
15753: LD_INT 1
15755: ARRAY
15756: PPUSH
15757: CALL_OW 188
// end else
15761: GO 15817
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
15763: LD_VAR 0 5
15767: PPUSH
15768: LD_INT 3
15770: PUSH
15771: LD_INT 54
15773: PUSH
15774: EMPTY
15775: LIST
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PPUSH
15781: CALL_OW 72
15785: IFFALSE 15817
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
15787: LD_VAR 0 5
15791: PPUSH
15792: LD_INT 3
15794: PUSH
15795: LD_INT 54
15797: PUSH
15798: EMPTY
15799: LIST
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: PPUSH
15805: CALL_OW 72
15809: PPUSH
15810: LD_INT 17
15812: PPUSH
15813: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15817: LD_ADDR_VAR 0 3
15821: PUSH
15822: LD_INT 10
15824: PPUSH
15825: LD_INT 21
15827: PUSH
15828: LD_INT 3
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: PUSH
15835: LD_INT 3
15837: PUSH
15838: LD_INT 24
15840: PUSH
15841: LD_INT 1000
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PPUSH
15856: CALL_OW 70
15860: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
15861: LD_ADDR_VAR 0 2
15865: PUSH
15866: LD_EXP 58
15870: PPUSH
15871: LD_INT 25
15873: PUSH
15874: LD_INT 2
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PPUSH
15881: CALL_OW 72
15885: PUSH
15886: LD_INT 22
15888: PUSH
15889: LD_INT 3
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: PUSH
15896: LD_INT 34
15898: PUSH
15899: LD_INT 52
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: PPUSH
15910: CALL_OW 69
15914: UNION
15915: ST_TO_ADDR
// if not tmp then
15916: LD_VAR 0 2
15920: NOT
15921: IFFALSE 15925
// exit ;
15923: GO 16443
// for i in tmp do
15925: LD_ADDR_VAR 0 1
15929: PUSH
15930: LD_VAR 0 2
15934: PUSH
15935: FOR_IN
15936: IFFALSE 16441
// begin if GetClass ( i ) = 2 then
15938: LD_VAR 0 1
15942: PPUSH
15943: CALL_OW 257
15947: PUSH
15948: LD_INT 2
15950: EQUAL
15951: IFFALSE 16174
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
15953: LD_VAR 0 1
15957: PPUSH
15958: CALL_OW 256
15962: PUSH
15963: LD_INT 1000
15965: EQUAL
15966: PUSH
15967: LD_VAR 0 1
15971: PPUSH
15972: CALL_OW 110
15976: PUSH
15977: LD_INT 1
15979: EQUAL
15980: AND
15981: IFFALSE 15995
// SetTag ( i , 0 ) ;
15983: LD_VAR 0 1
15987: PPUSH
15988: LD_INT 0
15990: PPUSH
15991: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
15995: LD_VAR 0 1
15999: PPUSH
16000: CALL_OW 256
16004: PUSH
16005: LD_INT 500
16007: LESSEQUAL
16008: PUSH
16009: LD_VAR 0 1
16013: PPUSH
16014: CALL_OW 110
16018: PUSH
16019: LD_INT 0
16021: EQUAL
16022: AND
16023: IFFALSE 16052
// begin SetTag ( i , 1 ) ;
16025: LD_VAR 0 1
16029: PPUSH
16030: LD_INT 1
16032: PPUSH
16033: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
16037: LD_VAR 0 1
16041: PPUSH
16042: LD_INT 92
16044: PPUSH
16045: LD_INT 155
16047: PPUSH
16048: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
16052: LD_VAR 0 3
16056: PUSH
16057: LD_VAR 0 1
16061: PPUSH
16062: CALL_OW 256
16066: PUSH
16067: LD_INT 500
16069: GREATER
16070: AND
16071: PUSH
16072: LD_VAR 0 1
16076: PPUSH
16077: CALL_OW 110
16081: PUSH
16082: LD_INT 0
16084: EQUAL
16085: AND
16086: PUSH
16087: LD_VAR 0 1
16091: PPUSH
16092: CALL_OW 314
16096: NOT
16097: AND
16098: IFFALSE 16172
// begin if b then
16100: LD_VAR 0 3
16104: IFFALSE 16136
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16106: LD_VAR 0 1
16110: PPUSH
16111: LD_VAR 0 3
16115: PUSH
16116: LD_INT 1
16118: PPUSH
16119: LD_VAR 0 3
16123: PPUSH
16124: CALL_OW 12
16128: ARRAY
16129: PPUSH
16130: CALL_OW 130
16134: GO 16172
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16136: LD_VAR 0 1
16140: PPUSH
16141: LD_INT 94
16143: PPUSH
16144: LD_INT 165
16146: PPUSH
16147: CALL_OW 297
16151: PUSH
16152: LD_INT 8
16154: GREATER
16155: IFFALSE 16172
// ComMoveXY ( i , 94 , 165 ) ;
16157: LD_VAR 0 1
16161: PPUSH
16162: LD_INT 94
16164: PPUSH
16165: LD_INT 165
16167: PPUSH
16168: CALL_OW 111
// end ; end else
16172: GO 16439
// if GetWeapon ( i ) = ru_crane then
16174: LD_VAR 0 1
16178: PPUSH
16179: CALL_OW 264
16183: PUSH
16184: LD_INT 52
16186: EQUAL
16187: IFFALSE 16439
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16189: LD_VAR 0 1
16193: PPUSH
16194: CALL_OW 256
16198: PUSH
16199: LD_INT 1000
16201: EQUAL
16202: PUSH
16203: LD_VAR 0 1
16207: PPUSH
16208: CALL_OW 110
16212: PUSH
16213: LD_INT 1
16215: EQUAL
16216: AND
16217: IFFALSE 16243
// begin SetTag ( i , 0 ) ;
16219: LD_VAR 0 1
16223: PPUSH
16224: LD_INT 0
16226: PPUSH
16227: CALL_OW 109
// SetFuel ( i , 100 ) ;
16231: LD_VAR 0 1
16235: PPUSH
16236: LD_INT 100
16238: PPUSH
16239: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16243: LD_VAR 0 1
16247: PPUSH
16248: CALL_OW 256
16252: PUSH
16253: LD_INT 500
16255: LESSEQUAL
16256: PUSH
16257: LD_VAR 0 1
16261: PPUSH
16262: CALL_OW 110
16266: PUSH
16267: LD_INT 0
16269: EQUAL
16270: AND
16271: IFFALSE 16314
// begin SetTag ( i , 1 ) ;
16273: LD_VAR 0 1
16277: PPUSH
16278: LD_INT 1
16280: PPUSH
16281: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
16285: LD_VAR 0 1
16289: PPUSH
16290: LD_INT 83
16292: PPUSH
16293: LD_INT 135
16295: PPUSH
16296: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
16300: LD_VAR 0 1
16304: PPUSH
16305: CALL_OW 310
16309: PPUSH
16310: CALL 68223 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
16314: LD_VAR 0 1
16318: PPUSH
16319: CALL_OW 256
16323: PUSH
16324: LD_INT 500
16326: GREATER
16327: PUSH
16328: LD_VAR 0 1
16332: PPUSH
16333: CALL_OW 110
16337: PUSH
16338: LD_INT 0
16340: EQUAL
16341: AND
16342: PUSH
16343: LD_VAR 0 1
16347: PPUSH
16348: CALL_OW 311
16352: AND
16353: PUSH
16354: LD_VAR 0 1
16358: PPUSH
16359: CALL_OW 314
16363: NOT
16364: AND
16365: IFFALSE 16439
// begin if b then
16367: LD_VAR 0 3
16371: IFFALSE 16403
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16373: LD_VAR 0 1
16377: PPUSH
16378: LD_VAR 0 3
16382: PUSH
16383: LD_INT 1
16385: PPUSH
16386: LD_VAR 0 3
16390: PPUSH
16391: CALL_OW 12
16395: ARRAY
16396: PPUSH
16397: CALL_OW 130
16401: GO 16439
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16403: LD_VAR 0 1
16407: PPUSH
16408: LD_INT 94
16410: PPUSH
16411: LD_INT 165
16413: PPUSH
16414: CALL_OW 297
16418: PUSH
16419: LD_INT 8
16421: GREATER
16422: IFFALSE 16439
// ComMoveXY ( i , 94 , 165 ) ;
16424: LD_VAR 0 1
16428: PPUSH
16429: LD_INT 94
16431: PPUSH
16432: LD_INT 165
16434: PPUSH
16435: CALL_OW 111
// end ; end ; end ;
16439: GO 15935
16441: POP
16442: POP
// end ;
16443: PPOPN 6
16445: END
// every 10 10$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp , tmp2 ;
16446: LD_EXP 23
16450: NOT
16451: PUSH
16452: LD_EXP 27
16456: NOT
16457: AND
16458: IFFALSE 17373
16460: GO 16462
16462: DISABLE
16463: LD_INT 0
16465: PPUSH
16466: PPUSH
16467: PPUSH
16468: PPUSH
16469: PPUSH
// begin enable ;
16470: ENABLE
// if Prob ( [ 35 , 45 , 55 , 60 ] [ Difficulty ] ) then
16471: LD_INT 35
16473: PUSH
16474: LD_INT 45
16476: PUSH
16477: LD_INT 55
16479: PUSH
16480: LD_INT 60
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: PUSH
16489: LD_OWVAR 67
16493: ARRAY
16494: PPUSH
16495: CALL_OW 13
16499: IFFALSE 16515
// waveStrength := waveStrength + 1 ;
16501: LD_ADDR_EXP 61
16505: PUSH
16506: LD_EXP 61
16510: PUSH
16511: LD_INT 1
16513: PLUS
16514: ST_TO_ADDR
// if waveStrength > [ 2 , 3 , 4 , 4 ] [ Difficulty ] then
16515: LD_EXP 61
16519: PUSH
16520: LD_INT 2
16522: PUSH
16523: LD_INT 3
16525: PUSH
16526: LD_INT 4
16528: PUSH
16529: LD_INT 4
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: PUSH
16538: LD_OWVAR 67
16542: ARRAY
16543: GREATER
16544: IFFALSE 16576
// begin waveStrength := waveStrength + 2 ;
16546: LD_ADDR_EXP 61
16550: PUSH
16551: LD_EXP 61
16555: PUSH
16556: LD_INT 2
16558: PLUS
16559: ST_TO_ADDR
// disableAttackOnHeike := true ;
16560: LD_ADDR_EXP 27
16564: PUSH
16565: LD_INT 1
16567: ST_TO_ADDR
// disable ;
16568: DISABLE
// wait ( 3 3$00 ) ;
16569: LD_INT 6300
16571: PPUSH
16572: CALL_OW 67
// end ; for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
16576: LD_ADDR_VAR 0 1
16580: PUSH
16581: DOUBLE
16582: LD_INT 1
16584: DEC
16585: ST_TO_ADDR
16586: LD_INT 2
16588: PUSH
16589: LD_INT 2
16591: PUSH
16592: LD_INT 3
16594: PUSH
16595: LD_INT 4
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: PUSH
16604: LD_OWVAR 67
16608: ARRAY
16609: PUSH
16610: FOR_TO
16611: IFFALSE 16772
// begin InitHc ;
16613: CALL_OW 19
// InitVc ;
16617: CALL_OW 20
// uc_side := 3 ;
16621: LD_ADDR_OWVAR 20
16625: PUSH
16626: LD_INT 3
16628: ST_TO_ADDR
// uc_nation := 3 ;
16629: LD_ADDR_OWVAR 21
16633: PUSH
16634: LD_INT 3
16636: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
16637: LD_INT 0
16639: PPUSH
16640: LD_INT 1
16642: PPUSH
16643: LD_OWVAR 67
16647: PUSH
16648: LD_INT 2
16650: PLUS
16651: PPUSH
16652: CALL_OW 380
// un := CreateHuman ;
16656: LD_ADDR_VAR 0 2
16660: PUSH
16661: CALL_OW 44
16665: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
16666: LD_VAR 0 2
16670: PPUSH
16671: LD_INT 160
16673: PPUSH
16674: LD_INT 3
16676: PPUSH
16677: LD_INT 2
16679: PPUSH
16680: LD_INT 0
16682: PPUSH
16683: CALL 68543 0 5
// SetClass ( un , class_bazooker ) ;
16687: LD_VAR 0 2
16691: PPUSH
16692: LD_INT 9
16694: PPUSH
16695: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
16699: LD_ADDR_EXP 60
16703: PUSH
16704: LD_EXP 60
16708: PPUSH
16709: LD_EXP 60
16713: PUSH
16714: LD_INT 1
16716: PLUS
16717: PPUSH
16718: LD_VAR 0 2
16722: PPUSH
16723: CALL_OW 1
16727: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
16728: LD_VAR 0 2
16732: PPUSH
16733: LD_INT 177
16735: PPUSH
16736: LD_INT 17
16738: PPUSH
16739: CALL_OW 111
// wait ( 0 0$2 ) ;
16743: LD_INT 70
16745: PPUSH
16746: CALL_OW 67
// tmp2 := Join ( tmp2 , un ) ;
16750: LD_ADDR_VAR 0 5
16754: PUSH
16755: LD_VAR 0 5
16759: PPUSH
16760: LD_VAR 0 2
16764: PPUSH
16765: CALL 66403 0 2
16769: ST_TO_ADDR
// end ;
16770: GO 16610
16772: POP
16773: POP
// AddComAgressiveMove ( tmp2 , 196 , 53 ) ;
16774: LD_VAR 0 5
16778: PPUSH
16779: LD_INT 196
16781: PPUSH
16782: LD_INT 53
16784: PPUSH
16785: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 199 , 62 ) ;
16789: LD_VAR 0 5
16793: PPUSH
16794: LD_INT 199
16796: PPUSH
16797: LD_INT 62
16799: PPUSH
16800: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 205 , 75 ) ;
16804: LD_VAR 0 5
16808: PPUSH
16809: LD_INT 205
16811: PPUSH
16812: LD_INT 75
16814: PPUSH
16815: CALL_OW 174
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + waveStrength do
16819: LD_ADDR_VAR 0 1
16823: PUSH
16824: DOUBLE
16825: LD_INT 1
16827: DEC
16828: ST_TO_ADDR
16829: LD_INT 2
16831: PUSH
16832: LD_INT 3
16834: PUSH
16835: LD_INT 3
16837: PUSH
16838: LD_INT 4
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: PUSH
16847: LD_OWVAR 67
16851: ARRAY
16852: PUSH
16853: LD_EXP 61
16857: PLUS
16858: PUSH
16859: FOR_TO
16860: IFFALSE 17169
// begin InitHc ;
16862: CALL_OW 19
// InitVc ;
16866: CALL_OW 20
// uc_side := 3 ;
16870: LD_ADDR_OWVAR 20
16874: PUSH
16875: LD_INT 3
16877: ST_TO_ADDR
// uc_nation := 3 ;
16878: LD_ADDR_OWVAR 21
16882: PUSH
16883: LD_INT 3
16885: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
16886: LD_INT 22
16888: PUSH
16889: LD_INT 23
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: PUSH
16896: LD_INT 1
16898: PPUSH
16899: LD_INT 2
16901: PPUSH
16902: CALL_OW 12
16906: ARRAY
16907: PPUSH
16908: LD_INT 1
16910: PPUSH
16911: LD_INT 1
16913: PPUSH
16914: LD_INT 44
16916: PUSH
16917: LD_INT 45
16919: PUSH
16920: LD_INT 43
16922: PUSH
16923: LD_INT 42
16925: PUSH
16926: LD_INT 44
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: PUSH
16936: LD_INT 1
16938: PPUSH
16939: LD_INT 5
16941: PPUSH
16942: CALL_OW 12
16946: ARRAY
16947: PPUSH
16948: LD_INT 99
16950: PPUSH
16951: CALL 33978 0 5
// veh := CreateVehicle ;
16955: LD_ADDR_VAR 0 3
16959: PUSH
16960: CALL_OW 45
16964: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
16965: LD_VAR 0 3
16969: PPUSH
16970: LD_INT 160
16972: PPUSH
16973: LD_INT 3
16975: PPUSH
16976: LD_INT 2
16978: PPUSH
16979: LD_INT 0
16981: PPUSH
16982: CALL 68543 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
16986: LD_ADDR_EXP 60
16990: PUSH
16991: LD_EXP 60
16995: PPUSH
16996: LD_EXP 60
17000: PUSH
17001: LD_INT 1
17003: PLUS
17004: PPUSH
17005: LD_VAR 0 3
17009: PPUSH
17010: CALL_OW 1
17014: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
17015: LD_INT 0
17017: PPUSH
17018: LD_INT 3
17020: PPUSH
17021: LD_OWVAR 67
17025: PUSH
17026: LD_INT 2
17028: PLUS
17029: PPUSH
17030: CALL_OW 380
// un := CreateHuman ;
17034: LD_ADDR_VAR 0 2
17038: PUSH
17039: CALL_OW 44
17043: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17044: LD_VAR 0 2
17048: PPUSH
17049: LD_VAR 0 3
17053: PPUSH
17054: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17058: LD_ADDR_EXP 60
17062: PUSH
17063: LD_EXP 60
17067: PPUSH
17068: LD_EXP 60
17072: PUSH
17073: LD_INT 1
17075: PLUS
17076: PPUSH
17077: LD_VAR 0 2
17081: PPUSH
17082: CALL_OW 1
17086: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
17087: LD_VAR 0 2
17091: PPUSH
17092: LD_INT 177
17094: PPUSH
17095: LD_INT 17
17097: PPUSH
17098: CALL_OW 111
// wait ( 0 0$2 ) ;
17102: LD_INT 70
17104: PPUSH
17105: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17109: LD_ADDR_VAR 0 4
17113: PUSH
17114: LD_VAR 0 4
17118: PPUSH
17119: LD_VAR 0 4
17123: PUSH
17124: LD_INT 1
17126: PLUS
17127: PPUSH
17128: LD_VAR 0 3
17132: PPUSH
17133: CALL_OW 1
17137: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
17138: LD_ADDR_VAR 0 4
17142: PUSH
17143: LD_VAR 0 4
17147: PPUSH
17148: LD_VAR 0 4
17152: PUSH
17153: LD_INT 1
17155: PLUS
17156: PPUSH
17157: LD_VAR 0 2
17161: PPUSH
17162: CALL_OW 1
17166: ST_TO_ADDR
// end ;
17167: GO 16859
17169: POP
17170: POP
// for i in tmp do
17171: LD_ADDR_VAR 0 1
17175: PUSH
17176: LD_VAR 0 4
17180: PUSH
17181: FOR_IN
17182: IFFALSE 17263
// AgressiveMove ( i , [ [ 206 , 37 ] , [ 239 , 53 ] , [ 260 , 67 ] , [ 263 , 79 ] , [ 257 , 105 ] , [ 227 , 97 ] ] ) ;
17184: LD_VAR 0 1
17188: PPUSH
17189: LD_INT 206
17191: PUSH
17192: LD_INT 37
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: LD_INT 239
17201: PUSH
17202: LD_INT 53
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 260
17211: PUSH
17212: LD_INT 67
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PUSH
17219: LD_INT 263
17221: PUSH
17222: LD_INT 79
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: PUSH
17229: LD_INT 257
17231: PUSH
17232: LD_INT 105
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PUSH
17239: LD_INT 227
17241: PUSH
17242: LD_INT 97
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: PPUSH
17257: CALL 69007 0 2
17261: GO 17181
17263: POP
17264: POP
// repeat wait ( 0 0$2 ) ;
17265: LD_INT 70
17267: PPUSH
17268: CALL_OW 67
// for i in tmp do
17272: LD_ADDR_VAR 0 1
17276: PUSH
17277: LD_VAR 0 4
17281: PUSH
17282: FOR_IN
17283: IFFALSE 17350
// if IsDead ( i ) then
17285: LD_VAR 0 1
17289: PPUSH
17290: CALL_OW 301
17294: IFFALSE 17314
// tmp := tmp diff i else
17296: LD_ADDR_VAR 0 4
17300: PUSH
17301: LD_VAR 0 4
17305: PUSH
17306: LD_VAR 0 1
17310: DIFF
17311: ST_TO_ADDR
17312: GO 17348
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
17314: LD_VAR 0 1
17318: PPUSH
17319: LD_INT 81
17321: PUSH
17322: LD_INT 3
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PPUSH
17329: CALL_OW 69
17333: PPUSH
17334: LD_VAR 0 1
17338: PPUSH
17339: CALL_OW 74
17343: PPUSH
17344: CALL_OW 115
17348: GO 17282
17350: POP
17351: POP
// until not tmp ;
17352: LD_VAR 0 4
17356: NOT
17357: IFFALSE 17265
// if firstAttack then
17359: LD_EXP 28
17363: IFFALSE 17373
// firstAttack := false ;
17365: LD_ADDR_EXP 28
17369: PUSH
17370: LD_INT 0
17372: ST_TO_ADDR
// end ;
17373: PPOPN 5
17375: END
// every 12 12$00 + 3 3$00 trigger not omarAttack and not rolfAttack and bergkampfArrived and not disableAttackOnHeike do var i , un , veh , tmp ;
17376: LD_EXP 23
17380: NOT
17381: PUSH
17382: LD_EXP 32
17386: NOT
17387: AND
17388: PUSH
17389: LD_EXP 3
17393: AND
17394: PUSH
17395: LD_EXP 27
17399: NOT
17400: AND
17401: IFFALSE 18318
17403: GO 17405
17405: DISABLE
17406: LD_INT 0
17408: PPUSH
17409: PPUSH
17410: PPUSH
17411: PPUSH
// begin enable ;
17412: ENABLE
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
17413: LD_ADDR_VAR 0 1
17417: PUSH
17418: DOUBLE
17419: LD_INT 1
17421: DEC
17422: ST_TO_ADDR
17423: LD_INT 1
17425: PUSH
17426: LD_INT 2
17428: PUSH
17429: LD_INT 2
17431: PUSH
17432: LD_INT 3
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: PUSH
17441: LD_OWVAR 67
17445: ARRAY
17446: PUSH
17447: FOR_TO
17448: IFFALSE 17749
// begin InitHc ;
17450: CALL_OW 19
// InitVc ;
17454: CALL_OW 20
// uc_side := 3 ;
17458: LD_ADDR_OWVAR 20
17462: PUSH
17463: LD_INT 3
17465: ST_TO_ADDR
// uc_nation := 3 ;
17466: LD_ADDR_OWVAR 21
17470: PUSH
17471: LD_INT 3
17473: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
17474: LD_INT 22
17476: PUSH
17477: LD_INT 23
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PUSH
17484: LD_INT 1
17486: PPUSH
17487: LD_INT 2
17489: PPUSH
17490: CALL_OW 12
17494: ARRAY
17495: PPUSH
17496: LD_INT 1
17498: PPUSH
17499: LD_INT 1
17501: PPUSH
17502: LD_INT 44
17504: PUSH
17505: LD_INT 43
17507: PUSH
17508: LD_INT 42
17510: PUSH
17511: LD_INT 44
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: PUSH
17520: LD_INT 1
17522: PPUSH
17523: LD_INT 4
17525: PPUSH
17526: CALL_OW 12
17530: ARRAY
17531: PPUSH
17532: LD_INT 99
17534: PPUSH
17535: CALL 33978 0 5
// veh := CreateVehicle ;
17539: LD_ADDR_VAR 0 3
17543: PUSH
17544: CALL_OW 45
17548: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
17549: LD_VAR 0 3
17553: PPUSH
17554: LD_INT 5
17556: PPUSH
17557: LD_INT 3
17559: PPUSH
17560: LD_INT 2
17562: PPUSH
17563: LD_INT 0
17565: PPUSH
17566: CALL 68543 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17570: LD_ADDR_EXP 60
17574: PUSH
17575: LD_EXP 60
17579: PPUSH
17580: LD_EXP 60
17584: PUSH
17585: LD_INT 1
17587: PLUS
17588: PPUSH
17589: LD_VAR 0 3
17593: PPUSH
17594: CALL_OW 1
17598: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
17599: LD_INT 0
17601: PPUSH
17602: LD_INT 3
17604: PPUSH
17605: LD_OWVAR 67
17609: PPUSH
17610: CALL_OW 380
// un := CreateHuman ;
17614: LD_ADDR_VAR 0 2
17618: PUSH
17619: CALL_OW 44
17623: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17624: LD_VAR 0 2
17628: PPUSH
17629: LD_VAR 0 3
17633: PPUSH
17634: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17638: LD_ADDR_EXP 60
17642: PUSH
17643: LD_EXP 60
17647: PPUSH
17648: LD_EXP 60
17652: PUSH
17653: LD_INT 1
17655: PLUS
17656: PPUSH
17657: LD_VAR 0 2
17661: PPUSH
17662: CALL_OW 1
17666: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
17667: LD_VAR 0 2
17671: PPUSH
17672: LD_INT 23
17674: PPUSH
17675: LD_INT 7
17677: PPUSH
17678: CALL_OW 111
// wait ( 0 0$2 ) ;
17682: LD_INT 70
17684: PPUSH
17685: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17689: LD_ADDR_VAR 0 4
17693: PUSH
17694: LD_VAR 0 4
17698: PPUSH
17699: LD_VAR 0 4
17703: PUSH
17704: LD_INT 1
17706: PLUS
17707: PPUSH
17708: LD_VAR 0 3
17712: PPUSH
17713: CALL_OW 1
17717: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
17718: LD_ADDR_VAR 0 4
17722: PUSH
17723: LD_VAR 0 4
17727: PPUSH
17728: LD_VAR 0 4
17732: PUSH
17733: LD_INT 1
17735: PLUS
17736: PPUSH
17737: LD_VAR 0 2
17741: PPUSH
17742: CALL_OW 1
17746: ST_TO_ADDR
// end ;
17747: GO 17447
17749: POP
17750: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
17751: LD_ADDR_VAR 0 1
17755: PUSH
17756: DOUBLE
17757: LD_INT 1
17759: DEC
17760: ST_TO_ADDR
17761: LD_INT 2
17763: PUSH
17764: LD_INT 3
17766: PUSH
17767: LD_INT 3
17769: PUSH
17770: LD_INT 4
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: PUSH
17779: LD_OWVAR 67
17783: ARRAY
17784: PUSH
17785: FOR_TO
17786: IFFALSE 18095
// begin InitHc ;
17788: CALL_OW 19
// InitVc ;
17792: CALL_OW 20
// uc_side := 3 ;
17796: LD_ADDR_OWVAR 20
17800: PUSH
17801: LD_INT 3
17803: ST_TO_ADDR
// uc_nation := 3 ;
17804: LD_ADDR_OWVAR 21
17808: PUSH
17809: LD_INT 3
17811: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
17812: LD_INT 22
17814: PUSH
17815: LD_INT 23
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: LD_INT 1
17824: PPUSH
17825: LD_INT 2
17827: PPUSH
17828: CALL_OW 12
17832: ARRAY
17833: PPUSH
17834: LD_INT 1
17836: PPUSH
17837: LD_INT 1
17839: PPUSH
17840: LD_INT 44
17842: PUSH
17843: LD_INT 45
17845: PUSH
17846: LD_INT 43
17848: PUSH
17849: LD_INT 42
17851: PUSH
17852: LD_INT 44
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 1
17864: PPUSH
17865: LD_INT 5
17867: PPUSH
17868: CALL_OW 12
17872: ARRAY
17873: PPUSH
17874: LD_INT 99
17876: PPUSH
17877: CALL 33978 0 5
// veh := CreateVehicle ;
17881: LD_ADDR_VAR 0 3
17885: PUSH
17886: CALL_OW 45
17890: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
17891: LD_VAR 0 3
17895: PPUSH
17896: LD_INT 127
17898: PPUSH
17899: LD_INT 243
17901: PPUSH
17902: LD_INT 0
17904: PPUSH
17905: LD_INT 0
17907: PPUSH
17908: CALL 68543 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17912: LD_ADDR_EXP 60
17916: PUSH
17917: LD_EXP 60
17921: PPUSH
17922: LD_EXP 60
17926: PUSH
17927: LD_INT 1
17929: PLUS
17930: PPUSH
17931: LD_VAR 0 3
17935: PPUSH
17936: CALL_OW 1
17940: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
17941: LD_INT 0
17943: PPUSH
17944: LD_INT 3
17946: PPUSH
17947: LD_OWVAR 67
17951: PUSH
17952: LD_INT 2
17954: PLUS
17955: PPUSH
17956: CALL_OW 380
// un := CreateHuman ;
17960: LD_ADDR_VAR 0 2
17964: PUSH
17965: CALL_OW 44
17969: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17970: LD_VAR 0 2
17974: PPUSH
17975: LD_VAR 0 3
17979: PPUSH
17980: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17984: LD_ADDR_EXP 60
17988: PUSH
17989: LD_EXP 60
17993: PPUSH
17994: LD_EXP 60
17998: PUSH
17999: LD_INT 1
18001: PLUS
18002: PPUSH
18003: LD_VAR 0 2
18007: PPUSH
18008: CALL_OW 1
18012: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
18013: LD_VAR 0 2
18017: PPUSH
18018: LD_INT 130
18020: PPUSH
18021: LD_INT 233
18023: PPUSH
18024: CALL_OW 111
// wait ( 0 0$2 ) ;
18028: LD_INT 70
18030: PPUSH
18031: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18035: LD_ADDR_VAR 0 4
18039: PUSH
18040: LD_VAR 0 4
18044: PPUSH
18045: LD_VAR 0 4
18049: PUSH
18050: LD_INT 1
18052: PLUS
18053: PPUSH
18054: LD_VAR 0 3
18058: PPUSH
18059: CALL_OW 1
18063: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18064: LD_ADDR_VAR 0 4
18068: PUSH
18069: LD_VAR 0 4
18073: PPUSH
18074: LD_VAR 0 4
18078: PUSH
18079: LD_INT 1
18081: PLUS
18082: PPUSH
18083: LD_VAR 0 2
18087: PPUSH
18088: CALL_OW 1
18092: ST_TO_ADDR
// end ;
18093: GO 17785
18095: POP
18096: POP
// for i in tmp do
18097: LD_ADDR_VAR 0 1
18101: PUSH
18102: LD_VAR 0 4
18106: PUSH
18107: FOR_IN
18108: IFFALSE 18222
// AgressiveMove ( i , [ [ 130 , 229 ] , [ 137 , 216 ] , [ 142 , 194 ] , [ 140 , 169 ] , [ 146 , 162 ] , [ 174 , 161 ] , [ 158 , 134 ] , [ 136 , 107 ] , [ 115 , 89 ] ] ) ;
18110: LD_VAR 0 1
18114: PPUSH
18115: LD_INT 130
18117: PUSH
18118: LD_INT 229
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 137
18127: PUSH
18128: LD_INT 216
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 142
18137: PUSH
18138: LD_INT 194
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 140
18147: PUSH
18148: LD_INT 169
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: LD_INT 146
18157: PUSH
18158: LD_INT 162
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 174
18167: PUSH
18168: LD_INT 161
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: LD_INT 158
18177: PUSH
18178: LD_INT 134
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: LD_INT 136
18187: PUSH
18188: LD_INT 107
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 115
18197: PUSH
18198: LD_INT 89
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: PPUSH
18216: CALL 69007 0 2
18220: GO 18107
18222: POP
18223: POP
// repeat wait ( 0 0$2 ) ;
18224: LD_INT 70
18226: PPUSH
18227: CALL_OW 67
// for i in tmp do
18231: LD_ADDR_VAR 0 1
18235: PUSH
18236: LD_VAR 0 4
18240: PUSH
18241: FOR_IN
18242: IFFALSE 18309
// if IsDead ( i ) then
18244: LD_VAR 0 1
18248: PPUSH
18249: CALL_OW 301
18253: IFFALSE 18273
// tmp := tmp diff i else
18255: LD_ADDR_VAR 0 4
18259: PUSH
18260: LD_VAR 0 4
18264: PUSH
18265: LD_VAR 0 1
18269: DIFF
18270: ST_TO_ADDR
18271: GO 18307
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18273: LD_VAR 0 1
18277: PPUSH
18278: LD_INT 81
18280: PUSH
18281: LD_INT 3
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PPUSH
18288: CALL_OW 69
18292: PPUSH
18293: LD_VAR 0 1
18297: PPUSH
18298: CALL_OW 74
18302: PPUSH
18303: CALL_OW 115
18307: GO 18241
18309: POP
18310: POP
// until not tmp ;
18311: LD_VAR 0 4
18315: NOT
18316: IFFALSE 18224
// end ;
18318: PPOPN 4
18320: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
18321: LD_EXP 6
18325: IFFALSE 18784
18327: GO 18329
18329: DISABLE
18330: LD_INT 0
18332: PPUSH
18333: PPUSH
18334: PPUSH
18335: PPUSH
// begin wait ( 3 3$00 ) ;
18336: LD_INT 6300
18338: PPUSH
18339: CALL_OW 67
// for i := 1 to 3 do
18343: LD_ADDR_VAR 0 1
18347: PUSH
18348: DOUBLE
18349: LD_INT 1
18351: DEC
18352: ST_TO_ADDR
18353: LD_INT 3
18355: PUSH
18356: FOR_TO
18357: IFFALSE 18656
// begin InitHc ;
18359: CALL_OW 19
// InitVc ;
18363: CALL_OW 20
// uc_side := 3 ;
18367: LD_ADDR_OWVAR 20
18371: PUSH
18372: LD_INT 3
18374: ST_TO_ADDR
// uc_nation := 3 ;
18375: LD_ADDR_OWVAR 21
18379: PUSH
18380: LD_INT 3
18382: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
18383: LD_INT 22
18385: PUSH
18386: LD_INT 23
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PUSH
18393: LD_INT 1
18395: PPUSH
18396: LD_INT 2
18398: PPUSH
18399: CALL_OW 12
18403: ARRAY
18404: PPUSH
18405: LD_INT 1
18407: PPUSH
18408: LD_INT 1
18410: PPUSH
18411: LD_INT 44
18413: PUSH
18414: LD_INT 43
18416: PUSH
18417: LD_INT 42
18419: PUSH
18420: LD_INT 44
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: PUSH
18429: LD_INT 1
18431: PPUSH
18432: LD_INT 4
18434: PPUSH
18435: CALL_OW 12
18439: ARRAY
18440: PPUSH
18441: LD_INT 99
18443: PPUSH
18444: CALL 33978 0 5
// veh := CreateVehicle ;
18448: LD_ADDR_VAR 0 3
18452: PUSH
18453: CALL_OW 45
18457: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
18458: LD_VAR 0 3
18462: PPUSH
18463: LD_INT 293
18465: PPUSH
18466: LD_INT 246
18468: PPUSH
18469: LD_INT 5
18471: PPUSH
18472: LD_INT 0
18474: PPUSH
18475: CALL 68543 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18479: LD_ADDR_EXP 60
18483: PUSH
18484: LD_EXP 60
18488: PPUSH
18489: LD_EXP 60
18493: PUSH
18494: LD_INT 1
18496: PLUS
18497: PPUSH
18498: LD_VAR 0 3
18502: PPUSH
18503: CALL_OW 1
18507: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
18508: LD_INT 0
18510: PPUSH
18511: LD_INT 3
18513: PPUSH
18514: LD_INT 3
18516: PPUSH
18517: CALL_OW 380
// un := CreateHuman ;
18521: LD_ADDR_VAR 0 2
18525: PUSH
18526: CALL_OW 44
18530: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18531: LD_VAR 0 2
18535: PPUSH
18536: LD_VAR 0 3
18540: PPUSH
18541: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18545: LD_ADDR_EXP 60
18549: PUSH
18550: LD_EXP 60
18554: PPUSH
18555: LD_EXP 60
18559: PUSH
18560: LD_INT 1
18562: PLUS
18563: PPUSH
18564: LD_VAR 0 2
18568: PPUSH
18569: CALL_OW 1
18573: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
18574: LD_VAR 0 2
18578: PPUSH
18579: LD_INT 273
18581: PPUSH
18582: LD_INT 227
18584: PPUSH
18585: CALL_OW 111
// wait ( 0 0$2 ) ;
18589: LD_INT 70
18591: PPUSH
18592: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18596: LD_ADDR_VAR 0 4
18600: PUSH
18601: LD_VAR 0 4
18605: PPUSH
18606: LD_VAR 0 4
18610: PUSH
18611: LD_INT 1
18613: PLUS
18614: PPUSH
18615: LD_VAR 0 3
18619: PPUSH
18620: CALL_OW 1
18624: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18625: LD_ADDR_VAR 0 4
18629: PUSH
18630: LD_VAR 0 4
18634: PPUSH
18635: LD_VAR 0 4
18639: PUSH
18640: LD_INT 1
18642: PLUS
18643: PPUSH
18644: LD_VAR 0 2
18648: PPUSH
18649: CALL_OW 1
18653: ST_TO_ADDR
// end ;
18654: GO 18356
18656: POP
18657: POP
// for i in tmp do
18658: LD_ADDR_VAR 0 1
18662: PUSH
18663: LD_VAR 0 4
18667: PUSH
18668: FOR_IN
18669: IFFALSE 18688
// ComAgressiveMove ( i , 330 , 231 ) ;
18671: LD_VAR 0 1
18675: PPUSH
18676: LD_INT 330
18678: PPUSH
18679: LD_INT 231
18681: PPUSH
18682: CALL_OW 114
18686: GO 18668
18688: POP
18689: POP
// repeat wait ( 0 0$2 ) ;
18690: LD_INT 70
18692: PPUSH
18693: CALL_OW 67
// for i in tmp do
18697: LD_ADDR_VAR 0 1
18701: PUSH
18702: LD_VAR 0 4
18706: PUSH
18707: FOR_IN
18708: IFFALSE 18775
// if IsDead ( i ) then
18710: LD_VAR 0 1
18714: PPUSH
18715: CALL_OW 301
18719: IFFALSE 18739
// tmp := tmp diff i else
18721: LD_ADDR_VAR 0 4
18725: PUSH
18726: LD_VAR 0 4
18730: PUSH
18731: LD_VAR 0 1
18735: DIFF
18736: ST_TO_ADDR
18737: GO 18773
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18739: LD_VAR 0 1
18743: PPUSH
18744: LD_INT 81
18746: PUSH
18747: LD_INT 3
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PPUSH
18754: CALL_OW 69
18758: PPUSH
18759: LD_VAR 0 1
18763: PPUSH
18764: CALL_OW 74
18768: PPUSH
18769: CALL_OW 115
18773: GO 18707
18775: POP
18776: POP
// until not tmp ;
18777: LD_VAR 0 4
18781: NOT
18782: IFFALSE 18690
// end ;
18784: PPOPN 4
18786: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
18787: LD_INT 3
18789: PUSH
18790: LD_INT 22
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 32
18806: PUSH
18807: LD_INT 1
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PPUSH
18818: CALL_OW 69
18822: IFFALSE 18906
18824: GO 18826
18826: DISABLE
18827: LD_INT 0
18829: PPUSH
// begin enable ;
18830: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
18831: LD_ADDR_VAR 0 1
18835: PUSH
18836: LD_INT 3
18838: PUSH
18839: LD_INT 22
18841: PUSH
18842: LD_INT 2
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 32
18855: PUSH
18856: LD_INT 1
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PPUSH
18867: CALL_OW 69
18871: PUSH
18872: FOR_IN
18873: IFFALSE 18904
// if GetFuel ( i ) < 3 then
18875: LD_VAR 0 1
18879: PPUSH
18880: CALL_OW 261
18884: PUSH
18885: LD_INT 3
18887: LESS
18888: IFFALSE 18902
// SetFuel ( i , 3 ) ;
18890: LD_VAR 0 1
18894: PPUSH
18895: LD_INT 3
18897: PPUSH
18898: CALL_OW 240
18902: GO 18872
18904: POP
18905: POP
// end ; end_of_file
18906: PPOPN 1
18908: END
// export function Action ; begin
18909: LD_INT 0
18911: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
18912: LD_INT 2
18914: PPUSH
18915: LD_INT 4
18917: PPUSH
18918: CALL_OW 332
// Video ( true ) ;
18922: LD_INT 1
18924: PPUSH
18925: CALL 66375 0 1
// music_nat := 3 ;
18929: LD_ADDR_OWVAR 71
18933: PUSH
18934: LD_INT 3
18936: ST_TO_ADDR
// music_class := music_recon ;
18937: LD_ADDR_OWVAR 72
18941: PUSH
18942: LD_INT 3
18944: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
18945: LD_INT 213
18947: PPUSH
18948: LD_INT 89
18950: PPUSH
18951: CALL_OW 86
// if Kaia and Olaf then
18955: LD_EXP 38
18959: PUSH
18960: LD_EXP 42
18964: AND
18965: IFFALSE 18971
// SceneKaiaWithOlaf ;
18967: CALL 19049 0 0
// if Givi and Kamil then
18971: LD_EXP 34
18975: PUSH
18976: LD_EXP 37
18980: AND
18981: IFFALSE 18987
// SceneWithGiviAndKamil ;
18983: CALL 19620 0 0
// tick := 0 ;
18987: LD_ADDR_OWVAR 1
18991: PUSH
18992: LD_INT 0
18994: ST_TO_ADDR
// wait ( 3 ) ;
18995: LD_INT 3
18997: PPUSH
18998: CALL_OW 67
// Video ( false ) ;
19002: LD_INT 0
19004: PPUSH
19005: CALL 66375 0 1
// ChangeMissionObjectives ( M1 ) ;
19009: LD_STRING M1
19011: PPUSH
19012: CALL_OW 337
// music_nat := music_auto ;
19016: LD_ADDR_OWVAR 71
19020: PUSH
19021: LD_INT 0
19023: ST_TO_ADDR
// music_class := music_auto ;
19024: LD_ADDR_OWVAR 72
19028: PUSH
19029: LD_INT 0
19031: ST_TO_ADDR
// SaveForQuickRestart ;
19032: CALL_OW 22
// gameActive := true ;
19036: LD_ADDR_EXP 31
19040: PUSH
19041: LD_INT 1
19043: ST_TO_ADDR
// end ;
19044: LD_VAR 0 1
19048: RET
// export function SceneKaiaWithOlaf ; begin
19049: LD_INT 0
19051: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
19052: LD_INT 22
19054: PUSH
19055: LD_INT 2
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 30
19064: PUSH
19065: LD_INT 3
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PPUSH
19076: CALL_OW 69
19080: PPUSH
19081: LD_INT 14
19083: PPUSH
19084: LD_INT 1
19086: PPUSH
19087: LD_INT 1
19089: PPUSH
19090: LD_INT 26
19092: PPUSH
19093: CALL_OW 125
// wait ( 0 0$1 ) ;
19097: LD_INT 35
19099: PPUSH
19100: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
19104: LD_EXP 38
19108: PPUSH
19109: LD_STRING DK-Mem-1
19111: PPUSH
19112: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
19116: LD_EXP 38
19120: PPUSH
19121: LD_STRING DK-Mem-2
19123: PPUSH
19124: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
19128: LD_EXP 42
19132: PPUSH
19133: LD_STRING DO-Mem-3
19135: PPUSH
19136: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
19140: LD_EXP 38
19144: PPUSH
19145: LD_STRING DK-Mem-4
19147: PPUSH
19148: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
19152: LD_EXP 42
19156: PPUSH
19157: LD_STRING DO-Mem-5
19159: PPUSH
19160: CALL_OW 88
// wait ( 0 0$2 ) ;
19164: LD_INT 70
19166: PPUSH
19167: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
19171: LD_INT 22
19173: PUSH
19174: LD_INT 2
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 30
19183: PUSH
19184: LD_INT 3
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PPUSH
19195: CALL_OW 69
19199: PPUSH
19200: LD_INT 90
19202: PPUSH
19203: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
19207: LD_EXP 42
19211: PPUSH
19212: LD_STRING DO-Mem-6
19214: PPUSH
19215: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
19219: LD_EXP 38
19223: PPUSH
19224: LD_STRING DK-Mem-7
19226: PPUSH
19227: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
19231: LD_EXP 33
19235: PPUSH
19236: LD_EXP 38
19240: PPUSH
19241: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
19245: LD_EXP 33
19249: PPUSH
19250: LD_STRING DH-Mem-8
19252: PPUSH
19253: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
19257: LD_EXP 38
19261: PUSH
19262: LD_EXP 42
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PPUSH
19271: LD_EXP 33
19275: PPUSH
19276: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
19280: LD_EXP 42
19284: PPUSH
19285: LD_STRING DO-Mem-9
19287: PPUSH
19288: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
19292: LD_EXP 42
19296: PPUSH
19297: LD_STRING DO-Mem-10
19299: PPUSH
19300: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
19304: LD_EXP 42
19308: PPUSH
19309: LD_STRING DO-Mem-11
19311: PPUSH
19312: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
19316: LD_EXP 42
19320: PPUSH
19321: LD_STRING DO-Mem-12
19323: PPUSH
19324: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
19328: LD_EXP 38
19332: PPUSH
19333: LD_STRING DK-Mem-13
19335: PPUSH
19336: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
19340: LD_EXP 38
19344: PPUSH
19345: LD_STRING DK-Mem-14
19347: PPUSH
19348: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
19352: LD_EXP 38
19356: PPUSH
19357: LD_STRING DK-Mem-15
19359: PPUSH
19360: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
19364: LD_EXP 38
19368: PPUSH
19369: LD_STRING DK-Mem-16
19371: PPUSH
19372: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
19376: LD_EXP 38
19380: PPUSH
19381: LD_STRING DK-Mem-17
19383: PPUSH
19384: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
19388: LD_EXP 42
19392: PPUSH
19393: LD_EXP 38
19397: PPUSH
19398: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
19402: LD_EXP 42
19406: PPUSH
19407: LD_STRING DO-Mem-18
19409: PPUSH
19410: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
19414: LD_EXP 38
19418: PPUSH
19419: LD_EXP 42
19423: PPUSH
19424: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
19428: LD_EXP 38
19432: PPUSH
19433: LD_STRING DK-Mem-19
19435: PPUSH
19436: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
19440: LD_EXP 42
19444: PPUSH
19445: LD_INT 214
19447: PPUSH
19448: LD_INT 86
19450: PPUSH
19451: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
19455: LD_EXP 42
19459: PPUSH
19460: LD_EXP 38
19464: PPUSH
19465: CALL_OW 179
// if Givi then
19469: LD_EXP 34
19473: IFFALSE 19504
// begin ComMoveXY ( Givi , 217 , 86 ) ;
19475: LD_EXP 34
19479: PPUSH
19480: LD_INT 217
19482: PPUSH
19483: LD_INT 86
19485: PPUSH
19486: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
19490: LD_EXP 34
19494: PPUSH
19495: LD_EXP 33
19499: PPUSH
19500: CALL_OW 179
// end ; if Kamil then
19504: LD_EXP 37
19508: IFFALSE 19548
// begin ComExit ( Kamil ) ;
19510: LD_EXP 37
19514: PPUSH
19515: CALL 66801 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
19519: LD_EXP 37
19523: PPUSH
19524: LD_INT 212
19526: PPUSH
19527: LD_INT 86
19529: PPUSH
19530: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
19534: LD_EXP 37
19538: PPUSH
19539: LD_EXP 33
19543: PPUSH
19544: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
19548: LD_INT 70
19550: PPUSH
19551: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
19555: LD_EXP 33
19559: PPUSH
19560: LD_STRING DH-Mem-20
19562: PPUSH
19563: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
19567: LD_EXP 42
19571: PPUSH
19572: LD_INT 215
19574: PPUSH
19575: LD_INT 87
19577: PPUSH
19578: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
19582: LD_EXP 42
19586: PPUSH
19587: LD_EXP 38
19591: PPUSH
19592: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
19596: LD_EXP 38
19600: PPUSH
19601: LD_STRING DK-Mem-21
19603: PPUSH
19604: CALL_OW 88
// wait ( 0 0$2 ) ;
19608: LD_INT 70
19610: PPUSH
19611: CALL_OW 67
// end ;
19615: LD_VAR 0 1
19619: RET
// export function SceneWithGiviAndKamil ; var p ; begin
19620: LD_INT 0
19622: PPUSH
19623: PPUSH
// if Markov then
19624: LD_EXP 40
19628: IFFALSE 19746
// begin p := 0 ;
19630: LD_ADDR_VAR 0 2
19634: PUSH
19635: LD_INT 0
19637: ST_TO_ADDR
// if IsInUnit ( Markov ) then
19638: LD_EXP 40
19642: PPUSH
19643: CALL_OW 310
19647: IFFALSE 19658
// ComExit ( Markov ) ;
19649: LD_EXP 40
19653: PPUSH
19654: CALL 66801 0 1
// wait ( 0 0$1 ) ;
19658: LD_INT 35
19660: PPUSH
19661: CALL_OW 67
// ComMoveXY ( Markov , 212 , 88 ) ;
19665: LD_EXP 40
19669: PPUSH
19670: LD_INT 212
19672: PPUSH
19673: LD_INT 88
19675: PPUSH
19676: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19680: LD_INT 35
19682: PPUSH
19683: CALL_OW 67
// p := Inc ( p ) ;
19687: LD_ADDR_VAR 0 2
19691: PUSH
19692: LD_VAR 0 2
19696: PPUSH
19697: CALL 67764 0 1
19701: ST_TO_ADDR
// until GetDistUnits ( Markov , Heike ) < 6 or p > 12 ;
19702: LD_EXP 40
19706: PPUSH
19707: LD_EXP 33
19711: PPUSH
19712: CALL_OW 296
19716: PUSH
19717: LD_INT 6
19719: LESS
19720: PUSH
19721: LD_VAR 0 2
19725: PUSH
19726: LD_INT 12
19728: GREATER
19729: OR
19730: IFFALSE 19680
// AddComTurnUnit ( Markov , Heike ) ;
19732: LD_EXP 40
19736: PPUSH
19737: LD_EXP 33
19741: PPUSH
19742: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
19746: LD_EXP 34
19750: PPUSH
19751: LD_STRING DG-Obj-1
19753: PPUSH
19754: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
19758: LD_EXP 37
19762: PPUSH
19763: LD_STRING DKam-Obj-2
19765: PPUSH
19766: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
19770: LD_EXP 33
19774: PPUSH
19775: LD_EXP 37
19779: PPUSH
19780: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
19784: LD_EXP 37
19788: PPUSH
19789: LD_STRING DKam-Obj-3
19791: PPUSH
19792: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
19796: LD_EXP 40
19800: PPUSH
19801: LD_STRING DMar-Obj-4
19803: PPUSH
19804: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
19808: LD_EXP 37
19812: PPUSH
19813: LD_STRING DKam-Obj-6
19815: PPUSH
19816: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
19820: LD_EXP 37
19824: PPUSH
19825: LD_STRING DKam-Obj-7
19827: PPUSH
19828: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
19832: LD_EXP 37
19836: PPUSH
19837: LD_STRING DKam-Obj-8
19839: PPUSH
19840: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
19844: LD_EXP 33
19848: PPUSH
19849: LD_STRING DH-Obj-9
19851: PPUSH
19852: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
19856: LD_EXP 37
19860: PPUSH
19861: LD_STRING DKam-Obj-10
19863: PPUSH
19864: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
19868: LD_EXP 37
19872: PPUSH
19873: LD_STRING DKam-Obj-11
19875: PPUSH
19876: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
19880: LD_EXP 40
19884: PPUSH
19885: LD_STRING DMar-Obj-12
19887: PPUSH
19888: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
19892: LD_EXP 40
19896: PPUSH
19897: LD_STRING DMar-Obj-13
19899: PPUSH
19900: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
19904: LD_EXP 40
19908: PPUSH
19909: LD_STRING DMar-Obj-14
19911: PPUSH
19912: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
19916: LD_EXP 42
19920: PPUSH
19921: LD_STRING DO-Obj-15
19923: PPUSH
19924: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
19928: LD_EXP 42
19932: PPUSH
19933: LD_STRING DO-Obj-16
19935: PPUSH
19936: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
19940: LD_EXP 33
19944: PPUSH
19945: LD_STRING DH-Obj-17
19947: PPUSH
19948: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
19952: LD_EXP 42
19956: PPUSH
19957: LD_STRING DO-Obj-18
19959: PPUSH
19960: CALL_OW 88
// end ;
19964: LD_VAR 0 1
19968: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
19969: LD_INT 34
19971: PUSH
19972: LD_INT 92
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PPUSH
19979: CALL_OW 69
19983: IFFALSE 20178
19985: GO 19987
19987: DISABLE
19988: LD_INT 0
19990: PPUSH
// begin wait ( 0 0$2 ) ;
19991: LD_INT 70
19993: PPUSH
19994: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
19998: LD_INT 34
20000: PUSH
20001: LD_INT 92
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: PPUSH
20008: CALL_OW 69
20012: PPUSH
20013: CALL_OW 87
// DialogueOn ;
20017: CALL_OW 6
// if Markov then
20021: LD_EXP 40
20025: IFFALSE 20053
// begin Say ( Markov , DMar-Grn-1 ) ;
20027: LD_EXP 40
20031: PPUSH
20032: LD_STRING DMar-Grn-1
20034: PPUSH
20035: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
20039: LD_EXP 33
20043: PPUSH
20044: LD_STRING DH-Grn-2
20046: PPUSH
20047: CALL_OW 88
// end else
20051: GO 20152
// if heikeSecondSquad then
20053: LD_EXP 48
20057: IFFALSE 20152
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20059: LD_ADDR_VAR 0 1
20063: PUSH
20064: LD_EXP 48
20068: PUSH
20069: LD_INT 1
20071: PPUSH
20072: LD_EXP 48
20076: PPUSH
20077: CALL_OW 12
20081: ARRAY
20082: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20083: LD_VAR 0 1
20087: PPUSH
20088: CALL_OW 258
20092: PUSH
20093: LD_INT 1
20095: DOUBLE
20096: EQUAL
20097: IFTRUE 20101
20099: GO 20116
20101: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
20102: LD_VAR 0 1
20106: PPUSH
20107: LD_STRING DArm-Grn-1
20109: PPUSH
20110: CALL_OW 88
20114: GO 20140
20116: LD_INT 2
20118: DOUBLE
20119: EQUAL
20120: IFTRUE 20124
20122: GO 20139
20124: POP
// Say ( random , DArf-Grn-1 ) ; end ;
20125: LD_VAR 0 1
20129: PPUSH
20130: LD_STRING DArf-Grn-1
20132: PPUSH
20133: CALL_OW 88
20137: GO 20140
20139: POP
// Say ( Heike , DH-Grn-2 ) ;
20140: LD_EXP 33
20144: PPUSH
20145: LD_STRING DH-Grn-2
20147: PPUSH
20148: CALL_OW 88
// end ; DialogueOff ;
20152: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
20156: LD_STRING MortarConstructed
20158: PPUSH
20159: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
20163: LD_STRING SelfPropelledMortar
20165: PPUSH
20166: CALL_OW 339
// mortarConstructed := true ;
20170: LD_ADDR_EXP 15
20174: PUSH
20175: LD_INT 1
20177: ST_TO_ADDR
// end ;
20178: PPOPN 1
20180: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
20181: LD_INT 2
20183: PPUSH
20184: LD_INT 8
20186: PPUSH
20187: CALL_OW 294
20191: IFFALSE 20334
20193: GO 20195
20195: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
20196: LD_INT 200
20198: PPUSH
20199: LD_INT 162
20201: PPUSH
20202: LD_INT 2
20204: PPUSH
20205: LD_INT 6
20207: NEG
20208: PPUSH
20209: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
20213: LD_INT 200
20215: PPUSH
20216: LD_INT 162
20218: PPUSH
20219: LD_INT 2
20221: PPUSH
20222: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
20226: LD_INT 200
20228: PPUSH
20229: LD_INT 162
20231: PPUSH
20232: CALL_OW 84
// if not IsOk ( Kurt ) then
20236: LD_EXP 44
20240: PPUSH
20241: CALL_OW 302
20245: NOT
20246: IFFALSE 20250
// exit ;
20248: GO 20334
// Say ( Kurt , DKs-Otpst-2-1 ) ;
20250: LD_EXP 44
20254: PPUSH
20255: LD_STRING DKs-Otpst-2-1
20257: PPUSH
20258: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
20262: LD_EXP 38
20266: PPUSH
20267: LD_STRING DK-Otpst-2-2
20269: PPUSH
20270: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
20274: LD_EXP 44
20278: PPUSH
20279: LD_STRING DKs-Otpst-2-3
20281: PPUSH
20282: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
20286: LD_EXP 44
20290: PPUSH
20291: LD_STRING DKs-Otpst-2-4
20293: PPUSH
20294: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
20298: LD_EXP 44
20302: PPUSH
20303: LD_STRING DKs-Otpst-2-5
20305: PPUSH
20306: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
20310: LD_EXP 37
20314: PPUSH
20315: LD_STRING DKam-Otpst-2-6
20317: PPUSH
20318: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
20322: LD_EXP 44
20326: PPUSH
20327: LD_STRING DKs-Otpst-2-7
20329: PPUSH
20330: CALL_OW 88
// end ;
20334: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
20335: LD_INT 8
20337: PPUSH
20338: LD_INT 22
20340: PUSH
20341: LD_INT 3
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 21
20350: PUSH
20351: LD_INT 3
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PPUSH
20362: CALL_OW 70
20366: NOT
20367: PUSH
20368: LD_EXP 3
20372: NOT
20373: AND
20374: IFFALSE 20622
20376: GO 20378
20378: DISABLE
20379: LD_INT 0
20381: PPUSH
// begin outpostDestroyed := true ;
20382: LD_ADDR_EXP 4
20386: PUSH
20387: LD_INT 1
20389: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
20390: LD_INT 22
20392: PUSH
20393: LD_INT 2
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PUSH
20400: LD_INT 34
20402: PUSH
20403: LD_INT 92
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 92
20412: PUSH
20413: LD_INT 195
20415: PUSH
20416: LD_INT 164
20418: PUSH
20419: LD_INT 12
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: LIST
20432: PPUSH
20433: CALL_OW 69
20437: NOT
20438: IFFALSE 20442
// exit ;
20440: GO 20622
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
20442: LD_EXP 34
20446: PPUSH
20447: CALL_OW 302
20451: NOT
20452: PUSH
20453: LD_EXP 38
20457: PPUSH
20458: CALL_OW 302
20462: NOT
20463: OR
20464: IFFALSE 20468
// exit ;
20466: GO 20622
// Say ( Givi , DG-Otpst-1-1 ) ;
20468: LD_EXP 34
20472: PPUSH
20473: LD_STRING DG-Otpst-1-1
20475: PPUSH
20476: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
20480: LD_EXP 38
20484: PPUSH
20485: LD_STRING DK-Otpst-1-2
20487: PPUSH
20488: CALL_OW 88
// if IsOk ( Markov ) then
20492: LD_EXP 40
20496: PPUSH
20497: CALL_OW 302
20501: IFFALSE 20529
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
20503: LD_EXP 40
20507: PPUSH
20508: LD_STRING DMar-Otpst-1-3
20510: PPUSH
20511: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
20515: LD_EXP 40
20519: PPUSH
20520: LD_STRING DMar-Otpst-1-4
20522: PPUSH
20523: CALL_OW 88
// end else
20527: GO 20610
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20529: LD_ADDR_VAR 0 1
20533: PUSH
20534: LD_EXP 48
20538: PUSH
20539: LD_INT 1
20541: PPUSH
20542: LD_EXP 48
20546: PPUSH
20547: CALL_OW 12
20551: ARRAY
20552: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20553: LD_VAR 0 1
20557: PPUSH
20558: CALL_OW 258
20562: PUSH
20563: LD_INT 1
20565: DOUBLE
20566: EQUAL
20567: IFTRUE 20571
20569: GO 20586
20571: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
20572: LD_VAR 0 1
20576: PPUSH
20577: LD_STRING DArm-Otpst-1-a-3
20579: PPUSH
20580: CALL_OW 88
20584: GO 20610
20586: LD_INT 2
20588: DOUBLE
20589: EQUAL
20590: IFTRUE 20594
20592: GO 20609
20594: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
20595: LD_VAR 0 1
20599: PPUSH
20600: LD_STRING DArf-Otpst-1-a-3
20602: PPUSH
20603: CALL_OW 88
20607: GO 20610
20609: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
20610: LD_EXP 34
20614: PPUSH
20615: LD_STRING DG-Otpst-1-5
20617: PPUSH
20618: CALL_OW 88
// end ;
20622: PPOPN 1
20624: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
20625: LD_EXP 38
20629: PPUSH
20630: CALL_OW 256
20634: PUSH
20635: LD_INT 10
20637: LESS
20638: IFFALSE 20752
20640: GO 20642
20642: DISABLE
// begin DialogueOn ;
20643: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
20647: LD_EXP 38
20651: PPUSH
20652: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
20656: LD_EXP 38
20660: PPUSH
20661: LD_STRING DK-Dead-1
20663: PPUSH
20664: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
20668: LD_EXP 33
20672: PPUSH
20673: LD_STRING DH-Dead-2
20675: PPUSH
20676: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
20680: LD_EXP 38
20684: PPUSH
20685: LD_STRING DK-Dead-3
20687: PPUSH
20688: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
20692: LD_EXP 33
20696: PPUSH
20697: LD_STRING DH-Dead-4
20699: PPUSH
20700: CALL_OW 88
// if IsOk ( Mike ) then
20704: LD_EXP 35
20708: PPUSH
20709: CALL_OW 302
20713: IFFALSE 20739
// begin Say ( Mike , DM-Dead-5 ) ;
20715: LD_EXP 35
20719: PPUSH
20720: LD_STRING DM-Dead-5
20722: PPUSH
20723: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
20727: LD_EXP 33
20731: PPUSH
20732: LD_STRING DH-Dead-6
20734: PPUSH
20735: CALL_OW 88
// end ; DialogueOff ;
20739: CALL_OW 7
// KillUnit ( Kaia ) ;
20743: LD_EXP 38
20747: PPUSH
20748: CALL_OW 66
// end ;
20752: END
// every 0 0$1 trigger tick >= 15 15$00 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
20753: LD_OWVAR 1
20757: PUSH
20758: LD_INT 31500
20760: GREATEREQUAL
20761: PUSH
20762: LD_EXP 5
20766: PUSH
20767: LD_INT 5
20769: GREATER
20770: OR
20771: PUSH
20772: LD_INT 22
20774: PUSH
20775: LD_INT 2
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 92
20784: PUSH
20785: LD_INT 103
20787: PUSH
20788: LD_INT 81
20790: PUSH
20791: LD_INT 20
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PPUSH
20804: CALL_OW 69
20808: OR
20809: IFFALSE 21249
20811: GO 20813
20813: DISABLE
20814: LD_INT 0
20816: PPUSH
20817: PPUSH
20818: PPUSH
// begin PrepareRolfSquad ;
20819: CALL 3318 0 0
// dep := HexInfo ( 86 , 54 ) ;
20823: LD_ADDR_VAR 0 3
20827: PUSH
20828: LD_INT 86
20830: PPUSH
20831: LD_INT 54
20833: PPUSH
20834: CALL_OW 428
20838: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
20839: LD_VAR 0 3
20843: PPUSH
20844: CALL_OW 274
20848: PPUSH
20849: LD_INT 1
20851: PPUSH
20852: LD_INT 300
20854: PPUSH
20855: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
20859: LD_VAR 0 3
20863: PPUSH
20864: CALL_OW 274
20868: PPUSH
20869: LD_INT 2
20871: PPUSH
20872: LD_INT 300
20874: PPUSH
20875: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
20879: LD_EXP 50
20883: PPUSH
20884: LD_INT 79
20886: PPUSH
20887: LD_INT 52
20889: PPUSH
20890: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
20894: LD_INT 35
20896: PPUSH
20897: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( rolfSquad , [ f_not , [ f_hastask ] ] ) , 79 , 52 ) ;
20901: LD_EXP 50
20905: PPUSH
20906: LD_INT 3
20908: PUSH
20909: LD_INT 60
20911: PUSH
20912: EMPTY
20913: LIST
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PPUSH
20919: CALL_OW 72
20923: PPUSH
20924: LD_INT 79
20926: PPUSH
20927: LD_INT 52
20929: PPUSH
20930: CALL_OW 114
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
20934: LD_INT 12
20936: PPUSH
20937: LD_INT 22
20939: PUSH
20940: LD_INT 3
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 21
20949: PUSH
20950: LD_INT 1
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PPUSH
20961: CALL_OW 70
20965: NOT
20966: IFFALSE 20894
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
20968: LD_ADDR_VAR 0 2
20972: PUSH
20973: LD_INT 12
20975: PPUSH
20976: LD_INT 21
20978: PUSH
20979: LD_INT 3
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PPUSH
20986: CALL_OW 70
20990: ST_TO_ADDR
// for i in tmp do
20991: LD_ADDR_VAR 0 1
20995: PUSH
20996: LD_VAR 0 2
21000: PUSH
21001: FOR_IN
21002: IFFALSE 21018
// SetSide ( i , 8 ) ;
21004: LD_VAR 0 1
21008: PPUSH
21009: LD_INT 8
21011: PPUSH
21012: CALL_OW 235
21016: GO 21001
21018: POP
21019: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
21020: LD_INT 63
21022: PPUSH
21023: LD_INT 42
21025: PPUSH
21026: CALL_OW 428
21030: PPUSH
21031: LD_INT 320
21033: PPUSH
21034: CALL_OW 234
// wait ( 0 0$10 ) ;
21038: LD_INT 350
21040: PPUSH
21041: CALL_OW 67
// DialogueOn ;
21045: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
21049: LD_INT 8
21051: PPUSH
21052: LD_INT 2
21054: PPUSH
21055: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
21059: LD_INT 86
21061: PPUSH
21062: LD_INT 54
21064: PPUSH
21065: CALL_OW 428
21069: PPUSH
21070: LD_STRING antwerp
21072: PPUSH
21073: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
21077: LD_EXP 46
21081: PPUSH
21082: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
21086: LD_EXP 46
21090: PPUSH
21091: LD_STRING DRf-rast-1
21093: PPUSH
21094: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
21098: LD_EXP 33
21102: PPUSH
21103: LD_STRING DH-rast-2
21105: PPUSH
21106: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
21110: LD_EXP 46
21114: PPUSH
21115: LD_STRING DRf-rast-3
21117: PPUSH
21118: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
21122: LD_EXP 46
21126: PPUSH
21127: LD_STRING DRf-rast-4
21129: PPUSH
21130: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
21134: LD_EXP 46
21138: PPUSH
21139: LD_STRING DRf-rast-5
21141: PPUSH
21142: CALL_OW 94
// if IsOk ( Aviradze ) then
21146: LD_EXP 45
21150: PPUSH
21151: CALL_OW 302
21155: IFFALSE 21214
// begin CenterNowOnUnits ( Aviradze ) ;
21157: LD_EXP 45
21161: PPUSH
21162: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
21166: LD_EXP 45
21170: PPUSH
21171: LD_STRING DA-rast-6
21173: PPUSH
21174: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
21178: LD_EXP 33
21182: PPUSH
21183: LD_STRING DH-rast-7
21185: PPUSH
21186: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
21190: LD_EXP 34
21194: PPUSH
21195: LD_STRING DG-rast-8
21197: PPUSH
21198: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
21202: LD_EXP 34
21206: PPUSH
21207: LD_STRING DG-rast-9
21209: PPUSH
21210: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
21214: LD_EXP 33
21218: PPUSH
21219: LD_STRING DH-rast-10
21221: PPUSH
21222: CALL_OW 88
// DialogueOff ;
21226: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
21230: LD_STRING M2
21232: PPUSH
21233: CALL_OW 337
// bergkampfArrived := true ;
21237: LD_ADDR_EXP 3
21241: PUSH
21242: LD_INT 1
21244: ST_TO_ADDR
// PrepareRolfBase ;
21245: CALL 3649 0 0
// end ;
21249: PPOPN 3
21251: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) and canRolfJoin do var i ;
21252: LD_INT 12
21254: PPUSH
21255: LD_INT 22
21257: PUSH
21258: LD_INT 2
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PPUSH
21265: CALL_OW 70
21269: PUSH
21270: LD_EXP 46
21274: PPUSH
21275: CALL_OW 302
21279: AND
21280: PUSH
21281: LD_EXP 29
21285: AND
21286: IFFALSE 21846
21288: GO 21290
21290: DISABLE
21291: LD_INT 0
21293: PPUSH
// begin rolfScriptBase := false ;
21294: LD_ADDR_EXP 9
21298: PUSH
21299: LD_INT 0
21301: ST_TO_ADDR
// DialogueOn ;
21302: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
21306: LD_EXP 46
21310: PPUSH
21311: CALL_OW 87
// if rolfSquad >= 10 then
21315: LD_EXP 50
21319: PUSH
21320: LD_INT 10
21322: GREATEREQUAL
21323: IFFALSE 21502
// begin linkedWithRolf := 2 ;
21325: LD_ADDR_EXP 12
21329: PUSH
21330: LD_INT 2
21332: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
21333: LD_EXP 46
21337: PPUSH
21338: LD_STRING DRf-rast-11
21340: PPUSH
21341: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
21345: LD_EXP 33
21349: PPUSH
21350: LD_STRING DH-rast-12
21352: PPUSH
21353: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
21357: LD_EXP 46
21361: PPUSH
21362: LD_STRING DRf-rast-13
21364: PPUSH
21365: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
21369: LD_EXP 33
21373: PPUSH
21374: LD_STRING DH-rast-14
21376: PPUSH
21377: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
21381: LD_EXP 46
21385: PPUSH
21386: LD_STRING DRf-rast-15
21388: PPUSH
21389: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
21393: LD_EXP 33
21397: PPUSH
21398: LD_STRING DH-rast-16
21400: PPUSH
21401: CALL_OW 88
// if IsOk ( Mike ) then
21405: LD_EXP 35
21409: PPUSH
21410: CALL_OW 302
21414: IFFALSE 21488
// begin Say ( Mike , DM-rast-17 ) ;
21416: LD_EXP 35
21420: PPUSH
21421: LD_STRING DM-rast-17
21423: PPUSH
21424: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
21428: LD_EXP 33
21432: PPUSH
21433: LD_STRING DH-rast-18
21435: PPUSH
21436: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
21440: LD_EXP 35
21444: PPUSH
21445: LD_STRING DM-rast-19
21447: PPUSH
21448: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
21452: LD_EXP 33
21456: PPUSH
21457: LD_STRING DH-rast-20
21459: PPUSH
21460: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
21464: LD_EXP 35
21468: PPUSH
21469: LD_STRING DM-rast-21
21471: PPUSH
21472: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
21476: LD_EXP 33
21480: PPUSH
21481: LD_STRING DH-rast-22
21483: PPUSH
21484: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
21488: LD_EXP 33
21492: PPUSH
21493: LD_STRING DH-rast-23
21495: PPUSH
21496: CALL_OW 88
// end else
21500: GO 21652
// begin linkedWithRolf := 1 ;
21502: LD_ADDR_EXP 12
21506: PUSH
21507: LD_INT 1
21509: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
21510: LD_EXP 46
21514: PPUSH
21515: LD_STRING DRf-rast-a-11
21517: PPUSH
21518: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
21522: LD_EXP 33
21526: PPUSH
21527: LD_STRING DH-rast-a-12
21529: PPUSH
21530: CALL_OW 88
// if IsOk ( Kurt ) then
21534: LD_EXP 44
21538: PPUSH
21539: CALL_OW 302
21543: IFFALSE 21640
// begin Say ( Kurt , DKs-rast-a-13 ) ;
21545: LD_EXP 44
21549: PPUSH
21550: LD_STRING DKs-rast-a-13
21552: PPUSH
21553: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
21557: LD_EXP 46
21561: PPUSH
21562: LD_STRING DRf-rast-a-14
21564: PPUSH
21565: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
21569: LD_EXP 46
21573: PPUSH
21574: LD_STRING DRf-rast-a-15
21576: PPUSH
21577: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
21581: LD_EXP 44
21585: PPUSH
21586: LD_STRING DKs-rast-a-16
21588: PPUSH
21589: CALL_OW 88
// if IsOk ( Givi ) then
21593: LD_EXP 34
21597: PPUSH
21598: CALL_OW 302
21602: IFFALSE 21640
// begin Say ( Givi , DG-rast-a-17 ) ;
21604: LD_EXP 34
21608: PPUSH
21609: LD_STRING DG-rast-a-17
21611: PPUSH
21612: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
21616: LD_EXP 34
21620: PPUSH
21621: LD_STRING DG-rast-a-18
21623: PPUSH
21624: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
21628: LD_EXP 44
21632: PPUSH
21633: LD_STRING DKs-rast-a-19
21635: PPUSH
21636: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
21640: LD_EXP 33
21644: PPUSH
21645: LD_STRING DH-rast-a-20
21647: PPUSH
21648: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
21652: LD_EXP 46
21656: PPUSH
21657: LD_STRING DRf-rast-24
21659: PPUSH
21660: CALL_OW 88
// if IsOk ( Aviradze ) then
21664: LD_EXP 45
21668: PPUSH
21669: CALL_OW 302
21673: IFFALSE 21773
// begin Say ( Aviradze , DA-rast-25 ) ;
21675: LD_EXP 45
21679: PPUSH
21680: LD_STRING DA-rast-25
21682: PPUSH
21683: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
21687: LD_EXP 33
21691: PPUSH
21692: LD_STRING DH-rast-26
21694: PPUSH
21695: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
21699: LD_EXP 45
21703: PPUSH
21704: LD_STRING DA-rast-27
21706: PPUSH
21707: CALL_OW 88
// if IsOk ( Markov ) then
21711: LD_EXP 40
21715: PPUSH
21716: CALL_OW 302
21720: IFFALSE 21748
// begin Say ( Markov , DMar-rast-28 ) ;
21722: LD_EXP 40
21726: PPUSH
21727: LD_STRING DMar-rast-28
21729: PPUSH
21730: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
21734: LD_EXP 40
21738: PPUSH
21739: LD_STRING DMar-rast-29
21741: PPUSH
21742: CALL_OW 88
// end else
21746: GO 21771
// if IsOk ( Sophia ) then
21748: LD_EXP 39
21752: PPUSH
21753: CALL_OW 302
21757: IFFALSE 21771
// begin Say ( Sophia , DS-rast-28 ) ;
21759: LD_EXP 39
21763: PPUSH
21764: LD_STRING DS-rast-28
21766: PPUSH
21767: CALL_OW 88
// end ; end else
21771: GO 21796
// if IsOk ( Sophia ) then
21773: LD_EXP 39
21777: PPUSH
21778: CALL_OW 302
21782: IFFALSE 21796
// Say ( Sophia , DS-rast-29 ) ;
21784: LD_EXP 39
21788: PPUSH
21789: LD_STRING DS-rast-29
21791: PPUSH
21792: CALL_OW 88
// DialogueOff ;
21796: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
21800: LD_STRING M3
21802: PPUSH
21803: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
21807: LD_ADDR_VAR 0 1
21811: PUSH
21812: LD_INT 22
21814: PUSH
21815: LD_INT 8
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PPUSH
21822: CALL_OW 69
21826: PUSH
21827: FOR_IN
21828: IFFALSE 21844
// SetSide ( i , 2 ) ;
21830: LD_VAR 0 1
21834: PPUSH
21835: LD_INT 2
21837: PPUSH
21838: CALL_OW 235
21842: GO 21827
21844: POP
21845: POP
// end ;
21846: PPOPN 1
21848: END
// every 0 0$1 trigger omarAttack and not linkedWithRolf and canRolfJoin do var i ;
21849: LD_EXP 23
21853: PUSH
21854: LD_EXP 12
21858: NOT
21859: AND
21860: PUSH
21861: LD_EXP 29
21865: AND
21866: IFFALSE 21957
21868: GO 21870
21870: DISABLE
21871: LD_INT 0
21873: PPUSH
// begin canRolfJoin := false ;
21874: LD_ADDR_EXP 29
21878: PUSH
21879: LD_INT 0
21881: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
21882: LD_STRING M3
21884: PPUSH
21885: CALL_OW 337
// for i in rolfSquad do
21889: LD_ADDR_VAR 0 1
21893: PUSH
21894: LD_EXP 50
21898: PUSH
21899: FOR_IN
21900: IFFALSE 21955
// begin ComExit ( i ) ;
21902: LD_VAR 0 1
21906: PPUSH
21907: CALL 66801 0 1
// AddComAgressiveMove ( i , 147 , 162 ) ;
21911: LD_VAR 0 1
21915: PPUSH
21916: LD_INT 147
21918: PPUSH
21919: LD_INT 162
21921: PPUSH
21922: CALL_OW 174
// AddComWait ( i , 0 0$30 ) ;
21926: LD_VAR 0 1
21930: PPUSH
21931: LD_INT 1050
21933: PPUSH
21934: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 162 ) ;
21938: LD_VAR 0 1
21942: PPUSH
21943: LD_INT 103
21945: PPUSH
21946: LD_INT 162
21948: PPUSH
21949: CALL_OW 174
// end ;
21953: GO 21899
21955: POP
21956: POP
// end ;
21957: PPOPN 1
21959: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf and canRolfJoin do var random ;
21960: LD_EXP 3
21964: PUSH
21965: LD_EXP 46
21969: PPUSH
21970: CALL_OW 256
21974: PUSH
21975: LD_INT 400
21977: LESS
21978: AND
21979: PUSH
21980: LD_EXP 12
21984: NOT
21985: AND
21986: PUSH
21987: LD_EXP 29
21991: AND
21992: IFFALSE 22266
21994: GO 21996
21996: DISABLE
21997: LD_INT 0
21999: PPUSH
// begin DialogueOn ;
22000: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
22004: LD_EXP 46
22008: PPUSH
22009: LD_STRING DRf-rast-f-11
22011: PPUSH
22012: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
22016: LD_EXP 46
22020: PPUSH
22021: LD_STRING DRf-rast-f-12
22023: PPUSH
22024: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
22028: LD_EXP 46
22032: PPUSH
22033: LD_STRING DRf-rast-f-13
22035: PPUSH
22036: CALL_OW 94
// DialogueOff ;
22040: CALL_OW 7
// KillUnit ( Rolf ) ;
22044: LD_EXP 46
22048: PPUSH
22049: CALL_OW 66
// wait ( 0 0$1 ) ;
22053: LD_INT 35
22055: PPUSH
22056: CALL_OW 67
// if not IsOk ( Givi ) then
22060: LD_EXP 34
22064: PPUSH
22065: CALL_OW 302
22069: NOT
22070: IFFALSE 22074
// exit ;
22072: GO 22266
// DialogueOn ;
22074: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
22078: LD_EXP 34
22082: PPUSH
22083: LD_STRING DG-rast-f-14
22085: PPUSH
22086: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
22090: LD_EXP 34
22094: PPUSH
22095: LD_STRING DG-rast-f-15
22097: PPUSH
22098: CALL_OW 88
// if IsOk ( Kaia ) then
22102: LD_EXP 38
22106: PPUSH
22107: CALL_OW 302
22111: IFFALSE 22127
// Say ( Kaia , DK-rast-f-16 ) else
22113: LD_EXP 38
22117: PPUSH
22118: LD_STRING DK-rast-f-16
22120: PPUSH
22121: CALL_OW 88
22125: GO 22214
// if heikeSecondSquad then
22127: LD_EXP 48
22131: IFFALSE 22214
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
22133: LD_ADDR_VAR 0 1
22137: PUSH
22138: LD_EXP 48
22142: PUSH
22143: LD_INT 1
22145: PPUSH
22146: LD_EXP 48
22150: PPUSH
22151: CALL_OW 12
22155: ARRAY
22156: ST_TO_ADDR
// case GetSex ( random ) of 1 :
22157: LD_VAR 0 1
22161: PPUSH
22162: CALL_OW 258
22166: PUSH
22167: LD_INT 1
22169: DOUBLE
22170: EQUAL
22171: IFTRUE 22175
22173: GO 22190
22175: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
22176: LD_VAR 0 1
22180: PPUSH
22181: LD_STRING DArm-rast-f-a-16
22183: PPUSH
22184: CALL_OW 88
22188: GO 22214
22190: LD_INT 2
22192: DOUBLE
22193: EQUAL
22194: IFTRUE 22198
22196: GO 22213
22198: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
22199: LD_VAR 0 1
22203: PPUSH
22204: LD_STRING DArf-rast-f-a-16
22206: PPUSH
22207: CALL_OW 88
22211: GO 22214
22213: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
22214: LD_EXP 34
22218: PPUSH
22219: LD_STRING DG-rast-f-17
22221: PPUSH
22222: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
22226: LD_EXP 34
22230: PPUSH
22231: LD_STRING DG-rast-f-18
22233: PPUSH
22234: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
22238: LD_EXP 34
22242: PPUSH
22243: LD_STRING DG-rast-f-19
22245: PPUSH
22246: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
22250: LD_EXP 34
22254: PPUSH
22255: LD_STRING DG-rast-f-20
22257: PPUSH
22258: CALL_OW 88
// DialogueOff ;
22262: CALL_OW 7
// end ;
22266: PPOPN 1
22268: END
// every 0 0$1 trigger gameActive and SeeArea ( 2 , ruMainBase ) do
22269: LD_EXP 31
22273: PUSH
22274: LD_INT 2
22276: PPUSH
22277: LD_INT 10
22279: PPUSH
22280: CALL_OW 294
22284: AND
22285: IFFALSE 22358
22287: GO 22289
22289: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
22290: LD_EXP 34
22294: PPUSH
22295: LD_STRING DG-Len-1
22297: PPUSH
22298: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
22302: LD_EXP 44
22306: PPUSH
22307: LD_STRING DKs-Len-2
22309: PPUSH
22310: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
22314: LD_EXP 44
22318: PPUSH
22319: LD_STRING DKs-Len-3
22321: PPUSH
22322: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
22326: LD_EXP 33
22330: PPUSH
22331: LD_STRING DH-Len-4
22333: PPUSH
22334: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
22338: LD_EXP 38
22342: PPUSH
22343: LD_STRING DK-Len-5
22345: PPUSH
22346: CALL_OW 88
// leninSpotted := true ;
22350: LD_ADDR_EXP 14
22354: PUSH
22355: LD_INT 1
22357: ST_TO_ADDR
// end ;
22358: END
// every 0 0$1 trigger debug or ( bergkampfArrived and tick > [ 32 32$00 , 30 30$00 , 28 28$00 , 26 26$00 ] [ Difficulty ] ) do var i , tmp , inOmarBase , heikeNearbyOmar ;
22359: LD_EXP 1
22363: PUSH
22364: LD_EXP 3
22368: PUSH
22369: LD_OWVAR 1
22373: PUSH
22374: LD_INT 67200
22376: PUSH
22377: LD_INT 63000
22379: PUSH
22380: LD_INT 58800
22382: PUSH
22383: LD_INT 54600
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: PUSH
22392: LD_OWVAR 67
22396: ARRAY
22397: GREATER
22398: AND
22399: OR
22400: IFFALSE 23137
22402: GO 22404
22404: DISABLE
22405: LD_INT 0
22407: PPUSH
22408: PPUSH
22409: PPUSH
22410: PPUSH
// begin PrepareOmarSquad ;
22411: CALL 4931 0 0
// repeat wait ( 0 0$1 ) ;
22415: LD_INT 35
22417: PPUSH
22418: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
22422: LD_INT 14
22424: PPUSH
22425: LD_INT 22
22427: PUSH
22428: LD_INT 3
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 2
22437: PUSH
22438: LD_INT 21
22440: PUSH
22441: LD_INT 1
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 59
22450: PUSH
22451: EMPTY
22452: LIST
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: LIST
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PPUSH
22463: CALL_OW 70
22467: NOT
22468: IFFALSE 22415
// tmp := FilterUnitsInArea ( ruOmarBase , [ f_side , 2 ] ) ;
22470: LD_ADDR_VAR 0 2
22474: PUSH
22475: LD_INT 14
22477: PPUSH
22478: LD_INT 22
22480: PUSH
22481: LD_INT 2
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PPUSH
22488: CALL_OW 70
22492: ST_TO_ADDR
// inOmarBase := tmp > 0 ;
22493: LD_ADDR_VAR 0 3
22497: PUSH
22498: LD_VAR 0 2
22502: PUSH
22503: LD_INT 0
22505: GREATER
22506: ST_TO_ADDR
// heikeNearbyOmar := IsInArea ( Heike , ruOmarBase ) ;
22507: LD_ADDR_VAR 0 4
22511: PUSH
22512: LD_EXP 33
22516: PPUSH
22517: LD_INT 14
22519: PPUSH
22520: CALL_OW 308
22524: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_type , unit_building ] ) then
22525: LD_VAR 0 2
22529: PPUSH
22530: LD_INT 21
22532: PUSH
22533: LD_INT 3
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PPUSH
22540: CALL_OW 72
22544: IFFALSE 22649
// begin if heikeNearbyOmar then
22546: LD_VAR 0 4
22550: IFFALSE 22566
// Say ( Omar , DOm-Base-1b ) else
22552: LD_EXP 43
22556: PPUSH
22557: LD_STRING DOm-Base-1b
22559: PPUSH
22560: CALL_OW 88
22564: GO 22578
// SayRadio ( Omar , DOm-Base-1br ) ;
22566: LD_EXP 43
22570: PPUSH
22571: LD_STRING DOm-Base-1br
22573: PPUSH
22574: CALL_OW 94
// for i in UnitFilter ( tmp , [ f_type , unit_building ] ) do
22578: LD_ADDR_VAR 0 1
22582: PUSH
22583: LD_VAR 0 2
22587: PPUSH
22588: LD_INT 21
22590: PUSH
22591: LD_INT 3
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PPUSH
22598: CALL_OW 72
22602: PUSH
22603: FOR_IN
22604: IFFALSE 22645
// begin if UnitsInside ( i ) then
22606: LD_VAR 0 1
22610: PPUSH
22611: CALL_OW 313
22615: IFFALSE 22631
// ComExitBuilding ( UnitsInside ( i ) ) ;
22617: LD_VAR 0 1
22621: PPUSH
22622: CALL_OW 313
22626: PPUSH
22627: CALL_OW 122
// SetSide ( i , 5 ) ;
22631: LD_VAR 0 1
22635: PPUSH
22636: LD_INT 5
22638: PPUSH
22639: CALL_OW 235
// end ;
22643: GO 22603
22645: POP
22646: POP
// end else
22647: GO 22742
// if UnitFilter ( tmp , [ f_type , unit_vehicle ] ) then
22649: LD_VAR 0 2
22653: PPUSH
22654: LD_INT 21
22656: PUSH
22657: LD_INT 2
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PPUSH
22664: CALL_OW 72
22668: IFFALSE 22704
// begin if heikeNearbyOmar then
22670: LD_VAR 0 4
22674: IFFALSE 22690
// Say ( Omar , DOm-Base-1v ) else
22676: LD_EXP 43
22680: PPUSH
22681: LD_STRING DOm-Base-1v
22683: PPUSH
22684: CALL_OW 88
22688: GO 22702
// SayRadio ( Omar , DOm-Base-1vr ) end else
22690: LD_EXP 43
22694: PPUSH
22695: LD_STRING DOm-Base-1vr
22697: PPUSH
22698: CALL_OW 94
22702: GO 22742
// if inOmarBase then
22704: LD_VAR 0 3
22708: IFFALSE 22742
// begin if heikeNearbyOmar then
22710: LD_VAR 0 4
22714: IFFALSE 22730
// Say ( Omar , DOm-Base-1h ) else
22716: LD_EXP 43
22720: PPUSH
22721: LD_STRING DOm-Base-1h
22723: PPUSH
22724: CALL_OW 88
22728: GO 22742
// SayRadio ( Omar , DOm-Base-1hr ) end ;
22730: LD_EXP 43
22734: PPUSH
22735: LD_STRING DOm-Base-1hr
22737: PPUSH
22738: CALL_OW 94
// for i in omarSquad do
22742: LD_ADDR_VAR 0 1
22746: PUSH
22747: LD_EXP 51
22751: PUSH
22752: FOR_IN
22753: IFFALSE 22784
// if GetLives ( i ) < 750 then
22755: LD_VAR 0 1
22759: PPUSH
22760: CALL_OW 256
22764: PUSH
22765: LD_INT 750
22767: LESS
22768: IFFALSE 22782
// SetLives ( i , 1000 ) ;
22770: LD_VAR 0 1
22774: PPUSH
22775: LD_INT 1000
22777: PPUSH
22778: CALL_OW 234
22782: GO 22752
22784: POP
22785: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
22786: LD_ADDR_VAR 0 1
22790: PUSH
22791: LD_INT 14
22793: PPUSH
22794: LD_INT 21
22796: PUSH
22797: LD_INT 3
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PPUSH
22804: CALL_OW 70
22808: PUSH
22809: FOR_IN
22810: IFFALSE 22826
// SetSide ( i , 5 ) ;
22812: LD_VAR 0 1
22816: PPUSH
22817: LD_INT 5
22819: PPUSH
22820: CALL_OW 235
22824: GO 22809
22826: POP
22827: POP
// wait ( 0 0$3 ) ;
22828: LD_INT 105
22830: PPUSH
22831: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
22835: LD_INT 5
22837: PPUSH
22838: LD_INT 2
22840: PPUSH
22841: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
22845: LD_EXP 43
22849: PPUSH
22850: CALL_OW 87
// DialogueOn ;
22854: CALL_OW 6
// if heikeNearbyOmar then
22858: LD_VAR 0 4
22862: IFFALSE 22920
// begin Say ( Omar , DOm-Veh-1a ) ;
22864: LD_EXP 43
22868: PPUSH
22869: LD_STRING DOm-Veh-1a
22871: PPUSH
22872: CALL_OW 88
// Say ( Omar , DOm-Veh-2a ) ;
22876: LD_EXP 43
22880: PPUSH
22881: LD_STRING DOm-Veh-2a
22883: PPUSH
22884: CALL_OW 88
// Say ( Omar , DOm-Veh-3a ) ;
22888: LD_EXP 43
22892: PPUSH
22893: LD_STRING DOm-Veh-3a
22895: PPUSH
22896: CALL_OW 88
// if mortarConstructed then
22900: LD_EXP 15
22904: IFFALSE 22918
// Say ( Omar , DOm-Veh-4a ) ;
22906: LD_EXP 43
22910: PPUSH
22911: LD_STRING DOm-Veh-4a
22913: PPUSH
22914: CALL_OW 88
// end else
22918: GO 22974
// begin SayRadio ( Omar , DOm-Veh-1 ) ;
22920: LD_EXP 43
22924: PPUSH
22925: LD_STRING DOm-Veh-1
22927: PPUSH
22928: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
22932: LD_EXP 43
22936: PPUSH
22937: LD_STRING DOm-Veh-2
22939: PPUSH
22940: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
22944: LD_EXP 43
22948: PPUSH
22949: LD_STRING DOm-Veh-3
22951: PPUSH
22952: CALL_OW 94
// if mortarConstructed then
22956: LD_EXP 15
22960: IFFALSE 22974
// SayRadio ( Omar , DOm-Veh-4 ) ;
22962: LD_EXP 43
22966: PPUSH
22967: LD_STRING DOm-Veh-4
22969: PPUSH
22970: CALL_OW 94
// end ; Say ( Heike , DH-Veh-5 ) ;
22974: LD_EXP 33
22978: PPUSH
22979: LD_STRING DH-Veh-5
22981: PPUSH
22982: CALL_OW 88
// if IsOk ( Kurt ) then
22986: LD_EXP 44
22990: PPUSH
22991: CALL_OW 302
22995: IFFALSE 23045
// begin Say ( Kurt , DKs-Veh-6 ) ;
22997: LD_EXP 44
23001: PPUSH
23002: LD_STRING DKs-Veh-6
23004: PPUSH
23005: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
23009: LD_EXP 44
23013: PPUSH
23014: LD_STRING DKs-Veh-7
23016: PPUSH
23017: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
23021: LD_EXP 34
23025: PPUSH
23026: LD_STRING DG-Veh-8
23028: PPUSH
23029: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
23033: LD_EXP 35
23037: PPUSH
23038: LD_STRING DM-Veh-9
23040: PPUSH
23041: CALL_OW 88
// end ; DialogueOff ;
23045: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
23049: LD_STRING M4
23051: PPUSH
23052: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
23056: LD_EXP 43
23060: PPUSH
23061: LD_INT 341
23063: PPUSH
23064: LD_INT 232
23066: PPUSH
23067: CALL_OW 428
23071: PPUSH
23072: CALL_OW 120
// omarArrived := true ;
23076: LD_ADDR_EXP 6
23080: PUSH
23081: LD_INT 1
23083: ST_TO_ADDR
// omarScriptBase := true ;
23084: LD_ADDR_EXP 10
23088: PUSH
23089: LD_INT 1
23091: ST_TO_ADDR
// omarWantVehicles := true ;
23092: LD_ADDR_EXP 18
23096: PUSH
23097: LD_INT 1
23099: ST_TO_ADDR
// if debug then
23100: LD_EXP 1
23104: IFFALSE 23137
// begin wait ( 0 0$25 ) ;
23106: LD_INT 875
23108: PPUSH
23109: CALL_OW 67
// omarScriptBase := false ;
23113: LD_ADDR_EXP 10
23117: PUSH
23118: LD_INT 0
23120: ST_TO_ADDR
// omarWantVehicles := false ;
23121: LD_ADDR_EXP 18
23125: PUSH
23126: LD_INT 0
23128: ST_TO_ADDR
// omarAttack := true ;
23129: LD_ADDR_EXP 23
23133: PUSH
23134: LD_INT 1
23136: ST_TO_ADDR
// end ; end ;
23137: PPOPN 4
23139: END
// every 0 0$1 trigger FilterUnitsInArea ( ruMainBase , [ f_side , 2 ] ) and omarArrived and IsOk ( Omar ) and not omarAttack do
23140: LD_INT 10
23142: PPUSH
23143: LD_INT 22
23145: PUSH
23146: LD_INT 2
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PPUSH
23153: CALL_OW 70
23157: PUSH
23158: LD_EXP 6
23162: AND
23163: PUSH
23164: LD_EXP 43
23168: PPUSH
23169: CALL_OW 302
23173: AND
23174: PUSH
23175: LD_EXP 23
23179: NOT
23180: AND
23181: IFFALSE 23198
23183: GO 23185
23185: DISABLE
// SayRadio ( Omar , DOm-Lenin ) ;
23186: LD_EXP 43
23190: PPUSH
23191: LD_STRING DOm-Lenin
23193: PPUSH
23194: CALL_OW 94
23198: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
23199: LD_EXP 46
23203: PPUSH
23204: CALL_OW 302
23208: PUSH
23209: LD_EXP 12
23213: AND
23214: PUSH
23215: LD_EXP 6
23219: AND
23220: IFFALSE 23324
23222: GO 23224
23224: DISABLE
// begin wait ( 1 1$00 ) ;
23225: LD_INT 2100
23227: PPUSH
23228: CALL_OW 67
// CenterNowOnUnits ( Rolf ) ;
23232: LD_EXP 46
23236: PPUSH
23237: CALL_OW 87
// DialogueOn ;
23241: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
23245: LD_EXP 46
23249: PPUSH
23250: LD_STRING DRf-Veh-10
23252: PPUSH
23253: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
23257: LD_EXP 46
23261: PPUSH
23262: LD_STRING DRf-Veh-11
23264: PPUSH
23265: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
23269: LD_EXP 33
23273: PPUSH
23274: LD_STRING DH-Veh-12
23276: PPUSH
23277: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
23281: LD_EXP 33
23285: PPUSH
23286: LD_STRING DH-Veh-13
23288: PPUSH
23289: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
23293: LD_EXP 46
23297: PPUSH
23298: LD_STRING DRf-Veh-14
23300: PPUSH
23301: CALL_OW 88
// DialogueOff ;
23305: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
23309: LD_STRING M5
23311: PPUSH
23312: CALL_OW 337
// rolfWantVehicles := true ;
23316: LD_ADDR_EXP 17
23320: PUSH
23321: LD_INT 1
23323: ST_TO_ADDR
// end ;
23324: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
23325: LD_EXP 18
23329: IFFALSE 24092
23331: GO 23333
23333: DISABLE
23334: LD_INT 0
23336: PPUSH
23337: PPUSH
23338: PPUSH
23339: PPUSH
23340: PPUSH
23341: PPUSH
// begin wait ( 0 0$3 ) ;
23342: LD_INT 105
23344: PPUSH
23345: CALL_OW 67
// Hint ( OmarVehicles ) ;
23349: LD_STRING OmarVehicles
23351: PPUSH
23352: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
23356: LD_INT 16
23358: PPUSH
23359: LD_INT 1
23361: PPUSH
23362: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
23366: LD_INT 35
23368: PPUSH
23369: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
23373: LD_ADDR_EXP 20
23377: PUSH
23378: LD_EXP 20
23382: PUSH
23383: LD_INT 35
23385: MINUS
23386: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
23387: LD_EXP 20
23391: PUSH
23392: LD_INT 0
23394: LESSEQUAL
23395: IFFALSE 23495
// begin display_strings := [ ] ;
23397: LD_ADDR_OWVAR 47
23401: PUSH
23402: EMPTY
23403: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
23404: LD_STRING M4a
23406: PPUSH
23407: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
23411: LD_INT 16
23413: PPUSH
23414: LD_INT 0
23416: PPUSH
23417: CALL_OW 424
// DialogueOn ;
23421: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
23425: LD_EXP 43
23429: PPUSH
23430: LD_STRING DOm-Veh-b-15
23432: PPUSH
23433: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
23437: LD_EXP 33
23441: PPUSH
23442: LD_STRING DH-Veh-b-16
23444: PPUSH
23445: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
23449: LD_EXP 43
23453: PPUSH
23454: LD_STRING DOm-Veh-b-17
23456: PPUSH
23457: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
23461: LD_EXP 38
23465: PPUSH
23466: LD_STRING DK-Veh-b-18
23468: PPUSH
23469: CALL_OW 88
// DialogueOff ;
23473: CALL_OW 7
// omarAttack := true ;
23477: LD_ADDR_EXP 23
23481: PUSH
23482: LD_INT 1
23484: ST_TO_ADDR
// omarScriptBase := false ;
23485: LD_ADDR_EXP 10
23489: PUSH
23490: LD_INT 0
23492: ST_TO_ADDR
// exit ;
23493: GO 24092
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
23495: LD_EXP 21
23499: PUSH
23500: LD_INT 16
23502: PPUSH
23503: LD_INT 22
23505: PUSH
23506: LD_INT 2
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 21
23515: PUSH
23516: LD_INT 2
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 3
23525: PUSH
23526: LD_INT 2
23528: PUSH
23529: LD_INT 34
23531: PUSH
23532: LD_INT 32
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 34
23541: PUSH
23542: LD_INT 88
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PUSH
23549: LD_INT 34
23551: PUSH
23552: LD_INT 31
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 33
23571: PUSH
23572: LD_INT 1
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: PUSH
23579: LD_INT 58
23581: PUSH
23582: EMPTY
23583: LIST
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: PPUSH
23592: CALL_OW 70
23596: LESSEQUAL
23597: IFFALSE 23366
// omarWaitingForVehiclesTimer := 0 0$00 ;
23599: LD_ADDR_EXP 20
23603: PUSH
23604: LD_INT 0
23606: ST_TO_ADDR
// display_strings := [ ] ;
23607: LD_ADDR_OWVAR 47
23611: PUSH
23612: EMPTY
23613: ST_TO_ADDR
// DialogueOn ;
23614: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
23618: LD_EXP 43
23622: PPUSH
23623: LD_STRING DOm-Veh-a-15
23625: PPUSH
23626: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
23630: LD_EXP 38
23634: PPUSH
23635: LD_STRING DK-Veh-a-16
23637: PPUSH
23638: CALL_OW 88
// DialogueOff ;
23642: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
23646: LD_STRING M4a
23648: PPUSH
23649: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
23653: LD_INT 16
23655: PPUSH
23656: LD_INT 0
23658: PPUSH
23659: CALL_OW 424
// omarHasVehicles := true ;
23663: LD_ADDR_EXP 22
23667: PUSH
23668: LD_INT 1
23670: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23671: LD_INT 35
23673: PPUSH
23674: CALL_OW 67
// until rolfWaitingForVehiclesTimer = 0 0$00 ;
23678: LD_EXP 19
23682: PUSH
23683: LD_INT 0
23685: EQUAL
23686: IFFALSE 23671
// wait ( 1 1$00 ) ;
23688: LD_INT 2100
23690: PPUSH
23691: CALL_OW 67
// omarAttack := true ;
23695: LD_ADDR_EXP 23
23699: PUSH
23700: LD_INT 1
23702: ST_TO_ADDR
// omarScriptBase := false ;
23703: LD_ADDR_EXP 10
23707: PUSH
23708: LD_INT 0
23710: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
23711: LD_ADDR_VAR 0 2
23715: PUSH
23716: LD_INT 16
23718: PPUSH
23719: LD_INT 22
23721: PUSH
23722: LD_INT 2
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 21
23731: PUSH
23732: LD_INT 2
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PUSH
23739: LD_INT 33
23741: PUSH
23742: LD_INT 1
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: PUSH
23749: LD_INT 58
23751: PUSH
23752: EMPTY
23753: LIST
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: PPUSH
23761: CALL_OW 70
23765: ST_TO_ADDR
// for i in tmp do
23766: LD_ADDR_VAR 0 1
23770: PUSH
23771: LD_VAR 0 2
23775: PUSH
23776: FOR_IN
23777: IFFALSE 23805
// begin SetFuel ( i , 100 ) ;
23779: LD_VAR 0 1
23783: PPUSH
23784: LD_INT 100
23786: PPUSH
23787: CALL_OW 240
// SetSide ( i , 5 ) ;
23791: LD_VAR 0 1
23795: PPUSH
23796: LD_INT 5
23798: PPUSH
23799: CALL_OW 235
// end ;
23803: GO 23776
23805: POP
23806: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
23807: LD_ADDR_VAR 0 3
23811: PUSH
23812: LD_EXP 51
23816: PPUSH
23817: LD_INT 25
23819: PUSH
23820: LD_INT 2
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PPUSH
23827: CALL_OW 72
23831: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
23832: LD_ADDR_VAR 0 4
23836: PUSH
23837: LD_EXP 51
23841: PPUSH
23842: LD_INT 3
23844: PUSH
23845: LD_INT 55
23847: PUSH
23848: EMPTY
23849: LIST
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: LD_INT 25
23857: PUSH
23858: LD_INT 3
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PPUSH
23869: CALL_OW 72
23873: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
23874: LD_ADDR_VAR 0 5
23878: PUSH
23879: LD_INT 324
23881: PPUSH
23882: LD_INT 234
23884: PPUSH
23885: CALL_OW 428
23889: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
23890: LD_ADDR_VAR 0 6
23894: PUSH
23895: LD_INT 334
23897: PPUSH
23898: LD_INT 241
23900: PPUSH
23901: CALL_OW 428
23905: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
23906: LD_VAR 0 6
23910: PPUSH
23911: CALL_OW 313
23915: PPUSH
23916: CALL_OW 122
// if eng then
23920: LD_VAR 0 3
23924: IFFALSE 24032
// begin if eng + mech <= tmp then
23926: LD_VAR 0 3
23930: PUSH
23931: LD_VAR 0 4
23935: PLUS
23936: PUSH
23937: LD_VAR 0 2
23941: LESSEQUAL
23942: IFFALSE 23997
// begin ComEnterUnit ( eng , workshop ) ;
23944: LD_VAR 0 3
23948: PPUSH
23949: LD_VAR 0 5
23953: PPUSH
23954: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
23958: LD_VAR 0 3
23962: PPUSH
23963: LD_INT 3
23965: PPUSH
23966: CALL_OW 183
// AddComExitBuilding ( eng ) ;
23970: LD_VAR 0 3
23974: PPUSH
23975: CALL_OW 182
// mech := mech union eng ;
23979: LD_ADDR_VAR 0 4
23983: PUSH
23984: LD_VAR 0 4
23988: PUSH
23989: LD_VAR 0 3
23993: UNION
23994: ST_TO_ADDR
// end else
23995: GO 24032
// begin ComEnterUnit ( eng , armoury ) ;
23997: LD_VAR 0 3
24001: PPUSH
24002: LD_VAR 0 6
24006: PPUSH
24007: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
24011: LD_VAR 0 3
24015: PPUSH
24016: LD_INT 1
24018: PPUSH
24019: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24023: LD_VAR 0 3
24027: PPUSH
24028: CALL_OW 182
// end ; end ; for i := 1 to tmp do
24032: LD_ADDR_VAR 0 1
24036: PUSH
24037: DOUBLE
24038: LD_INT 1
24040: DEC
24041: ST_TO_ADDR
24042: LD_VAR 0 2
24046: PUSH
24047: FOR_TO
24048: IFFALSE 24090
// if i <= mech then
24050: LD_VAR 0 1
24054: PUSH
24055: LD_VAR 0 4
24059: LESSEQUAL
24060: IFFALSE 24088
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
24062: LD_VAR 0 4
24066: PUSH
24067: LD_VAR 0 1
24071: ARRAY
24072: PPUSH
24073: LD_VAR 0 2
24077: PUSH
24078: LD_VAR 0 1
24082: ARRAY
24083: PPUSH
24084: CALL_OW 180
24088: GO 24047
24090: POP
24091: POP
// end ;
24092: PPOPN 6
24094: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i , hasBadWeapons ;
24095: LD_EXP 46
24099: PPUSH
24100: CALL_OW 302
24104: PUSH
24105: LD_EXP 17
24109: AND
24110: IFFALSE 24734
24112: GO 24114
24114: DISABLE
24115: LD_INT 0
24117: PPUSH
24118: PPUSH
// begin repeat wait ( 0 0$1 ) ;
24119: LD_INT 35
24121: PPUSH
24122: CALL_OW 67
// hasBadWeapons := false ;
24126: LD_ADDR_VAR 0 2
24130: PUSH
24131: LD_INT 0
24133: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
24134: LD_ADDR_EXP 19
24138: PUSH
24139: LD_EXP 19
24143: PUSH
24144: LD_INT 35
24146: MINUS
24147: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 then
24148: LD_EXP 19
24152: PUSH
24153: LD_INT 0
24155: LESSEQUAL
24156: IFFALSE 24418
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
24158: LD_ADDR_EXP 19
24162: PUSH
24163: LD_INT 0
24165: ST_TO_ADDR
// display_strings := [ ] ;
24166: LD_ADDR_OWVAR 47
24170: PUSH
24171: EMPTY
24172: ST_TO_ADDR
// DialogueOn ;
24173: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
24177: LD_EXP 46
24181: PPUSH
24182: LD_STRING DRf-Veh-b-19
24184: PPUSH
24185: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
24189: LD_EXP 46
24193: PPUSH
24194: LD_STRING DRf-Veh-b-20
24196: PPUSH
24197: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
24201: LD_EXP 33
24205: PPUSH
24206: LD_STRING DH-Veh-b-21
24208: PPUSH
24209: CALL_OW 88
// if IsOk ( Givi ) then
24213: LD_EXP 34
24217: PPUSH
24218: CALL_OW 302
24222: IFFALSE 24260
// begin Say ( Givi , DG-Veh-b-22 ) ;
24224: LD_EXP 34
24228: PPUSH
24229: LD_STRING DG-Veh-b-22
24231: PPUSH
24232: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
24236: LD_EXP 33
24240: PPUSH
24241: LD_STRING DH-Veh-b-23
24243: PPUSH
24244: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
24248: LD_EXP 34
24252: PPUSH
24253: LD_STRING DG-Veh-b-24
24255: PPUSH
24256: CALL_OW 88
// end ; DialogueOff ;
24260: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
24264: LD_STRING M5a
24266: PPUSH
24267: CALL_OW 337
// for i in rolfSquad do
24271: LD_ADDR_VAR 0 1
24275: PUSH
24276: LD_EXP 50
24280: PUSH
24281: FOR_IN
24282: IFFALSE 24399
// begin SetSide ( i , 8 ) ;
24284: LD_VAR 0 1
24288: PPUSH
24289: LD_INT 8
24291: PPUSH
24292: CALL_OW 235
// if IsDriver ( i ) then
24296: LD_VAR 0 1
24300: PPUSH
24301: CALL 64021 0 1
24305: IFFALSE 24377
// begin if not GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
24307: LD_VAR 0 1
24311: PPUSH
24312: CALL_OW 310
24316: PPUSH
24317: CALL_OW 264
24321: PUSH
24322: LD_INT 51
24324: PUSH
24325: LD_INT 52
24327: PUSH
24328: LD_INT 32
24330: PUSH
24331: LD_INT 88
24333: PUSH
24334: LD_INT 31
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: IN
24344: NOT
24345: IFFALSE 24366
// SetSide ( IsInUnit ( i ) , 8 ) else
24347: LD_VAR 0 1
24351: PPUSH
24352: CALL_OW 310
24356: PPUSH
24357: LD_INT 8
24359: PPUSH
24360: CALL_OW 235
24364: GO 24375
// ComExitVehicle ( i ) ;
24366: LD_VAR 0 1
24370: PPUSH
24371: CALL_OW 121
// end else
24375: GO 24397
// if IsInUnit ( i ) then
24377: LD_VAR 0 1
24381: PPUSH
24382: CALL_OW 310
24386: IFFALSE 24397
// ComExitBuilding ( i ) ;
24388: LD_VAR 0 1
24392: PPUSH
24393: CALL_OW 122
// end ;
24397: GO 24281
24399: POP
24400: POP
// wait ( 0 0$10 ) ;
24401: LD_INT 350
24403: PPUSH
24404: CALL_OW 67
// rolfAttack := true ;
24408: LD_ADDR_EXP 32
24412: PUSH
24413: LD_INT 1
24415: ST_TO_ADDR
// exit ;
24416: GO 24734
// end ; if IsDead ( Rolf ) then
24418: LD_EXP 46
24422: PPUSH
24423: CALL_OW 301
24427: IFFALSE 24438
// begin ChangeMissionObjectives ( M5a ) ;
24429: LD_STRING M5a
24431: PPUSH
24432: CALL_OW 337
// exit ;
24436: GO 24734
// end ; if Count ( UnitFilter ( rolfSquad , [ f_driving ] ) ) = Count ( rolfSquad ) then
24438: LD_EXP 50
24442: PPUSH
24443: LD_INT 55
24445: PUSH
24446: EMPTY
24447: LIST
24448: PPUSH
24449: CALL_OW 72
24453: PPUSH
24454: CALL 31065 0 1
24458: PUSH
24459: LD_EXP 50
24463: PPUSH
24464: CALL 31065 0 1
24468: EQUAL
24469: IFFALSE 24586
// begin for i in UnitFilter ( rolfSquad , [ f_driving ] ) do
24471: LD_ADDR_VAR 0 1
24475: PUSH
24476: LD_EXP 50
24480: PPUSH
24481: LD_INT 55
24483: PUSH
24484: EMPTY
24485: LIST
24486: PPUSH
24487: CALL_OW 72
24491: PUSH
24492: FOR_IN
24493: IFFALSE 24553
// if GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
24495: LD_VAR 0 1
24499: PPUSH
24500: CALL_OW 310
24504: PPUSH
24505: CALL_OW 264
24509: PUSH
24510: LD_INT 51
24512: PUSH
24513: LD_INT 52
24515: PUSH
24516: LD_INT 32
24518: PUSH
24519: LD_INT 88
24521: PUSH
24522: LD_INT 31
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: IN
24532: IFFALSE 24551
// begin hasBadWeapons := true ;
24534: LD_ADDR_VAR 0 2
24538: PUSH
24539: LD_INT 1
24541: ST_TO_ADDR
// Query ( QBadWeapon ) ;
24542: LD_STRING QBadWeapon
24544: PPUSH
24545: CALL_OW 97
// break ;
24549: GO 24553
// end ;
24551: GO 24492
24553: POP
24554: POP
// if not hasBadWeapons then
24555: LD_VAR 0 2
24559: NOT
24560: IFFALSE 24586
// if Query ( QRolf ) = 1 then
24562: LD_STRING QRolf
24564: PPUSH
24565: CALL_OW 97
24569: PUSH
24570: LD_INT 1
24572: EQUAL
24573: IFFALSE 24579
// break else
24575: GO 24590
24577: GO 24586
// wait ( 0 0$15 ) ;
24579: LD_INT 525
24581: PPUSH
24582: CALL_OW 67
// end ; until false ;
24586: LD_INT 0
24588: IFFALSE 24119
// rolfWaitingForVehiclesTimer := 0 0$00 ;
24590: LD_ADDR_EXP 19
24594: PUSH
24595: LD_INT 0
24597: ST_TO_ADDR
// display_strings := [ ] ;
24598: LD_ADDR_OWVAR 47
24602: PUSH
24603: EMPTY
24604: ST_TO_ADDR
// DialogueOn ;
24605: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
24609: LD_EXP 46
24613: PPUSH
24614: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
24618: LD_EXP 46
24622: PPUSH
24623: LD_STRING DRf-Veh-a-17
24625: PPUSH
24626: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
24630: LD_EXP 33
24634: PPUSH
24635: LD_STRING DH-08-Veh-a-18
24637: PPUSH
24638: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
24642: LD_EXP 46
24646: PPUSH
24647: LD_STRING DRf-Veh-a-19
24649: PPUSH
24650: CALL_OW 88
// DialogueOff ;
24654: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
24658: LD_STRING M5a
24660: PPUSH
24661: CALL_OW 337
// rolfHasVehicles := true ;
24665: LD_ADDR_EXP 16
24669: PUSH
24670: LD_INT 1
24672: ST_TO_ADDR
// for i in rolfSquad do
24673: LD_ADDR_VAR 0 1
24677: PUSH
24678: LD_EXP 50
24682: PUSH
24683: FOR_IN
24684: IFFALSE 24717
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
24686: LD_VAR 0 1
24690: PPUSH
24691: CALL_OW 310
24695: PPUSH
24696: LD_INT 8
24698: PPUSH
24699: CALL_OW 235
// SetSide ( i , 8 ) ;
24703: LD_VAR 0 1
24707: PPUSH
24708: LD_INT 8
24710: PPUSH
24711: CALL_OW 235
// end ;
24715: GO 24683
24717: POP
24718: POP
// wait ( 0 0$10 ) ;
24719: LD_INT 350
24721: PPUSH
24722: CALL_OW 67
// rolfAttack := true ;
24726: LD_ADDR_EXP 32
24730: PUSH
24731: LD_INT 1
24733: ST_TO_ADDR
// end ;
24734: PPOPN 2
24736: END
// every 0 0$1 trigger leninSpotted do
24737: LD_EXP 14
24741: IFFALSE 24829
24743: GO 24745
24745: DISABLE
// begin wait ( 0 0$10 ) ;
24746: LD_INT 350
24748: PPUSH
24749: CALL_OW 67
// DialogueOn ;
24753: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
24757: LD_EXP 45
24761: PPUSH
24762: LD_STRING DA-Transmission-1
24764: PPUSH
24765: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
24769: LD_EXP 52
24773: PPUSH
24774: LD_STRING DMzw-Transmission-2
24776: PPUSH
24777: CALL_OW 94
// if gaidarKilled then
24781: LD_EXP 7
24785: IFFALSE 24801
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
24787: LD_EXP 52
24791: PPUSH
24792: LD_STRING DMzw-Transmission-3
24794: PPUSH
24795: CALL_OW 94
24799: GO 24813
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
24801: LD_EXP 52
24805: PPUSH
24806: LD_STRING DMzw-Transmission-a-3
24808: PPUSH
24809: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
24813: LD_EXP 33
24817: PPUSH
24818: LD_STRING DH-Transmission-4
24820: PPUSH
24821: CALL_OW 88
// DialogueOff ;
24825: CALL_OW 7
// end ;
24829: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
24830: LD_INT 22
24832: PUSH
24833: LD_INT 3
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 25
24842: PUSH
24843: LD_INT 9
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 101
24852: PUSH
24853: LD_INT 2
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: LIST
24864: PPUSH
24865: CALL_OW 69
24869: PUSH
24870: LD_EXP 33
24874: PPUSH
24875: CALL_OW 302
24879: AND
24880: IFFALSE 24945
24882: GO 24884
24884: DISABLE
// begin CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
24885: LD_INT 22
24887: PUSH
24888: LD_INT 3
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 25
24897: PUSH
24898: LD_INT 9
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 101
24907: PUSH
24908: LD_INT 2
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: LIST
24919: PPUSH
24920: CALL_OW 69
24924: PUSH
24925: LD_INT 1
24927: ARRAY
24928: PPUSH
24929: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
24933: LD_EXP 33
24937: PPUSH
24938: LD_STRING DH-Rubazooka-1
24940: PPUSH
24941: CALL_OW 88
// end ;
24945: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
24946: LD_INT 19
24948: PPUSH
24949: LD_INT 22
24951: PUSH
24952: LD_INT 3
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: PPUSH
24959: CALL_OW 70
24963: PUSH
24964: LD_EXP 28
24968: AND
24969: IFFALSE 25020
24971: GO 24973
24973: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
24974: LD_INT 19
24976: PPUSH
24977: LD_INT 22
24979: PUSH
24980: LD_INT 3
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PPUSH
24987: CALL_OW 70
24991: PPUSH
24992: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
24996: LD_EXP 33
25000: PPUSH
25001: LD_STRING DH-Ruattfirst-1
25003: PPUSH
25004: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
25008: LD_EXP 33
25012: PPUSH
25013: LD_STRING DH-Ruattfirst-2
25015: PPUSH
25016: CALL_OW 88
// end ;
25020: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
25021: LD_INT 19
25023: PPUSH
25024: LD_INT 22
25026: PUSH
25027: LD_INT 3
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PPUSH
25034: CALL_OW 70
25038: PUSH
25039: LD_EXP 28
25043: NOT
25044: AND
25045: IFFALSE 25084
25047: GO 25049
25049: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25050: LD_INT 19
25052: PPUSH
25053: LD_INT 22
25055: PUSH
25056: LD_INT 3
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PPUSH
25063: CALL_OW 70
25067: PPUSH
25068: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
25072: LD_EXP 33
25076: PPUSH
25077: LD_STRING DH-Ruattnext-1
25079: PPUSH
25080: CALL_OW 88
// end ;
25084: END
// every 0 0$3 trigger IsDead ( Morozov ) and IsOk ( Omar ) do
25085: LD_EXP 52
25089: PPUSH
25090: CALL_OW 301
25094: PUSH
25095: LD_EXP 43
25099: PPUSH
25100: CALL_OW 302
25104: AND
25105: IFFALSE 25122
25107: GO 25109
25109: DISABLE
// SayRadio ( Omar , DOm-Morozov ) ;
25110: LD_EXP 43
25114: PPUSH
25115: LD_STRING DOm-Morozov
25117: PPUSH
25118: CALL_OW 94
25122: END
// every 0 0$1 trigger gameActive and GetResourceType ( GetBase ( arDepot ) , mat_oil ) <= 30 do
25123: LD_EXP 31
25127: PUSH
25128: LD_EXP 47
25132: PPUSH
25133: CALL_OW 274
25137: PPUSH
25138: LD_INT 2
25140: PPUSH
25141: CALL_OW 275
25145: PUSH
25146: LD_INT 30
25148: LESSEQUAL
25149: AND
25150: IFFALSE 25240
25152: GO 25154
25154: DISABLE
// begin wait ( 0 0$10 ) ;
25155: LD_INT 350
25157: PPUSH
25158: CALL_OW 67
// DialogueOn ;
25162: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
25166: LD_EXP 33
25170: PPUSH
25171: LD_STRING DH-Fuel-1
25173: PPUSH
25174: CALL_OW 88
// if IsOk ( Givi ) then
25178: LD_EXP 34
25182: PPUSH
25183: CALL_OW 302
25187: IFFALSE 25225
// begin Say ( Givi , DG-Fuel-2 ) ;
25189: LD_EXP 34
25193: PPUSH
25194: LD_STRING DG-Fuel-2
25196: PPUSH
25197: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
25201: LD_EXP 34
25205: PPUSH
25206: LD_STRING DG-Fuel-3
25208: PPUSH
25209: CALL_OW 88
// Say ( Givi , DG-Fuel-4 ) ;
25213: LD_EXP 34
25217: PPUSH
25218: LD_STRING DG-Fuel-4
25220: PPUSH
25221: CALL_OW 88
// end ; DialogueOff ;
25225: CALL_OW 7
// Query ( QOil ) ;
25229: LD_STRING QOil
25231: PPUSH
25232: CALL_OW 97
// GoForOil ( ) ;
25236: CALL 8579 0 0
// end ;
25240: END
// every 0 0$1 trigger ( leninSpotted and omarAttack ) or IsDead ( Morozov ) do
25241: LD_EXP 14
25245: PUSH
25246: LD_EXP 23
25250: AND
25251: PUSH
25252: LD_EXP 52
25256: PPUSH
25257: CALL_OW 301
25261: OR
25262: IFFALSE 25603
25264: GO 25266
25266: DISABLE
// begin if IsDead ( Morozov ) then
25267: LD_EXP 52
25271: PPUSH
25272: CALL_OW 301
25276: IFFALSE 25287
// wait ( 1 1$45 ) else
25278: LD_INT 3675
25280: PPUSH
25281: CALL_OW 67
25285: GO 25315
// wait ( [ 9 9$30 , 8 8$00 , 7 7$40 , 6 6$30 ] [ Difficulty ] ) ;
25287: LD_INT 19950
25289: PUSH
25290: LD_INT 16800
25292: PUSH
25293: LD_INT 16100
25295: PUSH
25296: LD_INT 13650
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: PUSH
25305: LD_OWVAR 67
25309: ARRAY
25310: PPUSH
25311: CALL_OW 67
// DialogueOn ;
25315: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
25319: LD_EXP 41
25323: PPUSH
25324: LD_STRING DShar-End-1
25326: PPUSH
25327: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
25331: LD_EXP 33
25335: PPUSH
25336: LD_STRING DH-End-2
25338: PPUSH
25339: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
25343: LD_EXP 41
25347: PPUSH
25348: LD_STRING DShar-End-3
25350: PPUSH
25351: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
25355: LD_EXP 33
25359: PPUSH
25360: LD_STRING DH-End-4
25362: PPUSH
25363: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
25367: LD_EXP 41
25371: PPUSH
25372: LD_STRING DShar-End-5
25374: PPUSH
25375: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
25379: LD_EXP 41
25383: PPUSH
25384: LD_STRING DShar-End-6
25386: PPUSH
25387: CALL_OW 94
// dwait ( 0 0$2 ) ;
25391: LD_INT 70
25393: PPUSH
25394: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
25398: LD_EXP 33
25402: PPUSH
25403: LD_STRING DH-End-7
25405: PPUSH
25406: CALL_OW 88
// DialogueOff ;
25410: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
25414: LD_STRING M6
25416: PPUSH
25417: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
25421: LD_INT 17
25423: PPUSH
25424: LD_INT 1
25426: PPUSH
25427: CALL_OW 424
// escapeAllowed := true ;
25431: LD_ADDR_EXP 24
25435: PUSH
25436: LD_INT 1
25438: ST_TO_ADDR
// wait ( 0 0$2 ) ;
25439: LD_INT 70
25441: PPUSH
25442: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
25446: LD_EXP 44
25450: PPUSH
25451: LD_STRING DKs-End-8
25453: PPUSH
25454: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
25458: LD_EXP 38
25462: PPUSH
25463: LD_STRING DK-End-10
25465: PPUSH
25466: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
25470: LD_EXP 44
25474: PPUSH
25475: LD_STRING DKs-End-9
25477: PPUSH
25478: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
25482: LD_EXP 40
25486: PPUSH
25487: LD_STRING DMar-End-11
25489: PPUSH
25490: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
25494: LD_STRING 05_DrugsTested
25496: PPUSH
25497: LD_EXP 1
25501: PPUSH
25502: CALL_OW 30
25506: IFFALSE 25520
// Say ( Mike , DM-End-12 ) ;
25508: LD_EXP 35
25512: PPUSH
25513: LD_STRING DM-End-12
25515: PPUSH
25516: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
25520: LD_EXP 42
25524: PPUSH
25525: LD_STRING DO-End-13
25527: PPUSH
25528: CALL_OW 88
// if IsOk ( Sophia ) then
25532: LD_EXP 39
25536: PPUSH
25537: CALL_OW 302
25541: IFFALSE 25567
// begin Say ( Sophia , DS-End-15 ) ;
25543: LD_EXP 39
25547: PPUSH
25548: LD_STRING DS-End-15
25550: PPUSH
25551: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
25555: LD_EXP 38
25559: PPUSH
25560: LD_STRING DK-End-16
25562: PPUSH
25563: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
25567: LD_EXP 34
25571: PPUSH
25572: LD_STRING DG-End-17
25574: PPUSH
25575: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
25579: LD_EXP 34
25583: PPUSH
25584: LD_STRING DG-End-18
25586: PPUSH
25587: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
25591: LD_EXP 34
25595: PPUSH
25596: LD_STRING DG-End-19
25598: PPUSH
25599: CALL_OW 88
// end ;
25603: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
25604: LD_EXP 24
25608: IFFALSE 25736
25610: GO 25612
25612: DISABLE
25613: LD_INT 0
25615: PPUSH
25616: PPUSH
// begin enable ;
25617: ENABLE
// display_strings := [ #X106-2 , escapeTimer ] ;
25618: LD_ADDR_OWVAR 47
25622: PUSH
25623: LD_STRING #X106-2
25625: PUSH
25626: LD_EXP 25
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
25635: LD_ADDR_EXP 25
25639: PUSH
25640: LD_EXP 25
25644: PUSH
25645: LD_INT 35
25647: MINUS
25648: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
25649: LD_ADDR_VAR 0 2
25653: PUSH
25654: LD_INT 17
25656: PPUSH
25657: LD_INT 22
25659: PUSH
25660: LD_INT 2
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: LD_INT 21
25669: PUSH
25670: LD_INT 1
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 23
25679: PUSH
25680: LD_INT 2
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: LIST
25691: PPUSH
25692: CALL_OW 71
25696: ST_TO_ADDR
// if not outsiders then
25697: LD_VAR 0 2
25701: NOT
25702: IFFALSE 25719
// begin escapeAllowed := false ;
25704: LD_ADDR_EXP 24
25708: PUSH
25709: LD_INT 0
25711: ST_TO_ADDR
// disable ;
25712: DISABLE
// MissionWin ;
25713: CALL 25739 0 0
// exit ;
25717: GO 25736
// end ; if escapeTimer <= 0 0$00 then
25719: LD_EXP 25
25723: PUSH
25724: LD_INT 0
25726: LESSEQUAL
25727: IFFALSE 25736
// YouLost ( TimeOut ) ;
25729: LD_STRING TimeOut
25731: PPUSH
25732: CALL_OW 104
// end ;
25736: PPOPN 2
25738: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
25739: LD_INT 0
25741: PPUSH
25742: PPUSH
25743: PPUSH
25744: PPUSH
25745: PPUSH
// Say ( Heike , DH-End-20 ) ;
25746: LD_EXP 33
25750: PPUSH
25751: LD_STRING DH-End-20
25753: PPUSH
25754: CALL_OW 88
// if rolfDied then
25758: LD_EXP 13
25762: IFFALSE 25777
// AddMedal ( med1 , - 1 ) else
25764: LD_STRING med1
25766: PPUSH
25767: LD_INT 1
25769: NEG
25770: PPUSH
25771: CALL_OW 101
25775: GO 25807
// if not canRolfJoin then
25777: LD_EXP 29
25781: NOT
25782: IFFALSE 25797
// AddMedal ( med1 , - 2 ) else
25784: LD_STRING med1
25786: PPUSH
25787: LD_INT 2
25789: NEG
25790: PPUSH
25791: CALL_OW 101
25795: GO 25807
// AddMedal ( med1 , 1 ) ;
25797: LD_STRING med1
25799: PPUSH
25800: LD_INT 1
25802: PPUSH
25803: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
25807: LD_EXP 22
25811: PUSH
25812: LD_EXP 16
25816: AND
25817: IFFALSE 25831
// AddMedal ( med2 , 1 ) else
25819: LD_STRING med2
25821: PPUSH
25822: LD_INT 1
25824: PPUSH
25825: CALL_OW 101
25829: GO 25880
// if omarHasVehicles then
25831: LD_EXP 22
25835: IFFALSE 25850
// AddMedal ( med2 , - 1 ) else
25837: LD_STRING med2
25839: PPUSH
25840: LD_INT 1
25842: NEG
25843: PPUSH
25844: CALL_OW 101
25848: GO 25880
// if rolfHasVehicles then
25850: LD_EXP 16
25854: IFFALSE 25869
// AddMedal ( med2 , - 2 ) else
25856: LD_STRING med2
25858: PPUSH
25859: LD_INT 2
25861: NEG
25862: PPUSH
25863: CALL_OW 101
25867: GO 25880
// AddMedal ( med2 , - 3 ) ;
25869: LD_STRING med2
25871: PPUSH
25872: LD_INT 3
25874: NEG
25875: PPUSH
25876: CALL_OW 101
// if ruLoseCounter >= [ 30 , 45 , 50 , 60 ] [ Difficulty ] and heikeLoseCounter = 0 then
25880: LD_EXP 5
25884: PUSH
25885: LD_INT 30
25887: PUSH
25888: LD_INT 45
25890: PUSH
25891: LD_INT 50
25893: PUSH
25894: LD_INT 60
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: PUSH
25903: LD_OWVAR 67
25907: ARRAY
25908: GREATEREQUAL
25909: PUSH
25910: LD_EXP 26
25914: PUSH
25915: LD_INT 0
25917: EQUAL
25918: AND
25919: IFFALSE 25933
// AddMedal ( med3 , 1 ) else
25921: LD_STRING med3
25923: PPUSH
25924: LD_INT 1
25926: PPUSH
25927: CALL_OW 101
25931: GO 25963
// if heikeLoseCounter then
25933: LD_EXP 26
25937: IFFALSE 25952
// AddMedal ( med3 , - 2 ) else
25939: LD_STRING med3
25941: PPUSH
25942: LD_INT 2
25944: NEG
25945: PPUSH
25946: CALL_OW 101
25950: GO 25963
// AddMedal ( med3 , - 1 ) ;
25952: LD_STRING med3
25954: PPUSH
25955: LD_INT 1
25957: NEG
25958: PPUSH
25959: CALL_OW 101
// GiveMedals ( MAIN ) ;
25963: LD_STRING MAIN
25965: PPUSH
25966: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
25970: LD_INT 22
25972: PUSH
25973: LD_INT 2
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 23
25982: PUSH
25983: LD_INT 2
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 21
25992: PUSH
25993: LD_INT 1
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: LIST
26004: PPUSH
26005: CALL_OW 69
26009: PPUSH
26010: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
26014: LD_EXP 33
26018: PPUSH
26019: LD_STRING 06_Heike
26021: PPUSH
26022: CALL_OW 38
// if Aviradze then
26026: LD_EXP 45
26030: IFFALSE 26044
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
26032: LD_EXP 45
26036: PPUSH
26037: LD_STRING 06_Aviradze
26039: PPUSH
26040: CALL_OW 38
// if Ibrahim then
26044: LD_EXP 36
26048: IFFALSE 26062
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
26050: LD_EXP 36
26054: PPUSH
26055: LD_STRING 06_Ibrahim
26057: PPUSH
26058: CALL_OW 38
// if Kamil then
26062: LD_EXP 37
26066: IFFALSE 26080
// SaveCharacters ( Kamil , 06_Kamil ) ;
26068: LD_EXP 37
26072: PPUSH
26073: LD_STRING 06_Kamil
26075: PPUSH
26076: CALL_OW 38
// if Sophia then
26080: LD_EXP 39
26084: IFFALSE 26098
// SaveCharacters ( Sophia , 06_Sophia ) ;
26086: LD_EXP 39
26090: PPUSH
26091: LD_STRING 06_Sophia
26093: PPUSH
26094: CALL_OW 38
// if Kaia then
26098: LD_EXP 38
26102: IFFALSE 26116
// SaveCharacters ( Kaia , 06_Kaia ) ;
26104: LD_EXP 38
26108: PPUSH
26109: LD_STRING 06_Kaia
26111: PPUSH
26112: CALL_OW 38
// if Givi then
26116: LD_EXP 34
26120: IFFALSE 26134
// SaveCharacters ( Givi , 06_Givi ) ;
26122: LD_EXP 34
26126: PPUSH
26127: LD_STRING 06_Givi
26129: PPUSH
26130: CALL_OW 38
// if Olaf then
26134: LD_EXP 42
26138: IFFALSE 26152
// SaveCharacters ( Olaf , 06_Olaf ) ;
26140: LD_EXP 42
26144: PPUSH
26145: LD_STRING 06_Olaf
26147: PPUSH
26148: CALL_OW 38
// if Mike then
26152: LD_EXP 35
26156: IFFALSE 26170
// SaveCharacters ( Mike , 06_Mike ) ;
26158: LD_EXP 35
26162: PPUSH
26163: LD_STRING 06_Mike
26165: PPUSH
26166: CALL_OW 38
// if Markov then
26170: LD_EXP 40
26174: IFFALSE 26188
// SaveCharacters ( Markov , 06_Markov ) ;
26176: LD_EXP 40
26180: PPUSH
26181: LD_STRING 06_Markov
26183: PPUSH
26184: CALL_OW 38
// if Kurt then
26188: LD_EXP 44
26192: IFFALSE 26206
// SaveCharacters ( Kurt , 06_Kurt ) ;
26194: LD_EXP 44
26198: PPUSH
26199: LD_STRING 06_Kurt
26201: PPUSH
26202: CALL_OW 38
// if heikeSecondSquad then
26206: LD_EXP 48
26210: IFFALSE 26224
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
26212: LD_EXP 48
26216: PPUSH
26217: LD_STRING 06_others
26219: PPUSH
26220: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
26224: LD_ADDR_VAR 0 3
26228: PUSH
26229: LD_INT 22
26231: PUSH
26232: LD_INT 2
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 23
26241: PUSH
26242: LD_INT 0
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PPUSH
26253: CALL_OW 69
26257: ST_TO_ADDR
// if tmp then
26258: LD_VAR 0 3
26262: IFFALSE 26276
// SaveCharacters ( tmp , 06_apes ) ;
26264: LD_VAR 0 3
26268: PPUSH
26269: LD_STRING 06_apes
26271: PPUSH
26272: CALL_OW 38
// if Rolf then
26276: LD_EXP 46
26280: IFFALSE 26331
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
26282: LD_EXP 46
26286: PPUSH
26287: LD_STRING 06_Rolf
26289: PPUSH
26290: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
26294: LD_STRING enableBioCharacter(BIO_ROLF)
26296: PPUSH
26297: CALL_OW 559
// if rolfSquad diff Rolf then
26301: LD_EXP 50
26305: PUSH
26306: LD_EXP 46
26310: DIFF
26311: IFFALSE 26331
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
26313: LD_EXP 50
26317: PUSH
26318: LD_EXP 46
26322: DIFF
26323: PPUSH
26324: LD_STRING 06_RolfSquad
26326: PPUSH
26327: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
26331: LD_ADDR_VAR 0 3
26335: PUSH
26336: LD_INT 17
26338: PPUSH
26339: LD_INT 21
26341: PUSH
26342: LD_INT 2
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PPUSH
26349: CALL_OW 70
26353: ST_TO_ADDR
// if tmp then
26354: LD_VAR 0 3
26358: IFFALSE 26652
// begin tmp2 := [ ] ;
26360: LD_ADDR_VAR 0 4
26364: PUSH
26365: EMPTY
26366: ST_TO_ADDR
// for i in tmp do
26367: LD_ADDR_VAR 0 2
26371: PUSH
26372: LD_VAR 0 3
26376: PUSH
26377: FOR_IN
26378: IFFALSE 26638
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
26380: LD_VAR 0 2
26384: PPUSH
26385: CALL_OW 264
26389: PUSH
26390: LD_INT 32
26392: PUSH
26393: LD_INT 12
26395: PUSH
26396: LD_INT 51
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: LIST
26403: IN
26404: IFFALSE 26541
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
26406: LD_ADDR_VAR 0 5
26410: PUSH
26411: LD_VAR 0 2
26415: PPUSH
26416: LD_INT 1
26418: PPUSH
26419: CALL_OW 289
26423: PUSH
26424: LD_VAR 0 2
26428: PPUSH
26429: LD_INT 2
26431: PPUSH
26432: CALL_OW 289
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
26441: LD_ADDR_VAR 0 4
26445: PUSH
26446: LD_VAR 0 4
26450: PPUSH
26451: LD_VAR 0 4
26455: PUSH
26456: LD_INT 1
26458: PLUS
26459: PPUSH
26460: LD_VAR 0 2
26464: PPUSH
26465: CALL_OW 265
26469: PUSH
26470: LD_VAR 0 2
26474: PPUSH
26475: CALL_OW 262
26479: PUSH
26480: LD_VAR 0 2
26484: PPUSH
26485: CALL_OW 263
26489: PUSH
26490: LD_VAR 0 2
26494: PPUSH
26495: CALL_OW 264
26499: PUSH
26500: LD_VAR 0 2
26504: PPUSH
26505: CALL_OW 248
26509: PUSH
26510: LD_VAR 0 2
26514: PPUSH
26515: CALL_OW 256
26519: PUSH
26520: LD_VAR 0 5
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: PPUSH
26534: CALL_OW 1
26538: ST_TO_ADDR
// end else
26539: GO 26636
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
26541: LD_ADDR_VAR 0 4
26545: PUSH
26546: LD_VAR 0 4
26550: PPUSH
26551: LD_VAR 0 4
26555: PUSH
26556: LD_INT 1
26558: PLUS
26559: PPUSH
26560: LD_VAR 0 2
26564: PPUSH
26565: CALL_OW 265
26569: PUSH
26570: LD_VAR 0 2
26574: PPUSH
26575: CALL_OW 262
26579: PUSH
26580: LD_VAR 0 2
26584: PPUSH
26585: CALL_OW 263
26589: PUSH
26590: LD_VAR 0 2
26594: PPUSH
26595: CALL_OW 264
26599: PUSH
26600: LD_VAR 0 2
26604: PPUSH
26605: CALL_OW 248
26609: PUSH
26610: LD_VAR 0 2
26614: PPUSH
26615: CALL_OW 256
26619: PUSH
26620: EMPTY
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: PPUSH
26631: CALL_OW 1
26635: ST_TO_ADDR
26636: GO 26377
26638: POP
26639: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
26640: LD_VAR 0 4
26644: PPUSH
26645: LD_STRING 06_Vehicles
26647: PPUSH
26648: CALL_OW 39
// end ; YouWin ;
26652: CALL_OW 103
// end ; end_of_file
26656: LD_VAR 0 1
26660: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
26661: LD_INT 0
26663: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
26664: LD_VAR 0 1
26668: PPUSH
26669: LD_VAR 0 2
26673: PPUSH
26674: CALL 86288 0 2
// if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
26678: LD_VAR 0 1
26682: PPUSH
26683: CALL_OW 255
26687: PUSH
26688: LD_INT 2
26690: EQUAL
26691: PUSH
26692: LD_OWVAR 52
26696: AND
26697: PUSH
26698: LD_VAR 0 1
26702: PPUSH
26703: CALL_OW 263
26707: PUSH
26708: LD_INT 1
26710: EQUAL
26711: AND
26712: IFFALSE 26767
// begin driver := IsDrivenBy ( vehicle ) ;
26714: LD_ADDR_VAR 0 3
26718: PUSH
26719: LD_VAR 0 1
26723: PPUSH
26724: CALL_OW 311
26728: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
26729: LD_VAR 0 1
26733: PPUSH
26734: LD_INT 211
26736: PPUSH
26737: LD_INT 101
26739: PPUSH
26740: CALL_OW 111
// AddComExitVehicle ( driver ) ;
26744: LD_VAR 0 3
26748: PPUSH
26749: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26753: LD_VAR 0 3
26757: PPUSH
26758: LD_VAR 0 2
26762: PPUSH
26763: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
26767: LD_VAR 0 1
26771: PPUSH
26772: CALL_OW 255
26776: PUSH
26777: LD_INT 3
26779: EQUAL
26780: IFFALSE 26811
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
26782: LD_ADDR_EXP 59
26786: PUSH
26787: LD_EXP 59
26791: PPUSH
26792: LD_EXP 59
26796: PUSH
26797: LD_INT 1
26799: PLUS
26800: PPUSH
26801: LD_VAR 0 1
26805: PPUSH
26806: CALL_OW 1
26810: ST_TO_ADDR
// end ;
26811: PPOPN 3
26813: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
26814: LD_VAR 0 1
26818: PPUSH
26819: CALL_OW 255
26823: PUSH
26824: LD_INT 8
26826: EQUAL
26827: PUSH
26828: LD_VAR 0 1
26832: PPUSH
26833: CALL_OW 266
26837: PUSH
26838: LD_INT 4
26840: EQUAL
26841: AND
26842: IFFALSE 26853
// ComUpgrade ( b ) ;
26844: LD_VAR 0 1
26848: PPUSH
26849: CALL_OW 146
// end ;
26853: PPOPN 1
26855: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
26856: LD_VAR 0 1
26860: PPUSH
26861: CALL 86168 0 1
// if un = Heike then
26865: LD_VAR 0 1
26869: PUSH
26870: LD_EXP 33
26874: EQUAL
26875: IFFALSE 26884
// YouLost ( Heike ) ;
26877: LD_STRING Heike
26879: PPUSH
26880: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] ] ) then
26884: LD_VAR 0 1
26888: PUSH
26889: LD_INT 22
26891: PUSH
26892: LD_INT 2
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 23
26901: PUSH
26902: LD_INT 2
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PPUSH
26913: CALL_OW 69
26917: IN
26918: IFFALSE 26934
// heikeLoseCounter := heikeLoseCounter + 1 ;
26920: LD_ADDR_EXP 26
26924: PUSH
26925: LD_EXP 26
26929: PUSH
26930: LD_INT 1
26932: PLUS
26933: ST_TO_ADDR
// if un = arDepot then
26934: LD_VAR 0 1
26938: PUSH
26939: LD_EXP 47
26943: EQUAL
26944: IFFALSE 26953
// YouLost ( Base ) ;
26946: LD_STRING Base
26948: PPUSH
26949: CALL_OW 104
// if un = Rolf then
26953: LD_VAR 0 1
26957: PUSH
26958: LD_EXP 46
26962: EQUAL
26963: IFFALSE 26973
// rolfDied := true ;
26965: LD_ADDR_EXP 13
26969: PUSH
26970: LD_INT 1
26972: ST_TO_ADDR
// if un in rolfSquad then
26973: LD_VAR 0 1
26977: PUSH
26978: LD_EXP 50
26982: IN
26983: IFFALSE 27001
// rolfSquad := rolfSquad diff un ;
26985: LD_ADDR_EXP 50
26989: PUSH
26990: LD_EXP 50
26994: PUSH
26995: LD_VAR 0 1
26999: DIFF
27000: ST_TO_ADDR
// if un in omarSquad then
27001: LD_VAR 0 1
27005: PUSH
27006: LD_EXP 51
27010: IN
27011: IFFALSE 27029
// omarSquad := omarSquad diff un ;
27013: LD_ADDR_EXP 51
27017: PUSH
27018: LD_EXP 51
27022: PUSH
27023: LD_VAR 0 1
27027: DIFF
27028: ST_TO_ADDR
// if GetSide ( un ) = 3 then
27029: LD_VAR 0 1
27033: PPUSH
27034: CALL_OW 255
27038: PUSH
27039: LD_INT 3
27041: EQUAL
27042: IFFALSE 27058
// ruLoseCounter := ruLoseCounter + 1 ;
27044: LD_ADDR_EXP 5
27048: PUSH
27049: LD_EXP 5
27053: PUSH
27054: LD_INT 1
27056: PLUS
27057: ST_TO_ADDR
// if un in ruAttackers then
27058: LD_VAR 0 1
27062: PUSH
27063: LD_EXP 60
27067: IN
27068: IFFALSE 27086
// ruAttackers := ruAttackers diff un ;
27070: LD_ADDR_EXP 60
27074: PUSH
27075: LD_EXP 60
27079: PUSH
27080: LD_VAR 0 1
27084: DIFF
27085: ST_TO_ADDR
// end ;
27086: PPOPN 1
27088: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
27089: LD_INT 0
27091: PPUSH
27092: PPUSH
27093: PPUSH
27094: PPUSH
// begin if GetSide ( vehicle ) = 8 and rolfAttack then
27095: LD_VAR 0 2
27099: PPUSH
27100: CALL_OW 255
27104: PUSH
27105: LD_INT 8
27107: EQUAL
27108: PUSH
27109: LD_EXP 32
27113: AND
27114: IFFALSE 27131
// ComMoveXY ( un , 221 , 161 ) ;
27116: LD_VAR 0 1
27120: PPUSH
27121: LD_INT 221
27123: PPUSH
27124: LD_INT 161
27126: PPUSH
27127: CALL_OW 111
// if GetSide ( vehicle ) = 5 and omarAttack then
27131: LD_VAR 0 2
27135: PPUSH
27136: CALL_OW 255
27140: PUSH
27141: LD_INT 5
27143: EQUAL
27144: PUSH
27145: LD_EXP 23
27149: AND
27150: IFFALSE 27259
// begin ComMoveXY ( un , 333 , 233 ) ;
27152: LD_VAR 0 1
27156: PPUSH
27157: LD_INT 333
27159: PPUSH
27160: LD_INT 233
27162: PPUSH
27163: CALL_OW 111
// if not HexInfo ( 334 , 241 ) or not GetBType ( HexInfo ( 334 , 241 ) ) = b_armoury then
27167: LD_INT 334
27169: PPUSH
27170: LD_INT 241
27172: PPUSH
27173: CALL_OW 428
27177: NOT
27178: PUSH
27179: LD_INT 334
27181: PPUSH
27182: LD_INT 241
27184: PPUSH
27185: CALL_OW 428
27189: PPUSH
27190: CALL_OW 266
27194: PUSH
27195: LD_INT 4
27197: EQUAL
27198: NOT
27199: OR
27200: IFFALSE 27204
// exit ;
27202: GO 27781
// AddComEnterUnit ( un , HexInfo ( 334 , 241 ) ) ;
27204: LD_VAR 0 1
27208: PPUSH
27209: LD_INT 334
27211: PPUSH
27212: LD_INT 241
27214: PPUSH
27215: CALL_OW 428
27219: PPUSH
27220: CALL_OW 180
// AddComChangeProfession ( un , class_soldier ) ;
27224: LD_VAR 0 1
27228: PPUSH
27229: LD_INT 1
27231: PPUSH
27232: CALL_OW 183
// AddComExitBuilding ( un ) ;
27236: LD_VAR 0 1
27240: PPUSH
27241: CALL_OW 182
// AddComMoveUnit ( un , Omar ) ;
27245: LD_VAR 0 1
27249: PPUSH
27250: LD_EXP 43
27254: PPUSH
27255: CALL_OW 172
// end ; if GetSide ( un ) = 3 and not un in ruAttackers then
27259: LD_VAR 0 1
27263: PPUSH
27264: CALL_OW 255
27268: PUSH
27269: LD_INT 3
27271: EQUAL
27272: PUSH
27273: LD_VAR 0 1
27277: PUSH
27278: LD_EXP 60
27282: IN
27283: NOT
27284: AND
27285: IFFALSE 27781
// begin if not IsInArea ( un , ruMainBase ) then
27287: LD_VAR 0 1
27291: PPUSH
27292: LD_INT 10
27294: PPUSH
27295: CALL_OW 308
27299: NOT
27300: IFFALSE 27314
// ComMoveToArea ( un , ruMainBase ) ;
27302: LD_VAR 0 1
27306: PPUSH
27307: LD_INT 10
27309: PPUSH
27310: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
27314: LD_INT 35
27316: PPUSH
27317: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
27321: LD_VAR 0 1
27325: PPUSH
27326: CALL_OW 302
27330: NOT
27331: PUSH
27332: LD_VAR 0 1
27336: PPUSH
27337: LD_INT 10
27339: PPUSH
27340: CALL_OW 308
27344: OR
27345: IFFALSE 27314
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
27347: LD_ADDR_EXP 58
27351: PUSH
27352: LD_EXP 58
27356: PPUSH
27357: LD_EXP 58
27361: PUSH
27362: LD_INT 1
27364: PLUS
27365: PPUSH
27366: LD_VAR 0 1
27370: PPUSH
27371: CALL_OW 1
27375: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
27376: LD_ADDR_VAR 0 8
27380: PUSH
27381: LD_INT 72
27383: PUSH
27384: LD_INT 12
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: ST_TO_ADDR
// if tmp then
27391: LD_VAR 0 8
27395: IFFALSE 27510
// for i in tmp do
27397: LD_ADDR_VAR 0 5
27401: PUSH
27402: LD_VAR 0 8
27406: PUSH
27407: FOR_IN
27408: IFFALSE 27508
// if UnitsInside ( i ) < 6 then
27410: LD_VAR 0 5
27414: PPUSH
27415: CALL_OW 313
27419: PUSH
27420: LD_INT 6
27422: LESS
27423: IFFALSE 27506
// begin AddComEnterUnit ( un , i ) ;
27425: LD_VAR 0 1
27429: PPUSH
27430: LD_VAR 0 5
27434: PPUSH
27435: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
27439: LD_VAR 0 8
27443: PPUSH
27444: LD_INT 22
27446: PUSH
27447: LD_INT 23
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 1
27456: PPUSH
27457: LD_INT 2
27459: PPUSH
27460: CALL_OW 12
27464: ARRAY
27465: PPUSH
27466: LD_INT 1
27468: PPUSH
27469: LD_INT 1
27471: PPUSH
27472: LD_INT 44
27474: PUSH
27475: LD_INT 46
27477: PUSH
27478: LD_INT 47
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 1
27488: PPUSH
27489: LD_INT 3
27491: PPUSH
27492: CALL_OW 12
27496: ARRAY
27497: PPUSH
27498: CALL_OW 185
// exit ;
27502: POP
27503: POP
27504: GO 27781
// end ;
27506: GO 27407
27508: POP
27509: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
27510: LD_ADDR_VAR 0 8
27514: PUSH
27515: LD_INT 10
27517: PPUSH
27518: LD_INT 22
27520: PUSH
27521: LD_INT 3
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: LD_INT 50
27530: PUSH
27531: EMPTY
27532: LIST
27533: PUSH
27534: LD_INT 2
27536: PUSH
27537: LD_INT 30
27539: PUSH
27540: LD_INT 4
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 30
27549: PUSH
27550: LD_INT 5
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 30
27559: PUSH
27560: LD_INT 32
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 30
27569: PUSH
27570: LD_INT 31
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: LIST
27588: PPUSH
27589: CALL_OW 70
27593: ST_TO_ADDR
// if not tmp then
27594: LD_VAR 0 8
27598: NOT
27599: IFFALSE 27618
// begin ComMoveXY ( un , 83 , 133 ) ;
27601: LD_VAR 0 1
27605: PPUSH
27606: LD_INT 83
27608: PPUSH
27609: LD_INT 133
27611: PPUSH
27612: CALL_OW 111
// exit ;
27616: GO 27781
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
27618: LD_ADDR_VAR 0 6
27622: PUSH
27623: LD_VAR 0 1
27627: PPUSH
27628: LD_VAR 0 8
27632: PPUSH
27633: LD_INT 1
27635: PPUSH
27636: LD_INT 1
27638: PPUSH
27639: CALL 34535 0 4
27643: PUSH
27644: FOR_IN
27645: IFFALSE 27779
// begin case GetBType ( b ) of b_armoury , b_barracks :
27647: LD_VAR 0 6
27651: PPUSH
27652: CALL_OW 266
27656: PUSH
27657: LD_INT 4
27659: DOUBLE
27660: EQUAL
27661: IFTRUE 27671
27663: LD_INT 5
27665: DOUBLE
27666: EQUAL
27667: IFTRUE 27671
27669: GO 27682
27671: POP
// p := 6 ; b_breastwork , b_bunker :
27672: LD_ADDR_VAR 0 7
27676: PUSH
27677: LD_INT 6
27679: ST_TO_ADDR
27680: GO 27708
27682: LD_INT 31
27684: DOUBLE
27685: EQUAL
27686: IFTRUE 27696
27688: LD_INT 32
27690: DOUBLE
27691: EQUAL
27692: IFTRUE 27696
27694: GO 27707
27696: POP
// p := 1 ; end ;
27697: LD_ADDR_VAR 0 7
27701: PUSH
27702: LD_INT 1
27704: ST_TO_ADDR
27705: GO 27708
27707: POP
// if UnitsInside ( b ) < p then
27708: LD_VAR 0 6
27712: PPUSH
27713: CALL_OW 313
27717: PUSH
27718: LD_VAR 0 7
27722: LESS
27723: IFFALSE 27777
// begin ComEnterUnit ( un , b ) ;
27725: LD_VAR 0 1
27729: PPUSH
27730: LD_VAR 0 6
27734: PPUSH
27735: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
27739: LD_VAR 0 6
27743: PPUSH
27744: CALL_OW 266
27748: PUSH
27749: LD_INT 4
27751: PUSH
27752: LD_INT 5
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: IN
27759: IFFALSE 27773
// AddComChangeProfession ( un , class_soldier ) ;
27761: LD_VAR 0 1
27765: PPUSH
27766: LD_INT 1
27768: PPUSH
27769: CALL_OW 183
// exit ;
27773: POP
27774: POP
27775: GO 27781
// end ; end ;
27777: GO 27644
27779: POP
27780: POP
// end ; end ;
27781: PPOPN 8
27783: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
27784: LD_INT 0
27786: PPUSH
27787: PPUSH
27788: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
27789: LD_VAR 0 2
27793: PPUSH
27794: CALL_OW 255
27798: PUSH
27799: LD_INT 3
27801: EQUAL
27802: PUSH
27803: LD_VAR 0 2
27807: PPUSH
27808: CALL_OW 257
27812: PUSH
27813: LD_INT 1
27815: EQUAL
27816: AND
27817: PUSH
27818: LD_VAR 0 2
27822: PUSH
27823: LD_EXP 58
27827: IN
27828: NOT
27829: AND
27830: IFFALSE 28143
// begin ComMoveToArea ( un , ruMainBase ) ;
27832: LD_VAR 0 2
27836: PPUSH
27837: LD_INT 10
27839: PPUSH
27840: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
27844: LD_INT 35
27846: PPUSH
27847: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
27851: LD_VAR 0 2
27855: PPUSH
27856: CALL_OW 302
27860: NOT
27861: PUSH
27862: LD_VAR 0 2
27866: PPUSH
27867: LD_INT 10
27869: PPUSH
27870: CALL_OW 308
27874: OR
27875: IFFALSE 27844
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
27877: LD_ADDR_EXP 58
27881: PUSH
27882: LD_EXP 58
27886: PPUSH
27887: LD_EXP 58
27891: PUSH
27892: LD_INT 1
27894: PLUS
27895: PPUSH
27896: LD_VAR 0 2
27900: PPUSH
27901: CALL_OW 1
27905: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
27906: LD_ADDR_VAR 0 4
27910: PUSH
27911: LD_INT 10
27913: PPUSH
27914: LD_INT 22
27916: PUSH
27917: LD_INT 3
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PUSH
27924: LD_INT 50
27926: PUSH
27927: EMPTY
27928: LIST
27929: PUSH
27930: LD_INT 2
27932: PUSH
27933: LD_INT 30
27935: PUSH
27936: LD_INT 4
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 30
27945: PUSH
27946: LD_INT 5
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 30
27955: PUSH
27956: LD_INT 32
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 30
27965: PUSH
27966: LD_INT 31
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: LIST
27984: PPUSH
27985: CALL_OW 70
27989: ST_TO_ADDR
// if not tmp then
27990: LD_VAR 0 4
27994: NOT
27995: IFFALSE 28014
// begin ComMoveXY ( un , 83 , 133 ) ;
27997: LD_VAR 0 2
28001: PPUSH
28002: LD_INT 83
28004: PPUSH
28005: LD_INT 133
28007: PPUSH
28008: CALL_OW 111
// exit ;
28012: GO 28392
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
28014: LD_ADDR_VAR 0 5
28018: PUSH
28019: LD_VAR 0 2
28023: PPUSH
28024: LD_VAR 0 4
28028: PPUSH
28029: LD_INT 1
28031: PPUSH
28032: LD_INT 1
28034: PPUSH
28035: CALL 34535 0 4
28039: PUSH
28040: FOR_IN
28041: IFFALSE 28141
// begin case GetBType ( b ) of b_armoury , b_barracks :
28043: LD_VAR 0 5
28047: PPUSH
28048: CALL_OW 266
28052: PUSH
28053: LD_INT 4
28055: DOUBLE
28056: EQUAL
28057: IFTRUE 28067
28059: LD_INT 5
28061: DOUBLE
28062: EQUAL
28063: IFTRUE 28067
28065: GO 28078
28067: POP
// p := 6 ; b_breastwork , b_bunker :
28068: LD_ADDR_VAR 0 3
28072: PUSH
28073: LD_INT 6
28075: ST_TO_ADDR
28076: GO 28104
28078: LD_INT 31
28080: DOUBLE
28081: EQUAL
28082: IFTRUE 28092
28084: LD_INT 32
28086: DOUBLE
28087: EQUAL
28088: IFTRUE 28092
28090: GO 28103
28092: POP
// p := 1 ; end ;
28093: LD_ADDR_VAR 0 3
28097: PUSH
28098: LD_INT 1
28100: ST_TO_ADDR
28101: GO 28104
28103: POP
// if UnitsInside ( b ) < p then
28104: LD_VAR 0 5
28108: PPUSH
28109: CALL_OW 313
28113: PUSH
28114: LD_VAR 0 3
28118: LESS
28119: IFFALSE 28139
// begin ComEnterUnit ( un , b ) ;
28121: LD_VAR 0 2
28125: PPUSH
28126: LD_VAR 0 5
28130: PPUSH
28131: CALL_OW 120
// exit ;
28135: POP
28136: POP
28137: GO 28392
// end ; end ;
28139: GO 28040
28141: POP
28142: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
28143: LD_VAR 0 2
28147: PUSH
28148: LD_EXP 58
28152: IN
28153: PUSH
28154: LD_VAR 0 2
28158: PPUSH
28159: CALL_OW 257
28163: PUSH
28164: LD_INT 1
28166: EQUAL
28167: AND
28168: IFFALSE 28392
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28170: LD_ADDR_VAR 0 4
28174: PUSH
28175: LD_INT 10
28177: PPUSH
28178: LD_INT 22
28180: PUSH
28181: LD_INT 3
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: LD_INT 50
28190: PUSH
28191: EMPTY
28192: LIST
28193: PUSH
28194: LD_INT 2
28196: PUSH
28197: LD_INT 30
28199: PUSH
28200: LD_INT 4
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 30
28209: PUSH
28210: LD_INT 5
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 30
28219: PUSH
28220: LD_INT 32
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 30
28229: PUSH
28230: LD_INT 31
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: LIST
28248: PPUSH
28249: CALL_OW 70
28253: ST_TO_ADDR
// if not tmp then
28254: LD_VAR 0 4
28258: NOT
28259: IFFALSE 28263
// exit ;
28261: GO 28392
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
28263: LD_ADDR_VAR 0 5
28267: PUSH
28268: LD_VAR 0 2
28272: PPUSH
28273: LD_VAR 0 4
28277: PPUSH
28278: LD_INT 1
28280: PPUSH
28281: LD_INT 1
28283: PPUSH
28284: CALL 34535 0 4
28288: PUSH
28289: FOR_IN
28290: IFFALSE 28390
// begin case GetBType ( b ) of b_armoury , b_barracks :
28292: LD_VAR 0 5
28296: PPUSH
28297: CALL_OW 266
28301: PUSH
28302: LD_INT 4
28304: DOUBLE
28305: EQUAL
28306: IFTRUE 28316
28308: LD_INT 5
28310: DOUBLE
28311: EQUAL
28312: IFTRUE 28316
28314: GO 28327
28316: POP
// p := 6 ; b_breastwork , b_bunker :
28317: LD_ADDR_VAR 0 3
28321: PUSH
28322: LD_INT 6
28324: ST_TO_ADDR
28325: GO 28353
28327: LD_INT 31
28329: DOUBLE
28330: EQUAL
28331: IFTRUE 28341
28333: LD_INT 32
28335: DOUBLE
28336: EQUAL
28337: IFTRUE 28341
28339: GO 28352
28341: POP
// p := 1 ; end ;
28342: LD_ADDR_VAR 0 3
28346: PUSH
28347: LD_INT 1
28349: ST_TO_ADDR
28350: GO 28353
28352: POP
// if UnitsInside ( b ) < p then
28353: LD_VAR 0 5
28357: PPUSH
28358: CALL_OW 313
28362: PUSH
28363: LD_VAR 0 3
28367: LESS
28368: IFFALSE 28388
// begin ComEnterUnit ( un , b ) ;
28370: LD_VAR 0 2
28374: PPUSH
28375: LD_VAR 0 5
28379: PPUSH
28380: CALL_OW 120
// exit ;
28384: POP
28385: POP
28386: GO 28392
// end ; end ;
28388: GO 28289
28390: POP
28391: POP
// end ; end ;
28392: PPOPN 5
28394: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
28395: LD_VAR 0 1
28399: PUSH
28400: LD_INT 2
28402: EQUAL
28403: PUSH
28404: LD_VAR 0 2
28408: PUSH
28409: LD_INT 5
28411: PUSH
28412: LD_INT 8
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: IN
28419: AND
28420: IFFALSE 28429
// YouLost ( FriendlyFire ) ;
28422: LD_STRING FriendlyFire
28424: PPUSH
28425: CALL_OW 104
// end ;
28429: PPOPN 2
28431: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
28432: LD_VAR 0 1
28436: PPUSH
28437: CALL_OW 255
28441: PUSH
28442: LD_INT 8
28444: EQUAL
28445: PUSH
28446: LD_VAR 0 1
28450: PPUSH
28451: CALL_OW 266
28455: PUSH
28456: LD_INT 5
28458: EQUAL
28459: AND
28460: IFFALSE 28474
// SetClass ( unit , class_mortar ) ;
28462: LD_VAR 0 2
28466: PPUSH
28467: LD_INT 8
28469: PPUSH
28470: CALL_OW 336
// end ; end_of_file
28474: PPOPN 2
28476: END
// every 0 0$35 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 400 , 320 , 280 , 250 ] [ Difficulty ] do
28477: LD_INT 6
28479: PPUSH
28480: LD_INT 1
28482: PPUSH
28483: CALL_OW 287
28487: PUSH
28488: LD_INT 400
28490: PUSH
28491: LD_INT 320
28493: PUSH
28494: LD_INT 280
28496: PUSH
28497: LD_INT 250
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: PUSH
28506: LD_OWVAR 67
28510: ARRAY
28511: LESS
28512: IFFALSE 28539
28514: GO 28516
28516: DISABLE
// begin enable ;
28517: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
28518: LD_INT 1
28520: PPUSH
28521: LD_INT 5
28523: PPUSH
28524: CALL_OW 12
28528: PPUSH
28529: LD_INT 6
28531: PPUSH
28532: LD_INT 1
28534: PPUSH
28535: CALL_OW 55
// end ;
28539: END
// every 0 0$25 trigger Prob ( 50 ) and tick < [ 28 28$00 , 27 27$00 , 26 26$00 , 25 25$00 ] [ Difficulty ] do
28540: LD_INT 50
28542: PPUSH
28543: CALL_OW 13
28547: PUSH
28548: LD_OWVAR 1
28552: PUSH
28553: LD_INT 58800
28555: PUSH
28556: LD_INT 56700
28558: PUSH
28559: LD_INT 54600
28561: PUSH
28562: LD_INT 52500
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: PUSH
28571: LD_OWVAR 67
28575: ARRAY
28576: LESS
28577: AND
28578: IFFALSE 28620
28580: GO 28582
28582: DISABLE
// begin enable ;
28583: ENABLE
// wait ( rand ( 0 0$1 , 0 0$10 ) ) ;
28584: LD_INT 35
28586: PPUSH
28587: LD_INT 350
28589: PPUSH
28590: CALL_OW 12
28594: PPUSH
28595: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , southCrates , true ) ;
28599: LD_INT 1
28601: PPUSH
28602: LD_INT 5
28604: PPUSH
28605: CALL_OW 12
28609: PPUSH
28610: LD_INT 21
28612: PPUSH
28613: LD_INT 1
28615: PPUSH
28616: CALL_OW 55
// end ; end_of_file
28620: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
28621: LD_EXP 18
28625: PUSH
28626: LD_EXP 20
28630: AND
28631: PUSH
28632: LD_EXP 17
28636: PUSH
28637: LD_EXP 19
28641: AND
28642: OR
28643: IFFALSE 28962
28645: GO 28647
28647: DISABLE
// begin enable ;
28648: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
28649: LD_EXP 18
28653: PUSH
28654: LD_EXP 20
28658: AND
28659: PUSH
28660: LD_EXP 17
28664: PUSH
28665: LD_EXP 19
28669: AND
28670: AND
28671: IFFALSE 28808
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
28673: LD_ADDR_OWVAR 47
28677: PUSH
28678: LD_STRING #X106-1a
28680: PUSH
28681: LD_EXP 21
28685: PUSH
28686: LD_INT 16
28688: PPUSH
28689: LD_INT 22
28691: PUSH
28692: LD_INT 2
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 21
28701: PUSH
28702: LD_INT 2
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 33
28711: PUSH
28712: LD_INT 1
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 58
28721: PUSH
28722: EMPTY
28723: LIST
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: PPUSH
28731: CALL_OW 70
28735: MINUS
28736: PPUSH
28737: CALL 68589 0 1
28741: PUSH
28742: LD_STRING #X106-3a
28744: PUSH
28745: LD_EXP 20
28749: PUSH
28750: LD_STRING #X106-1
28752: PUSH
28753: LD_EXP 50
28757: PUSH
28758: LD_INT 0
28760: PLUS
28761: PUSH
28762: LD_EXP 50
28766: PPUSH
28767: LD_INT 55
28769: PUSH
28770: EMPTY
28771: LIST
28772: PPUSH
28773: CALL_OW 72
28777: PUSH
28778: LD_INT 0
28780: PLUS
28781: MINUS
28782: PPUSH
28783: CALL 68589 0 1
28787: PUSH
28788: LD_STRING #X106-3
28790: PUSH
28791: LD_EXP 19
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: ST_TO_ADDR
// end else
28806: GO 28962
// if omarWantVehicles and omarWaitingForVehiclesTimer then
28808: LD_EXP 18
28812: PUSH
28813: LD_EXP 20
28817: AND
28818: IFFALSE 28905
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
28820: LD_ADDR_OWVAR 47
28824: PUSH
28825: LD_STRING #X106-1a
28827: PUSH
28828: LD_EXP 21
28832: PUSH
28833: LD_INT 16
28835: PPUSH
28836: LD_INT 22
28838: PUSH
28839: LD_INT 2
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 21
28848: PUSH
28849: LD_INT 2
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 33
28858: PUSH
28859: LD_INT 1
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: LD_INT 58
28868: PUSH
28869: EMPTY
28870: LIST
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: PPUSH
28878: CALL_OW 70
28882: MINUS
28883: PPUSH
28884: CALL 68589 0 1
28888: PUSH
28889: LD_STRING #X106-3a
28891: PUSH
28892: LD_EXP 20
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: ST_TO_ADDR
// end else
28903: GO 28962
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
28905: LD_ADDR_OWVAR 47
28909: PUSH
28910: LD_STRING #X106-1
28912: PUSH
28913: LD_EXP 50
28917: PUSH
28918: LD_INT 0
28920: PLUS
28921: PUSH
28922: LD_EXP 50
28926: PPUSH
28927: LD_INT 55
28929: PUSH
28930: EMPTY
28931: LIST
28932: PPUSH
28933: CALL_OW 72
28937: PUSH
28938: LD_INT 0
28940: PLUS
28941: MINUS
28942: PPUSH
28943: CALL 68589 0 1
28947: PUSH
28948: LD_STRING #X106-3
28950: PUSH
28951: LD_EXP 19
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: ST_TO_ADDR
// end ; end ; end_of_file
28962: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28963: LD_INT 0
28965: PPUSH
28966: PPUSH
// if exist_mode then
28967: LD_VAR 0 2
28971: IFFALSE 28996
// unit := CreateCharacter ( prefix & ident ) else
28973: LD_ADDR_VAR 0 5
28977: PUSH
28978: LD_VAR 0 3
28982: PUSH
28983: LD_VAR 0 1
28987: STR
28988: PPUSH
28989: CALL_OW 34
28993: ST_TO_ADDR
28994: GO 29011
// unit := NewCharacter ( ident ) ;
28996: LD_ADDR_VAR 0 5
29000: PUSH
29001: LD_VAR 0 1
29005: PPUSH
29006: CALL_OW 25
29010: ST_TO_ADDR
// result := unit ;
29011: LD_ADDR_VAR 0 4
29015: PUSH
29016: LD_VAR 0 5
29020: ST_TO_ADDR
// end ;
29021: LD_VAR 0 4
29025: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29026: LD_INT 0
29028: PPUSH
29029: PPUSH
// if not side or not nation then
29030: LD_VAR 0 1
29034: NOT
29035: PUSH
29036: LD_VAR 0 2
29040: NOT
29041: OR
29042: IFFALSE 29046
// exit ;
29044: GO 29814
// case nation of nation_american :
29046: LD_VAR 0 2
29050: PUSH
29051: LD_INT 1
29053: DOUBLE
29054: EQUAL
29055: IFTRUE 29059
29057: GO 29273
29059: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29060: LD_ADDR_VAR 0 4
29064: PUSH
29065: LD_INT 35
29067: PUSH
29068: LD_INT 45
29070: PUSH
29071: LD_INT 46
29073: PUSH
29074: LD_INT 47
29076: PUSH
29077: LD_INT 82
29079: PUSH
29080: LD_INT 83
29082: PUSH
29083: LD_INT 84
29085: PUSH
29086: LD_INT 85
29088: PUSH
29089: LD_INT 86
29091: PUSH
29092: LD_INT 1
29094: PUSH
29095: LD_INT 2
29097: PUSH
29098: LD_INT 6
29100: PUSH
29101: LD_INT 15
29103: PUSH
29104: LD_INT 16
29106: PUSH
29107: LD_INT 7
29109: PUSH
29110: LD_INT 12
29112: PUSH
29113: LD_INT 13
29115: PUSH
29116: LD_INT 10
29118: PUSH
29119: LD_INT 14
29121: PUSH
29122: LD_INT 20
29124: PUSH
29125: LD_INT 21
29127: PUSH
29128: LD_INT 22
29130: PUSH
29131: LD_INT 25
29133: PUSH
29134: LD_INT 32
29136: PUSH
29137: LD_INT 27
29139: PUSH
29140: LD_INT 36
29142: PUSH
29143: LD_INT 69
29145: PUSH
29146: LD_INT 39
29148: PUSH
29149: LD_INT 34
29151: PUSH
29152: LD_INT 40
29154: PUSH
29155: LD_INT 48
29157: PUSH
29158: LD_INT 49
29160: PUSH
29161: LD_INT 50
29163: PUSH
29164: LD_INT 51
29166: PUSH
29167: LD_INT 52
29169: PUSH
29170: LD_INT 53
29172: PUSH
29173: LD_INT 54
29175: PUSH
29176: LD_INT 55
29178: PUSH
29179: LD_INT 56
29181: PUSH
29182: LD_INT 57
29184: PUSH
29185: LD_INT 58
29187: PUSH
29188: LD_INT 59
29190: PUSH
29191: LD_INT 60
29193: PUSH
29194: LD_INT 61
29196: PUSH
29197: LD_INT 62
29199: PUSH
29200: LD_INT 80
29202: PUSH
29203: LD_INT 82
29205: PUSH
29206: LD_INT 83
29208: PUSH
29209: LD_INT 84
29211: PUSH
29212: LD_INT 85
29214: PUSH
29215: LD_INT 86
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: ST_TO_ADDR
29271: GO 29738
29273: LD_INT 2
29275: DOUBLE
29276: EQUAL
29277: IFTRUE 29281
29279: GO 29507
29281: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29282: LD_ADDR_VAR 0 4
29286: PUSH
29287: LD_INT 35
29289: PUSH
29290: LD_INT 45
29292: PUSH
29293: LD_INT 46
29295: PUSH
29296: LD_INT 47
29298: PUSH
29299: LD_INT 82
29301: PUSH
29302: LD_INT 83
29304: PUSH
29305: LD_INT 84
29307: PUSH
29308: LD_INT 85
29310: PUSH
29311: LD_INT 87
29313: PUSH
29314: LD_INT 70
29316: PUSH
29317: LD_INT 1
29319: PUSH
29320: LD_INT 11
29322: PUSH
29323: LD_INT 3
29325: PUSH
29326: LD_INT 4
29328: PUSH
29329: LD_INT 5
29331: PUSH
29332: LD_INT 6
29334: PUSH
29335: LD_INT 15
29337: PUSH
29338: LD_INT 18
29340: PUSH
29341: LD_INT 7
29343: PUSH
29344: LD_INT 17
29346: PUSH
29347: LD_INT 8
29349: PUSH
29350: LD_INT 20
29352: PUSH
29353: LD_INT 21
29355: PUSH
29356: LD_INT 22
29358: PUSH
29359: LD_INT 72
29361: PUSH
29362: LD_INT 26
29364: PUSH
29365: LD_INT 69
29367: PUSH
29368: LD_INT 39
29370: PUSH
29371: LD_INT 40
29373: PUSH
29374: LD_INT 41
29376: PUSH
29377: LD_INT 42
29379: PUSH
29380: LD_INT 43
29382: PUSH
29383: LD_INT 48
29385: PUSH
29386: LD_INT 49
29388: PUSH
29389: LD_INT 50
29391: PUSH
29392: LD_INT 51
29394: PUSH
29395: LD_INT 52
29397: PUSH
29398: LD_INT 53
29400: PUSH
29401: LD_INT 54
29403: PUSH
29404: LD_INT 55
29406: PUSH
29407: LD_INT 56
29409: PUSH
29410: LD_INT 60
29412: PUSH
29413: LD_INT 61
29415: PUSH
29416: LD_INT 62
29418: PUSH
29419: LD_INT 66
29421: PUSH
29422: LD_INT 67
29424: PUSH
29425: LD_INT 68
29427: PUSH
29428: LD_INT 81
29430: PUSH
29431: LD_INT 82
29433: PUSH
29434: LD_INT 83
29436: PUSH
29437: LD_INT 84
29439: PUSH
29440: LD_INT 85
29442: PUSH
29443: LD_INT 87
29445: PUSH
29446: LD_INT 88
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: ST_TO_ADDR
29505: GO 29738
29507: LD_INT 3
29509: DOUBLE
29510: EQUAL
29511: IFTRUE 29515
29513: GO 29737
29515: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29516: LD_ADDR_VAR 0 4
29520: PUSH
29521: LD_INT 46
29523: PUSH
29524: LD_INT 47
29526: PUSH
29527: LD_INT 1
29529: PUSH
29530: LD_INT 2
29532: PUSH
29533: LD_INT 82
29535: PUSH
29536: LD_INT 83
29538: PUSH
29539: LD_INT 84
29541: PUSH
29542: LD_INT 85
29544: PUSH
29545: LD_INT 86
29547: PUSH
29548: LD_INT 11
29550: PUSH
29551: LD_INT 9
29553: PUSH
29554: LD_INT 20
29556: PUSH
29557: LD_INT 19
29559: PUSH
29560: LD_INT 21
29562: PUSH
29563: LD_INT 24
29565: PUSH
29566: LD_INT 22
29568: PUSH
29569: LD_INT 25
29571: PUSH
29572: LD_INT 28
29574: PUSH
29575: LD_INT 29
29577: PUSH
29578: LD_INT 30
29580: PUSH
29581: LD_INT 31
29583: PUSH
29584: LD_INT 37
29586: PUSH
29587: LD_INT 38
29589: PUSH
29590: LD_INT 32
29592: PUSH
29593: LD_INT 27
29595: PUSH
29596: LD_INT 33
29598: PUSH
29599: LD_INT 69
29601: PUSH
29602: LD_INT 39
29604: PUSH
29605: LD_INT 34
29607: PUSH
29608: LD_INT 40
29610: PUSH
29611: LD_INT 71
29613: PUSH
29614: LD_INT 23
29616: PUSH
29617: LD_INT 44
29619: PUSH
29620: LD_INT 48
29622: PUSH
29623: LD_INT 49
29625: PUSH
29626: LD_INT 50
29628: PUSH
29629: LD_INT 51
29631: PUSH
29632: LD_INT 52
29634: PUSH
29635: LD_INT 53
29637: PUSH
29638: LD_INT 54
29640: PUSH
29641: LD_INT 55
29643: PUSH
29644: LD_INT 56
29646: PUSH
29647: LD_INT 57
29649: PUSH
29650: LD_INT 58
29652: PUSH
29653: LD_INT 59
29655: PUSH
29656: LD_INT 63
29658: PUSH
29659: LD_INT 64
29661: PUSH
29662: LD_INT 65
29664: PUSH
29665: LD_INT 82
29667: PUSH
29668: LD_INT 83
29670: PUSH
29671: LD_INT 84
29673: PUSH
29674: LD_INT 85
29676: PUSH
29677: LD_INT 86
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: ST_TO_ADDR
29735: GO 29738
29737: POP
// if state > - 1 and state < 3 then
29738: LD_VAR 0 3
29742: PUSH
29743: LD_INT 1
29745: NEG
29746: GREATER
29747: PUSH
29748: LD_VAR 0 3
29752: PUSH
29753: LD_INT 3
29755: LESS
29756: AND
29757: IFFALSE 29814
// for i in result do
29759: LD_ADDR_VAR 0 5
29763: PUSH
29764: LD_VAR 0 4
29768: PUSH
29769: FOR_IN
29770: IFFALSE 29812
// if GetTech ( i , side ) <> state then
29772: LD_VAR 0 5
29776: PPUSH
29777: LD_VAR 0 1
29781: PPUSH
29782: CALL_OW 321
29786: PUSH
29787: LD_VAR 0 3
29791: NONEQUAL
29792: IFFALSE 29810
// result := result diff i ;
29794: LD_ADDR_VAR 0 4
29798: PUSH
29799: LD_VAR 0 4
29803: PUSH
29804: LD_VAR 0 5
29808: DIFF
29809: ST_TO_ADDR
29810: GO 29769
29812: POP
29813: POP
// end ;
29814: LD_VAR 0 4
29818: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29819: LD_INT 0
29821: PPUSH
29822: PPUSH
29823: PPUSH
// result := true ;
29824: LD_ADDR_VAR 0 3
29828: PUSH
29829: LD_INT 1
29831: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29832: LD_ADDR_VAR 0 5
29836: PUSH
29837: LD_VAR 0 2
29841: PPUSH
29842: CALL_OW 480
29846: ST_TO_ADDR
// if not tmp then
29847: LD_VAR 0 5
29851: NOT
29852: IFFALSE 29856
// exit ;
29854: GO 29905
// for i in tmp do
29856: LD_ADDR_VAR 0 4
29860: PUSH
29861: LD_VAR 0 5
29865: PUSH
29866: FOR_IN
29867: IFFALSE 29903
// if GetTech ( i , side ) <> state_researched then
29869: LD_VAR 0 4
29873: PPUSH
29874: LD_VAR 0 1
29878: PPUSH
29879: CALL_OW 321
29883: PUSH
29884: LD_INT 2
29886: NONEQUAL
29887: IFFALSE 29901
// begin result := false ;
29889: LD_ADDR_VAR 0 3
29893: PUSH
29894: LD_INT 0
29896: ST_TO_ADDR
// exit ;
29897: POP
29898: POP
29899: GO 29905
// end ;
29901: GO 29866
29903: POP
29904: POP
// end ;
29905: LD_VAR 0 3
29909: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29910: LD_INT 0
29912: PPUSH
29913: PPUSH
29914: PPUSH
29915: PPUSH
29916: PPUSH
29917: PPUSH
29918: PPUSH
29919: PPUSH
29920: PPUSH
29921: PPUSH
29922: PPUSH
29923: PPUSH
29924: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29925: LD_VAR 0 1
29929: NOT
29930: PUSH
29931: LD_VAR 0 1
29935: PPUSH
29936: CALL_OW 257
29940: PUSH
29941: LD_INT 9
29943: NONEQUAL
29944: OR
29945: IFFALSE 29949
// exit ;
29947: GO 30522
// side := GetSide ( unit ) ;
29949: LD_ADDR_VAR 0 9
29953: PUSH
29954: LD_VAR 0 1
29958: PPUSH
29959: CALL_OW 255
29963: ST_TO_ADDR
// tech_space := tech_spacanom ;
29964: LD_ADDR_VAR 0 12
29968: PUSH
29969: LD_INT 29
29971: ST_TO_ADDR
// tech_time := tech_taurad ;
29972: LD_ADDR_VAR 0 13
29976: PUSH
29977: LD_INT 28
29979: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29980: LD_ADDR_VAR 0 11
29984: PUSH
29985: LD_VAR 0 1
29989: PPUSH
29990: CALL_OW 310
29994: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29995: LD_VAR 0 11
29999: PPUSH
30000: CALL_OW 247
30004: PUSH
30005: LD_INT 2
30007: EQUAL
30008: IFFALSE 30012
// exit ;
30010: GO 30522
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30012: LD_ADDR_VAR 0 8
30016: PUSH
30017: LD_INT 81
30019: PUSH
30020: LD_VAR 0 9
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 3
30031: PUSH
30032: LD_INT 21
30034: PUSH
30035: LD_INT 3
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PPUSH
30050: CALL_OW 69
30054: ST_TO_ADDR
// if not tmp then
30055: LD_VAR 0 8
30059: NOT
30060: IFFALSE 30064
// exit ;
30062: GO 30522
// if in_unit then
30064: LD_VAR 0 11
30068: IFFALSE 30092
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30070: LD_ADDR_VAR 0 10
30074: PUSH
30075: LD_VAR 0 8
30079: PPUSH
30080: LD_VAR 0 11
30084: PPUSH
30085: CALL_OW 74
30089: ST_TO_ADDR
30090: GO 30112
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30092: LD_ADDR_VAR 0 10
30096: PUSH
30097: LD_VAR 0 8
30101: PPUSH
30102: LD_VAR 0 1
30106: PPUSH
30107: CALL_OW 74
30111: ST_TO_ADDR
// if not enemy then
30112: LD_VAR 0 10
30116: NOT
30117: IFFALSE 30121
// exit ;
30119: GO 30522
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30121: LD_VAR 0 11
30125: PUSH
30126: LD_VAR 0 11
30130: PPUSH
30131: LD_VAR 0 10
30135: PPUSH
30136: CALL_OW 296
30140: PUSH
30141: LD_INT 13
30143: GREATER
30144: AND
30145: PUSH
30146: LD_VAR 0 1
30150: PPUSH
30151: LD_VAR 0 10
30155: PPUSH
30156: CALL_OW 296
30160: PUSH
30161: LD_INT 12
30163: GREATER
30164: OR
30165: IFFALSE 30169
// exit ;
30167: GO 30522
// missile := [ 1 ] ;
30169: LD_ADDR_VAR 0 14
30173: PUSH
30174: LD_INT 1
30176: PUSH
30177: EMPTY
30178: LIST
30179: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30180: LD_VAR 0 9
30184: PPUSH
30185: LD_VAR 0 12
30189: PPUSH
30190: CALL_OW 325
30194: IFFALSE 30223
// missile := Replace ( missile , missile + 1 , 2 ) ;
30196: LD_ADDR_VAR 0 14
30200: PUSH
30201: LD_VAR 0 14
30205: PPUSH
30206: LD_VAR 0 14
30210: PUSH
30211: LD_INT 1
30213: PLUS
30214: PPUSH
30215: LD_INT 2
30217: PPUSH
30218: CALL_OW 1
30222: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30223: LD_VAR 0 9
30227: PPUSH
30228: LD_VAR 0 13
30232: PPUSH
30233: CALL_OW 325
30237: PUSH
30238: LD_VAR 0 10
30242: PPUSH
30243: CALL_OW 255
30247: PPUSH
30248: LD_VAR 0 13
30252: PPUSH
30253: CALL_OW 325
30257: NOT
30258: AND
30259: IFFALSE 30288
// missile := Replace ( missile , missile + 1 , 3 ) ;
30261: LD_ADDR_VAR 0 14
30265: PUSH
30266: LD_VAR 0 14
30270: PPUSH
30271: LD_VAR 0 14
30275: PUSH
30276: LD_INT 1
30278: PLUS
30279: PPUSH
30280: LD_INT 3
30282: PPUSH
30283: CALL_OW 1
30287: ST_TO_ADDR
// if missile < 2 then
30288: LD_VAR 0 14
30292: PUSH
30293: LD_INT 2
30295: LESS
30296: IFFALSE 30300
// exit ;
30298: GO 30522
// x := GetX ( enemy ) ;
30300: LD_ADDR_VAR 0 4
30304: PUSH
30305: LD_VAR 0 10
30309: PPUSH
30310: CALL_OW 250
30314: ST_TO_ADDR
// y := GetY ( enemy ) ;
30315: LD_ADDR_VAR 0 5
30319: PUSH
30320: LD_VAR 0 10
30324: PPUSH
30325: CALL_OW 251
30329: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30330: LD_ADDR_VAR 0 6
30334: PUSH
30335: LD_VAR 0 4
30339: PUSH
30340: LD_INT 1
30342: NEG
30343: PPUSH
30344: LD_INT 1
30346: PPUSH
30347: CALL_OW 12
30351: PLUS
30352: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30353: LD_ADDR_VAR 0 7
30357: PUSH
30358: LD_VAR 0 5
30362: PUSH
30363: LD_INT 1
30365: NEG
30366: PPUSH
30367: LD_INT 1
30369: PPUSH
30370: CALL_OW 12
30374: PLUS
30375: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30376: LD_VAR 0 6
30380: PPUSH
30381: LD_VAR 0 7
30385: PPUSH
30386: CALL_OW 488
30390: NOT
30391: IFFALSE 30413
// begin _x := x ;
30393: LD_ADDR_VAR 0 6
30397: PUSH
30398: LD_VAR 0 4
30402: ST_TO_ADDR
// _y := y ;
30403: LD_ADDR_VAR 0 7
30407: PUSH
30408: LD_VAR 0 5
30412: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30413: LD_ADDR_VAR 0 3
30417: PUSH
30418: LD_INT 1
30420: PPUSH
30421: LD_VAR 0 14
30425: PPUSH
30426: CALL_OW 12
30430: ST_TO_ADDR
// case i of 1 :
30431: LD_VAR 0 3
30435: PUSH
30436: LD_INT 1
30438: DOUBLE
30439: EQUAL
30440: IFTRUE 30444
30442: GO 30461
30444: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30445: LD_VAR 0 1
30449: PPUSH
30450: LD_VAR 0 10
30454: PPUSH
30455: CALL_OW 115
30459: GO 30522
30461: LD_INT 2
30463: DOUBLE
30464: EQUAL
30465: IFTRUE 30469
30467: GO 30491
30469: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30470: LD_VAR 0 1
30474: PPUSH
30475: LD_VAR 0 6
30479: PPUSH
30480: LD_VAR 0 7
30484: PPUSH
30485: CALL_OW 153
30489: GO 30522
30491: LD_INT 3
30493: DOUBLE
30494: EQUAL
30495: IFTRUE 30499
30497: GO 30521
30499: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30500: LD_VAR 0 1
30504: PPUSH
30505: LD_VAR 0 6
30509: PPUSH
30510: LD_VAR 0 7
30514: PPUSH
30515: CALL_OW 154
30519: GO 30522
30521: POP
// end ;
30522: LD_VAR 0 2
30526: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30527: LD_INT 0
30529: PPUSH
30530: PPUSH
30531: PPUSH
30532: PPUSH
30533: PPUSH
30534: PPUSH
// if not unit or not building then
30535: LD_VAR 0 1
30539: NOT
30540: PUSH
30541: LD_VAR 0 2
30545: NOT
30546: OR
30547: IFFALSE 30551
// exit ;
30549: GO 30709
// x := GetX ( building ) ;
30551: LD_ADDR_VAR 0 5
30555: PUSH
30556: LD_VAR 0 2
30560: PPUSH
30561: CALL_OW 250
30565: ST_TO_ADDR
// y := GetY ( building ) ;
30566: LD_ADDR_VAR 0 6
30570: PUSH
30571: LD_VAR 0 2
30575: PPUSH
30576: CALL_OW 251
30580: ST_TO_ADDR
// for i = 0 to 5 do
30581: LD_ADDR_VAR 0 4
30585: PUSH
30586: DOUBLE
30587: LD_INT 0
30589: DEC
30590: ST_TO_ADDR
30591: LD_INT 5
30593: PUSH
30594: FOR_TO
30595: IFFALSE 30707
// begin _x := ShiftX ( x , i , 3 ) ;
30597: LD_ADDR_VAR 0 7
30601: PUSH
30602: LD_VAR 0 5
30606: PPUSH
30607: LD_VAR 0 4
30611: PPUSH
30612: LD_INT 3
30614: PPUSH
30615: CALL_OW 272
30619: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30620: LD_ADDR_VAR 0 8
30624: PUSH
30625: LD_VAR 0 6
30629: PPUSH
30630: LD_VAR 0 4
30634: PPUSH
30635: LD_INT 3
30637: PPUSH
30638: CALL_OW 273
30642: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30643: LD_VAR 0 7
30647: PPUSH
30648: LD_VAR 0 8
30652: PPUSH
30653: CALL_OW 488
30657: NOT
30658: IFFALSE 30662
// continue ;
30660: GO 30594
// if HexInfo ( _x , _y ) = 0 then
30662: LD_VAR 0 7
30666: PPUSH
30667: LD_VAR 0 8
30671: PPUSH
30672: CALL_OW 428
30676: PUSH
30677: LD_INT 0
30679: EQUAL
30680: IFFALSE 30705
// begin ComMoveXY ( unit , _x , _y ) ;
30682: LD_VAR 0 1
30686: PPUSH
30687: LD_VAR 0 7
30691: PPUSH
30692: LD_VAR 0 8
30696: PPUSH
30697: CALL_OW 111
// exit ;
30701: POP
30702: POP
30703: GO 30709
// end ; end ;
30705: GO 30594
30707: POP
30708: POP
// end ;
30709: LD_VAR 0 3
30713: RET
// export function ScanBase ( side , base_area ) ; begin
30714: LD_INT 0
30716: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30717: LD_ADDR_VAR 0 3
30721: PUSH
30722: LD_VAR 0 2
30726: PPUSH
30727: LD_INT 81
30729: PUSH
30730: LD_VAR 0 1
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PPUSH
30739: CALL_OW 70
30743: ST_TO_ADDR
// end ;
30744: LD_VAR 0 3
30748: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30749: LD_INT 0
30751: PPUSH
30752: PPUSH
30753: PPUSH
30754: PPUSH
// result := false ;
30755: LD_ADDR_VAR 0 2
30759: PUSH
30760: LD_INT 0
30762: ST_TO_ADDR
// side := GetSide ( unit ) ;
30763: LD_ADDR_VAR 0 3
30767: PUSH
30768: LD_VAR 0 1
30772: PPUSH
30773: CALL_OW 255
30777: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30778: LD_ADDR_VAR 0 4
30782: PUSH
30783: LD_VAR 0 1
30787: PPUSH
30788: CALL_OW 248
30792: ST_TO_ADDR
// case nat of 1 :
30793: LD_VAR 0 4
30797: PUSH
30798: LD_INT 1
30800: DOUBLE
30801: EQUAL
30802: IFTRUE 30806
30804: GO 30817
30806: POP
// tech := tech_lassight ; 2 :
30807: LD_ADDR_VAR 0 5
30811: PUSH
30812: LD_INT 12
30814: ST_TO_ADDR
30815: GO 30856
30817: LD_INT 2
30819: DOUBLE
30820: EQUAL
30821: IFTRUE 30825
30823: GO 30836
30825: POP
// tech := tech_mortar ; 3 :
30826: LD_ADDR_VAR 0 5
30830: PUSH
30831: LD_INT 41
30833: ST_TO_ADDR
30834: GO 30856
30836: LD_INT 3
30838: DOUBLE
30839: EQUAL
30840: IFTRUE 30844
30842: GO 30855
30844: POP
// tech := tech_bazooka ; end ;
30845: LD_ADDR_VAR 0 5
30849: PUSH
30850: LD_INT 44
30852: ST_TO_ADDR
30853: GO 30856
30855: POP
// if Researched ( side , tech ) then
30856: LD_VAR 0 3
30860: PPUSH
30861: LD_VAR 0 5
30865: PPUSH
30866: CALL_OW 325
30870: IFFALSE 30897
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30872: LD_ADDR_VAR 0 2
30876: PUSH
30877: LD_INT 5
30879: PUSH
30880: LD_INT 8
30882: PUSH
30883: LD_INT 9
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: LIST
30890: PUSH
30891: LD_VAR 0 4
30895: ARRAY
30896: ST_TO_ADDR
// end ;
30897: LD_VAR 0 2
30901: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30902: LD_INT 0
30904: PPUSH
30905: PPUSH
30906: PPUSH
// if not mines then
30907: LD_VAR 0 2
30911: NOT
30912: IFFALSE 30916
// exit ;
30914: GO 31060
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30916: LD_ADDR_VAR 0 5
30920: PUSH
30921: LD_INT 81
30923: PUSH
30924: LD_VAR 0 1
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 3
30935: PUSH
30936: LD_INT 21
30938: PUSH
30939: LD_INT 3
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PPUSH
30954: CALL_OW 69
30958: ST_TO_ADDR
// for i in mines do
30959: LD_ADDR_VAR 0 4
30963: PUSH
30964: LD_VAR 0 2
30968: PUSH
30969: FOR_IN
30970: IFFALSE 31058
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30972: LD_VAR 0 4
30976: PUSH
30977: LD_INT 1
30979: ARRAY
30980: PPUSH
30981: LD_VAR 0 4
30985: PUSH
30986: LD_INT 2
30988: ARRAY
30989: PPUSH
30990: CALL_OW 458
30994: NOT
30995: IFFALSE 30999
// continue ;
30997: GO 30969
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30999: LD_VAR 0 4
31003: PUSH
31004: LD_INT 1
31006: ARRAY
31007: PPUSH
31008: LD_VAR 0 4
31012: PUSH
31013: LD_INT 2
31015: ARRAY
31016: PPUSH
31017: CALL_OW 428
31021: PUSH
31022: LD_VAR 0 5
31026: IN
31027: IFFALSE 31056
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31029: LD_VAR 0 4
31033: PUSH
31034: LD_INT 1
31036: ARRAY
31037: PPUSH
31038: LD_VAR 0 4
31042: PUSH
31043: LD_INT 2
31045: ARRAY
31046: PPUSH
31047: LD_VAR 0 1
31051: PPUSH
31052: CALL_OW 456
// end ;
31056: GO 30969
31058: POP
31059: POP
// end ;
31060: LD_VAR 0 3
31064: RET
// export function Count ( array ) ; var i ; begin
31065: LD_INT 0
31067: PPUSH
31068: PPUSH
// result := 0 ;
31069: LD_ADDR_VAR 0 2
31073: PUSH
31074: LD_INT 0
31076: ST_TO_ADDR
// for i in array do
31077: LD_ADDR_VAR 0 3
31081: PUSH
31082: LD_VAR 0 1
31086: PUSH
31087: FOR_IN
31088: IFFALSE 31112
// if i then
31090: LD_VAR 0 3
31094: IFFALSE 31110
// result := result + 1 ;
31096: LD_ADDR_VAR 0 2
31100: PUSH
31101: LD_VAR 0 2
31105: PUSH
31106: LD_INT 1
31108: PLUS
31109: ST_TO_ADDR
31110: GO 31087
31112: POP
31113: POP
// end ;
31114: LD_VAR 0 2
31118: RET
// export function IsEmpty ( building ) ; begin
31119: LD_INT 0
31121: PPUSH
// if not building then
31122: LD_VAR 0 1
31126: NOT
31127: IFFALSE 31131
// exit ;
31129: GO 31174
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31131: LD_ADDR_VAR 0 2
31135: PUSH
31136: LD_VAR 0 1
31140: PUSH
31141: LD_INT 22
31143: PUSH
31144: LD_VAR 0 1
31148: PPUSH
31149: CALL_OW 255
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 58
31160: PUSH
31161: EMPTY
31162: LIST
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PPUSH
31168: CALL_OW 69
31172: IN
31173: ST_TO_ADDR
// end ;
31174: LD_VAR 0 2
31178: RET
// export function IsNotFull ( building ) ; var places ; begin
31179: LD_INT 0
31181: PPUSH
31182: PPUSH
// if not building then
31183: LD_VAR 0 1
31187: NOT
31188: IFFALSE 31192
// exit ;
31190: GO 31363
// result := false ;
31192: LD_ADDR_VAR 0 2
31196: PUSH
31197: LD_INT 0
31199: ST_TO_ADDR
// places := 0 ;
31200: LD_ADDR_VAR 0 3
31204: PUSH
31205: LD_INT 0
31207: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
31208: LD_VAR 0 1
31212: PPUSH
31213: CALL_OW 266
31217: PUSH
31218: LD_INT 0
31220: DOUBLE
31221: EQUAL
31222: IFTRUE 31280
31224: LD_INT 1
31226: DOUBLE
31227: EQUAL
31228: IFTRUE 31280
31230: LD_INT 6
31232: DOUBLE
31233: EQUAL
31234: IFTRUE 31280
31236: LD_INT 7
31238: DOUBLE
31239: EQUAL
31240: IFTRUE 31280
31242: LD_INT 8
31244: DOUBLE
31245: EQUAL
31246: IFTRUE 31280
31248: LD_INT 4
31250: DOUBLE
31251: EQUAL
31252: IFTRUE 31280
31254: LD_INT 5
31256: DOUBLE
31257: EQUAL
31258: IFTRUE 31280
31260: LD_INT 2
31262: DOUBLE
31263: EQUAL
31264: IFTRUE 31280
31266: LD_INT 3
31268: DOUBLE
31269: EQUAL
31270: IFTRUE 31280
31272: LD_INT 35
31274: DOUBLE
31275: EQUAL
31276: IFTRUE 31280
31278: GO 31291
31280: POP
// places := 6 ; b_bunker , b_breastwork :
31281: LD_ADDR_VAR 0 3
31285: PUSH
31286: LD_INT 6
31288: ST_TO_ADDR
31289: GO 31336
31291: LD_INT 32
31293: DOUBLE
31294: EQUAL
31295: IFTRUE 31305
31297: LD_INT 31
31299: DOUBLE
31300: EQUAL
31301: IFTRUE 31305
31303: GO 31316
31305: POP
// places := 1 ; b_control_tower :
31306: LD_ADDR_VAR 0 3
31310: PUSH
31311: LD_INT 1
31313: ST_TO_ADDR
31314: GO 31336
31316: LD_INT 36
31318: DOUBLE
31319: EQUAL
31320: IFTRUE 31324
31322: GO 31335
31324: POP
// places := 3 ; end ;
31325: LD_ADDR_VAR 0 3
31329: PUSH
31330: LD_INT 3
31332: ST_TO_ADDR
31333: GO 31336
31335: POP
// if places then
31336: LD_VAR 0 3
31340: IFFALSE 31363
// result := UnitsInside ( building ) < places ;
31342: LD_ADDR_VAR 0 2
31346: PUSH
31347: LD_VAR 0 1
31351: PPUSH
31352: CALL_OW 313
31356: PUSH
31357: LD_VAR 0 3
31361: LESS
31362: ST_TO_ADDR
// end ;
31363: LD_VAR 0 2
31367: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31368: LD_INT 0
31370: PPUSH
31371: PPUSH
31372: PPUSH
31373: PPUSH
// tmp := [ ] ;
31374: LD_ADDR_VAR 0 3
31378: PUSH
31379: EMPTY
31380: ST_TO_ADDR
// list := [ ] ;
31381: LD_ADDR_VAR 0 5
31385: PUSH
31386: EMPTY
31387: ST_TO_ADDR
// for i = 16 to 25 do
31388: LD_ADDR_VAR 0 4
31392: PUSH
31393: DOUBLE
31394: LD_INT 16
31396: DEC
31397: ST_TO_ADDR
31398: LD_INT 25
31400: PUSH
31401: FOR_TO
31402: IFFALSE 31475
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31404: LD_ADDR_VAR 0 3
31408: PUSH
31409: LD_VAR 0 3
31413: PUSH
31414: LD_INT 22
31416: PUSH
31417: LD_VAR 0 1
31421: PPUSH
31422: CALL_OW 255
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 91
31433: PUSH
31434: LD_VAR 0 1
31438: PUSH
31439: LD_INT 6
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 30
31449: PUSH
31450: LD_VAR 0 4
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: LIST
31463: PUSH
31464: EMPTY
31465: LIST
31466: PPUSH
31467: CALL_OW 69
31471: ADD
31472: ST_TO_ADDR
31473: GO 31401
31475: POP
31476: POP
// for i = 1 to tmp do
31477: LD_ADDR_VAR 0 4
31481: PUSH
31482: DOUBLE
31483: LD_INT 1
31485: DEC
31486: ST_TO_ADDR
31487: LD_VAR 0 3
31491: PUSH
31492: FOR_TO
31493: IFFALSE 31581
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31495: LD_ADDR_VAR 0 5
31499: PUSH
31500: LD_VAR 0 5
31504: PUSH
31505: LD_VAR 0 3
31509: PUSH
31510: LD_VAR 0 4
31514: ARRAY
31515: PPUSH
31516: CALL_OW 266
31520: PUSH
31521: LD_VAR 0 3
31525: PUSH
31526: LD_VAR 0 4
31530: ARRAY
31531: PPUSH
31532: CALL_OW 250
31536: PUSH
31537: LD_VAR 0 3
31541: PUSH
31542: LD_VAR 0 4
31546: ARRAY
31547: PPUSH
31548: CALL_OW 251
31552: PUSH
31553: LD_VAR 0 3
31557: PUSH
31558: LD_VAR 0 4
31562: ARRAY
31563: PPUSH
31564: CALL_OW 254
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: PUSH
31575: EMPTY
31576: LIST
31577: ADD
31578: ST_TO_ADDR
31579: GO 31492
31581: POP
31582: POP
// result := list ;
31583: LD_ADDR_VAR 0 2
31587: PUSH
31588: LD_VAR 0 5
31592: ST_TO_ADDR
// end ;
31593: LD_VAR 0 2
31597: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31598: LD_INT 0
31600: PPUSH
31601: PPUSH
31602: PPUSH
31603: PPUSH
31604: PPUSH
31605: PPUSH
31606: PPUSH
// if not factory then
31607: LD_VAR 0 1
31611: NOT
31612: IFFALSE 31616
// exit ;
31614: GO 32209
// if control = control_apeman then
31616: LD_VAR 0 4
31620: PUSH
31621: LD_INT 5
31623: EQUAL
31624: IFFALSE 31733
// begin tmp := UnitsInside ( factory ) ;
31626: LD_ADDR_VAR 0 8
31630: PUSH
31631: LD_VAR 0 1
31635: PPUSH
31636: CALL_OW 313
31640: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31641: LD_VAR 0 8
31645: PPUSH
31646: LD_INT 25
31648: PUSH
31649: LD_INT 12
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PPUSH
31656: CALL_OW 72
31660: NOT
31661: IFFALSE 31671
// control := control_manual ;
31663: LD_ADDR_VAR 0 4
31667: PUSH
31668: LD_INT 1
31670: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31671: LD_ADDR_VAR 0 8
31675: PUSH
31676: LD_VAR 0 1
31680: PPUSH
31681: CALL 31368 0 1
31685: ST_TO_ADDR
// if tmp then
31686: LD_VAR 0 8
31690: IFFALSE 31733
// begin for i in tmp do
31692: LD_ADDR_VAR 0 7
31696: PUSH
31697: LD_VAR 0 8
31701: PUSH
31702: FOR_IN
31703: IFFALSE 31731
// if i [ 1 ] = b_ext_radio then
31705: LD_VAR 0 7
31709: PUSH
31710: LD_INT 1
31712: ARRAY
31713: PUSH
31714: LD_INT 22
31716: EQUAL
31717: IFFALSE 31729
// begin control := control_remote ;
31719: LD_ADDR_VAR 0 4
31723: PUSH
31724: LD_INT 2
31726: ST_TO_ADDR
// break ;
31727: GO 31731
// end ;
31729: GO 31702
31731: POP
31732: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31733: LD_VAR 0 1
31737: PPUSH
31738: LD_VAR 0 2
31742: PPUSH
31743: LD_VAR 0 3
31747: PPUSH
31748: LD_VAR 0 4
31752: PPUSH
31753: LD_VAR 0 5
31757: PPUSH
31758: CALL_OW 448
31762: IFFALSE 31797
// begin result := [ chassis , engine , control , weapon ] ;
31764: LD_ADDR_VAR 0 6
31768: PUSH
31769: LD_VAR 0 2
31773: PUSH
31774: LD_VAR 0 3
31778: PUSH
31779: LD_VAR 0 4
31783: PUSH
31784: LD_VAR 0 5
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: ST_TO_ADDR
// exit ;
31795: GO 32209
// end ; _chassis := AvailableChassisList ( factory ) ;
31797: LD_ADDR_VAR 0 9
31801: PUSH
31802: LD_VAR 0 1
31806: PPUSH
31807: CALL_OW 475
31811: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31812: LD_ADDR_VAR 0 11
31816: PUSH
31817: LD_VAR 0 1
31821: PPUSH
31822: CALL_OW 476
31826: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31827: LD_ADDR_VAR 0 12
31831: PUSH
31832: LD_VAR 0 1
31836: PPUSH
31837: CALL_OW 477
31841: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31842: LD_ADDR_VAR 0 10
31846: PUSH
31847: LD_VAR 0 1
31851: PPUSH
31852: CALL_OW 478
31856: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31857: LD_VAR 0 9
31861: NOT
31862: PUSH
31863: LD_VAR 0 11
31867: NOT
31868: OR
31869: PUSH
31870: LD_VAR 0 12
31874: NOT
31875: OR
31876: PUSH
31877: LD_VAR 0 10
31881: NOT
31882: OR
31883: IFFALSE 31918
// begin result := [ chassis , engine , control , weapon ] ;
31885: LD_ADDR_VAR 0 6
31889: PUSH
31890: LD_VAR 0 2
31894: PUSH
31895: LD_VAR 0 3
31899: PUSH
31900: LD_VAR 0 4
31904: PUSH
31905: LD_VAR 0 5
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: ST_TO_ADDR
// exit ;
31916: GO 32209
// end ; if not chassis in _chassis then
31918: LD_VAR 0 2
31922: PUSH
31923: LD_VAR 0 9
31927: IN
31928: NOT
31929: IFFALSE 31955
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31931: LD_ADDR_VAR 0 2
31935: PUSH
31936: LD_VAR 0 9
31940: PUSH
31941: LD_INT 1
31943: PPUSH
31944: LD_VAR 0 9
31948: PPUSH
31949: CALL_OW 12
31953: ARRAY
31954: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31955: LD_VAR 0 2
31959: PPUSH
31960: LD_VAR 0 3
31964: PPUSH
31965: CALL 32214 0 2
31969: NOT
31970: IFFALSE 32029
// repeat engine := _engine [ 1 ] ;
31972: LD_ADDR_VAR 0 3
31976: PUSH
31977: LD_VAR 0 11
31981: PUSH
31982: LD_INT 1
31984: ARRAY
31985: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31986: LD_ADDR_VAR 0 11
31990: PUSH
31991: LD_VAR 0 11
31995: PPUSH
31996: LD_INT 1
31998: PPUSH
31999: CALL_OW 3
32003: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32004: LD_VAR 0 2
32008: PPUSH
32009: LD_VAR 0 3
32013: PPUSH
32014: CALL 32214 0 2
32018: PUSH
32019: LD_VAR 0 11
32023: PUSH
32024: EMPTY
32025: EQUAL
32026: OR
32027: IFFALSE 31972
// if not control in _control then
32029: LD_VAR 0 4
32033: PUSH
32034: LD_VAR 0 12
32038: IN
32039: NOT
32040: IFFALSE 32066
// control := _control [ rand ( 1 , _control ) ] ;
32042: LD_ADDR_VAR 0 4
32046: PUSH
32047: LD_VAR 0 12
32051: PUSH
32052: LD_INT 1
32054: PPUSH
32055: LD_VAR 0 12
32059: PPUSH
32060: CALL_OW 12
32064: ARRAY
32065: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32066: LD_VAR 0 2
32070: PPUSH
32071: LD_VAR 0 5
32075: PPUSH
32076: CALL 32434 0 2
32080: NOT
32081: IFFALSE 32140
// repeat weapon := _weapon [ 1 ] ;
32083: LD_ADDR_VAR 0 5
32087: PUSH
32088: LD_VAR 0 10
32092: PUSH
32093: LD_INT 1
32095: ARRAY
32096: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32097: LD_ADDR_VAR 0 10
32101: PUSH
32102: LD_VAR 0 10
32106: PPUSH
32107: LD_INT 1
32109: PPUSH
32110: CALL_OW 3
32114: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32115: LD_VAR 0 2
32119: PPUSH
32120: LD_VAR 0 5
32124: PPUSH
32125: CALL 32434 0 2
32129: PUSH
32130: LD_VAR 0 10
32134: PUSH
32135: EMPTY
32136: EQUAL
32137: OR
32138: IFFALSE 32083
// result := [ ] ;
32140: LD_ADDR_VAR 0 6
32144: PUSH
32145: EMPTY
32146: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32147: LD_VAR 0 1
32151: PPUSH
32152: LD_VAR 0 2
32156: PPUSH
32157: LD_VAR 0 3
32161: PPUSH
32162: LD_VAR 0 4
32166: PPUSH
32167: LD_VAR 0 5
32171: PPUSH
32172: CALL_OW 448
32176: IFFALSE 32209
// result := [ chassis , engine , control , weapon ] ;
32178: LD_ADDR_VAR 0 6
32182: PUSH
32183: LD_VAR 0 2
32187: PUSH
32188: LD_VAR 0 3
32192: PUSH
32193: LD_VAR 0 4
32197: PUSH
32198: LD_VAR 0 5
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: ST_TO_ADDR
// end ;
32209: LD_VAR 0 6
32213: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32214: LD_INT 0
32216: PPUSH
// if not chassis or not engine then
32217: LD_VAR 0 1
32221: NOT
32222: PUSH
32223: LD_VAR 0 2
32227: NOT
32228: OR
32229: IFFALSE 32233
// exit ;
32231: GO 32429
// case engine of engine_solar :
32233: LD_VAR 0 2
32237: PUSH
32238: LD_INT 2
32240: DOUBLE
32241: EQUAL
32242: IFTRUE 32246
32244: GO 32284
32246: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32247: LD_ADDR_VAR 0 3
32251: PUSH
32252: LD_INT 11
32254: PUSH
32255: LD_INT 12
32257: PUSH
32258: LD_INT 13
32260: PUSH
32261: LD_INT 14
32263: PUSH
32264: LD_INT 1
32266: PUSH
32267: LD_INT 2
32269: PUSH
32270: LD_INT 3
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: ST_TO_ADDR
32282: GO 32413
32284: LD_INT 1
32286: DOUBLE
32287: EQUAL
32288: IFTRUE 32292
32290: GO 32354
32292: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32293: LD_ADDR_VAR 0 3
32297: PUSH
32298: LD_INT 11
32300: PUSH
32301: LD_INT 12
32303: PUSH
32304: LD_INT 13
32306: PUSH
32307: LD_INT 14
32309: PUSH
32310: LD_INT 1
32312: PUSH
32313: LD_INT 2
32315: PUSH
32316: LD_INT 3
32318: PUSH
32319: LD_INT 4
32321: PUSH
32322: LD_INT 5
32324: PUSH
32325: LD_INT 21
32327: PUSH
32328: LD_INT 23
32330: PUSH
32331: LD_INT 22
32333: PUSH
32334: LD_INT 24
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: ST_TO_ADDR
32352: GO 32413
32354: LD_INT 3
32356: DOUBLE
32357: EQUAL
32358: IFTRUE 32362
32360: GO 32412
32362: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32363: LD_ADDR_VAR 0 3
32367: PUSH
32368: LD_INT 13
32370: PUSH
32371: LD_INT 14
32373: PUSH
32374: LD_INT 2
32376: PUSH
32377: LD_INT 3
32379: PUSH
32380: LD_INT 4
32382: PUSH
32383: LD_INT 5
32385: PUSH
32386: LD_INT 21
32388: PUSH
32389: LD_INT 22
32391: PUSH
32392: LD_INT 23
32394: PUSH
32395: LD_INT 24
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: ST_TO_ADDR
32410: GO 32413
32412: POP
// result := ( chassis in result ) ;
32413: LD_ADDR_VAR 0 3
32417: PUSH
32418: LD_VAR 0 1
32422: PUSH
32423: LD_VAR 0 3
32427: IN
32428: ST_TO_ADDR
// end ;
32429: LD_VAR 0 3
32433: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32434: LD_INT 0
32436: PPUSH
// if not chassis or not weapon then
32437: LD_VAR 0 1
32441: NOT
32442: PUSH
32443: LD_VAR 0 2
32447: NOT
32448: OR
32449: IFFALSE 32453
// exit ;
32451: GO 33513
// case weapon of us_machine_gun :
32453: LD_VAR 0 2
32457: PUSH
32458: LD_INT 2
32460: DOUBLE
32461: EQUAL
32462: IFTRUE 32466
32464: GO 32496
32466: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32467: LD_ADDR_VAR 0 3
32471: PUSH
32472: LD_INT 1
32474: PUSH
32475: LD_INT 2
32477: PUSH
32478: LD_INT 3
32480: PUSH
32481: LD_INT 4
32483: PUSH
32484: LD_INT 5
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: ST_TO_ADDR
32494: GO 33497
32496: LD_INT 3
32498: DOUBLE
32499: EQUAL
32500: IFTRUE 32504
32502: GO 32534
32504: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32505: LD_ADDR_VAR 0 3
32509: PUSH
32510: LD_INT 1
32512: PUSH
32513: LD_INT 2
32515: PUSH
32516: LD_INT 3
32518: PUSH
32519: LD_INT 4
32521: PUSH
32522: LD_INT 5
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: ST_TO_ADDR
32532: GO 33497
32534: LD_INT 11
32536: DOUBLE
32537: EQUAL
32538: IFTRUE 32542
32540: GO 32572
32542: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32543: LD_ADDR_VAR 0 3
32547: PUSH
32548: LD_INT 1
32550: PUSH
32551: LD_INT 2
32553: PUSH
32554: LD_INT 3
32556: PUSH
32557: LD_INT 4
32559: PUSH
32560: LD_INT 5
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: ST_TO_ADDR
32570: GO 33497
32572: LD_INT 4
32574: DOUBLE
32575: EQUAL
32576: IFTRUE 32580
32578: GO 32606
32580: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32581: LD_ADDR_VAR 0 3
32585: PUSH
32586: LD_INT 2
32588: PUSH
32589: LD_INT 3
32591: PUSH
32592: LD_INT 4
32594: PUSH
32595: LD_INT 5
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: ST_TO_ADDR
32604: GO 33497
32606: LD_INT 5
32608: DOUBLE
32609: EQUAL
32610: IFTRUE 32614
32612: GO 32640
32614: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32615: LD_ADDR_VAR 0 3
32619: PUSH
32620: LD_INT 2
32622: PUSH
32623: LD_INT 3
32625: PUSH
32626: LD_INT 4
32628: PUSH
32629: LD_INT 5
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: ST_TO_ADDR
32638: GO 33497
32640: LD_INT 9
32642: DOUBLE
32643: EQUAL
32644: IFTRUE 32648
32646: GO 32674
32648: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32649: LD_ADDR_VAR 0 3
32653: PUSH
32654: LD_INT 2
32656: PUSH
32657: LD_INT 3
32659: PUSH
32660: LD_INT 4
32662: PUSH
32663: LD_INT 5
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: ST_TO_ADDR
32672: GO 33497
32674: LD_INT 7
32676: DOUBLE
32677: EQUAL
32678: IFTRUE 32682
32680: GO 32708
32682: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32683: LD_ADDR_VAR 0 3
32687: PUSH
32688: LD_INT 2
32690: PUSH
32691: LD_INT 3
32693: PUSH
32694: LD_INT 4
32696: PUSH
32697: LD_INT 5
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: ST_TO_ADDR
32706: GO 33497
32708: LD_INT 12
32710: DOUBLE
32711: EQUAL
32712: IFTRUE 32716
32714: GO 32742
32716: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32717: LD_ADDR_VAR 0 3
32721: PUSH
32722: LD_INT 2
32724: PUSH
32725: LD_INT 3
32727: PUSH
32728: LD_INT 4
32730: PUSH
32731: LD_INT 5
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: ST_TO_ADDR
32740: GO 33497
32742: LD_INT 13
32744: DOUBLE
32745: EQUAL
32746: IFTRUE 32750
32748: GO 32776
32750: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32751: LD_ADDR_VAR 0 3
32755: PUSH
32756: LD_INT 2
32758: PUSH
32759: LD_INT 3
32761: PUSH
32762: LD_INT 4
32764: PUSH
32765: LD_INT 5
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: ST_TO_ADDR
32774: GO 33497
32776: LD_INT 14
32778: DOUBLE
32779: EQUAL
32780: IFTRUE 32784
32782: GO 32802
32784: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32785: LD_ADDR_VAR 0 3
32789: PUSH
32790: LD_INT 4
32792: PUSH
32793: LD_INT 5
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: ST_TO_ADDR
32800: GO 33497
32802: LD_INT 6
32804: DOUBLE
32805: EQUAL
32806: IFTRUE 32810
32808: GO 32828
32810: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32811: LD_ADDR_VAR 0 3
32815: PUSH
32816: LD_INT 4
32818: PUSH
32819: LD_INT 5
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: ST_TO_ADDR
32826: GO 33497
32828: LD_INT 10
32830: DOUBLE
32831: EQUAL
32832: IFTRUE 32836
32834: GO 32854
32836: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32837: LD_ADDR_VAR 0 3
32841: PUSH
32842: LD_INT 4
32844: PUSH
32845: LD_INT 5
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: ST_TO_ADDR
32852: GO 33497
32854: LD_INT 22
32856: DOUBLE
32857: EQUAL
32858: IFTRUE 32862
32860: GO 32888
32862: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32863: LD_ADDR_VAR 0 3
32867: PUSH
32868: LD_INT 11
32870: PUSH
32871: LD_INT 12
32873: PUSH
32874: LD_INT 13
32876: PUSH
32877: LD_INT 14
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: ST_TO_ADDR
32886: GO 33497
32888: LD_INT 23
32890: DOUBLE
32891: EQUAL
32892: IFTRUE 32896
32894: GO 32922
32896: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32897: LD_ADDR_VAR 0 3
32901: PUSH
32902: LD_INT 11
32904: PUSH
32905: LD_INT 12
32907: PUSH
32908: LD_INT 13
32910: PUSH
32911: LD_INT 14
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: ST_TO_ADDR
32920: GO 33497
32922: LD_INT 24
32924: DOUBLE
32925: EQUAL
32926: IFTRUE 32930
32928: GO 32956
32930: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32931: LD_ADDR_VAR 0 3
32935: PUSH
32936: LD_INT 11
32938: PUSH
32939: LD_INT 12
32941: PUSH
32942: LD_INT 13
32944: PUSH
32945: LD_INT 14
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: ST_TO_ADDR
32954: GO 33497
32956: LD_INT 30
32958: DOUBLE
32959: EQUAL
32960: IFTRUE 32964
32962: GO 32990
32964: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32965: LD_ADDR_VAR 0 3
32969: PUSH
32970: LD_INT 11
32972: PUSH
32973: LD_INT 12
32975: PUSH
32976: LD_INT 13
32978: PUSH
32979: LD_INT 14
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: ST_TO_ADDR
32988: GO 33497
32990: LD_INT 25
32992: DOUBLE
32993: EQUAL
32994: IFTRUE 32998
32996: GO 33016
32998: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32999: LD_ADDR_VAR 0 3
33003: PUSH
33004: LD_INT 13
33006: PUSH
33007: LD_INT 14
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: ST_TO_ADDR
33014: GO 33497
33016: LD_INT 27
33018: DOUBLE
33019: EQUAL
33020: IFTRUE 33024
33022: GO 33042
33024: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33025: LD_ADDR_VAR 0 3
33029: PUSH
33030: LD_INT 13
33032: PUSH
33033: LD_INT 14
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: ST_TO_ADDR
33040: GO 33497
33042: LD_INT 92
33044: DOUBLE
33045: EQUAL
33046: IFTRUE 33050
33048: GO 33076
33050: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33051: LD_ADDR_VAR 0 3
33055: PUSH
33056: LD_INT 11
33058: PUSH
33059: LD_INT 12
33061: PUSH
33062: LD_INT 13
33064: PUSH
33065: LD_INT 14
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: ST_TO_ADDR
33074: GO 33497
33076: LD_INT 28
33078: DOUBLE
33079: EQUAL
33080: IFTRUE 33084
33082: GO 33102
33084: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33085: LD_ADDR_VAR 0 3
33089: PUSH
33090: LD_INT 13
33092: PUSH
33093: LD_INT 14
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: ST_TO_ADDR
33100: GO 33497
33102: LD_INT 29
33104: DOUBLE
33105: EQUAL
33106: IFTRUE 33110
33108: GO 33128
33110: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33111: LD_ADDR_VAR 0 3
33115: PUSH
33116: LD_INT 13
33118: PUSH
33119: LD_INT 14
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: ST_TO_ADDR
33126: GO 33497
33128: LD_INT 31
33130: DOUBLE
33131: EQUAL
33132: IFTRUE 33136
33134: GO 33154
33136: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33137: LD_ADDR_VAR 0 3
33141: PUSH
33142: LD_INT 13
33144: PUSH
33145: LD_INT 14
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: ST_TO_ADDR
33152: GO 33497
33154: LD_INT 26
33156: DOUBLE
33157: EQUAL
33158: IFTRUE 33162
33160: GO 33180
33162: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33163: LD_ADDR_VAR 0 3
33167: PUSH
33168: LD_INT 13
33170: PUSH
33171: LD_INT 14
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: ST_TO_ADDR
33178: GO 33497
33180: LD_INT 42
33182: DOUBLE
33183: EQUAL
33184: IFTRUE 33188
33186: GO 33214
33188: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33189: LD_ADDR_VAR 0 3
33193: PUSH
33194: LD_INT 21
33196: PUSH
33197: LD_INT 22
33199: PUSH
33200: LD_INT 23
33202: PUSH
33203: LD_INT 24
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: ST_TO_ADDR
33212: GO 33497
33214: LD_INT 43
33216: DOUBLE
33217: EQUAL
33218: IFTRUE 33222
33220: GO 33248
33222: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33223: LD_ADDR_VAR 0 3
33227: PUSH
33228: LD_INT 21
33230: PUSH
33231: LD_INT 22
33233: PUSH
33234: LD_INT 23
33236: PUSH
33237: LD_INT 24
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: ST_TO_ADDR
33246: GO 33497
33248: LD_INT 44
33250: DOUBLE
33251: EQUAL
33252: IFTRUE 33256
33254: GO 33282
33256: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33257: LD_ADDR_VAR 0 3
33261: PUSH
33262: LD_INT 21
33264: PUSH
33265: LD_INT 22
33267: PUSH
33268: LD_INT 23
33270: PUSH
33271: LD_INT 24
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: ST_TO_ADDR
33280: GO 33497
33282: LD_INT 45
33284: DOUBLE
33285: EQUAL
33286: IFTRUE 33290
33288: GO 33316
33290: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33291: LD_ADDR_VAR 0 3
33295: PUSH
33296: LD_INT 21
33298: PUSH
33299: LD_INT 22
33301: PUSH
33302: LD_INT 23
33304: PUSH
33305: LD_INT 24
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: ST_TO_ADDR
33314: GO 33497
33316: LD_INT 49
33318: DOUBLE
33319: EQUAL
33320: IFTRUE 33324
33322: GO 33350
33324: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33325: LD_ADDR_VAR 0 3
33329: PUSH
33330: LD_INT 21
33332: PUSH
33333: LD_INT 22
33335: PUSH
33336: LD_INT 23
33338: PUSH
33339: LD_INT 24
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: ST_TO_ADDR
33348: GO 33497
33350: LD_INT 51
33352: DOUBLE
33353: EQUAL
33354: IFTRUE 33358
33356: GO 33384
33358: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33359: LD_ADDR_VAR 0 3
33363: PUSH
33364: LD_INT 21
33366: PUSH
33367: LD_INT 22
33369: PUSH
33370: LD_INT 23
33372: PUSH
33373: LD_INT 24
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: ST_TO_ADDR
33382: GO 33497
33384: LD_INT 52
33386: DOUBLE
33387: EQUAL
33388: IFTRUE 33392
33390: GO 33418
33392: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33393: LD_ADDR_VAR 0 3
33397: PUSH
33398: LD_INT 21
33400: PUSH
33401: LD_INT 22
33403: PUSH
33404: LD_INT 23
33406: PUSH
33407: LD_INT 24
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: ST_TO_ADDR
33416: GO 33497
33418: LD_INT 53
33420: DOUBLE
33421: EQUAL
33422: IFTRUE 33426
33424: GO 33444
33426: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33427: LD_ADDR_VAR 0 3
33431: PUSH
33432: LD_INT 23
33434: PUSH
33435: LD_INT 24
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: ST_TO_ADDR
33442: GO 33497
33444: LD_INT 46
33446: DOUBLE
33447: EQUAL
33448: IFTRUE 33452
33450: GO 33470
33452: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33453: LD_ADDR_VAR 0 3
33457: PUSH
33458: LD_INT 23
33460: PUSH
33461: LD_INT 24
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: ST_TO_ADDR
33468: GO 33497
33470: LD_INT 47
33472: DOUBLE
33473: EQUAL
33474: IFTRUE 33478
33476: GO 33496
33478: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33479: LD_ADDR_VAR 0 3
33483: PUSH
33484: LD_INT 23
33486: PUSH
33487: LD_INT 24
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: ST_TO_ADDR
33494: GO 33497
33496: POP
// result := ( chassis in result ) ;
33497: LD_ADDR_VAR 0 3
33501: PUSH
33502: LD_VAR 0 1
33506: PUSH
33507: LD_VAR 0 3
33511: IN
33512: ST_TO_ADDR
// end ;
33513: LD_VAR 0 3
33517: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33518: LD_INT 0
33520: PPUSH
33521: PPUSH
33522: PPUSH
33523: PPUSH
33524: PPUSH
33525: PPUSH
33526: PPUSH
// result := array ;
33527: LD_ADDR_VAR 0 5
33531: PUSH
33532: LD_VAR 0 1
33536: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33537: LD_VAR 0 1
33541: NOT
33542: PUSH
33543: LD_VAR 0 2
33547: NOT
33548: OR
33549: PUSH
33550: LD_VAR 0 3
33554: NOT
33555: OR
33556: PUSH
33557: LD_VAR 0 2
33561: PUSH
33562: LD_VAR 0 1
33566: GREATER
33567: OR
33568: PUSH
33569: LD_VAR 0 3
33573: PUSH
33574: LD_VAR 0 1
33578: GREATER
33579: OR
33580: IFFALSE 33584
// exit ;
33582: GO 33880
// if direction then
33584: LD_VAR 0 4
33588: IFFALSE 33652
// begin d := 1 ;
33590: LD_ADDR_VAR 0 9
33594: PUSH
33595: LD_INT 1
33597: ST_TO_ADDR
// if i_from > i_to then
33598: LD_VAR 0 2
33602: PUSH
33603: LD_VAR 0 3
33607: GREATER
33608: IFFALSE 33634
// length := ( array - i_from ) + i_to else
33610: LD_ADDR_VAR 0 11
33614: PUSH
33615: LD_VAR 0 1
33619: PUSH
33620: LD_VAR 0 2
33624: MINUS
33625: PUSH
33626: LD_VAR 0 3
33630: PLUS
33631: ST_TO_ADDR
33632: GO 33650
// length := i_to - i_from ;
33634: LD_ADDR_VAR 0 11
33638: PUSH
33639: LD_VAR 0 3
33643: PUSH
33644: LD_VAR 0 2
33648: MINUS
33649: ST_TO_ADDR
// end else
33650: GO 33713
// begin d := - 1 ;
33652: LD_ADDR_VAR 0 9
33656: PUSH
33657: LD_INT 1
33659: NEG
33660: ST_TO_ADDR
// if i_from > i_to then
33661: LD_VAR 0 2
33665: PUSH
33666: LD_VAR 0 3
33670: GREATER
33671: IFFALSE 33691
// length := i_from - i_to else
33673: LD_ADDR_VAR 0 11
33677: PUSH
33678: LD_VAR 0 2
33682: PUSH
33683: LD_VAR 0 3
33687: MINUS
33688: ST_TO_ADDR
33689: GO 33713
// length := ( array - i_to ) + i_from ;
33691: LD_ADDR_VAR 0 11
33695: PUSH
33696: LD_VAR 0 1
33700: PUSH
33701: LD_VAR 0 3
33705: MINUS
33706: PUSH
33707: LD_VAR 0 2
33711: PLUS
33712: ST_TO_ADDR
// end ; if not length then
33713: LD_VAR 0 11
33717: NOT
33718: IFFALSE 33722
// exit ;
33720: GO 33880
// tmp := array ;
33722: LD_ADDR_VAR 0 10
33726: PUSH
33727: LD_VAR 0 1
33731: ST_TO_ADDR
// for i = 1 to length do
33732: LD_ADDR_VAR 0 6
33736: PUSH
33737: DOUBLE
33738: LD_INT 1
33740: DEC
33741: ST_TO_ADDR
33742: LD_VAR 0 11
33746: PUSH
33747: FOR_TO
33748: IFFALSE 33868
// begin for j = 1 to array do
33750: LD_ADDR_VAR 0 7
33754: PUSH
33755: DOUBLE
33756: LD_INT 1
33758: DEC
33759: ST_TO_ADDR
33760: LD_VAR 0 1
33764: PUSH
33765: FOR_TO
33766: IFFALSE 33854
// begin k := j + d ;
33768: LD_ADDR_VAR 0 8
33772: PUSH
33773: LD_VAR 0 7
33777: PUSH
33778: LD_VAR 0 9
33782: PLUS
33783: ST_TO_ADDR
// if k > array then
33784: LD_VAR 0 8
33788: PUSH
33789: LD_VAR 0 1
33793: GREATER
33794: IFFALSE 33804
// k := 1 ;
33796: LD_ADDR_VAR 0 8
33800: PUSH
33801: LD_INT 1
33803: ST_TO_ADDR
// if not k then
33804: LD_VAR 0 8
33808: NOT
33809: IFFALSE 33821
// k := array ;
33811: LD_ADDR_VAR 0 8
33815: PUSH
33816: LD_VAR 0 1
33820: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33821: LD_ADDR_VAR 0 10
33825: PUSH
33826: LD_VAR 0 10
33830: PPUSH
33831: LD_VAR 0 8
33835: PPUSH
33836: LD_VAR 0 1
33840: PUSH
33841: LD_VAR 0 7
33845: ARRAY
33846: PPUSH
33847: CALL_OW 1
33851: ST_TO_ADDR
// end ;
33852: GO 33765
33854: POP
33855: POP
// array := tmp ;
33856: LD_ADDR_VAR 0 1
33860: PUSH
33861: LD_VAR 0 10
33865: ST_TO_ADDR
// end ;
33866: GO 33747
33868: POP
33869: POP
// result := array ;
33870: LD_ADDR_VAR 0 5
33874: PUSH
33875: LD_VAR 0 1
33879: ST_TO_ADDR
// end ;
33880: LD_VAR 0 5
33884: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33885: LD_INT 0
33887: PPUSH
33888: PPUSH
// result := 0 ;
33889: LD_ADDR_VAR 0 3
33893: PUSH
33894: LD_INT 0
33896: ST_TO_ADDR
// if not array or not value in array then
33897: LD_VAR 0 1
33901: NOT
33902: PUSH
33903: LD_VAR 0 2
33907: PUSH
33908: LD_VAR 0 1
33912: IN
33913: NOT
33914: OR
33915: IFFALSE 33919
// exit ;
33917: GO 33973
// for i = 1 to array do
33919: LD_ADDR_VAR 0 4
33923: PUSH
33924: DOUBLE
33925: LD_INT 1
33927: DEC
33928: ST_TO_ADDR
33929: LD_VAR 0 1
33933: PUSH
33934: FOR_TO
33935: IFFALSE 33971
// if value = array [ i ] then
33937: LD_VAR 0 2
33941: PUSH
33942: LD_VAR 0 1
33946: PUSH
33947: LD_VAR 0 4
33951: ARRAY
33952: EQUAL
33953: IFFALSE 33969
// begin result := i ;
33955: LD_ADDR_VAR 0 3
33959: PUSH
33960: LD_VAR 0 4
33964: ST_TO_ADDR
// exit ;
33965: POP
33966: POP
33967: GO 33973
// end ;
33969: GO 33934
33971: POP
33972: POP
// end ;
33973: LD_VAR 0 3
33977: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33978: LD_INT 0
33980: PPUSH
// vc_chassis := chassis ;
33981: LD_ADDR_OWVAR 37
33985: PUSH
33986: LD_VAR 0 1
33990: ST_TO_ADDR
// vc_engine := engine ;
33991: LD_ADDR_OWVAR 39
33995: PUSH
33996: LD_VAR 0 2
34000: ST_TO_ADDR
// vc_control := control ;
34001: LD_ADDR_OWVAR 38
34005: PUSH
34006: LD_VAR 0 3
34010: ST_TO_ADDR
// vc_weapon := weapon ;
34011: LD_ADDR_OWVAR 40
34015: PUSH
34016: LD_VAR 0 4
34020: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34021: LD_ADDR_OWVAR 41
34025: PUSH
34026: LD_VAR 0 5
34030: ST_TO_ADDR
// end ;
34031: LD_VAR 0 6
34035: RET
// export function WantPlant ( unit ) ; var task ; begin
34036: LD_INT 0
34038: PPUSH
34039: PPUSH
// result := false ;
34040: LD_ADDR_VAR 0 2
34044: PUSH
34045: LD_INT 0
34047: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34048: LD_ADDR_VAR 0 3
34052: PUSH
34053: LD_VAR 0 1
34057: PPUSH
34058: CALL_OW 437
34062: ST_TO_ADDR
// if task then
34063: LD_VAR 0 3
34067: IFFALSE 34095
// if task [ 1 ] [ 1 ] = p then
34069: LD_VAR 0 3
34073: PUSH
34074: LD_INT 1
34076: ARRAY
34077: PUSH
34078: LD_INT 1
34080: ARRAY
34081: PUSH
34082: LD_STRING p
34084: EQUAL
34085: IFFALSE 34095
// result := true ;
34087: LD_ADDR_VAR 0 2
34091: PUSH
34092: LD_INT 1
34094: ST_TO_ADDR
// end ;
34095: LD_VAR 0 2
34099: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34100: LD_INT 0
34102: PPUSH
34103: PPUSH
34104: PPUSH
34105: PPUSH
// if pos < 1 then
34106: LD_VAR 0 2
34110: PUSH
34111: LD_INT 1
34113: LESS
34114: IFFALSE 34118
// exit ;
34116: GO 34421
// if pos = 1 then
34118: LD_VAR 0 2
34122: PUSH
34123: LD_INT 1
34125: EQUAL
34126: IFFALSE 34159
// result := Replace ( arr , pos [ 1 ] , value ) else
34128: LD_ADDR_VAR 0 4
34132: PUSH
34133: LD_VAR 0 1
34137: PPUSH
34138: LD_VAR 0 2
34142: PUSH
34143: LD_INT 1
34145: ARRAY
34146: PPUSH
34147: LD_VAR 0 3
34151: PPUSH
34152: CALL_OW 1
34156: ST_TO_ADDR
34157: GO 34421
// begin tmp := arr ;
34159: LD_ADDR_VAR 0 6
34163: PUSH
34164: LD_VAR 0 1
34168: ST_TO_ADDR
// s_arr := [ tmp ] ;
34169: LD_ADDR_VAR 0 7
34173: PUSH
34174: LD_VAR 0 6
34178: PUSH
34179: EMPTY
34180: LIST
34181: ST_TO_ADDR
// for i = 1 to pos - 1 do
34182: LD_ADDR_VAR 0 5
34186: PUSH
34187: DOUBLE
34188: LD_INT 1
34190: DEC
34191: ST_TO_ADDR
34192: LD_VAR 0 2
34196: PUSH
34197: LD_INT 1
34199: MINUS
34200: PUSH
34201: FOR_TO
34202: IFFALSE 34247
// begin tmp := tmp [ pos [ i ] ] ;
34204: LD_ADDR_VAR 0 6
34208: PUSH
34209: LD_VAR 0 6
34213: PUSH
34214: LD_VAR 0 2
34218: PUSH
34219: LD_VAR 0 5
34223: ARRAY
34224: ARRAY
34225: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34226: LD_ADDR_VAR 0 7
34230: PUSH
34231: LD_VAR 0 7
34235: PUSH
34236: LD_VAR 0 6
34240: PUSH
34241: EMPTY
34242: LIST
34243: ADD
34244: ST_TO_ADDR
// end ;
34245: GO 34201
34247: POP
34248: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34249: LD_ADDR_VAR 0 6
34253: PUSH
34254: LD_VAR 0 6
34258: PPUSH
34259: LD_VAR 0 2
34263: PUSH
34264: LD_VAR 0 2
34268: ARRAY
34269: PPUSH
34270: LD_VAR 0 3
34274: PPUSH
34275: CALL_OW 1
34279: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34280: LD_ADDR_VAR 0 7
34284: PUSH
34285: LD_VAR 0 7
34289: PPUSH
34290: LD_VAR 0 7
34294: PPUSH
34295: LD_VAR 0 6
34299: PPUSH
34300: CALL_OW 1
34304: ST_TO_ADDR
// for i = s_arr downto 2 do
34305: LD_ADDR_VAR 0 5
34309: PUSH
34310: DOUBLE
34311: LD_VAR 0 7
34315: INC
34316: ST_TO_ADDR
34317: LD_INT 2
34319: PUSH
34320: FOR_DOWNTO
34321: IFFALSE 34405
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34323: LD_ADDR_VAR 0 6
34327: PUSH
34328: LD_VAR 0 7
34332: PUSH
34333: LD_VAR 0 5
34337: PUSH
34338: LD_INT 1
34340: MINUS
34341: ARRAY
34342: PPUSH
34343: LD_VAR 0 2
34347: PUSH
34348: LD_VAR 0 5
34352: PUSH
34353: LD_INT 1
34355: MINUS
34356: ARRAY
34357: PPUSH
34358: LD_VAR 0 7
34362: PUSH
34363: LD_VAR 0 5
34367: ARRAY
34368: PPUSH
34369: CALL_OW 1
34373: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34374: LD_ADDR_VAR 0 7
34378: PUSH
34379: LD_VAR 0 7
34383: PPUSH
34384: LD_VAR 0 5
34388: PUSH
34389: LD_INT 1
34391: MINUS
34392: PPUSH
34393: LD_VAR 0 6
34397: PPUSH
34398: CALL_OW 1
34402: ST_TO_ADDR
// end ;
34403: GO 34320
34405: POP
34406: POP
// result := s_arr [ 1 ] ;
34407: LD_ADDR_VAR 0 4
34411: PUSH
34412: LD_VAR 0 7
34416: PUSH
34417: LD_INT 1
34419: ARRAY
34420: ST_TO_ADDR
// end ; end ;
34421: LD_VAR 0 4
34425: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34426: LD_INT 0
34428: PPUSH
34429: PPUSH
// if not list then
34430: LD_VAR 0 1
34434: NOT
34435: IFFALSE 34439
// exit ;
34437: GO 34530
// i := list [ pos1 ] ;
34439: LD_ADDR_VAR 0 5
34443: PUSH
34444: LD_VAR 0 1
34448: PUSH
34449: LD_VAR 0 2
34453: ARRAY
34454: ST_TO_ADDR
// if not i then
34455: LD_VAR 0 5
34459: NOT
34460: IFFALSE 34464
// exit ;
34462: GO 34530
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34464: LD_ADDR_VAR 0 1
34468: PUSH
34469: LD_VAR 0 1
34473: PPUSH
34474: LD_VAR 0 2
34478: PPUSH
34479: LD_VAR 0 1
34483: PUSH
34484: LD_VAR 0 3
34488: ARRAY
34489: PPUSH
34490: CALL_OW 1
34494: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34495: LD_ADDR_VAR 0 1
34499: PUSH
34500: LD_VAR 0 1
34504: PPUSH
34505: LD_VAR 0 3
34509: PPUSH
34510: LD_VAR 0 5
34514: PPUSH
34515: CALL_OW 1
34519: ST_TO_ADDR
// result := list ;
34520: LD_ADDR_VAR 0 4
34524: PUSH
34525: LD_VAR 0 1
34529: ST_TO_ADDR
// end ;
34530: LD_VAR 0 4
34534: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34535: LD_INT 0
34537: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34538: LD_ADDR_VAR 0 5
34542: PUSH
34543: LD_VAR 0 1
34547: PPUSH
34548: CALL_OW 250
34552: PPUSH
34553: LD_VAR 0 1
34557: PPUSH
34558: CALL_OW 251
34562: PPUSH
34563: LD_VAR 0 2
34567: PPUSH
34568: LD_VAR 0 3
34572: PPUSH
34573: LD_VAR 0 4
34577: PPUSH
34578: CALL 34588 0 5
34582: ST_TO_ADDR
// end ;
34583: LD_VAR 0 5
34587: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34588: LD_INT 0
34590: PPUSH
34591: PPUSH
34592: PPUSH
34593: PPUSH
// if not list then
34594: LD_VAR 0 3
34598: NOT
34599: IFFALSE 34603
// exit ;
34601: GO 34991
// result := [ ] ;
34603: LD_ADDR_VAR 0 6
34607: PUSH
34608: EMPTY
34609: ST_TO_ADDR
// for i in list do
34610: LD_ADDR_VAR 0 7
34614: PUSH
34615: LD_VAR 0 3
34619: PUSH
34620: FOR_IN
34621: IFFALSE 34823
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34623: LD_ADDR_VAR 0 9
34627: PUSH
34628: LD_VAR 0 7
34632: PPUSH
34633: LD_VAR 0 1
34637: PPUSH
34638: LD_VAR 0 2
34642: PPUSH
34643: CALL_OW 297
34647: ST_TO_ADDR
// if not result then
34648: LD_VAR 0 6
34652: NOT
34653: IFFALSE 34679
// result := [ [ i , tmp ] ] else
34655: LD_ADDR_VAR 0 6
34659: PUSH
34660: LD_VAR 0 7
34664: PUSH
34665: LD_VAR 0 9
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: EMPTY
34675: LIST
34676: ST_TO_ADDR
34677: GO 34821
// begin if result [ result ] [ 2 ] < tmp then
34679: LD_VAR 0 6
34683: PUSH
34684: LD_VAR 0 6
34688: ARRAY
34689: PUSH
34690: LD_INT 2
34692: ARRAY
34693: PUSH
34694: LD_VAR 0 9
34698: LESS
34699: IFFALSE 34741
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34701: LD_ADDR_VAR 0 6
34705: PUSH
34706: LD_VAR 0 6
34710: PPUSH
34711: LD_VAR 0 6
34715: PUSH
34716: LD_INT 1
34718: PLUS
34719: PPUSH
34720: LD_VAR 0 7
34724: PUSH
34725: LD_VAR 0 9
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PPUSH
34734: CALL_OW 2
34738: ST_TO_ADDR
34739: GO 34821
// for j = 1 to result do
34741: LD_ADDR_VAR 0 8
34745: PUSH
34746: DOUBLE
34747: LD_INT 1
34749: DEC
34750: ST_TO_ADDR
34751: LD_VAR 0 6
34755: PUSH
34756: FOR_TO
34757: IFFALSE 34819
// begin if tmp < result [ j ] [ 2 ] then
34759: LD_VAR 0 9
34763: PUSH
34764: LD_VAR 0 6
34768: PUSH
34769: LD_VAR 0 8
34773: ARRAY
34774: PUSH
34775: LD_INT 2
34777: ARRAY
34778: LESS
34779: IFFALSE 34817
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34781: LD_ADDR_VAR 0 6
34785: PUSH
34786: LD_VAR 0 6
34790: PPUSH
34791: LD_VAR 0 8
34795: PPUSH
34796: LD_VAR 0 7
34800: PUSH
34801: LD_VAR 0 9
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PPUSH
34810: CALL_OW 2
34814: ST_TO_ADDR
// break ;
34815: GO 34819
// end ; end ;
34817: GO 34756
34819: POP
34820: POP
// end ; end ;
34821: GO 34620
34823: POP
34824: POP
// if result and not asc then
34825: LD_VAR 0 6
34829: PUSH
34830: LD_VAR 0 4
34834: NOT
34835: AND
34836: IFFALSE 34911
// begin tmp := result ;
34838: LD_ADDR_VAR 0 9
34842: PUSH
34843: LD_VAR 0 6
34847: ST_TO_ADDR
// for i = tmp downto 1 do
34848: LD_ADDR_VAR 0 7
34852: PUSH
34853: DOUBLE
34854: LD_VAR 0 9
34858: INC
34859: ST_TO_ADDR
34860: LD_INT 1
34862: PUSH
34863: FOR_DOWNTO
34864: IFFALSE 34909
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34866: LD_ADDR_VAR 0 6
34870: PUSH
34871: LD_VAR 0 6
34875: PPUSH
34876: LD_VAR 0 9
34880: PUSH
34881: LD_VAR 0 7
34885: MINUS
34886: PUSH
34887: LD_INT 1
34889: PLUS
34890: PPUSH
34891: LD_VAR 0 9
34895: PUSH
34896: LD_VAR 0 7
34900: ARRAY
34901: PPUSH
34902: CALL_OW 1
34906: ST_TO_ADDR
34907: GO 34863
34909: POP
34910: POP
// end ; tmp := [ ] ;
34911: LD_ADDR_VAR 0 9
34915: PUSH
34916: EMPTY
34917: ST_TO_ADDR
// if mode then
34918: LD_VAR 0 5
34922: IFFALSE 34991
// begin for i = 1 to result do
34924: LD_ADDR_VAR 0 7
34928: PUSH
34929: DOUBLE
34930: LD_INT 1
34932: DEC
34933: ST_TO_ADDR
34934: LD_VAR 0 6
34938: PUSH
34939: FOR_TO
34940: IFFALSE 34979
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34942: LD_ADDR_VAR 0 9
34946: PUSH
34947: LD_VAR 0 9
34951: PPUSH
34952: LD_VAR 0 7
34956: PPUSH
34957: LD_VAR 0 6
34961: PUSH
34962: LD_VAR 0 7
34966: ARRAY
34967: PUSH
34968: LD_INT 1
34970: ARRAY
34971: PPUSH
34972: CALL_OW 1
34976: ST_TO_ADDR
34977: GO 34939
34979: POP
34980: POP
// result := tmp ;
34981: LD_ADDR_VAR 0 6
34985: PUSH
34986: LD_VAR 0 9
34990: ST_TO_ADDR
// end ; end ;
34991: LD_VAR 0 6
34995: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34996: LD_INT 0
34998: PPUSH
34999: PPUSH
35000: PPUSH
35001: PPUSH
35002: PPUSH
35003: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35004: LD_ADDR_VAR 0 5
35008: PUSH
35009: LD_INT 0
35011: PUSH
35012: LD_INT 0
35014: PUSH
35015: LD_INT 0
35017: PUSH
35018: EMPTY
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: ST_TO_ADDR
// if not x or not y then
35026: LD_VAR 0 2
35030: NOT
35031: PUSH
35032: LD_VAR 0 3
35036: NOT
35037: OR
35038: IFFALSE 35042
// exit ;
35040: GO 36692
// if not range then
35042: LD_VAR 0 4
35046: NOT
35047: IFFALSE 35057
// range := 10 ;
35049: LD_ADDR_VAR 0 4
35053: PUSH
35054: LD_INT 10
35056: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35057: LD_ADDR_VAR 0 8
35061: PUSH
35062: LD_INT 81
35064: PUSH
35065: LD_VAR 0 1
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 92
35076: PUSH
35077: LD_VAR 0 2
35081: PUSH
35082: LD_VAR 0 3
35086: PUSH
35087: LD_VAR 0 4
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 3
35100: PUSH
35101: LD_INT 21
35103: PUSH
35104: LD_INT 3
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: LIST
35119: PPUSH
35120: CALL_OW 69
35124: ST_TO_ADDR
// if not tmp then
35125: LD_VAR 0 8
35129: NOT
35130: IFFALSE 35134
// exit ;
35132: GO 36692
// for i in tmp do
35134: LD_ADDR_VAR 0 6
35138: PUSH
35139: LD_VAR 0 8
35143: PUSH
35144: FOR_IN
35145: IFFALSE 36667
// begin points := [ 0 , 0 , 0 ] ;
35147: LD_ADDR_VAR 0 9
35151: PUSH
35152: LD_INT 0
35154: PUSH
35155: LD_INT 0
35157: PUSH
35158: LD_INT 0
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: LIST
35165: ST_TO_ADDR
// bpoints := 1 ;
35166: LD_ADDR_VAR 0 10
35170: PUSH
35171: LD_INT 1
35173: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35174: LD_VAR 0 6
35178: PPUSH
35179: CALL_OW 247
35183: PUSH
35184: LD_INT 1
35186: DOUBLE
35187: EQUAL
35188: IFTRUE 35192
35190: GO 35770
35192: POP
// begin if GetClass ( i ) = 1 then
35193: LD_VAR 0 6
35197: PPUSH
35198: CALL_OW 257
35202: PUSH
35203: LD_INT 1
35205: EQUAL
35206: IFFALSE 35227
// points := [ 10 , 5 , 3 ] ;
35208: LD_ADDR_VAR 0 9
35212: PUSH
35213: LD_INT 10
35215: PUSH
35216: LD_INT 5
35218: PUSH
35219: LD_INT 3
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: LIST
35226: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35227: LD_VAR 0 6
35231: PPUSH
35232: CALL_OW 257
35236: PUSH
35237: LD_INT 2
35239: PUSH
35240: LD_INT 3
35242: PUSH
35243: LD_INT 4
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: LIST
35250: IN
35251: IFFALSE 35272
// points := [ 3 , 2 , 1 ] ;
35253: LD_ADDR_VAR 0 9
35257: PUSH
35258: LD_INT 3
35260: PUSH
35261: LD_INT 2
35263: PUSH
35264: LD_INT 1
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: LIST
35271: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35272: LD_VAR 0 6
35276: PPUSH
35277: CALL_OW 257
35281: PUSH
35282: LD_INT 5
35284: EQUAL
35285: IFFALSE 35306
// points := [ 130 , 5 , 2 ] ;
35287: LD_ADDR_VAR 0 9
35291: PUSH
35292: LD_INT 130
35294: PUSH
35295: LD_INT 5
35297: PUSH
35298: LD_INT 2
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: LIST
35305: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35306: LD_VAR 0 6
35310: PPUSH
35311: CALL_OW 257
35315: PUSH
35316: LD_INT 8
35318: EQUAL
35319: IFFALSE 35340
// points := [ 35 , 35 , 30 ] ;
35321: LD_ADDR_VAR 0 9
35325: PUSH
35326: LD_INT 35
35328: PUSH
35329: LD_INT 35
35331: PUSH
35332: LD_INT 30
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: LIST
35339: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35340: LD_VAR 0 6
35344: PPUSH
35345: CALL_OW 257
35349: PUSH
35350: LD_INT 9
35352: EQUAL
35353: IFFALSE 35374
// points := [ 20 , 55 , 40 ] ;
35355: LD_ADDR_VAR 0 9
35359: PUSH
35360: LD_INT 20
35362: PUSH
35363: LD_INT 55
35365: PUSH
35366: LD_INT 40
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: LIST
35373: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35374: LD_VAR 0 6
35378: PPUSH
35379: CALL_OW 257
35383: PUSH
35384: LD_INT 12
35386: PUSH
35387: LD_INT 16
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: IN
35394: IFFALSE 35415
// points := [ 5 , 3 , 2 ] ;
35396: LD_ADDR_VAR 0 9
35400: PUSH
35401: LD_INT 5
35403: PUSH
35404: LD_INT 3
35406: PUSH
35407: LD_INT 2
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: LIST
35414: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35415: LD_VAR 0 6
35419: PPUSH
35420: CALL_OW 257
35424: PUSH
35425: LD_INT 17
35427: EQUAL
35428: IFFALSE 35449
// points := [ 100 , 50 , 75 ] ;
35430: LD_ADDR_VAR 0 9
35434: PUSH
35435: LD_INT 100
35437: PUSH
35438: LD_INT 50
35440: PUSH
35441: LD_INT 75
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: LIST
35448: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35449: LD_VAR 0 6
35453: PPUSH
35454: CALL_OW 257
35458: PUSH
35459: LD_INT 15
35461: EQUAL
35462: IFFALSE 35483
// points := [ 10 , 5 , 3 ] ;
35464: LD_ADDR_VAR 0 9
35468: PUSH
35469: LD_INT 10
35471: PUSH
35472: LD_INT 5
35474: PUSH
35475: LD_INT 3
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: LIST
35482: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35483: LD_VAR 0 6
35487: PPUSH
35488: CALL_OW 257
35492: PUSH
35493: LD_INT 14
35495: EQUAL
35496: IFFALSE 35517
// points := [ 10 , 0 , 0 ] ;
35498: LD_ADDR_VAR 0 9
35502: PUSH
35503: LD_INT 10
35505: PUSH
35506: LD_INT 0
35508: PUSH
35509: LD_INT 0
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: LIST
35516: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35517: LD_VAR 0 6
35521: PPUSH
35522: CALL_OW 257
35526: PUSH
35527: LD_INT 11
35529: EQUAL
35530: IFFALSE 35551
// points := [ 30 , 10 , 5 ] ;
35532: LD_ADDR_VAR 0 9
35536: PUSH
35537: LD_INT 30
35539: PUSH
35540: LD_INT 10
35542: PUSH
35543: LD_INT 5
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: LIST
35550: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35551: LD_VAR 0 1
35555: PPUSH
35556: LD_INT 5
35558: PPUSH
35559: CALL_OW 321
35563: PUSH
35564: LD_INT 2
35566: EQUAL
35567: IFFALSE 35584
// bpoints := bpoints * 1.8 ;
35569: LD_ADDR_VAR 0 10
35573: PUSH
35574: LD_VAR 0 10
35578: PUSH
35579: LD_REAL  1.80000000000000E+0000
35582: MUL
35583: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35584: LD_VAR 0 6
35588: PPUSH
35589: CALL_OW 257
35593: PUSH
35594: LD_INT 1
35596: PUSH
35597: LD_INT 2
35599: PUSH
35600: LD_INT 3
35602: PUSH
35603: LD_INT 4
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: IN
35612: PUSH
35613: LD_VAR 0 1
35617: PPUSH
35618: LD_INT 51
35620: PPUSH
35621: CALL_OW 321
35625: PUSH
35626: LD_INT 2
35628: EQUAL
35629: AND
35630: IFFALSE 35647
// bpoints := bpoints * 1.2 ;
35632: LD_ADDR_VAR 0 10
35636: PUSH
35637: LD_VAR 0 10
35641: PUSH
35642: LD_REAL  1.20000000000000E+0000
35645: MUL
35646: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35647: LD_VAR 0 6
35651: PPUSH
35652: CALL_OW 257
35656: PUSH
35657: LD_INT 5
35659: PUSH
35660: LD_INT 7
35662: PUSH
35663: LD_INT 9
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: LIST
35670: IN
35671: PUSH
35672: LD_VAR 0 1
35676: PPUSH
35677: LD_INT 52
35679: PPUSH
35680: CALL_OW 321
35684: PUSH
35685: LD_INT 2
35687: EQUAL
35688: AND
35689: IFFALSE 35706
// bpoints := bpoints * 1.5 ;
35691: LD_ADDR_VAR 0 10
35695: PUSH
35696: LD_VAR 0 10
35700: PUSH
35701: LD_REAL  1.50000000000000E+0000
35704: MUL
35705: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35706: LD_VAR 0 1
35710: PPUSH
35711: LD_INT 66
35713: PPUSH
35714: CALL_OW 321
35718: PUSH
35719: LD_INT 2
35721: EQUAL
35722: IFFALSE 35739
// bpoints := bpoints * 1.1 ;
35724: LD_ADDR_VAR 0 10
35728: PUSH
35729: LD_VAR 0 10
35733: PUSH
35734: LD_REAL  1.10000000000000E+0000
35737: MUL
35738: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35739: LD_ADDR_VAR 0 10
35743: PUSH
35744: LD_VAR 0 10
35748: PUSH
35749: LD_VAR 0 6
35753: PPUSH
35754: LD_INT 1
35756: PPUSH
35757: CALL_OW 259
35761: PUSH
35762: LD_REAL  1.15000000000000E+0000
35765: MUL
35766: MUL
35767: ST_TO_ADDR
// end ; unit_vehicle :
35768: GO 36596
35770: LD_INT 2
35772: DOUBLE
35773: EQUAL
35774: IFTRUE 35778
35776: GO 36584
35778: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35779: LD_VAR 0 6
35783: PPUSH
35784: CALL_OW 264
35788: PUSH
35789: LD_INT 2
35791: PUSH
35792: LD_INT 42
35794: PUSH
35795: LD_INT 24
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: LIST
35802: IN
35803: IFFALSE 35824
// points := [ 25 , 5 , 3 ] ;
35805: LD_ADDR_VAR 0 9
35809: PUSH
35810: LD_INT 25
35812: PUSH
35813: LD_INT 5
35815: PUSH
35816: LD_INT 3
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: LIST
35823: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35824: LD_VAR 0 6
35828: PPUSH
35829: CALL_OW 264
35833: PUSH
35834: LD_INT 4
35836: PUSH
35837: LD_INT 43
35839: PUSH
35840: LD_INT 25
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: LIST
35847: IN
35848: IFFALSE 35869
// points := [ 40 , 15 , 5 ] ;
35850: LD_ADDR_VAR 0 9
35854: PUSH
35855: LD_INT 40
35857: PUSH
35858: LD_INT 15
35860: PUSH
35861: LD_INT 5
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: LIST
35868: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35869: LD_VAR 0 6
35873: PPUSH
35874: CALL_OW 264
35878: PUSH
35879: LD_INT 3
35881: PUSH
35882: LD_INT 23
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: IN
35889: IFFALSE 35910
// points := [ 7 , 25 , 8 ] ;
35891: LD_ADDR_VAR 0 9
35895: PUSH
35896: LD_INT 7
35898: PUSH
35899: LD_INT 25
35901: PUSH
35902: LD_INT 8
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: LIST
35909: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35910: LD_VAR 0 6
35914: PPUSH
35915: CALL_OW 264
35919: PUSH
35920: LD_INT 5
35922: PUSH
35923: LD_INT 27
35925: PUSH
35926: LD_INT 44
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: LIST
35933: IN
35934: IFFALSE 35955
// points := [ 14 , 50 , 16 ] ;
35936: LD_ADDR_VAR 0 9
35940: PUSH
35941: LD_INT 14
35943: PUSH
35944: LD_INT 50
35946: PUSH
35947: LD_INT 16
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: LIST
35954: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35955: LD_VAR 0 6
35959: PPUSH
35960: CALL_OW 264
35964: PUSH
35965: LD_INT 6
35967: PUSH
35968: LD_INT 46
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: IN
35975: IFFALSE 35996
// points := [ 32 , 120 , 70 ] ;
35977: LD_ADDR_VAR 0 9
35981: PUSH
35982: LD_INT 32
35984: PUSH
35985: LD_INT 120
35987: PUSH
35988: LD_INT 70
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: LIST
35995: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35996: LD_VAR 0 6
36000: PPUSH
36001: CALL_OW 264
36005: PUSH
36006: LD_INT 7
36008: PUSH
36009: LD_INT 28
36011: PUSH
36012: LD_INT 45
36014: PUSH
36015: LD_INT 92
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: IN
36024: IFFALSE 36045
// points := [ 35 , 20 , 45 ] ;
36026: LD_ADDR_VAR 0 9
36030: PUSH
36031: LD_INT 35
36033: PUSH
36034: LD_INT 20
36036: PUSH
36037: LD_INT 45
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: LIST
36044: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36045: LD_VAR 0 6
36049: PPUSH
36050: CALL_OW 264
36054: PUSH
36055: LD_INT 47
36057: PUSH
36058: EMPTY
36059: LIST
36060: IN
36061: IFFALSE 36082
// points := [ 67 , 45 , 75 ] ;
36063: LD_ADDR_VAR 0 9
36067: PUSH
36068: LD_INT 67
36070: PUSH
36071: LD_INT 45
36073: PUSH
36074: LD_INT 75
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: LIST
36081: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36082: LD_VAR 0 6
36086: PPUSH
36087: CALL_OW 264
36091: PUSH
36092: LD_INT 26
36094: PUSH
36095: EMPTY
36096: LIST
36097: IN
36098: IFFALSE 36119
// points := [ 120 , 30 , 80 ] ;
36100: LD_ADDR_VAR 0 9
36104: PUSH
36105: LD_INT 120
36107: PUSH
36108: LD_INT 30
36110: PUSH
36111: LD_INT 80
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: LIST
36118: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36119: LD_VAR 0 6
36123: PPUSH
36124: CALL_OW 264
36128: PUSH
36129: LD_INT 22
36131: PUSH
36132: EMPTY
36133: LIST
36134: IN
36135: IFFALSE 36156
// points := [ 40 , 1 , 1 ] ;
36137: LD_ADDR_VAR 0 9
36141: PUSH
36142: LD_INT 40
36144: PUSH
36145: LD_INT 1
36147: PUSH
36148: LD_INT 1
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: LIST
36155: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36156: LD_VAR 0 6
36160: PPUSH
36161: CALL_OW 264
36165: PUSH
36166: LD_INT 29
36168: PUSH
36169: EMPTY
36170: LIST
36171: IN
36172: IFFALSE 36193
// points := [ 70 , 200 , 400 ] ;
36174: LD_ADDR_VAR 0 9
36178: PUSH
36179: LD_INT 70
36181: PUSH
36182: LD_INT 200
36184: PUSH
36185: LD_INT 400
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: LIST
36192: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36193: LD_VAR 0 6
36197: PPUSH
36198: CALL_OW 264
36202: PUSH
36203: LD_INT 14
36205: PUSH
36206: LD_INT 53
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: IN
36213: IFFALSE 36234
// points := [ 40 , 10 , 20 ] ;
36215: LD_ADDR_VAR 0 9
36219: PUSH
36220: LD_INT 40
36222: PUSH
36223: LD_INT 10
36225: PUSH
36226: LD_INT 20
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: LIST
36233: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36234: LD_VAR 0 6
36238: PPUSH
36239: CALL_OW 264
36243: PUSH
36244: LD_INT 9
36246: PUSH
36247: EMPTY
36248: LIST
36249: IN
36250: IFFALSE 36271
// points := [ 5 , 70 , 20 ] ;
36252: LD_ADDR_VAR 0 9
36256: PUSH
36257: LD_INT 5
36259: PUSH
36260: LD_INT 70
36262: PUSH
36263: LD_INT 20
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: LIST
36270: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36271: LD_VAR 0 6
36275: PPUSH
36276: CALL_OW 264
36280: PUSH
36281: LD_INT 10
36283: PUSH
36284: EMPTY
36285: LIST
36286: IN
36287: IFFALSE 36308
// points := [ 35 , 110 , 70 ] ;
36289: LD_ADDR_VAR 0 9
36293: PUSH
36294: LD_INT 35
36296: PUSH
36297: LD_INT 110
36299: PUSH
36300: LD_INT 70
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: LIST
36307: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36308: LD_VAR 0 6
36312: PPUSH
36313: CALL_OW 265
36317: PUSH
36318: LD_INT 25
36320: EQUAL
36321: IFFALSE 36342
// points := [ 80 , 65 , 100 ] ;
36323: LD_ADDR_VAR 0 9
36327: PUSH
36328: LD_INT 80
36330: PUSH
36331: LD_INT 65
36333: PUSH
36334: LD_INT 100
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: LIST
36341: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36342: LD_VAR 0 6
36346: PPUSH
36347: CALL_OW 263
36351: PUSH
36352: LD_INT 1
36354: EQUAL
36355: IFFALSE 36390
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36357: LD_ADDR_VAR 0 10
36361: PUSH
36362: LD_VAR 0 10
36366: PUSH
36367: LD_VAR 0 6
36371: PPUSH
36372: CALL_OW 311
36376: PPUSH
36377: LD_INT 3
36379: PPUSH
36380: CALL_OW 259
36384: PUSH
36385: LD_INT 4
36387: MUL
36388: MUL
36389: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36390: LD_VAR 0 6
36394: PPUSH
36395: CALL_OW 263
36399: PUSH
36400: LD_INT 2
36402: EQUAL
36403: IFFALSE 36454
// begin j := IsControledBy ( i ) ;
36405: LD_ADDR_VAR 0 7
36409: PUSH
36410: LD_VAR 0 6
36414: PPUSH
36415: CALL_OW 312
36419: ST_TO_ADDR
// if j then
36420: LD_VAR 0 7
36424: IFFALSE 36454
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36426: LD_ADDR_VAR 0 10
36430: PUSH
36431: LD_VAR 0 10
36435: PUSH
36436: LD_VAR 0 7
36440: PPUSH
36441: LD_INT 3
36443: PPUSH
36444: CALL_OW 259
36448: PUSH
36449: LD_INT 3
36451: MUL
36452: MUL
36453: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36454: LD_VAR 0 6
36458: PPUSH
36459: CALL_OW 264
36463: PUSH
36464: LD_INT 5
36466: PUSH
36467: LD_INT 6
36469: PUSH
36470: LD_INT 46
36472: PUSH
36473: LD_INT 44
36475: PUSH
36476: LD_INT 47
36478: PUSH
36479: LD_INT 45
36481: PUSH
36482: LD_INT 28
36484: PUSH
36485: LD_INT 7
36487: PUSH
36488: LD_INT 27
36490: PUSH
36491: LD_INT 29
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: IN
36506: PUSH
36507: LD_VAR 0 1
36511: PPUSH
36512: LD_INT 52
36514: PPUSH
36515: CALL_OW 321
36519: PUSH
36520: LD_INT 2
36522: EQUAL
36523: AND
36524: IFFALSE 36541
// bpoints := bpoints * 1.2 ;
36526: LD_ADDR_VAR 0 10
36530: PUSH
36531: LD_VAR 0 10
36535: PUSH
36536: LD_REAL  1.20000000000000E+0000
36539: MUL
36540: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36541: LD_VAR 0 6
36545: PPUSH
36546: CALL_OW 264
36550: PUSH
36551: LD_INT 6
36553: PUSH
36554: LD_INT 46
36556: PUSH
36557: LD_INT 47
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: LIST
36564: IN
36565: IFFALSE 36582
// bpoints := bpoints * 1.2 ;
36567: LD_ADDR_VAR 0 10
36571: PUSH
36572: LD_VAR 0 10
36576: PUSH
36577: LD_REAL  1.20000000000000E+0000
36580: MUL
36581: ST_TO_ADDR
// end ; unit_building :
36582: GO 36596
36584: LD_INT 3
36586: DOUBLE
36587: EQUAL
36588: IFTRUE 36592
36590: GO 36595
36592: POP
// ; end ;
36593: GO 36596
36595: POP
// for j = 1 to 3 do
36596: LD_ADDR_VAR 0 7
36600: PUSH
36601: DOUBLE
36602: LD_INT 1
36604: DEC
36605: ST_TO_ADDR
36606: LD_INT 3
36608: PUSH
36609: FOR_TO
36610: IFFALSE 36663
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36612: LD_ADDR_VAR 0 5
36616: PUSH
36617: LD_VAR 0 5
36621: PPUSH
36622: LD_VAR 0 7
36626: PPUSH
36627: LD_VAR 0 5
36631: PUSH
36632: LD_VAR 0 7
36636: ARRAY
36637: PUSH
36638: LD_VAR 0 9
36642: PUSH
36643: LD_VAR 0 7
36647: ARRAY
36648: PUSH
36649: LD_VAR 0 10
36653: MUL
36654: PLUS
36655: PPUSH
36656: CALL_OW 1
36660: ST_TO_ADDR
36661: GO 36609
36663: POP
36664: POP
// end ;
36665: GO 35144
36667: POP
36668: POP
// result := Replace ( result , 4 , tmp ) ;
36669: LD_ADDR_VAR 0 5
36673: PUSH
36674: LD_VAR 0 5
36678: PPUSH
36679: LD_INT 4
36681: PPUSH
36682: LD_VAR 0 8
36686: PPUSH
36687: CALL_OW 1
36691: ST_TO_ADDR
// end ;
36692: LD_VAR 0 5
36696: RET
// export function DangerAtRange ( unit , range ) ; begin
36697: LD_INT 0
36699: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36700: LD_ADDR_VAR 0 3
36704: PUSH
36705: LD_VAR 0 1
36709: PPUSH
36710: CALL_OW 255
36714: PPUSH
36715: LD_VAR 0 1
36719: PPUSH
36720: CALL_OW 250
36724: PPUSH
36725: LD_VAR 0 1
36729: PPUSH
36730: CALL_OW 251
36734: PPUSH
36735: LD_VAR 0 2
36739: PPUSH
36740: CALL 34996 0 4
36744: ST_TO_ADDR
// end ;
36745: LD_VAR 0 3
36749: RET
// export function DangerInArea ( side , area ) ; begin
36750: LD_INT 0
36752: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36753: LD_ADDR_VAR 0 3
36757: PUSH
36758: LD_VAR 0 2
36762: PPUSH
36763: LD_INT 81
36765: PUSH
36766: LD_VAR 0 1
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PPUSH
36775: CALL_OW 70
36779: ST_TO_ADDR
// end ;
36780: LD_VAR 0 3
36784: RET
// export function IsExtension ( b ) ; begin
36785: LD_INT 0
36787: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36788: LD_ADDR_VAR 0 2
36792: PUSH
36793: LD_VAR 0 1
36797: PUSH
36798: LD_INT 23
36800: PUSH
36801: LD_INT 20
36803: PUSH
36804: LD_INT 22
36806: PUSH
36807: LD_INT 17
36809: PUSH
36810: LD_INT 24
36812: PUSH
36813: LD_INT 21
36815: PUSH
36816: LD_INT 19
36818: PUSH
36819: LD_INT 16
36821: PUSH
36822: LD_INT 25
36824: PUSH
36825: LD_INT 18
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: IN
36840: ST_TO_ADDR
// end ;
36841: LD_VAR 0 2
36845: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36846: LD_INT 0
36848: PPUSH
36849: PPUSH
36850: PPUSH
// result := [ ] ;
36851: LD_ADDR_VAR 0 4
36855: PUSH
36856: EMPTY
36857: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36858: LD_ADDR_VAR 0 5
36862: PUSH
36863: LD_VAR 0 2
36867: PPUSH
36868: LD_INT 21
36870: PUSH
36871: LD_INT 3
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PPUSH
36878: CALL_OW 70
36882: ST_TO_ADDR
// if not tmp then
36883: LD_VAR 0 5
36887: NOT
36888: IFFALSE 36892
// exit ;
36890: GO 36956
// if checkLink then
36892: LD_VAR 0 3
36896: IFFALSE 36946
// begin for i in tmp do
36898: LD_ADDR_VAR 0 6
36902: PUSH
36903: LD_VAR 0 5
36907: PUSH
36908: FOR_IN
36909: IFFALSE 36944
// if GetBase ( i ) <> base then
36911: LD_VAR 0 6
36915: PPUSH
36916: CALL_OW 274
36920: PUSH
36921: LD_VAR 0 1
36925: NONEQUAL
36926: IFFALSE 36942
// ComLinkToBase ( base , i ) ;
36928: LD_VAR 0 1
36932: PPUSH
36933: LD_VAR 0 6
36937: PPUSH
36938: CALL_OW 169
36942: GO 36908
36944: POP
36945: POP
// end ; result := tmp ;
36946: LD_ADDR_VAR 0 4
36950: PUSH
36951: LD_VAR 0 5
36955: ST_TO_ADDR
// end ;
36956: LD_VAR 0 4
36960: RET
// export function ComComplete ( units , b ) ; var i ; begin
36961: LD_INT 0
36963: PPUSH
36964: PPUSH
// if not units then
36965: LD_VAR 0 1
36969: NOT
36970: IFFALSE 36974
// exit ;
36972: GO 37064
// for i in units do
36974: LD_ADDR_VAR 0 4
36978: PUSH
36979: LD_VAR 0 1
36983: PUSH
36984: FOR_IN
36985: IFFALSE 37062
// if BuildingStatus ( b ) = bs_build then
36987: LD_VAR 0 2
36991: PPUSH
36992: CALL_OW 461
36996: PUSH
36997: LD_INT 1
36999: EQUAL
37000: IFFALSE 37060
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37002: LD_VAR 0 4
37006: PPUSH
37007: LD_STRING h
37009: PUSH
37010: LD_VAR 0 2
37014: PPUSH
37015: CALL_OW 250
37019: PUSH
37020: LD_VAR 0 2
37024: PPUSH
37025: CALL_OW 251
37029: PUSH
37030: LD_VAR 0 2
37034: PUSH
37035: LD_INT 0
37037: PUSH
37038: LD_INT 0
37040: PUSH
37041: LD_INT 0
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: PUSH
37053: EMPTY
37054: LIST
37055: PPUSH
37056: CALL_OW 446
37060: GO 36984
37062: POP
37063: POP
// end ;
37064: LD_VAR 0 3
37068: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37069: LD_INT 0
37071: PPUSH
37072: PPUSH
37073: PPUSH
37074: PPUSH
37075: PPUSH
37076: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37077: LD_VAR 0 1
37081: NOT
37082: PUSH
37083: LD_VAR 0 1
37087: PPUSH
37088: CALL_OW 263
37092: PUSH
37093: LD_INT 2
37095: NONEQUAL
37096: OR
37097: IFFALSE 37101
// exit ;
37099: GO 37417
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37101: LD_ADDR_VAR 0 6
37105: PUSH
37106: LD_INT 22
37108: PUSH
37109: LD_VAR 0 1
37113: PPUSH
37114: CALL_OW 255
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 2
37125: PUSH
37126: LD_INT 30
37128: PUSH
37129: LD_INT 36
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 34
37138: PUSH
37139: LD_INT 31
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: LIST
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: PPUSH
37155: CALL_OW 69
37159: ST_TO_ADDR
// if not tmp then
37160: LD_VAR 0 6
37164: NOT
37165: IFFALSE 37169
// exit ;
37167: GO 37417
// result := [ ] ;
37169: LD_ADDR_VAR 0 2
37173: PUSH
37174: EMPTY
37175: ST_TO_ADDR
// for i in tmp do
37176: LD_ADDR_VAR 0 3
37180: PUSH
37181: LD_VAR 0 6
37185: PUSH
37186: FOR_IN
37187: IFFALSE 37258
// begin t := UnitsInside ( i ) ;
37189: LD_ADDR_VAR 0 4
37193: PUSH
37194: LD_VAR 0 3
37198: PPUSH
37199: CALL_OW 313
37203: ST_TO_ADDR
// if t then
37204: LD_VAR 0 4
37208: IFFALSE 37256
// for j in t do
37210: LD_ADDR_VAR 0 7
37214: PUSH
37215: LD_VAR 0 4
37219: PUSH
37220: FOR_IN
37221: IFFALSE 37254
// result := Replace ( result , result + 1 , j ) ;
37223: LD_ADDR_VAR 0 2
37227: PUSH
37228: LD_VAR 0 2
37232: PPUSH
37233: LD_VAR 0 2
37237: PUSH
37238: LD_INT 1
37240: PLUS
37241: PPUSH
37242: LD_VAR 0 7
37246: PPUSH
37247: CALL_OW 1
37251: ST_TO_ADDR
37252: GO 37220
37254: POP
37255: POP
// end ;
37256: GO 37186
37258: POP
37259: POP
// if not result then
37260: LD_VAR 0 2
37264: NOT
37265: IFFALSE 37269
// exit ;
37267: GO 37417
// mech := result [ 1 ] ;
37269: LD_ADDR_VAR 0 5
37273: PUSH
37274: LD_VAR 0 2
37278: PUSH
37279: LD_INT 1
37281: ARRAY
37282: ST_TO_ADDR
// if result > 1 then
37283: LD_VAR 0 2
37287: PUSH
37288: LD_INT 1
37290: GREATER
37291: IFFALSE 37403
// begin for i = 2 to result do
37293: LD_ADDR_VAR 0 3
37297: PUSH
37298: DOUBLE
37299: LD_INT 2
37301: DEC
37302: ST_TO_ADDR
37303: LD_VAR 0 2
37307: PUSH
37308: FOR_TO
37309: IFFALSE 37401
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37311: LD_ADDR_VAR 0 4
37315: PUSH
37316: LD_VAR 0 2
37320: PUSH
37321: LD_VAR 0 3
37325: ARRAY
37326: PPUSH
37327: LD_INT 3
37329: PPUSH
37330: CALL_OW 259
37334: PUSH
37335: LD_VAR 0 2
37339: PUSH
37340: LD_VAR 0 3
37344: ARRAY
37345: PPUSH
37346: CALL_OW 432
37350: MINUS
37351: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37352: LD_VAR 0 4
37356: PUSH
37357: LD_VAR 0 5
37361: PPUSH
37362: LD_INT 3
37364: PPUSH
37365: CALL_OW 259
37369: PUSH
37370: LD_VAR 0 5
37374: PPUSH
37375: CALL_OW 432
37379: MINUS
37380: GREATEREQUAL
37381: IFFALSE 37399
// mech := result [ i ] ;
37383: LD_ADDR_VAR 0 5
37387: PUSH
37388: LD_VAR 0 2
37392: PUSH
37393: LD_VAR 0 3
37397: ARRAY
37398: ST_TO_ADDR
// end ;
37399: GO 37308
37401: POP
37402: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37403: LD_VAR 0 1
37407: PPUSH
37408: LD_VAR 0 5
37412: PPUSH
37413: CALL_OW 135
// end ;
37417: LD_VAR 0 2
37421: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37422: LD_INT 0
37424: PPUSH
37425: PPUSH
37426: PPUSH
37427: PPUSH
37428: PPUSH
37429: PPUSH
37430: PPUSH
37431: PPUSH
37432: PPUSH
37433: PPUSH
37434: PPUSH
37435: PPUSH
37436: PPUSH
// result := [ ] ;
37437: LD_ADDR_VAR 0 7
37441: PUSH
37442: EMPTY
37443: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37444: LD_VAR 0 1
37448: PPUSH
37449: CALL_OW 266
37453: PUSH
37454: LD_INT 0
37456: PUSH
37457: LD_INT 1
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: IN
37464: NOT
37465: IFFALSE 37469
// exit ;
37467: GO 39103
// if name then
37469: LD_VAR 0 3
37473: IFFALSE 37489
// SetBName ( base_dep , name ) ;
37475: LD_VAR 0 1
37479: PPUSH
37480: LD_VAR 0 3
37484: PPUSH
37485: CALL_OW 500
// base := GetBase ( base_dep ) ;
37489: LD_ADDR_VAR 0 15
37493: PUSH
37494: LD_VAR 0 1
37498: PPUSH
37499: CALL_OW 274
37503: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37504: LD_ADDR_VAR 0 16
37508: PUSH
37509: LD_VAR 0 1
37513: PPUSH
37514: CALL_OW 255
37518: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37519: LD_ADDR_VAR 0 17
37523: PUSH
37524: LD_VAR 0 1
37528: PPUSH
37529: CALL_OW 248
37533: ST_TO_ADDR
// if sources then
37534: LD_VAR 0 5
37538: IFFALSE 37585
// for i = 1 to 3 do
37540: LD_ADDR_VAR 0 8
37544: PUSH
37545: DOUBLE
37546: LD_INT 1
37548: DEC
37549: ST_TO_ADDR
37550: LD_INT 3
37552: PUSH
37553: FOR_TO
37554: IFFALSE 37583
// AddResourceType ( base , i , sources [ i ] ) ;
37556: LD_VAR 0 15
37560: PPUSH
37561: LD_VAR 0 8
37565: PPUSH
37566: LD_VAR 0 5
37570: PUSH
37571: LD_VAR 0 8
37575: ARRAY
37576: PPUSH
37577: CALL_OW 276
37581: GO 37553
37583: POP
37584: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37585: LD_ADDR_VAR 0 18
37589: PUSH
37590: LD_VAR 0 15
37594: PPUSH
37595: LD_VAR 0 2
37599: PPUSH
37600: LD_INT 1
37602: PPUSH
37603: CALL 36846 0 3
37607: ST_TO_ADDR
// InitHc ;
37608: CALL_OW 19
// InitUc ;
37612: CALL_OW 18
// uc_side := side ;
37616: LD_ADDR_OWVAR 20
37620: PUSH
37621: LD_VAR 0 16
37625: ST_TO_ADDR
// uc_nation := nation ;
37626: LD_ADDR_OWVAR 21
37630: PUSH
37631: LD_VAR 0 17
37635: ST_TO_ADDR
// if buildings then
37636: LD_VAR 0 18
37640: IFFALSE 38962
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37642: LD_ADDR_VAR 0 19
37646: PUSH
37647: LD_VAR 0 18
37651: PPUSH
37652: LD_INT 2
37654: PUSH
37655: LD_INT 30
37657: PUSH
37658: LD_INT 29
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 30
37667: PUSH
37668: LD_INT 30
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: LIST
37679: PPUSH
37680: CALL_OW 72
37684: ST_TO_ADDR
// if tmp then
37685: LD_VAR 0 19
37689: IFFALSE 37737
// for i in tmp do
37691: LD_ADDR_VAR 0 8
37695: PUSH
37696: LD_VAR 0 19
37700: PUSH
37701: FOR_IN
37702: IFFALSE 37735
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37704: LD_VAR 0 8
37708: PPUSH
37709: CALL_OW 250
37713: PPUSH
37714: LD_VAR 0 8
37718: PPUSH
37719: CALL_OW 251
37723: PPUSH
37724: LD_VAR 0 16
37728: PPUSH
37729: CALL_OW 441
37733: GO 37701
37735: POP
37736: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37737: LD_VAR 0 18
37741: PPUSH
37742: LD_INT 2
37744: PUSH
37745: LD_INT 30
37747: PUSH
37748: LD_INT 32
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 30
37757: PUSH
37758: LD_INT 33
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: LIST
37769: PPUSH
37770: CALL_OW 72
37774: IFFALSE 37862
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37776: LD_ADDR_VAR 0 8
37780: PUSH
37781: LD_VAR 0 18
37785: PPUSH
37786: LD_INT 2
37788: PUSH
37789: LD_INT 30
37791: PUSH
37792: LD_INT 32
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 30
37801: PUSH
37802: LD_INT 33
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: LIST
37813: PPUSH
37814: CALL_OW 72
37818: PUSH
37819: FOR_IN
37820: IFFALSE 37860
// begin if not GetBWeapon ( i ) then
37822: LD_VAR 0 8
37826: PPUSH
37827: CALL_OW 269
37831: NOT
37832: IFFALSE 37858
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37834: LD_VAR 0 8
37838: PPUSH
37839: LD_VAR 0 8
37843: PPUSH
37844: LD_VAR 0 2
37848: PPUSH
37849: CALL 39108 0 2
37853: PPUSH
37854: CALL_OW 431
// end ;
37858: GO 37819
37860: POP
37861: POP
// end ; for i = 1 to personel do
37862: LD_ADDR_VAR 0 8
37866: PUSH
37867: DOUBLE
37868: LD_INT 1
37870: DEC
37871: ST_TO_ADDR
37872: LD_VAR 0 6
37876: PUSH
37877: FOR_TO
37878: IFFALSE 38942
// begin if i > 4 then
37880: LD_VAR 0 8
37884: PUSH
37885: LD_INT 4
37887: GREATER
37888: IFFALSE 37892
// break ;
37890: GO 38942
// case i of 1 :
37892: LD_VAR 0 8
37896: PUSH
37897: LD_INT 1
37899: DOUBLE
37900: EQUAL
37901: IFTRUE 37905
37903: GO 37985
37905: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37906: LD_ADDR_VAR 0 12
37910: PUSH
37911: LD_VAR 0 18
37915: PPUSH
37916: LD_INT 22
37918: PUSH
37919: LD_VAR 0 16
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 58
37930: PUSH
37931: EMPTY
37932: LIST
37933: PUSH
37934: LD_INT 2
37936: PUSH
37937: LD_INT 30
37939: PUSH
37940: LD_INT 32
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 30
37949: PUSH
37950: LD_INT 4
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 30
37959: PUSH
37960: LD_INT 5
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: LIST
37977: PPUSH
37978: CALL_OW 72
37982: ST_TO_ADDR
37983: GO 38207
37985: LD_INT 2
37987: DOUBLE
37988: EQUAL
37989: IFTRUE 37993
37991: GO 38055
37993: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37994: LD_ADDR_VAR 0 12
37998: PUSH
37999: LD_VAR 0 18
38003: PPUSH
38004: LD_INT 22
38006: PUSH
38007: LD_VAR 0 16
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 2
38018: PUSH
38019: LD_INT 30
38021: PUSH
38022: LD_INT 0
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 30
38031: PUSH
38032: LD_INT 1
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: LIST
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PPUSH
38048: CALL_OW 72
38052: ST_TO_ADDR
38053: GO 38207
38055: LD_INT 3
38057: DOUBLE
38058: EQUAL
38059: IFTRUE 38063
38061: GO 38125
38063: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38064: LD_ADDR_VAR 0 12
38068: PUSH
38069: LD_VAR 0 18
38073: PPUSH
38074: LD_INT 22
38076: PUSH
38077: LD_VAR 0 16
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 2
38088: PUSH
38089: LD_INT 30
38091: PUSH
38092: LD_INT 2
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 30
38101: PUSH
38102: LD_INT 3
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: LIST
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PPUSH
38118: CALL_OW 72
38122: ST_TO_ADDR
38123: GO 38207
38125: LD_INT 4
38127: DOUBLE
38128: EQUAL
38129: IFTRUE 38133
38131: GO 38206
38133: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38134: LD_ADDR_VAR 0 12
38138: PUSH
38139: LD_VAR 0 18
38143: PPUSH
38144: LD_INT 22
38146: PUSH
38147: LD_VAR 0 16
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 2
38158: PUSH
38159: LD_INT 30
38161: PUSH
38162: LD_INT 6
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 30
38171: PUSH
38172: LD_INT 7
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 30
38181: PUSH
38182: LD_INT 8
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PPUSH
38199: CALL_OW 72
38203: ST_TO_ADDR
38204: GO 38207
38206: POP
// if i = 1 then
38207: LD_VAR 0 8
38211: PUSH
38212: LD_INT 1
38214: EQUAL
38215: IFFALSE 38326
// begin tmp := [ ] ;
38217: LD_ADDR_VAR 0 19
38221: PUSH
38222: EMPTY
38223: ST_TO_ADDR
// for j in f do
38224: LD_ADDR_VAR 0 9
38228: PUSH
38229: LD_VAR 0 12
38233: PUSH
38234: FOR_IN
38235: IFFALSE 38308
// if GetBType ( j ) = b_bunker then
38237: LD_VAR 0 9
38241: PPUSH
38242: CALL_OW 266
38246: PUSH
38247: LD_INT 32
38249: EQUAL
38250: IFFALSE 38277
// tmp := Insert ( tmp , 1 , j ) else
38252: LD_ADDR_VAR 0 19
38256: PUSH
38257: LD_VAR 0 19
38261: PPUSH
38262: LD_INT 1
38264: PPUSH
38265: LD_VAR 0 9
38269: PPUSH
38270: CALL_OW 2
38274: ST_TO_ADDR
38275: GO 38306
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38277: LD_ADDR_VAR 0 19
38281: PUSH
38282: LD_VAR 0 19
38286: PPUSH
38287: LD_VAR 0 19
38291: PUSH
38292: LD_INT 1
38294: PLUS
38295: PPUSH
38296: LD_VAR 0 9
38300: PPUSH
38301: CALL_OW 2
38305: ST_TO_ADDR
38306: GO 38234
38308: POP
38309: POP
// if tmp then
38310: LD_VAR 0 19
38314: IFFALSE 38326
// f := tmp ;
38316: LD_ADDR_VAR 0 12
38320: PUSH
38321: LD_VAR 0 19
38325: ST_TO_ADDR
// end ; x := personel [ i ] ;
38326: LD_ADDR_VAR 0 13
38330: PUSH
38331: LD_VAR 0 6
38335: PUSH
38336: LD_VAR 0 8
38340: ARRAY
38341: ST_TO_ADDR
// if x = - 1 then
38342: LD_VAR 0 13
38346: PUSH
38347: LD_INT 1
38349: NEG
38350: EQUAL
38351: IFFALSE 38560
// begin for j in f do
38353: LD_ADDR_VAR 0 9
38357: PUSH
38358: LD_VAR 0 12
38362: PUSH
38363: FOR_IN
38364: IFFALSE 38556
// repeat InitHc ;
38366: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38370: LD_VAR 0 9
38374: PPUSH
38375: CALL_OW 266
38379: PUSH
38380: LD_INT 5
38382: EQUAL
38383: IFFALSE 38453
// begin if UnitsInside ( j ) < 3 then
38385: LD_VAR 0 9
38389: PPUSH
38390: CALL_OW 313
38394: PUSH
38395: LD_INT 3
38397: LESS
38398: IFFALSE 38434
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38400: LD_INT 0
38402: PPUSH
38403: LD_INT 5
38405: PUSH
38406: LD_INT 8
38408: PUSH
38409: LD_INT 9
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: LIST
38416: PUSH
38417: LD_VAR 0 17
38421: ARRAY
38422: PPUSH
38423: LD_VAR 0 4
38427: PPUSH
38428: CALL_OW 380
38432: GO 38451
// PrepareHuman ( false , i , skill ) ;
38434: LD_INT 0
38436: PPUSH
38437: LD_VAR 0 8
38441: PPUSH
38442: LD_VAR 0 4
38446: PPUSH
38447: CALL_OW 380
// end else
38451: GO 38470
// PrepareHuman ( false , i , skill ) ;
38453: LD_INT 0
38455: PPUSH
38456: LD_VAR 0 8
38460: PPUSH
38461: LD_VAR 0 4
38465: PPUSH
38466: CALL_OW 380
// un := CreateHuman ;
38470: LD_ADDR_VAR 0 14
38474: PUSH
38475: CALL_OW 44
38479: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38480: LD_ADDR_VAR 0 7
38484: PUSH
38485: LD_VAR 0 7
38489: PPUSH
38490: LD_INT 1
38492: PPUSH
38493: LD_VAR 0 14
38497: PPUSH
38498: CALL_OW 2
38502: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38503: LD_VAR 0 14
38507: PPUSH
38508: LD_VAR 0 9
38512: PPUSH
38513: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38517: LD_VAR 0 9
38521: PPUSH
38522: CALL_OW 313
38526: PUSH
38527: LD_INT 6
38529: EQUAL
38530: PUSH
38531: LD_VAR 0 9
38535: PPUSH
38536: CALL_OW 266
38540: PUSH
38541: LD_INT 32
38543: PUSH
38544: LD_INT 31
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: IN
38551: OR
38552: IFFALSE 38366
38554: GO 38363
38556: POP
38557: POP
// end else
38558: GO 38940
// for j = 1 to x do
38560: LD_ADDR_VAR 0 9
38564: PUSH
38565: DOUBLE
38566: LD_INT 1
38568: DEC
38569: ST_TO_ADDR
38570: LD_VAR 0 13
38574: PUSH
38575: FOR_TO
38576: IFFALSE 38938
// begin InitHc ;
38578: CALL_OW 19
// if not f then
38582: LD_VAR 0 12
38586: NOT
38587: IFFALSE 38676
// begin PrepareHuman ( false , i , skill ) ;
38589: LD_INT 0
38591: PPUSH
38592: LD_VAR 0 8
38596: PPUSH
38597: LD_VAR 0 4
38601: PPUSH
38602: CALL_OW 380
// un := CreateHuman ;
38606: LD_ADDR_VAR 0 14
38610: PUSH
38611: CALL_OW 44
38615: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38616: LD_ADDR_VAR 0 7
38620: PUSH
38621: LD_VAR 0 7
38625: PPUSH
38626: LD_INT 1
38628: PPUSH
38629: LD_VAR 0 14
38633: PPUSH
38634: CALL_OW 2
38638: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38639: LD_VAR 0 14
38643: PPUSH
38644: LD_VAR 0 1
38648: PPUSH
38649: CALL_OW 250
38653: PPUSH
38654: LD_VAR 0 1
38658: PPUSH
38659: CALL_OW 251
38663: PPUSH
38664: LD_INT 10
38666: PPUSH
38667: LD_INT 0
38669: PPUSH
38670: CALL_OW 50
// continue ;
38674: GO 38575
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38676: LD_VAR 0 12
38680: PUSH
38681: LD_INT 1
38683: ARRAY
38684: PPUSH
38685: CALL_OW 313
38689: PUSH
38690: LD_VAR 0 12
38694: PUSH
38695: LD_INT 1
38697: ARRAY
38698: PPUSH
38699: CALL_OW 266
38703: PUSH
38704: LD_INT 32
38706: PUSH
38707: LD_INT 31
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: IN
38714: AND
38715: PUSH
38716: LD_VAR 0 12
38720: PUSH
38721: LD_INT 1
38723: ARRAY
38724: PPUSH
38725: CALL_OW 313
38729: PUSH
38730: LD_INT 6
38732: EQUAL
38733: OR
38734: IFFALSE 38754
// f := Delete ( f , 1 ) ;
38736: LD_ADDR_VAR 0 12
38740: PUSH
38741: LD_VAR 0 12
38745: PPUSH
38746: LD_INT 1
38748: PPUSH
38749: CALL_OW 3
38753: ST_TO_ADDR
// if not f then
38754: LD_VAR 0 12
38758: NOT
38759: IFFALSE 38777
// begin x := x + 2 ;
38761: LD_ADDR_VAR 0 13
38765: PUSH
38766: LD_VAR 0 13
38770: PUSH
38771: LD_INT 2
38773: PLUS
38774: ST_TO_ADDR
// continue ;
38775: GO 38575
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38777: LD_VAR 0 12
38781: PUSH
38782: LD_INT 1
38784: ARRAY
38785: PPUSH
38786: CALL_OW 266
38790: PUSH
38791: LD_INT 5
38793: EQUAL
38794: IFFALSE 38868
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38796: LD_VAR 0 12
38800: PUSH
38801: LD_INT 1
38803: ARRAY
38804: PPUSH
38805: CALL_OW 313
38809: PUSH
38810: LD_INT 3
38812: LESS
38813: IFFALSE 38849
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38815: LD_INT 0
38817: PPUSH
38818: LD_INT 5
38820: PUSH
38821: LD_INT 8
38823: PUSH
38824: LD_INT 9
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: LIST
38831: PUSH
38832: LD_VAR 0 17
38836: ARRAY
38837: PPUSH
38838: LD_VAR 0 4
38842: PPUSH
38843: CALL_OW 380
38847: GO 38866
// PrepareHuman ( false , i , skill ) ;
38849: LD_INT 0
38851: PPUSH
38852: LD_VAR 0 8
38856: PPUSH
38857: LD_VAR 0 4
38861: PPUSH
38862: CALL_OW 380
// end else
38866: GO 38885
// PrepareHuman ( false , i , skill ) ;
38868: LD_INT 0
38870: PPUSH
38871: LD_VAR 0 8
38875: PPUSH
38876: LD_VAR 0 4
38880: PPUSH
38881: CALL_OW 380
// un := CreateHuman ;
38885: LD_ADDR_VAR 0 14
38889: PUSH
38890: CALL_OW 44
38894: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38895: LD_ADDR_VAR 0 7
38899: PUSH
38900: LD_VAR 0 7
38904: PPUSH
38905: LD_INT 1
38907: PPUSH
38908: LD_VAR 0 14
38912: PPUSH
38913: CALL_OW 2
38917: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38918: LD_VAR 0 14
38922: PPUSH
38923: LD_VAR 0 12
38927: PUSH
38928: LD_INT 1
38930: ARRAY
38931: PPUSH
38932: CALL_OW 52
// end ;
38936: GO 38575
38938: POP
38939: POP
// end ;
38940: GO 37877
38942: POP
38943: POP
// result := result ^ buildings ;
38944: LD_ADDR_VAR 0 7
38948: PUSH
38949: LD_VAR 0 7
38953: PUSH
38954: LD_VAR 0 18
38958: ADD
38959: ST_TO_ADDR
// end else
38960: GO 39103
// begin for i = 1 to personel do
38962: LD_ADDR_VAR 0 8
38966: PUSH
38967: DOUBLE
38968: LD_INT 1
38970: DEC
38971: ST_TO_ADDR
38972: LD_VAR 0 6
38976: PUSH
38977: FOR_TO
38978: IFFALSE 39101
// begin if i > 4 then
38980: LD_VAR 0 8
38984: PUSH
38985: LD_INT 4
38987: GREATER
38988: IFFALSE 38992
// break ;
38990: GO 39101
// x := personel [ i ] ;
38992: LD_ADDR_VAR 0 13
38996: PUSH
38997: LD_VAR 0 6
39001: PUSH
39002: LD_VAR 0 8
39006: ARRAY
39007: ST_TO_ADDR
// if x = - 1 then
39008: LD_VAR 0 13
39012: PUSH
39013: LD_INT 1
39015: NEG
39016: EQUAL
39017: IFFALSE 39021
// continue ;
39019: GO 38977
// PrepareHuman ( false , i , skill ) ;
39021: LD_INT 0
39023: PPUSH
39024: LD_VAR 0 8
39028: PPUSH
39029: LD_VAR 0 4
39033: PPUSH
39034: CALL_OW 380
// un := CreateHuman ;
39038: LD_ADDR_VAR 0 14
39042: PUSH
39043: CALL_OW 44
39047: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39048: LD_VAR 0 14
39052: PPUSH
39053: LD_VAR 0 1
39057: PPUSH
39058: CALL_OW 250
39062: PPUSH
39063: LD_VAR 0 1
39067: PPUSH
39068: CALL_OW 251
39072: PPUSH
39073: LD_INT 10
39075: PPUSH
39076: LD_INT 0
39078: PPUSH
39079: CALL_OW 50
// result := result ^ un ;
39083: LD_ADDR_VAR 0 7
39087: PUSH
39088: LD_VAR 0 7
39092: PUSH
39093: LD_VAR 0 14
39097: ADD
39098: ST_TO_ADDR
// end ;
39099: GO 38977
39101: POP
39102: POP
// end ; end ;
39103: LD_VAR 0 7
39107: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39108: LD_INT 0
39110: PPUSH
39111: PPUSH
39112: PPUSH
39113: PPUSH
39114: PPUSH
39115: PPUSH
39116: PPUSH
39117: PPUSH
39118: PPUSH
39119: PPUSH
39120: PPUSH
39121: PPUSH
39122: PPUSH
39123: PPUSH
39124: PPUSH
39125: PPUSH
// result := false ;
39126: LD_ADDR_VAR 0 3
39130: PUSH
39131: LD_INT 0
39133: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39134: LD_VAR 0 1
39138: NOT
39139: PUSH
39140: LD_VAR 0 1
39144: PPUSH
39145: CALL_OW 266
39149: PUSH
39150: LD_INT 32
39152: PUSH
39153: LD_INT 33
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: IN
39160: NOT
39161: OR
39162: IFFALSE 39166
// exit ;
39164: GO 40275
// nat := GetNation ( tower ) ;
39166: LD_ADDR_VAR 0 12
39170: PUSH
39171: LD_VAR 0 1
39175: PPUSH
39176: CALL_OW 248
39180: ST_TO_ADDR
// side := GetSide ( tower ) ;
39181: LD_ADDR_VAR 0 16
39185: PUSH
39186: LD_VAR 0 1
39190: PPUSH
39191: CALL_OW 255
39195: ST_TO_ADDR
// x := GetX ( tower ) ;
39196: LD_ADDR_VAR 0 10
39200: PUSH
39201: LD_VAR 0 1
39205: PPUSH
39206: CALL_OW 250
39210: ST_TO_ADDR
// y := GetY ( tower ) ;
39211: LD_ADDR_VAR 0 11
39215: PUSH
39216: LD_VAR 0 1
39220: PPUSH
39221: CALL_OW 251
39225: ST_TO_ADDR
// if not x or not y then
39226: LD_VAR 0 10
39230: NOT
39231: PUSH
39232: LD_VAR 0 11
39236: NOT
39237: OR
39238: IFFALSE 39242
// exit ;
39240: GO 40275
// weapon := 0 ;
39242: LD_ADDR_VAR 0 18
39246: PUSH
39247: LD_INT 0
39249: ST_TO_ADDR
// fac_list := [ ] ;
39250: LD_ADDR_VAR 0 17
39254: PUSH
39255: EMPTY
39256: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39257: LD_ADDR_VAR 0 6
39261: PUSH
39262: LD_VAR 0 1
39266: PPUSH
39267: CALL_OW 274
39271: PPUSH
39272: LD_VAR 0 2
39276: PPUSH
39277: LD_INT 0
39279: PPUSH
39280: CALL 36846 0 3
39284: PPUSH
39285: LD_INT 30
39287: PUSH
39288: LD_INT 3
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PPUSH
39295: CALL_OW 72
39299: ST_TO_ADDR
// if not factories then
39300: LD_VAR 0 6
39304: NOT
39305: IFFALSE 39309
// exit ;
39307: GO 40275
// for i in factories do
39309: LD_ADDR_VAR 0 8
39313: PUSH
39314: LD_VAR 0 6
39318: PUSH
39319: FOR_IN
39320: IFFALSE 39345
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39322: LD_ADDR_VAR 0 17
39326: PUSH
39327: LD_VAR 0 17
39331: PUSH
39332: LD_VAR 0 8
39336: PPUSH
39337: CALL_OW 478
39341: UNION
39342: ST_TO_ADDR
39343: GO 39319
39345: POP
39346: POP
// if not fac_list then
39347: LD_VAR 0 17
39351: NOT
39352: IFFALSE 39356
// exit ;
39354: GO 40275
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39356: LD_ADDR_VAR 0 5
39360: PUSH
39361: LD_INT 4
39363: PUSH
39364: LD_INT 5
39366: PUSH
39367: LD_INT 9
39369: PUSH
39370: LD_INT 10
39372: PUSH
39373: LD_INT 6
39375: PUSH
39376: LD_INT 7
39378: PUSH
39379: LD_INT 11
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 27
39393: PUSH
39394: LD_INT 28
39396: PUSH
39397: LD_INT 26
39399: PUSH
39400: LD_INT 30
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 43
39411: PUSH
39412: LD_INT 44
39414: PUSH
39415: LD_INT 46
39417: PUSH
39418: LD_INT 45
39420: PUSH
39421: LD_INT 47
39423: PUSH
39424: LD_INT 49
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: LIST
39439: PUSH
39440: LD_VAR 0 12
39444: ARRAY
39445: ST_TO_ADDR
// list := list isect fac_list ;
39446: LD_ADDR_VAR 0 5
39450: PUSH
39451: LD_VAR 0 5
39455: PUSH
39456: LD_VAR 0 17
39460: ISECT
39461: ST_TO_ADDR
// if not list then
39462: LD_VAR 0 5
39466: NOT
39467: IFFALSE 39471
// exit ;
39469: GO 40275
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39471: LD_VAR 0 12
39475: PUSH
39476: LD_INT 3
39478: EQUAL
39479: PUSH
39480: LD_INT 49
39482: PUSH
39483: LD_VAR 0 5
39487: IN
39488: AND
39489: PUSH
39490: LD_INT 31
39492: PPUSH
39493: LD_VAR 0 16
39497: PPUSH
39498: CALL_OW 321
39502: PUSH
39503: LD_INT 2
39505: EQUAL
39506: AND
39507: IFFALSE 39567
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39509: LD_INT 22
39511: PUSH
39512: LD_VAR 0 16
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 35
39523: PUSH
39524: LD_INT 49
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 91
39533: PUSH
39534: LD_VAR 0 1
39538: PUSH
39539: LD_INT 10
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: LIST
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: LIST
39551: PPUSH
39552: CALL_OW 69
39556: NOT
39557: IFFALSE 39567
// weapon := ru_time_lapser ;
39559: LD_ADDR_VAR 0 18
39563: PUSH
39564: LD_INT 49
39566: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39567: LD_VAR 0 12
39571: PUSH
39572: LD_INT 1
39574: PUSH
39575: LD_INT 2
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: IN
39582: PUSH
39583: LD_INT 11
39585: PUSH
39586: LD_VAR 0 5
39590: IN
39591: PUSH
39592: LD_INT 30
39594: PUSH
39595: LD_VAR 0 5
39599: IN
39600: OR
39601: AND
39602: PUSH
39603: LD_INT 6
39605: PPUSH
39606: LD_VAR 0 16
39610: PPUSH
39611: CALL_OW 321
39615: PUSH
39616: LD_INT 2
39618: EQUAL
39619: AND
39620: IFFALSE 39785
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39622: LD_INT 22
39624: PUSH
39625: LD_VAR 0 16
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 2
39636: PUSH
39637: LD_INT 35
39639: PUSH
39640: LD_INT 11
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 35
39649: PUSH
39650: LD_INT 30
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 91
39664: PUSH
39665: LD_VAR 0 1
39669: PUSH
39670: LD_INT 18
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: LIST
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: LIST
39682: PPUSH
39683: CALL_OW 69
39687: NOT
39688: PUSH
39689: LD_INT 22
39691: PUSH
39692: LD_VAR 0 16
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 2
39703: PUSH
39704: LD_INT 30
39706: PUSH
39707: LD_INT 32
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 30
39716: PUSH
39717: LD_INT 33
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 91
39731: PUSH
39732: LD_VAR 0 1
39736: PUSH
39737: LD_INT 12
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: LIST
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: LIST
39749: PUSH
39750: EMPTY
39751: LIST
39752: PPUSH
39753: CALL_OW 69
39757: PUSH
39758: LD_INT 2
39760: GREATER
39761: AND
39762: IFFALSE 39785
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39764: LD_ADDR_VAR 0 18
39768: PUSH
39769: LD_INT 11
39771: PUSH
39772: LD_INT 30
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_VAR 0 12
39783: ARRAY
39784: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39785: LD_VAR 0 18
39789: NOT
39790: PUSH
39791: LD_INT 40
39793: PPUSH
39794: LD_VAR 0 16
39798: PPUSH
39799: CALL_OW 321
39803: PUSH
39804: LD_INT 2
39806: EQUAL
39807: AND
39808: PUSH
39809: LD_INT 7
39811: PUSH
39812: LD_VAR 0 5
39816: IN
39817: PUSH
39818: LD_INT 28
39820: PUSH
39821: LD_VAR 0 5
39825: IN
39826: OR
39827: PUSH
39828: LD_INT 45
39830: PUSH
39831: LD_VAR 0 5
39835: IN
39836: OR
39837: AND
39838: IFFALSE 40092
// begin hex := GetHexInfo ( x , y ) ;
39840: LD_ADDR_VAR 0 4
39844: PUSH
39845: LD_VAR 0 10
39849: PPUSH
39850: LD_VAR 0 11
39854: PPUSH
39855: CALL_OW 546
39859: ST_TO_ADDR
// if hex [ 1 ] then
39860: LD_VAR 0 4
39864: PUSH
39865: LD_INT 1
39867: ARRAY
39868: IFFALSE 39872
// exit ;
39870: GO 40275
// height := hex [ 2 ] ;
39872: LD_ADDR_VAR 0 15
39876: PUSH
39877: LD_VAR 0 4
39881: PUSH
39882: LD_INT 2
39884: ARRAY
39885: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39886: LD_ADDR_VAR 0 14
39890: PUSH
39891: LD_INT 0
39893: PUSH
39894: LD_INT 2
39896: PUSH
39897: LD_INT 3
39899: PUSH
39900: LD_INT 5
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: ST_TO_ADDR
// for i in tmp do
39909: LD_ADDR_VAR 0 8
39913: PUSH
39914: LD_VAR 0 14
39918: PUSH
39919: FOR_IN
39920: IFFALSE 40090
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39922: LD_ADDR_VAR 0 9
39926: PUSH
39927: LD_VAR 0 10
39931: PPUSH
39932: LD_VAR 0 8
39936: PPUSH
39937: LD_INT 5
39939: PPUSH
39940: CALL_OW 272
39944: PUSH
39945: LD_VAR 0 11
39949: PPUSH
39950: LD_VAR 0 8
39954: PPUSH
39955: LD_INT 5
39957: PPUSH
39958: CALL_OW 273
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39967: LD_VAR 0 9
39971: PUSH
39972: LD_INT 1
39974: ARRAY
39975: PPUSH
39976: LD_VAR 0 9
39980: PUSH
39981: LD_INT 2
39983: ARRAY
39984: PPUSH
39985: CALL_OW 488
39989: IFFALSE 40088
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39991: LD_ADDR_VAR 0 4
39995: PUSH
39996: LD_VAR 0 9
40000: PUSH
40001: LD_INT 1
40003: ARRAY
40004: PPUSH
40005: LD_VAR 0 9
40009: PUSH
40010: LD_INT 2
40012: ARRAY
40013: PPUSH
40014: CALL_OW 546
40018: ST_TO_ADDR
// if hex [ 1 ] then
40019: LD_VAR 0 4
40023: PUSH
40024: LD_INT 1
40026: ARRAY
40027: IFFALSE 40031
// continue ;
40029: GO 39919
// h := hex [ 2 ] ;
40031: LD_ADDR_VAR 0 13
40035: PUSH
40036: LD_VAR 0 4
40040: PUSH
40041: LD_INT 2
40043: ARRAY
40044: ST_TO_ADDR
// if h + 7 < height then
40045: LD_VAR 0 13
40049: PUSH
40050: LD_INT 7
40052: PLUS
40053: PUSH
40054: LD_VAR 0 15
40058: LESS
40059: IFFALSE 40088
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40061: LD_ADDR_VAR 0 18
40065: PUSH
40066: LD_INT 7
40068: PUSH
40069: LD_INT 28
40071: PUSH
40072: LD_INT 45
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: LIST
40079: PUSH
40080: LD_VAR 0 12
40084: ARRAY
40085: ST_TO_ADDR
// break ;
40086: GO 40090
// end ; end ; end ;
40088: GO 39919
40090: POP
40091: POP
// end ; if not weapon then
40092: LD_VAR 0 18
40096: NOT
40097: IFFALSE 40157
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40099: LD_ADDR_VAR 0 5
40103: PUSH
40104: LD_VAR 0 5
40108: PUSH
40109: LD_INT 11
40111: PUSH
40112: LD_INT 30
40114: PUSH
40115: LD_INT 49
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: LIST
40122: DIFF
40123: ST_TO_ADDR
// if not list then
40124: LD_VAR 0 5
40128: NOT
40129: IFFALSE 40133
// exit ;
40131: GO 40275
// weapon := list [ rand ( 1 , list ) ] ;
40133: LD_ADDR_VAR 0 18
40137: PUSH
40138: LD_VAR 0 5
40142: PUSH
40143: LD_INT 1
40145: PPUSH
40146: LD_VAR 0 5
40150: PPUSH
40151: CALL_OW 12
40155: ARRAY
40156: ST_TO_ADDR
// end ; if weapon then
40157: LD_VAR 0 18
40161: IFFALSE 40275
// begin tmp := CostOfWeapon ( weapon ) ;
40163: LD_ADDR_VAR 0 14
40167: PUSH
40168: LD_VAR 0 18
40172: PPUSH
40173: CALL_OW 451
40177: ST_TO_ADDR
// j := GetBase ( tower ) ;
40178: LD_ADDR_VAR 0 9
40182: PUSH
40183: LD_VAR 0 1
40187: PPUSH
40188: CALL_OW 274
40192: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40193: LD_VAR 0 9
40197: PPUSH
40198: LD_INT 1
40200: PPUSH
40201: CALL_OW 275
40205: PUSH
40206: LD_VAR 0 14
40210: PUSH
40211: LD_INT 1
40213: ARRAY
40214: GREATEREQUAL
40215: PUSH
40216: LD_VAR 0 9
40220: PPUSH
40221: LD_INT 2
40223: PPUSH
40224: CALL_OW 275
40228: PUSH
40229: LD_VAR 0 14
40233: PUSH
40234: LD_INT 2
40236: ARRAY
40237: GREATEREQUAL
40238: AND
40239: PUSH
40240: LD_VAR 0 9
40244: PPUSH
40245: LD_INT 3
40247: PPUSH
40248: CALL_OW 275
40252: PUSH
40253: LD_VAR 0 14
40257: PUSH
40258: LD_INT 3
40260: ARRAY
40261: GREATEREQUAL
40262: AND
40263: IFFALSE 40275
// result := weapon ;
40265: LD_ADDR_VAR 0 3
40269: PUSH
40270: LD_VAR 0 18
40274: ST_TO_ADDR
// end ; end ;
40275: LD_VAR 0 3
40279: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40280: LD_INT 0
40282: PPUSH
40283: PPUSH
// result := true ;
40284: LD_ADDR_VAR 0 3
40288: PUSH
40289: LD_INT 1
40291: ST_TO_ADDR
// if array1 = array2 then
40292: LD_VAR 0 1
40296: PUSH
40297: LD_VAR 0 2
40301: EQUAL
40302: IFFALSE 40362
// begin for i = 1 to array1 do
40304: LD_ADDR_VAR 0 4
40308: PUSH
40309: DOUBLE
40310: LD_INT 1
40312: DEC
40313: ST_TO_ADDR
40314: LD_VAR 0 1
40318: PUSH
40319: FOR_TO
40320: IFFALSE 40358
// if array1 [ i ] <> array2 [ i ] then
40322: LD_VAR 0 1
40326: PUSH
40327: LD_VAR 0 4
40331: ARRAY
40332: PUSH
40333: LD_VAR 0 2
40337: PUSH
40338: LD_VAR 0 4
40342: ARRAY
40343: NONEQUAL
40344: IFFALSE 40356
// begin result := false ;
40346: LD_ADDR_VAR 0 3
40350: PUSH
40351: LD_INT 0
40353: ST_TO_ADDR
// break ;
40354: GO 40358
// end ;
40356: GO 40319
40358: POP
40359: POP
// end else
40360: GO 40370
// result := false ;
40362: LD_ADDR_VAR 0 3
40366: PUSH
40367: LD_INT 0
40369: ST_TO_ADDR
// end ;
40370: LD_VAR 0 3
40374: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40375: LD_INT 0
40377: PPUSH
40378: PPUSH
// if not array1 or not array2 then
40379: LD_VAR 0 1
40383: NOT
40384: PUSH
40385: LD_VAR 0 2
40389: NOT
40390: OR
40391: IFFALSE 40395
// exit ;
40393: GO 40459
// result := true ;
40395: LD_ADDR_VAR 0 3
40399: PUSH
40400: LD_INT 1
40402: ST_TO_ADDR
// for i = 1 to array1 do
40403: LD_ADDR_VAR 0 4
40407: PUSH
40408: DOUBLE
40409: LD_INT 1
40411: DEC
40412: ST_TO_ADDR
40413: LD_VAR 0 1
40417: PUSH
40418: FOR_TO
40419: IFFALSE 40457
// if array1 [ i ] <> array2 [ i ] then
40421: LD_VAR 0 1
40425: PUSH
40426: LD_VAR 0 4
40430: ARRAY
40431: PUSH
40432: LD_VAR 0 2
40436: PUSH
40437: LD_VAR 0 4
40441: ARRAY
40442: NONEQUAL
40443: IFFALSE 40455
// begin result := false ;
40445: LD_ADDR_VAR 0 3
40449: PUSH
40450: LD_INT 0
40452: ST_TO_ADDR
// break ;
40453: GO 40457
// end ;
40455: GO 40418
40457: POP
40458: POP
// end ;
40459: LD_VAR 0 3
40463: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40464: LD_INT 0
40466: PPUSH
40467: PPUSH
40468: PPUSH
// pom := GetBase ( fac ) ;
40469: LD_ADDR_VAR 0 5
40473: PUSH
40474: LD_VAR 0 1
40478: PPUSH
40479: CALL_OW 274
40483: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40484: LD_ADDR_VAR 0 4
40488: PUSH
40489: LD_VAR 0 2
40493: PUSH
40494: LD_INT 1
40496: ARRAY
40497: PPUSH
40498: LD_VAR 0 2
40502: PUSH
40503: LD_INT 2
40505: ARRAY
40506: PPUSH
40507: LD_VAR 0 2
40511: PUSH
40512: LD_INT 3
40514: ARRAY
40515: PPUSH
40516: LD_VAR 0 2
40520: PUSH
40521: LD_INT 4
40523: ARRAY
40524: PPUSH
40525: CALL_OW 449
40529: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40530: LD_ADDR_VAR 0 3
40534: PUSH
40535: LD_VAR 0 5
40539: PPUSH
40540: LD_INT 1
40542: PPUSH
40543: CALL_OW 275
40547: PUSH
40548: LD_VAR 0 4
40552: PUSH
40553: LD_INT 1
40555: ARRAY
40556: GREATEREQUAL
40557: PUSH
40558: LD_VAR 0 5
40562: PPUSH
40563: LD_INT 2
40565: PPUSH
40566: CALL_OW 275
40570: PUSH
40571: LD_VAR 0 4
40575: PUSH
40576: LD_INT 2
40578: ARRAY
40579: GREATEREQUAL
40580: AND
40581: PUSH
40582: LD_VAR 0 5
40586: PPUSH
40587: LD_INT 3
40589: PPUSH
40590: CALL_OW 275
40594: PUSH
40595: LD_VAR 0 4
40599: PUSH
40600: LD_INT 3
40602: ARRAY
40603: GREATEREQUAL
40604: AND
40605: ST_TO_ADDR
// end ;
40606: LD_VAR 0 3
40610: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40611: LD_INT 0
40613: PPUSH
40614: PPUSH
40615: PPUSH
40616: PPUSH
// pom := GetBase ( building ) ;
40617: LD_ADDR_VAR 0 3
40621: PUSH
40622: LD_VAR 0 1
40626: PPUSH
40627: CALL_OW 274
40631: ST_TO_ADDR
// if not pom then
40632: LD_VAR 0 3
40636: NOT
40637: IFFALSE 40641
// exit ;
40639: GO 40811
// btype := GetBType ( building ) ;
40641: LD_ADDR_VAR 0 5
40645: PUSH
40646: LD_VAR 0 1
40650: PPUSH
40651: CALL_OW 266
40655: ST_TO_ADDR
// if btype = b_armoury then
40656: LD_VAR 0 5
40660: PUSH
40661: LD_INT 4
40663: EQUAL
40664: IFFALSE 40674
// btype := b_barracks ;
40666: LD_ADDR_VAR 0 5
40670: PUSH
40671: LD_INT 5
40673: ST_TO_ADDR
// if btype = b_depot then
40674: LD_VAR 0 5
40678: PUSH
40679: LD_INT 0
40681: EQUAL
40682: IFFALSE 40692
// btype := b_warehouse ;
40684: LD_ADDR_VAR 0 5
40688: PUSH
40689: LD_INT 1
40691: ST_TO_ADDR
// if btype = b_workshop then
40692: LD_VAR 0 5
40696: PUSH
40697: LD_INT 2
40699: EQUAL
40700: IFFALSE 40710
// btype := b_factory ;
40702: LD_ADDR_VAR 0 5
40706: PUSH
40707: LD_INT 3
40709: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40710: LD_ADDR_VAR 0 4
40714: PUSH
40715: LD_VAR 0 5
40719: PPUSH
40720: LD_VAR 0 1
40724: PPUSH
40725: CALL_OW 248
40729: PPUSH
40730: CALL_OW 450
40734: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40735: LD_ADDR_VAR 0 2
40739: PUSH
40740: LD_VAR 0 3
40744: PPUSH
40745: LD_INT 1
40747: PPUSH
40748: CALL_OW 275
40752: PUSH
40753: LD_VAR 0 4
40757: PUSH
40758: LD_INT 1
40760: ARRAY
40761: GREATEREQUAL
40762: PUSH
40763: LD_VAR 0 3
40767: PPUSH
40768: LD_INT 2
40770: PPUSH
40771: CALL_OW 275
40775: PUSH
40776: LD_VAR 0 4
40780: PUSH
40781: LD_INT 2
40783: ARRAY
40784: GREATEREQUAL
40785: AND
40786: PUSH
40787: LD_VAR 0 3
40791: PPUSH
40792: LD_INT 3
40794: PPUSH
40795: CALL_OW 275
40799: PUSH
40800: LD_VAR 0 4
40804: PUSH
40805: LD_INT 3
40807: ARRAY
40808: GREATEREQUAL
40809: AND
40810: ST_TO_ADDR
// end ;
40811: LD_VAR 0 2
40815: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40816: LD_INT 0
40818: PPUSH
40819: PPUSH
40820: PPUSH
// pom := GetBase ( building ) ;
40821: LD_ADDR_VAR 0 4
40825: PUSH
40826: LD_VAR 0 1
40830: PPUSH
40831: CALL_OW 274
40835: ST_TO_ADDR
// if not pom then
40836: LD_VAR 0 4
40840: NOT
40841: IFFALSE 40845
// exit ;
40843: GO 40946
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40845: LD_ADDR_VAR 0 5
40849: PUSH
40850: LD_VAR 0 2
40854: PPUSH
40855: LD_VAR 0 1
40859: PPUSH
40860: CALL_OW 248
40864: PPUSH
40865: CALL_OW 450
40869: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40870: LD_ADDR_VAR 0 3
40874: PUSH
40875: LD_VAR 0 4
40879: PPUSH
40880: LD_INT 1
40882: PPUSH
40883: CALL_OW 275
40887: PUSH
40888: LD_VAR 0 5
40892: PUSH
40893: LD_INT 1
40895: ARRAY
40896: GREATEREQUAL
40897: PUSH
40898: LD_VAR 0 4
40902: PPUSH
40903: LD_INT 2
40905: PPUSH
40906: CALL_OW 275
40910: PUSH
40911: LD_VAR 0 5
40915: PUSH
40916: LD_INT 2
40918: ARRAY
40919: GREATEREQUAL
40920: AND
40921: PUSH
40922: LD_VAR 0 4
40926: PPUSH
40927: LD_INT 3
40929: PPUSH
40930: CALL_OW 275
40934: PUSH
40935: LD_VAR 0 5
40939: PUSH
40940: LD_INT 3
40942: ARRAY
40943: GREATEREQUAL
40944: AND
40945: ST_TO_ADDR
// end ;
40946: LD_VAR 0 3
40950: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40951: LD_INT 0
40953: PPUSH
40954: PPUSH
40955: PPUSH
40956: PPUSH
40957: PPUSH
40958: PPUSH
40959: PPUSH
40960: PPUSH
40961: PPUSH
40962: PPUSH
40963: PPUSH
// result := false ;
40964: LD_ADDR_VAR 0 8
40968: PUSH
40969: LD_INT 0
40971: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40972: LD_VAR 0 5
40976: NOT
40977: PUSH
40978: LD_VAR 0 1
40982: NOT
40983: OR
40984: PUSH
40985: LD_VAR 0 2
40989: NOT
40990: OR
40991: PUSH
40992: LD_VAR 0 3
40996: NOT
40997: OR
40998: IFFALSE 41002
// exit ;
41000: GO 41816
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41002: LD_ADDR_VAR 0 14
41006: PUSH
41007: LD_VAR 0 1
41011: PPUSH
41012: LD_VAR 0 2
41016: PPUSH
41017: LD_VAR 0 3
41021: PPUSH
41022: LD_VAR 0 4
41026: PPUSH
41027: LD_VAR 0 5
41031: PUSH
41032: LD_INT 1
41034: ARRAY
41035: PPUSH
41036: CALL_OW 248
41040: PPUSH
41041: LD_INT 0
41043: PPUSH
41044: CALL 43049 0 6
41048: ST_TO_ADDR
// if not hexes then
41049: LD_VAR 0 14
41053: NOT
41054: IFFALSE 41058
// exit ;
41056: GO 41816
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41058: LD_ADDR_VAR 0 17
41062: PUSH
41063: LD_VAR 0 5
41067: PPUSH
41068: LD_INT 22
41070: PUSH
41071: LD_VAR 0 13
41075: PPUSH
41076: CALL_OW 255
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 2
41087: PUSH
41088: LD_INT 30
41090: PUSH
41091: LD_INT 0
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 30
41100: PUSH
41101: LD_INT 1
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: LIST
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PPUSH
41117: CALL_OW 72
41121: ST_TO_ADDR
// for i = 1 to hexes do
41122: LD_ADDR_VAR 0 9
41126: PUSH
41127: DOUBLE
41128: LD_INT 1
41130: DEC
41131: ST_TO_ADDR
41132: LD_VAR 0 14
41136: PUSH
41137: FOR_TO
41138: IFFALSE 41814
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41140: LD_ADDR_VAR 0 13
41144: PUSH
41145: LD_VAR 0 14
41149: PUSH
41150: LD_VAR 0 9
41154: ARRAY
41155: PUSH
41156: LD_INT 1
41158: ARRAY
41159: PPUSH
41160: LD_VAR 0 14
41164: PUSH
41165: LD_VAR 0 9
41169: ARRAY
41170: PUSH
41171: LD_INT 2
41173: ARRAY
41174: PPUSH
41175: CALL_OW 428
41179: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41180: LD_VAR 0 14
41184: PUSH
41185: LD_VAR 0 9
41189: ARRAY
41190: PUSH
41191: LD_INT 1
41193: ARRAY
41194: PPUSH
41195: LD_VAR 0 14
41199: PUSH
41200: LD_VAR 0 9
41204: ARRAY
41205: PUSH
41206: LD_INT 2
41208: ARRAY
41209: PPUSH
41210: CALL_OW 351
41214: PUSH
41215: LD_VAR 0 14
41219: PUSH
41220: LD_VAR 0 9
41224: ARRAY
41225: PUSH
41226: LD_INT 1
41228: ARRAY
41229: PPUSH
41230: LD_VAR 0 14
41234: PUSH
41235: LD_VAR 0 9
41239: ARRAY
41240: PUSH
41241: LD_INT 2
41243: ARRAY
41244: PPUSH
41245: CALL_OW 488
41249: NOT
41250: OR
41251: PUSH
41252: LD_VAR 0 13
41256: PPUSH
41257: CALL_OW 247
41261: PUSH
41262: LD_INT 3
41264: EQUAL
41265: OR
41266: IFFALSE 41272
// exit ;
41268: POP
41269: POP
41270: GO 41816
// if not tmp then
41272: LD_VAR 0 13
41276: NOT
41277: IFFALSE 41281
// continue ;
41279: GO 41137
// result := true ;
41281: LD_ADDR_VAR 0 8
41285: PUSH
41286: LD_INT 1
41288: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41289: LD_VAR 0 6
41293: PUSH
41294: LD_VAR 0 13
41298: PPUSH
41299: CALL_OW 247
41303: PUSH
41304: LD_INT 2
41306: EQUAL
41307: AND
41308: PUSH
41309: LD_VAR 0 13
41313: PPUSH
41314: CALL_OW 263
41318: PUSH
41319: LD_INT 1
41321: EQUAL
41322: AND
41323: IFFALSE 41487
// begin if IsDrivenBy ( tmp ) then
41325: LD_VAR 0 13
41329: PPUSH
41330: CALL_OW 311
41334: IFFALSE 41338
// continue ;
41336: GO 41137
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41338: LD_VAR 0 6
41342: PPUSH
41343: LD_INT 3
41345: PUSH
41346: LD_INT 60
41348: PUSH
41349: EMPTY
41350: LIST
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 3
41358: PUSH
41359: LD_INT 55
41361: PUSH
41362: EMPTY
41363: LIST
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PPUSH
41373: CALL_OW 72
41377: IFFALSE 41485
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41379: LD_ADDR_VAR 0 18
41383: PUSH
41384: LD_VAR 0 6
41388: PPUSH
41389: LD_INT 3
41391: PUSH
41392: LD_INT 60
41394: PUSH
41395: EMPTY
41396: LIST
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 3
41404: PUSH
41405: LD_INT 55
41407: PUSH
41408: EMPTY
41409: LIST
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PPUSH
41419: CALL_OW 72
41423: PUSH
41424: LD_INT 1
41426: ARRAY
41427: ST_TO_ADDR
// if IsInUnit ( driver ) then
41428: LD_VAR 0 18
41432: PPUSH
41433: CALL_OW 310
41437: IFFALSE 41448
// ComExit ( driver ) ;
41439: LD_VAR 0 18
41443: PPUSH
41444: CALL 66801 0 1
// AddComEnterUnit ( driver , tmp ) ;
41448: LD_VAR 0 18
41452: PPUSH
41453: LD_VAR 0 13
41457: PPUSH
41458: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41462: LD_VAR 0 18
41466: PPUSH
41467: LD_VAR 0 7
41471: PPUSH
41472: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41476: LD_VAR 0 18
41480: PPUSH
41481: CALL_OW 181
// end ; continue ;
41485: GO 41137
// end ; if not cleaners or not tmp in cleaners then
41487: LD_VAR 0 6
41491: NOT
41492: PUSH
41493: LD_VAR 0 13
41497: PUSH
41498: LD_VAR 0 6
41502: IN
41503: NOT
41504: OR
41505: IFFALSE 41812
// begin if dep then
41507: LD_VAR 0 17
41511: IFFALSE 41647
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41513: LD_ADDR_VAR 0 16
41517: PUSH
41518: LD_VAR 0 17
41522: PUSH
41523: LD_INT 1
41525: ARRAY
41526: PPUSH
41527: CALL_OW 250
41531: PPUSH
41532: LD_VAR 0 17
41536: PUSH
41537: LD_INT 1
41539: ARRAY
41540: PPUSH
41541: CALL_OW 254
41545: PPUSH
41546: LD_INT 5
41548: PPUSH
41549: CALL_OW 272
41553: PUSH
41554: LD_VAR 0 17
41558: PUSH
41559: LD_INT 1
41561: ARRAY
41562: PPUSH
41563: CALL_OW 251
41567: PPUSH
41568: LD_VAR 0 17
41572: PUSH
41573: LD_INT 1
41575: ARRAY
41576: PPUSH
41577: CALL_OW 254
41581: PPUSH
41582: LD_INT 5
41584: PPUSH
41585: CALL_OW 273
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41594: LD_VAR 0 16
41598: PUSH
41599: LD_INT 1
41601: ARRAY
41602: PPUSH
41603: LD_VAR 0 16
41607: PUSH
41608: LD_INT 2
41610: ARRAY
41611: PPUSH
41612: CALL_OW 488
41616: IFFALSE 41647
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41618: LD_VAR 0 13
41622: PPUSH
41623: LD_VAR 0 16
41627: PUSH
41628: LD_INT 1
41630: ARRAY
41631: PPUSH
41632: LD_VAR 0 16
41636: PUSH
41637: LD_INT 2
41639: ARRAY
41640: PPUSH
41641: CALL_OW 111
// continue ;
41645: GO 41137
// end ; end ; r := GetDir ( tmp ) ;
41647: LD_ADDR_VAR 0 15
41651: PUSH
41652: LD_VAR 0 13
41656: PPUSH
41657: CALL_OW 254
41661: ST_TO_ADDR
// if r = 5 then
41662: LD_VAR 0 15
41666: PUSH
41667: LD_INT 5
41669: EQUAL
41670: IFFALSE 41680
// r := 0 ;
41672: LD_ADDR_VAR 0 15
41676: PUSH
41677: LD_INT 0
41679: ST_TO_ADDR
// for j = r to 5 do
41680: LD_ADDR_VAR 0 10
41684: PUSH
41685: DOUBLE
41686: LD_VAR 0 15
41690: DEC
41691: ST_TO_ADDR
41692: LD_INT 5
41694: PUSH
41695: FOR_TO
41696: IFFALSE 41810
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41698: LD_ADDR_VAR 0 11
41702: PUSH
41703: LD_VAR 0 13
41707: PPUSH
41708: CALL_OW 250
41712: PPUSH
41713: LD_VAR 0 10
41717: PPUSH
41718: LD_INT 2
41720: PPUSH
41721: CALL_OW 272
41725: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41726: LD_ADDR_VAR 0 12
41730: PUSH
41731: LD_VAR 0 13
41735: PPUSH
41736: CALL_OW 251
41740: PPUSH
41741: LD_VAR 0 10
41745: PPUSH
41746: LD_INT 2
41748: PPUSH
41749: CALL_OW 273
41753: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41754: LD_VAR 0 11
41758: PPUSH
41759: LD_VAR 0 12
41763: PPUSH
41764: CALL_OW 488
41768: PUSH
41769: LD_VAR 0 11
41773: PPUSH
41774: LD_VAR 0 12
41778: PPUSH
41779: CALL_OW 428
41783: NOT
41784: AND
41785: IFFALSE 41808
// begin ComMoveXY ( tmp , _x , _y ) ;
41787: LD_VAR 0 13
41791: PPUSH
41792: LD_VAR 0 11
41796: PPUSH
41797: LD_VAR 0 12
41801: PPUSH
41802: CALL_OW 111
// break ;
41806: GO 41810
// end ; end ;
41808: GO 41695
41810: POP
41811: POP
// end ; end ;
41812: GO 41137
41814: POP
41815: POP
// end ;
41816: LD_VAR 0 8
41820: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41821: LD_INT 0
41823: PPUSH
// result := true ;
41824: LD_ADDR_VAR 0 3
41828: PUSH
41829: LD_INT 1
41831: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41832: LD_VAR 0 2
41836: PUSH
41837: LD_INT 24
41839: DOUBLE
41840: EQUAL
41841: IFTRUE 41851
41843: LD_INT 33
41845: DOUBLE
41846: EQUAL
41847: IFTRUE 41851
41849: GO 41876
41851: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41852: LD_ADDR_VAR 0 3
41856: PUSH
41857: LD_INT 32
41859: PPUSH
41860: LD_VAR 0 1
41864: PPUSH
41865: CALL_OW 321
41869: PUSH
41870: LD_INT 2
41872: EQUAL
41873: ST_TO_ADDR
41874: GO 42192
41876: LD_INT 20
41878: DOUBLE
41879: EQUAL
41880: IFTRUE 41884
41882: GO 41909
41884: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41885: LD_ADDR_VAR 0 3
41889: PUSH
41890: LD_INT 6
41892: PPUSH
41893: LD_VAR 0 1
41897: PPUSH
41898: CALL_OW 321
41902: PUSH
41903: LD_INT 2
41905: EQUAL
41906: ST_TO_ADDR
41907: GO 42192
41909: LD_INT 22
41911: DOUBLE
41912: EQUAL
41913: IFTRUE 41923
41915: LD_INT 36
41917: DOUBLE
41918: EQUAL
41919: IFTRUE 41923
41921: GO 41948
41923: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41924: LD_ADDR_VAR 0 3
41928: PUSH
41929: LD_INT 15
41931: PPUSH
41932: LD_VAR 0 1
41936: PPUSH
41937: CALL_OW 321
41941: PUSH
41942: LD_INT 2
41944: EQUAL
41945: ST_TO_ADDR
41946: GO 42192
41948: LD_INT 30
41950: DOUBLE
41951: EQUAL
41952: IFTRUE 41956
41954: GO 41981
41956: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41957: LD_ADDR_VAR 0 3
41961: PUSH
41962: LD_INT 20
41964: PPUSH
41965: LD_VAR 0 1
41969: PPUSH
41970: CALL_OW 321
41974: PUSH
41975: LD_INT 2
41977: EQUAL
41978: ST_TO_ADDR
41979: GO 42192
41981: LD_INT 28
41983: DOUBLE
41984: EQUAL
41985: IFTRUE 41995
41987: LD_INT 21
41989: DOUBLE
41990: EQUAL
41991: IFTRUE 41995
41993: GO 42020
41995: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41996: LD_ADDR_VAR 0 3
42000: PUSH
42001: LD_INT 21
42003: PPUSH
42004: LD_VAR 0 1
42008: PPUSH
42009: CALL_OW 321
42013: PUSH
42014: LD_INT 2
42016: EQUAL
42017: ST_TO_ADDR
42018: GO 42192
42020: LD_INT 16
42022: DOUBLE
42023: EQUAL
42024: IFTRUE 42028
42026: GO 42053
42028: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42029: LD_ADDR_VAR 0 3
42033: PUSH
42034: LD_INT 84
42036: PPUSH
42037: LD_VAR 0 1
42041: PPUSH
42042: CALL_OW 321
42046: PUSH
42047: LD_INT 2
42049: EQUAL
42050: ST_TO_ADDR
42051: GO 42192
42053: LD_INT 19
42055: DOUBLE
42056: EQUAL
42057: IFTRUE 42067
42059: LD_INT 23
42061: DOUBLE
42062: EQUAL
42063: IFTRUE 42067
42065: GO 42092
42067: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42068: LD_ADDR_VAR 0 3
42072: PUSH
42073: LD_INT 83
42075: PPUSH
42076: LD_VAR 0 1
42080: PPUSH
42081: CALL_OW 321
42085: PUSH
42086: LD_INT 2
42088: EQUAL
42089: ST_TO_ADDR
42090: GO 42192
42092: LD_INT 17
42094: DOUBLE
42095: EQUAL
42096: IFTRUE 42100
42098: GO 42125
42100: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42101: LD_ADDR_VAR 0 3
42105: PUSH
42106: LD_INT 39
42108: PPUSH
42109: LD_VAR 0 1
42113: PPUSH
42114: CALL_OW 321
42118: PUSH
42119: LD_INT 2
42121: EQUAL
42122: ST_TO_ADDR
42123: GO 42192
42125: LD_INT 18
42127: DOUBLE
42128: EQUAL
42129: IFTRUE 42133
42131: GO 42158
42133: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42134: LD_ADDR_VAR 0 3
42138: PUSH
42139: LD_INT 40
42141: PPUSH
42142: LD_VAR 0 1
42146: PPUSH
42147: CALL_OW 321
42151: PUSH
42152: LD_INT 2
42154: EQUAL
42155: ST_TO_ADDR
42156: GO 42192
42158: LD_INT 27
42160: DOUBLE
42161: EQUAL
42162: IFTRUE 42166
42164: GO 42191
42166: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42167: LD_ADDR_VAR 0 3
42171: PUSH
42172: LD_INT 35
42174: PPUSH
42175: LD_VAR 0 1
42179: PPUSH
42180: CALL_OW 321
42184: PUSH
42185: LD_INT 2
42187: EQUAL
42188: ST_TO_ADDR
42189: GO 42192
42191: POP
// end ;
42192: LD_VAR 0 3
42196: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42197: LD_INT 0
42199: PPUSH
42200: PPUSH
42201: PPUSH
42202: PPUSH
42203: PPUSH
42204: PPUSH
42205: PPUSH
42206: PPUSH
42207: PPUSH
42208: PPUSH
42209: PPUSH
// result := false ;
42210: LD_ADDR_VAR 0 6
42214: PUSH
42215: LD_INT 0
42217: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42218: LD_VAR 0 1
42222: NOT
42223: PUSH
42224: LD_VAR 0 1
42228: PPUSH
42229: CALL_OW 266
42233: PUSH
42234: LD_INT 0
42236: PUSH
42237: LD_INT 1
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: IN
42244: NOT
42245: OR
42246: PUSH
42247: LD_VAR 0 2
42251: NOT
42252: OR
42253: PUSH
42254: LD_VAR 0 5
42258: PUSH
42259: LD_INT 0
42261: PUSH
42262: LD_INT 1
42264: PUSH
42265: LD_INT 2
42267: PUSH
42268: LD_INT 3
42270: PUSH
42271: LD_INT 4
42273: PUSH
42274: LD_INT 5
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: IN
42285: NOT
42286: OR
42287: PUSH
42288: LD_VAR 0 3
42292: PPUSH
42293: LD_VAR 0 4
42297: PPUSH
42298: CALL_OW 488
42302: NOT
42303: OR
42304: IFFALSE 42308
// exit ;
42306: GO 43044
// side := GetSide ( depot ) ;
42308: LD_ADDR_VAR 0 9
42312: PUSH
42313: LD_VAR 0 1
42317: PPUSH
42318: CALL_OW 255
42322: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42323: LD_VAR 0 9
42327: PPUSH
42328: LD_VAR 0 2
42332: PPUSH
42333: CALL 41821 0 2
42337: NOT
42338: IFFALSE 42342
// exit ;
42340: GO 43044
// pom := GetBase ( depot ) ;
42342: LD_ADDR_VAR 0 10
42346: PUSH
42347: LD_VAR 0 1
42351: PPUSH
42352: CALL_OW 274
42356: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42357: LD_ADDR_VAR 0 11
42361: PUSH
42362: LD_VAR 0 2
42366: PPUSH
42367: LD_VAR 0 1
42371: PPUSH
42372: CALL_OW 248
42376: PPUSH
42377: CALL_OW 450
42381: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42382: LD_VAR 0 10
42386: PPUSH
42387: LD_INT 1
42389: PPUSH
42390: CALL_OW 275
42394: PUSH
42395: LD_VAR 0 11
42399: PUSH
42400: LD_INT 1
42402: ARRAY
42403: GREATEREQUAL
42404: PUSH
42405: LD_VAR 0 10
42409: PPUSH
42410: LD_INT 2
42412: PPUSH
42413: CALL_OW 275
42417: PUSH
42418: LD_VAR 0 11
42422: PUSH
42423: LD_INT 2
42425: ARRAY
42426: GREATEREQUAL
42427: AND
42428: PUSH
42429: LD_VAR 0 10
42433: PPUSH
42434: LD_INT 3
42436: PPUSH
42437: CALL_OW 275
42441: PUSH
42442: LD_VAR 0 11
42446: PUSH
42447: LD_INT 3
42449: ARRAY
42450: GREATEREQUAL
42451: AND
42452: NOT
42453: IFFALSE 42457
// exit ;
42455: GO 43044
// if GetBType ( depot ) = b_depot then
42457: LD_VAR 0 1
42461: PPUSH
42462: CALL_OW 266
42466: PUSH
42467: LD_INT 0
42469: EQUAL
42470: IFFALSE 42482
// dist := 28 else
42472: LD_ADDR_VAR 0 14
42476: PUSH
42477: LD_INT 28
42479: ST_TO_ADDR
42480: GO 42490
// dist := 36 ;
42482: LD_ADDR_VAR 0 14
42486: PUSH
42487: LD_INT 36
42489: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42490: LD_VAR 0 1
42494: PPUSH
42495: LD_VAR 0 3
42499: PPUSH
42500: LD_VAR 0 4
42504: PPUSH
42505: CALL_OW 297
42509: PUSH
42510: LD_VAR 0 14
42514: GREATER
42515: IFFALSE 42519
// exit ;
42517: GO 43044
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42519: LD_ADDR_VAR 0 12
42523: PUSH
42524: LD_VAR 0 2
42528: PPUSH
42529: LD_VAR 0 3
42533: PPUSH
42534: LD_VAR 0 4
42538: PPUSH
42539: LD_VAR 0 5
42543: PPUSH
42544: LD_VAR 0 1
42548: PPUSH
42549: CALL_OW 248
42553: PPUSH
42554: LD_INT 0
42556: PPUSH
42557: CALL 43049 0 6
42561: ST_TO_ADDR
// if not hexes then
42562: LD_VAR 0 12
42566: NOT
42567: IFFALSE 42571
// exit ;
42569: GO 43044
// hex := GetHexInfo ( x , y ) ;
42571: LD_ADDR_VAR 0 15
42575: PUSH
42576: LD_VAR 0 3
42580: PPUSH
42581: LD_VAR 0 4
42585: PPUSH
42586: CALL_OW 546
42590: ST_TO_ADDR
// if hex [ 1 ] then
42591: LD_VAR 0 15
42595: PUSH
42596: LD_INT 1
42598: ARRAY
42599: IFFALSE 42603
// exit ;
42601: GO 43044
// height := hex [ 2 ] ;
42603: LD_ADDR_VAR 0 13
42607: PUSH
42608: LD_VAR 0 15
42612: PUSH
42613: LD_INT 2
42615: ARRAY
42616: ST_TO_ADDR
// for i = 1 to hexes do
42617: LD_ADDR_VAR 0 7
42621: PUSH
42622: DOUBLE
42623: LD_INT 1
42625: DEC
42626: ST_TO_ADDR
42627: LD_VAR 0 12
42631: PUSH
42632: FOR_TO
42633: IFFALSE 42963
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42635: LD_VAR 0 12
42639: PUSH
42640: LD_VAR 0 7
42644: ARRAY
42645: PUSH
42646: LD_INT 1
42648: ARRAY
42649: PPUSH
42650: LD_VAR 0 12
42654: PUSH
42655: LD_VAR 0 7
42659: ARRAY
42660: PUSH
42661: LD_INT 2
42663: ARRAY
42664: PPUSH
42665: CALL_OW 488
42669: NOT
42670: PUSH
42671: LD_VAR 0 12
42675: PUSH
42676: LD_VAR 0 7
42680: ARRAY
42681: PUSH
42682: LD_INT 1
42684: ARRAY
42685: PPUSH
42686: LD_VAR 0 12
42690: PUSH
42691: LD_VAR 0 7
42695: ARRAY
42696: PUSH
42697: LD_INT 2
42699: ARRAY
42700: PPUSH
42701: CALL_OW 428
42705: PUSH
42706: LD_INT 0
42708: GREATER
42709: OR
42710: PUSH
42711: LD_VAR 0 12
42715: PUSH
42716: LD_VAR 0 7
42720: ARRAY
42721: PUSH
42722: LD_INT 1
42724: ARRAY
42725: PPUSH
42726: LD_VAR 0 12
42730: PUSH
42731: LD_VAR 0 7
42735: ARRAY
42736: PUSH
42737: LD_INT 2
42739: ARRAY
42740: PPUSH
42741: CALL_OW 351
42745: OR
42746: IFFALSE 42752
// exit ;
42748: POP
42749: POP
42750: GO 43044
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42752: LD_ADDR_VAR 0 8
42756: PUSH
42757: LD_VAR 0 12
42761: PUSH
42762: LD_VAR 0 7
42766: ARRAY
42767: PUSH
42768: LD_INT 1
42770: ARRAY
42771: PPUSH
42772: LD_VAR 0 12
42776: PUSH
42777: LD_VAR 0 7
42781: ARRAY
42782: PUSH
42783: LD_INT 2
42785: ARRAY
42786: PPUSH
42787: CALL_OW 546
42791: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42792: LD_VAR 0 8
42796: PUSH
42797: LD_INT 1
42799: ARRAY
42800: PUSH
42801: LD_VAR 0 8
42805: PUSH
42806: LD_INT 2
42808: ARRAY
42809: PUSH
42810: LD_VAR 0 13
42814: PUSH
42815: LD_INT 2
42817: PLUS
42818: GREATER
42819: OR
42820: PUSH
42821: LD_VAR 0 8
42825: PUSH
42826: LD_INT 2
42828: ARRAY
42829: PUSH
42830: LD_VAR 0 13
42834: PUSH
42835: LD_INT 2
42837: MINUS
42838: LESS
42839: OR
42840: PUSH
42841: LD_VAR 0 8
42845: PUSH
42846: LD_INT 3
42848: ARRAY
42849: PUSH
42850: LD_INT 0
42852: PUSH
42853: LD_INT 8
42855: PUSH
42856: LD_INT 9
42858: PUSH
42859: LD_INT 10
42861: PUSH
42862: LD_INT 11
42864: PUSH
42865: LD_INT 12
42867: PUSH
42868: LD_INT 13
42870: PUSH
42871: LD_INT 16
42873: PUSH
42874: LD_INT 17
42876: PUSH
42877: LD_INT 18
42879: PUSH
42880: LD_INT 19
42882: PUSH
42883: LD_INT 20
42885: PUSH
42886: LD_INT 21
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: IN
42904: NOT
42905: OR
42906: PUSH
42907: LD_VAR 0 8
42911: PUSH
42912: LD_INT 5
42914: ARRAY
42915: NOT
42916: OR
42917: PUSH
42918: LD_VAR 0 8
42922: PUSH
42923: LD_INT 6
42925: ARRAY
42926: PUSH
42927: LD_INT 1
42929: PUSH
42930: LD_INT 2
42932: PUSH
42933: LD_INT 7
42935: PUSH
42936: LD_INT 9
42938: PUSH
42939: LD_INT 10
42941: PUSH
42942: LD_INT 11
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: IN
42953: NOT
42954: OR
42955: IFFALSE 42961
// exit ;
42957: POP
42958: POP
42959: GO 43044
// end ;
42961: GO 42632
42963: POP
42964: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42965: LD_VAR 0 9
42969: PPUSH
42970: LD_VAR 0 3
42974: PPUSH
42975: LD_VAR 0 4
42979: PPUSH
42980: LD_INT 20
42982: PPUSH
42983: CALL 34996 0 4
42987: PUSH
42988: LD_INT 4
42990: ARRAY
42991: IFFALSE 42995
// exit ;
42993: GO 43044
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42995: LD_VAR 0 2
42999: PUSH
43000: LD_INT 29
43002: PUSH
43003: LD_INT 30
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: IN
43010: PUSH
43011: LD_VAR 0 3
43015: PPUSH
43016: LD_VAR 0 4
43020: PPUSH
43021: LD_VAR 0 9
43025: PPUSH
43026: CALL_OW 440
43030: NOT
43031: AND
43032: IFFALSE 43036
// exit ;
43034: GO 43044
// result := true ;
43036: LD_ADDR_VAR 0 6
43040: PUSH
43041: LD_INT 1
43043: ST_TO_ADDR
// end ;
43044: LD_VAR 0 6
43048: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43049: LD_INT 0
43051: PPUSH
43052: PPUSH
43053: PPUSH
43054: PPUSH
43055: PPUSH
43056: PPUSH
43057: PPUSH
43058: PPUSH
43059: PPUSH
43060: PPUSH
43061: PPUSH
43062: PPUSH
43063: PPUSH
43064: PPUSH
43065: PPUSH
43066: PPUSH
43067: PPUSH
43068: PPUSH
43069: PPUSH
43070: PPUSH
43071: PPUSH
43072: PPUSH
43073: PPUSH
43074: PPUSH
43075: PPUSH
43076: PPUSH
43077: PPUSH
43078: PPUSH
43079: PPUSH
43080: PPUSH
43081: PPUSH
43082: PPUSH
43083: PPUSH
43084: PPUSH
43085: PPUSH
43086: PPUSH
43087: PPUSH
43088: PPUSH
43089: PPUSH
43090: PPUSH
43091: PPUSH
43092: PPUSH
43093: PPUSH
43094: PPUSH
43095: PPUSH
43096: PPUSH
43097: PPUSH
43098: PPUSH
43099: PPUSH
43100: PPUSH
43101: PPUSH
43102: PPUSH
43103: PPUSH
43104: PPUSH
43105: PPUSH
43106: PPUSH
43107: PPUSH
43108: PPUSH
// result = [ ] ;
43109: LD_ADDR_VAR 0 7
43113: PUSH
43114: EMPTY
43115: ST_TO_ADDR
// temp_list = [ ] ;
43116: LD_ADDR_VAR 0 9
43120: PUSH
43121: EMPTY
43122: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43123: LD_VAR 0 4
43127: PUSH
43128: LD_INT 0
43130: PUSH
43131: LD_INT 1
43133: PUSH
43134: LD_INT 2
43136: PUSH
43137: LD_INT 3
43139: PUSH
43140: LD_INT 4
43142: PUSH
43143: LD_INT 5
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: IN
43154: NOT
43155: PUSH
43156: LD_VAR 0 1
43160: PUSH
43161: LD_INT 0
43163: PUSH
43164: LD_INT 1
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: IN
43171: PUSH
43172: LD_VAR 0 5
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: LD_INT 2
43182: PUSH
43183: LD_INT 3
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: LIST
43190: IN
43191: NOT
43192: AND
43193: OR
43194: IFFALSE 43198
// exit ;
43196: GO 61589
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43198: LD_VAR 0 1
43202: PUSH
43203: LD_INT 6
43205: PUSH
43206: LD_INT 7
43208: PUSH
43209: LD_INT 8
43211: PUSH
43212: LD_INT 13
43214: PUSH
43215: LD_INT 12
43217: PUSH
43218: LD_INT 15
43220: PUSH
43221: LD_INT 11
43223: PUSH
43224: LD_INT 14
43226: PUSH
43227: LD_INT 10
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: IN
43241: IFFALSE 43251
// btype = b_lab ;
43243: LD_ADDR_VAR 0 1
43247: PUSH
43248: LD_INT 6
43250: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43251: LD_VAR 0 6
43255: PUSH
43256: LD_INT 0
43258: PUSH
43259: LD_INT 1
43261: PUSH
43262: LD_INT 2
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: LIST
43269: IN
43270: NOT
43271: PUSH
43272: LD_VAR 0 1
43276: PUSH
43277: LD_INT 0
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: LD_INT 2
43285: PUSH
43286: LD_INT 3
43288: PUSH
43289: LD_INT 6
43291: PUSH
43292: LD_INT 36
43294: PUSH
43295: LD_INT 4
43297: PUSH
43298: LD_INT 5
43300: PUSH
43301: LD_INT 31
43303: PUSH
43304: LD_INT 32
43306: PUSH
43307: LD_INT 33
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: IN
43323: NOT
43324: PUSH
43325: LD_VAR 0 6
43329: PUSH
43330: LD_INT 1
43332: EQUAL
43333: AND
43334: OR
43335: PUSH
43336: LD_VAR 0 1
43340: PUSH
43341: LD_INT 2
43343: PUSH
43344: LD_INT 3
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: IN
43351: NOT
43352: PUSH
43353: LD_VAR 0 6
43357: PUSH
43358: LD_INT 2
43360: EQUAL
43361: AND
43362: OR
43363: IFFALSE 43373
// mode = 0 ;
43365: LD_ADDR_VAR 0 6
43369: PUSH
43370: LD_INT 0
43372: ST_TO_ADDR
// case mode of 0 :
43373: LD_VAR 0 6
43377: PUSH
43378: LD_INT 0
43380: DOUBLE
43381: EQUAL
43382: IFTRUE 43386
43384: GO 54839
43386: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43387: LD_ADDR_VAR 0 11
43391: PUSH
43392: LD_INT 0
43394: PUSH
43395: LD_INT 0
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 0
43404: PUSH
43405: LD_INT 1
43407: NEG
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 1
43415: PUSH
43416: LD_INT 0
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 1
43425: PUSH
43426: LD_INT 1
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 0
43435: PUSH
43436: LD_INT 1
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 1
43445: NEG
43446: PUSH
43447: LD_INT 0
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 1
43456: NEG
43457: PUSH
43458: LD_INT 1
43460: NEG
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 1
43468: NEG
43469: PUSH
43470: LD_INT 2
43472: NEG
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 0
43480: PUSH
43481: LD_INT 2
43483: NEG
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 1
43491: PUSH
43492: LD_INT 1
43494: NEG
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 1
43502: PUSH
43503: LD_INT 2
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 0
43512: PUSH
43513: LD_INT 2
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 1
43522: NEG
43523: PUSH
43524: LD_INT 1
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 1
43533: PUSH
43534: LD_INT 3
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 0
43543: PUSH
43544: LD_INT 3
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 1
43553: NEG
43554: PUSH
43555: LD_INT 2
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43580: LD_ADDR_VAR 0 12
43584: PUSH
43585: LD_INT 0
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: LD_INT 1
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 1
43608: PUSH
43609: LD_INT 0
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: LD_INT 1
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 0
43628: PUSH
43629: LD_INT 1
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 1
43638: NEG
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: NEG
43650: PUSH
43651: LD_INT 1
43653: NEG
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 1
43661: PUSH
43662: LD_INT 1
43664: NEG
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 2
43672: PUSH
43673: LD_INT 0
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 2
43682: PUSH
43683: LD_INT 1
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 1
43692: NEG
43693: PUSH
43694: LD_INT 1
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 2
43703: NEG
43704: PUSH
43705: LD_INT 0
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 2
43714: NEG
43715: PUSH
43716: LD_INT 1
43718: NEG
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 2
43726: NEG
43727: PUSH
43728: LD_INT 1
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 3
43737: NEG
43738: PUSH
43739: LD_INT 0
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 3
43748: NEG
43749: PUSH
43750: LD_INT 1
43752: NEG
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43776: LD_ADDR_VAR 0 13
43780: PUSH
43781: LD_INT 0
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 0
43793: PUSH
43794: LD_INT 1
43796: NEG
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 1
43804: PUSH
43805: LD_INT 0
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 1
43814: PUSH
43815: LD_INT 1
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 0
43824: PUSH
43825: LD_INT 1
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 1
43834: NEG
43835: PUSH
43836: LD_INT 0
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 1
43845: NEG
43846: PUSH
43847: LD_INT 1
43849: NEG
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 1
43857: NEG
43858: PUSH
43859: LD_INT 2
43861: NEG
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 2
43869: PUSH
43870: LD_INT 1
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 2
43879: PUSH
43880: LD_INT 2
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 1
43889: PUSH
43890: LD_INT 2
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 2
43899: NEG
43900: PUSH
43901: LD_INT 1
43903: NEG
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 2
43911: NEG
43912: PUSH
43913: LD_INT 2
43915: NEG
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 2
43923: NEG
43924: PUSH
43925: LD_INT 3
43927: NEG
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 3
43935: NEG
43936: PUSH
43937: LD_INT 2
43939: NEG
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 3
43947: NEG
43948: PUSH
43949: LD_INT 3
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43975: LD_ADDR_VAR 0 14
43979: PUSH
43980: LD_INT 0
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 0
43992: PUSH
43993: LD_INT 1
43995: NEG
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 1
44003: PUSH
44004: LD_INT 0
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: LD_INT 1
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 0
44023: PUSH
44024: LD_INT 1
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: NEG
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 1
44044: NEG
44045: PUSH
44046: LD_INT 1
44048: NEG
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 1
44056: NEG
44057: PUSH
44058: LD_INT 2
44060: NEG
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 0
44068: PUSH
44069: LD_INT 2
44071: NEG
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: LD_INT 1
44082: NEG
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: LD_INT 2
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: LD_INT 2
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: LD_INT 1
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 1
44121: NEG
44122: PUSH
44123: LD_INT 3
44125: NEG
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 0
44133: PUSH
44134: LD_INT 3
44136: NEG
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 1
44144: PUSH
44145: LD_INT 2
44147: NEG
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44171: LD_ADDR_VAR 0 15
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: LD_INT 0
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: LD_INT 1
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: PUSH
44200: LD_INT 0
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 1
44209: PUSH
44210: LD_INT 1
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 0
44219: PUSH
44220: LD_INT 1
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 1
44229: NEG
44230: PUSH
44231: LD_INT 0
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 1
44240: NEG
44241: PUSH
44242: LD_INT 1
44244: NEG
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 1
44252: PUSH
44253: LD_INT 1
44255: NEG
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 2
44263: PUSH
44264: LD_INT 0
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 2
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 1
44283: NEG
44284: PUSH
44285: LD_INT 1
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 2
44294: NEG
44295: PUSH
44296: LD_INT 0
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 2
44305: NEG
44306: PUSH
44307: LD_INT 1
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 2
44317: PUSH
44318: LD_INT 1
44320: NEG
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 3
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 3
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44364: LD_ADDR_VAR 0 16
44368: PUSH
44369: LD_INT 0
44371: PUSH
44372: LD_INT 0
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 0
44381: PUSH
44382: LD_INT 1
44384: NEG
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 1
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 1
44402: PUSH
44403: LD_INT 1
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 1
44422: NEG
44423: PUSH
44424: LD_INT 0
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 1
44433: NEG
44434: PUSH
44435: LD_INT 1
44437: NEG
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 1
44445: NEG
44446: PUSH
44447: LD_INT 2
44449: NEG
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 2
44457: PUSH
44458: LD_INT 1
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 2
44467: PUSH
44468: LD_INT 2
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 1
44477: PUSH
44478: LD_INT 2
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 2
44487: NEG
44488: PUSH
44489: LD_INT 1
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 2
44499: NEG
44500: PUSH
44501: LD_INT 2
44503: NEG
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 3
44511: PUSH
44512: LD_INT 2
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 3
44521: PUSH
44522: LD_INT 3
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 2
44531: PUSH
44532: LD_INT 3
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44557: LD_ADDR_VAR 0 17
44561: PUSH
44562: LD_INT 0
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: LD_INT 1
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 0
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 1
44615: NEG
44616: PUSH
44617: LD_INT 0
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: LD_INT 1
44630: NEG
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: LD_INT 2
44642: NEG
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 0
44650: PUSH
44651: LD_INT 2
44653: NEG
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 1
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 2
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 2
44682: PUSH
44683: LD_INT 1
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 2
44692: PUSH
44693: LD_INT 2
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 1
44702: PUSH
44703: LD_INT 2
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 0
44712: PUSH
44713: LD_INT 2
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 1
44722: NEG
44723: PUSH
44724: LD_INT 1
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 2
44733: NEG
44734: PUSH
44735: LD_INT 0
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 2
44744: NEG
44745: PUSH
44746: LD_INT 1
44748: NEG
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 2
44756: NEG
44757: PUSH
44758: LD_INT 2
44760: NEG
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44787: LD_ADDR_VAR 0 18
44791: PUSH
44792: LD_INT 0
44794: PUSH
44795: LD_INT 0
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: LD_INT 1
44807: NEG
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 1
44815: PUSH
44816: LD_INT 0
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 1
44825: PUSH
44826: LD_INT 1
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: LD_INT 0
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 1
44856: NEG
44857: PUSH
44858: LD_INT 1
44860: NEG
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 1
44868: NEG
44869: PUSH
44870: LD_INT 2
44872: NEG
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 0
44880: PUSH
44881: LD_INT 2
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: PUSH
44892: LD_INT 1
44894: NEG
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 2
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 2
44912: PUSH
44913: LD_INT 1
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 2
44922: PUSH
44923: LD_INT 2
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: LD_INT 2
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: LD_INT 2
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: NEG
44953: PUSH
44954: LD_INT 1
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 2
44963: NEG
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 2
44974: NEG
44975: PUSH
44976: LD_INT 1
44978: NEG
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 2
44986: NEG
44987: PUSH
44988: LD_INT 2
44990: NEG
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45017: LD_ADDR_VAR 0 19
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 0
45034: PUSH
45035: LD_INT 1
45037: NEG
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 1
45045: PUSH
45046: LD_INT 0
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: PUSH
45056: LD_INT 1
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: LD_INT 1
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 1
45075: NEG
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 1
45086: NEG
45087: PUSH
45088: LD_INT 1
45090: NEG
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: NEG
45099: PUSH
45100: LD_INT 2
45102: NEG
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 0
45110: PUSH
45111: LD_INT 2
45113: NEG
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 1
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 2
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 2
45142: PUSH
45143: LD_INT 1
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 2
45152: PUSH
45153: LD_INT 2
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: LD_INT 2
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 0
45172: PUSH
45173: LD_INT 2
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 1
45182: NEG
45183: PUSH
45184: LD_INT 1
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 2
45193: NEG
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 2
45204: NEG
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 2
45216: NEG
45217: PUSH
45218: LD_INT 2
45220: NEG
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45247: LD_ADDR_VAR 0 20
45251: PUSH
45252: LD_INT 0
45254: PUSH
45255: LD_INT 0
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: LD_INT 1
45267: NEG
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: LD_INT 0
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 1
45285: PUSH
45286: LD_INT 1
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: LD_INT 1
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 1
45305: NEG
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: LD_INT 1
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 1
45328: NEG
45329: PUSH
45330: LD_INT 2
45332: NEG
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 0
45340: PUSH
45341: LD_INT 2
45343: NEG
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 1
45351: PUSH
45352: LD_INT 1
45354: NEG
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 2
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 2
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 2
45382: PUSH
45383: LD_INT 2
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 1
45392: PUSH
45393: LD_INT 2
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 0
45402: PUSH
45403: LD_INT 2
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: NEG
45413: PUSH
45414: LD_INT 1
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 2
45423: NEG
45424: PUSH
45425: LD_INT 0
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 2
45434: NEG
45435: PUSH
45436: LD_INT 1
45438: NEG
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 2
45446: NEG
45447: PUSH
45448: LD_INT 2
45450: NEG
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45477: LD_ADDR_VAR 0 21
45481: PUSH
45482: LD_INT 0
45484: PUSH
45485: LD_INT 0
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: LD_INT 1
45497: NEG
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 1
45505: PUSH
45506: LD_INT 0
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 1
45515: PUSH
45516: LD_INT 1
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 1
45535: NEG
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 1
45546: NEG
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 1
45558: NEG
45559: PUSH
45560: LD_INT 2
45562: NEG
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: LD_INT 2
45573: NEG
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 1
45581: PUSH
45582: LD_INT 1
45584: NEG
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 2
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 2
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 2
45612: PUSH
45613: LD_INT 2
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: LD_INT 2
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: LD_INT 2
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 1
45642: NEG
45643: PUSH
45644: LD_INT 1
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 2
45653: NEG
45654: PUSH
45655: LD_INT 0
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 2
45664: NEG
45665: PUSH
45666: LD_INT 1
45668: NEG
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 2
45676: NEG
45677: PUSH
45678: LD_INT 2
45680: NEG
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45707: LD_ADDR_VAR 0 22
45711: PUSH
45712: LD_INT 0
45714: PUSH
45715: LD_INT 0
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 0
45724: PUSH
45725: LD_INT 1
45727: NEG
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 1
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 1
45745: PUSH
45746: LD_INT 1
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 0
45755: PUSH
45756: LD_INT 1
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 1
45765: NEG
45766: PUSH
45767: LD_INT 0
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 1
45776: NEG
45777: PUSH
45778: LD_INT 1
45780: NEG
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: LD_INT 2
45792: NEG
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 0
45800: PUSH
45801: LD_INT 2
45803: NEG
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 1
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 2
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 2
45832: PUSH
45833: LD_INT 1
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 2
45842: PUSH
45843: LD_INT 2
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 1
45852: PUSH
45853: LD_INT 2
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: LD_INT 2
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 1
45872: NEG
45873: PUSH
45874: LD_INT 1
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 2
45883: NEG
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 2
45894: NEG
45895: PUSH
45896: LD_INT 1
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 2
45906: NEG
45907: PUSH
45908: LD_INT 2
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45937: LD_ADDR_VAR 0 23
45941: PUSH
45942: LD_INT 0
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 0
45954: PUSH
45955: LD_INT 1
45957: NEG
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 1
45965: PUSH
45966: LD_INT 0
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 1
45975: PUSH
45976: LD_INT 1
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 0
45985: PUSH
45986: LD_INT 1
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 1
45995: NEG
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 1
46006: NEG
46007: PUSH
46008: LD_INT 1
46010: NEG
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 1
46018: NEG
46019: PUSH
46020: LD_INT 2
46022: NEG
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 0
46030: PUSH
46031: LD_INT 2
46033: NEG
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: PUSH
46042: LD_INT 1
46044: NEG
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 2
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 2
46062: PUSH
46063: LD_INT 1
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 2
46072: PUSH
46073: LD_INT 2
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 1
46082: PUSH
46083: LD_INT 2
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 0
46092: PUSH
46093: LD_INT 2
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 1
46102: NEG
46103: PUSH
46104: LD_INT 1
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 2
46113: NEG
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 2
46124: NEG
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 2
46136: NEG
46137: PUSH
46138: LD_INT 2
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 2
46148: NEG
46149: PUSH
46150: LD_INT 3
46152: NEG
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 1
46160: NEG
46161: PUSH
46162: LD_INT 3
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: PUSH
46173: LD_INT 2
46175: NEG
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 2
46183: PUSH
46184: LD_INT 1
46186: NEG
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46217: LD_ADDR_VAR 0 24
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: LD_INT 1
46237: NEG
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: LD_INT 0
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 1
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 0
46265: PUSH
46266: LD_INT 1
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 1
46275: NEG
46276: PUSH
46277: LD_INT 0
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: LD_INT 1
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: NEG
46299: PUSH
46300: LD_INT 2
46302: NEG
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 0
46310: PUSH
46311: LD_INT 2
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 2
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 2
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 2
46352: PUSH
46353: LD_INT 2
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: PUSH
46363: LD_INT 2
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 0
46372: PUSH
46373: LD_INT 2
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: NEG
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 2
46393: NEG
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 2
46404: NEG
46405: PUSH
46406: LD_INT 1
46408: NEG
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 2
46416: NEG
46417: PUSH
46418: LD_INT 2
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: PUSH
46429: LD_INT 2
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 2
46439: PUSH
46440: LD_INT 1
46442: NEG
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 3
46450: PUSH
46451: LD_INT 1
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 3
46460: PUSH
46461: LD_INT 2
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46493: LD_ADDR_VAR 0 25
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: LD_INT 0
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 0
46510: PUSH
46511: LD_INT 1
46513: NEG
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: LD_INT 0
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 1
46531: PUSH
46532: LD_INT 1
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 0
46541: PUSH
46542: LD_INT 1
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 1
46551: NEG
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 1
46562: NEG
46563: PUSH
46564: LD_INT 1
46566: NEG
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 1
46574: NEG
46575: PUSH
46576: LD_INT 2
46578: NEG
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: LD_INT 2
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 2
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 2
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 2
46628: PUSH
46629: LD_INT 2
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: LD_INT 2
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 0
46648: PUSH
46649: LD_INT 2
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 1
46658: NEG
46659: PUSH
46660: LD_INT 1
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 2
46669: NEG
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 2
46680: NEG
46681: PUSH
46682: LD_INT 1
46684: NEG
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 2
46692: NEG
46693: PUSH
46694: LD_INT 2
46696: NEG
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 3
46704: PUSH
46705: LD_INT 1
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 3
46714: PUSH
46715: LD_INT 2
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 2
46724: PUSH
46725: LD_INT 3
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: LD_INT 3
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46767: LD_ADDR_VAR 0 26
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: LD_INT 1
46787: NEG
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 1
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: LD_INT 1
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: LD_INT 2
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: LD_INT 2
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: PUSH
46872: LD_INT 1
46874: NEG
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 2
46882: PUSH
46883: LD_INT 0
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 2
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 2
46902: PUSH
46903: LD_INT 2
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: LD_INT 2
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: LD_INT 2
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 1
46932: NEG
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 2
46943: NEG
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 2
46954: NEG
46955: PUSH
46956: LD_INT 1
46958: NEG
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 2
46966: NEG
46967: PUSH
46968: LD_INT 2
46970: NEG
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 2
46978: PUSH
46979: LD_INT 3
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 1
46988: PUSH
46989: LD_INT 3
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: LD_INT 2
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 2
47009: NEG
47010: PUSH
47011: LD_INT 1
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47043: LD_ADDR_VAR 0 27
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: LD_INT 1
47063: NEG
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: LD_INT 1
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: LD_INT 1
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 1
47112: NEG
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: LD_INT 2
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: LD_INT 2
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: LD_INT 1
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 2
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 2
47178: PUSH
47179: LD_INT 2
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: PUSH
47189: LD_INT 2
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: LD_INT 2
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: LD_INT 1
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 2
47219: NEG
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 2
47230: NEG
47231: PUSH
47232: LD_INT 1
47234: NEG
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 2
47242: NEG
47243: PUSH
47244: LD_INT 2
47246: NEG
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 1
47254: NEG
47255: PUSH
47256: LD_INT 2
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 2
47265: NEG
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 3
47276: NEG
47277: PUSH
47278: LD_INT 1
47280: NEG
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 3
47288: NEG
47289: PUSH
47290: LD_INT 2
47292: NEG
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47323: LD_ADDR_VAR 0 28
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: LD_INT 0
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: LD_INT 1
47343: NEG
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: LD_INT 1
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 0
47371: PUSH
47372: LD_INT 1
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 1
47381: NEG
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: LD_INT 2
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 0
47416: PUSH
47417: LD_INT 2
47419: NEG
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 2
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 2
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 2
47458: PUSH
47459: LD_INT 2
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: LD_INT 2
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: LD_INT 2
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: LD_INT 1
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: LD_INT 0
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 2
47510: NEG
47511: PUSH
47512: LD_INT 1
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 2
47522: NEG
47523: PUSH
47524: LD_INT 2
47526: NEG
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 2
47534: NEG
47535: PUSH
47536: LD_INT 3
47538: NEG
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: LD_INT 3
47550: NEG
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 3
47558: NEG
47559: PUSH
47560: LD_INT 1
47562: NEG
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 3
47570: NEG
47571: PUSH
47572: LD_INT 2
47574: NEG
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47605: LD_ADDR_VAR 0 29
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: LD_INT 0
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 0
47622: PUSH
47623: LD_INT 1
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: PUSH
47634: LD_INT 0
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 1
47643: PUSH
47644: LD_INT 1
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: LD_INT 0
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 1
47686: NEG
47687: PUSH
47688: LD_INT 2
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: LD_INT 2
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 1
47709: PUSH
47710: LD_INT 1
47712: NEG
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 2
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 2
47730: PUSH
47731: LD_INT 1
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: LD_INT 2
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: LD_INT 2
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: LD_INT 1
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 2
47771: NEG
47772: PUSH
47773: LD_INT 1
47775: NEG
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 2
47783: NEG
47784: PUSH
47785: LD_INT 2
47787: NEG
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 2
47795: NEG
47796: PUSH
47797: LD_INT 3
47799: NEG
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 2
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 3
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 1
47828: PUSH
47829: LD_INT 3
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: NEG
47839: PUSH
47840: LD_INT 2
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 3
47849: NEG
47850: PUSH
47851: LD_INT 2
47853: NEG
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47884: LD_ADDR_VAR 0 30
47888: PUSH
47889: LD_INT 0
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 0
47901: PUSH
47902: LD_INT 1
47904: NEG
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: LD_INT 0
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 1
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 0
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: NEG
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: NEG
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: LD_INT 2
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: LD_INT 2
47980: NEG
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 1
47988: PUSH
47989: LD_INT 1
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 2
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 2
48009: PUSH
48010: LD_INT 1
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 2
48019: PUSH
48020: LD_INT 2
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 1
48029: PUSH
48030: LD_INT 2
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 1
48039: NEG
48040: PUSH
48041: LD_INT 1
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 2
48050: NEG
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 2
48061: NEG
48062: PUSH
48063: LD_INT 1
48065: NEG
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 1
48073: NEG
48074: PUSH
48075: LD_INT 3
48077: NEG
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 1
48085: PUSH
48086: LD_INT 2
48088: NEG
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 3
48096: PUSH
48097: LD_INT 2
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 2
48106: PUSH
48107: LD_INT 3
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 2
48116: NEG
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 3
48127: NEG
48128: PUSH
48129: LD_INT 1
48131: NEG
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48162: LD_ADDR_VAR 0 31
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: LD_INT 1
48182: NEG
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 1
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: LD_INT 1
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: LD_INT 1
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 1
48231: NEG
48232: PUSH
48233: LD_INT 1
48235: NEG
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 1
48243: NEG
48244: PUSH
48245: LD_INT 2
48247: NEG
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 2
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 2
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 2
48286: PUSH
48287: LD_INT 2
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: LD_INT 2
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: LD_INT 2
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 1
48316: NEG
48317: PUSH
48318: LD_INT 1
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 2
48327: NEG
48328: PUSH
48329: LD_INT 1
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 2
48339: NEG
48340: PUSH
48341: LD_INT 2
48343: NEG
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 2
48351: NEG
48352: PUSH
48353: LD_INT 3
48355: NEG
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 2
48363: PUSH
48364: LD_INT 1
48366: NEG
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 3
48374: PUSH
48375: LD_INT 1
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 1
48384: PUSH
48385: LD_INT 3
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 1
48394: NEG
48395: PUSH
48396: LD_INT 2
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 3
48405: NEG
48406: PUSH
48407: LD_INT 2
48409: NEG
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48440: LD_ADDR_VAR 0 32
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: LD_INT 0
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: LD_INT 1
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: LD_INT 2
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: LD_INT 2
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 2
48555: PUSH
48556: LD_INT 1
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 2
48565: PUSH
48566: LD_INT 2
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: LD_INT 2
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: LD_INT 2
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: LD_INT 1
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 2
48606: NEG
48607: PUSH
48608: LD_INT 0
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 2
48617: NEG
48618: PUSH
48619: LD_INT 1
48621: NEG
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: LD_INT 3
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: LD_INT 2
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 3
48652: PUSH
48653: LD_INT 2
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 2
48662: PUSH
48663: LD_INT 3
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 2
48672: NEG
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 3
48683: NEG
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48718: LD_ADDR_VAR 0 33
48722: PUSH
48723: LD_INT 0
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 0
48735: PUSH
48736: LD_INT 1
48738: NEG
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 1
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 1
48756: PUSH
48757: LD_INT 1
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 1
48787: NEG
48788: PUSH
48789: LD_INT 1
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: LD_INT 2
48803: NEG
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 1
48811: PUSH
48812: LD_INT 1
48814: NEG
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 2
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 2
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 1
48842: PUSH
48843: LD_INT 2
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 0
48852: PUSH
48853: LD_INT 2
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 2
48873: NEG
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 2
48884: NEG
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 2
48896: NEG
48897: PUSH
48898: LD_INT 2
48900: NEG
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 2
48908: NEG
48909: PUSH
48910: LD_INT 3
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 2
48920: PUSH
48921: LD_INT 1
48923: NEG
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 3
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: LD_INT 3
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: LD_INT 2
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 3
48962: NEG
48963: PUSH
48964: LD_INT 2
48966: NEG
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48997: LD_ADDR_VAR 0 34
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 1
49035: PUSH
49036: LD_INT 1
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 0
49045: PUSH
49046: LD_INT 1
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 1
49066: NEG
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 1
49078: NEG
49079: PUSH
49080: LD_INT 2
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 0
49090: PUSH
49091: LD_INT 2
49093: NEG
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 1
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 2
49112: PUSH
49113: LD_INT 1
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 2
49122: PUSH
49123: LD_INT 2
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 1
49132: PUSH
49133: LD_INT 2
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 1
49142: NEG
49143: PUSH
49144: LD_INT 1
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 2
49153: NEG
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 2
49164: NEG
49165: PUSH
49166: LD_INT 1
49168: NEG
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 2
49176: NEG
49177: PUSH
49178: LD_INT 2
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: NEG
49189: PUSH
49190: LD_INT 3
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: LD_INT 2
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 3
49211: PUSH
49212: LD_INT 2
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 2
49221: PUSH
49222: LD_INT 3
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 2
49231: NEG
49232: PUSH
49233: LD_INT 1
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 3
49242: NEG
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49277: LD_ADDR_VAR 0 35
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: LD_INT 0
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: LD_INT 1
49297: NEG
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 1
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: LD_INT 1
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 1
49335: NEG
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 1
49346: NEG
49347: PUSH
49348: LD_INT 1
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 2
49358: PUSH
49359: LD_INT 1
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 2
49368: NEG
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49389: LD_ADDR_VAR 0 36
49393: PUSH
49394: LD_INT 0
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: LD_INT 1
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 1
49447: NEG
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: NEG
49459: PUSH
49460: LD_INT 1
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: LD_INT 2
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: LD_INT 2
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49501: LD_ADDR_VAR 0 37
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: LD_INT 0
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: LD_INT 1
49521: NEG
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 1
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 1
49539: PUSH
49540: LD_INT 1
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 0
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 1
49559: NEG
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 1
49570: NEG
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: NEG
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49613: LD_ADDR_VAR 0 38
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: LD_INT 0
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 0
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 1
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: LD_INT 0
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 1
49682: NEG
49683: PUSH
49684: LD_INT 1
49686: NEG
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 2
49694: PUSH
49695: LD_INT 1
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 2
49704: NEG
49705: PUSH
49706: LD_INT 1
49708: NEG
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49725: LD_ADDR_VAR 0 39
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 0
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 1
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 0
49773: PUSH
49774: LD_INT 1
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 1
49783: NEG
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: LD_INT 1
49798: NEG
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 1
49806: NEG
49807: PUSH
49808: LD_INT 2
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 1
49818: PUSH
49819: LD_INT 2
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49837: LD_ADDR_VAR 0 40
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: LD_INT 1
49857: NEG
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: LD_INT 0
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: LD_INT 0
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 1
49906: NEG
49907: PUSH
49908: LD_INT 1
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: NEG
49930: PUSH
49931: LD_INT 1
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49949: LD_ADDR_VAR 0 41
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: LD_INT 1
49969: NEG
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: LD_INT 0
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 1
49987: PUSH
49988: LD_INT 1
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 0
49997: PUSH
49998: LD_INT 1
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 1
50007: NEG
50008: PUSH
50009: LD_INT 0
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 1
50018: NEG
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 1
50030: NEG
50031: PUSH
50032: LD_INT 2
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 2
50053: PUSH
50054: LD_INT 0
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 2
50063: PUSH
50064: LD_INT 1
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 2
50073: PUSH
50074: LD_INT 2
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 1
50083: PUSH
50084: LD_INT 2
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 2
50104: NEG
50105: PUSH
50106: LD_INT 0
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 2
50115: NEG
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 2
50127: NEG
50128: PUSH
50129: LD_INT 2
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 2
50139: NEG
50140: PUSH
50141: LD_INT 3
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 2
50151: PUSH
50152: LD_INT 1
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 3
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 3
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 3
50182: PUSH
50183: LD_INT 2
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 3
50192: PUSH
50193: LD_INT 3
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 2
50202: PUSH
50203: LD_INT 3
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 2
50212: NEG
50213: PUSH
50214: LD_INT 1
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 3
50223: NEG
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 3
50234: NEG
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 3
50246: NEG
50247: PUSH
50248: LD_INT 2
50250: NEG
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 3
50258: NEG
50259: PUSH
50260: LD_INT 3
50262: NEG
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50299: LD_ADDR_VAR 0 42
50303: PUSH
50304: LD_INT 0
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 0
50316: PUSH
50317: LD_INT 1
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: LD_INT 0
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 1
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 1
50357: NEG
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 1
50368: NEG
50369: PUSH
50370: LD_INT 1
50372: NEG
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: LD_INT 2
50384: NEG
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: LD_INT 2
50395: NEG
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 1
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 2
50414: PUSH
50415: LD_INT 1
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 2
50424: PUSH
50425: LD_INT 2
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 1
50434: PUSH
50435: LD_INT 2
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: LD_INT 2
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 1
50454: NEG
50455: PUSH
50456: LD_INT 1
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 2
50465: NEG
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 2
50477: NEG
50478: PUSH
50479: LD_INT 2
50481: NEG
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 2
50489: NEG
50490: PUSH
50491: LD_INT 3
50493: NEG
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 1
50501: NEG
50502: PUSH
50503: LD_INT 3
50505: NEG
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: LD_INT 3
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 1
50524: PUSH
50525: LD_INT 2
50527: NEG
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 3
50535: PUSH
50536: LD_INT 2
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 3
50545: PUSH
50546: LD_INT 3
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 2
50555: PUSH
50556: LD_INT 3
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 1
50565: PUSH
50566: LD_INT 3
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: LD_INT 3
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 1
50585: NEG
50586: PUSH
50587: LD_INT 2
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 3
50596: NEG
50597: PUSH
50598: LD_INT 2
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 3
50608: NEG
50609: PUSH
50610: LD_INT 3
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50649: LD_ADDR_VAR 0 43
50653: PUSH
50654: LD_INT 0
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 0
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 1
50677: PUSH
50678: LD_INT 0
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 1
50687: PUSH
50688: LD_INT 1
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 0
50697: PUSH
50698: LD_INT 1
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 1
50707: NEG
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 1
50718: NEG
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 1
50730: NEG
50731: PUSH
50732: LD_INT 2
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 0
50742: PUSH
50743: LD_INT 2
50745: NEG
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 2
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 2
50774: PUSH
50775: LD_INT 1
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 1
50784: PUSH
50785: LD_INT 2
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: LD_INT 2
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 1
50804: NEG
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 2
50815: NEG
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 2
50826: NEG
50827: PUSH
50828: LD_INT 1
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 1
50838: NEG
50839: PUSH
50840: LD_INT 3
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: LD_INT 3
50853: NEG
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: LD_INT 2
50864: NEG
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 2
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 3
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 3
50893: PUSH
50894: LD_INT 1
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 1
50903: PUSH
50904: LD_INT 3
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 0
50913: PUSH
50914: LD_INT 3
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: LD_INT 2
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 2
50934: NEG
50935: PUSH
50936: LD_INT 1
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 3
50945: NEG
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 3
50956: NEG
50957: PUSH
50958: LD_INT 1
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50997: LD_ADDR_VAR 0 44
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: LD_INT 1
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 1
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 1
51055: NEG
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: LD_INT 1
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: NEG
51079: PUSH
51080: LD_INT 2
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: LD_INT 1
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 2
51101: PUSH
51102: LD_INT 0
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 2
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 2
51121: PUSH
51122: LD_INT 2
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: LD_INT 2
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 1
51141: NEG
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 2
51152: NEG
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 2
51163: NEG
51164: PUSH
51165: LD_INT 1
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 2
51175: NEG
51176: PUSH
51177: LD_INT 2
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 2
51187: NEG
51188: PUSH
51189: LD_INT 3
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 2
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 3
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 3
51220: PUSH
51221: LD_INT 1
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 3
51230: PUSH
51231: LD_INT 2
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 3
51240: PUSH
51241: LD_INT 3
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 2
51250: PUSH
51251: LD_INT 3
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 2
51260: NEG
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 3
51271: NEG
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 3
51282: NEG
51283: PUSH
51284: LD_INT 1
51286: NEG
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 3
51294: NEG
51295: PUSH
51296: LD_INT 2
51298: NEG
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 3
51306: NEG
51307: PUSH
51308: LD_INT 3
51310: NEG
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51347: LD_ADDR_VAR 0 45
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: LD_INT 1
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 0
51395: PUSH
51396: LD_INT 1
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 1
51405: NEG
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: LD_INT 1
51420: NEG
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: LD_INT 2
51432: NEG
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 0
51440: PUSH
51441: LD_INT 2
51443: NEG
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: LD_INT 1
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 2
51462: PUSH
51463: LD_INT 1
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 2
51472: PUSH
51473: LD_INT 2
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: LD_INT 2
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: LD_INT 2
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 1
51502: NEG
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 2
51513: NEG
51514: PUSH
51515: LD_INT 1
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 2
51525: NEG
51526: PUSH
51527: LD_INT 2
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 2
51537: NEG
51538: PUSH
51539: LD_INT 3
51541: NEG
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 1
51549: NEG
51550: PUSH
51551: LD_INT 3
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: LD_INT 3
51564: NEG
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 1
51572: PUSH
51573: LD_INT 2
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 3
51583: PUSH
51584: LD_INT 2
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 3
51593: PUSH
51594: LD_INT 3
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 2
51603: PUSH
51604: LD_INT 3
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 1
51613: PUSH
51614: LD_INT 3
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 0
51623: PUSH
51624: LD_INT 3
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: NEG
51634: PUSH
51635: LD_INT 2
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 3
51644: NEG
51645: PUSH
51646: LD_INT 2
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 3
51656: NEG
51657: PUSH
51658: LD_INT 3
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51697: LD_ADDR_VAR 0 46
51701: PUSH
51702: LD_INT 0
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: PUSH
51726: LD_INT 0
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: LD_INT 1
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: LD_INT 1
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 1
51755: NEG
51756: PUSH
51757: LD_INT 0
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 1
51766: NEG
51767: PUSH
51768: LD_INT 1
51770: NEG
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: LD_INT 2
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: LD_INT 2
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: LD_INT 1
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 2
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 2
51822: PUSH
51823: LD_INT 1
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: LD_INT 2
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: LD_INT 2
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: LD_INT 1
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 2
51863: NEG
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 2
51874: NEG
51875: PUSH
51876: LD_INT 1
51878: NEG
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 1
51886: NEG
51887: PUSH
51888: LD_INT 3
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: LD_INT 3
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 1
51909: PUSH
51910: LD_INT 2
51912: NEG
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 2
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 3
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 3
51941: PUSH
51942: LD_INT 1
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 1
51951: PUSH
51952: LD_INT 3
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 0
51961: PUSH
51962: LD_INT 3
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: LD_INT 2
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 2
51982: NEG
51983: PUSH
51984: LD_INT 1
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 3
51993: NEG
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 3
52004: NEG
52005: PUSH
52006: LD_INT 1
52008: NEG
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52045: LD_ADDR_VAR 0 47
52049: PUSH
52050: LD_INT 0
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 1
52073: PUSH
52074: LD_INT 0
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 1
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: LD_INT 1
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: NEG
52115: PUSH
52116: LD_INT 1
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: LD_INT 2
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: LD_INT 2
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: LD_INT 1
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 2
52160: NEG
52161: PUSH
52162: LD_INT 1
52164: NEG
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 2
52172: NEG
52173: PUSH
52174: LD_INT 2
52176: NEG
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52196: LD_ADDR_VAR 0 48
52200: PUSH
52201: LD_INT 0
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 0
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: LD_INT 1
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: NEG
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: NEG
52278: PUSH
52279: LD_INT 2
52281: NEG
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: LD_INT 2
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 2
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 2
52321: PUSH
52322: LD_INT 1
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52343: LD_ADDR_VAR 0 49
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: LD_INT 0
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 0
52360: PUSH
52361: LD_INT 1
52363: NEG
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 0
52391: PUSH
52392: LD_INT 1
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 1
52401: NEG
52402: PUSH
52403: LD_INT 0
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 1
52424: PUSH
52425: LD_INT 1
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 2
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 2
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 2
52455: PUSH
52456: LD_INT 2
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 1
52465: PUSH
52466: LD_INT 2
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52487: LD_ADDR_VAR 0 50
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 0
52504: PUSH
52505: LD_INT 1
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 1
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 0
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 1
52545: NEG
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: LD_INT 1
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 2
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 2
52578: PUSH
52579: LD_INT 2
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 1
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: LD_INT 2
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52631: LD_ADDR_VAR 0 51
52635: PUSH
52636: LD_INT 0
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 0
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 1
52659: PUSH
52660: LD_INT 0
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 1
52669: PUSH
52670: LD_INT 1
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 0
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 1
52689: NEG
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 1
52700: NEG
52701: PUSH
52702: LD_INT 1
52704: NEG
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 1
52712: PUSH
52713: LD_INT 2
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: LD_INT 2
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 1
52732: NEG
52733: PUSH
52734: LD_INT 1
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 2
52743: NEG
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 2
52754: NEG
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52778: LD_ADDR_VAR 0 52
52782: PUSH
52783: LD_INT 0
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: LD_INT 1
52798: NEG
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: PUSH
52807: LD_INT 0
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 1
52816: PUSH
52817: LD_INT 1
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 1
52836: NEG
52837: PUSH
52838: LD_INT 0
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 1
52847: NEG
52848: PUSH
52849: LD_INT 1
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: LD_INT 2
52863: NEG
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 2
52882: NEG
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 2
52893: NEG
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 2
52905: NEG
52906: PUSH
52907: LD_INT 2
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52929: LD_ADDR_VAR 0 53
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: LD_INT 1
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: NEG
52999: PUSH
53000: LD_INT 1
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: LD_INT 2
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 0
53022: PUSH
53023: LD_INT 2
53025: NEG
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 1
53033: PUSH
53034: LD_INT 1
53036: NEG
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 2
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 2
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 2
53064: PUSH
53065: LD_INT 2
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: LD_INT 2
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: LD_INT 2
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: NEG
53095: PUSH
53096: LD_INT 1
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 2
53105: NEG
53106: PUSH
53107: LD_INT 0
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 2
53116: NEG
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 2
53128: NEG
53129: PUSH
53130: LD_INT 2
53132: NEG
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53159: LD_ADDR_VAR 0 54
53163: PUSH
53164: LD_INT 0
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: LD_INT 1
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 1
53187: PUSH
53188: LD_INT 0
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 1
53228: NEG
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: LD_INT 2
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: LD_INT 2
53255: NEG
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 1
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 2
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 2
53284: PUSH
53285: LD_INT 1
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 2
53294: PUSH
53295: LD_INT 2
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: PUSH
53305: LD_INT 2
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: LD_INT 2
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 1
53324: NEG
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 2
53335: NEG
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 2
53346: NEG
53347: PUSH
53348: LD_INT 1
53350: NEG
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 2
53358: NEG
53359: PUSH
53360: LD_INT 2
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53389: LD_ADDR_VAR 0 55
53393: PUSH
53394: LD_INT 0
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: LD_INT 1
53409: NEG
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 1
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 1
53427: PUSH
53428: LD_INT 1
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 1
53447: NEG
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 1
53458: NEG
53459: PUSH
53460: LD_INT 1
53462: NEG
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: LD_INT 2
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 0
53482: PUSH
53483: LD_INT 2
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: LD_INT 1
53496: NEG
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 2
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 2
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 2
53524: PUSH
53525: LD_INT 2
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 1
53534: PUSH
53535: LD_INT 2
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 0
53544: PUSH
53545: LD_INT 2
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: NEG
53555: PUSH
53556: LD_INT 1
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 2
53565: NEG
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 2
53576: NEG
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 2
53588: NEG
53589: PUSH
53590: LD_INT 2
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53619: LD_ADDR_VAR 0 56
53623: PUSH
53624: LD_INT 0
53626: PUSH
53627: LD_INT 0
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: LD_INT 1
53639: NEG
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 1
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 1
53657: PUSH
53658: LD_INT 1
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 0
53667: PUSH
53668: LD_INT 1
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 1
53677: NEG
53678: PUSH
53679: LD_INT 0
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 1
53688: NEG
53689: PUSH
53690: LD_INT 1
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: LD_INT 2
53704: NEG
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 0
53712: PUSH
53713: LD_INT 2
53715: NEG
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 1
53723: PUSH
53724: LD_INT 1
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 2
53734: PUSH
53735: LD_INT 0
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 2
53744: PUSH
53745: LD_INT 1
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 2
53754: PUSH
53755: LD_INT 2
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: LD_INT 2
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: LD_INT 2
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 2
53795: NEG
53796: PUSH
53797: LD_INT 0
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 2
53806: NEG
53807: PUSH
53808: LD_INT 1
53810: NEG
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 2
53818: NEG
53819: PUSH
53820: LD_INT 2
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53849: LD_ADDR_VAR 0 57
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: LD_INT 0
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: LD_INT 1
53869: NEG
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 1
53877: PUSH
53878: LD_INT 0
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 1
53887: PUSH
53888: LD_INT 1
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 0
53897: PUSH
53898: LD_INT 1
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 1
53907: NEG
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: LD_INT 1
53922: NEG
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: LD_INT 2
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 0
53942: PUSH
53943: LD_INT 2
53945: NEG
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 1
53953: PUSH
53954: LD_INT 1
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 2
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 2
53974: PUSH
53975: LD_INT 1
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 2
53984: PUSH
53985: LD_INT 2
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: LD_INT 2
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: LD_INT 2
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: NEG
54015: PUSH
54016: LD_INT 1
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 2
54025: NEG
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 2
54036: NEG
54037: PUSH
54038: LD_INT 1
54040: NEG
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 2
54048: NEG
54049: PUSH
54050: LD_INT 2
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54079: LD_ADDR_VAR 0 58
54083: PUSH
54084: LD_INT 0
54086: PUSH
54087: LD_INT 0
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: LD_INT 1
54099: NEG
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 1
54107: PUSH
54108: LD_INT 0
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 1
54117: PUSH
54118: LD_INT 1
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: LD_INT 1
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 1
54137: NEG
54138: PUSH
54139: LD_INT 0
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 1
54148: NEG
54149: PUSH
54150: LD_INT 1
54152: NEG
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: LD_INT 2
54164: NEG
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: LD_INT 2
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: LD_INT 1
54186: NEG
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 2
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 2
54204: PUSH
54205: LD_INT 1
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 2
54214: PUSH
54215: LD_INT 2
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: LD_INT 2
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: LD_INT 2
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 1
54244: NEG
54245: PUSH
54246: LD_INT 1
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 2
54255: NEG
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 2
54266: NEG
54267: PUSH
54268: LD_INT 1
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 2
54278: NEG
54279: PUSH
54280: LD_INT 2
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54309: LD_ADDR_VAR 0 59
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: LD_INT 1
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 1
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: LD_INT 1
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: LD_INT 1
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 1
54367: NEG
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: LD_INT 1
54382: NEG
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54397: LD_ADDR_VAR 0 60
54401: PUSH
54402: LD_INT 0
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: LD_INT 1
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: LD_INT 1
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 1
54455: NEG
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 1
54466: NEG
54467: PUSH
54468: LD_INT 1
54470: NEG
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54485: LD_ADDR_VAR 0 61
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 1
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54573: LD_ADDR_VAR 0 62
54577: PUSH
54578: LD_INT 0
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: LD_INT 1
54593: NEG
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 1
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 1
54631: NEG
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 1
54642: NEG
54643: PUSH
54644: LD_INT 1
54646: NEG
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54661: LD_ADDR_VAR 0 63
54665: PUSH
54666: LD_INT 0
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 1
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 1
54699: PUSH
54700: LD_INT 1
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: LD_INT 1
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: NEG
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: NEG
54731: PUSH
54732: LD_INT 1
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54749: LD_ADDR_VAR 0 64
54753: PUSH
54754: LD_INT 0
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 1
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 1
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: LD_INT 1
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 1
54807: NEG
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 1
54818: NEG
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: ST_TO_ADDR
// end ; 1 :
54837: GO 60734
54839: LD_INT 1
54841: DOUBLE
54842: EQUAL
54843: IFTRUE 54847
54845: GO 57470
54847: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54848: LD_ADDR_VAR 0 11
54852: PUSH
54853: LD_INT 1
54855: NEG
54856: PUSH
54857: LD_INT 3
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 0
54867: PUSH
54868: LD_INT 3
54870: NEG
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 1
54878: PUSH
54879: LD_INT 2
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: LIST
54891: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54892: LD_ADDR_VAR 0 12
54896: PUSH
54897: LD_INT 2
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 3
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 3
54920: PUSH
54921: LD_INT 1
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: LIST
54932: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54933: LD_ADDR_VAR 0 13
54937: PUSH
54938: LD_INT 3
54940: PUSH
54941: LD_INT 2
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 3
54950: PUSH
54951: LD_INT 3
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 2
54960: PUSH
54961: LD_INT 3
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: LIST
54972: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54973: LD_ADDR_VAR 0 14
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: LD_INT 3
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: LD_INT 3
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: LD_INT 2
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: LIST
55013: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55014: LD_ADDR_VAR 0 15
55018: PUSH
55019: LD_INT 2
55021: NEG
55022: PUSH
55023: LD_INT 1
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 3
55032: NEG
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 3
55043: NEG
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: LIST
55057: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55058: LD_ADDR_VAR 0 16
55062: PUSH
55063: LD_INT 2
55065: NEG
55066: PUSH
55067: LD_INT 3
55069: NEG
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 3
55077: NEG
55078: PUSH
55079: LD_INT 2
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 3
55089: NEG
55090: PUSH
55091: LD_INT 3
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: LIST
55103: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55104: LD_ADDR_VAR 0 17
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: LD_INT 3
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: LD_INT 3
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: LIST
55147: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55148: LD_ADDR_VAR 0 18
55152: PUSH
55153: LD_INT 2
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 3
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 3
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: LIST
55188: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55189: LD_ADDR_VAR 0 19
55193: PUSH
55194: LD_INT 3
55196: PUSH
55197: LD_INT 2
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 3
55206: PUSH
55207: LD_INT 3
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 2
55216: PUSH
55217: LD_INT 3
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: LIST
55228: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55229: LD_ADDR_VAR 0 20
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: LD_INT 3
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 0
55246: PUSH
55247: LD_INT 3
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 1
55256: NEG
55257: PUSH
55258: LD_INT 2
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: LIST
55269: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55270: LD_ADDR_VAR 0 21
55274: PUSH
55275: LD_INT 2
55277: NEG
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 3
55288: NEG
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 3
55299: NEG
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: LIST
55313: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55314: LD_ADDR_VAR 0 22
55318: PUSH
55319: LD_INT 2
55321: NEG
55322: PUSH
55323: LD_INT 3
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 3
55333: NEG
55334: PUSH
55335: LD_INT 2
55337: NEG
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 3
55345: NEG
55346: PUSH
55347: LD_INT 3
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: LIST
55359: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55360: LD_ADDR_VAR 0 23
55364: PUSH
55365: LD_INT 0
55367: PUSH
55368: LD_INT 3
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 1
55378: NEG
55379: PUSH
55380: LD_INT 4
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 1
55390: PUSH
55391: LD_INT 3
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: LIST
55403: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55404: LD_ADDR_VAR 0 24
55408: PUSH
55409: LD_INT 3
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 3
55421: PUSH
55422: LD_INT 1
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 4
55432: PUSH
55433: LD_INT 1
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: LIST
55444: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55445: LD_ADDR_VAR 0 25
55449: PUSH
55450: LD_INT 3
55452: PUSH
55453: LD_INT 3
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 4
55462: PUSH
55463: LD_INT 3
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 3
55472: PUSH
55473: LD_INT 4
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: LIST
55484: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55485: LD_ADDR_VAR 0 26
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: LD_INT 3
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 1
55502: PUSH
55503: LD_INT 4
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 1
55512: NEG
55513: PUSH
55514: LD_INT 3
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: LIST
55525: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55526: LD_ADDR_VAR 0 27
55530: PUSH
55531: LD_INT 3
55533: NEG
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 3
55544: NEG
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 4
55555: NEG
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: LIST
55569: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55570: LD_ADDR_VAR 0 28
55574: PUSH
55575: LD_INT 3
55577: NEG
55578: PUSH
55579: LD_INT 3
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 3
55589: NEG
55590: PUSH
55591: LD_INT 4
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 4
55601: NEG
55602: PUSH
55603: LD_INT 3
55605: NEG
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: LIST
55615: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55616: LD_ADDR_VAR 0 29
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: LD_INT 3
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: LD_INT 3
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: LD_INT 2
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 1
55657: NEG
55658: PUSH
55659: LD_INT 4
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: LD_INT 4
55672: NEG
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 1
55680: PUSH
55681: LD_INT 3
55683: NEG
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: NEG
55692: PUSH
55693: LD_INT 5
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: LD_INT 5
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: PUSH
55715: LD_INT 4
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 1
55725: NEG
55726: PUSH
55727: LD_INT 6
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: LD_INT 6
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: LD_INT 5
55751: NEG
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55771: LD_ADDR_VAR 0 30
55775: PUSH
55776: LD_INT 2
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 3
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 3
55799: PUSH
55800: LD_INT 1
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 3
55809: PUSH
55810: LD_INT 1
55812: NEG
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 4
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 4
55830: PUSH
55831: LD_INT 1
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 4
55840: PUSH
55841: LD_INT 1
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 5
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 5
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 5
55871: PUSH
55872: LD_INT 1
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 6
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 6
55892: PUSH
55893: LD_INT 1
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55914: LD_ADDR_VAR 0 31
55918: PUSH
55919: LD_INT 3
55921: PUSH
55922: LD_INT 2
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 3
55931: PUSH
55932: LD_INT 3
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 2
55941: PUSH
55942: LD_INT 3
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 4
55951: PUSH
55952: LD_INT 3
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 4
55961: PUSH
55962: LD_INT 4
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 3
55971: PUSH
55972: LD_INT 4
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 5
55981: PUSH
55982: LD_INT 4
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 5
55991: PUSH
55992: LD_INT 5
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 4
56001: PUSH
56002: LD_INT 5
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 6
56011: PUSH
56012: LD_INT 5
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 6
56021: PUSH
56022: LD_INT 6
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 5
56031: PUSH
56032: LD_INT 6
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56053: LD_ADDR_VAR 0 32
56057: PUSH
56058: LD_INT 1
56060: PUSH
56061: LD_INT 3
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: LD_INT 3
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: LD_INT 2
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 1
56091: PUSH
56092: LD_INT 4
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 0
56101: PUSH
56102: LD_INT 4
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: NEG
56112: PUSH
56113: LD_INT 3
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: LD_INT 5
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: LD_INT 5
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 1
56142: NEG
56143: PUSH
56144: LD_INT 4
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 1
56153: PUSH
56154: LD_INT 6
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: LD_INT 6
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 1
56173: NEG
56174: PUSH
56175: LD_INT 5
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56196: LD_ADDR_VAR 0 33
56200: PUSH
56201: LD_INT 2
56203: NEG
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 3
56214: NEG
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 3
56225: NEG
56226: PUSH
56227: LD_INT 1
56229: NEG
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 3
56237: NEG
56238: PUSH
56239: LD_INT 1
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 4
56248: NEG
56249: PUSH
56250: LD_INT 0
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 4
56259: NEG
56260: PUSH
56261: LD_INT 1
56263: NEG
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 4
56271: NEG
56272: PUSH
56273: LD_INT 1
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 5
56282: NEG
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 5
56293: NEG
56294: PUSH
56295: LD_INT 1
56297: NEG
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 5
56305: NEG
56306: PUSH
56307: LD_INT 1
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 6
56316: NEG
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 6
56327: NEG
56328: PUSH
56329: LD_INT 1
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56351: LD_ADDR_VAR 0 34
56355: PUSH
56356: LD_INT 2
56358: NEG
56359: PUSH
56360: LD_INT 3
56362: NEG
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 3
56370: NEG
56371: PUSH
56372: LD_INT 2
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 3
56382: NEG
56383: PUSH
56384: LD_INT 3
56386: NEG
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 3
56394: NEG
56395: PUSH
56396: LD_INT 4
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 4
56406: NEG
56407: PUSH
56408: LD_INT 3
56410: NEG
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 4
56418: NEG
56419: PUSH
56420: LD_INT 4
56422: NEG
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 4
56430: NEG
56431: PUSH
56432: LD_INT 5
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 5
56442: NEG
56443: PUSH
56444: LD_INT 4
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 5
56454: NEG
56455: PUSH
56456: LD_INT 5
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 5
56466: NEG
56467: PUSH
56468: LD_INT 6
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 6
56478: NEG
56479: PUSH
56480: LD_INT 5
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 6
56490: NEG
56491: PUSH
56492: LD_INT 6
56494: NEG
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56514: LD_ADDR_VAR 0 41
56518: PUSH
56519: LD_INT 0
56521: PUSH
56522: LD_INT 2
56524: NEG
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: LD_INT 3
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: LD_INT 2
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: LIST
56557: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56558: LD_ADDR_VAR 0 42
56562: PUSH
56563: LD_INT 2
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 2
56575: PUSH
56576: LD_INT 1
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 3
56586: PUSH
56587: LD_INT 1
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: LIST
56598: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56599: LD_ADDR_VAR 0 43
56603: PUSH
56604: LD_INT 2
56606: PUSH
56607: LD_INT 2
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 3
56616: PUSH
56617: LD_INT 2
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 2
56626: PUSH
56627: LD_INT 3
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: LIST
56638: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56639: LD_ADDR_VAR 0 44
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: LD_INT 2
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 1
56656: PUSH
56657: LD_INT 3
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 1
56666: NEG
56667: PUSH
56668: LD_INT 2
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: LIST
56679: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56680: LD_ADDR_VAR 0 45
56684: PUSH
56685: LD_INT 2
56687: NEG
56688: PUSH
56689: LD_INT 0
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 2
56698: NEG
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 3
56709: NEG
56710: PUSH
56711: LD_INT 1
56713: NEG
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: LIST
56723: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56724: LD_ADDR_VAR 0 46
56728: PUSH
56729: LD_INT 2
56731: NEG
56732: PUSH
56733: LD_INT 2
56735: NEG
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 2
56743: NEG
56744: PUSH
56745: LD_INT 3
56747: NEG
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 3
56755: NEG
56756: PUSH
56757: LD_INT 2
56759: NEG
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: LIST
56769: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56770: LD_ADDR_VAR 0 47
56774: PUSH
56775: LD_INT 2
56777: NEG
56778: PUSH
56779: LD_INT 3
56781: NEG
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 1
56789: NEG
56790: PUSH
56791: LD_INT 3
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56803: LD_ADDR_VAR 0 48
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: LD_INT 2
56813: NEG
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 2
56821: PUSH
56822: LD_INT 1
56824: NEG
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56834: LD_ADDR_VAR 0 49
56838: PUSH
56839: LD_INT 3
56841: PUSH
56842: LD_INT 1
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 3
56851: PUSH
56852: LD_INT 2
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56863: LD_ADDR_VAR 0 50
56867: PUSH
56868: LD_INT 2
56870: PUSH
56871: LD_INT 3
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 1
56880: PUSH
56881: LD_INT 3
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56892: LD_ADDR_VAR 0 51
56896: PUSH
56897: LD_INT 1
56899: NEG
56900: PUSH
56901: LD_INT 2
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 2
56910: NEG
56911: PUSH
56912: LD_INT 1
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56923: LD_ADDR_VAR 0 52
56927: PUSH
56928: LD_INT 3
56930: NEG
56931: PUSH
56932: LD_INT 1
56934: NEG
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 3
56942: NEG
56943: PUSH
56944: LD_INT 2
56946: NEG
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56956: LD_ADDR_VAR 0 53
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: LD_INT 3
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: LD_INT 3
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 1
56986: PUSH
56987: LD_INT 2
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: LIST
56999: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57000: LD_ADDR_VAR 0 54
57004: PUSH
57005: LD_INT 2
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 3
57018: PUSH
57019: LD_INT 0
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 3
57028: PUSH
57029: LD_INT 1
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: LIST
57040: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57041: LD_ADDR_VAR 0 55
57045: PUSH
57046: LD_INT 3
57048: PUSH
57049: LD_INT 2
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 3
57058: PUSH
57059: LD_INT 3
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 2
57068: PUSH
57069: LD_INT 3
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: LIST
57080: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57081: LD_ADDR_VAR 0 56
57085: PUSH
57086: LD_INT 1
57088: PUSH
57089: LD_INT 3
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 0
57098: PUSH
57099: LD_INT 3
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 1
57108: NEG
57109: PUSH
57110: LD_INT 2
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: LIST
57121: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57122: LD_ADDR_VAR 0 57
57126: PUSH
57127: LD_INT 2
57129: NEG
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 3
57140: NEG
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 3
57151: NEG
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: LIST
57165: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57166: LD_ADDR_VAR 0 58
57170: PUSH
57171: LD_INT 2
57173: NEG
57174: PUSH
57175: LD_INT 3
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 3
57185: NEG
57186: PUSH
57187: LD_INT 2
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 3
57197: NEG
57198: PUSH
57199: LD_INT 3
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: LIST
57211: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57212: LD_ADDR_VAR 0 59
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: LD_INT 2
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: LD_INT 2
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: LD_INT 1
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: LIST
57255: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57256: LD_ADDR_VAR 0 60
57260: PUSH
57261: LD_INT 1
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 2
57274: PUSH
57275: LD_INT 0
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 2
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: LIST
57296: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57297: LD_ADDR_VAR 0 61
57301: PUSH
57302: LD_INT 2
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 2
57314: PUSH
57315: LD_INT 2
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 1
57324: PUSH
57325: LD_INT 2
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: LIST
57336: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57337: LD_ADDR_VAR 0 62
57341: PUSH
57342: LD_INT 1
57344: PUSH
57345: LD_INT 2
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: LD_INT 2
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 1
57364: NEG
57365: PUSH
57366: LD_INT 1
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: LIST
57377: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57378: LD_ADDR_VAR 0 63
57382: PUSH
57383: LD_INT 1
57385: NEG
57386: PUSH
57387: LD_INT 1
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 2
57396: NEG
57397: PUSH
57398: LD_INT 0
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 2
57407: NEG
57408: PUSH
57409: LD_INT 1
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: LIST
57421: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57422: LD_ADDR_VAR 0 64
57426: PUSH
57427: LD_INT 1
57429: NEG
57430: PUSH
57431: LD_INT 2
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 2
57441: NEG
57442: PUSH
57443: LD_INT 1
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 2
57453: NEG
57454: PUSH
57455: LD_INT 2
57457: NEG
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: LIST
57467: ST_TO_ADDR
// end ; 2 :
57468: GO 60734
57470: LD_INT 2
57472: DOUBLE
57473: EQUAL
57474: IFTRUE 57478
57476: GO 60733
57478: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57479: LD_ADDR_VAR 0 29
57483: PUSH
57484: LD_INT 4
57486: PUSH
57487: LD_INT 0
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 4
57496: PUSH
57497: LD_INT 1
57499: NEG
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 5
57507: PUSH
57508: LD_INT 0
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 5
57517: PUSH
57518: LD_INT 1
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 4
57527: PUSH
57528: LD_INT 1
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 3
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 3
57547: PUSH
57548: LD_INT 1
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 3
57558: PUSH
57559: LD_INT 2
57561: NEG
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 5
57569: PUSH
57570: LD_INT 2
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 3
57579: PUSH
57580: LD_INT 3
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 3
57589: PUSH
57590: LD_INT 2
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 4
57599: PUSH
57600: LD_INT 3
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 4
57609: PUSH
57610: LD_INT 4
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 3
57619: PUSH
57620: LD_INT 4
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 2
57629: PUSH
57630: LD_INT 3
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 2
57639: PUSH
57640: LD_INT 2
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 4
57649: PUSH
57650: LD_INT 2
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 2
57659: PUSH
57660: LD_INT 4
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: LD_INT 4
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 0
57679: PUSH
57680: LD_INT 3
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 1
57689: PUSH
57690: LD_INT 4
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 1
57699: PUSH
57700: LD_INT 5
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 0
57709: PUSH
57710: LD_INT 5
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 1
57719: NEG
57720: PUSH
57721: LD_INT 4
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: LD_INT 3
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 2
57741: PUSH
57742: LD_INT 5
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 2
57751: NEG
57752: PUSH
57753: LD_INT 3
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 3
57762: NEG
57763: PUSH
57764: LD_INT 0
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 3
57773: NEG
57774: PUSH
57775: LD_INT 1
57777: NEG
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 2
57785: NEG
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 2
57796: NEG
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 3
57807: NEG
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 4
57818: NEG
57819: PUSH
57820: LD_INT 0
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 4
57829: NEG
57830: PUSH
57831: LD_INT 1
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 4
57841: NEG
57842: PUSH
57843: LD_INT 2
57845: NEG
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 2
57853: NEG
57854: PUSH
57855: LD_INT 2
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 4
57864: NEG
57865: PUSH
57866: LD_INT 4
57868: NEG
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 4
57876: NEG
57877: PUSH
57878: LD_INT 5
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 3
57888: NEG
57889: PUSH
57890: LD_INT 4
57892: NEG
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 3
57900: NEG
57901: PUSH
57902: LD_INT 3
57904: NEG
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 4
57912: NEG
57913: PUSH
57914: LD_INT 3
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 5
57924: NEG
57925: PUSH
57926: LD_INT 4
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 5
57936: NEG
57937: PUSH
57938: LD_INT 5
57940: NEG
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 3
57948: NEG
57949: PUSH
57950: LD_INT 5
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 5
57960: NEG
57961: PUSH
57962: LD_INT 3
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58017: LD_ADDR_VAR 0 30
58021: PUSH
58022: LD_INT 4
58024: PUSH
58025: LD_INT 4
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 4
58034: PUSH
58035: LD_INT 3
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 5
58044: PUSH
58045: LD_INT 4
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 5
58054: PUSH
58055: LD_INT 5
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 4
58064: PUSH
58065: LD_INT 5
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 3
58074: PUSH
58075: LD_INT 4
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 3
58084: PUSH
58085: LD_INT 3
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 5
58094: PUSH
58095: LD_INT 3
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 3
58104: PUSH
58105: LD_INT 5
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 0
58114: PUSH
58115: LD_INT 3
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 0
58124: PUSH
58125: LD_INT 2
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 1
58134: PUSH
58135: LD_INT 3
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 1
58144: PUSH
58145: LD_INT 4
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: LD_INT 4
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 1
58164: NEG
58165: PUSH
58166: LD_INT 3
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 1
58175: NEG
58176: PUSH
58177: LD_INT 2
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 2
58186: PUSH
58187: LD_INT 4
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 2
58196: NEG
58197: PUSH
58198: LD_INT 2
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 4
58207: NEG
58208: PUSH
58209: LD_INT 0
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 4
58218: NEG
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 3
58230: NEG
58231: PUSH
58232: LD_INT 0
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 3
58241: NEG
58242: PUSH
58243: LD_INT 1
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 4
58252: NEG
58253: PUSH
58254: LD_INT 1
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 5
58263: NEG
58264: PUSH
58265: LD_INT 0
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 5
58274: NEG
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 5
58286: NEG
58287: PUSH
58288: LD_INT 2
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 3
58298: NEG
58299: PUSH
58300: LD_INT 2
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 3
58309: NEG
58310: PUSH
58311: LD_INT 3
58313: NEG
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 3
58321: NEG
58322: PUSH
58323: LD_INT 4
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 2
58333: NEG
58334: PUSH
58335: LD_INT 3
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 2
58345: NEG
58346: PUSH
58347: LD_INT 2
58349: NEG
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 3
58357: NEG
58358: PUSH
58359: LD_INT 2
58361: NEG
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 4
58369: NEG
58370: PUSH
58371: LD_INT 3
58373: NEG
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 4
58381: NEG
58382: PUSH
58383: LD_INT 4
58385: NEG
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 2
58393: NEG
58394: PUSH
58395: LD_INT 4
58397: NEG
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 4
58405: NEG
58406: PUSH
58407: LD_INT 2
58409: NEG
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 0
58417: PUSH
58418: LD_INT 4
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 0
58428: PUSH
58429: LD_INT 5
58431: NEG
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 1
58439: PUSH
58440: LD_INT 4
58442: NEG
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 1
58450: PUSH
58451: LD_INT 3
58453: NEG
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: LD_INT 3
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 1
58472: NEG
58473: PUSH
58474: LD_INT 4
58476: NEG
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: LD_INT 5
58488: NEG
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 2
58496: PUSH
58497: LD_INT 3
58499: NEG
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 2
58507: NEG
58508: PUSH
58509: LD_INT 5
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58564: LD_ADDR_VAR 0 31
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: LD_INT 4
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: LD_INT 3
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 1
58591: PUSH
58592: LD_INT 4
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 1
58601: PUSH
58602: LD_INT 5
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 0
58611: PUSH
58612: LD_INT 5
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 1
58621: NEG
58622: PUSH
58623: LD_INT 4
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 1
58632: NEG
58633: PUSH
58634: LD_INT 3
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 2
58643: PUSH
58644: LD_INT 5
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 2
58653: NEG
58654: PUSH
58655: LD_INT 3
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 3
58664: NEG
58665: PUSH
58666: LD_INT 0
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 3
58675: NEG
58676: PUSH
58677: LD_INT 1
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 2
58687: NEG
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 2
58698: NEG
58699: PUSH
58700: LD_INT 1
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 3
58709: NEG
58710: PUSH
58711: LD_INT 1
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 4
58720: NEG
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 4
58731: NEG
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 4
58743: NEG
58744: PUSH
58745: LD_INT 2
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 2
58755: NEG
58756: PUSH
58757: LD_INT 2
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 4
58766: NEG
58767: PUSH
58768: LD_INT 4
58770: NEG
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 4
58778: NEG
58779: PUSH
58780: LD_INT 5
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 3
58790: NEG
58791: PUSH
58792: LD_INT 4
58794: NEG
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 3
58802: NEG
58803: PUSH
58804: LD_INT 3
58806: NEG
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 4
58814: NEG
58815: PUSH
58816: LD_INT 3
58818: NEG
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 5
58826: NEG
58827: PUSH
58828: LD_INT 4
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 5
58838: NEG
58839: PUSH
58840: LD_INT 5
58842: NEG
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 3
58850: NEG
58851: PUSH
58852: LD_INT 5
58854: NEG
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 5
58862: NEG
58863: PUSH
58864: LD_INT 3
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 0
58874: PUSH
58875: LD_INT 3
58877: NEG
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 0
58885: PUSH
58886: LD_INT 4
58888: NEG
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 1
58896: PUSH
58897: LD_INT 3
58899: NEG
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 1
58907: PUSH
58908: LD_INT 2
58910: NEG
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 0
58918: PUSH
58919: LD_INT 2
58921: NEG
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 1
58929: NEG
58930: PUSH
58931: LD_INT 3
58933: NEG
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 1
58941: NEG
58942: PUSH
58943: LD_INT 4
58945: NEG
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 2
58953: PUSH
58954: LD_INT 2
58956: NEG
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 2
58964: NEG
58965: PUSH
58966: LD_INT 4
58968: NEG
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 4
58976: PUSH
58977: LD_INT 0
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 4
58986: PUSH
58987: LD_INT 1
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 5
58997: PUSH
58998: LD_INT 0
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 5
59007: PUSH
59008: LD_INT 1
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 4
59017: PUSH
59018: LD_INT 1
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 3
59027: PUSH
59028: LD_INT 0
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 3
59037: PUSH
59038: LD_INT 1
59040: NEG
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 3
59048: PUSH
59049: LD_INT 2
59051: NEG
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 5
59059: PUSH
59060: LD_INT 2
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59114: LD_ADDR_VAR 0 32
59118: PUSH
59119: LD_INT 4
59121: NEG
59122: PUSH
59123: LD_INT 0
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 4
59132: NEG
59133: PUSH
59134: LD_INT 1
59136: NEG
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 3
59144: NEG
59145: PUSH
59146: LD_INT 0
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 3
59155: NEG
59156: PUSH
59157: LD_INT 1
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 4
59166: NEG
59167: PUSH
59168: LD_INT 1
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 5
59177: NEG
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 5
59188: NEG
59189: PUSH
59190: LD_INT 1
59192: NEG
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 5
59200: NEG
59201: PUSH
59202: LD_INT 2
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 3
59212: NEG
59213: PUSH
59214: LD_INT 2
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 3
59223: NEG
59224: PUSH
59225: LD_INT 3
59227: NEG
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 3
59235: NEG
59236: PUSH
59237: LD_INT 4
59239: NEG
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 2
59247: NEG
59248: PUSH
59249: LD_INT 3
59251: NEG
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 2
59259: NEG
59260: PUSH
59261: LD_INT 2
59263: NEG
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 3
59271: NEG
59272: PUSH
59273: LD_INT 2
59275: NEG
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 4
59283: NEG
59284: PUSH
59285: LD_INT 3
59287: NEG
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 4
59295: NEG
59296: PUSH
59297: LD_INT 4
59299: NEG
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 2
59307: NEG
59308: PUSH
59309: LD_INT 4
59311: NEG
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 4
59319: NEG
59320: PUSH
59321: LD_INT 2
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 0
59331: PUSH
59332: LD_INT 4
59334: NEG
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 0
59342: PUSH
59343: LD_INT 5
59345: NEG
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 1
59353: PUSH
59354: LD_INT 4
59356: NEG
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 1
59364: PUSH
59365: LD_INT 3
59367: NEG
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: LD_INT 3
59378: NEG
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 1
59386: NEG
59387: PUSH
59388: LD_INT 4
59390: NEG
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 1
59398: NEG
59399: PUSH
59400: LD_INT 5
59402: NEG
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 2
59410: PUSH
59411: LD_INT 3
59413: NEG
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 2
59421: NEG
59422: PUSH
59423: LD_INT 5
59425: NEG
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 3
59433: PUSH
59434: LD_INT 0
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 3
59443: PUSH
59444: LD_INT 1
59446: NEG
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 4
59454: PUSH
59455: LD_INT 0
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 4
59464: PUSH
59465: LD_INT 1
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 3
59474: PUSH
59475: LD_INT 1
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 2
59484: PUSH
59485: LD_INT 0
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 2
59494: PUSH
59495: LD_INT 1
59497: NEG
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 2
59505: PUSH
59506: LD_INT 2
59508: NEG
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 4
59516: PUSH
59517: LD_INT 2
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 4
59526: PUSH
59527: LD_INT 4
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 4
59536: PUSH
59537: LD_INT 3
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 5
59546: PUSH
59547: LD_INT 4
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 5
59556: PUSH
59557: LD_INT 5
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 4
59566: PUSH
59567: LD_INT 5
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 3
59576: PUSH
59577: LD_INT 4
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 3
59586: PUSH
59587: LD_INT 3
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 5
59596: PUSH
59597: LD_INT 3
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 3
59606: PUSH
59607: LD_INT 5
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59661: LD_ADDR_VAR 0 33
59665: PUSH
59666: LD_INT 4
59668: NEG
59669: PUSH
59670: LD_INT 4
59672: NEG
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 4
59680: NEG
59681: PUSH
59682: LD_INT 5
59684: NEG
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 3
59692: NEG
59693: PUSH
59694: LD_INT 4
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 3
59704: NEG
59705: PUSH
59706: LD_INT 3
59708: NEG
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 4
59716: NEG
59717: PUSH
59718: LD_INT 3
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 5
59728: NEG
59729: PUSH
59730: LD_INT 4
59732: NEG
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 5
59740: NEG
59741: PUSH
59742: LD_INT 5
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 3
59752: NEG
59753: PUSH
59754: LD_INT 5
59756: NEG
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 5
59764: NEG
59765: PUSH
59766: LD_INT 3
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: LD_INT 3
59779: NEG
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 0
59787: PUSH
59788: LD_INT 4
59790: NEG
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: LD_INT 3
59801: NEG
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 1
59809: PUSH
59810: LD_INT 2
59812: NEG
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 0
59820: PUSH
59821: LD_INT 2
59823: NEG
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 1
59831: NEG
59832: PUSH
59833: LD_INT 3
59835: NEG
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 1
59843: NEG
59844: PUSH
59845: LD_INT 4
59847: NEG
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 2
59855: PUSH
59856: LD_INT 2
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 2
59866: NEG
59867: PUSH
59868: LD_INT 4
59870: NEG
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 4
59878: PUSH
59879: LD_INT 0
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 4
59888: PUSH
59889: LD_INT 1
59891: NEG
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 5
59899: PUSH
59900: LD_INT 0
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 5
59909: PUSH
59910: LD_INT 1
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 4
59919: PUSH
59920: LD_INT 1
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 3
59929: PUSH
59930: LD_INT 0
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 3
59939: PUSH
59940: LD_INT 1
59942: NEG
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 3
59950: PUSH
59951: LD_INT 2
59953: NEG
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 5
59961: PUSH
59962: LD_INT 2
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 3
59971: PUSH
59972: LD_INT 3
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 3
59981: PUSH
59982: LD_INT 2
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 4
59991: PUSH
59992: LD_INT 3
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 4
60001: PUSH
60002: LD_INT 4
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 3
60011: PUSH
60012: LD_INT 4
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 2
60021: PUSH
60022: LD_INT 3
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 2
60031: PUSH
60032: LD_INT 2
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 4
60041: PUSH
60042: LD_INT 2
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 2
60051: PUSH
60052: LD_INT 4
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 0
60061: PUSH
60062: LD_INT 4
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 0
60071: PUSH
60072: LD_INT 3
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 1
60081: PUSH
60082: LD_INT 4
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 1
60091: PUSH
60092: LD_INT 5
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 0
60101: PUSH
60102: LD_INT 5
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 1
60111: NEG
60112: PUSH
60113: LD_INT 4
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 1
60122: NEG
60123: PUSH
60124: LD_INT 3
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 2
60133: PUSH
60134: LD_INT 5
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 2
60143: NEG
60144: PUSH
60145: LD_INT 3
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60199: LD_ADDR_VAR 0 34
60203: PUSH
60204: LD_INT 0
60206: PUSH
60207: LD_INT 4
60209: NEG
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 0
60217: PUSH
60218: LD_INT 5
60220: NEG
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 1
60228: PUSH
60229: LD_INT 4
60231: NEG
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 1
60239: PUSH
60240: LD_INT 3
60242: NEG
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 0
60250: PUSH
60251: LD_INT 3
60253: NEG
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 1
60261: NEG
60262: PUSH
60263: LD_INT 4
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 1
60273: NEG
60274: PUSH
60275: LD_INT 5
60277: NEG
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 2
60285: PUSH
60286: LD_INT 3
60288: NEG
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 2
60296: NEG
60297: PUSH
60298: LD_INT 5
60300: NEG
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 3
60308: PUSH
60309: LD_INT 0
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 3
60318: PUSH
60319: LD_INT 1
60321: NEG
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 4
60329: PUSH
60330: LD_INT 0
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 4
60339: PUSH
60340: LD_INT 1
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 3
60349: PUSH
60350: LD_INT 1
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 2
60359: PUSH
60360: LD_INT 0
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 2
60369: PUSH
60370: LD_INT 1
60372: NEG
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 2
60380: PUSH
60381: LD_INT 2
60383: NEG
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 4
60391: PUSH
60392: LD_INT 2
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 4
60401: PUSH
60402: LD_INT 4
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 4
60411: PUSH
60412: LD_INT 3
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 5
60421: PUSH
60422: LD_INT 4
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 5
60431: PUSH
60432: LD_INT 5
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 4
60441: PUSH
60442: LD_INT 5
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 3
60451: PUSH
60452: LD_INT 4
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 3
60461: PUSH
60462: LD_INT 3
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 5
60471: PUSH
60472: LD_INT 3
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 3
60481: PUSH
60482: LD_INT 5
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 0
60491: PUSH
60492: LD_INT 3
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 0
60501: PUSH
60502: LD_INT 2
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: PUSH
60512: LD_INT 3
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 1
60521: PUSH
60522: LD_INT 4
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: LD_INT 4
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 1
60541: NEG
60542: PUSH
60543: LD_INT 3
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 1
60552: NEG
60553: PUSH
60554: LD_INT 2
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 2
60563: PUSH
60564: LD_INT 4
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 2
60573: NEG
60574: PUSH
60575: LD_INT 2
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 4
60584: NEG
60585: PUSH
60586: LD_INT 0
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 4
60595: NEG
60596: PUSH
60597: LD_INT 1
60599: NEG
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 3
60607: NEG
60608: PUSH
60609: LD_INT 0
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 3
60618: NEG
60619: PUSH
60620: LD_INT 1
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 4
60629: NEG
60630: PUSH
60631: LD_INT 1
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 5
60640: NEG
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 5
60651: NEG
60652: PUSH
60653: LD_INT 1
60655: NEG
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 5
60663: NEG
60664: PUSH
60665: LD_INT 2
60667: NEG
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 3
60675: NEG
60676: PUSH
60677: LD_INT 2
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: ST_TO_ADDR
// end ; end ;
60731: GO 60734
60733: POP
// case btype of b_depot , b_warehouse :
60734: LD_VAR 0 1
60738: PUSH
60739: LD_INT 0
60741: DOUBLE
60742: EQUAL
60743: IFTRUE 60753
60745: LD_INT 1
60747: DOUBLE
60748: EQUAL
60749: IFTRUE 60753
60751: GO 60954
60753: POP
// case nation of nation_american :
60754: LD_VAR 0 5
60758: PUSH
60759: LD_INT 1
60761: DOUBLE
60762: EQUAL
60763: IFTRUE 60767
60765: GO 60823
60767: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60768: LD_ADDR_VAR 0 9
60772: PUSH
60773: LD_VAR 0 11
60777: PUSH
60778: LD_VAR 0 12
60782: PUSH
60783: LD_VAR 0 13
60787: PUSH
60788: LD_VAR 0 14
60792: PUSH
60793: LD_VAR 0 15
60797: PUSH
60798: LD_VAR 0 16
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: PUSH
60811: LD_VAR 0 4
60815: PUSH
60816: LD_INT 1
60818: PLUS
60819: ARRAY
60820: ST_TO_ADDR
60821: GO 60952
60823: LD_INT 2
60825: DOUBLE
60826: EQUAL
60827: IFTRUE 60831
60829: GO 60887
60831: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60832: LD_ADDR_VAR 0 9
60836: PUSH
60837: LD_VAR 0 17
60841: PUSH
60842: LD_VAR 0 18
60846: PUSH
60847: LD_VAR 0 19
60851: PUSH
60852: LD_VAR 0 20
60856: PUSH
60857: LD_VAR 0 21
60861: PUSH
60862: LD_VAR 0 22
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: PUSH
60875: LD_VAR 0 4
60879: PUSH
60880: LD_INT 1
60882: PLUS
60883: ARRAY
60884: ST_TO_ADDR
60885: GO 60952
60887: LD_INT 3
60889: DOUBLE
60890: EQUAL
60891: IFTRUE 60895
60893: GO 60951
60895: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60896: LD_ADDR_VAR 0 9
60900: PUSH
60901: LD_VAR 0 23
60905: PUSH
60906: LD_VAR 0 24
60910: PUSH
60911: LD_VAR 0 25
60915: PUSH
60916: LD_VAR 0 26
60920: PUSH
60921: LD_VAR 0 27
60925: PUSH
60926: LD_VAR 0 28
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: PUSH
60939: LD_VAR 0 4
60943: PUSH
60944: LD_INT 1
60946: PLUS
60947: ARRAY
60948: ST_TO_ADDR
60949: GO 60952
60951: POP
60952: GO 61507
60954: LD_INT 2
60956: DOUBLE
60957: EQUAL
60958: IFTRUE 60968
60960: LD_INT 3
60962: DOUBLE
60963: EQUAL
60964: IFTRUE 60968
60966: GO 61024
60968: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60969: LD_ADDR_VAR 0 9
60973: PUSH
60974: LD_VAR 0 29
60978: PUSH
60979: LD_VAR 0 30
60983: PUSH
60984: LD_VAR 0 31
60988: PUSH
60989: LD_VAR 0 32
60993: PUSH
60994: LD_VAR 0 33
60998: PUSH
60999: LD_VAR 0 34
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: PUSH
61012: LD_VAR 0 4
61016: PUSH
61017: LD_INT 1
61019: PLUS
61020: ARRAY
61021: ST_TO_ADDR
61022: GO 61507
61024: LD_INT 16
61026: DOUBLE
61027: EQUAL
61028: IFTRUE 61086
61030: LD_INT 17
61032: DOUBLE
61033: EQUAL
61034: IFTRUE 61086
61036: LD_INT 18
61038: DOUBLE
61039: EQUAL
61040: IFTRUE 61086
61042: LD_INT 19
61044: DOUBLE
61045: EQUAL
61046: IFTRUE 61086
61048: LD_INT 22
61050: DOUBLE
61051: EQUAL
61052: IFTRUE 61086
61054: LD_INT 20
61056: DOUBLE
61057: EQUAL
61058: IFTRUE 61086
61060: LD_INT 21
61062: DOUBLE
61063: EQUAL
61064: IFTRUE 61086
61066: LD_INT 23
61068: DOUBLE
61069: EQUAL
61070: IFTRUE 61086
61072: LD_INT 24
61074: DOUBLE
61075: EQUAL
61076: IFTRUE 61086
61078: LD_INT 25
61080: DOUBLE
61081: EQUAL
61082: IFTRUE 61086
61084: GO 61142
61086: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61087: LD_ADDR_VAR 0 9
61091: PUSH
61092: LD_VAR 0 35
61096: PUSH
61097: LD_VAR 0 36
61101: PUSH
61102: LD_VAR 0 37
61106: PUSH
61107: LD_VAR 0 38
61111: PUSH
61112: LD_VAR 0 39
61116: PUSH
61117: LD_VAR 0 40
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: PUSH
61130: LD_VAR 0 4
61134: PUSH
61135: LD_INT 1
61137: PLUS
61138: ARRAY
61139: ST_TO_ADDR
61140: GO 61507
61142: LD_INT 6
61144: DOUBLE
61145: EQUAL
61146: IFTRUE 61198
61148: LD_INT 7
61150: DOUBLE
61151: EQUAL
61152: IFTRUE 61198
61154: LD_INT 8
61156: DOUBLE
61157: EQUAL
61158: IFTRUE 61198
61160: LD_INT 13
61162: DOUBLE
61163: EQUAL
61164: IFTRUE 61198
61166: LD_INT 12
61168: DOUBLE
61169: EQUAL
61170: IFTRUE 61198
61172: LD_INT 15
61174: DOUBLE
61175: EQUAL
61176: IFTRUE 61198
61178: LD_INT 11
61180: DOUBLE
61181: EQUAL
61182: IFTRUE 61198
61184: LD_INT 14
61186: DOUBLE
61187: EQUAL
61188: IFTRUE 61198
61190: LD_INT 10
61192: DOUBLE
61193: EQUAL
61194: IFTRUE 61198
61196: GO 61254
61198: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61199: LD_ADDR_VAR 0 9
61203: PUSH
61204: LD_VAR 0 41
61208: PUSH
61209: LD_VAR 0 42
61213: PUSH
61214: LD_VAR 0 43
61218: PUSH
61219: LD_VAR 0 44
61223: PUSH
61224: LD_VAR 0 45
61228: PUSH
61229: LD_VAR 0 46
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: PUSH
61242: LD_VAR 0 4
61246: PUSH
61247: LD_INT 1
61249: PLUS
61250: ARRAY
61251: ST_TO_ADDR
61252: GO 61507
61254: LD_INT 36
61256: DOUBLE
61257: EQUAL
61258: IFTRUE 61262
61260: GO 61318
61262: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61263: LD_ADDR_VAR 0 9
61267: PUSH
61268: LD_VAR 0 47
61272: PUSH
61273: LD_VAR 0 48
61277: PUSH
61278: LD_VAR 0 49
61282: PUSH
61283: LD_VAR 0 50
61287: PUSH
61288: LD_VAR 0 51
61292: PUSH
61293: LD_VAR 0 52
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: PUSH
61306: LD_VAR 0 4
61310: PUSH
61311: LD_INT 1
61313: PLUS
61314: ARRAY
61315: ST_TO_ADDR
61316: GO 61507
61318: LD_INT 4
61320: DOUBLE
61321: EQUAL
61322: IFTRUE 61344
61324: LD_INT 5
61326: DOUBLE
61327: EQUAL
61328: IFTRUE 61344
61330: LD_INT 34
61332: DOUBLE
61333: EQUAL
61334: IFTRUE 61344
61336: LD_INT 37
61338: DOUBLE
61339: EQUAL
61340: IFTRUE 61344
61342: GO 61400
61344: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61345: LD_ADDR_VAR 0 9
61349: PUSH
61350: LD_VAR 0 53
61354: PUSH
61355: LD_VAR 0 54
61359: PUSH
61360: LD_VAR 0 55
61364: PUSH
61365: LD_VAR 0 56
61369: PUSH
61370: LD_VAR 0 57
61374: PUSH
61375: LD_VAR 0 58
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: PUSH
61388: LD_VAR 0 4
61392: PUSH
61393: LD_INT 1
61395: PLUS
61396: ARRAY
61397: ST_TO_ADDR
61398: GO 61507
61400: LD_INT 31
61402: DOUBLE
61403: EQUAL
61404: IFTRUE 61450
61406: LD_INT 32
61408: DOUBLE
61409: EQUAL
61410: IFTRUE 61450
61412: LD_INT 33
61414: DOUBLE
61415: EQUAL
61416: IFTRUE 61450
61418: LD_INT 27
61420: DOUBLE
61421: EQUAL
61422: IFTRUE 61450
61424: LD_INT 26
61426: DOUBLE
61427: EQUAL
61428: IFTRUE 61450
61430: LD_INT 28
61432: DOUBLE
61433: EQUAL
61434: IFTRUE 61450
61436: LD_INT 29
61438: DOUBLE
61439: EQUAL
61440: IFTRUE 61450
61442: LD_INT 30
61444: DOUBLE
61445: EQUAL
61446: IFTRUE 61450
61448: GO 61506
61450: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61451: LD_ADDR_VAR 0 9
61455: PUSH
61456: LD_VAR 0 59
61460: PUSH
61461: LD_VAR 0 60
61465: PUSH
61466: LD_VAR 0 61
61470: PUSH
61471: LD_VAR 0 62
61475: PUSH
61476: LD_VAR 0 63
61480: PUSH
61481: LD_VAR 0 64
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: PUSH
61494: LD_VAR 0 4
61498: PUSH
61499: LD_INT 1
61501: PLUS
61502: ARRAY
61503: ST_TO_ADDR
61504: GO 61507
61506: POP
// temp_list2 = [ ] ;
61507: LD_ADDR_VAR 0 10
61511: PUSH
61512: EMPTY
61513: ST_TO_ADDR
// for i in temp_list do
61514: LD_ADDR_VAR 0 8
61518: PUSH
61519: LD_VAR 0 9
61523: PUSH
61524: FOR_IN
61525: IFFALSE 61577
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61527: LD_ADDR_VAR 0 10
61531: PUSH
61532: LD_VAR 0 10
61536: PUSH
61537: LD_VAR 0 8
61541: PUSH
61542: LD_INT 1
61544: ARRAY
61545: PUSH
61546: LD_VAR 0 2
61550: PLUS
61551: PUSH
61552: LD_VAR 0 8
61556: PUSH
61557: LD_INT 2
61559: ARRAY
61560: PUSH
61561: LD_VAR 0 3
61565: PLUS
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: EMPTY
61572: LIST
61573: ADD
61574: ST_TO_ADDR
61575: GO 61524
61577: POP
61578: POP
// result = temp_list2 ;
61579: LD_ADDR_VAR 0 7
61583: PUSH
61584: LD_VAR 0 10
61588: ST_TO_ADDR
// end ;
61589: LD_VAR 0 7
61593: RET
// export function EnemyInRange ( unit , dist ) ; begin
61594: LD_INT 0
61596: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61597: LD_ADDR_VAR 0 3
61601: PUSH
61602: LD_VAR 0 1
61606: PPUSH
61607: CALL_OW 255
61611: PPUSH
61612: LD_VAR 0 1
61616: PPUSH
61617: CALL_OW 250
61621: PPUSH
61622: LD_VAR 0 1
61626: PPUSH
61627: CALL_OW 251
61631: PPUSH
61632: LD_VAR 0 2
61636: PPUSH
61637: CALL 34996 0 4
61641: PUSH
61642: LD_INT 4
61644: ARRAY
61645: ST_TO_ADDR
// end ;
61646: LD_VAR 0 3
61650: RET
// export function PlayerSeeMe ( unit ) ; begin
61651: LD_INT 0
61653: PPUSH
// result := See ( your_side , unit ) ;
61654: LD_ADDR_VAR 0 2
61658: PUSH
61659: LD_OWVAR 2
61663: PPUSH
61664: LD_VAR 0 1
61668: PPUSH
61669: CALL_OW 292
61673: ST_TO_ADDR
// end ;
61674: LD_VAR 0 2
61678: RET
// export function ReverseDir ( unit ) ; begin
61679: LD_INT 0
61681: PPUSH
// if not unit then
61682: LD_VAR 0 1
61686: NOT
61687: IFFALSE 61691
// exit ;
61689: GO 61714
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61691: LD_ADDR_VAR 0 2
61695: PUSH
61696: LD_VAR 0 1
61700: PPUSH
61701: CALL_OW 254
61705: PUSH
61706: LD_INT 3
61708: PLUS
61709: PUSH
61710: LD_INT 6
61712: MOD
61713: ST_TO_ADDR
// end ;
61714: LD_VAR 0 2
61718: RET
// export function ReverseArray ( array ) ; var i ; begin
61719: LD_INT 0
61721: PPUSH
61722: PPUSH
// if not array then
61723: LD_VAR 0 1
61727: NOT
61728: IFFALSE 61732
// exit ;
61730: GO 61787
// result := [ ] ;
61732: LD_ADDR_VAR 0 2
61736: PUSH
61737: EMPTY
61738: ST_TO_ADDR
// for i := array downto 1 do
61739: LD_ADDR_VAR 0 3
61743: PUSH
61744: DOUBLE
61745: LD_VAR 0 1
61749: INC
61750: ST_TO_ADDR
61751: LD_INT 1
61753: PUSH
61754: FOR_DOWNTO
61755: IFFALSE 61785
// result := Join ( result , array [ i ] ) ;
61757: LD_ADDR_VAR 0 2
61761: PUSH
61762: LD_VAR 0 2
61766: PPUSH
61767: LD_VAR 0 1
61771: PUSH
61772: LD_VAR 0 3
61776: ARRAY
61777: PPUSH
61778: CALL 66403 0 2
61782: ST_TO_ADDR
61783: GO 61754
61785: POP
61786: POP
// end ;
61787: LD_VAR 0 2
61791: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61792: LD_INT 0
61794: PPUSH
61795: PPUSH
61796: PPUSH
61797: PPUSH
61798: PPUSH
61799: PPUSH
// if not unit or not hexes then
61800: LD_VAR 0 1
61804: NOT
61805: PUSH
61806: LD_VAR 0 2
61810: NOT
61811: OR
61812: IFFALSE 61816
// exit ;
61814: GO 61939
// dist := 9999 ;
61816: LD_ADDR_VAR 0 5
61820: PUSH
61821: LD_INT 9999
61823: ST_TO_ADDR
// for i = 1 to hexes do
61824: LD_ADDR_VAR 0 4
61828: PUSH
61829: DOUBLE
61830: LD_INT 1
61832: DEC
61833: ST_TO_ADDR
61834: LD_VAR 0 2
61838: PUSH
61839: FOR_TO
61840: IFFALSE 61927
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61842: LD_ADDR_VAR 0 6
61846: PUSH
61847: LD_VAR 0 1
61851: PPUSH
61852: LD_VAR 0 2
61856: PUSH
61857: LD_VAR 0 4
61861: ARRAY
61862: PUSH
61863: LD_INT 1
61865: ARRAY
61866: PPUSH
61867: LD_VAR 0 2
61871: PUSH
61872: LD_VAR 0 4
61876: ARRAY
61877: PUSH
61878: LD_INT 2
61880: ARRAY
61881: PPUSH
61882: CALL_OW 297
61886: ST_TO_ADDR
// if tdist < dist then
61887: LD_VAR 0 6
61891: PUSH
61892: LD_VAR 0 5
61896: LESS
61897: IFFALSE 61925
// begin hex := hexes [ i ] ;
61899: LD_ADDR_VAR 0 8
61903: PUSH
61904: LD_VAR 0 2
61908: PUSH
61909: LD_VAR 0 4
61913: ARRAY
61914: ST_TO_ADDR
// dist := tdist ;
61915: LD_ADDR_VAR 0 5
61919: PUSH
61920: LD_VAR 0 6
61924: ST_TO_ADDR
// end ; end ;
61925: GO 61839
61927: POP
61928: POP
// result := hex ;
61929: LD_ADDR_VAR 0 3
61933: PUSH
61934: LD_VAR 0 8
61938: ST_TO_ADDR
// end ;
61939: LD_VAR 0 3
61943: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61944: LD_INT 0
61946: PPUSH
61947: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61948: LD_VAR 0 1
61952: NOT
61953: PUSH
61954: LD_VAR 0 1
61958: PUSH
61959: LD_INT 21
61961: PUSH
61962: LD_INT 2
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 23
61971: PUSH
61972: LD_INT 2
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PPUSH
61983: CALL_OW 69
61987: IN
61988: NOT
61989: OR
61990: IFFALSE 61994
// exit ;
61992: GO 62041
// for i = 1 to 3 do
61994: LD_ADDR_VAR 0 3
61998: PUSH
61999: DOUBLE
62000: LD_INT 1
62002: DEC
62003: ST_TO_ADDR
62004: LD_INT 3
62006: PUSH
62007: FOR_TO
62008: IFFALSE 62039
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62010: LD_VAR 0 1
62014: PPUSH
62015: CALL_OW 250
62019: PPUSH
62020: LD_VAR 0 1
62024: PPUSH
62025: CALL_OW 251
62029: PPUSH
62030: LD_INT 1
62032: PPUSH
62033: CALL_OW 453
62037: GO 62007
62039: POP
62040: POP
// end ;
62041: LD_VAR 0 2
62045: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62046: LD_INT 0
62048: PPUSH
62049: PPUSH
62050: PPUSH
62051: PPUSH
62052: PPUSH
62053: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62054: LD_VAR 0 1
62058: NOT
62059: PUSH
62060: LD_VAR 0 2
62064: NOT
62065: OR
62066: PUSH
62067: LD_VAR 0 1
62071: PPUSH
62072: CALL_OW 314
62076: OR
62077: IFFALSE 62081
// exit ;
62079: GO 62522
// x := GetX ( enemy_unit ) ;
62081: LD_ADDR_VAR 0 7
62085: PUSH
62086: LD_VAR 0 2
62090: PPUSH
62091: CALL_OW 250
62095: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62096: LD_ADDR_VAR 0 8
62100: PUSH
62101: LD_VAR 0 2
62105: PPUSH
62106: CALL_OW 251
62110: ST_TO_ADDR
// if not x or not y then
62111: LD_VAR 0 7
62115: NOT
62116: PUSH
62117: LD_VAR 0 8
62121: NOT
62122: OR
62123: IFFALSE 62127
// exit ;
62125: GO 62522
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62127: LD_ADDR_VAR 0 6
62131: PUSH
62132: LD_VAR 0 7
62136: PPUSH
62137: LD_INT 0
62139: PPUSH
62140: LD_INT 4
62142: PPUSH
62143: CALL_OW 272
62147: PUSH
62148: LD_VAR 0 8
62152: PPUSH
62153: LD_INT 0
62155: PPUSH
62156: LD_INT 4
62158: PPUSH
62159: CALL_OW 273
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_VAR 0 7
62172: PPUSH
62173: LD_INT 1
62175: PPUSH
62176: LD_INT 4
62178: PPUSH
62179: CALL_OW 272
62183: PUSH
62184: LD_VAR 0 8
62188: PPUSH
62189: LD_INT 1
62191: PPUSH
62192: LD_INT 4
62194: PPUSH
62195: CALL_OW 273
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_VAR 0 7
62208: PPUSH
62209: LD_INT 2
62211: PPUSH
62212: LD_INT 4
62214: PPUSH
62215: CALL_OW 272
62219: PUSH
62220: LD_VAR 0 8
62224: PPUSH
62225: LD_INT 2
62227: PPUSH
62228: LD_INT 4
62230: PPUSH
62231: CALL_OW 273
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_VAR 0 7
62244: PPUSH
62245: LD_INT 3
62247: PPUSH
62248: LD_INT 4
62250: PPUSH
62251: CALL_OW 272
62255: PUSH
62256: LD_VAR 0 8
62260: PPUSH
62261: LD_INT 3
62263: PPUSH
62264: LD_INT 4
62266: PPUSH
62267: CALL_OW 273
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_VAR 0 7
62280: PPUSH
62281: LD_INT 4
62283: PPUSH
62284: LD_INT 4
62286: PPUSH
62287: CALL_OW 272
62291: PUSH
62292: LD_VAR 0 8
62296: PPUSH
62297: LD_INT 4
62299: PPUSH
62300: LD_INT 4
62302: PPUSH
62303: CALL_OW 273
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_VAR 0 7
62316: PPUSH
62317: LD_INT 5
62319: PPUSH
62320: LD_INT 4
62322: PPUSH
62323: CALL_OW 272
62327: PUSH
62328: LD_VAR 0 8
62332: PPUSH
62333: LD_INT 5
62335: PPUSH
62336: LD_INT 4
62338: PPUSH
62339: CALL_OW 273
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: ST_TO_ADDR
// for i = tmp downto 1 do
62356: LD_ADDR_VAR 0 4
62360: PUSH
62361: DOUBLE
62362: LD_VAR 0 6
62366: INC
62367: ST_TO_ADDR
62368: LD_INT 1
62370: PUSH
62371: FOR_DOWNTO
62372: IFFALSE 62473
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62374: LD_VAR 0 6
62378: PUSH
62379: LD_VAR 0 4
62383: ARRAY
62384: PUSH
62385: LD_INT 1
62387: ARRAY
62388: PPUSH
62389: LD_VAR 0 6
62393: PUSH
62394: LD_VAR 0 4
62398: ARRAY
62399: PUSH
62400: LD_INT 2
62402: ARRAY
62403: PPUSH
62404: CALL_OW 488
62408: NOT
62409: PUSH
62410: LD_VAR 0 6
62414: PUSH
62415: LD_VAR 0 4
62419: ARRAY
62420: PUSH
62421: LD_INT 1
62423: ARRAY
62424: PPUSH
62425: LD_VAR 0 6
62429: PUSH
62430: LD_VAR 0 4
62434: ARRAY
62435: PUSH
62436: LD_INT 2
62438: ARRAY
62439: PPUSH
62440: CALL_OW 428
62444: PUSH
62445: LD_INT 0
62447: NONEQUAL
62448: OR
62449: IFFALSE 62471
// tmp := Delete ( tmp , i ) ;
62451: LD_ADDR_VAR 0 6
62455: PUSH
62456: LD_VAR 0 6
62460: PPUSH
62461: LD_VAR 0 4
62465: PPUSH
62466: CALL_OW 3
62470: ST_TO_ADDR
62471: GO 62371
62473: POP
62474: POP
// j := GetClosestHex ( unit , tmp ) ;
62475: LD_ADDR_VAR 0 5
62479: PUSH
62480: LD_VAR 0 1
62484: PPUSH
62485: LD_VAR 0 6
62489: PPUSH
62490: CALL 61792 0 2
62494: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62495: LD_VAR 0 1
62499: PPUSH
62500: LD_VAR 0 5
62504: PUSH
62505: LD_INT 1
62507: ARRAY
62508: PPUSH
62509: LD_VAR 0 5
62513: PUSH
62514: LD_INT 2
62516: ARRAY
62517: PPUSH
62518: CALL_OW 111
// end ;
62522: LD_VAR 0 3
62526: RET
// export function PrepareApemanSoldier ( ) ; begin
62527: LD_INT 0
62529: PPUSH
// uc_nation := 0 ;
62530: LD_ADDR_OWVAR 21
62534: PUSH
62535: LD_INT 0
62537: ST_TO_ADDR
// hc_sex := sex_male ;
62538: LD_ADDR_OWVAR 27
62542: PUSH
62543: LD_INT 1
62545: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62546: LD_ADDR_OWVAR 28
62550: PUSH
62551: LD_INT 15
62553: ST_TO_ADDR
// hc_gallery :=  ;
62554: LD_ADDR_OWVAR 33
62558: PUSH
62559: LD_STRING 
62561: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62562: LD_ADDR_OWVAR 31
62566: PUSH
62567: LD_INT 0
62569: PPUSH
62570: LD_INT 3
62572: PPUSH
62573: CALL_OW 12
62577: PUSH
62578: LD_INT 0
62580: PPUSH
62581: LD_INT 3
62583: PPUSH
62584: CALL_OW 12
62588: PUSH
62589: LD_INT 0
62591: PUSH
62592: LD_INT 0
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: ST_TO_ADDR
// end ;
62601: LD_VAR 0 1
62605: RET
// export function PrepareApemanEngineer ( ) ; begin
62606: LD_INT 0
62608: PPUSH
// uc_nation := 0 ;
62609: LD_ADDR_OWVAR 21
62613: PUSH
62614: LD_INT 0
62616: ST_TO_ADDR
// hc_sex := sex_male ;
62617: LD_ADDR_OWVAR 27
62621: PUSH
62622: LD_INT 1
62624: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62625: LD_ADDR_OWVAR 28
62629: PUSH
62630: LD_INT 16
62632: ST_TO_ADDR
// hc_gallery :=  ;
62633: LD_ADDR_OWVAR 33
62637: PUSH
62638: LD_STRING 
62640: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62641: LD_ADDR_OWVAR 31
62645: PUSH
62646: LD_INT 0
62648: PPUSH
62649: LD_INT 3
62651: PPUSH
62652: CALL_OW 12
62656: PUSH
62657: LD_INT 0
62659: PPUSH
62660: LD_INT 3
62662: PPUSH
62663: CALL_OW 12
62667: PUSH
62668: LD_INT 0
62670: PUSH
62671: LD_INT 0
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: ST_TO_ADDR
// end ;
62680: LD_VAR 0 1
62684: RET
// export function PrepareApeman ( agressivity ) ; begin
62685: LD_INT 0
62687: PPUSH
// uc_side := 0 ;
62688: LD_ADDR_OWVAR 20
62692: PUSH
62693: LD_INT 0
62695: ST_TO_ADDR
// uc_nation := 0 ;
62696: LD_ADDR_OWVAR 21
62700: PUSH
62701: LD_INT 0
62703: ST_TO_ADDR
// hc_sex := sex_male ;
62704: LD_ADDR_OWVAR 27
62708: PUSH
62709: LD_INT 1
62711: ST_TO_ADDR
// hc_class := class_apeman ;
62712: LD_ADDR_OWVAR 28
62716: PUSH
62717: LD_INT 12
62719: ST_TO_ADDR
// hc_gallery :=  ;
62720: LD_ADDR_OWVAR 33
62724: PUSH
62725: LD_STRING 
62727: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62728: LD_ADDR_OWVAR 35
62732: PUSH
62733: LD_VAR 0 1
62737: NEG
62738: PPUSH
62739: LD_VAR 0 1
62743: PPUSH
62744: CALL_OW 12
62748: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62749: LD_ADDR_OWVAR 31
62753: PUSH
62754: LD_INT 0
62756: PPUSH
62757: LD_INT 3
62759: PPUSH
62760: CALL_OW 12
62764: PUSH
62765: LD_INT 0
62767: PPUSH
62768: LD_INT 3
62770: PPUSH
62771: CALL_OW 12
62775: PUSH
62776: LD_INT 0
62778: PUSH
62779: LD_INT 0
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: ST_TO_ADDR
// end ;
62788: LD_VAR 0 2
62792: RET
// export function PrepareTiger ( agressivity ) ; begin
62793: LD_INT 0
62795: PPUSH
// uc_side := 0 ;
62796: LD_ADDR_OWVAR 20
62800: PUSH
62801: LD_INT 0
62803: ST_TO_ADDR
// uc_nation := 0 ;
62804: LD_ADDR_OWVAR 21
62808: PUSH
62809: LD_INT 0
62811: ST_TO_ADDR
// hc_class := class_tiger ;
62812: LD_ADDR_OWVAR 28
62816: PUSH
62817: LD_INT 14
62819: ST_TO_ADDR
// hc_gallery :=  ;
62820: LD_ADDR_OWVAR 33
62824: PUSH
62825: LD_STRING 
62827: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62828: LD_ADDR_OWVAR 35
62832: PUSH
62833: LD_VAR 0 1
62837: NEG
62838: PPUSH
62839: LD_VAR 0 1
62843: PPUSH
62844: CALL_OW 12
62848: ST_TO_ADDR
// end ;
62849: LD_VAR 0 2
62853: RET
// export function PrepareEnchidna ( ) ; begin
62854: LD_INT 0
62856: PPUSH
// uc_side := 0 ;
62857: LD_ADDR_OWVAR 20
62861: PUSH
62862: LD_INT 0
62864: ST_TO_ADDR
// uc_nation := 0 ;
62865: LD_ADDR_OWVAR 21
62869: PUSH
62870: LD_INT 0
62872: ST_TO_ADDR
// hc_class := class_baggie ;
62873: LD_ADDR_OWVAR 28
62877: PUSH
62878: LD_INT 13
62880: ST_TO_ADDR
// hc_gallery :=  ;
62881: LD_ADDR_OWVAR 33
62885: PUSH
62886: LD_STRING 
62888: ST_TO_ADDR
// end ;
62889: LD_VAR 0 1
62893: RET
// export function PrepareFrog ( ) ; begin
62894: LD_INT 0
62896: PPUSH
// uc_side := 0 ;
62897: LD_ADDR_OWVAR 20
62901: PUSH
62902: LD_INT 0
62904: ST_TO_ADDR
// uc_nation := 0 ;
62905: LD_ADDR_OWVAR 21
62909: PUSH
62910: LD_INT 0
62912: ST_TO_ADDR
// hc_class := class_frog ;
62913: LD_ADDR_OWVAR 28
62917: PUSH
62918: LD_INT 19
62920: ST_TO_ADDR
// hc_gallery :=  ;
62921: LD_ADDR_OWVAR 33
62925: PUSH
62926: LD_STRING 
62928: ST_TO_ADDR
// end ;
62929: LD_VAR 0 1
62933: RET
// export function PrepareFish ( ) ; begin
62934: LD_INT 0
62936: PPUSH
// uc_side := 0 ;
62937: LD_ADDR_OWVAR 20
62941: PUSH
62942: LD_INT 0
62944: ST_TO_ADDR
// uc_nation := 0 ;
62945: LD_ADDR_OWVAR 21
62949: PUSH
62950: LD_INT 0
62952: ST_TO_ADDR
// hc_class := class_fish ;
62953: LD_ADDR_OWVAR 28
62957: PUSH
62958: LD_INT 20
62960: ST_TO_ADDR
// hc_gallery :=  ;
62961: LD_ADDR_OWVAR 33
62965: PUSH
62966: LD_STRING 
62968: ST_TO_ADDR
// end ;
62969: LD_VAR 0 1
62973: RET
// export function PrepareBird ( ) ; begin
62974: LD_INT 0
62976: PPUSH
// uc_side := 0 ;
62977: LD_ADDR_OWVAR 20
62981: PUSH
62982: LD_INT 0
62984: ST_TO_ADDR
// uc_nation := 0 ;
62985: LD_ADDR_OWVAR 21
62989: PUSH
62990: LD_INT 0
62992: ST_TO_ADDR
// hc_class := class_phororhacos ;
62993: LD_ADDR_OWVAR 28
62997: PUSH
62998: LD_INT 18
63000: ST_TO_ADDR
// hc_gallery :=  ;
63001: LD_ADDR_OWVAR 33
63005: PUSH
63006: LD_STRING 
63008: ST_TO_ADDR
// end ;
63009: LD_VAR 0 1
63013: RET
// export function PrepareHorse ( ) ; begin
63014: LD_INT 0
63016: PPUSH
// uc_side := 0 ;
63017: LD_ADDR_OWVAR 20
63021: PUSH
63022: LD_INT 0
63024: ST_TO_ADDR
// uc_nation := 0 ;
63025: LD_ADDR_OWVAR 21
63029: PUSH
63030: LD_INT 0
63032: ST_TO_ADDR
// hc_class := class_horse ;
63033: LD_ADDR_OWVAR 28
63037: PUSH
63038: LD_INT 21
63040: ST_TO_ADDR
// hc_gallery :=  ;
63041: LD_ADDR_OWVAR 33
63045: PUSH
63046: LD_STRING 
63048: ST_TO_ADDR
// end ;
63049: LD_VAR 0 1
63053: RET
// export function PrepareMastodont ( ) ; begin
63054: LD_INT 0
63056: PPUSH
// uc_side := 0 ;
63057: LD_ADDR_OWVAR 20
63061: PUSH
63062: LD_INT 0
63064: ST_TO_ADDR
// uc_nation := 0 ;
63065: LD_ADDR_OWVAR 21
63069: PUSH
63070: LD_INT 0
63072: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63073: LD_ADDR_OWVAR 37
63077: PUSH
63078: LD_INT 31
63080: ST_TO_ADDR
// vc_control := control_rider ;
63081: LD_ADDR_OWVAR 38
63085: PUSH
63086: LD_INT 4
63088: ST_TO_ADDR
// end ;
63089: LD_VAR 0 1
63093: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63094: LD_INT 0
63096: PPUSH
63097: PPUSH
63098: PPUSH
// uc_side = 0 ;
63099: LD_ADDR_OWVAR 20
63103: PUSH
63104: LD_INT 0
63106: ST_TO_ADDR
// uc_nation = 0 ;
63107: LD_ADDR_OWVAR 21
63111: PUSH
63112: LD_INT 0
63114: ST_TO_ADDR
// InitHc_All ( ) ;
63115: CALL_OW 584
// InitVc ;
63119: CALL_OW 20
// if mastodonts then
63123: LD_VAR 0 6
63127: IFFALSE 63194
// for i = 1 to mastodonts do
63129: LD_ADDR_VAR 0 11
63133: PUSH
63134: DOUBLE
63135: LD_INT 1
63137: DEC
63138: ST_TO_ADDR
63139: LD_VAR 0 6
63143: PUSH
63144: FOR_TO
63145: IFFALSE 63192
// begin vc_chassis := 31 ;
63147: LD_ADDR_OWVAR 37
63151: PUSH
63152: LD_INT 31
63154: ST_TO_ADDR
// vc_control := control_rider ;
63155: LD_ADDR_OWVAR 38
63159: PUSH
63160: LD_INT 4
63162: ST_TO_ADDR
// animal := CreateVehicle ;
63163: LD_ADDR_VAR 0 12
63167: PUSH
63168: CALL_OW 45
63172: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63173: LD_VAR 0 12
63177: PPUSH
63178: LD_VAR 0 8
63182: PPUSH
63183: LD_INT 0
63185: PPUSH
63186: CALL 65320 0 3
// end ;
63190: GO 63144
63192: POP
63193: POP
// if horses then
63194: LD_VAR 0 5
63198: IFFALSE 63265
// for i = 1 to horses do
63200: LD_ADDR_VAR 0 11
63204: PUSH
63205: DOUBLE
63206: LD_INT 1
63208: DEC
63209: ST_TO_ADDR
63210: LD_VAR 0 5
63214: PUSH
63215: FOR_TO
63216: IFFALSE 63263
// begin hc_class := 21 ;
63218: LD_ADDR_OWVAR 28
63222: PUSH
63223: LD_INT 21
63225: ST_TO_ADDR
// hc_gallery :=  ;
63226: LD_ADDR_OWVAR 33
63230: PUSH
63231: LD_STRING 
63233: ST_TO_ADDR
// animal := CreateHuman ;
63234: LD_ADDR_VAR 0 12
63238: PUSH
63239: CALL_OW 44
63243: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63244: LD_VAR 0 12
63248: PPUSH
63249: LD_VAR 0 8
63253: PPUSH
63254: LD_INT 0
63256: PPUSH
63257: CALL 65320 0 3
// end ;
63261: GO 63215
63263: POP
63264: POP
// if birds then
63265: LD_VAR 0 1
63269: IFFALSE 63336
// for i = 1 to birds do
63271: LD_ADDR_VAR 0 11
63275: PUSH
63276: DOUBLE
63277: LD_INT 1
63279: DEC
63280: ST_TO_ADDR
63281: LD_VAR 0 1
63285: PUSH
63286: FOR_TO
63287: IFFALSE 63334
// begin hc_class = 18 ;
63289: LD_ADDR_OWVAR 28
63293: PUSH
63294: LD_INT 18
63296: ST_TO_ADDR
// hc_gallery =  ;
63297: LD_ADDR_OWVAR 33
63301: PUSH
63302: LD_STRING 
63304: ST_TO_ADDR
// animal := CreateHuman ;
63305: LD_ADDR_VAR 0 12
63309: PUSH
63310: CALL_OW 44
63314: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63315: LD_VAR 0 12
63319: PPUSH
63320: LD_VAR 0 8
63324: PPUSH
63325: LD_INT 0
63327: PPUSH
63328: CALL 65320 0 3
// end ;
63332: GO 63286
63334: POP
63335: POP
// if tigers then
63336: LD_VAR 0 2
63340: IFFALSE 63424
// for i = 1 to tigers do
63342: LD_ADDR_VAR 0 11
63346: PUSH
63347: DOUBLE
63348: LD_INT 1
63350: DEC
63351: ST_TO_ADDR
63352: LD_VAR 0 2
63356: PUSH
63357: FOR_TO
63358: IFFALSE 63422
// begin hc_class = class_tiger ;
63360: LD_ADDR_OWVAR 28
63364: PUSH
63365: LD_INT 14
63367: ST_TO_ADDR
// hc_gallery =  ;
63368: LD_ADDR_OWVAR 33
63372: PUSH
63373: LD_STRING 
63375: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63376: LD_ADDR_OWVAR 35
63380: PUSH
63381: LD_INT 7
63383: NEG
63384: PPUSH
63385: LD_INT 7
63387: PPUSH
63388: CALL_OW 12
63392: ST_TO_ADDR
// animal := CreateHuman ;
63393: LD_ADDR_VAR 0 12
63397: PUSH
63398: CALL_OW 44
63402: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63403: LD_VAR 0 12
63407: PPUSH
63408: LD_VAR 0 8
63412: PPUSH
63413: LD_INT 0
63415: PPUSH
63416: CALL 65320 0 3
// end ;
63420: GO 63357
63422: POP
63423: POP
// if apemans then
63424: LD_VAR 0 3
63428: IFFALSE 63551
// for i = 1 to apemans do
63430: LD_ADDR_VAR 0 11
63434: PUSH
63435: DOUBLE
63436: LD_INT 1
63438: DEC
63439: ST_TO_ADDR
63440: LD_VAR 0 3
63444: PUSH
63445: FOR_TO
63446: IFFALSE 63549
// begin hc_class = class_apeman ;
63448: LD_ADDR_OWVAR 28
63452: PUSH
63453: LD_INT 12
63455: ST_TO_ADDR
// hc_gallery =  ;
63456: LD_ADDR_OWVAR 33
63460: PUSH
63461: LD_STRING 
63463: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63464: LD_ADDR_OWVAR 35
63468: PUSH
63469: LD_INT 2
63471: NEG
63472: PPUSH
63473: LD_INT 2
63475: PPUSH
63476: CALL_OW 12
63480: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63481: LD_ADDR_OWVAR 31
63485: PUSH
63486: LD_INT 1
63488: PPUSH
63489: LD_INT 3
63491: PPUSH
63492: CALL_OW 12
63496: PUSH
63497: LD_INT 1
63499: PPUSH
63500: LD_INT 3
63502: PPUSH
63503: CALL_OW 12
63507: PUSH
63508: LD_INT 0
63510: PUSH
63511: LD_INT 0
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: ST_TO_ADDR
// animal := CreateHuman ;
63520: LD_ADDR_VAR 0 12
63524: PUSH
63525: CALL_OW 44
63529: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63530: LD_VAR 0 12
63534: PPUSH
63535: LD_VAR 0 8
63539: PPUSH
63540: LD_INT 0
63542: PPUSH
63543: CALL 65320 0 3
// end ;
63547: GO 63445
63549: POP
63550: POP
// if enchidnas then
63551: LD_VAR 0 4
63555: IFFALSE 63622
// for i = 1 to enchidnas do
63557: LD_ADDR_VAR 0 11
63561: PUSH
63562: DOUBLE
63563: LD_INT 1
63565: DEC
63566: ST_TO_ADDR
63567: LD_VAR 0 4
63571: PUSH
63572: FOR_TO
63573: IFFALSE 63620
// begin hc_class = 13 ;
63575: LD_ADDR_OWVAR 28
63579: PUSH
63580: LD_INT 13
63582: ST_TO_ADDR
// hc_gallery =  ;
63583: LD_ADDR_OWVAR 33
63587: PUSH
63588: LD_STRING 
63590: ST_TO_ADDR
// animal := CreateHuman ;
63591: LD_ADDR_VAR 0 12
63595: PUSH
63596: CALL_OW 44
63600: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63601: LD_VAR 0 12
63605: PPUSH
63606: LD_VAR 0 8
63610: PPUSH
63611: LD_INT 0
63613: PPUSH
63614: CALL 65320 0 3
// end ;
63618: GO 63572
63620: POP
63621: POP
// if fishes then
63622: LD_VAR 0 7
63626: IFFALSE 63693
// for i = 1 to fishes do
63628: LD_ADDR_VAR 0 11
63632: PUSH
63633: DOUBLE
63634: LD_INT 1
63636: DEC
63637: ST_TO_ADDR
63638: LD_VAR 0 7
63642: PUSH
63643: FOR_TO
63644: IFFALSE 63691
// begin hc_class = 20 ;
63646: LD_ADDR_OWVAR 28
63650: PUSH
63651: LD_INT 20
63653: ST_TO_ADDR
// hc_gallery =  ;
63654: LD_ADDR_OWVAR 33
63658: PUSH
63659: LD_STRING 
63661: ST_TO_ADDR
// animal := CreateHuman ;
63662: LD_ADDR_VAR 0 12
63666: PUSH
63667: CALL_OW 44
63671: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63672: LD_VAR 0 12
63676: PPUSH
63677: LD_VAR 0 9
63681: PPUSH
63682: LD_INT 0
63684: PPUSH
63685: CALL 65320 0 3
// end ;
63689: GO 63643
63691: POP
63692: POP
// end ;
63693: LD_VAR 0 10
63697: RET
// export function WantHeal ( sci , unit ) ; begin
63698: LD_INT 0
63700: PPUSH
// if GetTaskList ( sci ) > 0 then
63701: LD_VAR 0 1
63705: PPUSH
63706: CALL_OW 437
63710: PUSH
63711: LD_INT 0
63713: GREATER
63714: IFFALSE 63784
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63716: LD_VAR 0 1
63720: PPUSH
63721: CALL_OW 437
63725: PUSH
63726: LD_INT 1
63728: ARRAY
63729: PUSH
63730: LD_INT 1
63732: ARRAY
63733: PUSH
63734: LD_STRING l
63736: EQUAL
63737: PUSH
63738: LD_VAR 0 1
63742: PPUSH
63743: CALL_OW 437
63747: PUSH
63748: LD_INT 1
63750: ARRAY
63751: PUSH
63752: LD_INT 4
63754: ARRAY
63755: PUSH
63756: LD_VAR 0 2
63760: EQUAL
63761: AND
63762: IFFALSE 63774
// result := true else
63764: LD_ADDR_VAR 0 3
63768: PUSH
63769: LD_INT 1
63771: ST_TO_ADDR
63772: GO 63782
// result := false ;
63774: LD_ADDR_VAR 0 3
63778: PUSH
63779: LD_INT 0
63781: ST_TO_ADDR
// end else
63782: GO 63792
// result := false ;
63784: LD_ADDR_VAR 0 3
63788: PUSH
63789: LD_INT 0
63791: ST_TO_ADDR
// end ;
63792: LD_VAR 0 3
63796: RET
// export function HealTarget ( sci ) ; begin
63797: LD_INT 0
63799: PPUSH
// if not sci then
63800: LD_VAR 0 1
63804: NOT
63805: IFFALSE 63809
// exit ;
63807: GO 63874
// result := 0 ;
63809: LD_ADDR_VAR 0 2
63813: PUSH
63814: LD_INT 0
63816: ST_TO_ADDR
// if GetTaskList ( sci ) then
63817: LD_VAR 0 1
63821: PPUSH
63822: CALL_OW 437
63826: IFFALSE 63874
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63828: LD_VAR 0 1
63832: PPUSH
63833: CALL_OW 437
63837: PUSH
63838: LD_INT 1
63840: ARRAY
63841: PUSH
63842: LD_INT 1
63844: ARRAY
63845: PUSH
63846: LD_STRING l
63848: EQUAL
63849: IFFALSE 63874
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63851: LD_ADDR_VAR 0 2
63855: PUSH
63856: LD_VAR 0 1
63860: PPUSH
63861: CALL_OW 437
63865: PUSH
63866: LD_INT 1
63868: ARRAY
63869: PUSH
63870: LD_INT 4
63872: ARRAY
63873: ST_TO_ADDR
// end ;
63874: LD_VAR 0 2
63878: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63879: LD_INT 0
63881: PPUSH
63882: PPUSH
63883: PPUSH
63884: PPUSH
// if not base_units then
63885: LD_VAR 0 1
63889: NOT
63890: IFFALSE 63894
// exit ;
63892: GO 63981
// result := false ;
63894: LD_ADDR_VAR 0 2
63898: PUSH
63899: LD_INT 0
63901: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63902: LD_ADDR_VAR 0 5
63906: PUSH
63907: LD_VAR 0 1
63911: PPUSH
63912: LD_INT 21
63914: PUSH
63915: LD_INT 3
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PPUSH
63922: CALL_OW 72
63926: ST_TO_ADDR
// if not tmp then
63927: LD_VAR 0 5
63931: NOT
63932: IFFALSE 63936
// exit ;
63934: GO 63981
// for i in tmp do
63936: LD_ADDR_VAR 0 3
63940: PUSH
63941: LD_VAR 0 5
63945: PUSH
63946: FOR_IN
63947: IFFALSE 63979
// begin result := EnemyInRange ( i , 22 ) ;
63949: LD_ADDR_VAR 0 2
63953: PUSH
63954: LD_VAR 0 3
63958: PPUSH
63959: LD_INT 22
63961: PPUSH
63962: CALL 61594 0 2
63966: ST_TO_ADDR
// if result then
63967: LD_VAR 0 2
63971: IFFALSE 63977
// exit ;
63973: POP
63974: POP
63975: GO 63981
// end ;
63977: GO 63946
63979: POP
63980: POP
// end ;
63981: LD_VAR 0 2
63985: RET
// export function FilterByTag ( units , tag ) ; begin
63986: LD_INT 0
63988: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63989: LD_ADDR_VAR 0 3
63993: PUSH
63994: LD_VAR 0 1
63998: PPUSH
63999: LD_INT 120
64001: PUSH
64002: LD_VAR 0 2
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PPUSH
64011: CALL_OW 72
64015: ST_TO_ADDR
// end ;
64016: LD_VAR 0 3
64020: RET
// export function IsDriver ( un ) ; begin
64021: LD_INT 0
64023: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64024: LD_ADDR_VAR 0 2
64028: PUSH
64029: LD_VAR 0 1
64033: PUSH
64034: LD_INT 55
64036: PUSH
64037: EMPTY
64038: LIST
64039: PPUSH
64040: CALL_OW 69
64044: IN
64045: ST_TO_ADDR
// end ;
64046: LD_VAR 0 2
64050: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64051: LD_INT 0
64053: PPUSH
64054: PPUSH
// list := [ ] ;
64055: LD_ADDR_VAR 0 5
64059: PUSH
64060: EMPTY
64061: ST_TO_ADDR
// case d of 0 :
64062: LD_VAR 0 3
64066: PUSH
64067: LD_INT 0
64069: DOUBLE
64070: EQUAL
64071: IFTRUE 64075
64073: GO 64208
64075: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64076: LD_ADDR_VAR 0 5
64080: PUSH
64081: LD_VAR 0 1
64085: PUSH
64086: LD_INT 4
64088: MINUS
64089: PUSH
64090: LD_VAR 0 2
64094: PUSH
64095: LD_INT 4
64097: MINUS
64098: PUSH
64099: LD_INT 2
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: LIST
64106: PUSH
64107: LD_VAR 0 1
64111: PUSH
64112: LD_INT 3
64114: MINUS
64115: PUSH
64116: LD_VAR 0 2
64120: PUSH
64121: LD_INT 1
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: LIST
64128: PUSH
64129: LD_VAR 0 1
64133: PUSH
64134: LD_INT 4
64136: PLUS
64137: PUSH
64138: LD_VAR 0 2
64142: PUSH
64143: LD_INT 4
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: LIST
64150: PUSH
64151: LD_VAR 0 1
64155: PUSH
64156: LD_INT 3
64158: PLUS
64159: PUSH
64160: LD_VAR 0 2
64164: PUSH
64165: LD_INT 3
64167: PLUS
64168: PUSH
64169: LD_INT 5
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: LIST
64176: PUSH
64177: LD_VAR 0 1
64181: PUSH
64182: LD_VAR 0 2
64186: PUSH
64187: LD_INT 4
64189: PLUS
64190: PUSH
64191: LD_INT 0
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: LIST
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: ST_TO_ADDR
// end ; 1 :
64206: GO 64906
64208: LD_INT 1
64210: DOUBLE
64211: EQUAL
64212: IFTRUE 64216
64214: GO 64349
64216: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64217: LD_ADDR_VAR 0 5
64221: PUSH
64222: LD_VAR 0 1
64226: PUSH
64227: LD_VAR 0 2
64231: PUSH
64232: LD_INT 4
64234: MINUS
64235: PUSH
64236: LD_INT 3
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: LIST
64243: PUSH
64244: LD_VAR 0 1
64248: PUSH
64249: LD_INT 3
64251: MINUS
64252: PUSH
64253: LD_VAR 0 2
64257: PUSH
64258: LD_INT 3
64260: MINUS
64261: PUSH
64262: LD_INT 2
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: LIST
64269: PUSH
64270: LD_VAR 0 1
64274: PUSH
64275: LD_INT 4
64277: MINUS
64278: PUSH
64279: LD_VAR 0 2
64283: PUSH
64284: LD_INT 1
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: LIST
64291: PUSH
64292: LD_VAR 0 1
64296: PUSH
64297: LD_VAR 0 2
64301: PUSH
64302: LD_INT 3
64304: PLUS
64305: PUSH
64306: LD_INT 0
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: LIST
64313: PUSH
64314: LD_VAR 0 1
64318: PUSH
64319: LD_INT 4
64321: PLUS
64322: PUSH
64323: LD_VAR 0 2
64327: PUSH
64328: LD_INT 4
64330: PLUS
64331: PUSH
64332: LD_INT 5
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: LIST
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: ST_TO_ADDR
// end ; 2 :
64347: GO 64906
64349: LD_INT 2
64351: DOUBLE
64352: EQUAL
64353: IFTRUE 64357
64355: GO 64486
64357: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64358: LD_ADDR_VAR 0 5
64362: PUSH
64363: LD_VAR 0 1
64367: PUSH
64368: LD_VAR 0 2
64372: PUSH
64373: LD_INT 3
64375: MINUS
64376: PUSH
64377: LD_INT 3
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: LIST
64384: PUSH
64385: LD_VAR 0 1
64389: PUSH
64390: LD_INT 4
64392: PLUS
64393: PUSH
64394: LD_VAR 0 2
64398: PUSH
64399: LD_INT 4
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: LIST
64406: PUSH
64407: LD_VAR 0 1
64411: PUSH
64412: LD_VAR 0 2
64416: PUSH
64417: LD_INT 4
64419: PLUS
64420: PUSH
64421: LD_INT 0
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: LIST
64428: PUSH
64429: LD_VAR 0 1
64433: PUSH
64434: LD_INT 3
64436: MINUS
64437: PUSH
64438: LD_VAR 0 2
64442: PUSH
64443: LD_INT 1
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: LIST
64450: PUSH
64451: LD_VAR 0 1
64455: PUSH
64456: LD_INT 4
64458: MINUS
64459: PUSH
64460: LD_VAR 0 2
64464: PUSH
64465: LD_INT 4
64467: MINUS
64468: PUSH
64469: LD_INT 2
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: LIST
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: ST_TO_ADDR
// end ; 3 :
64484: GO 64906
64486: LD_INT 3
64488: DOUBLE
64489: EQUAL
64490: IFTRUE 64494
64492: GO 64627
64494: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64495: LD_ADDR_VAR 0 5
64499: PUSH
64500: LD_VAR 0 1
64504: PUSH
64505: LD_INT 3
64507: PLUS
64508: PUSH
64509: LD_VAR 0 2
64513: PUSH
64514: LD_INT 4
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: LIST
64521: PUSH
64522: LD_VAR 0 1
64526: PUSH
64527: LD_INT 4
64529: PLUS
64530: PUSH
64531: LD_VAR 0 2
64535: PUSH
64536: LD_INT 4
64538: PLUS
64539: PUSH
64540: LD_INT 5
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: LIST
64547: PUSH
64548: LD_VAR 0 1
64552: PUSH
64553: LD_INT 4
64555: MINUS
64556: PUSH
64557: LD_VAR 0 2
64561: PUSH
64562: LD_INT 1
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: LIST
64569: PUSH
64570: LD_VAR 0 1
64574: PUSH
64575: LD_VAR 0 2
64579: PUSH
64580: LD_INT 4
64582: MINUS
64583: PUSH
64584: LD_INT 3
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: LIST
64591: PUSH
64592: LD_VAR 0 1
64596: PUSH
64597: LD_INT 3
64599: MINUS
64600: PUSH
64601: LD_VAR 0 2
64605: PUSH
64606: LD_INT 3
64608: MINUS
64609: PUSH
64610: LD_INT 2
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: LIST
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: ST_TO_ADDR
// end ; 4 :
64625: GO 64906
64627: LD_INT 4
64629: DOUBLE
64630: EQUAL
64631: IFTRUE 64635
64633: GO 64768
64635: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64636: LD_ADDR_VAR 0 5
64640: PUSH
64641: LD_VAR 0 1
64645: PUSH
64646: LD_VAR 0 2
64650: PUSH
64651: LD_INT 4
64653: PLUS
64654: PUSH
64655: LD_INT 0
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: LIST
64662: PUSH
64663: LD_VAR 0 1
64667: PUSH
64668: LD_INT 3
64670: PLUS
64671: PUSH
64672: LD_VAR 0 2
64676: PUSH
64677: LD_INT 3
64679: PLUS
64680: PUSH
64681: LD_INT 5
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: LIST
64688: PUSH
64689: LD_VAR 0 1
64693: PUSH
64694: LD_INT 4
64696: PLUS
64697: PUSH
64698: LD_VAR 0 2
64702: PUSH
64703: LD_INT 4
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: LIST
64710: PUSH
64711: LD_VAR 0 1
64715: PUSH
64716: LD_VAR 0 2
64720: PUSH
64721: LD_INT 3
64723: MINUS
64724: PUSH
64725: LD_INT 3
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: LIST
64732: PUSH
64733: LD_VAR 0 1
64737: PUSH
64738: LD_INT 4
64740: MINUS
64741: PUSH
64742: LD_VAR 0 2
64746: PUSH
64747: LD_INT 4
64749: MINUS
64750: PUSH
64751: LD_INT 2
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: LIST
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: ST_TO_ADDR
// end ; 5 :
64766: GO 64906
64768: LD_INT 5
64770: DOUBLE
64771: EQUAL
64772: IFTRUE 64776
64774: GO 64905
64776: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64777: LD_ADDR_VAR 0 5
64781: PUSH
64782: LD_VAR 0 1
64786: PUSH
64787: LD_INT 4
64789: MINUS
64790: PUSH
64791: LD_VAR 0 2
64795: PUSH
64796: LD_INT 1
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: LIST
64803: PUSH
64804: LD_VAR 0 1
64808: PUSH
64809: LD_VAR 0 2
64813: PUSH
64814: LD_INT 4
64816: MINUS
64817: PUSH
64818: LD_INT 3
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: LIST
64825: PUSH
64826: LD_VAR 0 1
64830: PUSH
64831: LD_INT 4
64833: PLUS
64834: PUSH
64835: LD_VAR 0 2
64839: PUSH
64840: LD_INT 4
64842: PLUS
64843: PUSH
64844: LD_INT 5
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: LIST
64851: PUSH
64852: LD_VAR 0 1
64856: PUSH
64857: LD_INT 3
64859: PLUS
64860: PUSH
64861: LD_VAR 0 2
64865: PUSH
64866: LD_INT 4
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: LIST
64873: PUSH
64874: LD_VAR 0 1
64878: PUSH
64879: LD_VAR 0 2
64883: PUSH
64884: LD_INT 3
64886: PLUS
64887: PUSH
64888: LD_INT 0
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: LIST
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: ST_TO_ADDR
// end ; end ;
64903: GO 64906
64905: POP
// result := list ;
64906: LD_ADDR_VAR 0 4
64910: PUSH
64911: LD_VAR 0 5
64915: ST_TO_ADDR
// end ;
64916: LD_VAR 0 4
64920: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64921: LD_INT 0
64923: PPUSH
64924: PPUSH
64925: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64926: LD_VAR 0 1
64930: NOT
64931: PUSH
64932: LD_VAR 0 2
64936: PUSH
64937: LD_INT 1
64939: PUSH
64940: LD_INT 2
64942: PUSH
64943: LD_INT 3
64945: PUSH
64946: LD_INT 4
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: IN
64955: NOT
64956: OR
64957: IFFALSE 64961
// exit ;
64959: GO 65044
// tmp := [ ] ;
64961: LD_ADDR_VAR 0 5
64965: PUSH
64966: EMPTY
64967: ST_TO_ADDR
// for i in units do
64968: LD_ADDR_VAR 0 4
64972: PUSH
64973: LD_VAR 0 1
64977: PUSH
64978: FOR_IN
64979: IFFALSE 65013
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
64981: LD_ADDR_VAR 0 5
64985: PUSH
64986: LD_VAR 0 5
64990: PPUSH
64991: LD_VAR 0 4
64995: PPUSH
64996: LD_VAR 0 2
65000: PPUSH
65001: CALL_OW 259
65005: PPUSH
65006: CALL 66403 0 2
65010: ST_TO_ADDR
65011: GO 64978
65013: POP
65014: POP
// if not tmp then
65015: LD_VAR 0 5
65019: NOT
65020: IFFALSE 65024
// exit ;
65022: GO 65044
// result := SortListByListDesc ( units , tmp ) ;
65024: LD_ADDR_VAR 0 3
65028: PUSH
65029: LD_VAR 0 1
65033: PPUSH
65034: LD_VAR 0 5
65038: PPUSH
65039: CALL_OW 77
65043: ST_TO_ADDR
// end ;
65044: LD_VAR 0 3
65048: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65049: LD_INT 0
65051: PPUSH
65052: PPUSH
65053: PPUSH
// result := false ;
65054: LD_ADDR_VAR 0 3
65058: PUSH
65059: LD_INT 0
65061: ST_TO_ADDR
// x := GetX ( building ) ;
65062: LD_ADDR_VAR 0 4
65066: PUSH
65067: LD_VAR 0 2
65071: PPUSH
65072: CALL_OW 250
65076: ST_TO_ADDR
// y := GetY ( building ) ;
65077: LD_ADDR_VAR 0 5
65081: PUSH
65082: LD_VAR 0 2
65086: PPUSH
65087: CALL_OW 251
65091: ST_TO_ADDR
// if not building or not x or not y then
65092: LD_VAR 0 2
65096: NOT
65097: PUSH
65098: LD_VAR 0 4
65102: NOT
65103: OR
65104: PUSH
65105: LD_VAR 0 5
65109: NOT
65110: OR
65111: IFFALSE 65115
// exit ;
65113: GO 65207
// if GetTaskList ( unit ) then
65115: LD_VAR 0 1
65119: PPUSH
65120: CALL_OW 437
65124: IFFALSE 65207
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65126: LD_STRING e
65128: PUSH
65129: LD_VAR 0 1
65133: PPUSH
65134: CALL_OW 437
65138: PUSH
65139: LD_INT 1
65141: ARRAY
65142: PUSH
65143: LD_INT 1
65145: ARRAY
65146: EQUAL
65147: PUSH
65148: LD_VAR 0 4
65152: PUSH
65153: LD_VAR 0 1
65157: PPUSH
65158: CALL_OW 437
65162: PUSH
65163: LD_INT 1
65165: ARRAY
65166: PUSH
65167: LD_INT 2
65169: ARRAY
65170: EQUAL
65171: AND
65172: PUSH
65173: LD_VAR 0 5
65177: PUSH
65178: LD_VAR 0 1
65182: PPUSH
65183: CALL_OW 437
65187: PUSH
65188: LD_INT 1
65190: ARRAY
65191: PUSH
65192: LD_INT 3
65194: ARRAY
65195: EQUAL
65196: AND
65197: IFFALSE 65207
// result := true end ;
65199: LD_ADDR_VAR 0 3
65203: PUSH
65204: LD_INT 1
65206: ST_TO_ADDR
// end ;
65207: LD_VAR 0 3
65211: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65212: LD_INT 0
65214: PPUSH
// result := false ;
65215: LD_ADDR_VAR 0 4
65219: PUSH
65220: LD_INT 0
65222: ST_TO_ADDR
// if GetTaskList ( unit ) then
65223: LD_VAR 0 1
65227: PPUSH
65228: CALL_OW 437
65232: IFFALSE 65315
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65234: LD_STRING M
65236: PUSH
65237: LD_VAR 0 1
65241: PPUSH
65242: CALL_OW 437
65246: PUSH
65247: LD_INT 1
65249: ARRAY
65250: PUSH
65251: LD_INT 1
65253: ARRAY
65254: EQUAL
65255: PUSH
65256: LD_VAR 0 2
65260: PUSH
65261: LD_VAR 0 1
65265: PPUSH
65266: CALL_OW 437
65270: PUSH
65271: LD_INT 1
65273: ARRAY
65274: PUSH
65275: LD_INT 2
65277: ARRAY
65278: EQUAL
65279: AND
65280: PUSH
65281: LD_VAR 0 3
65285: PUSH
65286: LD_VAR 0 1
65290: PPUSH
65291: CALL_OW 437
65295: PUSH
65296: LD_INT 1
65298: ARRAY
65299: PUSH
65300: LD_INT 3
65302: ARRAY
65303: EQUAL
65304: AND
65305: IFFALSE 65315
// result := true ;
65307: LD_ADDR_VAR 0 4
65311: PUSH
65312: LD_INT 1
65314: ST_TO_ADDR
// end ; end ;
65315: LD_VAR 0 4
65319: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65320: LD_INT 0
65322: PPUSH
65323: PPUSH
65324: PPUSH
65325: PPUSH
// if not unit or not area then
65326: LD_VAR 0 1
65330: NOT
65331: PUSH
65332: LD_VAR 0 2
65336: NOT
65337: OR
65338: IFFALSE 65342
// exit ;
65340: GO 65506
// tmp := AreaToList ( area , i ) ;
65342: LD_ADDR_VAR 0 6
65346: PUSH
65347: LD_VAR 0 2
65351: PPUSH
65352: LD_VAR 0 5
65356: PPUSH
65357: CALL_OW 517
65361: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65362: LD_ADDR_VAR 0 5
65366: PUSH
65367: DOUBLE
65368: LD_INT 1
65370: DEC
65371: ST_TO_ADDR
65372: LD_VAR 0 6
65376: PUSH
65377: LD_INT 1
65379: ARRAY
65380: PUSH
65381: FOR_TO
65382: IFFALSE 65504
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65384: LD_ADDR_VAR 0 7
65388: PUSH
65389: LD_VAR 0 6
65393: PUSH
65394: LD_INT 1
65396: ARRAY
65397: PUSH
65398: LD_VAR 0 5
65402: ARRAY
65403: PUSH
65404: LD_VAR 0 6
65408: PUSH
65409: LD_INT 2
65411: ARRAY
65412: PUSH
65413: LD_VAR 0 5
65417: ARRAY
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65423: LD_VAR 0 7
65427: PUSH
65428: LD_INT 1
65430: ARRAY
65431: PPUSH
65432: LD_VAR 0 7
65436: PUSH
65437: LD_INT 2
65439: ARRAY
65440: PPUSH
65441: CALL_OW 428
65445: PUSH
65446: LD_INT 0
65448: EQUAL
65449: IFFALSE 65502
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65451: LD_VAR 0 1
65455: PPUSH
65456: LD_VAR 0 7
65460: PUSH
65461: LD_INT 1
65463: ARRAY
65464: PPUSH
65465: LD_VAR 0 7
65469: PUSH
65470: LD_INT 2
65472: ARRAY
65473: PPUSH
65474: LD_VAR 0 3
65478: PPUSH
65479: CALL_OW 48
// result := IsPlaced ( unit ) ;
65483: LD_ADDR_VAR 0 4
65487: PUSH
65488: LD_VAR 0 1
65492: PPUSH
65493: CALL_OW 305
65497: ST_TO_ADDR
// exit ;
65498: POP
65499: POP
65500: GO 65506
// end ; end ;
65502: GO 65381
65504: POP
65505: POP
// end ;
65506: LD_VAR 0 4
65510: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65511: LD_INT 0
65513: PPUSH
65514: PPUSH
65515: PPUSH
// if not side or side > 8 then
65516: LD_VAR 0 1
65520: NOT
65521: PUSH
65522: LD_VAR 0 1
65526: PUSH
65527: LD_INT 8
65529: GREATER
65530: OR
65531: IFFALSE 65535
// exit ;
65533: GO 65722
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65535: LD_ADDR_VAR 0 4
65539: PUSH
65540: LD_INT 22
65542: PUSH
65543: LD_VAR 0 1
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 21
65554: PUSH
65555: LD_INT 3
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PPUSH
65566: CALL_OW 69
65570: ST_TO_ADDR
// if not tmp then
65571: LD_VAR 0 4
65575: NOT
65576: IFFALSE 65580
// exit ;
65578: GO 65722
// enable_addtolog := true ;
65580: LD_ADDR_OWVAR 81
65584: PUSH
65585: LD_INT 1
65587: ST_TO_ADDR
// AddToLog ( [ ) ;
65588: LD_STRING [
65590: PPUSH
65591: CALL_OW 561
// for i in tmp do
65595: LD_ADDR_VAR 0 3
65599: PUSH
65600: LD_VAR 0 4
65604: PUSH
65605: FOR_IN
65606: IFFALSE 65713
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65608: LD_STRING [
65610: PUSH
65611: LD_VAR 0 3
65615: PPUSH
65616: CALL_OW 266
65620: STR
65621: PUSH
65622: LD_STRING , 
65624: STR
65625: PUSH
65626: LD_VAR 0 3
65630: PPUSH
65631: CALL_OW 250
65635: STR
65636: PUSH
65637: LD_STRING , 
65639: STR
65640: PUSH
65641: LD_VAR 0 3
65645: PPUSH
65646: CALL_OW 251
65650: STR
65651: PUSH
65652: LD_STRING , 
65654: STR
65655: PUSH
65656: LD_VAR 0 3
65660: PPUSH
65661: CALL_OW 254
65665: STR
65666: PUSH
65667: LD_STRING , 
65669: STR
65670: PUSH
65671: LD_VAR 0 3
65675: PPUSH
65676: LD_INT 1
65678: PPUSH
65679: CALL_OW 268
65683: STR
65684: PUSH
65685: LD_STRING , 
65687: STR
65688: PUSH
65689: LD_VAR 0 3
65693: PPUSH
65694: LD_INT 2
65696: PPUSH
65697: CALL_OW 268
65701: STR
65702: PUSH
65703: LD_STRING ],
65705: STR
65706: PPUSH
65707: CALL_OW 561
// end ;
65711: GO 65605
65713: POP
65714: POP
// AddToLog ( ]; ) ;
65715: LD_STRING ];
65717: PPUSH
65718: CALL_OW 561
// end ;
65722: LD_VAR 0 2
65726: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65727: LD_INT 0
65729: PPUSH
65730: PPUSH
65731: PPUSH
65732: PPUSH
65733: PPUSH
// if not area or not rate or not max then
65734: LD_VAR 0 1
65738: NOT
65739: PUSH
65740: LD_VAR 0 2
65744: NOT
65745: OR
65746: PUSH
65747: LD_VAR 0 4
65751: NOT
65752: OR
65753: IFFALSE 65757
// exit ;
65755: GO 65946
// while 1 do
65757: LD_INT 1
65759: IFFALSE 65946
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65761: LD_ADDR_VAR 0 9
65765: PUSH
65766: LD_VAR 0 1
65770: PPUSH
65771: LD_INT 1
65773: PPUSH
65774: CALL_OW 287
65778: PUSH
65779: LD_INT 10
65781: MUL
65782: ST_TO_ADDR
// r := rate / 10 ;
65783: LD_ADDR_VAR 0 7
65787: PUSH
65788: LD_VAR 0 2
65792: PUSH
65793: LD_INT 10
65795: DIVREAL
65796: ST_TO_ADDR
// time := 1 1$00 ;
65797: LD_ADDR_VAR 0 8
65801: PUSH
65802: LD_INT 2100
65804: ST_TO_ADDR
// if amount < min then
65805: LD_VAR 0 9
65809: PUSH
65810: LD_VAR 0 3
65814: LESS
65815: IFFALSE 65833
// r := r * 2 else
65817: LD_ADDR_VAR 0 7
65821: PUSH
65822: LD_VAR 0 7
65826: PUSH
65827: LD_INT 2
65829: MUL
65830: ST_TO_ADDR
65831: GO 65859
// if amount > max then
65833: LD_VAR 0 9
65837: PUSH
65838: LD_VAR 0 4
65842: GREATER
65843: IFFALSE 65859
// r := r / 2 ;
65845: LD_ADDR_VAR 0 7
65849: PUSH
65850: LD_VAR 0 7
65854: PUSH
65855: LD_INT 2
65857: DIVREAL
65858: ST_TO_ADDR
// time := time / r ;
65859: LD_ADDR_VAR 0 8
65863: PUSH
65864: LD_VAR 0 8
65868: PUSH
65869: LD_VAR 0 7
65873: DIVREAL
65874: ST_TO_ADDR
// if time < 0 then
65875: LD_VAR 0 8
65879: PUSH
65880: LD_INT 0
65882: LESS
65883: IFFALSE 65900
// time := time * - 1 ;
65885: LD_ADDR_VAR 0 8
65889: PUSH
65890: LD_VAR 0 8
65894: PUSH
65895: LD_INT 1
65897: NEG
65898: MUL
65899: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65900: LD_VAR 0 8
65904: PUSH
65905: LD_INT 35
65907: PPUSH
65908: LD_INT 875
65910: PPUSH
65911: CALL_OW 12
65915: PLUS
65916: PPUSH
65917: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65921: LD_INT 1
65923: PPUSH
65924: LD_INT 5
65926: PPUSH
65927: CALL_OW 12
65931: PPUSH
65932: LD_VAR 0 1
65936: PPUSH
65937: LD_INT 1
65939: PPUSH
65940: CALL_OW 55
// end ;
65944: GO 65757
// end ;
65946: LD_VAR 0 5
65950: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65951: LD_INT 0
65953: PPUSH
65954: PPUSH
65955: PPUSH
65956: PPUSH
65957: PPUSH
65958: PPUSH
65959: PPUSH
65960: PPUSH
// if not turrets or not factories then
65961: LD_VAR 0 1
65965: NOT
65966: PUSH
65967: LD_VAR 0 2
65971: NOT
65972: OR
65973: IFFALSE 65977
// exit ;
65975: GO 66284
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65977: LD_ADDR_VAR 0 10
65981: PUSH
65982: LD_INT 5
65984: PUSH
65985: LD_INT 6
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: LD_INT 2
65994: PUSH
65995: LD_INT 4
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 3
66004: PUSH
66005: LD_INT 5
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 24
66019: PUSH
66020: LD_INT 25
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_INT 23
66029: PUSH
66030: LD_INT 27
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 42
66043: PUSH
66044: LD_INT 43
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 44
66053: PUSH
66054: LD_INT 46
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 45
66063: PUSH
66064: LD_INT 47
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: LIST
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: LIST
66080: ST_TO_ADDR
// result := [ ] ;
66081: LD_ADDR_VAR 0 3
66085: PUSH
66086: EMPTY
66087: ST_TO_ADDR
// for i in turrets do
66088: LD_ADDR_VAR 0 4
66092: PUSH
66093: LD_VAR 0 1
66097: PUSH
66098: FOR_IN
66099: IFFALSE 66282
// begin nat := GetNation ( i ) ;
66101: LD_ADDR_VAR 0 7
66105: PUSH
66106: LD_VAR 0 4
66110: PPUSH
66111: CALL_OW 248
66115: ST_TO_ADDR
// weapon := 0 ;
66116: LD_ADDR_VAR 0 8
66120: PUSH
66121: LD_INT 0
66123: ST_TO_ADDR
// if not nat then
66124: LD_VAR 0 7
66128: NOT
66129: IFFALSE 66133
// continue ;
66131: GO 66098
// for j in list [ nat ] do
66133: LD_ADDR_VAR 0 5
66137: PUSH
66138: LD_VAR 0 10
66142: PUSH
66143: LD_VAR 0 7
66147: ARRAY
66148: PUSH
66149: FOR_IN
66150: IFFALSE 66191
// if GetBWeapon ( i ) = j [ 1 ] then
66152: LD_VAR 0 4
66156: PPUSH
66157: CALL_OW 269
66161: PUSH
66162: LD_VAR 0 5
66166: PUSH
66167: LD_INT 1
66169: ARRAY
66170: EQUAL
66171: IFFALSE 66189
// begin weapon := j [ 2 ] ;
66173: LD_ADDR_VAR 0 8
66177: PUSH
66178: LD_VAR 0 5
66182: PUSH
66183: LD_INT 2
66185: ARRAY
66186: ST_TO_ADDR
// break ;
66187: GO 66191
// end ;
66189: GO 66149
66191: POP
66192: POP
// if not weapon then
66193: LD_VAR 0 8
66197: NOT
66198: IFFALSE 66202
// continue ;
66200: GO 66098
// for k in factories do
66202: LD_ADDR_VAR 0 6
66206: PUSH
66207: LD_VAR 0 2
66211: PUSH
66212: FOR_IN
66213: IFFALSE 66278
// begin weapons := AvailableWeaponList ( k ) ;
66215: LD_ADDR_VAR 0 9
66219: PUSH
66220: LD_VAR 0 6
66224: PPUSH
66225: CALL_OW 478
66229: ST_TO_ADDR
// if not weapons then
66230: LD_VAR 0 9
66234: NOT
66235: IFFALSE 66239
// continue ;
66237: GO 66212
// if weapon in weapons then
66239: LD_VAR 0 8
66243: PUSH
66244: LD_VAR 0 9
66248: IN
66249: IFFALSE 66276
// begin result := [ i , weapon ] ;
66251: LD_ADDR_VAR 0 3
66255: PUSH
66256: LD_VAR 0 4
66260: PUSH
66261: LD_VAR 0 8
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: ST_TO_ADDR
// exit ;
66270: POP
66271: POP
66272: POP
66273: POP
66274: GO 66284
// end ; end ;
66276: GO 66212
66278: POP
66279: POP
// end ;
66280: GO 66098
66282: POP
66283: POP
// end ;
66284: LD_VAR 0 3
66288: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66289: LD_INT 0
66291: PPUSH
// if not side or side > 8 then
66292: LD_VAR 0 3
66296: NOT
66297: PUSH
66298: LD_VAR 0 3
66302: PUSH
66303: LD_INT 8
66305: GREATER
66306: OR
66307: IFFALSE 66311
// exit ;
66309: GO 66370
// if not range then
66311: LD_VAR 0 4
66315: NOT
66316: IFFALSE 66327
// range := - 12 ;
66318: LD_ADDR_VAR 0 4
66322: PUSH
66323: LD_INT 12
66325: NEG
66326: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66327: LD_VAR 0 1
66331: PPUSH
66332: LD_VAR 0 2
66336: PPUSH
66337: LD_VAR 0 3
66341: PPUSH
66342: LD_VAR 0 4
66346: PPUSH
66347: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66351: LD_VAR 0 1
66355: PPUSH
66356: LD_VAR 0 2
66360: PPUSH
66361: LD_VAR 0 3
66365: PPUSH
66366: CALL_OW 331
// end ;
66370: LD_VAR 0 5
66374: RET
// export function Video ( mode ) ; begin
66375: LD_INT 0
66377: PPUSH
// ingame_video = mode ;
66378: LD_ADDR_OWVAR 52
66382: PUSH
66383: LD_VAR 0 1
66387: ST_TO_ADDR
// interface_hidden = mode ;
66388: LD_ADDR_OWVAR 54
66392: PUSH
66393: LD_VAR 0 1
66397: ST_TO_ADDR
// end ;
66398: LD_VAR 0 2
66402: RET
// export function Join ( array , element ) ; begin
66403: LD_INT 0
66405: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66406: LD_ADDR_VAR 0 3
66410: PUSH
66411: LD_VAR 0 1
66415: PPUSH
66416: LD_VAR 0 1
66420: PUSH
66421: LD_INT 1
66423: PLUS
66424: PPUSH
66425: LD_VAR 0 2
66429: PPUSH
66430: CALL_OW 1
66434: ST_TO_ADDR
// end ;
66435: LD_VAR 0 3
66439: RET
// export function JoinUnion ( array , element ) ; begin
66440: LD_INT 0
66442: PPUSH
// result := array union element ;
66443: LD_ADDR_VAR 0 3
66447: PUSH
66448: LD_VAR 0 1
66452: PUSH
66453: LD_VAR 0 2
66457: UNION
66458: ST_TO_ADDR
// end ;
66459: LD_VAR 0 3
66463: RET
// export function GetBehemoths ( side ) ; begin
66464: LD_INT 0
66466: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66467: LD_ADDR_VAR 0 2
66471: PUSH
66472: LD_INT 22
66474: PUSH
66475: LD_VAR 0 1
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PUSH
66484: LD_INT 31
66486: PUSH
66487: LD_INT 25
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PPUSH
66498: CALL_OW 69
66502: ST_TO_ADDR
// end ;
66503: LD_VAR 0 2
66507: RET
// export function Shuffle ( array ) ; var i , index ; begin
66508: LD_INT 0
66510: PPUSH
66511: PPUSH
66512: PPUSH
// result := [ ] ;
66513: LD_ADDR_VAR 0 2
66517: PUSH
66518: EMPTY
66519: ST_TO_ADDR
// if not array then
66520: LD_VAR 0 1
66524: NOT
66525: IFFALSE 66529
// exit ;
66527: GO 66628
// Randomize ;
66529: CALL_OW 10
// for i = array downto 1 do
66533: LD_ADDR_VAR 0 3
66537: PUSH
66538: DOUBLE
66539: LD_VAR 0 1
66543: INC
66544: ST_TO_ADDR
66545: LD_INT 1
66547: PUSH
66548: FOR_DOWNTO
66549: IFFALSE 66626
// begin index := rand ( 1 , array ) ;
66551: LD_ADDR_VAR 0 4
66555: PUSH
66556: LD_INT 1
66558: PPUSH
66559: LD_VAR 0 1
66563: PPUSH
66564: CALL_OW 12
66568: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66569: LD_ADDR_VAR 0 2
66573: PUSH
66574: LD_VAR 0 2
66578: PPUSH
66579: LD_VAR 0 2
66583: PUSH
66584: LD_INT 1
66586: PLUS
66587: PPUSH
66588: LD_VAR 0 1
66592: PUSH
66593: LD_VAR 0 4
66597: ARRAY
66598: PPUSH
66599: CALL_OW 2
66603: ST_TO_ADDR
// array := Delete ( array , index ) ;
66604: LD_ADDR_VAR 0 1
66608: PUSH
66609: LD_VAR 0 1
66613: PPUSH
66614: LD_VAR 0 4
66618: PPUSH
66619: CALL_OW 3
66623: ST_TO_ADDR
// end ;
66624: GO 66548
66626: POP
66627: POP
// end ;
66628: LD_VAR 0 2
66632: RET
// export function GetBaseMaterials ( base ) ; begin
66633: LD_INT 0
66635: PPUSH
// result := [ 0 , 0 , 0 ] ;
66636: LD_ADDR_VAR 0 2
66640: PUSH
66641: LD_INT 0
66643: PUSH
66644: LD_INT 0
66646: PUSH
66647: LD_INT 0
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: LIST
66654: ST_TO_ADDR
// if not base then
66655: LD_VAR 0 1
66659: NOT
66660: IFFALSE 66664
// exit ;
66662: GO 66713
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66664: LD_ADDR_VAR 0 2
66668: PUSH
66669: LD_VAR 0 1
66673: PPUSH
66674: LD_INT 1
66676: PPUSH
66677: CALL_OW 275
66681: PUSH
66682: LD_VAR 0 1
66686: PPUSH
66687: LD_INT 2
66689: PPUSH
66690: CALL_OW 275
66694: PUSH
66695: LD_VAR 0 1
66699: PPUSH
66700: LD_INT 3
66702: PPUSH
66703: CALL_OW 275
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: LIST
66712: ST_TO_ADDR
// end ;
66713: LD_VAR 0 2
66717: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66718: LD_INT 0
66720: PPUSH
66721: PPUSH
// result := array ;
66722: LD_ADDR_VAR 0 3
66726: PUSH
66727: LD_VAR 0 1
66731: ST_TO_ADDR
// if size >= result then
66732: LD_VAR 0 2
66736: PUSH
66737: LD_VAR 0 3
66741: GREATEREQUAL
66742: IFFALSE 66746
// exit ;
66744: GO 66796
// if size then
66746: LD_VAR 0 2
66750: IFFALSE 66796
// for i := array downto size do
66752: LD_ADDR_VAR 0 4
66756: PUSH
66757: DOUBLE
66758: LD_VAR 0 1
66762: INC
66763: ST_TO_ADDR
66764: LD_VAR 0 2
66768: PUSH
66769: FOR_DOWNTO
66770: IFFALSE 66794
// result := Delete ( result , result ) ;
66772: LD_ADDR_VAR 0 3
66776: PUSH
66777: LD_VAR 0 3
66781: PPUSH
66782: LD_VAR 0 3
66786: PPUSH
66787: CALL_OW 3
66791: ST_TO_ADDR
66792: GO 66769
66794: POP
66795: POP
// end ;
66796: LD_VAR 0 3
66800: RET
// export function ComExit ( unit ) ; var tmp ; begin
66801: LD_INT 0
66803: PPUSH
66804: PPUSH
// if not IsInUnit ( unit ) then
66805: LD_VAR 0 1
66809: PPUSH
66810: CALL_OW 310
66814: NOT
66815: IFFALSE 66819
// exit ;
66817: GO 66879
// tmp := IsInUnit ( unit ) ;
66819: LD_ADDR_VAR 0 3
66823: PUSH
66824: LD_VAR 0 1
66828: PPUSH
66829: CALL_OW 310
66833: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66834: LD_VAR 0 3
66838: PPUSH
66839: CALL_OW 247
66843: PUSH
66844: LD_INT 2
66846: EQUAL
66847: IFFALSE 66860
// ComExitVehicle ( unit ) else
66849: LD_VAR 0 1
66853: PPUSH
66854: CALL_OW 121
66858: GO 66869
// ComExitBuilding ( unit ) ;
66860: LD_VAR 0 1
66864: PPUSH
66865: CALL_OW 122
// result := tmp ;
66869: LD_ADDR_VAR 0 2
66873: PUSH
66874: LD_VAR 0 3
66878: ST_TO_ADDR
// end ;
66879: LD_VAR 0 2
66883: RET
// export function ComExitAll ( units ) ; var i ; begin
66884: LD_INT 0
66886: PPUSH
66887: PPUSH
// if not units then
66888: LD_VAR 0 1
66892: NOT
66893: IFFALSE 66897
// exit ;
66895: GO 66923
// for i in units do
66897: LD_ADDR_VAR 0 3
66901: PUSH
66902: LD_VAR 0 1
66906: PUSH
66907: FOR_IN
66908: IFFALSE 66921
// ComExit ( i ) ;
66910: LD_VAR 0 3
66914: PPUSH
66915: CALL 66801 0 1
66919: GO 66907
66921: POP
66922: POP
// end ;
66923: LD_VAR 0 2
66927: RET
// export function ResetHc ; begin
66928: LD_INT 0
66930: PPUSH
// InitHc ;
66931: CALL_OW 19
// hc_importance := 0 ;
66935: LD_ADDR_OWVAR 32
66939: PUSH
66940: LD_INT 0
66942: ST_TO_ADDR
// end ;
66943: LD_VAR 0 1
66947: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66948: LD_INT 0
66950: PPUSH
66951: PPUSH
66952: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66953: LD_ADDR_VAR 0 6
66957: PUSH
66958: LD_VAR 0 1
66962: PUSH
66963: LD_VAR 0 3
66967: PLUS
66968: PUSH
66969: LD_INT 2
66971: DIV
66972: ST_TO_ADDR
// if _x < 0 then
66973: LD_VAR 0 6
66977: PUSH
66978: LD_INT 0
66980: LESS
66981: IFFALSE 66998
// _x := _x * - 1 ;
66983: LD_ADDR_VAR 0 6
66987: PUSH
66988: LD_VAR 0 6
66992: PUSH
66993: LD_INT 1
66995: NEG
66996: MUL
66997: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66998: LD_ADDR_VAR 0 7
67002: PUSH
67003: LD_VAR 0 2
67007: PUSH
67008: LD_VAR 0 4
67012: PLUS
67013: PUSH
67014: LD_INT 2
67016: DIV
67017: ST_TO_ADDR
// if _y < 0 then
67018: LD_VAR 0 7
67022: PUSH
67023: LD_INT 0
67025: LESS
67026: IFFALSE 67043
// _y := _y * - 1 ;
67028: LD_ADDR_VAR 0 7
67032: PUSH
67033: LD_VAR 0 7
67037: PUSH
67038: LD_INT 1
67040: NEG
67041: MUL
67042: ST_TO_ADDR
// result := [ _x , _y ] ;
67043: LD_ADDR_VAR 0 5
67047: PUSH
67048: LD_VAR 0 6
67052: PUSH
67053: LD_VAR 0 7
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: ST_TO_ADDR
// end ;
67062: LD_VAR 0 5
67066: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67067: LD_INT 0
67069: PPUSH
67070: PPUSH
67071: PPUSH
67072: PPUSH
// task := GetTaskList ( unit ) ;
67073: LD_ADDR_VAR 0 7
67077: PUSH
67078: LD_VAR 0 1
67082: PPUSH
67083: CALL_OW 437
67087: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67088: LD_VAR 0 7
67092: NOT
67093: PUSH
67094: LD_VAR 0 1
67098: PPUSH
67099: LD_VAR 0 2
67103: PPUSH
67104: CALL_OW 308
67108: NOT
67109: AND
67110: IFFALSE 67114
// exit ;
67112: GO 67232
// if IsInArea ( unit , area ) then
67114: LD_VAR 0 1
67118: PPUSH
67119: LD_VAR 0 2
67123: PPUSH
67124: CALL_OW 308
67128: IFFALSE 67146
// begin ComMoveToArea ( unit , goAway ) ;
67130: LD_VAR 0 1
67134: PPUSH
67135: LD_VAR 0 3
67139: PPUSH
67140: CALL_OW 113
// exit ;
67144: GO 67232
// end ; if task [ 1 ] [ 1 ] <> M then
67146: LD_VAR 0 7
67150: PUSH
67151: LD_INT 1
67153: ARRAY
67154: PUSH
67155: LD_INT 1
67157: ARRAY
67158: PUSH
67159: LD_STRING M
67161: NONEQUAL
67162: IFFALSE 67166
// exit ;
67164: GO 67232
// x := task [ 1 ] [ 2 ] ;
67166: LD_ADDR_VAR 0 5
67170: PUSH
67171: LD_VAR 0 7
67175: PUSH
67176: LD_INT 1
67178: ARRAY
67179: PUSH
67180: LD_INT 2
67182: ARRAY
67183: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67184: LD_ADDR_VAR 0 6
67188: PUSH
67189: LD_VAR 0 7
67193: PUSH
67194: LD_INT 1
67196: ARRAY
67197: PUSH
67198: LD_INT 3
67200: ARRAY
67201: ST_TO_ADDR
// if InArea ( x , y , area ) then
67202: LD_VAR 0 5
67206: PPUSH
67207: LD_VAR 0 6
67211: PPUSH
67212: LD_VAR 0 2
67216: PPUSH
67217: CALL_OW 309
67221: IFFALSE 67232
// ComStop ( unit ) ;
67223: LD_VAR 0 1
67227: PPUSH
67228: CALL_OW 141
// end ;
67232: LD_VAR 0 4
67236: RET
// export function Abs ( value ) ; begin
67237: LD_INT 0
67239: PPUSH
// result := value ;
67240: LD_ADDR_VAR 0 2
67244: PUSH
67245: LD_VAR 0 1
67249: ST_TO_ADDR
// if value < 0 then
67250: LD_VAR 0 1
67254: PUSH
67255: LD_INT 0
67257: LESS
67258: IFFALSE 67275
// result := value * - 1 ;
67260: LD_ADDR_VAR 0 2
67264: PUSH
67265: LD_VAR 0 1
67269: PUSH
67270: LD_INT 1
67272: NEG
67273: MUL
67274: ST_TO_ADDR
// end ;
67275: LD_VAR 0 2
67279: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67280: LD_INT 0
67282: PPUSH
67283: PPUSH
67284: PPUSH
67285: PPUSH
67286: PPUSH
67287: PPUSH
67288: PPUSH
67289: PPUSH
// if not unit or not building then
67290: LD_VAR 0 1
67294: NOT
67295: PUSH
67296: LD_VAR 0 2
67300: NOT
67301: OR
67302: IFFALSE 67306
// exit ;
67304: GO 67532
// x := GetX ( building ) ;
67306: LD_ADDR_VAR 0 4
67310: PUSH
67311: LD_VAR 0 2
67315: PPUSH
67316: CALL_OW 250
67320: ST_TO_ADDR
// y := GetY ( building ) ;
67321: LD_ADDR_VAR 0 6
67325: PUSH
67326: LD_VAR 0 2
67330: PPUSH
67331: CALL_OW 251
67335: ST_TO_ADDR
// d := GetDir ( building ) ;
67336: LD_ADDR_VAR 0 8
67340: PUSH
67341: LD_VAR 0 2
67345: PPUSH
67346: CALL_OW 254
67350: ST_TO_ADDR
// r := 4 ;
67351: LD_ADDR_VAR 0 9
67355: PUSH
67356: LD_INT 4
67358: ST_TO_ADDR
// for i := 1 to 5 do
67359: LD_ADDR_VAR 0 10
67363: PUSH
67364: DOUBLE
67365: LD_INT 1
67367: DEC
67368: ST_TO_ADDR
67369: LD_INT 5
67371: PUSH
67372: FOR_TO
67373: IFFALSE 67530
// begin _x := ShiftX ( x , d , r + i ) ;
67375: LD_ADDR_VAR 0 5
67379: PUSH
67380: LD_VAR 0 4
67384: PPUSH
67385: LD_VAR 0 8
67389: PPUSH
67390: LD_VAR 0 9
67394: PUSH
67395: LD_VAR 0 10
67399: PLUS
67400: PPUSH
67401: CALL_OW 272
67405: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67406: LD_ADDR_VAR 0 7
67410: PUSH
67411: LD_VAR 0 6
67415: PPUSH
67416: LD_VAR 0 8
67420: PPUSH
67421: LD_VAR 0 9
67425: PUSH
67426: LD_VAR 0 10
67430: PLUS
67431: PPUSH
67432: CALL_OW 273
67436: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67437: LD_VAR 0 5
67441: PPUSH
67442: LD_VAR 0 7
67446: PPUSH
67447: CALL_OW 488
67451: PUSH
67452: LD_VAR 0 5
67456: PPUSH
67457: LD_VAR 0 7
67461: PPUSH
67462: CALL_OW 428
67466: PPUSH
67467: CALL_OW 247
67471: PUSH
67472: LD_INT 3
67474: PUSH
67475: LD_INT 2
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: IN
67482: NOT
67483: AND
67484: IFFALSE 67528
// begin ComMoveXY ( unit , _x , _y ) ;
67486: LD_VAR 0 1
67490: PPUSH
67491: LD_VAR 0 5
67495: PPUSH
67496: LD_VAR 0 7
67500: PPUSH
67501: CALL_OW 111
// result := [ _x , _y ] ;
67505: LD_ADDR_VAR 0 3
67509: PUSH
67510: LD_VAR 0 5
67514: PUSH
67515: LD_VAR 0 7
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: ST_TO_ADDR
// exit ;
67524: POP
67525: POP
67526: GO 67532
// end ; end ;
67528: GO 67372
67530: POP
67531: POP
// end ;
67532: LD_VAR 0 3
67536: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67537: LD_INT 0
67539: PPUSH
67540: PPUSH
67541: PPUSH
// result := 0 ;
67542: LD_ADDR_VAR 0 3
67546: PUSH
67547: LD_INT 0
67549: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67550: LD_VAR 0 1
67554: PUSH
67555: LD_INT 0
67557: LESS
67558: PUSH
67559: LD_VAR 0 1
67563: PUSH
67564: LD_INT 8
67566: GREATER
67567: OR
67568: PUSH
67569: LD_VAR 0 2
67573: PUSH
67574: LD_INT 0
67576: LESS
67577: OR
67578: PUSH
67579: LD_VAR 0 2
67583: PUSH
67584: LD_INT 8
67586: GREATER
67587: OR
67588: IFFALSE 67592
// exit ;
67590: GO 67667
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67592: LD_ADDR_VAR 0 4
67596: PUSH
67597: LD_INT 22
67599: PUSH
67600: LD_VAR 0 2
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PPUSH
67609: CALL_OW 69
67613: PUSH
67614: FOR_IN
67615: IFFALSE 67665
// begin un := UnitShoot ( i ) ;
67617: LD_ADDR_VAR 0 5
67621: PUSH
67622: LD_VAR 0 4
67626: PPUSH
67627: CALL_OW 504
67631: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67632: LD_VAR 0 5
67636: PPUSH
67637: CALL_OW 255
67641: PUSH
67642: LD_VAR 0 1
67646: EQUAL
67647: IFFALSE 67663
// begin result := un ;
67649: LD_ADDR_VAR 0 3
67653: PUSH
67654: LD_VAR 0 5
67658: ST_TO_ADDR
// exit ;
67659: POP
67660: POP
67661: GO 67667
// end ; end ;
67663: GO 67614
67665: POP
67666: POP
// end ;
67667: LD_VAR 0 3
67671: RET
// export function GetCargoBay ( units ) ; begin
67672: LD_INT 0
67674: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67675: LD_ADDR_VAR 0 2
67679: PUSH
67680: LD_VAR 0 1
67684: PPUSH
67685: LD_INT 2
67687: PUSH
67688: LD_INT 34
67690: PUSH
67691: LD_INT 12
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: LD_INT 34
67700: PUSH
67701: LD_INT 51
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: PUSH
67708: LD_INT 34
67710: PUSH
67711: LD_INT 32
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 34
67720: PUSH
67721: LD_INT 89
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: PPUSH
67735: CALL_OW 72
67739: ST_TO_ADDR
// end ;
67740: LD_VAR 0 2
67744: RET
// export function Negate ( value ) ; begin
67745: LD_INT 0
67747: PPUSH
// result := not value ;
67748: LD_ADDR_VAR 0 2
67752: PUSH
67753: LD_VAR 0 1
67757: NOT
67758: ST_TO_ADDR
// end ;
67759: LD_VAR 0 2
67763: RET
// export function Inc ( value ) ; begin
67764: LD_INT 0
67766: PPUSH
// result := value + 1 ;
67767: LD_ADDR_VAR 0 2
67771: PUSH
67772: LD_VAR 0 1
67776: PUSH
67777: LD_INT 1
67779: PLUS
67780: ST_TO_ADDR
// end ;
67781: LD_VAR 0 2
67785: RET
// export function Dec ( value ) ; begin
67786: LD_INT 0
67788: PPUSH
// result := value - 1 ;
67789: LD_ADDR_VAR 0 2
67793: PUSH
67794: LD_VAR 0 1
67798: PUSH
67799: LD_INT 1
67801: MINUS
67802: ST_TO_ADDR
// end ;
67803: LD_VAR 0 2
67807: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67808: LD_INT 0
67810: PPUSH
67811: PPUSH
67812: PPUSH
67813: PPUSH
67814: PPUSH
67815: PPUSH
67816: PPUSH
67817: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67818: LD_VAR 0 1
67822: PPUSH
67823: LD_VAR 0 2
67827: PPUSH
67828: CALL_OW 488
67832: NOT
67833: PUSH
67834: LD_VAR 0 3
67838: PPUSH
67839: LD_VAR 0 4
67843: PPUSH
67844: CALL_OW 488
67848: NOT
67849: OR
67850: IFFALSE 67863
// begin result := - 1 ;
67852: LD_ADDR_VAR 0 5
67856: PUSH
67857: LD_INT 1
67859: NEG
67860: ST_TO_ADDR
// exit ;
67861: GO 68098
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67863: LD_ADDR_VAR 0 12
67867: PUSH
67868: LD_VAR 0 1
67872: PPUSH
67873: LD_VAR 0 2
67877: PPUSH
67878: LD_VAR 0 3
67882: PPUSH
67883: LD_VAR 0 4
67887: PPUSH
67888: CALL 66948 0 4
67892: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67893: LD_ADDR_VAR 0 11
67897: PUSH
67898: LD_VAR 0 1
67902: PPUSH
67903: LD_VAR 0 2
67907: PPUSH
67908: LD_VAR 0 12
67912: PUSH
67913: LD_INT 1
67915: ARRAY
67916: PPUSH
67917: LD_VAR 0 12
67921: PUSH
67922: LD_INT 2
67924: ARRAY
67925: PPUSH
67926: CALL_OW 298
67930: ST_TO_ADDR
// distance := 9999 ;
67931: LD_ADDR_VAR 0 10
67935: PUSH
67936: LD_INT 9999
67938: ST_TO_ADDR
// for i := 0 to 5 do
67939: LD_ADDR_VAR 0 6
67943: PUSH
67944: DOUBLE
67945: LD_INT 0
67947: DEC
67948: ST_TO_ADDR
67949: LD_INT 5
67951: PUSH
67952: FOR_TO
67953: IFFALSE 68096
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67955: LD_ADDR_VAR 0 7
67959: PUSH
67960: LD_VAR 0 1
67964: PPUSH
67965: LD_VAR 0 6
67969: PPUSH
67970: LD_VAR 0 11
67974: PPUSH
67975: CALL_OW 272
67979: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67980: LD_ADDR_VAR 0 8
67984: PUSH
67985: LD_VAR 0 2
67989: PPUSH
67990: LD_VAR 0 6
67994: PPUSH
67995: LD_VAR 0 11
67999: PPUSH
68000: CALL_OW 273
68004: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68005: LD_VAR 0 7
68009: PPUSH
68010: LD_VAR 0 8
68014: PPUSH
68015: CALL_OW 488
68019: NOT
68020: IFFALSE 68024
// continue ;
68022: GO 67952
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68024: LD_ADDR_VAR 0 9
68028: PUSH
68029: LD_VAR 0 12
68033: PUSH
68034: LD_INT 1
68036: ARRAY
68037: PPUSH
68038: LD_VAR 0 12
68042: PUSH
68043: LD_INT 2
68045: ARRAY
68046: PPUSH
68047: LD_VAR 0 7
68051: PPUSH
68052: LD_VAR 0 8
68056: PPUSH
68057: CALL_OW 298
68061: ST_TO_ADDR
// if tmp < distance then
68062: LD_VAR 0 9
68066: PUSH
68067: LD_VAR 0 10
68071: LESS
68072: IFFALSE 68094
// begin result := i ;
68074: LD_ADDR_VAR 0 5
68078: PUSH
68079: LD_VAR 0 6
68083: ST_TO_ADDR
// distance := tmp ;
68084: LD_ADDR_VAR 0 10
68088: PUSH
68089: LD_VAR 0 9
68093: ST_TO_ADDR
// end ; end ;
68094: GO 67952
68096: POP
68097: POP
// end ;
68098: LD_VAR 0 5
68102: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68103: LD_INT 0
68105: PPUSH
68106: PPUSH
// if not driver or not IsInUnit ( driver ) then
68107: LD_VAR 0 1
68111: NOT
68112: PUSH
68113: LD_VAR 0 1
68117: PPUSH
68118: CALL_OW 310
68122: NOT
68123: OR
68124: IFFALSE 68128
// exit ;
68126: GO 68218
// vehicle := IsInUnit ( driver ) ;
68128: LD_ADDR_VAR 0 3
68132: PUSH
68133: LD_VAR 0 1
68137: PPUSH
68138: CALL_OW 310
68142: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68143: LD_VAR 0 1
68147: PPUSH
68148: LD_STRING \
68150: PUSH
68151: LD_INT 0
68153: PUSH
68154: LD_INT 0
68156: PUSH
68157: LD_INT 0
68159: PUSH
68160: LD_INT 0
68162: PUSH
68163: LD_INT 0
68165: PUSH
68166: LD_INT 0
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: LIST
68173: LIST
68174: LIST
68175: LIST
68176: LIST
68177: PUSH
68178: LD_STRING E
68180: PUSH
68181: LD_INT 0
68183: PUSH
68184: LD_INT 0
68186: PUSH
68187: LD_VAR 0 3
68191: PUSH
68192: LD_INT 0
68194: PUSH
68195: LD_INT 0
68197: PUSH
68198: LD_INT 0
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: LIST
68205: LIST
68206: LIST
68207: LIST
68208: LIST
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: PPUSH
68214: CALL_OW 446
// end ;
68218: LD_VAR 0 2
68222: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68223: LD_INT 0
68225: PPUSH
68226: PPUSH
// if not driver or not IsInUnit ( driver ) then
68227: LD_VAR 0 1
68231: NOT
68232: PUSH
68233: LD_VAR 0 1
68237: PPUSH
68238: CALL_OW 310
68242: NOT
68243: OR
68244: IFFALSE 68248
// exit ;
68246: GO 68338
// vehicle := IsInUnit ( driver ) ;
68248: LD_ADDR_VAR 0 3
68252: PUSH
68253: LD_VAR 0 1
68257: PPUSH
68258: CALL_OW 310
68262: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68263: LD_VAR 0 1
68267: PPUSH
68268: LD_STRING \
68270: PUSH
68271: LD_INT 0
68273: PUSH
68274: LD_INT 0
68276: PUSH
68277: LD_INT 0
68279: PUSH
68280: LD_INT 0
68282: PUSH
68283: LD_INT 0
68285: PUSH
68286: LD_INT 0
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: LIST
68293: LIST
68294: LIST
68295: LIST
68296: LIST
68297: PUSH
68298: LD_STRING E
68300: PUSH
68301: LD_INT 0
68303: PUSH
68304: LD_INT 0
68306: PUSH
68307: LD_VAR 0 3
68311: PUSH
68312: LD_INT 0
68314: PUSH
68315: LD_INT 0
68317: PUSH
68318: LD_INT 0
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: LIST
68325: LIST
68326: LIST
68327: LIST
68328: LIST
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: PPUSH
68334: CALL_OW 447
// end ;
68338: LD_VAR 0 2
68342: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68343: LD_INT 0
68345: PPUSH
68346: PPUSH
68347: PPUSH
// tmp := [ ] ;
68348: LD_ADDR_VAR 0 5
68352: PUSH
68353: EMPTY
68354: ST_TO_ADDR
// for i in units do
68355: LD_ADDR_VAR 0 4
68359: PUSH
68360: LD_VAR 0 1
68364: PUSH
68365: FOR_IN
68366: IFFALSE 68404
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68368: LD_ADDR_VAR 0 5
68372: PUSH
68373: LD_VAR 0 5
68377: PPUSH
68378: LD_VAR 0 5
68382: PUSH
68383: LD_INT 1
68385: PLUS
68386: PPUSH
68387: LD_VAR 0 4
68391: PPUSH
68392: CALL_OW 256
68396: PPUSH
68397: CALL_OW 2
68401: ST_TO_ADDR
68402: GO 68365
68404: POP
68405: POP
// if not tmp then
68406: LD_VAR 0 5
68410: NOT
68411: IFFALSE 68415
// exit ;
68413: GO 68463
// if asc then
68415: LD_VAR 0 2
68419: IFFALSE 68443
// result := SortListByListAsc ( units , tmp ) else
68421: LD_ADDR_VAR 0 3
68425: PUSH
68426: LD_VAR 0 1
68430: PPUSH
68431: LD_VAR 0 5
68435: PPUSH
68436: CALL_OW 76
68440: ST_TO_ADDR
68441: GO 68463
// result := SortListByListDesc ( units , tmp ) ;
68443: LD_ADDR_VAR 0 3
68447: PUSH
68448: LD_VAR 0 1
68452: PPUSH
68453: LD_VAR 0 5
68457: PPUSH
68458: CALL_OW 77
68462: ST_TO_ADDR
// end ;
68463: LD_VAR 0 3
68467: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68468: LD_INT 0
68470: PPUSH
68471: PPUSH
// task := GetTaskList ( mech ) ;
68472: LD_ADDR_VAR 0 4
68476: PUSH
68477: LD_VAR 0 1
68481: PPUSH
68482: CALL_OW 437
68486: ST_TO_ADDR
// if not task then
68487: LD_VAR 0 4
68491: NOT
68492: IFFALSE 68496
// exit ;
68494: GO 68538
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68496: LD_ADDR_VAR 0 3
68500: PUSH
68501: LD_VAR 0 4
68505: PUSH
68506: LD_INT 1
68508: ARRAY
68509: PUSH
68510: LD_INT 1
68512: ARRAY
68513: PUSH
68514: LD_STRING r
68516: EQUAL
68517: PUSH
68518: LD_VAR 0 4
68522: PUSH
68523: LD_INT 1
68525: ARRAY
68526: PUSH
68527: LD_INT 4
68529: ARRAY
68530: PUSH
68531: LD_VAR 0 2
68535: EQUAL
68536: AND
68537: ST_TO_ADDR
// end ;
68538: LD_VAR 0 3
68542: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68543: LD_INT 0
68545: PPUSH
// SetDir ( unit , d ) ;
68546: LD_VAR 0 1
68550: PPUSH
68551: LD_VAR 0 4
68555: PPUSH
68556: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68560: LD_VAR 0 1
68564: PPUSH
68565: LD_VAR 0 2
68569: PPUSH
68570: LD_VAR 0 3
68574: PPUSH
68575: LD_VAR 0 5
68579: PPUSH
68580: CALL_OW 48
// end ;
68584: LD_VAR 0 6
68588: RET
// export function ToNaturalNumber ( number ) ; begin
68589: LD_INT 0
68591: PPUSH
// result := number div 1 ;
68592: LD_ADDR_VAR 0 2
68596: PUSH
68597: LD_VAR 0 1
68601: PUSH
68602: LD_INT 1
68604: DIV
68605: ST_TO_ADDR
// if number < 0 then
68606: LD_VAR 0 1
68610: PUSH
68611: LD_INT 0
68613: LESS
68614: IFFALSE 68624
// result := 0 ;
68616: LD_ADDR_VAR 0 2
68620: PUSH
68621: LD_INT 0
68623: ST_TO_ADDR
// end ;
68624: LD_VAR 0 2
68628: RET
// export function SortByClass ( units , class ) ; var un ; begin
68629: LD_INT 0
68631: PPUSH
68632: PPUSH
// if not units or not class then
68633: LD_VAR 0 1
68637: NOT
68638: PUSH
68639: LD_VAR 0 2
68643: NOT
68644: OR
68645: IFFALSE 68649
// exit ;
68647: GO 68744
// result := [ ] ;
68649: LD_ADDR_VAR 0 3
68653: PUSH
68654: EMPTY
68655: ST_TO_ADDR
// for un in units do
68656: LD_ADDR_VAR 0 4
68660: PUSH
68661: LD_VAR 0 1
68665: PUSH
68666: FOR_IN
68667: IFFALSE 68742
// if GetClass ( un ) = class then
68669: LD_VAR 0 4
68673: PPUSH
68674: CALL_OW 257
68678: PUSH
68679: LD_VAR 0 2
68683: EQUAL
68684: IFFALSE 68711
// result := Insert ( result , 1 , un ) else
68686: LD_ADDR_VAR 0 3
68690: PUSH
68691: LD_VAR 0 3
68695: PPUSH
68696: LD_INT 1
68698: PPUSH
68699: LD_VAR 0 4
68703: PPUSH
68704: CALL_OW 2
68708: ST_TO_ADDR
68709: GO 68740
// result := Replace ( result , result + 1 , un ) ;
68711: LD_ADDR_VAR 0 3
68715: PUSH
68716: LD_VAR 0 3
68720: PPUSH
68721: LD_VAR 0 3
68725: PUSH
68726: LD_INT 1
68728: PLUS
68729: PPUSH
68730: LD_VAR 0 4
68734: PPUSH
68735: CALL_OW 1
68739: ST_TO_ADDR
68740: GO 68666
68742: POP
68743: POP
// end ;
68744: LD_VAR 0 3
68748: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68749: LD_INT 0
68751: PPUSH
68752: PPUSH
68753: PPUSH
68754: PPUSH
68755: PPUSH
68756: PPUSH
68757: PPUSH
// result := [ ] ;
68758: LD_ADDR_VAR 0 4
68762: PUSH
68763: EMPTY
68764: ST_TO_ADDR
// if x - r < 0 then
68765: LD_VAR 0 1
68769: PUSH
68770: LD_VAR 0 3
68774: MINUS
68775: PUSH
68776: LD_INT 0
68778: LESS
68779: IFFALSE 68791
// min_x := 0 else
68781: LD_ADDR_VAR 0 8
68785: PUSH
68786: LD_INT 0
68788: ST_TO_ADDR
68789: GO 68807
// min_x := x - r ;
68791: LD_ADDR_VAR 0 8
68795: PUSH
68796: LD_VAR 0 1
68800: PUSH
68801: LD_VAR 0 3
68805: MINUS
68806: ST_TO_ADDR
// if y - r < 0 then
68807: LD_VAR 0 2
68811: PUSH
68812: LD_VAR 0 3
68816: MINUS
68817: PUSH
68818: LD_INT 0
68820: LESS
68821: IFFALSE 68833
// min_y := 0 else
68823: LD_ADDR_VAR 0 7
68827: PUSH
68828: LD_INT 0
68830: ST_TO_ADDR
68831: GO 68849
// min_y := y - r ;
68833: LD_ADDR_VAR 0 7
68837: PUSH
68838: LD_VAR 0 2
68842: PUSH
68843: LD_VAR 0 3
68847: MINUS
68848: ST_TO_ADDR
// max_x := x + r ;
68849: LD_ADDR_VAR 0 9
68853: PUSH
68854: LD_VAR 0 1
68858: PUSH
68859: LD_VAR 0 3
68863: PLUS
68864: ST_TO_ADDR
// max_y := y + r ;
68865: LD_ADDR_VAR 0 10
68869: PUSH
68870: LD_VAR 0 2
68874: PUSH
68875: LD_VAR 0 3
68879: PLUS
68880: ST_TO_ADDR
// for _x = min_x to max_x do
68881: LD_ADDR_VAR 0 5
68885: PUSH
68886: DOUBLE
68887: LD_VAR 0 8
68891: DEC
68892: ST_TO_ADDR
68893: LD_VAR 0 9
68897: PUSH
68898: FOR_TO
68899: IFFALSE 69000
// for _y = min_y to max_y do
68901: LD_ADDR_VAR 0 6
68905: PUSH
68906: DOUBLE
68907: LD_VAR 0 7
68911: DEC
68912: ST_TO_ADDR
68913: LD_VAR 0 10
68917: PUSH
68918: FOR_TO
68919: IFFALSE 68996
// begin if not ValidHex ( _x , _y ) then
68921: LD_VAR 0 5
68925: PPUSH
68926: LD_VAR 0 6
68930: PPUSH
68931: CALL_OW 488
68935: NOT
68936: IFFALSE 68940
// continue ;
68938: GO 68918
// if GetResourceTypeXY ( _x , _y ) then
68940: LD_VAR 0 5
68944: PPUSH
68945: LD_VAR 0 6
68949: PPUSH
68950: CALL_OW 283
68954: IFFALSE 68994
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68956: LD_ADDR_VAR 0 4
68960: PUSH
68961: LD_VAR 0 4
68965: PPUSH
68966: LD_VAR 0 4
68970: PUSH
68971: LD_INT 1
68973: PLUS
68974: PPUSH
68975: LD_VAR 0 5
68979: PUSH
68980: LD_VAR 0 6
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: PPUSH
68989: CALL_OW 1
68993: ST_TO_ADDR
// end ;
68994: GO 68918
68996: POP
68997: POP
68998: GO 68898
69000: POP
69001: POP
// end ;
69002: LD_VAR 0 4
69006: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69007: LD_INT 0
69009: PPUSH
69010: PPUSH
69011: PPUSH
69012: PPUSH
69013: PPUSH
69014: PPUSH
69015: PPUSH
69016: PPUSH
// if not units then
69017: LD_VAR 0 1
69021: NOT
69022: IFFALSE 69026
// exit ;
69024: GO 69550
// result := UnitFilter ( units , [ f_ok ] ) ;
69026: LD_ADDR_VAR 0 3
69030: PUSH
69031: LD_VAR 0 1
69035: PPUSH
69036: LD_INT 50
69038: PUSH
69039: EMPTY
69040: LIST
69041: PPUSH
69042: CALL_OW 72
69046: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69047: LD_ADDR_VAR 0 8
69051: PUSH
69052: LD_VAR 0 1
69056: PUSH
69057: LD_INT 1
69059: ARRAY
69060: PPUSH
69061: CALL_OW 255
69065: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69066: LD_ADDR_VAR 0 10
69070: PUSH
69071: LD_INT 29
69073: PUSH
69074: LD_INT 91
69076: PUSH
69077: LD_INT 49
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: LIST
69084: ST_TO_ADDR
// if not result then
69085: LD_VAR 0 3
69089: NOT
69090: IFFALSE 69094
// exit ;
69092: GO 69550
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69094: LD_ADDR_VAR 0 5
69098: PUSH
69099: LD_INT 81
69101: PUSH
69102: LD_VAR 0 8
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PPUSH
69111: CALL_OW 69
69115: ST_TO_ADDR
// for i in result do
69116: LD_ADDR_VAR 0 4
69120: PUSH
69121: LD_VAR 0 3
69125: PUSH
69126: FOR_IN
69127: IFFALSE 69548
// begin tag := GetTag ( i ) + 1 ;
69129: LD_ADDR_VAR 0 9
69133: PUSH
69134: LD_VAR 0 4
69138: PPUSH
69139: CALL_OW 110
69143: PUSH
69144: LD_INT 1
69146: PLUS
69147: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69148: LD_ADDR_VAR 0 7
69152: PUSH
69153: LD_VAR 0 4
69157: PPUSH
69158: CALL_OW 250
69162: PPUSH
69163: LD_VAR 0 4
69167: PPUSH
69168: CALL_OW 251
69172: PPUSH
69173: LD_INT 6
69175: PPUSH
69176: CALL 68749 0 3
69180: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69181: LD_VAR 0 4
69185: PPUSH
69186: CALL_OW 247
69190: PUSH
69191: LD_INT 2
69193: EQUAL
69194: PUSH
69195: LD_VAR 0 7
69199: AND
69200: PUSH
69201: LD_VAR 0 4
69205: PPUSH
69206: CALL_OW 264
69210: PUSH
69211: LD_VAR 0 10
69215: IN
69216: NOT
69217: AND
69218: IFFALSE 69257
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69220: LD_VAR 0 4
69224: PPUSH
69225: LD_VAR 0 7
69229: PUSH
69230: LD_INT 1
69232: ARRAY
69233: PUSH
69234: LD_INT 1
69236: ARRAY
69237: PPUSH
69238: LD_VAR 0 7
69242: PUSH
69243: LD_INT 1
69245: ARRAY
69246: PUSH
69247: LD_INT 2
69249: ARRAY
69250: PPUSH
69251: CALL_OW 116
69255: GO 69546
// if path > tag then
69257: LD_VAR 0 2
69261: PUSH
69262: LD_VAR 0 9
69266: GREATER
69267: IFFALSE 69475
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69269: LD_ADDR_VAR 0 6
69273: PUSH
69274: LD_VAR 0 5
69278: PPUSH
69279: LD_INT 91
69281: PUSH
69282: LD_VAR 0 4
69286: PUSH
69287: LD_INT 8
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: LIST
69294: PPUSH
69295: CALL_OW 72
69299: ST_TO_ADDR
// if nearEnemy then
69300: LD_VAR 0 6
69304: IFFALSE 69373
// begin if GetWeapon ( i ) = ru_time_lapser then
69306: LD_VAR 0 4
69310: PPUSH
69311: CALL_OW 264
69315: PUSH
69316: LD_INT 49
69318: EQUAL
69319: IFFALSE 69347
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69321: LD_VAR 0 4
69325: PPUSH
69326: LD_VAR 0 6
69330: PPUSH
69331: LD_VAR 0 4
69335: PPUSH
69336: CALL_OW 74
69340: PPUSH
69341: CALL_OW 112
69345: GO 69371
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69347: LD_VAR 0 4
69351: PPUSH
69352: LD_VAR 0 6
69356: PPUSH
69357: LD_VAR 0 4
69361: PPUSH
69362: CALL_OW 74
69366: PPUSH
69367: CALL_OW 115
// end else
69371: GO 69473
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69373: LD_VAR 0 4
69377: PPUSH
69378: LD_VAR 0 2
69382: PUSH
69383: LD_VAR 0 9
69387: ARRAY
69388: PUSH
69389: LD_INT 1
69391: ARRAY
69392: PPUSH
69393: LD_VAR 0 2
69397: PUSH
69398: LD_VAR 0 9
69402: ARRAY
69403: PUSH
69404: LD_INT 2
69406: ARRAY
69407: PPUSH
69408: CALL_OW 297
69412: PUSH
69413: LD_INT 6
69415: GREATER
69416: IFFALSE 69459
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69418: LD_VAR 0 4
69422: PPUSH
69423: LD_VAR 0 2
69427: PUSH
69428: LD_VAR 0 9
69432: ARRAY
69433: PUSH
69434: LD_INT 1
69436: ARRAY
69437: PPUSH
69438: LD_VAR 0 2
69442: PUSH
69443: LD_VAR 0 9
69447: ARRAY
69448: PUSH
69449: LD_INT 2
69451: ARRAY
69452: PPUSH
69453: CALL_OW 114
69457: GO 69473
// SetTag ( i , tag ) ;
69459: LD_VAR 0 4
69463: PPUSH
69464: LD_VAR 0 9
69468: PPUSH
69469: CALL_OW 109
// end else
69473: GO 69546
// if enemy then
69475: LD_VAR 0 5
69479: IFFALSE 69546
// begin if GetWeapon ( i ) = ru_time_lapser then
69481: LD_VAR 0 4
69485: PPUSH
69486: CALL_OW 264
69490: PUSH
69491: LD_INT 49
69493: EQUAL
69494: IFFALSE 69522
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69496: LD_VAR 0 4
69500: PPUSH
69501: LD_VAR 0 5
69505: PPUSH
69506: LD_VAR 0 4
69510: PPUSH
69511: CALL_OW 74
69515: PPUSH
69516: CALL_OW 112
69520: GO 69546
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69522: LD_VAR 0 4
69526: PPUSH
69527: LD_VAR 0 5
69531: PPUSH
69532: LD_VAR 0 4
69536: PPUSH
69537: CALL_OW 74
69541: PPUSH
69542: CALL_OW 115
// end ; end ;
69546: GO 69126
69548: POP
69549: POP
// end ;
69550: LD_VAR 0 3
69554: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69555: LD_INT 0
69557: PPUSH
69558: PPUSH
69559: PPUSH
// if not unit or IsInUnit ( unit ) then
69560: LD_VAR 0 1
69564: NOT
69565: PUSH
69566: LD_VAR 0 1
69570: PPUSH
69571: CALL_OW 310
69575: OR
69576: IFFALSE 69580
// exit ;
69578: GO 69671
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69580: LD_ADDR_VAR 0 4
69584: PUSH
69585: LD_VAR 0 1
69589: PPUSH
69590: CALL_OW 250
69594: PPUSH
69595: LD_VAR 0 2
69599: PPUSH
69600: LD_INT 1
69602: PPUSH
69603: CALL_OW 272
69607: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69608: LD_ADDR_VAR 0 5
69612: PUSH
69613: LD_VAR 0 1
69617: PPUSH
69618: CALL_OW 251
69622: PPUSH
69623: LD_VAR 0 2
69627: PPUSH
69628: LD_INT 1
69630: PPUSH
69631: CALL_OW 273
69635: ST_TO_ADDR
// if ValidHex ( x , y ) then
69636: LD_VAR 0 4
69640: PPUSH
69641: LD_VAR 0 5
69645: PPUSH
69646: CALL_OW 488
69650: IFFALSE 69671
// ComTurnXY ( unit , x , y ) ;
69652: LD_VAR 0 1
69656: PPUSH
69657: LD_VAR 0 4
69661: PPUSH
69662: LD_VAR 0 5
69666: PPUSH
69667: CALL_OW 118
// end ;
69671: LD_VAR 0 3
69675: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69676: LD_INT 0
69678: PPUSH
69679: PPUSH
// result := false ;
69680: LD_ADDR_VAR 0 3
69684: PUSH
69685: LD_INT 0
69687: ST_TO_ADDR
// if not units then
69688: LD_VAR 0 2
69692: NOT
69693: IFFALSE 69697
// exit ;
69695: GO 69742
// for i in units do
69697: LD_ADDR_VAR 0 4
69701: PUSH
69702: LD_VAR 0 2
69706: PUSH
69707: FOR_IN
69708: IFFALSE 69740
// if See ( side , i ) then
69710: LD_VAR 0 1
69714: PPUSH
69715: LD_VAR 0 4
69719: PPUSH
69720: CALL_OW 292
69724: IFFALSE 69738
// begin result := true ;
69726: LD_ADDR_VAR 0 3
69730: PUSH
69731: LD_INT 1
69733: ST_TO_ADDR
// exit ;
69734: POP
69735: POP
69736: GO 69742
// end ;
69738: GO 69707
69740: POP
69741: POP
// end ;
69742: LD_VAR 0 3
69746: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69747: LD_INT 0
69749: PPUSH
69750: PPUSH
69751: PPUSH
69752: PPUSH
// if not unit or not points then
69753: LD_VAR 0 1
69757: NOT
69758: PUSH
69759: LD_VAR 0 2
69763: NOT
69764: OR
69765: IFFALSE 69769
// exit ;
69767: GO 69859
// dist := 99999 ;
69769: LD_ADDR_VAR 0 5
69773: PUSH
69774: LD_INT 99999
69776: ST_TO_ADDR
// for i in points do
69777: LD_ADDR_VAR 0 4
69781: PUSH
69782: LD_VAR 0 2
69786: PUSH
69787: FOR_IN
69788: IFFALSE 69857
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69790: LD_ADDR_VAR 0 6
69794: PUSH
69795: LD_VAR 0 1
69799: PPUSH
69800: LD_VAR 0 4
69804: PUSH
69805: LD_INT 1
69807: ARRAY
69808: PPUSH
69809: LD_VAR 0 4
69813: PUSH
69814: LD_INT 2
69816: ARRAY
69817: PPUSH
69818: CALL_OW 297
69822: ST_TO_ADDR
// if tmpDist < dist then
69823: LD_VAR 0 6
69827: PUSH
69828: LD_VAR 0 5
69832: LESS
69833: IFFALSE 69855
// begin result := i ;
69835: LD_ADDR_VAR 0 3
69839: PUSH
69840: LD_VAR 0 4
69844: ST_TO_ADDR
// dist := tmpDist ;
69845: LD_ADDR_VAR 0 5
69849: PUSH
69850: LD_VAR 0 6
69854: ST_TO_ADDR
// end ; end ;
69855: GO 69787
69857: POP
69858: POP
// end ;
69859: LD_VAR 0 3
69863: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69864: LD_INT 0
69866: PPUSH
// uc_side := side ;
69867: LD_ADDR_OWVAR 20
69871: PUSH
69872: LD_VAR 0 1
69876: ST_TO_ADDR
// uc_nation := 3 ;
69877: LD_ADDR_OWVAR 21
69881: PUSH
69882: LD_INT 3
69884: ST_TO_ADDR
// vc_chassis := 25 ;
69885: LD_ADDR_OWVAR 37
69889: PUSH
69890: LD_INT 25
69892: ST_TO_ADDR
// vc_engine := engine_siberite ;
69893: LD_ADDR_OWVAR 39
69897: PUSH
69898: LD_INT 3
69900: ST_TO_ADDR
// vc_control := control_computer ;
69901: LD_ADDR_OWVAR 38
69905: PUSH
69906: LD_INT 3
69908: ST_TO_ADDR
// vc_weapon := 59 ;
69909: LD_ADDR_OWVAR 40
69913: PUSH
69914: LD_INT 59
69916: ST_TO_ADDR
// result := CreateVehicle ;
69917: LD_ADDR_VAR 0 5
69921: PUSH
69922: CALL_OW 45
69926: ST_TO_ADDR
// SetDir ( result , d ) ;
69927: LD_VAR 0 5
69931: PPUSH
69932: LD_VAR 0 4
69936: PPUSH
69937: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69941: LD_VAR 0 5
69945: PPUSH
69946: LD_VAR 0 2
69950: PPUSH
69951: LD_VAR 0 3
69955: PPUSH
69956: LD_INT 0
69958: PPUSH
69959: CALL_OW 48
// end ;
69963: LD_VAR 0 5
69967: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69968: LD_INT 0
69970: PPUSH
69971: PPUSH
69972: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69973: LD_ADDR_VAR 0 2
69977: PUSH
69978: LD_INT 0
69980: PUSH
69981: LD_INT 0
69983: PUSH
69984: LD_INT 0
69986: PUSH
69987: LD_INT 0
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: LIST
69994: LIST
69995: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69996: LD_VAR 0 1
70000: NOT
70001: PUSH
70002: LD_VAR 0 1
70006: PPUSH
70007: CALL_OW 264
70011: PUSH
70012: LD_INT 12
70014: PUSH
70015: LD_INT 51
70017: PUSH
70018: LD_INT 32
70020: PUSH
70021: LD_INT 89
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: LIST
70028: LIST
70029: IN
70030: NOT
70031: OR
70032: IFFALSE 70036
// exit ;
70034: GO 70134
// for i := 1 to 3 do
70036: LD_ADDR_VAR 0 3
70040: PUSH
70041: DOUBLE
70042: LD_INT 1
70044: DEC
70045: ST_TO_ADDR
70046: LD_INT 3
70048: PUSH
70049: FOR_TO
70050: IFFALSE 70132
// begin tmp := GetCargo ( cargo , i ) ;
70052: LD_ADDR_VAR 0 4
70056: PUSH
70057: LD_VAR 0 1
70061: PPUSH
70062: LD_VAR 0 3
70066: PPUSH
70067: CALL_OW 289
70071: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70072: LD_ADDR_VAR 0 2
70076: PUSH
70077: LD_VAR 0 2
70081: PPUSH
70082: LD_VAR 0 3
70086: PPUSH
70087: LD_VAR 0 4
70091: PPUSH
70092: CALL_OW 1
70096: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70097: LD_ADDR_VAR 0 2
70101: PUSH
70102: LD_VAR 0 2
70106: PPUSH
70107: LD_INT 4
70109: PPUSH
70110: LD_VAR 0 2
70114: PUSH
70115: LD_INT 4
70117: ARRAY
70118: PUSH
70119: LD_VAR 0 4
70123: PLUS
70124: PPUSH
70125: CALL_OW 1
70129: ST_TO_ADDR
// end ;
70130: GO 70049
70132: POP
70133: POP
// end ;
70134: LD_VAR 0 2
70138: RET
// export function Length ( array ) ; begin
70139: LD_INT 0
70141: PPUSH
// result := array + 0 ;
70142: LD_ADDR_VAR 0 2
70146: PUSH
70147: LD_VAR 0 1
70151: PUSH
70152: LD_INT 0
70154: PLUS
70155: ST_TO_ADDR
// end ;
70156: LD_VAR 0 2
70160: RET
// export function PrepareArray ( array ) ; begin
70161: LD_INT 0
70163: PPUSH
// result := array diff 0 ;
70164: LD_ADDR_VAR 0 2
70168: PUSH
70169: LD_VAR 0 1
70173: PUSH
70174: LD_INT 0
70176: DIFF
70177: ST_TO_ADDR
// if not result [ 1 ] then
70178: LD_VAR 0 2
70182: PUSH
70183: LD_INT 1
70185: ARRAY
70186: NOT
70187: IFFALSE 70207
// result := Delete ( result , 1 ) ;
70189: LD_ADDR_VAR 0 2
70193: PUSH
70194: LD_VAR 0 2
70198: PPUSH
70199: LD_INT 1
70201: PPUSH
70202: CALL_OW 3
70206: ST_TO_ADDR
// end ;
70207: LD_VAR 0 2
70211: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70212: LD_INT 0
70214: PPUSH
70215: PPUSH
70216: PPUSH
70217: PPUSH
// sibRocketRange := 25 ;
70218: LD_ADDR_VAR 0 6
70222: PUSH
70223: LD_INT 25
70225: ST_TO_ADDR
// result := false ;
70226: LD_ADDR_VAR 0 4
70230: PUSH
70231: LD_INT 0
70233: ST_TO_ADDR
// for i := 0 to 5 do
70234: LD_ADDR_VAR 0 5
70238: PUSH
70239: DOUBLE
70240: LD_INT 0
70242: DEC
70243: ST_TO_ADDR
70244: LD_INT 5
70246: PUSH
70247: FOR_TO
70248: IFFALSE 70315
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70250: LD_VAR 0 1
70254: PPUSH
70255: LD_VAR 0 5
70259: PPUSH
70260: LD_VAR 0 6
70264: PPUSH
70265: CALL_OW 272
70269: PPUSH
70270: LD_VAR 0 2
70274: PPUSH
70275: LD_VAR 0 5
70279: PPUSH
70280: LD_VAR 0 6
70284: PPUSH
70285: CALL_OW 273
70289: PPUSH
70290: LD_VAR 0 3
70294: PPUSH
70295: CALL_OW 309
70299: IFFALSE 70313
// begin result := true ;
70301: LD_ADDR_VAR 0 4
70305: PUSH
70306: LD_INT 1
70308: ST_TO_ADDR
// exit ;
70309: POP
70310: POP
70311: GO 70317
// end ;
70313: GO 70247
70315: POP
70316: POP
// end ;
70317: LD_VAR 0 4
70321: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70322: LD_INT 0
70324: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70325: LD_VAR 0 1
70329: PPUSH
70330: LD_VAR 0 2
70334: PPUSH
70335: LD_INT 0
70337: PPUSH
70338: LD_INT 0
70340: PPUSH
70341: LD_INT 1
70343: PPUSH
70344: LD_INT 0
70346: PPUSH
70347: CALL_OW 587
// end ; end_of_file end_of_file
70351: LD_VAR 0 3
70355: RET
// every 0 0$1 do
70356: GO 70358
70358: DISABLE
// begin enable ;
70359: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
70360: LD_STRING updateTimer(
70362: PUSH
70363: LD_OWVAR 1
70367: STR
70368: PUSH
70369: LD_STRING );
70371: STR
70372: PPUSH
70373: CALL_OW 559
// end ;
70377: END
// export function SOS_MapStart ( ) ; begin
70378: LD_INT 0
70380: PPUSH
// if streamModeActive then
70381: LD_EXP 62
70385: IFFALSE 70394
// DefineStreamItems ( true ) ;
70387: LD_INT 1
70389: PPUSH
70390: CALL 72048 0 1
// UpdateFactoryWaypoints ( ) ;
70394: CALL 84909 0 0
// UpdateWarehouseGatheringPoints ( ) ;
70398: CALL 85166 0 0
// end ;
70402: LD_VAR 0 1
70406: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
70407: LD_INT 0
70409: PPUSH
// if p2 = hack_mode then
70410: LD_VAR 0 2
70414: PUSH
70415: LD_INT 100
70417: EQUAL
70418: IFFALSE 71421
// begin if not StreamModeActive then
70420: LD_EXP 62
70424: NOT
70425: IFFALSE 70435
// StreamModeActive := true ;
70427: LD_ADDR_EXP 62
70431: PUSH
70432: LD_INT 1
70434: ST_TO_ADDR
// if p3 = 0 then
70435: LD_VAR 0 3
70439: PUSH
70440: LD_INT 0
70442: EQUAL
70443: IFFALSE 70449
// InitStreamMode ;
70445: CALL 71584 0 0
// if p3 = 1 then
70449: LD_VAR 0 3
70453: PUSH
70454: LD_INT 1
70456: EQUAL
70457: IFFALSE 70467
// sRocket := true ;
70459: LD_ADDR_EXP 67
70463: PUSH
70464: LD_INT 1
70466: ST_TO_ADDR
// if p3 = 2 then
70467: LD_VAR 0 3
70471: PUSH
70472: LD_INT 2
70474: EQUAL
70475: IFFALSE 70485
// sSpeed := true ;
70477: LD_ADDR_EXP 66
70481: PUSH
70482: LD_INT 1
70484: ST_TO_ADDR
// if p3 = 3 then
70485: LD_VAR 0 3
70489: PUSH
70490: LD_INT 3
70492: EQUAL
70493: IFFALSE 70503
// sEngine := true ;
70495: LD_ADDR_EXP 68
70499: PUSH
70500: LD_INT 1
70502: ST_TO_ADDR
// if p3 = 4 then
70503: LD_VAR 0 3
70507: PUSH
70508: LD_INT 4
70510: EQUAL
70511: IFFALSE 70521
// sSpec := true ;
70513: LD_ADDR_EXP 65
70517: PUSH
70518: LD_INT 1
70520: ST_TO_ADDR
// if p3 = 5 then
70521: LD_VAR 0 3
70525: PUSH
70526: LD_INT 5
70528: EQUAL
70529: IFFALSE 70539
// sLevel := true ;
70531: LD_ADDR_EXP 69
70535: PUSH
70536: LD_INT 1
70538: ST_TO_ADDR
// if p3 = 6 then
70539: LD_VAR 0 3
70543: PUSH
70544: LD_INT 6
70546: EQUAL
70547: IFFALSE 70557
// sArmoury := true ;
70549: LD_ADDR_EXP 70
70553: PUSH
70554: LD_INT 1
70556: ST_TO_ADDR
// if p3 = 7 then
70557: LD_VAR 0 3
70561: PUSH
70562: LD_INT 7
70564: EQUAL
70565: IFFALSE 70575
// sRadar := true ;
70567: LD_ADDR_EXP 71
70571: PUSH
70572: LD_INT 1
70574: ST_TO_ADDR
// if p3 = 8 then
70575: LD_VAR 0 3
70579: PUSH
70580: LD_INT 8
70582: EQUAL
70583: IFFALSE 70593
// sBunker := true ;
70585: LD_ADDR_EXP 72
70589: PUSH
70590: LD_INT 1
70592: ST_TO_ADDR
// if p3 = 9 then
70593: LD_VAR 0 3
70597: PUSH
70598: LD_INT 9
70600: EQUAL
70601: IFFALSE 70611
// sHack := true ;
70603: LD_ADDR_EXP 73
70607: PUSH
70608: LD_INT 1
70610: ST_TO_ADDR
// if p3 = 10 then
70611: LD_VAR 0 3
70615: PUSH
70616: LD_INT 10
70618: EQUAL
70619: IFFALSE 70629
// sFire := true ;
70621: LD_ADDR_EXP 74
70625: PUSH
70626: LD_INT 1
70628: ST_TO_ADDR
// if p3 = 11 then
70629: LD_VAR 0 3
70633: PUSH
70634: LD_INT 11
70636: EQUAL
70637: IFFALSE 70647
// sRefresh := true ;
70639: LD_ADDR_EXP 75
70643: PUSH
70644: LD_INT 1
70646: ST_TO_ADDR
// if p3 = 12 then
70647: LD_VAR 0 3
70651: PUSH
70652: LD_INT 12
70654: EQUAL
70655: IFFALSE 70665
// sExp := true ;
70657: LD_ADDR_EXP 76
70661: PUSH
70662: LD_INT 1
70664: ST_TO_ADDR
// if p3 = 13 then
70665: LD_VAR 0 3
70669: PUSH
70670: LD_INT 13
70672: EQUAL
70673: IFFALSE 70683
// sDepot := true ;
70675: LD_ADDR_EXP 77
70679: PUSH
70680: LD_INT 1
70682: ST_TO_ADDR
// if p3 = 14 then
70683: LD_VAR 0 3
70687: PUSH
70688: LD_INT 14
70690: EQUAL
70691: IFFALSE 70701
// sFlag := true ;
70693: LD_ADDR_EXP 78
70697: PUSH
70698: LD_INT 1
70700: ST_TO_ADDR
// if p3 = 15 then
70701: LD_VAR 0 3
70705: PUSH
70706: LD_INT 15
70708: EQUAL
70709: IFFALSE 70719
// sKamikadze := true ;
70711: LD_ADDR_EXP 86
70715: PUSH
70716: LD_INT 1
70718: ST_TO_ADDR
// if p3 = 16 then
70719: LD_VAR 0 3
70723: PUSH
70724: LD_INT 16
70726: EQUAL
70727: IFFALSE 70737
// sTroll := true ;
70729: LD_ADDR_EXP 87
70733: PUSH
70734: LD_INT 1
70736: ST_TO_ADDR
// if p3 = 17 then
70737: LD_VAR 0 3
70741: PUSH
70742: LD_INT 17
70744: EQUAL
70745: IFFALSE 70755
// sSlow := true ;
70747: LD_ADDR_EXP 88
70751: PUSH
70752: LD_INT 1
70754: ST_TO_ADDR
// if p3 = 18 then
70755: LD_VAR 0 3
70759: PUSH
70760: LD_INT 18
70762: EQUAL
70763: IFFALSE 70773
// sLack := true ;
70765: LD_ADDR_EXP 89
70769: PUSH
70770: LD_INT 1
70772: ST_TO_ADDR
// if p3 = 19 then
70773: LD_VAR 0 3
70777: PUSH
70778: LD_INT 19
70780: EQUAL
70781: IFFALSE 70791
// sTank := true ;
70783: LD_ADDR_EXP 91
70787: PUSH
70788: LD_INT 1
70790: ST_TO_ADDR
// if p3 = 20 then
70791: LD_VAR 0 3
70795: PUSH
70796: LD_INT 20
70798: EQUAL
70799: IFFALSE 70809
// sRemote := true ;
70801: LD_ADDR_EXP 92
70805: PUSH
70806: LD_INT 1
70808: ST_TO_ADDR
// if p3 = 21 then
70809: LD_VAR 0 3
70813: PUSH
70814: LD_INT 21
70816: EQUAL
70817: IFFALSE 70827
// sPowell := true ;
70819: LD_ADDR_EXP 93
70823: PUSH
70824: LD_INT 1
70826: ST_TO_ADDR
// if p3 = 22 then
70827: LD_VAR 0 3
70831: PUSH
70832: LD_INT 22
70834: EQUAL
70835: IFFALSE 70845
// sTeleport := true ;
70837: LD_ADDR_EXP 96
70841: PUSH
70842: LD_INT 1
70844: ST_TO_ADDR
// if p3 = 23 then
70845: LD_VAR 0 3
70849: PUSH
70850: LD_INT 23
70852: EQUAL
70853: IFFALSE 70863
// sOilTower := true ;
70855: LD_ADDR_EXP 98
70859: PUSH
70860: LD_INT 1
70862: ST_TO_ADDR
// if p3 = 24 then
70863: LD_VAR 0 3
70867: PUSH
70868: LD_INT 24
70870: EQUAL
70871: IFFALSE 70881
// sShovel := true ;
70873: LD_ADDR_EXP 99
70877: PUSH
70878: LD_INT 1
70880: ST_TO_ADDR
// if p3 = 25 then
70881: LD_VAR 0 3
70885: PUSH
70886: LD_INT 25
70888: EQUAL
70889: IFFALSE 70899
// sSheik := true ;
70891: LD_ADDR_EXP 100
70895: PUSH
70896: LD_INT 1
70898: ST_TO_ADDR
// if p3 = 26 then
70899: LD_VAR 0 3
70903: PUSH
70904: LD_INT 26
70906: EQUAL
70907: IFFALSE 70917
// sEarthquake := true ;
70909: LD_ADDR_EXP 102
70913: PUSH
70914: LD_INT 1
70916: ST_TO_ADDR
// if p3 = 27 then
70917: LD_VAR 0 3
70921: PUSH
70922: LD_INT 27
70924: EQUAL
70925: IFFALSE 70935
// sAI := true ;
70927: LD_ADDR_EXP 103
70931: PUSH
70932: LD_INT 1
70934: ST_TO_ADDR
// if p3 = 28 then
70935: LD_VAR 0 3
70939: PUSH
70940: LD_INT 28
70942: EQUAL
70943: IFFALSE 70953
// sCargo := true ;
70945: LD_ADDR_EXP 106
70949: PUSH
70950: LD_INT 1
70952: ST_TO_ADDR
// if p3 = 29 then
70953: LD_VAR 0 3
70957: PUSH
70958: LD_INT 29
70960: EQUAL
70961: IFFALSE 70971
// sDLaser := true ;
70963: LD_ADDR_EXP 107
70967: PUSH
70968: LD_INT 1
70970: ST_TO_ADDR
// if p3 = 30 then
70971: LD_VAR 0 3
70975: PUSH
70976: LD_INT 30
70978: EQUAL
70979: IFFALSE 70989
// sExchange := true ;
70981: LD_ADDR_EXP 108
70985: PUSH
70986: LD_INT 1
70988: ST_TO_ADDR
// if p3 = 31 then
70989: LD_VAR 0 3
70993: PUSH
70994: LD_INT 31
70996: EQUAL
70997: IFFALSE 71007
// sFac := true ;
70999: LD_ADDR_EXP 109
71003: PUSH
71004: LD_INT 1
71006: ST_TO_ADDR
// if p3 = 32 then
71007: LD_VAR 0 3
71011: PUSH
71012: LD_INT 32
71014: EQUAL
71015: IFFALSE 71025
// sPower := true ;
71017: LD_ADDR_EXP 110
71021: PUSH
71022: LD_INT 1
71024: ST_TO_ADDR
// if p3 = 33 then
71025: LD_VAR 0 3
71029: PUSH
71030: LD_INT 33
71032: EQUAL
71033: IFFALSE 71043
// sRandom := true ;
71035: LD_ADDR_EXP 111
71039: PUSH
71040: LD_INT 1
71042: ST_TO_ADDR
// if p3 = 34 then
71043: LD_VAR 0 3
71047: PUSH
71048: LD_INT 34
71050: EQUAL
71051: IFFALSE 71061
// sShield := true ;
71053: LD_ADDR_EXP 112
71057: PUSH
71058: LD_INT 1
71060: ST_TO_ADDR
// if p3 = 35 then
71061: LD_VAR 0 3
71065: PUSH
71066: LD_INT 35
71068: EQUAL
71069: IFFALSE 71079
// sTime := true ;
71071: LD_ADDR_EXP 113
71075: PUSH
71076: LD_INT 1
71078: ST_TO_ADDR
// if p3 = 36 then
71079: LD_VAR 0 3
71083: PUSH
71084: LD_INT 36
71086: EQUAL
71087: IFFALSE 71097
// sTools := true ;
71089: LD_ADDR_EXP 114
71093: PUSH
71094: LD_INT 1
71096: ST_TO_ADDR
// if p3 = 101 then
71097: LD_VAR 0 3
71101: PUSH
71102: LD_INT 101
71104: EQUAL
71105: IFFALSE 71115
// sSold := true ;
71107: LD_ADDR_EXP 79
71111: PUSH
71112: LD_INT 1
71114: ST_TO_ADDR
// if p3 = 102 then
71115: LD_VAR 0 3
71119: PUSH
71120: LD_INT 102
71122: EQUAL
71123: IFFALSE 71133
// sDiff := true ;
71125: LD_ADDR_EXP 80
71129: PUSH
71130: LD_INT 1
71132: ST_TO_ADDR
// if p3 = 103 then
71133: LD_VAR 0 3
71137: PUSH
71138: LD_INT 103
71140: EQUAL
71141: IFFALSE 71151
// sFog := true ;
71143: LD_ADDR_EXP 83
71147: PUSH
71148: LD_INT 1
71150: ST_TO_ADDR
// if p3 = 104 then
71151: LD_VAR 0 3
71155: PUSH
71156: LD_INT 104
71158: EQUAL
71159: IFFALSE 71169
// sReset := true ;
71161: LD_ADDR_EXP 84
71165: PUSH
71166: LD_INT 1
71168: ST_TO_ADDR
// if p3 = 105 then
71169: LD_VAR 0 3
71173: PUSH
71174: LD_INT 105
71176: EQUAL
71177: IFFALSE 71187
// sSun := true ;
71179: LD_ADDR_EXP 85
71183: PUSH
71184: LD_INT 1
71186: ST_TO_ADDR
// if p3 = 106 then
71187: LD_VAR 0 3
71191: PUSH
71192: LD_INT 106
71194: EQUAL
71195: IFFALSE 71205
// sTiger := true ;
71197: LD_ADDR_EXP 81
71201: PUSH
71202: LD_INT 1
71204: ST_TO_ADDR
// if p3 = 107 then
71205: LD_VAR 0 3
71209: PUSH
71210: LD_INT 107
71212: EQUAL
71213: IFFALSE 71223
// sBomb := true ;
71215: LD_ADDR_EXP 82
71219: PUSH
71220: LD_INT 1
71222: ST_TO_ADDR
// if p3 = 108 then
71223: LD_VAR 0 3
71227: PUSH
71228: LD_INT 108
71230: EQUAL
71231: IFFALSE 71241
// sWound := true ;
71233: LD_ADDR_EXP 90
71237: PUSH
71238: LD_INT 1
71240: ST_TO_ADDR
// if p3 = 109 then
71241: LD_VAR 0 3
71245: PUSH
71246: LD_INT 109
71248: EQUAL
71249: IFFALSE 71259
// sBetray := true ;
71251: LD_ADDR_EXP 94
71255: PUSH
71256: LD_INT 1
71258: ST_TO_ADDR
// if p3 = 110 then
71259: LD_VAR 0 3
71263: PUSH
71264: LD_INT 110
71266: EQUAL
71267: IFFALSE 71277
// sContamin := true ;
71269: LD_ADDR_EXP 95
71273: PUSH
71274: LD_INT 1
71276: ST_TO_ADDR
// if p3 = 111 then
71277: LD_VAR 0 3
71281: PUSH
71282: LD_INT 111
71284: EQUAL
71285: IFFALSE 71295
// sOil := true ;
71287: LD_ADDR_EXP 97
71291: PUSH
71292: LD_INT 1
71294: ST_TO_ADDR
// if p3 = 112 then
71295: LD_VAR 0 3
71299: PUSH
71300: LD_INT 112
71302: EQUAL
71303: IFFALSE 71313
// sStu := true ;
71305: LD_ADDR_EXP 101
71309: PUSH
71310: LD_INT 1
71312: ST_TO_ADDR
// if p3 = 113 then
71313: LD_VAR 0 3
71317: PUSH
71318: LD_INT 113
71320: EQUAL
71321: IFFALSE 71331
// sBazooka := true ;
71323: LD_ADDR_EXP 104
71327: PUSH
71328: LD_INT 1
71330: ST_TO_ADDR
// if p3 = 114 then
71331: LD_VAR 0 3
71335: PUSH
71336: LD_INT 114
71338: EQUAL
71339: IFFALSE 71349
// sMortar := true ;
71341: LD_ADDR_EXP 105
71345: PUSH
71346: LD_INT 1
71348: ST_TO_ADDR
// if p3 = 115 then
71349: LD_VAR 0 3
71353: PUSH
71354: LD_INT 115
71356: EQUAL
71357: IFFALSE 71367
// sRanger := true ;
71359: LD_ADDR_EXP 115
71363: PUSH
71364: LD_INT 1
71366: ST_TO_ADDR
// if p3 = 116 then
71367: LD_VAR 0 3
71371: PUSH
71372: LD_INT 116
71374: EQUAL
71375: IFFALSE 71385
// sComputer := true ;
71377: LD_ADDR_EXP 116
71381: PUSH
71382: LD_INT 1
71384: ST_TO_ADDR
// if p3 = 117 then
71385: LD_VAR 0 3
71389: PUSH
71390: LD_INT 117
71392: EQUAL
71393: IFFALSE 71403
// s30 := true ;
71395: LD_ADDR_EXP 117
71399: PUSH
71400: LD_INT 1
71402: ST_TO_ADDR
// if p3 = 118 then
71403: LD_VAR 0 3
71407: PUSH
71408: LD_INT 118
71410: EQUAL
71411: IFFALSE 71421
// s60 := true ;
71413: LD_ADDR_EXP 118
71417: PUSH
71418: LD_INT 1
71420: ST_TO_ADDR
// end ; if p2 = stream_mode then
71421: LD_VAR 0 2
71425: PUSH
71426: LD_INT 101
71428: EQUAL
71429: IFFALSE 71557
// begin case p3 of 1 :
71431: LD_VAR 0 3
71435: PUSH
71436: LD_INT 1
71438: DOUBLE
71439: EQUAL
71440: IFTRUE 71444
71442: GO 71451
71444: POP
// hHackUnlimitedResources ; 2 :
71445: CALL 83655 0 0
71449: GO 71557
71451: LD_INT 2
71453: DOUBLE
71454: EQUAL
71455: IFTRUE 71459
71457: GO 71466
71459: POP
// hHackSetLevel10 ; 3 :
71460: CALL 83788 0 0
71464: GO 71557
71466: LD_INT 3
71468: DOUBLE
71469: EQUAL
71470: IFTRUE 71474
71472: GO 71481
71474: POP
// hHackSetLevel10YourUnits ; 4 :
71475: CALL 83873 0 0
71479: GO 71557
71481: LD_INT 4
71483: DOUBLE
71484: EQUAL
71485: IFTRUE 71489
71487: GO 71496
71489: POP
// hHackInvincible ; 5 :
71490: CALL 84321 0 0
71494: GO 71557
71496: LD_INT 5
71498: DOUBLE
71499: EQUAL
71500: IFTRUE 71504
71502: GO 71511
71504: POP
// hHackInvisible ; 6 :
71505: CALL 84432 0 0
71509: GO 71557
71511: LD_INT 6
71513: DOUBLE
71514: EQUAL
71515: IFTRUE 71519
71517: GO 71526
71519: POP
// hHackChangeYourSide ; 7 :
71520: CALL 84489 0 0
71524: GO 71557
71526: LD_INT 7
71528: DOUBLE
71529: EQUAL
71530: IFTRUE 71534
71532: GO 71541
71534: POP
// hHackChangeUnitSide ; 8 :
71535: CALL 84531 0 0
71539: GO 71557
71541: LD_INT 8
71543: DOUBLE
71544: EQUAL
71545: IFTRUE 71549
71547: GO 71556
71549: POP
// hHackFog ; end ;
71550: CALL 84632 0 0
71554: GO 71557
71556: POP
// end ; end ;
71557: LD_VAR 0 7
71561: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
71562: GO 71564
71564: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
71565: LD_STRING initStreamRollete();
71567: PPUSH
71568: CALL_OW 559
// InitStreamMode ;
71572: CALL 71584 0 0
// DefineStreamItems ( false ) ;
71576: LD_INT 0
71578: PPUSH
71579: CALL 72048 0 1
// end ;
71583: END
// function InitStreamMode ; begin
71584: LD_INT 0
71586: PPUSH
// streamModeActive := false ;
71587: LD_ADDR_EXP 62
71591: PUSH
71592: LD_INT 0
71594: ST_TO_ADDR
// normalCounter := 36 ;
71595: LD_ADDR_EXP 63
71599: PUSH
71600: LD_INT 36
71602: ST_TO_ADDR
// hardcoreCounter := 18 ;
71603: LD_ADDR_EXP 64
71607: PUSH
71608: LD_INT 18
71610: ST_TO_ADDR
// sRocket := false ;
71611: LD_ADDR_EXP 67
71615: PUSH
71616: LD_INT 0
71618: ST_TO_ADDR
// sSpeed := false ;
71619: LD_ADDR_EXP 66
71623: PUSH
71624: LD_INT 0
71626: ST_TO_ADDR
// sEngine := false ;
71627: LD_ADDR_EXP 68
71631: PUSH
71632: LD_INT 0
71634: ST_TO_ADDR
// sSpec := false ;
71635: LD_ADDR_EXP 65
71639: PUSH
71640: LD_INT 0
71642: ST_TO_ADDR
// sLevel := false ;
71643: LD_ADDR_EXP 69
71647: PUSH
71648: LD_INT 0
71650: ST_TO_ADDR
// sArmoury := false ;
71651: LD_ADDR_EXP 70
71655: PUSH
71656: LD_INT 0
71658: ST_TO_ADDR
// sRadar := false ;
71659: LD_ADDR_EXP 71
71663: PUSH
71664: LD_INT 0
71666: ST_TO_ADDR
// sBunker := false ;
71667: LD_ADDR_EXP 72
71671: PUSH
71672: LD_INT 0
71674: ST_TO_ADDR
// sHack := false ;
71675: LD_ADDR_EXP 73
71679: PUSH
71680: LD_INT 0
71682: ST_TO_ADDR
// sFire := false ;
71683: LD_ADDR_EXP 74
71687: PUSH
71688: LD_INT 0
71690: ST_TO_ADDR
// sRefresh := false ;
71691: LD_ADDR_EXP 75
71695: PUSH
71696: LD_INT 0
71698: ST_TO_ADDR
// sExp := false ;
71699: LD_ADDR_EXP 76
71703: PUSH
71704: LD_INT 0
71706: ST_TO_ADDR
// sDepot := false ;
71707: LD_ADDR_EXP 77
71711: PUSH
71712: LD_INT 0
71714: ST_TO_ADDR
// sFlag := false ;
71715: LD_ADDR_EXP 78
71719: PUSH
71720: LD_INT 0
71722: ST_TO_ADDR
// sKamikadze := false ;
71723: LD_ADDR_EXP 86
71727: PUSH
71728: LD_INT 0
71730: ST_TO_ADDR
// sTroll := false ;
71731: LD_ADDR_EXP 87
71735: PUSH
71736: LD_INT 0
71738: ST_TO_ADDR
// sSlow := false ;
71739: LD_ADDR_EXP 88
71743: PUSH
71744: LD_INT 0
71746: ST_TO_ADDR
// sLack := false ;
71747: LD_ADDR_EXP 89
71751: PUSH
71752: LD_INT 0
71754: ST_TO_ADDR
// sTank := false ;
71755: LD_ADDR_EXP 91
71759: PUSH
71760: LD_INT 0
71762: ST_TO_ADDR
// sRemote := false ;
71763: LD_ADDR_EXP 92
71767: PUSH
71768: LD_INT 0
71770: ST_TO_ADDR
// sPowell := false ;
71771: LD_ADDR_EXP 93
71775: PUSH
71776: LD_INT 0
71778: ST_TO_ADDR
// sTeleport := false ;
71779: LD_ADDR_EXP 96
71783: PUSH
71784: LD_INT 0
71786: ST_TO_ADDR
// sOilTower := false ;
71787: LD_ADDR_EXP 98
71791: PUSH
71792: LD_INT 0
71794: ST_TO_ADDR
// sShovel := false ;
71795: LD_ADDR_EXP 99
71799: PUSH
71800: LD_INT 0
71802: ST_TO_ADDR
// sSheik := false ;
71803: LD_ADDR_EXP 100
71807: PUSH
71808: LD_INT 0
71810: ST_TO_ADDR
// sEarthquake := false ;
71811: LD_ADDR_EXP 102
71815: PUSH
71816: LD_INT 0
71818: ST_TO_ADDR
// sAI := false ;
71819: LD_ADDR_EXP 103
71823: PUSH
71824: LD_INT 0
71826: ST_TO_ADDR
// sCargo := false ;
71827: LD_ADDR_EXP 106
71831: PUSH
71832: LD_INT 0
71834: ST_TO_ADDR
// sDLaser := false ;
71835: LD_ADDR_EXP 107
71839: PUSH
71840: LD_INT 0
71842: ST_TO_ADDR
// sExchange := false ;
71843: LD_ADDR_EXP 108
71847: PUSH
71848: LD_INT 0
71850: ST_TO_ADDR
// sFac := false ;
71851: LD_ADDR_EXP 109
71855: PUSH
71856: LD_INT 0
71858: ST_TO_ADDR
// sPower := false ;
71859: LD_ADDR_EXP 110
71863: PUSH
71864: LD_INT 0
71866: ST_TO_ADDR
// sRandom := false ;
71867: LD_ADDR_EXP 111
71871: PUSH
71872: LD_INT 0
71874: ST_TO_ADDR
// sShield := false ;
71875: LD_ADDR_EXP 112
71879: PUSH
71880: LD_INT 0
71882: ST_TO_ADDR
// sTime := false ;
71883: LD_ADDR_EXP 113
71887: PUSH
71888: LD_INT 0
71890: ST_TO_ADDR
// sTools := false ;
71891: LD_ADDR_EXP 114
71895: PUSH
71896: LD_INT 0
71898: ST_TO_ADDR
// sSold := false ;
71899: LD_ADDR_EXP 79
71903: PUSH
71904: LD_INT 0
71906: ST_TO_ADDR
// sDiff := false ;
71907: LD_ADDR_EXP 80
71911: PUSH
71912: LD_INT 0
71914: ST_TO_ADDR
// sFog := false ;
71915: LD_ADDR_EXP 83
71919: PUSH
71920: LD_INT 0
71922: ST_TO_ADDR
// sReset := false ;
71923: LD_ADDR_EXP 84
71927: PUSH
71928: LD_INT 0
71930: ST_TO_ADDR
// sSun := false ;
71931: LD_ADDR_EXP 85
71935: PUSH
71936: LD_INT 0
71938: ST_TO_ADDR
// sTiger := false ;
71939: LD_ADDR_EXP 81
71943: PUSH
71944: LD_INT 0
71946: ST_TO_ADDR
// sBomb := false ;
71947: LD_ADDR_EXP 82
71951: PUSH
71952: LD_INT 0
71954: ST_TO_ADDR
// sWound := false ;
71955: LD_ADDR_EXP 90
71959: PUSH
71960: LD_INT 0
71962: ST_TO_ADDR
// sBetray := false ;
71963: LD_ADDR_EXP 94
71967: PUSH
71968: LD_INT 0
71970: ST_TO_ADDR
// sContamin := false ;
71971: LD_ADDR_EXP 95
71975: PUSH
71976: LD_INT 0
71978: ST_TO_ADDR
// sOil := false ;
71979: LD_ADDR_EXP 97
71983: PUSH
71984: LD_INT 0
71986: ST_TO_ADDR
// sStu := false ;
71987: LD_ADDR_EXP 101
71991: PUSH
71992: LD_INT 0
71994: ST_TO_ADDR
// sBazooka := false ;
71995: LD_ADDR_EXP 104
71999: PUSH
72000: LD_INT 0
72002: ST_TO_ADDR
// sMortar := false ;
72003: LD_ADDR_EXP 105
72007: PUSH
72008: LD_INT 0
72010: ST_TO_ADDR
// sRanger := false ;
72011: LD_ADDR_EXP 115
72015: PUSH
72016: LD_INT 0
72018: ST_TO_ADDR
// sComputer := false ;
72019: LD_ADDR_EXP 116
72023: PUSH
72024: LD_INT 0
72026: ST_TO_ADDR
// s30 := false ;
72027: LD_ADDR_EXP 117
72031: PUSH
72032: LD_INT 0
72034: ST_TO_ADDR
// s60 := false ;
72035: LD_ADDR_EXP 118
72039: PUSH
72040: LD_INT 0
72042: ST_TO_ADDR
// end ;
72043: LD_VAR 0 1
72047: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
72048: LD_INT 0
72050: PPUSH
72051: PPUSH
72052: PPUSH
72053: PPUSH
72054: PPUSH
72055: PPUSH
72056: PPUSH
// result := [ ] ;
72057: LD_ADDR_VAR 0 2
72061: PUSH
72062: EMPTY
72063: ST_TO_ADDR
// if campaign_id = 1 then
72064: LD_OWVAR 69
72068: PUSH
72069: LD_INT 1
72071: EQUAL
72072: IFFALSE 75238
// begin case mission_number of 1 :
72074: LD_OWVAR 70
72078: PUSH
72079: LD_INT 1
72081: DOUBLE
72082: EQUAL
72083: IFTRUE 72087
72085: GO 72163
72087: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
72088: LD_ADDR_VAR 0 2
72092: PUSH
72093: LD_INT 2
72095: PUSH
72096: LD_INT 4
72098: PUSH
72099: LD_INT 11
72101: PUSH
72102: LD_INT 12
72104: PUSH
72105: LD_INT 15
72107: PUSH
72108: LD_INT 16
72110: PUSH
72111: LD_INT 22
72113: PUSH
72114: LD_INT 23
72116: PUSH
72117: LD_INT 26
72119: PUSH
72120: EMPTY
72121: LIST
72122: LIST
72123: LIST
72124: LIST
72125: LIST
72126: LIST
72127: LIST
72128: LIST
72129: LIST
72130: PUSH
72131: LD_INT 101
72133: PUSH
72134: LD_INT 102
72136: PUSH
72137: LD_INT 106
72139: PUSH
72140: LD_INT 116
72142: PUSH
72143: LD_INT 117
72145: PUSH
72146: LD_INT 118
72148: PUSH
72149: EMPTY
72150: LIST
72151: LIST
72152: LIST
72153: LIST
72154: LIST
72155: LIST
72156: PUSH
72157: EMPTY
72158: LIST
72159: LIST
72160: ST_TO_ADDR
72161: GO 75236
72163: LD_INT 2
72165: DOUBLE
72166: EQUAL
72167: IFTRUE 72171
72169: GO 72255
72171: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
72172: LD_ADDR_VAR 0 2
72176: PUSH
72177: LD_INT 2
72179: PUSH
72180: LD_INT 4
72182: PUSH
72183: LD_INT 11
72185: PUSH
72186: LD_INT 12
72188: PUSH
72189: LD_INT 15
72191: PUSH
72192: LD_INT 16
72194: PUSH
72195: LD_INT 22
72197: PUSH
72198: LD_INT 23
72200: PUSH
72201: LD_INT 26
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: LIST
72208: LIST
72209: LIST
72210: LIST
72211: LIST
72212: LIST
72213: LIST
72214: PUSH
72215: LD_INT 101
72217: PUSH
72218: LD_INT 102
72220: PUSH
72221: LD_INT 105
72223: PUSH
72224: LD_INT 106
72226: PUSH
72227: LD_INT 108
72229: PUSH
72230: LD_INT 116
72232: PUSH
72233: LD_INT 117
72235: PUSH
72236: LD_INT 118
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: LIST
72243: LIST
72244: LIST
72245: LIST
72246: LIST
72247: LIST
72248: PUSH
72249: EMPTY
72250: LIST
72251: LIST
72252: ST_TO_ADDR
72253: GO 75236
72255: LD_INT 3
72257: DOUBLE
72258: EQUAL
72259: IFTRUE 72263
72261: GO 72351
72263: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
72264: LD_ADDR_VAR 0 2
72268: PUSH
72269: LD_INT 2
72271: PUSH
72272: LD_INT 4
72274: PUSH
72275: LD_INT 5
72277: PUSH
72278: LD_INT 11
72280: PUSH
72281: LD_INT 12
72283: PUSH
72284: LD_INT 15
72286: PUSH
72287: LD_INT 16
72289: PUSH
72290: LD_INT 22
72292: PUSH
72293: LD_INT 26
72295: PUSH
72296: LD_INT 36
72298: PUSH
72299: EMPTY
72300: LIST
72301: LIST
72302: LIST
72303: LIST
72304: LIST
72305: LIST
72306: LIST
72307: LIST
72308: LIST
72309: LIST
72310: PUSH
72311: LD_INT 101
72313: PUSH
72314: LD_INT 102
72316: PUSH
72317: LD_INT 105
72319: PUSH
72320: LD_INT 106
72322: PUSH
72323: LD_INT 108
72325: PUSH
72326: LD_INT 116
72328: PUSH
72329: LD_INT 117
72331: PUSH
72332: LD_INT 118
72334: PUSH
72335: EMPTY
72336: LIST
72337: LIST
72338: LIST
72339: LIST
72340: LIST
72341: LIST
72342: LIST
72343: LIST
72344: PUSH
72345: EMPTY
72346: LIST
72347: LIST
72348: ST_TO_ADDR
72349: GO 75236
72351: LD_INT 4
72353: DOUBLE
72354: EQUAL
72355: IFTRUE 72359
72357: GO 72455
72359: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
72360: LD_ADDR_VAR 0 2
72364: PUSH
72365: LD_INT 2
72367: PUSH
72368: LD_INT 4
72370: PUSH
72371: LD_INT 5
72373: PUSH
72374: LD_INT 8
72376: PUSH
72377: LD_INT 11
72379: PUSH
72380: LD_INT 12
72382: PUSH
72383: LD_INT 15
72385: PUSH
72386: LD_INT 16
72388: PUSH
72389: LD_INT 22
72391: PUSH
72392: LD_INT 23
72394: PUSH
72395: LD_INT 26
72397: PUSH
72398: LD_INT 36
72400: PUSH
72401: EMPTY
72402: LIST
72403: LIST
72404: LIST
72405: LIST
72406: LIST
72407: LIST
72408: LIST
72409: LIST
72410: LIST
72411: LIST
72412: LIST
72413: LIST
72414: PUSH
72415: LD_INT 101
72417: PUSH
72418: LD_INT 102
72420: PUSH
72421: LD_INT 105
72423: PUSH
72424: LD_INT 106
72426: PUSH
72427: LD_INT 108
72429: PUSH
72430: LD_INT 116
72432: PUSH
72433: LD_INT 117
72435: PUSH
72436: LD_INT 118
72438: PUSH
72439: EMPTY
72440: LIST
72441: LIST
72442: LIST
72443: LIST
72444: LIST
72445: LIST
72446: LIST
72447: LIST
72448: PUSH
72449: EMPTY
72450: LIST
72451: LIST
72452: ST_TO_ADDR
72453: GO 75236
72455: LD_INT 5
72457: DOUBLE
72458: EQUAL
72459: IFTRUE 72463
72461: GO 72575
72463: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
72464: LD_ADDR_VAR 0 2
72468: PUSH
72469: LD_INT 2
72471: PUSH
72472: LD_INT 4
72474: PUSH
72475: LD_INT 5
72477: PUSH
72478: LD_INT 6
72480: PUSH
72481: LD_INT 8
72483: PUSH
72484: LD_INT 11
72486: PUSH
72487: LD_INT 12
72489: PUSH
72490: LD_INT 15
72492: PUSH
72493: LD_INT 16
72495: PUSH
72496: LD_INT 22
72498: PUSH
72499: LD_INT 23
72501: PUSH
72502: LD_INT 25
72504: PUSH
72505: LD_INT 26
72507: PUSH
72508: LD_INT 36
72510: PUSH
72511: EMPTY
72512: LIST
72513: LIST
72514: LIST
72515: LIST
72516: LIST
72517: LIST
72518: LIST
72519: LIST
72520: LIST
72521: LIST
72522: LIST
72523: LIST
72524: LIST
72525: LIST
72526: PUSH
72527: LD_INT 101
72529: PUSH
72530: LD_INT 102
72532: PUSH
72533: LD_INT 105
72535: PUSH
72536: LD_INT 106
72538: PUSH
72539: LD_INT 108
72541: PUSH
72542: LD_INT 109
72544: PUSH
72545: LD_INT 112
72547: PUSH
72548: LD_INT 116
72550: PUSH
72551: LD_INT 117
72553: PUSH
72554: LD_INT 118
72556: PUSH
72557: EMPTY
72558: LIST
72559: LIST
72560: LIST
72561: LIST
72562: LIST
72563: LIST
72564: LIST
72565: LIST
72566: LIST
72567: LIST
72568: PUSH
72569: EMPTY
72570: LIST
72571: LIST
72572: ST_TO_ADDR
72573: GO 75236
72575: LD_INT 6
72577: DOUBLE
72578: EQUAL
72579: IFTRUE 72583
72581: GO 72715
72583: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
72584: LD_ADDR_VAR 0 2
72588: PUSH
72589: LD_INT 2
72591: PUSH
72592: LD_INT 4
72594: PUSH
72595: LD_INT 5
72597: PUSH
72598: LD_INT 6
72600: PUSH
72601: LD_INT 8
72603: PUSH
72604: LD_INT 11
72606: PUSH
72607: LD_INT 12
72609: PUSH
72610: LD_INT 15
72612: PUSH
72613: LD_INT 16
72615: PUSH
72616: LD_INT 20
72618: PUSH
72619: LD_INT 21
72621: PUSH
72622: LD_INT 22
72624: PUSH
72625: LD_INT 23
72627: PUSH
72628: LD_INT 25
72630: PUSH
72631: LD_INT 26
72633: PUSH
72634: LD_INT 30
72636: PUSH
72637: LD_INT 31
72639: PUSH
72640: LD_INT 32
72642: PUSH
72643: LD_INT 36
72645: PUSH
72646: EMPTY
72647: LIST
72648: LIST
72649: LIST
72650: LIST
72651: LIST
72652: LIST
72653: LIST
72654: LIST
72655: LIST
72656: LIST
72657: LIST
72658: LIST
72659: LIST
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: PUSH
72667: LD_INT 101
72669: PUSH
72670: LD_INT 102
72672: PUSH
72673: LD_INT 105
72675: PUSH
72676: LD_INT 106
72678: PUSH
72679: LD_INT 108
72681: PUSH
72682: LD_INT 109
72684: PUSH
72685: LD_INT 112
72687: PUSH
72688: LD_INT 116
72690: PUSH
72691: LD_INT 117
72693: PUSH
72694: LD_INT 118
72696: PUSH
72697: EMPTY
72698: LIST
72699: LIST
72700: LIST
72701: LIST
72702: LIST
72703: LIST
72704: LIST
72705: LIST
72706: LIST
72707: LIST
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: ST_TO_ADDR
72713: GO 75236
72715: LD_INT 7
72717: DOUBLE
72718: EQUAL
72719: IFTRUE 72723
72721: GO 72835
72723: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
72724: LD_ADDR_VAR 0 2
72728: PUSH
72729: LD_INT 2
72731: PUSH
72732: LD_INT 4
72734: PUSH
72735: LD_INT 5
72737: PUSH
72738: LD_INT 7
72740: PUSH
72741: LD_INT 11
72743: PUSH
72744: LD_INT 12
72746: PUSH
72747: LD_INT 15
72749: PUSH
72750: LD_INT 16
72752: PUSH
72753: LD_INT 20
72755: PUSH
72756: LD_INT 21
72758: PUSH
72759: LD_INT 22
72761: PUSH
72762: LD_INT 23
72764: PUSH
72765: LD_INT 25
72767: PUSH
72768: LD_INT 26
72770: PUSH
72771: EMPTY
72772: LIST
72773: LIST
72774: LIST
72775: LIST
72776: LIST
72777: LIST
72778: LIST
72779: LIST
72780: LIST
72781: LIST
72782: LIST
72783: LIST
72784: LIST
72785: LIST
72786: PUSH
72787: LD_INT 101
72789: PUSH
72790: LD_INT 102
72792: PUSH
72793: LD_INT 103
72795: PUSH
72796: LD_INT 105
72798: PUSH
72799: LD_INT 106
72801: PUSH
72802: LD_INT 108
72804: PUSH
72805: LD_INT 112
72807: PUSH
72808: LD_INT 116
72810: PUSH
72811: LD_INT 117
72813: PUSH
72814: LD_INT 118
72816: PUSH
72817: EMPTY
72818: LIST
72819: LIST
72820: LIST
72821: LIST
72822: LIST
72823: LIST
72824: LIST
72825: LIST
72826: LIST
72827: LIST
72828: PUSH
72829: EMPTY
72830: LIST
72831: LIST
72832: ST_TO_ADDR
72833: GO 75236
72835: LD_INT 8
72837: DOUBLE
72838: EQUAL
72839: IFTRUE 72843
72841: GO 72983
72843: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
72844: LD_ADDR_VAR 0 2
72848: PUSH
72849: LD_INT 2
72851: PUSH
72852: LD_INT 4
72854: PUSH
72855: LD_INT 5
72857: PUSH
72858: LD_INT 6
72860: PUSH
72861: LD_INT 7
72863: PUSH
72864: LD_INT 8
72866: PUSH
72867: LD_INT 11
72869: PUSH
72870: LD_INT 12
72872: PUSH
72873: LD_INT 15
72875: PUSH
72876: LD_INT 16
72878: PUSH
72879: LD_INT 20
72881: PUSH
72882: LD_INT 21
72884: PUSH
72885: LD_INT 22
72887: PUSH
72888: LD_INT 23
72890: PUSH
72891: LD_INT 25
72893: PUSH
72894: LD_INT 26
72896: PUSH
72897: LD_INT 30
72899: PUSH
72900: LD_INT 31
72902: PUSH
72903: LD_INT 32
72905: PUSH
72906: LD_INT 36
72908: PUSH
72909: EMPTY
72910: LIST
72911: LIST
72912: LIST
72913: LIST
72914: LIST
72915: LIST
72916: LIST
72917: LIST
72918: LIST
72919: LIST
72920: LIST
72921: LIST
72922: LIST
72923: LIST
72924: LIST
72925: LIST
72926: LIST
72927: LIST
72928: LIST
72929: LIST
72930: PUSH
72931: LD_INT 101
72933: PUSH
72934: LD_INT 102
72936: PUSH
72937: LD_INT 103
72939: PUSH
72940: LD_INT 105
72942: PUSH
72943: LD_INT 106
72945: PUSH
72946: LD_INT 108
72948: PUSH
72949: LD_INT 109
72951: PUSH
72952: LD_INT 112
72954: PUSH
72955: LD_INT 116
72957: PUSH
72958: LD_INT 117
72960: PUSH
72961: LD_INT 118
72963: PUSH
72964: EMPTY
72965: LIST
72966: LIST
72967: LIST
72968: LIST
72969: LIST
72970: LIST
72971: LIST
72972: LIST
72973: LIST
72974: LIST
72975: LIST
72976: PUSH
72977: EMPTY
72978: LIST
72979: LIST
72980: ST_TO_ADDR
72981: GO 75236
72983: LD_INT 9
72985: DOUBLE
72986: EQUAL
72987: IFTRUE 72991
72989: GO 73139
72991: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
72992: LD_ADDR_VAR 0 2
72996: PUSH
72997: LD_INT 2
72999: PUSH
73000: LD_INT 4
73002: PUSH
73003: LD_INT 5
73005: PUSH
73006: LD_INT 6
73008: PUSH
73009: LD_INT 7
73011: PUSH
73012: LD_INT 8
73014: PUSH
73015: LD_INT 11
73017: PUSH
73018: LD_INT 12
73020: PUSH
73021: LD_INT 15
73023: PUSH
73024: LD_INT 16
73026: PUSH
73027: LD_INT 20
73029: PUSH
73030: LD_INT 21
73032: PUSH
73033: LD_INT 22
73035: PUSH
73036: LD_INT 23
73038: PUSH
73039: LD_INT 25
73041: PUSH
73042: LD_INT 26
73044: PUSH
73045: LD_INT 28
73047: PUSH
73048: LD_INT 30
73050: PUSH
73051: LD_INT 31
73053: PUSH
73054: LD_INT 32
73056: PUSH
73057: LD_INT 36
73059: PUSH
73060: EMPTY
73061: LIST
73062: LIST
73063: LIST
73064: LIST
73065: LIST
73066: LIST
73067: LIST
73068: LIST
73069: LIST
73070: LIST
73071: LIST
73072: LIST
73073: LIST
73074: LIST
73075: LIST
73076: LIST
73077: LIST
73078: LIST
73079: LIST
73080: LIST
73081: LIST
73082: PUSH
73083: LD_INT 101
73085: PUSH
73086: LD_INT 102
73088: PUSH
73089: LD_INT 103
73091: PUSH
73092: LD_INT 105
73094: PUSH
73095: LD_INT 106
73097: PUSH
73098: LD_INT 108
73100: PUSH
73101: LD_INT 109
73103: PUSH
73104: LD_INT 112
73106: PUSH
73107: LD_INT 114
73109: PUSH
73110: LD_INT 116
73112: PUSH
73113: LD_INT 117
73115: PUSH
73116: LD_INT 118
73118: PUSH
73119: EMPTY
73120: LIST
73121: LIST
73122: LIST
73123: LIST
73124: LIST
73125: LIST
73126: LIST
73127: LIST
73128: LIST
73129: LIST
73130: LIST
73131: LIST
73132: PUSH
73133: EMPTY
73134: LIST
73135: LIST
73136: ST_TO_ADDR
73137: GO 75236
73139: LD_INT 10
73141: DOUBLE
73142: EQUAL
73143: IFTRUE 73147
73145: GO 73343
73147: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
73148: LD_ADDR_VAR 0 2
73152: PUSH
73153: LD_INT 2
73155: PUSH
73156: LD_INT 4
73158: PUSH
73159: LD_INT 5
73161: PUSH
73162: LD_INT 6
73164: PUSH
73165: LD_INT 7
73167: PUSH
73168: LD_INT 8
73170: PUSH
73171: LD_INT 9
73173: PUSH
73174: LD_INT 10
73176: PUSH
73177: LD_INT 11
73179: PUSH
73180: LD_INT 12
73182: PUSH
73183: LD_INT 13
73185: PUSH
73186: LD_INT 14
73188: PUSH
73189: LD_INT 15
73191: PUSH
73192: LD_INT 16
73194: PUSH
73195: LD_INT 17
73197: PUSH
73198: LD_INT 18
73200: PUSH
73201: LD_INT 19
73203: PUSH
73204: LD_INT 20
73206: PUSH
73207: LD_INT 21
73209: PUSH
73210: LD_INT 22
73212: PUSH
73213: LD_INT 23
73215: PUSH
73216: LD_INT 24
73218: PUSH
73219: LD_INT 25
73221: PUSH
73222: LD_INT 26
73224: PUSH
73225: LD_INT 28
73227: PUSH
73228: LD_INT 30
73230: PUSH
73231: LD_INT 31
73233: PUSH
73234: LD_INT 32
73236: PUSH
73237: LD_INT 36
73239: PUSH
73240: EMPTY
73241: LIST
73242: LIST
73243: LIST
73244: LIST
73245: LIST
73246: LIST
73247: LIST
73248: LIST
73249: LIST
73250: LIST
73251: LIST
73252: LIST
73253: LIST
73254: LIST
73255: LIST
73256: LIST
73257: LIST
73258: LIST
73259: LIST
73260: LIST
73261: LIST
73262: LIST
73263: LIST
73264: LIST
73265: LIST
73266: LIST
73267: LIST
73268: LIST
73269: LIST
73270: PUSH
73271: LD_INT 101
73273: PUSH
73274: LD_INT 102
73276: PUSH
73277: LD_INT 103
73279: PUSH
73280: LD_INT 104
73282: PUSH
73283: LD_INT 105
73285: PUSH
73286: LD_INT 106
73288: PUSH
73289: LD_INT 107
73291: PUSH
73292: LD_INT 108
73294: PUSH
73295: LD_INT 109
73297: PUSH
73298: LD_INT 110
73300: PUSH
73301: LD_INT 111
73303: PUSH
73304: LD_INT 112
73306: PUSH
73307: LD_INT 114
73309: PUSH
73310: LD_INT 116
73312: PUSH
73313: LD_INT 117
73315: PUSH
73316: LD_INT 118
73318: PUSH
73319: EMPTY
73320: LIST
73321: LIST
73322: LIST
73323: LIST
73324: LIST
73325: LIST
73326: LIST
73327: LIST
73328: LIST
73329: LIST
73330: LIST
73331: LIST
73332: LIST
73333: LIST
73334: LIST
73335: LIST
73336: PUSH
73337: EMPTY
73338: LIST
73339: LIST
73340: ST_TO_ADDR
73341: GO 75236
73343: LD_INT 11
73345: DOUBLE
73346: EQUAL
73347: IFTRUE 73351
73349: GO 73555
73351: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
73352: LD_ADDR_VAR 0 2
73356: PUSH
73357: LD_INT 2
73359: PUSH
73360: LD_INT 3
73362: PUSH
73363: LD_INT 4
73365: PUSH
73366: LD_INT 5
73368: PUSH
73369: LD_INT 6
73371: PUSH
73372: LD_INT 7
73374: PUSH
73375: LD_INT 8
73377: PUSH
73378: LD_INT 9
73380: PUSH
73381: LD_INT 10
73383: PUSH
73384: LD_INT 11
73386: PUSH
73387: LD_INT 12
73389: PUSH
73390: LD_INT 13
73392: PUSH
73393: LD_INT 14
73395: PUSH
73396: LD_INT 15
73398: PUSH
73399: LD_INT 16
73401: PUSH
73402: LD_INT 17
73404: PUSH
73405: LD_INT 18
73407: PUSH
73408: LD_INT 19
73410: PUSH
73411: LD_INT 20
73413: PUSH
73414: LD_INT 21
73416: PUSH
73417: LD_INT 22
73419: PUSH
73420: LD_INT 23
73422: PUSH
73423: LD_INT 24
73425: PUSH
73426: LD_INT 25
73428: PUSH
73429: LD_INT 26
73431: PUSH
73432: LD_INT 28
73434: PUSH
73435: LD_INT 30
73437: PUSH
73438: LD_INT 31
73440: PUSH
73441: LD_INT 32
73443: PUSH
73444: LD_INT 34
73446: PUSH
73447: LD_INT 36
73449: PUSH
73450: EMPTY
73451: LIST
73452: LIST
73453: LIST
73454: LIST
73455: LIST
73456: LIST
73457: LIST
73458: LIST
73459: LIST
73460: LIST
73461: LIST
73462: LIST
73463: LIST
73464: LIST
73465: LIST
73466: LIST
73467: LIST
73468: LIST
73469: LIST
73470: LIST
73471: LIST
73472: LIST
73473: LIST
73474: LIST
73475: LIST
73476: LIST
73477: LIST
73478: LIST
73479: LIST
73480: LIST
73481: LIST
73482: PUSH
73483: LD_INT 101
73485: PUSH
73486: LD_INT 102
73488: PUSH
73489: LD_INT 103
73491: PUSH
73492: LD_INT 104
73494: PUSH
73495: LD_INT 105
73497: PUSH
73498: LD_INT 106
73500: PUSH
73501: LD_INT 107
73503: PUSH
73504: LD_INT 108
73506: PUSH
73507: LD_INT 109
73509: PUSH
73510: LD_INT 110
73512: PUSH
73513: LD_INT 111
73515: PUSH
73516: LD_INT 112
73518: PUSH
73519: LD_INT 114
73521: PUSH
73522: LD_INT 116
73524: PUSH
73525: LD_INT 117
73527: PUSH
73528: LD_INT 118
73530: PUSH
73531: EMPTY
73532: LIST
73533: LIST
73534: LIST
73535: LIST
73536: LIST
73537: LIST
73538: LIST
73539: LIST
73540: LIST
73541: LIST
73542: LIST
73543: LIST
73544: LIST
73545: LIST
73546: LIST
73547: LIST
73548: PUSH
73549: EMPTY
73550: LIST
73551: LIST
73552: ST_TO_ADDR
73553: GO 75236
73555: LD_INT 12
73557: DOUBLE
73558: EQUAL
73559: IFTRUE 73563
73561: GO 73783
73563: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
73564: LD_ADDR_VAR 0 2
73568: PUSH
73569: LD_INT 1
73571: PUSH
73572: LD_INT 2
73574: PUSH
73575: LD_INT 3
73577: PUSH
73578: LD_INT 4
73580: PUSH
73581: LD_INT 5
73583: PUSH
73584: LD_INT 6
73586: PUSH
73587: LD_INT 7
73589: PUSH
73590: LD_INT 8
73592: PUSH
73593: LD_INT 9
73595: PUSH
73596: LD_INT 10
73598: PUSH
73599: LD_INT 11
73601: PUSH
73602: LD_INT 12
73604: PUSH
73605: LD_INT 13
73607: PUSH
73608: LD_INT 14
73610: PUSH
73611: LD_INT 15
73613: PUSH
73614: LD_INT 16
73616: PUSH
73617: LD_INT 17
73619: PUSH
73620: LD_INT 18
73622: PUSH
73623: LD_INT 19
73625: PUSH
73626: LD_INT 20
73628: PUSH
73629: LD_INT 21
73631: PUSH
73632: LD_INT 22
73634: PUSH
73635: LD_INT 23
73637: PUSH
73638: LD_INT 24
73640: PUSH
73641: LD_INT 25
73643: PUSH
73644: LD_INT 26
73646: PUSH
73647: LD_INT 27
73649: PUSH
73650: LD_INT 28
73652: PUSH
73653: LD_INT 30
73655: PUSH
73656: LD_INT 31
73658: PUSH
73659: LD_INT 32
73661: PUSH
73662: LD_INT 33
73664: PUSH
73665: LD_INT 34
73667: PUSH
73668: LD_INT 36
73670: PUSH
73671: EMPTY
73672: LIST
73673: LIST
73674: LIST
73675: LIST
73676: LIST
73677: LIST
73678: LIST
73679: LIST
73680: LIST
73681: LIST
73682: LIST
73683: LIST
73684: LIST
73685: LIST
73686: LIST
73687: LIST
73688: LIST
73689: LIST
73690: LIST
73691: LIST
73692: LIST
73693: LIST
73694: LIST
73695: LIST
73696: LIST
73697: LIST
73698: LIST
73699: LIST
73700: LIST
73701: LIST
73702: LIST
73703: LIST
73704: LIST
73705: LIST
73706: PUSH
73707: LD_INT 101
73709: PUSH
73710: LD_INT 102
73712: PUSH
73713: LD_INT 103
73715: PUSH
73716: LD_INT 104
73718: PUSH
73719: LD_INT 105
73721: PUSH
73722: LD_INT 106
73724: PUSH
73725: LD_INT 107
73727: PUSH
73728: LD_INT 108
73730: PUSH
73731: LD_INT 109
73733: PUSH
73734: LD_INT 110
73736: PUSH
73737: LD_INT 111
73739: PUSH
73740: LD_INT 112
73742: PUSH
73743: LD_INT 113
73745: PUSH
73746: LD_INT 114
73748: PUSH
73749: LD_INT 116
73751: PUSH
73752: LD_INT 117
73754: PUSH
73755: LD_INT 118
73757: PUSH
73758: EMPTY
73759: LIST
73760: LIST
73761: LIST
73762: LIST
73763: LIST
73764: LIST
73765: LIST
73766: LIST
73767: LIST
73768: LIST
73769: LIST
73770: LIST
73771: LIST
73772: LIST
73773: LIST
73774: LIST
73775: LIST
73776: PUSH
73777: EMPTY
73778: LIST
73779: LIST
73780: ST_TO_ADDR
73781: GO 75236
73783: LD_INT 13
73785: DOUBLE
73786: EQUAL
73787: IFTRUE 73791
73789: GO 73999
73791: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
73792: LD_ADDR_VAR 0 2
73796: PUSH
73797: LD_INT 1
73799: PUSH
73800: LD_INT 2
73802: PUSH
73803: LD_INT 3
73805: PUSH
73806: LD_INT 4
73808: PUSH
73809: LD_INT 5
73811: PUSH
73812: LD_INT 8
73814: PUSH
73815: LD_INT 9
73817: PUSH
73818: LD_INT 10
73820: PUSH
73821: LD_INT 11
73823: PUSH
73824: LD_INT 12
73826: PUSH
73827: LD_INT 14
73829: PUSH
73830: LD_INT 15
73832: PUSH
73833: LD_INT 16
73835: PUSH
73836: LD_INT 17
73838: PUSH
73839: LD_INT 18
73841: PUSH
73842: LD_INT 19
73844: PUSH
73845: LD_INT 20
73847: PUSH
73848: LD_INT 21
73850: PUSH
73851: LD_INT 22
73853: PUSH
73854: LD_INT 23
73856: PUSH
73857: LD_INT 24
73859: PUSH
73860: LD_INT 25
73862: PUSH
73863: LD_INT 26
73865: PUSH
73866: LD_INT 27
73868: PUSH
73869: LD_INT 28
73871: PUSH
73872: LD_INT 30
73874: PUSH
73875: LD_INT 31
73877: PUSH
73878: LD_INT 32
73880: PUSH
73881: LD_INT 33
73883: PUSH
73884: LD_INT 34
73886: PUSH
73887: LD_INT 36
73889: PUSH
73890: EMPTY
73891: LIST
73892: LIST
73893: LIST
73894: LIST
73895: LIST
73896: LIST
73897: LIST
73898: LIST
73899: LIST
73900: LIST
73901: LIST
73902: LIST
73903: LIST
73904: LIST
73905: LIST
73906: LIST
73907: LIST
73908: LIST
73909: LIST
73910: LIST
73911: LIST
73912: LIST
73913: LIST
73914: LIST
73915: LIST
73916: LIST
73917: LIST
73918: LIST
73919: LIST
73920: LIST
73921: LIST
73922: PUSH
73923: LD_INT 101
73925: PUSH
73926: LD_INT 102
73928: PUSH
73929: LD_INT 103
73931: PUSH
73932: LD_INT 104
73934: PUSH
73935: LD_INT 105
73937: PUSH
73938: LD_INT 106
73940: PUSH
73941: LD_INT 107
73943: PUSH
73944: LD_INT 108
73946: PUSH
73947: LD_INT 109
73949: PUSH
73950: LD_INT 110
73952: PUSH
73953: LD_INT 111
73955: PUSH
73956: LD_INT 112
73958: PUSH
73959: LD_INT 113
73961: PUSH
73962: LD_INT 114
73964: PUSH
73965: LD_INT 116
73967: PUSH
73968: LD_INT 117
73970: PUSH
73971: LD_INT 118
73973: PUSH
73974: EMPTY
73975: LIST
73976: LIST
73977: LIST
73978: LIST
73979: LIST
73980: LIST
73981: LIST
73982: LIST
73983: LIST
73984: LIST
73985: LIST
73986: LIST
73987: LIST
73988: LIST
73989: LIST
73990: LIST
73991: LIST
73992: PUSH
73993: EMPTY
73994: LIST
73995: LIST
73996: ST_TO_ADDR
73997: GO 75236
73999: LD_INT 14
74001: DOUBLE
74002: EQUAL
74003: IFTRUE 74007
74005: GO 74231
74007: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
74008: LD_ADDR_VAR 0 2
74012: PUSH
74013: LD_INT 1
74015: PUSH
74016: LD_INT 2
74018: PUSH
74019: LD_INT 3
74021: PUSH
74022: LD_INT 4
74024: PUSH
74025: LD_INT 5
74027: PUSH
74028: LD_INT 6
74030: PUSH
74031: LD_INT 7
74033: PUSH
74034: LD_INT 8
74036: PUSH
74037: LD_INT 9
74039: PUSH
74040: LD_INT 10
74042: PUSH
74043: LD_INT 11
74045: PUSH
74046: LD_INT 12
74048: PUSH
74049: LD_INT 13
74051: PUSH
74052: LD_INT 14
74054: PUSH
74055: LD_INT 15
74057: PUSH
74058: LD_INT 16
74060: PUSH
74061: LD_INT 17
74063: PUSH
74064: LD_INT 18
74066: PUSH
74067: LD_INT 19
74069: PUSH
74070: LD_INT 20
74072: PUSH
74073: LD_INT 21
74075: PUSH
74076: LD_INT 22
74078: PUSH
74079: LD_INT 23
74081: PUSH
74082: LD_INT 24
74084: PUSH
74085: LD_INT 25
74087: PUSH
74088: LD_INT 26
74090: PUSH
74091: LD_INT 27
74093: PUSH
74094: LD_INT 28
74096: PUSH
74097: LD_INT 29
74099: PUSH
74100: LD_INT 30
74102: PUSH
74103: LD_INT 31
74105: PUSH
74106: LD_INT 32
74108: PUSH
74109: LD_INT 33
74111: PUSH
74112: LD_INT 34
74114: PUSH
74115: LD_INT 36
74117: PUSH
74118: EMPTY
74119: LIST
74120: LIST
74121: LIST
74122: LIST
74123: LIST
74124: LIST
74125: LIST
74126: LIST
74127: LIST
74128: LIST
74129: LIST
74130: LIST
74131: LIST
74132: LIST
74133: LIST
74134: LIST
74135: LIST
74136: LIST
74137: LIST
74138: LIST
74139: LIST
74140: LIST
74141: LIST
74142: LIST
74143: LIST
74144: LIST
74145: LIST
74146: LIST
74147: LIST
74148: LIST
74149: LIST
74150: LIST
74151: LIST
74152: LIST
74153: LIST
74154: PUSH
74155: LD_INT 101
74157: PUSH
74158: LD_INT 102
74160: PUSH
74161: LD_INT 103
74163: PUSH
74164: LD_INT 104
74166: PUSH
74167: LD_INT 105
74169: PUSH
74170: LD_INT 106
74172: PUSH
74173: LD_INT 107
74175: PUSH
74176: LD_INT 108
74178: PUSH
74179: LD_INT 109
74181: PUSH
74182: LD_INT 110
74184: PUSH
74185: LD_INT 111
74187: PUSH
74188: LD_INT 112
74190: PUSH
74191: LD_INT 113
74193: PUSH
74194: LD_INT 114
74196: PUSH
74197: LD_INT 116
74199: PUSH
74200: LD_INT 117
74202: PUSH
74203: LD_INT 118
74205: PUSH
74206: EMPTY
74207: LIST
74208: LIST
74209: LIST
74210: LIST
74211: LIST
74212: LIST
74213: LIST
74214: LIST
74215: LIST
74216: LIST
74217: LIST
74218: LIST
74219: LIST
74220: LIST
74221: LIST
74222: LIST
74223: LIST
74224: PUSH
74225: EMPTY
74226: LIST
74227: LIST
74228: ST_TO_ADDR
74229: GO 75236
74231: LD_INT 15
74233: DOUBLE
74234: EQUAL
74235: IFTRUE 74239
74237: GO 74463
74239: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
74240: LD_ADDR_VAR 0 2
74244: PUSH
74245: LD_INT 1
74247: PUSH
74248: LD_INT 2
74250: PUSH
74251: LD_INT 3
74253: PUSH
74254: LD_INT 4
74256: PUSH
74257: LD_INT 5
74259: PUSH
74260: LD_INT 6
74262: PUSH
74263: LD_INT 7
74265: PUSH
74266: LD_INT 8
74268: PUSH
74269: LD_INT 9
74271: PUSH
74272: LD_INT 10
74274: PUSH
74275: LD_INT 11
74277: PUSH
74278: LD_INT 12
74280: PUSH
74281: LD_INT 13
74283: PUSH
74284: LD_INT 14
74286: PUSH
74287: LD_INT 15
74289: PUSH
74290: LD_INT 16
74292: PUSH
74293: LD_INT 17
74295: PUSH
74296: LD_INT 18
74298: PUSH
74299: LD_INT 19
74301: PUSH
74302: LD_INT 20
74304: PUSH
74305: LD_INT 21
74307: PUSH
74308: LD_INT 22
74310: PUSH
74311: LD_INT 23
74313: PUSH
74314: LD_INT 24
74316: PUSH
74317: LD_INT 25
74319: PUSH
74320: LD_INT 26
74322: PUSH
74323: LD_INT 27
74325: PUSH
74326: LD_INT 28
74328: PUSH
74329: LD_INT 29
74331: PUSH
74332: LD_INT 30
74334: PUSH
74335: LD_INT 31
74337: PUSH
74338: LD_INT 32
74340: PUSH
74341: LD_INT 33
74343: PUSH
74344: LD_INT 34
74346: PUSH
74347: LD_INT 36
74349: PUSH
74350: EMPTY
74351: LIST
74352: LIST
74353: LIST
74354: LIST
74355: LIST
74356: LIST
74357: LIST
74358: LIST
74359: LIST
74360: LIST
74361: LIST
74362: LIST
74363: LIST
74364: LIST
74365: LIST
74366: LIST
74367: LIST
74368: LIST
74369: LIST
74370: LIST
74371: LIST
74372: LIST
74373: LIST
74374: LIST
74375: LIST
74376: LIST
74377: LIST
74378: LIST
74379: LIST
74380: LIST
74381: LIST
74382: LIST
74383: LIST
74384: LIST
74385: LIST
74386: PUSH
74387: LD_INT 101
74389: PUSH
74390: LD_INT 102
74392: PUSH
74393: LD_INT 103
74395: PUSH
74396: LD_INT 104
74398: PUSH
74399: LD_INT 105
74401: PUSH
74402: LD_INT 106
74404: PUSH
74405: LD_INT 107
74407: PUSH
74408: LD_INT 108
74410: PUSH
74411: LD_INT 109
74413: PUSH
74414: LD_INT 110
74416: PUSH
74417: LD_INT 111
74419: PUSH
74420: LD_INT 112
74422: PUSH
74423: LD_INT 113
74425: PUSH
74426: LD_INT 114
74428: PUSH
74429: LD_INT 116
74431: PUSH
74432: LD_INT 117
74434: PUSH
74435: LD_INT 118
74437: PUSH
74438: EMPTY
74439: LIST
74440: LIST
74441: LIST
74442: LIST
74443: LIST
74444: LIST
74445: LIST
74446: LIST
74447: LIST
74448: LIST
74449: LIST
74450: LIST
74451: LIST
74452: LIST
74453: LIST
74454: LIST
74455: LIST
74456: PUSH
74457: EMPTY
74458: LIST
74459: LIST
74460: ST_TO_ADDR
74461: GO 75236
74463: LD_INT 16
74465: DOUBLE
74466: EQUAL
74467: IFTRUE 74471
74469: GO 74607
74471: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
74472: LD_ADDR_VAR 0 2
74476: PUSH
74477: LD_INT 2
74479: PUSH
74480: LD_INT 4
74482: PUSH
74483: LD_INT 5
74485: PUSH
74486: LD_INT 7
74488: PUSH
74489: LD_INT 11
74491: PUSH
74492: LD_INT 12
74494: PUSH
74495: LD_INT 15
74497: PUSH
74498: LD_INT 16
74500: PUSH
74501: LD_INT 20
74503: PUSH
74504: LD_INT 21
74506: PUSH
74507: LD_INT 22
74509: PUSH
74510: LD_INT 23
74512: PUSH
74513: LD_INT 25
74515: PUSH
74516: LD_INT 26
74518: PUSH
74519: LD_INT 30
74521: PUSH
74522: LD_INT 31
74524: PUSH
74525: LD_INT 32
74527: PUSH
74528: LD_INT 33
74530: PUSH
74531: LD_INT 34
74533: PUSH
74534: EMPTY
74535: LIST
74536: LIST
74537: LIST
74538: LIST
74539: LIST
74540: LIST
74541: LIST
74542: LIST
74543: LIST
74544: LIST
74545: LIST
74546: LIST
74547: LIST
74548: LIST
74549: LIST
74550: LIST
74551: LIST
74552: LIST
74553: LIST
74554: PUSH
74555: LD_INT 101
74557: PUSH
74558: LD_INT 102
74560: PUSH
74561: LD_INT 103
74563: PUSH
74564: LD_INT 106
74566: PUSH
74567: LD_INT 108
74569: PUSH
74570: LD_INT 112
74572: PUSH
74573: LD_INT 113
74575: PUSH
74576: LD_INT 114
74578: PUSH
74579: LD_INT 116
74581: PUSH
74582: LD_INT 117
74584: PUSH
74585: LD_INT 118
74587: PUSH
74588: EMPTY
74589: LIST
74590: LIST
74591: LIST
74592: LIST
74593: LIST
74594: LIST
74595: LIST
74596: LIST
74597: LIST
74598: LIST
74599: LIST
74600: PUSH
74601: EMPTY
74602: LIST
74603: LIST
74604: ST_TO_ADDR
74605: GO 75236
74607: LD_INT 17
74609: DOUBLE
74610: EQUAL
74611: IFTRUE 74615
74613: GO 74839
74615: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
74616: LD_ADDR_VAR 0 2
74620: PUSH
74621: LD_INT 1
74623: PUSH
74624: LD_INT 2
74626: PUSH
74627: LD_INT 3
74629: PUSH
74630: LD_INT 4
74632: PUSH
74633: LD_INT 5
74635: PUSH
74636: LD_INT 6
74638: PUSH
74639: LD_INT 7
74641: PUSH
74642: LD_INT 8
74644: PUSH
74645: LD_INT 9
74647: PUSH
74648: LD_INT 10
74650: PUSH
74651: LD_INT 11
74653: PUSH
74654: LD_INT 12
74656: PUSH
74657: LD_INT 13
74659: PUSH
74660: LD_INT 14
74662: PUSH
74663: LD_INT 15
74665: PUSH
74666: LD_INT 16
74668: PUSH
74669: LD_INT 17
74671: PUSH
74672: LD_INT 18
74674: PUSH
74675: LD_INT 19
74677: PUSH
74678: LD_INT 20
74680: PUSH
74681: LD_INT 21
74683: PUSH
74684: LD_INT 22
74686: PUSH
74687: LD_INT 23
74689: PUSH
74690: LD_INT 24
74692: PUSH
74693: LD_INT 25
74695: PUSH
74696: LD_INT 26
74698: PUSH
74699: LD_INT 27
74701: PUSH
74702: LD_INT 28
74704: PUSH
74705: LD_INT 29
74707: PUSH
74708: LD_INT 30
74710: PUSH
74711: LD_INT 31
74713: PUSH
74714: LD_INT 32
74716: PUSH
74717: LD_INT 33
74719: PUSH
74720: LD_INT 34
74722: PUSH
74723: LD_INT 36
74725: PUSH
74726: EMPTY
74727: LIST
74728: LIST
74729: LIST
74730: LIST
74731: LIST
74732: LIST
74733: LIST
74734: LIST
74735: LIST
74736: LIST
74737: LIST
74738: LIST
74739: LIST
74740: LIST
74741: LIST
74742: LIST
74743: LIST
74744: LIST
74745: LIST
74746: LIST
74747: LIST
74748: LIST
74749: LIST
74750: LIST
74751: LIST
74752: LIST
74753: LIST
74754: LIST
74755: LIST
74756: LIST
74757: LIST
74758: LIST
74759: LIST
74760: LIST
74761: LIST
74762: PUSH
74763: LD_INT 101
74765: PUSH
74766: LD_INT 102
74768: PUSH
74769: LD_INT 103
74771: PUSH
74772: LD_INT 104
74774: PUSH
74775: LD_INT 105
74777: PUSH
74778: LD_INT 106
74780: PUSH
74781: LD_INT 107
74783: PUSH
74784: LD_INT 108
74786: PUSH
74787: LD_INT 109
74789: PUSH
74790: LD_INT 110
74792: PUSH
74793: LD_INT 111
74795: PUSH
74796: LD_INT 112
74798: PUSH
74799: LD_INT 113
74801: PUSH
74802: LD_INT 114
74804: PUSH
74805: LD_INT 116
74807: PUSH
74808: LD_INT 117
74810: PUSH
74811: LD_INT 118
74813: PUSH
74814: EMPTY
74815: LIST
74816: LIST
74817: LIST
74818: LIST
74819: LIST
74820: LIST
74821: LIST
74822: LIST
74823: LIST
74824: LIST
74825: LIST
74826: LIST
74827: LIST
74828: LIST
74829: LIST
74830: LIST
74831: LIST
74832: PUSH
74833: EMPTY
74834: LIST
74835: LIST
74836: ST_TO_ADDR
74837: GO 75236
74839: LD_INT 18
74841: DOUBLE
74842: EQUAL
74843: IFTRUE 74847
74845: GO 74995
74847: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
74848: LD_ADDR_VAR 0 2
74852: PUSH
74853: LD_INT 2
74855: PUSH
74856: LD_INT 4
74858: PUSH
74859: LD_INT 5
74861: PUSH
74862: LD_INT 7
74864: PUSH
74865: LD_INT 11
74867: PUSH
74868: LD_INT 12
74870: PUSH
74871: LD_INT 15
74873: PUSH
74874: LD_INT 16
74876: PUSH
74877: LD_INT 20
74879: PUSH
74880: LD_INT 21
74882: PUSH
74883: LD_INT 22
74885: PUSH
74886: LD_INT 23
74888: PUSH
74889: LD_INT 25
74891: PUSH
74892: LD_INT 26
74894: PUSH
74895: LD_INT 30
74897: PUSH
74898: LD_INT 31
74900: PUSH
74901: LD_INT 32
74903: PUSH
74904: LD_INT 33
74906: PUSH
74907: LD_INT 34
74909: PUSH
74910: LD_INT 35
74912: PUSH
74913: LD_INT 36
74915: PUSH
74916: EMPTY
74917: LIST
74918: LIST
74919: LIST
74920: LIST
74921: LIST
74922: LIST
74923: LIST
74924: LIST
74925: LIST
74926: LIST
74927: LIST
74928: LIST
74929: LIST
74930: LIST
74931: LIST
74932: LIST
74933: LIST
74934: LIST
74935: LIST
74936: LIST
74937: LIST
74938: PUSH
74939: LD_INT 101
74941: PUSH
74942: LD_INT 102
74944: PUSH
74945: LD_INT 103
74947: PUSH
74948: LD_INT 106
74950: PUSH
74951: LD_INT 108
74953: PUSH
74954: LD_INT 112
74956: PUSH
74957: LD_INT 113
74959: PUSH
74960: LD_INT 114
74962: PUSH
74963: LD_INT 115
74965: PUSH
74966: LD_INT 116
74968: PUSH
74969: LD_INT 117
74971: PUSH
74972: LD_INT 118
74974: PUSH
74975: EMPTY
74976: LIST
74977: LIST
74978: LIST
74979: LIST
74980: LIST
74981: LIST
74982: LIST
74983: LIST
74984: LIST
74985: LIST
74986: LIST
74987: LIST
74988: PUSH
74989: EMPTY
74990: LIST
74991: LIST
74992: ST_TO_ADDR
74993: GO 75236
74995: LD_INT 19
74997: DOUBLE
74998: EQUAL
74999: IFTRUE 75003
75001: GO 75235
75003: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
75004: LD_ADDR_VAR 0 2
75008: PUSH
75009: LD_INT 1
75011: PUSH
75012: LD_INT 2
75014: PUSH
75015: LD_INT 3
75017: PUSH
75018: LD_INT 4
75020: PUSH
75021: LD_INT 5
75023: PUSH
75024: LD_INT 6
75026: PUSH
75027: LD_INT 7
75029: PUSH
75030: LD_INT 8
75032: PUSH
75033: LD_INT 9
75035: PUSH
75036: LD_INT 10
75038: PUSH
75039: LD_INT 11
75041: PUSH
75042: LD_INT 12
75044: PUSH
75045: LD_INT 13
75047: PUSH
75048: LD_INT 14
75050: PUSH
75051: LD_INT 15
75053: PUSH
75054: LD_INT 16
75056: PUSH
75057: LD_INT 17
75059: PUSH
75060: LD_INT 18
75062: PUSH
75063: LD_INT 19
75065: PUSH
75066: LD_INT 20
75068: PUSH
75069: LD_INT 21
75071: PUSH
75072: LD_INT 22
75074: PUSH
75075: LD_INT 23
75077: PUSH
75078: LD_INT 24
75080: PUSH
75081: LD_INT 25
75083: PUSH
75084: LD_INT 26
75086: PUSH
75087: LD_INT 27
75089: PUSH
75090: LD_INT 28
75092: PUSH
75093: LD_INT 29
75095: PUSH
75096: LD_INT 30
75098: PUSH
75099: LD_INT 31
75101: PUSH
75102: LD_INT 32
75104: PUSH
75105: LD_INT 33
75107: PUSH
75108: LD_INT 34
75110: PUSH
75111: LD_INT 35
75113: PUSH
75114: LD_INT 36
75116: PUSH
75117: EMPTY
75118: LIST
75119: LIST
75120: LIST
75121: LIST
75122: LIST
75123: LIST
75124: LIST
75125: LIST
75126: LIST
75127: LIST
75128: LIST
75129: LIST
75130: LIST
75131: LIST
75132: LIST
75133: LIST
75134: LIST
75135: LIST
75136: LIST
75137: LIST
75138: LIST
75139: LIST
75140: LIST
75141: LIST
75142: LIST
75143: LIST
75144: LIST
75145: LIST
75146: LIST
75147: LIST
75148: LIST
75149: LIST
75150: LIST
75151: LIST
75152: LIST
75153: LIST
75154: PUSH
75155: LD_INT 101
75157: PUSH
75158: LD_INT 102
75160: PUSH
75161: LD_INT 103
75163: PUSH
75164: LD_INT 104
75166: PUSH
75167: LD_INT 105
75169: PUSH
75170: LD_INT 106
75172: PUSH
75173: LD_INT 107
75175: PUSH
75176: LD_INT 108
75178: PUSH
75179: LD_INT 109
75181: PUSH
75182: LD_INT 110
75184: PUSH
75185: LD_INT 111
75187: PUSH
75188: LD_INT 112
75190: PUSH
75191: LD_INT 113
75193: PUSH
75194: LD_INT 114
75196: PUSH
75197: LD_INT 115
75199: PUSH
75200: LD_INT 116
75202: PUSH
75203: LD_INT 117
75205: PUSH
75206: LD_INT 118
75208: PUSH
75209: EMPTY
75210: LIST
75211: LIST
75212: LIST
75213: LIST
75214: LIST
75215: LIST
75216: LIST
75217: LIST
75218: LIST
75219: LIST
75220: LIST
75221: LIST
75222: LIST
75223: LIST
75224: LIST
75225: LIST
75226: LIST
75227: LIST
75228: PUSH
75229: EMPTY
75230: LIST
75231: LIST
75232: ST_TO_ADDR
75233: GO 75236
75235: POP
// end else
75236: GO 75467
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
75238: LD_ADDR_VAR 0 2
75242: PUSH
75243: LD_INT 1
75245: PUSH
75246: LD_INT 2
75248: PUSH
75249: LD_INT 3
75251: PUSH
75252: LD_INT 4
75254: PUSH
75255: LD_INT 5
75257: PUSH
75258: LD_INT 6
75260: PUSH
75261: LD_INT 7
75263: PUSH
75264: LD_INT 8
75266: PUSH
75267: LD_INT 9
75269: PUSH
75270: LD_INT 10
75272: PUSH
75273: LD_INT 11
75275: PUSH
75276: LD_INT 12
75278: PUSH
75279: LD_INT 13
75281: PUSH
75282: LD_INT 14
75284: PUSH
75285: LD_INT 15
75287: PUSH
75288: LD_INT 16
75290: PUSH
75291: LD_INT 17
75293: PUSH
75294: LD_INT 18
75296: PUSH
75297: LD_INT 19
75299: PUSH
75300: LD_INT 20
75302: PUSH
75303: LD_INT 21
75305: PUSH
75306: LD_INT 22
75308: PUSH
75309: LD_INT 23
75311: PUSH
75312: LD_INT 24
75314: PUSH
75315: LD_INT 25
75317: PUSH
75318: LD_INT 26
75320: PUSH
75321: LD_INT 27
75323: PUSH
75324: LD_INT 28
75326: PUSH
75327: LD_INT 29
75329: PUSH
75330: LD_INT 30
75332: PUSH
75333: LD_INT 31
75335: PUSH
75336: LD_INT 32
75338: PUSH
75339: LD_INT 33
75341: PUSH
75342: LD_INT 34
75344: PUSH
75345: LD_INT 35
75347: PUSH
75348: LD_INT 36
75350: PUSH
75351: EMPTY
75352: LIST
75353: LIST
75354: LIST
75355: LIST
75356: LIST
75357: LIST
75358: LIST
75359: LIST
75360: LIST
75361: LIST
75362: LIST
75363: LIST
75364: LIST
75365: LIST
75366: LIST
75367: LIST
75368: LIST
75369: LIST
75370: LIST
75371: LIST
75372: LIST
75373: LIST
75374: LIST
75375: LIST
75376: LIST
75377: LIST
75378: LIST
75379: LIST
75380: LIST
75381: LIST
75382: LIST
75383: LIST
75384: LIST
75385: LIST
75386: LIST
75387: LIST
75388: PUSH
75389: LD_INT 101
75391: PUSH
75392: LD_INT 102
75394: PUSH
75395: LD_INT 103
75397: PUSH
75398: LD_INT 104
75400: PUSH
75401: LD_INT 105
75403: PUSH
75404: LD_INT 106
75406: PUSH
75407: LD_INT 107
75409: PUSH
75410: LD_INT 108
75412: PUSH
75413: LD_INT 109
75415: PUSH
75416: LD_INT 110
75418: PUSH
75419: LD_INT 111
75421: PUSH
75422: LD_INT 112
75424: PUSH
75425: LD_INT 113
75427: PUSH
75428: LD_INT 114
75430: PUSH
75431: LD_INT 115
75433: PUSH
75434: LD_INT 116
75436: PUSH
75437: LD_INT 117
75439: PUSH
75440: LD_INT 118
75442: PUSH
75443: EMPTY
75444: LIST
75445: LIST
75446: LIST
75447: LIST
75448: LIST
75449: LIST
75450: LIST
75451: LIST
75452: LIST
75453: LIST
75454: LIST
75455: LIST
75456: LIST
75457: LIST
75458: LIST
75459: LIST
75460: LIST
75461: LIST
75462: PUSH
75463: EMPTY
75464: LIST
75465: LIST
75466: ST_TO_ADDR
// if result then
75467: LD_VAR 0 2
75471: IFFALSE 76257
// begin normal :=  ;
75473: LD_ADDR_VAR 0 5
75477: PUSH
75478: LD_STRING 
75480: ST_TO_ADDR
// hardcore :=  ;
75481: LD_ADDR_VAR 0 6
75485: PUSH
75486: LD_STRING 
75488: ST_TO_ADDR
// active :=  ;
75489: LD_ADDR_VAR 0 7
75493: PUSH
75494: LD_STRING 
75496: ST_TO_ADDR
// for i = 1 to normalCounter do
75497: LD_ADDR_VAR 0 8
75501: PUSH
75502: DOUBLE
75503: LD_INT 1
75505: DEC
75506: ST_TO_ADDR
75507: LD_EXP 63
75511: PUSH
75512: FOR_TO
75513: IFFALSE 75614
// begin tmp := 0 ;
75515: LD_ADDR_VAR 0 3
75519: PUSH
75520: LD_STRING 0
75522: ST_TO_ADDR
// if result [ 1 ] then
75523: LD_VAR 0 2
75527: PUSH
75528: LD_INT 1
75530: ARRAY
75531: IFFALSE 75596
// if result [ 1 ] [ 1 ] = i then
75533: LD_VAR 0 2
75537: PUSH
75538: LD_INT 1
75540: ARRAY
75541: PUSH
75542: LD_INT 1
75544: ARRAY
75545: PUSH
75546: LD_VAR 0 8
75550: EQUAL
75551: IFFALSE 75596
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
75553: LD_ADDR_VAR 0 2
75557: PUSH
75558: LD_VAR 0 2
75562: PPUSH
75563: LD_INT 1
75565: PPUSH
75566: LD_VAR 0 2
75570: PUSH
75571: LD_INT 1
75573: ARRAY
75574: PPUSH
75575: LD_INT 1
75577: PPUSH
75578: CALL_OW 3
75582: PPUSH
75583: CALL_OW 1
75587: ST_TO_ADDR
// tmp := 1 ;
75588: LD_ADDR_VAR 0 3
75592: PUSH
75593: LD_STRING 1
75595: ST_TO_ADDR
// end ; normal := normal & tmp ;
75596: LD_ADDR_VAR 0 5
75600: PUSH
75601: LD_VAR 0 5
75605: PUSH
75606: LD_VAR 0 3
75610: STR
75611: ST_TO_ADDR
// end ;
75612: GO 75512
75614: POP
75615: POP
// for i = 1 to hardcoreCounter do
75616: LD_ADDR_VAR 0 8
75620: PUSH
75621: DOUBLE
75622: LD_INT 1
75624: DEC
75625: ST_TO_ADDR
75626: LD_EXP 64
75630: PUSH
75631: FOR_TO
75632: IFFALSE 75737
// begin tmp := 0 ;
75634: LD_ADDR_VAR 0 3
75638: PUSH
75639: LD_STRING 0
75641: ST_TO_ADDR
// if result [ 2 ] then
75642: LD_VAR 0 2
75646: PUSH
75647: LD_INT 2
75649: ARRAY
75650: IFFALSE 75719
// if result [ 2 ] [ 1 ] = 100 + i then
75652: LD_VAR 0 2
75656: PUSH
75657: LD_INT 2
75659: ARRAY
75660: PUSH
75661: LD_INT 1
75663: ARRAY
75664: PUSH
75665: LD_INT 100
75667: PUSH
75668: LD_VAR 0 8
75672: PLUS
75673: EQUAL
75674: IFFALSE 75719
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
75676: LD_ADDR_VAR 0 2
75680: PUSH
75681: LD_VAR 0 2
75685: PPUSH
75686: LD_INT 2
75688: PPUSH
75689: LD_VAR 0 2
75693: PUSH
75694: LD_INT 2
75696: ARRAY
75697: PPUSH
75698: LD_INT 1
75700: PPUSH
75701: CALL_OW 3
75705: PPUSH
75706: CALL_OW 1
75710: ST_TO_ADDR
// tmp := 1 ;
75711: LD_ADDR_VAR 0 3
75715: PUSH
75716: LD_STRING 1
75718: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
75719: LD_ADDR_VAR 0 6
75723: PUSH
75724: LD_VAR 0 6
75728: PUSH
75729: LD_VAR 0 3
75733: STR
75734: ST_TO_ADDR
// end ;
75735: GO 75631
75737: POP
75738: POP
// if isGameLoad then
75739: LD_VAR 0 1
75743: IFFALSE 76218
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
75745: LD_ADDR_VAR 0 4
75749: PUSH
75750: LD_EXP 67
75754: PUSH
75755: LD_EXP 66
75759: PUSH
75760: LD_EXP 68
75764: PUSH
75765: LD_EXP 65
75769: PUSH
75770: LD_EXP 69
75774: PUSH
75775: LD_EXP 70
75779: PUSH
75780: LD_EXP 71
75784: PUSH
75785: LD_EXP 72
75789: PUSH
75790: LD_EXP 73
75794: PUSH
75795: LD_EXP 74
75799: PUSH
75800: LD_EXP 75
75804: PUSH
75805: LD_EXP 76
75809: PUSH
75810: LD_EXP 77
75814: PUSH
75815: LD_EXP 78
75819: PUSH
75820: LD_EXP 86
75824: PUSH
75825: LD_EXP 87
75829: PUSH
75830: LD_EXP 88
75834: PUSH
75835: LD_EXP 89
75839: PUSH
75840: LD_EXP 91
75844: PUSH
75845: LD_EXP 92
75849: PUSH
75850: LD_EXP 93
75854: PUSH
75855: LD_EXP 96
75859: PUSH
75860: LD_EXP 98
75864: PUSH
75865: LD_EXP 99
75869: PUSH
75870: LD_EXP 100
75874: PUSH
75875: LD_EXP 102
75879: PUSH
75880: LD_EXP 103
75884: PUSH
75885: LD_EXP 106
75889: PUSH
75890: LD_EXP 107
75894: PUSH
75895: LD_EXP 108
75899: PUSH
75900: LD_EXP 109
75904: PUSH
75905: LD_EXP 110
75909: PUSH
75910: LD_EXP 111
75914: PUSH
75915: LD_EXP 112
75919: PUSH
75920: LD_EXP 113
75924: PUSH
75925: LD_EXP 114
75929: PUSH
75930: LD_EXP 79
75934: PUSH
75935: LD_EXP 80
75939: PUSH
75940: LD_EXP 83
75944: PUSH
75945: LD_EXP 84
75949: PUSH
75950: LD_EXP 85
75954: PUSH
75955: LD_EXP 81
75959: PUSH
75960: LD_EXP 82
75964: PUSH
75965: LD_EXP 90
75969: PUSH
75970: LD_EXP 94
75974: PUSH
75975: LD_EXP 95
75979: PUSH
75980: LD_EXP 97
75984: PUSH
75985: LD_EXP 101
75989: PUSH
75990: LD_EXP 104
75994: PUSH
75995: LD_EXP 105
75999: PUSH
76000: LD_EXP 115
76004: PUSH
76005: LD_EXP 116
76009: PUSH
76010: LD_EXP 117
76014: PUSH
76015: LD_EXP 118
76019: PUSH
76020: EMPTY
76021: LIST
76022: LIST
76023: LIST
76024: LIST
76025: LIST
76026: LIST
76027: LIST
76028: LIST
76029: LIST
76030: LIST
76031: LIST
76032: LIST
76033: LIST
76034: LIST
76035: LIST
76036: LIST
76037: LIST
76038: LIST
76039: LIST
76040: LIST
76041: LIST
76042: LIST
76043: LIST
76044: LIST
76045: LIST
76046: LIST
76047: LIST
76048: LIST
76049: LIST
76050: LIST
76051: LIST
76052: LIST
76053: LIST
76054: LIST
76055: LIST
76056: LIST
76057: LIST
76058: LIST
76059: LIST
76060: LIST
76061: LIST
76062: LIST
76063: LIST
76064: LIST
76065: LIST
76066: LIST
76067: LIST
76068: LIST
76069: LIST
76070: LIST
76071: LIST
76072: LIST
76073: LIST
76074: LIST
76075: ST_TO_ADDR
// tmp :=  ;
76076: LD_ADDR_VAR 0 3
76080: PUSH
76081: LD_STRING 
76083: ST_TO_ADDR
// for i = 1 to normalCounter do
76084: LD_ADDR_VAR 0 8
76088: PUSH
76089: DOUBLE
76090: LD_INT 1
76092: DEC
76093: ST_TO_ADDR
76094: LD_EXP 63
76098: PUSH
76099: FOR_TO
76100: IFFALSE 76136
// begin if flags [ i ] then
76102: LD_VAR 0 4
76106: PUSH
76107: LD_VAR 0 8
76111: ARRAY
76112: IFFALSE 76134
// tmp := tmp & i & ; ;
76114: LD_ADDR_VAR 0 3
76118: PUSH
76119: LD_VAR 0 3
76123: PUSH
76124: LD_VAR 0 8
76128: STR
76129: PUSH
76130: LD_STRING ;
76132: STR
76133: ST_TO_ADDR
// end ;
76134: GO 76099
76136: POP
76137: POP
// for i = 1 to hardcoreCounter do
76138: LD_ADDR_VAR 0 8
76142: PUSH
76143: DOUBLE
76144: LD_INT 1
76146: DEC
76147: ST_TO_ADDR
76148: LD_EXP 64
76152: PUSH
76153: FOR_TO
76154: IFFALSE 76200
// begin if flags [ normalCounter + i ] then
76156: LD_VAR 0 4
76160: PUSH
76161: LD_EXP 63
76165: PUSH
76166: LD_VAR 0 8
76170: PLUS
76171: ARRAY
76172: IFFALSE 76198
// tmp := tmp & ( 100 + i ) & ; ;
76174: LD_ADDR_VAR 0 3
76178: PUSH
76179: LD_VAR 0 3
76183: PUSH
76184: LD_INT 100
76186: PUSH
76187: LD_VAR 0 8
76191: PLUS
76192: STR
76193: PUSH
76194: LD_STRING ;
76196: STR
76197: ST_TO_ADDR
// end ;
76198: GO 76153
76200: POP
76201: POP
// if tmp then
76202: LD_VAR 0 3
76206: IFFALSE 76218
// active := tmp ;
76208: LD_ADDR_VAR 0 7
76212: PUSH
76213: LD_VAR 0 3
76217: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
76218: LD_STRING getStreamItemsFromMission("
76220: PUSH
76221: LD_VAR 0 5
76225: STR
76226: PUSH
76227: LD_STRING ","
76229: STR
76230: PUSH
76231: LD_VAR 0 6
76235: STR
76236: PUSH
76237: LD_STRING ","
76239: STR
76240: PUSH
76241: LD_VAR 0 7
76245: STR
76246: PUSH
76247: LD_STRING ")
76249: STR
76250: PPUSH
76251: CALL_OW 559
// end else
76255: GO 76264
// ToLua ( getStreamItemsFromMission("","","") ) ;
76257: LD_STRING getStreamItemsFromMission("","","")
76259: PPUSH
76260: CALL_OW 559
// end ;
76264: LD_VAR 0 2
76268: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
76269: LD_EXP 62
76273: PUSH
76274: LD_EXP 67
76278: AND
76279: IFFALSE 76403
76281: GO 76283
76283: DISABLE
76284: LD_INT 0
76286: PPUSH
76287: PPUSH
// begin enable ;
76288: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
76289: LD_ADDR_VAR 0 2
76293: PUSH
76294: LD_INT 22
76296: PUSH
76297: LD_OWVAR 2
76301: PUSH
76302: EMPTY
76303: LIST
76304: LIST
76305: PUSH
76306: LD_INT 2
76308: PUSH
76309: LD_INT 34
76311: PUSH
76312: LD_INT 7
76314: PUSH
76315: EMPTY
76316: LIST
76317: LIST
76318: PUSH
76319: LD_INT 34
76321: PUSH
76322: LD_INT 45
76324: PUSH
76325: EMPTY
76326: LIST
76327: LIST
76328: PUSH
76329: LD_INT 34
76331: PUSH
76332: LD_INT 28
76334: PUSH
76335: EMPTY
76336: LIST
76337: LIST
76338: PUSH
76339: LD_INT 34
76341: PUSH
76342: LD_INT 47
76344: PUSH
76345: EMPTY
76346: LIST
76347: LIST
76348: PUSH
76349: EMPTY
76350: LIST
76351: LIST
76352: LIST
76353: LIST
76354: LIST
76355: PUSH
76356: EMPTY
76357: LIST
76358: LIST
76359: PPUSH
76360: CALL_OW 69
76364: ST_TO_ADDR
// if not tmp then
76365: LD_VAR 0 2
76369: NOT
76370: IFFALSE 76374
// exit ;
76372: GO 76403
// for i in tmp do
76374: LD_ADDR_VAR 0 1
76378: PUSH
76379: LD_VAR 0 2
76383: PUSH
76384: FOR_IN
76385: IFFALSE 76401
// begin SetLives ( i , 0 ) ;
76387: LD_VAR 0 1
76391: PPUSH
76392: LD_INT 0
76394: PPUSH
76395: CALL_OW 234
// end ;
76399: GO 76384
76401: POP
76402: POP
// end ;
76403: PPOPN 2
76405: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
76406: LD_EXP 62
76410: PUSH
76411: LD_EXP 68
76415: AND
76416: IFFALSE 76500
76418: GO 76420
76420: DISABLE
76421: LD_INT 0
76423: PPUSH
76424: PPUSH
// begin enable ;
76425: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
76426: LD_ADDR_VAR 0 2
76430: PUSH
76431: LD_INT 22
76433: PUSH
76434: LD_OWVAR 2
76438: PUSH
76439: EMPTY
76440: LIST
76441: LIST
76442: PUSH
76443: LD_INT 32
76445: PUSH
76446: LD_INT 3
76448: PUSH
76449: EMPTY
76450: LIST
76451: LIST
76452: PUSH
76453: EMPTY
76454: LIST
76455: LIST
76456: PPUSH
76457: CALL_OW 69
76461: ST_TO_ADDR
// if not tmp then
76462: LD_VAR 0 2
76466: NOT
76467: IFFALSE 76471
// exit ;
76469: GO 76500
// for i in tmp do
76471: LD_ADDR_VAR 0 1
76475: PUSH
76476: LD_VAR 0 2
76480: PUSH
76481: FOR_IN
76482: IFFALSE 76498
// begin SetLives ( i , 0 ) ;
76484: LD_VAR 0 1
76488: PPUSH
76489: LD_INT 0
76491: PPUSH
76492: CALL_OW 234
// end ;
76496: GO 76481
76498: POP
76499: POP
// end ;
76500: PPOPN 2
76502: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
76503: LD_EXP 62
76507: PUSH
76508: LD_EXP 65
76512: AND
76513: IFFALSE 76606
76515: GO 76517
76517: DISABLE
76518: LD_INT 0
76520: PPUSH
// begin enable ;
76521: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
76522: LD_ADDR_VAR 0 1
76526: PUSH
76527: LD_INT 22
76529: PUSH
76530: LD_OWVAR 2
76534: PUSH
76535: EMPTY
76536: LIST
76537: LIST
76538: PUSH
76539: LD_INT 2
76541: PUSH
76542: LD_INT 25
76544: PUSH
76545: LD_INT 5
76547: PUSH
76548: EMPTY
76549: LIST
76550: LIST
76551: PUSH
76552: LD_INT 25
76554: PUSH
76555: LD_INT 9
76557: PUSH
76558: EMPTY
76559: LIST
76560: LIST
76561: PUSH
76562: LD_INT 25
76564: PUSH
76565: LD_INT 8
76567: PUSH
76568: EMPTY
76569: LIST
76570: LIST
76571: PUSH
76572: EMPTY
76573: LIST
76574: LIST
76575: LIST
76576: LIST
76577: PUSH
76578: EMPTY
76579: LIST
76580: LIST
76581: PPUSH
76582: CALL_OW 69
76586: PUSH
76587: FOR_IN
76588: IFFALSE 76604
// begin SetClass ( i , 1 ) ;
76590: LD_VAR 0 1
76594: PPUSH
76595: LD_INT 1
76597: PPUSH
76598: CALL_OW 336
// end ;
76602: GO 76587
76604: POP
76605: POP
// end ;
76606: PPOPN 1
76608: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
76609: LD_EXP 62
76613: PUSH
76614: LD_EXP 66
76618: AND
76619: PUSH
76620: LD_OWVAR 65
76624: PUSH
76625: LD_INT 7
76627: LESS
76628: AND
76629: IFFALSE 76643
76631: GO 76633
76633: DISABLE
// begin enable ;
76634: ENABLE
// game_speed := 7 ;
76635: LD_ADDR_OWVAR 65
76639: PUSH
76640: LD_INT 7
76642: ST_TO_ADDR
// end ;
76643: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
76644: LD_EXP 62
76648: PUSH
76649: LD_EXP 69
76653: AND
76654: IFFALSE 76856
76656: GO 76658
76658: DISABLE
76659: LD_INT 0
76661: PPUSH
76662: PPUSH
76663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
76664: LD_ADDR_VAR 0 3
76668: PUSH
76669: LD_INT 81
76671: PUSH
76672: LD_OWVAR 2
76676: PUSH
76677: EMPTY
76678: LIST
76679: LIST
76680: PUSH
76681: LD_INT 21
76683: PUSH
76684: LD_INT 1
76686: PUSH
76687: EMPTY
76688: LIST
76689: LIST
76690: PUSH
76691: EMPTY
76692: LIST
76693: LIST
76694: PPUSH
76695: CALL_OW 69
76699: ST_TO_ADDR
// if not tmp then
76700: LD_VAR 0 3
76704: NOT
76705: IFFALSE 76709
// exit ;
76707: GO 76856
// if tmp > 5 then
76709: LD_VAR 0 3
76713: PUSH
76714: LD_INT 5
76716: GREATER
76717: IFFALSE 76729
// k := 5 else
76719: LD_ADDR_VAR 0 2
76723: PUSH
76724: LD_INT 5
76726: ST_TO_ADDR
76727: GO 76739
// k := tmp ;
76729: LD_ADDR_VAR 0 2
76733: PUSH
76734: LD_VAR 0 3
76738: ST_TO_ADDR
// for i := 1 to k do
76739: LD_ADDR_VAR 0 1
76743: PUSH
76744: DOUBLE
76745: LD_INT 1
76747: DEC
76748: ST_TO_ADDR
76749: LD_VAR 0 2
76753: PUSH
76754: FOR_TO
76755: IFFALSE 76854
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
76757: LD_VAR 0 3
76761: PUSH
76762: LD_VAR 0 1
76766: ARRAY
76767: PPUSH
76768: LD_VAR 0 1
76772: PUSH
76773: LD_INT 4
76775: MOD
76776: PUSH
76777: LD_INT 1
76779: PLUS
76780: PPUSH
76781: CALL_OW 259
76785: PUSH
76786: LD_INT 10
76788: LESS
76789: IFFALSE 76852
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
76791: LD_VAR 0 3
76795: PUSH
76796: LD_VAR 0 1
76800: ARRAY
76801: PPUSH
76802: LD_VAR 0 1
76806: PUSH
76807: LD_INT 4
76809: MOD
76810: PUSH
76811: LD_INT 1
76813: PLUS
76814: PPUSH
76815: LD_VAR 0 3
76819: PUSH
76820: LD_VAR 0 1
76824: ARRAY
76825: PPUSH
76826: LD_VAR 0 1
76830: PUSH
76831: LD_INT 4
76833: MOD
76834: PUSH
76835: LD_INT 1
76837: PLUS
76838: PPUSH
76839: CALL_OW 259
76843: PUSH
76844: LD_INT 1
76846: PLUS
76847: PPUSH
76848: CALL_OW 237
76852: GO 76754
76854: POP
76855: POP
// end ;
76856: PPOPN 3
76858: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
76859: LD_EXP 62
76863: PUSH
76864: LD_EXP 70
76868: AND
76869: IFFALSE 76889
76871: GO 76873
76873: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
76874: LD_INT 4
76876: PPUSH
76877: LD_OWVAR 2
76881: PPUSH
76882: LD_INT 0
76884: PPUSH
76885: CALL_OW 324
76889: END
// every 0 0$1 trigger StreamModeActive and sShovel do
76890: LD_EXP 62
76894: PUSH
76895: LD_EXP 99
76899: AND
76900: IFFALSE 76920
76902: GO 76904
76904: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
76905: LD_INT 19
76907: PPUSH
76908: LD_OWVAR 2
76912: PPUSH
76913: LD_INT 0
76915: PPUSH
76916: CALL_OW 324
76920: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
76921: LD_EXP 62
76925: PUSH
76926: LD_EXP 71
76930: AND
76931: IFFALSE 77033
76933: GO 76935
76935: DISABLE
76936: LD_INT 0
76938: PPUSH
76939: PPUSH
// begin enable ;
76940: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
76941: LD_ADDR_VAR 0 2
76945: PUSH
76946: LD_INT 22
76948: PUSH
76949: LD_OWVAR 2
76953: PUSH
76954: EMPTY
76955: LIST
76956: LIST
76957: PUSH
76958: LD_INT 2
76960: PUSH
76961: LD_INT 34
76963: PUSH
76964: LD_INT 11
76966: PUSH
76967: EMPTY
76968: LIST
76969: LIST
76970: PUSH
76971: LD_INT 34
76973: PUSH
76974: LD_INT 30
76976: PUSH
76977: EMPTY
76978: LIST
76979: LIST
76980: PUSH
76981: EMPTY
76982: LIST
76983: LIST
76984: LIST
76985: PUSH
76986: EMPTY
76987: LIST
76988: LIST
76989: PPUSH
76990: CALL_OW 69
76994: ST_TO_ADDR
// if not tmp then
76995: LD_VAR 0 2
76999: NOT
77000: IFFALSE 77004
// exit ;
77002: GO 77033
// for i in tmp do
77004: LD_ADDR_VAR 0 1
77008: PUSH
77009: LD_VAR 0 2
77013: PUSH
77014: FOR_IN
77015: IFFALSE 77031
// begin SetLives ( i , 0 ) ;
77017: LD_VAR 0 1
77021: PPUSH
77022: LD_INT 0
77024: PPUSH
77025: CALL_OW 234
// end ;
77029: GO 77014
77031: POP
77032: POP
// end ;
77033: PPOPN 2
77035: END
// every 0 0$1 trigger StreamModeActive and sBunker do
77036: LD_EXP 62
77040: PUSH
77041: LD_EXP 72
77045: AND
77046: IFFALSE 77066
77048: GO 77050
77050: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
77051: LD_INT 32
77053: PPUSH
77054: LD_OWVAR 2
77058: PPUSH
77059: LD_INT 0
77061: PPUSH
77062: CALL_OW 324
77066: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
77067: LD_EXP 62
77071: PUSH
77072: LD_EXP 73
77076: AND
77077: IFFALSE 77258
77079: GO 77081
77081: DISABLE
77082: LD_INT 0
77084: PPUSH
77085: PPUSH
77086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
77087: LD_ADDR_VAR 0 2
77091: PUSH
77092: LD_INT 22
77094: PUSH
77095: LD_OWVAR 2
77099: PUSH
77100: EMPTY
77101: LIST
77102: LIST
77103: PUSH
77104: LD_INT 33
77106: PUSH
77107: LD_INT 3
77109: PUSH
77110: EMPTY
77111: LIST
77112: LIST
77113: PUSH
77114: EMPTY
77115: LIST
77116: LIST
77117: PPUSH
77118: CALL_OW 69
77122: ST_TO_ADDR
// if not tmp then
77123: LD_VAR 0 2
77127: NOT
77128: IFFALSE 77132
// exit ;
77130: GO 77258
// side := 0 ;
77132: LD_ADDR_VAR 0 3
77136: PUSH
77137: LD_INT 0
77139: ST_TO_ADDR
// for i := 1 to 8 do
77140: LD_ADDR_VAR 0 1
77144: PUSH
77145: DOUBLE
77146: LD_INT 1
77148: DEC
77149: ST_TO_ADDR
77150: LD_INT 8
77152: PUSH
77153: FOR_TO
77154: IFFALSE 77202
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
77156: LD_OWVAR 2
77160: PUSH
77161: LD_VAR 0 1
77165: NONEQUAL
77166: PUSH
77167: LD_OWVAR 2
77171: PPUSH
77172: LD_VAR 0 1
77176: PPUSH
77177: CALL_OW 81
77181: PUSH
77182: LD_INT 2
77184: EQUAL
77185: AND
77186: IFFALSE 77200
// begin side := i ;
77188: LD_ADDR_VAR 0 3
77192: PUSH
77193: LD_VAR 0 1
77197: ST_TO_ADDR
// break ;
77198: GO 77202
// end ;
77200: GO 77153
77202: POP
77203: POP
// if not side then
77204: LD_VAR 0 3
77208: NOT
77209: IFFALSE 77213
// exit ;
77211: GO 77258
// for i := 1 to tmp do
77213: LD_ADDR_VAR 0 1
77217: PUSH
77218: DOUBLE
77219: LD_INT 1
77221: DEC
77222: ST_TO_ADDR
77223: LD_VAR 0 2
77227: PUSH
77228: FOR_TO
77229: IFFALSE 77256
// if Prob ( 60 ) then
77231: LD_INT 60
77233: PPUSH
77234: CALL_OW 13
77238: IFFALSE 77254
// SetSide ( i , side ) ;
77240: LD_VAR 0 1
77244: PPUSH
77245: LD_VAR 0 3
77249: PPUSH
77250: CALL_OW 235
77254: GO 77228
77256: POP
77257: POP
// end ;
77258: PPOPN 3
77260: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
77261: LD_EXP 62
77265: PUSH
77266: LD_EXP 75
77270: AND
77271: IFFALSE 77390
77273: GO 77275
77275: DISABLE
77276: LD_INT 0
77278: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
77279: LD_ADDR_VAR 0 1
77283: PUSH
77284: LD_INT 22
77286: PUSH
77287: LD_OWVAR 2
77291: PUSH
77292: EMPTY
77293: LIST
77294: LIST
77295: PUSH
77296: LD_INT 21
77298: PUSH
77299: LD_INT 1
77301: PUSH
77302: EMPTY
77303: LIST
77304: LIST
77305: PUSH
77306: LD_INT 3
77308: PUSH
77309: LD_INT 23
77311: PUSH
77312: LD_INT 0
77314: PUSH
77315: EMPTY
77316: LIST
77317: LIST
77318: PUSH
77319: EMPTY
77320: LIST
77321: LIST
77322: PUSH
77323: EMPTY
77324: LIST
77325: LIST
77326: LIST
77327: PPUSH
77328: CALL_OW 69
77332: PUSH
77333: FOR_IN
77334: IFFALSE 77388
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
77336: LD_VAR 0 1
77340: PPUSH
77341: CALL_OW 257
77345: PUSH
77346: LD_INT 1
77348: PUSH
77349: LD_INT 2
77351: PUSH
77352: LD_INT 3
77354: PUSH
77355: LD_INT 4
77357: PUSH
77358: EMPTY
77359: LIST
77360: LIST
77361: LIST
77362: LIST
77363: IN
77364: IFFALSE 77386
// SetClass ( un , rand ( 1 , 4 ) ) ;
77366: LD_VAR 0 1
77370: PPUSH
77371: LD_INT 1
77373: PPUSH
77374: LD_INT 4
77376: PPUSH
77377: CALL_OW 12
77381: PPUSH
77382: CALL_OW 336
77386: GO 77333
77388: POP
77389: POP
// end ;
77390: PPOPN 1
77392: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
77393: LD_EXP 62
77397: PUSH
77398: LD_EXP 74
77402: AND
77403: IFFALSE 77482
77405: GO 77407
77407: DISABLE
77408: LD_INT 0
77410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
77411: LD_ADDR_VAR 0 1
77415: PUSH
77416: LD_INT 22
77418: PUSH
77419: LD_OWVAR 2
77423: PUSH
77424: EMPTY
77425: LIST
77426: LIST
77427: PUSH
77428: LD_INT 21
77430: PUSH
77431: LD_INT 3
77433: PUSH
77434: EMPTY
77435: LIST
77436: LIST
77437: PUSH
77438: EMPTY
77439: LIST
77440: LIST
77441: PPUSH
77442: CALL_OW 69
77446: ST_TO_ADDR
// if not tmp then
77447: LD_VAR 0 1
77451: NOT
77452: IFFALSE 77456
// exit ;
77454: GO 77482
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
77456: LD_VAR 0 1
77460: PUSH
77461: LD_INT 1
77463: PPUSH
77464: LD_VAR 0 1
77468: PPUSH
77469: CALL_OW 12
77473: ARRAY
77474: PPUSH
77475: LD_INT 100
77477: PPUSH
77478: CALL_OW 234
// end ;
77482: PPOPN 1
77484: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
77485: LD_EXP 62
77489: PUSH
77490: LD_EXP 76
77494: AND
77495: IFFALSE 77593
77497: GO 77499
77499: DISABLE
77500: LD_INT 0
77502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
77503: LD_ADDR_VAR 0 1
77507: PUSH
77508: LD_INT 22
77510: PUSH
77511: LD_OWVAR 2
77515: PUSH
77516: EMPTY
77517: LIST
77518: LIST
77519: PUSH
77520: LD_INT 21
77522: PUSH
77523: LD_INT 1
77525: PUSH
77526: EMPTY
77527: LIST
77528: LIST
77529: PUSH
77530: EMPTY
77531: LIST
77532: LIST
77533: PPUSH
77534: CALL_OW 69
77538: ST_TO_ADDR
// if not tmp then
77539: LD_VAR 0 1
77543: NOT
77544: IFFALSE 77548
// exit ;
77546: GO 77593
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
77548: LD_VAR 0 1
77552: PUSH
77553: LD_INT 1
77555: PPUSH
77556: LD_VAR 0 1
77560: PPUSH
77561: CALL_OW 12
77565: ARRAY
77566: PPUSH
77567: LD_INT 1
77569: PPUSH
77570: LD_INT 4
77572: PPUSH
77573: CALL_OW 12
77577: PPUSH
77578: LD_INT 3000
77580: PPUSH
77581: LD_INT 9000
77583: PPUSH
77584: CALL_OW 12
77588: PPUSH
77589: CALL_OW 492
// end ;
77593: PPOPN 1
77595: END
// every 0 0$1 trigger StreamModeActive and sDepot do
77596: LD_EXP 62
77600: PUSH
77601: LD_EXP 77
77605: AND
77606: IFFALSE 77626
77608: GO 77610
77610: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
77611: LD_INT 1
77613: PPUSH
77614: LD_OWVAR 2
77618: PPUSH
77619: LD_INT 0
77621: PPUSH
77622: CALL_OW 324
77626: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
77627: LD_EXP 62
77631: PUSH
77632: LD_EXP 78
77636: AND
77637: IFFALSE 77720
77639: GO 77641
77641: DISABLE
77642: LD_INT 0
77644: PPUSH
77645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
77646: LD_ADDR_VAR 0 2
77650: PUSH
77651: LD_INT 22
77653: PUSH
77654: LD_OWVAR 2
77658: PUSH
77659: EMPTY
77660: LIST
77661: LIST
77662: PUSH
77663: LD_INT 21
77665: PUSH
77666: LD_INT 3
77668: PUSH
77669: EMPTY
77670: LIST
77671: LIST
77672: PUSH
77673: EMPTY
77674: LIST
77675: LIST
77676: PPUSH
77677: CALL_OW 69
77681: ST_TO_ADDR
// if not tmp then
77682: LD_VAR 0 2
77686: NOT
77687: IFFALSE 77691
// exit ;
77689: GO 77720
// for i in tmp do
77691: LD_ADDR_VAR 0 1
77695: PUSH
77696: LD_VAR 0 2
77700: PUSH
77701: FOR_IN
77702: IFFALSE 77718
// SetBLevel ( i , 10 ) ;
77704: LD_VAR 0 1
77708: PPUSH
77709: LD_INT 10
77711: PPUSH
77712: CALL_OW 241
77716: GO 77701
77718: POP
77719: POP
// end ;
77720: PPOPN 2
77722: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
77723: LD_EXP 62
77727: PUSH
77728: LD_EXP 79
77732: AND
77733: IFFALSE 77844
77735: GO 77737
77737: DISABLE
77738: LD_INT 0
77740: PPUSH
77741: PPUSH
77742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77743: LD_ADDR_VAR 0 3
77747: PUSH
77748: LD_INT 22
77750: PUSH
77751: LD_OWVAR 2
77755: PUSH
77756: EMPTY
77757: LIST
77758: LIST
77759: PUSH
77760: LD_INT 25
77762: PUSH
77763: LD_INT 1
77765: PUSH
77766: EMPTY
77767: LIST
77768: LIST
77769: PUSH
77770: EMPTY
77771: LIST
77772: LIST
77773: PPUSH
77774: CALL_OW 69
77778: ST_TO_ADDR
// if not tmp then
77779: LD_VAR 0 3
77783: NOT
77784: IFFALSE 77788
// exit ;
77786: GO 77844
// un := tmp [ rand ( 1 , tmp ) ] ;
77788: LD_ADDR_VAR 0 2
77792: PUSH
77793: LD_VAR 0 3
77797: PUSH
77798: LD_INT 1
77800: PPUSH
77801: LD_VAR 0 3
77805: PPUSH
77806: CALL_OW 12
77810: ARRAY
77811: ST_TO_ADDR
// if Crawls ( un ) then
77812: LD_VAR 0 2
77816: PPUSH
77817: CALL_OW 318
77821: IFFALSE 77832
// ComWalk ( un ) ;
77823: LD_VAR 0 2
77827: PPUSH
77828: CALL_OW 138
// SetClass ( un , class_sniper ) ;
77832: LD_VAR 0 2
77836: PPUSH
77837: LD_INT 5
77839: PPUSH
77840: CALL_OW 336
// end ;
77844: PPOPN 3
77846: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
77847: LD_EXP 62
77851: PUSH
77852: LD_EXP 80
77856: AND
77857: PUSH
77858: LD_OWVAR 67
77862: PUSH
77863: LD_INT 4
77865: LESS
77866: AND
77867: IFFALSE 77886
77869: GO 77871
77871: DISABLE
// begin Difficulty := Difficulty + 1 ;
77872: LD_ADDR_OWVAR 67
77876: PUSH
77877: LD_OWVAR 67
77881: PUSH
77882: LD_INT 1
77884: PLUS
77885: ST_TO_ADDR
// end ;
77886: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
77887: LD_EXP 62
77891: PUSH
77892: LD_EXP 81
77896: AND
77897: IFFALSE 78000
77899: GO 77901
77901: DISABLE
77902: LD_INT 0
77904: PPUSH
// begin for i := 1 to 5 do
77905: LD_ADDR_VAR 0 1
77909: PUSH
77910: DOUBLE
77911: LD_INT 1
77913: DEC
77914: ST_TO_ADDR
77915: LD_INT 5
77917: PUSH
77918: FOR_TO
77919: IFFALSE 77998
// begin uc_nation := nation_nature ;
77921: LD_ADDR_OWVAR 21
77925: PUSH
77926: LD_INT 0
77928: ST_TO_ADDR
// uc_side := 0 ;
77929: LD_ADDR_OWVAR 20
77933: PUSH
77934: LD_INT 0
77936: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
77937: LD_ADDR_OWVAR 29
77941: PUSH
77942: LD_INT 12
77944: PUSH
77945: LD_INT 12
77947: PUSH
77948: EMPTY
77949: LIST
77950: LIST
77951: ST_TO_ADDR
// hc_agressivity := 20 ;
77952: LD_ADDR_OWVAR 35
77956: PUSH
77957: LD_INT 20
77959: ST_TO_ADDR
// hc_class := class_tiger ;
77960: LD_ADDR_OWVAR 28
77964: PUSH
77965: LD_INT 14
77967: ST_TO_ADDR
// hc_gallery :=  ;
77968: LD_ADDR_OWVAR 33
77972: PUSH
77973: LD_STRING 
77975: ST_TO_ADDR
// hc_name :=  ;
77976: LD_ADDR_OWVAR 26
77980: PUSH
77981: LD_STRING 
77983: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
77984: CALL_OW 44
77988: PPUSH
77989: LD_INT 0
77991: PPUSH
77992: CALL_OW 51
// end ;
77996: GO 77918
77998: POP
77999: POP
// end ;
78000: PPOPN 1
78002: END
// every 0 0$1 trigger StreamModeActive and sBomb do
78003: LD_EXP 62
78007: PUSH
78008: LD_EXP 82
78012: AND
78013: IFFALSE 78022
78015: GO 78017
78017: DISABLE
// StreamSibBomb ;
78018: CALL 78023 0 0
78022: END
// export function StreamSibBomb ; var i , x , y ; begin
78023: LD_INT 0
78025: PPUSH
78026: PPUSH
78027: PPUSH
78028: PPUSH
// result := false ;
78029: LD_ADDR_VAR 0 1
78033: PUSH
78034: LD_INT 0
78036: ST_TO_ADDR
// for i := 1 to 16 do
78037: LD_ADDR_VAR 0 2
78041: PUSH
78042: DOUBLE
78043: LD_INT 1
78045: DEC
78046: ST_TO_ADDR
78047: LD_INT 16
78049: PUSH
78050: FOR_TO
78051: IFFALSE 78250
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
78053: LD_ADDR_VAR 0 3
78057: PUSH
78058: LD_INT 10
78060: PUSH
78061: LD_INT 20
78063: PUSH
78064: LD_INT 30
78066: PUSH
78067: LD_INT 40
78069: PUSH
78070: LD_INT 50
78072: PUSH
78073: LD_INT 60
78075: PUSH
78076: LD_INT 70
78078: PUSH
78079: LD_INT 80
78081: PUSH
78082: LD_INT 90
78084: PUSH
78085: LD_INT 100
78087: PUSH
78088: LD_INT 110
78090: PUSH
78091: LD_INT 120
78093: PUSH
78094: LD_INT 130
78096: PUSH
78097: LD_INT 140
78099: PUSH
78100: LD_INT 150
78102: PUSH
78103: EMPTY
78104: LIST
78105: LIST
78106: LIST
78107: LIST
78108: LIST
78109: LIST
78110: LIST
78111: LIST
78112: LIST
78113: LIST
78114: LIST
78115: LIST
78116: LIST
78117: LIST
78118: LIST
78119: PUSH
78120: LD_INT 1
78122: PPUSH
78123: LD_INT 15
78125: PPUSH
78126: CALL_OW 12
78130: ARRAY
78131: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
78132: LD_ADDR_VAR 0 4
78136: PUSH
78137: LD_INT 10
78139: PUSH
78140: LD_INT 20
78142: PUSH
78143: LD_INT 30
78145: PUSH
78146: LD_INT 40
78148: PUSH
78149: LD_INT 50
78151: PUSH
78152: LD_INT 60
78154: PUSH
78155: LD_INT 70
78157: PUSH
78158: LD_INT 80
78160: PUSH
78161: LD_INT 90
78163: PUSH
78164: LD_INT 100
78166: PUSH
78167: LD_INT 110
78169: PUSH
78170: LD_INT 120
78172: PUSH
78173: LD_INT 130
78175: PUSH
78176: LD_INT 140
78178: PUSH
78179: LD_INT 150
78181: PUSH
78182: EMPTY
78183: LIST
78184: LIST
78185: LIST
78186: LIST
78187: LIST
78188: LIST
78189: LIST
78190: LIST
78191: LIST
78192: LIST
78193: LIST
78194: LIST
78195: LIST
78196: LIST
78197: LIST
78198: PUSH
78199: LD_INT 1
78201: PPUSH
78202: LD_INT 15
78204: PPUSH
78205: CALL_OW 12
78209: ARRAY
78210: ST_TO_ADDR
// if ValidHex ( x , y ) then
78211: LD_VAR 0 3
78215: PPUSH
78216: LD_VAR 0 4
78220: PPUSH
78221: CALL_OW 488
78225: IFFALSE 78248
// begin result := [ x , y ] ;
78227: LD_ADDR_VAR 0 1
78231: PUSH
78232: LD_VAR 0 3
78236: PUSH
78237: LD_VAR 0 4
78241: PUSH
78242: EMPTY
78243: LIST
78244: LIST
78245: ST_TO_ADDR
// break ;
78246: GO 78250
// end ; end ;
78248: GO 78050
78250: POP
78251: POP
// if result then
78252: LD_VAR 0 1
78256: IFFALSE 78316
// begin ToLua ( playSibBomb() ) ;
78258: LD_STRING playSibBomb()
78260: PPUSH
78261: CALL_OW 559
// wait ( 0 0$14 ) ;
78265: LD_INT 490
78267: PPUSH
78268: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
78272: LD_VAR 0 1
78276: PUSH
78277: LD_INT 1
78279: ARRAY
78280: PPUSH
78281: LD_VAR 0 1
78285: PUSH
78286: LD_INT 2
78288: ARRAY
78289: PPUSH
78290: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
78294: LD_VAR 0 1
78298: PUSH
78299: LD_INT 1
78301: ARRAY
78302: PPUSH
78303: LD_VAR 0 1
78307: PUSH
78308: LD_INT 2
78310: ARRAY
78311: PPUSH
78312: CALL_OW 429
// end ; end ;
78316: LD_VAR 0 1
78320: RET
// every 0 0$1 trigger StreamModeActive and sReset do
78321: LD_EXP 62
78325: PUSH
78326: LD_EXP 84
78330: AND
78331: IFFALSE 78343
78333: GO 78335
78335: DISABLE
// YouLost (  ) ;
78336: LD_STRING 
78338: PPUSH
78339: CALL_OW 104
78343: END
// every 0 0$1 trigger StreamModeActive and sFog do
78344: LD_EXP 62
78348: PUSH
78349: LD_EXP 83
78353: AND
78354: IFFALSE 78368
78356: GO 78358
78358: DISABLE
// FogOff ( your_side ) ;
78359: LD_OWVAR 2
78363: PPUSH
78364: CALL_OW 344
78368: END
// every 0 0$1 trigger StreamModeActive and sSun do
78369: LD_EXP 62
78373: PUSH
78374: LD_EXP 85
78378: AND
78379: IFFALSE 78407
78381: GO 78383
78383: DISABLE
// begin solar_recharge_percent := 0 ;
78384: LD_ADDR_OWVAR 79
78388: PUSH
78389: LD_INT 0
78391: ST_TO_ADDR
// wait ( 5 5$00 ) ;
78392: LD_INT 10500
78394: PPUSH
78395: CALL_OW 67
// solar_recharge_percent := 100 ;
78399: LD_ADDR_OWVAR 79
78403: PUSH
78404: LD_INT 100
78406: ST_TO_ADDR
// end ;
78407: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
78408: LD_EXP 62
78412: PUSH
78413: LD_EXP 86
78417: AND
78418: IFFALSE 78657
78420: GO 78422
78422: DISABLE
78423: LD_INT 0
78425: PPUSH
78426: PPUSH
78427: PPUSH
// begin tmp := [ ] ;
78428: LD_ADDR_VAR 0 3
78432: PUSH
78433: EMPTY
78434: ST_TO_ADDR
// for i := 1 to 6 do
78435: LD_ADDR_VAR 0 1
78439: PUSH
78440: DOUBLE
78441: LD_INT 1
78443: DEC
78444: ST_TO_ADDR
78445: LD_INT 6
78447: PUSH
78448: FOR_TO
78449: IFFALSE 78554
// begin uc_nation := nation_nature ;
78451: LD_ADDR_OWVAR 21
78455: PUSH
78456: LD_INT 0
78458: ST_TO_ADDR
// uc_side := 0 ;
78459: LD_ADDR_OWVAR 20
78463: PUSH
78464: LD_INT 0
78466: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
78467: LD_ADDR_OWVAR 29
78471: PUSH
78472: LD_INT 12
78474: PUSH
78475: LD_INT 12
78477: PUSH
78478: EMPTY
78479: LIST
78480: LIST
78481: ST_TO_ADDR
// hc_agressivity := 20 ;
78482: LD_ADDR_OWVAR 35
78486: PUSH
78487: LD_INT 20
78489: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
78490: LD_ADDR_OWVAR 28
78494: PUSH
78495: LD_INT 17
78497: ST_TO_ADDR
// hc_gallery :=  ;
78498: LD_ADDR_OWVAR 33
78502: PUSH
78503: LD_STRING 
78505: ST_TO_ADDR
// hc_name :=  ;
78506: LD_ADDR_OWVAR 26
78510: PUSH
78511: LD_STRING 
78513: ST_TO_ADDR
// un := CreateHuman ;
78514: LD_ADDR_VAR 0 2
78518: PUSH
78519: CALL_OW 44
78523: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
78524: LD_VAR 0 2
78528: PPUSH
78529: LD_INT 1
78531: PPUSH
78532: CALL_OW 51
// tmp := tmp ^ un ;
78536: LD_ADDR_VAR 0 3
78540: PUSH
78541: LD_VAR 0 3
78545: PUSH
78546: LD_VAR 0 2
78550: ADD
78551: ST_TO_ADDR
// end ;
78552: GO 78448
78554: POP
78555: POP
// repeat wait ( 0 0$1 ) ;
78556: LD_INT 35
78558: PPUSH
78559: CALL_OW 67
// for un in tmp do
78563: LD_ADDR_VAR 0 2
78567: PUSH
78568: LD_VAR 0 3
78572: PUSH
78573: FOR_IN
78574: IFFALSE 78648
// begin if IsDead ( un ) then
78576: LD_VAR 0 2
78580: PPUSH
78581: CALL_OW 301
78585: IFFALSE 78605
// begin tmp := tmp diff un ;
78587: LD_ADDR_VAR 0 3
78591: PUSH
78592: LD_VAR 0 3
78596: PUSH
78597: LD_VAR 0 2
78601: DIFF
78602: ST_TO_ADDR
// continue ;
78603: GO 78573
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
78605: LD_VAR 0 2
78609: PPUSH
78610: LD_INT 3
78612: PUSH
78613: LD_INT 22
78615: PUSH
78616: LD_INT 0
78618: PUSH
78619: EMPTY
78620: LIST
78621: LIST
78622: PUSH
78623: EMPTY
78624: LIST
78625: LIST
78626: PPUSH
78627: CALL_OW 69
78631: PPUSH
78632: LD_VAR 0 2
78636: PPUSH
78637: CALL_OW 74
78641: PPUSH
78642: CALL_OW 115
// end ;
78646: GO 78573
78648: POP
78649: POP
// until not tmp ;
78650: LD_VAR 0 3
78654: NOT
78655: IFFALSE 78556
// end ;
78657: PPOPN 3
78659: END
// every 0 0$1 trigger StreamModeActive and sTroll do
78660: LD_EXP 62
78664: PUSH
78665: LD_EXP 87
78669: AND
78670: IFFALSE 78724
78672: GO 78674
78674: DISABLE
// begin ToLua ( displayTroll(); ) ;
78675: LD_STRING displayTroll();
78677: PPUSH
78678: CALL_OW 559
// wait ( 3 3$00 ) ;
78682: LD_INT 6300
78684: PPUSH
78685: CALL_OW 67
// ToLua ( hideTroll(); ) ;
78689: LD_STRING hideTroll();
78691: PPUSH
78692: CALL_OW 559
// wait ( 1 1$00 ) ;
78696: LD_INT 2100
78698: PPUSH
78699: CALL_OW 67
// ToLua ( displayTroll(); ) ;
78703: LD_STRING displayTroll();
78705: PPUSH
78706: CALL_OW 559
// wait ( 1 1$00 ) ;
78710: LD_INT 2100
78712: PPUSH
78713: CALL_OW 67
// ToLua ( hideTroll(); ) ;
78717: LD_STRING hideTroll();
78719: PPUSH
78720: CALL_OW 559
// end ;
78724: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
78725: LD_EXP 62
78729: PUSH
78730: LD_EXP 88
78734: AND
78735: IFFALSE 78798
78737: GO 78739
78739: DISABLE
78740: LD_INT 0
78742: PPUSH
// begin p := 0 ;
78743: LD_ADDR_VAR 0 1
78747: PUSH
78748: LD_INT 0
78750: ST_TO_ADDR
// repeat game_speed := 1 ;
78751: LD_ADDR_OWVAR 65
78755: PUSH
78756: LD_INT 1
78758: ST_TO_ADDR
// wait ( 0 0$1 ) ;
78759: LD_INT 35
78761: PPUSH
78762: CALL_OW 67
// p := p + 1 ;
78766: LD_ADDR_VAR 0 1
78770: PUSH
78771: LD_VAR 0 1
78775: PUSH
78776: LD_INT 1
78778: PLUS
78779: ST_TO_ADDR
// until p >= 60 ;
78780: LD_VAR 0 1
78784: PUSH
78785: LD_INT 60
78787: GREATEREQUAL
78788: IFFALSE 78751
// game_speed := 4 ;
78790: LD_ADDR_OWVAR 65
78794: PUSH
78795: LD_INT 4
78797: ST_TO_ADDR
// end ;
78798: PPOPN 1
78800: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
78801: LD_EXP 62
78805: PUSH
78806: LD_EXP 89
78810: AND
78811: IFFALSE 78957
78813: GO 78815
78815: DISABLE
78816: LD_INT 0
78818: PPUSH
78819: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
78820: LD_ADDR_VAR 0 1
78824: PUSH
78825: LD_INT 22
78827: PUSH
78828: LD_OWVAR 2
78832: PUSH
78833: EMPTY
78834: LIST
78835: LIST
78836: PUSH
78837: LD_INT 2
78839: PUSH
78840: LD_INT 30
78842: PUSH
78843: LD_INT 0
78845: PUSH
78846: EMPTY
78847: LIST
78848: LIST
78849: PUSH
78850: LD_INT 30
78852: PUSH
78853: LD_INT 1
78855: PUSH
78856: EMPTY
78857: LIST
78858: LIST
78859: PUSH
78860: EMPTY
78861: LIST
78862: LIST
78863: LIST
78864: PUSH
78865: EMPTY
78866: LIST
78867: LIST
78868: PPUSH
78869: CALL_OW 69
78873: ST_TO_ADDR
// if not depot then
78874: LD_VAR 0 1
78878: NOT
78879: IFFALSE 78883
// exit ;
78881: GO 78957
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
78883: LD_ADDR_VAR 0 2
78887: PUSH
78888: LD_VAR 0 1
78892: PUSH
78893: LD_INT 1
78895: PPUSH
78896: LD_VAR 0 1
78900: PPUSH
78901: CALL_OW 12
78905: ARRAY
78906: PPUSH
78907: CALL_OW 274
78911: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
78912: LD_VAR 0 2
78916: PPUSH
78917: LD_INT 1
78919: PPUSH
78920: LD_INT 0
78922: PPUSH
78923: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
78927: LD_VAR 0 2
78931: PPUSH
78932: LD_INT 2
78934: PPUSH
78935: LD_INT 0
78937: PPUSH
78938: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
78942: LD_VAR 0 2
78946: PPUSH
78947: LD_INT 3
78949: PPUSH
78950: LD_INT 0
78952: PPUSH
78953: CALL_OW 277
// end ;
78957: PPOPN 2
78959: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
78960: LD_EXP 62
78964: PUSH
78965: LD_EXP 90
78969: AND
78970: IFFALSE 79067
78972: GO 78974
78974: DISABLE
78975: LD_INT 0
78977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
78978: LD_ADDR_VAR 0 1
78982: PUSH
78983: LD_INT 22
78985: PUSH
78986: LD_OWVAR 2
78990: PUSH
78991: EMPTY
78992: LIST
78993: LIST
78994: PUSH
78995: LD_INT 21
78997: PUSH
78998: LD_INT 1
79000: PUSH
79001: EMPTY
79002: LIST
79003: LIST
79004: PUSH
79005: LD_INT 3
79007: PUSH
79008: LD_INT 23
79010: PUSH
79011: LD_INT 0
79013: PUSH
79014: EMPTY
79015: LIST
79016: LIST
79017: PUSH
79018: EMPTY
79019: LIST
79020: LIST
79021: PUSH
79022: EMPTY
79023: LIST
79024: LIST
79025: LIST
79026: PPUSH
79027: CALL_OW 69
79031: ST_TO_ADDR
// if not tmp then
79032: LD_VAR 0 1
79036: NOT
79037: IFFALSE 79041
// exit ;
79039: GO 79067
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
79041: LD_VAR 0 1
79045: PUSH
79046: LD_INT 1
79048: PPUSH
79049: LD_VAR 0 1
79053: PPUSH
79054: CALL_OW 12
79058: ARRAY
79059: PPUSH
79060: LD_INT 200
79062: PPUSH
79063: CALL_OW 234
// end ;
79067: PPOPN 1
79069: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
79070: LD_EXP 62
79074: PUSH
79075: LD_EXP 91
79079: AND
79080: IFFALSE 79159
79082: GO 79084
79084: DISABLE
79085: LD_INT 0
79087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
79088: LD_ADDR_VAR 0 1
79092: PUSH
79093: LD_INT 22
79095: PUSH
79096: LD_OWVAR 2
79100: PUSH
79101: EMPTY
79102: LIST
79103: LIST
79104: PUSH
79105: LD_INT 21
79107: PUSH
79108: LD_INT 2
79110: PUSH
79111: EMPTY
79112: LIST
79113: LIST
79114: PUSH
79115: EMPTY
79116: LIST
79117: LIST
79118: PPUSH
79119: CALL_OW 69
79123: ST_TO_ADDR
// if not tmp then
79124: LD_VAR 0 1
79128: NOT
79129: IFFALSE 79133
// exit ;
79131: GO 79159
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
79133: LD_VAR 0 1
79137: PUSH
79138: LD_INT 1
79140: PPUSH
79141: LD_VAR 0 1
79145: PPUSH
79146: CALL_OW 12
79150: ARRAY
79151: PPUSH
79152: LD_INT 60
79154: PPUSH
79155: CALL_OW 234
// end ;
79159: PPOPN 1
79161: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
79162: LD_EXP 62
79166: PUSH
79167: LD_EXP 92
79171: AND
79172: IFFALSE 79271
79174: GO 79176
79176: DISABLE
79177: LD_INT 0
79179: PPUSH
79180: PPUSH
// begin enable ;
79181: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
79182: LD_ADDR_VAR 0 1
79186: PUSH
79187: LD_INT 22
79189: PUSH
79190: LD_OWVAR 2
79194: PUSH
79195: EMPTY
79196: LIST
79197: LIST
79198: PUSH
79199: LD_INT 61
79201: PUSH
79202: EMPTY
79203: LIST
79204: PUSH
79205: LD_INT 33
79207: PUSH
79208: LD_INT 2
79210: PUSH
79211: EMPTY
79212: LIST
79213: LIST
79214: PUSH
79215: EMPTY
79216: LIST
79217: LIST
79218: LIST
79219: PPUSH
79220: CALL_OW 69
79224: ST_TO_ADDR
// if not tmp then
79225: LD_VAR 0 1
79229: NOT
79230: IFFALSE 79234
// exit ;
79232: GO 79271
// for i in tmp do
79234: LD_ADDR_VAR 0 2
79238: PUSH
79239: LD_VAR 0 1
79243: PUSH
79244: FOR_IN
79245: IFFALSE 79269
// if IsControledBy ( i ) then
79247: LD_VAR 0 2
79251: PPUSH
79252: CALL_OW 312
79256: IFFALSE 79267
// ComUnlink ( i ) ;
79258: LD_VAR 0 2
79262: PPUSH
79263: CALL_OW 136
79267: GO 79244
79269: POP
79270: POP
// end ;
79271: PPOPN 2
79273: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
79274: LD_EXP 62
79278: PUSH
79279: LD_EXP 93
79283: AND
79284: IFFALSE 79424
79286: GO 79288
79288: DISABLE
79289: LD_INT 0
79291: PPUSH
79292: PPUSH
// begin ToLua ( displayPowell(); ) ;
79293: LD_STRING displayPowell();
79295: PPUSH
79296: CALL_OW 559
// uc_side := 0 ;
79300: LD_ADDR_OWVAR 20
79304: PUSH
79305: LD_INT 0
79307: ST_TO_ADDR
// uc_nation := 2 ;
79308: LD_ADDR_OWVAR 21
79312: PUSH
79313: LD_INT 2
79315: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
79316: LD_ADDR_OWVAR 37
79320: PUSH
79321: LD_INT 14
79323: ST_TO_ADDR
// vc_engine := engine_siberite ;
79324: LD_ADDR_OWVAR 39
79328: PUSH
79329: LD_INT 3
79331: ST_TO_ADDR
// vc_control := control_apeman ;
79332: LD_ADDR_OWVAR 38
79336: PUSH
79337: LD_INT 5
79339: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
79340: LD_ADDR_OWVAR 40
79344: PUSH
79345: LD_INT 29
79347: ST_TO_ADDR
// un := CreateVehicle ;
79348: LD_ADDR_VAR 0 2
79352: PUSH
79353: CALL_OW 45
79357: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
79358: LD_VAR 0 2
79362: PPUSH
79363: LD_INT 1
79365: PPUSH
79366: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
79370: LD_INT 35
79372: PPUSH
79373: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
79377: LD_VAR 0 2
79381: PPUSH
79382: LD_INT 22
79384: PUSH
79385: LD_OWVAR 2
79389: PUSH
79390: EMPTY
79391: LIST
79392: LIST
79393: PPUSH
79394: CALL_OW 69
79398: PPUSH
79399: LD_VAR 0 2
79403: PPUSH
79404: CALL_OW 74
79408: PPUSH
79409: CALL_OW 115
// until IsDead ( un ) ;
79413: LD_VAR 0 2
79417: PPUSH
79418: CALL_OW 301
79422: IFFALSE 79370
// end ;
79424: PPOPN 2
79426: END
// every 0 0$1 trigger StreamModeActive and sStu do
79427: LD_EXP 62
79431: PUSH
79432: LD_EXP 101
79436: AND
79437: IFFALSE 79453
79439: GO 79441
79441: DISABLE
// begin ToLua ( displayStucuk(); ) ;
79442: LD_STRING displayStucuk();
79444: PPUSH
79445: CALL_OW 559
// ResetFog ;
79449: CALL_OW 335
// end ;
79453: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
79454: LD_EXP 62
79458: PUSH
79459: LD_EXP 94
79463: AND
79464: IFFALSE 79605
79466: GO 79468
79468: DISABLE
79469: LD_INT 0
79471: PPUSH
79472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
79473: LD_ADDR_VAR 0 2
79477: PUSH
79478: LD_INT 22
79480: PUSH
79481: LD_OWVAR 2
79485: PUSH
79486: EMPTY
79487: LIST
79488: LIST
79489: PUSH
79490: LD_INT 21
79492: PUSH
79493: LD_INT 1
79495: PUSH
79496: EMPTY
79497: LIST
79498: LIST
79499: PUSH
79500: EMPTY
79501: LIST
79502: LIST
79503: PPUSH
79504: CALL_OW 69
79508: ST_TO_ADDR
// if not tmp then
79509: LD_VAR 0 2
79513: NOT
79514: IFFALSE 79518
// exit ;
79516: GO 79605
// un := tmp [ rand ( 1 , tmp ) ] ;
79518: LD_ADDR_VAR 0 1
79522: PUSH
79523: LD_VAR 0 2
79527: PUSH
79528: LD_INT 1
79530: PPUSH
79531: LD_VAR 0 2
79535: PPUSH
79536: CALL_OW 12
79540: ARRAY
79541: ST_TO_ADDR
// SetSide ( un , 0 ) ;
79542: LD_VAR 0 1
79546: PPUSH
79547: LD_INT 0
79549: PPUSH
79550: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
79554: LD_VAR 0 1
79558: PPUSH
79559: LD_OWVAR 3
79563: PUSH
79564: LD_VAR 0 1
79568: DIFF
79569: PPUSH
79570: LD_VAR 0 1
79574: PPUSH
79575: CALL_OW 74
79579: PPUSH
79580: CALL_OW 115
// wait ( 0 0$20 ) ;
79584: LD_INT 700
79586: PPUSH
79587: CALL_OW 67
// SetSide ( un , your_side ) ;
79591: LD_VAR 0 1
79595: PPUSH
79596: LD_OWVAR 2
79600: PPUSH
79601: CALL_OW 235
// end ;
79605: PPOPN 2
79607: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
79608: LD_EXP 62
79612: PUSH
79613: LD_EXP 95
79617: AND
79618: IFFALSE 79724
79620: GO 79622
79622: DISABLE
79623: LD_INT 0
79625: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79626: LD_ADDR_VAR 0 1
79630: PUSH
79631: LD_INT 22
79633: PUSH
79634: LD_OWVAR 2
79638: PUSH
79639: EMPTY
79640: LIST
79641: LIST
79642: PUSH
79643: LD_INT 2
79645: PUSH
79646: LD_INT 30
79648: PUSH
79649: LD_INT 0
79651: PUSH
79652: EMPTY
79653: LIST
79654: LIST
79655: PUSH
79656: LD_INT 30
79658: PUSH
79659: LD_INT 1
79661: PUSH
79662: EMPTY
79663: LIST
79664: LIST
79665: PUSH
79666: EMPTY
79667: LIST
79668: LIST
79669: LIST
79670: PUSH
79671: EMPTY
79672: LIST
79673: LIST
79674: PPUSH
79675: CALL_OW 69
79679: ST_TO_ADDR
// if not depot then
79680: LD_VAR 0 1
79684: NOT
79685: IFFALSE 79689
// exit ;
79687: GO 79724
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
79689: LD_VAR 0 1
79693: PUSH
79694: LD_INT 1
79696: ARRAY
79697: PPUSH
79698: CALL_OW 250
79702: PPUSH
79703: LD_VAR 0 1
79707: PUSH
79708: LD_INT 1
79710: ARRAY
79711: PPUSH
79712: CALL_OW 251
79716: PPUSH
79717: LD_INT 70
79719: PPUSH
79720: CALL_OW 495
// end ;
79724: PPOPN 1
79726: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
79727: LD_EXP 62
79731: PUSH
79732: LD_EXP 96
79736: AND
79737: IFFALSE 79948
79739: GO 79741
79741: DISABLE
79742: LD_INT 0
79744: PPUSH
79745: PPUSH
79746: PPUSH
79747: PPUSH
79748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
79749: LD_ADDR_VAR 0 5
79753: PUSH
79754: LD_INT 22
79756: PUSH
79757: LD_OWVAR 2
79761: PUSH
79762: EMPTY
79763: LIST
79764: LIST
79765: PUSH
79766: LD_INT 21
79768: PUSH
79769: LD_INT 1
79771: PUSH
79772: EMPTY
79773: LIST
79774: LIST
79775: PUSH
79776: EMPTY
79777: LIST
79778: LIST
79779: PPUSH
79780: CALL_OW 69
79784: ST_TO_ADDR
// if not tmp then
79785: LD_VAR 0 5
79789: NOT
79790: IFFALSE 79794
// exit ;
79792: GO 79948
// for i in tmp do
79794: LD_ADDR_VAR 0 1
79798: PUSH
79799: LD_VAR 0 5
79803: PUSH
79804: FOR_IN
79805: IFFALSE 79946
// begin d := rand ( 0 , 5 ) ;
79807: LD_ADDR_VAR 0 4
79811: PUSH
79812: LD_INT 0
79814: PPUSH
79815: LD_INT 5
79817: PPUSH
79818: CALL_OW 12
79822: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
79823: LD_ADDR_VAR 0 2
79827: PUSH
79828: LD_VAR 0 1
79832: PPUSH
79833: CALL_OW 250
79837: PPUSH
79838: LD_VAR 0 4
79842: PPUSH
79843: LD_INT 3
79845: PPUSH
79846: LD_INT 12
79848: PPUSH
79849: CALL_OW 12
79853: PPUSH
79854: CALL_OW 272
79858: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
79859: LD_ADDR_VAR 0 3
79863: PUSH
79864: LD_VAR 0 1
79868: PPUSH
79869: CALL_OW 251
79873: PPUSH
79874: LD_VAR 0 4
79878: PPUSH
79879: LD_INT 3
79881: PPUSH
79882: LD_INT 12
79884: PPUSH
79885: CALL_OW 12
79889: PPUSH
79890: CALL_OW 273
79894: ST_TO_ADDR
// if ValidHex ( x , y ) then
79895: LD_VAR 0 2
79899: PPUSH
79900: LD_VAR 0 3
79904: PPUSH
79905: CALL_OW 488
79909: IFFALSE 79944
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
79911: LD_VAR 0 1
79915: PPUSH
79916: LD_VAR 0 2
79920: PPUSH
79921: LD_VAR 0 3
79925: PPUSH
79926: LD_INT 3
79928: PPUSH
79929: LD_INT 6
79931: PPUSH
79932: CALL_OW 12
79936: PPUSH
79937: LD_INT 1
79939: PPUSH
79940: CALL_OW 483
// end ;
79944: GO 79804
79946: POP
79947: POP
// end ;
79948: PPOPN 5
79950: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
79951: LD_EXP 62
79955: PUSH
79956: LD_EXP 97
79960: AND
79961: IFFALSE 80055
79963: GO 79965
79965: DISABLE
79966: LD_INT 0
79968: PPUSH
79969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
79970: LD_ADDR_VAR 0 2
79974: PUSH
79975: LD_INT 22
79977: PUSH
79978: LD_OWVAR 2
79982: PUSH
79983: EMPTY
79984: LIST
79985: LIST
79986: PUSH
79987: LD_INT 32
79989: PUSH
79990: LD_INT 1
79992: PUSH
79993: EMPTY
79994: LIST
79995: LIST
79996: PUSH
79997: LD_INT 21
79999: PUSH
80000: LD_INT 2
80002: PUSH
80003: EMPTY
80004: LIST
80005: LIST
80006: PUSH
80007: EMPTY
80008: LIST
80009: LIST
80010: LIST
80011: PPUSH
80012: CALL_OW 69
80016: ST_TO_ADDR
// if not tmp then
80017: LD_VAR 0 2
80021: NOT
80022: IFFALSE 80026
// exit ;
80024: GO 80055
// for i in tmp do
80026: LD_ADDR_VAR 0 1
80030: PUSH
80031: LD_VAR 0 2
80035: PUSH
80036: FOR_IN
80037: IFFALSE 80053
// SetFuel ( i , 0 ) ;
80039: LD_VAR 0 1
80043: PPUSH
80044: LD_INT 0
80046: PPUSH
80047: CALL_OW 240
80051: GO 80036
80053: POP
80054: POP
// end ;
80055: PPOPN 2
80057: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
80058: LD_EXP 62
80062: PUSH
80063: LD_EXP 98
80067: AND
80068: IFFALSE 80134
80070: GO 80072
80072: DISABLE
80073: LD_INT 0
80075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
80076: LD_ADDR_VAR 0 1
80080: PUSH
80081: LD_INT 22
80083: PUSH
80084: LD_OWVAR 2
80088: PUSH
80089: EMPTY
80090: LIST
80091: LIST
80092: PUSH
80093: LD_INT 30
80095: PUSH
80096: LD_INT 29
80098: PUSH
80099: EMPTY
80100: LIST
80101: LIST
80102: PUSH
80103: EMPTY
80104: LIST
80105: LIST
80106: PPUSH
80107: CALL_OW 69
80111: ST_TO_ADDR
// if not tmp then
80112: LD_VAR 0 1
80116: NOT
80117: IFFALSE 80121
// exit ;
80119: GO 80134
// DestroyUnit ( tmp [ 1 ] ) ;
80121: LD_VAR 0 1
80125: PUSH
80126: LD_INT 1
80128: ARRAY
80129: PPUSH
80130: CALL_OW 65
// end ;
80134: PPOPN 1
80136: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
80137: LD_EXP 62
80141: PUSH
80142: LD_EXP 100
80146: AND
80147: IFFALSE 80276
80149: GO 80151
80151: DISABLE
80152: LD_INT 0
80154: PPUSH
// begin uc_side := 0 ;
80155: LD_ADDR_OWVAR 20
80159: PUSH
80160: LD_INT 0
80162: ST_TO_ADDR
// uc_nation := nation_arabian ;
80163: LD_ADDR_OWVAR 21
80167: PUSH
80168: LD_INT 2
80170: ST_TO_ADDR
// hc_gallery :=  ;
80171: LD_ADDR_OWVAR 33
80175: PUSH
80176: LD_STRING 
80178: ST_TO_ADDR
// hc_name :=  ;
80179: LD_ADDR_OWVAR 26
80183: PUSH
80184: LD_STRING 
80186: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
80187: LD_INT 1
80189: PPUSH
80190: LD_INT 11
80192: PPUSH
80193: LD_INT 10
80195: PPUSH
80196: CALL_OW 380
// un := CreateHuman ;
80200: LD_ADDR_VAR 0 1
80204: PUSH
80205: CALL_OW 44
80209: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
80210: LD_VAR 0 1
80214: PPUSH
80215: LD_INT 1
80217: PPUSH
80218: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
80222: LD_INT 35
80224: PPUSH
80225: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
80229: LD_VAR 0 1
80233: PPUSH
80234: LD_INT 22
80236: PUSH
80237: LD_OWVAR 2
80241: PUSH
80242: EMPTY
80243: LIST
80244: LIST
80245: PPUSH
80246: CALL_OW 69
80250: PPUSH
80251: LD_VAR 0 1
80255: PPUSH
80256: CALL_OW 74
80260: PPUSH
80261: CALL_OW 115
// until IsDead ( un ) ;
80265: LD_VAR 0 1
80269: PPUSH
80270: CALL_OW 301
80274: IFFALSE 80222
// end ;
80276: PPOPN 1
80278: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
80279: LD_EXP 62
80283: PUSH
80284: LD_EXP 102
80288: AND
80289: IFFALSE 80301
80291: GO 80293
80293: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
80294: LD_STRING earthquake(getX(game), 0, 32)
80296: PPUSH
80297: CALL_OW 559
80301: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
80302: LD_EXP 62
80306: PUSH
80307: LD_EXP 103
80311: AND
80312: IFFALSE 80403
80314: GO 80316
80316: DISABLE
80317: LD_INT 0
80319: PPUSH
// begin enable ;
80320: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
80321: LD_ADDR_VAR 0 1
80325: PUSH
80326: LD_INT 22
80328: PUSH
80329: LD_OWVAR 2
80333: PUSH
80334: EMPTY
80335: LIST
80336: LIST
80337: PUSH
80338: LD_INT 21
80340: PUSH
80341: LD_INT 2
80343: PUSH
80344: EMPTY
80345: LIST
80346: LIST
80347: PUSH
80348: LD_INT 33
80350: PUSH
80351: LD_INT 3
80353: PUSH
80354: EMPTY
80355: LIST
80356: LIST
80357: PUSH
80358: EMPTY
80359: LIST
80360: LIST
80361: LIST
80362: PPUSH
80363: CALL_OW 69
80367: ST_TO_ADDR
// if not tmp then
80368: LD_VAR 0 1
80372: NOT
80373: IFFALSE 80377
// exit ;
80375: GO 80403
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
80377: LD_VAR 0 1
80381: PUSH
80382: LD_INT 1
80384: PPUSH
80385: LD_VAR 0 1
80389: PPUSH
80390: CALL_OW 12
80394: ARRAY
80395: PPUSH
80396: LD_INT 1
80398: PPUSH
80399: CALL_OW 234
// end ;
80403: PPOPN 1
80405: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
80406: LD_EXP 62
80410: PUSH
80411: LD_EXP 104
80415: AND
80416: IFFALSE 80557
80418: GO 80420
80420: DISABLE
80421: LD_INT 0
80423: PPUSH
80424: PPUSH
80425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
80426: LD_ADDR_VAR 0 3
80430: PUSH
80431: LD_INT 22
80433: PUSH
80434: LD_OWVAR 2
80438: PUSH
80439: EMPTY
80440: LIST
80441: LIST
80442: PUSH
80443: LD_INT 25
80445: PUSH
80446: LD_INT 1
80448: PUSH
80449: EMPTY
80450: LIST
80451: LIST
80452: PUSH
80453: EMPTY
80454: LIST
80455: LIST
80456: PPUSH
80457: CALL_OW 69
80461: ST_TO_ADDR
// if not tmp then
80462: LD_VAR 0 3
80466: NOT
80467: IFFALSE 80471
// exit ;
80469: GO 80557
// un := tmp [ rand ( 1 , tmp ) ] ;
80471: LD_ADDR_VAR 0 2
80475: PUSH
80476: LD_VAR 0 3
80480: PUSH
80481: LD_INT 1
80483: PPUSH
80484: LD_VAR 0 3
80488: PPUSH
80489: CALL_OW 12
80493: ARRAY
80494: ST_TO_ADDR
// if Crawls ( un ) then
80495: LD_VAR 0 2
80499: PPUSH
80500: CALL_OW 318
80504: IFFALSE 80515
// ComWalk ( un ) ;
80506: LD_VAR 0 2
80510: PPUSH
80511: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
80515: LD_VAR 0 2
80519: PPUSH
80520: LD_INT 9
80522: PPUSH
80523: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
80527: LD_INT 28
80529: PPUSH
80530: LD_OWVAR 2
80534: PPUSH
80535: LD_INT 2
80537: PPUSH
80538: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
80542: LD_INT 29
80544: PPUSH
80545: LD_OWVAR 2
80549: PPUSH
80550: LD_INT 2
80552: PPUSH
80553: CALL_OW 322
// end ;
80557: PPOPN 3
80559: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
80560: LD_EXP 62
80564: PUSH
80565: LD_EXP 105
80569: AND
80570: IFFALSE 80681
80572: GO 80574
80574: DISABLE
80575: LD_INT 0
80577: PPUSH
80578: PPUSH
80579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
80580: LD_ADDR_VAR 0 3
80584: PUSH
80585: LD_INT 22
80587: PUSH
80588: LD_OWVAR 2
80592: PUSH
80593: EMPTY
80594: LIST
80595: LIST
80596: PUSH
80597: LD_INT 25
80599: PUSH
80600: LD_INT 1
80602: PUSH
80603: EMPTY
80604: LIST
80605: LIST
80606: PUSH
80607: EMPTY
80608: LIST
80609: LIST
80610: PPUSH
80611: CALL_OW 69
80615: ST_TO_ADDR
// if not tmp then
80616: LD_VAR 0 3
80620: NOT
80621: IFFALSE 80625
// exit ;
80623: GO 80681
// un := tmp [ rand ( 1 , tmp ) ] ;
80625: LD_ADDR_VAR 0 2
80629: PUSH
80630: LD_VAR 0 3
80634: PUSH
80635: LD_INT 1
80637: PPUSH
80638: LD_VAR 0 3
80642: PPUSH
80643: CALL_OW 12
80647: ARRAY
80648: ST_TO_ADDR
// if Crawls ( un ) then
80649: LD_VAR 0 2
80653: PPUSH
80654: CALL_OW 318
80658: IFFALSE 80669
// ComWalk ( un ) ;
80660: LD_VAR 0 2
80664: PPUSH
80665: CALL_OW 138
// SetClass ( un , class_mortar ) ;
80669: LD_VAR 0 2
80673: PPUSH
80674: LD_INT 8
80676: PPUSH
80677: CALL_OW 336
// end ;
80681: PPOPN 3
80683: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
80684: LD_EXP 62
80688: PUSH
80689: LD_EXP 106
80693: AND
80694: IFFALSE 80838
80696: GO 80698
80698: DISABLE
80699: LD_INT 0
80701: PPUSH
80702: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
80703: LD_ADDR_VAR 0 2
80707: PUSH
80708: LD_INT 22
80710: PUSH
80711: LD_OWVAR 2
80715: PUSH
80716: EMPTY
80717: LIST
80718: LIST
80719: PUSH
80720: LD_INT 21
80722: PUSH
80723: LD_INT 2
80725: PUSH
80726: EMPTY
80727: LIST
80728: LIST
80729: PUSH
80730: LD_INT 2
80732: PUSH
80733: LD_INT 34
80735: PUSH
80736: LD_INT 12
80738: PUSH
80739: EMPTY
80740: LIST
80741: LIST
80742: PUSH
80743: LD_INT 34
80745: PUSH
80746: LD_INT 51
80748: PUSH
80749: EMPTY
80750: LIST
80751: LIST
80752: PUSH
80753: LD_INT 34
80755: PUSH
80756: LD_INT 32
80758: PUSH
80759: EMPTY
80760: LIST
80761: LIST
80762: PUSH
80763: EMPTY
80764: LIST
80765: LIST
80766: LIST
80767: LIST
80768: PUSH
80769: EMPTY
80770: LIST
80771: LIST
80772: LIST
80773: PPUSH
80774: CALL_OW 69
80778: ST_TO_ADDR
// if not tmp then
80779: LD_VAR 0 2
80783: NOT
80784: IFFALSE 80788
// exit ;
80786: GO 80838
// for i in tmp do
80788: LD_ADDR_VAR 0 1
80792: PUSH
80793: LD_VAR 0 2
80797: PUSH
80798: FOR_IN
80799: IFFALSE 80836
// if GetCargo ( i , mat_artifact ) = 0 then
80801: LD_VAR 0 1
80805: PPUSH
80806: LD_INT 4
80808: PPUSH
80809: CALL_OW 289
80813: PUSH
80814: LD_INT 0
80816: EQUAL
80817: IFFALSE 80834
// SetCargo ( i , mat_siberit , 100 ) ;
80819: LD_VAR 0 1
80823: PPUSH
80824: LD_INT 3
80826: PPUSH
80827: LD_INT 100
80829: PPUSH
80830: CALL_OW 290
80834: GO 80798
80836: POP
80837: POP
// end ;
80838: PPOPN 2
80840: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
80841: LD_EXP 62
80845: PUSH
80846: LD_EXP 107
80850: AND
80851: IFFALSE 81034
80853: GO 80855
80855: DISABLE
80856: LD_INT 0
80858: PPUSH
80859: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
80860: LD_ADDR_VAR 0 2
80864: PUSH
80865: LD_INT 22
80867: PUSH
80868: LD_OWVAR 2
80872: PUSH
80873: EMPTY
80874: LIST
80875: LIST
80876: PPUSH
80877: CALL_OW 69
80881: ST_TO_ADDR
// if not tmp then
80882: LD_VAR 0 2
80886: NOT
80887: IFFALSE 80891
// exit ;
80889: GO 81034
// for i := 1 to 2 do
80891: LD_ADDR_VAR 0 1
80895: PUSH
80896: DOUBLE
80897: LD_INT 1
80899: DEC
80900: ST_TO_ADDR
80901: LD_INT 2
80903: PUSH
80904: FOR_TO
80905: IFFALSE 81032
// begin uc_side := your_side ;
80907: LD_ADDR_OWVAR 20
80911: PUSH
80912: LD_OWVAR 2
80916: ST_TO_ADDR
// uc_nation := nation_american ;
80917: LD_ADDR_OWVAR 21
80921: PUSH
80922: LD_INT 1
80924: ST_TO_ADDR
// vc_chassis := us_morphling ;
80925: LD_ADDR_OWVAR 37
80929: PUSH
80930: LD_INT 5
80932: ST_TO_ADDR
// vc_engine := engine_siberite ;
80933: LD_ADDR_OWVAR 39
80937: PUSH
80938: LD_INT 3
80940: ST_TO_ADDR
// vc_control := control_computer ;
80941: LD_ADDR_OWVAR 38
80945: PUSH
80946: LD_INT 3
80948: ST_TO_ADDR
// vc_weapon := us_double_laser ;
80949: LD_ADDR_OWVAR 40
80953: PUSH
80954: LD_INT 10
80956: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
80957: LD_VAR 0 2
80961: PUSH
80962: LD_INT 1
80964: ARRAY
80965: PPUSH
80966: CALL_OW 310
80970: NOT
80971: IFFALSE 81018
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
80973: CALL_OW 45
80977: PPUSH
80978: LD_VAR 0 2
80982: PUSH
80983: LD_INT 1
80985: ARRAY
80986: PPUSH
80987: CALL_OW 250
80991: PPUSH
80992: LD_VAR 0 2
80996: PUSH
80997: LD_INT 1
80999: ARRAY
81000: PPUSH
81001: CALL_OW 251
81005: PPUSH
81006: LD_INT 12
81008: PPUSH
81009: LD_INT 1
81011: PPUSH
81012: CALL_OW 50
81016: GO 81030
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
81018: CALL_OW 45
81022: PPUSH
81023: LD_INT 1
81025: PPUSH
81026: CALL_OW 51
// end ;
81030: GO 80904
81032: POP
81033: POP
// end ;
81034: PPOPN 2
81036: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
81037: LD_EXP 62
81041: PUSH
81042: LD_EXP 108
81046: AND
81047: IFFALSE 81269
81049: GO 81051
81051: DISABLE
81052: LD_INT 0
81054: PPUSH
81055: PPUSH
81056: PPUSH
81057: PPUSH
81058: PPUSH
81059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
81060: LD_ADDR_VAR 0 6
81064: PUSH
81065: LD_INT 22
81067: PUSH
81068: LD_OWVAR 2
81072: PUSH
81073: EMPTY
81074: LIST
81075: LIST
81076: PUSH
81077: LD_INT 21
81079: PUSH
81080: LD_INT 1
81082: PUSH
81083: EMPTY
81084: LIST
81085: LIST
81086: PUSH
81087: LD_INT 3
81089: PUSH
81090: LD_INT 23
81092: PUSH
81093: LD_INT 0
81095: PUSH
81096: EMPTY
81097: LIST
81098: LIST
81099: PUSH
81100: EMPTY
81101: LIST
81102: LIST
81103: PUSH
81104: EMPTY
81105: LIST
81106: LIST
81107: LIST
81108: PPUSH
81109: CALL_OW 69
81113: ST_TO_ADDR
// if not tmp then
81114: LD_VAR 0 6
81118: NOT
81119: IFFALSE 81123
// exit ;
81121: GO 81269
// s1 := rand ( 1 , 4 ) ;
81123: LD_ADDR_VAR 0 2
81127: PUSH
81128: LD_INT 1
81130: PPUSH
81131: LD_INT 4
81133: PPUSH
81134: CALL_OW 12
81138: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
81139: LD_ADDR_VAR 0 4
81143: PUSH
81144: LD_VAR 0 6
81148: PUSH
81149: LD_INT 1
81151: ARRAY
81152: PPUSH
81153: LD_VAR 0 2
81157: PPUSH
81158: CALL_OW 259
81162: ST_TO_ADDR
// if s1 = 1 then
81163: LD_VAR 0 2
81167: PUSH
81168: LD_INT 1
81170: EQUAL
81171: IFFALSE 81191
// s2 := rand ( 2 , 4 ) else
81173: LD_ADDR_VAR 0 3
81177: PUSH
81178: LD_INT 2
81180: PPUSH
81181: LD_INT 4
81183: PPUSH
81184: CALL_OW 12
81188: ST_TO_ADDR
81189: GO 81199
// s2 := 1 ;
81191: LD_ADDR_VAR 0 3
81195: PUSH
81196: LD_INT 1
81198: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
81199: LD_ADDR_VAR 0 5
81203: PUSH
81204: LD_VAR 0 6
81208: PUSH
81209: LD_INT 1
81211: ARRAY
81212: PPUSH
81213: LD_VAR 0 3
81217: PPUSH
81218: CALL_OW 259
81222: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
81223: LD_VAR 0 6
81227: PUSH
81228: LD_INT 1
81230: ARRAY
81231: PPUSH
81232: LD_VAR 0 2
81236: PPUSH
81237: LD_VAR 0 5
81241: PPUSH
81242: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
81246: LD_VAR 0 6
81250: PUSH
81251: LD_INT 1
81253: ARRAY
81254: PPUSH
81255: LD_VAR 0 3
81259: PPUSH
81260: LD_VAR 0 4
81264: PPUSH
81265: CALL_OW 237
// end ;
81269: PPOPN 6
81271: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
81272: LD_EXP 62
81276: PUSH
81277: LD_EXP 109
81281: AND
81282: IFFALSE 81361
81284: GO 81286
81286: DISABLE
81287: LD_INT 0
81289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
81290: LD_ADDR_VAR 0 1
81294: PUSH
81295: LD_INT 22
81297: PUSH
81298: LD_OWVAR 2
81302: PUSH
81303: EMPTY
81304: LIST
81305: LIST
81306: PUSH
81307: LD_INT 30
81309: PUSH
81310: LD_INT 3
81312: PUSH
81313: EMPTY
81314: LIST
81315: LIST
81316: PUSH
81317: EMPTY
81318: LIST
81319: LIST
81320: PPUSH
81321: CALL_OW 69
81325: ST_TO_ADDR
// if not tmp then
81326: LD_VAR 0 1
81330: NOT
81331: IFFALSE 81335
// exit ;
81333: GO 81361
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
81335: LD_VAR 0 1
81339: PUSH
81340: LD_INT 1
81342: PPUSH
81343: LD_VAR 0 1
81347: PPUSH
81348: CALL_OW 12
81352: ARRAY
81353: PPUSH
81354: LD_INT 1
81356: PPUSH
81357: CALL_OW 234
// end ;
81361: PPOPN 1
81363: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
81364: LD_EXP 62
81368: PUSH
81369: LD_EXP 110
81373: AND
81374: IFFALSE 81486
81376: GO 81378
81378: DISABLE
81379: LD_INT 0
81381: PPUSH
81382: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
81383: LD_ADDR_VAR 0 2
81387: PUSH
81388: LD_INT 22
81390: PUSH
81391: LD_OWVAR 2
81395: PUSH
81396: EMPTY
81397: LIST
81398: LIST
81399: PUSH
81400: LD_INT 2
81402: PUSH
81403: LD_INT 30
81405: PUSH
81406: LD_INT 27
81408: PUSH
81409: EMPTY
81410: LIST
81411: LIST
81412: PUSH
81413: LD_INT 30
81415: PUSH
81416: LD_INT 26
81418: PUSH
81419: EMPTY
81420: LIST
81421: LIST
81422: PUSH
81423: LD_INT 30
81425: PUSH
81426: LD_INT 28
81428: PUSH
81429: EMPTY
81430: LIST
81431: LIST
81432: PUSH
81433: EMPTY
81434: LIST
81435: LIST
81436: LIST
81437: LIST
81438: PUSH
81439: EMPTY
81440: LIST
81441: LIST
81442: PPUSH
81443: CALL_OW 69
81447: ST_TO_ADDR
// if not tmp then
81448: LD_VAR 0 2
81452: NOT
81453: IFFALSE 81457
// exit ;
81455: GO 81486
// for i in tmp do
81457: LD_ADDR_VAR 0 1
81461: PUSH
81462: LD_VAR 0 2
81466: PUSH
81467: FOR_IN
81468: IFFALSE 81484
// SetLives ( i , 1 ) ;
81470: LD_VAR 0 1
81474: PPUSH
81475: LD_INT 1
81477: PPUSH
81478: CALL_OW 234
81482: GO 81467
81484: POP
81485: POP
// end ;
81486: PPOPN 2
81488: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
81489: LD_EXP 62
81493: PUSH
81494: LD_EXP 111
81498: AND
81499: IFFALSE 81786
81501: GO 81503
81503: DISABLE
81504: LD_INT 0
81506: PPUSH
81507: PPUSH
81508: PPUSH
// begin i := rand ( 1 , 7 ) ;
81509: LD_ADDR_VAR 0 1
81513: PUSH
81514: LD_INT 1
81516: PPUSH
81517: LD_INT 7
81519: PPUSH
81520: CALL_OW 12
81524: ST_TO_ADDR
// case i of 1 :
81525: LD_VAR 0 1
81529: PUSH
81530: LD_INT 1
81532: DOUBLE
81533: EQUAL
81534: IFTRUE 81538
81536: GO 81548
81538: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
81539: LD_STRING earthquake(getX(game), 0, 32)
81541: PPUSH
81542: CALL_OW 559
81546: GO 81786
81548: LD_INT 2
81550: DOUBLE
81551: EQUAL
81552: IFTRUE 81556
81554: GO 81570
81556: POP
// begin ToLua ( displayStucuk(); ) ;
81557: LD_STRING displayStucuk();
81559: PPUSH
81560: CALL_OW 559
// ResetFog ;
81564: CALL_OW 335
// end ; 3 :
81568: GO 81786
81570: LD_INT 3
81572: DOUBLE
81573: EQUAL
81574: IFTRUE 81578
81576: GO 81682
81578: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81579: LD_ADDR_VAR 0 2
81583: PUSH
81584: LD_INT 22
81586: PUSH
81587: LD_OWVAR 2
81591: PUSH
81592: EMPTY
81593: LIST
81594: LIST
81595: PUSH
81596: LD_INT 25
81598: PUSH
81599: LD_INT 1
81601: PUSH
81602: EMPTY
81603: LIST
81604: LIST
81605: PUSH
81606: EMPTY
81607: LIST
81608: LIST
81609: PPUSH
81610: CALL_OW 69
81614: ST_TO_ADDR
// if not tmp then
81615: LD_VAR 0 2
81619: NOT
81620: IFFALSE 81624
// exit ;
81622: GO 81786
// un := tmp [ rand ( 1 , tmp ) ] ;
81624: LD_ADDR_VAR 0 3
81628: PUSH
81629: LD_VAR 0 2
81633: PUSH
81634: LD_INT 1
81636: PPUSH
81637: LD_VAR 0 2
81641: PPUSH
81642: CALL_OW 12
81646: ARRAY
81647: ST_TO_ADDR
// if Crawls ( un ) then
81648: LD_VAR 0 3
81652: PPUSH
81653: CALL_OW 318
81657: IFFALSE 81668
// ComWalk ( un ) ;
81659: LD_VAR 0 3
81663: PPUSH
81664: CALL_OW 138
// SetClass ( un , class_mortar ) ;
81668: LD_VAR 0 3
81672: PPUSH
81673: LD_INT 8
81675: PPUSH
81676: CALL_OW 336
// end ; 4 :
81680: GO 81786
81682: LD_INT 4
81684: DOUBLE
81685: EQUAL
81686: IFTRUE 81690
81688: GO 81764
81690: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
81691: LD_ADDR_VAR 0 2
81695: PUSH
81696: LD_INT 22
81698: PUSH
81699: LD_OWVAR 2
81703: PUSH
81704: EMPTY
81705: LIST
81706: LIST
81707: PUSH
81708: LD_INT 30
81710: PUSH
81711: LD_INT 29
81713: PUSH
81714: EMPTY
81715: LIST
81716: LIST
81717: PUSH
81718: EMPTY
81719: LIST
81720: LIST
81721: PPUSH
81722: CALL_OW 69
81726: ST_TO_ADDR
// if not tmp then
81727: LD_VAR 0 2
81731: NOT
81732: IFFALSE 81736
// exit ;
81734: GO 81786
// CenterNowOnUnits ( tmp [ 1 ] ) ;
81736: LD_VAR 0 2
81740: PUSH
81741: LD_INT 1
81743: ARRAY
81744: PPUSH
81745: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
81749: LD_VAR 0 2
81753: PUSH
81754: LD_INT 1
81756: ARRAY
81757: PPUSH
81758: CALL_OW 65
// end ; 5 .. 7 :
81762: GO 81786
81764: LD_INT 5
81766: DOUBLE
81767: GREATEREQUAL
81768: IFFALSE 81776
81770: LD_INT 7
81772: DOUBLE
81773: LESSEQUAL
81774: IFTRUE 81778
81776: GO 81785
81778: POP
// StreamSibBomb ; end ;
81779: CALL 78023 0 0
81783: GO 81786
81785: POP
// end ;
81786: PPOPN 3
81788: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
81789: LD_EXP 62
81793: PUSH
81794: LD_EXP 112
81798: AND
81799: IFFALSE 81955
81801: GO 81803
81803: DISABLE
81804: LD_INT 0
81806: PPUSH
81807: PPUSH
81808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
81809: LD_ADDR_VAR 0 2
81813: PUSH
81814: LD_INT 81
81816: PUSH
81817: LD_OWVAR 2
81821: PUSH
81822: EMPTY
81823: LIST
81824: LIST
81825: PUSH
81826: LD_INT 2
81828: PUSH
81829: LD_INT 21
81831: PUSH
81832: LD_INT 1
81834: PUSH
81835: EMPTY
81836: LIST
81837: LIST
81838: PUSH
81839: LD_INT 21
81841: PUSH
81842: LD_INT 2
81844: PUSH
81845: EMPTY
81846: LIST
81847: LIST
81848: PUSH
81849: EMPTY
81850: LIST
81851: LIST
81852: LIST
81853: PUSH
81854: EMPTY
81855: LIST
81856: LIST
81857: PPUSH
81858: CALL_OW 69
81862: ST_TO_ADDR
// if not tmp then
81863: LD_VAR 0 2
81867: NOT
81868: IFFALSE 81872
// exit ;
81870: GO 81955
// p := 0 ;
81872: LD_ADDR_VAR 0 3
81876: PUSH
81877: LD_INT 0
81879: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
81880: LD_INT 35
81882: PPUSH
81883: CALL_OW 67
// p := p + 1 ;
81887: LD_ADDR_VAR 0 3
81891: PUSH
81892: LD_VAR 0 3
81896: PUSH
81897: LD_INT 1
81899: PLUS
81900: ST_TO_ADDR
// for i in tmp do
81901: LD_ADDR_VAR 0 1
81905: PUSH
81906: LD_VAR 0 2
81910: PUSH
81911: FOR_IN
81912: IFFALSE 81943
// if GetLives ( i ) < 1000 then
81914: LD_VAR 0 1
81918: PPUSH
81919: CALL_OW 256
81923: PUSH
81924: LD_INT 1000
81926: LESS
81927: IFFALSE 81941
// SetLives ( i , 1000 ) ;
81929: LD_VAR 0 1
81933: PPUSH
81934: LD_INT 1000
81936: PPUSH
81937: CALL_OW 234
81941: GO 81911
81943: POP
81944: POP
// until p > 20 ;
81945: LD_VAR 0 3
81949: PUSH
81950: LD_INT 20
81952: GREATER
81953: IFFALSE 81880
// end ;
81955: PPOPN 3
81957: END
// every 0 0$1 trigger StreamModeActive and sTime do
81958: LD_EXP 62
81962: PUSH
81963: LD_EXP 113
81967: AND
81968: IFFALSE 82003
81970: GO 81972
81972: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
81973: LD_INT 28
81975: PPUSH
81976: LD_OWVAR 2
81980: PPUSH
81981: LD_INT 2
81983: PPUSH
81984: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
81988: LD_INT 30
81990: PPUSH
81991: LD_OWVAR 2
81995: PPUSH
81996: LD_INT 2
81998: PPUSH
81999: CALL_OW 322
// end ;
82003: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
82004: LD_EXP 62
82008: PUSH
82009: LD_EXP 114
82013: AND
82014: IFFALSE 82135
82016: GO 82018
82018: DISABLE
82019: LD_INT 0
82021: PPUSH
82022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
82023: LD_ADDR_VAR 0 2
82027: PUSH
82028: LD_INT 22
82030: PUSH
82031: LD_OWVAR 2
82035: PUSH
82036: EMPTY
82037: LIST
82038: LIST
82039: PUSH
82040: LD_INT 21
82042: PUSH
82043: LD_INT 1
82045: PUSH
82046: EMPTY
82047: LIST
82048: LIST
82049: PUSH
82050: LD_INT 3
82052: PUSH
82053: LD_INT 23
82055: PUSH
82056: LD_INT 0
82058: PUSH
82059: EMPTY
82060: LIST
82061: LIST
82062: PUSH
82063: EMPTY
82064: LIST
82065: LIST
82066: PUSH
82067: EMPTY
82068: LIST
82069: LIST
82070: LIST
82071: PPUSH
82072: CALL_OW 69
82076: ST_TO_ADDR
// if not tmp then
82077: LD_VAR 0 2
82081: NOT
82082: IFFALSE 82086
// exit ;
82084: GO 82135
// for i in tmp do
82086: LD_ADDR_VAR 0 1
82090: PUSH
82091: LD_VAR 0 2
82095: PUSH
82096: FOR_IN
82097: IFFALSE 82133
// begin if Crawls ( i ) then
82099: LD_VAR 0 1
82103: PPUSH
82104: CALL_OW 318
82108: IFFALSE 82119
// ComWalk ( i ) ;
82110: LD_VAR 0 1
82114: PPUSH
82115: CALL_OW 138
// SetClass ( i , 2 ) ;
82119: LD_VAR 0 1
82123: PPUSH
82124: LD_INT 2
82126: PPUSH
82127: CALL_OW 336
// end ;
82131: GO 82096
82133: POP
82134: POP
// end ;
82135: PPOPN 2
82137: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
82138: LD_EXP 62
82142: PUSH
82143: LD_EXP 115
82147: AND
82148: IFFALSE 82436
82150: GO 82152
82152: DISABLE
82153: LD_INT 0
82155: PPUSH
82156: PPUSH
82157: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
82158: LD_OWVAR 2
82162: PPUSH
82163: LD_INT 9
82165: PPUSH
82166: LD_INT 1
82168: PPUSH
82169: LD_INT 1
82171: PPUSH
82172: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
82176: LD_INT 9
82178: PPUSH
82179: LD_OWVAR 2
82183: PPUSH
82184: CALL_OW 343
// uc_side := 9 ;
82188: LD_ADDR_OWVAR 20
82192: PUSH
82193: LD_INT 9
82195: ST_TO_ADDR
// uc_nation := 2 ;
82196: LD_ADDR_OWVAR 21
82200: PUSH
82201: LD_INT 2
82203: ST_TO_ADDR
// hc_name := Dark Warrior ;
82204: LD_ADDR_OWVAR 26
82208: PUSH
82209: LD_STRING Dark Warrior
82211: ST_TO_ADDR
// hc_gallery :=  ;
82212: LD_ADDR_OWVAR 33
82216: PUSH
82217: LD_STRING 
82219: ST_TO_ADDR
// hc_noskilllimit := true ;
82220: LD_ADDR_OWVAR 76
82224: PUSH
82225: LD_INT 1
82227: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
82228: LD_ADDR_OWVAR 31
82232: PUSH
82233: LD_INT 30
82235: PUSH
82236: LD_INT 30
82238: PUSH
82239: LD_INT 30
82241: PUSH
82242: LD_INT 30
82244: PUSH
82245: EMPTY
82246: LIST
82247: LIST
82248: LIST
82249: LIST
82250: ST_TO_ADDR
// un := CreateHuman ;
82251: LD_ADDR_VAR 0 3
82255: PUSH
82256: CALL_OW 44
82260: ST_TO_ADDR
// hc_noskilllimit := false ;
82261: LD_ADDR_OWVAR 76
82265: PUSH
82266: LD_INT 0
82268: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
82269: LD_VAR 0 3
82273: PPUSH
82274: LD_INT 1
82276: PPUSH
82277: CALL_OW 51
// ToLua ( playRanger() ) ;
82281: LD_STRING playRanger()
82283: PPUSH
82284: CALL_OW 559
// p := 0 ;
82288: LD_ADDR_VAR 0 2
82292: PUSH
82293: LD_INT 0
82295: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82296: LD_INT 35
82298: PPUSH
82299: CALL_OW 67
// p := p + 1 ;
82303: LD_ADDR_VAR 0 2
82307: PUSH
82308: LD_VAR 0 2
82312: PUSH
82313: LD_INT 1
82315: PLUS
82316: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
82317: LD_VAR 0 3
82321: PPUSH
82322: CALL_OW 256
82326: PUSH
82327: LD_INT 1000
82329: LESS
82330: IFFALSE 82344
// SetLives ( un , 1000 ) ;
82332: LD_VAR 0 3
82336: PPUSH
82337: LD_INT 1000
82339: PPUSH
82340: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
82344: LD_VAR 0 3
82348: PPUSH
82349: LD_INT 81
82351: PUSH
82352: LD_OWVAR 2
82356: PUSH
82357: EMPTY
82358: LIST
82359: LIST
82360: PUSH
82361: LD_INT 91
82363: PUSH
82364: LD_VAR 0 3
82368: PUSH
82369: LD_INT 30
82371: PUSH
82372: EMPTY
82373: LIST
82374: LIST
82375: LIST
82376: PUSH
82377: EMPTY
82378: LIST
82379: LIST
82380: PPUSH
82381: CALL_OW 69
82385: PPUSH
82386: LD_VAR 0 3
82390: PPUSH
82391: CALL_OW 74
82395: PPUSH
82396: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
82400: LD_VAR 0 2
82404: PUSH
82405: LD_INT 80
82407: GREATER
82408: PUSH
82409: LD_VAR 0 3
82413: PPUSH
82414: CALL_OW 301
82418: OR
82419: IFFALSE 82296
// if un then
82421: LD_VAR 0 3
82425: IFFALSE 82436
// RemoveUnit ( un ) ;
82427: LD_VAR 0 3
82431: PPUSH
82432: CALL_OW 64
// end ;
82436: PPOPN 3
82438: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
82439: LD_EXP 116
82443: IFFALSE 82559
82445: GO 82447
82447: DISABLE
82448: LD_INT 0
82450: PPUSH
82451: PPUSH
82452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
82453: LD_ADDR_VAR 0 2
82457: PUSH
82458: LD_INT 81
82460: PUSH
82461: LD_OWVAR 2
82465: PUSH
82466: EMPTY
82467: LIST
82468: LIST
82469: PUSH
82470: LD_INT 21
82472: PUSH
82473: LD_INT 1
82475: PUSH
82476: EMPTY
82477: LIST
82478: LIST
82479: PUSH
82480: EMPTY
82481: LIST
82482: LIST
82483: PPUSH
82484: CALL_OW 69
82488: ST_TO_ADDR
// ToLua ( playComputer() ) ;
82489: LD_STRING playComputer()
82491: PPUSH
82492: CALL_OW 559
// if not tmp then
82496: LD_VAR 0 2
82500: NOT
82501: IFFALSE 82505
// exit ;
82503: GO 82559
// for i in tmp do
82505: LD_ADDR_VAR 0 1
82509: PUSH
82510: LD_VAR 0 2
82514: PUSH
82515: FOR_IN
82516: IFFALSE 82557
// for j := 1 to 4 do
82518: LD_ADDR_VAR 0 3
82522: PUSH
82523: DOUBLE
82524: LD_INT 1
82526: DEC
82527: ST_TO_ADDR
82528: LD_INT 4
82530: PUSH
82531: FOR_TO
82532: IFFALSE 82553
// SetSkill ( i , j , 10 ) ;
82534: LD_VAR 0 1
82538: PPUSH
82539: LD_VAR 0 3
82543: PPUSH
82544: LD_INT 10
82546: PPUSH
82547: CALL_OW 237
82551: GO 82531
82553: POP
82554: POP
82555: GO 82515
82557: POP
82558: POP
// end ;
82559: PPOPN 3
82561: END
// every 0 0$1 trigger s30 do var i , tmp ;
82562: LD_EXP 117
82566: IFFALSE 82635
82568: GO 82570
82570: DISABLE
82571: LD_INT 0
82573: PPUSH
82574: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
82575: LD_ADDR_VAR 0 2
82579: PUSH
82580: LD_INT 22
82582: PUSH
82583: LD_OWVAR 2
82587: PUSH
82588: EMPTY
82589: LIST
82590: LIST
82591: PPUSH
82592: CALL_OW 69
82596: ST_TO_ADDR
// if not tmp then
82597: LD_VAR 0 2
82601: NOT
82602: IFFALSE 82606
// exit ;
82604: GO 82635
// for i in tmp do
82606: LD_ADDR_VAR 0 1
82610: PUSH
82611: LD_VAR 0 2
82615: PUSH
82616: FOR_IN
82617: IFFALSE 82633
// SetLives ( i , 300 ) ;
82619: LD_VAR 0 1
82623: PPUSH
82624: LD_INT 300
82626: PPUSH
82627: CALL_OW 234
82631: GO 82616
82633: POP
82634: POP
// end ;
82635: PPOPN 2
82637: END
// every 0 0$1 trigger s60 do var i , tmp ;
82638: LD_EXP 118
82642: IFFALSE 82711
82644: GO 82646
82646: DISABLE
82647: LD_INT 0
82649: PPUSH
82650: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
82651: LD_ADDR_VAR 0 2
82655: PUSH
82656: LD_INT 22
82658: PUSH
82659: LD_OWVAR 2
82663: PUSH
82664: EMPTY
82665: LIST
82666: LIST
82667: PPUSH
82668: CALL_OW 69
82672: ST_TO_ADDR
// if not tmp then
82673: LD_VAR 0 2
82677: NOT
82678: IFFALSE 82682
// exit ;
82680: GO 82711
// for i in tmp do
82682: LD_ADDR_VAR 0 1
82686: PUSH
82687: LD_VAR 0 2
82691: PUSH
82692: FOR_IN
82693: IFFALSE 82709
// SetLives ( i , 600 ) ;
82695: LD_VAR 0 1
82699: PPUSH
82700: LD_INT 600
82702: PPUSH
82703: CALL_OW 234
82707: GO 82692
82709: POP
82710: POP
// end ;
82711: PPOPN 2
82713: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
82714: LD_INT 0
82716: PPUSH
// case cmd of 301 :
82717: LD_VAR 0 1
82721: PUSH
82722: LD_INT 301
82724: DOUBLE
82725: EQUAL
82726: IFTRUE 82730
82728: GO 82762
82730: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
82731: LD_VAR 0 6
82735: PPUSH
82736: LD_VAR 0 7
82740: PPUSH
82741: LD_VAR 0 8
82745: PPUSH
82746: LD_VAR 0 4
82750: PPUSH
82751: LD_VAR 0 5
82755: PPUSH
82756: CALL 83963 0 5
82760: GO 82883
82762: LD_INT 302
82764: DOUBLE
82765: EQUAL
82766: IFTRUE 82770
82768: GO 82807
82770: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
82771: LD_VAR 0 6
82775: PPUSH
82776: LD_VAR 0 7
82780: PPUSH
82781: LD_VAR 0 8
82785: PPUSH
82786: LD_VAR 0 9
82790: PPUSH
82791: LD_VAR 0 4
82795: PPUSH
82796: LD_VAR 0 5
82800: PPUSH
82801: CALL 84054 0 6
82805: GO 82883
82807: LD_INT 303
82809: DOUBLE
82810: EQUAL
82811: IFTRUE 82815
82813: GO 82852
82815: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
82816: LD_VAR 0 6
82820: PPUSH
82821: LD_VAR 0 7
82825: PPUSH
82826: LD_VAR 0 8
82830: PPUSH
82831: LD_VAR 0 9
82835: PPUSH
82836: LD_VAR 0 4
82840: PPUSH
82841: LD_VAR 0 5
82845: PPUSH
82846: CALL 82888 0 6
82850: GO 82883
82852: LD_INT 304
82854: DOUBLE
82855: EQUAL
82856: IFTRUE 82860
82858: GO 82882
82860: POP
// hHackTeleport ( unit , x , y ) ; end ;
82861: LD_VAR 0 2
82865: PPUSH
82866: LD_VAR 0 4
82870: PPUSH
82871: LD_VAR 0 5
82875: PPUSH
82876: CALL 84647 0 3
82880: GO 82883
82882: POP
// end ;
82883: LD_VAR 0 12
82887: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
82888: LD_INT 0
82890: PPUSH
82891: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
82892: LD_VAR 0 1
82896: PUSH
82897: LD_INT 1
82899: LESS
82900: PUSH
82901: LD_VAR 0 1
82905: PUSH
82906: LD_INT 3
82908: GREATER
82909: OR
82910: PUSH
82911: LD_VAR 0 5
82915: PPUSH
82916: LD_VAR 0 6
82920: PPUSH
82921: CALL_OW 428
82925: OR
82926: IFFALSE 82930
// exit ;
82928: GO 83650
// uc_side := your_side ;
82930: LD_ADDR_OWVAR 20
82934: PUSH
82935: LD_OWVAR 2
82939: ST_TO_ADDR
// uc_nation := nation ;
82940: LD_ADDR_OWVAR 21
82944: PUSH
82945: LD_VAR 0 1
82949: ST_TO_ADDR
// bc_level = 1 ;
82950: LD_ADDR_OWVAR 43
82954: PUSH
82955: LD_INT 1
82957: ST_TO_ADDR
// case btype of 1 :
82958: LD_VAR 0 2
82962: PUSH
82963: LD_INT 1
82965: DOUBLE
82966: EQUAL
82967: IFTRUE 82971
82969: GO 82982
82971: POP
// bc_type := b_depot ; 2 :
82972: LD_ADDR_OWVAR 42
82976: PUSH
82977: LD_INT 0
82979: ST_TO_ADDR
82980: GO 83594
82982: LD_INT 2
82984: DOUBLE
82985: EQUAL
82986: IFTRUE 82990
82988: GO 83001
82990: POP
// bc_type := b_warehouse ; 3 :
82991: LD_ADDR_OWVAR 42
82995: PUSH
82996: LD_INT 1
82998: ST_TO_ADDR
82999: GO 83594
83001: LD_INT 3
83003: DOUBLE
83004: EQUAL
83005: IFTRUE 83009
83007: GO 83020
83009: POP
// bc_type := b_lab ; 4 .. 9 :
83010: LD_ADDR_OWVAR 42
83014: PUSH
83015: LD_INT 6
83017: ST_TO_ADDR
83018: GO 83594
83020: LD_INT 4
83022: DOUBLE
83023: GREATEREQUAL
83024: IFFALSE 83032
83026: LD_INT 9
83028: DOUBLE
83029: LESSEQUAL
83030: IFTRUE 83034
83032: GO 83086
83034: POP
// begin bc_type := b_lab_half ;
83035: LD_ADDR_OWVAR 42
83039: PUSH
83040: LD_INT 7
83042: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
83043: LD_ADDR_OWVAR 44
83047: PUSH
83048: LD_INT 10
83050: PUSH
83051: LD_INT 11
83053: PUSH
83054: LD_INT 12
83056: PUSH
83057: LD_INT 15
83059: PUSH
83060: LD_INT 14
83062: PUSH
83063: LD_INT 13
83065: PUSH
83066: EMPTY
83067: LIST
83068: LIST
83069: LIST
83070: LIST
83071: LIST
83072: LIST
83073: PUSH
83074: LD_VAR 0 2
83078: PUSH
83079: LD_INT 3
83081: MINUS
83082: ARRAY
83083: ST_TO_ADDR
// end ; 10 .. 13 :
83084: GO 83594
83086: LD_INT 10
83088: DOUBLE
83089: GREATEREQUAL
83090: IFFALSE 83098
83092: LD_INT 13
83094: DOUBLE
83095: LESSEQUAL
83096: IFTRUE 83100
83098: GO 83177
83100: POP
// begin bc_type := b_lab_full ;
83101: LD_ADDR_OWVAR 42
83105: PUSH
83106: LD_INT 8
83108: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
83109: LD_ADDR_OWVAR 44
83113: PUSH
83114: LD_INT 10
83116: PUSH
83117: LD_INT 12
83119: PUSH
83120: LD_INT 14
83122: PUSH
83123: LD_INT 13
83125: PUSH
83126: EMPTY
83127: LIST
83128: LIST
83129: LIST
83130: LIST
83131: PUSH
83132: LD_VAR 0 2
83136: PUSH
83137: LD_INT 9
83139: MINUS
83140: ARRAY
83141: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
83142: LD_ADDR_OWVAR 45
83146: PUSH
83147: LD_INT 11
83149: PUSH
83150: LD_INT 15
83152: PUSH
83153: LD_INT 12
83155: PUSH
83156: LD_INT 15
83158: PUSH
83159: EMPTY
83160: LIST
83161: LIST
83162: LIST
83163: LIST
83164: PUSH
83165: LD_VAR 0 2
83169: PUSH
83170: LD_INT 9
83172: MINUS
83173: ARRAY
83174: ST_TO_ADDR
// end ; 14 :
83175: GO 83594
83177: LD_INT 14
83179: DOUBLE
83180: EQUAL
83181: IFTRUE 83185
83183: GO 83196
83185: POP
// bc_type := b_workshop ; 15 :
83186: LD_ADDR_OWVAR 42
83190: PUSH
83191: LD_INT 2
83193: ST_TO_ADDR
83194: GO 83594
83196: LD_INT 15
83198: DOUBLE
83199: EQUAL
83200: IFTRUE 83204
83202: GO 83215
83204: POP
// bc_type := b_factory ; 16 :
83205: LD_ADDR_OWVAR 42
83209: PUSH
83210: LD_INT 3
83212: ST_TO_ADDR
83213: GO 83594
83215: LD_INT 16
83217: DOUBLE
83218: EQUAL
83219: IFTRUE 83223
83221: GO 83234
83223: POP
// bc_type := b_ext_gun ; 17 :
83224: LD_ADDR_OWVAR 42
83228: PUSH
83229: LD_INT 17
83231: ST_TO_ADDR
83232: GO 83594
83234: LD_INT 17
83236: DOUBLE
83237: EQUAL
83238: IFTRUE 83242
83240: GO 83270
83242: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
83243: LD_ADDR_OWVAR 42
83247: PUSH
83248: LD_INT 19
83250: PUSH
83251: LD_INT 23
83253: PUSH
83254: LD_INT 19
83256: PUSH
83257: EMPTY
83258: LIST
83259: LIST
83260: LIST
83261: PUSH
83262: LD_VAR 0 1
83266: ARRAY
83267: ST_TO_ADDR
83268: GO 83594
83270: LD_INT 18
83272: DOUBLE
83273: EQUAL
83274: IFTRUE 83278
83276: GO 83289
83278: POP
// bc_type := b_ext_radar ; 19 :
83279: LD_ADDR_OWVAR 42
83283: PUSH
83284: LD_INT 20
83286: ST_TO_ADDR
83287: GO 83594
83289: LD_INT 19
83291: DOUBLE
83292: EQUAL
83293: IFTRUE 83297
83295: GO 83308
83297: POP
// bc_type := b_ext_radio ; 20 :
83298: LD_ADDR_OWVAR 42
83302: PUSH
83303: LD_INT 22
83305: ST_TO_ADDR
83306: GO 83594
83308: LD_INT 20
83310: DOUBLE
83311: EQUAL
83312: IFTRUE 83316
83314: GO 83327
83316: POP
// bc_type := b_ext_siberium ; 21 :
83317: LD_ADDR_OWVAR 42
83321: PUSH
83322: LD_INT 21
83324: ST_TO_ADDR
83325: GO 83594
83327: LD_INT 21
83329: DOUBLE
83330: EQUAL
83331: IFTRUE 83335
83333: GO 83346
83335: POP
// bc_type := b_ext_computer ; 22 :
83336: LD_ADDR_OWVAR 42
83340: PUSH
83341: LD_INT 24
83343: ST_TO_ADDR
83344: GO 83594
83346: LD_INT 22
83348: DOUBLE
83349: EQUAL
83350: IFTRUE 83354
83352: GO 83365
83354: POP
// bc_type := b_ext_track ; 23 :
83355: LD_ADDR_OWVAR 42
83359: PUSH
83360: LD_INT 16
83362: ST_TO_ADDR
83363: GO 83594
83365: LD_INT 23
83367: DOUBLE
83368: EQUAL
83369: IFTRUE 83373
83371: GO 83384
83373: POP
// bc_type := b_ext_laser ; 24 :
83374: LD_ADDR_OWVAR 42
83378: PUSH
83379: LD_INT 25
83381: ST_TO_ADDR
83382: GO 83594
83384: LD_INT 24
83386: DOUBLE
83387: EQUAL
83388: IFTRUE 83392
83390: GO 83403
83392: POP
// bc_type := b_control_tower ; 25 :
83393: LD_ADDR_OWVAR 42
83397: PUSH
83398: LD_INT 36
83400: ST_TO_ADDR
83401: GO 83594
83403: LD_INT 25
83405: DOUBLE
83406: EQUAL
83407: IFTRUE 83411
83409: GO 83422
83411: POP
// bc_type := b_breastwork ; 26 :
83412: LD_ADDR_OWVAR 42
83416: PUSH
83417: LD_INT 31
83419: ST_TO_ADDR
83420: GO 83594
83422: LD_INT 26
83424: DOUBLE
83425: EQUAL
83426: IFTRUE 83430
83428: GO 83441
83430: POP
// bc_type := b_bunker ; 27 :
83431: LD_ADDR_OWVAR 42
83435: PUSH
83436: LD_INT 32
83438: ST_TO_ADDR
83439: GO 83594
83441: LD_INT 27
83443: DOUBLE
83444: EQUAL
83445: IFTRUE 83449
83447: GO 83460
83449: POP
// bc_type := b_turret ; 28 :
83450: LD_ADDR_OWVAR 42
83454: PUSH
83455: LD_INT 33
83457: ST_TO_ADDR
83458: GO 83594
83460: LD_INT 28
83462: DOUBLE
83463: EQUAL
83464: IFTRUE 83468
83466: GO 83479
83468: POP
// bc_type := b_armoury ; 29 :
83469: LD_ADDR_OWVAR 42
83473: PUSH
83474: LD_INT 4
83476: ST_TO_ADDR
83477: GO 83594
83479: LD_INT 29
83481: DOUBLE
83482: EQUAL
83483: IFTRUE 83487
83485: GO 83498
83487: POP
// bc_type := b_barracks ; 30 :
83488: LD_ADDR_OWVAR 42
83492: PUSH
83493: LD_INT 5
83495: ST_TO_ADDR
83496: GO 83594
83498: LD_INT 30
83500: DOUBLE
83501: EQUAL
83502: IFTRUE 83506
83504: GO 83517
83506: POP
// bc_type := b_solar_power ; 31 :
83507: LD_ADDR_OWVAR 42
83511: PUSH
83512: LD_INT 27
83514: ST_TO_ADDR
83515: GO 83594
83517: LD_INT 31
83519: DOUBLE
83520: EQUAL
83521: IFTRUE 83525
83523: GO 83536
83525: POP
// bc_type := b_oil_power ; 32 :
83526: LD_ADDR_OWVAR 42
83530: PUSH
83531: LD_INT 26
83533: ST_TO_ADDR
83534: GO 83594
83536: LD_INT 32
83538: DOUBLE
83539: EQUAL
83540: IFTRUE 83544
83542: GO 83555
83544: POP
// bc_type := b_siberite_power ; 33 :
83545: LD_ADDR_OWVAR 42
83549: PUSH
83550: LD_INT 28
83552: ST_TO_ADDR
83553: GO 83594
83555: LD_INT 33
83557: DOUBLE
83558: EQUAL
83559: IFTRUE 83563
83561: GO 83574
83563: POP
// bc_type := b_oil_mine ; 34 :
83564: LD_ADDR_OWVAR 42
83568: PUSH
83569: LD_INT 29
83571: ST_TO_ADDR
83572: GO 83594
83574: LD_INT 34
83576: DOUBLE
83577: EQUAL
83578: IFTRUE 83582
83580: GO 83593
83582: POP
// bc_type := b_siberite_mine ; end ;
83583: LD_ADDR_OWVAR 42
83587: PUSH
83588: LD_INT 30
83590: ST_TO_ADDR
83591: GO 83594
83593: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
83594: LD_ADDR_VAR 0 8
83598: PUSH
83599: LD_VAR 0 5
83603: PPUSH
83604: LD_VAR 0 6
83608: PPUSH
83609: LD_VAR 0 3
83613: PPUSH
83614: CALL_OW 47
83618: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
83619: LD_OWVAR 42
83623: PUSH
83624: LD_INT 32
83626: PUSH
83627: LD_INT 33
83629: PUSH
83630: EMPTY
83631: LIST
83632: LIST
83633: IN
83634: IFFALSE 83650
// PlaceWeaponTurret ( b , weapon ) ;
83636: LD_VAR 0 8
83640: PPUSH
83641: LD_VAR 0 4
83645: PPUSH
83646: CALL_OW 431
// end ;
83650: LD_VAR 0 7
83654: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
83655: LD_INT 0
83657: PPUSH
83658: PPUSH
83659: PPUSH
83660: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
83661: LD_ADDR_VAR 0 4
83665: PUSH
83666: LD_INT 22
83668: PUSH
83669: LD_OWVAR 2
83673: PUSH
83674: EMPTY
83675: LIST
83676: LIST
83677: PUSH
83678: LD_INT 2
83680: PUSH
83681: LD_INT 30
83683: PUSH
83684: LD_INT 0
83686: PUSH
83687: EMPTY
83688: LIST
83689: LIST
83690: PUSH
83691: LD_INT 30
83693: PUSH
83694: LD_INT 1
83696: PUSH
83697: EMPTY
83698: LIST
83699: LIST
83700: PUSH
83701: EMPTY
83702: LIST
83703: LIST
83704: LIST
83705: PUSH
83706: EMPTY
83707: LIST
83708: LIST
83709: PPUSH
83710: CALL_OW 69
83714: ST_TO_ADDR
// if not tmp then
83715: LD_VAR 0 4
83719: NOT
83720: IFFALSE 83724
// exit ;
83722: GO 83783
// for i in tmp do
83724: LD_ADDR_VAR 0 2
83728: PUSH
83729: LD_VAR 0 4
83733: PUSH
83734: FOR_IN
83735: IFFALSE 83781
// for j = 1 to 3 do
83737: LD_ADDR_VAR 0 3
83741: PUSH
83742: DOUBLE
83743: LD_INT 1
83745: DEC
83746: ST_TO_ADDR
83747: LD_INT 3
83749: PUSH
83750: FOR_TO
83751: IFFALSE 83777
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
83753: LD_VAR 0 2
83757: PPUSH
83758: CALL_OW 274
83762: PPUSH
83763: LD_VAR 0 3
83767: PPUSH
83768: LD_INT 99999
83770: PPUSH
83771: CALL_OW 277
83775: GO 83750
83777: POP
83778: POP
83779: GO 83734
83781: POP
83782: POP
// end ;
83783: LD_VAR 0 1
83787: RET
// export function hHackSetLevel10 ; var i , j ; begin
83788: LD_INT 0
83790: PPUSH
83791: PPUSH
83792: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
83793: LD_ADDR_VAR 0 2
83797: PUSH
83798: LD_INT 21
83800: PUSH
83801: LD_INT 1
83803: PUSH
83804: EMPTY
83805: LIST
83806: LIST
83807: PPUSH
83808: CALL_OW 69
83812: PUSH
83813: FOR_IN
83814: IFFALSE 83866
// if IsSelected ( i ) then
83816: LD_VAR 0 2
83820: PPUSH
83821: CALL_OW 306
83825: IFFALSE 83864
// begin for j := 1 to 4 do
83827: LD_ADDR_VAR 0 3
83831: PUSH
83832: DOUBLE
83833: LD_INT 1
83835: DEC
83836: ST_TO_ADDR
83837: LD_INT 4
83839: PUSH
83840: FOR_TO
83841: IFFALSE 83862
// SetSkill ( i , j , 10 ) ;
83843: LD_VAR 0 2
83847: PPUSH
83848: LD_VAR 0 3
83852: PPUSH
83853: LD_INT 10
83855: PPUSH
83856: CALL_OW 237
83860: GO 83840
83862: POP
83863: POP
// end ;
83864: GO 83813
83866: POP
83867: POP
// end ;
83868: LD_VAR 0 1
83872: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
83873: LD_INT 0
83875: PPUSH
83876: PPUSH
83877: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
83878: LD_ADDR_VAR 0 2
83882: PUSH
83883: LD_INT 22
83885: PUSH
83886: LD_OWVAR 2
83890: PUSH
83891: EMPTY
83892: LIST
83893: LIST
83894: PUSH
83895: LD_INT 21
83897: PUSH
83898: LD_INT 1
83900: PUSH
83901: EMPTY
83902: LIST
83903: LIST
83904: PUSH
83905: EMPTY
83906: LIST
83907: LIST
83908: PPUSH
83909: CALL_OW 69
83913: PUSH
83914: FOR_IN
83915: IFFALSE 83956
// begin for j := 1 to 4 do
83917: LD_ADDR_VAR 0 3
83921: PUSH
83922: DOUBLE
83923: LD_INT 1
83925: DEC
83926: ST_TO_ADDR
83927: LD_INT 4
83929: PUSH
83930: FOR_TO
83931: IFFALSE 83952
// SetSkill ( i , j , 10 ) ;
83933: LD_VAR 0 2
83937: PPUSH
83938: LD_VAR 0 3
83942: PPUSH
83943: LD_INT 10
83945: PPUSH
83946: CALL_OW 237
83950: GO 83930
83952: POP
83953: POP
// end ;
83954: GO 83914
83956: POP
83957: POP
// end ;
83958: LD_VAR 0 1
83962: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
83963: LD_INT 0
83965: PPUSH
// uc_side := your_side ;
83966: LD_ADDR_OWVAR 20
83970: PUSH
83971: LD_OWVAR 2
83975: ST_TO_ADDR
// uc_nation := nation ;
83976: LD_ADDR_OWVAR 21
83980: PUSH
83981: LD_VAR 0 1
83985: ST_TO_ADDR
// InitHc ;
83986: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
83990: LD_INT 0
83992: PPUSH
83993: LD_VAR 0 2
83997: PPUSH
83998: LD_VAR 0 3
84002: PPUSH
84003: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
84007: LD_VAR 0 4
84011: PPUSH
84012: LD_VAR 0 5
84016: PPUSH
84017: CALL_OW 428
84021: PUSH
84022: LD_INT 0
84024: EQUAL
84025: IFFALSE 84049
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
84027: CALL_OW 44
84031: PPUSH
84032: LD_VAR 0 4
84036: PPUSH
84037: LD_VAR 0 5
84041: PPUSH
84042: LD_INT 1
84044: PPUSH
84045: CALL_OW 48
// end ;
84049: LD_VAR 0 6
84053: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
84054: LD_INT 0
84056: PPUSH
84057: PPUSH
// uc_side := your_side ;
84058: LD_ADDR_OWVAR 20
84062: PUSH
84063: LD_OWVAR 2
84067: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
84068: LD_VAR 0 1
84072: PUSH
84073: LD_INT 1
84075: PUSH
84076: LD_INT 2
84078: PUSH
84079: LD_INT 3
84081: PUSH
84082: LD_INT 4
84084: PUSH
84085: LD_INT 5
84087: PUSH
84088: EMPTY
84089: LIST
84090: LIST
84091: LIST
84092: LIST
84093: LIST
84094: IN
84095: IFFALSE 84107
// uc_nation := nation_american else
84097: LD_ADDR_OWVAR 21
84101: PUSH
84102: LD_INT 1
84104: ST_TO_ADDR
84105: GO 84150
// if chassis in [ 11 , 12 , 13 , 14 ] then
84107: LD_VAR 0 1
84111: PUSH
84112: LD_INT 11
84114: PUSH
84115: LD_INT 12
84117: PUSH
84118: LD_INT 13
84120: PUSH
84121: LD_INT 14
84123: PUSH
84124: EMPTY
84125: LIST
84126: LIST
84127: LIST
84128: LIST
84129: IN
84130: IFFALSE 84142
// uc_nation := nation_arabian else
84132: LD_ADDR_OWVAR 21
84136: PUSH
84137: LD_INT 2
84139: ST_TO_ADDR
84140: GO 84150
// uc_nation := nation_russian ;
84142: LD_ADDR_OWVAR 21
84146: PUSH
84147: LD_INT 3
84149: ST_TO_ADDR
// vc_chassis := chassis ;
84150: LD_ADDR_OWVAR 37
84154: PUSH
84155: LD_VAR 0 1
84159: ST_TO_ADDR
// vc_engine := engine ;
84160: LD_ADDR_OWVAR 39
84164: PUSH
84165: LD_VAR 0 2
84169: ST_TO_ADDR
// vc_control := control ;
84170: LD_ADDR_OWVAR 38
84174: PUSH
84175: LD_VAR 0 3
84179: ST_TO_ADDR
// vc_weapon := weapon ;
84180: LD_ADDR_OWVAR 40
84184: PUSH
84185: LD_VAR 0 4
84189: ST_TO_ADDR
// un := CreateVehicle ;
84190: LD_ADDR_VAR 0 8
84194: PUSH
84195: CALL_OW 45
84199: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
84200: LD_VAR 0 8
84204: PPUSH
84205: LD_INT 0
84207: PPUSH
84208: LD_INT 5
84210: PPUSH
84211: CALL_OW 12
84215: PPUSH
84216: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
84220: LD_VAR 0 8
84224: PPUSH
84225: LD_VAR 0 5
84229: PPUSH
84230: LD_VAR 0 6
84234: PPUSH
84235: LD_INT 1
84237: PPUSH
84238: CALL_OW 48
// end ;
84242: LD_VAR 0 7
84246: RET
// export hInvincible ; every 1 do
84247: GO 84249
84249: DISABLE
// hInvincible := [ ] ;
84250: LD_ADDR_EXP 119
84254: PUSH
84255: EMPTY
84256: ST_TO_ADDR
84257: END
// every 10 do var i ;
84258: GO 84260
84260: DISABLE
84261: LD_INT 0
84263: PPUSH
// begin enable ;
84264: ENABLE
// if not hInvincible then
84265: LD_EXP 119
84269: NOT
84270: IFFALSE 84274
// exit ;
84272: GO 84318
// for i in hInvincible do
84274: LD_ADDR_VAR 0 1
84278: PUSH
84279: LD_EXP 119
84283: PUSH
84284: FOR_IN
84285: IFFALSE 84316
// if GetLives ( i ) < 1000 then
84287: LD_VAR 0 1
84291: PPUSH
84292: CALL_OW 256
84296: PUSH
84297: LD_INT 1000
84299: LESS
84300: IFFALSE 84314
// SetLives ( i , 1000 ) ;
84302: LD_VAR 0 1
84306: PPUSH
84307: LD_INT 1000
84309: PPUSH
84310: CALL_OW 234
84314: GO 84284
84316: POP
84317: POP
// end ;
84318: PPOPN 1
84320: END
// export function hHackInvincible ; var i ; begin
84321: LD_INT 0
84323: PPUSH
84324: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
84325: LD_ADDR_VAR 0 2
84329: PUSH
84330: LD_INT 2
84332: PUSH
84333: LD_INT 21
84335: PUSH
84336: LD_INT 1
84338: PUSH
84339: EMPTY
84340: LIST
84341: LIST
84342: PUSH
84343: LD_INT 21
84345: PUSH
84346: LD_INT 2
84348: PUSH
84349: EMPTY
84350: LIST
84351: LIST
84352: PUSH
84353: EMPTY
84354: LIST
84355: LIST
84356: LIST
84357: PPUSH
84358: CALL_OW 69
84362: PUSH
84363: FOR_IN
84364: IFFALSE 84425
// if IsSelected ( i ) then
84366: LD_VAR 0 2
84370: PPUSH
84371: CALL_OW 306
84375: IFFALSE 84423
// begin if i in hInvincible then
84377: LD_VAR 0 2
84381: PUSH
84382: LD_EXP 119
84386: IN
84387: IFFALSE 84407
// hInvincible := hInvincible diff i else
84389: LD_ADDR_EXP 119
84393: PUSH
84394: LD_EXP 119
84398: PUSH
84399: LD_VAR 0 2
84403: DIFF
84404: ST_TO_ADDR
84405: GO 84423
// hInvincible := hInvincible union i ;
84407: LD_ADDR_EXP 119
84411: PUSH
84412: LD_EXP 119
84416: PUSH
84417: LD_VAR 0 2
84421: UNION
84422: ST_TO_ADDR
// end ;
84423: GO 84363
84425: POP
84426: POP
// end ;
84427: LD_VAR 0 1
84431: RET
// export function hHackInvisible ; var i , j ; begin
84432: LD_INT 0
84434: PPUSH
84435: PPUSH
84436: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
84437: LD_ADDR_VAR 0 2
84441: PUSH
84442: LD_INT 21
84444: PUSH
84445: LD_INT 1
84447: PUSH
84448: EMPTY
84449: LIST
84450: LIST
84451: PPUSH
84452: CALL_OW 69
84456: PUSH
84457: FOR_IN
84458: IFFALSE 84482
// if IsSelected ( i ) then
84460: LD_VAR 0 2
84464: PPUSH
84465: CALL_OW 306
84469: IFFALSE 84480
// ComForceInvisible ( i ) ;
84471: LD_VAR 0 2
84475: PPUSH
84476: CALL_OW 496
84480: GO 84457
84482: POP
84483: POP
// end ;
84484: LD_VAR 0 1
84488: RET
// export function hHackChangeYourSide ; begin
84489: LD_INT 0
84491: PPUSH
// if your_side = 8 then
84492: LD_OWVAR 2
84496: PUSH
84497: LD_INT 8
84499: EQUAL
84500: IFFALSE 84512
// your_side := 0 else
84502: LD_ADDR_OWVAR 2
84506: PUSH
84507: LD_INT 0
84509: ST_TO_ADDR
84510: GO 84526
// your_side := your_side + 1 ;
84512: LD_ADDR_OWVAR 2
84516: PUSH
84517: LD_OWVAR 2
84521: PUSH
84522: LD_INT 1
84524: PLUS
84525: ST_TO_ADDR
// end ;
84526: LD_VAR 0 1
84530: RET
// export function hHackChangeUnitSide ; var i , j ; begin
84531: LD_INT 0
84533: PPUSH
84534: PPUSH
84535: PPUSH
// for i in all_units do
84536: LD_ADDR_VAR 0 2
84540: PUSH
84541: LD_OWVAR 3
84545: PUSH
84546: FOR_IN
84547: IFFALSE 84625
// if IsSelected ( i ) then
84549: LD_VAR 0 2
84553: PPUSH
84554: CALL_OW 306
84558: IFFALSE 84623
// begin j := GetSide ( i ) ;
84560: LD_ADDR_VAR 0 3
84564: PUSH
84565: LD_VAR 0 2
84569: PPUSH
84570: CALL_OW 255
84574: ST_TO_ADDR
// if j = 8 then
84575: LD_VAR 0 3
84579: PUSH
84580: LD_INT 8
84582: EQUAL
84583: IFFALSE 84595
// j := 0 else
84585: LD_ADDR_VAR 0 3
84589: PUSH
84590: LD_INT 0
84592: ST_TO_ADDR
84593: GO 84609
// j := j + 1 ;
84595: LD_ADDR_VAR 0 3
84599: PUSH
84600: LD_VAR 0 3
84604: PUSH
84605: LD_INT 1
84607: PLUS
84608: ST_TO_ADDR
// SetSide ( i , j ) ;
84609: LD_VAR 0 2
84613: PPUSH
84614: LD_VAR 0 3
84618: PPUSH
84619: CALL_OW 235
// end ;
84623: GO 84546
84625: POP
84626: POP
// end ;
84627: LD_VAR 0 1
84631: RET
// export function hHackFog ; begin
84632: LD_INT 0
84634: PPUSH
// FogOff ( true ) ;
84635: LD_INT 1
84637: PPUSH
84638: CALL_OW 344
// end ;
84642: LD_VAR 0 1
84646: RET
// export function hHackTeleport ( unit , x , y ) ; begin
84647: LD_INT 0
84649: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
84650: LD_VAR 0 1
84654: PPUSH
84655: LD_VAR 0 2
84659: PPUSH
84660: LD_VAR 0 3
84664: PPUSH
84665: LD_INT 1
84667: PPUSH
84668: LD_INT 1
84670: PPUSH
84671: CALL_OW 483
// CenterOnXY ( x , y ) ;
84675: LD_VAR 0 2
84679: PPUSH
84680: LD_VAR 0 3
84684: PPUSH
84685: CALL_OW 84
// end ;
84689: LD_VAR 0 4
84693: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
84694: LD_INT 0
84696: PPUSH
84697: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
84698: LD_VAR 0 1
84702: NOT
84703: PUSH
84704: LD_VAR 0 2
84708: PPUSH
84709: LD_VAR 0 3
84713: PPUSH
84714: CALL_OW 488
84718: NOT
84719: OR
84720: PUSH
84721: LD_VAR 0 1
84725: PPUSH
84726: CALL_OW 266
84730: PUSH
84731: LD_INT 3
84733: NONEQUAL
84734: PUSH
84735: LD_VAR 0 1
84739: PPUSH
84740: CALL_OW 247
84744: PUSH
84745: LD_INT 1
84747: EQUAL
84748: NOT
84749: AND
84750: OR
84751: IFFALSE 84755
// exit ;
84753: GO 84904
// if GetType ( factory ) = unit_human then
84755: LD_VAR 0 1
84759: PPUSH
84760: CALL_OW 247
84764: PUSH
84765: LD_INT 1
84767: EQUAL
84768: IFFALSE 84785
// factory := IsInUnit ( factory ) ;
84770: LD_ADDR_VAR 0 1
84774: PUSH
84775: LD_VAR 0 1
84779: PPUSH
84780: CALL_OW 310
84784: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
84785: LD_VAR 0 1
84789: PPUSH
84790: CALL_OW 266
84794: PUSH
84795: LD_INT 3
84797: NONEQUAL
84798: IFFALSE 84802
// exit ;
84800: GO 84904
// if HexInfo ( x , y ) = factory then
84802: LD_VAR 0 2
84806: PPUSH
84807: LD_VAR 0 3
84811: PPUSH
84812: CALL_OW 428
84816: PUSH
84817: LD_VAR 0 1
84821: EQUAL
84822: IFFALSE 84849
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
84824: LD_ADDR_EXP 120
84828: PUSH
84829: LD_EXP 120
84833: PPUSH
84834: LD_VAR 0 1
84838: PPUSH
84839: LD_INT 0
84841: PPUSH
84842: CALL_OW 1
84846: ST_TO_ADDR
84847: GO 84900
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
84849: LD_ADDR_EXP 120
84853: PUSH
84854: LD_EXP 120
84858: PPUSH
84859: LD_VAR 0 1
84863: PPUSH
84864: LD_VAR 0 1
84868: PPUSH
84869: CALL_OW 255
84873: PUSH
84874: LD_VAR 0 1
84878: PUSH
84879: LD_VAR 0 2
84883: PUSH
84884: LD_VAR 0 3
84888: PUSH
84889: EMPTY
84890: LIST
84891: LIST
84892: LIST
84893: LIST
84894: PPUSH
84895: CALL_OW 1
84899: ST_TO_ADDR
// UpdateFactoryWaypoints ;
84900: CALL 84909 0 0
// end ;
84904: LD_VAR 0 4
84908: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
84909: LD_INT 0
84911: PPUSH
84912: PPUSH
84913: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
84914: LD_STRING resetFactoryWaypoint();
84916: PPUSH
84917: CALL_OW 559
// if factoryWaypoints then
84921: LD_EXP 120
84925: IFFALSE 85051
// begin list := PrepareArray ( factoryWaypoints ) ;
84927: LD_ADDR_VAR 0 3
84931: PUSH
84932: LD_EXP 120
84936: PPUSH
84937: CALL 70161 0 1
84941: ST_TO_ADDR
// for i := 1 to list do
84942: LD_ADDR_VAR 0 2
84946: PUSH
84947: DOUBLE
84948: LD_INT 1
84950: DEC
84951: ST_TO_ADDR
84952: LD_VAR 0 3
84956: PUSH
84957: FOR_TO
84958: IFFALSE 85049
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
84960: LD_STRING setFactoryWaypointXY(
84962: PUSH
84963: LD_VAR 0 3
84967: PUSH
84968: LD_VAR 0 2
84972: ARRAY
84973: PUSH
84974: LD_INT 1
84976: ARRAY
84977: STR
84978: PUSH
84979: LD_STRING ,
84981: STR
84982: PUSH
84983: LD_VAR 0 3
84987: PUSH
84988: LD_VAR 0 2
84992: ARRAY
84993: PUSH
84994: LD_INT 2
84996: ARRAY
84997: STR
84998: PUSH
84999: LD_STRING ,
85001: STR
85002: PUSH
85003: LD_VAR 0 3
85007: PUSH
85008: LD_VAR 0 2
85012: ARRAY
85013: PUSH
85014: LD_INT 3
85016: ARRAY
85017: STR
85018: PUSH
85019: LD_STRING ,
85021: STR
85022: PUSH
85023: LD_VAR 0 3
85027: PUSH
85028: LD_VAR 0 2
85032: ARRAY
85033: PUSH
85034: LD_INT 4
85036: ARRAY
85037: STR
85038: PUSH
85039: LD_STRING )
85041: STR
85042: PPUSH
85043: CALL_OW 559
85047: GO 84957
85049: POP
85050: POP
// end ; end ;
85051: LD_VAR 0 1
85055: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
85056: LD_INT 0
85058: PPUSH
// if HexInfo ( x , y ) = warehouse then
85059: LD_VAR 0 2
85063: PPUSH
85064: LD_VAR 0 3
85068: PPUSH
85069: CALL_OW 428
85073: PUSH
85074: LD_VAR 0 1
85078: EQUAL
85079: IFFALSE 85106
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
85081: LD_ADDR_EXP 121
85085: PUSH
85086: LD_EXP 121
85090: PPUSH
85091: LD_VAR 0 1
85095: PPUSH
85096: LD_INT 0
85098: PPUSH
85099: CALL_OW 1
85103: ST_TO_ADDR
85104: GO 85157
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
85106: LD_ADDR_EXP 121
85110: PUSH
85111: LD_EXP 121
85115: PPUSH
85116: LD_VAR 0 1
85120: PPUSH
85121: LD_VAR 0 1
85125: PPUSH
85126: CALL_OW 255
85130: PUSH
85131: LD_VAR 0 1
85135: PUSH
85136: LD_VAR 0 2
85140: PUSH
85141: LD_VAR 0 3
85145: PUSH
85146: EMPTY
85147: LIST
85148: LIST
85149: LIST
85150: LIST
85151: PPUSH
85152: CALL_OW 1
85156: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
85157: CALL 85166 0 0
// end ;
85161: LD_VAR 0 4
85165: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
85166: LD_INT 0
85168: PPUSH
85169: PPUSH
85170: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
85171: LD_STRING resetWarehouseGatheringPoints();
85173: PPUSH
85174: CALL_OW 559
// if warehouseGatheringPoints then
85178: LD_EXP 121
85182: IFFALSE 85308
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
85184: LD_ADDR_VAR 0 3
85188: PUSH
85189: LD_EXP 121
85193: PPUSH
85194: CALL 70161 0 1
85198: ST_TO_ADDR
// for i := 1 to list do
85199: LD_ADDR_VAR 0 2
85203: PUSH
85204: DOUBLE
85205: LD_INT 1
85207: DEC
85208: ST_TO_ADDR
85209: LD_VAR 0 3
85213: PUSH
85214: FOR_TO
85215: IFFALSE 85306
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
85217: LD_STRING setWarehouseGatheringPointXY(
85219: PUSH
85220: LD_VAR 0 3
85224: PUSH
85225: LD_VAR 0 2
85229: ARRAY
85230: PUSH
85231: LD_INT 1
85233: ARRAY
85234: STR
85235: PUSH
85236: LD_STRING ,
85238: STR
85239: PUSH
85240: LD_VAR 0 3
85244: PUSH
85245: LD_VAR 0 2
85249: ARRAY
85250: PUSH
85251: LD_INT 2
85253: ARRAY
85254: STR
85255: PUSH
85256: LD_STRING ,
85258: STR
85259: PUSH
85260: LD_VAR 0 3
85264: PUSH
85265: LD_VAR 0 2
85269: ARRAY
85270: PUSH
85271: LD_INT 3
85273: ARRAY
85274: STR
85275: PUSH
85276: LD_STRING ,
85278: STR
85279: PUSH
85280: LD_VAR 0 3
85284: PUSH
85285: LD_VAR 0 2
85289: ARRAY
85290: PUSH
85291: LD_INT 4
85293: ARRAY
85294: STR
85295: PUSH
85296: LD_STRING )
85298: STR
85299: PPUSH
85300: CALL_OW 559
85304: GO 85214
85306: POP
85307: POP
// end ; end ;
85308: LD_VAR 0 1
85312: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
85313: LD_EXP 121
85317: IFFALSE 86002
85319: GO 85321
85321: DISABLE
85322: LD_INT 0
85324: PPUSH
85325: PPUSH
85326: PPUSH
85327: PPUSH
85328: PPUSH
85329: PPUSH
85330: PPUSH
85331: PPUSH
85332: PPUSH
// begin enable ;
85333: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
85334: LD_ADDR_VAR 0 3
85338: PUSH
85339: LD_EXP 121
85343: PPUSH
85344: CALL 70161 0 1
85348: ST_TO_ADDR
// if not list then
85349: LD_VAR 0 3
85353: NOT
85354: IFFALSE 85358
// exit ;
85356: GO 86002
// for i := 1 to list do
85358: LD_ADDR_VAR 0 1
85362: PUSH
85363: DOUBLE
85364: LD_INT 1
85366: DEC
85367: ST_TO_ADDR
85368: LD_VAR 0 3
85372: PUSH
85373: FOR_TO
85374: IFFALSE 86000
// begin depot := list [ i ] [ 2 ] ;
85376: LD_ADDR_VAR 0 8
85380: PUSH
85381: LD_VAR 0 3
85385: PUSH
85386: LD_VAR 0 1
85390: ARRAY
85391: PUSH
85392: LD_INT 2
85394: ARRAY
85395: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
85396: LD_ADDR_VAR 0 5
85400: PUSH
85401: LD_VAR 0 3
85405: PUSH
85406: LD_VAR 0 1
85410: ARRAY
85411: PUSH
85412: LD_INT 1
85414: ARRAY
85415: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
85416: LD_VAR 0 8
85420: PPUSH
85421: CALL_OW 301
85425: PUSH
85426: LD_VAR 0 5
85430: PUSH
85431: LD_VAR 0 8
85435: PPUSH
85436: CALL_OW 255
85440: NONEQUAL
85441: OR
85442: IFFALSE 85471
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
85444: LD_ADDR_EXP 121
85448: PUSH
85449: LD_EXP 121
85453: PPUSH
85454: LD_VAR 0 8
85458: PPUSH
85459: LD_INT 0
85461: PPUSH
85462: CALL_OW 1
85466: ST_TO_ADDR
// exit ;
85467: POP
85468: POP
85469: GO 86002
// end ; x := list [ i ] [ 3 ] ;
85471: LD_ADDR_VAR 0 6
85475: PUSH
85476: LD_VAR 0 3
85480: PUSH
85481: LD_VAR 0 1
85485: ARRAY
85486: PUSH
85487: LD_INT 3
85489: ARRAY
85490: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
85491: LD_ADDR_VAR 0 7
85495: PUSH
85496: LD_VAR 0 3
85500: PUSH
85501: LD_VAR 0 1
85505: ARRAY
85506: PUSH
85507: LD_INT 4
85509: ARRAY
85510: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
85511: LD_ADDR_VAR 0 9
85515: PUSH
85516: LD_VAR 0 6
85520: PPUSH
85521: LD_VAR 0 7
85525: PPUSH
85526: LD_INT 16
85528: PPUSH
85529: CALL 68749 0 3
85533: ST_TO_ADDR
// if not cratesNearbyPoint then
85534: LD_VAR 0 9
85538: NOT
85539: IFFALSE 85545
// exit ;
85541: POP
85542: POP
85543: GO 86002
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
85545: LD_ADDR_VAR 0 4
85549: PUSH
85550: LD_INT 22
85552: PUSH
85553: LD_VAR 0 5
85557: PUSH
85558: EMPTY
85559: LIST
85560: LIST
85561: PUSH
85562: LD_INT 3
85564: PUSH
85565: LD_INT 60
85567: PUSH
85568: EMPTY
85569: LIST
85570: PUSH
85571: EMPTY
85572: LIST
85573: LIST
85574: PUSH
85575: LD_INT 91
85577: PUSH
85578: LD_VAR 0 8
85582: PUSH
85583: LD_INT 6
85585: PUSH
85586: EMPTY
85587: LIST
85588: LIST
85589: LIST
85590: PUSH
85591: LD_INT 2
85593: PUSH
85594: LD_INT 25
85596: PUSH
85597: LD_INT 2
85599: PUSH
85600: EMPTY
85601: LIST
85602: LIST
85603: PUSH
85604: LD_INT 25
85606: PUSH
85607: LD_INT 16
85609: PUSH
85610: EMPTY
85611: LIST
85612: LIST
85613: PUSH
85614: EMPTY
85615: LIST
85616: LIST
85617: LIST
85618: PUSH
85619: EMPTY
85620: LIST
85621: LIST
85622: LIST
85623: LIST
85624: PPUSH
85625: CALL_OW 69
85629: PUSH
85630: LD_VAR 0 8
85634: PPUSH
85635: CALL_OW 313
85639: PPUSH
85640: LD_INT 3
85642: PUSH
85643: LD_INT 60
85645: PUSH
85646: EMPTY
85647: LIST
85648: PUSH
85649: EMPTY
85650: LIST
85651: LIST
85652: PUSH
85653: LD_INT 2
85655: PUSH
85656: LD_INT 25
85658: PUSH
85659: LD_INT 2
85661: PUSH
85662: EMPTY
85663: LIST
85664: LIST
85665: PUSH
85666: LD_INT 25
85668: PUSH
85669: LD_INT 16
85671: PUSH
85672: EMPTY
85673: LIST
85674: LIST
85675: PUSH
85676: EMPTY
85677: LIST
85678: LIST
85679: LIST
85680: PUSH
85681: EMPTY
85682: LIST
85683: LIST
85684: PPUSH
85685: CALL_OW 72
85689: UNION
85690: ST_TO_ADDR
// if tmp then
85691: LD_VAR 0 4
85695: IFFALSE 85775
// begin tmp := ShrinkArray ( tmp , 3 ) ;
85697: LD_ADDR_VAR 0 4
85701: PUSH
85702: LD_VAR 0 4
85706: PPUSH
85707: LD_INT 3
85709: PPUSH
85710: CALL 66718 0 2
85714: ST_TO_ADDR
// for j in tmp do
85715: LD_ADDR_VAR 0 2
85719: PUSH
85720: LD_VAR 0 4
85724: PUSH
85725: FOR_IN
85726: IFFALSE 85769
// begin if IsInUnit ( j ) then
85728: LD_VAR 0 2
85732: PPUSH
85733: CALL_OW 310
85737: IFFALSE 85748
// ComExit ( j ) ;
85739: LD_VAR 0 2
85743: PPUSH
85744: CALL 66801 0 1
// AddComCollect ( j , x , y ) ;
85748: LD_VAR 0 2
85752: PPUSH
85753: LD_VAR 0 6
85757: PPUSH
85758: LD_VAR 0 7
85762: PPUSH
85763: CALL_OW 177
// end ;
85767: GO 85725
85769: POP
85770: POP
// exit ;
85771: POP
85772: POP
85773: GO 86002
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
85775: LD_ADDR_VAR 0 4
85779: PUSH
85780: LD_INT 22
85782: PUSH
85783: LD_VAR 0 5
85787: PUSH
85788: EMPTY
85789: LIST
85790: LIST
85791: PUSH
85792: LD_INT 91
85794: PUSH
85795: LD_VAR 0 8
85799: PUSH
85800: LD_INT 8
85802: PUSH
85803: EMPTY
85804: LIST
85805: LIST
85806: LIST
85807: PUSH
85808: LD_INT 2
85810: PUSH
85811: LD_INT 34
85813: PUSH
85814: LD_INT 12
85816: PUSH
85817: EMPTY
85818: LIST
85819: LIST
85820: PUSH
85821: LD_INT 34
85823: PUSH
85824: LD_INT 51
85826: PUSH
85827: EMPTY
85828: LIST
85829: LIST
85830: PUSH
85831: LD_INT 34
85833: PUSH
85834: LD_INT 32
85836: PUSH
85837: EMPTY
85838: LIST
85839: LIST
85840: PUSH
85841: LD_INT 34
85843: PUSH
85844: LD_INT 89
85846: PUSH
85847: EMPTY
85848: LIST
85849: LIST
85850: PUSH
85851: EMPTY
85852: LIST
85853: LIST
85854: LIST
85855: LIST
85856: LIST
85857: PUSH
85858: EMPTY
85859: LIST
85860: LIST
85861: LIST
85862: PPUSH
85863: CALL_OW 69
85867: ST_TO_ADDR
// if tmp then
85868: LD_VAR 0 4
85872: IFFALSE 85998
// begin for j in tmp do
85874: LD_ADDR_VAR 0 2
85878: PUSH
85879: LD_VAR 0 4
85883: PUSH
85884: FOR_IN
85885: IFFALSE 85996
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
85887: LD_VAR 0 2
85891: PPUSH
85892: CALL_OW 262
85896: PUSH
85897: LD_INT 3
85899: EQUAL
85900: PUSH
85901: LD_VAR 0 2
85905: PPUSH
85906: CALL_OW 261
85910: PUSH
85911: LD_INT 20
85913: GREATER
85914: OR
85915: PUSH
85916: LD_VAR 0 2
85920: PPUSH
85921: CALL_OW 314
85925: NOT
85926: AND
85927: PUSH
85928: LD_VAR 0 2
85932: PPUSH
85933: CALL_OW 263
85937: PUSH
85938: LD_INT 1
85940: NONEQUAL
85941: PUSH
85942: LD_VAR 0 2
85946: PPUSH
85947: CALL_OW 311
85951: OR
85952: AND
85953: IFFALSE 85994
// begin ComCollect ( j , x , y ) ;
85955: LD_VAR 0 2
85959: PPUSH
85960: LD_VAR 0 6
85964: PPUSH
85965: LD_VAR 0 7
85969: PPUSH
85970: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
85974: LD_VAR 0 2
85978: PPUSH
85979: LD_VAR 0 8
85983: PPUSH
85984: CALL_OW 172
// exit ;
85988: POP
85989: POP
85990: POP
85991: POP
85992: GO 86002
// end ;
85994: GO 85884
85996: POP
85997: POP
// end ; end ;
85998: GO 85373
86000: POP
86001: POP
// end ; end_of_file
86002: PPOPN 9
86004: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
86005: LD_VAR 0 1
86009: PUSH
86010: LD_INT 200
86012: DOUBLE
86013: GREATEREQUAL
86014: IFFALSE 86022
86016: LD_INT 299
86018: DOUBLE
86019: LESSEQUAL
86020: IFTRUE 86024
86022: GO 86056
86024: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
86025: LD_VAR 0 1
86029: PPUSH
86030: LD_VAR 0 2
86034: PPUSH
86035: LD_VAR 0 3
86039: PPUSH
86040: LD_VAR 0 4
86044: PPUSH
86045: LD_VAR 0 5
86049: PPUSH
86050: CALL 86544 0 5
86054: GO 86133
86056: LD_INT 300
86058: DOUBLE
86059: GREATEREQUAL
86060: IFFALSE 86068
86062: LD_INT 399
86064: DOUBLE
86065: LESSEQUAL
86066: IFTRUE 86070
86068: GO 86132
86070: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
86071: LD_VAR 0 1
86075: PPUSH
86076: LD_VAR 0 2
86080: PPUSH
86081: LD_VAR 0 3
86085: PPUSH
86086: LD_VAR 0 4
86090: PPUSH
86091: LD_VAR 0 5
86095: PPUSH
86096: LD_VAR 0 6
86100: PPUSH
86101: LD_VAR 0 7
86105: PPUSH
86106: LD_VAR 0 8
86110: PPUSH
86111: LD_VAR 0 9
86115: PPUSH
86116: LD_VAR 0 10
86120: PPUSH
86121: LD_VAR 0 11
86125: PPUSH
86126: CALL 82714 0 11
86130: GO 86133
86132: POP
// end ;
86133: PPOPN 11
86135: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
86136: LD_VAR 0 1
86140: PPUSH
86141: LD_VAR 0 2
86145: PPUSH
86146: LD_VAR 0 3
86150: PPUSH
86151: LD_VAR 0 4
86155: PPUSH
86156: LD_VAR 0 5
86160: PPUSH
86161: CALL 86280 0 5
// end ; end_of_file
86165: PPOPN 5
86167: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
86168: LD_INT 0
86170: PPUSH
86171: PPUSH
86172: PPUSH
86173: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
86174: LD_VAR 0 1
86178: PPUSH
86179: CALL_OW 264
86183: PUSH
86184: LD_INT 91
86186: EQUAL
86187: IFFALSE 86259
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
86189: LD_INT 68
86191: PPUSH
86192: LD_VAR 0 1
86196: PPUSH
86197: CALL_OW 255
86201: PPUSH
86202: CALL_OW 321
86206: PUSH
86207: LD_INT 2
86209: EQUAL
86210: IFFALSE 86222
// eff := 70 else
86212: LD_ADDR_VAR 0 4
86216: PUSH
86217: LD_INT 70
86219: ST_TO_ADDR
86220: GO 86230
// eff := 30 ;
86222: LD_ADDR_VAR 0 4
86226: PUSH
86227: LD_INT 30
86229: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
86230: LD_VAR 0 1
86234: PPUSH
86235: CALL_OW 250
86239: PPUSH
86240: LD_VAR 0 1
86244: PPUSH
86245: CALL_OW 251
86249: PPUSH
86250: LD_VAR 0 4
86254: PPUSH
86255: CALL_OW 495
// end ; end ;
86259: LD_VAR 0 2
86263: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
86264: LD_INT 0
86266: PPUSH
// end ;
86267: LD_VAR 0 4
86271: RET
// export function SOS_Command ( cmd ) ; begin
86272: LD_INT 0
86274: PPUSH
// end ;
86275: LD_VAR 0 2
86279: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
86280: LD_INT 0
86282: PPUSH
// end ;
86283: LD_VAR 0 6
86287: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
86288: LD_INT 0
86290: PPUSH
86291: PPUSH
// if not vehicle or not factory then
86292: LD_VAR 0 1
86296: NOT
86297: PUSH
86298: LD_VAR 0 2
86302: NOT
86303: OR
86304: IFFALSE 86308
// exit ;
86306: GO 86539
// if factoryWaypoints >= factory then
86308: LD_EXP 120
86312: PUSH
86313: LD_VAR 0 2
86317: GREATEREQUAL
86318: IFFALSE 86539
// if factoryWaypoints [ factory ] then
86320: LD_EXP 120
86324: PUSH
86325: LD_VAR 0 2
86329: ARRAY
86330: IFFALSE 86539
// begin if GetControl ( vehicle ) = control_manual then
86332: LD_VAR 0 1
86336: PPUSH
86337: CALL_OW 263
86341: PUSH
86342: LD_INT 1
86344: EQUAL
86345: IFFALSE 86426
// begin driver := IsDrivenBy ( vehicle ) ;
86347: LD_ADDR_VAR 0 4
86351: PUSH
86352: LD_VAR 0 1
86356: PPUSH
86357: CALL_OW 311
86361: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
86362: LD_VAR 0 4
86366: PPUSH
86367: LD_EXP 120
86371: PUSH
86372: LD_VAR 0 2
86376: ARRAY
86377: PUSH
86378: LD_INT 3
86380: ARRAY
86381: PPUSH
86382: LD_EXP 120
86386: PUSH
86387: LD_VAR 0 2
86391: ARRAY
86392: PUSH
86393: LD_INT 4
86395: ARRAY
86396: PPUSH
86397: CALL_OW 171
// AddComExitVehicle ( driver ) ;
86401: LD_VAR 0 4
86405: PPUSH
86406: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
86410: LD_VAR 0 4
86414: PPUSH
86415: LD_VAR 0 2
86419: PPUSH
86420: CALL_OW 180
// end else
86424: GO 86539
// if GetControl ( vehicle ) = control_remote then
86426: LD_VAR 0 1
86430: PPUSH
86431: CALL_OW 263
86435: PUSH
86436: LD_INT 2
86438: EQUAL
86439: IFFALSE 86500
// begin wait ( 0 0$2 ) ;
86441: LD_INT 70
86443: PPUSH
86444: CALL_OW 67
// if Connect ( vehicle ) then
86448: LD_VAR 0 1
86452: PPUSH
86453: CALL 37069 0 1
86457: IFFALSE 86498
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
86459: LD_VAR 0 1
86463: PPUSH
86464: LD_EXP 120
86468: PUSH
86469: LD_VAR 0 2
86473: ARRAY
86474: PUSH
86475: LD_INT 3
86477: ARRAY
86478: PPUSH
86479: LD_EXP 120
86483: PUSH
86484: LD_VAR 0 2
86488: ARRAY
86489: PUSH
86490: LD_INT 4
86492: ARRAY
86493: PPUSH
86494: CALL_OW 171
// end else
86498: GO 86539
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
86500: LD_VAR 0 1
86504: PPUSH
86505: LD_EXP 120
86509: PUSH
86510: LD_VAR 0 2
86514: ARRAY
86515: PUSH
86516: LD_INT 3
86518: ARRAY
86519: PPUSH
86520: LD_EXP 120
86524: PUSH
86525: LD_VAR 0 2
86529: ARRAY
86530: PUSH
86531: LD_INT 4
86533: ARRAY
86534: PPUSH
86535: CALL_OW 171
// end ; end ;
86539: LD_VAR 0 3
86543: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
86544: LD_INT 0
86546: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
86547: LD_VAR 0 1
86551: PUSH
86552: LD_INT 250
86554: EQUAL
86555: PUSH
86556: LD_VAR 0 2
86560: PPUSH
86561: CALL_OW 264
86565: PUSH
86566: LD_INT 81
86568: EQUAL
86569: AND
86570: IFFALSE 86591
// MinerPlaceMine ( unit , x , y ) ;
86572: LD_VAR 0 2
86576: PPUSH
86577: LD_VAR 0 4
86581: PPUSH
86582: LD_VAR 0 5
86586: PPUSH
86587: CALL 88976 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
86591: LD_VAR 0 1
86595: PUSH
86596: LD_INT 251
86598: EQUAL
86599: PUSH
86600: LD_VAR 0 2
86604: PPUSH
86605: CALL_OW 264
86609: PUSH
86610: LD_INT 81
86612: EQUAL
86613: AND
86614: IFFALSE 86635
// MinerDetonateMine ( unit , x , y ) ;
86616: LD_VAR 0 2
86620: PPUSH
86621: LD_VAR 0 4
86625: PPUSH
86626: LD_VAR 0 5
86630: PPUSH
86631: CALL 89251 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
86635: LD_VAR 0 1
86639: PUSH
86640: LD_INT 252
86642: EQUAL
86643: PUSH
86644: LD_VAR 0 2
86648: PPUSH
86649: CALL_OW 264
86653: PUSH
86654: LD_INT 81
86656: EQUAL
86657: AND
86658: IFFALSE 86679
// MinerCreateMinefield ( unit , x , y ) ;
86660: LD_VAR 0 2
86664: PPUSH
86665: LD_VAR 0 4
86669: PPUSH
86670: LD_VAR 0 5
86674: PPUSH
86675: CALL 89668 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
86679: LD_VAR 0 1
86683: PUSH
86684: LD_INT 253
86686: EQUAL
86687: PUSH
86688: LD_VAR 0 2
86692: PPUSH
86693: CALL_OW 257
86697: PUSH
86698: LD_INT 5
86700: EQUAL
86701: AND
86702: IFFALSE 86723
// ComBinocular ( unit , x , y ) ;
86704: LD_VAR 0 2
86708: PPUSH
86709: LD_VAR 0 4
86713: PPUSH
86714: LD_VAR 0 5
86718: PPUSH
86719: CALL 90037 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
86723: LD_VAR 0 1
86727: PUSH
86728: LD_INT 254
86730: EQUAL
86731: PUSH
86732: LD_VAR 0 2
86736: PPUSH
86737: CALL_OW 264
86741: PUSH
86742: LD_INT 99
86744: EQUAL
86745: AND
86746: PUSH
86747: LD_VAR 0 3
86751: PPUSH
86752: CALL_OW 263
86756: PUSH
86757: LD_INT 3
86759: EQUAL
86760: AND
86761: IFFALSE 86777
// HackDestroyVehicle ( unit , selectedUnit ) ;
86763: LD_VAR 0 2
86767: PPUSH
86768: LD_VAR 0 3
86772: PPUSH
86773: CALL 88340 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
86777: LD_VAR 0 1
86781: PUSH
86782: LD_INT 255
86784: EQUAL
86785: PUSH
86786: LD_VAR 0 2
86790: PPUSH
86791: CALL_OW 264
86795: PUSH
86796: LD_INT 14
86798: PUSH
86799: LD_INT 53
86801: PUSH
86802: EMPTY
86803: LIST
86804: LIST
86805: IN
86806: AND
86807: PUSH
86808: LD_VAR 0 4
86812: PPUSH
86813: LD_VAR 0 5
86817: PPUSH
86818: CALL_OW 488
86822: AND
86823: IFFALSE 86847
// CutTreeXYR ( unit , x , y , 12 ) ;
86825: LD_VAR 0 2
86829: PPUSH
86830: LD_VAR 0 4
86834: PPUSH
86835: LD_VAR 0 5
86839: PPUSH
86840: LD_INT 12
86842: PPUSH
86843: CALL 86910 0 4
// if cmd = 256 then
86847: LD_VAR 0 1
86851: PUSH
86852: LD_INT 256
86854: EQUAL
86855: IFFALSE 86876
// SetFactoryWaypoint ( unit , x , y ) ;
86857: LD_VAR 0 2
86861: PPUSH
86862: LD_VAR 0 4
86866: PPUSH
86867: LD_VAR 0 5
86871: PPUSH
86872: CALL 84694 0 3
// if cmd = 257 then
86876: LD_VAR 0 1
86880: PUSH
86881: LD_INT 257
86883: EQUAL
86884: IFFALSE 86905
// SetWarehouseGatheringPoint ( unit , x , y ) ;
86886: LD_VAR 0 2
86890: PPUSH
86891: LD_VAR 0 4
86895: PPUSH
86896: LD_VAR 0 5
86900: PPUSH
86901: CALL 85056 0 3
// end ;
86905: LD_VAR 0 6
86909: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
86910: LD_INT 0
86912: PPUSH
86913: PPUSH
86914: PPUSH
86915: PPUSH
86916: PPUSH
86917: PPUSH
86918: PPUSH
86919: PPUSH
86920: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
86921: LD_VAR 0 1
86925: NOT
86926: PUSH
86927: LD_VAR 0 2
86931: PPUSH
86932: LD_VAR 0 3
86936: PPUSH
86937: CALL_OW 488
86941: NOT
86942: OR
86943: PUSH
86944: LD_VAR 0 4
86948: NOT
86949: OR
86950: IFFALSE 86954
// exit ;
86952: GO 87294
// list := [ ] ;
86954: LD_ADDR_VAR 0 13
86958: PUSH
86959: EMPTY
86960: ST_TO_ADDR
// if x - r < 0 then
86961: LD_VAR 0 2
86965: PUSH
86966: LD_VAR 0 4
86970: MINUS
86971: PUSH
86972: LD_INT 0
86974: LESS
86975: IFFALSE 86987
// min_x := 0 else
86977: LD_ADDR_VAR 0 7
86981: PUSH
86982: LD_INT 0
86984: ST_TO_ADDR
86985: GO 87003
// min_x := x - r ;
86987: LD_ADDR_VAR 0 7
86991: PUSH
86992: LD_VAR 0 2
86996: PUSH
86997: LD_VAR 0 4
87001: MINUS
87002: ST_TO_ADDR
// if y - r < 0 then
87003: LD_VAR 0 3
87007: PUSH
87008: LD_VAR 0 4
87012: MINUS
87013: PUSH
87014: LD_INT 0
87016: LESS
87017: IFFALSE 87029
// min_y := 0 else
87019: LD_ADDR_VAR 0 8
87023: PUSH
87024: LD_INT 0
87026: ST_TO_ADDR
87027: GO 87045
// min_y := y - r ;
87029: LD_ADDR_VAR 0 8
87033: PUSH
87034: LD_VAR 0 3
87038: PUSH
87039: LD_VAR 0 4
87043: MINUS
87044: ST_TO_ADDR
// max_x := x + r ;
87045: LD_ADDR_VAR 0 9
87049: PUSH
87050: LD_VAR 0 2
87054: PUSH
87055: LD_VAR 0 4
87059: PLUS
87060: ST_TO_ADDR
// max_y := y + r ;
87061: LD_ADDR_VAR 0 10
87065: PUSH
87066: LD_VAR 0 3
87070: PUSH
87071: LD_VAR 0 4
87075: PLUS
87076: ST_TO_ADDR
// for _x = min_x to max_x do
87077: LD_ADDR_VAR 0 11
87081: PUSH
87082: DOUBLE
87083: LD_VAR 0 7
87087: DEC
87088: ST_TO_ADDR
87089: LD_VAR 0 9
87093: PUSH
87094: FOR_TO
87095: IFFALSE 87212
// for _y = min_y to max_y do
87097: LD_ADDR_VAR 0 12
87101: PUSH
87102: DOUBLE
87103: LD_VAR 0 8
87107: DEC
87108: ST_TO_ADDR
87109: LD_VAR 0 10
87113: PUSH
87114: FOR_TO
87115: IFFALSE 87208
// begin if not ValidHex ( _x , _y ) then
87117: LD_VAR 0 11
87121: PPUSH
87122: LD_VAR 0 12
87126: PPUSH
87127: CALL_OW 488
87131: NOT
87132: IFFALSE 87136
// continue ;
87134: GO 87114
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
87136: LD_VAR 0 11
87140: PPUSH
87141: LD_VAR 0 12
87145: PPUSH
87146: CALL_OW 351
87150: PUSH
87151: LD_VAR 0 11
87155: PPUSH
87156: LD_VAR 0 12
87160: PPUSH
87161: CALL_OW 554
87165: AND
87166: IFFALSE 87206
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
87168: LD_ADDR_VAR 0 13
87172: PUSH
87173: LD_VAR 0 13
87177: PPUSH
87178: LD_VAR 0 13
87182: PUSH
87183: LD_INT 1
87185: PLUS
87186: PPUSH
87187: LD_VAR 0 11
87191: PUSH
87192: LD_VAR 0 12
87196: PUSH
87197: EMPTY
87198: LIST
87199: LIST
87200: PPUSH
87201: CALL_OW 2
87205: ST_TO_ADDR
// end ;
87206: GO 87114
87208: POP
87209: POP
87210: GO 87094
87212: POP
87213: POP
// if not list then
87214: LD_VAR 0 13
87218: NOT
87219: IFFALSE 87223
// exit ;
87221: GO 87294
// for i in list do
87223: LD_ADDR_VAR 0 6
87227: PUSH
87228: LD_VAR 0 13
87232: PUSH
87233: FOR_IN
87234: IFFALSE 87292
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
87236: LD_VAR 0 1
87240: PPUSH
87241: LD_STRING M
87243: PUSH
87244: LD_VAR 0 6
87248: PUSH
87249: LD_INT 1
87251: ARRAY
87252: PUSH
87253: LD_VAR 0 6
87257: PUSH
87258: LD_INT 2
87260: ARRAY
87261: PUSH
87262: LD_INT 0
87264: PUSH
87265: LD_INT 0
87267: PUSH
87268: LD_INT 0
87270: PUSH
87271: LD_INT 0
87273: PUSH
87274: EMPTY
87275: LIST
87276: LIST
87277: LIST
87278: LIST
87279: LIST
87280: LIST
87281: LIST
87282: PUSH
87283: EMPTY
87284: LIST
87285: PPUSH
87286: CALL_OW 447
87290: GO 87233
87292: POP
87293: POP
// end ;
87294: LD_VAR 0 5
87298: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
87299: LD_EXP 123
87303: NOT
87304: IFFALSE 87354
87306: GO 87308
87308: DISABLE
// begin initHack := true ;
87309: LD_ADDR_EXP 123
87313: PUSH
87314: LD_INT 1
87316: ST_TO_ADDR
// hackTanks := [ ] ;
87317: LD_ADDR_EXP 124
87321: PUSH
87322: EMPTY
87323: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
87324: LD_ADDR_EXP 125
87328: PUSH
87329: EMPTY
87330: ST_TO_ADDR
// hackLimit := 3 ;
87331: LD_ADDR_EXP 126
87335: PUSH
87336: LD_INT 3
87338: ST_TO_ADDR
// hackDist := 12 ;
87339: LD_ADDR_EXP 127
87343: PUSH
87344: LD_INT 12
87346: ST_TO_ADDR
// hackCounter := [ ] ;
87347: LD_ADDR_EXP 128
87351: PUSH
87352: EMPTY
87353: ST_TO_ADDR
// end ;
87354: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
87355: LD_EXP 123
87359: PUSH
87360: LD_INT 34
87362: PUSH
87363: LD_INT 99
87365: PUSH
87366: EMPTY
87367: LIST
87368: LIST
87369: PPUSH
87370: CALL_OW 69
87374: AND
87375: IFFALSE 87628
87377: GO 87379
87379: DISABLE
87380: LD_INT 0
87382: PPUSH
87383: PPUSH
// begin enable ;
87384: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
87385: LD_ADDR_VAR 0 1
87389: PUSH
87390: LD_INT 34
87392: PUSH
87393: LD_INT 99
87395: PUSH
87396: EMPTY
87397: LIST
87398: LIST
87399: PPUSH
87400: CALL_OW 69
87404: PUSH
87405: FOR_IN
87406: IFFALSE 87626
// begin if not i in hackTanks then
87408: LD_VAR 0 1
87412: PUSH
87413: LD_EXP 124
87417: IN
87418: NOT
87419: IFFALSE 87502
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
87421: LD_ADDR_EXP 124
87425: PUSH
87426: LD_EXP 124
87430: PPUSH
87431: LD_EXP 124
87435: PUSH
87436: LD_INT 1
87438: PLUS
87439: PPUSH
87440: LD_VAR 0 1
87444: PPUSH
87445: CALL_OW 1
87449: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
87450: LD_ADDR_EXP 125
87454: PUSH
87455: LD_EXP 125
87459: PPUSH
87460: LD_EXP 125
87464: PUSH
87465: LD_INT 1
87467: PLUS
87468: PPUSH
87469: EMPTY
87470: PPUSH
87471: CALL_OW 1
87475: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
87476: LD_ADDR_EXP 128
87480: PUSH
87481: LD_EXP 128
87485: PPUSH
87486: LD_EXP 128
87490: PUSH
87491: LD_INT 1
87493: PLUS
87494: PPUSH
87495: EMPTY
87496: PPUSH
87497: CALL_OW 1
87501: ST_TO_ADDR
// end ; if not IsOk ( i ) then
87502: LD_VAR 0 1
87506: PPUSH
87507: CALL_OW 302
87511: NOT
87512: IFFALSE 87525
// begin HackUnlinkAll ( i ) ;
87514: LD_VAR 0 1
87518: PPUSH
87519: CALL 87631 0 1
// continue ;
87523: GO 87405
// end ; HackCheckCapturedStatus ( i ) ;
87525: LD_VAR 0 1
87529: PPUSH
87530: CALL 88074 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
87534: LD_ADDR_VAR 0 2
87538: PUSH
87539: LD_INT 81
87541: PUSH
87542: LD_VAR 0 1
87546: PPUSH
87547: CALL_OW 255
87551: PUSH
87552: EMPTY
87553: LIST
87554: LIST
87555: PUSH
87556: LD_INT 33
87558: PUSH
87559: LD_INT 3
87561: PUSH
87562: EMPTY
87563: LIST
87564: LIST
87565: PUSH
87566: LD_INT 91
87568: PUSH
87569: LD_VAR 0 1
87573: PUSH
87574: LD_EXP 127
87578: PUSH
87579: EMPTY
87580: LIST
87581: LIST
87582: LIST
87583: PUSH
87584: LD_INT 50
87586: PUSH
87587: EMPTY
87588: LIST
87589: PUSH
87590: EMPTY
87591: LIST
87592: LIST
87593: LIST
87594: LIST
87595: PPUSH
87596: CALL_OW 69
87600: ST_TO_ADDR
// if not tmp then
87601: LD_VAR 0 2
87605: NOT
87606: IFFALSE 87610
// continue ;
87608: GO 87405
// HackLink ( i , tmp ) ;
87610: LD_VAR 0 1
87614: PPUSH
87615: LD_VAR 0 2
87619: PPUSH
87620: CALL 87767 0 2
// end ;
87624: GO 87405
87626: POP
87627: POP
// end ;
87628: PPOPN 2
87630: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
87631: LD_INT 0
87633: PPUSH
87634: PPUSH
87635: PPUSH
// if not hack in hackTanks then
87636: LD_VAR 0 1
87640: PUSH
87641: LD_EXP 124
87645: IN
87646: NOT
87647: IFFALSE 87651
// exit ;
87649: GO 87762
// index := GetElementIndex ( hackTanks , hack ) ;
87651: LD_ADDR_VAR 0 4
87655: PUSH
87656: LD_EXP 124
87660: PPUSH
87661: LD_VAR 0 1
87665: PPUSH
87666: CALL 33885 0 2
87670: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
87671: LD_EXP 125
87675: PUSH
87676: LD_VAR 0 4
87680: ARRAY
87681: IFFALSE 87762
// begin for i in hackTanksCaptured [ index ] do
87683: LD_ADDR_VAR 0 3
87687: PUSH
87688: LD_EXP 125
87692: PUSH
87693: LD_VAR 0 4
87697: ARRAY
87698: PUSH
87699: FOR_IN
87700: IFFALSE 87726
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
87702: LD_VAR 0 3
87706: PUSH
87707: LD_INT 1
87709: ARRAY
87710: PPUSH
87711: LD_VAR 0 3
87715: PUSH
87716: LD_INT 2
87718: ARRAY
87719: PPUSH
87720: CALL_OW 235
87724: GO 87699
87726: POP
87727: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
87728: LD_ADDR_EXP 125
87732: PUSH
87733: LD_EXP 125
87737: PPUSH
87738: LD_VAR 0 4
87742: PPUSH
87743: EMPTY
87744: PPUSH
87745: CALL_OW 1
87749: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
87750: LD_VAR 0 1
87754: PPUSH
87755: LD_INT 0
87757: PPUSH
87758: CALL_OW 505
// end ; end ;
87762: LD_VAR 0 2
87766: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
87767: LD_INT 0
87769: PPUSH
87770: PPUSH
87771: PPUSH
// if not hack in hackTanks or not vehicles then
87772: LD_VAR 0 1
87776: PUSH
87777: LD_EXP 124
87781: IN
87782: NOT
87783: PUSH
87784: LD_VAR 0 2
87788: NOT
87789: OR
87790: IFFALSE 87794
// exit ;
87792: GO 88069
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
87794: LD_ADDR_VAR 0 2
87798: PUSH
87799: LD_VAR 0 1
87803: PPUSH
87804: LD_VAR 0 2
87808: PPUSH
87809: LD_INT 1
87811: PPUSH
87812: LD_INT 1
87814: PPUSH
87815: CALL 34535 0 4
87819: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
87820: LD_ADDR_VAR 0 5
87824: PUSH
87825: LD_EXP 124
87829: PPUSH
87830: LD_VAR 0 1
87834: PPUSH
87835: CALL 33885 0 2
87839: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
87840: LD_EXP 125
87844: PUSH
87845: LD_VAR 0 5
87849: ARRAY
87850: PUSH
87851: LD_EXP 126
87855: LESS
87856: IFFALSE 88045
// begin for i := 1 to vehicles do
87858: LD_ADDR_VAR 0 4
87862: PUSH
87863: DOUBLE
87864: LD_INT 1
87866: DEC
87867: ST_TO_ADDR
87868: LD_VAR 0 2
87872: PUSH
87873: FOR_TO
87874: IFFALSE 88043
// begin if hackTanksCaptured [ index ] = hackLimit then
87876: LD_EXP 125
87880: PUSH
87881: LD_VAR 0 5
87885: ARRAY
87886: PUSH
87887: LD_EXP 126
87891: EQUAL
87892: IFFALSE 87896
// break ;
87894: GO 88043
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
87896: LD_ADDR_EXP 128
87900: PUSH
87901: LD_EXP 128
87905: PPUSH
87906: LD_VAR 0 5
87910: PPUSH
87911: LD_EXP 128
87915: PUSH
87916: LD_VAR 0 5
87920: ARRAY
87921: PUSH
87922: LD_INT 1
87924: PLUS
87925: PPUSH
87926: CALL_OW 1
87930: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
87931: LD_ADDR_EXP 125
87935: PUSH
87936: LD_EXP 125
87940: PPUSH
87941: LD_VAR 0 5
87945: PUSH
87946: LD_EXP 125
87950: PUSH
87951: LD_VAR 0 5
87955: ARRAY
87956: PUSH
87957: LD_INT 1
87959: PLUS
87960: PUSH
87961: EMPTY
87962: LIST
87963: LIST
87964: PPUSH
87965: LD_VAR 0 2
87969: PUSH
87970: LD_VAR 0 4
87974: ARRAY
87975: PUSH
87976: LD_VAR 0 2
87980: PUSH
87981: LD_VAR 0 4
87985: ARRAY
87986: PPUSH
87987: CALL_OW 255
87991: PUSH
87992: EMPTY
87993: LIST
87994: LIST
87995: PPUSH
87996: CALL 34100 0 3
88000: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
88001: LD_VAR 0 2
88005: PUSH
88006: LD_VAR 0 4
88010: ARRAY
88011: PPUSH
88012: LD_VAR 0 1
88016: PPUSH
88017: CALL_OW 255
88021: PPUSH
88022: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
88026: LD_VAR 0 2
88030: PUSH
88031: LD_VAR 0 4
88035: ARRAY
88036: PPUSH
88037: CALL_OW 141
// end ;
88041: GO 87873
88043: POP
88044: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
88045: LD_VAR 0 1
88049: PPUSH
88050: LD_EXP 125
88054: PUSH
88055: LD_VAR 0 5
88059: ARRAY
88060: PUSH
88061: LD_INT 0
88063: PLUS
88064: PPUSH
88065: CALL_OW 505
// end ;
88069: LD_VAR 0 3
88073: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
88074: LD_INT 0
88076: PPUSH
88077: PPUSH
88078: PPUSH
88079: PPUSH
// if not hack in hackTanks then
88080: LD_VAR 0 1
88084: PUSH
88085: LD_EXP 124
88089: IN
88090: NOT
88091: IFFALSE 88095
// exit ;
88093: GO 88335
// index := GetElementIndex ( hackTanks , hack ) ;
88095: LD_ADDR_VAR 0 4
88099: PUSH
88100: LD_EXP 124
88104: PPUSH
88105: LD_VAR 0 1
88109: PPUSH
88110: CALL 33885 0 2
88114: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
88115: LD_ADDR_VAR 0 3
88119: PUSH
88120: DOUBLE
88121: LD_EXP 125
88125: PUSH
88126: LD_VAR 0 4
88130: ARRAY
88131: INC
88132: ST_TO_ADDR
88133: LD_INT 1
88135: PUSH
88136: FOR_DOWNTO
88137: IFFALSE 88309
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
88139: LD_ADDR_VAR 0 5
88143: PUSH
88144: LD_EXP 125
88148: PUSH
88149: LD_VAR 0 4
88153: ARRAY
88154: PUSH
88155: LD_VAR 0 3
88159: ARRAY
88160: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
88161: LD_VAR 0 5
88165: PUSH
88166: LD_INT 1
88168: ARRAY
88169: PPUSH
88170: CALL_OW 302
88174: NOT
88175: PUSH
88176: LD_VAR 0 5
88180: PUSH
88181: LD_INT 1
88183: ARRAY
88184: PPUSH
88185: CALL_OW 255
88189: PUSH
88190: LD_VAR 0 1
88194: PPUSH
88195: CALL_OW 255
88199: NONEQUAL
88200: OR
88201: IFFALSE 88307
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
88203: LD_VAR 0 5
88207: PUSH
88208: LD_INT 1
88210: ARRAY
88211: PPUSH
88212: CALL_OW 305
88216: PUSH
88217: LD_VAR 0 5
88221: PUSH
88222: LD_INT 1
88224: ARRAY
88225: PPUSH
88226: CALL_OW 255
88230: PUSH
88231: LD_VAR 0 1
88235: PPUSH
88236: CALL_OW 255
88240: EQUAL
88241: AND
88242: IFFALSE 88266
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
88244: LD_VAR 0 5
88248: PUSH
88249: LD_INT 1
88251: ARRAY
88252: PPUSH
88253: LD_VAR 0 5
88257: PUSH
88258: LD_INT 2
88260: ARRAY
88261: PPUSH
88262: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
88266: LD_ADDR_EXP 125
88270: PUSH
88271: LD_EXP 125
88275: PPUSH
88276: LD_VAR 0 4
88280: PPUSH
88281: LD_EXP 125
88285: PUSH
88286: LD_VAR 0 4
88290: ARRAY
88291: PPUSH
88292: LD_VAR 0 3
88296: PPUSH
88297: CALL_OW 3
88301: PPUSH
88302: CALL_OW 1
88306: ST_TO_ADDR
// end ; end ;
88307: GO 88136
88309: POP
88310: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
88311: LD_VAR 0 1
88315: PPUSH
88316: LD_EXP 125
88320: PUSH
88321: LD_VAR 0 4
88325: ARRAY
88326: PUSH
88327: LD_INT 0
88329: PLUS
88330: PPUSH
88331: CALL_OW 505
// end ;
88335: LD_VAR 0 2
88339: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
88340: LD_INT 0
88342: PPUSH
88343: PPUSH
88344: PPUSH
88345: PPUSH
// if not hack in hackTanks then
88346: LD_VAR 0 1
88350: PUSH
88351: LD_EXP 124
88355: IN
88356: NOT
88357: IFFALSE 88361
// exit ;
88359: GO 88446
// index := GetElementIndex ( hackTanks , hack ) ;
88361: LD_ADDR_VAR 0 5
88365: PUSH
88366: LD_EXP 124
88370: PPUSH
88371: LD_VAR 0 1
88375: PPUSH
88376: CALL 33885 0 2
88380: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
88381: LD_ADDR_VAR 0 4
88385: PUSH
88386: DOUBLE
88387: LD_INT 1
88389: DEC
88390: ST_TO_ADDR
88391: LD_EXP 125
88395: PUSH
88396: LD_VAR 0 5
88400: ARRAY
88401: PUSH
88402: FOR_TO
88403: IFFALSE 88444
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
88405: LD_EXP 125
88409: PUSH
88410: LD_VAR 0 5
88414: ARRAY
88415: PUSH
88416: LD_VAR 0 4
88420: ARRAY
88421: PUSH
88422: LD_INT 1
88424: ARRAY
88425: PUSH
88426: LD_VAR 0 2
88430: EQUAL
88431: IFFALSE 88442
// KillUnit ( vehicle ) ;
88433: LD_VAR 0 2
88437: PPUSH
88438: CALL_OW 66
88442: GO 88402
88444: POP
88445: POP
// end ;
88446: LD_VAR 0 3
88450: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
88451: LD_EXP 129
88455: NOT
88456: IFFALSE 88491
88458: GO 88460
88460: DISABLE
// begin initMiner := true ;
88461: LD_ADDR_EXP 129
88465: PUSH
88466: LD_INT 1
88468: ST_TO_ADDR
// minersList := [ ] ;
88469: LD_ADDR_EXP 130
88473: PUSH
88474: EMPTY
88475: ST_TO_ADDR
// minerMinesList := [ ] ;
88476: LD_ADDR_EXP 131
88480: PUSH
88481: EMPTY
88482: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
88483: LD_ADDR_EXP 132
88487: PUSH
88488: LD_INT 5
88490: ST_TO_ADDR
// end ;
88491: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
88492: LD_EXP 129
88496: PUSH
88497: LD_INT 34
88499: PUSH
88500: LD_INT 81
88502: PUSH
88503: EMPTY
88504: LIST
88505: LIST
88506: PPUSH
88507: CALL_OW 69
88511: AND
88512: IFFALSE 88973
88514: GO 88516
88516: DISABLE
88517: LD_INT 0
88519: PPUSH
88520: PPUSH
88521: PPUSH
88522: PPUSH
// begin enable ;
88523: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
88524: LD_ADDR_VAR 0 1
88528: PUSH
88529: LD_INT 34
88531: PUSH
88532: LD_INT 81
88534: PUSH
88535: EMPTY
88536: LIST
88537: LIST
88538: PPUSH
88539: CALL_OW 69
88543: PUSH
88544: FOR_IN
88545: IFFALSE 88617
// begin if not i in minersList then
88547: LD_VAR 0 1
88551: PUSH
88552: LD_EXP 130
88556: IN
88557: NOT
88558: IFFALSE 88615
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
88560: LD_ADDR_EXP 130
88564: PUSH
88565: LD_EXP 130
88569: PPUSH
88570: LD_EXP 130
88574: PUSH
88575: LD_INT 1
88577: PLUS
88578: PPUSH
88579: LD_VAR 0 1
88583: PPUSH
88584: CALL_OW 1
88588: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
88589: LD_ADDR_EXP 131
88593: PUSH
88594: LD_EXP 131
88598: PPUSH
88599: LD_EXP 131
88603: PUSH
88604: LD_INT 1
88606: PLUS
88607: PPUSH
88608: EMPTY
88609: PPUSH
88610: CALL_OW 1
88614: ST_TO_ADDR
// end end ;
88615: GO 88544
88617: POP
88618: POP
// for i := minerMinesList downto 1 do
88619: LD_ADDR_VAR 0 1
88623: PUSH
88624: DOUBLE
88625: LD_EXP 131
88629: INC
88630: ST_TO_ADDR
88631: LD_INT 1
88633: PUSH
88634: FOR_DOWNTO
88635: IFFALSE 88971
// begin if IsLive ( minersList [ i ] ) then
88637: LD_EXP 130
88641: PUSH
88642: LD_VAR 0 1
88646: ARRAY
88647: PPUSH
88648: CALL_OW 300
88652: IFFALSE 88680
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
88654: LD_EXP 130
88658: PUSH
88659: LD_VAR 0 1
88663: ARRAY
88664: PPUSH
88665: LD_EXP 131
88669: PUSH
88670: LD_VAR 0 1
88674: ARRAY
88675: PPUSH
88676: CALL_OW 505
// if not minerMinesList [ i ] then
88680: LD_EXP 131
88684: PUSH
88685: LD_VAR 0 1
88689: ARRAY
88690: NOT
88691: IFFALSE 88695
// continue ;
88693: GO 88634
// for j := minerMinesList [ i ] downto 1 do
88695: LD_ADDR_VAR 0 2
88699: PUSH
88700: DOUBLE
88701: LD_EXP 131
88705: PUSH
88706: LD_VAR 0 1
88710: ARRAY
88711: INC
88712: ST_TO_ADDR
88713: LD_INT 1
88715: PUSH
88716: FOR_DOWNTO
88717: IFFALSE 88967
// begin side := GetSide ( minersList [ i ] ) ;
88719: LD_ADDR_VAR 0 3
88723: PUSH
88724: LD_EXP 130
88728: PUSH
88729: LD_VAR 0 1
88733: ARRAY
88734: PPUSH
88735: CALL_OW 255
88739: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
88740: LD_ADDR_VAR 0 4
88744: PUSH
88745: LD_EXP 131
88749: PUSH
88750: LD_VAR 0 1
88754: ARRAY
88755: PUSH
88756: LD_VAR 0 2
88760: ARRAY
88761: PUSH
88762: LD_INT 1
88764: ARRAY
88765: PPUSH
88766: LD_EXP 131
88770: PUSH
88771: LD_VAR 0 1
88775: ARRAY
88776: PUSH
88777: LD_VAR 0 2
88781: ARRAY
88782: PUSH
88783: LD_INT 2
88785: ARRAY
88786: PPUSH
88787: CALL_OW 428
88791: ST_TO_ADDR
// if not tmp then
88792: LD_VAR 0 4
88796: NOT
88797: IFFALSE 88801
// continue ;
88799: GO 88716
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
88801: LD_VAR 0 4
88805: PUSH
88806: LD_INT 81
88808: PUSH
88809: LD_VAR 0 3
88813: PUSH
88814: EMPTY
88815: LIST
88816: LIST
88817: PPUSH
88818: CALL_OW 69
88822: IN
88823: PUSH
88824: LD_EXP 131
88828: PUSH
88829: LD_VAR 0 1
88833: ARRAY
88834: PUSH
88835: LD_VAR 0 2
88839: ARRAY
88840: PUSH
88841: LD_INT 1
88843: ARRAY
88844: PPUSH
88845: LD_EXP 131
88849: PUSH
88850: LD_VAR 0 1
88854: ARRAY
88855: PUSH
88856: LD_VAR 0 2
88860: ARRAY
88861: PUSH
88862: LD_INT 2
88864: ARRAY
88865: PPUSH
88866: CALL_OW 458
88870: AND
88871: IFFALSE 88965
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
88873: LD_EXP 131
88877: PUSH
88878: LD_VAR 0 1
88882: ARRAY
88883: PUSH
88884: LD_VAR 0 2
88888: ARRAY
88889: PUSH
88890: LD_INT 1
88892: ARRAY
88893: PPUSH
88894: LD_EXP 131
88898: PUSH
88899: LD_VAR 0 1
88903: ARRAY
88904: PUSH
88905: LD_VAR 0 2
88909: ARRAY
88910: PUSH
88911: LD_INT 2
88913: ARRAY
88914: PPUSH
88915: LD_VAR 0 3
88919: PPUSH
88920: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
88924: LD_ADDR_EXP 131
88928: PUSH
88929: LD_EXP 131
88933: PPUSH
88934: LD_VAR 0 1
88938: PPUSH
88939: LD_EXP 131
88943: PUSH
88944: LD_VAR 0 1
88948: ARRAY
88949: PPUSH
88950: LD_VAR 0 2
88954: PPUSH
88955: CALL_OW 3
88959: PPUSH
88960: CALL_OW 1
88964: ST_TO_ADDR
// end ; end ;
88965: GO 88716
88967: POP
88968: POP
// end ;
88969: GO 88634
88971: POP
88972: POP
// end ;
88973: PPOPN 4
88975: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
88976: LD_INT 0
88978: PPUSH
88979: PPUSH
// result := false ;
88980: LD_ADDR_VAR 0 4
88984: PUSH
88985: LD_INT 0
88987: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
88988: LD_VAR 0 1
88992: PPUSH
88993: CALL_OW 264
88997: PUSH
88998: LD_INT 81
89000: EQUAL
89001: NOT
89002: IFFALSE 89006
// exit ;
89004: GO 89246
// index := GetElementIndex ( minersList , unit ) ;
89006: LD_ADDR_VAR 0 5
89010: PUSH
89011: LD_EXP 130
89015: PPUSH
89016: LD_VAR 0 1
89020: PPUSH
89021: CALL 33885 0 2
89025: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
89026: LD_EXP 131
89030: PUSH
89031: LD_VAR 0 5
89035: ARRAY
89036: PUSH
89037: LD_EXP 132
89041: GREATEREQUAL
89042: IFFALSE 89046
// exit ;
89044: GO 89246
// ComMoveXY ( unit , x , y ) ;
89046: LD_VAR 0 1
89050: PPUSH
89051: LD_VAR 0 2
89055: PPUSH
89056: LD_VAR 0 3
89060: PPUSH
89061: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
89065: LD_INT 35
89067: PPUSH
89068: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
89072: LD_VAR 0 1
89076: PPUSH
89077: LD_VAR 0 2
89081: PPUSH
89082: LD_VAR 0 3
89086: PPUSH
89087: CALL 65212 0 3
89091: NOT
89092: PUSH
89093: LD_VAR 0 1
89097: PPUSH
89098: CALL_OW 314
89102: AND
89103: IFFALSE 89107
// exit ;
89105: GO 89246
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
89107: LD_VAR 0 2
89111: PPUSH
89112: LD_VAR 0 3
89116: PPUSH
89117: CALL_OW 428
89121: PUSH
89122: LD_VAR 0 1
89126: EQUAL
89127: PUSH
89128: LD_VAR 0 1
89132: PPUSH
89133: CALL_OW 314
89137: NOT
89138: AND
89139: IFFALSE 89065
// PlaySoundXY ( x , y , PlantMine ) ;
89141: LD_VAR 0 2
89145: PPUSH
89146: LD_VAR 0 3
89150: PPUSH
89151: LD_STRING PlantMine
89153: PPUSH
89154: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
89158: LD_VAR 0 2
89162: PPUSH
89163: LD_VAR 0 3
89167: PPUSH
89168: LD_VAR 0 1
89172: PPUSH
89173: CALL_OW 255
89177: PPUSH
89178: LD_INT 0
89180: PPUSH
89181: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
89185: LD_ADDR_EXP 131
89189: PUSH
89190: LD_EXP 131
89194: PPUSH
89195: LD_VAR 0 5
89199: PUSH
89200: LD_EXP 131
89204: PUSH
89205: LD_VAR 0 5
89209: ARRAY
89210: PUSH
89211: LD_INT 1
89213: PLUS
89214: PUSH
89215: EMPTY
89216: LIST
89217: LIST
89218: PPUSH
89219: LD_VAR 0 2
89223: PUSH
89224: LD_VAR 0 3
89228: PUSH
89229: EMPTY
89230: LIST
89231: LIST
89232: PPUSH
89233: CALL 34100 0 3
89237: ST_TO_ADDR
// result := true ;
89238: LD_ADDR_VAR 0 4
89242: PUSH
89243: LD_INT 1
89245: ST_TO_ADDR
// end ;
89246: LD_VAR 0 4
89250: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
89251: LD_INT 0
89253: PPUSH
89254: PPUSH
89255: PPUSH
// if not unit in minersList then
89256: LD_VAR 0 1
89260: PUSH
89261: LD_EXP 130
89265: IN
89266: NOT
89267: IFFALSE 89271
// exit ;
89269: GO 89663
// index := GetElementIndex ( minersList , unit ) ;
89271: LD_ADDR_VAR 0 6
89275: PUSH
89276: LD_EXP 130
89280: PPUSH
89281: LD_VAR 0 1
89285: PPUSH
89286: CALL 33885 0 2
89290: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
89291: LD_ADDR_VAR 0 5
89295: PUSH
89296: DOUBLE
89297: LD_EXP 131
89301: PUSH
89302: LD_VAR 0 6
89306: ARRAY
89307: INC
89308: ST_TO_ADDR
89309: LD_INT 1
89311: PUSH
89312: FOR_DOWNTO
89313: IFFALSE 89474
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
89315: LD_EXP 131
89319: PUSH
89320: LD_VAR 0 6
89324: ARRAY
89325: PUSH
89326: LD_VAR 0 5
89330: ARRAY
89331: PUSH
89332: LD_INT 1
89334: ARRAY
89335: PUSH
89336: LD_VAR 0 2
89340: EQUAL
89341: PUSH
89342: LD_EXP 131
89346: PUSH
89347: LD_VAR 0 6
89351: ARRAY
89352: PUSH
89353: LD_VAR 0 5
89357: ARRAY
89358: PUSH
89359: LD_INT 2
89361: ARRAY
89362: PUSH
89363: LD_VAR 0 3
89367: EQUAL
89368: AND
89369: IFFALSE 89472
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
89371: LD_EXP 131
89375: PUSH
89376: LD_VAR 0 6
89380: ARRAY
89381: PUSH
89382: LD_VAR 0 5
89386: ARRAY
89387: PUSH
89388: LD_INT 1
89390: ARRAY
89391: PPUSH
89392: LD_EXP 131
89396: PUSH
89397: LD_VAR 0 6
89401: ARRAY
89402: PUSH
89403: LD_VAR 0 5
89407: ARRAY
89408: PUSH
89409: LD_INT 2
89411: ARRAY
89412: PPUSH
89413: LD_VAR 0 1
89417: PPUSH
89418: CALL_OW 255
89422: PPUSH
89423: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
89427: LD_ADDR_EXP 131
89431: PUSH
89432: LD_EXP 131
89436: PPUSH
89437: LD_VAR 0 6
89441: PPUSH
89442: LD_EXP 131
89446: PUSH
89447: LD_VAR 0 6
89451: ARRAY
89452: PPUSH
89453: LD_VAR 0 5
89457: PPUSH
89458: CALL_OW 3
89462: PPUSH
89463: CALL_OW 1
89467: ST_TO_ADDR
// exit ;
89468: POP
89469: POP
89470: GO 89663
// end ; end ;
89472: GO 89312
89474: POP
89475: POP
// for i := minerMinesList [ index ] downto 1 do
89476: LD_ADDR_VAR 0 5
89480: PUSH
89481: DOUBLE
89482: LD_EXP 131
89486: PUSH
89487: LD_VAR 0 6
89491: ARRAY
89492: INC
89493: ST_TO_ADDR
89494: LD_INT 1
89496: PUSH
89497: FOR_DOWNTO
89498: IFFALSE 89661
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
89500: LD_EXP 131
89504: PUSH
89505: LD_VAR 0 6
89509: ARRAY
89510: PUSH
89511: LD_VAR 0 5
89515: ARRAY
89516: PUSH
89517: LD_INT 1
89519: ARRAY
89520: PPUSH
89521: LD_EXP 131
89525: PUSH
89526: LD_VAR 0 6
89530: ARRAY
89531: PUSH
89532: LD_VAR 0 5
89536: ARRAY
89537: PUSH
89538: LD_INT 2
89540: ARRAY
89541: PPUSH
89542: LD_VAR 0 2
89546: PPUSH
89547: LD_VAR 0 3
89551: PPUSH
89552: CALL_OW 298
89556: PUSH
89557: LD_INT 6
89559: LESS
89560: IFFALSE 89659
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
89562: LD_EXP 131
89566: PUSH
89567: LD_VAR 0 6
89571: ARRAY
89572: PUSH
89573: LD_VAR 0 5
89577: ARRAY
89578: PUSH
89579: LD_INT 1
89581: ARRAY
89582: PPUSH
89583: LD_EXP 131
89587: PUSH
89588: LD_VAR 0 6
89592: ARRAY
89593: PUSH
89594: LD_VAR 0 5
89598: ARRAY
89599: PUSH
89600: LD_INT 2
89602: ARRAY
89603: PPUSH
89604: LD_VAR 0 1
89608: PPUSH
89609: CALL_OW 255
89613: PPUSH
89614: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
89618: LD_ADDR_EXP 131
89622: PUSH
89623: LD_EXP 131
89627: PPUSH
89628: LD_VAR 0 6
89632: PPUSH
89633: LD_EXP 131
89637: PUSH
89638: LD_VAR 0 6
89642: ARRAY
89643: PPUSH
89644: LD_VAR 0 5
89648: PPUSH
89649: CALL_OW 3
89653: PPUSH
89654: CALL_OW 1
89658: ST_TO_ADDR
// end ; end ;
89659: GO 89497
89661: POP
89662: POP
// end ;
89663: LD_VAR 0 4
89667: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
89668: LD_INT 0
89670: PPUSH
89671: PPUSH
89672: PPUSH
89673: PPUSH
89674: PPUSH
89675: PPUSH
89676: PPUSH
89677: PPUSH
89678: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
89679: LD_VAR 0 1
89683: PPUSH
89684: CALL_OW 264
89688: PUSH
89689: LD_INT 81
89691: EQUAL
89692: NOT
89693: PUSH
89694: LD_VAR 0 1
89698: PUSH
89699: LD_EXP 130
89703: IN
89704: NOT
89705: OR
89706: IFFALSE 89710
// exit ;
89708: GO 90032
// index := GetElementIndex ( minersList , unit ) ;
89710: LD_ADDR_VAR 0 6
89714: PUSH
89715: LD_EXP 130
89719: PPUSH
89720: LD_VAR 0 1
89724: PPUSH
89725: CALL 33885 0 2
89729: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
89730: LD_ADDR_VAR 0 8
89734: PUSH
89735: LD_EXP 132
89739: PUSH
89740: LD_EXP 131
89744: PUSH
89745: LD_VAR 0 6
89749: ARRAY
89750: MINUS
89751: ST_TO_ADDR
// if not minesFreeAmount then
89752: LD_VAR 0 8
89756: NOT
89757: IFFALSE 89761
// exit ;
89759: GO 90032
// tmp := [ ] ;
89761: LD_ADDR_VAR 0 7
89765: PUSH
89766: EMPTY
89767: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
89768: LD_ADDR_VAR 0 5
89772: PUSH
89773: DOUBLE
89774: LD_INT 1
89776: DEC
89777: ST_TO_ADDR
89778: LD_VAR 0 8
89782: PUSH
89783: FOR_TO
89784: IFFALSE 89979
// begin _d := rand ( 0 , 5 ) ;
89786: LD_ADDR_VAR 0 11
89790: PUSH
89791: LD_INT 0
89793: PPUSH
89794: LD_INT 5
89796: PPUSH
89797: CALL_OW 12
89801: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
89802: LD_ADDR_VAR 0 12
89806: PUSH
89807: LD_INT 2
89809: PPUSH
89810: LD_INT 6
89812: PPUSH
89813: CALL_OW 12
89817: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
89818: LD_ADDR_VAR 0 9
89822: PUSH
89823: LD_VAR 0 2
89827: PPUSH
89828: LD_VAR 0 11
89832: PPUSH
89833: LD_VAR 0 12
89837: PPUSH
89838: CALL_OW 272
89842: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
89843: LD_ADDR_VAR 0 10
89847: PUSH
89848: LD_VAR 0 3
89852: PPUSH
89853: LD_VAR 0 11
89857: PPUSH
89858: LD_VAR 0 12
89862: PPUSH
89863: CALL_OW 273
89867: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
89868: LD_VAR 0 9
89872: PPUSH
89873: LD_VAR 0 10
89877: PPUSH
89878: CALL_OW 488
89882: PUSH
89883: LD_VAR 0 9
89887: PUSH
89888: LD_VAR 0 10
89892: PUSH
89893: EMPTY
89894: LIST
89895: LIST
89896: PUSH
89897: LD_VAR 0 7
89901: IN
89902: NOT
89903: AND
89904: PUSH
89905: LD_VAR 0 9
89909: PPUSH
89910: LD_VAR 0 10
89914: PPUSH
89915: CALL_OW 458
89919: NOT
89920: AND
89921: IFFALSE 89963
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
89923: LD_ADDR_VAR 0 7
89927: PUSH
89928: LD_VAR 0 7
89932: PPUSH
89933: LD_VAR 0 7
89937: PUSH
89938: LD_INT 1
89940: PLUS
89941: PPUSH
89942: LD_VAR 0 9
89946: PUSH
89947: LD_VAR 0 10
89951: PUSH
89952: EMPTY
89953: LIST
89954: LIST
89955: PPUSH
89956: CALL_OW 1
89960: ST_TO_ADDR
89961: GO 89977
// i := i - 1 ;
89963: LD_ADDR_VAR 0 5
89967: PUSH
89968: LD_VAR 0 5
89972: PUSH
89973: LD_INT 1
89975: MINUS
89976: ST_TO_ADDR
// end ;
89977: GO 89783
89979: POP
89980: POP
// for i in tmp do
89981: LD_ADDR_VAR 0 5
89985: PUSH
89986: LD_VAR 0 7
89990: PUSH
89991: FOR_IN
89992: IFFALSE 90030
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
89994: LD_VAR 0 1
89998: PPUSH
89999: LD_VAR 0 5
90003: PUSH
90004: LD_INT 1
90006: ARRAY
90007: PPUSH
90008: LD_VAR 0 5
90012: PUSH
90013: LD_INT 2
90015: ARRAY
90016: PPUSH
90017: CALL 88976 0 3
90021: NOT
90022: IFFALSE 90028
// exit ;
90024: POP
90025: POP
90026: GO 90032
90028: GO 89991
90030: POP
90031: POP
// end ;
90032: LD_VAR 0 4
90036: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
90037: LD_INT 0
90039: PPUSH
90040: PPUSH
90041: PPUSH
90042: PPUSH
90043: PPUSH
90044: PPUSH
90045: PPUSH
// if not GetClass ( unit ) = class_sniper then
90046: LD_VAR 0 1
90050: PPUSH
90051: CALL_OW 257
90055: PUSH
90056: LD_INT 5
90058: EQUAL
90059: NOT
90060: IFFALSE 90064
// exit ;
90062: GO 90452
// dist := 8 ;
90064: LD_ADDR_VAR 0 5
90068: PUSH
90069: LD_INT 8
90071: ST_TO_ADDR
// viewRange := 12 ;
90072: LD_ADDR_VAR 0 7
90076: PUSH
90077: LD_INT 12
90079: ST_TO_ADDR
// side := GetSide ( unit ) ;
90080: LD_ADDR_VAR 0 6
90084: PUSH
90085: LD_VAR 0 1
90089: PPUSH
90090: CALL_OW 255
90094: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
90095: LD_INT 61
90097: PPUSH
90098: LD_VAR 0 6
90102: PPUSH
90103: CALL_OW 321
90107: PUSH
90108: LD_INT 2
90110: EQUAL
90111: IFFALSE 90121
// viewRange := 16 ;
90113: LD_ADDR_VAR 0 7
90117: PUSH
90118: LD_INT 16
90120: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
90121: LD_VAR 0 1
90125: PPUSH
90126: LD_VAR 0 2
90130: PPUSH
90131: LD_VAR 0 3
90135: PPUSH
90136: CALL_OW 297
90140: PUSH
90141: LD_VAR 0 5
90145: GREATER
90146: IFFALSE 90225
// begin ComMoveXY ( unit , x , y ) ;
90148: LD_VAR 0 1
90152: PPUSH
90153: LD_VAR 0 2
90157: PPUSH
90158: LD_VAR 0 3
90162: PPUSH
90163: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
90167: LD_INT 35
90169: PPUSH
90170: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
90174: LD_VAR 0 1
90178: PPUSH
90179: LD_VAR 0 2
90183: PPUSH
90184: LD_VAR 0 3
90188: PPUSH
90189: CALL 65212 0 3
90193: NOT
90194: IFFALSE 90198
// exit ;
90196: GO 90452
// until GetDistUnitXY ( unit , x , y ) < dist ;
90198: LD_VAR 0 1
90202: PPUSH
90203: LD_VAR 0 2
90207: PPUSH
90208: LD_VAR 0 3
90212: PPUSH
90213: CALL_OW 297
90217: PUSH
90218: LD_VAR 0 5
90222: LESS
90223: IFFALSE 90167
// end ; ComTurnXY ( unit , x , y ) ;
90225: LD_VAR 0 1
90229: PPUSH
90230: LD_VAR 0 2
90234: PPUSH
90235: LD_VAR 0 3
90239: PPUSH
90240: CALL_OW 118
// wait ( 5 ) ;
90244: LD_INT 5
90246: PPUSH
90247: CALL_OW 67
// _d := GetDir ( unit ) ;
90251: LD_ADDR_VAR 0 10
90255: PUSH
90256: LD_VAR 0 1
90260: PPUSH
90261: CALL_OW 254
90265: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
90266: LD_ADDR_VAR 0 8
90270: PUSH
90271: LD_VAR 0 1
90275: PPUSH
90276: CALL_OW 250
90280: PPUSH
90281: LD_VAR 0 10
90285: PPUSH
90286: LD_VAR 0 5
90290: PPUSH
90291: CALL_OW 272
90295: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
90296: LD_ADDR_VAR 0 9
90300: PUSH
90301: LD_VAR 0 1
90305: PPUSH
90306: CALL_OW 251
90310: PPUSH
90311: LD_VAR 0 10
90315: PPUSH
90316: LD_VAR 0 5
90320: PPUSH
90321: CALL_OW 273
90325: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
90326: LD_VAR 0 8
90330: PPUSH
90331: LD_VAR 0 9
90335: PPUSH
90336: CALL_OW 488
90340: NOT
90341: IFFALSE 90345
// exit ;
90343: GO 90452
// ComAnimCustom ( unit , 1 ) ;
90345: LD_VAR 0 1
90349: PPUSH
90350: LD_INT 1
90352: PPUSH
90353: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
90357: LD_VAR 0 8
90361: PPUSH
90362: LD_VAR 0 9
90366: PPUSH
90367: LD_VAR 0 6
90371: PPUSH
90372: LD_VAR 0 7
90376: PPUSH
90377: CALL_OW 330
// repeat wait ( 1 ) ;
90381: LD_INT 1
90383: PPUSH
90384: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
90388: LD_VAR 0 1
90392: PPUSH
90393: CALL_OW 316
90397: PUSH
90398: LD_VAR 0 1
90402: PPUSH
90403: CALL_OW 314
90407: OR
90408: PUSH
90409: LD_VAR 0 1
90413: PPUSH
90414: CALL_OW 302
90418: NOT
90419: OR
90420: PUSH
90421: LD_VAR 0 1
90425: PPUSH
90426: CALL_OW 301
90430: OR
90431: IFFALSE 90381
// RemoveSeeing ( _x , _y , side ) ;
90433: LD_VAR 0 8
90437: PPUSH
90438: LD_VAR 0 9
90442: PPUSH
90443: LD_VAR 0 6
90447: PPUSH
90448: CALL_OW 331
// end ; end_of_file
90452: LD_VAR 0 4
90456: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
90457: LD_VAR 0 1
90461: PPUSH
90462: LD_VAR 0 2
90466: PPUSH
90467: LD_VAR 0 3
90471: PPUSH
90472: LD_VAR 0 4
90476: PPUSH
90477: LD_VAR 0 5
90481: PPUSH
90482: LD_VAR 0 6
90486: PPUSH
90487: CALL 70407 0 6
// end ;
90491: PPOPN 6
90493: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
90494: LD_INT 0
90496: PPUSH
// begin if not units then
90497: LD_VAR 0 1
90501: NOT
90502: IFFALSE 90506
// exit ;
90504: GO 90506
// end ;
90506: PPOPN 7
90508: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
90509: CALL 70378 0 0
// end ;
90513: PPOPN 1
90515: END
