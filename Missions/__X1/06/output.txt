// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 58 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 22
// Difficulty := 4 ;
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 4
  21: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  22: LD_INT 1
  24: PPUSH
  25: LD_INT 3
  27: PPUSH
  28: CALL 10128 0 2
// PrepareArabian ;
  32: CALL 501 0 0
// PrepareRussian ;
  36: CALL 10919 0 0
// Action ;
  40: CALL 19110 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 57
// FogOff ( 2 ) ;
  50: LD_INT 2
  52: PPUSH
  53: CALL_OW 344
// end ;
  57: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack , canRolfJoin , buildingsFromPrev , gameActive , rolfAttack , collectedOil ; function Init ; begin
  58: LD_INT 0
  60: PPUSH
// debug := false ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// prefix := 05_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 05_
  76: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_STRING 04_2_GaidarKilled
  84: PPUSH
  85: LD_INT 1
  87: PPUSH
  88: CALL_OW 30
  92: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  93: LD_ADDR_EXP 8
  97: PUSH
  98: LD_STRING 05_ConvoySavedCounter
 100: PPUSH
 101: LD_INT 0
 103: PPUSH
 104: CALL_OW 30
 108: ST_TO_ADDR
// buildingsFromPrev := LoadVariable ( 05_Buildings , [ ] ) ;
 109: LD_ADDR_EXP 30
 113: PUSH
 114: LD_STRING 05_Buildings
 116: PPUSH
 117: EMPTY
 118: PPUSH
 119: CALL_OW 30
 123: ST_TO_ADDR
// bergkampfArrived := false ;
 124: LD_ADDR_EXP 3
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// omarArrived := false ;
 132: LD_ADDR_EXP 6
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// outpostDestroyed := false ;
 140: LD_ADDR_EXP 4
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// ruLoseCounter := 0 ;
 148: LD_ADDR_EXP 5
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// rolfScriptBase := false ;
 156: LD_ADDR_EXP 9
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// omarScriptBase := false ;
 164: LD_ADDR_EXP 10
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// linkedWithRolf := 0 ;
 172: LD_ADDR_EXP 12
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 180: LD_ADDR_EXP 26
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// rolfDied := false ;
 188: LD_ADDR_EXP 13
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// leninSpotted := false ;
 196: LD_ADDR_EXP 14
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// mortarConstructed := false ;
 204: LD_ADDR_EXP 15
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// rolfHasVehicles := false ;
 212: LD_ADDR_EXP 16
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// leninScriptBase := true ;
 220: LD_ADDR_EXP 11
 224: PUSH
 225: LD_INT 1
 227: ST_TO_ADDR
// rolfWantVehicles := false ;
 228: LD_ADDR_EXP 17
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// omarWantVehicles := false ;
 236: LD_ADDR_EXP 18
 240: PUSH
 241: LD_INT 0
 243: ST_TO_ADDR
// omarHasVehicles := false ;
 244: LD_ADDR_EXP 22
 248: PUSH
 249: LD_INT 0
 251: ST_TO_ADDR
// escapeAllowed := false ;
 252: LD_ADDR_EXP 24
 256: PUSH
 257: LD_INT 0
 259: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 260: LD_ADDR_EXP 19
 264: PUSH
 265: LD_INT 31500
 267: PUSH
 268: LD_INT 28350
 270: PUSH
 271: LD_INT 25900
 273: PUSH
 274: LD_INT 24150
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: PUSH
 283: LD_OWVAR 67
 287: ARRAY
 288: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 289: LD_ADDR_EXP 20
 293: PUSH
 294: LD_INT 31500
 296: PUSH
 297: LD_INT 28350
 299: PUSH
 300: LD_INT 25900
 302: PUSH
 303: LD_INT 24150
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: LIST
 310: LIST
 311: PUSH
 312: LD_OWVAR 67
 316: ARRAY
 317: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 318: LD_ADDR_EXP 21
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: LD_INT 5
 328: PUSH
 329: LD_INT 6
 331: PUSH
 332: LD_INT 6
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: LIST
 339: LIST
 340: PUSH
 341: LD_OWVAR 67
 345: ARRAY
 346: ST_TO_ADDR
// omarAttack := false ;
 347: LD_ADDR_EXP 23
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// disableAttackOnHeike := false ;
 355: LD_ADDR_EXP 27
 359: PUSH
 360: LD_INT 0
 362: ST_TO_ADDR
// escapeTimer := 8 8$30 ;
 363: LD_ADDR_EXP 25
 367: PUSH
 368: LD_INT 17850
 370: ST_TO_ADDR
// firstAttack := true ;
 371: LD_ADDR_EXP 28
 375: PUSH
 376: LD_INT 1
 378: ST_TO_ADDR
// canRolfJoin := true ;
 379: LD_ADDR_EXP 29
 383: PUSH
 384: LD_INT 1
 386: ST_TO_ADDR
// gameActive := false ;
 387: LD_ADDR_EXP 31
 391: PUSH
 392: LD_INT 0
 394: ST_TO_ADDR
// rolfAttack := false ;
 395: LD_ADDR_EXP 32
 399: PUSH
 400: LD_INT 0
 402: ST_TO_ADDR
// collectedOil := 0 ;
 403: LD_ADDR_EXP 33
 407: PUSH
 408: LD_INT 0
 410: ST_TO_ADDR
// end ;
 411: LD_VAR 0 1
 415: RET
// every 0 0$2 trigger GetSide ( Rolf ) = 2 and IsOk ( Rolf ) and not omarArrived do
 416: LD_EXP 47
 420: PPUSH
 421: CALL_OW 255
 425: PUSH
 426: LD_INT 2
 428: EQUAL
 429: PUSH
 430: LD_EXP 47
 434: PPUSH
 435: CALL_OW 302
 439: AND
 440: PUSH
 441: LD_EXP 6
 445: NOT
 446: AND
 447: IFFALSE 459
 449: GO 451
 451: DISABLE
// SetAchievement ( ACH_ROLF ) ;
 452: LD_STRING ACH_ROLF
 454: PPUSH
 455: CALL_OW 543
 459: END
// every 0 0$2 trigger collectedOil >= 300 do
 460: LD_EXP 33
 464: PUSH
 465: LD_INT 300
 467: GREATEREQUAL
 468: IFFALSE 480
 470: GO 472
 472: DISABLE
// SetAchievement ( ACH_OIL ) ;
 473: LD_STRING ACH_OIL
 475: PPUSH
 476: CALL_OW 543
 480: END
// every 0 0$2 trigger IsDead ( ruLenin ) do
 481: LD_INT 52
 483: PPUSH
 484: CALL_OW 301
 488: IFFALSE 500
 490: GO 492
 492: DISABLE
// SetAchievement ( ACH_LENIN ) ; end_of_file
 493: LD_STRING ACH_LENIN
 495: PPUSH
 496: CALL_OW 543
 500: END
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , tmp ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
 506: PPUSH
 507: PPUSH
 508: PPUSH
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
// uc_nation := 2 ;
 515: LD_ADDR_OWVAR 21
 519: PUSH
 520: LD_INT 2
 522: ST_TO_ADDR
// uc_side := 5 ;
 523: LD_ADDR_OWVAR 20
 527: PUSH
 528: LD_INT 5
 530: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 531: LD_ADDR_EXP 42
 535: PUSH
 536: LD_STRING Abdul
 538: PPUSH
 539: LD_INT 0
 541: PPUSH
 542: LD_STRING 
 544: PPUSH
 545: CALL 29226 0 3
 549: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 550: LD_ADDR_EXP 44
 554: PUSH
 555: LD_STRING Omar
 557: PPUSH
 558: LD_INT 0
 560: PPUSH
 561: LD_STRING 
 563: PPUSH
 564: CALL 29226 0 3
 568: ST_TO_ADDR
// uc_side := 2 ;
 569: LD_ADDR_OWVAR 20
 573: PUSH
 574: LD_INT 2
 576: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 577: LD_ADDR_EXP 34
 581: PUSH
 582: LD_STRING Heike
 584: PPUSH
 585: LD_EXP 1
 589: NOT
 590: PPUSH
 591: LD_EXP 2
 595: PPUSH
 596: CALL 29226 0 3
 600: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 601: LD_ADDR_EXP 37
 605: PUSH
 606: LD_STRING Ibrahim
 608: PPUSH
 609: LD_EXP 1
 613: NOT
 614: PPUSH
 615: LD_EXP 2
 619: PPUSH
 620: CALL 29226 0 3
 624: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 625: LD_ADDR_EXP 35
 629: PUSH
 630: LD_STRING Givi
 632: PPUSH
 633: LD_EXP 1
 637: NOT
 638: PPUSH
 639: LD_EXP 2
 643: PPUSH
 644: CALL 29226 0 3
 648: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 649: LD_ADDR_EXP 38
 653: PUSH
 654: LD_STRING Kamil
 656: PPUSH
 657: LD_EXP 1
 661: NOT
 662: PPUSH
 663: LD_EXP 2
 667: PPUSH
 668: CALL 29226 0 3
 672: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 673: LD_ADDR_EXP 39
 677: PUSH
 678: LD_STRING Kaia
 680: PPUSH
 681: LD_EXP 1
 685: NOT
 686: PPUSH
 687: LD_EXP 2
 691: PPUSH
 692: CALL 29226 0 3
 696: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 697: LD_ADDR_EXP 40
 701: PUSH
 702: LD_STRING Sophia
 704: PPUSH
 705: LD_EXP 1
 709: NOT
 710: PPUSH
 711: LD_EXP 2
 715: PPUSH
 716: CALL 29226 0 3
 720: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 721: LD_ADDR_EXP 41
 725: PUSH
 726: LD_STRING Markov
 728: PPUSH
 729: LD_EXP 1
 733: NOT
 734: PPUSH
 735: LD_EXP 2
 739: PPUSH
 740: CALL 29226 0 3
 744: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 745: LD_ADDR_EXP 46
 749: PUSH
 750: LD_STRING Aviradze
 752: PPUSH
 753: LD_EXP 1
 757: NOT
 758: PPUSH
 759: LD_EXP 2
 763: PPUSH
 764: CALL 29226 0 3
 768: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 769: LD_ADDR_EXP 45
 773: PUSH
 774: LD_STRING Kurt
 776: PPUSH
 777: LD_EXP 1
 781: NOT
 782: PPUSH
 783: LD_EXP 2
 787: PPUSH
 788: CALL 29226 0 3
 792: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 793: LD_ADDR_EXP 36
 797: PUSH
 798: LD_STRING Mike
 800: PPUSH
 801: LD_EXP 1
 805: NOT
 806: PPUSH
 807: LD_EXP 2
 811: PPUSH
 812: CALL 29226 0 3
 816: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 817: LD_ADDR_EXP 43
 821: PUSH
 822: LD_STRING Olaf
 824: PPUSH
 825: LD_INT 0
 827: PPUSH
 828: LD_STRING 
 830: PPUSH
 831: CALL 29226 0 3
 835: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 836: LD_ADDR_EXP 49
 840: PUSH
 841: LD_STRING 05_others
 843: PPUSH
 844: CALL_OW 31
 848: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 849: LD_ADDR_EXP 50
 853: PUSH
 854: LD_STRING 05_apes
 856: PPUSH
 857: CALL_OW 31
 861: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 862: LD_ADDR_VAR 0 5
 866: PUSH
 867: LD_STRING 05_Radar
 869: PPUSH
 870: LD_EXP 1
 874: PPUSH
 875: CALL_OW 30
 879: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 880: LD_ADDR_VAR 0 6
 884: PUSH
 885: LD_STRING 05_RemoteControl
 887: PPUSH
 888: LD_EXP 1
 892: PPUSH
 893: CALL_OW 30
 897: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 898: LD_ADDR_VAR 0 7
 902: PUSH
 903: LD_STRING 05_DrugsTested
 905: PPUSH
 906: LD_EXP 1
 910: PPUSH
 911: CALL_OW 30
 915: ST_TO_ADDR
// if hasDrugs then
 916: LD_VAR 0 7
 920: IFFALSE 935
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 922: LD_INT 5
 924: PPUSH
 925: LD_INT 2
 927: PPUSH
 928: LD_INT 2
 930: PPUSH
 931: CALL_OW 322
// if hasRadar then
 935: LD_VAR 0 5
 939: IFFALSE 954
// SetTech ( tech_radar , 2 , state_researched ) ;
 941: LD_INT 6
 943: PPUSH
 944: LD_INT 2
 946: PPUSH
 947: LD_INT 2
 949: PPUSH
 950: CALL_OW 322
// if hasRemote then
 954: LD_VAR 0 6
 958: IFFALSE 973
// SetTech ( tech_remCont , 2 , state_researched ) ;
 960: LD_INT 15
 962: PPUSH
 963: LD_INT 2
 965: PPUSH
 966: LD_INT 2
 968: PPUSH
 969: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 973: LD_ADDR_VAR 0 12
 977: PUSH
 978: LD_INT 5
 980: PPUSH
 981: LD_INT 0
 983: PPUSH
 984: CALL_OW 517
 988: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 989: LD_ADDR_VAR 0 2
 993: PUSH
 994: DOUBLE
 995: LD_INT 1
 997: DEC
 998: ST_TO_ADDR
 999: LD_VAR 0 12
1003: PUSH
1004: LD_INT 1
1006: ARRAY
1007: PUSH
1008: FOR_TO
1009: IFFALSE 1086
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
1011: LD_VAR 0 12
1015: PUSH
1016: LD_INT 1
1018: ARRAY
1019: PUSH
1020: LD_VAR 0 2
1024: ARRAY
1025: PPUSH
1026: LD_VAR 0 12
1030: PUSH
1031: LD_INT 2
1033: ARRAY
1034: PUSH
1035: LD_VAR 0 2
1039: ARRAY
1040: PPUSH
1041: CALL_OW 351
1045: IFFALSE 1084
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
1047: LD_VAR 0 12
1051: PUSH
1052: LD_INT 1
1054: ARRAY
1055: PUSH
1056: LD_VAR 0 2
1060: ARRAY
1061: PPUSH
1062: LD_VAR 0 12
1066: PUSH
1067: LD_INT 2
1069: ARRAY
1070: PUSH
1071: LD_VAR 0 2
1075: ARRAY
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: CALL_OW 244
1084: GO 1008
1086: POP
1087: POP
// base := [ ] ;
1088: LD_ADDR_VAR 0 4
1092: PUSH
1093: EMPTY
1094: ST_TO_ADDR
// if debug then
1095: LD_EXP 1
1099: IFFALSE 1149
// begin base := [ [ b_warehouse , 51 , 77 , 1 , nation_russian , 3 , 0 , 0 , 0 ] , ] ;
1101: LD_ADDR_VAR 0 4
1105: PUSH
1106: LD_INT 1
1108: PUSH
1109: LD_INT 51
1111: PUSH
1112: LD_INT 77
1114: PUSH
1115: LD_INT 1
1117: PUSH
1118: LD_INT 3
1120: PUSH
1121: LD_INT 3
1123: PUSH
1124: LD_INT 0
1126: PUSH
1127: LD_INT 0
1129: PUSH
1130: LD_INT 0
1132: PUSH
1133: EMPTY
1134: LIST
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: PUSH
1144: EMPTY
1145: LIST
1146: ST_TO_ADDR
// end else
1147: GO 1165
// if buildingsFromPrev then
1149: LD_EXP 30
1153: IFFALSE 1165
// base := buildingsFromPrev ;
1155: LD_ADDR_VAR 0 4
1159: PUSH
1160: LD_EXP 30
1164: ST_TO_ADDR
// if base then
1165: LD_VAR 0 4
1169: IFFALSE 1367
// for i := 1 to base do
1171: LD_ADDR_VAR 0 2
1175: PUSH
1176: DOUBLE
1177: LD_INT 1
1179: DEC
1180: ST_TO_ADDR
1181: LD_VAR 0 4
1185: PUSH
1186: FOR_TO
1187: IFFALSE 1365
// base := Replace ( base , i , [ base [ i ] [ 1 ] , base [ i ] [ 2 ] + 155 , base [ i ] [ 3 ] + 3 , base [ i ] [ 4 ] , base [ i ] [ 5 ] , base [ i ] [ 6 ] , base [ i ] [ 7 ] , base [ i ] [ 8 ] , base [ i ] [ 9 ] ] ) ;
1189: LD_ADDR_VAR 0 4
1193: PUSH
1194: LD_VAR 0 4
1198: PPUSH
1199: LD_VAR 0 2
1203: PPUSH
1204: LD_VAR 0 4
1208: PUSH
1209: LD_VAR 0 2
1213: ARRAY
1214: PUSH
1215: LD_INT 1
1217: ARRAY
1218: PUSH
1219: LD_VAR 0 4
1223: PUSH
1224: LD_VAR 0 2
1228: ARRAY
1229: PUSH
1230: LD_INT 2
1232: ARRAY
1233: PUSH
1234: LD_INT 155
1236: PLUS
1237: PUSH
1238: LD_VAR 0 4
1242: PUSH
1243: LD_VAR 0 2
1247: ARRAY
1248: PUSH
1249: LD_INT 3
1251: ARRAY
1252: PUSH
1253: LD_INT 3
1255: PLUS
1256: PUSH
1257: LD_VAR 0 4
1261: PUSH
1262: LD_VAR 0 2
1266: ARRAY
1267: PUSH
1268: LD_INT 4
1270: ARRAY
1271: PUSH
1272: LD_VAR 0 4
1276: PUSH
1277: LD_VAR 0 2
1281: ARRAY
1282: PUSH
1283: LD_INT 5
1285: ARRAY
1286: PUSH
1287: LD_VAR 0 4
1291: PUSH
1292: LD_VAR 0 2
1296: ARRAY
1297: PUSH
1298: LD_INT 6
1300: ARRAY
1301: PUSH
1302: LD_VAR 0 4
1306: PUSH
1307: LD_VAR 0 2
1311: ARRAY
1312: PUSH
1313: LD_INT 7
1315: ARRAY
1316: PUSH
1317: LD_VAR 0 4
1321: PUSH
1322: LD_VAR 0 2
1326: ARRAY
1327: PUSH
1328: LD_INT 8
1330: ARRAY
1331: PUSH
1332: LD_VAR 0 4
1336: PUSH
1337: LD_VAR 0 2
1341: ARRAY
1342: PUSH
1343: LD_INT 9
1345: ARRAY
1346: PUSH
1347: EMPTY
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: PPUSH
1358: CALL_OW 1
1362: ST_TO_ADDR
1363: GO 1186
1365: POP
1366: POP
// base := base ^ [ [ b_depot , 206 , 80 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_bunker , 221 , 95 , 5 , nation_arabian , 3 , 0 , 0 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , nation_arabian , 3 , 0 , 0 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , nation_arabian , 3 , 0 , 0 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_lab_full , 217 , 78 , 4 , nation_arabian , 3 , b_lab_weapon , 0 , 0 ] , [ b_solar_power , 220 , 99 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 220 , 103 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 216 , 102 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_gun , 203 , 94 , 0 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_track , 199 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 81 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 78 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ] ;
1367: LD_ADDR_VAR 0 4
1371: PUSH
1372: LD_VAR 0 4
1376: PUSH
1377: LD_INT 0
1379: PUSH
1380: LD_INT 206
1382: PUSH
1383: LD_INT 80
1385: PUSH
1386: LD_INT 1
1388: PUSH
1389: LD_INT 2
1391: PUSH
1392: LD_INT 3
1394: PUSH
1395: LD_INT 0
1397: PUSH
1398: LD_INT 0
1400: PUSH
1401: LD_INT 0
1403: PUSH
1404: EMPTY
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: PUSH
1415: LD_INT 32
1417: PUSH
1418: LD_INT 221
1420: PUSH
1421: LD_INT 95
1423: PUSH
1424: LD_INT 5
1426: PUSH
1427: LD_INT 2
1429: PUSH
1430: LD_INT 3
1432: PUSH
1433: LD_INT 0
1435: PUSH
1436: LD_INT 0
1438: PUSH
1439: LD_INT 23
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: PUSH
1453: LD_INT 32
1455: PUSH
1456: LD_INT 223
1458: PUSH
1459: LD_INT 88
1461: PUSH
1462: LD_INT 5
1464: PUSH
1465: LD_INT 2
1467: PUSH
1468: LD_INT 3
1470: PUSH
1471: LD_INT 0
1473: PUSH
1474: LD_INT 0
1476: PUSH
1477: LD_INT 24
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: PUSH
1491: LD_INT 32
1493: PUSH
1494: LD_INT 202
1496: PUSH
1497: LD_INT 64
1499: PUSH
1500: LD_INT 2
1502: PUSH
1503: LD_INT 2
1505: PUSH
1506: LD_INT 3
1508: PUSH
1509: LD_INT 0
1511: PUSH
1512: LD_INT 0
1514: PUSH
1515: LD_INT 25
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 3
1531: PUSH
1532: LD_INT 203
1534: PUSH
1535: LD_INT 91
1537: PUSH
1538: LD_INT 1
1540: PUSH
1541: LD_INT 2
1543: PUSH
1544: LD_INT 3
1546: PUSH
1547: LD_INT 0
1549: PUSH
1550: LD_INT 0
1552: PUSH
1553: LD_INT 0
1555: PUSH
1556: EMPTY
1557: LIST
1558: LIST
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: LIST
1565: LIST
1566: PUSH
1567: LD_INT 8
1569: PUSH
1570: LD_INT 217
1572: PUSH
1573: LD_INT 78
1575: PUSH
1576: LD_INT 4
1578: PUSH
1579: LD_INT 2
1581: PUSH
1582: LD_INT 3
1584: PUSH
1585: LD_INT 10
1587: PUSH
1588: LD_INT 0
1590: PUSH
1591: LD_INT 0
1593: PUSH
1594: EMPTY
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: PUSH
1605: LD_INT 27
1607: PUSH
1608: LD_INT 220
1610: PUSH
1611: LD_INT 99
1613: PUSH
1614: LD_INT 1
1616: PUSH
1617: LD_INT 2
1619: PUSH
1620: LD_INT 3
1622: PUSH
1623: LD_INT 0
1625: PUSH
1626: LD_INT 0
1628: PUSH
1629: LD_INT 0
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: PUSH
1643: LD_INT 27
1645: PUSH
1646: LD_INT 220
1648: PUSH
1649: LD_INT 103
1651: PUSH
1652: LD_INT 1
1654: PUSH
1655: LD_INT 2
1657: PUSH
1658: LD_INT 3
1660: PUSH
1661: LD_INT 0
1663: PUSH
1664: LD_INT 0
1666: PUSH
1667: LD_INT 0
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: PUSH
1681: LD_INT 27
1683: PUSH
1684: LD_INT 216
1686: PUSH
1687: LD_INT 102
1689: PUSH
1690: LD_INT 1
1692: PUSH
1693: LD_INT 2
1695: PUSH
1696: LD_INT 3
1698: PUSH
1699: LD_INT 0
1701: PUSH
1702: LD_INT 0
1704: PUSH
1705: LD_INT 0
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: LIST
1718: PUSH
1719: LD_INT 17
1721: PUSH
1722: LD_INT 203
1724: PUSH
1725: LD_INT 94
1727: PUSH
1728: LD_INT 0
1730: PUSH
1731: LD_INT 2
1733: PUSH
1734: LD_INT 3
1736: PUSH
1737: LD_INT 0
1739: PUSH
1740: LD_INT 0
1742: PUSH
1743: LD_INT 0
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: LIST
1750: LIST
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 23
1759: PUSH
1760: LD_INT 200
1762: PUSH
1763: LD_INT 88
1765: PUSH
1766: LD_INT 2
1768: PUSH
1769: LD_INT 2
1771: PUSH
1772: LD_INT 3
1774: PUSH
1775: LD_INT 0
1777: PUSH
1778: LD_INT 0
1780: PUSH
1781: LD_INT 0
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: PUSH
1795: LD_INT 16
1797: PUSH
1798: LD_INT 199
1800: PUSH
1801: LD_INT 91
1803: PUSH
1804: LD_INT 1
1806: PUSH
1807: LD_INT 2
1809: PUSH
1810: LD_INT 3
1812: PUSH
1813: LD_INT 0
1815: PUSH
1816: LD_INT 0
1818: PUSH
1819: LD_INT 0
1821: PUSH
1822: EMPTY
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: PUSH
1833: LD_INT 26
1835: PUSH
1836: LD_INT 197
1838: PUSH
1839: LD_INT 81
1841: PUSH
1842: LD_INT 1
1844: PUSH
1845: LD_INT 2
1847: PUSH
1848: LD_INT 3
1850: PUSH
1851: LD_INT 0
1853: PUSH
1854: LD_INT 0
1856: PUSH
1857: LD_INT 0
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: PUSH
1871: LD_INT 26
1873: PUSH
1874: LD_INT 197
1876: PUSH
1877: LD_INT 78
1879: PUSH
1880: LD_INT 3
1882: PUSH
1883: LD_INT 2
1885: PUSH
1886: LD_INT 3
1888: PUSH
1889: LD_INT 0
1891: PUSH
1892: LD_INT 0
1894: PUSH
1895: LD_INT 0
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: ADD
1925: ST_TO_ADDR
// if hasRadar then
1926: LD_VAR 0 5
1930: IFFALSE 1994
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
1932: LD_ADDR_VAR 0 4
1936: PUSH
1937: LD_VAR 0 4
1941: PPUSH
1942: LD_VAR 0 4
1946: PUSH
1947: LD_INT 1
1949: PLUS
1950: PPUSH
1951: LD_INT 20
1953: PUSH
1954: LD_INT 203
1956: PUSH
1957: LD_INT 87
1959: PUSH
1960: LD_INT 3
1962: PUSH
1963: LD_INT 2
1965: PUSH
1966: LD_INT 3
1968: PUSH
1969: LD_INT 0
1971: PUSH
1972: LD_INT 0
1974: PUSH
1975: LD_INT 0
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: PPUSH
1989: CALL_OW 1
1993: ST_TO_ADDR
// if hasRemote then
1994: LD_VAR 0 6
1998: IFFALSE 2062
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
2000: LD_ADDR_VAR 0 4
2004: PUSH
2005: LD_VAR 0 4
2009: PPUSH
2010: LD_VAR 0 4
2014: PUSH
2015: LD_INT 1
2017: PLUS
2018: PPUSH
2019: LD_INT 22
2021: PUSH
2022: LD_INT 207
2024: PUSH
2025: LD_INT 95
2027: PUSH
2028: LD_INT 5
2030: PUSH
2031: LD_INT 2
2033: PUSH
2034: LD_INT 3
2036: PUSH
2037: LD_INT 0
2039: PUSH
2040: LD_INT 0
2042: PUSH
2043: LD_INT 0
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: PPUSH
2057: CALL_OW 1
2061: ST_TO_ADDR
// for i in base do
2062: LD_ADDR_VAR 0 2
2066: PUSH
2067: LD_VAR 0 4
2071: PUSH
2072: FOR_IN
2073: IFFALSE 2412
// begin if HexInfo ( i [ 2 ] , i [ 3 ] ) then
2075: LD_VAR 0 2
2079: PUSH
2080: LD_INT 2
2082: ARRAY
2083: PPUSH
2084: LD_VAR 0 2
2088: PUSH
2089: LD_INT 3
2091: ARRAY
2092: PPUSH
2093: CALL_OW 428
2097: IFFALSE 2101
// continue ;
2099: GO 2072
// uc_nation := i [ 5 ] ;
2101: LD_ADDR_OWVAR 21
2105: PUSH
2106: LD_VAR 0 2
2110: PUSH
2111: LD_INT 5
2113: ARRAY
2114: ST_TO_ADDR
// InitBc ;
2115: CALL_OW 21
// bc_type := i [ 1 ] ;
2119: LD_ADDR_OWVAR 42
2123: PUSH
2124: LD_VAR 0 2
2128: PUSH
2129: LD_INT 1
2131: ARRAY
2132: ST_TO_ADDR
// bc_level := i [ 6 ] ;
2133: LD_ADDR_OWVAR 43
2137: PUSH
2138: LD_VAR 0 2
2142: PUSH
2143: LD_INT 6
2145: ARRAY
2146: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 5 ] = nation_arabian and not i [ 8 ] then
2147: LD_VAR 0 2
2151: PUSH
2152: LD_INT 1
2154: ARRAY
2155: PUSH
2156: LD_INT 8
2158: EQUAL
2159: PUSH
2160: LD_VAR 0 2
2164: PUSH
2165: LD_INT 5
2167: ARRAY
2168: PUSH
2169: LD_INT 2
2171: EQUAL
2172: AND
2173: PUSH
2174: LD_VAR 0 2
2178: PUSH
2179: LD_INT 8
2181: ARRAY
2182: NOT
2183: AND
2184: IFFALSE 2219
// begin bc_kind1 := b_lab_weapon ;
2186: LD_ADDR_OWVAR 44
2190: PUSH
2191: LD_INT 10
2193: ST_TO_ADDR
// if hasRadar then
2194: LD_VAR 0 5
2198: IFFALSE 2210
// bc_kind2 := b_lab_opto else
2200: LD_ADDR_OWVAR 45
2204: PUSH
2205: LD_INT 15
2207: ST_TO_ADDR
2208: GO 2219
// bc_kind2 := - 1 ;
2210: LD_ADDR_OWVAR 45
2214: PUSH
2215: LD_INT 1
2217: NEG
2218: ST_TO_ADDR
// end ; if i [ 1 ] in [ b_lab_half , b_lab_full ] and i [ 7 ] then
2219: LD_VAR 0 2
2223: PUSH
2224: LD_INT 1
2226: ARRAY
2227: PUSH
2228: LD_INT 7
2230: PUSH
2231: LD_INT 8
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: IN
2238: PUSH
2239: LD_VAR 0 2
2243: PUSH
2244: LD_INT 7
2246: ARRAY
2247: AND
2248: IFFALSE 2264
// bc_kind1 := i [ 7 ] ;
2250: LD_ADDR_OWVAR 44
2254: PUSH
2255: LD_VAR 0 2
2259: PUSH
2260: LD_INT 7
2262: ARRAY
2263: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 8 ] then
2264: LD_VAR 0 2
2268: PUSH
2269: LD_INT 1
2271: ARRAY
2272: PUSH
2273: LD_INT 8
2275: EQUAL
2276: PUSH
2277: LD_VAR 0 2
2281: PUSH
2282: LD_INT 8
2284: ARRAY
2285: AND
2286: IFFALSE 2302
// bc_kind1 := i [ 8 ] ;
2288: LD_ADDR_OWVAR 44
2292: PUSH
2293: LD_VAR 0 2
2297: PUSH
2298: LD_INT 8
2300: ARRAY
2301: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2302: LD_ADDR_VAR 0 3
2306: PUSH
2307: LD_VAR 0 2
2311: PUSH
2312: LD_INT 2
2314: ARRAY
2315: PPUSH
2316: LD_VAR 0 2
2320: PUSH
2321: LD_INT 3
2323: ARRAY
2324: PPUSH
2325: LD_VAR 0 2
2329: PUSH
2330: LD_INT 4
2332: ARRAY
2333: PPUSH
2334: CALL_OW 47
2338: ST_TO_ADDR
// if i [ 9 ] then
2339: LD_VAR 0 2
2343: PUSH
2344: LD_INT 9
2346: ARRAY
2347: IFFALSE 2367
// PlaceWeaponTurret ( b , i [ 9 ] ) ;
2349: LD_VAR 0 3
2353: PPUSH
2354: LD_VAR 0 2
2358: PUSH
2359: LD_INT 9
2361: ARRAY
2362: PPUSH
2363: CALL_OW 431
// if i [ 1 ] = b_bunker then
2367: LD_VAR 0 2
2371: PUSH
2372: LD_INT 1
2374: ARRAY
2375: PUSH
2376: LD_INT 32
2378: EQUAL
2379: IFFALSE 2410
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
2381: LD_ADDR_VAR 0 11
2385: PUSH
2386: LD_VAR 0 11
2390: PPUSH
2391: LD_VAR 0 11
2395: PUSH
2396: LD_INT 1
2398: PLUS
2399: PPUSH
2400: LD_VAR 0 3
2404: PPUSH
2405: CALL_OW 1
2409: ST_TO_ADDR
// end ;
2410: GO 2072
2412: POP
2413: POP
// depot := HexInfo ( 206 , 80 ) ;
2414: LD_ADDR_VAR 0 9
2418: PUSH
2419: LD_INT 206
2421: PPUSH
2422: LD_INT 80
2424: PPUSH
2425: CALL_OW 428
2429: ST_TO_ADDR
// factory := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) ;
2430: LD_ADDR_VAR 0 8
2434: PUSH
2435: LD_INT 22
2437: PUSH
2438: LD_INT 2
2440: PUSH
2441: EMPTY
2442: LIST
2443: LIST
2444: PUSH
2445: LD_INT 30
2447: PUSH
2448: LD_INT 3
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: PUSH
2455: EMPTY
2456: LIST
2457: LIST
2458: PPUSH
2459: CALL_OW 69
2463: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2464: LD_ADDR_VAR 0 10
2468: PUSH
2469: LD_INT 22
2471: PUSH
2472: LD_INT 2
2474: PUSH
2475: EMPTY
2476: LIST
2477: LIST
2478: PUSH
2479: LD_INT 2
2481: PUSH
2482: LD_INT 30
2484: PUSH
2485: LD_INT 6
2487: PUSH
2488: EMPTY
2489: LIST
2490: LIST
2491: PUSH
2492: LD_INT 30
2494: PUSH
2495: LD_INT 7
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 30
2504: PUSH
2505: LD_INT 8
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: EMPTY
2513: LIST
2514: LIST
2515: LIST
2516: LIST
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: PPUSH
2522: CALL_OW 69
2526: ST_TO_ADDR
// arDepot := depot ;
2527: LD_ADDR_EXP 48
2531: PUSH
2532: LD_VAR 0 9
2536: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 190 , 150 ] [ Difficulty ] ) ;
2537: LD_VAR 0 9
2541: PPUSH
2542: CALL_OW 274
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: LD_INT 360
2552: PUSH
2553: LD_INT 260
2555: PUSH
2556: LD_INT 190
2558: PUSH
2559: LD_INT 150
2561: PUSH
2562: EMPTY
2563: LIST
2564: LIST
2565: LIST
2566: LIST
2567: PUSH
2568: LD_OWVAR 67
2572: ARRAY
2573: PPUSH
2574: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 150 , 120 ] [ Difficulty ] ) ;
2578: LD_VAR 0 9
2582: PPUSH
2583: CALL_OW 274
2587: PPUSH
2588: LD_INT 2
2590: PPUSH
2591: LD_INT 200
2593: PUSH
2594: LD_INT 170
2596: PUSH
2597: LD_INT 150
2599: PUSH
2600: LD_INT 120
2602: PUSH
2603: EMPTY
2604: LIST
2605: LIST
2606: LIST
2607: LIST
2608: PUSH
2609: LD_OWVAR 67
2613: ARRAY
2614: PPUSH
2615: CALL_OW 277
// uc_nation := 2 ;
2619: LD_ADDR_OWVAR 21
2623: PUSH
2624: LD_INT 2
2626: ST_TO_ADDR
// uc_side := 2 ;
2627: LD_ADDR_OWVAR 20
2631: PUSH
2632: LD_INT 2
2634: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
2635: LD_INT 13
2637: PPUSH
2638: LD_INT 1
2640: PPUSH
2641: LD_INT 1
2643: PPUSH
2644: LD_INT 27
2646: PPUSH
2647: LD_INT 33
2649: PPUSH
2650: CALL 34241 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
2654: CALL_OW 45
2658: PPUSH
2659: LD_INT 190
2661: PPUSH
2662: LD_INT 64
2664: PPUSH
2665: LD_INT 5
2667: PPUSH
2668: LD_INT 0
2670: PPUSH
2671: CALL 68834 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
2675: LD_INT 13
2677: PPUSH
2678: LD_INT 1
2680: PPUSH
2681: LD_INT 1
2683: PPUSH
2684: LD_INT 25
2686: PPUSH
2687: LD_INT 22
2689: PPUSH
2690: CALL 34241 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
2694: CALL_OW 45
2698: PPUSH
2699: LD_INT 188
2701: PPUSH
2702: LD_INT 67
2704: PPUSH
2705: LD_INT 5
2707: PPUSH
2708: LD_INT 0
2710: PPUSH
2711: CALL 68834 0 5
// if hasRemote then
2715: LD_VAR 0 6
2719: IFFALSE 2801
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_control_tower , 35 ) ;
2721: LD_INT 13
2723: PPUSH
2724: LD_INT 1
2726: PPUSH
2727: LD_INT 1
2729: PPUSH
2730: LD_INT 31
2732: PPUSH
2733: LD_INT 35
2735: PPUSH
2736: CALL 34241 0 5
// PlaceUnitXYD ( CreateVehicle , 191 , 71 , 5 , false ) ;
2740: CALL_OW 45
2744: PPUSH
2745: LD_INT 191
2747: PPUSH
2748: LD_INT 71
2750: PPUSH
2751: LD_INT 5
2753: PPUSH
2754: LD_INT 0
2756: PPUSH
2757: CALL 68834 0 5
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_remote , ar_gun , 55 ) ;
2761: LD_INT 14
2763: PPUSH
2764: LD_INT 1
2766: PPUSH
2767: LD_INT 2
2769: PPUSH
2770: LD_INT 27
2772: PPUSH
2773: LD_INT 55
2775: PPUSH
2776: CALL 34241 0 5
// PlaceUnitXYD ( CreateVehicle , 199 , 67 , 0 , false ) ;
2780: CALL_OW 45
2784: PPUSH
2785: LD_INT 199
2787: PPUSH
2788: LD_INT 67
2790: PPUSH
2791: LD_INT 0
2793: PPUSH
2794: LD_INT 0
2796: PPUSH
2797: CALL 68834 0 5
// end ; PlaceUnitXY ( Heike , 213 , 87 , false ) ;
2801: LD_EXP 34
2805: PPUSH
2806: LD_INT 213
2808: PPUSH
2809: LD_INT 87
2811: PPUSH
2812: LD_INT 0
2814: PPUSH
2815: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
2819: LD_EXP 34
2823: PPUSH
2824: LD_INT 214
2826: PPUSH
2827: LD_INT 87
2829: PPUSH
2830: CALL_OW 118
// if Kaia then
2834: LD_EXP 39
2838: IFFALSE 2873
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
2840: LD_EXP 39
2844: PPUSH
2845: LD_INT 213
2847: PPUSH
2848: LD_INT 85
2850: PPUSH
2851: LD_INT 0
2853: PPUSH
2854: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
2858: LD_EXP 39
2862: PPUSH
2863: LD_INT 215
2865: PPUSH
2866: LD_INT 87
2868: PPUSH
2869: CALL_OW 118
// end ; if Olaf and Kaia then
2873: LD_EXP 43
2877: PUSH
2878: LD_EXP 39
2882: AND
2883: IFFALSE 2920
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
2885: LD_EXP 43
2889: PPUSH
2890: LD_INT 215
2892: PPUSH
2893: LD_INT 87
2895: PPUSH
2896: LD_INT 0
2898: PPUSH
2899: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
2903: LD_EXP 43
2907: PPUSH
2908: LD_INT 213
2910: PPUSH
2911: LD_INT 85
2913: PPUSH
2914: CALL_OW 118
// end else
2918: GO 2940
// if Olaf then
2920: LD_EXP 43
2924: IFFALSE 2940
// PlaceHumanInUnit ( Olaf , factory ) ;
2926: LD_EXP 43
2930: PPUSH
2931: LD_VAR 0 8
2935: PPUSH
2936: CALL_OW 52
// if Givi then
2940: LD_EXP 35
2944: IFFALSE 3025
// begin if Kaia and Olaf then
2946: LD_EXP 39
2950: PUSH
2951: LD_EXP 43
2955: AND
2956: IFFALSE 2993
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
2958: LD_EXP 35
2962: PPUSH
2963: LD_INT 247
2965: PPUSH
2966: LD_INT 117
2968: PPUSH
2969: LD_INT 0
2971: PPUSH
2972: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2976: LD_EXP 35
2980: PPUSH
2981: LD_INT 248
2983: PPUSH
2984: LD_INT 118
2986: PPUSH
2987: CALL_OW 118
// end else
2991: GO 3025
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2993: LD_EXP 35
2997: PPUSH
2998: LD_INT 216
3000: PPUSH
3001: LD_INT 88
3003: PPUSH
3004: LD_INT 0
3006: PPUSH
3007: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
3011: LD_EXP 35
3015: PPUSH
3016: LD_EXP 34
3020: PPUSH
3021: CALL_OW 119
// end ; end ; if Kurt then
3025: LD_EXP 45
3029: IFFALSE 3049
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
3031: LD_EXP 45
3035: PPUSH
3036: LD_VAR 0 11
3040: PUSH
3041: LD_INT 2
3043: ARRAY
3044: PPUSH
3045: CALL_OW 52
// if Mike then
3049: LD_EXP 36
3053: IFFALSE 3073
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
3055: LD_EXP 36
3059: PPUSH
3060: LD_VAR 0 11
3064: PUSH
3065: LD_INT 3
3067: ARRAY
3068: PPUSH
3069: CALL_OW 52
// if Kamil then
3073: LD_EXP 38
3077: IFFALSE 3139
// begin if Kaia and Olaf then
3079: LD_EXP 39
3083: PUSH
3084: LD_EXP 43
3088: AND
3089: IFFALSE 3107
// PlaceHumanInUnit ( Kamil , depot ) else
3091: LD_EXP 38
3095: PPUSH
3096: LD_VAR 0 9
3100: PPUSH
3101: CALL_OW 52
3105: GO 3139
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
3107: LD_EXP 38
3111: PPUSH
3112: LD_INT 213
3114: PPUSH
3115: LD_INT 87
3117: PPUSH
3118: LD_INT 0
3120: PPUSH
3121: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
3125: LD_EXP 38
3129: PPUSH
3130: LD_EXP 34
3134: PPUSH
3135: CALL_OW 119
// end ; end ; if Sophia then
3139: LD_EXP 40
3143: IFFALSE 3159
// PlaceHumanInUnit ( Sophia , depot ) ;
3145: LD_EXP 40
3149: PPUSH
3150: LD_VAR 0 9
3154: PPUSH
3155: CALL_OW 52
// if Aviradze then
3159: LD_EXP 46
3163: IFFALSE 3212
// if lab then
3165: LD_VAR 0 10
3169: IFFALSE 3191
// PlaceHumanInUnit ( Aviradze , lab [ 1 ] ) else
3171: LD_EXP 46
3175: PPUSH
3176: LD_VAR 0 10
3180: PUSH
3181: LD_INT 1
3183: ARRAY
3184: PPUSH
3185: CALL_OW 52
3189: GO 3212
// PlaceUnitXYR ( Aviradze , 210 , 87 , 3 , false ) ;
3191: LD_EXP 46
3195: PPUSH
3196: LD_INT 210
3198: PPUSH
3199: LD_INT 87
3201: PPUSH
3202: LD_INT 3
3204: PPUSH
3205: LD_INT 0
3207: PPUSH
3208: CALL_OW 50
// if Ibrahim then
3212: LD_EXP 37
3216: IFFALSE 3265
// if lab then
3218: LD_VAR 0 10
3222: IFFALSE 3244
// PlaceHumanInUnit ( Ibrahim , lab [ 1 ] ) else
3224: LD_EXP 37
3228: PPUSH
3229: LD_VAR 0 10
3233: PUSH
3234: LD_INT 1
3236: ARRAY
3237: PPUSH
3238: CALL_OW 52
3242: GO 3265
// PlaceUnitXYR ( Ibrahim , 210 , 87 , 3 , false ) ;
3244: LD_EXP 37
3248: PPUSH
3249: LD_INT 210
3251: PPUSH
3252: LD_INT 87
3254: PPUSH
3255: LD_INT 3
3257: PPUSH
3258: LD_INT 0
3260: PPUSH
3261: CALL_OW 50
// if Markov then
3265: LD_EXP 41
3269: IFFALSE 3318
// if factory then
3271: LD_VAR 0 8
3275: IFFALSE 3297
// PlaceHumanInUnit ( Markov , factory [ 1 ] ) else
3277: LD_EXP 41
3281: PPUSH
3282: LD_VAR 0 8
3286: PUSH
3287: LD_INT 1
3289: ARRAY
3290: PPUSH
3291: CALL_OW 52
3295: GO 3318
// PlaceUnitXYR ( Markov , 210 , 87 , 3 , false ) ;
3297: LD_EXP 41
3301: PPUSH
3302: LD_INT 210
3304: PPUSH
3305: LD_INT 87
3307: PPUSH
3308: LD_INT 3
3310: PPUSH
3311: LD_INT 0
3313: PPUSH
3314: CALL_OW 50
// if heikeSecondSquad then
3318: LD_EXP 49
3322: IFFALSE 3362
// for i in heikeSecondSquad do
3324: LD_ADDR_VAR 0 2
3328: PUSH
3329: LD_EXP 49
3333: PUSH
3334: FOR_IN
3335: IFFALSE 3360
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
3337: LD_VAR 0 2
3341: PPUSH
3342: LD_INT 190
3344: PPUSH
3345: LD_INT 65
3347: PPUSH
3348: LD_INT 5
3350: PPUSH
3351: LD_INT 0
3353: PPUSH
3354: CALL_OW 50
3358: GO 3334
3360: POP
3361: POP
// if heikeApes then
3362: LD_EXP 50
3366: IFFALSE 3406
// for i in heikeApes do
3368: LD_ADDR_VAR 0 2
3372: PUSH
3373: LD_EXP 50
3377: PUSH
3378: FOR_IN
3379: IFFALSE 3404
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
3381: LD_VAR 0 2
3385: PPUSH
3386: LD_INT 190
3388: PPUSH
3389: LD_INT 70
3391: PPUSH
3392: LD_INT 5
3394: PPUSH
3395: LD_INT 0
3397: PPUSH
3398: CALL_OW 50
3402: GO 3378
3404: POP
3405: POP
// end ;
3406: LD_VAR 0 1
3410: RET
// export function PrepareRolfSquad ; var i , j ; begin
3411: LD_INT 0
3413: PPUSH
3414: PPUSH
3415: PPUSH
// uc_side := 8 ;
3416: LD_ADDR_OWVAR 20
3420: PUSH
3421: LD_INT 8
3423: ST_TO_ADDR
// uc_nation := 2 ;
3424: LD_ADDR_OWVAR 21
3428: PUSH
3429: LD_INT 2
3431: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
3432: LD_ADDR_EXP 47
3436: PUSH
3437: LD_STRING Bergkamp
3439: PPUSH
3440: CALL_OW 25
3444: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
3445: LD_ADDR_EXP 51
3449: PUSH
3450: LD_EXP 47
3454: PUSH
3455: EMPTY
3456: LIST
3457: ST_TO_ADDR
// for i := 1 to 4 do
3458: LD_ADDR_VAR 0 2
3462: PUSH
3463: DOUBLE
3464: LD_INT 1
3466: DEC
3467: ST_TO_ADDR
3468: LD_INT 4
3470: PUSH
3471: FOR_TO
3472: IFFALSE 3552
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
3474: LD_ADDR_VAR 0 3
3478: PUSH
3479: DOUBLE
3480: LD_INT 1
3482: DEC
3483: ST_TO_ADDR
3484: LD_INT 5
3486: PUSH
3487: LD_INT 2
3489: PUSH
3490: LD_INT 3
3492: PUSH
3493: LD_INT 1
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: PUSH
3502: LD_VAR 0 2
3506: ARRAY
3507: PUSH
3508: FOR_TO
3509: IFFALSE 3548
// begin PrepareHuman ( false , i , 5 ) ;
3511: LD_INT 0
3513: PPUSH
3514: LD_VAR 0 2
3518: PPUSH
3519: LD_INT 5
3521: PPUSH
3522: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
3526: LD_ADDR_EXP 51
3530: PUSH
3531: LD_EXP 51
3535: PPUSH
3536: CALL_OW 44
3540: PPUSH
3541: CALL 66694 0 2
3545: ST_TO_ADDR
// end ;
3546: GO 3508
3548: POP
3549: POP
// end ;
3550: GO 3471
3552: POP
3553: POP
// if HexInfo ( 5 , 3 ) then
3554: LD_INT 5
3556: PPUSH
3557: LD_INT 3
3559: PPUSH
3560: CALL_OW 428
3564: IFFALSE 3581
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
3566: LD_INT 5
3568: PPUSH
3569: LD_INT 3
3571: PPUSH
3572: CALL_OW 428
3576: PPUSH
3577: CALL_OW 64
// for i in rolfSquad do
3581: LD_ADDR_VAR 0 2
3585: PUSH
3586: LD_EXP 51
3590: PUSH
3591: FOR_IN
3592: IFFALSE 3728
// begin uc_direction := 2 ;
3594: LD_ADDR_OWVAR 24
3598: PUSH
3599: LD_INT 2
3601: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
3602: LD_VAR 0 2
3606: PPUSH
3607: CALL_OW 257
3611: PUSH
3612: LD_INT 3
3614: EQUAL
3615: IFFALSE 3689
// begin uc_side := 8 ;
3617: LD_ADDR_OWVAR 20
3621: PUSH
3622: LD_INT 8
3624: ST_TO_ADDR
// uc_nation := 2 ;
3625: LD_ADDR_OWVAR 21
3629: PUSH
3630: LD_INT 2
3632: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
3633: LD_INT 13
3635: PPUSH
3636: LD_INT 1
3638: PPUSH
3639: LD_INT 1
3641: PPUSH
3642: LD_INT 27
3644: PPUSH
3645: LD_INT 88
3647: PPUSH
3648: CALL 34241 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
3652: CALL_OW 45
3656: PPUSH
3657: LD_INT 11
3659: PPUSH
3660: LD_INT 0
3662: PPUSH
3663: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
3667: LD_VAR 0 2
3671: PPUSH
3672: LD_INT 5
3674: PPUSH
3675: LD_INT 3
3677: PPUSH
3678: CALL_OW 428
3682: PPUSH
3683: CALL_OW 52
// end else
3687: GO 3704
// PlaceUnitArea ( i , northSpawn , false ) ;
3689: LD_VAR 0 2
3693: PPUSH
3694: LD_INT 11
3696: PPUSH
3697: LD_INT 0
3699: PPUSH
3700: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
3704: LD_VAR 0 2
3708: PPUSH
3709: LD_INT 29
3711: PPUSH
3712: LD_INT 10
3714: PPUSH
3715: CALL_OW 111
// wait ( 0 0$2 ) ;
3719: LD_INT 70
3721: PPUSH
3722: CALL_OW 67
// end ;
3726: GO 3591
3728: POP
3729: POP
// wait ( 0 0$5 ) ;
3730: LD_INT 175
3732: PPUSH
3733: CALL_OW 67
// end ;
3737: LD_VAR 0 1
3741: RET
// export function PrepareRolfBase ; var i , tmp ; begin
3742: LD_INT 0
3744: PPUSH
3745: PPUSH
3746: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
3747: LD_EXP 47
3751: PPUSH
3752: LD_INT 94
3754: PPUSH
3755: LD_INT 63
3757: PPUSH
3758: CALL_OW 428
3762: PPUSH
3763: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
3767: LD_ADDR_VAR 0 3
3771: PUSH
3772: LD_INT 4
3774: PUSH
3775: LD_INT 82
3777: PUSH
3778: LD_INT 64
3780: PUSH
3781: LD_INT 1
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: PUSH
3790: LD_INT 31
3792: PUSH
3793: LD_INT 73
3795: PUSH
3796: LD_INT 58
3798: PUSH
3799: LD_INT 0
3801: PUSH
3802: EMPTY
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: ST_TO_ADDR
// for i in tmp do
3812: LD_ADDR_VAR 0 2
3816: PUSH
3817: LD_VAR 0 3
3821: PUSH
3822: FOR_IN
3823: IFFALSE 3887
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3825: LD_EXP 51
3829: PPUSH
3830: LD_INT 25
3832: PUSH
3833: LD_INT 2
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: PPUSH
3840: CALL_OW 72
3844: PPUSH
3845: LD_VAR 0 2
3849: PUSH
3850: LD_INT 1
3852: ARRAY
3853: PPUSH
3854: LD_VAR 0 2
3858: PUSH
3859: LD_INT 2
3861: ARRAY
3862: PPUSH
3863: LD_VAR 0 2
3867: PUSH
3868: LD_INT 3
3870: ARRAY
3871: PPUSH
3872: LD_VAR 0 2
3876: PUSH
3877: LD_INT 4
3879: ARRAY
3880: PPUSH
3881: CALL_OW 205
3885: GO 3822
3887: POP
3888: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
3889: LD_EXP 51
3893: PUSH
3894: LD_INT 2
3896: ARRAY
3897: PPUSH
3898: LD_INT 63
3900: PPUSH
3901: LD_INT 42
3903: PPUSH
3904: CALL_OW 428
3908: PPUSH
3909: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
3913: LD_EXP 51
3917: PUSH
3918: LD_INT 3
3920: ARRAY
3921: PPUSH
3922: LD_INT 94
3924: PPUSH
3925: LD_INT 63
3927: PPUSH
3928: CALL_OW 428
3932: PPUSH
3933: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3937: LD_INT 35
3939: PPUSH
3940: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
3944: LD_EXP 51
3948: PPUSH
3949: LD_INT 25
3951: PUSH
3952: LD_INT 2
3954: PUSH
3955: EMPTY
3956: LIST
3957: LIST
3958: PUSH
3959: LD_INT 3
3961: PUSH
3962: LD_INT 60
3964: PUSH
3965: EMPTY
3966: LIST
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: PUSH
3972: EMPTY
3973: LIST
3974: LIST
3975: PPUSH
3976: CALL_OW 72
3980: IFFALSE 3937
// rolfScriptBase := true ;
3982: LD_ADDR_EXP 9
3986: PUSH
3987: LD_INT 1
3989: ST_TO_ADDR
// end ;
3990: LD_VAR 0 1
3994: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
3995: LD_EXP 9
3999: PUSH
4000: LD_EXP 47
4004: PPUSH
4005: CALL_OW 255
4009: PUSH
4010: LD_INT 8
4012: EQUAL
4013: AND
4014: IFFALSE 5021
4016: GO 4018
4018: DISABLE
4019: LD_INT 0
4021: PPUSH
4022: PPUSH
4023: PPUSH
4024: PPUSH
4025: PPUSH
4026: PPUSH
4027: PPUSH
4028: PPUSH
4029: PPUSH
4030: PPUSH
// begin enable ;
4031: ENABLE
// if not rolfSquad then
4032: LD_EXP 51
4036: NOT
4037: IFFALSE 4041
// exit ;
4039: GO 5021
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
4041: LD_ADDR_VAR 0 9
4045: PUSH
4046: LD_INT 12
4048: PPUSH
4049: LD_INT 81
4051: PUSH
4052: LD_INT 8
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: PPUSH
4059: CALL_OW 70
4063: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
4064: LD_ADDR_VAR 0 5
4068: PUSH
4069: LD_EXP 51
4073: PPUSH
4074: LD_INT 25
4076: PUSH
4077: LD_INT 1
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: PPUSH
4084: CALL_OW 72
4088: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
4089: LD_ADDR_VAR 0 6
4093: PUSH
4094: LD_EXP 51
4098: PPUSH
4099: LD_INT 25
4101: PUSH
4102: LD_INT 2
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: PPUSH
4109: CALL_OW 72
4113: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
4114: LD_ADDR_VAR 0 8
4118: PUSH
4119: LD_EXP 51
4123: PPUSH
4124: LD_INT 25
4126: PUSH
4127: LD_INT 3
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: PPUSH
4134: CALL_OW 72
4138: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
4139: LD_ADDR_VAR 0 7
4143: PUSH
4144: LD_EXP 51
4148: PPUSH
4149: LD_INT 25
4151: PUSH
4152: LD_INT 4
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: PPUSH
4159: CALL_OW 72
4163: ST_TO_ADDR
// if sol then
4164: LD_VAR 0 5
4168: IFFALSE 4466
// for i in sol union Rolf do
4170: LD_ADDR_VAR 0 1
4174: PUSH
4175: LD_VAR 0 5
4179: PUSH
4180: LD_EXP 47
4184: UNION
4185: PUSH
4186: FOR_IN
4187: IFFALSE 4464
// if not IsInUnit ( i ) and not HasTask ( i ) then
4189: LD_VAR 0 1
4193: PPUSH
4194: CALL_OW 310
4198: NOT
4199: PUSH
4200: LD_VAR 0 1
4204: PPUSH
4205: CALL_OW 314
4209: NOT
4210: AND
4211: IFFALSE 4462
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
4213: LD_VAR 0 1
4217: PPUSH
4218: CALL_OW 256
4222: PUSH
4223: LD_INT 500
4225: LESS
4226: PUSH
4227: LD_VAR 0 1
4231: PPUSH
4232: LD_INT 80
4234: PPUSH
4235: LD_INT 49
4237: PPUSH
4238: CALL_OW 297
4242: PUSH
4243: LD_INT 6
4245: GREATER
4246: AND
4247: IFFALSE 4266
// begin ComMoveXY ( i , 80 , 49 ) ;
4249: LD_VAR 0 1
4253: PPUSH
4254: LD_INT 80
4256: PPUSH
4257: LD_INT 49
4259: PPUSH
4260: CALL_OW 111
// continue ;
4264: GO 4186
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4266: LD_ADDR_VAR 0 4
4270: PUSH
4271: LD_INT 22
4273: PUSH
4274: LD_INT 8
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: PUSH
4281: LD_INT 50
4283: PUSH
4284: EMPTY
4285: LIST
4286: PUSH
4287: LD_INT 2
4289: PUSH
4290: LD_INT 30
4292: PUSH
4293: LD_INT 4
4295: PUSH
4296: EMPTY
4297: LIST
4298: LIST
4299: PUSH
4300: LD_INT 30
4302: PUSH
4303: LD_INT 5
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PUSH
4310: LD_INT 30
4312: PUSH
4313: LD_INT 32
4315: PUSH
4316: EMPTY
4317: LIST
4318: LIST
4319: PUSH
4320: LD_INT 30
4322: PUSH
4323: LD_INT 31
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: PUSH
4330: EMPTY
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: LIST
4341: PPUSH
4342: CALL_OW 69
4346: ST_TO_ADDR
// if tmp then
4347: LD_VAR 0 4
4351: IFFALSE 4462
// begin for b in tmp do
4353: LD_ADDR_VAR 0 2
4357: PUSH
4358: LD_VAR 0 4
4362: PUSH
4363: FOR_IN
4364: IFFALSE 4460
// begin case GetBType ( b ) of b_armoury , b_barracks :
4366: LD_VAR 0 2
4370: PPUSH
4371: CALL_OW 266
4375: PUSH
4376: LD_INT 4
4378: DOUBLE
4379: EQUAL
4380: IFTRUE 4390
4382: LD_INT 5
4384: DOUBLE
4385: EQUAL
4386: IFTRUE 4390
4388: GO 4401
4390: POP
// p := 6 ; b_breastwork , b_bunker :
4391: LD_ADDR_VAR 0 3
4395: PUSH
4396: LD_INT 6
4398: ST_TO_ADDR
4399: GO 4427
4401: LD_INT 31
4403: DOUBLE
4404: EQUAL
4405: IFTRUE 4415
4407: LD_INT 32
4409: DOUBLE
4410: EQUAL
4411: IFTRUE 4415
4413: GO 4426
4415: POP
// p := 1 ; end ;
4416: LD_ADDR_VAR 0 3
4420: PUSH
4421: LD_INT 1
4423: ST_TO_ADDR
4424: GO 4427
4426: POP
// if UnitsInside ( b ) < p then
4427: LD_VAR 0 2
4431: PPUSH
4432: CALL_OW 313
4436: PUSH
4437: LD_VAR 0 3
4441: LESS
4442: IFFALSE 4458
// ComEnterUnit ( i , b ) ;
4444: LD_VAR 0 1
4448: PPUSH
4449: LD_VAR 0 2
4453: PPUSH
4454: CALL_OW 120
// end ;
4458: GO 4363
4460: POP
4461: POP
// end ; end ;
4462: GO 4186
4464: POP
4465: POP
// if sci then
4466: LD_VAR 0 7
4470: IFFALSE 4525
// for i in sci do
4472: LD_ADDR_VAR 0 1
4476: PUSH
4477: LD_VAR 0 7
4481: PUSH
4482: FOR_IN
4483: IFFALSE 4523
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
4485: LD_VAR 0 1
4489: PPUSH
4490: LD_INT 80
4492: PPUSH
4493: LD_INT 49
4495: PPUSH
4496: CALL_OW 297
4500: PUSH
4501: LD_INT 9
4503: GREATER
4504: IFFALSE 4521
// ComMoveXY ( i , 80 , 49 ) ;
4506: LD_VAR 0 1
4510: PPUSH
4511: LD_INT 80
4513: PPUSH
4514: LD_INT 49
4516: PPUSH
4517: CALL_OW 111
// end ;
4521: GO 4482
4523: POP
4524: POP
// if mech then
4525: LD_VAR 0 8
4529: IFFALSE 4743
// for i in mech do
4531: LD_ADDR_VAR 0 1
4535: PUSH
4536: LD_VAR 0 8
4540: PUSH
4541: FOR_IN
4542: IFFALSE 4741
// begin hasVehicle := IsInUnit ( i ) ;
4544: LD_ADDR_VAR 0 10
4548: PUSH
4549: LD_VAR 0 1
4553: PPUSH
4554: CALL_OW 310
4558: ST_TO_ADDR
// if enemyInBase then
4559: LD_VAR 0 9
4563: IFFALSE 4659
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
4565: LD_VAR 0 10
4569: PUSH
4570: LD_VAR 0 10
4574: PPUSH
4575: CALL_OW 256
4579: PUSH
4580: LD_INT 500
4582: GREATER
4583: AND
4584: IFFALSE 4612
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
4586: LD_VAR 0 10
4590: PPUSH
4591: LD_VAR 0 9
4595: PPUSH
4596: LD_VAR 0 10
4600: PPUSH
4601: CALL_OW 74
4605: PPUSH
4606: CALL_OW 115
4610: GO 4657
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
4612: LD_VAR 0 10
4616: PPUSH
4617: LD_INT 86
4619: PPUSH
4620: LD_INT 49
4622: PPUSH
4623: CALL_OW 297
4627: PUSH
4628: LD_INT 8
4630: GREATER
4631: IFFALSE 4657
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
4633: LD_VAR 0 10
4637: PPUSH
4638: LD_INT 86
4640: PPUSH
4641: LD_INT 49
4643: PPUSH
4644: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
4648: LD_VAR 0 1
4652: PPUSH
4653: CALL 68514 0 1
// end end else
4657: GO 4739
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
4659: LD_VAR 0 1
4663: PPUSH
4664: LD_INT 86
4666: PPUSH
4667: LD_INT 49
4669: PPUSH
4670: CALL_OW 297
4674: PUSH
4675: LD_INT 8
4677: GREATER
4678: IFFALSE 4697
// ComMoveXY ( i , 86 , 49 ) else
4680: LD_VAR 0 1
4684: PPUSH
4685: LD_INT 86
4687: PPUSH
4688: LD_INT 49
4690: PPUSH
4691: CALL_OW 111
4695: GO 4739
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
4697: LD_VAR 0 10
4701: PUSH
4702: LD_VAR 0 10
4706: PPUSH
4707: CALL_OW 256
4711: PUSH
4712: LD_INT 1000
4714: LESS
4715: AND
4716: IFFALSE 4739
// begin SetFuel ( hasVehicle , 100 ) ;
4718: LD_VAR 0 10
4722: PPUSH
4723: LD_INT 100
4725: PPUSH
4726: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
4730: LD_VAR 0 1
4734: PPUSH
4735: CALL 68394 0 1
// end ; end ; end ;
4739: GO 4541
4741: POP
4742: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4743: LD_ADDR_VAR 0 4
4747: PUSH
4748: LD_INT 12
4750: PPUSH
4751: LD_INT 3
4753: PUSH
4754: LD_INT 24
4756: PUSH
4757: LD_INT 1000
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: PUSH
4768: LD_INT 21
4770: PUSH
4771: LD_INT 3
4773: PUSH
4774: EMPTY
4775: LIST
4776: LIST
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: PPUSH
4782: CALL_OW 70
4786: ST_TO_ADDR
// if tmp and eng then
4787: LD_VAR 0 4
4791: PUSH
4792: LD_VAR 0 6
4796: AND
4797: IFFALSE 4903
// begin for i in eng do
4799: LD_ADDR_VAR 0 1
4803: PUSH
4804: LD_VAR 0 6
4808: PUSH
4809: FOR_IN
4810: IFFALSE 4901
// if IsInUnit ( i ) then
4812: LD_VAR 0 1
4816: PPUSH
4817: CALL_OW 310
4821: IFFALSE 4834
// ComExitBuilding ( i ) else
4823: LD_VAR 0 1
4827: PPUSH
4828: CALL_OW 122
4832: GO 4899
// if GetLives ( i ) = 1000 then
4834: LD_VAR 0 1
4838: PPUSH
4839: CALL_OW 256
4843: PUSH
4844: LD_INT 1000
4846: EQUAL
4847: IFFALSE 4869
// ComRepairBuilding ( i , tmp [ 1 ] ) else
4849: LD_VAR 0 1
4853: PPUSH
4854: LD_VAR 0 4
4858: PUSH
4859: LD_INT 1
4861: ARRAY
4862: PPUSH
4863: CALL_OW 130
4867: GO 4899
// if GetLives ( i ) < 700 then
4869: LD_VAR 0 1
4873: PPUSH
4874: CALL_OW 256
4878: PUSH
4879: LD_INT 700
4881: LESS
4882: IFFALSE 4899
// ComMoveXY ( i , 80 , 49 ) ;
4884: LD_VAR 0 1
4888: PPUSH
4889: LD_INT 80
4891: PPUSH
4892: LD_INT 49
4894: PPUSH
4895: CALL_OW 111
4899: GO 4809
4901: POP
4902: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
4903: LD_VAR 0 4
4907: NOT
4908: PUSH
4909: LD_VAR 0 6
4913: PPUSH
4914: LD_INT 3
4916: PUSH
4917: LD_INT 54
4919: PUSH
4920: EMPTY
4921: LIST
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PPUSH
4927: CALL_OW 72
4931: AND
4932: IFFALSE 5021
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
4934: LD_ADDR_VAR 0 1
4938: PUSH
4939: LD_VAR 0 6
4943: PPUSH
4944: LD_INT 3
4946: PUSH
4947: LD_INT 54
4949: PUSH
4950: EMPTY
4951: LIST
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: PPUSH
4957: CALL_OW 72
4961: PUSH
4962: FOR_IN
4963: IFFALSE 5019
// if GetLives ( i ) < 1000 then
4965: LD_VAR 0 1
4969: PPUSH
4970: CALL_OW 256
4974: PUSH
4975: LD_INT 1000
4977: LESS
4978: IFFALSE 4997
// ComMoveXY ( i , 80 , 49 ) else
4980: LD_VAR 0 1
4984: PPUSH
4985: LD_INT 80
4987: PPUSH
4988: LD_INT 49
4990: PPUSH
4991: CALL_OW 111
4995: GO 5017
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
4997: LD_VAR 0 1
5001: PPUSH
5002: LD_INT 86
5004: PPUSH
5005: LD_INT 54
5007: PPUSH
5008: CALL_OW 428
5012: PPUSH
5013: CALL_OW 120
5017: GO 4962
5019: POP
5020: POP
// end ;
5021: PPOPN 10
5023: END
// export function PrepareOmarSquad ; var i , j , p ; begin
5024: LD_INT 0
5026: PPUSH
5027: PPUSH
5028: PPUSH
5029: PPUSH
// uc_side := 5 ;
5030: LD_ADDR_OWVAR 20
5034: PUSH
5035: LD_INT 5
5037: ST_TO_ADDR
// uc_nation := 2 ;
5038: LD_ADDR_OWVAR 21
5042: PUSH
5043: LD_INT 2
5045: ST_TO_ADDR
// omarSquad := [ ] ;
5046: LD_ADDR_EXP 52
5050: PUSH
5051: EMPTY
5052: ST_TO_ADDR
// for i := 1 to 4 do
5053: LD_ADDR_VAR 0 2
5057: PUSH
5058: DOUBLE
5059: LD_INT 1
5061: DEC
5062: ST_TO_ADDR
5063: LD_INT 4
5065: PUSH
5066: FOR_TO
5067: IFFALSE 5190
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
5069: LD_ADDR_VAR 0 3
5073: PUSH
5074: DOUBLE
5075: LD_INT 1
5077: DEC
5078: ST_TO_ADDR
5079: LD_INT 6
5081: PUSH
5082: LD_INT 2
5084: PUSH
5085: LD_INT 2
5087: PUSH
5088: LD_EXP 21
5092: PLUS
5093: PUSH
5094: LD_INT 2
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: PUSH
5103: LD_VAR 0 2
5107: ARRAY
5108: PUSH
5109: FOR_TO
5110: IFFALSE 5186
// begin PrepareHuman ( false , i , 5 ) ;
5112: LD_INT 0
5114: PPUSH
5115: LD_VAR 0 2
5119: PPUSH
5120: LD_INT 5
5122: PPUSH
5123: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
5127: LD_ADDR_EXP 52
5131: PUSH
5132: LD_EXP 52
5136: PPUSH
5137: CALL_OW 44
5141: PPUSH
5142: CALL 66694 0 2
5146: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
5147: LD_VAR 0 2
5151: PUSH
5152: LD_INT 1
5154: EQUAL
5155: PUSH
5156: LD_INT 50
5158: PPUSH
5159: CALL_OW 13
5163: AND
5164: IFFALSE 5184
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
5166: LD_EXP 52
5170: PUSH
5171: LD_EXP 52
5175: ARRAY
5176: PPUSH
5177: LD_INT 8
5179: PPUSH
5180: CALL_OW 336
// end ;
5184: GO 5109
5186: POP
5187: POP
// end ;
5188: GO 5066
5190: POP
5191: POP
// if HexInfo ( 340 , 205 ) then
5192: LD_INT 340
5194: PPUSH
5195: LD_INT 205
5197: PPUSH
5198: CALL_OW 428
5202: IFFALSE 5219
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
5204: LD_INT 340
5206: PPUSH
5207: LD_INT 205
5209: PPUSH
5210: CALL_OW 428
5214: PPUSH
5215: CALL_OW 64
// p := 0 ;
5219: LD_ADDR_VAR 0 4
5223: PUSH
5224: LD_INT 0
5226: ST_TO_ADDR
// for i in omarSquad do
5227: LD_ADDR_VAR 0 2
5231: PUSH
5232: LD_EXP 52
5236: PUSH
5237: FOR_IN
5238: IFFALSE 5439
// begin uc_direction := 4 ;
5240: LD_ADDR_OWVAR 24
5244: PUSH
5245: LD_INT 4
5247: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
5248: LD_VAR 0 2
5252: PPUSH
5253: CALL_OW 257
5257: PUSH
5258: LD_INT 3
5260: EQUAL
5261: PUSH
5262: LD_VAR 0 4
5266: PUSH
5267: LD_INT 2
5269: LESS
5270: AND
5271: IFFALSE 5400
// begin p := p + 1 ;
5273: LD_ADDR_VAR 0 4
5277: PUSH
5278: LD_VAR 0 4
5282: PUSH
5283: LD_INT 1
5285: PLUS
5286: ST_TO_ADDR
// uc_side := 5 ;
5287: LD_ADDR_OWVAR 20
5291: PUSH
5292: LD_INT 5
5294: ST_TO_ADDR
// if rand ( 0 , 1 ) then
5295: LD_INT 0
5297: PPUSH
5298: LD_INT 1
5300: PPUSH
5301: CALL_OW 12
5305: IFFALSE 5336
// begin uc_nation := 2 ;
5307: LD_ADDR_OWVAR 21
5311: PUSH
5312: LD_INT 2
5314: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
5315: LD_INT 13
5317: PPUSH
5318: LD_INT 1
5320: PPUSH
5321: LD_INT 1
5323: PPUSH
5324: LD_INT 27
5326: PPUSH
5327: LD_INT 88
5329: PPUSH
5330: CALL 34241 0 5
// end else
5334: GO 5363
// begin uc_nation := 3 ;
5336: LD_ADDR_OWVAR 21
5340: PUSH
5341: LD_INT 3
5343: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
5344: LD_INT 22
5346: PPUSH
5347: LD_INT 1
5349: PPUSH
5350: LD_INT 1
5352: PPUSH
5353: LD_INT 45
5355: PPUSH
5356: LD_INT 88
5358: PPUSH
5359: CALL 34241 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
5363: CALL_OW 45
5367: PPUSH
5368: LD_INT 13
5370: PPUSH
5371: LD_INT 0
5373: PPUSH
5374: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
5378: LD_VAR 0 2
5382: PPUSH
5383: LD_INT 340
5385: PPUSH
5386: LD_INT 205
5388: PPUSH
5389: CALL_OW 428
5393: PPUSH
5394: CALL_OW 52
// end else
5398: GO 5415
// PlaceUnitArea ( i , southSpawn , false ) ;
5400: LD_VAR 0 2
5404: PPUSH
5405: LD_INT 13
5407: PPUSH
5408: LD_INT 0
5410: PPUSH
5411: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
5415: LD_VAR 0 2
5419: PPUSH
5420: LD_INT 333
5422: PPUSH
5423: LD_INT 210
5425: PPUSH
5426: CALL_OW 111
// wait ( 0 0$2 ) ;
5430: LD_INT 70
5432: PPUSH
5433: CALL_OW 67
// end ;
5437: GO 5237
5439: POP
5440: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
5441: LD_EXP 44
5445: PPUSH
5446: LD_INT 340
5448: PPUSH
5449: LD_INT 205
5451: PPUSH
5452: LD_INT 0
5454: PPUSH
5455: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
5459: LD_EXP 44
5463: PPUSH
5464: LD_INT 333
5466: PPUSH
5467: LD_INT 206
5469: PPUSH
5470: CALL_OW 111
// wait ( 0 0$2 ) ;
5474: LD_INT 70
5476: PPUSH
5477: CALL_OW 67
// ComHold ( omarSquad ) ;
5481: LD_EXP 52
5485: PPUSH
5486: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
5490: LD_EXP 44
5494: PUSH
5495: LD_EXP 52
5499: PPUSH
5500: LD_INT 2
5502: PUSH
5503: LD_INT 25
5505: PUSH
5506: LD_INT 1
5508: PUSH
5509: EMPTY
5510: LIST
5511: LIST
5512: PUSH
5513: LD_INT 25
5515: PUSH
5516: LD_INT 8
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: LIST
5527: PPUSH
5528: CALL_OW 72
5532: UNION
5533: PUSH
5534: LD_INT 22
5536: PUSH
5537: LD_INT 5
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: PUSH
5544: LD_INT 21
5546: PUSH
5547: LD_INT 2
5549: PUSH
5550: EMPTY
5551: LIST
5552: LIST
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: PPUSH
5558: CALL_OW 69
5562: UNION
5563: PPUSH
5564: LD_INT 315
5566: PPUSH
5567: LD_INT 214
5569: PPUSH
5570: CALL_OW 114
// wait ( 0 0$22 ) ;
5574: LD_INT 770
5576: PPUSH
5577: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
5581: LD_EXP 52
5585: PUSH
5586: LD_EXP 44
5590: UNION
5591: PPUSH
5592: LD_INT 329
5594: PPUSH
5595: LD_INT 231
5597: PPUSH
5598: CALL_OW 114
// end ;
5602: LD_VAR 0 1
5606: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
5607: LD_EXP 10
5611: IFFALSE 6694
5613: GO 5615
5615: DISABLE
5616: LD_INT 0
5618: PPUSH
5619: PPUSH
5620: PPUSH
5621: PPUSH
5622: PPUSH
5623: PPUSH
5624: PPUSH
5625: PPUSH
5626: PPUSH
5627: PPUSH
5628: PPUSH
// begin enable ;
5629: ENABLE
// if not omarSquad then
5630: LD_EXP 52
5634: NOT
5635: IFFALSE 5639
// exit ;
5637: GO 6694
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
5639: LD_ADDR_VAR 0 10
5643: PUSH
5644: LD_INT 14
5646: PPUSH
5647: LD_INT 81
5649: PUSH
5650: LD_INT 5
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: PPUSH
5657: CALL_OW 70
5661: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
5662: LD_ADDR_VAR 0 6
5666: PUSH
5667: LD_EXP 52
5671: PPUSH
5672: LD_INT 2
5674: PUSH
5675: LD_INT 25
5677: PUSH
5678: LD_INT 1
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: PUSH
5685: LD_INT 25
5687: PUSH
5688: LD_INT 8
5690: PUSH
5691: EMPTY
5692: LIST
5693: LIST
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: LIST
5699: PPUSH
5700: CALL_OW 72
5704: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
5705: LD_ADDR_VAR 0 7
5709: PUSH
5710: LD_EXP 52
5714: PPUSH
5715: LD_INT 25
5717: PUSH
5718: LD_INT 2
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: PPUSH
5725: CALL_OW 72
5729: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
5730: LD_ADDR_VAR 0 9
5734: PUSH
5735: LD_EXP 52
5739: PPUSH
5740: LD_INT 25
5742: PUSH
5743: LD_INT 3
5745: PUSH
5746: EMPTY
5747: LIST
5748: LIST
5749: PPUSH
5750: CALL_OW 72
5754: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
5755: LD_ADDR_VAR 0 8
5759: PUSH
5760: LD_EXP 52
5764: PPUSH
5765: LD_INT 25
5767: PUSH
5768: LD_INT 4
5770: PUSH
5771: EMPTY
5772: LIST
5773: LIST
5774: PPUSH
5775: CALL_OW 72
5779: ST_TO_ADDR
// if sol then
5780: LD_VAR 0 6
5784: IFFALSE 6148
// for i in sol do
5786: LD_ADDR_VAR 0 1
5790: PUSH
5791: LD_VAR 0 6
5795: PUSH
5796: FOR_IN
5797: IFFALSE 6146
// if not HasTask ( i ) then
5799: LD_VAR 0 1
5803: PPUSH
5804: CALL_OW 314
5808: NOT
5809: IFFALSE 6144
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
5811: LD_VAR 0 1
5815: PPUSH
5816: CALL_OW 310
5820: NOT
5821: PUSH
5822: LD_VAR 0 1
5826: PPUSH
5827: CALL_OW 256
5831: PUSH
5832: LD_INT 500
5834: LESS
5835: AND
5836: PUSH
5837: LD_VAR 0 1
5841: PPUSH
5842: LD_INT 333
5844: PPUSH
5845: LD_INT 234
5847: PPUSH
5848: CALL_OW 297
5852: PUSH
5853: LD_INT 6
5855: GREATER
5856: AND
5857: IFFALSE 5876
// begin ComMoveXY ( i , 333 , 234 ) ;
5859: LD_VAR 0 1
5863: PPUSH
5864: LD_INT 333
5866: PPUSH
5867: LD_INT 234
5869: PPUSH
5870: CALL_OW 111
// continue ;
5874: GO 5796
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
5876: LD_ADDR_VAR 0 5
5880: PUSH
5881: LD_INT 22
5883: PUSH
5884: LD_INT 5
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: PUSH
5891: LD_INT 58
5893: PUSH
5894: EMPTY
5895: LIST
5896: PUSH
5897: LD_INT 50
5899: PUSH
5900: EMPTY
5901: LIST
5902: PUSH
5903: LD_INT 2
5905: PUSH
5906: LD_INT 30
5908: PUSH
5909: LD_INT 32
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PUSH
5916: LD_INT 30
5918: PUSH
5919: LD_INT 31
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: LIST
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: LIST
5935: LIST
5936: PPUSH
5937: CALL_OW 69
5941: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
5942: LD_VAR 0 5
5946: PUSH
5947: LD_VAR 0 1
5951: PPUSH
5952: CALL_OW 310
5956: PPUSH
5957: CALL_OW 266
5961: PUSH
5962: LD_INT 31
5964: NONEQUAL
5965: AND
5966: IFFALSE 6048
// begin for j in tmp do
5968: LD_ADDR_VAR 0 2
5972: PUSH
5973: LD_VAR 0 5
5977: PUSH
5978: FOR_IN
5979: IFFALSE 6044
// if GetTag ( j ) <> 1 then
5981: LD_VAR 0 2
5985: PPUSH
5986: CALL_OW 110
5990: PUSH
5991: LD_INT 1
5993: NONEQUAL
5994: IFFALSE 6042
// begin SetTag ( j , 1 ) ;
5996: LD_VAR 0 2
6000: PPUSH
6001: LD_INT 1
6003: PPUSH
6004: CALL_OW 109
// if IsInUnit ( i ) then
6008: LD_VAR 0 1
6012: PPUSH
6013: CALL_OW 310
6017: IFFALSE 6028
// ComExit ( i ) ;
6019: LD_VAR 0 1
6023: PPUSH
6024: CALL 67092 0 1
// AddComEnterUnit ( i , j ) ;
6028: LD_VAR 0 1
6032: PPUSH
6033: LD_VAR 0 2
6037: PPUSH
6038: CALL_OW 180
// end ;
6042: GO 5978
6044: POP
6045: POP
// end else
6046: GO 6144
// if not IsInUnit ( i ) then
6048: LD_VAR 0 1
6052: PPUSH
6053: CALL_OW 310
6057: NOT
6058: IFFALSE 6144
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
6060: LD_ADDR_VAR 0 5
6064: PUSH
6065: LD_INT 22
6067: PUSH
6068: LD_INT 5
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: PUSH
6075: LD_INT 50
6077: PUSH
6078: EMPTY
6079: LIST
6080: PUSH
6081: LD_INT 30
6083: PUSH
6084: LD_INT 4
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: LIST
6095: PPUSH
6096: CALL_OW 69
6100: ST_TO_ADDR
// if tmp then
6101: LD_VAR 0 5
6105: IFFALSE 6144
// if UnitsInside ( tmp [ 1 ] ) < 6 then
6107: LD_VAR 0 5
6111: PUSH
6112: LD_INT 1
6114: ARRAY
6115: PPUSH
6116: CALL_OW 313
6120: PUSH
6121: LD_INT 6
6123: LESS
6124: IFFALSE 6144
// ComEnterUnit ( i , tmp [ 1 ] ) ;
6126: LD_VAR 0 1
6130: PPUSH
6131: LD_VAR 0 5
6135: PUSH
6136: LD_INT 1
6138: ARRAY
6139: PPUSH
6140: CALL_OW 120
// end ; end ;
6144: GO 5796
6146: POP
6147: POP
// if sci then
6148: LD_VAR 0 8
6152: IFFALSE 6207
// for i in sci do
6154: LD_ADDR_VAR 0 1
6158: PUSH
6159: LD_VAR 0 8
6163: PUSH
6164: FOR_IN
6165: IFFALSE 6205
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
6167: LD_VAR 0 1
6171: PPUSH
6172: LD_INT 333
6174: PPUSH
6175: LD_INT 234
6177: PPUSH
6178: CALL_OW 297
6182: PUSH
6183: LD_INT 9
6185: GREATER
6186: IFFALSE 6203
// ComMoveXY ( i , 333 , 234 ) ;
6188: LD_VAR 0 1
6192: PPUSH
6193: LD_INT 333
6195: PPUSH
6196: LD_INT 234
6198: PPUSH
6199: CALL_OW 111
// end ;
6203: GO 6164
6205: POP
6206: POP
// if mech then
6207: LD_VAR 0 9
6211: IFFALSE 6416
// for i in mech do
6213: LD_ADDR_VAR 0 1
6217: PUSH
6218: LD_VAR 0 9
6222: PUSH
6223: FOR_IN
6224: IFFALSE 6414
// begin hasVehicle := IsInUnit ( i ) ;
6226: LD_ADDR_VAR 0 11
6230: PUSH
6231: LD_VAR 0 1
6235: PPUSH
6236: CALL_OW 310
6240: ST_TO_ADDR
// if enemyInBase then
6241: LD_VAR 0 10
6245: IFFALSE 6332
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
6247: LD_VAR 0 11
6251: PUSH
6252: LD_VAR 0 11
6256: PPUSH
6257: CALL_OW 256
6261: PUSH
6262: LD_INT 500
6264: GREATER
6265: AND
6266: IFFALSE 6294
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
6268: LD_VAR 0 11
6272: PPUSH
6273: LD_VAR 0 10
6277: PPUSH
6278: LD_VAR 0 11
6282: PPUSH
6283: CALL_OW 74
6287: PPUSH
6288: CALL_OW 115
6292: GO 6330
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
6294: LD_VAR 0 11
6298: PPUSH
6299: LD_INT 333
6301: PPUSH
6302: LD_INT 234
6304: PPUSH
6305: CALL_OW 297
6309: PUSH
6310: LD_INT 6
6312: GREATER
6313: IFFALSE 6330
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
6315: LD_VAR 0 11
6319: PPUSH
6320: LD_INT 333
6322: PPUSH
6323: LD_INT 234
6325: PPUSH
6326: CALL_OW 111
// end else
6330: GO 6412
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
6332: LD_VAR 0 1
6336: PPUSH
6337: LD_INT 333
6339: PPUSH
6340: LD_INT 234
6342: PPUSH
6343: CALL_OW 297
6347: PUSH
6348: LD_INT 6
6350: GREATER
6351: IFFALSE 6370
// ComMoveXY ( i , 333 , 234 ) else
6353: LD_VAR 0 1
6357: PPUSH
6358: LD_INT 333
6360: PPUSH
6361: LD_INT 234
6363: PPUSH
6364: CALL_OW 111
6368: GO 6412
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
6370: LD_VAR 0 11
6374: PUSH
6375: LD_VAR 0 11
6379: PPUSH
6380: CALL_OW 256
6384: PUSH
6385: LD_INT 1000
6387: LESS
6388: AND
6389: IFFALSE 6412
// begin SetFuel ( hasVehicle , 100 ) ;
6391: LD_VAR 0 11
6395: PPUSH
6396: LD_INT 100
6398: PPUSH
6399: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
6403: LD_VAR 0 1
6407: PPUSH
6408: CALL 68394 0 1
// end ; end ; end ;
6412: GO 6223
6414: POP
6415: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6416: LD_ADDR_VAR 0 5
6420: PUSH
6421: LD_INT 14
6423: PPUSH
6424: LD_INT 3
6426: PUSH
6427: LD_INT 24
6429: PUSH
6430: LD_INT 1000
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: PUSH
6441: LD_INT 21
6443: PUSH
6444: LD_INT 3
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: PPUSH
6455: CALL_OW 70
6459: ST_TO_ADDR
// if tmp and eng then
6460: LD_VAR 0 5
6464: PUSH
6465: LD_VAR 0 7
6469: AND
6470: IFFALSE 6576
// begin for i in eng do
6472: LD_ADDR_VAR 0 1
6476: PUSH
6477: LD_VAR 0 7
6481: PUSH
6482: FOR_IN
6483: IFFALSE 6574
// if IsInUnit ( i ) then
6485: LD_VAR 0 1
6489: PPUSH
6490: CALL_OW 310
6494: IFFALSE 6507
// ComExitBuilding ( i ) else
6496: LD_VAR 0 1
6500: PPUSH
6501: CALL_OW 122
6505: GO 6572
// if GetLives ( i ) = 1000 then
6507: LD_VAR 0 1
6511: PPUSH
6512: CALL_OW 256
6516: PUSH
6517: LD_INT 1000
6519: EQUAL
6520: IFFALSE 6542
// ComRepairBuilding ( i , tmp [ 1 ] ) else
6522: LD_VAR 0 1
6526: PPUSH
6527: LD_VAR 0 5
6531: PUSH
6532: LD_INT 1
6534: ARRAY
6535: PPUSH
6536: CALL_OW 130
6540: GO 6572
// if GetLives ( i ) < 700 then
6542: LD_VAR 0 1
6546: PPUSH
6547: CALL_OW 256
6551: PUSH
6552: LD_INT 700
6554: LESS
6555: IFFALSE 6572
// ComMoveXY ( i , 333 , 234 ) ;
6557: LD_VAR 0 1
6561: PPUSH
6562: LD_INT 333
6564: PPUSH
6565: LD_INT 234
6567: PPUSH
6568: CALL_OW 111
6572: GO 6482
6574: POP
6575: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
6576: LD_VAR 0 5
6580: NOT
6581: PUSH
6582: LD_VAR 0 7
6586: PPUSH
6587: LD_INT 3
6589: PUSH
6590: LD_INT 54
6592: PUSH
6593: EMPTY
6594: LIST
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: PPUSH
6600: CALL_OW 72
6604: AND
6605: IFFALSE 6694
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
6607: LD_ADDR_VAR 0 1
6611: PUSH
6612: LD_VAR 0 7
6616: PPUSH
6617: LD_INT 3
6619: PUSH
6620: LD_INT 54
6622: PUSH
6623: EMPTY
6624: LIST
6625: PUSH
6626: EMPTY
6627: LIST
6628: LIST
6629: PPUSH
6630: CALL_OW 72
6634: PUSH
6635: FOR_IN
6636: IFFALSE 6692
// if GetLives ( i ) < 1000 then
6638: LD_VAR 0 1
6642: PPUSH
6643: CALL_OW 256
6647: PUSH
6648: LD_INT 1000
6650: LESS
6651: IFFALSE 6670
// ComMoveXY ( i , 333 , 234 ) else
6653: LD_VAR 0 1
6657: PPUSH
6658: LD_INT 333
6660: PPUSH
6661: LD_INT 234
6663: PPUSH
6664: CALL_OW 111
6668: GO 6690
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
6670: LD_VAR 0 1
6674: PPUSH
6675: LD_INT 341
6677: PPUSH
6678: LD_INT 232
6680: PPUSH
6681: CALL_OW 428
6685: PPUSH
6686: CALL_OW 120
6690: GO 6635
6692: POP
6693: POP
// end ;
6694: PPOPN 11
6696: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
6697: LD_EXP 44
6701: PPUSH
6702: CALL_OW 256
6706: PUSH
6707: LD_INT 1000
6709: LESS
6710: IFFALSE 6728
6712: GO 6714
6714: DISABLE
// begin enable ;
6715: ENABLE
// SetLives ( Omar , 1000 ) ;
6716: LD_EXP 44
6720: PPUSH
6721: LD_INT 1000
6723: PPUSH
6724: CALL_OW 234
// end ;
6728: END
// every 0 0$1 trigger GetLives ( Rolf ) < 1000 and rolfAttack do
6729: LD_EXP 47
6733: PPUSH
6734: CALL_OW 256
6738: PUSH
6739: LD_INT 1000
6741: LESS
6742: PUSH
6743: LD_EXP 32
6747: AND
6748: IFFALSE 6766
6750: GO 6752
6752: DISABLE
// begin enable ;
6753: ENABLE
// SetLives ( Rolf , 1000 ) ;
6754: LD_EXP 47
6758: PPUSH
6759: LD_INT 1000
6761: PPUSH
6762: CALL_OW 234
// end ;
6766: END
// every 0 0$1 trigger rolfAttack do var i , tmp , mech , path , tag , rolfCoords ;
6767: LD_EXP 32
6771: IFFALSE 7451
6773: GO 6775
6775: DISABLE
6776: LD_INT 0
6778: PPUSH
6779: PPUSH
6780: PPUSH
6781: PPUSH
6782: PPUSH
6783: PPUSH
// begin path := [ [ 215 , 162 ] , [ 195 , 163 ] , [ 174 , 162 ] , [ 145 , 163 ] , [ 127 , 163 ] ] ;
6784: LD_ADDR_VAR 0 4
6788: PUSH
6789: LD_INT 215
6791: PUSH
6792: LD_INT 162
6794: PUSH
6795: EMPTY
6796: LIST
6797: LIST
6798: PUSH
6799: LD_INT 195
6801: PUSH
6802: LD_INT 163
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PUSH
6809: LD_INT 174
6811: PUSH
6812: LD_INT 162
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PUSH
6819: LD_INT 145
6821: PUSH
6822: LD_INT 163
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PUSH
6829: LD_INT 127
6831: PUSH
6832: LD_INT 163
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: ST_TO_ADDR
// rolfCoords := [ 221 , 161 ] ;
6846: LD_ADDR_VAR 0 6
6850: PUSH
6851: LD_INT 221
6853: PUSH
6854: LD_INT 161
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: ST_TO_ADDR
// tmp := Rolf union rolfSquad ;
6861: LD_ADDR_VAR 0 2
6865: PUSH
6866: LD_EXP 47
6870: PUSH
6871: LD_EXP 51
6875: UNION
6876: ST_TO_ADDR
// if not tmp then
6877: LD_VAR 0 2
6881: NOT
6882: IFFALSE 6886
// exit ;
6884: GO 7451
// ComMoveXY ( tmp , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
6886: LD_VAR 0 2
6890: PPUSH
6891: LD_VAR 0 6
6895: PUSH
6896: LD_INT 1
6898: ARRAY
6899: PPUSH
6900: LD_VAR 0 6
6904: PUSH
6905: LD_INT 2
6907: ARRAY
6908: PPUSH
6909: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6913: LD_INT 35
6915: PPUSH
6916: CALL_OW 67
// tmp := UnitFilter ( rolfSquad , [ [ f_not , [ f_driving ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) ;
6920: LD_ADDR_VAR 0 2
6924: PUSH
6925: LD_EXP 51
6929: PPUSH
6930: LD_INT 3
6932: PUSH
6933: LD_INT 55
6935: PUSH
6936: EMPTY
6937: LIST
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PUSH
6943: LD_INT 2
6945: PUSH
6946: LD_INT 25
6948: PUSH
6949: LD_INT 1
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: LD_INT 25
6958: PUSH
6959: LD_INT 8
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: LIST
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PPUSH
6975: CALL_OW 72
6979: ST_TO_ADDR
// if tmp then
6980: LD_VAR 0 2
6984: IFFALSE 7137
// begin for i in tmp do
6986: LD_ADDR_VAR 0 1
6990: PUSH
6991: LD_VAR 0 2
6995: PUSH
6996: FOR_IN
6997: IFFALSE 7135
// begin tag := GetTag ( i ) ;
6999: LD_ADDR_VAR 0 5
7003: PUSH
7004: LD_VAR 0 1
7008: PPUSH
7009: CALL_OW 110
7013: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
7014: LD_VAR 0 1
7018: PPUSH
7019: CALL_OW 256
7023: PUSH
7024: LD_INT 800
7026: LESS
7027: PUSH
7028: LD_VAR 0 5
7032: PUSH
7033: LD_INT 101
7035: LESS
7036: AND
7037: IFFALSE 7080
// begin SetTag ( i , 101 ) ;
7039: LD_VAR 0 1
7043: PPUSH
7044: LD_INT 101
7046: PPUSH
7047: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7051: LD_VAR 0 1
7055: PPUSH
7056: LD_VAR 0 6
7060: PUSH
7061: LD_INT 1
7063: ARRAY
7064: PPUSH
7065: LD_VAR 0 6
7069: PUSH
7070: LD_INT 2
7072: ARRAY
7073: PPUSH
7074: CALL_OW 111
// end else
7078: GO 7133
// if tag = 101 then
7080: LD_VAR 0 5
7084: PUSH
7085: LD_INT 101
7087: EQUAL
7088: IFFALSE 7119
// begin if GetLives ( i ) = 1000 then
7090: LD_VAR 0 1
7094: PPUSH
7095: CALL_OW 256
7099: PUSH
7100: LD_INT 1000
7102: EQUAL
7103: IFFALSE 7117
// SetTag ( i , 0 ) ;
7105: LD_VAR 0 1
7109: PPUSH
7110: LD_INT 0
7112: PPUSH
7113: CALL_OW 109
// end else
7117: GO 7133
// AgressiveMove ( i , path ) ;
7119: LD_VAR 0 1
7123: PPUSH
7124: LD_VAR 0 4
7128: PPUSH
7129: CALL 69298 0 2
// end ;
7133: GO 6996
7135: POP
7136: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
7137: LD_ADDR_VAR 0 2
7141: PUSH
7142: LD_INT 22
7144: PUSH
7145: LD_INT 8
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: PUSH
7152: LD_INT 21
7154: PUSH
7155: LD_INT 2
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PUSH
7162: LD_INT 3
7164: PUSH
7165: LD_INT 34
7167: PUSH
7168: LD_INT 32
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: LIST
7183: PPUSH
7184: CALL_OW 69
7188: ST_TO_ADDR
// if not tmp then
7189: LD_VAR 0 2
7193: NOT
7194: IFFALSE 7198
// continue ;
7196: GO 6913
// for i in tmp do
7198: LD_ADDR_VAR 0 1
7202: PUSH
7203: LD_VAR 0 2
7207: PUSH
7208: FOR_IN
7209: IFFALSE 7442
// begin mech := IsDrivenBy ( i ) ;
7211: LD_ADDR_VAR 0 3
7215: PUSH
7216: LD_VAR 0 1
7220: PPUSH
7221: CALL_OW 311
7225: ST_TO_ADDR
// if not mech then
7226: LD_VAR 0 3
7230: NOT
7231: IFFALSE 7235
// continue ;
7233: GO 7208
// tag := GetTag ( i ) ;
7235: LD_ADDR_VAR 0 5
7239: PUSH
7240: LD_VAR 0 1
7244: PPUSH
7245: CALL_OW 110
7249: ST_TO_ADDR
// if GetLives ( i ) >= 600 and tag < 101 then
7250: LD_VAR 0 1
7254: PPUSH
7255: CALL_OW 256
7259: PUSH
7260: LD_INT 600
7262: GREATEREQUAL
7263: PUSH
7264: LD_VAR 0 5
7268: PUSH
7269: LD_INT 101
7271: LESS
7272: AND
7273: IFFALSE 7289
// AgressiveMove ( i , path ) ;
7275: LD_VAR 0 1
7279: PPUSH
7280: LD_VAR 0 4
7284: PPUSH
7285: CALL 69298 0 2
// if GetLives ( i ) < 600 and tag < 101 then
7289: LD_VAR 0 1
7293: PPUSH
7294: CALL_OW 256
7298: PUSH
7299: LD_INT 600
7301: LESS
7302: PUSH
7303: LD_VAR 0 5
7307: PUSH
7308: LD_INT 101
7310: LESS
7311: AND
7312: IFFALSE 7353
// begin SetTag ( i , 101 ) ;
7314: LD_VAR 0 1
7318: PPUSH
7319: LD_INT 101
7321: PPUSH
7322: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7326: LD_VAR 0 1
7330: PPUSH
7331: LD_VAR 0 6
7335: PUSH
7336: LD_INT 1
7338: ARRAY
7339: PPUSH
7340: LD_VAR 0 6
7344: PUSH
7345: LD_INT 2
7347: ARRAY
7348: PPUSH
7349: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) < 9 and mech then
7353: LD_VAR 0 5
7357: PUSH
7358: LD_INT 101
7360: EQUAL
7361: PUSH
7362: LD_VAR 0 1
7366: PPUSH
7367: LD_VAR 0 6
7371: PUSH
7372: LD_INT 1
7374: ARRAY
7375: PPUSH
7376: LD_VAR 0 6
7380: PUSH
7381: LD_INT 2
7383: ARRAY
7384: PPUSH
7385: CALL_OW 297
7389: PUSH
7390: LD_INT 9
7392: LESS
7393: AND
7394: PUSH
7395: LD_VAR 0 3
7399: AND
7400: IFFALSE 7440
// begin if GetLives ( i ) < 1000 then
7402: LD_VAR 0 1
7406: PPUSH
7407: CALL_OW 256
7411: PUSH
7412: LD_INT 1000
7414: LESS
7415: IFFALSE 7428
// AddComRepairVehicleAndReturn ( mech ) else
7417: LD_VAR 0 3
7421: PPUSH
7422: CALL 68514 0 1
7426: GO 7440
// SetTag ( i , 0 ) ;
7428: LD_VAR 0 1
7432: PPUSH
7433: LD_INT 0
7435: PPUSH
7436: CALL_OW 109
// end ; end ;
7440: GO 7208
7442: POP
7443: POP
// until not tmp ;
7444: LD_VAR 0 2
7448: NOT
7449: IFFALSE 6913
// end ;
7451: PPOPN 6
7453: END
// every 0 0$1 trigger omarAttack do var i , cargo , tmp , tag , mech , x , path , omarAttackCoords ;
7454: LD_EXP 23
7458: IFFALSE 8763
7460: GO 7462
7462: DISABLE
7463: LD_INT 0
7465: PPUSH
7466: PPUSH
7467: PPUSH
7468: PPUSH
7469: PPUSH
7470: PPUSH
7471: PPUSH
7472: PPUSH
// begin path := [ [ 209 , 221 ] , [ 190 , 220 ] , [ 177 , 220 ] , [ 168 , 223 ] , [ 150 , 206 ] ] ;
7473: LD_ADDR_VAR 0 7
7477: PUSH
7478: LD_INT 209
7480: PUSH
7481: LD_INT 221
7483: PUSH
7484: EMPTY
7485: LIST
7486: LIST
7487: PUSH
7488: LD_INT 190
7490: PUSH
7491: LD_INT 220
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: PUSH
7498: LD_INT 177
7500: PUSH
7501: LD_INT 220
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: PUSH
7508: LD_INT 168
7510: PUSH
7511: LD_INT 223
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: PUSH
7518: LD_INT 150
7520: PUSH
7521: LD_INT 206
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: ST_TO_ADDR
// omarAttackCoords := [ 219 , 225 , 0 ] ;
7535: LD_ADDR_VAR 0 8
7539: PUSH
7540: LD_INT 219
7542: PUSH
7543: LD_INT 225
7545: PUSH
7546: LD_INT 0
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: LIST
7553: ST_TO_ADDR
// for i := 1 to 2 do
7554: LD_ADDR_VAR 0 1
7558: PUSH
7559: DOUBLE
7560: LD_INT 1
7562: DEC
7563: ST_TO_ADDR
7564: LD_INT 2
7566: PUSH
7567: FOR_TO
7568: IFFALSE 7717
// begin uc_side := 5 ;
7570: LD_ADDR_OWVAR 20
7574: PUSH
7575: LD_INT 5
7577: ST_TO_ADDR
// uc_nation := 2 ;
7578: LD_ADDR_OWVAR 21
7582: PUSH
7583: LD_INT 2
7585: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
7586: LD_INT 14
7588: PPUSH
7589: LD_INT 1
7591: PPUSH
7592: LD_INT 1
7594: PPUSH
7595: LD_INT 32
7597: PPUSH
7598: LD_INT 80
7600: PPUSH
7601: CALL 34241 0 5
// cargo := Join ( cargo , CreateVehicle ) ;
7605: LD_ADDR_VAR 0 2
7609: PUSH
7610: LD_VAR 0 2
7614: PPUSH
7615: CALL_OW 45
7619: PPUSH
7620: CALL 66694 0 2
7624: ST_TO_ADDR
// SetDir ( cargo [ i ] , 4 ) ;
7625: LD_VAR 0 2
7629: PUSH
7630: LD_VAR 0 1
7634: ARRAY
7635: PPUSH
7636: LD_INT 4
7638: PPUSH
7639: CALL_OW 233
// PlaceUnitArea ( cargo [ i ] , omarVehiclesArea , false ) ;
7643: LD_VAR 0 2
7647: PUSH
7648: LD_VAR 0 1
7652: ARRAY
7653: PPUSH
7654: LD_INT 16
7656: PPUSH
7657: LD_INT 0
7659: PPUSH
7660: CALL_OW 49
// PrepareMechanic ( false , 4 ) ;
7664: LD_INT 0
7666: PPUSH
7667: LD_INT 4
7669: PPUSH
7670: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo [ i ] ) ;
7674: CALL_OW 44
7678: PPUSH
7679: LD_VAR 0 2
7683: PUSH
7684: LD_VAR 0 1
7688: ARRAY
7689: PPUSH
7690: CALL_OW 52
// ComMoveXY ( cargo [ i ] , 337 , 232 ) ;
7694: LD_VAR 0 2
7698: PUSH
7699: LD_VAR 0 1
7703: ARRAY
7704: PPUSH
7705: LD_INT 337
7707: PPUSH
7708: LD_INT 232
7710: PPUSH
7711: CALL_OW 111
// end ;
7715: GO 7567
7717: POP
7718: POP
// wait ( 0 0$25 ) ;
7719: LD_INT 875
7721: PPUSH
7722: CALL_OW 67
// for i := 1 to 2 do
7726: LD_ADDR_VAR 0 1
7730: PUSH
7731: DOUBLE
7732: LD_INT 1
7734: DEC
7735: ST_TO_ADDR
7736: LD_INT 2
7738: PUSH
7739: FOR_TO
7740: IFFALSE 7765
// SetCargo ( cargo [ i ] , mat_oil , 100 ) ;
7742: LD_VAR 0 2
7746: PUSH
7747: LD_VAR 0 1
7751: ARRAY
7752: PPUSH
7753: LD_INT 2
7755: PPUSH
7756: LD_INT 100
7758: PPUSH
7759: CALL_OW 290
7763: GO 7739
7765: POP
7766: POP
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
7767: LD_EXP 52
7771: PPUSH
7772: LD_INT 2
7774: PUSH
7775: LD_INT 25
7777: PUSH
7778: LD_INT 1
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: PUSH
7785: LD_INT 25
7787: PUSH
7788: LD_INT 8
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: LIST
7799: PPUSH
7800: CALL_OW 72
7804: PPUSH
7805: CALL_OW 122
// wait ( 0 0$3 ) ;
7809: LD_INT 105
7811: PPUSH
7812: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
7816: LD_EXP 52
7820: PUSH
7821: LD_EXP 44
7825: UNION
7826: PPUSH
7827: LD_VAR 0 8
7831: PUSH
7832: LD_INT 1
7834: ARRAY
7835: PPUSH
7836: LD_VAR 0 8
7840: PUSH
7841: LD_INT 2
7843: ARRAY
7844: PPUSH
7845: CALL_OW 174
// wait ( 0 0$3 ) ;
7849: LD_INT 105
7851: PPUSH
7852: CALL_OW 67
// AddComMoveXY ( cargo , 218 , 217 ) ;
7856: LD_VAR 0 2
7860: PPUSH
7861: LD_INT 218
7863: PPUSH
7864: LD_INT 217
7866: PPUSH
7867: CALL_OW 171
// wait ( 1 1$00 ) ;
7871: LD_INT 2100
7873: PPUSH
7874: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7878: LD_INT 35
7880: PPUSH
7881: CALL_OW 67
// if omarAttackCoords [ 3 ] = 0 then
7885: LD_VAR 0 8
7889: PUSH
7890: LD_INT 3
7892: ARRAY
7893: PUSH
7894: LD_INT 0
7896: EQUAL
7897: IFFALSE 8002
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 168 , 229 , 12 ] ] ) = 0 then
7899: LD_INT 22
7901: PUSH
7902: LD_INT 3
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: PUSH
7909: LD_INT 92
7911: PUSH
7912: LD_INT 168
7914: PUSH
7915: LD_INT 229
7917: PUSH
7918: LD_INT 12
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: PUSH
7927: EMPTY
7928: LIST
7929: LIST
7930: PPUSH
7931: CALL_OW 69
7935: PUSH
7936: LD_INT 0
7938: EQUAL
7939: IFFALSE 8002
// begin omarAttackCoords := [ 167 , 222 , 1 ] ;
7941: LD_ADDR_VAR 0 8
7945: PUSH
7946: LD_INT 167
7948: PUSH
7949: LD_INT 222
7951: PUSH
7952: LD_INT 1
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: LIST
7959: ST_TO_ADDR
// AddComMoveXY ( Omar ^ cargo ^ UnitFilter ( omarSquad , [ f_class , 4 ] ) , 167 , 222 ) ;
7960: LD_EXP 44
7964: PUSH
7965: LD_VAR 0 2
7969: ADD
7970: PUSH
7971: LD_EXP 52
7975: PPUSH
7976: LD_INT 25
7978: PUSH
7979: LD_INT 4
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: PPUSH
7986: CALL_OW 72
7990: ADD
7991: PPUSH
7992: LD_INT 167
7994: PPUSH
7995: LD_INT 222
7997: PPUSH
7998: CALL_OW 171
// end ; tmp := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) ;
8002: LD_ADDR_VAR 0 3
8006: PUSH
8007: LD_EXP 52
8011: PPUSH
8012: LD_INT 3
8014: PUSH
8015: LD_INT 55
8017: PUSH
8018: EMPTY
8019: LIST
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: PUSH
8025: LD_INT 2
8027: PUSH
8028: LD_INT 25
8030: PUSH
8031: LD_INT 1
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: PUSH
8038: LD_INT 25
8040: PUSH
8041: LD_INT 8
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: LIST
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: PPUSH
8057: CALL_OW 72
8061: ST_TO_ADDR
// if tmp then
8062: LD_VAR 0 3
8066: IFFALSE 8279
// begin for i in tmp do
8068: LD_ADDR_VAR 0 1
8072: PUSH
8073: LD_VAR 0 3
8077: PUSH
8078: FOR_IN
8079: IFFALSE 8277
// begin tag := GetTag ( i ) ;
8081: LD_ADDR_VAR 0 4
8085: PUSH
8086: LD_VAR 0 1
8090: PPUSH
8091: CALL_OW 110
8095: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
8096: LD_VAR 0 1
8100: PPUSH
8101: CALL_OW 256
8105: PUSH
8106: LD_INT 800
8108: LESS
8109: PUSH
8110: LD_VAR 0 4
8114: PUSH
8115: LD_INT 101
8117: LESS
8118: AND
8119: IFFALSE 8162
// begin SetTag ( i , 101 ) ;
8121: LD_VAR 0 1
8125: PPUSH
8126: LD_INT 101
8128: PPUSH
8129: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8133: LD_VAR 0 1
8137: PPUSH
8138: LD_VAR 0 8
8142: PUSH
8143: LD_INT 1
8145: ARRAY
8146: PPUSH
8147: LD_VAR 0 8
8151: PUSH
8152: LD_INT 2
8154: ARRAY
8155: PPUSH
8156: CALL_OW 111
// end else
8160: GO 8275
// if tag = 101 then
8162: LD_VAR 0 4
8166: PUSH
8167: LD_INT 101
8169: EQUAL
8170: IFFALSE 8261
// begin if GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) > 10 then
8172: LD_VAR 0 1
8176: PPUSH
8177: LD_VAR 0 8
8181: PUSH
8182: LD_INT 1
8184: ARRAY
8185: PPUSH
8186: LD_VAR 0 8
8190: PUSH
8191: LD_INT 2
8193: ARRAY
8194: PPUSH
8195: CALL_OW 297
8199: PUSH
8200: LD_INT 10
8202: GREATER
8203: IFFALSE 8232
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8205: LD_VAR 0 1
8209: PPUSH
8210: LD_VAR 0 8
8214: PUSH
8215: LD_INT 1
8217: ARRAY
8218: PPUSH
8219: LD_VAR 0 8
8223: PUSH
8224: LD_INT 2
8226: ARRAY
8227: PPUSH
8228: CALL_OW 111
// if GetLives ( i ) = 1000 then
8232: LD_VAR 0 1
8236: PPUSH
8237: CALL_OW 256
8241: PUSH
8242: LD_INT 1000
8244: EQUAL
8245: IFFALSE 8259
// SetTag ( i , 0 ) ;
8247: LD_VAR 0 1
8251: PPUSH
8252: LD_INT 0
8254: PPUSH
8255: CALL_OW 109
// end else
8259: GO 8275
// AgressiveMove ( i , path ) ;
8261: LD_VAR 0 1
8265: PPUSH
8266: LD_VAR 0 7
8270: PPUSH
8271: CALL 69298 0 2
// end ;
8275: GO 8078
8277: POP
8278: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
8279: LD_ADDR_VAR 0 3
8283: PUSH
8284: LD_INT 22
8286: PUSH
8287: LD_INT 5
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: PUSH
8294: LD_INT 21
8296: PUSH
8297: LD_INT 2
8299: PUSH
8300: EMPTY
8301: LIST
8302: LIST
8303: PUSH
8304: LD_INT 3
8306: PUSH
8307: LD_INT 34
8309: PUSH
8310: LD_INT 32
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: LIST
8325: PPUSH
8326: CALL_OW 69
8330: ST_TO_ADDR
// if not tmp then
8331: LD_VAR 0 3
8335: NOT
8336: IFFALSE 8340
// continue ;
8338: GO 7878
// for i in tmp do
8340: LD_ADDR_VAR 0 1
8344: PUSH
8345: LD_VAR 0 3
8349: PUSH
8350: FOR_IN
8351: IFFALSE 8754
// begin mech := IsDrivenBy ( i ) ;
8353: LD_ADDR_VAR 0 5
8357: PUSH
8358: LD_VAR 0 1
8362: PPUSH
8363: CALL_OW 311
8367: ST_TO_ADDR
// if not mech then
8368: LD_VAR 0 5
8372: NOT
8373: IFFALSE 8377
// continue ;
8375: GO 8350
// tag := GetTag ( i ) ;
8377: LD_ADDR_VAR 0 4
8381: PUSH
8382: LD_VAR 0 1
8386: PPUSH
8387: CALL_OW 110
8391: ST_TO_ADDR
// if GetFuel ( i ) > 90 and tag = 102 then
8392: LD_VAR 0 1
8396: PPUSH
8397: CALL_OW 261
8401: PUSH
8402: LD_INT 90
8404: GREATER
8405: PUSH
8406: LD_VAR 0 4
8410: PUSH
8411: LD_INT 102
8413: EQUAL
8414: AND
8415: IFFALSE 8431
// SetTag ( i , 0 ) else
8417: LD_VAR 0 1
8421: PPUSH
8422: LD_INT 0
8424: PPUSH
8425: CALL_OW 109
8429: GO 8527
// if GetTag ( i ) = 102 then
8431: LD_VAR 0 1
8435: PPUSH
8436: CALL_OW 110
8440: PUSH
8441: LD_INT 102
8443: EQUAL
8444: IFFALSE 8527
// begin x := rand ( 1 , 2 ) ;
8446: LD_ADDR_VAR 0 6
8450: PUSH
8451: LD_INT 1
8453: PPUSH
8454: LD_INT 2
8456: PPUSH
8457: CALL_OW 12
8461: ST_TO_ADDR
// AddComMoveUnit ( i , cargo [ x ] ) ;
8462: LD_VAR 0 1
8466: PPUSH
8467: LD_VAR 0 2
8471: PUSH
8472: LD_VAR 0 6
8476: ARRAY
8477: PPUSH
8478: CALL_OW 172
// if GetCargo ( cargo [ x ] , mat_oil ) < 20 then
8482: LD_VAR 0 2
8486: PUSH
8487: LD_VAR 0 6
8491: ARRAY
8492: PPUSH
8493: LD_INT 2
8495: PPUSH
8496: CALL_OW 289
8500: PUSH
8501: LD_INT 20
8503: LESS
8504: IFFALSE 8527
// SetCargo ( cargo [ x ] , mat_oil , 100 ) ;
8506: LD_VAR 0 2
8510: PUSH
8511: LD_VAR 0 6
8515: ARRAY
8516: PPUSH
8517: LD_INT 2
8519: PPUSH
8520: LD_INT 100
8522: PPUSH
8523: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and tag < 101 then
8527: LD_VAR 0 1
8531: PPUSH
8532: CALL_OW 256
8536: PUSH
8537: LD_INT 600
8539: GREATEREQUAL
8540: PUSH
8541: LD_VAR 0 4
8545: PUSH
8546: LD_INT 101
8548: LESS
8549: AND
8550: IFFALSE 8566
// AgressiveMove ( i , path ) ;
8552: LD_VAR 0 1
8556: PPUSH
8557: LD_VAR 0 7
8561: PPUSH
8562: CALL 69298 0 2
// if GetLives ( i ) < 600 and tag < 101 then
8566: LD_VAR 0 1
8570: PPUSH
8571: CALL_OW 256
8575: PUSH
8576: LD_INT 600
8578: LESS
8579: PUSH
8580: LD_VAR 0 4
8584: PUSH
8585: LD_INT 101
8587: LESS
8588: AND
8589: IFFALSE 8630
// begin SetTag ( i , 101 ) ;
8591: LD_VAR 0 1
8595: PPUSH
8596: LD_INT 101
8598: PPUSH
8599: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8603: LD_VAR 0 1
8607: PPUSH
8608: LD_VAR 0 8
8612: PUSH
8613: LD_INT 1
8615: ARRAY
8616: PPUSH
8617: LD_VAR 0 8
8621: PUSH
8622: LD_INT 2
8624: ARRAY
8625: PPUSH
8626: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) < 9 and mech then
8630: LD_VAR 0 4
8634: PUSH
8635: LD_INT 101
8637: EQUAL
8638: PUSH
8639: LD_VAR 0 1
8643: PPUSH
8644: LD_VAR 0 8
8648: PUSH
8649: LD_INT 1
8651: ARRAY
8652: PPUSH
8653: LD_VAR 0 8
8657: PUSH
8658: LD_INT 2
8660: ARRAY
8661: PPUSH
8662: CALL_OW 297
8666: PUSH
8667: LD_INT 9
8669: LESS
8670: AND
8671: PUSH
8672: LD_VAR 0 5
8676: AND
8677: IFFALSE 8752
// begin if GetLives ( i ) < 1000 then
8679: LD_VAR 0 1
8683: PPUSH
8684: CALL_OW 256
8688: PUSH
8689: LD_INT 1000
8691: LESS
8692: IFFALSE 8705
// AddComRepairVehicleAndReturn ( mech ) else
8694: LD_VAR 0 5
8698: PPUSH
8699: CALL 68514 0 1
8703: GO 8752
// if GetFuel ( i ) <= 50 and cargo then
8705: LD_VAR 0 1
8709: PPUSH
8710: CALL_OW 261
8714: PUSH
8715: LD_INT 50
8717: LESSEQUAL
8718: PUSH
8719: LD_VAR 0 2
8723: AND
8724: IFFALSE 8740
// SetTag ( i , 102 ) else
8726: LD_VAR 0 1
8730: PPUSH
8731: LD_INT 102
8733: PPUSH
8734: CALL_OW 109
8738: GO 8752
// SetTag ( i , 0 ) ;
8740: LD_VAR 0 1
8744: PPUSH
8745: LD_INT 0
8747: PPUSH
8748: CALL_OW 109
// end ; end ;
8752: GO 8350
8754: POP
8755: POP
// until not tmp ;
8756: LD_VAR 0 3
8760: NOT
8761: IFFALSE 7878
// end ;
8763: PPOPN 8
8765: END
// export function GoForOil ; var i , tmp , data , chance , vehicle , needOil , heikeInConvoy , success ; begin
8766: LD_INT 0
8768: PPUSH
8769: PPUSH
8770: PPUSH
8771: PPUSH
8772: PPUSH
8773: PPUSH
8774: PPUSH
8775: PPUSH
8776: PPUSH
// SetAreaMapShow ( oilArea , 1 ) ;
8777: LD_INT 20
8779: PPUSH
8780: LD_INT 1
8782: PPUSH
8783: CALL_OW 424
// repeat wait ( 0 0$5 ) ;
8787: LD_INT 175
8789: PPUSH
8790: CALL_OW 67
// heikeInConvoy := false ;
8794: LD_ADDR_VAR 0 8
8798: PUSH
8799: LD_INT 0
8801: ST_TO_ADDR
// needOil := false ;
8802: LD_ADDR_VAR 0 7
8806: PUSH
8807: LD_INT 0
8809: ST_TO_ADDR
// tmp := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] ] ) ;
8810: LD_ADDR_VAR 0 3
8814: PUSH
8815: LD_INT 20
8817: PPUSH
8818: LD_INT 22
8820: PUSH
8821: LD_INT 2
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: PUSH
8828: LD_INT 3
8830: PUSH
8831: LD_INT 2
8833: PUSH
8834: LD_INT 34
8836: PUSH
8837: LD_INT 88
8839: PUSH
8840: EMPTY
8841: LIST
8842: LIST
8843: PUSH
8844: LD_INT 34
8846: PUSH
8847: LD_INT 31
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: LIST
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: PUSH
8863: LD_INT 33
8865: PUSH
8866: LD_INT 1
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: LIST
8877: PPUSH
8878: CALL_OW 70
8882: ST_TO_ADDR
// for i in tmp do
8883: LD_ADDR_VAR 0 2
8887: PUSH
8888: LD_VAR 0 3
8892: PUSH
8893: FOR_IN
8894: IFFALSE 8979
// begin if IsDrivenBy ( i ) = Heike then
8896: LD_VAR 0 2
8900: PPUSH
8901: CALL_OW 311
8905: PUSH
8906: LD_EXP 34
8910: EQUAL
8911: IFFALSE 8930
// begin heikeInConvoy := true ;
8913: LD_ADDR_VAR 0 8
8917: PUSH
8918: LD_INT 1
8920: ST_TO_ADDR
// Query ( QHeikeConvoy ) ;
8921: LD_STRING QHeikeConvoy
8923: PPUSH
8924: CALL_OW 97
// break ;
8928: GO 8979
// end ; if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 10 then
8930: LD_VAR 0 2
8934: PPUSH
8935: CALL_OW 262
8939: PUSH
8940: LD_INT 1
8942: EQUAL
8943: PUSH
8944: LD_VAR 0 2
8948: PPUSH
8949: CALL_OW 261
8953: PUSH
8954: LD_INT 10
8956: LESS
8957: AND
8958: IFFALSE 8977
// begin needOil := true ;
8960: LD_ADDR_VAR 0 7
8964: PUSH
8965: LD_INT 1
8967: ST_TO_ADDR
// Query ( QNeedOil ) ;
8968: LD_STRING QNeedOil
8970: PPUSH
8971: CALL_OW 97
// break ;
8975: GO 8979
// end ; end ;
8977: GO 8893
8979: POP
8980: POP
// if not needOil and not heikeInConvoy and UnitFilter ( tmp , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
8981: LD_VAR 0 7
8985: NOT
8986: PUSH
8987: LD_VAR 0 8
8991: NOT
8992: AND
8993: PUSH
8994: LD_VAR 0 3
8998: PPUSH
8999: LD_INT 2
9001: PUSH
9002: LD_INT 34
9004: PUSH
9005: LD_INT 32
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PUSH
9012: LD_INT 34
9014: PUSH
9015: LD_INT 51
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: LIST
9026: PPUSH
9027: CALL_OW 72
9031: AND
9032: IFFALSE 9049
// if Query ( QConvoy ) = 1 then
9034: LD_STRING QConvoy
9036: PPUSH
9037: CALL_OW 97
9041: PUSH
9042: LD_INT 1
9044: EQUAL
9045: IFFALSE 9049
// break ;
9047: GO 9053
// until false ;
9049: LD_INT 0
9051: IFFALSE 8787
// SetAreaMapShow ( oilArea , 0 ) ;
9053: LD_INT 20
9055: PPUSH
9056: LD_INT 0
9058: PPUSH
9059: CALL_OW 424
// data := [ ] ;
9063: LD_ADDR_VAR 0 4
9067: PUSH
9068: EMPTY
9069: ST_TO_ADDR
// chance := [ 60 , 50 , 40 , 30 ] [ Difficulty ] ;
9070: LD_ADDR_VAR 0 5
9074: PUSH
9075: LD_INT 60
9077: PUSH
9078: LD_INT 50
9080: PUSH
9081: LD_INT 40
9083: PUSH
9084: LD_INT 30
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: PUSH
9093: LD_OWVAR 67
9097: ARRAY
9098: ST_TO_ADDR
// for i in tmp do
9099: LD_ADDR_VAR 0 2
9103: PUSH
9104: LD_VAR 0 3
9108: PUSH
9109: FOR_IN
9110: IFFALSE 9207
// begin data := Join ( data , [ i , IsDrivenBy ( i ) , GetLives ( i ) , GetFuel ( i ) , ] ) ;
9112: LD_ADDR_VAR 0 4
9116: PUSH
9117: LD_VAR 0 4
9121: PPUSH
9122: LD_VAR 0 2
9126: PUSH
9127: LD_VAR 0 2
9131: PPUSH
9132: CALL_OW 311
9136: PUSH
9137: LD_VAR 0 2
9141: PPUSH
9142: CALL_OW 256
9146: PUSH
9147: LD_VAR 0 2
9151: PPUSH
9152: CALL_OW 261
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: PPUSH
9163: CALL 66694 0 2
9167: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
9168: LD_VAR 0 2
9172: PPUSH
9173: CALL_OW 311
9177: PPUSH
9178: CALL_OW 64
// RemoveUnit ( i ) ;
9182: LD_VAR 0 2
9186: PPUSH
9187: CALL_OW 64
// chance := chance + 20 ;
9191: LD_ADDR_VAR 0 5
9195: PUSH
9196: LD_VAR 0 5
9200: PUSH
9201: LD_INT 20
9203: PLUS
9204: ST_TO_ADDR
// end ;
9205: GO 9109
9207: POP
9208: POP
// wait ( rand ( 0 0$45 , 2 2$30 ) ) ;
9209: LD_INT 1575
9211: PPUSH
9212: LD_INT 5250
9214: PPUSH
9215: CALL_OW 12
9219: PPUSH
9220: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
9224: LD_INT 35
9226: PPUSH
9227: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
9231: LD_INT 22
9233: PUSH
9234: LD_INT 3
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: PUSH
9241: LD_INT 92
9243: PUSH
9244: LD_INT 261
9246: PUSH
9247: LD_INT 71
9249: PUSH
9250: LD_INT 12
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: PPUSH
9263: CALL_OW 69
9267: NOT
9268: PUSH
9269: LD_INT 277
9271: PPUSH
9272: LD_INT 80
9274: PPUSH
9275: CALL_OW 428
9279: NOT
9280: AND
9281: IFFALSE 9224
// for i in data do
9283: LD_ADDR_VAR 0 2
9287: PUSH
9288: LD_VAR 0 4
9292: PUSH
9293: FOR_IN
9294: IFFALSE 9695
// begin uc_nation := GetNation ( i [ 1 ] ) ;
9296: LD_ADDR_OWVAR 21
9300: PUSH
9301: LD_VAR 0 2
9305: PUSH
9306: LD_INT 1
9308: ARRAY
9309: PPUSH
9310: CALL_OW 248
9314: ST_TO_ADDR
// uc_side := 2 ;
9315: LD_ADDR_OWVAR 20
9319: PUSH
9320: LD_INT 2
9322: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( i [ 1 ] ) , GetEngine ( i [ 1 ] ) , GetControl ( i [ 1 ] ) , GetWeapon ( i [ 1 ] ) , 66 ) ;
9323: LD_VAR 0 2
9327: PUSH
9328: LD_INT 1
9330: ARRAY
9331: PPUSH
9332: CALL_OW 265
9336: PPUSH
9337: LD_VAR 0 2
9341: PUSH
9342: LD_INT 1
9344: ARRAY
9345: PPUSH
9346: CALL_OW 262
9350: PPUSH
9351: LD_VAR 0 2
9355: PUSH
9356: LD_INT 1
9358: ARRAY
9359: PPUSH
9360: CALL_OW 263
9364: PPUSH
9365: LD_VAR 0 2
9369: PUSH
9370: LD_INT 1
9372: ARRAY
9373: PPUSH
9374: CALL_OW 264
9378: PPUSH
9379: LD_INT 66
9381: PPUSH
9382: CALL 34241 0 5
// vehicle := CreateVehicle ;
9386: LD_ADDR_VAR 0 6
9390: PUSH
9391: CALL_OW 45
9395: ST_TO_ADDR
// PlaceUnitXYD ( vehicle , 277 , 80 , 4 , false ) ;
9396: LD_VAR 0 6
9400: PPUSH
9401: LD_INT 277
9403: PPUSH
9404: LD_INT 80
9406: PPUSH
9407: LD_INT 4
9409: PPUSH
9410: LD_INT 0
9412: PPUSH
9413: CALL 68834 0 5
// PlaceHumanInUnit ( i [ 2 ] , vehicle ) ;
9417: LD_VAR 0 2
9421: PUSH
9422: LD_INT 2
9424: ARRAY
9425: PPUSH
9426: LD_VAR 0 6
9430: PPUSH
9431: CALL_OW 52
// SetLives ( vehicle , i [ 3 ] ) ;
9435: LD_VAR 0 6
9439: PPUSH
9440: LD_VAR 0 2
9444: PUSH
9445: LD_INT 3
9447: ARRAY
9448: PPUSH
9449: CALL_OW 234
// success := Prob ( chance ) ;
9453: LD_ADDR_VAR 0 9
9457: PUSH
9458: LD_VAR 0 5
9462: PPUSH
9463: CALL_OW 13
9467: ST_TO_ADDR
// if success then
9468: LD_VAR 0 9
9472: IFFALSE 9554
// begin if GetEngine ( vehicle ) = engine_combustion then
9474: LD_VAR 0 6
9478: PPUSH
9479: CALL_OW 262
9483: PUSH
9484: LD_INT 1
9486: EQUAL
9487: IFFALSE 9501
// SetFuel ( vehicle , 90 ) ;
9489: LD_VAR 0 6
9493: PPUSH
9494: LD_INT 90
9496: PPUSH
9497: CALL_OW 240
// if GetWeapon ( vehicle ) in [ ar_cargo_bay , ru_cargo_bay ] then
9501: LD_VAR 0 6
9505: PPUSH
9506: CALL_OW 264
9510: PUSH
9511: LD_INT 32
9513: PUSH
9514: LD_INT 51
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: IN
9521: IFFALSE 9552
// begin collectedOil := collectedOil + 100 ;
9523: LD_ADDR_EXP 33
9527: PUSH
9528: LD_EXP 33
9532: PUSH
9533: LD_INT 100
9535: PLUS
9536: ST_TO_ADDR
// SetCargo ( vehicle , mat_oil , 100 ) ;
9537: LD_VAR 0 6
9541: PPUSH
9542: LD_INT 2
9544: PPUSH
9545: LD_INT 100
9547: PPUSH
9548: CALL_OW 290
// end ; end else
9552: GO 9626
// begin if i [ 3 ] > 333 then
9554: LD_VAR 0 2
9558: PUSH
9559: LD_INT 3
9561: ARRAY
9562: PUSH
9563: LD_INT 333
9565: GREATER
9566: IFFALSE 9580
// SetLives ( vehicle , 333 ) ;
9568: LD_VAR 0 6
9572: PPUSH
9573: LD_INT 333
9575: PPUSH
9576: CALL_OW 234
// if i [ 4 ] > 20 then
9580: LD_VAR 0 2
9584: PUSH
9585: LD_INT 4
9587: ARRAY
9588: PUSH
9589: LD_INT 20
9591: GREATER
9592: IFFALSE 9608
// SetFuel ( vehicle , 20 ) else
9594: LD_VAR 0 6
9598: PPUSH
9599: LD_INT 20
9601: PPUSH
9602: CALL_OW 240
9606: GO 9626
// SetFuel ( vehicle , i [ 4 ] ) ;
9608: LD_VAR 0 6
9612: PPUSH
9613: LD_VAR 0 2
9617: PUSH
9618: LD_INT 4
9620: ARRAY
9621: PPUSH
9622: CALL_OW 240
// end ; ComMoveXY ( vehicle , 250 , 119 ) ;
9626: LD_VAR 0 6
9630: PPUSH
9631: LD_INT 250
9633: PPUSH
9634: LD_INT 119
9636: PPUSH
9637: CALL_OW 111
// AddComMoveXY ( vehicle , 211 , 80 ) ;
9641: LD_VAR 0 6
9645: PPUSH
9646: LD_INT 211
9648: PPUSH
9649: LD_INT 80
9651: PPUSH
9652: CALL_OW 171
// repeat wait ( 0 0$5 ) ;
9656: LD_INT 175
9658: PPUSH
9659: CALL_OW 67
// until not FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_placed ] ] ) ;
9663: LD_INT 20
9665: PPUSH
9666: LD_INT 22
9668: PUSH
9669: LD_INT 2
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: PUSH
9676: LD_INT 52
9678: PUSH
9679: EMPTY
9680: LIST
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: PPUSH
9686: CALL_OW 70
9690: NOT
9691: IFFALSE 9656
// end ;
9693: GO 9293
9695: POP
9696: POP
// wait ( 0 0$10 ) ;
9697: LD_INT 350
9699: PPUSH
9700: CALL_OW 67
// GoForOil ;
9704: CALL 8766 0 0
// end ;
9708: LD_VAR 0 1
9712: RET
// every 0 0$2 trigger FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do var i ;
9713: LD_INT 22
9715: PPUSH
9716: LD_INT 21
9718: PUSH
9719: LD_INT 2
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: PUSH
9726: LD_INT 22
9728: PUSH
9729: LD_INT 5
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: PUSH
9736: LD_INT 58
9738: PUSH
9739: EMPTY
9740: LIST
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: LIST
9746: PPUSH
9747: CALL_OW 70
9751: IFFALSE 9820
9753: GO 9755
9755: DISABLE
9756: LD_INT 0
9758: PPUSH
// begin enable ;
9759: ENABLE
// for i in FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do
9760: LD_ADDR_VAR 0 1
9764: PUSH
9765: LD_INT 22
9767: PPUSH
9768: LD_INT 21
9770: PUSH
9771: LD_INT 2
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: PUSH
9778: LD_INT 22
9780: PUSH
9781: LD_INT 5
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: PUSH
9788: LD_INT 58
9790: PUSH
9791: EMPTY
9792: LIST
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: LIST
9798: PPUSH
9799: CALL_OW 70
9803: PUSH
9804: FOR_IN
9805: IFFALSE 9818
// KillUnit ( i ) ;
9807: LD_VAR 0 1
9811: PPUSH
9812: CALL_OW 66
9816: GO 9804
9818: POP
9819: POP
// end ; end_of_file
9820: PPOPN 1
9822: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
9823: LD_INT 0
9825: PPUSH
// uc_side := side ;
9826: LD_ADDR_OWVAR 20
9830: PUSH
9831: LD_VAR 0 1
9835: ST_TO_ADDR
// uc_nation := nation ;
9836: LD_ADDR_OWVAR 21
9840: PUSH
9841: LD_VAR 0 2
9845: ST_TO_ADDR
// vc_chassis := chassis ;
9846: LD_ADDR_OWVAR 37
9850: PUSH
9851: LD_VAR 0 3
9855: ST_TO_ADDR
// vc_engine := engine ;
9856: LD_ADDR_OWVAR 39
9860: PUSH
9861: LD_VAR 0 4
9865: ST_TO_ADDR
// vc_control := control ;
9866: LD_ADDR_OWVAR 38
9870: PUSH
9871: LD_VAR 0 5
9875: ST_TO_ADDR
// vc_weapon := weapon ;
9876: LD_ADDR_OWVAR 40
9880: PUSH
9881: LD_VAR 0 6
9885: ST_TO_ADDR
// vc_fuel_battery := fuel ;
9886: LD_ADDR_OWVAR 41
9890: PUSH
9891: LD_VAR 0 7
9895: ST_TO_ADDR
// result := CreateVehicle ;
9896: LD_ADDR_VAR 0 8
9900: PUSH
9901: CALL_OW 45
9905: ST_TO_ADDR
// end ;
9906: LD_VAR 0 8
9910: RET
// export function SayX ( units , ident ) ; var i ; begin
9911: LD_INT 0
9913: PPUSH
9914: PPUSH
// result := false ;
9915: LD_ADDR_VAR 0 3
9919: PUSH
9920: LD_INT 0
9922: ST_TO_ADDR
// if not units then
9923: LD_VAR 0 1
9927: NOT
9928: IFFALSE 9932
// exit ;
9930: GO 9986
// for i in units do
9932: LD_ADDR_VAR 0 4
9936: PUSH
9937: LD_VAR 0 1
9941: PUSH
9942: FOR_IN
9943: IFFALSE 9984
// if IsOk ( i ) then
9945: LD_VAR 0 4
9949: PPUSH
9950: CALL_OW 302
9954: IFFALSE 9982
// begin Say ( i , ident ) ;
9956: LD_VAR 0 4
9960: PPUSH
9961: LD_VAR 0 2
9965: PPUSH
9966: CALL_OW 88
// result := i ;
9970: LD_ADDR_VAR 0 3
9974: PUSH
9975: LD_VAR 0 4
9979: ST_TO_ADDR
// break ;
9980: GO 9984
// end ;
9982: GO 9942
9984: POP
9985: POP
// end ;
9986: LD_VAR 0 3
9990: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
9991: LD_INT 0
9993: PPUSH
9994: PPUSH
// InitUc ;
9995: CALL_OW 18
// InitHc ;
9999: CALL_OW 19
// uc_side := 0 ;
10003: LD_ADDR_OWVAR 20
10007: PUSH
10008: LD_INT 0
10010: ST_TO_ADDR
// uc_nation := 0 ;
10011: LD_ADDR_OWVAR 21
10015: PUSH
10016: LD_INT 0
10018: ST_TO_ADDR
// for i = 1 to amount do
10019: LD_ADDR_VAR 0 4
10023: PUSH
10024: DOUBLE
10025: LD_INT 1
10027: DEC
10028: ST_TO_ADDR
10029: LD_VAR 0 2
10033: PUSH
10034: FOR_TO
10035: IFFALSE 10117
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
10037: LD_ADDR_OWVAR 29
10041: PUSH
10042: LD_INT 9
10044: PPUSH
10045: LD_INT 12
10047: PPUSH
10048: CALL_OW 12
10052: PUSH
10053: LD_INT 9
10055: PPUSH
10056: LD_INT 12
10058: PPUSH
10059: CALL_OW 12
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
10068: LD_ADDR_OWVAR 35
10072: PUSH
10073: LD_INT 1
10075: NEG
10076: PPUSH
10077: LD_INT 1
10079: PPUSH
10080: CALL_OW 12
10084: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
10085: LD_INT 0
10087: PPUSH
10088: LD_INT 12
10090: PPUSH
10091: LD_INT 1
10093: PPUSH
10094: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
10098: CALL_OW 44
10102: PPUSH
10103: LD_VAR 0 1
10107: PPUSH
10108: LD_INT 0
10110: PPUSH
10111: CALL_OW 49
// end ;
10115: GO 10034
10117: POP
10118: POP
// InitHc ;
10119: CALL_OW 19
// end ;
10123: LD_VAR 0 3
10127: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
10128: LD_INT 0
10130: PPUSH
10131: PPUSH
// uc_side := 0 ;
10132: LD_ADDR_OWVAR 20
10136: PUSH
10137: LD_INT 0
10139: ST_TO_ADDR
// uc_nation := 0 ;
10140: LD_ADDR_OWVAR 21
10144: PUSH
10145: LD_INT 0
10147: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) ;
10148: LD_INT 7
10150: PPUSH
10151: LD_INT 6
10153: PUSH
10154: LD_INT 5
10156: PUSH
10157: LD_INT 4
10159: PUSH
10160: LD_INT 3
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: PUSH
10169: LD_OWVAR 67
10173: ARRAY
10174: PPUSH
10175: CALL 9991 0 2
// for i = 1 to 2 do
10179: LD_ADDR_VAR 0 4
10183: PUSH
10184: DOUBLE
10185: LD_INT 1
10187: DEC
10188: ST_TO_ADDR
10189: LD_INT 2
10191: PUSH
10192: FOR_TO
10193: IFFALSE 10230
// begin vc_chassis := class_mastodont ;
10195: LD_ADDR_OWVAR 37
10199: PUSH
10200: LD_INT 31
10202: ST_TO_ADDR
// vc_control := control_rider ;
10203: LD_ADDR_OWVAR 38
10207: PUSH
10208: LD_INT 4
10210: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
10211: CALL_OW 45
10215: PPUSH
10216: LD_VAR 0 1
10220: PPUSH
10221: LD_INT 0
10223: PPUSH
10224: CALL 65611 0 3
// end ;
10228: GO 10192
10230: POP
10231: POP
// InitHc ;
10232: CALL_OW 19
// for i := 1 to 3 do
10236: LD_ADDR_VAR 0 4
10240: PUSH
10241: DOUBLE
10242: LD_INT 1
10244: DEC
10245: ST_TO_ADDR
10246: LD_INT 3
10248: PUSH
10249: FOR_TO
10250: IFFALSE 10287
// begin hc_class := class_horse ;
10252: LD_ADDR_OWVAR 28
10256: PUSH
10257: LD_INT 21
10259: ST_TO_ADDR
// hc_gallery :=  ;
10260: LD_ADDR_OWVAR 33
10264: PUSH
10265: LD_STRING 
10267: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10268: CALL_OW 44
10272: PPUSH
10273: LD_VAR 0 1
10277: PPUSH
10278: LD_INT 0
10280: PPUSH
10281: CALL_OW 49
// end ;
10285: GO 10249
10287: POP
10288: POP
// InitHc ;
10289: CALL_OW 19
// for i = 1 to 3 do
10293: LD_ADDR_VAR 0 4
10297: PUSH
10298: DOUBLE
10299: LD_INT 1
10301: DEC
10302: ST_TO_ADDR
10303: LD_INT 3
10305: PUSH
10306: FOR_TO
10307: IFFALSE 10361
// begin hc_class = class_tiger ;
10309: LD_ADDR_OWVAR 28
10313: PUSH
10314: LD_INT 14
10316: ST_TO_ADDR
// hc_gallery =  ;
10317: LD_ADDR_OWVAR 33
10321: PUSH
10322: LD_STRING 
10324: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
10325: LD_ADDR_OWVAR 35
10329: PUSH
10330: LD_INT 7
10332: NEG
10333: PPUSH
10334: LD_INT 7
10336: PPUSH
10337: CALL_OW 12
10341: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
10342: CALL_OW 44
10346: PPUSH
10347: LD_VAR 0 1
10351: PPUSH
10352: LD_INT 0
10354: PPUSH
10355: CALL 65611 0 3
// end ;
10359: GO 10306
10361: POP
10362: POP
// InitHc ;
10363: CALL_OW 19
// for i := 1 to 4 do
10367: LD_ADDR_VAR 0 4
10371: PUSH
10372: DOUBLE
10373: LD_INT 1
10375: DEC
10376: ST_TO_ADDR
10377: LD_INT 4
10379: PUSH
10380: FOR_TO
10381: IFFALSE 10418
// begin hc_class := class_phororhacos ;
10383: LD_ADDR_OWVAR 28
10387: PUSH
10388: LD_INT 18
10390: ST_TO_ADDR
// hc_gallery :=  ;
10391: LD_ADDR_OWVAR 33
10395: PUSH
10396: LD_STRING 
10398: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10399: CALL_OW 44
10403: PPUSH
10404: LD_VAR 0 1
10408: PPUSH
10409: LD_INT 0
10411: PPUSH
10412: CALL_OW 49
// end ;
10416: GO 10380
10418: POP
10419: POP
// InitHc ;
10420: CALL_OW 19
// for i := 1 to 4 do
10424: LD_ADDR_VAR 0 4
10428: PUSH
10429: DOUBLE
10430: LD_INT 1
10432: DEC
10433: ST_TO_ADDR
10434: LD_INT 4
10436: PUSH
10437: FOR_TO
10438: IFFALSE 10475
// begin hc_class := class_baggie ;
10440: LD_ADDR_OWVAR 28
10444: PUSH
10445: LD_INT 13
10447: ST_TO_ADDR
// hc_gallery :=  ;
10448: LD_ADDR_OWVAR 33
10452: PUSH
10453: LD_STRING 
10455: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10456: CALL_OW 44
10460: PPUSH
10461: LD_VAR 0 1
10465: PPUSH
10466: LD_INT 0
10468: PPUSH
10469: CALL_OW 49
// end ;
10473: GO 10437
10475: POP
10476: POP
// InitHc ;
10477: CALL_OW 19
// for i := 1 to 7 do
10481: LD_ADDR_VAR 0 4
10485: PUSH
10486: DOUBLE
10487: LD_INT 1
10489: DEC
10490: ST_TO_ADDR
10491: LD_INT 7
10493: PUSH
10494: FOR_TO
10495: IFFALSE 10532
// begin hc_class := class_frog ;
10497: LD_ADDR_OWVAR 28
10501: PUSH
10502: LD_INT 19
10504: ST_TO_ADDR
// hc_gallery :=  ;
10505: LD_ADDR_OWVAR 33
10509: PUSH
10510: LD_STRING 
10512: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
10513: CALL_OW 44
10517: PPUSH
10518: LD_VAR 0 2
10522: PPUSH
10523: LD_INT 0
10525: PPUSH
10526: CALL_OW 49
// end ;
10530: GO 10494
10532: POP
10533: POP
// end ;
10534: LD_VAR 0 3
10538: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
10539: LD_INT 0
10541: PPUSH
10542: PPUSH
10543: PPUSH
// if not observer or not unit then
10544: LD_VAR 0 1
10548: NOT
10549: PUSH
10550: LD_VAR 0 2
10554: NOT
10555: OR
10556: IFFALSE 10560
// exit ;
10558: GO 10608
// if not See ( GetSide ( observer ) , unit ) then
10560: LD_VAR 0 1
10564: PPUSH
10565: CALL_OW 255
10569: PPUSH
10570: LD_VAR 0 2
10574: PPUSH
10575: CALL_OW 292
10579: NOT
10580: IFFALSE 10584
// exit ;
10582: GO 10608
// result := GetDistUnits ( observer , unit ) < 12 ;
10584: LD_ADDR_VAR 0 3
10588: PUSH
10589: LD_VAR 0 1
10593: PPUSH
10594: LD_VAR 0 2
10598: PPUSH
10599: CALL_OW 296
10603: PUSH
10604: LD_INT 12
10606: LESS
10607: ST_TO_ADDR
// end ;
10608: LD_VAR 0 3
10612: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
10613: LD_INT 0
10615: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
10616: LD_VAR 0 2
10620: PUSH
10621: LD_INT 1
10623: ARRAY
10624: PPUSH
10625: LD_VAR 0 2
10629: PUSH
10630: LD_INT 2
10632: ARRAY
10633: PPUSH
10634: CALL_OW 488
10638: PUSH
10639: LD_VAR 0 2
10643: PUSH
10644: LD_INT 1
10646: ARRAY
10647: PPUSH
10648: LD_VAR 0 2
10652: PUSH
10653: LD_INT 2
10655: ARRAY
10656: PPUSH
10657: CALL_OW 428
10661: PUSH
10662: LD_INT 0
10664: EQUAL
10665: AND
10666: IFFALSE 10700
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
10668: LD_VAR 0 1
10672: PPUSH
10673: LD_VAR 0 2
10677: PUSH
10678: LD_INT 1
10680: ARRAY
10681: PPUSH
10682: LD_VAR 0 2
10686: PUSH
10687: LD_INT 2
10689: ARRAY
10690: PPUSH
10691: LD_VAR 0 3
10695: PPUSH
10696: CALL_OW 48
// end ;
10700: LD_VAR 0 4
10704: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
10705: LD_INT 0
10707: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
10708: LD_VAR 0 1
10712: PPUSH
10713: LD_VAR 0 2
10717: PPUSH
10718: LD_VAR 0 3
10722: PPUSH
10723: LD_VAR 0 4
10727: PPUSH
10728: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
10732: LD_VAR 0 1
10736: PPUSH
10737: LD_VAR 0 2
10741: PPUSH
10742: LD_VAR 0 3
10746: PPUSH
10747: CALL_OW 331
// end ;
10751: LD_VAR 0 5
10755: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
10756: LD_INT 0
10758: PPUSH
// if not units then
10759: LD_VAR 0 1
10763: NOT
10764: IFFALSE 10768
// exit ;
10766: GO 10851
// result := true ;
10768: LD_ADDR_VAR 0 4
10772: PUSH
10773: LD_INT 1
10775: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
10776: LD_VAR 0 1
10780: PPUSH
10781: LD_INT 26
10783: PUSH
10784: LD_INT 1
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PPUSH
10791: CALL_OW 72
10795: PUSH
10796: LD_INT 1
10798: ARRAY
10799: PPUSH
10800: LD_VAR 0 2
10804: PPUSH
10805: CALL_OW 88
10809: NOT
10810: IFFALSE 10851
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
10812: LD_ADDR_VAR 0 4
10816: PUSH
10817: LD_VAR 0 1
10821: PPUSH
10822: LD_INT 26
10824: PUSH
10825: LD_INT 2
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PPUSH
10832: CALL_OW 72
10836: PUSH
10837: LD_INT 1
10839: ARRAY
10840: PPUSH
10841: LD_VAR 0 3
10845: PPUSH
10846: CALL_OW 88
10850: ST_TO_ADDR
// end ;
10851: LD_VAR 0 4
10855: RET
// export function SeeGroup ( side , group ) ; var i ; begin
10856: LD_INT 0
10858: PPUSH
10859: PPUSH
// if not group then
10860: LD_VAR 0 2
10864: NOT
10865: IFFALSE 10869
// exit ;
10867: GO 10914
// for i in group do
10869: LD_ADDR_VAR 0 4
10873: PUSH
10874: LD_VAR 0 2
10878: PUSH
10879: FOR_IN
10880: IFFALSE 10912
// if See ( side , i ) then
10882: LD_VAR 0 1
10886: PPUSH
10887: LD_VAR 0 4
10891: PPUSH
10892: CALL_OW 292
10896: IFFALSE 10910
// begin result := true ;
10898: LD_ADDR_VAR 0 3
10902: PUSH
10903: LD_INT 1
10905: ST_TO_ADDR
// exit ;
10906: POP
10907: POP
10908: GO 10914
// end ;
10910: GO 10879
10912: POP
10913: POP
// end ; end_of_file
10914: LD_VAR 0 3
10918: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
10919: LD_INT 0
10921: PPUSH
10922: PPUSH
10923: PPUSH
10924: PPUSH
10925: PPUSH
10926: PPUSH
10927: PPUSH
// uc_side := 3 ;
10928: LD_ADDR_OWVAR 20
10932: PUSH
10933: LD_INT 3
10935: ST_TO_ADDR
// uc_nation := 3 ;
10936: LD_ADDR_OWVAR 21
10940: PUSH
10941: LD_INT 3
10943: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
10944: LD_ADDR_EXP 53
10948: PUSH
10949: LD_STRING Morozov
10951: PPUSH
10952: CALL_OW 25
10956: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
10957: LD_EXP 53
10961: PPUSH
10962: LD_INT 52
10964: PPUSH
10965: CALL_OW 52
// if not gaidarKilled then
10969: LD_EXP 7
10973: NOT
10974: IFFALSE 11007
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
10976: LD_ADDR_EXP 54
10980: PUSH
10981: LD_STRING Gaydar
10983: PPUSH
10984: LD_INT 0
10986: PPUSH
10987: LD_STRING 
10989: PPUSH
10990: CALL 29226 0 3
10994: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
10995: LD_EXP 54
10999: PPUSH
11000: LD_INT 52
11002: PPUSH
11003: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
11007: LD_INT 52
11009: PPUSH
11010: LD_STRING lenin
11012: PPUSH
11013: CALL_OW 500
// ruOutsiders := [ ] ;
11017: LD_ADDR_EXP 56
11021: PUSH
11022: EMPTY
11023: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
11024: LD_ADDR_EXP 58
11028: PUSH
11029: EMPTY
11030: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
11031: LD_ADDR_EXP 59
11035: PUSH
11036: EMPTY
11037: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
11038: LD_ADDR_EXP 60
11042: PUSH
11043: EMPTY
11044: ST_TO_ADDR
// ruAttackers := [ ] ;
11045: LD_ADDR_EXP 61
11049: PUSH
11050: EMPTY
11051: ST_TO_ADDR
// waveStrength := 0 ;
11052: LD_ADDR_EXP 62
11056: PUSH
11057: LD_INT 0
11059: ST_TO_ADDR
// if not gaidarKilled then
11060: LD_EXP 7
11064: NOT
11065: IFFALSE 11075
// waveStrength := 2 ;
11067: LD_ADDR_EXP 62
11071: PUSH
11072: LD_INT 2
11074: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
11075: LD_ADDR_VAR 0 7
11079: PUSH
11080: LD_INT 22
11082: PUSH
11083: LD_INT 3
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: PUSH
11090: LD_INT 21
11092: PUSH
11093: LD_INT 3
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: PPUSH
11104: CALL_OW 69
11108: ST_TO_ADDR
// for i in tmp do
11109: LD_ADDR_VAR 0 2
11113: PUSH
11114: LD_VAR 0 7
11118: PUSH
11119: FOR_IN
11120: IFFALSE 11157
// SetBLevel ( i , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
11122: LD_VAR 0 2
11126: PPUSH
11127: LD_INT 5
11129: PUSH
11130: LD_INT 6
11132: PUSH
11133: LD_INT 7
11135: PUSH
11136: LD_INT 8
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: PUSH
11145: LD_OWVAR 67
11149: ARRAY
11150: PPUSH
11151: CALL_OW 241
11155: GO 11119
11157: POP
11158: POP
// for i := 1 to 3 do
11159: LD_ADDR_VAR 0 2
11163: PUSH
11164: DOUBLE
11165: LD_INT 1
11167: DEC
11168: ST_TO_ADDR
11169: LD_INT 3
11171: PUSH
11172: FOR_TO
11173: IFFALSE 11211
// begin PrepareHuman ( false , 1 , 0 ) ;
11175: LD_INT 0
11177: PPUSH
11178: LD_INT 1
11180: PPUSH
11181: LD_INT 0
11183: PPUSH
11184: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
11188: CALL_OW 44
11192: PPUSH
11193: LD_INT 75
11195: PPUSH
11196: LD_INT 49
11198: PPUSH
11199: LD_INT 3
11201: PPUSH
11202: LD_INT 0
11204: PPUSH
11205: CALL_OW 50
// end ;
11209: GO 11172
11211: POP
11212: POP
// for i := 1 to 4 do
11213: LD_ADDR_VAR 0 2
11217: PUSH
11218: DOUBLE
11219: LD_INT 1
11221: DEC
11222: ST_TO_ADDR
11223: LD_INT 4
11225: PUSH
11226: FOR_TO
11227: IFFALSE 11273
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
11229: LD_INT 0
11231: PPUSH
11232: LD_INT 1
11234: PPUSH
11235: LD_INT 2
11237: PPUSH
11238: CALL_OW 12
11242: PPUSH
11243: LD_INT 0
11245: PPUSH
11246: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
11250: CALL_OW 44
11254: PPUSH
11255: LD_INT 330
11257: PPUSH
11258: LD_INT 231
11260: PPUSH
11261: LD_INT 5
11263: PPUSH
11264: LD_INT 0
11266: PPUSH
11267: CALL_OW 50
// end ;
11271: GO 11226
11273: POP
11274: POP
// hc_class := 1 ;
11275: LD_ADDR_OWVAR 28
11279: PUSH
11280: LD_INT 1
11282: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
11283: CALL_OW 44
11287: PPUSH
11288: LD_INT 324
11290: PPUSH
11291: LD_INT 219
11293: PPUSH
11294: CALL_OW 428
11298: PPUSH
11299: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
11303: CALL_OW 44
11307: PPUSH
11308: LD_INT 316
11310: PPUSH
11311: LD_INT 223
11313: PPUSH
11314: CALL_OW 428
11318: PPUSH
11319: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
11323: LD_ADDR_VAR 0 7
11327: PUSH
11328: LD_INT 172
11330: PPUSH
11331: LD_INT 198
11333: PPUSH
11334: CALL_OW 428
11338: PPUSH
11339: CALL_OW 274
11343: PUSH
11344: LD_INT 189
11346: PPUSH
11347: LD_INT 156
11349: PPUSH
11350: CALL_OW 428
11354: PPUSH
11355: CALL_OW 274
11359: PUSH
11360: LD_INT 341
11362: PPUSH
11363: LD_INT 232
11365: PPUSH
11366: CALL_OW 428
11370: PPUSH
11371: CALL_OW 274
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: LIST
11380: ST_TO_ADDR
// for i in tmp do
11381: LD_ADDR_VAR 0 2
11385: PUSH
11386: LD_VAR 0 7
11390: PUSH
11391: FOR_IN
11392: IFFALSE 11426
// begin SetResourceType ( i , mat_cans , 200 ) ;
11394: LD_VAR 0 2
11398: PPUSH
11399: LD_INT 1
11401: PPUSH
11402: LD_INT 200
11404: PPUSH
11405: CALL_OW 277
// SetResourceType ( i , mat_oil , 300 ) ;
11409: LD_VAR 0 2
11413: PPUSH
11414: LD_INT 2
11416: PPUSH
11417: LD_INT 300
11419: PPUSH
11420: CALL_OW 277
// end ;
11424: GO 11391
11426: POP
11427: POP
// tmp := [ [ 177 , 114 ] , [ 138 , 96 ] ] ;
11428: LD_ADDR_VAR 0 7
11432: PUSH
11433: LD_INT 177
11435: PUSH
11436: LD_INT 114
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: PUSH
11443: LD_INT 138
11445: PUSH
11446: LD_INT 96
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: ST_TO_ADDR
// for i := 1 to tmp do
11457: LD_ADDR_VAR 0 2
11461: PUSH
11462: DOUBLE
11463: LD_INT 1
11465: DEC
11466: ST_TO_ADDR
11467: LD_VAR 0 7
11471: PUSH
11472: FOR_TO
11473: IFFALSE 11556
// begin PrepareHuman ( false , class_bazooker , 6 ) ;
11475: LD_INT 0
11477: PPUSH
11478: LD_INT 9
11480: PPUSH
11481: LD_INT 6
11483: PPUSH
11484: CALL_OW 380
// un := CreateHuman ;
11488: LD_ADDR_VAR 0 5
11492: PUSH
11493: CALL_OW 44
11497: ST_TO_ADDR
// SetDir ( un , 2 ) ;
11498: LD_VAR 0 5
11502: PPUSH
11503: LD_INT 2
11505: PPUSH
11506: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
11510: LD_VAR 0 5
11514: PPUSH
11515: LD_VAR 0 7
11519: PUSH
11520: LD_VAR 0 2
11524: ARRAY
11525: PUSH
11526: LD_INT 1
11528: ARRAY
11529: PPUSH
11530: LD_VAR 0 7
11534: PUSH
11535: LD_VAR 0 2
11539: ARRAY
11540: PUSH
11541: LD_INT 2
11543: ARRAY
11544: PPUSH
11545: CALL_OW 428
11549: PPUSH
11550: CALL_OW 52
// end ;
11554: GO 11472
11556: POP
11557: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
11558: LD_ADDR_VAR 0 7
11562: PUSH
11563: LD_INT 198
11565: PUSH
11566: LD_INT 158
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: LD_INT 203
11575: PUSH
11576: LD_INT 166
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: PUSH
11583: LD_INT 181
11585: PUSH
11586: LD_INT 209
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PUSH
11593: LD_INT 178
11595: PUSH
11596: LD_INT 196
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PUSH
11603: LD_INT 181
11605: PUSH
11606: LD_INT 212
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: ST_TO_ADDR
// for i := 1 to tmp do
11620: LD_ADDR_VAR 0 2
11624: PUSH
11625: DOUBLE
11626: LD_INT 1
11628: DEC
11629: ST_TO_ADDR
11630: LD_VAR 0 7
11634: PUSH
11635: FOR_TO
11636: IFFALSE 11757
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
11638: LD_INT 0
11640: PPUSH
11641: LD_INT 1
11643: PPUSH
11644: LD_INT 4
11646: PUSH
11647: LD_INT 5
11649: PUSH
11650: LD_INT 6
11652: PUSH
11653: LD_INT 7
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: PUSH
11662: LD_OWVAR 67
11666: ARRAY
11667: PPUSH
11668: CALL_OW 380
// un := CreateHuman ;
11672: LD_ADDR_VAR 0 5
11676: PUSH
11677: CALL_OW 44
11681: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
11682: LD_ADDR_VAR 0 4
11686: PUSH
11687: LD_VAR 0 7
11691: PUSH
11692: LD_VAR 0 2
11696: ARRAY
11697: PUSH
11698: LD_INT 1
11700: ARRAY
11701: PPUSH
11702: LD_VAR 0 7
11706: PUSH
11707: LD_VAR 0 2
11711: ARRAY
11712: PUSH
11713: LD_INT 2
11715: ARRAY
11716: PPUSH
11717: CALL_OW 428
11721: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
11722: LD_VAR 0 5
11726: PPUSH
11727: LD_VAR 0 4
11731: PPUSH
11732: CALL 61942 0 1
11736: PPUSH
11737: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
11741: LD_VAR 0 5
11745: PPUSH
11746: LD_VAR 0 4
11750: PPUSH
11751: CALL_OW 52
// end ;
11755: GO 11635
11757: POP
11758: POP
// for i := 1 to 3 do
11759: LD_ADDR_VAR 0 2
11763: PUSH
11764: DOUBLE
11765: LD_INT 1
11767: DEC
11768: ST_TO_ADDR
11769: LD_INT 3
11771: PUSH
11772: FOR_TO
11773: IFFALSE 11828
// begin InitHc ;
11775: CALL_OW 19
// uc_nation := 0 ;
11779: LD_ADDR_OWVAR 21
11783: PUSH
11784: LD_INT 0
11786: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
11787: LD_ADDR_OWVAR 28
11791: PUSH
11792: LD_INT 16
11794: ST_TO_ADDR
// un := CreateHuman ;
11795: LD_ADDR_VAR 0 5
11799: PUSH
11800: CALL_OW 44
11804: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
11805: LD_VAR 0 5
11809: PPUSH
11810: LD_INT 194
11812: PPUSH
11813: LD_INT 164
11815: PPUSH
11816: LD_INT 6
11818: PPUSH
11819: LD_INT 0
11821: PPUSH
11822: CALL_OW 50
// end ;
11826: GO 11772
11828: POP
11829: POP
// uc_nation := 3 ;
11830: LD_ADDR_OWVAR 21
11834: PUSH
11835: LD_INT 3
11837: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
11838: LD_INT 24
11840: PPUSH
11841: LD_INT 1
11843: PPUSH
11844: LD_INT 1
11846: PPUSH
11847: LD_INT 44
11849: PPUSH
11850: LD_INT 10
11852: PPUSH
11853: CALL 34241 0 5
// un := CreateVehicle ;
11857: LD_ADDR_VAR 0 5
11861: PUSH
11862: CALL_OW 45
11866: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 166 , 1 , false ) ;
11867: LD_VAR 0 5
11871: PPUSH
11872: LD_INT 199
11874: PPUSH
11875: LD_INT 166
11877: PPUSH
11878: LD_INT 1
11880: PPUSH
11881: LD_INT 0
11883: PPUSH
11884: CALL 68834 0 5
// ComHold ( un ) ;
11888: LD_VAR 0 5
11892: PPUSH
11893: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
11897: LD_INT 0
11899: PPUSH
11900: LD_INT 3
11902: PPUSH
11903: LD_INT 4
11905: PPUSH
11906: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
11910: CALL_OW 44
11914: PPUSH
11915: LD_VAR 0 5
11919: PPUSH
11920: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
11924: LD_INT 24
11926: PPUSH
11927: LD_INT 1
11929: PPUSH
11930: LD_INT 1
11932: PPUSH
11933: LD_INT 45
11935: PPUSH
11936: LD_INT 10
11938: PPUSH
11939: CALL 34241 0 5
// un := CreateVehicle ;
11943: LD_ADDR_VAR 0 5
11947: PUSH
11948: CALL_OW 45
11952: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
11953: LD_VAR 0 5
11957: PPUSH
11958: LD_INT 129
11960: PPUSH
11961: LD_INT 93
11963: PPUSH
11964: LD_INT 1
11966: PPUSH
11967: LD_INT 0
11969: PPUSH
11970: CALL 68834 0 5
// ComHold ( un ) ;
11974: LD_VAR 0 5
11978: PPUSH
11979: CALL_OW 140
// if Difficulty > 1 then
11983: LD_OWVAR 67
11987: PUSH
11988: LD_INT 1
11990: GREATER
11991: IFFALSE 12079
// begin PrepareHuman ( false , 3 , 4 ) ;
11993: LD_INT 0
11995: PPUSH
11996: LD_INT 3
11998: PPUSH
11999: LD_INT 4
12001: PPUSH
12002: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12006: CALL_OW 44
12010: PPUSH
12011: LD_VAR 0 5
12015: PPUSH
12016: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
12020: LD_INT 24
12022: PPUSH
12023: LD_INT 1
12025: PPUSH
12026: LD_INT 1
12028: PPUSH
12029: LD_INT 45
12031: PPUSH
12032: LD_INT 10
12034: PPUSH
12035: CALL 34241 0 5
// un := CreateVehicle ;
12039: LD_ADDR_VAR 0 5
12043: PUSH
12044: CALL_OW 45
12048: ST_TO_ADDR
// PlaceUnitXYD ( un , 200 , 173 , 1 , false ) ;
12049: LD_VAR 0 5
12053: PPUSH
12054: LD_INT 200
12056: PPUSH
12057: LD_INT 173
12059: PPUSH
12060: LD_INT 1
12062: PPUSH
12063: LD_INT 0
12065: PPUSH
12066: CALL 68834 0 5
// ComHold ( un ) ;
12070: LD_VAR 0 5
12074: PPUSH
12075: CALL_OW 140
// end ; PrepareHuman ( false , 3 , 4 ) ;
12079: LD_INT 0
12081: PPUSH
12082: LD_INT 3
12084: PPUSH
12085: LD_INT 4
12087: PPUSH
12088: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12092: CALL_OW 44
12096: PPUSH
12097: LD_VAR 0 5
12101: PPUSH
12102: CALL_OW 52
// bc_type := b_armoury ;
12106: LD_ADDR_OWVAR 42
12110: PUSH
12111: LD_INT 4
12113: ST_TO_ADDR
// if Difficulty > 1 then
12114: LD_OWVAR 67
12118: PUSH
12119: LD_INT 1
12121: GREATER
12122: IFFALSE 12132
// bc_type := b_barracks ;
12124: LD_ADDR_OWVAR 42
12128: PUSH
12129: LD_INT 5
12131: ST_TO_ADDR
// bc_level := 6 ;
12132: LD_ADDR_OWVAR 43
12136: PUSH
12137: LD_INT 6
12139: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
12140: LD_INT 120
12142: PPUSH
12143: LD_INT 100
12145: PPUSH
12146: LD_INT 5
12148: PPUSH
12149: CALL_OW 47
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
12153: LD_ADDR_VAR 0 2
12157: PUSH
12158: DOUBLE
12159: LD_INT 1
12161: DEC
12162: ST_TO_ADDR
12163: LD_INT 3
12165: PUSH
12166: LD_INT 3
12168: PUSH
12169: LD_INT 4
12171: PUSH
12172: LD_INT 4
12174: PUSH
12175: EMPTY
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: PUSH
12181: LD_OWVAR 67
12185: ARRAY
12186: PUSH
12187: FOR_TO
12188: IFFALSE 12246
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_bazooker , class_bazooker ] [ Difficulty ] , 5 ) ;
12190: LD_INT 0
12192: PPUSH
12193: LD_INT 1
12195: PUSH
12196: LD_INT 1
12198: PUSH
12199: LD_INT 9
12201: PUSH
12202: LD_INT 9
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: PUSH
12211: LD_OWVAR 67
12215: ARRAY
12216: PPUSH
12217: LD_INT 5
12219: PPUSH
12220: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
12224: CALL_OW 44
12228: PPUSH
12229: LD_INT 120
12231: PPUSH
12232: LD_INT 100
12234: PPUSH
12235: CALL_OW 428
12239: PPUSH
12240: CALL_OW 52
// end ;
12244: GO 12187
12246: POP
12247: POP
// tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
12248: LD_ADDR_VAR 0 7
12252: PUSH
12253: LD_INT 135
12255: PUSH
12256: LD_INT 100
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: PUSH
12263: LD_INT 137
12265: PUSH
12266: LD_INT 92
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: ST_TO_ADDR
// for i := 1 to tmp do
12277: LD_ADDR_VAR 0 2
12281: PUSH
12282: DOUBLE
12283: LD_INT 1
12285: DEC
12286: ST_TO_ADDR
12287: LD_VAR 0 7
12291: PUSH
12292: FOR_TO
12293: IFFALSE 12463
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
12295: LD_INT 22
12297: PUSH
12298: LD_INT 22
12300: PUSH
12301: LD_INT 24
12303: PUSH
12304: LD_INT 24
12306: PUSH
12307: LD_INT 24
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: PUSH
12317: LD_OWVAR 67
12321: PUSH
12322: LD_INT 0
12324: PPUSH
12325: LD_INT 1
12327: PPUSH
12328: CALL_OW 12
12332: PLUS
12333: ARRAY
12334: PPUSH
12335: LD_INT 1
12337: PPUSH
12338: LD_INT 1
12340: PPUSH
12341: LD_INT 44
12343: PPUSH
12344: LD_INT 25
12346: PPUSH
12347: CALL 34241 0 5
// veh := CreateVehicle ;
12351: LD_ADDR_VAR 0 6
12355: PUSH
12356: CALL_OW 45
12360: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12361: LD_VAR 0 6
12365: PPUSH
12366: LD_INT 2
12368: PPUSH
12369: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
12373: LD_VAR 0 6
12377: PPUSH
12378: LD_VAR 0 7
12382: PUSH
12383: LD_VAR 0 2
12387: ARRAY
12388: PUSH
12389: LD_INT 1
12391: ARRAY
12392: PPUSH
12393: LD_VAR 0 7
12397: PUSH
12398: LD_VAR 0 2
12402: ARRAY
12403: PUSH
12404: LD_INT 2
12406: ARRAY
12407: PPUSH
12408: LD_INT 0
12410: PPUSH
12411: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
12415: LD_INT 0
12417: PPUSH
12418: LD_INT 3
12420: PPUSH
12421: LD_INT 6
12423: PPUSH
12424: CALL_OW 380
// un := CreateHuman ;
12428: LD_ADDR_VAR 0 5
12432: PUSH
12433: CALL_OW 44
12437: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12438: LD_VAR 0 5
12442: PPUSH
12443: LD_VAR 0 6
12447: PPUSH
12448: CALL_OW 52
// ComHold ( veh ) ;
12452: LD_VAR 0 6
12456: PPUSH
12457: CALL_OW 140
// end ;
12461: GO 12292
12463: POP
12464: POP
// tmp := [ 191 , 122 ] ;
12465: LD_ADDR_VAR 0 7
12469: PUSH
12470: LD_INT 191
12472: PUSH
12473: LD_INT 122
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
12480: LD_INT 24
12482: PPUSH
12483: LD_INT 1
12485: PPUSH
12486: LD_INT 1
12488: PPUSH
12489: LD_INT 44
12491: PPUSH
12492: LD_INT 30
12494: PPUSH
12495: CALL 34241 0 5
// ruBlockadeTank := CreateVehicle ;
12499: LD_ADDR_EXP 55
12503: PUSH
12504: CALL_OW 45
12508: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
12509: LD_EXP 55
12513: PPUSH
12514: LD_INT 2
12516: PPUSH
12517: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
12521: LD_EXP 55
12525: PPUSH
12526: LD_INT 191
12528: PPUSH
12529: LD_INT 122
12531: PPUSH
12532: LD_INT 0
12534: PPUSH
12535: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 , 7 ] [ Difficulty - 1 ] ) ;
12539: LD_INT 1
12541: PPUSH
12542: LD_INT 5
12544: PUSH
12545: LD_INT 6
12547: PUSH
12548: LD_INT 7
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: LIST
12555: PUSH
12556: LD_OWVAR 67
12560: PUSH
12561: LD_INT 1
12563: MINUS
12564: ARRAY
12565: PPUSH
12566: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
12570: CALL_OW 44
12574: PPUSH
12575: LD_EXP 55
12579: PPUSH
12580: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
12584: LD_EXP 55
12588: PPUSH
12589: CALL_OW 140
// ruBlockadeSquad := [ ] ;
12593: LD_ADDR_EXP 57
12597: PUSH
12598: EMPTY
12599: ST_TO_ADDR
// for i := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
12600: LD_ADDR_VAR 0 2
12604: PUSH
12605: DOUBLE
12606: LD_INT 1
12608: DEC
12609: ST_TO_ADDR
12610: LD_INT 2
12612: PUSH
12613: LD_INT 2
12615: PUSH
12616: LD_INT 3
12618: PUSH
12619: LD_INT 3
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: PUSH
12628: LD_OWVAR 67
12632: ARRAY
12633: PUSH
12634: FOR_TO
12635: IFFALSE 12751
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
12637: LD_INT 0
12639: PPUSH
12640: LD_INT 1
12642: PPUSH
12643: LD_INT 4
12645: PUSH
12646: LD_INT 5
12648: PUSH
12649: LD_INT 6
12651: PUSH
12652: LD_INT 7
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: PUSH
12661: LD_OWVAR 67
12665: ARRAY
12666: PPUSH
12667: CALL_OW 380
// un := CreateHuman ;
12671: LD_ADDR_VAR 0 5
12675: PUSH
12676: CALL_OW 44
12680: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
12681: LD_VAR 0 5
12685: PPUSH
12686: LD_INT 9
12688: PPUSH
12689: LD_INT 0
12691: PPUSH
12692: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
12696: LD_VAR 0 5
12700: PPUSH
12701: LD_INT 198
12703: PPUSH
12704: LD_INT 129
12706: PPUSH
12707: CALL_OW 118
// AddComCrawl ( un ) ;
12711: LD_VAR 0 5
12715: PPUSH
12716: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
12720: LD_ADDR_EXP 57
12724: PUSH
12725: LD_EXP 57
12729: PPUSH
12730: LD_EXP 57
12734: PUSH
12735: LD_INT 1
12737: PLUS
12738: PPUSH
12739: LD_VAR 0 5
12743: PPUSH
12744: CALL_OW 1
12748: ST_TO_ADDR
// end ;
12749: GO 12634
12751: POP
12752: POP
// PrepareHuman ( false , 4 , 5 ) ;
12753: LD_INT 0
12755: PPUSH
12756: LD_INT 4
12758: PPUSH
12759: LD_INT 5
12761: PPUSH
12762: CALL_OW 380
// un := CreateHuman ;
12766: LD_ADDR_VAR 0 5
12770: PUSH
12771: CALL_OW 44
12775: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
12776: LD_VAR 0 5
12780: PPUSH
12781: LD_INT 179
12783: PPUSH
12784: LD_INT 113
12786: PPUSH
12787: LD_INT 0
12789: PPUSH
12790: CALL_OW 48
// ComHold ( un ) ;
12794: LD_VAR 0 5
12798: PPUSH
12799: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
12803: LD_ADDR_EXP 57
12807: PUSH
12808: LD_EXP 57
12812: PPUSH
12813: LD_EXP 57
12817: PUSH
12818: LD_INT 1
12820: PLUS
12821: PPUSH
12822: LD_VAR 0 5
12826: PPUSH
12827: CALL_OW 1
12831: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
12832: LD_ADDR_VAR 0 7
12836: PUSH
12837: LD_INT 167
12839: PPUSH
12840: LD_INT 243
12842: PPUSH
12843: CALL_OW 428
12847: PPUSH
12848: CALL_OW 274
12852: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
12853: LD_VAR 0 7
12857: PPUSH
12858: LD_INT 1
12860: PPUSH
12861: LD_INT 1000
12863: PPUSH
12864: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
12868: LD_VAR 0 7
12872: PPUSH
12873: LD_INT 2
12875: PPUSH
12876: LD_INT 400
12878: PPUSH
12879: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
12883: LD_ADDR_VAR 0 7
12887: PUSH
12888: LD_INT 169
12890: PPUSH
12891: LD_INT 229
12893: PPUSH
12894: CALL_OW 428
12898: ST_TO_ADDR
// for i := 1 to 3 do
12899: LD_ADDR_VAR 0 2
12903: PUSH
12904: DOUBLE
12905: LD_INT 1
12907: DEC
12908: ST_TO_ADDR
12909: LD_INT 3
12911: PUSH
12912: FOR_TO
12913: IFFALSE 13004
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
12915: LD_INT 0
12917: PPUSH
12918: LD_INT 1
12920: PPUSH
12921: LD_INT 4
12923: PUSH
12924: LD_INT 5
12926: PUSH
12927: LD_INT 5
12929: PUSH
12930: LD_INT 6
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: PUSH
12939: LD_OWVAR 67
12943: ARRAY
12944: PPUSH
12945: CALL_OW 380
// un := CreateHuman ;
12949: LD_ADDR_VAR 0 5
12953: PUSH
12954: CALL_OW 44
12958: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
12959: LD_VAR 0 5
12963: PPUSH
12964: LD_VAR 0 7
12968: PPUSH
12969: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
12973: LD_ADDR_EXP 58
12977: PUSH
12978: LD_EXP 58
12982: PPUSH
12983: LD_EXP 58
12987: PUSH
12988: LD_INT 1
12990: PLUS
12991: PPUSH
12992: LD_VAR 0 5
12996: PPUSH
12997: CALL_OW 1
13001: ST_TO_ADDR
// end ;
13002: GO 12912
13004: POP
13005: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
13006: LD_ADDR_VAR 0 7
13010: PUSH
13011: LD_INT 165
13013: PUSH
13014: LD_INT 227
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: PUSH
13021: LD_INT 173
13023: PUSH
13024: LD_INT 231
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: ST_TO_ADDR
// for i := 1 to tmp do
13035: LD_ADDR_VAR 0 2
13039: PUSH
13040: DOUBLE
13041: LD_INT 1
13043: DEC
13044: ST_TO_ADDR
13045: LD_VAR 0 7
13049: PUSH
13050: FOR_TO
13051: IFFALSE 13172
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13053: LD_INT 0
13055: PPUSH
13056: LD_INT 1
13058: PPUSH
13059: LD_INT 4
13061: PUSH
13062: LD_INT 5
13064: PUSH
13065: LD_INT 5
13067: PUSH
13068: LD_INT 6
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: PUSH
13077: LD_OWVAR 67
13081: ARRAY
13082: PPUSH
13083: CALL_OW 380
// un := CreateHuman ;
13087: LD_ADDR_VAR 0 5
13091: PUSH
13092: CALL_OW 44
13096: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
13097: LD_VAR 0 5
13101: PPUSH
13102: LD_VAR 0 7
13106: PUSH
13107: LD_VAR 0 2
13111: ARRAY
13112: PUSH
13113: LD_INT 1
13115: ARRAY
13116: PPUSH
13117: LD_VAR 0 7
13121: PUSH
13122: LD_VAR 0 2
13126: ARRAY
13127: PUSH
13128: LD_INT 2
13130: ARRAY
13131: PPUSH
13132: CALL_OW 428
13136: PPUSH
13137: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
13141: LD_ADDR_EXP 58
13145: PUSH
13146: LD_EXP 58
13150: PPUSH
13151: LD_EXP 58
13155: PUSH
13156: LD_INT 1
13158: PLUS
13159: PPUSH
13160: LD_VAR 0 5
13164: PPUSH
13165: CALL_OW 1
13169: ST_TO_ADDR
// end ;
13170: GO 13050
13172: POP
13173: POP
// for i := 1 to 2 do
13174: LD_ADDR_VAR 0 2
13178: PUSH
13179: DOUBLE
13180: LD_INT 1
13182: DEC
13183: ST_TO_ADDR
13184: LD_INT 2
13186: PUSH
13187: FOR_TO
13188: IFFALSE 13243
// begin InitHc ;
13190: CALL_OW 19
// uc_nation := 0 ;
13194: LD_ADDR_OWVAR 21
13198: PUSH
13199: LD_INT 0
13201: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
13202: LD_ADDR_OWVAR 28
13206: PUSH
13207: LD_INT 16
13209: ST_TO_ADDR
// un := CreateHuman ;
13210: LD_ADDR_VAR 0 5
13214: PUSH
13215: CALL_OW 44
13219: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
13220: LD_VAR 0 5
13224: PPUSH
13225: LD_INT 166
13227: PPUSH
13228: LD_INT 233
13230: PPUSH
13231: LD_INT 2
13233: PPUSH
13234: LD_INT 0
13236: PPUSH
13237: CALL_OW 50
// end ;
13241: GO 13187
13243: POP
13244: POP
// uc_nation := 3 ;
13245: LD_ADDR_OWVAR 21
13249: PUSH
13250: LD_INT 3
13252: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
13253: LD_ADDR_VAR 0 7
13257: PUSH
13258: LD_INT 71
13260: PUSH
13261: LD_INT 52
13263: PUSH
13264: LD_INT 11
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: LIST
13271: ST_TO_ADDR
// for i in tmp do
13272: LD_ADDR_VAR 0 2
13276: PUSH
13277: LD_VAR 0 7
13281: PUSH
13282: FOR_IN
13283: IFFALSE 13327
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
13285: LD_VAR 0 2
13289: PPUSH
13290: CALL_OW 274
13294: PPUSH
13295: LD_INT 1
13297: PPUSH
13298: LD_INT 3000
13300: PPUSH
13301: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
13305: LD_VAR 0 2
13309: PPUSH
13310: CALL_OW 274
13314: PPUSH
13315: LD_INT 2
13317: PPUSH
13318: LD_INT 600
13320: PPUSH
13321: CALL_OW 277
// end ;
13325: GO 13282
13327: POP
13328: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
13329: LD_ADDR_VAR 0 7
13333: PUSH
13334: LD_INT 41
13336: PUSH
13337: LD_INT 57
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: PUSH
13344: LD_INT 38
13346: PUSH
13347: LD_INT 55
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: PUSH
13354: LD_INT 50
13356: PUSH
13357: LD_INT 73
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: PUSH
13364: LD_INT 51
13366: PUSH
13367: LD_INT 65
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: PUSH
13374: LD_INT 82
13376: PUSH
13377: LD_INT 93
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: PUSH
13384: LD_INT 87
13386: PUSH
13387: LD_INT 100
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: PUSH
13394: LD_INT 91
13396: PUSH
13397: LD_INT 109
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: PUSH
13404: LD_INT 84
13406: PUSH
13407: LD_INT 120
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: PUSH
13414: LD_INT 113
13416: PUSH
13417: LD_INT 153
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: PUSH
13424: LD_INT 123
13426: PUSH
13427: LD_INT 171
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: LD_INT 125
13436: PUSH
13437: LD_INT 178
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: LD_INT 125
13446: PUSH
13447: LD_INT 188
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: PUSH
13454: LD_INT 125
13456: PUSH
13457: LD_INT 201
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 33
13466: PUSH
13467: LD_INT 60
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: LD_INT 76
13476: PUSH
13477: LD_INT 95
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: LD_INT 84
13486: PUSH
13487: LD_INT 111
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: LD_INT 112
13496: PUSH
13497: LD_INT 165
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: ST_TO_ADDR
// for i := 1 to tmp do
13523: LD_ADDR_VAR 0 2
13527: PUSH
13528: DOUBLE
13529: LD_INT 1
13531: DEC
13532: ST_TO_ADDR
13533: LD_VAR 0 7
13537: PUSH
13538: FOR_TO
13539: IFFALSE 13786
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
13541: LD_ADDR_VAR 0 4
13545: PUSH
13546: LD_VAR 0 7
13550: PUSH
13551: LD_VAR 0 2
13555: ARRAY
13556: PUSH
13557: LD_INT 1
13559: ARRAY
13560: PPUSH
13561: LD_VAR 0 7
13565: PUSH
13566: LD_VAR 0 2
13570: ARRAY
13571: PUSH
13572: LD_INT 2
13574: ARRAY
13575: PPUSH
13576: CALL_OW 428
13580: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
13581: LD_VAR 0 4
13585: PPUSH
13586: CALL_OW 266
13590: PUSH
13591: LD_INT 4
13593: PUSH
13594: LD_INT 5
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: IN
13601: IFFALSE 13697
// begin for j := 1 to Difficulty do
13603: LD_ADDR_VAR 0 3
13607: PUSH
13608: DOUBLE
13609: LD_INT 1
13611: DEC
13612: ST_TO_ADDR
13613: LD_OWVAR 67
13617: PUSH
13618: FOR_TO
13619: IFFALSE 13693
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13621: LD_INT 0
13623: PPUSH
13624: LD_INT 1
13626: PPUSH
13627: LD_INT 4
13629: PUSH
13630: LD_INT 5
13632: PUSH
13633: LD_INT 5
13635: PUSH
13636: LD_INT 6
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: PUSH
13645: LD_OWVAR 67
13649: ARRAY
13650: PPUSH
13651: CALL_OW 380
// un := CreateHuman ;
13655: LD_ADDR_VAR 0 5
13659: PUSH
13660: CALL_OW 44
13664: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13665: LD_VAR 0 5
13669: PPUSH
13670: LD_VAR 0 4
13674: PPUSH
13675: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
13679: LD_VAR 0 5
13683: PPUSH
13684: LD_INT 9
13686: PPUSH
13687: CALL_OW 336
// end ;
13691: GO 13618
13693: POP
13694: POP
// end else
13695: GO 13755
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13697: LD_INT 0
13699: PPUSH
13700: LD_INT 1
13702: PPUSH
13703: LD_INT 4
13705: PUSH
13706: LD_INT 5
13708: PUSH
13709: LD_INT 5
13711: PUSH
13712: LD_INT 6
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: PUSH
13721: LD_OWVAR 67
13725: ARRAY
13726: PPUSH
13727: CALL_OW 380
// un := CreateHuman ;
13731: LD_ADDR_VAR 0 5
13735: PUSH
13736: CALL_OW 44
13740: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13741: LD_VAR 0 5
13745: PPUSH
13746: LD_VAR 0 4
13750: PPUSH
13751: CALL_OW 52
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13755: LD_ADDR_EXP 59
13759: PUSH
13760: LD_EXP 59
13764: PPUSH
13765: LD_EXP 59
13769: PUSH
13770: LD_INT 1
13772: PLUS
13773: PPUSH
13774: LD_VAR 0 5
13778: PPUSH
13779: CALL_OW 1
13783: ST_TO_ADDR
// end ;
13784: GO 13538
13786: POP
13787: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
13788: LD_ADDR_VAR 0 4
13792: PUSH
13793: LD_INT 10
13795: PPUSH
13796: LD_INT 22
13798: PUSH
13799: LD_INT 3
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: PUSH
13806: LD_INT 30
13808: PUSH
13809: LD_INT 32
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: PUSH
13816: LD_INT 58
13818: PUSH
13819: EMPTY
13820: LIST
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: LIST
13826: PPUSH
13827: CALL_OW 70
13831: PUSH
13832: FOR_IN
13833: IFFALSE 13967
// begin if not Prob ( [ 40 , 50 , 75 , 80 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
13835: LD_INT 40
13837: PUSH
13838: LD_INT 50
13840: PUSH
13841: LD_INT 75
13843: PUSH
13844: LD_INT 80
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: PUSH
13853: LD_OWVAR 67
13857: ARRAY
13858: PUSH
13859: LD_EXP 7
13863: PUSH
13864: LD_INT 10
13866: MUL
13867: MINUS
13868: PPUSH
13869: CALL_OW 13
13873: NOT
13874: IFFALSE 13878
// continue ;
13876: GO 13832
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13878: LD_INT 0
13880: PPUSH
13881: LD_INT 1
13883: PPUSH
13884: LD_INT 4
13886: PUSH
13887: LD_INT 5
13889: PUSH
13890: LD_INT 5
13892: PUSH
13893: LD_INT 6
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: PUSH
13902: LD_OWVAR 67
13906: ARRAY
13907: PPUSH
13908: CALL_OW 380
// un := CreateHuman ;
13912: LD_ADDR_VAR 0 5
13916: PUSH
13917: CALL_OW 44
13921: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13922: LD_VAR 0 5
13926: PPUSH
13927: LD_VAR 0 4
13931: PPUSH
13932: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13936: LD_ADDR_EXP 59
13940: PUSH
13941: LD_EXP 59
13945: PPUSH
13946: LD_EXP 59
13950: PUSH
13951: LD_INT 1
13953: PLUS
13954: PPUSH
13955: LD_VAR 0 5
13959: PPUSH
13960: CALL_OW 1
13964: ST_TO_ADDR
// end ;
13965: GO 13832
13967: POP
13968: POP
// for i := 1 to 5 do
13969: LD_ADDR_VAR 0 2
13973: PUSH
13974: DOUBLE
13975: LD_INT 1
13977: DEC
13978: ST_TO_ADDR
13979: LD_INT 5
13981: PUSH
13982: FOR_TO
13983: IFFALSE 14081
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13985: LD_INT 0
13987: PPUSH
13988: LD_INT 2
13990: PPUSH
13991: LD_INT 4
13993: PUSH
13994: LD_INT 5
13996: PUSH
13997: LD_INT 5
13999: PUSH
14000: LD_INT 6
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: PUSH
14009: LD_OWVAR 67
14013: ARRAY
14014: PPUSH
14015: CALL_OW 380
// un := CreateHuman ;
14019: LD_ADDR_VAR 0 5
14023: PUSH
14024: CALL_OW 44
14028: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
14029: LD_VAR 0 5
14033: PPUSH
14034: LD_INT 66
14036: PPUSH
14037: LD_INT 101
14039: PPUSH
14040: LD_INT 3
14042: PPUSH
14043: LD_INT 0
14045: PPUSH
14046: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14050: LD_ADDR_EXP 59
14054: PUSH
14055: LD_EXP 59
14059: PPUSH
14060: LD_EXP 59
14064: PUSH
14065: LD_INT 1
14067: PLUS
14068: PPUSH
14069: LD_VAR 0 5
14073: PPUSH
14074: CALL_OW 1
14078: ST_TO_ADDR
// end ;
14079: GO 13982
14081: POP
14082: POP
// tmp := [ ruFac1 , ruFac2 ] ;
14083: LD_ADDR_VAR 0 7
14087: PUSH
14088: LD_INT 72
14090: PUSH
14091: LD_INT 12
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: ST_TO_ADDR
// for i := 1 to tmp do
14098: LD_ADDR_VAR 0 2
14102: PUSH
14103: DOUBLE
14104: LD_INT 1
14106: DEC
14107: ST_TO_ADDR
14108: LD_VAR 0 7
14112: PUSH
14113: FOR_TO
14114: IFFALSE 14231
// for j := 1 to 6 do
14116: LD_ADDR_VAR 0 3
14120: PUSH
14121: DOUBLE
14122: LD_INT 1
14124: DEC
14125: ST_TO_ADDR
14126: LD_INT 6
14128: PUSH
14129: FOR_TO
14130: IFFALSE 14227
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14132: LD_INT 0
14134: PPUSH
14135: LD_INT 3
14137: PPUSH
14138: LD_INT 4
14140: PUSH
14141: LD_INT 5
14143: PUSH
14144: LD_INT 5
14146: PUSH
14147: LD_INT 6
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: PUSH
14156: LD_OWVAR 67
14160: ARRAY
14161: PPUSH
14162: CALL_OW 380
// un := CreateHuman ;
14166: LD_ADDR_VAR 0 5
14170: PUSH
14171: CALL_OW 44
14175: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
14176: LD_VAR 0 5
14180: PPUSH
14181: LD_VAR 0 7
14185: PUSH
14186: LD_VAR 0 2
14190: ARRAY
14191: PPUSH
14192: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14196: LD_ADDR_EXP 59
14200: PUSH
14201: LD_EXP 59
14205: PPUSH
14206: LD_EXP 59
14210: PUSH
14211: LD_INT 1
14213: PLUS
14214: PPUSH
14215: LD_VAR 0 5
14219: PPUSH
14220: CALL_OW 1
14224: ST_TO_ADDR
// end ;
14225: GO 14129
14227: POP
14228: POP
14229: GO 14113
14231: POP
14232: POP
// for i := 1 to 3 do
14233: LD_ADDR_VAR 0 2
14237: PUSH
14238: DOUBLE
14239: LD_INT 1
14241: DEC
14242: ST_TO_ADDR
14243: LD_INT 3
14245: PUSH
14246: FOR_TO
14247: IFFALSE 14336
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14249: LD_INT 0
14251: PPUSH
14252: LD_INT 4
14254: PPUSH
14255: LD_INT 4
14257: PUSH
14258: LD_INT 5
14260: PUSH
14261: LD_INT 5
14263: PUSH
14264: LD_INT 6
14266: PUSH
14267: EMPTY
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: PUSH
14273: LD_OWVAR 67
14277: ARRAY
14278: PPUSH
14279: CALL_OW 380
// un := CreateHuman ;
14283: LD_ADDR_VAR 0 5
14287: PUSH
14288: CALL_OW 44
14292: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
14293: LD_VAR 0 5
14297: PPUSH
14298: LD_INT 17
14300: PPUSH
14301: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14305: LD_ADDR_EXP 59
14309: PUSH
14310: LD_EXP 59
14314: PPUSH
14315: LD_EXP 59
14319: PUSH
14320: LD_INT 1
14322: PLUS
14323: PPUSH
14324: LD_VAR 0 5
14328: PPUSH
14329: CALL_OW 1
14333: ST_TO_ADDR
// end ;
14334: GO 14246
14336: POP
14337: POP
// for i := 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
14338: LD_ADDR_VAR 0 2
14342: PUSH
14343: DOUBLE
14344: LD_INT 1
14346: DEC
14347: ST_TO_ADDR
14348: LD_INT 2
14350: PUSH
14351: LD_INT 3
14353: PUSH
14354: LD_INT 3
14356: PUSH
14357: LD_INT 3
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: PUSH
14366: LD_OWVAR 67
14370: ARRAY
14371: PUSH
14372: FOR_TO
14373: IFFALSE 14493
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
14375: LD_INT 22
14377: PPUSH
14378: LD_INT 1
14380: PPUSH
14381: LD_INT 1
14383: PPUSH
14384: LD_INT 52
14386: PPUSH
14387: LD_INT 100
14389: PPUSH
14390: CALL 34241 0 5
// veh := CreateVehicle ;
14394: LD_ADDR_VAR 0 6
14398: PUSH
14399: CALL_OW 45
14403: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
14404: LD_INT 0
14406: PPUSH
14407: LD_INT 3
14409: PPUSH
14410: LD_INT 4
14412: PPUSH
14413: CALL_OW 380
// un := CreateHuman ;
14417: LD_ADDR_VAR 0 5
14421: PUSH
14422: CALL_OW 44
14426: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
14427: LD_VAR 0 6
14431: PPUSH
14432: LD_INT 107
14434: PPUSH
14435: LD_INT 182
14437: PPUSH
14438: LD_INT 4
14440: PPUSH
14441: LD_INT 0
14443: PPUSH
14444: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
14448: LD_VAR 0 5
14452: PPUSH
14453: LD_VAR 0 6
14457: PPUSH
14458: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14462: LD_ADDR_EXP 59
14466: PUSH
14467: LD_EXP 59
14471: PPUSH
14472: LD_EXP 59
14476: PUSH
14477: LD_INT 1
14479: PLUS
14480: PPUSH
14481: LD_VAR 0 5
14485: PPUSH
14486: CALL_OW 1
14490: ST_TO_ADDR
// end ;
14491: GO 14372
14493: POP
14494: POP
// InitHc ;
14495: CALL_OW 19
// for i := 1 to [ 3 , 5 , 6 , 8 ] [ Difficulty ] do
14499: LD_ADDR_VAR 0 2
14503: PUSH
14504: DOUBLE
14505: LD_INT 1
14507: DEC
14508: ST_TO_ADDR
14509: LD_INT 3
14511: PUSH
14512: LD_INT 5
14514: PUSH
14515: LD_INT 6
14517: PUSH
14518: LD_INT 8
14520: PUSH
14521: EMPTY
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: PUSH
14527: LD_OWVAR 67
14531: ARRAY
14532: PUSH
14533: FOR_TO
14534: IFFALSE 14629
// begin uc_nation := 0 ;
14536: LD_ADDR_OWVAR 21
14540: PUSH
14541: LD_INT 0
14543: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
14544: LD_ADDR_OWVAR 28
14548: PUSH
14549: LD_INT 15
14551: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
14552: LD_ADDR_OWVAR 31
14556: PUSH
14557: LD_INT 3
14559: PUSH
14560: LD_INT 0
14562: PUSH
14563: LD_INT 0
14565: PUSH
14566: LD_INT 0
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: ST_TO_ADDR
// un := CreateHuman ;
14575: LD_ADDR_VAR 0 5
14579: PUSH
14580: CALL_OW 44
14584: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
14585: LD_VAR 0 5
14589: PPUSH
14590: LD_INT 269
14592: PUSH
14593: LD_INT 300
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: PUSH
14600: LD_VAR 0 2
14604: PUSH
14605: LD_INT 2
14607: MOD
14608: PUSH
14609: LD_INT 1
14611: PLUS
14612: ARRAY
14613: PPUSH
14614: LD_INT 182
14616: PPUSH
14617: LD_INT 4
14619: PPUSH
14620: LD_INT 0
14622: PPUSH
14623: CALL_OW 50
// end ;
14627: GO 14533
14629: POP
14630: POP
// uc_nation := 3 ;
14631: LD_ADDR_OWVAR 21
14635: PUSH
14636: LD_INT 3
14638: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
14639: LD_EXP 8
14643: PUSH
14644: LD_INT 10
14646: PUSH
14647: LD_INT 8
14649: PUSH
14650: LD_INT 6
14652: PUSH
14653: LD_INT 5
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: PUSH
14662: LD_OWVAR 67
14666: ARRAY
14667: LESS
14668: IFFALSE 14747
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
14670: LD_INT 21
14672: PPUSH
14673: LD_INT 1
14675: PPUSH
14676: LD_INT 1
14678: PPUSH
14679: LD_INT 51
14681: PPUSH
14682: LD_INT 12
14684: PPUSH
14685: CALL 34241 0 5
// veh := CreateVehicle ;
14689: LD_ADDR_VAR 0 6
14693: PUSH
14694: CALL_OW 45
14698: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
14699: LD_VAR 0 6
14703: PPUSH
14704: LD_INT 269
14706: PPUSH
14707: LD_INT 66
14709: PPUSH
14710: LD_INT 4
14712: PPUSH
14713: LD_INT 0
14715: PPUSH
14716: CALL 68834 0 5
// SetLives ( veh , 333 ) ;
14720: LD_VAR 0 6
14724: PPUSH
14725: LD_INT 333
14727: PPUSH
14728: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
14732: LD_VAR 0 6
14736: PPUSH
14737: LD_INT 2
14739: PPUSH
14740: LD_INT 100
14742: PPUSH
14743: CALL_OW 290
// end ; end ;
14747: LD_VAR 0 1
14751: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
14752: LD_EXP 55
14756: PUSH
14757: LD_EXP 55
14761: PPUSH
14762: CALL_OW 255
14766: PUSH
14767: LD_INT 3
14769: EQUAL
14770: AND
14771: IFFALSE 14934
14773: GO 14775
14775: DISABLE
14776: LD_INT 0
14778: PPUSH
// begin enable ;
14779: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
14780: LD_INT 81
14782: PUSH
14783: LD_INT 3
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: PUSH
14790: LD_INT 91
14792: PUSH
14793: LD_EXP 55
14797: PUSH
14798: LD_INT 15
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: LIST
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PPUSH
14810: CALL_OW 69
14814: IFFALSE 14894
// begin if not IsDrivenBy ( ruBlockadeTank ) then
14816: LD_EXP 55
14820: PPUSH
14821: CALL_OW 311
14825: NOT
14826: IFFALSE 14892
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
14828: LD_ADDR_VAR 0 1
14832: PUSH
14833: LD_INT 22
14835: PUSH
14836: LD_INT 3
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PUSH
14843: LD_INT 21
14845: PUSH
14846: LD_INT 1
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PPUSH
14857: CALL_OW 69
14861: PPUSH
14862: LD_EXP 55
14866: PPUSH
14867: CALL_OW 74
14871: ST_TO_ADDR
// if driver then
14872: LD_VAR 0 1
14876: IFFALSE 14892
// ComEnterUnit ( driver , ruBlockadeTank ) ;
14878: LD_VAR 0 1
14882: PPUSH
14883: LD_EXP 55
14887: PPUSH
14888: CALL_OW 120
// end ; exit ;
14892: GO 14934
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
14894: LD_EXP 55
14898: PPUSH
14899: CALL_OW 256
14903: PUSH
14904: LD_INT 1000
14906: LESS
14907: PUSH
14908: LD_EXP 55
14912: PPUSH
14913: CALL_OW 311
14917: AND
14918: IFFALSE 14934
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
14920: LD_EXP 55
14924: PPUSH
14925: CALL_OW 311
14929: PPUSH
14930: CALL 68394 0 1
// end ;
14934: PPOPN 1
14936: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
14937: LD_EXP 57
14941: PPUSH
14942: LD_INT 3
14944: PUSH
14945: LD_INT 24
14947: PUSH
14948: LD_INT 1000
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: PPUSH
14959: CALL_OW 72
14963: PUSH
14964: LD_EXP 57
14968: PPUSH
14969: LD_INT 25
14971: PUSH
14972: LD_INT 4
14974: PUSH
14975: EMPTY
14976: LIST
14977: LIST
14978: PUSH
14979: LD_INT 50
14981: PUSH
14982: EMPTY
14983: LIST
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PPUSH
14989: CALL_OW 72
14993: AND
14994: IFFALSE 15182
14996: GO 14998
14998: DISABLE
14999: LD_INT 0
15001: PPUSH
15002: PPUSH
15003: PPUSH
// begin enable ;
15004: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
15005: LD_ADDR_VAR 0 3
15009: PUSH
15010: LD_EXP 57
15014: PPUSH
15015: LD_INT 3
15017: PUSH
15018: LD_INT 24
15020: PUSH
15021: LD_INT 1000
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PPUSH
15032: CALL_OW 72
15036: PPUSH
15037: LD_INT 1
15039: PPUSH
15040: CALL 68634 0 2
15044: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
15045: LD_ADDR_VAR 0 2
15049: PUSH
15050: LD_EXP 57
15054: PPUSH
15055: LD_INT 25
15057: PUSH
15058: LD_INT 4
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: PUSH
15065: LD_INT 50
15067: PUSH
15068: EMPTY
15069: LIST
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: PPUSH
15075: CALL_OW 72
15079: PUSH
15080: LD_INT 1
15082: ARRAY
15083: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
15084: LD_VAR 0 2
15088: PPUSH
15089: LD_VAR 0 3
15093: PUSH
15094: LD_INT 1
15096: ARRAY
15097: PPUSH
15098: CALL 63987 0 2
15102: NOT
15103: IFFALSE 15182
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
15105: LD_VAR 0 3
15109: PUSH
15110: LD_INT 1
15112: ARRAY
15113: PPUSH
15114: LD_INT 9
15116: PPUSH
15117: CALL_OW 308
15121: NOT
15122: IFFALSE 15140
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
15124: LD_VAR 0 3
15128: PUSH
15129: LD_INT 1
15131: ARRAY
15132: PPUSH
15133: LD_INT 9
15135: PPUSH
15136: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
15140: LD_VAR 0 2
15144: PPUSH
15145: LD_VAR 0 3
15149: PUSH
15150: LD_INT 1
15152: ARRAY
15153: PPUSH
15154: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
15158: LD_VAR 0 2
15162: PPUSH
15163: LD_INT 179
15165: PPUSH
15166: LD_INT 113
15168: PPUSH
15169: CALL_OW 171
// AddComHold ( sci ) ;
15173: LD_VAR 0 2
15177: PPUSH
15178: CALL_OW 200
// end ; end ;
15182: PPOPN 3
15184: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
15185: LD_INT 2
15187: PPUSH
15188: LD_INT 52
15190: PPUSH
15191: CALL_OW 292
15195: IFFALSE 15300
15197: GO 15199
15199: DISABLE
15200: LD_INT 0
15202: PPUSH
15203: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
15204: LD_ADDR_VAR 0 2
15208: PUSH
15209: LD_EXP 59
15213: PPUSH
15214: LD_INT 25
15216: PUSH
15217: LD_INT 1
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: PUSH
15224: LD_INT 50
15226: PUSH
15227: EMPTY
15228: LIST
15229: PUSH
15230: EMPTY
15231: LIST
15232: LIST
15233: PPUSH
15234: CALL_OW 72
15238: ST_TO_ADDR
// if not tmp then
15239: LD_VAR 0 2
15243: NOT
15244: IFFALSE 15248
// exit ;
15246: GO 15300
// for i in tmp do
15248: LD_ADDR_VAR 0 1
15252: PUSH
15253: LD_VAR 0 2
15257: PUSH
15258: FOR_IN
15259: IFFALSE 15298
// begin if IsInUnit ( i ) then
15261: LD_VAR 0 1
15265: PPUSH
15266: CALL_OW 310
15270: IFFALSE 15281
// ComExitBuilding ( i ) ;
15272: LD_VAR 0 1
15276: PPUSH
15277: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
15281: LD_VAR 0 1
15285: PPUSH
15286: LD_INT 84
15288: PPUSH
15289: LD_INT 133
15291: PPUSH
15292: CALL_OW 174
// end ;
15296: GO 15258
15298: POP
15299: POP
// end ;
15300: PPOPN 2
15302: END
// every 0 0$10 trigger leninSpotted do var i , tmp , weapon ;
15303: LD_EXP 14
15307: IFFALSE 15488
15309: GO 15311
15311: DISABLE
15312: LD_INT 0
15314: PPUSH
15315: PPUSH
15316: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
15317: LD_ADDR_VAR 0 2
15321: PUSH
15322: LD_INT 72
15324: PUSH
15325: LD_INT 12
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket_launcher , ru_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] ] [ Difficulty ] ;
15332: LD_ADDR_VAR 0 3
15336: PUSH
15337: LD_INT 44
15339: PUSH
15340: LD_INT 43
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: LD_INT 45
15349: PUSH
15350: LD_INT 44
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: LD_INT 45
15359: PUSH
15360: LD_INT 46
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: LD_INT 45
15369: PUSH
15370: LD_INT 46
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: PUSH
15383: LD_OWVAR 67
15387: ARRAY
15388: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
15389: LD_ADDR_VAR 0 1
15393: PUSH
15394: DOUBLE
15395: LD_INT 1
15397: DEC
15398: ST_TO_ADDR
15399: LD_INT 1
15401: PUSH
15402: LD_INT 2
15404: PUSH
15405: LD_INT 2
15407: PUSH
15408: LD_INT 3
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: PUSH
15417: LD_OWVAR 67
15421: ARRAY
15422: PUSH
15423: FOR_TO
15424: IFFALSE 15486
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
15426: LD_VAR 0 2
15430: PPUSH
15431: LD_INT 22
15433: PUSH
15434: LD_INT 23
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PUSH
15441: LD_VAR 0 1
15445: PUSH
15446: LD_INT 2
15448: MOD
15449: PUSH
15450: LD_INT 1
15452: PLUS
15453: ARRAY
15454: PPUSH
15455: LD_INT 1
15457: PPUSH
15458: LD_INT 1
15460: PPUSH
15461: LD_VAR 0 3
15465: PUSH
15466: LD_VAR 0 1
15470: PUSH
15471: LD_INT 2
15473: MOD
15474: PUSH
15475: LD_INT 1
15477: PLUS
15478: ARRAY
15479: PPUSH
15480: CALL_OW 185
15484: GO 15423
15486: POP
15487: POP
// end ;
15488: PPOPN 3
15490: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
15491: LD_EXP 11
15495: IFFALSE 16644
15497: GO 15499
15499: DISABLE
15500: LD_INT 0
15502: PPUSH
15503: PPUSH
15504: PPUSH
15505: PPUSH
15506: PPUSH
15507: PPUSH
// begin enable ;
15508: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
15509: LD_ADDR_VAR 0 6
15513: PUSH
15514: LD_INT 10
15516: PPUSH
15517: LD_INT 81
15519: PUSH
15520: LD_INT 3
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PPUSH
15527: CALL_OW 70
15531: ST_TO_ADDR
// if ruSpecialVehicleGroup then
15532: LD_EXP 60
15536: IFFALSE 15802
// begin for i in ruSpecialVehicleGroup do
15538: LD_ADDR_VAR 0 1
15542: PUSH
15543: LD_EXP 60
15547: PUSH
15548: FOR_IN
15549: IFFALSE 15800
// begin if enemyInBase then
15551: LD_VAR 0 6
15555: IFFALSE 15798
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
15557: LD_VAR 0 1
15561: PPUSH
15562: CALL_OW 256
15566: PUSH
15567: LD_INT 500
15569: GREATER
15570: PUSH
15571: LD_VAR 0 1
15575: PPUSH
15576: CALL_OW 110
15580: PUSH
15581: LD_INT 0
15583: EQUAL
15584: AND
15585: IFFALSE 15611
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
15587: LD_VAR 0 1
15591: PPUSH
15592: LD_VAR 0 6
15596: PPUSH
15597: LD_VAR 0 1
15601: PPUSH
15602: CALL_OW 74
15606: PPUSH
15607: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
15611: LD_VAR 0 1
15615: PPUSH
15616: CALL_OW 256
15620: PUSH
15621: LD_INT 500
15623: LESSEQUAL
15624: PUSH
15625: LD_VAR 0 1
15629: PPUSH
15630: CALL_OW 110
15634: PUSH
15635: LD_INT 0
15637: EQUAL
15638: AND
15639: IFFALSE 15668
// begin SetTag ( i , 1 ) ;
15641: LD_VAR 0 1
15645: PPUSH
15646: LD_INT 1
15648: PPUSH
15649: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
15653: LD_VAR 0 1
15657: PPUSH
15658: LD_INT 83
15660: PPUSH
15661: LD_INT 134
15663: PPUSH
15664: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
15668: LD_VAR 0 1
15672: PPUSH
15673: CALL_OW 256
15677: PUSH
15678: LD_INT 1000
15680: LESS
15681: PUSH
15682: LD_VAR 0 1
15686: PPUSH
15687: CALL_OW 110
15691: PUSH
15692: LD_INT 1
15694: EQUAL
15695: AND
15696: PUSH
15697: LD_VAR 0 1
15701: PPUSH
15702: LD_INT 83
15704: PPUSH
15705: LD_INT 134
15707: PPUSH
15708: CALL_OW 297
15712: PUSH
15713: LD_INT 6
15715: LESS
15716: AND
15717: IFFALSE 15745
// begin SetFuel ( i , 100 ) ;
15719: LD_VAR 0 1
15723: PPUSH
15724: LD_INT 100
15726: PPUSH
15727: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
15731: LD_VAR 0 1
15735: PPUSH
15736: CALL_OW 310
15740: PPUSH
15741: CALL 68514 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
15745: LD_VAR 0 1
15749: PPUSH
15750: CALL_OW 256
15754: PUSH
15755: LD_INT 1000
15757: EQUAL
15758: PUSH
15759: LD_VAR 0 1
15763: PPUSH
15764: CALL_OW 110
15768: PUSH
15769: LD_INT 1
15771: EQUAL
15772: AND
15773: PUSH
15774: LD_VAR 0 1
15778: PPUSH
15779: CALL_OW 311
15783: AND
15784: IFFALSE 15798
// SetTag ( i , 0 ) ;
15786: LD_VAR 0 1
15790: PPUSH
15791: LD_INT 0
15793: PPUSH
15794: CALL_OW 109
// end ; end ;
15798: GO 15548
15800: POP
15801: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
15802: LD_ADDR_VAR 0 5
15806: PUSH
15807: LD_EXP 59
15811: PPUSH
15812: LD_INT 25
15814: PUSH
15815: LD_INT 4
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PPUSH
15822: CALL_OW 72
15826: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15827: LD_ADDR_VAR 0 4
15831: PUSH
15832: LD_EXP 59
15836: PPUSH
15837: LD_INT 92
15839: PUSH
15840: LD_INT 92
15842: PUSH
15843: LD_INT 155
15845: PUSH
15846: LD_INT 12
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: PUSH
15855: LD_INT 3
15857: PUSH
15858: LD_INT 24
15860: PUSH
15861: LD_INT 1000
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PPUSH
15876: CALL_OW 72
15880: ST_TO_ADDR
// if sci then
15881: LD_VAR 0 5
15885: IFFALSE 16018
// begin if hurt then
15887: LD_VAR 0 4
15891: IFFALSE 15964
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
15893: LD_VAR 0 5
15897: PPUSH
15898: LD_INT 3
15900: PUSH
15901: LD_INT 54
15903: PUSH
15904: EMPTY
15905: LIST
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: PPUSH
15911: CALL_OW 72
15915: IFFALSE 15944
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
15917: LD_VAR 0 5
15921: PPUSH
15922: LD_INT 3
15924: PUSH
15925: LD_INT 54
15927: PUSH
15928: EMPTY
15929: LIST
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: PPUSH
15935: CALL_OW 72
15939: PPUSH
15940: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
15944: LD_VAR 0 5
15948: PPUSH
15949: LD_VAR 0 4
15953: PUSH
15954: LD_INT 1
15956: ARRAY
15957: PPUSH
15958: CALL_OW 188
// end else
15962: GO 16018
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
15964: LD_VAR 0 5
15968: PPUSH
15969: LD_INT 3
15971: PUSH
15972: LD_INT 54
15974: PUSH
15975: EMPTY
15976: LIST
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PPUSH
15982: CALL_OW 72
15986: IFFALSE 16018
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
15988: LD_VAR 0 5
15992: PPUSH
15993: LD_INT 3
15995: PUSH
15996: LD_INT 54
15998: PUSH
15999: EMPTY
16000: LIST
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: PPUSH
16006: CALL_OW 72
16010: PPUSH
16011: LD_INT 17
16013: PPUSH
16014: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16018: LD_ADDR_VAR 0 3
16022: PUSH
16023: LD_INT 10
16025: PPUSH
16026: LD_INT 21
16028: PUSH
16029: LD_INT 3
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: PUSH
16036: LD_INT 3
16038: PUSH
16039: LD_INT 24
16041: PUSH
16042: LD_INT 1000
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PPUSH
16057: CALL_OW 70
16061: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
16062: LD_ADDR_VAR 0 2
16066: PUSH
16067: LD_EXP 59
16071: PPUSH
16072: LD_INT 25
16074: PUSH
16075: LD_INT 2
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: PPUSH
16082: CALL_OW 72
16086: PUSH
16087: LD_INT 22
16089: PUSH
16090: LD_INT 3
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PUSH
16097: LD_INT 34
16099: PUSH
16100: LD_INT 52
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: PPUSH
16111: CALL_OW 69
16115: UNION
16116: ST_TO_ADDR
// if not tmp then
16117: LD_VAR 0 2
16121: NOT
16122: IFFALSE 16126
// exit ;
16124: GO 16644
// for i in tmp do
16126: LD_ADDR_VAR 0 1
16130: PUSH
16131: LD_VAR 0 2
16135: PUSH
16136: FOR_IN
16137: IFFALSE 16642
// begin if GetClass ( i ) = 2 then
16139: LD_VAR 0 1
16143: PPUSH
16144: CALL_OW 257
16148: PUSH
16149: LD_INT 2
16151: EQUAL
16152: IFFALSE 16375
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16154: LD_VAR 0 1
16158: PPUSH
16159: CALL_OW 256
16163: PUSH
16164: LD_INT 1000
16166: EQUAL
16167: PUSH
16168: LD_VAR 0 1
16172: PPUSH
16173: CALL_OW 110
16177: PUSH
16178: LD_INT 1
16180: EQUAL
16181: AND
16182: IFFALSE 16196
// SetTag ( i , 0 ) ;
16184: LD_VAR 0 1
16188: PPUSH
16189: LD_INT 0
16191: PPUSH
16192: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16196: LD_VAR 0 1
16200: PPUSH
16201: CALL_OW 256
16205: PUSH
16206: LD_INT 500
16208: LESSEQUAL
16209: PUSH
16210: LD_VAR 0 1
16214: PPUSH
16215: CALL_OW 110
16219: PUSH
16220: LD_INT 0
16222: EQUAL
16223: AND
16224: IFFALSE 16253
// begin SetTag ( i , 1 ) ;
16226: LD_VAR 0 1
16230: PPUSH
16231: LD_INT 1
16233: PPUSH
16234: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
16238: LD_VAR 0 1
16242: PPUSH
16243: LD_INT 92
16245: PPUSH
16246: LD_INT 155
16248: PPUSH
16249: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
16253: LD_VAR 0 3
16257: PUSH
16258: LD_VAR 0 1
16262: PPUSH
16263: CALL_OW 256
16267: PUSH
16268: LD_INT 500
16270: GREATER
16271: AND
16272: PUSH
16273: LD_VAR 0 1
16277: PPUSH
16278: CALL_OW 110
16282: PUSH
16283: LD_INT 0
16285: EQUAL
16286: AND
16287: PUSH
16288: LD_VAR 0 1
16292: PPUSH
16293: CALL_OW 314
16297: NOT
16298: AND
16299: IFFALSE 16373
// begin if b then
16301: LD_VAR 0 3
16305: IFFALSE 16337
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16307: LD_VAR 0 1
16311: PPUSH
16312: LD_VAR 0 3
16316: PUSH
16317: LD_INT 1
16319: PPUSH
16320: LD_VAR 0 3
16324: PPUSH
16325: CALL_OW 12
16329: ARRAY
16330: PPUSH
16331: CALL_OW 130
16335: GO 16373
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16337: LD_VAR 0 1
16341: PPUSH
16342: LD_INT 94
16344: PPUSH
16345: LD_INT 165
16347: PPUSH
16348: CALL_OW 297
16352: PUSH
16353: LD_INT 8
16355: GREATER
16356: IFFALSE 16373
// ComMoveXY ( i , 94 , 165 ) ;
16358: LD_VAR 0 1
16362: PPUSH
16363: LD_INT 94
16365: PPUSH
16366: LD_INT 165
16368: PPUSH
16369: CALL_OW 111
// end ; end else
16373: GO 16640
// if GetWeapon ( i ) = ru_crane then
16375: LD_VAR 0 1
16379: PPUSH
16380: CALL_OW 264
16384: PUSH
16385: LD_INT 52
16387: EQUAL
16388: IFFALSE 16640
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16390: LD_VAR 0 1
16394: PPUSH
16395: CALL_OW 256
16399: PUSH
16400: LD_INT 1000
16402: EQUAL
16403: PUSH
16404: LD_VAR 0 1
16408: PPUSH
16409: CALL_OW 110
16413: PUSH
16414: LD_INT 1
16416: EQUAL
16417: AND
16418: IFFALSE 16444
// begin SetTag ( i , 0 ) ;
16420: LD_VAR 0 1
16424: PPUSH
16425: LD_INT 0
16427: PPUSH
16428: CALL_OW 109
// SetFuel ( i , 100 ) ;
16432: LD_VAR 0 1
16436: PPUSH
16437: LD_INT 100
16439: PPUSH
16440: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16444: LD_VAR 0 1
16448: PPUSH
16449: CALL_OW 256
16453: PUSH
16454: LD_INT 500
16456: LESSEQUAL
16457: PUSH
16458: LD_VAR 0 1
16462: PPUSH
16463: CALL_OW 110
16467: PUSH
16468: LD_INT 0
16470: EQUAL
16471: AND
16472: IFFALSE 16515
// begin SetTag ( i , 1 ) ;
16474: LD_VAR 0 1
16478: PPUSH
16479: LD_INT 1
16481: PPUSH
16482: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
16486: LD_VAR 0 1
16490: PPUSH
16491: LD_INT 83
16493: PPUSH
16494: LD_INT 135
16496: PPUSH
16497: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
16501: LD_VAR 0 1
16505: PPUSH
16506: CALL_OW 310
16510: PPUSH
16511: CALL 68514 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
16515: LD_VAR 0 1
16519: PPUSH
16520: CALL_OW 256
16524: PUSH
16525: LD_INT 500
16527: GREATER
16528: PUSH
16529: LD_VAR 0 1
16533: PPUSH
16534: CALL_OW 110
16538: PUSH
16539: LD_INT 0
16541: EQUAL
16542: AND
16543: PUSH
16544: LD_VAR 0 1
16548: PPUSH
16549: CALL_OW 311
16553: AND
16554: PUSH
16555: LD_VAR 0 1
16559: PPUSH
16560: CALL_OW 314
16564: NOT
16565: AND
16566: IFFALSE 16640
// begin if b then
16568: LD_VAR 0 3
16572: IFFALSE 16604
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16574: LD_VAR 0 1
16578: PPUSH
16579: LD_VAR 0 3
16583: PUSH
16584: LD_INT 1
16586: PPUSH
16587: LD_VAR 0 3
16591: PPUSH
16592: CALL_OW 12
16596: ARRAY
16597: PPUSH
16598: CALL_OW 130
16602: GO 16640
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16604: LD_VAR 0 1
16608: PPUSH
16609: LD_INT 94
16611: PPUSH
16612: LD_INT 165
16614: PPUSH
16615: CALL_OW 297
16619: PUSH
16620: LD_INT 8
16622: GREATER
16623: IFFALSE 16640
// ComMoveXY ( i , 94 , 165 ) ;
16625: LD_VAR 0 1
16629: PPUSH
16630: LD_INT 94
16632: PPUSH
16633: LD_INT 165
16635: PPUSH
16636: CALL_OW 111
// end ; end ; end ;
16640: GO 16136
16642: POP
16643: POP
// end ;
16644: PPOPN 6
16646: END
// every 10 10$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp , tmp2 ;
16647: LD_EXP 23
16651: NOT
16652: PUSH
16653: LD_EXP 27
16657: NOT
16658: AND
16659: IFFALSE 17574
16661: GO 16663
16663: DISABLE
16664: LD_INT 0
16666: PPUSH
16667: PPUSH
16668: PPUSH
16669: PPUSH
16670: PPUSH
// begin enable ;
16671: ENABLE
// if Prob ( [ 35 , 45 , 55 , 60 ] [ Difficulty ] ) then
16672: LD_INT 35
16674: PUSH
16675: LD_INT 45
16677: PUSH
16678: LD_INT 55
16680: PUSH
16681: LD_INT 60
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: PUSH
16690: LD_OWVAR 67
16694: ARRAY
16695: PPUSH
16696: CALL_OW 13
16700: IFFALSE 16716
// waveStrength := waveStrength + 1 ;
16702: LD_ADDR_EXP 62
16706: PUSH
16707: LD_EXP 62
16711: PUSH
16712: LD_INT 1
16714: PLUS
16715: ST_TO_ADDR
// if waveStrength > [ 2 , 3 , 4 , 4 ] [ Difficulty ] then
16716: LD_EXP 62
16720: PUSH
16721: LD_INT 2
16723: PUSH
16724: LD_INT 3
16726: PUSH
16727: LD_INT 4
16729: PUSH
16730: LD_INT 4
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: PUSH
16739: LD_OWVAR 67
16743: ARRAY
16744: GREATER
16745: IFFALSE 16777
// begin waveStrength := waveStrength + 2 ;
16747: LD_ADDR_EXP 62
16751: PUSH
16752: LD_EXP 62
16756: PUSH
16757: LD_INT 2
16759: PLUS
16760: ST_TO_ADDR
// disableAttackOnHeike := true ;
16761: LD_ADDR_EXP 27
16765: PUSH
16766: LD_INT 1
16768: ST_TO_ADDR
// disable ;
16769: DISABLE
// wait ( 3 3$00 ) ;
16770: LD_INT 6300
16772: PPUSH
16773: CALL_OW 67
// end ; for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
16777: LD_ADDR_VAR 0 1
16781: PUSH
16782: DOUBLE
16783: LD_INT 1
16785: DEC
16786: ST_TO_ADDR
16787: LD_INT 2
16789: PUSH
16790: LD_INT 2
16792: PUSH
16793: LD_INT 3
16795: PUSH
16796: LD_INT 4
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: PUSH
16805: LD_OWVAR 67
16809: ARRAY
16810: PUSH
16811: FOR_TO
16812: IFFALSE 16973
// begin InitHc ;
16814: CALL_OW 19
// InitVc ;
16818: CALL_OW 20
// uc_side := 3 ;
16822: LD_ADDR_OWVAR 20
16826: PUSH
16827: LD_INT 3
16829: ST_TO_ADDR
// uc_nation := 3 ;
16830: LD_ADDR_OWVAR 21
16834: PUSH
16835: LD_INT 3
16837: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
16838: LD_INT 0
16840: PPUSH
16841: LD_INT 1
16843: PPUSH
16844: LD_OWVAR 67
16848: PUSH
16849: LD_INT 2
16851: PLUS
16852: PPUSH
16853: CALL_OW 380
// un := CreateHuman ;
16857: LD_ADDR_VAR 0 2
16861: PUSH
16862: CALL_OW 44
16866: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
16867: LD_VAR 0 2
16871: PPUSH
16872: LD_INT 160
16874: PPUSH
16875: LD_INT 3
16877: PPUSH
16878: LD_INT 2
16880: PPUSH
16881: LD_INT 0
16883: PPUSH
16884: CALL 68834 0 5
// SetClass ( un , class_bazooker ) ;
16888: LD_VAR 0 2
16892: PPUSH
16893: LD_INT 9
16895: PPUSH
16896: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
16900: LD_ADDR_EXP 61
16904: PUSH
16905: LD_EXP 61
16909: PPUSH
16910: LD_EXP 61
16914: PUSH
16915: LD_INT 1
16917: PLUS
16918: PPUSH
16919: LD_VAR 0 2
16923: PPUSH
16924: CALL_OW 1
16928: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
16929: LD_VAR 0 2
16933: PPUSH
16934: LD_INT 177
16936: PPUSH
16937: LD_INT 17
16939: PPUSH
16940: CALL_OW 111
// wait ( 0 0$2 ) ;
16944: LD_INT 70
16946: PPUSH
16947: CALL_OW 67
// tmp2 := Join ( tmp2 , un ) ;
16951: LD_ADDR_VAR 0 5
16955: PUSH
16956: LD_VAR 0 5
16960: PPUSH
16961: LD_VAR 0 2
16965: PPUSH
16966: CALL 66694 0 2
16970: ST_TO_ADDR
// end ;
16971: GO 16811
16973: POP
16974: POP
// AddComAgressiveMove ( tmp2 , 196 , 53 ) ;
16975: LD_VAR 0 5
16979: PPUSH
16980: LD_INT 196
16982: PPUSH
16983: LD_INT 53
16985: PPUSH
16986: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 199 , 62 ) ;
16990: LD_VAR 0 5
16994: PPUSH
16995: LD_INT 199
16997: PPUSH
16998: LD_INT 62
17000: PPUSH
17001: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 205 , 75 ) ;
17005: LD_VAR 0 5
17009: PPUSH
17010: LD_INT 205
17012: PPUSH
17013: LD_INT 75
17015: PPUSH
17016: CALL_OW 174
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + waveStrength do
17020: LD_ADDR_VAR 0 1
17024: PUSH
17025: DOUBLE
17026: LD_INT 1
17028: DEC
17029: ST_TO_ADDR
17030: LD_INT 2
17032: PUSH
17033: LD_INT 3
17035: PUSH
17036: LD_INT 3
17038: PUSH
17039: LD_INT 4
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: PUSH
17048: LD_OWVAR 67
17052: ARRAY
17053: PUSH
17054: LD_EXP 62
17058: PLUS
17059: PUSH
17060: FOR_TO
17061: IFFALSE 17370
// begin InitHc ;
17063: CALL_OW 19
// InitVc ;
17067: CALL_OW 20
// uc_side := 3 ;
17071: LD_ADDR_OWVAR 20
17075: PUSH
17076: LD_INT 3
17078: ST_TO_ADDR
// uc_nation := 3 ;
17079: LD_ADDR_OWVAR 21
17083: PUSH
17084: LD_INT 3
17086: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
17087: LD_INT 22
17089: PUSH
17090: LD_INT 23
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PUSH
17097: LD_INT 1
17099: PPUSH
17100: LD_INT 2
17102: PPUSH
17103: CALL_OW 12
17107: ARRAY
17108: PPUSH
17109: LD_INT 1
17111: PPUSH
17112: LD_INT 1
17114: PPUSH
17115: LD_INT 44
17117: PUSH
17118: LD_INT 45
17120: PUSH
17121: LD_INT 43
17123: PUSH
17124: LD_INT 42
17126: PUSH
17127: LD_INT 44
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: PUSH
17137: LD_INT 1
17139: PPUSH
17140: LD_INT 5
17142: PPUSH
17143: CALL_OW 12
17147: ARRAY
17148: PPUSH
17149: LD_INT 99
17151: PPUSH
17152: CALL 34241 0 5
// veh := CreateVehicle ;
17156: LD_ADDR_VAR 0 3
17160: PUSH
17161: CALL_OW 45
17165: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
17166: LD_VAR 0 3
17170: PPUSH
17171: LD_INT 160
17173: PPUSH
17174: LD_INT 3
17176: PPUSH
17177: LD_INT 2
17179: PPUSH
17180: LD_INT 0
17182: PPUSH
17183: CALL 68834 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17187: LD_ADDR_EXP 61
17191: PUSH
17192: LD_EXP 61
17196: PPUSH
17197: LD_EXP 61
17201: PUSH
17202: LD_INT 1
17204: PLUS
17205: PPUSH
17206: LD_VAR 0 3
17210: PPUSH
17211: CALL_OW 1
17215: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
17216: LD_INT 0
17218: PPUSH
17219: LD_INT 3
17221: PPUSH
17222: LD_OWVAR 67
17226: PUSH
17227: LD_INT 2
17229: PLUS
17230: PPUSH
17231: CALL_OW 380
// un := CreateHuman ;
17235: LD_ADDR_VAR 0 2
17239: PUSH
17240: CALL_OW 44
17244: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17245: LD_VAR 0 2
17249: PPUSH
17250: LD_VAR 0 3
17254: PPUSH
17255: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17259: LD_ADDR_EXP 61
17263: PUSH
17264: LD_EXP 61
17268: PPUSH
17269: LD_EXP 61
17273: PUSH
17274: LD_INT 1
17276: PLUS
17277: PPUSH
17278: LD_VAR 0 2
17282: PPUSH
17283: CALL_OW 1
17287: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
17288: LD_VAR 0 2
17292: PPUSH
17293: LD_INT 177
17295: PPUSH
17296: LD_INT 17
17298: PPUSH
17299: CALL_OW 111
// wait ( 0 0$2 ) ;
17303: LD_INT 70
17305: PPUSH
17306: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17310: LD_ADDR_VAR 0 4
17314: PUSH
17315: LD_VAR 0 4
17319: PPUSH
17320: LD_VAR 0 4
17324: PUSH
17325: LD_INT 1
17327: PLUS
17328: PPUSH
17329: LD_VAR 0 3
17333: PPUSH
17334: CALL_OW 1
17338: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
17339: LD_ADDR_VAR 0 4
17343: PUSH
17344: LD_VAR 0 4
17348: PPUSH
17349: LD_VAR 0 4
17353: PUSH
17354: LD_INT 1
17356: PLUS
17357: PPUSH
17358: LD_VAR 0 2
17362: PPUSH
17363: CALL_OW 1
17367: ST_TO_ADDR
// end ;
17368: GO 17060
17370: POP
17371: POP
// for i in tmp do
17372: LD_ADDR_VAR 0 1
17376: PUSH
17377: LD_VAR 0 4
17381: PUSH
17382: FOR_IN
17383: IFFALSE 17464
// AgressiveMove ( i , [ [ 206 , 37 ] , [ 239 , 53 ] , [ 260 , 67 ] , [ 263 , 79 ] , [ 257 , 105 ] , [ 227 , 97 ] ] ) ;
17385: LD_VAR 0 1
17389: PPUSH
17390: LD_INT 206
17392: PUSH
17393: LD_INT 37
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: PUSH
17400: LD_INT 239
17402: PUSH
17403: LD_INT 53
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: PUSH
17410: LD_INT 260
17412: PUSH
17413: LD_INT 67
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PUSH
17420: LD_INT 263
17422: PUSH
17423: LD_INT 79
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 257
17432: PUSH
17433: LD_INT 105
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: LD_INT 227
17442: PUSH
17443: LD_INT 97
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: PPUSH
17458: CALL 69298 0 2
17462: GO 17382
17464: POP
17465: POP
// repeat wait ( 0 0$2 ) ;
17466: LD_INT 70
17468: PPUSH
17469: CALL_OW 67
// for i in tmp do
17473: LD_ADDR_VAR 0 1
17477: PUSH
17478: LD_VAR 0 4
17482: PUSH
17483: FOR_IN
17484: IFFALSE 17551
// if IsDead ( i ) then
17486: LD_VAR 0 1
17490: PPUSH
17491: CALL_OW 301
17495: IFFALSE 17515
// tmp := tmp diff i else
17497: LD_ADDR_VAR 0 4
17501: PUSH
17502: LD_VAR 0 4
17506: PUSH
17507: LD_VAR 0 1
17511: DIFF
17512: ST_TO_ADDR
17513: GO 17549
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
17515: LD_VAR 0 1
17519: PPUSH
17520: LD_INT 81
17522: PUSH
17523: LD_INT 3
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PPUSH
17530: CALL_OW 69
17534: PPUSH
17535: LD_VAR 0 1
17539: PPUSH
17540: CALL_OW 74
17544: PPUSH
17545: CALL_OW 115
17549: GO 17483
17551: POP
17552: POP
// until not tmp ;
17553: LD_VAR 0 4
17557: NOT
17558: IFFALSE 17466
// if firstAttack then
17560: LD_EXP 28
17564: IFFALSE 17574
// firstAttack := false ;
17566: LD_ADDR_EXP 28
17570: PUSH
17571: LD_INT 0
17573: ST_TO_ADDR
// end ;
17574: PPOPN 5
17576: END
// every 12 12$00 + 3 3$00 trigger not omarAttack and not rolfAttack and bergkampfArrived and not disableAttackOnHeike do var i , un , veh , tmp ;
17577: LD_EXP 23
17581: NOT
17582: PUSH
17583: LD_EXP 32
17587: NOT
17588: AND
17589: PUSH
17590: LD_EXP 3
17594: AND
17595: PUSH
17596: LD_EXP 27
17600: NOT
17601: AND
17602: IFFALSE 18519
17604: GO 17606
17606: DISABLE
17607: LD_INT 0
17609: PPUSH
17610: PPUSH
17611: PPUSH
17612: PPUSH
// begin enable ;
17613: ENABLE
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
17614: LD_ADDR_VAR 0 1
17618: PUSH
17619: DOUBLE
17620: LD_INT 1
17622: DEC
17623: ST_TO_ADDR
17624: LD_INT 1
17626: PUSH
17627: LD_INT 2
17629: PUSH
17630: LD_INT 2
17632: PUSH
17633: LD_INT 3
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: PUSH
17642: LD_OWVAR 67
17646: ARRAY
17647: PUSH
17648: FOR_TO
17649: IFFALSE 17950
// begin InitHc ;
17651: CALL_OW 19
// InitVc ;
17655: CALL_OW 20
// uc_side := 3 ;
17659: LD_ADDR_OWVAR 20
17663: PUSH
17664: LD_INT 3
17666: ST_TO_ADDR
// uc_nation := 3 ;
17667: LD_ADDR_OWVAR 21
17671: PUSH
17672: LD_INT 3
17674: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
17675: LD_INT 22
17677: PUSH
17678: LD_INT 23
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: PUSH
17685: LD_INT 1
17687: PPUSH
17688: LD_INT 2
17690: PPUSH
17691: CALL_OW 12
17695: ARRAY
17696: PPUSH
17697: LD_INT 1
17699: PPUSH
17700: LD_INT 1
17702: PPUSH
17703: LD_INT 44
17705: PUSH
17706: LD_INT 43
17708: PUSH
17709: LD_INT 42
17711: PUSH
17712: LD_INT 44
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: PUSH
17721: LD_INT 1
17723: PPUSH
17724: LD_INT 4
17726: PPUSH
17727: CALL_OW 12
17731: ARRAY
17732: PPUSH
17733: LD_INT 99
17735: PPUSH
17736: CALL 34241 0 5
// veh := CreateVehicle ;
17740: LD_ADDR_VAR 0 3
17744: PUSH
17745: CALL_OW 45
17749: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
17750: LD_VAR 0 3
17754: PPUSH
17755: LD_INT 5
17757: PPUSH
17758: LD_INT 3
17760: PPUSH
17761: LD_INT 2
17763: PPUSH
17764: LD_INT 0
17766: PPUSH
17767: CALL 68834 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17771: LD_ADDR_EXP 61
17775: PUSH
17776: LD_EXP 61
17780: PPUSH
17781: LD_EXP 61
17785: PUSH
17786: LD_INT 1
17788: PLUS
17789: PPUSH
17790: LD_VAR 0 3
17794: PPUSH
17795: CALL_OW 1
17799: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
17800: LD_INT 0
17802: PPUSH
17803: LD_INT 3
17805: PPUSH
17806: LD_OWVAR 67
17810: PPUSH
17811: CALL_OW 380
// un := CreateHuman ;
17815: LD_ADDR_VAR 0 2
17819: PUSH
17820: CALL_OW 44
17824: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17825: LD_VAR 0 2
17829: PPUSH
17830: LD_VAR 0 3
17834: PPUSH
17835: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17839: LD_ADDR_EXP 61
17843: PUSH
17844: LD_EXP 61
17848: PPUSH
17849: LD_EXP 61
17853: PUSH
17854: LD_INT 1
17856: PLUS
17857: PPUSH
17858: LD_VAR 0 2
17862: PPUSH
17863: CALL_OW 1
17867: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
17868: LD_VAR 0 2
17872: PPUSH
17873: LD_INT 23
17875: PPUSH
17876: LD_INT 7
17878: PPUSH
17879: CALL_OW 111
// wait ( 0 0$2 ) ;
17883: LD_INT 70
17885: PPUSH
17886: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17890: LD_ADDR_VAR 0 4
17894: PUSH
17895: LD_VAR 0 4
17899: PPUSH
17900: LD_VAR 0 4
17904: PUSH
17905: LD_INT 1
17907: PLUS
17908: PPUSH
17909: LD_VAR 0 3
17913: PPUSH
17914: CALL_OW 1
17918: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
17919: LD_ADDR_VAR 0 4
17923: PUSH
17924: LD_VAR 0 4
17928: PPUSH
17929: LD_VAR 0 4
17933: PUSH
17934: LD_INT 1
17936: PLUS
17937: PPUSH
17938: LD_VAR 0 2
17942: PPUSH
17943: CALL_OW 1
17947: ST_TO_ADDR
// end ;
17948: GO 17648
17950: POP
17951: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
17952: LD_ADDR_VAR 0 1
17956: PUSH
17957: DOUBLE
17958: LD_INT 1
17960: DEC
17961: ST_TO_ADDR
17962: LD_INT 2
17964: PUSH
17965: LD_INT 3
17967: PUSH
17968: LD_INT 3
17970: PUSH
17971: LD_INT 4
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: PUSH
17980: LD_OWVAR 67
17984: ARRAY
17985: PUSH
17986: FOR_TO
17987: IFFALSE 18296
// begin InitHc ;
17989: CALL_OW 19
// InitVc ;
17993: CALL_OW 20
// uc_side := 3 ;
17997: LD_ADDR_OWVAR 20
18001: PUSH
18002: LD_INT 3
18004: ST_TO_ADDR
// uc_nation := 3 ;
18005: LD_ADDR_OWVAR 21
18009: PUSH
18010: LD_INT 3
18012: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
18013: LD_INT 22
18015: PUSH
18016: LD_INT 23
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PUSH
18023: LD_INT 1
18025: PPUSH
18026: LD_INT 2
18028: PPUSH
18029: CALL_OW 12
18033: ARRAY
18034: PPUSH
18035: LD_INT 1
18037: PPUSH
18038: LD_INT 1
18040: PPUSH
18041: LD_INT 44
18043: PUSH
18044: LD_INT 45
18046: PUSH
18047: LD_INT 43
18049: PUSH
18050: LD_INT 42
18052: PUSH
18053: LD_INT 44
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: PUSH
18063: LD_INT 1
18065: PPUSH
18066: LD_INT 5
18068: PPUSH
18069: CALL_OW 12
18073: ARRAY
18074: PPUSH
18075: LD_INT 99
18077: PPUSH
18078: CALL 34241 0 5
// veh := CreateVehicle ;
18082: LD_ADDR_VAR 0 3
18086: PUSH
18087: CALL_OW 45
18091: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
18092: LD_VAR 0 3
18096: PPUSH
18097: LD_INT 127
18099: PPUSH
18100: LD_INT 243
18102: PPUSH
18103: LD_INT 0
18105: PPUSH
18106: LD_INT 0
18108: PPUSH
18109: CALL 68834 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18113: LD_ADDR_EXP 61
18117: PUSH
18118: LD_EXP 61
18122: PPUSH
18123: LD_EXP 61
18127: PUSH
18128: LD_INT 1
18130: PLUS
18131: PPUSH
18132: LD_VAR 0 3
18136: PPUSH
18137: CALL_OW 1
18141: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
18142: LD_INT 0
18144: PPUSH
18145: LD_INT 3
18147: PPUSH
18148: LD_OWVAR 67
18152: PUSH
18153: LD_INT 2
18155: PLUS
18156: PPUSH
18157: CALL_OW 380
// un := CreateHuman ;
18161: LD_ADDR_VAR 0 2
18165: PUSH
18166: CALL_OW 44
18170: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18171: LD_VAR 0 2
18175: PPUSH
18176: LD_VAR 0 3
18180: PPUSH
18181: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18185: LD_ADDR_EXP 61
18189: PUSH
18190: LD_EXP 61
18194: PPUSH
18195: LD_EXP 61
18199: PUSH
18200: LD_INT 1
18202: PLUS
18203: PPUSH
18204: LD_VAR 0 2
18208: PPUSH
18209: CALL_OW 1
18213: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
18214: LD_VAR 0 2
18218: PPUSH
18219: LD_INT 130
18221: PPUSH
18222: LD_INT 233
18224: PPUSH
18225: CALL_OW 111
// wait ( 0 0$2 ) ;
18229: LD_INT 70
18231: PPUSH
18232: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18236: LD_ADDR_VAR 0 4
18240: PUSH
18241: LD_VAR 0 4
18245: PPUSH
18246: LD_VAR 0 4
18250: PUSH
18251: LD_INT 1
18253: PLUS
18254: PPUSH
18255: LD_VAR 0 3
18259: PPUSH
18260: CALL_OW 1
18264: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18265: LD_ADDR_VAR 0 4
18269: PUSH
18270: LD_VAR 0 4
18274: PPUSH
18275: LD_VAR 0 4
18279: PUSH
18280: LD_INT 1
18282: PLUS
18283: PPUSH
18284: LD_VAR 0 2
18288: PPUSH
18289: CALL_OW 1
18293: ST_TO_ADDR
// end ;
18294: GO 17986
18296: POP
18297: POP
// for i in tmp do
18298: LD_ADDR_VAR 0 1
18302: PUSH
18303: LD_VAR 0 4
18307: PUSH
18308: FOR_IN
18309: IFFALSE 18423
// AgressiveMove ( i , [ [ 130 , 229 ] , [ 137 , 216 ] , [ 142 , 194 ] , [ 140 , 169 ] , [ 146 , 162 ] , [ 174 , 161 ] , [ 158 , 134 ] , [ 136 , 107 ] , [ 115 , 89 ] ] ) ;
18311: LD_VAR 0 1
18315: PPUSH
18316: LD_INT 130
18318: PUSH
18319: LD_INT 229
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PUSH
18326: LD_INT 137
18328: PUSH
18329: LD_INT 216
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: PUSH
18336: LD_INT 142
18338: PUSH
18339: LD_INT 194
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 140
18348: PUSH
18349: LD_INT 169
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: PUSH
18356: LD_INT 146
18358: PUSH
18359: LD_INT 162
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 174
18368: PUSH
18369: LD_INT 161
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: PUSH
18376: LD_INT 158
18378: PUSH
18379: LD_INT 134
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PUSH
18386: LD_INT 136
18388: PUSH
18389: LD_INT 107
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: LD_INT 115
18398: PUSH
18399: LD_INT 89
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: PPUSH
18417: CALL 69298 0 2
18421: GO 18308
18423: POP
18424: POP
// repeat wait ( 0 0$2 ) ;
18425: LD_INT 70
18427: PPUSH
18428: CALL_OW 67
// for i in tmp do
18432: LD_ADDR_VAR 0 1
18436: PUSH
18437: LD_VAR 0 4
18441: PUSH
18442: FOR_IN
18443: IFFALSE 18510
// if IsDead ( i ) then
18445: LD_VAR 0 1
18449: PPUSH
18450: CALL_OW 301
18454: IFFALSE 18474
// tmp := tmp diff i else
18456: LD_ADDR_VAR 0 4
18460: PUSH
18461: LD_VAR 0 4
18465: PUSH
18466: LD_VAR 0 1
18470: DIFF
18471: ST_TO_ADDR
18472: GO 18508
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18474: LD_VAR 0 1
18478: PPUSH
18479: LD_INT 81
18481: PUSH
18482: LD_INT 3
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PPUSH
18489: CALL_OW 69
18493: PPUSH
18494: LD_VAR 0 1
18498: PPUSH
18499: CALL_OW 74
18503: PPUSH
18504: CALL_OW 115
18508: GO 18442
18510: POP
18511: POP
// until not tmp ;
18512: LD_VAR 0 4
18516: NOT
18517: IFFALSE 18425
// end ;
18519: PPOPN 4
18521: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
18522: LD_EXP 6
18526: IFFALSE 18985
18528: GO 18530
18530: DISABLE
18531: LD_INT 0
18533: PPUSH
18534: PPUSH
18535: PPUSH
18536: PPUSH
// begin wait ( 3 3$00 ) ;
18537: LD_INT 6300
18539: PPUSH
18540: CALL_OW 67
// for i := 1 to 3 do
18544: LD_ADDR_VAR 0 1
18548: PUSH
18549: DOUBLE
18550: LD_INT 1
18552: DEC
18553: ST_TO_ADDR
18554: LD_INT 3
18556: PUSH
18557: FOR_TO
18558: IFFALSE 18857
// begin InitHc ;
18560: CALL_OW 19
// InitVc ;
18564: CALL_OW 20
// uc_side := 3 ;
18568: LD_ADDR_OWVAR 20
18572: PUSH
18573: LD_INT 3
18575: ST_TO_ADDR
// uc_nation := 3 ;
18576: LD_ADDR_OWVAR 21
18580: PUSH
18581: LD_INT 3
18583: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
18584: LD_INT 22
18586: PUSH
18587: LD_INT 23
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 1
18596: PPUSH
18597: LD_INT 2
18599: PPUSH
18600: CALL_OW 12
18604: ARRAY
18605: PPUSH
18606: LD_INT 1
18608: PPUSH
18609: LD_INT 1
18611: PPUSH
18612: LD_INT 44
18614: PUSH
18615: LD_INT 43
18617: PUSH
18618: LD_INT 42
18620: PUSH
18621: LD_INT 44
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: PUSH
18630: LD_INT 1
18632: PPUSH
18633: LD_INT 4
18635: PPUSH
18636: CALL_OW 12
18640: ARRAY
18641: PPUSH
18642: LD_INT 99
18644: PPUSH
18645: CALL 34241 0 5
// veh := CreateVehicle ;
18649: LD_ADDR_VAR 0 3
18653: PUSH
18654: CALL_OW 45
18658: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
18659: LD_VAR 0 3
18663: PPUSH
18664: LD_INT 293
18666: PPUSH
18667: LD_INT 246
18669: PPUSH
18670: LD_INT 5
18672: PPUSH
18673: LD_INT 0
18675: PPUSH
18676: CALL 68834 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18680: LD_ADDR_EXP 61
18684: PUSH
18685: LD_EXP 61
18689: PPUSH
18690: LD_EXP 61
18694: PUSH
18695: LD_INT 1
18697: PLUS
18698: PPUSH
18699: LD_VAR 0 3
18703: PPUSH
18704: CALL_OW 1
18708: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
18709: LD_INT 0
18711: PPUSH
18712: LD_INT 3
18714: PPUSH
18715: LD_INT 3
18717: PPUSH
18718: CALL_OW 380
// un := CreateHuman ;
18722: LD_ADDR_VAR 0 2
18726: PUSH
18727: CALL_OW 44
18731: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18732: LD_VAR 0 2
18736: PPUSH
18737: LD_VAR 0 3
18741: PPUSH
18742: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18746: LD_ADDR_EXP 61
18750: PUSH
18751: LD_EXP 61
18755: PPUSH
18756: LD_EXP 61
18760: PUSH
18761: LD_INT 1
18763: PLUS
18764: PPUSH
18765: LD_VAR 0 2
18769: PPUSH
18770: CALL_OW 1
18774: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
18775: LD_VAR 0 2
18779: PPUSH
18780: LD_INT 273
18782: PPUSH
18783: LD_INT 227
18785: PPUSH
18786: CALL_OW 111
// wait ( 0 0$2 ) ;
18790: LD_INT 70
18792: PPUSH
18793: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18797: LD_ADDR_VAR 0 4
18801: PUSH
18802: LD_VAR 0 4
18806: PPUSH
18807: LD_VAR 0 4
18811: PUSH
18812: LD_INT 1
18814: PLUS
18815: PPUSH
18816: LD_VAR 0 3
18820: PPUSH
18821: CALL_OW 1
18825: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18826: LD_ADDR_VAR 0 4
18830: PUSH
18831: LD_VAR 0 4
18835: PPUSH
18836: LD_VAR 0 4
18840: PUSH
18841: LD_INT 1
18843: PLUS
18844: PPUSH
18845: LD_VAR 0 2
18849: PPUSH
18850: CALL_OW 1
18854: ST_TO_ADDR
// end ;
18855: GO 18557
18857: POP
18858: POP
// for i in tmp do
18859: LD_ADDR_VAR 0 1
18863: PUSH
18864: LD_VAR 0 4
18868: PUSH
18869: FOR_IN
18870: IFFALSE 18889
// ComAgressiveMove ( i , 330 , 231 ) ;
18872: LD_VAR 0 1
18876: PPUSH
18877: LD_INT 330
18879: PPUSH
18880: LD_INT 231
18882: PPUSH
18883: CALL_OW 114
18887: GO 18869
18889: POP
18890: POP
// repeat wait ( 0 0$2 ) ;
18891: LD_INT 70
18893: PPUSH
18894: CALL_OW 67
// for i in tmp do
18898: LD_ADDR_VAR 0 1
18902: PUSH
18903: LD_VAR 0 4
18907: PUSH
18908: FOR_IN
18909: IFFALSE 18976
// if IsDead ( i ) then
18911: LD_VAR 0 1
18915: PPUSH
18916: CALL_OW 301
18920: IFFALSE 18940
// tmp := tmp diff i else
18922: LD_ADDR_VAR 0 4
18926: PUSH
18927: LD_VAR 0 4
18931: PUSH
18932: LD_VAR 0 1
18936: DIFF
18937: ST_TO_ADDR
18938: GO 18974
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18940: LD_VAR 0 1
18944: PPUSH
18945: LD_INT 81
18947: PUSH
18948: LD_INT 3
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PPUSH
18955: CALL_OW 69
18959: PPUSH
18960: LD_VAR 0 1
18964: PPUSH
18965: CALL_OW 74
18969: PPUSH
18970: CALL_OW 115
18974: GO 18908
18976: POP
18977: POP
// until not tmp ;
18978: LD_VAR 0 4
18982: NOT
18983: IFFALSE 18891
// end ;
18985: PPOPN 4
18987: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
18988: LD_INT 3
18990: PUSH
18991: LD_INT 22
18993: PUSH
18994: LD_INT 2
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: LD_INT 32
19007: PUSH
19008: LD_INT 1
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PPUSH
19019: CALL_OW 69
19023: IFFALSE 19107
19025: GO 19027
19027: DISABLE
19028: LD_INT 0
19030: PPUSH
// begin enable ;
19031: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
19032: LD_ADDR_VAR 0 1
19036: PUSH
19037: LD_INT 3
19039: PUSH
19040: LD_INT 22
19042: PUSH
19043: LD_INT 2
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: LD_INT 32
19056: PUSH
19057: LD_INT 1
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PPUSH
19068: CALL_OW 69
19072: PUSH
19073: FOR_IN
19074: IFFALSE 19105
// if GetFuel ( i ) < 3 then
19076: LD_VAR 0 1
19080: PPUSH
19081: CALL_OW 261
19085: PUSH
19086: LD_INT 3
19088: LESS
19089: IFFALSE 19103
// SetFuel ( i , 3 ) ;
19091: LD_VAR 0 1
19095: PPUSH
19096: LD_INT 3
19098: PPUSH
19099: CALL_OW 240
19103: GO 19073
19105: POP
19106: POP
// end ; end_of_file
19107: PPOPN 1
19109: END
// export function Action ; begin
19110: LD_INT 0
19112: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
19113: LD_INT 2
19115: PPUSH
19116: LD_INT 4
19118: PPUSH
19119: CALL_OW 332
// Video ( true ) ;
19123: LD_INT 1
19125: PPUSH
19126: CALL 66666 0 1
// music_nat := 3 ;
19130: LD_ADDR_OWVAR 71
19134: PUSH
19135: LD_INT 3
19137: ST_TO_ADDR
// music_class := music_recon ;
19138: LD_ADDR_OWVAR 72
19142: PUSH
19143: LD_INT 3
19145: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
19146: LD_INT 213
19148: PPUSH
19149: LD_INT 89
19151: PPUSH
19152: CALL_OW 86
// if Kaia and Olaf then
19156: LD_EXP 39
19160: PUSH
19161: LD_EXP 43
19165: AND
19166: IFFALSE 19172
// SceneKaiaWithOlaf ;
19168: CALL 19250 0 0
// if Givi and Kamil then
19172: LD_EXP 35
19176: PUSH
19177: LD_EXP 38
19181: AND
19182: IFFALSE 19188
// SceneWithGiviAndKamil ;
19184: CALL 19821 0 0
// tick := 0 ;
19188: LD_ADDR_OWVAR 1
19192: PUSH
19193: LD_INT 0
19195: ST_TO_ADDR
// wait ( 3 ) ;
19196: LD_INT 3
19198: PPUSH
19199: CALL_OW 67
// Video ( false ) ;
19203: LD_INT 0
19205: PPUSH
19206: CALL 66666 0 1
// ChangeMissionObjectives ( M1 ) ;
19210: LD_STRING M1
19212: PPUSH
19213: CALL_OW 337
// music_nat := music_auto ;
19217: LD_ADDR_OWVAR 71
19221: PUSH
19222: LD_INT 0
19224: ST_TO_ADDR
// music_class := music_auto ;
19225: LD_ADDR_OWVAR 72
19229: PUSH
19230: LD_INT 0
19232: ST_TO_ADDR
// SaveForQuickRestart ;
19233: CALL_OW 22
// gameActive := true ;
19237: LD_ADDR_EXP 31
19241: PUSH
19242: LD_INT 1
19244: ST_TO_ADDR
// end ;
19245: LD_VAR 0 1
19249: RET
// export function SceneKaiaWithOlaf ; begin
19250: LD_INT 0
19252: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
19253: LD_INT 22
19255: PUSH
19256: LD_INT 2
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: LD_INT 30
19265: PUSH
19266: LD_INT 3
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PPUSH
19277: CALL_OW 69
19281: PPUSH
19282: LD_INT 14
19284: PPUSH
19285: LD_INT 1
19287: PPUSH
19288: LD_INT 1
19290: PPUSH
19291: LD_INT 26
19293: PPUSH
19294: CALL_OW 125
// wait ( 0 0$1 ) ;
19298: LD_INT 35
19300: PPUSH
19301: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
19305: LD_EXP 39
19309: PPUSH
19310: LD_STRING DK-Mem-1
19312: PPUSH
19313: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
19317: LD_EXP 39
19321: PPUSH
19322: LD_STRING DK-Mem-2
19324: PPUSH
19325: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
19329: LD_EXP 43
19333: PPUSH
19334: LD_STRING DO-Mem-3
19336: PPUSH
19337: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
19341: LD_EXP 39
19345: PPUSH
19346: LD_STRING DK-Mem-4
19348: PPUSH
19349: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
19353: LD_EXP 43
19357: PPUSH
19358: LD_STRING DO-Mem-5
19360: PPUSH
19361: CALL_OW 88
// wait ( 0 0$2 ) ;
19365: LD_INT 70
19367: PPUSH
19368: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
19372: LD_INT 22
19374: PUSH
19375: LD_INT 2
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: PUSH
19382: LD_INT 30
19384: PUSH
19385: LD_INT 3
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PPUSH
19396: CALL_OW 69
19400: PPUSH
19401: LD_INT 90
19403: PPUSH
19404: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
19408: LD_EXP 43
19412: PPUSH
19413: LD_STRING DO-Mem-6
19415: PPUSH
19416: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
19420: LD_EXP 39
19424: PPUSH
19425: LD_STRING DK-Mem-7
19427: PPUSH
19428: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
19432: LD_EXP 34
19436: PPUSH
19437: LD_EXP 39
19441: PPUSH
19442: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
19446: LD_EXP 34
19450: PPUSH
19451: LD_STRING DH-Mem-8
19453: PPUSH
19454: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
19458: LD_EXP 39
19462: PUSH
19463: LD_EXP 43
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PPUSH
19472: LD_EXP 34
19476: PPUSH
19477: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
19481: LD_EXP 43
19485: PPUSH
19486: LD_STRING DO-Mem-9
19488: PPUSH
19489: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
19493: LD_EXP 43
19497: PPUSH
19498: LD_STRING DO-Mem-10
19500: PPUSH
19501: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
19505: LD_EXP 43
19509: PPUSH
19510: LD_STRING DO-Mem-11
19512: PPUSH
19513: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
19517: LD_EXP 43
19521: PPUSH
19522: LD_STRING DO-Mem-12
19524: PPUSH
19525: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
19529: LD_EXP 39
19533: PPUSH
19534: LD_STRING DK-Mem-13
19536: PPUSH
19537: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
19541: LD_EXP 39
19545: PPUSH
19546: LD_STRING DK-Mem-14
19548: PPUSH
19549: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
19553: LD_EXP 39
19557: PPUSH
19558: LD_STRING DK-Mem-15
19560: PPUSH
19561: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
19565: LD_EXP 39
19569: PPUSH
19570: LD_STRING DK-Mem-16
19572: PPUSH
19573: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
19577: LD_EXP 39
19581: PPUSH
19582: LD_STRING DK-Mem-17
19584: PPUSH
19585: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
19589: LD_EXP 43
19593: PPUSH
19594: LD_EXP 39
19598: PPUSH
19599: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
19603: LD_EXP 43
19607: PPUSH
19608: LD_STRING DO-Mem-18
19610: PPUSH
19611: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
19615: LD_EXP 39
19619: PPUSH
19620: LD_EXP 43
19624: PPUSH
19625: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
19629: LD_EXP 39
19633: PPUSH
19634: LD_STRING DK-Mem-19
19636: PPUSH
19637: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
19641: LD_EXP 43
19645: PPUSH
19646: LD_INT 214
19648: PPUSH
19649: LD_INT 86
19651: PPUSH
19652: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
19656: LD_EXP 43
19660: PPUSH
19661: LD_EXP 39
19665: PPUSH
19666: CALL_OW 179
// if Givi then
19670: LD_EXP 35
19674: IFFALSE 19705
// begin ComMoveXY ( Givi , 217 , 86 ) ;
19676: LD_EXP 35
19680: PPUSH
19681: LD_INT 217
19683: PPUSH
19684: LD_INT 86
19686: PPUSH
19687: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
19691: LD_EXP 35
19695: PPUSH
19696: LD_EXP 34
19700: PPUSH
19701: CALL_OW 179
// end ; if Kamil then
19705: LD_EXP 38
19709: IFFALSE 19749
// begin ComExit ( Kamil ) ;
19711: LD_EXP 38
19715: PPUSH
19716: CALL 67092 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
19720: LD_EXP 38
19724: PPUSH
19725: LD_INT 212
19727: PPUSH
19728: LD_INT 86
19730: PPUSH
19731: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
19735: LD_EXP 38
19739: PPUSH
19740: LD_EXP 34
19744: PPUSH
19745: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
19749: LD_INT 70
19751: PPUSH
19752: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
19756: LD_EXP 34
19760: PPUSH
19761: LD_STRING DH-Mem-20
19763: PPUSH
19764: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
19768: LD_EXP 43
19772: PPUSH
19773: LD_INT 215
19775: PPUSH
19776: LD_INT 87
19778: PPUSH
19779: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
19783: LD_EXP 43
19787: PPUSH
19788: LD_EXP 39
19792: PPUSH
19793: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
19797: LD_EXP 39
19801: PPUSH
19802: LD_STRING DK-Mem-21
19804: PPUSH
19805: CALL_OW 88
// wait ( 0 0$2 ) ;
19809: LD_INT 70
19811: PPUSH
19812: CALL_OW 67
// end ;
19816: LD_VAR 0 1
19820: RET
// export function SceneWithGiviAndKamil ; var p ; begin
19821: LD_INT 0
19823: PPUSH
19824: PPUSH
// if Markov then
19825: LD_EXP 41
19829: IFFALSE 19947
// begin p := 0 ;
19831: LD_ADDR_VAR 0 2
19835: PUSH
19836: LD_INT 0
19838: ST_TO_ADDR
// if IsInUnit ( Markov ) then
19839: LD_EXP 41
19843: PPUSH
19844: CALL_OW 310
19848: IFFALSE 19859
// ComExit ( Markov ) ;
19850: LD_EXP 41
19854: PPUSH
19855: CALL 67092 0 1
// wait ( 0 0$1 ) ;
19859: LD_INT 35
19861: PPUSH
19862: CALL_OW 67
// ComMoveXY ( Markov , 212 , 88 ) ;
19866: LD_EXP 41
19870: PPUSH
19871: LD_INT 212
19873: PPUSH
19874: LD_INT 88
19876: PPUSH
19877: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19881: LD_INT 35
19883: PPUSH
19884: CALL_OW 67
// p := Inc ( p ) ;
19888: LD_ADDR_VAR 0 2
19892: PUSH
19893: LD_VAR 0 2
19897: PPUSH
19898: CALL 68055 0 1
19902: ST_TO_ADDR
// until GetDistUnits ( Markov , Heike ) < 6 or p > 12 ;
19903: LD_EXP 41
19907: PPUSH
19908: LD_EXP 34
19912: PPUSH
19913: CALL_OW 296
19917: PUSH
19918: LD_INT 6
19920: LESS
19921: PUSH
19922: LD_VAR 0 2
19926: PUSH
19927: LD_INT 12
19929: GREATER
19930: OR
19931: IFFALSE 19881
// AddComTurnUnit ( Markov , Heike ) ;
19933: LD_EXP 41
19937: PPUSH
19938: LD_EXP 34
19942: PPUSH
19943: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
19947: LD_EXP 35
19951: PPUSH
19952: LD_STRING DG-Obj-1
19954: PPUSH
19955: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
19959: LD_EXP 38
19963: PPUSH
19964: LD_STRING DKam-Obj-2
19966: PPUSH
19967: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
19971: LD_EXP 34
19975: PPUSH
19976: LD_EXP 38
19980: PPUSH
19981: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
19985: LD_EXP 38
19989: PPUSH
19990: LD_STRING DKam-Obj-3
19992: PPUSH
19993: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
19997: LD_EXP 41
20001: PPUSH
20002: LD_STRING DMar-Obj-4
20004: PPUSH
20005: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
20009: LD_EXP 38
20013: PPUSH
20014: LD_STRING DKam-Obj-6
20016: PPUSH
20017: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
20021: LD_EXP 38
20025: PPUSH
20026: LD_STRING DKam-Obj-7
20028: PPUSH
20029: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
20033: LD_EXP 38
20037: PPUSH
20038: LD_STRING DKam-Obj-8
20040: PPUSH
20041: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
20045: LD_EXP 34
20049: PPUSH
20050: LD_STRING DH-Obj-9
20052: PPUSH
20053: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
20057: LD_EXP 38
20061: PPUSH
20062: LD_STRING DKam-Obj-10
20064: PPUSH
20065: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
20069: LD_EXP 38
20073: PPUSH
20074: LD_STRING DKam-Obj-11
20076: PPUSH
20077: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
20081: LD_EXP 41
20085: PPUSH
20086: LD_STRING DMar-Obj-12
20088: PPUSH
20089: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
20093: LD_EXP 41
20097: PPUSH
20098: LD_STRING DMar-Obj-13
20100: PPUSH
20101: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
20105: LD_EXP 41
20109: PPUSH
20110: LD_STRING DMar-Obj-14
20112: PPUSH
20113: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
20117: LD_EXP 43
20121: PPUSH
20122: LD_STRING DO-Obj-15
20124: PPUSH
20125: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
20129: LD_EXP 43
20133: PPUSH
20134: LD_STRING DO-Obj-16
20136: PPUSH
20137: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
20141: LD_EXP 34
20145: PPUSH
20146: LD_STRING DH-Obj-17
20148: PPUSH
20149: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
20153: LD_EXP 43
20157: PPUSH
20158: LD_STRING DO-Obj-18
20160: PPUSH
20161: CALL_OW 88
// end ;
20165: LD_VAR 0 1
20169: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
20170: LD_INT 34
20172: PUSH
20173: LD_INT 92
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PPUSH
20180: CALL_OW 69
20184: IFFALSE 20379
20186: GO 20188
20188: DISABLE
20189: LD_INT 0
20191: PPUSH
// begin wait ( 0 0$2 ) ;
20192: LD_INT 70
20194: PPUSH
20195: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
20199: LD_INT 34
20201: PUSH
20202: LD_INT 92
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PPUSH
20209: CALL_OW 69
20213: PPUSH
20214: CALL_OW 87
// DialogueOn ;
20218: CALL_OW 6
// if Markov then
20222: LD_EXP 41
20226: IFFALSE 20254
// begin Say ( Markov , DMar-Grn-1 ) ;
20228: LD_EXP 41
20232: PPUSH
20233: LD_STRING DMar-Grn-1
20235: PPUSH
20236: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
20240: LD_EXP 34
20244: PPUSH
20245: LD_STRING DH-Grn-2
20247: PPUSH
20248: CALL_OW 88
// end else
20252: GO 20353
// if heikeSecondSquad then
20254: LD_EXP 49
20258: IFFALSE 20353
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20260: LD_ADDR_VAR 0 1
20264: PUSH
20265: LD_EXP 49
20269: PUSH
20270: LD_INT 1
20272: PPUSH
20273: LD_EXP 49
20277: PPUSH
20278: CALL_OW 12
20282: ARRAY
20283: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20284: LD_VAR 0 1
20288: PPUSH
20289: CALL_OW 258
20293: PUSH
20294: LD_INT 1
20296: DOUBLE
20297: EQUAL
20298: IFTRUE 20302
20300: GO 20317
20302: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
20303: LD_VAR 0 1
20307: PPUSH
20308: LD_STRING DArm-Grn-1
20310: PPUSH
20311: CALL_OW 88
20315: GO 20341
20317: LD_INT 2
20319: DOUBLE
20320: EQUAL
20321: IFTRUE 20325
20323: GO 20340
20325: POP
// Say ( random , DArf-Grn-1 ) ; end ;
20326: LD_VAR 0 1
20330: PPUSH
20331: LD_STRING DArf-Grn-1
20333: PPUSH
20334: CALL_OW 88
20338: GO 20341
20340: POP
// Say ( Heike , DH-Grn-2 ) ;
20341: LD_EXP 34
20345: PPUSH
20346: LD_STRING DH-Grn-2
20348: PPUSH
20349: CALL_OW 88
// end ; DialogueOff ;
20353: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
20357: LD_STRING MortarConstructed
20359: PPUSH
20360: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
20364: LD_STRING SelfPropelledMortar
20366: PPUSH
20367: CALL_OW 339
// mortarConstructed := true ;
20371: LD_ADDR_EXP 15
20375: PUSH
20376: LD_INT 1
20378: ST_TO_ADDR
// end ;
20379: PPOPN 1
20381: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
20382: LD_INT 2
20384: PPUSH
20385: LD_INT 8
20387: PPUSH
20388: CALL_OW 294
20392: IFFALSE 20535
20394: GO 20396
20396: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
20397: LD_INT 200
20399: PPUSH
20400: LD_INT 162
20402: PPUSH
20403: LD_INT 2
20405: PPUSH
20406: LD_INT 6
20408: NEG
20409: PPUSH
20410: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
20414: LD_INT 200
20416: PPUSH
20417: LD_INT 162
20419: PPUSH
20420: LD_INT 2
20422: PPUSH
20423: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
20427: LD_INT 200
20429: PPUSH
20430: LD_INT 162
20432: PPUSH
20433: CALL_OW 84
// if not IsOk ( Kurt ) then
20437: LD_EXP 45
20441: PPUSH
20442: CALL_OW 302
20446: NOT
20447: IFFALSE 20451
// exit ;
20449: GO 20535
// Say ( Kurt , DKs-Otpst-2-1 ) ;
20451: LD_EXP 45
20455: PPUSH
20456: LD_STRING DKs-Otpst-2-1
20458: PPUSH
20459: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
20463: LD_EXP 39
20467: PPUSH
20468: LD_STRING DK-Otpst-2-2
20470: PPUSH
20471: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
20475: LD_EXP 45
20479: PPUSH
20480: LD_STRING DKs-Otpst-2-3
20482: PPUSH
20483: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
20487: LD_EXP 45
20491: PPUSH
20492: LD_STRING DKs-Otpst-2-4
20494: PPUSH
20495: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
20499: LD_EXP 45
20503: PPUSH
20504: LD_STRING DKs-Otpst-2-5
20506: PPUSH
20507: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
20511: LD_EXP 38
20515: PPUSH
20516: LD_STRING DKam-Otpst-2-6
20518: PPUSH
20519: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
20523: LD_EXP 45
20527: PPUSH
20528: LD_STRING DKs-Otpst-2-7
20530: PPUSH
20531: CALL_OW 88
// end ;
20535: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
20536: LD_INT 8
20538: PPUSH
20539: LD_INT 22
20541: PUSH
20542: LD_INT 3
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 21
20551: PUSH
20552: LD_INT 3
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PPUSH
20563: CALL_OW 70
20567: NOT
20568: PUSH
20569: LD_EXP 3
20573: NOT
20574: AND
20575: IFFALSE 20823
20577: GO 20579
20579: DISABLE
20580: LD_INT 0
20582: PPUSH
// begin outpostDestroyed := true ;
20583: LD_ADDR_EXP 4
20587: PUSH
20588: LD_INT 1
20590: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
20591: LD_INT 22
20593: PUSH
20594: LD_INT 2
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 34
20603: PUSH
20604: LD_INT 92
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 92
20613: PUSH
20614: LD_INT 195
20616: PUSH
20617: LD_INT 164
20619: PUSH
20620: LD_INT 12
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: LIST
20633: PPUSH
20634: CALL_OW 69
20638: NOT
20639: IFFALSE 20643
// exit ;
20641: GO 20823
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
20643: LD_EXP 35
20647: PPUSH
20648: CALL_OW 302
20652: NOT
20653: PUSH
20654: LD_EXP 39
20658: PPUSH
20659: CALL_OW 302
20663: NOT
20664: OR
20665: IFFALSE 20669
// exit ;
20667: GO 20823
// Say ( Givi , DG-Otpst-1-1 ) ;
20669: LD_EXP 35
20673: PPUSH
20674: LD_STRING DG-Otpst-1-1
20676: PPUSH
20677: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
20681: LD_EXP 39
20685: PPUSH
20686: LD_STRING DK-Otpst-1-2
20688: PPUSH
20689: CALL_OW 88
// if IsOk ( Markov ) then
20693: LD_EXP 41
20697: PPUSH
20698: CALL_OW 302
20702: IFFALSE 20730
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
20704: LD_EXP 41
20708: PPUSH
20709: LD_STRING DMar-Otpst-1-3
20711: PPUSH
20712: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
20716: LD_EXP 41
20720: PPUSH
20721: LD_STRING DMar-Otpst-1-4
20723: PPUSH
20724: CALL_OW 88
// end else
20728: GO 20811
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20730: LD_ADDR_VAR 0 1
20734: PUSH
20735: LD_EXP 49
20739: PUSH
20740: LD_INT 1
20742: PPUSH
20743: LD_EXP 49
20747: PPUSH
20748: CALL_OW 12
20752: ARRAY
20753: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20754: LD_VAR 0 1
20758: PPUSH
20759: CALL_OW 258
20763: PUSH
20764: LD_INT 1
20766: DOUBLE
20767: EQUAL
20768: IFTRUE 20772
20770: GO 20787
20772: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
20773: LD_VAR 0 1
20777: PPUSH
20778: LD_STRING DArm-Otpst-1-a-3
20780: PPUSH
20781: CALL_OW 88
20785: GO 20811
20787: LD_INT 2
20789: DOUBLE
20790: EQUAL
20791: IFTRUE 20795
20793: GO 20810
20795: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
20796: LD_VAR 0 1
20800: PPUSH
20801: LD_STRING DArf-Otpst-1-a-3
20803: PPUSH
20804: CALL_OW 88
20808: GO 20811
20810: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
20811: LD_EXP 35
20815: PPUSH
20816: LD_STRING DG-Otpst-1-5
20818: PPUSH
20819: CALL_OW 88
// end ;
20823: PPOPN 1
20825: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
20826: LD_EXP 39
20830: PPUSH
20831: CALL_OW 256
20835: PUSH
20836: LD_INT 10
20838: LESS
20839: IFFALSE 20953
20841: GO 20843
20843: DISABLE
// begin DialogueOn ;
20844: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
20848: LD_EXP 39
20852: PPUSH
20853: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
20857: LD_EXP 39
20861: PPUSH
20862: LD_STRING DK-Dead-1
20864: PPUSH
20865: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
20869: LD_EXP 34
20873: PPUSH
20874: LD_STRING DH-Dead-2
20876: PPUSH
20877: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
20881: LD_EXP 39
20885: PPUSH
20886: LD_STRING DK-Dead-3
20888: PPUSH
20889: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
20893: LD_EXP 34
20897: PPUSH
20898: LD_STRING DH-Dead-4
20900: PPUSH
20901: CALL_OW 88
// if IsOk ( Mike ) then
20905: LD_EXP 36
20909: PPUSH
20910: CALL_OW 302
20914: IFFALSE 20940
// begin Say ( Mike , DM-Dead-5 ) ;
20916: LD_EXP 36
20920: PPUSH
20921: LD_STRING DM-Dead-5
20923: PPUSH
20924: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
20928: LD_EXP 34
20932: PPUSH
20933: LD_STRING DH-Dead-6
20935: PPUSH
20936: CALL_OW 88
// end ; DialogueOff ;
20940: CALL_OW 7
// KillUnit ( Kaia ) ;
20944: LD_EXP 39
20948: PPUSH
20949: CALL_OW 66
// end ;
20953: END
// every 0 0$1 trigger tick >= 15 15$00 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
20954: LD_OWVAR 1
20958: PUSH
20959: LD_INT 31500
20961: GREATEREQUAL
20962: PUSH
20963: LD_EXP 5
20967: PUSH
20968: LD_INT 5
20970: GREATER
20971: OR
20972: PUSH
20973: LD_INT 22
20975: PUSH
20976: LD_INT 2
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: LD_INT 92
20985: PUSH
20986: LD_INT 103
20988: PUSH
20989: LD_INT 81
20991: PUSH
20992: LD_INT 20
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PPUSH
21005: CALL_OW 69
21009: OR
21010: IFFALSE 21450
21012: GO 21014
21014: DISABLE
21015: LD_INT 0
21017: PPUSH
21018: PPUSH
21019: PPUSH
// begin PrepareRolfSquad ;
21020: CALL 3411 0 0
// dep := HexInfo ( 86 , 54 ) ;
21024: LD_ADDR_VAR 0 3
21028: PUSH
21029: LD_INT 86
21031: PPUSH
21032: LD_INT 54
21034: PPUSH
21035: CALL_OW 428
21039: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
21040: LD_VAR 0 3
21044: PPUSH
21045: CALL_OW 274
21049: PPUSH
21050: LD_INT 1
21052: PPUSH
21053: LD_INT 300
21055: PPUSH
21056: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
21060: LD_VAR 0 3
21064: PPUSH
21065: CALL_OW 274
21069: PPUSH
21070: LD_INT 2
21072: PPUSH
21073: LD_INT 300
21075: PPUSH
21076: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
21080: LD_EXP 51
21084: PPUSH
21085: LD_INT 79
21087: PPUSH
21088: LD_INT 52
21090: PPUSH
21091: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
21095: LD_INT 35
21097: PPUSH
21098: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( rolfSquad , [ f_not , [ f_hastask ] ] ) , 79 , 52 ) ;
21102: LD_EXP 51
21106: PPUSH
21107: LD_INT 3
21109: PUSH
21110: LD_INT 60
21112: PUSH
21113: EMPTY
21114: LIST
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PPUSH
21120: CALL_OW 72
21124: PPUSH
21125: LD_INT 79
21127: PPUSH
21128: LD_INT 52
21130: PPUSH
21131: CALL_OW 114
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
21135: LD_INT 12
21137: PPUSH
21138: LD_INT 22
21140: PUSH
21141: LD_INT 3
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 21
21150: PUSH
21151: LD_INT 1
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PPUSH
21162: CALL_OW 70
21166: NOT
21167: IFFALSE 21095
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
21169: LD_ADDR_VAR 0 2
21173: PUSH
21174: LD_INT 12
21176: PPUSH
21177: LD_INT 21
21179: PUSH
21180: LD_INT 3
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PPUSH
21187: CALL_OW 70
21191: ST_TO_ADDR
// for i in tmp do
21192: LD_ADDR_VAR 0 1
21196: PUSH
21197: LD_VAR 0 2
21201: PUSH
21202: FOR_IN
21203: IFFALSE 21219
// SetSide ( i , 8 ) ;
21205: LD_VAR 0 1
21209: PPUSH
21210: LD_INT 8
21212: PPUSH
21213: CALL_OW 235
21217: GO 21202
21219: POP
21220: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
21221: LD_INT 63
21223: PPUSH
21224: LD_INT 42
21226: PPUSH
21227: CALL_OW 428
21231: PPUSH
21232: LD_INT 320
21234: PPUSH
21235: CALL_OW 234
// wait ( 0 0$10 ) ;
21239: LD_INT 350
21241: PPUSH
21242: CALL_OW 67
// DialogueOn ;
21246: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
21250: LD_INT 8
21252: PPUSH
21253: LD_INT 2
21255: PPUSH
21256: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
21260: LD_INT 86
21262: PPUSH
21263: LD_INT 54
21265: PPUSH
21266: CALL_OW 428
21270: PPUSH
21271: LD_STRING antwerp
21273: PPUSH
21274: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
21278: LD_EXP 47
21282: PPUSH
21283: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
21287: LD_EXP 47
21291: PPUSH
21292: LD_STRING DRf-rast-1
21294: PPUSH
21295: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
21299: LD_EXP 34
21303: PPUSH
21304: LD_STRING DH-rast-2
21306: PPUSH
21307: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
21311: LD_EXP 47
21315: PPUSH
21316: LD_STRING DRf-rast-3
21318: PPUSH
21319: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
21323: LD_EXP 47
21327: PPUSH
21328: LD_STRING DRf-rast-4
21330: PPUSH
21331: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
21335: LD_EXP 47
21339: PPUSH
21340: LD_STRING DRf-rast-5
21342: PPUSH
21343: CALL_OW 94
// if IsOk ( Aviradze ) then
21347: LD_EXP 46
21351: PPUSH
21352: CALL_OW 302
21356: IFFALSE 21415
// begin CenterNowOnUnits ( Aviradze ) ;
21358: LD_EXP 46
21362: PPUSH
21363: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
21367: LD_EXP 46
21371: PPUSH
21372: LD_STRING DA-rast-6
21374: PPUSH
21375: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
21379: LD_EXP 34
21383: PPUSH
21384: LD_STRING DH-rast-7
21386: PPUSH
21387: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
21391: LD_EXP 35
21395: PPUSH
21396: LD_STRING DG-rast-8
21398: PPUSH
21399: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
21403: LD_EXP 35
21407: PPUSH
21408: LD_STRING DG-rast-9
21410: PPUSH
21411: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
21415: LD_EXP 34
21419: PPUSH
21420: LD_STRING DH-rast-10
21422: PPUSH
21423: CALL_OW 88
// DialogueOff ;
21427: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
21431: LD_STRING M2
21433: PPUSH
21434: CALL_OW 337
// bergkampfArrived := true ;
21438: LD_ADDR_EXP 3
21442: PUSH
21443: LD_INT 1
21445: ST_TO_ADDR
// PrepareRolfBase ;
21446: CALL 3742 0 0
// end ;
21450: PPOPN 3
21452: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) and canRolfJoin do var i ;
21453: LD_INT 12
21455: PPUSH
21456: LD_INT 22
21458: PUSH
21459: LD_INT 2
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PPUSH
21466: CALL_OW 70
21470: PUSH
21471: LD_EXP 47
21475: PPUSH
21476: CALL_OW 302
21480: AND
21481: PUSH
21482: LD_EXP 29
21486: AND
21487: IFFALSE 22047
21489: GO 21491
21491: DISABLE
21492: LD_INT 0
21494: PPUSH
// begin rolfScriptBase := false ;
21495: LD_ADDR_EXP 9
21499: PUSH
21500: LD_INT 0
21502: ST_TO_ADDR
// DialogueOn ;
21503: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
21507: LD_EXP 47
21511: PPUSH
21512: CALL_OW 87
// if rolfSquad >= 10 then
21516: LD_EXP 51
21520: PUSH
21521: LD_INT 10
21523: GREATEREQUAL
21524: IFFALSE 21703
// begin linkedWithRolf := 2 ;
21526: LD_ADDR_EXP 12
21530: PUSH
21531: LD_INT 2
21533: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
21534: LD_EXP 47
21538: PPUSH
21539: LD_STRING DRf-rast-11
21541: PPUSH
21542: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
21546: LD_EXP 34
21550: PPUSH
21551: LD_STRING DH-rast-12
21553: PPUSH
21554: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
21558: LD_EXP 47
21562: PPUSH
21563: LD_STRING DRf-rast-13
21565: PPUSH
21566: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
21570: LD_EXP 34
21574: PPUSH
21575: LD_STRING DH-rast-14
21577: PPUSH
21578: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
21582: LD_EXP 47
21586: PPUSH
21587: LD_STRING DRf-rast-15
21589: PPUSH
21590: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
21594: LD_EXP 34
21598: PPUSH
21599: LD_STRING DH-rast-16
21601: PPUSH
21602: CALL_OW 88
// if IsOk ( Mike ) then
21606: LD_EXP 36
21610: PPUSH
21611: CALL_OW 302
21615: IFFALSE 21689
// begin Say ( Mike , DM-rast-17 ) ;
21617: LD_EXP 36
21621: PPUSH
21622: LD_STRING DM-rast-17
21624: PPUSH
21625: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
21629: LD_EXP 34
21633: PPUSH
21634: LD_STRING DH-rast-18
21636: PPUSH
21637: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
21641: LD_EXP 36
21645: PPUSH
21646: LD_STRING DM-rast-19
21648: PPUSH
21649: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
21653: LD_EXP 34
21657: PPUSH
21658: LD_STRING DH-rast-20
21660: PPUSH
21661: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
21665: LD_EXP 36
21669: PPUSH
21670: LD_STRING DM-rast-21
21672: PPUSH
21673: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
21677: LD_EXP 34
21681: PPUSH
21682: LD_STRING DH-rast-22
21684: PPUSH
21685: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
21689: LD_EXP 34
21693: PPUSH
21694: LD_STRING DH-rast-23
21696: PPUSH
21697: CALL_OW 88
// end else
21701: GO 21853
// begin linkedWithRolf := 1 ;
21703: LD_ADDR_EXP 12
21707: PUSH
21708: LD_INT 1
21710: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
21711: LD_EXP 47
21715: PPUSH
21716: LD_STRING DRf-rast-a-11
21718: PPUSH
21719: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
21723: LD_EXP 34
21727: PPUSH
21728: LD_STRING DH-rast-a-12
21730: PPUSH
21731: CALL_OW 88
// if IsOk ( Kurt ) then
21735: LD_EXP 45
21739: PPUSH
21740: CALL_OW 302
21744: IFFALSE 21841
// begin Say ( Kurt , DKs-rast-a-13 ) ;
21746: LD_EXP 45
21750: PPUSH
21751: LD_STRING DKs-rast-a-13
21753: PPUSH
21754: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
21758: LD_EXP 47
21762: PPUSH
21763: LD_STRING DRf-rast-a-14
21765: PPUSH
21766: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
21770: LD_EXP 47
21774: PPUSH
21775: LD_STRING DRf-rast-a-15
21777: PPUSH
21778: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
21782: LD_EXP 45
21786: PPUSH
21787: LD_STRING DKs-rast-a-16
21789: PPUSH
21790: CALL_OW 88
// if IsOk ( Givi ) then
21794: LD_EXP 35
21798: PPUSH
21799: CALL_OW 302
21803: IFFALSE 21841
// begin Say ( Givi , DG-rast-a-17 ) ;
21805: LD_EXP 35
21809: PPUSH
21810: LD_STRING DG-rast-a-17
21812: PPUSH
21813: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
21817: LD_EXP 35
21821: PPUSH
21822: LD_STRING DG-rast-a-18
21824: PPUSH
21825: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
21829: LD_EXP 45
21833: PPUSH
21834: LD_STRING DKs-rast-a-19
21836: PPUSH
21837: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
21841: LD_EXP 34
21845: PPUSH
21846: LD_STRING DH-rast-a-20
21848: PPUSH
21849: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
21853: LD_EXP 47
21857: PPUSH
21858: LD_STRING DRf-rast-24
21860: PPUSH
21861: CALL_OW 88
// if IsOk ( Aviradze ) then
21865: LD_EXP 46
21869: PPUSH
21870: CALL_OW 302
21874: IFFALSE 21974
// begin Say ( Aviradze , DA-rast-25 ) ;
21876: LD_EXP 46
21880: PPUSH
21881: LD_STRING DA-rast-25
21883: PPUSH
21884: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
21888: LD_EXP 34
21892: PPUSH
21893: LD_STRING DH-rast-26
21895: PPUSH
21896: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
21900: LD_EXP 46
21904: PPUSH
21905: LD_STRING DA-rast-27
21907: PPUSH
21908: CALL_OW 88
// if IsOk ( Markov ) then
21912: LD_EXP 41
21916: PPUSH
21917: CALL_OW 302
21921: IFFALSE 21949
// begin Say ( Markov , DMar-rast-28 ) ;
21923: LD_EXP 41
21927: PPUSH
21928: LD_STRING DMar-rast-28
21930: PPUSH
21931: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
21935: LD_EXP 41
21939: PPUSH
21940: LD_STRING DMar-rast-29
21942: PPUSH
21943: CALL_OW 88
// end else
21947: GO 21972
// if IsOk ( Sophia ) then
21949: LD_EXP 40
21953: PPUSH
21954: CALL_OW 302
21958: IFFALSE 21972
// begin Say ( Sophia , DS-rast-28 ) ;
21960: LD_EXP 40
21964: PPUSH
21965: LD_STRING DS-rast-28
21967: PPUSH
21968: CALL_OW 88
// end ; end else
21972: GO 21997
// if IsOk ( Sophia ) then
21974: LD_EXP 40
21978: PPUSH
21979: CALL_OW 302
21983: IFFALSE 21997
// Say ( Sophia , DS-rast-29 ) ;
21985: LD_EXP 40
21989: PPUSH
21990: LD_STRING DS-rast-29
21992: PPUSH
21993: CALL_OW 88
// DialogueOff ;
21997: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
22001: LD_STRING M3
22003: PPUSH
22004: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
22008: LD_ADDR_VAR 0 1
22012: PUSH
22013: LD_INT 22
22015: PUSH
22016: LD_INT 8
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PPUSH
22023: CALL_OW 69
22027: PUSH
22028: FOR_IN
22029: IFFALSE 22045
// SetSide ( i , 2 ) ;
22031: LD_VAR 0 1
22035: PPUSH
22036: LD_INT 2
22038: PPUSH
22039: CALL_OW 235
22043: GO 22028
22045: POP
22046: POP
// end ;
22047: PPOPN 1
22049: END
// every 0 0$1 trigger omarAttack and not linkedWithRolf and canRolfJoin do var i ;
22050: LD_EXP 23
22054: PUSH
22055: LD_EXP 12
22059: NOT
22060: AND
22061: PUSH
22062: LD_EXP 29
22066: AND
22067: IFFALSE 22158
22069: GO 22071
22071: DISABLE
22072: LD_INT 0
22074: PPUSH
// begin canRolfJoin := false ;
22075: LD_ADDR_EXP 29
22079: PUSH
22080: LD_INT 0
22082: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
22083: LD_STRING M3
22085: PPUSH
22086: CALL_OW 337
// for i in rolfSquad do
22090: LD_ADDR_VAR 0 1
22094: PUSH
22095: LD_EXP 51
22099: PUSH
22100: FOR_IN
22101: IFFALSE 22156
// begin ComExit ( i ) ;
22103: LD_VAR 0 1
22107: PPUSH
22108: CALL 67092 0 1
// AddComAgressiveMove ( i , 147 , 162 ) ;
22112: LD_VAR 0 1
22116: PPUSH
22117: LD_INT 147
22119: PPUSH
22120: LD_INT 162
22122: PPUSH
22123: CALL_OW 174
// AddComWait ( i , 0 0$30 ) ;
22127: LD_VAR 0 1
22131: PPUSH
22132: LD_INT 1050
22134: PPUSH
22135: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 162 ) ;
22139: LD_VAR 0 1
22143: PPUSH
22144: LD_INT 103
22146: PPUSH
22147: LD_INT 162
22149: PPUSH
22150: CALL_OW 174
// end ;
22154: GO 22100
22156: POP
22157: POP
// end ;
22158: PPOPN 1
22160: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf and canRolfJoin do var random ;
22161: LD_EXP 3
22165: PUSH
22166: LD_EXP 47
22170: PPUSH
22171: CALL_OW 256
22175: PUSH
22176: LD_INT 400
22178: LESS
22179: AND
22180: PUSH
22181: LD_EXP 12
22185: NOT
22186: AND
22187: PUSH
22188: LD_EXP 29
22192: AND
22193: IFFALSE 22467
22195: GO 22197
22197: DISABLE
22198: LD_INT 0
22200: PPUSH
// begin DialogueOn ;
22201: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
22205: LD_EXP 47
22209: PPUSH
22210: LD_STRING DRf-rast-f-11
22212: PPUSH
22213: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
22217: LD_EXP 47
22221: PPUSH
22222: LD_STRING DRf-rast-f-12
22224: PPUSH
22225: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
22229: LD_EXP 47
22233: PPUSH
22234: LD_STRING DRf-rast-f-13
22236: PPUSH
22237: CALL_OW 94
// DialogueOff ;
22241: CALL_OW 7
// KillUnit ( Rolf ) ;
22245: LD_EXP 47
22249: PPUSH
22250: CALL_OW 66
// wait ( 0 0$1 ) ;
22254: LD_INT 35
22256: PPUSH
22257: CALL_OW 67
// if not IsOk ( Givi ) then
22261: LD_EXP 35
22265: PPUSH
22266: CALL_OW 302
22270: NOT
22271: IFFALSE 22275
// exit ;
22273: GO 22467
// DialogueOn ;
22275: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
22279: LD_EXP 35
22283: PPUSH
22284: LD_STRING DG-rast-f-14
22286: PPUSH
22287: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
22291: LD_EXP 35
22295: PPUSH
22296: LD_STRING DG-rast-f-15
22298: PPUSH
22299: CALL_OW 88
// if IsOk ( Kaia ) then
22303: LD_EXP 39
22307: PPUSH
22308: CALL_OW 302
22312: IFFALSE 22328
// Say ( Kaia , DK-rast-f-16 ) else
22314: LD_EXP 39
22318: PPUSH
22319: LD_STRING DK-rast-f-16
22321: PPUSH
22322: CALL_OW 88
22326: GO 22415
// if heikeSecondSquad then
22328: LD_EXP 49
22332: IFFALSE 22415
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
22334: LD_ADDR_VAR 0 1
22338: PUSH
22339: LD_EXP 49
22343: PUSH
22344: LD_INT 1
22346: PPUSH
22347: LD_EXP 49
22351: PPUSH
22352: CALL_OW 12
22356: ARRAY
22357: ST_TO_ADDR
// case GetSex ( random ) of 1 :
22358: LD_VAR 0 1
22362: PPUSH
22363: CALL_OW 258
22367: PUSH
22368: LD_INT 1
22370: DOUBLE
22371: EQUAL
22372: IFTRUE 22376
22374: GO 22391
22376: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
22377: LD_VAR 0 1
22381: PPUSH
22382: LD_STRING DArm-rast-f-a-16
22384: PPUSH
22385: CALL_OW 88
22389: GO 22415
22391: LD_INT 2
22393: DOUBLE
22394: EQUAL
22395: IFTRUE 22399
22397: GO 22414
22399: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
22400: LD_VAR 0 1
22404: PPUSH
22405: LD_STRING DArf-rast-f-a-16
22407: PPUSH
22408: CALL_OW 88
22412: GO 22415
22414: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
22415: LD_EXP 35
22419: PPUSH
22420: LD_STRING DG-rast-f-17
22422: PPUSH
22423: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
22427: LD_EXP 35
22431: PPUSH
22432: LD_STRING DG-rast-f-18
22434: PPUSH
22435: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
22439: LD_EXP 35
22443: PPUSH
22444: LD_STRING DG-rast-f-19
22446: PPUSH
22447: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
22451: LD_EXP 35
22455: PPUSH
22456: LD_STRING DG-rast-f-20
22458: PPUSH
22459: CALL_OW 88
// DialogueOff ;
22463: CALL_OW 7
// end ;
22467: PPOPN 1
22469: END
// every 0 0$1 trigger gameActive and SeeArea ( 2 , ruMainBase ) do
22470: LD_EXP 31
22474: PUSH
22475: LD_INT 2
22477: PPUSH
22478: LD_INT 10
22480: PPUSH
22481: CALL_OW 294
22485: AND
22486: IFFALSE 22559
22488: GO 22490
22490: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
22491: LD_EXP 35
22495: PPUSH
22496: LD_STRING DG-Len-1
22498: PPUSH
22499: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
22503: LD_EXP 45
22507: PPUSH
22508: LD_STRING DKs-Len-2
22510: PPUSH
22511: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
22515: LD_EXP 45
22519: PPUSH
22520: LD_STRING DKs-Len-3
22522: PPUSH
22523: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
22527: LD_EXP 34
22531: PPUSH
22532: LD_STRING DH-Len-4
22534: PPUSH
22535: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
22539: LD_EXP 39
22543: PPUSH
22544: LD_STRING DK-Len-5
22546: PPUSH
22547: CALL_OW 88
// leninSpotted := true ;
22551: LD_ADDR_EXP 14
22555: PUSH
22556: LD_INT 1
22558: ST_TO_ADDR
// end ;
22559: END
// every 0 0$1 trigger debug or ( bergkampfArrived and tick > [ 32 32$00 , 30 30$00 , 28 28$00 , 26 26$00 ] [ Difficulty ] ) do var i , tmp , inOmarBase , heikeNearbyOmar ;
22560: LD_EXP 1
22564: PUSH
22565: LD_EXP 3
22569: PUSH
22570: LD_OWVAR 1
22574: PUSH
22575: LD_INT 67200
22577: PUSH
22578: LD_INT 63000
22580: PUSH
22581: LD_INT 58800
22583: PUSH
22584: LD_INT 54600
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: PUSH
22593: LD_OWVAR 67
22597: ARRAY
22598: GREATER
22599: AND
22600: OR
22601: IFFALSE 23338
22603: GO 22605
22605: DISABLE
22606: LD_INT 0
22608: PPUSH
22609: PPUSH
22610: PPUSH
22611: PPUSH
// begin PrepareOmarSquad ;
22612: CALL 5024 0 0
// repeat wait ( 0 0$1 ) ;
22616: LD_INT 35
22618: PPUSH
22619: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
22623: LD_INT 14
22625: PPUSH
22626: LD_INT 22
22628: PUSH
22629: LD_INT 3
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 2
22638: PUSH
22639: LD_INT 21
22641: PUSH
22642: LD_INT 1
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: LD_INT 59
22651: PUSH
22652: EMPTY
22653: LIST
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: LIST
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PPUSH
22664: CALL_OW 70
22668: NOT
22669: IFFALSE 22616
// tmp := FilterUnitsInArea ( ruOmarBase , [ f_side , 2 ] ) ;
22671: LD_ADDR_VAR 0 2
22675: PUSH
22676: LD_INT 14
22678: PPUSH
22679: LD_INT 22
22681: PUSH
22682: LD_INT 2
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PPUSH
22689: CALL_OW 70
22693: ST_TO_ADDR
// inOmarBase := tmp > 0 ;
22694: LD_ADDR_VAR 0 3
22698: PUSH
22699: LD_VAR 0 2
22703: PUSH
22704: LD_INT 0
22706: GREATER
22707: ST_TO_ADDR
// heikeNearbyOmar := IsInArea ( Heike , ruOmarBase ) ;
22708: LD_ADDR_VAR 0 4
22712: PUSH
22713: LD_EXP 34
22717: PPUSH
22718: LD_INT 14
22720: PPUSH
22721: CALL_OW 308
22725: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_type , unit_building ] ) then
22726: LD_VAR 0 2
22730: PPUSH
22731: LD_INT 21
22733: PUSH
22734: LD_INT 3
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PPUSH
22741: CALL_OW 72
22745: IFFALSE 22850
// begin if heikeNearbyOmar then
22747: LD_VAR 0 4
22751: IFFALSE 22767
// Say ( Omar , DOm-Base-1b ) else
22753: LD_EXP 44
22757: PPUSH
22758: LD_STRING DOm-Base-1b
22760: PPUSH
22761: CALL_OW 88
22765: GO 22779
// SayRadio ( Omar , DOm-Base-1br ) ;
22767: LD_EXP 44
22771: PPUSH
22772: LD_STRING DOm-Base-1br
22774: PPUSH
22775: CALL_OW 94
// for i in UnitFilter ( tmp , [ f_type , unit_building ] ) do
22779: LD_ADDR_VAR 0 1
22783: PUSH
22784: LD_VAR 0 2
22788: PPUSH
22789: LD_INT 21
22791: PUSH
22792: LD_INT 3
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PPUSH
22799: CALL_OW 72
22803: PUSH
22804: FOR_IN
22805: IFFALSE 22846
// begin if UnitsInside ( i ) then
22807: LD_VAR 0 1
22811: PPUSH
22812: CALL_OW 313
22816: IFFALSE 22832
// ComExitBuilding ( UnitsInside ( i ) ) ;
22818: LD_VAR 0 1
22822: PPUSH
22823: CALL_OW 313
22827: PPUSH
22828: CALL_OW 122
// SetSide ( i , 5 ) ;
22832: LD_VAR 0 1
22836: PPUSH
22837: LD_INT 5
22839: PPUSH
22840: CALL_OW 235
// end ;
22844: GO 22804
22846: POP
22847: POP
// end else
22848: GO 22943
// if UnitFilter ( tmp , [ f_type , unit_vehicle ] ) then
22850: LD_VAR 0 2
22854: PPUSH
22855: LD_INT 21
22857: PUSH
22858: LD_INT 2
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PPUSH
22865: CALL_OW 72
22869: IFFALSE 22905
// begin if heikeNearbyOmar then
22871: LD_VAR 0 4
22875: IFFALSE 22891
// Say ( Omar , DOm-Base-1v ) else
22877: LD_EXP 44
22881: PPUSH
22882: LD_STRING DOm-Base-1v
22884: PPUSH
22885: CALL_OW 88
22889: GO 22903
// SayRadio ( Omar , DOm-Base-1vr ) end else
22891: LD_EXP 44
22895: PPUSH
22896: LD_STRING DOm-Base-1vr
22898: PPUSH
22899: CALL_OW 94
22903: GO 22943
// if inOmarBase then
22905: LD_VAR 0 3
22909: IFFALSE 22943
// begin if heikeNearbyOmar then
22911: LD_VAR 0 4
22915: IFFALSE 22931
// Say ( Omar , DOm-Base-1h ) else
22917: LD_EXP 44
22921: PPUSH
22922: LD_STRING DOm-Base-1h
22924: PPUSH
22925: CALL_OW 88
22929: GO 22943
// SayRadio ( Omar , DOm-Base-1hr ) end ;
22931: LD_EXP 44
22935: PPUSH
22936: LD_STRING DOm-Base-1hr
22938: PPUSH
22939: CALL_OW 94
// for i in omarSquad do
22943: LD_ADDR_VAR 0 1
22947: PUSH
22948: LD_EXP 52
22952: PUSH
22953: FOR_IN
22954: IFFALSE 22985
// if GetLives ( i ) < 750 then
22956: LD_VAR 0 1
22960: PPUSH
22961: CALL_OW 256
22965: PUSH
22966: LD_INT 750
22968: LESS
22969: IFFALSE 22983
// SetLives ( i , 1000 ) ;
22971: LD_VAR 0 1
22975: PPUSH
22976: LD_INT 1000
22978: PPUSH
22979: CALL_OW 234
22983: GO 22953
22985: POP
22986: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
22987: LD_ADDR_VAR 0 1
22991: PUSH
22992: LD_INT 14
22994: PPUSH
22995: LD_INT 21
22997: PUSH
22998: LD_INT 3
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PPUSH
23005: CALL_OW 70
23009: PUSH
23010: FOR_IN
23011: IFFALSE 23027
// SetSide ( i , 5 ) ;
23013: LD_VAR 0 1
23017: PPUSH
23018: LD_INT 5
23020: PPUSH
23021: CALL_OW 235
23025: GO 23010
23027: POP
23028: POP
// wait ( 0 0$3 ) ;
23029: LD_INT 105
23031: PPUSH
23032: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
23036: LD_INT 5
23038: PPUSH
23039: LD_INT 2
23041: PPUSH
23042: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
23046: LD_EXP 44
23050: PPUSH
23051: CALL_OW 87
// DialogueOn ;
23055: CALL_OW 6
// if heikeNearbyOmar then
23059: LD_VAR 0 4
23063: IFFALSE 23121
// begin Say ( Omar , DOm-Veh-1a ) ;
23065: LD_EXP 44
23069: PPUSH
23070: LD_STRING DOm-Veh-1a
23072: PPUSH
23073: CALL_OW 88
// Say ( Omar , DOm-Veh-2a ) ;
23077: LD_EXP 44
23081: PPUSH
23082: LD_STRING DOm-Veh-2a
23084: PPUSH
23085: CALL_OW 88
// Say ( Omar , DOm-Veh-3a ) ;
23089: LD_EXP 44
23093: PPUSH
23094: LD_STRING DOm-Veh-3a
23096: PPUSH
23097: CALL_OW 88
// if mortarConstructed then
23101: LD_EXP 15
23105: IFFALSE 23119
// Say ( Omar , DOm-Veh-4a ) ;
23107: LD_EXP 44
23111: PPUSH
23112: LD_STRING DOm-Veh-4a
23114: PPUSH
23115: CALL_OW 88
// end else
23119: GO 23175
// begin SayRadio ( Omar , DOm-Veh-1 ) ;
23121: LD_EXP 44
23125: PPUSH
23126: LD_STRING DOm-Veh-1
23128: PPUSH
23129: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
23133: LD_EXP 44
23137: PPUSH
23138: LD_STRING DOm-Veh-2
23140: PPUSH
23141: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
23145: LD_EXP 44
23149: PPUSH
23150: LD_STRING DOm-Veh-3
23152: PPUSH
23153: CALL_OW 94
// if mortarConstructed then
23157: LD_EXP 15
23161: IFFALSE 23175
// SayRadio ( Omar , DOm-Veh-4 ) ;
23163: LD_EXP 44
23167: PPUSH
23168: LD_STRING DOm-Veh-4
23170: PPUSH
23171: CALL_OW 94
// end ; Say ( Heike , DH-Veh-5 ) ;
23175: LD_EXP 34
23179: PPUSH
23180: LD_STRING DH-Veh-5
23182: PPUSH
23183: CALL_OW 88
// if IsOk ( Kurt ) then
23187: LD_EXP 45
23191: PPUSH
23192: CALL_OW 302
23196: IFFALSE 23246
// begin Say ( Kurt , DKs-Veh-6 ) ;
23198: LD_EXP 45
23202: PPUSH
23203: LD_STRING DKs-Veh-6
23205: PPUSH
23206: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
23210: LD_EXP 45
23214: PPUSH
23215: LD_STRING DKs-Veh-7
23217: PPUSH
23218: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
23222: LD_EXP 35
23226: PPUSH
23227: LD_STRING DG-Veh-8
23229: PPUSH
23230: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
23234: LD_EXP 36
23238: PPUSH
23239: LD_STRING DM-Veh-9
23241: PPUSH
23242: CALL_OW 88
// end ; DialogueOff ;
23246: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
23250: LD_STRING M4
23252: PPUSH
23253: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
23257: LD_EXP 44
23261: PPUSH
23262: LD_INT 341
23264: PPUSH
23265: LD_INT 232
23267: PPUSH
23268: CALL_OW 428
23272: PPUSH
23273: CALL_OW 120
// omarArrived := true ;
23277: LD_ADDR_EXP 6
23281: PUSH
23282: LD_INT 1
23284: ST_TO_ADDR
// omarScriptBase := true ;
23285: LD_ADDR_EXP 10
23289: PUSH
23290: LD_INT 1
23292: ST_TO_ADDR
// omarWantVehicles := true ;
23293: LD_ADDR_EXP 18
23297: PUSH
23298: LD_INT 1
23300: ST_TO_ADDR
// if debug then
23301: LD_EXP 1
23305: IFFALSE 23338
// begin wait ( 0 0$25 ) ;
23307: LD_INT 875
23309: PPUSH
23310: CALL_OW 67
// omarScriptBase := false ;
23314: LD_ADDR_EXP 10
23318: PUSH
23319: LD_INT 0
23321: ST_TO_ADDR
// omarWantVehicles := false ;
23322: LD_ADDR_EXP 18
23326: PUSH
23327: LD_INT 0
23329: ST_TO_ADDR
// omarAttack := true ;
23330: LD_ADDR_EXP 23
23334: PUSH
23335: LD_INT 1
23337: ST_TO_ADDR
// end ; end ;
23338: PPOPN 4
23340: END
// every 0 0$1 trigger FilterUnitsInArea ( ruMainBase , [ f_side , 2 ] ) and omarArrived and IsOk ( Omar ) and not omarAttack do
23341: LD_INT 10
23343: PPUSH
23344: LD_INT 22
23346: PUSH
23347: LD_INT 2
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PPUSH
23354: CALL_OW 70
23358: PUSH
23359: LD_EXP 6
23363: AND
23364: PUSH
23365: LD_EXP 44
23369: PPUSH
23370: CALL_OW 302
23374: AND
23375: PUSH
23376: LD_EXP 23
23380: NOT
23381: AND
23382: IFFALSE 23399
23384: GO 23386
23386: DISABLE
// SayRadio ( Omar , DOm-Lenin ) ;
23387: LD_EXP 44
23391: PPUSH
23392: LD_STRING DOm-Lenin
23394: PPUSH
23395: CALL_OW 94
23399: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
23400: LD_EXP 47
23404: PPUSH
23405: CALL_OW 302
23409: PUSH
23410: LD_EXP 12
23414: AND
23415: PUSH
23416: LD_EXP 6
23420: AND
23421: IFFALSE 23525
23423: GO 23425
23425: DISABLE
// begin wait ( 1 1$00 ) ;
23426: LD_INT 2100
23428: PPUSH
23429: CALL_OW 67
// CenterNowOnUnits ( Rolf ) ;
23433: LD_EXP 47
23437: PPUSH
23438: CALL_OW 87
// DialogueOn ;
23442: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
23446: LD_EXP 47
23450: PPUSH
23451: LD_STRING DRf-Veh-10
23453: PPUSH
23454: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
23458: LD_EXP 47
23462: PPUSH
23463: LD_STRING DRf-Veh-11
23465: PPUSH
23466: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
23470: LD_EXP 34
23474: PPUSH
23475: LD_STRING DH-Veh-12
23477: PPUSH
23478: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
23482: LD_EXP 34
23486: PPUSH
23487: LD_STRING DH-Veh-13
23489: PPUSH
23490: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
23494: LD_EXP 47
23498: PPUSH
23499: LD_STRING DRf-Veh-14
23501: PPUSH
23502: CALL_OW 88
// DialogueOff ;
23506: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
23510: LD_STRING M5
23512: PPUSH
23513: CALL_OW 337
// rolfWantVehicles := true ;
23517: LD_ADDR_EXP 17
23521: PUSH
23522: LD_INT 1
23524: ST_TO_ADDR
// end ;
23525: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
23526: LD_EXP 18
23530: IFFALSE 24293
23532: GO 23534
23534: DISABLE
23535: LD_INT 0
23537: PPUSH
23538: PPUSH
23539: PPUSH
23540: PPUSH
23541: PPUSH
23542: PPUSH
// begin wait ( 0 0$3 ) ;
23543: LD_INT 105
23545: PPUSH
23546: CALL_OW 67
// Hint ( OmarVehicles ) ;
23550: LD_STRING OmarVehicles
23552: PPUSH
23553: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
23557: LD_INT 16
23559: PPUSH
23560: LD_INT 1
23562: PPUSH
23563: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
23567: LD_INT 35
23569: PPUSH
23570: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
23574: LD_ADDR_EXP 20
23578: PUSH
23579: LD_EXP 20
23583: PUSH
23584: LD_INT 35
23586: MINUS
23587: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
23588: LD_EXP 20
23592: PUSH
23593: LD_INT 0
23595: LESSEQUAL
23596: IFFALSE 23696
// begin display_strings := [ ] ;
23598: LD_ADDR_OWVAR 47
23602: PUSH
23603: EMPTY
23604: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
23605: LD_STRING M4a
23607: PPUSH
23608: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
23612: LD_INT 16
23614: PPUSH
23615: LD_INT 0
23617: PPUSH
23618: CALL_OW 424
// DialogueOn ;
23622: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
23626: LD_EXP 44
23630: PPUSH
23631: LD_STRING DOm-Veh-b-15
23633: PPUSH
23634: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
23638: LD_EXP 34
23642: PPUSH
23643: LD_STRING DH-Veh-b-16
23645: PPUSH
23646: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
23650: LD_EXP 44
23654: PPUSH
23655: LD_STRING DOm-Veh-b-17
23657: PPUSH
23658: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
23662: LD_EXP 39
23666: PPUSH
23667: LD_STRING DK-Veh-b-18
23669: PPUSH
23670: CALL_OW 88
// DialogueOff ;
23674: CALL_OW 7
// omarAttack := true ;
23678: LD_ADDR_EXP 23
23682: PUSH
23683: LD_INT 1
23685: ST_TO_ADDR
// omarScriptBase := false ;
23686: LD_ADDR_EXP 10
23690: PUSH
23691: LD_INT 0
23693: ST_TO_ADDR
// exit ;
23694: GO 24293
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
23696: LD_EXP 21
23700: PUSH
23701: LD_INT 16
23703: PPUSH
23704: LD_INT 22
23706: PUSH
23707: LD_INT 2
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: LD_INT 21
23716: PUSH
23717: LD_INT 2
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: LD_INT 3
23726: PUSH
23727: LD_INT 2
23729: PUSH
23730: LD_INT 34
23732: PUSH
23733: LD_INT 32
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 34
23742: PUSH
23743: LD_INT 88
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 34
23752: PUSH
23753: LD_INT 31
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 33
23772: PUSH
23773: LD_INT 1
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 58
23782: PUSH
23783: EMPTY
23784: LIST
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: PPUSH
23793: CALL_OW 70
23797: LESSEQUAL
23798: IFFALSE 23567
// omarWaitingForVehiclesTimer := 0 0$00 ;
23800: LD_ADDR_EXP 20
23804: PUSH
23805: LD_INT 0
23807: ST_TO_ADDR
// display_strings := [ ] ;
23808: LD_ADDR_OWVAR 47
23812: PUSH
23813: EMPTY
23814: ST_TO_ADDR
// DialogueOn ;
23815: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
23819: LD_EXP 44
23823: PPUSH
23824: LD_STRING DOm-Veh-a-15
23826: PPUSH
23827: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
23831: LD_EXP 39
23835: PPUSH
23836: LD_STRING DK-Veh-a-16
23838: PPUSH
23839: CALL_OW 88
// DialogueOff ;
23843: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
23847: LD_STRING M4a
23849: PPUSH
23850: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
23854: LD_INT 16
23856: PPUSH
23857: LD_INT 0
23859: PPUSH
23860: CALL_OW 424
// omarHasVehicles := true ;
23864: LD_ADDR_EXP 22
23868: PUSH
23869: LD_INT 1
23871: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23872: LD_INT 35
23874: PPUSH
23875: CALL_OW 67
// until rolfWaitingForVehiclesTimer = 0 0$00 ;
23879: LD_EXP 19
23883: PUSH
23884: LD_INT 0
23886: EQUAL
23887: IFFALSE 23872
// wait ( 1 1$00 ) ;
23889: LD_INT 2100
23891: PPUSH
23892: CALL_OW 67
// omarAttack := true ;
23896: LD_ADDR_EXP 23
23900: PUSH
23901: LD_INT 1
23903: ST_TO_ADDR
// omarScriptBase := false ;
23904: LD_ADDR_EXP 10
23908: PUSH
23909: LD_INT 0
23911: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
23912: LD_ADDR_VAR 0 2
23916: PUSH
23917: LD_INT 16
23919: PPUSH
23920: LD_INT 22
23922: PUSH
23923: LD_INT 2
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 21
23932: PUSH
23933: LD_INT 2
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 33
23942: PUSH
23943: LD_INT 1
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PUSH
23950: LD_INT 58
23952: PUSH
23953: EMPTY
23954: LIST
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: PPUSH
23962: CALL_OW 70
23966: ST_TO_ADDR
// for i in tmp do
23967: LD_ADDR_VAR 0 1
23971: PUSH
23972: LD_VAR 0 2
23976: PUSH
23977: FOR_IN
23978: IFFALSE 24006
// begin SetFuel ( i , 100 ) ;
23980: LD_VAR 0 1
23984: PPUSH
23985: LD_INT 100
23987: PPUSH
23988: CALL_OW 240
// SetSide ( i , 5 ) ;
23992: LD_VAR 0 1
23996: PPUSH
23997: LD_INT 5
23999: PPUSH
24000: CALL_OW 235
// end ;
24004: GO 23977
24006: POP
24007: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
24008: LD_ADDR_VAR 0 3
24012: PUSH
24013: LD_EXP 52
24017: PPUSH
24018: LD_INT 25
24020: PUSH
24021: LD_INT 2
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PPUSH
24028: CALL_OW 72
24032: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
24033: LD_ADDR_VAR 0 4
24037: PUSH
24038: LD_EXP 52
24042: PPUSH
24043: LD_INT 3
24045: PUSH
24046: LD_INT 55
24048: PUSH
24049: EMPTY
24050: LIST
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 25
24058: PUSH
24059: LD_INT 3
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PPUSH
24070: CALL_OW 72
24074: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
24075: LD_ADDR_VAR 0 5
24079: PUSH
24080: LD_INT 324
24082: PPUSH
24083: LD_INT 234
24085: PPUSH
24086: CALL_OW 428
24090: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
24091: LD_ADDR_VAR 0 6
24095: PUSH
24096: LD_INT 334
24098: PPUSH
24099: LD_INT 241
24101: PPUSH
24102: CALL_OW 428
24106: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
24107: LD_VAR 0 6
24111: PPUSH
24112: CALL_OW 313
24116: PPUSH
24117: CALL_OW 122
// if eng then
24121: LD_VAR 0 3
24125: IFFALSE 24233
// begin if eng + mech <= tmp then
24127: LD_VAR 0 3
24131: PUSH
24132: LD_VAR 0 4
24136: PLUS
24137: PUSH
24138: LD_VAR 0 2
24142: LESSEQUAL
24143: IFFALSE 24198
// begin ComEnterUnit ( eng , workshop ) ;
24145: LD_VAR 0 3
24149: PPUSH
24150: LD_VAR 0 5
24154: PPUSH
24155: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
24159: LD_VAR 0 3
24163: PPUSH
24164: LD_INT 3
24166: PPUSH
24167: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24171: LD_VAR 0 3
24175: PPUSH
24176: CALL_OW 182
// mech := mech union eng ;
24180: LD_ADDR_VAR 0 4
24184: PUSH
24185: LD_VAR 0 4
24189: PUSH
24190: LD_VAR 0 3
24194: UNION
24195: ST_TO_ADDR
// end else
24196: GO 24233
// begin ComEnterUnit ( eng , armoury ) ;
24198: LD_VAR 0 3
24202: PPUSH
24203: LD_VAR 0 6
24207: PPUSH
24208: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
24212: LD_VAR 0 3
24216: PPUSH
24217: LD_INT 1
24219: PPUSH
24220: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24224: LD_VAR 0 3
24228: PPUSH
24229: CALL_OW 182
// end ; end ; for i := 1 to tmp do
24233: LD_ADDR_VAR 0 1
24237: PUSH
24238: DOUBLE
24239: LD_INT 1
24241: DEC
24242: ST_TO_ADDR
24243: LD_VAR 0 2
24247: PUSH
24248: FOR_TO
24249: IFFALSE 24291
// if i <= mech then
24251: LD_VAR 0 1
24255: PUSH
24256: LD_VAR 0 4
24260: LESSEQUAL
24261: IFFALSE 24289
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
24263: LD_VAR 0 4
24267: PUSH
24268: LD_VAR 0 1
24272: ARRAY
24273: PPUSH
24274: LD_VAR 0 2
24278: PUSH
24279: LD_VAR 0 1
24283: ARRAY
24284: PPUSH
24285: CALL_OW 180
24289: GO 24248
24291: POP
24292: POP
// end ;
24293: PPOPN 6
24295: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i , hasBadWeapons ;
24296: LD_EXP 47
24300: PPUSH
24301: CALL_OW 302
24305: PUSH
24306: LD_EXP 17
24310: AND
24311: IFFALSE 24935
24313: GO 24315
24315: DISABLE
24316: LD_INT 0
24318: PPUSH
24319: PPUSH
// begin repeat wait ( 0 0$1 ) ;
24320: LD_INT 35
24322: PPUSH
24323: CALL_OW 67
// hasBadWeapons := false ;
24327: LD_ADDR_VAR 0 2
24331: PUSH
24332: LD_INT 0
24334: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
24335: LD_ADDR_EXP 19
24339: PUSH
24340: LD_EXP 19
24344: PUSH
24345: LD_INT 35
24347: MINUS
24348: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 then
24349: LD_EXP 19
24353: PUSH
24354: LD_INT 0
24356: LESSEQUAL
24357: IFFALSE 24619
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
24359: LD_ADDR_EXP 19
24363: PUSH
24364: LD_INT 0
24366: ST_TO_ADDR
// display_strings := [ ] ;
24367: LD_ADDR_OWVAR 47
24371: PUSH
24372: EMPTY
24373: ST_TO_ADDR
// DialogueOn ;
24374: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
24378: LD_EXP 47
24382: PPUSH
24383: LD_STRING DRf-Veh-b-19
24385: PPUSH
24386: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
24390: LD_EXP 47
24394: PPUSH
24395: LD_STRING DRf-Veh-b-20
24397: PPUSH
24398: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
24402: LD_EXP 34
24406: PPUSH
24407: LD_STRING DH-Veh-b-21
24409: PPUSH
24410: CALL_OW 88
// if IsOk ( Givi ) then
24414: LD_EXP 35
24418: PPUSH
24419: CALL_OW 302
24423: IFFALSE 24461
// begin Say ( Givi , DG-Veh-b-22 ) ;
24425: LD_EXP 35
24429: PPUSH
24430: LD_STRING DG-Veh-b-22
24432: PPUSH
24433: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
24437: LD_EXP 34
24441: PPUSH
24442: LD_STRING DH-Veh-b-23
24444: PPUSH
24445: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
24449: LD_EXP 35
24453: PPUSH
24454: LD_STRING DG-Veh-b-24
24456: PPUSH
24457: CALL_OW 88
// end ; DialogueOff ;
24461: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
24465: LD_STRING M5a
24467: PPUSH
24468: CALL_OW 337
// for i in rolfSquad do
24472: LD_ADDR_VAR 0 1
24476: PUSH
24477: LD_EXP 51
24481: PUSH
24482: FOR_IN
24483: IFFALSE 24600
// begin SetSide ( i , 8 ) ;
24485: LD_VAR 0 1
24489: PPUSH
24490: LD_INT 8
24492: PPUSH
24493: CALL_OW 235
// if IsDriver ( i ) then
24497: LD_VAR 0 1
24501: PPUSH
24502: CALL 64310 0 1
24506: IFFALSE 24578
// begin if not GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
24508: LD_VAR 0 1
24512: PPUSH
24513: CALL_OW 310
24517: PPUSH
24518: CALL_OW 264
24522: PUSH
24523: LD_INT 51
24525: PUSH
24526: LD_INT 52
24528: PUSH
24529: LD_INT 32
24531: PUSH
24532: LD_INT 88
24534: PUSH
24535: LD_INT 31
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: IN
24545: NOT
24546: IFFALSE 24567
// SetSide ( IsInUnit ( i ) , 8 ) else
24548: LD_VAR 0 1
24552: PPUSH
24553: CALL_OW 310
24557: PPUSH
24558: LD_INT 8
24560: PPUSH
24561: CALL_OW 235
24565: GO 24576
// ComExitVehicle ( i ) ;
24567: LD_VAR 0 1
24571: PPUSH
24572: CALL_OW 121
// end else
24576: GO 24598
// if IsInUnit ( i ) then
24578: LD_VAR 0 1
24582: PPUSH
24583: CALL_OW 310
24587: IFFALSE 24598
// ComExitBuilding ( i ) ;
24589: LD_VAR 0 1
24593: PPUSH
24594: CALL_OW 122
// end ;
24598: GO 24482
24600: POP
24601: POP
// wait ( 0 0$10 ) ;
24602: LD_INT 350
24604: PPUSH
24605: CALL_OW 67
// rolfAttack := true ;
24609: LD_ADDR_EXP 32
24613: PUSH
24614: LD_INT 1
24616: ST_TO_ADDR
// exit ;
24617: GO 24935
// end ; if IsDead ( Rolf ) then
24619: LD_EXP 47
24623: PPUSH
24624: CALL_OW 301
24628: IFFALSE 24639
// begin ChangeMissionObjectives ( M5a ) ;
24630: LD_STRING M5a
24632: PPUSH
24633: CALL_OW 337
// exit ;
24637: GO 24935
// end ; if Count ( UnitFilter ( rolfSquad , [ f_driving ] ) ) = Count ( rolfSquad ) then
24639: LD_EXP 51
24643: PPUSH
24644: LD_INT 55
24646: PUSH
24647: EMPTY
24648: LIST
24649: PPUSH
24650: CALL_OW 72
24654: PPUSH
24655: CALL 31328 0 1
24659: PUSH
24660: LD_EXP 51
24664: PPUSH
24665: CALL 31328 0 1
24669: EQUAL
24670: IFFALSE 24787
// begin for i in UnitFilter ( rolfSquad , [ f_driving ] ) do
24672: LD_ADDR_VAR 0 1
24676: PUSH
24677: LD_EXP 51
24681: PPUSH
24682: LD_INT 55
24684: PUSH
24685: EMPTY
24686: LIST
24687: PPUSH
24688: CALL_OW 72
24692: PUSH
24693: FOR_IN
24694: IFFALSE 24754
// if GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
24696: LD_VAR 0 1
24700: PPUSH
24701: CALL_OW 310
24705: PPUSH
24706: CALL_OW 264
24710: PUSH
24711: LD_INT 51
24713: PUSH
24714: LD_INT 52
24716: PUSH
24717: LD_INT 32
24719: PUSH
24720: LD_INT 88
24722: PUSH
24723: LD_INT 31
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: IN
24733: IFFALSE 24752
// begin hasBadWeapons := true ;
24735: LD_ADDR_VAR 0 2
24739: PUSH
24740: LD_INT 1
24742: ST_TO_ADDR
// Query ( QBadWeapon ) ;
24743: LD_STRING QBadWeapon
24745: PPUSH
24746: CALL_OW 97
// break ;
24750: GO 24754
// end ;
24752: GO 24693
24754: POP
24755: POP
// if not hasBadWeapons then
24756: LD_VAR 0 2
24760: NOT
24761: IFFALSE 24787
// if Query ( QRolf ) = 1 then
24763: LD_STRING QRolf
24765: PPUSH
24766: CALL_OW 97
24770: PUSH
24771: LD_INT 1
24773: EQUAL
24774: IFFALSE 24780
// break else
24776: GO 24791
24778: GO 24787
// wait ( 0 0$15 ) ;
24780: LD_INT 525
24782: PPUSH
24783: CALL_OW 67
// end ; until false ;
24787: LD_INT 0
24789: IFFALSE 24320
// rolfWaitingForVehiclesTimer := 0 0$00 ;
24791: LD_ADDR_EXP 19
24795: PUSH
24796: LD_INT 0
24798: ST_TO_ADDR
// display_strings := [ ] ;
24799: LD_ADDR_OWVAR 47
24803: PUSH
24804: EMPTY
24805: ST_TO_ADDR
// DialogueOn ;
24806: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
24810: LD_EXP 47
24814: PPUSH
24815: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
24819: LD_EXP 47
24823: PPUSH
24824: LD_STRING DRf-Veh-a-17
24826: PPUSH
24827: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
24831: LD_EXP 34
24835: PPUSH
24836: LD_STRING DH-08-Veh-a-18
24838: PPUSH
24839: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
24843: LD_EXP 47
24847: PPUSH
24848: LD_STRING DRf-Veh-a-19
24850: PPUSH
24851: CALL_OW 88
// DialogueOff ;
24855: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
24859: LD_STRING M5a
24861: PPUSH
24862: CALL_OW 337
// rolfHasVehicles := true ;
24866: LD_ADDR_EXP 16
24870: PUSH
24871: LD_INT 1
24873: ST_TO_ADDR
// for i in rolfSquad do
24874: LD_ADDR_VAR 0 1
24878: PUSH
24879: LD_EXP 51
24883: PUSH
24884: FOR_IN
24885: IFFALSE 24918
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
24887: LD_VAR 0 1
24891: PPUSH
24892: CALL_OW 310
24896: PPUSH
24897: LD_INT 8
24899: PPUSH
24900: CALL_OW 235
// SetSide ( i , 8 ) ;
24904: LD_VAR 0 1
24908: PPUSH
24909: LD_INT 8
24911: PPUSH
24912: CALL_OW 235
// end ;
24916: GO 24884
24918: POP
24919: POP
// wait ( 0 0$10 ) ;
24920: LD_INT 350
24922: PPUSH
24923: CALL_OW 67
// rolfAttack := true ;
24927: LD_ADDR_EXP 32
24931: PUSH
24932: LD_INT 1
24934: ST_TO_ADDR
// end ;
24935: PPOPN 2
24937: END
// every 0 0$1 trigger leninSpotted do
24938: LD_EXP 14
24942: IFFALSE 25030
24944: GO 24946
24946: DISABLE
// begin wait ( 0 0$10 ) ;
24947: LD_INT 350
24949: PPUSH
24950: CALL_OW 67
// DialogueOn ;
24954: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
24958: LD_EXP 46
24962: PPUSH
24963: LD_STRING DA-Transmission-1
24965: PPUSH
24966: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
24970: LD_EXP 53
24974: PPUSH
24975: LD_STRING DMzw-Transmission-2
24977: PPUSH
24978: CALL_OW 94
// if gaidarKilled then
24982: LD_EXP 7
24986: IFFALSE 25002
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
24988: LD_EXP 53
24992: PPUSH
24993: LD_STRING DMzw-Transmission-3
24995: PPUSH
24996: CALL_OW 94
25000: GO 25014
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
25002: LD_EXP 53
25006: PPUSH
25007: LD_STRING DMzw-Transmission-a-3
25009: PPUSH
25010: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
25014: LD_EXP 34
25018: PPUSH
25019: LD_STRING DH-Transmission-4
25021: PPUSH
25022: CALL_OW 88
// DialogueOff ;
25026: CALL_OW 7
// end ;
25030: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
25031: LD_INT 22
25033: PUSH
25034: LD_INT 3
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 25
25043: PUSH
25044: LD_INT 9
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 101
25053: PUSH
25054: LD_INT 2
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: LIST
25065: PPUSH
25066: CALL_OW 69
25070: PUSH
25071: LD_EXP 34
25075: PPUSH
25076: CALL_OW 302
25080: AND
25081: IFFALSE 25161
25083: GO 25085
25085: DISABLE
// begin wait ( 0 0$3 ) ;
25086: LD_INT 105
25088: PPUSH
25089: CALL_OW 67
// DialogueOn ;
25093: CALL_OW 6
// CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
25097: LD_INT 22
25099: PUSH
25100: LD_INT 3
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 25
25109: PUSH
25110: LD_INT 9
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 101
25119: PUSH
25120: LD_INT 2
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: LIST
25131: PPUSH
25132: CALL_OW 69
25136: PUSH
25137: LD_INT 1
25139: ARRAY
25140: PPUSH
25141: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
25145: LD_EXP 34
25149: PPUSH
25150: LD_STRING DH-Rubazooka-1
25152: PPUSH
25153: CALL_OW 88
// DialogueOff ;
25157: CALL_OW 7
// end ;
25161: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
25162: LD_INT 19
25164: PPUSH
25165: LD_INT 22
25167: PUSH
25168: LD_INT 3
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PPUSH
25175: CALL_OW 70
25179: PUSH
25180: LD_EXP 28
25184: AND
25185: IFFALSE 25244
25187: GO 25189
25189: DISABLE
// begin DialogueOn ;
25190: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25194: LD_INT 19
25196: PPUSH
25197: LD_INT 22
25199: PUSH
25200: LD_INT 3
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PPUSH
25207: CALL_OW 70
25211: PPUSH
25212: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
25216: LD_EXP 34
25220: PPUSH
25221: LD_STRING DH-Ruattfirst-1
25223: PPUSH
25224: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
25228: LD_EXP 34
25232: PPUSH
25233: LD_STRING DH-Ruattfirst-2
25235: PPUSH
25236: CALL_OW 88
// DialogueOff ;
25240: CALL_OW 7
// end ;
25244: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
25245: LD_INT 19
25247: PPUSH
25248: LD_INT 22
25250: PUSH
25251: LD_INT 3
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PPUSH
25258: CALL_OW 70
25262: PUSH
25263: LD_EXP 28
25267: NOT
25268: AND
25269: IFFALSE 25316
25271: GO 25273
25273: DISABLE
// begin DialogueOn ;
25274: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25278: LD_INT 19
25280: PPUSH
25281: LD_INT 22
25283: PUSH
25284: LD_INT 3
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PPUSH
25291: CALL_OW 70
25295: PPUSH
25296: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
25300: LD_EXP 34
25304: PPUSH
25305: LD_STRING DH-Ruattnext-1
25307: PPUSH
25308: CALL_OW 88
// DialogueOff ;
25312: CALL_OW 7
// end ;
25316: END
// every 0 0$3 trigger IsDead ( Morozov ) and IsOk ( Omar ) do
25317: LD_EXP 53
25321: PPUSH
25322: CALL_OW 301
25326: PUSH
25327: LD_EXP 44
25331: PPUSH
25332: CALL_OW 302
25336: AND
25337: IFFALSE 25354
25339: GO 25341
25341: DISABLE
// SayRadio ( Omar , DOm-Morozov ) ;
25342: LD_EXP 44
25346: PPUSH
25347: LD_STRING DOm-Morozov
25349: PPUSH
25350: CALL_OW 94
25354: END
// every 0 0$1 trigger gameActive and GetResourceType ( GetBase ( arDepot ) , mat_oil ) <= 30 do
25355: LD_EXP 31
25359: PUSH
25360: LD_EXP 48
25364: PPUSH
25365: CALL_OW 274
25369: PPUSH
25370: LD_INT 2
25372: PPUSH
25373: CALL_OW 275
25377: PUSH
25378: LD_INT 30
25380: LESSEQUAL
25381: AND
25382: IFFALSE 25472
25384: GO 25386
25386: DISABLE
// begin wait ( 0 0$10 ) ;
25387: LD_INT 350
25389: PPUSH
25390: CALL_OW 67
// DialogueOn ;
25394: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
25398: LD_EXP 34
25402: PPUSH
25403: LD_STRING DH-Fuel-1
25405: PPUSH
25406: CALL_OW 88
// if IsOk ( Givi ) then
25410: LD_EXP 35
25414: PPUSH
25415: CALL_OW 302
25419: IFFALSE 25457
// begin Say ( Givi , DG-Fuel-2 ) ;
25421: LD_EXP 35
25425: PPUSH
25426: LD_STRING DG-Fuel-2
25428: PPUSH
25429: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
25433: LD_EXP 35
25437: PPUSH
25438: LD_STRING DG-Fuel-3
25440: PPUSH
25441: CALL_OW 88
// Say ( Givi , DG-Fuel-4 ) ;
25445: LD_EXP 35
25449: PPUSH
25450: LD_STRING DG-Fuel-4
25452: PPUSH
25453: CALL_OW 88
// end ; DialogueOff ;
25457: CALL_OW 7
// Query ( QOil ) ;
25461: LD_STRING QOil
25463: PPUSH
25464: CALL_OW 97
// GoForOil ( ) ;
25468: CALL 8766 0 0
// end ;
25472: END
// every 0 0$1 trigger ( leninSpotted and omarAttack ) or IsDead ( Morozov ) do
25473: LD_EXP 14
25477: PUSH
25478: LD_EXP 23
25482: AND
25483: PUSH
25484: LD_EXP 53
25488: PPUSH
25489: CALL_OW 301
25493: OR
25494: IFFALSE 25835
25496: GO 25498
25498: DISABLE
// begin if IsDead ( Morozov ) then
25499: LD_EXP 53
25503: PPUSH
25504: CALL_OW 301
25508: IFFALSE 25519
// wait ( 1 1$45 ) else
25510: LD_INT 3675
25512: PPUSH
25513: CALL_OW 67
25517: GO 25547
// wait ( [ 9 9$30 , 8 8$00 , 7 7$40 , 6 6$30 ] [ Difficulty ] ) ;
25519: LD_INT 19950
25521: PUSH
25522: LD_INT 16800
25524: PUSH
25525: LD_INT 16100
25527: PUSH
25528: LD_INT 13650
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: PUSH
25537: LD_OWVAR 67
25541: ARRAY
25542: PPUSH
25543: CALL_OW 67
// DialogueOn ;
25547: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
25551: LD_EXP 42
25555: PPUSH
25556: LD_STRING DShar-End-1
25558: PPUSH
25559: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
25563: LD_EXP 34
25567: PPUSH
25568: LD_STRING DH-End-2
25570: PPUSH
25571: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
25575: LD_EXP 42
25579: PPUSH
25580: LD_STRING DShar-End-3
25582: PPUSH
25583: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
25587: LD_EXP 34
25591: PPUSH
25592: LD_STRING DH-End-4
25594: PPUSH
25595: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
25599: LD_EXP 42
25603: PPUSH
25604: LD_STRING DShar-End-5
25606: PPUSH
25607: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
25611: LD_EXP 42
25615: PPUSH
25616: LD_STRING DShar-End-6
25618: PPUSH
25619: CALL_OW 94
// dwait ( 0 0$2 ) ;
25623: LD_INT 70
25625: PPUSH
25626: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
25630: LD_EXP 34
25634: PPUSH
25635: LD_STRING DH-End-7
25637: PPUSH
25638: CALL_OW 88
// DialogueOff ;
25642: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
25646: LD_STRING M6
25648: PPUSH
25649: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
25653: LD_INT 17
25655: PPUSH
25656: LD_INT 1
25658: PPUSH
25659: CALL_OW 424
// escapeAllowed := true ;
25663: LD_ADDR_EXP 24
25667: PUSH
25668: LD_INT 1
25670: ST_TO_ADDR
// wait ( 0 0$2 ) ;
25671: LD_INT 70
25673: PPUSH
25674: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
25678: LD_EXP 45
25682: PPUSH
25683: LD_STRING DKs-End-8
25685: PPUSH
25686: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
25690: LD_EXP 39
25694: PPUSH
25695: LD_STRING DK-End-10
25697: PPUSH
25698: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
25702: LD_EXP 45
25706: PPUSH
25707: LD_STRING DKs-End-9
25709: PPUSH
25710: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
25714: LD_EXP 41
25718: PPUSH
25719: LD_STRING DMar-End-11
25721: PPUSH
25722: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
25726: LD_STRING 05_DrugsTested
25728: PPUSH
25729: LD_EXP 1
25733: PPUSH
25734: CALL_OW 30
25738: IFFALSE 25752
// Say ( Mike , DM-End-12 ) ;
25740: LD_EXP 36
25744: PPUSH
25745: LD_STRING DM-End-12
25747: PPUSH
25748: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
25752: LD_EXP 43
25756: PPUSH
25757: LD_STRING DO-End-13
25759: PPUSH
25760: CALL_OW 88
// if IsOk ( Sophia ) then
25764: LD_EXP 40
25768: PPUSH
25769: CALL_OW 302
25773: IFFALSE 25799
// begin Say ( Sophia , DS-End-15 ) ;
25775: LD_EXP 40
25779: PPUSH
25780: LD_STRING DS-End-15
25782: PPUSH
25783: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
25787: LD_EXP 39
25791: PPUSH
25792: LD_STRING DK-End-16
25794: PPUSH
25795: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
25799: LD_EXP 35
25803: PPUSH
25804: LD_STRING DG-End-17
25806: PPUSH
25807: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
25811: LD_EXP 35
25815: PPUSH
25816: LD_STRING DG-End-18
25818: PPUSH
25819: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
25823: LD_EXP 35
25827: PPUSH
25828: LD_STRING DG-End-19
25830: PPUSH
25831: CALL_OW 88
// end ;
25835: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
25836: LD_EXP 24
25840: IFFALSE 25979
25842: GO 25844
25844: DISABLE
25845: LD_INT 0
25847: PPUSH
25848: PPUSH
// begin repeat wait ( 0 0$1 ) ;
25849: LD_INT 35
25851: PPUSH
25852: CALL_OW 67
// display_strings := [ #X106-2 , escapeTimer ] ;
25856: LD_ADDR_OWVAR 47
25860: PUSH
25861: LD_STRING #X106-2
25863: PUSH
25864: LD_EXP 25
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
25873: LD_ADDR_EXP 25
25877: PUSH
25878: LD_EXP 25
25882: PUSH
25883: LD_INT 35
25885: MINUS
25886: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
25887: LD_ADDR_VAR 0 2
25891: PUSH
25892: LD_INT 17
25894: PPUSH
25895: LD_INT 22
25897: PUSH
25898: LD_INT 2
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 21
25907: PUSH
25908: LD_INT 1
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 23
25917: PUSH
25918: LD_INT 2
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: LIST
25929: PPUSH
25930: CALL_OW 71
25934: ST_TO_ADDR
// if not outsiders then
25935: LD_VAR 0 2
25939: NOT
25940: IFFALSE 25956
// begin escapeAllowed := false ;
25942: LD_ADDR_EXP 24
25946: PUSH
25947: LD_INT 0
25949: ST_TO_ADDR
// MissionWin ;
25950: CALL 25982 0 0
// exit ;
25954: GO 25979
// end ; if escapeTimer <= 0 0$00 then
25956: LD_EXP 25
25960: PUSH
25961: LD_INT 0
25963: LESSEQUAL
25964: IFFALSE 25975
// begin YouLost ( TimeOut ) ;
25966: LD_STRING TimeOut
25968: PPUSH
25969: CALL_OW 104
// exit ;
25973: GO 25979
// end ; until false ;
25975: LD_INT 0
25977: IFFALSE 25849
// end ;
25979: PPOPN 2
25981: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
25982: LD_INT 0
25984: PPUSH
25985: PPUSH
25986: PPUSH
25987: PPUSH
25988: PPUSH
// if tick <= 55 55$00 then
25989: LD_OWVAR 1
25993: PUSH
25994: LD_INT 115500
25996: LESSEQUAL
25997: IFFALSE 26006
// SetAchievement ( ACH_HSPEED_6 ) ;
25999: LD_STRING ACH_HSPEED_6
26001: PPUSH
26002: CALL_OW 543
// Say ( Heike , DH-End-20 ) ;
26006: LD_EXP 34
26010: PPUSH
26011: LD_STRING DH-End-20
26013: PPUSH
26014: CALL_OW 88
// if rolfDied then
26018: LD_EXP 13
26022: IFFALSE 26037
// AddMedal ( med1 , - 1 ) else
26024: LD_STRING med1
26026: PPUSH
26027: LD_INT 1
26029: NEG
26030: PPUSH
26031: CALL_OW 101
26035: GO 26067
// if not canRolfJoin then
26037: LD_EXP 29
26041: NOT
26042: IFFALSE 26057
// AddMedal ( med1 , - 2 ) else
26044: LD_STRING med1
26046: PPUSH
26047: LD_INT 2
26049: NEG
26050: PPUSH
26051: CALL_OW 101
26055: GO 26067
// AddMedal ( med1 , 1 ) ;
26057: LD_STRING med1
26059: PPUSH
26060: LD_INT 1
26062: PPUSH
26063: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
26067: LD_EXP 22
26071: PUSH
26072: LD_EXP 16
26076: AND
26077: IFFALSE 26091
// AddMedal ( med2 , 1 ) else
26079: LD_STRING med2
26081: PPUSH
26082: LD_INT 1
26084: PPUSH
26085: CALL_OW 101
26089: GO 26140
// if omarHasVehicles then
26091: LD_EXP 22
26095: IFFALSE 26110
// AddMedal ( med2 , - 1 ) else
26097: LD_STRING med2
26099: PPUSH
26100: LD_INT 1
26102: NEG
26103: PPUSH
26104: CALL_OW 101
26108: GO 26140
// if rolfHasVehicles then
26110: LD_EXP 16
26114: IFFALSE 26129
// AddMedal ( med2 , - 2 ) else
26116: LD_STRING med2
26118: PPUSH
26119: LD_INT 2
26121: NEG
26122: PPUSH
26123: CALL_OW 101
26127: GO 26140
// AddMedal ( med2 , - 3 ) ;
26129: LD_STRING med2
26131: PPUSH
26132: LD_INT 3
26134: NEG
26135: PPUSH
26136: CALL_OW 101
// if ruLoseCounter >= [ 30 , 45 , 50 , 60 ] [ Difficulty ] and heikeLoseCounter = 0 then
26140: LD_EXP 5
26144: PUSH
26145: LD_INT 30
26147: PUSH
26148: LD_INT 45
26150: PUSH
26151: LD_INT 50
26153: PUSH
26154: LD_INT 60
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: PUSH
26163: LD_OWVAR 67
26167: ARRAY
26168: GREATEREQUAL
26169: PUSH
26170: LD_EXP 26
26174: PUSH
26175: LD_INT 0
26177: EQUAL
26178: AND
26179: IFFALSE 26193
// AddMedal ( med3 , 1 ) else
26181: LD_STRING med3
26183: PPUSH
26184: LD_INT 1
26186: PPUSH
26187: CALL_OW 101
26191: GO 26223
// if heikeLoseCounter then
26193: LD_EXP 26
26197: IFFALSE 26212
// AddMedal ( med3 , - 2 ) else
26199: LD_STRING med3
26201: PPUSH
26202: LD_INT 2
26204: NEG
26205: PPUSH
26206: CALL_OW 101
26210: GO 26223
// AddMedal ( med3 , - 1 ) ;
26212: LD_STRING med3
26214: PPUSH
26215: LD_INT 1
26217: NEG
26218: PPUSH
26219: CALL_OW 101
// GiveMedals ( MAIN ) ;
26223: LD_STRING MAIN
26225: PPUSH
26226: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
26230: LD_INT 22
26232: PUSH
26233: LD_INT 2
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: LD_INT 23
26242: PUSH
26243: LD_INT 2
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 21
26252: PUSH
26253: LD_INT 1
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: LIST
26264: PPUSH
26265: CALL_OW 69
26269: PPUSH
26270: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
26274: LD_EXP 34
26278: PPUSH
26279: LD_STRING 06_Heike
26281: PPUSH
26282: CALL_OW 38
// if Aviradze then
26286: LD_EXP 46
26290: IFFALSE 26304
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
26292: LD_EXP 46
26296: PPUSH
26297: LD_STRING 06_Aviradze
26299: PPUSH
26300: CALL_OW 38
// if Ibrahim then
26304: LD_EXP 37
26308: IFFALSE 26322
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
26310: LD_EXP 37
26314: PPUSH
26315: LD_STRING 06_Ibrahim
26317: PPUSH
26318: CALL_OW 38
// if Kamil then
26322: LD_EXP 38
26326: IFFALSE 26340
// SaveCharacters ( Kamil , 06_Kamil ) ;
26328: LD_EXP 38
26332: PPUSH
26333: LD_STRING 06_Kamil
26335: PPUSH
26336: CALL_OW 38
// if Sophia then
26340: LD_EXP 40
26344: IFFALSE 26358
// SaveCharacters ( Sophia , 06_Sophia ) ;
26346: LD_EXP 40
26350: PPUSH
26351: LD_STRING 06_Sophia
26353: PPUSH
26354: CALL_OW 38
// if Kaia then
26358: LD_EXP 39
26362: IFFALSE 26376
// SaveCharacters ( Kaia , 06_Kaia ) ;
26364: LD_EXP 39
26368: PPUSH
26369: LD_STRING 06_Kaia
26371: PPUSH
26372: CALL_OW 38
// if Givi then
26376: LD_EXP 35
26380: IFFALSE 26394
// SaveCharacters ( Givi , 06_Givi ) ;
26382: LD_EXP 35
26386: PPUSH
26387: LD_STRING 06_Givi
26389: PPUSH
26390: CALL_OW 38
// if Olaf then
26394: LD_EXP 43
26398: IFFALSE 26412
// SaveCharacters ( Olaf , 06_Olaf ) ;
26400: LD_EXP 43
26404: PPUSH
26405: LD_STRING 06_Olaf
26407: PPUSH
26408: CALL_OW 38
// if Mike then
26412: LD_EXP 36
26416: IFFALSE 26430
// SaveCharacters ( Mike , 06_Mike ) ;
26418: LD_EXP 36
26422: PPUSH
26423: LD_STRING 06_Mike
26425: PPUSH
26426: CALL_OW 38
// if Markov then
26430: LD_EXP 41
26434: IFFALSE 26448
// SaveCharacters ( Markov , 06_Markov ) ;
26436: LD_EXP 41
26440: PPUSH
26441: LD_STRING 06_Markov
26443: PPUSH
26444: CALL_OW 38
// if Kurt then
26448: LD_EXP 45
26452: IFFALSE 26466
// SaveCharacters ( Kurt , 06_Kurt ) ;
26454: LD_EXP 45
26458: PPUSH
26459: LD_STRING 06_Kurt
26461: PPUSH
26462: CALL_OW 38
// if heikeSecondSquad then
26466: LD_EXP 49
26470: IFFALSE 26484
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
26472: LD_EXP 49
26476: PPUSH
26477: LD_STRING 06_others
26479: PPUSH
26480: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
26484: LD_ADDR_VAR 0 3
26488: PUSH
26489: LD_INT 22
26491: PUSH
26492: LD_INT 2
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 23
26501: PUSH
26502: LD_INT 0
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PPUSH
26513: CALL_OW 69
26517: ST_TO_ADDR
// if tmp then
26518: LD_VAR 0 3
26522: IFFALSE 26536
// SaveCharacters ( tmp , 06_apes ) ;
26524: LD_VAR 0 3
26528: PPUSH
26529: LD_STRING 06_apes
26531: PPUSH
26532: CALL_OW 38
// if Rolf then
26536: LD_EXP 47
26540: IFFALSE 26591
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
26542: LD_EXP 47
26546: PPUSH
26547: LD_STRING 06_Rolf
26549: PPUSH
26550: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
26554: LD_STRING enableBioCharacter(BIO_ROLF)
26556: PPUSH
26557: CALL_OW 559
// if rolfSquad diff Rolf then
26561: LD_EXP 51
26565: PUSH
26566: LD_EXP 47
26570: DIFF
26571: IFFALSE 26591
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
26573: LD_EXP 51
26577: PUSH
26578: LD_EXP 47
26582: DIFF
26583: PPUSH
26584: LD_STRING 06_RolfSquad
26586: PPUSH
26587: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
26591: LD_ADDR_VAR 0 3
26595: PUSH
26596: LD_INT 17
26598: PPUSH
26599: LD_INT 21
26601: PUSH
26602: LD_INT 2
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PPUSH
26609: CALL_OW 70
26613: ST_TO_ADDR
// if tmp then
26614: LD_VAR 0 3
26618: IFFALSE 26912
// begin tmp2 := [ ] ;
26620: LD_ADDR_VAR 0 4
26624: PUSH
26625: EMPTY
26626: ST_TO_ADDR
// for i in tmp do
26627: LD_ADDR_VAR 0 2
26631: PUSH
26632: LD_VAR 0 3
26636: PUSH
26637: FOR_IN
26638: IFFALSE 26898
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
26640: LD_VAR 0 2
26644: PPUSH
26645: CALL_OW 264
26649: PUSH
26650: LD_INT 32
26652: PUSH
26653: LD_INT 12
26655: PUSH
26656: LD_INT 51
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: LIST
26663: IN
26664: IFFALSE 26801
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
26666: LD_ADDR_VAR 0 5
26670: PUSH
26671: LD_VAR 0 2
26675: PPUSH
26676: LD_INT 1
26678: PPUSH
26679: CALL_OW 289
26683: PUSH
26684: LD_VAR 0 2
26688: PPUSH
26689: LD_INT 2
26691: PPUSH
26692: CALL_OW 289
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
26701: LD_ADDR_VAR 0 4
26705: PUSH
26706: LD_VAR 0 4
26710: PPUSH
26711: LD_VAR 0 4
26715: PUSH
26716: LD_INT 1
26718: PLUS
26719: PPUSH
26720: LD_VAR 0 2
26724: PPUSH
26725: CALL_OW 265
26729: PUSH
26730: LD_VAR 0 2
26734: PPUSH
26735: CALL_OW 262
26739: PUSH
26740: LD_VAR 0 2
26744: PPUSH
26745: CALL_OW 263
26749: PUSH
26750: LD_VAR 0 2
26754: PPUSH
26755: CALL_OW 264
26759: PUSH
26760: LD_VAR 0 2
26764: PPUSH
26765: CALL_OW 248
26769: PUSH
26770: LD_VAR 0 2
26774: PPUSH
26775: CALL_OW 256
26779: PUSH
26780: LD_VAR 0 5
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: PPUSH
26794: CALL_OW 1
26798: ST_TO_ADDR
// end else
26799: GO 26896
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
26801: LD_ADDR_VAR 0 4
26805: PUSH
26806: LD_VAR 0 4
26810: PPUSH
26811: LD_VAR 0 4
26815: PUSH
26816: LD_INT 1
26818: PLUS
26819: PPUSH
26820: LD_VAR 0 2
26824: PPUSH
26825: CALL_OW 265
26829: PUSH
26830: LD_VAR 0 2
26834: PPUSH
26835: CALL_OW 262
26839: PUSH
26840: LD_VAR 0 2
26844: PPUSH
26845: CALL_OW 263
26849: PUSH
26850: LD_VAR 0 2
26854: PPUSH
26855: CALL_OW 264
26859: PUSH
26860: LD_VAR 0 2
26864: PPUSH
26865: CALL_OW 248
26869: PUSH
26870: LD_VAR 0 2
26874: PPUSH
26875: CALL_OW 256
26879: PUSH
26880: EMPTY
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: PPUSH
26891: CALL_OW 1
26895: ST_TO_ADDR
26896: GO 26637
26898: POP
26899: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
26900: LD_VAR 0 4
26904: PPUSH
26905: LD_STRING 06_Vehicles
26907: PPUSH
26908: CALL_OW 39
// end ; YouWin ;
26912: CALL_OW 103
// end ; end_of_file
26916: LD_VAR 0 1
26920: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
26921: LD_INT 0
26923: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
26924: LD_VAR 0 1
26928: PPUSH
26929: LD_VAR 0 2
26933: PPUSH
26934: CALL 86724 0 2
// if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
26938: LD_VAR 0 1
26942: PPUSH
26943: CALL_OW 255
26947: PUSH
26948: LD_INT 2
26950: EQUAL
26951: PUSH
26952: LD_OWVAR 52
26956: AND
26957: PUSH
26958: LD_VAR 0 1
26962: PPUSH
26963: CALL_OW 263
26967: PUSH
26968: LD_INT 1
26970: EQUAL
26971: AND
26972: IFFALSE 27027
// begin driver := IsDrivenBy ( vehicle ) ;
26974: LD_ADDR_VAR 0 3
26978: PUSH
26979: LD_VAR 0 1
26983: PPUSH
26984: CALL_OW 311
26988: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
26989: LD_VAR 0 1
26993: PPUSH
26994: LD_INT 211
26996: PPUSH
26997: LD_INT 101
26999: PPUSH
27000: CALL_OW 111
// AddComExitVehicle ( driver ) ;
27004: LD_VAR 0 3
27008: PPUSH
27009: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27013: LD_VAR 0 3
27017: PPUSH
27018: LD_VAR 0 2
27022: PPUSH
27023: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
27027: LD_VAR 0 1
27031: PPUSH
27032: CALL_OW 255
27036: PUSH
27037: LD_INT 3
27039: EQUAL
27040: IFFALSE 27071
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
27042: LD_ADDR_EXP 60
27046: PUSH
27047: LD_EXP 60
27051: PPUSH
27052: LD_EXP 60
27056: PUSH
27057: LD_INT 1
27059: PLUS
27060: PPUSH
27061: LD_VAR 0 1
27065: PPUSH
27066: CALL_OW 1
27070: ST_TO_ADDR
// end ;
27071: PPOPN 3
27073: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
27074: LD_VAR 0 1
27078: PPUSH
27079: CALL_OW 255
27083: PUSH
27084: LD_INT 8
27086: EQUAL
27087: PUSH
27088: LD_VAR 0 1
27092: PPUSH
27093: CALL_OW 266
27097: PUSH
27098: LD_INT 4
27100: EQUAL
27101: AND
27102: IFFALSE 27113
// ComUpgrade ( b ) ;
27104: LD_VAR 0 1
27108: PPUSH
27109: CALL_OW 146
// end ;
27113: PPOPN 1
27115: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
27116: LD_VAR 0 1
27120: PPUSH
27121: CALL 86604 0 1
// if un = Heike then
27125: LD_VAR 0 1
27129: PUSH
27130: LD_EXP 34
27134: EQUAL
27135: IFFALSE 27144
// YouLost ( Heike ) ;
27137: LD_STRING Heike
27139: PPUSH
27140: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] ] ) then
27144: LD_VAR 0 1
27148: PUSH
27149: LD_INT 22
27151: PUSH
27152: LD_INT 2
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 23
27161: PUSH
27162: LD_INT 2
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PPUSH
27173: CALL_OW 69
27177: IN
27178: IFFALSE 27194
// heikeLoseCounter := heikeLoseCounter + 1 ;
27180: LD_ADDR_EXP 26
27184: PUSH
27185: LD_EXP 26
27189: PUSH
27190: LD_INT 1
27192: PLUS
27193: ST_TO_ADDR
// if un = arDepot then
27194: LD_VAR 0 1
27198: PUSH
27199: LD_EXP 48
27203: EQUAL
27204: IFFALSE 27213
// YouLost ( Base ) ;
27206: LD_STRING Base
27208: PPUSH
27209: CALL_OW 104
// if un = Rolf then
27213: LD_VAR 0 1
27217: PUSH
27218: LD_EXP 47
27222: EQUAL
27223: IFFALSE 27233
// rolfDied := true ;
27225: LD_ADDR_EXP 13
27229: PUSH
27230: LD_INT 1
27232: ST_TO_ADDR
// if un in rolfSquad then
27233: LD_VAR 0 1
27237: PUSH
27238: LD_EXP 51
27242: IN
27243: IFFALSE 27261
// rolfSquad := rolfSquad diff un ;
27245: LD_ADDR_EXP 51
27249: PUSH
27250: LD_EXP 51
27254: PUSH
27255: LD_VAR 0 1
27259: DIFF
27260: ST_TO_ADDR
// if un in omarSquad then
27261: LD_VAR 0 1
27265: PUSH
27266: LD_EXP 52
27270: IN
27271: IFFALSE 27289
// omarSquad := omarSquad diff un ;
27273: LD_ADDR_EXP 52
27277: PUSH
27278: LD_EXP 52
27282: PUSH
27283: LD_VAR 0 1
27287: DIFF
27288: ST_TO_ADDR
// if GetSide ( un ) = 3 then
27289: LD_VAR 0 1
27293: PPUSH
27294: CALL_OW 255
27298: PUSH
27299: LD_INT 3
27301: EQUAL
27302: IFFALSE 27318
// ruLoseCounter := ruLoseCounter + 1 ;
27304: LD_ADDR_EXP 5
27308: PUSH
27309: LD_EXP 5
27313: PUSH
27314: LD_INT 1
27316: PLUS
27317: ST_TO_ADDR
// if un in ruAttackers then
27318: LD_VAR 0 1
27322: PUSH
27323: LD_EXP 61
27327: IN
27328: IFFALSE 27346
// ruAttackers := ruAttackers diff un ;
27330: LD_ADDR_EXP 61
27334: PUSH
27335: LD_EXP 61
27339: PUSH
27340: LD_VAR 0 1
27344: DIFF
27345: ST_TO_ADDR
// end ;
27346: PPOPN 1
27348: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
27349: LD_INT 0
27351: PPUSH
27352: PPUSH
27353: PPUSH
27354: PPUSH
// begin if GetSide ( vehicle ) = 8 and rolfAttack then
27355: LD_VAR 0 2
27359: PPUSH
27360: CALL_OW 255
27364: PUSH
27365: LD_INT 8
27367: EQUAL
27368: PUSH
27369: LD_EXP 32
27373: AND
27374: IFFALSE 27391
// ComMoveXY ( un , 221 , 161 ) ;
27376: LD_VAR 0 1
27380: PPUSH
27381: LD_INT 221
27383: PPUSH
27384: LD_INT 161
27386: PPUSH
27387: CALL_OW 111
// if GetSide ( vehicle ) = 5 and omarAttack then
27391: LD_VAR 0 2
27395: PPUSH
27396: CALL_OW 255
27400: PUSH
27401: LD_INT 5
27403: EQUAL
27404: PUSH
27405: LD_EXP 23
27409: AND
27410: IFFALSE 27519
// begin ComMoveXY ( un , 333 , 233 ) ;
27412: LD_VAR 0 1
27416: PPUSH
27417: LD_INT 333
27419: PPUSH
27420: LD_INT 233
27422: PPUSH
27423: CALL_OW 111
// if not HexInfo ( 334 , 241 ) or not GetBType ( HexInfo ( 334 , 241 ) ) = b_armoury then
27427: LD_INT 334
27429: PPUSH
27430: LD_INT 241
27432: PPUSH
27433: CALL_OW 428
27437: NOT
27438: PUSH
27439: LD_INT 334
27441: PPUSH
27442: LD_INT 241
27444: PPUSH
27445: CALL_OW 428
27449: PPUSH
27450: CALL_OW 266
27454: PUSH
27455: LD_INT 4
27457: EQUAL
27458: NOT
27459: OR
27460: IFFALSE 27464
// exit ;
27462: GO 28044
// AddComEnterUnit ( un , HexInfo ( 334 , 241 ) ) ;
27464: LD_VAR 0 1
27468: PPUSH
27469: LD_INT 334
27471: PPUSH
27472: LD_INT 241
27474: PPUSH
27475: CALL_OW 428
27479: PPUSH
27480: CALL_OW 180
// AddComChangeProfession ( un , class_soldier ) ;
27484: LD_VAR 0 1
27488: PPUSH
27489: LD_INT 1
27491: PPUSH
27492: CALL_OW 183
// AddComExitBuilding ( un ) ;
27496: LD_VAR 0 1
27500: PPUSH
27501: CALL_OW 182
// AddComMoveUnit ( un , Omar ) ;
27505: LD_VAR 0 1
27509: PPUSH
27510: LD_EXP 44
27514: PPUSH
27515: CALL_OW 172
// end ; if GetSide ( un ) = 3 and not un in ruAttackers then
27519: LD_VAR 0 1
27523: PPUSH
27524: CALL_OW 255
27528: PUSH
27529: LD_INT 3
27531: EQUAL
27532: PUSH
27533: LD_VAR 0 1
27537: PUSH
27538: LD_EXP 61
27542: IN
27543: NOT
27544: AND
27545: IFFALSE 28044
// begin if not IsInArea ( un , ruMainBase ) then
27547: LD_VAR 0 1
27551: PPUSH
27552: LD_INT 10
27554: PPUSH
27555: CALL_OW 308
27559: NOT
27560: IFFALSE 27577
// ComMoveXY ( un , 62 , 98 ) ;
27562: LD_VAR 0 1
27566: PPUSH
27567: LD_INT 62
27569: PPUSH
27570: LD_INT 98
27572: PPUSH
27573: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27577: LD_INT 35
27579: PPUSH
27580: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
27584: LD_VAR 0 1
27588: PPUSH
27589: CALL_OW 302
27593: NOT
27594: PUSH
27595: LD_VAR 0 1
27599: PPUSH
27600: LD_INT 10
27602: PPUSH
27603: CALL_OW 308
27607: OR
27608: IFFALSE 27577
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
27610: LD_ADDR_EXP 59
27614: PUSH
27615: LD_EXP 59
27619: PPUSH
27620: LD_EXP 59
27624: PUSH
27625: LD_INT 1
27627: PLUS
27628: PPUSH
27629: LD_VAR 0 1
27633: PPUSH
27634: CALL_OW 1
27638: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
27639: LD_ADDR_VAR 0 8
27643: PUSH
27644: LD_INT 72
27646: PUSH
27647: LD_INT 12
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: ST_TO_ADDR
// if tmp then
27654: LD_VAR 0 8
27658: IFFALSE 27773
// for i in tmp do
27660: LD_ADDR_VAR 0 5
27664: PUSH
27665: LD_VAR 0 8
27669: PUSH
27670: FOR_IN
27671: IFFALSE 27771
// if UnitsInside ( i ) < 6 then
27673: LD_VAR 0 5
27677: PPUSH
27678: CALL_OW 313
27682: PUSH
27683: LD_INT 6
27685: LESS
27686: IFFALSE 27769
// begin AddComEnterUnit ( un , i ) ;
27688: LD_VAR 0 1
27692: PPUSH
27693: LD_VAR 0 5
27697: PPUSH
27698: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
27702: LD_VAR 0 8
27706: PPUSH
27707: LD_INT 22
27709: PUSH
27710: LD_INT 23
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 1
27719: PPUSH
27720: LD_INT 2
27722: PPUSH
27723: CALL_OW 12
27727: ARRAY
27728: PPUSH
27729: LD_INT 1
27731: PPUSH
27732: LD_INT 1
27734: PPUSH
27735: LD_INT 44
27737: PUSH
27738: LD_INT 46
27740: PUSH
27741: LD_INT 47
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: LIST
27748: PUSH
27749: LD_INT 1
27751: PPUSH
27752: LD_INT 3
27754: PPUSH
27755: CALL_OW 12
27759: ARRAY
27760: PPUSH
27761: CALL_OW 185
// exit ;
27765: POP
27766: POP
27767: GO 28044
// end ;
27769: GO 27670
27771: POP
27772: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
27773: LD_ADDR_VAR 0 8
27777: PUSH
27778: LD_INT 10
27780: PPUSH
27781: LD_INT 22
27783: PUSH
27784: LD_INT 3
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 50
27793: PUSH
27794: EMPTY
27795: LIST
27796: PUSH
27797: LD_INT 2
27799: PUSH
27800: LD_INT 30
27802: PUSH
27803: LD_INT 4
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: LD_INT 30
27812: PUSH
27813: LD_INT 5
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 30
27822: PUSH
27823: LD_INT 32
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 30
27832: PUSH
27833: LD_INT 31
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: LIST
27851: PPUSH
27852: CALL_OW 70
27856: ST_TO_ADDR
// if not tmp then
27857: LD_VAR 0 8
27861: NOT
27862: IFFALSE 27881
// begin ComMoveXY ( un , 83 , 133 ) ;
27864: LD_VAR 0 1
27868: PPUSH
27869: LD_INT 83
27871: PPUSH
27872: LD_INT 133
27874: PPUSH
27875: CALL_OW 111
// exit ;
27879: GO 28044
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
27881: LD_ADDR_VAR 0 6
27885: PUSH
27886: LD_VAR 0 1
27890: PPUSH
27891: LD_VAR 0 8
27895: PPUSH
27896: LD_INT 1
27898: PPUSH
27899: LD_INT 1
27901: PPUSH
27902: CALL 34798 0 4
27906: PUSH
27907: FOR_IN
27908: IFFALSE 28042
// begin case GetBType ( b ) of b_armoury , b_barracks :
27910: LD_VAR 0 6
27914: PPUSH
27915: CALL_OW 266
27919: PUSH
27920: LD_INT 4
27922: DOUBLE
27923: EQUAL
27924: IFTRUE 27934
27926: LD_INT 5
27928: DOUBLE
27929: EQUAL
27930: IFTRUE 27934
27932: GO 27945
27934: POP
// p := 6 ; b_breastwork , b_bunker :
27935: LD_ADDR_VAR 0 7
27939: PUSH
27940: LD_INT 6
27942: ST_TO_ADDR
27943: GO 27971
27945: LD_INT 31
27947: DOUBLE
27948: EQUAL
27949: IFTRUE 27959
27951: LD_INT 32
27953: DOUBLE
27954: EQUAL
27955: IFTRUE 27959
27957: GO 27970
27959: POP
// p := 1 ; end ;
27960: LD_ADDR_VAR 0 7
27964: PUSH
27965: LD_INT 1
27967: ST_TO_ADDR
27968: GO 27971
27970: POP
// if UnitsInside ( b ) < p then
27971: LD_VAR 0 6
27975: PPUSH
27976: CALL_OW 313
27980: PUSH
27981: LD_VAR 0 7
27985: LESS
27986: IFFALSE 28040
// begin ComEnterUnit ( un , b ) ;
27988: LD_VAR 0 1
27992: PPUSH
27993: LD_VAR 0 6
27997: PPUSH
27998: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
28002: LD_VAR 0 6
28006: PPUSH
28007: CALL_OW 266
28011: PUSH
28012: LD_INT 4
28014: PUSH
28015: LD_INT 5
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: IN
28022: IFFALSE 28036
// AddComChangeProfession ( un , class_soldier ) ;
28024: LD_VAR 0 1
28028: PPUSH
28029: LD_INT 1
28031: PPUSH
28032: CALL_OW 183
// exit ;
28036: POP
28037: POP
28038: GO 28044
// end ; end ;
28040: GO 27907
28042: POP
28043: POP
// end ; end ;
28044: PPOPN 8
28046: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
28047: LD_INT 0
28049: PPUSH
28050: PPUSH
28051: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
28052: LD_VAR 0 2
28056: PPUSH
28057: CALL_OW 255
28061: PUSH
28062: LD_INT 3
28064: EQUAL
28065: PUSH
28066: LD_VAR 0 2
28070: PPUSH
28071: CALL_OW 257
28075: PUSH
28076: LD_INT 1
28078: EQUAL
28079: AND
28080: PUSH
28081: LD_VAR 0 2
28085: PUSH
28086: LD_EXP 59
28090: IN
28091: NOT
28092: AND
28093: IFFALSE 28406
// begin ComMoveToArea ( un , ruMainBase ) ;
28095: LD_VAR 0 2
28099: PPUSH
28100: LD_INT 10
28102: PPUSH
28103: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
28107: LD_INT 35
28109: PPUSH
28110: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
28114: LD_VAR 0 2
28118: PPUSH
28119: CALL_OW 302
28123: NOT
28124: PUSH
28125: LD_VAR 0 2
28129: PPUSH
28130: LD_INT 10
28132: PPUSH
28133: CALL_OW 308
28137: OR
28138: IFFALSE 28107
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
28140: LD_ADDR_EXP 59
28144: PUSH
28145: LD_EXP 59
28149: PPUSH
28150: LD_EXP 59
28154: PUSH
28155: LD_INT 1
28157: PLUS
28158: PPUSH
28159: LD_VAR 0 2
28163: PPUSH
28164: CALL_OW 1
28168: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28169: LD_ADDR_VAR 0 4
28173: PUSH
28174: LD_INT 10
28176: PPUSH
28177: LD_INT 22
28179: PUSH
28180: LD_INT 3
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 50
28189: PUSH
28190: EMPTY
28191: LIST
28192: PUSH
28193: LD_INT 2
28195: PUSH
28196: LD_INT 30
28198: PUSH
28199: LD_INT 4
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 30
28208: PUSH
28209: LD_INT 5
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 30
28218: PUSH
28219: LD_INT 32
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 30
28228: PUSH
28229: LD_INT 31
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: LIST
28247: PPUSH
28248: CALL_OW 70
28252: ST_TO_ADDR
// if not tmp then
28253: LD_VAR 0 4
28257: NOT
28258: IFFALSE 28277
// begin ComMoveXY ( un , 83 , 133 ) ;
28260: LD_VAR 0 2
28264: PPUSH
28265: LD_INT 83
28267: PPUSH
28268: LD_INT 133
28270: PPUSH
28271: CALL_OW 111
// exit ;
28275: GO 28655
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
28277: LD_ADDR_VAR 0 5
28281: PUSH
28282: LD_VAR 0 2
28286: PPUSH
28287: LD_VAR 0 4
28291: PPUSH
28292: LD_INT 1
28294: PPUSH
28295: LD_INT 1
28297: PPUSH
28298: CALL 34798 0 4
28302: PUSH
28303: FOR_IN
28304: IFFALSE 28404
// begin case GetBType ( b ) of b_armoury , b_barracks :
28306: LD_VAR 0 5
28310: PPUSH
28311: CALL_OW 266
28315: PUSH
28316: LD_INT 4
28318: DOUBLE
28319: EQUAL
28320: IFTRUE 28330
28322: LD_INT 5
28324: DOUBLE
28325: EQUAL
28326: IFTRUE 28330
28328: GO 28341
28330: POP
// p := 6 ; b_breastwork , b_bunker :
28331: LD_ADDR_VAR 0 3
28335: PUSH
28336: LD_INT 6
28338: ST_TO_ADDR
28339: GO 28367
28341: LD_INT 31
28343: DOUBLE
28344: EQUAL
28345: IFTRUE 28355
28347: LD_INT 32
28349: DOUBLE
28350: EQUAL
28351: IFTRUE 28355
28353: GO 28366
28355: POP
// p := 1 ; end ;
28356: LD_ADDR_VAR 0 3
28360: PUSH
28361: LD_INT 1
28363: ST_TO_ADDR
28364: GO 28367
28366: POP
// if UnitsInside ( b ) < p then
28367: LD_VAR 0 5
28371: PPUSH
28372: CALL_OW 313
28376: PUSH
28377: LD_VAR 0 3
28381: LESS
28382: IFFALSE 28402
// begin ComEnterUnit ( un , b ) ;
28384: LD_VAR 0 2
28388: PPUSH
28389: LD_VAR 0 5
28393: PPUSH
28394: CALL_OW 120
// exit ;
28398: POP
28399: POP
28400: GO 28655
// end ; end ;
28402: GO 28303
28404: POP
28405: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
28406: LD_VAR 0 2
28410: PUSH
28411: LD_EXP 59
28415: IN
28416: PUSH
28417: LD_VAR 0 2
28421: PPUSH
28422: CALL_OW 257
28426: PUSH
28427: LD_INT 1
28429: EQUAL
28430: AND
28431: IFFALSE 28655
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28433: LD_ADDR_VAR 0 4
28437: PUSH
28438: LD_INT 10
28440: PPUSH
28441: LD_INT 22
28443: PUSH
28444: LD_INT 3
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 50
28453: PUSH
28454: EMPTY
28455: LIST
28456: PUSH
28457: LD_INT 2
28459: PUSH
28460: LD_INT 30
28462: PUSH
28463: LD_INT 4
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: LD_INT 30
28472: PUSH
28473: LD_INT 5
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 30
28482: PUSH
28483: LD_INT 32
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 30
28492: PUSH
28493: LD_INT 31
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: LIST
28511: PPUSH
28512: CALL_OW 70
28516: ST_TO_ADDR
// if not tmp then
28517: LD_VAR 0 4
28521: NOT
28522: IFFALSE 28526
// exit ;
28524: GO 28655
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
28526: LD_ADDR_VAR 0 5
28530: PUSH
28531: LD_VAR 0 2
28535: PPUSH
28536: LD_VAR 0 4
28540: PPUSH
28541: LD_INT 1
28543: PPUSH
28544: LD_INT 1
28546: PPUSH
28547: CALL 34798 0 4
28551: PUSH
28552: FOR_IN
28553: IFFALSE 28653
// begin case GetBType ( b ) of b_armoury , b_barracks :
28555: LD_VAR 0 5
28559: PPUSH
28560: CALL_OW 266
28564: PUSH
28565: LD_INT 4
28567: DOUBLE
28568: EQUAL
28569: IFTRUE 28579
28571: LD_INT 5
28573: DOUBLE
28574: EQUAL
28575: IFTRUE 28579
28577: GO 28590
28579: POP
// p := 6 ; b_breastwork , b_bunker :
28580: LD_ADDR_VAR 0 3
28584: PUSH
28585: LD_INT 6
28587: ST_TO_ADDR
28588: GO 28616
28590: LD_INT 31
28592: DOUBLE
28593: EQUAL
28594: IFTRUE 28604
28596: LD_INT 32
28598: DOUBLE
28599: EQUAL
28600: IFTRUE 28604
28602: GO 28615
28604: POP
// p := 1 ; end ;
28605: LD_ADDR_VAR 0 3
28609: PUSH
28610: LD_INT 1
28612: ST_TO_ADDR
28613: GO 28616
28615: POP
// if UnitsInside ( b ) < p then
28616: LD_VAR 0 5
28620: PPUSH
28621: CALL_OW 313
28625: PUSH
28626: LD_VAR 0 3
28630: LESS
28631: IFFALSE 28651
// begin ComEnterUnit ( un , b ) ;
28633: LD_VAR 0 2
28637: PPUSH
28638: LD_VAR 0 5
28642: PPUSH
28643: CALL_OW 120
// exit ;
28647: POP
28648: POP
28649: GO 28655
// end ; end ;
28651: GO 28552
28653: POP
28654: POP
// end ; end ;
28655: PPOPN 5
28657: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
28658: LD_VAR 0 1
28662: PUSH
28663: LD_INT 2
28665: EQUAL
28666: PUSH
28667: LD_VAR 0 2
28671: PUSH
28672: LD_INT 5
28674: PUSH
28675: LD_INT 8
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: IN
28682: AND
28683: IFFALSE 28692
// YouLost ( FriendlyFire ) ;
28685: LD_STRING FriendlyFire
28687: PPUSH
28688: CALL_OW 104
// end ;
28692: PPOPN 2
28694: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
28695: LD_VAR 0 1
28699: PPUSH
28700: CALL_OW 255
28704: PUSH
28705: LD_INT 8
28707: EQUAL
28708: PUSH
28709: LD_VAR 0 1
28713: PPUSH
28714: CALL_OW 266
28718: PUSH
28719: LD_INT 5
28721: EQUAL
28722: AND
28723: IFFALSE 28737
// SetClass ( unit , class_mortar ) ;
28725: LD_VAR 0 2
28729: PPUSH
28730: LD_INT 8
28732: PPUSH
28733: CALL_OW 336
// end ; end_of_file
28737: PPOPN 2
28739: END
// every 0 0$35 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 400 , 320 , 280 , 250 ] [ Difficulty ] do
28740: LD_INT 6
28742: PPUSH
28743: LD_INT 1
28745: PPUSH
28746: CALL_OW 287
28750: PUSH
28751: LD_INT 400
28753: PUSH
28754: LD_INT 320
28756: PUSH
28757: LD_INT 280
28759: PUSH
28760: LD_INT 250
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: PUSH
28769: LD_OWVAR 67
28773: ARRAY
28774: LESS
28775: IFFALSE 28802
28777: GO 28779
28779: DISABLE
// begin enable ;
28780: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
28781: LD_INT 1
28783: PPUSH
28784: LD_INT 5
28786: PPUSH
28787: CALL_OW 12
28791: PPUSH
28792: LD_INT 6
28794: PPUSH
28795: LD_INT 1
28797: PPUSH
28798: CALL_OW 55
// end ;
28802: END
// every 0 0$25 trigger Prob ( 50 ) and tick < [ 28 28$00 , 27 27$00 , 26 26$00 , 25 25$00 ] [ Difficulty ] do
28803: LD_INT 50
28805: PPUSH
28806: CALL_OW 13
28810: PUSH
28811: LD_OWVAR 1
28815: PUSH
28816: LD_INT 58800
28818: PUSH
28819: LD_INT 56700
28821: PUSH
28822: LD_INT 54600
28824: PUSH
28825: LD_INT 52500
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: PUSH
28834: LD_OWVAR 67
28838: ARRAY
28839: LESS
28840: AND
28841: IFFALSE 28883
28843: GO 28845
28845: DISABLE
// begin enable ;
28846: ENABLE
// wait ( rand ( 0 0$1 , 0 0$10 ) ) ;
28847: LD_INT 35
28849: PPUSH
28850: LD_INT 350
28852: PPUSH
28853: CALL_OW 12
28857: PPUSH
28858: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , southCrates , true ) ;
28862: LD_INT 1
28864: PPUSH
28865: LD_INT 5
28867: PPUSH
28868: CALL_OW 12
28872: PPUSH
28873: LD_INT 21
28875: PPUSH
28876: LD_INT 1
28878: PPUSH
28879: CALL_OW 55
// end ; end_of_file
28883: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
28884: LD_EXP 18
28888: PUSH
28889: LD_EXP 20
28893: AND
28894: PUSH
28895: LD_EXP 17
28899: PUSH
28900: LD_EXP 19
28904: AND
28905: OR
28906: IFFALSE 29225
28908: GO 28910
28910: DISABLE
// begin enable ;
28911: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
28912: LD_EXP 18
28916: PUSH
28917: LD_EXP 20
28921: AND
28922: PUSH
28923: LD_EXP 17
28927: PUSH
28928: LD_EXP 19
28932: AND
28933: AND
28934: IFFALSE 29071
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
28936: LD_ADDR_OWVAR 47
28940: PUSH
28941: LD_STRING #X106-1a
28943: PUSH
28944: LD_EXP 21
28948: PUSH
28949: LD_INT 16
28951: PPUSH
28952: LD_INT 22
28954: PUSH
28955: LD_INT 2
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 21
28964: PUSH
28965: LD_INT 2
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: LD_INT 33
28974: PUSH
28975: LD_INT 1
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: LD_INT 58
28984: PUSH
28985: EMPTY
28986: LIST
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: PPUSH
28994: CALL_OW 70
28998: MINUS
28999: PPUSH
29000: CALL 68880 0 1
29004: PUSH
29005: LD_STRING #X106-3a
29007: PUSH
29008: LD_EXP 20
29012: PUSH
29013: LD_STRING #X106-1
29015: PUSH
29016: LD_EXP 51
29020: PUSH
29021: LD_INT 0
29023: PLUS
29024: PUSH
29025: LD_EXP 51
29029: PPUSH
29030: LD_INT 55
29032: PUSH
29033: EMPTY
29034: LIST
29035: PPUSH
29036: CALL_OW 72
29040: PUSH
29041: LD_INT 0
29043: PLUS
29044: MINUS
29045: PPUSH
29046: CALL 68880 0 1
29050: PUSH
29051: LD_STRING #X106-3
29053: PUSH
29054: LD_EXP 19
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: ST_TO_ADDR
// end else
29069: GO 29225
// if omarWantVehicles and omarWaitingForVehiclesTimer then
29071: LD_EXP 18
29075: PUSH
29076: LD_EXP 20
29080: AND
29081: IFFALSE 29168
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
29083: LD_ADDR_OWVAR 47
29087: PUSH
29088: LD_STRING #X106-1a
29090: PUSH
29091: LD_EXP 21
29095: PUSH
29096: LD_INT 16
29098: PPUSH
29099: LD_INT 22
29101: PUSH
29102: LD_INT 2
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 21
29111: PUSH
29112: LD_INT 2
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 33
29121: PUSH
29122: LD_INT 1
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 58
29131: PUSH
29132: EMPTY
29133: LIST
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: PPUSH
29141: CALL_OW 70
29145: MINUS
29146: PPUSH
29147: CALL 68880 0 1
29151: PUSH
29152: LD_STRING #X106-3a
29154: PUSH
29155: LD_EXP 20
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: ST_TO_ADDR
// end else
29166: GO 29225
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
29168: LD_ADDR_OWVAR 47
29172: PUSH
29173: LD_STRING #X106-1
29175: PUSH
29176: LD_EXP 51
29180: PUSH
29181: LD_INT 0
29183: PLUS
29184: PUSH
29185: LD_EXP 51
29189: PPUSH
29190: LD_INT 55
29192: PUSH
29193: EMPTY
29194: LIST
29195: PPUSH
29196: CALL_OW 72
29200: PUSH
29201: LD_INT 0
29203: PLUS
29204: MINUS
29205: PPUSH
29206: CALL 68880 0 1
29210: PUSH
29211: LD_STRING #X106-3
29213: PUSH
29214: LD_EXP 19
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: ST_TO_ADDR
// end ; end ; end_of_file
29225: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29226: LD_INT 0
29228: PPUSH
29229: PPUSH
// if exist_mode then
29230: LD_VAR 0 2
29234: IFFALSE 29259
// unit := CreateCharacter ( prefix & ident ) else
29236: LD_ADDR_VAR 0 5
29240: PUSH
29241: LD_VAR 0 3
29245: PUSH
29246: LD_VAR 0 1
29250: STR
29251: PPUSH
29252: CALL_OW 34
29256: ST_TO_ADDR
29257: GO 29274
// unit := NewCharacter ( ident ) ;
29259: LD_ADDR_VAR 0 5
29263: PUSH
29264: LD_VAR 0 1
29268: PPUSH
29269: CALL_OW 25
29273: ST_TO_ADDR
// result := unit ;
29274: LD_ADDR_VAR 0 4
29278: PUSH
29279: LD_VAR 0 5
29283: ST_TO_ADDR
// end ;
29284: LD_VAR 0 4
29288: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29289: LD_INT 0
29291: PPUSH
29292: PPUSH
// if not side or not nation then
29293: LD_VAR 0 1
29297: NOT
29298: PUSH
29299: LD_VAR 0 2
29303: NOT
29304: OR
29305: IFFALSE 29309
// exit ;
29307: GO 30077
// case nation of nation_american :
29309: LD_VAR 0 2
29313: PUSH
29314: LD_INT 1
29316: DOUBLE
29317: EQUAL
29318: IFTRUE 29322
29320: GO 29536
29322: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29323: LD_ADDR_VAR 0 4
29327: PUSH
29328: LD_INT 35
29330: PUSH
29331: LD_INT 45
29333: PUSH
29334: LD_INT 46
29336: PUSH
29337: LD_INT 47
29339: PUSH
29340: LD_INT 82
29342: PUSH
29343: LD_INT 83
29345: PUSH
29346: LD_INT 84
29348: PUSH
29349: LD_INT 85
29351: PUSH
29352: LD_INT 86
29354: PUSH
29355: LD_INT 1
29357: PUSH
29358: LD_INT 2
29360: PUSH
29361: LD_INT 6
29363: PUSH
29364: LD_INT 15
29366: PUSH
29367: LD_INT 16
29369: PUSH
29370: LD_INT 7
29372: PUSH
29373: LD_INT 12
29375: PUSH
29376: LD_INT 13
29378: PUSH
29379: LD_INT 10
29381: PUSH
29382: LD_INT 14
29384: PUSH
29385: LD_INT 20
29387: PUSH
29388: LD_INT 21
29390: PUSH
29391: LD_INT 22
29393: PUSH
29394: LD_INT 25
29396: PUSH
29397: LD_INT 32
29399: PUSH
29400: LD_INT 27
29402: PUSH
29403: LD_INT 36
29405: PUSH
29406: LD_INT 69
29408: PUSH
29409: LD_INT 39
29411: PUSH
29412: LD_INT 34
29414: PUSH
29415: LD_INT 40
29417: PUSH
29418: LD_INT 48
29420: PUSH
29421: LD_INT 49
29423: PUSH
29424: LD_INT 50
29426: PUSH
29427: LD_INT 51
29429: PUSH
29430: LD_INT 52
29432: PUSH
29433: LD_INT 53
29435: PUSH
29436: LD_INT 54
29438: PUSH
29439: LD_INT 55
29441: PUSH
29442: LD_INT 56
29444: PUSH
29445: LD_INT 57
29447: PUSH
29448: LD_INT 58
29450: PUSH
29451: LD_INT 59
29453: PUSH
29454: LD_INT 60
29456: PUSH
29457: LD_INT 61
29459: PUSH
29460: LD_INT 62
29462: PUSH
29463: LD_INT 80
29465: PUSH
29466: LD_INT 82
29468: PUSH
29469: LD_INT 83
29471: PUSH
29472: LD_INT 84
29474: PUSH
29475: LD_INT 85
29477: PUSH
29478: LD_INT 86
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: ST_TO_ADDR
29534: GO 30001
29536: LD_INT 2
29538: DOUBLE
29539: EQUAL
29540: IFTRUE 29544
29542: GO 29770
29544: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29545: LD_ADDR_VAR 0 4
29549: PUSH
29550: LD_INT 35
29552: PUSH
29553: LD_INT 45
29555: PUSH
29556: LD_INT 46
29558: PUSH
29559: LD_INT 47
29561: PUSH
29562: LD_INT 82
29564: PUSH
29565: LD_INT 83
29567: PUSH
29568: LD_INT 84
29570: PUSH
29571: LD_INT 85
29573: PUSH
29574: LD_INT 87
29576: PUSH
29577: LD_INT 70
29579: PUSH
29580: LD_INT 1
29582: PUSH
29583: LD_INT 11
29585: PUSH
29586: LD_INT 3
29588: PUSH
29589: LD_INT 4
29591: PUSH
29592: LD_INT 5
29594: PUSH
29595: LD_INT 6
29597: PUSH
29598: LD_INT 15
29600: PUSH
29601: LD_INT 18
29603: PUSH
29604: LD_INT 7
29606: PUSH
29607: LD_INT 17
29609: PUSH
29610: LD_INT 8
29612: PUSH
29613: LD_INT 20
29615: PUSH
29616: LD_INT 21
29618: PUSH
29619: LD_INT 22
29621: PUSH
29622: LD_INT 72
29624: PUSH
29625: LD_INT 26
29627: PUSH
29628: LD_INT 69
29630: PUSH
29631: LD_INT 39
29633: PUSH
29634: LD_INT 40
29636: PUSH
29637: LD_INT 41
29639: PUSH
29640: LD_INT 42
29642: PUSH
29643: LD_INT 43
29645: PUSH
29646: LD_INT 48
29648: PUSH
29649: LD_INT 49
29651: PUSH
29652: LD_INT 50
29654: PUSH
29655: LD_INT 51
29657: PUSH
29658: LD_INT 52
29660: PUSH
29661: LD_INT 53
29663: PUSH
29664: LD_INT 54
29666: PUSH
29667: LD_INT 55
29669: PUSH
29670: LD_INT 56
29672: PUSH
29673: LD_INT 60
29675: PUSH
29676: LD_INT 61
29678: PUSH
29679: LD_INT 62
29681: PUSH
29682: LD_INT 66
29684: PUSH
29685: LD_INT 67
29687: PUSH
29688: LD_INT 68
29690: PUSH
29691: LD_INT 81
29693: PUSH
29694: LD_INT 82
29696: PUSH
29697: LD_INT 83
29699: PUSH
29700: LD_INT 84
29702: PUSH
29703: LD_INT 85
29705: PUSH
29706: LD_INT 87
29708: PUSH
29709: LD_INT 88
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: ST_TO_ADDR
29768: GO 30001
29770: LD_INT 3
29772: DOUBLE
29773: EQUAL
29774: IFTRUE 29778
29776: GO 30000
29778: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29779: LD_ADDR_VAR 0 4
29783: PUSH
29784: LD_INT 46
29786: PUSH
29787: LD_INT 47
29789: PUSH
29790: LD_INT 1
29792: PUSH
29793: LD_INT 2
29795: PUSH
29796: LD_INT 82
29798: PUSH
29799: LD_INT 83
29801: PUSH
29802: LD_INT 84
29804: PUSH
29805: LD_INT 85
29807: PUSH
29808: LD_INT 86
29810: PUSH
29811: LD_INT 11
29813: PUSH
29814: LD_INT 9
29816: PUSH
29817: LD_INT 20
29819: PUSH
29820: LD_INT 19
29822: PUSH
29823: LD_INT 21
29825: PUSH
29826: LD_INT 24
29828: PUSH
29829: LD_INT 22
29831: PUSH
29832: LD_INT 25
29834: PUSH
29835: LD_INT 28
29837: PUSH
29838: LD_INT 29
29840: PUSH
29841: LD_INT 30
29843: PUSH
29844: LD_INT 31
29846: PUSH
29847: LD_INT 37
29849: PUSH
29850: LD_INT 38
29852: PUSH
29853: LD_INT 32
29855: PUSH
29856: LD_INT 27
29858: PUSH
29859: LD_INT 33
29861: PUSH
29862: LD_INT 69
29864: PUSH
29865: LD_INT 39
29867: PUSH
29868: LD_INT 34
29870: PUSH
29871: LD_INT 40
29873: PUSH
29874: LD_INT 71
29876: PUSH
29877: LD_INT 23
29879: PUSH
29880: LD_INT 44
29882: PUSH
29883: LD_INT 48
29885: PUSH
29886: LD_INT 49
29888: PUSH
29889: LD_INT 50
29891: PUSH
29892: LD_INT 51
29894: PUSH
29895: LD_INT 52
29897: PUSH
29898: LD_INT 53
29900: PUSH
29901: LD_INT 54
29903: PUSH
29904: LD_INT 55
29906: PUSH
29907: LD_INT 56
29909: PUSH
29910: LD_INT 57
29912: PUSH
29913: LD_INT 58
29915: PUSH
29916: LD_INT 59
29918: PUSH
29919: LD_INT 63
29921: PUSH
29922: LD_INT 64
29924: PUSH
29925: LD_INT 65
29927: PUSH
29928: LD_INT 82
29930: PUSH
29931: LD_INT 83
29933: PUSH
29934: LD_INT 84
29936: PUSH
29937: LD_INT 85
29939: PUSH
29940: LD_INT 86
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: ST_TO_ADDR
29998: GO 30001
30000: POP
// if state > - 1 and state < 3 then
30001: LD_VAR 0 3
30005: PUSH
30006: LD_INT 1
30008: NEG
30009: GREATER
30010: PUSH
30011: LD_VAR 0 3
30015: PUSH
30016: LD_INT 3
30018: LESS
30019: AND
30020: IFFALSE 30077
// for i in result do
30022: LD_ADDR_VAR 0 5
30026: PUSH
30027: LD_VAR 0 4
30031: PUSH
30032: FOR_IN
30033: IFFALSE 30075
// if GetTech ( i , side ) <> state then
30035: LD_VAR 0 5
30039: PPUSH
30040: LD_VAR 0 1
30044: PPUSH
30045: CALL_OW 321
30049: PUSH
30050: LD_VAR 0 3
30054: NONEQUAL
30055: IFFALSE 30073
// result := result diff i ;
30057: LD_ADDR_VAR 0 4
30061: PUSH
30062: LD_VAR 0 4
30066: PUSH
30067: LD_VAR 0 5
30071: DIFF
30072: ST_TO_ADDR
30073: GO 30032
30075: POP
30076: POP
// end ;
30077: LD_VAR 0 4
30081: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30082: LD_INT 0
30084: PPUSH
30085: PPUSH
30086: PPUSH
// result := true ;
30087: LD_ADDR_VAR 0 3
30091: PUSH
30092: LD_INT 1
30094: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30095: LD_ADDR_VAR 0 5
30099: PUSH
30100: LD_VAR 0 2
30104: PPUSH
30105: CALL_OW 480
30109: ST_TO_ADDR
// if not tmp then
30110: LD_VAR 0 5
30114: NOT
30115: IFFALSE 30119
// exit ;
30117: GO 30168
// for i in tmp do
30119: LD_ADDR_VAR 0 4
30123: PUSH
30124: LD_VAR 0 5
30128: PUSH
30129: FOR_IN
30130: IFFALSE 30166
// if GetTech ( i , side ) <> state_researched then
30132: LD_VAR 0 4
30136: PPUSH
30137: LD_VAR 0 1
30141: PPUSH
30142: CALL_OW 321
30146: PUSH
30147: LD_INT 2
30149: NONEQUAL
30150: IFFALSE 30164
// begin result := false ;
30152: LD_ADDR_VAR 0 3
30156: PUSH
30157: LD_INT 0
30159: ST_TO_ADDR
// exit ;
30160: POP
30161: POP
30162: GO 30168
// end ;
30164: GO 30129
30166: POP
30167: POP
// end ;
30168: LD_VAR 0 3
30172: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30173: LD_INT 0
30175: PPUSH
30176: PPUSH
30177: PPUSH
30178: PPUSH
30179: PPUSH
30180: PPUSH
30181: PPUSH
30182: PPUSH
30183: PPUSH
30184: PPUSH
30185: PPUSH
30186: PPUSH
30187: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30188: LD_VAR 0 1
30192: NOT
30193: PUSH
30194: LD_VAR 0 1
30198: PPUSH
30199: CALL_OW 257
30203: PUSH
30204: LD_INT 9
30206: NONEQUAL
30207: OR
30208: IFFALSE 30212
// exit ;
30210: GO 30785
// side := GetSide ( unit ) ;
30212: LD_ADDR_VAR 0 9
30216: PUSH
30217: LD_VAR 0 1
30221: PPUSH
30222: CALL_OW 255
30226: ST_TO_ADDR
// tech_space := tech_spacanom ;
30227: LD_ADDR_VAR 0 12
30231: PUSH
30232: LD_INT 29
30234: ST_TO_ADDR
// tech_time := tech_taurad ;
30235: LD_ADDR_VAR 0 13
30239: PUSH
30240: LD_INT 28
30242: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30243: LD_ADDR_VAR 0 11
30247: PUSH
30248: LD_VAR 0 1
30252: PPUSH
30253: CALL_OW 310
30257: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30258: LD_VAR 0 11
30262: PPUSH
30263: CALL_OW 247
30267: PUSH
30268: LD_INT 2
30270: EQUAL
30271: IFFALSE 30275
// exit ;
30273: GO 30785
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30275: LD_ADDR_VAR 0 8
30279: PUSH
30280: LD_INT 81
30282: PUSH
30283: LD_VAR 0 9
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 3
30294: PUSH
30295: LD_INT 21
30297: PUSH
30298: LD_INT 3
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PPUSH
30313: CALL_OW 69
30317: ST_TO_ADDR
// if not tmp then
30318: LD_VAR 0 8
30322: NOT
30323: IFFALSE 30327
// exit ;
30325: GO 30785
// if in_unit then
30327: LD_VAR 0 11
30331: IFFALSE 30355
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30333: LD_ADDR_VAR 0 10
30337: PUSH
30338: LD_VAR 0 8
30342: PPUSH
30343: LD_VAR 0 11
30347: PPUSH
30348: CALL_OW 74
30352: ST_TO_ADDR
30353: GO 30375
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30355: LD_ADDR_VAR 0 10
30359: PUSH
30360: LD_VAR 0 8
30364: PPUSH
30365: LD_VAR 0 1
30369: PPUSH
30370: CALL_OW 74
30374: ST_TO_ADDR
// if not enemy then
30375: LD_VAR 0 10
30379: NOT
30380: IFFALSE 30384
// exit ;
30382: GO 30785
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30384: LD_VAR 0 11
30388: PUSH
30389: LD_VAR 0 11
30393: PPUSH
30394: LD_VAR 0 10
30398: PPUSH
30399: CALL_OW 296
30403: PUSH
30404: LD_INT 13
30406: GREATER
30407: AND
30408: PUSH
30409: LD_VAR 0 1
30413: PPUSH
30414: LD_VAR 0 10
30418: PPUSH
30419: CALL_OW 296
30423: PUSH
30424: LD_INT 12
30426: GREATER
30427: OR
30428: IFFALSE 30432
// exit ;
30430: GO 30785
// missile := [ 1 ] ;
30432: LD_ADDR_VAR 0 14
30436: PUSH
30437: LD_INT 1
30439: PUSH
30440: EMPTY
30441: LIST
30442: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30443: LD_VAR 0 9
30447: PPUSH
30448: LD_VAR 0 12
30452: PPUSH
30453: CALL_OW 325
30457: IFFALSE 30486
// missile := Replace ( missile , missile + 1 , 2 ) ;
30459: LD_ADDR_VAR 0 14
30463: PUSH
30464: LD_VAR 0 14
30468: PPUSH
30469: LD_VAR 0 14
30473: PUSH
30474: LD_INT 1
30476: PLUS
30477: PPUSH
30478: LD_INT 2
30480: PPUSH
30481: CALL_OW 1
30485: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30486: LD_VAR 0 9
30490: PPUSH
30491: LD_VAR 0 13
30495: PPUSH
30496: CALL_OW 325
30500: PUSH
30501: LD_VAR 0 10
30505: PPUSH
30506: CALL_OW 255
30510: PPUSH
30511: LD_VAR 0 13
30515: PPUSH
30516: CALL_OW 325
30520: NOT
30521: AND
30522: IFFALSE 30551
// missile := Replace ( missile , missile + 1 , 3 ) ;
30524: LD_ADDR_VAR 0 14
30528: PUSH
30529: LD_VAR 0 14
30533: PPUSH
30534: LD_VAR 0 14
30538: PUSH
30539: LD_INT 1
30541: PLUS
30542: PPUSH
30543: LD_INT 3
30545: PPUSH
30546: CALL_OW 1
30550: ST_TO_ADDR
// if missile < 2 then
30551: LD_VAR 0 14
30555: PUSH
30556: LD_INT 2
30558: LESS
30559: IFFALSE 30563
// exit ;
30561: GO 30785
// x := GetX ( enemy ) ;
30563: LD_ADDR_VAR 0 4
30567: PUSH
30568: LD_VAR 0 10
30572: PPUSH
30573: CALL_OW 250
30577: ST_TO_ADDR
// y := GetY ( enemy ) ;
30578: LD_ADDR_VAR 0 5
30582: PUSH
30583: LD_VAR 0 10
30587: PPUSH
30588: CALL_OW 251
30592: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30593: LD_ADDR_VAR 0 6
30597: PUSH
30598: LD_VAR 0 4
30602: PUSH
30603: LD_INT 1
30605: NEG
30606: PPUSH
30607: LD_INT 1
30609: PPUSH
30610: CALL_OW 12
30614: PLUS
30615: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30616: LD_ADDR_VAR 0 7
30620: PUSH
30621: LD_VAR 0 5
30625: PUSH
30626: LD_INT 1
30628: NEG
30629: PPUSH
30630: LD_INT 1
30632: PPUSH
30633: CALL_OW 12
30637: PLUS
30638: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30639: LD_VAR 0 6
30643: PPUSH
30644: LD_VAR 0 7
30648: PPUSH
30649: CALL_OW 488
30653: NOT
30654: IFFALSE 30676
// begin _x := x ;
30656: LD_ADDR_VAR 0 6
30660: PUSH
30661: LD_VAR 0 4
30665: ST_TO_ADDR
// _y := y ;
30666: LD_ADDR_VAR 0 7
30670: PUSH
30671: LD_VAR 0 5
30675: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30676: LD_ADDR_VAR 0 3
30680: PUSH
30681: LD_INT 1
30683: PPUSH
30684: LD_VAR 0 14
30688: PPUSH
30689: CALL_OW 12
30693: ST_TO_ADDR
// case i of 1 :
30694: LD_VAR 0 3
30698: PUSH
30699: LD_INT 1
30701: DOUBLE
30702: EQUAL
30703: IFTRUE 30707
30705: GO 30724
30707: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30708: LD_VAR 0 1
30712: PPUSH
30713: LD_VAR 0 10
30717: PPUSH
30718: CALL_OW 115
30722: GO 30785
30724: LD_INT 2
30726: DOUBLE
30727: EQUAL
30728: IFTRUE 30732
30730: GO 30754
30732: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30733: LD_VAR 0 1
30737: PPUSH
30738: LD_VAR 0 6
30742: PPUSH
30743: LD_VAR 0 7
30747: PPUSH
30748: CALL_OW 153
30752: GO 30785
30754: LD_INT 3
30756: DOUBLE
30757: EQUAL
30758: IFTRUE 30762
30760: GO 30784
30762: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30763: LD_VAR 0 1
30767: PPUSH
30768: LD_VAR 0 6
30772: PPUSH
30773: LD_VAR 0 7
30777: PPUSH
30778: CALL_OW 154
30782: GO 30785
30784: POP
// end ;
30785: LD_VAR 0 2
30789: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30790: LD_INT 0
30792: PPUSH
30793: PPUSH
30794: PPUSH
30795: PPUSH
30796: PPUSH
30797: PPUSH
// if not unit or not building then
30798: LD_VAR 0 1
30802: NOT
30803: PUSH
30804: LD_VAR 0 2
30808: NOT
30809: OR
30810: IFFALSE 30814
// exit ;
30812: GO 30972
// x := GetX ( building ) ;
30814: LD_ADDR_VAR 0 5
30818: PUSH
30819: LD_VAR 0 2
30823: PPUSH
30824: CALL_OW 250
30828: ST_TO_ADDR
// y := GetY ( building ) ;
30829: LD_ADDR_VAR 0 6
30833: PUSH
30834: LD_VAR 0 2
30838: PPUSH
30839: CALL_OW 251
30843: ST_TO_ADDR
// for i = 0 to 5 do
30844: LD_ADDR_VAR 0 4
30848: PUSH
30849: DOUBLE
30850: LD_INT 0
30852: DEC
30853: ST_TO_ADDR
30854: LD_INT 5
30856: PUSH
30857: FOR_TO
30858: IFFALSE 30970
// begin _x := ShiftX ( x , i , 3 ) ;
30860: LD_ADDR_VAR 0 7
30864: PUSH
30865: LD_VAR 0 5
30869: PPUSH
30870: LD_VAR 0 4
30874: PPUSH
30875: LD_INT 3
30877: PPUSH
30878: CALL_OW 272
30882: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30883: LD_ADDR_VAR 0 8
30887: PUSH
30888: LD_VAR 0 6
30892: PPUSH
30893: LD_VAR 0 4
30897: PPUSH
30898: LD_INT 3
30900: PPUSH
30901: CALL_OW 273
30905: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30906: LD_VAR 0 7
30910: PPUSH
30911: LD_VAR 0 8
30915: PPUSH
30916: CALL_OW 488
30920: NOT
30921: IFFALSE 30925
// continue ;
30923: GO 30857
// if HexInfo ( _x , _y ) = 0 then
30925: LD_VAR 0 7
30929: PPUSH
30930: LD_VAR 0 8
30934: PPUSH
30935: CALL_OW 428
30939: PUSH
30940: LD_INT 0
30942: EQUAL
30943: IFFALSE 30968
// begin ComMoveXY ( unit , _x , _y ) ;
30945: LD_VAR 0 1
30949: PPUSH
30950: LD_VAR 0 7
30954: PPUSH
30955: LD_VAR 0 8
30959: PPUSH
30960: CALL_OW 111
// exit ;
30964: POP
30965: POP
30966: GO 30972
// end ; end ;
30968: GO 30857
30970: POP
30971: POP
// end ;
30972: LD_VAR 0 3
30976: RET
// export function ScanBase ( side , base_area ) ; begin
30977: LD_INT 0
30979: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30980: LD_ADDR_VAR 0 3
30984: PUSH
30985: LD_VAR 0 2
30989: PPUSH
30990: LD_INT 81
30992: PUSH
30993: LD_VAR 0 1
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PPUSH
31002: CALL_OW 70
31006: ST_TO_ADDR
// end ;
31007: LD_VAR 0 3
31011: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31012: LD_INT 0
31014: PPUSH
31015: PPUSH
31016: PPUSH
31017: PPUSH
// result := false ;
31018: LD_ADDR_VAR 0 2
31022: PUSH
31023: LD_INT 0
31025: ST_TO_ADDR
// side := GetSide ( unit ) ;
31026: LD_ADDR_VAR 0 3
31030: PUSH
31031: LD_VAR 0 1
31035: PPUSH
31036: CALL_OW 255
31040: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31041: LD_ADDR_VAR 0 4
31045: PUSH
31046: LD_VAR 0 1
31050: PPUSH
31051: CALL_OW 248
31055: ST_TO_ADDR
// case nat of 1 :
31056: LD_VAR 0 4
31060: PUSH
31061: LD_INT 1
31063: DOUBLE
31064: EQUAL
31065: IFTRUE 31069
31067: GO 31080
31069: POP
// tech := tech_lassight ; 2 :
31070: LD_ADDR_VAR 0 5
31074: PUSH
31075: LD_INT 12
31077: ST_TO_ADDR
31078: GO 31119
31080: LD_INT 2
31082: DOUBLE
31083: EQUAL
31084: IFTRUE 31088
31086: GO 31099
31088: POP
// tech := tech_mortar ; 3 :
31089: LD_ADDR_VAR 0 5
31093: PUSH
31094: LD_INT 41
31096: ST_TO_ADDR
31097: GO 31119
31099: LD_INT 3
31101: DOUBLE
31102: EQUAL
31103: IFTRUE 31107
31105: GO 31118
31107: POP
// tech := tech_bazooka ; end ;
31108: LD_ADDR_VAR 0 5
31112: PUSH
31113: LD_INT 44
31115: ST_TO_ADDR
31116: GO 31119
31118: POP
// if Researched ( side , tech ) then
31119: LD_VAR 0 3
31123: PPUSH
31124: LD_VAR 0 5
31128: PPUSH
31129: CALL_OW 325
31133: IFFALSE 31160
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31135: LD_ADDR_VAR 0 2
31139: PUSH
31140: LD_INT 5
31142: PUSH
31143: LD_INT 8
31145: PUSH
31146: LD_INT 9
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: LIST
31153: PUSH
31154: LD_VAR 0 4
31158: ARRAY
31159: ST_TO_ADDR
// end ;
31160: LD_VAR 0 2
31164: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31165: LD_INT 0
31167: PPUSH
31168: PPUSH
31169: PPUSH
// if not mines then
31170: LD_VAR 0 2
31174: NOT
31175: IFFALSE 31179
// exit ;
31177: GO 31323
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31179: LD_ADDR_VAR 0 5
31183: PUSH
31184: LD_INT 81
31186: PUSH
31187: LD_VAR 0 1
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 3
31198: PUSH
31199: LD_INT 21
31201: PUSH
31202: LD_INT 3
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PPUSH
31217: CALL_OW 69
31221: ST_TO_ADDR
// for i in mines do
31222: LD_ADDR_VAR 0 4
31226: PUSH
31227: LD_VAR 0 2
31231: PUSH
31232: FOR_IN
31233: IFFALSE 31321
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31235: LD_VAR 0 4
31239: PUSH
31240: LD_INT 1
31242: ARRAY
31243: PPUSH
31244: LD_VAR 0 4
31248: PUSH
31249: LD_INT 2
31251: ARRAY
31252: PPUSH
31253: CALL_OW 458
31257: NOT
31258: IFFALSE 31262
// continue ;
31260: GO 31232
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31262: LD_VAR 0 4
31266: PUSH
31267: LD_INT 1
31269: ARRAY
31270: PPUSH
31271: LD_VAR 0 4
31275: PUSH
31276: LD_INT 2
31278: ARRAY
31279: PPUSH
31280: CALL_OW 428
31284: PUSH
31285: LD_VAR 0 5
31289: IN
31290: IFFALSE 31319
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31292: LD_VAR 0 4
31296: PUSH
31297: LD_INT 1
31299: ARRAY
31300: PPUSH
31301: LD_VAR 0 4
31305: PUSH
31306: LD_INT 2
31308: ARRAY
31309: PPUSH
31310: LD_VAR 0 1
31314: PPUSH
31315: CALL_OW 456
// end ;
31319: GO 31232
31321: POP
31322: POP
// end ;
31323: LD_VAR 0 3
31327: RET
// export function Count ( array ) ; var i ; begin
31328: LD_INT 0
31330: PPUSH
31331: PPUSH
// result := 0 ;
31332: LD_ADDR_VAR 0 2
31336: PUSH
31337: LD_INT 0
31339: ST_TO_ADDR
// for i in array do
31340: LD_ADDR_VAR 0 3
31344: PUSH
31345: LD_VAR 0 1
31349: PUSH
31350: FOR_IN
31351: IFFALSE 31375
// if i then
31353: LD_VAR 0 3
31357: IFFALSE 31373
// result := result + 1 ;
31359: LD_ADDR_VAR 0 2
31363: PUSH
31364: LD_VAR 0 2
31368: PUSH
31369: LD_INT 1
31371: PLUS
31372: ST_TO_ADDR
31373: GO 31350
31375: POP
31376: POP
// end ;
31377: LD_VAR 0 2
31381: RET
// export function IsEmpty ( building ) ; begin
31382: LD_INT 0
31384: PPUSH
// if not building then
31385: LD_VAR 0 1
31389: NOT
31390: IFFALSE 31394
// exit ;
31392: GO 31437
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31394: LD_ADDR_VAR 0 2
31398: PUSH
31399: LD_VAR 0 1
31403: PUSH
31404: LD_INT 22
31406: PUSH
31407: LD_VAR 0 1
31411: PPUSH
31412: CALL_OW 255
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 58
31423: PUSH
31424: EMPTY
31425: LIST
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PPUSH
31431: CALL_OW 69
31435: IN
31436: ST_TO_ADDR
// end ;
31437: LD_VAR 0 2
31441: RET
// export function IsNotFull ( building ) ; var places ; begin
31442: LD_INT 0
31444: PPUSH
31445: PPUSH
// if not building then
31446: LD_VAR 0 1
31450: NOT
31451: IFFALSE 31455
// exit ;
31453: GO 31626
// result := false ;
31455: LD_ADDR_VAR 0 2
31459: PUSH
31460: LD_INT 0
31462: ST_TO_ADDR
// places := 0 ;
31463: LD_ADDR_VAR 0 3
31467: PUSH
31468: LD_INT 0
31470: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
31471: LD_VAR 0 1
31475: PPUSH
31476: CALL_OW 266
31480: PUSH
31481: LD_INT 0
31483: DOUBLE
31484: EQUAL
31485: IFTRUE 31543
31487: LD_INT 1
31489: DOUBLE
31490: EQUAL
31491: IFTRUE 31543
31493: LD_INT 6
31495: DOUBLE
31496: EQUAL
31497: IFTRUE 31543
31499: LD_INT 7
31501: DOUBLE
31502: EQUAL
31503: IFTRUE 31543
31505: LD_INT 8
31507: DOUBLE
31508: EQUAL
31509: IFTRUE 31543
31511: LD_INT 4
31513: DOUBLE
31514: EQUAL
31515: IFTRUE 31543
31517: LD_INT 5
31519: DOUBLE
31520: EQUAL
31521: IFTRUE 31543
31523: LD_INT 2
31525: DOUBLE
31526: EQUAL
31527: IFTRUE 31543
31529: LD_INT 3
31531: DOUBLE
31532: EQUAL
31533: IFTRUE 31543
31535: LD_INT 35
31537: DOUBLE
31538: EQUAL
31539: IFTRUE 31543
31541: GO 31554
31543: POP
// places := 6 ; b_bunker , b_breastwork :
31544: LD_ADDR_VAR 0 3
31548: PUSH
31549: LD_INT 6
31551: ST_TO_ADDR
31552: GO 31599
31554: LD_INT 32
31556: DOUBLE
31557: EQUAL
31558: IFTRUE 31568
31560: LD_INT 31
31562: DOUBLE
31563: EQUAL
31564: IFTRUE 31568
31566: GO 31579
31568: POP
// places := 1 ; b_control_tower :
31569: LD_ADDR_VAR 0 3
31573: PUSH
31574: LD_INT 1
31576: ST_TO_ADDR
31577: GO 31599
31579: LD_INT 36
31581: DOUBLE
31582: EQUAL
31583: IFTRUE 31587
31585: GO 31598
31587: POP
// places := 3 ; end ;
31588: LD_ADDR_VAR 0 3
31592: PUSH
31593: LD_INT 3
31595: ST_TO_ADDR
31596: GO 31599
31598: POP
// if places then
31599: LD_VAR 0 3
31603: IFFALSE 31626
// result := UnitsInside ( building ) < places ;
31605: LD_ADDR_VAR 0 2
31609: PUSH
31610: LD_VAR 0 1
31614: PPUSH
31615: CALL_OW 313
31619: PUSH
31620: LD_VAR 0 3
31624: LESS
31625: ST_TO_ADDR
// end ;
31626: LD_VAR 0 2
31630: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31631: LD_INT 0
31633: PPUSH
31634: PPUSH
31635: PPUSH
31636: PPUSH
// tmp := [ ] ;
31637: LD_ADDR_VAR 0 3
31641: PUSH
31642: EMPTY
31643: ST_TO_ADDR
// list := [ ] ;
31644: LD_ADDR_VAR 0 5
31648: PUSH
31649: EMPTY
31650: ST_TO_ADDR
// for i = 16 to 25 do
31651: LD_ADDR_VAR 0 4
31655: PUSH
31656: DOUBLE
31657: LD_INT 16
31659: DEC
31660: ST_TO_ADDR
31661: LD_INT 25
31663: PUSH
31664: FOR_TO
31665: IFFALSE 31738
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31667: LD_ADDR_VAR 0 3
31671: PUSH
31672: LD_VAR 0 3
31676: PUSH
31677: LD_INT 22
31679: PUSH
31680: LD_VAR 0 1
31684: PPUSH
31685: CALL_OW 255
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 91
31696: PUSH
31697: LD_VAR 0 1
31701: PUSH
31702: LD_INT 6
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 30
31712: PUSH
31713: LD_VAR 0 4
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: LIST
31726: PUSH
31727: EMPTY
31728: LIST
31729: PPUSH
31730: CALL_OW 69
31734: ADD
31735: ST_TO_ADDR
31736: GO 31664
31738: POP
31739: POP
// for i = 1 to tmp do
31740: LD_ADDR_VAR 0 4
31744: PUSH
31745: DOUBLE
31746: LD_INT 1
31748: DEC
31749: ST_TO_ADDR
31750: LD_VAR 0 3
31754: PUSH
31755: FOR_TO
31756: IFFALSE 31844
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31758: LD_ADDR_VAR 0 5
31762: PUSH
31763: LD_VAR 0 5
31767: PUSH
31768: LD_VAR 0 3
31772: PUSH
31773: LD_VAR 0 4
31777: ARRAY
31778: PPUSH
31779: CALL_OW 266
31783: PUSH
31784: LD_VAR 0 3
31788: PUSH
31789: LD_VAR 0 4
31793: ARRAY
31794: PPUSH
31795: CALL_OW 250
31799: PUSH
31800: LD_VAR 0 3
31804: PUSH
31805: LD_VAR 0 4
31809: ARRAY
31810: PPUSH
31811: CALL_OW 251
31815: PUSH
31816: LD_VAR 0 3
31820: PUSH
31821: LD_VAR 0 4
31825: ARRAY
31826: PPUSH
31827: CALL_OW 254
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: PUSH
31838: EMPTY
31839: LIST
31840: ADD
31841: ST_TO_ADDR
31842: GO 31755
31844: POP
31845: POP
// result := list ;
31846: LD_ADDR_VAR 0 2
31850: PUSH
31851: LD_VAR 0 5
31855: ST_TO_ADDR
// end ;
31856: LD_VAR 0 2
31860: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31861: LD_INT 0
31863: PPUSH
31864: PPUSH
31865: PPUSH
31866: PPUSH
31867: PPUSH
31868: PPUSH
31869: PPUSH
// if not factory then
31870: LD_VAR 0 1
31874: NOT
31875: IFFALSE 31879
// exit ;
31877: GO 32472
// if control = control_apeman then
31879: LD_VAR 0 4
31883: PUSH
31884: LD_INT 5
31886: EQUAL
31887: IFFALSE 31996
// begin tmp := UnitsInside ( factory ) ;
31889: LD_ADDR_VAR 0 8
31893: PUSH
31894: LD_VAR 0 1
31898: PPUSH
31899: CALL_OW 313
31903: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31904: LD_VAR 0 8
31908: PPUSH
31909: LD_INT 25
31911: PUSH
31912: LD_INT 12
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PPUSH
31919: CALL_OW 72
31923: NOT
31924: IFFALSE 31934
// control := control_manual ;
31926: LD_ADDR_VAR 0 4
31930: PUSH
31931: LD_INT 1
31933: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31934: LD_ADDR_VAR 0 8
31938: PUSH
31939: LD_VAR 0 1
31943: PPUSH
31944: CALL 31631 0 1
31948: ST_TO_ADDR
// if tmp then
31949: LD_VAR 0 8
31953: IFFALSE 31996
// begin for i in tmp do
31955: LD_ADDR_VAR 0 7
31959: PUSH
31960: LD_VAR 0 8
31964: PUSH
31965: FOR_IN
31966: IFFALSE 31994
// if i [ 1 ] = b_ext_radio then
31968: LD_VAR 0 7
31972: PUSH
31973: LD_INT 1
31975: ARRAY
31976: PUSH
31977: LD_INT 22
31979: EQUAL
31980: IFFALSE 31992
// begin control := control_remote ;
31982: LD_ADDR_VAR 0 4
31986: PUSH
31987: LD_INT 2
31989: ST_TO_ADDR
// break ;
31990: GO 31994
// end ;
31992: GO 31965
31994: POP
31995: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31996: LD_VAR 0 1
32000: PPUSH
32001: LD_VAR 0 2
32005: PPUSH
32006: LD_VAR 0 3
32010: PPUSH
32011: LD_VAR 0 4
32015: PPUSH
32016: LD_VAR 0 5
32020: PPUSH
32021: CALL_OW 448
32025: IFFALSE 32060
// begin result := [ chassis , engine , control , weapon ] ;
32027: LD_ADDR_VAR 0 6
32031: PUSH
32032: LD_VAR 0 2
32036: PUSH
32037: LD_VAR 0 3
32041: PUSH
32042: LD_VAR 0 4
32046: PUSH
32047: LD_VAR 0 5
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: ST_TO_ADDR
// exit ;
32058: GO 32472
// end ; _chassis := AvailableChassisList ( factory ) ;
32060: LD_ADDR_VAR 0 9
32064: PUSH
32065: LD_VAR 0 1
32069: PPUSH
32070: CALL_OW 475
32074: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32075: LD_ADDR_VAR 0 11
32079: PUSH
32080: LD_VAR 0 1
32084: PPUSH
32085: CALL_OW 476
32089: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32090: LD_ADDR_VAR 0 12
32094: PUSH
32095: LD_VAR 0 1
32099: PPUSH
32100: CALL_OW 477
32104: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32105: LD_ADDR_VAR 0 10
32109: PUSH
32110: LD_VAR 0 1
32114: PPUSH
32115: CALL_OW 478
32119: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32120: LD_VAR 0 9
32124: NOT
32125: PUSH
32126: LD_VAR 0 11
32130: NOT
32131: OR
32132: PUSH
32133: LD_VAR 0 12
32137: NOT
32138: OR
32139: PUSH
32140: LD_VAR 0 10
32144: NOT
32145: OR
32146: IFFALSE 32181
// begin result := [ chassis , engine , control , weapon ] ;
32148: LD_ADDR_VAR 0 6
32152: PUSH
32153: LD_VAR 0 2
32157: PUSH
32158: LD_VAR 0 3
32162: PUSH
32163: LD_VAR 0 4
32167: PUSH
32168: LD_VAR 0 5
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: ST_TO_ADDR
// exit ;
32179: GO 32472
// end ; if not chassis in _chassis then
32181: LD_VAR 0 2
32185: PUSH
32186: LD_VAR 0 9
32190: IN
32191: NOT
32192: IFFALSE 32218
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32194: LD_ADDR_VAR 0 2
32198: PUSH
32199: LD_VAR 0 9
32203: PUSH
32204: LD_INT 1
32206: PPUSH
32207: LD_VAR 0 9
32211: PPUSH
32212: CALL_OW 12
32216: ARRAY
32217: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32218: LD_VAR 0 2
32222: PPUSH
32223: LD_VAR 0 3
32227: PPUSH
32228: CALL 32477 0 2
32232: NOT
32233: IFFALSE 32292
// repeat engine := _engine [ 1 ] ;
32235: LD_ADDR_VAR 0 3
32239: PUSH
32240: LD_VAR 0 11
32244: PUSH
32245: LD_INT 1
32247: ARRAY
32248: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32249: LD_ADDR_VAR 0 11
32253: PUSH
32254: LD_VAR 0 11
32258: PPUSH
32259: LD_INT 1
32261: PPUSH
32262: CALL_OW 3
32266: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32267: LD_VAR 0 2
32271: PPUSH
32272: LD_VAR 0 3
32276: PPUSH
32277: CALL 32477 0 2
32281: PUSH
32282: LD_VAR 0 11
32286: PUSH
32287: EMPTY
32288: EQUAL
32289: OR
32290: IFFALSE 32235
// if not control in _control then
32292: LD_VAR 0 4
32296: PUSH
32297: LD_VAR 0 12
32301: IN
32302: NOT
32303: IFFALSE 32329
// control := _control [ rand ( 1 , _control ) ] ;
32305: LD_ADDR_VAR 0 4
32309: PUSH
32310: LD_VAR 0 12
32314: PUSH
32315: LD_INT 1
32317: PPUSH
32318: LD_VAR 0 12
32322: PPUSH
32323: CALL_OW 12
32327: ARRAY
32328: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32329: LD_VAR 0 2
32333: PPUSH
32334: LD_VAR 0 5
32338: PPUSH
32339: CALL 32697 0 2
32343: NOT
32344: IFFALSE 32403
// repeat weapon := _weapon [ 1 ] ;
32346: LD_ADDR_VAR 0 5
32350: PUSH
32351: LD_VAR 0 10
32355: PUSH
32356: LD_INT 1
32358: ARRAY
32359: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32360: LD_ADDR_VAR 0 10
32364: PUSH
32365: LD_VAR 0 10
32369: PPUSH
32370: LD_INT 1
32372: PPUSH
32373: CALL_OW 3
32377: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32378: LD_VAR 0 2
32382: PPUSH
32383: LD_VAR 0 5
32387: PPUSH
32388: CALL 32697 0 2
32392: PUSH
32393: LD_VAR 0 10
32397: PUSH
32398: EMPTY
32399: EQUAL
32400: OR
32401: IFFALSE 32346
// result := [ ] ;
32403: LD_ADDR_VAR 0 6
32407: PUSH
32408: EMPTY
32409: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32410: LD_VAR 0 1
32414: PPUSH
32415: LD_VAR 0 2
32419: PPUSH
32420: LD_VAR 0 3
32424: PPUSH
32425: LD_VAR 0 4
32429: PPUSH
32430: LD_VAR 0 5
32434: PPUSH
32435: CALL_OW 448
32439: IFFALSE 32472
// result := [ chassis , engine , control , weapon ] ;
32441: LD_ADDR_VAR 0 6
32445: PUSH
32446: LD_VAR 0 2
32450: PUSH
32451: LD_VAR 0 3
32455: PUSH
32456: LD_VAR 0 4
32460: PUSH
32461: LD_VAR 0 5
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: ST_TO_ADDR
// end ;
32472: LD_VAR 0 6
32476: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32477: LD_INT 0
32479: PPUSH
// if not chassis or not engine then
32480: LD_VAR 0 1
32484: NOT
32485: PUSH
32486: LD_VAR 0 2
32490: NOT
32491: OR
32492: IFFALSE 32496
// exit ;
32494: GO 32692
// case engine of engine_solar :
32496: LD_VAR 0 2
32500: PUSH
32501: LD_INT 2
32503: DOUBLE
32504: EQUAL
32505: IFTRUE 32509
32507: GO 32547
32509: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32510: LD_ADDR_VAR 0 3
32514: PUSH
32515: LD_INT 11
32517: PUSH
32518: LD_INT 12
32520: PUSH
32521: LD_INT 13
32523: PUSH
32524: LD_INT 14
32526: PUSH
32527: LD_INT 1
32529: PUSH
32530: LD_INT 2
32532: PUSH
32533: LD_INT 3
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: ST_TO_ADDR
32545: GO 32676
32547: LD_INT 1
32549: DOUBLE
32550: EQUAL
32551: IFTRUE 32555
32553: GO 32617
32555: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32556: LD_ADDR_VAR 0 3
32560: PUSH
32561: LD_INT 11
32563: PUSH
32564: LD_INT 12
32566: PUSH
32567: LD_INT 13
32569: PUSH
32570: LD_INT 14
32572: PUSH
32573: LD_INT 1
32575: PUSH
32576: LD_INT 2
32578: PUSH
32579: LD_INT 3
32581: PUSH
32582: LD_INT 4
32584: PUSH
32585: LD_INT 5
32587: PUSH
32588: LD_INT 21
32590: PUSH
32591: LD_INT 23
32593: PUSH
32594: LD_INT 22
32596: PUSH
32597: LD_INT 24
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: ST_TO_ADDR
32615: GO 32676
32617: LD_INT 3
32619: DOUBLE
32620: EQUAL
32621: IFTRUE 32625
32623: GO 32675
32625: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32626: LD_ADDR_VAR 0 3
32630: PUSH
32631: LD_INT 13
32633: PUSH
32634: LD_INT 14
32636: PUSH
32637: LD_INT 2
32639: PUSH
32640: LD_INT 3
32642: PUSH
32643: LD_INT 4
32645: PUSH
32646: LD_INT 5
32648: PUSH
32649: LD_INT 21
32651: PUSH
32652: LD_INT 22
32654: PUSH
32655: LD_INT 23
32657: PUSH
32658: LD_INT 24
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: ST_TO_ADDR
32673: GO 32676
32675: POP
// result := ( chassis in result ) ;
32676: LD_ADDR_VAR 0 3
32680: PUSH
32681: LD_VAR 0 1
32685: PUSH
32686: LD_VAR 0 3
32690: IN
32691: ST_TO_ADDR
// end ;
32692: LD_VAR 0 3
32696: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32697: LD_INT 0
32699: PPUSH
// if not chassis or not weapon then
32700: LD_VAR 0 1
32704: NOT
32705: PUSH
32706: LD_VAR 0 2
32710: NOT
32711: OR
32712: IFFALSE 32716
// exit ;
32714: GO 33776
// case weapon of us_machine_gun :
32716: LD_VAR 0 2
32720: PUSH
32721: LD_INT 2
32723: DOUBLE
32724: EQUAL
32725: IFTRUE 32729
32727: GO 32759
32729: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32730: LD_ADDR_VAR 0 3
32734: PUSH
32735: LD_INT 1
32737: PUSH
32738: LD_INT 2
32740: PUSH
32741: LD_INT 3
32743: PUSH
32744: LD_INT 4
32746: PUSH
32747: LD_INT 5
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: ST_TO_ADDR
32757: GO 33760
32759: LD_INT 3
32761: DOUBLE
32762: EQUAL
32763: IFTRUE 32767
32765: GO 32797
32767: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32768: LD_ADDR_VAR 0 3
32772: PUSH
32773: LD_INT 1
32775: PUSH
32776: LD_INT 2
32778: PUSH
32779: LD_INT 3
32781: PUSH
32782: LD_INT 4
32784: PUSH
32785: LD_INT 5
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: ST_TO_ADDR
32795: GO 33760
32797: LD_INT 11
32799: DOUBLE
32800: EQUAL
32801: IFTRUE 32805
32803: GO 32835
32805: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32806: LD_ADDR_VAR 0 3
32810: PUSH
32811: LD_INT 1
32813: PUSH
32814: LD_INT 2
32816: PUSH
32817: LD_INT 3
32819: PUSH
32820: LD_INT 4
32822: PUSH
32823: LD_INT 5
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: ST_TO_ADDR
32833: GO 33760
32835: LD_INT 4
32837: DOUBLE
32838: EQUAL
32839: IFTRUE 32843
32841: GO 32869
32843: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32844: LD_ADDR_VAR 0 3
32848: PUSH
32849: LD_INT 2
32851: PUSH
32852: LD_INT 3
32854: PUSH
32855: LD_INT 4
32857: PUSH
32858: LD_INT 5
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: ST_TO_ADDR
32867: GO 33760
32869: LD_INT 5
32871: DOUBLE
32872: EQUAL
32873: IFTRUE 32877
32875: GO 32903
32877: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32878: LD_ADDR_VAR 0 3
32882: PUSH
32883: LD_INT 2
32885: PUSH
32886: LD_INT 3
32888: PUSH
32889: LD_INT 4
32891: PUSH
32892: LD_INT 5
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: ST_TO_ADDR
32901: GO 33760
32903: LD_INT 9
32905: DOUBLE
32906: EQUAL
32907: IFTRUE 32911
32909: GO 32937
32911: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32912: LD_ADDR_VAR 0 3
32916: PUSH
32917: LD_INT 2
32919: PUSH
32920: LD_INT 3
32922: PUSH
32923: LD_INT 4
32925: PUSH
32926: LD_INT 5
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: ST_TO_ADDR
32935: GO 33760
32937: LD_INT 7
32939: DOUBLE
32940: EQUAL
32941: IFTRUE 32945
32943: GO 32971
32945: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32946: LD_ADDR_VAR 0 3
32950: PUSH
32951: LD_INT 2
32953: PUSH
32954: LD_INT 3
32956: PUSH
32957: LD_INT 4
32959: PUSH
32960: LD_INT 5
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: ST_TO_ADDR
32969: GO 33760
32971: LD_INT 12
32973: DOUBLE
32974: EQUAL
32975: IFTRUE 32979
32977: GO 33005
32979: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32980: LD_ADDR_VAR 0 3
32984: PUSH
32985: LD_INT 2
32987: PUSH
32988: LD_INT 3
32990: PUSH
32991: LD_INT 4
32993: PUSH
32994: LD_INT 5
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: ST_TO_ADDR
33003: GO 33760
33005: LD_INT 13
33007: DOUBLE
33008: EQUAL
33009: IFTRUE 33013
33011: GO 33039
33013: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33014: LD_ADDR_VAR 0 3
33018: PUSH
33019: LD_INT 2
33021: PUSH
33022: LD_INT 3
33024: PUSH
33025: LD_INT 4
33027: PUSH
33028: LD_INT 5
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: ST_TO_ADDR
33037: GO 33760
33039: LD_INT 14
33041: DOUBLE
33042: EQUAL
33043: IFTRUE 33047
33045: GO 33065
33047: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33048: LD_ADDR_VAR 0 3
33052: PUSH
33053: LD_INT 4
33055: PUSH
33056: LD_INT 5
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: ST_TO_ADDR
33063: GO 33760
33065: LD_INT 6
33067: DOUBLE
33068: EQUAL
33069: IFTRUE 33073
33071: GO 33091
33073: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33074: LD_ADDR_VAR 0 3
33078: PUSH
33079: LD_INT 4
33081: PUSH
33082: LD_INT 5
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: ST_TO_ADDR
33089: GO 33760
33091: LD_INT 10
33093: DOUBLE
33094: EQUAL
33095: IFTRUE 33099
33097: GO 33117
33099: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33100: LD_ADDR_VAR 0 3
33104: PUSH
33105: LD_INT 4
33107: PUSH
33108: LD_INT 5
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: ST_TO_ADDR
33115: GO 33760
33117: LD_INT 22
33119: DOUBLE
33120: EQUAL
33121: IFTRUE 33125
33123: GO 33151
33125: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33126: LD_ADDR_VAR 0 3
33130: PUSH
33131: LD_INT 11
33133: PUSH
33134: LD_INT 12
33136: PUSH
33137: LD_INT 13
33139: PUSH
33140: LD_INT 14
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: ST_TO_ADDR
33149: GO 33760
33151: LD_INT 23
33153: DOUBLE
33154: EQUAL
33155: IFTRUE 33159
33157: GO 33185
33159: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33160: LD_ADDR_VAR 0 3
33164: PUSH
33165: LD_INT 11
33167: PUSH
33168: LD_INT 12
33170: PUSH
33171: LD_INT 13
33173: PUSH
33174: LD_INT 14
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: ST_TO_ADDR
33183: GO 33760
33185: LD_INT 24
33187: DOUBLE
33188: EQUAL
33189: IFTRUE 33193
33191: GO 33219
33193: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33194: LD_ADDR_VAR 0 3
33198: PUSH
33199: LD_INT 11
33201: PUSH
33202: LD_INT 12
33204: PUSH
33205: LD_INT 13
33207: PUSH
33208: LD_INT 14
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: ST_TO_ADDR
33217: GO 33760
33219: LD_INT 30
33221: DOUBLE
33222: EQUAL
33223: IFTRUE 33227
33225: GO 33253
33227: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33228: LD_ADDR_VAR 0 3
33232: PUSH
33233: LD_INT 11
33235: PUSH
33236: LD_INT 12
33238: PUSH
33239: LD_INT 13
33241: PUSH
33242: LD_INT 14
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: ST_TO_ADDR
33251: GO 33760
33253: LD_INT 25
33255: DOUBLE
33256: EQUAL
33257: IFTRUE 33261
33259: GO 33279
33261: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33262: LD_ADDR_VAR 0 3
33266: PUSH
33267: LD_INT 13
33269: PUSH
33270: LD_INT 14
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: ST_TO_ADDR
33277: GO 33760
33279: LD_INT 27
33281: DOUBLE
33282: EQUAL
33283: IFTRUE 33287
33285: GO 33305
33287: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33288: LD_ADDR_VAR 0 3
33292: PUSH
33293: LD_INT 13
33295: PUSH
33296: LD_INT 14
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: ST_TO_ADDR
33303: GO 33760
33305: LD_INT 92
33307: DOUBLE
33308: EQUAL
33309: IFTRUE 33313
33311: GO 33339
33313: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33314: LD_ADDR_VAR 0 3
33318: PUSH
33319: LD_INT 11
33321: PUSH
33322: LD_INT 12
33324: PUSH
33325: LD_INT 13
33327: PUSH
33328: LD_INT 14
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: ST_TO_ADDR
33337: GO 33760
33339: LD_INT 28
33341: DOUBLE
33342: EQUAL
33343: IFTRUE 33347
33345: GO 33365
33347: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33348: LD_ADDR_VAR 0 3
33352: PUSH
33353: LD_INT 13
33355: PUSH
33356: LD_INT 14
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: ST_TO_ADDR
33363: GO 33760
33365: LD_INT 29
33367: DOUBLE
33368: EQUAL
33369: IFTRUE 33373
33371: GO 33391
33373: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33374: LD_ADDR_VAR 0 3
33378: PUSH
33379: LD_INT 13
33381: PUSH
33382: LD_INT 14
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: ST_TO_ADDR
33389: GO 33760
33391: LD_INT 31
33393: DOUBLE
33394: EQUAL
33395: IFTRUE 33399
33397: GO 33417
33399: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33400: LD_ADDR_VAR 0 3
33404: PUSH
33405: LD_INT 13
33407: PUSH
33408: LD_INT 14
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: ST_TO_ADDR
33415: GO 33760
33417: LD_INT 26
33419: DOUBLE
33420: EQUAL
33421: IFTRUE 33425
33423: GO 33443
33425: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33426: LD_ADDR_VAR 0 3
33430: PUSH
33431: LD_INT 13
33433: PUSH
33434: LD_INT 14
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: ST_TO_ADDR
33441: GO 33760
33443: LD_INT 42
33445: DOUBLE
33446: EQUAL
33447: IFTRUE 33451
33449: GO 33477
33451: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33452: LD_ADDR_VAR 0 3
33456: PUSH
33457: LD_INT 21
33459: PUSH
33460: LD_INT 22
33462: PUSH
33463: LD_INT 23
33465: PUSH
33466: LD_INT 24
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: ST_TO_ADDR
33475: GO 33760
33477: LD_INT 43
33479: DOUBLE
33480: EQUAL
33481: IFTRUE 33485
33483: GO 33511
33485: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33486: LD_ADDR_VAR 0 3
33490: PUSH
33491: LD_INT 21
33493: PUSH
33494: LD_INT 22
33496: PUSH
33497: LD_INT 23
33499: PUSH
33500: LD_INT 24
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: ST_TO_ADDR
33509: GO 33760
33511: LD_INT 44
33513: DOUBLE
33514: EQUAL
33515: IFTRUE 33519
33517: GO 33545
33519: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33520: LD_ADDR_VAR 0 3
33524: PUSH
33525: LD_INT 21
33527: PUSH
33528: LD_INT 22
33530: PUSH
33531: LD_INT 23
33533: PUSH
33534: LD_INT 24
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: ST_TO_ADDR
33543: GO 33760
33545: LD_INT 45
33547: DOUBLE
33548: EQUAL
33549: IFTRUE 33553
33551: GO 33579
33553: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33554: LD_ADDR_VAR 0 3
33558: PUSH
33559: LD_INT 21
33561: PUSH
33562: LD_INT 22
33564: PUSH
33565: LD_INT 23
33567: PUSH
33568: LD_INT 24
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: ST_TO_ADDR
33577: GO 33760
33579: LD_INT 49
33581: DOUBLE
33582: EQUAL
33583: IFTRUE 33587
33585: GO 33613
33587: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33588: LD_ADDR_VAR 0 3
33592: PUSH
33593: LD_INT 21
33595: PUSH
33596: LD_INT 22
33598: PUSH
33599: LD_INT 23
33601: PUSH
33602: LD_INT 24
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: ST_TO_ADDR
33611: GO 33760
33613: LD_INT 51
33615: DOUBLE
33616: EQUAL
33617: IFTRUE 33621
33619: GO 33647
33621: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33622: LD_ADDR_VAR 0 3
33626: PUSH
33627: LD_INT 21
33629: PUSH
33630: LD_INT 22
33632: PUSH
33633: LD_INT 23
33635: PUSH
33636: LD_INT 24
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: ST_TO_ADDR
33645: GO 33760
33647: LD_INT 52
33649: DOUBLE
33650: EQUAL
33651: IFTRUE 33655
33653: GO 33681
33655: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33656: LD_ADDR_VAR 0 3
33660: PUSH
33661: LD_INT 21
33663: PUSH
33664: LD_INT 22
33666: PUSH
33667: LD_INT 23
33669: PUSH
33670: LD_INT 24
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: ST_TO_ADDR
33679: GO 33760
33681: LD_INT 53
33683: DOUBLE
33684: EQUAL
33685: IFTRUE 33689
33687: GO 33707
33689: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33690: LD_ADDR_VAR 0 3
33694: PUSH
33695: LD_INT 23
33697: PUSH
33698: LD_INT 24
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: ST_TO_ADDR
33705: GO 33760
33707: LD_INT 46
33709: DOUBLE
33710: EQUAL
33711: IFTRUE 33715
33713: GO 33733
33715: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33716: LD_ADDR_VAR 0 3
33720: PUSH
33721: LD_INT 23
33723: PUSH
33724: LD_INT 24
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: ST_TO_ADDR
33731: GO 33760
33733: LD_INT 47
33735: DOUBLE
33736: EQUAL
33737: IFTRUE 33741
33739: GO 33759
33741: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33742: LD_ADDR_VAR 0 3
33746: PUSH
33747: LD_INT 23
33749: PUSH
33750: LD_INT 24
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: ST_TO_ADDR
33757: GO 33760
33759: POP
// result := ( chassis in result ) ;
33760: LD_ADDR_VAR 0 3
33764: PUSH
33765: LD_VAR 0 1
33769: PUSH
33770: LD_VAR 0 3
33774: IN
33775: ST_TO_ADDR
// end ;
33776: LD_VAR 0 3
33780: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33781: LD_INT 0
33783: PPUSH
33784: PPUSH
33785: PPUSH
33786: PPUSH
33787: PPUSH
33788: PPUSH
33789: PPUSH
// result := array ;
33790: LD_ADDR_VAR 0 5
33794: PUSH
33795: LD_VAR 0 1
33799: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33800: LD_VAR 0 1
33804: NOT
33805: PUSH
33806: LD_VAR 0 2
33810: NOT
33811: OR
33812: PUSH
33813: LD_VAR 0 3
33817: NOT
33818: OR
33819: PUSH
33820: LD_VAR 0 2
33824: PUSH
33825: LD_VAR 0 1
33829: GREATER
33830: OR
33831: PUSH
33832: LD_VAR 0 3
33836: PUSH
33837: LD_VAR 0 1
33841: GREATER
33842: OR
33843: IFFALSE 33847
// exit ;
33845: GO 34143
// if direction then
33847: LD_VAR 0 4
33851: IFFALSE 33915
// begin d := 1 ;
33853: LD_ADDR_VAR 0 9
33857: PUSH
33858: LD_INT 1
33860: ST_TO_ADDR
// if i_from > i_to then
33861: LD_VAR 0 2
33865: PUSH
33866: LD_VAR 0 3
33870: GREATER
33871: IFFALSE 33897
// length := ( array - i_from ) + i_to else
33873: LD_ADDR_VAR 0 11
33877: PUSH
33878: LD_VAR 0 1
33882: PUSH
33883: LD_VAR 0 2
33887: MINUS
33888: PUSH
33889: LD_VAR 0 3
33893: PLUS
33894: ST_TO_ADDR
33895: GO 33913
// length := i_to - i_from ;
33897: LD_ADDR_VAR 0 11
33901: PUSH
33902: LD_VAR 0 3
33906: PUSH
33907: LD_VAR 0 2
33911: MINUS
33912: ST_TO_ADDR
// end else
33913: GO 33976
// begin d := - 1 ;
33915: LD_ADDR_VAR 0 9
33919: PUSH
33920: LD_INT 1
33922: NEG
33923: ST_TO_ADDR
// if i_from > i_to then
33924: LD_VAR 0 2
33928: PUSH
33929: LD_VAR 0 3
33933: GREATER
33934: IFFALSE 33954
// length := i_from - i_to else
33936: LD_ADDR_VAR 0 11
33940: PUSH
33941: LD_VAR 0 2
33945: PUSH
33946: LD_VAR 0 3
33950: MINUS
33951: ST_TO_ADDR
33952: GO 33976
// length := ( array - i_to ) + i_from ;
33954: LD_ADDR_VAR 0 11
33958: PUSH
33959: LD_VAR 0 1
33963: PUSH
33964: LD_VAR 0 3
33968: MINUS
33969: PUSH
33970: LD_VAR 0 2
33974: PLUS
33975: ST_TO_ADDR
// end ; if not length then
33976: LD_VAR 0 11
33980: NOT
33981: IFFALSE 33985
// exit ;
33983: GO 34143
// tmp := array ;
33985: LD_ADDR_VAR 0 10
33989: PUSH
33990: LD_VAR 0 1
33994: ST_TO_ADDR
// for i = 1 to length do
33995: LD_ADDR_VAR 0 6
33999: PUSH
34000: DOUBLE
34001: LD_INT 1
34003: DEC
34004: ST_TO_ADDR
34005: LD_VAR 0 11
34009: PUSH
34010: FOR_TO
34011: IFFALSE 34131
// begin for j = 1 to array do
34013: LD_ADDR_VAR 0 7
34017: PUSH
34018: DOUBLE
34019: LD_INT 1
34021: DEC
34022: ST_TO_ADDR
34023: LD_VAR 0 1
34027: PUSH
34028: FOR_TO
34029: IFFALSE 34117
// begin k := j + d ;
34031: LD_ADDR_VAR 0 8
34035: PUSH
34036: LD_VAR 0 7
34040: PUSH
34041: LD_VAR 0 9
34045: PLUS
34046: ST_TO_ADDR
// if k > array then
34047: LD_VAR 0 8
34051: PUSH
34052: LD_VAR 0 1
34056: GREATER
34057: IFFALSE 34067
// k := 1 ;
34059: LD_ADDR_VAR 0 8
34063: PUSH
34064: LD_INT 1
34066: ST_TO_ADDR
// if not k then
34067: LD_VAR 0 8
34071: NOT
34072: IFFALSE 34084
// k := array ;
34074: LD_ADDR_VAR 0 8
34078: PUSH
34079: LD_VAR 0 1
34083: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34084: LD_ADDR_VAR 0 10
34088: PUSH
34089: LD_VAR 0 10
34093: PPUSH
34094: LD_VAR 0 8
34098: PPUSH
34099: LD_VAR 0 1
34103: PUSH
34104: LD_VAR 0 7
34108: ARRAY
34109: PPUSH
34110: CALL_OW 1
34114: ST_TO_ADDR
// end ;
34115: GO 34028
34117: POP
34118: POP
// array := tmp ;
34119: LD_ADDR_VAR 0 1
34123: PUSH
34124: LD_VAR 0 10
34128: ST_TO_ADDR
// end ;
34129: GO 34010
34131: POP
34132: POP
// result := array ;
34133: LD_ADDR_VAR 0 5
34137: PUSH
34138: LD_VAR 0 1
34142: ST_TO_ADDR
// end ;
34143: LD_VAR 0 5
34147: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34148: LD_INT 0
34150: PPUSH
34151: PPUSH
// result := 0 ;
34152: LD_ADDR_VAR 0 3
34156: PUSH
34157: LD_INT 0
34159: ST_TO_ADDR
// if not array or not value in array then
34160: LD_VAR 0 1
34164: NOT
34165: PUSH
34166: LD_VAR 0 2
34170: PUSH
34171: LD_VAR 0 1
34175: IN
34176: NOT
34177: OR
34178: IFFALSE 34182
// exit ;
34180: GO 34236
// for i = 1 to array do
34182: LD_ADDR_VAR 0 4
34186: PUSH
34187: DOUBLE
34188: LD_INT 1
34190: DEC
34191: ST_TO_ADDR
34192: LD_VAR 0 1
34196: PUSH
34197: FOR_TO
34198: IFFALSE 34234
// if value = array [ i ] then
34200: LD_VAR 0 2
34204: PUSH
34205: LD_VAR 0 1
34209: PUSH
34210: LD_VAR 0 4
34214: ARRAY
34215: EQUAL
34216: IFFALSE 34232
// begin result := i ;
34218: LD_ADDR_VAR 0 3
34222: PUSH
34223: LD_VAR 0 4
34227: ST_TO_ADDR
// exit ;
34228: POP
34229: POP
34230: GO 34236
// end ;
34232: GO 34197
34234: POP
34235: POP
// end ;
34236: LD_VAR 0 3
34240: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34241: LD_INT 0
34243: PPUSH
// vc_chassis := chassis ;
34244: LD_ADDR_OWVAR 37
34248: PUSH
34249: LD_VAR 0 1
34253: ST_TO_ADDR
// vc_engine := engine ;
34254: LD_ADDR_OWVAR 39
34258: PUSH
34259: LD_VAR 0 2
34263: ST_TO_ADDR
// vc_control := control ;
34264: LD_ADDR_OWVAR 38
34268: PUSH
34269: LD_VAR 0 3
34273: ST_TO_ADDR
// vc_weapon := weapon ;
34274: LD_ADDR_OWVAR 40
34278: PUSH
34279: LD_VAR 0 4
34283: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34284: LD_ADDR_OWVAR 41
34288: PUSH
34289: LD_VAR 0 5
34293: ST_TO_ADDR
// end ;
34294: LD_VAR 0 6
34298: RET
// export function WantPlant ( unit ) ; var task ; begin
34299: LD_INT 0
34301: PPUSH
34302: PPUSH
// result := false ;
34303: LD_ADDR_VAR 0 2
34307: PUSH
34308: LD_INT 0
34310: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34311: LD_ADDR_VAR 0 3
34315: PUSH
34316: LD_VAR 0 1
34320: PPUSH
34321: CALL_OW 437
34325: ST_TO_ADDR
// if task then
34326: LD_VAR 0 3
34330: IFFALSE 34358
// if task [ 1 ] [ 1 ] = p then
34332: LD_VAR 0 3
34336: PUSH
34337: LD_INT 1
34339: ARRAY
34340: PUSH
34341: LD_INT 1
34343: ARRAY
34344: PUSH
34345: LD_STRING p
34347: EQUAL
34348: IFFALSE 34358
// result := true ;
34350: LD_ADDR_VAR 0 2
34354: PUSH
34355: LD_INT 1
34357: ST_TO_ADDR
// end ;
34358: LD_VAR 0 2
34362: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34363: LD_INT 0
34365: PPUSH
34366: PPUSH
34367: PPUSH
34368: PPUSH
// if pos < 1 then
34369: LD_VAR 0 2
34373: PUSH
34374: LD_INT 1
34376: LESS
34377: IFFALSE 34381
// exit ;
34379: GO 34684
// if pos = 1 then
34381: LD_VAR 0 2
34385: PUSH
34386: LD_INT 1
34388: EQUAL
34389: IFFALSE 34422
// result := Replace ( arr , pos [ 1 ] , value ) else
34391: LD_ADDR_VAR 0 4
34395: PUSH
34396: LD_VAR 0 1
34400: PPUSH
34401: LD_VAR 0 2
34405: PUSH
34406: LD_INT 1
34408: ARRAY
34409: PPUSH
34410: LD_VAR 0 3
34414: PPUSH
34415: CALL_OW 1
34419: ST_TO_ADDR
34420: GO 34684
// begin tmp := arr ;
34422: LD_ADDR_VAR 0 6
34426: PUSH
34427: LD_VAR 0 1
34431: ST_TO_ADDR
// s_arr := [ tmp ] ;
34432: LD_ADDR_VAR 0 7
34436: PUSH
34437: LD_VAR 0 6
34441: PUSH
34442: EMPTY
34443: LIST
34444: ST_TO_ADDR
// for i = 1 to pos - 1 do
34445: LD_ADDR_VAR 0 5
34449: PUSH
34450: DOUBLE
34451: LD_INT 1
34453: DEC
34454: ST_TO_ADDR
34455: LD_VAR 0 2
34459: PUSH
34460: LD_INT 1
34462: MINUS
34463: PUSH
34464: FOR_TO
34465: IFFALSE 34510
// begin tmp := tmp [ pos [ i ] ] ;
34467: LD_ADDR_VAR 0 6
34471: PUSH
34472: LD_VAR 0 6
34476: PUSH
34477: LD_VAR 0 2
34481: PUSH
34482: LD_VAR 0 5
34486: ARRAY
34487: ARRAY
34488: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34489: LD_ADDR_VAR 0 7
34493: PUSH
34494: LD_VAR 0 7
34498: PUSH
34499: LD_VAR 0 6
34503: PUSH
34504: EMPTY
34505: LIST
34506: ADD
34507: ST_TO_ADDR
// end ;
34508: GO 34464
34510: POP
34511: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34512: LD_ADDR_VAR 0 6
34516: PUSH
34517: LD_VAR 0 6
34521: PPUSH
34522: LD_VAR 0 2
34526: PUSH
34527: LD_VAR 0 2
34531: ARRAY
34532: PPUSH
34533: LD_VAR 0 3
34537: PPUSH
34538: CALL_OW 1
34542: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34543: LD_ADDR_VAR 0 7
34547: PUSH
34548: LD_VAR 0 7
34552: PPUSH
34553: LD_VAR 0 7
34557: PPUSH
34558: LD_VAR 0 6
34562: PPUSH
34563: CALL_OW 1
34567: ST_TO_ADDR
// for i = s_arr downto 2 do
34568: LD_ADDR_VAR 0 5
34572: PUSH
34573: DOUBLE
34574: LD_VAR 0 7
34578: INC
34579: ST_TO_ADDR
34580: LD_INT 2
34582: PUSH
34583: FOR_DOWNTO
34584: IFFALSE 34668
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34586: LD_ADDR_VAR 0 6
34590: PUSH
34591: LD_VAR 0 7
34595: PUSH
34596: LD_VAR 0 5
34600: PUSH
34601: LD_INT 1
34603: MINUS
34604: ARRAY
34605: PPUSH
34606: LD_VAR 0 2
34610: PUSH
34611: LD_VAR 0 5
34615: PUSH
34616: LD_INT 1
34618: MINUS
34619: ARRAY
34620: PPUSH
34621: LD_VAR 0 7
34625: PUSH
34626: LD_VAR 0 5
34630: ARRAY
34631: PPUSH
34632: CALL_OW 1
34636: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34637: LD_ADDR_VAR 0 7
34641: PUSH
34642: LD_VAR 0 7
34646: PPUSH
34647: LD_VAR 0 5
34651: PUSH
34652: LD_INT 1
34654: MINUS
34655: PPUSH
34656: LD_VAR 0 6
34660: PPUSH
34661: CALL_OW 1
34665: ST_TO_ADDR
// end ;
34666: GO 34583
34668: POP
34669: POP
// result := s_arr [ 1 ] ;
34670: LD_ADDR_VAR 0 4
34674: PUSH
34675: LD_VAR 0 7
34679: PUSH
34680: LD_INT 1
34682: ARRAY
34683: ST_TO_ADDR
// end ; end ;
34684: LD_VAR 0 4
34688: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34689: LD_INT 0
34691: PPUSH
34692: PPUSH
// if not list then
34693: LD_VAR 0 1
34697: NOT
34698: IFFALSE 34702
// exit ;
34700: GO 34793
// i := list [ pos1 ] ;
34702: LD_ADDR_VAR 0 5
34706: PUSH
34707: LD_VAR 0 1
34711: PUSH
34712: LD_VAR 0 2
34716: ARRAY
34717: ST_TO_ADDR
// if not i then
34718: LD_VAR 0 5
34722: NOT
34723: IFFALSE 34727
// exit ;
34725: GO 34793
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34727: LD_ADDR_VAR 0 1
34731: PUSH
34732: LD_VAR 0 1
34736: PPUSH
34737: LD_VAR 0 2
34741: PPUSH
34742: LD_VAR 0 1
34746: PUSH
34747: LD_VAR 0 3
34751: ARRAY
34752: PPUSH
34753: CALL_OW 1
34757: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34758: LD_ADDR_VAR 0 1
34762: PUSH
34763: LD_VAR 0 1
34767: PPUSH
34768: LD_VAR 0 3
34772: PPUSH
34773: LD_VAR 0 5
34777: PPUSH
34778: CALL_OW 1
34782: ST_TO_ADDR
// result := list ;
34783: LD_ADDR_VAR 0 4
34787: PUSH
34788: LD_VAR 0 1
34792: ST_TO_ADDR
// end ;
34793: LD_VAR 0 4
34797: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34798: LD_INT 0
34800: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34801: LD_ADDR_VAR 0 5
34805: PUSH
34806: LD_VAR 0 1
34810: PPUSH
34811: CALL_OW 250
34815: PPUSH
34816: LD_VAR 0 1
34820: PPUSH
34821: CALL_OW 251
34825: PPUSH
34826: LD_VAR 0 2
34830: PPUSH
34831: LD_VAR 0 3
34835: PPUSH
34836: LD_VAR 0 4
34840: PPUSH
34841: CALL 34851 0 5
34845: ST_TO_ADDR
// end ;
34846: LD_VAR 0 5
34850: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34851: LD_INT 0
34853: PPUSH
34854: PPUSH
34855: PPUSH
34856: PPUSH
// if not list then
34857: LD_VAR 0 3
34861: NOT
34862: IFFALSE 34866
// exit ;
34864: GO 35254
// result := [ ] ;
34866: LD_ADDR_VAR 0 6
34870: PUSH
34871: EMPTY
34872: ST_TO_ADDR
// for i in list do
34873: LD_ADDR_VAR 0 7
34877: PUSH
34878: LD_VAR 0 3
34882: PUSH
34883: FOR_IN
34884: IFFALSE 35086
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34886: LD_ADDR_VAR 0 9
34890: PUSH
34891: LD_VAR 0 7
34895: PPUSH
34896: LD_VAR 0 1
34900: PPUSH
34901: LD_VAR 0 2
34905: PPUSH
34906: CALL_OW 297
34910: ST_TO_ADDR
// if not result then
34911: LD_VAR 0 6
34915: NOT
34916: IFFALSE 34942
// result := [ [ i , tmp ] ] else
34918: LD_ADDR_VAR 0 6
34922: PUSH
34923: LD_VAR 0 7
34927: PUSH
34928: LD_VAR 0 9
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: EMPTY
34938: LIST
34939: ST_TO_ADDR
34940: GO 35084
// begin if result [ result ] [ 2 ] < tmp then
34942: LD_VAR 0 6
34946: PUSH
34947: LD_VAR 0 6
34951: ARRAY
34952: PUSH
34953: LD_INT 2
34955: ARRAY
34956: PUSH
34957: LD_VAR 0 9
34961: LESS
34962: IFFALSE 35004
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34964: LD_ADDR_VAR 0 6
34968: PUSH
34969: LD_VAR 0 6
34973: PPUSH
34974: LD_VAR 0 6
34978: PUSH
34979: LD_INT 1
34981: PLUS
34982: PPUSH
34983: LD_VAR 0 7
34987: PUSH
34988: LD_VAR 0 9
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PPUSH
34997: CALL_OW 2
35001: ST_TO_ADDR
35002: GO 35084
// for j = 1 to result do
35004: LD_ADDR_VAR 0 8
35008: PUSH
35009: DOUBLE
35010: LD_INT 1
35012: DEC
35013: ST_TO_ADDR
35014: LD_VAR 0 6
35018: PUSH
35019: FOR_TO
35020: IFFALSE 35082
// begin if tmp < result [ j ] [ 2 ] then
35022: LD_VAR 0 9
35026: PUSH
35027: LD_VAR 0 6
35031: PUSH
35032: LD_VAR 0 8
35036: ARRAY
35037: PUSH
35038: LD_INT 2
35040: ARRAY
35041: LESS
35042: IFFALSE 35080
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35044: LD_ADDR_VAR 0 6
35048: PUSH
35049: LD_VAR 0 6
35053: PPUSH
35054: LD_VAR 0 8
35058: PPUSH
35059: LD_VAR 0 7
35063: PUSH
35064: LD_VAR 0 9
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PPUSH
35073: CALL_OW 2
35077: ST_TO_ADDR
// break ;
35078: GO 35082
// end ; end ;
35080: GO 35019
35082: POP
35083: POP
// end ; end ;
35084: GO 34883
35086: POP
35087: POP
// if result and not asc then
35088: LD_VAR 0 6
35092: PUSH
35093: LD_VAR 0 4
35097: NOT
35098: AND
35099: IFFALSE 35174
// begin tmp := result ;
35101: LD_ADDR_VAR 0 9
35105: PUSH
35106: LD_VAR 0 6
35110: ST_TO_ADDR
// for i = tmp downto 1 do
35111: LD_ADDR_VAR 0 7
35115: PUSH
35116: DOUBLE
35117: LD_VAR 0 9
35121: INC
35122: ST_TO_ADDR
35123: LD_INT 1
35125: PUSH
35126: FOR_DOWNTO
35127: IFFALSE 35172
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35129: LD_ADDR_VAR 0 6
35133: PUSH
35134: LD_VAR 0 6
35138: PPUSH
35139: LD_VAR 0 9
35143: PUSH
35144: LD_VAR 0 7
35148: MINUS
35149: PUSH
35150: LD_INT 1
35152: PLUS
35153: PPUSH
35154: LD_VAR 0 9
35158: PUSH
35159: LD_VAR 0 7
35163: ARRAY
35164: PPUSH
35165: CALL_OW 1
35169: ST_TO_ADDR
35170: GO 35126
35172: POP
35173: POP
// end ; tmp := [ ] ;
35174: LD_ADDR_VAR 0 9
35178: PUSH
35179: EMPTY
35180: ST_TO_ADDR
// if mode then
35181: LD_VAR 0 5
35185: IFFALSE 35254
// begin for i = 1 to result do
35187: LD_ADDR_VAR 0 7
35191: PUSH
35192: DOUBLE
35193: LD_INT 1
35195: DEC
35196: ST_TO_ADDR
35197: LD_VAR 0 6
35201: PUSH
35202: FOR_TO
35203: IFFALSE 35242
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35205: LD_ADDR_VAR 0 9
35209: PUSH
35210: LD_VAR 0 9
35214: PPUSH
35215: LD_VAR 0 7
35219: PPUSH
35220: LD_VAR 0 6
35224: PUSH
35225: LD_VAR 0 7
35229: ARRAY
35230: PUSH
35231: LD_INT 1
35233: ARRAY
35234: PPUSH
35235: CALL_OW 1
35239: ST_TO_ADDR
35240: GO 35202
35242: POP
35243: POP
// result := tmp ;
35244: LD_ADDR_VAR 0 6
35248: PUSH
35249: LD_VAR 0 9
35253: ST_TO_ADDR
// end ; end ;
35254: LD_VAR 0 6
35258: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35259: LD_INT 0
35261: PPUSH
35262: PPUSH
35263: PPUSH
35264: PPUSH
35265: PPUSH
35266: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35267: LD_ADDR_VAR 0 5
35271: PUSH
35272: LD_INT 0
35274: PUSH
35275: LD_INT 0
35277: PUSH
35278: LD_INT 0
35280: PUSH
35281: EMPTY
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: ST_TO_ADDR
// if not x or not y then
35289: LD_VAR 0 2
35293: NOT
35294: PUSH
35295: LD_VAR 0 3
35299: NOT
35300: OR
35301: IFFALSE 35305
// exit ;
35303: GO 36955
// if not range then
35305: LD_VAR 0 4
35309: NOT
35310: IFFALSE 35320
// range := 10 ;
35312: LD_ADDR_VAR 0 4
35316: PUSH
35317: LD_INT 10
35319: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35320: LD_ADDR_VAR 0 8
35324: PUSH
35325: LD_INT 81
35327: PUSH
35328: LD_VAR 0 1
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 92
35339: PUSH
35340: LD_VAR 0 2
35344: PUSH
35345: LD_VAR 0 3
35349: PUSH
35350: LD_VAR 0 4
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 3
35363: PUSH
35364: LD_INT 21
35366: PUSH
35367: LD_INT 3
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: LIST
35382: PPUSH
35383: CALL_OW 69
35387: ST_TO_ADDR
// if not tmp then
35388: LD_VAR 0 8
35392: NOT
35393: IFFALSE 35397
// exit ;
35395: GO 36955
// for i in tmp do
35397: LD_ADDR_VAR 0 6
35401: PUSH
35402: LD_VAR 0 8
35406: PUSH
35407: FOR_IN
35408: IFFALSE 36930
// begin points := [ 0 , 0 , 0 ] ;
35410: LD_ADDR_VAR 0 9
35414: PUSH
35415: LD_INT 0
35417: PUSH
35418: LD_INT 0
35420: PUSH
35421: LD_INT 0
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: LIST
35428: ST_TO_ADDR
// bpoints := 1 ;
35429: LD_ADDR_VAR 0 10
35433: PUSH
35434: LD_INT 1
35436: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35437: LD_VAR 0 6
35441: PPUSH
35442: CALL_OW 247
35446: PUSH
35447: LD_INT 1
35449: DOUBLE
35450: EQUAL
35451: IFTRUE 35455
35453: GO 36033
35455: POP
// begin if GetClass ( i ) = 1 then
35456: LD_VAR 0 6
35460: PPUSH
35461: CALL_OW 257
35465: PUSH
35466: LD_INT 1
35468: EQUAL
35469: IFFALSE 35490
// points := [ 10 , 5 , 3 ] ;
35471: LD_ADDR_VAR 0 9
35475: PUSH
35476: LD_INT 10
35478: PUSH
35479: LD_INT 5
35481: PUSH
35482: LD_INT 3
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: LIST
35489: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35490: LD_VAR 0 6
35494: PPUSH
35495: CALL_OW 257
35499: PUSH
35500: LD_INT 2
35502: PUSH
35503: LD_INT 3
35505: PUSH
35506: LD_INT 4
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: LIST
35513: IN
35514: IFFALSE 35535
// points := [ 3 , 2 , 1 ] ;
35516: LD_ADDR_VAR 0 9
35520: PUSH
35521: LD_INT 3
35523: PUSH
35524: LD_INT 2
35526: PUSH
35527: LD_INT 1
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: LIST
35534: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35535: LD_VAR 0 6
35539: PPUSH
35540: CALL_OW 257
35544: PUSH
35545: LD_INT 5
35547: EQUAL
35548: IFFALSE 35569
// points := [ 130 , 5 , 2 ] ;
35550: LD_ADDR_VAR 0 9
35554: PUSH
35555: LD_INT 130
35557: PUSH
35558: LD_INT 5
35560: PUSH
35561: LD_INT 2
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: LIST
35568: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35569: LD_VAR 0 6
35573: PPUSH
35574: CALL_OW 257
35578: PUSH
35579: LD_INT 8
35581: EQUAL
35582: IFFALSE 35603
// points := [ 35 , 35 , 30 ] ;
35584: LD_ADDR_VAR 0 9
35588: PUSH
35589: LD_INT 35
35591: PUSH
35592: LD_INT 35
35594: PUSH
35595: LD_INT 30
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: LIST
35602: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35603: LD_VAR 0 6
35607: PPUSH
35608: CALL_OW 257
35612: PUSH
35613: LD_INT 9
35615: EQUAL
35616: IFFALSE 35637
// points := [ 20 , 55 , 40 ] ;
35618: LD_ADDR_VAR 0 9
35622: PUSH
35623: LD_INT 20
35625: PUSH
35626: LD_INT 55
35628: PUSH
35629: LD_INT 40
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: LIST
35636: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35637: LD_VAR 0 6
35641: PPUSH
35642: CALL_OW 257
35646: PUSH
35647: LD_INT 12
35649: PUSH
35650: LD_INT 16
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: IN
35657: IFFALSE 35678
// points := [ 5 , 3 , 2 ] ;
35659: LD_ADDR_VAR 0 9
35663: PUSH
35664: LD_INT 5
35666: PUSH
35667: LD_INT 3
35669: PUSH
35670: LD_INT 2
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: LIST
35677: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35678: LD_VAR 0 6
35682: PPUSH
35683: CALL_OW 257
35687: PUSH
35688: LD_INT 17
35690: EQUAL
35691: IFFALSE 35712
// points := [ 100 , 50 , 75 ] ;
35693: LD_ADDR_VAR 0 9
35697: PUSH
35698: LD_INT 100
35700: PUSH
35701: LD_INT 50
35703: PUSH
35704: LD_INT 75
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: LIST
35711: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35712: LD_VAR 0 6
35716: PPUSH
35717: CALL_OW 257
35721: PUSH
35722: LD_INT 15
35724: EQUAL
35725: IFFALSE 35746
// points := [ 10 , 5 , 3 ] ;
35727: LD_ADDR_VAR 0 9
35731: PUSH
35732: LD_INT 10
35734: PUSH
35735: LD_INT 5
35737: PUSH
35738: LD_INT 3
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: LIST
35745: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35746: LD_VAR 0 6
35750: PPUSH
35751: CALL_OW 257
35755: PUSH
35756: LD_INT 14
35758: EQUAL
35759: IFFALSE 35780
// points := [ 10 , 0 , 0 ] ;
35761: LD_ADDR_VAR 0 9
35765: PUSH
35766: LD_INT 10
35768: PUSH
35769: LD_INT 0
35771: PUSH
35772: LD_INT 0
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: LIST
35779: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35780: LD_VAR 0 6
35784: PPUSH
35785: CALL_OW 257
35789: PUSH
35790: LD_INT 11
35792: EQUAL
35793: IFFALSE 35814
// points := [ 30 , 10 , 5 ] ;
35795: LD_ADDR_VAR 0 9
35799: PUSH
35800: LD_INT 30
35802: PUSH
35803: LD_INT 10
35805: PUSH
35806: LD_INT 5
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: LIST
35813: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35814: LD_VAR 0 1
35818: PPUSH
35819: LD_INT 5
35821: PPUSH
35822: CALL_OW 321
35826: PUSH
35827: LD_INT 2
35829: EQUAL
35830: IFFALSE 35847
// bpoints := bpoints * 1.8 ;
35832: LD_ADDR_VAR 0 10
35836: PUSH
35837: LD_VAR 0 10
35841: PUSH
35842: LD_REAL  1.80000000000000E+0000
35845: MUL
35846: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35847: LD_VAR 0 6
35851: PPUSH
35852: CALL_OW 257
35856: PUSH
35857: LD_INT 1
35859: PUSH
35860: LD_INT 2
35862: PUSH
35863: LD_INT 3
35865: PUSH
35866: LD_INT 4
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: IN
35875: PUSH
35876: LD_VAR 0 1
35880: PPUSH
35881: LD_INT 51
35883: PPUSH
35884: CALL_OW 321
35888: PUSH
35889: LD_INT 2
35891: EQUAL
35892: AND
35893: IFFALSE 35910
// bpoints := bpoints * 1.2 ;
35895: LD_ADDR_VAR 0 10
35899: PUSH
35900: LD_VAR 0 10
35904: PUSH
35905: LD_REAL  1.20000000000000E+0000
35908: MUL
35909: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35910: LD_VAR 0 6
35914: PPUSH
35915: CALL_OW 257
35919: PUSH
35920: LD_INT 5
35922: PUSH
35923: LD_INT 7
35925: PUSH
35926: LD_INT 9
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: LIST
35933: IN
35934: PUSH
35935: LD_VAR 0 1
35939: PPUSH
35940: LD_INT 52
35942: PPUSH
35943: CALL_OW 321
35947: PUSH
35948: LD_INT 2
35950: EQUAL
35951: AND
35952: IFFALSE 35969
// bpoints := bpoints * 1.5 ;
35954: LD_ADDR_VAR 0 10
35958: PUSH
35959: LD_VAR 0 10
35963: PUSH
35964: LD_REAL  1.50000000000000E+0000
35967: MUL
35968: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35969: LD_VAR 0 1
35973: PPUSH
35974: LD_INT 66
35976: PPUSH
35977: CALL_OW 321
35981: PUSH
35982: LD_INT 2
35984: EQUAL
35985: IFFALSE 36002
// bpoints := bpoints * 1.1 ;
35987: LD_ADDR_VAR 0 10
35991: PUSH
35992: LD_VAR 0 10
35996: PUSH
35997: LD_REAL  1.10000000000000E+0000
36000: MUL
36001: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36002: LD_ADDR_VAR 0 10
36006: PUSH
36007: LD_VAR 0 10
36011: PUSH
36012: LD_VAR 0 6
36016: PPUSH
36017: LD_INT 1
36019: PPUSH
36020: CALL_OW 259
36024: PUSH
36025: LD_REAL  1.15000000000000E+0000
36028: MUL
36029: MUL
36030: ST_TO_ADDR
// end ; unit_vehicle :
36031: GO 36859
36033: LD_INT 2
36035: DOUBLE
36036: EQUAL
36037: IFTRUE 36041
36039: GO 36847
36041: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36042: LD_VAR 0 6
36046: PPUSH
36047: CALL_OW 264
36051: PUSH
36052: LD_INT 2
36054: PUSH
36055: LD_INT 42
36057: PUSH
36058: LD_INT 24
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: LIST
36065: IN
36066: IFFALSE 36087
// points := [ 25 , 5 , 3 ] ;
36068: LD_ADDR_VAR 0 9
36072: PUSH
36073: LD_INT 25
36075: PUSH
36076: LD_INT 5
36078: PUSH
36079: LD_INT 3
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: LIST
36086: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36087: LD_VAR 0 6
36091: PPUSH
36092: CALL_OW 264
36096: PUSH
36097: LD_INT 4
36099: PUSH
36100: LD_INT 43
36102: PUSH
36103: LD_INT 25
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: LIST
36110: IN
36111: IFFALSE 36132
// points := [ 40 , 15 , 5 ] ;
36113: LD_ADDR_VAR 0 9
36117: PUSH
36118: LD_INT 40
36120: PUSH
36121: LD_INT 15
36123: PUSH
36124: LD_INT 5
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: LIST
36131: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36132: LD_VAR 0 6
36136: PPUSH
36137: CALL_OW 264
36141: PUSH
36142: LD_INT 3
36144: PUSH
36145: LD_INT 23
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: IN
36152: IFFALSE 36173
// points := [ 7 , 25 , 8 ] ;
36154: LD_ADDR_VAR 0 9
36158: PUSH
36159: LD_INT 7
36161: PUSH
36162: LD_INT 25
36164: PUSH
36165: LD_INT 8
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: LIST
36172: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36173: LD_VAR 0 6
36177: PPUSH
36178: CALL_OW 264
36182: PUSH
36183: LD_INT 5
36185: PUSH
36186: LD_INT 27
36188: PUSH
36189: LD_INT 44
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: LIST
36196: IN
36197: IFFALSE 36218
// points := [ 14 , 50 , 16 ] ;
36199: LD_ADDR_VAR 0 9
36203: PUSH
36204: LD_INT 14
36206: PUSH
36207: LD_INT 50
36209: PUSH
36210: LD_INT 16
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: LIST
36217: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36218: LD_VAR 0 6
36222: PPUSH
36223: CALL_OW 264
36227: PUSH
36228: LD_INT 6
36230: PUSH
36231: LD_INT 46
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: IN
36238: IFFALSE 36259
// points := [ 32 , 120 , 70 ] ;
36240: LD_ADDR_VAR 0 9
36244: PUSH
36245: LD_INT 32
36247: PUSH
36248: LD_INT 120
36250: PUSH
36251: LD_INT 70
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: LIST
36258: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36259: LD_VAR 0 6
36263: PPUSH
36264: CALL_OW 264
36268: PUSH
36269: LD_INT 7
36271: PUSH
36272: LD_INT 28
36274: PUSH
36275: LD_INT 45
36277: PUSH
36278: LD_INT 92
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: IN
36287: IFFALSE 36308
// points := [ 35 , 20 , 45 ] ;
36289: LD_ADDR_VAR 0 9
36293: PUSH
36294: LD_INT 35
36296: PUSH
36297: LD_INT 20
36299: PUSH
36300: LD_INT 45
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: LIST
36307: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36308: LD_VAR 0 6
36312: PPUSH
36313: CALL_OW 264
36317: PUSH
36318: LD_INT 47
36320: PUSH
36321: EMPTY
36322: LIST
36323: IN
36324: IFFALSE 36345
// points := [ 67 , 45 , 75 ] ;
36326: LD_ADDR_VAR 0 9
36330: PUSH
36331: LD_INT 67
36333: PUSH
36334: LD_INT 45
36336: PUSH
36337: LD_INT 75
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: LIST
36344: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36345: LD_VAR 0 6
36349: PPUSH
36350: CALL_OW 264
36354: PUSH
36355: LD_INT 26
36357: PUSH
36358: EMPTY
36359: LIST
36360: IN
36361: IFFALSE 36382
// points := [ 120 , 30 , 80 ] ;
36363: LD_ADDR_VAR 0 9
36367: PUSH
36368: LD_INT 120
36370: PUSH
36371: LD_INT 30
36373: PUSH
36374: LD_INT 80
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: LIST
36381: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36382: LD_VAR 0 6
36386: PPUSH
36387: CALL_OW 264
36391: PUSH
36392: LD_INT 22
36394: PUSH
36395: EMPTY
36396: LIST
36397: IN
36398: IFFALSE 36419
// points := [ 40 , 1 , 1 ] ;
36400: LD_ADDR_VAR 0 9
36404: PUSH
36405: LD_INT 40
36407: PUSH
36408: LD_INT 1
36410: PUSH
36411: LD_INT 1
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: LIST
36418: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36419: LD_VAR 0 6
36423: PPUSH
36424: CALL_OW 264
36428: PUSH
36429: LD_INT 29
36431: PUSH
36432: EMPTY
36433: LIST
36434: IN
36435: IFFALSE 36456
// points := [ 70 , 200 , 400 ] ;
36437: LD_ADDR_VAR 0 9
36441: PUSH
36442: LD_INT 70
36444: PUSH
36445: LD_INT 200
36447: PUSH
36448: LD_INT 400
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: LIST
36455: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36456: LD_VAR 0 6
36460: PPUSH
36461: CALL_OW 264
36465: PUSH
36466: LD_INT 14
36468: PUSH
36469: LD_INT 53
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: IN
36476: IFFALSE 36497
// points := [ 40 , 10 , 20 ] ;
36478: LD_ADDR_VAR 0 9
36482: PUSH
36483: LD_INT 40
36485: PUSH
36486: LD_INT 10
36488: PUSH
36489: LD_INT 20
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: LIST
36496: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36497: LD_VAR 0 6
36501: PPUSH
36502: CALL_OW 264
36506: PUSH
36507: LD_INT 9
36509: PUSH
36510: EMPTY
36511: LIST
36512: IN
36513: IFFALSE 36534
// points := [ 5 , 70 , 20 ] ;
36515: LD_ADDR_VAR 0 9
36519: PUSH
36520: LD_INT 5
36522: PUSH
36523: LD_INT 70
36525: PUSH
36526: LD_INT 20
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: LIST
36533: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36534: LD_VAR 0 6
36538: PPUSH
36539: CALL_OW 264
36543: PUSH
36544: LD_INT 10
36546: PUSH
36547: EMPTY
36548: LIST
36549: IN
36550: IFFALSE 36571
// points := [ 35 , 110 , 70 ] ;
36552: LD_ADDR_VAR 0 9
36556: PUSH
36557: LD_INT 35
36559: PUSH
36560: LD_INT 110
36562: PUSH
36563: LD_INT 70
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: LIST
36570: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36571: LD_VAR 0 6
36575: PPUSH
36576: CALL_OW 265
36580: PUSH
36581: LD_INT 25
36583: EQUAL
36584: IFFALSE 36605
// points := [ 80 , 65 , 100 ] ;
36586: LD_ADDR_VAR 0 9
36590: PUSH
36591: LD_INT 80
36593: PUSH
36594: LD_INT 65
36596: PUSH
36597: LD_INT 100
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: LIST
36604: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36605: LD_VAR 0 6
36609: PPUSH
36610: CALL_OW 263
36614: PUSH
36615: LD_INT 1
36617: EQUAL
36618: IFFALSE 36653
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36620: LD_ADDR_VAR 0 10
36624: PUSH
36625: LD_VAR 0 10
36629: PUSH
36630: LD_VAR 0 6
36634: PPUSH
36635: CALL_OW 311
36639: PPUSH
36640: LD_INT 3
36642: PPUSH
36643: CALL_OW 259
36647: PUSH
36648: LD_INT 4
36650: MUL
36651: MUL
36652: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36653: LD_VAR 0 6
36657: PPUSH
36658: CALL_OW 263
36662: PUSH
36663: LD_INT 2
36665: EQUAL
36666: IFFALSE 36717
// begin j := IsControledBy ( i ) ;
36668: LD_ADDR_VAR 0 7
36672: PUSH
36673: LD_VAR 0 6
36677: PPUSH
36678: CALL_OW 312
36682: ST_TO_ADDR
// if j then
36683: LD_VAR 0 7
36687: IFFALSE 36717
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36689: LD_ADDR_VAR 0 10
36693: PUSH
36694: LD_VAR 0 10
36698: PUSH
36699: LD_VAR 0 7
36703: PPUSH
36704: LD_INT 3
36706: PPUSH
36707: CALL_OW 259
36711: PUSH
36712: LD_INT 3
36714: MUL
36715: MUL
36716: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36717: LD_VAR 0 6
36721: PPUSH
36722: CALL_OW 264
36726: PUSH
36727: LD_INT 5
36729: PUSH
36730: LD_INT 6
36732: PUSH
36733: LD_INT 46
36735: PUSH
36736: LD_INT 44
36738: PUSH
36739: LD_INT 47
36741: PUSH
36742: LD_INT 45
36744: PUSH
36745: LD_INT 28
36747: PUSH
36748: LD_INT 7
36750: PUSH
36751: LD_INT 27
36753: PUSH
36754: LD_INT 29
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: IN
36769: PUSH
36770: LD_VAR 0 1
36774: PPUSH
36775: LD_INT 52
36777: PPUSH
36778: CALL_OW 321
36782: PUSH
36783: LD_INT 2
36785: EQUAL
36786: AND
36787: IFFALSE 36804
// bpoints := bpoints * 1.2 ;
36789: LD_ADDR_VAR 0 10
36793: PUSH
36794: LD_VAR 0 10
36798: PUSH
36799: LD_REAL  1.20000000000000E+0000
36802: MUL
36803: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36804: LD_VAR 0 6
36808: PPUSH
36809: CALL_OW 264
36813: PUSH
36814: LD_INT 6
36816: PUSH
36817: LD_INT 46
36819: PUSH
36820: LD_INT 47
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: LIST
36827: IN
36828: IFFALSE 36845
// bpoints := bpoints * 1.2 ;
36830: LD_ADDR_VAR 0 10
36834: PUSH
36835: LD_VAR 0 10
36839: PUSH
36840: LD_REAL  1.20000000000000E+0000
36843: MUL
36844: ST_TO_ADDR
// end ; unit_building :
36845: GO 36859
36847: LD_INT 3
36849: DOUBLE
36850: EQUAL
36851: IFTRUE 36855
36853: GO 36858
36855: POP
// ; end ;
36856: GO 36859
36858: POP
// for j = 1 to 3 do
36859: LD_ADDR_VAR 0 7
36863: PUSH
36864: DOUBLE
36865: LD_INT 1
36867: DEC
36868: ST_TO_ADDR
36869: LD_INT 3
36871: PUSH
36872: FOR_TO
36873: IFFALSE 36926
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36875: LD_ADDR_VAR 0 5
36879: PUSH
36880: LD_VAR 0 5
36884: PPUSH
36885: LD_VAR 0 7
36889: PPUSH
36890: LD_VAR 0 5
36894: PUSH
36895: LD_VAR 0 7
36899: ARRAY
36900: PUSH
36901: LD_VAR 0 9
36905: PUSH
36906: LD_VAR 0 7
36910: ARRAY
36911: PUSH
36912: LD_VAR 0 10
36916: MUL
36917: PLUS
36918: PPUSH
36919: CALL_OW 1
36923: ST_TO_ADDR
36924: GO 36872
36926: POP
36927: POP
// end ;
36928: GO 35407
36930: POP
36931: POP
// result := Replace ( result , 4 , tmp ) ;
36932: LD_ADDR_VAR 0 5
36936: PUSH
36937: LD_VAR 0 5
36941: PPUSH
36942: LD_INT 4
36944: PPUSH
36945: LD_VAR 0 8
36949: PPUSH
36950: CALL_OW 1
36954: ST_TO_ADDR
// end ;
36955: LD_VAR 0 5
36959: RET
// export function DangerAtRange ( unit , range ) ; begin
36960: LD_INT 0
36962: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36963: LD_ADDR_VAR 0 3
36967: PUSH
36968: LD_VAR 0 1
36972: PPUSH
36973: CALL_OW 255
36977: PPUSH
36978: LD_VAR 0 1
36982: PPUSH
36983: CALL_OW 250
36987: PPUSH
36988: LD_VAR 0 1
36992: PPUSH
36993: CALL_OW 251
36997: PPUSH
36998: LD_VAR 0 2
37002: PPUSH
37003: CALL 35259 0 4
37007: ST_TO_ADDR
// end ;
37008: LD_VAR 0 3
37012: RET
// export function DangerInArea ( side , area ) ; begin
37013: LD_INT 0
37015: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37016: LD_ADDR_VAR 0 3
37020: PUSH
37021: LD_VAR 0 2
37025: PPUSH
37026: LD_INT 81
37028: PUSH
37029: LD_VAR 0 1
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PPUSH
37038: CALL_OW 70
37042: ST_TO_ADDR
// end ;
37043: LD_VAR 0 3
37047: RET
// export function IsExtension ( b ) ; begin
37048: LD_INT 0
37050: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37051: LD_ADDR_VAR 0 2
37055: PUSH
37056: LD_VAR 0 1
37060: PUSH
37061: LD_INT 23
37063: PUSH
37064: LD_INT 20
37066: PUSH
37067: LD_INT 22
37069: PUSH
37070: LD_INT 17
37072: PUSH
37073: LD_INT 24
37075: PUSH
37076: LD_INT 21
37078: PUSH
37079: LD_INT 19
37081: PUSH
37082: LD_INT 16
37084: PUSH
37085: LD_INT 25
37087: PUSH
37088: LD_INT 18
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: IN
37103: ST_TO_ADDR
// end ;
37104: LD_VAR 0 2
37108: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37109: LD_INT 0
37111: PPUSH
37112: PPUSH
37113: PPUSH
// result := [ ] ;
37114: LD_ADDR_VAR 0 4
37118: PUSH
37119: EMPTY
37120: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37121: LD_ADDR_VAR 0 5
37125: PUSH
37126: LD_VAR 0 2
37130: PPUSH
37131: LD_INT 21
37133: PUSH
37134: LD_INT 3
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PPUSH
37141: CALL_OW 70
37145: ST_TO_ADDR
// if not tmp then
37146: LD_VAR 0 5
37150: NOT
37151: IFFALSE 37155
// exit ;
37153: GO 37219
// if checkLink then
37155: LD_VAR 0 3
37159: IFFALSE 37209
// begin for i in tmp do
37161: LD_ADDR_VAR 0 6
37165: PUSH
37166: LD_VAR 0 5
37170: PUSH
37171: FOR_IN
37172: IFFALSE 37207
// if GetBase ( i ) <> base then
37174: LD_VAR 0 6
37178: PPUSH
37179: CALL_OW 274
37183: PUSH
37184: LD_VAR 0 1
37188: NONEQUAL
37189: IFFALSE 37205
// ComLinkToBase ( base , i ) ;
37191: LD_VAR 0 1
37195: PPUSH
37196: LD_VAR 0 6
37200: PPUSH
37201: CALL_OW 169
37205: GO 37171
37207: POP
37208: POP
// end ; result := tmp ;
37209: LD_ADDR_VAR 0 4
37213: PUSH
37214: LD_VAR 0 5
37218: ST_TO_ADDR
// end ;
37219: LD_VAR 0 4
37223: RET
// export function ComComplete ( units , b ) ; var i ; begin
37224: LD_INT 0
37226: PPUSH
37227: PPUSH
// if not units then
37228: LD_VAR 0 1
37232: NOT
37233: IFFALSE 37237
// exit ;
37235: GO 37327
// for i in units do
37237: LD_ADDR_VAR 0 4
37241: PUSH
37242: LD_VAR 0 1
37246: PUSH
37247: FOR_IN
37248: IFFALSE 37325
// if BuildingStatus ( b ) = bs_build then
37250: LD_VAR 0 2
37254: PPUSH
37255: CALL_OW 461
37259: PUSH
37260: LD_INT 1
37262: EQUAL
37263: IFFALSE 37323
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37265: LD_VAR 0 4
37269: PPUSH
37270: LD_STRING h
37272: PUSH
37273: LD_VAR 0 2
37277: PPUSH
37278: CALL_OW 250
37282: PUSH
37283: LD_VAR 0 2
37287: PPUSH
37288: CALL_OW 251
37292: PUSH
37293: LD_VAR 0 2
37297: PUSH
37298: LD_INT 0
37300: PUSH
37301: LD_INT 0
37303: PUSH
37304: LD_INT 0
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: PUSH
37316: EMPTY
37317: LIST
37318: PPUSH
37319: CALL_OW 446
37323: GO 37247
37325: POP
37326: POP
// end ;
37327: LD_VAR 0 3
37331: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37332: LD_INT 0
37334: PPUSH
37335: PPUSH
37336: PPUSH
37337: PPUSH
37338: PPUSH
37339: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37340: LD_VAR 0 1
37344: NOT
37345: PUSH
37346: LD_VAR 0 1
37350: PPUSH
37351: CALL_OW 263
37355: PUSH
37356: LD_INT 2
37358: NONEQUAL
37359: OR
37360: IFFALSE 37364
// exit ;
37362: GO 37680
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37364: LD_ADDR_VAR 0 6
37368: PUSH
37369: LD_INT 22
37371: PUSH
37372: LD_VAR 0 1
37376: PPUSH
37377: CALL_OW 255
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 2
37388: PUSH
37389: LD_INT 30
37391: PUSH
37392: LD_INT 36
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 34
37401: PUSH
37402: LD_INT 31
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: LIST
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PPUSH
37418: CALL_OW 69
37422: ST_TO_ADDR
// if not tmp then
37423: LD_VAR 0 6
37427: NOT
37428: IFFALSE 37432
// exit ;
37430: GO 37680
// result := [ ] ;
37432: LD_ADDR_VAR 0 2
37436: PUSH
37437: EMPTY
37438: ST_TO_ADDR
// for i in tmp do
37439: LD_ADDR_VAR 0 3
37443: PUSH
37444: LD_VAR 0 6
37448: PUSH
37449: FOR_IN
37450: IFFALSE 37521
// begin t := UnitsInside ( i ) ;
37452: LD_ADDR_VAR 0 4
37456: PUSH
37457: LD_VAR 0 3
37461: PPUSH
37462: CALL_OW 313
37466: ST_TO_ADDR
// if t then
37467: LD_VAR 0 4
37471: IFFALSE 37519
// for j in t do
37473: LD_ADDR_VAR 0 7
37477: PUSH
37478: LD_VAR 0 4
37482: PUSH
37483: FOR_IN
37484: IFFALSE 37517
// result := Replace ( result , result + 1 , j ) ;
37486: LD_ADDR_VAR 0 2
37490: PUSH
37491: LD_VAR 0 2
37495: PPUSH
37496: LD_VAR 0 2
37500: PUSH
37501: LD_INT 1
37503: PLUS
37504: PPUSH
37505: LD_VAR 0 7
37509: PPUSH
37510: CALL_OW 1
37514: ST_TO_ADDR
37515: GO 37483
37517: POP
37518: POP
// end ;
37519: GO 37449
37521: POP
37522: POP
// if not result then
37523: LD_VAR 0 2
37527: NOT
37528: IFFALSE 37532
// exit ;
37530: GO 37680
// mech := result [ 1 ] ;
37532: LD_ADDR_VAR 0 5
37536: PUSH
37537: LD_VAR 0 2
37541: PUSH
37542: LD_INT 1
37544: ARRAY
37545: ST_TO_ADDR
// if result > 1 then
37546: LD_VAR 0 2
37550: PUSH
37551: LD_INT 1
37553: GREATER
37554: IFFALSE 37666
// begin for i = 2 to result do
37556: LD_ADDR_VAR 0 3
37560: PUSH
37561: DOUBLE
37562: LD_INT 2
37564: DEC
37565: ST_TO_ADDR
37566: LD_VAR 0 2
37570: PUSH
37571: FOR_TO
37572: IFFALSE 37664
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37574: LD_ADDR_VAR 0 4
37578: PUSH
37579: LD_VAR 0 2
37583: PUSH
37584: LD_VAR 0 3
37588: ARRAY
37589: PPUSH
37590: LD_INT 3
37592: PPUSH
37593: CALL_OW 259
37597: PUSH
37598: LD_VAR 0 2
37602: PUSH
37603: LD_VAR 0 3
37607: ARRAY
37608: PPUSH
37609: CALL_OW 432
37613: MINUS
37614: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37615: LD_VAR 0 4
37619: PUSH
37620: LD_VAR 0 5
37624: PPUSH
37625: LD_INT 3
37627: PPUSH
37628: CALL_OW 259
37632: PUSH
37633: LD_VAR 0 5
37637: PPUSH
37638: CALL_OW 432
37642: MINUS
37643: GREATEREQUAL
37644: IFFALSE 37662
// mech := result [ i ] ;
37646: LD_ADDR_VAR 0 5
37650: PUSH
37651: LD_VAR 0 2
37655: PUSH
37656: LD_VAR 0 3
37660: ARRAY
37661: ST_TO_ADDR
// end ;
37662: GO 37571
37664: POP
37665: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37666: LD_VAR 0 1
37670: PPUSH
37671: LD_VAR 0 5
37675: PPUSH
37676: CALL_OW 135
// end ;
37680: LD_VAR 0 2
37684: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37685: LD_INT 0
37687: PPUSH
37688: PPUSH
37689: PPUSH
37690: PPUSH
37691: PPUSH
37692: PPUSH
37693: PPUSH
37694: PPUSH
37695: PPUSH
37696: PPUSH
37697: PPUSH
37698: PPUSH
37699: PPUSH
// result := [ ] ;
37700: LD_ADDR_VAR 0 7
37704: PUSH
37705: EMPTY
37706: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37707: LD_VAR 0 1
37711: PPUSH
37712: CALL_OW 266
37716: PUSH
37717: LD_INT 0
37719: PUSH
37720: LD_INT 1
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: IN
37727: NOT
37728: IFFALSE 37732
// exit ;
37730: GO 39366
// if name then
37732: LD_VAR 0 3
37736: IFFALSE 37752
// SetBName ( base_dep , name ) ;
37738: LD_VAR 0 1
37742: PPUSH
37743: LD_VAR 0 3
37747: PPUSH
37748: CALL_OW 500
// base := GetBase ( base_dep ) ;
37752: LD_ADDR_VAR 0 15
37756: PUSH
37757: LD_VAR 0 1
37761: PPUSH
37762: CALL_OW 274
37766: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37767: LD_ADDR_VAR 0 16
37771: PUSH
37772: LD_VAR 0 1
37776: PPUSH
37777: CALL_OW 255
37781: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37782: LD_ADDR_VAR 0 17
37786: PUSH
37787: LD_VAR 0 1
37791: PPUSH
37792: CALL_OW 248
37796: ST_TO_ADDR
// if sources then
37797: LD_VAR 0 5
37801: IFFALSE 37848
// for i = 1 to 3 do
37803: LD_ADDR_VAR 0 8
37807: PUSH
37808: DOUBLE
37809: LD_INT 1
37811: DEC
37812: ST_TO_ADDR
37813: LD_INT 3
37815: PUSH
37816: FOR_TO
37817: IFFALSE 37846
// AddResourceType ( base , i , sources [ i ] ) ;
37819: LD_VAR 0 15
37823: PPUSH
37824: LD_VAR 0 8
37828: PPUSH
37829: LD_VAR 0 5
37833: PUSH
37834: LD_VAR 0 8
37838: ARRAY
37839: PPUSH
37840: CALL_OW 276
37844: GO 37816
37846: POP
37847: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37848: LD_ADDR_VAR 0 18
37852: PUSH
37853: LD_VAR 0 15
37857: PPUSH
37858: LD_VAR 0 2
37862: PPUSH
37863: LD_INT 1
37865: PPUSH
37866: CALL 37109 0 3
37870: ST_TO_ADDR
// InitHc ;
37871: CALL_OW 19
// InitUc ;
37875: CALL_OW 18
// uc_side := side ;
37879: LD_ADDR_OWVAR 20
37883: PUSH
37884: LD_VAR 0 16
37888: ST_TO_ADDR
// uc_nation := nation ;
37889: LD_ADDR_OWVAR 21
37893: PUSH
37894: LD_VAR 0 17
37898: ST_TO_ADDR
// if buildings then
37899: LD_VAR 0 18
37903: IFFALSE 39225
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37905: LD_ADDR_VAR 0 19
37909: PUSH
37910: LD_VAR 0 18
37914: PPUSH
37915: LD_INT 2
37917: PUSH
37918: LD_INT 30
37920: PUSH
37921: LD_INT 29
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 30
37930: PUSH
37931: LD_INT 30
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: LIST
37942: PPUSH
37943: CALL_OW 72
37947: ST_TO_ADDR
// if tmp then
37948: LD_VAR 0 19
37952: IFFALSE 38000
// for i in tmp do
37954: LD_ADDR_VAR 0 8
37958: PUSH
37959: LD_VAR 0 19
37963: PUSH
37964: FOR_IN
37965: IFFALSE 37998
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37967: LD_VAR 0 8
37971: PPUSH
37972: CALL_OW 250
37976: PPUSH
37977: LD_VAR 0 8
37981: PPUSH
37982: CALL_OW 251
37986: PPUSH
37987: LD_VAR 0 16
37991: PPUSH
37992: CALL_OW 441
37996: GO 37964
37998: POP
37999: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38000: LD_VAR 0 18
38004: PPUSH
38005: LD_INT 2
38007: PUSH
38008: LD_INT 30
38010: PUSH
38011: LD_INT 32
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 30
38020: PUSH
38021: LD_INT 33
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: LIST
38032: PPUSH
38033: CALL_OW 72
38037: IFFALSE 38125
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38039: LD_ADDR_VAR 0 8
38043: PUSH
38044: LD_VAR 0 18
38048: PPUSH
38049: LD_INT 2
38051: PUSH
38052: LD_INT 30
38054: PUSH
38055: LD_INT 32
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 30
38064: PUSH
38065: LD_INT 33
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: LIST
38076: PPUSH
38077: CALL_OW 72
38081: PUSH
38082: FOR_IN
38083: IFFALSE 38123
// begin if not GetBWeapon ( i ) then
38085: LD_VAR 0 8
38089: PPUSH
38090: CALL_OW 269
38094: NOT
38095: IFFALSE 38121
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38097: LD_VAR 0 8
38101: PPUSH
38102: LD_VAR 0 8
38106: PPUSH
38107: LD_VAR 0 2
38111: PPUSH
38112: CALL 39371 0 2
38116: PPUSH
38117: CALL_OW 431
// end ;
38121: GO 38082
38123: POP
38124: POP
// end ; for i = 1 to personel do
38125: LD_ADDR_VAR 0 8
38129: PUSH
38130: DOUBLE
38131: LD_INT 1
38133: DEC
38134: ST_TO_ADDR
38135: LD_VAR 0 6
38139: PUSH
38140: FOR_TO
38141: IFFALSE 39205
// begin if i > 4 then
38143: LD_VAR 0 8
38147: PUSH
38148: LD_INT 4
38150: GREATER
38151: IFFALSE 38155
// break ;
38153: GO 39205
// case i of 1 :
38155: LD_VAR 0 8
38159: PUSH
38160: LD_INT 1
38162: DOUBLE
38163: EQUAL
38164: IFTRUE 38168
38166: GO 38248
38168: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38169: LD_ADDR_VAR 0 12
38173: PUSH
38174: LD_VAR 0 18
38178: PPUSH
38179: LD_INT 22
38181: PUSH
38182: LD_VAR 0 16
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 58
38193: PUSH
38194: EMPTY
38195: LIST
38196: PUSH
38197: LD_INT 2
38199: PUSH
38200: LD_INT 30
38202: PUSH
38203: LD_INT 32
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 30
38212: PUSH
38213: LD_INT 4
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 30
38222: PUSH
38223: LD_INT 5
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: LIST
38240: PPUSH
38241: CALL_OW 72
38245: ST_TO_ADDR
38246: GO 38470
38248: LD_INT 2
38250: DOUBLE
38251: EQUAL
38252: IFTRUE 38256
38254: GO 38318
38256: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38257: LD_ADDR_VAR 0 12
38261: PUSH
38262: LD_VAR 0 18
38266: PPUSH
38267: LD_INT 22
38269: PUSH
38270: LD_VAR 0 16
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 2
38281: PUSH
38282: LD_INT 30
38284: PUSH
38285: LD_INT 0
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 30
38294: PUSH
38295: LD_INT 1
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: LIST
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PPUSH
38311: CALL_OW 72
38315: ST_TO_ADDR
38316: GO 38470
38318: LD_INT 3
38320: DOUBLE
38321: EQUAL
38322: IFTRUE 38326
38324: GO 38388
38326: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38327: LD_ADDR_VAR 0 12
38331: PUSH
38332: LD_VAR 0 18
38336: PPUSH
38337: LD_INT 22
38339: PUSH
38340: LD_VAR 0 16
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 2
38351: PUSH
38352: LD_INT 30
38354: PUSH
38355: LD_INT 2
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 30
38364: PUSH
38365: LD_INT 3
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: LIST
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PPUSH
38381: CALL_OW 72
38385: ST_TO_ADDR
38386: GO 38470
38388: LD_INT 4
38390: DOUBLE
38391: EQUAL
38392: IFTRUE 38396
38394: GO 38469
38396: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38397: LD_ADDR_VAR 0 12
38401: PUSH
38402: LD_VAR 0 18
38406: PPUSH
38407: LD_INT 22
38409: PUSH
38410: LD_VAR 0 16
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 2
38421: PUSH
38422: LD_INT 30
38424: PUSH
38425: LD_INT 6
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 30
38434: PUSH
38435: LD_INT 7
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 30
38444: PUSH
38445: LD_INT 8
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PPUSH
38462: CALL_OW 72
38466: ST_TO_ADDR
38467: GO 38470
38469: POP
// if i = 1 then
38470: LD_VAR 0 8
38474: PUSH
38475: LD_INT 1
38477: EQUAL
38478: IFFALSE 38589
// begin tmp := [ ] ;
38480: LD_ADDR_VAR 0 19
38484: PUSH
38485: EMPTY
38486: ST_TO_ADDR
// for j in f do
38487: LD_ADDR_VAR 0 9
38491: PUSH
38492: LD_VAR 0 12
38496: PUSH
38497: FOR_IN
38498: IFFALSE 38571
// if GetBType ( j ) = b_bunker then
38500: LD_VAR 0 9
38504: PPUSH
38505: CALL_OW 266
38509: PUSH
38510: LD_INT 32
38512: EQUAL
38513: IFFALSE 38540
// tmp := Insert ( tmp , 1 , j ) else
38515: LD_ADDR_VAR 0 19
38519: PUSH
38520: LD_VAR 0 19
38524: PPUSH
38525: LD_INT 1
38527: PPUSH
38528: LD_VAR 0 9
38532: PPUSH
38533: CALL_OW 2
38537: ST_TO_ADDR
38538: GO 38569
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38540: LD_ADDR_VAR 0 19
38544: PUSH
38545: LD_VAR 0 19
38549: PPUSH
38550: LD_VAR 0 19
38554: PUSH
38555: LD_INT 1
38557: PLUS
38558: PPUSH
38559: LD_VAR 0 9
38563: PPUSH
38564: CALL_OW 2
38568: ST_TO_ADDR
38569: GO 38497
38571: POP
38572: POP
// if tmp then
38573: LD_VAR 0 19
38577: IFFALSE 38589
// f := tmp ;
38579: LD_ADDR_VAR 0 12
38583: PUSH
38584: LD_VAR 0 19
38588: ST_TO_ADDR
// end ; x := personel [ i ] ;
38589: LD_ADDR_VAR 0 13
38593: PUSH
38594: LD_VAR 0 6
38598: PUSH
38599: LD_VAR 0 8
38603: ARRAY
38604: ST_TO_ADDR
// if x = - 1 then
38605: LD_VAR 0 13
38609: PUSH
38610: LD_INT 1
38612: NEG
38613: EQUAL
38614: IFFALSE 38823
// begin for j in f do
38616: LD_ADDR_VAR 0 9
38620: PUSH
38621: LD_VAR 0 12
38625: PUSH
38626: FOR_IN
38627: IFFALSE 38819
// repeat InitHc ;
38629: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38633: LD_VAR 0 9
38637: PPUSH
38638: CALL_OW 266
38642: PUSH
38643: LD_INT 5
38645: EQUAL
38646: IFFALSE 38716
// begin if UnitsInside ( j ) < 3 then
38648: LD_VAR 0 9
38652: PPUSH
38653: CALL_OW 313
38657: PUSH
38658: LD_INT 3
38660: LESS
38661: IFFALSE 38697
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38663: LD_INT 0
38665: PPUSH
38666: LD_INT 5
38668: PUSH
38669: LD_INT 8
38671: PUSH
38672: LD_INT 9
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: LIST
38679: PUSH
38680: LD_VAR 0 17
38684: ARRAY
38685: PPUSH
38686: LD_VAR 0 4
38690: PPUSH
38691: CALL_OW 380
38695: GO 38714
// PrepareHuman ( false , i , skill ) ;
38697: LD_INT 0
38699: PPUSH
38700: LD_VAR 0 8
38704: PPUSH
38705: LD_VAR 0 4
38709: PPUSH
38710: CALL_OW 380
// end else
38714: GO 38733
// PrepareHuman ( false , i , skill ) ;
38716: LD_INT 0
38718: PPUSH
38719: LD_VAR 0 8
38723: PPUSH
38724: LD_VAR 0 4
38728: PPUSH
38729: CALL_OW 380
// un := CreateHuman ;
38733: LD_ADDR_VAR 0 14
38737: PUSH
38738: CALL_OW 44
38742: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38743: LD_ADDR_VAR 0 7
38747: PUSH
38748: LD_VAR 0 7
38752: PPUSH
38753: LD_INT 1
38755: PPUSH
38756: LD_VAR 0 14
38760: PPUSH
38761: CALL_OW 2
38765: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38766: LD_VAR 0 14
38770: PPUSH
38771: LD_VAR 0 9
38775: PPUSH
38776: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38780: LD_VAR 0 9
38784: PPUSH
38785: CALL_OW 313
38789: PUSH
38790: LD_INT 6
38792: EQUAL
38793: PUSH
38794: LD_VAR 0 9
38798: PPUSH
38799: CALL_OW 266
38803: PUSH
38804: LD_INT 32
38806: PUSH
38807: LD_INT 31
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: IN
38814: OR
38815: IFFALSE 38629
38817: GO 38626
38819: POP
38820: POP
// end else
38821: GO 39203
// for j = 1 to x do
38823: LD_ADDR_VAR 0 9
38827: PUSH
38828: DOUBLE
38829: LD_INT 1
38831: DEC
38832: ST_TO_ADDR
38833: LD_VAR 0 13
38837: PUSH
38838: FOR_TO
38839: IFFALSE 39201
// begin InitHc ;
38841: CALL_OW 19
// if not f then
38845: LD_VAR 0 12
38849: NOT
38850: IFFALSE 38939
// begin PrepareHuman ( false , i , skill ) ;
38852: LD_INT 0
38854: PPUSH
38855: LD_VAR 0 8
38859: PPUSH
38860: LD_VAR 0 4
38864: PPUSH
38865: CALL_OW 380
// un := CreateHuman ;
38869: LD_ADDR_VAR 0 14
38873: PUSH
38874: CALL_OW 44
38878: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38879: LD_ADDR_VAR 0 7
38883: PUSH
38884: LD_VAR 0 7
38888: PPUSH
38889: LD_INT 1
38891: PPUSH
38892: LD_VAR 0 14
38896: PPUSH
38897: CALL_OW 2
38901: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38902: LD_VAR 0 14
38906: PPUSH
38907: LD_VAR 0 1
38911: PPUSH
38912: CALL_OW 250
38916: PPUSH
38917: LD_VAR 0 1
38921: PPUSH
38922: CALL_OW 251
38926: PPUSH
38927: LD_INT 10
38929: PPUSH
38930: LD_INT 0
38932: PPUSH
38933: CALL_OW 50
// continue ;
38937: GO 38838
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38939: LD_VAR 0 12
38943: PUSH
38944: LD_INT 1
38946: ARRAY
38947: PPUSH
38948: CALL_OW 313
38952: PUSH
38953: LD_VAR 0 12
38957: PUSH
38958: LD_INT 1
38960: ARRAY
38961: PPUSH
38962: CALL_OW 266
38966: PUSH
38967: LD_INT 32
38969: PUSH
38970: LD_INT 31
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: IN
38977: AND
38978: PUSH
38979: LD_VAR 0 12
38983: PUSH
38984: LD_INT 1
38986: ARRAY
38987: PPUSH
38988: CALL_OW 313
38992: PUSH
38993: LD_INT 6
38995: EQUAL
38996: OR
38997: IFFALSE 39017
// f := Delete ( f , 1 ) ;
38999: LD_ADDR_VAR 0 12
39003: PUSH
39004: LD_VAR 0 12
39008: PPUSH
39009: LD_INT 1
39011: PPUSH
39012: CALL_OW 3
39016: ST_TO_ADDR
// if not f then
39017: LD_VAR 0 12
39021: NOT
39022: IFFALSE 39040
// begin x := x + 2 ;
39024: LD_ADDR_VAR 0 13
39028: PUSH
39029: LD_VAR 0 13
39033: PUSH
39034: LD_INT 2
39036: PLUS
39037: ST_TO_ADDR
// continue ;
39038: GO 38838
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39040: LD_VAR 0 12
39044: PUSH
39045: LD_INT 1
39047: ARRAY
39048: PPUSH
39049: CALL_OW 266
39053: PUSH
39054: LD_INT 5
39056: EQUAL
39057: IFFALSE 39131
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39059: LD_VAR 0 12
39063: PUSH
39064: LD_INT 1
39066: ARRAY
39067: PPUSH
39068: CALL_OW 313
39072: PUSH
39073: LD_INT 3
39075: LESS
39076: IFFALSE 39112
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39078: LD_INT 0
39080: PPUSH
39081: LD_INT 5
39083: PUSH
39084: LD_INT 8
39086: PUSH
39087: LD_INT 9
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: LIST
39094: PUSH
39095: LD_VAR 0 17
39099: ARRAY
39100: PPUSH
39101: LD_VAR 0 4
39105: PPUSH
39106: CALL_OW 380
39110: GO 39129
// PrepareHuman ( false , i , skill ) ;
39112: LD_INT 0
39114: PPUSH
39115: LD_VAR 0 8
39119: PPUSH
39120: LD_VAR 0 4
39124: PPUSH
39125: CALL_OW 380
// end else
39129: GO 39148
// PrepareHuman ( false , i , skill ) ;
39131: LD_INT 0
39133: PPUSH
39134: LD_VAR 0 8
39138: PPUSH
39139: LD_VAR 0 4
39143: PPUSH
39144: CALL_OW 380
// un := CreateHuman ;
39148: LD_ADDR_VAR 0 14
39152: PUSH
39153: CALL_OW 44
39157: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39158: LD_ADDR_VAR 0 7
39162: PUSH
39163: LD_VAR 0 7
39167: PPUSH
39168: LD_INT 1
39170: PPUSH
39171: LD_VAR 0 14
39175: PPUSH
39176: CALL_OW 2
39180: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39181: LD_VAR 0 14
39185: PPUSH
39186: LD_VAR 0 12
39190: PUSH
39191: LD_INT 1
39193: ARRAY
39194: PPUSH
39195: CALL_OW 52
// end ;
39199: GO 38838
39201: POP
39202: POP
// end ;
39203: GO 38140
39205: POP
39206: POP
// result := result ^ buildings ;
39207: LD_ADDR_VAR 0 7
39211: PUSH
39212: LD_VAR 0 7
39216: PUSH
39217: LD_VAR 0 18
39221: ADD
39222: ST_TO_ADDR
// end else
39223: GO 39366
// begin for i = 1 to personel do
39225: LD_ADDR_VAR 0 8
39229: PUSH
39230: DOUBLE
39231: LD_INT 1
39233: DEC
39234: ST_TO_ADDR
39235: LD_VAR 0 6
39239: PUSH
39240: FOR_TO
39241: IFFALSE 39364
// begin if i > 4 then
39243: LD_VAR 0 8
39247: PUSH
39248: LD_INT 4
39250: GREATER
39251: IFFALSE 39255
// break ;
39253: GO 39364
// x := personel [ i ] ;
39255: LD_ADDR_VAR 0 13
39259: PUSH
39260: LD_VAR 0 6
39264: PUSH
39265: LD_VAR 0 8
39269: ARRAY
39270: ST_TO_ADDR
// if x = - 1 then
39271: LD_VAR 0 13
39275: PUSH
39276: LD_INT 1
39278: NEG
39279: EQUAL
39280: IFFALSE 39284
// continue ;
39282: GO 39240
// PrepareHuman ( false , i , skill ) ;
39284: LD_INT 0
39286: PPUSH
39287: LD_VAR 0 8
39291: PPUSH
39292: LD_VAR 0 4
39296: PPUSH
39297: CALL_OW 380
// un := CreateHuman ;
39301: LD_ADDR_VAR 0 14
39305: PUSH
39306: CALL_OW 44
39310: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39311: LD_VAR 0 14
39315: PPUSH
39316: LD_VAR 0 1
39320: PPUSH
39321: CALL_OW 250
39325: PPUSH
39326: LD_VAR 0 1
39330: PPUSH
39331: CALL_OW 251
39335: PPUSH
39336: LD_INT 10
39338: PPUSH
39339: LD_INT 0
39341: PPUSH
39342: CALL_OW 50
// result := result ^ un ;
39346: LD_ADDR_VAR 0 7
39350: PUSH
39351: LD_VAR 0 7
39355: PUSH
39356: LD_VAR 0 14
39360: ADD
39361: ST_TO_ADDR
// end ;
39362: GO 39240
39364: POP
39365: POP
// end ; end ;
39366: LD_VAR 0 7
39370: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39371: LD_INT 0
39373: PPUSH
39374: PPUSH
39375: PPUSH
39376: PPUSH
39377: PPUSH
39378: PPUSH
39379: PPUSH
39380: PPUSH
39381: PPUSH
39382: PPUSH
39383: PPUSH
39384: PPUSH
39385: PPUSH
39386: PPUSH
39387: PPUSH
39388: PPUSH
// result := false ;
39389: LD_ADDR_VAR 0 3
39393: PUSH
39394: LD_INT 0
39396: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39397: LD_VAR 0 1
39401: NOT
39402: PUSH
39403: LD_VAR 0 1
39407: PPUSH
39408: CALL_OW 266
39412: PUSH
39413: LD_INT 32
39415: PUSH
39416: LD_INT 33
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: IN
39423: NOT
39424: OR
39425: IFFALSE 39429
// exit ;
39427: GO 40538
// nat := GetNation ( tower ) ;
39429: LD_ADDR_VAR 0 12
39433: PUSH
39434: LD_VAR 0 1
39438: PPUSH
39439: CALL_OW 248
39443: ST_TO_ADDR
// side := GetSide ( tower ) ;
39444: LD_ADDR_VAR 0 16
39448: PUSH
39449: LD_VAR 0 1
39453: PPUSH
39454: CALL_OW 255
39458: ST_TO_ADDR
// x := GetX ( tower ) ;
39459: LD_ADDR_VAR 0 10
39463: PUSH
39464: LD_VAR 0 1
39468: PPUSH
39469: CALL_OW 250
39473: ST_TO_ADDR
// y := GetY ( tower ) ;
39474: LD_ADDR_VAR 0 11
39478: PUSH
39479: LD_VAR 0 1
39483: PPUSH
39484: CALL_OW 251
39488: ST_TO_ADDR
// if not x or not y then
39489: LD_VAR 0 10
39493: NOT
39494: PUSH
39495: LD_VAR 0 11
39499: NOT
39500: OR
39501: IFFALSE 39505
// exit ;
39503: GO 40538
// weapon := 0 ;
39505: LD_ADDR_VAR 0 18
39509: PUSH
39510: LD_INT 0
39512: ST_TO_ADDR
// fac_list := [ ] ;
39513: LD_ADDR_VAR 0 17
39517: PUSH
39518: EMPTY
39519: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39520: LD_ADDR_VAR 0 6
39524: PUSH
39525: LD_VAR 0 1
39529: PPUSH
39530: CALL_OW 274
39534: PPUSH
39535: LD_VAR 0 2
39539: PPUSH
39540: LD_INT 0
39542: PPUSH
39543: CALL 37109 0 3
39547: PPUSH
39548: LD_INT 30
39550: PUSH
39551: LD_INT 3
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PPUSH
39558: CALL_OW 72
39562: ST_TO_ADDR
// if not factories then
39563: LD_VAR 0 6
39567: NOT
39568: IFFALSE 39572
// exit ;
39570: GO 40538
// for i in factories do
39572: LD_ADDR_VAR 0 8
39576: PUSH
39577: LD_VAR 0 6
39581: PUSH
39582: FOR_IN
39583: IFFALSE 39608
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39585: LD_ADDR_VAR 0 17
39589: PUSH
39590: LD_VAR 0 17
39594: PUSH
39595: LD_VAR 0 8
39599: PPUSH
39600: CALL_OW 478
39604: UNION
39605: ST_TO_ADDR
39606: GO 39582
39608: POP
39609: POP
// if not fac_list then
39610: LD_VAR 0 17
39614: NOT
39615: IFFALSE 39619
// exit ;
39617: GO 40538
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39619: LD_ADDR_VAR 0 5
39623: PUSH
39624: LD_INT 4
39626: PUSH
39627: LD_INT 5
39629: PUSH
39630: LD_INT 9
39632: PUSH
39633: LD_INT 10
39635: PUSH
39636: LD_INT 6
39638: PUSH
39639: LD_INT 7
39641: PUSH
39642: LD_INT 11
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 27
39656: PUSH
39657: LD_INT 28
39659: PUSH
39660: LD_INT 26
39662: PUSH
39663: LD_INT 30
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 43
39674: PUSH
39675: LD_INT 44
39677: PUSH
39678: LD_INT 46
39680: PUSH
39681: LD_INT 45
39683: PUSH
39684: LD_INT 47
39686: PUSH
39687: LD_INT 49
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: LIST
39702: PUSH
39703: LD_VAR 0 12
39707: ARRAY
39708: ST_TO_ADDR
// list := list isect fac_list ;
39709: LD_ADDR_VAR 0 5
39713: PUSH
39714: LD_VAR 0 5
39718: PUSH
39719: LD_VAR 0 17
39723: ISECT
39724: ST_TO_ADDR
// if not list then
39725: LD_VAR 0 5
39729: NOT
39730: IFFALSE 39734
// exit ;
39732: GO 40538
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39734: LD_VAR 0 12
39738: PUSH
39739: LD_INT 3
39741: EQUAL
39742: PUSH
39743: LD_INT 49
39745: PUSH
39746: LD_VAR 0 5
39750: IN
39751: AND
39752: PUSH
39753: LD_INT 31
39755: PPUSH
39756: LD_VAR 0 16
39760: PPUSH
39761: CALL_OW 321
39765: PUSH
39766: LD_INT 2
39768: EQUAL
39769: AND
39770: IFFALSE 39830
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39772: LD_INT 22
39774: PUSH
39775: LD_VAR 0 16
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 35
39786: PUSH
39787: LD_INT 49
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 91
39796: PUSH
39797: LD_VAR 0 1
39801: PUSH
39802: LD_INT 10
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: LIST
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: LIST
39814: PPUSH
39815: CALL_OW 69
39819: NOT
39820: IFFALSE 39830
// weapon := ru_time_lapser ;
39822: LD_ADDR_VAR 0 18
39826: PUSH
39827: LD_INT 49
39829: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39830: LD_VAR 0 12
39834: PUSH
39835: LD_INT 1
39837: PUSH
39838: LD_INT 2
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: IN
39845: PUSH
39846: LD_INT 11
39848: PUSH
39849: LD_VAR 0 5
39853: IN
39854: PUSH
39855: LD_INT 30
39857: PUSH
39858: LD_VAR 0 5
39862: IN
39863: OR
39864: AND
39865: PUSH
39866: LD_INT 6
39868: PPUSH
39869: LD_VAR 0 16
39873: PPUSH
39874: CALL_OW 321
39878: PUSH
39879: LD_INT 2
39881: EQUAL
39882: AND
39883: IFFALSE 40048
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39885: LD_INT 22
39887: PUSH
39888: LD_VAR 0 16
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 2
39899: PUSH
39900: LD_INT 35
39902: PUSH
39903: LD_INT 11
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 35
39912: PUSH
39913: LD_INT 30
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 91
39927: PUSH
39928: LD_VAR 0 1
39932: PUSH
39933: LD_INT 18
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: LIST
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: LIST
39945: PPUSH
39946: CALL_OW 69
39950: NOT
39951: PUSH
39952: LD_INT 22
39954: PUSH
39955: LD_VAR 0 16
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 2
39966: PUSH
39967: LD_INT 30
39969: PUSH
39970: LD_INT 32
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 30
39979: PUSH
39980: LD_INT 33
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 91
39994: PUSH
39995: LD_VAR 0 1
39999: PUSH
40000: LD_INT 12
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: LIST
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: LIST
40012: PUSH
40013: EMPTY
40014: LIST
40015: PPUSH
40016: CALL_OW 69
40020: PUSH
40021: LD_INT 2
40023: GREATER
40024: AND
40025: IFFALSE 40048
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40027: LD_ADDR_VAR 0 18
40031: PUSH
40032: LD_INT 11
40034: PUSH
40035: LD_INT 30
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_VAR 0 12
40046: ARRAY
40047: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40048: LD_VAR 0 18
40052: NOT
40053: PUSH
40054: LD_INT 40
40056: PPUSH
40057: LD_VAR 0 16
40061: PPUSH
40062: CALL_OW 321
40066: PUSH
40067: LD_INT 2
40069: EQUAL
40070: AND
40071: PUSH
40072: LD_INT 7
40074: PUSH
40075: LD_VAR 0 5
40079: IN
40080: PUSH
40081: LD_INT 28
40083: PUSH
40084: LD_VAR 0 5
40088: IN
40089: OR
40090: PUSH
40091: LD_INT 45
40093: PUSH
40094: LD_VAR 0 5
40098: IN
40099: OR
40100: AND
40101: IFFALSE 40355
// begin hex := GetHexInfo ( x , y ) ;
40103: LD_ADDR_VAR 0 4
40107: PUSH
40108: LD_VAR 0 10
40112: PPUSH
40113: LD_VAR 0 11
40117: PPUSH
40118: CALL_OW 546
40122: ST_TO_ADDR
// if hex [ 1 ] then
40123: LD_VAR 0 4
40127: PUSH
40128: LD_INT 1
40130: ARRAY
40131: IFFALSE 40135
// exit ;
40133: GO 40538
// height := hex [ 2 ] ;
40135: LD_ADDR_VAR 0 15
40139: PUSH
40140: LD_VAR 0 4
40144: PUSH
40145: LD_INT 2
40147: ARRAY
40148: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40149: LD_ADDR_VAR 0 14
40153: PUSH
40154: LD_INT 0
40156: PUSH
40157: LD_INT 2
40159: PUSH
40160: LD_INT 3
40162: PUSH
40163: LD_INT 5
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: ST_TO_ADDR
// for i in tmp do
40172: LD_ADDR_VAR 0 8
40176: PUSH
40177: LD_VAR 0 14
40181: PUSH
40182: FOR_IN
40183: IFFALSE 40353
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40185: LD_ADDR_VAR 0 9
40189: PUSH
40190: LD_VAR 0 10
40194: PPUSH
40195: LD_VAR 0 8
40199: PPUSH
40200: LD_INT 5
40202: PPUSH
40203: CALL_OW 272
40207: PUSH
40208: LD_VAR 0 11
40212: PPUSH
40213: LD_VAR 0 8
40217: PPUSH
40218: LD_INT 5
40220: PPUSH
40221: CALL_OW 273
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40230: LD_VAR 0 9
40234: PUSH
40235: LD_INT 1
40237: ARRAY
40238: PPUSH
40239: LD_VAR 0 9
40243: PUSH
40244: LD_INT 2
40246: ARRAY
40247: PPUSH
40248: CALL_OW 488
40252: IFFALSE 40351
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40254: LD_ADDR_VAR 0 4
40258: PUSH
40259: LD_VAR 0 9
40263: PUSH
40264: LD_INT 1
40266: ARRAY
40267: PPUSH
40268: LD_VAR 0 9
40272: PUSH
40273: LD_INT 2
40275: ARRAY
40276: PPUSH
40277: CALL_OW 546
40281: ST_TO_ADDR
// if hex [ 1 ] then
40282: LD_VAR 0 4
40286: PUSH
40287: LD_INT 1
40289: ARRAY
40290: IFFALSE 40294
// continue ;
40292: GO 40182
// h := hex [ 2 ] ;
40294: LD_ADDR_VAR 0 13
40298: PUSH
40299: LD_VAR 0 4
40303: PUSH
40304: LD_INT 2
40306: ARRAY
40307: ST_TO_ADDR
// if h + 7 < height then
40308: LD_VAR 0 13
40312: PUSH
40313: LD_INT 7
40315: PLUS
40316: PUSH
40317: LD_VAR 0 15
40321: LESS
40322: IFFALSE 40351
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40324: LD_ADDR_VAR 0 18
40328: PUSH
40329: LD_INT 7
40331: PUSH
40332: LD_INT 28
40334: PUSH
40335: LD_INT 45
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: LIST
40342: PUSH
40343: LD_VAR 0 12
40347: ARRAY
40348: ST_TO_ADDR
// break ;
40349: GO 40353
// end ; end ; end ;
40351: GO 40182
40353: POP
40354: POP
// end ; if not weapon then
40355: LD_VAR 0 18
40359: NOT
40360: IFFALSE 40420
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40362: LD_ADDR_VAR 0 5
40366: PUSH
40367: LD_VAR 0 5
40371: PUSH
40372: LD_INT 11
40374: PUSH
40375: LD_INT 30
40377: PUSH
40378: LD_INT 49
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: LIST
40385: DIFF
40386: ST_TO_ADDR
// if not list then
40387: LD_VAR 0 5
40391: NOT
40392: IFFALSE 40396
// exit ;
40394: GO 40538
// weapon := list [ rand ( 1 , list ) ] ;
40396: LD_ADDR_VAR 0 18
40400: PUSH
40401: LD_VAR 0 5
40405: PUSH
40406: LD_INT 1
40408: PPUSH
40409: LD_VAR 0 5
40413: PPUSH
40414: CALL_OW 12
40418: ARRAY
40419: ST_TO_ADDR
// end ; if weapon then
40420: LD_VAR 0 18
40424: IFFALSE 40538
// begin tmp := CostOfWeapon ( weapon ) ;
40426: LD_ADDR_VAR 0 14
40430: PUSH
40431: LD_VAR 0 18
40435: PPUSH
40436: CALL_OW 451
40440: ST_TO_ADDR
// j := GetBase ( tower ) ;
40441: LD_ADDR_VAR 0 9
40445: PUSH
40446: LD_VAR 0 1
40450: PPUSH
40451: CALL_OW 274
40455: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40456: LD_VAR 0 9
40460: PPUSH
40461: LD_INT 1
40463: PPUSH
40464: CALL_OW 275
40468: PUSH
40469: LD_VAR 0 14
40473: PUSH
40474: LD_INT 1
40476: ARRAY
40477: GREATEREQUAL
40478: PUSH
40479: LD_VAR 0 9
40483: PPUSH
40484: LD_INT 2
40486: PPUSH
40487: CALL_OW 275
40491: PUSH
40492: LD_VAR 0 14
40496: PUSH
40497: LD_INT 2
40499: ARRAY
40500: GREATEREQUAL
40501: AND
40502: PUSH
40503: LD_VAR 0 9
40507: PPUSH
40508: LD_INT 3
40510: PPUSH
40511: CALL_OW 275
40515: PUSH
40516: LD_VAR 0 14
40520: PUSH
40521: LD_INT 3
40523: ARRAY
40524: GREATEREQUAL
40525: AND
40526: IFFALSE 40538
// result := weapon ;
40528: LD_ADDR_VAR 0 3
40532: PUSH
40533: LD_VAR 0 18
40537: ST_TO_ADDR
// end ; end ;
40538: LD_VAR 0 3
40542: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40543: LD_INT 0
40545: PPUSH
40546: PPUSH
// result := true ;
40547: LD_ADDR_VAR 0 3
40551: PUSH
40552: LD_INT 1
40554: ST_TO_ADDR
// if array1 = array2 then
40555: LD_VAR 0 1
40559: PUSH
40560: LD_VAR 0 2
40564: EQUAL
40565: IFFALSE 40625
// begin for i = 1 to array1 do
40567: LD_ADDR_VAR 0 4
40571: PUSH
40572: DOUBLE
40573: LD_INT 1
40575: DEC
40576: ST_TO_ADDR
40577: LD_VAR 0 1
40581: PUSH
40582: FOR_TO
40583: IFFALSE 40621
// if array1 [ i ] <> array2 [ i ] then
40585: LD_VAR 0 1
40589: PUSH
40590: LD_VAR 0 4
40594: ARRAY
40595: PUSH
40596: LD_VAR 0 2
40600: PUSH
40601: LD_VAR 0 4
40605: ARRAY
40606: NONEQUAL
40607: IFFALSE 40619
// begin result := false ;
40609: LD_ADDR_VAR 0 3
40613: PUSH
40614: LD_INT 0
40616: ST_TO_ADDR
// break ;
40617: GO 40621
// end ;
40619: GO 40582
40621: POP
40622: POP
// end else
40623: GO 40633
// result := false ;
40625: LD_ADDR_VAR 0 3
40629: PUSH
40630: LD_INT 0
40632: ST_TO_ADDR
// end ;
40633: LD_VAR 0 3
40637: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40638: LD_INT 0
40640: PPUSH
40641: PPUSH
// if not array1 or not array2 then
40642: LD_VAR 0 1
40646: NOT
40647: PUSH
40648: LD_VAR 0 2
40652: NOT
40653: OR
40654: IFFALSE 40658
// exit ;
40656: GO 40722
// result := true ;
40658: LD_ADDR_VAR 0 3
40662: PUSH
40663: LD_INT 1
40665: ST_TO_ADDR
// for i = 1 to array1 do
40666: LD_ADDR_VAR 0 4
40670: PUSH
40671: DOUBLE
40672: LD_INT 1
40674: DEC
40675: ST_TO_ADDR
40676: LD_VAR 0 1
40680: PUSH
40681: FOR_TO
40682: IFFALSE 40720
// if array1 [ i ] <> array2 [ i ] then
40684: LD_VAR 0 1
40688: PUSH
40689: LD_VAR 0 4
40693: ARRAY
40694: PUSH
40695: LD_VAR 0 2
40699: PUSH
40700: LD_VAR 0 4
40704: ARRAY
40705: NONEQUAL
40706: IFFALSE 40718
// begin result := false ;
40708: LD_ADDR_VAR 0 3
40712: PUSH
40713: LD_INT 0
40715: ST_TO_ADDR
// break ;
40716: GO 40720
// end ;
40718: GO 40681
40720: POP
40721: POP
// end ;
40722: LD_VAR 0 3
40726: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40727: LD_INT 0
40729: PPUSH
40730: PPUSH
40731: PPUSH
// pom := GetBase ( fac ) ;
40732: LD_ADDR_VAR 0 5
40736: PUSH
40737: LD_VAR 0 1
40741: PPUSH
40742: CALL_OW 274
40746: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40747: LD_ADDR_VAR 0 4
40751: PUSH
40752: LD_VAR 0 2
40756: PUSH
40757: LD_INT 1
40759: ARRAY
40760: PPUSH
40761: LD_VAR 0 2
40765: PUSH
40766: LD_INT 2
40768: ARRAY
40769: PPUSH
40770: LD_VAR 0 2
40774: PUSH
40775: LD_INT 3
40777: ARRAY
40778: PPUSH
40779: LD_VAR 0 2
40783: PUSH
40784: LD_INT 4
40786: ARRAY
40787: PPUSH
40788: CALL_OW 449
40792: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40793: LD_ADDR_VAR 0 3
40797: PUSH
40798: LD_VAR 0 5
40802: PPUSH
40803: LD_INT 1
40805: PPUSH
40806: CALL_OW 275
40810: PUSH
40811: LD_VAR 0 4
40815: PUSH
40816: LD_INT 1
40818: ARRAY
40819: GREATEREQUAL
40820: PUSH
40821: LD_VAR 0 5
40825: PPUSH
40826: LD_INT 2
40828: PPUSH
40829: CALL_OW 275
40833: PUSH
40834: LD_VAR 0 4
40838: PUSH
40839: LD_INT 2
40841: ARRAY
40842: GREATEREQUAL
40843: AND
40844: PUSH
40845: LD_VAR 0 5
40849: PPUSH
40850: LD_INT 3
40852: PPUSH
40853: CALL_OW 275
40857: PUSH
40858: LD_VAR 0 4
40862: PUSH
40863: LD_INT 3
40865: ARRAY
40866: GREATEREQUAL
40867: AND
40868: ST_TO_ADDR
// end ;
40869: LD_VAR 0 3
40873: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40874: LD_INT 0
40876: PPUSH
40877: PPUSH
40878: PPUSH
40879: PPUSH
// pom := GetBase ( building ) ;
40880: LD_ADDR_VAR 0 3
40884: PUSH
40885: LD_VAR 0 1
40889: PPUSH
40890: CALL_OW 274
40894: ST_TO_ADDR
// if not pom then
40895: LD_VAR 0 3
40899: NOT
40900: IFFALSE 40904
// exit ;
40902: GO 41074
// btype := GetBType ( building ) ;
40904: LD_ADDR_VAR 0 5
40908: PUSH
40909: LD_VAR 0 1
40913: PPUSH
40914: CALL_OW 266
40918: ST_TO_ADDR
// if btype = b_armoury then
40919: LD_VAR 0 5
40923: PUSH
40924: LD_INT 4
40926: EQUAL
40927: IFFALSE 40937
// btype := b_barracks ;
40929: LD_ADDR_VAR 0 5
40933: PUSH
40934: LD_INT 5
40936: ST_TO_ADDR
// if btype = b_depot then
40937: LD_VAR 0 5
40941: PUSH
40942: LD_INT 0
40944: EQUAL
40945: IFFALSE 40955
// btype := b_warehouse ;
40947: LD_ADDR_VAR 0 5
40951: PUSH
40952: LD_INT 1
40954: ST_TO_ADDR
// if btype = b_workshop then
40955: LD_VAR 0 5
40959: PUSH
40960: LD_INT 2
40962: EQUAL
40963: IFFALSE 40973
// btype := b_factory ;
40965: LD_ADDR_VAR 0 5
40969: PUSH
40970: LD_INT 3
40972: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40973: LD_ADDR_VAR 0 4
40977: PUSH
40978: LD_VAR 0 5
40982: PPUSH
40983: LD_VAR 0 1
40987: PPUSH
40988: CALL_OW 248
40992: PPUSH
40993: CALL_OW 450
40997: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40998: LD_ADDR_VAR 0 2
41002: PUSH
41003: LD_VAR 0 3
41007: PPUSH
41008: LD_INT 1
41010: PPUSH
41011: CALL_OW 275
41015: PUSH
41016: LD_VAR 0 4
41020: PUSH
41021: LD_INT 1
41023: ARRAY
41024: GREATEREQUAL
41025: PUSH
41026: LD_VAR 0 3
41030: PPUSH
41031: LD_INT 2
41033: PPUSH
41034: CALL_OW 275
41038: PUSH
41039: LD_VAR 0 4
41043: PUSH
41044: LD_INT 2
41046: ARRAY
41047: GREATEREQUAL
41048: AND
41049: PUSH
41050: LD_VAR 0 3
41054: PPUSH
41055: LD_INT 3
41057: PPUSH
41058: CALL_OW 275
41062: PUSH
41063: LD_VAR 0 4
41067: PUSH
41068: LD_INT 3
41070: ARRAY
41071: GREATEREQUAL
41072: AND
41073: ST_TO_ADDR
// end ;
41074: LD_VAR 0 2
41078: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41079: LD_INT 0
41081: PPUSH
41082: PPUSH
41083: PPUSH
// pom := GetBase ( building ) ;
41084: LD_ADDR_VAR 0 4
41088: PUSH
41089: LD_VAR 0 1
41093: PPUSH
41094: CALL_OW 274
41098: ST_TO_ADDR
// if not pom then
41099: LD_VAR 0 4
41103: NOT
41104: IFFALSE 41108
// exit ;
41106: GO 41209
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41108: LD_ADDR_VAR 0 5
41112: PUSH
41113: LD_VAR 0 2
41117: PPUSH
41118: LD_VAR 0 1
41122: PPUSH
41123: CALL_OW 248
41127: PPUSH
41128: CALL_OW 450
41132: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41133: LD_ADDR_VAR 0 3
41137: PUSH
41138: LD_VAR 0 4
41142: PPUSH
41143: LD_INT 1
41145: PPUSH
41146: CALL_OW 275
41150: PUSH
41151: LD_VAR 0 5
41155: PUSH
41156: LD_INT 1
41158: ARRAY
41159: GREATEREQUAL
41160: PUSH
41161: LD_VAR 0 4
41165: PPUSH
41166: LD_INT 2
41168: PPUSH
41169: CALL_OW 275
41173: PUSH
41174: LD_VAR 0 5
41178: PUSH
41179: LD_INT 2
41181: ARRAY
41182: GREATEREQUAL
41183: AND
41184: PUSH
41185: LD_VAR 0 4
41189: PPUSH
41190: LD_INT 3
41192: PPUSH
41193: CALL_OW 275
41197: PUSH
41198: LD_VAR 0 5
41202: PUSH
41203: LD_INT 3
41205: ARRAY
41206: GREATEREQUAL
41207: AND
41208: ST_TO_ADDR
// end ;
41209: LD_VAR 0 3
41213: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41214: LD_INT 0
41216: PPUSH
41217: PPUSH
41218: PPUSH
41219: PPUSH
41220: PPUSH
41221: PPUSH
41222: PPUSH
41223: PPUSH
41224: PPUSH
41225: PPUSH
41226: PPUSH
// result := false ;
41227: LD_ADDR_VAR 0 8
41231: PUSH
41232: LD_INT 0
41234: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41235: LD_VAR 0 5
41239: NOT
41240: PUSH
41241: LD_VAR 0 1
41245: NOT
41246: OR
41247: PUSH
41248: LD_VAR 0 2
41252: NOT
41253: OR
41254: PUSH
41255: LD_VAR 0 3
41259: NOT
41260: OR
41261: IFFALSE 41265
// exit ;
41263: GO 42079
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41265: LD_ADDR_VAR 0 14
41269: PUSH
41270: LD_VAR 0 1
41274: PPUSH
41275: LD_VAR 0 2
41279: PPUSH
41280: LD_VAR 0 3
41284: PPUSH
41285: LD_VAR 0 4
41289: PPUSH
41290: LD_VAR 0 5
41294: PUSH
41295: LD_INT 1
41297: ARRAY
41298: PPUSH
41299: CALL_OW 248
41303: PPUSH
41304: LD_INT 0
41306: PPUSH
41307: CALL 43312 0 6
41311: ST_TO_ADDR
// if not hexes then
41312: LD_VAR 0 14
41316: NOT
41317: IFFALSE 41321
// exit ;
41319: GO 42079
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41321: LD_ADDR_VAR 0 17
41325: PUSH
41326: LD_VAR 0 5
41330: PPUSH
41331: LD_INT 22
41333: PUSH
41334: LD_VAR 0 13
41338: PPUSH
41339: CALL_OW 255
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 2
41350: PUSH
41351: LD_INT 30
41353: PUSH
41354: LD_INT 0
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 30
41363: PUSH
41364: LD_INT 1
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: LIST
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PPUSH
41380: CALL_OW 72
41384: ST_TO_ADDR
// for i = 1 to hexes do
41385: LD_ADDR_VAR 0 9
41389: PUSH
41390: DOUBLE
41391: LD_INT 1
41393: DEC
41394: ST_TO_ADDR
41395: LD_VAR 0 14
41399: PUSH
41400: FOR_TO
41401: IFFALSE 42077
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41403: LD_ADDR_VAR 0 13
41407: PUSH
41408: LD_VAR 0 14
41412: PUSH
41413: LD_VAR 0 9
41417: ARRAY
41418: PUSH
41419: LD_INT 1
41421: ARRAY
41422: PPUSH
41423: LD_VAR 0 14
41427: PUSH
41428: LD_VAR 0 9
41432: ARRAY
41433: PUSH
41434: LD_INT 2
41436: ARRAY
41437: PPUSH
41438: CALL_OW 428
41442: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41443: LD_VAR 0 14
41447: PUSH
41448: LD_VAR 0 9
41452: ARRAY
41453: PUSH
41454: LD_INT 1
41456: ARRAY
41457: PPUSH
41458: LD_VAR 0 14
41462: PUSH
41463: LD_VAR 0 9
41467: ARRAY
41468: PUSH
41469: LD_INT 2
41471: ARRAY
41472: PPUSH
41473: CALL_OW 351
41477: PUSH
41478: LD_VAR 0 14
41482: PUSH
41483: LD_VAR 0 9
41487: ARRAY
41488: PUSH
41489: LD_INT 1
41491: ARRAY
41492: PPUSH
41493: LD_VAR 0 14
41497: PUSH
41498: LD_VAR 0 9
41502: ARRAY
41503: PUSH
41504: LD_INT 2
41506: ARRAY
41507: PPUSH
41508: CALL_OW 488
41512: NOT
41513: OR
41514: PUSH
41515: LD_VAR 0 13
41519: PPUSH
41520: CALL_OW 247
41524: PUSH
41525: LD_INT 3
41527: EQUAL
41528: OR
41529: IFFALSE 41535
// exit ;
41531: POP
41532: POP
41533: GO 42079
// if not tmp then
41535: LD_VAR 0 13
41539: NOT
41540: IFFALSE 41544
// continue ;
41542: GO 41400
// result := true ;
41544: LD_ADDR_VAR 0 8
41548: PUSH
41549: LD_INT 1
41551: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41552: LD_VAR 0 6
41556: PUSH
41557: LD_VAR 0 13
41561: PPUSH
41562: CALL_OW 247
41566: PUSH
41567: LD_INT 2
41569: EQUAL
41570: AND
41571: PUSH
41572: LD_VAR 0 13
41576: PPUSH
41577: CALL_OW 263
41581: PUSH
41582: LD_INT 1
41584: EQUAL
41585: AND
41586: IFFALSE 41750
// begin if IsDrivenBy ( tmp ) then
41588: LD_VAR 0 13
41592: PPUSH
41593: CALL_OW 311
41597: IFFALSE 41601
// continue ;
41599: GO 41400
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41601: LD_VAR 0 6
41605: PPUSH
41606: LD_INT 3
41608: PUSH
41609: LD_INT 60
41611: PUSH
41612: EMPTY
41613: LIST
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 3
41621: PUSH
41622: LD_INT 55
41624: PUSH
41625: EMPTY
41626: LIST
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PPUSH
41636: CALL_OW 72
41640: IFFALSE 41748
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41642: LD_ADDR_VAR 0 18
41646: PUSH
41647: LD_VAR 0 6
41651: PPUSH
41652: LD_INT 3
41654: PUSH
41655: LD_INT 60
41657: PUSH
41658: EMPTY
41659: LIST
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 3
41667: PUSH
41668: LD_INT 55
41670: PUSH
41671: EMPTY
41672: LIST
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PPUSH
41682: CALL_OW 72
41686: PUSH
41687: LD_INT 1
41689: ARRAY
41690: ST_TO_ADDR
// if IsInUnit ( driver ) then
41691: LD_VAR 0 18
41695: PPUSH
41696: CALL_OW 310
41700: IFFALSE 41711
// ComExit ( driver ) ;
41702: LD_VAR 0 18
41706: PPUSH
41707: CALL 67092 0 1
// AddComEnterUnit ( driver , tmp ) ;
41711: LD_VAR 0 18
41715: PPUSH
41716: LD_VAR 0 13
41720: PPUSH
41721: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41725: LD_VAR 0 18
41729: PPUSH
41730: LD_VAR 0 7
41734: PPUSH
41735: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41739: LD_VAR 0 18
41743: PPUSH
41744: CALL_OW 181
// end ; continue ;
41748: GO 41400
// end ; if not cleaners or not tmp in cleaners then
41750: LD_VAR 0 6
41754: NOT
41755: PUSH
41756: LD_VAR 0 13
41760: PUSH
41761: LD_VAR 0 6
41765: IN
41766: NOT
41767: OR
41768: IFFALSE 42075
// begin if dep then
41770: LD_VAR 0 17
41774: IFFALSE 41910
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41776: LD_ADDR_VAR 0 16
41780: PUSH
41781: LD_VAR 0 17
41785: PUSH
41786: LD_INT 1
41788: ARRAY
41789: PPUSH
41790: CALL_OW 250
41794: PPUSH
41795: LD_VAR 0 17
41799: PUSH
41800: LD_INT 1
41802: ARRAY
41803: PPUSH
41804: CALL_OW 254
41808: PPUSH
41809: LD_INT 5
41811: PPUSH
41812: CALL_OW 272
41816: PUSH
41817: LD_VAR 0 17
41821: PUSH
41822: LD_INT 1
41824: ARRAY
41825: PPUSH
41826: CALL_OW 251
41830: PPUSH
41831: LD_VAR 0 17
41835: PUSH
41836: LD_INT 1
41838: ARRAY
41839: PPUSH
41840: CALL_OW 254
41844: PPUSH
41845: LD_INT 5
41847: PPUSH
41848: CALL_OW 273
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41857: LD_VAR 0 16
41861: PUSH
41862: LD_INT 1
41864: ARRAY
41865: PPUSH
41866: LD_VAR 0 16
41870: PUSH
41871: LD_INT 2
41873: ARRAY
41874: PPUSH
41875: CALL_OW 488
41879: IFFALSE 41910
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41881: LD_VAR 0 13
41885: PPUSH
41886: LD_VAR 0 16
41890: PUSH
41891: LD_INT 1
41893: ARRAY
41894: PPUSH
41895: LD_VAR 0 16
41899: PUSH
41900: LD_INT 2
41902: ARRAY
41903: PPUSH
41904: CALL_OW 111
// continue ;
41908: GO 41400
// end ; end ; r := GetDir ( tmp ) ;
41910: LD_ADDR_VAR 0 15
41914: PUSH
41915: LD_VAR 0 13
41919: PPUSH
41920: CALL_OW 254
41924: ST_TO_ADDR
// if r = 5 then
41925: LD_VAR 0 15
41929: PUSH
41930: LD_INT 5
41932: EQUAL
41933: IFFALSE 41943
// r := 0 ;
41935: LD_ADDR_VAR 0 15
41939: PUSH
41940: LD_INT 0
41942: ST_TO_ADDR
// for j = r to 5 do
41943: LD_ADDR_VAR 0 10
41947: PUSH
41948: DOUBLE
41949: LD_VAR 0 15
41953: DEC
41954: ST_TO_ADDR
41955: LD_INT 5
41957: PUSH
41958: FOR_TO
41959: IFFALSE 42073
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41961: LD_ADDR_VAR 0 11
41965: PUSH
41966: LD_VAR 0 13
41970: PPUSH
41971: CALL_OW 250
41975: PPUSH
41976: LD_VAR 0 10
41980: PPUSH
41981: LD_INT 2
41983: PPUSH
41984: CALL_OW 272
41988: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41989: LD_ADDR_VAR 0 12
41993: PUSH
41994: LD_VAR 0 13
41998: PPUSH
41999: CALL_OW 251
42003: PPUSH
42004: LD_VAR 0 10
42008: PPUSH
42009: LD_INT 2
42011: PPUSH
42012: CALL_OW 273
42016: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42017: LD_VAR 0 11
42021: PPUSH
42022: LD_VAR 0 12
42026: PPUSH
42027: CALL_OW 488
42031: PUSH
42032: LD_VAR 0 11
42036: PPUSH
42037: LD_VAR 0 12
42041: PPUSH
42042: CALL_OW 428
42046: NOT
42047: AND
42048: IFFALSE 42071
// begin ComMoveXY ( tmp , _x , _y ) ;
42050: LD_VAR 0 13
42054: PPUSH
42055: LD_VAR 0 11
42059: PPUSH
42060: LD_VAR 0 12
42064: PPUSH
42065: CALL_OW 111
// break ;
42069: GO 42073
// end ; end ;
42071: GO 41958
42073: POP
42074: POP
// end ; end ;
42075: GO 41400
42077: POP
42078: POP
// end ;
42079: LD_VAR 0 8
42083: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42084: LD_INT 0
42086: PPUSH
// result := true ;
42087: LD_ADDR_VAR 0 3
42091: PUSH
42092: LD_INT 1
42094: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42095: LD_VAR 0 2
42099: PUSH
42100: LD_INT 24
42102: DOUBLE
42103: EQUAL
42104: IFTRUE 42114
42106: LD_INT 33
42108: DOUBLE
42109: EQUAL
42110: IFTRUE 42114
42112: GO 42139
42114: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42115: LD_ADDR_VAR 0 3
42119: PUSH
42120: LD_INT 32
42122: PPUSH
42123: LD_VAR 0 1
42127: PPUSH
42128: CALL_OW 321
42132: PUSH
42133: LD_INT 2
42135: EQUAL
42136: ST_TO_ADDR
42137: GO 42455
42139: LD_INT 20
42141: DOUBLE
42142: EQUAL
42143: IFTRUE 42147
42145: GO 42172
42147: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42148: LD_ADDR_VAR 0 3
42152: PUSH
42153: LD_INT 6
42155: PPUSH
42156: LD_VAR 0 1
42160: PPUSH
42161: CALL_OW 321
42165: PUSH
42166: LD_INT 2
42168: EQUAL
42169: ST_TO_ADDR
42170: GO 42455
42172: LD_INT 22
42174: DOUBLE
42175: EQUAL
42176: IFTRUE 42186
42178: LD_INT 36
42180: DOUBLE
42181: EQUAL
42182: IFTRUE 42186
42184: GO 42211
42186: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42187: LD_ADDR_VAR 0 3
42191: PUSH
42192: LD_INT 15
42194: PPUSH
42195: LD_VAR 0 1
42199: PPUSH
42200: CALL_OW 321
42204: PUSH
42205: LD_INT 2
42207: EQUAL
42208: ST_TO_ADDR
42209: GO 42455
42211: LD_INT 30
42213: DOUBLE
42214: EQUAL
42215: IFTRUE 42219
42217: GO 42244
42219: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42220: LD_ADDR_VAR 0 3
42224: PUSH
42225: LD_INT 20
42227: PPUSH
42228: LD_VAR 0 1
42232: PPUSH
42233: CALL_OW 321
42237: PUSH
42238: LD_INT 2
42240: EQUAL
42241: ST_TO_ADDR
42242: GO 42455
42244: LD_INT 28
42246: DOUBLE
42247: EQUAL
42248: IFTRUE 42258
42250: LD_INT 21
42252: DOUBLE
42253: EQUAL
42254: IFTRUE 42258
42256: GO 42283
42258: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42259: LD_ADDR_VAR 0 3
42263: PUSH
42264: LD_INT 21
42266: PPUSH
42267: LD_VAR 0 1
42271: PPUSH
42272: CALL_OW 321
42276: PUSH
42277: LD_INT 2
42279: EQUAL
42280: ST_TO_ADDR
42281: GO 42455
42283: LD_INT 16
42285: DOUBLE
42286: EQUAL
42287: IFTRUE 42291
42289: GO 42316
42291: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42292: LD_ADDR_VAR 0 3
42296: PUSH
42297: LD_INT 84
42299: PPUSH
42300: LD_VAR 0 1
42304: PPUSH
42305: CALL_OW 321
42309: PUSH
42310: LD_INT 2
42312: EQUAL
42313: ST_TO_ADDR
42314: GO 42455
42316: LD_INT 19
42318: DOUBLE
42319: EQUAL
42320: IFTRUE 42330
42322: LD_INT 23
42324: DOUBLE
42325: EQUAL
42326: IFTRUE 42330
42328: GO 42355
42330: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42331: LD_ADDR_VAR 0 3
42335: PUSH
42336: LD_INT 83
42338: PPUSH
42339: LD_VAR 0 1
42343: PPUSH
42344: CALL_OW 321
42348: PUSH
42349: LD_INT 2
42351: EQUAL
42352: ST_TO_ADDR
42353: GO 42455
42355: LD_INT 17
42357: DOUBLE
42358: EQUAL
42359: IFTRUE 42363
42361: GO 42388
42363: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42364: LD_ADDR_VAR 0 3
42368: PUSH
42369: LD_INT 39
42371: PPUSH
42372: LD_VAR 0 1
42376: PPUSH
42377: CALL_OW 321
42381: PUSH
42382: LD_INT 2
42384: EQUAL
42385: ST_TO_ADDR
42386: GO 42455
42388: LD_INT 18
42390: DOUBLE
42391: EQUAL
42392: IFTRUE 42396
42394: GO 42421
42396: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42397: LD_ADDR_VAR 0 3
42401: PUSH
42402: LD_INT 40
42404: PPUSH
42405: LD_VAR 0 1
42409: PPUSH
42410: CALL_OW 321
42414: PUSH
42415: LD_INT 2
42417: EQUAL
42418: ST_TO_ADDR
42419: GO 42455
42421: LD_INT 27
42423: DOUBLE
42424: EQUAL
42425: IFTRUE 42429
42427: GO 42454
42429: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42430: LD_ADDR_VAR 0 3
42434: PUSH
42435: LD_INT 35
42437: PPUSH
42438: LD_VAR 0 1
42442: PPUSH
42443: CALL_OW 321
42447: PUSH
42448: LD_INT 2
42450: EQUAL
42451: ST_TO_ADDR
42452: GO 42455
42454: POP
// end ;
42455: LD_VAR 0 3
42459: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42460: LD_INT 0
42462: PPUSH
42463: PPUSH
42464: PPUSH
42465: PPUSH
42466: PPUSH
42467: PPUSH
42468: PPUSH
42469: PPUSH
42470: PPUSH
42471: PPUSH
42472: PPUSH
// result := false ;
42473: LD_ADDR_VAR 0 6
42477: PUSH
42478: LD_INT 0
42480: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42481: LD_VAR 0 1
42485: NOT
42486: PUSH
42487: LD_VAR 0 1
42491: PPUSH
42492: CALL_OW 266
42496: PUSH
42497: LD_INT 0
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: IN
42507: NOT
42508: OR
42509: PUSH
42510: LD_VAR 0 2
42514: NOT
42515: OR
42516: PUSH
42517: LD_VAR 0 5
42521: PUSH
42522: LD_INT 0
42524: PUSH
42525: LD_INT 1
42527: PUSH
42528: LD_INT 2
42530: PUSH
42531: LD_INT 3
42533: PUSH
42534: LD_INT 4
42536: PUSH
42537: LD_INT 5
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: IN
42548: NOT
42549: OR
42550: PUSH
42551: LD_VAR 0 3
42555: PPUSH
42556: LD_VAR 0 4
42560: PPUSH
42561: CALL_OW 488
42565: NOT
42566: OR
42567: IFFALSE 42571
// exit ;
42569: GO 43307
// side := GetSide ( depot ) ;
42571: LD_ADDR_VAR 0 9
42575: PUSH
42576: LD_VAR 0 1
42580: PPUSH
42581: CALL_OW 255
42585: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42586: LD_VAR 0 9
42590: PPUSH
42591: LD_VAR 0 2
42595: PPUSH
42596: CALL 42084 0 2
42600: NOT
42601: IFFALSE 42605
// exit ;
42603: GO 43307
// pom := GetBase ( depot ) ;
42605: LD_ADDR_VAR 0 10
42609: PUSH
42610: LD_VAR 0 1
42614: PPUSH
42615: CALL_OW 274
42619: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42620: LD_ADDR_VAR 0 11
42624: PUSH
42625: LD_VAR 0 2
42629: PPUSH
42630: LD_VAR 0 1
42634: PPUSH
42635: CALL_OW 248
42639: PPUSH
42640: CALL_OW 450
42644: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42645: LD_VAR 0 10
42649: PPUSH
42650: LD_INT 1
42652: PPUSH
42653: CALL_OW 275
42657: PUSH
42658: LD_VAR 0 11
42662: PUSH
42663: LD_INT 1
42665: ARRAY
42666: GREATEREQUAL
42667: PUSH
42668: LD_VAR 0 10
42672: PPUSH
42673: LD_INT 2
42675: PPUSH
42676: CALL_OW 275
42680: PUSH
42681: LD_VAR 0 11
42685: PUSH
42686: LD_INT 2
42688: ARRAY
42689: GREATEREQUAL
42690: AND
42691: PUSH
42692: LD_VAR 0 10
42696: PPUSH
42697: LD_INT 3
42699: PPUSH
42700: CALL_OW 275
42704: PUSH
42705: LD_VAR 0 11
42709: PUSH
42710: LD_INT 3
42712: ARRAY
42713: GREATEREQUAL
42714: AND
42715: NOT
42716: IFFALSE 42720
// exit ;
42718: GO 43307
// if GetBType ( depot ) = b_depot then
42720: LD_VAR 0 1
42724: PPUSH
42725: CALL_OW 266
42729: PUSH
42730: LD_INT 0
42732: EQUAL
42733: IFFALSE 42745
// dist := 28 else
42735: LD_ADDR_VAR 0 14
42739: PUSH
42740: LD_INT 28
42742: ST_TO_ADDR
42743: GO 42753
// dist := 36 ;
42745: LD_ADDR_VAR 0 14
42749: PUSH
42750: LD_INT 36
42752: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42753: LD_VAR 0 1
42757: PPUSH
42758: LD_VAR 0 3
42762: PPUSH
42763: LD_VAR 0 4
42767: PPUSH
42768: CALL_OW 297
42772: PUSH
42773: LD_VAR 0 14
42777: GREATER
42778: IFFALSE 42782
// exit ;
42780: GO 43307
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42782: LD_ADDR_VAR 0 12
42786: PUSH
42787: LD_VAR 0 2
42791: PPUSH
42792: LD_VAR 0 3
42796: PPUSH
42797: LD_VAR 0 4
42801: PPUSH
42802: LD_VAR 0 5
42806: PPUSH
42807: LD_VAR 0 1
42811: PPUSH
42812: CALL_OW 248
42816: PPUSH
42817: LD_INT 0
42819: PPUSH
42820: CALL 43312 0 6
42824: ST_TO_ADDR
// if not hexes then
42825: LD_VAR 0 12
42829: NOT
42830: IFFALSE 42834
// exit ;
42832: GO 43307
// hex := GetHexInfo ( x , y ) ;
42834: LD_ADDR_VAR 0 15
42838: PUSH
42839: LD_VAR 0 3
42843: PPUSH
42844: LD_VAR 0 4
42848: PPUSH
42849: CALL_OW 546
42853: ST_TO_ADDR
// if hex [ 1 ] then
42854: LD_VAR 0 15
42858: PUSH
42859: LD_INT 1
42861: ARRAY
42862: IFFALSE 42866
// exit ;
42864: GO 43307
// height := hex [ 2 ] ;
42866: LD_ADDR_VAR 0 13
42870: PUSH
42871: LD_VAR 0 15
42875: PUSH
42876: LD_INT 2
42878: ARRAY
42879: ST_TO_ADDR
// for i = 1 to hexes do
42880: LD_ADDR_VAR 0 7
42884: PUSH
42885: DOUBLE
42886: LD_INT 1
42888: DEC
42889: ST_TO_ADDR
42890: LD_VAR 0 12
42894: PUSH
42895: FOR_TO
42896: IFFALSE 43226
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42898: LD_VAR 0 12
42902: PUSH
42903: LD_VAR 0 7
42907: ARRAY
42908: PUSH
42909: LD_INT 1
42911: ARRAY
42912: PPUSH
42913: LD_VAR 0 12
42917: PUSH
42918: LD_VAR 0 7
42922: ARRAY
42923: PUSH
42924: LD_INT 2
42926: ARRAY
42927: PPUSH
42928: CALL_OW 488
42932: NOT
42933: PUSH
42934: LD_VAR 0 12
42938: PUSH
42939: LD_VAR 0 7
42943: ARRAY
42944: PUSH
42945: LD_INT 1
42947: ARRAY
42948: PPUSH
42949: LD_VAR 0 12
42953: PUSH
42954: LD_VAR 0 7
42958: ARRAY
42959: PUSH
42960: LD_INT 2
42962: ARRAY
42963: PPUSH
42964: CALL_OW 428
42968: PUSH
42969: LD_INT 0
42971: GREATER
42972: OR
42973: PUSH
42974: LD_VAR 0 12
42978: PUSH
42979: LD_VAR 0 7
42983: ARRAY
42984: PUSH
42985: LD_INT 1
42987: ARRAY
42988: PPUSH
42989: LD_VAR 0 12
42993: PUSH
42994: LD_VAR 0 7
42998: ARRAY
42999: PUSH
43000: LD_INT 2
43002: ARRAY
43003: PPUSH
43004: CALL_OW 351
43008: OR
43009: IFFALSE 43015
// exit ;
43011: POP
43012: POP
43013: GO 43307
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43015: LD_ADDR_VAR 0 8
43019: PUSH
43020: LD_VAR 0 12
43024: PUSH
43025: LD_VAR 0 7
43029: ARRAY
43030: PUSH
43031: LD_INT 1
43033: ARRAY
43034: PPUSH
43035: LD_VAR 0 12
43039: PUSH
43040: LD_VAR 0 7
43044: ARRAY
43045: PUSH
43046: LD_INT 2
43048: ARRAY
43049: PPUSH
43050: CALL_OW 546
43054: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43055: LD_VAR 0 8
43059: PUSH
43060: LD_INT 1
43062: ARRAY
43063: PUSH
43064: LD_VAR 0 8
43068: PUSH
43069: LD_INT 2
43071: ARRAY
43072: PUSH
43073: LD_VAR 0 13
43077: PUSH
43078: LD_INT 2
43080: PLUS
43081: GREATER
43082: OR
43083: PUSH
43084: LD_VAR 0 8
43088: PUSH
43089: LD_INT 2
43091: ARRAY
43092: PUSH
43093: LD_VAR 0 13
43097: PUSH
43098: LD_INT 2
43100: MINUS
43101: LESS
43102: OR
43103: PUSH
43104: LD_VAR 0 8
43108: PUSH
43109: LD_INT 3
43111: ARRAY
43112: PUSH
43113: LD_INT 0
43115: PUSH
43116: LD_INT 8
43118: PUSH
43119: LD_INT 9
43121: PUSH
43122: LD_INT 10
43124: PUSH
43125: LD_INT 11
43127: PUSH
43128: LD_INT 12
43130: PUSH
43131: LD_INT 13
43133: PUSH
43134: LD_INT 16
43136: PUSH
43137: LD_INT 17
43139: PUSH
43140: LD_INT 18
43142: PUSH
43143: LD_INT 19
43145: PUSH
43146: LD_INT 20
43148: PUSH
43149: LD_INT 21
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: IN
43167: NOT
43168: OR
43169: PUSH
43170: LD_VAR 0 8
43174: PUSH
43175: LD_INT 5
43177: ARRAY
43178: NOT
43179: OR
43180: PUSH
43181: LD_VAR 0 8
43185: PUSH
43186: LD_INT 6
43188: ARRAY
43189: PUSH
43190: LD_INT 1
43192: PUSH
43193: LD_INT 2
43195: PUSH
43196: LD_INT 7
43198: PUSH
43199: LD_INT 9
43201: PUSH
43202: LD_INT 10
43204: PUSH
43205: LD_INT 11
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: IN
43216: NOT
43217: OR
43218: IFFALSE 43224
// exit ;
43220: POP
43221: POP
43222: GO 43307
// end ;
43224: GO 42895
43226: POP
43227: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43228: LD_VAR 0 9
43232: PPUSH
43233: LD_VAR 0 3
43237: PPUSH
43238: LD_VAR 0 4
43242: PPUSH
43243: LD_INT 20
43245: PPUSH
43246: CALL 35259 0 4
43250: PUSH
43251: LD_INT 4
43253: ARRAY
43254: IFFALSE 43258
// exit ;
43256: GO 43307
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43258: LD_VAR 0 2
43262: PUSH
43263: LD_INT 29
43265: PUSH
43266: LD_INT 30
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: IN
43273: PUSH
43274: LD_VAR 0 3
43278: PPUSH
43279: LD_VAR 0 4
43283: PPUSH
43284: LD_VAR 0 9
43288: PPUSH
43289: CALL_OW 440
43293: NOT
43294: AND
43295: IFFALSE 43299
// exit ;
43297: GO 43307
// result := true ;
43299: LD_ADDR_VAR 0 6
43303: PUSH
43304: LD_INT 1
43306: ST_TO_ADDR
// end ;
43307: LD_VAR 0 6
43311: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43312: LD_INT 0
43314: PPUSH
43315: PPUSH
43316: PPUSH
43317: PPUSH
43318: PPUSH
43319: PPUSH
43320: PPUSH
43321: PPUSH
43322: PPUSH
43323: PPUSH
43324: PPUSH
43325: PPUSH
43326: PPUSH
43327: PPUSH
43328: PPUSH
43329: PPUSH
43330: PPUSH
43331: PPUSH
43332: PPUSH
43333: PPUSH
43334: PPUSH
43335: PPUSH
43336: PPUSH
43337: PPUSH
43338: PPUSH
43339: PPUSH
43340: PPUSH
43341: PPUSH
43342: PPUSH
43343: PPUSH
43344: PPUSH
43345: PPUSH
43346: PPUSH
43347: PPUSH
43348: PPUSH
43349: PPUSH
43350: PPUSH
43351: PPUSH
43352: PPUSH
43353: PPUSH
43354: PPUSH
43355: PPUSH
43356: PPUSH
43357: PPUSH
43358: PPUSH
43359: PPUSH
43360: PPUSH
43361: PPUSH
43362: PPUSH
43363: PPUSH
43364: PPUSH
43365: PPUSH
43366: PPUSH
43367: PPUSH
43368: PPUSH
43369: PPUSH
43370: PPUSH
43371: PPUSH
// result = [ ] ;
43372: LD_ADDR_VAR 0 7
43376: PUSH
43377: EMPTY
43378: ST_TO_ADDR
// temp_list = [ ] ;
43379: LD_ADDR_VAR 0 9
43383: PUSH
43384: EMPTY
43385: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43386: LD_VAR 0 4
43390: PUSH
43391: LD_INT 0
43393: PUSH
43394: LD_INT 1
43396: PUSH
43397: LD_INT 2
43399: PUSH
43400: LD_INT 3
43402: PUSH
43403: LD_INT 4
43405: PUSH
43406: LD_INT 5
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: IN
43417: NOT
43418: PUSH
43419: LD_VAR 0 1
43423: PUSH
43424: LD_INT 0
43426: PUSH
43427: LD_INT 1
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: IN
43434: PUSH
43435: LD_VAR 0 5
43439: PUSH
43440: LD_INT 1
43442: PUSH
43443: LD_INT 2
43445: PUSH
43446: LD_INT 3
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: LIST
43453: IN
43454: NOT
43455: AND
43456: OR
43457: IFFALSE 43461
// exit ;
43459: GO 61852
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43461: LD_VAR 0 1
43465: PUSH
43466: LD_INT 6
43468: PUSH
43469: LD_INT 7
43471: PUSH
43472: LD_INT 8
43474: PUSH
43475: LD_INT 13
43477: PUSH
43478: LD_INT 12
43480: PUSH
43481: LD_INT 15
43483: PUSH
43484: LD_INT 11
43486: PUSH
43487: LD_INT 14
43489: PUSH
43490: LD_INT 10
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: IN
43504: IFFALSE 43514
// btype = b_lab ;
43506: LD_ADDR_VAR 0 1
43510: PUSH
43511: LD_INT 6
43513: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43514: LD_VAR 0 6
43518: PUSH
43519: LD_INT 0
43521: PUSH
43522: LD_INT 1
43524: PUSH
43525: LD_INT 2
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: LIST
43532: IN
43533: NOT
43534: PUSH
43535: LD_VAR 0 1
43539: PUSH
43540: LD_INT 0
43542: PUSH
43543: LD_INT 1
43545: PUSH
43546: LD_INT 2
43548: PUSH
43549: LD_INT 3
43551: PUSH
43552: LD_INT 6
43554: PUSH
43555: LD_INT 36
43557: PUSH
43558: LD_INT 4
43560: PUSH
43561: LD_INT 5
43563: PUSH
43564: LD_INT 31
43566: PUSH
43567: LD_INT 32
43569: PUSH
43570: LD_INT 33
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: IN
43586: NOT
43587: PUSH
43588: LD_VAR 0 6
43592: PUSH
43593: LD_INT 1
43595: EQUAL
43596: AND
43597: OR
43598: PUSH
43599: LD_VAR 0 1
43603: PUSH
43604: LD_INT 2
43606: PUSH
43607: LD_INT 3
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: IN
43614: NOT
43615: PUSH
43616: LD_VAR 0 6
43620: PUSH
43621: LD_INT 2
43623: EQUAL
43624: AND
43625: OR
43626: IFFALSE 43636
// mode = 0 ;
43628: LD_ADDR_VAR 0 6
43632: PUSH
43633: LD_INT 0
43635: ST_TO_ADDR
// case mode of 0 :
43636: LD_VAR 0 6
43640: PUSH
43641: LD_INT 0
43643: DOUBLE
43644: EQUAL
43645: IFTRUE 43649
43647: GO 55102
43649: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43650: LD_ADDR_VAR 0 11
43654: PUSH
43655: LD_INT 0
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 0
43667: PUSH
43668: LD_INT 1
43670: NEG
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 1
43678: PUSH
43679: LD_INT 0
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 1
43688: PUSH
43689: LD_INT 1
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 0
43698: PUSH
43699: LD_INT 1
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 1
43708: NEG
43709: PUSH
43710: LD_INT 0
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 1
43719: NEG
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 1
43731: NEG
43732: PUSH
43733: LD_INT 2
43735: NEG
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 0
43743: PUSH
43744: LD_INT 2
43746: NEG
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 1
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: PUSH
43766: LD_INT 2
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: LD_INT 2
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 1
43785: NEG
43786: PUSH
43787: LD_INT 1
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 1
43796: PUSH
43797: LD_INT 3
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: LD_INT 3
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 1
43816: NEG
43817: PUSH
43818: LD_INT 2
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43843: LD_ADDR_VAR 0 12
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 1
43871: PUSH
43872: LD_INT 0
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: LD_INT 1
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: LD_INT 1
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 1
43901: NEG
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 1
43912: NEG
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 1
43924: PUSH
43925: LD_INT 1
43927: NEG
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 2
43935: PUSH
43936: LD_INT 0
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 2
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 1
43955: NEG
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 2
43966: NEG
43967: PUSH
43968: LD_INT 0
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 2
43977: NEG
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 2
43989: NEG
43990: PUSH
43991: LD_INT 1
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 3
44000: NEG
44001: PUSH
44002: LD_INT 0
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 3
44011: NEG
44012: PUSH
44013: LD_INT 1
44015: NEG
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44039: LD_ADDR_VAR 0 13
44043: PUSH
44044: LD_INT 0
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: LD_INT 1
44059: NEG
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 1
44067: PUSH
44068: LD_INT 0
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 1
44077: PUSH
44078: LD_INT 1
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 1
44097: NEG
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: LD_INT 1
44112: NEG
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: LD_INT 2
44124: NEG
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 2
44132: PUSH
44133: LD_INT 1
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 2
44142: PUSH
44143: LD_INT 2
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 1
44152: PUSH
44153: LD_INT 2
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 2
44162: NEG
44163: PUSH
44164: LD_INT 1
44166: NEG
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 2
44174: NEG
44175: PUSH
44176: LD_INT 2
44178: NEG
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 2
44186: NEG
44187: PUSH
44188: LD_INT 3
44190: NEG
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 3
44198: NEG
44199: PUSH
44200: LD_INT 2
44202: NEG
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 3
44210: NEG
44211: PUSH
44212: LD_INT 3
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44238: LD_ADDR_VAR 0 14
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: LD_INT 1
44258: NEG
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 1
44266: PUSH
44267: LD_INT 0
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: LD_INT 1
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 1
44296: NEG
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 1
44319: NEG
44320: PUSH
44321: LD_INT 2
44323: NEG
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: LD_INT 2
44334: NEG
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 1
44353: PUSH
44354: LD_INT 2
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 0
44363: PUSH
44364: LD_INT 2
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 1
44373: NEG
44374: PUSH
44375: LD_INT 1
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: NEG
44385: PUSH
44386: LD_INT 3
44388: NEG
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: LD_INT 3
44399: NEG
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 1
44407: PUSH
44408: LD_INT 2
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44434: LD_ADDR_VAR 0 15
44438: PUSH
44439: LD_INT 0
44441: PUSH
44442: LD_INT 0
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 0
44451: PUSH
44452: LD_INT 1
44454: NEG
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: LD_INT 0
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 1
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 0
44482: PUSH
44483: LD_INT 1
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: LD_INT 0
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 1
44503: NEG
44504: PUSH
44505: LD_INT 1
44507: NEG
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: LD_INT 1
44518: NEG
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 2
44526: PUSH
44527: LD_INT 0
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 2
44536: PUSH
44537: LD_INT 1
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 1
44546: NEG
44547: PUSH
44548: LD_INT 1
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 2
44557: NEG
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 2
44568: NEG
44569: PUSH
44570: LD_INT 1
44572: NEG
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 2
44580: PUSH
44581: LD_INT 1
44583: NEG
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 3
44591: PUSH
44592: LD_INT 0
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 3
44601: PUSH
44602: LD_INT 1
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44627: LD_ADDR_VAR 0 16
44631: PUSH
44632: LD_INT 0
44634: PUSH
44635: LD_INT 0
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 1
44655: PUSH
44656: LD_INT 0
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 1
44665: PUSH
44666: LD_INT 1
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: LD_INT 1
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 1
44685: NEG
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 1
44696: NEG
44697: PUSH
44698: LD_INT 1
44700: NEG
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 1
44708: NEG
44709: PUSH
44710: LD_INT 2
44712: NEG
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 2
44720: PUSH
44721: LD_INT 1
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 2
44730: PUSH
44731: LD_INT 2
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 1
44740: PUSH
44741: LD_INT 2
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 2
44750: NEG
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 2
44762: NEG
44763: PUSH
44764: LD_INT 2
44766: NEG
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 3
44774: PUSH
44775: LD_INT 2
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 3
44784: PUSH
44785: LD_INT 3
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 2
44794: PUSH
44795: LD_INT 3
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44820: LD_ADDR_VAR 0 17
44824: PUSH
44825: LD_INT 0
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: LD_INT 1
44840: NEG
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 1
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 1
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 0
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 1
44878: NEG
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 1
44889: NEG
44890: PUSH
44891: LD_INT 1
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: LD_INT 2
44905: NEG
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 0
44913: PUSH
44914: LD_INT 2
44916: NEG
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 1
44924: PUSH
44925: LD_INT 1
44927: NEG
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 2
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 2
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 2
44955: PUSH
44956: LD_INT 2
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 1
44965: PUSH
44966: LD_INT 2
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 0
44975: PUSH
44976: LD_INT 2
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 1
44985: NEG
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 2
44996: NEG
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 2
45007: NEG
45008: PUSH
45009: LD_INT 1
45011: NEG
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 2
45019: NEG
45020: PUSH
45021: LD_INT 2
45023: NEG
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45050: LD_ADDR_VAR 0 18
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: LD_INT 0
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: LD_INT 1
45070: NEG
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 1
45088: PUSH
45089: LD_INT 1
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 1
45108: NEG
45109: PUSH
45110: LD_INT 0
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 1
45119: NEG
45120: PUSH
45121: LD_INT 1
45123: NEG
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: LD_INT 2
45135: NEG
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 0
45143: PUSH
45144: LD_INT 2
45146: NEG
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 1
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 2
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 2
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 2
45185: PUSH
45186: LD_INT 2
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: LD_INT 2
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: LD_INT 2
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 2
45226: NEG
45227: PUSH
45228: LD_INT 0
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 2
45237: NEG
45238: PUSH
45239: LD_INT 1
45241: NEG
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 2
45249: NEG
45250: PUSH
45251: LD_INT 2
45253: NEG
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45280: LD_ADDR_VAR 0 19
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 1
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 1
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 1
45338: NEG
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 1
45349: NEG
45350: PUSH
45351: LD_INT 1
45353: NEG
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: LD_INT 2
45365: NEG
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: LD_INT 2
45376: NEG
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: LD_INT 1
45387: NEG
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 2
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 2
45405: PUSH
45406: LD_INT 1
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 2
45415: PUSH
45416: LD_INT 2
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: LD_INT 2
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: LD_INT 2
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 2
45456: NEG
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 2
45467: NEG
45468: PUSH
45469: LD_INT 1
45471: NEG
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 2
45479: NEG
45480: PUSH
45481: LD_INT 2
45483: NEG
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45510: LD_ADDR_VAR 0 20
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 1
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: NEG
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: LD_INT 1
45583: NEG
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: LD_INT 2
45595: NEG
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: LD_INT 2
45606: NEG
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 2
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 2
45635: PUSH
45636: LD_INT 1
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 2
45645: PUSH
45646: LD_INT 2
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: LD_INT 2
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: LD_INT 2
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: LD_INT 1
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 2
45686: NEG
45687: PUSH
45688: LD_INT 0
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 2
45697: NEG
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 2
45709: NEG
45710: PUSH
45711: LD_INT 2
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45740: LD_ADDR_VAR 0 21
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 1
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 1
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 0
45788: PUSH
45789: LD_INT 1
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 1
45798: NEG
45799: PUSH
45800: LD_INT 0
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 1
45809: NEG
45810: PUSH
45811: LD_INT 1
45813: NEG
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: LD_INT 2
45825: NEG
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: LD_INT 2
45836: NEG
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 1
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 2
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 2
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 2
45875: PUSH
45876: LD_INT 2
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 1
45885: PUSH
45886: LD_INT 2
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: LD_INT 2
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 1
45905: NEG
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 2
45916: NEG
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 2
45927: NEG
45928: PUSH
45929: LD_INT 1
45931: NEG
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 2
45939: NEG
45940: PUSH
45941: LD_INT 2
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45970: LD_ADDR_VAR 0 22
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 0
46018: PUSH
46019: LD_INT 1
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: LD_INT 0
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: LD_INT 1
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 1
46051: NEG
46052: PUSH
46053: LD_INT 2
46055: NEG
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 0
46063: PUSH
46064: LD_INT 2
46066: NEG
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 1
46074: PUSH
46075: LD_INT 1
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 2
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 2
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 2
46105: PUSH
46106: LD_INT 2
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 1
46115: PUSH
46116: LD_INT 2
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: LD_INT 2
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 2
46146: NEG
46147: PUSH
46148: LD_INT 0
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 2
46157: NEG
46158: PUSH
46159: LD_INT 1
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 2
46169: NEG
46170: PUSH
46171: LD_INT 2
46173: NEG
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46200: LD_ADDR_VAR 0 23
46204: PUSH
46205: LD_INT 0
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 0
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 1
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 0
46248: PUSH
46249: LD_INT 1
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: LD_INT 0
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 1
46269: NEG
46270: PUSH
46271: LD_INT 1
46273: NEG
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: LD_INT 2
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: LD_INT 2
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: LD_INT 1
46307: NEG
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 2
46315: PUSH
46316: LD_INT 0
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 2
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 2
46335: PUSH
46336: LD_INT 2
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: LD_INT 2
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: LD_INT 2
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: LD_INT 1
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 2
46376: NEG
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 2
46387: NEG
46388: PUSH
46389: LD_INT 1
46391: NEG
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 2
46399: NEG
46400: PUSH
46401: LD_INT 2
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 2
46411: NEG
46412: PUSH
46413: LD_INT 3
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: NEG
46424: PUSH
46425: LD_INT 3
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: LD_INT 2
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 2
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46480: LD_ADDR_VAR 0 24
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: LD_INT 1
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: LD_INT 1
46553: NEG
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: LD_INT 2
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: LD_INT 2
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 1
46584: PUSH
46585: LD_INT 1
46587: NEG
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 2
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 2
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: LD_INT 2
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: LD_INT 2
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: LD_INT 2
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: LD_INT 1
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 2
46656: NEG
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 2
46667: NEG
46668: PUSH
46669: LD_INT 1
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 2
46679: NEG
46680: PUSH
46681: LD_INT 2
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: LD_INT 2
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 2
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 3
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 3
46723: PUSH
46724: LD_INT 2
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46756: LD_ADDR_VAR 0 25
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: LD_INT 0
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 0
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 1
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 1
46794: PUSH
46795: LD_INT 1
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 0
46804: PUSH
46805: LD_INT 1
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: NEG
46838: PUSH
46839: LD_INT 2
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: LD_INT 2
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 2
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 2
46881: PUSH
46882: LD_INT 1
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 2
46891: PUSH
46892: LD_INT 2
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 1
46901: PUSH
46902: LD_INT 2
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 0
46911: PUSH
46912: LD_INT 2
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 1
46921: NEG
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 2
46932: NEG
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 2
46943: NEG
46944: PUSH
46945: LD_INT 1
46947: NEG
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 2
46955: NEG
46956: PUSH
46957: LD_INT 2
46959: NEG
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 3
46967: PUSH
46968: LD_INT 1
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 3
46977: PUSH
46978: LD_INT 2
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 2
46987: PUSH
46988: LD_INT 3
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: LD_INT 3
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47030: LD_ADDR_VAR 0 26
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 0
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 1
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 0
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 1
47088: NEG
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 1
47099: NEG
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 1
47111: NEG
47112: PUSH
47113: LD_INT 2
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 0
47123: PUSH
47124: LD_INT 2
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: LD_INT 1
47137: NEG
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 2
47145: PUSH
47146: LD_INT 0
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 2
47155: PUSH
47156: LD_INT 1
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 2
47165: PUSH
47166: LD_INT 2
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 1
47175: PUSH
47176: LD_INT 2
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: LD_INT 2
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 2
47206: NEG
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 2
47217: NEG
47218: PUSH
47219: LD_INT 1
47221: NEG
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 2
47229: NEG
47230: PUSH
47231: LD_INT 2
47233: NEG
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 2
47241: PUSH
47242: LD_INT 3
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 1
47251: PUSH
47252: LD_INT 3
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: LD_INT 2
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 2
47272: NEG
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47306: LD_ADDR_VAR 0 27
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: LD_INT 0
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: LD_INT 1
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: LD_INT 1
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: LD_INT 1
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: LD_INT 1
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: NEG
47388: PUSH
47389: LD_INT 2
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: LD_INT 2
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 2
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 2
47431: PUSH
47432: LD_INT 1
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 2
47441: PUSH
47442: LD_INT 2
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: LD_INT 2
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 0
47461: PUSH
47462: LD_INT 2
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 1
47471: NEG
47472: PUSH
47473: LD_INT 1
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 2
47482: NEG
47483: PUSH
47484: LD_INT 0
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 2
47493: NEG
47494: PUSH
47495: LD_INT 1
47497: NEG
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 2
47505: NEG
47506: PUSH
47507: LD_INT 2
47509: NEG
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 1
47517: NEG
47518: PUSH
47519: LD_INT 2
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 2
47528: NEG
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 3
47539: NEG
47540: PUSH
47541: LD_INT 1
47543: NEG
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 3
47551: NEG
47552: PUSH
47553: LD_INT 2
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47586: LD_ADDR_VAR 0 28
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: LD_INT 0
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: LD_INT 1
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: LD_INT 1
47659: NEG
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: LD_INT 2
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: LD_INT 2
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 2
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 2
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 2
47721: PUSH
47722: LD_INT 2
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 1
47731: PUSH
47732: LD_INT 2
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: LD_INT 2
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 1
47751: NEG
47752: PUSH
47753: LD_INT 1
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 2
47762: NEG
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 2
47773: NEG
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 2
47785: NEG
47786: PUSH
47787: LD_INT 2
47789: NEG
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 2
47797: NEG
47798: PUSH
47799: LD_INT 3
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 1
47809: NEG
47810: PUSH
47811: LD_INT 3
47813: NEG
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 3
47821: NEG
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 3
47833: NEG
47834: PUSH
47835: LD_INT 2
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47868: LD_ADDR_VAR 0 29
47872: PUSH
47873: LD_INT 0
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 1
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: LD_INT 1
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 1
47926: NEG
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 1
47937: NEG
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: LD_INT 2
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: LD_INT 2
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: LD_INT 1
47975: NEG
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 2
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 2
47993: PUSH
47994: LD_INT 1
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: PUSH
48004: LD_INT 2
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: LD_INT 2
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 1
48023: NEG
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 2
48034: NEG
48035: PUSH
48036: LD_INT 1
48038: NEG
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 2
48046: NEG
48047: PUSH
48048: LD_INT 2
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 2
48058: NEG
48059: PUSH
48060: LD_INT 3
48062: NEG
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 2
48070: PUSH
48071: LD_INT 1
48073: NEG
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 3
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 1
48091: PUSH
48092: LD_INT 3
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 1
48101: NEG
48102: PUSH
48103: LD_INT 2
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 3
48112: NEG
48113: PUSH
48114: LD_INT 2
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48147: LD_ADDR_VAR 0 30
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 0
48164: PUSH
48165: LD_INT 1
48167: NEG
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 1
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 1
48205: NEG
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 1
48216: NEG
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 1
48228: NEG
48229: PUSH
48230: LD_INT 2
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: LD_INT 2
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: LD_INT 1
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 2
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 2
48272: PUSH
48273: LD_INT 1
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 2
48282: PUSH
48283: LD_INT 2
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: LD_INT 2
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: NEG
48303: PUSH
48304: LD_INT 1
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 2
48313: NEG
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: NEG
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 1
48336: NEG
48337: PUSH
48338: LD_INT 3
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 1
48348: PUSH
48349: LD_INT 2
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 3
48359: PUSH
48360: LD_INT 2
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 2
48369: PUSH
48370: LD_INT 3
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 2
48379: NEG
48380: PUSH
48381: LD_INT 1
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 3
48390: NEG
48391: PUSH
48392: LD_INT 1
48394: NEG
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48425: LD_ADDR_VAR 0 31
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 0
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 1
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 1
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 0
48473: PUSH
48474: LD_INT 1
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 1
48506: NEG
48507: PUSH
48508: LD_INT 2
48510: NEG
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 1
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 2
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 2
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 2
48549: PUSH
48550: LD_INT 2
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 1
48559: PUSH
48560: LD_INT 2
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: LD_INT 2
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 1
48579: NEG
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 2
48590: NEG
48591: PUSH
48592: LD_INT 1
48594: NEG
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 2
48602: NEG
48603: PUSH
48604: LD_INT 2
48606: NEG
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 2
48614: NEG
48615: PUSH
48616: LD_INT 3
48618: NEG
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 2
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 3
48637: PUSH
48638: LD_INT 1
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 1
48647: PUSH
48648: LD_INT 3
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: LD_INT 2
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 3
48668: NEG
48669: PUSH
48670: LD_INT 2
48672: NEG
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48703: LD_ADDR_VAR 0 32
48707: PUSH
48708: LD_INT 0
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 1
48741: PUSH
48742: LD_INT 1
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 1
48761: NEG
48762: PUSH
48763: LD_INT 0
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 1
48772: NEG
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: LD_INT 2
48788: NEG
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 0
48796: PUSH
48797: LD_INT 2
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: LD_INT 1
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 2
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 2
48828: PUSH
48829: LD_INT 2
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 1
48838: PUSH
48839: LD_INT 2
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: LD_INT 2
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 2
48869: NEG
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 2
48880: NEG
48881: PUSH
48882: LD_INT 1
48884: NEG
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: LD_INT 3
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 1
48904: PUSH
48905: LD_INT 2
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 3
48915: PUSH
48916: LD_INT 2
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 2
48925: PUSH
48926: LD_INT 3
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 2
48935: NEG
48936: PUSH
48937: LD_INT 1
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 3
48946: NEG
48947: PUSH
48948: LD_INT 1
48950: NEG
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48981: LD_ADDR_VAR 0 33
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 0
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 1
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: LD_INT 1
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 1
49039: NEG
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: LD_INT 1
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: LD_INT 2
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: LD_INT 1
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 2
49085: PUSH
49086: LD_INT 0
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 2
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: LD_INT 2
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: LD_INT 2
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: LD_INT 1
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 2
49136: NEG
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 2
49147: NEG
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 2
49159: NEG
49160: PUSH
49161: LD_INT 2
49163: NEG
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 2
49171: NEG
49172: PUSH
49173: LD_INT 3
49175: NEG
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 2
49183: PUSH
49184: LD_INT 1
49186: NEG
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 3
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 1
49204: PUSH
49205: LD_INT 3
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 1
49214: NEG
49215: PUSH
49216: LD_INT 2
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 3
49225: NEG
49226: PUSH
49227: LD_INT 2
49229: NEG
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49260: LD_ADDR_VAR 0 34
49264: PUSH
49265: LD_INT 0
49267: PUSH
49268: LD_INT 0
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 1
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: NEG
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: LD_INT 2
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: LD_INT 2
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: LD_INT 1
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 2
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 2
49385: PUSH
49386: LD_INT 2
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: LD_INT 2
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 1
49405: NEG
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 2
49416: NEG
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 2
49427: NEG
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 2
49439: NEG
49440: PUSH
49441: LD_INT 2
49443: NEG
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 1
49451: NEG
49452: PUSH
49453: LD_INT 3
49455: NEG
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 1
49463: PUSH
49464: LD_INT 2
49466: NEG
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 3
49474: PUSH
49475: LD_INT 2
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 2
49484: PUSH
49485: LD_INT 3
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 2
49494: NEG
49495: PUSH
49496: LD_INT 1
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 3
49505: NEG
49506: PUSH
49507: LD_INT 1
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49540: LD_ADDR_VAR 0 35
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: LD_INT 1
49560: NEG
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 0
49588: PUSH
49589: LD_INT 1
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 1
49609: NEG
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 2
49621: PUSH
49622: LD_INT 1
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 2
49631: NEG
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49652: LD_ADDR_VAR 0 36
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 0
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 1
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: LD_INT 1
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: LD_INT 1
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 1
49721: NEG
49722: PUSH
49723: LD_INT 1
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: NEG
49734: PUSH
49735: LD_INT 2
49737: NEG
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: LD_INT 2
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49764: LD_ADDR_VAR 0 37
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 1
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: LD_INT 1
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 0
49812: PUSH
49813: LD_INT 1
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 1
49822: NEG
49823: PUSH
49824: LD_INT 0
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: LD_INT 1
49837: NEG
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: PUSH
49846: LD_INT 1
49848: NEG
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: LD_INT 1
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49876: LD_ADDR_VAR 0 38
49880: PUSH
49881: LD_INT 0
49883: PUSH
49884: LD_INT 0
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: LD_INT 1
49896: NEG
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 1
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 1
49914: PUSH
49915: LD_INT 1
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: LD_INT 1
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 1
49934: NEG
49935: PUSH
49936: LD_INT 0
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 1
49945: NEG
49946: PUSH
49947: LD_INT 1
49949: NEG
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 2
49957: PUSH
49958: LD_INT 1
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 2
49967: NEG
49968: PUSH
49969: LD_INT 1
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49988: LD_ADDR_VAR 0 39
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 0
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 1
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: LD_INT 1
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 0
50036: PUSH
50037: LD_INT 1
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 1
50046: NEG
50047: PUSH
50048: LD_INT 0
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 1
50057: NEG
50058: PUSH
50059: LD_INT 1
50061: NEG
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: NEG
50070: PUSH
50071: LD_INT 2
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: PUSH
50082: LD_INT 2
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50100: LD_ADDR_VAR 0 40
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 1
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 0
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: NEG
50159: PUSH
50160: LD_INT 0
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 1
50169: NEG
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: LD_INT 1
50184: NEG
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 1
50192: NEG
50193: PUSH
50194: LD_INT 1
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50212: LD_ADDR_VAR 0 41
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: LD_INT 0
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 0
50229: PUSH
50230: LD_INT 1
50232: NEG
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 1
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 1
50250: PUSH
50251: LD_INT 1
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 0
50260: PUSH
50261: LD_INT 1
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 1
50270: NEG
50271: PUSH
50272: LD_INT 0
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 1
50281: NEG
50282: PUSH
50283: LD_INT 1
50285: NEG
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: LD_INT 2
50297: NEG
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: PUSH
50306: LD_INT 1
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 2
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 2
50326: PUSH
50327: LD_INT 1
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 2
50336: PUSH
50337: LD_INT 2
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 1
50346: PUSH
50347: LD_INT 2
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 1
50356: NEG
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 2
50367: NEG
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 2
50378: NEG
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 2
50390: NEG
50391: PUSH
50392: LD_INT 2
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 2
50402: NEG
50403: PUSH
50404: LD_INT 3
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 2
50414: PUSH
50415: LD_INT 1
50417: NEG
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 3
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 3
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 3
50445: PUSH
50446: LD_INT 2
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 3
50455: PUSH
50456: LD_INT 3
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 2
50465: PUSH
50466: LD_INT 3
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 2
50475: NEG
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 3
50486: NEG
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 3
50497: NEG
50498: PUSH
50499: LD_INT 1
50501: NEG
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 3
50509: NEG
50510: PUSH
50511: LD_INT 2
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 3
50521: NEG
50522: PUSH
50523: LD_INT 3
50525: NEG
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50562: LD_ADDR_VAR 0 42
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: LD_INT 0
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 0
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: LD_INT 0
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: LD_INT 1
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 1
50631: NEG
50632: PUSH
50633: LD_INT 1
50635: NEG
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 1
50643: NEG
50644: PUSH
50645: LD_INT 2
50647: NEG
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: LD_INT 2
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 1
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 2
50677: PUSH
50678: LD_INT 1
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 2
50687: PUSH
50688: LD_INT 2
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 1
50697: PUSH
50698: LD_INT 2
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: LD_INT 2
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 1
50717: NEG
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 2
50728: NEG
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 2
50740: NEG
50741: PUSH
50742: LD_INT 2
50744: NEG
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 2
50752: NEG
50753: PUSH
50754: LD_INT 3
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: LD_INT 3
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: LD_INT 3
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: PUSH
50788: LD_INT 2
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 3
50798: PUSH
50799: LD_INT 2
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 3
50808: PUSH
50809: LD_INT 3
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 2
50818: PUSH
50819: LD_INT 3
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: LD_INT 3
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 0
50838: PUSH
50839: LD_INT 3
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: NEG
50849: PUSH
50850: LD_INT 2
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 3
50859: NEG
50860: PUSH
50861: LD_INT 2
50863: NEG
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 3
50871: NEG
50872: PUSH
50873: LD_INT 3
50875: NEG
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50912: LD_ADDR_VAR 0 43
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 0
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 1
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 0
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 1
50981: NEG
50982: PUSH
50983: LD_INT 1
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: NEG
50994: PUSH
50995: LD_INT 2
50997: NEG
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 0
51005: PUSH
51006: LD_INT 2
51008: NEG
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 1
51016: PUSH
51017: LD_INT 1
51019: NEG
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 2
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 2
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: LD_INT 2
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: LD_INT 2
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 1
51067: NEG
51068: PUSH
51069: LD_INT 1
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 2
51078: NEG
51079: PUSH
51080: LD_INT 0
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 2
51089: NEG
51090: PUSH
51091: LD_INT 1
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 1
51101: NEG
51102: PUSH
51103: LD_INT 3
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 0
51113: PUSH
51114: LD_INT 3
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: LD_INT 2
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 2
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 3
51146: PUSH
51147: LD_INT 0
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 3
51156: PUSH
51157: LD_INT 1
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: LD_INT 3
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: LD_INT 3
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: NEG
51187: PUSH
51188: LD_INT 2
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 2
51197: NEG
51198: PUSH
51199: LD_INT 1
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 3
51208: NEG
51209: PUSH
51210: LD_INT 0
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 3
51219: NEG
51220: PUSH
51221: LD_INT 1
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51260: LD_ADDR_VAR 0 44
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: LD_INT 1
51280: NEG
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 1
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: LD_INT 1
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 1
51329: NEG
51330: PUSH
51331: LD_INT 1
51333: NEG
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 1
51341: NEG
51342: PUSH
51343: LD_INT 2
51345: NEG
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 2
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 2
51374: PUSH
51375: LD_INT 1
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 2
51384: PUSH
51385: LD_INT 2
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: LD_INT 2
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: LD_INT 1
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 2
51415: NEG
51416: PUSH
51417: LD_INT 0
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 2
51426: NEG
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 2
51438: NEG
51439: PUSH
51440: LD_INT 2
51442: NEG
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 2
51450: NEG
51451: PUSH
51452: LD_INT 3
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 2
51462: PUSH
51463: LD_INT 1
51465: NEG
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 3
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 3
51483: PUSH
51484: LD_INT 1
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 3
51493: PUSH
51494: LD_INT 2
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 3
51503: PUSH
51504: LD_INT 3
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 2
51513: PUSH
51514: LD_INT 3
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 2
51523: NEG
51524: PUSH
51525: LD_INT 1
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 3
51534: NEG
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 3
51545: NEG
51546: PUSH
51547: LD_INT 1
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 3
51557: NEG
51558: PUSH
51559: LD_INT 2
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 3
51569: NEG
51570: PUSH
51571: LD_INT 3
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51610: LD_ADDR_VAR 0 45
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: PUSH
51639: LD_INT 0
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: LD_INT 1
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: LD_INT 1
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 1
51668: NEG
51669: PUSH
51670: LD_INT 0
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: LD_INT 2
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: LD_INT 2
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 2
51725: PUSH
51726: LD_INT 1
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 2
51735: PUSH
51736: LD_INT 2
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: LD_INT 2
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 0
51755: PUSH
51756: LD_INT 2
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 1
51765: NEG
51766: PUSH
51767: LD_INT 1
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 2
51776: NEG
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 2
51788: NEG
51789: PUSH
51790: LD_INT 2
51792: NEG
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 2
51800: NEG
51801: PUSH
51802: LD_INT 3
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 1
51812: NEG
51813: PUSH
51814: LD_INT 3
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: LD_INT 3
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 1
51835: PUSH
51836: LD_INT 2
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 3
51846: PUSH
51847: LD_INT 2
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 3
51856: PUSH
51857: LD_INT 3
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 2
51866: PUSH
51867: LD_INT 3
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: LD_INT 3
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 0
51886: PUSH
51887: LD_INT 3
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 1
51896: NEG
51897: PUSH
51898: LD_INT 2
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 3
51907: NEG
51908: PUSH
51909: LD_INT 2
51911: NEG
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 3
51919: NEG
51920: PUSH
51921: LD_INT 3
51923: NEG
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51960: LD_ADDR_VAR 0 46
51964: PUSH
51965: LD_INT 0
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: PUSH
51989: LD_INT 0
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 1
51998: PUSH
51999: LD_INT 1
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: LD_INT 1
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 1
52018: NEG
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: LD_INT 1
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 1
52041: NEG
52042: PUSH
52043: LD_INT 2
52045: NEG
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 0
52053: PUSH
52054: LD_INT 2
52056: NEG
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 1
52064: PUSH
52065: LD_INT 1
52067: NEG
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 2
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 2
52085: PUSH
52086: LD_INT 1
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 1
52095: PUSH
52096: LD_INT 2
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 0
52105: PUSH
52106: LD_INT 2
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 1
52115: NEG
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 2
52126: NEG
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 2
52137: NEG
52138: PUSH
52139: LD_INT 1
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 1
52149: NEG
52150: PUSH
52151: LD_INT 3
52153: NEG
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: LD_INT 3
52164: NEG
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 1
52172: PUSH
52173: LD_INT 2
52175: NEG
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 2
52183: PUSH
52184: LD_INT 1
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 3
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 3
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: LD_INT 3
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: LD_INT 3
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: NEG
52235: PUSH
52236: LD_INT 2
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 2
52245: NEG
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 3
52256: NEG
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 3
52267: NEG
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52308: LD_ADDR_VAR 0 47
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 1
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: LD_INT 1
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: LD_INT 2
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 1
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 2
52423: NEG
52424: PUSH
52425: LD_INT 1
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 2
52435: NEG
52436: PUSH
52437: LD_INT 2
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52459: LD_ADDR_VAR 0 48
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: LD_INT 0
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 0
52476: PUSH
52477: LD_INT 1
52479: NEG
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 1
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: LD_INT 1
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 0
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 1
52517: NEG
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: NEG
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: LD_INT 2
52544: NEG
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: LD_INT 2
52555: NEG
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 1
52563: PUSH
52564: LD_INT 1
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 2
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 2
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52606: LD_ADDR_VAR 0 49
52610: PUSH
52611: LD_INT 0
52613: PUSH
52614: LD_INT 0
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: LD_INT 1
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 1
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 1
52644: PUSH
52645: LD_INT 1
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: LD_INT 1
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 1
52664: NEG
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: NEG
52676: PUSH
52677: LD_INT 1
52679: NEG
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 1
52687: PUSH
52688: LD_INT 1
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 2
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 2
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 2
52718: PUSH
52719: LD_INT 2
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 1
52728: PUSH
52729: LD_INT 2
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52750: LD_ADDR_VAR 0 50
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 0
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: LD_INT 1
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: LD_INT 0
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 1
52819: NEG
52820: PUSH
52821: LD_INT 1
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 2
52831: PUSH
52832: LD_INT 1
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 2
52841: PUSH
52842: LD_INT 2
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: PUSH
52852: LD_INT 2
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: LD_INT 2
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52894: LD_ADDR_VAR 0 51
52898: PUSH
52899: LD_INT 0
52901: PUSH
52902: LD_INT 0
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 1
52932: PUSH
52933: LD_INT 1
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 0
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: NEG
52953: PUSH
52954: LD_INT 0
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 1
52963: NEG
52964: PUSH
52965: LD_INT 1
52967: NEG
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: LD_INT 2
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: LD_INT 2
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: NEG
52996: PUSH
52997: LD_INT 1
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 2
53006: NEG
53007: PUSH
53008: LD_INT 0
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 2
53017: NEG
53018: PUSH
53019: LD_INT 1
53021: NEG
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53041: LD_ADDR_VAR 0 52
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 1
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: LD_INT 1
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 1
53099: NEG
53100: PUSH
53101: LD_INT 0
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: NEG
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 1
53122: NEG
53123: PUSH
53124: LD_INT 2
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: NEG
53135: PUSH
53136: LD_INT 1
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 2
53145: NEG
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 2
53156: NEG
53157: PUSH
53158: LD_INT 1
53160: NEG
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 2
53168: NEG
53169: PUSH
53170: LD_INT 2
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53192: LD_ADDR_VAR 0 53
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: LD_INT 0
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: LD_INT 1
53212: NEG
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 1
53230: PUSH
53231: LD_INT 1
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: LD_INT 1
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 1
53250: NEG
53251: PUSH
53252: LD_INT 0
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: LD_INT 1
53265: NEG
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: LD_INT 2
53277: NEG
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: LD_INT 2
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: LD_INT 1
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 2
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 2
53317: PUSH
53318: LD_INT 1
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 2
53327: PUSH
53328: LD_INT 2
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 1
53337: PUSH
53338: LD_INT 2
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 0
53347: PUSH
53348: LD_INT 2
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 1
53357: NEG
53358: PUSH
53359: LD_INT 1
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 2
53368: NEG
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 2
53379: NEG
53380: PUSH
53381: LD_INT 1
53383: NEG
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 2
53391: NEG
53392: PUSH
53393: LD_INT 2
53395: NEG
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53422: LD_ADDR_VAR 0 54
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 1
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: PUSH
53461: LD_INT 1
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: LD_INT 1
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 1
53491: NEG
53492: PUSH
53493: LD_INT 1
53495: NEG
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: LD_INT 2
53507: NEG
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: LD_INT 2
53518: NEG
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 1
53526: PUSH
53527: LD_INT 1
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 2
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 2
53547: PUSH
53548: LD_INT 1
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 2
53557: PUSH
53558: LD_INT 2
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: LD_INT 2
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: LD_INT 2
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 1
53587: NEG
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 2
53598: NEG
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 2
53609: NEG
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 2
53621: NEG
53622: PUSH
53623: LD_INT 2
53625: NEG
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53652: LD_ADDR_VAR 0 55
53656: PUSH
53657: LD_INT 0
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 1
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: LD_INT 1
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 1
53710: NEG
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 1
53721: NEG
53722: PUSH
53723: LD_INT 1
53725: NEG
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: LD_INT 2
53737: NEG
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 0
53745: PUSH
53746: LD_INT 2
53748: NEG
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 1
53756: PUSH
53757: LD_INT 1
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 2
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 2
53777: PUSH
53778: LD_INT 1
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 2
53787: PUSH
53788: LD_INT 2
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: LD_INT 2
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: LD_INT 2
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 2
53828: NEG
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 2
53839: NEG
53840: PUSH
53841: LD_INT 1
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 2
53851: NEG
53852: PUSH
53853: LD_INT 2
53855: NEG
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53882: LD_ADDR_VAR 0 56
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 0
53930: PUSH
53931: LD_INT 1
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 1
53951: NEG
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: LD_INT 2
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: LD_INT 2
53978: NEG
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 1
53986: PUSH
53987: LD_INT 1
53989: NEG
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 2
53997: PUSH
53998: LD_INT 0
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 2
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 2
54017: PUSH
54018: LD_INT 2
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: LD_INT 2
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 0
54037: PUSH
54038: LD_INT 2
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 1
54047: NEG
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 2
54058: NEG
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 2
54069: NEG
54070: PUSH
54071: LD_INT 1
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 2
54081: NEG
54082: PUSH
54083: LD_INT 2
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54112: LD_ADDR_VAR 0 57
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: LD_INT 0
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: NEG
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: LD_INT 2
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: LD_INT 2
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: PUSH
54217: LD_INT 1
54219: NEG
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 2
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 2
54237: PUSH
54238: LD_INT 1
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 2
54247: PUSH
54248: LD_INT 2
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: PUSH
54258: LD_INT 2
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 2
54288: NEG
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 2
54299: NEG
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 2
54311: NEG
54312: PUSH
54313: LD_INT 2
54315: NEG
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54342: LD_ADDR_VAR 0 58
54346: PUSH
54347: LD_INT 0
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 1
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 1
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 0
54390: PUSH
54391: LD_INT 1
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 1
54400: NEG
54401: PUSH
54402: LD_INT 0
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 1
54411: NEG
54412: PUSH
54413: LD_INT 1
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 1
54423: NEG
54424: PUSH
54425: LD_INT 2
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: LD_INT 2
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: PUSH
54447: LD_INT 1
54449: NEG
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 2
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 2
54467: PUSH
54468: LD_INT 1
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 2
54477: PUSH
54478: LD_INT 2
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 1
54487: PUSH
54488: LD_INT 2
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: LD_INT 2
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 1
54507: NEG
54508: PUSH
54509: LD_INT 1
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 2
54518: NEG
54519: PUSH
54520: LD_INT 0
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 2
54529: NEG
54530: PUSH
54531: LD_INT 1
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 2
54541: NEG
54542: PUSH
54543: LD_INT 2
54545: NEG
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54572: LD_ADDR_VAR 0 59
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 0
54620: PUSH
54621: LD_INT 1
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: NEG
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54660: LD_ADDR_VAR 0 60
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: LD_INT 1
54680: NEG
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 1
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 1
54698: PUSH
54699: LD_INT 1
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: LD_INT 1
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 1
54718: NEG
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54748: LD_ADDR_VAR 0 61
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 1
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: PUSH
54787: LD_INT 1
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: LD_INT 1
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: LD_INT 1
54821: NEG
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54836: LD_ADDR_VAR 0 62
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 1
54864: PUSH
54865: LD_INT 0
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 1
54874: PUSH
54875: LD_INT 1
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 0
54884: PUSH
54885: LD_INT 1
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: LD_INT 0
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 1
54905: NEG
54906: PUSH
54907: LD_INT 1
54909: NEG
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54924: LD_ADDR_VAR 0 63
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 0
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 1
54993: NEG
54994: PUSH
54995: LD_INT 1
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55012: LD_ADDR_VAR 0 64
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: LD_INT 1
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 1
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 1
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: LD_INT 1
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 1
55070: NEG
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: LD_INT 1
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: ST_TO_ADDR
// end ; 1 :
55100: GO 60997
55102: LD_INT 1
55104: DOUBLE
55105: EQUAL
55106: IFTRUE 55110
55108: GO 57733
55110: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55111: LD_ADDR_VAR 0 11
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: LD_INT 3
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: LD_INT 3
55133: NEG
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 1
55141: PUSH
55142: LD_INT 2
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: LIST
55154: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55155: LD_ADDR_VAR 0 12
55159: PUSH
55160: LD_INT 2
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 3
55173: PUSH
55174: LD_INT 0
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 3
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: LIST
55195: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55196: LD_ADDR_VAR 0 13
55200: PUSH
55201: LD_INT 3
55203: PUSH
55204: LD_INT 2
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 3
55213: PUSH
55214: LD_INT 3
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 2
55223: PUSH
55224: LD_INT 3
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: LIST
55235: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55236: LD_ADDR_VAR 0 14
55240: PUSH
55241: LD_INT 1
55243: PUSH
55244: LD_INT 3
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: LD_INT 3
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 1
55263: NEG
55264: PUSH
55265: LD_INT 2
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: LIST
55276: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55277: LD_ADDR_VAR 0 15
55281: PUSH
55282: LD_INT 2
55284: NEG
55285: PUSH
55286: LD_INT 1
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 3
55295: NEG
55296: PUSH
55297: LD_INT 0
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 3
55306: NEG
55307: PUSH
55308: LD_INT 1
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: LIST
55320: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55321: LD_ADDR_VAR 0 16
55325: PUSH
55326: LD_INT 2
55328: NEG
55329: PUSH
55330: LD_INT 3
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 3
55340: NEG
55341: PUSH
55342: LD_INT 2
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 3
55352: NEG
55353: PUSH
55354: LD_INT 3
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: LIST
55366: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55367: LD_ADDR_VAR 0 17
55371: PUSH
55372: LD_INT 1
55374: NEG
55375: PUSH
55376: LD_INT 3
55378: NEG
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: LD_INT 3
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 1
55397: PUSH
55398: LD_INT 2
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: LIST
55410: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55411: LD_ADDR_VAR 0 18
55415: PUSH
55416: LD_INT 2
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 3
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 3
55439: PUSH
55440: LD_INT 1
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: LIST
55451: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55452: LD_ADDR_VAR 0 19
55456: PUSH
55457: LD_INT 3
55459: PUSH
55460: LD_INT 2
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 3
55469: PUSH
55470: LD_INT 3
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 2
55479: PUSH
55480: LD_INT 3
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: LIST
55491: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55492: LD_ADDR_VAR 0 20
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: LD_INT 3
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 0
55509: PUSH
55510: LD_INT 3
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: NEG
55520: PUSH
55521: LD_INT 2
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: LIST
55532: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55533: LD_ADDR_VAR 0 21
55537: PUSH
55538: LD_INT 2
55540: NEG
55541: PUSH
55542: LD_INT 1
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 3
55551: NEG
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 3
55562: NEG
55563: PUSH
55564: LD_INT 1
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: LIST
55576: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55577: LD_ADDR_VAR 0 22
55581: PUSH
55582: LD_INT 2
55584: NEG
55585: PUSH
55586: LD_INT 3
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 3
55596: NEG
55597: PUSH
55598: LD_INT 2
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 3
55608: NEG
55609: PUSH
55610: LD_INT 3
55612: NEG
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: LIST
55622: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55623: LD_ADDR_VAR 0 23
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: LD_INT 3
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: LD_INT 4
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: LD_INT 3
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: LIST
55666: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55667: LD_ADDR_VAR 0 24
55671: PUSH
55672: LD_INT 3
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 3
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 4
55695: PUSH
55696: LD_INT 1
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: LIST
55707: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55708: LD_ADDR_VAR 0 25
55712: PUSH
55713: LD_INT 3
55715: PUSH
55716: LD_INT 3
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 4
55725: PUSH
55726: LD_INT 3
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 3
55735: PUSH
55736: LD_INT 4
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: LIST
55747: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55748: LD_ADDR_VAR 0 26
55752: PUSH
55753: LD_INT 0
55755: PUSH
55756: LD_INT 3
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 1
55765: PUSH
55766: LD_INT 4
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 1
55775: NEG
55776: PUSH
55777: LD_INT 3
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: LIST
55788: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55789: LD_ADDR_VAR 0 27
55793: PUSH
55794: LD_INT 3
55796: NEG
55797: PUSH
55798: LD_INT 0
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 3
55807: NEG
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 4
55818: NEG
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: LIST
55832: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55833: LD_ADDR_VAR 0 28
55837: PUSH
55838: LD_INT 3
55840: NEG
55841: PUSH
55842: LD_INT 3
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 3
55852: NEG
55853: PUSH
55854: LD_INT 4
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 4
55864: NEG
55865: PUSH
55866: LD_INT 3
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: LIST
55878: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55879: LD_ADDR_VAR 0 29
55883: PUSH
55884: LD_INT 1
55886: NEG
55887: PUSH
55888: LD_INT 3
55890: NEG
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 0
55898: PUSH
55899: LD_INT 3
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: LD_INT 2
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: NEG
55921: PUSH
55922: LD_INT 4
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: LD_INT 4
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: LD_INT 3
55946: NEG
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 1
55954: NEG
55955: PUSH
55956: LD_INT 5
55958: NEG
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: LD_INT 5
55969: NEG
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: LD_INT 4
55980: NEG
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: LD_INT 6
55992: NEG
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: LD_INT 6
56003: NEG
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 1
56011: PUSH
56012: LD_INT 5
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56034: LD_ADDR_VAR 0 30
56038: PUSH
56039: LD_INT 2
56041: PUSH
56042: LD_INT 1
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 3
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 3
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 3
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 4
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 4
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 4
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 5
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 5
56124: PUSH
56125: LD_INT 1
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 5
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 6
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 6
56155: PUSH
56156: LD_INT 1
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56177: LD_ADDR_VAR 0 31
56181: PUSH
56182: LD_INT 3
56184: PUSH
56185: LD_INT 2
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 3
56194: PUSH
56195: LD_INT 3
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 2
56204: PUSH
56205: LD_INT 3
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 4
56214: PUSH
56215: LD_INT 3
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 4
56224: PUSH
56225: LD_INT 4
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 3
56234: PUSH
56235: LD_INT 4
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 5
56244: PUSH
56245: LD_INT 4
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 5
56254: PUSH
56255: LD_INT 5
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 4
56264: PUSH
56265: LD_INT 5
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 6
56274: PUSH
56275: LD_INT 5
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 6
56284: PUSH
56285: LD_INT 6
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 5
56294: PUSH
56295: LD_INT 6
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56316: LD_ADDR_VAR 0 32
56320: PUSH
56321: LD_INT 1
56323: PUSH
56324: LD_INT 3
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: LD_INT 3
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 1
56343: NEG
56344: PUSH
56345: LD_INT 2
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: LD_INT 4
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: LD_INT 4
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: NEG
56375: PUSH
56376: LD_INT 3
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: PUSH
56386: LD_INT 5
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: LD_INT 5
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 1
56405: NEG
56406: PUSH
56407: LD_INT 4
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: LD_INT 6
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: LD_INT 6
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 1
56436: NEG
56437: PUSH
56438: LD_INT 5
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56459: LD_ADDR_VAR 0 33
56463: PUSH
56464: LD_INT 2
56466: NEG
56467: PUSH
56468: LD_INT 1
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 3
56477: NEG
56478: PUSH
56479: LD_INT 0
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 3
56488: NEG
56489: PUSH
56490: LD_INT 1
56492: NEG
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 3
56500: NEG
56501: PUSH
56502: LD_INT 1
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 4
56511: NEG
56512: PUSH
56513: LD_INT 0
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 4
56522: NEG
56523: PUSH
56524: LD_INT 1
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 4
56534: NEG
56535: PUSH
56536: LD_INT 1
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 5
56545: NEG
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 5
56556: NEG
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 5
56568: NEG
56569: PUSH
56570: LD_INT 1
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 6
56579: NEG
56580: PUSH
56581: LD_INT 0
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 6
56590: NEG
56591: PUSH
56592: LD_INT 1
56594: NEG
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56614: LD_ADDR_VAR 0 34
56618: PUSH
56619: LD_INT 2
56621: NEG
56622: PUSH
56623: LD_INT 3
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 3
56633: NEG
56634: PUSH
56635: LD_INT 2
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 3
56645: NEG
56646: PUSH
56647: LD_INT 3
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 3
56657: NEG
56658: PUSH
56659: LD_INT 4
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 4
56669: NEG
56670: PUSH
56671: LD_INT 3
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 4
56681: NEG
56682: PUSH
56683: LD_INT 4
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 4
56693: NEG
56694: PUSH
56695: LD_INT 5
56697: NEG
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 5
56705: NEG
56706: PUSH
56707: LD_INT 4
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 5
56717: NEG
56718: PUSH
56719: LD_INT 5
56721: NEG
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 5
56729: NEG
56730: PUSH
56731: LD_INT 6
56733: NEG
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 6
56741: NEG
56742: PUSH
56743: LD_INT 5
56745: NEG
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 6
56753: NEG
56754: PUSH
56755: LD_INT 6
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56777: LD_ADDR_VAR 0 41
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: LD_INT 2
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 1
56795: NEG
56796: PUSH
56797: LD_INT 3
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 1
56807: PUSH
56808: LD_INT 2
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: LIST
56820: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56821: LD_ADDR_VAR 0 42
56825: PUSH
56826: LD_INT 2
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 2
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 3
56849: PUSH
56850: LD_INT 1
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: LIST
56861: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56862: LD_ADDR_VAR 0 43
56866: PUSH
56867: LD_INT 2
56869: PUSH
56870: LD_INT 2
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 3
56879: PUSH
56880: LD_INT 2
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 2
56889: PUSH
56890: LD_INT 3
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: LIST
56901: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56902: LD_ADDR_VAR 0 44
56906: PUSH
56907: LD_INT 0
56909: PUSH
56910: LD_INT 2
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 1
56919: PUSH
56920: LD_INT 3
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 1
56929: NEG
56930: PUSH
56931: LD_INT 2
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: LIST
56942: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56943: LD_ADDR_VAR 0 45
56947: PUSH
56948: LD_INT 2
56950: NEG
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 2
56961: NEG
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 3
56972: NEG
56973: PUSH
56974: LD_INT 1
56976: NEG
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: LIST
56986: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56987: LD_ADDR_VAR 0 46
56991: PUSH
56992: LD_INT 2
56994: NEG
56995: PUSH
56996: LD_INT 2
56998: NEG
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 2
57006: NEG
57007: PUSH
57008: LD_INT 3
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 3
57018: NEG
57019: PUSH
57020: LD_INT 2
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: LIST
57032: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57033: LD_ADDR_VAR 0 47
57037: PUSH
57038: LD_INT 2
57040: NEG
57041: PUSH
57042: LD_INT 3
57044: NEG
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 1
57052: NEG
57053: PUSH
57054: LD_INT 3
57056: NEG
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57066: LD_ADDR_VAR 0 48
57070: PUSH
57071: LD_INT 1
57073: PUSH
57074: LD_INT 2
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 2
57084: PUSH
57085: LD_INT 1
57087: NEG
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57097: LD_ADDR_VAR 0 49
57101: PUSH
57102: LD_INT 3
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 3
57114: PUSH
57115: LD_INT 2
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57126: LD_ADDR_VAR 0 50
57130: PUSH
57131: LD_INT 2
57133: PUSH
57134: LD_INT 3
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: LD_INT 3
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57155: LD_ADDR_VAR 0 51
57159: PUSH
57160: LD_INT 1
57162: NEG
57163: PUSH
57164: LD_INT 2
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 2
57173: NEG
57174: PUSH
57175: LD_INT 1
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57186: LD_ADDR_VAR 0 52
57190: PUSH
57191: LD_INT 3
57193: NEG
57194: PUSH
57195: LD_INT 1
57197: NEG
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 3
57205: NEG
57206: PUSH
57207: LD_INT 2
57209: NEG
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57219: LD_ADDR_VAR 0 53
57223: PUSH
57224: LD_INT 1
57226: NEG
57227: PUSH
57228: LD_INT 3
57230: NEG
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: LD_INT 3
57241: NEG
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 1
57249: PUSH
57250: LD_INT 2
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: LIST
57262: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57263: LD_ADDR_VAR 0 54
57267: PUSH
57268: LD_INT 2
57270: PUSH
57271: LD_INT 1
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 3
57281: PUSH
57282: LD_INT 0
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 3
57291: PUSH
57292: LD_INT 1
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: LIST
57303: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57304: LD_ADDR_VAR 0 55
57308: PUSH
57309: LD_INT 3
57311: PUSH
57312: LD_INT 2
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 3
57321: PUSH
57322: LD_INT 3
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 2
57331: PUSH
57332: LD_INT 3
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: LIST
57343: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57344: LD_ADDR_VAR 0 56
57348: PUSH
57349: LD_INT 1
57351: PUSH
57352: LD_INT 3
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: LD_INT 3
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 1
57371: NEG
57372: PUSH
57373: LD_INT 2
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: LIST
57384: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57385: LD_ADDR_VAR 0 57
57389: PUSH
57390: LD_INT 2
57392: NEG
57393: PUSH
57394: LD_INT 1
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 3
57403: NEG
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 3
57414: NEG
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: LIST
57428: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57429: LD_ADDR_VAR 0 58
57433: PUSH
57434: LD_INT 2
57436: NEG
57437: PUSH
57438: LD_INT 3
57440: NEG
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 3
57448: NEG
57449: PUSH
57450: LD_INT 2
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 3
57460: NEG
57461: PUSH
57462: LD_INT 3
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: LIST
57474: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57475: LD_ADDR_VAR 0 59
57479: PUSH
57480: LD_INT 1
57482: NEG
57483: PUSH
57484: LD_INT 2
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 0
57494: PUSH
57495: LD_INT 2
57497: NEG
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 1
57505: PUSH
57506: LD_INT 1
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: LIST
57518: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57519: LD_ADDR_VAR 0 60
57523: PUSH
57524: LD_INT 1
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 2
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 2
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: LIST
57559: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57560: LD_ADDR_VAR 0 61
57564: PUSH
57565: LD_INT 2
57567: PUSH
57568: LD_INT 1
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 2
57577: PUSH
57578: LD_INT 2
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: LD_INT 2
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: LIST
57599: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57600: LD_ADDR_VAR 0 62
57604: PUSH
57605: LD_INT 1
57607: PUSH
57608: LD_INT 2
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 0
57617: PUSH
57618: LD_INT 2
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 1
57627: NEG
57628: PUSH
57629: LD_INT 1
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: LIST
57640: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57641: LD_ADDR_VAR 0 63
57645: PUSH
57646: LD_INT 1
57648: NEG
57649: PUSH
57650: LD_INT 1
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 2
57659: NEG
57660: PUSH
57661: LD_INT 0
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 2
57670: NEG
57671: PUSH
57672: LD_INT 1
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: LIST
57684: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57685: LD_ADDR_VAR 0 64
57689: PUSH
57690: LD_INT 1
57692: NEG
57693: PUSH
57694: LD_INT 2
57696: NEG
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 2
57704: NEG
57705: PUSH
57706: LD_INT 1
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 2
57716: NEG
57717: PUSH
57718: LD_INT 2
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: LIST
57730: ST_TO_ADDR
// end ; 2 :
57731: GO 60997
57733: LD_INT 2
57735: DOUBLE
57736: EQUAL
57737: IFTRUE 57741
57739: GO 60996
57741: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57742: LD_ADDR_VAR 0 29
57746: PUSH
57747: LD_INT 4
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 4
57759: PUSH
57760: LD_INT 1
57762: NEG
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 5
57770: PUSH
57771: LD_INT 0
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 5
57780: PUSH
57781: LD_INT 1
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 4
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 3
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 3
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 3
57821: PUSH
57822: LD_INT 2
57824: NEG
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 5
57832: PUSH
57833: LD_INT 2
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 3
57842: PUSH
57843: LD_INT 3
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 3
57852: PUSH
57853: LD_INT 2
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 4
57862: PUSH
57863: LD_INT 3
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 4
57872: PUSH
57873: LD_INT 4
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 3
57882: PUSH
57883: LD_INT 4
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 2
57892: PUSH
57893: LD_INT 3
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 2
57902: PUSH
57903: LD_INT 2
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 4
57912: PUSH
57913: LD_INT 2
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 2
57922: PUSH
57923: LD_INT 4
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: LD_INT 4
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 0
57942: PUSH
57943: LD_INT 3
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 1
57952: PUSH
57953: LD_INT 4
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 1
57962: PUSH
57963: LD_INT 5
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: LD_INT 5
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 1
57982: NEG
57983: PUSH
57984: LD_INT 4
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 1
57993: NEG
57994: PUSH
57995: LD_INT 3
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 2
58004: PUSH
58005: LD_INT 5
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 2
58014: NEG
58015: PUSH
58016: LD_INT 3
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 3
58025: NEG
58026: PUSH
58027: LD_INT 0
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 3
58036: NEG
58037: PUSH
58038: LD_INT 1
58040: NEG
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 2
58048: NEG
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 2
58059: NEG
58060: PUSH
58061: LD_INT 1
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 3
58070: NEG
58071: PUSH
58072: LD_INT 1
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 4
58081: NEG
58082: PUSH
58083: LD_INT 0
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 4
58092: NEG
58093: PUSH
58094: LD_INT 1
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 4
58104: NEG
58105: PUSH
58106: LD_INT 2
58108: NEG
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 2
58116: NEG
58117: PUSH
58118: LD_INT 2
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 4
58127: NEG
58128: PUSH
58129: LD_INT 4
58131: NEG
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 4
58139: NEG
58140: PUSH
58141: LD_INT 5
58143: NEG
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 3
58151: NEG
58152: PUSH
58153: LD_INT 4
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 3
58163: NEG
58164: PUSH
58165: LD_INT 3
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 4
58175: NEG
58176: PUSH
58177: LD_INT 3
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 5
58187: NEG
58188: PUSH
58189: LD_INT 4
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 5
58199: NEG
58200: PUSH
58201: LD_INT 5
58203: NEG
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 3
58211: NEG
58212: PUSH
58213: LD_INT 5
58215: NEG
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 5
58223: NEG
58224: PUSH
58225: LD_INT 3
58227: NEG
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58280: LD_ADDR_VAR 0 30
58284: PUSH
58285: LD_INT 4
58287: PUSH
58288: LD_INT 4
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 4
58297: PUSH
58298: LD_INT 3
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 5
58307: PUSH
58308: LD_INT 4
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 5
58317: PUSH
58318: LD_INT 5
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 4
58327: PUSH
58328: LD_INT 5
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 3
58337: PUSH
58338: LD_INT 4
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 3
58347: PUSH
58348: LD_INT 3
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 5
58357: PUSH
58358: LD_INT 3
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 3
58367: PUSH
58368: LD_INT 5
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: LD_INT 3
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 0
58387: PUSH
58388: LD_INT 2
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: LD_INT 3
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 1
58407: PUSH
58408: LD_INT 4
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 0
58417: PUSH
58418: LD_INT 4
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 1
58427: NEG
58428: PUSH
58429: LD_INT 3
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 1
58438: NEG
58439: PUSH
58440: LD_INT 2
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 2
58449: PUSH
58450: LD_INT 4
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 2
58459: NEG
58460: PUSH
58461: LD_INT 2
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 4
58470: NEG
58471: PUSH
58472: LD_INT 0
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 4
58481: NEG
58482: PUSH
58483: LD_INT 1
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 3
58493: NEG
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 3
58504: NEG
58505: PUSH
58506: LD_INT 1
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 4
58515: NEG
58516: PUSH
58517: LD_INT 1
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 5
58526: NEG
58527: PUSH
58528: LD_INT 0
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 5
58537: NEG
58538: PUSH
58539: LD_INT 1
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 5
58549: NEG
58550: PUSH
58551: LD_INT 2
58553: NEG
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 3
58561: NEG
58562: PUSH
58563: LD_INT 2
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 3
58572: NEG
58573: PUSH
58574: LD_INT 3
58576: NEG
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 3
58584: NEG
58585: PUSH
58586: LD_INT 4
58588: NEG
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 2
58596: NEG
58597: PUSH
58598: LD_INT 3
58600: NEG
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 2
58608: NEG
58609: PUSH
58610: LD_INT 2
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 3
58620: NEG
58621: PUSH
58622: LD_INT 2
58624: NEG
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 4
58632: NEG
58633: PUSH
58634: LD_INT 3
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 4
58644: NEG
58645: PUSH
58646: LD_INT 4
58648: NEG
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 2
58656: NEG
58657: PUSH
58658: LD_INT 4
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 4
58668: NEG
58669: PUSH
58670: LD_INT 2
58672: NEG
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 0
58680: PUSH
58681: LD_INT 4
58683: NEG
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: LD_INT 5
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 1
58702: PUSH
58703: LD_INT 4
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 1
58713: PUSH
58714: LD_INT 3
58716: NEG
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: LD_INT 3
58727: NEG
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: LD_INT 4
58739: NEG
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 1
58747: NEG
58748: PUSH
58749: LD_INT 5
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 2
58759: PUSH
58760: LD_INT 3
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 2
58770: NEG
58771: PUSH
58772: LD_INT 5
58774: NEG
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58827: LD_ADDR_VAR 0 31
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: LD_INT 4
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 0
58844: PUSH
58845: LD_INT 3
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 1
58854: PUSH
58855: LD_INT 4
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 1
58864: PUSH
58865: LD_INT 5
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 0
58874: PUSH
58875: LD_INT 5
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 1
58884: NEG
58885: PUSH
58886: LD_INT 4
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 1
58895: NEG
58896: PUSH
58897: LD_INT 3
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 2
58906: PUSH
58907: LD_INT 5
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 2
58916: NEG
58917: PUSH
58918: LD_INT 3
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 3
58927: NEG
58928: PUSH
58929: LD_INT 0
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 3
58938: NEG
58939: PUSH
58940: LD_INT 1
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 2
58950: NEG
58951: PUSH
58952: LD_INT 0
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 2
58961: NEG
58962: PUSH
58963: LD_INT 1
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 3
58972: NEG
58973: PUSH
58974: LD_INT 1
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 4
58983: NEG
58984: PUSH
58985: LD_INT 0
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 4
58994: NEG
58995: PUSH
58996: LD_INT 1
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 4
59006: NEG
59007: PUSH
59008: LD_INT 2
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 2
59018: NEG
59019: PUSH
59020: LD_INT 2
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 4
59029: NEG
59030: PUSH
59031: LD_INT 4
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 4
59041: NEG
59042: PUSH
59043: LD_INT 5
59045: NEG
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 3
59053: NEG
59054: PUSH
59055: LD_INT 4
59057: NEG
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 3
59065: NEG
59066: PUSH
59067: LD_INT 3
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 4
59077: NEG
59078: PUSH
59079: LD_INT 3
59081: NEG
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 5
59089: NEG
59090: PUSH
59091: LD_INT 4
59093: NEG
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 5
59101: NEG
59102: PUSH
59103: LD_INT 5
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 3
59113: NEG
59114: PUSH
59115: LD_INT 5
59117: NEG
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 5
59125: NEG
59126: PUSH
59127: LD_INT 3
59129: NEG
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 0
59137: PUSH
59138: LD_INT 3
59140: NEG
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 0
59148: PUSH
59149: LD_INT 4
59151: NEG
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 1
59159: PUSH
59160: LD_INT 3
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 1
59170: PUSH
59171: LD_INT 2
59173: NEG
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: LD_INT 2
59184: NEG
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 1
59192: NEG
59193: PUSH
59194: LD_INT 3
59196: NEG
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 1
59204: NEG
59205: PUSH
59206: LD_INT 4
59208: NEG
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 2
59216: PUSH
59217: LD_INT 2
59219: NEG
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 2
59227: NEG
59228: PUSH
59229: LD_INT 4
59231: NEG
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 4
59239: PUSH
59240: LD_INT 0
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 4
59249: PUSH
59250: LD_INT 1
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 5
59260: PUSH
59261: LD_INT 0
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 5
59270: PUSH
59271: LD_INT 1
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 4
59280: PUSH
59281: LD_INT 1
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 3
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 3
59300: PUSH
59301: LD_INT 1
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 3
59311: PUSH
59312: LD_INT 2
59314: NEG
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 5
59322: PUSH
59323: LD_INT 2
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59377: LD_ADDR_VAR 0 32
59381: PUSH
59382: LD_INT 4
59384: NEG
59385: PUSH
59386: LD_INT 0
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 4
59395: NEG
59396: PUSH
59397: LD_INT 1
59399: NEG
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 3
59407: NEG
59408: PUSH
59409: LD_INT 0
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 3
59418: NEG
59419: PUSH
59420: LD_INT 1
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 4
59429: NEG
59430: PUSH
59431: LD_INT 1
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 5
59440: NEG
59441: PUSH
59442: LD_INT 0
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 5
59451: NEG
59452: PUSH
59453: LD_INT 1
59455: NEG
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 5
59463: NEG
59464: PUSH
59465: LD_INT 2
59467: NEG
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 3
59475: NEG
59476: PUSH
59477: LD_INT 2
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 3
59486: NEG
59487: PUSH
59488: LD_INT 3
59490: NEG
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 3
59498: NEG
59499: PUSH
59500: LD_INT 4
59502: NEG
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 2
59510: NEG
59511: PUSH
59512: LD_INT 3
59514: NEG
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 2
59522: NEG
59523: PUSH
59524: LD_INT 2
59526: NEG
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 3
59534: NEG
59535: PUSH
59536: LD_INT 2
59538: NEG
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 4
59546: NEG
59547: PUSH
59548: LD_INT 3
59550: NEG
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 4
59558: NEG
59559: PUSH
59560: LD_INT 4
59562: NEG
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 2
59570: NEG
59571: PUSH
59572: LD_INT 4
59574: NEG
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 4
59582: NEG
59583: PUSH
59584: LD_INT 2
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 0
59594: PUSH
59595: LD_INT 4
59597: NEG
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 0
59605: PUSH
59606: LD_INT 5
59608: NEG
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 1
59616: PUSH
59617: LD_INT 4
59619: NEG
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 1
59627: PUSH
59628: LD_INT 3
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 0
59638: PUSH
59639: LD_INT 3
59641: NEG
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 1
59649: NEG
59650: PUSH
59651: LD_INT 4
59653: NEG
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 1
59661: NEG
59662: PUSH
59663: LD_INT 5
59665: NEG
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 2
59673: PUSH
59674: LD_INT 3
59676: NEG
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 2
59684: NEG
59685: PUSH
59686: LD_INT 5
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 3
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 3
59706: PUSH
59707: LD_INT 1
59709: NEG
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 4
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 4
59727: PUSH
59728: LD_INT 1
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 3
59737: PUSH
59738: LD_INT 1
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 2
59747: PUSH
59748: LD_INT 0
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 2
59757: PUSH
59758: LD_INT 1
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 2
59768: PUSH
59769: LD_INT 2
59771: NEG
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 4
59779: PUSH
59780: LD_INT 2
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 4
59789: PUSH
59790: LD_INT 4
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 4
59799: PUSH
59800: LD_INT 3
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 5
59809: PUSH
59810: LD_INT 4
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 5
59819: PUSH
59820: LD_INT 5
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 4
59829: PUSH
59830: LD_INT 5
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 3
59839: PUSH
59840: LD_INT 4
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 3
59849: PUSH
59850: LD_INT 3
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 5
59859: PUSH
59860: LD_INT 3
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 3
59869: PUSH
59870: LD_INT 5
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59924: LD_ADDR_VAR 0 33
59928: PUSH
59929: LD_INT 4
59931: NEG
59932: PUSH
59933: LD_INT 4
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 4
59943: NEG
59944: PUSH
59945: LD_INT 5
59947: NEG
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 3
59955: NEG
59956: PUSH
59957: LD_INT 4
59959: NEG
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 3
59967: NEG
59968: PUSH
59969: LD_INT 3
59971: NEG
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 4
59979: NEG
59980: PUSH
59981: LD_INT 3
59983: NEG
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 5
59991: NEG
59992: PUSH
59993: LD_INT 4
59995: NEG
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 5
60003: NEG
60004: PUSH
60005: LD_INT 5
60007: NEG
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 3
60015: NEG
60016: PUSH
60017: LD_INT 5
60019: NEG
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 5
60027: NEG
60028: PUSH
60029: LD_INT 3
60031: NEG
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 0
60039: PUSH
60040: LD_INT 3
60042: NEG
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 0
60050: PUSH
60051: LD_INT 4
60053: NEG
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 1
60061: PUSH
60062: LD_INT 3
60064: NEG
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 1
60072: PUSH
60073: LD_INT 2
60075: NEG
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 0
60083: PUSH
60084: LD_INT 2
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 1
60094: NEG
60095: PUSH
60096: LD_INT 3
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 1
60106: NEG
60107: PUSH
60108: LD_INT 4
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 2
60118: PUSH
60119: LD_INT 2
60121: NEG
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 2
60129: NEG
60130: PUSH
60131: LD_INT 4
60133: NEG
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 4
60141: PUSH
60142: LD_INT 0
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 4
60151: PUSH
60152: LD_INT 1
60154: NEG
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 5
60162: PUSH
60163: LD_INT 0
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 5
60172: PUSH
60173: LD_INT 1
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 4
60182: PUSH
60183: LD_INT 1
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 3
60192: PUSH
60193: LD_INT 0
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 3
60202: PUSH
60203: LD_INT 1
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 3
60213: PUSH
60214: LD_INT 2
60216: NEG
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 5
60224: PUSH
60225: LD_INT 2
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 3
60234: PUSH
60235: LD_INT 3
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 3
60244: PUSH
60245: LD_INT 2
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 4
60254: PUSH
60255: LD_INT 3
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 4
60264: PUSH
60265: LD_INT 4
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 3
60274: PUSH
60275: LD_INT 4
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 2
60284: PUSH
60285: LD_INT 3
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 2
60294: PUSH
60295: LD_INT 2
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 4
60304: PUSH
60305: LD_INT 2
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 2
60314: PUSH
60315: LD_INT 4
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 0
60324: PUSH
60325: LD_INT 4
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 0
60334: PUSH
60335: LD_INT 3
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 1
60344: PUSH
60345: LD_INT 4
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 1
60354: PUSH
60355: LD_INT 5
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 0
60364: PUSH
60365: LD_INT 5
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 1
60374: NEG
60375: PUSH
60376: LD_INT 4
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 1
60385: NEG
60386: PUSH
60387: LD_INT 3
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 2
60396: PUSH
60397: LD_INT 5
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 2
60406: NEG
60407: PUSH
60408: LD_INT 3
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60462: LD_ADDR_VAR 0 34
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: LD_INT 4
60472: NEG
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 0
60480: PUSH
60481: LD_INT 5
60483: NEG
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 1
60491: PUSH
60492: LD_INT 4
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 1
60502: PUSH
60503: LD_INT 3
60505: NEG
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: LD_INT 3
60516: NEG
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 1
60524: NEG
60525: PUSH
60526: LD_INT 4
60528: NEG
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 1
60536: NEG
60537: PUSH
60538: LD_INT 5
60540: NEG
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 2
60548: PUSH
60549: LD_INT 3
60551: NEG
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 2
60559: NEG
60560: PUSH
60561: LD_INT 5
60563: NEG
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 3
60571: PUSH
60572: LD_INT 0
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 3
60581: PUSH
60582: LD_INT 1
60584: NEG
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 4
60592: PUSH
60593: LD_INT 0
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 4
60602: PUSH
60603: LD_INT 1
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 3
60612: PUSH
60613: LD_INT 1
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 2
60622: PUSH
60623: LD_INT 0
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 2
60632: PUSH
60633: LD_INT 1
60635: NEG
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 2
60643: PUSH
60644: LD_INT 2
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 4
60654: PUSH
60655: LD_INT 2
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 4
60664: PUSH
60665: LD_INT 4
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 4
60674: PUSH
60675: LD_INT 3
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 5
60684: PUSH
60685: LD_INT 4
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 5
60694: PUSH
60695: LD_INT 5
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 4
60704: PUSH
60705: LD_INT 5
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 3
60714: PUSH
60715: LD_INT 4
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 3
60724: PUSH
60725: LD_INT 3
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 5
60734: PUSH
60735: LD_INT 3
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 3
60744: PUSH
60745: LD_INT 5
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 0
60754: PUSH
60755: LD_INT 3
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 0
60764: PUSH
60765: LD_INT 2
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 1
60774: PUSH
60775: LD_INT 3
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 1
60784: PUSH
60785: LD_INT 4
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 0
60794: PUSH
60795: LD_INT 4
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 1
60804: NEG
60805: PUSH
60806: LD_INT 3
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 1
60815: NEG
60816: PUSH
60817: LD_INT 2
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 2
60826: PUSH
60827: LD_INT 4
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 2
60836: NEG
60837: PUSH
60838: LD_INT 2
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 4
60847: NEG
60848: PUSH
60849: LD_INT 0
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 4
60858: NEG
60859: PUSH
60860: LD_INT 1
60862: NEG
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 3
60870: NEG
60871: PUSH
60872: LD_INT 0
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 3
60881: NEG
60882: PUSH
60883: LD_INT 1
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 4
60892: NEG
60893: PUSH
60894: LD_INT 1
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 5
60903: NEG
60904: PUSH
60905: LD_INT 0
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 5
60914: NEG
60915: PUSH
60916: LD_INT 1
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 5
60926: NEG
60927: PUSH
60928: LD_INT 2
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 3
60938: NEG
60939: PUSH
60940: LD_INT 2
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: ST_TO_ADDR
// end ; end ;
60994: GO 60997
60996: POP
// case btype of b_depot , b_warehouse :
60997: LD_VAR 0 1
61001: PUSH
61002: LD_INT 0
61004: DOUBLE
61005: EQUAL
61006: IFTRUE 61016
61008: LD_INT 1
61010: DOUBLE
61011: EQUAL
61012: IFTRUE 61016
61014: GO 61217
61016: POP
// case nation of nation_american :
61017: LD_VAR 0 5
61021: PUSH
61022: LD_INT 1
61024: DOUBLE
61025: EQUAL
61026: IFTRUE 61030
61028: GO 61086
61030: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61031: LD_ADDR_VAR 0 9
61035: PUSH
61036: LD_VAR 0 11
61040: PUSH
61041: LD_VAR 0 12
61045: PUSH
61046: LD_VAR 0 13
61050: PUSH
61051: LD_VAR 0 14
61055: PUSH
61056: LD_VAR 0 15
61060: PUSH
61061: LD_VAR 0 16
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: PUSH
61074: LD_VAR 0 4
61078: PUSH
61079: LD_INT 1
61081: PLUS
61082: ARRAY
61083: ST_TO_ADDR
61084: GO 61215
61086: LD_INT 2
61088: DOUBLE
61089: EQUAL
61090: IFTRUE 61094
61092: GO 61150
61094: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61095: LD_ADDR_VAR 0 9
61099: PUSH
61100: LD_VAR 0 17
61104: PUSH
61105: LD_VAR 0 18
61109: PUSH
61110: LD_VAR 0 19
61114: PUSH
61115: LD_VAR 0 20
61119: PUSH
61120: LD_VAR 0 21
61124: PUSH
61125: LD_VAR 0 22
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: PUSH
61138: LD_VAR 0 4
61142: PUSH
61143: LD_INT 1
61145: PLUS
61146: ARRAY
61147: ST_TO_ADDR
61148: GO 61215
61150: LD_INT 3
61152: DOUBLE
61153: EQUAL
61154: IFTRUE 61158
61156: GO 61214
61158: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61159: LD_ADDR_VAR 0 9
61163: PUSH
61164: LD_VAR 0 23
61168: PUSH
61169: LD_VAR 0 24
61173: PUSH
61174: LD_VAR 0 25
61178: PUSH
61179: LD_VAR 0 26
61183: PUSH
61184: LD_VAR 0 27
61188: PUSH
61189: LD_VAR 0 28
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: PUSH
61202: LD_VAR 0 4
61206: PUSH
61207: LD_INT 1
61209: PLUS
61210: ARRAY
61211: ST_TO_ADDR
61212: GO 61215
61214: POP
61215: GO 61770
61217: LD_INT 2
61219: DOUBLE
61220: EQUAL
61221: IFTRUE 61231
61223: LD_INT 3
61225: DOUBLE
61226: EQUAL
61227: IFTRUE 61231
61229: GO 61287
61231: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61232: LD_ADDR_VAR 0 9
61236: PUSH
61237: LD_VAR 0 29
61241: PUSH
61242: LD_VAR 0 30
61246: PUSH
61247: LD_VAR 0 31
61251: PUSH
61252: LD_VAR 0 32
61256: PUSH
61257: LD_VAR 0 33
61261: PUSH
61262: LD_VAR 0 34
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: PUSH
61275: LD_VAR 0 4
61279: PUSH
61280: LD_INT 1
61282: PLUS
61283: ARRAY
61284: ST_TO_ADDR
61285: GO 61770
61287: LD_INT 16
61289: DOUBLE
61290: EQUAL
61291: IFTRUE 61349
61293: LD_INT 17
61295: DOUBLE
61296: EQUAL
61297: IFTRUE 61349
61299: LD_INT 18
61301: DOUBLE
61302: EQUAL
61303: IFTRUE 61349
61305: LD_INT 19
61307: DOUBLE
61308: EQUAL
61309: IFTRUE 61349
61311: LD_INT 22
61313: DOUBLE
61314: EQUAL
61315: IFTRUE 61349
61317: LD_INT 20
61319: DOUBLE
61320: EQUAL
61321: IFTRUE 61349
61323: LD_INT 21
61325: DOUBLE
61326: EQUAL
61327: IFTRUE 61349
61329: LD_INT 23
61331: DOUBLE
61332: EQUAL
61333: IFTRUE 61349
61335: LD_INT 24
61337: DOUBLE
61338: EQUAL
61339: IFTRUE 61349
61341: LD_INT 25
61343: DOUBLE
61344: EQUAL
61345: IFTRUE 61349
61347: GO 61405
61349: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61350: LD_ADDR_VAR 0 9
61354: PUSH
61355: LD_VAR 0 35
61359: PUSH
61360: LD_VAR 0 36
61364: PUSH
61365: LD_VAR 0 37
61369: PUSH
61370: LD_VAR 0 38
61374: PUSH
61375: LD_VAR 0 39
61379: PUSH
61380: LD_VAR 0 40
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: PUSH
61393: LD_VAR 0 4
61397: PUSH
61398: LD_INT 1
61400: PLUS
61401: ARRAY
61402: ST_TO_ADDR
61403: GO 61770
61405: LD_INT 6
61407: DOUBLE
61408: EQUAL
61409: IFTRUE 61461
61411: LD_INT 7
61413: DOUBLE
61414: EQUAL
61415: IFTRUE 61461
61417: LD_INT 8
61419: DOUBLE
61420: EQUAL
61421: IFTRUE 61461
61423: LD_INT 13
61425: DOUBLE
61426: EQUAL
61427: IFTRUE 61461
61429: LD_INT 12
61431: DOUBLE
61432: EQUAL
61433: IFTRUE 61461
61435: LD_INT 15
61437: DOUBLE
61438: EQUAL
61439: IFTRUE 61461
61441: LD_INT 11
61443: DOUBLE
61444: EQUAL
61445: IFTRUE 61461
61447: LD_INT 14
61449: DOUBLE
61450: EQUAL
61451: IFTRUE 61461
61453: LD_INT 10
61455: DOUBLE
61456: EQUAL
61457: IFTRUE 61461
61459: GO 61517
61461: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61462: LD_ADDR_VAR 0 9
61466: PUSH
61467: LD_VAR 0 41
61471: PUSH
61472: LD_VAR 0 42
61476: PUSH
61477: LD_VAR 0 43
61481: PUSH
61482: LD_VAR 0 44
61486: PUSH
61487: LD_VAR 0 45
61491: PUSH
61492: LD_VAR 0 46
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: PUSH
61505: LD_VAR 0 4
61509: PUSH
61510: LD_INT 1
61512: PLUS
61513: ARRAY
61514: ST_TO_ADDR
61515: GO 61770
61517: LD_INT 36
61519: DOUBLE
61520: EQUAL
61521: IFTRUE 61525
61523: GO 61581
61525: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61526: LD_ADDR_VAR 0 9
61530: PUSH
61531: LD_VAR 0 47
61535: PUSH
61536: LD_VAR 0 48
61540: PUSH
61541: LD_VAR 0 49
61545: PUSH
61546: LD_VAR 0 50
61550: PUSH
61551: LD_VAR 0 51
61555: PUSH
61556: LD_VAR 0 52
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: PUSH
61569: LD_VAR 0 4
61573: PUSH
61574: LD_INT 1
61576: PLUS
61577: ARRAY
61578: ST_TO_ADDR
61579: GO 61770
61581: LD_INT 4
61583: DOUBLE
61584: EQUAL
61585: IFTRUE 61607
61587: LD_INT 5
61589: DOUBLE
61590: EQUAL
61591: IFTRUE 61607
61593: LD_INT 34
61595: DOUBLE
61596: EQUAL
61597: IFTRUE 61607
61599: LD_INT 37
61601: DOUBLE
61602: EQUAL
61603: IFTRUE 61607
61605: GO 61663
61607: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61608: LD_ADDR_VAR 0 9
61612: PUSH
61613: LD_VAR 0 53
61617: PUSH
61618: LD_VAR 0 54
61622: PUSH
61623: LD_VAR 0 55
61627: PUSH
61628: LD_VAR 0 56
61632: PUSH
61633: LD_VAR 0 57
61637: PUSH
61638: LD_VAR 0 58
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: PUSH
61651: LD_VAR 0 4
61655: PUSH
61656: LD_INT 1
61658: PLUS
61659: ARRAY
61660: ST_TO_ADDR
61661: GO 61770
61663: LD_INT 31
61665: DOUBLE
61666: EQUAL
61667: IFTRUE 61713
61669: LD_INT 32
61671: DOUBLE
61672: EQUAL
61673: IFTRUE 61713
61675: LD_INT 33
61677: DOUBLE
61678: EQUAL
61679: IFTRUE 61713
61681: LD_INT 27
61683: DOUBLE
61684: EQUAL
61685: IFTRUE 61713
61687: LD_INT 26
61689: DOUBLE
61690: EQUAL
61691: IFTRUE 61713
61693: LD_INT 28
61695: DOUBLE
61696: EQUAL
61697: IFTRUE 61713
61699: LD_INT 29
61701: DOUBLE
61702: EQUAL
61703: IFTRUE 61713
61705: LD_INT 30
61707: DOUBLE
61708: EQUAL
61709: IFTRUE 61713
61711: GO 61769
61713: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61714: LD_ADDR_VAR 0 9
61718: PUSH
61719: LD_VAR 0 59
61723: PUSH
61724: LD_VAR 0 60
61728: PUSH
61729: LD_VAR 0 61
61733: PUSH
61734: LD_VAR 0 62
61738: PUSH
61739: LD_VAR 0 63
61743: PUSH
61744: LD_VAR 0 64
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: PUSH
61757: LD_VAR 0 4
61761: PUSH
61762: LD_INT 1
61764: PLUS
61765: ARRAY
61766: ST_TO_ADDR
61767: GO 61770
61769: POP
// temp_list2 = [ ] ;
61770: LD_ADDR_VAR 0 10
61774: PUSH
61775: EMPTY
61776: ST_TO_ADDR
// for i in temp_list do
61777: LD_ADDR_VAR 0 8
61781: PUSH
61782: LD_VAR 0 9
61786: PUSH
61787: FOR_IN
61788: IFFALSE 61840
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61790: LD_ADDR_VAR 0 10
61794: PUSH
61795: LD_VAR 0 10
61799: PUSH
61800: LD_VAR 0 8
61804: PUSH
61805: LD_INT 1
61807: ARRAY
61808: PUSH
61809: LD_VAR 0 2
61813: PLUS
61814: PUSH
61815: LD_VAR 0 8
61819: PUSH
61820: LD_INT 2
61822: ARRAY
61823: PUSH
61824: LD_VAR 0 3
61828: PLUS
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: EMPTY
61835: LIST
61836: ADD
61837: ST_TO_ADDR
61838: GO 61787
61840: POP
61841: POP
// result = temp_list2 ;
61842: LD_ADDR_VAR 0 7
61846: PUSH
61847: LD_VAR 0 10
61851: ST_TO_ADDR
// end ;
61852: LD_VAR 0 7
61856: RET
// export function EnemyInRange ( unit , dist ) ; begin
61857: LD_INT 0
61859: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61860: LD_ADDR_VAR 0 3
61864: PUSH
61865: LD_VAR 0 1
61869: PPUSH
61870: CALL_OW 255
61874: PPUSH
61875: LD_VAR 0 1
61879: PPUSH
61880: CALL_OW 250
61884: PPUSH
61885: LD_VAR 0 1
61889: PPUSH
61890: CALL_OW 251
61894: PPUSH
61895: LD_VAR 0 2
61899: PPUSH
61900: CALL 35259 0 4
61904: PUSH
61905: LD_INT 4
61907: ARRAY
61908: ST_TO_ADDR
// end ;
61909: LD_VAR 0 3
61913: RET
// export function PlayerSeeMe ( unit ) ; begin
61914: LD_INT 0
61916: PPUSH
// result := See ( your_side , unit ) ;
61917: LD_ADDR_VAR 0 2
61921: PUSH
61922: LD_OWVAR 2
61926: PPUSH
61927: LD_VAR 0 1
61931: PPUSH
61932: CALL_OW 292
61936: ST_TO_ADDR
// end ;
61937: LD_VAR 0 2
61941: RET
// export function ReverseDir ( unit ) ; begin
61942: LD_INT 0
61944: PPUSH
// if not unit then
61945: LD_VAR 0 1
61949: NOT
61950: IFFALSE 61954
// exit ;
61952: GO 61977
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61954: LD_ADDR_VAR 0 2
61958: PUSH
61959: LD_VAR 0 1
61963: PPUSH
61964: CALL_OW 254
61968: PUSH
61969: LD_INT 3
61971: PLUS
61972: PUSH
61973: LD_INT 6
61975: MOD
61976: ST_TO_ADDR
// end ;
61977: LD_VAR 0 2
61981: RET
// export function ReverseArray ( array ) ; var i ; begin
61982: LD_INT 0
61984: PPUSH
61985: PPUSH
// if not array then
61986: LD_VAR 0 1
61990: NOT
61991: IFFALSE 61995
// exit ;
61993: GO 62050
// result := [ ] ;
61995: LD_ADDR_VAR 0 2
61999: PUSH
62000: EMPTY
62001: ST_TO_ADDR
// for i := array downto 1 do
62002: LD_ADDR_VAR 0 3
62006: PUSH
62007: DOUBLE
62008: LD_VAR 0 1
62012: INC
62013: ST_TO_ADDR
62014: LD_INT 1
62016: PUSH
62017: FOR_DOWNTO
62018: IFFALSE 62048
// result := Join ( result , array [ i ] ) ;
62020: LD_ADDR_VAR 0 2
62024: PUSH
62025: LD_VAR 0 2
62029: PPUSH
62030: LD_VAR 0 1
62034: PUSH
62035: LD_VAR 0 3
62039: ARRAY
62040: PPUSH
62041: CALL 66694 0 2
62045: ST_TO_ADDR
62046: GO 62017
62048: POP
62049: POP
// end ;
62050: LD_VAR 0 2
62054: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62055: LD_INT 0
62057: PPUSH
62058: PPUSH
62059: PPUSH
62060: PPUSH
62061: PPUSH
62062: PPUSH
// if not unit or not hexes then
62063: LD_VAR 0 1
62067: NOT
62068: PUSH
62069: LD_VAR 0 2
62073: NOT
62074: OR
62075: IFFALSE 62079
// exit ;
62077: GO 62202
// dist := 9999 ;
62079: LD_ADDR_VAR 0 5
62083: PUSH
62084: LD_INT 9999
62086: ST_TO_ADDR
// for i = 1 to hexes do
62087: LD_ADDR_VAR 0 4
62091: PUSH
62092: DOUBLE
62093: LD_INT 1
62095: DEC
62096: ST_TO_ADDR
62097: LD_VAR 0 2
62101: PUSH
62102: FOR_TO
62103: IFFALSE 62190
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62105: LD_ADDR_VAR 0 6
62109: PUSH
62110: LD_VAR 0 1
62114: PPUSH
62115: LD_VAR 0 2
62119: PUSH
62120: LD_VAR 0 4
62124: ARRAY
62125: PUSH
62126: LD_INT 1
62128: ARRAY
62129: PPUSH
62130: LD_VAR 0 2
62134: PUSH
62135: LD_VAR 0 4
62139: ARRAY
62140: PUSH
62141: LD_INT 2
62143: ARRAY
62144: PPUSH
62145: CALL_OW 297
62149: ST_TO_ADDR
// if tdist < dist then
62150: LD_VAR 0 6
62154: PUSH
62155: LD_VAR 0 5
62159: LESS
62160: IFFALSE 62188
// begin hex := hexes [ i ] ;
62162: LD_ADDR_VAR 0 8
62166: PUSH
62167: LD_VAR 0 2
62171: PUSH
62172: LD_VAR 0 4
62176: ARRAY
62177: ST_TO_ADDR
// dist := tdist ;
62178: LD_ADDR_VAR 0 5
62182: PUSH
62183: LD_VAR 0 6
62187: ST_TO_ADDR
// end ; end ;
62188: GO 62102
62190: POP
62191: POP
// result := hex ;
62192: LD_ADDR_VAR 0 3
62196: PUSH
62197: LD_VAR 0 8
62201: ST_TO_ADDR
// end ;
62202: LD_VAR 0 3
62206: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62207: LD_INT 0
62209: PPUSH
62210: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62211: LD_VAR 0 1
62215: NOT
62216: PUSH
62217: LD_VAR 0 1
62221: PUSH
62222: LD_INT 21
62224: PUSH
62225: LD_INT 2
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 23
62234: PUSH
62235: LD_INT 2
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PPUSH
62246: CALL_OW 69
62250: IN
62251: NOT
62252: OR
62253: IFFALSE 62257
// exit ;
62255: GO 62304
// for i = 1 to 3 do
62257: LD_ADDR_VAR 0 3
62261: PUSH
62262: DOUBLE
62263: LD_INT 1
62265: DEC
62266: ST_TO_ADDR
62267: LD_INT 3
62269: PUSH
62270: FOR_TO
62271: IFFALSE 62302
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62273: LD_VAR 0 1
62277: PPUSH
62278: CALL_OW 250
62282: PPUSH
62283: LD_VAR 0 1
62287: PPUSH
62288: CALL_OW 251
62292: PPUSH
62293: LD_INT 1
62295: PPUSH
62296: CALL_OW 453
62300: GO 62270
62302: POP
62303: POP
// end ;
62304: LD_VAR 0 2
62308: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62309: LD_INT 0
62311: PPUSH
62312: PPUSH
62313: PPUSH
62314: PPUSH
62315: PPUSH
62316: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62317: LD_VAR 0 1
62321: NOT
62322: PUSH
62323: LD_VAR 0 2
62327: NOT
62328: OR
62329: PUSH
62330: LD_VAR 0 1
62334: PPUSH
62335: CALL_OW 314
62339: OR
62340: IFFALSE 62344
// exit ;
62342: GO 62811
// if GetLives ( i ) < 250 then
62344: LD_VAR 0 4
62348: PPUSH
62349: CALL_OW 256
62353: PUSH
62354: LD_INT 250
62356: LESS
62357: IFFALSE 62370
// begin ComAutodestruct ( i ) ;
62359: LD_VAR 0 4
62363: PPUSH
62364: CALL 62207 0 1
// exit ;
62368: GO 62811
// end ; x := GetX ( enemy_unit ) ;
62370: LD_ADDR_VAR 0 7
62374: PUSH
62375: LD_VAR 0 2
62379: PPUSH
62380: CALL_OW 250
62384: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62385: LD_ADDR_VAR 0 8
62389: PUSH
62390: LD_VAR 0 2
62394: PPUSH
62395: CALL_OW 251
62399: ST_TO_ADDR
// if not x or not y then
62400: LD_VAR 0 7
62404: NOT
62405: PUSH
62406: LD_VAR 0 8
62410: NOT
62411: OR
62412: IFFALSE 62416
// exit ;
62414: GO 62811
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62416: LD_ADDR_VAR 0 6
62420: PUSH
62421: LD_VAR 0 7
62425: PPUSH
62426: LD_INT 0
62428: PPUSH
62429: LD_INT 4
62431: PPUSH
62432: CALL_OW 272
62436: PUSH
62437: LD_VAR 0 8
62441: PPUSH
62442: LD_INT 0
62444: PPUSH
62445: LD_INT 4
62447: PPUSH
62448: CALL_OW 273
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_VAR 0 7
62461: PPUSH
62462: LD_INT 1
62464: PPUSH
62465: LD_INT 4
62467: PPUSH
62468: CALL_OW 272
62472: PUSH
62473: LD_VAR 0 8
62477: PPUSH
62478: LD_INT 1
62480: PPUSH
62481: LD_INT 4
62483: PPUSH
62484: CALL_OW 273
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_VAR 0 7
62497: PPUSH
62498: LD_INT 2
62500: PPUSH
62501: LD_INT 4
62503: PPUSH
62504: CALL_OW 272
62508: PUSH
62509: LD_VAR 0 8
62513: PPUSH
62514: LD_INT 2
62516: PPUSH
62517: LD_INT 4
62519: PPUSH
62520: CALL_OW 273
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_VAR 0 7
62533: PPUSH
62534: LD_INT 3
62536: PPUSH
62537: LD_INT 4
62539: PPUSH
62540: CALL_OW 272
62544: PUSH
62545: LD_VAR 0 8
62549: PPUSH
62550: LD_INT 3
62552: PPUSH
62553: LD_INT 4
62555: PPUSH
62556: CALL_OW 273
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_VAR 0 7
62569: PPUSH
62570: LD_INT 4
62572: PPUSH
62573: LD_INT 4
62575: PPUSH
62576: CALL_OW 272
62580: PUSH
62581: LD_VAR 0 8
62585: PPUSH
62586: LD_INT 4
62588: PPUSH
62589: LD_INT 4
62591: PPUSH
62592: CALL_OW 273
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_VAR 0 7
62605: PPUSH
62606: LD_INT 5
62608: PPUSH
62609: LD_INT 4
62611: PPUSH
62612: CALL_OW 272
62616: PUSH
62617: LD_VAR 0 8
62621: PPUSH
62622: LD_INT 5
62624: PPUSH
62625: LD_INT 4
62627: PPUSH
62628: CALL_OW 273
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: ST_TO_ADDR
// for i = tmp downto 1 do
62645: LD_ADDR_VAR 0 4
62649: PUSH
62650: DOUBLE
62651: LD_VAR 0 6
62655: INC
62656: ST_TO_ADDR
62657: LD_INT 1
62659: PUSH
62660: FOR_DOWNTO
62661: IFFALSE 62762
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62663: LD_VAR 0 6
62667: PUSH
62668: LD_VAR 0 4
62672: ARRAY
62673: PUSH
62674: LD_INT 1
62676: ARRAY
62677: PPUSH
62678: LD_VAR 0 6
62682: PUSH
62683: LD_VAR 0 4
62687: ARRAY
62688: PUSH
62689: LD_INT 2
62691: ARRAY
62692: PPUSH
62693: CALL_OW 488
62697: NOT
62698: PUSH
62699: LD_VAR 0 6
62703: PUSH
62704: LD_VAR 0 4
62708: ARRAY
62709: PUSH
62710: LD_INT 1
62712: ARRAY
62713: PPUSH
62714: LD_VAR 0 6
62718: PUSH
62719: LD_VAR 0 4
62723: ARRAY
62724: PUSH
62725: LD_INT 2
62727: ARRAY
62728: PPUSH
62729: CALL_OW 428
62733: PUSH
62734: LD_INT 0
62736: NONEQUAL
62737: OR
62738: IFFALSE 62760
// tmp := Delete ( tmp , i ) ;
62740: LD_ADDR_VAR 0 6
62744: PUSH
62745: LD_VAR 0 6
62749: PPUSH
62750: LD_VAR 0 4
62754: PPUSH
62755: CALL_OW 3
62759: ST_TO_ADDR
62760: GO 62660
62762: POP
62763: POP
// j := GetClosestHex ( unit , tmp ) ;
62764: LD_ADDR_VAR 0 5
62768: PUSH
62769: LD_VAR 0 1
62773: PPUSH
62774: LD_VAR 0 6
62778: PPUSH
62779: CALL 62055 0 2
62783: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62784: LD_VAR 0 1
62788: PPUSH
62789: LD_VAR 0 5
62793: PUSH
62794: LD_INT 1
62796: ARRAY
62797: PPUSH
62798: LD_VAR 0 5
62802: PUSH
62803: LD_INT 2
62805: ARRAY
62806: PPUSH
62807: CALL_OW 111
// end ;
62811: LD_VAR 0 3
62815: RET
// export function PrepareApemanSoldier ( ) ; begin
62816: LD_INT 0
62818: PPUSH
// uc_nation := 0 ;
62819: LD_ADDR_OWVAR 21
62823: PUSH
62824: LD_INT 0
62826: ST_TO_ADDR
// hc_sex := sex_male ;
62827: LD_ADDR_OWVAR 27
62831: PUSH
62832: LD_INT 1
62834: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62835: LD_ADDR_OWVAR 28
62839: PUSH
62840: LD_INT 15
62842: ST_TO_ADDR
// hc_gallery :=  ;
62843: LD_ADDR_OWVAR 33
62847: PUSH
62848: LD_STRING 
62850: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62851: LD_ADDR_OWVAR 31
62855: PUSH
62856: LD_INT 0
62858: PPUSH
62859: LD_INT 3
62861: PPUSH
62862: CALL_OW 12
62866: PUSH
62867: LD_INT 0
62869: PPUSH
62870: LD_INT 3
62872: PPUSH
62873: CALL_OW 12
62877: PUSH
62878: LD_INT 0
62880: PUSH
62881: LD_INT 0
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: ST_TO_ADDR
// end ;
62890: LD_VAR 0 1
62894: RET
// export function PrepareApemanEngineer ( ) ; begin
62895: LD_INT 0
62897: PPUSH
// uc_nation := 0 ;
62898: LD_ADDR_OWVAR 21
62902: PUSH
62903: LD_INT 0
62905: ST_TO_ADDR
// hc_sex := sex_male ;
62906: LD_ADDR_OWVAR 27
62910: PUSH
62911: LD_INT 1
62913: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62914: LD_ADDR_OWVAR 28
62918: PUSH
62919: LD_INT 16
62921: ST_TO_ADDR
// hc_gallery :=  ;
62922: LD_ADDR_OWVAR 33
62926: PUSH
62927: LD_STRING 
62929: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62930: LD_ADDR_OWVAR 31
62934: PUSH
62935: LD_INT 0
62937: PPUSH
62938: LD_INT 3
62940: PPUSH
62941: CALL_OW 12
62945: PUSH
62946: LD_INT 0
62948: PPUSH
62949: LD_INT 3
62951: PPUSH
62952: CALL_OW 12
62956: PUSH
62957: LD_INT 0
62959: PUSH
62960: LD_INT 0
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: ST_TO_ADDR
// end ;
62969: LD_VAR 0 1
62973: RET
// export function PrepareApeman ( agressivity ) ; begin
62974: LD_INT 0
62976: PPUSH
// uc_side := 0 ;
62977: LD_ADDR_OWVAR 20
62981: PUSH
62982: LD_INT 0
62984: ST_TO_ADDR
// uc_nation := 0 ;
62985: LD_ADDR_OWVAR 21
62989: PUSH
62990: LD_INT 0
62992: ST_TO_ADDR
// hc_sex := sex_male ;
62993: LD_ADDR_OWVAR 27
62997: PUSH
62998: LD_INT 1
63000: ST_TO_ADDR
// hc_class := class_apeman ;
63001: LD_ADDR_OWVAR 28
63005: PUSH
63006: LD_INT 12
63008: ST_TO_ADDR
// hc_gallery :=  ;
63009: LD_ADDR_OWVAR 33
63013: PUSH
63014: LD_STRING 
63016: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63017: LD_ADDR_OWVAR 35
63021: PUSH
63022: LD_VAR 0 1
63026: NEG
63027: PPUSH
63028: LD_VAR 0 1
63032: PPUSH
63033: CALL_OW 12
63037: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63038: LD_ADDR_OWVAR 31
63042: PUSH
63043: LD_INT 0
63045: PPUSH
63046: LD_INT 3
63048: PPUSH
63049: CALL_OW 12
63053: PUSH
63054: LD_INT 0
63056: PPUSH
63057: LD_INT 3
63059: PPUSH
63060: CALL_OW 12
63064: PUSH
63065: LD_INT 0
63067: PUSH
63068: LD_INT 0
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: ST_TO_ADDR
// end ;
63077: LD_VAR 0 2
63081: RET
// export function PrepareTiger ( agressivity ) ; begin
63082: LD_INT 0
63084: PPUSH
// uc_side := 0 ;
63085: LD_ADDR_OWVAR 20
63089: PUSH
63090: LD_INT 0
63092: ST_TO_ADDR
// uc_nation := 0 ;
63093: LD_ADDR_OWVAR 21
63097: PUSH
63098: LD_INT 0
63100: ST_TO_ADDR
// hc_class := class_tiger ;
63101: LD_ADDR_OWVAR 28
63105: PUSH
63106: LD_INT 14
63108: ST_TO_ADDR
// hc_gallery :=  ;
63109: LD_ADDR_OWVAR 33
63113: PUSH
63114: LD_STRING 
63116: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63117: LD_ADDR_OWVAR 35
63121: PUSH
63122: LD_VAR 0 1
63126: NEG
63127: PPUSH
63128: LD_VAR 0 1
63132: PPUSH
63133: CALL_OW 12
63137: ST_TO_ADDR
// end ;
63138: LD_VAR 0 2
63142: RET
// export function PrepareEnchidna ( ) ; begin
63143: LD_INT 0
63145: PPUSH
// uc_side := 0 ;
63146: LD_ADDR_OWVAR 20
63150: PUSH
63151: LD_INT 0
63153: ST_TO_ADDR
// uc_nation := 0 ;
63154: LD_ADDR_OWVAR 21
63158: PUSH
63159: LD_INT 0
63161: ST_TO_ADDR
// hc_class := class_baggie ;
63162: LD_ADDR_OWVAR 28
63166: PUSH
63167: LD_INT 13
63169: ST_TO_ADDR
// hc_gallery :=  ;
63170: LD_ADDR_OWVAR 33
63174: PUSH
63175: LD_STRING 
63177: ST_TO_ADDR
// end ;
63178: LD_VAR 0 1
63182: RET
// export function PrepareFrog ( ) ; begin
63183: LD_INT 0
63185: PPUSH
// uc_side := 0 ;
63186: LD_ADDR_OWVAR 20
63190: PUSH
63191: LD_INT 0
63193: ST_TO_ADDR
// uc_nation := 0 ;
63194: LD_ADDR_OWVAR 21
63198: PUSH
63199: LD_INT 0
63201: ST_TO_ADDR
// hc_class := class_frog ;
63202: LD_ADDR_OWVAR 28
63206: PUSH
63207: LD_INT 19
63209: ST_TO_ADDR
// hc_gallery :=  ;
63210: LD_ADDR_OWVAR 33
63214: PUSH
63215: LD_STRING 
63217: ST_TO_ADDR
// end ;
63218: LD_VAR 0 1
63222: RET
// export function PrepareFish ( ) ; begin
63223: LD_INT 0
63225: PPUSH
// uc_side := 0 ;
63226: LD_ADDR_OWVAR 20
63230: PUSH
63231: LD_INT 0
63233: ST_TO_ADDR
// uc_nation := 0 ;
63234: LD_ADDR_OWVAR 21
63238: PUSH
63239: LD_INT 0
63241: ST_TO_ADDR
// hc_class := class_fish ;
63242: LD_ADDR_OWVAR 28
63246: PUSH
63247: LD_INT 20
63249: ST_TO_ADDR
// hc_gallery :=  ;
63250: LD_ADDR_OWVAR 33
63254: PUSH
63255: LD_STRING 
63257: ST_TO_ADDR
// end ;
63258: LD_VAR 0 1
63262: RET
// export function PrepareBird ( ) ; begin
63263: LD_INT 0
63265: PPUSH
// uc_side := 0 ;
63266: LD_ADDR_OWVAR 20
63270: PUSH
63271: LD_INT 0
63273: ST_TO_ADDR
// uc_nation := 0 ;
63274: LD_ADDR_OWVAR 21
63278: PUSH
63279: LD_INT 0
63281: ST_TO_ADDR
// hc_class := class_phororhacos ;
63282: LD_ADDR_OWVAR 28
63286: PUSH
63287: LD_INT 18
63289: ST_TO_ADDR
// hc_gallery :=  ;
63290: LD_ADDR_OWVAR 33
63294: PUSH
63295: LD_STRING 
63297: ST_TO_ADDR
// end ;
63298: LD_VAR 0 1
63302: RET
// export function PrepareHorse ( ) ; begin
63303: LD_INT 0
63305: PPUSH
// uc_side := 0 ;
63306: LD_ADDR_OWVAR 20
63310: PUSH
63311: LD_INT 0
63313: ST_TO_ADDR
// uc_nation := 0 ;
63314: LD_ADDR_OWVAR 21
63318: PUSH
63319: LD_INT 0
63321: ST_TO_ADDR
// hc_class := class_horse ;
63322: LD_ADDR_OWVAR 28
63326: PUSH
63327: LD_INT 21
63329: ST_TO_ADDR
// hc_gallery :=  ;
63330: LD_ADDR_OWVAR 33
63334: PUSH
63335: LD_STRING 
63337: ST_TO_ADDR
// end ;
63338: LD_VAR 0 1
63342: RET
// export function PrepareMastodont ( ) ; begin
63343: LD_INT 0
63345: PPUSH
// uc_side := 0 ;
63346: LD_ADDR_OWVAR 20
63350: PUSH
63351: LD_INT 0
63353: ST_TO_ADDR
// uc_nation := 0 ;
63354: LD_ADDR_OWVAR 21
63358: PUSH
63359: LD_INT 0
63361: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63362: LD_ADDR_OWVAR 37
63366: PUSH
63367: LD_INT 31
63369: ST_TO_ADDR
// vc_control := control_rider ;
63370: LD_ADDR_OWVAR 38
63374: PUSH
63375: LD_INT 4
63377: ST_TO_ADDR
// end ;
63378: LD_VAR 0 1
63382: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63383: LD_INT 0
63385: PPUSH
63386: PPUSH
63387: PPUSH
// uc_side = 0 ;
63388: LD_ADDR_OWVAR 20
63392: PUSH
63393: LD_INT 0
63395: ST_TO_ADDR
// uc_nation = 0 ;
63396: LD_ADDR_OWVAR 21
63400: PUSH
63401: LD_INT 0
63403: ST_TO_ADDR
// InitHc_All ( ) ;
63404: CALL_OW 584
// InitVc ;
63408: CALL_OW 20
// if mastodonts then
63412: LD_VAR 0 6
63416: IFFALSE 63483
// for i = 1 to mastodonts do
63418: LD_ADDR_VAR 0 11
63422: PUSH
63423: DOUBLE
63424: LD_INT 1
63426: DEC
63427: ST_TO_ADDR
63428: LD_VAR 0 6
63432: PUSH
63433: FOR_TO
63434: IFFALSE 63481
// begin vc_chassis := 31 ;
63436: LD_ADDR_OWVAR 37
63440: PUSH
63441: LD_INT 31
63443: ST_TO_ADDR
// vc_control := control_rider ;
63444: LD_ADDR_OWVAR 38
63448: PUSH
63449: LD_INT 4
63451: ST_TO_ADDR
// animal := CreateVehicle ;
63452: LD_ADDR_VAR 0 12
63456: PUSH
63457: CALL_OW 45
63461: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63462: LD_VAR 0 12
63466: PPUSH
63467: LD_VAR 0 8
63471: PPUSH
63472: LD_INT 0
63474: PPUSH
63475: CALL 65611 0 3
// end ;
63479: GO 63433
63481: POP
63482: POP
// if horses then
63483: LD_VAR 0 5
63487: IFFALSE 63554
// for i = 1 to horses do
63489: LD_ADDR_VAR 0 11
63493: PUSH
63494: DOUBLE
63495: LD_INT 1
63497: DEC
63498: ST_TO_ADDR
63499: LD_VAR 0 5
63503: PUSH
63504: FOR_TO
63505: IFFALSE 63552
// begin hc_class := 21 ;
63507: LD_ADDR_OWVAR 28
63511: PUSH
63512: LD_INT 21
63514: ST_TO_ADDR
// hc_gallery :=  ;
63515: LD_ADDR_OWVAR 33
63519: PUSH
63520: LD_STRING 
63522: ST_TO_ADDR
// animal := CreateHuman ;
63523: LD_ADDR_VAR 0 12
63527: PUSH
63528: CALL_OW 44
63532: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63533: LD_VAR 0 12
63537: PPUSH
63538: LD_VAR 0 8
63542: PPUSH
63543: LD_INT 0
63545: PPUSH
63546: CALL 65611 0 3
// end ;
63550: GO 63504
63552: POP
63553: POP
// if birds then
63554: LD_VAR 0 1
63558: IFFALSE 63625
// for i = 1 to birds do
63560: LD_ADDR_VAR 0 11
63564: PUSH
63565: DOUBLE
63566: LD_INT 1
63568: DEC
63569: ST_TO_ADDR
63570: LD_VAR 0 1
63574: PUSH
63575: FOR_TO
63576: IFFALSE 63623
// begin hc_class = 18 ;
63578: LD_ADDR_OWVAR 28
63582: PUSH
63583: LD_INT 18
63585: ST_TO_ADDR
// hc_gallery =  ;
63586: LD_ADDR_OWVAR 33
63590: PUSH
63591: LD_STRING 
63593: ST_TO_ADDR
// animal := CreateHuman ;
63594: LD_ADDR_VAR 0 12
63598: PUSH
63599: CALL_OW 44
63603: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63604: LD_VAR 0 12
63608: PPUSH
63609: LD_VAR 0 8
63613: PPUSH
63614: LD_INT 0
63616: PPUSH
63617: CALL 65611 0 3
// end ;
63621: GO 63575
63623: POP
63624: POP
// if tigers then
63625: LD_VAR 0 2
63629: IFFALSE 63713
// for i = 1 to tigers do
63631: LD_ADDR_VAR 0 11
63635: PUSH
63636: DOUBLE
63637: LD_INT 1
63639: DEC
63640: ST_TO_ADDR
63641: LD_VAR 0 2
63645: PUSH
63646: FOR_TO
63647: IFFALSE 63711
// begin hc_class = class_tiger ;
63649: LD_ADDR_OWVAR 28
63653: PUSH
63654: LD_INT 14
63656: ST_TO_ADDR
// hc_gallery =  ;
63657: LD_ADDR_OWVAR 33
63661: PUSH
63662: LD_STRING 
63664: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63665: LD_ADDR_OWVAR 35
63669: PUSH
63670: LD_INT 7
63672: NEG
63673: PPUSH
63674: LD_INT 7
63676: PPUSH
63677: CALL_OW 12
63681: ST_TO_ADDR
// animal := CreateHuman ;
63682: LD_ADDR_VAR 0 12
63686: PUSH
63687: CALL_OW 44
63691: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63692: LD_VAR 0 12
63696: PPUSH
63697: LD_VAR 0 8
63701: PPUSH
63702: LD_INT 0
63704: PPUSH
63705: CALL 65611 0 3
// end ;
63709: GO 63646
63711: POP
63712: POP
// if apemans then
63713: LD_VAR 0 3
63717: IFFALSE 63840
// for i = 1 to apemans do
63719: LD_ADDR_VAR 0 11
63723: PUSH
63724: DOUBLE
63725: LD_INT 1
63727: DEC
63728: ST_TO_ADDR
63729: LD_VAR 0 3
63733: PUSH
63734: FOR_TO
63735: IFFALSE 63838
// begin hc_class = class_apeman ;
63737: LD_ADDR_OWVAR 28
63741: PUSH
63742: LD_INT 12
63744: ST_TO_ADDR
// hc_gallery =  ;
63745: LD_ADDR_OWVAR 33
63749: PUSH
63750: LD_STRING 
63752: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63753: LD_ADDR_OWVAR 35
63757: PUSH
63758: LD_INT 2
63760: NEG
63761: PPUSH
63762: LD_INT 2
63764: PPUSH
63765: CALL_OW 12
63769: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63770: LD_ADDR_OWVAR 31
63774: PUSH
63775: LD_INT 1
63777: PPUSH
63778: LD_INT 3
63780: PPUSH
63781: CALL_OW 12
63785: PUSH
63786: LD_INT 1
63788: PPUSH
63789: LD_INT 3
63791: PPUSH
63792: CALL_OW 12
63796: PUSH
63797: LD_INT 0
63799: PUSH
63800: LD_INT 0
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: ST_TO_ADDR
// animal := CreateHuman ;
63809: LD_ADDR_VAR 0 12
63813: PUSH
63814: CALL_OW 44
63818: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63819: LD_VAR 0 12
63823: PPUSH
63824: LD_VAR 0 8
63828: PPUSH
63829: LD_INT 0
63831: PPUSH
63832: CALL 65611 0 3
// end ;
63836: GO 63734
63838: POP
63839: POP
// if enchidnas then
63840: LD_VAR 0 4
63844: IFFALSE 63911
// for i = 1 to enchidnas do
63846: LD_ADDR_VAR 0 11
63850: PUSH
63851: DOUBLE
63852: LD_INT 1
63854: DEC
63855: ST_TO_ADDR
63856: LD_VAR 0 4
63860: PUSH
63861: FOR_TO
63862: IFFALSE 63909
// begin hc_class = 13 ;
63864: LD_ADDR_OWVAR 28
63868: PUSH
63869: LD_INT 13
63871: ST_TO_ADDR
// hc_gallery =  ;
63872: LD_ADDR_OWVAR 33
63876: PUSH
63877: LD_STRING 
63879: ST_TO_ADDR
// animal := CreateHuman ;
63880: LD_ADDR_VAR 0 12
63884: PUSH
63885: CALL_OW 44
63889: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63890: LD_VAR 0 12
63894: PPUSH
63895: LD_VAR 0 8
63899: PPUSH
63900: LD_INT 0
63902: PPUSH
63903: CALL 65611 0 3
// end ;
63907: GO 63861
63909: POP
63910: POP
// if fishes then
63911: LD_VAR 0 7
63915: IFFALSE 63982
// for i = 1 to fishes do
63917: LD_ADDR_VAR 0 11
63921: PUSH
63922: DOUBLE
63923: LD_INT 1
63925: DEC
63926: ST_TO_ADDR
63927: LD_VAR 0 7
63931: PUSH
63932: FOR_TO
63933: IFFALSE 63980
// begin hc_class = 20 ;
63935: LD_ADDR_OWVAR 28
63939: PUSH
63940: LD_INT 20
63942: ST_TO_ADDR
// hc_gallery =  ;
63943: LD_ADDR_OWVAR 33
63947: PUSH
63948: LD_STRING 
63950: ST_TO_ADDR
// animal := CreateHuman ;
63951: LD_ADDR_VAR 0 12
63955: PUSH
63956: CALL_OW 44
63960: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63961: LD_VAR 0 12
63965: PPUSH
63966: LD_VAR 0 9
63970: PPUSH
63971: LD_INT 0
63973: PPUSH
63974: CALL 65611 0 3
// end ;
63978: GO 63932
63980: POP
63981: POP
// end ;
63982: LD_VAR 0 10
63986: RET
// export function WantHeal ( sci , unit ) ; begin
63987: LD_INT 0
63989: PPUSH
// if GetTaskList ( sci ) > 0 then
63990: LD_VAR 0 1
63994: PPUSH
63995: CALL_OW 437
63999: PUSH
64000: LD_INT 0
64002: GREATER
64003: IFFALSE 64073
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64005: LD_VAR 0 1
64009: PPUSH
64010: CALL_OW 437
64014: PUSH
64015: LD_INT 1
64017: ARRAY
64018: PUSH
64019: LD_INT 1
64021: ARRAY
64022: PUSH
64023: LD_STRING l
64025: EQUAL
64026: PUSH
64027: LD_VAR 0 1
64031: PPUSH
64032: CALL_OW 437
64036: PUSH
64037: LD_INT 1
64039: ARRAY
64040: PUSH
64041: LD_INT 4
64043: ARRAY
64044: PUSH
64045: LD_VAR 0 2
64049: EQUAL
64050: AND
64051: IFFALSE 64063
// result := true else
64053: LD_ADDR_VAR 0 3
64057: PUSH
64058: LD_INT 1
64060: ST_TO_ADDR
64061: GO 64071
// result := false ;
64063: LD_ADDR_VAR 0 3
64067: PUSH
64068: LD_INT 0
64070: ST_TO_ADDR
// end else
64071: GO 64081
// result := false ;
64073: LD_ADDR_VAR 0 3
64077: PUSH
64078: LD_INT 0
64080: ST_TO_ADDR
// end ;
64081: LD_VAR 0 3
64085: RET
// export function HealTarget ( sci ) ; begin
64086: LD_INT 0
64088: PPUSH
// if not sci then
64089: LD_VAR 0 1
64093: NOT
64094: IFFALSE 64098
// exit ;
64096: GO 64163
// result := 0 ;
64098: LD_ADDR_VAR 0 2
64102: PUSH
64103: LD_INT 0
64105: ST_TO_ADDR
// if GetTaskList ( sci ) then
64106: LD_VAR 0 1
64110: PPUSH
64111: CALL_OW 437
64115: IFFALSE 64163
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64117: LD_VAR 0 1
64121: PPUSH
64122: CALL_OW 437
64126: PUSH
64127: LD_INT 1
64129: ARRAY
64130: PUSH
64131: LD_INT 1
64133: ARRAY
64134: PUSH
64135: LD_STRING l
64137: EQUAL
64138: IFFALSE 64163
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64140: LD_ADDR_VAR 0 2
64144: PUSH
64145: LD_VAR 0 1
64149: PPUSH
64150: CALL_OW 437
64154: PUSH
64155: LD_INT 1
64157: ARRAY
64158: PUSH
64159: LD_INT 4
64161: ARRAY
64162: ST_TO_ADDR
// end ;
64163: LD_VAR 0 2
64167: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64168: LD_INT 0
64170: PPUSH
64171: PPUSH
64172: PPUSH
64173: PPUSH
// if not base_units then
64174: LD_VAR 0 1
64178: NOT
64179: IFFALSE 64183
// exit ;
64181: GO 64270
// result := false ;
64183: LD_ADDR_VAR 0 2
64187: PUSH
64188: LD_INT 0
64190: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64191: LD_ADDR_VAR 0 5
64195: PUSH
64196: LD_VAR 0 1
64200: PPUSH
64201: LD_INT 21
64203: PUSH
64204: LD_INT 3
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PPUSH
64211: CALL_OW 72
64215: ST_TO_ADDR
// if not tmp then
64216: LD_VAR 0 5
64220: NOT
64221: IFFALSE 64225
// exit ;
64223: GO 64270
// for i in tmp do
64225: LD_ADDR_VAR 0 3
64229: PUSH
64230: LD_VAR 0 5
64234: PUSH
64235: FOR_IN
64236: IFFALSE 64268
// begin result := EnemyInRange ( i , 22 ) ;
64238: LD_ADDR_VAR 0 2
64242: PUSH
64243: LD_VAR 0 3
64247: PPUSH
64248: LD_INT 22
64250: PPUSH
64251: CALL 61857 0 2
64255: ST_TO_ADDR
// if result then
64256: LD_VAR 0 2
64260: IFFALSE 64266
// exit ;
64262: POP
64263: POP
64264: GO 64270
// end ;
64266: GO 64235
64268: POP
64269: POP
// end ;
64270: LD_VAR 0 2
64274: RET
// export function FilterByTag ( units , tag ) ; begin
64275: LD_INT 0
64277: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64278: LD_ADDR_VAR 0 3
64282: PUSH
64283: LD_VAR 0 1
64287: PPUSH
64288: LD_INT 120
64290: PUSH
64291: LD_VAR 0 2
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PPUSH
64300: CALL_OW 72
64304: ST_TO_ADDR
// end ;
64305: LD_VAR 0 3
64309: RET
// export function IsDriver ( un ) ; begin
64310: LD_INT 0
64312: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64313: LD_ADDR_VAR 0 2
64317: PUSH
64318: LD_VAR 0 1
64322: PUSH
64323: LD_INT 55
64325: PUSH
64326: EMPTY
64327: LIST
64328: PPUSH
64329: CALL_OW 69
64333: IN
64334: ST_TO_ADDR
// end ;
64335: LD_VAR 0 2
64339: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64340: LD_INT 0
64342: PPUSH
64343: PPUSH
// list := [ ] ;
64344: LD_ADDR_VAR 0 5
64348: PUSH
64349: EMPTY
64350: ST_TO_ADDR
// case d of 0 :
64351: LD_VAR 0 3
64355: PUSH
64356: LD_INT 0
64358: DOUBLE
64359: EQUAL
64360: IFTRUE 64364
64362: GO 64497
64364: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64365: LD_ADDR_VAR 0 5
64369: PUSH
64370: LD_VAR 0 1
64374: PUSH
64375: LD_INT 4
64377: MINUS
64378: PUSH
64379: LD_VAR 0 2
64383: PUSH
64384: LD_INT 4
64386: MINUS
64387: PUSH
64388: LD_INT 2
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: LIST
64395: PUSH
64396: LD_VAR 0 1
64400: PUSH
64401: LD_INT 3
64403: MINUS
64404: PUSH
64405: LD_VAR 0 2
64409: PUSH
64410: LD_INT 1
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: LIST
64417: PUSH
64418: LD_VAR 0 1
64422: PUSH
64423: LD_INT 4
64425: PLUS
64426: PUSH
64427: LD_VAR 0 2
64431: PUSH
64432: LD_INT 4
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: LIST
64439: PUSH
64440: LD_VAR 0 1
64444: PUSH
64445: LD_INT 3
64447: PLUS
64448: PUSH
64449: LD_VAR 0 2
64453: PUSH
64454: LD_INT 3
64456: PLUS
64457: PUSH
64458: LD_INT 5
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: LIST
64465: PUSH
64466: LD_VAR 0 1
64470: PUSH
64471: LD_VAR 0 2
64475: PUSH
64476: LD_INT 4
64478: PLUS
64479: PUSH
64480: LD_INT 0
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: LIST
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: ST_TO_ADDR
// end ; 1 :
64495: GO 65195
64497: LD_INT 1
64499: DOUBLE
64500: EQUAL
64501: IFTRUE 64505
64503: GO 64638
64505: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64506: LD_ADDR_VAR 0 5
64510: PUSH
64511: LD_VAR 0 1
64515: PUSH
64516: LD_VAR 0 2
64520: PUSH
64521: LD_INT 4
64523: MINUS
64524: PUSH
64525: LD_INT 3
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: LIST
64532: PUSH
64533: LD_VAR 0 1
64537: PUSH
64538: LD_INT 3
64540: MINUS
64541: PUSH
64542: LD_VAR 0 2
64546: PUSH
64547: LD_INT 3
64549: MINUS
64550: PUSH
64551: LD_INT 2
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: LIST
64558: PUSH
64559: LD_VAR 0 1
64563: PUSH
64564: LD_INT 4
64566: MINUS
64567: PUSH
64568: LD_VAR 0 2
64572: PUSH
64573: LD_INT 1
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: LIST
64580: PUSH
64581: LD_VAR 0 1
64585: PUSH
64586: LD_VAR 0 2
64590: PUSH
64591: LD_INT 3
64593: PLUS
64594: PUSH
64595: LD_INT 0
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: LIST
64602: PUSH
64603: LD_VAR 0 1
64607: PUSH
64608: LD_INT 4
64610: PLUS
64611: PUSH
64612: LD_VAR 0 2
64616: PUSH
64617: LD_INT 4
64619: PLUS
64620: PUSH
64621: LD_INT 5
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: LIST
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: ST_TO_ADDR
// end ; 2 :
64636: GO 65195
64638: LD_INT 2
64640: DOUBLE
64641: EQUAL
64642: IFTRUE 64646
64644: GO 64775
64646: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64647: LD_ADDR_VAR 0 5
64651: PUSH
64652: LD_VAR 0 1
64656: PUSH
64657: LD_VAR 0 2
64661: PUSH
64662: LD_INT 3
64664: MINUS
64665: PUSH
64666: LD_INT 3
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: LIST
64673: PUSH
64674: LD_VAR 0 1
64678: PUSH
64679: LD_INT 4
64681: PLUS
64682: PUSH
64683: LD_VAR 0 2
64687: PUSH
64688: LD_INT 4
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: LIST
64695: PUSH
64696: LD_VAR 0 1
64700: PUSH
64701: LD_VAR 0 2
64705: PUSH
64706: LD_INT 4
64708: PLUS
64709: PUSH
64710: LD_INT 0
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: LIST
64717: PUSH
64718: LD_VAR 0 1
64722: PUSH
64723: LD_INT 3
64725: MINUS
64726: PUSH
64727: LD_VAR 0 2
64731: PUSH
64732: LD_INT 1
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: LIST
64739: PUSH
64740: LD_VAR 0 1
64744: PUSH
64745: LD_INT 4
64747: MINUS
64748: PUSH
64749: LD_VAR 0 2
64753: PUSH
64754: LD_INT 4
64756: MINUS
64757: PUSH
64758: LD_INT 2
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: LIST
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: ST_TO_ADDR
// end ; 3 :
64773: GO 65195
64775: LD_INT 3
64777: DOUBLE
64778: EQUAL
64779: IFTRUE 64783
64781: GO 64916
64783: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64784: LD_ADDR_VAR 0 5
64788: PUSH
64789: LD_VAR 0 1
64793: PUSH
64794: LD_INT 3
64796: PLUS
64797: PUSH
64798: LD_VAR 0 2
64802: PUSH
64803: LD_INT 4
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: LIST
64810: PUSH
64811: LD_VAR 0 1
64815: PUSH
64816: LD_INT 4
64818: PLUS
64819: PUSH
64820: LD_VAR 0 2
64824: PUSH
64825: LD_INT 4
64827: PLUS
64828: PUSH
64829: LD_INT 5
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: LIST
64836: PUSH
64837: LD_VAR 0 1
64841: PUSH
64842: LD_INT 4
64844: MINUS
64845: PUSH
64846: LD_VAR 0 2
64850: PUSH
64851: LD_INT 1
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: LIST
64858: PUSH
64859: LD_VAR 0 1
64863: PUSH
64864: LD_VAR 0 2
64868: PUSH
64869: LD_INT 4
64871: MINUS
64872: PUSH
64873: LD_INT 3
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: LIST
64880: PUSH
64881: LD_VAR 0 1
64885: PUSH
64886: LD_INT 3
64888: MINUS
64889: PUSH
64890: LD_VAR 0 2
64894: PUSH
64895: LD_INT 3
64897: MINUS
64898: PUSH
64899: LD_INT 2
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: LIST
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: ST_TO_ADDR
// end ; 4 :
64914: GO 65195
64916: LD_INT 4
64918: DOUBLE
64919: EQUAL
64920: IFTRUE 64924
64922: GO 65057
64924: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64925: LD_ADDR_VAR 0 5
64929: PUSH
64930: LD_VAR 0 1
64934: PUSH
64935: LD_VAR 0 2
64939: PUSH
64940: LD_INT 4
64942: PLUS
64943: PUSH
64944: LD_INT 0
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: LIST
64951: PUSH
64952: LD_VAR 0 1
64956: PUSH
64957: LD_INT 3
64959: PLUS
64960: PUSH
64961: LD_VAR 0 2
64965: PUSH
64966: LD_INT 3
64968: PLUS
64969: PUSH
64970: LD_INT 5
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: LIST
64977: PUSH
64978: LD_VAR 0 1
64982: PUSH
64983: LD_INT 4
64985: PLUS
64986: PUSH
64987: LD_VAR 0 2
64991: PUSH
64992: LD_INT 4
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: LIST
64999: PUSH
65000: LD_VAR 0 1
65004: PUSH
65005: LD_VAR 0 2
65009: PUSH
65010: LD_INT 3
65012: MINUS
65013: PUSH
65014: LD_INT 3
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: LIST
65021: PUSH
65022: LD_VAR 0 1
65026: PUSH
65027: LD_INT 4
65029: MINUS
65030: PUSH
65031: LD_VAR 0 2
65035: PUSH
65036: LD_INT 4
65038: MINUS
65039: PUSH
65040: LD_INT 2
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: LIST
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: ST_TO_ADDR
// end ; 5 :
65055: GO 65195
65057: LD_INT 5
65059: DOUBLE
65060: EQUAL
65061: IFTRUE 65065
65063: GO 65194
65065: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65066: LD_ADDR_VAR 0 5
65070: PUSH
65071: LD_VAR 0 1
65075: PUSH
65076: LD_INT 4
65078: MINUS
65079: PUSH
65080: LD_VAR 0 2
65084: PUSH
65085: LD_INT 1
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: LIST
65092: PUSH
65093: LD_VAR 0 1
65097: PUSH
65098: LD_VAR 0 2
65102: PUSH
65103: LD_INT 4
65105: MINUS
65106: PUSH
65107: LD_INT 3
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: LIST
65114: PUSH
65115: LD_VAR 0 1
65119: PUSH
65120: LD_INT 4
65122: PLUS
65123: PUSH
65124: LD_VAR 0 2
65128: PUSH
65129: LD_INT 4
65131: PLUS
65132: PUSH
65133: LD_INT 5
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: LIST
65140: PUSH
65141: LD_VAR 0 1
65145: PUSH
65146: LD_INT 3
65148: PLUS
65149: PUSH
65150: LD_VAR 0 2
65154: PUSH
65155: LD_INT 4
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: LIST
65162: PUSH
65163: LD_VAR 0 1
65167: PUSH
65168: LD_VAR 0 2
65172: PUSH
65173: LD_INT 3
65175: PLUS
65176: PUSH
65177: LD_INT 0
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: LIST
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: ST_TO_ADDR
// end ; end ;
65192: GO 65195
65194: POP
// result := list ;
65195: LD_ADDR_VAR 0 4
65199: PUSH
65200: LD_VAR 0 5
65204: ST_TO_ADDR
// end ;
65205: LD_VAR 0 4
65209: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65210: LD_INT 0
65212: PPUSH
65213: PPUSH
65214: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65215: LD_VAR 0 1
65219: NOT
65220: PUSH
65221: LD_VAR 0 2
65225: PUSH
65226: LD_INT 1
65228: PUSH
65229: LD_INT 2
65231: PUSH
65232: LD_INT 3
65234: PUSH
65235: LD_INT 4
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: IN
65244: NOT
65245: OR
65246: IFFALSE 65250
// exit ;
65248: GO 65333
// tmp := [ ] ;
65250: LD_ADDR_VAR 0 5
65254: PUSH
65255: EMPTY
65256: ST_TO_ADDR
// for i in units do
65257: LD_ADDR_VAR 0 4
65261: PUSH
65262: LD_VAR 0 1
65266: PUSH
65267: FOR_IN
65268: IFFALSE 65302
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65270: LD_ADDR_VAR 0 5
65274: PUSH
65275: LD_VAR 0 5
65279: PPUSH
65280: LD_VAR 0 4
65284: PPUSH
65285: LD_VAR 0 2
65289: PPUSH
65290: CALL_OW 259
65294: PPUSH
65295: CALL 66694 0 2
65299: ST_TO_ADDR
65300: GO 65267
65302: POP
65303: POP
// if not tmp then
65304: LD_VAR 0 5
65308: NOT
65309: IFFALSE 65313
// exit ;
65311: GO 65333
// result := SortListByListDesc ( units , tmp ) ;
65313: LD_ADDR_VAR 0 3
65317: PUSH
65318: LD_VAR 0 1
65322: PPUSH
65323: LD_VAR 0 5
65327: PPUSH
65328: CALL_OW 77
65332: ST_TO_ADDR
// end ;
65333: LD_VAR 0 3
65337: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65338: LD_INT 0
65340: PPUSH
65341: PPUSH
65342: PPUSH
// result := false ;
65343: LD_ADDR_VAR 0 3
65347: PUSH
65348: LD_INT 0
65350: ST_TO_ADDR
// if not building then
65351: LD_VAR 0 2
65355: NOT
65356: IFFALSE 65360
// exit ;
65358: GO 65498
// x := GetX ( building ) ;
65360: LD_ADDR_VAR 0 4
65364: PUSH
65365: LD_VAR 0 2
65369: PPUSH
65370: CALL_OW 250
65374: ST_TO_ADDR
// y := GetY ( building ) ;
65375: LD_ADDR_VAR 0 5
65379: PUSH
65380: LD_VAR 0 2
65384: PPUSH
65385: CALL_OW 251
65389: ST_TO_ADDR
// if not x or not y then
65390: LD_VAR 0 4
65394: NOT
65395: PUSH
65396: LD_VAR 0 5
65400: NOT
65401: OR
65402: IFFALSE 65406
// exit ;
65404: GO 65498
// if GetTaskList ( unit ) then
65406: LD_VAR 0 1
65410: PPUSH
65411: CALL_OW 437
65415: IFFALSE 65498
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65417: LD_STRING e
65419: PUSH
65420: LD_VAR 0 1
65424: PPUSH
65425: CALL_OW 437
65429: PUSH
65430: LD_INT 1
65432: ARRAY
65433: PUSH
65434: LD_INT 1
65436: ARRAY
65437: EQUAL
65438: PUSH
65439: LD_VAR 0 4
65443: PUSH
65444: LD_VAR 0 1
65448: PPUSH
65449: CALL_OW 437
65453: PUSH
65454: LD_INT 1
65456: ARRAY
65457: PUSH
65458: LD_INT 2
65460: ARRAY
65461: EQUAL
65462: AND
65463: PUSH
65464: LD_VAR 0 5
65468: PUSH
65469: LD_VAR 0 1
65473: PPUSH
65474: CALL_OW 437
65478: PUSH
65479: LD_INT 1
65481: ARRAY
65482: PUSH
65483: LD_INT 3
65485: ARRAY
65486: EQUAL
65487: AND
65488: IFFALSE 65498
// result := true end ;
65490: LD_ADDR_VAR 0 3
65494: PUSH
65495: LD_INT 1
65497: ST_TO_ADDR
// end ;
65498: LD_VAR 0 3
65502: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65503: LD_INT 0
65505: PPUSH
// result := false ;
65506: LD_ADDR_VAR 0 4
65510: PUSH
65511: LD_INT 0
65513: ST_TO_ADDR
// if GetTaskList ( unit ) then
65514: LD_VAR 0 1
65518: PPUSH
65519: CALL_OW 437
65523: IFFALSE 65606
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65525: LD_STRING M
65527: PUSH
65528: LD_VAR 0 1
65532: PPUSH
65533: CALL_OW 437
65537: PUSH
65538: LD_INT 1
65540: ARRAY
65541: PUSH
65542: LD_INT 1
65544: ARRAY
65545: EQUAL
65546: PUSH
65547: LD_VAR 0 2
65551: PUSH
65552: LD_VAR 0 1
65556: PPUSH
65557: CALL_OW 437
65561: PUSH
65562: LD_INT 1
65564: ARRAY
65565: PUSH
65566: LD_INT 2
65568: ARRAY
65569: EQUAL
65570: AND
65571: PUSH
65572: LD_VAR 0 3
65576: PUSH
65577: LD_VAR 0 1
65581: PPUSH
65582: CALL_OW 437
65586: PUSH
65587: LD_INT 1
65589: ARRAY
65590: PUSH
65591: LD_INT 3
65593: ARRAY
65594: EQUAL
65595: AND
65596: IFFALSE 65606
// result := true ;
65598: LD_ADDR_VAR 0 4
65602: PUSH
65603: LD_INT 1
65605: ST_TO_ADDR
// end ; end ;
65606: LD_VAR 0 4
65610: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65611: LD_INT 0
65613: PPUSH
65614: PPUSH
65615: PPUSH
65616: PPUSH
// if not unit or not area then
65617: LD_VAR 0 1
65621: NOT
65622: PUSH
65623: LD_VAR 0 2
65627: NOT
65628: OR
65629: IFFALSE 65633
// exit ;
65631: GO 65797
// tmp := AreaToList ( area , i ) ;
65633: LD_ADDR_VAR 0 6
65637: PUSH
65638: LD_VAR 0 2
65642: PPUSH
65643: LD_VAR 0 5
65647: PPUSH
65648: CALL_OW 517
65652: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65653: LD_ADDR_VAR 0 5
65657: PUSH
65658: DOUBLE
65659: LD_INT 1
65661: DEC
65662: ST_TO_ADDR
65663: LD_VAR 0 6
65667: PUSH
65668: LD_INT 1
65670: ARRAY
65671: PUSH
65672: FOR_TO
65673: IFFALSE 65795
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65675: LD_ADDR_VAR 0 7
65679: PUSH
65680: LD_VAR 0 6
65684: PUSH
65685: LD_INT 1
65687: ARRAY
65688: PUSH
65689: LD_VAR 0 5
65693: ARRAY
65694: PUSH
65695: LD_VAR 0 6
65699: PUSH
65700: LD_INT 2
65702: ARRAY
65703: PUSH
65704: LD_VAR 0 5
65708: ARRAY
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65714: LD_VAR 0 7
65718: PUSH
65719: LD_INT 1
65721: ARRAY
65722: PPUSH
65723: LD_VAR 0 7
65727: PUSH
65728: LD_INT 2
65730: ARRAY
65731: PPUSH
65732: CALL_OW 428
65736: PUSH
65737: LD_INT 0
65739: EQUAL
65740: IFFALSE 65793
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65742: LD_VAR 0 1
65746: PPUSH
65747: LD_VAR 0 7
65751: PUSH
65752: LD_INT 1
65754: ARRAY
65755: PPUSH
65756: LD_VAR 0 7
65760: PUSH
65761: LD_INT 2
65763: ARRAY
65764: PPUSH
65765: LD_VAR 0 3
65769: PPUSH
65770: CALL_OW 48
// result := IsPlaced ( unit ) ;
65774: LD_ADDR_VAR 0 4
65778: PUSH
65779: LD_VAR 0 1
65783: PPUSH
65784: CALL_OW 305
65788: ST_TO_ADDR
// exit ;
65789: POP
65790: POP
65791: GO 65797
// end ; end ;
65793: GO 65672
65795: POP
65796: POP
// end ;
65797: LD_VAR 0 4
65801: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65802: LD_INT 0
65804: PPUSH
65805: PPUSH
65806: PPUSH
// if not side or side > 8 then
65807: LD_VAR 0 1
65811: NOT
65812: PUSH
65813: LD_VAR 0 1
65817: PUSH
65818: LD_INT 8
65820: GREATER
65821: OR
65822: IFFALSE 65826
// exit ;
65824: GO 66013
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65826: LD_ADDR_VAR 0 4
65830: PUSH
65831: LD_INT 22
65833: PUSH
65834: LD_VAR 0 1
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 21
65845: PUSH
65846: LD_INT 3
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PPUSH
65857: CALL_OW 69
65861: ST_TO_ADDR
// if not tmp then
65862: LD_VAR 0 4
65866: NOT
65867: IFFALSE 65871
// exit ;
65869: GO 66013
// enable_addtolog := true ;
65871: LD_ADDR_OWVAR 81
65875: PUSH
65876: LD_INT 1
65878: ST_TO_ADDR
// AddToLog ( [ ) ;
65879: LD_STRING [
65881: PPUSH
65882: CALL_OW 561
// for i in tmp do
65886: LD_ADDR_VAR 0 3
65890: PUSH
65891: LD_VAR 0 4
65895: PUSH
65896: FOR_IN
65897: IFFALSE 66004
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65899: LD_STRING [
65901: PUSH
65902: LD_VAR 0 3
65906: PPUSH
65907: CALL_OW 266
65911: STR
65912: PUSH
65913: LD_STRING , 
65915: STR
65916: PUSH
65917: LD_VAR 0 3
65921: PPUSH
65922: CALL_OW 250
65926: STR
65927: PUSH
65928: LD_STRING , 
65930: STR
65931: PUSH
65932: LD_VAR 0 3
65936: PPUSH
65937: CALL_OW 251
65941: STR
65942: PUSH
65943: LD_STRING , 
65945: STR
65946: PUSH
65947: LD_VAR 0 3
65951: PPUSH
65952: CALL_OW 254
65956: STR
65957: PUSH
65958: LD_STRING , 
65960: STR
65961: PUSH
65962: LD_VAR 0 3
65966: PPUSH
65967: LD_INT 1
65969: PPUSH
65970: CALL_OW 268
65974: STR
65975: PUSH
65976: LD_STRING , 
65978: STR
65979: PUSH
65980: LD_VAR 0 3
65984: PPUSH
65985: LD_INT 2
65987: PPUSH
65988: CALL_OW 268
65992: STR
65993: PUSH
65994: LD_STRING ],
65996: STR
65997: PPUSH
65998: CALL_OW 561
// end ;
66002: GO 65896
66004: POP
66005: POP
// AddToLog ( ]; ) ;
66006: LD_STRING ];
66008: PPUSH
66009: CALL_OW 561
// end ;
66013: LD_VAR 0 2
66017: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66018: LD_INT 0
66020: PPUSH
66021: PPUSH
66022: PPUSH
66023: PPUSH
66024: PPUSH
// if not area or not rate or not max then
66025: LD_VAR 0 1
66029: NOT
66030: PUSH
66031: LD_VAR 0 2
66035: NOT
66036: OR
66037: PUSH
66038: LD_VAR 0 4
66042: NOT
66043: OR
66044: IFFALSE 66048
// exit ;
66046: GO 66237
// while 1 do
66048: LD_INT 1
66050: IFFALSE 66237
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66052: LD_ADDR_VAR 0 9
66056: PUSH
66057: LD_VAR 0 1
66061: PPUSH
66062: LD_INT 1
66064: PPUSH
66065: CALL_OW 287
66069: PUSH
66070: LD_INT 10
66072: MUL
66073: ST_TO_ADDR
// r := rate / 10 ;
66074: LD_ADDR_VAR 0 7
66078: PUSH
66079: LD_VAR 0 2
66083: PUSH
66084: LD_INT 10
66086: DIVREAL
66087: ST_TO_ADDR
// time := 1 1$00 ;
66088: LD_ADDR_VAR 0 8
66092: PUSH
66093: LD_INT 2100
66095: ST_TO_ADDR
// if amount < min then
66096: LD_VAR 0 9
66100: PUSH
66101: LD_VAR 0 3
66105: LESS
66106: IFFALSE 66124
// r := r * 2 else
66108: LD_ADDR_VAR 0 7
66112: PUSH
66113: LD_VAR 0 7
66117: PUSH
66118: LD_INT 2
66120: MUL
66121: ST_TO_ADDR
66122: GO 66150
// if amount > max then
66124: LD_VAR 0 9
66128: PUSH
66129: LD_VAR 0 4
66133: GREATER
66134: IFFALSE 66150
// r := r / 2 ;
66136: LD_ADDR_VAR 0 7
66140: PUSH
66141: LD_VAR 0 7
66145: PUSH
66146: LD_INT 2
66148: DIVREAL
66149: ST_TO_ADDR
// time := time / r ;
66150: LD_ADDR_VAR 0 8
66154: PUSH
66155: LD_VAR 0 8
66159: PUSH
66160: LD_VAR 0 7
66164: DIVREAL
66165: ST_TO_ADDR
// if time < 0 then
66166: LD_VAR 0 8
66170: PUSH
66171: LD_INT 0
66173: LESS
66174: IFFALSE 66191
// time := time * - 1 ;
66176: LD_ADDR_VAR 0 8
66180: PUSH
66181: LD_VAR 0 8
66185: PUSH
66186: LD_INT 1
66188: NEG
66189: MUL
66190: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66191: LD_VAR 0 8
66195: PUSH
66196: LD_INT 35
66198: PPUSH
66199: LD_INT 875
66201: PPUSH
66202: CALL_OW 12
66206: PLUS
66207: PPUSH
66208: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66212: LD_INT 1
66214: PPUSH
66215: LD_INT 5
66217: PPUSH
66218: CALL_OW 12
66222: PPUSH
66223: LD_VAR 0 1
66227: PPUSH
66228: LD_INT 1
66230: PPUSH
66231: CALL_OW 55
// end ;
66235: GO 66048
// end ;
66237: LD_VAR 0 5
66241: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66242: LD_INT 0
66244: PPUSH
66245: PPUSH
66246: PPUSH
66247: PPUSH
66248: PPUSH
66249: PPUSH
66250: PPUSH
66251: PPUSH
// if not turrets or not factories then
66252: LD_VAR 0 1
66256: NOT
66257: PUSH
66258: LD_VAR 0 2
66262: NOT
66263: OR
66264: IFFALSE 66268
// exit ;
66266: GO 66575
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66268: LD_ADDR_VAR 0 10
66272: PUSH
66273: LD_INT 5
66275: PUSH
66276: LD_INT 6
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: LD_INT 2
66285: PUSH
66286: LD_INT 4
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 3
66295: PUSH
66296: LD_INT 5
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 24
66310: PUSH
66311: LD_INT 25
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: LD_INT 23
66320: PUSH
66321: LD_INT 27
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 42
66334: PUSH
66335: LD_INT 43
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 44
66344: PUSH
66345: LD_INT 46
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 45
66354: PUSH
66355: LD_INT 47
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: LIST
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: LIST
66371: ST_TO_ADDR
// result := [ ] ;
66372: LD_ADDR_VAR 0 3
66376: PUSH
66377: EMPTY
66378: ST_TO_ADDR
// for i in turrets do
66379: LD_ADDR_VAR 0 4
66383: PUSH
66384: LD_VAR 0 1
66388: PUSH
66389: FOR_IN
66390: IFFALSE 66573
// begin nat := GetNation ( i ) ;
66392: LD_ADDR_VAR 0 7
66396: PUSH
66397: LD_VAR 0 4
66401: PPUSH
66402: CALL_OW 248
66406: ST_TO_ADDR
// weapon := 0 ;
66407: LD_ADDR_VAR 0 8
66411: PUSH
66412: LD_INT 0
66414: ST_TO_ADDR
// if not nat then
66415: LD_VAR 0 7
66419: NOT
66420: IFFALSE 66424
// continue ;
66422: GO 66389
// for j in list [ nat ] do
66424: LD_ADDR_VAR 0 5
66428: PUSH
66429: LD_VAR 0 10
66433: PUSH
66434: LD_VAR 0 7
66438: ARRAY
66439: PUSH
66440: FOR_IN
66441: IFFALSE 66482
// if GetBWeapon ( i ) = j [ 1 ] then
66443: LD_VAR 0 4
66447: PPUSH
66448: CALL_OW 269
66452: PUSH
66453: LD_VAR 0 5
66457: PUSH
66458: LD_INT 1
66460: ARRAY
66461: EQUAL
66462: IFFALSE 66480
// begin weapon := j [ 2 ] ;
66464: LD_ADDR_VAR 0 8
66468: PUSH
66469: LD_VAR 0 5
66473: PUSH
66474: LD_INT 2
66476: ARRAY
66477: ST_TO_ADDR
// break ;
66478: GO 66482
// end ;
66480: GO 66440
66482: POP
66483: POP
// if not weapon then
66484: LD_VAR 0 8
66488: NOT
66489: IFFALSE 66493
// continue ;
66491: GO 66389
// for k in factories do
66493: LD_ADDR_VAR 0 6
66497: PUSH
66498: LD_VAR 0 2
66502: PUSH
66503: FOR_IN
66504: IFFALSE 66569
// begin weapons := AvailableWeaponList ( k ) ;
66506: LD_ADDR_VAR 0 9
66510: PUSH
66511: LD_VAR 0 6
66515: PPUSH
66516: CALL_OW 478
66520: ST_TO_ADDR
// if not weapons then
66521: LD_VAR 0 9
66525: NOT
66526: IFFALSE 66530
// continue ;
66528: GO 66503
// if weapon in weapons then
66530: LD_VAR 0 8
66534: PUSH
66535: LD_VAR 0 9
66539: IN
66540: IFFALSE 66567
// begin result := [ i , weapon ] ;
66542: LD_ADDR_VAR 0 3
66546: PUSH
66547: LD_VAR 0 4
66551: PUSH
66552: LD_VAR 0 8
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: ST_TO_ADDR
// exit ;
66561: POP
66562: POP
66563: POP
66564: POP
66565: GO 66575
// end ; end ;
66567: GO 66503
66569: POP
66570: POP
// end ;
66571: GO 66389
66573: POP
66574: POP
// end ;
66575: LD_VAR 0 3
66579: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66580: LD_INT 0
66582: PPUSH
// if not side or side > 8 then
66583: LD_VAR 0 3
66587: NOT
66588: PUSH
66589: LD_VAR 0 3
66593: PUSH
66594: LD_INT 8
66596: GREATER
66597: OR
66598: IFFALSE 66602
// exit ;
66600: GO 66661
// if not range then
66602: LD_VAR 0 4
66606: NOT
66607: IFFALSE 66618
// range := - 12 ;
66609: LD_ADDR_VAR 0 4
66613: PUSH
66614: LD_INT 12
66616: NEG
66617: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66618: LD_VAR 0 1
66622: PPUSH
66623: LD_VAR 0 2
66627: PPUSH
66628: LD_VAR 0 3
66632: PPUSH
66633: LD_VAR 0 4
66637: PPUSH
66638: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66642: LD_VAR 0 1
66646: PPUSH
66647: LD_VAR 0 2
66651: PPUSH
66652: LD_VAR 0 3
66656: PPUSH
66657: CALL_OW 331
// end ;
66661: LD_VAR 0 5
66665: RET
// export function Video ( mode ) ; begin
66666: LD_INT 0
66668: PPUSH
// ingame_video = mode ;
66669: LD_ADDR_OWVAR 52
66673: PUSH
66674: LD_VAR 0 1
66678: ST_TO_ADDR
// interface_hidden = mode ;
66679: LD_ADDR_OWVAR 54
66683: PUSH
66684: LD_VAR 0 1
66688: ST_TO_ADDR
// end ;
66689: LD_VAR 0 2
66693: RET
// export function Join ( array , element ) ; begin
66694: LD_INT 0
66696: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66697: LD_ADDR_VAR 0 3
66701: PUSH
66702: LD_VAR 0 1
66706: PPUSH
66707: LD_VAR 0 1
66711: PUSH
66712: LD_INT 1
66714: PLUS
66715: PPUSH
66716: LD_VAR 0 2
66720: PPUSH
66721: CALL_OW 1
66725: ST_TO_ADDR
// end ;
66726: LD_VAR 0 3
66730: RET
// export function JoinUnion ( array , element ) ; begin
66731: LD_INT 0
66733: PPUSH
// result := array union element ;
66734: LD_ADDR_VAR 0 3
66738: PUSH
66739: LD_VAR 0 1
66743: PUSH
66744: LD_VAR 0 2
66748: UNION
66749: ST_TO_ADDR
// end ;
66750: LD_VAR 0 3
66754: RET
// export function GetBehemoths ( side ) ; begin
66755: LD_INT 0
66757: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66758: LD_ADDR_VAR 0 2
66762: PUSH
66763: LD_INT 22
66765: PUSH
66766: LD_VAR 0 1
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 31
66777: PUSH
66778: LD_INT 25
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PPUSH
66789: CALL_OW 69
66793: ST_TO_ADDR
// end ;
66794: LD_VAR 0 2
66798: RET
// export function Shuffle ( array ) ; var i , index ; begin
66799: LD_INT 0
66801: PPUSH
66802: PPUSH
66803: PPUSH
// result := [ ] ;
66804: LD_ADDR_VAR 0 2
66808: PUSH
66809: EMPTY
66810: ST_TO_ADDR
// if not array then
66811: LD_VAR 0 1
66815: NOT
66816: IFFALSE 66820
// exit ;
66818: GO 66919
// Randomize ;
66820: CALL_OW 10
// for i = array downto 1 do
66824: LD_ADDR_VAR 0 3
66828: PUSH
66829: DOUBLE
66830: LD_VAR 0 1
66834: INC
66835: ST_TO_ADDR
66836: LD_INT 1
66838: PUSH
66839: FOR_DOWNTO
66840: IFFALSE 66917
// begin index := rand ( 1 , array ) ;
66842: LD_ADDR_VAR 0 4
66846: PUSH
66847: LD_INT 1
66849: PPUSH
66850: LD_VAR 0 1
66854: PPUSH
66855: CALL_OW 12
66859: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66860: LD_ADDR_VAR 0 2
66864: PUSH
66865: LD_VAR 0 2
66869: PPUSH
66870: LD_VAR 0 2
66874: PUSH
66875: LD_INT 1
66877: PLUS
66878: PPUSH
66879: LD_VAR 0 1
66883: PUSH
66884: LD_VAR 0 4
66888: ARRAY
66889: PPUSH
66890: CALL_OW 2
66894: ST_TO_ADDR
// array := Delete ( array , index ) ;
66895: LD_ADDR_VAR 0 1
66899: PUSH
66900: LD_VAR 0 1
66904: PPUSH
66905: LD_VAR 0 4
66909: PPUSH
66910: CALL_OW 3
66914: ST_TO_ADDR
// end ;
66915: GO 66839
66917: POP
66918: POP
// end ;
66919: LD_VAR 0 2
66923: RET
// export function GetBaseMaterials ( base ) ; begin
66924: LD_INT 0
66926: PPUSH
// result := [ 0 , 0 , 0 ] ;
66927: LD_ADDR_VAR 0 2
66931: PUSH
66932: LD_INT 0
66934: PUSH
66935: LD_INT 0
66937: PUSH
66938: LD_INT 0
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: LIST
66945: ST_TO_ADDR
// if not base then
66946: LD_VAR 0 1
66950: NOT
66951: IFFALSE 66955
// exit ;
66953: GO 67004
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66955: LD_ADDR_VAR 0 2
66959: PUSH
66960: LD_VAR 0 1
66964: PPUSH
66965: LD_INT 1
66967: PPUSH
66968: CALL_OW 275
66972: PUSH
66973: LD_VAR 0 1
66977: PPUSH
66978: LD_INT 2
66980: PPUSH
66981: CALL_OW 275
66985: PUSH
66986: LD_VAR 0 1
66990: PPUSH
66991: LD_INT 3
66993: PPUSH
66994: CALL_OW 275
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: LIST
67003: ST_TO_ADDR
// end ;
67004: LD_VAR 0 2
67008: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67009: LD_INT 0
67011: PPUSH
67012: PPUSH
// result := array ;
67013: LD_ADDR_VAR 0 3
67017: PUSH
67018: LD_VAR 0 1
67022: ST_TO_ADDR
// if size >= result then
67023: LD_VAR 0 2
67027: PUSH
67028: LD_VAR 0 3
67032: GREATEREQUAL
67033: IFFALSE 67037
// exit ;
67035: GO 67087
// if size then
67037: LD_VAR 0 2
67041: IFFALSE 67087
// for i := array downto size do
67043: LD_ADDR_VAR 0 4
67047: PUSH
67048: DOUBLE
67049: LD_VAR 0 1
67053: INC
67054: ST_TO_ADDR
67055: LD_VAR 0 2
67059: PUSH
67060: FOR_DOWNTO
67061: IFFALSE 67085
// result := Delete ( result , result ) ;
67063: LD_ADDR_VAR 0 3
67067: PUSH
67068: LD_VAR 0 3
67072: PPUSH
67073: LD_VAR 0 3
67077: PPUSH
67078: CALL_OW 3
67082: ST_TO_ADDR
67083: GO 67060
67085: POP
67086: POP
// end ;
67087: LD_VAR 0 3
67091: RET
// export function ComExit ( unit ) ; var tmp ; begin
67092: LD_INT 0
67094: PPUSH
67095: PPUSH
// if not IsInUnit ( unit ) then
67096: LD_VAR 0 1
67100: PPUSH
67101: CALL_OW 310
67105: NOT
67106: IFFALSE 67110
// exit ;
67108: GO 67170
// tmp := IsInUnit ( unit ) ;
67110: LD_ADDR_VAR 0 3
67114: PUSH
67115: LD_VAR 0 1
67119: PPUSH
67120: CALL_OW 310
67124: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67125: LD_VAR 0 3
67129: PPUSH
67130: CALL_OW 247
67134: PUSH
67135: LD_INT 2
67137: EQUAL
67138: IFFALSE 67151
// ComExitVehicle ( unit ) else
67140: LD_VAR 0 1
67144: PPUSH
67145: CALL_OW 121
67149: GO 67160
// ComExitBuilding ( unit ) ;
67151: LD_VAR 0 1
67155: PPUSH
67156: CALL_OW 122
// result := tmp ;
67160: LD_ADDR_VAR 0 2
67164: PUSH
67165: LD_VAR 0 3
67169: ST_TO_ADDR
// end ;
67170: LD_VAR 0 2
67174: RET
// export function ComExitAll ( units ) ; var i ; begin
67175: LD_INT 0
67177: PPUSH
67178: PPUSH
// if not units then
67179: LD_VAR 0 1
67183: NOT
67184: IFFALSE 67188
// exit ;
67186: GO 67214
// for i in units do
67188: LD_ADDR_VAR 0 3
67192: PUSH
67193: LD_VAR 0 1
67197: PUSH
67198: FOR_IN
67199: IFFALSE 67212
// ComExit ( i ) ;
67201: LD_VAR 0 3
67205: PPUSH
67206: CALL 67092 0 1
67210: GO 67198
67212: POP
67213: POP
// end ;
67214: LD_VAR 0 2
67218: RET
// export function ResetHc ; begin
67219: LD_INT 0
67221: PPUSH
// InitHc ;
67222: CALL_OW 19
// hc_importance := 0 ;
67226: LD_ADDR_OWVAR 32
67230: PUSH
67231: LD_INT 0
67233: ST_TO_ADDR
// end ;
67234: LD_VAR 0 1
67238: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67239: LD_INT 0
67241: PPUSH
67242: PPUSH
67243: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67244: LD_ADDR_VAR 0 6
67248: PUSH
67249: LD_VAR 0 1
67253: PUSH
67254: LD_VAR 0 3
67258: PLUS
67259: PUSH
67260: LD_INT 2
67262: DIV
67263: ST_TO_ADDR
// if _x < 0 then
67264: LD_VAR 0 6
67268: PUSH
67269: LD_INT 0
67271: LESS
67272: IFFALSE 67289
// _x := _x * - 1 ;
67274: LD_ADDR_VAR 0 6
67278: PUSH
67279: LD_VAR 0 6
67283: PUSH
67284: LD_INT 1
67286: NEG
67287: MUL
67288: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67289: LD_ADDR_VAR 0 7
67293: PUSH
67294: LD_VAR 0 2
67298: PUSH
67299: LD_VAR 0 4
67303: PLUS
67304: PUSH
67305: LD_INT 2
67307: DIV
67308: ST_TO_ADDR
// if _y < 0 then
67309: LD_VAR 0 7
67313: PUSH
67314: LD_INT 0
67316: LESS
67317: IFFALSE 67334
// _y := _y * - 1 ;
67319: LD_ADDR_VAR 0 7
67323: PUSH
67324: LD_VAR 0 7
67328: PUSH
67329: LD_INT 1
67331: NEG
67332: MUL
67333: ST_TO_ADDR
// result := [ _x , _y ] ;
67334: LD_ADDR_VAR 0 5
67338: PUSH
67339: LD_VAR 0 6
67343: PUSH
67344: LD_VAR 0 7
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: ST_TO_ADDR
// end ;
67353: LD_VAR 0 5
67357: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67358: LD_INT 0
67360: PPUSH
67361: PPUSH
67362: PPUSH
67363: PPUSH
// task := GetTaskList ( unit ) ;
67364: LD_ADDR_VAR 0 7
67368: PUSH
67369: LD_VAR 0 1
67373: PPUSH
67374: CALL_OW 437
67378: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67379: LD_VAR 0 7
67383: NOT
67384: PUSH
67385: LD_VAR 0 1
67389: PPUSH
67390: LD_VAR 0 2
67394: PPUSH
67395: CALL_OW 308
67399: NOT
67400: AND
67401: IFFALSE 67405
// exit ;
67403: GO 67523
// if IsInArea ( unit , area ) then
67405: LD_VAR 0 1
67409: PPUSH
67410: LD_VAR 0 2
67414: PPUSH
67415: CALL_OW 308
67419: IFFALSE 67437
// begin ComMoveToArea ( unit , goAway ) ;
67421: LD_VAR 0 1
67425: PPUSH
67426: LD_VAR 0 3
67430: PPUSH
67431: CALL_OW 113
// exit ;
67435: GO 67523
// end ; if task [ 1 ] [ 1 ] <> M then
67437: LD_VAR 0 7
67441: PUSH
67442: LD_INT 1
67444: ARRAY
67445: PUSH
67446: LD_INT 1
67448: ARRAY
67449: PUSH
67450: LD_STRING M
67452: NONEQUAL
67453: IFFALSE 67457
// exit ;
67455: GO 67523
// x := task [ 1 ] [ 2 ] ;
67457: LD_ADDR_VAR 0 5
67461: PUSH
67462: LD_VAR 0 7
67466: PUSH
67467: LD_INT 1
67469: ARRAY
67470: PUSH
67471: LD_INT 2
67473: ARRAY
67474: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67475: LD_ADDR_VAR 0 6
67479: PUSH
67480: LD_VAR 0 7
67484: PUSH
67485: LD_INT 1
67487: ARRAY
67488: PUSH
67489: LD_INT 3
67491: ARRAY
67492: ST_TO_ADDR
// if InArea ( x , y , area ) then
67493: LD_VAR 0 5
67497: PPUSH
67498: LD_VAR 0 6
67502: PPUSH
67503: LD_VAR 0 2
67507: PPUSH
67508: CALL_OW 309
67512: IFFALSE 67523
// ComStop ( unit ) ;
67514: LD_VAR 0 1
67518: PPUSH
67519: CALL_OW 141
// end ;
67523: LD_VAR 0 4
67527: RET
// export function Abs ( value ) ; begin
67528: LD_INT 0
67530: PPUSH
// result := value ;
67531: LD_ADDR_VAR 0 2
67535: PUSH
67536: LD_VAR 0 1
67540: ST_TO_ADDR
// if value < 0 then
67541: LD_VAR 0 1
67545: PUSH
67546: LD_INT 0
67548: LESS
67549: IFFALSE 67566
// result := value * - 1 ;
67551: LD_ADDR_VAR 0 2
67555: PUSH
67556: LD_VAR 0 1
67560: PUSH
67561: LD_INT 1
67563: NEG
67564: MUL
67565: ST_TO_ADDR
// end ;
67566: LD_VAR 0 2
67570: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67571: LD_INT 0
67573: PPUSH
67574: PPUSH
67575: PPUSH
67576: PPUSH
67577: PPUSH
67578: PPUSH
67579: PPUSH
67580: PPUSH
// if not unit or not building then
67581: LD_VAR 0 1
67585: NOT
67586: PUSH
67587: LD_VAR 0 2
67591: NOT
67592: OR
67593: IFFALSE 67597
// exit ;
67595: GO 67823
// x := GetX ( building ) ;
67597: LD_ADDR_VAR 0 4
67601: PUSH
67602: LD_VAR 0 2
67606: PPUSH
67607: CALL_OW 250
67611: ST_TO_ADDR
// y := GetY ( building ) ;
67612: LD_ADDR_VAR 0 6
67616: PUSH
67617: LD_VAR 0 2
67621: PPUSH
67622: CALL_OW 251
67626: ST_TO_ADDR
// d := GetDir ( building ) ;
67627: LD_ADDR_VAR 0 8
67631: PUSH
67632: LD_VAR 0 2
67636: PPUSH
67637: CALL_OW 254
67641: ST_TO_ADDR
// r := 4 ;
67642: LD_ADDR_VAR 0 9
67646: PUSH
67647: LD_INT 4
67649: ST_TO_ADDR
// for i := 1 to 5 do
67650: LD_ADDR_VAR 0 10
67654: PUSH
67655: DOUBLE
67656: LD_INT 1
67658: DEC
67659: ST_TO_ADDR
67660: LD_INT 5
67662: PUSH
67663: FOR_TO
67664: IFFALSE 67821
// begin _x := ShiftX ( x , d , r + i ) ;
67666: LD_ADDR_VAR 0 5
67670: PUSH
67671: LD_VAR 0 4
67675: PPUSH
67676: LD_VAR 0 8
67680: PPUSH
67681: LD_VAR 0 9
67685: PUSH
67686: LD_VAR 0 10
67690: PLUS
67691: PPUSH
67692: CALL_OW 272
67696: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67697: LD_ADDR_VAR 0 7
67701: PUSH
67702: LD_VAR 0 6
67706: PPUSH
67707: LD_VAR 0 8
67711: PPUSH
67712: LD_VAR 0 9
67716: PUSH
67717: LD_VAR 0 10
67721: PLUS
67722: PPUSH
67723: CALL_OW 273
67727: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67728: LD_VAR 0 5
67732: PPUSH
67733: LD_VAR 0 7
67737: PPUSH
67738: CALL_OW 488
67742: PUSH
67743: LD_VAR 0 5
67747: PPUSH
67748: LD_VAR 0 7
67752: PPUSH
67753: CALL_OW 428
67757: PPUSH
67758: CALL_OW 247
67762: PUSH
67763: LD_INT 3
67765: PUSH
67766: LD_INT 2
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: IN
67773: NOT
67774: AND
67775: IFFALSE 67819
// begin ComMoveXY ( unit , _x , _y ) ;
67777: LD_VAR 0 1
67781: PPUSH
67782: LD_VAR 0 5
67786: PPUSH
67787: LD_VAR 0 7
67791: PPUSH
67792: CALL_OW 111
// result := [ _x , _y ] ;
67796: LD_ADDR_VAR 0 3
67800: PUSH
67801: LD_VAR 0 5
67805: PUSH
67806: LD_VAR 0 7
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: ST_TO_ADDR
// exit ;
67815: POP
67816: POP
67817: GO 67823
// end ; end ;
67819: GO 67663
67821: POP
67822: POP
// end ;
67823: LD_VAR 0 3
67827: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67828: LD_INT 0
67830: PPUSH
67831: PPUSH
67832: PPUSH
// result := 0 ;
67833: LD_ADDR_VAR 0 3
67837: PUSH
67838: LD_INT 0
67840: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67841: LD_VAR 0 1
67845: PUSH
67846: LD_INT 0
67848: LESS
67849: PUSH
67850: LD_VAR 0 1
67854: PUSH
67855: LD_INT 8
67857: GREATER
67858: OR
67859: PUSH
67860: LD_VAR 0 2
67864: PUSH
67865: LD_INT 0
67867: LESS
67868: OR
67869: PUSH
67870: LD_VAR 0 2
67874: PUSH
67875: LD_INT 8
67877: GREATER
67878: OR
67879: IFFALSE 67883
// exit ;
67881: GO 67958
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67883: LD_ADDR_VAR 0 4
67887: PUSH
67888: LD_INT 22
67890: PUSH
67891: LD_VAR 0 2
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PPUSH
67900: CALL_OW 69
67904: PUSH
67905: FOR_IN
67906: IFFALSE 67956
// begin un := UnitShoot ( i ) ;
67908: LD_ADDR_VAR 0 5
67912: PUSH
67913: LD_VAR 0 4
67917: PPUSH
67918: CALL_OW 504
67922: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67923: LD_VAR 0 5
67927: PPUSH
67928: CALL_OW 255
67932: PUSH
67933: LD_VAR 0 1
67937: EQUAL
67938: IFFALSE 67954
// begin result := un ;
67940: LD_ADDR_VAR 0 3
67944: PUSH
67945: LD_VAR 0 5
67949: ST_TO_ADDR
// exit ;
67950: POP
67951: POP
67952: GO 67958
// end ; end ;
67954: GO 67905
67956: POP
67957: POP
// end ;
67958: LD_VAR 0 3
67962: RET
// export function GetCargoBay ( units ) ; begin
67963: LD_INT 0
67965: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67966: LD_ADDR_VAR 0 2
67970: PUSH
67971: LD_VAR 0 1
67975: PPUSH
67976: LD_INT 2
67978: PUSH
67979: LD_INT 34
67981: PUSH
67982: LD_INT 12
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 34
67991: PUSH
67992: LD_INT 51
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 34
68001: PUSH
68002: LD_INT 32
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: PUSH
68009: LD_INT 34
68011: PUSH
68012: LD_INT 89
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: PPUSH
68026: CALL_OW 72
68030: ST_TO_ADDR
// end ;
68031: LD_VAR 0 2
68035: RET
// export function Negate ( value ) ; begin
68036: LD_INT 0
68038: PPUSH
// result := not value ;
68039: LD_ADDR_VAR 0 2
68043: PUSH
68044: LD_VAR 0 1
68048: NOT
68049: ST_TO_ADDR
// end ;
68050: LD_VAR 0 2
68054: RET
// export function Inc ( value ) ; begin
68055: LD_INT 0
68057: PPUSH
// result := value + 1 ;
68058: LD_ADDR_VAR 0 2
68062: PUSH
68063: LD_VAR 0 1
68067: PUSH
68068: LD_INT 1
68070: PLUS
68071: ST_TO_ADDR
// end ;
68072: LD_VAR 0 2
68076: RET
// export function Dec ( value ) ; begin
68077: LD_INT 0
68079: PPUSH
// result := value - 1 ;
68080: LD_ADDR_VAR 0 2
68084: PUSH
68085: LD_VAR 0 1
68089: PUSH
68090: LD_INT 1
68092: MINUS
68093: ST_TO_ADDR
// end ;
68094: LD_VAR 0 2
68098: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68099: LD_INT 0
68101: PPUSH
68102: PPUSH
68103: PPUSH
68104: PPUSH
68105: PPUSH
68106: PPUSH
68107: PPUSH
68108: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68109: LD_VAR 0 1
68113: PPUSH
68114: LD_VAR 0 2
68118: PPUSH
68119: CALL_OW 488
68123: NOT
68124: PUSH
68125: LD_VAR 0 3
68129: PPUSH
68130: LD_VAR 0 4
68134: PPUSH
68135: CALL_OW 488
68139: NOT
68140: OR
68141: IFFALSE 68154
// begin result := - 1 ;
68143: LD_ADDR_VAR 0 5
68147: PUSH
68148: LD_INT 1
68150: NEG
68151: ST_TO_ADDR
// exit ;
68152: GO 68389
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68154: LD_ADDR_VAR 0 12
68158: PUSH
68159: LD_VAR 0 1
68163: PPUSH
68164: LD_VAR 0 2
68168: PPUSH
68169: LD_VAR 0 3
68173: PPUSH
68174: LD_VAR 0 4
68178: PPUSH
68179: CALL 67239 0 4
68183: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68184: LD_ADDR_VAR 0 11
68188: PUSH
68189: LD_VAR 0 1
68193: PPUSH
68194: LD_VAR 0 2
68198: PPUSH
68199: LD_VAR 0 12
68203: PUSH
68204: LD_INT 1
68206: ARRAY
68207: PPUSH
68208: LD_VAR 0 12
68212: PUSH
68213: LD_INT 2
68215: ARRAY
68216: PPUSH
68217: CALL_OW 298
68221: ST_TO_ADDR
// distance := 9999 ;
68222: LD_ADDR_VAR 0 10
68226: PUSH
68227: LD_INT 9999
68229: ST_TO_ADDR
// for i := 0 to 5 do
68230: LD_ADDR_VAR 0 6
68234: PUSH
68235: DOUBLE
68236: LD_INT 0
68238: DEC
68239: ST_TO_ADDR
68240: LD_INT 5
68242: PUSH
68243: FOR_TO
68244: IFFALSE 68387
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68246: LD_ADDR_VAR 0 7
68250: PUSH
68251: LD_VAR 0 1
68255: PPUSH
68256: LD_VAR 0 6
68260: PPUSH
68261: LD_VAR 0 11
68265: PPUSH
68266: CALL_OW 272
68270: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68271: LD_ADDR_VAR 0 8
68275: PUSH
68276: LD_VAR 0 2
68280: PPUSH
68281: LD_VAR 0 6
68285: PPUSH
68286: LD_VAR 0 11
68290: PPUSH
68291: CALL_OW 273
68295: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68296: LD_VAR 0 7
68300: PPUSH
68301: LD_VAR 0 8
68305: PPUSH
68306: CALL_OW 488
68310: NOT
68311: IFFALSE 68315
// continue ;
68313: GO 68243
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68315: LD_ADDR_VAR 0 9
68319: PUSH
68320: LD_VAR 0 12
68324: PUSH
68325: LD_INT 1
68327: ARRAY
68328: PPUSH
68329: LD_VAR 0 12
68333: PUSH
68334: LD_INT 2
68336: ARRAY
68337: PPUSH
68338: LD_VAR 0 7
68342: PPUSH
68343: LD_VAR 0 8
68347: PPUSH
68348: CALL_OW 298
68352: ST_TO_ADDR
// if tmp < distance then
68353: LD_VAR 0 9
68357: PUSH
68358: LD_VAR 0 10
68362: LESS
68363: IFFALSE 68385
// begin result := i ;
68365: LD_ADDR_VAR 0 5
68369: PUSH
68370: LD_VAR 0 6
68374: ST_TO_ADDR
// distance := tmp ;
68375: LD_ADDR_VAR 0 10
68379: PUSH
68380: LD_VAR 0 9
68384: ST_TO_ADDR
// end ; end ;
68385: GO 68243
68387: POP
68388: POP
// end ;
68389: LD_VAR 0 5
68393: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68394: LD_INT 0
68396: PPUSH
68397: PPUSH
// if not driver or not IsInUnit ( driver ) then
68398: LD_VAR 0 1
68402: NOT
68403: PUSH
68404: LD_VAR 0 1
68408: PPUSH
68409: CALL_OW 310
68413: NOT
68414: OR
68415: IFFALSE 68419
// exit ;
68417: GO 68509
// vehicle := IsInUnit ( driver ) ;
68419: LD_ADDR_VAR 0 3
68423: PUSH
68424: LD_VAR 0 1
68428: PPUSH
68429: CALL_OW 310
68433: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68434: LD_VAR 0 1
68438: PPUSH
68439: LD_STRING \
68441: PUSH
68442: LD_INT 0
68444: PUSH
68445: LD_INT 0
68447: PUSH
68448: LD_INT 0
68450: PUSH
68451: LD_INT 0
68453: PUSH
68454: LD_INT 0
68456: PUSH
68457: LD_INT 0
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: PUSH
68469: LD_STRING E
68471: PUSH
68472: LD_INT 0
68474: PUSH
68475: LD_INT 0
68477: PUSH
68478: LD_VAR 0 3
68482: PUSH
68483: LD_INT 0
68485: PUSH
68486: LD_INT 0
68488: PUSH
68489: LD_INT 0
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PPUSH
68505: CALL_OW 446
// end ;
68509: LD_VAR 0 2
68513: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68514: LD_INT 0
68516: PPUSH
68517: PPUSH
// if not driver or not IsInUnit ( driver ) then
68518: LD_VAR 0 1
68522: NOT
68523: PUSH
68524: LD_VAR 0 1
68528: PPUSH
68529: CALL_OW 310
68533: NOT
68534: OR
68535: IFFALSE 68539
// exit ;
68537: GO 68629
// vehicle := IsInUnit ( driver ) ;
68539: LD_ADDR_VAR 0 3
68543: PUSH
68544: LD_VAR 0 1
68548: PPUSH
68549: CALL_OW 310
68553: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68554: LD_VAR 0 1
68558: PPUSH
68559: LD_STRING \
68561: PUSH
68562: LD_INT 0
68564: PUSH
68565: LD_INT 0
68567: PUSH
68568: LD_INT 0
68570: PUSH
68571: LD_INT 0
68573: PUSH
68574: LD_INT 0
68576: PUSH
68577: LD_INT 0
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: LIST
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: PUSH
68589: LD_STRING E
68591: PUSH
68592: LD_INT 0
68594: PUSH
68595: LD_INT 0
68597: PUSH
68598: LD_VAR 0 3
68602: PUSH
68603: LD_INT 0
68605: PUSH
68606: LD_INT 0
68608: PUSH
68609: LD_INT 0
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: LIST
68616: LIST
68617: LIST
68618: LIST
68619: LIST
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: PPUSH
68625: CALL_OW 447
// end ;
68629: LD_VAR 0 2
68633: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68634: LD_INT 0
68636: PPUSH
68637: PPUSH
68638: PPUSH
// tmp := [ ] ;
68639: LD_ADDR_VAR 0 5
68643: PUSH
68644: EMPTY
68645: ST_TO_ADDR
// for i in units do
68646: LD_ADDR_VAR 0 4
68650: PUSH
68651: LD_VAR 0 1
68655: PUSH
68656: FOR_IN
68657: IFFALSE 68695
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68659: LD_ADDR_VAR 0 5
68663: PUSH
68664: LD_VAR 0 5
68668: PPUSH
68669: LD_VAR 0 5
68673: PUSH
68674: LD_INT 1
68676: PLUS
68677: PPUSH
68678: LD_VAR 0 4
68682: PPUSH
68683: CALL_OW 256
68687: PPUSH
68688: CALL_OW 2
68692: ST_TO_ADDR
68693: GO 68656
68695: POP
68696: POP
// if not tmp then
68697: LD_VAR 0 5
68701: NOT
68702: IFFALSE 68706
// exit ;
68704: GO 68754
// if asc then
68706: LD_VAR 0 2
68710: IFFALSE 68734
// result := SortListByListAsc ( units , tmp ) else
68712: LD_ADDR_VAR 0 3
68716: PUSH
68717: LD_VAR 0 1
68721: PPUSH
68722: LD_VAR 0 5
68726: PPUSH
68727: CALL_OW 76
68731: ST_TO_ADDR
68732: GO 68754
// result := SortListByListDesc ( units , tmp ) ;
68734: LD_ADDR_VAR 0 3
68738: PUSH
68739: LD_VAR 0 1
68743: PPUSH
68744: LD_VAR 0 5
68748: PPUSH
68749: CALL_OW 77
68753: ST_TO_ADDR
// end ;
68754: LD_VAR 0 3
68758: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68759: LD_INT 0
68761: PPUSH
68762: PPUSH
// task := GetTaskList ( mech ) ;
68763: LD_ADDR_VAR 0 4
68767: PUSH
68768: LD_VAR 0 1
68772: PPUSH
68773: CALL_OW 437
68777: ST_TO_ADDR
// if not task then
68778: LD_VAR 0 4
68782: NOT
68783: IFFALSE 68787
// exit ;
68785: GO 68829
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68787: LD_ADDR_VAR 0 3
68791: PUSH
68792: LD_VAR 0 4
68796: PUSH
68797: LD_INT 1
68799: ARRAY
68800: PUSH
68801: LD_INT 1
68803: ARRAY
68804: PUSH
68805: LD_STRING r
68807: EQUAL
68808: PUSH
68809: LD_VAR 0 4
68813: PUSH
68814: LD_INT 1
68816: ARRAY
68817: PUSH
68818: LD_INT 4
68820: ARRAY
68821: PUSH
68822: LD_VAR 0 2
68826: EQUAL
68827: AND
68828: ST_TO_ADDR
// end ;
68829: LD_VAR 0 3
68833: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68834: LD_INT 0
68836: PPUSH
// SetDir ( unit , d ) ;
68837: LD_VAR 0 1
68841: PPUSH
68842: LD_VAR 0 4
68846: PPUSH
68847: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68851: LD_VAR 0 1
68855: PPUSH
68856: LD_VAR 0 2
68860: PPUSH
68861: LD_VAR 0 3
68865: PPUSH
68866: LD_VAR 0 5
68870: PPUSH
68871: CALL_OW 48
// end ;
68875: LD_VAR 0 6
68879: RET
// export function ToNaturalNumber ( number ) ; begin
68880: LD_INT 0
68882: PPUSH
// result := number div 1 ;
68883: LD_ADDR_VAR 0 2
68887: PUSH
68888: LD_VAR 0 1
68892: PUSH
68893: LD_INT 1
68895: DIV
68896: ST_TO_ADDR
// if number < 0 then
68897: LD_VAR 0 1
68901: PUSH
68902: LD_INT 0
68904: LESS
68905: IFFALSE 68915
// result := 0 ;
68907: LD_ADDR_VAR 0 2
68911: PUSH
68912: LD_INT 0
68914: ST_TO_ADDR
// end ;
68915: LD_VAR 0 2
68919: RET
// export function SortByClass ( units , class ) ; var un ; begin
68920: LD_INT 0
68922: PPUSH
68923: PPUSH
// if not units or not class then
68924: LD_VAR 0 1
68928: NOT
68929: PUSH
68930: LD_VAR 0 2
68934: NOT
68935: OR
68936: IFFALSE 68940
// exit ;
68938: GO 69035
// result := [ ] ;
68940: LD_ADDR_VAR 0 3
68944: PUSH
68945: EMPTY
68946: ST_TO_ADDR
// for un in units do
68947: LD_ADDR_VAR 0 4
68951: PUSH
68952: LD_VAR 0 1
68956: PUSH
68957: FOR_IN
68958: IFFALSE 69033
// if GetClass ( un ) = class then
68960: LD_VAR 0 4
68964: PPUSH
68965: CALL_OW 257
68969: PUSH
68970: LD_VAR 0 2
68974: EQUAL
68975: IFFALSE 69002
// result := Insert ( result , 1 , un ) else
68977: LD_ADDR_VAR 0 3
68981: PUSH
68982: LD_VAR 0 3
68986: PPUSH
68987: LD_INT 1
68989: PPUSH
68990: LD_VAR 0 4
68994: PPUSH
68995: CALL_OW 2
68999: ST_TO_ADDR
69000: GO 69031
// result := Replace ( result , result + 1 , un ) ;
69002: LD_ADDR_VAR 0 3
69006: PUSH
69007: LD_VAR 0 3
69011: PPUSH
69012: LD_VAR 0 3
69016: PUSH
69017: LD_INT 1
69019: PLUS
69020: PPUSH
69021: LD_VAR 0 4
69025: PPUSH
69026: CALL_OW 1
69030: ST_TO_ADDR
69031: GO 68957
69033: POP
69034: POP
// end ;
69035: LD_VAR 0 3
69039: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69040: LD_INT 0
69042: PPUSH
69043: PPUSH
69044: PPUSH
69045: PPUSH
69046: PPUSH
69047: PPUSH
69048: PPUSH
// result := [ ] ;
69049: LD_ADDR_VAR 0 4
69053: PUSH
69054: EMPTY
69055: ST_TO_ADDR
// if x - r < 0 then
69056: LD_VAR 0 1
69060: PUSH
69061: LD_VAR 0 3
69065: MINUS
69066: PUSH
69067: LD_INT 0
69069: LESS
69070: IFFALSE 69082
// min_x := 0 else
69072: LD_ADDR_VAR 0 8
69076: PUSH
69077: LD_INT 0
69079: ST_TO_ADDR
69080: GO 69098
// min_x := x - r ;
69082: LD_ADDR_VAR 0 8
69086: PUSH
69087: LD_VAR 0 1
69091: PUSH
69092: LD_VAR 0 3
69096: MINUS
69097: ST_TO_ADDR
// if y - r < 0 then
69098: LD_VAR 0 2
69102: PUSH
69103: LD_VAR 0 3
69107: MINUS
69108: PUSH
69109: LD_INT 0
69111: LESS
69112: IFFALSE 69124
// min_y := 0 else
69114: LD_ADDR_VAR 0 7
69118: PUSH
69119: LD_INT 0
69121: ST_TO_ADDR
69122: GO 69140
// min_y := y - r ;
69124: LD_ADDR_VAR 0 7
69128: PUSH
69129: LD_VAR 0 2
69133: PUSH
69134: LD_VAR 0 3
69138: MINUS
69139: ST_TO_ADDR
// max_x := x + r ;
69140: LD_ADDR_VAR 0 9
69144: PUSH
69145: LD_VAR 0 1
69149: PUSH
69150: LD_VAR 0 3
69154: PLUS
69155: ST_TO_ADDR
// max_y := y + r ;
69156: LD_ADDR_VAR 0 10
69160: PUSH
69161: LD_VAR 0 2
69165: PUSH
69166: LD_VAR 0 3
69170: PLUS
69171: ST_TO_ADDR
// for _x = min_x to max_x do
69172: LD_ADDR_VAR 0 5
69176: PUSH
69177: DOUBLE
69178: LD_VAR 0 8
69182: DEC
69183: ST_TO_ADDR
69184: LD_VAR 0 9
69188: PUSH
69189: FOR_TO
69190: IFFALSE 69291
// for _y = min_y to max_y do
69192: LD_ADDR_VAR 0 6
69196: PUSH
69197: DOUBLE
69198: LD_VAR 0 7
69202: DEC
69203: ST_TO_ADDR
69204: LD_VAR 0 10
69208: PUSH
69209: FOR_TO
69210: IFFALSE 69287
// begin if not ValidHex ( _x , _y ) then
69212: LD_VAR 0 5
69216: PPUSH
69217: LD_VAR 0 6
69221: PPUSH
69222: CALL_OW 488
69226: NOT
69227: IFFALSE 69231
// continue ;
69229: GO 69209
// if GetResourceTypeXY ( _x , _y ) then
69231: LD_VAR 0 5
69235: PPUSH
69236: LD_VAR 0 6
69240: PPUSH
69241: CALL_OW 283
69245: IFFALSE 69285
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69247: LD_ADDR_VAR 0 4
69251: PUSH
69252: LD_VAR 0 4
69256: PPUSH
69257: LD_VAR 0 4
69261: PUSH
69262: LD_INT 1
69264: PLUS
69265: PPUSH
69266: LD_VAR 0 5
69270: PUSH
69271: LD_VAR 0 6
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: PPUSH
69280: CALL_OW 1
69284: ST_TO_ADDR
// end ;
69285: GO 69209
69287: POP
69288: POP
69289: GO 69189
69291: POP
69292: POP
// end ;
69293: LD_VAR 0 4
69297: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69298: LD_INT 0
69300: PPUSH
69301: PPUSH
69302: PPUSH
69303: PPUSH
69304: PPUSH
69305: PPUSH
69306: PPUSH
69307: PPUSH
// if not units then
69308: LD_VAR 0 1
69312: NOT
69313: IFFALSE 69317
// exit ;
69315: GO 69841
// result := UnitFilter ( units , [ f_ok ] ) ;
69317: LD_ADDR_VAR 0 3
69321: PUSH
69322: LD_VAR 0 1
69326: PPUSH
69327: LD_INT 50
69329: PUSH
69330: EMPTY
69331: LIST
69332: PPUSH
69333: CALL_OW 72
69337: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69338: LD_ADDR_VAR 0 8
69342: PUSH
69343: LD_VAR 0 1
69347: PUSH
69348: LD_INT 1
69350: ARRAY
69351: PPUSH
69352: CALL_OW 255
69356: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69357: LD_ADDR_VAR 0 10
69361: PUSH
69362: LD_INT 29
69364: PUSH
69365: LD_INT 91
69367: PUSH
69368: LD_INT 49
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: LIST
69375: ST_TO_ADDR
// if not result then
69376: LD_VAR 0 3
69380: NOT
69381: IFFALSE 69385
// exit ;
69383: GO 69841
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69385: LD_ADDR_VAR 0 5
69389: PUSH
69390: LD_INT 81
69392: PUSH
69393: LD_VAR 0 8
69397: PUSH
69398: EMPTY
69399: LIST
69400: LIST
69401: PPUSH
69402: CALL_OW 69
69406: ST_TO_ADDR
// for i in result do
69407: LD_ADDR_VAR 0 4
69411: PUSH
69412: LD_VAR 0 3
69416: PUSH
69417: FOR_IN
69418: IFFALSE 69839
// begin tag := GetTag ( i ) + 1 ;
69420: LD_ADDR_VAR 0 9
69424: PUSH
69425: LD_VAR 0 4
69429: PPUSH
69430: CALL_OW 110
69434: PUSH
69435: LD_INT 1
69437: PLUS
69438: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69439: LD_ADDR_VAR 0 7
69443: PUSH
69444: LD_VAR 0 4
69448: PPUSH
69449: CALL_OW 250
69453: PPUSH
69454: LD_VAR 0 4
69458: PPUSH
69459: CALL_OW 251
69463: PPUSH
69464: LD_INT 6
69466: PPUSH
69467: CALL 69040 0 3
69471: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69472: LD_VAR 0 4
69476: PPUSH
69477: CALL_OW 247
69481: PUSH
69482: LD_INT 2
69484: EQUAL
69485: PUSH
69486: LD_VAR 0 7
69490: AND
69491: PUSH
69492: LD_VAR 0 4
69496: PPUSH
69497: CALL_OW 264
69501: PUSH
69502: LD_VAR 0 10
69506: IN
69507: NOT
69508: AND
69509: IFFALSE 69548
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69511: LD_VAR 0 4
69515: PPUSH
69516: LD_VAR 0 7
69520: PUSH
69521: LD_INT 1
69523: ARRAY
69524: PUSH
69525: LD_INT 1
69527: ARRAY
69528: PPUSH
69529: LD_VAR 0 7
69533: PUSH
69534: LD_INT 1
69536: ARRAY
69537: PUSH
69538: LD_INT 2
69540: ARRAY
69541: PPUSH
69542: CALL_OW 116
69546: GO 69837
// if path > tag then
69548: LD_VAR 0 2
69552: PUSH
69553: LD_VAR 0 9
69557: GREATER
69558: IFFALSE 69766
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69560: LD_ADDR_VAR 0 6
69564: PUSH
69565: LD_VAR 0 5
69569: PPUSH
69570: LD_INT 91
69572: PUSH
69573: LD_VAR 0 4
69577: PUSH
69578: LD_INT 8
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: LIST
69585: PPUSH
69586: CALL_OW 72
69590: ST_TO_ADDR
// if nearEnemy then
69591: LD_VAR 0 6
69595: IFFALSE 69664
// begin if GetWeapon ( i ) = ru_time_lapser then
69597: LD_VAR 0 4
69601: PPUSH
69602: CALL_OW 264
69606: PUSH
69607: LD_INT 49
69609: EQUAL
69610: IFFALSE 69638
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69612: LD_VAR 0 4
69616: PPUSH
69617: LD_VAR 0 6
69621: PPUSH
69622: LD_VAR 0 4
69626: PPUSH
69627: CALL_OW 74
69631: PPUSH
69632: CALL_OW 112
69636: GO 69662
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69638: LD_VAR 0 4
69642: PPUSH
69643: LD_VAR 0 6
69647: PPUSH
69648: LD_VAR 0 4
69652: PPUSH
69653: CALL_OW 74
69657: PPUSH
69658: CALL_OW 115
// end else
69662: GO 69764
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69664: LD_VAR 0 4
69668: PPUSH
69669: LD_VAR 0 2
69673: PUSH
69674: LD_VAR 0 9
69678: ARRAY
69679: PUSH
69680: LD_INT 1
69682: ARRAY
69683: PPUSH
69684: LD_VAR 0 2
69688: PUSH
69689: LD_VAR 0 9
69693: ARRAY
69694: PUSH
69695: LD_INT 2
69697: ARRAY
69698: PPUSH
69699: CALL_OW 297
69703: PUSH
69704: LD_INT 6
69706: GREATER
69707: IFFALSE 69750
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69709: LD_VAR 0 4
69713: PPUSH
69714: LD_VAR 0 2
69718: PUSH
69719: LD_VAR 0 9
69723: ARRAY
69724: PUSH
69725: LD_INT 1
69727: ARRAY
69728: PPUSH
69729: LD_VAR 0 2
69733: PUSH
69734: LD_VAR 0 9
69738: ARRAY
69739: PUSH
69740: LD_INT 2
69742: ARRAY
69743: PPUSH
69744: CALL_OW 114
69748: GO 69764
// SetTag ( i , tag ) ;
69750: LD_VAR 0 4
69754: PPUSH
69755: LD_VAR 0 9
69759: PPUSH
69760: CALL_OW 109
// end else
69764: GO 69837
// if enemy then
69766: LD_VAR 0 5
69770: IFFALSE 69837
// begin if GetWeapon ( i ) = ru_time_lapser then
69772: LD_VAR 0 4
69776: PPUSH
69777: CALL_OW 264
69781: PUSH
69782: LD_INT 49
69784: EQUAL
69785: IFFALSE 69813
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69787: LD_VAR 0 4
69791: PPUSH
69792: LD_VAR 0 5
69796: PPUSH
69797: LD_VAR 0 4
69801: PPUSH
69802: CALL_OW 74
69806: PPUSH
69807: CALL_OW 112
69811: GO 69837
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69813: LD_VAR 0 4
69817: PPUSH
69818: LD_VAR 0 5
69822: PPUSH
69823: LD_VAR 0 4
69827: PPUSH
69828: CALL_OW 74
69832: PPUSH
69833: CALL_OW 115
// end ; end ;
69837: GO 69417
69839: POP
69840: POP
// end ;
69841: LD_VAR 0 3
69845: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69846: LD_INT 0
69848: PPUSH
69849: PPUSH
69850: PPUSH
// if not unit or IsInUnit ( unit ) then
69851: LD_VAR 0 1
69855: NOT
69856: PUSH
69857: LD_VAR 0 1
69861: PPUSH
69862: CALL_OW 310
69866: OR
69867: IFFALSE 69871
// exit ;
69869: GO 69962
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69871: LD_ADDR_VAR 0 4
69875: PUSH
69876: LD_VAR 0 1
69880: PPUSH
69881: CALL_OW 250
69885: PPUSH
69886: LD_VAR 0 2
69890: PPUSH
69891: LD_INT 1
69893: PPUSH
69894: CALL_OW 272
69898: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69899: LD_ADDR_VAR 0 5
69903: PUSH
69904: LD_VAR 0 1
69908: PPUSH
69909: CALL_OW 251
69913: PPUSH
69914: LD_VAR 0 2
69918: PPUSH
69919: LD_INT 1
69921: PPUSH
69922: CALL_OW 273
69926: ST_TO_ADDR
// if ValidHex ( x , y ) then
69927: LD_VAR 0 4
69931: PPUSH
69932: LD_VAR 0 5
69936: PPUSH
69937: CALL_OW 488
69941: IFFALSE 69962
// ComTurnXY ( unit , x , y ) ;
69943: LD_VAR 0 1
69947: PPUSH
69948: LD_VAR 0 4
69952: PPUSH
69953: LD_VAR 0 5
69957: PPUSH
69958: CALL_OW 118
// end ;
69962: LD_VAR 0 3
69966: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69967: LD_INT 0
69969: PPUSH
69970: PPUSH
// result := false ;
69971: LD_ADDR_VAR 0 3
69975: PUSH
69976: LD_INT 0
69978: ST_TO_ADDR
// if not units then
69979: LD_VAR 0 2
69983: NOT
69984: IFFALSE 69988
// exit ;
69986: GO 70033
// for i in units do
69988: LD_ADDR_VAR 0 4
69992: PUSH
69993: LD_VAR 0 2
69997: PUSH
69998: FOR_IN
69999: IFFALSE 70031
// if See ( side , i ) then
70001: LD_VAR 0 1
70005: PPUSH
70006: LD_VAR 0 4
70010: PPUSH
70011: CALL_OW 292
70015: IFFALSE 70029
// begin result := true ;
70017: LD_ADDR_VAR 0 3
70021: PUSH
70022: LD_INT 1
70024: ST_TO_ADDR
// exit ;
70025: POP
70026: POP
70027: GO 70033
// end ;
70029: GO 69998
70031: POP
70032: POP
// end ;
70033: LD_VAR 0 3
70037: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70038: LD_INT 0
70040: PPUSH
70041: PPUSH
70042: PPUSH
70043: PPUSH
// if not unit or not points then
70044: LD_VAR 0 1
70048: NOT
70049: PUSH
70050: LD_VAR 0 2
70054: NOT
70055: OR
70056: IFFALSE 70060
// exit ;
70058: GO 70150
// dist := 99999 ;
70060: LD_ADDR_VAR 0 5
70064: PUSH
70065: LD_INT 99999
70067: ST_TO_ADDR
// for i in points do
70068: LD_ADDR_VAR 0 4
70072: PUSH
70073: LD_VAR 0 2
70077: PUSH
70078: FOR_IN
70079: IFFALSE 70148
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70081: LD_ADDR_VAR 0 6
70085: PUSH
70086: LD_VAR 0 1
70090: PPUSH
70091: LD_VAR 0 4
70095: PUSH
70096: LD_INT 1
70098: ARRAY
70099: PPUSH
70100: LD_VAR 0 4
70104: PUSH
70105: LD_INT 2
70107: ARRAY
70108: PPUSH
70109: CALL_OW 297
70113: ST_TO_ADDR
// if tmpDist < dist then
70114: LD_VAR 0 6
70118: PUSH
70119: LD_VAR 0 5
70123: LESS
70124: IFFALSE 70146
// begin result := i ;
70126: LD_ADDR_VAR 0 3
70130: PUSH
70131: LD_VAR 0 4
70135: ST_TO_ADDR
// dist := tmpDist ;
70136: LD_ADDR_VAR 0 5
70140: PUSH
70141: LD_VAR 0 6
70145: ST_TO_ADDR
// end ; end ;
70146: GO 70078
70148: POP
70149: POP
// end ;
70150: LD_VAR 0 3
70154: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70155: LD_INT 0
70157: PPUSH
// uc_side := side ;
70158: LD_ADDR_OWVAR 20
70162: PUSH
70163: LD_VAR 0 1
70167: ST_TO_ADDR
// uc_nation := 3 ;
70168: LD_ADDR_OWVAR 21
70172: PUSH
70173: LD_INT 3
70175: ST_TO_ADDR
// vc_chassis := 25 ;
70176: LD_ADDR_OWVAR 37
70180: PUSH
70181: LD_INT 25
70183: ST_TO_ADDR
// vc_engine := engine_siberite ;
70184: LD_ADDR_OWVAR 39
70188: PUSH
70189: LD_INT 3
70191: ST_TO_ADDR
// vc_control := control_computer ;
70192: LD_ADDR_OWVAR 38
70196: PUSH
70197: LD_INT 3
70199: ST_TO_ADDR
// vc_weapon := 59 ;
70200: LD_ADDR_OWVAR 40
70204: PUSH
70205: LD_INT 59
70207: ST_TO_ADDR
// result := CreateVehicle ;
70208: LD_ADDR_VAR 0 5
70212: PUSH
70213: CALL_OW 45
70217: ST_TO_ADDR
// SetDir ( result , d ) ;
70218: LD_VAR 0 5
70222: PPUSH
70223: LD_VAR 0 4
70227: PPUSH
70228: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70232: LD_VAR 0 5
70236: PPUSH
70237: LD_VAR 0 2
70241: PPUSH
70242: LD_VAR 0 3
70246: PPUSH
70247: LD_INT 0
70249: PPUSH
70250: CALL_OW 48
// end ;
70254: LD_VAR 0 5
70258: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70259: LD_INT 0
70261: PPUSH
70262: PPUSH
70263: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70264: LD_ADDR_VAR 0 2
70268: PUSH
70269: LD_INT 0
70271: PUSH
70272: LD_INT 0
70274: PUSH
70275: LD_INT 0
70277: PUSH
70278: LD_INT 0
70280: PUSH
70281: EMPTY
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70287: LD_VAR 0 1
70291: NOT
70292: PUSH
70293: LD_VAR 0 1
70297: PPUSH
70298: CALL_OW 264
70302: PUSH
70303: LD_INT 12
70305: PUSH
70306: LD_INT 51
70308: PUSH
70309: LD_INT 32
70311: PUSH
70312: LD_INT 89
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: IN
70321: NOT
70322: OR
70323: IFFALSE 70327
// exit ;
70325: GO 70425
// for i := 1 to 3 do
70327: LD_ADDR_VAR 0 3
70331: PUSH
70332: DOUBLE
70333: LD_INT 1
70335: DEC
70336: ST_TO_ADDR
70337: LD_INT 3
70339: PUSH
70340: FOR_TO
70341: IFFALSE 70423
// begin tmp := GetCargo ( cargo , i ) ;
70343: LD_ADDR_VAR 0 4
70347: PUSH
70348: LD_VAR 0 1
70352: PPUSH
70353: LD_VAR 0 3
70357: PPUSH
70358: CALL_OW 289
70362: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70363: LD_ADDR_VAR 0 2
70367: PUSH
70368: LD_VAR 0 2
70372: PPUSH
70373: LD_VAR 0 3
70377: PPUSH
70378: LD_VAR 0 4
70382: PPUSH
70383: CALL_OW 1
70387: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70388: LD_ADDR_VAR 0 2
70392: PUSH
70393: LD_VAR 0 2
70397: PPUSH
70398: LD_INT 4
70400: PPUSH
70401: LD_VAR 0 2
70405: PUSH
70406: LD_INT 4
70408: ARRAY
70409: PUSH
70410: LD_VAR 0 4
70414: PLUS
70415: PPUSH
70416: CALL_OW 1
70420: ST_TO_ADDR
// end ;
70421: GO 70340
70423: POP
70424: POP
// end ;
70425: LD_VAR 0 2
70429: RET
// export function Length ( array ) ; begin
70430: LD_INT 0
70432: PPUSH
// result := array + 0 ;
70433: LD_ADDR_VAR 0 2
70437: PUSH
70438: LD_VAR 0 1
70442: PUSH
70443: LD_INT 0
70445: PLUS
70446: ST_TO_ADDR
// end ;
70447: LD_VAR 0 2
70451: RET
// export function PrepareArray ( array ) ; begin
70452: LD_INT 0
70454: PPUSH
// result := array diff 0 ;
70455: LD_ADDR_VAR 0 2
70459: PUSH
70460: LD_VAR 0 1
70464: PUSH
70465: LD_INT 0
70467: DIFF
70468: ST_TO_ADDR
// if not result [ 1 ] then
70469: LD_VAR 0 2
70473: PUSH
70474: LD_INT 1
70476: ARRAY
70477: NOT
70478: IFFALSE 70498
// result := Delete ( result , 1 ) ;
70480: LD_ADDR_VAR 0 2
70484: PUSH
70485: LD_VAR 0 2
70489: PPUSH
70490: LD_INT 1
70492: PPUSH
70493: CALL_OW 3
70497: ST_TO_ADDR
// end ;
70498: LD_VAR 0 2
70502: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70503: LD_INT 0
70505: PPUSH
70506: PPUSH
70507: PPUSH
70508: PPUSH
// sibRocketRange := 25 ;
70509: LD_ADDR_VAR 0 6
70513: PUSH
70514: LD_INT 25
70516: ST_TO_ADDR
// result := false ;
70517: LD_ADDR_VAR 0 4
70521: PUSH
70522: LD_INT 0
70524: ST_TO_ADDR
// for i := 0 to 5 do
70525: LD_ADDR_VAR 0 5
70529: PUSH
70530: DOUBLE
70531: LD_INT 0
70533: DEC
70534: ST_TO_ADDR
70535: LD_INT 5
70537: PUSH
70538: FOR_TO
70539: IFFALSE 70606
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70541: LD_VAR 0 1
70545: PPUSH
70546: LD_VAR 0 5
70550: PPUSH
70551: LD_VAR 0 6
70555: PPUSH
70556: CALL_OW 272
70560: PPUSH
70561: LD_VAR 0 2
70565: PPUSH
70566: LD_VAR 0 5
70570: PPUSH
70571: LD_VAR 0 6
70575: PPUSH
70576: CALL_OW 273
70580: PPUSH
70581: LD_VAR 0 3
70585: PPUSH
70586: CALL_OW 309
70590: IFFALSE 70604
// begin result := true ;
70592: LD_ADDR_VAR 0 4
70596: PUSH
70597: LD_INT 1
70599: ST_TO_ADDR
// exit ;
70600: POP
70601: POP
70602: GO 70608
// end ;
70604: GO 70538
70606: POP
70607: POP
// end ;
70608: LD_VAR 0 4
70612: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70613: LD_INT 0
70615: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70616: LD_VAR 0 1
70620: PPUSH
70621: LD_VAR 0 2
70625: PPUSH
70626: LD_INT 0
70628: PPUSH
70629: LD_INT 0
70631: PPUSH
70632: LD_INT 1
70634: PPUSH
70635: LD_INT 0
70637: PPUSH
70638: CALL_OW 587
// end ; end_of_file end_of_file
70642: LD_VAR 0 3
70646: RET
// export globalGameSaveCounter ; every 0 0$1 do
70647: GO 70649
70649: DISABLE
// begin enable ;
70650: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
70651: LD_STRING updateTimer(
70653: PUSH
70654: LD_OWVAR 1
70658: STR
70659: PUSH
70660: LD_STRING );
70662: STR
70663: PPUSH
70664: CALL_OW 559
// end ;
70668: END
// every 0 0$1 do
70669: GO 70671
70671: DISABLE
// begin globalGameSaveCounter := 0 ;
70672: LD_ADDR_EXP 63
70676: PUSH
70677: LD_INT 0
70679: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
70680: LD_STRING setGameSaveCounter(0)
70682: PPUSH
70683: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
70687: LD_STRING initStreamRollete();
70689: PPUSH
70690: CALL_OW 559
// InitStreamMode ;
70694: CALL 72020 0 0
// DefineStreamItems ( false ) ;
70698: LD_INT 0
70700: PPUSH
70701: CALL 72484 0 1
// end ;
70705: END
// export function SOS_MapStart ( ) ; begin
70706: LD_INT 0
70708: PPUSH
// if streamModeActive then
70709: LD_EXP 64
70713: IFFALSE 70722
// DefineStreamItems ( true ) ;
70715: LD_INT 1
70717: PPUSH
70718: CALL 72484 0 1
// UpdateLuaVariables ( ) ;
70722: CALL 70739 0 0
// UpdateFactoryWaypoints ( ) ;
70726: CALL 85345 0 0
// UpdateWarehouseGatheringPoints ( ) ;
70730: CALL 85602 0 0
// end ;
70734: LD_VAR 0 1
70738: RET
// function UpdateLuaVariables ( ) ; begin
70739: LD_INT 0
70741: PPUSH
// if globalGameSaveCounter then
70742: LD_EXP 63
70746: IFFALSE 70780
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
70748: LD_ADDR_EXP 63
70752: PUSH
70753: LD_EXP 63
70757: PPUSH
70758: CALL 68055 0 1
70762: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
70763: LD_STRING setGameSaveCounter(
70765: PUSH
70766: LD_EXP 63
70770: STR
70771: PUSH
70772: LD_STRING )
70774: STR
70775: PPUSH
70776: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
70780: LD_STRING setGameDifficulty(
70782: PUSH
70783: LD_OWVAR 67
70787: STR
70788: PUSH
70789: LD_STRING )
70791: STR
70792: PPUSH
70793: CALL_OW 559
// end ;
70797: LD_VAR 0 1
70801: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
70802: LD_INT 0
70804: PPUSH
// if p2 = stream_mode then
70805: LD_VAR 0 2
70809: PUSH
70810: LD_INT 100
70812: EQUAL
70813: IFFALSE 71816
// begin if not StreamModeActive then
70815: LD_EXP 64
70819: NOT
70820: IFFALSE 70830
// StreamModeActive := true ;
70822: LD_ADDR_EXP 64
70826: PUSH
70827: LD_INT 1
70829: ST_TO_ADDR
// if p3 = 0 then
70830: LD_VAR 0 3
70834: PUSH
70835: LD_INT 0
70837: EQUAL
70838: IFFALSE 70844
// InitStreamMode ;
70840: CALL 72020 0 0
// if p3 = 1 then
70844: LD_VAR 0 3
70848: PUSH
70849: LD_INT 1
70851: EQUAL
70852: IFFALSE 70862
// sRocket := true ;
70854: LD_ADDR_EXP 69
70858: PUSH
70859: LD_INT 1
70861: ST_TO_ADDR
// if p3 = 2 then
70862: LD_VAR 0 3
70866: PUSH
70867: LD_INT 2
70869: EQUAL
70870: IFFALSE 70880
// sSpeed := true ;
70872: LD_ADDR_EXP 68
70876: PUSH
70877: LD_INT 1
70879: ST_TO_ADDR
// if p3 = 3 then
70880: LD_VAR 0 3
70884: PUSH
70885: LD_INT 3
70887: EQUAL
70888: IFFALSE 70898
// sEngine := true ;
70890: LD_ADDR_EXP 70
70894: PUSH
70895: LD_INT 1
70897: ST_TO_ADDR
// if p3 = 4 then
70898: LD_VAR 0 3
70902: PUSH
70903: LD_INT 4
70905: EQUAL
70906: IFFALSE 70916
// sSpec := true ;
70908: LD_ADDR_EXP 67
70912: PUSH
70913: LD_INT 1
70915: ST_TO_ADDR
// if p3 = 5 then
70916: LD_VAR 0 3
70920: PUSH
70921: LD_INT 5
70923: EQUAL
70924: IFFALSE 70934
// sLevel := true ;
70926: LD_ADDR_EXP 71
70930: PUSH
70931: LD_INT 1
70933: ST_TO_ADDR
// if p3 = 6 then
70934: LD_VAR 0 3
70938: PUSH
70939: LD_INT 6
70941: EQUAL
70942: IFFALSE 70952
// sArmoury := true ;
70944: LD_ADDR_EXP 72
70948: PUSH
70949: LD_INT 1
70951: ST_TO_ADDR
// if p3 = 7 then
70952: LD_VAR 0 3
70956: PUSH
70957: LD_INT 7
70959: EQUAL
70960: IFFALSE 70970
// sRadar := true ;
70962: LD_ADDR_EXP 73
70966: PUSH
70967: LD_INT 1
70969: ST_TO_ADDR
// if p3 = 8 then
70970: LD_VAR 0 3
70974: PUSH
70975: LD_INT 8
70977: EQUAL
70978: IFFALSE 70988
// sBunker := true ;
70980: LD_ADDR_EXP 74
70984: PUSH
70985: LD_INT 1
70987: ST_TO_ADDR
// if p3 = 9 then
70988: LD_VAR 0 3
70992: PUSH
70993: LD_INT 9
70995: EQUAL
70996: IFFALSE 71006
// sHack := true ;
70998: LD_ADDR_EXP 75
71002: PUSH
71003: LD_INT 1
71005: ST_TO_ADDR
// if p3 = 10 then
71006: LD_VAR 0 3
71010: PUSH
71011: LD_INT 10
71013: EQUAL
71014: IFFALSE 71024
// sFire := true ;
71016: LD_ADDR_EXP 76
71020: PUSH
71021: LD_INT 1
71023: ST_TO_ADDR
// if p3 = 11 then
71024: LD_VAR 0 3
71028: PUSH
71029: LD_INT 11
71031: EQUAL
71032: IFFALSE 71042
// sRefresh := true ;
71034: LD_ADDR_EXP 77
71038: PUSH
71039: LD_INT 1
71041: ST_TO_ADDR
// if p3 = 12 then
71042: LD_VAR 0 3
71046: PUSH
71047: LD_INT 12
71049: EQUAL
71050: IFFALSE 71060
// sExp := true ;
71052: LD_ADDR_EXP 78
71056: PUSH
71057: LD_INT 1
71059: ST_TO_ADDR
// if p3 = 13 then
71060: LD_VAR 0 3
71064: PUSH
71065: LD_INT 13
71067: EQUAL
71068: IFFALSE 71078
// sDepot := true ;
71070: LD_ADDR_EXP 79
71074: PUSH
71075: LD_INT 1
71077: ST_TO_ADDR
// if p3 = 14 then
71078: LD_VAR 0 3
71082: PUSH
71083: LD_INT 14
71085: EQUAL
71086: IFFALSE 71096
// sFlag := true ;
71088: LD_ADDR_EXP 80
71092: PUSH
71093: LD_INT 1
71095: ST_TO_ADDR
// if p3 = 15 then
71096: LD_VAR 0 3
71100: PUSH
71101: LD_INT 15
71103: EQUAL
71104: IFFALSE 71114
// sKamikadze := true ;
71106: LD_ADDR_EXP 88
71110: PUSH
71111: LD_INT 1
71113: ST_TO_ADDR
// if p3 = 16 then
71114: LD_VAR 0 3
71118: PUSH
71119: LD_INT 16
71121: EQUAL
71122: IFFALSE 71132
// sTroll := true ;
71124: LD_ADDR_EXP 89
71128: PUSH
71129: LD_INT 1
71131: ST_TO_ADDR
// if p3 = 17 then
71132: LD_VAR 0 3
71136: PUSH
71137: LD_INT 17
71139: EQUAL
71140: IFFALSE 71150
// sSlow := true ;
71142: LD_ADDR_EXP 90
71146: PUSH
71147: LD_INT 1
71149: ST_TO_ADDR
// if p3 = 18 then
71150: LD_VAR 0 3
71154: PUSH
71155: LD_INT 18
71157: EQUAL
71158: IFFALSE 71168
// sLack := true ;
71160: LD_ADDR_EXP 91
71164: PUSH
71165: LD_INT 1
71167: ST_TO_ADDR
// if p3 = 19 then
71168: LD_VAR 0 3
71172: PUSH
71173: LD_INT 19
71175: EQUAL
71176: IFFALSE 71186
// sTank := true ;
71178: LD_ADDR_EXP 93
71182: PUSH
71183: LD_INT 1
71185: ST_TO_ADDR
// if p3 = 20 then
71186: LD_VAR 0 3
71190: PUSH
71191: LD_INT 20
71193: EQUAL
71194: IFFALSE 71204
// sRemote := true ;
71196: LD_ADDR_EXP 94
71200: PUSH
71201: LD_INT 1
71203: ST_TO_ADDR
// if p3 = 21 then
71204: LD_VAR 0 3
71208: PUSH
71209: LD_INT 21
71211: EQUAL
71212: IFFALSE 71222
// sPowell := true ;
71214: LD_ADDR_EXP 95
71218: PUSH
71219: LD_INT 1
71221: ST_TO_ADDR
// if p3 = 22 then
71222: LD_VAR 0 3
71226: PUSH
71227: LD_INT 22
71229: EQUAL
71230: IFFALSE 71240
// sTeleport := true ;
71232: LD_ADDR_EXP 98
71236: PUSH
71237: LD_INT 1
71239: ST_TO_ADDR
// if p3 = 23 then
71240: LD_VAR 0 3
71244: PUSH
71245: LD_INT 23
71247: EQUAL
71248: IFFALSE 71258
// sOilTower := true ;
71250: LD_ADDR_EXP 100
71254: PUSH
71255: LD_INT 1
71257: ST_TO_ADDR
// if p3 = 24 then
71258: LD_VAR 0 3
71262: PUSH
71263: LD_INT 24
71265: EQUAL
71266: IFFALSE 71276
// sShovel := true ;
71268: LD_ADDR_EXP 101
71272: PUSH
71273: LD_INT 1
71275: ST_TO_ADDR
// if p3 = 25 then
71276: LD_VAR 0 3
71280: PUSH
71281: LD_INT 25
71283: EQUAL
71284: IFFALSE 71294
// sSheik := true ;
71286: LD_ADDR_EXP 102
71290: PUSH
71291: LD_INT 1
71293: ST_TO_ADDR
// if p3 = 26 then
71294: LD_VAR 0 3
71298: PUSH
71299: LD_INT 26
71301: EQUAL
71302: IFFALSE 71312
// sEarthquake := true ;
71304: LD_ADDR_EXP 104
71308: PUSH
71309: LD_INT 1
71311: ST_TO_ADDR
// if p3 = 27 then
71312: LD_VAR 0 3
71316: PUSH
71317: LD_INT 27
71319: EQUAL
71320: IFFALSE 71330
// sAI := true ;
71322: LD_ADDR_EXP 105
71326: PUSH
71327: LD_INT 1
71329: ST_TO_ADDR
// if p3 = 28 then
71330: LD_VAR 0 3
71334: PUSH
71335: LD_INT 28
71337: EQUAL
71338: IFFALSE 71348
// sCargo := true ;
71340: LD_ADDR_EXP 108
71344: PUSH
71345: LD_INT 1
71347: ST_TO_ADDR
// if p3 = 29 then
71348: LD_VAR 0 3
71352: PUSH
71353: LD_INT 29
71355: EQUAL
71356: IFFALSE 71366
// sDLaser := true ;
71358: LD_ADDR_EXP 109
71362: PUSH
71363: LD_INT 1
71365: ST_TO_ADDR
// if p3 = 30 then
71366: LD_VAR 0 3
71370: PUSH
71371: LD_INT 30
71373: EQUAL
71374: IFFALSE 71384
// sExchange := true ;
71376: LD_ADDR_EXP 110
71380: PUSH
71381: LD_INT 1
71383: ST_TO_ADDR
// if p3 = 31 then
71384: LD_VAR 0 3
71388: PUSH
71389: LD_INT 31
71391: EQUAL
71392: IFFALSE 71402
// sFac := true ;
71394: LD_ADDR_EXP 111
71398: PUSH
71399: LD_INT 1
71401: ST_TO_ADDR
// if p3 = 32 then
71402: LD_VAR 0 3
71406: PUSH
71407: LD_INT 32
71409: EQUAL
71410: IFFALSE 71420
// sPower := true ;
71412: LD_ADDR_EXP 112
71416: PUSH
71417: LD_INT 1
71419: ST_TO_ADDR
// if p3 = 33 then
71420: LD_VAR 0 3
71424: PUSH
71425: LD_INT 33
71427: EQUAL
71428: IFFALSE 71438
// sRandom := true ;
71430: LD_ADDR_EXP 113
71434: PUSH
71435: LD_INT 1
71437: ST_TO_ADDR
// if p3 = 34 then
71438: LD_VAR 0 3
71442: PUSH
71443: LD_INT 34
71445: EQUAL
71446: IFFALSE 71456
// sShield := true ;
71448: LD_ADDR_EXP 114
71452: PUSH
71453: LD_INT 1
71455: ST_TO_ADDR
// if p3 = 35 then
71456: LD_VAR 0 3
71460: PUSH
71461: LD_INT 35
71463: EQUAL
71464: IFFALSE 71474
// sTime := true ;
71466: LD_ADDR_EXP 115
71470: PUSH
71471: LD_INT 1
71473: ST_TO_ADDR
// if p3 = 36 then
71474: LD_VAR 0 3
71478: PUSH
71479: LD_INT 36
71481: EQUAL
71482: IFFALSE 71492
// sTools := true ;
71484: LD_ADDR_EXP 116
71488: PUSH
71489: LD_INT 1
71491: ST_TO_ADDR
// if p3 = 101 then
71492: LD_VAR 0 3
71496: PUSH
71497: LD_INT 101
71499: EQUAL
71500: IFFALSE 71510
// sSold := true ;
71502: LD_ADDR_EXP 81
71506: PUSH
71507: LD_INT 1
71509: ST_TO_ADDR
// if p3 = 102 then
71510: LD_VAR 0 3
71514: PUSH
71515: LD_INT 102
71517: EQUAL
71518: IFFALSE 71528
// sDiff := true ;
71520: LD_ADDR_EXP 82
71524: PUSH
71525: LD_INT 1
71527: ST_TO_ADDR
// if p3 = 103 then
71528: LD_VAR 0 3
71532: PUSH
71533: LD_INT 103
71535: EQUAL
71536: IFFALSE 71546
// sFog := true ;
71538: LD_ADDR_EXP 85
71542: PUSH
71543: LD_INT 1
71545: ST_TO_ADDR
// if p3 = 104 then
71546: LD_VAR 0 3
71550: PUSH
71551: LD_INT 104
71553: EQUAL
71554: IFFALSE 71564
// sReset := true ;
71556: LD_ADDR_EXP 86
71560: PUSH
71561: LD_INT 1
71563: ST_TO_ADDR
// if p3 = 105 then
71564: LD_VAR 0 3
71568: PUSH
71569: LD_INT 105
71571: EQUAL
71572: IFFALSE 71582
// sSun := true ;
71574: LD_ADDR_EXP 87
71578: PUSH
71579: LD_INT 1
71581: ST_TO_ADDR
// if p3 = 106 then
71582: LD_VAR 0 3
71586: PUSH
71587: LD_INT 106
71589: EQUAL
71590: IFFALSE 71600
// sTiger := true ;
71592: LD_ADDR_EXP 83
71596: PUSH
71597: LD_INT 1
71599: ST_TO_ADDR
// if p3 = 107 then
71600: LD_VAR 0 3
71604: PUSH
71605: LD_INT 107
71607: EQUAL
71608: IFFALSE 71618
// sBomb := true ;
71610: LD_ADDR_EXP 84
71614: PUSH
71615: LD_INT 1
71617: ST_TO_ADDR
// if p3 = 108 then
71618: LD_VAR 0 3
71622: PUSH
71623: LD_INT 108
71625: EQUAL
71626: IFFALSE 71636
// sWound := true ;
71628: LD_ADDR_EXP 92
71632: PUSH
71633: LD_INT 1
71635: ST_TO_ADDR
// if p3 = 109 then
71636: LD_VAR 0 3
71640: PUSH
71641: LD_INT 109
71643: EQUAL
71644: IFFALSE 71654
// sBetray := true ;
71646: LD_ADDR_EXP 96
71650: PUSH
71651: LD_INT 1
71653: ST_TO_ADDR
// if p3 = 110 then
71654: LD_VAR 0 3
71658: PUSH
71659: LD_INT 110
71661: EQUAL
71662: IFFALSE 71672
// sContamin := true ;
71664: LD_ADDR_EXP 97
71668: PUSH
71669: LD_INT 1
71671: ST_TO_ADDR
// if p3 = 111 then
71672: LD_VAR 0 3
71676: PUSH
71677: LD_INT 111
71679: EQUAL
71680: IFFALSE 71690
// sOil := true ;
71682: LD_ADDR_EXP 99
71686: PUSH
71687: LD_INT 1
71689: ST_TO_ADDR
// if p3 = 112 then
71690: LD_VAR 0 3
71694: PUSH
71695: LD_INT 112
71697: EQUAL
71698: IFFALSE 71708
// sStu := true ;
71700: LD_ADDR_EXP 103
71704: PUSH
71705: LD_INT 1
71707: ST_TO_ADDR
// if p3 = 113 then
71708: LD_VAR 0 3
71712: PUSH
71713: LD_INT 113
71715: EQUAL
71716: IFFALSE 71726
// sBazooka := true ;
71718: LD_ADDR_EXP 106
71722: PUSH
71723: LD_INT 1
71725: ST_TO_ADDR
// if p3 = 114 then
71726: LD_VAR 0 3
71730: PUSH
71731: LD_INT 114
71733: EQUAL
71734: IFFALSE 71744
// sMortar := true ;
71736: LD_ADDR_EXP 107
71740: PUSH
71741: LD_INT 1
71743: ST_TO_ADDR
// if p3 = 115 then
71744: LD_VAR 0 3
71748: PUSH
71749: LD_INT 115
71751: EQUAL
71752: IFFALSE 71762
// sRanger := true ;
71754: LD_ADDR_EXP 117
71758: PUSH
71759: LD_INT 1
71761: ST_TO_ADDR
// if p3 = 116 then
71762: LD_VAR 0 3
71766: PUSH
71767: LD_INT 116
71769: EQUAL
71770: IFFALSE 71780
// sComputer := true ;
71772: LD_ADDR_EXP 118
71776: PUSH
71777: LD_INT 1
71779: ST_TO_ADDR
// if p3 = 117 then
71780: LD_VAR 0 3
71784: PUSH
71785: LD_INT 117
71787: EQUAL
71788: IFFALSE 71798
// s30 := true ;
71790: LD_ADDR_EXP 119
71794: PUSH
71795: LD_INT 1
71797: ST_TO_ADDR
// if p3 = 118 then
71798: LD_VAR 0 3
71802: PUSH
71803: LD_INT 118
71805: EQUAL
71806: IFFALSE 71816
// s60 := true ;
71808: LD_ADDR_EXP 120
71812: PUSH
71813: LD_INT 1
71815: ST_TO_ADDR
// end ; if p2 = hack_mode then
71816: LD_VAR 0 2
71820: PUSH
71821: LD_INT 101
71823: EQUAL
71824: IFFALSE 71952
// begin case p3 of 1 :
71826: LD_VAR 0 3
71830: PUSH
71831: LD_INT 1
71833: DOUBLE
71834: EQUAL
71835: IFTRUE 71839
71837: GO 71846
71839: POP
// hHackUnlimitedResources ; 2 :
71840: CALL 84091 0 0
71844: GO 71952
71846: LD_INT 2
71848: DOUBLE
71849: EQUAL
71850: IFTRUE 71854
71852: GO 71861
71854: POP
// hHackSetLevel10 ; 3 :
71855: CALL 84224 0 0
71859: GO 71952
71861: LD_INT 3
71863: DOUBLE
71864: EQUAL
71865: IFTRUE 71869
71867: GO 71876
71869: POP
// hHackSetLevel10YourUnits ; 4 :
71870: CALL 84309 0 0
71874: GO 71952
71876: LD_INT 4
71878: DOUBLE
71879: EQUAL
71880: IFTRUE 71884
71882: GO 71891
71884: POP
// hHackInvincible ; 5 :
71885: CALL 84757 0 0
71889: GO 71952
71891: LD_INT 5
71893: DOUBLE
71894: EQUAL
71895: IFTRUE 71899
71897: GO 71906
71899: POP
// hHackInvisible ; 6 :
71900: CALL 84868 0 0
71904: GO 71952
71906: LD_INT 6
71908: DOUBLE
71909: EQUAL
71910: IFTRUE 71914
71912: GO 71921
71914: POP
// hHackChangeYourSide ; 7 :
71915: CALL 84925 0 0
71919: GO 71952
71921: LD_INT 7
71923: DOUBLE
71924: EQUAL
71925: IFTRUE 71929
71927: GO 71936
71929: POP
// hHackChangeUnitSide ; 8 :
71930: CALL 84967 0 0
71934: GO 71952
71936: LD_INT 8
71938: DOUBLE
71939: EQUAL
71940: IFTRUE 71944
71942: GO 71951
71944: POP
// hHackFog ; end ;
71945: CALL 85068 0 0
71949: GO 71952
71951: POP
// end ; if p2 = game_save_mode then
71952: LD_VAR 0 2
71956: PUSH
71957: LD_INT 102
71959: EQUAL
71960: IFFALSE 72015
// begin if p3 = 1 then
71962: LD_VAR 0 3
71966: PUSH
71967: LD_INT 1
71969: EQUAL
71970: IFFALSE 71982
// globalGameSaveCounter := p4 ;
71972: LD_ADDR_EXP 63
71976: PUSH
71977: LD_VAR 0 4
71981: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
71982: LD_VAR 0 3
71986: PUSH
71987: LD_INT 2
71989: EQUAL
71990: PUSH
71991: LD_EXP 63
71995: AND
71996: IFFALSE 72015
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
71998: LD_STRING setGameSaveCounter(
72000: PUSH
72001: LD_EXP 63
72005: STR
72006: PUSH
72007: LD_STRING )
72009: STR
72010: PPUSH
72011: CALL_OW 559
// end ; end ;
72015: LD_VAR 0 7
72019: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
72020: LD_INT 0
72022: PPUSH
// streamModeActive := false ;
72023: LD_ADDR_EXP 64
72027: PUSH
72028: LD_INT 0
72030: ST_TO_ADDR
// normalCounter := 36 ;
72031: LD_ADDR_EXP 65
72035: PUSH
72036: LD_INT 36
72038: ST_TO_ADDR
// hardcoreCounter := 18 ;
72039: LD_ADDR_EXP 66
72043: PUSH
72044: LD_INT 18
72046: ST_TO_ADDR
// sRocket := false ;
72047: LD_ADDR_EXP 69
72051: PUSH
72052: LD_INT 0
72054: ST_TO_ADDR
// sSpeed := false ;
72055: LD_ADDR_EXP 68
72059: PUSH
72060: LD_INT 0
72062: ST_TO_ADDR
// sEngine := false ;
72063: LD_ADDR_EXP 70
72067: PUSH
72068: LD_INT 0
72070: ST_TO_ADDR
// sSpec := false ;
72071: LD_ADDR_EXP 67
72075: PUSH
72076: LD_INT 0
72078: ST_TO_ADDR
// sLevel := false ;
72079: LD_ADDR_EXP 71
72083: PUSH
72084: LD_INT 0
72086: ST_TO_ADDR
// sArmoury := false ;
72087: LD_ADDR_EXP 72
72091: PUSH
72092: LD_INT 0
72094: ST_TO_ADDR
// sRadar := false ;
72095: LD_ADDR_EXP 73
72099: PUSH
72100: LD_INT 0
72102: ST_TO_ADDR
// sBunker := false ;
72103: LD_ADDR_EXP 74
72107: PUSH
72108: LD_INT 0
72110: ST_TO_ADDR
// sHack := false ;
72111: LD_ADDR_EXP 75
72115: PUSH
72116: LD_INT 0
72118: ST_TO_ADDR
// sFire := false ;
72119: LD_ADDR_EXP 76
72123: PUSH
72124: LD_INT 0
72126: ST_TO_ADDR
// sRefresh := false ;
72127: LD_ADDR_EXP 77
72131: PUSH
72132: LD_INT 0
72134: ST_TO_ADDR
// sExp := false ;
72135: LD_ADDR_EXP 78
72139: PUSH
72140: LD_INT 0
72142: ST_TO_ADDR
// sDepot := false ;
72143: LD_ADDR_EXP 79
72147: PUSH
72148: LD_INT 0
72150: ST_TO_ADDR
// sFlag := false ;
72151: LD_ADDR_EXP 80
72155: PUSH
72156: LD_INT 0
72158: ST_TO_ADDR
// sKamikadze := false ;
72159: LD_ADDR_EXP 88
72163: PUSH
72164: LD_INT 0
72166: ST_TO_ADDR
// sTroll := false ;
72167: LD_ADDR_EXP 89
72171: PUSH
72172: LD_INT 0
72174: ST_TO_ADDR
// sSlow := false ;
72175: LD_ADDR_EXP 90
72179: PUSH
72180: LD_INT 0
72182: ST_TO_ADDR
// sLack := false ;
72183: LD_ADDR_EXP 91
72187: PUSH
72188: LD_INT 0
72190: ST_TO_ADDR
// sTank := false ;
72191: LD_ADDR_EXP 93
72195: PUSH
72196: LD_INT 0
72198: ST_TO_ADDR
// sRemote := false ;
72199: LD_ADDR_EXP 94
72203: PUSH
72204: LD_INT 0
72206: ST_TO_ADDR
// sPowell := false ;
72207: LD_ADDR_EXP 95
72211: PUSH
72212: LD_INT 0
72214: ST_TO_ADDR
// sTeleport := false ;
72215: LD_ADDR_EXP 98
72219: PUSH
72220: LD_INT 0
72222: ST_TO_ADDR
// sOilTower := false ;
72223: LD_ADDR_EXP 100
72227: PUSH
72228: LD_INT 0
72230: ST_TO_ADDR
// sShovel := false ;
72231: LD_ADDR_EXP 101
72235: PUSH
72236: LD_INT 0
72238: ST_TO_ADDR
// sSheik := false ;
72239: LD_ADDR_EXP 102
72243: PUSH
72244: LD_INT 0
72246: ST_TO_ADDR
// sEarthquake := false ;
72247: LD_ADDR_EXP 104
72251: PUSH
72252: LD_INT 0
72254: ST_TO_ADDR
// sAI := false ;
72255: LD_ADDR_EXP 105
72259: PUSH
72260: LD_INT 0
72262: ST_TO_ADDR
// sCargo := false ;
72263: LD_ADDR_EXP 108
72267: PUSH
72268: LD_INT 0
72270: ST_TO_ADDR
// sDLaser := false ;
72271: LD_ADDR_EXP 109
72275: PUSH
72276: LD_INT 0
72278: ST_TO_ADDR
// sExchange := false ;
72279: LD_ADDR_EXP 110
72283: PUSH
72284: LD_INT 0
72286: ST_TO_ADDR
// sFac := false ;
72287: LD_ADDR_EXP 111
72291: PUSH
72292: LD_INT 0
72294: ST_TO_ADDR
// sPower := false ;
72295: LD_ADDR_EXP 112
72299: PUSH
72300: LD_INT 0
72302: ST_TO_ADDR
// sRandom := false ;
72303: LD_ADDR_EXP 113
72307: PUSH
72308: LD_INT 0
72310: ST_TO_ADDR
// sShield := false ;
72311: LD_ADDR_EXP 114
72315: PUSH
72316: LD_INT 0
72318: ST_TO_ADDR
// sTime := false ;
72319: LD_ADDR_EXP 115
72323: PUSH
72324: LD_INT 0
72326: ST_TO_ADDR
// sTools := false ;
72327: LD_ADDR_EXP 116
72331: PUSH
72332: LD_INT 0
72334: ST_TO_ADDR
// sSold := false ;
72335: LD_ADDR_EXP 81
72339: PUSH
72340: LD_INT 0
72342: ST_TO_ADDR
// sDiff := false ;
72343: LD_ADDR_EXP 82
72347: PUSH
72348: LD_INT 0
72350: ST_TO_ADDR
// sFog := false ;
72351: LD_ADDR_EXP 85
72355: PUSH
72356: LD_INT 0
72358: ST_TO_ADDR
// sReset := false ;
72359: LD_ADDR_EXP 86
72363: PUSH
72364: LD_INT 0
72366: ST_TO_ADDR
// sSun := false ;
72367: LD_ADDR_EXP 87
72371: PUSH
72372: LD_INT 0
72374: ST_TO_ADDR
// sTiger := false ;
72375: LD_ADDR_EXP 83
72379: PUSH
72380: LD_INT 0
72382: ST_TO_ADDR
// sBomb := false ;
72383: LD_ADDR_EXP 84
72387: PUSH
72388: LD_INT 0
72390: ST_TO_ADDR
// sWound := false ;
72391: LD_ADDR_EXP 92
72395: PUSH
72396: LD_INT 0
72398: ST_TO_ADDR
// sBetray := false ;
72399: LD_ADDR_EXP 96
72403: PUSH
72404: LD_INT 0
72406: ST_TO_ADDR
// sContamin := false ;
72407: LD_ADDR_EXP 97
72411: PUSH
72412: LD_INT 0
72414: ST_TO_ADDR
// sOil := false ;
72415: LD_ADDR_EXP 99
72419: PUSH
72420: LD_INT 0
72422: ST_TO_ADDR
// sStu := false ;
72423: LD_ADDR_EXP 103
72427: PUSH
72428: LD_INT 0
72430: ST_TO_ADDR
// sBazooka := false ;
72431: LD_ADDR_EXP 106
72435: PUSH
72436: LD_INT 0
72438: ST_TO_ADDR
// sMortar := false ;
72439: LD_ADDR_EXP 107
72443: PUSH
72444: LD_INT 0
72446: ST_TO_ADDR
// sRanger := false ;
72447: LD_ADDR_EXP 117
72451: PUSH
72452: LD_INT 0
72454: ST_TO_ADDR
// sComputer := false ;
72455: LD_ADDR_EXP 118
72459: PUSH
72460: LD_INT 0
72462: ST_TO_ADDR
// s30 := false ;
72463: LD_ADDR_EXP 119
72467: PUSH
72468: LD_INT 0
72470: ST_TO_ADDR
// s60 := false ;
72471: LD_ADDR_EXP 120
72475: PUSH
72476: LD_INT 0
72478: ST_TO_ADDR
// end ;
72479: LD_VAR 0 1
72483: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
72484: LD_INT 0
72486: PPUSH
72487: PPUSH
72488: PPUSH
72489: PPUSH
72490: PPUSH
72491: PPUSH
72492: PPUSH
// result := [ ] ;
72493: LD_ADDR_VAR 0 2
72497: PUSH
72498: EMPTY
72499: ST_TO_ADDR
// if campaign_id = 1 then
72500: LD_OWVAR 69
72504: PUSH
72505: LD_INT 1
72507: EQUAL
72508: IFFALSE 75674
// begin case mission_number of 1 :
72510: LD_OWVAR 70
72514: PUSH
72515: LD_INT 1
72517: DOUBLE
72518: EQUAL
72519: IFTRUE 72523
72521: GO 72599
72523: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
72524: LD_ADDR_VAR 0 2
72528: PUSH
72529: LD_INT 2
72531: PUSH
72532: LD_INT 4
72534: PUSH
72535: LD_INT 11
72537: PUSH
72538: LD_INT 12
72540: PUSH
72541: LD_INT 15
72543: PUSH
72544: LD_INT 16
72546: PUSH
72547: LD_INT 22
72549: PUSH
72550: LD_INT 23
72552: PUSH
72553: LD_INT 26
72555: PUSH
72556: EMPTY
72557: LIST
72558: LIST
72559: LIST
72560: LIST
72561: LIST
72562: LIST
72563: LIST
72564: LIST
72565: LIST
72566: PUSH
72567: LD_INT 101
72569: PUSH
72570: LD_INT 102
72572: PUSH
72573: LD_INT 106
72575: PUSH
72576: LD_INT 116
72578: PUSH
72579: LD_INT 117
72581: PUSH
72582: LD_INT 118
72584: PUSH
72585: EMPTY
72586: LIST
72587: LIST
72588: LIST
72589: LIST
72590: LIST
72591: LIST
72592: PUSH
72593: EMPTY
72594: LIST
72595: LIST
72596: ST_TO_ADDR
72597: GO 75672
72599: LD_INT 2
72601: DOUBLE
72602: EQUAL
72603: IFTRUE 72607
72605: GO 72691
72607: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
72608: LD_ADDR_VAR 0 2
72612: PUSH
72613: LD_INT 2
72615: PUSH
72616: LD_INT 4
72618: PUSH
72619: LD_INT 11
72621: PUSH
72622: LD_INT 12
72624: PUSH
72625: LD_INT 15
72627: PUSH
72628: LD_INT 16
72630: PUSH
72631: LD_INT 22
72633: PUSH
72634: LD_INT 23
72636: PUSH
72637: LD_INT 26
72639: PUSH
72640: EMPTY
72641: LIST
72642: LIST
72643: LIST
72644: LIST
72645: LIST
72646: LIST
72647: LIST
72648: LIST
72649: LIST
72650: PUSH
72651: LD_INT 101
72653: PUSH
72654: LD_INT 102
72656: PUSH
72657: LD_INT 105
72659: PUSH
72660: LD_INT 106
72662: PUSH
72663: LD_INT 108
72665: PUSH
72666: LD_INT 116
72668: PUSH
72669: LD_INT 117
72671: PUSH
72672: LD_INT 118
72674: PUSH
72675: EMPTY
72676: LIST
72677: LIST
72678: LIST
72679: LIST
72680: LIST
72681: LIST
72682: LIST
72683: LIST
72684: PUSH
72685: EMPTY
72686: LIST
72687: LIST
72688: ST_TO_ADDR
72689: GO 75672
72691: LD_INT 3
72693: DOUBLE
72694: EQUAL
72695: IFTRUE 72699
72697: GO 72787
72699: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
72700: LD_ADDR_VAR 0 2
72704: PUSH
72705: LD_INT 2
72707: PUSH
72708: LD_INT 4
72710: PUSH
72711: LD_INT 5
72713: PUSH
72714: LD_INT 11
72716: PUSH
72717: LD_INT 12
72719: PUSH
72720: LD_INT 15
72722: PUSH
72723: LD_INT 16
72725: PUSH
72726: LD_INT 22
72728: PUSH
72729: LD_INT 26
72731: PUSH
72732: LD_INT 36
72734: PUSH
72735: EMPTY
72736: LIST
72737: LIST
72738: LIST
72739: LIST
72740: LIST
72741: LIST
72742: LIST
72743: LIST
72744: LIST
72745: LIST
72746: PUSH
72747: LD_INT 101
72749: PUSH
72750: LD_INT 102
72752: PUSH
72753: LD_INT 105
72755: PUSH
72756: LD_INT 106
72758: PUSH
72759: LD_INT 108
72761: PUSH
72762: LD_INT 116
72764: PUSH
72765: LD_INT 117
72767: PUSH
72768: LD_INT 118
72770: PUSH
72771: EMPTY
72772: LIST
72773: LIST
72774: LIST
72775: LIST
72776: LIST
72777: LIST
72778: LIST
72779: LIST
72780: PUSH
72781: EMPTY
72782: LIST
72783: LIST
72784: ST_TO_ADDR
72785: GO 75672
72787: LD_INT 4
72789: DOUBLE
72790: EQUAL
72791: IFTRUE 72795
72793: GO 72891
72795: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
72796: LD_ADDR_VAR 0 2
72800: PUSH
72801: LD_INT 2
72803: PUSH
72804: LD_INT 4
72806: PUSH
72807: LD_INT 5
72809: PUSH
72810: LD_INT 8
72812: PUSH
72813: LD_INT 11
72815: PUSH
72816: LD_INT 12
72818: PUSH
72819: LD_INT 15
72821: PUSH
72822: LD_INT 16
72824: PUSH
72825: LD_INT 22
72827: PUSH
72828: LD_INT 23
72830: PUSH
72831: LD_INT 26
72833: PUSH
72834: LD_INT 36
72836: PUSH
72837: EMPTY
72838: LIST
72839: LIST
72840: LIST
72841: LIST
72842: LIST
72843: LIST
72844: LIST
72845: LIST
72846: LIST
72847: LIST
72848: LIST
72849: LIST
72850: PUSH
72851: LD_INT 101
72853: PUSH
72854: LD_INT 102
72856: PUSH
72857: LD_INT 105
72859: PUSH
72860: LD_INT 106
72862: PUSH
72863: LD_INT 108
72865: PUSH
72866: LD_INT 116
72868: PUSH
72869: LD_INT 117
72871: PUSH
72872: LD_INT 118
72874: PUSH
72875: EMPTY
72876: LIST
72877: LIST
72878: LIST
72879: LIST
72880: LIST
72881: LIST
72882: LIST
72883: LIST
72884: PUSH
72885: EMPTY
72886: LIST
72887: LIST
72888: ST_TO_ADDR
72889: GO 75672
72891: LD_INT 5
72893: DOUBLE
72894: EQUAL
72895: IFTRUE 72899
72897: GO 73011
72899: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
72900: LD_ADDR_VAR 0 2
72904: PUSH
72905: LD_INT 2
72907: PUSH
72908: LD_INT 4
72910: PUSH
72911: LD_INT 5
72913: PUSH
72914: LD_INT 6
72916: PUSH
72917: LD_INT 8
72919: PUSH
72920: LD_INT 11
72922: PUSH
72923: LD_INT 12
72925: PUSH
72926: LD_INT 15
72928: PUSH
72929: LD_INT 16
72931: PUSH
72932: LD_INT 22
72934: PUSH
72935: LD_INT 23
72937: PUSH
72938: LD_INT 25
72940: PUSH
72941: LD_INT 26
72943: PUSH
72944: LD_INT 36
72946: PUSH
72947: EMPTY
72948: LIST
72949: LIST
72950: LIST
72951: LIST
72952: LIST
72953: LIST
72954: LIST
72955: LIST
72956: LIST
72957: LIST
72958: LIST
72959: LIST
72960: LIST
72961: LIST
72962: PUSH
72963: LD_INT 101
72965: PUSH
72966: LD_INT 102
72968: PUSH
72969: LD_INT 105
72971: PUSH
72972: LD_INT 106
72974: PUSH
72975: LD_INT 108
72977: PUSH
72978: LD_INT 109
72980: PUSH
72981: LD_INT 112
72983: PUSH
72984: LD_INT 116
72986: PUSH
72987: LD_INT 117
72989: PUSH
72990: LD_INT 118
72992: PUSH
72993: EMPTY
72994: LIST
72995: LIST
72996: LIST
72997: LIST
72998: LIST
72999: LIST
73000: LIST
73001: LIST
73002: LIST
73003: LIST
73004: PUSH
73005: EMPTY
73006: LIST
73007: LIST
73008: ST_TO_ADDR
73009: GO 75672
73011: LD_INT 6
73013: DOUBLE
73014: EQUAL
73015: IFTRUE 73019
73017: GO 73151
73019: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
73020: LD_ADDR_VAR 0 2
73024: PUSH
73025: LD_INT 2
73027: PUSH
73028: LD_INT 4
73030: PUSH
73031: LD_INT 5
73033: PUSH
73034: LD_INT 6
73036: PUSH
73037: LD_INT 8
73039: PUSH
73040: LD_INT 11
73042: PUSH
73043: LD_INT 12
73045: PUSH
73046: LD_INT 15
73048: PUSH
73049: LD_INT 16
73051: PUSH
73052: LD_INT 20
73054: PUSH
73055: LD_INT 21
73057: PUSH
73058: LD_INT 22
73060: PUSH
73061: LD_INT 23
73063: PUSH
73064: LD_INT 25
73066: PUSH
73067: LD_INT 26
73069: PUSH
73070: LD_INT 30
73072: PUSH
73073: LD_INT 31
73075: PUSH
73076: LD_INT 32
73078: PUSH
73079: LD_INT 36
73081: PUSH
73082: EMPTY
73083: LIST
73084: LIST
73085: LIST
73086: LIST
73087: LIST
73088: LIST
73089: LIST
73090: LIST
73091: LIST
73092: LIST
73093: LIST
73094: LIST
73095: LIST
73096: LIST
73097: LIST
73098: LIST
73099: LIST
73100: LIST
73101: LIST
73102: PUSH
73103: LD_INT 101
73105: PUSH
73106: LD_INT 102
73108: PUSH
73109: LD_INT 105
73111: PUSH
73112: LD_INT 106
73114: PUSH
73115: LD_INT 108
73117: PUSH
73118: LD_INT 109
73120: PUSH
73121: LD_INT 112
73123: PUSH
73124: LD_INT 116
73126: PUSH
73127: LD_INT 117
73129: PUSH
73130: LD_INT 118
73132: PUSH
73133: EMPTY
73134: LIST
73135: LIST
73136: LIST
73137: LIST
73138: LIST
73139: LIST
73140: LIST
73141: LIST
73142: LIST
73143: LIST
73144: PUSH
73145: EMPTY
73146: LIST
73147: LIST
73148: ST_TO_ADDR
73149: GO 75672
73151: LD_INT 7
73153: DOUBLE
73154: EQUAL
73155: IFTRUE 73159
73157: GO 73271
73159: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
73160: LD_ADDR_VAR 0 2
73164: PUSH
73165: LD_INT 2
73167: PUSH
73168: LD_INT 4
73170: PUSH
73171: LD_INT 5
73173: PUSH
73174: LD_INT 7
73176: PUSH
73177: LD_INT 11
73179: PUSH
73180: LD_INT 12
73182: PUSH
73183: LD_INT 15
73185: PUSH
73186: LD_INT 16
73188: PUSH
73189: LD_INT 20
73191: PUSH
73192: LD_INT 21
73194: PUSH
73195: LD_INT 22
73197: PUSH
73198: LD_INT 23
73200: PUSH
73201: LD_INT 25
73203: PUSH
73204: LD_INT 26
73206: PUSH
73207: EMPTY
73208: LIST
73209: LIST
73210: LIST
73211: LIST
73212: LIST
73213: LIST
73214: LIST
73215: LIST
73216: LIST
73217: LIST
73218: LIST
73219: LIST
73220: LIST
73221: LIST
73222: PUSH
73223: LD_INT 101
73225: PUSH
73226: LD_INT 102
73228: PUSH
73229: LD_INT 103
73231: PUSH
73232: LD_INT 105
73234: PUSH
73235: LD_INT 106
73237: PUSH
73238: LD_INT 108
73240: PUSH
73241: LD_INT 112
73243: PUSH
73244: LD_INT 116
73246: PUSH
73247: LD_INT 117
73249: PUSH
73250: LD_INT 118
73252: PUSH
73253: EMPTY
73254: LIST
73255: LIST
73256: LIST
73257: LIST
73258: LIST
73259: LIST
73260: LIST
73261: LIST
73262: LIST
73263: LIST
73264: PUSH
73265: EMPTY
73266: LIST
73267: LIST
73268: ST_TO_ADDR
73269: GO 75672
73271: LD_INT 8
73273: DOUBLE
73274: EQUAL
73275: IFTRUE 73279
73277: GO 73419
73279: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
73280: LD_ADDR_VAR 0 2
73284: PUSH
73285: LD_INT 2
73287: PUSH
73288: LD_INT 4
73290: PUSH
73291: LD_INT 5
73293: PUSH
73294: LD_INT 6
73296: PUSH
73297: LD_INT 7
73299: PUSH
73300: LD_INT 8
73302: PUSH
73303: LD_INT 11
73305: PUSH
73306: LD_INT 12
73308: PUSH
73309: LD_INT 15
73311: PUSH
73312: LD_INT 16
73314: PUSH
73315: LD_INT 20
73317: PUSH
73318: LD_INT 21
73320: PUSH
73321: LD_INT 22
73323: PUSH
73324: LD_INT 23
73326: PUSH
73327: LD_INT 25
73329: PUSH
73330: LD_INT 26
73332: PUSH
73333: LD_INT 30
73335: PUSH
73336: LD_INT 31
73338: PUSH
73339: LD_INT 32
73341: PUSH
73342: LD_INT 36
73344: PUSH
73345: EMPTY
73346: LIST
73347: LIST
73348: LIST
73349: LIST
73350: LIST
73351: LIST
73352: LIST
73353: LIST
73354: LIST
73355: LIST
73356: LIST
73357: LIST
73358: LIST
73359: LIST
73360: LIST
73361: LIST
73362: LIST
73363: LIST
73364: LIST
73365: LIST
73366: PUSH
73367: LD_INT 101
73369: PUSH
73370: LD_INT 102
73372: PUSH
73373: LD_INT 103
73375: PUSH
73376: LD_INT 105
73378: PUSH
73379: LD_INT 106
73381: PUSH
73382: LD_INT 108
73384: PUSH
73385: LD_INT 109
73387: PUSH
73388: LD_INT 112
73390: PUSH
73391: LD_INT 116
73393: PUSH
73394: LD_INT 117
73396: PUSH
73397: LD_INT 118
73399: PUSH
73400: EMPTY
73401: LIST
73402: LIST
73403: LIST
73404: LIST
73405: LIST
73406: LIST
73407: LIST
73408: LIST
73409: LIST
73410: LIST
73411: LIST
73412: PUSH
73413: EMPTY
73414: LIST
73415: LIST
73416: ST_TO_ADDR
73417: GO 75672
73419: LD_INT 9
73421: DOUBLE
73422: EQUAL
73423: IFTRUE 73427
73425: GO 73575
73427: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
73428: LD_ADDR_VAR 0 2
73432: PUSH
73433: LD_INT 2
73435: PUSH
73436: LD_INT 4
73438: PUSH
73439: LD_INT 5
73441: PUSH
73442: LD_INT 6
73444: PUSH
73445: LD_INT 7
73447: PUSH
73448: LD_INT 8
73450: PUSH
73451: LD_INT 11
73453: PUSH
73454: LD_INT 12
73456: PUSH
73457: LD_INT 15
73459: PUSH
73460: LD_INT 16
73462: PUSH
73463: LD_INT 20
73465: PUSH
73466: LD_INT 21
73468: PUSH
73469: LD_INT 22
73471: PUSH
73472: LD_INT 23
73474: PUSH
73475: LD_INT 25
73477: PUSH
73478: LD_INT 26
73480: PUSH
73481: LD_INT 28
73483: PUSH
73484: LD_INT 30
73486: PUSH
73487: LD_INT 31
73489: PUSH
73490: LD_INT 32
73492: PUSH
73493: LD_INT 36
73495: PUSH
73496: EMPTY
73497: LIST
73498: LIST
73499: LIST
73500: LIST
73501: LIST
73502: LIST
73503: LIST
73504: LIST
73505: LIST
73506: LIST
73507: LIST
73508: LIST
73509: LIST
73510: LIST
73511: LIST
73512: LIST
73513: LIST
73514: LIST
73515: LIST
73516: LIST
73517: LIST
73518: PUSH
73519: LD_INT 101
73521: PUSH
73522: LD_INT 102
73524: PUSH
73525: LD_INT 103
73527: PUSH
73528: LD_INT 105
73530: PUSH
73531: LD_INT 106
73533: PUSH
73534: LD_INT 108
73536: PUSH
73537: LD_INT 109
73539: PUSH
73540: LD_INT 112
73542: PUSH
73543: LD_INT 114
73545: PUSH
73546: LD_INT 116
73548: PUSH
73549: LD_INT 117
73551: PUSH
73552: LD_INT 118
73554: PUSH
73555: EMPTY
73556: LIST
73557: LIST
73558: LIST
73559: LIST
73560: LIST
73561: LIST
73562: LIST
73563: LIST
73564: LIST
73565: LIST
73566: LIST
73567: LIST
73568: PUSH
73569: EMPTY
73570: LIST
73571: LIST
73572: ST_TO_ADDR
73573: GO 75672
73575: LD_INT 10
73577: DOUBLE
73578: EQUAL
73579: IFTRUE 73583
73581: GO 73779
73583: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
73584: LD_ADDR_VAR 0 2
73588: PUSH
73589: LD_INT 2
73591: PUSH
73592: LD_INT 4
73594: PUSH
73595: LD_INT 5
73597: PUSH
73598: LD_INT 6
73600: PUSH
73601: LD_INT 7
73603: PUSH
73604: LD_INT 8
73606: PUSH
73607: LD_INT 9
73609: PUSH
73610: LD_INT 10
73612: PUSH
73613: LD_INT 11
73615: PUSH
73616: LD_INT 12
73618: PUSH
73619: LD_INT 13
73621: PUSH
73622: LD_INT 14
73624: PUSH
73625: LD_INT 15
73627: PUSH
73628: LD_INT 16
73630: PUSH
73631: LD_INT 17
73633: PUSH
73634: LD_INT 18
73636: PUSH
73637: LD_INT 19
73639: PUSH
73640: LD_INT 20
73642: PUSH
73643: LD_INT 21
73645: PUSH
73646: LD_INT 22
73648: PUSH
73649: LD_INT 23
73651: PUSH
73652: LD_INT 24
73654: PUSH
73655: LD_INT 25
73657: PUSH
73658: LD_INT 26
73660: PUSH
73661: LD_INT 28
73663: PUSH
73664: LD_INT 30
73666: PUSH
73667: LD_INT 31
73669: PUSH
73670: LD_INT 32
73672: PUSH
73673: LD_INT 36
73675: PUSH
73676: EMPTY
73677: LIST
73678: LIST
73679: LIST
73680: LIST
73681: LIST
73682: LIST
73683: LIST
73684: LIST
73685: LIST
73686: LIST
73687: LIST
73688: LIST
73689: LIST
73690: LIST
73691: LIST
73692: LIST
73693: LIST
73694: LIST
73695: LIST
73696: LIST
73697: LIST
73698: LIST
73699: LIST
73700: LIST
73701: LIST
73702: LIST
73703: LIST
73704: LIST
73705: LIST
73706: PUSH
73707: LD_INT 101
73709: PUSH
73710: LD_INT 102
73712: PUSH
73713: LD_INT 103
73715: PUSH
73716: LD_INT 104
73718: PUSH
73719: LD_INT 105
73721: PUSH
73722: LD_INT 106
73724: PUSH
73725: LD_INT 107
73727: PUSH
73728: LD_INT 108
73730: PUSH
73731: LD_INT 109
73733: PUSH
73734: LD_INT 110
73736: PUSH
73737: LD_INT 111
73739: PUSH
73740: LD_INT 112
73742: PUSH
73743: LD_INT 114
73745: PUSH
73746: LD_INT 116
73748: PUSH
73749: LD_INT 117
73751: PUSH
73752: LD_INT 118
73754: PUSH
73755: EMPTY
73756: LIST
73757: LIST
73758: LIST
73759: LIST
73760: LIST
73761: LIST
73762: LIST
73763: LIST
73764: LIST
73765: LIST
73766: LIST
73767: LIST
73768: LIST
73769: LIST
73770: LIST
73771: LIST
73772: PUSH
73773: EMPTY
73774: LIST
73775: LIST
73776: ST_TO_ADDR
73777: GO 75672
73779: LD_INT 11
73781: DOUBLE
73782: EQUAL
73783: IFTRUE 73787
73785: GO 73991
73787: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
73788: LD_ADDR_VAR 0 2
73792: PUSH
73793: LD_INT 2
73795: PUSH
73796: LD_INT 3
73798: PUSH
73799: LD_INT 4
73801: PUSH
73802: LD_INT 5
73804: PUSH
73805: LD_INT 6
73807: PUSH
73808: LD_INT 7
73810: PUSH
73811: LD_INT 8
73813: PUSH
73814: LD_INT 9
73816: PUSH
73817: LD_INT 10
73819: PUSH
73820: LD_INT 11
73822: PUSH
73823: LD_INT 12
73825: PUSH
73826: LD_INT 13
73828: PUSH
73829: LD_INT 14
73831: PUSH
73832: LD_INT 15
73834: PUSH
73835: LD_INT 16
73837: PUSH
73838: LD_INT 17
73840: PUSH
73841: LD_INT 18
73843: PUSH
73844: LD_INT 19
73846: PUSH
73847: LD_INT 20
73849: PUSH
73850: LD_INT 21
73852: PUSH
73853: LD_INT 22
73855: PUSH
73856: LD_INT 23
73858: PUSH
73859: LD_INT 24
73861: PUSH
73862: LD_INT 25
73864: PUSH
73865: LD_INT 26
73867: PUSH
73868: LD_INT 28
73870: PUSH
73871: LD_INT 30
73873: PUSH
73874: LD_INT 31
73876: PUSH
73877: LD_INT 32
73879: PUSH
73880: LD_INT 34
73882: PUSH
73883: LD_INT 36
73885: PUSH
73886: EMPTY
73887: LIST
73888: LIST
73889: LIST
73890: LIST
73891: LIST
73892: LIST
73893: LIST
73894: LIST
73895: LIST
73896: LIST
73897: LIST
73898: LIST
73899: LIST
73900: LIST
73901: LIST
73902: LIST
73903: LIST
73904: LIST
73905: LIST
73906: LIST
73907: LIST
73908: LIST
73909: LIST
73910: LIST
73911: LIST
73912: LIST
73913: LIST
73914: LIST
73915: LIST
73916: LIST
73917: LIST
73918: PUSH
73919: LD_INT 101
73921: PUSH
73922: LD_INT 102
73924: PUSH
73925: LD_INT 103
73927: PUSH
73928: LD_INT 104
73930: PUSH
73931: LD_INT 105
73933: PUSH
73934: LD_INT 106
73936: PUSH
73937: LD_INT 107
73939: PUSH
73940: LD_INT 108
73942: PUSH
73943: LD_INT 109
73945: PUSH
73946: LD_INT 110
73948: PUSH
73949: LD_INT 111
73951: PUSH
73952: LD_INT 112
73954: PUSH
73955: LD_INT 114
73957: PUSH
73958: LD_INT 116
73960: PUSH
73961: LD_INT 117
73963: PUSH
73964: LD_INT 118
73966: PUSH
73967: EMPTY
73968: LIST
73969: LIST
73970: LIST
73971: LIST
73972: LIST
73973: LIST
73974: LIST
73975: LIST
73976: LIST
73977: LIST
73978: LIST
73979: LIST
73980: LIST
73981: LIST
73982: LIST
73983: LIST
73984: PUSH
73985: EMPTY
73986: LIST
73987: LIST
73988: ST_TO_ADDR
73989: GO 75672
73991: LD_INT 12
73993: DOUBLE
73994: EQUAL
73995: IFTRUE 73999
73997: GO 74219
73999: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
74000: LD_ADDR_VAR 0 2
74004: PUSH
74005: LD_INT 1
74007: PUSH
74008: LD_INT 2
74010: PUSH
74011: LD_INT 3
74013: PUSH
74014: LD_INT 4
74016: PUSH
74017: LD_INT 5
74019: PUSH
74020: LD_INT 6
74022: PUSH
74023: LD_INT 7
74025: PUSH
74026: LD_INT 8
74028: PUSH
74029: LD_INT 9
74031: PUSH
74032: LD_INT 10
74034: PUSH
74035: LD_INT 11
74037: PUSH
74038: LD_INT 12
74040: PUSH
74041: LD_INT 13
74043: PUSH
74044: LD_INT 14
74046: PUSH
74047: LD_INT 15
74049: PUSH
74050: LD_INT 16
74052: PUSH
74053: LD_INT 17
74055: PUSH
74056: LD_INT 18
74058: PUSH
74059: LD_INT 19
74061: PUSH
74062: LD_INT 20
74064: PUSH
74065: LD_INT 21
74067: PUSH
74068: LD_INT 22
74070: PUSH
74071: LD_INT 23
74073: PUSH
74074: LD_INT 24
74076: PUSH
74077: LD_INT 25
74079: PUSH
74080: LD_INT 26
74082: PUSH
74083: LD_INT 27
74085: PUSH
74086: LD_INT 28
74088: PUSH
74089: LD_INT 30
74091: PUSH
74092: LD_INT 31
74094: PUSH
74095: LD_INT 32
74097: PUSH
74098: LD_INT 33
74100: PUSH
74101: LD_INT 34
74103: PUSH
74104: LD_INT 36
74106: PUSH
74107: EMPTY
74108: LIST
74109: LIST
74110: LIST
74111: LIST
74112: LIST
74113: LIST
74114: LIST
74115: LIST
74116: LIST
74117: LIST
74118: LIST
74119: LIST
74120: LIST
74121: LIST
74122: LIST
74123: LIST
74124: LIST
74125: LIST
74126: LIST
74127: LIST
74128: LIST
74129: LIST
74130: LIST
74131: LIST
74132: LIST
74133: LIST
74134: LIST
74135: LIST
74136: LIST
74137: LIST
74138: LIST
74139: LIST
74140: LIST
74141: LIST
74142: PUSH
74143: LD_INT 101
74145: PUSH
74146: LD_INT 102
74148: PUSH
74149: LD_INT 103
74151: PUSH
74152: LD_INT 104
74154: PUSH
74155: LD_INT 105
74157: PUSH
74158: LD_INT 106
74160: PUSH
74161: LD_INT 107
74163: PUSH
74164: LD_INT 108
74166: PUSH
74167: LD_INT 109
74169: PUSH
74170: LD_INT 110
74172: PUSH
74173: LD_INT 111
74175: PUSH
74176: LD_INT 112
74178: PUSH
74179: LD_INT 113
74181: PUSH
74182: LD_INT 114
74184: PUSH
74185: LD_INT 116
74187: PUSH
74188: LD_INT 117
74190: PUSH
74191: LD_INT 118
74193: PUSH
74194: EMPTY
74195: LIST
74196: LIST
74197: LIST
74198: LIST
74199: LIST
74200: LIST
74201: LIST
74202: LIST
74203: LIST
74204: LIST
74205: LIST
74206: LIST
74207: LIST
74208: LIST
74209: LIST
74210: LIST
74211: LIST
74212: PUSH
74213: EMPTY
74214: LIST
74215: LIST
74216: ST_TO_ADDR
74217: GO 75672
74219: LD_INT 13
74221: DOUBLE
74222: EQUAL
74223: IFTRUE 74227
74225: GO 74435
74227: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
74228: LD_ADDR_VAR 0 2
74232: PUSH
74233: LD_INT 1
74235: PUSH
74236: LD_INT 2
74238: PUSH
74239: LD_INT 3
74241: PUSH
74242: LD_INT 4
74244: PUSH
74245: LD_INT 5
74247: PUSH
74248: LD_INT 8
74250: PUSH
74251: LD_INT 9
74253: PUSH
74254: LD_INT 10
74256: PUSH
74257: LD_INT 11
74259: PUSH
74260: LD_INT 12
74262: PUSH
74263: LD_INT 14
74265: PUSH
74266: LD_INT 15
74268: PUSH
74269: LD_INT 16
74271: PUSH
74272: LD_INT 17
74274: PUSH
74275: LD_INT 18
74277: PUSH
74278: LD_INT 19
74280: PUSH
74281: LD_INT 20
74283: PUSH
74284: LD_INT 21
74286: PUSH
74287: LD_INT 22
74289: PUSH
74290: LD_INT 23
74292: PUSH
74293: LD_INT 24
74295: PUSH
74296: LD_INT 25
74298: PUSH
74299: LD_INT 26
74301: PUSH
74302: LD_INT 27
74304: PUSH
74305: LD_INT 28
74307: PUSH
74308: LD_INT 30
74310: PUSH
74311: LD_INT 31
74313: PUSH
74314: LD_INT 32
74316: PUSH
74317: LD_INT 33
74319: PUSH
74320: LD_INT 34
74322: PUSH
74323: LD_INT 36
74325: PUSH
74326: EMPTY
74327: LIST
74328: LIST
74329: LIST
74330: LIST
74331: LIST
74332: LIST
74333: LIST
74334: LIST
74335: LIST
74336: LIST
74337: LIST
74338: LIST
74339: LIST
74340: LIST
74341: LIST
74342: LIST
74343: LIST
74344: LIST
74345: LIST
74346: LIST
74347: LIST
74348: LIST
74349: LIST
74350: LIST
74351: LIST
74352: LIST
74353: LIST
74354: LIST
74355: LIST
74356: LIST
74357: LIST
74358: PUSH
74359: LD_INT 101
74361: PUSH
74362: LD_INT 102
74364: PUSH
74365: LD_INT 103
74367: PUSH
74368: LD_INT 104
74370: PUSH
74371: LD_INT 105
74373: PUSH
74374: LD_INT 106
74376: PUSH
74377: LD_INT 107
74379: PUSH
74380: LD_INT 108
74382: PUSH
74383: LD_INT 109
74385: PUSH
74386: LD_INT 110
74388: PUSH
74389: LD_INT 111
74391: PUSH
74392: LD_INT 112
74394: PUSH
74395: LD_INT 113
74397: PUSH
74398: LD_INT 114
74400: PUSH
74401: LD_INT 116
74403: PUSH
74404: LD_INT 117
74406: PUSH
74407: LD_INT 118
74409: PUSH
74410: EMPTY
74411: LIST
74412: LIST
74413: LIST
74414: LIST
74415: LIST
74416: LIST
74417: LIST
74418: LIST
74419: LIST
74420: LIST
74421: LIST
74422: LIST
74423: LIST
74424: LIST
74425: LIST
74426: LIST
74427: LIST
74428: PUSH
74429: EMPTY
74430: LIST
74431: LIST
74432: ST_TO_ADDR
74433: GO 75672
74435: LD_INT 14
74437: DOUBLE
74438: EQUAL
74439: IFTRUE 74443
74441: GO 74667
74443: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
74444: LD_ADDR_VAR 0 2
74448: PUSH
74449: LD_INT 1
74451: PUSH
74452: LD_INT 2
74454: PUSH
74455: LD_INT 3
74457: PUSH
74458: LD_INT 4
74460: PUSH
74461: LD_INT 5
74463: PUSH
74464: LD_INT 6
74466: PUSH
74467: LD_INT 7
74469: PUSH
74470: LD_INT 8
74472: PUSH
74473: LD_INT 9
74475: PUSH
74476: LD_INT 10
74478: PUSH
74479: LD_INT 11
74481: PUSH
74482: LD_INT 12
74484: PUSH
74485: LD_INT 13
74487: PUSH
74488: LD_INT 14
74490: PUSH
74491: LD_INT 15
74493: PUSH
74494: LD_INT 16
74496: PUSH
74497: LD_INT 17
74499: PUSH
74500: LD_INT 18
74502: PUSH
74503: LD_INT 19
74505: PUSH
74506: LD_INT 20
74508: PUSH
74509: LD_INT 21
74511: PUSH
74512: LD_INT 22
74514: PUSH
74515: LD_INT 23
74517: PUSH
74518: LD_INT 24
74520: PUSH
74521: LD_INT 25
74523: PUSH
74524: LD_INT 26
74526: PUSH
74527: LD_INT 27
74529: PUSH
74530: LD_INT 28
74532: PUSH
74533: LD_INT 29
74535: PUSH
74536: LD_INT 30
74538: PUSH
74539: LD_INT 31
74541: PUSH
74542: LD_INT 32
74544: PUSH
74545: LD_INT 33
74547: PUSH
74548: LD_INT 34
74550: PUSH
74551: LD_INT 36
74553: PUSH
74554: EMPTY
74555: LIST
74556: LIST
74557: LIST
74558: LIST
74559: LIST
74560: LIST
74561: LIST
74562: LIST
74563: LIST
74564: LIST
74565: LIST
74566: LIST
74567: LIST
74568: LIST
74569: LIST
74570: LIST
74571: LIST
74572: LIST
74573: LIST
74574: LIST
74575: LIST
74576: LIST
74577: LIST
74578: LIST
74579: LIST
74580: LIST
74581: LIST
74582: LIST
74583: LIST
74584: LIST
74585: LIST
74586: LIST
74587: LIST
74588: LIST
74589: LIST
74590: PUSH
74591: LD_INT 101
74593: PUSH
74594: LD_INT 102
74596: PUSH
74597: LD_INT 103
74599: PUSH
74600: LD_INT 104
74602: PUSH
74603: LD_INT 105
74605: PUSH
74606: LD_INT 106
74608: PUSH
74609: LD_INT 107
74611: PUSH
74612: LD_INT 108
74614: PUSH
74615: LD_INT 109
74617: PUSH
74618: LD_INT 110
74620: PUSH
74621: LD_INT 111
74623: PUSH
74624: LD_INT 112
74626: PUSH
74627: LD_INT 113
74629: PUSH
74630: LD_INT 114
74632: PUSH
74633: LD_INT 116
74635: PUSH
74636: LD_INT 117
74638: PUSH
74639: LD_INT 118
74641: PUSH
74642: EMPTY
74643: LIST
74644: LIST
74645: LIST
74646: LIST
74647: LIST
74648: LIST
74649: LIST
74650: LIST
74651: LIST
74652: LIST
74653: LIST
74654: LIST
74655: LIST
74656: LIST
74657: LIST
74658: LIST
74659: LIST
74660: PUSH
74661: EMPTY
74662: LIST
74663: LIST
74664: ST_TO_ADDR
74665: GO 75672
74667: LD_INT 15
74669: DOUBLE
74670: EQUAL
74671: IFTRUE 74675
74673: GO 74899
74675: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
74676: LD_ADDR_VAR 0 2
74680: PUSH
74681: LD_INT 1
74683: PUSH
74684: LD_INT 2
74686: PUSH
74687: LD_INT 3
74689: PUSH
74690: LD_INT 4
74692: PUSH
74693: LD_INT 5
74695: PUSH
74696: LD_INT 6
74698: PUSH
74699: LD_INT 7
74701: PUSH
74702: LD_INT 8
74704: PUSH
74705: LD_INT 9
74707: PUSH
74708: LD_INT 10
74710: PUSH
74711: LD_INT 11
74713: PUSH
74714: LD_INT 12
74716: PUSH
74717: LD_INT 13
74719: PUSH
74720: LD_INT 14
74722: PUSH
74723: LD_INT 15
74725: PUSH
74726: LD_INT 16
74728: PUSH
74729: LD_INT 17
74731: PUSH
74732: LD_INT 18
74734: PUSH
74735: LD_INT 19
74737: PUSH
74738: LD_INT 20
74740: PUSH
74741: LD_INT 21
74743: PUSH
74744: LD_INT 22
74746: PUSH
74747: LD_INT 23
74749: PUSH
74750: LD_INT 24
74752: PUSH
74753: LD_INT 25
74755: PUSH
74756: LD_INT 26
74758: PUSH
74759: LD_INT 27
74761: PUSH
74762: LD_INT 28
74764: PUSH
74765: LD_INT 29
74767: PUSH
74768: LD_INT 30
74770: PUSH
74771: LD_INT 31
74773: PUSH
74774: LD_INT 32
74776: PUSH
74777: LD_INT 33
74779: PUSH
74780: LD_INT 34
74782: PUSH
74783: LD_INT 36
74785: PUSH
74786: EMPTY
74787: LIST
74788: LIST
74789: LIST
74790: LIST
74791: LIST
74792: LIST
74793: LIST
74794: LIST
74795: LIST
74796: LIST
74797: LIST
74798: LIST
74799: LIST
74800: LIST
74801: LIST
74802: LIST
74803: LIST
74804: LIST
74805: LIST
74806: LIST
74807: LIST
74808: LIST
74809: LIST
74810: LIST
74811: LIST
74812: LIST
74813: LIST
74814: LIST
74815: LIST
74816: LIST
74817: LIST
74818: LIST
74819: LIST
74820: LIST
74821: LIST
74822: PUSH
74823: LD_INT 101
74825: PUSH
74826: LD_INT 102
74828: PUSH
74829: LD_INT 103
74831: PUSH
74832: LD_INT 104
74834: PUSH
74835: LD_INT 105
74837: PUSH
74838: LD_INT 106
74840: PUSH
74841: LD_INT 107
74843: PUSH
74844: LD_INT 108
74846: PUSH
74847: LD_INT 109
74849: PUSH
74850: LD_INT 110
74852: PUSH
74853: LD_INT 111
74855: PUSH
74856: LD_INT 112
74858: PUSH
74859: LD_INT 113
74861: PUSH
74862: LD_INT 114
74864: PUSH
74865: LD_INT 116
74867: PUSH
74868: LD_INT 117
74870: PUSH
74871: LD_INT 118
74873: PUSH
74874: EMPTY
74875: LIST
74876: LIST
74877: LIST
74878: LIST
74879: LIST
74880: LIST
74881: LIST
74882: LIST
74883: LIST
74884: LIST
74885: LIST
74886: LIST
74887: LIST
74888: LIST
74889: LIST
74890: LIST
74891: LIST
74892: PUSH
74893: EMPTY
74894: LIST
74895: LIST
74896: ST_TO_ADDR
74897: GO 75672
74899: LD_INT 16
74901: DOUBLE
74902: EQUAL
74903: IFTRUE 74907
74905: GO 75043
74907: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
74908: LD_ADDR_VAR 0 2
74912: PUSH
74913: LD_INT 2
74915: PUSH
74916: LD_INT 4
74918: PUSH
74919: LD_INT 5
74921: PUSH
74922: LD_INT 7
74924: PUSH
74925: LD_INT 11
74927: PUSH
74928: LD_INT 12
74930: PUSH
74931: LD_INT 15
74933: PUSH
74934: LD_INT 16
74936: PUSH
74937: LD_INT 20
74939: PUSH
74940: LD_INT 21
74942: PUSH
74943: LD_INT 22
74945: PUSH
74946: LD_INT 23
74948: PUSH
74949: LD_INT 25
74951: PUSH
74952: LD_INT 26
74954: PUSH
74955: LD_INT 30
74957: PUSH
74958: LD_INT 31
74960: PUSH
74961: LD_INT 32
74963: PUSH
74964: LD_INT 33
74966: PUSH
74967: LD_INT 34
74969: PUSH
74970: EMPTY
74971: LIST
74972: LIST
74973: LIST
74974: LIST
74975: LIST
74976: LIST
74977: LIST
74978: LIST
74979: LIST
74980: LIST
74981: LIST
74982: LIST
74983: LIST
74984: LIST
74985: LIST
74986: LIST
74987: LIST
74988: LIST
74989: LIST
74990: PUSH
74991: LD_INT 101
74993: PUSH
74994: LD_INT 102
74996: PUSH
74997: LD_INT 103
74999: PUSH
75000: LD_INT 106
75002: PUSH
75003: LD_INT 108
75005: PUSH
75006: LD_INT 112
75008: PUSH
75009: LD_INT 113
75011: PUSH
75012: LD_INT 114
75014: PUSH
75015: LD_INT 116
75017: PUSH
75018: LD_INT 117
75020: PUSH
75021: LD_INT 118
75023: PUSH
75024: EMPTY
75025: LIST
75026: LIST
75027: LIST
75028: LIST
75029: LIST
75030: LIST
75031: LIST
75032: LIST
75033: LIST
75034: LIST
75035: LIST
75036: PUSH
75037: EMPTY
75038: LIST
75039: LIST
75040: ST_TO_ADDR
75041: GO 75672
75043: LD_INT 17
75045: DOUBLE
75046: EQUAL
75047: IFTRUE 75051
75049: GO 75275
75051: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
75052: LD_ADDR_VAR 0 2
75056: PUSH
75057: LD_INT 1
75059: PUSH
75060: LD_INT 2
75062: PUSH
75063: LD_INT 3
75065: PUSH
75066: LD_INT 4
75068: PUSH
75069: LD_INT 5
75071: PUSH
75072: LD_INT 6
75074: PUSH
75075: LD_INT 7
75077: PUSH
75078: LD_INT 8
75080: PUSH
75081: LD_INT 9
75083: PUSH
75084: LD_INT 10
75086: PUSH
75087: LD_INT 11
75089: PUSH
75090: LD_INT 12
75092: PUSH
75093: LD_INT 13
75095: PUSH
75096: LD_INT 14
75098: PUSH
75099: LD_INT 15
75101: PUSH
75102: LD_INT 16
75104: PUSH
75105: LD_INT 17
75107: PUSH
75108: LD_INT 18
75110: PUSH
75111: LD_INT 19
75113: PUSH
75114: LD_INT 20
75116: PUSH
75117: LD_INT 21
75119: PUSH
75120: LD_INT 22
75122: PUSH
75123: LD_INT 23
75125: PUSH
75126: LD_INT 24
75128: PUSH
75129: LD_INT 25
75131: PUSH
75132: LD_INT 26
75134: PUSH
75135: LD_INT 27
75137: PUSH
75138: LD_INT 28
75140: PUSH
75141: LD_INT 29
75143: PUSH
75144: LD_INT 30
75146: PUSH
75147: LD_INT 31
75149: PUSH
75150: LD_INT 32
75152: PUSH
75153: LD_INT 33
75155: PUSH
75156: LD_INT 34
75158: PUSH
75159: LD_INT 36
75161: PUSH
75162: EMPTY
75163: LIST
75164: LIST
75165: LIST
75166: LIST
75167: LIST
75168: LIST
75169: LIST
75170: LIST
75171: LIST
75172: LIST
75173: LIST
75174: LIST
75175: LIST
75176: LIST
75177: LIST
75178: LIST
75179: LIST
75180: LIST
75181: LIST
75182: LIST
75183: LIST
75184: LIST
75185: LIST
75186: LIST
75187: LIST
75188: LIST
75189: LIST
75190: LIST
75191: LIST
75192: LIST
75193: LIST
75194: LIST
75195: LIST
75196: LIST
75197: LIST
75198: PUSH
75199: LD_INT 101
75201: PUSH
75202: LD_INT 102
75204: PUSH
75205: LD_INT 103
75207: PUSH
75208: LD_INT 104
75210: PUSH
75211: LD_INT 105
75213: PUSH
75214: LD_INT 106
75216: PUSH
75217: LD_INT 107
75219: PUSH
75220: LD_INT 108
75222: PUSH
75223: LD_INT 109
75225: PUSH
75226: LD_INT 110
75228: PUSH
75229: LD_INT 111
75231: PUSH
75232: LD_INT 112
75234: PUSH
75235: LD_INT 113
75237: PUSH
75238: LD_INT 114
75240: PUSH
75241: LD_INT 116
75243: PUSH
75244: LD_INT 117
75246: PUSH
75247: LD_INT 118
75249: PUSH
75250: EMPTY
75251: LIST
75252: LIST
75253: LIST
75254: LIST
75255: LIST
75256: LIST
75257: LIST
75258: LIST
75259: LIST
75260: LIST
75261: LIST
75262: LIST
75263: LIST
75264: LIST
75265: LIST
75266: LIST
75267: LIST
75268: PUSH
75269: EMPTY
75270: LIST
75271: LIST
75272: ST_TO_ADDR
75273: GO 75672
75275: LD_INT 18
75277: DOUBLE
75278: EQUAL
75279: IFTRUE 75283
75281: GO 75431
75283: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
75284: LD_ADDR_VAR 0 2
75288: PUSH
75289: LD_INT 2
75291: PUSH
75292: LD_INT 4
75294: PUSH
75295: LD_INT 5
75297: PUSH
75298: LD_INT 7
75300: PUSH
75301: LD_INT 11
75303: PUSH
75304: LD_INT 12
75306: PUSH
75307: LD_INT 15
75309: PUSH
75310: LD_INT 16
75312: PUSH
75313: LD_INT 20
75315: PUSH
75316: LD_INT 21
75318: PUSH
75319: LD_INT 22
75321: PUSH
75322: LD_INT 23
75324: PUSH
75325: LD_INT 25
75327: PUSH
75328: LD_INT 26
75330: PUSH
75331: LD_INT 30
75333: PUSH
75334: LD_INT 31
75336: PUSH
75337: LD_INT 32
75339: PUSH
75340: LD_INT 33
75342: PUSH
75343: LD_INT 34
75345: PUSH
75346: LD_INT 35
75348: PUSH
75349: LD_INT 36
75351: PUSH
75352: EMPTY
75353: LIST
75354: LIST
75355: LIST
75356: LIST
75357: LIST
75358: LIST
75359: LIST
75360: LIST
75361: LIST
75362: LIST
75363: LIST
75364: LIST
75365: LIST
75366: LIST
75367: LIST
75368: LIST
75369: LIST
75370: LIST
75371: LIST
75372: LIST
75373: LIST
75374: PUSH
75375: LD_INT 101
75377: PUSH
75378: LD_INT 102
75380: PUSH
75381: LD_INT 103
75383: PUSH
75384: LD_INT 106
75386: PUSH
75387: LD_INT 108
75389: PUSH
75390: LD_INT 112
75392: PUSH
75393: LD_INT 113
75395: PUSH
75396: LD_INT 114
75398: PUSH
75399: LD_INT 115
75401: PUSH
75402: LD_INT 116
75404: PUSH
75405: LD_INT 117
75407: PUSH
75408: LD_INT 118
75410: PUSH
75411: EMPTY
75412: LIST
75413: LIST
75414: LIST
75415: LIST
75416: LIST
75417: LIST
75418: LIST
75419: LIST
75420: LIST
75421: LIST
75422: LIST
75423: LIST
75424: PUSH
75425: EMPTY
75426: LIST
75427: LIST
75428: ST_TO_ADDR
75429: GO 75672
75431: LD_INT 19
75433: DOUBLE
75434: EQUAL
75435: IFTRUE 75439
75437: GO 75671
75439: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
75440: LD_ADDR_VAR 0 2
75444: PUSH
75445: LD_INT 1
75447: PUSH
75448: LD_INT 2
75450: PUSH
75451: LD_INT 3
75453: PUSH
75454: LD_INT 4
75456: PUSH
75457: LD_INT 5
75459: PUSH
75460: LD_INT 6
75462: PUSH
75463: LD_INT 7
75465: PUSH
75466: LD_INT 8
75468: PUSH
75469: LD_INT 9
75471: PUSH
75472: LD_INT 10
75474: PUSH
75475: LD_INT 11
75477: PUSH
75478: LD_INT 12
75480: PUSH
75481: LD_INT 13
75483: PUSH
75484: LD_INT 14
75486: PUSH
75487: LD_INT 15
75489: PUSH
75490: LD_INT 16
75492: PUSH
75493: LD_INT 17
75495: PUSH
75496: LD_INT 18
75498: PUSH
75499: LD_INT 19
75501: PUSH
75502: LD_INT 20
75504: PUSH
75505: LD_INT 21
75507: PUSH
75508: LD_INT 22
75510: PUSH
75511: LD_INT 23
75513: PUSH
75514: LD_INT 24
75516: PUSH
75517: LD_INT 25
75519: PUSH
75520: LD_INT 26
75522: PUSH
75523: LD_INT 27
75525: PUSH
75526: LD_INT 28
75528: PUSH
75529: LD_INT 29
75531: PUSH
75532: LD_INT 30
75534: PUSH
75535: LD_INT 31
75537: PUSH
75538: LD_INT 32
75540: PUSH
75541: LD_INT 33
75543: PUSH
75544: LD_INT 34
75546: PUSH
75547: LD_INT 35
75549: PUSH
75550: LD_INT 36
75552: PUSH
75553: EMPTY
75554: LIST
75555: LIST
75556: LIST
75557: LIST
75558: LIST
75559: LIST
75560: LIST
75561: LIST
75562: LIST
75563: LIST
75564: LIST
75565: LIST
75566: LIST
75567: LIST
75568: LIST
75569: LIST
75570: LIST
75571: LIST
75572: LIST
75573: LIST
75574: LIST
75575: LIST
75576: LIST
75577: LIST
75578: LIST
75579: LIST
75580: LIST
75581: LIST
75582: LIST
75583: LIST
75584: LIST
75585: LIST
75586: LIST
75587: LIST
75588: LIST
75589: LIST
75590: PUSH
75591: LD_INT 101
75593: PUSH
75594: LD_INT 102
75596: PUSH
75597: LD_INT 103
75599: PUSH
75600: LD_INT 104
75602: PUSH
75603: LD_INT 105
75605: PUSH
75606: LD_INT 106
75608: PUSH
75609: LD_INT 107
75611: PUSH
75612: LD_INT 108
75614: PUSH
75615: LD_INT 109
75617: PUSH
75618: LD_INT 110
75620: PUSH
75621: LD_INT 111
75623: PUSH
75624: LD_INT 112
75626: PUSH
75627: LD_INT 113
75629: PUSH
75630: LD_INT 114
75632: PUSH
75633: LD_INT 115
75635: PUSH
75636: LD_INT 116
75638: PUSH
75639: LD_INT 117
75641: PUSH
75642: LD_INT 118
75644: PUSH
75645: EMPTY
75646: LIST
75647: LIST
75648: LIST
75649: LIST
75650: LIST
75651: LIST
75652: LIST
75653: LIST
75654: LIST
75655: LIST
75656: LIST
75657: LIST
75658: LIST
75659: LIST
75660: LIST
75661: LIST
75662: LIST
75663: LIST
75664: PUSH
75665: EMPTY
75666: LIST
75667: LIST
75668: ST_TO_ADDR
75669: GO 75672
75671: POP
// end else
75672: GO 75903
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
75674: LD_ADDR_VAR 0 2
75678: PUSH
75679: LD_INT 1
75681: PUSH
75682: LD_INT 2
75684: PUSH
75685: LD_INT 3
75687: PUSH
75688: LD_INT 4
75690: PUSH
75691: LD_INT 5
75693: PUSH
75694: LD_INT 6
75696: PUSH
75697: LD_INT 7
75699: PUSH
75700: LD_INT 8
75702: PUSH
75703: LD_INT 9
75705: PUSH
75706: LD_INT 10
75708: PUSH
75709: LD_INT 11
75711: PUSH
75712: LD_INT 12
75714: PUSH
75715: LD_INT 13
75717: PUSH
75718: LD_INT 14
75720: PUSH
75721: LD_INT 15
75723: PUSH
75724: LD_INT 16
75726: PUSH
75727: LD_INT 17
75729: PUSH
75730: LD_INT 18
75732: PUSH
75733: LD_INT 19
75735: PUSH
75736: LD_INT 20
75738: PUSH
75739: LD_INT 21
75741: PUSH
75742: LD_INT 22
75744: PUSH
75745: LD_INT 23
75747: PUSH
75748: LD_INT 24
75750: PUSH
75751: LD_INT 25
75753: PUSH
75754: LD_INT 26
75756: PUSH
75757: LD_INT 27
75759: PUSH
75760: LD_INT 28
75762: PUSH
75763: LD_INT 29
75765: PUSH
75766: LD_INT 30
75768: PUSH
75769: LD_INT 31
75771: PUSH
75772: LD_INT 32
75774: PUSH
75775: LD_INT 33
75777: PUSH
75778: LD_INT 34
75780: PUSH
75781: LD_INT 35
75783: PUSH
75784: LD_INT 36
75786: PUSH
75787: EMPTY
75788: LIST
75789: LIST
75790: LIST
75791: LIST
75792: LIST
75793: LIST
75794: LIST
75795: LIST
75796: LIST
75797: LIST
75798: LIST
75799: LIST
75800: LIST
75801: LIST
75802: LIST
75803: LIST
75804: LIST
75805: LIST
75806: LIST
75807: LIST
75808: LIST
75809: LIST
75810: LIST
75811: LIST
75812: LIST
75813: LIST
75814: LIST
75815: LIST
75816: LIST
75817: LIST
75818: LIST
75819: LIST
75820: LIST
75821: LIST
75822: LIST
75823: LIST
75824: PUSH
75825: LD_INT 101
75827: PUSH
75828: LD_INT 102
75830: PUSH
75831: LD_INT 103
75833: PUSH
75834: LD_INT 104
75836: PUSH
75837: LD_INT 105
75839: PUSH
75840: LD_INT 106
75842: PUSH
75843: LD_INT 107
75845: PUSH
75846: LD_INT 108
75848: PUSH
75849: LD_INT 109
75851: PUSH
75852: LD_INT 110
75854: PUSH
75855: LD_INT 111
75857: PUSH
75858: LD_INT 112
75860: PUSH
75861: LD_INT 113
75863: PUSH
75864: LD_INT 114
75866: PUSH
75867: LD_INT 115
75869: PUSH
75870: LD_INT 116
75872: PUSH
75873: LD_INT 117
75875: PUSH
75876: LD_INT 118
75878: PUSH
75879: EMPTY
75880: LIST
75881: LIST
75882: LIST
75883: LIST
75884: LIST
75885: LIST
75886: LIST
75887: LIST
75888: LIST
75889: LIST
75890: LIST
75891: LIST
75892: LIST
75893: LIST
75894: LIST
75895: LIST
75896: LIST
75897: LIST
75898: PUSH
75899: EMPTY
75900: LIST
75901: LIST
75902: ST_TO_ADDR
// if result then
75903: LD_VAR 0 2
75907: IFFALSE 76693
// begin normal :=  ;
75909: LD_ADDR_VAR 0 5
75913: PUSH
75914: LD_STRING 
75916: ST_TO_ADDR
// hardcore :=  ;
75917: LD_ADDR_VAR 0 6
75921: PUSH
75922: LD_STRING 
75924: ST_TO_ADDR
// active :=  ;
75925: LD_ADDR_VAR 0 7
75929: PUSH
75930: LD_STRING 
75932: ST_TO_ADDR
// for i = 1 to normalCounter do
75933: LD_ADDR_VAR 0 8
75937: PUSH
75938: DOUBLE
75939: LD_INT 1
75941: DEC
75942: ST_TO_ADDR
75943: LD_EXP 65
75947: PUSH
75948: FOR_TO
75949: IFFALSE 76050
// begin tmp := 0 ;
75951: LD_ADDR_VAR 0 3
75955: PUSH
75956: LD_STRING 0
75958: ST_TO_ADDR
// if result [ 1 ] then
75959: LD_VAR 0 2
75963: PUSH
75964: LD_INT 1
75966: ARRAY
75967: IFFALSE 76032
// if result [ 1 ] [ 1 ] = i then
75969: LD_VAR 0 2
75973: PUSH
75974: LD_INT 1
75976: ARRAY
75977: PUSH
75978: LD_INT 1
75980: ARRAY
75981: PUSH
75982: LD_VAR 0 8
75986: EQUAL
75987: IFFALSE 76032
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
75989: LD_ADDR_VAR 0 2
75993: PUSH
75994: LD_VAR 0 2
75998: PPUSH
75999: LD_INT 1
76001: PPUSH
76002: LD_VAR 0 2
76006: PUSH
76007: LD_INT 1
76009: ARRAY
76010: PPUSH
76011: LD_INT 1
76013: PPUSH
76014: CALL_OW 3
76018: PPUSH
76019: CALL_OW 1
76023: ST_TO_ADDR
// tmp := 1 ;
76024: LD_ADDR_VAR 0 3
76028: PUSH
76029: LD_STRING 1
76031: ST_TO_ADDR
// end ; normal := normal & tmp ;
76032: LD_ADDR_VAR 0 5
76036: PUSH
76037: LD_VAR 0 5
76041: PUSH
76042: LD_VAR 0 3
76046: STR
76047: ST_TO_ADDR
// end ;
76048: GO 75948
76050: POP
76051: POP
// for i = 1 to hardcoreCounter do
76052: LD_ADDR_VAR 0 8
76056: PUSH
76057: DOUBLE
76058: LD_INT 1
76060: DEC
76061: ST_TO_ADDR
76062: LD_EXP 66
76066: PUSH
76067: FOR_TO
76068: IFFALSE 76173
// begin tmp := 0 ;
76070: LD_ADDR_VAR 0 3
76074: PUSH
76075: LD_STRING 0
76077: ST_TO_ADDR
// if result [ 2 ] then
76078: LD_VAR 0 2
76082: PUSH
76083: LD_INT 2
76085: ARRAY
76086: IFFALSE 76155
// if result [ 2 ] [ 1 ] = 100 + i then
76088: LD_VAR 0 2
76092: PUSH
76093: LD_INT 2
76095: ARRAY
76096: PUSH
76097: LD_INT 1
76099: ARRAY
76100: PUSH
76101: LD_INT 100
76103: PUSH
76104: LD_VAR 0 8
76108: PLUS
76109: EQUAL
76110: IFFALSE 76155
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
76112: LD_ADDR_VAR 0 2
76116: PUSH
76117: LD_VAR 0 2
76121: PPUSH
76122: LD_INT 2
76124: PPUSH
76125: LD_VAR 0 2
76129: PUSH
76130: LD_INT 2
76132: ARRAY
76133: PPUSH
76134: LD_INT 1
76136: PPUSH
76137: CALL_OW 3
76141: PPUSH
76142: CALL_OW 1
76146: ST_TO_ADDR
// tmp := 1 ;
76147: LD_ADDR_VAR 0 3
76151: PUSH
76152: LD_STRING 1
76154: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
76155: LD_ADDR_VAR 0 6
76159: PUSH
76160: LD_VAR 0 6
76164: PUSH
76165: LD_VAR 0 3
76169: STR
76170: ST_TO_ADDR
// end ;
76171: GO 76067
76173: POP
76174: POP
// if isGameLoad then
76175: LD_VAR 0 1
76179: IFFALSE 76654
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
76181: LD_ADDR_VAR 0 4
76185: PUSH
76186: LD_EXP 69
76190: PUSH
76191: LD_EXP 68
76195: PUSH
76196: LD_EXP 70
76200: PUSH
76201: LD_EXP 67
76205: PUSH
76206: LD_EXP 71
76210: PUSH
76211: LD_EXP 72
76215: PUSH
76216: LD_EXP 73
76220: PUSH
76221: LD_EXP 74
76225: PUSH
76226: LD_EXP 75
76230: PUSH
76231: LD_EXP 76
76235: PUSH
76236: LD_EXP 77
76240: PUSH
76241: LD_EXP 78
76245: PUSH
76246: LD_EXP 79
76250: PUSH
76251: LD_EXP 80
76255: PUSH
76256: LD_EXP 88
76260: PUSH
76261: LD_EXP 89
76265: PUSH
76266: LD_EXP 90
76270: PUSH
76271: LD_EXP 91
76275: PUSH
76276: LD_EXP 93
76280: PUSH
76281: LD_EXP 94
76285: PUSH
76286: LD_EXP 95
76290: PUSH
76291: LD_EXP 98
76295: PUSH
76296: LD_EXP 100
76300: PUSH
76301: LD_EXP 101
76305: PUSH
76306: LD_EXP 102
76310: PUSH
76311: LD_EXP 104
76315: PUSH
76316: LD_EXP 105
76320: PUSH
76321: LD_EXP 108
76325: PUSH
76326: LD_EXP 109
76330: PUSH
76331: LD_EXP 110
76335: PUSH
76336: LD_EXP 111
76340: PUSH
76341: LD_EXP 112
76345: PUSH
76346: LD_EXP 113
76350: PUSH
76351: LD_EXP 114
76355: PUSH
76356: LD_EXP 115
76360: PUSH
76361: LD_EXP 116
76365: PUSH
76366: LD_EXP 81
76370: PUSH
76371: LD_EXP 82
76375: PUSH
76376: LD_EXP 85
76380: PUSH
76381: LD_EXP 86
76385: PUSH
76386: LD_EXP 87
76390: PUSH
76391: LD_EXP 83
76395: PUSH
76396: LD_EXP 84
76400: PUSH
76401: LD_EXP 92
76405: PUSH
76406: LD_EXP 96
76410: PUSH
76411: LD_EXP 97
76415: PUSH
76416: LD_EXP 99
76420: PUSH
76421: LD_EXP 103
76425: PUSH
76426: LD_EXP 106
76430: PUSH
76431: LD_EXP 107
76435: PUSH
76436: LD_EXP 117
76440: PUSH
76441: LD_EXP 118
76445: PUSH
76446: LD_EXP 119
76450: PUSH
76451: LD_EXP 120
76455: PUSH
76456: EMPTY
76457: LIST
76458: LIST
76459: LIST
76460: LIST
76461: LIST
76462: LIST
76463: LIST
76464: LIST
76465: LIST
76466: LIST
76467: LIST
76468: LIST
76469: LIST
76470: LIST
76471: LIST
76472: LIST
76473: LIST
76474: LIST
76475: LIST
76476: LIST
76477: LIST
76478: LIST
76479: LIST
76480: LIST
76481: LIST
76482: LIST
76483: LIST
76484: LIST
76485: LIST
76486: LIST
76487: LIST
76488: LIST
76489: LIST
76490: LIST
76491: LIST
76492: LIST
76493: LIST
76494: LIST
76495: LIST
76496: LIST
76497: LIST
76498: LIST
76499: LIST
76500: LIST
76501: LIST
76502: LIST
76503: LIST
76504: LIST
76505: LIST
76506: LIST
76507: LIST
76508: LIST
76509: LIST
76510: LIST
76511: ST_TO_ADDR
// tmp :=  ;
76512: LD_ADDR_VAR 0 3
76516: PUSH
76517: LD_STRING 
76519: ST_TO_ADDR
// for i = 1 to normalCounter do
76520: LD_ADDR_VAR 0 8
76524: PUSH
76525: DOUBLE
76526: LD_INT 1
76528: DEC
76529: ST_TO_ADDR
76530: LD_EXP 65
76534: PUSH
76535: FOR_TO
76536: IFFALSE 76572
// begin if flags [ i ] then
76538: LD_VAR 0 4
76542: PUSH
76543: LD_VAR 0 8
76547: ARRAY
76548: IFFALSE 76570
// tmp := tmp & i & ; ;
76550: LD_ADDR_VAR 0 3
76554: PUSH
76555: LD_VAR 0 3
76559: PUSH
76560: LD_VAR 0 8
76564: STR
76565: PUSH
76566: LD_STRING ;
76568: STR
76569: ST_TO_ADDR
// end ;
76570: GO 76535
76572: POP
76573: POP
// for i = 1 to hardcoreCounter do
76574: LD_ADDR_VAR 0 8
76578: PUSH
76579: DOUBLE
76580: LD_INT 1
76582: DEC
76583: ST_TO_ADDR
76584: LD_EXP 66
76588: PUSH
76589: FOR_TO
76590: IFFALSE 76636
// begin if flags [ normalCounter + i ] then
76592: LD_VAR 0 4
76596: PUSH
76597: LD_EXP 65
76601: PUSH
76602: LD_VAR 0 8
76606: PLUS
76607: ARRAY
76608: IFFALSE 76634
// tmp := tmp & ( 100 + i ) & ; ;
76610: LD_ADDR_VAR 0 3
76614: PUSH
76615: LD_VAR 0 3
76619: PUSH
76620: LD_INT 100
76622: PUSH
76623: LD_VAR 0 8
76627: PLUS
76628: STR
76629: PUSH
76630: LD_STRING ;
76632: STR
76633: ST_TO_ADDR
// end ;
76634: GO 76589
76636: POP
76637: POP
// if tmp then
76638: LD_VAR 0 3
76642: IFFALSE 76654
// active := tmp ;
76644: LD_ADDR_VAR 0 7
76648: PUSH
76649: LD_VAR 0 3
76653: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
76654: LD_STRING getStreamItemsFromMission("
76656: PUSH
76657: LD_VAR 0 5
76661: STR
76662: PUSH
76663: LD_STRING ","
76665: STR
76666: PUSH
76667: LD_VAR 0 6
76671: STR
76672: PUSH
76673: LD_STRING ","
76675: STR
76676: PUSH
76677: LD_VAR 0 7
76681: STR
76682: PUSH
76683: LD_STRING ")
76685: STR
76686: PPUSH
76687: CALL_OW 559
// end else
76691: GO 76700
// ToLua ( getStreamItemsFromMission("","","") ) ;
76693: LD_STRING getStreamItemsFromMission("","","")
76695: PPUSH
76696: CALL_OW 559
// end ;
76700: LD_VAR 0 2
76704: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
76705: LD_EXP 64
76709: PUSH
76710: LD_EXP 69
76714: AND
76715: IFFALSE 76839
76717: GO 76719
76719: DISABLE
76720: LD_INT 0
76722: PPUSH
76723: PPUSH
// begin enable ;
76724: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
76725: LD_ADDR_VAR 0 2
76729: PUSH
76730: LD_INT 22
76732: PUSH
76733: LD_OWVAR 2
76737: PUSH
76738: EMPTY
76739: LIST
76740: LIST
76741: PUSH
76742: LD_INT 2
76744: PUSH
76745: LD_INT 34
76747: PUSH
76748: LD_INT 7
76750: PUSH
76751: EMPTY
76752: LIST
76753: LIST
76754: PUSH
76755: LD_INT 34
76757: PUSH
76758: LD_INT 45
76760: PUSH
76761: EMPTY
76762: LIST
76763: LIST
76764: PUSH
76765: LD_INT 34
76767: PUSH
76768: LD_INT 28
76770: PUSH
76771: EMPTY
76772: LIST
76773: LIST
76774: PUSH
76775: LD_INT 34
76777: PUSH
76778: LD_INT 47
76780: PUSH
76781: EMPTY
76782: LIST
76783: LIST
76784: PUSH
76785: EMPTY
76786: LIST
76787: LIST
76788: LIST
76789: LIST
76790: LIST
76791: PUSH
76792: EMPTY
76793: LIST
76794: LIST
76795: PPUSH
76796: CALL_OW 69
76800: ST_TO_ADDR
// if not tmp then
76801: LD_VAR 0 2
76805: NOT
76806: IFFALSE 76810
// exit ;
76808: GO 76839
// for i in tmp do
76810: LD_ADDR_VAR 0 1
76814: PUSH
76815: LD_VAR 0 2
76819: PUSH
76820: FOR_IN
76821: IFFALSE 76837
// begin SetLives ( i , 0 ) ;
76823: LD_VAR 0 1
76827: PPUSH
76828: LD_INT 0
76830: PPUSH
76831: CALL_OW 234
// end ;
76835: GO 76820
76837: POP
76838: POP
// end ;
76839: PPOPN 2
76841: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
76842: LD_EXP 64
76846: PUSH
76847: LD_EXP 70
76851: AND
76852: IFFALSE 76936
76854: GO 76856
76856: DISABLE
76857: LD_INT 0
76859: PPUSH
76860: PPUSH
// begin enable ;
76861: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
76862: LD_ADDR_VAR 0 2
76866: PUSH
76867: LD_INT 22
76869: PUSH
76870: LD_OWVAR 2
76874: PUSH
76875: EMPTY
76876: LIST
76877: LIST
76878: PUSH
76879: LD_INT 32
76881: PUSH
76882: LD_INT 3
76884: PUSH
76885: EMPTY
76886: LIST
76887: LIST
76888: PUSH
76889: EMPTY
76890: LIST
76891: LIST
76892: PPUSH
76893: CALL_OW 69
76897: ST_TO_ADDR
// if not tmp then
76898: LD_VAR 0 2
76902: NOT
76903: IFFALSE 76907
// exit ;
76905: GO 76936
// for i in tmp do
76907: LD_ADDR_VAR 0 1
76911: PUSH
76912: LD_VAR 0 2
76916: PUSH
76917: FOR_IN
76918: IFFALSE 76934
// begin SetLives ( i , 0 ) ;
76920: LD_VAR 0 1
76924: PPUSH
76925: LD_INT 0
76927: PPUSH
76928: CALL_OW 234
// end ;
76932: GO 76917
76934: POP
76935: POP
// end ;
76936: PPOPN 2
76938: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
76939: LD_EXP 64
76943: PUSH
76944: LD_EXP 67
76948: AND
76949: IFFALSE 77042
76951: GO 76953
76953: DISABLE
76954: LD_INT 0
76956: PPUSH
// begin enable ;
76957: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
76958: LD_ADDR_VAR 0 1
76962: PUSH
76963: LD_INT 22
76965: PUSH
76966: LD_OWVAR 2
76970: PUSH
76971: EMPTY
76972: LIST
76973: LIST
76974: PUSH
76975: LD_INT 2
76977: PUSH
76978: LD_INT 25
76980: PUSH
76981: LD_INT 5
76983: PUSH
76984: EMPTY
76985: LIST
76986: LIST
76987: PUSH
76988: LD_INT 25
76990: PUSH
76991: LD_INT 9
76993: PUSH
76994: EMPTY
76995: LIST
76996: LIST
76997: PUSH
76998: LD_INT 25
77000: PUSH
77001: LD_INT 8
77003: PUSH
77004: EMPTY
77005: LIST
77006: LIST
77007: PUSH
77008: EMPTY
77009: LIST
77010: LIST
77011: LIST
77012: LIST
77013: PUSH
77014: EMPTY
77015: LIST
77016: LIST
77017: PPUSH
77018: CALL_OW 69
77022: PUSH
77023: FOR_IN
77024: IFFALSE 77040
// begin SetClass ( i , 1 ) ;
77026: LD_VAR 0 1
77030: PPUSH
77031: LD_INT 1
77033: PPUSH
77034: CALL_OW 336
// end ;
77038: GO 77023
77040: POP
77041: POP
// end ;
77042: PPOPN 1
77044: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
77045: LD_EXP 64
77049: PUSH
77050: LD_EXP 68
77054: AND
77055: PUSH
77056: LD_OWVAR 65
77060: PUSH
77061: LD_INT 7
77063: LESS
77064: AND
77065: IFFALSE 77079
77067: GO 77069
77069: DISABLE
// begin enable ;
77070: ENABLE
// game_speed := 7 ;
77071: LD_ADDR_OWVAR 65
77075: PUSH
77076: LD_INT 7
77078: ST_TO_ADDR
// end ;
77079: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
77080: LD_EXP 64
77084: PUSH
77085: LD_EXP 71
77089: AND
77090: IFFALSE 77292
77092: GO 77094
77094: DISABLE
77095: LD_INT 0
77097: PPUSH
77098: PPUSH
77099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
77100: LD_ADDR_VAR 0 3
77104: PUSH
77105: LD_INT 81
77107: PUSH
77108: LD_OWVAR 2
77112: PUSH
77113: EMPTY
77114: LIST
77115: LIST
77116: PUSH
77117: LD_INT 21
77119: PUSH
77120: LD_INT 1
77122: PUSH
77123: EMPTY
77124: LIST
77125: LIST
77126: PUSH
77127: EMPTY
77128: LIST
77129: LIST
77130: PPUSH
77131: CALL_OW 69
77135: ST_TO_ADDR
// if not tmp then
77136: LD_VAR 0 3
77140: NOT
77141: IFFALSE 77145
// exit ;
77143: GO 77292
// if tmp > 5 then
77145: LD_VAR 0 3
77149: PUSH
77150: LD_INT 5
77152: GREATER
77153: IFFALSE 77165
// k := 5 else
77155: LD_ADDR_VAR 0 2
77159: PUSH
77160: LD_INT 5
77162: ST_TO_ADDR
77163: GO 77175
// k := tmp ;
77165: LD_ADDR_VAR 0 2
77169: PUSH
77170: LD_VAR 0 3
77174: ST_TO_ADDR
// for i := 1 to k do
77175: LD_ADDR_VAR 0 1
77179: PUSH
77180: DOUBLE
77181: LD_INT 1
77183: DEC
77184: ST_TO_ADDR
77185: LD_VAR 0 2
77189: PUSH
77190: FOR_TO
77191: IFFALSE 77290
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
77193: LD_VAR 0 3
77197: PUSH
77198: LD_VAR 0 1
77202: ARRAY
77203: PPUSH
77204: LD_VAR 0 1
77208: PUSH
77209: LD_INT 4
77211: MOD
77212: PUSH
77213: LD_INT 1
77215: PLUS
77216: PPUSH
77217: CALL_OW 259
77221: PUSH
77222: LD_INT 10
77224: LESS
77225: IFFALSE 77288
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
77227: LD_VAR 0 3
77231: PUSH
77232: LD_VAR 0 1
77236: ARRAY
77237: PPUSH
77238: LD_VAR 0 1
77242: PUSH
77243: LD_INT 4
77245: MOD
77246: PUSH
77247: LD_INT 1
77249: PLUS
77250: PPUSH
77251: LD_VAR 0 3
77255: PUSH
77256: LD_VAR 0 1
77260: ARRAY
77261: PPUSH
77262: LD_VAR 0 1
77266: PUSH
77267: LD_INT 4
77269: MOD
77270: PUSH
77271: LD_INT 1
77273: PLUS
77274: PPUSH
77275: CALL_OW 259
77279: PUSH
77280: LD_INT 1
77282: PLUS
77283: PPUSH
77284: CALL_OW 237
77288: GO 77190
77290: POP
77291: POP
// end ;
77292: PPOPN 3
77294: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
77295: LD_EXP 64
77299: PUSH
77300: LD_EXP 72
77304: AND
77305: IFFALSE 77325
77307: GO 77309
77309: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
77310: LD_INT 4
77312: PPUSH
77313: LD_OWVAR 2
77317: PPUSH
77318: LD_INT 0
77320: PPUSH
77321: CALL_OW 324
77325: END
// every 0 0$1 trigger StreamModeActive and sShovel do
77326: LD_EXP 64
77330: PUSH
77331: LD_EXP 101
77335: AND
77336: IFFALSE 77356
77338: GO 77340
77340: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
77341: LD_INT 19
77343: PPUSH
77344: LD_OWVAR 2
77348: PPUSH
77349: LD_INT 0
77351: PPUSH
77352: CALL_OW 324
77356: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
77357: LD_EXP 64
77361: PUSH
77362: LD_EXP 73
77366: AND
77367: IFFALSE 77469
77369: GO 77371
77371: DISABLE
77372: LD_INT 0
77374: PPUSH
77375: PPUSH
// begin enable ;
77376: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
77377: LD_ADDR_VAR 0 2
77381: PUSH
77382: LD_INT 22
77384: PUSH
77385: LD_OWVAR 2
77389: PUSH
77390: EMPTY
77391: LIST
77392: LIST
77393: PUSH
77394: LD_INT 2
77396: PUSH
77397: LD_INT 34
77399: PUSH
77400: LD_INT 11
77402: PUSH
77403: EMPTY
77404: LIST
77405: LIST
77406: PUSH
77407: LD_INT 34
77409: PUSH
77410: LD_INT 30
77412: PUSH
77413: EMPTY
77414: LIST
77415: LIST
77416: PUSH
77417: EMPTY
77418: LIST
77419: LIST
77420: LIST
77421: PUSH
77422: EMPTY
77423: LIST
77424: LIST
77425: PPUSH
77426: CALL_OW 69
77430: ST_TO_ADDR
// if not tmp then
77431: LD_VAR 0 2
77435: NOT
77436: IFFALSE 77440
// exit ;
77438: GO 77469
// for i in tmp do
77440: LD_ADDR_VAR 0 1
77444: PUSH
77445: LD_VAR 0 2
77449: PUSH
77450: FOR_IN
77451: IFFALSE 77467
// begin SetLives ( i , 0 ) ;
77453: LD_VAR 0 1
77457: PPUSH
77458: LD_INT 0
77460: PPUSH
77461: CALL_OW 234
// end ;
77465: GO 77450
77467: POP
77468: POP
// end ;
77469: PPOPN 2
77471: END
// every 0 0$1 trigger StreamModeActive and sBunker do
77472: LD_EXP 64
77476: PUSH
77477: LD_EXP 74
77481: AND
77482: IFFALSE 77502
77484: GO 77486
77486: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
77487: LD_INT 32
77489: PPUSH
77490: LD_OWVAR 2
77494: PPUSH
77495: LD_INT 0
77497: PPUSH
77498: CALL_OW 324
77502: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
77503: LD_EXP 64
77507: PUSH
77508: LD_EXP 75
77512: AND
77513: IFFALSE 77694
77515: GO 77517
77517: DISABLE
77518: LD_INT 0
77520: PPUSH
77521: PPUSH
77522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
77523: LD_ADDR_VAR 0 2
77527: PUSH
77528: LD_INT 22
77530: PUSH
77531: LD_OWVAR 2
77535: PUSH
77536: EMPTY
77537: LIST
77538: LIST
77539: PUSH
77540: LD_INT 33
77542: PUSH
77543: LD_INT 3
77545: PUSH
77546: EMPTY
77547: LIST
77548: LIST
77549: PUSH
77550: EMPTY
77551: LIST
77552: LIST
77553: PPUSH
77554: CALL_OW 69
77558: ST_TO_ADDR
// if not tmp then
77559: LD_VAR 0 2
77563: NOT
77564: IFFALSE 77568
// exit ;
77566: GO 77694
// side := 0 ;
77568: LD_ADDR_VAR 0 3
77572: PUSH
77573: LD_INT 0
77575: ST_TO_ADDR
// for i := 1 to 8 do
77576: LD_ADDR_VAR 0 1
77580: PUSH
77581: DOUBLE
77582: LD_INT 1
77584: DEC
77585: ST_TO_ADDR
77586: LD_INT 8
77588: PUSH
77589: FOR_TO
77590: IFFALSE 77638
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
77592: LD_OWVAR 2
77596: PUSH
77597: LD_VAR 0 1
77601: NONEQUAL
77602: PUSH
77603: LD_OWVAR 2
77607: PPUSH
77608: LD_VAR 0 1
77612: PPUSH
77613: CALL_OW 81
77617: PUSH
77618: LD_INT 2
77620: EQUAL
77621: AND
77622: IFFALSE 77636
// begin side := i ;
77624: LD_ADDR_VAR 0 3
77628: PUSH
77629: LD_VAR 0 1
77633: ST_TO_ADDR
// break ;
77634: GO 77638
// end ;
77636: GO 77589
77638: POP
77639: POP
// if not side then
77640: LD_VAR 0 3
77644: NOT
77645: IFFALSE 77649
// exit ;
77647: GO 77694
// for i := 1 to tmp do
77649: LD_ADDR_VAR 0 1
77653: PUSH
77654: DOUBLE
77655: LD_INT 1
77657: DEC
77658: ST_TO_ADDR
77659: LD_VAR 0 2
77663: PUSH
77664: FOR_TO
77665: IFFALSE 77692
// if Prob ( 60 ) then
77667: LD_INT 60
77669: PPUSH
77670: CALL_OW 13
77674: IFFALSE 77690
// SetSide ( i , side ) ;
77676: LD_VAR 0 1
77680: PPUSH
77681: LD_VAR 0 3
77685: PPUSH
77686: CALL_OW 235
77690: GO 77664
77692: POP
77693: POP
// end ;
77694: PPOPN 3
77696: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
77697: LD_EXP 64
77701: PUSH
77702: LD_EXP 77
77706: AND
77707: IFFALSE 77826
77709: GO 77711
77711: DISABLE
77712: LD_INT 0
77714: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
77715: LD_ADDR_VAR 0 1
77719: PUSH
77720: LD_INT 22
77722: PUSH
77723: LD_OWVAR 2
77727: PUSH
77728: EMPTY
77729: LIST
77730: LIST
77731: PUSH
77732: LD_INT 21
77734: PUSH
77735: LD_INT 1
77737: PUSH
77738: EMPTY
77739: LIST
77740: LIST
77741: PUSH
77742: LD_INT 3
77744: PUSH
77745: LD_INT 23
77747: PUSH
77748: LD_INT 0
77750: PUSH
77751: EMPTY
77752: LIST
77753: LIST
77754: PUSH
77755: EMPTY
77756: LIST
77757: LIST
77758: PUSH
77759: EMPTY
77760: LIST
77761: LIST
77762: LIST
77763: PPUSH
77764: CALL_OW 69
77768: PUSH
77769: FOR_IN
77770: IFFALSE 77824
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
77772: LD_VAR 0 1
77776: PPUSH
77777: CALL_OW 257
77781: PUSH
77782: LD_INT 1
77784: PUSH
77785: LD_INT 2
77787: PUSH
77788: LD_INT 3
77790: PUSH
77791: LD_INT 4
77793: PUSH
77794: EMPTY
77795: LIST
77796: LIST
77797: LIST
77798: LIST
77799: IN
77800: IFFALSE 77822
// SetClass ( un , rand ( 1 , 4 ) ) ;
77802: LD_VAR 0 1
77806: PPUSH
77807: LD_INT 1
77809: PPUSH
77810: LD_INT 4
77812: PPUSH
77813: CALL_OW 12
77817: PPUSH
77818: CALL_OW 336
77822: GO 77769
77824: POP
77825: POP
// end ;
77826: PPOPN 1
77828: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
77829: LD_EXP 64
77833: PUSH
77834: LD_EXP 76
77838: AND
77839: IFFALSE 77918
77841: GO 77843
77843: DISABLE
77844: LD_INT 0
77846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
77847: LD_ADDR_VAR 0 1
77851: PUSH
77852: LD_INT 22
77854: PUSH
77855: LD_OWVAR 2
77859: PUSH
77860: EMPTY
77861: LIST
77862: LIST
77863: PUSH
77864: LD_INT 21
77866: PUSH
77867: LD_INT 3
77869: PUSH
77870: EMPTY
77871: LIST
77872: LIST
77873: PUSH
77874: EMPTY
77875: LIST
77876: LIST
77877: PPUSH
77878: CALL_OW 69
77882: ST_TO_ADDR
// if not tmp then
77883: LD_VAR 0 1
77887: NOT
77888: IFFALSE 77892
// exit ;
77890: GO 77918
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
77892: LD_VAR 0 1
77896: PUSH
77897: LD_INT 1
77899: PPUSH
77900: LD_VAR 0 1
77904: PPUSH
77905: CALL_OW 12
77909: ARRAY
77910: PPUSH
77911: LD_INT 100
77913: PPUSH
77914: CALL_OW 234
// end ;
77918: PPOPN 1
77920: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
77921: LD_EXP 64
77925: PUSH
77926: LD_EXP 78
77930: AND
77931: IFFALSE 78029
77933: GO 77935
77935: DISABLE
77936: LD_INT 0
77938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
77939: LD_ADDR_VAR 0 1
77943: PUSH
77944: LD_INT 22
77946: PUSH
77947: LD_OWVAR 2
77951: PUSH
77952: EMPTY
77953: LIST
77954: LIST
77955: PUSH
77956: LD_INT 21
77958: PUSH
77959: LD_INT 1
77961: PUSH
77962: EMPTY
77963: LIST
77964: LIST
77965: PUSH
77966: EMPTY
77967: LIST
77968: LIST
77969: PPUSH
77970: CALL_OW 69
77974: ST_TO_ADDR
// if not tmp then
77975: LD_VAR 0 1
77979: NOT
77980: IFFALSE 77984
// exit ;
77982: GO 78029
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
77984: LD_VAR 0 1
77988: PUSH
77989: LD_INT 1
77991: PPUSH
77992: LD_VAR 0 1
77996: PPUSH
77997: CALL_OW 12
78001: ARRAY
78002: PPUSH
78003: LD_INT 1
78005: PPUSH
78006: LD_INT 4
78008: PPUSH
78009: CALL_OW 12
78013: PPUSH
78014: LD_INT 3000
78016: PPUSH
78017: LD_INT 9000
78019: PPUSH
78020: CALL_OW 12
78024: PPUSH
78025: CALL_OW 492
// end ;
78029: PPOPN 1
78031: END
// every 0 0$1 trigger StreamModeActive and sDepot do
78032: LD_EXP 64
78036: PUSH
78037: LD_EXP 79
78041: AND
78042: IFFALSE 78062
78044: GO 78046
78046: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
78047: LD_INT 1
78049: PPUSH
78050: LD_OWVAR 2
78054: PPUSH
78055: LD_INT 0
78057: PPUSH
78058: CALL_OW 324
78062: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
78063: LD_EXP 64
78067: PUSH
78068: LD_EXP 80
78072: AND
78073: IFFALSE 78156
78075: GO 78077
78077: DISABLE
78078: LD_INT 0
78080: PPUSH
78081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
78082: LD_ADDR_VAR 0 2
78086: PUSH
78087: LD_INT 22
78089: PUSH
78090: LD_OWVAR 2
78094: PUSH
78095: EMPTY
78096: LIST
78097: LIST
78098: PUSH
78099: LD_INT 21
78101: PUSH
78102: LD_INT 3
78104: PUSH
78105: EMPTY
78106: LIST
78107: LIST
78108: PUSH
78109: EMPTY
78110: LIST
78111: LIST
78112: PPUSH
78113: CALL_OW 69
78117: ST_TO_ADDR
// if not tmp then
78118: LD_VAR 0 2
78122: NOT
78123: IFFALSE 78127
// exit ;
78125: GO 78156
// for i in tmp do
78127: LD_ADDR_VAR 0 1
78131: PUSH
78132: LD_VAR 0 2
78136: PUSH
78137: FOR_IN
78138: IFFALSE 78154
// SetBLevel ( i , 10 ) ;
78140: LD_VAR 0 1
78144: PPUSH
78145: LD_INT 10
78147: PPUSH
78148: CALL_OW 241
78152: GO 78137
78154: POP
78155: POP
// end ;
78156: PPOPN 2
78158: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
78159: LD_EXP 64
78163: PUSH
78164: LD_EXP 81
78168: AND
78169: IFFALSE 78280
78171: GO 78173
78173: DISABLE
78174: LD_INT 0
78176: PPUSH
78177: PPUSH
78178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78179: LD_ADDR_VAR 0 3
78183: PUSH
78184: LD_INT 22
78186: PUSH
78187: LD_OWVAR 2
78191: PUSH
78192: EMPTY
78193: LIST
78194: LIST
78195: PUSH
78196: LD_INT 25
78198: PUSH
78199: LD_INT 1
78201: PUSH
78202: EMPTY
78203: LIST
78204: LIST
78205: PUSH
78206: EMPTY
78207: LIST
78208: LIST
78209: PPUSH
78210: CALL_OW 69
78214: ST_TO_ADDR
// if not tmp then
78215: LD_VAR 0 3
78219: NOT
78220: IFFALSE 78224
// exit ;
78222: GO 78280
// un := tmp [ rand ( 1 , tmp ) ] ;
78224: LD_ADDR_VAR 0 2
78228: PUSH
78229: LD_VAR 0 3
78233: PUSH
78234: LD_INT 1
78236: PPUSH
78237: LD_VAR 0 3
78241: PPUSH
78242: CALL_OW 12
78246: ARRAY
78247: ST_TO_ADDR
// if Crawls ( un ) then
78248: LD_VAR 0 2
78252: PPUSH
78253: CALL_OW 318
78257: IFFALSE 78268
// ComWalk ( un ) ;
78259: LD_VAR 0 2
78263: PPUSH
78264: CALL_OW 138
// SetClass ( un , class_sniper ) ;
78268: LD_VAR 0 2
78272: PPUSH
78273: LD_INT 5
78275: PPUSH
78276: CALL_OW 336
// end ;
78280: PPOPN 3
78282: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
78283: LD_EXP 64
78287: PUSH
78288: LD_EXP 82
78292: AND
78293: PUSH
78294: LD_OWVAR 67
78298: PUSH
78299: LD_INT 4
78301: LESS
78302: AND
78303: IFFALSE 78322
78305: GO 78307
78307: DISABLE
// begin Difficulty := Difficulty + 1 ;
78308: LD_ADDR_OWVAR 67
78312: PUSH
78313: LD_OWVAR 67
78317: PUSH
78318: LD_INT 1
78320: PLUS
78321: ST_TO_ADDR
// end ;
78322: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
78323: LD_EXP 64
78327: PUSH
78328: LD_EXP 83
78332: AND
78333: IFFALSE 78436
78335: GO 78337
78337: DISABLE
78338: LD_INT 0
78340: PPUSH
// begin for i := 1 to 5 do
78341: LD_ADDR_VAR 0 1
78345: PUSH
78346: DOUBLE
78347: LD_INT 1
78349: DEC
78350: ST_TO_ADDR
78351: LD_INT 5
78353: PUSH
78354: FOR_TO
78355: IFFALSE 78434
// begin uc_nation := nation_nature ;
78357: LD_ADDR_OWVAR 21
78361: PUSH
78362: LD_INT 0
78364: ST_TO_ADDR
// uc_side := 0 ;
78365: LD_ADDR_OWVAR 20
78369: PUSH
78370: LD_INT 0
78372: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
78373: LD_ADDR_OWVAR 29
78377: PUSH
78378: LD_INT 12
78380: PUSH
78381: LD_INT 12
78383: PUSH
78384: EMPTY
78385: LIST
78386: LIST
78387: ST_TO_ADDR
// hc_agressivity := 20 ;
78388: LD_ADDR_OWVAR 35
78392: PUSH
78393: LD_INT 20
78395: ST_TO_ADDR
// hc_class := class_tiger ;
78396: LD_ADDR_OWVAR 28
78400: PUSH
78401: LD_INT 14
78403: ST_TO_ADDR
// hc_gallery :=  ;
78404: LD_ADDR_OWVAR 33
78408: PUSH
78409: LD_STRING 
78411: ST_TO_ADDR
// hc_name :=  ;
78412: LD_ADDR_OWVAR 26
78416: PUSH
78417: LD_STRING 
78419: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
78420: CALL_OW 44
78424: PPUSH
78425: LD_INT 0
78427: PPUSH
78428: CALL_OW 51
// end ;
78432: GO 78354
78434: POP
78435: POP
// end ;
78436: PPOPN 1
78438: END
// every 0 0$1 trigger StreamModeActive and sBomb do
78439: LD_EXP 64
78443: PUSH
78444: LD_EXP 84
78448: AND
78449: IFFALSE 78458
78451: GO 78453
78453: DISABLE
// StreamSibBomb ;
78454: CALL 78459 0 0
78458: END
// export function StreamSibBomb ; var i , x , y ; begin
78459: LD_INT 0
78461: PPUSH
78462: PPUSH
78463: PPUSH
78464: PPUSH
// result := false ;
78465: LD_ADDR_VAR 0 1
78469: PUSH
78470: LD_INT 0
78472: ST_TO_ADDR
// for i := 1 to 16 do
78473: LD_ADDR_VAR 0 2
78477: PUSH
78478: DOUBLE
78479: LD_INT 1
78481: DEC
78482: ST_TO_ADDR
78483: LD_INT 16
78485: PUSH
78486: FOR_TO
78487: IFFALSE 78686
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
78489: LD_ADDR_VAR 0 3
78493: PUSH
78494: LD_INT 10
78496: PUSH
78497: LD_INT 20
78499: PUSH
78500: LD_INT 30
78502: PUSH
78503: LD_INT 40
78505: PUSH
78506: LD_INT 50
78508: PUSH
78509: LD_INT 60
78511: PUSH
78512: LD_INT 70
78514: PUSH
78515: LD_INT 80
78517: PUSH
78518: LD_INT 90
78520: PUSH
78521: LD_INT 100
78523: PUSH
78524: LD_INT 110
78526: PUSH
78527: LD_INT 120
78529: PUSH
78530: LD_INT 130
78532: PUSH
78533: LD_INT 140
78535: PUSH
78536: LD_INT 150
78538: PUSH
78539: EMPTY
78540: LIST
78541: LIST
78542: LIST
78543: LIST
78544: LIST
78545: LIST
78546: LIST
78547: LIST
78548: LIST
78549: LIST
78550: LIST
78551: LIST
78552: LIST
78553: LIST
78554: LIST
78555: PUSH
78556: LD_INT 1
78558: PPUSH
78559: LD_INT 15
78561: PPUSH
78562: CALL_OW 12
78566: ARRAY
78567: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
78568: LD_ADDR_VAR 0 4
78572: PUSH
78573: LD_INT 10
78575: PUSH
78576: LD_INT 20
78578: PUSH
78579: LD_INT 30
78581: PUSH
78582: LD_INT 40
78584: PUSH
78585: LD_INT 50
78587: PUSH
78588: LD_INT 60
78590: PUSH
78591: LD_INT 70
78593: PUSH
78594: LD_INT 80
78596: PUSH
78597: LD_INT 90
78599: PUSH
78600: LD_INT 100
78602: PUSH
78603: LD_INT 110
78605: PUSH
78606: LD_INT 120
78608: PUSH
78609: LD_INT 130
78611: PUSH
78612: LD_INT 140
78614: PUSH
78615: LD_INT 150
78617: PUSH
78618: EMPTY
78619: LIST
78620: LIST
78621: LIST
78622: LIST
78623: LIST
78624: LIST
78625: LIST
78626: LIST
78627: LIST
78628: LIST
78629: LIST
78630: LIST
78631: LIST
78632: LIST
78633: LIST
78634: PUSH
78635: LD_INT 1
78637: PPUSH
78638: LD_INT 15
78640: PPUSH
78641: CALL_OW 12
78645: ARRAY
78646: ST_TO_ADDR
// if ValidHex ( x , y ) then
78647: LD_VAR 0 3
78651: PPUSH
78652: LD_VAR 0 4
78656: PPUSH
78657: CALL_OW 488
78661: IFFALSE 78684
// begin result := [ x , y ] ;
78663: LD_ADDR_VAR 0 1
78667: PUSH
78668: LD_VAR 0 3
78672: PUSH
78673: LD_VAR 0 4
78677: PUSH
78678: EMPTY
78679: LIST
78680: LIST
78681: ST_TO_ADDR
// break ;
78682: GO 78686
// end ; end ;
78684: GO 78486
78686: POP
78687: POP
// if result then
78688: LD_VAR 0 1
78692: IFFALSE 78752
// begin ToLua ( playSibBomb() ) ;
78694: LD_STRING playSibBomb()
78696: PPUSH
78697: CALL_OW 559
// wait ( 0 0$14 ) ;
78701: LD_INT 490
78703: PPUSH
78704: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
78708: LD_VAR 0 1
78712: PUSH
78713: LD_INT 1
78715: ARRAY
78716: PPUSH
78717: LD_VAR 0 1
78721: PUSH
78722: LD_INT 2
78724: ARRAY
78725: PPUSH
78726: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
78730: LD_VAR 0 1
78734: PUSH
78735: LD_INT 1
78737: ARRAY
78738: PPUSH
78739: LD_VAR 0 1
78743: PUSH
78744: LD_INT 2
78746: ARRAY
78747: PPUSH
78748: CALL_OW 429
// end ; end ;
78752: LD_VAR 0 1
78756: RET
// every 0 0$1 trigger StreamModeActive and sReset do
78757: LD_EXP 64
78761: PUSH
78762: LD_EXP 86
78766: AND
78767: IFFALSE 78779
78769: GO 78771
78771: DISABLE
// YouLost (  ) ;
78772: LD_STRING 
78774: PPUSH
78775: CALL_OW 104
78779: END
// every 0 0$1 trigger StreamModeActive and sFog do
78780: LD_EXP 64
78784: PUSH
78785: LD_EXP 85
78789: AND
78790: IFFALSE 78804
78792: GO 78794
78794: DISABLE
// FogOff ( your_side ) ;
78795: LD_OWVAR 2
78799: PPUSH
78800: CALL_OW 344
78804: END
// every 0 0$1 trigger StreamModeActive and sSun do
78805: LD_EXP 64
78809: PUSH
78810: LD_EXP 87
78814: AND
78815: IFFALSE 78843
78817: GO 78819
78819: DISABLE
// begin solar_recharge_percent := 0 ;
78820: LD_ADDR_OWVAR 79
78824: PUSH
78825: LD_INT 0
78827: ST_TO_ADDR
// wait ( 5 5$00 ) ;
78828: LD_INT 10500
78830: PPUSH
78831: CALL_OW 67
// solar_recharge_percent := 100 ;
78835: LD_ADDR_OWVAR 79
78839: PUSH
78840: LD_INT 100
78842: ST_TO_ADDR
// end ;
78843: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
78844: LD_EXP 64
78848: PUSH
78849: LD_EXP 88
78853: AND
78854: IFFALSE 79093
78856: GO 78858
78858: DISABLE
78859: LD_INT 0
78861: PPUSH
78862: PPUSH
78863: PPUSH
// begin tmp := [ ] ;
78864: LD_ADDR_VAR 0 3
78868: PUSH
78869: EMPTY
78870: ST_TO_ADDR
// for i := 1 to 6 do
78871: LD_ADDR_VAR 0 1
78875: PUSH
78876: DOUBLE
78877: LD_INT 1
78879: DEC
78880: ST_TO_ADDR
78881: LD_INT 6
78883: PUSH
78884: FOR_TO
78885: IFFALSE 78990
// begin uc_nation := nation_nature ;
78887: LD_ADDR_OWVAR 21
78891: PUSH
78892: LD_INT 0
78894: ST_TO_ADDR
// uc_side := 0 ;
78895: LD_ADDR_OWVAR 20
78899: PUSH
78900: LD_INT 0
78902: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
78903: LD_ADDR_OWVAR 29
78907: PUSH
78908: LD_INT 12
78910: PUSH
78911: LD_INT 12
78913: PUSH
78914: EMPTY
78915: LIST
78916: LIST
78917: ST_TO_ADDR
// hc_agressivity := 20 ;
78918: LD_ADDR_OWVAR 35
78922: PUSH
78923: LD_INT 20
78925: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
78926: LD_ADDR_OWVAR 28
78930: PUSH
78931: LD_INT 17
78933: ST_TO_ADDR
// hc_gallery :=  ;
78934: LD_ADDR_OWVAR 33
78938: PUSH
78939: LD_STRING 
78941: ST_TO_ADDR
// hc_name :=  ;
78942: LD_ADDR_OWVAR 26
78946: PUSH
78947: LD_STRING 
78949: ST_TO_ADDR
// un := CreateHuman ;
78950: LD_ADDR_VAR 0 2
78954: PUSH
78955: CALL_OW 44
78959: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
78960: LD_VAR 0 2
78964: PPUSH
78965: LD_INT 1
78967: PPUSH
78968: CALL_OW 51
// tmp := tmp ^ un ;
78972: LD_ADDR_VAR 0 3
78976: PUSH
78977: LD_VAR 0 3
78981: PUSH
78982: LD_VAR 0 2
78986: ADD
78987: ST_TO_ADDR
// end ;
78988: GO 78884
78990: POP
78991: POP
// repeat wait ( 0 0$1 ) ;
78992: LD_INT 35
78994: PPUSH
78995: CALL_OW 67
// for un in tmp do
78999: LD_ADDR_VAR 0 2
79003: PUSH
79004: LD_VAR 0 3
79008: PUSH
79009: FOR_IN
79010: IFFALSE 79084
// begin if IsDead ( un ) then
79012: LD_VAR 0 2
79016: PPUSH
79017: CALL_OW 301
79021: IFFALSE 79041
// begin tmp := tmp diff un ;
79023: LD_ADDR_VAR 0 3
79027: PUSH
79028: LD_VAR 0 3
79032: PUSH
79033: LD_VAR 0 2
79037: DIFF
79038: ST_TO_ADDR
// continue ;
79039: GO 79009
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
79041: LD_VAR 0 2
79045: PPUSH
79046: LD_INT 3
79048: PUSH
79049: LD_INT 22
79051: PUSH
79052: LD_INT 0
79054: PUSH
79055: EMPTY
79056: LIST
79057: LIST
79058: PUSH
79059: EMPTY
79060: LIST
79061: LIST
79062: PPUSH
79063: CALL_OW 69
79067: PPUSH
79068: LD_VAR 0 2
79072: PPUSH
79073: CALL_OW 74
79077: PPUSH
79078: CALL_OW 115
// end ;
79082: GO 79009
79084: POP
79085: POP
// until not tmp ;
79086: LD_VAR 0 3
79090: NOT
79091: IFFALSE 78992
// end ;
79093: PPOPN 3
79095: END
// every 0 0$1 trigger StreamModeActive and sTroll do
79096: LD_EXP 64
79100: PUSH
79101: LD_EXP 89
79105: AND
79106: IFFALSE 79160
79108: GO 79110
79110: DISABLE
// begin ToLua ( displayTroll(); ) ;
79111: LD_STRING displayTroll();
79113: PPUSH
79114: CALL_OW 559
// wait ( 3 3$00 ) ;
79118: LD_INT 6300
79120: PPUSH
79121: CALL_OW 67
// ToLua ( hideTroll(); ) ;
79125: LD_STRING hideTroll();
79127: PPUSH
79128: CALL_OW 559
// wait ( 1 1$00 ) ;
79132: LD_INT 2100
79134: PPUSH
79135: CALL_OW 67
// ToLua ( displayTroll(); ) ;
79139: LD_STRING displayTroll();
79141: PPUSH
79142: CALL_OW 559
// wait ( 1 1$00 ) ;
79146: LD_INT 2100
79148: PPUSH
79149: CALL_OW 67
// ToLua ( hideTroll(); ) ;
79153: LD_STRING hideTroll();
79155: PPUSH
79156: CALL_OW 559
// end ;
79160: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
79161: LD_EXP 64
79165: PUSH
79166: LD_EXP 90
79170: AND
79171: IFFALSE 79234
79173: GO 79175
79175: DISABLE
79176: LD_INT 0
79178: PPUSH
// begin p := 0 ;
79179: LD_ADDR_VAR 0 1
79183: PUSH
79184: LD_INT 0
79186: ST_TO_ADDR
// repeat game_speed := 1 ;
79187: LD_ADDR_OWVAR 65
79191: PUSH
79192: LD_INT 1
79194: ST_TO_ADDR
// wait ( 0 0$1 ) ;
79195: LD_INT 35
79197: PPUSH
79198: CALL_OW 67
// p := p + 1 ;
79202: LD_ADDR_VAR 0 1
79206: PUSH
79207: LD_VAR 0 1
79211: PUSH
79212: LD_INT 1
79214: PLUS
79215: ST_TO_ADDR
// until p >= 60 ;
79216: LD_VAR 0 1
79220: PUSH
79221: LD_INT 60
79223: GREATEREQUAL
79224: IFFALSE 79187
// game_speed := 4 ;
79226: LD_ADDR_OWVAR 65
79230: PUSH
79231: LD_INT 4
79233: ST_TO_ADDR
// end ;
79234: PPOPN 1
79236: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
79237: LD_EXP 64
79241: PUSH
79242: LD_EXP 91
79246: AND
79247: IFFALSE 79393
79249: GO 79251
79251: DISABLE
79252: LD_INT 0
79254: PPUSH
79255: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79256: LD_ADDR_VAR 0 1
79260: PUSH
79261: LD_INT 22
79263: PUSH
79264: LD_OWVAR 2
79268: PUSH
79269: EMPTY
79270: LIST
79271: LIST
79272: PUSH
79273: LD_INT 2
79275: PUSH
79276: LD_INT 30
79278: PUSH
79279: LD_INT 0
79281: PUSH
79282: EMPTY
79283: LIST
79284: LIST
79285: PUSH
79286: LD_INT 30
79288: PUSH
79289: LD_INT 1
79291: PUSH
79292: EMPTY
79293: LIST
79294: LIST
79295: PUSH
79296: EMPTY
79297: LIST
79298: LIST
79299: LIST
79300: PUSH
79301: EMPTY
79302: LIST
79303: LIST
79304: PPUSH
79305: CALL_OW 69
79309: ST_TO_ADDR
// if not depot then
79310: LD_VAR 0 1
79314: NOT
79315: IFFALSE 79319
// exit ;
79317: GO 79393
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
79319: LD_ADDR_VAR 0 2
79323: PUSH
79324: LD_VAR 0 1
79328: PUSH
79329: LD_INT 1
79331: PPUSH
79332: LD_VAR 0 1
79336: PPUSH
79337: CALL_OW 12
79341: ARRAY
79342: PPUSH
79343: CALL_OW 274
79347: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
79348: LD_VAR 0 2
79352: PPUSH
79353: LD_INT 1
79355: PPUSH
79356: LD_INT 0
79358: PPUSH
79359: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
79363: LD_VAR 0 2
79367: PPUSH
79368: LD_INT 2
79370: PPUSH
79371: LD_INT 0
79373: PPUSH
79374: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
79378: LD_VAR 0 2
79382: PPUSH
79383: LD_INT 3
79385: PPUSH
79386: LD_INT 0
79388: PPUSH
79389: CALL_OW 277
// end ;
79393: PPOPN 2
79395: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
79396: LD_EXP 64
79400: PUSH
79401: LD_EXP 92
79405: AND
79406: IFFALSE 79503
79408: GO 79410
79410: DISABLE
79411: LD_INT 0
79413: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
79414: LD_ADDR_VAR 0 1
79418: PUSH
79419: LD_INT 22
79421: PUSH
79422: LD_OWVAR 2
79426: PUSH
79427: EMPTY
79428: LIST
79429: LIST
79430: PUSH
79431: LD_INT 21
79433: PUSH
79434: LD_INT 1
79436: PUSH
79437: EMPTY
79438: LIST
79439: LIST
79440: PUSH
79441: LD_INT 3
79443: PUSH
79444: LD_INT 23
79446: PUSH
79447: LD_INT 0
79449: PUSH
79450: EMPTY
79451: LIST
79452: LIST
79453: PUSH
79454: EMPTY
79455: LIST
79456: LIST
79457: PUSH
79458: EMPTY
79459: LIST
79460: LIST
79461: LIST
79462: PPUSH
79463: CALL_OW 69
79467: ST_TO_ADDR
// if not tmp then
79468: LD_VAR 0 1
79472: NOT
79473: IFFALSE 79477
// exit ;
79475: GO 79503
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
79477: LD_VAR 0 1
79481: PUSH
79482: LD_INT 1
79484: PPUSH
79485: LD_VAR 0 1
79489: PPUSH
79490: CALL_OW 12
79494: ARRAY
79495: PPUSH
79496: LD_INT 200
79498: PPUSH
79499: CALL_OW 234
// end ;
79503: PPOPN 1
79505: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
79506: LD_EXP 64
79510: PUSH
79511: LD_EXP 93
79515: AND
79516: IFFALSE 79595
79518: GO 79520
79520: DISABLE
79521: LD_INT 0
79523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
79524: LD_ADDR_VAR 0 1
79528: PUSH
79529: LD_INT 22
79531: PUSH
79532: LD_OWVAR 2
79536: PUSH
79537: EMPTY
79538: LIST
79539: LIST
79540: PUSH
79541: LD_INT 21
79543: PUSH
79544: LD_INT 2
79546: PUSH
79547: EMPTY
79548: LIST
79549: LIST
79550: PUSH
79551: EMPTY
79552: LIST
79553: LIST
79554: PPUSH
79555: CALL_OW 69
79559: ST_TO_ADDR
// if not tmp then
79560: LD_VAR 0 1
79564: NOT
79565: IFFALSE 79569
// exit ;
79567: GO 79595
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
79569: LD_VAR 0 1
79573: PUSH
79574: LD_INT 1
79576: PPUSH
79577: LD_VAR 0 1
79581: PPUSH
79582: CALL_OW 12
79586: ARRAY
79587: PPUSH
79588: LD_INT 60
79590: PPUSH
79591: CALL_OW 234
// end ;
79595: PPOPN 1
79597: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
79598: LD_EXP 64
79602: PUSH
79603: LD_EXP 94
79607: AND
79608: IFFALSE 79707
79610: GO 79612
79612: DISABLE
79613: LD_INT 0
79615: PPUSH
79616: PPUSH
// begin enable ;
79617: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
79618: LD_ADDR_VAR 0 1
79622: PUSH
79623: LD_INT 22
79625: PUSH
79626: LD_OWVAR 2
79630: PUSH
79631: EMPTY
79632: LIST
79633: LIST
79634: PUSH
79635: LD_INT 61
79637: PUSH
79638: EMPTY
79639: LIST
79640: PUSH
79641: LD_INT 33
79643: PUSH
79644: LD_INT 2
79646: PUSH
79647: EMPTY
79648: LIST
79649: LIST
79650: PUSH
79651: EMPTY
79652: LIST
79653: LIST
79654: LIST
79655: PPUSH
79656: CALL_OW 69
79660: ST_TO_ADDR
// if not tmp then
79661: LD_VAR 0 1
79665: NOT
79666: IFFALSE 79670
// exit ;
79668: GO 79707
// for i in tmp do
79670: LD_ADDR_VAR 0 2
79674: PUSH
79675: LD_VAR 0 1
79679: PUSH
79680: FOR_IN
79681: IFFALSE 79705
// if IsControledBy ( i ) then
79683: LD_VAR 0 2
79687: PPUSH
79688: CALL_OW 312
79692: IFFALSE 79703
// ComUnlink ( i ) ;
79694: LD_VAR 0 2
79698: PPUSH
79699: CALL_OW 136
79703: GO 79680
79705: POP
79706: POP
// end ;
79707: PPOPN 2
79709: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
79710: LD_EXP 64
79714: PUSH
79715: LD_EXP 95
79719: AND
79720: IFFALSE 79860
79722: GO 79724
79724: DISABLE
79725: LD_INT 0
79727: PPUSH
79728: PPUSH
// begin ToLua ( displayPowell(); ) ;
79729: LD_STRING displayPowell();
79731: PPUSH
79732: CALL_OW 559
// uc_side := 0 ;
79736: LD_ADDR_OWVAR 20
79740: PUSH
79741: LD_INT 0
79743: ST_TO_ADDR
// uc_nation := 2 ;
79744: LD_ADDR_OWVAR 21
79748: PUSH
79749: LD_INT 2
79751: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
79752: LD_ADDR_OWVAR 37
79756: PUSH
79757: LD_INT 14
79759: ST_TO_ADDR
// vc_engine := engine_siberite ;
79760: LD_ADDR_OWVAR 39
79764: PUSH
79765: LD_INT 3
79767: ST_TO_ADDR
// vc_control := control_apeman ;
79768: LD_ADDR_OWVAR 38
79772: PUSH
79773: LD_INT 5
79775: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
79776: LD_ADDR_OWVAR 40
79780: PUSH
79781: LD_INT 29
79783: ST_TO_ADDR
// un := CreateVehicle ;
79784: LD_ADDR_VAR 0 2
79788: PUSH
79789: CALL_OW 45
79793: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
79794: LD_VAR 0 2
79798: PPUSH
79799: LD_INT 1
79801: PPUSH
79802: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
79806: LD_INT 35
79808: PPUSH
79809: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
79813: LD_VAR 0 2
79817: PPUSH
79818: LD_INT 22
79820: PUSH
79821: LD_OWVAR 2
79825: PUSH
79826: EMPTY
79827: LIST
79828: LIST
79829: PPUSH
79830: CALL_OW 69
79834: PPUSH
79835: LD_VAR 0 2
79839: PPUSH
79840: CALL_OW 74
79844: PPUSH
79845: CALL_OW 115
// until IsDead ( un ) ;
79849: LD_VAR 0 2
79853: PPUSH
79854: CALL_OW 301
79858: IFFALSE 79806
// end ;
79860: PPOPN 2
79862: END
// every 0 0$1 trigger StreamModeActive and sStu do
79863: LD_EXP 64
79867: PUSH
79868: LD_EXP 103
79872: AND
79873: IFFALSE 79889
79875: GO 79877
79877: DISABLE
// begin ToLua ( displayStucuk(); ) ;
79878: LD_STRING displayStucuk();
79880: PPUSH
79881: CALL_OW 559
// ResetFog ;
79885: CALL_OW 335
// end ;
79889: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
79890: LD_EXP 64
79894: PUSH
79895: LD_EXP 96
79899: AND
79900: IFFALSE 80041
79902: GO 79904
79904: DISABLE
79905: LD_INT 0
79907: PPUSH
79908: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
79909: LD_ADDR_VAR 0 2
79913: PUSH
79914: LD_INT 22
79916: PUSH
79917: LD_OWVAR 2
79921: PUSH
79922: EMPTY
79923: LIST
79924: LIST
79925: PUSH
79926: LD_INT 21
79928: PUSH
79929: LD_INT 1
79931: PUSH
79932: EMPTY
79933: LIST
79934: LIST
79935: PUSH
79936: EMPTY
79937: LIST
79938: LIST
79939: PPUSH
79940: CALL_OW 69
79944: ST_TO_ADDR
// if not tmp then
79945: LD_VAR 0 2
79949: NOT
79950: IFFALSE 79954
// exit ;
79952: GO 80041
// un := tmp [ rand ( 1 , tmp ) ] ;
79954: LD_ADDR_VAR 0 1
79958: PUSH
79959: LD_VAR 0 2
79963: PUSH
79964: LD_INT 1
79966: PPUSH
79967: LD_VAR 0 2
79971: PPUSH
79972: CALL_OW 12
79976: ARRAY
79977: ST_TO_ADDR
// SetSide ( un , 0 ) ;
79978: LD_VAR 0 1
79982: PPUSH
79983: LD_INT 0
79985: PPUSH
79986: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
79990: LD_VAR 0 1
79994: PPUSH
79995: LD_OWVAR 3
79999: PUSH
80000: LD_VAR 0 1
80004: DIFF
80005: PPUSH
80006: LD_VAR 0 1
80010: PPUSH
80011: CALL_OW 74
80015: PPUSH
80016: CALL_OW 115
// wait ( 0 0$20 ) ;
80020: LD_INT 700
80022: PPUSH
80023: CALL_OW 67
// SetSide ( un , your_side ) ;
80027: LD_VAR 0 1
80031: PPUSH
80032: LD_OWVAR 2
80036: PPUSH
80037: CALL_OW 235
// end ;
80041: PPOPN 2
80043: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
80044: LD_EXP 64
80048: PUSH
80049: LD_EXP 97
80053: AND
80054: IFFALSE 80160
80056: GO 80058
80058: DISABLE
80059: LD_INT 0
80061: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
80062: LD_ADDR_VAR 0 1
80066: PUSH
80067: LD_INT 22
80069: PUSH
80070: LD_OWVAR 2
80074: PUSH
80075: EMPTY
80076: LIST
80077: LIST
80078: PUSH
80079: LD_INT 2
80081: PUSH
80082: LD_INT 30
80084: PUSH
80085: LD_INT 0
80087: PUSH
80088: EMPTY
80089: LIST
80090: LIST
80091: PUSH
80092: LD_INT 30
80094: PUSH
80095: LD_INT 1
80097: PUSH
80098: EMPTY
80099: LIST
80100: LIST
80101: PUSH
80102: EMPTY
80103: LIST
80104: LIST
80105: LIST
80106: PUSH
80107: EMPTY
80108: LIST
80109: LIST
80110: PPUSH
80111: CALL_OW 69
80115: ST_TO_ADDR
// if not depot then
80116: LD_VAR 0 1
80120: NOT
80121: IFFALSE 80125
// exit ;
80123: GO 80160
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
80125: LD_VAR 0 1
80129: PUSH
80130: LD_INT 1
80132: ARRAY
80133: PPUSH
80134: CALL_OW 250
80138: PPUSH
80139: LD_VAR 0 1
80143: PUSH
80144: LD_INT 1
80146: ARRAY
80147: PPUSH
80148: CALL_OW 251
80152: PPUSH
80153: LD_INT 70
80155: PPUSH
80156: CALL_OW 495
// end ;
80160: PPOPN 1
80162: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
80163: LD_EXP 64
80167: PUSH
80168: LD_EXP 98
80172: AND
80173: IFFALSE 80384
80175: GO 80177
80177: DISABLE
80178: LD_INT 0
80180: PPUSH
80181: PPUSH
80182: PPUSH
80183: PPUSH
80184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
80185: LD_ADDR_VAR 0 5
80189: PUSH
80190: LD_INT 22
80192: PUSH
80193: LD_OWVAR 2
80197: PUSH
80198: EMPTY
80199: LIST
80200: LIST
80201: PUSH
80202: LD_INT 21
80204: PUSH
80205: LD_INT 1
80207: PUSH
80208: EMPTY
80209: LIST
80210: LIST
80211: PUSH
80212: EMPTY
80213: LIST
80214: LIST
80215: PPUSH
80216: CALL_OW 69
80220: ST_TO_ADDR
// if not tmp then
80221: LD_VAR 0 5
80225: NOT
80226: IFFALSE 80230
// exit ;
80228: GO 80384
// for i in tmp do
80230: LD_ADDR_VAR 0 1
80234: PUSH
80235: LD_VAR 0 5
80239: PUSH
80240: FOR_IN
80241: IFFALSE 80382
// begin d := rand ( 0 , 5 ) ;
80243: LD_ADDR_VAR 0 4
80247: PUSH
80248: LD_INT 0
80250: PPUSH
80251: LD_INT 5
80253: PPUSH
80254: CALL_OW 12
80258: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
80259: LD_ADDR_VAR 0 2
80263: PUSH
80264: LD_VAR 0 1
80268: PPUSH
80269: CALL_OW 250
80273: PPUSH
80274: LD_VAR 0 4
80278: PPUSH
80279: LD_INT 3
80281: PPUSH
80282: LD_INT 12
80284: PPUSH
80285: CALL_OW 12
80289: PPUSH
80290: CALL_OW 272
80294: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
80295: LD_ADDR_VAR 0 3
80299: PUSH
80300: LD_VAR 0 1
80304: PPUSH
80305: CALL_OW 251
80309: PPUSH
80310: LD_VAR 0 4
80314: PPUSH
80315: LD_INT 3
80317: PPUSH
80318: LD_INT 12
80320: PPUSH
80321: CALL_OW 12
80325: PPUSH
80326: CALL_OW 273
80330: ST_TO_ADDR
// if ValidHex ( x , y ) then
80331: LD_VAR 0 2
80335: PPUSH
80336: LD_VAR 0 3
80340: PPUSH
80341: CALL_OW 488
80345: IFFALSE 80380
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
80347: LD_VAR 0 1
80351: PPUSH
80352: LD_VAR 0 2
80356: PPUSH
80357: LD_VAR 0 3
80361: PPUSH
80362: LD_INT 3
80364: PPUSH
80365: LD_INT 6
80367: PPUSH
80368: CALL_OW 12
80372: PPUSH
80373: LD_INT 1
80375: PPUSH
80376: CALL_OW 483
// end ;
80380: GO 80240
80382: POP
80383: POP
// end ;
80384: PPOPN 5
80386: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
80387: LD_EXP 64
80391: PUSH
80392: LD_EXP 99
80396: AND
80397: IFFALSE 80491
80399: GO 80401
80401: DISABLE
80402: LD_INT 0
80404: PPUSH
80405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
80406: LD_ADDR_VAR 0 2
80410: PUSH
80411: LD_INT 22
80413: PUSH
80414: LD_OWVAR 2
80418: PUSH
80419: EMPTY
80420: LIST
80421: LIST
80422: PUSH
80423: LD_INT 32
80425: PUSH
80426: LD_INT 1
80428: PUSH
80429: EMPTY
80430: LIST
80431: LIST
80432: PUSH
80433: LD_INT 21
80435: PUSH
80436: LD_INT 2
80438: PUSH
80439: EMPTY
80440: LIST
80441: LIST
80442: PUSH
80443: EMPTY
80444: LIST
80445: LIST
80446: LIST
80447: PPUSH
80448: CALL_OW 69
80452: ST_TO_ADDR
// if not tmp then
80453: LD_VAR 0 2
80457: NOT
80458: IFFALSE 80462
// exit ;
80460: GO 80491
// for i in tmp do
80462: LD_ADDR_VAR 0 1
80466: PUSH
80467: LD_VAR 0 2
80471: PUSH
80472: FOR_IN
80473: IFFALSE 80489
// SetFuel ( i , 0 ) ;
80475: LD_VAR 0 1
80479: PPUSH
80480: LD_INT 0
80482: PPUSH
80483: CALL_OW 240
80487: GO 80472
80489: POP
80490: POP
// end ;
80491: PPOPN 2
80493: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
80494: LD_EXP 64
80498: PUSH
80499: LD_EXP 100
80503: AND
80504: IFFALSE 80570
80506: GO 80508
80508: DISABLE
80509: LD_INT 0
80511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
80512: LD_ADDR_VAR 0 1
80516: PUSH
80517: LD_INT 22
80519: PUSH
80520: LD_OWVAR 2
80524: PUSH
80525: EMPTY
80526: LIST
80527: LIST
80528: PUSH
80529: LD_INT 30
80531: PUSH
80532: LD_INT 29
80534: PUSH
80535: EMPTY
80536: LIST
80537: LIST
80538: PUSH
80539: EMPTY
80540: LIST
80541: LIST
80542: PPUSH
80543: CALL_OW 69
80547: ST_TO_ADDR
// if not tmp then
80548: LD_VAR 0 1
80552: NOT
80553: IFFALSE 80557
// exit ;
80555: GO 80570
// DestroyUnit ( tmp [ 1 ] ) ;
80557: LD_VAR 0 1
80561: PUSH
80562: LD_INT 1
80564: ARRAY
80565: PPUSH
80566: CALL_OW 65
// end ;
80570: PPOPN 1
80572: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
80573: LD_EXP 64
80577: PUSH
80578: LD_EXP 102
80582: AND
80583: IFFALSE 80712
80585: GO 80587
80587: DISABLE
80588: LD_INT 0
80590: PPUSH
// begin uc_side := 0 ;
80591: LD_ADDR_OWVAR 20
80595: PUSH
80596: LD_INT 0
80598: ST_TO_ADDR
// uc_nation := nation_arabian ;
80599: LD_ADDR_OWVAR 21
80603: PUSH
80604: LD_INT 2
80606: ST_TO_ADDR
// hc_gallery :=  ;
80607: LD_ADDR_OWVAR 33
80611: PUSH
80612: LD_STRING 
80614: ST_TO_ADDR
// hc_name :=  ;
80615: LD_ADDR_OWVAR 26
80619: PUSH
80620: LD_STRING 
80622: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
80623: LD_INT 1
80625: PPUSH
80626: LD_INT 11
80628: PPUSH
80629: LD_INT 10
80631: PPUSH
80632: CALL_OW 380
// un := CreateHuman ;
80636: LD_ADDR_VAR 0 1
80640: PUSH
80641: CALL_OW 44
80645: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
80646: LD_VAR 0 1
80650: PPUSH
80651: LD_INT 1
80653: PPUSH
80654: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
80658: LD_INT 35
80660: PPUSH
80661: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
80665: LD_VAR 0 1
80669: PPUSH
80670: LD_INT 22
80672: PUSH
80673: LD_OWVAR 2
80677: PUSH
80678: EMPTY
80679: LIST
80680: LIST
80681: PPUSH
80682: CALL_OW 69
80686: PPUSH
80687: LD_VAR 0 1
80691: PPUSH
80692: CALL_OW 74
80696: PPUSH
80697: CALL_OW 115
// until IsDead ( un ) ;
80701: LD_VAR 0 1
80705: PPUSH
80706: CALL_OW 301
80710: IFFALSE 80658
// end ;
80712: PPOPN 1
80714: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
80715: LD_EXP 64
80719: PUSH
80720: LD_EXP 104
80724: AND
80725: IFFALSE 80737
80727: GO 80729
80729: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
80730: LD_STRING earthquake(getX(game), 0, 32)
80732: PPUSH
80733: CALL_OW 559
80737: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
80738: LD_EXP 64
80742: PUSH
80743: LD_EXP 105
80747: AND
80748: IFFALSE 80839
80750: GO 80752
80752: DISABLE
80753: LD_INT 0
80755: PPUSH
// begin enable ;
80756: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
80757: LD_ADDR_VAR 0 1
80761: PUSH
80762: LD_INT 22
80764: PUSH
80765: LD_OWVAR 2
80769: PUSH
80770: EMPTY
80771: LIST
80772: LIST
80773: PUSH
80774: LD_INT 21
80776: PUSH
80777: LD_INT 2
80779: PUSH
80780: EMPTY
80781: LIST
80782: LIST
80783: PUSH
80784: LD_INT 33
80786: PUSH
80787: LD_INT 3
80789: PUSH
80790: EMPTY
80791: LIST
80792: LIST
80793: PUSH
80794: EMPTY
80795: LIST
80796: LIST
80797: LIST
80798: PPUSH
80799: CALL_OW 69
80803: ST_TO_ADDR
// if not tmp then
80804: LD_VAR 0 1
80808: NOT
80809: IFFALSE 80813
// exit ;
80811: GO 80839
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
80813: LD_VAR 0 1
80817: PUSH
80818: LD_INT 1
80820: PPUSH
80821: LD_VAR 0 1
80825: PPUSH
80826: CALL_OW 12
80830: ARRAY
80831: PPUSH
80832: LD_INT 1
80834: PPUSH
80835: CALL_OW 234
// end ;
80839: PPOPN 1
80841: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
80842: LD_EXP 64
80846: PUSH
80847: LD_EXP 106
80851: AND
80852: IFFALSE 80993
80854: GO 80856
80856: DISABLE
80857: LD_INT 0
80859: PPUSH
80860: PPUSH
80861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
80862: LD_ADDR_VAR 0 3
80866: PUSH
80867: LD_INT 22
80869: PUSH
80870: LD_OWVAR 2
80874: PUSH
80875: EMPTY
80876: LIST
80877: LIST
80878: PUSH
80879: LD_INT 25
80881: PUSH
80882: LD_INT 1
80884: PUSH
80885: EMPTY
80886: LIST
80887: LIST
80888: PUSH
80889: EMPTY
80890: LIST
80891: LIST
80892: PPUSH
80893: CALL_OW 69
80897: ST_TO_ADDR
// if not tmp then
80898: LD_VAR 0 3
80902: NOT
80903: IFFALSE 80907
// exit ;
80905: GO 80993
// un := tmp [ rand ( 1 , tmp ) ] ;
80907: LD_ADDR_VAR 0 2
80911: PUSH
80912: LD_VAR 0 3
80916: PUSH
80917: LD_INT 1
80919: PPUSH
80920: LD_VAR 0 3
80924: PPUSH
80925: CALL_OW 12
80929: ARRAY
80930: ST_TO_ADDR
// if Crawls ( un ) then
80931: LD_VAR 0 2
80935: PPUSH
80936: CALL_OW 318
80940: IFFALSE 80951
// ComWalk ( un ) ;
80942: LD_VAR 0 2
80946: PPUSH
80947: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
80951: LD_VAR 0 2
80955: PPUSH
80956: LD_INT 9
80958: PPUSH
80959: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
80963: LD_INT 28
80965: PPUSH
80966: LD_OWVAR 2
80970: PPUSH
80971: LD_INT 2
80973: PPUSH
80974: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
80978: LD_INT 29
80980: PPUSH
80981: LD_OWVAR 2
80985: PPUSH
80986: LD_INT 2
80988: PPUSH
80989: CALL_OW 322
// end ;
80993: PPOPN 3
80995: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
80996: LD_EXP 64
81000: PUSH
81001: LD_EXP 107
81005: AND
81006: IFFALSE 81117
81008: GO 81010
81010: DISABLE
81011: LD_INT 0
81013: PPUSH
81014: PPUSH
81015: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81016: LD_ADDR_VAR 0 3
81020: PUSH
81021: LD_INT 22
81023: PUSH
81024: LD_OWVAR 2
81028: PUSH
81029: EMPTY
81030: LIST
81031: LIST
81032: PUSH
81033: LD_INT 25
81035: PUSH
81036: LD_INT 1
81038: PUSH
81039: EMPTY
81040: LIST
81041: LIST
81042: PUSH
81043: EMPTY
81044: LIST
81045: LIST
81046: PPUSH
81047: CALL_OW 69
81051: ST_TO_ADDR
// if not tmp then
81052: LD_VAR 0 3
81056: NOT
81057: IFFALSE 81061
// exit ;
81059: GO 81117
// un := tmp [ rand ( 1 , tmp ) ] ;
81061: LD_ADDR_VAR 0 2
81065: PUSH
81066: LD_VAR 0 3
81070: PUSH
81071: LD_INT 1
81073: PPUSH
81074: LD_VAR 0 3
81078: PPUSH
81079: CALL_OW 12
81083: ARRAY
81084: ST_TO_ADDR
// if Crawls ( un ) then
81085: LD_VAR 0 2
81089: PPUSH
81090: CALL_OW 318
81094: IFFALSE 81105
// ComWalk ( un ) ;
81096: LD_VAR 0 2
81100: PPUSH
81101: CALL_OW 138
// SetClass ( un , class_mortar ) ;
81105: LD_VAR 0 2
81109: PPUSH
81110: LD_INT 8
81112: PPUSH
81113: CALL_OW 336
// end ;
81117: PPOPN 3
81119: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
81120: LD_EXP 64
81124: PUSH
81125: LD_EXP 108
81129: AND
81130: IFFALSE 81274
81132: GO 81134
81134: DISABLE
81135: LD_INT 0
81137: PPUSH
81138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
81139: LD_ADDR_VAR 0 2
81143: PUSH
81144: LD_INT 22
81146: PUSH
81147: LD_OWVAR 2
81151: PUSH
81152: EMPTY
81153: LIST
81154: LIST
81155: PUSH
81156: LD_INT 21
81158: PUSH
81159: LD_INT 2
81161: PUSH
81162: EMPTY
81163: LIST
81164: LIST
81165: PUSH
81166: LD_INT 2
81168: PUSH
81169: LD_INT 34
81171: PUSH
81172: LD_INT 12
81174: PUSH
81175: EMPTY
81176: LIST
81177: LIST
81178: PUSH
81179: LD_INT 34
81181: PUSH
81182: LD_INT 51
81184: PUSH
81185: EMPTY
81186: LIST
81187: LIST
81188: PUSH
81189: LD_INT 34
81191: PUSH
81192: LD_INT 32
81194: PUSH
81195: EMPTY
81196: LIST
81197: LIST
81198: PUSH
81199: EMPTY
81200: LIST
81201: LIST
81202: LIST
81203: LIST
81204: PUSH
81205: EMPTY
81206: LIST
81207: LIST
81208: LIST
81209: PPUSH
81210: CALL_OW 69
81214: ST_TO_ADDR
// if not tmp then
81215: LD_VAR 0 2
81219: NOT
81220: IFFALSE 81224
// exit ;
81222: GO 81274
// for i in tmp do
81224: LD_ADDR_VAR 0 1
81228: PUSH
81229: LD_VAR 0 2
81233: PUSH
81234: FOR_IN
81235: IFFALSE 81272
// if GetCargo ( i , mat_artifact ) = 0 then
81237: LD_VAR 0 1
81241: PPUSH
81242: LD_INT 4
81244: PPUSH
81245: CALL_OW 289
81249: PUSH
81250: LD_INT 0
81252: EQUAL
81253: IFFALSE 81270
// SetCargo ( i , mat_siberit , 100 ) ;
81255: LD_VAR 0 1
81259: PPUSH
81260: LD_INT 3
81262: PPUSH
81263: LD_INT 100
81265: PPUSH
81266: CALL_OW 290
81270: GO 81234
81272: POP
81273: POP
// end ;
81274: PPOPN 2
81276: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
81277: LD_EXP 64
81281: PUSH
81282: LD_EXP 109
81286: AND
81287: IFFALSE 81470
81289: GO 81291
81291: DISABLE
81292: LD_INT 0
81294: PPUSH
81295: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
81296: LD_ADDR_VAR 0 2
81300: PUSH
81301: LD_INT 22
81303: PUSH
81304: LD_OWVAR 2
81308: PUSH
81309: EMPTY
81310: LIST
81311: LIST
81312: PPUSH
81313: CALL_OW 69
81317: ST_TO_ADDR
// if not tmp then
81318: LD_VAR 0 2
81322: NOT
81323: IFFALSE 81327
// exit ;
81325: GO 81470
// for i := 1 to 2 do
81327: LD_ADDR_VAR 0 1
81331: PUSH
81332: DOUBLE
81333: LD_INT 1
81335: DEC
81336: ST_TO_ADDR
81337: LD_INT 2
81339: PUSH
81340: FOR_TO
81341: IFFALSE 81468
// begin uc_side := your_side ;
81343: LD_ADDR_OWVAR 20
81347: PUSH
81348: LD_OWVAR 2
81352: ST_TO_ADDR
// uc_nation := nation_american ;
81353: LD_ADDR_OWVAR 21
81357: PUSH
81358: LD_INT 1
81360: ST_TO_ADDR
// vc_chassis := us_morphling ;
81361: LD_ADDR_OWVAR 37
81365: PUSH
81366: LD_INT 5
81368: ST_TO_ADDR
// vc_engine := engine_siberite ;
81369: LD_ADDR_OWVAR 39
81373: PUSH
81374: LD_INT 3
81376: ST_TO_ADDR
// vc_control := control_computer ;
81377: LD_ADDR_OWVAR 38
81381: PUSH
81382: LD_INT 3
81384: ST_TO_ADDR
// vc_weapon := us_double_laser ;
81385: LD_ADDR_OWVAR 40
81389: PUSH
81390: LD_INT 10
81392: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
81393: LD_VAR 0 2
81397: PUSH
81398: LD_INT 1
81400: ARRAY
81401: PPUSH
81402: CALL_OW 310
81406: NOT
81407: IFFALSE 81454
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
81409: CALL_OW 45
81413: PPUSH
81414: LD_VAR 0 2
81418: PUSH
81419: LD_INT 1
81421: ARRAY
81422: PPUSH
81423: CALL_OW 250
81427: PPUSH
81428: LD_VAR 0 2
81432: PUSH
81433: LD_INT 1
81435: ARRAY
81436: PPUSH
81437: CALL_OW 251
81441: PPUSH
81442: LD_INT 12
81444: PPUSH
81445: LD_INT 1
81447: PPUSH
81448: CALL_OW 50
81452: GO 81466
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
81454: CALL_OW 45
81458: PPUSH
81459: LD_INT 1
81461: PPUSH
81462: CALL_OW 51
// end ;
81466: GO 81340
81468: POP
81469: POP
// end ;
81470: PPOPN 2
81472: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
81473: LD_EXP 64
81477: PUSH
81478: LD_EXP 110
81482: AND
81483: IFFALSE 81705
81485: GO 81487
81487: DISABLE
81488: LD_INT 0
81490: PPUSH
81491: PPUSH
81492: PPUSH
81493: PPUSH
81494: PPUSH
81495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
81496: LD_ADDR_VAR 0 6
81500: PUSH
81501: LD_INT 22
81503: PUSH
81504: LD_OWVAR 2
81508: PUSH
81509: EMPTY
81510: LIST
81511: LIST
81512: PUSH
81513: LD_INT 21
81515: PUSH
81516: LD_INT 1
81518: PUSH
81519: EMPTY
81520: LIST
81521: LIST
81522: PUSH
81523: LD_INT 3
81525: PUSH
81526: LD_INT 23
81528: PUSH
81529: LD_INT 0
81531: PUSH
81532: EMPTY
81533: LIST
81534: LIST
81535: PUSH
81536: EMPTY
81537: LIST
81538: LIST
81539: PUSH
81540: EMPTY
81541: LIST
81542: LIST
81543: LIST
81544: PPUSH
81545: CALL_OW 69
81549: ST_TO_ADDR
// if not tmp then
81550: LD_VAR 0 6
81554: NOT
81555: IFFALSE 81559
// exit ;
81557: GO 81705
// s1 := rand ( 1 , 4 ) ;
81559: LD_ADDR_VAR 0 2
81563: PUSH
81564: LD_INT 1
81566: PPUSH
81567: LD_INT 4
81569: PPUSH
81570: CALL_OW 12
81574: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
81575: LD_ADDR_VAR 0 4
81579: PUSH
81580: LD_VAR 0 6
81584: PUSH
81585: LD_INT 1
81587: ARRAY
81588: PPUSH
81589: LD_VAR 0 2
81593: PPUSH
81594: CALL_OW 259
81598: ST_TO_ADDR
// if s1 = 1 then
81599: LD_VAR 0 2
81603: PUSH
81604: LD_INT 1
81606: EQUAL
81607: IFFALSE 81627
// s2 := rand ( 2 , 4 ) else
81609: LD_ADDR_VAR 0 3
81613: PUSH
81614: LD_INT 2
81616: PPUSH
81617: LD_INT 4
81619: PPUSH
81620: CALL_OW 12
81624: ST_TO_ADDR
81625: GO 81635
// s2 := 1 ;
81627: LD_ADDR_VAR 0 3
81631: PUSH
81632: LD_INT 1
81634: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
81635: LD_ADDR_VAR 0 5
81639: PUSH
81640: LD_VAR 0 6
81644: PUSH
81645: LD_INT 1
81647: ARRAY
81648: PPUSH
81649: LD_VAR 0 3
81653: PPUSH
81654: CALL_OW 259
81658: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
81659: LD_VAR 0 6
81663: PUSH
81664: LD_INT 1
81666: ARRAY
81667: PPUSH
81668: LD_VAR 0 2
81672: PPUSH
81673: LD_VAR 0 5
81677: PPUSH
81678: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
81682: LD_VAR 0 6
81686: PUSH
81687: LD_INT 1
81689: ARRAY
81690: PPUSH
81691: LD_VAR 0 3
81695: PPUSH
81696: LD_VAR 0 4
81700: PPUSH
81701: CALL_OW 237
// end ;
81705: PPOPN 6
81707: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
81708: LD_EXP 64
81712: PUSH
81713: LD_EXP 111
81717: AND
81718: IFFALSE 81797
81720: GO 81722
81722: DISABLE
81723: LD_INT 0
81725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
81726: LD_ADDR_VAR 0 1
81730: PUSH
81731: LD_INT 22
81733: PUSH
81734: LD_OWVAR 2
81738: PUSH
81739: EMPTY
81740: LIST
81741: LIST
81742: PUSH
81743: LD_INT 30
81745: PUSH
81746: LD_INT 3
81748: PUSH
81749: EMPTY
81750: LIST
81751: LIST
81752: PUSH
81753: EMPTY
81754: LIST
81755: LIST
81756: PPUSH
81757: CALL_OW 69
81761: ST_TO_ADDR
// if not tmp then
81762: LD_VAR 0 1
81766: NOT
81767: IFFALSE 81771
// exit ;
81769: GO 81797
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
81771: LD_VAR 0 1
81775: PUSH
81776: LD_INT 1
81778: PPUSH
81779: LD_VAR 0 1
81783: PPUSH
81784: CALL_OW 12
81788: ARRAY
81789: PPUSH
81790: LD_INT 1
81792: PPUSH
81793: CALL_OW 234
// end ;
81797: PPOPN 1
81799: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
81800: LD_EXP 64
81804: PUSH
81805: LD_EXP 112
81809: AND
81810: IFFALSE 81922
81812: GO 81814
81814: DISABLE
81815: LD_INT 0
81817: PPUSH
81818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
81819: LD_ADDR_VAR 0 2
81823: PUSH
81824: LD_INT 22
81826: PUSH
81827: LD_OWVAR 2
81831: PUSH
81832: EMPTY
81833: LIST
81834: LIST
81835: PUSH
81836: LD_INT 2
81838: PUSH
81839: LD_INT 30
81841: PUSH
81842: LD_INT 27
81844: PUSH
81845: EMPTY
81846: LIST
81847: LIST
81848: PUSH
81849: LD_INT 30
81851: PUSH
81852: LD_INT 26
81854: PUSH
81855: EMPTY
81856: LIST
81857: LIST
81858: PUSH
81859: LD_INT 30
81861: PUSH
81862: LD_INT 28
81864: PUSH
81865: EMPTY
81866: LIST
81867: LIST
81868: PUSH
81869: EMPTY
81870: LIST
81871: LIST
81872: LIST
81873: LIST
81874: PUSH
81875: EMPTY
81876: LIST
81877: LIST
81878: PPUSH
81879: CALL_OW 69
81883: ST_TO_ADDR
// if not tmp then
81884: LD_VAR 0 2
81888: NOT
81889: IFFALSE 81893
// exit ;
81891: GO 81922
// for i in tmp do
81893: LD_ADDR_VAR 0 1
81897: PUSH
81898: LD_VAR 0 2
81902: PUSH
81903: FOR_IN
81904: IFFALSE 81920
// SetLives ( i , 1 ) ;
81906: LD_VAR 0 1
81910: PPUSH
81911: LD_INT 1
81913: PPUSH
81914: CALL_OW 234
81918: GO 81903
81920: POP
81921: POP
// end ;
81922: PPOPN 2
81924: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
81925: LD_EXP 64
81929: PUSH
81930: LD_EXP 113
81934: AND
81935: IFFALSE 82222
81937: GO 81939
81939: DISABLE
81940: LD_INT 0
81942: PPUSH
81943: PPUSH
81944: PPUSH
// begin i := rand ( 1 , 7 ) ;
81945: LD_ADDR_VAR 0 1
81949: PUSH
81950: LD_INT 1
81952: PPUSH
81953: LD_INT 7
81955: PPUSH
81956: CALL_OW 12
81960: ST_TO_ADDR
// case i of 1 :
81961: LD_VAR 0 1
81965: PUSH
81966: LD_INT 1
81968: DOUBLE
81969: EQUAL
81970: IFTRUE 81974
81972: GO 81984
81974: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
81975: LD_STRING earthquake(getX(game), 0, 32)
81977: PPUSH
81978: CALL_OW 559
81982: GO 82222
81984: LD_INT 2
81986: DOUBLE
81987: EQUAL
81988: IFTRUE 81992
81990: GO 82006
81992: POP
// begin ToLua ( displayStucuk(); ) ;
81993: LD_STRING displayStucuk();
81995: PPUSH
81996: CALL_OW 559
// ResetFog ;
82000: CALL_OW 335
// end ; 3 :
82004: GO 82222
82006: LD_INT 3
82008: DOUBLE
82009: EQUAL
82010: IFTRUE 82014
82012: GO 82118
82014: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
82015: LD_ADDR_VAR 0 2
82019: PUSH
82020: LD_INT 22
82022: PUSH
82023: LD_OWVAR 2
82027: PUSH
82028: EMPTY
82029: LIST
82030: LIST
82031: PUSH
82032: LD_INT 25
82034: PUSH
82035: LD_INT 1
82037: PUSH
82038: EMPTY
82039: LIST
82040: LIST
82041: PUSH
82042: EMPTY
82043: LIST
82044: LIST
82045: PPUSH
82046: CALL_OW 69
82050: ST_TO_ADDR
// if not tmp then
82051: LD_VAR 0 2
82055: NOT
82056: IFFALSE 82060
// exit ;
82058: GO 82222
// un := tmp [ rand ( 1 , tmp ) ] ;
82060: LD_ADDR_VAR 0 3
82064: PUSH
82065: LD_VAR 0 2
82069: PUSH
82070: LD_INT 1
82072: PPUSH
82073: LD_VAR 0 2
82077: PPUSH
82078: CALL_OW 12
82082: ARRAY
82083: ST_TO_ADDR
// if Crawls ( un ) then
82084: LD_VAR 0 3
82088: PPUSH
82089: CALL_OW 318
82093: IFFALSE 82104
// ComWalk ( un ) ;
82095: LD_VAR 0 3
82099: PPUSH
82100: CALL_OW 138
// SetClass ( un , class_mortar ) ;
82104: LD_VAR 0 3
82108: PPUSH
82109: LD_INT 8
82111: PPUSH
82112: CALL_OW 336
// end ; 4 :
82116: GO 82222
82118: LD_INT 4
82120: DOUBLE
82121: EQUAL
82122: IFTRUE 82126
82124: GO 82200
82126: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
82127: LD_ADDR_VAR 0 2
82131: PUSH
82132: LD_INT 22
82134: PUSH
82135: LD_OWVAR 2
82139: PUSH
82140: EMPTY
82141: LIST
82142: LIST
82143: PUSH
82144: LD_INT 30
82146: PUSH
82147: LD_INT 29
82149: PUSH
82150: EMPTY
82151: LIST
82152: LIST
82153: PUSH
82154: EMPTY
82155: LIST
82156: LIST
82157: PPUSH
82158: CALL_OW 69
82162: ST_TO_ADDR
// if not tmp then
82163: LD_VAR 0 2
82167: NOT
82168: IFFALSE 82172
// exit ;
82170: GO 82222
// CenterNowOnUnits ( tmp [ 1 ] ) ;
82172: LD_VAR 0 2
82176: PUSH
82177: LD_INT 1
82179: ARRAY
82180: PPUSH
82181: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
82185: LD_VAR 0 2
82189: PUSH
82190: LD_INT 1
82192: ARRAY
82193: PPUSH
82194: CALL_OW 65
// end ; 5 .. 7 :
82198: GO 82222
82200: LD_INT 5
82202: DOUBLE
82203: GREATEREQUAL
82204: IFFALSE 82212
82206: LD_INT 7
82208: DOUBLE
82209: LESSEQUAL
82210: IFTRUE 82214
82212: GO 82221
82214: POP
// StreamSibBomb ; end ;
82215: CALL 78459 0 0
82219: GO 82222
82221: POP
// end ;
82222: PPOPN 3
82224: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
82225: LD_EXP 64
82229: PUSH
82230: LD_EXP 114
82234: AND
82235: IFFALSE 82391
82237: GO 82239
82239: DISABLE
82240: LD_INT 0
82242: PPUSH
82243: PPUSH
82244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
82245: LD_ADDR_VAR 0 2
82249: PUSH
82250: LD_INT 81
82252: PUSH
82253: LD_OWVAR 2
82257: PUSH
82258: EMPTY
82259: LIST
82260: LIST
82261: PUSH
82262: LD_INT 2
82264: PUSH
82265: LD_INT 21
82267: PUSH
82268: LD_INT 1
82270: PUSH
82271: EMPTY
82272: LIST
82273: LIST
82274: PUSH
82275: LD_INT 21
82277: PUSH
82278: LD_INT 2
82280: PUSH
82281: EMPTY
82282: LIST
82283: LIST
82284: PUSH
82285: EMPTY
82286: LIST
82287: LIST
82288: LIST
82289: PUSH
82290: EMPTY
82291: LIST
82292: LIST
82293: PPUSH
82294: CALL_OW 69
82298: ST_TO_ADDR
// if not tmp then
82299: LD_VAR 0 2
82303: NOT
82304: IFFALSE 82308
// exit ;
82306: GO 82391
// p := 0 ;
82308: LD_ADDR_VAR 0 3
82312: PUSH
82313: LD_INT 0
82315: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82316: LD_INT 35
82318: PPUSH
82319: CALL_OW 67
// p := p + 1 ;
82323: LD_ADDR_VAR 0 3
82327: PUSH
82328: LD_VAR 0 3
82332: PUSH
82333: LD_INT 1
82335: PLUS
82336: ST_TO_ADDR
// for i in tmp do
82337: LD_ADDR_VAR 0 1
82341: PUSH
82342: LD_VAR 0 2
82346: PUSH
82347: FOR_IN
82348: IFFALSE 82379
// if GetLives ( i ) < 1000 then
82350: LD_VAR 0 1
82354: PPUSH
82355: CALL_OW 256
82359: PUSH
82360: LD_INT 1000
82362: LESS
82363: IFFALSE 82377
// SetLives ( i , 1000 ) ;
82365: LD_VAR 0 1
82369: PPUSH
82370: LD_INT 1000
82372: PPUSH
82373: CALL_OW 234
82377: GO 82347
82379: POP
82380: POP
// until p > 20 ;
82381: LD_VAR 0 3
82385: PUSH
82386: LD_INT 20
82388: GREATER
82389: IFFALSE 82316
// end ;
82391: PPOPN 3
82393: END
// every 0 0$1 trigger StreamModeActive and sTime do
82394: LD_EXP 64
82398: PUSH
82399: LD_EXP 115
82403: AND
82404: IFFALSE 82439
82406: GO 82408
82408: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
82409: LD_INT 28
82411: PPUSH
82412: LD_OWVAR 2
82416: PPUSH
82417: LD_INT 2
82419: PPUSH
82420: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
82424: LD_INT 30
82426: PPUSH
82427: LD_OWVAR 2
82431: PPUSH
82432: LD_INT 2
82434: PPUSH
82435: CALL_OW 322
// end ;
82439: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
82440: LD_EXP 64
82444: PUSH
82445: LD_EXP 116
82449: AND
82450: IFFALSE 82571
82452: GO 82454
82454: DISABLE
82455: LD_INT 0
82457: PPUSH
82458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
82459: LD_ADDR_VAR 0 2
82463: PUSH
82464: LD_INT 22
82466: PUSH
82467: LD_OWVAR 2
82471: PUSH
82472: EMPTY
82473: LIST
82474: LIST
82475: PUSH
82476: LD_INT 21
82478: PUSH
82479: LD_INT 1
82481: PUSH
82482: EMPTY
82483: LIST
82484: LIST
82485: PUSH
82486: LD_INT 3
82488: PUSH
82489: LD_INT 23
82491: PUSH
82492: LD_INT 0
82494: PUSH
82495: EMPTY
82496: LIST
82497: LIST
82498: PUSH
82499: EMPTY
82500: LIST
82501: LIST
82502: PUSH
82503: EMPTY
82504: LIST
82505: LIST
82506: LIST
82507: PPUSH
82508: CALL_OW 69
82512: ST_TO_ADDR
// if not tmp then
82513: LD_VAR 0 2
82517: NOT
82518: IFFALSE 82522
// exit ;
82520: GO 82571
// for i in tmp do
82522: LD_ADDR_VAR 0 1
82526: PUSH
82527: LD_VAR 0 2
82531: PUSH
82532: FOR_IN
82533: IFFALSE 82569
// begin if Crawls ( i ) then
82535: LD_VAR 0 1
82539: PPUSH
82540: CALL_OW 318
82544: IFFALSE 82555
// ComWalk ( i ) ;
82546: LD_VAR 0 1
82550: PPUSH
82551: CALL_OW 138
// SetClass ( i , 2 ) ;
82555: LD_VAR 0 1
82559: PPUSH
82560: LD_INT 2
82562: PPUSH
82563: CALL_OW 336
// end ;
82567: GO 82532
82569: POP
82570: POP
// end ;
82571: PPOPN 2
82573: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
82574: LD_EXP 64
82578: PUSH
82579: LD_EXP 117
82583: AND
82584: IFFALSE 82872
82586: GO 82588
82588: DISABLE
82589: LD_INT 0
82591: PPUSH
82592: PPUSH
82593: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
82594: LD_OWVAR 2
82598: PPUSH
82599: LD_INT 9
82601: PPUSH
82602: LD_INT 1
82604: PPUSH
82605: LD_INT 1
82607: PPUSH
82608: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
82612: LD_INT 9
82614: PPUSH
82615: LD_OWVAR 2
82619: PPUSH
82620: CALL_OW 343
// uc_side := 9 ;
82624: LD_ADDR_OWVAR 20
82628: PUSH
82629: LD_INT 9
82631: ST_TO_ADDR
// uc_nation := 2 ;
82632: LD_ADDR_OWVAR 21
82636: PUSH
82637: LD_INT 2
82639: ST_TO_ADDR
// hc_name := Dark Warrior ;
82640: LD_ADDR_OWVAR 26
82644: PUSH
82645: LD_STRING Dark Warrior
82647: ST_TO_ADDR
// hc_gallery :=  ;
82648: LD_ADDR_OWVAR 33
82652: PUSH
82653: LD_STRING 
82655: ST_TO_ADDR
// hc_noskilllimit := true ;
82656: LD_ADDR_OWVAR 76
82660: PUSH
82661: LD_INT 1
82663: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
82664: LD_ADDR_OWVAR 31
82668: PUSH
82669: LD_INT 30
82671: PUSH
82672: LD_INT 30
82674: PUSH
82675: LD_INT 30
82677: PUSH
82678: LD_INT 30
82680: PUSH
82681: EMPTY
82682: LIST
82683: LIST
82684: LIST
82685: LIST
82686: ST_TO_ADDR
// un := CreateHuman ;
82687: LD_ADDR_VAR 0 3
82691: PUSH
82692: CALL_OW 44
82696: ST_TO_ADDR
// hc_noskilllimit := false ;
82697: LD_ADDR_OWVAR 76
82701: PUSH
82702: LD_INT 0
82704: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
82705: LD_VAR 0 3
82709: PPUSH
82710: LD_INT 1
82712: PPUSH
82713: CALL_OW 51
// ToLua ( playRanger() ) ;
82717: LD_STRING playRanger()
82719: PPUSH
82720: CALL_OW 559
// p := 0 ;
82724: LD_ADDR_VAR 0 2
82728: PUSH
82729: LD_INT 0
82731: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82732: LD_INT 35
82734: PPUSH
82735: CALL_OW 67
// p := p + 1 ;
82739: LD_ADDR_VAR 0 2
82743: PUSH
82744: LD_VAR 0 2
82748: PUSH
82749: LD_INT 1
82751: PLUS
82752: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
82753: LD_VAR 0 3
82757: PPUSH
82758: CALL_OW 256
82762: PUSH
82763: LD_INT 1000
82765: LESS
82766: IFFALSE 82780
// SetLives ( un , 1000 ) ;
82768: LD_VAR 0 3
82772: PPUSH
82773: LD_INT 1000
82775: PPUSH
82776: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
82780: LD_VAR 0 3
82784: PPUSH
82785: LD_INT 81
82787: PUSH
82788: LD_OWVAR 2
82792: PUSH
82793: EMPTY
82794: LIST
82795: LIST
82796: PUSH
82797: LD_INT 91
82799: PUSH
82800: LD_VAR 0 3
82804: PUSH
82805: LD_INT 30
82807: PUSH
82808: EMPTY
82809: LIST
82810: LIST
82811: LIST
82812: PUSH
82813: EMPTY
82814: LIST
82815: LIST
82816: PPUSH
82817: CALL_OW 69
82821: PPUSH
82822: LD_VAR 0 3
82826: PPUSH
82827: CALL_OW 74
82831: PPUSH
82832: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
82836: LD_VAR 0 2
82840: PUSH
82841: LD_INT 80
82843: GREATER
82844: PUSH
82845: LD_VAR 0 3
82849: PPUSH
82850: CALL_OW 301
82854: OR
82855: IFFALSE 82732
// if un then
82857: LD_VAR 0 3
82861: IFFALSE 82872
// RemoveUnit ( un ) ;
82863: LD_VAR 0 3
82867: PPUSH
82868: CALL_OW 64
// end ;
82872: PPOPN 3
82874: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
82875: LD_EXP 118
82879: IFFALSE 82995
82881: GO 82883
82883: DISABLE
82884: LD_INT 0
82886: PPUSH
82887: PPUSH
82888: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
82889: LD_ADDR_VAR 0 2
82893: PUSH
82894: LD_INT 81
82896: PUSH
82897: LD_OWVAR 2
82901: PUSH
82902: EMPTY
82903: LIST
82904: LIST
82905: PUSH
82906: LD_INT 21
82908: PUSH
82909: LD_INT 1
82911: PUSH
82912: EMPTY
82913: LIST
82914: LIST
82915: PUSH
82916: EMPTY
82917: LIST
82918: LIST
82919: PPUSH
82920: CALL_OW 69
82924: ST_TO_ADDR
// ToLua ( playComputer() ) ;
82925: LD_STRING playComputer()
82927: PPUSH
82928: CALL_OW 559
// if not tmp then
82932: LD_VAR 0 2
82936: NOT
82937: IFFALSE 82941
// exit ;
82939: GO 82995
// for i in tmp do
82941: LD_ADDR_VAR 0 1
82945: PUSH
82946: LD_VAR 0 2
82950: PUSH
82951: FOR_IN
82952: IFFALSE 82993
// for j := 1 to 4 do
82954: LD_ADDR_VAR 0 3
82958: PUSH
82959: DOUBLE
82960: LD_INT 1
82962: DEC
82963: ST_TO_ADDR
82964: LD_INT 4
82966: PUSH
82967: FOR_TO
82968: IFFALSE 82989
// SetSkill ( i , j , 10 ) ;
82970: LD_VAR 0 1
82974: PPUSH
82975: LD_VAR 0 3
82979: PPUSH
82980: LD_INT 10
82982: PPUSH
82983: CALL_OW 237
82987: GO 82967
82989: POP
82990: POP
82991: GO 82951
82993: POP
82994: POP
// end ;
82995: PPOPN 3
82997: END
// every 0 0$1 trigger s30 do var i , tmp ;
82998: LD_EXP 119
83002: IFFALSE 83071
83004: GO 83006
83006: DISABLE
83007: LD_INT 0
83009: PPUSH
83010: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
83011: LD_ADDR_VAR 0 2
83015: PUSH
83016: LD_INT 22
83018: PUSH
83019: LD_OWVAR 2
83023: PUSH
83024: EMPTY
83025: LIST
83026: LIST
83027: PPUSH
83028: CALL_OW 69
83032: ST_TO_ADDR
// if not tmp then
83033: LD_VAR 0 2
83037: NOT
83038: IFFALSE 83042
// exit ;
83040: GO 83071
// for i in tmp do
83042: LD_ADDR_VAR 0 1
83046: PUSH
83047: LD_VAR 0 2
83051: PUSH
83052: FOR_IN
83053: IFFALSE 83069
// SetLives ( i , 300 ) ;
83055: LD_VAR 0 1
83059: PPUSH
83060: LD_INT 300
83062: PPUSH
83063: CALL_OW 234
83067: GO 83052
83069: POP
83070: POP
// end ;
83071: PPOPN 2
83073: END
// every 0 0$1 trigger s60 do var i , tmp ;
83074: LD_EXP 120
83078: IFFALSE 83147
83080: GO 83082
83082: DISABLE
83083: LD_INT 0
83085: PPUSH
83086: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
83087: LD_ADDR_VAR 0 2
83091: PUSH
83092: LD_INT 22
83094: PUSH
83095: LD_OWVAR 2
83099: PUSH
83100: EMPTY
83101: LIST
83102: LIST
83103: PPUSH
83104: CALL_OW 69
83108: ST_TO_ADDR
// if not tmp then
83109: LD_VAR 0 2
83113: NOT
83114: IFFALSE 83118
// exit ;
83116: GO 83147
// for i in tmp do
83118: LD_ADDR_VAR 0 1
83122: PUSH
83123: LD_VAR 0 2
83127: PUSH
83128: FOR_IN
83129: IFFALSE 83145
// SetLives ( i , 600 ) ;
83131: LD_VAR 0 1
83135: PPUSH
83136: LD_INT 600
83138: PPUSH
83139: CALL_OW 234
83143: GO 83128
83145: POP
83146: POP
// end ;
83147: PPOPN 2
83149: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
83150: LD_INT 0
83152: PPUSH
// case cmd of 301 :
83153: LD_VAR 0 1
83157: PUSH
83158: LD_INT 301
83160: DOUBLE
83161: EQUAL
83162: IFTRUE 83166
83164: GO 83198
83166: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
83167: LD_VAR 0 6
83171: PPUSH
83172: LD_VAR 0 7
83176: PPUSH
83177: LD_VAR 0 8
83181: PPUSH
83182: LD_VAR 0 4
83186: PPUSH
83187: LD_VAR 0 5
83191: PPUSH
83192: CALL 84399 0 5
83196: GO 83319
83198: LD_INT 302
83200: DOUBLE
83201: EQUAL
83202: IFTRUE 83206
83204: GO 83243
83206: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
83207: LD_VAR 0 6
83211: PPUSH
83212: LD_VAR 0 7
83216: PPUSH
83217: LD_VAR 0 8
83221: PPUSH
83222: LD_VAR 0 9
83226: PPUSH
83227: LD_VAR 0 4
83231: PPUSH
83232: LD_VAR 0 5
83236: PPUSH
83237: CALL 84490 0 6
83241: GO 83319
83243: LD_INT 303
83245: DOUBLE
83246: EQUAL
83247: IFTRUE 83251
83249: GO 83288
83251: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
83252: LD_VAR 0 6
83256: PPUSH
83257: LD_VAR 0 7
83261: PPUSH
83262: LD_VAR 0 8
83266: PPUSH
83267: LD_VAR 0 9
83271: PPUSH
83272: LD_VAR 0 4
83276: PPUSH
83277: LD_VAR 0 5
83281: PPUSH
83282: CALL 83324 0 6
83286: GO 83319
83288: LD_INT 304
83290: DOUBLE
83291: EQUAL
83292: IFTRUE 83296
83294: GO 83318
83296: POP
// hHackTeleport ( unit , x , y ) ; end ;
83297: LD_VAR 0 2
83301: PPUSH
83302: LD_VAR 0 4
83306: PPUSH
83307: LD_VAR 0 5
83311: PPUSH
83312: CALL 85083 0 3
83316: GO 83319
83318: POP
// end ;
83319: LD_VAR 0 12
83323: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
83324: LD_INT 0
83326: PPUSH
83327: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
83328: LD_VAR 0 1
83332: PUSH
83333: LD_INT 1
83335: LESS
83336: PUSH
83337: LD_VAR 0 1
83341: PUSH
83342: LD_INT 3
83344: GREATER
83345: OR
83346: PUSH
83347: LD_VAR 0 5
83351: PPUSH
83352: LD_VAR 0 6
83356: PPUSH
83357: CALL_OW 428
83361: OR
83362: IFFALSE 83366
// exit ;
83364: GO 84086
// uc_side := your_side ;
83366: LD_ADDR_OWVAR 20
83370: PUSH
83371: LD_OWVAR 2
83375: ST_TO_ADDR
// uc_nation := nation ;
83376: LD_ADDR_OWVAR 21
83380: PUSH
83381: LD_VAR 0 1
83385: ST_TO_ADDR
// bc_level = 1 ;
83386: LD_ADDR_OWVAR 43
83390: PUSH
83391: LD_INT 1
83393: ST_TO_ADDR
// case btype of 1 :
83394: LD_VAR 0 2
83398: PUSH
83399: LD_INT 1
83401: DOUBLE
83402: EQUAL
83403: IFTRUE 83407
83405: GO 83418
83407: POP
// bc_type := b_depot ; 2 :
83408: LD_ADDR_OWVAR 42
83412: PUSH
83413: LD_INT 0
83415: ST_TO_ADDR
83416: GO 84030
83418: LD_INT 2
83420: DOUBLE
83421: EQUAL
83422: IFTRUE 83426
83424: GO 83437
83426: POP
// bc_type := b_warehouse ; 3 :
83427: LD_ADDR_OWVAR 42
83431: PUSH
83432: LD_INT 1
83434: ST_TO_ADDR
83435: GO 84030
83437: LD_INT 3
83439: DOUBLE
83440: EQUAL
83441: IFTRUE 83445
83443: GO 83456
83445: POP
// bc_type := b_lab ; 4 .. 9 :
83446: LD_ADDR_OWVAR 42
83450: PUSH
83451: LD_INT 6
83453: ST_TO_ADDR
83454: GO 84030
83456: LD_INT 4
83458: DOUBLE
83459: GREATEREQUAL
83460: IFFALSE 83468
83462: LD_INT 9
83464: DOUBLE
83465: LESSEQUAL
83466: IFTRUE 83470
83468: GO 83522
83470: POP
// begin bc_type := b_lab_half ;
83471: LD_ADDR_OWVAR 42
83475: PUSH
83476: LD_INT 7
83478: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
83479: LD_ADDR_OWVAR 44
83483: PUSH
83484: LD_INT 10
83486: PUSH
83487: LD_INT 11
83489: PUSH
83490: LD_INT 12
83492: PUSH
83493: LD_INT 15
83495: PUSH
83496: LD_INT 14
83498: PUSH
83499: LD_INT 13
83501: PUSH
83502: EMPTY
83503: LIST
83504: LIST
83505: LIST
83506: LIST
83507: LIST
83508: LIST
83509: PUSH
83510: LD_VAR 0 2
83514: PUSH
83515: LD_INT 3
83517: MINUS
83518: ARRAY
83519: ST_TO_ADDR
// end ; 10 .. 13 :
83520: GO 84030
83522: LD_INT 10
83524: DOUBLE
83525: GREATEREQUAL
83526: IFFALSE 83534
83528: LD_INT 13
83530: DOUBLE
83531: LESSEQUAL
83532: IFTRUE 83536
83534: GO 83613
83536: POP
// begin bc_type := b_lab_full ;
83537: LD_ADDR_OWVAR 42
83541: PUSH
83542: LD_INT 8
83544: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
83545: LD_ADDR_OWVAR 44
83549: PUSH
83550: LD_INT 10
83552: PUSH
83553: LD_INT 12
83555: PUSH
83556: LD_INT 14
83558: PUSH
83559: LD_INT 13
83561: PUSH
83562: EMPTY
83563: LIST
83564: LIST
83565: LIST
83566: LIST
83567: PUSH
83568: LD_VAR 0 2
83572: PUSH
83573: LD_INT 9
83575: MINUS
83576: ARRAY
83577: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
83578: LD_ADDR_OWVAR 45
83582: PUSH
83583: LD_INT 11
83585: PUSH
83586: LD_INT 15
83588: PUSH
83589: LD_INT 12
83591: PUSH
83592: LD_INT 15
83594: PUSH
83595: EMPTY
83596: LIST
83597: LIST
83598: LIST
83599: LIST
83600: PUSH
83601: LD_VAR 0 2
83605: PUSH
83606: LD_INT 9
83608: MINUS
83609: ARRAY
83610: ST_TO_ADDR
// end ; 14 :
83611: GO 84030
83613: LD_INT 14
83615: DOUBLE
83616: EQUAL
83617: IFTRUE 83621
83619: GO 83632
83621: POP
// bc_type := b_workshop ; 15 :
83622: LD_ADDR_OWVAR 42
83626: PUSH
83627: LD_INT 2
83629: ST_TO_ADDR
83630: GO 84030
83632: LD_INT 15
83634: DOUBLE
83635: EQUAL
83636: IFTRUE 83640
83638: GO 83651
83640: POP
// bc_type := b_factory ; 16 :
83641: LD_ADDR_OWVAR 42
83645: PUSH
83646: LD_INT 3
83648: ST_TO_ADDR
83649: GO 84030
83651: LD_INT 16
83653: DOUBLE
83654: EQUAL
83655: IFTRUE 83659
83657: GO 83670
83659: POP
// bc_type := b_ext_gun ; 17 :
83660: LD_ADDR_OWVAR 42
83664: PUSH
83665: LD_INT 17
83667: ST_TO_ADDR
83668: GO 84030
83670: LD_INT 17
83672: DOUBLE
83673: EQUAL
83674: IFTRUE 83678
83676: GO 83706
83678: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
83679: LD_ADDR_OWVAR 42
83683: PUSH
83684: LD_INT 19
83686: PUSH
83687: LD_INT 23
83689: PUSH
83690: LD_INT 19
83692: PUSH
83693: EMPTY
83694: LIST
83695: LIST
83696: LIST
83697: PUSH
83698: LD_VAR 0 1
83702: ARRAY
83703: ST_TO_ADDR
83704: GO 84030
83706: LD_INT 18
83708: DOUBLE
83709: EQUAL
83710: IFTRUE 83714
83712: GO 83725
83714: POP
// bc_type := b_ext_radar ; 19 :
83715: LD_ADDR_OWVAR 42
83719: PUSH
83720: LD_INT 20
83722: ST_TO_ADDR
83723: GO 84030
83725: LD_INT 19
83727: DOUBLE
83728: EQUAL
83729: IFTRUE 83733
83731: GO 83744
83733: POP
// bc_type := b_ext_radio ; 20 :
83734: LD_ADDR_OWVAR 42
83738: PUSH
83739: LD_INT 22
83741: ST_TO_ADDR
83742: GO 84030
83744: LD_INT 20
83746: DOUBLE
83747: EQUAL
83748: IFTRUE 83752
83750: GO 83763
83752: POP
// bc_type := b_ext_siberium ; 21 :
83753: LD_ADDR_OWVAR 42
83757: PUSH
83758: LD_INT 21
83760: ST_TO_ADDR
83761: GO 84030
83763: LD_INT 21
83765: DOUBLE
83766: EQUAL
83767: IFTRUE 83771
83769: GO 83782
83771: POP
// bc_type := b_ext_computer ; 22 :
83772: LD_ADDR_OWVAR 42
83776: PUSH
83777: LD_INT 24
83779: ST_TO_ADDR
83780: GO 84030
83782: LD_INT 22
83784: DOUBLE
83785: EQUAL
83786: IFTRUE 83790
83788: GO 83801
83790: POP
// bc_type := b_ext_track ; 23 :
83791: LD_ADDR_OWVAR 42
83795: PUSH
83796: LD_INT 16
83798: ST_TO_ADDR
83799: GO 84030
83801: LD_INT 23
83803: DOUBLE
83804: EQUAL
83805: IFTRUE 83809
83807: GO 83820
83809: POP
// bc_type := b_ext_laser ; 24 :
83810: LD_ADDR_OWVAR 42
83814: PUSH
83815: LD_INT 25
83817: ST_TO_ADDR
83818: GO 84030
83820: LD_INT 24
83822: DOUBLE
83823: EQUAL
83824: IFTRUE 83828
83826: GO 83839
83828: POP
// bc_type := b_control_tower ; 25 :
83829: LD_ADDR_OWVAR 42
83833: PUSH
83834: LD_INT 36
83836: ST_TO_ADDR
83837: GO 84030
83839: LD_INT 25
83841: DOUBLE
83842: EQUAL
83843: IFTRUE 83847
83845: GO 83858
83847: POP
// bc_type := b_breastwork ; 26 :
83848: LD_ADDR_OWVAR 42
83852: PUSH
83853: LD_INT 31
83855: ST_TO_ADDR
83856: GO 84030
83858: LD_INT 26
83860: DOUBLE
83861: EQUAL
83862: IFTRUE 83866
83864: GO 83877
83866: POP
// bc_type := b_bunker ; 27 :
83867: LD_ADDR_OWVAR 42
83871: PUSH
83872: LD_INT 32
83874: ST_TO_ADDR
83875: GO 84030
83877: LD_INT 27
83879: DOUBLE
83880: EQUAL
83881: IFTRUE 83885
83883: GO 83896
83885: POP
// bc_type := b_turret ; 28 :
83886: LD_ADDR_OWVAR 42
83890: PUSH
83891: LD_INT 33
83893: ST_TO_ADDR
83894: GO 84030
83896: LD_INT 28
83898: DOUBLE
83899: EQUAL
83900: IFTRUE 83904
83902: GO 83915
83904: POP
// bc_type := b_armoury ; 29 :
83905: LD_ADDR_OWVAR 42
83909: PUSH
83910: LD_INT 4
83912: ST_TO_ADDR
83913: GO 84030
83915: LD_INT 29
83917: DOUBLE
83918: EQUAL
83919: IFTRUE 83923
83921: GO 83934
83923: POP
// bc_type := b_barracks ; 30 :
83924: LD_ADDR_OWVAR 42
83928: PUSH
83929: LD_INT 5
83931: ST_TO_ADDR
83932: GO 84030
83934: LD_INT 30
83936: DOUBLE
83937: EQUAL
83938: IFTRUE 83942
83940: GO 83953
83942: POP
// bc_type := b_solar_power ; 31 :
83943: LD_ADDR_OWVAR 42
83947: PUSH
83948: LD_INT 27
83950: ST_TO_ADDR
83951: GO 84030
83953: LD_INT 31
83955: DOUBLE
83956: EQUAL
83957: IFTRUE 83961
83959: GO 83972
83961: POP
// bc_type := b_oil_power ; 32 :
83962: LD_ADDR_OWVAR 42
83966: PUSH
83967: LD_INT 26
83969: ST_TO_ADDR
83970: GO 84030
83972: LD_INT 32
83974: DOUBLE
83975: EQUAL
83976: IFTRUE 83980
83978: GO 83991
83980: POP
// bc_type := b_siberite_power ; 33 :
83981: LD_ADDR_OWVAR 42
83985: PUSH
83986: LD_INT 28
83988: ST_TO_ADDR
83989: GO 84030
83991: LD_INT 33
83993: DOUBLE
83994: EQUAL
83995: IFTRUE 83999
83997: GO 84010
83999: POP
// bc_type := b_oil_mine ; 34 :
84000: LD_ADDR_OWVAR 42
84004: PUSH
84005: LD_INT 29
84007: ST_TO_ADDR
84008: GO 84030
84010: LD_INT 34
84012: DOUBLE
84013: EQUAL
84014: IFTRUE 84018
84016: GO 84029
84018: POP
// bc_type := b_siberite_mine ; end ;
84019: LD_ADDR_OWVAR 42
84023: PUSH
84024: LD_INT 30
84026: ST_TO_ADDR
84027: GO 84030
84029: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
84030: LD_ADDR_VAR 0 8
84034: PUSH
84035: LD_VAR 0 5
84039: PPUSH
84040: LD_VAR 0 6
84044: PPUSH
84045: LD_VAR 0 3
84049: PPUSH
84050: CALL_OW 47
84054: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
84055: LD_OWVAR 42
84059: PUSH
84060: LD_INT 32
84062: PUSH
84063: LD_INT 33
84065: PUSH
84066: EMPTY
84067: LIST
84068: LIST
84069: IN
84070: IFFALSE 84086
// PlaceWeaponTurret ( b , weapon ) ;
84072: LD_VAR 0 8
84076: PPUSH
84077: LD_VAR 0 4
84081: PPUSH
84082: CALL_OW 431
// end ;
84086: LD_VAR 0 7
84090: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
84091: LD_INT 0
84093: PPUSH
84094: PPUSH
84095: PPUSH
84096: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
84097: LD_ADDR_VAR 0 4
84101: PUSH
84102: LD_INT 22
84104: PUSH
84105: LD_OWVAR 2
84109: PUSH
84110: EMPTY
84111: LIST
84112: LIST
84113: PUSH
84114: LD_INT 2
84116: PUSH
84117: LD_INT 30
84119: PUSH
84120: LD_INT 0
84122: PUSH
84123: EMPTY
84124: LIST
84125: LIST
84126: PUSH
84127: LD_INT 30
84129: PUSH
84130: LD_INT 1
84132: PUSH
84133: EMPTY
84134: LIST
84135: LIST
84136: PUSH
84137: EMPTY
84138: LIST
84139: LIST
84140: LIST
84141: PUSH
84142: EMPTY
84143: LIST
84144: LIST
84145: PPUSH
84146: CALL_OW 69
84150: ST_TO_ADDR
// if not tmp then
84151: LD_VAR 0 4
84155: NOT
84156: IFFALSE 84160
// exit ;
84158: GO 84219
// for i in tmp do
84160: LD_ADDR_VAR 0 2
84164: PUSH
84165: LD_VAR 0 4
84169: PUSH
84170: FOR_IN
84171: IFFALSE 84217
// for j = 1 to 3 do
84173: LD_ADDR_VAR 0 3
84177: PUSH
84178: DOUBLE
84179: LD_INT 1
84181: DEC
84182: ST_TO_ADDR
84183: LD_INT 3
84185: PUSH
84186: FOR_TO
84187: IFFALSE 84213
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
84189: LD_VAR 0 2
84193: PPUSH
84194: CALL_OW 274
84198: PPUSH
84199: LD_VAR 0 3
84203: PPUSH
84204: LD_INT 99999
84206: PPUSH
84207: CALL_OW 277
84211: GO 84186
84213: POP
84214: POP
84215: GO 84170
84217: POP
84218: POP
// end ;
84219: LD_VAR 0 1
84223: RET
// export function hHackSetLevel10 ; var i , j ; begin
84224: LD_INT 0
84226: PPUSH
84227: PPUSH
84228: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
84229: LD_ADDR_VAR 0 2
84233: PUSH
84234: LD_INT 21
84236: PUSH
84237: LD_INT 1
84239: PUSH
84240: EMPTY
84241: LIST
84242: LIST
84243: PPUSH
84244: CALL_OW 69
84248: PUSH
84249: FOR_IN
84250: IFFALSE 84302
// if IsSelected ( i ) then
84252: LD_VAR 0 2
84256: PPUSH
84257: CALL_OW 306
84261: IFFALSE 84300
// begin for j := 1 to 4 do
84263: LD_ADDR_VAR 0 3
84267: PUSH
84268: DOUBLE
84269: LD_INT 1
84271: DEC
84272: ST_TO_ADDR
84273: LD_INT 4
84275: PUSH
84276: FOR_TO
84277: IFFALSE 84298
// SetSkill ( i , j , 10 ) ;
84279: LD_VAR 0 2
84283: PPUSH
84284: LD_VAR 0 3
84288: PPUSH
84289: LD_INT 10
84291: PPUSH
84292: CALL_OW 237
84296: GO 84276
84298: POP
84299: POP
// end ;
84300: GO 84249
84302: POP
84303: POP
// end ;
84304: LD_VAR 0 1
84308: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
84309: LD_INT 0
84311: PPUSH
84312: PPUSH
84313: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
84314: LD_ADDR_VAR 0 2
84318: PUSH
84319: LD_INT 22
84321: PUSH
84322: LD_OWVAR 2
84326: PUSH
84327: EMPTY
84328: LIST
84329: LIST
84330: PUSH
84331: LD_INT 21
84333: PUSH
84334: LD_INT 1
84336: PUSH
84337: EMPTY
84338: LIST
84339: LIST
84340: PUSH
84341: EMPTY
84342: LIST
84343: LIST
84344: PPUSH
84345: CALL_OW 69
84349: PUSH
84350: FOR_IN
84351: IFFALSE 84392
// begin for j := 1 to 4 do
84353: LD_ADDR_VAR 0 3
84357: PUSH
84358: DOUBLE
84359: LD_INT 1
84361: DEC
84362: ST_TO_ADDR
84363: LD_INT 4
84365: PUSH
84366: FOR_TO
84367: IFFALSE 84388
// SetSkill ( i , j , 10 ) ;
84369: LD_VAR 0 2
84373: PPUSH
84374: LD_VAR 0 3
84378: PPUSH
84379: LD_INT 10
84381: PPUSH
84382: CALL_OW 237
84386: GO 84366
84388: POP
84389: POP
// end ;
84390: GO 84350
84392: POP
84393: POP
// end ;
84394: LD_VAR 0 1
84398: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
84399: LD_INT 0
84401: PPUSH
// uc_side := your_side ;
84402: LD_ADDR_OWVAR 20
84406: PUSH
84407: LD_OWVAR 2
84411: ST_TO_ADDR
// uc_nation := nation ;
84412: LD_ADDR_OWVAR 21
84416: PUSH
84417: LD_VAR 0 1
84421: ST_TO_ADDR
// InitHc ;
84422: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
84426: LD_INT 0
84428: PPUSH
84429: LD_VAR 0 2
84433: PPUSH
84434: LD_VAR 0 3
84438: PPUSH
84439: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
84443: LD_VAR 0 4
84447: PPUSH
84448: LD_VAR 0 5
84452: PPUSH
84453: CALL_OW 428
84457: PUSH
84458: LD_INT 0
84460: EQUAL
84461: IFFALSE 84485
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
84463: CALL_OW 44
84467: PPUSH
84468: LD_VAR 0 4
84472: PPUSH
84473: LD_VAR 0 5
84477: PPUSH
84478: LD_INT 1
84480: PPUSH
84481: CALL_OW 48
// end ;
84485: LD_VAR 0 6
84489: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
84490: LD_INT 0
84492: PPUSH
84493: PPUSH
// uc_side := your_side ;
84494: LD_ADDR_OWVAR 20
84498: PUSH
84499: LD_OWVAR 2
84503: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
84504: LD_VAR 0 1
84508: PUSH
84509: LD_INT 1
84511: PUSH
84512: LD_INT 2
84514: PUSH
84515: LD_INT 3
84517: PUSH
84518: LD_INT 4
84520: PUSH
84521: LD_INT 5
84523: PUSH
84524: EMPTY
84525: LIST
84526: LIST
84527: LIST
84528: LIST
84529: LIST
84530: IN
84531: IFFALSE 84543
// uc_nation := nation_american else
84533: LD_ADDR_OWVAR 21
84537: PUSH
84538: LD_INT 1
84540: ST_TO_ADDR
84541: GO 84586
// if chassis in [ 11 , 12 , 13 , 14 ] then
84543: LD_VAR 0 1
84547: PUSH
84548: LD_INT 11
84550: PUSH
84551: LD_INT 12
84553: PUSH
84554: LD_INT 13
84556: PUSH
84557: LD_INT 14
84559: PUSH
84560: EMPTY
84561: LIST
84562: LIST
84563: LIST
84564: LIST
84565: IN
84566: IFFALSE 84578
// uc_nation := nation_arabian else
84568: LD_ADDR_OWVAR 21
84572: PUSH
84573: LD_INT 2
84575: ST_TO_ADDR
84576: GO 84586
// uc_nation := nation_russian ;
84578: LD_ADDR_OWVAR 21
84582: PUSH
84583: LD_INT 3
84585: ST_TO_ADDR
// vc_chassis := chassis ;
84586: LD_ADDR_OWVAR 37
84590: PUSH
84591: LD_VAR 0 1
84595: ST_TO_ADDR
// vc_engine := engine ;
84596: LD_ADDR_OWVAR 39
84600: PUSH
84601: LD_VAR 0 2
84605: ST_TO_ADDR
// vc_control := control ;
84606: LD_ADDR_OWVAR 38
84610: PUSH
84611: LD_VAR 0 3
84615: ST_TO_ADDR
// vc_weapon := weapon ;
84616: LD_ADDR_OWVAR 40
84620: PUSH
84621: LD_VAR 0 4
84625: ST_TO_ADDR
// un := CreateVehicle ;
84626: LD_ADDR_VAR 0 8
84630: PUSH
84631: CALL_OW 45
84635: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
84636: LD_VAR 0 8
84640: PPUSH
84641: LD_INT 0
84643: PPUSH
84644: LD_INT 5
84646: PPUSH
84647: CALL_OW 12
84651: PPUSH
84652: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
84656: LD_VAR 0 8
84660: PPUSH
84661: LD_VAR 0 5
84665: PPUSH
84666: LD_VAR 0 6
84670: PPUSH
84671: LD_INT 1
84673: PPUSH
84674: CALL_OW 48
// end ;
84678: LD_VAR 0 7
84682: RET
// export hInvincible ; every 1 do
84683: GO 84685
84685: DISABLE
// hInvincible := [ ] ;
84686: LD_ADDR_EXP 121
84690: PUSH
84691: EMPTY
84692: ST_TO_ADDR
84693: END
// every 10 do var i ;
84694: GO 84696
84696: DISABLE
84697: LD_INT 0
84699: PPUSH
// begin enable ;
84700: ENABLE
// if not hInvincible then
84701: LD_EXP 121
84705: NOT
84706: IFFALSE 84710
// exit ;
84708: GO 84754
// for i in hInvincible do
84710: LD_ADDR_VAR 0 1
84714: PUSH
84715: LD_EXP 121
84719: PUSH
84720: FOR_IN
84721: IFFALSE 84752
// if GetLives ( i ) < 1000 then
84723: LD_VAR 0 1
84727: PPUSH
84728: CALL_OW 256
84732: PUSH
84733: LD_INT 1000
84735: LESS
84736: IFFALSE 84750
// SetLives ( i , 1000 ) ;
84738: LD_VAR 0 1
84742: PPUSH
84743: LD_INT 1000
84745: PPUSH
84746: CALL_OW 234
84750: GO 84720
84752: POP
84753: POP
// end ;
84754: PPOPN 1
84756: END
// export function hHackInvincible ; var i ; begin
84757: LD_INT 0
84759: PPUSH
84760: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
84761: LD_ADDR_VAR 0 2
84765: PUSH
84766: LD_INT 2
84768: PUSH
84769: LD_INT 21
84771: PUSH
84772: LD_INT 1
84774: PUSH
84775: EMPTY
84776: LIST
84777: LIST
84778: PUSH
84779: LD_INT 21
84781: PUSH
84782: LD_INT 2
84784: PUSH
84785: EMPTY
84786: LIST
84787: LIST
84788: PUSH
84789: EMPTY
84790: LIST
84791: LIST
84792: LIST
84793: PPUSH
84794: CALL_OW 69
84798: PUSH
84799: FOR_IN
84800: IFFALSE 84861
// if IsSelected ( i ) then
84802: LD_VAR 0 2
84806: PPUSH
84807: CALL_OW 306
84811: IFFALSE 84859
// begin if i in hInvincible then
84813: LD_VAR 0 2
84817: PUSH
84818: LD_EXP 121
84822: IN
84823: IFFALSE 84843
// hInvincible := hInvincible diff i else
84825: LD_ADDR_EXP 121
84829: PUSH
84830: LD_EXP 121
84834: PUSH
84835: LD_VAR 0 2
84839: DIFF
84840: ST_TO_ADDR
84841: GO 84859
// hInvincible := hInvincible union i ;
84843: LD_ADDR_EXP 121
84847: PUSH
84848: LD_EXP 121
84852: PUSH
84853: LD_VAR 0 2
84857: UNION
84858: ST_TO_ADDR
// end ;
84859: GO 84799
84861: POP
84862: POP
// end ;
84863: LD_VAR 0 1
84867: RET
// export function hHackInvisible ; var i , j ; begin
84868: LD_INT 0
84870: PPUSH
84871: PPUSH
84872: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
84873: LD_ADDR_VAR 0 2
84877: PUSH
84878: LD_INT 21
84880: PUSH
84881: LD_INT 1
84883: PUSH
84884: EMPTY
84885: LIST
84886: LIST
84887: PPUSH
84888: CALL_OW 69
84892: PUSH
84893: FOR_IN
84894: IFFALSE 84918
// if IsSelected ( i ) then
84896: LD_VAR 0 2
84900: PPUSH
84901: CALL_OW 306
84905: IFFALSE 84916
// ComForceInvisible ( i ) ;
84907: LD_VAR 0 2
84911: PPUSH
84912: CALL_OW 496
84916: GO 84893
84918: POP
84919: POP
// end ;
84920: LD_VAR 0 1
84924: RET
// export function hHackChangeYourSide ; begin
84925: LD_INT 0
84927: PPUSH
// if your_side = 8 then
84928: LD_OWVAR 2
84932: PUSH
84933: LD_INT 8
84935: EQUAL
84936: IFFALSE 84948
// your_side := 0 else
84938: LD_ADDR_OWVAR 2
84942: PUSH
84943: LD_INT 0
84945: ST_TO_ADDR
84946: GO 84962
// your_side := your_side + 1 ;
84948: LD_ADDR_OWVAR 2
84952: PUSH
84953: LD_OWVAR 2
84957: PUSH
84958: LD_INT 1
84960: PLUS
84961: ST_TO_ADDR
// end ;
84962: LD_VAR 0 1
84966: RET
// export function hHackChangeUnitSide ; var i , j ; begin
84967: LD_INT 0
84969: PPUSH
84970: PPUSH
84971: PPUSH
// for i in all_units do
84972: LD_ADDR_VAR 0 2
84976: PUSH
84977: LD_OWVAR 3
84981: PUSH
84982: FOR_IN
84983: IFFALSE 85061
// if IsSelected ( i ) then
84985: LD_VAR 0 2
84989: PPUSH
84990: CALL_OW 306
84994: IFFALSE 85059
// begin j := GetSide ( i ) ;
84996: LD_ADDR_VAR 0 3
85000: PUSH
85001: LD_VAR 0 2
85005: PPUSH
85006: CALL_OW 255
85010: ST_TO_ADDR
// if j = 8 then
85011: LD_VAR 0 3
85015: PUSH
85016: LD_INT 8
85018: EQUAL
85019: IFFALSE 85031
// j := 0 else
85021: LD_ADDR_VAR 0 3
85025: PUSH
85026: LD_INT 0
85028: ST_TO_ADDR
85029: GO 85045
// j := j + 1 ;
85031: LD_ADDR_VAR 0 3
85035: PUSH
85036: LD_VAR 0 3
85040: PUSH
85041: LD_INT 1
85043: PLUS
85044: ST_TO_ADDR
// SetSide ( i , j ) ;
85045: LD_VAR 0 2
85049: PPUSH
85050: LD_VAR 0 3
85054: PPUSH
85055: CALL_OW 235
// end ;
85059: GO 84982
85061: POP
85062: POP
// end ;
85063: LD_VAR 0 1
85067: RET
// export function hHackFog ; begin
85068: LD_INT 0
85070: PPUSH
// FogOff ( true ) ;
85071: LD_INT 1
85073: PPUSH
85074: CALL_OW 344
// end ;
85078: LD_VAR 0 1
85082: RET
// export function hHackTeleport ( unit , x , y ) ; begin
85083: LD_INT 0
85085: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
85086: LD_VAR 0 1
85090: PPUSH
85091: LD_VAR 0 2
85095: PPUSH
85096: LD_VAR 0 3
85100: PPUSH
85101: LD_INT 1
85103: PPUSH
85104: LD_INT 1
85106: PPUSH
85107: CALL_OW 483
// CenterOnXY ( x , y ) ;
85111: LD_VAR 0 2
85115: PPUSH
85116: LD_VAR 0 3
85120: PPUSH
85121: CALL_OW 84
// end ;
85125: LD_VAR 0 4
85129: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
85130: LD_INT 0
85132: PPUSH
85133: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
85134: LD_VAR 0 1
85138: NOT
85139: PUSH
85140: LD_VAR 0 2
85144: PPUSH
85145: LD_VAR 0 3
85149: PPUSH
85150: CALL_OW 488
85154: NOT
85155: OR
85156: PUSH
85157: LD_VAR 0 1
85161: PPUSH
85162: CALL_OW 266
85166: PUSH
85167: LD_INT 3
85169: NONEQUAL
85170: PUSH
85171: LD_VAR 0 1
85175: PPUSH
85176: CALL_OW 247
85180: PUSH
85181: LD_INT 1
85183: EQUAL
85184: NOT
85185: AND
85186: OR
85187: IFFALSE 85191
// exit ;
85189: GO 85340
// if GetType ( factory ) = unit_human then
85191: LD_VAR 0 1
85195: PPUSH
85196: CALL_OW 247
85200: PUSH
85201: LD_INT 1
85203: EQUAL
85204: IFFALSE 85221
// factory := IsInUnit ( factory ) ;
85206: LD_ADDR_VAR 0 1
85210: PUSH
85211: LD_VAR 0 1
85215: PPUSH
85216: CALL_OW 310
85220: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
85221: LD_VAR 0 1
85225: PPUSH
85226: CALL_OW 266
85230: PUSH
85231: LD_INT 3
85233: NONEQUAL
85234: IFFALSE 85238
// exit ;
85236: GO 85340
// if HexInfo ( x , y ) = factory then
85238: LD_VAR 0 2
85242: PPUSH
85243: LD_VAR 0 3
85247: PPUSH
85248: CALL_OW 428
85252: PUSH
85253: LD_VAR 0 1
85257: EQUAL
85258: IFFALSE 85285
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
85260: LD_ADDR_EXP 122
85264: PUSH
85265: LD_EXP 122
85269: PPUSH
85270: LD_VAR 0 1
85274: PPUSH
85275: LD_INT 0
85277: PPUSH
85278: CALL_OW 1
85282: ST_TO_ADDR
85283: GO 85336
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
85285: LD_ADDR_EXP 122
85289: PUSH
85290: LD_EXP 122
85294: PPUSH
85295: LD_VAR 0 1
85299: PPUSH
85300: LD_VAR 0 1
85304: PPUSH
85305: CALL_OW 255
85309: PUSH
85310: LD_VAR 0 1
85314: PUSH
85315: LD_VAR 0 2
85319: PUSH
85320: LD_VAR 0 3
85324: PUSH
85325: EMPTY
85326: LIST
85327: LIST
85328: LIST
85329: LIST
85330: PPUSH
85331: CALL_OW 1
85335: ST_TO_ADDR
// UpdateFactoryWaypoints ;
85336: CALL 85345 0 0
// end ;
85340: LD_VAR 0 4
85344: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
85345: LD_INT 0
85347: PPUSH
85348: PPUSH
85349: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
85350: LD_STRING resetFactoryWaypoint();
85352: PPUSH
85353: CALL_OW 559
// if factoryWaypoints then
85357: LD_EXP 122
85361: IFFALSE 85487
// begin list := PrepareArray ( factoryWaypoints ) ;
85363: LD_ADDR_VAR 0 3
85367: PUSH
85368: LD_EXP 122
85372: PPUSH
85373: CALL 70452 0 1
85377: ST_TO_ADDR
// for i := 1 to list do
85378: LD_ADDR_VAR 0 2
85382: PUSH
85383: DOUBLE
85384: LD_INT 1
85386: DEC
85387: ST_TO_ADDR
85388: LD_VAR 0 3
85392: PUSH
85393: FOR_TO
85394: IFFALSE 85485
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
85396: LD_STRING setFactoryWaypointXY(
85398: PUSH
85399: LD_VAR 0 3
85403: PUSH
85404: LD_VAR 0 2
85408: ARRAY
85409: PUSH
85410: LD_INT 1
85412: ARRAY
85413: STR
85414: PUSH
85415: LD_STRING ,
85417: STR
85418: PUSH
85419: LD_VAR 0 3
85423: PUSH
85424: LD_VAR 0 2
85428: ARRAY
85429: PUSH
85430: LD_INT 2
85432: ARRAY
85433: STR
85434: PUSH
85435: LD_STRING ,
85437: STR
85438: PUSH
85439: LD_VAR 0 3
85443: PUSH
85444: LD_VAR 0 2
85448: ARRAY
85449: PUSH
85450: LD_INT 3
85452: ARRAY
85453: STR
85454: PUSH
85455: LD_STRING ,
85457: STR
85458: PUSH
85459: LD_VAR 0 3
85463: PUSH
85464: LD_VAR 0 2
85468: ARRAY
85469: PUSH
85470: LD_INT 4
85472: ARRAY
85473: STR
85474: PUSH
85475: LD_STRING )
85477: STR
85478: PPUSH
85479: CALL_OW 559
85483: GO 85393
85485: POP
85486: POP
// end ; end ;
85487: LD_VAR 0 1
85491: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
85492: LD_INT 0
85494: PPUSH
// if HexInfo ( x , y ) = warehouse then
85495: LD_VAR 0 2
85499: PPUSH
85500: LD_VAR 0 3
85504: PPUSH
85505: CALL_OW 428
85509: PUSH
85510: LD_VAR 0 1
85514: EQUAL
85515: IFFALSE 85542
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
85517: LD_ADDR_EXP 123
85521: PUSH
85522: LD_EXP 123
85526: PPUSH
85527: LD_VAR 0 1
85531: PPUSH
85532: LD_INT 0
85534: PPUSH
85535: CALL_OW 1
85539: ST_TO_ADDR
85540: GO 85593
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
85542: LD_ADDR_EXP 123
85546: PUSH
85547: LD_EXP 123
85551: PPUSH
85552: LD_VAR 0 1
85556: PPUSH
85557: LD_VAR 0 1
85561: PPUSH
85562: CALL_OW 255
85566: PUSH
85567: LD_VAR 0 1
85571: PUSH
85572: LD_VAR 0 2
85576: PUSH
85577: LD_VAR 0 3
85581: PUSH
85582: EMPTY
85583: LIST
85584: LIST
85585: LIST
85586: LIST
85587: PPUSH
85588: CALL_OW 1
85592: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
85593: CALL 85602 0 0
// end ;
85597: LD_VAR 0 4
85601: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
85602: LD_INT 0
85604: PPUSH
85605: PPUSH
85606: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
85607: LD_STRING resetWarehouseGatheringPoints();
85609: PPUSH
85610: CALL_OW 559
// if warehouseGatheringPoints then
85614: LD_EXP 123
85618: IFFALSE 85744
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
85620: LD_ADDR_VAR 0 3
85624: PUSH
85625: LD_EXP 123
85629: PPUSH
85630: CALL 70452 0 1
85634: ST_TO_ADDR
// for i := 1 to list do
85635: LD_ADDR_VAR 0 2
85639: PUSH
85640: DOUBLE
85641: LD_INT 1
85643: DEC
85644: ST_TO_ADDR
85645: LD_VAR 0 3
85649: PUSH
85650: FOR_TO
85651: IFFALSE 85742
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
85653: LD_STRING setWarehouseGatheringPointXY(
85655: PUSH
85656: LD_VAR 0 3
85660: PUSH
85661: LD_VAR 0 2
85665: ARRAY
85666: PUSH
85667: LD_INT 1
85669: ARRAY
85670: STR
85671: PUSH
85672: LD_STRING ,
85674: STR
85675: PUSH
85676: LD_VAR 0 3
85680: PUSH
85681: LD_VAR 0 2
85685: ARRAY
85686: PUSH
85687: LD_INT 2
85689: ARRAY
85690: STR
85691: PUSH
85692: LD_STRING ,
85694: STR
85695: PUSH
85696: LD_VAR 0 3
85700: PUSH
85701: LD_VAR 0 2
85705: ARRAY
85706: PUSH
85707: LD_INT 3
85709: ARRAY
85710: STR
85711: PUSH
85712: LD_STRING ,
85714: STR
85715: PUSH
85716: LD_VAR 0 3
85720: PUSH
85721: LD_VAR 0 2
85725: ARRAY
85726: PUSH
85727: LD_INT 4
85729: ARRAY
85730: STR
85731: PUSH
85732: LD_STRING )
85734: STR
85735: PPUSH
85736: CALL_OW 559
85740: GO 85650
85742: POP
85743: POP
// end ; end ;
85744: LD_VAR 0 1
85748: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
85749: LD_EXP 123
85753: IFFALSE 86438
85755: GO 85757
85757: DISABLE
85758: LD_INT 0
85760: PPUSH
85761: PPUSH
85762: PPUSH
85763: PPUSH
85764: PPUSH
85765: PPUSH
85766: PPUSH
85767: PPUSH
85768: PPUSH
// begin enable ;
85769: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
85770: LD_ADDR_VAR 0 3
85774: PUSH
85775: LD_EXP 123
85779: PPUSH
85780: CALL 70452 0 1
85784: ST_TO_ADDR
// if not list then
85785: LD_VAR 0 3
85789: NOT
85790: IFFALSE 85794
// exit ;
85792: GO 86438
// for i := 1 to list do
85794: LD_ADDR_VAR 0 1
85798: PUSH
85799: DOUBLE
85800: LD_INT 1
85802: DEC
85803: ST_TO_ADDR
85804: LD_VAR 0 3
85808: PUSH
85809: FOR_TO
85810: IFFALSE 86436
// begin depot := list [ i ] [ 2 ] ;
85812: LD_ADDR_VAR 0 8
85816: PUSH
85817: LD_VAR 0 3
85821: PUSH
85822: LD_VAR 0 1
85826: ARRAY
85827: PUSH
85828: LD_INT 2
85830: ARRAY
85831: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
85832: LD_ADDR_VAR 0 5
85836: PUSH
85837: LD_VAR 0 3
85841: PUSH
85842: LD_VAR 0 1
85846: ARRAY
85847: PUSH
85848: LD_INT 1
85850: ARRAY
85851: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
85852: LD_VAR 0 8
85856: PPUSH
85857: CALL_OW 301
85861: PUSH
85862: LD_VAR 0 5
85866: PUSH
85867: LD_VAR 0 8
85871: PPUSH
85872: CALL_OW 255
85876: NONEQUAL
85877: OR
85878: IFFALSE 85907
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
85880: LD_ADDR_EXP 123
85884: PUSH
85885: LD_EXP 123
85889: PPUSH
85890: LD_VAR 0 8
85894: PPUSH
85895: LD_INT 0
85897: PPUSH
85898: CALL_OW 1
85902: ST_TO_ADDR
// exit ;
85903: POP
85904: POP
85905: GO 86438
// end ; x := list [ i ] [ 3 ] ;
85907: LD_ADDR_VAR 0 6
85911: PUSH
85912: LD_VAR 0 3
85916: PUSH
85917: LD_VAR 0 1
85921: ARRAY
85922: PUSH
85923: LD_INT 3
85925: ARRAY
85926: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
85927: LD_ADDR_VAR 0 7
85931: PUSH
85932: LD_VAR 0 3
85936: PUSH
85937: LD_VAR 0 1
85941: ARRAY
85942: PUSH
85943: LD_INT 4
85945: ARRAY
85946: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
85947: LD_ADDR_VAR 0 9
85951: PUSH
85952: LD_VAR 0 6
85956: PPUSH
85957: LD_VAR 0 7
85961: PPUSH
85962: LD_INT 16
85964: PPUSH
85965: CALL 69040 0 3
85969: ST_TO_ADDR
// if not cratesNearbyPoint then
85970: LD_VAR 0 9
85974: NOT
85975: IFFALSE 85981
// exit ;
85977: POP
85978: POP
85979: GO 86438
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
85981: LD_ADDR_VAR 0 4
85985: PUSH
85986: LD_INT 22
85988: PUSH
85989: LD_VAR 0 5
85993: PUSH
85994: EMPTY
85995: LIST
85996: LIST
85997: PUSH
85998: LD_INT 3
86000: PUSH
86001: LD_INT 60
86003: PUSH
86004: EMPTY
86005: LIST
86006: PUSH
86007: EMPTY
86008: LIST
86009: LIST
86010: PUSH
86011: LD_INT 91
86013: PUSH
86014: LD_VAR 0 8
86018: PUSH
86019: LD_INT 6
86021: PUSH
86022: EMPTY
86023: LIST
86024: LIST
86025: LIST
86026: PUSH
86027: LD_INT 2
86029: PUSH
86030: LD_INT 25
86032: PUSH
86033: LD_INT 2
86035: PUSH
86036: EMPTY
86037: LIST
86038: LIST
86039: PUSH
86040: LD_INT 25
86042: PUSH
86043: LD_INT 16
86045: PUSH
86046: EMPTY
86047: LIST
86048: LIST
86049: PUSH
86050: EMPTY
86051: LIST
86052: LIST
86053: LIST
86054: PUSH
86055: EMPTY
86056: LIST
86057: LIST
86058: LIST
86059: LIST
86060: PPUSH
86061: CALL_OW 69
86065: PUSH
86066: LD_VAR 0 8
86070: PPUSH
86071: CALL_OW 313
86075: PPUSH
86076: LD_INT 3
86078: PUSH
86079: LD_INT 60
86081: PUSH
86082: EMPTY
86083: LIST
86084: PUSH
86085: EMPTY
86086: LIST
86087: LIST
86088: PUSH
86089: LD_INT 2
86091: PUSH
86092: LD_INT 25
86094: PUSH
86095: LD_INT 2
86097: PUSH
86098: EMPTY
86099: LIST
86100: LIST
86101: PUSH
86102: LD_INT 25
86104: PUSH
86105: LD_INT 16
86107: PUSH
86108: EMPTY
86109: LIST
86110: LIST
86111: PUSH
86112: EMPTY
86113: LIST
86114: LIST
86115: LIST
86116: PUSH
86117: EMPTY
86118: LIST
86119: LIST
86120: PPUSH
86121: CALL_OW 72
86125: UNION
86126: ST_TO_ADDR
// if tmp then
86127: LD_VAR 0 4
86131: IFFALSE 86211
// begin tmp := ShrinkArray ( tmp , 3 ) ;
86133: LD_ADDR_VAR 0 4
86137: PUSH
86138: LD_VAR 0 4
86142: PPUSH
86143: LD_INT 3
86145: PPUSH
86146: CALL 67009 0 2
86150: ST_TO_ADDR
// for j in tmp do
86151: LD_ADDR_VAR 0 2
86155: PUSH
86156: LD_VAR 0 4
86160: PUSH
86161: FOR_IN
86162: IFFALSE 86205
// begin if IsInUnit ( j ) then
86164: LD_VAR 0 2
86168: PPUSH
86169: CALL_OW 310
86173: IFFALSE 86184
// ComExit ( j ) ;
86175: LD_VAR 0 2
86179: PPUSH
86180: CALL 67092 0 1
// AddComCollect ( j , x , y ) ;
86184: LD_VAR 0 2
86188: PPUSH
86189: LD_VAR 0 6
86193: PPUSH
86194: LD_VAR 0 7
86198: PPUSH
86199: CALL_OW 177
// end ;
86203: GO 86161
86205: POP
86206: POP
// exit ;
86207: POP
86208: POP
86209: GO 86438
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
86211: LD_ADDR_VAR 0 4
86215: PUSH
86216: LD_INT 22
86218: PUSH
86219: LD_VAR 0 5
86223: PUSH
86224: EMPTY
86225: LIST
86226: LIST
86227: PUSH
86228: LD_INT 91
86230: PUSH
86231: LD_VAR 0 8
86235: PUSH
86236: LD_INT 8
86238: PUSH
86239: EMPTY
86240: LIST
86241: LIST
86242: LIST
86243: PUSH
86244: LD_INT 2
86246: PUSH
86247: LD_INT 34
86249: PUSH
86250: LD_INT 12
86252: PUSH
86253: EMPTY
86254: LIST
86255: LIST
86256: PUSH
86257: LD_INT 34
86259: PUSH
86260: LD_INT 51
86262: PUSH
86263: EMPTY
86264: LIST
86265: LIST
86266: PUSH
86267: LD_INT 34
86269: PUSH
86270: LD_INT 32
86272: PUSH
86273: EMPTY
86274: LIST
86275: LIST
86276: PUSH
86277: LD_INT 34
86279: PUSH
86280: LD_INT 89
86282: PUSH
86283: EMPTY
86284: LIST
86285: LIST
86286: PUSH
86287: EMPTY
86288: LIST
86289: LIST
86290: LIST
86291: LIST
86292: LIST
86293: PUSH
86294: EMPTY
86295: LIST
86296: LIST
86297: LIST
86298: PPUSH
86299: CALL_OW 69
86303: ST_TO_ADDR
// if tmp then
86304: LD_VAR 0 4
86308: IFFALSE 86434
// begin for j in tmp do
86310: LD_ADDR_VAR 0 2
86314: PUSH
86315: LD_VAR 0 4
86319: PUSH
86320: FOR_IN
86321: IFFALSE 86432
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
86323: LD_VAR 0 2
86327: PPUSH
86328: CALL_OW 262
86332: PUSH
86333: LD_INT 3
86335: EQUAL
86336: PUSH
86337: LD_VAR 0 2
86341: PPUSH
86342: CALL_OW 261
86346: PUSH
86347: LD_INT 20
86349: GREATER
86350: OR
86351: PUSH
86352: LD_VAR 0 2
86356: PPUSH
86357: CALL_OW 314
86361: NOT
86362: AND
86363: PUSH
86364: LD_VAR 0 2
86368: PPUSH
86369: CALL_OW 263
86373: PUSH
86374: LD_INT 1
86376: NONEQUAL
86377: PUSH
86378: LD_VAR 0 2
86382: PPUSH
86383: CALL_OW 311
86387: OR
86388: AND
86389: IFFALSE 86430
// begin ComCollect ( j , x , y ) ;
86391: LD_VAR 0 2
86395: PPUSH
86396: LD_VAR 0 6
86400: PPUSH
86401: LD_VAR 0 7
86405: PPUSH
86406: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
86410: LD_VAR 0 2
86414: PPUSH
86415: LD_VAR 0 8
86419: PPUSH
86420: CALL_OW 172
// exit ;
86424: POP
86425: POP
86426: POP
86427: POP
86428: GO 86438
// end ;
86430: GO 86320
86432: POP
86433: POP
// end ; end ;
86434: GO 85809
86436: POP
86437: POP
// end ; end_of_file
86438: PPOPN 9
86440: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
86441: LD_VAR 0 1
86445: PUSH
86446: LD_INT 200
86448: DOUBLE
86449: GREATEREQUAL
86450: IFFALSE 86458
86452: LD_INT 299
86454: DOUBLE
86455: LESSEQUAL
86456: IFTRUE 86460
86458: GO 86492
86460: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
86461: LD_VAR 0 1
86465: PPUSH
86466: LD_VAR 0 2
86470: PPUSH
86471: LD_VAR 0 3
86475: PPUSH
86476: LD_VAR 0 4
86480: PPUSH
86481: LD_VAR 0 5
86485: PPUSH
86486: CALL 86980 0 5
86490: GO 86569
86492: LD_INT 300
86494: DOUBLE
86495: GREATEREQUAL
86496: IFFALSE 86504
86498: LD_INT 399
86500: DOUBLE
86501: LESSEQUAL
86502: IFTRUE 86506
86504: GO 86568
86506: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
86507: LD_VAR 0 1
86511: PPUSH
86512: LD_VAR 0 2
86516: PPUSH
86517: LD_VAR 0 3
86521: PPUSH
86522: LD_VAR 0 4
86526: PPUSH
86527: LD_VAR 0 5
86531: PPUSH
86532: LD_VAR 0 6
86536: PPUSH
86537: LD_VAR 0 7
86541: PPUSH
86542: LD_VAR 0 8
86546: PPUSH
86547: LD_VAR 0 9
86551: PPUSH
86552: LD_VAR 0 10
86556: PPUSH
86557: LD_VAR 0 11
86561: PPUSH
86562: CALL 83150 0 11
86566: GO 86569
86568: POP
// end ;
86569: PPOPN 11
86571: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
86572: LD_VAR 0 1
86576: PPUSH
86577: LD_VAR 0 2
86581: PPUSH
86582: LD_VAR 0 3
86586: PPUSH
86587: LD_VAR 0 4
86591: PPUSH
86592: LD_VAR 0 5
86596: PPUSH
86597: CALL 86716 0 5
// end ; end_of_file
86601: PPOPN 5
86603: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
86604: LD_INT 0
86606: PPUSH
86607: PPUSH
86608: PPUSH
86609: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
86610: LD_VAR 0 1
86614: PPUSH
86615: CALL_OW 264
86619: PUSH
86620: LD_INT 91
86622: EQUAL
86623: IFFALSE 86695
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
86625: LD_INT 68
86627: PPUSH
86628: LD_VAR 0 1
86632: PPUSH
86633: CALL_OW 255
86637: PPUSH
86638: CALL_OW 321
86642: PUSH
86643: LD_INT 2
86645: EQUAL
86646: IFFALSE 86658
// eff := 70 else
86648: LD_ADDR_VAR 0 4
86652: PUSH
86653: LD_INT 70
86655: ST_TO_ADDR
86656: GO 86666
// eff := 30 ;
86658: LD_ADDR_VAR 0 4
86662: PUSH
86663: LD_INT 30
86665: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
86666: LD_VAR 0 1
86670: PPUSH
86671: CALL_OW 250
86675: PPUSH
86676: LD_VAR 0 1
86680: PPUSH
86681: CALL_OW 251
86685: PPUSH
86686: LD_VAR 0 4
86690: PPUSH
86691: CALL_OW 495
// end ; end ;
86695: LD_VAR 0 2
86699: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
86700: LD_INT 0
86702: PPUSH
// end ;
86703: LD_VAR 0 4
86707: RET
// export function SOS_Command ( cmd ) ; begin
86708: LD_INT 0
86710: PPUSH
// end ;
86711: LD_VAR 0 2
86715: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
86716: LD_INT 0
86718: PPUSH
// end ;
86719: LD_VAR 0 6
86723: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
86724: LD_INT 0
86726: PPUSH
86727: PPUSH
// if not vehicle or not factory then
86728: LD_VAR 0 1
86732: NOT
86733: PUSH
86734: LD_VAR 0 2
86738: NOT
86739: OR
86740: IFFALSE 86744
// exit ;
86742: GO 86975
// if factoryWaypoints >= factory then
86744: LD_EXP 122
86748: PUSH
86749: LD_VAR 0 2
86753: GREATEREQUAL
86754: IFFALSE 86975
// if factoryWaypoints [ factory ] then
86756: LD_EXP 122
86760: PUSH
86761: LD_VAR 0 2
86765: ARRAY
86766: IFFALSE 86975
// begin if GetControl ( vehicle ) = control_manual then
86768: LD_VAR 0 1
86772: PPUSH
86773: CALL_OW 263
86777: PUSH
86778: LD_INT 1
86780: EQUAL
86781: IFFALSE 86862
// begin driver := IsDrivenBy ( vehicle ) ;
86783: LD_ADDR_VAR 0 4
86787: PUSH
86788: LD_VAR 0 1
86792: PPUSH
86793: CALL_OW 311
86797: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
86798: LD_VAR 0 4
86802: PPUSH
86803: LD_EXP 122
86807: PUSH
86808: LD_VAR 0 2
86812: ARRAY
86813: PUSH
86814: LD_INT 3
86816: ARRAY
86817: PPUSH
86818: LD_EXP 122
86822: PUSH
86823: LD_VAR 0 2
86827: ARRAY
86828: PUSH
86829: LD_INT 4
86831: ARRAY
86832: PPUSH
86833: CALL_OW 171
// AddComExitVehicle ( driver ) ;
86837: LD_VAR 0 4
86841: PPUSH
86842: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
86846: LD_VAR 0 4
86850: PPUSH
86851: LD_VAR 0 2
86855: PPUSH
86856: CALL_OW 180
// end else
86860: GO 86975
// if GetControl ( vehicle ) = control_remote then
86862: LD_VAR 0 1
86866: PPUSH
86867: CALL_OW 263
86871: PUSH
86872: LD_INT 2
86874: EQUAL
86875: IFFALSE 86936
// begin wait ( 0 0$2 ) ;
86877: LD_INT 70
86879: PPUSH
86880: CALL_OW 67
// if Connect ( vehicle ) then
86884: LD_VAR 0 1
86888: PPUSH
86889: CALL 37332 0 1
86893: IFFALSE 86934
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
86895: LD_VAR 0 1
86899: PPUSH
86900: LD_EXP 122
86904: PUSH
86905: LD_VAR 0 2
86909: ARRAY
86910: PUSH
86911: LD_INT 3
86913: ARRAY
86914: PPUSH
86915: LD_EXP 122
86919: PUSH
86920: LD_VAR 0 2
86924: ARRAY
86925: PUSH
86926: LD_INT 4
86928: ARRAY
86929: PPUSH
86930: CALL_OW 171
// end else
86934: GO 86975
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
86936: LD_VAR 0 1
86940: PPUSH
86941: LD_EXP 122
86945: PUSH
86946: LD_VAR 0 2
86950: ARRAY
86951: PUSH
86952: LD_INT 3
86954: ARRAY
86955: PPUSH
86956: LD_EXP 122
86960: PUSH
86961: LD_VAR 0 2
86965: ARRAY
86966: PUSH
86967: LD_INT 4
86969: ARRAY
86970: PPUSH
86971: CALL_OW 171
// end ; end ;
86975: LD_VAR 0 3
86979: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
86980: LD_INT 0
86982: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
86983: LD_VAR 0 1
86987: PUSH
86988: LD_INT 250
86990: EQUAL
86991: PUSH
86992: LD_VAR 0 2
86996: PPUSH
86997: CALL_OW 264
87001: PUSH
87002: LD_INT 81
87004: EQUAL
87005: AND
87006: IFFALSE 87027
// MinerPlaceMine ( unit , x , y ) ;
87008: LD_VAR 0 2
87012: PPUSH
87013: LD_VAR 0 4
87017: PPUSH
87018: LD_VAR 0 5
87022: PPUSH
87023: CALL 89412 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
87027: LD_VAR 0 1
87031: PUSH
87032: LD_INT 251
87034: EQUAL
87035: PUSH
87036: LD_VAR 0 2
87040: PPUSH
87041: CALL_OW 264
87045: PUSH
87046: LD_INT 81
87048: EQUAL
87049: AND
87050: IFFALSE 87071
// MinerDetonateMine ( unit , x , y ) ;
87052: LD_VAR 0 2
87056: PPUSH
87057: LD_VAR 0 4
87061: PPUSH
87062: LD_VAR 0 5
87066: PPUSH
87067: CALL 89687 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
87071: LD_VAR 0 1
87075: PUSH
87076: LD_INT 252
87078: EQUAL
87079: PUSH
87080: LD_VAR 0 2
87084: PPUSH
87085: CALL_OW 264
87089: PUSH
87090: LD_INT 81
87092: EQUAL
87093: AND
87094: IFFALSE 87115
// MinerCreateMinefield ( unit , x , y ) ;
87096: LD_VAR 0 2
87100: PPUSH
87101: LD_VAR 0 4
87105: PPUSH
87106: LD_VAR 0 5
87110: PPUSH
87111: CALL 90104 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
87115: LD_VAR 0 1
87119: PUSH
87120: LD_INT 253
87122: EQUAL
87123: PUSH
87124: LD_VAR 0 2
87128: PPUSH
87129: CALL_OW 257
87133: PUSH
87134: LD_INT 5
87136: EQUAL
87137: AND
87138: IFFALSE 87159
// ComBinocular ( unit , x , y ) ;
87140: LD_VAR 0 2
87144: PPUSH
87145: LD_VAR 0 4
87149: PPUSH
87150: LD_VAR 0 5
87154: PPUSH
87155: CALL 90473 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
87159: LD_VAR 0 1
87163: PUSH
87164: LD_INT 254
87166: EQUAL
87167: PUSH
87168: LD_VAR 0 2
87172: PPUSH
87173: CALL_OW 264
87177: PUSH
87178: LD_INT 99
87180: EQUAL
87181: AND
87182: PUSH
87183: LD_VAR 0 3
87187: PPUSH
87188: CALL_OW 263
87192: PUSH
87193: LD_INT 3
87195: EQUAL
87196: AND
87197: IFFALSE 87213
// HackDestroyVehicle ( unit , selectedUnit ) ;
87199: LD_VAR 0 2
87203: PPUSH
87204: LD_VAR 0 3
87208: PPUSH
87209: CALL 88776 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
87213: LD_VAR 0 1
87217: PUSH
87218: LD_INT 255
87220: EQUAL
87221: PUSH
87222: LD_VAR 0 2
87226: PPUSH
87227: CALL_OW 264
87231: PUSH
87232: LD_INT 14
87234: PUSH
87235: LD_INT 53
87237: PUSH
87238: EMPTY
87239: LIST
87240: LIST
87241: IN
87242: AND
87243: PUSH
87244: LD_VAR 0 4
87248: PPUSH
87249: LD_VAR 0 5
87253: PPUSH
87254: CALL_OW 488
87258: AND
87259: IFFALSE 87283
// CutTreeXYR ( unit , x , y , 12 ) ;
87261: LD_VAR 0 2
87265: PPUSH
87266: LD_VAR 0 4
87270: PPUSH
87271: LD_VAR 0 5
87275: PPUSH
87276: LD_INT 12
87278: PPUSH
87279: CALL 87346 0 4
// if cmd = 256 then
87283: LD_VAR 0 1
87287: PUSH
87288: LD_INT 256
87290: EQUAL
87291: IFFALSE 87312
// SetFactoryWaypoint ( unit , x , y ) ;
87293: LD_VAR 0 2
87297: PPUSH
87298: LD_VAR 0 4
87302: PPUSH
87303: LD_VAR 0 5
87307: PPUSH
87308: CALL 85130 0 3
// if cmd = 257 then
87312: LD_VAR 0 1
87316: PUSH
87317: LD_INT 257
87319: EQUAL
87320: IFFALSE 87341
// SetWarehouseGatheringPoint ( unit , x , y ) ;
87322: LD_VAR 0 2
87326: PPUSH
87327: LD_VAR 0 4
87331: PPUSH
87332: LD_VAR 0 5
87336: PPUSH
87337: CALL 85492 0 3
// end ;
87341: LD_VAR 0 6
87345: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
87346: LD_INT 0
87348: PPUSH
87349: PPUSH
87350: PPUSH
87351: PPUSH
87352: PPUSH
87353: PPUSH
87354: PPUSH
87355: PPUSH
87356: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
87357: LD_VAR 0 1
87361: NOT
87362: PUSH
87363: LD_VAR 0 2
87367: PPUSH
87368: LD_VAR 0 3
87372: PPUSH
87373: CALL_OW 488
87377: NOT
87378: OR
87379: PUSH
87380: LD_VAR 0 4
87384: NOT
87385: OR
87386: IFFALSE 87390
// exit ;
87388: GO 87730
// list := [ ] ;
87390: LD_ADDR_VAR 0 13
87394: PUSH
87395: EMPTY
87396: ST_TO_ADDR
// if x - r < 0 then
87397: LD_VAR 0 2
87401: PUSH
87402: LD_VAR 0 4
87406: MINUS
87407: PUSH
87408: LD_INT 0
87410: LESS
87411: IFFALSE 87423
// min_x := 0 else
87413: LD_ADDR_VAR 0 7
87417: PUSH
87418: LD_INT 0
87420: ST_TO_ADDR
87421: GO 87439
// min_x := x - r ;
87423: LD_ADDR_VAR 0 7
87427: PUSH
87428: LD_VAR 0 2
87432: PUSH
87433: LD_VAR 0 4
87437: MINUS
87438: ST_TO_ADDR
// if y - r < 0 then
87439: LD_VAR 0 3
87443: PUSH
87444: LD_VAR 0 4
87448: MINUS
87449: PUSH
87450: LD_INT 0
87452: LESS
87453: IFFALSE 87465
// min_y := 0 else
87455: LD_ADDR_VAR 0 8
87459: PUSH
87460: LD_INT 0
87462: ST_TO_ADDR
87463: GO 87481
// min_y := y - r ;
87465: LD_ADDR_VAR 0 8
87469: PUSH
87470: LD_VAR 0 3
87474: PUSH
87475: LD_VAR 0 4
87479: MINUS
87480: ST_TO_ADDR
// max_x := x + r ;
87481: LD_ADDR_VAR 0 9
87485: PUSH
87486: LD_VAR 0 2
87490: PUSH
87491: LD_VAR 0 4
87495: PLUS
87496: ST_TO_ADDR
// max_y := y + r ;
87497: LD_ADDR_VAR 0 10
87501: PUSH
87502: LD_VAR 0 3
87506: PUSH
87507: LD_VAR 0 4
87511: PLUS
87512: ST_TO_ADDR
// for _x = min_x to max_x do
87513: LD_ADDR_VAR 0 11
87517: PUSH
87518: DOUBLE
87519: LD_VAR 0 7
87523: DEC
87524: ST_TO_ADDR
87525: LD_VAR 0 9
87529: PUSH
87530: FOR_TO
87531: IFFALSE 87648
// for _y = min_y to max_y do
87533: LD_ADDR_VAR 0 12
87537: PUSH
87538: DOUBLE
87539: LD_VAR 0 8
87543: DEC
87544: ST_TO_ADDR
87545: LD_VAR 0 10
87549: PUSH
87550: FOR_TO
87551: IFFALSE 87644
// begin if not ValidHex ( _x , _y ) then
87553: LD_VAR 0 11
87557: PPUSH
87558: LD_VAR 0 12
87562: PPUSH
87563: CALL_OW 488
87567: NOT
87568: IFFALSE 87572
// continue ;
87570: GO 87550
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
87572: LD_VAR 0 11
87576: PPUSH
87577: LD_VAR 0 12
87581: PPUSH
87582: CALL_OW 351
87586: PUSH
87587: LD_VAR 0 11
87591: PPUSH
87592: LD_VAR 0 12
87596: PPUSH
87597: CALL_OW 554
87601: AND
87602: IFFALSE 87642
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
87604: LD_ADDR_VAR 0 13
87608: PUSH
87609: LD_VAR 0 13
87613: PPUSH
87614: LD_VAR 0 13
87618: PUSH
87619: LD_INT 1
87621: PLUS
87622: PPUSH
87623: LD_VAR 0 11
87627: PUSH
87628: LD_VAR 0 12
87632: PUSH
87633: EMPTY
87634: LIST
87635: LIST
87636: PPUSH
87637: CALL_OW 2
87641: ST_TO_ADDR
// end ;
87642: GO 87550
87644: POP
87645: POP
87646: GO 87530
87648: POP
87649: POP
// if not list then
87650: LD_VAR 0 13
87654: NOT
87655: IFFALSE 87659
// exit ;
87657: GO 87730
// for i in list do
87659: LD_ADDR_VAR 0 6
87663: PUSH
87664: LD_VAR 0 13
87668: PUSH
87669: FOR_IN
87670: IFFALSE 87728
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
87672: LD_VAR 0 1
87676: PPUSH
87677: LD_STRING M
87679: PUSH
87680: LD_VAR 0 6
87684: PUSH
87685: LD_INT 1
87687: ARRAY
87688: PUSH
87689: LD_VAR 0 6
87693: PUSH
87694: LD_INT 2
87696: ARRAY
87697: PUSH
87698: LD_INT 0
87700: PUSH
87701: LD_INT 0
87703: PUSH
87704: LD_INT 0
87706: PUSH
87707: LD_INT 0
87709: PUSH
87710: EMPTY
87711: LIST
87712: LIST
87713: LIST
87714: LIST
87715: LIST
87716: LIST
87717: LIST
87718: PUSH
87719: EMPTY
87720: LIST
87721: PPUSH
87722: CALL_OW 447
87726: GO 87669
87728: POP
87729: POP
// end ;
87730: LD_VAR 0 5
87734: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
87735: LD_EXP 125
87739: NOT
87740: IFFALSE 87790
87742: GO 87744
87744: DISABLE
// begin initHack := true ;
87745: LD_ADDR_EXP 125
87749: PUSH
87750: LD_INT 1
87752: ST_TO_ADDR
// hackTanks := [ ] ;
87753: LD_ADDR_EXP 126
87757: PUSH
87758: EMPTY
87759: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
87760: LD_ADDR_EXP 127
87764: PUSH
87765: EMPTY
87766: ST_TO_ADDR
// hackLimit := 3 ;
87767: LD_ADDR_EXP 128
87771: PUSH
87772: LD_INT 3
87774: ST_TO_ADDR
// hackDist := 12 ;
87775: LD_ADDR_EXP 129
87779: PUSH
87780: LD_INT 12
87782: ST_TO_ADDR
// hackCounter := [ ] ;
87783: LD_ADDR_EXP 130
87787: PUSH
87788: EMPTY
87789: ST_TO_ADDR
// end ;
87790: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
87791: LD_EXP 125
87795: PUSH
87796: LD_INT 34
87798: PUSH
87799: LD_INT 99
87801: PUSH
87802: EMPTY
87803: LIST
87804: LIST
87805: PPUSH
87806: CALL_OW 69
87810: AND
87811: IFFALSE 88064
87813: GO 87815
87815: DISABLE
87816: LD_INT 0
87818: PPUSH
87819: PPUSH
// begin enable ;
87820: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
87821: LD_ADDR_VAR 0 1
87825: PUSH
87826: LD_INT 34
87828: PUSH
87829: LD_INT 99
87831: PUSH
87832: EMPTY
87833: LIST
87834: LIST
87835: PPUSH
87836: CALL_OW 69
87840: PUSH
87841: FOR_IN
87842: IFFALSE 88062
// begin if not i in hackTanks then
87844: LD_VAR 0 1
87848: PUSH
87849: LD_EXP 126
87853: IN
87854: NOT
87855: IFFALSE 87938
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
87857: LD_ADDR_EXP 126
87861: PUSH
87862: LD_EXP 126
87866: PPUSH
87867: LD_EXP 126
87871: PUSH
87872: LD_INT 1
87874: PLUS
87875: PPUSH
87876: LD_VAR 0 1
87880: PPUSH
87881: CALL_OW 1
87885: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
87886: LD_ADDR_EXP 127
87890: PUSH
87891: LD_EXP 127
87895: PPUSH
87896: LD_EXP 127
87900: PUSH
87901: LD_INT 1
87903: PLUS
87904: PPUSH
87905: EMPTY
87906: PPUSH
87907: CALL_OW 1
87911: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
87912: LD_ADDR_EXP 130
87916: PUSH
87917: LD_EXP 130
87921: PPUSH
87922: LD_EXP 130
87926: PUSH
87927: LD_INT 1
87929: PLUS
87930: PPUSH
87931: EMPTY
87932: PPUSH
87933: CALL_OW 1
87937: ST_TO_ADDR
// end ; if not IsOk ( i ) then
87938: LD_VAR 0 1
87942: PPUSH
87943: CALL_OW 302
87947: NOT
87948: IFFALSE 87961
// begin HackUnlinkAll ( i ) ;
87950: LD_VAR 0 1
87954: PPUSH
87955: CALL 88067 0 1
// continue ;
87959: GO 87841
// end ; HackCheckCapturedStatus ( i ) ;
87961: LD_VAR 0 1
87965: PPUSH
87966: CALL 88510 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
87970: LD_ADDR_VAR 0 2
87974: PUSH
87975: LD_INT 81
87977: PUSH
87978: LD_VAR 0 1
87982: PPUSH
87983: CALL_OW 255
87987: PUSH
87988: EMPTY
87989: LIST
87990: LIST
87991: PUSH
87992: LD_INT 33
87994: PUSH
87995: LD_INT 3
87997: PUSH
87998: EMPTY
87999: LIST
88000: LIST
88001: PUSH
88002: LD_INT 91
88004: PUSH
88005: LD_VAR 0 1
88009: PUSH
88010: LD_EXP 129
88014: PUSH
88015: EMPTY
88016: LIST
88017: LIST
88018: LIST
88019: PUSH
88020: LD_INT 50
88022: PUSH
88023: EMPTY
88024: LIST
88025: PUSH
88026: EMPTY
88027: LIST
88028: LIST
88029: LIST
88030: LIST
88031: PPUSH
88032: CALL_OW 69
88036: ST_TO_ADDR
// if not tmp then
88037: LD_VAR 0 2
88041: NOT
88042: IFFALSE 88046
// continue ;
88044: GO 87841
// HackLink ( i , tmp ) ;
88046: LD_VAR 0 1
88050: PPUSH
88051: LD_VAR 0 2
88055: PPUSH
88056: CALL 88203 0 2
// end ;
88060: GO 87841
88062: POP
88063: POP
// end ;
88064: PPOPN 2
88066: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
88067: LD_INT 0
88069: PPUSH
88070: PPUSH
88071: PPUSH
// if not hack in hackTanks then
88072: LD_VAR 0 1
88076: PUSH
88077: LD_EXP 126
88081: IN
88082: NOT
88083: IFFALSE 88087
// exit ;
88085: GO 88198
// index := GetElementIndex ( hackTanks , hack ) ;
88087: LD_ADDR_VAR 0 4
88091: PUSH
88092: LD_EXP 126
88096: PPUSH
88097: LD_VAR 0 1
88101: PPUSH
88102: CALL 34148 0 2
88106: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
88107: LD_EXP 127
88111: PUSH
88112: LD_VAR 0 4
88116: ARRAY
88117: IFFALSE 88198
// begin for i in hackTanksCaptured [ index ] do
88119: LD_ADDR_VAR 0 3
88123: PUSH
88124: LD_EXP 127
88128: PUSH
88129: LD_VAR 0 4
88133: ARRAY
88134: PUSH
88135: FOR_IN
88136: IFFALSE 88162
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
88138: LD_VAR 0 3
88142: PUSH
88143: LD_INT 1
88145: ARRAY
88146: PPUSH
88147: LD_VAR 0 3
88151: PUSH
88152: LD_INT 2
88154: ARRAY
88155: PPUSH
88156: CALL_OW 235
88160: GO 88135
88162: POP
88163: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
88164: LD_ADDR_EXP 127
88168: PUSH
88169: LD_EXP 127
88173: PPUSH
88174: LD_VAR 0 4
88178: PPUSH
88179: EMPTY
88180: PPUSH
88181: CALL_OW 1
88185: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
88186: LD_VAR 0 1
88190: PPUSH
88191: LD_INT 0
88193: PPUSH
88194: CALL_OW 505
// end ; end ;
88198: LD_VAR 0 2
88202: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
88203: LD_INT 0
88205: PPUSH
88206: PPUSH
88207: PPUSH
// if not hack in hackTanks or not vehicles then
88208: LD_VAR 0 1
88212: PUSH
88213: LD_EXP 126
88217: IN
88218: NOT
88219: PUSH
88220: LD_VAR 0 2
88224: NOT
88225: OR
88226: IFFALSE 88230
// exit ;
88228: GO 88505
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
88230: LD_ADDR_VAR 0 2
88234: PUSH
88235: LD_VAR 0 1
88239: PPUSH
88240: LD_VAR 0 2
88244: PPUSH
88245: LD_INT 1
88247: PPUSH
88248: LD_INT 1
88250: PPUSH
88251: CALL 34798 0 4
88255: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
88256: LD_ADDR_VAR 0 5
88260: PUSH
88261: LD_EXP 126
88265: PPUSH
88266: LD_VAR 0 1
88270: PPUSH
88271: CALL 34148 0 2
88275: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
88276: LD_EXP 127
88280: PUSH
88281: LD_VAR 0 5
88285: ARRAY
88286: PUSH
88287: LD_EXP 128
88291: LESS
88292: IFFALSE 88481
// begin for i := 1 to vehicles do
88294: LD_ADDR_VAR 0 4
88298: PUSH
88299: DOUBLE
88300: LD_INT 1
88302: DEC
88303: ST_TO_ADDR
88304: LD_VAR 0 2
88308: PUSH
88309: FOR_TO
88310: IFFALSE 88479
// begin if hackTanksCaptured [ index ] = hackLimit then
88312: LD_EXP 127
88316: PUSH
88317: LD_VAR 0 5
88321: ARRAY
88322: PUSH
88323: LD_EXP 128
88327: EQUAL
88328: IFFALSE 88332
// break ;
88330: GO 88479
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
88332: LD_ADDR_EXP 130
88336: PUSH
88337: LD_EXP 130
88341: PPUSH
88342: LD_VAR 0 5
88346: PPUSH
88347: LD_EXP 130
88351: PUSH
88352: LD_VAR 0 5
88356: ARRAY
88357: PUSH
88358: LD_INT 1
88360: PLUS
88361: PPUSH
88362: CALL_OW 1
88366: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
88367: LD_ADDR_EXP 127
88371: PUSH
88372: LD_EXP 127
88376: PPUSH
88377: LD_VAR 0 5
88381: PUSH
88382: LD_EXP 127
88386: PUSH
88387: LD_VAR 0 5
88391: ARRAY
88392: PUSH
88393: LD_INT 1
88395: PLUS
88396: PUSH
88397: EMPTY
88398: LIST
88399: LIST
88400: PPUSH
88401: LD_VAR 0 2
88405: PUSH
88406: LD_VAR 0 4
88410: ARRAY
88411: PUSH
88412: LD_VAR 0 2
88416: PUSH
88417: LD_VAR 0 4
88421: ARRAY
88422: PPUSH
88423: CALL_OW 255
88427: PUSH
88428: EMPTY
88429: LIST
88430: LIST
88431: PPUSH
88432: CALL 34363 0 3
88436: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
88437: LD_VAR 0 2
88441: PUSH
88442: LD_VAR 0 4
88446: ARRAY
88447: PPUSH
88448: LD_VAR 0 1
88452: PPUSH
88453: CALL_OW 255
88457: PPUSH
88458: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
88462: LD_VAR 0 2
88466: PUSH
88467: LD_VAR 0 4
88471: ARRAY
88472: PPUSH
88473: CALL_OW 141
// end ;
88477: GO 88309
88479: POP
88480: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
88481: LD_VAR 0 1
88485: PPUSH
88486: LD_EXP 127
88490: PUSH
88491: LD_VAR 0 5
88495: ARRAY
88496: PUSH
88497: LD_INT 0
88499: PLUS
88500: PPUSH
88501: CALL_OW 505
// end ;
88505: LD_VAR 0 3
88509: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
88510: LD_INT 0
88512: PPUSH
88513: PPUSH
88514: PPUSH
88515: PPUSH
// if not hack in hackTanks then
88516: LD_VAR 0 1
88520: PUSH
88521: LD_EXP 126
88525: IN
88526: NOT
88527: IFFALSE 88531
// exit ;
88529: GO 88771
// index := GetElementIndex ( hackTanks , hack ) ;
88531: LD_ADDR_VAR 0 4
88535: PUSH
88536: LD_EXP 126
88540: PPUSH
88541: LD_VAR 0 1
88545: PPUSH
88546: CALL 34148 0 2
88550: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
88551: LD_ADDR_VAR 0 3
88555: PUSH
88556: DOUBLE
88557: LD_EXP 127
88561: PUSH
88562: LD_VAR 0 4
88566: ARRAY
88567: INC
88568: ST_TO_ADDR
88569: LD_INT 1
88571: PUSH
88572: FOR_DOWNTO
88573: IFFALSE 88745
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
88575: LD_ADDR_VAR 0 5
88579: PUSH
88580: LD_EXP 127
88584: PUSH
88585: LD_VAR 0 4
88589: ARRAY
88590: PUSH
88591: LD_VAR 0 3
88595: ARRAY
88596: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
88597: LD_VAR 0 5
88601: PUSH
88602: LD_INT 1
88604: ARRAY
88605: PPUSH
88606: CALL_OW 302
88610: NOT
88611: PUSH
88612: LD_VAR 0 5
88616: PUSH
88617: LD_INT 1
88619: ARRAY
88620: PPUSH
88621: CALL_OW 255
88625: PUSH
88626: LD_VAR 0 1
88630: PPUSH
88631: CALL_OW 255
88635: NONEQUAL
88636: OR
88637: IFFALSE 88743
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
88639: LD_VAR 0 5
88643: PUSH
88644: LD_INT 1
88646: ARRAY
88647: PPUSH
88648: CALL_OW 305
88652: PUSH
88653: LD_VAR 0 5
88657: PUSH
88658: LD_INT 1
88660: ARRAY
88661: PPUSH
88662: CALL_OW 255
88666: PUSH
88667: LD_VAR 0 1
88671: PPUSH
88672: CALL_OW 255
88676: EQUAL
88677: AND
88678: IFFALSE 88702
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
88680: LD_VAR 0 5
88684: PUSH
88685: LD_INT 1
88687: ARRAY
88688: PPUSH
88689: LD_VAR 0 5
88693: PUSH
88694: LD_INT 2
88696: ARRAY
88697: PPUSH
88698: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
88702: LD_ADDR_EXP 127
88706: PUSH
88707: LD_EXP 127
88711: PPUSH
88712: LD_VAR 0 4
88716: PPUSH
88717: LD_EXP 127
88721: PUSH
88722: LD_VAR 0 4
88726: ARRAY
88727: PPUSH
88728: LD_VAR 0 3
88732: PPUSH
88733: CALL_OW 3
88737: PPUSH
88738: CALL_OW 1
88742: ST_TO_ADDR
// end ; end ;
88743: GO 88572
88745: POP
88746: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
88747: LD_VAR 0 1
88751: PPUSH
88752: LD_EXP 127
88756: PUSH
88757: LD_VAR 0 4
88761: ARRAY
88762: PUSH
88763: LD_INT 0
88765: PLUS
88766: PPUSH
88767: CALL_OW 505
// end ;
88771: LD_VAR 0 2
88775: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
88776: LD_INT 0
88778: PPUSH
88779: PPUSH
88780: PPUSH
88781: PPUSH
// if not hack in hackTanks then
88782: LD_VAR 0 1
88786: PUSH
88787: LD_EXP 126
88791: IN
88792: NOT
88793: IFFALSE 88797
// exit ;
88795: GO 88882
// index := GetElementIndex ( hackTanks , hack ) ;
88797: LD_ADDR_VAR 0 5
88801: PUSH
88802: LD_EXP 126
88806: PPUSH
88807: LD_VAR 0 1
88811: PPUSH
88812: CALL 34148 0 2
88816: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
88817: LD_ADDR_VAR 0 4
88821: PUSH
88822: DOUBLE
88823: LD_INT 1
88825: DEC
88826: ST_TO_ADDR
88827: LD_EXP 127
88831: PUSH
88832: LD_VAR 0 5
88836: ARRAY
88837: PUSH
88838: FOR_TO
88839: IFFALSE 88880
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
88841: LD_EXP 127
88845: PUSH
88846: LD_VAR 0 5
88850: ARRAY
88851: PUSH
88852: LD_VAR 0 4
88856: ARRAY
88857: PUSH
88858: LD_INT 1
88860: ARRAY
88861: PUSH
88862: LD_VAR 0 2
88866: EQUAL
88867: IFFALSE 88878
// KillUnit ( vehicle ) ;
88869: LD_VAR 0 2
88873: PPUSH
88874: CALL_OW 66
88878: GO 88838
88880: POP
88881: POP
// end ;
88882: LD_VAR 0 3
88886: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
88887: LD_EXP 131
88891: NOT
88892: IFFALSE 88927
88894: GO 88896
88896: DISABLE
// begin initMiner := true ;
88897: LD_ADDR_EXP 131
88901: PUSH
88902: LD_INT 1
88904: ST_TO_ADDR
// minersList := [ ] ;
88905: LD_ADDR_EXP 132
88909: PUSH
88910: EMPTY
88911: ST_TO_ADDR
// minerMinesList := [ ] ;
88912: LD_ADDR_EXP 133
88916: PUSH
88917: EMPTY
88918: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
88919: LD_ADDR_EXP 134
88923: PUSH
88924: LD_INT 5
88926: ST_TO_ADDR
// end ;
88927: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
88928: LD_EXP 131
88932: PUSH
88933: LD_INT 34
88935: PUSH
88936: LD_INT 81
88938: PUSH
88939: EMPTY
88940: LIST
88941: LIST
88942: PPUSH
88943: CALL_OW 69
88947: AND
88948: IFFALSE 89409
88950: GO 88952
88952: DISABLE
88953: LD_INT 0
88955: PPUSH
88956: PPUSH
88957: PPUSH
88958: PPUSH
// begin enable ;
88959: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
88960: LD_ADDR_VAR 0 1
88964: PUSH
88965: LD_INT 34
88967: PUSH
88968: LD_INT 81
88970: PUSH
88971: EMPTY
88972: LIST
88973: LIST
88974: PPUSH
88975: CALL_OW 69
88979: PUSH
88980: FOR_IN
88981: IFFALSE 89053
// begin if not i in minersList then
88983: LD_VAR 0 1
88987: PUSH
88988: LD_EXP 132
88992: IN
88993: NOT
88994: IFFALSE 89051
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
88996: LD_ADDR_EXP 132
89000: PUSH
89001: LD_EXP 132
89005: PPUSH
89006: LD_EXP 132
89010: PUSH
89011: LD_INT 1
89013: PLUS
89014: PPUSH
89015: LD_VAR 0 1
89019: PPUSH
89020: CALL_OW 1
89024: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
89025: LD_ADDR_EXP 133
89029: PUSH
89030: LD_EXP 133
89034: PPUSH
89035: LD_EXP 133
89039: PUSH
89040: LD_INT 1
89042: PLUS
89043: PPUSH
89044: EMPTY
89045: PPUSH
89046: CALL_OW 1
89050: ST_TO_ADDR
// end end ;
89051: GO 88980
89053: POP
89054: POP
// for i := minerMinesList downto 1 do
89055: LD_ADDR_VAR 0 1
89059: PUSH
89060: DOUBLE
89061: LD_EXP 133
89065: INC
89066: ST_TO_ADDR
89067: LD_INT 1
89069: PUSH
89070: FOR_DOWNTO
89071: IFFALSE 89407
// begin if IsLive ( minersList [ i ] ) then
89073: LD_EXP 132
89077: PUSH
89078: LD_VAR 0 1
89082: ARRAY
89083: PPUSH
89084: CALL_OW 300
89088: IFFALSE 89116
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
89090: LD_EXP 132
89094: PUSH
89095: LD_VAR 0 1
89099: ARRAY
89100: PPUSH
89101: LD_EXP 133
89105: PUSH
89106: LD_VAR 0 1
89110: ARRAY
89111: PPUSH
89112: CALL_OW 505
// if not minerMinesList [ i ] then
89116: LD_EXP 133
89120: PUSH
89121: LD_VAR 0 1
89125: ARRAY
89126: NOT
89127: IFFALSE 89131
// continue ;
89129: GO 89070
// for j := minerMinesList [ i ] downto 1 do
89131: LD_ADDR_VAR 0 2
89135: PUSH
89136: DOUBLE
89137: LD_EXP 133
89141: PUSH
89142: LD_VAR 0 1
89146: ARRAY
89147: INC
89148: ST_TO_ADDR
89149: LD_INT 1
89151: PUSH
89152: FOR_DOWNTO
89153: IFFALSE 89403
// begin side := GetSide ( minersList [ i ] ) ;
89155: LD_ADDR_VAR 0 3
89159: PUSH
89160: LD_EXP 132
89164: PUSH
89165: LD_VAR 0 1
89169: ARRAY
89170: PPUSH
89171: CALL_OW 255
89175: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
89176: LD_ADDR_VAR 0 4
89180: PUSH
89181: LD_EXP 133
89185: PUSH
89186: LD_VAR 0 1
89190: ARRAY
89191: PUSH
89192: LD_VAR 0 2
89196: ARRAY
89197: PUSH
89198: LD_INT 1
89200: ARRAY
89201: PPUSH
89202: LD_EXP 133
89206: PUSH
89207: LD_VAR 0 1
89211: ARRAY
89212: PUSH
89213: LD_VAR 0 2
89217: ARRAY
89218: PUSH
89219: LD_INT 2
89221: ARRAY
89222: PPUSH
89223: CALL_OW 428
89227: ST_TO_ADDR
// if not tmp then
89228: LD_VAR 0 4
89232: NOT
89233: IFFALSE 89237
// continue ;
89235: GO 89152
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
89237: LD_VAR 0 4
89241: PUSH
89242: LD_INT 81
89244: PUSH
89245: LD_VAR 0 3
89249: PUSH
89250: EMPTY
89251: LIST
89252: LIST
89253: PPUSH
89254: CALL_OW 69
89258: IN
89259: PUSH
89260: LD_EXP 133
89264: PUSH
89265: LD_VAR 0 1
89269: ARRAY
89270: PUSH
89271: LD_VAR 0 2
89275: ARRAY
89276: PUSH
89277: LD_INT 1
89279: ARRAY
89280: PPUSH
89281: LD_EXP 133
89285: PUSH
89286: LD_VAR 0 1
89290: ARRAY
89291: PUSH
89292: LD_VAR 0 2
89296: ARRAY
89297: PUSH
89298: LD_INT 2
89300: ARRAY
89301: PPUSH
89302: CALL_OW 458
89306: AND
89307: IFFALSE 89401
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
89309: LD_EXP 133
89313: PUSH
89314: LD_VAR 0 1
89318: ARRAY
89319: PUSH
89320: LD_VAR 0 2
89324: ARRAY
89325: PUSH
89326: LD_INT 1
89328: ARRAY
89329: PPUSH
89330: LD_EXP 133
89334: PUSH
89335: LD_VAR 0 1
89339: ARRAY
89340: PUSH
89341: LD_VAR 0 2
89345: ARRAY
89346: PUSH
89347: LD_INT 2
89349: ARRAY
89350: PPUSH
89351: LD_VAR 0 3
89355: PPUSH
89356: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
89360: LD_ADDR_EXP 133
89364: PUSH
89365: LD_EXP 133
89369: PPUSH
89370: LD_VAR 0 1
89374: PPUSH
89375: LD_EXP 133
89379: PUSH
89380: LD_VAR 0 1
89384: ARRAY
89385: PPUSH
89386: LD_VAR 0 2
89390: PPUSH
89391: CALL_OW 3
89395: PPUSH
89396: CALL_OW 1
89400: ST_TO_ADDR
// end ; end ;
89401: GO 89152
89403: POP
89404: POP
// end ;
89405: GO 89070
89407: POP
89408: POP
// end ;
89409: PPOPN 4
89411: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
89412: LD_INT 0
89414: PPUSH
89415: PPUSH
// result := false ;
89416: LD_ADDR_VAR 0 4
89420: PUSH
89421: LD_INT 0
89423: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
89424: LD_VAR 0 1
89428: PPUSH
89429: CALL_OW 264
89433: PUSH
89434: LD_INT 81
89436: EQUAL
89437: NOT
89438: IFFALSE 89442
// exit ;
89440: GO 89682
// index := GetElementIndex ( minersList , unit ) ;
89442: LD_ADDR_VAR 0 5
89446: PUSH
89447: LD_EXP 132
89451: PPUSH
89452: LD_VAR 0 1
89456: PPUSH
89457: CALL 34148 0 2
89461: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
89462: LD_EXP 133
89466: PUSH
89467: LD_VAR 0 5
89471: ARRAY
89472: PUSH
89473: LD_EXP 134
89477: GREATEREQUAL
89478: IFFALSE 89482
// exit ;
89480: GO 89682
// ComMoveXY ( unit , x , y ) ;
89482: LD_VAR 0 1
89486: PPUSH
89487: LD_VAR 0 2
89491: PPUSH
89492: LD_VAR 0 3
89496: PPUSH
89497: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
89501: LD_INT 35
89503: PPUSH
89504: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
89508: LD_VAR 0 1
89512: PPUSH
89513: LD_VAR 0 2
89517: PPUSH
89518: LD_VAR 0 3
89522: PPUSH
89523: CALL 65503 0 3
89527: NOT
89528: PUSH
89529: LD_VAR 0 1
89533: PPUSH
89534: CALL_OW 314
89538: AND
89539: IFFALSE 89543
// exit ;
89541: GO 89682
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
89543: LD_VAR 0 2
89547: PPUSH
89548: LD_VAR 0 3
89552: PPUSH
89553: CALL_OW 428
89557: PUSH
89558: LD_VAR 0 1
89562: EQUAL
89563: PUSH
89564: LD_VAR 0 1
89568: PPUSH
89569: CALL_OW 314
89573: NOT
89574: AND
89575: IFFALSE 89501
// PlaySoundXY ( x , y , PlantMine ) ;
89577: LD_VAR 0 2
89581: PPUSH
89582: LD_VAR 0 3
89586: PPUSH
89587: LD_STRING PlantMine
89589: PPUSH
89590: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
89594: LD_VAR 0 2
89598: PPUSH
89599: LD_VAR 0 3
89603: PPUSH
89604: LD_VAR 0 1
89608: PPUSH
89609: CALL_OW 255
89613: PPUSH
89614: LD_INT 0
89616: PPUSH
89617: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
89621: LD_ADDR_EXP 133
89625: PUSH
89626: LD_EXP 133
89630: PPUSH
89631: LD_VAR 0 5
89635: PUSH
89636: LD_EXP 133
89640: PUSH
89641: LD_VAR 0 5
89645: ARRAY
89646: PUSH
89647: LD_INT 1
89649: PLUS
89650: PUSH
89651: EMPTY
89652: LIST
89653: LIST
89654: PPUSH
89655: LD_VAR 0 2
89659: PUSH
89660: LD_VAR 0 3
89664: PUSH
89665: EMPTY
89666: LIST
89667: LIST
89668: PPUSH
89669: CALL 34363 0 3
89673: ST_TO_ADDR
// result := true ;
89674: LD_ADDR_VAR 0 4
89678: PUSH
89679: LD_INT 1
89681: ST_TO_ADDR
// end ;
89682: LD_VAR 0 4
89686: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
89687: LD_INT 0
89689: PPUSH
89690: PPUSH
89691: PPUSH
// if not unit in minersList then
89692: LD_VAR 0 1
89696: PUSH
89697: LD_EXP 132
89701: IN
89702: NOT
89703: IFFALSE 89707
// exit ;
89705: GO 90099
// index := GetElementIndex ( minersList , unit ) ;
89707: LD_ADDR_VAR 0 6
89711: PUSH
89712: LD_EXP 132
89716: PPUSH
89717: LD_VAR 0 1
89721: PPUSH
89722: CALL 34148 0 2
89726: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
89727: LD_ADDR_VAR 0 5
89731: PUSH
89732: DOUBLE
89733: LD_EXP 133
89737: PUSH
89738: LD_VAR 0 6
89742: ARRAY
89743: INC
89744: ST_TO_ADDR
89745: LD_INT 1
89747: PUSH
89748: FOR_DOWNTO
89749: IFFALSE 89910
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
89751: LD_EXP 133
89755: PUSH
89756: LD_VAR 0 6
89760: ARRAY
89761: PUSH
89762: LD_VAR 0 5
89766: ARRAY
89767: PUSH
89768: LD_INT 1
89770: ARRAY
89771: PUSH
89772: LD_VAR 0 2
89776: EQUAL
89777: PUSH
89778: LD_EXP 133
89782: PUSH
89783: LD_VAR 0 6
89787: ARRAY
89788: PUSH
89789: LD_VAR 0 5
89793: ARRAY
89794: PUSH
89795: LD_INT 2
89797: ARRAY
89798: PUSH
89799: LD_VAR 0 3
89803: EQUAL
89804: AND
89805: IFFALSE 89908
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
89807: LD_EXP 133
89811: PUSH
89812: LD_VAR 0 6
89816: ARRAY
89817: PUSH
89818: LD_VAR 0 5
89822: ARRAY
89823: PUSH
89824: LD_INT 1
89826: ARRAY
89827: PPUSH
89828: LD_EXP 133
89832: PUSH
89833: LD_VAR 0 6
89837: ARRAY
89838: PUSH
89839: LD_VAR 0 5
89843: ARRAY
89844: PUSH
89845: LD_INT 2
89847: ARRAY
89848: PPUSH
89849: LD_VAR 0 1
89853: PPUSH
89854: CALL_OW 255
89858: PPUSH
89859: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
89863: LD_ADDR_EXP 133
89867: PUSH
89868: LD_EXP 133
89872: PPUSH
89873: LD_VAR 0 6
89877: PPUSH
89878: LD_EXP 133
89882: PUSH
89883: LD_VAR 0 6
89887: ARRAY
89888: PPUSH
89889: LD_VAR 0 5
89893: PPUSH
89894: CALL_OW 3
89898: PPUSH
89899: CALL_OW 1
89903: ST_TO_ADDR
// exit ;
89904: POP
89905: POP
89906: GO 90099
// end ; end ;
89908: GO 89748
89910: POP
89911: POP
// for i := minerMinesList [ index ] downto 1 do
89912: LD_ADDR_VAR 0 5
89916: PUSH
89917: DOUBLE
89918: LD_EXP 133
89922: PUSH
89923: LD_VAR 0 6
89927: ARRAY
89928: INC
89929: ST_TO_ADDR
89930: LD_INT 1
89932: PUSH
89933: FOR_DOWNTO
89934: IFFALSE 90097
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
89936: LD_EXP 133
89940: PUSH
89941: LD_VAR 0 6
89945: ARRAY
89946: PUSH
89947: LD_VAR 0 5
89951: ARRAY
89952: PUSH
89953: LD_INT 1
89955: ARRAY
89956: PPUSH
89957: LD_EXP 133
89961: PUSH
89962: LD_VAR 0 6
89966: ARRAY
89967: PUSH
89968: LD_VAR 0 5
89972: ARRAY
89973: PUSH
89974: LD_INT 2
89976: ARRAY
89977: PPUSH
89978: LD_VAR 0 2
89982: PPUSH
89983: LD_VAR 0 3
89987: PPUSH
89988: CALL_OW 298
89992: PUSH
89993: LD_INT 6
89995: LESS
89996: IFFALSE 90095
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
89998: LD_EXP 133
90002: PUSH
90003: LD_VAR 0 6
90007: ARRAY
90008: PUSH
90009: LD_VAR 0 5
90013: ARRAY
90014: PUSH
90015: LD_INT 1
90017: ARRAY
90018: PPUSH
90019: LD_EXP 133
90023: PUSH
90024: LD_VAR 0 6
90028: ARRAY
90029: PUSH
90030: LD_VAR 0 5
90034: ARRAY
90035: PUSH
90036: LD_INT 2
90038: ARRAY
90039: PPUSH
90040: LD_VAR 0 1
90044: PPUSH
90045: CALL_OW 255
90049: PPUSH
90050: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
90054: LD_ADDR_EXP 133
90058: PUSH
90059: LD_EXP 133
90063: PPUSH
90064: LD_VAR 0 6
90068: PPUSH
90069: LD_EXP 133
90073: PUSH
90074: LD_VAR 0 6
90078: ARRAY
90079: PPUSH
90080: LD_VAR 0 5
90084: PPUSH
90085: CALL_OW 3
90089: PPUSH
90090: CALL_OW 1
90094: ST_TO_ADDR
// end ; end ;
90095: GO 89933
90097: POP
90098: POP
// end ;
90099: LD_VAR 0 4
90103: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
90104: LD_INT 0
90106: PPUSH
90107: PPUSH
90108: PPUSH
90109: PPUSH
90110: PPUSH
90111: PPUSH
90112: PPUSH
90113: PPUSH
90114: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
90115: LD_VAR 0 1
90119: PPUSH
90120: CALL_OW 264
90124: PUSH
90125: LD_INT 81
90127: EQUAL
90128: NOT
90129: PUSH
90130: LD_VAR 0 1
90134: PUSH
90135: LD_EXP 132
90139: IN
90140: NOT
90141: OR
90142: IFFALSE 90146
// exit ;
90144: GO 90468
// index := GetElementIndex ( minersList , unit ) ;
90146: LD_ADDR_VAR 0 6
90150: PUSH
90151: LD_EXP 132
90155: PPUSH
90156: LD_VAR 0 1
90160: PPUSH
90161: CALL 34148 0 2
90165: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
90166: LD_ADDR_VAR 0 8
90170: PUSH
90171: LD_EXP 134
90175: PUSH
90176: LD_EXP 133
90180: PUSH
90181: LD_VAR 0 6
90185: ARRAY
90186: MINUS
90187: ST_TO_ADDR
// if not minesFreeAmount then
90188: LD_VAR 0 8
90192: NOT
90193: IFFALSE 90197
// exit ;
90195: GO 90468
// tmp := [ ] ;
90197: LD_ADDR_VAR 0 7
90201: PUSH
90202: EMPTY
90203: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
90204: LD_ADDR_VAR 0 5
90208: PUSH
90209: DOUBLE
90210: LD_INT 1
90212: DEC
90213: ST_TO_ADDR
90214: LD_VAR 0 8
90218: PUSH
90219: FOR_TO
90220: IFFALSE 90415
// begin _d := rand ( 0 , 5 ) ;
90222: LD_ADDR_VAR 0 11
90226: PUSH
90227: LD_INT 0
90229: PPUSH
90230: LD_INT 5
90232: PPUSH
90233: CALL_OW 12
90237: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
90238: LD_ADDR_VAR 0 12
90242: PUSH
90243: LD_INT 2
90245: PPUSH
90246: LD_INT 6
90248: PPUSH
90249: CALL_OW 12
90253: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
90254: LD_ADDR_VAR 0 9
90258: PUSH
90259: LD_VAR 0 2
90263: PPUSH
90264: LD_VAR 0 11
90268: PPUSH
90269: LD_VAR 0 12
90273: PPUSH
90274: CALL_OW 272
90278: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
90279: LD_ADDR_VAR 0 10
90283: PUSH
90284: LD_VAR 0 3
90288: PPUSH
90289: LD_VAR 0 11
90293: PPUSH
90294: LD_VAR 0 12
90298: PPUSH
90299: CALL_OW 273
90303: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
90304: LD_VAR 0 9
90308: PPUSH
90309: LD_VAR 0 10
90313: PPUSH
90314: CALL_OW 488
90318: PUSH
90319: LD_VAR 0 9
90323: PUSH
90324: LD_VAR 0 10
90328: PUSH
90329: EMPTY
90330: LIST
90331: LIST
90332: PUSH
90333: LD_VAR 0 7
90337: IN
90338: NOT
90339: AND
90340: PUSH
90341: LD_VAR 0 9
90345: PPUSH
90346: LD_VAR 0 10
90350: PPUSH
90351: CALL_OW 458
90355: NOT
90356: AND
90357: IFFALSE 90399
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
90359: LD_ADDR_VAR 0 7
90363: PUSH
90364: LD_VAR 0 7
90368: PPUSH
90369: LD_VAR 0 7
90373: PUSH
90374: LD_INT 1
90376: PLUS
90377: PPUSH
90378: LD_VAR 0 9
90382: PUSH
90383: LD_VAR 0 10
90387: PUSH
90388: EMPTY
90389: LIST
90390: LIST
90391: PPUSH
90392: CALL_OW 1
90396: ST_TO_ADDR
90397: GO 90413
// i := i - 1 ;
90399: LD_ADDR_VAR 0 5
90403: PUSH
90404: LD_VAR 0 5
90408: PUSH
90409: LD_INT 1
90411: MINUS
90412: ST_TO_ADDR
// end ;
90413: GO 90219
90415: POP
90416: POP
// for i in tmp do
90417: LD_ADDR_VAR 0 5
90421: PUSH
90422: LD_VAR 0 7
90426: PUSH
90427: FOR_IN
90428: IFFALSE 90466
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
90430: LD_VAR 0 1
90434: PPUSH
90435: LD_VAR 0 5
90439: PUSH
90440: LD_INT 1
90442: ARRAY
90443: PPUSH
90444: LD_VAR 0 5
90448: PUSH
90449: LD_INT 2
90451: ARRAY
90452: PPUSH
90453: CALL 89412 0 3
90457: NOT
90458: IFFALSE 90464
// exit ;
90460: POP
90461: POP
90462: GO 90468
90464: GO 90427
90466: POP
90467: POP
// end ;
90468: LD_VAR 0 4
90472: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
90473: LD_INT 0
90475: PPUSH
90476: PPUSH
90477: PPUSH
90478: PPUSH
90479: PPUSH
90480: PPUSH
90481: PPUSH
// if not GetClass ( unit ) = class_sniper then
90482: LD_VAR 0 1
90486: PPUSH
90487: CALL_OW 257
90491: PUSH
90492: LD_INT 5
90494: EQUAL
90495: NOT
90496: IFFALSE 90500
// exit ;
90498: GO 90888
// dist := 8 ;
90500: LD_ADDR_VAR 0 5
90504: PUSH
90505: LD_INT 8
90507: ST_TO_ADDR
// viewRange := 12 ;
90508: LD_ADDR_VAR 0 7
90512: PUSH
90513: LD_INT 12
90515: ST_TO_ADDR
// side := GetSide ( unit ) ;
90516: LD_ADDR_VAR 0 6
90520: PUSH
90521: LD_VAR 0 1
90525: PPUSH
90526: CALL_OW 255
90530: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
90531: LD_INT 61
90533: PPUSH
90534: LD_VAR 0 6
90538: PPUSH
90539: CALL_OW 321
90543: PUSH
90544: LD_INT 2
90546: EQUAL
90547: IFFALSE 90557
// viewRange := 16 ;
90549: LD_ADDR_VAR 0 7
90553: PUSH
90554: LD_INT 16
90556: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
90557: LD_VAR 0 1
90561: PPUSH
90562: LD_VAR 0 2
90566: PPUSH
90567: LD_VAR 0 3
90571: PPUSH
90572: CALL_OW 297
90576: PUSH
90577: LD_VAR 0 5
90581: GREATER
90582: IFFALSE 90661
// begin ComMoveXY ( unit , x , y ) ;
90584: LD_VAR 0 1
90588: PPUSH
90589: LD_VAR 0 2
90593: PPUSH
90594: LD_VAR 0 3
90598: PPUSH
90599: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
90603: LD_INT 35
90605: PPUSH
90606: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
90610: LD_VAR 0 1
90614: PPUSH
90615: LD_VAR 0 2
90619: PPUSH
90620: LD_VAR 0 3
90624: PPUSH
90625: CALL 65503 0 3
90629: NOT
90630: IFFALSE 90634
// exit ;
90632: GO 90888
// until GetDistUnitXY ( unit , x , y ) < dist ;
90634: LD_VAR 0 1
90638: PPUSH
90639: LD_VAR 0 2
90643: PPUSH
90644: LD_VAR 0 3
90648: PPUSH
90649: CALL_OW 297
90653: PUSH
90654: LD_VAR 0 5
90658: LESS
90659: IFFALSE 90603
// end ; ComTurnXY ( unit , x , y ) ;
90661: LD_VAR 0 1
90665: PPUSH
90666: LD_VAR 0 2
90670: PPUSH
90671: LD_VAR 0 3
90675: PPUSH
90676: CALL_OW 118
// wait ( 5 ) ;
90680: LD_INT 5
90682: PPUSH
90683: CALL_OW 67
// _d := GetDir ( unit ) ;
90687: LD_ADDR_VAR 0 10
90691: PUSH
90692: LD_VAR 0 1
90696: PPUSH
90697: CALL_OW 254
90701: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
90702: LD_ADDR_VAR 0 8
90706: PUSH
90707: LD_VAR 0 1
90711: PPUSH
90712: CALL_OW 250
90716: PPUSH
90717: LD_VAR 0 10
90721: PPUSH
90722: LD_VAR 0 5
90726: PPUSH
90727: CALL_OW 272
90731: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
90732: LD_ADDR_VAR 0 9
90736: PUSH
90737: LD_VAR 0 1
90741: PPUSH
90742: CALL_OW 251
90746: PPUSH
90747: LD_VAR 0 10
90751: PPUSH
90752: LD_VAR 0 5
90756: PPUSH
90757: CALL_OW 273
90761: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
90762: LD_VAR 0 8
90766: PPUSH
90767: LD_VAR 0 9
90771: PPUSH
90772: CALL_OW 488
90776: NOT
90777: IFFALSE 90781
// exit ;
90779: GO 90888
// ComAnimCustom ( unit , 1 ) ;
90781: LD_VAR 0 1
90785: PPUSH
90786: LD_INT 1
90788: PPUSH
90789: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
90793: LD_VAR 0 8
90797: PPUSH
90798: LD_VAR 0 9
90802: PPUSH
90803: LD_VAR 0 6
90807: PPUSH
90808: LD_VAR 0 7
90812: PPUSH
90813: CALL_OW 330
// repeat wait ( 1 ) ;
90817: LD_INT 1
90819: PPUSH
90820: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
90824: LD_VAR 0 1
90828: PPUSH
90829: CALL_OW 316
90833: PUSH
90834: LD_VAR 0 1
90838: PPUSH
90839: CALL_OW 314
90843: OR
90844: PUSH
90845: LD_VAR 0 1
90849: PPUSH
90850: CALL_OW 302
90854: NOT
90855: OR
90856: PUSH
90857: LD_VAR 0 1
90861: PPUSH
90862: CALL_OW 301
90866: OR
90867: IFFALSE 90817
// RemoveSeeing ( _x , _y , side ) ;
90869: LD_VAR 0 8
90873: PPUSH
90874: LD_VAR 0 9
90878: PPUSH
90879: LD_VAR 0 6
90883: PPUSH
90884: CALL_OW 331
// end ; end_of_file
90888: LD_VAR 0 4
90892: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
90893: LD_VAR 0 1
90897: PPUSH
90898: LD_VAR 0 2
90902: PPUSH
90903: LD_VAR 0 3
90907: PPUSH
90908: LD_VAR 0 4
90912: PPUSH
90913: LD_VAR 0 5
90917: PPUSH
90918: LD_VAR 0 6
90922: PPUSH
90923: CALL 70802 0 6
// end ;
90927: PPOPN 6
90929: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
90930: LD_INT 0
90932: PPUSH
// begin if not units then
90933: LD_VAR 0 1
90937: NOT
90938: IFFALSE 90942
// exit ;
90940: GO 90942
// end ;
90942: PPOPN 7
90944: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
90945: CALL 70706 0 0
// end ;
90949: PPOPN 1
90951: END
