// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 58 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 22
// Difficulty := 4 ;
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 4
  21: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  22: LD_INT 1
  24: PPUSH
  25: LD_INT 3
  27: PPUSH
  28: CALL 10248 0 2
// PrepareArabian ;
  32: CALL 501 0 0
// PrepareRussian ;
  36: CALL 11039 0 0
// Action ;
  40: CALL 19230 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 57
// FogOff ( 2 ) ;
  50: LD_INT 2
  52: PPUSH
  53: CALL_OW 344
// end ;
  57: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack , canRolfJoin , buildingsFromPrev , gameActive , rolfAttack , collectedOil ; function Init ; begin
  58: LD_INT 0
  60: PPUSH
// debug := false ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// prefix := 05_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 05_
  76: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_STRING 04_2_GaidarKilled
  84: PPUSH
  85: LD_INT 1
  87: PPUSH
  88: CALL_OW 30
  92: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  93: LD_ADDR_EXP 8
  97: PUSH
  98: LD_STRING 05_ConvoySavedCounter
 100: PPUSH
 101: LD_INT 0
 103: PPUSH
 104: CALL_OW 30
 108: ST_TO_ADDR
// buildingsFromPrev := LoadVariable ( 05_Buildings , [ ] ) ;
 109: LD_ADDR_EXP 30
 113: PUSH
 114: LD_STRING 05_Buildings
 116: PPUSH
 117: EMPTY
 118: PPUSH
 119: CALL_OW 30
 123: ST_TO_ADDR
// bergkampfArrived := false ;
 124: LD_ADDR_EXP 3
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// omarArrived := false ;
 132: LD_ADDR_EXP 6
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// outpostDestroyed := false ;
 140: LD_ADDR_EXP 4
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// ruLoseCounter := 0 ;
 148: LD_ADDR_EXP 5
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// rolfScriptBase := false ;
 156: LD_ADDR_EXP 9
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// omarScriptBase := false ;
 164: LD_ADDR_EXP 10
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// linkedWithRolf := 0 ;
 172: LD_ADDR_EXP 12
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 180: LD_ADDR_EXP 26
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// rolfDied := false ;
 188: LD_ADDR_EXP 13
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// leninSpotted := false ;
 196: LD_ADDR_EXP 14
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// mortarConstructed := false ;
 204: LD_ADDR_EXP 15
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// rolfHasVehicles := false ;
 212: LD_ADDR_EXP 16
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// leninScriptBase := true ;
 220: LD_ADDR_EXP 11
 224: PUSH
 225: LD_INT 1
 227: ST_TO_ADDR
// rolfWantVehicles := false ;
 228: LD_ADDR_EXP 17
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// omarWantVehicles := false ;
 236: LD_ADDR_EXP 18
 240: PUSH
 241: LD_INT 0
 243: ST_TO_ADDR
// omarHasVehicles := false ;
 244: LD_ADDR_EXP 22
 248: PUSH
 249: LD_INT 0
 251: ST_TO_ADDR
// escapeAllowed := false ;
 252: LD_ADDR_EXP 24
 256: PUSH
 257: LD_INT 0
 259: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 260: LD_ADDR_EXP 19
 264: PUSH
 265: LD_INT 31500
 267: PUSH
 268: LD_INT 28350
 270: PUSH
 271: LD_INT 25900
 273: PUSH
 274: LD_INT 24150
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: PUSH
 283: LD_OWVAR 67
 287: ARRAY
 288: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 289: LD_ADDR_EXP 20
 293: PUSH
 294: LD_INT 31500
 296: PUSH
 297: LD_INT 28350
 299: PUSH
 300: LD_INT 25900
 302: PUSH
 303: LD_INT 24150
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: LIST
 310: LIST
 311: PUSH
 312: LD_OWVAR 67
 316: ARRAY
 317: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 318: LD_ADDR_EXP 21
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: LD_INT 5
 328: PUSH
 329: LD_INT 6
 331: PUSH
 332: LD_INT 6
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: LIST
 339: LIST
 340: PUSH
 341: LD_OWVAR 67
 345: ARRAY
 346: ST_TO_ADDR
// omarAttack := false ;
 347: LD_ADDR_EXP 23
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// disableAttackOnHeike := false ;
 355: LD_ADDR_EXP 27
 359: PUSH
 360: LD_INT 0
 362: ST_TO_ADDR
// escapeTimer := 8 8$30 ;
 363: LD_ADDR_EXP 25
 367: PUSH
 368: LD_INT 17850
 370: ST_TO_ADDR
// firstAttack := true ;
 371: LD_ADDR_EXP 28
 375: PUSH
 376: LD_INT 1
 378: ST_TO_ADDR
// canRolfJoin := true ;
 379: LD_ADDR_EXP 29
 383: PUSH
 384: LD_INT 1
 386: ST_TO_ADDR
// gameActive := false ;
 387: LD_ADDR_EXP 31
 391: PUSH
 392: LD_INT 0
 394: ST_TO_ADDR
// rolfAttack := false ;
 395: LD_ADDR_EXP 32
 399: PUSH
 400: LD_INT 0
 402: ST_TO_ADDR
// collectedOil := 0 ;
 403: LD_ADDR_EXP 33
 407: PUSH
 408: LD_INT 0
 410: ST_TO_ADDR
// end ;
 411: LD_VAR 0 1
 415: RET
// every 0 0$2 trigger GetSide ( Rolf ) = 2 and IsOk ( Rolf ) and not omarArrived do
 416: LD_EXP 47
 420: PPUSH
 421: CALL_OW 255
 425: PUSH
 426: LD_INT 2
 428: EQUAL
 429: PUSH
 430: LD_EXP 47
 434: PPUSH
 435: CALL_OW 302
 439: AND
 440: PUSH
 441: LD_EXP 6
 445: NOT
 446: AND
 447: IFFALSE 459
 449: GO 451
 451: DISABLE
// SetAchievement ( ACH_ROLF ) ;
 452: LD_STRING ACH_ROLF
 454: PPUSH
 455: CALL_OW 543
 459: END
// every 0 0$2 trigger collectedOil >= 300 do
 460: LD_EXP 33
 464: PUSH
 465: LD_INT 300
 467: GREATEREQUAL
 468: IFFALSE 480
 470: GO 472
 472: DISABLE
// SetAchievement ( ACH_OIL ) ;
 473: LD_STRING ACH_OIL
 475: PPUSH
 476: CALL_OW 543
 480: END
// every 0 0$2 trigger IsDead ( ruLenin ) do
 481: LD_INT 52
 483: PPUSH
 484: CALL_OW 301
 488: IFFALSE 500
 490: GO 492
 492: DISABLE
// SetAchievement ( ACH_LENIN ) ; end_of_file
 493: LD_STRING ACH_LENIN
 495: PPUSH
 496: CALL_OW 543
 500: END
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , veh , tmp , limiter ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
 506: PPUSH
 507: PPUSH
 508: PPUSH
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
 515: PPUSH
 516: PPUSH
// uc_nation := 2 ;
 517: LD_ADDR_OWVAR 21
 521: PUSH
 522: LD_INT 2
 524: ST_TO_ADDR
// uc_side := 5 ;
 525: LD_ADDR_OWVAR 20
 529: PUSH
 530: LD_INT 5
 532: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 533: LD_ADDR_EXP 42
 537: PUSH
 538: LD_STRING Abdul
 540: PPUSH
 541: LD_INT 0
 543: PPUSH
 544: LD_STRING 
 546: PPUSH
 547: CALL 29437 0 3
 551: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 552: LD_ADDR_EXP 44
 556: PUSH
 557: LD_STRING Omar
 559: PPUSH
 560: LD_INT 0
 562: PPUSH
 563: LD_STRING 
 565: PPUSH
 566: CALL 29437 0 3
 570: ST_TO_ADDR
// uc_side := 2 ;
 571: LD_ADDR_OWVAR 20
 575: PUSH
 576: LD_INT 2
 578: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 579: LD_ADDR_EXP 34
 583: PUSH
 584: LD_STRING Heike
 586: PPUSH
 587: LD_EXP 1
 591: NOT
 592: PPUSH
 593: LD_EXP 2
 597: PPUSH
 598: CALL 29437 0 3
 602: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 603: LD_ADDR_EXP 37
 607: PUSH
 608: LD_STRING Ibrahim
 610: PPUSH
 611: LD_EXP 1
 615: NOT
 616: PPUSH
 617: LD_EXP 2
 621: PPUSH
 622: CALL 29437 0 3
 626: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 627: LD_ADDR_EXP 35
 631: PUSH
 632: LD_STRING Givi
 634: PPUSH
 635: LD_EXP 1
 639: NOT
 640: PPUSH
 641: LD_EXP 2
 645: PPUSH
 646: CALL 29437 0 3
 650: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 651: LD_ADDR_EXP 38
 655: PUSH
 656: LD_STRING Kamil
 658: PPUSH
 659: LD_EXP 1
 663: NOT
 664: PPUSH
 665: LD_EXP 2
 669: PPUSH
 670: CALL 29437 0 3
 674: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 675: LD_ADDR_EXP 39
 679: PUSH
 680: LD_STRING Kaia
 682: PPUSH
 683: LD_EXP 1
 687: NOT
 688: PPUSH
 689: LD_EXP 2
 693: PPUSH
 694: CALL 29437 0 3
 698: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 699: LD_ADDR_EXP 40
 703: PUSH
 704: LD_STRING Sophia
 706: PPUSH
 707: LD_EXP 1
 711: NOT
 712: PPUSH
 713: LD_EXP 2
 717: PPUSH
 718: CALL 29437 0 3
 722: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 723: LD_ADDR_EXP 41
 727: PUSH
 728: LD_STRING Markov
 730: PPUSH
 731: LD_EXP 1
 735: NOT
 736: PPUSH
 737: LD_EXP 2
 741: PPUSH
 742: CALL 29437 0 3
 746: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 747: LD_ADDR_EXP 46
 751: PUSH
 752: LD_STRING Aviradze
 754: PPUSH
 755: LD_EXP 1
 759: NOT
 760: PPUSH
 761: LD_EXP 2
 765: PPUSH
 766: CALL 29437 0 3
 770: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 771: LD_ADDR_EXP 45
 775: PUSH
 776: LD_STRING Kurt
 778: PPUSH
 779: LD_EXP 1
 783: NOT
 784: PPUSH
 785: LD_EXP 2
 789: PPUSH
 790: CALL 29437 0 3
 794: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 795: LD_ADDR_EXP 36
 799: PUSH
 800: LD_STRING Mike
 802: PPUSH
 803: LD_EXP 1
 807: NOT
 808: PPUSH
 809: LD_EXP 2
 813: PPUSH
 814: CALL 29437 0 3
 818: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 819: LD_ADDR_EXP 43
 823: PUSH
 824: LD_STRING Olaf
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: LD_STRING 
 832: PPUSH
 833: CALL 29437 0 3
 837: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 838: LD_ADDR_EXP 49
 842: PUSH
 843: LD_STRING 05_others
 845: PPUSH
 846: CALL_OW 31
 850: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 851: LD_ADDR_EXP 50
 855: PUSH
 856: LD_STRING 05_apes
 858: PPUSH
 859: CALL_OW 31
 863: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_STRING 05_Radar
 871: PPUSH
 872: LD_EXP 1
 876: PPUSH
 877: CALL_OW 30
 881: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 882: LD_ADDR_VAR 0 6
 886: PUSH
 887: LD_STRING 05_RemoteControl
 889: PPUSH
 890: LD_EXP 1
 894: PPUSH
 895: CALL_OW 30
 899: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 900: LD_ADDR_VAR 0 7
 904: PUSH
 905: LD_STRING 05_DrugsTested
 907: PPUSH
 908: LD_EXP 1
 912: PPUSH
 913: CALL_OW 30
 917: ST_TO_ADDR
// if hasDrugs then
 918: LD_VAR 0 7
 922: IFFALSE 937
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 924: LD_INT 5
 926: PPUSH
 927: LD_INT 2
 929: PPUSH
 930: LD_INT 2
 932: PPUSH
 933: CALL_OW 322
// if hasRadar then
 937: LD_VAR 0 5
 941: IFFALSE 956
// SetTech ( tech_radar , 2 , state_researched ) ;
 943: LD_INT 6
 945: PPUSH
 946: LD_INT 2
 948: PPUSH
 949: LD_INT 2
 951: PPUSH
 952: CALL_OW 322
// if hasRemote then
 956: LD_VAR 0 6
 960: IFFALSE 975
// SetTech ( tech_remCont , 2 , state_researched ) ;
 962: LD_INT 15
 964: PPUSH
 965: LD_INT 2
 967: PPUSH
 968: LD_INT 2
 970: PPUSH
 971: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 975: LD_ADDR_VAR 0 13
 979: PUSH
 980: LD_INT 5
 982: PPUSH
 983: LD_INT 0
 985: PPUSH
 986: CALL_OW 517
 990: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 991: LD_ADDR_VAR 0 2
 995: PUSH
 996: DOUBLE
 997: LD_INT 1
 999: DEC
1000: ST_TO_ADDR
1001: LD_VAR 0 13
1005: PUSH
1006: LD_INT 1
1008: ARRAY
1009: PUSH
1010: FOR_TO
1011: IFFALSE 1088
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
1013: LD_VAR 0 13
1017: PUSH
1018: LD_INT 1
1020: ARRAY
1021: PUSH
1022: LD_VAR 0 2
1026: ARRAY
1027: PPUSH
1028: LD_VAR 0 13
1032: PUSH
1033: LD_INT 2
1035: ARRAY
1036: PUSH
1037: LD_VAR 0 2
1041: ARRAY
1042: PPUSH
1043: CALL_OW 351
1047: IFFALSE 1086
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
1049: LD_VAR 0 13
1053: PUSH
1054: LD_INT 1
1056: ARRAY
1057: PUSH
1058: LD_VAR 0 2
1062: ARRAY
1063: PPUSH
1064: LD_VAR 0 13
1068: PUSH
1069: LD_INT 2
1071: ARRAY
1072: PUSH
1073: LD_VAR 0 2
1077: ARRAY
1078: PPUSH
1079: LD_INT 2
1081: PPUSH
1082: CALL_OW 244
1086: GO 1010
1088: POP
1089: POP
// base := [ ] ;
1090: LD_ADDR_VAR 0 4
1094: PUSH
1095: EMPTY
1096: ST_TO_ADDR
// if debug then
1097: LD_EXP 1
1101: IFFALSE 1151
// begin base := [ [ b_warehouse , 51 , 77 , 1 , nation_russian , 3 , 0 , 0 , 0 ] , ] ;
1103: LD_ADDR_VAR 0 4
1107: PUSH
1108: LD_INT 1
1110: PUSH
1111: LD_INT 51
1113: PUSH
1114: LD_INT 77
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 3
1122: PUSH
1123: LD_INT 3
1125: PUSH
1126: LD_INT 0
1128: PUSH
1129: LD_INT 0
1131: PUSH
1132: LD_INT 0
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: PUSH
1146: EMPTY
1147: LIST
1148: ST_TO_ADDR
// end else
1149: GO 1167
// if buildingsFromPrev then
1151: LD_EXP 30
1155: IFFALSE 1167
// base := buildingsFromPrev ;
1157: LD_ADDR_VAR 0 4
1161: PUSH
1162: LD_EXP 30
1166: ST_TO_ADDR
// if base then
1167: LD_VAR 0 4
1171: IFFALSE 1369
// for i := 1 to base do
1173: LD_ADDR_VAR 0 2
1177: PUSH
1178: DOUBLE
1179: LD_INT 1
1181: DEC
1182: ST_TO_ADDR
1183: LD_VAR 0 4
1187: PUSH
1188: FOR_TO
1189: IFFALSE 1367
// base := Replace ( base , i , [ base [ i ] [ 1 ] , base [ i ] [ 2 ] + 155 , base [ i ] [ 3 ] + 3 , base [ i ] [ 4 ] , base [ i ] [ 5 ] , base [ i ] [ 6 ] , base [ i ] [ 7 ] , base [ i ] [ 8 ] , base [ i ] [ 9 ] ] ) ;
1191: LD_ADDR_VAR 0 4
1195: PUSH
1196: LD_VAR 0 4
1200: PPUSH
1201: LD_VAR 0 2
1205: PPUSH
1206: LD_VAR 0 4
1210: PUSH
1211: LD_VAR 0 2
1215: ARRAY
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PUSH
1221: LD_VAR 0 4
1225: PUSH
1226: LD_VAR 0 2
1230: ARRAY
1231: PUSH
1232: LD_INT 2
1234: ARRAY
1235: PUSH
1236: LD_INT 155
1238: PLUS
1239: PUSH
1240: LD_VAR 0 4
1244: PUSH
1245: LD_VAR 0 2
1249: ARRAY
1250: PUSH
1251: LD_INT 3
1253: ARRAY
1254: PUSH
1255: LD_INT 3
1257: PLUS
1258: PUSH
1259: LD_VAR 0 4
1263: PUSH
1264: LD_VAR 0 2
1268: ARRAY
1269: PUSH
1270: LD_INT 4
1272: ARRAY
1273: PUSH
1274: LD_VAR 0 4
1278: PUSH
1279: LD_VAR 0 2
1283: ARRAY
1284: PUSH
1285: LD_INT 5
1287: ARRAY
1288: PUSH
1289: LD_VAR 0 4
1293: PUSH
1294: LD_VAR 0 2
1298: ARRAY
1299: PUSH
1300: LD_INT 6
1302: ARRAY
1303: PUSH
1304: LD_VAR 0 4
1308: PUSH
1309: LD_VAR 0 2
1313: ARRAY
1314: PUSH
1315: LD_INT 7
1317: ARRAY
1318: PUSH
1319: LD_VAR 0 4
1323: PUSH
1324: LD_VAR 0 2
1328: ARRAY
1329: PUSH
1330: LD_INT 8
1332: ARRAY
1333: PUSH
1334: LD_VAR 0 4
1338: PUSH
1339: LD_VAR 0 2
1343: ARRAY
1344: PUSH
1345: LD_INT 9
1347: ARRAY
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: PPUSH
1360: CALL_OW 1
1364: ST_TO_ADDR
1365: GO 1188
1367: POP
1368: POP
// base := base ^ [ [ b_depot , 206 , 80 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_bunker , 221 , 95 , 5 , nation_arabian , 3 , 0 , 0 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , nation_arabian , 3 , 0 , 0 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , nation_arabian , 3 , 0 , 0 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_lab_full , 217 , 78 , 4 , nation_arabian , 3 , b_lab_weapon , 0 , 0 ] , [ b_solar_power , 220 , 99 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 220 , 103 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 216 , 102 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_gun , 203 , 94 , 0 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_track , 199 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 81 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 78 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ] ;
1369: LD_ADDR_VAR 0 4
1373: PUSH
1374: LD_VAR 0 4
1378: PUSH
1379: LD_INT 0
1381: PUSH
1382: LD_INT 206
1384: PUSH
1385: LD_INT 80
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 2
1393: PUSH
1394: LD_INT 3
1396: PUSH
1397: LD_INT 0
1399: PUSH
1400: LD_INT 0
1402: PUSH
1403: LD_INT 0
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 32
1419: PUSH
1420: LD_INT 221
1422: PUSH
1423: LD_INT 95
1425: PUSH
1426: LD_INT 5
1428: PUSH
1429: LD_INT 2
1431: PUSH
1432: LD_INT 3
1434: PUSH
1435: LD_INT 0
1437: PUSH
1438: LD_INT 0
1440: PUSH
1441: LD_INT 23
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: PUSH
1455: LD_INT 32
1457: PUSH
1458: LD_INT 223
1460: PUSH
1461: LD_INT 88
1463: PUSH
1464: LD_INT 5
1466: PUSH
1467: LD_INT 2
1469: PUSH
1470: LD_INT 3
1472: PUSH
1473: LD_INT 0
1475: PUSH
1476: LD_INT 0
1478: PUSH
1479: LD_INT 24
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: PUSH
1493: LD_INT 32
1495: PUSH
1496: LD_INT 202
1498: PUSH
1499: LD_INT 64
1501: PUSH
1502: LD_INT 2
1504: PUSH
1505: LD_INT 2
1507: PUSH
1508: LD_INT 3
1510: PUSH
1511: LD_INT 0
1513: PUSH
1514: LD_INT 0
1516: PUSH
1517: LD_INT 25
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: PUSH
1531: LD_INT 3
1533: PUSH
1534: LD_INT 203
1536: PUSH
1537: LD_INT 91
1539: PUSH
1540: LD_INT 1
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: LD_INT 3
1548: PUSH
1549: LD_INT 0
1551: PUSH
1552: LD_INT 0
1554: PUSH
1555: LD_INT 0
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 8
1571: PUSH
1572: LD_INT 217
1574: PUSH
1575: LD_INT 78
1577: PUSH
1578: LD_INT 4
1580: PUSH
1581: LD_INT 2
1583: PUSH
1584: LD_INT 3
1586: PUSH
1587: LD_INT 10
1589: PUSH
1590: LD_INT 0
1592: PUSH
1593: LD_INT 0
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: PUSH
1607: LD_INT 27
1609: PUSH
1610: LD_INT 220
1612: PUSH
1613: LD_INT 99
1615: PUSH
1616: LD_INT 1
1618: PUSH
1619: LD_INT 2
1621: PUSH
1622: LD_INT 3
1624: PUSH
1625: LD_INT 0
1627: PUSH
1628: LD_INT 0
1630: PUSH
1631: LD_INT 0
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: LD_INT 27
1647: PUSH
1648: LD_INT 220
1650: PUSH
1651: LD_INT 103
1653: PUSH
1654: LD_INT 1
1656: PUSH
1657: LD_INT 2
1659: PUSH
1660: LD_INT 3
1662: PUSH
1663: LD_INT 0
1665: PUSH
1666: LD_INT 0
1668: PUSH
1669: LD_INT 0
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: PUSH
1683: LD_INT 27
1685: PUSH
1686: LD_INT 216
1688: PUSH
1689: LD_INT 102
1691: PUSH
1692: LD_INT 1
1694: PUSH
1695: LD_INT 2
1697: PUSH
1698: LD_INT 3
1700: PUSH
1701: LD_INT 0
1703: PUSH
1704: LD_INT 0
1706: PUSH
1707: LD_INT 0
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 17
1723: PUSH
1724: LD_INT 203
1726: PUSH
1727: LD_INT 94
1729: PUSH
1730: LD_INT 0
1732: PUSH
1733: LD_INT 2
1735: PUSH
1736: LD_INT 3
1738: PUSH
1739: LD_INT 0
1741: PUSH
1742: LD_INT 0
1744: PUSH
1745: LD_INT 0
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: LIST
1758: PUSH
1759: LD_INT 23
1761: PUSH
1762: LD_INT 200
1764: PUSH
1765: LD_INT 88
1767: PUSH
1768: LD_INT 2
1770: PUSH
1771: LD_INT 2
1773: PUSH
1774: LD_INT 3
1776: PUSH
1777: LD_INT 0
1779: PUSH
1780: LD_INT 0
1782: PUSH
1783: LD_INT 0
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 16
1799: PUSH
1800: LD_INT 199
1802: PUSH
1803: LD_INT 91
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: LD_INT 2
1811: PUSH
1812: LD_INT 3
1814: PUSH
1815: LD_INT 0
1817: PUSH
1818: LD_INT 0
1820: PUSH
1821: LD_INT 0
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 26
1837: PUSH
1838: LD_INT 197
1840: PUSH
1841: LD_INT 81
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: LD_INT 2
1849: PUSH
1850: LD_INT 3
1852: PUSH
1853: LD_INT 0
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: LD_INT 0
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: PUSH
1873: LD_INT 26
1875: PUSH
1876: LD_INT 197
1878: PUSH
1879: LD_INT 78
1881: PUSH
1882: LD_INT 3
1884: PUSH
1885: LD_INT 2
1887: PUSH
1888: LD_INT 3
1890: PUSH
1891: LD_INT 0
1893: PUSH
1894: LD_INT 0
1896: PUSH
1897: LD_INT 0
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: ADD
1927: ST_TO_ADDR
// if hasRadar then
1928: LD_VAR 0 5
1932: IFFALSE 1996
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
1934: LD_ADDR_VAR 0 4
1938: PUSH
1939: LD_VAR 0 4
1943: PPUSH
1944: LD_VAR 0 4
1948: PUSH
1949: LD_INT 1
1951: PLUS
1952: PPUSH
1953: LD_INT 20
1955: PUSH
1956: LD_INT 203
1958: PUSH
1959: LD_INT 87
1961: PUSH
1962: LD_INT 3
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: LD_INT 3
1970: PUSH
1971: LD_INT 0
1973: PUSH
1974: LD_INT 0
1976: PUSH
1977: LD_INT 0
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: PPUSH
1991: CALL_OW 1
1995: ST_TO_ADDR
// if hasRemote then
1996: LD_VAR 0 6
2000: IFFALSE 2064
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
2002: LD_ADDR_VAR 0 4
2006: PUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_VAR 0 4
2016: PUSH
2017: LD_INT 1
2019: PLUS
2020: PPUSH
2021: LD_INT 22
2023: PUSH
2024: LD_INT 207
2026: PUSH
2027: LD_INT 95
2029: PUSH
2030: LD_INT 5
2032: PUSH
2033: LD_INT 2
2035: PUSH
2036: LD_INT 3
2038: PUSH
2039: LD_INT 0
2041: PUSH
2042: LD_INT 0
2044: PUSH
2045: LD_INT 0
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: PPUSH
2059: CALL_OW 1
2063: ST_TO_ADDR
// for i in base do
2064: LD_ADDR_VAR 0 2
2068: PUSH
2069: LD_VAR 0 4
2073: PUSH
2074: FOR_IN
2075: IFFALSE 2429
// begin if HexInfo ( i [ 2 ] , i [ 3 ] ) then
2077: LD_VAR 0 2
2081: PUSH
2082: LD_INT 2
2084: ARRAY
2085: PPUSH
2086: LD_VAR 0 2
2090: PUSH
2091: LD_INT 3
2093: ARRAY
2094: PPUSH
2095: CALL_OW 428
2099: IFFALSE 2103
// continue ;
2101: GO 2074
// uc_nation := i [ 5 ] ;
2103: LD_ADDR_OWVAR 21
2107: PUSH
2108: LD_VAR 0 2
2112: PUSH
2113: LD_INT 5
2115: ARRAY
2116: ST_TO_ADDR
// InitBc ;
2117: CALL_OW 21
// bc_type := i [ 1 ] ;
2121: LD_ADDR_OWVAR 42
2125: PUSH
2126: LD_VAR 0 2
2130: PUSH
2131: LD_INT 1
2133: ARRAY
2134: ST_TO_ADDR
// bc_level := i [ 6 ] ;
2135: LD_ADDR_OWVAR 43
2139: PUSH
2140: LD_VAR 0 2
2144: PUSH
2145: LD_INT 6
2147: ARRAY
2148: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2149: LD_ADDR_OWVAR 44
2153: PUSH
2154: LD_INT 9
2156: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2157: LD_ADDR_OWVAR 45
2161: PUSH
2162: LD_INT 9
2164: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 5 ] = nation_arabian and not i [ 8 ] then
2165: LD_VAR 0 2
2169: PUSH
2170: LD_INT 1
2172: ARRAY
2173: PUSH
2174: LD_INT 8
2176: EQUAL
2177: PUSH
2178: LD_VAR 0 2
2182: PUSH
2183: LD_INT 5
2185: ARRAY
2186: PUSH
2187: LD_INT 2
2189: EQUAL
2190: AND
2191: PUSH
2192: LD_VAR 0 2
2196: PUSH
2197: LD_INT 8
2199: ARRAY
2200: NOT
2201: AND
2202: IFFALSE 2236
// begin bc_kind1 := b_lab_weapon ;
2204: LD_ADDR_OWVAR 44
2208: PUSH
2209: LD_INT 10
2211: ST_TO_ADDR
// if hasRadar then
2212: LD_VAR 0 5
2216: IFFALSE 2228
// bc_kind2 := b_lab_opto else
2218: LD_ADDR_OWVAR 45
2222: PUSH
2223: LD_INT 15
2225: ST_TO_ADDR
2226: GO 2236
// bc_kind2 := b_lab_basic ;
2228: LD_ADDR_OWVAR 45
2232: PUSH
2233: LD_INT 9
2235: ST_TO_ADDR
// end ; if i [ 1 ] in [ b_lab_half , b_lab_full ] and i [ 7 ] then
2236: LD_VAR 0 2
2240: PUSH
2241: LD_INT 1
2243: ARRAY
2244: PUSH
2245: LD_INT 7
2247: PUSH
2248: LD_INT 8
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: IN
2255: PUSH
2256: LD_VAR 0 2
2260: PUSH
2261: LD_INT 7
2263: ARRAY
2264: AND
2265: IFFALSE 2281
// bc_kind1 := i [ 7 ] ;
2267: LD_ADDR_OWVAR 44
2271: PUSH
2272: LD_VAR 0 2
2276: PUSH
2277: LD_INT 7
2279: ARRAY
2280: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 8 ] then
2281: LD_VAR 0 2
2285: PUSH
2286: LD_INT 1
2288: ARRAY
2289: PUSH
2290: LD_INT 8
2292: EQUAL
2293: PUSH
2294: LD_VAR 0 2
2298: PUSH
2299: LD_INT 8
2301: ARRAY
2302: AND
2303: IFFALSE 2319
// bc_kind1 := i [ 8 ] ;
2305: LD_ADDR_OWVAR 44
2309: PUSH
2310: LD_VAR 0 2
2314: PUSH
2315: LD_INT 8
2317: ARRAY
2318: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2319: LD_ADDR_VAR 0 3
2323: PUSH
2324: LD_VAR 0 2
2328: PUSH
2329: LD_INT 2
2331: ARRAY
2332: PPUSH
2333: LD_VAR 0 2
2337: PUSH
2338: LD_INT 3
2340: ARRAY
2341: PPUSH
2342: LD_VAR 0 2
2346: PUSH
2347: LD_INT 4
2349: ARRAY
2350: PPUSH
2351: CALL_OW 47
2355: ST_TO_ADDR
// if i [ 9 ] then
2356: LD_VAR 0 2
2360: PUSH
2361: LD_INT 9
2363: ARRAY
2364: IFFALSE 2384
// PlaceWeaponTurret ( b , i [ 9 ] ) ;
2366: LD_VAR 0 3
2370: PPUSH
2371: LD_VAR 0 2
2375: PUSH
2376: LD_INT 9
2378: ARRAY
2379: PPUSH
2380: CALL_OW 431
// if i [ 1 ] = b_bunker then
2384: LD_VAR 0 2
2388: PUSH
2389: LD_INT 1
2391: ARRAY
2392: PUSH
2393: LD_INT 32
2395: EQUAL
2396: IFFALSE 2427
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
2398: LD_ADDR_VAR 0 11
2402: PUSH
2403: LD_VAR 0 11
2407: PPUSH
2408: LD_VAR 0 11
2412: PUSH
2413: LD_INT 1
2415: PLUS
2416: PPUSH
2417: LD_VAR 0 3
2421: PPUSH
2422: CALL_OW 1
2426: ST_TO_ADDR
// end ;
2427: GO 2074
2429: POP
2430: POP
// depot := HexInfo ( 206 , 80 ) ;
2431: LD_ADDR_VAR 0 9
2435: PUSH
2436: LD_INT 206
2438: PPUSH
2439: LD_INT 80
2441: PPUSH
2442: CALL_OW 428
2446: ST_TO_ADDR
// factory := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) ;
2447: LD_ADDR_VAR 0 8
2451: PUSH
2452: LD_INT 22
2454: PUSH
2455: LD_INT 2
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: PUSH
2462: LD_INT 30
2464: PUSH
2465: LD_INT 3
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: PPUSH
2476: CALL_OW 69
2480: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2481: LD_ADDR_VAR 0 10
2485: PUSH
2486: LD_INT 22
2488: PUSH
2489: LD_INT 2
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: LD_INT 2
2498: PUSH
2499: LD_INT 30
2501: PUSH
2502: LD_INT 6
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: PUSH
2509: LD_INT 30
2511: PUSH
2512: LD_INT 7
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: PUSH
2519: LD_INT 30
2521: PUSH
2522: LD_INT 8
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: PPUSH
2539: CALL_OW 69
2543: ST_TO_ADDR
// arDepot := depot ;
2544: LD_ADDR_EXP 48
2548: PUSH
2549: LD_VAR 0 9
2553: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 190 , 150 ] [ Difficulty ] ) ;
2554: LD_VAR 0 9
2558: PPUSH
2559: CALL_OW 274
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: LD_INT 360
2569: PUSH
2570: LD_INT 260
2572: PUSH
2573: LD_INT 190
2575: PUSH
2576: LD_INT 150
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: PUSH
2585: LD_OWVAR 67
2589: ARRAY
2590: PPUSH
2591: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 150 , 120 ] [ Difficulty ] ) ;
2595: LD_VAR 0 9
2599: PPUSH
2600: CALL_OW 274
2604: PPUSH
2605: LD_INT 2
2607: PPUSH
2608: LD_INT 200
2610: PUSH
2611: LD_INT 170
2613: PUSH
2614: LD_INT 150
2616: PUSH
2617: LD_INT 120
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: PUSH
2626: LD_OWVAR 67
2630: ARRAY
2631: PPUSH
2632: CALL_OW 277
// uc_nation := 2 ;
2636: LD_ADDR_OWVAR 21
2640: PUSH
2641: LD_INT 2
2643: ST_TO_ADDR
// uc_side := 2 ;
2644: LD_ADDR_OWVAR 20
2648: PUSH
2649: LD_INT 2
2651: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
2652: LD_INT 13
2654: PPUSH
2655: LD_INT 1
2657: PPUSH
2658: LD_INT 1
2660: PPUSH
2661: LD_INT 27
2663: PPUSH
2664: LD_INT 33
2666: PPUSH
2667: CALL 34277 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
2671: CALL_OW 45
2675: PPUSH
2676: LD_INT 190
2678: PPUSH
2679: LD_INT 64
2681: PPUSH
2682: LD_INT 5
2684: PPUSH
2685: LD_INT 0
2687: PPUSH
2688: CALL 69279 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
2692: LD_INT 13
2694: PPUSH
2695: LD_INT 1
2697: PPUSH
2698: LD_INT 1
2700: PPUSH
2701: LD_INT 25
2703: PPUSH
2704: LD_INT 22
2706: PPUSH
2707: CALL 34277 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
2711: CALL_OW 45
2715: PPUSH
2716: LD_INT 188
2718: PPUSH
2719: LD_INT 67
2721: PPUSH
2722: LD_INT 5
2724: PPUSH
2725: LD_INT 0
2727: PPUSH
2728: CALL 69279 0 5
// PlaceUnitXY ( Heike , 213 , 87 , false ) ;
2732: LD_EXP 34
2736: PPUSH
2737: LD_INT 213
2739: PPUSH
2740: LD_INT 87
2742: PPUSH
2743: LD_INT 0
2745: PPUSH
2746: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
2750: LD_EXP 34
2754: PPUSH
2755: LD_INT 214
2757: PPUSH
2758: LD_INT 87
2760: PPUSH
2761: CALL_OW 118
// if Kaia then
2765: LD_EXP 39
2769: IFFALSE 2804
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
2771: LD_EXP 39
2775: PPUSH
2776: LD_INT 213
2778: PPUSH
2779: LD_INT 85
2781: PPUSH
2782: LD_INT 0
2784: PPUSH
2785: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
2789: LD_EXP 39
2793: PPUSH
2794: LD_INT 215
2796: PPUSH
2797: LD_INT 87
2799: PPUSH
2800: CALL_OW 118
// end ; if Olaf and Kaia then
2804: LD_EXP 43
2808: PUSH
2809: LD_EXP 39
2813: AND
2814: IFFALSE 2851
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
2816: LD_EXP 43
2820: PPUSH
2821: LD_INT 215
2823: PPUSH
2824: LD_INT 87
2826: PPUSH
2827: LD_INT 0
2829: PPUSH
2830: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
2834: LD_EXP 43
2838: PPUSH
2839: LD_INT 213
2841: PPUSH
2842: LD_INT 85
2844: PPUSH
2845: CALL_OW 118
// end else
2849: GO 2871
// if Olaf then
2851: LD_EXP 43
2855: IFFALSE 2871
// PlaceHumanInUnit ( Olaf , factory ) ;
2857: LD_EXP 43
2861: PPUSH
2862: LD_VAR 0 8
2866: PPUSH
2867: CALL_OW 52
// if Givi then
2871: LD_EXP 35
2875: IFFALSE 2956
// begin if Kaia and Olaf then
2877: LD_EXP 39
2881: PUSH
2882: LD_EXP 43
2886: AND
2887: IFFALSE 2924
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
2889: LD_EXP 35
2893: PPUSH
2894: LD_INT 247
2896: PPUSH
2897: LD_INT 117
2899: PPUSH
2900: LD_INT 0
2902: PPUSH
2903: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2907: LD_EXP 35
2911: PPUSH
2912: LD_INT 248
2914: PPUSH
2915: LD_INT 118
2917: PPUSH
2918: CALL_OW 118
// end else
2922: GO 2956
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2924: LD_EXP 35
2928: PPUSH
2929: LD_INT 216
2931: PPUSH
2932: LD_INT 88
2934: PPUSH
2935: LD_INT 0
2937: PPUSH
2938: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2942: LD_EXP 35
2946: PPUSH
2947: LD_EXP 34
2951: PPUSH
2952: CALL_OW 119
// end ; end ; if Kurt then
2956: LD_EXP 45
2960: IFFALSE 2980
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2962: LD_EXP 45
2966: PPUSH
2967: LD_VAR 0 11
2971: PUSH
2972: LD_INT 2
2974: ARRAY
2975: PPUSH
2976: CALL_OW 52
// if Mike then
2980: LD_EXP 36
2984: IFFALSE 3004
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2986: LD_EXP 36
2990: PPUSH
2991: LD_VAR 0 11
2995: PUSH
2996: LD_INT 3
2998: ARRAY
2999: PPUSH
3000: CALL_OW 52
// if Kamil then
3004: LD_EXP 38
3008: IFFALSE 3070
// begin if Kaia and Olaf then
3010: LD_EXP 39
3014: PUSH
3015: LD_EXP 43
3019: AND
3020: IFFALSE 3038
// PlaceHumanInUnit ( Kamil , depot ) else
3022: LD_EXP 38
3026: PPUSH
3027: LD_VAR 0 9
3031: PPUSH
3032: CALL_OW 52
3036: GO 3070
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
3038: LD_EXP 38
3042: PPUSH
3043: LD_INT 213
3045: PPUSH
3046: LD_INT 87
3048: PPUSH
3049: LD_INT 0
3051: PPUSH
3052: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
3056: LD_EXP 38
3060: PPUSH
3061: LD_EXP 34
3065: PPUSH
3066: CALL_OW 119
// end ; end ; if Sophia then
3070: LD_EXP 40
3074: IFFALSE 3090
// PlaceHumanInUnit ( Sophia , depot ) ;
3076: LD_EXP 40
3080: PPUSH
3081: LD_VAR 0 9
3085: PPUSH
3086: CALL_OW 52
// if Aviradze then
3090: LD_EXP 46
3094: IFFALSE 3143
// if lab then
3096: LD_VAR 0 10
3100: IFFALSE 3122
// PlaceHumanInUnit ( Aviradze , lab [ 1 ] ) else
3102: LD_EXP 46
3106: PPUSH
3107: LD_VAR 0 10
3111: PUSH
3112: LD_INT 1
3114: ARRAY
3115: PPUSH
3116: CALL_OW 52
3120: GO 3143
// PlaceUnitXYR ( Aviradze , 210 , 87 , 3 , false ) ;
3122: LD_EXP 46
3126: PPUSH
3127: LD_INT 210
3129: PPUSH
3130: LD_INT 87
3132: PPUSH
3133: LD_INT 3
3135: PPUSH
3136: LD_INT 0
3138: PPUSH
3139: CALL_OW 50
// if Ibrahim then
3143: LD_EXP 37
3147: IFFALSE 3196
// if lab then
3149: LD_VAR 0 10
3153: IFFALSE 3175
// PlaceHumanInUnit ( Ibrahim , lab [ 1 ] ) else
3155: LD_EXP 37
3159: PPUSH
3160: LD_VAR 0 10
3164: PUSH
3165: LD_INT 1
3167: ARRAY
3168: PPUSH
3169: CALL_OW 52
3173: GO 3196
// PlaceUnitXYR ( Ibrahim , 210 , 87 , 3 , false ) ;
3175: LD_EXP 37
3179: PPUSH
3180: LD_INT 210
3182: PPUSH
3183: LD_INT 87
3185: PPUSH
3186: LD_INT 3
3188: PPUSH
3189: LD_INT 0
3191: PPUSH
3192: CALL_OW 50
// if Markov then
3196: LD_EXP 41
3200: IFFALSE 3249
// if factory then
3202: LD_VAR 0 8
3206: IFFALSE 3228
// PlaceHumanInUnit ( Markov , factory [ 1 ] ) else
3208: LD_EXP 41
3212: PPUSH
3213: LD_VAR 0 8
3217: PUSH
3218: LD_INT 1
3220: ARRAY
3221: PPUSH
3222: CALL_OW 52
3226: GO 3249
// PlaceUnitXYR ( Markov , 210 , 87 , 3 , false ) ;
3228: LD_EXP 41
3232: PPUSH
3233: LD_INT 210
3235: PPUSH
3236: LD_INT 87
3238: PPUSH
3239: LD_INT 3
3241: PPUSH
3242: LD_INT 0
3244: PPUSH
3245: CALL_OW 50
// if heikeSecondSquad then
3249: LD_EXP 49
3253: IFFALSE 3293
// for i in heikeSecondSquad do
3255: LD_ADDR_VAR 0 2
3259: PUSH
3260: LD_EXP 49
3264: PUSH
3265: FOR_IN
3266: IFFALSE 3291
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
3268: LD_VAR 0 2
3272: PPUSH
3273: LD_INT 190
3275: PPUSH
3276: LD_INT 65
3278: PPUSH
3279: LD_INT 5
3281: PPUSH
3282: LD_INT 0
3284: PPUSH
3285: CALL_OW 50
3289: GO 3265
3291: POP
3292: POP
// if heikeApes then
3293: LD_EXP 50
3297: IFFALSE 3337
// for i in heikeApes do
3299: LD_ADDR_VAR 0 2
3303: PUSH
3304: LD_EXP 50
3308: PUSH
3309: FOR_IN
3310: IFFALSE 3335
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
3312: LD_VAR 0 2
3316: PPUSH
3317: LD_INT 190
3319: PPUSH
3320: LD_INT 70
3322: PPUSH
3323: LD_INT 5
3325: PPUSH
3326: LD_INT 0
3328: PPUSH
3329: CALL_OW 50
3333: GO 3309
3335: POP
3336: POP
// tmp := LoadVariable ( 05_Vehicles , [ ] ) ;
3337: LD_ADDR_VAR 0 13
3341: PUSH
3342: LD_STRING 05_Vehicles
3344: PPUSH
3345: EMPTY
3346: PPUSH
3347: CALL_OW 30
3351: ST_TO_ADDR
// if tmp then
3352: LD_VAR 0 13
3356: IFFALSE 3526
// begin limiter := 10 ;
3358: LD_ADDR_VAR 0 14
3362: PUSH
3363: LD_INT 10
3365: ST_TO_ADDR
// for i in tmp do
3366: LD_ADDR_VAR 0 2
3370: PUSH
3371: LD_VAR 0 13
3375: PUSH
3376: FOR_IN
3377: IFFALSE 3524
// begin limiter := Dec ( limiter ) ;
3379: LD_ADDR_VAR 0 14
3383: PUSH
3384: LD_VAR 0 14
3388: PPUSH
3389: CALL 68522 0 1
3393: ST_TO_ADDR
// if limiter = 0 then
3394: LD_VAR 0 14
3398: PUSH
3399: LD_INT 0
3401: EQUAL
3402: IFFALSE 3406
// break ;
3404: GO 3524
// uc_side := 2 ;
3406: LD_ADDR_OWVAR 20
3410: PUSH
3411: LD_INT 2
3413: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
3414: LD_ADDR_OWVAR 21
3418: PUSH
3419: LD_VAR 0 2
3423: PUSH
3424: LD_INT 5
3426: ARRAY
3427: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 20 ) ;
3428: LD_VAR 0 2
3432: PUSH
3433: LD_INT 1
3435: ARRAY
3436: PPUSH
3437: LD_VAR 0 2
3441: PUSH
3442: LD_INT 2
3444: ARRAY
3445: PPUSH
3446: LD_VAR 0 2
3450: PUSH
3451: LD_INT 3
3453: ARRAY
3454: PPUSH
3455: LD_VAR 0 2
3459: PUSH
3460: LD_INT 4
3462: ARRAY
3463: PPUSH
3464: LD_INT 20
3466: PPUSH
3467: CALL 34277 0 5
// veh := CreateVehicle ;
3471: LD_ADDR_VAR 0 12
3475: PUSH
3476: CALL_OW 45
3480: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
3481: LD_VAR 0 12
3485: PPUSH
3486: LD_INT 0
3488: PPUSH
3489: LD_INT 5
3491: PPUSH
3492: CALL_OW 12
3496: PPUSH
3497: CALL_OW 233
// PlaceUnitXYR ( veh , 252 , 111 , 8 , false ) ;
3501: LD_VAR 0 12
3505: PPUSH
3506: LD_INT 252
3508: PPUSH
3509: LD_INT 111
3511: PPUSH
3512: LD_INT 8
3514: PPUSH
3515: LD_INT 0
3517: PPUSH
3518: CALL_OW 50
// end ;
3522: GO 3376
3524: POP
3525: POP
// end ; end ;
3526: LD_VAR 0 1
3530: RET
// export function PrepareRolfSquad ; var i , j ; begin
3531: LD_INT 0
3533: PPUSH
3534: PPUSH
3535: PPUSH
// uc_side := 8 ;
3536: LD_ADDR_OWVAR 20
3540: PUSH
3541: LD_INT 8
3543: ST_TO_ADDR
// uc_nation := 2 ;
3544: LD_ADDR_OWVAR 21
3548: PUSH
3549: LD_INT 2
3551: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
3552: LD_ADDR_EXP 47
3556: PUSH
3557: LD_STRING Bergkamp
3559: PPUSH
3560: CALL_OW 25
3564: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
3565: LD_ADDR_EXP 51
3569: PUSH
3570: LD_EXP 47
3574: PUSH
3575: EMPTY
3576: LIST
3577: ST_TO_ADDR
// for i := 1 to 4 do
3578: LD_ADDR_VAR 0 2
3582: PUSH
3583: DOUBLE
3584: LD_INT 1
3586: DEC
3587: ST_TO_ADDR
3588: LD_INT 4
3590: PUSH
3591: FOR_TO
3592: IFFALSE 3672
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
3594: LD_ADDR_VAR 0 3
3598: PUSH
3599: DOUBLE
3600: LD_INT 1
3602: DEC
3603: ST_TO_ADDR
3604: LD_INT 5
3606: PUSH
3607: LD_INT 2
3609: PUSH
3610: LD_INT 3
3612: PUSH
3613: LD_INT 1
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: LD_VAR 0 2
3626: ARRAY
3627: PUSH
3628: FOR_TO
3629: IFFALSE 3668
// begin PrepareHuman ( false , i , 5 ) ;
3631: LD_INT 0
3633: PPUSH
3634: LD_VAR 0 2
3638: PPUSH
3639: LD_INT 5
3641: PPUSH
3642: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
3646: LD_ADDR_EXP 51
3650: PUSH
3651: LD_EXP 51
3655: PPUSH
3656: CALL_OW 44
3660: PPUSH
3661: CALL 67139 0 2
3665: ST_TO_ADDR
// end ;
3666: GO 3628
3668: POP
3669: POP
// end ;
3670: GO 3591
3672: POP
3673: POP
// if HexInfo ( 5 , 3 ) then
3674: LD_INT 5
3676: PPUSH
3677: LD_INT 3
3679: PPUSH
3680: CALL_OW 428
3684: IFFALSE 3701
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
3686: LD_INT 5
3688: PPUSH
3689: LD_INT 3
3691: PPUSH
3692: CALL_OW 428
3696: PPUSH
3697: CALL_OW 64
// for i in rolfSquad do
3701: LD_ADDR_VAR 0 2
3705: PUSH
3706: LD_EXP 51
3710: PUSH
3711: FOR_IN
3712: IFFALSE 3848
// begin uc_direction := 2 ;
3714: LD_ADDR_OWVAR 24
3718: PUSH
3719: LD_INT 2
3721: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
3722: LD_VAR 0 2
3726: PPUSH
3727: CALL_OW 257
3731: PUSH
3732: LD_INT 3
3734: EQUAL
3735: IFFALSE 3809
// begin uc_side := 8 ;
3737: LD_ADDR_OWVAR 20
3741: PUSH
3742: LD_INT 8
3744: ST_TO_ADDR
// uc_nation := 2 ;
3745: LD_ADDR_OWVAR 21
3749: PUSH
3750: LD_INT 2
3752: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
3753: LD_INT 13
3755: PPUSH
3756: LD_INT 1
3758: PPUSH
3759: LD_INT 1
3761: PPUSH
3762: LD_INT 27
3764: PPUSH
3765: LD_INT 88
3767: PPUSH
3768: CALL 34277 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
3772: CALL_OW 45
3776: PPUSH
3777: LD_INT 11
3779: PPUSH
3780: LD_INT 0
3782: PPUSH
3783: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
3787: LD_VAR 0 2
3791: PPUSH
3792: LD_INT 5
3794: PPUSH
3795: LD_INT 3
3797: PPUSH
3798: CALL_OW 428
3802: PPUSH
3803: CALL_OW 52
// end else
3807: GO 3824
// PlaceUnitArea ( i , northSpawn , false ) ;
3809: LD_VAR 0 2
3813: PPUSH
3814: LD_INT 11
3816: PPUSH
3817: LD_INT 0
3819: PPUSH
3820: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
3824: LD_VAR 0 2
3828: PPUSH
3829: LD_INT 29
3831: PPUSH
3832: LD_INT 10
3834: PPUSH
3835: CALL_OW 111
// wait ( 0 0$2 ) ;
3839: LD_INT 70
3841: PPUSH
3842: CALL_OW 67
// end ;
3846: GO 3711
3848: POP
3849: POP
// wait ( 0 0$5 ) ;
3850: LD_INT 175
3852: PPUSH
3853: CALL_OW 67
// end ;
3857: LD_VAR 0 1
3861: RET
// export function PrepareRolfBase ; var i , tmp ; begin
3862: LD_INT 0
3864: PPUSH
3865: PPUSH
3866: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
3867: LD_EXP 47
3871: PPUSH
3872: LD_INT 94
3874: PPUSH
3875: LD_INT 63
3877: PPUSH
3878: CALL_OW 428
3882: PPUSH
3883: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
3887: LD_ADDR_VAR 0 3
3891: PUSH
3892: LD_INT 4
3894: PUSH
3895: LD_INT 82
3897: PUSH
3898: LD_INT 64
3900: PUSH
3901: LD_INT 1
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: PUSH
3910: LD_INT 31
3912: PUSH
3913: LD_INT 73
3915: PUSH
3916: LD_INT 58
3918: PUSH
3919: LD_INT 0
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: ST_TO_ADDR
// for i in tmp do
3932: LD_ADDR_VAR 0 2
3936: PUSH
3937: LD_VAR 0 3
3941: PUSH
3942: FOR_IN
3943: IFFALSE 4007
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3945: LD_EXP 51
3949: PPUSH
3950: LD_INT 25
3952: PUSH
3953: LD_INT 2
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: PPUSH
3960: CALL_OW 72
3964: PPUSH
3965: LD_VAR 0 2
3969: PUSH
3970: LD_INT 1
3972: ARRAY
3973: PPUSH
3974: LD_VAR 0 2
3978: PUSH
3979: LD_INT 2
3981: ARRAY
3982: PPUSH
3983: LD_VAR 0 2
3987: PUSH
3988: LD_INT 3
3990: ARRAY
3991: PPUSH
3992: LD_VAR 0 2
3996: PUSH
3997: LD_INT 4
3999: ARRAY
4000: PPUSH
4001: CALL_OW 205
4005: GO 3942
4007: POP
4008: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
4009: LD_EXP 51
4013: PUSH
4014: LD_INT 2
4016: ARRAY
4017: PPUSH
4018: LD_INT 63
4020: PPUSH
4021: LD_INT 42
4023: PPUSH
4024: CALL_OW 428
4028: PPUSH
4029: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
4033: LD_EXP 51
4037: PUSH
4038: LD_INT 3
4040: ARRAY
4041: PPUSH
4042: LD_INT 94
4044: PPUSH
4045: LD_INT 63
4047: PPUSH
4048: CALL_OW 428
4052: PPUSH
4053: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4057: LD_INT 35
4059: PPUSH
4060: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
4064: LD_EXP 51
4068: PPUSH
4069: LD_INT 25
4071: PUSH
4072: LD_INT 2
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: LD_INT 3
4081: PUSH
4082: LD_INT 60
4084: PUSH
4085: EMPTY
4086: LIST
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PPUSH
4096: CALL_OW 72
4100: IFFALSE 4057
// rolfScriptBase := true ;
4102: LD_ADDR_EXP 9
4106: PUSH
4107: LD_INT 1
4109: ST_TO_ADDR
// end ;
4110: LD_VAR 0 1
4114: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
4115: LD_EXP 9
4119: PUSH
4120: LD_EXP 47
4124: PPUSH
4125: CALL_OW 255
4129: PUSH
4130: LD_INT 8
4132: EQUAL
4133: AND
4134: IFFALSE 5141
4136: GO 4138
4138: DISABLE
4139: LD_INT 0
4141: PPUSH
4142: PPUSH
4143: PPUSH
4144: PPUSH
4145: PPUSH
4146: PPUSH
4147: PPUSH
4148: PPUSH
4149: PPUSH
4150: PPUSH
// begin enable ;
4151: ENABLE
// if not rolfSquad then
4152: LD_EXP 51
4156: NOT
4157: IFFALSE 4161
// exit ;
4159: GO 5141
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
4161: LD_ADDR_VAR 0 9
4165: PUSH
4166: LD_INT 12
4168: PPUSH
4169: LD_INT 81
4171: PUSH
4172: LD_INT 8
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PPUSH
4179: CALL_OW 70
4183: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
4184: LD_ADDR_VAR 0 5
4188: PUSH
4189: LD_EXP 51
4193: PPUSH
4194: LD_INT 25
4196: PUSH
4197: LD_INT 1
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PPUSH
4204: CALL_OW 72
4208: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
4209: LD_ADDR_VAR 0 6
4213: PUSH
4214: LD_EXP 51
4218: PPUSH
4219: LD_INT 25
4221: PUSH
4222: LD_INT 2
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PPUSH
4229: CALL_OW 72
4233: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
4234: LD_ADDR_VAR 0 8
4238: PUSH
4239: LD_EXP 51
4243: PPUSH
4244: LD_INT 25
4246: PUSH
4247: LD_INT 3
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: PPUSH
4254: CALL_OW 72
4258: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
4259: LD_ADDR_VAR 0 7
4263: PUSH
4264: LD_EXP 51
4268: PPUSH
4269: LD_INT 25
4271: PUSH
4272: LD_INT 4
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: PPUSH
4279: CALL_OW 72
4283: ST_TO_ADDR
// if sol then
4284: LD_VAR 0 5
4288: IFFALSE 4586
// for i in sol union Rolf do
4290: LD_ADDR_VAR 0 1
4294: PUSH
4295: LD_VAR 0 5
4299: PUSH
4300: LD_EXP 47
4304: UNION
4305: PUSH
4306: FOR_IN
4307: IFFALSE 4584
// if not IsInUnit ( i ) and not HasTask ( i ) then
4309: LD_VAR 0 1
4313: PPUSH
4314: CALL_OW 310
4318: NOT
4319: PUSH
4320: LD_VAR 0 1
4324: PPUSH
4325: CALL_OW 314
4329: NOT
4330: AND
4331: IFFALSE 4582
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
4333: LD_VAR 0 1
4337: PPUSH
4338: CALL_OW 256
4342: PUSH
4343: LD_INT 500
4345: LESS
4346: PUSH
4347: LD_VAR 0 1
4351: PPUSH
4352: LD_INT 80
4354: PPUSH
4355: LD_INT 49
4357: PPUSH
4358: CALL_OW 297
4362: PUSH
4363: LD_INT 6
4365: GREATER
4366: AND
4367: IFFALSE 4386
// begin ComMoveXY ( i , 80 , 49 ) ;
4369: LD_VAR 0 1
4373: PPUSH
4374: LD_INT 80
4376: PPUSH
4377: LD_INT 49
4379: PPUSH
4380: CALL_OW 111
// continue ;
4384: GO 4306
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4386: LD_ADDR_VAR 0 4
4390: PUSH
4391: LD_INT 22
4393: PUSH
4394: LD_INT 8
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PUSH
4401: LD_INT 50
4403: PUSH
4404: EMPTY
4405: LIST
4406: PUSH
4407: LD_INT 2
4409: PUSH
4410: LD_INT 30
4412: PUSH
4413: LD_INT 4
4415: PUSH
4416: EMPTY
4417: LIST
4418: LIST
4419: PUSH
4420: LD_INT 30
4422: PUSH
4423: LD_INT 5
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: PUSH
4430: LD_INT 30
4432: PUSH
4433: LD_INT 32
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PUSH
4440: LD_INT 30
4442: PUSH
4443: LD_INT 31
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: LIST
4461: PPUSH
4462: CALL_OW 69
4466: ST_TO_ADDR
// if tmp then
4467: LD_VAR 0 4
4471: IFFALSE 4582
// begin for b in tmp do
4473: LD_ADDR_VAR 0 2
4477: PUSH
4478: LD_VAR 0 4
4482: PUSH
4483: FOR_IN
4484: IFFALSE 4580
// begin case GetBType ( b ) of b_armoury , b_barracks :
4486: LD_VAR 0 2
4490: PPUSH
4491: CALL_OW 266
4495: PUSH
4496: LD_INT 4
4498: DOUBLE
4499: EQUAL
4500: IFTRUE 4510
4502: LD_INT 5
4504: DOUBLE
4505: EQUAL
4506: IFTRUE 4510
4508: GO 4521
4510: POP
// p := 6 ; b_breastwork , b_bunker :
4511: LD_ADDR_VAR 0 3
4515: PUSH
4516: LD_INT 6
4518: ST_TO_ADDR
4519: GO 4547
4521: LD_INT 31
4523: DOUBLE
4524: EQUAL
4525: IFTRUE 4535
4527: LD_INT 32
4529: DOUBLE
4530: EQUAL
4531: IFTRUE 4535
4533: GO 4546
4535: POP
// p := 1 ; end ;
4536: LD_ADDR_VAR 0 3
4540: PUSH
4541: LD_INT 1
4543: ST_TO_ADDR
4544: GO 4547
4546: POP
// if UnitsInside ( b ) < p then
4547: LD_VAR 0 2
4551: PPUSH
4552: CALL_OW 313
4556: PUSH
4557: LD_VAR 0 3
4561: LESS
4562: IFFALSE 4578
// ComEnterUnit ( i , b ) ;
4564: LD_VAR 0 1
4568: PPUSH
4569: LD_VAR 0 2
4573: PPUSH
4574: CALL_OW 120
// end ;
4578: GO 4483
4580: POP
4581: POP
// end ; end ;
4582: GO 4306
4584: POP
4585: POP
// if sci then
4586: LD_VAR 0 7
4590: IFFALSE 4645
// for i in sci do
4592: LD_ADDR_VAR 0 1
4596: PUSH
4597: LD_VAR 0 7
4601: PUSH
4602: FOR_IN
4603: IFFALSE 4643
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
4605: LD_VAR 0 1
4609: PPUSH
4610: LD_INT 80
4612: PPUSH
4613: LD_INT 49
4615: PPUSH
4616: CALL_OW 297
4620: PUSH
4621: LD_INT 9
4623: GREATER
4624: IFFALSE 4641
// ComMoveXY ( i , 80 , 49 ) ;
4626: LD_VAR 0 1
4630: PPUSH
4631: LD_INT 80
4633: PPUSH
4634: LD_INT 49
4636: PPUSH
4637: CALL_OW 111
// end ;
4641: GO 4602
4643: POP
4644: POP
// if mech then
4645: LD_VAR 0 8
4649: IFFALSE 4863
// for i in mech do
4651: LD_ADDR_VAR 0 1
4655: PUSH
4656: LD_VAR 0 8
4660: PUSH
4661: FOR_IN
4662: IFFALSE 4861
// begin hasVehicle := IsInUnit ( i ) ;
4664: LD_ADDR_VAR 0 10
4668: PUSH
4669: LD_VAR 0 1
4673: PPUSH
4674: CALL_OW 310
4678: ST_TO_ADDR
// if enemyInBase then
4679: LD_VAR 0 9
4683: IFFALSE 4779
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
4685: LD_VAR 0 10
4689: PUSH
4690: LD_VAR 0 10
4694: PPUSH
4695: CALL_OW 256
4699: PUSH
4700: LD_INT 500
4702: GREATER
4703: AND
4704: IFFALSE 4732
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
4706: LD_VAR 0 10
4710: PPUSH
4711: LD_VAR 0 9
4715: PPUSH
4716: LD_VAR 0 10
4720: PPUSH
4721: CALL_OW 74
4725: PPUSH
4726: CALL_OW 115
4730: GO 4777
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
4732: LD_VAR 0 10
4736: PPUSH
4737: LD_INT 86
4739: PPUSH
4740: LD_INT 49
4742: PPUSH
4743: CALL_OW 297
4747: PUSH
4748: LD_INT 8
4750: GREATER
4751: IFFALSE 4777
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
4753: LD_VAR 0 10
4757: PPUSH
4758: LD_INT 86
4760: PPUSH
4761: LD_INT 49
4763: PPUSH
4764: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
4768: LD_VAR 0 1
4772: PPUSH
4773: CALL 68959 0 1
// end end else
4777: GO 4859
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
4779: LD_VAR 0 1
4783: PPUSH
4784: LD_INT 86
4786: PPUSH
4787: LD_INT 49
4789: PPUSH
4790: CALL_OW 297
4794: PUSH
4795: LD_INT 8
4797: GREATER
4798: IFFALSE 4817
// ComMoveXY ( i , 86 , 49 ) else
4800: LD_VAR 0 1
4804: PPUSH
4805: LD_INT 86
4807: PPUSH
4808: LD_INT 49
4810: PPUSH
4811: CALL_OW 111
4815: GO 4859
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
4817: LD_VAR 0 10
4821: PUSH
4822: LD_VAR 0 10
4826: PPUSH
4827: CALL_OW 256
4831: PUSH
4832: LD_INT 1000
4834: LESS
4835: AND
4836: IFFALSE 4859
// begin SetFuel ( hasVehicle , 100 ) ;
4838: LD_VAR 0 10
4842: PPUSH
4843: LD_INT 100
4845: PPUSH
4846: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
4850: LD_VAR 0 1
4854: PPUSH
4855: CALL 68839 0 1
// end ; end ; end ;
4859: GO 4661
4861: POP
4862: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4863: LD_ADDR_VAR 0 4
4867: PUSH
4868: LD_INT 12
4870: PPUSH
4871: LD_INT 3
4873: PUSH
4874: LD_INT 24
4876: PUSH
4877: LD_INT 1000
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PUSH
4888: LD_INT 21
4890: PUSH
4891: LD_INT 3
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PPUSH
4902: CALL_OW 70
4906: ST_TO_ADDR
// if tmp and eng then
4907: LD_VAR 0 4
4911: PUSH
4912: LD_VAR 0 6
4916: AND
4917: IFFALSE 5023
// begin for i in eng do
4919: LD_ADDR_VAR 0 1
4923: PUSH
4924: LD_VAR 0 6
4928: PUSH
4929: FOR_IN
4930: IFFALSE 5021
// if IsInUnit ( i ) then
4932: LD_VAR 0 1
4936: PPUSH
4937: CALL_OW 310
4941: IFFALSE 4954
// ComExitBuilding ( i ) else
4943: LD_VAR 0 1
4947: PPUSH
4948: CALL_OW 122
4952: GO 5019
// if GetLives ( i ) = 1000 then
4954: LD_VAR 0 1
4958: PPUSH
4959: CALL_OW 256
4963: PUSH
4964: LD_INT 1000
4966: EQUAL
4967: IFFALSE 4989
// ComRepairBuilding ( i , tmp [ 1 ] ) else
4969: LD_VAR 0 1
4973: PPUSH
4974: LD_VAR 0 4
4978: PUSH
4979: LD_INT 1
4981: ARRAY
4982: PPUSH
4983: CALL_OW 130
4987: GO 5019
// if GetLives ( i ) < 700 then
4989: LD_VAR 0 1
4993: PPUSH
4994: CALL_OW 256
4998: PUSH
4999: LD_INT 700
5001: LESS
5002: IFFALSE 5019
// ComMoveXY ( i , 80 , 49 ) ;
5004: LD_VAR 0 1
5008: PPUSH
5009: LD_INT 80
5011: PPUSH
5012: LD_INT 49
5014: PPUSH
5015: CALL_OW 111
5019: GO 4929
5021: POP
5022: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
5023: LD_VAR 0 4
5027: NOT
5028: PUSH
5029: LD_VAR 0 6
5033: PPUSH
5034: LD_INT 3
5036: PUSH
5037: LD_INT 54
5039: PUSH
5040: EMPTY
5041: LIST
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: PPUSH
5047: CALL_OW 72
5051: AND
5052: IFFALSE 5141
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
5054: LD_ADDR_VAR 0 1
5058: PUSH
5059: LD_VAR 0 6
5063: PPUSH
5064: LD_INT 3
5066: PUSH
5067: LD_INT 54
5069: PUSH
5070: EMPTY
5071: LIST
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: PPUSH
5077: CALL_OW 72
5081: PUSH
5082: FOR_IN
5083: IFFALSE 5139
// if GetLives ( i ) < 1000 then
5085: LD_VAR 0 1
5089: PPUSH
5090: CALL_OW 256
5094: PUSH
5095: LD_INT 1000
5097: LESS
5098: IFFALSE 5117
// ComMoveXY ( i , 80 , 49 ) else
5100: LD_VAR 0 1
5104: PPUSH
5105: LD_INT 80
5107: PPUSH
5108: LD_INT 49
5110: PPUSH
5111: CALL_OW 111
5115: GO 5137
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
5117: LD_VAR 0 1
5121: PPUSH
5122: LD_INT 86
5124: PPUSH
5125: LD_INT 54
5127: PPUSH
5128: CALL_OW 428
5132: PPUSH
5133: CALL_OW 120
5137: GO 5082
5139: POP
5140: POP
// end ;
5141: PPOPN 10
5143: END
// export function PrepareOmarSquad ; var i , j , p ; begin
5144: LD_INT 0
5146: PPUSH
5147: PPUSH
5148: PPUSH
5149: PPUSH
// uc_side := 5 ;
5150: LD_ADDR_OWVAR 20
5154: PUSH
5155: LD_INT 5
5157: ST_TO_ADDR
// uc_nation := 2 ;
5158: LD_ADDR_OWVAR 21
5162: PUSH
5163: LD_INT 2
5165: ST_TO_ADDR
// omarSquad := [ ] ;
5166: LD_ADDR_EXP 52
5170: PUSH
5171: EMPTY
5172: ST_TO_ADDR
// for i := 1 to 4 do
5173: LD_ADDR_VAR 0 2
5177: PUSH
5178: DOUBLE
5179: LD_INT 1
5181: DEC
5182: ST_TO_ADDR
5183: LD_INT 4
5185: PUSH
5186: FOR_TO
5187: IFFALSE 5310
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
5189: LD_ADDR_VAR 0 3
5193: PUSH
5194: DOUBLE
5195: LD_INT 1
5197: DEC
5198: ST_TO_ADDR
5199: LD_INT 6
5201: PUSH
5202: LD_INT 2
5204: PUSH
5205: LD_INT 2
5207: PUSH
5208: LD_EXP 21
5212: PLUS
5213: PUSH
5214: LD_INT 2
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: PUSH
5223: LD_VAR 0 2
5227: ARRAY
5228: PUSH
5229: FOR_TO
5230: IFFALSE 5306
// begin PrepareHuman ( false , i , 5 ) ;
5232: LD_INT 0
5234: PPUSH
5235: LD_VAR 0 2
5239: PPUSH
5240: LD_INT 5
5242: PPUSH
5243: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
5247: LD_ADDR_EXP 52
5251: PUSH
5252: LD_EXP 52
5256: PPUSH
5257: CALL_OW 44
5261: PPUSH
5262: CALL 67139 0 2
5266: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
5267: LD_VAR 0 2
5271: PUSH
5272: LD_INT 1
5274: EQUAL
5275: PUSH
5276: LD_INT 50
5278: PPUSH
5279: CALL_OW 13
5283: AND
5284: IFFALSE 5304
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
5286: LD_EXP 52
5290: PUSH
5291: LD_EXP 52
5295: ARRAY
5296: PPUSH
5297: LD_INT 8
5299: PPUSH
5300: CALL_OW 336
// end ;
5304: GO 5229
5306: POP
5307: POP
// end ;
5308: GO 5186
5310: POP
5311: POP
// if HexInfo ( 340 , 205 ) then
5312: LD_INT 340
5314: PPUSH
5315: LD_INT 205
5317: PPUSH
5318: CALL_OW 428
5322: IFFALSE 5339
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
5324: LD_INT 340
5326: PPUSH
5327: LD_INT 205
5329: PPUSH
5330: CALL_OW 428
5334: PPUSH
5335: CALL_OW 64
// p := 0 ;
5339: LD_ADDR_VAR 0 4
5343: PUSH
5344: LD_INT 0
5346: ST_TO_ADDR
// for i in omarSquad do
5347: LD_ADDR_VAR 0 2
5351: PUSH
5352: LD_EXP 52
5356: PUSH
5357: FOR_IN
5358: IFFALSE 5559
// begin uc_direction := 4 ;
5360: LD_ADDR_OWVAR 24
5364: PUSH
5365: LD_INT 4
5367: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
5368: LD_VAR 0 2
5372: PPUSH
5373: CALL_OW 257
5377: PUSH
5378: LD_INT 3
5380: EQUAL
5381: PUSH
5382: LD_VAR 0 4
5386: PUSH
5387: LD_INT 2
5389: LESS
5390: AND
5391: IFFALSE 5520
// begin p := p + 1 ;
5393: LD_ADDR_VAR 0 4
5397: PUSH
5398: LD_VAR 0 4
5402: PUSH
5403: LD_INT 1
5405: PLUS
5406: ST_TO_ADDR
// uc_side := 5 ;
5407: LD_ADDR_OWVAR 20
5411: PUSH
5412: LD_INT 5
5414: ST_TO_ADDR
// if rand ( 0 , 1 ) then
5415: LD_INT 0
5417: PPUSH
5418: LD_INT 1
5420: PPUSH
5421: CALL_OW 12
5425: IFFALSE 5456
// begin uc_nation := 2 ;
5427: LD_ADDR_OWVAR 21
5431: PUSH
5432: LD_INT 2
5434: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
5435: LD_INT 13
5437: PPUSH
5438: LD_INT 1
5440: PPUSH
5441: LD_INT 1
5443: PPUSH
5444: LD_INT 27
5446: PPUSH
5447: LD_INT 88
5449: PPUSH
5450: CALL 34277 0 5
// end else
5454: GO 5483
// begin uc_nation := 3 ;
5456: LD_ADDR_OWVAR 21
5460: PUSH
5461: LD_INT 3
5463: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
5464: LD_INT 22
5466: PPUSH
5467: LD_INT 1
5469: PPUSH
5470: LD_INT 1
5472: PPUSH
5473: LD_INT 45
5475: PPUSH
5476: LD_INT 88
5478: PPUSH
5479: CALL 34277 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
5483: CALL_OW 45
5487: PPUSH
5488: LD_INT 13
5490: PPUSH
5491: LD_INT 0
5493: PPUSH
5494: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
5498: LD_VAR 0 2
5502: PPUSH
5503: LD_INT 340
5505: PPUSH
5506: LD_INT 205
5508: PPUSH
5509: CALL_OW 428
5513: PPUSH
5514: CALL_OW 52
// end else
5518: GO 5535
// PlaceUnitArea ( i , southSpawn , false ) ;
5520: LD_VAR 0 2
5524: PPUSH
5525: LD_INT 13
5527: PPUSH
5528: LD_INT 0
5530: PPUSH
5531: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
5535: LD_VAR 0 2
5539: PPUSH
5540: LD_INT 333
5542: PPUSH
5543: LD_INT 210
5545: PPUSH
5546: CALL_OW 111
// wait ( 0 0$2 ) ;
5550: LD_INT 70
5552: PPUSH
5553: CALL_OW 67
// end ;
5557: GO 5357
5559: POP
5560: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
5561: LD_EXP 44
5565: PPUSH
5566: LD_INT 340
5568: PPUSH
5569: LD_INT 205
5571: PPUSH
5572: LD_INT 0
5574: PPUSH
5575: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
5579: LD_EXP 44
5583: PPUSH
5584: LD_INT 333
5586: PPUSH
5587: LD_INT 206
5589: PPUSH
5590: CALL_OW 111
// wait ( 0 0$2 ) ;
5594: LD_INT 70
5596: PPUSH
5597: CALL_OW 67
// ComHold ( omarSquad ) ;
5601: LD_EXP 52
5605: PPUSH
5606: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
5610: LD_EXP 44
5614: PUSH
5615: LD_EXP 52
5619: PPUSH
5620: LD_INT 2
5622: PUSH
5623: LD_INT 25
5625: PUSH
5626: LD_INT 1
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: LD_INT 25
5635: PUSH
5636: LD_INT 8
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: EMPTY
5644: LIST
5645: LIST
5646: LIST
5647: PPUSH
5648: CALL_OW 72
5652: UNION
5653: PUSH
5654: LD_INT 22
5656: PUSH
5657: LD_INT 5
5659: PUSH
5660: EMPTY
5661: LIST
5662: LIST
5663: PUSH
5664: LD_INT 21
5666: PUSH
5667: LD_INT 2
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: PPUSH
5678: CALL_OW 69
5682: UNION
5683: PPUSH
5684: LD_INT 315
5686: PPUSH
5687: LD_INT 214
5689: PPUSH
5690: CALL_OW 114
// wait ( 0 0$22 ) ;
5694: LD_INT 770
5696: PPUSH
5697: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
5701: LD_EXP 52
5705: PUSH
5706: LD_EXP 44
5710: UNION
5711: PPUSH
5712: LD_INT 329
5714: PPUSH
5715: LD_INT 231
5717: PPUSH
5718: CALL_OW 114
// end ;
5722: LD_VAR 0 1
5726: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
5727: LD_EXP 10
5731: IFFALSE 6814
5733: GO 5735
5735: DISABLE
5736: LD_INT 0
5738: PPUSH
5739: PPUSH
5740: PPUSH
5741: PPUSH
5742: PPUSH
5743: PPUSH
5744: PPUSH
5745: PPUSH
5746: PPUSH
5747: PPUSH
5748: PPUSH
// begin enable ;
5749: ENABLE
// if not omarSquad then
5750: LD_EXP 52
5754: NOT
5755: IFFALSE 5759
// exit ;
5757: GO 6814
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
5759: LD_ADDR_VAR 0 10
5763: PUSH
5764: LD_INT 14
5766: PPUSH
5767: LD_INT 81
5769: PUSH
5770: LD_INT 5
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PPUSH
5777: CALL_OW 70
5781: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
5782: LD_ADDR_VAR 0 6
5786: PUSH
5787: LD_EXP 52
5791: PPUSH
5792: LD_INT 2
5794: PUSH
5795: LD_INT 25
5797: PUSH
5798: LD_INT 1
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: PUSH
5805: LD_INT 25
5807: PUSH
5808: LD_INT 8
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: LIST
5819: PPUSH
5820: CALL_OW 72
5824: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
5825: LD_ADDR_VAR 0 7
5829: PUSH
5830: LD_EXP 52
5834: PPUSH
5835: LD_INT 25
5837: PUSH
5838: LD_INT 2
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: PPUSH
5845: CALL_OW 72
5849: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
5850: LD_ADDR_VAR 0 9
5854: PUSH
5855: LD_EXP 52
5859: PPUSH
5860: LD_INT 25
5862: PUSH
5863: LD_INT 3
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PPUSH
5870: CALL_OW 72
5874: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
5875: LD_ADDR_VAR 0 8
5879: PUSH
5880: LD_EXP 52
5884: PPUSH
5885: LD_INT 25
5887: PUSH
5888: LD_INT 4
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: PPUSH
5895: CALL_OW 72
5899: ST_TO_ADDR
// if sol then
5900: LD_VAR 0 6
5904: IFFALSE 6268
// for i in sol do
5906: LD_ADDR_VAR 0 1
5910: PUSH
5911: LD_VAR 0 6
5915: PUSH
5916: FOR_IN
5917: IFFALSE 6266
// if not HasTask ( i ) then
5919: LD_VAR 0 1
5923: PPUSH
5924: CALL_OW 314
5928: NOT
5929: IFFALSE 6264
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
5931: LD_VAR 0 1
5935: PPUSH
5936: CALL_OW 310
5940: NOT
5941: PUSH
5942: LD_VAR 0 1
5946: PPUSH
5947: CALL_OW 256
5951: PUSH
5952: LD_INT 500
5954: LESS
5955: AND
5956: PUSH
5957: LD_VAR 0 1
5961: PPUSH
5962: LD_INT 333
5964: PPUSH
5965: LD_INT 234
5967: PPUSH
5968: CALL_OW 297
5972: PUSH
5973: LD_INT 6
5975: GREATER
5976: AND
5977: IFFALSE 5996
// begin ComMoveXY ( i , 333 , 234 ) ;
5979: LD_VAR 0 1
5983: PPUSH
5984: LD_INT 333
5986: PPUSH
5987: LD_INT 234
5989: PPUSH
5990: CALL_OW 111
// continue ;
5994: GO 5916
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
5996: LD_ADDR_VAR 0 5
6000: PUSH
6001: LD_INT 22
6003: PUSH
6004: LD_INT 5
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: LD_INT 58
6013: PUSH
6014: EMPTY
6015: LIST
6016: PUSH
6017: LD_INT 50
6019: PUSH
6020: EMPTY
6021: LIST
6022: PUSH
6023: LD_INT 2
6025: PUSH
6026: LD_INT 30
6028: PUSH
6029: LD_INT 32
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: PUSH
6036: LD_INT 30
6038: PUSH
6039: LD_INT 31
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: PUSH
6046: EMPTY
6047: LIST
6048: LIST
6049: LIST
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: PPUSH
6057: CALL_OW 69
6061: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
6062: LD_VAR 0 5
6066: PUSH
6067: LD_VAR 0 1
6071: PPUSH
6072: CALL_OW 310
6076: PPUSH
6077: CALL_OW 266
6081: PUSH
6082: LD_INT 31
6084: NONEQUAL
6085: AND
6086: IFFALSE 6168
// begin for j in tmp do
6088: LD_ADDR_VAR 0 2
6092: PUSH
6093: LD_VAR 0 5
6097: PUSH
6098: FOR_IN
6099: IFFALSE 6164
// if GetTag ( j ) <> 1 then
6101: LD_VAR 0 2
6105: PPUSH
6106: CALL_OW 110
6110: PUSH
6111: LD_INT 1
6113: NONEQUAL
6114: IFFALSE 6162
// begin SetTag ( j , 1 ) ;
6116: LD_VAR 0 2
6120: PPUSH
6121: LD_INT 1
6123: PPUSH
6124: CALL_OW 109
// if IsInUnit ( i ) then
6128: LD_VAR 0 1
6132: PPUSH
6133: CALL_OW 310
6137: IFFALSE 6148
// ComExit ( i ) ;
6139: LD_VAR 0 1
6143: PPUSH
6144: CALL 67537 0 1
// AddComEnterUnit ( i , j ) ;
6148: LD_VAR 0 1
6152: PPUSH
6153: LD_VAR 0 2
6157: PPUSH
6158: CALL_OW 180
// end ;
6162: GO 6098
6164: POP
6165: POP
// end else
6166: GO 6264
// if not IsInUnit ( i ) then
6168: LD_VAR 0 1
6172: PPUSH
6173: CALL_OW 310
6177: NOT
6178: IFFALSE 6264
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
6180: LD_ADDR_VAR 0 5
6184: PUSH
6185: LD_INT 22
6187: PUSH
6188: LD_INT 5
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PUSH
6195: LD_INT 50
6197: PUSH
6198: EMPTY
6199: LIST
6200: PUSH
6201: LD_INT 30
6203: PUSH
6204: LD_INT 4
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: LIST
6215: PPUSH
6216: CALL_OW 69
6220: ST_TO_ADDR
// if tmp then
6221: LD_VAR 0 5
6225: IFFALSE 6264
// if UnitsInside ( tmp [ 1 ] ) < 6 then
6227: LD_VAR 0 5
6231: PUSH
6232: LD_INT 1
6234: ARRAY
6235: PPUSH
6236: CALL_OW 313
6240: PUSH
6241: LD_INT 6
6243: LESS
6244: IFFALSE 6264
// ComEnterUnit ( i , tmp [ 1 ] ) ;
6246: LD_VAR 0 1
6250: PPUSH
6251: LD_VAR 0 5
6255: PUSH
6256: LD_INT 1
6258: ARRAY
6259: PPUSH
6260: CALL_OW 120
// end ; end ;
6264: GO 5916
6266: POP
6267: POP
// if sci then
6268: LD_VAR 0 8
6272: IFFALSE 6327
// for i in sci do
6274: LD_ADDR_VAR 0 1
6278: PUSH
6279: LD_VAR 0 8
6283: PUSH
6284: FOR_IN
6285: IFFALSE 6325
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
6287: LD_VAR 0 1
6291: PPUSH
6292: LD_INT 333
6294: PPUSH
6295: LD_INT 234
6297: PPUSH
6298: CALL_OW 297
6302: PUSH
6303: LD_INT 9
6305: GREATER
6306: IFFALSE 6323
// ComMoveXY ( i , 333 , 234 ) ;
6308: LD_VAR 0 1
6312: PPUSH
6313: LD_INT 333
6315: PPUSH
6316: LD_INT 234
6318: PPUSH
6319: CALL_OW 111
// end ;
6323: GO 6284
6325: POP
6326: POP
// if mech then
6327: LD_VAR 0 9
6331: IFFALSE 6536
// for i in mech do
6333: LD_ADDR_VAR 0 1
6337: PUSH
6338: LD_VAR 0 9
6342: PUSH
6343: FOR_IN
6344: IFFALSE 6534
// begin hasVehicle := IsInUnit ( i ) ;
6346: LD_ADDR_VAR 0 11
6350: PUSH
6351: LD_VAR 0 1
6355: PPUSH
6356: CALL_OW 310
6360: ST_TO_ADDR
// if enemyInBase then
6361: LD_VAR 0 10
6365: IFFALSE 6452
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
6367: LD_VAR 0 11
6371: PUSH
6372: LD_VAR 0 11
6376: PPUSH
6377: CALL_OW 256
6381: PUSH
6382: LD_INT 500
6384: GREATER
6385: AND
6386: IFFALSE 6414
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
6388: LD_VAR 0 11
6392: PPUSH
6393: LD_VAR 0 10
6397: PPUSH
6398: LD_VAR 0 11
6402: PPUSH
6403: CALL_OW 74
6407: PPUSH
6408: CALL_OW 115
6412: GO 6450
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
6414: LD_VAR 0 11
6418: PPUSH
6419: LD_INT 333
6421: PPUSH
6422: LD_INT 234
6424: PPUSH
6425: CALL_OW 297
6429: PUSH
6430: LD_INT 6
6432: GREATER
6433: IFFALSE 6450
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
6435: LD_VAR 0 11
6439: PPUSH
6440: LD_INT 333
6442: PPUSH
6443: LD_INT 234
6445: PPUSH
6446: CALL_OW 111
// end else
6450: GO 6532
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
6452: LD_VAR 0 1
6456: PPUSH
6457: LD_INT 333
6459: PPUSH
6460: LD_INT 234
6462: PPUSH
6463: CALL_OW 297
6467: PUSH
6468: LD_INT 6
6470: GREATER
6471: IFFALSE 6490
// ComMoveXY ( i , 333 , 234 ) else
6473: LD_VAR 0 1
6477: PPUSH
6478: LD_INT 333
6480: PPUSH
6481: LD_INT 234
6483: PPUSH
6484: CALL_OW 111
6488: GO 6532
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
6490: LD_VAR 0 11
6494: PUSH
6495: LD_VAR 0 11
6499: PPUSH
6500: CALL_OW 256
6504: PUSH
6505: LD_INT 1000
6507: LESS
6508: AND
6509: IFFALSE 6532
// begin SetFuel ( hasVehicle , 100 ) ;
6511: LD_VAR 0 11
6515: PPUSH
6516: LD_INT 100
6518: PPUSH
6519: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
6523: LD_VAR 0 1
6527: PPUSH
6528: CALL 68839 0 1
// end ; end ; end ;
6532: GO 6343
6534: POP
6535: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6536: LD_ADDR_VAR 0 5
6540: PUSH
6541: LD_INT 14
6543: PPUSH
6544: LD_INT 3
6546: PUSH
6547: LD_INT 24
6549: PUSH
6550: LD_INT 1000
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: LD_INT 21
6563: PUSH
6564: LD_INT 3
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PPUSH
6575: CALL_OW 70
6579: ST_TO_ADDR
// if tmp and eng then
6580: LD_VAR 0 5
6584: PUSH
6585: LD_VAR 0 7
6589: AND
6590: IFFALSE 6696
// begin for i in eng do
6592: LD_ADDR_VAR 0 1
6596: PUSH
6597: LD_VAR 0 7
6601: PUSH
6602: FOR_IN
6603: IFFALSE 6694
// if IsInUnit ( i ) then
6605: LD_VAR 0 1
6609: PPUSH
6610: CALL_OW 310
6614: IFFALSE 6627
// ComExitBuilding ( i ) else
6616: LD_VAR 0 1
6620: PPUSH
6621: CALL_OW 122
6625: GO 6692
// if GetLives ( i ) = 1000 then
6627: LD_VAR 0 1
6631: PPUSH
6632: CALL_OW 256
6636: PUSH
6637: LD_INT 1000
6639: EQUAL
6640: IFFALSE 6662
// ComRepairBuilding ( i , tmp [ 1 ] ) else
6642: LD_VAR 0 1
6646: PPUSH
6647: LD_VAR 0 5
6651: PUSH
6652: LD_INT 1
6654: ARRAY
6655: PPUSH
6656: CALL_OW 130
6660: GO 6692
// if GetLives ( i ) < 700 then
6662: LD_VAR 0 1
6666: PPUSH
6667: CALL_OW 256
6671: PUSH
6672: LD_INT 700
6674: LESS
6675: IFFALSE 6692
// ComMoveXY ( i , 333 , 234 ) ;
6677: LD_VAR 0 1
6681: PPUSH
6682: LD_INT 333
6684: PPUSH
6685: LD_INT 234
6687: PPUSH
6688: CALL_OW 111
6692: GO 6602
6694: POP
6695: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
6696: LD_VAR 0 5
6700: NOT
6701: PUSH
6702: LD_VAR 0 7
6706: PPUSH
6707: LD_INT 3
6709: PUSH
6710: LD_INT 54
6712: PUSH
6713: EMPTY
6714: LIST
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PPUSH
6720: CALL_OW 72
6724: AND
6725: IFFALSE 6814
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
6727: LD_ADDR_VAR 0 1
6731: PUSH
6732: LD_VAR 0 7
6736: PPUSH
6737: LD_INT 3
6739: PUSH
6740: LD_INT 54
6742: PUSH
6743: EMPTY
6744: LIST
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: PPUSH
6750: CALL_OW 72
6754: PUSH
6755: FOR_IN
6756: IFFALSE 6812
// if GetLives ( i ) < 1000 then
6758: LD_VAR 0 1
6762: PPUSH
6763: CALL_OW 256
6767: PUSH
6768: LD_INT 1000
6770: LESS
6771: IFFALSE 6790
// ComMoveXY ( i , 333 , 234 ) else
6773: LD_VAR 0 1
6777: PPUSH
6778: LD_INT 333
6780: PPUSH
6781: LD_INT 234
6783: PPUSH
6784: CALL_OW 111
6788: GO 6810
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
6790: LD_VAR 0 1
6794: PPUSH
6795: LD_INT 341
6797: PPUSH
6798: LD_INT 232
6800: PPUSH
6801: CALL_OW 428
6805: PPUSH
6806: CALL_OW 120
6810: GO 6755
6812: POP
6813: POP
// end ;
6814: PPOPN 11
6816: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
6817: LD_EXP 44
6821: PPUSH
6822: CALL_OW 256
6826: PUSH
6827: LD_INT 1000
6829: LESS
6830: IFFALSE 6848
6832: GO 6834
6834: DISABLE
// begin enable ;
6835: ENABLE
// SetLives ( Omar , 1000 ) ;
6836: LD_EXP 44
6840: PPUSH
6841: LD_INT 1000
6843: PPUSH
6844: CALL_OW 234
// end ;
6848: END
// every 0 0$1 trigger GetLives ( Rolf ) < 1000 and rolfAttack do
6849: LD_EXP 47
6853: PPUSH
6854: CALL_OW 256
6858: PUSH
6859: LD_INT 1000
6861: LESS
6862: PUSH
6863: LD_EXP 32
6867: AND
6868: IFFALSE 6886
6870: GO 6872
6872: DISABLE
// begin enable ;
6873: ENABLE
// SetLives ( Rolf , 1000 ) ;
6874: LD_EXP 47
6878: PPUSH
6879: LD_INT 1000
6881: PPUSH
6882: CALL_OW 234
// end ;
6886: END
// every 0 0$1 trigger rolfAttack do var i , tmp , mech , path , tag , rolfCoords ;
6887: LD_EXP 32
6891: IFFALSE 7571
6893: GO 6895
6895: DISABLE
6896: LD_INT 0
6898: PPUSH
6899: PPUSH
6900: PPUSH
6901: PPUSH
6902: PPUSH
6903: PPUSH
// begin path := [ [ 215 , 162 ] , [ 195 , 163 ] , [ 174 , 162 ] , [ 145 , 163 ] , [ 127 , 163 ] ] ;
6904: LD_ADDR_VAR 0 4
6908: PUSH
6909: LD_INT 215
6911: PUSH
6912: LD_INT 162
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PUSH
6919: LD_INT 195
6921: PUSH
6922: LD_INT 163
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PUSH
6929: LD_INT 174
6931: PUSH
6932: LD_INT 162
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 145
6941: PUSH
6942: LD_INT 163
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 127
6951: PUSH
6952: LD_INT 163
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: ST_TO_ADDR
// rolfCoords := [ 221 , 161 ] ;
6966: LD_ADDR_VAR 0 6
6970: PUSH
6971: LD_INT 221
6973: PUSH
6974: LD_INT 161
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: ST_TO_ADDR
// tmp := Rolf union rolfSquad ;
6981: LD_ADDR_VAR 0 2
6985: PUSH
6986: LD_EXP 47
6990: PUSH
6991: LD_EXP 51
6995: UNION
6996: ST_TO_ADDR
// if not tmp then
6997: LD_VAR 0 2
7001: NOT
7002: IFFALSE 7006
// exit ;
7004: GO 7571
// ComMoveXY ( tmp , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7006: LD_VAR 0 2
7010: PPUSH
7011: LD_VAR 0 6
7015: PUSH
7016: LD_INT 1
7018: ARRAY
7019: PPUSH
7020: LD_VAR 0 6
7024: PUSH
7025: LD_INT 2
7027: ARRAY
7028: PPUSH
7029: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7033: LD_INT 35
7035: PPUSH
7036: CALL_OW 67
// tmp := UnitFilter ( rolfSquad , [ [ f_not , [ f_driving ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) ;
7040: LD_ADDR_VAR 0 2
7044: PUSH
7045: LD_EXP 51
7049: PPUSH
7050: LD_INT 3
7052: PUSH
7053: LD_INT 55
7055: PUSH
7056: EMPTY
7057: LIST
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PUSH
7063: LD_INT 2
7065: PUSH
7066: LD_INT 25
7068: PUSH
7069: LD_INT 1
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: LD_INT 25
7078: PUSH
7079: LD_INT 8
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PPUSH
7095: CALL_OW 72
7099: ST_TO_ADDR
// if tmp then
7100: LD_VAR 0 2
7104: IFFALSE 7257
// begin for i in tmp do
7106: LD_ADDR_VAR 0 1
7110: PUSH
7111: LD_VAR 0 2
7115: PUSH
7116: FOR_IN
7117: IFFALSE 7255
// begin tag := GetTag ( i ) ;
7119: LD_ADDR_VAR 0 5
7123: PUSH
7124: LD_VAR 0 1
7128: PPUSH
7129: CALL_OW 110
7133: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
7134: LD_VAR 0 1
7138: PPUSH
7139: CALL_OW 256
7143: PUSH
7144: LD_INT 800
7146: LESS
7147: PUSH
7148: LD_VAR 0 5
7152: PUSH
7153: LD_INT 101
7155: LESS
7156: AND
7157: IFFALSE 7200
// begin SetTag ( i , 101 ) ;
7159: LD_VAR 0 1
7163: PPUSH
7164: LD_INT 101
7166: PPUSH
7167: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7171: LD_VAR 0 1
7175: PPUSH
7176: LD_VAR 0 6
7180: PUSH
7181: LD_INT 1
7183: ARRAY
7184: PPUSH
7185: LD_VAR 0 6
7189: PUSH
7190: LD_INT 2
7192: ARRAY
7193: PPUSH
7194: CALL_OW 111
// end else
7198: GO 7253
// if tag = 101 then
7200: LD_VAR 0 5
7204: PUSH
7205: LD_INT 101
7207: EQUAL
7208: IFFALSE 7239
// begin if GetLives ( i ) = 1000 then
7210: LD_VAR 0 1
7214: PPUSH
7215: CALL_OW 256
7219: PUSH
7220: LD_INT 1000
7222: EQUAL
7223: IFFALSE 7237
// SetTag ( i , 0 ) ;
7225: LD_VAR 0 1
7229: PPUSH
7230: LD_INT 0
7232: PPUSH
7233: CALL_OW 109
// end else
7237: GO 7253
// AgressiveMove ( i , path ) ;
7239: LD_VAR 0 1
7243: PPUSH
7244: LD_VAR 0 4
7248: PPUSH
7249: CALL 69743 0 2
// end ;
7253: GO 7116
7255: POP
7256: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
7257: LD_ADDR_VAR 0 2
7261: PUSH
7262: LD_INT 22
7264: PUSH
7265: LD_INT 8
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: LD_INT 21
7274: PUSH
7275: LD_INT 2
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: LD_INT 3
7284: PUSH
7285: LD_INT 34
7287: PUSH
7288: LD_INT 32
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: LIST
7303: PPUSH
7304: CALL_OW 69
7308: ST_TO_ADDR
// if not tmp then
7309: LD_VAR 0 2
7313: NOT
7314: IFFALSE 7318
// continue ;
7316: GO 7033
// for i in tmp do
7318: LD_ADDR_VAR 0 1
7322: PUSH
7323: LD_VAR 0 2
7327: PUSH
7328: FOR_IN
7329: IFFALSE 7562
// begin mech := IsDrivenBy ( i ) ;
7331: LD_ADDR_VAR 0 3
7335: PUSH
7336: LD_VAR 0 1
7340: PPUSH
7341: CALL_OW 311
7345: ST_TO_ADDR
// if not mech then
7346: LD_VAR 0 3
7350: NOT
7351: IFFALSE 7355
// continue ;
7353: GO 7328
// tag := GetTag ( i ) ;
7355: LD_ADDR_VAR 0 5
7359: PUSH
7360: LD_VAR 0 1
7364: PPUSH
7365: CALL_OW 110
7369: ST_TO_ADDR
// if GetLives ( i ) >= 600 and tag < 101 then
7370: LD_VAR 0 1
7374: PPUSH
7375: CALL_OW 256
7379: PUSH
7380: LD_INT 600
7382: GREATEREQUAL
7383: PUSH
7384: LD_VAR 0 5
7388: PUSH
7389: LD_INT 101
7391: LESS
7392: AND
7393: IFFALSE 7409
// AgressiveMove ( i , path ) ;
7395: LD_VAR 0 1
7399: PPUSH
7400: LD_VAR 0 4
7404: PPUSH
7405: CALL 69743 0 2
// if GetLives ( i ) < 600 and tag < 101 then
7409: LD_VAR 0 1
7413: PPUSH
7414: CALL_OW 256
7418: PUSH
7419: LD_INT 600
7421: LESS
7422: PUSH
7423: LD_VAR 0 5
7427: PUSH
7428: LD_INT 101
7430: LESS
7431: AND
7432: IFFALSE 7473
// begin SetTag ( i , 101 ) ;
7434: LD_VAR 0 1
7438: PPUSH
7439: LD_INT 101
7441: PPUSH
7442: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7446: LD_VAR 0 1
7450: PPUSH
7451: LD_VAR 0 6
7455: PUSH
7456: LD_INT 1
7458: ARRAY
7459: PPUSH
7460: LD_VAR 0 6
7464: PUSH
7465: LD_INT 2
7467: ARRAY
7468: PPUSH
7469: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) < 9 and mech then
7473: LD_VAR 0 5
7477: PUSH
7478: LD_INT 101
7480: EQUAL
7481: PUSH
7482: LD_VAR 0 1
7486: PPUSH
7487: LD_VAR 0 6
7491: PUSH
7492: LD_INT 1
7494: ARRAY
7495: PPUSH
7496: LD_VAR 0 6
7500: PUSH
7501: LD_INT 2
7503: ARRAY
7504: PPUSH
7505: CALL_OW 297
7509: PUSH
7510: LD_INT 9
7512: LESS
7513: AND
7514: PUSH
7515: LD_VAR 0 3
7519: AND
7520: IFFALSE 7560
// begin if GetLives ( i ) < 1000 then
7522: LD_VAR 0 1
7526: PPUSH
7527: CALL_OW 256
7531: PUSH
7532: LD_INT 1000
7534: LESS
7535: IFFALSE 7548
// AddComRepairVehicleAndReturn ( mech ) else
7537: LD_VAR 0 3
7541: PPUSH
7542: CALL 68959 0 1
7546: GO 7560
// SetTag ( i , 0 ) ;
7548: LD_VAR 0 1
7552: PPUSH
7553: LD_INT 0
7555: PPUSH
7556: CALL_OW 109
// end ; end ;
7560: GO 7328
7562: POP
7563: POP
// until not tmp ;
7564: LD_VAR 0 2
7568: NOT
7569: IFFALSE 7033
// end ;
7571: PPOPN 6
7573: END
// every 0 0$1 trigger omarAttack do var i , cargo , tmp , tag , mech , x , path , omarAttackCoords ;
7574: LD_EXP 23
7578: IFFALSE 8883
7580: GO 7582
7582: DISABLE
7583: LD_INT 0
7585: PPUSH
7586: PPUSH
7587: PPUSH
7588: PPUSH
7589: PPUSH
7590: PPUSH
7591: PPUSH
7592: PPUSH
// begin path := [ [ 209 , 221 ] , [ 190 , 220 ] , [ 177 , 220 ] , [ 168 , 223 ] , [ 150 , 206 ] ] ;
7593: LD_ADDR_VAR 0 7
7597: PUSH
7598: LD_INT 209
7600: PUSH
7601: LD_INT 221
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: LD_INT 190
7610: PUSH
7611: LD_INT 220
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PUSH
7618: LD_INT 177
7620: PUSH
7621: LD_INT 220
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: PUSH
7628: LD_INT 168
7630: PUSH
7631: LD_INT 223
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PUSH
7638: LD_INT 150
7640: PUSH
7641: LD_INT 206
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: ST_TO_ADDR
// omarAttackCoords := [ 219 , 225 , 0 ] ;
7655: LD_ADDR_VAR 0 8
7659: PUSH
7660: LD_INT 219
7662: PUSH
7663: LD_INT 225
7665: PUSH
7666: LD_INT 0
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: LIST
7673: ST_TO_ADDR
// for i := 1 to 2 do
7674: LD_ADDR_VAR 0 1
7678: PUSH
7679: DOUBLE
7680: LD_INT 1
7682: DEC
7683: ST_TO_ADDR
7684: LD_INT 2
7686: PUSH
7687: FOR_TO
7688: IFFALSE 7837
// begin uc_side := 5 ;
7690: LD_ADDR_OWVAR 20
7694: PUSH
7695: LD_INT 5
7697: ST_TO_ADDR
// uc_nation := 2 ;
7698: LD_ADDR_OWVAR 21
7702: PUSH
7703: LD_INT 2
7705: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
7706: LD_INT 14
7708: PPUSH
7709: LD_INT 1
7711: PPUSH
7712: LD_INT 1
7714: PPUSH
7715: LD_INT 32
7717: PPUSH
7718: LD_INT 80
7720: PPUSH
7721: CALL 34277 0 5
// cargo := Join ( cargo , CreateVehicle ) ;
7725: LD_ADDR_VAR 0 2
7729: PUSH
7730: LD_VAR 0 2
7734: PPUSH
7735: CALL_OW 45
7739: PPUSH
7740: CALL 67139 0 2
7744: ST_TO_ADDR
// SetDir ( cargo [ i ] , 4 ) ;
7745: LD_VAR 0 2
7749: PUSH
7750: LD_VAR 0 1
7754: ARRAY
7755: PPUSH
7756: LD_INT 4
7758: PPUSH
7759: CALL_OW 233
// PlaceUnitArea ( cargo [ i ] , omarVehiclesArea , false ) ;
7763: LD_VAR 0 2
7767: PUSH
7768: LD_VAR 0 1
7772: ARRAY
7773: PPUSH
7774: LD_INT 16
7776: PPUSH
7777: LD_INT 0
7779: PPUSH
7780: CALL_OW 49
// PrepareMechanic ( false , 4 ) ;
7784: LD_INT 0
7786: PPUSH
7787: LD_INT 4
7789: PPUSH
7790: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo [ i ] ) ;
7794: CALL_OW 44
7798: PPUSH
7799: LD_VAR 0 2
7803: PUSH
7804: LD_VAR 0 1
7808: ARRAY
7809: PPUSH
7810: CALL_OW 52
// ComMoveXY ( cargo [ i ] , 337 , 232 ) ;
7814: LD_VAR 0 2
7818: PUSH
7819: LD_VAR 0 1
7823: ARRAY
7824: PPUSH
7825: LD_INT 337
7827: PPUSH
7828: LD_INT 232
7830: PPUSH
7831: CALL_OW 111
// end ;
7835: GO 7687
7837: POP
7838: POP
// wait ( 0 0$25 ) ;
7839: LD_INT 875
7841: PPUSH
7842: CALL_OW 67
// for i := 1 to 2 do
7846: LD_ADDR_VAR 0 1
7850: PUSH
7851: DOUBLE
7852: LD_INT 1
7854: DEC
7855: ST_TO_ADDR
7856: LD_INT 2
7858: PUSH
7859: FOR_TO
7860: IFFALSE 7885
// SetCargo ( cargo [ i ] , mat_oil , 100 ) ;
7862: LD_VAR 0 2
7866: PUSH
7867: LD_VAR 0 1
7871: ARRAY
7872: PPUSH
7873: LD_INT 2
7875: PPUSH
7876: LD_INT 100
7878: PPUSH
7879: CALL_OW 290
7883: GO 7859
7885: POP
7886: POP
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
7887: LD_EXP 52
7891: PPUSH
7892: LD_INT 2
7894: PUSH
7895: LD_INT 25
7897: PUSH
7898: LD_INT 1
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 25
7907: PUSH
7908: LD_INT 8
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: LIST
7919: PPUSH
7920: CALL_OW 72
7924: PPUSH
7925: CALL_OW 122
// wait ( 0 0$3 ) ;
7929: LD_INT 105
7931: PPUSH
7932: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
7936: LD_EXP 52
7940: PUSH
7941: LD_EXP 44
7945: UNION
7946: PPUSH
7947: LD_VAR 0 8
7951: PUSH
7952: LD_INT 1
7954: ARRAY
7955: PPUSH
7956: LD_VAR 0 8
7960: PUSH
7961: LD_INT 2
7963: ARRAY
7964: PPUSH
7965: CALL_OW 174
// wait ( 0 0$3 ) ;
7969: LD_INT 105
7971: PPUSH
7972: CALL_OW 67
// AddComMoveXY ( cargo , 218 , 217 ) ;
7976: LD_VAR 0 2
7980: PPUSH
7981: LD_INT 218
7983: PPUSH
7984: LD_INT 217
7986: PPUSH
7987: CALL_OW 171
// wait ( 1 1$00 ) ;
7991: LD_INT 2100
7993: PPUSH
7994: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7998: LD_INT 35
8000: PPUSH
8001: CALL_OW 67
// if omarAttackCoords [ 3 ] = 0 then
8005: LD_VAR 0 8
8009: PUSH
8010: LD_INT 3
8012: ARRAY
8013: PUSH
8014: LD_INT 0
8016: EQUAL
8017: IFFALSE 8122
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 168 , 229 , 12 ] ] ) = 0 then
8019: LD_INT 22
8021: PUSH
8022: LD_INT 3
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: PUSH
8029: LD_INT 92
8031: PUSH
8032: LD_INT 168
8034: PUSH
8035: LD_INT 229
8037: PUSH
8038: LD_INT 12
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: PPUSH
8051: CALL_OW 69
8055: PUSH
8056: LD_INT 0
8058: EQUAL
8059: IFFALSE 8122
// begin omarAttackCoords := [ 167 , 222 , 1 ] ;
8061: LD_ADDR_VAR 0 8
8065: PUSH
8066: LD_INT 167
8068: PUSH
8069: LD_INT 222
8071: PUSH
8072: LD_INT 1
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: LIST
8079: ST_TO_ADDR
// AddComMoveXY ( Omar ^ cargo ^ UnitFilter ( omarSquad , [ f_class , 4 ] ) , 167 , 222 ) ;
8080: LD_EXP 44
8084: PUSH
8085: LD_VAR 0 2
8089: ADD
8090: PUSH
8091: LD_EXP 52
8095: PPUSH
8096: LD_INT 25
8098: PUSH
8099: LD_INT 4
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: PPUSH
8106: CALL_OW 72
8110: ADD
8111: PPUSH
8112: LD_INT 167
8114: PPUSH
8115: LD_INT 222
8117: PPUSH
8118: CALL_OW 171
// end ; tmp := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) ;
8122: LD_ADDR_VAR 0 3
8126: PUSH
8127: LD_EXP 52
8131: PPUSH
8132: LD_INT 3
8134: PUSH
8135: LD_INT 55
8137: PUSH
8138: EMPTY
8139: LIST
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: PUSH
8145: LD_INT 2
8147: PUSH
8148: LD_INT 25
8150: PUSH
8151: LD_INT 1
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 25
8160: PUSH
8161: LD_INT 8
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: PPUSH
8177: CALL_OW 72
8181: ST_TO_ADDR
// if tmp then
8182: LD_VAR 0 3
8186: IFFALSE 8399
// begin for i in tmp do
8188: LD_ADDR_VAR 0 1
8192: PUSH
8193: LD_VAR 0 3
8197: PUSH
8198: FOR_IN
8199: IFFALSE 8397
// begin tag := GetTag ( i ) ;
8201: LD_ADDR_VAR 0 4
8205: PUSH
8206: LD_VAR 0 1
8210: PPUSH
8211: CALL_OW 110
8215: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
8216: LD_VAR 0 1
8220: PPUSH
8221: CALL_OW 256
8225: PUSH
8226: LD_INT 800
8228: LESS
8229: PUSH
8230: LD_VAR 0 4
8234: PUSH
8235: LD_INT 101
8237: LESS
8238: AND
8239: IFFALSE 8282
// begin SetTag ( i , 101 ) ;
8241: LD_VAR 0 1
8245: PPUSH
8246: LD_INT 101
8248: PPUSH
8249: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8253: LD_VAR 0 1
8257: PPUSH
8258: LD_VAR 0 8
8262: PUSH
8263: LD_INT 1
8265: ARRAY
8266: PPUSH
8267: LD_VAR 0 8
8271: PUSH
8272: LD_INT 2
8274: ARRAY
8275: PPUSH
8276: CALL_OW 111
// end else
8280: GO 8395
// if tag = 101 then
8282: LD_VAR 0 4
8286: PUSH
8287: LD_INT 101
8289: EQUAL
8290: IFFALSE 8381
// begin if GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) > 10 then
8292: LD_VAR 0 1
8296: PPUSH
8297: LD_VAR 0 8
8301: PUSH
8302: LD_INT 1
8304: ARRAY
8305: PPUSH
8306: LD_VAR 0 8
8310: PUSH
8311: LD_INT 2
8313: ARRAY
8314: PPUSH
8315: CALL_OW 297
8319: PUSH
8320: LD_INT 10
8322: GREATER
8323: IFFALSE 8352
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8325: LD_VAR 0 1
8329: PPUSH
8330: LD_VAR 0 8
8334: PUSH
8335: LD_INT 1
8337: ARRAY
8338: PPUSH
8339: LD_VAR 0 8
8343: PUSH
8344: LD_INT 2
8346: ARRAY
8347: PPUSH
8348: CALL_OW 111
// if GetLives ( i ) = 1000 then
8352: LD_VAR 0 1
8356: PPUSH
8357: CALL_OW 256
8361: PUSH
8362: LD_INT 1000
8364: EQUAL
8365: IFFALSE 8379
// SetTag ( i , 0 ) ;
8367: LD_VAR 0 1
8371: PPUSH
8372: LD_INT 0
8374: PPUSH
8375: CALL_OW 109
// end else
8379: GO 8395
// AgressiveMove ( i , path ) ;
8381: LD_VAR 0 1
8385: PPUSH
8386: LD_VAR 0 7
8390: PPUSH
8391: CALL 69743 0 2
// end ;
8395: GO 8198
8397: POP
8398: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
8399: LD_ADDR_VAR 0 3
8403: PUSH
8404: LD_INT 22
8406: PUSH
8407: LD_INT 5
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PUSH
8414: LD_INT 21
8416: PUSH
8417: LD_INT 2
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: PUSH
8424: LD_INT 3
8426: PUSH
8427: LD_INT 34
8429: PUSH
8430: LD_INT 32
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: LIST
8445: PPUSH
8446: CALL_OW 69
8450: ST_TO_ADDR
// if not tmp then
8451: LD_VAR 0 3
8455: NOT
8456: IFFALSE 8460
// continue ;
8458: GO 7998
// for i in tmp do
8460: LD_ADDR_VAR 0 1
8464: PUSH
8465: LD_VAR 0 3
8469: PUSH
8470: FOR_IN
8471: IFFALSE 8874
// begin mech := IsDrivenBy ( i ) ;
8473: LD_ADDR_VAR 0 5
8477: PUSH
8478: LD_VAR 0 1
8482: PPUSH
8483: CALL_OW 311
8487: ST_TO_ADDR
// if not mech then
8488: LD_VAR 0 5
8492: NOT
8493: IFFALSE 8497
// continue ;
8495: GO 8470
// tag := GetTag ( i ) ;
8497: LD_ADDR_VAR 0 4
8501: PUSH
8502: LD_VAR 0 1
8506: PPUSH
8507: CALL_OW 110
8511: ST_TO_ADDR
// if GetFuel ( i ) > 90 and tag = 102 then
8512: LD_VAR 0 1
8516: PPUSH
8517: CALL_OW 261
8521: PUSH
8522: LD_INT 90
8524: GREATER
8525: PUSH
8526: LD_VAR 0 4
8530: PUSH
8531: LD_INT 102
8533: EQUAL
8534: AND
8535: IFFALSE 8551
// SetTag ( i , 0 ) else
8537: LD_VAR 0 1
8541: PPUSH
8542: LD_INT 0
8544: PPUSH
8545: CALL_OW 109
8549: GO 8647
// if GetTag ( i ) = 102 then
8551: LD_VAR 0 1
8555: PPUSH
8556: CALL_OW 110
8560: PUSH
8561: LD_INT 102
8563: EQUAL
8564: IFFALSE 8647
// begin x := rand ( 1 , 2 ) ;
8566: LD_ADDR_VAR 0 6
8570: PUSH
8571: LD_INT 1
8573: PPUSH
8574: LD_INT 2
8576: PPUSH
8577: CALL_OW 12
8581: ST_TO_ADDR
// AddComMoveUnit ( i , cargo [ x ] ) ;
8582: LD_VAR 0 1
8586: PPUSH
8587: LD_VAR 0 2
8591: PUSH
8592: LD_VAR 0 6
8596: ARRAY
8597: PPUSH
8598: CALL_OW 172
// if GetCargo ( cargo [ x ] , mat_oil ) < 20 then
8602: LD_VAR 0 2
8606: PUSH
8607: LD_VAR 0 6
8611: ARRAY
8612: PPUSH
8613: LD_INT 2
8615: PPUSH
8616: CALL_OW 289
8620: PUSH
8621: LD_INT 20
8623: LESS
8624: IFFALSE 8647
// SetCargo ( cargo [ x ] , mat_oil , 100 ) ;
8626: LD_VAR 0 2
8630: PUSH
8631: LD_VAR 0 6
8635: ARRAY
8636: PPUSH
8637: LD_INT 2
8639: PPUSH
8640: LD_INT 100
8642: PPUSH
8643: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and tag < 101 then
8647: LD_VAR 0 1
8651: PPUSH
8652: CALL_OW 256
8656: PUSH
8657: LD_INT 600
8659: GREATEREQUAL
8660: PUSH
8661: LD_VAR 0 4
8665: PUSH
8666: LD_INT 101
8668: LESS
8669: AND
8670: IFFALSE 8686
// AgressiveMove ( i , path ) ;
8672: LD_VAR 0 1
8676: PPUSH
8677: LD_VAR 0 7
8681: PPUSH
8682: CALL 69743 0 2
// if GetLives ( i ) < 600 and tag < 101 then
8686: LD_VAR 0 1
8690: PPUSH
8691: CALL_OW 256
8695: PUSH
8696: LD_INT 600
8698: LESS
8699: PUSH
8700: LD_VAR 0 4
8704: PUSH
8705: LD_INT 101
8707: LESS
8708: AND
8709: IFFALSE 8750
// begin SetTag ( i , 101 ) ;
8711: LD_VAR 0 1
8715: PPUSH
8716: LD_INT 101
8718: PPUSH
8719: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8723: LD_VAR 0 1
8727: PPUSH
8728: LD_VAR 0 8
8732: PUSH
8733: LD_INT 1
8735: ARRAY
8736: PPUSH
8737: LD_VAR 0 8
8741: PUSH
8742: LD_INT 2
8744: ARRAY
8745: PPUSH
8746: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) < 9 and mech then
8750: LD_VAR 0 4
8754: PUSH
8755: LD_INT 101
8757: EQUAL
8758: PUSH
8759: LD_VAR 0 1
8763: PPUSH
8764: LD_VAR 0 8
8768: PUSH
8769: LD_INT 1
8771: ARRAY
8772: PPUSH
8773: LD_VAR 0 8
8777: PUSH
8778: LD_INT 2
8780: ARRAY
8781: PPUSH
8782: CALL_OW 297
8786: PUSH
8787: LD_INT 9
8789: LESS
8790: AND
8791: PUSH
8792: LD_VAR 0 5
8796: AND
8797: IFFALSE 8872
// begin if GetLives ( i ) < 1000 then
8799: LD_VAR 0 1
8803: PPUSH
8804: CALL_OW 256
8808: PUSH
8809: LD_INT 1000
8811: LESS
8812: IFFALSE 8825
// AddComRepairVehicleAndReturn ( mech ) else
8814: LD_VAR 0 5
8818: PPUSH
8819: CALL 68959 0 1
8823: GO 8872
// if GetFuel ( i ) <= 50 and cargo then
8825: LD_VAR 0 1
8829: PPUSH
8830: CALL_OW 261
8834: PUSH
8835: LD_INT 50
8837: LESSEQUAL
8838: PUSH
8839: LD_VAR 0 2
8843: AND
8844: IFFALSE 8860
// SetTag ( i , 102 ) else
8846: LD_VAR 0 1
8850: PPUSH
8851: LD_INT 102
8853: PPUSH
8854: CALL_OW 109
8858: GO 8872
// SetTag ( i , 0 ) ;
8860: LD_VAR 0 1
8864: PPUSH
8865: LD_INT 0
8867: PPUSH
8868: CALL_OW 109
// end ; end ;
8872: GO 8470
8874: POP
8875: POP
// until not tmp ;
8876: LD_VAR 0 3
8880: NOT
8881: IFFALSE 7998
// end ;
8883: PPOPN 8
8885: END
// export function GoForOil ; var i , tmp , data , chance , vehicle , needOil , heikeInConvoy , success ; begin
8886: LD_INT 0
8888: PPUSH
8889: PPUSH
8890: PPUSH
8891: PPUSH
8892: PPUSH
8893: PPUSH
8894: PPUSH
8895: PPUSH
8896: PPUSH
// SetAreaMapShow ( oilArea , 1 ) ;
8897: LD_INT 20
8899: PPUSH
8900: LD_INT 1
8902: PPUSH
8903: CALL_OW 424
// repeat wait ( 0 0$5 ) ;
8907: LD_INT 175
8909: PPUSH
8910: CALL_OW 67
// heikeInConvoy := false ;
8914: LD_ADDR_VAR 0 8
8918: PUSH
8919: LD_INT 0
8921: ST_TO_ADDR
// needOil := false ;
8922: LD_ADDR_VAR 0 7
8926: PUSH
8927: LD_INT 0
8929: ST_TO_ADDR
// tmp := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] ] ) ;
8930: LD_ADDR_VAR 0 3
8934: PUSH
8935: LD_INT 20
8937: PPUSH
8938: LD_INT 22
8940: PUSH
8941: LD_INT 2
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PUSH
8948: LD_INT 3
8950: PUSH
8951: LD_INT 2
8953: PUSH
8954: LD_INT 34
8956: PUSH
8957: LD_INT 88
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: PUSH
8964: LD_INT 34
8966: PUSH
8967: LD_INT 31
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: LIST
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PUSH
8983: LD_INT 33
8985: PUSH
8986: LD_INT 1
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: LIST
8997: PPUSH
8998: CALL_OW 70
9002: ST_TO_ADDR
// for i in tmp do
9003: LD_ADDR_VAR 0 2
9007: PUSH
9008: LD_VAR 0 3
9012: PUSH
9013: FOR_IN
9014: IFFALSE 9099
// begin if IsDrivenBy ( i ) = Heike then
9016: LD_VAR 0 2
9020: PPUSH
9021: CALL_OW 311
9025: PUSH
9026: LD_EXP 34
9030: EQUAL
9031: IFFALSE 9050
// begin heikeInConvoy := true ;
9033: LD_ADDR_VAR 0 8
9037: PUSH
9038: LD_INT 1
9040: ST_TO_ADDR
// Query ( QHeikeConvoy ) ;
9041: LD_STRING QHeikeConvoy
9043: PPUSH
9044: CALL_OW 97
// break ;
9048: GO 9099
// end ; if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 10 then
9050: LD_VAR 0 2
9054: PPUSH
9055: CALL_OW 262
9059: PUSH
9060: LD_INT 1
9062: EQUAL
9063: PUSH
9064: LD_VAR 0 2
9068: PPUSH
9069: CALL_OW 261
9073: PUSH
9074: LD_INT 10
9076: LESS
9077: AND
9078: IFFALSE 9097
// begin needOil := true ;
9080: LD_ADDR_VAR 0 7
9084: PUSH
9085: LD_INT 1
9087: ST_TO_ADDR
// Query ( QNeedOil ) ;
9088: LD_STRING QNeedOil
9090: PPUSH
9091: CALL_OW 97
// break ;
9095: GO 9099
// end ; end ;
9097: GO 9013
9099: POP
9100: POP
// if not needOil and not heikeInConvoy and UnitFilter ( tmp , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
9101: LD_VAR 0 7
9105: NOT
9106: PUSH
9107: LD_VAR 0 8
9111: NOT
9112: AND
9113: PUSH
9114: LD_VAR 0 3
9118: PPUSH
9119: LD_INT 2
9121: PUSH
9122: LD_INT 34
9124: PUSH
9125: LD_INT 32
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PUSH
9132: LD_INT 34
9134: PUSH
9135: LD_INT 51
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: LIST
9146: PPUSH
9147: CALL_OW 72
9151: AND
9152: IFFALSE 9169
// if Query ( QConvoy ) = 1 then
9154: LD_STRING QConvoy
9156: PPUSH
9157: CALL_OW 97
9161: PUSH
9162: LD_INT 1
9164: EQUAL
9165: IFFALSE 9169
// break ;
9167: GO 9173
// until false ;
9169: LD_INT 0
9171: IFFALSE 8907
// SetAreaMapShow ( oilArea , 0 ) ;
9173: LD_INT 20
9175: PPUSH
9176: LD_INT 0
9178: PPUSH
9179: CALL_OW 424
// data := [ ] ;
9183: LD_ADDR_VAR 0 4
9187: PUSH
9188: EMPTY
9189: ST_TO_ADDR
// chance := [ 60 , 50 , 40 , 30 ] [ Difficulty ] ;
9190: LD_ADDR_VAR 0 5
9194: PUSH
9195: LD_INT 60
9197: PUSH
9198: LD_INT 50
9200: PUSH
9201: LD_INT 40
9203: PUSH
9204: LD_INT 30
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: PUSH
9213: LD_OWVAR 67
9217: ARRAY
9218: ST_TO_ADDR
// for i in tmp do
9219: LD_ADDR_VAR 0 2
9223: PUSH
9224: LD_VAR 0 3
9228: PUSH
9229: FOR_IN
9230: IFFALSE 9327
// begin data := Join ( data , [ i , IsDrivenBy ( i ) , GetLives ( i ) , GetFuel ( i ) , ] ) ;
9232: LD_ADDR_VAR 0 4
9236: PUSH
9237: LD_VAR 0 4
9241: PPUSH
9242: LD_VAR 0 2
9246: PUSH
9247: LD_VAR 0 2
9251: PPUSH
9252: CALL_OW 311
9256: PUSH
9257: LD_VAR 0 2
9261: PPUSH
9262: CALL_OW 256
9266: PUSH
9267: LD_VAR 0 2
9271: PPUSH
9272: CALL_OW 261
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: PPUSH
9283: CALL 67139 0 2
9287: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
9288: LD_VAR 0 2
9292: PPUSH
9293: CALL_OW 311
9297: PPUSH
9298: CALL_OW 64
// RemoveUnit ( i ) ;
9302: LD_VAR 0 2
9306: PPUSH
9307: CALL_OW 64
// chance := chance + 20 ;
9311: LD_ADDR_VAR 0 5
9315: PUSH
9316: LD_VAR 0 5
9320: PUSH
9321: LD_INT 20
9323: PLUS
9324: ST_TO_ADDR
// end ;
9325: GO 9229
9327: POP
9328: POP
// wait ( rand ( 0 0$45 , 2 2$30 ) ) ;
9329: LD_INT 1575
9331: PPUSH
9332: LD_INT 5250
9334: PPUSH
9335: CALL_OW 12
9339: PPUSH
9340: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
9344: LD_INT 35
9346: PPUSH
9347: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
9351: LD_INT 22
9353: PUSH
9354: LD_INT 3
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: PUSH
9361: LD_INT 92
9363: PUSH
9364: LD_INT 261
9366: PUSH
9367: LD_INT 71
9369: PUSH
9370: LD_INT 12
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: PPUSH
9383: CALL_OW 69
9387: NOT
9388: PUSH
9389: LD_INT 277
9391: PPUSH
9392: LD_INT 80
9394: PPUSH
9395: CALL_OW 428
9399: NOT
9400: AND
9401: IFFALSE 9344
// for i in data do
9403: LD_ADDR_VAR 0 2
9407: PUSH
9408: LD_VAR 0 4
9412: PUSH
9413: FOR_IN
9414: IFFALSE 9815
// begin uc_nation := GetNation ( i [ 1 ] ) ;
9416: LD_ADDR_OWVAR 21
9420: PUSH
9421: LD_VAR 0 2
9425: PUSH
9426: LD_INT 1
9428: ARRAY
9429: PPUSH
9430: CALL_OW 248
9434: ST_TO_ADDR
// uc_side := 2 ;
9435: LD_ADDR_OWVAR 20
9439: PUSH
9440: LD_INT 2
9442: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( i [ 1 ] ) , GetEngine ( i [ 1 ] ) , GetControl ( i [ 1 ] ) , GetWeapon ( i [ 1 ] ) , 66 ) ;
9443: LD_VAR 0 2
9447: PUSH
9448: LD_INT 1
9450: ARRAY
9451: PPUSH
9452: CALL_OW 265
9456: PPUSH
9457: LD_VAR 0 2
9461: PUSH
9462: LD_INT 1
9464: ARRAY
9465: PPUSH
9466: CALL_OW 262
9470: PPUSH
9471: LD_VAR 0 2
9475: PUSH
9476: LD_INT 1
9478: ARRAY
9479: PPUSH
9480: CALL_OW 263
9484: PPUSH
9485: LD_VAR 0 2
9489: PUSH
9490: LD_INT 1
9492: ARRAY
9493: PPUSH
9494: CALL_OW 264
9498: PPUSH
9499: LD_INT 66
9501: PPUSH
9502: CALL 34277 0 5
// vehicle := CreateVehicle ;
9506: LD_ADDR_VAR 0 6
9510: PUSH
9511: CALL_OW 45
9515: ST_TO_ADDR
// PlaceUnitXYD ( vehicle , 277 , 80 , 4 , false ) ;
9516: LD_VAR 0 6
9520: PPUSH
9521: LD_INT 277
9523: PPUSH
9524: LD_INT 80
9526: PPUSH
9527: LD_INT 4
9529: PPUSH
9530: LD_INT 0
9532: PPUSH
9533: CALL 69279 0 5
// PlaceHumanInUnit ( i [ 2 ] , vehicle ) ;
9537: LD_VAR 0 2
9541: PUSH
9542: LD_INT 2
9544: ARRAY
9545: PPUSH
9546: LD_VAR 0 6
9550: PPUSH
9551: CALL_OW 52
// SetLives ( vehicle , i [ 3 ] ) ;
9555: LD_VAR 0 6
9559: PPUSH
9560: LD_VAR 0 2
9564: PUSH
9565: LD_INT 3
9567: ARRAY
9568: PPUSH
9569: CALL_OW 234
// success := Prob ( chance ) ;
9573: LD_ADDR_VAR 0 9
9577: PUSH
9578: LD_VAR 0 5
9582: PPUSH
9583: CALL_OW 13
9587: ST_TO_ADDR
// if success then
9588: LD_VAR 0 9
9592: IFFALSE 9674
// begin if GetEngine ( vehicle ) = engine_combustion then
9594: LD_VAR 0 6
9598: PPUSH
9599: CALL_OW 262
9603: PUSH
9604: LD_INT 1
9606: EQUAL
9607: IFFALSE 9621
// SetFuel ( vehicle , 90 ) ;
9609: LD_VAR 0 6
9613: PPUSH
9614: LD_INT 90
9616: PPUSH
9617: CALL_OW 240
// if GetWeapon ( vehicle ) in [ ar_cargo_bay , ru_cargo_bay ] then
9621: LD_VAR 0 6
9625: PPUSH
9626: CALL_OW 264
9630: PUSH
9631: LD_INT 32
9633: PUSH
9634: LD_INT 51
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: IN
9641: IFFALSE 9672
// begin collectedOil := collectedOil + 100 ;
9643: LD_ADDR_EXP 33
9647: PUSH
9648: LD_EXP 33
9652: PUSH
9653: LD_INT 100
9655: PLUS
9656: ST_TO_ADDR
// SetCargo ( vehicle , mat_oil , 100 ) ;
9657: LD_VAR 0 6
9661: PPUSH
9662: LD_INT 2
9664: PPUSH
9665: LD_INT 100
9667: PPUSH
9668: CALL_OW 290
// end ; end else
9672: GO 9746
// begin if i [ 3 ] > 333 then
9674: LD_VAR 0 2
9678: PUSH
9679: LD_INT 3
9681: ARRAY
9682: PUSH
9683: LD_INT 333
9685: GREATER
9686: IFFALSE 9700
// SetLives ( vehicle , 333 ) ;
9688: LD_VAR 0 6
9692: PPUSH
9693: LD_INT 333
9695: PPUSH
9696: CALL_OW 234
// if i [ 4 ] > 20 then
9700: LD_VAR 0 2
9704: PUSH
9705: LD_INT 4
9707: ARRAY
9708: PUSH
9709: LD_INT 20
9711: GREATER
9712: IFFALSE 9728
// SetFuel ( vehicle , 20 ) else
9714: LD_VAR 0 6
9718: PPUSH
9719: LD_INT 20
9721: PPUSH
9722: CALL_OW 240
9726: GO 9746
// SetFuel ( vehicle , i [ 4 ] ) ;
9728: LD_VAR 0 6
9732: PPUSH
9733: LD_VAR 0 2
9737: PUSH
9738: LD_INT 4
9740: ARRAY
9741: PPUSH
9742: CALL_OW 240
// end ; ComMoveXY ( vehicle , 250 , 119 ) ;
9746: LD_VAR 0 6
9750: PPUSH
9751: LD_INT 250
9753: PPUSH
9754: LD_INT 119
9756: PPUSH
9757: CALL_OW 111
// AddComMoveXY ( vehicle , 211 , 80 ) ;
9761: LD_VAR 0 6
9765: PPUSH
9766: LD_INT 211
9768: PPUSH
9769: LD_INT 80
9771: PPUSH
9772: CALL_OW 171
// repeat wait ( 0 0$5 ) ;
9776: LD_INT 175
9778: PPUSH
9779: CALL_OW 67
// until not FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_placed ] ] ) ;
9783: LD_INT 20
9785: PPUSH
9786: LD_INT 22
9788: PUSH
9789: LD_INT 2
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: PUSH
9796: LD_INT 52
9798: PUSH
9799: EMPTY
9800: LIST
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: PPUSH
9806: CALL_OW 70
9810: NOT
9811: IFFALSE 9776
// end ;
9813: GO 9413
9815: POP
9816: POP
// wait ( 0 0$10 ) ;
9817: LD_INT 350
9819: PPUSH
9820: CALL_OW 67
// GoForOil ;
9824: CALL 8886 0 0
// end ;
9828: LD_VAR 0 1
9832: RET
// every 0 0$2 trigger FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do var i ;
9833: LD_INT 22
9835: PPUSH
9836: LD_INT 21
9838: PUSH
9839: LD_INT 2
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PUSH
9846: LD_INT 22
9848: PUSH
9849: LD_INT 5
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: PUSH
9856: LD_INT 58
9858: PUSH
9859: EMPTY
9860: LIST
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: LIST
9866: PPUSH
9867: CALL_OW 70
9871: IFFALSE 9940
9873: GO 9875
9875: DISABLE
9876: LD_INT 0
9878: PPUSH
// begin enable ;
9879: ENABLE
// for i in FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do
9880: LD_ADDR_VAR 0 1
9884: PUSH
9885: LD_INT 22
9887: PPUSH
9888: LD_INT 21
9890: PUSH
9891: LD_INT 2
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PUSH
9898: LD_INT 22
9900: PUSH
9901: LD_INT 5
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: PUSH
9908: LD_INT 58
9910: PUSH
9911: EMPTY
9912: LIST
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: LIST
9918: PPUSH
9919: CALL_OW 70
9923: PUSH
9924: FOR_IN
9925: IFFALSE 9938
// KillUnit ( i ) ;
9927: LD_VAR 0 1
9931: PPUSH
9932: CALL_OW 66
9936: GO 9924
9938: POP
9939: POP
// end ; end_of_file
9940: PPOPN 1
9942: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
9943: LD_INT 0
9945: PPUSH
// uc_side := side ;
9946: LD_ADDR_OWVAR 20
9950: PUSH
9951: LD_VAR 0 1
9955: ST_TO_ADDR
// uc_nation := nation ;
9956: LD_ADDR_OWVAR 21
9960: PUSH
9961: LD_VAR 0 2
9965: ST_TO_ADDR
// vc_chassis := chassis ;
9966: LD_ADDR_OWVAR 37
9970: PUSH
9971: LD_VAR 0 3
9975: ST_TO_ADDR
// vc_engine := engine ;
9976: LD_ADDR_OWVAR 39
9980: PUSH
9981: LD_VAR 0 4
9985: ST_TO_ADDR
// vc_control := control ;
9986: LD_ADDR_OWVAR 38
9990: PUSH
9991: LD_VAR 0 5
9995: ST_TO_ADDR
// vc_weapon := weapon ;
9996: LD_ADDR_OWVAR 40
10000: PUSH
10001: LD_VAR 0 6
10005: ST_TO_ADDR
// vc_fuel_battery := fuel ;
10006: LD_ADDR_OWVAR 41
10010: PUSH
10011: LD_VAR 0 7
10015: ST_TO_ADDR
// result := CreateVehicle ;
10016: LD_ADDR_VAR 0 8
10020: PUSH
10021: CALL_OW 45
10025: ST_TO_ADDR
// end ;
10026: LD_VAR 0 8
10030: RET
// export function SayX ( units , ident ) ; var i ; begin
10031: LD_INT 0
10033: PPUSH
10034: PPUSH
// result := false ;
10035: LD_ADDR_VAR 0 3
10039: PUSH
10040: LD_INT 0
10042: ST_TO_ADDR
// if not units then
10043: LD_VAR 0 1
10047: NOT
10048: IFFALSE 10052
// exit ;
10050: GO 10106
// for i in units do
10052: LD_ADDR_VAR 0 4
10056: PUSH
10057: LD_VAR 0 1
10061: PUSH
10062: FOR_IN
10063: IFFALSE 10104
// if IsOk ( i ) then
10065: LD_VAR 0 4
10069: PPUSH
10070: CALL_OW 302
10074: IFFALSE 10102
// begin Say ( i , ident ) ;
10076: LD_VAR 0 4
10080: PPUSH
10081: LD_VAR 0 2
10085: PPUSH
10086: CALL_OW 88
// result := i ;
10090: LD_ADDR_VAR 0 3
10094: PUSH
10095: LD_VAR 0 4
10099: ST_TO_ADDR
// break ;
10100: GO 10104
// end ;
10102: GO 10062
10104: POP
10105: POP
// end ;
10106: LD_VAR 0 3
10110: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
10111: LD_INT 0
10113: PPUSH
10114: PPUSH
// InitUc ;
10115: CALL_OW 18
// InitHc ;
10119: CALL_OW 19
// uc_side := 0 ;
10123: LD_ADDR_OWVAR 20
10127: PUSH
10128: LD_INT 0
10130: ST_TO_ADDR
// uc_nation := 0 ;
10131: LD_ADDR_OWVAR 21
10135: PUSH
10136: LD_INT 0
10138: ST_TO_ADDR
// for i = 1 to amount do
10139: LD_ADDR_VAR 0 4
10143: PUSH
10144: DOUBLE
10145: LD_INT 1
10147: DEC
10148: ST_TO_ADDR
10149: LD_VAR 0 2
10153: PUSH
10154: FOR_TO
10155: IFFALSE 10237
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
10157: LD_ADDR_OWVAR 29
10161: PUSH
10162: LD_INT 9
10164: PPUSH
10165: LD_INT 12
10167: PPUSH
10168: CALL_OW 12
10172: PUSH
10173: LD_INT 9
10175: PPUSH
10176: LD_INT 12
10178: PPUSH
10179: CALL_OW 12
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
10188: LD_ADDR_OWVAR 35
10192: PUSH
10193: LD_INT 1
10195: NEG
10196: PPUSH
10197: LD_INT 1
10199: PPUSH
10200: CALL_OW 12
10204: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
10205: LD_INT 0
10207: PPUSH
10208: LD_INT 12
10210: PPUSH
10211: LD_INT 1
10213: PPUSH
10214: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
10218: CALL_OW 44
10222: PPUSH
10223: LD_VAR 0 1
10227: PPUSH
10228: LD_INT 0
10230: PPUSH
10231: CALL_OW 49
// end ;
10235: GO 10154
10237: POP
10238: POP
// InitHc ;
10239: CALL_OW 19
// end ;
10243: LD_VAR 0 3
10247: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
10248: LD_INT 0
10250: PPUSH
10251: PPUSH
// uc_side := 0 ;
10252: LD_ADDR_OWVAR 20
10256: PUSH
10257: LD_INT 0
10259: ST_TO_ADDR
// uc_nation := 0 ;
10260: LD_ADDR_OWVAR 21
10264: PUSH
10265: LD_INT 0
10267: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) ;
10268: LD_INT 7
10270: PPUSH
10271: LD_INT 6
10273: PUSH
10274: LD_INT 5
10276: PUSH
10277: LD_INT 4
10279: PUSH
10280: LD_INT 3
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: PUSH
10289: LD_OWVAR 67
10293: ARRAY
10294: PPUSH
10295: CALL 10111 0 2
// for i = 1 to 2 do
10299: LD_ADDR_VAR 0 4
10303: PUSH
10304: DOUBLE
10305: LD_INT 1
10307: DEC
10308: ST_TO_ADDR
10309: LD_INT 2
10311: PUSH
10312: FOR_TO
10313: IFFALSE 10350
// begin vc_chassis := class_mastodont ;
10315: LD_ADDR_OWVAR 37
10319: PUSH
10320: LD_INT 31
10322: ST_TO_ADDR
// vc_control := control_rider ;
10323: LD_ADDR_OWVAR 38
10327: PUSH
10328: LD_INT 4
10330: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
10331: CALL_OW 45
10335: PPUSH
10336: LD_VAR 0 1
10340: PPUSH
10341: LD_INT 0
10343: PPUSH
10344: CALL 66044 0 3
// end ;
10348: GO 10312
10350: POP
10351: POP
// InitHc ;
10352: CALL_OW 19
// for i := 1 to 3 do
10356: LD_ADDR_VAR 0 4
10360: PUSH
10361: DOUBLE
10362: LD_INT 1
10364: DEC
10365: ST_TO_ADDR
10366: LD_INT 3
10368: PUSH
10369: FOR_TO
10370: IFFALSE 10407
// begin hc_class := class_horse ;
10372: LD_ADDR_OWVAR 28
10376: PUSH
10377: LD_INT 21
10379: ST_TO_ADDR
// hc_gallery :=  ;
10380: LD_ADDR_OWVAR 33
10384: PUSH
10385: LD_STRING 
10387: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10388: CALL_OW 44
10392: PPUSH
10393: LD_VAR 0 1
10397: PPUSH
10398: LD_INT 0
10400: PPUSH
10401: CALL_OW 49
// end ;
10405: GO 10369
10407: POP
10408: POP
// InitHc ;
10409: CALL_OW 19
// for i = 1 to 3 do
10413: LD_ADDR_VAR 0 4
10417: PUSH
10418: DOUBLE
10419: LD_INT 1
10421: DEC
10422: ST_TO_ADDR
10423: LD_INT 3
10425: PUSH
10426: FOR_TO
10427: IFFALSE 10481
// begin hc_class = class_tiger ;
10429: LD_ADDR_OWVAR 28
10433: PUSH
10434: LD_INT 14
10436: ST_TO_ADDR
// hc_gallery =  ;
10437: LD_ADDR_OWVAR 33
10441: PUSH
10442: LD_STRING 
10444: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
10445: LD_ADDR_OWVAR 35
10449: PUSH
10450: LD_INT 7
10452: NEG
10453: PPUSH
10454: LD_INT 7
10456: PPUSH
10457: CALL_OW 12
10461: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
10462: CALL_OW 44
10466: PPUSH
10467: LD_VAR 0 1
10471: PPUSH
10472: LD_INT 0
10474: PPUSH
10475: CALL 66044 0 3
// end ;
10479: GO 10426
10481: POP
10482: POP
// InitHc ;
10483: CALL_OW 19
// for i := 1 to 4 do
10487: LD_ADDR_VAR 0 4
10491: PUSH
10492: DOUBLE
10493: LD_INT 1
10495: DEC
10496: ST_TO_ADDR
10497: LD_INT 4
10499: PUSH
10500: FOR_TO
10501: IFFALSE 10538
// begin hc_class := class_phororhacos ;
10503: LD_ADDR_OWVAR 28
10507: PUSH
10508: LD_INT 18
10510: ST_TO_ADDR
// hc_gallery :=  ;
10511: LD_ADDR_OWVAR 33
10515: PUSH
10516: LD_STRING 
10518: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10519: CALL_OW 44
10523: PPUSH
10524: LD_VAR 0 1
10528: PPUSH
10529: LD_INT 0
10531: PPUSH
10532: CALL_OW 49
// end ;
10536: GO 10500
10538: POP
10539: POP
// InitHc ;
10540: CALL_OW 19
// for i := 1 to 4 do
10544: LD_ADDR_VAR 0 4
10548: PUSH
10549: DOUBLE
10550: LD_INT 1
10552: DEC
10553: ST_TO_ADDR
10554: LD_INT 4
10556: PUSH
10557: FOR_TO
10558: IFFALSE 10595
// begin hc_class := class_baggie ;
10560: LD_ADDR_OWVAR 28
10564: PUSH
10565: LD_INT 13
10567: ST_TO_ADDR
// hc_gallery :=  ;
10568: LD_ADDR_OWVAR 33
10572: PUSH
10573: LD_STRING 
10575: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10576: CALL_OW 44
10580: PPUSH
10581: LD_VAR 0 1
10585: PPUSH
10586: LD_INT 0
10588: PPUSH
10589: CALL_OW 49
// end ;
10593: GO 10557
10595: POP
10596: POP
// InitHc ;
10597: CALL_OW 19
// for i := 1 to 7 do
10601: LD_ADDR_VAR 0 4
10605: PUSH
10606: DOUBLE
10607: LD_INT 1
10609: DEC
10610: ST_TO_ADDR
10611: LD_INT 7
10613: PUSH
10614: FOR_TO
10615: IFFALSE 10652
// begin hc_class := class_frog ;
10617: LD_ADDR_OWVAR 28
10621: PUSH
10622: LD_INT 19
10624: ST_TO_ADDR
// hc_gallery :=  ;
10625: LD_ADDR_OWVAR 33
10629: PUSH
10630: LD_STRING 
10632: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
10633: CALL_OW 44
10637: PPUSH
10638: LD_VAR 0 2
10642: PPUSH
10643: LD_INT 0
10645: PPUSH
10646: CALL_OW 49
// end ;
10650: GO 10614
10652: POP
10653: POP
// end ;
10654: LD_VAR 0 3
10658: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
10659: LD_INT 0
10661: PPUSH
10662: PPUSH
10663: PPUSH
// if not observer or not unit then
10664: LD_VAR 0 1
10668: NOT
10669: PUSH
10670: LD_VAR 0 2
10674: NOT
10675: OR
10676: IFFALSE 10680
// exit ;
10678: GO 10728
// if not See ( GetSide ( observer ) , unit ) then
10680: LD_VAR 0 1
10684: PPUSH
10685: CALL_OW 255
10689: PPUSH
10690: LD_VAR 0 2
10694: PPUSH
10695: CALL_OW 292
10699: NOT
10700: IFFALSE 10704
// exit ;
10702: GO 10728
// result := GetDistUnits ( observer , unit ) < 12 ;
10704: LD_ADDR_VAR 0 3
10708: PUSH
10709: LD_VAR 0 1
10713: PPUSH
10714: LD_VAR 0 2
10718: PPUSH
10719: CALL_OW 296
10723: PUSH
10724: LD_INT 12
10726: LESS
10727: ST_TO_ADDR
// end ;
10728: LD_VAR 0 3
10732: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
10733: LD_INT 0
10735: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
10736: LD_VAR 0 2
10740: PUSH
10741: LD_INT 1
10743: ARRAY
10744: PPUSH
10745: LD_VAR 0 2
10749: PUSH
10750: LD_INT 2
10752: ARRAY
10753: PPUSH
10754: CALL_OW 488
10758: PUSH
10759: LD_VAR 0 2
10763: PUSH
10764: LD_INT 1
10766: ARRAY
10767: PPUSH
10768: LD_VAR 0 2
10772: PUSH
10773: LD_INT 2
10775: ARRAY
10776: PPUSH
10777: CALL_OW 428
10781: PUSH
10782: LD_INT 0
10784: EQUAL
10785: AND
10786: IFFALSE 10820
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
10788: LD_VAR 0 1
10792: PPUSH
10793: LD_VAR 0 2
10797: PUSH
10798: LD_INT 1
10800: ARRAY
10801: PPUSH
10802: LD_VAR 0 2
10806: PUSH
10807: LD_INT 2
10809: ARRAY
10810: PPUSH
10811: LD_VAR 0 3
10815: PPUSH
10816: CALL_OW 48
// end ;
10820: LD_VAR 0 4
10824: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
10825: LD_INT 0
10827: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
10828: LD_VAR 0 1
10832: PPUSH
10833: LD_VAR 0 2
10837: PPUSH
10838: LD_VAR 0 3
10842: PPUSH
10843: LD_VAR 0 4
10847: PPUSH
10848: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
10852: LD_VAR 0 1
10856: PPUSH
10857: LD_VAR 0 2
10861: PPUSH
10862: LD_VAR 0 3
10866: PPUSH
10867: CALL_OW 331
// end ;
10871: LD_VAR 0 5
10875: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
10876: LD_INT 0
10878: PPUSH
// if not units then
10879: LD_VAR 0 1
10883: NOT
10884: IFFALSE 10888
// exit ;
10886: GO 10971
// result := true ;
10888: LD_ADDR_VAR 0 4
10892: PUSH
10893: LD_INT 1
10895: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
10896: LD_VAR 0 1
10900: PPUSH
10901: LD_INT 26
10903: PUSH
10904: LD_INT 1
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: PPUSH
10911: CALL_OW 72
10915: PUSH
10916: LD_INT 1
10918: ARRAY
10919: PPUSH
10920: LD_VAR 0 2
10924: PPUSH
10925: CALL_OW 88
10929: NOT
10930: IFFALSE 10971
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
10932: LD_ADDR_VAR 0 4
10936: PUSH
10937: LD_VAR 0 1
10941: PPUSH
10942: LD_INT 26
10944: PUSH
10945: LD_INT 2
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PPUSH
10952: CALL_OW 72
10956: PUSH
10957: LD_INT 1
10959: ARRAY
10960: PPUSH
10961: LD_VAR 0 3
10965: PPUSH
10966: CALL_OW 88
10970: ST_TO_ADDR
// end ;
10971: LD_VAR 0 4
10975: RET
// export function SeeGroup ( side , group ) ; var i ; begin
10976: LD_INT 0
10978: PPUSH
10979: PPUSH
// if not group then
10980: LD_VAR 0 2
10984: NOT
10985: IFFALSE 10989
// exit ;
10987: GO 11034
// for i in group do
10989: LD_ADDR_VAR 0 4
10993: PUSH
10994: LD_VAR 0 2
10998: PUSH
10999: FOR_IN
11000: IFFALSE 11032
// if See ( side , i ) then
11002: LD_VAR 0 1
11006: PPUSH
11007: LD_VAR 0 4
11011: PPUSH
11012: CALL_OW 292
11016: IFFALSE 11030
// begin result := true ;
11018: LD_ADDR_VAR 0 3
11022: PUSH
11023: LD_INT 1
11025: ST_TO_ADDR
// exit ;
11026: POP
11027: POP
11028: GO 11034
// end ;
11030: GO 10999
11032: POP
11033: POP
// end ; end_of_file
11034: LD_VAR 0 3
11038: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
11039: LD_INT 0
11041: PPUSH
11042: PPUSH
11043: PPUSH
11044: PPUSH
11045: PPUSH
11046: PPUSH
11047: PPUSH
// uc_side := 3 ;
11048: LD_ADDR_OWVAR 20
11052: PUSH
11053: LD_INT 3
11055: ST_TO_ADDR
// uc_nation := 3 ;
11056: LD_ADDR_OWVAR 21
11060: PUSH
11061: LD_INT 3
11063: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
11064: LD_ADDR_EXP 53
11068: PUSH
11069: LD_STRING Morozov
11071: PPUSH
11072: CALL_OW 25
11076: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
11077: LD_EXP 53
11081: PPUSH
11082: LD_INT 52
11084: PPUSH
11085: CALL_OW 52
// if not gaidarKilled then
11089: LD_EXP 7
11093: NOT
11094: IFFALSE 11127
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
11096: LD_ADDR_EXP 54
11100: PUSH
11101: LD_STRING Gaydar
11103: PPUSH
11104: LD_INT 0
11106: PPUSH
11107: LD_STRING 
11109: PPUSH
11110: CALL 29437 0 3
11114: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
11115: LD_EXP 54
11119: PPUSH
11120: LD_INT 52
11122: PPUSH
11123: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
11127: LD_INT 52
11129: PPUSH
11130: LD_STRING lenin
11132: PPUSH
11133: CALL_OW 500
// ruOutsiders := [ ] ;
11137: LD_ADDR_EXP 56
11141: PUSH
11142: EMPTY
11143: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
11144: LD_ADDR_EXP 58
11148: PUSH
11149: EMPTY
11150: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
11151: LD_ADDR_EXP 59
11155: PUSH
11156: EMPTY
11157: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
11158: LD_ADDR_EXP 60
11162: PUSH
11163: EMPTY
11164: ST_TO_ADDR
// ruAttackers := [ ] ;
11165: LD_ADDR_EXP 61
11169: PUSH
11170: EMPTY
11171: ST_TO_ADDR
// waveStrength := 0 ;
11172: LD_ADDR_EXP 62
11176: PUSH
11177: LD_INT 0
11179: ST_TO_ADDR
// if not gaidarKilled then
11180: LD_EXP 7
11184: NOT
11185: IFFALSE 11195
// waveStrength := 2 ;
11187: LD_ADDR_EXP 62
11191: PUSH
11192: LD_INT 2
11194: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
11195: LD_ADDR_VAR 0 7
11199: PUSH
11200: LD_INT 22
11202: PUSH
11203: LD_INT 3
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PUSH
11210: LD_INT 21
11212: PUSH
11213: LD_INT 3
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PPUSH
11224: CALL_OW 69
11228: ST_TO_ADDR
// for i in tmp do
11229: LD_ADDR_VAR 0 2
11233: PUSH
11234: LD_VAR 0 7
11238: PUSH
11239: FOR_IN
11240: IFFALSE 11277
// SetBLevel ( i , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
11242: LD_VAR 0 2
11246: PPUSH
11247: LD_INT 5
11249: PUSH
11250: LD_INT 6
11252: PUSH
11253: LD_INT 7
11255: PUSH
11256: LD_INT 8
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: PUSH
11265: LD_OWVAR 67
11269: ARRAY
11270: PPUSH
11271: CALL_OW 241
11275: GO 11239
11277: POP
11278: POP
// for i := 1 to 3 do
11279: LD_ADDR_VAR 0 2
11283: PUSH
11284: DOUBLE
11285: LD_INT 1
11287: DEC
11288: ST_TO_ADDR
11289: LD_INT 3
11291: PUSH
11292: FOR_TO
11293: IFFALSE 11331
// begin PrepareHuman ( false , 1 , 0 ) ;
11295: LD_INT 0
11297: PPUSH
11298: LD_INT 1
11300: PPUSH
11301: LD_INT 0
11303: PPUSH
11304: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
11308: CALL_OW 44
11312: PPUSH
11313: LD_INT 75
11315: PPUSH
11316: LD_INT 49
11318: PPUSH
11319: LD_INT 3
11321: PPUSH
11322: LD_INT 0
11324: PPUSH
11325: CALL_OW 50
// end ;
11329: GO 11292
11331: POP
11332: POP
// for i := 1 to 4 do
11333: LD_ADDR_VAR 0 2
11337: PUSH
11338: DOUBLE
11339: LD_INT 1
11341: DEC
11342: ST_TO_ADDR
11343: LD_INT 4
11345: PUSH
11346: FOR_TO
11347: IFFALSE 11393
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
11349: LD_INT 0
11351: PPUSH
11352: LD_INT 1
11354: PPUSH
11355: LD_INT 2
11357: PPUSH
11358: CALL_OW 12
11362: PPUSH
11363: LD_INT 0
11365: PPUSH
11366: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
11370: CALL_OW 44
11374: PPUSH
11375: LD_INT 330
11377: PPUSH
11378: LD_INT 231
11380: PPUSH
11381: LD_INT 5
11383: PPUSH
11384: LD_INT 0
11386: PPUSH
11387: CALL_OW 50
// end ;
11391: GO 11346
11393: POP
11394: POP
// hc_class := 1 ;
11395: LD_ADDR_OWVAR 28
11399: PUSH
11400: LD_INT 1
11402: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
11403: CALL_OW 44
11407: PPUSH
11408: LD_INT 324
11410: PPUSH
11411: LD_INT 219
11413: PPUSH
11414: CALL_OW 428
11418: PPUSH
11419: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
11423: CALL_OW 44
11427: PPUSH
11428: LD_INT 316
11430: PPUSH
11431: LD_INT 223
11433: PPUSH
11434: CALL_OW 428
11438: PPUSH
11439: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
11443: LD_ADDR_VAR 0 7
11447: PUSH
11448: LD_INT 172
11450: PPUSH
11451: LD_INT 198
11453: PPUSH
11454: CALL_OW 428
11458: PPUSH
11459: CALL_OW 274
11463: PUSH
11464: LD_INT 189
11466: PPUSH
11467: LD_INT 156
11469: PPUSH
11470: CALL_OW 428
11474: PPUSH
11475: CALL_OW 274
11479: PUSH
11480: LD_INT 341
11482: PPUSH
11483: LD_INT 232
11485: PPUSH
11486: CALL_OW 428
11490: PPUSH
11491: CALL_OW 274
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: LIST
11500: ST_TO_ADDR
// for i in tmp do
11501: LD_ADDR_VAR 0 2
11505: PUSH
11506: LD_VAR 0 7
11510: PUSH
11511: FOR_IN
11512: IFFALSE 11546
// begin SetResourceType ( i , mat_cans , 200 ) ;
11514: LD_VAR 0 2
11518: PPUSH
11519: LD_INT 1
11521: PPUSH
11522: LD_INT 200
11524: PPUSH
11525: CALL_OW 277
// SetResourceType ( i , mat_oil , 300 ) ;
11529: LD_VAR 0 2
11533: PPUSH
11534: LD_INT 2
11536: PPUSH
11537: LD_INT 300
11539: PPUSH
11540: CALL_OW 277
// end ;
11544: GO 11511
11546: POP
11547: POP
// tmp := [ [ 177 , 114 ] , [ 138 , 96 ] ] ;
11548: LD_ADDR_VAR 0 7
11552: PUSH
11553: LD_INT 177
11555: PUSH
11556: LD_INT 114
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PUSH
11563: LD_INT 138
11565: PUSH
11566: LD_INT 96
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: ST_TO_ADDR
// for i := 1 to tmp do
11577: LD_ADDR_VAR 0 2
11581: PUSH
11582: DOUBLE
11583: LD_INT 1
11585: DEC
11586: ST_TO_ADDR
11587: LD_VAR 0 7
11591: PUSH
11592: FOR_TO
11593: IFFALSE 11676
// begin PrepareHuman ( false , class_bazooker , 6 ) ;
11595: LD_INT 0
11597: PPUSH
11598: LD_INT 9
11600: PPUSH
11601: LD_INT 6
11603: PPUSH
11604: CALL_OW 380
// un := CreateHuman ;
11608: LD_ADDR_VAR 0 5
11612: PUSH
11613: CALL_OW 44
11617: ST_TO_ADDR
// SetDir ( un , 2 ) ;
11618: LD_VAR 0 5
11622: PPUSH
11623: LD_INT 2
11625: PPUSH
11626: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
11630: LD_VAR 0 5
11634: PPUSH
11635: LD_VAR 0 7
11639: PUSH
11640: LD_VAR 0 2
11644: ARRAY
11645: PUSH
11646: LD_INT 1
11648: ARRAY
11649: PPUSH
11650: LD_VAR 0 7
11654: PUSH
11655: LD_VAR 0 2
11659: ARRAY
11660: PUSH
11661: LD_INT 2
11663: ARRAY
11664: PPUSH
11665: CALL_OW 428
11669: PPUSH
11670: CALL_OW 52
// end ;
11674: GO 11592
11676: POP
11677: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
11678: LD_ADDR_VAR 0 7
11682: PUSH
11683: LD_INT 198
11685: PUSH
11686: LD_INT 158
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 203
11695: PUSH
11696: LD_INT 166
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: LD_INT 181
11705: PUSH
11706: LD_INT 209
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PUSH
11713: LD_INT 178
11715: PUSH
11716: LD_INT 196
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 181
11725: PUSH
11726: LD_INT 212
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: ST_TO_ADDR
// for i := 1 to tmp do
11740: LD_ADDR_VAR 0 2
11744: PUSH
11745: DOUBLE
11746: LD_INT 1
11748: DEC
11749: ST_TO_ADDR
11750: LD_VAR 0 7
11754: PUSH
11755: FOR_TO
11756: IFFALSE 11877
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
11758: LD_INT 0
11760: PPUSH
11761: LD_INT 1
11763: PPUSH
11764: LD_INT 4
11766: PUSH
11767: LD_INT 5
11769: PUSH
11770: LD_INT 6
11772: PUSH
11773: LD_INT 7
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: PUSH
11782: LD_OWVAR 67
11786: ARRAY
11787: PPUSH
11788: CALL_OW 380
// un := CreateHuman ;
11792: LD_ADDR_VAR 0 5
11796: PUSH
11797: CALL_OW 44
11801: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
11802: LD_ADDR_VAR 0 4
11806: PUSH
11807: LD_VAR 0 7
11811: PUSH
11812: LD_VAR 0 2
11816: ARRAY
11817: PUSH
11818: LD_INT 1
11820: ARRAY
11821: PPUSH
11822: LD_VAR 0 7
11826: PUSH
11827: LD_VAR 0 2
11831: ARRAY
11832: PUSH
11833: LD_INT 2
11835: ARRAY
11836: PPUSH
11837: CALL_OW 428
11841: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
11842: LD_VAR 0 5
11846: PPUSH
11847: LD_VAR 0 4
11851: PPUSH
11852: CALL 62375 0 1
11856: PPUSH
11857: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
11861: LD_VAR 0 5
11865: PPUSH
11866: LD_VAR 0 4
11870: PPUSH
11871: CALL_OW 52
// end ;
11875: GO 11755
11877: POP
11878: POP
// for i := 1 to 3 do
11879: LD_ADDR_VAR 0 2
11883: PUSH
11884: DOUBLE
11885: LD_INT 1
11887: DEC
11888: ST_TO_ADDR
11889: LD_INT 3
11891: PUSH
11892: FOR_TO
11893: IFFALSE 11948
// begin InitHc ;
11895: CALL_OW 19
// uc_nation := 0 ;
11899: LD_ADDR_OWVAR 21
11903: PUSH
11904: LD_INT 0
11906: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
11907: LD_ADDR_OWVAR 28
11911: PUSH
11912: LD_INT 16
11914: ST_TO_ADDR
// un := CreateHuman ;
11915: LD_ADDR_VAR 0 5
11919: PUSH
11920: CALL_OW 44
11924: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
11925: LD_VAR 0 5
11929: PPUSH
11930: LD_INT 194
11932: PPUSH
11933: LD_INT 164
11935: PPUSH
11936: LD_INT 6
11938: PPUSH
11939: LD_INT 0
11941: PPUSH
11942: CALL_OW 50
// end ;
11946: GO 11892
11948: POP
11949: POP
// uc_nation := 3 ;
11950: LD_ADDR_OWVAR 21
11954: PUSH
11955: LD_INT 3
11957: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
11958: LD_INT 24
11960: PPUSH
11961: LD_INT 1
11963: PPUSH
11964: LD_INT 1
11966: PPUSH
11967: LD_INT 44
11969: PPUSH
11970: LD_INT 10
11972: PPUSH
11973: CALL 34277 0 5
// un := CreateVehicle ;
11977: LD_ADDR_VAR 0 5
11981: PUSH
11982: CALL_OW 45
11986: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 166 , 1 , false ) ;
11987: LD_VAR 0 5
11991: PPUSH
11992: LD_INT 199
11994: PPUSH
11995: LD_INT 166
11997: PPUSH
11998: LD_INT 1
12000: PPUSH
12001: LD_INT 0
12003: PPUSH
12004: CALL 69279 0 5
// ComHold ( un ) ;
12008: LD_VAR 0 5
12012: PPUSH
12013: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
12017: LD_INT 0
12019: PPUSH
12020: LD_INT 3
12022: PPUSH
12023: LD_INT 4
12025: PPUSH
12026: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12030: CALL_OW 44
12034: PPUSH
12035: LD_VAR 0 5
12039: PPUSH
12040: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
12044: LD_INT 24
12046: PPUSH
12047: LD_INT 1
12049: PPUSH
12050: LD_INT 1
12052: PPUSH
12053: LD_INT 45
12055: PPUSH
12056: LD_INT 10
12058: PPUSH
12059: CALL 34277 0 5
// un := CreateVehicle ;
12063: LD_ADDR_VAR 0 5
12067: PUSH
12068: CALL_OW 45
12072: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
12073: LD_VAR 0 5
12077: PPUSH
12078: LD_INT 129
12080: PPUSH
12081: LD_INT 93
12083: PPUSH
12084: LD_INT 1
12086: PPUSH
12087: LD_INT 0
12089: PPUSH
12090: CALL 69279 0 5
// ComHold ( un ) ;
12094: LD_VAR 0 5
12098: PPUSH
12099: CALL_OW 140
// if Difficulty > 1 then
12103: LD_OWVAR 67
12107: PUSH
12108: LD_INT 1
12110: GREATER
12111: IFFALSE 12199
// begin PrepareHuman ( false , 3 , 4 ) ;
12113: LD_INT 0
12115: PPUSH
12116: LD_INT 3
12118: PPUSH
12119: LD_INT 4
12121: PPUSH
12122: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12126: CALL_OW 44
12130: PPUSH
12131: LD_VAR 0 5
12135: PPUSH
12136: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
12140: LD_INT 24
12142: PPUSH
12143: LD_INT 1
12145: PPUSH
12146: LD_INT 1
12148: PPUSH
12149: LD_INT 45
12151: PPUSH
12152: LD_INT 10
12154: PPUSH
12155: CALL 34277 0 5
// un := CreateVehicle ;
12159: LD_ADDR_VAR 0 5
12163: PUSH
12164: CALL_OW 45
12168: ST_TO_ADDR
// PlaceUnitXYD ( un , 200 , 173 , 1 , false ) ;
12169: LD_VAR 0 5
12173: PPUSH
12174: LD_INT 200
12176: PPUSH
12177: LD_INT 173
12179: PPUSH
12180: LD_INT 1
12182: PPUSH
12183: LD_INT 0
12185: PPUSH
12186: CALL 69279 0 5
// ComHold ( un ) ;
12190: LD_VAR 0 5
12194: PPUSH
12195: CALL_OW 140
// end ; PrepareHuman ( false , 3 , 4 ) ;
12199: LD_INT 0
12201: PPUSH
12202: LD_INT 3
12204: PPUSH
12205: LD_INT 4
12207: PPUSH
12208: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12212: CALL_OW 44
12216: PPUSH
12217: LD_VAR 0 5
12221: PPUSH
12222: CALL_OW 52
// bc_type := b_armoury ;
12226: LD_ADDR_OWVAR 42
12230: PUSH
12231: LD_INT 4
12233: ST_TO_ADDR
// if Difficulty > 1 then
12234: LD_OWVAR 67
12238: PUSH
12239: LD_INT 1
12241: GREATER
12242: IFFALSE 12252
// bc_type := b_barracks ;
12244: LD_ADDR_OWVAR 42
12248: PUSH
12249: LD_INT 5
12251: ST_TO_ADDR
// bc_level := 6 ;
12252: LD_ADDR_OWVAR 43
12256: PUSH
12257: LD_INT 6
12259: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
12260: LD_INT 120
12262: PPUSH
12263: LD_INT 100
12265: PPUSH
12266: LD_INT 5
12268: PPUSH
12269: CALL_OW 47
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
12273: LD_ADDR_VAR 0 2
12277: PUSH
12278: DOUBLE
12279: LD_INT 1
12281: DEC
12282: ST_TO_ADDR
12283: LD_INT 3
12285: PUSH
12286: LD_INT 3
12288: PUSH
12289: LD_INT 4
12291: PUSH
12292: LD_INT 4
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: PUSH
12301: LD_OWVAR 67
12305: ARRAY
12306: PUSH
12307: FOR_TO
12308: IFFALSE 12366
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_bazooker , class_bazooker ] [ Difficulty ] , 5 ) ;
12310: LD_INT 0
12312: PPUSH
12313: LD_INT 1
12315: PUSH
12316: LD_INT 1
12318: PUSH
12319: LD_INT 9
12321: PUSH
12322: LD_INT 9
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: PUSH
12331: LD_OWVAR 67
12335: ARRAY
12336: PPUSH
12337: LD_INT 5
12339: PPUSH
12340: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
12344: CALL_OW 44
12348: PPUSH
12349: LD_INT 120
12351: PPUSH
12352: LD_INT 100
12354: PPUSH
12355: CALL_OW 428
12359: PPUSH
12360: CALL_OW 52
// end ;
12364: GO 12307
12366: POP
12367: POP
// tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
12368: LD_ADDR_VAR 0 7
12372: PUSH
12373: LD_INT 135
12375: PUSH
12376: LD_INT 100
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PUSH
12383: LD_INT 137
12385: PUSH
12386: LD_INT 92
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: ST_TO_ADDR
// for i := 1 to tmp do
12397: LD_ADDR_VAR 0 2
12401: PUSH
12402: DOUBLE
12403: LD_INT 1
12405: DEC
12406: ST_TO_ADDR
12407: LD_VAR 0 7
12411: PUSH
12412: FOR_TO
12413: IFFALSE 12583
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
12415: LD_INT 22
12417: PUSH
12418: LD_INT 22
12420: PUSH
12421: LD_INT 24
12423: PUSH
12424: LD_INT 24
12426: PUSH
12427: LD_INT 24
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: PUSH
12437: LD_OWVAR 67
12441: PUSH
12442: LD_INT 0
12444: PPUSH
12445: LD_INT 1
12447: PPUSH
12448: CALL_OW 12
12452: PLUS
12453: ARRAY
12454: PPUSH
12455: LD_INT 1
12457: PPUSH
12458: LD_INT 1
12460: PPUSH
12461: LD_INT 44
12463: PPUSH
12464: LD_INT 25
12466: PPUSH
12467: CALL 34277 0 5
// veh := CreateVehicle ;
12471: LD_ADDR_VAR 0 6
12475: PUSH
12476: CALL_OW 45
12480: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12481: LD_VAR 0 6
12485: PPUSH
12486: LD_INT 2
12488: PPUSH
12489: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
12493: LD_VAR 0 6
12497: PPUSH
12498: LD_VAR 0 7
12502: PUSH
12503: LD_VAR 0 2
12507: ARRAY
12508: PUSH
12509: LD_INT 1
12511: ARRAY
12512: PPUSH
12513: LD_VAR 0 7
12517: PUSH
12518: LD_VAR 0 2
12522: ARRAY
12523: PUSH
12524: LD_INT 2
12526: ARRAY
12527: PPUSH
12528: LD_INT 0
12530: PPUSH
12531: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
12535: LD_INT 0
12537: PPUSH
12538: LD_INT 3
12540: PPUSH
12541: LD_INT 6
12543: PPUSH
12544: CALL_OW 380
// un := CreateHuman ;
12548: LD_ADDR_VAR 0 5
12552: PUSH
12553: CALL_OW 44
12557: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12558: LD_VAR 0 5
12562: PPUSH
12563: LD_VAR 0 6
12567: PPUSH
12568: CALL_OW 52
// ComHold ( veh ) ;
12572: LD_VAR 0 6
12576: PPUSH
12577: CALL_OW 140
// end ;
12581: GO 12412
12583: POP
12584: POP
// tmp := [ 191 , 122 ] ;
12585: LD_ADDR_VAR 0 7
12589: PUSH
12590: LD_INT 191
12592: PUSH
12593: LD_INT 122
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
12600: LD_INT 24
12602: PPUSH
12603: LD_INT 1
12605: PPUSH
12606: LD_INT 1
12608: PPUSH
12609: LD_INT 44
12611: PPUSH
12612: LD_INT 30
12614: PPUSH
12615: CALL 34277 0 5
// ruBlockadeTank := CreateVehicle ;
12619: LD_ADDR_EXP 55
12623: PUSH
12624: CALL_OW 45
12628: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
12629: LD_EXP 55
12633: PPUSH
12634: LD_INT 2
12636: PPUSH
12637: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
12641: LD_EXP 55
12645: PPUSH
12646: LD_INT 191
12648: PPUSH
12649: LD_INT 122
12651: PPUSH
12652: LD_INT 0
12654: PPUSH
12655: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 , 7 ] [ Difficulty - 1 ] ) ;
12659: LD_INT 1
12661: PPUSH
12662: LD_INT 5
12664: PUSH
12665: LD_INT 6
12667: PUSH
12668: LD_INT 7
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: LIST
12675: PUSH
12676: LD_OWVAR 67
12680: PUSH
12681: LD_INT 1
12683: MINUS
12684: ARRAY
12685: PPUSH
12686: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
12690: CALL_OW 44
12694: PPUSH
12695: LD_EXP 55
12699: PPUSH
12700: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
12704: LD_EXP 55
12708: PPUSH
12709: CALL_OW 140
// ruBlockadeSquad := [ ] ;
12713: LD_ADDR_EXP 57
12717: PUSH
12718: EMPTY
12719: ST_TO_ADDR
// for i := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
12720: LD_ADDR_VAR 0 2
12724: PUSH
12725: DOUBLE
12726: LD_INT 1
12728: DEC
12729: ST_TO_ADDR
12730: LD_INT 2
12732: PUSH
12733: LD_INT 2
12735: PUSH
12736: LD_INT 3
12738: PUSH
12739: LD_INT 3
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: PUSH
12748: LD_OWVAR 67
12752: ARRAY
12753: PUSH
12754: FOR_TO
12755: IFFALSE 12871
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
12757: LD_INT 0
12759: PPUSH
12760: LD_INT 1
12762: PPUSH
12763: LD_INT 4
12765: PUSH
12766: LD_INT 5
12768: PUSH
12769: LD_INT 6
12771: PUSH
12772: LD_INT 7
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: PUSH
12781: LD_OWVAR 67
12785: ARRAY
12786: PPUSH
12787: CALL_OW 380
// un := CreateHuman ;
12791: LD_ADDR_VAR 0 5
12795: PUSH
12796: CALL_OW 44
12800: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
12801: LD_VAR 0 5
12805: PPUSH
12806: LD_INT 9
12808: PPUSH
12809: LD_INT 0
12811: PPUSH
12812: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
12816: LD_VAR 0 5
12820: PPUSH
12821: LD_INT 198
12823: PPUSH
12824: LD_INT 129
12826: PPUSH
12827: CALL_OW 118
// AddComCrawl ( un ) ;
12831: LD_VAR 0 5
12835: PPUSH
12836: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
12840: LD_ADDR_EXP 57
12844: PUSH
12845: LD_EXP 57
12849: PPUSH
12850: LD_EXP 57
12854: PUSH
12855: LD_INT 1
12857: PLUS
12858: PPUSH
12859: LD_VAR 0 5
12863: PPUSH
12864: CALL_OW 1
12868: ST_TO_ADDR
// end ;
12869: GO 12754
12871: POP
12872: POP
// PrepareHuman ( false , 4 , 5 ) ;
12873: LD_INT 0
12875: PPUSH
12876: LD_INT 4
12878: PPUSH
12879: LD_INT 5
12881: PPUSH
12882: CALL_OW 380
// un := CreateHuman ;
12886: LD_ADDR_VAR 0 5
12890: PUSH
12891: CALL_OW 44
12895: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
12896: LD_VAR 0 5
12900: PPUSH
12901: LD_INT 179
12903: PPUSH
12904: LD_INT 113
12906: PPUSH
12907: LD_INT 0
12909: PPUSH
12910: CALL_OW 48
// ComHold ( un ) ;
12914: LD_VAR 0 5
12918: PPUSH
12919: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
12923: LD_ADDR_EXP 57
12927: PUSH
12928: LD_EXP 57
12932: PPUSH
12933: LD_EXP 57
12937: PUSH
12938: LD_INT 1
12940: PLUS
12941: PPUSH
12942: LD_VAR 0 5
12946: PPUSH
12947: CALL_OW 1
12951: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
12952: LD_ADDR_VAR 0 7
12956: PUSH
12957: LD_INT 167
12959: PPUSH
12960: LD_INT 243
12962: PPUSH
12963: CALL_OW 428
12967: PPUSH
12968: CALL_OW 274
12972: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
12973: LD_VAR 0 7
12977: PPUSH
12978: LD_INT 1
12980: PPUSH
12981: LD_INT 1000
12983: PPUSH
12984: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
12988: LD_VAR 0 7
12992: PPUSH
12993: LD_INT 2
12995: PPUSH
12996: LD_INT 400
12998: PPUSH
12999: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
13003: LD_ADDR_VAR 0 7
13007: PUSH
13008: LD_INT 169
13010: PPUSH
13011: LD_INT 229
13013: PPUSH
13014: CALL_OW 428
13018: ST_TO_ADDR
// for i := 1 to 3 do
13019: LD_ADDR_VAR 0 2
13023: PUSH
13024: DOUBLE
13025: LD_INT 1
13027: DEC
13028: ST_TO_ADDR
13029: LD_INT 3
13031: PUSH
13032: FOR_TO
13033: IFFALSE 13124
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13035: LD_INT 0
13037: PPUSH
13038: LD_INT 1
13040: PPUSH
13041: LD_INT 4
13043: PUSH
13044: LD_INT 5
13046: PUSH
13047: LD_INT 5
13049: PUSH
13050: LD_INT 6
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: PUSH
13059: LD_OWVAR 67
13063: ARRAY
13064: PPUSH
13065: CALL_OW 380
// un := CreateHuman ;
13069: LD_ADDR_VAR 0 5
13073: PUSH
13074: CALL_OW 44
13078: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
13079: LD_VAR 0 5
13083: PPUSH
13084: LD_VAR 0 7
13088: PPUSH
13089: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
13093: LD_ADDR_EXP 58
13097: PUSH
13098: LD_EXP 58
13102: PPUSH
13103: LD_EXP 58
13107: PUSH
13108: LD_INT 1
13110: PLUS
13111: PPUSH
13112: LD_VAR 0 5
13116: PPUSH
13117: CALL_OW 1
13121: ST_TO_ADDR
// end ;
13122: GO 13032
13124: POP
13125: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
13126: LD_ADDR_VAR 0 7
13130: PUSH
13131: LD_INT 165
13133: PUSH
13134: LD_INT 227
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PUSH
13141: LD_INT 173
13143: PUSH
13144: LD_INT 231
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: ST_TO_ADDR
// for i := 1 to tmp do
13155: LD_ADDR_VAR 0 2
13159: PUSH
13160: DOUBLE
13161: LD_INT 1
13163: DEC
13164: ST_TO_ADDR
13165: LD_VAR 0 7
13169: PUSH
13170: FOR_TO
13171: IFFALSE 13292
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13173: LD_INT 0
13175: PPUSH
13176: LD_INT 1
13178: PPUSH
13179: LD_INT 4
13181: PUSH
13182: LD_INT 5
13184: PUSH
13185: LD_INT 5
13187: PUSH
13188: LD_INT 6
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: PUSH
13197: LD_OWVAR 67
13201: ARRAY
13202: PPUSH
13203: CALL_OW 380
// un := CreateHuman ;
13207: LD_ADDR_VAR 0 5
13211: PUSH
13212: CALL_OW 44
13216: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
13217: LD_VAR 0 5
13221: PPUSH
13222: LD_VAR 0 7
13226: PUSH
13227: LD_VAR 0 2
13231: ARRAY
13232: PUSH
13233: LD_INT 1
13235: ARRAY
13236: PPUSH
13237: LD_VAR 0 7
13241: PUSH
13242: LD_VAR 0 2
13246: ARRAY
13247: PUSH
13248: LD_INT 2
13250: ARRAY
13251: PPUSH
13252: CALL_OW 428
13256: PPUSH
13257: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
13261: LD_ADDR_EXP 58
13265: PUSH
13266: LD_EXP 58
13270: PPUSH
13271: LD_EXP 58
13275: PUSH
13276: LD_INT 1
13278: PLUS
13279: PPUSH
13280: LD_VAR 0 5
13284: PPUSH
13285: CALL_OW 1
13289: ST_TO_ADDR
// end ;
13290: GO 13170
13292: POP
13293: POP
// for i := 1 to 2 do
13294: LD_ADDR_VAR 0 2
13298: PUSH
13299: DOUBLE
13300: LD_INT 1
13302: DEC
13303: ST_TO_ADDR
13304: LD_INT 2
13306: PUSH
13307: FOR_TO
13308: IFFALSE 13363
// begin InitHc ;
13310: CALL_OW 19
// uc_nation := 0 ;
13314: LD_ADDR_OWVAR 21
13318: PUSH
13319: LD_INT 0
13321: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
13322: LD_ADDR_OWVAR 28
13326: PUSH
13327: LD_INT 16
13329: ST_TO_ADDR
// un := CreateHuman ;
13330: LD_ADDR_VAR 0 5
13334: PUSH
13335: CALL_OW 44
13339: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
13340: LD_VAR 0 5
13344: PPUSH
13345: LD_INT 166
13347: PPUSH
13348: LD_INT 233
13350: PPUSH
13351: LD_INT 2
13353: PPUSH
13354: LD_INT 0
13356: PPUSH
13357: CALL_OW 50
// end ;
13361: GO 13307
13363: POP
13364: POP
// uc_nation := 3 ;
13365: LD_ADDR_OWVAR 21
13369: PUSH
13370: LD_INT 3
13372: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
13373: LD_ADDR_VAR 0 7
13377: PUSH
13378: LD_INT 71
13380: PUSH
13381: LD_INT 52
13383: PUSH
13384: LD_INT 11
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: LIST
13391: ST_TO_ADDR
// for i in tmp do
13392: LD_ADDR_VAR 0 2
13396: PUSH
13397: LD_VAR 0 7
13401: PUSH
13402: FOR_IN
13403: IFFALSE 13447
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
13405: LD_VAR 0 2
13409: PPUSH
13410: CALL_OW 274
13414: PPUSH
13415: LD_INT 1
13417: PPUSH
13418: LD_INT 3000
13420: PPUSH
13421: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
13425: LD_VAR 0 2
13429: PPUSH
13430: CALL_OW 274
13434: PPUSH
13435: LD_INT 2
13437: PPUSH
13438: LD_INT 600
13440: PPUSH
13441: CALL_OW 277
// end ;
13445: GO 13402
13447: POP
13448: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
13449: LD_ADDR_VAR 0 7
13453: PUSH
13454: LD_INT 41
13456: PUSH
13457: LD_INT 57
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 38
13466: PUSH
13467: LD_INT 55
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: LD_INT 50
13476: PUSH
13477: LD_INT 73
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: LD_INT 51
13486: PUSH
13487: LD_INT 65
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: LD_INT 82
13496: PUSH
13497: LD_INT 93
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: LD_INT 87
13506: PUSH
13507: LD_INT 100
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PUSH
13514: LD_INT 91
13516: PUSH
13517: LD_INT 109
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: PUSH
13524: LD_INT 84
13526: PUSH
13527: LD_INT 120
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 113
13536: PUSH
13537: LD_INT 153
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: PUSH
13544: LD_INT 123
13546: PUSH
13547: LD_INT 171
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 125
13556: PUSH
13557: LD_INT 178
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: LD_INT 125
13566: PUSH
13567: LD_INT 188
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 125
13576: PUSH
13577: LD_INT 201
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: LD_INT 33
13586: PUSH
13587: LD_INT 60
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 76
13596: PUSH
13597: LD_INT 95
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 84
13606: PUSH
13607: LD_INT 111
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: LD_INT 112
13616: PUSH
13617: LD_INT 165
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: ST_TO_ADDR
// for i := 1 to tmp do
13643: LD_ADDR_VAR 0 2
13647: PUSH
13648: DOUBLE
13649: LD_INT 1
13651: DEC
13652: ST_TO_ADDR
13653: LD_VAR 0 7
13657: PUSH
13658: FOR_TO
13659: IFFALSE 13906
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
13661: LD_ADDR_VAR 0 4
13665: PUSH
13666: LD_VAR 0 7
13670: PUSH
13671: LD_VAR 0 2
13675: ARRAY
13676: PUSH
13677: LD_INT 1
13679: ARRAY
13680: PPUSH
13681: LD_VAR 0 7
13685: PUSH
13686: LD_VAR 0 2
13690: ARRAY
13691: PUSH
13692: LD_INT 2
13694: ARRAY
13695: PPUSH
13696: CALL_OW 428
13700: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
13701: LD_VAR 0 4
13705: PPUSH
13706: CALL_OW 266
13710: PUSH
13711: LD_INT 4
13713: PUSH
13714: LD_INT 5
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: IN
13721: IFFALSE 13817
// begin for j := 1 to Difficulty do
13723: LD_ADDR_VAR 0 3
13727: PUSH
13728: DOUBLE
13729: LD_INT 1
13731: DEC
13732: ST_TO_ADDR
13733: LD_OWVAR 67
13737: PUSH
13738: FOR_TO
13739: IFFALSE 13813
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13741: LD_INT 0
13743: PPUSH
13744: LD_INT 1
13746: PPUSH
13747: LD_INT 4
13749: PUSH
13750: LD_INT 5
13752: PUSH
13753: LD_INT 5
13755: PUSH
13756: LD_INT 6
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: PUSH
13765: LD_OWVAR 67
13769: ARRAY
13770: PPUSH
13771: CALL_OW 380
// un := CreateHuman ;
13775: LD_ADDR_VAR 0 5
13779: PUSH
13780: CALL_OW 44
13784: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13785: LD_VAR 0 5
13789: PPUSH
13790: LD_VAR 0 4
13794: PPUSH
13795: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
13799: LD_VAR 0 5
13803: PPUSH
13804: LD_INT 9
13806: PPUSH
13807: CALL_OW 336
// end ;
13811: GO 13738
13813: POP
13814: POP
// end else
13815: GO 13875
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13817: LD_INT 0
13819: PPUSH
13820: LD_INT 1
13822: PPUSH
13823: LD_INT 4
13825: PUSH
13826: LD_INT 5
13828: PUSH
13829: LD_INT 5
13831: PUSH
13832: LD_INT 6
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: PUSH
13841: LD_OWVAR 67
13845: ARRAY
13846: PPUSH
13847: CALL_OW 380
// un := CreateHuman ;
13851: LD_ADDR_VAR 0 5
13855: PUSH
13856: CALL_OW 44
13860: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13861: LD_VAR 0 5
13865: PPUSH
13866: LD_VAR 0 4
13870: PPUSH
13871: CALL_OW 52
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13875: LD_ADDR_EXP 59
13879: PUSH
13880: LD_EXP 59
13884: PPUSH
13885: LD_EXP 59
13889: PUSH
13890: LD_INT 1
13892: PLUS
13893: PPUSH
13894: LD_VAR 0 5
13898: PPUSH
13899: CALL_OW 1
13903: ST_TO_ADDR
// end ;
13904: GO 13658
13906: POP
13907: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
13908: LD_ADDR_VAR 0 4
13912: PUSH
13913: LD_INT 10
13915: PPUSH
13916: LD_INT 22
13918: PUSH
13919: LD_INT 3
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PUSH
13926: LD_INT 30
13928: PUSH
13929: LD_INT 32
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: LD_INT 58
13938: PUSH
13939: EMPTY
13940: LIST
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: LIST
13946: PPUSH
13947: CALL_OW 70
13951: PUSH
13952: FOR_IN
13953: IFFALSE 14087
// begin if not Prob ( [ 40 , 50 , 75 , 80 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
13955: LD_INT 40
13957: PUSH
13958: LD_INT 50
13960: PUSH
13961: LD_INT 75
13963: PUSH
13964: LD_INT 80
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: PUSH
13973: LD_OWVAR 67
13977: ARRAY
13978: PUSH
13979: LD_EXP 7
13983: PUSH
13984: LD_INT 10
13986: MUL
13987: MINUS
13988: PPUSH
13989: CALL_OW 13
13993: NOT
13994: IFFALSE 13998
// continue ;
13996: GO 13952
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13998: LD_INT 0
14000: PPUSH
14001: LD_INT 1
14003: PPUSH
14004: LD_INT 4
14006: PUSH
14007: LD_INT 5
14009: PUSH
14010: LD_INT 5
14012: PUSH
14013: LD_INT 6
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: PUSH
14022: LD_OWVAR 67
14026: ARRAY
14027: PPUSH
14028: CALL_OW 380
// un := CreateHuman ;
14032: LD_ADDR_VAR 0 5
14036: PUSH
14037: CALL_OW 44
14041: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
14042: LD_VAR 0 5
14046: PPUSH
14047: LD_VAR 0 4
14051: PPUSH
14052: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14056: LD_ADDR_EXP 59
14060: PUSH
14061: LD_EXP 59
14065: PPUSH
14066: LD_EXP 59
14070: PUSH
14071: LD_INT 1
14073: PLUS
14074: PPUSH
14075: LD_VAR 0 5
14079: PPUSH
14080: CALL_OW 1
14084: ST_TO_ADDR
// end ;
14085: GO 13952
14087: POP
14088: POP
// for i := 1 to 5 do
14089: LD_ADDR_VAR 0 2
14093: PUSH
14094: DOUBLE
14095: LD_INT 1
14097: DEC
14098: ST_TO_ADDR
14099: LD_INT 5
14101: PUSH
14102: FOR_TO
14103: IFFALSE 14201
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14105: LD_INT 0
14107: PPUSH
14108: LD_INT 2
14110: PPUSH
14111: LD_INT 4
14113: PUSH
14114: LD_INT 5
14116: PUSH
14117: LD_INT 5
14119: PUSH
14120: LD_INT 6
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: PUSH
14129: LD_OWVAR 67
14133: ARRAY
14134: PPUSH
14135: CALL_OW 380
// un := CreateHuman ;
14139: LD_ADDR_VAR 0 5
14143: PUSH
14144: CALL_OW 44
14148: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
14149: LD_VAR 0 5
14153: PPUSH
14154: LD_INT 66
14156: PPUSH
14157: LD_INT 101
14159: PPUSH
14160: LD_INT 3
14162: PPUSH
14163: LD_INT 0
14165: PPUSH
14166: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14170: LD_ADDR_EXP 59
14174: PUSH
14175: LD_EXP 59
14179: PPUSH
14180: LD_EXP 59
14184: PUSH
14185: LD_INT 1
14187: PLUS
14188: PPUSH
14189: LD_VAR 0 5
14193: PPUSH
14194: CALL_OW 1
14198: ST_TO_ADDR
// end ;
14199: GO 14102
14201: POP
14202: POP
// tmp := [ ruFac1 , ruFac2 ] ;
14203: LD_ADDR_VAR 0 7
14207: PUSH
14208: LD_INT 72
14210: PUSH
14211: LD_INT 12
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: ST_TO_ADDR
// for i := 1 to tmp do
14218: LD_ADDR_VAR 0 2
14222: PUSH
14223: DOUBLE
14224: LD_INT 1
14226: DEC
14227: ST_TO_ADDR
14228: LD_VAR 0 7
14232: PUSH
14233: FOR_TO
14234: IFFALSE 14351
// for j := 1 to 6 do
14236: LD_ADDR_VAR 0 3
14240: PUSH
14241: DOUBLE
14242: LD_INT 1
14244: DEC
14245: ST_TO_ADDR
14246: LD_INT 6
14248: PUSH
14249: FOR_TO
14250: IFFALSE 14347
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14252: LD_INT 0
14254: PPUSH
14255: LD_INT 3
14257: PPUSH
14258: LD_INT 4
14260: PUSH
14261: LD_INT 5
14263: PUSH
14264: LD_INT 5
14266: PUSH
14267: LD_INT 6
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: PUSH
14276: LD_OWVAR 67
14280: ARRAY
14281: PPUSH
14282: CALL_OW 380
// un := CreateHuman ;
14286: LD_ADDR_VAR 0 5
14290: PUSH
14291: CALL_OW 44
14295: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
14296: LD_VAR 0 5
14300: PPUSH
14301: LD_VAR 0 7
14305: PUSH
14306: LD_VAR 0 2
14310: ARRAY
14311: PPUSH
14312: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14316: LD_ADDR_EXP 59
14320: PUSH
14321: LD_EXP 59
14325: PPUSH
14326: LD_EXP 59
14330: PUSH
14331: LD_INT 1
14333: PLUS
14334: PPUSH
14335: LD_VAR 0 5
14339: PPUSH
14340: CALL_OW 1
14344: ST_TO_ADDR
// end ;
14345: GO 14249
14347: POP
14348: POP
14349: GO 14233
14351: POP
14352: POP
// for i := 1 to 3 do
14353: LD_ADDR_VAR 0 2
14357: PUSH
14358: DOUBLE
14359: LD_INT 1
14361: DEC
14362: ST_TO_ADDR
14363: LD_INT 3
14365: PUSH
14366: FOR_TO
14367: IFFALSE 14456
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14369: LD_INT 0
14371: PPUSH
14372: LD_INT 4
14374: PPUSH
14375: LD_INT 4
14377: PUSH
14378: LD_INT 5
14380: PUSH
14381: LD_INT 5
14383: PUSH
14384: LD_INT 6
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: PUSH
14393: LD_OWVAR 67
14397: ARRAY
14398: PPUSH
14399: CALL_OW 380
// un := CreateHuman ;
14403: LD_ADDR_VAR 0 5
14407: PUSH
14408: CALL_OW 44
14412: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
14413: LD_VAR 0 5
14417: PPUSH
14418: LD_INT 17
14420: PPUSH
14421: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14425: LD_ADDR_EXP 59
14429: PUSH
14430: LD_EXP 59
14434: PPUSH
14435: LD_EXP 59
14439: PUSH
14440: LD_INT 1
14442: PLUS
14443: PPUSH
14444: LD_VAR 0 5
14448: PPUSH
14449: CALL_OW 1
14453: ST_TO_ADDR
// end ;
14454: GO 14366
14456: POP
14457: POP
// for i := 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
14458: LD_ADDR_VAR 0 2
14462: PUSH
14463: DOUBLE
14464: LD_INT 1
14466: DEC
14467: ST_TO_ADDR
14468: LD_INT 2
14470: PUSH
14471: LD_INT 3
14473: PUSH
14474: LD_INT 3
14476: PUSH
14477: LD_INT 3
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: PUSH
14486: LD_OWVAR 67
14490: ARRAY
14491: PUSH
14492: FOR_TO
14493: IFFALSE 14613
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
14495: LD_INT 22
14497: PPUSH
14498: LD_INT 1
14500: PPUSH
14501: LD_INT 1
14503: PPUSH
14504: LD_INT 52
14506: PPUSH
14507: LD_INT 100
14509: PPUSH
14510: CALL 34277 0 5
// veh := CreateVehicle ;
14514: LD_ADDR_VAR 0 6
14518: PUSH
14519: CALL_OW 45
14523: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
14524: LD_INT 0
14526: PPUSH
14527: LD_INT 3
14529: PPUSH
14530: LD_INT 4
14532: PPUSH
14533: CALL_OW 380
// un := CreateHuman ;
14537: LD_ADDR_VAR 0 5
14541: PUSH
14542: CALL_OW 44
14546: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
14547: LD_VAR 0 6
14551: PPUSH
14552: LD_INT 107
14554: PPUSH
14555: LD_INT 182
14557: PPUSH
14558: LD_INT 4
14560: PPUSH
14561: LD_INT 0
14563: PPUSH
14564: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
14568: LD_VAR 0 5
14572: PPUSH
14573: LD_VAR 0 6
14577: PPUSH
14578: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14582: LD_ADDR_EXP 59
14586: PUSH
14587: LD_EXP 59
14591: PPUSH
14592: LD_EXP 59
14596: PUSH
14597: LD_INT 1
14599: PLUS
14600: PPUSH
14601: LD_VAR 0 5
14605: PPUSH
14606: CALL_OW 1
14610: ST_TO_ADDR
// end ;
14611: GO 14492
14613: POP
14614: POP
// InitHc ;
14615: CALL_OW 19
// for i := 1 to [ 3 , 5 , 6 , 8 ] [ Difficulty ] do
14619: LD_ADDR_VAR 0 2
14623: PUSH
14624: DOUBLE
14625: LD_INT 1
14627: DEC
14628: ST_TO_ADDR
14629: LD_INT 3
14631: PUSH
14632: LD_INT 5
14634: PUSH
14635: LD_INT 6
14637: PUSH
14638: LD_INT 8
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: PUSH
14647: LD_OWVAR 67
14651: ARRAY
14652: PUSH
14653: FOR_TO
14654: IFFALSE 14749
// begin uc_nation := 0 ;
14656: LD_ADDR_OWVAR 21
14660: PUSH
14661: LD_INT 0
14663: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
14664: LD_ADDR_OWVAR 28
14668: PUSH
14669: LD_INT 15
14671: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
14672: LD_ADDR_OWVAR 31
14676: PUSH
14677: LD_INT 3
14679: PUSH
14680: LD_INT 0
14682: PUSH
14683: LD_INT 0
14685: PUSH
14686: LD_INT 0
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: ST_TO_ADDR
// un := CreateHuman ;
14695: LD_ADDR_VAR 0 5
14699: PUSH
14700: CALL_OW 44
14704: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
14705: LD_VAR 0 5
14709: PPUSH
14710: LD_INT 269
14712: PUSH
14713: LD_INT 300
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PUSH
14720: LD_VAR 0 2
14724: PUSH
14725: LD_INT 2
14727: MOD
14728: PUSH
14729: LD_INT 1
14731: PLUS
14732: ARRAY
14733: PPUSH
14734: LD_INT 182
14736: PPUSH
14737: LD_INT 4
14739: PPUSH
14740: LD_INT 0
14742: PPUSH
14743: CALL_OW 50
// end ;
14747: GO 14653
14749: POP
14750: POP
// uc_nation := 3 ;
14751: LD_ADDR_OWVAR 21
14755: PUSH
14756: LD_INT 3
14758: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
14759: LD_EXP 8
14763: PUSH
14764: LD_INT 10
14766: PUSH
14767: LD_INT 8
14769: PUSH
14770: LD_INT 6
14772: PUSH
14773: LD_INT 5
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: PUSH
14782: LD_OWVAR 67
14786: ARRAY
14787: LESS
14788: IFFALSE 14867
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
14790: LD_INT 21
14792: PPUSH
14793: LD_INT 1
14795: PPUSH
14796: LD_INT 1
14798: PPUSH
14799: LD_INT 51
14801: PPUSH
14802: LD_INT 12
14804: PPUSH
14805: CALL 34277 0 5
// veh := CreateVehicle ;
14809: LD_ADDR_VAR 0 6
14813: PUSH
14814: CALL_OW 45
14818: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
14819: LD_VAR 0 6
14823: PPUSH
14824: LD_INT 269
14826: PPUSH
14827: LD_INT 66
14829: PPUSH
14830: LD_INT 4
14832: PPUSH
14833: LD_INT 0
14835: PPUSH
14836: CALL 69279 0 5
// SetLives ( veh , 333 ) ;
14840: LD_VAR 0 6
14844: PPUSH
14845: LD_INT 333
14847: PPUSH
14848: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
14852: LD_VAR 0 6
14856: PPUSH
14857: LD_INT 2
14859: PPUSH
14860: LD_INT 100
14862: PPUSH
14863: CALL_OW 290
// end ; end ;
14867: LD_VAR 0 1
14871: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
14872: LD_EXP 55
14876: PUSH
14877: LD_EXP 55
14881: PPUSH
14882: CALL_OW 255
14886: PUSH
14887: LD_INT 3
14889: EQUAL
14890: AND
14891: IFFALSE 15054
14893: GO 14895
14895: DISABLE
14896: LD_INT 0
14898: PPUSH
// begin enable ;
14899: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
14900: LD_INT 81
14902: PUSH
14903: LD_INT 3
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: PUSH
14910: LD_INT 91
14912: PUSH
14913: LD_EXP 55
14917: PUSH
14918: LD_INT 15
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: LIST
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: PPUSH
14930: CALL_OW 69
14934: IFFALSE 15014
// begin if not IsDrivenBy ( ruBlockadeTank ) then
14936: LD_EXP 55
14940: PPUSH
14941: CALL_OW 311
14945: NOT
14946: IFFALSE 15012
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
14948: LD_ADDR_VAR 0 1
14952: PUSH
14953: LD_INT 22
14955: PUSH
14956: LD_INT 3
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: PUSH
14963: LD_INT 21
14965: PUSH
14966: LD_INT 1
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PPUSH
14977: CALL_OW 69
14981: PPUSH
14982: LD_EXP 55
14986: PPUSH
14987: CALL_OW 74
14991: ST_TO_ADDR
// if driver then
14992: LD_VAR 0 1
14996: IFFALSE 15012
// ComEnterUnit ( driver , ruBlockadeTank ) ;
14998: LD_VAR 0 1
15002: PPUSH
15003: LD_EXP 55
15007: PPUSH
15008: CALL_OW 120
// end ; exit ;
15012: GO 15054
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
15014: LD_EXP 55
15018: PPUSH
15019: CALL_OW 256
15023: PUSH
15024: LD_INT 1000
15026: LESS
15027: PUSH
15028: LD_EXP 55
15032: PPUSH
15033: CALL_OW 311
15037: AND
15038: IFFALSE 15054
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
15040: LD_EXP 55
15044: PPUSH
15045: CALL_OW 311
15049: PPUSH
15050: CALL 68839 0 1
// end ;
15054: PPOPN 1
15056: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
15057: LD_EXP 57
15061: PPUSH
15062: LD_INT 3
15064: PUSH
15065: LD_INT 24
15067: PUSH
15068: LD_INT 1000
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PPUSH
15079: CALL_OW 72
15083: PUSH
15084: LD_EXP 57
15088: PPUSH
15089: LD_INT 25
15091: PUSH
15092: LD_INT 4
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: PUSH
15099: LD_INT 50
15101: PUSH
15102: EMPTY
15103: LIST
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PPUSH
15109: CALL_OW 72
15113: AND
15114: IFFALSE 15302
15116: GO 15118
15118: DISABLE
15119: LD_INT 0
15121: PPUSH
15122: PPUSH
15123: PPUSH
// begin enable ;
15124: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
15125: LD_ADDR_VAR 0 3
15129: PUSH
15130: LD_EXP 57
15134: PPUSH
15135: LD_INT 3
15137: PUSH
15138: LD_INT 24
15140: PUSH
15141: LD_INT 1000
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: PPUSH
15152: CALL_OW 72
15156: PPUSH
15157: LD_INT 1
15159: PPUSH
15160: CALL 69079 0 2
15164: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
15165: LD_ADDR_VAR 0 2
15169: PUSH
15170: LD_EXP 57
15174: PPUSH
15175: LD_INT 25
15177: PUSH
15178: LD_INT 4
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: PUSH
15185: LD_INT 50
15187: PUSH
15188: EMPTY
15189: LIST
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PPUSH
15195: CALL_OW 72
15199: PUSH
15200: LD_INT 1
15202: ARRAY
15203: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
15204: LD_VAR 0 2
15208: PPUSH
15209: LD_VAR 0 3
15213: PUSH
15214: LD_INT 1
15216: ARRAY
15217: PPUSH
15218: CALL 64420 0 2
15222: NOT
15223: IFFALSE 15302
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
15225: LD_VAR 0 3
15229: PUSH
15230: LD_INT 1
15232: ARRAY
15233: PPUSH
15234: LD_INT 9
15236: PPUSH
15237: CALL_OW 308
15241: NOT
15242: IFFALSE 15260
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
15244: LD_VAR 0 3
15248: PUSH
15249: LD_INT 1
15251: ARRAY
15252: PPUSH
15253: LD_INT 9
15255: PPUSH
15256: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
15260: LD_VAR 0 2
15264: PPUSH
15265: LD_VAR 0 3
15269: PUSH
15270: LD_INT 1
15272: ARRAY
15273: PPUSH
15274: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
15278: LD_VAR 0 2
15282: PPUSH
15283: LD_INT 179
15285: PPUSH
15286: LD_INT 113
15288: PPUSH
15289: CALL_OW 171
// AddComHold ( sci ) ;
15293: LD_VAR 0 2
15297: PPUSH
15298: CALL_OW 200
// end ; end ;
15302: PPOPN 3
15304: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
15305: LD_INT 2
15307: PPUSH
15308: LD_INT 52
15310: PPUSH
15311: CALL_OW 292
15315: IFFALSE 15420
15317: GO 15319
15319: DISABLE
15320: LD_INT 0
15322: PPUSH
15323: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
15324: LD_ADDR_VAR 0 2
15328: PUSH
15329: LD_EXP 59
15333: PPUSH
15334: LD_INT 25
15336: PUSH
15337: LD_INT 1
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PUSH
15344: LD_INT 50
15346: PUSH
15347: EMPTY
15348: LIST
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: PPUSH
15354: CALL_OW 72
15358: ST_TO_ADDR
// if not tmp then
15359: LD_VAR 0 2
15363: NOT
15364: IFFALSE 15368
// exit ;
15366: GO 15420
// for i in tmp do
15368: LD_ADDR_VAR 0 1
15372: PUSH
15373: LD_VAR 0 2
15377: PUSH
15378: FOR_IN
15379: IFFALSE 15418
// begin if IsInUnit ( i ) then
15381: LD_VAR 0 1
15385: PPUSH
15386: CALL_OW 310
15390: IFFALSE 15401
// ComExitBuilding ( i ) ;
15392: LD_VAR 0 1
15396: PPUSH
15397: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
15401: LD_VAR 0 1
15405: PPUSH
15406: LD_INT 84
15408: PPUSH
15409: LD_INT 133
15411: PPUSH
15412: CALL_OW 174
// end ;
15416: GO 15378
15418: POP
15419: POP
// end ;
15420: PPOPN 2
15422: END
// every 0 0$10 trigger leninSpotted do var i , tmp , weapon ;
15423: LD_EXP 14
15427: IFFALSE 15608
15429: GO 15431
15431: DISABLE
15432: LD_INT 0
15434: PPUSH
15435: PPUSH
15436: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
15437: LD_ADDR_VAR 0 2
15441: PUSH
15442: LD_INT 72
15444: PUSH
15445: LD_INT 12
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket_launcher , ru_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] ] [ Difficulty ] ;
15452: LD_ADDR_VAR 0 3
15456: PUSH
15457: LD_INT 44
15459: PUSH
15460: LD_INT 43
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: LD_INT 45
15469: PUSH
15470: LD_INT 44
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: LD_INT 45
15479: PUSH
15480: LD_INT 46
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 45
15489: PUSH
15490: LD_INT 46
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: PUSH
15503: LD_OWVAR 67
15507: ARRAY
15508: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
15509: LD_ADDR_VAR 0 1
15513: PUSH
15514: DOUBLE
15515: LD_INT 1
15517: DEC
15518: ST_TO_ADDR
15519: LD_INT 1
15521: PUSH
15522: LD_INT 2
15524: PUSH
15525: LD_INT 2
15527: PUSH
15528: LD_INT 3
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: PUSH
15537: LD_OWVAR 67
15541: ARRAY
15542: PUSH
15543: FOR_TO
15544: IFFALSE 15606
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
15546: LD_VAR 0 2
15550: PPUSH
15551: LD_INT 22
15553: PUSH
15554: LD_INT 23
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PUSH
15561: LD_VAR 0 1
15565: PUSH
15566: LD_INT 2
15568: MOD
15569: PUSH
15570: LD_INT 1
15572: PLUS
15573: ARRAY
15574: PPUSH
15575: LD_INT 1
15577: PPUSH
15578: LD_INT 1
15580: PPUSH
15581: LD_VAR 0 3
15585: PUSH
15586: LD_VAR 0 1
15590: PUSH
15591: LD_INT 2
15593: MOD
15594: PUSH
15595: LD_INT 1
15597: PLUS
15598: ARRAY
15599: PPUSH
15600: CALL_OW 185
15604: GO 15543
15606: POP
15607: POP
// end ;
15608: PPOPN 3
15610: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
15611: LD_EXP 11
15615: IFFALSE 16764
15617: GO 15619
15619: DISABLE
15620: LD_INT 0
15622: PPUSH
15623: PPUSH
15624: PPUSH
15625: PPUSH
15626: PPUSH
15627: PPUSH
// begin enable ;
15628: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
15629: LD_ADDR_VAR 0 6
15633: PUSH
15634: LD_INT 10
15636: PPUSH
15637: LD_INT 81
15639: PUSH
15640: LD_INT 3
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PPUSH
15647: CALL_OW 70
15651: ST_TO_ADDR
// if ruSpecialVehicleGroup then
15652: LD_EXP 60
15656: IFFALSE 15922
// begin for i in ruSpecialVehicleGroup do
15658: LD_ADDR_VAR 0 1
15662: PUSH
15663: LD_EXP 60
15667: PUSH
15668: FOR_IN
15669: IFFALSE 15920
// begin if enemyInBase then
15671: LD_VAR 0 6
15675: IFFALSE 15918
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
15677: LD_VAR 0 1
15681: PPUSH
15682: CALL_OW 256
15686: PUSH
15687: LD_INT 500
15689: GREATER
15690: PUSH
15691: LD_VAR 0 1
15695: PPUSH
15696: CALL_OW 110
15700: PUSH
15701: LD_INT 0
15703: EQUAL
15704: AND
15705: IFFALSE 15731
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
15707: LD_VAR 0 1
15711: PPUSH
15712: LD_VAR 0 6
15716: PPUSH
15717: LD_VAR 0 1
15721: PPUSH
15722: CALL_OW 74
15726: PPUSH
15727: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
15731: LD_VAR 0 1
15735: PPUSH
15736: CALL_OW 256
15740: PUSH
15741: LD_INT 500
15743: LESSEQUAL
15744: PUSH
15745: LD_VAR 0 1
15749: PPUSH
15750: CALL_OW 110
15754: PUSH
15755: LD_INT 0
15757: EQUAL
15758: AND
15759: IFFALSE 15788
// begin SetTag ( i , 1 ) ;
15761: LD_VAR 0 1
15765: PPUSH
15766: LD_INT 1
15768: PPUSH
15769: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
15773: LD_VAR 0 1
15777: PPUSH
15778: LD_INT 83
15780: PPUSH
15781: LD_INT 134
15783: PPUSH
15784: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
15788: LD_VAR 0 1
15792: PPUSH
15793: CALL_OW 256
15797: PUSH
15798: LD_INT 1000
15800: LESS
15801: PUSH
15802: LD_VAR 0 1
15806: PPUSH
15807: CALL_OW 110
15811: PUSH
15812: LD_INT 1
15814: EQUAL
15815: AND
15816: PUSH
15817: LD_VAR 0 1
15821: PPUSH
15822: LD_INT 83
15824: PPUSH
15825: LD_INT 134
15827: PPUSH
15828: CALL_OW 297
15832: PUSH
15833: LD_INT 6
15835: LESS
15836: AND
15837: IFFALSE 15865
// begin SetFuel ( i , 100 ) ;
15839: LD_VAR 0 1
15843: PPUSH
15844: LD_INT 100
15846: PPUSH
15847: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
15851: LD_VAR 0 1
15855: PPUSH
15856: CALL_OW 310
15860: PPUSH
15861: CALL 68959 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
15865: LD_VAR 0 1
15869: PPUSH
15870: CALL_OW 256
15874: PUSH
15875: LD_INT 1000
15877: EQUAL
15878: PUSH
15879: LD_VAR 0 1
15883: PPUSH
15884: CALL_OW 110
15888: PUSH
15889: LD_INT 1
15891: EQUAL
15892: AND
15893: PUSH
15894: LD_VAR 0 1
15898: PPUSH
15899: CALL_OW 311
15903: AND
15904: IFFALSE 15918
// SetTag ( i , 0 ) ;
15906: LD_VAR 0 1
15910: PPUSH
15911: LD_INT 0
15913: PPUSH
15914: CALL_OW 109
// end ; end ;
15918: GO 15668
15920: POP
15921: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
15922: LD_ADDR_VAR 0 5
15926: PUSH
15927: LD_EXP 59
15931: PPUSH
15932: LD_INT 25
15934: PUSH
15935: LD_INT 4
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PPUSH
15942: CALL_OW 72
15946: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15947: LD_ADDR_VAR 0 4
15951: PUSH
15952: LD_EXP 59
15956: PPUSH
15957: LD_INT 92
15959: PUSH
15960: LD_INT 92
15962: PUSH
15963: LD_INT 155
15965: PUSH
15966: LD_INT 12
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 3
15977: PUSH
15978: LD_INT 24
15980: PUSH
15981: LD_INT 1000
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PPUSH
15996: CALL_OW 72
16000: ST_TO_ADDR
// if sci then
16001: LD_VAR 0 5
16005: IFFALSE 16138
// begin if hurt then
16007: LD_VAR 0 4
16011: IFFALSE 16084
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
16013: LD_VAR 0 5
16017: PPUSH
16018: LD_INT 3
16020: PUSH
16021: LD_INT 54
16023: PUSH
16024: EMPTY
16025: LIST
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PPUSH
16031: CALL_OW 72
16035: IFFALSE 16064
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
16037: LD_VAR 0 5
16041: PPUSH
16042: LD_INT 3
16044: PUSH
16045: LD_INT 54
16047: PUSH
16048: EMPTY
16049: LIST
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PPUSH
16055: CALL_OW 72
16059: PPUSH
16060: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
16064: LD_VAR 0 5
16068: PPUSH
16069: LD_VAR 0 4
16073: PUSH
16074: LD_INT 1
16076: ARRAY
16077: PPUSH
16078: CALL_OW 188
// end else
16082: GO 16138
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
16084: LD_VAR 0 5
16088: PPUSH
16089: LD_INT 3
16091: PUSH
16092: LD_INT 54
16094: PUSH
16095: EMPTY
16096: LIST
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PPUSH
16102: CALL_OW 72
16106: IFFALSE 16138
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
16108: LD_VAR 0 5
16112: PPUSH
16113: LD_INT 3
16115: PUSH
16116: LD_INT 54
16118: PUSH
16119: EMPTY
16120: LIST
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: PPUSH
16126: CALL_OW 72
16130: PPUSH
16131: LD_INT 17
16133: PPUSH
16134: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16138: LD_ADDR_VAR 0 3
16142: PUSH
16143: LD_INT 10
16145: PPUSH
16146: LD_INT 21
16148: PUSH
16149: LD_INT 3
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 3
16158: PUSH
16159: LD_INT 24
16161: PUSH
16162: LD_INT 1000
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PPUSH
16177: CALL_OW 70
16181: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
16182: LD_ADDR_VAR 0 2
16186: PUSH
16187: LD_EXP 59
16191: PPUSH
16192: LD_INT 25
16194: PUSH
16195: LD_INT 2
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PPUSH
16202: CALL_OW 72
16206: PUSH
16207: LD_INT 22
16209: PUSH
16210: LD_INT 3
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PUSH
16217: LD_INT 34
16219: PUSH
16220: LD_INT 52
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PPUSH
16231: CALL_OW 69
16235: UNION
16236: ST_TO_ADDR
// if not tmp then
16237: LD_VAR 0 2
16241: NOT
16242: IFFALSE 16246
// exit ;
16244: GO 16764
// for i in tmp do
16246: LD_ADDR_VAR 0 1
16250: PUSH
16251: LD_VAR 0 2
16255: PUSH
16256: FOR_IN
16257: IFFALSE 16762
// begin if GetClass ( i ) = 2 then
16259: LD_VAR 0 1
16263: PPUSH
16264: CALL_OW 257
16268: PUSH
16269: LD_INT 2
16271: EQUAL
16272: IFFALSE 16495
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16274: LD_VAR 0 1
16278: PPUSH
16279: CALL_OW 256
16283: PUSH
16284: LD_INT 1000
16286: EQUAL
16287: PUSH
16288: LD_VAR 0 1
16292: PPUSH
16293: CALL_OW 110
16297: PUSH
16298: LD_INT 1
16300: EQUAL
16301: AND
16302: IFFALSE 16316
// SetTag ( i , 0 ) ;
16304: LD_VAR 0 1
16308: PPUSH
16309: LD_INT 0
16311: PPUSH
16312: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16316: LD_VAR 0 1
16320: PPUSH
16321: CALL_OW 256
16325: PUSH
16326: LD_INT 500
16328: LESSEQUAL
16329: PUSH
16330: LD_VAR 0 1
16334: PPUSH
16335: CALL_OW 110
16339: PUSH
16340: LD_INT 0
16342: EQUAL
16343: AND
16344: IFFALSE 16373
// begin SetTag ( i , 1 ) ;
16346: LD_VAR 0 1
16350: PPUSH
16351: LD_INT 1
16353: PPUSH
16354: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
16358: LD_VAR 0 1
16362: PPUSH
16363: LD_INT 92
16365: PPUSH
16366: LD_INT 155
16368: PPUSH
16369: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
16373: LD_VAR 0 3
16377: PUSH
16378: LD_VAR 0 1
16382: PPUSH
16383: CALL_OW 256
16387: PUSH
16388: LD_INT 500
16390: GREATER
16391: AND
16392: PUSH
16393: LD_VAR 0 1
16397: PPUSH
16398: CALL_OW 110
16402: PUSH
16403: LD_INT 0
16405: EQUAL
16406: AND
16407: PUSH
16408: LD_VAR 0 1
16412: PPUSH
16413: CALL_OW 314
16417: NOT
16418: AND
16419: IFFALSE 16493
// begin if b then
16421: LD_VAR 0 3
16425: IFFALSE 16457
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16427: LD_VAR 0 1
16431: PPUSH
16432: LD_VAR 0 3
16436: PUSH
16437: LD_INT 1
16439: PPUSH
16440: LD_VAR 0 3
16444: PPUSH
16445: CALL_OW 12
16449: ARRAY
16450: PPUSH
16451: CALL_OW 130
16455: GO 16493
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16457: LD_VAR 0 1
16461: PPUSH
16462: LD_INT 94
16464: PPUSH
16465: LD_INT 165
16467: PPUSH
16468: CALL_OW 297
16472: PUSH
16473: LD_INT 8
16475: GREATER
16476: IFFALSE 16493
// ComMoveXY ( i , 94 , 165 ) ;
16478: LD_VAR 0 1
16482: PPUSH
16483: LD_INT 94
16485: PPUSH
16486: LD_INT 165
16488: PPUSH
16489: CALL_OW 111
// end ; end else
16493: GO 16760
// if GetWeapon ( i ) = ru_crane then
16495: LD_VAR 0 1
16499: PPUSH
16500: CALL_OW 264
16504: PUSH
16505: LD_INT 52
16507: EQUAL
16508: IFFALSE 16760
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16510: LD_VAR 0 1
16514: PPUSH
16515: CALL_OW 256
16519: PUSH
16520: LD_INT 1000
16522: EQUAL
16523: PUSH
16524: LD_VAR 0 1
16528: PPUSH
16529: CALL_OW 110
16533: PUSH
16534: LD_INT 1
16536: EQUAL
16537: AND
16538: IFFALSE 16564
// begin SetTag ( i , 0 ) ;
16540: LD_VAR 0 1
16544: PPUSH
16545: LD_INT 0
16547: PPUSH
16548: CALL_OW 109
// SetFuel ( i , 100 ) ;
16552: LD_VAR 0 1
16556: PPUSH
16557: LD_INT 100
16559: PPUSH
16560: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16564: LD_VAR 0 1
16568: PPUSH
16569: CALL_OW 256
16573: PUSH
16574: LD_INT 500
16576: LESSEQUAL
16577: PUSH
16578: LD_VAR 0 1
16582: PPUSH
16583: CALL_OW 110
16587: PUSH
16588: LD_INT 0
16590: EQUAL
16591: AND
16592: IFFALSE 16635
// begin SetTag ( i , 1 ) ;
16594: LD_VAR 0 1
16598: PPUSH
16599: LD_INT 1
16601: PPUSH
16602: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
16606: LD_VAR 0 1
16610: PPUSH
16611: LD_INT 83
16613: PPUSH
16614: LD_INT 135
16616: PPUSH
16617: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
16621: LD_VAR 0 1
16625: PPUSH
16626: CALL_OW 310
16630: PPUSH
16631: CALL 68959 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
16635: LD_VAR 0 1
16639: PPUSH
16640: CALL_OW 256
16644: PUSH
16645: LD_INT 500
16647: GREATER
16648: PUSH
16649: LD_VAR 0 1
16653: PPUSH
16654: CALL_OW 110
16658: PUSH
16659: LD_INT 0
16661: EQUAL
16662: AND
16663: PUSH
16664: LD_VAR 0 1
16668: PPUSH
16669: CALL_OW 311
16673: AND
16674: PUSH
16675: LD_VAR 0 1
16679: PPUSH
16680: CALL_OW 314
16684: NOT
16685: AND
16686: IFFALSE 16760
// begin if b then
16688: LD_VAR 0 3
16692: IFFALSE 16724
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16694: LD_VAR 0 1
16698: PPUSH
16699: LD_VAR 0 3
16703: PUSH
16704: LD_INT 1
16706: PPUSH
16707: LD_VAR 0 3
16711: PPUSH
16712: CALL_OW 12
16716: ARRAY
16717: PPUSH
16718: CALL_OW 130
16722: GO 16760
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16724: LD_VAR 0 1
16728: PPUSH
16729: LD_INT 94
16731: PPUSH
16732: LD_INT 165
16734: PPUSH
16735: CALL_OW 297
16739: PUSH
16740: LD_INT 8
16742: GREATER
16743: IFFALSE 16760
// ComMoveXY ( i , 94 , 165 ) ;
16745: LD_VAR 0 1
16749: PPUSH
16750: LD_INT 94
16752: PPUSH
16753: LD_INT 165
16755: PPUSH
16756: CALL_OW 111
// end ; end ; end ;
16760: GO 16256
16762: POP
16763: POP
// end ;
16764: PPOPN 6
16766: END
// every 10 10$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp , tmp2 ;
16767: LD_EXP 23
16771: NOT
16772: PUSH
16773: LD_EXP 27
16777: NOT
16778: AND
16779: IFFALSE 17694
16781: GO 16783
16783: DISABLE
16784: LD_INT 0
16786: PPUSH
16787: PPUSH
16788: PPUSH
16789: PPUSH
16790: PPUSH
// begin enable ;
16791: ENABLE
// if Prob ( [ 35 , 45 , 55 , 60 ] [ Difficulty ] ) then
16792: LD_INT 35
16794: PUSH
16795: LD_INT 45
16797: PUSH
16798: LD_INT 55
16800: PUSH
16801: LD_INT 60
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: PUSH
16810: LD_OWVAR 67
16814: ARRAY
16815: PPUSH
16816: CALL_OW 13
16820: IFFALSE 16836
// waveStrength := waveStrength + 1 ;
16822: LD_ADDR_EXP 62
16826: PUSH
16827: LD_EXP 62
16831: PUSH
16832: LD_INT 1
16834: PLUS
16835: ST_TO_ADDR
// if waveStrength > [ 2 , 3 , 4 , 4 ] [ Difficulty ] then
16836: LD_EXP 62
16840: PUSH
16841: LD_INT 2
16843: PUSH
16844: LD_INT 3
16846: PUSH
16847: LD_INT 4
16849: PUSH
16850: LD_INT 4
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: PUSH
16859: LD_OWVAR 67
16863: ARRAY
16864: GREATER
16865: IFFALSE 16897
// begin waveStrength := waveStrength + 2 ;
16867: LD_ADDR_EXP 62
16871: PUSH
16872: LD_EXP 62
16876: PUSH
16877: LD_INT 2
16879: PLUS
16880: ST_TO_ADDR
// disableAttackOnHeike := true ;
16881: LD_ADDR_EXP 27
16885: PUSH
16886: LD_INT 1
16888: ST_TO_ADDR
// disable ;
16889: DISABLE
// wait ( 3 3$00 ) ;
16890: LD_INT 6300
16892: PPUSH
16893: CALL_OW 67
// end ; for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
16897: LD_ADDR_VAR 0 1
16901: PUSH
16902: DOUBLE
16903: LD_INT 1
16905: DEC
16906: ST_TO_ADDR
16907: LD_INT 2
16909: PUSH
16910: LD_INT 2
16912: PUSH
16913: LD_INT 3
16915: PUSH
16916: LD_INT 4
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: PUSH
16925: LD_OWVAR 67
16929: ARRAY
16930: PUSH
16931: FOR_TO
16932: IFFALSE 17093
// begin InitHc ;
16934: CALL_OW 19
// InitVc ;
16938: CALL_OW 20
// uc_side := 3 ;
16942: LD_ADDR_OWVAR 20
16946: PUSH
16947: LD_INT 3
16949: ST_TO_ADDR
// uc_nation := 3 ;
16950: LD_ADDR_OWVAR 21
16954: PUSH
16955: LD_INT 3
16957: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
16958: LD_INT 0
16960: PPUSH
16961: LD_INT 1
16963: PPUSH
16964: LD_OWVAR 67
16968: PUSH
16969: LD_INT 2
16971: PLUS
16972: PPUSH
16973: CALL_OW 380
// un := CreateHuman ;
16977: LD_ADDR_VAR 0 2
16981: PUSH
16982: CALL_OW 44
16986: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
16987: LD_VAR 0 2
16991: PPUSH
16992: LD_INT 160
16994: PPUSH
16995: LD_INT 3
16997: PPUSH
16998: LD_INT 2
17000: PPUSH
17001: LD_INT 0
17003: PPUSH
17004: CALL 69279 0 5
// SetClass ( un , class_bazooker ) ;
17008: LD_VAR 0 2
17012: PPUSH
17013: LD_INT 9
17015: PPUSH
17016: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17020: LD_ADDR_EXP 61
17024: PUSH
17025: LD_EXP 61
17029: PPUSH
17030: LD_EXP 61
17034: PUSH
17035: LD_INT 1
17037: PLUS
17038: PPUSH
17039: LD_VAR 0 2
17043: PPUSH
17044: CALL_OW 1
17048: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
17049: LD_VAR 0 2
17053: PPUSH
17054: LD_INT 177
17056: PPUSH
17057: LD_INT 17
17059: PPUSH
17060: CALL_OW 111
// wait ( 0 0$2 ) ;
17064: LD_INT 70
17066: PPUSH
17067: CALL_OW 67
// tmp2 := Join ( tmp2 , un ) ;
17071: LD_ADDR_VAR 0 5
17075: PUSH
17076: LD_VAR 0 5
17080: PPUSH
17081: LD_VAR 0 2
17085: PPUSH
17086: CALL 67139 0 2
17090: ST_TO_ADDR
// end ;
17091: GO 16931
17093: POP
17094: POP
// AddComAgressiveMove ( tmp2 , 196 , 53 ) ;
17095: LD_VAR 0 5
17099: PPUSH
17100: LD_INT 196
17102: PPUSH
17103: LD_INT 53
17105: PPUSH
17106: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 199 , 62 ) ;
17110: LD_VAR 0 5
17114: PPUSH
17115: LD_INT 199
17117: PPUSH
17118: LD_INT 62
17120: PPUSH
17121: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 205 , 75 ) ;
17125: LD_VAR 0 5
17129: PPUSH
17130: LD_INT 205
17132: PPUSH
17133: LD_INT 75
17135: PPUSH
17136: CALL_OW 174
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + waveStrength do
17140: LD_ADDR_VAR 0 1
17144: PUSH
17145: DOUBLE
17146: LD_INT 1
17148: DEC
17149: ST_TO_ADDR
17150: LD_INT 2
17152: PUSH
17153: LD_INT 3
17155: PUSH
17156: LD_INT 3
17158: PUSH
17159: LD_INT 4
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: PUSH
17168: LD_OWVAR 67
17172: ARRAY
17173: PUSH
17174: LD_EXP 62
17178: PLUS
17179: PUSH
17180: FOR_TO
17181: IFFALSE 17490
// begin InitHc ;
17183: CALL_OW 19
// InitVc ;
17187: CALL_OW 20
// uc_side := 3 ;
17191: LD_ADDR_OWVAR 20
17195: PUSH
17196: LD_INT 3
17198: ST_TO_ADDR
// uc_nation := 3 ;
17199: LD_ADDR_OWVAR 21
17203: PUSH
17204: LD_INT 3
17206: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
17207: LD_INT 22
17209: PUSH
17210: LD_INT 23
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 1
17219: PPUSH
17220: LD_INT 2
17222: PPUSH
17223: CALL_OW 12
17227: ARRAY
17228: PPUSH
17229: LD_INT 1
17231: PPUSH
17232: LD_INT 1
17234: PPUSH
17235: LD_INT 44
17237: PUSH
17238: LD_INT 45
17240: PUSH
17241: LD_INT 43
17243: PUSH
17244: LD_INT 42
17246: PUSH
17247: LD_INT 44
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: PUSH
17257: LD_INT 1
17259: PPUSH
17260: LD_INT 5
17262: PPUSH
17263: CALL_OW 12
17267: ARRAY
17268: PPUSH
17269: LD_INT 99
17271: PPUSH
17272: CALL 34277 0 5
// veh := CreateVehicle ;
17276: LD_ADDR_VAR 0 3
17280: PUSH
17281: CALL_OW 45
17285: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
17286: LD_VAR 0 3
17290: PPUSH
17291: LD_INT 160
17293: PPUSH
17294: LD_INT 3
17296: PPUSH
17297: LD_INT 2
17299: PPUSH
17300: LD_INT 0
17302: PPUSH
17303: CALL 69279 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17307: LD_ADDR_EXP 61
17311: PUSH
17312: LD_EXP 61
17316: PPUSH
17317: LD_EXP 61
17321: PUSH
17322: LD_INT 1
17324: PLUS
17325: PPUSH
17326: LD_VAR 0 3
17330: PPUSH
17331: CALL_OW 1
17335: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
17336: LD_INT 0
17338: PPUSH
17339: LD_INT 3
17341: PPUSH
17342: LD_OWVAR 67
17346: PUSH
17347: LD_INT 2
17349: PLUS
17350: PPUSH
17351: CALL_OW 380
// un := CreateHuman ;
17355: LD_ADDR_VAR 0 2
17359: PUSH
17360: CALL_OW 44
17364: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17365: LD_VAR 0 2
17369: PPUSH
17370: LD_VAR 0 3
17374: PPUSH
17375: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17379: LD_ADDR_EXP 61
17383: PUSH
17384: LD_EXP 61
17388: PPUSH
17389: LD_EXP 61
17393: PUSH
17394: LD_INT 1
17396: PLUS
17397: PPUSH
17398: LD_VAR 0 2
17402: PPUSH
17403: CALL_OW 1
17407: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
17408: LD_VAR 0 2
17412: PPUSH
17413: LD_INT 177
17415: PPUSH
17416: LD_INT 17
17418: PPUSH
17419: CALL_OW 111
// wait ( 0 0$2 ) ;
17423: LD_INT 70
17425: PPUSH
17426: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17430: LD_ADDR_VAR 0 4
17434: PUSH
17435: LD_VAR 0 4
17439: PPUSH
17440: LD_VAR 0 4
17444: PUSH
17445: LD_INT 1
17447: PLUS
17448: PPUSH
17449: LD_VAR 0 3
17453: PPUSH
17454: CALL_OW 1
17458: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
17459: LD_ADDR_VAR 0 4
17463: PUSH
17464: LD_VAR 0 4
17468: PPUSH
17469: LD_VAR 0 4
17473: PUSH
17474: LD_INT 1
17476: PLUS
17477: PPUSH
17478: LD_VAR 0 2
17482: PPUSH
17483: CALL_OW 1
17487: ST_TO_ADDR
// end ;
17488: GO 17180
17490: POP
17491: POP
// for i in tmp do
17492: LD_ADDR_VAR 0 1
17496: PUSH
17497: LD_VAR 0 4
17501: PUSH
17502: FOR_IN
17503: IFFALSE 17584
// AgressiveMove ( i , [ [ 206 , 37 ] , [ 239 , 53 ] , [ 260 , 67 ] , [ 263 , 79 ] , [ 257 , 105 ] , [ 227 , 97 ] ] ) ;
17505: LD_VAR 0 1
17509: PPUSH
17510: LD_INT 206
17512: PUSH
17513: LD_INT 37
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: LD_INT 239
17522: PUSH
17523: LD_INT 53
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PUSH
17530: LD_INT 260
17532: PUSH
17533: LD_INT 67
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PUSH
17540: LD_INT 263
17542: PUSH
17543: LD_INT 79
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 257
17552: PUSH
17553: LD_INT 105
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 227
17562: PUSH
17563: LD_INT 97
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: PPUSH
17578: CALL 69743 0 2
17582: GO 17502
17584: POP
17585: POP
// repeat wait ( 0 0$2 ) ;
17586: LD_INT 70
17588: PPUSH
17589: CALL_OW 67
// for i in tmp do
17593: LD_ADDR_VAR 0 1
17597: PUSH
17598: LD_VAR 0 4
17602: PUSH
17603: FOR_IN
17604: IFFALSE 17671
// if IsDead ( i ) then
17606: LD_VAR 0 1
17610: PPUSH
17611: CALL_OW 301
17615: IFFALSE 17635
// tmp := tmp diff i else
17617: LD_ADDR_VAR 0 4
17621: PUSH
17622: LD_VAR 0 4
17626: PUSH
17627: LD_VAR 0 1
17631: DIFF
17632: ST_TO_ADDR
17633: GO 17669
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
17635: LD_VAR 0 1
17639: PPUSH
17640: LD_INT 81
17642: PUSH
17643: LD_INT 3
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PPUSH
17650: CALL_OW 69
17654: PPUSH
17655: LD_VAR 0 1
17659: PPUSH
17660: CALL_OW 74
17664: PPUSH
17665: CALL_OW 115
17669: GO 17603
17671: POP
17672: POP
// until not tmp ;
17673: LD_VAR 0 4
17677: NOT
17678: IFFALSE 17586
// if firstAttack then
17680: LD_EXP 28
17684: IFFALSE 17694
// firstAttack := false ;
17686: LD_ADDR_EXP 28
17690: PUSH
17691: LD_INT 0
17693: ST_TO_ADDR
// end ;
17694: PPOPN 5
17696: END
// every 12 12$00 + 3 3$00 trigger not omarAttack and not rolfAttack and bergkampfArrived and not disableAttackOnHeike do var i , un , veh , tmp ;
17697: LD_EXP 23
17701: NOT
17702: PUSH
17703: LD_EXP 32
17707: NOT
17708: AND
17709: PUSH
17710: LD_EXP 3
17714: AND
17715: PUSH
17716: LD_EXP 27
17720: NOT
17721: AND
17722: IFFALSE 18639
17724: GO 17726
17726: DISABLE
17727: LD_INT 0
17729: PPUSH
17730: PPUSH
17731: PPUSH
17732: PPUSH
// begin enable ;
17733: ENABLE
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
17734: LD_ADDR_VAR 0 1
17738: PUSH
17739: DOUBLE
17740: LD_INT 1
17742: DEC
17743: ST_TO_ADDR
17744: LD_INT 1
17746: PUSH
17747: LD_INT 2
17749: PUSH
17750: LD_INT 2
17752: PUSH
17753: LD_INT 3
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: PUSH
17762: LD_OWVAR 67
17766: ARRAY
17767: PUSH
17768: FOR_TO
17769: IFFALSE 18070
// begin InitHc ;
17771: CALL_OW 19
// InitVc ;
17775: CALL_OW 20
// uc_side := 3 ;
17779: LD_ADDR_OWVAR 20
17783: PUSH
17784: LD_INT 3
17786: ST_TO_ADDR
// uc_nation := 3 ;
17787: LD_ADDR_OWVAR 21
17791: PUSH
17792: LD_INT 3
17794: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
17795: LD_INT 22
17797: PUSH
17798: LD_INT 23
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 1
17807: PPUSH
17808: LD_INT 2
17810: PPUSH
17811: CALL_OW 12
17815: ARRAY
17816: PPUSH
17817: LD_INT 1
17819: PPUSH
17820: LD_INT 1
17822: PPUSH
17823: LD_INT 44
17825: PUSH
17826: LD_INT 43
17828: PUSH
17829: LD_INT 42
17831: PUSH
17832: LD_INT 44
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 1
17843: PPUSH
17844: LD_INT 4
17846: PPUSH
17847: CALL_OW 12
17851: ARRAY
17852: PPUSH
17853: LD_INT 99
17855: PPUSH
17856: CALL 34277 0 5
// veh := CreateVehicle ;
17860: LD_ADDR_VAR 0 3
17864: PUSH
17865: CALL_OW 45
17869: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
17870: LD_VAR 0 3
17874: PPUSH
17875: LD_INT 5
17877: PPUSH
17878: LD_INT 3
17880: PPUSH
17881: LD_INT 2
17883: PPUSH
17884: LD_INT 0
17886: PPUSH
17887: CALL 69279 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17891: LD_ADDR_EXP 61
17895: PUSH
17896: LD_EXP 61
17900: PPUSH
17901: LD_EXP 61
17905: PUSH
17906: LD_INT 1
17908: PLUS
17909: PPUSH
17910: LD_VAR 0 3
17914: PPUSH
17915: CALL_OW 1
17919: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
17920: LD_INT 0
17922: PPUSH
17923: LD_INT 3
17925: PPUSH
17926: LD_OWVAR 67
17930: PPUSH
17931: CALL_OW 380
// un := CreateHuman ;
17935: LD_ADDR_VAR 0 2
17939: PUSH
17940: CALL_OW 44
17944: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17945: LD_VAR 0 2
17949: PPUSH
17950: LD_VAR 0 3
17954: PPUSH
17955: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17959: LD_ADDR_EXP 61
17963: PUSH
17964: LD_EXP 61
17968: PPUSH
17969: LD_EXP 61
17973: PUSH
17974: LD_INT 1
17976: PLUS
17977: PPUSH
17978: LD_VAR 0 2
17982: PPUSH
17983: CALL_OW 1
17987: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
17988: LD_VAR 0 2
17992: PPUSH
17993: LD_INT 23
17995: PPUSH
17996: LD_INT 7
17998: PPUSH
17999: CALL_OW 111
// wait ( 0 0$2 ) ;
18003: LD_INT 70
18005: PPUSH
18006: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18010: LD_ADDR_VAR 0 4
18014: PUSH
18015: LD_VAR 0 4
18019: PPUSH
18020: LD_VAR 0 4
18024: PUSH
18025: LD_INT 1
18027: PLUS
18028: PPUSH
18029: LD_VAR 0 3
18033: PPUSH
18034: CALL_OW 1
18038: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18039: LD_ADDR_VAR 0 4
18043: PUSH
18044: LD_VAR 0 4
18048: PPUSH
18049: LD_VAR 0 4
18053: PUSH
18054: LD_INT 1
18056: PLUS
18057: PPUSH
18058: LD_VAR 0 2
18062: PPUSH
18063: CALL_OW 1
18067: ST_TO_ADDR
// end ;
18068: GO 17768
18070: POP
18071: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
18072: LD_ADDR_VAR 0 1
18076: PUSH
18077: DOUBLE
18078: LD_INT 1
18080: DEC
18081: ST_TO_ADDR
18082: LD_INT 2
18084: PUSH
18085: LD_INT 3
18087: PUSH
18088: LD_INT 3
18090: PUSH
18091: LD_INT 4
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: PUSH
18100: LD_OWVAR 67
18104: ARRAY
18105: PUSH
18106: FOR_TO
18107: IFFALSE 18416
// begin InitHc ;
18109: CALL_OW 19
// InitVc ;
18113: CALL_OW 20
// uc_side := 3 ;
18117: LD_ADDR_OWVAR 20
18121: PUSH
18122: LD_INT 3
18124: ST_TO_ADDR
// uc_nation := 3 ;
18125: LD_ADDR_OWVAR 21
18129: PUSH
18130: LD_INT 3
18132: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
18133: LD_INT 22
18135: PUSH
18136: LD_INT 23
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 1
18145: PPUSH
18146: LD_INT 2
18148: PPUSH
18149: CALL_OW 12
18153: ARRAY
18154: PPUSH
18155: LD_INT 1
18157: PPUSH
18158: LD_INT 1
18160: PPUSH
18161: LD_INT 44
18163: PUSH
18164: LD_INT 45
18166: PUSH
18167: LD_INT 43
18169: PUSH
18170: LD_INT 42
18172: PUSH
18173: LD_INT 44
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 1
18185: PPUSH
18186: LD_INT 5
18188: PPUSH
18189: CALL_OW 12
18193: ARRAY
18194: PPUSH
18195: LD_INT 99
18197: PPUSH
18198: CALL 34277 0 5
// veh := CreateVehicle ;
18202: LD_ADDR_VAR 0 3
18206: PUSH
18207: CALL_OW 45
18211: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
18212: LD_VAR 0 3
18216: PPUSH
18217: LD_INT 127
18219: PPUSH
18220: LD_INT 243
18222: PPUSH
18223: LD_INT 0
18225: PPUSH
18226: LD_INT 0
18228: PPUSH
18229: CALL 69279 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18233: LD_ADDR_EXP 61
18237: PUSH
18238: LD_EXP 61
18242: PPUSH
18243: LD_EXP 61
18247: PUSH
18248: LD_INT 1
18250: PLUS
18251: PPUSH
18252: LD_VAR 0 3
18256: PPUSH
18257: CALL_OW 1
18261: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
18262: LD_INT 0
18264: PPUSH
18265: LD_INT 3
18267: PPUSH
18268: LD_OWVAR 67
18272: PUSH
18273: LD_INT 2
18275: PLUS
18276: PPUSH
18277: CALL_OW 380
// un := CreateHuman ;
18281: LD_ADDR_VAR 0 2
18285: PUSH
18286: CALL_OW 44
18290: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18291: LD_VAR 0 2
18295: PPUSH
18296: LD_VAR 0 3
18300: PPUSH
18301: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18305: LD_ADDR_EXP 61
18309: PUSH
18310: LD_EXP 61
18314: PPUSH
18315: LD_EXP 61
18319: PUSH
18320: LD_INT 1
18322: PLUS
18323: PPUSH
18324: LD_VAR 0 2
18328: PPUSH
18329: CALL_OW 1
18333: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
18334: LD_VAR 0 2
18338: PPUSH
18339: LD_INT 130
18341: PPUSH
18342: LD_INT 233
18344: PPUSH
18345: CALL_OW 111
// wait ( 0 0$2 ) ;
18349: LD_INT 70
18351: PPUSH
18352: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18356: LD_ADDR_VAR 0 4
18360: PUSH
18361: LD_VAR 0 4
18365: PPUSH
18366: LD_VAR 0 4
18370: PUSH
18371: LD_INT 1
18373: PLUS
18374: PPUSH
18375: LD_VAR 0 3
18379: PPUSH
18380: CALL_OW 1
18384: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18385: LD_ADDR_VAR 0 4
18389: PUSH
18390: LD_VAR 0 4
18394: PPUSH
18395: LD_VAR 0 4
18399: PUSH
18400: LD_INT 1
18402: PLUS
18403: PPUSH
18404: LD_VAR 0 2
18408: PPUSH
18409: CALL_OW 1
18413: ST_TO_ADDR
// end ;
18414: GO 18106
18416: POP
18417: POP
// for i in tmp do
18418: LD_ADDR_VAR 0 1
18422: PUSH
18423: LD_VAR 0 4
18427: PUSH
18428: FOR_IN
18429: IFFALSE 18543
// AgressiveMove ( i , [ [ 130 , 229 ] , [ 137 , 216 ] , [ 142 , 194 ] , [ 140 , 169 ] , [ 146 , 162 ] , [ 174 , 161 ] , [ 158 , 134 ] , [ 136 , 107 ] , [ 115 , 89 ] ] ) ;
18431: LD_VAR 0 1
18435: PPUSH
18436: LD_INT 130
18438: PUSH
18439: LD_INT 229
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 137
18448: PUSH
18449: LD_INT 216
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 142
18458: PUSH
18459: LD_INT 194
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 140
18468: PUSH
18469: LD_INT 169
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: LD_INT 146
18478: PUSH
18479: LD_INT 162
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: LD_INT 174
18488: PUSH
18489: LD_INT 161
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 158
18498: PUSH
18499: LD_INT 134
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: LD_INT 136
18508: PUSH
18509: LD_INT 107
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 115
18518: PUSH
18519: LD_INT 89
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: PPUSH
18537: CALL 69743 0 2
18541: GO 18428
18543: POP
18544: POP
// repeat wait ( 0 0$2 ) ;
18545: LD_INT 70
18547: PPUSH
18548: CALL_OW 67
// for i in tmp do
18552: LD_ADDR_VAR 0 1
18556: PUSH
18557: LD_VAR 0 4
18561: PUSH
18562: FOR_IN
18563: IFFALSE 18630
// if IsDead ( i ) then
18565: LD_VAR 0 1
18569: PPUSH
18570: CALL_OW 301
18574: IFFALSE 18594
// tmp := tmp diff i else
18576: LD_ADDR_VAR 0 4
18580: PUSH
18581: LD_VAR 0 4
18585: PUSH
18586: LD_VAR 0 1
18590: DIFF
18591: ST_TO_ADDR
18592: GO 18628
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18594: LD_VAR 0 1
18598: PPUSH
18599: LD_INT 81
18601: PUSH
18602: LD_INT 3
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PPUSH
18609: CALL_OW 69
18613: PPUSH
18614: LD_VAR 0 1
18618: PPUSH
18619: CALL_OW 74
18623: PPUSH
18624: CALL_OW 115
18628: GO 18562
18630: POP
18631: POP
// until not tmp ;
18632: LD_VAR 0 4
18636: NOT
18637: IFFALSE 18545
// end ;
18639: PPOPN 4
18641: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
18642: LD_EXP 6
18646: IFFALSE 19105
18648: GO 18650
18650: DISABLE
18651: LD_INT 0
18653: PPUSH
18654: PPUSH
18655: PPUSH
18656: PPUSH
// begin wait ( 3 3$00 ) ;
18657: LD_INT 6300
18659: PPUSH
18660: CALL_OW 67
// for i := 1 to 3 do
18664: LD_ADDR_VAR 0 1
18668: PUSH
18669: DOUBLE
18670: LD_INT 1
18672: DEC
18673: ST_TO_ADDR
18674: LD_INT 3
18676: PUSH
18677: FOR_TO
18678: IFFALSE 18977
// begin InitHc ;
18680: CALL_OW 19
// InitVc ;
18684: CALL_OW 20
// uc_side := 3 ;
18688: LD_ADDR_OWVAR 20
18692: PUSH
18693: LD_INT 3
18695: ST_TO_ADDR
// uc_nation := 3 ;
18696: LD_ADDR_OWVAR 21
18700: PUSH
18701: LD_INT 3
18703: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
18704: LD_INT 22
18706: PUSH
18707: LD_INT 23
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: LD_INT 1
18716: PPUSH
18717: LD_INT 2
18719: PPUSH
18720: CALL_OW 12
18724: ARRAY
18725: PPUSH
18726: LD_INT 1
18728: PPUSH
18729: LD_INT 1
18731: PPUSH
18732: LD_INT 44
18734: PUSH
18735: LD_INT 43
18737: PUSH
18738: LD_INT 42
18740: PUSH
18741: LD_INT 44
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 1
18752: PPUSH
18753: LD_INT 4
18755: PPUSH
18756: CALL_OW 12
18760: ARRAY
18761: PPUSH
18762: LD_INT 99
18764: PPUSH
18765: CALL 34277 0 5
// veh := CreateVehicle ;
18769: LD_ADDR_VAR 0 3
18773: PUSH
18774: CALL_OW 45
18778: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
18779: LD_VAR 0 3
18783: PPUSH
18784: LD_INT 293
18786: PPUSH
18787: LD_INT 246
18789: PPUSH
18790: LD_INT 5
18792: PPUSH
18793: LD_INT 0
18795: PPUSH
18796: CALL 69279 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18800: LD_ADDR_EXP 61
18804: PUSH
18805: LD_EXP 61
18809: PPUSH
18810: LD_EXP 61
18814: PUSH
18815: LD_INT 1
18817: PLUS
18818: PPUSH
18819: LD_VAR 0 3
18823: PPUSH
18824: CALL_OW 1
18828: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
18829: LD_INT 0
18831: PPUSH
18832: LD_INT 3
18834: PPUSH
18835: LD_INT 3
18837: PPUSH
18838: CALL_OW 380
// un := CreateHuman ;
18842: LD_ADDR_VAR 0 2
18846: PUSH
18847: CALL_OW 44
18851: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18852: LD_VAR 0 2
18856: PPUSH
18857: LD_VAR 0 3
18861: PPUSH
18862: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18866: LD_ADDR_EXP 61
18870: PUSH
18871: LD_EXP 61
18875: PPUSH
18876: LD_EXP 61
18880: PUSH
18881: LD_INT 1
18883: PLUS
18884: PPUSH
18885: LD_VAR 0 2
18889: PPUSH
18890: CALL_OW 1
18894: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
18895: LD_VAR 0 2
18899: PPUSH
18900: LD_INT 273
18902: PPUSH
18903: LD_INT 227
18905: PPUSH
18906: CALL_OW 111
// wait ( 0 0$2 ) ;
18910: LD_INT 70
18912: PPUSH
18913: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18917: LD_ADDR_VAR 0 4
18921: PUSH
18922: LD_VAR 0 4
18926: PPUSH
18927: LD_VAR 0 4
18931: PUSH
18932: LD_INT 1
18934: PLUS
18935: PPUSH
18936: LD_VAR 0 3
18940: PPUSH
18941: CALL_OW 1
18945: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18946: LD_ADDR_VAR 0 4
18950: PUSH
18951: LD_VAR 0 4
18955: PPUSH
18956: LD_VAR 0 4
18960: PUSH
18961: LD_INT 1
18963: PLUS
18964: PPUSH
18965: LD_VAR 0 2
18969: PPUSH
18970: CALL_OW 1
18974: ST_TO_ADDR
// end ;
18975: GO 18677
18977: POP
18978: POP
// for i in tmp do
18979: LD_ADDR_VAR 0 1
18983: PUSH
18984: LD_VAR 0 4
18988: PUSH
18989: FOR_IN
18990: IFFALSE 19009
// ComAgressiveMove ( i , 330 , 231 ) ;
18992: LD_VAR 0 1
18996: PPUSH
18997: LD_INT 330
18999: PPUSH
19000: LD_INT 231
19002: PPUSH
19003: CALL_OW 114
19007: GO 18989
19009: POP
19010: POP
// repeat wait ( 0 0$2 ) ;
19011: LD_INT 70
19013: PPUSH
19014: CALL_OW 67
// for i in tmp do
19018: LD_ADDR_VAR 0 1
19022: PUSH
19023: LD_VAR 0 4
19027: PUSH
19028: FOR_IN
19029: IFFALSE 19096
// if IsDead ( i ) then
19031: LD_VAR 0 1
19035: PPUSH
19036: CALL_OW 301
19040: IFFALSE 19060
// tmp := tmp diff i else
19042: LD_ADDR_VAR 0 4
19046: PUSH
19047: LD_VAR 0 4
19051: PUSH
19052: LD_VAR 0 1
19056: DIFF
19057: ST_TO_ADDR
19058: GO 19094
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
19060: LD_VAR 0 1
19064: PPUSH
19065: LD_INT 81
19067: PUSH
19068: LD_INT 3
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PPUSH
19075: CALL_OW 69
19079: PPUSH
19080: LD_VAR 0 1
19084: PPUSH
19085: CALL_OW 74
19089: PPUSH
19090: CALL_OW 115
19094: GO 19028
19096: POP
19097: POP
// until not tmp ;
19098: LD_VAR 0 4
19102: NOT
19103: IFFALSE 19011
// end ;
19105: PPOPN 4
19107: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
19108: LD_INT 3
19110: PUSH
19111: LD_INT 22
19113: PUSH
19114: LD_INT 2
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 32
19127: PUSH
19128: LD_INT 1
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PPUSH
19139: CALL_OW 69
19143: IFFALSE 19227
19145: GO 19147
19147: DISABLE
19148: LD_INT 0
19150: PPUSH
// begin enable ;
19151: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
19152: LD_ADDR_VAR 0 1
19156: PUSH
19157: LD_INT 3
19159: PUSH
19160: LD_INT 22
19162: PUSH
19163: LD_INT 2
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: LD_INT 32
19176: PUSH
19177: LD_INT 1
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PPUSH
19188: CALL_OW 69
19192: PUSH
19193: FOR_IN
19194: IFFALSE 19225
// if GetFuel ( i ) < 3 then
19196: LD_VAR 0 1
19200: PPUSH
19201: CALL_OW 261
19205: PUSH
19206: LD_INT 3
19208: LESS
19209: IFFALSE 19223
// SetFuel ( i , 3 ) ;
19211: LD_VAR 0 1
19215: PPUSH
19216: LD_INT 3
19218: PPUSH
19219: CALL_OW 240
19223: GO 19193
19225: POP
19226: POP
// end ; end_of_file
19227: PPOPN 1
19229: END
// export function Action ; begin
19230: LD_INT 0
19232: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
19233: LD_INT 2
19235: PPUSH
19236: LD_INT 4
19238: PPUSH
19239: CALL_OW 332
// Video ( true ) ;
19243: LD_INT 1
19245: PPUSH
19246: CALL 67111 0 1
// music_nat := 3 ;
19250: LD_ADDR_OWVAR 71
19254: PUSH
19255: LD_INT 3
19257: ST_TO_ADDR
// music_class := music_recon ;
19258: LD_ADDR_OWVAR 72
19262: PUSH
19263: LD_INT 3
19265: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
19266: LD_INT 213
19268: PPUSH
19269: LD_INT 89
19271: PPUSH
19272: CALL_OW 86
// if Kaia and Olaf then
19276: LD_EXP 39
19280: PUSH
19281: LD_EXP 43
19285: AND
19286: IFFALSE 19292
// SceneKaiaWithOlaf ;
19288: CALL 19370 0 0
// if Givi and Kamil then
19292: LD_EXP 35
19296: PUSH
19297: LD_EXP 38
19301: AND
19302: IFFALSE 19308
// SceneWithGiviAndKamil ;
19304: CALL 19941 0 0
// tick := 0 ;
19308: LD_ADDR_OWVAR 1
19312: PUSH
19313: LD_INT 0
19315: ST_TO_ADDR
// wait ( 3 ) ;
19316: LD_INT 3
19318: PPUSH
19319: CALL_OW 67
// Video ( false ) ;
19323: LD_INT 0
19325: PPUSH
19326: CALL 67111 0 1
// ChangeMissionObjectives ( M1 ) ;
19330: LD_STRING M1
19332: PPUSH
19333: CALL_OW 337
// music_nat := music_auto ;
19337: LD_ADDR_OWVAR 71
19341: PUSH
19342: LD_INT 0
19344: ST_TO_ADDR
// music_class := music_auto ;
19345: LD_ADDR_OWVAR 72
19349: PUSH
19350: LD_INT 0
19352: ST_TO_ADDR
// SaveForQuickRestart ;
19353: CALL_OW 22
// gameActive := true ;
19357: LD_ADDR_EXP 31
19361: PUSH
19362: LD_INT 1
19364: ST_TO_ADDR
// end ;
19365: LD_VAR 0 1
19369: RET
// export function SceneKaiaWithOlaf ; begin
19370: LD_INT 0
19372: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
19373: LD_INT 22
19375: PUSH
19376: LD_INT 2
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 30
19385: PUSH
19386: LD_INT 3
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PPUSH
19397: CALL_OW 69
19401: PPUSH
19402: LD_INT 14
19404: PPUSH
19405: LD_INT 1
19407: PPUSH
19408: LD_INT 1
19410: PPUSH
19411: LD_INT 26
19413: PPUSH
19414: CALL_OW 125
// wait ( 0 0$1 ) ;
19418: LD_INT 35
19420: PPUSH
19421: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
19425: LD_EXP 39
19429: PPUSH
19430: LD_STRING DK-Mem-1
19432: PPUSH
19433: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
19437: LD_EXP 39
19441: PPUSH
19442: LD_STRING DK-Mem-2
19444: PPUSH
19445: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
19449: LD_EXP 43
19453: PPUSH
19454: LD_STRING DO-Mem-3
19456: PPUSH
19457: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
19461: LD_EXP 39
19465: PPUSH
19466: LD_STRING DK-Mem-4
19468: PPUSH
19469: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
19473: LD_EXP 43
19477: PPUSH
19478: LD_STRING DO-Mem-5
19480: PPUSH
19481: CALL_OW 88
// wait ( 0 0$2 ) ;
19485: LD_INT 70
19487: PPUSH
19488: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
19492: LD_INT 22
19494: PUSH
19495: LD_INT 2
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 30
19504: PUSH
19505: LD_INT 3
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PPUSH
19516: CALL_OW 69
19520: PPUSH
19521: LD_INT 90
19523: PPUSH
19524: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
19528: LD_EXP 43
19532: PPUSH
19533: LD_STRING DO-Mem-6
19535: PPUSH
19536: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
19540: LD_EXP 39
19544: PPUSH
19545: LD_STRING DK-Mem-7
19547: PPUSH
19548: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
19552: LD_EXP 34
19556: PPUSH
19557: LD_EXP 39
19561: PPUSH
19562: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
19566: LD_EXP 34
19570: PPUSH
19571: LD_STRING DH-Mem-8
19573: PPUSH
19574: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
19578: LD_EXP 39
19582: PUSH
19583: LD_EXP 43
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PPUSH
19592: LD_EXP 34
19596: PPUSH
19597: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
19601: LD_EXP 43
19605: PPUSH
19606: LD_STRING DO-Mem-9
19608: PPUSH
19609: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
19613: LD_EXP 43
19617: PPUSH
19618: LD_STRING DO-Mem-10
19620: PPUSH
19621: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
19625: LD_EXP 43
19629: PPUSH
19630: LD_STRING DO-Mem-11
19632: PPUSH
19633: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
19637: LD_EXP 43
19641: PPUSH
19642: LD_STRING DO-Mem-12
19644: PPUSH
19645: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
19649: LD_EXP 39
19653: PPUSH
19654: LD_STRING DK-Mem-13
19656: PPUSH
19657: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
19661: LD_EXP 39
19665: PPUSH
19666: LD_STRING DK-Mem-14
19668: PPUSH
19669: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
19673: LD_EXP 39
19677: PPUSH
19678: LD_STRING DK-Mem-15
19680: PPUSH
19681: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
19685: LD_EXP 39
19689: PPUSH
19690: LD_STRING DK-Mem-16
19692: PPUSH
19693: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
19697: LD_EXP 39
19701: PPUSH
19702: LD_STRING DK-Mem-17
19704: PPUSH
19705: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
19709: LD_EXP 43
19713: PPUSH
19714: LD_EXP 39
19718: PPUSH
19719: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
19723: LD_EXP 43
19727: PPUSH
19728: LD_STRING DO-Mem-18
19730: PPUSH
19731: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
19735: LD_EXP 39
19739: PPUSH
19740: LD_EXP 43
19744: PPUSH
19745: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
19749: LD_EXP 39
19753: PPUSH
19754: LD_STRING DK-Mem-19
19756: PPUSH
19757: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
19761: LD_EXP 43
19765: PPUSH
19766: LD_INT 214
19768: PPUSH
19769: LD_INT 86
19771: PPUSH
19772: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
19776: LD_EXP 43
19780: PPUSH
19781: LD_EXP 39
19785: PPUSH
19786: CALL_OW 179
// if Givi then
19790: LD_EXP 35
19794: IFFALSE 19825
// begin ComMoveXY ( Givi , 217 , 86 ) ;
19796: LD_EXP 35
19800: PPUSH
19801: LD_INT 217
19803: PPUSH
19804: LD_INT 86
19806: PPUSH
19807: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
19811: LD_EXP 35
19815: PPUSH
19816: LD_EXP 34
19820: PPUSH
19821: CALL_OW 179
// end ; if Kamil then
19825: LD_EXP 38
19829: IFFALSE 19869
// begin ComExit ( Kamil ) ;
19831: LD_EXP 38
19835: PPUSH
19836: CALL 67537 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
19840: LD_EXP 38
19844: PPUSH
19845: LD_INT 212
19847: PPUSH
19848: LD_INT 86
19850: PPUSH
19851: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
19855: LD_EXP 38
19859: PPUSH
19860: LD_EXP 34
19864: PPUSH
19865: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
19869: LD_INT 70
19871: PPUSH
19872: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
19876: LD_EXP 34
19880: PPUSH
19881: LD_STRING DH-Mem-20
19883: PPUSH
19884: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
19888: LD_EXP 43
19892: PPUSH
19893: LD_INT 215
19895: PPUSH
19896: LD_INT 87
19898: PPUSH
19899: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
19903: LD_EXP 43
19907: PPUSH
19908: LD_EXP 39
19912: PPUSH
19913: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
19917: LD_EXP 39
19921: PPUSH
19922: LD_STRING DK-Mem-21
19924: PPUSH
19925: CALL_OW 88
// wait ( 0 0$2 ) ;
19929: LD_INT 70
19931: PPUSH
19932: CALL_OW 67
// end ;
19936: LD_VAR 0 1
19940: RET
// export function SceneWithGiviAndKamil ; var p ; begin
19941: LD_INT 0
19943: PPUSH
19944: PPUSH
// if Markov then
19945: LD_EXP 41
19949: IFFALSE 20067
// begin p := 0 ;
19951: LD_ADDR_VAR 0 2
19955: PUSH
19956: LD_INT 0
19958: ST_TO_ADDR
// if IsInUnit ( Markov ) then
19959: LD_EXP 41
19963: PPUSH
19964: CALL_OW 310
19968: IFFALSE 19979
// ComExit ( Markov ) ;
19970: LD_EXP 41
19974: PPUSH
19975: CALL 67537 0 1
// wait ( 0 0$1 ) ;
19979: LD_INT 35
19981: PPUSH
19982: CALL_OW 67
// ComMoveXY ( Markov , 212 , 88 ) ;
19986: LD_EXP 41
19990: PPUSH
19991: LD_INT 212
19993: PPUSH
19994: LD_INT 88
19996: PPUSH
19997: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20001: LD_INT 35
20003: PPUSH
20004: CALL_OW 67
// p := Inc ( p ) ;
20008: LD_ADDR_VAR 0 2
20012: PUSH
20013: LD_VAR 0 2
20017: PPUSH
20018: CALL 68500 0 1
20022: ST_TO_ADDR
// until GetDistUnits ( Markov , Heike ) < 6 or p > 12 ;
20023: LD_EXP 41
20027: PPUSH
20028: LD_EXP 34
20032: PPUSH
20033: CALL_OW 296
20037: PUSH
20038: LD_INT 6
20040: LESS
20041: PUSH
20042: LD_VAR 0 2
20046: PUSH
20047: LD_INT 12
20049: GREATER
20050: OR
20051: IFFALSE 20001
// AddComTurnUnit ( Markov , Heike ) ;
20053: LD_EXP 41
20057: PPUSH
20058: LD_EXP 34
20062: PPUSH
20063: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
20067: LD_EXP 35
20071: PPUSH
20072: LD_STRING DG-Obj-1
20074: PPUSH
20075: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
20079: LD_EXP 38
20083: PPUSH
20084: LD_STRING DKam-Obj-2
20086: PPUSH
20087: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
20091: LD_EXP 34
20095: PPUSH
20096: LD_EXP 38
20100: PPUSH
20101: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
20105: LD_EXP 38
20109: PPUSH
20110: LD_STRING DKam-Obj-3
20112: PPUSH
20113: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
20117: LD_EXP 41
20121: PPUSH
20122: LD_STRING DMar-Obj-4
20124: PPUSH
20125: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
20129: LD_EXP 38
20133: PPUSH
20134: LD_STRING DKam-Obj-6
20136: PPUSH
20137: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
20141: LD_EXP 38
20145: PPUSH
20146: LD_STRING DKam-Obj-7
20148: PPUSH
20149: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
20153: LD_EXP 38
20157: PPUSH
20158: LD_STRING DKam-Obj-8
20160: PPUSH
20161: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
20165: LD_EXP 34
20169: PPUSH
20170: LD_STRING DH-Obj-9
20172: PPUSH
20173: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
20177: LD_EXP 38
20181: PPUSH
20182: LD_STRING DKam-Obj-10
20184: PPUSH
20185: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
20189: LD_EXP 38
20193: PPUSH
20194: LD_STRING DKam-Obj-11
20196: PPUSH
20197: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
20201: LD_EXP 41
20205: PPUSH
20206: LD_STRING DMar-Obj-12
20208: PPUSH
20209: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
20213: LD_EXP 41
20217: PPUSH
20218: LD_STRING DMar-Obj-13
20220: PPUSH
20221: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
20225: LD_EXP 41
20229: PPUSH
20230: LD_STRING DMar-Obj-14
20232: PPUSH
20233: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
20237: LD_EXP 43
20241: PPUSH
20242: LD_STRING DO-Obj-15
20244: PPUSH
20245: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
20249: LD_EXP 43
20253: PPUSH
20254: LD_STRING DO-Obj-16
20256: PPUSH
20257: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
20261: LD_EXP 34
20265: PPUSH
20266: LD_STRING DH-Obj-17
20268: PPUSH
20269: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
20273: LD_EXP 43
20277: PPUSH
20278: LD_STRING DO-Obj-18
20280: PPUSH
20281: CALL_OW 88
// end ;
20285: LD_VAR 0 1
20289: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
20290: LD_INT 34
20292: PUSH
20293: LD_INT 92
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PPUSH
20300: CALL_OW 69
20304: IFFALSE 20499
20306: GO 20308
20308: DISABLE
20309: LD_INT 0
20311: PPUSH
// begin wait ( 0 0$2 ) ;
20312: LD_INT 70
20314: PPUSH
20315: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
20319: LD_INT 34
20321: PUSH
20322: LD_INT 92
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PPUSH
20329: CALL_OW 69
20333: PPUSH
20334: CALL_OW 87
// DialogueOn ;
20338: CALL_OW 6
// if Markov then
20342: LD_EXP 41
20346: IFFALSE 20374
// begin Say ( Markov , DMar-Grn-1 ) ;
20348: LD_EXP 41
20352: PPUSH
20353: LD_STRING DMar-Grn-1
20355: PPUSH
20356: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
20360: LD_EXP 34
20364: PPUSH
20365: LD_STRING DH-Grn-2
20367: PPUSH
20368: CALL_OW 88
// end else
20372: GO 20473
// if heikeSecondSquad then
20374: LD_EXP 49
20378: IFFALSE 20473
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20380: LD_ADDR_VAR 0 1
20384: PUSH
20385: LD_EXP 49
20389: PUSH
20390: LD_INT 1
20392: PPUSH
20393: LD_EXP 49
20397: PPUSH
20398: CALL_OW 12
20402: ARRAY
20403: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20404: LD_VAR 0 1
20408: PPUSH
20409: CALL_OW 258
20413: PUSH
20414: LD_INT 1
20416: DOUBLE
20417: EQUAL
20418: IFTRUE 20422
20420: GO 20437
20422: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
20423: LD_VAR 0 1
20427: PPUSH
20428: LD_STRING DArm-Grn-1
20430: PPUSH
20431: CALL_OW 88
20435: GO 20461
20437: LD_INT 2
20439: DOUBLE
20440: EQUAL
20441: IFTRUE 20445
20443: GO 20460
20445: POP
// Say ( random , DArf-Grn-1 ) ; end ;
20446: LD_VAR 0 1
20450: PPUSH
20451: LD_STRING DArf-Grn-1
20453: PPUSH
20454: CALL_OW 88
20458: GO 20461
20460: POP
// Say ( Heike , DH-Grn-2 ) ;
20461: LD_EXP 34
20465: PPUSH
20466: LD_STRING DH-Grn-2
20468: PPUSH
20469: CALL_OW 88
// end ; DialogueOff ;
20473: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
20477: LD_STRING MortarConstructed
20479: PPUSH
20480: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
20484: LD_STRING SelfPropelledMortar
20486: PPUSH
20487: CALL_OW 339
// mortarConstructed := true ;
20491: LD_ADDR_EXP 15
20495: PUSH
20496: LD_INT 1
20498: ST_TO_ADDR
// end ;
20499: PPOPN 1
20501: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
20502: LD_INT 2
20504: PPUSH
20505: LD_INT 8
20507: PPUSH
20508: CALL_OW 294
20512: IFFALSE 20655
20514: GO 20516
20516: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
20517: LD_INT 200
20519: PPUSH
20520: LD_INT 162
20522: PPUSH
20523: LD_INT 2
20525: PPUSH
20526: LD_INT 6
20528: NEG
20529: PPUSH
20530: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
20534: LD_INT 200
20536: PPUSH
20537: LD_INT 162
20539: PPUSH
20540: LD_INT 2
20542: PPUSH
20543: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
20547: LD_INT 200
20549: PPUSH
20550: LD_INT 162
20552: PPUSH
20553: CALL_OW 84
// if not IsOk ( Kurt ) then
20557: LD_EXP 45
20561: PPUSH
20562: CALL_OW 302
20566: NOT
20567: IFFALSE 20571
// exit ;
20569: GO 20655
// Say ( Kurt , DKs-Otpst-2-1 ) ;
20571: LD_EXP 45
20575: PPUSH
20576: LD_STRING DKs-Otpst-2-1
20578: PPUSH
20579: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
20583: LD_EXP 39
20587: PPUSH
20588: LD_STRING DK-Otpst-2-2
20590: PPUSH
20591: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
20595: LD_EXP 45
20599: PPUSH
20600: LD_STRING DKs-Otpst-2-3
20602: PPUSH
20603: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
20607: LD_EXP 45
20611: PPUSH
20612: LD_STRING DKs-Otpst-2-4
20614: PPUSH
20615: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
20619: LD_EXP 45
20623: PPUSH
20624: LD_STRING DKs-Otpst-2-5
20626: PPUSH
20627: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
20631: LD_EXP 38
20635: PPUSH
20636: LD_STRING DKam-Otpst-2-6
20638: PPUSH
20639: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
20643: LD_EXP 45
20647: PPUSH
20648: LD_STRING DKs-Otpst-2-7
20650: PPUSH
20651: CALL_OW 88
// end ;
20655: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
20656: LD_INT 8
20658: PPUSH
20659: LD_INT 22
20661: PUSH
20662: LD_INT 3
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 21
20671: PUSH
20672: LD_INT 3
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PPUSH
20683: CALL_OW 70
20687: NOT
20688: PUSH
20689: LD_EXP 3
20693: NOT
20694: AND
20695: IFFALSE 20943
20697: GO 20699
20699: DISABLE
20700: LD_INT 0
20702: PPUSH
// begin outpostDestroyed := true ;
20703: LD_ADDR_EXP 4
20707: PUSH
20708: LD_INT 1
20710: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
20711: LD_INT 22
20713: PUSH
20714: LD_INT 2
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 34
20723: PUSH
20724: LD_INT 92
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 92
20733: PUSH
20734: LD_INT 195
20736: PUSH
20737: LD_INT 164
20739: PUSH
20740: LD_INT 12
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: LIST
20753: PPUSH
20754: CALL_OW 69
20758: NOT
20759: IFFALSE 20763
// exit ;
20761: GO 20943
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
20763: LD_EXP 35
20767: PPUSH
20768: CALL_OW 302
20772: NOT
20773: PUSH
20774: LD_EXP 39
20778: PPUSH
20779: CALL_OW 302
20783: NOT
20784: OR
20785: IFFALSE 20789
// exit ;
20787: GO 20943
// Say ( Givi , DG-Otpst-1-1 ) ;
20789: LD_EXP 35
20793: PPUSH
20794: LD_STRING DG-Otpst-1-1
20796: PPUSH
20797: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
20801: LD_EXP 39
20805: PPUSH
20806: LD_STRING DK-Otpst-1-2
20808: PPUSH
20809: CALL_OW 88
// if IsOk ( Markov ) then
20813: LD_EXP 41
20817: PPUSH
20818: CALL_OW 302
20822: IFFALSE 20850
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
20824: LD_EXP 41
20828: PPUSH
20829: LD_STRING DMar-Otpst-1-3
20831: PPUSH
20832: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
20836: LD_EXP 41
20840: PPUSH
20841: LD_STRING DMar-Otpst-1-4
20843: PPUSH
20844: CALL_OW 88
// end else
20848: GO 20931
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20850: LD_ADDR_VAR 0 1
20854: PUSH
20855: LD_EXP 49
20859: PUSH
20860: LD_INT 1
20862: PPUSH
20863: LD_EXP 49
20867: PPUSH
20868: CALL_OW 12
20872: ARRAY
20873: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20874: LD_VAR 0 1
20878: PPUSH
20879: CALL_OW 258
20883: PUSH
20884: LD_INT 1
20886: DOUBLE
20887: EQUAL
20888: IFTRUE 20892
20890: GO 20907
20892: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
20893: LD_VAR 0 1
20897: PPUSH
20898: LD_STRING DArm-Otpst-1-a-3
20900: PPUSH
20901: CALL_OW 88
20905: GO 20931
20907: LD_INT 2
20909: DOUBLE
20910: EQUAL
20911: IFTRUE 20915
20913: GO 20930
20915: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
20916: LD_VAR 0 1
20920: PPUSH
20921: LD_STRING DArf-Otpst-1-a-3
20923: PPUSH
20924: CALL_OW 88
20928: GO 20931
20930: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
20931: LD_EXP 35
20935: PPUSH
20936: LD_STRING DG-Otpst-1-5
20938: PPUSH
20939: CALL_OW 88
// end ;
20943: PPOPN 1
20945: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
20946: LD_EXP 39
20950: PPUSH
20951: CALL_OW 256
20955: PUSH
20956: LD_INT 10
20958: LESS
20959: IFFALSE 21073
20961: GO 20963
20963: DISABLE
// begin DialogueOn ;
20964: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
20968: LD_EXP 39
20972: PPUSH
20973: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
20977: LD_EXP 39
20981: PPUSH
20982: LD_STRING DK-Dead-1
20984: PPUSH
20985: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
20989: LD_EXP 34
20993: PPUSH
20994: LD_STRING DH-Dead-2
20996: PPUSH
20997: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
21001: LD_EXP 39
21005: PPUSH
21006: LD_STRING DK-Dead-3
21008: PPUSH
21009: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
21013: LD_EXP 34
21017: PPUSH
21018: LD_STRING DH-Dead-4
21020: PPUSH
21021: CALL_OW 88
// if IsOk ( Mike ) then
21025: LD_EXP 36
21029: PPUSH
21030: CALL_OW 302
21034: IFFALSE 21060
// begin Say ( Mike , DM-Dead-5 ) ;
21036: LD_EXP 36
21040: PPUSH
21041: LD_STRING DM-Dead-5
21043: PPUSH
21044: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
21048: LD_EXP 34
21052: PPUSH
21053: LD_STRING DH-Dead-6
21055: PPUSH
21056: CALL_OW 88
// end ; DialogueOff ;
21060: CALL_OW 7
// KillUnit ( Kaia ) ;
21064: LD_EXP 39
21068: PPUSH
21069: CALL_OW 66
// end ;
21073: END
// every 0 0$1 trigger tick >= 15 15$00 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
21074: LD_OWVAR 1
21078: PUSH
21079: LD_INT 31500
21081: GREATEREQUAL
21082: PUSH
21083: LD_EXP 5
21087: PUSH
21088: LD_INT 5
21090: GREATER
21091: OR
21092: PUSH
21093: LD_INT 22
21095: PUSH
21096: LD_INT 2
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 92
21105: PUSH
21106: LD_INT 103
21108: PUSH
21109: LD_INT 81
21111: PUSH
21112: LD_INT 20
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PPUSH
21125: CALL_OW 69
21129: OR
21130: IFFALSE 21570
21132: GO 21134
21134: DISABLE
21135: LD_INT 0
21137: PPUSH
21138: PPUSH
21139: PPUSH
// begin PrepareRolfSquad ;
21140: CALL 3531 0 0
// dep := HexInfo ( 86 , 54 ) ;
21144: LD_ADDR_VAR 0 3
21148: PUSH
21149: LD_INT 86
21151: PPUSH
21152: LD_INT 54
21154: PPUSH
21155: CALL_OW 428
21159: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
21160: LD_VAR 0 3
21164: PPUSH
21165: CALL_OW 274
21169: PPUSH
21170: LD_INT 1
21172: PPUSH
21173: LD_INT 300
21175: PPUSH
21176: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
21180: LD_VAR 0 3
21184: PPUSH
21185: CALL_OW 274
21189: PPUSH
21190: LD_INT 2
21192: PPUSH
21193: LD_INT 300
21195: PPUSH
21196: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
21200: LD_EXP 51
21204: PPUSH
21205: LD_INT 79
21207: PPUSH
21208: LD_INT 52
21210: PPUSH
21211: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
21215: LD_INT 35
21217: PPUSH
21218: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( rolfSquad , [ f_not , [ f_hastask ] ] ) , 79 , 52 ) ;
21222: LD_EXP 51
21226: PPUSH
21227: LD_INT 3
21229: PUSH
21230: LD_INT 60
21232: PUSH
21233: EMPTY
21234: LIST
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PPUSH
21240: CALL_OW 72
21244: PPUSH
21245: LD_INT 79
21247: PPUSH
21248: LD_INT 52
21250: PPUSH
21251: CALL_OW 114
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
21255: LD_INT 12
21257: PPUSH
21258: LD_INT 22
21260: PUSH
21261: LD_INT 3
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 21
21270: PUSH
21271: LD_INT 1
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PPUSH
21282: CALL_OW 70
21286: NOT
21287: IFFALSE 21215
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
21289: LD_ADDR_VAR 0 2
21293: PUSH
21294: LD_INT 12
21296: PPUSH
21297: LD_INT 21
21299: PUSH
21300: LD_INT 3
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PPUSH
21307: CALL_OW 70
21311: ST_TO_ADDR
// for i in tmp do
21312: LD_ADDR_VAR 0 1
21316: PUSH
21317: LD_VAR 0 2
21321: PUSH
21322: FOR_IN
21323: IFFALSE 21339
// SetSide ( i , 8 ) ;
21325: LD_VAR 0 1
21329: PPUSH
21330: LD_INT 8
21332: PPUSH
21333: CALL_OW 235
21337: GO 21322
21339: POP
21340: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
21341: LD_INT 63
21343: PPUSH
21344: LD_INT 42
21346: PPUSH
21347: CALL_OW 428
21351: PPUSH
21352: LD_INT 320
21354: PPUSH
21355: CALL_OW 234
// wait ( 0 0$10 ) ;
21359: LD_INT 350
21361: PPUSH
21362: CALL_OW 67
// DialogueOn ;
21366: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
21370: LD_INT 8
21372: PPUSH
21373: LD_INT 2
21375: PPUSH
21376: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
21380: LD_INT 86
21382: PPUSH
21383: LD_INT 54
21385: PPUSH
21386: CALL_OW 428
21390: PPUSH
21391: LD_STRING antwerp
21393: PPUSH
21394: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
21398: LD_EXP 47
21402: PPUSH
21403: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
21407: LD_EXP 47
21411: PPUSH
21412: LD_STRING DRf-rast-1
21414: PPUSH
21415: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
21419: LD_EXP 34
21423: PPUSH
21424: LD_STRING DH-rast-2
21426: PPUSH
21427: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
21431: LD_EXP 47
21435: PPUSH
21436: LD_STRING DRf-rast-3
21438: PPUSH
21439: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
21443: LD_EXP 47
21447: PPUSH
21448: LD_STRING DRf-rast-4
21450: PPUSH
21451: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
21455: LD_EXP 47
21459: PPUSH
21460: LD_STRING DRf-rast-5
21462: PPUSH
21463: CALL_OW 94
// if IsOk ( Aviradze ) then
21467: LD_EXP 46
21471: PPUSH
21472: CALL_OW 302
21476: IFFALSE 21535
// begin CenterNowOnUnits ( Aviradze ) ;
21478: LD_EXP 46
21482: PPUSH
21483: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
21487: LD_EXP 46
21491: PPUSH
21492: LD_STRING DA-rast-6
21494: PPUSH
21495: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
21499: LD_EXP 34
21503: PPUSH
21504: LD_STRING DH-rast-7
21506: PPUSH
21507: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
21511: LD_EXP 35
21515: PPUSH
21516: LD_STRING DG-rast-8
21518: PPUSH
21519: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
21523: LD_EXP 35
21527: PPUSH
21528: LD_STRING DG-rast-9
21530: PPUSH
21531: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
21535: LD_EXP 34
21539: PPUSH
21540: LD_STRING DH-rast-10
21542: PPUSH
21543: CALL_OW 88
// DialogueOff ;
21547: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
21551: LD_STRING M2
21553: PPUSH
21554: CALL_OW 337
// bergkampfArrived := true ;
21558: LD_ADDR_EXP 3
21562: PUSH
21563: LD_INT 1
21565: ST_TO_ADDR
// PrepareRolfBase ;
21566: CALL 3862 0 0
// end ;
21570: PPOPN 3
21572: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) and canRolfJoin do var i ;
21573: LD_INT 12
21575: PPUSH
21576: LD_INT 22
21578: PUSH
21579: LD_INT 2
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PPUSH
21586: CALL_OW 70
21590: PUSH
21591: LD_EXP 47
21595: PPUSH
21596: CALL_OW 302
21600: AND
21601: PUSH
21602: LD_EXP 29
21606: AND
21607: IFFALSE 22167
21609: GO 21611
21611: DISABLE
21612: LD_INT 0
21614: PPUSH
// begin rolfScriptBase := false ;
21615: LD_ADDR_EXP 9
21619: PUSH
21620: LD_INT 0
21622: ST_TO_ADDR
// DialogueOn ;
21623: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
21627: LD_EXP 47
21631: PPUSH
21632: CALL_OW 87
// if rolfSquad >= 10 then
21636: LD_EXP 51
21640: PUSH
21641: LD_INT 10
21643: GREATEREQUAL
21644: IFFALSE 21823
// begin linkedWithRolf := 2 ;
21646: LD_ADDR_EXP 12
21650: PUSH
21651: LD_INT 2
21653: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
21654: LD_EXP 47
21658: PPUSH
21659: LD_STRING DRf-rast-11
21661: PPUSH
21662: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
21666: LD_EXP 34
21670: PPUSH
21671: LD_STRING DH-rast-12
21673: PPUSH
21674: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
21678: LD_EXP 47
21682: PPUSH
21683: LD_STRING DRf-rast-13
21685: PPUSH
21686: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
21690: LD_EXP 34
21694: PPUSH
21695: LD_STRING DH-rast-14
21697: PPUSH
21698: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
21702: LD_EXP 47
21706: PPUSH
21707: LD_STRING DRf-rast-15
21709: PPUSH
21710: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
21714: LD_EXP 34
21718: PPUSH
21719: LD_STRING DH-rast-16
21721: PPUSH
21722: CALL_OW 88
// if IsOk ( Mike ) then
21726: LD_EXP 36
21730: PPUSH
21731: CALL_OW 302
21735: IFFALSE 21809
// begin Say ( Mike , DM-rast-17 ) ;
21737: LD_EXP 36
21741: PPUSH
21742: LD_STRING DM-rast-17
21744: PPUSH
21745: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
21749: LD_EXP 34
21753: PPUSH
21754: LD_STRING DH-rast-18
21756: PPUSH
21757: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
21761: LD_EXP 36
21765: PPUSH
21766: LD_STRING DM-rast-19
21768: PPUSH
21769: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
21773: LD_EXP 34
21777: PPUSH
21778: LD_STRING DH-rast-20
21780: PPUSH
21781: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
21785: LD_EXP 36
21789: PPUSH
21790: LD_STRING DM-rast-21
21792: PPUSH
21793: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
21797: LD_EXP 34
21801: PPUSH
21802: LD_STRING DH-rast-22
21804: PPUSH
21805: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
21809: LD_EXP 34
21813: PPUSH
21814: LD_STRING DH-rast-23
21816: PPUSH
21817: CALL_OW 88
// end else
21821: GO 21973
// begin linkedWithRolf := 1 ;
21823: LD_ADDR_EXP 12
21827: PUSH
21828: LD_INT 1
21830: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
21831: LD_EXP 47
21835: PPUSH
21836: LD_STRING DRf-rast-a-11
21838: PPUSH
21839: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
21843: LD_EXP 34
21847: PPUSH
21848: LD_STRING DH-rast-a-12
21850: PPUSH
21851: CALL_OW 88
// if IsOk ( Kurt ) then
21855: LD_EXP 45
21859: PPUSH
21860: CALL_OW 302
21864: IFFALSE 21961
// begin Say ( Kurt , DKs-rast-a-13 ) ;
21866: LD_EXP 45
21870: PPUSH
21871: LD_STRING DKs-rast-a-13
21873: PPUSH
21874: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
21878: LD_EXP 47
21882: PPUSH
21883: LD_STRING DRf-rast-a-14
21885: PPUSH
21886: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
21890: LD_EXP 47
21894: PPUSH
21895: LD_STRING DRf-rast-a-15
21897: PPUSH
21898: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
21902: LD_EXP 45
21906: PPUSH
21907: LD_STRING DKs-rast-a-16
21909: PPUSH
21910: CALL_OW 88
// if IsOk ( Givi ) then
21914: LD_EXP 35
21918: PPUSH
21919: CALL_OW 302
21923: IFFALSE 21961
// begin Say ( Givi , DG-rast-a-17 ) ;
21925: LD_EXP 35
21929: PPUSH
21930: LD_STRING DG-rast-a-17
21932: PPUSH
21933: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
21937: LD_EXP 35
21941: PPUSH
21942: LD_STRING DG-rast-a-18
21944: PPUSH
21945: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
21949: LD_EXP 45
21953: PPUSH
21954: LD_STRING DKs-rast-a-19
21956: PPUSH
21957: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
21961: LD_EXP 34
21965: PPUSH
21966: LD_STRING DH-rast-a-20
21968: PPUSH
21969: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
21973: LD_EXP 47
21977: PPUSH
21978: LD_STRING DRf-rast-24
21980: PPUSH
21981: CALL_OW 88
// if IsOk ( Aviradze ) then
21985: LD_EXP 46
21989: PPUSH
21990: CALL_OW 302
21994: IFFALSE 22094
// begin Say ( Aviradze , DA-rast-25 ) ;
21996: LD_EXP 46
22000: PPUSH
22001: LD_STRING DA-rast-25
22003: PPUSH
22004: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
22008: LD_EXP 34
22012: PPUSH
22013: LD_STRING DH-rast-26
22015: PPUSH
22016: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
22020: LD_EXP 46
22024: PPUSH
22025: LD_STRING DA-rast-27
22027: PPUSH
22028: CALL_OW 88
// if IsOk ( Markov ) then
22032: LD_EXP 41
22036: PPUSH
22037: CALL_OW 302
22041: IFFALSE 22069
// begin Say ( Markov , DMar-rast-28 ) ;
22043: LD_EXP 41
22047: PPUSH
22048: LD_STRING DMar-rast-28
22050: PPUSH
22051: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
22055: LD_EXP 41
22059: PPUSH
22060: LD_STRING DMar-rast-29
22062: PPUSH
22063: CALL_OW 88
// end else
22067: GO 22092
// if IsOk ( Sophia ) then
22069: LD_EXP 40
22073: PPUSH
22074: CALL_OW 302
22078: IFFALSE 22092
// begin Say ( Sophia , DS-rast-28 ) ;
22080: LD_EXP 40
22084: PPUSH
22085: LD_STRING DS-rast-28
22087: PPUSH
22088: CALL_OW 88
// end ; end else
22092: GO 22117
// if IsOk ( Sophia ) then
22094: LD_EXP 40
22098: PPUSH
22099: CALL_OW 302
22103: IFFALSE 22117
// Say ( Sophia , DS-rast-29 ) ;
22105: LD_EXP 40
22109: PPUSH
22110: LD_STRING DS-rast-29
22112: PPUSH
22113: CALL_OW 88
// DialogueOff ;
22117: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
22121: LD_STRING M3
22123: PPUSH
22124: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
22128: LD_ADDR_VAR 0 1
22132: PUSH
22133: LD_INT 22
22135: PUSH
22136: LD_INT 8
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PPUSH
22143: CALL_OW 69
22147: PUSH
22148: FOR_IN
22149: IFFALSE 22165
// SetSide ( i , 2 ) ;
22151: LD_VAR 0 1
22155: PPUSH
22156: LD_INT 2
22158: PPUSH
22159: CALL_OW 235
22163: GO 22148
22165: POP
22166: POP
// end ;
22167: PPOPN 1
22169: END
// every 0 0$1 trigger omarAttack and not linkedWithRolf and canRolfJoin do var i ;
22170: LD_EXP 23
22174: PUSH
22175: LD_EXP 12
22179: NOT
22180: AND
22181: PUSH
22182: LD_EXP 29
22186: AND
22187: IFFALSE 22278
22189: GO 22191
22191: DISABLE
22192: LD_INT 0
22194: PPUSH
// begin canRolfJoin := false ;
22195: LD_ADDR_EXP 29
22199: PUSH
22200: LD_INT 0
22202: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
22203: LD_STRING M3
22205: PPUSH
22206: CALL_OW 337
// for i in rolfSquad do
22210: LD_ADDR_VAR 0 1
22214: PUSH
22215: LD_EXP 51
22219: PUSH
22220: FOR_IN
22221: IFFALSE 22276
// begin ComExit ( i ) ;
22223: LD_VAR 0 1
22227: PPUSH
22228: CALL 67537 0 1
// AddComAgressiveMove ( i , 147 , 162 ) ;
22232: LD_VAR 0 1
22236: PPUSH
22237: LD_INT 147
22239: PPUSH
22240: LD_INT 162
22242: PPUSH
22243: CALL_OW 174
// AddComWait ( i , 0 0$30 ) ;
22247: LD_VAR 0 1
22251: PPUSH
22252: LD_INT 1050
22254: PPUSH
22255: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 162 ) ;
22259: LD_VAR 0 1
22263: PPUSH
22264: LD_INT 103
22266: PPUSH
22267: LD_INT 162
22269: PPUSH
22270: CALL_OW 174
// end ;
22274: GO 22220
22276: POP
22277: POP
// end ;
22278: PPOPN 1
22280: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf and canRolfJoin do var random ;
22281: LD_EXP 3
22285: PUSH
22286: LD_EXP 47
22290: PPUSH
22291: CALL_OW 256
22295: PUSH
22296: LD_INT 400
22298: LESS
22299: AND
22300: PUSH
22301: LD_EXP 12
22305: NOT
22306: AND
22307: PUSH
22308: LD_EXP 29
22312: AND
22313: IFFALSE 22587
22315: GO 22317
22317: DISABLE
22318: LD_INT 0
22320: PPUSH
// begin DialogueOn ;
22321: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
22325: LD_EXP 47
22329: PPUSH
22330: LD_STRING DRf-rast-f-11
22332: PPUSH
22333: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
22337: LD_EXP 47
22341: PPUSH
22342: LD_STRING DRf-rast-f-12
22344: PPUSH
22345: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
22349: LD_EXP 47
22353: PPUSH
22354: LD_STRING DRf-rast-f-13
22356: PPUSH
22357: CALL_OW 94
// DialogueOff ;
22361: CALL_OW 7
// KillUnit ( Rolf ) ;
22365: LD_EXP 47
22369: PPUSH
22370: CALL_OW 66
// wait ( 0 0$1 ) ;
22374: LD_INT 35
22376: PPUSH
22377: CALL_OW 67
// if not IsOk ( Givi ) then
22381: LD_EXP 35
22385: PPUSH
22386: CALL_OW 302
22390: NOT
22391: IFFALSE 22395
// exit ;
22393: GO 22587
// DialogueOn ;
22395: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
22399: LD_EXP 35
22403: PPUSH
22404: LD_STRING DG-rast-f-14
22406: PPUSH
22407: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
22411: LD_EXP 35
22415: PPUSH
22416: LD_STRING DG-rast-f-15
22418: PPUSH
22419: CALL_OW 88
// if IsOk ( Kaia ) then
22423: LD_EXP 39
22427: PPUSH
22428: CALL_OW 302
22432: IFFALSE 22448
// Say ( Kaia , DK-rast-f-16 ) else
22434: LD_EXP 39
22438: PPUSH
22439: LD_STRING DK-rast-f-16
22441: PPUSH
22442: CALL_OW 88
22446: GO 22535
// if heikeSecondSquad then
22448: LD_EXP 49
22452: IFFALSE 22535
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
22454: LD_ADDR_VAR 0 1
22458: PUSH
22459: LD_EXP 49
22463: PUSH
22464: LD_INT 1
22466: PPUSH
22467: LD_EXP 49
22471: PPUSH
22472: CALL_OW 12
22476: ARRAY
22477: ST_TO_ADDR
// case GetSex ( random ) of 1 :
22478: LD_VAR 0 1
22482: PPUSH
22483: CALL_OW 258
22487: PUSH
22488: LD_INT 1
22490: DOUBLE
22491: EQUAL
22492: IFTRUE 22496
22494: GO 22511
22496: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
22497: LD_VAR 0 1
22501: PPUSH
22502: LD_STRING DArm-rast-f-a-16
22504: PPUSH
22505: CALL_OW 88
22509: GO 22535
22511: LD_INT 2
22513: DOUBLE
22514: EQUAL
22515: IFTRUE 22519
22517: GO 22534
22519: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
22520: LD_VAR 0 1
22524: PPUSH
22525: LD_STRING DArf-rast-f-a-16
22527: PPUSH
22528: CALL_OW 88
22532: GO 22535
22534: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
22535: LD_EXP 35
22539: PPUSH
22540: LD_STRING DG-rast-f-17
22542: PPUSH
22543: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
22547: LD_EXP 35
22551: PPUSH
22552: LD_STRING DG-rast-f-18
22554: PPUSH
22555: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
22559: LD_EXP 35
22563: PPUSH
22564: LD_STRING DG-rast-f-19
22566: PPUSH
22567: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
22571: LD_EXP 35
22575: PPUSH
22576: LD_STRING DG-rast-f-20
22578: PPUSH
22579: CALL_OW 88
// DialogueOff ;
22583: CALL_OW 7
// end ;
22587: PPOPN 1
22589: END
// every 0 0$1 trigger gameActive and SeeArea ( 2 , ruMainBase ) do
22590: LD_EXP 31
22594: PUSH
22595: LD_INT 2
22597: PPUSH
22598: LD_INT 10
22600: PPUSH
22601: CALL_OW 294
22605: AND
22606: IFFALSE 22679
22608: GO 22610
22610: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
22611: LD_EXP 35
22615: PPUSH
22616: LD_STRING DG-Len-1
22618: PPUSH
22619: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
22623: LD_EXP 45
22627: PPUSH
22628: LD_STRING DKs-Len-2
22630: PPUSH
22631: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
22635: LD_EXP 45
22639: PPUSH
22640: LD_STRING DKs-Len-3
22642: PPUSH
22643: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
22647: LD_EXP 34
22651: PPUSH
22652: LD_STRING DH-Len-4
22654: PPUSH
22655: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
22659: LD_EXP 39
22663: PPUSH
22664: LD_STRING DK-Len-5
22666: PPUSH
22667: CALL_OW 88
// leninSpotted := true ;
22671: LD_ADDR_EXP 14
22675: PUSH
22676: LD_INT 1
22678: ST_TO_ADDR
// end ;
22679: END
// every 0 0$1 trigger debug or ( bergkampfArrived and tick > [ 32 32$00 , 30 30$00 , 28 28$00 , 26 26$00 ] [ Difficulty ] ) do var i , tmp , inOmarBase , heikeNearbyOmar ;
22680: LD_EXP 1
22684: PUSH
22685: LD_EXP 3
22689: PUSH
22690: LD_OWVAR 1
22694: PUSH
22695: LD_INT 67200
22697: PUSH
22698: LD_INT 63000
22700: PUSH
22701: LD_INT 58800
22703: PUSH
22704: LD_INT 54600
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: PUSH
22713: LD_OWVAR 67
22717: ARRAY
22718: GREATER
22719: AND
22720: OR
22721: IFFALSE 23458
22723: GO 22725
22725: DISABLE
22726: LD_INT 0
22728: PPUSH
22729: PPUSH
22730: PPUSH
22731: PPUSH
// begin PrepareOmarSquad ;
22732: CALL 5144 0 0
// repeat wait ( 0 0$1 ) ;
22736: LD_INT 35
22738: PPUSH
22739: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
22743: LD_INT 14
22745: PPUSH
22746: LD_INT 22
22748: PUSH
22749: LD_INT 3
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 2
22758: PUSH
22759: LD_INT 21
22761: PUSH
22762: LD_INT 1
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 59
22771: PUSH
22772: EMPTY
22773: LIST
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: LIST
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PPUSH
22784: CALL_OW 70
22788: NOT
22789: IFFALSE 22736
// tmp := FilterUnitsInArea ( ruOmarBase , [ f_side , 2 ] ) ;
22791: LD_ADDR_VAR 0 2
22795: PUSH
22796: LD_INT 14
22798: PPUSH
22799: LD_INT 22
22801: PUSH
22802: LD_INT 2
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PPUSH
22809: CALL_OW 70
22813: ST_TO_ADDR
// inOmarBase := tmp > 0 ;
22814: LD_ADDR_VAR 0 3
22818: PUSH
22819: LD_VAR 0 2
22823: PUSH
22824: LD_INT 0
22826: GREATER
22827: ST_TO_ADDR
// heikeNearbyOmar := IsInArea ( Heike , ruOmarBase ) ;
22828: LD_ADDR_VAR 0 4
22832: PUSH
22833: LD_EXP 34
22837: PPUSH
22838: LD_INT 14
22840: PPUSH
22841: CALL_OW 308
22845: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_type , unit_building ] ) then
22846: LD_VAR 0 2
22850: PPUSH
22851: LD_INT 21
22853: PUSH
22854: LD_INT 3
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PPUSH
22861: CALL_OW 72
22865: IFFALSE 22970
// begin if heikeNearbyOmar then
22867: LD_VAR 0 4
22871: IFFALSE 22887
// Say ( Omar , DOm-Base-1b ) else
22873: LD_EXP 44
22877: PPUSH
22878: LD_STRING DOm-Base-1b
22880: PPUSH
22881: CALL_OW 88
22885: GO 22899
// SayRadio ( Omar , DOm-Base-1br ) ;
22887: LD_EXP 44
22891: PPUSH
22892: LD_STRING DOm-Base-1br
22894: PPUSH
22895: CALL_OW 94
// for i in UnitFilter ( tmp , [ f_type , unit_building ] ) do
22899: LD_ADDR_VAR 0 1
22903: PUSH
22904: LD_VAR 0 2
22908: PPUSH
22909: LD_INT 21
22911: PUSH
22912: LD_INT 3
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PPUSH
22919: CALL_OW 72
22923: PUSH
22924: FOR_IN
22925: IFFALSE 22966
// begin if UnitsInside ( i ) then
22927: LD_VAR 0 1
22931: PPUSH
22932: CALL_OW 313
22936: IFFALSE 22952
// ComExitBuilding ( UnitsInside ( i ) ) ;
22938: LD_VAR 0 1
22942: PPUSH
22943: CALL_OW 313
22947: PPUSH
22948: CALL_OW 122
// SetSide ( i , 5 ) ;
22952: LD_VAR 0 1
22956: PPUSH
22957: LD_INT 5
22959: PPUSH
22960: CALL_OW 235
// end ;
22964: GO 22924
22966: POP
22967: POP
// end else
22968: GO 23063
// if UnitFilter ( tmp , [ f_type , unit_vehicle ] ) then
22970: LD_VAR 0 2
22974: PPUSH
22975: LD_INT 21
22977: PUSH
22978: LD_INT 2
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PPUSH
22985: CALL_OW 72
22989: IFFALSE 23025
// begin if heikeNearbyOmar then
22991: LD_VAR 0 4
22995: IFFALSE 23011
// Say ( Omar , DOm-Base-1v ) else
22997: LD_EXP 44
23001: PPUSH
23002: LD_STRING DOm-Base-1v
23004: PPUSH
23005: CALL_OW 88
23009: GO 23023
// SayRadio ( Omar , DOm-Base-1vr ) end else
23011: LD_EXP 44
23015: PPUSH
23016: LD_STRING DOm-Base-1vr
23018: PPUSH
23019: CALL_OW 94
23023: GO 23063
// if inOmarBase then
23025: LD_VAR 0 3
23029: IFFALSE 23063
// begin if heikeNearbyOmar then
23031: LD_VAR 0 4
23035: IFFALSE 23051
// Say ( Omar , DOm-Base-1h ) else
23037: LD_EXP 44
23041: PPUSH
23042: LD_STRING DOm-Base-1h
23044: PPUSH
23045: CALL_OW 88
23049: GO 23063
// SayRadio ( Omar , DOm-Base-1hr ) end ;
23051: LD_EXP 44
23055: PPUSH
23056: LD_STRING DOm-Base-1hr
23058: PPUSH
23059: CALL_OW 94
// for i in omarSquad do
23063: LD_ADDR_VAR 0 1
23067: PUSH
23068: LD_EXP 52
23072: PUSH
23073: FOR_IN
23074: IFFALSE 23105
// if GetLives ( i ) < 750 then
23076: LD_VAR 0 1
23080: PPUSH
23081: CALL_OW 256
23085: PUSH
23086: LD_INT 750
23088: LESS
23089: IFFALSE 23103
// SetLives ( i , 1000 ) ;
23091: LD_VAR 0 1
23095: PPUSH
23096: LD_INT 1000
23098: PPUSH
23099: CALL_OW 234
23103: GO 23073
23105: POP
23106: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
23107: LD_ADDR_VAR 0 1
23111: PUSH
23112: LD_INT 14
23114: PPUSH
23115: LD_INT 21
23117: PUSH
23118: LD_INT 3
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PPUSH
23125: CALL_OW 70
23129: PUSH
23130: FOR_IN
23131: IFFALSE 23147
// SetSide ( i , 5 ) ;
23133: LD_VAR 0 1
23137: PPUSH
23138: LD_INT 5
23140: PPUSH
23141: CALL_OW 235
23145: GO 23130
23147: POP
23148: POP
// wait ( 0 0$3 ) ;
23149: LD_INT 105
23151: PPUSH
23152: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
23156: LD_INT 5
23158: PPUSH
23159: LD_INT 2
23161: PPUSH
23162: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
23166: LD_EXP 44
23170: PPUSH
23171: CALL_OW 87
// DialogueOn ;
23175: CALL_OW 6
// if heikeNearbyOmar then
23179: LD_VAR 0 4
23183: IFFALSE 23241
// begin Say ( Omar , DOm-Veh-1a ) ;
23185: LD_EXP 44
23189: PPUSH
23190: LD_STRING DOm-Veh-1a
23192: PPUSH
23193: CALL_OW 88
// Say ( Omar , DOm-Veh-2a ) ;
23197: LD_EXP 44
23201: PPUSH
23202: LD_STRING DOm-Veh-2a
23204: PPUSH
23205: CALL_OW 88
// Say ( Omar , DOm-Veh-3a ) ;
23209: LD_EXP 44
23213: PPUSH
23214: LD_STRING DOm-Veh-3a
23216: PPUSH
23217: CALL_OW 88
// if mortarConstructed then
23221: LD_EXP 15
23225: IFFALSE 23239
// Say ( Omar , DOm-Veh-4a ) ;
23227: LD_EXP 44
23231: PPUSH
23232: LD_STRING DOm-Veh-4a
23234: PPUSH
23235: CALL_OW 88
// end else
23239: GO 23295
// begin SayRadio ( Omar , DOm-Veh-1 ) ;
23241: LD_EXP 44
23245: PPUSH
23246: LD_STRING DOm-Veh-1
23248: PPUSH
23249: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
23253: LD_EXP 44
23257: PPUSH
23258: LD_STRING DOm-Veh-2
23260: PPUSH
23261: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
23265: LD_EXP 44
23269: PPUSH
23270: LD_STRING DOm-Veh-3
23272: PPUSH
23273: CALL_OW 94
// if mortarConstructed then
23277: LD_EXP 15
23281: IFFALSE 23295
// SayRadio ( Omar , DOm-Veh-4 ) ;
23283: LD_EXP 44
23287: PPUSH
23288: LD_STRING DOm-Veh-4
23290: PPUSH
23291: CALL_OW 94
// end ; Say ( Heike , DH-Veh-5 ) ;
23295: LD_EXP 34
23299: PPUSH
23300: LD_STRING DH-Veh-5
23302: PPUSH
23303: CALL_OW 88
// if IsOk ( Kurt ) then
23307: LD_EXP 45
23311: PPUSH
23312: CALL_OW 302
23316: IFFALSE 23366
// begin Say ( Kurt , DKs-Veh-6 ) ;
23318: LD_EXP 45
23322: PPUSH
23323: LD_STRING DKs-Veh-6
23325: PPUSH
23326: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
23330: LD_EXP 45
23334: PPUSH
23335: LD_STRING DKs-Veh-7
23337: PPUSH
23338: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
23342: LD_EXP 35
23346: PPUSH
23347: LD_STRING DG-Veh-8
23349: PPUSH
23350: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
23354: LD_EXP 36
23358: PPUSH
23359: LD_STRING DM-Veh-9
23361: PPUSH
23362: CALL_OW 88
// end ; DialogueOff ;
23366: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
23370: LD_STRING M4
23372: PPUSH
23373: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
23377: LD_EXP 44
23381: PPUSH
23382: LD_INT 341
23384: PPUSH
23385: LD_INT 232
23387: PPUSH
23388: CALL_OW 428
23392: PPUSH
23393: CALL_OW 120
// omarArrived := true ;
23397: LD_ADDR_EXP 6
23401: PUSH
23402: LD_INT 1
23404: ST_TO_ADDR
// omarScriptBase := true ;
23405: LD_ADDR_EXP 10
23409: PUSH
23410: LD_INT 1
23412: ST_TO_ADDR
// omarWantVehicles := true ;
23413: LD_ADDR_EXP 18
23417: PUSH
23418: LD_INT 1
23420: ST_TO_ADDR
// if debug then
23421: LD_EXP 1
23425: IFFALSE 23458
// begin wait ( 0 0$25 ) ;
23427: LD_INT 875
23429: PPUSH
23430: CALL_OW 67
// omarScriptBase := false ;
23434: LD_ADDR_EXP 10
23438: PUSH
23439: LD_INT 0
23441: ST_TO_ADDR
// omarWantVehicles := false ;
23442: LD_ADDR_EXP 18
23446: PUSH
23447: LD_INT 0
23449: ST_TO_ADDR
// omarAttack := true ;
23450: LD_ADDR_EXP 23
23454: PUSH
23455: LD_INT 1
23457: ST_TO_ADDR
// end ; end ;
23458: PPOPN 4
23460: END
// every 0 0$1 trigger FilterUnitsInArea ( ruMainBase , [ f_side , 2 ] ) and omarArrived and IsOk ( Omar ) and not omarAttack do
23461: LD_INT 10
23463: PPUSH
23464: LD_INT 22
23466: PUSH
23467: LD_INT 2
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PPUSH
23474: CALL_OW 70
23478: PUSH
23479: LD_EXP 6
23483: AND
23484: PUSH
23485: LD_EXP 44
23489: PPUSH
23490: CALL_OW 302
23494: AND
23495: PUSH
23496: LD_EXP 23
23500: NOT
23501: AND
23502: IFFALSE 23519
23504: GO 23506
23506: DISABLE
// SayRadio ( Omar , DOm-Lenin ) ;
23507: LD_EXP 44
23511: PPUSH
23512: LD_STRING DOm-Lenin
23514: PPUSH
23515: CALL_OW 94
23519: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
23520: LD_EXP 47
23524: PPUSH
23525: CALL_OW 302
23529: PUSH
23530: LD_EXP 12
23534: AND
23535: PUSH
23536: LD_EXP 6
23540: AND
23541: IFFALSE 23645
23543: GO 23545
23545: DISABLE
// begin wait ( 1 1$00 ) ;
23546: LD_INT 2100
23548: PPUSH
23549: CALL_OW 67
// CenterNowOnUnits ( Rolf ) ;
23553: LD_EXP 47
23557: PPUSH
23558: CALL_OW 87
// DialogueOn ;
23562: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
23566: LD_EXP 47
23570: PPUSH
23571: LD_STRING DRf-Veh-10
23573: PPUSH
23574: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
23578: LD_EXP 47
23582: PPUSH
23583: LD_STRING DRf-Veh-11
23585: PPUSH
23586: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
23590: LD_EXP 34
23594: PPUSH
23595: LD_STRING DH-Veh-12
23597: PPUSH
23598: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
23602: LD_EXP 34
23606: PPUSH
23607: LD_STRING DH-Veh-13
23609: PPUSH
23610: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
23614: LD_EXP 47
23618: PPUSH
23619: LD_STRING DRf-Veh-14
23621: PPUSH
23622: CALL_OW 88
// DialogueOff ;
23626: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
23630: LD_STRING M5
23632: PPUSH
23633: CALL_OW 337
// rolfWantVehicles := true ;
23637: LD_ADDR_EXP 17
23641: PUSH
23642: LD_INT 1
23644: ST_TO_ADDR
// end ;
23645: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
23646: LD_EXP 18
23650: IFFALSE 24413
23652: GO 23654
23654: DISABLE
23655: LD_INT 0
23657: PPUSH
23658: PPUSH
23659: PPUSH
23660: PPUSH
23661: PPUSH
23662: PPUSH
// begin wait ( 0 0$3 ) ;
23663: LD_INT 105
23665: PPUSH
23666: CALL_OW 67
// Hint ( OmarVehicles ) ;
23670: LD_STRING OmarVehicles
23672: PPUSH
23673: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
23677: LD_INT 16
23679: PPUSH
23680: LD_INT 1
23682: PPUSH
23683: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
23687: LD_INT 35
23689: PPUSH
23690: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
23694: LD_ADDR_EXP 20
23698: PUSH
23699: LD_EXP 20
23703: PUSH
23704: LD_INT 35
23706: MINUS
23707: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
23708: LD_EXP 20
23712: PUSH
23713: LD_INT 0
23715: LESSEQUAL
23716: IFFALSE 23816
// begin display_strings := [ ] ;
23718: LD_ADDR_OWVAR 47
23722: PUSH
23723: EMPTY
23724: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
23725: LD_STRING M4a
23727: PPUSH
23728: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
23732: LD_INT 16
23734: PPUSH
23735: LD_INT 0
23737: PPUSH
23738: CALL_OW 424
// DialogueOn ;
23742: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
23746: LD_EXP 44
23750: PPUSH
23751: LD_STRING DOm-Veh-b-15
23753: PPUSH
23754: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
23758: LD_EXP 34
23762: PPUSH
23763: LD_STRING DH-Veh-b-16
23765: PPUSH
23766: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
23770: LD_EXP 44
23774: PPUSH
23775: LD_STRING DOm-Veh-b-17
23777: PPUSH
23778: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
23782: LD_EXP 39
23786: PPUSH
23787: LD_STRING DK-Veh-b-18
23789: PPUSH
23790: CALL_OW 88
// DialogueOff ;
23794: CALL_OW 7
// omarAttack := true ;
23798: LD_ADDR_EXP 23
23802: PUSH
23803: LD_INT 1
23805: ST_TO_ADDR
// omarScriptBase := false ;
23806: LD_ADDR_EXP 10
23810: PUSH
23811: LD_INT 0
23813: ST_TO_ADDR
// exit ;
23814: GO 24413
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
23816: LD_EXP 21
23820: PUSH
23821: LD_INT 16
23823: PPUSH
23824: LD_INT 22
23826: PUSH
23827: LD_INT 2
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 21
23836: PUSH
23837: LD_INT 2
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 3
23846: PUSH
23847: LD_INT 2
23849: PUSH
23850: LD_INT 34
23852: PUSH
23853: LD_INT 32
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 34
23862: PUSH
23863: LD_INT 88
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 34
23872: PUSH
23873: LD_INT 31
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 33
23892: PUSH
23893: LD_INT 1
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 58
23902: PUSH
23903: EMPTY
23904: LIST
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: PPUSH
23913: CALL_OW 70
23917: LESSEQUAL
23918: IFFALSE 23687
// omarWaitingForVehiclesTimer := 0 0$00 ;
23920: LD_ADDR_EXP 20
23924: PUSH
23925: LD_INT 0
23927: ST_TO_ADDR
// display_strings := [ ] ;
23928: LD_ADDR_OWVAR 47
23932: PUSH
23933: EMPTY
23934: ST_TO_ADDR
// DialogueOn ;
23935: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
23939: LD_EXP 44
23943: PPUSH
23944: LD_STRING DOm-Veh-a-15
23946: PPUSH
23947: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
23951: LD_EXP 39
23955: PPUSH
23956: LD_STRING DK-Veh-a-16
23958: PPUSH
23959: CALL_OW 88
// DialogueOff ;
23963: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
23967: LD_STRING M4a
23969: PPUSH
23970: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
23974: LD_INT 16
23976: PPUSH
23977: LD_INT 0
23979: PPUSH
23980: CALL_OW 424
// omarHasVehicles := true ;
23984: LD_ADDR_EXP 22
23988: PUSH
23989: LD_INT 1
23991: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23992: LD_INT 35
23994: PPUSH
23995: CALL_OW 67
// until rolfWaitingForVehiclesTimer = 0 0$00 ;
23999: LD_EXP 19
24003: PUSH
24004: LD_INT 0
24006: EQUAL
24007: IFFALSE 23992
// wait ( 1 1$00 ) ;
24009: LD_INT 2100
24011: PPUSH
24012: CALL_OW 67
// omarAttack := true ;
24016: LD_ADDR_EXP 23
24020: PUSH
24021: LD_INT 1
24023: ST_TO_ADDR
// omarScriptBase := false ;
24024: LD_ADDR_EXP 10
24028: PUSH
24029: LD_INT 0
24031: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
24032: LD_ADDR_VAR 0 2
24036: PUSH
24037: LD_INT 16
24039: PPUSH
24040: LD_INT 22
24042: PUSH
24043: LD_INT 2
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 21
24052: PUSH
24053: LD_INT 2
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 33
24062: PUSH
24063: LD_INT 1
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 58
24072: PUSH
24073: EMPTY
24074: LIST
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: PPUSH
24082: CALL_OW 70
24086: ST_TO_ADDR
// for i in tmp do
24087: LD_ADDR_VAR 0 1
24091: PUSH
24092: LD_VAR 0 2
24096: PUSH
24097: FOR_IN
24098: IFFALSE 24126
// begin SetFuel ( i , 100 ) ;
24100: LD_VAR 0 1
24104: PPUSH
24105: LD_INT 100
24107: PPUSH
24108: CALL_OW 240
// SetSide ( i , 5 ) ;
24112: LD_VAR 0 1
24116: PPUSH
24117: LD_INT 5
24119: PPUSH
24120: CALL_OW 235
// end ;
24124: GO 24097
24126: POP
24127: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
24128: LD_ADDR_VAR 0 3
24132: PUSH
24133: LD_EXP 52
24137: PPUSH
24138: LD_INT 25
24140: PUSH
24141: LD_INT 2
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PPUSH
24148: CALL_OW 72
24152: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
24153: LD_ADDR_VAR 0 4
24157: PUSH
24158: LD_EXP 52
24162: PPUSH
24163: LD_INT 3
24165: PUSH
24166: LD_INT 55
24168: PUSH
24169: EMPTY
24170: LIST
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 25
24178: PUSH
24179: LD_INT 3
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PPUSH
24190: CALL_OW 72
24194: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
24195: LD_ADDR_VAR 0 5
24199: PUSH
24200: LD_INT 324
24202: PPUSH
24203: LD_INT 234
24205: PPUSH
24206: CALL_OW 428
24210: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
24211: LD_ADDR_VAR 0 6
24215: PUSH
24216: LD_INT 334
24218: PPUSH
24219: LD_INT 241
24221: PPUSH
24222: CALL_OW 428
24226: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
24227: LD_VAR 0 6
24231: PPUSH
24232: CALL_OW 313
24236: PPUSH
24237: CALL_OW 122
// if eng then
24241: LD_VAR 0 3
24245: IFFALSE 24353
// begin if eng + mech <= tmp then
24247: LD_VAR 0 3
24251: PUSH
24252: LD_VAR 0 4
24256: PLUS
24257: PUSH
24258: LD_VAR 0 2
24262: LESSEQUAL
24263: IFFALSE 24318
// begin ComEnterUnit ( eng , workshop ) ;
24265: LD_VAR 0 3
24269: PPUSH
24270: LD_VAR 0 5
24274: PPUSH
24275: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
24279: LD_VAR 0 3
24283: PPUSH
24284: LD_INT 3
24286: PPUSH
24287: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24291: LD_VAR 0 3
24295: PPUSH
24296: CALL_OW 182
// mech := mech union eng ;
24300: LD_ADDR_VAR 0 4
24304: PUSH
24305: LD_VAR 0 4
24309: PUSH
24310: LD_VAR 0 3
24314: UNION
24315: ST_TO_ADDR
// end else
24316: GO 24353
// begin ComEnterUnit ( eng , armoury ) ;
24318: LD_VAR 0 3
24322: PPUSH
24323: LD_VAR 0 6
24327: PPUSH
24328: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
24332: LD_VAR 0 3
24336: PPUSH
24337: LD_INT 1
24339: PPUSH
24340: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24344: LD_VAR 0 3
24348: PPUSH
24349: CALL_OW 182
// end ; end ; for i := 1 to tmp do
24353: LD_ADDR_VAR 0 1
24357: PUSH
24358: DOUBLE
24359: LD_INT 1
24361: DEC
24362: ST_TO_ADDR
24363: LD_VAR 0 2
24367: PUSH
24368: FOR_TO
24369: IFFALSE 24411
// if i <= mech then
24371: LD_VAR 0 1
24375: PUSH
24376: LD_VAR 0 4
24380: LESSEQUAL
24381: IFFALSE 24409
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
24383: LD_VAR 0 4
24387: PUSH
24388: LD_VAR 0 1
24392: ARRAY
24393: PPUSH
24394: LD_VAR 0 2
24398: PUSH
24399: LD_VAR 0 1
24403: ARRAY
24404: PPUSH
24405: CALL_OW 180
24409: GO 24368
24411: POP
24412: POP
// end ;
24413: PPOPN 6
24415: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i , hasBadWeapons ;
24416: LD_EXP 47
24420: PPUSH
24421: CALL_OW 302
24425: PUSH
24426: LD_EXP 17
24430: AND
24431: IFFALSE 25055
24433: GO 24435
24435: DISABLE
24436: LD_INT 0
24438: PPUSH
24439: PPUSH
// begin repeat wait ( 0 0$1 ) ;
24440: LD_INT 35
24442: PPUSH
24443: CALL_OW 67
// hasBadWeapons := false ;
24447: LD_ADDR_VAR 0 2
24451: PUSH
24452: LD_INT 0
24454: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
24455: LD_ADDR_EXP 19
24459: PUSH
24460: LD_EXP 19
24464: PUSH
24465: LD_INT 35
24467: MINUS
24468: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 then
24469: LD_EXP 19
24473: PUSH
24474: LD_INT 0
24476: LESSEQUAL
24477: IFFALSE 24739
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
24479: LD_ADDR_EXP 19
24483: PUSH
24484: LD_INT 0
24486: ST_TO_ADDR
// display_strings := [ ] ;
24487: LD_ADDR_OWVAR 47
24491: PUSH
24492: EMPTY
24493: ST_TO_ADDR
// DialogueOn ;
24494: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
24498: LD_EXP 47
24502: PPUSH
24503: LD_STRING DRf-Veh-b-19
24505: PPUSH
24506: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
24510: LD_EXP 47
24514: PPUSH
24515: LD_STRING DRf-Veh-b-20
24517: PPUSH
24518: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
24522: LD_EXP 34
24526: PPUSH
24527: LD_STRING DH-Veh-b-21
24529: PPUSH
24530: CALL_OW 88
// if IsOk ( Givi ) then
24534: LD_EXP 35
24538: PPUSH
24539: CALL_OW 302
24543: IFFALSE 24581
// begin Say ( Givi , DG-Veh-b-22 ) ;
24545: LD_EXP 35
24549: PPUSH
24550: LD_STRING DG-Veh-b-22
24552: PPUSH
24553: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
24557: LD_EXP 34
24561: PPUSH
24562: LD_STRING DH-Veh-b-23
24564: PPUSH
24565: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
24569: LD_EXP 35
24573: PPUSH
24574: LD_STRING DG-Veh-b-24
24576: PPUSH
24577: CALL_OW 88
// end ; DialogueOff ;
24581: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
24585: LD_STRING M5a
24587: PPUSH
24588: CALL_OW 337
// for i in rolfSquad do
24592: LD_ADDR_VAR 0 1
24596: PUSH
24597: LD_EXP 51
24601: PUSH
24602: FOR_IN
24603: IFFALSE 24720
// begin SetSide ( i , 8 ) ;
24605: LD_VAR 0 1
24609: PPUSH
24610: LD_INT 8
24612: PPUSH
24613: CALL_OW 235
// if IsDriver ( i ) then
24617: LD_VAR 0 1
24621: PPUSH
24622: CALL 64743 0 1
24626: IFFALSE 24698
// begin if not GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
24628: LD_VAR 0 1
24632: PPUSH
24633: CALL_OW 310
24637: PPUSH
24638: CALL_OW 264
24642: PUSH
24643: LD_INT 51
24645: PUSH
24646: LD_INT 52
24648: PUSH
24649: LD_INT 32
24651: PUSH
24652: LD_INT 88
24654: PUSH
24655: LD_INT 31
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: IN
24665: NOT
24666: IFFALSE 24687
// SetSide ( IsInUnit ( i ) , 8 ) else
24668: LD_VAR 0 1
24672: PPUSH
24673: CALL_OW 310
24677: PPUSH
24678: LD_INT 8
24680: PPUSH
24681: CALL_OW 235
24685: GO 24696
// ComExitVehicle ( i ) ;
24687: LD_VAR 0 1
24691: PPUSH
24692: CALL_OW 121
// end else
24696: GO 24718
// if IsInUnit ( i ) then
24698: LD_VAR 0 1
24702: PPUSH
24703: CALL_OW 310
24707: IFFALSE 24718
// ComExitBuilding ( i ) ;
24709: LD_VAR 0 1
24713: PPUSH
24714: CALL_OW 122
// end ;
24718: GO 24602
24720: POP
24721: POP
// wait ( 0 0$10 ) ;
24722: LD_INT 350
24724: PPUSH
24725: CALL_OW 67
// rolfAttack := true ;
24729: LD_ADDR_EXP 32
24733: PUSH
24734: LD_INT 1
24736: ST_TO_ADDR
// exit ;
24737: GO 25055
// end ; if IsDead ( Rolf ) then
24739: LD_EXP 47
24743: PPUSH
24744: CALL_OW 301
24748: IFFALSE 24759
// begin ChangeMissionObjectives ( M5a ) ;
24750: LD_STRING M5a
24752: PPUSH
24753: CALL_OW 337
// exit ;
24757: GO 25055
// end ; if Count ( UnitFilter ( rolfSquad , [ f_driving ] ) ) = Count ( rolfSquad ) then
24759: LD_EXP 51
24763: PPUSH
24764: LD_INT 55
24766: PUSH
24767: EMPTY
24768: LIST
24769: PPUSH
24770: CALL_OW 72
24774: PPUSH
24775: CALL 31539 0 1
24779: PUSH
24780: LD_EXP 51
24784: PPUSH
24785: CALL 31539 0 1
24789: EQUAL
24790: IFFALSE 24907
// begin for i in UnitFilter ( rolfSquad , [ f_driving ] ) do
24792: LD_ADDR_VAR 0 1
24796: PUSH
24797: LD_EXP 51
24801: PPUSH
24802: LD_INT 55
24804: PUSH
24805: EMPTY
24806: LIST
24807: PPUSH
24808: CALL_OW 72
24812: PUSH
24813: FOR_IN
24814: IFFALSE 24874
// if GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
24816: LD_VAR 0 1
24820: PPUSH
24821: CALL_OW 310
24825: PPUSH
24826: CALL_OW 264
24830: PUSH
24831: LD_INT 51
24833: PUSH
24834: LD_INT 52
24836: PUSH
24837: LD_INT 32
24839: PUSH
24840: LD_INT 88
24842: PUSH
24843: LD_INT 31
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: IN
24853: IFFALSE 24872
// begin hasBadWeapons := true ;
24855: LD_ADDR_VAR 0 2
24859: PUSH
24860: LD_INT 1
24862: ST_TO_ADDR
// Query ( QBadWeapon ) ;
24863: LD_STRING QBadWeapon
24865: PPUSH
24866: CALL_OW 97
// break ;
24870: GO 24874
// end ;
24872: GO 24813
24874: POP
24875: POP
// if not hasBadWeapons then
24876: LD_VAR 0 2
24880: NOT
24881: IFFALSE 24907
// if Query ( QRolf ) = 1 then
24883: LD_STRING QRolf
24885: PPUSH
24886: CALL_OW 97
24890: PUSH
24891: LD_INT 1
24893: EQUAL
24894: IFFALSE 24900
// break else
24896: GO 24911
24898: GO 24907
// wait ( 0 0$15 ) ;
24900: LD_INT 525
24902: PPUSH
24903: CALL_OW 67
// end ; until false ;
24907: LD_INT 0
24909: IFFALSE 24440
// rolfWaitingForVehiclesTimer := 0 0$00 ;
24911: LD_ADDR_EXP 19
24915: PUSH
24916: LD_INT 0
24918: ST_TO_ADDR
// display_strings := [ ] ;
24919: LD_ADDR_OWVAR 47
24923: PUSH
24924: EMPTY
24925: ST_TO_ADDR
// DialogueOn ;
24926: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
24930: LD_EXP 47
24934: PPUSH
24935: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
24939: LD_EXP 47
24943: PPUSH
24944: LD_STRING DRf-Veh-a-17
24946: PPUSH
24947: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
24951: LD_EXP 34
24955: PPUSH
24956: LD_STRING DH-08-Veh-a-18
24958: PPUSH
24959: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
24963: LD_EXP 47
24967: PPUSH
24968: LD_STRING DRf-Veh-a-19
24970: PPUSH
24971: CALL_OW 88
// DialogueOff ;
24975: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
24979: LD_STRING M5a
24981: PPUSH
24982: CALL_OW 337
// rolfHasVehicles := true ;
24986: LD_ADDR_EXP 16
24990: PUSH
24991: LD_INT 1
24993: ST_TO_ADDR
// for i in rolfSquad do
24994: LD_ADDR_VAR 0 1
24998: PUSH
24999: LD_EXP 51
25003: PUSH
25004: FOR_IN
25005: IFFALSE 25038
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
25007: LD_VAR 0 1
25011: PPUSH
25012: CALL_OW 310
25016: PPUSH
25017: LD_INT 8
25019: PPUSH
25020: CALL_OW 235
// SetSide ( i , 8 ) ;
25024: LD_VAR 0 1
25028: PPUSH
25029: LD_INT 8
25031: PPUSH
25032: CALL_OW 235
// end ;
25036: GO 25004
25038: POP
25039: POP
// wait ( 0 0$10 ) ;
25040: LD_INT 350
25042: PPUSH
25043: CALL_OW 67
// rolfAttack := true ;
25047: LD_ADDR_EXP 32
25051: PUSH
25052: LD_INT 1
25054: ST_TO_ADDR
// end ;
25055: PPOPN 2
25057: END
// every 0 0$1 trigger rolfAttack and omarAttack do
25058: LD_EXP 32
25062: PUSH
25063: LD_EXP 23
25067: AND
25068: IFFALSE 25080
25070: GO 25072
25072: DISABLE
// ChangeMissionObjectives ( M6a ) ;
25073: LD_STRING M6a
25075: PPUSH
25076: CALL_OW 337
25080: END
// every 0 0$1 trigger leninSpotted do
25081: LD_EXP 14
25085: IFFALSE 25173
25087: GO 25089
25089: DISABLE
// begin wait ( 0 0$10 ) ;
25090: LD_INT 350
25092: PPUSH
25093: CALL_OW 67
// DialogueOn ;
25097: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
25101: LD_EXP 46
25105: PPUSH
25106: LD_STRING DA-Transmission-1
25108: PPUSH
25109: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
25113: LD_EXP 53
25117: PPUSH
25118: LD_STRING DMzw-Transmission-2
25120: PPUSH
25121: CALL_OW 94
// if gaidarKilled then
25125: LD_EXP 7
25129: IFFALSE 25145
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
25131: LD_EXP 53
25135: PPUSH
25136: LD_STRING DMzw-Transmission-3
25138: PPUSH
25139: CALL_OW 94
25143: GO 25157
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
25145: LD_EXP 53
25149: PPUSH
25150: LD_STRING DMzw-Transmission-a-3
25152: PPUSH
25153: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
25157: LD_EXP 34
25161: PPUSH
25162: LD_STRING DH-Transmission-4
25164: PPUSH
25165: CALL_OW 88
// DialogueOff ;
25169: CALL_OW 7
// end ;
25173: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
25174: LD_INT 22
25176: PUSH
25177: LD_INT 3
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 25
25186: PUSH
25187: LD_INT 9
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 101
25196: PUSH
25197: LD_INT 2
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: LIST
25208: PPUSH
25209: CALL_OW 69
25213: PUSH
25214: LD_EXP 34
25218: PPUSH
25219: CALL_OW 302
25223: AND
25224: IFFALSE 25304
25226: GO 25228
25228: DISABLE
// begin wait ( 0 0$3 ) ;
25229: LD_INT 105
25231: PPUSH
25232: CALL_OW 67
// DialogueOn ;
25236: CALL_OW 6
// CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
25240: LD_INT 22
25242: PUSH
25243: LD_INT 3
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 25
25252: PUSH
25253: LD_INT 9
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 101
25262: PUSH
25263: LD_INT 2
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: LIST
25274: PPUSH
25275: CALL_OW 69
25279: PUSH
25280: LD_INT 1
25282: ARRAY
25283: PPUSH
25284: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
25288: LD_EXP 34
25292: PPUSH
25293: LD_STRING DH-Rubazooka-1
25295: PPUSH
25296: CALL_OW 88
// DialogueOff ;
25300: CALL_OW 7
// end ;
25304: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
25305: LD_INT 19
25307: PPUSH
25308: LD_INT 22
25310: PUSH
25311: LD_INT 3
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PPUSH
25318: CALL_OW 70
25322: PUSH
25323: LD_EXP 28
25327: AND
25328: IFFALSE 25387
25330: GO 25332
25332: DISABLE
// begin DialogueOn ;
25333: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25337: LD_INT 19
25339: PPUSH
25340: LD_INT 22
25342: PUSH
25343: LD_INT 3
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PPUSH
25350: CALL_OW 70
25354: PPUSH
25355: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
25359: LD_EXP 34
25363: PPUSH
25364: LD_STRING DH-Ruattfirst-1
25366: PPUSH
25367: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
25371: LD_EXP 34
25375: PPUSH
25376: LD_STRING DH-Ruattfirst-2
25378: PPUSH
25379: CALL_OW 88
// DialogueOff ;
25383: CALL_OW 7
// end ;
25387: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
25388: LD_INT 19
25390: PPUSH
25391: LD_INT 22
25393: PUSH
25394: LD_INT 3
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PPUSH
25401: CALL_OW 70
25405: PUSH
25406: LD_EXP 28
25410: NOT
25411: AND
25412: IFFALSE 25459
25414: GO 25416
25416: DISABLE
// begin DialogueOn ;
25417: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25421: LD_INT 19
25423: PPUSH
25424: LD_INT 22
25426: PUSH
25427: LD_INT 3
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PPUSH
25434: CALL_OW 70
25438: PPUSH
25439: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
25443: LD_EXP 34
25447: PPUSH
25448: LD_STRING DH-Ruattnext-1
25450: PPUSH
25451: CALL_OW 88
// DialogueOff ;
25455: CALL_OW 7
// end ;
25459: END
// every 0 0$3 trigger IsDead ( Morozov ) and IsOk ( Omar ) do
25460: LD_EXP 53
25464: PPUSH
25465: CALL_OW 301
25469: PUSH
25470: LD_EXP 44
25474: PPUSH
25475: CALL_OW 302
25479: AND
25480: IFFALSE 25497
25482: GO 25484
25484: DISABLE
// SayRadio ( Omar , DOm-Morozov ) ;
25485: LD_EXP 44
25489: PPUSH
25490: LD_STRING DOm-Morozov
25492: PPUSH
25493: CALL_OW 94
25497: END
// every 0 0$1 trigger gameActive and GetResourceType ( GetBase ( arDepot ) , mat_oil ) <= 30 do
25498: LD_EXP 31
25502: PUSH
25503: LD_EXP 48
25507: PPUSH
25508: CALL_OW 274
25512: PPUSH
25513: LD_INT 2
25515: PPUSH
25516: CALL_OW 275
25520: PUSH
25521: LD_INT 30
25523: LESSEQUAL
25524: AND
25525: IFFALSE 25615
25527: GO 25529
25529: DISABLE
// begin wait ( 0 0$10 ) ;
25530: LD_INT 350
25532: PPUSH
25533: CALL_OW 67
// DialogueOn ;
25537: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
25541: LD_EXP 34
25545: PPUSH
25546: LD_STRING DH-Fuel-1
25548: PPUSH
25549: CALL_OW 88
// if IsOk ( Givi ) then
25553: LD_EXP 35
25557: PPUSH
25558: CALL_OW 302
25562: IFFALSE 25600
// begin Say ( Givi , DG-Fuel-2 ) ;
25564: LD_EXP 35
25568: PPUSH
25569: LD_STRING DG-Fuel-2
25571: PPUSH
25572: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
25576: LD_EXP 35
25580: PPUSH
25581: LD_STRING DG-Fuel-3
25583: PPUSH
25584: CALL_OW 88
// Say ( Givi , DG-Fuel-4 ) ;
25588: LD_EXP 35
25592: PPUSH
25593: LD_STRING DG-Fuel-4
25595: PPUSH
25596: CALL_OW 88
// end ; DialogueOff ;
25600: CALL_OW 7
// Query ( QOil ) ;
25604: LD_STRING QOil
25606: PPUSH
25607: CALL_OW 97
// GoForOil ( ) ;
25611: CALL 8886 0 0
// end ;
25615: END
// every 0 0$1 trigger ( leninSpotted and omarAttack ) or IsDead ( Morozov ) do
25616: LD_EXP 14
25620: PUSH
25621: LD_EXP 23
25625: AND
25626: PUSH
25627: LD_EXP 53
25631: PPUSH
25632: CALL_OW 301
25636: OR
25637: IFFALSE 25978
25639: GO 25641
25641: DISABLE
// begin if IsDead ( Morozov ) then
25642: LD_EXP 53
25646: PPUSH
25647: CALL_OW 301
25651: IFFALSE 25662
// wait ( 1 1$45 ) else
25653: LD_INT 3675
25655: PPUSH
25656: CALL_OW 67
25660: GO 25690
// wait ( [ 9 9$30 , 8 8$00 , 7 7$40 , 6 6$30 ] [ Difficulty ] ) ;
25662: LD_INT 19950
25664: PUSH
25665: LD_INT 16800
25667: PUSH
25668: LD_INT 16100
25670: PUSH
25671: LD_INT 13650
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: PUSH
25680: LD_OWVAR 67
25684: ARRAY
25685: PPUSH
25686: CALL_OW 67
// DialogueOn ;
25690: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
25694: LD_EXP 42
25698: PPUSH
25699: LD_STRING DShar-End-1
25701: PPUSH
25702: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
25706: LD_EXP 34
25710: PPUSH
25711: LD_STRING DH-End-2
25713: PPUSH
25714: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
25718: LD_EXP 42
25722: PPUSH
25723: LD_STRING DShar-End-3
25725: PPUSH
25726: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
25730: LD_EXP 34
25734: PPUSH
25735: LD_STRING DH-End-4
25737: PPUSH
25738: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
25742: LD_EXP 42
25746: PPUSH
25747: LD_STRING DShar-End-5
25749: PPUSH
25750: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
25754: LD_EXP 42
25758: PPUSH
25759: LD_STRING DShar-End-6
25761: PPUSH
25762: CALL_OW 94
// dwait ( 0 0$2 ) ;
25766: LD_INT 70
25768: PPUSH
25769: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
25773: LD_EXP 34
25777: PPUSH
25778: LD_STRING DH-End-7
25780: PPUSH
25781: CALL_OW 88
// DialogueOff ;
25785: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
25789: LD_STRING M6
25791: PPUSH
25792: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
25796: LD_INT 17
25798: PPUSH
25799: LD_INT 1
25801: PPUSH
25802: CALL_OW 424
// escapeAllowed := true ;
25806: LD_ADDR_EXP 24
25810: PUSH
25811: LD_INT 1
25813: ST_TO_ADDR
// wait ( 0 0$2 ) ;
25814: LD_INT 70
25816: PPUSH
25817: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
25821: LD_EXP 45
25825: PPUSH
25826: LD_STRING DKs-End-8
25828: PPUSH
25829: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
25833: LD_EXP 39
25837: PPUSH
25838: LD_STRING DK-End-10
25840: PPUSH
25841: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
25845: LD_EXP 45
25849: PPUSH
25850: LD_STRING DKs-End-9
25852: PPUSH
25853: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
25857: LD_EXP 41
25861: PPUSH
25862: LD_STRING DMar-End-11
25864: PPUSH
25865: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
25869: LD_STRING 05_DrugsTested
25871: PPUSH
25872: LD_EXP 1
25876: PPUSH
25877: CALL_OW 30
25881: IFFALSE 25895
// Say ( Mike , DM-End-12 ) ;
25883: LD_EXP 36
25887: PPUSH
25888: LD_STRING DM-End-12
25890: PPUSH
25891: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
25895: LD_EXP 43
25899: PPUSH
25900: LD_STRING DO-End-13
25902: PPUSH
25903: CALL_OW 88
// if IsOk ( Sophia ) then
25907: LD_EXP 40
25911: PPUSH
25912: CALL_OW 302
25916: IFFALSE 25942
// begin Say ( Sophia , DS-End-15 ) ;
25918: LD_EXP 40
25922: PPUSH
25923: LD_STRING DS-End-15
25925: PPUSH
25926: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
25930: LD_EXP 39
25934: PPUSH
25935: LD_STRING DK-End-16
25937: PPUSH
25938: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
25942: LD_EXP 35
25946: PPUSH
25947: LD_STRING DG-End-17
25949: PPUSH
25950: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
25954: LD_EXP 35
25958: PPUSH
25959: LD_STRING DG-End-18
25961: PPUSH
25962: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
25966: LD_EXP 35
25970: PPUSH
25971: LD_STRING DG-End-19
25973: PPUSH
25974: CALL_OW 88
// end ;
25978: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
25979: LD_EXP 24
25983: IFFALSE 26122
25985: GO 25987
25987: DISABLE
25988: LD_INT 0
25990: PPUSH
25991: PPUSH
// begin repeat wait ( 0 0$1 ) ;
25992: LD_INT 35
25994: PPUSH
25995: CALL_OW 67
// display_strings := [ #X106-2 , escapeTimer ] ;
25999: LD_ADDR_OWVAR 47
26003: PUSH
26004: LD_STRING #X106-2
26006: PUSH
26007: LD_EXP 25
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
26016: LD_ADDR_EXP 25
26020: PUSH
26021: LD_EXP 25
26025: PUSH
26026: LD_INT 35
26028: MINUS
26029: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
26030: LD_ADDR_VAR 0 2
26034: PUSH
26035: LD_INT 17
26037: PPUSH
26038: LD_INT 22
26040: PUSH
26041: LD_INT 2
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 21
26050: PUSH
26051: LD_INT 1
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 23
26060: PUSH
26061: LD_INT 2
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: LIST
26072: PPUSH
26073: CALL_OW 71
26077: ST_TO_ADDR
// if not outsiders then
26078: LD_VAR 0 2
26082: NOT
26083: IFFALSE 26099
// begin escapeAllowed := false ;
26085: LD_ADDR_EXP 24
26089: PUSH
26090: LD_INT 0
26092: ST_TO_ADDR
// MissionWin ;
26093: CALL 26125 0 0
// exit ;
26097: GO 26122
// end ; if escapeTimer <= 0 0$00 then
26099: LD_EXP 25
26103: PUSH
26104: LD_INT 0
26106: LESSEQUAL
26107: IFFALSE 26118
// begin YouLost ( TimeOut ) ;
26109: LD_STRING TimeOut
26111: PPUSH
26112: CALL_OW 104
// exit ;
26116: GO 26122
// end ; until false ;
26118: LD_INT 0
26120: IFFALSE 25992
// end ;
26122: PPOPN 2
26124: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
26125: LD_INT 0
26127: PPUSH
26128: PPUSH
26129: PPUSH
26130: PPUSH
26131: PPUSH
// if tick <= 55 55$00 then
26132: LD_OWVAR 1
26136: PUSH
26137: LD_INT 115500
26139: LESSEQUAL
26140: IFFALSE 26149
// SetAchievement ( ACH_HSPEED_6 ) ;
26142: LD_STRING ACH_HSPEED_6
26144: PPUSH
26145: CALL_OW 543
// Say ( Heike , DH-End-20 ) ;
26149: LD_EXP 34
26153: PPUSH
26154: LD_STRING DH-End-20
26156: PPUSH
26157: CALL_OW 88
// if rolfDied then
26161: LD_EXP 13
26165: IFFALSE 26180
// AddMedal ( med1 , - 1 ) else
26167: LD_STRING med1
26169: PPUSH
26170: LD_INT 1
26172: NEG
26173: PPUSH
26174: CALL_OW 101
26178: GO 26210
// if not canRolfJoin then
26180: LD_EXP 29
26184: NOT
26185: IFFALSE 26200
// AddMedal ( med1 , - 2 ) else
26187: LD_STRING med1
26189: PPUSH
26190: LD_INT 2
26192: NEG
26193: PPUSH
26194: CALL_OW 101
26198: GO 26210
// AddMedal ( med1 , 1 ) ;
26200: LD_STRING med1
26202: PPUSH
26203: LD_INT 1
26205: PPUSH
26206: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
26210: LD_EXP 22
26214: PUSH
26215: LD_EXP 16
26219: AND
26220: IFFALSE 26234
// AddMedal ( med2 , 1 ) else
26222: LD_STRING med2
26224: PPUSH
26225: LD_INT 1
26227: PPUSH
26228: CALL_OW 101
26232: GO 26283
// if omarHasVehicles then
26234: LD_EXP 22
26238: IFFALSE 26253
// AddMedal ( med2 , - 1 ) else
26240: LD_STRING med2
26242: PPUSH
26243: LD_INT 1
26245: NEG
26246: PPUSH
26247: CALL_OW 101
26251: GO 26283
// if rolfHasVehicles then
26253: LD_EXP 16
26257: IFFALSE 26272
// AddMedal ( med2 , - 2 ) else
26259: LD_STRING med2
26261: PPUSH
26262: LD_INT 2
26264: NEG
26265: PPUSH
26266: CALL_OW 101
26270: GO 26283
// AddMedal ( med2 , - 3 ) ;
26272: LD_STRING med2
26274: PPUSH
26275: LD_INT 3
26277: NEG
26278: PPUSH
26279: CALL_OW 101
// if ruLoseCounter >= [ 20 , 30 , 40 , 50 ] [ Difficulty ] and heikeLoseCounter = 0 then
26283: LD_EXP 5
26287: PUSH
26288: LD_INT 20
26290: PUSH
26291: LD_INT 30
26293: PUSH
26294: LD_INT 40
26296: PUSH
26297: LD_INT 50
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: PUSH
26306: LD_OWVAR 67
26310: ARRAY
26311: GREATEREQUAL
26312: PUSH
26313: LD_EXP 26
26317: PUSH
26318: LD_INT 0
26320: EQUAL
26321: AND
26322: IFFALSE 26336
// AddMedal ( med3 , 1 ) else
26324: LD_STRING med3
26326: PPUSH
26327: LD_INT 1
26329: PPUSH
26330: CALL_OW 101
26334: GO 26366
// if heikeLoseCounter then
26336: LD_EXP 26
26340: IFFALSE 26355
// AddMedal ( med3 , - 2 ) else
26342: LD_STRING med3
26344: PPUSH
26345: LD_INT 2
26347: NEG
26348: PPUSH
26349: CALL_OW 101
26353: GO 26366
// AddMedal ( med3 , - 1 ) ;
26355: LD_STRING med3
26357: PPUSH
26358: LD_INT 1
26360: NEG
26361: PPUSH
26362: CALL_OW 101
// GiveMedals ( MAIN ) ;
26366: LD_STRING MAIN
26368: PPUSH
26369: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
26373: LD_INT 22
26375: PUSH
26376: LD_INT 2
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 23
26385: PUSH
26386: LD_INT 2
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 21
26395: PUSH
26396: LD_INT 1
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: LIST
26407: PPUSH
26408: CALL_OW 69
26412: PPUSH
26413: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
26417: LD_EXP 34
26421: PPUSH
26422: LD_STRING 06_Heike
26424: PPUSH
26425: CALL_OW 38
// if Aviradze then
26429: LD_EXP 46
26433: IFFALSE 26447
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
26435: LD_EXP 46
26439: PPUSH
26440: LD_STRING 06_Aviradze
26442: PPUSH
26443: CALL_OW 38
// if Ibrahim then
26447: LD_EXP 37
26451: IFFALSE 26465
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
26453: LD_EXP 37
26457: PPUSH
26458: LD_STRING 06_Ibrahim
26460: PPUSH
26461: CALL_OW 38
// if Kamil then
26465: LD_EXP 38
26469: IFFALSE 26483
// SaveCharacters ( Kamil , 06_Kamil ) ;
26471: LD_EXP 38
26475: PPUSH
26476: LD_STRING 06_Kamil
26478: PPUSH
26479: CALL_OW 38
// if Sophia then
26483: LD_EXP 40
26487: IFFALSE 26501
// SaveCharacters ( Sophia , 06_Sophia ) ;
26489: LD_EXP 40
26493: PPUSH
26494: LD_STRING 06_Sophia
26496: PPUSH
26497: CALL_OW 38
// if Kaia then
26501: LD_EXP 39
26505: IFFALSE 26519
// SaveCharacters ( Kaia , 06_Kaia ) ;
26507: LD_EXP 39
26511: PPUSH
26512: LD_STRING 06_Kaia
26514: PPUSH
26515: CALL_OW 38
// if Givi then
26519: LD_EXP 35
26523: IFFALSE 26537
// SaveCharacters ( Givi , 06_Givi ) ;
26525: LD_EXP 35
26529: PPUSH
26530: LD_STRING 06_Givi
26532: PPUSH
26533: CALL_OW 38
// if Olaf then
26537: LD_EXP 43
26541: IFFALSE 26555
// SaveCharacters ( Olaf , 06_Olaf ) ;
26543: LD_EXP 43
26547: PPUSH
26548: LD_STRING 06_Olaf
26550: PPUSH
26551: CALL_OW 38
// if Mike then
26555: LD_EXP 36
26559: IFFALSE 26573
// SaveCharacters ( Mike , 06_Mike ) ;
26561: LD_EXP 36
26565: PPUSH
26566: LD_STRING 06_Mike
26568: PPUSH
26569: CALL_OW 38
// if Markov then
26573: LD_EXP 41
26577: IFFALSE 26591
// SaveCharacters ( Markov , 06_Markov ) ;
26579: LD_EXP 41
26583: PPUSH
26584: LD_STRING 06_Markov
26586: PPUSH
26587: CALL_OW 38
// if Kurt then
26591: LD_EXP 45
26595: IFFALSE 26609
// SaveCharacters ( Kurt , 06_Kurt ) ;
26597: LD_EXP 45
26601: PPUSH
26602: LD_STRING 06_Kurt
26604: PPUSH
26605: CALL_OW 38
// if heikeSecondSquad then
26609: LD_EXP 49
26613: IFFALSE 26627
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
26615: LD_EXP 49
26619: PPUSH
26620: LD_STRING 06_others
26622: PPUSH
26623: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
26627: LD_ADDR_VAR 0 3
26631: PUSH
26632: LD_INT 22
26634: PUSH
26635: LD_INT 2
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 23
26644: PUSH
26645: LD_INT 0
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PPUSH
26656: CALL_OW 69
26660: ST_TO_ADDR
// if tmp then
26661: LD_VAR 0 3
26665: IFFALSE 26679
// SaveCharacters ( tmp , 06_apes ) ;
26667: LD_VAR 0 3
26671: PPUSH
26672: LD_STRING 06_apes
26674: PPUSH
26675: CALL_OW 38
// if Rolf then
26679: LD_EXP 47
26683: IFFALSE 26734
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
26685: LD_EXP 47
26689: PPUSH
26690: LD_STRING 06_Rolf
26692: PPUSH
26693: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
26697: LD_STRING enableBioCharacter(BIO_ROLF)
26699: PPUSH
26700: CALL_OW 559
// if rolfSquad diff Rolf then
26704: LD_EXP 51
26708: PUSH
26709: LD_EXP 47
26713: DIFF
26714: IFFALSE 26734
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
26716: LD_EXP 51
26720: PUSH
26721: LD_EXP 47
26725: DIFF
26726: PPUSH
26727: LD_STRING 06_RolfSquad
26729: PPUSH
26730: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
26734: LD_ADDR_VAR 0 3
26738: PUSH
26739: LD_INT 17
26741: PPUSH
26742: LD_INT 21
26744: PUSH
26745: LD_INT 2
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PPUSH
26752: CALL_OW 70
26756: ST_TO_ADDR
// if tmp then
26757: LD_VAR 0 3
26761: IFFALSE 27055
// begin tmp2 := [ ] ;
26763: LD_ADDR_VAR 0 4
26767: PUSH
26768: EMPTY
26769: ST_TO_ADDR
// for i in tmp do
26770: LD_ADDR_VAR 0 2
26774: PUSH
26775: LD_VAR 0 3
26779: PUSH
26780: FOR_IN
26781: IFFALSE 27041
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
26783: LD_VAR 0 2
26787: PPUSH
26788: CALL_OW 264
26792: PUSH
26793: LD_INT 32
26795: PUSH
26796: LD_INT 12
26798: PUSH
26799: LD_INT 51
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: LIST
26806: IN
26807: IFFALSE 26944
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
26809: LD_ADDR_VAR 0 5
26813: PUSH
26814: LD_VAR 0 2
26818: PPUSH
26819: LD_INT 1
26821: PPUSH
26822: CALL_OW 289
26826: PUSH
26827: LD_VAR 0 2
26831: PPUSH
26832: LD_INT 2
26834: PPUSH
26835: CALL_OW 289
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
26844: LD_ADDR_VAR 0 4
26848: PUSH
26849: LD_VAR 0 4
26853: PPUSH
26854: LD_VAR 0 4
26858: PUSH
26859: LD_INT 1
26861: PLUS
26862: PPUSH
26863: LD_VAR 0 2
26867: PPUSH
26868: CALL_OW 265
26872: PUSH
26873: LD_VAR 0 2
26877: PPUSH
26878: CALL_OW 262
26882: PUSH
26883: LD_VAR 0 2
26887: PPUSH
26888: CALL_OW 263
26892: PUSH
26893: LD_VAR 0 2
26897: PPUSH
26898: CALL_OW 264
26902: PUSH
26903: LD_VAR 0 2
26907: PPUSH
26908: CALL_OW 248
26912: PUSH
26913: LD_VAR 0 2
26917: PPUSH
26918: CALL_OW 256
26922: PUSH
26923: LD_VAR 0 5
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: PPUSH
26937: CALL_OW 1
26941: ST_TO_ADDR
// end else
26942: GO 27039
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
26944: LD_ADDR_VAR 0 4
26948: PUSH
26949: LD_VAR 0 4
26953: PPUSH
26954: LD_VAR 0 4
26958: PUSH
26959: LD_INT 1
26961: PLUS
26962: PPUSH
26963: LD_VAR 0 2
26967: PPUSH
26968: CALL_OW 265
26972: PUSH
26973: LD_VAR 0 2
26977: PPUSH
26978: CALL_OW 262
26982: PUSH
26983: LD_VAR 0 2
26987: PPUSH
26988: CALL_OW 263
26992: PUSH
26993: LD_VAR 0 2
26997: PPUSH
26998: CALL_OW 264
27002: PUSH
27003: LD_VAR 0 2
27007: PPUSH
27008: CALL_OW 248
27012: PUSH
27013: LD_VAR 0 2
27017: PPUSH
27018: CALL_OW 256
27022: PUSH
27023: EMPTY
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: PPUSH
27034: CALL_OW 1
27038: ST_TO_ADDR
27039: GO 26780
27041: POP
27042: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
27043: LD_VAR 0 4
27047: PPUSH
27048: LD_STRING 06_Vehicles
27050: PPUSH
27051: CALL_OW 39
// end ; YouWin ;
27055: CALL_OW 103
// end ; end_of_file
27059: LD_VAR 0 1
27063: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
27064: LD_INT 0
27066: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
27067: LD_VAR 0 1
27071: PPUSH
27072: LD_VAR 0 2
27076: PPUSH
27077: CALL 87446 0 2
// if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
27081: LD_VAR 0 1
27085: PPUSH
27086: CALL_OW 255
27090: PUSH
27091: LD_INT 2
27093: EQUAL
27094: PUSH
27095: LD_OWVAR 52
27099: AND
27100: PUSH
27101: LD_VAR 0 1
27105: PPUSH
27106: CALL_OW 263
27110: PUSH
27111: LD_INT 1
27113: EQUAL
27114: AND
27115: IFFALSE 27170
// begin driver := IsDrivenBy ( vehicle ) ;
27117: LD_ADDR_VAR 0 3
27121: PUSH
27122: LD_VAR 0 1
27126: PPUSH
27127: CALL_OW 311
27131: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
27132: LD_VAR 0 1
27136: PPUSH
27137: LD_INT 211
27139: PPUSH
27140: LD_INT 101
27142: PPUSH
27143: CALL_OW 111
// AddComExitVehicle ( driver ) ;
27147: LD_VAR 0 3
27151: PPUSH
27152: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27156: LD_VAR 0 3
27160: PPUSH
27161: LD_VAR 0 2
27165: PPUSH
27166: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
27170: LD_VAR 0 1
27174: PPUSH
27175: CALL_OW 255
27179: PUSH
27180: LD_INT 3
27182: EQUAL
27183: IFFALSE 27214
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
27185: LD_ADDR_EXP 60
27189: PUSH
27190: LD_EXP 60
27194: PPUSH
27195: LD_EXP 60
27199: PUSH
27200: LD_INT 1
27202: PLUS
27203: PPUSH
27204: LD_VAR 0 1
27208: PPUSH
27209: CALL_OW 1
27213: ST_TO_ADDR
// end ;
27214: PPOPN 3
27216: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
27217: LD_VAR 0 1
27221: PPUSH
27222: CALL_OW 255
27226: PUSH
27227: LD_INT 8
27229: EQUAL
27230: PUSH
27231: LD_VAR 0 1
27235: PPUSH
27236: CALL_OW 266
27240: PUSH
27241: LD_INT 4
27243: EQUAL
27244: AND
27245: IFFALSE 27256
// ComUpgrade ( b ) ;
27247: LD_VAR 0 1
27251: PPUSH
27252: CALL_OW 146
// end ;
27256: PPOPN 1
27258: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
27259: LD_VAR 0 1
27263: PPUSH
27264: CALL 87326 0 1
// if un = Heike then
27268: LD_VAR 0 1
27272: PUSH
27273: LD_EXP 34
27277: EQUAL
27278: IFFALSE 27287
// YouLost ( Heike ) ;
27280: LD_STRING Heike
27282: PPUSH
27283: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] ] ) then
27287: LD_VAR 0 1
27291: PUSH
27292: LD_INT 22
27294: PUSH
27295: LD_INT 2
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 23
27304: PUSH
27305: LD_INT 2
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PPUSH
27316: CALL_OW 69
27320: IN
27321: IFFALSE 27337
// heikeLoseCounter := heikeLoseCounter + 1 ;
27323: LD_ADDR_EXP 26
27327: PUSH
27328: LD_EXP 26
27332: PUSH
27333: LD_INT 1
27335: PLUS
27336: ST_TO_ADDR
// if un = arDepot then
27337: LD_VAR 0 1
27341: PUSH
27342: LD_EXP 48
27346: EQUAL
27347: IFFALSE 27356
// YouLost ( Base ) ;
27349: LD_STRING Base
27351: PPUSH
27352: CALL_OW 104
// if un = Rolf then
27356: LD_VAR 0 1
27360: PUSH
27361: LD_EXP 47
27365: EQUAL
27366: IFFALSE 27376
// rolfDied := true ;
27368: LD_ADDR_EXP 13
27372: PUSH
27373: LD_INT 1
27375: ST_TO_ADDR
// if un in rolfSquad then
27376: LD_VAR 0 1
27380: PUSH
27381: LD_EXP 51
27385: IN
27386: IFFALSE 27404
// rolfSquad := rolfSquad diff un ;
27388: LD_ADDR_EXP 51
27392: PUSH
27393: LD_EXP 51
27397: PUSH
27398: LD_VAR 0 1
27402: DIFF
27403: ST_TO_ADDR
// if un in omarSquad then
27404: LD_VAR 0 1
27408: PUSH
27409: LD_EXP 52
27413: IN
27414: IFFALSE 27432
// omarSquad := omarSquad diff un ;
27416: LD_ADDR_EXP 52
27420: PUSH
27421: LD_EXP 52
27425: PUSH
27426: LD_VAR 0 1
27430: DIFF
27431: ST_TO_ADDR
// if GetSide ( un ) = 3 then
27432: LD_VAR 0 1
27436: PPUSH
27437: CALL_OW 255
27441: PUSH
27442: LD_INT 3
27444: EQUAL
27445: IFFALSE 27461
// ruLoseCounter := ruLoseCounter + 1 ;
27447: LD_ADDR_EXP 5
27451: PUSH
27452: LD_EXP 5
27456: PUSH
27457: LD_INT 1
27459: PLUS
27460: ST_TO_ADDR
// if un in ruAttackers then
27461: LD_VAR 0 1
27465: PUSH
27466: LD_EXP 61
27470: IN
27471: IFFALSE 27489
// ruAttackers := ruAttackers diff un ;
27473: LD_ADDR_EXP 61
27477: PUSH
27478: LD_EXP 61
27482: PUSH
27483: LD_VAR 0 1
27487: DIFF
27488: ST_TO_ADDR
// end ;
27489: PPOPN 1
27491: END
// on EnterVehicle ( vehicle , unit ) do begin if GetSide ( unit ) in [ 5 , 8 ] and GetLives ( unit ) < 1000 then
27492: LD_VAR 0 2
27496: PPUSH
27497: CALL_OW 255
27501: PUSH
27502: LD_INT 5
27504: PUSH
27505: LD_INT 8
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: IN
27512: PUSH
27513: LD_VAR 0 2
27517: PPUSH
27518: CALL_OW 256
27522: PUSH
27523: LD_INT 1000
27525: LESS
27526: AND
27527: IFFALSE 27541
// SetLives ( unit , 1000 ) ;
27529: LD_VAR 0 2
27533: PPUSH
27534: LD_INT 1000
27536: PPUSH
27537: CALL_OW 234
// end ;
27541: PPOPN 2
27543: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
27544: LD_INT 0
27546: PPUSH
27547: PPUSH
27548: PPUSH
27549: PPUSH
// begin if GetSide ( vehicle ) = 8 and rolfAttack then
27550: LD_VAR 0 2
27554: PPUSH
27555: CALL_OW 255
27559: PUSH
27560: LD_INT 8
27562: EQUAL
27563: PUSH
27564: LD_EXP 32
27568: AND
27569: IFFALSE 27586
// ComMoveXY ( un , 221 , 161 ) ;
27571: LD_VAR 0 1
27575: PPUSH
27576: LD_INT 221
27578: PPUSH
27579: LD_INT 161
27581: PPUSH
27582: CALL_OW 111
// if GetSide ( vehicle ) = 5 and omarAttack then
27586: LD_VAR 0 2
27590: PPUSH
27591: CALL_OW 255
27595: PUSH
27596: LD_INT 5
27598: EQUAL
27599: PUSH
27600: LD_EXP 23
27604: AND
27605: IFFALSE 27714
// begin ComMoveXY ( un , 333 , 233 ) ;
27607: LD_VAR 0 1
27611: PPUSH
27612: LD_INT 333
27614: PPUSH
27615: LD_INT 233
27617: PPUSH
27618: CALL_OW 111
// if not HexInfo ( 334 , 241 ) or not GetBType ( HexInfo ( 334 , 241 ) ) = b_armoury then
27622: LD_INT 334
27624: PPUSH
27625: LD_INT 241
27627: PPUSH
27628: CALL_OW 428
27632: NOT
27633: PUSH
27634: LD_INT 334
27636: PPUSH
27637: LD_INT 241
27639: PPUSH
27640: CALL_OW 428
27644: PPUSH
27645: CALL_OW 266
27649: PUSH
27650: LD_INT 4
27652: EQUAL
27653: NOT
27654: OR
27655: IFFALSE 27659
// exit ;
27657: GO 28239
// AddComEnterUnit ( un , HexInfo ( 334 , 241 ) ) ;
27659: LD_VAR 0 1
27663: PPUSH
27664: LD_INT 334
27666: PPUSH
27667: LD_INT 241
27669: PPUSH
27670: CALL_OW 428
27674: PPUSH
27675: CALL_OW 180
// AddComChangeProfession ( un , class_soldier ) ;
27679: LD_VAR 0 1
27683: PPUSH
27684: LD_INT 1
27686: PPUSH
27687: CALL_OW 183
// AddComExitBuilding ( un ) ;
27691: LD_VAR 0 1
27695: PPUSH
27696: CALL_OW 182
// AddComMoveUnit ( un , Omar ) ;
27700: LD_VAR 0 1
27704: PPUSH
27705: LD_EXP 44
27709: PPUSH
27710: CALL_OW 172
// end ; if GetSide ( un ) = 3 and not un in ruAttackers then
27714: LD_VAR 0 1
27718: PPUSH
27719: CALL_OW 255
27723: PUSH
27724: LD_INT 3
27726: EQUAL
27727: PUSH
27728: LD_VAR 0 1
27732: PUSH
27733: LD_EXP 61
27737: IN
27738: NOT
27739: AND
27740: IFFALSE 28239
// begin if not IsInArea ( un , ruMainBase ) then
27742: LD_VAR 0 1
27746: PPUSH
27747: LD_INT 10
27749: PPUSH
27750: CALL_OW 308
27754: NOT
27755: IFFALSE 27772
// ComMoveXY ( un , 62 , 98 ) ;
27757: LD_VAR 0 1
27761: PPUSH
27762: LD_INT 62
27764: PPUSH
27765: LD_INT 98
27767: PPUSH
27768: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27772: LD_INT 35
27774: PPUSH
27775: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
27779: LD_VAR 0 1
27783: PPUSH
27784: CALL_OW 302
27788: NOT
27789: PUSH
27790: LD_VAR 0 1
27794: PPUSH
27795: LD_INT 10
27797: PPUSH
27798: CALL_OW 308
27802: OR
27803: IFFALSE 27772
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
27805: LD_ADDR_EXP 59
27809: PUSH
27810: LD_EXP 59
27814: PPUSH
27815: LD_EXP 59
27819: PUSH
27820: LD_INT 1
27822: PLUS
27823: PPUSH
27824: LD_VAR 0 1
27828: PPUSH
27829: CALL_OW 1
27833: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
27834: LD_ADDR_VAR 0 8
27838: PUSH
27839: LD_INT 72
27841: PUSH
27842: LD_INT 12
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: ST_TO_ADDR
// if tmp then
27849: LD_VAR 0 8
27853: IFFALSE 27968
// for i in tmp do
27855: LD_ADDR_VAR 0 5
27859: PUSH
27860: LD_VAR 0 8
27864: PUSH
27865: FOR_IN
27866: IFFALSE 27966
// if UnitsInside ( i ) < 6 then
27868: LD_VAR 0 5
27872: PPUSH
27873: CALL_OW 313
27877: PUSH
27878: LD_INT 6
27880: LESS
27881: IFFALSE 27964
// begin AddComEnterUnit ( un , i ) ;
27883: LD_VAR 0 1
27887: PPUSH
27888: LD_VAR 0 5
27892: PPUSH
27893: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
27897: LD_VAR 0 8
27901: PPUSH
27902: LD_INT 22
27904: PUSH
27905: LD_INT 23
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 1
27914: PPUSH
27915: LD_INT 2
27917: PPUSH
27918: CALL_OW 12
27922: ARRAY
27923: PPUSH
27924: LD_INT 1
27926: PPUSH
27927: LD_INT 1
27929: PPUSH
27930: LD_INT 44
27932: PUSH
27933: LD_INT 46
27935: PUSH
27936: LD_INT 47
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 1
27946: PPUSH
27947: LD_INT 3
27949: PPUSH
27950: CALL_OW 12
27954: ARRAY
27955: PPUSH
27956: CALL_OW 185
// exit ;
27960: POP
27961: POP
27962: GO 28239
// end ;
27964: GO 27865
27966: POP
27967: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
27968: LD_ADDR_VAR 0 8
27972: PUSH
27973: LD_INT 10
27975: PPUSH
27976: LD_INT 22
27978: PUSH
27979: LD_INT 3
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 50
27988: PUSH
27989: EMPTY
27990: LIST
27991: PUSH
27992: LD_INT 2
27994: PUSH
27995: LD_INT 30
27997: PUSH
27998: LD_INT 4
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 30
28007: PUSH
28008: LD_INT 5
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 30
28017: PUSH
28018: LD_INT 32
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 30
28027: PUSH
28028: LD_INT 31
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: LIST
28046: PPUSH
28047: CALL_OW 70
28051: ST_TO_ADDR
// if not tmp then
28052: LD_VAR 0 8
28056: NOT
28057: IFFALSE 28076
// begin ComMoveXY ( un , 83 , 133 ) ;
28059: LD_VAR 0 1
28063: PPUSH
28064: LD_INT 83
28066: PPUSH
28067: LD_INT 133
28069: PPUSH
28070: CALL_OW 111
// exit ;
28074: GO 28239
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
28076: LD_ADDR_VAR 0 6
28080: PUSH
28081: LD_VAR 0 1
28085: PPUSH
28086: LD_VAR 0 8
28090: PPUSH
28091: LD_INT 1
28093: PPUSH
28094: LD_INT 1
28096: PPUSH
28097: CALL 34834 0 4
28101: PUSH
28102: FOR_IN
28103: IFFALSE 28237
// begin case GetBType ( b ) of b_armoury , b_barracks :
28105: LD_VAR 0 6
28109: PPUSH
28110: CALL_OW 266
28114: PUSH
28115: LD_INT 4
28117: DOUBLE
28118: EQUAL
28119: IFTRUE 28129
28121: LD_INT 5
28123: DOUBLE
28124: EQUAL
28125: IFTRUE 28129
28127: GO 28140
28129: POP
// p := 6 ; b_breastwork , b_bunker :
28130: LD_ADDR_VAR 0 7
28134: PUSH
28135: LD_INT 6
28137: ST_TO_ADDR
28138: GO 28166
28140: LD_INT 31
28142: DOUBLE
28143: EQUAL
28144: IFTRUE 28154
28146: LD_INT 32
28148: DOUBLE
28149: EQUAL
28150: IFTRUE 28154
28152: GO 28165
28154: POP
// p := 1 ; end ;
28155: LD_ADDR_VAR 0 7
28159: PUSH
28160: LD_INT 1
28162: ST_TO_ADDR
28163: GO 28166
28165: POP
// if UnitsInside ( b ) < p then
28166: LD_VAR 0 6
28170: PPUSH
28171: CALL_OW 313
28175: PUSH
28176: LD_VAR 0 7
28180: LESS
28181: IFFALSE 28235
// begin ComEnterUnit ( un , b ) ;
28183: LD_VAR 0 1
28187: PPUSH
28188: LD_VAR 0 6
28192: PPUSH
28193: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
28197: LD_VAR 0 6
28201: PPUSH
28202: CALL_OW 266
28206: PUSH
28207: LD_INT 4
28209: PUSH
28210: LD_INT 5
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: IN
28217: IFFALSE 28231
// AddComChangeProfession ( un , class_soldier ) ;
28219: LD_VAR 0 1
28223: PPUSH
28224: LD_INT 1
28226: PPUSH
28227: CALL_OW 183
// exit ;
28231: POP
28232: POP
28233: GO 28239
// end ; end ;
28235: GO 28102
28237: POP
28238: POP
// end ; end ;
28239: PPOPN 8
28241: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
28242: LD_INT 0
28244: PPUSH
28245: PPUSH
28246: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
28247: LD_VAR 0 2
28251: PPUSH
28252: CALL_OW 255
28256: PUSH
28257: LD_INT 3
28259: EQUAL
28260: PUSH
28261: LD_VAR 0 2
28265: PPUSH
28266: CALL_OW 257
28270: PUSH
28271: LD_INT 1
28273: EQUAL
28274: AND
28275: PUSH
28276: LD_VAR 0 2
28280: PUSH
28281: LD_EXP 59
28285: IN
28286: NOT
28287: AND
28288: IFFALSE 28601
// begin ComMoveToArea ( un , ruMainBase ) ;
28290: LD_VAR 0 2
28294: PPUSH
28295: LD_INT 10
28297: PPUSH
28298: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
28302: LD_INT 35
28304: PPUSH
28305: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
28309: LD_VAR 0 2
28313: PPUSH
28314: CALL_OW 302
28318: NOT
28319: PUSH
28320: LD_VAR 0 2
28324: PPUSH
28325: LD_INT 10
28327: PPUSH
28328: CALL_OW 308
28332: OR
28333: IFFALSE 28302
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
28335: LD_ADDR_EXP 59
28339: PUSH
28340: LD_EXP 59
28344: PPUSH
28345: LD_EXP 59
28349: PUSH
28350: LD_INT 1
28352: PLUS
28353: PPUSH
28354: LD_VAR 0 2
28358: PPUSH
28359: CALL_OW 1
28363: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28364: LD_ADDR_VAR 0 4
28368: PUSH
28369: LD_INT 10
28371: PPUSH
28372: LD_INT 22
28374: PUSH
28375: LD_INT 3
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 50
28384: PUSH
28385: EMPTY
28386: LIST
28387: PUSH
28388: LD_INT 2
28390: PUSH
28391: LD_INT 30
28393: PUSH
28394: LD_INT 4
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 30
28403: PUSH
28404: LD_INT 5
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 30
28413: PUSH
28414: LD_INT 32
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 30
28423: PUSH
28424: LD_INT 31
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: LIST
28442: PPUSH
28443: CALL_OW 70
28447: ST_TO_ADDR
// if not tmp then
28448: LD_VAR 0 4
28452: NOT
28453: IFFALSE 28472
// begin ComMoveXY ( un , 83 , 133 ) ;
28455: LD_VAR 0 2
28459: PPUSH
28460: LD_INT 83
28462: PPUSH
28463: LD_INT 133
28465: PPUSH
28466: CALL_OW 111
// exit ;
28470: GO 28850
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
28472: LD_ADDR_VAR 0 5
28476: PUSH
28477: LD_VAR 0 2
28481: PPUSH
28482: LD_VAR 0 4
28486: PPUSH
28487: LD_INT 1
28489: PPUSH
28490: LD_INT 1
28492: PPUSH
28493: CALL 34834 0 4
28497: PUSH
28498: FOR_IN
28499: IFFALSE 28599
// begin case GetBType ( b ) of b_armoury , b_barracks :
28501: LD_VAR 0 5
28505: PPUSH
28506: CALL_OW 266
28510: PUSH
28511: LD_INT 4
28513: DOUBLE
28514: EQUAL
28515: IFTRUE 28525
28517: LD_INT 5
28519: DOUBLE
28520: EQUAL
28521: IFTRUE 28525
28523: GO 28536
28525: POP
// p := 6 ; b_breastwork , b_bunker :
28526: LD_ADDR_VAR 0 3
28530: PUSH
28531: LD_INT 6
28533: ST_TO_ADDR
28534: GO 28562
28536: LD_INT 31
28538: DOUBLE
28539: EQUAL
28540: IFTRUE 28550
28542: LD_INT 32
28544: DOUBLE
28545: EQUAL
28546: IFTRUE 28550
28548: GO 28561
28550: POP
// p := 1 ; end ;
28551: LD_ADDR_VAR 0 3
28555: PUSH
28556: LD_INT 1
28558: ST_TO_ADDR
28559: GO 28562
28561: POP
// if UnitsInside ( b ) < p then
28562: LD_VAR 0 5
28566: PPUSH
28567: CALL_OW 313
28571: PUSH
28572: LD_VAR 0 3
28576: LESS
28577: IFFALSE 28597
// begin ComEnterUnit ( un , b ) ;
28579: LD_VAR 0 2
28583: PPUSH
28584: LD_VAR 0 5
28588: PPUSH
28589: CALL_OW 120
// exit ;
28593: POP
28594: POP
28595: GO 28850
// end ; end ;
28597: GO 28498
28599: POP
28600: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
28601: LD_VAR 0 2
28605: PUSH
28606: LD_EXP 59
28610: IN
28611: PUSH
28612: LD_VAR 0 2
28616: PPUSH
28617: CALL_OW 257
28621: PUSH
28622: LD_INT 1
28624: EQUAL
28625: AND
28626: IFFALSE 28850
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28628: LD_ADDR_VAR 0 4
28632: PUSH
28633: LD_INT 10
28635: PPUSH
28636: LD_INT 22
28638: PUSH
28639: LD_INT 3
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PUSH
28646: LD_INT 50
28648: PUSH
28649: EMPTY
28650: LIST
28651: PUSH
28652: LD_INT 2
28654: PUSH
28655: LD_INT 30
28657: PUSH
28658: LD_INT 4
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 30
28667: PUSH
28668: LD_INT 5
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 30
28677: PUSH
28678: LD_INT 32
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 30
28687: PUSH
28688: LD_INT 31
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: LIST
28706: PPUSH
28707: CALL_OW 70
28711: ST_TO_ADDR
// if not tmp then
28712: LD_VAR 0 4
28716: NOT
28717: IFFALSE 28721
// exit ;
28719: GO 28850
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
28721: LD_ADDR_VAR 0 5
28725: PUSH
28726: LD_VAR 0 2
28730: PPUSH
28731: LD_VAR 0 4
28735: PPUSH
28736: LD_INT 1
28738: PPUSH
28739: LD_INT 1
28741: PPUSH
28742: CALL 34834 0 4
28746: PUSH
28747: FOR_IN
28748: IFFALSE 28848
// begin case GetBType ( b ) of b_armoury , b_barracks :
28750: LD_VAR 0 5
28754: PPUSH
28755: CALL_OW 266
28759: PUSH
28760: LD_INT 4
28762: DOUBLE
28763: EQUAL
28764: IFTRUE 28774
28766: LD_INT 5
28768: DOUBLE
28769: EQUAL
28770: IFTRUE 28774
28772: GO 28785
28774: POP
// p := 6 ; b_breastwork , b_bunker :
28775: LD_ADDR_VAR 0 3
28779: PUSH
28780: LD_INT 6
28782: ST_TO_ADDR
28783: GO 28811
28785: LD_INT 31
28787: DOUBLE
28788: EQUAL
28789: IFTRUE 28799
28791: LD_INT 32
28793: DOUBLE
28794: EQUAL
28795: IFTRUE 28799
28797: GO 28810
28799: POP
// p := 1 ; end ;
28800: LD_ADDR_VAR 0 3
28804: PUSH
28805: LD_INT 1
28807: ST_TO_ADDR
28808: GO 28811
28810: POP
// if UnitsInside ( b ) < p then
28811: LD_VAR 0 5
28815: PPUSH
28816: CALL_OW 313
28820: PUSH
28821: LD_VAR 0 3
28825: LESS
28826: IFFALSE 28846
// begin ComEnterUnit ( un , b ) ;
28828: LD_VAR 0 2
28832: PPUSH
28833: LD_VAR 0 5
28837: PPUSH
28838: CALL_OW 120
// exit ;
28842: POP
28843: POP
28844: GO 28850
// end ; end ;
28846: GO 28747
28848: POP
28849: POP
// end ; end ;
28850: PPOPN 5
28852: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
28853: LD_VAR 0 1
28857: PUSH
28858: LD_INT 2
28860: EQUAL
28861: PUSH
28862: LD_VAR 0 2
28866: PUSH
28867: LD_INT 5
28869: PUSH
28870: LD_INT 8
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: IN
28877: AND
28878: IFFALSE 28887
// YouLost ( FriendlyFire ) ;
28880: LD_STRING FriendlyFire
28882: PPUSH
28883: CALL_OW 104
// end ;
28887: PPOPN 2
28889: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
28890: LD_VAR 0 1
28894: PPUSH
28895: CALL_OW 255
28899: PUSH
28900: LD_INT 8
28902: EQUAL
28903: PUSH
28904: LD_VAR 0 1
28908: PPUSH
28909: CALL_OW 266
28913: PUSH
28914: LD_INT 5
28916: EQUAL
28917: AND
28918: IFFALSE 28932
// SetClass ( unit , class_mortar ) ;
28920: LD_VAR 0 2
28924: PPUSH
28925: LD_INT 8
28927: PPUSH
28928: CALL_OW 336
// end ; end_of_file
28932: PPOPN 2
28934: END
// every 0 0$35 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 20 , 18 , 16 , 12 ] [ Difficulty ] do
28935: LD_INT 6
28937: PPUSH
28938: LD_INT 1
28940: PPUSH
28941: CALL_OW 287
28945: PUSH
28946: LD_INT 20
28948: PUSH
28949: LD_INT 18
28951: PUSH
28952: LD_INT 16
28954: PUSH
28955: LD_INT 12
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: PUSH
28964: LD_OWVAR 67
28968: ARRAY
28969: LESS
28970: IFFALSE 28997
28972: GO 28974
28974: DISABLE
// begin enable ;
28975: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
28976: LD_INT 1
28978: PPUSH
28979: LD_INT 5
28981: PPUSH
28982: CALL_OW 12
28986: PPUSH
28987: LD_INT 6
28989: PPUSH
28990: LD_INT 1
28992: PPUSH
28993: CALL_OW 55
// end ;
28997: END
// every 0 0$25 trigger Prob ( 50 ) and tick < [ 28 28$00 , 27 27$00 , 26 26$00 , 25 25$00 ] [ Difficulty ] and GetResourceArea ( southCrates , mat_cans ) < 10 do
28998: LD_INT 50
29000: PPUSH
29001: CALL_OW 13
29005: PUSH
29006: LD_OWVAR 1
29010: PUSH
29011: LD_INT 58800
29013: PUSH
29014: LD_INT 56700
29016: PUSH
29017: LD_INT 54600
29019: PUSH
29020: LD_INT 52500
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: PUSH
29029: LD_OWVAR 67
29033: ARRAY
29034: LESS
29035: AND
29036: PUSH
29037: LD_INT 21
29039: PPUSH
29040: LD_INT 1
29042: PPUSH
29043: CALL_OW 287
29047: PUSH
29048: LD_INT 10
29050: LESS
29051: AND
29052: IFFALSE 29094
29054: GO 29056
29056: DISABLE
// begin enable ;
29057: ENABLE
// wait ( rand ( 0 0$1 , 0 0$10 ) ) ;
29058: LD_INT 35
29060: PPUSH
29061: LD_INT 350
29063: PPUSH
29064: CALL_OW 12
29068: PPUSH
29069: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , southCrates , true ) ;
29073: LD_INT 1
29075: PPUSH
29076: LD_INT 5
29078: PPUSH
29079: CALL_OW 12
29083: PPUSH
29084: LD_INT 21
29086: PPUSH
29087: LD_INT 1
29089: PPUSH
29090: CALL_OW 55
// end ; end_of_file
29094: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
29095: LD_EXP 18
29099: PUSH
29100: LD_EXP 20
29104: AND
29105: PUSH
29106: LD_EXP 17
29110: PUSH
29111: LD_EXP 19
29115: AND
29116: OR
29117: IFFALSE 29436
29119: GO 29121
29121: DISABLE
// begin enable ;
29122: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
29123: LD_EXP 18
29127: PUSH
29128: LD_EXP 20
29132: AND
29133: PUSH
29134: LD_EXP 17
29138: PUSH
29139: LD_EXP 19
29143: AND
29144: AND
29145: IFFALSE 29282
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
29147: LD_ADDR_OWVAR 47
29151: PUSH
29152: LD_STRING #X106-1a
29154: PUSH
29155: LD_EXP 21
29159: PUSH
29160: LD_INT 16
29162: PPUSH
29163: LD_INT 22
29165: PUSH
29166: LD_INT 2
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 21
29175: PUSH
29176: LD_INT 2
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 33
29185: PUSH
29186: LD_INT 1
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 58
29195: PUSH
29196: EMPTY
29197: LIST
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: PPUSH
29205: CALL_OW 70
29209: MINUS
29210: PPUSH
29211: CALL 69325 0 1
29215: PUSH
29216: LD_STRING #X106-3a
29218: PUSH
29219: LD_EXP 20
29223: PUSH
29224: LD_STRING #X106-1
29226: PUSH
29227: LD_EXP 51
29231: PUSH
29232: LD_INT 0
29234: PLUS
29235: PUSH
29236: LD_EXP 51
29240: PPUSH
29241: LD_INT 55
29243: PUSH
29244: EMPTY
29245: LIST
29246: PPUSH
29247: CALL_OW 72
29251: PUSH
29252: LD_INT 0
29254: PLUS
29255: MINUS
29256: PPUSH
29257: CALL 69325 0 1
29261: PUSH
29262: LD_STRING #X106-3
29264: PUSH
29265: LD_EXP 19
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: ST_TO_ADDR
// end else
29280: GO 29436
// if omarWantVehicles and omarWaitingForVehiclesTimer then
29282: LD_EXP 18
29286: PUSH
29287: LD_EXP 20
29291: AND
29292: IFFALSE 29379
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
29294: LD_ADDR_OWVAR 47
29298: PUSH
29299: LD_STRING #X106-1a
29301: PUSH
29302: LD_EXP 21
29306: PUSH
29307: LD_INT 16
29309: PPUSH
29310: LD_INT 22
29312: PUSH
29313: LD_INT 2
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 21
29322: PUSH
29323: LD_INT 2
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: LD_INT 33
29332: PUSH
29333: LD_INT 1
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 58
29342: PUSH
29343: EMPTY
29344: LIST
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: PPUSH
29352: CALL_OW 70
29356: MINUS
29357: PPUSH
29358: CALL 69325 0 1
29362: PUSH
29363: LD_STRING #X106-3a
29365: PUSH
29366: LD_EXP 20
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: ST_TO_ADDR
// end else
29377: GO 29436
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
29379: LD_ADDR_OWVAR 47
29383: PUSH
29384: LD_STRING #X106-1
29386: PUSH
29387: LD_EXP 51
29391: PUSH
29392: LD_INT 0
29394: PLUS
29395: PUSH
29396: LD_EXP 51
29400: PPUSH
29401: LD_INT 55
29403: PUSH
29404: EMPTY
29405: LIST
29406: PPUSH
29407: CALL_OW 72
29411: PUSH
29412: LD_INT 0
29414: PLUS
29415: MINUS
29416: PPUSH
29417: CALL 69325 0 1
29421: PUSH
29422: LD_STRING #X106-3
29424: PUSH
29425: LD_EXP 19
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: ST_TO_ADDR
// end ; end ; end_of_file
29436: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29437: LD_INT 0
29439: PPUSH
29440: PPUSH
// if exist_mode then
29441: LD_VAR 0 2
29445: IFFALSE 29470
// unit := CreateCharacter ( prefix & ident ) else
29447: LD_ADDR_VAR 0 5
29451: PUSH
29452: LD_VAR 0 3
29456: PUSH
29457: LD_VAR 0 1
29461: STR
29462: PPUSH
29463: CALL_OW 34
29467: ST_TO_ADDR
29468: GO 29485
// unit := NewCharacter ( ident ) ;
29470: LD_ADDR_VAR 0 5
29474: PUSH
29475: LD_VAR 0 1
29479: PPUSH
29480: CALL_OW 25
29484: ST_TO_ADDR
// result := unit ;
29485: LD_ADDR_VAR 0 4
29489: PUSH
29490: LD_VAR 0 5
29494: ST_TO_ADDR
// end ;
29495: LD_VAR 0 4
29499: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29500: LD_INT 0
29502: PPUSH
29503: PPUSH
// if not side or not nation then
29504: LD_VAR 0 1
29508: NOT
29509: PUSH
29510: LD_VAR 0 2
29514: NOT
29515: OR
29516: IFFALSE 29520
// exit ;
29518: GO 30288
// case nation of nation_american :
29520: LD_VAR 0 2
29524: PUSH
29525: LD_INT 1
29527: DOUBLE
29528: EQUAL
29529: IFTRUE 29533
29531: GO 29747
29533: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29534: LD_ADDR_VAR 0 4
29538: PUSH
29539: LD_INT 35
29541: PUSH
29542: LD_INT 45
29544: PUSH
29545: LD_INT 46
29547: PUSH
29548: LD_INT 47
29550: PUSH
29551: LD_INT 82
29553: PUSH
29554: LD_INT 83
29556: PUSH
29557: LD_INT 84
29559: PUSH
29560: LD_INT 85
29562: PUSH
29563: LD_INT 86
29565: PUSH
29566: LD_INT 1
29568: PUSH
29569: LD_INT 2
29571: PUSH
29572: LD_INT 6
29574: PUSH
29575: LD_INT 15
29577: PUSH
29578: LD_INT 16
29580: PUSH
29581: LD_INT 7
29583: PUSH
29584: LD_INT 12
29586: PUSH
29587: LD_INT 13
29589: PUSH
29590: LD_INT 10
29592: PUSH
29593: LD_INT 14
29595: PUSH
29596: LD_INT 20
29598: PUSH
29599: LD_INT 21
29601: PUSH
29602: LD_INT 22
29604: PUSH
29605: LD_INT 25
29607: PUSH
29608: LD_INT 32
29610: PUSH
29611: LD_INT 27
29613: PUSH
29614: LD_INT 36
29616: PUSH
29617: LD_INT 69
29619: PUSH
29620: LD_INT 39
29622: PUSH
29623: LD_INT 34
29625: PUSH
29626: LD_INT 40
29628: PUSH
29629: LD_INT 48
29631: PUSH
29632: LD_INT 49
29634: PUSH
29635: LD_INT 50
29637: PUSH
29638: LD_INT 51
29640: PUSH
29641: LD_INT 52
29643: PUSH
29644: LD_INT 53
29646: PUSH
29647: LD_INT 54
29649: PUSH
29650: LD_INT 55
29652: PUSH
29653: LD_INT 56
29655: PUSH
29656: LD_INT 57
29658: PUSH
29659: LD_INT 58
29661: PUSH
29662: LD_INT 59
29664: PUSH
29665: LD_INT 60
29667: PUSH
29668: LD_INT 61
29670: PUSH
29671: LD_INT 62
29673: PUSH
29674: LD_INT 80
29676: PUSH
29677: LD_INT 82
29679: PUSH
29680: LD_INT 83
29682: PUSH
29683: LD_INT 84
29685: PUSH
29686: LD_INT 85
29688: PUSH
29689: LD_INT 86
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: ST_TO_ADDR
29745: GO 30212
29747: LD_INT 2
29749: DOUBLE
29750: EQUAL
29751: IFTRUE 29755
29753: GO 29981
29755: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29756: LD_ADDR_VAR 0 4
29760: PUSH
29761: LD_INT 35
29763: PUSH
29764: LD_INT 45
29766: PUSH
29767: LD_INT 46
29769: PUSH
29770: LD_INT 47
29772: PUSH
29773: LD_INT 82
29775: PUSH
29776: LD_INT 83
29778: PUSH
29779: LD_INT 84
29781: PUSH
29782: LD_INT 85
29784: PUSH
29785: LD_INT 87
29787: PUSH
29788: LD_INT 70
29790: PUSH
29791: LD_INT 1
29793: PUSH
29794: LD_INT 11
29796: PUSH
29797: LD_INT 3
29799: PUSH
29800: LD_INT 4
29802: PUSH
29803: LD_INT 5
29805: PUSH
29806: LD_INT 6
29808: PUSH
29809: LD_INT 15
29811: PUSH
29812: LD_INT 18
29814: PUSH
29815: LD_INT 7
29817: PUSH
29818: LD_INT 17
29820: PUSH
29821: LD_INT 8
29823: PUSH
29824: LD_INT 20
29826: PUSH
29827: LD_INT 21
29829: PUSH
29830: LD_INT 22
29832: PUSH
29833: LD_INT 72
29835: PUSH
29836: LD_INT 26
29838: PUSH
29839: LD_INT 69
29841: PUSH
29842: LD_INT 39
29844: PUSH
29845: LD_INT 40
29847: PUSH
29848: LD_INT 41
29850: PUSH
29851: LD_INT 42
29853: PUSH
29854: LD_INT 43
29856: PUSH
29857: LD_INT 48
29859: PUSH
29860: LD_INT 49
29862: PUSH
29863: LD_INT 50
29865: PUSH
29866: LD_INT 51
29868: PUSH
29869: LD_INT 52
29871: PUSH
29872: LD_INT 53
29874: PUSH
29875: LD_INT 54
29877: PUSH
29878: LD_INT 55
29880: PUSH
29881: LD_INT 56
29883: PUSH
29884: LD_INT 60
29886: PUSH
29887: LD_INT 61
29889: PUSH
29890: LD_INT 62
29892: PUSH
29893: LD_INT 66
29895: PUSH
29896: LD_INT 67
29898: PUSH
29899: LD_INT 68
29901: PUSH
29902: LD_INT 81
29904: PUSH
29905: LD_INT 82
29907: PUSH
29908: LD_INT 83
29910: PUSH
29911: LD_INT 84
29913: PUSH
29914: LD_INT 85
29916: PUSH
29917: LD_INT 87
29919: PUSH
29920: LD_INT 88
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: ST_TO_ADDR
29979: GO 30212
29981: LD_INT 3
29983: DOUBLE
29984: EQUAL
29985: IFTRUE 29989
29987: GO 30211
29989: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29990: LD_ADDR_VAR 0 4
29994: PUSH
29995: LD_INT 46
29997: PUSH
29998: LD_INT 47
30000: PUSH
30001: LD_INT 1
30003: PUSH
30004: LD_INT 2
30006: PUSH
30007: LD_INT 82
30009: PUSH
30010: LD_INT 83
30012: PUSH
30013: LD_INT 84
30015: PUSH
30016: LD_INT 85
30018: PUSH
30019: LD_INT 86
30021: PUSH
30022: LD_INT 11
30024: PUSH
30025: LD_INT 9
30027: PUSH
30028: LD_INT 20
30030: PUSH
30031: LD_INT 19
30033: PUSH
30034: LD_INT 21
30036: PUSH
30037: LD_INT 24
30039: PUSH
30040: LD_INT 22
30042: PUSH
30043: LD_INT 25
30045: PUSH
30046: LD_INT 28
30048: PUSH
30049: LD_INT 29
30051: PUSH
30052: LD_INT 30
30054: PUSH
30055: LD_INT 31
30057: PUSH
30058: LD_INT 37
30060: PUSH
30061: LD_INT 38
30063: PUSH
30064: LD_INT 32
30066: PUSH
30067: LD_INT 27
30069: PUSH
30070: LD_INT 33
30072: PUSH
30073: LD_INT 69
30075: PUSH
30076: LD_INT 39
30078: PUSH
30079: LD_INT 34
30081: PUSH
30082: LD_INT 40
30084: PUSH
30085: LD_INT 71
30087: PUSH
30088: LD_INT 23
30090: PUSH
30091: LD_INT 44
30093: PUSH
30094: LD_INT 48
30096: PUSH
30097: LD_INT 49
30099: PUSH
30100: LD_INT 50
30102: PUSH
30103: LD_INT 51
30105: PUSH
30106: LD_INT 52
30108: PUSH
30109: LD_INT 53
30111: PUSH
30112: LD_INT 54
30114: PUSH
30115: LD_INT 55
30117: PUSH
30118: LD_INT 56
30120: PUSH
30121: LD_INT 57
30123: PUSH
30124: LD_INT 58
30126: PUSH
30127: LD_INT 59
30129: PUSH
30130: LD_INT 63
30132: PUSH
30133: LD_INT 64
30135: PUSH
30136: LD_INT 65
30138: PUSH
30139: LD_INT 82
30141: PUSH
30142: LD_INT 83
30144: PUSH
30145: LD_INT 84
30147: PUSH
30148: LD_INT 85
30150: PUSH
30151: LD_INT 86
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: ST_TO_ADDR
30209: GO 30212
30211: POP
// if state > - 1 and state < 3 then
30212: LD_VAR 0 3
30216: PUSH
30217: LD_INT 1
30219: NEG
30220: GREATER
30221: PUSH
30222: LD_VAR 0 3
30226: PUSH
30227: LD_INT 3
30229: LESS
30230: AND
30231: IFFALSE 30288
// for i in result do
30233: LD_ADDR_VAR 0 5
30237: PUSH
30238: LD_VAR 0 4
30242: PUSH
30243: FOR_IN
30244: IFFALSE 30286
// if GetTech ( i , side ) <> state then
30246: LD_VAR 0 5
30250: PPUSH
30251: LD_VAR 0 1
30255: PPUSH
30256: CALL_OW 321
30260: PUSH
30261: LD_VAR 0 3
30265: NONEQUAL
30266: IFFALSE 30284
// result := result diff i ;
30268: LD_ADDR_VAR 0 4
30272: PUSH
30273: LD_VAR 0 4
30277: PUSH
30278: LD_VAR 0 5
30282: DIFF
30283: ST_TO_ADDR
30284: GO 30243
30286: POP
30287: POP
// end ;
30288: LD_VAR 0 4
30292: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30293: LD_INT 0
30295: PPUSH
30296: PPUSH
30297: PPUSH
// result := true ;
30298: LD_ADDR_VAR 0 3
30302: PUSH
30303: LD_INT 1
30305: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30306: LD_ADDR_VAR 0 5
30310: PUSH
30311: LD_VAR 0 2
30315: PPUSH
30316: CALL_OW 480
30320: ST_TO_ADDR
// if not tmp then
30321: LD_VAR 0 5
30325: NOT
30326: IFFALSE 30330
// exit ;
30328: GO 30379
// for i in tmp do
30330: LD_ADDR_VAR 0 4
30334: PUSH
30335: LD_VAR 0 5
30339: PUSH
30340: FOR_IN
30341: IFFALSE 30377
// if GetTech ( i , side ) <> state_researched then
30343: LD_VAR 0 4
30347: PPUSH
30348: LD_VAR 0 1
30352: PPUSH
30353: CALL_OW 321
30357: PUSH
30358: LD_INT 2
30360: NONEQUAL
30361: IFFALSE 30375
// begin result := false ;
30363: LD_ADDR_VAR 0 3
30367: PUSH
30368: LD_INT 0
30370: ST_TO_ADDR
// exit ;
30371: POP
30372: POP
30373: GO 30379
// end ;
30375: GO 30340
30377: POP
30378: POP
// end ;
30379: LD_VAR 0 3
30383: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30384: LD_INT 0
30386: PPUSH
30387: PPUSH
30388: PPUSH
30389: PPUSH
30390: PPUSH
30391: PPUSH
30392: PPUSH
30393: PPUSH
30394: PPUSH
30395: PPUSH
30396: PPUSH
30397: PPUSH
30398: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30399: LD_VAR 0 1
30403: NOT
30404: PUSH
30405: LD_VAR 0 1
30409: PPUSH
30410: CALL_OW 257
30414: PUSH
30415: LD_INT 9
30417: NONEQUAL
30418: OR
30419: IFFALSE 30423
// exit ;
30421: GO 30996
// side := GetSide ( unit ) ;
30423: LD_ADDR_VAR 0 9
30427: PUSH
30428: LD_VAR 0 1
30432: PPUSH
30433: CALL_OW 255
30437: ST_TO_ADDR
// tech_space := tech_spacanom ;
30438: LD_ADDR_VAR 0 12
30442: PUSH
30443: LD_INT 29
30445: ST_TO_ADDR
// tech_time := tech_taurad ;
30446: LD_ADDR_VAR 0 13
30450: PUSH
30451: LD_INT 28
30453: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30454: LD_ADDR_VAR 0 11
30458: PUSH
30459: LD_VAR 0 1
30463: PPUSH
30464: CALL_OW 310
30468: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30469: LD_VAR 0 11
30473: PPUSH
30474: CALL_OW 247
30478: PUSH
30479: LD_INT 2
30481: EQUAL
30482: IFFALSE 30486
// exit ;
30484: GO 30996
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30486: LD_ADDR_VAR 0 8
30490: PUSH
30491: LD_INT 81
30493: PUSH
30494: LD_VAR 0 9
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 3
30505: PUSH
30506: LD_INT 21
30508: PUSH
30509: LD_INT 3
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PPUSH
30524: CALL_OW 69
30528: ST_TO_ADDR
// if not tmp then
30529: LD_VAR 0 8
30533: NOT
30534: IFFALSE 30538
// exit ;
30536: GO 30996
// if in_unit then
30538: LD_VAR 0 11
30542: IFFALSE 30566
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30544: LD_ADDR_VAR 0 10
30548: PUSH
30549: LD_VAR 0 8
30553: PPUSH
30554: LD_VAR 0 11
30558: PPUSH
30559: CALL_OW 74
30563: ST_TO_ADDR
30564: GO 30586
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30566: LD_ADDR_VAR 0 10
30570: PUSH
30571: LD_VAR 0 8
30575: PPUSH
30576: LD_VAR 0 1
30580: PPUSH
30581: CALL_OW 74
30585: ST_TO_ADDR
// if not enemy then
30586: LD_VAR 0 10
30590: NOT
30591: IFFALSE 30595
// exit ;
30593: GO 30996
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30595: LD_VAR 0 11
30599: PUSH
30600: LD_VAR 0 11
30604: PPUSH
30605: LD_VAR 0 10
30609: PPUSH
30610: CALL_OW 296
30614: PUSH
30615: LD_INT 13
30617: GREATER
30618: AND
30619: PUSH
30620: LD_VAR 0 1
30624: PPUSH
30625: LD_VAR 0 10
30629: PPUSH
30630: CALL_OW 296
30634: PUSH
30635: LD_INT 12
30637: GREATER
30638: OR
30639: IFFALSE 30643
// exit ;
30641: GO 30996
// missile := [ 1 ] ;
30643: LD_ADDR_VAR 0 14
30647: PUSH
30648: LD_INT 1
30650: PUSH
30651: EMPTY
30652: LIST
30653: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30654: LD_VAR 0 9
30658: PPUSH
30659: LD_VAR 0 12
30663: PPUSH
30664: CALL_OW 325
30668: IFFALSE 30697
// missile := Replace ( missile , missile + 1 , 2 ) ;
30670: LD_ADDR_VAR 0 14
30674: PUSH
30675: LD_VAR 0 14
30679: PPUSH
30680: LD_VAR 0 14
30684: PUSH
30685: LD_INT 1
30687: PLUS
30688: PPUSH
30689: LD_INT 2
30691: PPUSH
30692: CALL_OW 1
30696: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30697: LD_VAR 0 9
30701: PPUSH
30702: LD_VAR 0 13
30706: PPUSH
30707: CALL_OW 325
30711: PUSH
30712: LD_VAR 0 10
30716: PPUSH
30717: CALL_OW 255
30721: PPUSH
30722: LD_VAR 0 13
30726: PPUSH
30727: CALL_OW 325
30731: NOT
30732: AND
30733: IFFALSE 30762
// missile := Replace ( missile , missile + 1 , 3 ) ;
30735: LD_ADDR_VAR 0 14
30739: PUSH
30740: LD_VAR 0 14
30744: PPUSH
30745: LD_VAR 0 14
30749: PUSH
30750: LD_INT 1
30752: PLUS
30753: PPUSH
30754: LD_INT 3
30756: PPUSH
30757: CALL_OW 1
30761: ST_TO_ADDR
// if missile < 2 then
30762: LD_VAR 0 14
30766: PUSH
30767: LD_INT 2
30769: LESS
30770: IFFALSE 30774
// exit ;
30772: GO 30996
// x := GetX ( enemy ) ;
30774: LD_ADDR_VAR 0 4
30778: PUSH
30779: LD_VAR 0 10
30783: PPUSH
30784: CALL_OW 250
30788: ST_TO_ADDR
// y := GetY ( enemy ) ;
30789: LD_ADDR_VAR 0 5
30793: PUSH
30794: LD_VAR 0 10
30798: PPUSH
30799: CALL_OW 251
30803: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30804: LD_ADDR_VAR 0 6
30808: PUSH
30809: LD_VAR 0 4
30813: PUSH
30814: LD_INT 1
30816: NEG
30817: PPUSH
30818: LD_INT 1
30820: PPUSH
30821: CALL_OW 12
30825: PLUS
30826: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30827: LD_ADDR_VAR 0 7
30831: PUSH
30832: LD_VAR 0 5
30836: PUSH
30837: LD_INT 1
30839: NEG
30840: PPUSH
30841: LD_INT 1
30843: PPUSH
30844: CALL_OW 12
30848: PLUS
30849: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30850: LD_VAR 0 6
30854: PPUSH
30855: LD_VAR 0 7
30859: PPUSH
30860: CALL_OW 488
30864: NOT
30865: IFFALSE 30887
// begin _x := x ;
30867: LD_ADDR_VAR 0 6
30871: PUSH
30872: LD_VAR 0 4
30876: ST_TO_ADDR
// _y := y ;
30877: LD_ADDR_VAR 0 7
30881: PUSH
30882: LD_VAR 0 5
30886: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30887: LD_ADDR_VAR 0 3
30891: PUSH
30892: LD_INT 1
30894: PPUSH
30895: LD_VAR 0 14
30899: PPUSH
30900: CALL_OW 12
30904: ST_TO_ADDR
// case i of 1 :
30905: LD_VAR 0 3
30909: PUSH
30910: LD_INT 1
30912: DOUBLE
30913: EQUAL
30914: IFTRUE 30918
30916: GO 30935
30918: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30919: LD_VAR 0 1
30923: PPUSH
30924: LD_VAR 0 10
30928: PPUSH
30929: CALL_OW 115
30933: GO 30996
30935: LD_INT 2
30937: DOUBLE
30938: EQUAL
30939: IFTRUE 30943
30941: GO 30965
30943: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30944: LD_VAR 0 1
30948: PPUSH
30949: LD_VAR 0 6
30953: PPUSH
30954: LD_VAR 0 7
30958: PPUSH
30959: CALL_OW 153
30963: GO 30996
30965: LD_INT 3
30967: DOUBLE
30968: EQUAL
30969: IFTRUE 30973
30971: GO 30995
30973: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30974: LD_VAR 0 1
30978: PPUSH
30979: LD_VAR 0 6
30983: PPUSH
30984: LD_VAR 0 7
30988: PPUSH
30989: CALL_OW 154
30993: GO 30996
30995: POP
// end ;
30996: LD_VAR 0 2
31000: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31001: LD_INT 0
31003: PPUSH
31004: PPUSH
31005: PPUSH
31006: PPUSH
31007: PPUSH
31008: PPUSH
// if not unit or not building then
31009: LD_VAR 0 1
31013: NOT
31014: PUSH
31015: LD_VAR 0 2
31019: NOT
31020: OR
31021: IFFALSE 31025
// exit ;
31023: GO 31183
// x := GetX ( building ) ;
31025: LD_ADDR_VAR 0 5
31029: PUSH
31030: LD_VAR 0 2
31034: PPUSH
31035: CALL_OW 250
31039: ST_TO_ADDR
// y := GetY ( building ) ;
31040: LD_ADDR_VAR 0 6
31044: PUSH
31045: LD_VAR 0 2
31049: PPUSH
31050: CALL_OW 251
31054: ST_TO_ADDR
// for i = 0 to 5 do
31055: LD_ADDR_VAR 0 4
31059: PUSH
31060: DOUBLE
31061: LD_INT 0
31063: DEC
31064: ST_TO_ADDR
31065: LD_INT 5
31067: PUSH
31068: FOR_TO
31069: IFFALSE 31181
// begin _x := ShiftX ( x , i , 3 ) ;
31071: LD_ADDR_VAR 0 7
31075: PUSH
31076: LD_VAR 0 5
31080: PPUSH
31081: LD_VAR 0 4
31085: PPUSH
31086: LD_INT 3
31088: PPUSH
31089: CALL_OW 272
31093: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31094: LD_ADDR_VAR 0 8
31098: PUSH
31099: LD_VAR 0 6
31103: PPUSH
31104: LD_VAR 0 4
31108: PPUSH
31109: LD_INT 3
31111: PPUSH
31112: CALL_OW 273
31116: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31117: LD_VAR 0 7
31121: PPUSH
31122: LD_VAR 0 8
31126: PPUSH
31127: CALL_OW 488
31131: NOT
31132: IFFALSE 31136
// continue ;
31134: GO 31068
// if HexInfo ( _x , _y ) = 0 then
31136: LD_VAR 0 7
31140: PPUSH
31141: LD_VAR 0 8
31145: PPUSH
31146: CALL_OW 428
31150: PUSH
31151: LD_INT 0
31153: EQUAL
31154: IFFALSE 31179
// begin ComMoveXY ( unit , _x , _y ) ;
31156: LD_VAR 0 1
31160: PPUSH
31161: LD_VAR 0 7
31165: PPUSH
31166: LD_VAR 0 8
31170: PPUSH
31171: CALL_OW 111
// exit ;
31175: POP
31176: POP
31177: GO 31183
// end ; end ;
31179: GO 31068
31181: POP
31182: POP
// end ;
31183: LD_VAR 0 3
31187: RET
// export function ScanBase ( side , base_area ) ; begin
31188: LD_INT 0
31190: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31191: LD_ADDR_VAR 0 3
31195: PUSH
31196: LD_VAR 0 2
31200: PPUSH
31201: LD_INT 81
31203: PUSH
31204: LD_VAR 0 1
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PPUSH
31213: CALL_OW 70
31217: ST_TO_ADDR
// end ;
31218: LD_VAR 0 3
31222: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31223: LD_INT 0
31225: PPUSH
31226: PPUSH
31227: PPUSH
31228: PPUSH
// result := false ;
31229: LD_ADDR_VAR 0 2
31233: PUSH
31234: LD_INT 0
31236: ST_TO_ADDR
// side := GetSide ( unit ) ;
31237: LD_ADDR_VAR 0 3
31241: PUSH
31242: LD_VAR 0 1
31246: PPUSH
31247: CALL_OW 255
31251: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31252: LD_ADDR_VAR 0 4
31256: PUSH
31257: LD_VAR 0 1
31261: PPUSH
31262: CALL_OW 248
31266: ST_TO_ADDR
// case nat of 1 :
31267: LD_VAR 0 4
31271: PUSH
31272: LD_INT 1
31274: DOUBLE
31275: EQUAL
31276: IFTRUE 31280
31278: GO 31291
31280: POP
// tech := tech_lassight ; 2 :
31281: LD_ADDR_VAR 0 5
31285: PUSH
31286: LD_INT 12
31288: ST_TO_ADDR
31289: GO 31330
31291: LD_INT 2
31293: DOUBLE
31294: EQUAL
31295: IFTRUE 31299
31297: GO 31310
31299: POP
// tech := tech_mortar ; 3 :
31300: LD_ADDR_VAR 0 5
31304: PUSH
31305: LD_INT 41
31307: ST_TO_ADDR
31308: GO 31330
31310: LD_INT 3
31312: DOUBLE
31313: EQUAL
31314: IFTRUE 31318
31316: GO 31329
31318: POP
// tech := tech_bazooka ; end ;
31319: LD_ADDR_VAR 0 5
31323: PUSH
31324: LD_INT 44
31326: ST_TO_ADDR
31327: GO 31330
31329: POP
// if Researched ( side , tech ) then
31330: LD_VAR 0 3
31334: PPUSH
31335: LD_VAR 0 5
31339: PPUSH
31340: CALL_OW 325
31344: IFFALSE 31371
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31346: LD_ADDR_VAR 0 2
31350: PUSH
31351: LD_INT 5
31353: PUSH
31354: LD_INT 8
31356: PUSH
31357: LD_INT 9
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: LIST
31364: PUSH
31365: LD_VAR 0 4
31369: ARRAY
31370: ST_TO_ADDR
// end ;
31371: LD_VAR 0 2
31375: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31376: LD_INT 0
31378: PPUSH
31379: PPUSH
31380: PPUSH
// if not mines then
31381: LD_VAR 0 2
31385: NOT
31386: IFFALSE 31390
// exit ;
31388: GO 31534
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31390: LD_ADDR_VAR 0 5
31394: PUSH
31395: LD_INT 81
31397: PUSH
31398: LD_VAR 0 1
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 3
31409: PUSH
31410: LD_INT 21
31412: PUSH
31413: LD_INT 3
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PPUSH
31428: CALL_OW 69
31432: ST_TO_ADDR
// for i in mines do
31433: LD_ADDR_VAR 0 4
31437: PUSH
31438: LD_VAR 0 2
31442: PUSH
31443: FOR_IN
31444: IFFALSE 31532
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31446: LD_VAR 0 4
31450: PUSH
31451: LD_INT 1
31453: ARRAY
31454: PPUSH
31455: LD_VAR 0 4
31459: PUSH
31460: LD_INT 2
31462: ARRAY
31463: PPUSH
31464: CALL_OW 458
31468: NOT
31469: IFFALSE 31473
// continue ;
31471: GO 31443
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31473: LD_VAR 0 4
31477: PUSH
31478: LD_INT 1
31480: ARRAY
31481: PPUSH
31482: LD_VAR 0 4
31486: PUSH
31487: LD_INT 2
31489: ARRAY
31490: PPUSH
31491: CALL_OW 428
31495: PUSH
31496: LD_VAR 0 5
31500: IN
31501: IFFALSE 31530
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31503: LD_VAR 0 4
31507: PUSH
31508: LD_INT 1
31510: ARRAY
31511: PPUSH
31512: LD_VAR 0 4
31516: PUSH
31517: LD_INT 2
31519: ARRAY
31520: PPUSH
31521: LD_VAR 0 1
31525: PPUSH
31526: CALL_OW 456
// end ;
31530: GO 31443
31532: POP
31533: POP
// end ;
31534: LD_VAR 0 3
31538: RET
// export function Count ( array ) ; begin
31539: LD_INT 0
31541: PPUSH
// result := array + 0 ;
31542: LD_ADDR_VAR 0 2
31546: PUSH
31547: LD_VAR 0 1
31551: PUSH
31552: LD_INT 0
31554: PLUS
31555: ST_TO_ADDR
// end ;
31556: LD_VAR 0 2
31560: RET
// export function IsEmpty ( building ) ; begin
31561: LD_INT 0
31563: PPUSH
// if not building then
31564: LD_VAR 0 1
31568: NOT
31569: IFFALSE 31573
// exit ;
31571: GO 31616
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31573: LD_ADDR_VAR 0 2
31577: PUSH
31578: LD_VAR 0 1
31582: PUSH
31583: LD_INT 22
31585: PUSH
31586: LD_VAR 0 1
31590: PPUSH
31591: CALL_OW 255
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 58
31602: PUSH
31603: EMPTY
31604: LIST
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PPUSH
31610: CALL_OW 69
31614: IN
31615: ST_TO_ADDR
// end ;
31616: LD_VAR 0 2
31620: RET
// export function IsNotFull ( building ) ; var places ; begin
31621: LD_INT 0
31623: PPUSH
31624: PPUSH
// if not building then
31625: LD_VAR 0 1
31629: NOT
31630: IFFALSE 31634
// exit ;
31632: GO 31662
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31634: LD_ADDR_VAR 0 2
31638: PUSH
31639: LD_VAR 0 1
31643: PPUSH
31644: LD_INT 3
31646: PUSH
31647: LD_INT 62
31649: PUSH
31650: EMPTY
31651: LIST
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PPUSH
31657: CALL_OW 72
31661: ST_TO_ADDR
// end ;
31662: LD_VAR 0 2
31666: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31667: LD_INT 0
31669: PPUSH
31670: PPUSH
31671: PPUSH
31672: PPUSH
// tmp := [ ] ;
31673: LD_ADDR_VAR 0 3
31677: PUSH
31678: EMPTY
31679: ST_TO_ADDR
// list := [ ] ;
31680: LD_ADDR_VAR 0 5
31684: PUSH
31685: EMPTY
31686: ST_TO_ADDR
// for i = 16 to 25 do
31687: LD_ADDR_VAR 0 4
31691: PUSH
31692: DOUBLE
31693: LD_INT 16
31695: DEC
31696: ST_TO_ADDR
31697: LD_INT 25
31699: PUSH
31700: FOR_TO
31701: IFFALSE 31774
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31703: LD_ADDR_VAR 0 3
31707: PUSH
31708: LD_VAR 0 3
31712: PUSH
31713: LD_INT 22
31715: PUSH
31716: LD_VAR 0 1
31720: PPUSH
31721: CALL_OW 255
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 91
31732: PUSH
31733: LD_VAR 0 1
31737: PUSH
31738: LD_INT 6
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 30
31748: PUSH
31749: LD_VAR 0 4
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: LIST
31762: PUSH
31763: EMPTY
31764: LIST
31765: PPUSH
31766: CALL_OW 69
31770: ADD
31771: ST_TO_ADDR
31772: GO 31700
31774: POP
31775: POP
// for i = 1 to tmp do
31776: LD_ADDR_VAR 0 4
31780: PUSH
31781: DOUBLE
31782: LD_INT 1
31784: DEC
31785: ST_TO_ADDR
31786: LD_VAR 0 3
31790: PUSH
31791: FOR_TO
31792: IFFALSE 31880
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31794: LD_ADDR_VAR 0 5
31798: PUSH
31799: LD_VAR 0 5
31803: PUSH
31804: LD_VAR 0 3
31808: PUSH
31809: LD_VAR 0 4
31813: ARRAY
31814: PPUSH
31815: CALL_OW 266
31819: PUSH
31820: LD_VAR 0 3
31824: PUSH
31825: LD_VAR 0 4
31829: ARRAY
31830: PPUSH
31831: CALL_OW 250
31835: PUSH
31836: LD_VAR 0 3
31840: PUSH
31841: LD_VAR 0 4
31845: ARRAY
31846: PPUSH
31847: CALL_OW 251
31851: PUSH
31852: LD_VAR 0 3
31856: PUSH
31857: LD_VAR 0 4
31861: ARRAY
31862: PPUSH
31863: CALL_OW 254
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: PUSH
31874: EMPTY
31875: LIST
31876: ADD
31877: ST_TO_ADDR
31878: GO 31791
31880: POP
31881: POP
// result := list ;
31882: LD_ADDR_VAR 0 2
31886: PUSH
31887: LD_VAR 0 5
31891: ST_TO_ADDR
// end ;
31892: LD_VAR 0 2
31896: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31897: LD_INT 0
31899: PPUSH
31900: PPUSH
31901: PPUSH
31902: PPUSH
31903: PPUSH
31904: PPUSH
31905: PPUSH
// if not factory then
31906: LD_VAR 0 1
31910: NOT
31911: IFFALSE 31915
// exit ;
31913: GO 32508
// if control = control_apeman then
31915: LD_VAR 0 4
31919: PUSH
31920: LD_INT 5
31922: EQUAL
31923: IFFALSE 32032
// begin tmp := UnitsInside ( factory ) ;
31925: LD_ADDR_VAR 0 8
31929: PUSH
31930: LD_VAR 0 1
31934: PPUSH
31935: CALL_OW 313
31939: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31940: LD_VAR 0 8
31944: PPUSH
31945: LD_INT 25
31947: PUSH
31948: LD_INT 12
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PPUSH
31955: CALL_OW 72
31959: NOT
31960: IFFALSE 31970
// control := control_manual ;
31962: LD_ADDR_VAR 0 4
31966: PUSH
31967: LD_INT 1
31969: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31970: LD_ADDR_VAR 0 8
31974: PUSH
31975: LD_VAR 0 1
31979: PPUSH
31980: CALL 31667 0 1
31984: ST_TO_ADDR
// if tmp then
31985: LD_VAR 0 8
31989: IFFALSE 32032
// begin for i in tmp do
31991: LD_ADDR_VAR 0 7
31995: PUSH
31996: LD_VAR 0 8
32000: PUSH
32001: FOR_IN
32002: IFFALSE 32030
// if i [ 1 ] = b_ext_radio then
32004: LD_VAR 0 7
32008: PUSH
32009: LD_INT 1
32011: ARRAY
32012: PUSH
32013: LD_INT 22
32015: EQUAL
32016: IFFALSE 32028
// begin control := control_remote ;
32018: LD_ADDR_VAR 0 4
32022: PUSH
32023: LD_INT 2
32025: ST_TO_ADDR
// break ;
32026: GO 32030
// end ;
32028: GO 32001
32030: POP
32031: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32032: LD_VAR 0 1
32036: PPUSH
32037: LD_VAR 0 2
32041: PPUSH
32042: LD_VAR 0 3
32046: PPUSH
32047: LD_VAR 0 4
32051: PPUSH
32052: LD_VAR 0 5
32056: PPUSH
32057: CALL_OW 448
32061: IFFALSE 32096
// begin result := [ chassis , engine , control , weapon ] ;
32063: LD_ADDR_VAR 0 6
32067: PUSH
32068: LD_VAR 0 2
32072: PUSH
32073: LD_VAR 0 3
32077: PUSH
32078: LD_VAR 0 4
32082: PUSH
32083: LD_VAR 0 5
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: ST_TO_ADDR
// exit ;
32094: GO 32508
// end ; _chassis := AvailableChassisList ( factory ) ;
32096: LD_ADDR_VAR 0 9
32100: PUSH
32101: LD_VAR 0 1
32105: PPUSH
32106: CALL_OW 475
32110: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32111: LD_ADDR_VAR 0 11
32115: PUSH
32116: LD_VAR 0 1
32120: PPUSH
32121: CALL_OW 476
32125: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32126: LD_ADDR_VAR 0 12
32130: PUSH
32131: LD_VAR 0 1
32135: PPUSH
32136: CALL_OW 477
32140: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32141: LD_ADDR_VAR 0 10
32145: PUSH
32146: LD_VAR 0 1
32150: PPUSH
32151: CALL_OW 478
32155: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32156: LD_VAR 0 9
32160: NOT
32161: PUSH
32162: LD_VAR 0 11
32166: NOT
32167: OR
32168: PUSH
32169: LD_VAR 0 12
32173: NOT
32174: OR
32175: PUSH
32176: LD_VAR 0 10
32180: NOT
32181: OR
32182: IFFALSE 32217
// begin result := [ chassis , engine , control , weapon ] ;
32184: LD_ADDR_VAR 0 6
32188: PUSH
32189: LD_VAR 0 2
32193: PUSH
32194: LD_VAR 0 3
32198: PUSH
32199: LD_VAR 0 4
32203: PUSH
32204: LD_VAR 0 5
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: ST_TO_ADDR
// exit ;
32215: GO 32508
// end ; if not chassis in _chassis then
32217: LD_VAR 0 2
32221: PUSH
32222: LD_VAR 0 9
32226: IN
32227: NOT
32228: IFFALSE 32254
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32230: LD_ADDR_VAR 0 2
32234: PUSH
32235: LD_VAR 0 9
32239: PUSH
32240: LD_INT 1
32242: PPUSH
32243: LD_VAR 0 9
32247: PPUSH
32248: CALL_OW 12
32252: ARRAY
32253: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32254: LD_VAR 0 2
32258: PPUSH
32259: LD_VAR 0 3
32263: PPUSH
32264: CALL 32513 0 2
32268: NOT
32269: IFFALSE 32328
// repeat engine := _engine [ 1 ] ;
32271: LD_ADDR_VAR 0 3
32275: PUSH
32276: LD_VAR 0 11
32280: PUSH
32281: LD_INT 1
32283: ARRAY
32284: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32285: LD_ADDR_VAR 0 11
32289: PUSH
32290: LD_VAR 0 11
32294: PPUSH
32295: LD_INT 1
32297: PPUSH
32298: CALL_OW 3
32302: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32303: LD_VAR 0 2
32307: PPUSH
32308: LD_VAR 0 3
32312: PPUSH
32313: CALL 32513 0 2
32317: PUSH
32318: LD_VAR 0 11
32322: PUSH
32323: EMPTY
32324: EQUAL
32325: OR
32326: IFFALSE 32271
// if not control in _control then
32328: LD_VAR 0 4
32332: PUSH
32333: LD_VAR 0 12
32337: IN
32338: NOT
32339: IFFALSE 32365
// control := _control [ rand ( 1 , _control ) ] ;
32341: LD_ADDR_VAR 0 4
32345: PUSH
32346: LD_VAR 0 12
32350: PUSH
32351: LD_INT 1
32353: PPUSH
32354: LD_VAR 0 12
32358: PPUSH
32359: CALL_OW 12
32363: ARRAY
32364: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32365: LD_VAR 0 2
32369: PPUSH
32370: LD_VAR 0 5
32374: PPUSH
32375: CALL 32733 0 2
32379: NOT
32380: IFFALSE 32439
// repeat weapon := _weapon [ 1 ] ;
32382: LD_ADDR_VAR 0 5
32386: PUSH
32387: LD_VAR 0 10
32391: PUSH
32392: LD_INT 1
32394: ARRAY
32395: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32396: LD_ADDR_VAR 0 10
32400: PUSH
32401: LD_VAR 0 10
32405: PPUSH
32406: LD_INT 1
32408: PPUSH
32409: CALL_OW 3
32413: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32414: LD_VAR 0 2
32418: PPUSH
32419: LD_VAR 0 5
32423: PPUSH
32424: CALL 32733 0 2
32428: PUSH
32429: LD_VAR 0 10
32433: PUSH
32434: EMPTY
32435: EQUAL
32436: OR
32437: IFFALSE 32382
// result := [ ] ;
32439: LD_ADDR_VAR 0 6
32443: PUSH
32444: EMPTY
32445: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32446: LD_VAR 0 1
32450: PPUSH
32451: LD_VAR 0 2
32455: PPUSH
32456: LD_VAR 0 3
32460: PPUSH
32461: LD_VAR 0 4
32465: PPUSH
32466: LD_VAR 0 5
32470: PPUSH
32471: CALL_OW 448
32475: IFFALSE 32508
// result := [ chassis , engine , control , weapon ] ;
32477: LD_ADDR_VAR 0 6
32481: PUSH
32482: LD_VAR 0 2
32486: PUSH
32487: LD_VAR 0 3
32491: PUSH
32492: LD_VAR 0 4
32496: PUSH
32497: LD_VAR 0 5
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: ST_TO_ADDR
// end ;
32508: LD_VAR 0 6
32512: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32513: LD_INT 0
32515: PPUSH
// if not chassis or not engine then
32516: LD_VAR 0 1
32520: NOT
32521: PUSH
32522: LD_VAR 0 2
32526: NOT
32527: OR
32528: IFFALSE 32532
// exit ;
32530: GO 32728
// case engine of engine_solar :
32532: LD_VAR 0 2
32536: PUSH
32537: LD_INT 2
32539: DOUBLE
32540: EQUAL
32541: IFTRUE 32545
32543: GO 32583
32545: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32546: LD_ADDR_VAR 0 3
32550: PUSH
32551: LD_INT 11
32553: PUSH
32554: LD_INT 12
32556: PUSH
32557: LD_INT 13
32559: PUSH
32560: LD_INT 14
32562: PUSH
32563: LD_INT 1
32565: PUSH
32566: LD_INT 2
32568: PUSH
32569: LD_INT 3
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: ST_TO_ADDR
32581: GO 32712
32583: LD_INT 1
32585: DOUBLE
32586: EQUAL
32587: IFTRUE 32591
32589: GO 32653
32591: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32592: LD_ADDR_VAR 0 3
32596: PUSH
32597: LD_INT 11
32599: PUSH
32600: LD_INT 12
32602: PUSH
32603: LD_INT 13
32605: PUSH
32606: LD_INT 14
32608: PUSH
32609: LD_INT 1
32611: PUSH
32612: LD_INT 2
32614: PUSH
32615: LD_INT 3
32617: PUSH
32618: LD_INT 4
32620: PUSH
32621: LD_INT 5
32623: PUSH
32624: LD_INT 21
32626: PUSH
32627: LD_INT 23
32629: PUSH
32630: LD_INT 22
32632: PUSH
32633: LD_INT 24
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: ST_TO_ADDR
32651: GO 32712
32653: LD_INT 3
32655: DOUBLE
32656: EQUAL
32657: IFTRUE 32661
32659: GO 32711
32661: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32662: LD_ADDR_VAR 0 3
32666: PUSH
32667: LD_INT 13
32669: PUSH
32670: LD_INT 14
32672: PUSH
32673: LD_INT 2
32675: PUSH
32676: LD_INT 3
32678: PUSH
32679: LD_INT 4
32681: PUSH
32682: LD_INT 5
32684: PUSH
32685: LD_INT 21
32687: PUSH
32688: LD_INT 22
32690: PUSH
32691: LD_INT 23
32693: PUSH
32694: LD_INT 24
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: ST_TO_ADDR
32709: GO 32712
32711: POP
// result := ( chassis in result ) ;
32712: LD_ADDR_VAR 0 3
32716: PUSH
32717: LD_VAR 0 1
32721: PUSH
32722: LD_VAR 0 3
32726: IN
32727: ST_TO_ADDR
// end ;
32728: LD_VAR 0 3
32732: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32733: LD_INT 0
32735: PPUSH
// if not chassis or not weapon then
32736: LD_VAR 0 1
32740: NOT
32741: PUSH
32742: LD_VAR 0 2
32746: NOT
32747: OR
32748: IFFALSE 32752
// exit ;
32750: GO 33812
// case weapon of us_machine_gun :
32752: LD_VAR 0 2
32756: PUSH
32757: LD_INT 2
32759: DOUBLE
32760: EQUAL
32761: IFTRUE 32765
32763: GO 32795
32765: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32766: LD_ADDR_VAR 0 3
32770: PUSH
32771: LD_INT 1
32773: PUSH
32774: LD_INT 2
32776: PUSH
32777: LD_INT 3
32779: PUSH
32780: LD_INT 4
32782: PUSH
32783: LD_INT 5
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: ST_TO_ADDR
32793: GO 33796
32795: LD_INT 3
32797: DOUBLE
32798: EQUAL
32799: IFTRUE 32803
32801: GO 32833
32803: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32804: LD_ADDR_VAR 0 3
32808: PUSH
32809: LD_INT 1
32811: PUSH
32812: LD_INT 2
32814: PUSH
32815: LD_INT 3
32817: PUSH
32818: LD_INT 4
32820: PUSH
32821: LD_INT 5
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: ST_TO_ADDR
32831: GO 33796
32833: LD_INT 11
32835: DOUBLE
32836: EQUAL
32837: IFTRUE 32841
32839: GO 32871
32841: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32842: LD_ADDR_VAR 0 3
32846: PUSH
32847: LD_INT 1
32849: PUSH
32850: LD_INT 2
32852: PUSH
32853: LD_INT 3
32855: PUSH
32856: LD_INT 4
32858: PUSH
32859: LD_INT 5
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: ST_TO_ADDR
32869: GO 33796
32871: LD_INT 4
32873: DOUBLE
32874: EQUAL
32875: IFTRUE 32879
32877: GO 32905
32879: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32880: LD_ADDR_VAR 0 3
32884: PUSH
32885: LD_INT 2
32887: PUSH
32888: LD_INT 3
32890: PUSH
32891: LD_INT 4
32893: PUSH
32894: LD_INT 5
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: ST_TO_ADDR
32903: GO 33796
32905: LD_INT 5
32907: DOUBLE
32908: EQUAL
32909: IFTRUE 32913
32911: GO 32939
32913: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32914: LD_ADDR_VAR 0 3
32918: PUSH
32919: LD_INT 2
32921: PUSH
32922: LD_INT 3
32924: PUSH
32925: LD_INT 4
32927: PUSH
32928: LD_INT 5
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: ST_TO_ADDR
32937: GO 33796
32939: LD_INT 9
32941: DOUBLE
32942: EQUAL
32943: IFTRUE 32947
32945: GO 32973
32947: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32948: LD_ADDR_VAR 0 3
32952: PUSH
32953: LD_INT 2
32955: PUSH
32956: LD_INT 3
32958: PUSH
32959: LD_INT 4
32961: PUSH
32962: LD_INT 5
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: ST_TO_ADDR
32971: GO 33796
32973: LD_INT 7
32975: DOUBLE
32976: EQUAL
32977: IFTRUE 32981
32979: GO 33007
32981: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32982: LD_ADDR_VAR 0 3
32986: PUSH
32987: LD_INT 2
32989: PUSH
32990: LD_INT 3
32992: PUSH
32993: LD_INT 4
32995: PUSH
32996: LD_INT 5
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: ST_TO_ADDR
33005: GO 33796
33007: LD_INT 12
33009: DOUBLE
33010: EQUAL
33011: IFTRUE 33015
33013: GO 33041
33015: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33016: LD_ADDR_VAR 0 3
33020: PUSH
33021: LD_INT 2
33023: PUSH
33024: LD_INT 3
33026: PUSH
33027: LD_INT 4
33029: PUSH
33030: LD_INT 5
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: ST_TO_ADDR
33039: GO 33796
33041: LD_INT 13
33043: DOUBLE
33044: EQUAL
33045: IFTRUE 33049
33047: GO 33075
33049: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33050: LD_ADDR_VAR 0 3
33054: PUSH
33055: LD_INT 2
33057: PUSH
33058: LD_INT 3
33060: PUSH
33061: LD_INT 4
33063: PUSH
33064: LD_INT 5
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: ST_TO_ADDR
33073: GO 33796
33075: LD_INT 14
33077: DOUBLE
33078: EQUAL
33079: IFTRUE 33083
33081: GO 33101
33083: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33084: LD_ADDR_VAR 0 3
33088: PUSH
33089: LD_INT 4
33091: PUSH
33092: LD_INT 5
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: ST_TO_ADDR
33099: GO 33796
33101: LD_INT 6
33103: DOUBLE
33104: EQUAL
33105: IFTRUE 33109
33107: GO 33127
33109: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33110: LD_ADDR_VAR 0 3
33114: PUSH
33115: LD_INT 4
33117: PUSH
33118: LD_INT 5
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: ST_TO_ADDR
33125: GO 33796
33127: LD_INT 10
33129: DOUBLE
33130: EQUAL
33131: IFTRUE 33135
33133: GO 33153
33135: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33136: LD_ADDR_VAR 0 3
33140: PUSH
33141: LD_INT 4
33143: PUSH
33144: LD_INT 5
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: ST_TO_ADDR
33151: GO 33796
33153: LD_INT 22
33155: DOUBLE
33156: EQUAL
33157: IFTRUE 33161
33159: GO 33187
33161: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33162: LD_ADDR_VAR 0 3
33166: PUSH
33167: LD_INT 11
33169: PUSH
33170: LD_INT 12
33172: PUSH
33173: LD_INT 13
33175: PUSH
33176: LD_INT 14
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: ST_TO_ADDR
33185: GO 33796
33187: LD_INT 23
33189: DOUBLE
33190: EQUAL
33191: IFTRUE 33195
33193: GO 33221
33195: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33196: LD_ADDR_VAR 0 3
33200: PUSH
33201: LD_INT 11
33203: PUSH
33204: LD_INT 12
33206: PUSH
33207: LD_INT 13
33209: PUSH
33210: LD_INT 14
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: ST_TO_ADDR
33219: GO 33796
33221: LD_INT 24
33223: DOUBLE
33224: EQUAL
33225: IFTRUE 33229
33227: GO 33255
33229: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33230: LD_ADDR_VAR 0 3
33234: PUSH
33235: LD_INT 11
33237: PUSH
33238: LD_INT 12
33240: PUSH
33241: LD_INT 13
33243: PUSH
33244: LD_INT 14
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: ST_TO_ADDR
33253: GO 33796
33255: LD_INT 30
33257: DOUBLE
33258: EQUAL
33259: IFTRUE 33263
33261: GO 33289
33263: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33264: LD_ADDR_VAR 0 3
33268: PUSH
33269: LD_INT 11
33271: PUSH
33272: LD_INT 12
33274: PUSH
33275: LD_INT 13
33277: PUSH
33278: LD_INT 14
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: ST_TO_ADDR
33287: GO 33796
33289: LD_INT 25
33291: DOUBLE
33292: EQUAL
33293: IFTRUE 33297
33295: GO 33315
33297: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33298: LD_ADDR_VAR 0 3
33302: PUSH
33303: LD_INT 13
33305: PUSH
33306: LD_INT 14
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: ST_TO_ADDR
33313: GO 33796
33315: LD_INT 27
33317: DOUBLE
33318: EQUAL
33319: IFTRUE 33323
33321: GO 33341
33323: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33324: LD_ADDR_VAR 0 3
33328: PUSH
33329: LD_INT 13
33331: PUSH
33332: LD_INT 14
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: ST_TO_ADDR
33339: GO 33796
33341: LD_INT 92
33343: DOUBLE
33344: EQUAL
33345: IFTRUE 33349
33347: GO 33375
33349: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33350: LD_ADDR_VAR 0 3
33354: PUSH
33355: LD_INT 11
33357: PUSH
33358: LD_INT 12
33360: PUSH
33361: LD_INT 13
33363: PUSH
33364: LD_INT 14
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: ST_TO_ADDR
33373: GO 33796
33375: LD_INT 28
33377: DOUBLE
33378: EQUAL
33379: IFTRUE 33383
33381: GO 33401
33383: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33384: LD_ADDR_VAR 0 3
33388: PUSH
33389: LD_INT 13
33391: PUSH
33392: LD_INT 14
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: ST_TO_ADDR
33399: GO 33796
33401: LD_INT 29
33403: DOUBLE
33404: EQUAL
33405: IFTRUE 33409
33407: GO 33427
33409: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33410: LD_ADDR_VAR 0 3
33414: PUSH
33415: LD_INT 13
33417: PUSH
33418: LD_INT 14
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: ST_TO_ADDR
33425: GO 33796
33427: LD_INT 31
33429: DOUBLE
33430: EQUAL
33431: IFTRUE 33435
33433: GO 33453
33435: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33436: LD_ADDR_VAR 0 3
33440: PUSH
33441: LD_INT 13
33443: PUSH
33444: LD_INT 14
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: ST_TO_ADDR
33451: GO 33796
33453: LD_INT 26
33455: DOUBLE
33456: EQUAL
33457: IFTRUE 33461
33459: GO 33479
33461: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33462: LD_ADDR_VAR 0 3
33466: PUSH
33467: LD_INT 13
33469: PUSH
33470: LD_INT 14
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: ST_TO_ADDR
33477: GO 33796
33479: LD_INT 42
33481: DOUBLE
33482: EQUAL
33483: IFTRUE 33487
33485: GO 33513
33487: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33488: LD_ADDR_VAR 0 3
33492: PUSH
33493: LD_INT 21
33495: PUSH
33496: LD_INT 22
33498: PUSH
33499: LD_INT 23
33501: PUSH
33502: LD_INT 24
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: ST_TO_ADDR
33511: GO 33796
33513: LD_INT 43
33515: DOUBLE
33516: EQUAL
33517: IFTRUE 33521
33519: GO 33547
33521: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33522: LD_ADDR_VAR 0 3
33526: PUSH
33527: LD_INT 21
33529: PUSH
33530: LD_INT 22
33532: PUSH
33533: LD_INT 23
33535: PUSH
33536: LD_INT 24
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: ST_TO_ADDR
33545: GO 33796
33547: LD_INT 44
33549: DOUBLE
33550: EQUAL
33551: IFTRUE 33555
33553: GO 33581
33555: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33556: LD_ADDR_VAR 0 3
33560: PUSH
33561: LD_INT 21
33563: PUSH
33564: LD_INT 22
33566: PUSH
33567: LD_INT 23
33569: PUSH
33570: LD_INT 24
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: ST_TO_ADDR
33579: GO 33796
33581: LD_INT 45
33583: DOUBLE
33584: EQUAL
33585: IFTRUE 33589
33587: GO 33615
33589: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33590: LD_ADDR_VAR 0 3
33594: PUSH
33595: LD_INT 21
33597: PUSH
33598: LD_INT 22
33600: PUSH
33601: LD_INT 23
33603: PUSH
33604: LD_INT 24
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: ST_TO_ADDR
33613: GO 33796
33615: LD_INT 49
33617: DOUBLE
33618: EQUAL
33619: IFTRUE 33623
33621: GO 33649
33623: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33624: LD_ADDR_VAR 0 3
33628: PUSH
33629: LD_INT 21
33631: PUSH
33632: LD_INT 22
33634: PUSH
33635: LD_INT 23
33637: PUSH
33638: LD_INT 24
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: ST_TO_ADDR
33647: GO 33796
33649: LD_INT 51
33651: DOUBLE
33652: EQUAL
33653: IFTRUE 33657
33655: GO 33683
33657: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33658: LD_ADDR_VAR 0 3
33662: PUSH
33663: LD_INT 21
33665: PUSH
33666: LD_INT 22
33668: PUSH
33669: LD_INT 23
33671: PUSH
33672: LD_INT 24
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: ST_TO_ADDR
33681: GO 33796
33683: LD_INT 52
33685: DOUBLE
33686: EQUAL
33687: IFTRUE 33691
33689: GO 33717
33691: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33692: LD_ADDR_VAR 0 3
33696: PUSH
33697: LD_INT 21
33699: PUSH
33700: LD_INT 22
33702: PUSH
33703: LD_INT 23
33705: PUSH
33706: LD_INT 24
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: ST_TO_ADDR
33715: GO 33796
33717: LD_INT 53
33719: DOUBLE
33720: EQUAL
33721: IFTRUE 33725
33723: GO 33743
33725: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33726: LD_ADDR_VAR 0 3
33730: PUSH
33731: LD_INT 23
33733: PUSH
33734: LD_INT 24
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: ST_TO_ADDR
33741: GO 33796
33743: LD_INT 46
33745: DOUBLE
33746: EQUAL
33747: IFTRUE 33751
33749: GO 33769
33751: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33752: LD_ADDR_VAR 0 3
33756: PUSH
33757: LD_INT 23
33759: PUSH
33760: LD_INT 24
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: ST_TO_ADDR
33767: GO 33796
33769: LD_INT 47
33771: DOUBLE
33772: EQUAL
33773: IFTRUE 33777
33775: GO 33795
33777: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33778: LD_ADDR_VAR 0 3
33782: PUSH
33783: LD_INT 23
33785: PUSH
33786: LD_INT 24
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: ST_TO_ADDR
33793: GO 33796
33795: POP
// result := ( chassis in result ) ;
33796: LD_ADDR_VAR 0 3
33800: PUSH
33801: LD_VAR 0 1
33805: PUSH
33806: LD_VAR 0 3
33810: IN
33811: ST_TO_ADDR
// end ;
33812: LD_VAR 0 3
33816: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33817: LD_INT 0
33819: PPUSH
33820: PPUSH
33821: PPUSH
33822: PPUSH
33823: PPUSH
33824: PPUSH
33825: PPUSH
// result := array ;
33826: LD_ADDR_VAR 0 5
33830: PUSH
33831: LD_VAR 0 1
33835: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33836: LD_VAR 0 1
33840: NOT
33841: PUSH
33842: LD_VAR 0 2
33846: NOT
33847: OR
33848: PUSH
33849: LD_VAR 0 3
33853: NOT
33854: OR
33855: PUSH
33856: LD_VAR 0 2
33860: PUSH
33861: LD_VAR 0 1
33865: GREATER
33866: OR
33867: PUSH
33868: LD_VAR 0 3
33872: PUSH
33873: LD_VAR 0 1
33877: GREATER
33878: OR
33879: IFFALSE 33883
// exit ;
33881: GO 34179
// if direction then
33883: LD_VAR 0 4
33887: IFFALSE 33951
// begin d := 1 ;
33889: LD_ADDR_VAR 0 9
33893: PUSH
33894: LD_INT 1
33896: ST_TO_ADDR
// if i_from > i_to then
33897: LD_VAR 0 2
33901: PUSH
33902: LD_VAR 0 3
33906: GREATER
33907: IFFALSE 33933
// length := ( array - i_from ) + i_to else
33909: LD_ADDR_VAR 0 11
33913: PUSH
33914: LD_VAR 0 1
33918: PUSH
33919: LD_VAR 0 2
33923: MINUS
33924: PUSH
33925: LD_VAR 0 3
33929: PLUS
33930: ST_TO_ADDR
33931: GO 33949
// length := i_to - i_from ;
33933: LD_ADDR_VAR 0 11
33937: PUSH
33938: LD_VAR 0 3
33942: PUSH
33943: LD_VAR 0 2
33947: MINUS
33948: ST_TO_ADDR
// end else
33949: GO 34012
// begin d := - 1 ;
33951: LD_ADDR_VAR 0 9
33955: PUSH
33956: LD_INT 1
33958: NEG
33959: ST_TO_ADDR
// if i_from > i_to then
33960: LD_VAR 0 2
33964: PUSH
33965: LD_VAR 0 3
33969: GREATER
33970: IFFALSE 33990
// length := i_from - i_to else
33972: LD_ADDR_VAR 0 11
33976: PUSH
33977: LD_VAR 0 2
33981: PUSH
33982: LD_VAR 0 3
33986: MINUS
33987: ST_TO_ADDR
33988: GO 34012
// length := ( array - i_to ) + i_from ;
33990: LD_ADDR_VAR 0 11
33994: PUSH
33995: LD_VAR 0 1
33999: PUSH
34000: LD_VAR 0 3
34004: MINUS
34005: PUSH
34006: LD_VAR 0 2
34010: PLUS
34011: ST_TO_ADDR
// end ; if not length then
34012: LD_VAR 0 11
34016: NOT
34017: IFFALSE 34021
// exit ;
34019: GO 34179
// tmp := array ;
34021: LD_ADDR_VAR 0 10
34025: PUSH
34026: LD_VAR 0 1
34030: ST_TO_ADDR
// for i = 1 to length do
34031: LD_ADDR_VAR 0 6
34035: PUSH
34036: DOUBLE
34037: LD_INT 1
34039: DEC
34040: ST_TO_ADDR
34041: LD_VAR 0 11
34045: PUSH
34046: FOR_TO
34047: IFFALSE 34167
// begin for j = 1 to array do
34049: LD_ADDR_VAR 0 7
34053: PUSH
34054: DOUBLE
34055: LD_INT 1
34057: DEC
34058: ST_TO_ADDR
34059: LD_VAR 0 1
34063: PUSH
34064: FOR_TO
34065: IFFALSE 34153
// begin k := j + d ;
34067: LD_ADDR_VAR 0 8
34071: PUSH
34072: LD_VAR 0 7
34076: PUSH
34077: LD_VAR 0 9
34081: PLUS
34082: ST_TO_ADDR
// if k > array then
34083: LD_VAR 0 8
34087: PUSH
34088: LD_VAR 0 1
34092: GREATER
34093: IFFALSE 34103
// k := 1 ;
34095: LD_ADDR_VAR 0 8
34099: PUSH
34100: LD_INT 1
34102: ST_TO_ADDR
// if not k then
34103: LD_VAR 0 8
34107: NOT
34108: IFFALSE 34120
// k := array ;
34110: LD_ADDR_VAR 0 8
34114: PUSH
34115: LD_VAR 0 1
34119: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34120: LD_ADDR_VAR 0 10
34124: PUSH
34125: LD_VAR 0 10
34129: PPUSH
34130: LD_VAR 0 8
34134: PPUSH
34135: LD_VAR 0 1
34139: PUSH
34140: LD_VAR 0 7
34144: ARRAY
34145: PPUSH
34146: CALL_OW 1
34150: ST_TO_ADDR
// end ;
34151: GO 34064
34153: POP
34154: POP
// array := tmp ;
34155: LD_ADDR_VAR 0 1
34159: PUSH
34160: LD_VAR 0 10
34164: ST_TO_ADDR
// end ;
34165: GO 34046
34167: POP
34168: POP
// result := array ;
34169: LD_ADDR_VAR 0 5
34173: PUSH
34174: LD_VAR 0 1
34178: ST_TO_ADDR
// end ;
34179: LD_VAR 0 5
34183: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34184: LD_INT 0
34186: PPUSH
34187: PPUSH
// result := 0 ;
34188: LD_ADDR_VAR 0 3
34192: PUSH
34193: LD_INT 0
34195: ST_TO_ADDR
// if not array or not value in array then
34196: LD_VAR 0 1
34200: NOT
34201: PUSH
34202: LD_VAR 0 2
34206: PUSH
34207: LD_VAR 0 1
34211: IN
34212: NOT
34213: OR
34214: IFFALSE 34218
// exit ;
34216: GO 34272
// for i = 1 to array do
34218: LD_ADDR_VAR 0 4
34222: PUSH
34223: DOUBLE
34224: LD_INT 1
34226: DEC
34227: ST_TO_ADDR
34228: LD_VAR 0 1
34232: PUSH
34233: FOR_TO
34234: IFFALSE 34270
// if value = array [ i ] then
34236: LD_VAR 0 2
34240: PUSH
34241: LD_VAR 0 1
34245: PUSH
34246: LD_VAR 0 4
34250: ARRAY
34251: EQUAL
34252: IFFALSE 34268
// begin result := i ;
34254: LD_ADDR_VAR 0 3
34258: PUSH
34259: LD_VAR 0 4
34263: ST_TO_ADDR
// exit ;
34264: POP
34265: POP
34266: GO 34272
// end ;
34268: GO 34233
34270: POP
34271: POP
// end ;
34272: LD_VAR 0 3
34276: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34277: LD_INT 0
34279: PPUSH
// vc_chassis := chassis ;
34280: LD_ADDR_OWVAR 37
34284: PUSH
34285: LD_VAR 0 1
34289: ST_TO_ADDR
// vc_engine := engine ;
34290: LD_ADDR_OWVAR 39
34294: PUSH
34295: LD_VAR 0 2
34299: ST_TO_ADDR
// vc_control := control ;
34300: LD_ADDR_OWVAR 38
34304: PUSH
34305: LD_VAR 0 3
34309: ST_TO_ADDR
// vc_weapon := weapon ;
34310: LD_ADDR_OWVAR 40
34314: PUSH
34315: LD_VAR 0 4
34319: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34320: LD_ADDR_OWVAR 41
34324: PUSH
34325: LD_VAR 0 5
34329: ST_TO_ADDR
// end ;
34330: LD_VAR 0 6
34334: RET
// export function WantPlant ( unit ) ; var task ; begin
34335: LD_INT 0
34337: PPUSH
34338: PPUSH
// result := false ;
34339: LD_ADDR_VAR 0 2
34343: PUSH
34344: LD_INT 0
34346: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34347: LD_ADDR_VAR 0 3
34351: PUSH
34352: LD_VAR 0 1
34356: PPUSH
34357: CALL_OW 437
34361: ST_TO_ADDR
// if task then
34362: LD_VAR 0 3
34366: IFFALSE 34394
// if task [ 1 ] [ 1 ] = p then
34368: LD_VAR 0 3
34372: PUSH
34373: LD_INT 1
34375: ARRAY
34376: PUSH
34377: LD_INT 1
34379: ARRAY
34380: PUSH
34381: LD_STRING p
34383: EQUAL
34384: IFFALSE 34394
// result := true ;
34386: LD_ADDR_VAR 0 2
34390: PUSH
34391: LD_INT 1
34393: ST_TO_ADDR
// end ;
34394: LD_VAR 0 2
34398: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34399: LD_INT 0
34401: PPUSH
34402: PPUSH
34403: PPUSH
34404: PPUSH
// if pos < 1 then
34405: LD_VAR 0 2
34409: PUSH
34410: LD_INT 1
34412: LESS
34413: IFFALSE 34417
// exit ;
34415: GO 34720
// if pos = 1 then
34417: LD_VAR 0 2
34421: PUSH
34422: LD_INT 1
34424: EQUAL
34425: IFFALSE 34458
// result := Replace ( arr , pos [ 1 ] , value ) else
34427: LD_ADDR_VAR 0 4
34431: PUSH
34432: LD_VAR 0 1
34436: PPUSH
34437: LD_VAR 0 2
34441: PUSH
34442: LD_INT 1
34444: ARRAY
34445: PPUSH
34446: LD_VAR 0 3
34450: PPUSH
34451: CALL_OW 1
34455: ST_TO_ADDR
34456: GO 34720
// begin tmp := arr ;
34458: LD_ADDR_VAR 0 6
34462: PUSH
34463: LD_VAR 0 1
34467: ST_TO_ADDR
// s_arr := [ tmp ] ;
34468: LD_ADDR_VAR 0 7
34472: PUSH
34473: LD_VAR 0 6
34477: PUSH
34478: EMPTY
34479: LIST
34480: ST_TO_ADDR
// for i = 1 to pos - 1 do
34481: LD_ADDR_VAR 0 5
34485: PUSH
34486: DOUBLE
34487: LD_INT 1
34489: DEC
34490: ST_TO_ADDR
34491: LD_VAR 0 2
34495: PUSH
34496: LD_INT 1
34498: MINUS
34499: PUSH
34500: FOR_TO
34501: IFFALSE 34546
// begin tmp := tmp [ pos [ i ] ] ;
34503: LD_ADDR_VAR 0 6
34507: PUSH
34508: LD_VAR 0 6
34512: PUSH
34513: LD_VAR 0 2
34517: PUSH
34518: LD_VAR 0 5
34522: ARRAY
34523: ARRAY
34524: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34525: LD_ADDR_VAR 0 7
34529: PUSH
34530: LD_VAR 0 7
34534: PUSH
34535: LD_VAR 0 6
34539: PUSH
34540: EMPTY
34541: LIST
34542: ADD
34543: ST_TO_ADDR
// end ;
34544: GO 34500
34546: POP
34547: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34548: LD_ADDR_VAR 0 6
34552: PUSH
34553: LD_VAR 0 6
34557: PPUSH
34558: LD_VAR 0 2
34562: PUSH
34563: LD_VAR 0 2
34567: ARRAY
34568: PPUSH
34569: LD_VAR 0 3
34573: PPUSH
34574: CALL_OW 1
34578: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34579: LD_ADDR_VAR 0 7
34583: PUSH
34584: LD_VAR 0 7
34588: PPUSH
34589: LD_VAR 0 7
34593: PPUSH
34594: LD_VAR 0 6
34598: PPUSH
34599: CALL_OW 1
34603: ST_TO_ADDR
// for i = s_arr downto 2 do
34604: LD_ADDR_VAR 0 5
34608: PUSH
34609: DOUBLE
34610: LD_VAR 0 7
34614: INC
34615: ST_TO_ADDR
34616: LD_INT 2
34618: PUSH
34619: FOR_DOWNTO
34620: IFFALSE 34704
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34622: LD_ADDR_VAR 0 6
34626: PUSH
34627: LD_VAR 0 7
34631: PUSH
34632: LD_VAR 0 5
34636: PUSH
34637: LD_INT 1
34639: MINUS
34640: ARRAY
34641: PPUSH
34642: LD_VAR 0 2
34646: PUSH
34647: LD_VAR 0 5
34651: PUSH
34652: LD_INT 1
34654: MINUS
34655: ARRAY
34656: PPUSH
34657: LD_VAR 0 7
34661: PUSH
34662: LD_VAR 0 5
34666: ARRAY
34667: PPUSH
34668: CALL_OW 1
34672: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34673: LD_ADDR_VAR 0 7
34677: PUSH
34678: LD_VAR 0 7
34682: PPUSH
34683: LD_VAR 0 5
34687: PUSH
34688: LD_INT 1
34690: MINUS
34691: PPUSH
34692: LD_VAR 0 6
34696: PPUSH
34697: CALL_OW 1
34701: ST_TO_ADDR
// end ;
34702: GO 34619
34704: POP
34705: POP
// result := s_arr [ 1 ] ;
34706: LD_ADDR_VAR 0 4
34710: PUSH
34711: LD_VAR 0 7
34715: PUSH
34716: LD_INT 1
34718: ARRAY
34719: ST_TO_ADDR
// end ; end ;
34720: LD_VAR 0 4
34724: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34725: LD_INT 0
34727: PPUSH
34728: PPUSH
// if not list then
34729: LD_VAR 0 1
34733: NOT
34734: IFFALSE 34738
// exit ;
34736: GO 34829
// i := list [ pos1 ] ;
34738: LD_ADDR_VAR 0 5
34742: PUSH
34743: LD_VAR 0 1
34747: PUSH
34748: LD_VAR 0 2
34752: ARRAY
34753: ST_TO_ADDR
// if not i then
34754: LD_VAR 0 5
34758: NOT
34759: IFFALSE 34763
// exit ;
34761: GO 34829
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34763: LD_ADDR_VAR 0 1
34767: PUSH
34768: LD_VAR 0 1
34772: PPUSH
34773: LD_VAR 0 2
34777: PPUSH
34778: LD_VAR 0 1
34782: PUSH
34783: LD_VAR 0 3
34787: ARRAY
34788: PPUSH
34789: CALL_OW 1
34793: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34794: LD_ADDR_VAR 0 1
34798: PUSH
34799: LD_VAR 0 1
34803: PPUSH
34804: LD_VAR 0 3
34808: PPUSH
34809: LD_VAR 0 5
34813: PPUSH
34814: CALL_OW 1
34818: ST_TO_ADDR
// result := list ;
34819: LD_ADDR_VAR 0 4
34823: PUSH
34824: LD_VAR 0 1
34828: ST_TO_ADDR
// end ;
34829: LD_VAR 0 4
34833: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34834: LD_INT 0
34836: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34837: LD_ADDR_VAR 0 5
34841: PUSH
34842: LD_VAR 0 1
34846: PPUSH
34847: CALL_OW 250
34851: PPUSH
34852: LD_VAR 0 1
34856: PPUSH
34857: CALL_OW 251
34861: PPUSH
34862: LD_VAR 0 2
34866: PPUSH
34867: LD_VAR 0 3
34871: PPUSH
34872: LD_VAR 0 4
34876: PPUSH
34877: CALL 35255 0 5
34881: ST_TO_ADDR
// end ;
34882: LD_VAR 0 5
34886: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
34887: LD_INT 0
34889: PPUSH
34890: PPUSH
34891: PPUSH
34892: PPUSH
// if not list or not unit then
34893: LD_VAR 0 2
34897: NOT
34898: PUSH
34899: LD_VAR 0 1
34903: NOT
34904: OR
34905: IFFALSE 34909
// exit ;
34907: GO 35250
// result := [ ] ;
34909: LD_ADDR_VAR 0 5
34913: PUSH
34914: EMPTY
34915: ST_TO_ADDR
// for i in list do
34916: LD_ADDR_VAR 0 6
34920: PUSH
34921: LD_VAR 0 2
34925: PUSH
34926: FOR_IN
34927: IFFALSE 35145
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
34929: LD_ADDR_VAR 0 8
34933: PUSH
34934: LD_VAR 0 1
34938: PPUSH
34939: LD_VAR 0 6
34943: PUSH
34944: LD_INT 1
34946: ARRAY
34947: PPUSH
34948: LD_VAR 0 6
34952: PUSH
34953: LD_INT 2
34955: ARRAY
34956: PPUSH
34957: CALL_OW 297
34961: ST_TO_ADDR
// if not Count ( result ) then
34962: LD_VAR 0 5
34966: PPUSH
34967: CALL 31539 0 1
34971: NOT
34972: IFFALSE 35005
// begin result := Join ( result , [ i , tmp ] ) ;
34974: LD_ADDR_VAR 0 5
34978: PUSH
34979: LD_VAR 0 5
34983: PPUSH
34984: LD_VAR 0 6
34988: PUSH
34989: LD_VAR 0 8
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PPUSH
34998: CALL 67139 0 2
35002: ST_TO_ADDR
// continue ;
35003: GO 34926
// end ; if result [ result ] [ 2 ] <= tmp then
35005: LD_VAR 0 5
35009: PUSH
35010: LD_VAR 0 5
35014: ARRAY
35015: PUSH
35016: LD_INT 2
35018: ARRAY
35019: PUSH
35020: LD_VAR 0 8
35024: LESSEQUAL
35025: IFFALSE 35058
// result := Join ( result , [ i , tmp ] ) else
35027: LD_ADDR_VAR 0 5
35031: PUSH
35032: LD_VAR 0 5
35036: PPUSH
35037: LD_VAR 0 6
35041: PUSH
35042: LD_VAR 0 8
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PPUSH
35051: CALL 67139 0 2
35055: ST_TO_ADDR
35056: GO 35143
// begin for j := 1 to Count ( result ) do
35058: LD_ADDR_VAR 0 7
35062: PUSH
35063: DOUBLE
35064: LD_INT 1
35066: DEC
35067: ST_TO_ADDR
35068: LD_VAR 0 5
35072: PPUSH
35073: CALL 31539 0 1
35077: PUSH
35078: FOR_TO
35079: IFFALSE 35141
// begin if tmp < result [ j ] [ 2 ] then
35081: LD_VAR 0 8
35085: PUSH
35086: LD_VAR 0 5
35090: PUSH
35091: LD_VAR 0 7
35095: ARRAY
35096: PUSH
35097: LD_INT 2
35099: ARRAY
35100: LESS
35101: IFFALSE 35139
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35103: LD_ADDR_VAR 0 5
35107: PUSH
35108: LD_VAR 0 5
35112: PPUSH
35113: LD_VAR 0 7
35117: PPUSH
35118: LD_VAR 0 6
35122: PUSH
35123: LD_VAR 0 8
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PPUSH
35132: CALL_OW 2
35136: ST_TO_ADDR
// break ;
35137: GO 35141
// end ; end ;
35139: GO 35078
35141: POP
35142: POP
// end ; end ;
35143: GO 34926
35145: POP
35146: POP
// if result and not asc then
35147: LD_VAR 0 5
35151: PUSH
35152: LD_VAR 0 3
35156: NOT
35157: AND
35158: IFFALSE 35175
// result := ReverseArray ( result ) ;
35160: LD_ADDR_VAR 0 5
35164: PUSH
35165: LD_VAR 0 5
35169: PPUSH
35170: CALL 62415 0 1
35174: ST_TO_ADDR
// tmp := [ ] ;
35175: LD_ADDR_VAR 0 8
35179: PUSH
35180: EMPTY
35181: ST_TO_ADDR
// if mode then
35182: LD_VAR 0 4
35186: IFFALSE 35250
// begin for i := 1 to result do
35188: LD_ADDR_VAR 0 6
35192: PUSH
35193: DOUBLE
35194: LD_INT 1
35196: DEC
35197: ST_TO_ADDR
35198: LD_VAR 0 5
35202: PUSH
35203: FOR_TO
35204: IFFALSE 35238
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
35206: LD_ADDR_VAR 0 8
35210: PUSH
35211: LD_VAR 0 8
35215: PPUSH
35216: LD_VAR 0 5
35220: PUSH
35221: LD_VAR 0 6
35225: ARRAY
35226: PUSH
35227: LD_INT 1
35229: ARRAY
35230: PPUSH
35231: CALL 67139 0 2
35235: ST_TO_ADDR
35236: GO 35203
35238: POP
35239: POP
// result := tmp ;
35240: LD_ADDR_VAR 0 5
35244: PUSH
35245: LD_VAR 0 8
35249: ST_TO_ADDR
// end ; end ;
35250: LD_VAR 0 5
35254: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35255: LD_INT 0
35257: PPUSH
35258: PPUSH
35259: PPUSH
35260: PPUSH
// if not list then
35261: LD_VAR 0 3
35265: NOT
35266: IFFALSE 35270
// exit ;
35268: GO 35658
// result := [ ] ;
35270: LD_ADDR_VAR 0 6
35274: PUSH
35275: EMPTY
35276: ST_TO_ADDR
// for i in list do
35277: LD_ADDR_VAR 0 7
35281: PUSH
35282: LD_VAR 0 3
35286: PUSH
35287: FOR_IN
35288: IFFALSE 35490
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35290: LD_ADDR_VAR 0 9
35294: PUSH
35295: LD_VAR 0 7
35299: PPUSH
35300: LD_VAR 0 1
35304: PPUSH
35305: LD_VAR 0 2
35309: PPUSH
35310: CALL_OW 297
35314: ST_TO_ADDR
// if not result then
35315: LD_VAR 0 6
35319: NOT
35320: IFFALSE 35346
// result := [ [ i , tmp ] ] else
35322: LD_ADDR_VAR 0 6
35326: PUSH
35327: LD_VAR 0 7
35331: PUSH
35332: LD_VAR 0 9
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: EMPTY
35342: LIST
35343: ST_TO_ADDR
35344: GO 35488
// begin if result [ result ] [ 2 ] < tmp then
35346: LD_VAR 0 6
35350: PUSH
35351: LD_VAR 0 6
35355: ARRAY
35356: PUSH
35357: LD_INT 2
35359: ARRAY
35360: PUSH
35361: LD_VAR 0 9
35365: LESS
35366: IFFALSE 35408
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35368: LD_ADDR_VAR 0 6
35372: PUSH
35373: LD_VAR 0 6
35377: PPUSH
35378: LD_VAR 0 6
35382: PUSH
35383: LD_INT 1
35385: PLUS
35386: PPUSH
35387: LD_VAR 0 7
35391: PUSH
35392: LD_VAR 0 9
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PPUSH
35401: CALL_OW 2
35405: ST_TO_ADDR
35406: GO 35488
// for j = 1 to result do
35408: LD_ADDR_VAR 0 8
35412: PUSH
35413: DOUBLE
35414: LD_INT 1
35416: DEC
35417: ST_TO_ADDR
35418: LD_VAR 0 6
35422: PUSH
35423: FOR_TO
35424: IFFALSE 35486
// begin if tmp < result [ j ] [ 2 ] then
35426: LD_VAR 0 9
35430: PUSH
35431: LD_VAR 0 6
35435: PUSH
35436: LD_VAR 0 8
35440: ARRAY
35441: PUSH
35442: LD_INT 2
35444: ARRAY
35445: LESS
35446: IFFALSE 35484
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35448: LD_ADDR_VAR 0 6
35452: PUSH
35453: LD_VAR 0 6
35457: PPUSH
35458: LD_VAR 0 8
35462: PPUSH
35463: LD_VAR 0 7
35467: PUSH
35468: LD_VAR 0 9
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PPUSH
35477: CALL_OW 2
35481: ST_TO_ADDR
// break ;
35482: GO 35486
// end ; end ;
35484: GO 35423
35486: POP
35487: POP
// end ; end ;
35488: GO 35287
35490: POP
35491: POP
// if result and not asc then
35492: LD_VAR 0 6
35496: PUSH
35497: LD_VAR 0 4
35501: NOT
35502: AND
35503: IFFALSE 35578
// begin tmp := result ;
35505: LD_ADDR_VAR 0 9
35509: PUSH
35510: LD_VAR 0 6
35514: ST_TO_ADDR
// for i = tmp downto 1 do
35515: LD_ADDR_VAR 0 7
35519: PUSH
35520: DOUBLE
35521: LD_VAR 0 9
35525: INC
35526: ST_TO_ADDR
35527: LD_INT 1
35529: PUSH
35530: FOR_DOWNTO
35531: IFFALSE 35576
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35533: LD_ADDR_VAR 0 6
35537: PUSH
35538: LD_VAR 0 6
35542: PPUSH
35543: LD_VAR 0 9
35547: PUSH
35548: LD_VAR 0 7
35552: MINUS
35553: PUSH
35554: LD_INT 1
35556: PLUS
35557: PPUSH
35558: LD_VAR 0 9
35562: PUSH
35563: LD_VAR 0 7
35567: ARRAY
35568: PPUSH
35569: CALL_OW 1
35573: ST_TO_ADDR
35574: GO 35530
35576: POP
35577: POP
// end ; tmp := [ ] ;
35578: LD_ADDR_VAR 0 9
35582: PUSH
35583: EMPTY
35584: ST_TO_ADDR
// if mode then
35585: LD_VAR 0 5
35589: IFFALSE 35658
// begin for i = 1 to result do
35591: LD_ADDR_VAR 0 7
35595: PUSH
35596: DOUBLE
35597: LD_INT 1
35599: DEC
35600: ST_TO_ADDR
35601: LD_VAR 0 6
35605: PUSH
35606: FOR_TO
35607: IFFALSE 35646
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35609: LD_ADDR_VAR 0 9
35613: PUSH
35614: LD_VAR 0 9
35618: PPUSH
35619: LD_VAR 0 7
35623: PPUSH
35624: LD_VAR 0 6
35628: PUSH
35629: LD_VAR 0 7
35633: ARRAY
35634: PUSH
35635: LD_INT 1
35637: ARRAY
35638: PPUSH
35639: CALL_OW 1
35643: ST_TO_ADDR
35644: GO 35606
35646: POP
35647: POP
// result := tmp ;
35648: LD_ADDR_VAR 0 6
35652: PUSH
35653: LD_VAR 0 9
35657: ST_TO_ADDR
// end ; end ;
35658: LD_VAR 0 6
35662: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35663: LD_INT 0
35665: PPUSH
35666: PPUSH
35667: PPUSH
35668: PPUSH
35669: PPUSH
35670: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35671: LD_ADDR_VAR 0 5
35675: PUSH
35676: LD_INT 0
35678: PUSH
35679: LD_INT 0
35681: PUSH
35682: LD_INT 0
35684: PUSH
35685: EMPTY
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: ST_TO_ADDR
// if not x or not y then
35693: LD_VAR 0 2
35697: NOT
35698: PUSH
35699: LD_VAR 0 3
35703: NOT
35704: OR
35705: IFFALSE 35709
// exit ;
35707: GO 37359
// if not range then
35709: LD_VAR 0 4
35713: NOT
35714: IFFALSE 35724
// range := 10 ;
35716: LD_ADDR_VAR 0 4
35720: PUSH
35721: LD_INT 10
35723: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35724: LD_ADDR_VAR 0 8
35728: PUSH
35729: LD_INT 81
35731: PUSH
35732: LD_VAR 0 1
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 92
35743: PUSH
35744: LD_VAR 0 2
35748: PUSH
35749: LD_VAR 0 3
35753: PUSH
35754: LD_VAR 0 4
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 3
35767: PUSH
35768: LD_INT 21
35770: PUSH
35771: LD_INT 3
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: LIST
35786: PPUSH
35787: CALL_OW 69
35791: ST_TO_ADDR
// if not tmp then
35792: LD_VAR 0 8
35796: NOT
35797: IFFALSE 35801
// exit ;
35799: GO 37359
// for i in tmp do
35801: LD_ADDR_VAR 0 6
35805: PUSH
35806: LD_VAR 0 8
35810: PUSH
35811: FOR_IN
35812: IFFALSE 37334
// begin points := [ 0 , 0 , 0 ] ;
35814: LD_ADDR_VAR 0 9
35818: PUSH
35819: LD_INT 0
35821: PUSH
35822: LD_INT 0
35824: PUSH
35825: LD_INT 0
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: LIST
35832: ST_TO_ADDR
// bpoints := 1 ;
35833: LD_ADDR_VAR 0 10
35837: PUSH
35838: LD_INT 1
35840: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35841: LD_VAR 0 6
35845: PPUSH
35846: CALL_OW 247
35850: PUSH
35851: LD_INT 1
35853: DOUBLE
35854: EQUAL
35855: IFTRUE 35859
35857: GO 36437
35859: POP
// begin if GetClass ( i ) = 1 then
35860: LD_VAR 0 6
35864: PPUSH
35865: CALL_OW 257
35869: PUSH
35870: LD_INT 1
35872: EQUAL
35873: IFFALSE 35894
// points := [ 10 , 5 , 3 ] ;
35875: LD_ADDR_VAR 0 9
35879: PUSH
35880: LD_INT 10
35882: PUSH
35883: LD_INT 5
35885: PUSH
35886: LD_INT 3
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: LIST
35893: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35894: LD_VAR 0 6
35898: PPUSH
35899: CALL_OW 257
35903: PUSH
35904: LD_INT 2
35906: PUSH
35907: LD_INT 3
35909: PUSH
35910: LD_INT 4
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: LIST
35917: IN
35918: IFFALSE 35939
// points := [ 3 , 2 , 1 ] ;
35920: LD_ADDR_VAR 0 9
35924: PUSH
35925: LD_INT 3
35927: PUSH
35928: LD_INT 2
35930: PUSH
35931: LD_INT 1
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: LIST
35938: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35939: LD_VAR 0 6
35943: PPUSH
35944: CALL_OW 257
35948: PUSH
35949: LD_INT 5
35951: EQUAL
35952: IFFALSE 35973
// points := [ 130 , 5 , 2 ] ;
35954: LD_ADDR_VAR 0 9
35958: PUSH
35959: LD_INT 130
35961: PUSH
35962: LD_INT 5
35964: PUSH
35965: LD_INT 2
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: LIST
35972: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35973: LD_VAR 0 6
35977: PPUSH
35978: CALL_OW 257
35982: PUSH
35983: LD_INT 8
35985: EQUAL
35986: IFFALSE 36007
// points := [ 35 , 35 , 30 ] ;
35988: LD_ADDR_VAR 0 9
35992: PUSH
35993: LD_INT 35
35995: PUSH
35996: LD_INT 35
35998: PUSH
35999: LD_INT 30
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: LIST
36006: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36007: LD_VAR 0 6
36011: PPUSH
36012: CALL_OW 257
36016: PUSH
36017: LD_INT 9
36019: EQUAL
36020: IFFALSE 36041
// points := [ 20 , 55 , 40 ] ;
36022: LD_ADDR_VAR 0 9
36026: PUSH
36027: LD_INT 20
36029: PUSH
36030: LD_INT 55
36032: PUSH
36033: LD_INT 40
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: LIST
36040: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36041: LD_VAR 0 6
36045: PPUSH
36046: CALL_OW 257
36050: PUSH
36051: LD_INT 12
36053: PUSH
36054: LD_INT 16
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: IN
36061: IFFALSE 36082
// points := [ 5 , 3 , 2 ] ;
36063: LD_ADDR_VAR 0 9
36067: PUSH
36068: LD_INT 5
36070: PUSH
36071: LD_INT 3
36073: PUSH
36074: LD_INT 2
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: LIST
36081: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36082: LD_VAR 0 6
36086: PPUSH
36087: CALL_OW 257
36091: PUSH
36092: LD_INT 17
36094: EQUAL
36095: IFFALSE 36116
// points := [ 100 , 50 , 75 ] ;
36097: LD_ADDR_VAR 0 9
36101: PUSH
36102: LD_INT 100
36104: PUSH
36105: LD_INT 50
36107: PUSH
36108: LD_INT 75
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: LIST
36115: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36116: LD_VAR 0 6
36120: PPUSH
36121: CALL_OW 257
36125: PUSH
36126: LD_INT 15
36128: EQUAL
36129: IFFALSE 36150
// points := [ 10 , 5 , 3 ] ;
36131: LD_ADDR_VAR 0 9
36135: PUSH
36136: LD_INT 10
36138: PUSH
36139: LD_INT 5
36141: PUSH
36142: LD_INT 3
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: LIST
36149: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36150: LD_VAR 0 6
36154: PPUSH
36155: CALL_OW 257
36159: PUSH
36160: LD_INT 14
36162: EQUAL
36163: IFFALSE 36184
// points := [ 10 , 0 , 0 ] ;
36165: LD_ADDR_VAR 0 9
36169: PUSH
36170: LD_INT 10
36172: PUSH
36173: LD_INT 0
36175: PUSH
36176: LD_INT 0
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: LIST
36183: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36184: LD_VAR 0 6
36188: PPUSH
36189: CALL_OW 257
36193: PUSH
36194: LD_INT 11
36196: EQUAL
36197: IFFALSE 36218
// points := [ 30 , 10 , 5 ] ;
36199: LD_ADDR_VAR 0 9
36203: PUSH
36204: LD_INT 30
36206: PUSH
36207: LD_INT 10
36209: PUSH
36210: LD_INT 5
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: LIST
36217: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36218: LD_VAR 0 1
36222: PPUSH
36223: LD_INT 5
36225: PPUSH
36226: CALL_OW 321
36230: PUSH
36231: LD_INT 2
36233: EQUAL
36234: IFFALSE 36251
// bpoints := bpoints * 1.8 ;
36236: LD_ADDR_VAR 0 10
36240: PUSH
36241: LD_VAR 0 10
36245: PUSH
36246: LD_REAL  1.80000000000000E+0000
36249: MUL
36250: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36251: LD_VAR 0 6
36255: PPUSH
36256: CALL_OW 257
36260: PUSH
36261: LD_INT 1
36263: PUSH
36264: LD_INT 2
36266: PUSH
36267: LD_INT 3
36269: PUSH
36270: LD_INT 4
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: IN
36279: PUSH
36280: LD_VAR 0 1
36284: PPUSH
36285: LD_INT 51
36287: PPUSH
36288: CALL_OW 321
36292: PUSH
36293: LD_INT 2
36295: EQUAL
36296: AND
36297: IFFALSE 36314
// bpoints := bpoints * 1.2 ;
36299: LD_ADDR_VAR 0 10
36303: PUSH
36304: LD_VAR 0 10
36308: PUSH
36309: LD_REAL  1.20000000000000E+0000
36312: MUL
36313: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36314: LD_VAR 0 6
36318: PPUSH
36319: CALL_OW 257
36323: PUSH
36324: LD_INT 5
36326: PUSH
36327: LD_INT 7
36329: PUSH
36330: LD_INT 9
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: LIST
36337: IN
36338: PUSH
36339: LD_VAR 0 1
36343: PPUSH
36344: LD_INT 52
36346: PPUSH
36347: CALL_OW 321
36351: PUSH
36352: LD_INT 2
36354: EQUAL
36355: AND
36356: IFFALSE 36373
// bpoints := bpoints * 1.5 ;
36358: LD_ADDR_VAR 0 10
36362: PUSH
36363: LD_VAR 0 10
36367: PUSH
36368: LD_REAL  1.50000000000000E+0000
36371: MUL
36372: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36373: LD_VAR 0 1
36377: PPUSH
36378: LD_INT 66
36380: PPUSH
36381: CALL_OW 321
36385: PUSH
36386: LD_INT 2
36388: EQUAL
36389: IFFALSE 36406
// bpoints := bpoints * 1.1 ;
36391: LD_ADDR_VAR 0 10
36395: PUSH
36396: LD_VAR 0 10
36400: PUSH
36401: LD_REAL  1.10000000000000E+0000
36404: MUL
36405: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36406: LD_ADDR_VAR 0 10
36410: PUSH
36411: LD_VAR 0 10
36415: PUSH
36416: LD_VAR 0 6
36420: PPUSH
36421: LD_INT 1
36423: PPUSH
36424: CALL_OW 259
36428: PUSH
36429: LD_REAL  1.15000000000000E+0000
36432: MUL
36433: MUL
36434: ST_TO_ADDR
// end ; unit_vehicle :
36435: GO 37263
36437: LD_INT 2
36439: DOUBLE
36440: EQUAL
36441: IFTRUE 36445
36443: GO 37251
36445: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36446: LD_VAR 0 6
36450: PPUSH
36451: CALL_OW 264
36455: PUSH
36456: LD_INT 2
36458: PUSH
36459: LD_INT 42
36461: PUSH
36462: LD_INT 24
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: LIST
36469: IN
36470: IFFALSE 36491
// points := [ 25 , 5 , 3 ] ;
36472: LD_ADDR_VAR 0 9
36476: PUSH
36477: LD_INT 25
36479: PUSH
36480: LD_INT 5
36482: PUSH
36483: LD_INT 3
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: LIST
36490: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36491: LD_VAR 0 6
36495: PPUSH
36496: CALL_OW 264
36500: PUSH
36501: LD_INT 4
36503: PUSH
36504: LD_INT 43
36506: PUSH
36507: LD_INT 25
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: LIST
36514: IN
36515: IFFALSE 36536
// points := [ 40 , 15 , 5 ] ;
36517: LD_ADDR_VAR 0 9
36521: PUSH
36522: LD_INT 40
36524: PUSH
36525: LD_INT 15
36527: PUSH
36528: LD_INT 5
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: LIST
36535: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36536: LD_VAR 0 6
36540: PPUSH
36541: CALL_OW 264
36545: PUSH
36546: LD_INT 3
36548: PUSH
36549: LD_INT 23
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: IN
36556: IFFALSE 36577
// points := [ 7 , 25 , 8 ] ;
36558: LD_ADDR_VAR 0 9
36562: PUSH
36563: LD_INT 7
36565: PUSH
36566: LD_INT 25
36568: PUSH
36569: LD_INT 8
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: LIST
36576: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36577: LD_VAR 0 6
36581: PPUSH
36582: CALL_OW 264
36586: PUSH
36587: LD_INT 5
36589: PUSH
36590: LD_INT 27
36592: PUSH
36593: LD_INT 44
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: LIST
36600: IN
36601: IFFALSE 36622
// points := [ 14 , 50 , 16 ] ;
36603: LD_ADDR_VAR 0 9
36607: PUSH
36608: LD_INT 14
36610: PUSH
36611: LD_INT 50
36613: PUSH
36614: LD_INT 16
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: LIST
36621: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36622: LD_VAR 0 6
36626: PPUSH
36627: CALL_OW 264
36631: PUSH
36632: LD_INT 6
36634: PUSH
36635: LD_INT 46
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: IN
36642: IFFALSE 36663
// points := [ 32 , 120 , 70 ] ;
36644: LD_ADDR_VAR 0 9
36648: PUSH
36649: LD_INT 32
36651: PUSH
36652: LD_INT 120
36654: PUSH
36655: LD_INT 70
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: LIST
36662: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36663: LD_VAR 0 6
36667: PPUSH
36668: CALL_OW 264
36672: PUSH
36673: LD_INT 7
36675: PUSH
36676: LD_INT 28
36678: PUSH
36679: LD_INT 45
36681: PUSH
36682: LD_INT 92
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: IN
36691: IFFALSE 36712
// points := [ 35 , 20 , 45 ] ;
36693: LD_ADDR_VAR 0 9
36697: PUSH
36698: LD_INT 35
36700: PUSH
36701: LD_INT 20
36703: PUSH
36704: LD_INT 45
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: LIST
36711: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36712: LD_VAR 0 6
36716: PPUSH
36717: CALL_OW 264
36721: PUSH
36722: LD_INT 47
36724: PUSH
36725: EMPTY
36726: LIST
36727: IN
36728: IFFALSE 36749
// points := [ 67 , 45 , 75 ] ;
36730: LD_ADDR_VAR 0 9
36734: PUSH
36735: LD_INT 67
36737: PUSH
36738: LD_INT 45
36740: PUSH
36741: LD_INT 75
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: LIST
36748: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36749: LD_VAR 0 6
36753: PPUSH
36754: CALL_OW 264
36758: PUSH
36759: LD_INT 26
36761: PUSH
36762: EMPTY
36763: LIST
36764: IN
36765: IFFALSE 36786
// points := [ 120 , 30 , 80 ] ;
36767: LD_ADDR_VAR 0 9
36771: PUSH
36772: LD_INT 120
36774: PUSH
36775: LD_INT 30
36777: PUSH
36778: LD_INT 80
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: LIST
36785: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36786: LD_VAR 0 6
36790: PPUSH
36791: CALL_OW 264
36795: PUSH
36796: LD_INT 22
36798: PUSH
36799: EMPTY
36800: LIST
36801: IN
36802: IFFALSE 36823
// points := [ 40 , 1 , 1 ] ;
36804: LD_ADDR_VAR 0 9
36808: PUSH
36809: LD_INT 40
36811: PUSH
36812: LD_INT 1
36814: PUSH
36815: LD_INT 1
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: LIST
36822: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36823: LD_VAR 0 6
36827: PPUSH
36828: CALL_OW 264
36832: PUSH
36833: LD_INT 29
36835: PUSH
36836: EMPTY
36837: LIST
36838: IN
36839: IFFALSE 36860
// points := [ 70 , 200 , 400 ] ;
36841: LD_ADDR_VAR 0 9
36845: PUSH
36846: LD_INT 70
36848: PUSH
36849: LD_INT 200
36851: PUSH
36852: LD_INT 400
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: LIST
36859: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36860: LD_VAR 0 6
36864: PPUSH
36865: CALL_OW 264
36869: PUSH
36870: LD_INT 14
36872: PUSH
36873: LD_INT 53
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: IN
36880: IFFALSE 36901
// points := [ 40 , 10 , 20 ] ;
36882: LD_ADDR_VAR 0 9
36886: PUSH
36887: LD_INT 40
36889: PUSH
36890: LD_INT 10
36892: PUSH
36893: LD_INT 20
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: LIST
36900: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36901: LD_VAR 0 6
36905: PPUSH
36906: CALL_OW 264
36910: PUSH
36911: LD_INT 9
36913: PUSH
36914: EMPTY
36915: LIST
36916: IN
36917: IFFALSE 36938
// points := [ 5 , 70 , 20 ] ;
36919: LD_ADDR_VAR 0 9
36923: PUSH
36924: LD_INT 5
36926: PUSH
36927: LD_INT 70
36929: PUSH
36930: LD_INT 20
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: LIST
36937: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36938: LD_VAR 0 6
36942: PPUSH
36943: CALL_OW 264
36947: PUSH
36948: LD_INT 10
36950: PUSH
36951: EMPTY
36952: LIST
36953: IN
36954: IFFALSE 36975
// points := [ 35 , 110 , 70 ] ;
36956: LD_ADDR_VAR 0 9
36960: PUSH
36961: LD_INT 35
36963: PUSH
36964: LD_INT 110
36966: PUSH
36967: LD_INT 70
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: LIST
36974: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36975: LD_VAR 0 6
36979: PPUSH
36980: CALL_OW 265
36984: PUSH
36985: LD_INT 25
36987: EQUAL
36988: IFFALSE 37009
// points := [ 80 , 65 , 100 ] ;
36990: LD_ADDR_VAR 0 9
36994: PUSH
36995: LD_INT 80
36997: PUSH
36998: LD_INT 65
37000: PUSH
37001: LD_INT 100
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: LIST
37008: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37009: LD_VAR 0 6
37013: PPUSH
37014: CALL_OW 263
37018: PUSH
37019: LD_INT 1
37021: EQUAL
37022: IFFALSE 37057
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37024: LD_ADDR_VAR 0 10
37028: PUSH
37029: LD_VAR 0 10
37033: PUSH
37034: LD_VAR 0 6
37038: PPUSH
37039: CALL_OW 311
37043: PPUSH
37044: LD_INT 3
37046: PPUSH
37047: CALL_OW 259
37051: PUSH
37052: LD_INT 4
37054: MUL
37055: MUL
37056: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37057: LD_VAR 0 6
37061: PPUSH
37062: CALL_OW 263
37066: PUSH
37067: LD_INT 2
37069: EQUAL
37070: IFFALSE 37121
// begin j := IsControledBy ( i ) ;
37072: LD_ADDR_VAR 0 7
37076: PUSH
37077: LD_VAR 0 6
37081: PPUSH
37082: CALL_OW 312
37086: ST_TO_ADDR
// if j then
37087: LD_VAR 0 7
37091: IFFALSE 37121
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37093: LD_ADDR_VAR 0 10
37097: PUSH
37098: LD_VAR 0 10
37102: PUSH
37103: LD_VAR 0 7
37107: PPUSH
37108: LD_INT 3
37110: PPUSH
37111: CALL_OW 259
37115: PUSH
37116: LD_INT 3
37118: MUL
37119: MUL
37120: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37121: LD_VAR 0 6
37125: PPUSH
37126: CALL_OW 264
37130: PUSH
37131: LD_INT 5
37133: PUSH
37134: LD_INT 6
37136: PUSH
37137: LD_INT 46
37139: PUSH
37140: LD_INT 44
37142: PUSH
37143: LD_INT 47
37145: PUSH
37146: LD_INT 45
37148: PUSH
37149: LD_INT 28
37151: PUSH
37152: LD_INT 7
37154: PUSH
37155: LD_INT 27
37157: PUSH
37158: LD_INT 29
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: IN
37173: PUSH
37174: LD_VAR 0 1
37178: PPUSH
37179: LD_INT 52
37181: PPUSH
37182: CALL_OW 321
37186: PUSH
37187: LD_INT 2
37189: EQUAL
37190: AND
37191: IFFALSE 37208
// bpoints := bpoints * 1.2 ;
37193: LD_ADDR_VAR 0 10
37197: PUSH
37198: LD_VAR 0 10
37202: PUSH
37203: LD_REAL  1.20000000000000E+0000
37206: MUL
37207: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37208: LD_VAR 0 6
37212: PPUSH
37213: CALL_OW 264
37217: PUSH
37218: LD_INT 6
37220: PUSH
37221: LD_INT 46
37223: PUSH
37224: LD_INT 47
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: LIST
37231: IN
37232: IFFALSE 37249
// bpoints := bpoints * 1.2 ;
37234: LD_ADDR_VAR 0 10
37238: PUSH
37239: LD_VAR 0 10
37243: PUSH
37244: LD_REAL  1.20000000000000E+0000
37247: MUL
37248: ST_TO_ADDR
// end ; unit_building :
37249: GO 37263
37251: LD_INT 3
37253: DOUBLE
37254: EQUAL
37255: IFTRUE 37259
37257: GO 37262
37259: POP
// ; end ;
37260: GO 37263
37262: POP
// for j = 1 to 3 do
37263: LD_ADDR_VAR 0 7
37267: PUSH
37268: DOUBLE
37269: LD_INT 1
37271: DEC
37272: ST_TO_ADDR
37273: LD_INT 3
37275: PUSH
37276: FOR_TO
37277: IFFALSE 37330
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37279: LD_ADDR_VAR 0 5
37283: PUSH
37284: LD_VAR 0 5
37288: PPUSH
37289: LD_VAR 0 7
37293: PPUSH
37294: LD_VAR 0 5
37298: PUSH
37299: LD_VAR 0 7
37303: ARRAY
37304: PUSH
37305: LD_VAR 0 9
37309: PUSH
37310: LD_VAR 0 7
37314: ARRAY
37315: PUSH
37316: LD_VAR 0 10
37320: MUL
37321: PLUS
37322: PPUSH
37323: CALL_OW 1
37327: ST_TO_ADDR
37328: GO 37276
37330: POP
37331: POP
// end ;
37332: GO 35811
37334: POP
37335: POP
// result := Replace ( result , 4 , tmp ) ;
37336: LD_ADDR_VAR 0 5
37340: PUSH
37341: LD_VAR 0 5
37345: PPUSH
37346: LD_INT 4
37348: PPUSH
37349: LD_VAR 0 8
37353: PPUSH
37354: CALL_OW 1
37358: ST_TO_ADDR
// end ;
37359: LD_VAR 0 5
37363: RET
// export function DangerAtRange ( unit , range ) ; begin
37364: LD_INT 0
37366: PPUSH
// if not unit then
37367: LD_VAR 0 1
37371: NOT
37372: IFFALSE 37376
// exit ;
37374: GO 37421
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37376: LD_ADDR_VAR 0 3
37380: PUSH
37381: LD_VAR 0 1
37385: PPUSH
37386: CALL_OW 255
37390: PPUSH
37391: LD_VAR 0 1
37395: PPUSH
37396: CALL_OW 250
37400: PPUSH
37401: LD_VAR 0 1
37405: PPUSH
37406: CALL_OW 251
37410: PPUSH
37411: LD_VAR 0 2
37415: PPUSH
37416: CALL 35663 0 4
37420: ST_TO_ADDR
// end ;
37421: LD_VAR 0 3
37425: RET
// export function DangerInArea ( side , area ) ; begin
37426: LD_INT 0
37428: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37429: LD_ADDR_VAR 0 3
37433: PUSH
37434: LD_VAR 0 2
37438: PPUSH
37439: LD_INT 81
37441: PUSH
37442: LD_VAR 0 1
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PPUSH
37451: CALL_OW 70
37455: ST_TO_ADDR
// end ;
37456: LD_VAR 0 3
37460: RET
// export function IsExtension ( b ) ; begin
37461: LD_INT 0
37463: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37464: LD_ADDR_VAR 0 2
37468: PUSH
37469: LD_VAR 0 1
37473: PUSH
37474: LD_INT 23
37476: PUSH
37477: LD_INT 20
37479: PUSH
37480: LD_INT 22
37482: PUSH
37483: LD_INT 17
37485: PUSH
37486: LD_INT 24
37488: PUSH
37489: LD_INT 21
37491: PUSH
37492: LD_INT 19
37494: PUSH
37495: LD_INT 16
37497: PUSH
37498: LD_INT 25
37500: PUSH
37501: LD_INT 18
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: IN
37516: ST_TO_ADDR
// end ;
37517: LD_VAR 0 2
37521: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37522: LD_INT 0
37524: PPUSH
37525: PPUSH
37526: PPUSH
// result := [ ] ;
37527: LD_ADDR_VAR 0 4
37531: PUSH
37532: EMPTY
37533: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37534: LD_ADDR_VAR 0 5
37538: PUSH
37539: LD_VAR 0 2
37543: PPUSH
37544: LD_INT 21
37546: PUSH
37547: LD_INT 3
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PPUSH
37554: CALL_OW 70
37558: ST_TO_ADDR
// if not tmp then
37559: LD_VAR 0 5
37563: NOT
37564: IFFALSE 37568
// exit ;
37566: GO 37632
// if checkLink then
37568: LD_VAR 0 3
37572: IFFALSE 37622
// begin for i in tmp do
37574: LD_ADDR_VAR 0 6
37578: PUSH
37579: LD_VAR 0 5
37583: PUSH
37584: FOR_IN
37585: IFFALSE 37620
// if GetBase ( i ) <> base then
37587: LD_VAR 0 6
37591: PPUSH
37592: CALL_OW 274
37596: PUSH
37597: LD_VAR 0 1
37601: NONEQUAL
37602: IFFALSE 37618
// ComLinkToBase ( base , i ) ;
37604: LD_VAR 0 1
37608: PPUSH
37609: LD_VAR 0 6
37613: PPUSH
37614: CALL_OW 169
37618: GO 37584
37620: POP
37621: POP
// end ; result := tmp ;
37622: LD_ADDR_VAR 0 4
37626: PUSH
37627: LD_VAR 0 5
37631: ST_TO_ADDR
// end ;
37632: LD_VAR 0 4
37636: RET
// export function ComComplete ( units , b ) ; var i ; begin
37637: LD_INT 0
37639: PPUSH
37640: PPUSH
// if not units then
37641: LD_VAR 0 1
37645: NOT
37646: IFFALSE 37650
// exit ;
37648: GO 37740
// for i in units do
37650: LD_ADDR_VAR 0 4
37654: PUSH
37655: LD_VAR 0 1
37659: PUSH
37660: FOR_IN
37661: IFFALSE 37738
// if BuildingStatus ( b ) = bs_build then
37663: LD_VAR 0 2
37667: PPUSH
37668: CALL_OW 461
37672: PUSH
37673: LD_INT 1
37675: EQUAL
37676: IFFALSE 37736
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37678: LD_VAR 0 4
37682: PPUSH
37683: LD_STRING h
37685: PUSH
37686: LD_VAR 0 2
37690: PPUSH
37691: CALL_OW 250
37695: PUSH
37696: LD_VAR 0 2
37700: PPUSH
37701: CALL_OW 251
37705: PUSH
37706: LD_VAR 0 2
37710: PUSH
37711: LD_INT 0
37713: PUSH
37714: LD_INT 0
37716: PUSH
37717: LD_INT 0
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: PUSH
37729: EMPTY
37730: LIST
37731: PPUSH
37732: CALL_OW 446
37736: GO 37660
37738: POP
37739: POP
// end ;
37740: LD_VAR 0 3
37744: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37745: LD_INT 0
37747: PPUSH
37748: PPUSH
37749: PPUSH
37750: PPUSH
37751: PPUSH
37752: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37753: LD_VAR 0 1
37757: NOT
37758: PUSH
37759: LD_VAR 0 1
37763: PPUSH
37764: CALL_OW 263
37768: PUSH
37769: LD_INT 2
37771: NONEQUAL
37772: OR
37773: IFFALSE 37777
// exit ;
37775: GO 38093
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37777: LD_ADDR_VAR 0 6
37781: PUSH
37782: LD_INT 22
37784: PUSH
37785: LD_VAR 0 1
37789: PPUSH
37790: CALL_OW 255
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 2
37801: PUSH
37802: LD_INT 30
37804: PUSH
37805: LD_INT 36
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 34
37814: PUSH
37815: LD_INT 31
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: LIST
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PPUSH
37831: CALL_OW 69
37835: ST_TO_ADDR
// if not tmp then
37836: LD_VAR 0 6
37840: NOT
37841: IFFALSE 37845
// exit ;
37843: GO 38093
// result := [ ] ;
37845: LD_ADDR_VAR 0 2
37849: PUSH
37850: EMPTY
37851: ST_TO_ADDR
// for i in tmp do
37852: LD_ADDR_VAR 0 3
37856: PUSH
37857: LD_VAR 0 6
37861: PUSH
37862: FOR_IN
37863: IFFALSE 37934
// begin t := UnitsInside ( i ) ;
37865: LD_ADDR_VAR 0 4
37869: PUSH
37870: LD_VAR 0 3
37874: PPUSH
37875: CALL_OW 313
37879: ST_TO_ADDR
// if t then
37880: LD_VAR 0 4
37884: IFFALSE 37932
// for j in t do
37886: LD_ADDR_VAR 0 7
37890: PUSH
37891: LD_VAR 0 4
37895: PUSH
37896: FOR_IN
37897: IFFALSE 37930
// result := Replace ( result , result + 1 , j ) ;
37899: LD_ADDR_VAR 0 2
37903: PUSH
37904: LD_VAR 0 2
37908: PPUSH
37909: LD_VAR 0 2
37913: PUSH
37914: LD_INT 1
37916: PLUS
37917: PPUSH
37918: LD_VAR 0 7
37922: PPUSH
37923: CALL_OW 1
37927: ST_TO_ADDR
37928: GO 37896
37930: POP
37931: POP
// end ;
37932: GO 37862
37934: POP
37935: POP
// if not result then
37936: LD_VAR 0 2
37940: NOT
37941: IFFALSE 37945
// exit ;
37943: GO 38093
// mech := result [ 1 ] ;
37945: LD_ADDR_VAR 0 5
37949: PUSH
37950: LD_VAR 0 2
37954: PUSH
37955: LD_INT 1
37957: ARRAY
37958: ST_TO_ADDR
// if result > 1 then
37959: LD_VAR 0 2
37963: PUSH
37964: LD_INT 1
37966: GREATER
37967: IFFALSE 38079
// begin for i = 2 to result do
37969: LD_ADDR_VAR 0 3
37973: PUSH
37974: DOUBLE
37975: LD_INT 2
37977: DEC
37978: ST_TO_ADDR
37979: LD_VAR 0 2
37983: PUSH
37984: FOR_TO
37985: IFFALSE 38077
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37987: LD_ADDR_VAR 0 4
37991: PUSH
37992: LD_VAR 0 2
37996: PUSH
37997: LD_VAR 0 3
38001: ARRAY
38002: PPUSH
38003: LD_INT 3
38005: PPUSH
38006: CALL_OW 259
38010: PUSH
38011: LD_VAR 0 2
38015: PUSH
38016: LD_VAR 0 3
38020: ARRAY
38021: PPUSH
38022: CALL_OW 432
38026: MINUS
38027: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38028: LD_VAR 0 4
38032: PUSH
38033: LD_VAR 0 5
38037: PPUSH
38038: LD_INT 3
38040: PPUSH
38041: CALL_OW 259
38045: PUSH
38046: LD_VAR 0 5
38050: PPUSH
38051: CALL_OW 432
38055: MINUS
38056: GREATEREQUAL
38057: IFFALSE 38075
// mech := result [ i ] ;
38059: LD_ADDR_VAR 0 5
38063: PUSH
38064: LD_VAR 0 2
38068: PUSH
38069: LD_VAR 0 3
38073: ARRAY
38074: ST_TO_ADDR
// end ;
38075: GO 37984
38077: POP
38078: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38079: LD_VAR 0 1
38083: PPUSH
38084: LD_VAR 0 5
38088: PPUSH
38089: CALL_OW 135
// end ;
38093: LD_VAR 0 2
38097: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38098: LD_INT 0
38100: PPUSH
38101: PPUSH
38102: PPUSH
38103: PPUSH
38104: PPUSH
38105: PPUSH
38106: PPUSH
38107: PPUSH
38108: PPUSH
38109: PPUSH
38110: PPUSH
38111: PPUSH
38112: PPUSH
// result := [ ] ;
38113: LD_ADDR_VAR 0 7
38117: PUSH
38118: EMPTY
38119: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38120: LD_VAR 0 1
38124: PPUSH
38125: CALL_OW 266
38129: PUSH
38130: LD_INT 0
38132: PUSH
38133: LD_INT 1
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: IN
38140: NOT
38141: IFFALSE 38145
// exit ;
38143: GO 39779
// if name then
38145: LD_VAR 0 3
38149: IFFALSE 38165
// SetBName ( base_dep , name ) ;
38151: LD_VAR 0 1
38155: PPUSH
38156: LD_VAR 0 3
38160: PPUSH
38161: CALL_OW 500
// base := GetBase ( base_dep ) ;
38165: LD_ADDR_VAR 0 15
38169: PUSH
38170: LD_VAR 0 1
38174: PPUSH
38175: CALL_OW 274
38179: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38180: LD_ADDR_VAR 0 16
38184: PUSH
38185: LD_VAR 0 1
38189: PPUSH
38190: CALL_OW 255
38194: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38195: LD_ADDR_VAR 0 17
38199: PUSH
38200: LD_VAR 0 1
38204: PPUSH
38205: CALL_OW 248
38209: ST_TO_ADDR
// if sources then
38210: LD_VAR 0 5
38214: IFFALSE 38261
// for i = 1 to 3 do
38216: LD_ADDR_VAR 0 8
38220: PUSH
38221: DOUBLE
38222: LD_INT 1
38224: DEC
38225: ST_TO_ADDR
38226: LD_INT 3
38228: PUSH
38229: FOR_TO
38230: IFFALSE 38259
// AddResourceType ( base , i , sources [ i ] ) ;
38232: LD_VAR 0 15
38236: PPUSH
38237: LD_VAR 0 8
38241: PPUSH
38242: LD_VAR 0 5
38246: PUSH
38247: LD_VAR 0 8
38251: ARRAY
38252: PPUSH
38253: CALL_OW 276
38257: GO 38229
38259: POP
38260: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38261: LD_ADDR_VAR 0 18
38265: PUSH
38266: LD_VAR 0 15
38270: PPUSH
38271: LD_VAR 0 2
38275: PPUSH
38276: LD_INT 1
38278: PPUSH
38279: CALL 37522 0 3
38283: ST_TO_ADDR
// InitHc ;
38284: CALL_OW 19
// InitUc ;
38288: CALL_OW 18
// uc_side := side ;
38292: LD_ADDR_OWVAR 20
38296: PUSH
38297: LD_VAR 0 16
38301: ST_TO_ADDR
// uc_nation := nation ;
38302: LD_ADDR_OWVAR 21
38306: PUSH
38307: LD_VAR 0 17
38311: ST_TO_ADDR
// if buildings then
38312: LD_VAR 0 18
38316: IFFALSE 39638
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38318: LD_ADDR_VAR 0 19
38322: PUSH
38323: LD_VAR 0 18
38327: PPUSH
38328: LD_INT 2
38330: PUSH
38331: LD_INT 30
38333: PUSH
38334: LD_INT 29
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 30
38343: PUSH
38344: LD_INT 30
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: LIST
38355: PPUSH
38356: CALL_OW 72
38360: ST_TO_ADDR
// if tmp then
38361: LD_VAR 0 19
38365: IFFALSE 38413
// for i in tmp do
38367: LD_ADDR_VAR 0 8
38371: PUSH
38372: LD_VAR 0 19
38376: PUSH
38377: FOR_IN
38378: IFFALSE 38411
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38380: LD_VAR 0 8
38384: PPUSH
38385: CALL_OW 250
38389: PPUSH
38390: LD_VAR 0 8
38394: PPUSH
38395: CALL_OW 251
38399: PPUSH
38400: LD_VAR 0 16
38404: PPUSH
38405: CALL_OW 441
38409: GO 38377
38411: POP
38412: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38413: LD_VAR 0 18
38417: PPUSH
38418: LD_INT 2
38420: PUSH
38421: LD_INT 30
38423: PUSH
38424: LD_INT 32
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 30
38433: PUSH
38434: LD_INT 33
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: LIST
38445: PPUSH
38446: CALL_OW 72
38450: IFFALSE 38538
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38452: LD_ADDR_VAR 0 8
38456: PUSH
38457: LD_VAR 0 18
38461: PPUSH
38462: LD_INT 2
38464: PUSH
38465: LD_INT 30
38467: PUSH
38468: LD_INT 32
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 30
38477: PUSH
38478: LD_INT 33
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: LIST
38489: PPUSH
38490: CALL_OW 72
38494: PUSH
38495: FOR_IN
38496: IFFALSE 38536
// begin if not GetBWeapon ( i ) then
38498: LD_VAR 0 8
38502: PPUSH
38503: CALL_OW 269
38507: NOT
38508: IFFALSE 38534
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38510: LD_VAR 0 8
38514: PPUSH
38515: LD_VAR 0 8
38519: PPUSH
38520: LD_VAR 0 2
38524: PPUSH
38525: CALL 39784 0 2
38529: PPUSH
38530: CALL_OW 431
// end ;
38534: GO 38495
38536: POP
38537: POP
// end ; for i = 1 to personel do
38538: LD_ADDR_VAR 0 8
38542: PUSH
38543: DOUBLE
38544: LD_INT 1
38546: DEC
38547: ST_TO_ADDR
38548: LD_VAR 0 6
38552: PUSH
38553: FOR_TO
38554: IFFALSE 39618
// begin if i > 4 then
38556: LD_VAR 0 8
38560: PUSH
38561: LD_INT 4
38563: GREATER
38564: IFFALSE 38568
// break ;
38566: GO 39618
// case i of 1 :
38568: LD_VAR 0 8
38572: PUSH
38573: LD_INT 1
38575: DOUBLE
38576: EQUAL
38577: IFTRUE 38581
38579: GO 38661
38581: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38582: LD_ADDR_VAR 0 12
38586: PUSH
38587: LD_VAR 0 18
38591: PPUSH
38592: LD_INT 22
38594: PUSH
38595: LD_VAR 0 16
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 58
38606: PUSH
38607: EMPTY
38608: LIST
38609: PUSH
38610: LD_INT 2
38612: PUSH
38613: LD_INT 30
38615: PUSH
38616: LD_INT 32
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 30
38625: PUSH
38626: LD_INT 4
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 30
38635: PUSH
38636: LD_INT 5
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: LIST
38653: PPUSH
38654: CALL_OW 72
38658: ST_TO_ADDR
38659: GO 38883
38661: LD_INT 2
38663: DOUBLE
38664: EQUAL
38665: IFTRUE 38669
38667: GO 38731
38669: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38670: LD_ADDR_VAR 0 12
38674: PUSH
38675: LD_VAR 0 18
38679: PPUSH
38680: LD_INT 22
38682: PUSH
38683: LD_VAR 0 16
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 2
38694: PUSH
38695: LD_INT 30
38697: PUSH
38698: LD_INT 0
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 30
38707: PUSH
38708: LD_INT 1
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: LIST
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PPUSH
38724: CALL_OW 72
38728: ST_TO_ADDR
38729: GO 38883
38731: LD_INT 3
38733: DOUBLE
38734: EQUAL
38735: IFTRUE 38739
38737: GO 38801
38739: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38740: LD_ADDR_VAR 0 12
38744: PUSH
38745: LD_VAR 0 18
38749: PPUSH
38750: LD_INT 22
38752: PUSH
38753: LD_VAR 0 16
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 2
38764: PUSH
38765: LD_INT 30
38767: PUSH
38768: LD_INT 2
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 30
38777: PUSH
38778: LD_INT 3
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: LIST
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PPUSH
38794: CALL_OW 72
38798: ST_TO_ADDR
38799: GO 38883
38801: LD_INT 4
38803: DOUBLE
38804: EQUAL
38805: IFTRUE 38809
38807: GO 38882
38809: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38810: LD_ADDR_VAR 0 12
38814: PUSH
38815: LD_VAR 0 18
38819: PPUSH
38820: LD_INT 22
38822: PUSH
38823: LD_VAR 0 16
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 2
38834: PUSH
38835: LD_INT 30
38837: PUSH
38838: LD_INT 6
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 30
38847: PUSH
38848: LD_INT 7
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 30
38857: PUSH
38858: LD_INT 8
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PPUSH
38875: CALL_OW 72
38879: ST_TO_ADDR
38880: GO 38883
38882: POP
// if i = 1 then
38883: LD_VAR 0 8
38887: PUSH
38888: LD_INT 1
38890: EQUAL
38891: IFFALSE 39002
// begin tmp := [ ] ;
38893: LD_ADDR_VAR 0 19
38897: PUSH
38898: EMPTY
38899: ST_TO_ADDR
// for j in f do
38900: LD_ADDR_VAR 0 9
38904: PUSH
38905: LD_VAR 0 12
38909: PUSH
38910: FOR_IN
38911: IFFALSE 38984
// if GetBType ( j ) = b_bunker then
38913: LD_VAR 0 9
38917: PPUSH
38918: CALL_OW 266
38922: PUSH
38923: LD_INT 32
38925: EQUAL
38926: IFFALSE 38953
// tmp := Insert ( tmp , 1 , j ) else
38928: LD_ADDR_VAR 0 19
38932: PUSH
38933: LD_VAR 0 19
38937: PPUSH
38938: LD_INT 1
38940: PPUSH
38941: LD_VAR 0 9
38945: PPUSH
38946: CALL_OW 2
38950: ST_TO_ADDR
38951: GO 38982
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38953: LD_ADDR_VAR 0 19
38957: PUSH
38958: LD_VAR 0 19
38962: PPUSH
38963: LD_VAR 0 19
38967: PUSH
38968: LD_INT 1
38970: PLUS
38971: PPUSH
38972: LD_VAR 0 9
38976: PPUSH
38977: CALL_OW 2
38981: ST_TO_ADDR
38982: GO 38910
38984: POP
38985: POP
// if tmp then
38986: LD_VAR 0 19
38990: IFFALSE 39002
// f := tmp ;
38992: LD_ADDR_VAR 0 12
38996: PUSH
38997: LD_VAR 0 19
39001: ST_TO_ADDR
// end ; x := personel [ i ] ;
39002: LD_ADDR_VAR 0 13
39006: PUSH
39007: LD_VAR 0 6
39011: PUSH
39012: LD_VAR 0 8
39016: ARRAY
39017: ST_TO_ADDR
// if x = - 1 then
39018: LD_VAR 0 13
39022: PUSH
39023: LD_INT 1
39025: NEG
39026: EQUAL
39027: IFFALSE 39236
// begin for j in f do
39029: LD_ADDR_VAR 0 9
39033: PUSH
39034: LD_VAR 0 12
39038: PUSH
39039: FOR_IN
39040: IFFALSE 39232
// repeat InitHc ;
39042: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39046: LD_VAR 0 9
39050: PPUSH
39051: CALL_OW 266
39055: PUSH
39056: LD_INT 5
39058: EQUAL
39059: IFFALSE 39129
// begin if UnitsInside ( j ) < 3 then
39061: LD_VAR 0 9
39065: PPUSH
39066: CALL_OW 313
39070: PUSH
39071: LD_INT 3
39073: LESS
39074: IFFALSE 39110
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39076: LD_INT 0
39078: PPUSH
39079: LD_INT 5
39081: PUSH
39082: LD_INT 8
39084: PUSH
39085: LD_INT 9
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: LIST
39092: PUSH
39093: LD_VAR 0 17
39097: ARRAY
39098: PPUSH
39099: LD_VAR 0 4
39103: PPUSH
39104: CALL_OW 380
39108: GO 39127
// PrepareHuman ( false , i , skill ) ;
39110: LD_INT 0
39112: PPUSH
39113: LD_VAR 0 8
39117: PPUSH
39118: LD_VAR 0 4
39122: PPUSH
39123: CALL_OW 380
// end else
39127: GO 39146
// PrepareHuman ( false , i , skill ) ;
39129: LD_INT 0
39131: PPUSH
39132: LD_VAR 0 8
39136: PPUSH
39137: LD_VAR 0 4
39141: PPUSH
39142: CALL_OW 380
// un := CreateHuman ;
39146: LD_ADDR_VAR 0 14
39150: PUSH
39151: CALL_OW 44
39155: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39156: LD_ADDR_VAR 0 7
39160: PUSH
39161: LD_VAR 0 7
39165: PPUSH
39166: LD_INT 1
39168: PPUSH
39169: LD_VAR 0 14
39173: PPUSH
39174: CALL_OW 2
39178: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39179: LD_VAR 0 14
39183: PPUSH
39184: LD_VAR 0 9
39188: PPUSH
39189: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39193: LD_VAR 0 9
39197: PPUSH
39198: CALL_OW 313
39202: PUSH
39203: LD_INT 6
39205: EQUAL
39206: PUSH
39207: LD_VAR 0 9
39211: PPUSH
39212: CALL_OW 266
39216: PUSH
39217: LD_INT 32
39219: PUSH
39220: LD_INT 31
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: IN
39227: OR
39228: IFFALSE 39042
39230: GO 39039
39232: POP
39233: POP
// end else
39234: GO 39616
// for j = 1 to x do
39236: LD_ADDR_VAR 0 9
39240: PUSH
39241: DOUBLE
39242: LD_INT 1
39244: DEC
39245: ST_TO_ADDR
39246: LD_VAR 0 13
39250: PUSH
39251: FOR_TO
39252: IFFALSE 39614
// begin InitHc ;
39254: CALL_OW 19
// if not f then
39258: LD_VAR 0 12
39262: NOT
39263: IFFALSE 39352
// begin PrepareHuman ( false , i , skill ) ;
39265: LD_INT 0
39267: PPUSH
39268: LD_VAR 0 8
39272: PPUSH
39273: LD_VAR 0 4
39277: PPUSH
39278: CALL_OW 380
// un := CreateHuman ;
39282: LD_ADDR_VAR 0 14
39286: PUSH
39287: CALL_OW 44
39291: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39292: LD_ADDR_VAR 0 7
39296: PUSH
39297: LD_VAR 0 7
39301: PPUSH
39302: LD_INT 1
39304: PPUSH
39305: LD_VAR 0 14
39309: PPUSH
39310: CALL_OW 2
39314: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39315: LD_VAR 0 14
39319: PPUSH
39320: LD_VAR 0 1
39324: PPUSH
39325: CALL_OW 250
39329: PPUSH
39330: LD_VAR 0 1
39334: PPUSH
39335: CALL_OW 251
39339: PPUSH
39340: LD_INT 10
39342: PPUSH
39343: LD_INT 0
39345: PPUSH
39346: CALL_OW 50
// continue ;
39350: GO 39251
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39352: LD_VAR 0 12
39356: PUSH
39357: LD_INT 1
39359: ARRAY
39360: PPUSH
39361: CALL_OW 313
39365: PUSH
39366: LD_VAR 0 12
39370: PUSH
39371: LD_INT 1
39373: ARRAY
39374: PPUSH
39375: CALL_OW 266
39379: PUSH
39380: LD_INT 32
39382: PUSH
39383: LD_INT 31
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: IN
39390: AND
39391: PUSH
39392: LD_VAR 0 12
39396: PUSH
39397: LD_INT 1
39399: ARRAY
39400: PPUSH
39401: CALL_OW 313
39405: PUSH
39406: LD_INT 6
39408: EQUAL
39409: OR
39410: IFFALSE 39430
// f := Delete ( f , 1 ) ;
39412: LD_ADDR_VAR 0 12
39416: PUSH
39417: LD_VAR 0 12
39421: PPUSH
39422: LD_INT 1
39424: PPUSH
39425: CALL_OW 3
39429: ST_TO_ADDR
// if not f then
39430: LD_VAR 0 12
39434: NOT
39435: IFFALSE 39453
// begin x := x + 2 ;
39437: LD_ADDR_VAR 0 13
39441: PUSH
39442: LD_VAR 0 13
39446: PUSH
39447: LD_INT 2
39449: PLUS
39450: ST_TO_ADDR
// continue ;
39451: GO 39251
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39453: LD_VAR 0 12
39457: PUSH
39458: LD_INT 1
39460: ARRAY
39461: PPUSH
39462: CALL_OW 266
39466: PUSH
39467: LD_INT 5
39469: EQUAL
39470: IFFALSE 39544
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39472: LD_VAR 0 12
39476: PUSH
39477: LD_INT 1
39479: ARRAY
39480: PPUSH
39481: CALL_OW 313
39485: PUSH
39486: LD_INT 3
39488: LESS
39489: IFFALSE 39525
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39491: LD_INT 0
39493: PPUSH
39494: LD_INT 5
39496: PUSH
39497: LD_INT 8
39499: PUSH
39500: LD_INT 9
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: LIST
39507: PUSH
39508: LD_VAR 0 17
39512: ARRAY
39513: PPUSH
39514: LD_VAR 0 4
39518: PPUSH
39519: CALL_OW 380
39523: GO 39542
// PrepareHuman ( false , i , skill ) ;
39525: LD_INT 0
39527: PPUSH
39528: LD_VAR 0 8
39532: PPUSH
39533: LD_VAR 0 4
39537: PPUSH
39538: CALL_OW 380
// end else
39542: GO 39561
// PrepareHuman ( false , i , skill ) ;
39544: LD_INT 0
39546: PPUSH
39547: LD_VAR 0 8
39551: PPUSH
39552: LD_VAR 0 4
39556: PPUSH
39557: CALL_OW 380
// un := CreateHuman ;
39561: LD_ADDR_VAR 0 14
39565: PUSH
39566: CALL_OW 44
39570: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39571: LD_ADDR_VAR 0 7
39575: PUSH
39576: LD_VAR 0 7
39580: PPUSH
39581: LD_INT 1
39583: PPUSH
39584: LD_VAR 0 14
39588: PPUSH
39589: CALL_OW 2
39593: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39594: LD_VAR 0 14
39598: PPUSH
39599: LD_VAR 0 12
39603: PUSH
39604: LD_INT 1
39606: ARRAY
39607: PPUSH
39608: CALL_OW 52
// end ;
39612: GO 39251
39614: POP
39615: POP
// end ;
39616: GO 38553
39618: POP
39619: POP
// result := result ^ buildings ;
39620: LD_ADDR_VAR 0 7
39624: PUSH
39625: LD_VAR 0 7
39629: PUSH
39630: LD_VAR 0 18
39634: ADD
39635: ST_TO_ADDR
// end else
39636: GO 39779
// begin for i = 1 to personel do
39638: LD_ADDR_VAR 0 8
39642: PUSH
39643: DOUBLE
39644: LD_INT 1
39646: DEC
39647: ST_TO_ADDR
39648: LD_VAR 0 6
39652: PUSH
39653: FOR_TO
39654: IFFALSE 39777
// begin if i > 4 then
39656: LD_VAR 0 8
39660: PUSH
39661: LD_INT 4
39663: GREATER
39664: IFFALSE 39668
// break ;
39666: GO 39777
// x := personel [ i ] ;
39668: LD_ADDR_VAR 0 13
39672: PUSH
39673: LD_VAR 0 6
39677: PUSH
39678: LD_VAR 0 8
39682: ARRAY
39683: ST_TO_ADDR
// if x = - 1 then
39684: LD_VAR 0 13
39688: PUSH
39689: LD_INT 1
39691: NEG
39692: EQUAL
39693: IFFALSE 39697
// continue ;
39695: GO 39653
// PrepareHuman ( false , i , skill ) ;
39697: LD_INT 0
39699: PPUSH
39700: LD_VAR 0 8
39704: PPUSH
39705: LD_VAR 0 4
39709: PPUSH
39710: CALL_OW 380
// un := CreateHuman ;
39714: LD_ADDR_VAR 0 14
39718: PUSH
39719: CALL_OW 44
39723: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39724: LD_VAR 0 14
39728: PPUSH
39729: LD_VAR 0 1
39733: PPUSH
39734: CALL_OW 250
39738: PPUSH
39739: LD_VAR 0 1
39743: PPUSH
39744: CALL_OW 251
39748: PPUSH
39749: LD_INT 10
39751: PPUSH
39752: LD_INT 0
39754: PPUSH
39755: CALL_OW 50
// result := result ^ un ;
39759: LD_ADDR_VAR 0 7
39763: PUSH
39764: LD_VAR 0 7
39768: PUSH
39769: LD_VAR 0 14
39773: ADD
39774: ST_TO_ADDR
// end ;
39775: GO 39653
39777: POP
39778: POP
// end ; end ;
39779: LD_VAR 0 7
39783: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39784: LD_INT 0
39786: PPUSH
39787: PPUSH
39788: PPUSH
39789: PPUSH
39790: PPUSH
39791: PPUSH
39792: PPUSH
39793: PPUSH
39794: PPUSH
39795: PPUSH
39796: PPUSH
39797: PPUSH
39798: PPUSH
39799: PPUSH
39800: PPUSH
39801: PPUSH
// result := false ;
39802: LD_ADDR_VAR 0 3
39806: PUSH
39807: LD_INT 0
39809: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39810: LD_VAR 0 1
39814: NOT
39815: PUSH
39816: LD_VAR 0 1
39820: PPUSH
39821: CALL_OW 266
39825: PUSH
39826: LD_INT 32
39828: PUSH
39829: LD_INT 33
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: IN
39836: NOT
39837: OR
39838: IFFALSE 39842
// exit ;
39840: GO 40951
// nat := GetNation ( tower ) ;
39842: LD_ADDR_VAR 0 12
39846: PUSH
39847: LD_VAR 0 1
39851: PPUSH
39852: CALL_OW 248
39856: ST_TO_ADDR
// side := GetSide ( tower ) ;
39857: LD_ADDR_VAR 0 16
39861: PUSH
39862: LD_VAR 0 1
39866: PPUSH
39867: CALL_OW 255
39871: ST_TO_ADDR
// x := GetX ( tower ) ;
39872: LD_ADDR_VAR 0 10
39876: PUSH
39877: LD_VAR 0 1
39881: PPUSH
39882: CALL_OW 250
39886: ST_TO_ADDR
// y := GetY ( tower ) ;
39887: LD_ADDR_VAR 0 11
39891: PUSH
39892: LD_VAR 0 1
39896: PPUSH
39897: CALL_OW 251
39901: ST_TO_ADDR
// if not x or not y then
39902: LD_VAR 0 10
39906: NOT
39907: PUSH
39908: LD_VAR 0 11
39912: NOT
39913: OR
39914: IFFALSE 39918
// exit ;
39916: GO 40951
// weapon := 0 ;
39918: LD_ADDR_VAR 0 18
39922: PUSH
39923: LD_INT 0
39925: ST_TO_ADDR
// fac_list := [ ] ;
39926: LD_ADDR_VAR 0 17
39930: PUSH
39931: EMPTY
39932: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39933: LD_ADDR_VAR 0 6
39937: PUSH
39938: LD_VAR 0 1
39942: PPUSH
39943: CALL_OW 274
39947: PPUSH
39948: LD_VAR 0 2
39952: PPUSH
39953: LD_INT 0
39955: PPUSH
39956: CALL 37522 0 3
39960: PPUSH
39961: LD_INT 30
39963: PUSH
39964: LD_INT 3
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PPUSH
39971: CALL_OW 72
39975: ST_TO_ADDR
// if not factories then
39976: LD_VAR 0 6
39980: NOT
39981: IFFALSE 39985
// exit ;
39983: GO 40951
// for i in factories do
39985: LD_ADDR_VAR 0 8
39989: PUSH
39990: LD_VAR 0 6
39994: PUSH
39995: FOR_IN
39996: IFFALSE 40021
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39998: LD_ADDR_VAR 0 17
40002: PUSH
40003: LD_VAR 0 17
40007: PUSH
40008: LD_VAR 0 8
40012: PPUSH
40013: CALL_OW 478
40017: UNION
40018: ST_TO_ADDR
40019: GO 39995
40021: POP
40022: POP
// if not fac_list then
40023: LD_VAR 0 17
40027: NOT
40028: IFFALSE 40032
// exit ;
40030: GO 40951
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40032: LD_ADDR_VAR 0 5
40036: PUSH
40037: LD_INT 4
40039: PUSH
40040: LD_INT 5
40042: PUSH
40043: LD_INT 9
40045: PUSH
40046: LD_INT 10
40048: PUSH
40049: LD_INT 6
40051: PUSH
40052: LD_INT 7
40054: PUSH
40055: LD_INT 11
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 27
40069: PUSH
40070: LD_INT 28
40072: PUSH
40073: LD_INT 26
40075: PUSH
40076: LD_INT 30
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 43
40087: PUSH
40088: LD_INT 44
40090: PUSH
40091: LD_INT 46
40093: PUSH
40094: LD_INT 45
40096: PUSH
40097: LD_INT 47
40099: PUSH
40100: LD_INT 49
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: LIST
40115: PUSH
40116: LD_VAR 0 12
40120: ARRAY
40121: ST_TO_ADDR
// list := list isect fac_list ;
40122: LD_ADDR_VAR 0 5
40126: PUSH
40127: LD_VAR 0 5
40131: PUSH
40132: LD_VAR 0 17
40136: ISECT
40137: ST_TO_ADDR
// if not list then
40138: LD_VAR 0 5
40142: NOT
40143: IFFALSE 40147
// exit ;
40145: GO 40951
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40147: LD_VAR 0 12
40151: PUSH
40152: LD_INT 3
40154: EQUAL
40155: PUSH
40156: LD_INT 49
40158: PUSH
40159: LD_VAR 0 5
40163: IN
40164: AND
40165: PUSH
40166: LD_INT 31
40168: PPUSH
40169: LD_VAR 0 16
40173: PPUSH
40174: CALL_OW 321
40178: PUSH
40179: LD_INT 2
40181: EQUAL
40182: AND
40183: IFFALSE 40243
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40185: LD_INT 22
40187: PUSH
40188: LD_VAR 0 16
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 35
40199: PUSH
40200: LD_INT 49
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 91
40209: PUSH
40210: LD_VAR 0 1
40214: PUSH
40215: LD_INT 10
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: LIST
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: LIST
40227: PPUSH
40228: CALL_OW 69
40232: NOT
40233: IFFALSE 40243
// weapon := ru_time_lapser ;
40235: LD_ADDR_VAR 0 18
40239: PUSH
40240: LD_INT 49
40242: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40243: LD_VAR 0 12
40247: PUSH
40248: LD_INT 1
40250: PUSH
40251: LD_INT 2
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: IN
40258: PUSH
40259: LD_INT 11
40261: PUSH
40262: LD_VAR 0 5
40266: IN
40267: PUSH
40268: LD_INT 30
40270: PUSH
40271: LD_VAR 0 5
40275: IN
40276: OR
40277: AND
40278: PUSH
40279: LD_INT 6
40281: PPUSH
40282: LD_VAR 0 16
40286: PPUSH
40287: CALL_OW 321
40291: PUSH
40292: LD_INT 2
40294: EQUAL
40295: AND
40296: IFFALSE 40461
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40298: LD_INT 22
40300: PUSH
40301: LD_VAR 0 16
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 2
40312: PUSH
40313: LD_INT 35
40315: PUSH
40316: LD_INT 11
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 35
40325: PUSH
40326: LD_INT 30
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 91
40340: PUSH
40341: LD_VAR 0 1
40345: PUSH
40346: LD_INT 18
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: LIST
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: LIST
40358: PPUSH
40359: CALL_OW 69
40363: NOT
40364: PUSH
40365: LD_INT 22
40367: PUSH
40368: LD_VAR 0 16
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 2
40379: PUSH
40380: LD_INT 30
40382: PUSH
40383: LD_INT 32
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 30
40392: PUSH
40393: LD_INT 33
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 91
40407: PUSH
40408: LD_VAR 0 1
40412: PUSH
40413: LD_INT 12
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: LIST
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: LIST
40425: PUSH
40426: EMPTY
40427: LIST
40428: PPUSH
40429: CALL_OW 69
40433: PUSH
40434: LD_INT 2
40436: GREATER
40437: AND
40438: IFFALSE 40461
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40440: LD_ADDR_VAR 0 18
40444: PUSH
40445: LD_INT 11
40447: PUSH
40448: LD_INT 30
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_VAR 0 12
40459: ARRAY
40460: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40461: LD_VAR 0 18
40465: NOT
40466: PUSH
40467: LD_INT 40
40469: PPUSH
40470: LD_VAR 0 16
40474: PPUSH
40475: CALL_OW 321
40479: PUSH
40480: LD_INT 2
40482: EQUAL
40483: AND
40484: PUSH
40485: LD_INT 7
40487: PUSH
40488: LD_VAR 0 5
40492: IN
40493: PUSH
40494: LD_INT 28
40496: PUSH
40497: LD_VAR 0 5
40501: IN
40502: OR
40503: PUSH
40504: LD_INT 45
40506: PUSH
40507: LD_VAR 0 5
40511: IN
40512: OR
40513: AND
40514: IFFALSE 40768
// begin hex := GetHexInfo ( x , y ) ;
40516: LD_ADDR_VAR 0 4
40520: PUSH
40521: LD_VAR 0 10
40525: PPUSH
40526: LD_VAR 0 11
40530: PPUSH
40531: CALL_OW 546
40535: ST_TO_ADDR
// if hex [ 1 ] then
40536: LD_VAR 0 4
40540: PUSH
40541: LD_INT 1
40543: ARRAY
40544: IFFALSE 40548
// exit ;
40546: GO 40951
// height := hex [ 2 ] ;
40548: LD_ADDR_VAR 0 15
40552: PUSH
40553: LD_VAR 0 4
40557: PUSH
40558: LD_INT 2
40560: ARRAY
40561: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40562: LD_ADDR_VAR 0 14
40566: PUSH
40567: LD_INT 0
40569: PUSH
40570: LD_INT 2
40572: PUSH
40573: LD_INT 3
40575: PUSH
40576: LD_INT 5
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: ST_TO_ADDR
// for i in tmp do
40585: LD_ADDR_VAR 0 8
40589: PUSH
40590: LD_VAR 0 14
40594: PUSH
40595: FOR_IN
40596: IFFALSE 40766
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40598: LD_ADDR_VAR 0 9
40602: PUSH
40603: LD_VAR 0 10
40607: PPUSH
40608: LD_VAR 0 8
40612: PPUSH
40613: LD_INT 5
40615: PPUSH
40616: CALL_OW 272
40620: PUSH
40621: LD_VAR 0 11
40625: PPUSH
40626: LD_VAR 0 8
40630: PPUSH
40631: LD_INT 5
40633: PPUSH
40634: CALL_OW 273
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40643: LD_VAR 0 9
40647: PUSH
40648: LD_INT 1
40650: ARRAY
40651: PPUSH
40652: LD_VAR 0 9
40656: PUSH
40657: LD_INT 2
40659: ARRAY
40660: PPUSH
40661: CALL_OW 488
40665: IFFALSE 40764
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40667: LD_ADDR_VAR 0 4
40671: PUSH
40672: LD_VAR 0 9
40676: PUSH
40677: LD_INT 1
40679: ARRAY
40680: PPUSH
40681: LD_VAR 0 9
40685: PUSH
40686: LD_INT 2
40688: ARRAY
40689: PPUSH
40690: CALL_OW 546
40694: ST_TO_ADDR
// if hex [ 1 ] then
40695: LD_VAR 0 4
40699: PUSH
40700: LD_INT 1
40702: ARRAY
40703: IFFALSE 40707
// continue ;
40705: GO 40595
// h := hex [ 2 ] ;
40707: LD_ADDR_VAR 0 13
40711: PUSH
40712: LD_VAR 0 4
40716: PUSH
40717: LD_INT 2
40719: ARRAY
40720: ST_TO_ADDR
// if h + 7 < height then
40721: LD_VAR 0 13
40725: PUSH
40726: LD_INT 7
40728: PLUS
40729: PUSH
40730: LD_VAR 0 15
40734: LESS
40735: IFFALSE 40764
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40737: LD_ADDR_VAR 0 18
40741: PUSH
40742: LD_INT 7
40744: PUSH
40745: LD_INT 28
40747: PUSH
40748: LD_INT 45
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: LIST
40755: PUSH
40756: LD_VAR 0 12
40760: ARRAY
40761: ST_TO_ADDR
// break ;
40762: GO 40766
// end ; end ; end ;
40764: GO 40595
40766: POP
40767: POP
// end ; if not weapon then
40768: LD_VAR 0 18
40772: NOT
40773: IFFALSE 40833
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40775: LD_ADDR_VAR 0 5
40779: PUSH
40780: LD_VAR 0 5
40784: PUSH
40785: LD_INT 11
40787: PUSH
40788: LD_INT 30
40790: PUSH
40791: LD_INT 49
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: LIST
40798: DIFF
40799: ST_TO_ADDR
// if not list then
40800: LD_VAR 0 5
40804: NOT
40805: IFFALSE 40809
// exit ;
40807: GO 40951
// weapon := list [ rand ( 1 , list ) ] ;
40809: LD_ADDR_VAR 0 18
40813: PUSH
40814: LD_VAR 0 5
40818: PUSH
40819: LD_INT 1
40821: PPUSH
40822: LD_VAR 0 5
40826: PPUSH
40827: CALL_OW 12
40831: ARRAY
40832: ST_TO_ADDR
// end ; if weapon then
40833: LD_VAR 0 18
40837: IFFALSE 40951
// begin tmp := CostOfWeapon ( weapon ) ;
40839: LD_ADDR_VAR 0 14
40843: PUSH
40844: LD_VAR 0 18
40848: PPUSH
40849: CALL_OW 451
40853: ST_TO_ADDR
// j := GetBase ( tower ) ;
40854: LD_ADDR_VAR 0 9
40858: PUSH
40859: LD_VAR 0 1
40863: PPUSH
40864: CALL_OW 274
40868: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40869: LD_VAR 0 9
40873: PPUSH
40874: LD_INT 1
40876: PPUSH
40877: CALL_OW 275
40881: PUSH
40882: LD_VAR 0 14
40886: PUSH
40887: LD_INT 1
40889: ARRAY
40890: GREATEREQUAL
40891: PUSH
40892: LD_VAR 0 9
40896: PPUSH
40897: LD_INT 2
40899: PPUSH
40900: CALL_OW 275
40904: PUSH
40905: LD_VAR 0 14
40909: PUSH
40910: LD_INT 2
40912: ARRAY
40913: GREATEREQUAL
40914: AND
40915: PUSH
40916: LD_VAR 0 9
40920: PPUSH
40921: LD_INT 3
40923: PPUSH
40924: CALL_OW 275
40928: PUSH
40929: LD_VAR 0 14
40933: PUSH
40934: LD_INT 3
40936: ARRAY
40937: GREATEREQUAL
40938: AND
40939: IFFALSE 40951
// result := weapon ;
40941: LD_ADDR_VAR 0 3
40945: PUSH
40946: LD_VAR 0 18
40950: ST_TO_ADDR
// end ; end ;
40951: LD_VAR 0 3
40955: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40956: LD_INT 0
40958: PPUSH
40959: PPUSH
// result := true ;
40960: LD_ADDR_VAR 0 3
40964: PUSH
40965: LD_INT 1
40967: ST_TO_ADDR
// if array1 = array2 then
40968: LD_VAR 0 1
40972: PUSH
40973: LD_VAR 0 2
40977: EQUAL
40978: IFFALSE 41038
// begin for i = 1 to array1 do
40980: LD_ADDR_VAR 0 4
40984: PUSH
40985: DOUBLE
40986: LD_INT 1
40988: DEC
40989: ST_TO_ADDR
40990: LD_VAR 0 1
40994: PUSH
40995: FOR_TO
40996: IFFALSE 41034
// if array1 [ i ] <> array2 [ i ] then
40998: LD_VAR 0 1
41002: PUSH
41003: LD_VAR 0 4
41007: ARRAY
41008: PUSH
41009: LD_VAR 0 2
41013: PUSH
41014: LD_VAR 0 4
41018: ARRAY
41019: NONEQUAL
41020: IFFALSE 41032
// begin result := false ;
41022: LD_ADDR_VAR 0 3
41026: PUSH
41027: LD_INT 0
41029: ST_TO_ADDR
// break ;
41030: GO 41034
// end ;
41032: GO 40995
41034: POP
41035: POP
// end else
41036: GO 41046
// result := false ;
41038: LD_ADDR_VAR 0 3
41042: PUSH
41043: LD_INT 0
41045: ST_TO_ADDR
// end ;
41046: LD_VAR 0 3
41050: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41051: LD_INT 0
41053: PPUSH
41054: PPUSH
// if not array1 or not array2 then
41055: LD_VAR 0 1
41059: NOT
41060: PUSH
41061: LD_VAR 0 2
41065: NOT
41066: OR
41067: IFFALSE 41071
// exit ;
41069: GO 41135
// result := true ;
41071: LD_ADDR_VAR 0 3
41075: PUSH
41076: LD_INT 1
41078: ST_TO_ADDR
// for i = 1 to array1 do
41079: LD_ADDR_VAR 0 4
41083: PUSH
41084: DOUBLE
41085: LD_INT 1
41087: DEC
41088: ST_TO_ADDR
41089: LD_VAR 0 1
41093: PUSH
41094: FOR_TO
41095: IFFALSE 41133
// if array1 [ i ] <> array2 [ i ] then
41097: LD_VAR 0 1
41101: PUSH
41102: LD_VAR 0 4
41106: ARRAY
41107: PUSH
41108: LD_VAR 0 2
41112: PUSH
41113: LD_VAR 0 4
41117: ARRAY
41118: NONEQUAL
41119: IFFALSE 41131
// begin result := false ;
41121: LD_ADDR_VAR 0 3
41125: PUSH
41126: LD_INT 0
41128: ST_TO_ADDR
// break ;
41129: GO 41133
// end ;
41131: GO 41094
41133: POP
41134: POP
// end ;
41135: LD_VAR 0 3
41139: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41140: LD_INT 0
41142: PPUSH
41143: PPUSH
41144: PPUSH
// pom := GetBase ( fac ) ;
41145: LD_ADDR_VAR 0 5
41149: PUSH
41150: LD_VAR 0 1
41154: PPUSH
41155: CALL_OW 274
41159: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41160: LD_ADDR_VAR 0 4
41164: PUSH
41165: LD_VAR 0 2
41169: PUSH
41170: LD_INT 1
41172: ARRAY
41173: PPUSH
41174: LD_VAR 0 2
41178: PUSH
41179: LD_INT 2
41181: ARRAY
41182: PPUSH
41183: LD_VAR 0 2
41187: PUSH
41188: LD_INT 3
41190: ARRAY
41191: PPUSH
41192: LD_VAR 0 2
41196: PUSH
41197: LD_INT 4
41199: ARRAY
41200: PPUSH
41201: CALL_OW 449
41205: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41206: LD_ADDR_VAR 0 3
41210: PUSH
41211: LD_VAR 0 5
41215: PPUSH
41216: LD_INT 1
41218: PPUSH
41219: CALL_OW 275
41223: PUSH
41224: LD_VAR 0 4
41228: PUSH
41229: LD_INT 1
41231: ARRAY
41232: GREATEREQUAL
41233: PUSH
41234: LD_VAR 0 5
41238: PPUSH
41239: LD_INT 2
41241: PPUSH
41242: CALL_OW 275
41246: PUSH
41247: LD_VAR 0 4
41251: PUSH
41252: LD_INT 2
41254: ARRAY
41255: GREATEREQUAL
41256: AND
41257: PUSH
41258: LD_VAR 0 5
41262: PPUSH
41263: LD_INT 3
41265: PPUSH
41266: CALL_OW 275
41270: PUSH
41271: LD_VAR 0 4
41275: PUSH
41276: LD_INT 3
41278: ARRAY
41279: GREATEREQUAL
41280: AND
41281: ST_TO_ADDR
// end ;
41282: LD_VAR 0 3
41286: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41287: LD_INT 0
41289: PPUSH
41290: PPUSH
41291: PPUSH
41292: PPUSH
// pom := GetBase ( building ) ;
41293: LD_ADDR_VAR 0 3
41297: PUSH
41298: LD_VAR 0 1
41302: PPUSH
41303: CALL_OW 274
41307: ST_TO_ADDR
// if not pom then
41308: LD_VAR 0 3
41312: NOT
41313: IFFALSE 41317
// exit ;
41315: GO 41487
// btype := GetBType ( building ) ;
41317: LD_ADDR_VAR 0 5
41321: PUSH
41322: LD_VAR 0 1
41326: PPUSH
41327: CALL_OW 266
41331: ST_TO_ADDR
// if btype = b_armoury then
41332: LD_VAR 0 5
41336: PUSH
41337: LD_INT 4
41339: EQUAL
41340: IFFALSE 41350
// btype := b_barracks ;
41342: LD_ADDR_VAR 0 5
41346: PUSH
41347: LD_INT 5
41349: ST_TO_ADDR
// if btype = b_depot then
41350: LD_VAR 0 5
41354: PUSH
41355: LD_INT 0
41357: EQUAL
41358: IFFALSE 41368
// btype := b_warehouse ;
41360: LD_ADDR_VAR 0 5
41364: PUSH
41365: LD_INT 1
41367: ST_TO_ADDR
// if btype = b_workshop then
41368: LD_VAR 0 5
41372: PUSH
41373: LD_INT 2
41375: EQUAL
41376: IFFALSE 41386
// btype := b_factory ;
41378: LD_ADDR_VAR 0 5
41382: PUSH
41383: LD_INT 3
41385: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41386: LD_ADDR_VAR 0 4
41390: PUSH
41391: LD_VAR 0 5
41395: PPUSH
41396: LD_VAR 0 1
41400: PPUSH
41401: CALL_OW 248
41405: PPUSH
41406: CALL_OW 450
41410: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41411: LD_ADDR_VAR 0 2
41415: PUSH
41416: LD_VAR 0 3
41420: PPUSH
41421: LD_INT 1
41423: PPUSH
41424: CALL_OW 275
41428: PUSH
41429: LD_VAR 0 4
41433: PUSH
41434: LD_INT 1
41436: ARRAY
41437: GREATEREQUAL
41438: PUSH
41439: LD_VAR 0 3
41443: PPUSH
41444: LD_INT 2
41446: PPUSH
41447: CALL_OW 275
41451: PUSH
41452: LD_VAR 0 4
41456: PUSH
41457: LD_INT 2
41459: ARRAY
41460: GREATEREQUAL
41461: AND
41462: PUSH
41463: LD_VAR 0 3
41467: PPUSH
41468: LD_INT 3
41470: PPUSH
41471: CALL_OW 275
41475: PUSH
41476: LD_VAR 0 4
41480: PUSH
41481: LD_INT 3
41483: ARRAY
41484: GREATEREQUAL
41485: AND
41486: ST_TO_ADDR
// end ;
41487: LD_VAR 0 2
41491: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41492: LD_INT 0
41494: PPUSH
41495: PPUSH
41496: PPUSH
// pom := GetBase ( building ) ;
41497: LD_ADDR_VAR 0 4
41501: PUSH
41502: LD_VAR 0 1
41506: PPUSH
41507: CALL_OW 274
41511: ST_TO_ADDR
// if not pom then
41512: LD_VAR 0 4
41516: NOT
41517: IFFALSE 41521
// exit ;
41519: GO 41622
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41521: LD_ADDR_VAR 0 5
41525: PUSH
41526: LD_VAR 0 2
41530: PPUSH
41531: LD_VAR 0 1
41535: PPUSH
41536: CALL_OW 248
41540: PPUSH
41541: CALL_OW 450
41545: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41546: LD_ADDR_VAR 0 3
41550: PUSH
41551: LD_VAR 0 4
41555: PPUSH
41556: LD_INT 1
41558: PPUSH
41559: CALL_OW 275
41563: PUSH
41564: LD_VAR 0 5
41568: PUSH
41569: LD_INT 1
41571: ARRAY
41572: GREATEREQUAL
41573: PUSH
41574: LD_VAR 0 4
41578: PPUSH
41579: LD_INT 2
41581: PPUSH
41582: CALL_OW 275
41586: PUSH
41587: LD_VAR 0 5
41591: PUSH
41592: LD_INT 2
41594: ARRAY
41595: GREATEREQUAL
41596: AND
41597: PUSH
41598: LD_VAR 0 4
41602: PPUSH
41603: LD_INT 3
41605: PPUSH
41606: CALL_OW 275
41610: PUSH
41611: LD_VAR 0 5
41615: PUSH
41616: LD_INT 3
41618: ARRAY
41619: GREATEREQUAL
41620: AND
41621: ST_TO_ADDR
// end ;
41622: LD_VAR 0 3
41626: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41627: LD_INT 0
41629: PPUSH
41630: PPUSH
41631: PPUSH
41632: PPUSH
41633: PPUSH
41634: PPUSH
41635: PPUSH
41636: PPUSH
41637: PPUSH
41638: PPUSH
41639: PPUSH
// result := false ;
41640: LD_ADDR_VAR 0 8
41644: PUSH
41645: LD_INT 0
41647: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41648: LD_VAR 0 5
41652: NOT
41653: PUSH
41654: LD_VAR 0 1
41658: NOT
41659: OR
41660: PUSH
41661: LD_VAR 0 2
41665: NOT
41666: OR
41667: PUSH
41668: LD_VAR 0 3
41672: NOT
41673: OR
41674: IFFALSE 41678
// exit ;
41676: GO 42492
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41678: LD_ADDR_VAR 0 14
41682: PUSH
41683: LD_VAR 0 1
41687: PPUSH
41688: LD_VAR 0 2
41692: PPUSH
41693: LD_VAR 0 3
41697: PPUSH
41698: LD_VAR 0 4
41702: PPUSH
41703: LD_VAR 0 5
41707: PUSH
41708: LD_INT 1
41710: ARRAY
41711: PPUSH
41712: CALL_OW 248
41716: PPUSH
41717: LD_INT 0
41719: PPUSH
41720: CALL 43745 0 6
41724: ST_TO_ADDR
// if not hexes then
41725: LD_VAR 0 14
41729: NOT
41730: IFFALSE 41734
// exit ;
41732: GO 42492
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41734: LD_ADDR_VAR 0 17
41738: PUSH
41739: LD_VAR 0 5
41743: PPUSH
41744: LD_INT 22
41746: PUSH
41747: LD_VAR 0 13
41751: PPUSH
41752: CALL_OW 255
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 2
41763: PUSH
41764: LD_INT 30
41766: PUSH
41767: LD_INT 0
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 30
41776: PUSH
41777: LD_INT 1
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: LIST
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PPUSH
41793: CALL_OW 72
41797: ST_TO_ADDR
// for i = 1 to hexes do
41798: LD_ADDR_VAR 0 9
41802: PUSH
41803: DOUBLE
41804: LD_INT 1
41806: DEC
41807: ST_TO_ADDR
41808: LD_VAR 0 14
41812: PUSH
41813: FOR_TO
41814: IFFALSE 42490
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41816: LD_ADDR_VAR 0 13
41820: PUSH
41821: LD_VAR 0 14
41825: PUSH
41826: LD_VAR 0 9
41830: ARRAY
41831: PUSH
41832: LD_INT 1
41834: ARRAY
41835: PPUSH
41836: LD_VAR 0 14
41840: PUSH
41841: LD_VAR 0 9
41845: ARRAY
41846: PUSH
41847: LD_INT 2
41849: ARRAY
41850: PPUSH
41851: CALL_OW 428
41855: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41856: LD_VAR 0 14
41860: PUSH
41861: LD_VAR 0 9
41865: ARRAY
41866: PUSH
41867: LD_INT 1
41869: ARRAY
41870: PPUSH
41871: LD_VAR 0 14
41875: PUSH
41876: LD_VAR 0 9
41880: ARRAY
41881: PUSH
41882: LD_INT 2
41884: ARRAY
41885: PPUSH
41886: CALL_OW 351
41890: PUSH
41891: LD_VAR 0 14
41895: PUSH
41896: LD_VAR 0 9
41900: ARRAY
41901: PUSH
41902: LD_INT 1
41904: ARRAY
41905: PPUSH
41906: LD_VAR 0 14
41910: PUSH
41911: LD_VAR 0 9
41915: ARRAY
41916: PUSH
41917: LD_INT 2
41919: ARRAY
41920: PPUSH
41921: CALL_OW 488
41925: NOT
41926: OR
41927: PUSH
41928: LD_VAR 0 13
41932: PPUSH
41933: CALL_OW 247
41937: PUSH
41938: LD_INT 3
41940: EQUAL
41941: OR
41942: IFFALSE 41948
// exit ;
41944: POP
41945: POP
41946: GO 42492
// if not tmp then
41948: LD_VAR 0 13
41952: NOT
41953: IFFALSE 41957
// continue ;
41955: GO 41813
// result := true ;
41957: LD_ADDR_VAR 0 8
41961: PUSH
41962: LD_INT 1
41964: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41965: LD_VAR 0 6
41969: PUSH
41970: LD_VAR 0 13
41974: PPUSH
41975: CALL_OW 247
41979: PUSH
41980: LD_INT 2
41982: EQUAL
41983: AND
41984: PUSH
41985: LD_VAR 0 13
41989: PPUSH
41990: CALL_OW 263
41994: PUSH
41995: LD_INT 1
41997: EQUAL
41998: AND
41999: IFFALSE 42163
// begin if IsDrivenBy ( tmp ) then
42001: LD_VAR 0 13
42005: PPUSH
42006: CALL_OW 311
42010: IFFALSE 42014
// continue ;
42012: GO 41813
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42014: LD_VAR 0 6
42018: PPUSH
42019: LD_INT 3
42021: PUSH
42022: LD_INT 60
42024: PUSH
42025: EMPTY
42026: LIST
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 3
42034: PUSH
42035: LD_INT 55
42037: PUSH
42038: EMPTY
42039: LIST
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PPUSH
42049: CALL_OW 72
42053: IFFALSE 42161
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42055: LD_ADDR_VAR 0 18
42059: PUSH
42060: LD_VAR 0 6
42064: PPUSH
42065: LD_INT 3
42067: PUSH
42068: LD_INT 60
42070: PUSH
42071: EMPTY
42072: LIST
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 3
42080: PUSH
42081: LD_INT 55
42083: PUSH
42084: EMPTY
42085: LIST
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PPUSH
42095: CALL_OW 72
42099: PUSH
42100: LD_INT 1
42102: ARRAY
42103: ST_TO_ADDR
// if IsInUnit ( driver ) then
42104: LD_VAR 0 18
42108: PPUSH
42109: CALL_OW 310
42113: IFFALSE 42124
// ComExit ( driver ) ;
42115: LD_VAR 0 18
42119: PPUSH
42120: CALL 67537 0 1
// AddComEnterUnit ( driver , tmp ) ;
42124: LD_VAR 0 18
42128: PPUSH
42129: LD_VAR 0 13
42133: PPUSH
42134: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42138: LD_VAR 0 18
42142: PPUSH
42143: LD_VAR 0 7
42147: PPUSH
42148: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42152: LD_VAR 0 18
42156: PPUSH
42157: CALL_OW 181
// end ; continue ;
42161: GO 41813
// end ; if not cleaners or not tmp in cleaners then
42163: LD_VAR 0 6
42167: NOT
42168: PUSH
42169: LD_VAR 0 13
42173: PUSH
42174: LD_VAR 0 6
42178: IN
42179: NOT
42180: OR
42181: IFFALSE 42488
// begin if dep then
42183: LD_VAR 0 17
42187: IFFALSE 42323
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42189: LD_ADDR_VAR 0 16
42193: PUSH
42194: LD_VAR 0 17
42198: PUSH
42199: LD_INT 1
42201: ARRAY
42202: PPUSH
42203: CALL_OW 250
42207: PPUSH
42208: LD_VAR 0 17
42212: PUSH
42213: LD_INT 1
42215: ARRAY
42216: PPUSH
42217: CALL_OW 254
42221: PPUSH
42222: LD_INT 5
42224: PPUSH
42225: CALL_OW 272
42229: PUSH
42230: LD_VAR 0 17
42234: PUSH
42235: LD_INT 1
42237: ARRAY
42238: PPUSH
42239: CALL_OW 251
42243: PPUSH
42244: LD_VAR 0 17
42248: PUSH
42249: LD_INT 1
42251: ARRAY
42252: PPUSH
42253: CALL_OW 254
42257: PPUSH
42258: LD_INT 5
42260: PPUSH
42261: CALL_OW 273
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42270: LD_VAR 0 16
42274: PUSH
42275: LD_INT 1
42277: ARRAY
42278: PPUSH
42279: LD_VAR 0 16
42283: PUSH
42284: LD_INT 2
42286: ARRAY
42287: PPUSH
42288: CALL_OW 488
42292: IFFALSE 42323
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42294: LD_VAR 0 13
42298: PPUSH
42299: LD_VAR 0 16
42303: PUSH
42304: LD_INT 1
42306: ARRAY
42307: PPUSH
42308: LD_VAR 0 16
42312: PUSH
42313: LD_INT 2
42315: ARRAY
42316: PPUSH
42317: CALL_OW 111
// continue ;
42321: GO 41813
// end ; end ; r := GetDir ( tmp ) ;
42323: LD_ADDR_VAR 0 15
42327: PUSH
42328: LD_VAR 0 13
42332: PPUSH
42333: CALL_OW 254
42337: ST_TO_ADDR
// if r = 5 then
42338: LD_VAR 0 15
42342: PUSH
42343: LD_INT 5
42345: EQUAL
42346: IFFALSE 42356
// r := 0 ;
42348: LD_ADDR_VAR 0 15
42352: PUSH
42353: LD_INT 0
42355: ST_TO_ADDR
// for j = r to 5 do
42356: LD_ADDR_VAR 0 10
42360: PUSH
42361: DOUBLE
42362: LD_VAR 0 15
42366: DEC
42367: ST_TO_ADDR
42368: LD_INT 5
42370: PUSH
42371: FOR_TO
42372: IFFALSE 42486
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42374: LD_ADDR_VAR 0 11
42378: PUSH
42379: LD_VAR 0 13
42383: PPUSH
42384: CALL_OW 250
42388: PPUSH
42389: LD_VAR 0 10
42393: PPUSH
42394: LD_INT 2
42396: PPUSH
42397: CALL_OW 272
42401: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42402: LD_ADDR_VAR 0 12
42406: PUSH
42407: LD_VAR 0 13
42411: PPUSH
42412: CALL_OW 251
42416: PPUSH
42417: LD_VAR 0 10
42421: PPUSH
42422: LD_INT 2
42424: PPUSH
42425: CALL_OW 273
42429: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42430: LD_VAR 0 11
42434: PPUSH
42435: LD_VAR 0 12
42439: PPUSH
42440: CALL_OW 488
42444: PUSH
42445: LD_VAR 0 11
42449: PPUSH
42450: LD_VAR 0 12
42454: PPUSH
42455: CALL_OW 428
42459: NOT
42460: AND
42461: IFFALSE 42484
// begin ComMoveXY ( tmp , _x , _y ) ;
42463: LD_VAR 0 13
42467: PPUSH
42468: LD_VAR 0 11
42472: PPUSH
42473: LD_VAR 0 12
42477: PPUSH
42478: CALL_OW 111
// break ;
42482: GO 42486
// end ; end ;
42484: GO 42371
42486: POP
42487: POP
// end ; end ;
42488: GO 41813
42490: POP
42491: POP
// end ;
42492: LD_VAR 0 8
42496: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42497: LD_INT 0
42499: PPUSH
// result := true ;
42500: LD_ADDR_VAR 0 3
42504: PUSH
42505: LD_INT 1
42507: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42508: LD_VAR 0 2
42512: PUSH
42513: LD_INT 24
42515: DOUBLE
42516: EQUAL
42517: IFTRUE 42527
42519: LD_INT 33
42521: DOUBLE
42522: EQUAL
42523: IFTRUE 42527
42525: GO 42552
42527: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42528: LD_ADDR_VAR 0 3
42532: PUSH
42533: LD_INT 32
42535: PPUSH
42536: LD_VAR 0 1
42540: PPUSH
42541: CALL_OW 321
42545: PUSH
42546: LD_INT 2
42548: EQUAL
42549: ST_TO_ADDR
42550: GO 42868
42552: LD_INT 20
42554: DOUBLE
42555: EQUAL
42556: IFTRUE 42560
42558: GO 42585
42560: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42561: LD_ADDR_VAR 0 3
42565: PUSH
42566: LD_INT 6
42568: PPUSH
42569: LD_VAR 0 1
42573: PPUSH
42574: CALL_OW 321
42578: PUSH
42579: LD_INT 2
42581: EQUAL
42582: ST_TO_ADDR
42583: GO 42868
42585: LD_INT 22
42587: DOUBLE
42588: EQUAL
42589: IFTRUE 42599
42591: LD_INT 36
42593: DOUBLE
42594: EQUAL
42595: IFTRUE 42599
42597: GO 42624
42599: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42600: LD_ADDR_VAR 0 3
42604: PUSH
42605: LD_INT 15
42607: PPUSH
42608: LD_VAR 0 1
42612: PPUSH
42613: CALL_OW 321
42617: PUSH
42618: LD_INT 2
42620: EQUAL
42621: ST_TO_ADDR
42622: GO 42868
42624: LD_INT 30
42626: DOUBLE
42627: EQUAL
42628: IFTRUE 42632
42630: GO 42657
42632: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42633: LD_ADDR_VAR 0 3
42637: PUSH
42638: LD_INT 20
42640: PPUSH
42641: LD_VAR 0 1
42645: PPUSH
42646: CALL_OW 321
42650: PUSH
42651: LD_INT 2
42653: EQUAL
42654: ST_TO_ADDR
42655: GO 42868
42657: LD_INT 28
42659: DOUBLE
42660: EQUAL
42661: IFTRUE 42671
42663: LD_INT 21
42665: DOUBLE
42666: EQUAL
42667: IFTRUE 42671
42669: GO 42696
42671: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42672: LD_ADDR_VAR 0 3
42676: PUSH
42677: LD_INT 21
42679: PPUSH
42680: LD_VAR 0 1
42684: PPUSH
42685: CALL_OW 321
42689: PUSH
42690: LD_INT 2
42692: EQUAL
42693: ST_TO_ADDR
42694: GO 42868
42696: LD_INT 16
42698: DOUBLE
42699: EQUAL
42700: IFTRUE 42704
42702: GO 42729
42704: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42705: LD_ADDR_VAR 0 3
42709: PUSH
42710: LD_INT 84
42712: PPUSH
42713: LD_VAR 0 1
42717: PPUSH
42718: CALL_OW 321
42722: PUSH
42723: LD_INT 2
42725: EQUAL
42726: ST_TO_ADDR
42727: GO 42868
42729: LD_INT 19
42731: DOUBLE
42732: EQUAL
42733: IFTRUE 42743
42735: LD_INT 23
42737: DOUBLE
42738: EQUAL
42739: IFTRUE 42743
42741: GO 42768
42743: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42744: LD_ADDR_VAR 0 3
42748: PUSH
42749: LD_INT 83
42751: PPUSH
42752: LD_VAR 0 1
42756: PPUSH
42757: CALL_OW 321
42761: PUSH
42762: LD_INT 2
42764: EQUAL
42765: ST_TO_ADDR
42766: GO 42868
42768: LD_INT 17
42770: DOUBLE
42771: EQUAL
42772: IFTRUE 42776
42774: GO 42801
42776: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42777: LD_ADDR_VAR 0 3
42781: PUSH
42782: LD_INT 39
42784: PPUSH
42785: LD_VAR 0 1
42789: PPUSH
42790: CALL_OW 321
42794: PUSH
42795: LD_INT 2
42797: EQUAL
42798: ST_TO_ADDR
42799: GO 42868
42801: LD_INT 18
42803: DOUBLE
42804: EQUAL
42805: IFTRUE 42809
42807: GO 42834
42809: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42810: LD_ADDR_VAR 0 3
42814: PUSH
42815: LD_INT 40
42817: PPUSH
42818: LD_VAR 0 1
42822: PPUSH
42823: CALL_OW 321
42827: PUSH
42828: LD_INT 2
42830: EQUAL
42831: ST_TO_ADDR
42832: GO 42868
42834: LD_INT 27
42836: DOUBLE
42837: EQUAL
42838: IFTRUE 42842
42840: GO 42867
42842: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42843: LD_ADDR_VAR 0 3
42847: PUSH
42848: LD_INT 35
42850: PPUSH
42851: LD_VAR 0 1
42855: PPUSH
42856: CALL_OW 321
42860: PUSH
42861: LD_INT 2
42863: EQUAL
42864: ST_TO_ADDR
42865: GO 42868
42867: POP
// end ;
42868: LD_VAR 0 3
42872: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42873: LD_INT 0
42875: PPUSH
42876: PPUSH
42877: PPUSH
42878: PPUSH
42879: PPUSH
42880: PPUSH
42881: PPUSH
42882: PPUSH
42883: PPUSH
42884: PPUSH
42885: PPUSH
// result := false ;
42886: LD_ADDR_VAR 0 6
42890: PUSH
42891: LD_INT 0
42893: ST_TO_ADDR
// if btype = b_depot then
42894: LD_VAR 0 2
42898: PUSH
42899: LD_INT 0
42901: EQUAL
42902: IFFALSE 42914
// begin result := true ;
42904: LD_ADDR_VAR 0 6
42908: PUSH
42909: LD_INT 1
42911: ST_TO_ADDR
// exit ;
42912: GO 43740
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42914: LD_VAR 0 1
42918: NOT
42919: PUSH
42920: LD_VAR 0 1
42924: PPUSH
42925: CALL_OW 266
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: LD_INT 1
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: IN
42940: NOT
42941: OR
42942: PUSH
42943: LD_VAR 0 2
42947: NOT
42948: OR
42949: PUSH
42950: LD_VAR 0 5
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: LD_INT 1
42960: PUSH
42961: LD_INT 2
42963: PUSH
42964: LD_INT 3
42966: PUSH
42967: LD_INT 4
42969: PUSH
42970: LD_INT 5
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: IN
42981: NOT
42982: OR
42983: PUSH
42984: LD_VAR 0 3
42988: PPUSH
42989: LD_VAR 0 4
42993: PPUSH
42994: CALL_OW 488
42998: NOT
42999: OR
43000: IFFALSE 43004
// exit ;
43002: GO 43740
// side := GetSide ( depot ) ;
43004: LD_ADDR_VAR 0 9
43008: PUSH
43009: LD_VAR 0 1
43013: PPUSH
43014: CALL_OW 255
43018: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43019: LD_VAR 0 9
43023: PPUSH
43024: LD_VAR 0 2
43028: PPUSH
43029: CALL 42497 0 2
43033: NOT
43034: IFFALSE 43038
// exit ;
43036: GO 43740
// pom := GetBase ( depot ) ;
43038: LD_ADDR_VAR 0 10
43042: PUSH
43043: LD_VAR 0 1
43047: PPUSH
43048: CALL_OW 274
43052: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43053: LD_ADDR_VAR 0 11
43057: PUSH
43058: LD_VAR 0 2
43062: PPUSH
43063: LD_VAR 0 1
43067: PPUSH
43068: CALL_OW 248
43072: PPUSH
43073: CALL_OW 450
43077: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43078: LD_VAR 0 10
43082: PPUSH
43083: LD_INT 1
43085: PPUSH
43086: CALL_OW 275
43090: PUSH
43091: LD_VAR 0 11
43095: PUSH
43096: LD_INT 1
43098: ARRAY
43099: GREATEREQUAL
43100: PUSH
43101: LD_VAR 0 10
43105: PPUSH
43106: LD_INT 2
43108: PPUSH
43109: CALL_OW 275
43113: PUSH
43114: LD_VAR 0 11
43118: PUSH
43119: LD_INT 2
43121: ARRAY
43122: GREATEREQUAL
43123: AND
43124: PUSH
43125: LD_VAR 0 10
43129: PPUSH
43130: LD_INT 3
43132: PPUSH
43133: CALL_OW 275
43137: PUSH
43138: LD_VAR 0 11
43142: PUSH
43143: LD_INT 3
43145: ARRAY
43146: GREATEREQUAL
43147: AND
43148: NOT
43149: IFFALSE 43153
// exit ;
43151: GO 43740
// if GetBType ( depot ) = b_depot then
43153: LD_VAR 0 1
43157: PPUSH
43158: CALL_OW 266
43162: PUSH
43163: LD_INT 0
43165: EQUAL
43166: IFFALSE 43178
// dist := 28 else
43168: LD_ADDR_VAR 0 14
43172: PUSH
43173: LD_INT 28
43175: ST_TO_ADDR
43176: GO 43186
// dist := 36 ;
43178: LD_ADDR_VAR 0 14
43182: PUSH
43183: LD_INT 36
43185: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43186: LD_VAR 0 1
43190: PPUSH
43191: LD_VAR 0 3
43195: PPUSH
43196: LD_VAR 0 4
43200: PPUSH
43201: CALL_OW 297
43205: PUSH
43206: LD_VAR 0 14
43210: GREATER
43211: IFFALSE 43215
// exit ;
43213: GO 43740
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43215: LD_ADDR_VAR 0 12
43219: PUSH
43220: LD_VAR 0 2
43224: PPUSH
43225: LD_VAR 0 3
43229: PPUSH
43230: LD_VAR 0 4
43234: PPUSH
43235: LD_VAR 0 5
43239: PPUSH
43240: LD_VAR 0 1
43244: PPUSH
43245: CALL_OW 248
43249: PPUSH
43250: LD_INT 0
43252: PPUSH
43253: CALL 43745 0 6
43257: ST_TO_ADDR
// if not hexes then
43258: LD_VAR 0 12
43262: NOT
43263: IFFALSE 43267
// exit ;
43265: GO 43740
// hex := GetHexInfo ( x , y ) ;
43267: LD_ADDR_VAR 0 15
43271: PUSH
43272: LD_VAR 0 3
43276: PPUSH
43277: LD_VAR 0 4
43281: PPUSH
43282: CALL_OW 546
43286: ST_TO_ADDR
// if hex [ 1 ] then
43287: LD_VAR 0 15
43291: PUSH
43292: LD_INT 1
43294: ARRAY
43295: IFFALSE 43299
// exit ;
43297: GO 43740
// height := hex [ 2 ] ;
43299: LD_ADDR_VAR 0 13
43303: PUSH
43304: LD_VAR 0 15
43308: PUSH
43309: LD_INT 2
43311: ARRAY
43312: ST_TO_ADDR
// for i = 1 to hexes do
43313: LD_ADDR_VAR 0 7
43317: PUSH
43318: DOUBLE
43319: LD_INT 1
43321: DEC
43322: ST_TO_ADDR
43323: LD_VAR 0 12
43327: PUSH
43328: FOR_TO
43329: IFFALSE 43659
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43331: LD_VAR 0 12
43335: PUSH
43336: LD_VAR 0 7
43340: ARRAY
43341: PUSH
43342: LD_INT 1
43344: ARRAY
43345: PPUSH
43346: LD_VAR 0 12
43350: PUSH
43351: LD_VAR 0 7
43355: ARRAY
43356: PUSH
43357: LD_INT 2
43359: ARRAY
43360: PPUSH
43361: CALL_OW 488
43365: NOT
43366: PUSH
43367: LD_VAR 0 12
43371: PUSH
43372: LD_VAR 0 7
43376: ARRAY
43377: PUSH
43378: LD_INT 1
43380: ARRAY
43381: PPUSH
43382: LD_VAR 0 12
43386: PUSH
43387: LD_VAR 0 7
43391: ARRAY
43392: PUSH
43393: LD_INT 2
43395: ARRAY
43396: PPUSH
43397: CALL_OW 428
43401: PUSH
43402: LD_INT 0
43404: GREATER
43405: OR
43406: PUSH
43407: LD_VAR 0 12
43411: PUSH
43412: LD_VAR 0 7
43416: ARRAY
43417: PUSH
43418: LD_INT 1
43420: ARRAY
43421: PPUSH
43422: LD_VAR 0 12
43426: PUSH
43427: LD_VAR 0 7
43431: ARRAY
43432: PUSH
43433: LD_INT 2
43435: ARRAY
43436: PPUSH
43437: CALL_OW 351
43441: OR
43442: IFFALSE 43448
// exit ;
43444: POP
43445: POP
43446: GO 43740
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43448: LD_ADDR_VAR 0 8
43452: PUSH
43453: LD_VAR 0 12
43457: PUSH
43458: LD_VAR 0 7
43462: ARRAY
43463: PUSH
43464: LD_INT 1
43466: ARRAY
43467: PPUSH
43468: LD_VAR 0 12
43472: PUSH
43473: LD_VAR 0 7
43477: ARRAY
43478: PUSH
43479: LD_INT 2
43481: ARRAY
43482: PPUSH
43483: CALL_OW 546
43487: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43488: LD_VAR 0 8
43492: PUSH
43493: LD_INT 1
43495: ARRAY
43496: PUSH
43497: LD_VAR 0 8
43501: PUSH
43502: LD_INT 2
43504: ARRAY
43505: PUSH
43506: LD_VAR 0 13
43510: PUSH
43511: LD_INT 2
43513: PLUS
43514: GREATER
43515: OR
43516: PUSH
43517: LD_VAR 0 8
43521: PUSH
43522: LD_INT 2
43524: ARRAY
43525: PUSH
43526: LD_VAR 0 13
43530: PUSH
43531: LD_INT 2
43533: MINUS
43534: LESS
43535: OR
43536: PUSH
43537: LD_VAR 0 8
43541: PUSH
43542: LD_INT 3
43544: ARRAY
43545: PUSH
43546: LD_INT 0
43548: PUSH
43549: LD_INT 8
43551: PUSH
43552: LD_INT 9
43554: PUSH
43555: LD_INT 10
43557: PUSH
43558: LD_INT 11
43560: PUSH
43561: LD_INT 12
43563: PUSH
43564: LD_INT 13
43566: PUSH
43567: LD_INT 16
43569: PUSH
43570: LD_INT 17
43572: PUSH
43573: LD_INT 18
43575: PUSH
43576: LD_INT 19
43578: PUSH
43579: LD_INT 20
43581: PUSH
43582: LD_INT 21
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: IN
43600: NOT
43601: OR
43602: PUSH
43603: LD_VAR 0 8
43607: PUSH
43608: LD_INT 5
43610: ARRAY
43611: NOT
43612: OR
43613: PUSH
43614: LD_VAR 0 8
43618: PUSH
43619: LD_INT 6
43621: ARRAY
43622: PUSH
43623: LD_INT 1
43625: PUSH
43626: LD_INT 2
43628: PUSH
43629: LD_INT 7
43631: PUSH
43632: LD_INT 9
43634: PUSH
43635: LD_INT 10
43637: PUSH
43638: LD_INT 11
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: IN
43649: NOT
43650: OR
43651: IFFALSE 43657
// exit ;
43653: POP
43654: POP
43655: GO 43740
// end ;
43657: GO 43328
43659: POP
43660: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43661: LD_VAR 0 9
43665: PPUSH
43666: LD_VAR 0 3
43670: PPUSH
43671: LD_VAR 0 4
43675: PPUSH
43676: LD_INT 20
43678: PPUSH
43679: CALL 35663 0 4
43683: PUSH
43684: LD_INT 4
43686: ARRAY
43687: IFFALSE 43691
// exit ;
43689: GO 43740
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43691: LD_VAR 0 2
43695: PUSH
43696: LD_INT 29
43698: PUSH
43699: LD_INT 30
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: IN
43706: PUSH
43707: LD_VAR 0 3
43711: PPUSH
43712: LD_VAR 0 4
43716: PPUSH
43717: LD_VAR 0 9
43721: PPUSH
43722: CALL_OW 440
43726: NOT
43727: AND
43728: IFFALSE 43732
// exit ;
43730: GO 43740
// result := true ;
43732: LD_ADDR_VAR 0 6
43736: PUSH
43737: LD_INT 1
43739: ST_TO_ADDR
// end ;
43740: LD_VAR 0 6
43744: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43745: LD_INT 0
43747: PPUSH
43748: PPUSH
43749: PPUSH
43750: PPUSH
43751: PPUSH
43752: PPUSH
43753: PPUSH
43754: PPUSH
43755: PPUSH
43756: PPUSH
43757: PPUSH
43758: PPUSH
43759: PPUSH
43760: PPUSH
43761: PPUSH
43762: PPUSH
43763: PPUSH
43764: PPUSH
43765: PPUSH
43766: PPUSH
43767: PPUSH
43768: PPUSH
43769: PPUSH
43770: PPUSH
43771: PPUSH
43772: PPUSH
43773: PPUSH
43774: PPUSH
43775: PPUSH
43776: PPUSH
43777: PPUSH
43778: PPUSH
43779: PPUSH
43780: PPUSH
43781: PPUSH
43782: PPUSH
43783: PPUSH
43784: PPUSH
43785: PPUSH
43786: PPUSH
43787: PPUSH
43788: PPUSH
43789: PPUSH
43790: PPUSH
43791: PPUSH
43792: PPUSH
43793: PPUSH
43794: PPUSH
43795: PPUSH
43796: PPUSH
43797: PPUSH
43798: PPUSH
43799: PPUSH
43800: PPUSH
43801: PPUSH
43802: PPUSH
43803: PPUSH
43804: PPUSH
// result = [ ] ;
43805: LD_ADDR_VAR 0 7
43809: PUSH
43810: EMPTY
43811: ST_TO_ADDR
// temp_list = [ ] ;
43812: LD_ADDR_VAR 0 9
43816: PUSH
43817: EMPTY
43818: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43819: LD_VAR 0 4
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: LD_INT 1
43829: PUSH
43830: LD_INT 2
43832: PUSH
43833: LD_INT 3
43835: PUSH
43836: LD_INT 4
43838: PUSH
43839: LD_INT 5
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: IN
43850: NOT
43851: PUSH
43852: LD_VAR 0 1
43856: PUSH
43857: LD_INT 0
43859: PUSH
43860: LD_INT 1
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: IN
43867: PUSH
43868: LD_VAR 0 5
43872: PUSH
43873: LD_INT 1
43875: PUSH
43876: LD_INT 2
43878: PUSH
43879: LD_INT 3
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: LIST
43886: IN
43887: NOT
43888: AND
43889: OR
43890: IFFALSE 43894
// exit ;
43892: GO 62285
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43894: LD_VAR 0 1
43898: PUSH
43899: LD_INT 6
43901: PUSH
43902: LD_INT 7
43904: PUSH
43905: LD_INT 8
43907: PUSH
43908: LD_INT 13
43910: PUSH
43911: LD_INT 12
43913: PUSH
43914: LD_INT 15
43916: PUSH
43917: LD_INT 11
43919: PUSH
43920: LD_INT 14
43922: PUSH
43923: LD_INT 10
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: IN
43937: IFFALSE 43947
// btype = b_lab ;
43939: LD_ADDR_VAR 0 1
43943: PUSH
43944: LD_INT 6
43946: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43947: LD_VAR 0 6
43951: PUSH
43952: LD_INT 0
43954: PUSH
43955: LD_INT 1
43957: PUSH
43958: LD_INT 2
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: LIST
43965: IN
43966: NOT
43967: PUSH
43968: LD_VAR 0 1
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: LD_INT 2
43981: PUSH
43982: LD_INT 3
43984: PUSH
43985: LD_INT 6
43987: PUSH
43988: LD_INT 36
43990: PUSH
43991: LD_INT 4
43993: PUSH
43994: LD_INT 5
43996: PUSH
43997: LD_INT 31
43999: PUSH
44000: LD_INT 32
44002: PUSH
44003: LD_INT 33
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: IN
44019: NOT
44020: PUSH
44021: LD_VAR 0 6
44025: PUSH
44026: LD_INT 1
44028: EQUAL
44029: AND
44030: OR
44031: PUSH
44032: LD_VAR 0 1
44036: PUSH
44037: LD_INT 2
44039: PUSH
44040: LD_INT 3
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: IN
44047: NOT
44048: PUSH
44049: LD_VAR 0 6
44053: PUSH
44054: LD_INT 2
44056: EQUAL
44057: AND
44058: OR
44059: IFFALSE 44069
// mode = 0 ;
44061: LD_ADDR_VAR 0 6
44065: PUSH
44066: LD_INT 0
44068: ST_TO_ADDR
// case mode of 0 :
44069: LD_VAR 0 6
44073: PUSH
44074: LD_INT 0
44076: DOUBLE
44077: EQUAL
44078: IFTRUE 44082
44080: GO 55535
44082: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44083: LD_ADDR_VAR 0 11
44087: PUSH
44088: LD_INT 0
44090: PUSH
44091: LD_INT 0
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: LD_INT 1
44103: NEG
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 1
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 1
44121: PUSH
44122: LD_INT 1
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 0
44131: PUSH
44132: LD_INT 1
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 1
44141: NEG
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 1
44152: NEG
44153: PUSH
44154: LD_INT 1
44156: NEG
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 1
44164: NEG
44165: PUSH
44166: LD_INT 2
44168: NEG
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 0
44176: PUSH
44177: LD_INT 2
44179: NEG
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 1
44187: PUSH
44188: LD_INT 1
44190: NEG
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 1
44198: PUSH
44199: LD_INT 2
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 0
44208: PUSH
44209: LD_INT 2
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: LD_INT 1
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 1
44229: PUSH
44230: LD_INT 3
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 0
44239: PUSH
44240: LD_INT 3
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 1
44249: NEG
44250: PUSH
44251: LD_INT 2
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44276: LD_ADDR_VAR 0 12
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: LD_INT 1
44296: NEG
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 1
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 1
44314: PUSH
44315: LD_INT 1
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: LD_INT 1
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 1
44334: NEG
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: LD_INT 1
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 2
44368: PUSH
44369: LD_INT 0
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 2
44378: PUSH
44379: LD_INT 1
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: LD_INT 1
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 2
44399: NEG
44400: PUSH
44401: LD_INT 0
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 2
44410: NEG
44411: PUSH
44412: LD_INT 1
44414: NEG
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 2
44422: NEG
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 3
44433: NEG
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 3
44444: NEG
44445: PUSH
44446: LD_INT 1
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44472: LD_ADDR_VAR 0 13
44476: PUSH
44477: LD_INT 0
44479: PUSH
44480: LD_INT 0
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 1
44500: PUSH
44501: LD_INT 0
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 1
44510: PUSH
44511: LD_INT 1
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: LD_INT 1
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 1
44530: NEG
44531: PUSH
44532: LD_INT 0
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 1
44541: NEG
44542: PUSH
44543: LD_INT 1
44545: NEG
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 1
44553: NEG
44554: PUSH
44555: LD_INT 2
44557: NEG
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 2
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 2
44575: PUSH
44576: LD_INT 2
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: PUSH
44586: LD_INT 2
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 2
44595: NEG
44596: PUSH
44597: LD_INT 1
44599: NEG
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 2
44607: NEG
44608: PUSH
44609: LD_INT 2
44611: NEG
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 2
44619: NEG
44620: PUSH
44621: LD_INT 3
44623: NEG
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 3
44631: NEG
44632: PUSH
44633: LD_INT 2
44635: NEG
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 3
44643: NEG
44644: PUSH
44645: LD_INT 3
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44671: LD_ADDR_VAR 0 14
44675: PUSH
44676: LD_INT 0
44678: PUSH
44679: LD_INT 0
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: LD_INT 0
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: LD_INT 1
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: NEG
44730: PUSH
44731: LD_INT 0
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 1
44740: NEG
44741: PUSH
44742: LD_INT 1
44744: NEG
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 1
44752: NEG
44753: PUSH
44754: LD_INT 2
44756: NEG
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: LD_INT 2
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 1
44786: PUSH
44787: LD_INT 2
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: LD_INT 2
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: LD_INT 1
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 1
44817: NEG
44818: PUSH
44819: LD_INT 3
44821: NEG
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: LD_INT 3
44832: NEG
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 1
44840: PUSH
44841: LD_INT 2
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44867: LD_ADDR_VAR 0 15
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: LD_INT 0
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 0
44884: PUSH
44885: LD_INT 1
44887: NEG
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 1
44895: PUSH
44896: LD_INT 0
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 1
44905: PUSH
44906: LD_INT 1
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: LD_INT 1
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 1
44925: NEG
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 1
44936: NEG
44937: PUSH
44938: LD_INT 1
44940: NEG
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: LD_INT 1
44951: NEG
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 2
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 2
44969: PUSH
44970: LD_INT 1
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 1
44979: NEG
44980: PUSH
44981: LD_INT 1
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 2
44990: NEG
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 2
45001: NEG
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 2
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 3
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 3
45034: PUSH
45035: LD_INT 1
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45060: LD_ADDR_VAR 0 16
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: LD_INT 1
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 1
45088: PUSH
45089: LD_INT 0
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: NEG
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 1
45129: NEG
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 1
45141: NEG
45142: PUSH
45143: LD_INT 2
45145: NEG
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 2
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 2
45163: PUSH
45164: LD_INT 2
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: PUSH
45174: LD_INT 2
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 2
45183: NEG
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 2
45195: NEG
45196: PUSH
45197: LD_INT 2
45199: NEG
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 3
45207: PUSH
45208: LD_INT 2
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 3
45217: PUSH
45218: LD_INT 3
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 2
45227: PUSH
45228: LD_INT 3
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45253: LD_ADDR_VAR 0 17
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 0
45270: PUSH
45271: LD_INT 1
45273: NEG
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 1
45281: PUSH
45282: LD_INT 0
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 1
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 0
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: NEG
45312: PUSH
45313: LD_INT 0
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: LD_INT 1
45326: NEG
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 1
45334: NEG
45335: PUSH
45336: LD_INT 2
45338: NEG
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: LD_INT 2
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 1
45357: PUSH
45358: LD_INT 1
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 2
45368: PUSH
45369: LD_INT 0
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 2
45378: PUSH
45379: LD_INT 1
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 2
45388: PUSH
45389: LD_INT 2
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 1
45398: PUSH
45399: LD_INT 2
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: LD_INT 2
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 1
45418: NEG
45419: PUSH
45420: LD_INT 1
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 2
45429: NEG
45430: PUSH
45431: LD_INT 0
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 2
45440: NEG
45441: PUSH
45442: LD_INT 1
45444: NEG
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 2
45452: NEG
45453: PUSH
45454: LD_INT 2
45456: NEG
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45483: LD_ADDR_VAR 0 18
45487: PUSH
45488: LD_INT 0
45490: PUSH
45491: LD_INT 0
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: LD_INT 1
45503: NEG
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 1
45511: PUSH
45512: LD_INT 0
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: LD_INT 1
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 1
45552: NEG
45553: PUSH
45554: LD_INT 1
45556: NEG
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 1
45564: NEG
45565: PUSH
45566: LD_INT 2
45568: NEG
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: LD_INT 2
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 1
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 2
45598: PUSH
45599: LD_INT 0
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 2
45608: PUSH
45609: LD_INT 1
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 2
45618: PUSH
45619: LD_INT 2
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 1
45628: PUSH
45629: LD_INT 2
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: LD_INT 2
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: LD_INT 1
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 2
45659: NEG
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 2
45670: NEG
45671: PUSH
45672: LD_INT 1
45674: NEG
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 2
45682: NEG
45683: PUSH
45684: LD_INT 2
45686: NEG
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45713: LD_ADDR_VAR 0 19
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: LD_INT 1
45733: NEG
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 1
45751: PUSH
45752: LD_INT 1
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 0
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 1
45771: NEG
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 1
45782: NEG
45783: PUSH
45784: LD_INT 1
45786: NEG
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 1
45794: NEG
45795: PUSH
45796: LD_INT 2
45798: NEG
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: LD_INT 2
45809: NEG
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: LD_INT 1
45820: NEG
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 2
45828: PUSH
45829: LD_INT 0
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 2
45838: PUSH
45839: LD_INT 1
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 2
45848: PUSH
45849: LD_INT 2
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: PUSH
45859: LD_INT 2
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 0
45868: PUSH
45869: LD_INT 2
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 1
45878: NEG
45879: PUSH
45880: LD_INT 1
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 2
45889: NEG
45890: PUSH
45891: LD_INT 0
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 2
45900: NEG
45901: PUSH
45902: LD_INT 1
45904: NEG
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 2
45912: NEG
45913: PUSH
45914: LD_INT 2
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45943: LD_ADDR_VAR 0 20
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 0
45960: PUSH
45961: LD_INT 1
45963: NEG
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 1
45971: PUSH
45972: LD_INT 0
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: LD_INT 1
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: LD_INT 2
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: LD_INT 2
46039: NEG
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 2
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 2
46068: PUSH
46069: LD_INT 1
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 2
46078: PUSH
46079: LD_INT 2
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: LD_INT 2
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: LD_INT 2
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 1
46108: NEG
46109: PUSH
46110: LD_INT 1
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 2
46119: NEG
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 2
46130: NEG
46131: PUSH
46132: LD_INT 1
46134: NEG
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 2
46142: NEG
46143: PUSH
46144: LD_INT 2
46146: NEG
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46173: LD_ADDR_VAR 0 21
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: LD_INT 1
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 1
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: LD_INT 1
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: LD_INT 0
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: LD_INT 2
46258: NEG
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: LD_INT 2
46269: NEG
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 1
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 2
46288: PUSH
46289: LD_INT 0
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 2
46298: PUSH
46299: LD_INT 1
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 2
46308: PUSH
46309: LD_INT 2
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: LD_INT 2
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 0
46328: PUSH
46329: LD_INT 2
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 1
46338: NEG
46339: PUSH
46340: LD_INT 1
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 2
46349: NEG
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 2
46360: NEG
46361: PUSH
46362: LD_INT 1
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 2
46372: NEG
46373: PUSH
46374: LD_INT 2
46376: NEG
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46403: LD_ADDR_VAR 0 22
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: LD_INT 0
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: LD_INT 1
46423: NEG
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 1
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 1
46441: PUSH
46442: LD_INT 1
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: LD_INT 1
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 1
46461: NEG
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 1
46472: NEG
46473: PUSH
46474: LD_INT 1
46476: NEG
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 1
46484: NEG
46485: PUSH
46486: LD_INT 2
46488: NEG
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: LD_INT 2
46499: NEG
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 1
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 2
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 2
46528: PUSH
46529: LD_INT 1
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 2
46538: PUSH
46539: LD_INT 2
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 1
46548: PUSH
46549: LD_INT 2
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: LD_INT 2
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 1
46568: NEG
46569: PUSH
46570: LD_INT 1
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 2
46579: NEG
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 2
46590: NEG
46591: PUSH
46592: LD_INT 1
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 2
46602: NEG
46603: PUSH
46604: LD_INT 2
46606: NEG
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46633: LD_ADDR_VAR 0 23
46637: PUSH
46638: LD_INT 0
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: LD_INT 1
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: LD_INT 0
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 0
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: NEG
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 1
46702: NEG
46703: PUSH
46704: LD_INT 1
46706: NEG
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 1
46714: NEG
46715: PUSH
46716: LD_INT 2
46718: NEG
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: LD_INT 2
46729: NEG
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 1
46737: PUSH
46738: LD_INT 1
46740: NEG
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 2
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 2
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 2
46768: PUSH
46769: LD_INT 2
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 1
46778: PUSH
46779: LD_INT 2
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: LD_INT 2
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 1
46798: NEG
46799: PUSH
46800: LD_INT 1
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 2
46809: NEG
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 2
46820: NEG
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 2
46832: NEG
46833: PUSH
46834: LD_INT 2
46836: NEG
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 2
46844: NEG
46845: PUSH
46846: LD_INT 3
46848: NEG
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 1
46856: NEG
46857: PUSH
46858: LD_INT 3
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: PUSH
46869: LD_INT 2
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 2
46879: PUSH
46880: LD_INT 1
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46913: LD_ADDR_VAR 0 24
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: LD_INT 0
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: LD_INT 1
46933: NEG
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 1
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 1
46951: PUSH
46952: LD_INT 1
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 0
46961: PUSH
46962: LD_INT 1
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: NEG
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 1
46982: NEG
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: LD_INT 2
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: LD_INT 2
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 2
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 2
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 2
47048: PUSH
47049: LD_INT 2
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: LD_INT 2
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: LD_INT 2
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 1
47078: NEG
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 2
47089: NEG
47090: PUSH
47091: LD_INT 0
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 2
47100: NEG
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 2
47112: NEG
47113: PUSH
47114: LD_INT 2
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: PUSH
47125: LD_INT 2
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 2
47135: PUSH
47136: LD_INT 1
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 3
47146: PUSH
47147: LD_INT 1
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 3
47156: PUSH
47157: LD_INT 2
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47189: LD_ADDR_VAR 0 25
47193: PUSH
47194: LD_INT 0
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: LD_INT 1
47209: NEG
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 1
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 1
47227: PUSH
47228: LD_INT 1
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: NEG
47248: PUSH
47249: LD_INT 0
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: NEG
47259: PUSH
47260: LD_INT 1
47262: NEG
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 1
47270: NEG
47271: PUSH
47272: LD_INT 2
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: LD_INT 2
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: LD_INT 1
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 2
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 2
47314: PUSH
47315: LD_INT 1
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 2
47324: PUSH
47325: LD_INT 2
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: LD_INT 2
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: LD_INT 2
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 2
47365: NEG
47366: PUSH
47367: LD_INT 0
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 2
47376: NEG
47377: PUSH
47378: LD_INT 1
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 2
47388: NEG
47389: PUSH
47390: LD_INT 2
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 3
47400: PUSH
47401: LD_INT 1
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 3
47410: PUSH
47411: LD_INT 2
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 2
47420: PUSH
47421: LD_INT 3
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: LD_INT 3
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47463: LD_ADDR_VAR 0 26
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: LD_INT 0
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: LD_INT 1
47483: NEG
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 1
47491: PUSH
47492: LD_INT 0
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: LD_INT 1
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: LD_INT 0
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 1
47532: NEG
47533: PUSH
47534: LD_INT 1
47536: NEG
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 1
47544: NEG
47545: PUSH
47546: LD_INT 2
47548: NEG
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 0
47556: PUSH
47557: LD_INT 2
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 2
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 2
47588: PUSH
47589: LD_INT 1
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 2
47598: PUSH
47599: LD_INT 2
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 1
47608: PUSH
47609: LD_INT 2
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 0
47618: PUSH
47619: LD_INT 2
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: NEG
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 2
47639: NEG
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 2
47650: NEG
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 2
47662: NEG
47663: PUSH
47664: LD_INT 2
47666: NEG
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 2
47674: PUSH
47675: LD_INT 3
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: LD_INT 3
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 1
47694: NEG
47695: PUSH
47696: LD_INT 2
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 2
47705: NEG
47706: PUSH
47707: LD_INT 1
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47739: LD_ADDR_VAR 0 27
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: LD_INT 1
47759: NEG
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: LD_INT 0
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: LD_INT 1
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 1
47808: NEG
47809: PUSH
47810: LD_INT 1
47812: NEG
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: LD_INT 2
47824: NEG
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: LD_INT 2
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: LD_INT 1
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 2
47854: PUSH
47855: LD_INT 0
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 2
47864: PUSH
47865: LD_INT 1
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 2
47874: PUSH
47875: LD_INT 2
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: LD_INT 2
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: LD_INT 2
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 1
47904: NEG
47905: PUSH
47906: LD_INT 1
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 2
47915: NEG
47916: PUSH
47917: LD_INT 0
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 2
47926: NEG
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 2
47938: NEG
47939: PUSH
47940: LD_INT 2
47942: NEG
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 1
47950: NEG
47951: PUSH
47952: LD_INT 2
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 2
47961: NEG
47962: PUSH
47963: LD_INT 1
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 3
47972: NEG
47973: PUSH
47974: LD_INT 1
47976: NEG
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 3
47984: NEG
47985: PUSH
47986: LD_INT 2
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48019: LD_ADDR_VAR 0 28
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 0
48036: PUSH
48037: LD_INT 1
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: LD_INT 0
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: LD_INT 1
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 1
48077: NEG
48078: PUSH
48079: LD_INT 0
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: NEG
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 1
48100: NEG
48101: PUSH
48102: LD_INT 2
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: LD_INT 2
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: LD_INT 1
48126: NEG
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 2
48134: PUSH
48135: LD_INT 0
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 2
48144: PUSH
48145: LD_INT 1
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 2
48154: PUSH
48155: LD_INT 2
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 1
48164: PUSH
48165: LD_INT 2
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: LD_INT 2
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: NEG
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 2
48195: NEG
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 2
48206: NEG
48207: PUSH
48208: LD_INT 1
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 2
48218: NEG
48219: PUSH
48220: LD_INT 2
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 2
48230: NEG
48231: PUSH
48232: LD_INT 3
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 1
48242: NEG
48243: PUSH
48244: LD_INT 3
48246: NEG
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 3
48254: NEG
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 3
48266: NEG
48267: PUSH
48268: LD_INT 2
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48301: LD_ADDR_VAR 0 29
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: LD_INT 0
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: LD_INT 1
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 1
48359: NEG
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: LD_INT 1
48374: NEG
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 1
48382: NEG
48383: PUSH
48384: LD_INT 2
48386: NEG
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: LD_INT 2
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: LD_INT 1
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 2
48416: PUSH
48417: LD_INT 0
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 2
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 1
48436: PUSH
48437: LD_INT 2
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: LD_INT 2
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: LD_INT 1
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 2
48467: NEG
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 2
48479: NEG
48480: PUSH
48481: LD_INT 2
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 2
48491: NEG
48492: PUSH
48493: LD_INT 3
48495: NEG
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 2
48503: PUSH
48504: LD_INT 1
48506: NEG
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 3
48514: PUSH
48515: LD_INT 1
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 1
48524: PUSH
48525: LD_INT 3
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: LD_INT 2
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 3
48545: NEG
48546: PUSH
48547: LD_INT 2
48549: NEG
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48580: LD_ADDR_VAR 0 30
48584: PUSH
48585: LD_INT 0
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: PUSH
48619: LD_INT 1
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 0
48628: PUSH
48629: LD_INT 1
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 1
48638: NEG
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: LD_INT 2
48665: NEG
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: LD_INT 2
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 2
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 2
48705: PUSH
48706: LD_INT 1
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 2
48715: PUSH
48716: LD_INT 2
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 1
48725: PUSH
48726: LD_INT 2
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 2
48746: NEG
48747: PUSH
48748: LD_INT 0
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 2
48757: NEG
48758: PUSH
48759: LD_INT 1
48761: NEG
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: LD_INT 3
48773: NEG
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 1
48781: PUSH
48782: LD_INT 2
48784: NEG
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 3
48792: PUSH
48793: LD_INT 2
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 2
48802: PUSH
48803: LD_INT 3
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 2
48812: NEG
48813: PUSH
48814: LD_INT 1
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 3
48823: NEG
48824: PUSH
48825: LD_INT 1
48827: NEG
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48858: LD_ADDR_VAR 0 31
48862: PUSH
48863: LD_INT 0
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: LD_INT 0
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: LD_INT 1
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: LD_INT 1
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 1
48916: NEG
48917: PUSH
48918: LD_INT 0
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 1
48927: NEG
48928: PUSH
48929: LD_INT 1
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 1
48939: NEG
48940: PUSH
48941: LD_INT 2
48943: NEG
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 2
48962: PUSH
48963: LD_INT 0
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 2
48972: PUSH
48973: LD_INT 1
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 2
48982: PUSH
48983: LD_INT 2
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 1
48992: PUSH
48993: LD_INT 2
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: LD_INT 2
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: NEG
49013: PUSH
49014: LD_INT 1
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 2
49023: NEG
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 2
49035: NEG
49036: PUSH
49037: LD_INT 2
49039: NEG
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 2
49047: NEG
49048: PUSH
49049: LD_INT 3
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 2
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 3
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: LD_INT 3
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: LD_INT 2
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 3
49101: NEG
49102: PUSH
49103: LD_INT 2
49105: NEG
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49136: LD_ADDR_VAR 0 32
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 1
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: LD_INT 1
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 1
49194: NEG
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 1
49205: NEG
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: LD_INT 2
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 0
49229: PUSH
49230: LD_INT 2
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 1
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 2
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 2
49261: PUSH
49262: LD_INT 2
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 0
49281: PUSH
49282: LD_INT 2
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 1
49291: NEG
49292: PUSH
49293: LD_INT 1
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 2
49302: NEG
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 2
49313: NEG
49314: PUSH
49315: LD_INT 1
49317: NEG
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 1
49325: NEG
49326: PUSH
49327: LD_INT 3
49329: NEG
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: PUSH
49338: LD_INT 2
49340: NEG
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 3
49348: PUSH
49349: LD_INT 2
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 2
49358: PUSH
49359: LD_INT 3
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 2
49368: NEG
49369: PUSH
49370: LD_INT 1
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 3
49379: NEG
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49414: LD_ADDR_VAR 0 33
49418: PUSH
49419: LD_INT 0
49421: PUSH
49422: LD_INT 0
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 0
49431: PUSH
49432: LD_INT 1
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 1
49442: PUSH
49443: LD_INT 0
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 1
49452: PUSH
49453: LD_INT 1
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 0
49462: PUSH
49463: LD_INT 1
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 1
49472: NEG
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 1
49483: NEG
49484: PUSH
49485: LD_INT 1
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 1
49495: NEG
49496: PUSH
49497: LD_INT 2
49499: NEG
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 1
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 2
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 2
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 1
49538: PUSH
49539: LD_INT 2
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 0
49548: PUSH
49549: LD_INT 2
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 1
49558: NEG
49559: PUSH
49560: LD_INT 1
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 2
49569: NEG
49570: PUSH
49571: LD_INT 0
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 2
49580: NEG
49581: PUSH
49582: LD_INT 1
49584: NEG
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 2
49592: NEG
49593: PUSH
49594: LD_INT 2
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 2
49604: NEG
49605: PUSH
49606: LD_INT 3
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 2
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 3
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: LD_INT 3
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 1
49647: NEG
49648: PUSH
49649: LD_INT 2
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 3
49658: NEG
49659: PUSH
49660: LD_INT 2
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49693: LD_ADDR_VAR 0 34
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: LD_INT 1
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 1
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: LD_INT 1
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 1
49762: NEG
49763: PUSH
49764: LD_INT 1
49766: NEG
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: LD_INT 2
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: LD_INT 2
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 2
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 2
49818: PUSH
49819: LD_INT 2
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: LD_INT 2
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 1
49838: NEG
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 2
49849: NEG
49850: PUSH
49851: LD_INT 0
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 2
49860: NEG
49861: PUSH
49862: LD_INT 1
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 2
49872: NEG
49873: PUSH
49874: LD_INT 2
49876: NEG
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 1
49884: NEG
49885: PUSH
49886: LD_INT 3
49888: NEG
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: LD_INT 2
49899: NEG
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 3
49907: PUSH
49908: LD_INT 2
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 2
49917: PUSH
49918: LD_INT 3
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 2
49927: NEG
49928: PUSH
49929: LD_INT 1
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 3
49938: NEG
49939: PUSH
49940: LD_INT 1
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49973: LD_ADDR_VAR 0 35
49977: PUSH
49978: LD_INT 0
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: LD_INT 1
49993: NEG
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: NEG
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 1
50042: NEG
50043: PUSH
50044: LD_INT 1
50046: NEG
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 2
50054: PUSH
50055: LD_INT 1
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 2
50064: NEG
50065: PUSH
50066: LD_INT 1
50068: NEG
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50085: LD_ADDR_VAR 0 36
50089: PUSH
50090: LD_INT 0
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 0
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 1
50113: PUSH
50114: LD_INT 0
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: LD_INT 1
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 1
50143: NEG
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 1
50154: NEG
50155: PUSH
50156: LD_INT 1
50158: NEG
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: LD_INT 2
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 1
50178: PUSH
50179: LD_INT 2
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50197: LD_ADDR_VAR 0 37
50201: PUSH
50202: LD_INT 0
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: LD_INT 1
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 1
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: NEG
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: LD_INT 1
50270: NEG
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 1
50278: PUSH
50279: LD_INT 1
50281: NEG
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50309: LD_ADDR_VAR 0 38
50313: PUSH
50314: LD_INT 0
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 1
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 1
50367: NEG
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 2
50390: PUSH
50391: LD_INT 1
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 2
50400: NEG
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50421: LD_ADDR_VAR 0 39
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: LD_INT 1
50441: NEG
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 1
50490: NEG
50491: PUSH
50492: LD_INT 1
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 1
50502: NEG
50503: PUSH
50504: LD_INT 2
50506: NEG
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 1
50514: PUSH
50515: LD_INT 2
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50533: LD_ADDR_VAR 0 40
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 0
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 1
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 1
50571: PUSH
50572: LD_INT 1
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 0
50581: PUSH
50582: LD_INT 1
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: NEG
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 1
50602: NEG
50603: PUSH
50604: LD_INT 1
50606: NEG
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 1
50614: PUSH
50615: LD_INT 1
50617: NEG
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50645: LD_ADDR_VAR 0 41
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 1
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 1
50683: PUSH
50684: LD_INT 1
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: LD_INT 1
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 1
50703: NEG
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: LD_INT 1
50718: NEG
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 1
50726: NEG
50727: PUSH
50728: LD_INT 2
50730: NEG
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 2
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 2
50759: PUSH
50760: LD_INT 1
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 2
50769: PUSH
50770: LD_INT 2
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 1
50779: PUSH
50780: LD_INT 2
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 1
50789: NEG
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 2
50800: NEG
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 2
50811: NEG
50812: PUSH
50813: LD_INT 1
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 2
50823: NEG
50824: PUSH
50825: LD_INT 2
50827: NEG
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 2
50835: NEG
50836: PUSH
50837: LD_INT 3
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 2
50847: PUSH
50848: LD_INT 1
50850: NEG
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 3
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 3
50868: PUSH
50869: LD_INT 1
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 3
50878: PUSH
50879: LD_INT 2
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 3
50888: PUSH
50889: LD_INT 3
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 2
50898: PUSH
50899: LD_INT 3
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 2
50908: NEG
50909: PUSH
50910: LD_INT 1
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 3
50919: NEG
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 3
50930: NEG
50931: PUSH
50932: LD_INT 1
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 3
50942: NEG
50943: PUSH
50944: LD_INT 2
50946: NEG
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 3
50954: NEG
50955: PUSH
50956: LD_INT 3
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50995: LD_ADDR_VAR 0 42
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: LD_INT 0
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 0
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 1
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 1
51033: PUSH
51034: LD_INT 1
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 1
51053: NEG
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: LD_INT 2
51080: NEG
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: LD_INT 2
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 2
51110: PUSH
51111: LD_INT 1
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 2
51120: PUSH
51121: LD_INT 2
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 1
51130: PUSH
51131: LD_INT 2
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: LD_INT 2
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 2
51161: NEG
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 2
51173: NEG
51174: PUSH
51175: LD_INT 2
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 2
51185: NEG
51186: PUSH
51187: LD_INT 3
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: NEG
51198: PUSH
51199: LD_INT 3
51201: NEG
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: LD_INT 3
51212: NEG
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: LD_INT 2
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 3
51231: PUSH
51232: LD_INT 2
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 3
51241: PUSH
51242: LD_INT 3
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 2
51251: PUSH
51252: LD_INT 3
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 1
51261: PUSH
51262: LD_INT 3
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 0
51271: PUSH
51272: LD_INT 3
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: LD_INT 2
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 3
51292: NEG
51293: PUSH
51294: LD_INT 2
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 3
51304: NEG
51305: PUSH
51306: LD_INT 3
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51345: LD_ADDR_VAR 0 43
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: LD_INT 0
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: LD_INT 1
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 0
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 1
51403: NEG
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: NEG
51415: PUSH
51416: LD_INT 1
51418: NEG
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 1
51426: NEG
51427: PUSH
51428: LD_INT 2
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: LD_INT 2
51441: NEG
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: LD_INT 1
51452: NEG
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 2
51460: PUSH
51461: LD_INT 0
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 2
51470: PUSH
51471: LD_INT 1
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: LD_INT 2
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: LD_INT 2
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: LD_INT 1
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 2
51511: NEG
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 2
51522: NEG
51523: PUSH
51524: LD_INT 1
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 1
51534: NEG
51535: PUSH
51536: LD_INT 3
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: LD_INT 3
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 1
51557: PUSH
51558: LD_INT 2
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 2
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 3
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 3
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: PUSH
51600: LD_INT 3
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: LD_INT 3
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 1
51619: NEG
51620: PUSH
51621: LD_INT 2
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 2
51630: NEG
51631: PUSH
51632: LD_INT 1
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 3
51641: NEG
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 3
51652: NEG
51653: PUSH
51654: LD_INT 1
51656: NEG
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51693: LD_ADDR_VAR 0 44
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: LD_INT 1
51713: NEG
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 1
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: LD_INT 1
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 1
51751: NEG
51752: PUSH
51753: LD_INT 0
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 1
51762: NEG
51763: PUSH
51764: LD_INT 1
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 1
51774: NEG
51775: PUSH
51776: LD_INT 2
51778: NEG
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: PUSH
51787: LD_INT 1
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 2
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 2
51807: PUSH
51808: LD_INT 1
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 2
51817: PUSH
51818: LD_INT 2
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: LD_INT 2
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 1
51837: NEG
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 2
51848: NEG
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 2
51859: NEG
51860: PUSH
51861: LD_INT 1
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 2
51871: NEG
51872: PUSH
51873: LD_INT 2
51875: NEG
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 2
51883: NEG
51884: PUSH
51885: LD_INT 3
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 2
51895: PUSH
51896: LD_INT 1
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 3
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 3
51916: PUSH
51917: LD_INT 1
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 3
51926: PUSH
51927: LD_INT 2
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 3
51936: PUSH
51937: LD_INT 3
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 2
51946: PUSH
51947: LD_INT 3
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 2
51956: NEG
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 3
51967: NEG
51968: PUSH
51969: LD_INT 0
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 3
51978: NEG
51979: PUSH
51980: LD_INT 1
51982: NEG
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 3
51990: NEG
51991: PUSH
51992: LD_INT 2
51994: NEG
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 3
52002: NEG
52003: PUSH
52004: LD_INT 3
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52043: LD_ADDR_VAR 0 45
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: LD_INT 0
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: LD_INT 1
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 1
52101: NEG
52102: PUSH
52103: LD_INT 0
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 1
52112: NEG
52113: PUSH
52114: LD_INT 1
52116: NEG
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: LD_INT 2
52128: NEG
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: LD_INT 2
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 2
52158: PUSH
52159: LD_INT 1
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 2
52168: PUSH
52169: LD_INT 2
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 1
52178: PUSH
52179: LD_INT 2
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 0
52188: PUSH
52189: LD_INT 2
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 1
52198: NEG
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 2
52209: NEG
52210: PUSH
52211: LD_INT 1
52213: NEG
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 2
52221: NEG
52222: PUSH
52223: LD_INT 2
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 2
52233: NEG
52234: PUSH
52235: LD_INT 3
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: LD_INT 3
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: LD_INT 3
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 1
52268: PUSH
52269: LD_INT 2
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 3
52279: PUSH
52280: LD_INT 2
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 3
52289: PUSH
52290: LD_INT 3
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 2
52299: PUSH
52300: LD_INT 3
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 1
52309: PUSH
52310: LD_INT 3
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 0
52319: PUSH
52320: LD_INT 3
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 1
52329: NEG
52330: PUSH
52331: LD_INT 2
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 3
52340: NEG
52341: PUSH
52342: LD_INT 2
52344: NEG
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 3
52352: NEG
52353: PUSH
52354: LD_INT 3
52356: NEG
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52393: LD_ADDR_VAR 0 46
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: LD_INT 1
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 1
52474: NEG
52475: PUSH
52476: LD_INT 2
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: LD_INT 2
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 2
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 2
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: LD_INT 2
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: LD_INT 2
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 2
52559: NEG
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 2
52570: NEG
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: LD_INT 3
52586: NEG
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: LD_INT 3
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: LD_INT 2
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 2
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 3
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 3
52637: PUSH
52638: LD_INT 1
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 1
52647: PUSH
52648: LD_INT 3
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: LD_INT 3
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 1
52667: NEG
52668: PUSH
52669: LD_INT 2
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 2
52678: NEG
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 3
52689: NEG
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 3
52700: NEG
52701: PUSH
52702: LD_INT 1
52704: NEG
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52741: LD_ADDR_VAR 0 47
52745: PUSH
52746: LD_INT 0
52748: PUSH
52749: LD_INT 0
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: LD_INT 1
52761: NEG
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 1
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 1
52779: PUSH
52780: LD_INT 1
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: LD_INT 1
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 1
52799: NEG
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: LD_INT 1
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: LD_INT 2
52826: NEG
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 0
52834: PUSH
52835: LD_INT 2
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 1
52845: PUSH
52846: LD_INT 1
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 2
52856: NEG
52857: PUSH
52858: LD_INT 1
52860: NEG
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 2
52868: NEG
52869: PUSH
52870: LD_INT 2
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52892: LD_ADDR_VAR 0 48
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: LD_INT 0
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: LD_INT 1
52912: NEG
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 1
52961: NEG
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: NEG
52974: PUSH
52975: LD_INT 2
52977: NEG
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: LD_INT 2
52988: NEG
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 2
53007: PUSH
53008: LD_INT 0
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 2
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53039: LD_ADDR_VAR 0 49
53043: PUSH
53044: LD_INT 0
53046: PUSH
53047: LD_INT 0
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 0
53056: PUSH
53057: LD_INT 1
53059: NEG
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 1
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 1
53077: PUSH
53078: LD_INT 1
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 1
53097: NEG
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 1
53108: NEG
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 2
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 2
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 2
53151: PUSH
53152: LD_INT 2
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: PUSH
53162: LD_INT 2
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53183: LD_ADDR_VAR 0 50
53187: PUSH
53188: LD_INT 0
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: LD_INT 1
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 1
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 1
53221: PUSH
53222: LD_INT 1
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 1
53241: NEG
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 1
53252: NEG
53253: PUSH
53254: LD_INT 1
53256: NEG
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 2
53264: PUSH
53265: LD_INT 1
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 2
53274: PUSH
53275: LD_INT 2
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 1
53284: PUSH
53285: LD_INT 2
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: LD_INT 2
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: NEG
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53327: LD_ADDR_VAR 0 51
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: LD_INT 1
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 1
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: LD_INT 1
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: PUSH
53398: LD_INT 1
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 1
53408: PUSH
53409: LD_INT 2
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: LD_INT 2
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: LD_INT 1
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 2
53439: NEG
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 2
53450: NEG
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53474: LD_ADDR_VAR 0 52
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 1
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 1
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: LD_INT 1
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: NEG
53556: PUSH
53557: LD_INT 2
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: LD_INT 1
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 2
53578: NEG
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 2
53589: NEG
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 2
53601: NEG
53602: PUSH
53603: LD_INT 2
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53625: LD_ADDR_VAR 0 53
53629: PUSH
53630: LD_INT 0
53632: PUSH
53633: LD_INT 0
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 0
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 1
53653: PUSH
53654: LD_INT 0
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 1
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 0
53673: PUSH
53674: LD_INT 1
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 1
53683: NEG
53684: PUSH
53685: LD_INT 0
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 1
53694: NEG
53695: PUSH
53696: LD_INT 1
53698: NEG
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 1
53706: NEG
53707: PUSH
53708: LD_INT 2
53710: NEG
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 0
53718: PUSH
53719: LD_INT 2
53721: NEG
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 1
53729: PUSH
53730: LD_INT 1
53732: NEG
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 2
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 2
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 2
53760: PUSH
53761: LD_INT 2
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 1
53770: PUSH
53771: LD_INT 2
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: LD_INT 2
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 1
53790: NEG
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 2
53801: NEG
53802: PUSH
53803: LD_INT 0
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 2
53812: NEG
53813: PUSH
53814: LD_INT 1
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 2
53824: NEG
53825: PUSH
53826: LD_INT 2
53828: NEG
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53855: LD_ADDR_VAR 0 54
53859: PUSH
53860: LD_INT 0
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: LD_INT 1
53875: NEG
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 1
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 1
53893: PUSH
53894: LD_INT 1
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 0
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 1
53913: NEG
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 1
53936: NEG
53937: PUSH
53938: LD_INT 2
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 0
53948: PUSH
53949: LD_INT 2
53951: NEG
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 1
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 2
53970: PUSH
53971: LD_INT 0
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 2
53980: PUSH
53981: LD_INT 1
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 2
53990: PUSH
53991: LD_INT 2
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: LD_INT 2
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: LD_INT 2
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: LD_INT 1
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 2
54031: NEG
54032: PUSH
54033: LD_INT 0
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 2
54054: NEG
54055: PUSH
54056: LD_INT 2
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54085: LD_ADDR_VAR 0 55
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: LD_INT 1
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 1
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 1
54123: PUSH
54124: LD_INT 1
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 0
54133: PUSH
54134: LD_INT 1
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: NEG
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 1
54154: NEG
54155: PUSH
54156: LD_INT 1
54158: NEG
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: LD_INT 2
54170: NEG
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 0
54178: PUSH
54179: LD_INT 2
54181: NEG
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 1
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 2
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 2
54210: PUSH
54211: LD_INT 1
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 2
54220: PUSH
54221: LD_INT 2
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 1
54230: PUSH
54231: LD_INT 2
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: LD_INT 2
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 1
54250: NEG
54251: PUSH
54252: LD_INT 1
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 2
54261: NEG
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 2
54272: NEG
54273: PUSH
54274: LD_INT 1
54276: NEG
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 2
54284: NEG
54285: PUSH
54286: LD_INT 2
54288: NEG
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54315: LD_ADDR_VAR 0 56
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 0
54332: PUSH
54333: LD_INT 1
54335: NEG
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: LD_INT 0
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 1
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 0
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 1
54373: NEG
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 1
54384: NEG
54385: PUSH
54386: LD_INT 1
54388: NEG
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: LD_INT 2
54400: NEG
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 0
54408: PUSH
54409: LD_INT 2
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 1
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 2
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 2
54440: PUSH
54441: LD_INT 1
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 2
54450: PUSH
54451: LD_INT 2
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: LD_INT 2
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: LD_INT 2
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 2
54491: NEG
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 2
54502: NEG
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 2
54514: NEG
54515: PUSH
54516: LD_INT 2
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54545: LD_ADDR_VAR 0 57
54549: PUSH
54550: LD_INT 0
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 1
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: PUSH
54584: LD_INT 1
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 0
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: NEG
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 1
54614: NEG
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 1
54626: NEG
54627: PUSH
54628: LD_INT 2
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: LD_INT 2
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 2
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 2
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 2
54680: PUSH
54681: LD_INT 2
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: LD_INT 2
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: LD_INT 2
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: LD_INT 1
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 2
54721: NEG
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 2
54732: NEG
54733: PUSH
54734: LD_INT 1
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 2
54744: NEG
54745: PUSH
54746: LD_INT 2
54748: NEG
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54775: LD_ADDR_VAR 0 58
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: LD_INT 0
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: LD_INT 1
54795: NEG
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 1
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 1
54813: PUSH
54814: LD_INT 1
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: LD_INT 1
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 1
54833: NEG
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 1
54844: NEG
54845: PUSH
54846: LD_INT 1
54848: NEG
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: LD_INT 2
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: LD_INT 2
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 1
54879: PUSH
54880: LD_INT 1
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 2
54890: PUSH
54891: LD_INT 0
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 2
54900: PUSH
54901: LD_INT 1
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 2
54910: PUSH
54911: LD_INT 2
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 1
54920: PUSH
54921: LD_INT 2
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: LD_INT 2
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 1
54940: NEG
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 2
54951: NEG
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 2
54962: NEG
54963: PUSH
54964: LD_INT 1
54966: NEG
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 2
54974: NEG
54975: PUSH
54976: LD_INT 2
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55005: LD_ADDR_VAR 0 59
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 1
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 1
55063: NEG
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: PUSH
55076: LD_INT 1
55078: NEG
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55093: LD_ADDR_VAR 0 60
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: LD_INT 0
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: LD_INT 1
55113: NEG
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 1
55121: PUSH
55122: LD_INT 0
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 1
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 0
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: LD_INT 1
55166: NEG
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55181: LD_ADDR_VAR 0 61
55185: PUSH
55186: LD_INT 0
55188: PUSH
55189: LD_INT 0
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: LD_INT 1
55201: NEG
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 1
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: LD_INT 1
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 0
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 1
55239: NEG
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: NEG
55251: PUSH
55252: LD_INT 1
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55269: LD_ADDR_VAR 0 62
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 0
55286: PUSH
55287: LD_INT 1
55289: NEG
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 1
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: LD_INT 1
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 0
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 1
55338: NEG
55339: PUSH
55340: LD_INT 1
55342: NEG
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55357: LD_ADDR_VAR 0 63
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: LD_INT 0
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 0
55374: PUSH
55375: LD_INT 1
55377: NEG
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 1
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 1
55395: PUSH
55396: LD_INT 1
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: LD_INT 1
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 1
55415: NEG
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: NEG
55427: PUSH
55428: LD_INT 1
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55445: LD_ADDR_VAR 0 64
55449: PUSH
55450: LD_INT 0
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: LD_INT 1
55465: NEG
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 1
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: LD_INT 1
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 1
55503: NEG
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: NEG
55515: PUSH
55516: LD_INT 1
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: ST_TO_ADDR
// end ; 1 :
55533: GO 61430
55535: LD_INT 1
55537: DOUBLE
55538: EQUAL
55539: IFTRUE 55543
55541: GO 58166
55543: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55544: LD_ADDR_VAR 0 11
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: LD_INT 3
55555: NEG
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: LD_INT 3
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 1
55574: PUSH
55575: LD_INT 2
55577: NEG
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: LIST
55587: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55588: LD_ADDR_VAR 0 12
55592: PUSH
55593: LD_INT 2
55595: PUSH
55596: LD_INT 1
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 3
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 3
55616: PUSH
55617: LD_INT 1
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: LIST
55628: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55629: LD_ADDR_VAR 0 13
55633: PUSH
55634: LD_INT 3
55636: PUSH
55637: LD_INT 2
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 3
55646: PUSH
55647: LD_INT 3
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 2
55656: PUSH
55657: LD_INT 3
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: LIST
55668: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55669: LD_ADDR_VAR 0 14
55673: PUSH
55674: LD_INT 1
55676: PUSH
55677: LD_INT 3
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: LD_INT 3
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: NEG
55697: PUSH
55698: LD_INT 2
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: LIST
55709: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55710: LD_ADDR_VAR 0 15
55714: PUSH
55715: LD_INT 2
55717: NEG
55718: PUSH
55719: LD_INT 1
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 3
55728: NEG
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 3
55739: NEG
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: LIST
55753: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55754: LD_ADDR_VAR 0 16
55758: PUSH
55759: LD_INT 2
55761: NEG
55762: PUSH
55763: LD_INT 3
55765: NEG
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 3
55773: NEG
55774: PUSH
55775: LD_INT 2
55777: NEG
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 3
55785: NEG
55786: PUSH
55787: LD_INT 3
55789: NEG
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: LIST
55799: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55800: LD_ADDR_VAR 0 17
55804: PUSH
55805: LD_INT 1
55807: NEG
55808: PUSH
55809: LD_INT 3
55811: NEG
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: LD_INT 3
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: LD_INT 2
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: LIST
55843: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55844: LD_ADDR_VAR 0 18
55848: PUSH
55849: LD_INT 2
55851: PUSH
55852: LD_INT 1
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 3
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 3
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: LIST
55884: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55885: LD_ADDR_VAR 0 19
55889: PUSH
55890: LD_INT 3
55892: PUSH
55893: LD_INT 2
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 3
55902: PUSH
55903: LD_INT 3
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 2
55912: PUSH
55913: LD_INT 3
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: LIST
55924: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55925: LD_ADDR_VAR 0 20
55929: PUSH
55930: LD_INT 1
55932: PUSH
55933: LD_INT 3
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 0
55942: PUSH
55943: LD_INT 3
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 1
55952: NEG
55953: PUSH
55954: LD_INT 2
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: LIST
55965: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55966: LD_ADDR_VAR 0 21
55970: PUSH
55971: LD_INT 2
55973: NEG
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 3
55984: NEG
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 3
55995: NEG
55996: PUSH
55997: LD_INT 1
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: LIST
56009: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56010: LD_ADDR_VAR 0 22
56014: PUSH
56015: LD_INT 2
56017: NEG
56018: PUSH
56019: LD_INT 3
56021: NEG
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 3
56029: NEG
56030: PUSH
56031: LD_INT 2
56033: NEG
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 3
56041: NEG
56042: PUSH
56043: LD_INT 3
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: LIST
56055: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56056: LD_ADDR_VAR 0 23
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: LD_INT 3
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 1
56074: NEG
56075: PUSH
56076: LD_INT 4
56078: NEG
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 1
56086: PUSH
56087: LD_INT 3
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: LIST
56099: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56100: LD_ADDR_VAR 0 24
56104: PUSH
56105: LD_INT 3
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 3
56117: PUSH
56118: LD_INT 1
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 4
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: LIST
56140: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56141: LD_ADDR_VAR 0 25
56145: PUSH
56146: LD_INT 3
56148: PUSH
56149: LD_INT 3
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 4
56158: PUSH
56159: LD_INT 3
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 3
56168: PUSH
56169: LD_INT 4
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: LIST
56180: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56181: LD_ADDR_VAR 0 26
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: LD_INT 3
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 1
56198: PUSH
56199: LD_INT 4
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 1
56208: NEG
56209: PUSH
56210: LD_INT 3
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: LIST
56221: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56222: LD_ADDR_VAR 0 27
56226: PUSH
56227: LD_INT 3
56229: NEG
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 3
56240: NEG
56241: PUSH
56242: LD_INT 1
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 4
56251: NEG
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: LIST
56265: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56266: LD_ADDR_VAR 0 28
56270: PUSH
56271: LD_INT 3
56273: NEG
56274: PUSH
56275: LD_INT 3
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 3
56285: NEG
56286: PUSH
56287: LD_INT 4
56289: NEG
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 4
56297: NEG
56298: PUSH
56299: LD_INT 3
56301: NEG
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: LIST
56311: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56312: LD_ADDR_VAR 0 29
56316: PUSH
56317: LD_INT 1
56319: NEG
56320: PUSH
56321: LD_INT 3
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: LD_INT 3
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 1
56342: PUSH
56343: LD_INT 2
56345: NEG
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 1
56353: NEG
56354: PUSH
56355: LD_INT 4
56357: NEG
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: LD_INT 4
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: LD_INT 3
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: LD_INT 5
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 0
56399: PUSH
56400: LD_INT 5
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: LD_INT 4
56413: NEG
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 1
56421: NEG
56422: PUSH
56423: LD_INT 6
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 0
56433: PUSH
56434: LD_INT 6
56436: NEG
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: PUSH
56445: LD_INT 5
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56467: LD_ADDR_VAR 0 30
56471: PUSH
56472: LD_INT 2
56474: PUSH
56475: LD_INT 1
56477: NEG
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 3
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 3
56495: PUSH
56496: LD_INT 1
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 3
56505: PUSH
56506: LD_INT 1
56508: NEG
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 4
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 4
56526: PUSH
56527: LD_INT 1
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 4
56536: PUSH
56537: LD_INT 1
56539: NEG
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 5
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 5
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 5
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 6
56578: PUSH
56579: LD_INT 0
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 6
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56610: LD_ADDR_VAR 0 31
56614: PUSH
56615: LD_INT 3
56617: PUSH
56618: LD_INT 2
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 3
56627: PUSH
56628: LD_INT 3
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 2
56637: PUSH
56638: LD_INT 3
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 4
56647: PUSH
56648: LD_INT 3
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 4
56657: PUSH
56658: LD_INT 4
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 3
56667: PUSH
56668: LD_INT 4
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 5
56677: PUSH
56678: LD_INT 4
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 5
56687: PUSH
56688: LD_INT 5
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 4
56697: PUSH
56698: LD_INT 5
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 6
56707: PUSH
56708: LD_INT 5
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 6
56717: PUSH
56718: LD_INT 6
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 5
56727: PUSH
56728: LD_INT 6
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56749: LD_ADDR_VAR 0 32
56753: PUSH
56754: LD_INT 1
56756: PUSH
56757: LD_INT 3
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: LD_INT 3
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 1
56776: NEG
56777: PUSH
56778: LD_INT 2
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: LD_INT 4
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: LD_INT 4
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: LD_INT 3
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 1
56818: PUSH
56819: LD_INT 5
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 0
56828: PUSH
56829: LD_INT 5
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 1
56838: NEG
56839: PUSH
56840: LD_INT 4
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: PUSH
56850: LD_INT 6
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 0
56859: PUSH
56860: LD_INT 6
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 1
56869: NEG
56870: PUSH
56871: LD_INT 5
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56892: LD_ADDR_VAR 0 33
56896: PUSH
56897: LD_INT 2
56899: NEG
56900: PUSH
56901: LD_INT 1
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 3
56910: NEG
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 3
56921: NEG
56922: PUSH
56923: LD_INT 1
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 3
56933: NEG
56934: PUSH
56935: LD_INT 1
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 4
56944: NEG
56945: PUSH
56946: LD_INT 0
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 4
56955: NEG
56956: PUSH
56957: LD_INT 1
56959: NEG
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 4
56967: NEG
56968: PUSH
56969: LD_INT 1
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 5
56978: NEG
56979: PUSH
56980: LD_INT 0
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 5
56989: NEG
56990: PUSH
56991: LD_INT 1
56993: NEG
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 5
57001: NEG
57002: PUSH
57003: LD_INT 1
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 6
57012: NEG
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 6
57023: NEG
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57047: LD_ADDR_VAR 0 34
57051: PUSH
57052: LD_INT 2
57054: NEG
57055: PUSH
57056: LD_INT 3
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 3
57066: NEG
57067: PUSH
57068: LD_INT 2
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 3
57078: NEG
57079: PUSH
57080: LD_INT 3
57082: NEG
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 3
57090: NEG
57091: PUSH
57092: LD_INT 4
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 4
57102: NEG
57103: PUSH
57104: LD_INT 3
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 4
57114: NEG
57115: PUSH
57116: LD_INT 4
57118: NEG
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 4
57126: NEG
57127: PUSH
57128: LD_INT 5
57130: NEG
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 5
57138: NEG
57139: PUSH
57140: LD_INT 4
57142: NEG
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 5
57150: NEG
57151: PUSH
57152: LD_INT 5
57154: NEG
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 5
57162: NEG
57163: PUSH
57164: LD_INT 6
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 6
57174: NEG
57175: PUSH
57176: LD_INT 5
57178: NEG
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 6
57186: NEG
57187: PUSH
57188: LD_INT 6
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57210: LD_ADDR_VAR 0 41
57214: PUSH
57215: LD_INT 0
57217: PUSH
57218: LD_INT 2
57220: NEG
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 1
57228: NEG
57229: PUSH
57230: LD_INT 3
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: LD_INT 2
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: LIST
57253: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57254: LD_ADDR_VAR 0 42
57258: PUSH
57259: LD_INT 2
57261: PUSH
57262: LD_INT 0
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 2
57271: PUSH
57272: LD_INT 1
57274: NEG
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 3
57282: PUSH
57283: LD_INT 1
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: LIST
57294: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57295: LD_ADDR_VAR 0 43
57299: PUSH
57300: LD_INT 2
57302: PUSH
57303: LD_INT 2
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 3
57312: PUSH
57313: LD_INT 2
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 2
57322: PUSH
57323: LD_INT 3
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: LIST
57334: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57335: LD_ADDR_VAR 0 44
57339: PUSH
57340: LD_INT 0
57342: PUSH
57343: LD_INT 2
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 1
57352: PUSH
57353: LD_INT 3
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 1
57362: NEG
57363: PUSH
57364: LD_INT 2
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: LIST
57375: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57376: LD_ADDR_VAR 0 45
57380: PUSH
57381: LD_INT 2
57383: NEG
57384: PUSH
57385: LD_INT 0
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 2
57394: NEG
57395: PUSH
57396: LD_INT 1
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 3
57405: NEG
57406: PUSH
57407: LD_INT 1
57409: NEG
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: LIST
57419: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57420: LD_ADDR_VAR 0 46
57424: PUSH
57425: LD_INT 2
57427: NEG
57428: PUSH
57429: LD_INT 2
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 2
57439: NEG
57440: PUSH
57441: LD_INT 3
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 3
57451: NEG
57452: PUSH
57453: LD_INT 2
57455: NEG
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: LIST
57465: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57466: LD_ADDR_VAR 0 47
57470: PUSH
57471: LD_INT 2
57473: NEG
57474: PUSH
57475: LD_INT 3
57477: NEG
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 1
57485: NEG
57486: PUSH
57487: LD_INT 3
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57499: LD_ADDR_VAR 0 48
57503: PUSH
57504: LD_INT 1
57506: PUSH
57507: LD_INT 2
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 2
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57530: LD_ADDR_VAR 0 49
57534: PUSH
57535: LD_INT 3
57537: PUSH
57538: LD_INT 1
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 3
57547: PUSH
57548: LD_INT 2
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57559: LD_ADDR_VAR 0 50
57563: PUSH
57564: LD_INT 2
57566: PUSH
57567: LD_INT 3
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 1
57576: PUSH
57577: LD_INT 3
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57588: LD_ADDR_VAR 0 51
57592: PUSH
57593: LD_INT 1
57595: NEG
57596: PUSH
57597: LD_INT 2
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 2
57606: NEG
57607: PUSH
57608: LD_INT 1
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57619: LD_ADDR_VAR 0 52
57623: PUSH
57624: LD_INT 3
57626: NEG
57627: PUSH
57628: LD_INT 1
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 3
57638: NEG
57639: PUSH
57640: LD_INT 2
57642: NEG
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57652: LD_ADDR_VAR 0 53
57656: PUSH
57657: LD_INT 1
57659: NEG
57660: PUSH
57661: LD_INT 3
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: LD_INT 3
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 1
57682: PUSH
57683: LD_INT 2
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: LIST
57695: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57696: LD_ADDR_VAR 0 54
57700: PUSH
57701: LD_INT 2
57703: PUSH
57704: LD_INT 1
57706: NEG
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 3
57714: PUSH
57715: LD_INT 0
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 3
57724: PUSH
57725: LD_INT 1
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: LIST
57736: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57737: LD_ADDR_VAR 0 55
57741: PUSH
57742: LD_INT 3
57744: PUSH
57745: LD_INT 2
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 3
57754: PUSH
57755: LD_INT 3
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 2
57764: PUSH
57765: LD_INT 3
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: LIST
57776: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57777: LD_ADDR_VAR 0 56
57781: PUSH
57782: LD_INT 1
57784: PUSH
57785: LD_INT 3
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: LD_INT 3
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 1
57804: NEG
57805: PUSH
57806: LD_INT 2
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: LIST
57817: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57818: LD_ADDR_VAR 0 57
57822: PUSH
57823: LD_INT 2
57825: NEG
57826: PUSH
57827: LD_INT 1
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 3
57836: NEG
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 3
57847: NEG
57848: PUSH
57849: LD_INT 1
57851: NEG
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: LIST
57861: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57862: LD_ADDR_VAR 0 58
57866: PUSH
57867: LD_INT 2
57869: NEG
57870: PUSH
57871: LD_INT 3
57873: NEG
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 3
57881: NEG
57882: PUSH
57883: LD_INT 2
57885: NEG
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 3
57893: NEG
57894: PUSH
57895: LD_INT 3
57897: NEG
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: LIST
57907: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57908: LD_ADDR_VAR 0 59
57912: PUSH
57913: LD_INT 1
57915: NEG
57916: PUSH
57917: LD_INT 2
57919: NEG
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 0
57927: PUSH
57928: LD_INT 2
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 1
57938: PUSH
57939: LD_INT 1
57941: NEG
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: LIST
57951: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57952: LD_ADDR_VAR 0 60
57956: PUSH
57957: LD_INT 1
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 2
57970: PUSH
57971: LD_INT 0
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 2
57980: PUSH
57981: LD_INT 1
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: LIST
57992: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57993: LD_ADDR_VAR 0 61
57997: PUSH
57998: LD_INT 2
58000: PUSH
58001: LD_INT 1
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 2
58010: PUSH
58011: LD_INT 2
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 1
58020: PUSH
58021: LD_INT 2
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: LIST
58032: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58033: LD_ADDR_VAR 0 62
58037: PUSH
58038: LD_INT 1
58040: PUSH
58041: LD_INT 2
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: LD_INT 2
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 1
58060: NEG
58061: PUSH
58062: LD_INT 1
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: LIST
58073: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58074: LD_ADDR_VAR 0 63
58078: PUSH
58079: LD_INT 1
58081: NEG
58082: PUSH
58083: LD_INT 1
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 2
58092: NEG
58093: PUSH
58094: LD_INT 0
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 2
58103: NEG
58104: PUSH
58105: LD_INT 1
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: LIST
58117: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58118: LD_ADDR_VAR 0 64
58122: PUSH
58123: LD_INT 1
58125: NEG
58126: PUSH
58127: LD_INT 2
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 2
58137: NEG
58138: PUSH
58139: LD_INT 1
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 2
58149: NEG
58150: PUSH
58151: LD_INT 2
58153: NEG
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: LIST
58163: ST_TO_ADDR
// end ; 2 :
58164: GO 61430
58166: LD_INT 2
58168: DOUBLE
58169: EQUAL
58170: IFTRUE 58174
58172: GO 61429
58174: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58175: LD_ADDR_VAR 0 29
58179: PUSH
58180: LD_INT 4
58182: PUSH
58183: LD_INT 0
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 4
58192: PUSH
58193: LD_INT 1
58195: NEG
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 5
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 5
58213: PUSH
58214: LD_INT 1
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 4
58223: PUSH
58224: LD_INT 1
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 3
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 3
58243: PUSH
58244: LD_INT 1
58246: NEG
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 3
58254: PUSH
58255: LD_INT 2
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 5
58265: PUSH
58266: LD_INT 2
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 3
58275: PUSH
58276: LD_INT 3
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 3
58285: PUSH
58286: LD_INT 2
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 4
58295: PUSH
58296: LD_INT 3
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 4
58305: PUSH
58306: LD_INT 4
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 3
58315: PUSH
58316: LD_INT 4
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 2
58325: PUSH
58326: LD_INT 3
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 2
58335: PUSH
58336: LD_INT 2
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 4
58345: PUSH
58346: LD_INT 2
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 2
58355: PUSH
58356: LD_INT 4
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 0
58365: PUSH
58366: LD_INT 4
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: LD_INT 3
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 1
58385: PUSH
58386: LD_INT 4
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 1
58395: PUSH
58396: LD_INT 5
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 0
58405: PUSH
58406: LD_INT 5
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: LD_INT 4
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 1
58426: NEG
58427: PUSH
58428: LD_INT 3
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 2
58437: PUSH
58438: LD_INT 5
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 2
58447: NEG
58448: PUSH
58449: LD_INT 3
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 3
58458: NEG
58459: PUSH
58460: LD_INT 0
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 3
58469: NEG
58470: PUSH
58471: LD_INT 1
58473: NEG
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 2
58481: NEG
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 2
58492: NEG
58493: PUSH
58494: LD_INT 1
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 3
58503: NEG
58504: PUSH
58505: LD_INT 1
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 4
58514: NEG
58515: PUSH
58516: LD_INT 0
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 4
58525: NEG
58526: PUSH
58527: LD_INT 1
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 4
58537: NEG
58538: PUSH
58539: LD_INT 2
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 2
58549: NEG
58550: PUSH
58551: LD_INT 2
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 4
58560: NEG
58561: PUSH
58562: LD_INT 4
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 4
58572: NEG
58573: PUSH
58574: LD_INT 5
58576: NEG
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 3
58584: NEG
58585: PUSH
58586: LD_INT 4
58588: NEG
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 3
58596: NEG
58597: PUSH
58598: LD_INT 3
58600: NEG
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 4
58608: NEG
58609: PUSH
58610: LD_INT 3
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 5
58620: NEG
58621: PUSH
58622: LD_INT 4
58624: NEG
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 5
58632: NEG
58633: PUSH
58634: LD_INT 5
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 3
58644: NEG
58645: PUSH
58646: LD_INT 5
58648: NEG
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 5
58656: NEG
58657: PUSH
58658: LD_INT 3
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58713: LD_ADDR_VAR 0 30
58717: PUSH
58718: LD_INT 4
58720: PUSH
58721: LD_INT 4
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 4
58730: PUSH
58731: LD_INT 3
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 5
58740: PUSH
58741: LD_INT 4
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 5
58750: PUSH
58751: LD_INT 5
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 4
58760: PUSH
58761: LD_INT 5
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 3
58770: PUSH
58771: LD_INT 4
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 3
58780: PUSH
58781: LD_INT 3
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 5
58790: PUSH
58791: LD_INT 3
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 3
58800: PUSH
58801: LD_INT 5
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 0
58810: PUSH
58811: LD_INT 3
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 0
58820: PUSH
58821: LD_INT 2
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 1
58830: PUSH
58831: LD_INT 3
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 1
58840: PUSH
58841: LD_INT 4
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 0
58850: PUSH
58851: LD_INT 4
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 1
58860: NEG
58861: PUSH
58862: LD_INT 3
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 1
58871: NEG
58872: PUSH
58873: LD_INT 2
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 2
58882: PUSH
58883: LD_INT 4
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 2
58892: NEG
58893: PUSH
58894: LD_INT 2
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 4
58903: NEG
58904: PUSH
58905: LD_INT 0
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 4
58914: NEG
58915: PUSH
58916: LD_INT 1
58918: NEG
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 3
58926: NEG
58927: PUSH
58928: LD_INT 0
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 3
58937: NEG
58938: PUSH
58939: LD_INT 1
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 4
58948: NEG
58949: PUSH
58950: LD_INT 1
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 5
58959: NEG
58960: PUSH
58961: LD_INT 0
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 5
58970: NEG
58971: PUSH
58972: LD_INT 1
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 5
58982: NEG
58983: PUSH
58984: LD_INT 2
58986: NEG
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 3
58994: NEG
58995: PUSH
58996: LD_INT 2
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 3
59005: NEG
59006: PUSH
59007: LD_INT 3
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 3
59017: NEG
59018: PUSH
59019: LD_INT 4
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 2
59029: NEG
59030: PUSH
59031: LD_INT 3
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 2
59041: NEG
59042: PUSH
59043: LD_INT 2
59045: NEG
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 3
59053: NEG
59054: PUSH
59055: LD_INT 2
59057: NEG
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 4
59065: NEG
59066: PUSH
59067: LD_INT 3
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 4
59077: NEG
59078: PUSH
59079: LD_INT 4
59081: NEG
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 2
59089: NEG
59090: PUSH
59091: LD_INT 4
59093: NEG
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 4
59101: NEG
59102: PUSH
59103: LD_INT 2
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 0
59113: PUSH
59114: LD_INT 4
59116: NEG
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 0
59124: PUSH
59125: LD_INT 5
59127: NEG
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 1
59135: PUSH
59136: LD_INT 4
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 1
59146: PUSH
59147: LD_INT 3
59149: NEG
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 0
59157: PUSH
59158: LD_INT 3
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 1
59168: NEG
59169: PUSH
59170: LD_INT 4
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 1
59180: NEG
59181: PUSH
59182: LD_INT 5
59184: NEG
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 2
59192: PUSH
59193: LD_INT 3
59195: NEG
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 2
59203: NEG
59204: PUSH
59205: LD_INT 5
59207: NEG
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59260: LD_ADDR_VAR 0 31
59264: PUSH
59265: LD_INT 0
59267: PUSH
59268: LD_INT 4
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: LD_INT 3
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 1
59287: PUSH
59288: LD_INT 4
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 1
59297: PUSH
59298: LD_INT 5
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 0
59307: PUSH
59308: LD_INT 5
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 1
59317: NEG
59318: PUSH
59319: LD_INT 4
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 1
59328: NEG
59329: PUSH
59330: LD_INT 3
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 2
59339: PUSH
59340: LD_INT 5
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 2
59349: NEG
59350: PUSH
59351: LD_INT 3
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 3
59360: NEG
59361: PUSH
59362: LD_INT 0
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 3
59371: NEG
59372: PUSH
59373: LD_INT 1
59375: NEG
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 2
59383: NEG
59384: PUSH
59385: LD_INT 0
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 2
59394: NEG
59395: PUSH
59396: LD_INT 1
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 3
59405: NEG
59406: PUSH
59407: LD_INT 1
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 4
59416: NEG
59417: PUSH
59418: LD_INT 0
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 4
59427: NEG
59428: PUSH
59429: LD_INT 1
59431: NEG
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 4
59439: NEG
59440: PUSH
59441: LD_INT 2
59443: NEG
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 2
59451: NEG
59452: PUSH
59453: LD_INT 2
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 4
59462: NEG
59463: PUSH
59464: LD_INT 4
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 4
59474: NEG
59475: PUSH
59476: LD_INT 5
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 3
59486: NEG
59487: PUSH
59488: LD_INT 4
59490: NEG
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 3
59498: NEG
59499: PUSH
59500: LD_INT 3
59502: NEG
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 4
59510: NEG
59511: PUSH
59512: LD_INT 3
59514: NEG
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 5
59522: NEG
59523: PUSH
59524: LD_INT 4
59526: NEG
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 5
59534: NEG
59535: PUSH
59536: LD_INT 5
59538: NEG
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 3
59546: NEG
59547: PUSH
59548: LD_INT 5
59550: NEG
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 5
59558: NEG
59559: PUSH
59560: LD_INT 3
59562: NEG
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 0
59570: PUSH
59571: LD_INT 3
59573: NEG
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 0
59581: PUSH
59582: LD_INT 4
59584: NEG
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 1
59592: PUSH
59593: LD_INT 3
59595: NEG
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 1
59603: PUSH
59604: LD_INT 2
59606: NEG
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 0
59614: PUSH
59615: LD_INT 2
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 1
59625: NEG
59626: PUSH
59627: LD_INT 3
59629: NEG
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 1
59637: NEG
59638: PUSH
59639: LD_INT 4
59641: NEG
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 2
59649: PUSH
59650: LD_INT 2
59652: NEG
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 2
59660: NEG
59661: PUSH
59662: LD_INT 4
59664: NEG
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 4
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 4
59682: PUSH
59683: LD_INT 1
59685: NEG
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 5
59693: PUSH
59694: LD_INT 0
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 5
59703: PUSH
59704: LD_INT 1
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 4
59713: PUSH
59714: LD_INT 1
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 3
59723: PUSH
59724: LD_INT 0
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 3
59733: PUSH
59734: LD_INT 1
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 3
59744: PUSH
59745: LD_INT 2
59747: NEG
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 5
59755: PUSH
59756: LD_INT 2
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59810: LD_ADDR_VAR 0 32
59814: PUSH
59815: LD_INT 4
59817: NEG
59818: PUSH
59819: LD_INT 0
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 4
59828: NEG
59829: PUSH
59830: LD_INT 1
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 3
59840: NEG
59841: PUSH
59842: LD_INT 0
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 3
59851: NEG
59852: PUSH
59853: LD_INT 1
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 4
59862: NEG
59863: PUSH
59864: LD_INT 1
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 5
59873: NEG
59874: PUSH
59875: LD_INT 0
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 5
59884: NEG
59885: PUSH
59886: LD_INT 1
59888: NEG
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 5
59896: NEG
59897: PUSH
59898: LD_INT 2
59900: NEG
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 3
59908: NEG
59909: PUSH
59910: LD_INT 2
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 3
59919: NEG
59920: PUSH
59921: LD_INT 3
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 3
59931: NEG
59932: PUSH
59933: LD_INT 4
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 2
59943: NEG
59944: PUSH
59945: LD_INT 3
59947: NEG
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 2
59955: NEG
59956: PUSH
59957: LD_INT 2
59959: NEG
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 3
59967: NEG
59968: PUSH
59969: LD_INT 2
59971: NEG
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 4
59979: NEG
59980: PUSH
59981: LD_INT 3
59983: NEG
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 4
59991: NEG
59992: PUSH
59993: LD_INT 4
59995: NEG
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 2
60003: NEG
60004: PUSH
60005: LD_INT 4
60007: NEG
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 4
60015: NEG
60016: PUSH
60017: LD_INT 2
60019: NEG
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 0
60027: PUSH
60028: LD_INT 4
60030: NEG
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 0
60038: PUSH
60039: LD_INT 5
60041: NEG
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 1
60049: PUSH
60050: LD_INT 4
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 1
60060: PUSH
60061: LD_INT 3
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 0
60071: PUSH
60072: LD_INT 3
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 1
60082: NEG
60083: PUSH
60084: LD_INT 4
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 1
60094: NEG
60095: PUSH
60096: LD_INT 5
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 2
60106: PUSH
60107: LD_INT 3
60109: NEG
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 2
60117: NEG
60118: PUSH
60119: LD_INT 5
60121: NEG
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 3
60129: PUSH
60130: LD_INT 0
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 3
60139: PUSH
60140: LD_INT 1
60142: NEG
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 4
60150: PUSH
60151: LD_INT 0
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 4
60160: PUSH
60161: LD_INT 1
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 3
60170: PUSH
60171: LD_INT 1
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 2
60180: PUSH
60181: LD_INT 0
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 2
60190: PUSH
60191: LD_INT 1
60193: NEG
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 2
60201: PUSH
60202: LD_INT 2
60204: NEG
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 4
60212: PUSH
60213: LD_INT 2
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 4
60222: PUSH
60223: LD_INT 4
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 4
60232: PUSH
60233: LD_INT 3
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 5
60242: PUSH
60243: LD_INT 4
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 5
60252: PUSH
60253: LD_INT 5
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 4
60262: PUSH
60263: LD_INT 5
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 3
60272: PUSH
60273: LD_INT 4
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 3
60282: PUSH
60283: LD_INT 3
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 5
60292: PUSH
60293: LD_INT 3
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 3
60302: PUSH
60303: LD_INT 5
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60357: LD_ADDR_VAR 0 33
60361: PUSH
60362: LD_INT 4
60364: NEG
60365: PUSH
60366: LD_INT 4
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 4
60376: NEG
60377: PUSH
60378: LD_INT 5
60380: NEG
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 3
60388: NEG
60389: PUSH
60390: LD_INT 4
60392: NEG
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 3
60400: NEG
60401: PUSH
60402: LD_INT 3
60404: NEG
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 4
60412: NEG
60413: PUSH
60414: LD_INT 3
60416: NEG
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 5
60424: NEG
60425: PUSH
60426: LD_INT 4
60428: NEG
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 5
60436: NEG
60437: PUSH
60438: LD_INT 5
60440: NEG
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 3
60448: NEG
60449: PUSH
60450: LD_INT 5
60452: NEG
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 5
60460: NEG
60461: PUSH
60462: LD_INT 3
60464: NEG
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 0
60472: PUSH
60473: LD_INT 3
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: LD_INT 4
60486: NEG
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 1
60494: PUSH
60495: LD_INT 3
60497: NEG
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 1
60505: PUSH
60506: LD_INT 2
60508: NEG
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: LD_INT 2
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 1
60527: NEG
60528: PUSH
60529: LD_INT 3
60531: NEG
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 1
60539: NEG
60540: PUSH
60541: LD_INT 4
60543: NEG
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 2
60551: PUSH
60552: LD_INT 2
60554: NEG
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 2
60562: NEG
60563: PUSH
60564: LD_INT 4
60566: NEG
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 4
60574: PUSH
60575: LD_INT 0
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 4
60584: PUSH
60585: LD_INT 1
60587: NEG
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 5
60595: PUSH
60596: LD_INT 0
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 5
60605: PUSH
60606: LD_INT 1
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 4
60615: PUSH
60616: LD_INT 1
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 3
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 3
60635: PUSH
60636: LD_INT 1
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 3
60646: PUSH
60647: LD_INT 2
60649: NEG
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 5
60657: PUSH
60658: LD_INT 2
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 3
60667: PUSH
60668: LD_INT 3
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 3
60677: PUSH
60678: LD_INT 2
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 4
60687: PUSH
60688: LD_INT 3
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 4
60697: PUSH
60698: LD_INT 4
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 3
60707: PUSH
60708: LD_INT 4
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 2
60717: PUSH
60718: LD_INT 3
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 2
60727: PUSH
60728: LD_INT 2
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 4
60737: PUSH
60738: LD_INT 2
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 2
60747: PUSH
60748: LD_INT 4
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: LD_INT 4
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 0
60767: PUSH
60768: LD_INT 3
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 1
60777: PUSH
60778: LD_INT 4
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 1
60787: PUSH
60788: LD_INT 5
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 0
60797: PUSH
60798: LD_INT 5
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 1
60807: NEG
60808: PUSH
60809: LD_INT 4
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 1
60818: NEG
60819: PUSH
60820: LD_INT 3
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 2
60829: PUSH
60830: LD_INT 5
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 2
60839: NEG
60840: PUSH
60841: LD_INT 3
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60895: LD_ADDR_VAR 0 34
60899: PUSH
60900: LD_INT 0
60902: PUSH
60903: LD_INT 4
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 0
60913: PUSH
60914: LD_INT 5
60916: NEG
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 1
60924: PUSH
60925: LD_INT 4
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 1
60935: PUSH
60936: LD_INT 3
60938: NEG
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 0
60946: PUSH
60947: LD_INT 3
60949: NEG
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 1
60957: NEG
60958: PUSH
60959: LD_INT 4
60961: NEG
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 1
60969: NEG
60970: PUSH
60971: LD_INT 5
60973: NEG
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 2
60981: PUSH
60982: LD_INT 3
60984: NEG
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 2
60992: NEG
60993: PUSH
60994: LD_INT 5
60996: NEG
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 3
61004: PUSH
61005: LD_INT 0
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 3
61014: PUSH
61015: LD_INT 1
61017: NEG
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 4
61025: PUSH
61026: LD_INT 0
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 4
61035: PUSH
61036: LD_INT 1
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 3
61045: PUSH
61046: LD_INT 1
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 2
61055: PUSH
61056: LD_INT 0
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 2
61065: PUSH
61066: LD_INT 1
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 2
61076: PUSH
61077: LD_INT 2
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 4
61087: PUSH
61088: LD_INT 2
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 4
61097: PUSH
61098: LD_INT 4
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 4
61107: PUSH
61108: LD_INT 3
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 5
61117: PUSH
61118: LD_INT 4
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 5
61127: PUSH
61128: LD_INT 5
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 4
61137: PUSH
61138: LD_INT 5
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 3
61147: PUSH
61148: LD_INT 4
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 3
61157: PUSH
61158: LD_INT 3
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 5
61167: PUSH
61168: LD_INT 3
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 3
61177: PUSH
61178: LD_INT 5
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 0
61187: PUSH
61188: LD_INT 3
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 0
61197: PUSH
61198: LD_INT 2
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 1
61207: PUSH
61208: LD_INT 3
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 1
61217: PUSH
61218: LD_INT 4
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 0
61227: PUSH
61228: LD_INT 4
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 1
61237: NEG
61238: PUSH
61239: LD_INT 3
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 1
61248: NEG
61249: PUSH
61250: LD_INT 2
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 2
61259: PUSH
61260: LD_INT 4
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 2
61269: NEG
61270: PUSH
61271: LD_INT 2
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 4
61280: NEG
61281: PUSH
61282: LD_INT 0
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 4
61291: NEG
61292: PUSH
61293: LD_INT 1
61295: NEG
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 3
61303: NEG
61304: PUSH
61305: LD_INT 0
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 3
61314: NEG
61315: PUSH
61316: LD_INT 1
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 4
61325: NEG
61326: PUSH
61327: LD_INT 1
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 5
61336: NEG
61337: PUSH
61338: LD_INT 0
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 5
61347: NEG
61348: PUSH
61349: LD_INT 1
61351: NEG
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 5
61359: NEG
61360: PUSH
61361: LD_INT 2
61363: NEG
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 3
61371: NEG
61372: PUSH
61373: LD_INT 2
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: ST_TO_ADDR
// end ; end ;
61427: GO 61430
61429: POP
// case btype of b_depot , b_warehouse :
61430: LD_VAR 0 1
61434: PUSH
61435: LD_INT 0
61437: DOUBLE
61438: EQUAL
61439: IFTRUE 61449
61441: LD_INT 1
61443: DOUBLE
61444: EQUAL
61445: IFTRUE 61449
61447: GO 61650
61449: POP
// case nation of nation_american :
61450: LD_VAR 0 5
61454: PUSH
61455: LD_INT 1
61457: DOUBLE
61458: EQUAL
61459: IFTRUE 61463
61461: GO 61519
61463: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61464: LD_ADDR_VAR 0 9
61468: PUSH
61469: LD_VAR 0 11
61473: PUSH
61474: LD_VAR 0 12
61478: PUSH
61479: LD_VAR 0 13
61483: PUSH
61484: LD_VAR 0 14
61488: PUSH
61489: LD_VAR 0 15
61493: PUSH
61494: LD_VAR 0 16
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: PUSH
61507: LD_VAR 0 4
61511: PUSH
61512: LD_INT 1
61514: PLUS
61515: ARRAY
61516: ST_TO_ADDR
61517: GO 61648
61519: LD_INT 2
61521: DOUBLE
61522: EQUAL
61523: IFTRUE 61527
61525: GO 61583
61527: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61528: LD_ADDR_VAR 0 9
61532: PUSH
61533: LD_VAR 0 17
61537: PUSH
61538: LD_VAR 0 18
61542: PUSH
61543: LD_VAR 0 19
61547: PUSH
61548: LD_VAR 0 20
61552: PUSH
61553: LD_VAR 0 21
61557: PUSH
61558: LD_VAR 0 22
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: PUSH
61571: LD_VAR 0 4
61575: PUSH
61576: LD_INT 1
61578: PLUS
61579: ARRAY
61580: ST_TO_ADDR
61581: GO 61648
61583: LD_INT 3
61585: DOUBLE
61586: EQUAL
61587: IFTRUE 61591
61589: GO 61647
61591: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61592: LD_ADDR_VAR 0 9
61596: PUSH
61597: LD_VAR 0 23
61601: PUSH
61602: LD_VAR 0 24
61606: PUSH
61607: LD_VAR 0 25
61611: PUSH
61612: LD_VAR 0 26
61616: PUSH
61617: LD_VAR 0 27
61621: PUSH
61622: LD_VAR 0 28
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: PUSH
61635: LD_VAR 0 4
61639: PUSH
61640: LD_INT 1
61642: PLUS
61643: ARRAY
61644: ST_TO_ADDR
61645: GO 61648
61647: POP
61648: GO 62203
61650: LD_INT 2
61652: DOUBLE
61653: EQUAL
61654: IFTRUE 61664
61656: LD_INT 3
61658: DOUBLE
61659: EQUAL
61660: IFTRUE 61664
61662: GO 61720
61664: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61665: LD_ADDR_VAR 0 9
61669: PUSH
61670: LD_VAR 0 29
61674: PUSH
61675: LD_VAR 0 30
61679: PUSH
61680: LD_VAR 0 31
61684: PUSH
61685: LD_VAR 0 32
61689: PUSH
61690: LD_VAR 0 33
61694: PUSH
61695: LD_VAR 0 34
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: PUSH
61708: LD_VAR 0 4
61712: PUSH
61713: LD_INT 1
61715: PLUS
61716: ARRAY
61717: ST_TO_ADDR
61718: GO 62203
61720: LD_INT 16
61722: DOUBLE
61723: EQUAL
61724: IFTRUE 61782
61726: LD_INT 17
61728: DOUBLE
61729: EQUAL
61730: IFTRUE 61782
61732: LD_INT 18
61734: DOUBLE
61735: EQUAL
61736: IFTRUE 61782
61738: LD_INT 19
61740: DOUBLE
61741: EQUAL
61742: IFTRUE 61782
61744: LD_INT 22
61746: DOUBLE
61747: EQUAL
61748: IFTRUE 61782
61750: LD_INT 20
61752: DOUBLE
61753: EQUAL
61754: IFTRUE 61782
61756: LD_INT 21
61758: DOUBLE
61759: EQUAL
61760: IFTRUE 61782
61762: LD_INT 23
61764: DOUBLE
61765: EQUAL
61766: IFTRUE 61782
61768: LD_INT 24
61770: DOUBLE
61771: EQUAL
61772: IFTRUE 61782
61774: LD_INT 25
61776: DOUBLE
61777: EQUAL
61778: IFTRUE 61782
61780: GO 61838
61782: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61783: LD_ADDR_VAR 0 9
61787: PUSH
61788: LD_VAR 0 35
61792: PUSH
61793: LD_VAR 0 36
61797: PUSH
61798: LD_VAR 0 37
61802: PUSH
61803: LD_VAR 0 38
61807: PUSH
61808: LD_VAR 0 39
61812: PUSH
61813: LD_VAR 0 40
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: PUSH
61826: LD_VAR 0 4
61830: PUSH
61831: LD_INT 1
61833: PLUS
61834: ARRAY
61835: ST_TO_ADDR
61836: GO 62203
61838: LD_INT 6
61840: DOUBLE
61841: EQUAL
61842: IFTRUE 61894
61844: LD_INT 7
61846: DOUBLE
61847: EQUAL
61848: IFTRUE 61894
61850: LD_INT 8
61852: DOUBLE
61853: EQUAL
61854: IFTRUE 61894
61856: LD_INT 13
61858: DOUBLE
61859: EQUAL
61860: IFTRUE 61894
61862: LD_INT 12
61864: DOUBLE
61865: EQUAL
61866: IFTRUE 61894
61868: LD_INT 15
61870: DOUBLE
61871: EQUAL
61872: IFTRUE 61894
61874: LD_INT 11
61876: DOUBLE
61877: EQUAL
61878: IFTRUE 61894
61880: LD_INT 14
61882: DOUBLE
61883: EQUAL
61884: IFTRUE 61894
61886: LD_INT 10
61888: DOUBLE
61889: EQUAL
61890: IFTRUE 61894
61892: GO 61950
61894: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61895: LD_ADDR_VAR 0 9
61899: PUSH
61900: LD_VAR 0 41
61904: PUSH
61905: LD_VAR 0 42
61909: PUSH
61910: LD_VAR 0 43
61914: PUSH
61915: LD_VAR 0 44
61919: PUSH
61920: LD_VAR 0 45
61924: PUSH
61925: LD_VAR 0 46
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: PUSH
61938: LD_VAR 0 4
61942: PUSH
61943: LD_INT 1
61945: PLUS
61946: ARRAY
61947: ST_TO_ADDR
61948: GO 62203
61950: LD_INT 36
61952: DOUBLE
61953: EQUAL
61954: IFTRUE 61958
61956: GO 62014
61958: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61959: LD_ADDR_VAR 0 9
61963: PUSH
61964: LD_VAR 0 47
61968: PUSH
61969: LD_VAR 0 48
61973: PUSH
61974: LD_VAR 0 49
61978: PUSH
61979: LD_VAR 0 50
61983: PUSH
61984: LD_VAR 0 51
61988: PUSH
61989: LD_VAR 0 52
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: PUSH
62002: LD_VAR 0 4
62006: PUSH
62007: LD_INT 1
62009: PLUS
62010: ARRAY
62011: ST_TO_ADDR
62012: GO 62203
62014: LD_INT 4
62016: DOUBLE
62017: EQUAL
62018: IFTRUE 62040
62020: LD_INT 5
62022: DOUBLE
62023: EQUAL
62024: IFTRUE 62040
62026: LD_INT 34
62028: DOUBLE
62029: EQUAL
62030: IFTRUE 62040
62032: LD_INT 37
62034: DOUBLE
62035: EQUAL
62036: IFTRUE 62040
62038: GO 62096
62040: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62041: LD_ADDR_VAR 0 9
62045: PUSH
62046: LD_VAR 0 53
62050: PUSH
62051: LD_VAR 0 54
62055: PUSH
62056: LD_VAR 0 55
62060: PUSH
62061: LD_VAR 0 56
62065: PUSH
62066: LD_VAR 0 57
62070: PUSH
62071: LD_VAR 0 58
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: PUSH
62084: LD_VAR 0 4
62088: PUSH
62089: LD_INT 1
62091: PLUS
62092: ARRAY
62093: ST_TO_ADDR
62094: GO 62203
62096: LD_INT 31
62098: DOUBLE
62099: EQUAL
62100: IFTRUE 62146
62102: LD_INT 32
62104: DOUBLE
62105: EQUAL
62106: IFTRUE 62146
62108: LD_INT 33
62110: DOUBLE
62111: EQUAL
62112: IFTRUE 62146
62114: LD_INT 27
62116: DOUBLE
62117: EQUAL
62118: IFTRUE 62146
62120: LD_INT 26
62122: DOUBLE
62123: EQUAL
62124: IFTRUE 62146
62126: LD_INT 28
62128: DOUBLE
62129: EQUAL
62130: IFTRUE 62146
62132: LD_INT 29
62134: DOUBLE
62135: EQUAL
62136: IFTRUE 62146
62138: LD_INT 30
62140: DOUBLE
62141: EQUAL
62142: IFTRUE 62146
62144: GO 62202
62146: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62147: LD_ADDR_VAR 0 9
62151: PUSH
62152: LD_VAR 0 59
62156: PUSH
62157: LD_VAR 0 60
62161: PUSH
62162: LD_VAR 0 61
62166: PUSH
62167: LD_VAR 0 62
62171: PUSH
62172: LD_VAR 0 63
62176: PUSH
62177: LD_VAR 0 64
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: PUSH
62190: LD_VAR 0 4
62194: PUSH
62195: LD_INT 1
62197: PLUS
62198: ARRAY
62199: ST_TO_ADDR
62200: GO 62203
62202: POP
// temp_list2 = [ ] ;
62203: LD_ADDR_VAR 0 10
62207: PUSH
62208: EMPTY
62209: ST_TO_ADDR
// for i in temp_list do
62210: LD_ADDR_VAR 0 8
62214: PUSH
62215: LD_VAR 0 9
62219: PUSH
62220: FOR_IN
62221: IFFALSE 62273
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62223: LD_ADDR_VAR 0 10
62227: PUSH
62228: LD_VAR 0 10
62232: PUSH
62233: LD_VAR 0 8
62237: PUSH
62238: LD_INT 1
62240: ARRAY
62241: PUSH
62242: LD_VAR 0 2
62246: PLUS
62247: PUSH
62248: LD_VAR 0 8
62252: PUSH
62253: LD_INT 2
62255: ARRAY
62256: PUSH
62257: LD_VAR 0 3
62261: PLUS
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: EMPTY
62268: LIST
62269: ADD
62270: ST_TO_ADDR
62271: GO 62220
62273: POP
62274: POP
// result = temp_list2 ;
62275: LD_ADDR_VAR 0 7
62279: PUSH
62280: LD_VAR 0 10
62284: ST_TO_ADDR
// end ;
62285: LD_VAR 0 7
62289: RET
// export function EnemyInRange ( unit , dist ) ; begin
62290: LD_INT 0
62292: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62293: LD_ADDR_VAR 0 3
62297: PUSH
62298: LD_VAR 0 1
62302: PPUSH
62303: CALL_OW 255
62307: PPUSH
62308: LD_VAR 0 1
62312: PPUSH
62313: CALL_OW 250
62317: PPUSH
62318: LD_VAR 0 1
62322: PPUSH
62323: CALL_OW 251
62327: PPUSH
62328: LD_VAR 0 2
62332: PPUSH
62333: CALL 35663 0 4
62337: PUSH
62338: LD_INT 4
62340: ARRAY
62341: ST_TO_ADDR
// end ;
62342: LD_VAR 0 3
62346: RET
// export function PlayerSeeMe ( unit ) ; begin
62347: LD_INT 0
62349: PPUSH
// result := See ( your_side , unit ) ;
62350: LD_ADDR_VAR 0 2
62354: PUSH
62355: LD_OWVAR 2
62359: PPUSH
62360: LD_VAR 0 1
62364: PPUSH
62365: CALL_OW 292
62369: ST_TO_ADDR
// end ;
62370: LD_VAR 0 2
62374: RET
// export function ReverseDir ( unit ) ; begin
62375: LD_INT 0
62377: PPUSH
// if not unit then
62378: LD_VAR 0 1
62382: NOT
62383: IFFALSE 62387
// exit ;
62385: GO 62410
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62387: LD_ADDR_VAR 0 2
62391: PUSH
62392: LD_VAR 0 1
62396: PPUSH
62397: CALL_OW 254
62401: PUSH
62402: LD_INT 3
62404: PLUS
62405: PUSH
62406: LD_INT 6
62408: MOD
62409: ST_TO_ADDR
// end ;
62410: LD_VAR 0 2
62414: RET
// export function ReverseArray ( array ) ; var i ; begin
62415: LD_INT 0
62417: PPUSH
62418: PPUSH
// if not array then
62419: LD_VAR 0 1
62423: NOT
62424: IFFALSE 62428
// exit ;
62426: GO 62483
// result := [ ] ;
62428: LD_ADDR_VAR 0 2
62432: PUSH
62433: EMPTY
62434: ST_TO_ADDR
// for i := array downto 1 do
62435: LD_ADDR_VAR 0 3
62439: PUSH
62440: DOUBLE
62441: LD_VAR 0 1
62445: INC
62446: ST_TO_ADDR
62447: LD_INT 1
62449: PUSH
62450: FOR_DOWNTO
62451: IFFALSE 62481
// result := Join ( result , array [ i ] ) ;
62453: LD_ADDR_VAR 0 2
62457: PUSH
62458: LD_VAR 0 2
62462: PPUSH
62463: LD_VAR 0 1
62467: PUSH
62468: LD_VAR 0 3
62472: ARRAY
62473: PPUSH
62474: CALL 67139 0 2
62478: ST_TO_ADDR
62479: GO 62450
62481: POP
62482: POP
// end ;
62483: LD_VAR 0 2
62487: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62488: LD_INT 0
62490: PPUSH
62491: PPUSH
62492: PPUSH
62493: PPUSH
62494: PPUSH
62495: PPUSH
// if not unit or not hexes then
62496: LD_VAR 0 1
62500: NOT
62501: PUSH
62502: LD_VAR 0 2
62506: NOT
62507: OR
62508: IFFALSE 62512
// exit ;
62510: GO 62635
// dist := 9999 ;
62512: LD_ADDR_VAR 0 5
62516: PUSH
62517: LD_INT 9999
62519: ST_TO_ADDR
// for i = 1 to hexes do
62520: LD_ADDR_VAR 0 4
62524: PUSH
62525: DOUBLE
62526: LD_INT 1
62528: DEC
62529: ST_TO_ADDR
62530: LD_VAR 0 2
62534: PUSH
62535: FOR_TO
62536: IFFALSE 62623
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62538: LD_ADDR_VAR 0 6
62542: PUSH
62543: LD_VAR 0 1
62547: PPUSH
62548: LD_VAR 0 2
62552: PUSH
62553: LD_VAR 0 4
62557: ARRAY
62558: PUSH
62559: LD_INT 1
62561: ARRAY
62562: PPUSH
62563: LD_VAR 0 2
62567: PUSH
62568: LD_VAR 0 4
62572: ARRAY
62573: PUSH
62574: LD_INT 2
62576: ARRAY
62577: PPUSH
62578: CALL_OW 297
62582: ST_TO_ADDR
// if tdist < dist then
62583: LD_VAR 0 6
62587: PUSH
62588: LD_VAR 0 5
62592: LESS
62593: IFFALSE 62621
// begin hex := hexes [ i ] ;
62595: LD_ADDR_VAR 0 8
62599: PUSH
62600: LD_VAR 0 2
62604: PUSH
62605: LD_VAR 0 4
62609: ARRAY
62610: ST_TO_ADDR
// dist := tdist ;
62611: LD_ADDR_VAR 0 5
62615: PUSH
62616: LD_VAR 0 6
62620: ST_TO_ADDR
// end ; end ;
62621: GO 62535
62623: POP
62624: POP
// result := hex ;
62625: LD_ADDR_VAR 0 3
62629: PUSH
62630: LD_VAR 0 8
62634: ST_TO_ADDR
// end ;
62635: LD_VAR 0 3
62639: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62640: LD_INT 0
62642: PPUSH
62643: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62644: LD_VAR 0 1
62648: NOT
62649: PUSH
62650: LD_VAR 0 1
62654: PUSH
62655: LD_INT 21
62657: PUSH
62658: LD_INT 2
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 23
62667: PUSH
62668: LD_INT 2
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PPUSH
62679: CALL_OW 69
62683: IN
62684: NOT
62685: OR
62686: IFFALSE 62690
// exit ;
62688: GO 62737
// for i = 1 to 3 do
62690: LD_ADDR_VAR 0 3
62694: PUSH
62695: DOUBLE
62696: LD_INT 1
62698: DEC
62699: ST_TO_ADDR
62700: LD_INT 3
62702: PUSH
62703: FOR_TO
62704: IFFALSE 62735
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62706: LD_VAR 0 1
62710: PPUSH
62711: CALL_OW 250
62715: PPUSH
62716: LD_VAR 0 1
62720: PPUSH
62721: CALL_OW 251
62725: PPUSH
62726: LD_INT 1
62728: PPUSH
62729: CALL_OW 453
62733: GO 62703
62735: POP
62736: POP
// end ;
62737: LD_VAR 0 2
62741: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62742: LD_INT 0
62744: PPUSH
62745: PPUSH
62746: PPUSH
62747: PPUSH
62748: PPUSH
62749: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62750: LD_VAR 0 1
62754: NOT
62755: PUSH
62756: LD_VAR 0 2
62760: NOT
62761: OR
62762: PUSH
62763: LD_VAR 0 1
62767: PPUSH
62768: CALL_OW 314
62772: OR
62773: IFFALSE 62777
// exit ;
62775: GO 63244
// if GetLives ( i ) < 250 then
62777: LD_VAR 0 4
62781: PPUSH
62782: CALL_OW 256
62786: PUSH
62787: LD_INT 250
62789: LESS
62790: IFFALSE 62803
// begin ComAutodestruct ( i ) ;
62792: LD_VAR 0 4
62796: PPUSH
62797: CALL 62640 0 1
// exit ;
62801: GO 63244
// end ; x := GetX ( enemy_unit ) ;
62803: LD_ADDR_VAR 0 7
62807: PUSH
62808: LD_VAR 0 2
62812: PPUSH
62813: CALL_OW 250
62817: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62818: LD_ADDR_VAR 0 8
62822: PUSH
62823: LD_VAR 0 2
62827: PPUSH
62828: CALL_OW 251
62832: ST_TO_ADDR
// if not x or not y then
62833: LD_VAR 0 7
62837: NOT
62838: PUSH
62839: LD_VAR 0 8
62843: NOT
62844: OR
62845: IFFALSE 62849
// exit ;
62847: GO 63244
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62849: LD_ADDR_VAR 0 6
62853: PUSH
62854: LD_VAR 0 7
62858: PPUSH
62859: LD_INT 0
62861: PPUSH
62862: LD_INT 4
62864: PPUSH
62865: CALL_OW 272
62869: PUSH
62870: LD_VAR 0 8
62874: PPUSH
62875: LD_INT 0
62877: PPUSH
62878: LD_INT 4
62880: PPUSH
62881: CALL_OW 273
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_VAR 0 7
62894: PPUSH
62895: LD_INT 1
62897: PPUSH
62898: LD_INT 4
62900: PPUSH
62901: CALL_OW 272
62905: PUSH
62906: LD_VAR 0 8
62910: PPUSH
62911: LD_INT 1
62913: PPUSH
62914: LD_INT 4
62916: PPUSH
62917: CALL_OW 273
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_VAR 0 7
62930: PPUSH
62931: LD_INT 2
62933: PPUSH
62934: LD_INT 4
62936: PPUSH
62937: CALL_OW 272
62941: PUSH
62942: LD_VAR 0 8
62946: PPUSH
62947: LD_INT 2
62949: PPUSH
62950: LD_INT 4
62952: PPUSH
62953: CALL_OW 273
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_VAR 0 7
62966: PPUSH
62967: LD_INT 3
62969: PPUSH
62970: LD_INT 4
62972: PPUSH
62973: CALL_OW 272
62977: PUSH
62978: LD_VAR 0 8
62982: PPUSH
62983: LD_INT 3
62985: PPUSH
62986: LD_INT 4
62988: PPUSH
62989: CALL_OW 273
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_VAR 0 7
63002: PPUSH
63003: LD_INT 4
63005: PPUSH
63006: LD_INT 4
63008: PPUSH
63009: CALL_OW 272
63013: PUSH
63014: LD_VAR 0 8
63018: PPUSH
63019: LD_INT 4
63021: PPUSH
63022: LD_INT 4
63024: PPUSH
63025: CALL_OW 273
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_VAR 0 7
63038: PPUSH
63039: LD_INT 5
63041: PPUSH
63042: LD_INT 4
63044: PPUSH
63045: CALL_OW 272
63049: PUSH
63050: LD_VAR 0 8
63054: PPUSH
63055: LD_INT 5
63057: PPUSH
63058: LD_INT 4
63060: PPUSH
63061: CALL_OW 273
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: ST_TO_ADDR
// for i = tmp downto 1 do
63078: LD_ADDR_VAR 0 4
63082: PUSH
63083: DOUBLE
63084: LD_VAR 0 6
63088: INC
63089: ST_TO_ADDR
63090: LD_INT 1
63092: PUSH
63093: FOR_DOWNTO
63094: IFFALSE 63195
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63096: LD_VAR 0 6
63100: PUSH
63101: LD_VAR 0 4
63105: ARRAY
63106: PUSH
63107: LD_INT 1
63109: ARRAY
63110: PPUSH
63111: LD_VAR 0 6
63115: PUSH
63116: LD_VAR 0 4
63120: ARRAY
63121: PUSH
63122: LD_INT 2
63124: ARRAY
63125: PPUSH
63126: CALL_OW 488
63130: NOT
63131: PUSH
63132: LD_VAR 0 6
63136: PUSH
63137: LD_VAR 0 4
63141: ARRAY
63142: PUSH
63143: LD_INT 1
63145: ARRAY
63146: PPUSH
63147: LD_VAR 0 6
63151: PUSH
63152: LD_VAR 0 4
63156: ARRAY
63157: PUSH
63158: LD_INT 2
63160: ARRAY
63161: PPUSH
63162: CALL_OW 428
63166: PUSH
63167: LD_INT 0
63169: NONEQUAL
63170: OR
63171: IFFALSE 63193
// tmp := Delete ( tmp , i ) ;
63173: LD_ADDR_VAR 0 6
63177: PUSH
63178: LD_VAR 0 6
63182: PPUSH
63183: LD_VAR 0 4
63187: PPUSH
63188: CALL_OW 3
63192: ST_TO_ADDR
63193: GO 63093
63195: POP
63196: POP
// j := GetClosestHex ( unit , tmp ) ;
63197: LD_ADDR_VAR 0 5
63201: PUSH
63202: LD_VAR 0 1
63206: PPUSH
63207: LD_VAR 0 6
63211: PPUSH
63212: CALL 62488 0 2
63216: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63217: LD_VAR 0 1
63221: PPUSH
63222: LD_VAR 0 5
63226: PUSH
63227: LD_INT 1
63229: ARRAY
63230: PPUSH
63231: LD_VAR 0 5
63235: PUSH
63236: LD_INT 2
63238: ARRAY
63239: PPUSH
63240: CALL_OW 111
// end ;
63244: LD_VAR 0 3
63248: RET
// export function PrepareApemanSoldier ( ) ; begin
63249: LD_INT 0
63251: PPUSH
// uc_nation := 0 ;
63252: LD_ADDR_OWVAR 21
63256: PUSH
63257: LD_INT 0
63259: ST_TO_ADDR
// hc_sex := sex_male ;
63260: LD_ADDR_OWVAR 27
63264: PUSH
63265: LD_INT 1
63267: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63268: LD_ADDR_OWVAR 28
63272: PUSH
63273: LD_INT 15
63275: ST_TO_ADDR
// hc_gallery :=  ;
63276: LD_ADDR_OWVAR 33
63280: PUSH
63281: LD_STRING 
63283: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63284: LD_ADDR_OWVAR 31
63288: PUSH
63289: LD_INT 0
63291: PPUSH
63292: LD_INT 3
63294: PPUSH
63295: CALL_OW 12
63299: PUSH
63300: LD_INT 0
63302: PPUSH
63303: LD_INT 3
63305: PPUSH
63306: CALL_OW 12
63310: PUSH
63311: LD_INT 0
63313: PUSH
63314: LD_INT 0
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: ST_TO_ADDR
// end ;
63323: LD_VAR 0 1
63327: RET
// export function PrepareApemanEngineer ( ) ; begin
63328: LD_INT 0
63330: PPUSH
// uc_nation := 0 ;
63331: LD_ADDR_OWVAR 21
63335: PUSH
63336: LD_INT 0
63338: ST_TO_ADDR
// hc_sex := sex_male ;
63339: LD_ADDR_OWVAR 27
63343: PUSH
63344: LD_INT 1
63346: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63347: LD_ADDR_OWVAR 28
63351: PUSH
63352: LD_INT 16
63354: ST_TO_ADDR
// hc_gallery :=  ;
63355: LD_ADDR_OWVAR 33
63359: PUSH
63360: LD_STRING 
63362: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63363: LD_ADDR_OWVAR 31
63367: PUSH
63368: LD_INT 0
63370: PPUSH
63371: LD_INT 3
63373: PPUSH
63374: CALL_OW 12
63378: PUSH
63379: LD_INT 0
63381: PPUSH
63382: LD_INT 3
63384: PPUSH
63385: CALL_OW 12
63389: PUSH
63390: LD_INT 0
63392: PUSH
63393: LD_INT 0
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: ST_TO_ADDR
// end ;
63402: LD_VAR 0 1
63406: RET
// export function PrepareApeman ( agressivity ) ; begin
63407: LD_INT 0
63409: PPUSH
// uc_side := 0 ;
63410: LD_ADDR_OWVAR 20
63414: PUSH
63415: LD_INT 0
63417: ST_TO_ADDR
// uc_nation := 0 ;
63418: LD_ADDR_OWVAR 21
63422: PUSH
63423: LD_INT 0
63425: ST_TO_ADDR
// hc_sex := sex_male ;
63426: LD_ADDR_OWVAR 27
63430: PUSH
63431: LD_INT 1
63433: ST_TO_ADDR
// hc_class := class_apeman ;
63434: LD_ADDR_OWVAR 28
63438: PUSH
63439: LD_INT 12
63441: ST_TO_ADDR
// hc_gallery :=  ;
63442: LD_ADDR_OWVAR 33
63446: PUSH
63447: LD_STRING 
63449: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63450: LD_ADDR_OWVAR 35
63454: PUSH
63455: LD_VAR 0 1
63459: NEG
63460: PPUSH
63461: LD_VAR 0 1
63465: PPUSH
63466: CALL_OW 12
63470: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63471: LD_ADDR_OWVAR 31
63475: PUSH
63476: LD_INT 0
63478: PPUSH
63479: LD_INT 3
63481: PPUSH
63482: CALL_OW 12
63486: PUSH
63487: LD_INT 0
63489: PPUSH
63490: LD_INT 3
63492: PPUSH
63493: CALL_OW 12
63497: PUSH
63498: LD_INT 0
63500: PUSH
63501: LD_INT 0
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: ST_TO_ADDR
// end ;
63510: LD_VAR 0 2
63514: RET
// export function PrepareTiger ( agressivity ) ; begin
63515: LD_INT 0
63517: PPUSH
// uc_side := 0 ;
63518: LD_ADDR_OWVAR 20
63522: PUSH
63523: LD_INT 0
63525: ST_TO_ADDR
// uc_nation := 0 ;
63526: LD_ADDR_OWVAR 21
63530: PUSH
63531: LD_INT 0
63533: ST_TO_ADDR
// hc_class := class_tiger ;
63534: LD_ADDR_OWVAR 28
63538: PUSH
63539: LD_INT 14
63541: ST_TO_ADDR
// hc_gallery :=  ;
63542: LD_ADDR_OWVAR 33
63546: PUSH
63547: LD_STRING 
63549: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63550: LD_ADDR_OWVAR 35
63554: PUSH
63555: LD_VAR 0 1
63559: NEG
63560: PPUSH
63561: LD_VAR 0 1
63565: PPUSH
63566: CALL_OW 12
63570: ST_TO_ADDR
// end ;
63571: LD_VAR 0 2
63575: RET
// export function PrepareEnchidna ( ) ; begin
63576: LD_INT 0
63578: PPUSH
// uc_side := 0 ;
63579: LD_ADDR_OWVAR 20
63583: PUSH
63584: LD_INT 0
63586: ST_TO_ADDR
// uc_nation := 0 ;
63587: LD_ADDR_OWVAR 21
63591: PUSH
63592: LD_INT 0
63594: ST_TO_ADDR
// hc_class := class_baggie ;
63595: LD_ADDR_OWVAR 28
63599: PUSH
63600: LD_INT 13
63602: ST_TO_ADDR
// hc_gallery :=  ;
63603: LD_ADDR_OWVAR 33
63607: PUSH
63608: LD_STRING 
63610: ST_TO_ADDR
// end ;
63611: LD_VAR 0 1
63615: RET
// export function PrepareFrog ( ) ; begin
63616: LD_INT 0
63618: PPUSH
// uc_side := 0 ;
63619: LD_ADDR_OWVAR 20
63623: PUSH
63624: LD_INT 0
63626: ST_TO_ADDR
// uc_nation := 0 ;
63627: LD_ADDR_OWVAR 21
63631: PUSH
63632: LD_INT 0
63634: ST_TO_ADDR
// hc_class := class_frog ;
63635: LD_ADDR_OWVAR 28
63639: PUSH
63640: LD_INT 19
63642: ST_TO_ADDR
// hc_gallery :=  ;
63643: LD_ADDR_OWVAR 33
63647: PUSH
63648: LD_STRING 
63650: ST_TO_ADDR
// end ;
63651: LD_VAR 0 1
63655: RET
// export function PrepareFish ( ) ; begin
63656: LD_INT 0
63658: PPUSH
// uc_side := 0 ;
63659: LD_ADDR_OWVAR 20
63663: PUSH
63664: LD_INT 0
63666: ST_TO_ADDR
// uc_nation := 0 ;
63667: LD_ADDR_OWVAR 21
63671: PUSH
63672: LD_INT 0
63674: ST_TO_ADDR
// hc_class := class_fish ;
63675: LD_ADDR_OWVAR 28
63679: PUSH
63680: LD_INT 20
63682: ST_TO_ADDR
// hc_gallery :=  ;
63683: LD_ADDR_OWVAR 33
63687: PUSH
63688: LD_STRING 
63690: ST_TO_ADDR
// end ;
63691: LD_VAR 0 1
63695: RET
// export function PrepareBird ( ) ; begin
63696: LD_INT 0
63698: PPUSH
// uc_side := 0 ;
63699: LD_ADDR_OWVAR 20
63703: PUSH
63704: LD_INT 0
63706: ST_TO_ADDR
// uc_nation := 0 ;
63707: LD_ADDR_OWVAR 21
63711: PUSH
63712: LD_INT 0
63714: ST_TO_ADDR
// hc_class := class_phororhacos ;
63715: LD_ADDR_OWVAR 28
63719: PUSH
63720: LD_INT 18
63722: ST_TO_ADDR
// hc_gallery :=  ;
63723: LD_ADDR_OWVAR 33
63727: PUSH
63728: LD_STRING 
63730: ST_TO_ADDR
// end ;
63731: LD_VAR 0 1
63735: RET
// export function PrepareHorse ( ) ; begin
63736: LD_INT 0
63738: PPUSH
// uc_side := 0 ;
63739: LD_ADDR_OWVAR 20
63743: PUSH
63744: LD_INT 0
63746: ST_TO_ADDR
// uc_nation := 0 ;
63747: LD_ADDR_OWVAR 21
63751: PUSH
63752: LD_INT 0
63754: ST_TO_ADDR
// hc_class := class_horse ;
63755: LD_ADDR_OWVAR 28
63759: PUSH
63760: LD_INT 21
63762: ST_TO_ADDR
// hc_gallery :=  ;
63763: LD_ADDR_OWVAR 33
63767: PUSH
63768: LD_STRING 
63770: ST_TO_ADDR
// end ;
63771: LD_VAR 0 1
63775: RET
// export function PrepareMastodont ( ) ; begin
63776: LD_INT 0
63778: PPUSH
// uc_side := 0 ;
63779: LD_ADDR_OWVAR 20
63783: PUSH
63784: LD_INT 0
63786: ST_TO_ADDR
// uc_nation := 0 ;
63787: LD_ADDR_OWVAR 21
63791: PUSH
63792: LD_INT 0
63794: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63795: LD_ADDR_OWVAR 37
63799: PUSH
63800: LD_INT 31
63802: ST_TO_ADDR
// vc_control := control_rider ;
63803: LD_ADDR_OWVAR 38
63807: PUSH
63808: LD_INT 4
63810: ST_TO_ADDR
// end ;
63811: LD_VAR 0 1
63815: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63816: LD_INT 0
63818: PPUSH
63819: PPUSH
63820: PPUSH
// uc_side = 0 ;
63821: LD_ADDR_OWVAR 20
63825: PUSH
63826: LD_INT 0
63828: ST_TO_ADDR
// uc_nation = 0 ;
63829: LD_ADDR_OWVAR 21
63833: PUSH
63834: LD_INT 0
63836: ST_TO_ADDR
// InitHc_All ( ) ;
63837: CALL_OW 584
// InitVc ;
63841: CALL_OW 20
// if mastodonts then
63845: LD_VAR 0 6
63849: IFFALSE 63916
// for i = 1 to mastodonts do
63851: LD_ADDR_VAR 0 11
63855: PUSH
63856: DOUBLE
63857: LD_INT 1
63859: DEC
63860: ST_TO_ADDR
63861: LD_VAR 0 6
63865: PUSH
63866: FOR_TO
63867: IFFALSE 63914
// begin vc_chassis := 31 ;
63869: LD_ADDR_OWVAR 37
63873: PUSH
63874: LD_INT 31
63876: ST_TO_ADDR
// vc_control := control_rider ;
63877: LD_ADDR_OWVAR 38
63881: PUSH
63882: LD_INT 4
63884: ST_TO_ADDR
// animal := CreateVehicle ;
63885: LD_ADDR_VAR 0 12
63889: PUSH
63890: CALL_OW 45
63894: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63895: LD_VAR 0 12
63899: PPUSH
63900: LD_VAR 0 8
63904: PPUSH
63905: LD_INT 0
63907: PPUSH
63908: CALL 66044 0 3
// end ;
63912: GO 63866
63914: POP
63915: POP
// if horses then
63916: LD_VAR 0 5
63920: IFFALSE 63987
// for i = 1 to horses do
63922: LD_ADDR_VAR 0 11
63926: PUSH
63927: DOUBLE
63928: LD_INT 1
63930: DEC
63931: ST_TO_ADDR
63932: LD_VAR 0 5
63936: PUSH
63937: FOR_TO
63938: IFFALSE 63985
// begin hc_class := 21 ;
63940: LD_ADDR_OWVAR 28
63944: PUSH
63945: LD_INT 21
63947: ST_TO_ADDR
// hc_gallery :=  ;
63948: LD_ADDR_OWVAR 33
63952: PUSH
63953: LD_STRING 
63955: ST_TO_ADDR
// animal := CreateHuman ;
63956: LD_ADDR_VAR 0 12
63960: PUSH
63961: CALL_OW 44
63965: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63966: LD_VAR 0 12
63970: PPUSH
63971: LD_VAR 0 8
63975: PPUSH
63976: LD_INT 0
63978: PPUSH
63979: CALL 66044 0 3
// end ;
63983: GO 63937
63985: POP
63986: POP
// if birds then
63987: LD_VAR 0 1
63991: IFFALSE 64058
// for i = 1 to birds do
63993: LD_ADDR_VAR 0 11
63997: PUSH
63998: DOUBLE
63999: LD_INT 1
64001: DEC
64002: ST_TO_ADDR
64003: LD_VAR 0 1
64007: PUSH
64008: FOR_TO
64009: IFFALSE 64056
// begin hc_class := 18 ;
64011: LD_ADDR_OWVAR 28
64015: PUSH
64016: LD_INT 18
64018: ST_TO_ADDR
// hc_gallery =  ;
64019: LD_ADDR_OWVAR 33
64023: PUSH
64024: LD_STRING 
64026: ST_TO_ADDR
// animal := CreateHuman ;
64027: LD_ADDR_VAR 0 12
64031: PUSH
64032: CALL_OW 44
64036: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64037: LD_VAR 0 12
64041: PPUSH
64042: LD_VAR 0 8
64046: PPUSH
64047: LD_INT 0
64049: PPUSH
64050: CALL 66044 0 3
// end ;
64054: GO 64008
64056: POP
64057: POP
// if tigers then
64058: LD_VAR 0 2
64062: IFFALSE 64146
// for i = 1 to tigers do
64064: LD_ADDR_VAR 0 11
64068: PUSH
64069: DOUBLE
64070: LD_INT 1
64072: DEC
64073: ST_TO_ADDR
64074: LD_VAR 0 2
64078: PUSH
64079: FOR_TO
64080: IFFALSE 64144
// begin hc_class = class_tiger ;
64082: LD_ADDR_OWVAR 28
64086: PUSH
64087: LD_INT 14
64089: ST_TO_ADDR
// hc_gallery =  ;
64090: LD_ADDR_OWVAR 33
64094: PUSH
64095: LD_STRING 
64097: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64098: LD_ADDR_OWVAR 35
64102: PUSH
64103: LD_INT 7
64105: NEG
64106: PPUSH
64107: LD_INT 7
64109: PPUSH
64110: CALL_OW 12
64114: ST_TO_ADDR
// animal := CreateHuman ;
64115: LD_ADDR_VAR 0 12
64119: PUSH
64120: CALL_OW 44
64124: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64125: LD_VAR 0 12
64129: PPUSH
64130: LD_VAR 0 8
64134: PPUSH
64135: LD_INT 0
64137: PPUSH
64138: CALL 66044 0 3
// end ;
64142: GO 64079
64144: POP
64145: POP
// if apemans then
64146: LD_VAR 0 3
64150: IFFALSE 64273
// for i = 1 to apemans do
64152: LD_ADDR_VAR 0 11
64156: PUSH
64157: DOUBLE
64158: LD_INT 1
64160: DEC
64161: ST_TO_ADDR
64162: LD_VAR 0 3
64166: PUSH
64167: FOR_TO
64168: IFFALSE 64271
// begin hc_class = class_apeman ;
64170: LD_ADDR_OWVAR 28
64174: PUSH
64175: LD_INT 12
64177: ST_TO_ADDR
// hc_gallery =  ;
64178: LD_ADDR_OWVAR 33
64182: PUSH
64183: LD_STRING 
64185: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64186: LD_ADDR_OWVAR 35
64190: PUSH
64191: LD_INT 2
64193: NEG
64194: PPUSH
64195: LD_INT 2
64197: PPUSH
64198: CALL_OW 12
64202: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64203: LD_ADDR_OWVAR 31
64207: PUSH
64208: LD_INT 1
64210: PPUSH
64211: LD_INT 3
64213: PPUSH
64214: CALL_OW 12
64218: PUSH
64219: LD_INT 1
64221: PPUSH
64222: LD_INT 3
64224: PPUSH
64225: CALL_OW 12
64229: PUSH
64230: LD_INT 0
64232: PUSH
64233: LD_INT 0
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: ST_TO_ADDR
// animal := CreateHuman ;
64242: LD_ADDR_VAR 0 12
64246: PUSH
64247: CALL_OW 44
64251: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64252: LD_VAR 0 12
64256: PPUSH
64257: LD_VAR 0 8
64261: PPUSH
64262: LD_INT 0
64264: PPUSH
64265: CALL 66044 0 3
// end ;
64269: GO 64167
64271: POP
64272: POP
// if enchidnas then
64273: LD_VAR 0 4
64277: IFFALSE 64344
// for i = 1 to enchidnas do
64279: LD_ADDR_VAR 0 11
64283: PUSH
64284: DOUBLE
64285: LD_INT 1
64287: DEC
64288: ST_TO_ADDR
64289: LD_VAR 0 4
64293: PUSH
64294: FOR_TO
64295: IFFALSE 64342
// begin hc_class = 13 ;
64297: LD_ADDR_OWVAR 28
64301: PUSH
64302: LD_INT 13
64304: ST_TO_ADDR
// hc_gallery =  ;
64305: LD_ADDR_OWVAR 33
64309: PUSH
64310: LD_STRING 
64312: ST_TO_ADDR
// animal := CreateHuman ;
64313: LD_ADDR_VAR 0 12
64317: PUSH
64318: CALL_OW 44
64322: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64323: LD_VAR 0 12
64327: PPUSH
64328: LD_VAR 0 8
64332: PPUSH
64333: LD_INT 0
64335: PPUSH
64336: CALL 66044 0 3
// end ;
64340: GO 64294
64342: POP
64343: POP
// if fishes then
64344: LD_VAR 0 7
64348: IFFALSE 64415
// for i = 1 to fishes do
64350: LD_ADDR_VAR 0 11
64354: PUSH
64355: DOUBLE
64356: LD_INT 1
64358: DEC
64359: ST_TO_ADDR
64360: LD_VAR 0 7
64364: PUSH
64365: FOR_TO
64366: IFFALSE 64413
// begin hc_class = 20 ;
64368: LD_ADDR_OWVAR 28
64372: PUSH
64373: LD_INT 20
64375: ST_TO_ADDR
// hc_gallery =  ;
64376: LD_ADDR_OWVAR 33
64380: PUSH
64381: LD_STRING 
64383: ST_TO_ADDR
// animal := CreateHuman ;
64384: LD_ADDR_VAR 0 12
64388: PUSH
64389: CALL_OW 44
64393: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64394: LD_VAR 0 12
64398: PPUSH
64399: LD_VAR 0 9
64403: PPUSH
64404: LD_INT 0
64406: PPUSH
64407: CALL 66044 0 3
// end ;
64411: GO 64365
64413: POP
64414: POP
// end ;
64415: LD_VAR 0 10
64419: RET
// export function WantHeal ( sci , unit ) ; begin
64420: LD_INT 0
64422: PPUSH
// if GetTaskList ( sci ) > 0 then
64423: LD_VAR 0 1
64427: PPUSH
64428: CALL_OW 437
64432: PUSH
64433: LD_INT 0
64435: GREATER
64436: IFFALSE 64506
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64438: LD_VAR 0 1
64442: PPUSH
64443: CALL_OW 437
64447: PUSH
64448: LD_INT 1
64450: ARRAY
64451: PUSH
64452: LD_INT 1
64454: ARRAY
64455: PUSH
64456: LD_STRING l
64458: EQUAL
64459: PUSH
64460: LD_VAR 0 1
64464: PPUSH
64465: CALL_OW 437
64469: PUSH
64470: LD_INT 1
64472: ARRAY
64473: PUSH
64474: LD_INT 4
64476: ARRAY
64477: PUSH
64478: LD_VAR 0 2
64482: EQUAL
64483: AND
64484: IFFALSE 64496
// result := true else
64486: LD_ADDR_VAR 0 3
64490: PUSH
64491: LD_INT 1
64493: ST_TO_ADDR
64494: GO 64504
// result := false ;
64496: LD_ADDR_VAR 0 3
64500: PUSH
64501: LD_INT 0
64503: ST_TO_ADDR
// end else
64504: GO 64514
// result := false ;
64506: LD_ADDR_VAR 0 3
64510: PUSH
64511: LD_INT 0
64513: ST_TO_ADDR
// end ;
64514: LD_VAR 0 3
64518: RET
// export function HealTarget ( sci ) ; begin
64519: LD_INT 0
64521: PPUSH
// if not sci then
64522: LD_VAR 0 1
64526: NOT
64527: IFFALSE 64531
// exit ;
64529: GO 64596
// result := 0 ;
64531: LD_ADDR_VAR 0 2
64535: PUSH
64536: LD_INT 0
64538: ST_TO_ADDR
// if GetTaskList ( sci ) then
64539: LD_VAR 0 1
64543: PPUSH
64544: CALL_OW 437
64548: IFFALSE 64596
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64550: LD_VAR 0 1
64554: PPUSH
64555: CALL_OW 437
64559: PUSH
64560: LD_INT 1
64562: ARRAY
64563: PUSH
64564: LD_INT 1
64566: ARRAY
64567: PUSH
64568: LD_STRING l
64570: EQUAL
64571: IFFALSE 64596
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64573: LD_ADDR_VAR 0 2
64577: PUSH
64578: LD_VAR 0 1
64582: PPUSH
64583: CALL_OW 437
64587: PUSH
64588: LD_INT 1
64590: ARRAY
64591: PUSH
64592: LD_INT 4
64594: ARRAY
64595: ST_TO_ADDR
// end ;
64596: LD_VAR 0 2
64600: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64601: LD_INT 0
64603: PPUSH
64604: PPUSH
64605: PPUSH
64606: PPUSH
// if not base_units then
64607: LD_VAR 0 1
64611: NOT
64612: IFFALSE 64616
// exit ;
64614: GO 64703
// result := false ;
64616: LD_ADDR_VAR 0 2
64620: PUSH
64621: LD_INT 0
64623: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64624: LD_ADDR_VAR 0 5
64628: PUSH
64629: LD_VAR 0 1
64633: PPUSH
64634: LD_INT 21
64636: PUSH
64637: LD_INT 3
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PPUSH
64644: CALL_OW 72
64648: ST_TO_ADDR
// if not tmp then
64649: LD_VAR 0 5
64653: NOT
64654: IFFALSE 64658
// exit ;
64656: GO 64703
// for i in tmp do
64658: LD_ADDR_VAR 0 3
64662: PUSH
64663: LD_VAR 0 5
64667: PUSH
64668: FOR_IN
64669: IFFALSE 64701
// begin result := EnemyInRange ( i , 22 ) ;
64671: LD_ADDR_VAR 0 2
64675: PUSH
64676: LD_VAR 0 3
64680: PPUSH
64681: LD_INT 22
64683: PPUSH
64684: CALL 62290 0 2
64688: ST_TO_ADDR
// if result then
64689: LD_VAR 0 2
64693: IFFALSE 64699
// exit ;
64695: POP
64696: POP
64697: GO 64703
// end ;
64699: GO 64668
64701: POP
64702: POP
// end ;
64703: LD_VAR 0 2
64707: RET
// export function FilterByTag ( units , tag ) ; begin
64708: LD_INT 0
64710: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64711: LD_ADDR_VAR 0 3
64715: PUSH
64716: LD_VAR 0 1
64720: PPUSH
64721: LD_INT 120
64723: PUSH
64724: LD_VAR 0 2
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PPUSH
64733: CALL_OW 72
64737: ST_TO_ADDR
// end ;
64738: LD_VAR 0 3
64742: RET
// export function IsDriver ( un ) ; begin
64743: LD_INT 0
64745: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64746: LD_ADDR_VAR 0 2
64750: PUSH
64751: LD_VAR 0 1
64755: PUSH
64756: LD_INT 55
64758: PUSH
64759: EMPTY
64760: LIST
64761: PPUSH
64762: CALL_OW 69
64766: IN
64767: ST_TO_ADDR
// end ;
64768: LD_VAR 0 2
64772: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64773: LD_INT 0
64775: PPUSH
64776: PPUSH
// list := [ ] ;
64777: LD_ADDR_VAR 0 5
64781: PUSH
64782: EMPTY
64783: ST_TO_ADDR
// case d of 0 :
64784: LD_VAR 0 3
64788: PUSH
64789: LD_INT 0
64791: DOUBLE
64792: EQUAL
64793: IFTRUE 64797
64795: GO 64930
64797: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64798: LD_ADDR_VAR 0 5
64802: PUSH
64803: LD_VAR 0 1
64807: PUSH
64808: LD_INT 4
64810: MINUS
64811: PUSH
64812: LD_VAR 0 2
64816: PUSH
64817: LD_INT 4
64819: MINUS
64820: PUSH
64821: LD_INT 2
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: LIST
64828: PUSH
64829: LD_VAR 0 1
64833: PUSH
64834: LD_INT 3
64836: MINUS
64837: PUSH
64838: LD_VAR 0 2
64842: PUSH
64843: LD_INT 1
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: LIST
64850: PUSH
64851: LD_VAR 0 1
64855: PUSH
64856: LD_INT 4
64858: PLUS
64859: PUSH
64860: LD_VAR 0 2
64864: PUSH
64865: LD_INT 4
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: LIST
64872: PUSH
64873: LD_VAR 0 1
64877: PUSH
64878: LD_INT 3
64880: PLUS
64881: PUSH
64882: LD_VAR 0 2
64886: PUSH
64887: LD_INT 3
64889: PLUS
64890: PUSH
64891: LD_INT 5
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: LIST
64898: PUSH
64899: LD_VAR 0 1
64903: PUSH
64904: LD_VAR 0 2
64908: PUSH
64909: LD_INT 4
64911: PLUS
64912: PUSH
64913: LD_INT 0
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: LIST
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: ST_TO_ADDR
// end ; 1 :
64928: GO 65628
64930: LD_INT 1
64932: DOUBLE
64933: EQUAL
64934: IFTRUE 64938
64936: GO 65071
64938: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64939: LD_ADDR_VAR 0 5
64943: PUSH
64944: LD_VAR 0 1
64948: PUSH
64949: LD_VAR 0 2
64953: PUSH
64954: LD_INT 4
64956: MINUS
64957: PUSH
64958: LD_INT 3
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: LIST
64965: PUSH
64966: LD_VAR 0 1
64970: PUSH
64971: LD_INT 3
64973: MINUS
64974: PUSH
64975: LD_VAR 0 2
64979: PUSH
64980: LD_INT 3
64982: MINUS
64983: PUSH
64984: LD_INT 2
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: LIST
64991: PUSH
64992: LD_VAR 0 1
64996: PUSH
64997: LD_INT 4
64999: MINUS
65000: PUSH
65001: LD_VAR 0 2
65005: PUSH
65006: LD_INT 1
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: LIST
65013: PUSH
65014: LD_VAR 0 1
65018: PUSH
65019: LD_VAR 0 2
65023: PUSH
65024: LD_INT 3
65026: PLUS
65027: PUSH
65028: LD_INT 0
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: LIST
65035: PUSH
65036: LD_VAR 0 1
65040: PUSH
65041: LD_INT 4
65043: PLUS
65044: PUSH
65045: LD_VAR 0 2
65049: PUSH
65050: LD_INT 4
65052: PLUS
65053: PUSH
65054: LD_INT 5
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: LIST
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: ST_TO_ADDR
// end ; 2 :
65069: GO 65628
65071: LD_INT 2
65073: DOUBLE
65074: EQUAL
65075: IFTRUE 65079
65077: GO 65208
65079: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65080: LD_ADDR_VAR 0 5
65084: PUSH
65085: LD_VAR 0 1
65089: PUSH
65090: LD_VAR 0 2
65094: PUSH
65095: LD_INT 3
65097: MINUS
65098: PUSH
65099: LD_INT 3
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: LIST
65106: PUSH
65107: LD_VAR 0 1
65111: PUSH
65112: LD_INT 4
65114: PLUS
65115: PUSH
65116: LD_VAR 0 2
65120: PUSH
65121: LD_INT 4
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: LIST
65128: PUSH
65129: LD_VAR 0 1
65133: PUSH
65134: LD_VAR 0 2
65138: PUSH
65139: LD_INT 4
65141: PLUS
65142: PUSH
65143: LD_INT 0
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: LIST
65150: PUSH
65151: LD_VAR 0 1
65155: PUSH
65156: LD_INT 3
65158: MINUS
65159: PUSH
65160: LD_VAR 0 2
65164: PUSH
65165: LD_INT 1
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: LIST
65172: PUSH
65173: LD_VAR 0 1
65177: PUSH
65178: LD_INT 4
65180: MINUS
65181: PUSH
65182: LD_VAR 0 2
65186: PUSH
65187: LD_INT 4
65189: MINUS
65190: PUSH
65191: LD_INT 2
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: LIST
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: ST_TO_ADDR
// end ; 3 :
65206: GO 65628
65208: LD_INT 3
65210: DOUBLE
65211: EQUAL
65212: IFTRUE 65216
65214: GO 65349
65216: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65217: LD_ADDR_VAR 0 5
65221: PUSH
65222: LD_VAR 0 1
65226: PUSH
65227: LD_INT 3
65229: PLUS
65230: PUSH
65231: LD_VAR 0 2
65235: PUSH
65236: LD_INT 4
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: LIST
65243: PUSH
65244: LD_VAR 0 1
65248: PUSH
65249: LD_INT 4
65251: PLUS
65252: PUSH
65253: LD_VAR 0 2
65257: PUSH
65258: LD_INT 4
65260: PLUS
65261: PUSH
65262: LD_INT 5
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: LIST
65269: PUSH
65270: LD_VAR 0 1
65274: PUSH
65275: LD_INT 4
65277: MINUS
65278: PUSH
65279: LD_VAR 0 2
65283: PUSH
65284: LD_INT 1
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: LIST
65291: PUSH
65292: LD_VAR 0 1
65296: PUSH
65297: LD_VAR 0 2
65301: PUSH
65302: LD_INT 4
65304: MINUS
65305: PUSH
65306: LD_INT 3
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: LIST
65313: PUSH
65314: LD_VAR 0 1
65318: PUSH
65319: LD_INT 3
65321: MINUS
65322: PUSH
65323: LD_VAR 0 2
65327: PUSH
65328: LD_INT 3
65330: MINUS
65331: PUSH
65332: LD_INT 2
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: LIST
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: ST_TO_ADDR
// end ; 4 :
65347: GO 65628
65349: LD_INT 4
65351: DOUBLE
65352: EQUAL
65353: IFTRUE 65357
65355: GO 65490
65357: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65358: LD_ADDR_VAR 0 5
65362: PUSH
65363: LD_VAR 0 1
65367: PUSH
65368: LD_VAR 0 2
65372: PUSH
65373: LD_INT 4
65375: PLUS
65376: PUSH
65377: LD_INT 0
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: LIST
65384: PUSH
65385: LD_VAR 0 1
65389: PUSH
65390: LD_INT 3
65392: PLUS
65393: PUSH
65394: LD_VAR 0 2
65398: PUSH
65399: LD_INT 3
65401: PLUS
65402: PUSH
65403: LD_INT 5
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: LIST
65410: PUSH
65411: LD_VAR 0 1
65415: PUSH
65416: LD_INT 4
65418: PLUS
65419: PUSH
65420: LD_VAR 0 2
65424: PUSH
65425: LD_INT 4
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: LIST
65432: PUSH
65433: LD_VAR 0 1
65437: PUSH
65438: LD_VAR 0 2
65442: PUSH
65443: LD_INT 3
65445: MINUS
65446: PUSH
65447: LD_INT 3
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: LIST
65454: PUSH
65455: LD_VAR 0 1
65459: PUSH
65460: LD_INT 4
65462: MINUS
65463: PUSH
65464: LD_VAR 0 2
65468: PUSH
65469: LD_INT 4
65471: MINUS
65472: PUSH
65473: LD_INT 2
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: LIST
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: LIST
65485: LIST
65486: LIST
65487: ST_TO_ADDR
// end ; 5 :
65488: GO 65628
65490: LD_INT 5
65492: DOUBLE
65493: EQUAL
65494: IFTRUE 65498
65496: GO 65627
65498: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65499: LD_ADDR_VAR 0 5
65503: PUSH
65504: LD_VAR 0 1
65508: PUSH
65509: LD_INT 4
65511: MINUS
65512: PUSH
65513: LD_VAR 0 2
65517: PUSH
65518: LD_INT 1
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: LIST
65525: PUSH
65526: LD_VAR 0 1
65530: PUSH
65531: LD_VAR 0 2
65535: PUSH
65536: LD_INT 4
65538: MINUS
65539: PUSH
65540: LD_INT 3
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: LIST
65547: PUSH
65548: LD_VAR 0 1
65552: PUSH
65553: LD_INT 4
65555: PLUS
65556: PUSH
65557: LD_VAR 0 2
65561: PUSH
65562: LD_INT 4
65564: PLUS
65565: PUSH
65566: LD_INT 5
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: LIST
65573: PUSH
65574: LD_VAR 0 1
65578: PUSH
65579: LD_INT 3
65581: PLUS
65582: PUSH
65583: LD_VAR 0 2
65587: PUSH
65588: LD_INT 4
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: LIST
65595: PUSH
65596: LD_VAR 0 1
65600: PUSH
65601: LD_VAR 0 2
65605: PUSH
65606: LD_INT 3
65608: PLUS
65609: PUSH
65610: LD_INT 0
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: LIST
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: ST_TO_ADDR
// end ; end ;
65625: GO 65628
65627: POP
// result := list ;
65628: LD_ADDR_VAR 0 4
65632: PUSH
65633: LD_VAR 0 5
65637: ST_TO_ADDR
// end ;
65638: LD_VAR 0 4
65642: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65643: LD_INT 0
65645: PPUSH
65646: PPUSH
65647: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65648: LD_VAR 0 1
65652: NOT
65653: PUSH
65654: LD_VAR 0 2
65658: PUSH
65659: LD_INT 1
65661: PUSH
65662: LD_INT 2
65664: PUSH
65665: LD_INT 3
65667: PUSH
65668: LD_INT 4
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: IN
65677: NOT
65678: OR
65679: IFFALSE 65683
// exit ;
65681: GO 65766
// tmp := [ ] ;
65683: LD_ADDR_VAR 0 5
65687: PUSH
65688: EMPTY
65689: ST_TO_ADDR
// for i in units do
65690: LD_ADDR_VAR 0 4
65694: PUSH
65695: LD_VAR 0 1
65699: PUSH
65700: FOR_IN
65701: IFFALSE 65735
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65703: LD_ADDR_VAR 0 5
65707: PUSH
65708: LD_VAR 0 5
65712: PPUSH
65713: LD_VAR 0 4
65717: PPUSH
65718: LD_VAR 0 2
65722: PPUSH
65723: CALL_OW 259
65727: PPUSH
65728: CALL 67139 0 2
65732: ST_TO_ADDR
65733: GO 65700
65735: POP
65736: POP
// if not tmp then
65737: LD_VAR 0 5
65741: NOT
65742: IFFALSE 65746
// exit ;
65744: GO 65766
// result := SortListByListDesc ( units , tmp ) ;
65746: LD_ADDR_VAR 0 3
65750: PUSH
65751: LD_VAR 0 1
65755: PPUSH
65756: LD_VAR 0 5
65760: PPUSH
65761: CALL_OW 77
65765: ST_TO_ADDR
// end ;
65766: LD_VAR 0 3
65770: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65771: LD_INT 0
65773: PPUSH
65774: PPUSH
65775: PPUSH
// result := false ;
65776: LD_ADDR_VAR 0 3
65780: PUSH
65781: LD_INT 0
65783: ST_TO_ADDR
// if not building then
65784: LD_VAR 0 2
65788: NOT
65789: IFFALSE 65793
// exit ;
65791: GO 65931
// x := GetX ( building ) ;
65793: LD_ADDR_VAR 0 4
65797: PUSH
65798: LD_VAR 0 2
65802: PPUSH
65803: CALL_OW 250
65807: ST_TO_ADDR
// y := GetY ( building ) ;
65808: LD_ADDR_VAR 0 5
65812: PUSH
65813: LD_VAR 0 2
65817: PPUSH
65818: CALL_OW 251
65822: ST_TO_ADDR
// if not x or not y then
65823: LD_VAR 0 4
65827: NOT
65828: PUSH
65829: LD_VAR 0 5
65833: NOT
65834: OR
65835: IFFALSE 65839
// exit ;
65837: GO 65931
// if GetTaskList ( unit ) then
65839: LD_VAR 0 1
65843: PPUSH
65844: CALL_OW 437
65848: IFFALSE 65931
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65850: LD_STRING e
65852: PUSH
65853: LD_VAR 0 1
65857: PPUSH
65858: CALL_OW 437
65862: PUSH
65863: LD_INT 1
65865: ARRAY
65866: PUSH
65867: LD_INT 1
65869: ARRAY
65870: EQUAL
65871: PUSH
65872: LD_VAR 0 4
65876: PUSH
65877: LD_VAR 0 1
65881: PPUSH
65882: CALL_OW 437
65886: PUSH
65887: LD_INT 1
65889: ARRAY
65890: PUSH
65891: LD_INT 2
65893: ARRAY
65894: EQUAL
65895: AND
65896: PUSH
65897: LD_VAR 0 5
65901: PUSH
65902: LD_VAR 0 1
65906: PPUSH
65907: CALL_OW 437
65911: PUSH
65912: LD_INT 1
65914: ARRAY
65915: PUSH
65916: LD_INT 3
65918: ARRAY
65919: EQUAL
65920: AND
65921: IFFALSE 65931
// result := true end ;
65923: LD_ADDR_VAR 0 3
65927: PUSH
65928: LD_INT 1
65930: ST_TO_ADDR
// end ;
65931: LD_VAR 0 3
65935: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65936: LD_INT 0
65938: PPUSH
// result := false ;
65939: LD_ADDR_VAR 0 4
65943: PUSH
65944: LD_INT 0
65946: ST_TO_ADDR
// if GetTaskList ( unit ) then
65947: LD_VAR 0 1
65951: PPUSH
65952: CALL_OW 437
65956: IFFALSE 66039
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65958: LD_STRING M
65960: PUSH
65961: LD_VAR 0 1
65965: PPUSH
65966: CALL_OW 437
65970: PUSH
65971: LD_INT 1
65973: ARRAY
65974: PUSH
65975: LD_INT 1
65977: ARRAY
65978: EQUAL
65979: PUSH
65980: LD_VAR 0 2
65984: PUSH
65985: LD_VAR 0 1
65989: PPUSH
65990: CALL_OW 437
65994: PUSH
65995: LD_INT 1
65997: ARRAY
65998: PUSH
65999: LD_INT 2
66001: ARRAY
66002: EQUAL
66003: AND
66004: PUSH
66005: LD_VAR 0 3
66009: PUSH
66010: LD_VAR 0 1
66014: PPUSH
66015: CALL_OW 437
66019: PUSH
66020: LD_INT 1
66022: ARRAY
66023: PUSH
66024: LD_INT 3
66026: ARRAY
66027: EQUAL
66028: AND
66029: IFFALSE 66039
// result := true ;
66031: LD_ADDR_VAR 0 4
66035: PUSH
66036: LD_INT 1
66038: ST_TO_ADDR
// end ; end ;
66039: LD_VAR 0 4
66043: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66044: LD_INT 0
66046: PPUSH
66047: PPUSH
66048: PPUSH
66049: PPUSH
// if not unit or not area then
66050: LD_VAR 0 1
66054: NOT
66055: PUSH
66056: LD_VAR 0 2
66060: NOT
66061: OR
66062: IFFALSE 66066
// exit ;
66064: GO 66242
// tmp := AreaToList ( area , i ) ;
66066: LD_ADDR_VAR 0 6
66070: PUSH
66071: LD_VAR 0 2
66075: PPUSH
66076: LD_VAR 0 5
66080: PPUSH
66081: CALL_OW 517
66085: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66086: LD_ADDR_VAR 0 5
66090: PUSH
66091: DOUBLE
66092: LD_INT 1
66094: DEC
66095: ST_TO_ADDR
66096: LD_VAR 0 6
66100: PUSH
66101: LD_INT 1
66103: ARRAY
66104: PUSH
66105: FOR_TO
66106: IFFALSE 66240
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66108: LD_ADDR_VAR 0 7
66112: PUSH
66113: LD_VAR 0 6
66117: PUSH
66118: LD_INT 1
66120: ARRAY
66121: PUSH
66122: LD_VAR 0 5
66126: ARRAY
66127: PUSH
66128: LD_VAR 0 6
66132: PUSH
66133: LD_INT 2
66135: ARRAY
66136: PUSH
66137: LD_VAR 0 5
66141: ARRAY
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
66147: LD_INT 92
66149: PUSH
66150: LD_VAR 0 7
66154: PUSH
66155: LD_INT 1
66157: ARRAY
66158: PUSH
66159: LD_VAR 0 7
66163: PUSH
66164: LD_INT 2
66166: ARRAY
66167: PUSH
66168: LD_INT 2
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: PPUSH
66177: CALL_OW 69
66181: PUSH
66182: LD_INT 0
66184: EQUAL
66185: IFFALSE 66238
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66187: LD_VAR 0 1
66191: PPUSH
66192: LD_VAR 0 7
66196: PUSH
66197: LD_INT 1
66199: ARRAY
66200: PPUSH
66201: LD_VAR 0 7
66205: PUSH
66206: LD_INT 2
66208: ARRAY
66209: PPUSH
66210: LD_VAR 0 3
66214: PPUSH
66215: CALL_OW 48
// result := IsPlaced ( unit ) ;
66219: LD_ADDR_VAR 0 4
66223: PUSH
66224: LD_VAR 0 1
66228: PPUSH
66229: CALL_OW 305
66233: ST_TO_ADDR
// exit ;
66234: POP
66235: POP
66236: GO 66242
// end ; end ;
66238: GO 66105
66240: POP
66241: POP
// end ;
66242: LD_VAR 0 4
66246: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66247: LD_INT 0
66249: PPUSH
66250: PPUSH
66251: PPUSH
// if not side or side > 8 then
66252: LD_VAR 0 1
66256: NOT
66257: PUSH
66258: LD_VAR 0 1
66262: PUSH
66263: LD_INT 8
66265: GREATER
66266: OR
66267: IFFALSE 66271
// exit ;
66269: GO 66458
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66271: LD_ADDR_VAR 0 4
66275: PUSH
66276: LD_INT 22
66278: PUSH
66279: LD_VAR 0 1
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 21
66290: PUSH
66291: LD_INT 3
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PPUSH
66302: CALL_OW 69
66306: ST_TO_ADDR
// if not tmp then
66307: LD_VAR 0 4
66311: NOT
66312: IFFALSE 66316
// exit ;
66314: GO 66458
// enable_addtolog := true ;
66316: LD_ADDR_OWVAR 81
66320: PUSH
66321: LD_INT 1
66323: ST_TO_ADDR
// AddToLog ( [ ) ;
66324: LD_STRING [
66326: PPUSH
66327: CALL_OW 561
// for i in tmp do
66331: LD_ADDR_VAR 0 3
66335: PUSH
66336: LD_VAR 0 4
66340: PUSH
66341: FOR_IN
66342: IFFALSE 66449
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66344: LD_STRING [
66346: PUSH
66347: LD_VAR 0 3
66351: PPUSH
66352: CALL_OW 266
66356: STR
66357: PUSH
66358: LD_STRING , 
66360: STR
66361: PUSH
66362: LD_VAR 0 3
66366: PPUSH
66367: CALL_OW 250
66371: STR
66372: PUSH
66373: LD_STRING , 
66375: STR
66376: PUSH
66377: LD_VAR 0 3
66381: PPUSH
66382: CALL_OW 251
66386: STR
66387: PUSH
66388: LD_STRING , 
66390: STR
66391: PUSH
66392: LD_VAR 0 3
66396: PPUSH
66397: CALL_OW 254
66401: STR
66402: PUSH
66403: LD_STRING , 
66405: STR
66406: PUSH
66407: LD_VAR 0 3
66411: PPUSH
66412: LD_INT 1
66414: PPUSH
66415: CALL_OW 268
66419: STR
66420: PUSH
66421: LD_STRING , 
66423: STR
66424: PUSH
66425: LD_VAR 0 3
66429: PPUSH
66430: LD_INT 2
66432: PPUSH
66433: CALL_OW 268
66437: STR
66438: PUSH
66439: LD_STRING ],
66441: STR
66442: PPUSH
66443: CALL_OW 561
// end ;
66447: GO 66341
66449: POP
66450: POP
// AddToLog ( ]; ) ;
66451: LD_STRING ];
66453: PPUSH
66454: CALL_OW 561
// end ;
66458: LD_VAR 0 2
66462: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66463: LD_INT 0
66465: PPUSH
66466: PPUSH
66467: PPUSH
66468: PPUSH
66469: PPUSH
// if not area or not rate or not max then
66470: LD_VAR 0 1
66474: NOT
66475: PUSH
66476: LD_VAR 0 2
66480: NOT
66481: OR
66482: PUSH
66483: LD_VAR 0 4
66487: NOT
66488: OR
66489: IFFALSE 66493
// exit ;
66491: GO 66682
// while 1 do
66493: LD_INT 1
66495: IFFALSE 66682
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66497: LD_ADDR_VAR 0 9
66501: PUSH
66502: LD_VAR 0 1
66506: PPUSH
66507: LD_INT 1
66509: PPUSH
66510: CALL_OW 287
66514: PUSH
66515: LD_INT 10
66517: MUL
66518: ST_TO_ADDR
// r := rate / 10 ;
66519: LD_ADDR_VAR 0 7
66523: PUSH
66524: LD_VAR 0 2
66528: PUSH
66529: LD_INT 10
66531: DIVREAL
66532: ST_TO_ADDR
// time := 1 1$00 ;
66533: LD_ADDR_VAR 0 8
66537: PUSH
66538: LD_INT 2100
66540: ST_TO_ADDR
// if amount < min then
66541: LD_VAR 0 9
66545: PUSH
66546: LD_VAR 0 3
66550: LESS
66551: IFFALSE 66569
// r := r * 2 else
66553: LD_ADDR_VAR 0 7
66557: PUSH
66558: LD_VAR 0 7
66562: PUSH
66563: LD_INT 2
66565: MUL
66566: ST_TO_ADDR
66567: GO 66595
// if amount > max then
66569: LD_VAR 0 9
66573: PUSH
66574: LD_VAR 0 4
66578: GREATER
66579: IFFALSE 66595
// r := r / 2 ;
66581: LD_ADDR_VAR 0 7
66585: PUSH
66586: LD_VAR 0 7
66590: PUSH
66591: LD_INT 2
66593: DIVREAL
66594: ST_TO_ADDR
// time := time / r ;
66595: LD_ADDR_VAR 0 8
66599: PUSH
66600: LD_VAR 0 8
66604: PUSH
66605: LD_VAR 0 7
66609: DIVREAL
66610: ST_TO_ADDR
// if time < 0 then
66611: LD_VAR 0 8
66615: PUSH
66616: LD_INT 0
66618: LESS
66619: IFFALSE 66636
// time := time * - 1 ;
66621: LD_ADDR_VAR 0 8
66625: PUSH
66626: LD_VAR 0 8
66630: PUSH
66631: LD_INT 1
66633: NEG
66634: MUL
66635: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66636: LD_VAR 0 8
66640: PUSH
66641: LD_INT 35
66643: PPUSH
66644: LD_INT 875
66646: PPUSH
66647: CALL_OW 12
66651: PLUS
66652: PPUSH
66653: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66657: LD_INT 1
66659: PPUSH
66660: LD_INT 5
66662: PPUSH
66663: CALL_OW 12
66667: PPUSH
66668: LD_VAR 0 1
66672: PPUSH
66673: LD_INT 1
66675: PPUSH
66676: CALL_OW 55
// end ;
66680: GO 66493
// end ;
66682: LD_VAR 0 5
66686: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66687: LD_INT 0
66689: PPUSH
66690: PPUSH
66691: PPUSH
66692: PPUSH
66693: PPUSH
66694: PPUSH
66695: PPUSH
66696: PPUSH
// if not turrets or not factories then
66697: LD_VAR 0 1
66701: NOT
66702: PUSH
66703: LD_VAR 0 2
66707: NOT
66708: OR
66709: IFFALSE 66713
// exit ;
66711: GO 67020
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66713: LD_ADDR_VAR 0 10
66717: PUSH
66718: LD_INT 5
66720: PUSH
66721: LD_INT 6
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PUSH
66728: LD_INT 2
66730: PUSH
66731: LD_INT 4
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: LD_INT 3
66740: PUSH
66741: LD_INT 5
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 24
66755: PUSH
66756: LD_INT 25
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: LD_INT 23
66765: PUSH
66766: LD_INT 27
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 42
66779: PUSH
66780: LD_INT 43
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 44
66789: PUSH
66790: LD_INT 46
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 45
66799: PUSH
66800: LD_INT 47
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: LIST
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: LIST
66816: ST_TO_ADDR
// result := [ ] ;
66817: LD_ADDR_VAR 0 3
66821: PUSH
66822: EMPTY
66823: ST_TO_ADDR
// for i in turrets do
66824: LD_ADDR_VAR 0 4
66828: PUSH
66829: LD_VAR 0 1
66833: PUSH
66834: FOR_IN
66835: IFFALSE 67018
// begin nat := GetNation ( i ) ;
66837: LD_ADDR_VAR 0 7
66841: PUSH
66842: LD_VAR 0 4
66846: PPUSH
66847: CALL_OW 248
66851: ST_TO_ADDR
// weapon := 0 ;
66852: LD_ADDR_VAR 0 8
66856: PUSH
66857: LD_INT 0
66859: ST_TO_ADDR
// if not nat then
66860: LD_VAR 0 7
66864: NOT
66865: IFFALSE 66869
// continue ;
66867: GO 66834
// for j in list [ nat ] do
66869: LD_ADDR_VAR 0 5
66873: PUSH
66874: LD_VAR 0 10
66878: PUSH
66879: LD_VAR 0 7
66883: ARRAY
66884: PUSH
66885: FOR_IN
66886: IFFALSE 66927
// if GetBWeapon ( i ) = j [ 1 ] then
66888: LD_VAR 0 4
66892: PPUSH
66893: CALL_OW 269
66897: PUSH
66898: LD_VAR 0 5
66902: PUSH
66903: LD_INT 1
66905: ARRAY
66906: EQUAL
66907: IFFALSE 66925
// begin weapon := j [ 2 ] ;
66909: LD_ADDR_VAR 0 8
66913: PUSH
66914: LD_VAR 0 5
66918: PUSH
66919: LD_INT 2
66921: ARRAY
66922: ST_TO_ADDR
// break ;
66923: GO 66927
// end ;
66925: GO 66885
66927: POP
66928: POP
// if not weapon then
66929: LD_VAR 0 8
66933: NOT
66934: IFFALSE 66938
// continue ;
66936: GO 66834
// for k in factories do
66938: LD_ADDR_VAR 0 6
66942: PUSH
66943: LD_VAR 0 2
66947: PUSH
66948: FOR_IN
66949: IFFALSE 67014
// begin weapons := AvailableWeaponList ( k ) ;
66951: LD_ADDR_VAR 0 9
66955: PUSH
66956: LD_VAR 0 6
66960: PPUSH
66961: CALL_OW 478
66965: ST_TO_ADDR
// if not weapons then
66966: LD_VAR 0 9
66970: NOT
66971: IFFALSE 66975
// continue ;
66973: GO 66948
// if weapon in weapons then
66975: LD_VAR 0 8
66979: PUSH
66980: LD_VAR 0 9
66984: IN
66985: IFFALSE 67012
// begin result := [ i , weapon ] ;
66987: LD_ADDR_VAR 0 3
66991: PUSH
66992: LD_VAR 0 4
66996: PUSH
66997: LD_VAR 0 8
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: ST_TO_ADDR
// exit ;
67006: POP
67007: POP
67008: POP
67009: POP
67010: GO 67020
// end ; end ;
67012: GO 66948
67014: POP
67015: POP
// end ;
67016: GO 66834
67018: POP
67019: POP
// end ;
67020: LD_VAR 0 3
67024: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67025: LD_INT 0
67027: PPUSH
// if not side or side > 8 then
67028: LD_VAR 0 3
67032: NOT
67033: PUSH
67034: LD_VAR 0 3
67038: PUSH
67039: LD_INT 8
67041: GREATER
67042: OR
67043: IFFALSE 67047
// exit ;
67045: GO 67106
// if not range then
67047: LD_VAR 0 4
67051: NOT
67052: IFFALSE 67063
// range := - 12 ;
67054: LD_ADDR_VAR 0 4
67058: PUSH
67059: LD_INT 12
67061: NEG
67062: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67063: LD_VAR 0 1
67067: PPUSH
67068: LD_VAR 0 2
67072: PPUSH
67073: LD_VAR 0 3
67077: PPUSH
67078: LD_VAR 0 4
67082: PPUSH
67083: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67087: LD_VAR 0 1
67091: PPUSH
67092: LD_VAR 0 2
67096: PPUSH
67097: LD_VAR 0 3
67101: PPUSH
67102: CALL_OW 331
// end ;
67106: LD_VAR 0 5
67110: RET
// export function Video ( mode ) ; begin
67111: LD_INT 0
67113: PPUSH
// ingame_video = mode ;
67114: LD_ADDR_OWVAR 52
67118: PUSH
67119: LD_VAR 0 1
67123: ST_TO_ADDR
// interface_hidden = mode ;
67124: LD_ADDR_OWVAR 54
67128: PUSH
67129: LD_VAR 0 1
67133: ST_TO_ADDR
// end ;
67134: LD_VAR 0 2
67138: RET
// export function Join ( array , element ) ; begin
67139: LD_INT 0
67141: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67142: LD_ADDR_VAR 0 3
67146: PUSH
67147: LD_VAR 0 1
67151: PPUSH
67152: LD_VAR 0 1
67156: PUSH
67157: LD_INT 1
67159: PLUS
67160: PPUSH
67161: LD_VAR 0 2
67165: PPUSH
67166: CALL_OW 1
67170: ST_TO_ADDR
// end ;
67171: LD_VAR 0 3
67175: RET
// export function JoinUnion ( array , element ) ; begin
67176: LD_INT 0
67178: PPUSH
// result := array union element ;
67179: LD_ADDR_VAR 0 3
67183: PUSH
67184: LD_VAR 0 1
67188: PUSH
67189: LD_VAR 0 2
67193: UNION
67194: ST_TO_ADDR
// end ;
67195: LD_VAR 0 3
67199: RET
// export function GetBehemoths ( side ) ; begin
67200: LD_INT 0
67202: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67203: LD_ADDR_VAR 0 2
67207: PUSH
67208: LD_INT 22
67210: PUSH
67211: LD_VAR 0 1
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: PUSH
67220: LD_INT 31
67222: PUSH
67223: LD_INT 25
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PPUSH
67234: CALL_OW 69
67238: ST_TO_ADDR
// end ;
67239: LD_VAR 0 2
67243: RET
// export function Shuffle ( array ) ; var i , index ; begin
67244: LD_INT 0
67246: PPUSH
67247: PPUSH
67248: PPUSH
// result := [ ] ;
67249: LD_ADDR_VAR 0 2
67253: PUSH
67254: EMPTY
67255: ST_TO_ADDR
// if not array then
67256: LD_VAR 0 1
67260: NOT
67261: IFFALSE 67265
// exit ;
67263: GO 67364
// Randomize ;
67265: CALL_OW 10
// for i = array downto 1 do
67269: LD_ADDR_VAR 0 3
67273: PUSH
67274: DOUBLE
67275: LD_VAR 0 1
67279: INC
67280: ST_TO_ADDR
67281: LD_INT 1
67283: PUSH
67284: FOR_DOWNTO
67285: IFFALSE 67362
// begin index := rand ( 1 , array ) ;
67287: LD_ADDR_VAR 0 4
67291: PUSH
67292: LD_INT 1
67294: PPUSH
67295: LD_VAR 0 1
67299: PPUSH
67300: CALL_OW 12
67304: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67305: LD_ADDR_VAR 0 2
67309: PUSH
67310: LD_VAR 0 2
67314: PPUSH
67315: LD_VAR 0 2
67319: PUSH
67320: LD_INT 1
67322: PLUS
67323: PPUSH
67324: LD_VAR 0 1
67328: PUSH
67329: LD_VAR 0 4
67333: ARRAY
67334: PPUSH
67335: CALL_OW 2
67339: ST_TO_ADDR
// array := Delete ( array , index ) ;
67340: LD_ADDR_VAR 0 1
67344: PUSH
67345: LD_VAR 0 1
67349: PPUSH
67350: LD_VAR 0 4
67354: PPUSH
67355: CALL_OW 3
67359: ST_TO_ADDR
// end ;
67360: GO 67284
67362: POP
67363: POP
// end ;
67364: LD_VAR 0 2
67368: RET
// export function GetBaseMaterials ( base ) ; begin
67369: LD_INT 0
67371: PPUSH
// result := [ 0 , 0 , 0 ] ;
67372: LD_ADDR_VAR 0 2
67376: PUSH
67377: LD_INT 0
67379: PUSH
67380: LD_INT 0
67382: PUSH
67383: LD_INT 0
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: LIST
67390: ST_TO_ADDR
// if not base then
67391: LD_VAR 0 1
67395: NOT
67396: IFFALSE 67400
// exit ;
67398: GO 67449
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67400: LD_ADDR_VAR 0 2
67404: PUSH
67405: LD_VAR 0 1
67409: PPUSH
67410: LD_INT 1
67412: PPUSH
67413: CALL_OW 275
67417: PUSH
67418: LD_VAR 0 1
67422: PPUSH
67423: LD_INT 2
67425: PPUSH
67426: CALL_OW 275
67430: PUSH
67431: LD_VAR 0 1
67435: PPUSH
67436: LD_INT 3
67438: PPUSH
67439: CALL_OW 275
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: LIST
67448: ST_TO_ADDR
// end ;
67449: LD_VAR 0 2
67453: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67454: LD_INT 0
67456: PPUSH
67457: PPUSH
// result := array ;
67458: LD_ADDR_VAR 0 3
67462: PUSH
67463: LD_VAR 0 1
67467: ST_TO_ADDR
// if size >= result then
67468: LD_VAR 0 2
67472: PUSH
67473: LD_VAR 0 3
67477: GREATEREQUAL
67478: IFFALSE 67482
// exit ;
67480: GO 67532
// if size then
67482: LD_VAR 0 2
67486: IFFALSE 67532
// for i := array downto size do
67488: LD_ADDR_VAR 0 4
67492: PUSH
67493: DOUBLE
67494: LD_VAR 0 1
67498: INC
67499: ST_TO_ADDR
67500: LD_VAR 0 2
67504: PUSH
67505: FOR_DOWNTO
67506: IFFALSE 67530
// result := Delete ( result , result ) ;
67508: LD_ADDR_VAR 0 3
67512: PUSH
67513: LD_VAR 0 3
67517: PPUSH
67518: LD_VAR 0 3
67522: PPUSH
67523: CALL_OW 3
67527: ST_TO_ADDR
67528: GO 67505
67530: POP
67531: POP
// end ;
67532: LD_VAR 0 3
67536: RET
// export function ComExit ( unit ) ; var tmp ; begin
67537: LD_INT 0
67539: PPUSH
67540: PPUSH
// if not IsInUnit ( unit ) then
67541: LD_VAR 0 1
67545: PPUSH
67546: CALL_OW 310
67550: NOT
67551: IFFALSE 67555
// exit ;
67553: GO 67615
// tmp := IsInUnit ( unit ) ;
67555: LD_ADDR_VAR 0 3
67559: PUSH
67560: LD_VAR 0 1
67564: PPUSH
67565: CALL_OW 310
67569: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67570: LD_VAR 0 3
67574: PPUSH
67575: CALL_OW 247
67579: PUSH
67580: LD_INT 2
67582: EQUAL
67583: IFFALSE 67596
// ComExitVehicle ( unit ) else
67585: LD_VAR 0 1
67589: PPUSH
67590: CALL_OW 121
67594: GO 67605
// ComExitBuilding ( unit ) ;
67596: LD_VAR 0 1
67600: PPUSH
67601: CALL_OW 122
// result := tmp ;
67605: LD_ADDR_VAR 0 2
67609: PUSH
67610: LD_VAR 0 3
67614: ST_TO_ADDR
// end ;
67615: LD_VAR 0 2
67619: RET
// export function ComExitAll ( units ) ; var i ; begin
67620: LD_INT 0
67622: PPUSH
67623: PPUSH
// if not units then
67624: LD_VAR 0 1
67628: NOT
67629: IFFALSE 67633
// exit ;
67631: GO 67659
// for i in units do
67633: LD_ADDR_VAR 0 3
67637: PUSH
67638: LD_VAR 0 1
67642: PUSH
67643: FOR_IN
67644: IFFALSE 67657
// ComExit ( i ) ;
67646: LD_VAR 0 3
67650: PPUSH
67651: CALL 67537 0 1
67655: GO 67643
67657: POP
67658: POP
// end ;
67659: LD_VAR 0 2
67663: RET
// export function ResetHc ; begin
67664: LD_INT 0
67666: PPUSH
// InitHc ;
67667: CALL_OW 19
// hc_importance := 0 ;
67671: LD_ADDR_OWVAR 32
67675: PUSH
67676: LD_INT 0
67678: ST_TO_ADDR
// end ;
67679: LD_VAR 0 1
67683: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67684: LD_INT 0
67686: PPUSH
67687: PPUSH
67688: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67689: LD_ADDR_VAR 0 6
67693: PUSH
67694: LD_VAR 0 1
67698: PUSH
67699: LD_VAR 0 3
67703: PLUS
67704: PUSH
67705: LD_INT 2
67707: DIV
67708: ST_TO_ADDR
// if _x < 0 then
67709: LD_VAR 0 6
67713: PUSH
67714: LD_INT 0
67716: LESS
67717: IFFALSE 67734
// _x := _x * - 1 ;
67719: LD_ADDR_VAR 0 6
67723: PUSH
67724: LD_VAR 0 6
67728: PUSH
67729: LD_INT 1
67731: NEG
67732: MUL
67733: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67734: LD_ADDR_VAR 0 7
67738: PUSH
67739: LD_VAR 0 2
67743: PUSH
67744: LD_VAR 0 4
67748: PLUS
67749: PUSH
67750: LD_INT 2
67752: DIV
67753: ST_TO_ADDR
// if _y < 0 then
67754: LD_VAR 0 7
67758: PUSH
67759: LD_INT 0
67761: LESS
67762: IFFALSE 67779
// _y := _y * - 1 ;
67764: LD_ADDR_VAR 0 7
67768: PUSH
67769: LD_VAR 0 7
67773: PUSH
67774: LD_INT 1
67776: NEG
67777: MUL
67778: ST_TO_ADDR
// result := [ _x , _y ] ;
67779: LD_ADDR_VAR 0 5
67783: PUSH
67784: LD_VAR 0 6
67788: PUSH
67789: LD_VAR 0 7
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: ST_TO_ADDR
// end ;
67798: LD_VAR 0 5
67802: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67803: LD_INT 0
67805: PPUSH
67806: PPUSH
67807: PPUSH
67808: PPUSH
// task := GetTaskList ( unit ) ;
67809: LD_ADDR_VAR 0 7
67813: PUSH
67814: LD_VAR 0 1
67818: PPUSH
67819: CALL_OW 437
67823: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67824: LD_VAR 0 7
67828: NOT
67829: PUSH
67830: LD_VAR 0 1
67834: PPUSH
67835: LD_VAR 0 2
67839: PPUSH
67840: CALL_OW 308
67844: NOT
67845: AND
67846: IFFALSE 67850
// exit ;
67848: GO 67968
// if IsInArea ( unit , area ) then
67850: LD_VAR 0 1
67854: PPUSH
67855: LD_VAR 0 2
67859: PPUSH
67860: CALL_OW 308
67864: IFFALSE 67882
// begin ComMoveToArea ( unit , goAway ) ;
67866: LD_VAR 0 1
67870: PPUSH
67871: LD_VAR 0 3
67875: PPUSH
67876: CALL_OW 113
// exit ;
67880: GO 67968
// end ; if task [ 1 ] [ 1 ] <> M then
67882: LD_VAR 0 7
67886: PUSH
67887: LD_INT 1
67889: ARRAY
67890: PUSH
67891: LD_INT 1
67893: ARRAY
67894: PUSH
67895: LD_STRING M
67897: NONEQUAL
67898: IFFALSE 67902
// exit ;
67900: GO 67968
// x := task [ 1 ] [ 2 ] ;
67902: LD_ADDR_VAR 0 5
67906: PUSH
67907: LD_VAR 0 7
67911: PUSH
67912: LD_INT 1
67914: ARRAY
67915: PUSH
67916: LD_INT 2
67918: ARRAY
67919: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67920: LD_ADDR_VAR 0 6
67924: PUSH
67925: LD_VAR 0 7
67929: PUSH
67930: LD_INT 1
67932: ARRAY
67933: PUSH
67934: LD_INT 3
67936: ARRAY
67937: ST_TO_ADDR
// if InArea ( x , y , area ) then
67938: LD_VAR 0 5
67942: PPUSH
67943: LD_VAR 0 6
67947: PPUSH
67948: LD_VAR 0 2
67952: PPUSH
67953: CALL_OW 309
67957: IFFALSE 67968
// ComStop ( unit ) ;
67959: LD_VAR 0 1
67963: PPUSH
67964: CALL_OW 141
// end ;
67968: LD_VAR 0 4
67972: RET
// export function Abs ( value ) ; begin
67973: LD_INT 0
67975: PPUSH
// result := value ;
67976: LD_ADDR_VAR 0 2
67980: PUSH
67981: LD_VAR 0 1
67985: ST_TO_ADDR
// if value < 0 then
67986: LD_VAR 0 1
67990: PUSH
67991: LD_INT 0
67993: LESS
67994: IFFALSE 68011
// result := value * - 1 ;
67996: LD_ADDR_VAR 0 2
68000: PUSH
68001: LD_VAR 0 1
68005: PUSH
68006: LD_INT 1
68008: NEG
68009: MUL
68010: ST_TO_ADDR
// end ;
68011: LD_VAR 0 2
68015: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68016: LD_INT 0
68018: PPUSH
68019: PPUSH
68020: PPUSH
68021: PPUSH
68022: PPUSH
68023: PPUSH
68024: PPUSH
68025: PPUSH
// if not unit or not building then
68026: LD_VAR 0 1
68030: NOT
68031: PUSH
68032: LD_VAR 0 2
68036: NOT
68037: OR
68038: IFFALSE 68042
// exit ;
68040: GO 68268
// x := GetX ( building ) ;
68042: LD_ADDR_VAR 0 4
68046: PUSH
68047: LD_VAR 0 2
68051: PPUSH
68052: CALL_OW 250
68056: ST_TO_ADDR
// y := GetY ( building ) ;
68057: LD_ADDR_VAR 0 6
68061: PUSH
68062: LD_VAR 0 2
68066: PPUSH
68067: CALL_OW 251
68071: ST_TO_ADDR
// d := GetDir ( building ) ;
68072: LD_ADDR_VAR 0 8
68076: PUSH
68077: LD_VAR 0 2
68081: PPUSH
68082: CALL_OW 254
68086: ST_TO_ADDR
// r := 4 ;
68087: LD_ADDR_VAR 0 9
68091: PUSH
68092: LD_INT 4
68094: ST_TO_ADDR
// for i := 1 to 5 do
68095: LD_ADDR_VAR 0 10
68099: PUSH
68100: DOUBLE
68101: LD_INT 1
68103: DEC
68104: ST_TO_ADDR
68105: LD_INT 5
68107: PUSH
68108: FOR_TO
68109: IFFALSE 68266
// begin _x := ShiftX ( x , d , r + i ) ;
68111: LD_ADDR_VAR 0 5
68115: PUSH
68116: LD_VAR 0 4
68120: PPUSH
68121: LD_VAR 0 8
68125: PPUSH
68126: LD_VAR 0 9
68130: PUSH
68131: LD_VAR 0 10
68135: PLUS
68136: PPUSH
68137: CALL_OW 272
68141: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68142: LD_ADDR_VAR 0 7
68146: PUSH
68147: LD_VAR 0 6
68151: PPUSH
68152: LD_VAR 0 8
68156: PPUSH
68157: LD_VAR 0 9
68161: PUSH
68162: LD_VAR 0 10
68166: PLUS
68167: PPUSH
68168: CALL_OW 273
68172: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68173: LD_VAR 0 5
68177: PPUSH
68178: LD_VAR 0 7
68182: PPUSH
68183: CALL_OW 488
68187: PUSH
68188: LD_VAR 0 5
68192: PPUSH
68193: LD_VAR 0 7
68197: PPUSH
68198: CALL_OW 428
68202: PPUSH
68203: CALL_OW 247
68207: PUSH
68208: LD_INT 3
68210: PUSH
68211: LD_INT 2
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: IN
68218: NOT
68219: AND
68220: IFFALSE 68264
// begin ComMoveXY ( unit , _x , _y ) ;
68222: LD_VAR 0 1
68226: PPUSH
68227: LD_VAR 0 5
68231: PPUSH
68232: LD_VAR 0 7
68236: PPUSH
68237: CALL_OW 111
// result := [ _x , _y ] ;
68241: LD_ADDR_VAR 0 3
68245: PUSH
68246: LD_VAR 0 5
68250: PUSH
68251: LD_VAR 0 7
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: ST_TO_ADDR
// exit ;
68260: POP
68261: POP
68262: GO 68268
// end ; end ;
68264: GO 68108
68266: POP
68267: POP
// end ;
68268: LD_VAR 0 3
68272: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68273: LD_INT 0
68275: PPUSH
68276: PPUSH
68277: PPUSH
// result := 0 ;
68278: LD_ADDR_VAR 0 3
68282: PUSH
68283: LD_INT 0
68285: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68286: LD_VAR 0 1
68290: PUSH
68291: LD_INT 0
68293: LESS
68294: PUSH
68295: LD_VAR 0 1
68299: PUSH
68300: LD_INT 8
68302: GREATER
68303: OR
68304: PUSH
68305: LD_VAR 0 2
68309: PUSH
68310: LD_INT 0
68312: LESS
68313: OR
68314: PUSH
68315: LD_VAR 0 2
68319: PUSH
68320: LD_INT 8
68322: GREATER
68323: OR
68324: IFFALSE 68328
// exit ;
68326: GO 68403
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68328: LD_ADDR_VAR 0 4
68332: PUSH
68333: LD_INT 22
68335: PUSH
68336: LD_VAR 0 2
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PPUSH
68345: CALL_OW 69
68349: PUSH
68350: FOR_IN
68351: IFFALSE 68401
// begin un := UnitShoot ( i ) ;
68353: LD_ADDR_VAR 0 5
68357: PUSH
68358: LD_VAR 0 4
68362: PPUSH
68363: CALL_OW 504
68367: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68368: LD_VAR 0 5
68372: PPUSH
68373: CALL_OW 255
68377: PUSH
68378: LD_VAR 0 1
68382: EQUAL
68383: IFFALSE 68399
// begin result := un ;
68385: LD_ADDR_VAR 0 3
68389: PUSH
68390: LD_VAR 0 5
68394: ST_TO_ADDR
// exit ;
68395: POP
68396: POP
68397: GO 68403
// end ; end ;
68399: GO 68350
68401: POP
68402: POP
// end ;
68403: LD_VAR 0 3
68407: RET
// export function GetCargoBay ( units ) ; begin
68408: LD_INT 0
68410: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68411: LD_ADDR_VAR 0 2
68415: PUSH
68416: LD_VAR 0 1
68420: PPUSH
68421: LD_INT 2
68423: PUSH
68424: LD_INT 34
68426: PUSH
68427: LD_INT 12
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 34
68436: PUSH
68437: LD_INT 51
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 34
68446: PUSH
68447: LD_INT 32
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 34
68456: PUSH
68457: LD_INT 89
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: PPUSH
68471: CALL_OW 72
68475: ST_TO_ADDR
// end ;
68476: LD_VAR 0 2
68480: RET
// export function Negate ( value ) ; begin
68481: LD_INT 0
68483: PPUSH
// result := not value ;
68484: LD_ADDR_VAR 0 2
68488: PUSH
68489: LD_VAR 0 1
68493: NOT
68494: ST_TO_ADDR
// end ;
68495: LD_VAR 0 2
68499: RET
// export function Inc ( value ) ; begin
68500: LD_INT 0
68502: PPUSH
// result := value + 1 ;
68503: LD_ADDR_VAR 0 2
68507: PUSH
68508: LD_VAR 0 1
68512: PUSH
68513: LD_INT 1
68515: PLUS
68516: ST_TO_ADDR
// end ;
68517: LD_VAR 0 2
68521: RET
// export function Dec ( value ) ; begin
68522: LD_INT 0
68524: PPUSH
// result := value - 1 ;
68525: LD_ADDR_VAR 0 2
68529: PUSH
68530: LD_VAR 0 1
68534: PUSH
68535: LD_INT 1
68537: MINUS
68538: ST_TO_ADDR
// end ;
68539: LD_VAR 0 2
68543: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68544: LD_INT 0
68546: PPUSH
68547: PPUSH
68548: PPUSH
68549: PPUSH
68550: PPUSH
68551: PPUSH
68552: PPUSH
68553: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68554: LD_VAR 0 1
68558: PPUSH
68559: LD_VAR 0 2
68563: PPUSH
68564: CALL_OW 488
68568: NOT
68569: PUSH
68570: LD_VAR 0 3
68574: PPUSH
68575: LD_VAR 0 4
68579: PPUSH
68580: CALL_OW 488
68584: NOT
68585: OR
68586: IFFALSE 68599
// begin result := - 1 ;
68588: LD_ADDR_VAR 0 5
68592: PUSH
68593: LD_INT 1
68595: NEG
68596: ST_TO_ADDR
// exit ;
68597: GO 68834
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68599: LD_ADDR_VAR 0 12
68603: PUSH
68604: LD_VAR 0 1
68608: PPUSH
68609: LD_VAR 0 2
68613: PPUSH
68614: LD_VAR 0 3
68618: PPUSH
68619: LD_VAR 0 4
68623: PPUSH
68624: CALL 67684 0 4
68628: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68629: LD_ADDR_VAR 0 11
68633: PUSH
68634: LD_VAR 0 1
68638: PPUSH
68639: LD_VAR 0 2
68643: PPUSH
68644: LD_VAR 0 12
68648: PUSH
68649: LD_INT 1
68651: ARRAY
68652: PPUSH
68653: LD_VAR 0 12
68657: PUSH
68658: LD_INT 2
68660: ARRAY
68661: PPUSH
68662: CALL_OW 298
68666: ST_TO_ADDR
// distance := 9999 ;
68667: LD_ADDR_VAR 0 10
68671: PUSH
68672: LD_INT 9999
68674: ST_TO_ADDR
// for i := 0 to 5 do
68675: LD_ADDR_VAR 0 6
68679: PUSH
68680: DOUBLE
68681: LD_INT 0
68683: DEC
68684: ST_TO_ADDR
68685: LD_INT 5
68687: PUSH
68688: FOR_TO
68689: IFFALSE 68832
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68691: LD_ADDR_VAR 0 7
68695: PUSH
68696: LD_VAR 0 1
68700: PPUSH
68701: LD_VAR 0 6
68705: PPUSH
68706: LD_VAR 0 11
68710: PPUSH
68711: CALL_OW 272
68715: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68716: LD_ADDR_VAR 0 8
68720: PUSH
68721: LD_VAR 0 2
68725: PPUSH
68726: LD_VAR 0 6
68730: PPUSH
68731: LD_VAR 0 11
68735: PPUSH
68736: CALL_OW 273
68740: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68741: LD_VAR 0 7
68745: PPUSH
68746: LD_VAR 0 8
68750: PPUSH
68751: CALL_OW 488
68755: NOT
68756: IFFALSE 68760
// continue ;
68758: GO 68688
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68760: LD_ADDR_VAR 0 9
68764: PUSH
68765: LD_VAR 0 12
68769: PUSH
68770: LD_INT 1
68772: ARRAY
68773: PPUSH
68774: LD_VAR 0 12
68778: PUSH
68779: LD_INT 2
68781: ARRAY
68782: PPUSH
68783: LD_VAR 0 7
68787: PPUSH
68788: LD_VAR 0 8
68792: PPUSH
68793: CALL_OW 298
68797: ST_TO_ADDR
// if tmp < distance then
68798: LD_VAR 0 9
68802: PUSH
68803: LD_VAR 0 10
68807: LESS
68808: IFFALSE 68830
// begin result := i ;
68810: LD_ADDR_VAR 0 5
68814: PUSH
68815: LD_VAR 0 6
68819: ST_TO_ADDR
// distance := tmp ;
68820: LD_ADDR_VAR 0 10
68824: PUSH
68825: LD_VAR 0 9
68829: ST_TO_ADDR
// end ; end ;
68830: GO 68688
68832: POP
68833: POP
// end ;
68834: LD_VAR 0 5
68838: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68839: LD_INT 0
68841: PPUSH
68842: PPUSH
// if not driver or not IsInUnit ( driver ) then
68843: LD_VAR 0 1
68847: NOT
68848: PUSH
68849: LD_VAR 0 1
68853: PPUSH
68854: CALL_OW 310
68858: NOT
68859: OR
68860: IFFALSE 68864
// exit ;
68862: GO 68954
// vehicle := IsInUnit ( driver ) ;
68864: LD_ADDR_VAR 0 3
68868: PUSH
68869: LD_VAR 0 1
68873: PPUSH
68874: CALL_OW 310
68878: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68879: LD_VAR 0 1
68883: PPUSH
68884: LD_STRING \
68886: PUSH
68887: LD_INT 0
68889: PUSH
68890: LD_INT 0
68892: PUSH
68893: LD_INT 0
68895: PUSH
68896: LD_INT 0
68898: PUSH
68899: LD_INT 0
68901: PUSH
68902: LD_INT 0
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: LIST
68909: LIST
68910: LIST
68911: LIST
68912: LIST
68913: PUSH
68914: LD_STRING E
68916: PUSH
68917: LD_INT 0
68919: PUSH
68920: LD_INT 0
68922: PUSH
68923: LD_VAR 0 3
68927: PUSH
68928: LD_INT 0
68930: PUSH
68931: LD_INT 0
68933: PUSH
68934: LD_INT 0
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: PPUSH
68950: CALL_OW 446
// end ;
68954: LD_VAR 0 2
68958: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68959: LD_INT 0
68961: PPUSH
68962: PPUSH
// if not driver or not IsInUnit ( driver ) then
68963: LD_VAR 0 1
68967: NOT
68968: PUSH
68969: LD_VAR 0 1
68973: PPUSH
68974: CALL_OW 310
68978: NOT
68979: OR
68980: IFFALSE 68984
// exit ;
68982: GO 69074
// vehicle := IsInUnit ( driver ) ;
68984: LD_ADDR_VAR 0 3
68988: PUSH
68989: LD_VAR 0 1
68993: PPUSH
68994: CALL_OW 310
68998: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68999: LD_VAR 0 1
69003: PPUSH
69004: LD_STRING \
69006: PUSH
69007: LD_INT 0
69009: PUSH
69010: LD_INT 0
69012: PUSH
69013: LD_INT 0
69015: PUSH
69016: LD_INT 0
69018: PUSH
69019: LD_INT 0
69021: PUSH
69022: LD_INT 0
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: PUSH
69034: LD_STRING E
69036: PUSH
69037: LD_INT 0
69039: PUSH
69040: LD_INT 0
69042: PUSH
69043: LD_VAR 0 3
69047: PUSH
69048: LD_INT 0
69050: PUSH
69051: LD_INT 0
69053: PUSH
69054: LD_INT 0
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: PPUSH
69070: CALL_OW 447
// end ;
69074: LD_VAR 0 2
69078: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69079: LD_INT 0
69081: PPUSH
69082: PPUSH
69083: PPUSH
// tmp := [ ] ;
69084: LD_ADDR_VAR 0 5
69088: PUSH
69089: EMPTY
69090: ST_TO_ADDR
// for i in units do
69091: LD_ADDR_VAR 0 4
69095: PUSH
69096: LD_VAR 0 1
69100: PUSH
69101: FOR_IN
69102: IFFALSE 69140
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69104: LD_ADDR_VAR 0 5
69108: PUSH
69109: LD_VAR 0 5
69113: PPUSH
69114: LD_VAR 0 5
69118: PUSH
69119: LD_INT 1
69121: PLUS
69122: PPUSH
69123: LD_VAR 0 4
69127: PPUSH
69128: CALL_OW 256
69132: PPUSH
69133: CALL_OW 2
69137: ST_TO_ADDR
69138: GO 69101
69140: POP
69141: POP
// if not tmp then
69142: LD_VAR 0 5
69146: NOT
69147: IFFALSE 69151
// exit ;
69149: GO 69199
// if asc then
69151: LD_VAR 0 2
69155: IFFALSE 69179
// result := SortListByListAsc ( units , tmp ) else
69157: LD_ADDR_VAR 0 3
69161: PUSH
69162: LD_VAR 0 1
69166: PPUSH
69167: LD_VAR 0 5
69171: PPUSH
69172: CALL_OW 76
69176: ST_TO_ADDR
69177: GO 69199
// result := SortListByListDesc ( units , tmp ) ;
69179: LD_ADDR_VAR 0 3
69183: PUSH
69184: LD_VAR 0 1
69188: PPUSH
69189: LD_VAR 0 5
69193: PPUSH
69194: CALL_OW 77
69198: ST_TO_ADDR
// end ;
69199: LD_VAR 0 3
69203: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69204: LD_INT 0
69206: PPUSH
69207: PPUSH
// task := GetTaskList ( mech ) ;
69208: LD_ADDR_VAR 0 4
69212: PUSH
69213: LD_VAR 0 1
69217: PPUSH
69218: CALL_OW 437
69222: ST_TO_ADDR
// if not task then
69223: LD_VAR 0 4
69227: NOT
69228: IFFALSE 69232
// exit ;
69230: GO 69274
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69232: LD_ADDR_VAR 0 3
69236: PUSH
69237: LD_VAR 0 4
69241: PUSH
69242: LD_INT 1
69244: ARRAY
69245: PUSH
69246: LD_INT 1
69248: ARRAY
69249: PUSH
69250: LD_STRING r
69252: EQUAL
69253: PUSH
69254: LD_VAR 0 4
69258: PUSH
69259: LD_INT 1
69261: ARRAY
69262: PUSH
69263: LD_INT 4
69265: ARRAY
69266: PUSH
69267: LD_VAR 0 2
69271: EQUAL
69272: AND
69273: ST_TO_ADDR
// end ;
69274: LD_VAR 0 3
69278: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69279: LD_INT 0
69281: PPUSH
// SetDir ( unit , d ) ;
69282: LD_VAR 0 1
69286: PPUSH
69287: LD_VAR 0 4
69291: PPUSH
69292: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69296: LD_VAR 0 1
69300: PPUSH
69301: LD_VAR 0 2
69305: PPUSH
69306: LD_VAR 0 3
69310: PPUSH
69311: LD_VAR 0 5
69315: PPUSH
69316: CALL_OW 48
// end ;
69320: LD_VAR 0 6
69324: RET
// export function ToNaturalNumber ( number ) ; begin
69325: LD_INT 0
69327: PPUSH
// result := number div 1 ;
69328: LD_ADDR_VAR 0 2
69332: PUSH
69333: LD_VAR 0 1
69337: PUSH
69338: LD_INT 1
69340: DIV
69341: ST_TO_ADDR
// if number < 0 then
69342: LD_VAR 0 1
69346: PUSH
69347: LD_INT 0
69349: LESS
69350: IFFALSE 69360
// result := 0 ;
69352: LD_ADDR_VAR 0 2
69356: PUSH
69357: LD_INT 0
69359: ST_TO_ADDR
// end ;
69360: LD_VAR 0 2
69364: RET
// export function SortByClass ( units , class ) ; var un ; begin
69365: LD_INT 0
69367: PPUSH
69368: PPUSH
// if not units or not class then
69369: LD_VAR 0 1
69373: NOT
69374: PUSH
69375: LD_VAR 0 2
69379: NOT
69380: OR
69381: IFFALSE 69385
// exit ;
69383: GO 69480
// result := [ ] ;
69385: LD_ADDR_VAR 0 3
69389: PUSH
69390: EMPTY
69391: ST_TO_ADDR
// for un in units do
69392: LD_ADDR_VAR 0 4
69396: PUSH
69397: LD_VAR 0 1
69401: PUSH
69402: FOR_IN
69403: IFFALSE 69478
// if GetClass ( un ) = class then
69405: LD_VAR 0 4
69409: PPUSH
69410: CALL_OW 257
69414: PUSH
69415: LD_VAR 0 2
69419: EQUAL
69420: IFFALSE 69447
// result := Insert ( result , 1 , un ) else
69422: LD_ADDR_VAR 0 3
69426: PUSH
69427: LD_VAR 0 3
69431: PPUSH
69432: LD_INT 1
69434: PPUSH
69435: LD_VAR 0 4
69439: PPUSH
69440: CALL_OW 2
69444: ST_TO_ADDR
69445: GO 69476
// result := Replace ( result , result + 1 , un ) ;
69447: LD_ADDR_VAR 0 3
69451: PUSH
69452: LD_VAR 0 3
69456: PPUSH
69457: LD_VAR 0 3
69461: PUSH
69462: LD_INT 1
69464: PLUS
69465: PPUSH
69466: LD_VAR 0 4
69470: PPUSH
69471: CALL_OW 1
69475: ST_TO_ADDR
69476: GO 69402
69478: POP
69479: POP
// end ;
69480: LD_VAR 0 3
69484: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69485: LD_INT 0
69487: PPUSH
69488: PPUSH
69489: PPUSH
69490: PPUSH
69491: PPUSH
69492: PPUSH
69493: PPUSH
// result := [ ] ;
69494: LD_ADDR_VAR 0 4
69498: PUSH
69499: EMPTY
69500: ST_TO_ADDR
// if x - r < 0 then
69501: LD_VAR 0 1
69505: PUSH
69506: LD_VAR 0 3
69510: MINUS
69511: PUSH
69512: LD_INT 0
69514: LESS
69515: IFFALSE 69527
// min_x := 0 else
69517: LD_ADDR_VAR 0 8
69521: PUSH
69522: LD_INT 0
69524: ST_TO_ADDR
69525: GO 69543
// min_x := x - r ;
69527: LD_ADDR_VAR 0 8
69531: PUSH
69532: LD_VAR 0 1
69536: PUSH
69537: LD_VAR 0 3
69541: MINUS
69542: ST_TO_ADDR
// if y - r < 0 then
69543: LD_VAR 0 2
69547: PUSH
69548: LD_VAR 0 3
69552: MINUS
69553: PUSH
69554: LD_INT 0
69556: LESS
69557: IFFALSE 69569
// min_y := 0 else
69559: LD_ADDR_VAR 0 7
69563: PUSH
69564: LD_INT 0
69566: ST_TO_ADDR
69567: GO 69585
// min_y := y - r ;
69569: LD_ADDR_VAR 0 7
69573: PUSH
69574: LD_VAR 0 2
69578: PUSH
69579: LD_VAR 0 3
69583: MINUS
69584: ST_TO_ADDR
// max_x := x + r ;
69585: LD_ADDR_VAR 0 9
69589: PUSH
69590: LD_VAR 0 1
69594: PUSH
69595: LD_VAR 0 3
69599: PLUS
69600: ST_TO_ADDR
// max_y := y + r ;
69601: LD_ADDR_VAR 0 10
69605: PUSH
69606: LD_VAR 0 2
69610: PUSH
69611: LD_VAR 0 3
69615: PLUS
69616: ST_TO_ADDR
// for _x = min_x to max_x do
69617: LD_ADDR_VAR 0 5
69621: PUSH
69622: DOUBLE
69623: LD_VAR 0 8
69627: DEC
69628: ST_TO_ADDR
69629: LD_VAR 0 9
69633: PUSH
69634: FOR_TO
69635: IFFALSE 69736
// for _y = min_y to max_y do
69637: LD_ADDR_VAR 0 6
69641: PUSH
69642: DOUBLE
69643: LD_VAR 0 7
69647: DEC
69648: ST_TO_ADDR
69649: LD_VAR 0 10
69653: PUSH
69654: FOR_TO
69655: IFFALSE 69732
// begin if not ValidHex ( _x , _y ) then
69657: LD_VAR 0 5
69661: PPUSH
69662: LD_VAR 0 6
69666: PPUSH
69667: CALL_OW 488
69671: NOT
69672: IFFALSE 69676
// continue ;
69674: GO 69654
// if GetResourceTypeXY ( _x , _y ) then
69676: LD_VAR 0 5
69680: PPUSH
69681: LD_VAR 0 6
69685: PPUSH
69686: CALL_OW 283
69690: IFFALSE 69730
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69692: LD_ADDR_VAR 0 4
69696: PUSH
69697: LD_VAR 0 4
69701: PPUSH
69702: LD_VAR 0 4
69706: PUSH
69707: LD_INT 1
69709: PLUS
69710: PPUSH
69711: LD_VAR 0 5
69715: PUSH
69716: LD_VAR 0 6
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: PPUSH
69725: CALL_OW 1
69729: ST_TO_ADDR
// end ;
69730: GO 69654
69732: POP
69733: POP
69734: GO 69634
69736: POP
69737: POP
// end ;
69738: LD_VAR 0 4
69742: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69743: LD_INT 0
69745: PPUSH
69746: PPUSH
69747: PPUSH
69748: PPUSH
69749: PPUSH
69750: PPUSH
69751: PPUSH
69752: PPUSH
// if not units then
69753: LD_VAR 0 1
69757: NOT
69758: IFFALSE 69762
// exit ;
69760: GO 70286
// result := UnitFilter ( units , [ f_ok ] ) ;
69762: LD_ADDR_VAR 0 3
69766: PUSH
69767: LD_VAR 0 1
69771: PPUSH
69772: LD_INT 50
69774: PUSH
69775: EMPTY
69776: LIST
69777: PPUSH
69778: CALL_OW 72
69782: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69783: LD_ADDR_VAR 0 8
69787: PUSH
69788: LD_VAR 0 1
69792: PUSH
69793: LD_INT 1
69795: ARRAY
69796: PPUSH
69797: CALL_OW 255
69801: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69802: LD_ADDR_VAR 0 10
69806: PUSH
69807: LD_INT 29
69809: PUSH
69810: LD_INT 91
69812: PUSH
69813: LD_INT 49
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: LIST
69820: ST_TO_ADDR
// if not result then
69821: LD_VAR 0 3
69825: NOT
69826: IFFALSE 69830
// exit ;
69828: GO 70286
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69830: LD_ADDR_VAR 0 5
69834: PUSH
69835: LD_INT 81
69837: PUSH
69838: LD_VAR 0 8
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PPUSH
69847: CALL_OW 69
69851: ST_TO_ADDR
// for i in result do
69852: LD_ADDR_VAR 0 4
69856: PUSH
69857: LD_VAR 0 3
69861: PUSH
69862: FOR_IN
69863: IFFALSE 70284
// begin tag := GetTag ( i ) + 1 ;
69865: LD_ADDR_VAR 0 9
69869: PUSH
69870: LD_VAR 0 4
69874: PPUSH
69875: CALL_OW 110
69879: PUSH
69880: LD_INT 1
69882: PLUS
69883: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69884: LD_ADDR_VAR 0 7
69888: PUSH
69889: LD_VAR 0 4
69893: PPUSH
69894: CALL_OW 250
69898: PPUSH
69899: LD_VAR 0 4
69903: PPUSH
69904: CALL_OW 251
69908: PPUSH
69909: LD_INT 6
69911: PPUSH
69912: CALL 69485 0 3
69916: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69917: LD_VAR 0 4
69921: PPUSH
69922: CALL_OW 247
69926: PUSH
69927: LD_INT 2
69929: EQUAL
69930: PUSH
69931: LD_VAR 0 7
69935: AND
69936: PUSH
69937: LD_VAR 0 4
69941: PPUSH
69942: CALL_OW 264
69946: PUSH
69947: LD_VAR 0 10
69951: IN
69952: NOT
69953: AND
69954: IFFALSE 69993
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69956: LD_VAR 0 4
69960: PPUSH
69961: LD_VAR 0 7
69965: PUSH
69966: LD_INT 1
69968: ARRAY
69969: PUSH
69970: LD_INT 1
69972: ARRAY
69973: PPUSH
69974: LD_VAR 0 7
69978: PUSH
69979: LD_INT 1
69981: ARRAY
69982: PUSH
69983: LD_INT 2
69985: ARRAY
69986: PPUSH
69987: CALL_OW 116
69991: GO 70282
// if path > tag then
69993: LD_VAR 0 2
69997: PUSH
69998: LD_VAR 0 9
70002: GREATER
70003: IFFALSE 70211
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70005: LD_ADDR_VAR 0 6
70009: PUSH
70010: LD_VAR 0 5
70014: PPUSH
70015: LD_INT 91
70017: PUSH
70018: LD_VAR 0 4
70022: PUSH
70023: LD_INT 8
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: LIST
70030: PPUSH
70031: CALL_OW 72
70035: ST_TO_ADDR
// if nearEnemy then
70036: LD_VAR 0 6
70040: IFFALSE 70109
// begin if GetWeapon ( i ) = ru_time_lapser then
70042: LD_VAR 0 4
70046: PPUSH
70047: CALL_OW 264
70051: PUSH
70052: LD_INT 49
70054: EQUAL
70055: IFFALSE 70083
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70057: LD_VAR 0 4
70061: PPUSH
70062: LD_VAR 0 6
70066: PPUSH
70067: LD_VAR 0 4
70071: PPUSH
70072: CALL_OW 74
70076: PPUSH
70077: CALL_OW 112
70081: GO 70107
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70083: LD_VAR 0 4
70087: PPUSH
70088: LD_VAR 0 6
70092: PPUSH
70093: LD_VAR 0 4
70097: PPUSH
70098: CALL_OW 74
70102: PPUSH
70103: CALL 71211 0 2
// end else
70107: GO 70209
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70109: LD_VAR 0 4
70113: PPUSH
70114: LD_VAR 0 2
70118: PUSH
70119: LD_VAR 0 9
70123: ARRAY
70124: PUSH
70125: LD_INT 1
70127: ARRAY
70128: PPUSH
70129: LD_VAR 0 2
70133: PUSH
70134: LD_VAR 0 9
70138: ARRAY
70139: PUSH
70140: LD_INT 2
70142: ARRAY
70143: PPUSH
70144: CALL_OW 297
70148: PUSH
70149: LD_INT 6
70151: GREATER
70152: IFFALSE 70195
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70154: LD_VAR 0 4
70158: PPUSH
70159: LD_VAR 0 2
70163: PUSH
70164: LD_VAR 0 9
70168: ARRAY
70169: PUSH
70170: LD_INT 1
70172: ARRAY
70173: PPUSH
70174: LD_VAR 0 2
70178: PUSH
70179: LD_VAR 0 9
70183: ARRAY
70184: PUSH
70185: LD_INT 2
70187: ARRAY
70188: PPUSH
70189: CALL_OW 114
70193: GO 70209
// SetTag ( i , tag ) ;
70195: LD_VAR 0 4
70199: PPUSH
70200: LD_VAR 0 9
70204: PPUSH
70205: CALL_OW 109
// end else
70209: GO 70282
// if enemy then
70211: LD_VAR 0 5
70215: IFFALSE 70282
// begin if GetWeapon ( i ) = ru_time_lapser then
70217: LD_VAR 0 4
70221: PPUSH
70222: CALL_OW 264
70226: PUSH
70227: LD_INT 49
70229: EQUAL
70230: IFFALSE 70258
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70232: LD_VAR 0 4
70236: PPUSH
70237: LD_VAR 0 5
70241: PPUSH
70242: LD_VAR 0 4
70246: PPUSH
70247: CALL_OW 74
70251: PPUSH
70252: CALL_OW 112
70256: GO 70282
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70258: LD_VAR 0 4
70262: PPUSH
70263: LD_VAR 0 5
70267: PPUSH
70268: LD_VAR 0 4
70272: PPUSH
70273: CALL_OW 74
70277: PPUSH
70278: CALL 71211 0 2
// end ; end ;
70282: GO 69862
70284: POP
70285: POP
// end ;
70286: LD_VAR 0 3
70290: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70291: LD_INT 0
70293: PPUSH
70294: PPUSH
70295: PPUSH
// if not unit or IsInUnit ( unit ) then
70296: LD_VAR 0 1
70300: NOT
70301: PUSH
70302: LD_VAR 0 1
70306: PPUSH
70307: CALL_OW 310
70311: OR
70312: IFFALSE 70316
// exit ;
70314: GO 70407
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70316: LD_ADDR_VAR 0 4
70320: PUSH
70321: LD_VAR 0 1
70325: PPUSH
70326: CALL_OW 250
70330: PPUSH
70331: LD_VAR 0 2
70335: PPUSH
70336: LD_INT 1
70338: PPUSH
70339: CALL_OW 272
70343: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70344: LD_ADDR_VAR 0 5
70348: PUSH
70349: LD_VAR 0 1
70353: PPUSH
70354: CALL_OW 251
70358: PPUSH
70359: LD_VAR 0 2
70363: PPUSH
70364: LD_INT 1
70366: PPUSH
70367: CALL_OW 273
70371: ST_TO_ADDR
// if ValidHex ( x , y ) then
70372: LD_VAR 0 4
70376: PPUSH
70377: LD_VAR 0 5
70381: PPUSH
70382: CALL_OW 488
70386: IFFALSE 70407
// ComTurnXY ( unit , x , y ) ;
70388: LD_VAR 0 1
70392: PPUSH
70393: LD_VAR 0 4
70397: PPUSH
70398: LD_VAR 0 5
70402: PPUSH
70403: CALL_OW 118
// end ;
70407: LD_VAR 0 3
70411: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70412: LD_INT 0
70414: PPUSH
70415: PPUSH
// result := false ;
70416: LD_ADDR_VAR 0 3
70420: PUSH
70421: LD_INT 0
70423: ST_TO_ADDR
// if not units then
70424: LD_VAR 0 2
70428: NOT
70429: IFFALSE 70433
// exit ;
70431: GO 70478
// for i in units do
70433: LD_ADDR_VAR 0 4
70437: PUSH
70438: LD_VAR 0 2
70442: PUSH
70443: FOR_IN
70444: IFFALSE 70476
// if See ( side , i ) then
70446: LD_VAR 0 1
70450: PPUSH
70451: LD_VAR 0 4
70455: PPUSH
70456: CALL_OW 292
70460: IFFALSE 70474
// begin result := true ;
70462: LD_ADDR_VAR 0 3
70466: PUSH
70467: LD_INT 1
70469: ST_TO_ADDR
// exit ;
70470: POP
70471: POP
70472: GO 70478
// end ;
70474: GO 70443
70476: POP
70477: POP
// end ;
70478: LD_VAR 0 3
70482: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70483: LD_INT 0
70485: PPUSH
70486: PPUSH
70487: PPUSH
70488: PPUSH
// if not unit or not points then
70489: LD_VAR 0 1
70493: NOT
70494: PUSH
70495: LD_VAR 0 2
70499: NOT
70500: OR
70501: IFFALSE 70505
// exit ;
70503: GO 70595
// dist := 99999 ;
70505: LD_ADDR_VAR 0 5
70509: PUSH
70510: LD_INT 99999
70512: ST_TO_ADDR
// for i in points do
70513: LD_ADDR_VAR 0 4
70517: PUSH
70518: LD_VAR 0 2
70522: PUSH
70523: FOR_IN
70524: IFFALSE 70593
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70526: LD_ADDR_VAR 0 6
70530: PUSH
70531: LD_VAR 0 1
70535: PPUSH
70536: LD_VAR 0 4
70540: PUSH
70541: LD_INT 1
70543: ARRAY
70544: PPUSH
70545: LD_VAR 0 4
70549: PUSH
70550: LD_INT 2
70552: ARRAY
70553: PPUSH
70554: CALL_OW 297
70558: ST_TO_ADDR
// if tmpDist < dist then
70559: LD_VAR 0 6
70563: PUSH
70564: LD_VAR 0 5
70568: LESS
70569: IFFALSE 70591
// begin result := i ;
70571: LD_ADDR_VAR 0 3
70575: PUSH
70576: LD_VAR 0 4
70580: ST_TO_ADDR
// dist := tmpDist ;
70581: LD_ADDR_VAR 0 5
70585: PUSH
70586: LD_VAR 0 6
70590: ST_TO_ADDR
// end ; end ;
70591: GO 70523
70593: POP
70594: POP
// end ;
70595: LD_VAR 0 3
70599: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70600: LD_INT 0
70602: PPUSH
// uc_side := side ;
70603: LD_ADDR_OWVAR 20
70607: PUSH
70608: LD_VAR 0 1
70612: ST_TO_ADDR
// uc_nation := 3 ;
70613: LD_ADDR_OWVAR 21
70617: PUSH
70618: LD_INT 3
70620: ST_TO_ADDR
// vc_chassis := 25 ;
70621: LD_ADDR_OWVAR 37
70625: PUSH
70626: LD_INT 25
70628: ST_TO_ADDR
// vc_engine := engine_siberite ;
70629: LD_ADDR_OWVAR 39
70633: PUSH
70634: LD_INT 3
70636: ST_TO_ADDR
// vc_control := control_computer ;
70637: LD_ADDR_OWVAR 38
70641: PUSH
70642: LD_INT 3
70644: ST_TO_ADDR
// vc_weapon := 59 ;
70645: LD_ADDR_OWVAR 40
70649: PUSH
70650: LD_INT 59
70652: ST_TO_ADDR
// result := CreateVehicle ;
70653: LD_ADDR_VAR 0 5
70657: PUSH
70658: CALL_OW 45
70662: ST_TO_ADDR
// SetDir ( result , d ) ;
70663: LD_VAR 0 5
70667: PPUSH
70668: LD_VAR 0 4
70672: PPUSH
70673: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70677: LD_VAR 0 5
70681: PPUSH
70682: LD_VAR 0 2
70686: PPUSH
70687: LD_VAR 0 3
70691: PPUSH
70692: LD_INT 0
70694: PPUSH
70695: CALL_OW 48
// end ;
70699: LD_VAR 0 5
70703: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70704: LD_INT 0
70706: PPUSH
70707: PPUSH
70708: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70709: LD_ADDR_VAR 0 2
70713: PUSH
70714: LD_INT 0
70716: PUSH
70717: LD_INT 0
70719: PUSH
70720: LD_INT 0
70722: PUSH
70723: LD_INT 0
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: LIST
70730: LIST
70731: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70732: LD_VAR 0 1
70736: NOT
70737: PUSH
70738: LD_VAR 0 1
70742: PPUSH
70743: CALL_OW 264
70747: PUSH
70748: LD_INT 12
70750: PUSH
70751: LD_INT 51
70753: PUSH
70754: LD_INT 32
70756: PUSH
70757: LD_INT 89
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: LIST
70764: LIST
70765: IN
70766: NOT
70767: OR
70768: IFFALSE 70772
// exit ;
70770: GO 70870
// for i := 1 to 3 do
70772: LD_ADDR_VAR 0 3
70776: PUSH
70777: DOUBLE
70778: LD_INT 1
70780: DEC
70781: ST_TO_ADDR
70782: LD_INT 3
70784: PUSH
70785: FOR_TO
70786: IFFALSE 70868
// begin tmp := GetCargo ( cargo , i ) ;
70788: LD_ADDR_VAR 0 4
70792: PUSH
70793: LD_VAR 0 1
70797: PPUSH
70798: LD_VAR 0 3
70802: PPUSH
70803: CALL_OW 289
70807: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70808: LD_ADDR_VAR 0 2
70812: PUSH
70813: LD_VAR 0 2
70817: PPUSH
70818: LD_VAR 0 3
70822: PPUSH
70823: LD_VAR 0 4
70827: PPUSH
70828: CALL_OW 1
70832: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70833: LD_ADDR_VAR 0 2
70837: PUSH
70838: LD_VAR 0 2
70842: PPUSH
70843: LD_INT 4
70845: PPUSH
70846: LD_VAR 0 2
70850: PUSH
70851: LD_INT 4
70853: ARRAY
70854: PUSH
70855: LD_VAR 0 4
70859: PLUS
70860: PPUSH
70861: CALL_OW 1
70865: ST_TO_ADDR
// end ;
70866: GO 70785
70868: POP
70869: POP
// end ;
70870: LD_VAR 0 2
70874: RET
// export function Length ( array ) ; begin
70875: LD_INT 0
70877: PPUSH
// result := array + 0 ;
70878: LD_ADDR_VAR 0 2
70882: PUSH
70883: LD_VAR 0 1
70887: PUSH
70888: LD_INT 0
70890: PLUS
70891: ST_TO_ADDR
// end ;
70892: LD_VAR 0 2
70896: RET
// export function PrepareArray ( array ) ; begin
70897: LD_INT 0
70899: PPUSH
// result := array diff 0 ;
70900: LD_ADDR_VAR 0 2
70904: PUSH
70905: LD_VAR 0 1
70909: PUSH
70910: LD_INT 0
70912: DIFF
70913: ST_TO_ADDR
// if not result [ 1 ] then
70914: LD_VAR 0 2
70918: PUSH
70919: LD_INT 1
70921: ARRAY
70922: NOT
70923: IFFALSE 70943
// result := Delete ( result , 1 ) ;
70925: LD_ADDR_VAR 0 2
70929: PUSH
70930: LD_VAR 0 2
70934: PPUSH
70935: LD_INT 1
70937: PPUSH
70938: CALL_OW 3
70942: ST_TO_ADDR
// end ;
70943: LD_VAR 0 2
70947: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70948: LD_INT 0
70950: PPUSH
70951: PPUSH
70952: PPUSH
70953: PPUSH
// sibRocketRange := 25 ;
70954: LD_ADDR_VAR 0 6
70958: PUSH
70959: LD_INT 25
70961: ST_TO_ADDR
// result := false ;
70962: LD_ADDR_VAR 0 4
70966: PUSH
70967: LD_INT 0
70969: ST_TO_ADDR
// for i := 0 to 5 do
70970: LD_ADDR_VAR 0 5
70974: PUSH
70975: DOUBLE
70976: LD_INT 0
70978: DEC
70979: ST_TO_ADDR
70980: LD_INT 5
70982: PUSH
70983: FOR_TO
70984: IFFALSE 71051
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70986: LD_VAR 0 1
70990: PPUSH
70991: LD_VAR 0 5
70995: PPUSH
70996: LD_VAR 0 6
71000: PPUSH
71001: CALL_OW 272
71005: PPUSH
71006: LD_VAR 0 2
71010: PPUSH
71011: LD_VAR 0 5
71015: PPUSH
71016: LD_VAR 0 6
71020: PPUSH
71021: CALL_OW 273
71025: PPUSH
71026: LD_VAR 0 3
71030: PPUSH
71031: CALL_OW 309
71035: IFFALSE 71049
// begin result := true ;
71037: LD_ADDR_VAR 0 4
71041: PUSH
71042: LD_INT 1
71044: ST_TO_ADDR
// exit ;
71045: POP
71046: POP
71047: GO 71053
// end ;
71049: GO 70983
71051: POP
71052: POP
// end ;
71053: LD_VAR 0 4
71057: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71058: LD_INT 0
71060: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71061: LD_VAR 0 1
71065: PPUSH
71066: LD_VAR 0 2
71070: PPUSH
71071: LD_INT 0
71073: PPUSH
71074: LD_INT 0
71076: PPUSH
71077: LD_INT 1
71079: PPUSH
71080: LD_INT 0
71082: PPUSH
71083: CALL_OW 587
// end ;
71087: LD_VAR 0 3
71091: RET
// export function CenterOnNow ( unit ) ; begin
71092: LD_INT 0
71094: PPUSH
// result := IsInUnit ( unit ) ;
71095: LD_ADDR_VAR 0 2
71099: PUSH
71100: LD_VAR 0 1
71104: PPUSH
71105: CALL_OW 310
71109: ST_TO_ADDR
// if not result then
71110: LD_VAR 0 2
71114: NOT
71115: IFFALSE 71127
// result := unit ;
71117: LD_ADDR_VAR 0 2
71121: PUSH
71122: LD_VAR 0 1
71126: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
71127: LD_VAR 0 1
71131: PPUSH
71132: CALL_OW 87
// end ;
71136: LD_VAR 0 2
71140: RET
// export function ComMoveHex ( unit , hex ) ; begin
71141: LD_INT 0
71143: PPUSH
// if not hex then
71144: LD_VAR 0 2
71148: NOT
71149: IFFALSE 71153
// exit ;
71151: GO 71206
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
71153: LD_VAR 0 2
71157: PUSH
71158: LD_INT 1
71160: ARRAY
71161: PPUSH
71162: LD_VAR 0 2
71166: PUSH
71167: LD_INT 2
71169: ARRAY
71170: PPUSH
71171: CALL_OW 428
71175: IFFALSE 71179
// exit ;
71177: GO 71206
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
71179: LD_VAR 0 1
71183: PPUSH
71184: LD_VAR 0 2
71188: PUSH
71189: LD_INT 1
71191: ARRAY
71192: PPUSH
71193: LD_VAR 0 2
71197: PUSH
71198: LD_INT 2
71200: ARRAY
71201: PPUSH
71202: CALL_OW 111
// end ;
71206: LD_VAR 0 3
71210: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
71211: LD_INT 0
71213: PPUSH
71214: PPUSH
71215: PPUSH
// if not unit or not enemy then
71216: LD_VAR 0 1
71220: NOT
71221: PUSH
71222: LD_VAR 0 2
71226: NOT
71227: OR
71228: IFFALSE 71232
// exit ;
71230: GO 71356
// x := GetX ( enemy ) ;
71232: LD_ADDR_VAR 0 4
71236: PUSH
71237: LD_VAR 0 2
71241: PPUSH
71242: CALL_OW 250
71246: ST_TO_ADDR
// y := GetY ( enemy ) ;
71247: LD_ADDR_VAR 0 5
71251: PUSH
71252: LD_VAR 0 2
71256: PPUSH
71257: CALL_OW 251
71261: ST_TO_ADDR
// if ValidHex ( x , y ) then
71262: LD_VAR 0 4
71266: PPUSH
71267: LD_VAR 0 5
71271: PPUSH
71272: CALL_OW 488
71276: IFFALSE 71356
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
71278: LD_VAR 0 2
71282: PPUSH
71283: CALL_OW 247
71287: PUSH
71288: LD_INT 3
71290: PUSH
71291: LD_INT 2
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: IN
71298: PUSH
71299: LD_VAR 0 1
71303: PPUSH
71304: CALL_OW 255
71308: PPUSH
71309: LD_VAR 0 2
71313: PPUSH
71314: CALL_OW 292
71318: AND
71319: IFFALSE 71337
// ComAttackUnit ( unit , enemy ) else
71321: LD_VAR 0 1
71325: PPUSH
71326: LD_VAR 0 2
71330: PPUSH
71331: CALL_OW 115
71335: GO 71356
// ComAgressiveMove ( unit , x , y ) ;
71337: LD_VAR 0 1
71341: PPUSH
71342: LD_VAR 0 4
71346: PPUSH
71347: LD_VAR 0 5
71351: PPUSH
71352: CALL_OW 114
// end ; end_of_file end_of_file
71356: LD_VAR 0 3
71360: RET
// export globalGameSaveCounter ; every 0 0$1 do
71361: GO 71363
71363: DISABLE
// begin enable ;
71364: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
71365: LD_STRING updateTimer(
71367: PUSH
71368: LD_OWVAR 1
71372: STR
71373: PUSH
71374: LD_STRING );
71376: STR
71377: PPUSH
71378: CALL_OW 559
// end ;
71382: END
// every 0 0$1 do
71383: GO 71385
71385: DISABLE
// begin globalGameSaveCounter := 0 ;
71386: LD_ADDR_EXP 63
71390: PUSH
71391: LD_INT 0
71393: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
71394: LD_STRING setGameSaveCounter(0)
71396: PPUSH
71397: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
71401: LD_STRING initStreamRollete();
71403: PPUSH
71404: CALL_OW 559
// InitStreamMode ;
71408: CALL 72734 0 0
// DefineStreamItems ( false ) ;
71412: LD_INT 0
71414: PPUSH
71415: CALL 73198 0 1
// end ;
71419: END
// export function SOS_MapStart ( ) ; begin
71420: LD_INT 0
71422: PPUSH
// if streamModeActive then
71423: LD_EXP 64
71427: IFFALSE 71436
// DefineStreamItems ( true ) ;
71429: LD_INT 1
71431: PPUSH
71432: CALL 73198 0 1
// UpdateLuaVariables ( ) ;
71436: CALL 71453 0 0
// UpdateFactoryWaypoints ( ) ;
71440: CALL 86067 0 0
// UpdateWarehouseGatheringPoints ( ) ;
71444: CALL 86324 0 0
// end ;
71448: LD_VAR 0 1
71452: RET
// function UpdateLuaVariables ( ) ; begin
71453: LD_INT 0
71455: PPUSH
// if globalGameSaveCounter then
71456: LD_EXP 63
71460: IFFALSE 71494
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
71462: LD_ADDR_EXP 63
71466: PUSH
71467: LD_EXP 63
71471: PPUSH
71472: CALL 68500 0 1
71476: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
71477: LD_STRING setGameSaveCounter(
71479: PUSH
71480: LD_EXP 63
71484: STR
71485: PUSH
71486: LD_STRING )
71488: STR
71489: PPUSH
71490: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
71494: LD_STRING setGameDifficulty(
71496: PUSH
71497: LD_OWVAR 67
71501: STR
71502: PUSH
71503: LD_STRING )
71505: STR
71506: PPUSH
71507: CALL_OW 559
// end ;
71511: LD_VAR 0 1
71515: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
71516: LD_INT 0
71518: PPUSH
// if p2 = stream_mode then
71519: LD_VAR 0 2
71523: PUSH
71524: LD_INT 100
71526: EQUAL
71527: IFFALSE 72530
// begin if not StreamModeActive then
71529: LD_EXP 64
71533: NOT
71534: IFFALSE 71544
// StreamModeActive := true ;
71536: LD_ADDR_EXP 64
71540: PUSH
71541: LD_INT 1
71543: ST_TO_ADDR
// if p3 = 0 then
71544: LD_VAR 0 3
71548: PUSH
71549: LD_INT 0
71551: EQUAL
71552: IFFALSE 71558
// InitStreamMode ;
71554: CALL 72734 0 0
// if p3 = 1 then
71558: LD_VAR 0 3
71562: PUSH
71563: LD_INT 1
71565: EQUAL
71566: IFFALSE 71576
// sRocket := true ;
71568: LD_ADDR_EXP 69
71572: PUSH
71573: LD_INT 1
71575: ST_TO_ADDR
// if p3 = 2 then
71576: LD_VAR 0 3
71580: PUSH
71581: LD_INT 2
71583: EQUAL
71584: IFFALSE 71594
// sSpeed := true ;
71586: LD_ADDR_EXP 68
71590: PUSH
71591: LD_INT 1
71593: ST_TO_ADDR
// if p3 = 3 then
71594: LD_VAR 0 3
71598: PUSH
71599: LD_INT 3
71601: EQUAL
71602: IFFALSE 71612
// sEngine := true ;
71604: LD_ADDR_EXP 70
71608: PUSH
71609: LD_INT 1
71611: ST_TO_ADDR
// if p3 = 4 then
71612: LD_VAR 0 3
71616: PUSH
71617: LD_INT 4
71619: EQUAL
71620: IFFALSE 71630
// sSpec := true ;
71622: LD_ADDR_EXP 67
71626: PUSH
71627: LD_INT 1
71629: ST_TO_ADDR
// if p3 = 5 then
71630: LD_VAR 0 3
71634: PUSH
71635: LD_INT 5
71637: EQUAL
71638: IFFALSE 71648
// sLevel := true ;
71640: LD_ADDR_EXP 71
71644: PUSH
71645: LD_INT 1
71647: ST_TO_ADDR
// if p3 = 6 then
71648: LD_VAR 0 3
71652: PUSH
71653: LD_INT 6
71655: EQUAL
71656: IFFALSE 71666
// sArmoury := true ;
71658: LD_ADDR_EXP 72
71662: PUSH
71663: LD_INT 1
71665: ST_TO_ADDR
// if p3 = 7 then
71666: LD_VAR 0 3
71670: PUSH
71671: LD_INT 7
71673: EQUAL
71674: IFFALSE 71684
// sRadar := true ;
71676: LD_ADDR_EXP 73
71680: PUSH
71681: LD_INT 1
71683: ST_TO_ADDR
// if p3 = 8 then
71684: LD_VAR 0 3
71688: PUSH
71689: LD_INT 8
71691: EQUAL
71692: IFFALSE 71702
// sBunker := true ;
71694: LD_ADDR_EXP 74
71698: PUSH
71699: LD_INT 1
71701: ST_TO_ADDR
// if p3 = 9 then
71702: LD_VAR 0 3
71706: PUSH
71707: LD_INT 9
71709: EQUAL
71710: IFFALSE 71720
// sHack := true ;
71712: LD_ADDR_EXP 75
71716: PUSH
71717: LD_INT 1
71719: ST_TO_ADDR
// if p3 = 10 then
71720: LD_VAR 0 3
71724: PUSH
71725: LD_INT 10
71727: EQUAL
71728: IFFALSE 71738
// sFire := true ;
71730: LD_ADDR_EXP 76
71734: PUSH
71735: LD_INT 1
71737: ST_TO_ADDR
// if p3 = 11 then
71738: LD_VAR 0 3
71742: PUSH
71743: LD_INT 11
71745: EQUAL
71746: IFFALSE 71756
// sRefresh := true ;
71748: LD_ADDR_EXP 77
71752: PUSH
71753: LD_INT 1
71755: ST_TO_ADDR
// if p3 = 12 then
71756: LD_VAR 0 3
71760: PUSH
71761: LD_INT 12
71763: EQUAL
71764: IFFALSE 71774
// sExp := true ;
71766: LD_ADDR_EXP 78
71770: PUSH
71771: LD_INT 1
71773: ST_TO_ADDR
// if p3 = 13 then
71774: LD_VAR 0 3
71778: PUSH
71779: LD_INT 13
71781: EQUAL
71782: IFFALSE 71792
// sDepot := true ;
71784: LD_ADDR_EXP 79
71788: PUSH
71789: LD_INT 1
71791: ST_TO_ADDR
// if p3 = 14 then
71792: LD_VAR 0 3
71796: PUSH
71797: LD_INT 14
71799: EQUAL
71800: IFFALSE 71810
// sFlag := true ;
71802: LD_ADDR_EXP 80
71806: PUSH
71807: LD_INT 1
71809: ST_TO_ADDR
// if p3 = 15 then
71810: LD_VAR 0 3
71814: PUSH
71815: LD_INT 15
71817: EQUAL
71818: IFFALSE 71828
// sKamikadze := true ;
71820: LD_ADDR_EXP 88
71824: PUSH
71825: LD_INT 1
71827: ST_TO_ADDR
// if p3 = 16 then
71828: LD_VAR 0 3
71832: PUSH
71833: LD_INT 16
71835: EQUAL
71836: IFFALSE 71846
// sTroll := true ;
71838: LD_ADDR_EXP 89
71842: PUSH
71843: LD_INT 1
71845: ST_TO_ADDR
// if p3 = 17 then
71846: LD_VAR 0 3
71850: PUSH
71851: LD_INT 17
71853: EQUAL
71854: IFFALSE 71864
// sSlow := true ;
71856: LD_ADDR_EXP 90
71860: PUSH
71861: LD_INT 1
71863: ST_TO_ADDR
// if p3 = 18 then
71864: LD_VAR 0 3
71868: PUSH
71869: LD_INT 18
71871: EQUAL
71872: IFFALSE 71882
// sLack := true ;
71874: LD_ADDR_EXP 91
71878: PUSH
71879: LD_INT 1
71881: ST_TO_ADDR
// if p3 = 19 then
71882: LD_VAR 0 3
71886: PUSH
71887: LD_INT 19
71889: EQUAL
71890: IFFALSE 71900
// sTank := true ;
71892: LD_ADDR_EXP 93
71896: PUSH
71897: LD_INT 1
71899: ST_TO_ADDR
// if p3 = 20 then
71900: LD_VAR 0 3
71904: PUSH
71905: LD_INT 20
71907: EQUAL
71908: IFFALSE 71918
// sRemote := true ;
71910: LD_ADDR_EXP 94
71914: PUSH
71915: LD_INT 1
71917: ST_TO_ADDR
// if p3 = 21 then
71918: LD_VAR 0 3
71922: PUSH
71923: LD_INT 21
71925: EQUAL
71926: IFFALSE 71936
// sPowell := true ;
71928: LD_ADDR_EXP 95
71932: PUSH
71933: LD_INT 1
71935: ST_TO_ADDR
// if p3 = 22 then
71936: LD_VAR 0 3
71940: PUSH
71941: LD_INT 22
71943: EQUAL
71944: IFFALSE 71954
// sTeleport := true ;
71946: LD_ADDR_EXP 98
71950: PUSH
71951: LD_INT 1
71953: ST_TO_ADDR
// if p3 = 23 then
71954: LD_VAR 0 3
71958: PUSH
71959: LD_INT 23
71961: EQUAL
71962: IFFALSE 71972
// sOilTower := true ;
71964: LD_ADDR_EXP 100
71968: PUSH
71969: LD_INT 1
71971: ST_TO_ADDR
// if p3 = 24 then
71972: LD_VAR 0 3
71976: PUSH
71977: LD_INT 24
71979: EQUAL
71980: IFFALSE 71990
// sShovel := true ;
71982: LD_ADDR_EXP 101
71986: PUSH
71987: LD_INT 1
71989: ST_TO_ADDR
// if p3 = 25 then
71990: LD_VAR 0 3
71994: PUSH
71995: LD_INT 25
71997: EQUAL
71998: IFFALSE 72008
// sSheik := true ;
72000: LD_ADDR_EXP 102
72004: PUSH
72005: LD_INT 1
72007: ST_TO_ADDR
// if p3 = 26 then
72008: LD_VAR 0 3
72012: PUSH
72013: LD_INT 26
72015: EQUAL
72016: IFFALSE 72026
// sEarthquake := true ;
72018: LD_ADDR_EXP 104
72022: PUSH
72023: LD_INT 1
72025: ST_TO_ADDR
// if p3 = 27 then
72026: LD_VAR 0 3
72030: PUSH
72031: LD_INT 27
72033: EQUAL
72034: IFFALSE 72044
// sAI := true ;
72036: LD_ADDR_EXP 105
72040: PUSH
72041: LD_INT 1
72043: ST_TO_ADDR
// if p3 = 28 then
72044: LD_VAR 0 3
72048: PUSH
72049: LD_INT 28
72051: EQUAL
72052: IFFALSE 72062
// sCargo := true ;
72054: LD_ADDR_EXP 108
72058: PUSH
72059: LD_INT 1
72061: ST_TO_ADDR
// if p3 = 29 then
72062: LD_VAR 0 3
72066: PUSH
72067: LD_INT 29
72069: EQUAL
72070: IFFALSE 72080
// sDLaser := true ;
72072: LD_ADDR_EXP 109
72076: PUSH
72077: LD_INT 1
72079: ST_TO_ADDR
// if p3 = 30 then
72080: LD_VAR 0 3
72084: PUSH
72085: LD_INT 30
72087: EQUAL
72088: IFFALSE 72098
// sExchange := true ;
72090: LD_ADDR_EXP 110
72094: PUSH
72095: LD_INT 1
72097: ST_TO_ADDR
// if p3 = 31 then
72098: LD_VAR 0 3
72102: PUSH
72103: LD_INT 31
72105: EQUAL
72106: IFFALSE 72116
// sFac := true ;
72108: LD_ADDR_EXP 111
72112: PUSH
72113: LD_INT 1
72115: ST_TO_ADDR
// if p3 = 32 then
72116: LD_VAR 0 3
72120: PUSH
72121: LD_INT 32
72123: EQUAL
72124: IFFALSE 72134
// sPower := true ;
72126: LD_ADDR_EXP 112
72130: PUSH
72131: LD_INT 1
72133: ST_TO_ADDR
// if p3 = 33 then
72134: LD_VAR 0 3
72138: PUSH
72139: LD_INT 33
72141: EQUAL
72142: IFFALSE 72152
// sRandom := true ;
72144: LD_ADDR_EXP 113
72148: PUSH
72149: LD_INT 1
72151: ST_TO_ADDR
// if p3 = 34 then
72152: LD_VAR 0 3
72156: PUSH
72157: LD_INT 34
72159: EQUAL
72160: IFFALSE 72170
// sShield := true ;
72162: LD_ADDR_EXP 114
72166: PUSH
72167: LD_INT 1
72169: ST_TO_ADDR
// if p3 = 35 then
72170: LD_VAR 0 3
72174: PUSH
72175: LD_INT 35
72177: EQUAL
72178: IFFALSE 72188
// sTime := true ;
72180: LD_ADDR_EXP 115
72184: PUSH
72185: LD_INT 1
72187: ST_TO_ADDR
// if p3 = 36 then
72188: LD_VAR 0 3
72192: PUSH
72193: LD_INT 36
72195: EQUAL
72196: IFFALSE 72206
// sTools := true ;
72198: LD_ADDR_EXP 116
72202: PUSH
72203: LD_INT 1
72205: ST_TO_ADDR
// if p3 = 101 then
72206: LD_VAR 0 3
72210: PUSH
72211: LD_INT 101
72213: EQUAL
72214: IFFALSE 72224
// sSold := true ;
72216: LD_ADDR_EXP 81
72220: PUSH
72221: LD_INT 1
72223: ST_TO_ADDR
// if p3 = 102 then
72224: LD_VAR 0 3
72228: PUSH
72229: LD_INT 102
72231: EQUAL
72232: IFFALSE 72242
// sDiff := true ;
72234: LD_ADDR_EXP 82
72238: PUSH
72239: LD_INT 1
72241: ST_TO_ADDR
// if p3 = 103 then
72242: LD_VAR 0 3
72246: PUSH
72247: LD_INT 103
72249: EQUAL
72250: IFFALSE 72260
// sFog := true ;
72252: LD_ADDR_EXP 85
72256: PUSH
72257: LD_INT 1
72259: ST_TO_ADDR
// if p3 = 104 then
72260: LD_VAR 0 3
72264: PUSH
72265: LD_INT 104
72267: EQUAL
72268: IFFALSE 72278
// sReset := true ;
72270: LD_ADDR_EXP 86
72274: PUSH
72275: LD_INT 1
72277: ST_TO_ADDR
// if p3 = 105 then
72278: LD_VAR 0 3
72282: PUSH
72283: LD_INT 105
72285: EQUAL
72286: IFFALSE 72296
// sSun := true ;
72288: LD_ADDR_EXP 87
72292: PUSH
72293: LD_INT 1
72295: ST_TO_ADDR
// if p3 = 106 then
72296: LD_VAR 0 3
72300: PUSH
72301: LD_INT 106
72303: EQUAL
72304: IFFALSE 72314
// sTiger := true ;
72306: LD_ADDR_EXP 83
72310: PUSH
72311: LD_INT 1
72313: ST_TO_ADDR
// if p3 = 107 then
72314: LD_VAR 0 3
72318: PUSH
72319: LD_INT 107
72321: EQUAL
72322: IFFALSE 72332
// sBomb := true ;
72324: LD_ADDR_EXP 84
72328: PUSH
72329: LD_INT 1
72331: ST_TO_ADDR
// if p3 = 108 then
72332: LD_VAR 0 3
72336: PUSH
72337: LD_INT 108
72339: EQUAL
72340: IFFALSE 72350
// sWound := true ;
72342: LD_ADDR_EXP 92
72346: PUSH
72347: LD_INT 1
72349: ST_TO_ADDR
// if p3 = 109 then
72350: LD_VAR 0 3
72354: PUSH
72355: LD_INT 109
72357: EQUAL
72358: IFFALSE 72368
// sBetray := true ;
72360: LD_ADDR_EXP 96
72364: PUSH
72365: LD_INT 1
72367: ST_TO_ADDR
// if p3 = 110 then
72368: LD_VAR 0 3
72372: PUSH
72373: LD_INT 110
72375: EQUAL
72376: IFFALSE 72386
// sContamin := true ;
72378: LD_ADDR_EXP 97
72382: PUSH
72383: LD_INT 1
72385: ST_TO_ADDR
// if p3 = 111 then
72386: LD_VAR 0 3
72390: PUSH
72391: LD_INT 111
72393: EQUAL
72394: IFFALSE 72404
// sOil := true ;
72396: LD_ADDR_EXP 99
72400: PUSH
72401: LD_INT 1
72403: ST_TO_ADDR
// if p3 = 112 then
72404: LD_VAR 0 3
72408: PUSH
72409: LD_INT 112
72411: EQUAL
72412: IFFALSE 72422
// sStu := true ;
72414: LD_ADDR_EXP 103
72418: PUSH
72419: LD_INT 1
72421: ST_TO_ADDR
// if p3 = 113 then
72422: LD_VAR 0 3
72426: PUSH
72427: LD_INT 113
72429: EQUAL
72430: IFFALSE 72440
// sBazooka := true ;
72432: LD_ADDR_EXP 106
72436: PUSH
72437: LD_INT 1
72439: ST_TO_ADDR
// if p3 = 114 then
72440: LD_VAR 0 3
72444: PUSH
72445: LD_INT 114
72447: EQUAL
72448: IFFALSE 72458
// sMortar := true ;
72450: LD_ADDR_EXP 107
72454: PUSH
72455: LD_INT 1
72457: ST_TO_ADDR
// if p3 = 115 then
72458: LD_VAR 0 3
72462: PUSH
72463: LD_INT 115
72465: EQUAL
72466: IFFALSE 72476
// sRanger := true ;
72468: LD_ADDR_EXP 117
72472: PUSH
72473: LD_INT 1
72475: ST_TO_ADDR
// if p3 = 116 then
72476: LD_VAR 0 3
72480: PUSH
72481: LD_INT 116
72483: EQUAL
72484: IFFALSE 72494
// sComputer := true ;
72486: LD_ADDR_EXP 118
72490: PUSH
72491: LD_INT 1
72493: ST_TO_ADDR
// if p3 = 117 then
72494: LD_VAR 0 3
72498: PUSH
72499: LD_INT 117
72501: EQUAL
72502: IFFALSE 72512
// s30 := true ;
72504: LD_ADDR_EXP 119
72508: PUSH
72509: LD_INT 1
72511: ST_TO_ADDR
// if p3 = 118 then
72512: LD_VAR 0 3
72516: PUSH
72517: LD_INT 118
72519: EQUAL
72520: IFFALSE 72530
// s60 := true ;
72522: LD_ADDR_EXP 120
72526: PUSH
72527: LD_INT 1
72529: ST_TO_ADDR
// end ; if p2 = hack_mode then
72530: LD_VAR 0 2
72534: PUSH
72535: LD_INT 101
72537: EQUAL
72538: IFFALSE 72666
// begin case p3 of 1 :
72540: LD_VAR 0 3
72544: PUSH
72545: LD_INT 1
72547: DOUBLE
72548: EQUAL
72549: IFTRUE 72553
72551: GO 72560
72553: POP
// hHackUnlimitedResources ; 2 :
72554: CALL 84813 0 0
72558: GO 72666
72560: LD_INT 2
72562: DOUBLE
72563: EQUAL
72564: IFTRUE 72568
72566: GO 72575
72568: POP
// hHackSetLevel10 ; 3 :
72569: CALL 84946 0 0
72573: GO 72666
72575: LD_INT 3
72577: DOUBLE
72578: EQUAL
72579: IFTRUE 72583
72581: GO 72590
72583: POP
// hHackSetLevel10YourUnits ; 4 :
72584: CALL 85031 0 0
72588: GO 72666
72590: LD_INT 4
72592: DOUBLE
72593: EQUAL
72594: IFTRUE 72598
72596: GO 72605
72598: POP
// hHackInvincible ; 5 :
72599: CALL 85479 0 0
72603: GO 72666
72605: LD_INT 5
72607: DOUBLE
72608: EQUAL
72609: IFTRUE 72613
72611: GO 72620
72613: POP
// hHackInvisible ; 6 :
72614: CALL 85590 0 0
72618: GO 72666
72620: LD_INT 6
72622: DOUBLE
72623: EQUAL
72624: IFTRUE 72628
72626: GO 72635
72628: POP
// hHackChangeYourSide ; 7 :
72629: CALL 85647 0 0
72633: GO 72666
72635: LD_INT 7
72637: DOUBLE
72638: EQUAL
72639: IFTRUE 72643
72641: GO 72650
72643: POP
// hHackChangeUnitSide ; 8 :
72644: CALL 85689 0 0
72648: GO 72666
72650: LD_INT 8
72652: DOUBLE
72653: EQUAL
72654: IFTRUE 72658
72656: GO 72665
72658: POP
// hHackFog ; end ;
72659: CALL 85790 0 0
72663: GO 72666
72665: POP
// end ; if p2 = game_save_mode then
72666: LD_VAR 0 2
72670: PUSH
72671: LD_INT 102
72673: EQUAL
72674: IFFALSE 72729
// begin if p3 = 1 then
72676: LD_VAR 0 3
72680: PUSH
72681: LD_INT 1
72683: EQUAL
72684: IFFALSE 72696
// globalGameSaveCounter := p4 ;
72686: LD_ADDR_EXP 63
72690: PUSH
72691: LD_VAR 0 4
72695: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
72696: LD_VAR 0 3
72700: PUSH
72701: LD_INT 2
72703: EQUAL
72704: PUSH
72705: LD_EXP 63
72709: AND
72710: IFFALSE 72729
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
72712: LD_STRING setGameSaveCounter(
72714: PUSH
72715: LD_EXP 63
72719: STR
72720: PUSH
72721: LD_STRING )
72723: STR
72724: PPUSH
72725: CALL_OW 559
// end ; end ;
72729: LD_VAR 0 7
72733: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
72734: LD_INT 0
72736: PPUSH
// streamModeActive := false ;
72737: LD_ADDR_EXP 64
72741: PUSH
72742: LD_INT 0
72744: ST_TO_ADDR
// normalCounter := 36 ;
72745: LD_ADDR_EXP 65
72749: PUSH
72750: LD_INT 36
72752: ST_TO_ADDR
// hardcoreCounter := 18 ;
72753: LD_ADDR_EXP 66
72757: PUSH
72758: LD_INT 18
72760: ST_TO_ADDR
// sRocket := false ;
72761: LD_ADDR_EXP 69
72765: PUSH
72766: LD_INT 0
72768: ST_TO_ADDR
// sSpeed := false ;
72769: LD_ADDR_EXP 68
72773: PUSH
72774: LD_INT 0
72776: ST_TO_ADDR
// sEngine := false ;
72777: LD_ADDR_EXP 70
72781: PUSH
72782: LD_INT 0
72784: ST_TO_ADDR
// sSpec := false ;
72785: LD_ADDR_EXP 67
72789: PUSH
72790: LD_INT 0
72792: ST_TO_ADDR
// sLevel := false ;
72793: LD_ADDR_EXP 71
72797: PUSH
72798: LD_INT 0
72800: ST_TO_ADDR
// sArmoury := false ;
72801: LD_ADDR_EXP 72
72805: PUSH
72806: LD_INT 0
72808: ST_TO_ADDR
// sRadar := false ;
72809: LD_ADDR_EXP 73
72813: PUSH
72814: LD_INT 0
72816: ST_TO_ADDR
// sBunker := false ;
72817: LD_ADDR_EXP 74
72821: PUSH
72822: LD_INT 0
72824: ST_TO_ADDR
// sHack := false ;
72825: LD_ADDR_EXP 75
72829: PUSH
72830: LD_INT 0
72832: ST_TO_ADDR
// sFire := false ;
72833: LD_ADDR_EXP 76
72837: PUSH
72838: LD_INT 0
72840: ST_TO_ADDR
// sRefresh := false ;
72841: LD_ADDR_EXP 77
72845: PUSH
72846: LD_INT 0
72848: ST_TO_ADDR
// sExp := false ;
72849: LD_ADDR_EXP 78
72853: PUSH
72854: LD_INT 0
72856: ST_TO_ADDR
// sDepot := false ;
72857: LD_ADDR_EXP 79
72861: PUSH
72862: LD_INT 0
72864: ST_TO_ADDR
// sFlag := false ;
72865: LD_ADDR_EXP 80
72869: PUSH
72870: LD_INT 0
72872: ST_TO_ADDR
// sKamikadze := false ;
72873: LD_ADDR_EXP 88
72877: PUSH
72878: LD_INT 0
72880: ST_TO_ADDR
// sTroll := false ;
72881: LD_ADDR_EXP 89
72885: PUSH
72886: LD_INT 0
72888: ST_TO_ADDR
// sSlow := false ;
72889: LD_ADDR_EXP 90
72893: PUSH
72894: LD_INT 0
72896: ST_TO_ADDR
// sLack := false ;
72897: LD_ADDR_EXP 91
72901: PUSH
72902: LD_INT 0
72904: ST_TO_ADDR
// sTank := false ;
72905: LD_ADDR_EXP 93
72909: PUSH
72910: LD_INT 0
72912: ST_TO_ADDR
// sRemote := false ;
72913: LD_ADDR_EXP 94
72917: PUSH
72918: LD_INT 0
72920: ST_TO_ADDR
// sPowell := false ;
72921: LD_ADDR_EXP 95
72925: PUSH
72926: LD_INT 0
72928: ST_TO_ADDR
// sTeleport := false ;
72929: LD_ADDR_EXP 98
72933: PUSH
72934: LD_INT 0
72936: ST_TO_ADDR
// sOilTower := false ;
72937: LD_ADDR_EXP 100
72941: PUSH
72942: LD_INT 0
72944: ST_TO_ADDR
// sShovel := false ;
72945: LD_ADDR_EXP 101
72949: PUSH
72950: LD_INT 0
72952: ST_TO_ADDR
// sSheik := false ;
72953: LD_ADDR_EXP 102
72957: PUSH
72958: LD_INT 0
72960: ST_TO_ADDR
// sEarthquake := false ;
72961: LD_ADDR_EXP 104
72965: PUSH
72966: LD_INT 0
72968: ST_TO_ADDR
// sAI := false ;
72969: LD_ADDR_EXP 105
72973: PUSH
72974: LD_INT 0
72976: ST_TO_ADDR
// sCargo := false ;
72977: LD_ADDR_EXP 108
72981: PUSH
72982: LD_INT 0
72984: ST_TO_ADDR
// sDLaser := false ;
72985: LD_ADDR_EXP 109
72989: PUSH
72990: LD_INT 0
72992: ST_TO_ADDR
// sExchange := false ;
72993: LD_ADDR_EXP 110
72997: PUSH
72998: LD_INT 0
73000: ST_TO_ADDR
// sFac := false ;
73001: LD_ADDR_EXP 111
73005: PUSH
73006: LD_INT 0
73008: ST_TO_ADDR
// sPower := false ;
73009: LD_ADDR_EXP 112
73013: PUSH
73014: LD_INT 0
73016: ST_TO_ADDR
// sRandom := false ;
73017: LD_ADDR_EXP 113
73021: PUSH
73022: LD_INT 0
73024: ST_TO_ADDR
// sShield := false ;
73025: LD_ADDR_EXP 114
73029: PUSH
73030: LD_INT 0
73032: ST_TO_ADDR
// sTime := false ;
73033: LD_ADDR_EXP 115
73037: PUSH
73038: LD_INT 0
73040: ST_TO_ADDR
// sTools := false ;
73041: LD_ADDR_EXP 116
73045: PUSH
73046: LD_INT 0
73048: ST_TO_ADDR
// sSold := false ;
73049: LD_ADDR_EXP 81
73053: PUSH
73054: LD_INT 0
73056: ST_TO_ADDR
// sDiff := false ;
73057: LD_ADDR_EXP 82
73061: PUSH
73062: LD_INT 0
73064: ST_TO_ADDR
// sFog := false ;
73065: LD_ADDR_EXP 85
73069: PUSH
73070: LD_INT 0
73072: ST_TO_ADDR
// sReset := false ;
73073: LD_ADDR_EXP 86
73077: PUSH
73078: LD_INT 0
73080: ST_TO_ADDR
// sSun := false ;
73081: LD_ADDR_EXP 87
73085: PUSH
73086: LD_INT 0
73088: ST_TO_ADDR
// sTiger := false ;
73089: LD_ADDR_EXP 83
73093: PUSH
73094: LD_INT 0
73096: ST_TO_ADDR
// sBomb := false ;
73097: LD_ADDR_EXP 84
73101: PUSH
73102: LD_INT 0
73104: ST_TO_ADDR
// sWound := false ;
73105: LD_ADDR_EXP 92
73109: PUSH
73110: LD_INT 0
73112: ST_TO_ADDR
// sBetray := false ;
73113: LD_ADDR_EXP 96
73117: PUSH
73118: LD_INT 0
73120: ST_TO_ADDR
// sContamin := false ;
73121: LD_ADDR_EXP 97
73125: PUSH
73126: LD_INT 0
73128: ST_TO_ADDR
// sOil := false ;
73129: LD_ADDR_EXP 99
73133: PUSH
73134: LD_INT 0
73136: ST_TO_ADDR
// sStu := false ;
73137: LD_ADDR_EXP 103
73141: PUSH
73142: LD_INT 0
73144: ST_TO_ADDR
// sBazooka := false ;
73145: LD_ADDR_EXP 106
73149: PUSH
73150: LD_INT 0
73152: ST_TO_ADDR
// sMortar := false ;
73153: LD_ADDR_EXP 107
73157: PUSH
73158: LD_INT 0
73160: ST_TO_ADDR
// sRanger := false ;
73161: LD_ADDR_EXP 117
73165: PUSH
73166: LD_INT 0
73168: ST_TO_ADDR
// sComputer := false ;
73169: LD_ADDR_EXP 118
73173: PUSH
73174: LD_INT 0
73176: ST_TO_ADDR
// s30 := false ;
73177: LD_ADDR_EXP 119
73181: PUSH
73182: LD_INT 0
73184: ST_TO_ADDR
// s60 := false ;
73185: LD_ADDR_EXP 120
73189: PUSH
73190: LD_INT 0
73192: ST_TO_ADDR
// end ;
73193: LD_VAR 0 1
73197: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
73198: LD_INT 0
73200: PPUSH
73201: PPUSH
73202: PPUSH
73203: PPUSH
73204: PPUSH
73205: PPUSH
73206: PPUSH
// result := [ ] ;
73207: LD_ADDR_VAR 0 2
73211: PUSH
73212: EMPTY
73213: ST_TO_ADDR
// if campaign_id = 1 then
73214: LD_OWVAR 69
73218: PUSH
73219: LD_INT 1
73221: EQUAL
73222: IFFALSE 76388
// begin case mission_number of 1 :
73224: LD_OWVAR 70
73228: PUSH
73229: LD_INT 1
73231: DOUBLE
73232: EQUAL
73233: IFTRUE 73237
73235: GO 73313
73237: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
73238: LD_ADDR_VAR 0 2
73242: PUSH
73243: LD_INT 2
73245: PUSH
73246: LD_INT 4
73248: PUSH
73249: LD_INT 11
73251: PUSH
73252: LD_INT 12
73254: PUSH
73255: LD_INT 15
73257: PUSH
73258: LD_INT 16
73260: PUSH
73261: LD_INT 22
73263: PUSH
73264: LD_INT 23
73266: PUSH
73267: LD_INT 26
73269: PUSH
73270: EMPTY
73271: LIST
73272: LIST
73273: LIST
73274: LIST
73275: LIST
73276: LIST
73277: LIST
73278: LIST
73279: LIST
73280: PUSH
73281: LD_INT 101
73283: PUSH
73284: LD_INT 102
73286: PUSH
73287: LD_INT 106
73289: PUSH
73290: LD_INT 116
73292: PUSH
73293: LD_INT 117
73295: PUSH
73296: LD_INT 118
73298: PUSH
73299: EMPTY
73300: LIST
73301: LIST
73302: LIST
73303: LIST
73304: LIST
73305: LIST
73306: PUSH
73307: EMPTY
73308: LIST
73309: LIST
73310: ST_TO_ADDR
73311: GO 76386
73313: LD_INT 2
73315: DOUBLE
73316: EQUAL
73317: IFTRUE 73321
73319: GO 73405
73321: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
73322: LD_ADDR_VAR 0 2
73326: PUSH
73327: LD_INT 2
73329: PUSH
73330: LD_INT 4
73332: PUSH
73333: LD_INT 11
73335: PUSH
73336: LD_INT 12
73338: PUSH
73339: LD_INT 15
73341: PUSH
73342: LD_INT 16
73344: PUSH
73345: LD_INT 22
73347: PUSH
73348: LD_INT 23
73350: PUSH
73351: LD_INT 26
73353: PUSH
73354: EMPTY
73355: LIST
73356: LIST
73357: LIST
73358: LIST
73359: LIST
73360: LIST
73361: LIST
73362: LIST
73363: LIST
73364: PUSH
73365: LD_INT 101
73367: PUSH
73368: LD_INT 102
73370: PUSH
73371: LD_INT 105
73373: PUSH
73374: LD_INT 106
73376: PUSH
73377: LD_INT 108
73379: PUSH
73380: LD_INT 116
73382: PUSH
73383: LD_INT 117
73385: PUSH
73386: LD_INT 118
73388: PUSH
73389: EMPTY
73390: LIST
73391: LIST
73392: LIST
73393: LIST
73394: LIST
73395: LIST
73396: LIST
73397: LIST
73398: PUSH
73399: EMPTY
73400: LIST
73401: LIST
73402: ST_TO_ADDR
73403: GO 76386
73405: LD_INT 3
73407: DOUBLE
73408: EQUAL
73409: IFTRUE 73413
73411: GO 73501
73413: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
73414: LD_ADDR_VAR 0 2
73418: PUSH
73419: LD_INT 2
73421: PUSH
73422: LD_INT 4
73424: PUSH
73425: LD_INT 5
73427: PUSH
73428: LD_INT 11
73430: PUSH
73431: LD_INT 12
73433: PUSH
73434: LD_INT 15
73436: PUSH
73437: LD_INT 16
73439: PUSH
73440: LD_INT 22
73442: PUSH
73443: LD_INT 26
73445: PUSH
73446: LD_INT 36
73448: PUSH
73449: EMPTY
73450: LIST
73451: LIST
73452: LIST
73453: LIST
73454: LIST
73455: LIST
73456: LIST
73457: LIST
73458: LIST
73459: LIST
73460: PUSH
73461: LD_INT 101
73463: PUSH
73464: LD_INT 102
73466: PUSH
73467: LD_INT 105
73469: PUSH
73470: LD_INT 106
73472: PUSH
73473: LD_INT 108
73475: PUSH
73476: LD_INT 116
73478: PUSH
73479: LD_INT 117
73481: PUSH
73482: LD_INT 118
73484: PUSH
73485: EMPTY
73486: LIST
73487: LIST
73488: LIST
73489: LIST
73490: LIST
73491: LIST
73492: LIST
73493: LIST
73494: PUSH
73495: EMPTY
73496: LIST
73497: LIST
73498: ST_TO_ADDR
73499: GO 76386
73501: LD_INT 4
73503: DOUBLE
73504: EQUAL
73505: IFTRUE 73509
73507: GO 73605
73509: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
73510: LD_ADDR_VAR 0 2
73514: PUSH
73515: LD_INT 2
73517: PUSH
73518: LD_INT 4
73520: PUSH
73521: LD_INT 5
73523: PUSH
73524: LD_INT 8
73526: PUSH
73527: LD_INT 11
73529: PUSH
73530: LD_INT 12
73532: PUSH
73533: LD_INT 15
73535: PUSH
73536: LD_INT 16
73538: PUSH
73539: LD_INT 22
73541: PUSH
73542: LD_INT 23
73544: PUSH
73545: LD_INT 26
73547: PUSH
73548: LD_INT 36
73550: PUSH
73551: EMPTY
73552: LIST
73553: LIST
73554: LIST
73555: LIST
73556: LIST
73557: LIST
73558: LIST
73559: LIST
73560: LIST
73561: LIST
73562: LIST
73563: LIST
73564: PUSH
73565: LD_INT 101
73567: PUSH
73568: LD_INT 102
73570: PUSH
73571: LD_INT 105
73573: PUSH
73574: LD_INT 106
73576: PUSH
73577: LD_INT 108
73579: PUSH
73580: LD_INT 116
73582: PUSH
73583: LD_INT 117
73585: PUSH
73586: LD_INT 118
73588: PUSH
73589: EMPTY
73590: LIST
73591: LIST
73592: LIST
73593: LIST
73594: LIST
73595: LIST
73596: LIST
73597: LIST
73598: PUSH
73599: EMPTY
73600: LIST
73601: LIST
73602: ST_TO_ADDR
73603: GO 76386
73605: LD_INT 5
73607: DOUBLE
73608: EQUAL
73609: IFTRUE 73613
73611: GO 73725
73613: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
73614: LD_ADDR_VAR 0 2
73618: PUSH
73619: LD_INT 2
73621: PUSH
73622: LD_INT 4
73624: PUSH
73625: LD_INT 5
73627: PUSH
73628: LD_INT 6
73630: PUSH
73631: LD_INT 8
73633: PUSH
73634: LD_INT 11
73636: PUSH
73637: LD_INT 12
73639: PUSH
73640: LD_INT 15
73642: PUSH
73643: LD_INT 16
73645: PUSH
73646: LD_INT 22
73648: PUSH
73649: LD_INT 23
73651: PUSH
73652: LD_INT 25
73654: PUSH
73655: LD_INT 26
73657: PUSH
73658: LD_INT 36
73660: PUSH
73661: EMPTY
73662: LIST
73663: LIST
73664: LIST
73665: LIST
73666: LIST
73667: LIST
73668: LIST
73669: LIST
73670: LIST
73671: LIST
73672: LIST
73673: LIST
73674: LIST
73675: LIST
73676: PUSH
73677: LD_INT 101
73679: PUSH
73680: LD_INT 102
73682: PUSH
73683: LD_INT 105
73685: PUSH
73686: LD_INT 106
73688: PUSH
73689: LD_INT 108
73691: PUSH
73692: LD_INT 109
73694: PUSH
73695: LD_INT 112
73697: PUSH
73698: LD_INT 116
73700: PUSH
73701: LD_INT 117
73703: PUSH
73704: LD_INT 118
73706: PUSH
73707: EMPTY
73708: LIST
73709: LIST
73710: LIST
73711: LIST
73712: LIST
73713: LIST
73714: LIST
73715: LIST
73716: LIST
73717: LIST
73718: PUSH
73719: EMPTY
73720: LIST
73721: LIST
73722: ST_TO_ADDR
73723: GO 76386
73725: LD_INT 6
73727: DOUBLE
73728: EQUAL
73729: IFTRUE 73733
73731: GO 73865
73733: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
73734: LD_ADDR_VAR 0 2
73738: PUSH
73739: LD_INT 2
73741: PUSH
73742: LD_INT 4
73744: PUSH
73745: LD_INT 5
73747: PUSH
73748: LD_INT 6
73750: PUSH
73751: LD_INT 8
73753: PUSH
73754: LD_INT 11
73756: PUSH
73757: LD_INT 12
73759: PUSH
73760: LD_INT 15
73762: PUSH
73763: LD_INT 16
73765: PUSH
73766: LD_INT 20
73768: PUSH
73769: LD_INT 21
73771: PUSH
73772: LD_INT 22
73774: PUSH
73775: LD_INT 23
73777: PUSH
73778: LD_INT 25
73780: PUSH
73781: LD_INT 26
73783: PUSH
73784: LD_INT 30
73786: PUSH
73787: LD_INT 31
73789: PUSH
73790: LD_INT 32
73792: PUSH
73793: LD_INT 36
73795: PUSH
73796: EMPTY
73797: LIST
73798: LIST
73799: LIST
73800: LIST
73801: LIST
73802: LIST
73803: LIST
73804: LIST
73805: LIST
73806: LIST
73807: LIST
73808: LIST
73809: LIST
73810: LIST
73811: LIST
73812: LIST
73813: LIST
73814: LIST
73815: LIST
73816: PUSH
73817: LD_INT 101
73819: PUSH
73820: LD_INT 102
73822: PUSH
73823: LD_INT 105
73825: PUSH
73826: LD_INT 106
73828: PUSH
73829: LD_INT 108
73831: PUSH
73832: LD_INT 109
73834: PUSH
73835: LD_INT 112
73837: PUSH
73838: LD_INT 116
73840: PUSH
73841: LD_INT 117
73843: PUSH
73844: LD_INT 118
73846: PUSH
73847: EMPTY
73848: LIST
73849: LIST
73850: LIST
73851: LIST
73852: LIST
73853: LIST
73854: LIST
73855: LIST
73856: LIST
73857: LIST
73858: PUSH
73859: EMPTY
73860: LIST
73861: LIST
73862: ST_TO_ADDR
73863: GO 76386
73865: LD_INT 7
73867: DOUBLE
73868: EQUAL
73869: IFTRUE 73873
73871: GO 73985
73873: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
73874: LD_ADDR_VAR 0 2
73878: PUSH
73879: LD_INT 2
73881: PUSH
73882: LD_INT 4
73884: PUSH
73885: LD_INT 5
73887: PUSH
73888: LD_INT 7
73890: PUSH
73891: LD_INT 11
73893: PUSH
73894: LD_INT 12
73896: PUSH
73897: LD_INT 15
73899: PUSH
73900: LD_INT 16
73902: PUSH
73903: LD_INT 20
73905: PUSH
73906: LD_INT 21
73908: PUSH
73909: LD_INT 22
73911: PUSH
73912: LD_INT 23
73914: PUSH
73915: LD_INT 25
73917: PUSH
73918: LD_INT 26
73920: PUSH
73921: EMPTY
73922: LIST
73923: LIST
73924: LIST
73925: LIST
73926: LIST
73927: LIST
73928: LIST
73929: LIST
73930: LIST
73931: LIST
73932: LIST
73933: LIST
73934: LIST
73935: LIST
73936: PUSH
73937: LD_INT 101
73939: PUSH
73940: LD_INT 102
73942: PUSH
73943: LD_INT 103
73945: PUSH
73946: LD_INT 105
73948: PUSH
73949: LD_INT 106
73951: PUSH
73952: LD_INT 108
73954: PUSH
73955: LD_INT 112
73957: PUSH
73958: LD_INT 116
73960: PUSH
73961: LD_INT 117
73963: PUSH
73964: LD_INT 118
73966: PUSH
73967: EMPTY
73968: LIST
73969: LIST
73970: LIST
73971: LIST
73972: LIST
73973: LIST
73974: LIST
73975: LIST
73976: LIST
73977: LIST
73978: PUSH
73979: EMPTY
73980: LIST
73981: LIST
73982: ST_TO_ADDR
73983: GO 76386
73985: LD_INT 8
73987: DOUBLE
73988: EQUAL
73989: IFTRUE 73993
73991: GO 74133
73993: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
73994: LD_ADDR_VAR 0 2
73998: PUSH
73999: LD_INT 2
74001: PUSH
74002: LD_INT 4
74004: PUSH
74005: LD_INT 5
74007: PUSH
74008: LD_INT 6
74010: PUSH
74011: LD_INT 7
74013: PUSH
74014: LD_INT 8
74016: PUSH
74017: LD_INT 11
74019: PUSH
74020: LD_INT 12
74022: PUSH
74023: LD_INT 15
74025: PUSH
74026: LD_INT 16
74028: PUSH
74029: LD_INT 20
74031: PUSH
74032: LD_INT 21
74034: PUSH
74035: LD_INT 22
74037: PUSH
74038: LD_INT 23
74040: PUSH
74041: LD_INT 25
74043: PUSH
74044: LD_INT 26
74046: PUSH
74047: LD_INT 30
74049: PUSH
74050: LD_INT 31
74052: PUSH
74053: LD_INT 32
74055: PUSH
74056: LD_INT 36
74058: PUSH
74059: EMPTY
74060: LIST
74061: LIST
74062: LIST
74063: LIST
74064: LIST
74065: LIST
74066: LIST
74067: LIST
74068: LIST
74069: LIST
74070: LIST
74071: LIST
74072: LIST
74073: LIST
74074: LIST
74075: LIST
74076: LIST
74077: LIST
74078: LIST
74079: LIST
74080: PUSH
74081: LD_INT 101
74083: PUSH
74084: LD_INT 102
74086: PUSH
74087: LD_INT 103
74089: PUSH
74090: LD_INT 105
74092: PUSH
74093: LD_INT 106
74095: PUSH
74096: LD_INT 108
74098: PUSH
74099: LD_INT 109
74101: PUSH
74102: LD_INT 112
74104: PUSH
74105: LD_INT 116
74107: PUSH
74108: LD_INT 117
74110: PUSH
74111: LD_INT 118
74113: PUSH
74114: EMPTY
74115: LIST
74116: LIST
74117: LIST
74118: LIST
74119: LIST
74120: LIST
74121: LIST
74122: LIST
74123: LIST
74124: LIST
74125: LIST
74126: PUSH
74127: EMPTY
74128: LIST
74129: LIST
74130: ST_TO_ADDR
74131: GO 76386
74133: LD_INT 9
74135: DOUBLE
74136: EQUAL
74137: IFTRUE 74141
74139: GO 74289
74141: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
74142: LD_ADDR_VAR 0 2
74146: PUSH
74147: LD_INT 2
74149: PUSH
74150: LD_INT 4
74152: PUSH
74153: LD_INT 5
74155: PUSH
74156: LD_INT 6
74158: PUSH
74159: LD_INT 7
74161: PUSH
74162: LD_INT 8
74164: PUSH
74165: LD_INT 11
74167: PUSH
74168: LD_INT 12
74170: PUSH
74171: LD_INT 15
74173: PUSH
74174: LD_INT 16
74176: PUSH
74177: LD_INT 20
74179: PUSH
74180: LD_INT 21
74182: PUSH
74183: LD_INT 22
74185: PUSH
74186: LD_INT 23
74188: PUSH
74189: LD_INT 25
74191: PUSH
74192: LD_INT 26
74194: PUSH
74195: LD_INT 28
74197: PUSH
74198: LD_INT 30
74200: PUSH
74201: LD_INT 31
74203: PUSH
74204: LD_INT 32
74206: PUSH
74207: LD_INT 36
74209: PUSH
74210: EMPTY
74211: LIST
74212: LIST
74213: LIST
74214: LIST
74215: LIST
74216: LIST
74217: LIST
74218: LIST
74219: LIST
74220: LIST
74221: LIST
74222: LIST
74223: LIST
74224: LIST
74225: LIST
74226: LIST
74227: LIST
74228: LIST
74229: LIST
74230: LIST
74231: LIST
74232: PUSH
74233: LD_INT 101
74235: PUSH
74236: LD_INT 102
74238: PUSH
74239: LD_INT 103
74241: PUSH
74242: LD_INT 105
74244: PUSH
74245: LD_INT 106
74247: PUSH
74248: LD_INT 108
74250: PUSH
74251: LD_INT 109
74253: PUSH
74254: LD_INT 112
74256: PUSH
74257: LD_INT 114
74259: PUSH
74260: LD_INT 116
74262: PUSH
74263: LD_INT 117
74265: PUSH
74266: LD_INT 118
74268: PUSH
74269: EMPTY
74270: LIST
74271: LIST
74272: LIST
74273: LIST
74274: LIST
74275: LIST
74276: LIST
74277: LIST
74278: LIST
74279: LIST
74280: LIST
74281: LIST
74282: PUSH
74283: EMPTY
74284: LIST
74285: LIST
74286: ST_TO_ADDR
74287: GO 76386
74289: LD_INT 10
74291: DOUBLE
74292: EQUAL
74293: IFTRUE 74297
74295: GO 74493
74297: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
74298: LD_ADDR_VAR 0 2
74302: PUSH
74303: LD_INT 2
74305: PUSH
74306: LD_INT 4
74308: PUSH
74309: LD_INT 5
74311: PUSH
74312: LD_INT 6
74314: PUSH
74315: LD_INT 7
74317: PUSH
74318: LD_INT 8
74320: PUSH
74321: LD_INT 9
74323: PUSH
74324: LD_INT 10
74326: PUSH
74327: LD_INT 11
74329: PUSH
74330: LD_INT 12
74332: PUSH
74333: LD_INT 13
74335: PUSH
74336: LD_INT 14
74338: PUSH
74339: LD_INT 15
74341: PUSH
74342: LD_INT 16
74344: PUSH
74345: LD_INT 17
74347: PUSH
74348: LD_INT 18
74350: PUSH
74351: LD_INT 19
74353: PUSH
74354: LD_INT 20
74356: PUSH
74357: LD_INT 21
74359: PUSH
74360: LD_INT 22
74362: PUSH
74363: LD_INT 23
74365: PUSH
74366: LD_INT 24
74368: PUSH
74369: LD_INT 25
74371: PUSH
74372: LD_INT 26
74374: PUSH
74375: LD_INT 28
74377: PUSH
74378: LD_INT 30
74380: PUSH
74381: LD_INT 31
74383: PUSH
74384: LD_INT 32
74386: PUSH
74387: LD_INT 36
74389: PUSH
74390: EMPTY
74391: LIST
74392: LIST
74393: LIST
74394: LIST
74395: LIST
74396: LIST
74397: LIST
74398: LIST
74399: LIST
74400: LIST
74401: LIST
74402: LIST
74403: LIST
74404: LIST
74405: LIST
74406: LIST
74407: LIST
74408: LIST
74409: LIST
74410: LIST
74411: LIST
74412: LIST
74413: LIST
74414: LIST
74415: LIST
74416: LIST
74417: LIST
74418: LIST
74419: LIST
74420: PUSH
74421: LD_INT 101
74423: PUSH
74424: LD_INT 102
74426: PUSH
74427: LD_INT 103
74429: PUSH
74430: LD_INT 104
74432: PUSH
74433: LD_INT 105
74435: PUSH
74436: LD_INT 106
74438: PUSH
74439: LD_INT 107
74441: PUSH
74442: LD_INT 108
74444: PUSH
74445: LD_INT 109
74447: PUSH
74448: LD_INT 110
74450: PUSH
74451: LD_INT 111
74453: PUSH
74454: LD_INT 112
74456: PUSH
74457: LD_INT 114
74459: PUSH
74460: LD_INT 116
74462: PUSH
74463: LD_INT 117
74465: PUSH
74466: LD_INT 118
74468: PUSH
74469: EMPTY
74470: LIST
74471: LIST
74472: LIST
74473: LIST
74474: LIST
74475: LIST
74476: LIST
74477: LIST
74478: LIST
74479: LIST
74480: LIST
74481: LIST
74482: LIST
74483: LIST
74484: LIST
74485: LIST
74486: PUSH
74487: EMPTY
74488: LIST
74489: LIST
74490: ST_TO_ADDR
74491: GO 76386
74493: LD_INT 11
74495: DOUBLE
74496: EQUAL
74497: IFTRUE 74501
74499: GO 74705
74501: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
74502: LD_ADDR_VAR 0 2
74506: PUSH
74507: LD_INT 2
74509: PUSH
74510: LD_INT 3
74512: PUSH
74513: LD_INT 4
74515: PUSH
74516: LD_INT 5
74518: PUSH
74519: LD_INT 6
74521: PUSH
74522: LD_INT 7
74524: PUSH
74525: LD_INT 8
74527: PUSH
74528: LD_INT 9
74530: PUSH
74531: LD_INT 10
74533: PUSH
74534: LD_INT 11
74536: PUSH
74537: LD_INT 12
74539: PUSH
74540: LD_INT 13
74542: PUSH
74543: LD_INT 14
74545: PUSH
74546: LD_INT 15
74548: PUSH
74549: LD_INT 16
74551: PUSH
74552: LD_INT 17
74554: PUSH
74555: LD_INT 18
74557: PUSH
74558: LD_INT 19
74560: PUSH
74561: LD_INT 20
74563: PUSH
74564: LD_INT 21
74566: PUSH
74567: LD_INT 22
74569: PUSH
74570: LD_INT 23
74572: PUSH
74573: LD_INT 24
74575: PUSH
74576: LD_INT 25
74578: PUSH
74579: LD_INT 26
74581: PUSH
74582: LD_INT 28
74584: PUSH
74585: LD_INT 30
74587: PUSH
74588: LD_INT 31
74590: PUSH
74591: LD_INT 32
74593: PUSH
74594: LD_INT 34
74596: PUSH
74597: LD_INT 36
74599: PUSH
74600: EMPTY
74601: LIST
74602: LIST
74603: LIST
74604: LIST
74605: LIST
74606: LIST
74607: LIST
74608: LIST
74609: LIST
74610: LIST
74611: LIST
74612: LIST
74613: LIST
74614: LIST
74615: LIST
74616: LIST
74617: LIST
74618: LIST
74619: LIST
74620: LIST
74621: LIST
74622: LIST
74623: LIST
74624: LIST
74625: LIST
74626: LIST
74627: LIST
74628: LIST
74629: LIST
74630: LIST
74631: LIST
74632: PUSH
74633: LD_INT 101
74635: PUSH
74636: LD_INT 102
74638: PUSH
74639: LD_INT 103
74641: PUSH
74642: LD_INT 104
74644: PUSH
74645: LD_INT 105
74647: PUSH
74648: LD_INT 106
74650: PUSH
74651: LD_INT 107
74653: PUSH
74654: LD_INT 108
74656: PUSH
74657: LD_INT 109
74659: PUSH
74660: LD_INT 110
74662: PUSH
74663: LD_INT 111
74665: PUSH
74666: LD_INT 112
74668: PUSH
74669: LD_INT 114
74671: PUSH
74672: LD_INT 116
74674: PUSH
74675: LD_INT 117
74677: PUSH
74678: LD_INT 118
74680: PUSH
74681: EMPTY
74682: LIST
74683: LIST
74684: LIST
74685: LIST
74686: LIST
74687: LIST
74688: LIST
74689: LIST
74690: LIST
74691: LIST
74692: LIST
74693: LIST
74694: LIST
74695: LIST
74696: LIST
74697: LIST
74698: PUSH
74699: EMPTY
74700: LIST
74701: LIST
74702: ST_TO_ADDR
74703: GO 76386
74705: LD_INT 12
74707: DOUBLE
74708: EQUAL
74709: IFTRUE 74713
74711: GO 74933
74713: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
74714: LD_ADDR_VAR 0 2
74718: PUSH
74719: LD_INT 1
74721: PUSH
74722: LD_INT 2
74724: PUSH
74725: LD_INT 3
74727: PUSH
74728: LD_INT 4
74730: PUSH
74731: LD_INT 5
74733: PUSH
74734: LD_INT 6
74736: PUSH
74737: LD_INT 7
74739: PUSH
74740: LD_INT 8
74742: PUSH
74743: LD_INT 9
74745: PUSH
74746: LD_INT 10
74748: PUSH
74749: LD_INT 11
74751: PUSH
74752: LD_INT 12
74754: PUSH
74755: LD_INT 13
74757: PUSH
74758: LD_INT 14
74760: PUSH
74761: LD_INT 15
74763: PUSH
74764: LD_INT 16
74766: PUSH
74767: LD_INT 17
74769: PUSH
74770: LD_INT 18
74772: PUSH
74773: LD_INT 19
74775: PUSH
74776: LD_INT 20
74778: PUSH
74779: LD_INT 21
74781: PUSH
74782: LD_INT 22
74784: PUSH
74785: LD_INT 23
74787: PUSH
74788: LD_INT 24
74790: PUSH
74791: LD_INT 25
74793: PUSH
74794: LD_INT 26
74796: PUSH
74797: LD_INT 27
74799: PUSH
74800: LD_INT 28
74802: PUSH
74803: LD_INT 30
74805: PUSH
74806: LD_INT 31
74808: PUSH
74809: LD_INT 32
74811: PUSH
74812: LD_INT 33
74814: PUSH
74815: LD_INT 34
74817: PUSH
74818: LD_INT 36
74820: PUSH
74821: EMPTY
74822: LIST
74823: LIST
74824: LIST
74825: LIST
74826: LIST
74827: LIST
74828: LIST
74829: LIST
74830: LIST
74831: LIST
74832: LIST
74833: LIST
74834: LIST
74835: LIST
74836: LIST
74837: LIST
74838: LIST
74839: LIST
74840: LIST
74841: LIST
74842: LIST
74843: LIST
74844: LIST
74845: LIST
74846: LIST
74847: LIST
74848: LIST
74849: LIST
74850: LIST
74851: LIST
74852: LIST
74853: LIST
74854: LIST
74855: LIST
74856: PUSH
74857: LD_INT 101
74859: PUSH
74860: LD_INT 102
74862: PUSH
74863: LD_INT 103
74865: PUSH
74866: LD_INT 104
74868: PUSH
74869: LD_INT 105
74871: PUSH
74872: LD_INT 106
74874: PUSH
74875: LD_INT 107
74877: PUSH
74878: LD_INT 108
74880: PUSH
74881: LD_INT 109
74883: PUSH
74884: LD_INT 110
74886: PUSH
74887: LD_INT 111
74889: PUSH
74890: LD_INT 112
74892: PUSH
74893: LD_INT 113
74895: PUSH
74896: LD_INT 114
74898: PUSH
74899: LD_INT 116
74901: PUSH
74902: LD_INT 117
74904: PUSH
74905: LD_INT 118
74907: PUSH
74908: EMPTY
74909: LIST
74910: LIST
74911: LIST
74912: LIST
74913: LIST
74914: LIST
74915: LIST
74916: LIST
74917: LIST
74918: LIST
74919: LIST
74920: LIST
74921: LIST
74922: LIST
74923: LIST
74924: LIST
74925: LIST
74926: PUSH
74927: EMPTY
74928: LIST
74929: LIST
74930: ST_TO_ADDR
74931: GO 76386
74933: LD_INT 13
74935: DOUBLE
74936: EQUAL
74937: IFTRUE 74941
74939: GO 75149
74941: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
74942: LD_ADDR_VAR 0 2
74946: PUSH
74947: LD_INT 1
74949: PUSH
74950: LD_INT 2
74952: PUSH
74953: LD_INT 3
74955: PUSH
74956: LD_INT 4
74958: PUSH
74959: LD_INT 5
74961: PUSH
74962: LD_INT 8
74964: PUSH
74965: LD_INT 9
74967: PUSH
74968: LD_INT 10
74970: PUSH
74971: LD_INT 11
74973: PUSH
74974: LD_INT 12
74976: PUSH
74977: LD_INT 14
74979: PUSH
74980: LD_INT 15
74982: PUSH
74983: LD_INT 16
74985: PUSH
74986: LD_INT 17
74988: PUSH
74989: LD_INT 18
74991: PUSH
74992: LD_INT 19
74994: PUSH
74995: LD_INT 20
74997: PUSH
74998: LD_INT 21
75000: PUSH
75001: LD_INT 22
75003: PUSH
75004: LD_INT 23
75006: PUSH
75007: LD_INT 24
75009: PUSH
75010: LD_INT 25
75012: PUSH
75013: LD_INT 26
75015: PUSH
75016: LD_INT 27
75018: PUSH
75019: LD_INT 28
75021: PUSH
75022: LD_INT 30
75024: PUSH
75025: LD_INT 31
75027: PUSH
75028: LD_INT 32
75030: PUSH
75031: LD_INT 33
75033: PUSH
75034: LD_INT 34
75036: PUSH
75037: LD_INT 36
75039: PUSH
75040: EMPTY
75041: LIST
75042: LIST
75043: LIST
75044: LIST
75045: LIST
75046: LIST
75047: LIST
75048: LIST
75049: LIST
75050: LIST
75051: LIST
75052: LIST
75053: LIST
75054: LIST
75055: LIST
75056: LIST
75057: LIST
75058: LIST
75059: LIST
75060: LIST
75061: LIST
75062: LIST
75063: LIST
75064: LIST
75065: LIST
75066: LIST
75067: LIST
75068: LIST
75069: LIST
75070: LIST
75071: LIST
75072: PUSH
75073: LD_INT 101
75075: PUSH
75076: LD_INT 102
75078: PUSH
75079: LD_INT 103
75081: PUSH
75082: LD_INT 104
75084: PUSH
75085: LD_INT 105
75087: PUSH
75088: LD_INT 106
75090: PUSH
75091: LD_INT 107
75093: PUSH
75094: LD_INT 108
75096: PUSH
75097: LD_INT 109
75099: PUSH
75100: LD_INT 110
75102: PUSH
75103: LD_INT 111
75105: PUSH
75106: LD_INT 112
75108: PUSH
75109: LD_INT 113
75111: PUSH
75112: LD_INT 114
75114: PUSH
75115: LD_INT 116
75117: PUSH
75118: LD_INT 117
75120: PUSH
75121: LD_INT 118
75123: PUSH
75124: EMPTY
75125: LIST
75126: LIST
75127: LIST
75128: LIST
75129: LIST
75130: LIST
75131: LIST
75132: LIST
75133: LIST
75134: LIST
75135: LIST
75136: LIST
75137: LIST
75138: LIST
75139: LIST
75140: LIST
75141: LIST
75142: PUSH
75143: EMPTY
75144: LIST
75145: LIST
75146: ST_TO_ADDR
75147: GO 76386
75149: LD_INT 14
75151: DOUBLE
75152: EQUAL
75153: IFTRUE 75157
75155: GO 75381
75157: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
75158: LD_ADDR_VAR 0 2
75162: PUSH
75163: LD_INT 1
75165: PUSH
75166: LD_INT 2
75168: PUSH
75169: LD_INT 3
75171: PUSH
75172: LD_INT 4
75174: PUSH
75175: LD_INT 5
75177: PUSH
75178: LD_INT 6
75180: PUSH
75181: LD_INT 7
75183: PUSH
75184: LD_INT 8
75186: PUSH
75187: LD_INT 9
75189: PUSH
75190: LD_INT 10
75192: PUSH
75193: LD_INT 11
75195: PUSH
75196: LD_INT 12
75198: PUSH
75199: LD_INT 13
75201: PUSH
75202: LD_INT 14
75204: PUSH
75205: LD_INT 15
75207: PUSH
75208: LD_INT 16
75210: PUSH
75211: LD_INT 17
75213: PUSH
75214: LD_INT 18
75216: PUSH
75217: LD_INT 19
75219: PUSH
75220: LD_INT 20
75222: PUSH
75223: LD_INT 21
75225: PUSH
75226: LD_INT 22
75228: PUSH
75229: LD_INT 23
75231: PUSH
75232: LD_INT 24
75234: PUSH
75235: LD_INT 25
75237: PUSH
75238: LD_INT 26
75240: PUSH
75241: LD_INT 27
75243: PUSH
75244: LD_INT 28
75246: PUSH
75247: LD_INT 29
75249: PUSH
75250: LD_INT 30
75252: PUSH
75253: LD_INT 31
75255: PUSH
75256: LD_INT 32
75258: PUSH
75259: LD_INT 33
75261: PUSH
75262: LD_INT 34
75264: PUSH
75265: LD_INT 36
75267: PUSH
75268: EMPTY
75269: LIST
75270: LIST
75271: LIST
75272: LIST
75273: LIST
75274: LIST
75275: LIST
75276: LIST
75277: LIST
75278: LIST
75279: LIST
75280: LIST
75281: LIST
75282: LIST
75283: LIST
75284: LIST
75285: LIST
75286: LIST
75287: LIST
75288: LIST
75289: LIST
75290: LIST
75291: LIST
75292: LIST
75293: LIST
75294: LIST
75295: LIST
75296: LIST
75297: LIST
75298: LIST
75299: LIST
75300: LIST
75301: LIST
75302: LIST
75303: LIST
75304: PUSH
75305: LD_INT 101
75307: PUSH
75308: LD_INT 102
75310: PUSH
75311: LD_INT 103
75313: PUSH
75314: LD_INT 104
75316: PUSH
75317: LD_INT 105
75319: PUSH
75320: LD_INT 106
75322: PUSH
75323: LD_INT 107
75325: PUSH
75326: LD_INT 108
75328: PUSH
75329: LD_INT 109
75331: PUSH
75332: LD_INT 110
75334: PUSH
75335: LD_INT 111
75337: PUSH
75338: LD_INT 112
75340: PUSH
75341: LD_INT 113
75343: PUSH
75344: LD_INT 114
75346: PUSH
75347: LD_INT 116
75349: PUSH
75350: LD_INT 117
75352: PUSH
75353: LD_INT 118
75355: PUSH
75356: EMPTY
75357: LIST
75358: LIST
75359: LIST
75360: LIST
75361: LIST
75362: LIST
75363: LIST
75364: LIST
75365: LIST
75366: LIST
75367: LIST
75368: LIST
75369: LIST
75370: LIST
75371: LIST
75372: LIST
75373: LIST
75374: PUSH
75375: EMPTY
75376: LIST
75377: LIST
75378: ST_TO_ADDR
75379: GO 76386
75381: LD_INT 15
75383: DOUBLE
75384: EQUAL
75385: IFTRUE 75389
75387: GO 75613
75389: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
75390: LD_ADDR_VAR 0 2
75394: PUSH
75395: LD_INT 1
75397: PUSH
75398: LD_INT 2
75400: PUSH
75401: LD_INT 3
75403: PUSH
75404: LD_INT 4
75406: PUSH
75407: LD_INT 5
75409: PUSH
75410: LD_INT 6
75412: PUSH
75413: LD_INT 7
75415: PUSH
75416: LD_INT 8
75418: PUSH
75419: LD_INT 9
75421: PUSH
75422: LD_INT 10
75424: PUSH
75425: LD_INT 11
75427: PUSH
75428: LD_INT 12
75430: PUSH
75431: LD_INT 13
75433: PUSH
75434: LD_INT 14
75436: PUSH
75437: LD_INT 15
75439: PUSH
75440: LD_INT 16
75442: PUSH
75443: LD_INT 17
75445: PUSH
75446: LD_INT 18
75448: PUSH
75449: LD_INT 19
75451: PUSH
75452: LD_INT 20
75454: PUSH
75455: LD_INT 21
75457: PUSH
75458: LD_INT 22
75460: PUSH
75461: LD_INT 23
75463: PUSH
75464: LD_INT 24
75466: PUSH
75467: LD_INT 25
75469: PUSH
75470: LD_INT 26
75472: PUSH
75473: LD_INT 27
75475: PUSH
75476: LD_INT 28
75478: PUSH
75479: LD_INT 29
75481: PUSH
75482: LD_INT 30
75484: PUSH
75485: LD_INT 31
75487: PUSH
75488: LD_INT 32
75490: PUSH
75491: LD_INT 33
75493: PUSH
75494: LD_INT 34
75496: PUSH
75497: LD_INT 36
75499: PUSH
75500: EMPTY
75501: LIST
75502: LIST
75503: LIST
75504: LIST
75505: LIST
75506: LIST
75507: LIST
75508: LIST
75509: LIST
75510: LIST
75511: LIST
75512: LIST
75513: LIST
75514: LIST
75515: LIST
75516: LIST
75517: LIST
75518: LIST
75519: LIST
75520: LIST
75521: LIST
75522: LIST
75523: LIST
75524: LIST
75525: LIST
75526: LIST
75527: LIST
75528: LIST
75529: LIST
75530: LIST
75531: LIST
75532: LIST
75533: LIST
75534: LIST
75535: LIST
75536: PUSH
75537: LD_INT 101
75539: PUSH
75540: LD_INT 102
75542: PUSH
75543: LD_INT 103
75545: PUSH
75546: LD_INT 104
75548: PUSH
75549: LD_INT 105
75551: PUSH
75552: LD_INT 106
75554: PUSH
75555: LD_INT 107
75557: PUSH
75558: LD_INT 108
75560: PUSH
75561: LD_INT 109
75563: PUSH
75564: LD_INT 110
75566: PUSH
75567: LD_INT 111
75569: PUSH
75570: LD_INT 112
75572: PUSH
75573: LD_INT 113
75575: PUSH
75576: LD_INT 114
75578: PUSH
75579: LD_INT 116
75581: PUSH
75582: LD_INT 117
75584: PUSH
75585: LD_INT 118
75587: PUSH
75588: EMPTY
75589: LIST
75590: LIST
75591: LIST
75592: LIST
75593: LIST
75594: LIST
75595: LIST
75596: LIST
75597: LIST
75598: LIST
75599: LIST
75600: LIST
75601: LIST
75602: LIST
75603: LIST
75604: LIST
75605: LIST
75606: PUSH
75607: EMPTY
75608: LIST
75609: LIST
75610: ST_TO_ADDR
75611: GO 76386
75613: LD_INT 16
75615: DOUBLE
75616: EQUAL
75617: IFTRUE 75621
75619: GO 75757
75621: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
75622: LD_ADDR_VAR 0 2
75626: PUSH
75627: LD_INT 2
75629: PUSH
75630: LD_INT 4
75632: PUSH
75633: LD_INT 5
75635: PUSH
75636: LD_INT 7
75638: PUSH
75639: LD_INT 11
75641: PUSH
75642: LD_INT 12
75644: PUSH
75645: LD_INT 15
75647: PUSH
75648: LD_INT 16
75650: PUSH
75651: LD_INT 20
75653: PUSH
75654: LD_INT 21
75656: PUSH
75657: LD_INT 22
75659: PUSH
75660: LD_INT 23
75662: PUSH
75663: LD_INT 25
75665: PUSH
75666: LD_INT 26
75668: PUSH
75669: LD_INT 30
75671: PUSH
75672: LD_INT 31
75674: PUSH
75675: LD_INT 32
75677: PUSH
75678: LD_INT 33
75680: PUSH
75681: LD_INT 34
75683: PUSH
75684: EMPTY
75685: LIST
75686: LIST
75687: LIST
75688: LIST
75689: LIST
75690: LIST
75691: LIST
75692: LIST
75693: LIST
75694: LIST
75695: LIST
75696: LIST
75697: LIST
75698: LIST
75699: LIST
75700: LIST
75701: LIST
75702: LIST
75703: LIST
75704: PUSH
75705: LD_INT 101
75707: PUSH
75708: LD_INT 102
75710: PUSH
75711: LD_INT 103
75713: PUSH
75714: LD_INT 106
75716: PUSH
75717: LD_INT 108
75719: PUSH
75720: LD_INT 112
75722: PUSH
75723: LD_INT 113
75725: PUSH
75726: LD_INT 114
75728: PUSH
75729: LD_INT 116
75731: PUSH
75732: LD_INT 117
75734: PUSH
75735: LD_INT 118
75737: PUSH
75738: EMPTY
75739: LIST
75740: LIST
75741: LIST
75742: LIST
75743: LIST
75744: LIST
75745: LIST
75746: LIST
75747: LIST
75748: LIST
75749: LIST
75750: PUSH
75751: EMPTY
75752: LIST
75753: LIST
75754: ST_TO_ADDR
75755: GO 76386
75757: LD_INT 17
75759: DOUBLE
75760: EQUAL
75761: IFTRUE 75765
75763: GO 75989
75765: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
75766: LD_ADDR_VAR 0 2
75770: PUSH
75771: LD_INT 1
75773: PUSH
75774: LD_INT 2
75776: PUSH
75777: LD_INT 3
75779: PUSH
75780: LD_INT 4
75782: PUSH
75783: LD_INT 5
75785: PUSH
75786: LD_INT 6
75788: PUSH
75789: LD_INT 7
75791: PUSH
75792: LD_INT 8
75794: PUSH
75795: LD_INT 9
75797: PUSH
75798: LD_INT 10
75800: PUSH
75801: LD_INT 11
75803: PUSH
75804: LD_INT 12
75806: PUSH
75807: LD_INT 13
75809: PUSH
75810: LD_INT 14
75812: PUSH
75813: LD_INT 15
75815: PUSH
75816: LD_INT 16
75818: PUSH
75819: LD_INT 17
75821: PUSH
75822: LD_INT 18
75824: PUSH
75825: LD_INT 19
75827: PUSH
75828: LD_INT 20
75830: PUSH
75831: LD_INT 21
75833: PUSH
75834: LD_INT 22
75836: PUSH
75837: LD_INT 23
75839: PUSH
75840: LD_INT 24
75842: PUSH
75843: LD_INT 25
75845: PUSH
75846: LD_INT 26
75848: PUSH
75849: LD_INT 27
75851: PUSH
75852: LD_INT 28
75854: PUSH
75855: LD_INT 29
75857: PUSH
75858: LD_INT 30
75860: PUSH
75861: LD_INT 31
75863: PUSH
75864: LD_INT 32
75866: PUSH
75867: LD_INT 33
75869: PUSH
75870: LD_INT 34
75872: PUSH
75873: LD_INT 36
75875: PUSH
75876: EMPTY
75877: LIST
75878: LIST
75879: LIST
75880: LIST
75881: LIST
75882: LIST
75883: LIST
75884: LIST
75885: LIST
75886: LIST
75887: LIST
75888: LIST
75889: LIST
75890: LIST
75891: LIST
75892: LIST
75893: LIST
75894: LIST
75895: LIST
75896: LIST
75897: LIST
75898: LIST
75899: LIST
75900: LIST
75901: LIST
75902: LIST
75903: LIST
75904: LIST
75905: LIST
75906: LIST
75907: LIST
75908: LIST
75909: LIST
75910: LIST
75911: LIST
75912: PUSH
75913: LD_INT 101
75915: PUSH
75916: LD_INT 102
75918: PUSH
75919: LD_INT 103
75921: PUSH
75922: LD_INT 104
75924: PUSH
75925: LD_INT 105
75927: PUSH
75928: LD_INT 106
75930: PUSH
75931: LD_INT 107
75933: PUSH
75934: LD_INT 108
75936: PUSH
75937: LD_INT 109
75939: PUSH
75940: LD_INT 110
75942: PUSH
75943: LD_INT 111
75945: PUSH
75946: LD_INT 112
75948: PUSH
75949: LD_INT 113
75951: PUSH
75952: LD_INT 114
75954: PUSH
75955: LD_INT 116
75957: PUSH
75958: LD_INT 117
75960: PUSH
75961: LD_INT 118
75963: PUSH
75964: EMPTY
75965: LIST
75966: LIST
75967: LIST
75968: LIST
75969: LIST
75970: LIST
75971: LIST
75972: LIST
75973: LIST
75974: LIST
75975: LIST
75976: LIST
75977: LIST
75978: LIST
75979: LIST
75980: LIST
75981: LIST
75982: PUSH
75983: EMPTY
75984: LIST
75985: LIST
75986: ST_TO_ADDR
75987: GO 76386
75989: LD_INT 18
75991: DOUBLE
75992: EQUAL
75993: IFTRUE 75997
75995: GO 76145
75997: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
75998: LD_ADDR_VAR 0 2
76002: PUSH
76003: LD_INT 2
76005: PUSH
76006: LD_INT 4
76008: PUSH
76009: LD_INT 5
76011: PUSH
76012: LD_INT 7
76014: PUSH
76015: LD_INT 11
76017: PUSH
76018: LD_INT 12
76020: PUSH
76021: LD_INT 15
76023: PUSH
76024: LD_INT 16
76026: PUSH
76027: LD_INT 20
76029: PUSH
76030: LD_INT 21
76032: PUSH
76033: LD_INT 22
76035: PUSH
76036: LD_INT 23
76038: PUSH
76039: LD_INT 25
76041: PUSH
76042: LD_INT 26
76044: PUSH
76045: LD_INT 30
76047: PUSH
76048: LD_INT 31
76050: PUSH
76051: LD_INT 32
76053: PUSH
76054: LD_INT 33
76056: PUSH
76057: LD_INT 34
76059: PUSH
76060: LD_INT 35
76062: PUSH
76063: LD_INT 36
76065: PUSH
76066: EMPTY
76067: LIST
76068: LIST
76069: LIST
76070: LIST
76071: LIST
76072: LIST
76073: LIST
76074: LIST
76075: LIST
76076: LIST
76077: LIST
76078: LIST
76079: LIST
76080: LIST
76081: LIST
76082: LIST
76083: LIST
76084: LIST
76085: LIST
76086: LIST
76087: LIST
76088: PUSH
76089: LD_INT 101
76091: PUSH
76092: LD_INT 102
76094: PUSH
76095: LD_INT 103
76097: PUSH
76098: LD_INT 106
76100: PUSH
76101: LD_INT 108
76103: PUSH
76104: LD_INT 112
76106: PUSH
76107: LD_INT 113
76109: PUSH
76110: LD_INT 114
76112: PUSH
76113: LD_INT 115
76115: PUSH
76116: LD_INT 116
76118: PUSH
76119: LD_INT 117
76121: PUSH
76122: LD_INT 118
76124: PUSH
76125: EMPTY
76126: LIST
76127: LIST
76128: LIST
76129: LIST
76130: LIST
76131: LIST
76132: LIST
76133: LIST
76134: LIST
76135: LIST
76136: LIST
76137: LIST
76138: PUSH
76139: EMPTY
76140: LIST
76141: LIST
76142: ST_TO_ADDR
76143: GO 76386
76145: LD_INT 19
76147: DOUBLE
76148: EQUAL
76149: IFTRUE 76153
76151: GO 76385
76153: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
76154: LD_ADDR_VAR 0 2
76158: PUSH
76159: LD_INT 1
76161: PUSH
76162: LD_INT 2
76164: PUSH
76165: LD_INT 3
76167: PUSH
76168: LD_INT 4
76170: PUSH
76171: LD_INT 5
76173: PUSH
76174: LD_INT 6
76176: PUSH
76177: LD_INT 7
76179: PUSH
76180: LD_INT 8
76182: PUSH
76183: LD_INT 9
76185: PUSH
76186: LD_INT 10
76188: PUSH
76189: LD_INT 11
76191: PUSH
76192: LD_INT 12
76194: PUSH
76195: LD_INT 13
76197: PUSH
76198: LD_INT 14
76200: PUSH
76201: LD_INT 15
76203: PUSH
76204: LD_INT 16
76206: PUSH
76207: LD_INT 17
76209: PUSH
76210: LD_INT 18
76212: PUSH
76213: LD_INT 19
76215: PUSH
76216: LD_INT 20
76218: PUSH
76219: LD_INT 21
76221: PUSH
76222: LD_INT 22
76224: PUSH
76225: LD_INT 23
76227: PUSH
76228: LD_INT 24
76230: PUSH
76231: LD_INT 25
76233: PUSH
76234: LD_INT 26
76236: PUSH
76237: LD_INT 27
76239: PUSH
76240: LD_INT 28
76242: PUSH
76243: LD_INT 29
76245: PUSH
76246: LD_INT 30
76248: PUSH
76249: LD_INT 31
76251: PUSH
76252: LD_INT 32
76254: PUSH
76255: LD_INT 33
76257: PUSH
76258: LD_INT 34
76260: PUSH
76261: LD_INT 35
76263: PUSH
76264: LD_INT 36
76266: PUSH
76267: EMPTY
76268: LIST
76269: LIST
76270: LIST
76271: LIST
76272: LIST
76273: LIST
76274: LIST
76275: LIST
76276: LIST
76277: LIST
76278: LIST
76279: LIST
76280: LIST
76281: LIST
76282: LIST
76283: LIST
76284: LIST
76285: LIST
76286: LIST
76287: LIST
76288: LIST
76289: LIST
76290: LIST
76291: LIST
76292: LIST
76293: LIST
76294: LIST
76295: LIST
76296: LIST
76297: LIST
76298: LIST
76299: LIST
76300: LIST
76301: LIST
76302: LIST
76303: LIST
76304: PUSH
76305: LD_INT 101
76307: PUSH
76308: LD_INT 102
76310: PUSH
76311: LD_INT 103
76313: PUSH
76314: LD_INT 104
76316: PUSH
76317: LD_INT 105
76319: PUSH
76320: LD_INT 106
76322: PUSH
76323: LD_INT 107
76325: PUSH
76326: LD_INT 108
76328: PUSH
76329: LD_INT 109
76331: PUSH
76332: LD_INT 110
76334: PUSH
76335: LD_INT 111
76337: PUSH
76338: LD_INT 112
76340: PUSH
76341: LD_INT 113
76343: PUSH
76344: LD_INT 114
76346: PUSH
76347: LD_INT 115
76349: PUSH
76350: LD_INT 116
76352: PUSH
76353: LD_INT 117
76355: PUSH
76356: LD_INT 118
76358: PUSH
76359: EMPTY
76360: LIST
76361: LIST
76362: LIST
76363: LIST
76364: LIST
76365: LIST
76366: LIST
76367: LIST
76368: LIST
76369: LIST
76370: LIST
76371: LIST
76372: LIST
76373: LIST
76374: LIST
76375: LIST
76376: LIST
76377: LIST
76378: PUSH
76379: EMPTY
76380: LIST
76381: LIST
76382: ST_TO_ADDR
76383: GO 76386
76385: POP
// end else
76386: GO 76617
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
76388: LD_ADDR_VAR 0 2
76392: PUSH
76393: LD_INT 1
76395: PUSH
76396: LD_INT 2
76398: PUSH
76399: LD_INT 3
76401: PUSH
76402: LD_INT 4
76404: PUSH
76405: LD_INT 5
76407: PUSH
76408: LD_INT 6
76410: PUSH
76411: LD_INT 7
76413: PUSH
76414: LD_INT 8
76416: PUSH
76417: LD_INT 9
76419: PUSH
76420: LD_INT 10
76422: PUSH
76423: LD_INT 11
76425: PUSH
76426: LD_INT 12
76428: PUSH
76429: LD_INT 13
76431: PUSH
76432: LD_INT 14
76434: PUSH
76435: LD_INT 15
76437: PUSH
76438: LD_INT 16
76440: PUSH
76441: LD_INT 17
76443: PUSH
76444: LD_INT 18
76446: PUSH
76447: LD_INT 19
76449: PUSH
76450: LD_INT 20
76452: PUSH
76453: LD_INT 21
76455: PUSH
76456: LD_INT 22
76458: PUSH
76459: LD_INT 23
76461: PUSH
76462: LD_INT 24
76464: PUSH
76465: LD_INT 25
76467: PUSH
76468: LD_INT 26
76470: PUSH
76471: LD_INT 27
76473: PUSH
76474: LD_INT 28
76476: PUSH
76477: LD_INT 29
76479: PUSH
76480: LD_INT 30
76482: PUSH
76483: LD_INT 31
76485: PUSH
76486: LD_INT 32
76488: PUSH
76489: LD_INT 33
76491: PUSH
76492: LD_INT 34
76494: PUSH
76495: LD_INT 35
76497: PUSH
76498: LD_INT 36
76500: PUSH
76501: EMPTY
76502: LIST
76503: LIST
76504: LIST
76505: LIST
76506: LIST
76507: LIST
76508: LIST
76509: LIST
76510: LIST
76511: LIST
76512: LIST
76513: LIST
76514: LIST
76515: LIST
76516: LIST
76517: LIST
76518: LIST
76519: LIST
76520: LIST
76521: LIST
76522: LIST
76523: LIST
76524: LIST
76525: LIST
76526: LIST
76527: LIST
76528: LIST
76529: LIST
76530: LIST
76531: LIST
76532: LIST
76533: LIST
76534: LIST
76535: LIST
76536: LIST
76537: LIST
76538: PUSH
76539: LD_INT 101
76541: PUSH
76542: LD_INT 102
76544: PUSH
76545: LD_INT 103
76547: PUSH
76548: LD_INT 104
76550: PUSH
76551: LD_INT 105
76553: PUSH
76554: LD_INT 106
76556: PUSH
76557: LD_INT 107
76559: PUSH
76560: LD_INT 108
76562: PUSH
76563: LD_INT 109
76565: PUSH
76566: LD_INT 110
76568: PUSH
76569: LD_INT 111
76571: PUSH
76572: LD_INT 112
76574: PUSH
76575: LD_INT 113
76577: PUSH
76578: LD_INT 114
76580: PUSH
76581: LD_INT 115
76583: PUSH
76584: LD_INT 116
76586: PUSH
76587: LD_INT 117
76589: PUSH
76590: LD_INT 118
76592: PUSH
76593: EMPTY
76594: LIST
76595: LIST
76596: LIST
76597: LIST
76598: LIST
76599: LIST
76600: LIST
76601: LIST
76602: LIST
76603: LIST
76604: LIST
76605: LIST
76606: LIST
76607: LIST
76608: LIST
76609: LIST
76610: LIST
76611: LIST
76612: PUSH
76613: EMPTY
76614: LIST
76615: LIST
76616: ST_TO_ADDR
// if result then
76617: LD_VAR 0 2
76621: IFFALSE 77407
// begin normal :=  ;
76623: LD_ADDR_VAR 0 5
76627: PUSH
76628: LD_STRING 
76630: ST_TO_ADDR
// hardcore :=  ;
76631: LD_ADDR_VAR 0 6
76635: PUSH
76636: LD_STRING 
76638: ST_TO_ADDR
// active :=  ;
76639: LD_ADDR_VAR 0 7
76643: PUSH
76644: LD_STRING 
76646: ST_TO_ADDR
// for i = 1 to normalCounter do
76647: LD_ADDR_VAR 0 8
76651: PUSH
76652: DOUBLE
76653: LD_INT 1
76655: DEC
76656: ST_TO_ADDR
76657: LD_EXP 65
76661: PUSH
76662: FOR_TO
76663: IFFALSE 76764
// begin tmp := 0 ;
76665: LD_ADDR_VAR 0 3
76669: PUSH
76670: LD_STRING 0
76672: ST_TO_ADDR
// if result [ 1 ] then
76673: LD_VAR 0 2
76677: PUSH
76678: LD_INT 1
76680: ARRAY
76681: IFFALSE 76746
// if result [ 1 ] [ 1 ] = i then
76683: LD_VAR 0 2
76687: PUSH
76688: LD_INT 1
76690: ARRAY
76691: PUSH
76692: LD_INT 1
76694: ARRAY
76695: PUSH
76696: LD_VAR 0 8
76700: EQUAL
76701: IFFALSE 76746
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
76703: LD_ADDR_VAR 0 2
76707: PUSH
76708: LD_VAR 0 2
76712: PPUSH
76713: LD_INT 1
76715: PPUSH
76716: LD_VAR 0 2
76720: PUSH
76721: LD_INT 1
76723: ARRAY
76724: PPUSH
76725: LD_INT 1
76727: PPUSH
76728: CALL_OW 3
76732: PPUSH
76733: CALL_OW 1
76737: ST_TO_ADDR
// tmp := 1 ;
76738: LD_ADDR_VAR 0 3
76742: PUSH
76743: LD_STRING 1
76745: ST_TO_ADDR
// end ; normal := normal & tmp ;
76746: LD_ADDR_VAR 0 5
76750: PUSH
76751: LD_VAR 0 5
76755: PUSH
76756: LD_VAR 0 3
76760: STR
76761: ST_TO_ADDR
// end ;
76762: GO 76662
76764: POP
76765: POP
// for i = 1 to hardcoreCounter do
76766: LD_ADDR_VAR 0 8
76770: PUSH
76771: DOUBLE
76772: LD_INT 1
76774: DEC
76775: ST_TO_ADDR
76776: LD_EXP 66
76780: PUSH
76781: FOR_TO
76782: IFFALSE 76887
// begin tmp := 0 ;
76784: LD_ADDR_VAR 0 3
76788: PUSH
76789: LD_STRING 0
76791: ST_TO_ADDR
// if result [ 2 ] then
76792: LD_VAR 0 2
76796: PUSH
76797: LD_INT 2
76799: ARRAY
76800: IFFALSE 76869
// if result [ 2 ] [ 1 ] = 100 + i then
76802: LD_VAR 0 2
76806: PUSH
76807: LD_INT 2
76809: ARRAY
76810: PUSH
76811: LD_INT 1
76813: ARRAY
76814: PUSH
76815: LD_INT 100
76817: PUSH
76818: LD_VAR 0 8
76822: PLUS
76823: EQUAL
76824: IFFALSE 76869
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
76826: LD_ADDR_VAR 0 2
76830: PUSH
76831: LD_VAR 0 2
76835: PPUSH
76836: LD_INT 2
76838: PPUSH
76839: LD_VAR 0 2
76843: PUSH
76844: LD_INT 2
76846: ARRAY
76847: PPUSH
76848: LD_INT 1
76850: PPUSH
76851: CALL_OW 3
76855: PPUSH
76856: CALL_OW 1
76860: ST_TO_ADDR
// tmp := 1 ;
76861: LD_ADDR_VAR 0 3
76865: PUSH
76866: LD_STRING 1
76868: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
76869: LD_ADDR_VAR 0 6
76873: PUSH
76874: LD_VAR 0 6
76878: PUSH
76879: LD_VAR 0 3
76883: STR
76884: ST_TO_ADDR
// end ;
76885: GO 76781
76887: POP
76888: POP
// if isGameLoad then
76889: LD_VAR 0 1
76893: IFFALSE 77368
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
76895: LD_ADDR_VAR 0 4
76899: PUSH
76900: LD_EXP 69
76904: PUSH
76905: LD_EXP 68
76909: PUSH
76910: LD_EXP 70
76914: PUSH
76915: LD_EXP 67
76919: PUSH
76920: LD_EXP 71
76924: PUSH
76925: LD_EXP 72
76929: PUSH
76930: LD_EXP 73
76934: PUSH
76935: LD_EXP 74
76939: PUSH
76940: LD_EXP 75
76944: PUSH
76945: LD_EXP 76
76949: PUSH
76950: LD_EXP 77
76954: PUSH
76955: LD_EXP 78
76959: PUSH
76960: LD_EXP 79
76964: PUSH
76965: LD_EXP 80
76969: PUSH
76970: LD_EXP 88
76974: PUSH
76975: LD_EXP 89
76979: PUSH
76980: LD_EXP 90
76984: PUSH
76985: LD_EXP 91
76989: PUSH
76990: LD_EXP 93
76994: PUSH
76995: LD_EXP 94
76999: PUSH
77000: LD_EXP 95
77004: PUSH
77005: LD_EXP 98
77009: PUSH
77010: LD_EXP 100
77014: PUSH
77015: LD_EXP 101
77019: PUSH
77020: LD_EXP 102
77024: PUSH
77025: LD_EXP 104
77029: PUSH
77030: LD_EXP 105
77034: PUSH
77035: LD_EXP 108
77039: PUSH
77040: LD_EXP 109
77044: PUSH
77045: LD_EXP 110
77049: PUSH
77050: LD_EXP 111
77054: PUSH
77055: LD_EXP 112
77059: PUSH
77060: LD_EXP 113
77064: PUSH
77065: LD_EXP 114
77069: PUSH
77070: LD_EXP 115
77074: PUSH
77075: LD_EXP 116
77079: PUSH
77080: LD_EXP 81
77084: PUSH
77085: LD_EXP 82
77089: PUSH
77090: LD_EXP 85
77094: PUSH
77095: LD_EXP 86
77099: PUSH
77100: LD_EXP 87
77104: PUSH
77105: LD_EXP 83
77109: PUSH
77110: LD_EXP 84
77114: PUSH
77115: LD_EXP 92
77119: PUSH
77120: LD_EXP 96
77124: PUSH
77125: LD_EXP 97
77129: PUSH
77130: LD_EXP 99
77134: PUSH
77135: LD_EXP 103
77139: PUSH
77140: LD_EXP 106
77144: PUSH
77145: LD_EXP 107
77149: PUSH
77150: LD_EXP 117
77154: PUSH
77155: LD_EXP 118
77159: PUSH
77160: LD_EXP 119
77164: PUSH
77165: LD_EXP 120
77169: PUSH
77170: EMPTY
77171: LIST
77172: LIST
77173: LIST
77174: LIST
77175: LIST
77176: LIST
77177: LIST
77178: LIST
77179: LIST
77180: LIST
77181: LIST
77182: LIST
77183: LIST
77184: LIST
77185: LIST
77186: LIST
77187: LIST
77188: LIST
77189: LIST
77190: LIST
77191: LIST
77192: LIST
77193: LIST
77194: LIST
77195: LIST
77196: LIST
77197: LIST
77198: LIST
77199: LIST
77200: LIST
77201: LIST
77202: LIST
77203: LIST
77204: LIST
77205: LIST
77206: LIST
77207: LIST
77208: LIST
77209: LIST
77210: LIST
77211: LIST
77212: LIST
77213: LIST
77214: LIST
77215: LIST
77216: LIST
77217: LIST
77218: LIST
77219: LIST
77220: LIST
77221: LIST
77222: LIST
77223: LIST
77224: LIST
77225: ST_TO_ADDR
// tmp :=  ;
77226: LD_ADDR_VAR 0 3
77230: PUSH
77231: LD_STRING 
77233: ST_TO_ADDR
// for i = 1 to normalCounter do
77234: LD_ADDR_VAR 0 8
77238: PUSH
77239: DOUBLE
77240: LD_INT 1
77242: DEC
77243: ST_TO_ADDR
77244: LD_EXP 65
77248: PUSH
77249: FOR_TO
77250: IFFALSE 77286
// begin if flags [ i ] then
77252: LD_VAR 0 4
77256: PUSH
77257: LD_VAR 0 8
77261: ARRAY
77262: IFFALSE 77284
// tmp := tmp & i & ; ;
77264: LD_ADDR_VAR 0 3
77268: PUSH
77269: LD_VAR 0 3
77273: PUSH
77274: LD_VAR 0 8
77278: STR
77279: PUSH
77280: LD_STRING ;
77282: STR
77283: ST_TO_ADDR
// end ;
77284: GO 77249
77286: POP
77287: POP
// for i = 1 to hardcoreCounter do
77288: LD_ADDR_VAR 0 8
77292: PUSH
77293: DOUBLE
77294: LD_INT 1
77296: DEC
77297: ST_TO_ADDR
77298: LD_EXP 66
77302: PUSH
77303: FOR_TO
77304: IFFALSE 77350
// begin if flags [ normalCounter + i ] then
77306: LD_VAR 0 4
77310: PUSH
77311: LD_EXP 65
77315: PUSH
77316: LD_VAR 0 8
77320: PLUS
77321: ARRAY
77322: IFFALSE 77348
// tmp := tmp & ( 100 + i ) & ; ;
77324: LD_ADDR_VAR 0 3
77328: PUSH
77329: LD_VAR 0 3
77333: PUSH
77334: LD_INT 100
77336: PUSH
77337: LD_VAR 0 8
77341: PLUS
77342: STR
77343: PUSH
77344: LD_STRING ;
77346: STR
77347: ST_TO_ADDR
// end ;
77348: GO 77303
77350: POP
77351: POP
// if tmp then
77352: LD_VAR 0 3
77356: IFFALSE 77368
// active := tmp ;
77358: LD_ADDR_VAR 0 7
77362: PUSH
77363: LD_VAR 0 3
77367: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
77368: LD_STRING getStreamItemsFromMission("
77370: PUSH
77371: LD_VAR 0 5
77375: STR
77376: PUSH
77377: LD_STRING ","
77379: STR
77380: PUSH
77381: LD_VAR 0 6
77385: STR
77386: PUSH
77387: LD_STRING ","
77389: STR
77390: PUSH
77391: LD_VAR 0 7
77395: STR
77396: PUSH
77397: LD_STRING ")
77399: STR
77400: PPUSH
77401: CALL_OW 559
// end else
77405: GO 77414
// ToLua ( getStreamItemsFromMission("","","") ) ;
77407: LD_STRING getStreamItemsFromMission("","","")
77409: PPUSH
77410: CALL_OW 559
// end ;
77414: LD_VAR 0 2
77418: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
77419: LD_EXP 64
77423: PUSH
77424: LD_EXP 69
77428: AND
77429: IFFALSE 77553
77431: GO 77433
77433: DISABLE
77434: LD_INT 0
77436: PPUSH
77437: PPUSH
// begin enable ;
77438: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
77439: LD_ADDR_VAR 0 2
77443: PUSH
77444: LD_INT 22
77446: PUSH
77447: LD_OWVAR 2
77451: PUSH
77452: EMPTY
77453: LIST
77454: LIST
77455: PUSH
77456: LD_INT 2
77458: PUSH
77459: LD_INT 34
77461: PUSH
77462: LD_INT 7
77464: PUSH
77465: EMPTY
77466: LIST
77467: LIST
77468: PUSH
77469: LD_INT 34
77471: PUSH
77472: LD_INT 45
77474: PUSH
77475: EMPTY
77476: LIST
77477: LIST
77478: PUSH
77479: LD_INT 34
77481: PUSH
77482: LD_INT 28
77484: PUSH
77485: EMPTY
77486: LIST
77487: LIST
77488: PUSH
77489: LD_INT 34
77491: PUSH
77492: LD_INT 47
77494: PUSH
77495: EMPTY
77496: LIST
77497: LIST
77498: PUSH
77499: EMPTY
77500: LIST
77501: LIST
77502: LIST
77503: LIST
77504: LIST
77505: PUSH
77506: EMPTY
77507: LIST
77508: LIST
77509: PPUSH
77510: CALL_OW 69
77514: ST_TO_ADDR
// if not tmp then
77515: LD_VAR 0 2
77519: NOT
77520: IFFALSE 77524
// exit ;
77522: GO 77553
// for i in tmp do
77524: LD_ADDR_VAR 0 1
77528: PUSH
77529: LD_VAR 0 2
77533: PUSH
77534: FOR_IN
77535: IFFALSE 77551
// begin SetLives ( i , 0 ) ;
77537: LD_VAR 0 1
77541: PPUSH
77542: LD_INT 0
77544: PPUSH
77545: CALL_OW 234
// end ;
77549: GO 77534
77551: POP
77552: POP
// end ;
77553: PPOPN 2
77555: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
77556: LD_EXP 64
77560: PUSH
77561: LD_EXP 70
77565: AND
77566: IFFALSE 77650
77568: GO 77570
77570: DISABLE
77571: LD_INT 0
77573: PPUSH
77574: PPUSH
// begin enable ;
77575: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
77576: LD_ADDR_VAR 0 2
77580: PUSH
77581: LD_INT 22
77583: PUSH
77584: LD_OWVAR 2
77588: PUSH
77589: EMPTY
77590: LIST
77591: LIST
77592: PUSH
77593: LD_INT 32
77595: PUSH
77596: LD_INT 3
77598: PUSH
77599: EMPTY
77600: LIST
77601: LIST
77602: PUSH
77603: EMPTY
77604: LIST
77605: LIST
77606: PPUSH
77607: CALL_OW 69
77611: ST_TO_ADDR
// if not tmp then
77612: LD_VAR 0 2
77616: NOT
77617: IFFALSE 77621
// exit ;
77619: GO 77650
// for i in tmp do
77621: LD_ADDR_VAR 0 1
77625: PUSH
77626: LD_VAR 0 2
77630: PUSH
77631: FOR_IN
77632: IFFALSE 77648
// begin SetLives ( i , 0 ) ;
77634: LD_VAR 0 1
77638: PPUSH
77639: LD_INT 0
77641: PPUSH
77642: CALL_OW 234
// end ;
77646: GO 77631
77648: POP
77649: POP
// end ;
77650: PPOPN 2
77652: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
77653: LD_EXP 64
77657: PUSH
77658: LD_EXP 67
77662: AND
77663: IFFALSE 77756
77665: GO 77667
77667: DISABLE
77668: LD_INT 0
77670: PPUSH
// begin enable ;
77671: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
77672: LD_ADDR_VAR 0 1
77676: PUSH
77677: LD_INT 22
77679: PUSH
77680: LD_OWVAR 2
77684: PUSH
77685: EMPTY
77686: LIST
77687: LIST
77688: PUSH
77689: LD_INT 2
77691: PUSH
77692: LD_INT 25
77694: PUSH
77695: LD_INT 5
77697: PUSH
77698: EMPTY
77699: LIST
77700: LIST
77701: PUSH
77702: LD_INT 25
77704: PUSH
77705: LD_INT 9
77707: PUSH
77708: EMPTY
77709: LIST
77710: LIST
77711: PUSH
77712: LD_INT 25
77714: PUSH
77715: LD_INT 8
77717: PUSH
77718: EMPTY
77719: LIST
77720: LIST
77721: PUSH
77722: EMPTY
77723: LIST
77724: LIST
77725: LIST
77726: LIST
77727: PUSH
77728: EMPTY
77729: LIST
77730: LIST
77731: PPUSH
77732: CALL_OW 69
77736: PUSH
77737: FOR_IN
77738: IFFALSE 77754
// begin SetClass ( i , 1 ) ;
77740: LD_VAR 0 1
77744: PPUSH
77745: LD_INT 1
77747: PPUSH
77748: CALL_OW 336
// end ;
77752: GO 77737
77754: POP
77755: POP
// end ;
77756: PPOPN 1
77758: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
77759: LD_EXP 64
77763: PUSH
77764: LD_EXP 68
77768: AND
77769: PUSH
77770: LD_OWVAR 65
77774: PUSH
77775: LD_INT 7
77777: LESS
77778: AND
77779: IFFALSE 77793
77781: GO 77783
77783: DISABLE
// begin enable ;
77784: ENABLE
// game_speed := 7 ;
77785: LD_ADDR_OWVAR 65
77789: PUSH
77790: LD_INT 7
77792: ST_TO_ADDR
// end ;
77793: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
77794: LD_EXP 64
77798: PUSH
77799: LD_EXP 71
77803: AND
77804: IFFALSE 78006
77806: GO 77808
77808: DISABLE
77809: LD_INT 0
77811: PPUSH
77812: PPUSH
77813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
77814: LD_ADDR_VAR 0 3
77818: PUSH
77819: LD_INT 81
77821: PUSH
77822: LD_OWVAR 2
77826: PUSH
77827: EMPTY
77828: LIST
77829: LIST
77830: PUSH
77831: LD_INT 21
77833: PUSH
77834: LD_INT 1
77836: PUSH
77837: EMPTY
77838: LIST
77839: LIST
77840: PUSH
77841: EMPTY
77842: LIST
77843: LIST
77844: PPUSH
77845: CALL_OW 69
77849: ST_TO_ADDR
// if not tmp then
77850: LD_VAR 0 3
77854: NOT
77855: IFFALSE 77859
// exit ;
77857: GO 78006
// if tmp > 5 then
77859: LD_VAR 0 3
77863: PUSH
77864: LD_INT 5
77866: GREATER
77867: IFFALSE 77879
// k := 5 else
77869: LD_ADDR_VAR 0 2
77873: PUSH
77874: LD_INT 5
77876: ST_TO_ADDR
77877: GO 77889
// k := tmp ;
77879: LD_ADDR_VAR 0 2
77883: PUSH
77884: LD_VAR 0 3
77888: ST_TO_ADDR
// for i := 1 to k do
77889: LD_ADDR_VAR 0 1
77893: PUSH
77894: DOUBLE
77895: LD_INT 1
77897: DEC
77898: ST_TO_ADDR
77899: LD_VAR 0 2
77903: PUSH
77904: FOR_TO
77905: IFFALSE 78004
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
77907: LD_VAR 0 3
77911: PUSH
77912: LD_VAR 0 1
77916: ARRAY
77917: PPUSH
77918: LD_VAR 0 1
77922: PUSH
77923: LD_INT 4
77925: MOD
77926: PUSH
77927: LD_INT 1
77929: PLUS
77930: PPUSH
77931: CALL_OW 259
77935: PUSH
77936: LD_INT 10
77938: LESS
77939: IFFALSE 78002
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
77941: LD_VAR 0 3
77945: PUSH
77946: LD_VAR 0 1
77950: ARRAY
77951: PPUSH
77952: LD_VAR 0 1
77956: PUSH
77957: LD_INT 4
77959: MOD
77960: PUSH
77961: LD_INT 1
77963: PLUS
77964: PPUSH
77965: LD_VAR 0 3
77969: PUSH
77970: LD_VAR 0 1
77974: ARRAY
77975: PPUSH
77976: LD_VAR 0 1
77980: PUSH
77981: LD_INT 4
77983: MOD
77984: PUSH
77985: LD_INT 1
77987: PLUS
77988: PPUSH
77989: CALL_OW 259
77993: PUSH
77994: LD_INT 1
77996: PLUS
77997: PPUSH
77998: CALL_OW 237
78002: GO 77904
78004: POP
78005: POP
// end ;
78006: PPOPN 3
78008: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
78009: LD_EXP 64
78013: PUSH
78014: LD_EXP 72
78018: AND
78019: IFFALSE 78039
78021: GO 78023
78023: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
78024: LD_INT 4
78026: PPUSH
78027: LD_OWVAR 2
78031: PPUSH
78032: LD_INT 0
78034: PPUSH
78035: CALL_OW 324
78039: END
// every 0 0$1 trigger StreamModeActive and sShovel do
78040: LD_EXP 64
78044: PUSH
78045: LD_EXP 101
78049: AND
78050: IFFALSE 78070
78052: GO 78054
78054: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
78055: LD_INT 19
78057: PPUSH
78058: LD_OWVAR 2
78062: PPUSH
78063: LD_INT 0
78065: PPUSH
78066: CALL_OW 324
78070: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
78071: LD_EXP 64
78075: PUSH
78076: LD_EXP 73
78080: AND
78081: IFFALSE 78183
78083: GO 78085
78085: DISABLE
78086: LD_INT 0
78088: PPUSH
78089: PPUSH
// begin enable ;
78090: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
78091: LD_ADDR_VAR 0 2
78095: PUSH
78096: LD_INT 22
78098: PUSH
78099: LD_OWVAR 2
78103: PUSH
78104: EMPTY
78105: LIST
78106: LIST
78107: PUSH
78108: LD_INT 2
78110: PUSH
78111: LD_INT 34
78113: PUSH
78114: LD_INT 11
78116: PUSH
78117: EMPTY
78118: LIST
78119: LIST
78120: PUSH
78121: LD_INT 34
78123: PUSH
78124: LD_INT 30
78126: PUSH
78127: EMPTY
78128: LIST
78129: LIST
78130: PUSH
78131: EMPTY
78132: LIST
78133: LIST
78134: LIST
78135: PUSH
78136: EMPTY
78137: LIST
78138: LIST
78139: PPUSH
78140: CALL_OW 69
78144: ST_TO_ADDR
// if not tmp then
78145: LD_VAR 0 2
78149: NOT
78150: IFFALSE 78154
// exit ;
78152: GO 78183
// for i in tmp do
78154: LD_ADDR_VAR 0 1
78158: PUSH
78159: LD_VAR 0 2
78163: PUSH
78164: FOR_IN
78165: IFFALSE 78181
// begin SetLives ( i , 0 ) ;
78167: LD_VAR 0 1
78171: PPUSH
78172: LD_INT 0
78174: PPUSH
78175: CALL_OW 234
// end ;
78179: GO 78164
78181: POP
78182: POP
// end ;
78183: PPOPN 2
78185: END
// every 0 0$1 trigger StreamModeActive and sBunker do
78186: LD_EXP 64
78190: PUSH
78191: LD_EXP 74
78195: AND
78196: IFFALSE 78216
78198: GO 78200
78200: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
78201: LD_INT 32
78203: PPUSH
78204: LD_OWVAR 2
78208: PPUSH
78209: LD_INT 0
78211: PPUSH
78212: CALL_OW 324
78216: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
78217: LD_EXP 64
78221: PUSH
78222: LD_EXP 75
78226: AND
78227: IFFALSE 78408
78229: GO 78231
78231: DISABLE
78232: LD_INT 0
78234: PPUSH
78235: PPUSH
78236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
78237: LD_ADDR_VAR 0 2
78241: PUSH
78242: LD_INT 22
78244: PUSH
78245: LD_OWVAR 2
78249: PUSH
78250: EMPTY
78251: LIST
78252: LIST
78253: PUSH
78254: LD_INT 33
78256: PUSH
78257: LD_INT 3
78259: PUSH
78260: EMPTY
78261: LIST
78262: LIST
78263: PUSH
78264: EMPTY
78265: LIST
78266: LIST
78267: PPUSH
78268: CALL_OW 69
78272: ST_TO_ADDR
// if not tmp then
78273: LD_VAR 0 2
78277: NOT
78278: IFFALSE 78282
// exit ;
78280: GO 78408
// side := 0 ;
78282: LD_ADDR_VAR 0 3
78286: PUSH
78287: LD_INT 0
78289: ST_TO_ADDR
// for i := 1 to 8 do
78290: LD_ADDR_VAR 0 1
78294: PUSH
78295: DOUBLE
78296: LD_INT 1
78298: DEC
78299: ST_TO_ADDR
78300: LD_INT 8
78302: PUSH
78303: FOR_TO
78304: IFFALSE 78352
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
78306: LD_OWVAR 2
78310: PUSH
78311: LD_VAR 0 1
78315: NONEQUAL
78316: PUSH
78317: LD_OWVAR 2
78321: PPUSH
78322: LD_VAR 0 1
78326: PPUSH
78327: CALL_OW 81
78331: PUSH
78332: LD_INT 2
78334: EQUAL
78335: AND
78336: IFFALSE 78350
// begin side := i ;
78338: LD_ADDR_VAR 0 3
78342: PUSH
78343: LD_VAR 0 1
78347: ST_TO_ADDR
// break ;
78348: GO 78352
// end ;
78350: GO 78303
78352: POP
78353: POP
// if not side then
78354: LD_VAR 0 3
78358: NOT
78359: IFFALSE 78363
// exit ;
78361: GO 78408
// for i := 1 to tmp do
78363: LD_ADDR_VAR 0 1
78367: PUSH
78368: DOUBLE
78369: LD_INT 1
78371: DEC
78372: ST_TO_ADDR
78373: LD_VAR 0 2
78377: PUSH
78378: FOR_TO
78379: IFFALSE 78406
// if Prob ( 60 ) then
78381: LD_INT 60
78383: PPUSH
78384: CALL_OW 13
78388: IFFALSE 78404
// SetSide ( i , side ) ;
78390: LD_VAR 0 1
78394: PPUSH
78395: LD_VAR 0 3
78399: PPUSH
78400: CALL_OW 235
78404: GO 78378
78406: POP
78407: POP
// end ;
78408: PPOPN 3
78410: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
78411: LD_EXP 64
78415: PUSH
78416: LD_EXP 77
78420: AND
78421: IFFALSE 78540
78423: GO 78425
78425: DISABLE
78426: LD_INT 0
78428: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
78429: LD_ADDR_VAR 0 1
78433: PUSH
78434: LD_INT 22
78436: PUSH
78437: LD_OWVAR 2
78441: PUSH
78442: EMPTY
78443: LIST
78444: LIST
78445: PUSH
78446: LD_INT 21
78448: PUSH
78449: LD_INT 1
78451: PUSH
78452: EMPTY
78453: LIST
78454: LIST
78455: PUSH
78456: LD_INT 3
78458: PUSH
78459: LD_INT 23
78461: PUSH
78462: LD_INT 0
78464: PUSH
78465: EMPTY
78466: LIST
78467: LIST
78468: PUSH
78469: EMPTY
78470: LIST
78471: LIST
78472: PUSH
78473: EMPTY
78474: LIST
78475: LIST
78476: LIST
78477: PPUSH
78478: CALL_OW 69
78482: PUSH
78483: FOR_IN
78484: IFFALSE 78538
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
78486: LD_VAR 0 1
78490: PPUSH
78491: CALL_OW 257
78495: PUSH
78496: LD_INT 1
78498: PUSH
78499: LD_INT 2
78501: PUSH
78502: LD_INT 3
78504: PUSH
78505: LD_INT 4
78507: PUSH
78508: EMPTY
78509: LIST
78510: LIST
78511: LIST
78512: LIST
78513: IN
78514: IFFALSE 78536
// SetClass ( un , rand ( 1 , 4 ) ) ;
78516: LD_VAR 0 1
78520: PPUSH
78521: LD_INT 1
78523: PPUSH
78524: LD_INT 4
78526: PPUSH
78527: CALL_OW 12
78531: PPUSH
78532: CALL_OW 336
78536: GO 78483
78538: POP
78539: POP
// end ;
78540: PPOPN 1
78542: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
78543: LD_EXP 64
78547: PUSH
78548: LD_EXP 76
78552: AND
78553: IFFALSE 78632
78555: GO 78557
78557: DISABLE
78558: LD_INT 0
78560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
78561: LD_ADDR_VAR 0 1
78565: PUSH
78566: LD_INT 22
78568: PUSH
78569: LD_OWVAR 2
78573: PUSH
78574: EMPTY
78575: LIST
78576: LIST
78577: PUSH
78578: LD_INT 21
78580: PUSH
78581: LD_INT 3
78583: PUSH
78584: EMPTY
78585: LIST
78586: LIST
78587: PUSH
78588: EMPTY
78589: LIST
78590: LIST
78591: PPUSH
78592: CALL_OW 69
78596: ST_TO_ADDR
// if not tmp then
78597: LD_VAR 0 1
78601: NOT
78602: IFFALSE 78606
// exit ;
78604: GO 78632
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
78606: LD_VAR 0 1
78610: PUSH
78611: LD_INT 1
78613: PPUSH
78614: LD_VAR 0 1
78618: PPUSH
78619: CALL_OW 12
78623: ARRAY
78624: PPUSH
78625: LD_INT 100
78627: PPUSH
78628: CALL_OW 234
// end ;
78632: PPOPN 1
78634: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
78635: LD_EXP 64
78639: PUSH
78640: LD_EXP 78
78644: AND
78645: IFFALSE 78743
78647: GO 78649
78649: DISABLE
78650: LD_INT 0
78652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
78653: LD_ADDR_VAR 0 1
78657: PUSH
78658: LD_INT 22
78660: PUSH
78661: LD_OWVAR 2
78665: PUSH
78666: EMPTY
78667: LIST
78668: LIST
78669: PUSH
78670: LD_INT 21
78672: PUSH
78673: LD_INT 1
78675: PUSH
78676: EMPTY
78677: LIST
78678: LIST
78679: PUSH
78680: EMPTY
78681: LIST
78682: LIST
78683: PPUSH
78684: CALL_OW 69
78688: ST_TO_ADDR
// if not tmp then
78689: LD_VAR 0 1
78693: NOT
78694: IFFALSE 78698
// exit ;
78696: GO 78743
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
78698: LD_VAR 0 1
78702: PUSH
78703: LD_INT 1
78705: PPUSH
78706: LD_VAR 0 1
78710: PPUSH
78711: CALL_OW 12
78715: ARRAY
78716: PPUSH
78717: LD_INT 1
78719: PPUSH
78720: LD_INT 4
78722: PPUSH
78723: CALL_OW 12
78727: PPUSH
78728: LD_INT 3000
78730: PPUSH
78731: LD_INT 9000
78733: PPUSH
78734: CALL_OW 12
78738: PPUSH
78739: CALL_OW 492
// end ;
78743: PPOPN 1
78745: END
// every 0 0$1 trigger StreamModeActive and sDepot do
78746: LD_EXP 64
78750: PUSH
78751: LD_EXP 79
78755: AND
78756: IFFALSE 78776
78758: GO 78760
78760: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
78761: LD_INT 1
78763: PPUSH
78764: LD_OWVAR 2
78768: PPUSH
78769: LD_INT 0
78771: PPUSH
78772: CALL_OW 324
78776: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
78777: LD_EXP 64
78781: PUSH
78782: LD_EXP 80
78786: AND
78787: IFFALSE 78870
78789: GO 78791
78791: DISABLE
78792: LD_INT 0
78794: PPUSH
78795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
78796: LD_ADDR_VAR 0 2
78800: PUSH
78801: LD_INT 22
78803: PUSH
78804: LD_OWVAR 2
78808: PUSH
78809: EMPTY
78810: LIST
78811: LIST
78812: PUSH
78813: LD_INT 21
78815: PUSH
78816: LD_INT 3
78818: PUSH
78819: EMPTY
78820: LIST
78821: LIST
78822: PUSH
78823: EMPTY
78824: LIST
78825: LIST
78826: PPUSH
78827: CALL_OW 69
78831: ST_TO_ADDR
// if not tmp then
78832: LD_VAR 0 2
78836: NOT
78837: IFFALSE 78841
// exit ;
78839: GO 78870
// for i in tmp do
78841: LD_ADDR_VAR 0 1
78845: PUSH
78846: LD_VAR 0 2
78850: PUSH
78851: FOR_IN
78852: IFFALSE 78868
// SetBLevel ( i , 10 ) ;
78854: LD_VAR 0 1
78858: PPUSH
78859: LD_INT 10
78861: PPUSH
78862: CALL_OW 241
78866: GO 78851
78868: POP
78869: POP
// end ;
78870: PPOPN 2
78872: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
78873: LD_EXP 64
78877: PUSH
78878: LD_EXP 81
78882: AND
78883: IFFALSE 78994
78885: GO 78887
78887: DISABLE
78888: LD_INT 0
78890: PPUSH
78891: PPUSH
78892: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78893: LD_ADDR_VAR 0 3
78897: PUSH
78898: LD_INT 22
78900: PUSH
78901: LD_OWVAR 2
78905: PUSH
78906: EMPTY
78907: LIST
78908: LIST
78909: PUSH
78910: LD_INT 25
78912: PUSH
78913: LD_INT 1
78915: PUSH
78916: EMPTY
78917: LIST
78918: LIST
78919: PUSH
78920: EMPTY
78921: LIST
78922: LIST
78923: PPUSH
78924: CALL_OW 69
78928: ST_TO_ADDR
// if not tmp then
78929: LD_VAR 0 3
78933: NOT
78934: IFFALSE 78938
// exit ;
78936: GO 78994
// un := tmp [ rand ( 1 , tmp ) ] ;
78938: LD_ADDR_VAR 0 2
78942: PUSH
78943: LD_VAR 0 3
78947: PUSH
78948: LD_INT 1
78950: PPUSH
78951: LD_VAR 0 3
78955: PPUSH
78956: CALL_OW 12
78960: ARRAY
78961: ST_TO_ADDR
// if Crawls ( un ) then
78962: LD_VAR 0 2
78966: PPUSH
78967: CALL_OW 318
78971: IFFALSE 78982
// ComWalk ( un ) ;
78973: LD_VAR 0 2
78977: PPUSH
78978: CALL_OW 138
// SetClass ( un , class_sniper ) ;
78982: LD_VAR 0 2
78986: PPUSH
78987: LD_INT 5
78989: PPUSH
78990: CALL_OW 336
// end ;
78994: PPOPN 3
78996: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
78997: LD_EXP 64
79001: PUSH
79002: LD_EXP 82
79006: AND
79007: PUSH
79008: LD_OWVAR 67
79012: PUSH
79013: LD_INT 4
79015: LESS
79016: AND
79017: IFFALSE 79036
79019: GO 79021
79021: DISABLE
// begin Difficulty := Difficulty + 1 ;
79022: LD_ADDR_OWVAR 67
79026: PUSH
79027: LD_OWVAR 67
79031: PUSH
79032: LD_INT 1
79034: PLUS
79035: ST_TO_ADDR
// end ;
79036: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
79037: LD_EXP 64
79041: PUSH
79042: LD_EXP 83
79046: AND
79047: IFFALSE 79150
79049: GO 79051
79051: DISABLE
79052: LD_INT 0
79054: PPUSH
// begin for i := 1 to 5 do
79055: LD_ADDR_VAR 0 1
79059: PUSH
79060: DOUBLE
79061: LD_INT 1
79063: DEC
79064: ST_TO_ADDR
79065: LD_INT 5
79067: PUSH
79068: FOR_TO
79069: IFFALSE 79148
// begin uc_nation := nation_nature ;
79071: LD_ADDR_OWVAR 21
79075: PUSH
79076: LD_INT 0
79078: ST_TO_ADDR
// uc_side := 0 ;
79079: LD_ADDR_OWVAR 20
79083: PUSH
79084: LD_INT 0
79086: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
79087: LD_ADDR_OWVAR 29
79091: PUSH
79092: LD_INT 12
79094: PUSH
79095: LD_INT 12
79097: PUSH
79098: EMPTY
79099: LIST
79100: LIST
79101: ST_TO_ADDR
// hc_agressivity := 20 ;
79102: LD_ADDR_OWVAR 35
79106: PUSH
79107: LD_INT 20
79109: ST_TO_ADDR
// hc_class := class_tiger ;
79110: LD_ADDR_OWVAR 28
79114: PUSH
79115: LD_INT 14
79117: ST_TO_ADDR
// hc_gallery :=  ;
79118: LD_ADDR_OWVAR 33
79122: PUSH
79123: LD_STRING 
79125: ST_TO_ADDR
// hc_name :=  ;
79126: LD_ADDR_OWVAR 26
79130: PUSH
79131: LD_STRING 
79133: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
79134: CALL_OW 44
79138: PPUSH
79139: LD_INT 0
79141: PPUSH
79142: CALL_OW 51
// end ;
79146: GO 79068
79148: POP
79149: POP
// end ;
79150: PPOPN 1
79152: END
// every 0 0$1 trigger StreamModeActive and sBomb do
79153: LD_EXP 64
79157: PUSH
79158: LD_EXP 84
79162: AND
79163: IFFALSE 79172
79165: GO 79167
79167: DISABLE
// StreamSibBomb ;
79168: CALL 79173 0 0
79172: END
// export function StreamSibBomb ; var i , x , y ; begin
79173: LD_INT 0
79175: PPUSH
79176: PPUSH
79177: PPUSH
79178: PPUSH
// result := false ;
79179: LD_ADDR_VAR 0 1
79183: PUSH
79184: LD_INT 0
79186: ST_TO_ADDR
// for i := 1 to 16 do
79187: LD_ADDR_VAR 0 2
79191: PUSH
79192: DOUBLE
79193: LD_INT 1
79195: DEC
79196: ST_TO_ADDR
79197: LD_INT 16
79199: PUSH
79200: FOR_TO
79201: IFFALSE 79400
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
79203: LD_ADDR_VAR 0 3
79207: PUSH
79208: LD_INT 10
79210: PUSH
79211: LD_INT 20
79213: PUSH
79214: LD_INT 30
79216: PUSH
79217: LD_INT 40
79219: PUSH
79220: LD_INT 50
79222: PUSH
79223: LD_INT 60
79225: PUSH
79226: LD_INT 70
79228: PUSH
79229: LD_INT 80
79231: PUSH
79232: LD_INT 90
79234: PUSH
79235: LD_INT 100
79237: PUSH
79238: LD_INT 110
79240: PUSH
79241: LD_INT 120
79243: PUSH
79244: LD_INT 130
79246: PUSH
79247: LD_INT 140
79249: PUSH
79250: LD_INT 150
79252: PUSH
79253: EMPTY
79254: LIST
79255: LIST
79256: LIST
79257: LIST
79258: LIST
79259: LIST
79260: LIST
79261: LIST
79262: LIST
79263: LIST
79264: LIST
79265: LIST
79266: LIST
79267: LIST
79268: LIST
79269: PUSH
79270: LD_INT 1
79272: PPUSH
79273: LD_INT 15
79275: PPUSH
79276: CALL_OW 12
79280: ARRAY
79281: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
79282: LD_ADDR_VAR 0 4
79286: PUSH
79287: LD_INT 10
79289: PUSH
79290: LD_INT 20
79292: PUSH
79293: LD_INT 30
79295: PUSH
79296: LD_INT 40
79298: PUSH
79299: LD_INT 50
79301: PUSH
79302: LD_INT 60
79304: PUSH
79305: LD_INT 70
79307: PUSH
79308: LD_INT 80
79310: PUSH
79311: LD_INT 90
79313: PUSH
79314: LD_INT 100
79316: PUSH
79317: LD_INT 110
79319: PUSH
79320: LD_INT 120
79322: PUSH
79323: LD_INT 130
79325: PUSH
79326: LD_INT 140
79328: PUSH
79329: LD_INT 150
79331: PUSH
79332: EMPTY
79333: LIST
79334: LIST
79335: LIST
79336: LIST
79337: LIST
79338: LIST
79339: LIST
79340: LIST
79341: LIST
79342: LIST
79343: LIST
79344: LIST
79345: LIST
79346: LIST
79347: LIST
79348: PUSH
79349: LD_INT 1
79351: PPUSH
79352: LD_INT 15
79354: PPUSH
79355: CALL_OW 12
79359: ARRAY
79360: ST_TO_ADDR
// if ValidHex ( x , y ) then
79361: LD_VAR 0 3
79365: PPUSH
79366: LD_VAR 0 4
79370: PPUSH
79371: CALL_OW 488
79375: IFFALSE 79398
// begin result := [ x , y ] ;
79377: LD_ADDR_VAR 0 1
79381: PUSH
79382: LD_VAR 0 3
79386: PUSH
79387: LD_VAR 0 4
79391: PUSH
79392: EMPTY
79393: LIST
79394: LIST
79395: ST_TO_ADDR
// break ;
79396: GO 79400
// end ; end ;
79398: GO 79200
79400: POP
79401: POP
// if result then
79402: LD_VAR 0 1
79406: IFFALSE 79466
// begin ToLua ( playSibBomb() ) ;
79408: LD_STRING playSibBomb()
79410: PPUSH
79411: CALL_OW 559
// wait ( 0 0$14 ) ;
79415: LD_INT 490
79417: PPUSH
79418: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
79422: LD_VAR 0 1
79426: PUSH
79427: LD_INT 1
79429: ARRAY
79430: PPUSH
79431: LD_VAR 0 1
79435: PUSH
79436: LD_INT 2
79438: ARRAY
79439: PPUSH
79440: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
79444: LD_VAR 0 1
79448: PUSH
79449: LD_INT 1
79451: ARRAY
79452: PPUSH
79453: LD_VAR 0 1
79457: PUSH
79458: LD_INT 2
79460: ARRAY
79461: PPUSH
79462: CALL_OW 429
// end ; end ;
79466: LD_VAR 0 1
79470: RET
// every 0 0$1 trigger StreamModeActive and sReset do
79471: LD_EXP 64
79475: PUSH
79476: LD_EXP 86
79480: AND
79481: IFFALSE 79493
79483: GO 79485
79485: DISABLE
// YouLost (  ) ;
79486: LD_STRING 
79488: PPUSH
79489: CALL_OW 104
79493: END
// every 0 0$1 trigger StreamModeActive and sFog do
79494: LD_EXP 64
79498: PUSH
79499: LD_EXP 85
79503: AND
79504: IFFALSE 79518
79506: GO 79508
79508: DISABLE
// FogOff ( your_side ) ;
79509: LD_OWVAR 2
79513: PPUSH
79514: CALL_OW 344
79518: END
// every 0 0$1 trigger StreamModeActive and sSun do
79519: LD_EXP 64
79523: PUSH
79524: LD_EXP 87
79528: AND
79529: IFFALSE 79557
79531: GO 79533
79533: DISABLE
// begin solar_recharge_percent := 0 ;
79534: LD_ADDR_OWVAR 79
79538: PUSH
79539: LD_INT 0
79541: ST_TO_ADDR
// wait ( 5 5$00 ) ;
79542: LD_INT 10500
79544: PPUSH
79545: CALL_OW 67
// solar_recharge_percent := 100 ;
79549: LD_ADDR_OWVAR 79
79553: PUSH
79554: LD_INT 100
79556: ST_TO_ADDR
// end ;
79557: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
79558: LD_EXP 64
79562: PUSH
79563: LD_EXP 88
79567: AND
79568: IFFALSE 79807
79570: GO 79572
79572: DISABLE
79573: LD_INT 0
79575: PPUSH
79576: PPUSH
79577: PPUSH
// begin tmp := [ ] ;
79578: LD_ADDR_VAR 0 3
79582: PUSH
79583: EMPTY
79584: ST_TO_ADDR
// for i := 1 to 6 do
79585: LD_ADDR_VAR 0 1
79589: PUSH
79590: DOUBLE
79591: LD_INT 1
79593: DEC
79594: ST_TO_ADDR
79595: LD_INT 6
79597: PUSH
79598: FOR_TO
79599: IFFALSE 79704
// begin uc_nation := nation_nature ;
79601: LD_ADDR_OWVAR 21
79605: PUSH
79606: LD_INT 0
79608: ST_TO_ADDR
// uc_side := 0 ;
79609: LD_ADDR_OWVAR 20
79613: PUSH
79614: LD_INT 0
79616: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
79617: LD_ADDR_OWVAR 29
79621: PUSH
79622: LD_INT 12
79624: PUSH
79625: LD_INT 12
79627: PUSH
79628: EMPTY
79629: LIST
79630: LIST
79631: ST_TO_ADDR
// hc_agressivity := 20 ;
79632: LD_ADDR_OWVAR 35
79636: PUSH
79637: LD_INT 20
79639: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
79640: LD_ADDR_OWVAR 28
79644: PUSH
79645: LD_INT 17
79647: ST_TO_ADDR
// hc_gallery :=  ;
79648: LD_ADDR_OWVAR 33
79652: PUSH
79653: LD_STRING 
79655: ST_TO_ADDR
// hc_name :=  ;
79656: LD_ADDR_OWVAR 26
79660: PUSH
79661: LD_STRING 
79663: ST_TO_ADDR
// un := CreateHuman ;
79664: LD_ADDR_VAR 0 2
79668: PUSH
79669: CALL_OW 44
79673: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
79674: LD_VAR 0 2
79678: PPUSH
79679: LD_INT 1
79681: PPUSH
79682: CALL_OW 51
// tmp := tmp ^ un ;
79686: LD_ADDR_VAR 0 3
79690: PUSH
79691: LD_VAR 0 3
79695: PUSH
79696: LD_VAR 0 2
79700: ADD
79701: ST_TO_ADDR
// end ;
79702: GO 79598
79704: POP
79705: POP
// repeat wait ( 0 0$1 ) ;
79706: LD_INT 35
79708: PPUSH
79709: CALL_OW 67
// for un in tmp do
79713: LD_ADDR_VAR 0 2
79717: PUSH
79718: LD_VAR 0 3
79722: PUSH
79723: FOR_IN
79724: IFFALSE 79798
// begin if IsDead ( un ) then
79726: LD_VAR 0 2
79730: PPUSH
79731: CALL_OW 301
79735: IFFALSE 79755
// begin tmp := tmp diff un ;
79737: LD_ADDR_VAR 0 3
79741: PUSH
79742: LD_VAR 0 3
79746: PUSH
79747: LD_VAR 0 2
79751: DIFF
79752: ST_TO_ADDR
// continue ;
79753: GO 79723
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
79755: LD_VAR 0 2
79759: PPUSH
79760: LD_INT 3
79762: PUSH
79763: LD_INT 22
79765: PUSH
79766: LD_INT 0
79768: PUSH
79769: EMPTY
79770: LIST
79771: LIST
79772: PUSH
79773: EMPTY
79774: LIST
79775: LIST
79776: PPUSH
79777: CALL_OW 69
79781: PPUSH
79782: LD_VAR 0 2
79786: PPUSH
79787: CALL_OW 74
79791: PPUSH
79792: CALL_OW 115
// end ;
79796: GO 79723
79798: POP
79799: POP
// until not tmp ;
79800: LD_VAR 0 3
79804: NOT
79805: IFFALSE 79706
// end ;
79807: PPOPN 3
79809: END
// every 0 0$1 trigger StreamModeActive and sTroll do
79810: LD_EXP 64
79814: PUSH
79815: LD_EXP 89
79819: AND
79820: IFFALSE 79874
79822: GO 79824
79824: DISABLE
// begin ToLua ( displayTroll(); ) ;
79825: LD_STRING displayTroll();
79827: PPUSH
79828: CALL_OW 559
// wait ( 3 3$00 ) ;
79832: LD_INT 6300
79834: PPUSH
79835: CALL_OW 67
// ToLua ( hideTroll(); ) ;
79839: LD_STRING hideTroll();
79841: PPUSH
79842: CALL_OW 559
// wait ( 1 1$00 ) ;
79846: LD_INT 2100
79848: PPUSH
79849: CALL_OW 67
// ToLua ( displayTroll(); ) ;
79853: LD_STRING displayTroll();
79855: PPUSH
79856: CALL_OW 559
// wait ( 1 1$00 ) ;
79860: LD_INT 2100
79862: PPUSH
79863: CALL_OW 67
// ToLua ( hideTroll(); ) ;
79867: LD_STRING hideTroll();
79869: PPUSH
79870: CALL_OW 559
// end ;
79874: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
79875: LD_EXP 64
79879: PUSH
79880: LD_EXP 90
79884: AND
79885: IFFALSE 79948
79887: GO 79889
79889: DISABLE
79890: LD_INT 0
79892: PPUSH
// begin p := 0 ;
79893: LD_ADDR_VAR 0 1
79897: PUSH
79898: LD_INT 0
79900: ST_TO_ADDR
// repeat game_speed := 1 ;
79901: LD_ADDR_OWVAR 65
79905: PUSH
79906: LD_INT 1
79908: ST_TO_ADDR
// wait ( 0 0$1 ) ;
79909: LD_INT 35
79911: PPUSH
79912: CALL_OW 67
// p := p + 1 ;
79916: LD_ADDR_VAR 0 1
79920: PUSH
79921: LD_VAR 0 1
79925: PUSH
79926: LD_INT 1
79928: PLUS
79929: ST_TO_ADDR
// until p >= 60 ;
79930: LD_VAR 0 1
79934: PUSH
79935: LD_INT 60
79937: GREATEREQUAL
79938: IFFALSE 79901
// game_speed := 4 ;
79940: LD_ADDR_OWVAR 65
79944: PUSH
79945: LD_INT 4
79947: ST_TO_ADDR
// end ;
79948: PPOPN 1
79950: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
79951: LD_EXP 64
79955: PUSH
79956: LD_EXP 91
79960: AND
79961: IFFALSE 80107
79963: GO 79965
79965: DISABLE
79966: LD_INT 0
79968: PPUSH
79969: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79970: LD_ADDR_VAR 0 1
79974: PUSH
79975: LD_INT 22
79977: PUSH
79978: LD_OWVAR 2
79982: PUSH
79983: EMPTY
79984: LIST
79985: LIST
79986: PUSH
79987: LD_INT 2
79989: PUSH
79990: LD_INT 30
79992: PUSH
79993: LD_INT 0
79995: PUSH
79996: EMPTY
79997: LIST
79998: LIST
79999: PUSH
80000: LD_INT 30
80002: PUSH
80003: LD_INT 1
80005: PUSH
80006: EMPTY
80007: LIST
80008: LIST
80009: PUSH
80010: EMPTY
80011: LIST
80012: LIST
80013: LIST
80014: PUSH
80015: EMPTY
80016: LIST
80017: LIST
80018: PPUSH
80019: CALL_OW 69
80023: ST_TO_ADDR
// if not depot then
80024: LD_VAR 0 1
80028: NOT
80029: IFFALSE 80033
// exit ;
80031: GO 80107
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
80033: LD_ADDR_VAR 0 2
80037: PUSH
80038: LD_VAR 0 1
80042: PUSH
80043: LD_INT 1
80045: PPUSH
80046: LD_VAR 0 1
80050: PPUSH
80051: CALL_OW 12
80055: ARRAY
80056: PPUSH
80057: CALL_OW 274
80061: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
80062: LD_VAR 0 2
80066: PPUSH
80067: LD_INT 1
80069: PPUSH
80070: LD_INT 0
80072: PPUSH
80073: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
80077: LD_VAR 0 2
80081: PPUSH
80082: LD_INT 2
80084: PPUSH
80085: LD_INT 0
80087: PPUSH
80088: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
80092: LD_VAR 0 2
80096: PPUSH
80097: LD_INT 3
80099: PPUSH
80100: LD_INT 0
80102: PPUSH
80103: CALL_OW 277
// end ;
80107: PPOPN 2
80109: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
80110: LD_EXP 64
80114: PUSH
80115: LD_EXP 92
80119: AND
80120: IFFALSE 80217
80122: GO 80124
80124: DISABLE
80125: LD_INT 0
80127: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
80128: LD_ADDR_VAR 0 1
80132: PUSH
80133: LD_INT 22
80135: PUSH
80136: LD_OWVAR 2
80140: PUSH
80141: EMPTY
80142: LIST
80143: LIST
80144: PUSH
80145: LD_INT 21
80147: PUSH
80148: LD_INT 1
80150: PUSH
80151: EMPTY
80152: LIST
80153: LIST
80154: PUSH
80155: LD_INT 3
80157: PUSH
80158: LD_INT 23
80160: PUSH
80161: LD_INT 0
80163: PUSH
80164: EMPTY
80165: LIST
80166: LIST
80167: PUSH
80168: EMPTY
80169: LIST
80170: LIST
80171: PUSH
80172: EMPTY
80173: LIST
80174: LIST
80175: LIST
80176: PPUSH
80177: CALL_OW 69
80181: ST_TO_ADDR
// if not tmp then
80182: LD_VAR 0 1
80186: NOT
80187: IFFALSE 80191
// exit ;
80189: GO 80217
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
80191: LD_VAR 0 1
80195: PUSH
80196: LD_INT 1
80198: PPUSH
80199: LD_VAR 0 1
80203: PPUSH
80204: CALL_OW 12
80208: ARRAY
80209: PPUSH
80210: LD_INT 200
80212: PPUSH
80213: CALL_OW 234
// end ;
80217: PPOPN 1
80219: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
80220: LD_EXP 64
80224: PUSH
80225: LD_EXP 93
80229: AND
80230: IFFALSE 80309
80232: GO 80234
80234: DISABLE
80235: LD_INT 0
80237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
80238: LD_ADDR_VAR 0 1
80242: PUSH
80243: LD_INT 22
80245: PUSH
80246: LD_OWVAR 2
80250: PUSH
80251: EMPTY
80252: LIST
80253: LIST
80254: PUSH
80255: LD_INT 21
80257: PUSH
80258: LD_INT 2
80260: PUSH
80261: EMPTY
80262: LIST
80263: LIST
80264: PUSH
80265: EMPTY
80266: LIST
80267: LIST
80268: PPUSH
80269: CALL_OW 69
80273: ST_TO_ADDR
// if not tmp then
80274: LD_VAR 0 1
80278: NOT
80279: IFFALSE 80283
// exit ;
80281: GO 80309
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
80283: LD_VAR 0 1
80287: PUSH
80288: LD_INT 1
80290: PPUSH
80291: LD_VAR 0 1
80295: PPUSH
80296: CALL_OW 12
80300: ARRAY
80301: PPUSH
80302: LD_INT 60
80304: PPUSH
80305: CALL_OW 234
// end ;
80309: PPOPN 1
80311: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
80312: LD_EXP 64
80316: PUSH
80317: LD_EXP 94
80321: AND
80322: IFFALSE 80421
80324: GO 80326
80326: DISABLE
80327: LD_INT 0
80329: PPUSH
80330: PPUSH
// begin enable ;
80331: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
80332: LD_ADDR_VAR 0 1
80336: PUSH
80337: LD_INT 22
80339: PUSH
80340: LD_OWVAR 2
80344: PUSH
80345: EMPTY
80346: LIST
80347: LIST
80348: PUSH
80349: LD_INT 61
80351: PUSH
80352: EMPTY
80353: LIST
80354: PUSH
80355: LD_INT 33
80357: PUSH
80358: LD_INT 2
80360: PUSH
80361: EMPTY
80362: LIST
80363: LIST
80364: PUSH
80365: EMPTY
80366: LIST
80367: LIST
80368: LIST
80369: PPUSH
80370: CALL_OW 69
80374: ST_TO_ADDR
// if not tmp then
80375: LD_VAR 0 1
80379: NOT
80380: IFFALSE 80384
// exit ;
80382: GO 80421
// for i in tmp do
80384: LD_ADDR_VAR 0 2
80388: PUSH
80389: LD_VAR 0 1
80393: PUSH
80394: FOR_IN
80395: IFFALSE 80419
// if IsControledBy ( i ) then
80397: LD_VAR 0 2
80401: PPUSH
80402: CALL_OW 312
80406: IFFALSE 80417
// ComUnlink ( i ) ;
80408: LD_VAR 0 2
80412: PPUSH
80413: CALL_OW 136
80417: GO 80394
80419: POP
80420: POP
// end ;
80421: PPOPN 2
80423: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
80424: LD_EXP 64
80428: PUSH
80429: LD_EXP 95
80433: AND
80434: IFFALSE 80574
80436: GO 80438
80438: DISABLE
80439: LD_INT 0
80441: PPUSH
80442: PPUSH
// begin ToLua ( displayPowell(); ) ;
80443: LD_STRING displayPowell();
80445: PPUSH
80446: CALL_OW 559
// uc_side := 0 ;
80450: LD_ADDR_OWVAR 20
80454: PUSH
80455: LD_INT 0
80457: ST_TO_ADDR
// uc_nation := 2 ;
80458: LD_ADDR_OWVAR 21
80462: PUSH
80463: LD_INT 2
80465: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
80466: LD_ADDR_OWVAR 37
80470: PUSH
80471: LD_INT 14
80473: ST_TO_ADDR
// vc_engine := engine_siberite ;
80474: LD_ADDR_OWVAR 39
80478: PUSH
80479: LD_INT 3
80481: ST_TO_ADDR
// vc_control := control_apeman ;
80482: LD_ADDR_OWVAR 38
80486: PUSH
80487: LD_INT 5
80489: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
80490: LD_ADDR_OWVAR 40
80494: PUSH
80495: LD_INT 29
80497: ST_TO_ADDR
// un := CreateVehicle ;
80498: LD_ADDR_VAR 0 2
80502: PUSH
80503: CALL_OW 45
80507: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
80508: LD_VAR 0 2
80512: PPUSH
80513: LD_INT 1
80515: PPUSH
80516: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
80520: LD_INT 35
80522: PPUSH
80523: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
80527: LD_VAR 0 2
80531: PPUSH
80532: LD_INT 22
80534: PUSH
80535: LD_OWVAR 2
80539: PUSH
80540: EMPTY
80541: LIST
80542: LIST
80543: PPUSH
80544: CALL_OW 69
80548: PPUSH
80549: LD_VAR 0 2
80553: PPUSH
80554: CALL_OW 74
80558: PPUSH
80559: CALL_OW 115
// until IsDead ( un ) ;
80563: LD_VAR 0 2
80567: PPUSH
80568: CALL_OW 301
80572: IFFALSE 80520
// end ;
80574: PPOPN 2
80576: END
// every 0 0$1 trigger StreamModeActive and sStu do
80577: LD_EXP 64
80581: PUSH
80582: LD_EXP 103
80586: AND
80587: IFFALSE 80603
80589: GO 80591
80591: DISABLE
// begin ToLua ( displayStucuk(); ) ;
80592: LD_STRING displayStucuk();
80594: PPUSH
80595: CALL_OW 559
// ResetFog ;
80599: CALL_OW 335
// end ;
80603: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
80604: LD_EXP 64
80608: PUSH
80609: LD_EXP 96
80613: AND
80614: IFFALSE 80755
80616: GO 80618
80618: DISABLE
80619: LD_INT 0
80621: PPUSH
80622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
80623: LD_ADDR_VAR 0 2
80627: PUSH
80628: LD_INT 22
80630: PUSH
80631: LD_OWVAR 2
80635: PUSH
80636: EMPTY
80637: LIST
80638: LIST
80639: PUSH
80640: LD_INT 21
80642: PUSH
80643: LD_INT 1
80645: PUSH
80646: EMPTY
80647: LIST
80648: LIST
80649: PUSH
80650: EMPTY
80651: LIST
80652: LIST
80653: PPUSH
80654: CALL_OW 69
80658: ST_TO_ADDR
// if not tmp then
80659: LD_VAR 0 2
80663: NOT
80664: IFFALSE 80668
// exit ;
80666: GO 80755
// un := tmp [ rand ( 1 , tmp ) ] ;
80668: LD_ADDR_VAR 0 1
80672: PUSH
80673: LD_VAR 0 2
80677: PUSH
80678: LD_INT 1
80680: PPUSH
80681: LD_VAR 0 2
80685: PPUSH
80686: CALL_OW 12
80690: ARRAY
80691: ST_TO_ADDR
// SetSide ( un , 0 ) ;
80692: LD_VAR 0 1
80696: PPUSH
80697: LD_INT 0
80699: PPUSH
80700: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
80704: LD_VAR 0 1
80708: PPUSH
80709: LD_OWVAR 3
80713: PUSH
80714: LD_VAR 0 1
80718: DIFF
80719: PPUSH
80720: LD_VAR 0 1
80724: PPUSH
80725: CALL_OW 74
80729: PPUSH
80730: CALL_OW 115
// wait ( 0 0$20 ) ;
80734: LD_INT 700
80736: PPUSH
80737: CALL_OW 67
// SetSide ( un , your_side ) ;
80741: LD_VAR 0 1
80745: PPUSH
80746: LD_OWVAR 2
80750: PPUSH
80751: CALL_OW 235
// end ;
80755: PPOPN 2
80757: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
80758: LD_EXP 64
80762: PUSH
80763: LD_EXP 97
80767: AND
80768: IFFALSE 80874
80770: GO 80772
80772: DISABLE
80773: LD_INT 0
80775: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
80776: LD_ADDR_VAR 0 1
80780: PUSH
80781: LD_INT 22
80783: PUSH
80784: LD_OWVAR 2
80788: PUSH
80789: EMPTY
80790: LIST
80791: LIST
80792: PUSH
80793: LD_INT 2
80795: PUSH
80796: LD_INT 30
80798: PUSH
80799: LD_INT 0
80801: PUSH
80802: EMPTY
80803: LIST
80804: LIST
80805: PUSH
80806: LD_INT 30
80808: PUSH
80809: LD_INT 1
80811: PUSH
80812: EMPTY
80813: LIST
80814: LIST
80815: PUSH
80816: EMPTY
80817: LIST
80818: LIST
80819: LIST
80820: PUSH
80821: EMPTY
80822: LIST
80823: LIST
80824: PPUSH
80825: CALL_OW 69
80829: ST_TO_ADDR
// if not depot then
80830: LD_VAR 0 1
80834: NOT
80835: IFFALSE 80839
// exit ;
80837: GO 80874
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
80839: LD_VAR 0 1
80843: PUSH
80844: LD_INT 1
80846: ARRAY
80847: PPUSH
80848: CALL_OW 250
80852: PPUSH
80853: LD_VAR 0 1
80857: PUSH
80858: LD_INT 1
80860: ARRAY
80861: PPUSH
80862: CALL_OW 251
80866: PPUSH
80867: LD_INT 70
80869: PPUSH
80870: CALL_OW 495
// end ;
80874: PPOPN 1
80876: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
80877: LD_EXP 64
80881: PUSH
80882: LD_EXP 98
80886: AND
80887: IFFALSE 81098
80889: GO 80891
80891: DISABLE
80892: LD_INT 0
80894: PPUSH
80895: PPUSH
80896: PPUSH
80897: PPUSH
80898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
80899: LD_ADDR_VAR 0 5
80903: PUSH
80904: LD_INT 22
80906: PUSH
80907: LD_OWVAR 2
80911: PUSH
80912: EMPTY
80913: LIST
80914: LIST
80915: PUSH
80916: LD_INT 21
80918: PUSH
80919: LD_INT 1
80921: PUSH
80922: EMPTY
80923: LIST
80924: LIST
80925: PUSH
80926: EMPTY
80927: LIST
80928: LIST
80929: PPUSH
80930: CALL_OW 69
80934: ST_TO_ADDR
// if not tmp then
80935: LD_VAR 0 5
80939: NOT
80940: IFFALSE 80944
// exit ;
80942: GO 81098
// for i in tmp do
80944: LD_ADDR_VAR 0 1
80948: PUSH
80949: LD_VAR 0 5
80953: PUSH
80954: FOR_IN
80955: IFFALSE 81096
// begin d := rand ( 0 , 5 ) ;
80957: LD_ADDR_VAR 0 4
80961: PUSH
80962: LD_INT 0
80964: PPUSH
80965: LD_INT 5
80967: PPUSH
80968: CALL_OW 12
80972: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
80973: LD_ADDR_VAR 0 2
80977: PUSH
80978: LD_VAR 0 1
80982: PPUSH
80983: CALL_OW 250
80987: PPUSH
80988: LD_VAR 0 4
80992: PPUSH
80993: LD_INT 3
80995: PPUSH
80996: LD_INT 12
80998: PPUSH
80999: CALL_OW 12
81003: PPUSH
81004: CALL_OW 272
81008: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
81009: LD_ADDR_VAR 0 3
81013: PUSH
81014: LD_VAR 0 1
81018: PPUSH
81019: CALL_OW 251
81023: PPUSH
81024: LD_VAR 0 4
81028: PPUSH
81029: LD_INT 3
81031: PPUSH
81032: LD_INT 12
81034: PPUSH
81035: CALL_OW 12
81039: PPUSH
81040: CALL_OW 273
81044: ST_TO_ADDR
// if ValidHex ( x , y ) then
81045: LD_VAR 0 2
81049: PPUSH
81050: LD_VAR 0 3
81054: PPUSH
81055: CALL_OW 488
81059: IFFALSE 81094
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
81061: LD_VAR 0 1
81065: PPUSH
81066: LD_VAR 0 2
81070: PPUSH
81071: LD_VAR 0 3
81075: PPUSH
81076: LD_INT 3
81078: PPUSH
81079: LD_INT 6
81081: PPUSH
81082: CALL_OW 12
81086: PPUSH
81087: LD_INT 1
81089: PPUSH
81090: CALL_OW 483
// end ;
81094: GO 80954
81096: POP
81097: POP
// end ;
81098: PPOPN 5
81100: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
81101: LD_EXP 64
81105: PUSH
81106: LD_EXP 99
81110: AND
81111: IFFALSE 81205
81113: GO 81115
81115: DISABLE
81116: LD_INT 0
81118: PPUSH
81119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
81120: LD_ADDR_VAR 0 2
81124: PUSH
81125: LD_INT 22
81127: PUSH
81128: LD_OWVAR 2
81132: PUSH
81133: EMPTY
81134: LIST
81135: LIST
81136: PUSH
81137: LD_INT 32
81139: PUSH
81140: LD_INT 1
81142: PUSH
81143: EMPTY
81144: LIST
81145: LIST
81146: PUSH
81147: LD_INT 21
81149: PUSH
81150: LD_INT 2
81152: PUSH
81153: EMPTY
81154: LIST
81155: LIST
81156: PUSH
81157: EMPTY
81158: LIST
81159: LIST
81160: LIST
81161: PPUSH
81162: CALL_OW 69
81166: ST_TO_ADDR
// if not tmp then
81167: LD_VAR 0 2
81171: NOT
81172: IFFALSE 81176
// exit ;
81174: GO 81205
// for i in tmp do
81176: LD_ADDR_VAR 0 1
81180: PUSH
81181: LD_VAR 0 2
81185: PUSH
81186: FOR_IN
81187: IFFALSE 81203
// SetFuel ( i , 0 ) ;
81189: LD_VAR 0 1
81193: PPUSH
81194: LD_INT 0
81196: PPUSH
81197: CALL_OW 240
81201: GO 81186
81203: POP
81204: POP
// end ;
81205: PPOPN 2
81207: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
81208: LD_EXP 64
81212: PUSH
81213: LD_EXP 100
81217: AND
81218: IFFALSE 81284
81220: GO 81222
81222: DISABLE
81223: LD_INT 0
81225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
81226: LD_ADDR_VAR 0 1
81230: PUSH
81231: LD_INT 22
81233: PUSH
81234: LD_OWVAR 2
81238: PUSH
81239: EMPTY
81240: LIST
81241: LIST
81242: PUSH
81243: LD_INT 30
81245: PUSH
81246: LD_INT 29
81248: PUSH
81249: EMPTY
81250: LIST
81251: LIST
81252: PUSH
81253: EMPTY
81254: LIST
81255: LIST
81256: PPUSH
81257: CALL_OW 69
81261: ST_TO_ADDR
// if not tmp then
81262: LD_VAR 0 1
81266: NOT
81267: IFFALSE 81271
// exit ;
81269: GO 81284
// DestroyUnit ( tmp [ 1 ] ) ;
81271: LD_VAR 0 1
81275: PUSH
81276: LD_INT 1
81278: ARRAY
81279: PPUSH
81280: CALL_OW 65
// end ;
81284: PPOPN 1
81286: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
81287: LD_EXP 64
81291: PUSH
81292: LD_EXP 102
81296: AND
81297: IFFALSE 81426
81299: GO 81301
81301: DISABLE
81302: LD_INT 0
81304: PPUSH
// begin uc_side := 0 ;
81305: LD_ADDR_OWVAR 20
81309: PUSH
81310: LD_INT 0
81312: ST_TO_ADDR
// uc_nation := nation_arabian ;
81313: LD_ADDR_OWVAR 21
81317: PUSH
81318: LD_INT 2
81320: ST_TO_ADDR
// hc_gallery :=  ;
81321: LD_ADDR_OWVAR 33
81325: PUSH
81326: LD_STRING 
81328: ST_TO_ADDR
// hc_name :=  ;
81329: LD_ADDR_OWVAR 26
81333: PUSH
81334: LD_STRING 
81336: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
81337: LD_INT 1
81339: PPUSH
81340: LD_INT 11
81342: PPUSH
81343: LD_INT 10
81345: PPUSH
81346: CALL_OW 380
// un := CreateHuman ;
81350: LD_ADDR_VAR 0 1
81354: PUSH
81355: CALL_OW 44
81359: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
81360: LD_VAR 0 1
81364: PPUSH
81365: LD_INT 1
81367: PPUSH
81368: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
81372: LD_INT 35
81374: PPUSH
81375: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
81379: LD_VAR 0 1
81383: PPUSH
81384: LD_INT 22
81386: PUSH
81387: LD_OWVAR 2
81391: PUSH
81392: EMPTY
81393: LIST
81394: LIST
81395: PPUSH
81396: CALL_OW 69
81400: PPUSH
81401: LD_VAR 0 1
81405: PPUSH
81406: CALL_OW 74
81410: PPUSH
81411: CALL_OW 115
// until IsDead ( un ) ;
81415: LD_VAR 0 1
81419: PPUSH
81420: CALL_OW 301
81424: IFFALSE 81372
// end ;
81426: PPOPN 1
81428: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
81429: LD_EXP 64
81433: PUSH
81434: LD_EXP 104
81438: AND
81439: IFFALSE 81451
81441: GO 81443
81443: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
81444: LD_STRING earthquake(getX(game), 0, 32)
81446: PPUSH
81447: CALL_OW 559
81451: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
81452: LD_EXP 64
81456: PUSH
81457: LD_EXP 105
81461: AND
81462: IFFALSE 81553
81464: GO 81466
81466: DISABLE
81467: LD_INT 0
81469: PPUSH
// begin enable ;
81470: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
81471: LD_ADDR_VAR 0 1
81475: PUSH
81476: LD_INT 22
81478: PUSH
81479: LD_OWVAR 2
81483: PUSH
81484: EMPTY
81485: LIST
81486: LIST
81487: PUSH
81488: LD_INT 21
81490: PUSH
81491: LD_INT 2
81493: PUSH
81494: EMPTY
81495: LIST
81496: LIST
81497: PUSH
81498: LD_INT 33
81500: PUSH
81501: LD_INT 3
81503: PUSH
81504: EMPTY
81505: LIST
81506: LIST
81507: PUSH
81508: EMPTY
81509: LIST
81510: LIST
81511: LIST
81512: PPUSH
81513: CALL_OW 69
81517: ST_TO_ADDR
// if not tmp then
81518: LD_VAR 0 1
81522: NOT
81523: IFFALSE 81527
// exit ;
81525: GO 81553
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
81527: LD_VAR 0 1
81531: PUSH
81532: LD_INT 1
81534: PPUSH
81535: LD_VAR 0 1
81539: PPUSH
81540: CALL_OW 12
81544: ARRAY
81545: PPUSH
81546: LD_INT 1
81548: PPUSH
81549: CALL_OW 234
// end ;
81553: PPOPN 1
81555: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
81556: LD_EXP 64
81560: PUSH
81561: LD_EXP 106
81565: AND
81566: IFFALSE 81707
81568: GO 81570
81570: DISABLE
81571: LD_INT 0
81573: PPUSH
81574: PPUSH
81575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81576: LD_ADDR_VAR 0 3
81580: PUSH
81581: LD_INT 22
81583: PUSH
81584: LD_OWVAR 2
81588: PUSH
81589: EMPTY
81590: LIST
81591: LIST
81592: PUSH
81593: LD_INT 25
81595: PUSH
81596: LD_INT 1
81598: PUSH
81599: EMPTY
81600: LIST
81601: LIST
81602: PUSH
81603: EMPTY
81604: LIST
81605: LIST
81606: PPUSH
81607: CALL_OW 69
81611: ST_TO_ADDR
// if not tmp then
81612: LD_VAR 0 3
81616: NOT
81617: IFFALSE 81621
// exit ;
81619: GO 81707
// un := tmp [ rand ( 1 , tmp ) ] ;
81621: LD_ADDR_VAR 0 2
81625: PUSH
81626: LD_VAR 0 3
81630: PUSH
81631: LD_INT 1
81633: PPUSH
81634: LD_VAR 0 3
81638: PPUSH
81639: CALL_OW 12
81643: ARRAY
81644: ST_TO_ADDR
// if Crawls ( un ) then
81645: LD_VAR 0 2
81649: PPUSH
81650: CALL_OW 318
81654: IFFALSE 81665
// ComWalk ( un ) ;
81656: LD_VAR 0 2
81660: PPUSH
81661: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
81665: LD_VAR 0 2
81669: PPUSH
81670: LD_INT 9
81672: PPUSH
81673: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
81677: LD_INT 28
81679: PPUSH
81680: LD_OWVAR 2
81684: PPUSH
81685: LD_INT 2
81687: PPUSH
81688: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
81692: LD_INT 29
81694: PPUSH
81695: LD_OWVAR 2
81699: PPUSH
81700: LD_INT 2
81702: PPUSH
81703: CALL_OW 322
// end ;
81707: PPOPN 3
81709: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
81710: LD_EXP 64
81714: PUSH
81715: LD_EXP 107
81719: AND
81720: IFFALSE 81831
81722: GO 81724
81724: DISABLE
81725: LD_INT 0
81727: PPUSH
81728: PPUSH
81729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81730: LD_ADDR_VAR 0 3
81734: PUSH
81735: LD_INT 22
81737: PUSH
81738: LD_OWVAR 2
81742: PUSH
81743: EMPTY
81744: LIST
81745: LIST
81746: PUSH
81747: LD_INT 25
81749: PUSH
81750: LD_INT 1
81752: PUSH
81753: EMPTY
81754: LIST
81755: LIST
81756: PUSH
81757: EMPTY
81758: LIST
81759: LIST
81760: PPUSH
81761: CALL_OW 69
81765: ST_TO_ADDR
// if not tmp then
81766: LD_VAR 0 3
81770: NOT
81771: IFFALSE 81775
// exit ;
81773: GO 81831
// un := tmp [ rand ( 1 , tmp ) ] ;
81775: LD_ADDR_VAR 0 2
81779: PUSH
81780: LD_VAR 0 3
81784: PUSH
81785: LD_INT 1
81787: PPUSH
81788: LD_VAR 0 3
81792: PPUSH
81793: CALL_OW 12
81797: ARRAY
81798: ST_TO_ADDR
// if Crawls ( un ) then
81799: LD_VAR 0 2
81803: PPUSH
81804: CALL_OW 318
81808: IFFALSE 81819
// ComWalk ( un ) ;
81810: LD_VAR 0 2
81814: PPUSH
81815: CALL_OW 138
// SetClass ( un , class_mortar ) ;
81819: LD_VAR 0 2
81823: PPUSH
81824: LD_INT 8
81826: PPUSH
81827: CALL_OW 336
// end ;
81831: PPOPN 3
81833: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
81834: LD_EXP 64
81838: PUSH
81839: LD_EXP 108
81843: AND
81844: IFFALSE 81988
81846: GO 81848
81848: DISABLE
81849: LD_INT 0
81851: PPUSH
81852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
81853: LD_ADDR_VAR 0 2
81857: PUSH
81858: LD_INT 22
81860: PUSH
81861: LD_OWVAR 2
81865: PUSH
81866: EMPTY
81867: LIST
81868: LIST
81869: PUSH
81870: LD_INT 21
81872: PUSH
81873: LD_INT 2
81875: PUSH
81876: EMPTY
81877: LIST
81878: LIST
81879: PUSH
81880: LD_INT 2
81882: PUSH
81883: LD_INT 34
81885: PUSH
81886: LD_INT 12
81888: PUSH
81889: EMPTY
81890: LIST
81891: LIST
81892: PUSH
81893: LD_INT 34
81895: PUSH
81896: LD_INT 51
81898: PUSH
81899: EMPTY
81900: LIST
81901: LIST
81902: PUSH
81903: LD_INT 34
81905: PUSH
81906: LD_INT 32
81908: PUSH
81909: EMPTY
81910: LIST
81911: LIST
81912: PUSH
81913: EMPTY
81914: LIST
81915: LIST
81916: LIST
81917: LIST
81918: PUSH
81919: EMPTY
81920: LIST
81921: LIST
81922: LIST
81923: PPUSH
81924: CALL_OW 69
81928: ST_TO_ADDR
// if not tmp then
81929: LD_VAR 0 2
81933: NOT
81934: IFFALSE 81938
// exit ;
81936: GO 81988
// for i in tmp do
81938: LD_ADDR_VAR 0 1
81942: PUSH
81943: LD_VAR 0 2
81947: PUSH
81948: FOR_IN
81949: IFFALSE 81986
// if GetCargo ( i , mat_artifact ) = 0 then
81951: LD_VAR 0 1
81955: PPUSH
81956: LD_INT 4
81958: PPUSH
81959: CALL_OW 289
81963: PUSH
81964: LD_INT 0
81966: EQUAL
81967: IFFALSE 81984
// SetCargo ( i , mat_siberit , 100 ) ;
81969: LD_VAR 0 1
81973: PPUSH
81974: LD_INT 3
81976: PPUSH
81977: LD_INT 100
81979: PPUSH
81980: CALL_OW 290
81984: GO 81948
81986: POP
81987: POP
// end ;
81988: PPOPN 2
81990: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
81991: LD_EXP 64
81995: PUSH
81996: LD_EXP 109
82000: AND
82001: IFFALSE 82184
82003: GO 82005
82005: DISABLE
82006: LD_INT 0
82008: PPUSH
82009: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
82010: LD_ADDR_VAR 0 2
82014: PUSH
82015: LD_INT 22
82017: PUSH
82018: LD_OWVAR 2
82022: PUSH
82023: EMPTY
82024: LIST
82025: LIST
82026: PPUSH
82027: CALL_OW 69
82031: ST_TO_ADDR
// if not tmp then
82032: LD_VAR 0 2
82036: NOT
82037: IFFALSE 82041
// exit ;
82039: GO 82184
// for i := 1 to 2 do
82041: LD_ADDR_VAR 0 1
82045: PUSH
82046: DOUBLE
82047: LD_INT 1
82049: DEC
82050: ST_TO_ADDR
82051: LD_INT 2
82053: PUSH
82054: FOR_TO
82055: IFFALSE 82182
// begin uc_side := your_side ;
82057: LD_ADDR_OWVAR 20
82061: PUSH
82062: LD_OWVAR 2
82066: ST_TO_ADDR
// uc_nation := nation_american ;
82067: LD_ADDR_OWVAR 21
82071: PUSH
82072: LD_INT 1
82074: ST_TO_ADDR
// vc_chassis := us_morphling ;
82075: LD_ADDR_OWVAR 37
82079: PUSH
82080: LD_INT 5
82082: ST_TO_ADDR
// vc_engine := engine_siberite ;
82083: LD_ADDR_OWVAR 39
82087: PUSH
82088: LD_INT 3
82090: ST_TO_ADDR
// vc_control := control_computer ;
82091: LD_ADDR_OWVAR 38
82095: PUSH
82096: LD_INT 3
82098: ST_TO_ADDR
// vc_weapon := us_double_laser ;
82099: LD_ADDR_OWVAR 40
82103: PUSH
82104: LD_INT 10
82106: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
82107: LD_VAR 0 2
82111: PUSH
82112: LD_INT 1
82114: ARRAY
82115: PPUSH
82116: CALL_OW 310
82120: NOT
82121: IFFALSE 82168
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
82123: CALL_OW 45
82127: PPUSH
82128: LD_VAR 0 2
82132: PUSH
82133: LD_INT 1
82135: ARRAY
82136: PPUSH
82137: CALL_OW 250
82141: PPUSH
82142: LD_VAR 0 2
82146: PUSH
82147: LD_INT 1
82149: ARRAY
82150: PPUSH
82151: CALL_OW 251
82155: PPUSH
82156: LD_INT 12
82158: PPUSH
82159: LD_INT 1
82161: PPUSH
82162: CALL_OW 50
82166: GO 82180
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
82168: CALL_OW 45
82172: PPUSH
82173: LD_INT 1
82175: PPUSH
82176: CALL_OW 51
// end ;
82180: GO 82054
82182: POP
82183: POP
// end ;
82184: PPOPN 2
82186: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
82187: LD_EXP 64
82191: PUSH
82192: LD_EXP 110
82196: AND
82197: IFFALSE 82419
82199: GO 82201
82201: DISABLE
82202: LD_INT 0
82204: PPUSH
82205: PPUSH
82206: PPUSH
82207: PPUSH
82208: PPUSH
82209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
82210: LD_ADDR_VAR 0 6
82214: PUSH
82215: LD_INT 22
82217: PUSH
82218: LD_OWVAR 2
82222: PUSH
82223: EMPTY
82224: LIST
82225: LIST
82226: PUSH
82227: LD_INT 21
82229: PUSH
82230: LD_INT 1
82232: PUSH
82233: EMPTY
82234: LIST
82235: LIST
82236: PUSH
82237: LD_INT 3
82239: PUSH
82240: LD_INT 23
82242: PUSH
82243: LD_INT 0
82245: PUSH
82246: EMPTY
82247: LIST
82248: LIST
82249: PUSH
82250: EMPTY
82251: LIST
82252: LIST
82253: PUSH
82254: EMPTY
82255: LIST
82256: LIST
82257: LIST
82258: PPUSH
82259: CALL_OW 69
82263: ST_TO_ADDR
// if not tmp then
82264: LD_VAR 0 6
82268: NOT
82269: IFFALSE 82273
// exit ;
82271: GO 82419
// s1 := rand ( 1 , 4 ) ;
82273: LD_ADDR_VAR 0 2
82277: PUSH
82278: LD_INT 1
82280: PPUSH
82281: LD_INT 4
82283: PPUSH
82284: CALL_OW 12
82288: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
82289: LD_ADDR_VAR 0 4
82293: PUSH
82294: LD_VAR 0 6
82298: PUSH
82299: LD_INT 1
82301: ARRAY
82302: PPUSH
82303: LD_VAR 0 2
82307: PPUSH
82308: CALL_OW 259
82312: ST_TO_ADDR
// if s1 = 1 then
82313: LD_VAR 0 2
82317: PUSH
82318: LD_INT 1
82320: EQUAL
82321: IFFALSE 82341
// s2 := rand ( 2 , 4 ) else
82323: LD_ADDR_VAR 0 3
82327: PUSH
82328: LD_INT 2
82330: PPUSH
82331: LD_INT 4
82333: PPUSH
82334: CALL_OW 12
82338: ST_TO_ADDR
82339: GO 82349
// s2 := 1 ;
82341: LD_ADDR_VAR 0 3
82345: PUSH
82346: LD_INT 1
82348: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
82349: LD_ADDR_VAR 0 5
82353: PUSH
82354: LD_VAR 0 6
82358: PUSH
82359: LD_INT 1
82361: ARRAY
82362: PPUSH
82363: LD_VAR 0 3
82367: PPUSH
82368: CALL_OW 259
82372: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
82373: LD_VAR 0 6
82377: PUSH
82378: LD_INT 1
82380: ARRAY
82381: PPUSH
82382: LD_VAR 0 2
82386: PPUSH
82387: LD_VAR 0 5
82391: PPUSH
82392: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
82396: LD_VAR 0 6
82400: PUSH
82401: LD_INT 1
82403: ARRAY
82404: PPUSH
82405: LD_VAR 0 3
82409: PPUSH
82410: LD_VAR 0 4
82414: PPUSH
82415: CALL_OW 237
// end ;
82419: PPOPN 6
82421: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
82422: LD_EXP 64
82426: PUSH
82427: LD_EXP 111
82431: AND
82432: IFFALSE 82511
82434: GO 82436
82436: DISABLE
82437: LD_INT 0
82439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
82440: LD_ADDR_VAR 0 1
82444: PUSH
82445: LD_INT 22
82447: PUSH
82448: LD_OWVAR 2
82452: PUSH
82453: EMPTY
82454: LIST
82455: LIST
82456: PUSH
82457: LD_INT 30
82459: PUSH
82460: LD_INT 3
82462: PUSH
82463: EMPTY
82464: LIST
82465: LIST
82466: PUSH
82467: EMPTY
82468: LIST
82469: LIST
82470: PPUSH
82471: CALL_OW 69
82475: ST_TO_ADDR
// if not tmp then
82476: LD_VAR 0 1
82480: NOT
82481: IFFALSE 82485
// exit ;
82483: GO 82511
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
82485: LD_VAR 0 1
82489: PUSH
82490: LD_INT 1
82492: PPUSH
82493: LD_VAR 0 1
82497: PPUSH
82498: CALL_OW 12
82502: ARRAY
82503: PPUSH
82504: LD_INT 1
82506: PPUSH
82507: CALL_OW 234
// end ;
82511: PPOPN 1
82513: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
82514: LD_EXP 64
82518: PUSH
82519: LD_EXP 112
82523: AND
82524: IFFALSE 82636
82526: GO 82528
82528: DISABLE
82529: LD_INT 0
82531: PPUSH
82532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
82533: LD_ADDR_VAR 0 2
82537: PUSH
82538: LD_INT 22
82540: PUSH
82541: LD_OWVAR 2
82545: PUSH
82546: EMPTY
82547: LIST
82548: LIST
82549: PUSH
82550: LD_INT 2
82552: PUSH
82553: LD_INT 30
82555: PUSH
82556: LD_INT 27
82558: PUSH
82559: EMPTY
82560: LIST
82561: LIST
82562: PUSH
82563: LD_INT 30
82565: PUSH
82566: LD_INT 26
82568: PUSH
82569: EMPTY
82570: LIST
82571: LIST
82572: PUSH
82573: LD_INT 30
82575: PUSH
82576: LD_INT 28
82578: PUSH
82579: EMPTY
82580: LIST
82581: LIST
82582: PUSH
82583: EMPTY
82584: LIST
82585: LIST
82586: LIST
82587: LIST
82588: PUSH
82589: EMPTY
82590: LIST
82591: LIST
82592: PPUSH
82593: CALL_OW 69
82597: ST_TO_ADDR
// if not tmp then
82598: LD_VAR 0 2
82602: NOT
82603: IFFALSE 82607
// exit ;
82605: GO 82636
// for i in tmp do
82607: LD_ADDR_VAR 0 1
82611: PUSH
82612: LD_VAR 0 2
82616: PUSH
82617: FOR_IN
82618: IFFALSE 82634
// SetLives ( i , 1 ) ;
82620: LD_VAR 0 1
82624: PPUSH
82625: LD_INT 1
82627: PPUSH
82628: CALL_OW 234
82632: GO 82617
82634: POP
82635: POP
// end ;
82636: PPOPN 2
82638: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
82639: LD_EXP 64
82643: PUSH
82644: LD_EXP 113
82648: AND
82649: IFFALSE 82936
82651: GO 82653
82653: DISABLE
82654: LD_INT 0
82656: PPUSH
82657: PPUSH
82658: PPUSH
// begin i := rand ( 1 , 7 ) ;
82659: LD_ADDR_VAR 0 1
82663: PUSH
82664: LD_INT 1
82666: PPUSH
82667: LD_INT 7
82669: PPUSH
82670: CALL_OW 12
82674: ST_TO_ADDR
// case i of 1 :
82675: LD_VAR 0 1
82679: PUSH
82680: LD_INT 1
82682: DOUBLE
82683: EQUAL
82684: IFTRUE 82688
82686: GO 82698
82688: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
82689: LD_STRING earthquake(getX(game), 0, 32)
82691: PPUSH
82692: CALL_OW 559
82696: GO 82936
82698: LD_INT 2
82700: DOUBLE
82701: EQUAL
82702: IFTRUE 82706
82704: GO 82720
82706: POP
// begin ToLua ( displayStucuk(); ) ;
82707: LD_STRING displayStucuk();
82709: PPUSH
82710: CALL_OW 559
// ResetFog ;
82714: CALL_OW 335
// end ; 3 :
82718: GO 82936
82720: LD_INT 3
82722: DOUBLE
82723: EQUAL
82724: IFTRUE 82728
82726: GO 82832
82728: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
82729: LD_ADDR_VAR 0 2
82733: PUSH
82734: LD_INT 22
82736: PUSH
82737: LD_OWVAR 2
82741: PUSH
82742: EMPTY
82743: LIST
82744: LIST
82745: PUSH
82746: LD_INT 25
82748: PUSH
82749: LD_INT 1
82751: PUSH
82752: EMPTY
82753: LIST
82754: LIST
82755: PUSH
82756: EMPTY
82757: LIST
82758: LIST
82759: PPUSH
82760: CALL_OW 69
82764: ST_TO_ADDR
// if not tmp then
82765: LD_VAR 0 2
82769: NOT
82770: IFFALSE 82774
// exit ;
82772: GO 82936
// un := tmp [ rand ( 1 , tmp ) ] ;
82774: LD_ADDR_VAR 0 3
82778: PUSH
82779: LD_VAR 0 2
82783: PUSH
82784: LD_INT 1
82786: PPUSH
82787: LD_VAR 0 2
82791: PPUSH
82792: CALL_OW 12
82796: ARRAY
82797: ST_TO_ADDR
// if Crawls ( un ) then
82798: LD_VAR 0 3
82802: PPUSH
82803: CALL_OW 318
82807: IFFALSE 82818
// ComWalk ( un ) ;
82809: LD_VAR 0 3
82813: PPUSH
82814: CALL_OW 138
// SetClass ( un , class_mortar ) ;
82818: LD_VAR 0 3
82822: PPUSH
82823: LD_INT 8
82825: PPUSH
82826: CALL_OW 336
// end ; 4 :
82830: GO 82936
82832: LD_INT 4
82834: DOUBLE
82835: EQUAL
82836: IFTRUE 82840
82838: GO 82914
82840: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
82841: LD_ADDR_VAR 0 2
82845: PUSH
82846: LD_INT 22
82848: PUSH
82849: LD_OWVAR 2
82853: PUSH
82854: EMPTY
82855: LIST
82856: LIST
82857: PUSH
82858: LD_INT 30
82860: PUSH
82861: LD_INT 29
82863: PUSH
82864: EMPTY
82865: LIST
82866: LIST
82867: PUSH
82868: EMPTY
82869: LIST
82870: LIST
82871: PPUSH
82872: CALL_OW 69
82876: ST_TO_ADDR
// if not tmp then
82877: LD_VAR 0 2
82881: NOT
82882: IFFALSE 82886
// exit ;
82884: GO 82936
// CenterNowOnUnits ( tmp [ 1 ] ) ;
82886: LD_VAR 0 2
82890: PUSH
82891: LD_INT 1
82893: ARRAY
82894: PPUSH
82895: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
82899: LD_VAR 0 2
82903: PUSH
82904: LD_INT 1
82906: ARRAY
82907: PPUSH
82908: CALL_OW 65
// end ; 5 .. 7 :
82912: GO 82936
82914: LD_INT 5
82916: DOUBLE
82917: GREATEREQUAL
82918: IFFALSE 82926
82920: LD_INT 7
82922: DOUBLE
82923: LESSEQUAL
82924: IFTRUE 82928
82926: GO 82935
82928: POP
// StreamSibBomb ; end ;
82929: CALL 79173 0 0
82933: GO 82936
82935: POP
// end ;
82936: PPOPN 3
82938: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
82939: LD_EXP 64
82943: PUSH
82944: LD_EXP 114
82948: AND
82949: IFFALSE 83105
82951: GO 82953
82953: DISABLE
82954: LD_INT 0
82956: PPUSH
82957: PPUSH
82958: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
82959: LD_ADDR_VAR 0 2
82963: PUSH
82964: LD_INT 81
82966: PUSH
82967: LD_OWVAR 2
82971: PUSH
82972: EMPTY
82973: LIST
82974: LIST
82975: PUSH
82976: LD_INT 2
82978: PUSH
82979: LD_INT 21
82981: PUSH
82982: LD_INT 1
82984: PUSH
82985: EMPTY
82986: LIST
82987: LIST
82988: PUSH
82989: LD_INT 21
82991: PUSH
82992: LD_INT 2
82994: PUSH
82995: EMPTY
82996: LIST
82997: LIST
82998: PUSH
82999: EMPTY
83000: LIST
83001: LIST
83002: LIST
83003: PUSH
83004: EMPTY
83005: LIST
83006: LIST
83007: PPUSH
83008: CALL_OW 69
83012: ST_TO_ADDR
// if not tmp then
83013: LD_VAR 0 2
83017: NOT
83018: IFFALSE 83022
// exit ;
83020: GO 83105
// p := 0 ;
83022: LD_ADDR_VAR 0 3
83026: PUSH
83027: LD_INT 0
83029: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
83030: LD_INT 35
83032: PPUSH
83033: CALL_OW 67
// p := p + 1 ;
83037: LD_ADDR_VAR 0 3
83041: PUSH
83042: LD_VAR 0 3
83046: PUSH
83047: LD_INT 1
83049: PLUS
83050: ST_TO_ADDR
// for i in tmp do
83051: LD_ADDR_VAR 0 1
83055: PUSH
83056: LD_VAR 0 2
83060: PUSH
83061: FOR_IN
83062: IFFALSE 83093
// if GetLives ( i ) < 1000 then
83064: LD_VAR 0 1
83068: PPUSH
83069: CALL_OW 256
83073: PUSH
83074: LD_INT 1000
83076: LESS
83077: IFFALSE 83091
// SetLives ( i , 1000 ) ;
83079: LD_VAR 0 1
83083: PPUSH
83084: LD_INT 1000
83086: PPUSH
83087: CALL_OW 234
83091: GO 83061
83093: POP
83094: POP
// until p > 20 ;
83095: LD_VAR 0 3
83099: PUSH
83100: LD_INT 20
83102: GREATER
83103: IFFALSE 83030
// end ;
83105: PPOPN 3
83107: END
// every 0 0$1 trigger StreamModeActive and sTime do
83108: LD_EXP 64
83112: PUSH
83113: LD_EXP 115
83117: AND
83118: IFFALSE 83153
83120: GO 83122
83122: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
83123: LD_INT 28
83125: PPUSH
83126: LD_OWVAR 2
83130: PPUSH
83131: LD_INT 2
83133: PPUSH
83134: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
83138: LD_INT 30
83140: PPUSH
83141: LD_OWVAR 2
83145: PPUSH
83146: LD_INT 2
83148: PPUSH
83149: CALL_OW 322
// end ;
83153: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
83154: LD_EXP 64
83158: PUSH
83159: LD_EXP 116
83163: AND
83164: IFFALSE 83285
83166: GO 83168
83168: DISABLE
83169: LD_INT 0
83171: PPUSH
83172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
83173: LD_ADDR_VAR 0 2
83177: PUSH
83178: LD_INT 22
83180: PUSH
83181: LD_OWVAR 2
83185: PUSH
83186: EMPTY
83187: LIST
83188: LIST
83189: PUSH
83190: LD_INT 21
83192: PUSH
83193: LD_INT 1
83195: PUSH
83196: EMPTY
83197: LIST
83198: LIST
83199: PUSH
83200: LD_INT 3
83202: PUSH
83203: LD_INT 23
83205: PUSH
83206: LD_INT 0
83208: PUSH
83209: EMPTY
83210: LIST
83211: LIST
83212: PUSH
83213: EMPTY
83214: LIST
83215: LIST
83216: PUSH
83217: EMPTY
83218: LIST
83219: LIST
83220: LIST
83221: PPUSH
83222: CALL_OW 69
83226: ST_TO_ADDR
// if not tmp then
83227: LD_VAR 0 2
83231: NOT
83232: IFFALSE 83236
// exit ;
83234: GO 83285
// for i in tmp do
83236: LD_ADDR_VAR 0 1
83240: PUSH
83241: LD_VAR 0 2
83245: PUSH
83246: FOR_IN
83247: IFFALSE 83283
// begin if Crawls ( i ) then
83249: LD_VAR 0 1
83253: PPUSH
83254: CALL_OW 318
83258: IFFALSE 83269
// ComWalk ( i ) ;
83260: LD_VAR 0 1
83264: PPUSH
83265: CALL_OW 138
// SetClass ( i , 2 ) ;
83269: LD_VAR 0 1
83273: PPUSH
83274: LD_INT 2
83276: PPUSH
83277: CALL_OW 336
// end ;
83281: GO 83246
83283: POP
83284: POP
// end ;
83285: PPOPN 2
83287: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
83288: LD_EXP 64
83292: PUSH
83293: LD_EXP 117
83297: AND
83298: IFFALSE 83586
83300: GO 83302
83302: DISABLE
83303: LD_INT 0
83305: PPUSH
83306: PPUSH
83307: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
83308: LD_OWVAR 2
83312: PPUSH
83313: LD_INT 9
83315: PPUSH
83316: LD_INT 1
83318: PPUSH
83319: LD_INT 1
83321: PPUSH
83322: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
83326: LD_INT 9
83328: PPUSH
83329: LD_OWVAR 2
83333: PPUSH
83334: CALL_OW 343
// uc_side := 9 ;
83338: LD_ADDR_OWVAR 20
83342: PUSH
83343: LD_INT 9
83345: ST_TO_ADDR
// uc_nation := 2 ;
83346: LD_ADDR_OWVAR 21
83350: PUSH
83351: LD_INT 2
83353: ST_TO_ADDR
// hc_name := Dark Warrior ;
83354: LD_ADDR_OWVAR 26
83358: PUSH
83359: LD_STRING Dark Warrior
83361: ST_TO_ADDR
// hc_gallery :=  ;
83362: LD_ADDR_OWVAR 33
83366: PUSH
83367: LD_STRING 
83369: ST_TO_ADDR
// hc_noskilllimit := true ;
83370: LD_ADDR_OWVAR 76
83374: PUSH
83375: LD_INT 1
83377: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
83378: LD_ADDR_OWVAR 31
83382: PUSH
83383: LD_INT 30
83385: PUSH
83386: LD_INT 30
83388: PUSH
83389: LD_INT 30
83391: PUSH
83392: LD_INT 30
83394: PUSH
83395: EMPTY
83396: LIST
83397: LIST
83398: LIST
83399: LIST
83400: ST_TO_ADDR
// un := CreateHuman ;
83401: LD_ADDR_VAR 0 3
83405: PUSH
83406: CALL_OW 44
83410: ST_TO_ADDR
// hc_noskilllimit := false ;
83411: LD_ADDR_OWVAR 76
83415: PUSH
83416: LD_INT 0
83418: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
83419: LD_VAR 0 3
83423: PPUSH
83424: LD_INT 1
83426: PPUSH
83427: CALL_OW 51
// ToLua ( playRanger() ) ;
83431: LD_STRING playRanger()
83433: PPUSH
83434: CALL_OW 559
// p := 0 ;
83438: LD_ADDR_VAR 0 2
83442: PUSH
83443: LD_INT 0
83445: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
83446: LD_INT 35
83448: PPUSH
83449: CALL_OW 67
// p := p + 1 ;
83453: LD_ADDR_VAR 0 2
83457: PUSH
83458: LD_VAR 0 2
83462: PUSH
83463: LD_INT 1
83465: PLUS
83466: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
83467: LD_VAR 0 3
83471: PPUSH
83472: CALL_OW 256
83476: PUSH
83477: LD_INT 1000
83479: LESS
83480: IFFALSE 83494
// SetLives ( un , 1000 ) ;
83482: LD_VAR 0 3
83486: PPUSH
83487: LD_INT 1000
83489: PPUSH
83490: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
83494: LD_VAR 0 3
83498: PPUSH
83499: LD_INT 81
83501: PUSH
83502: LD_OWVAR 2
83506: PUSH
83507: EMPTY
83508: LIST
83509: LIST
83510: PUSH
83511: LD_INT 91
83513: PUSH
83514: LD_VAR 0 3
83518: PUSH
83519: LD_INT 30
83521: PUSH
83522: EMPTY
83523: LIST
83524: LIST
83525: LIST
83526: PUSH
83527: EMPTY
83528: LIST
83529: LIST
83530: PPUSH
83531: CALL_OW 69
83535: PPUSH
83536: LD_VAR 0 3
83540: PPUSH
83541: CALL_OW 74
83545: PPUSH
83546: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
83550: LD_VAR 0 2
83554: PUSH
83555: LD_INT 80
83557: GREATER
83558: PUSH
83559: LD_VAR 0 3
83563: PPUSH
83564: CALL_OW 301
83568: OR
83569: IFFALSE 83446
// if un then
83571: LD_VAR 0 3
83575: IFFALSE 83586
// RemoveUnit ( un ) ;
83577: LD_VAR 0 3
83581: PPUSH
83582: CALL_OW 64
// end ;
83586: PPOPN 3
83588: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
83589: LD_EXP 118
83593: IFFALSE 83709
83595: GO 83597
83597: DISABLE
83598: LD_INT 0
83600: PPUSH
83601: PPUSH
83602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
83603: LD_ADDR_VAR 0 2
83607: PUSH
83608: LD_INT 81
83610: PUSH
83611: LD_OWVAR 2
83615: PUSH
83616: EMPTY
83617: LIST
83618: LIST
83619: PUSH
83620: LD_INT 21
83622: PUSH
83623: LD_INT 1
83625: PUSH
83626: EMPTY
83627: LIST
83628: LIST
83629: PUSH
83630: EMPTY
83631: LIST
83632: LIST
83633: PPUSH
83634: CALL_OW 69
83638: ST_TO_ADDR
// ToLua ( playComputer() ) ;
83639: LD_STRING playComputer()
83641: PPUSH
83642: CALL_OW 559
// if not tmp then
83646: LD_VAR 0 2
83650: NOT
83651: IFFALSE 83655
// exit ;
83653: GO 83709
// for i in tmp do
83655: LD_ADDR_VAR 0 1
83659: PUSH
83660: LD_VAR 0 2
83664: PUSH
83665: FOR_IN
83666: IFFALSE 83707
// for j := 1 to 4 do
83668: LD_ADDR_VAR 0 3
83672: PUSH
83673: DOUBLE
83674: LD_INT 1
83676: DEC
83677: ST_TO_ADDR
83678: LD_INT 4
83680: PUSH
83681: FOR_TO
83682: IFFALSE 83703
// SetSkill ( i , j , 10 ) ;
83684: LD_VAR 0 1
83688: PPUSH
83689: LD_VAR 0 3
83693: PPUSH
83694: LD_INT 10
83696: PPUSH
83697: CALL_OW 237
83701: GO 83681
83703: POP
83704: POP
83705: GO 83665
83707: POP
83708: POP
// end ;
83709: PPOPN 3
83711: END
// every 0 0$1 trigger s30 do var i , tmp ;
83712: LD_EXP 119
83716: IFFALSE 83785
83718: GO 83720
83720: DISABLE
83721: LD_INT 0
83723: PPUSH
83724: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
83725: LD_ADDR_VAR 0 2
83729: PUSH
83730: LD_INT 22
83732: PUSH
83733: LD_OWVAR 2
83737: PUSH
83738: EMPTY
83739: LIST
83740: LIST
83741: PPUSH
83742: CALL_OW 69
83746: ST_TO_ADDR
// if not tmp then
83747: LD_VAR 0 2
83751: NOT
83752: IFFALSE 83756
// exit ;
83754: GO 83785
// for i in tmp do
83756: LD_ADDR_VAR 0 1
83760: PUSH
83761: LD_VAR 0 2
83765: PUSH
83766: FOR_IN
83767: IFFALSE 83783
// SetLives ( i , 300 ) ;
83769: LD_VAR 0 1
83773: PPUSH
83774: LD_INT 300
83776: PPUSH
83777: CALL_OW 234
83781: GO 83766
83783: POP
83784: POP
// end ;
83785: PPOPN 2
83787: END
// every 0 0$1 trigger s60 do var i , tmp ;
83788: LD_EXP 120
83792: IFFALSE 83861
83794: GO 83796
83796: DISABLE
83797: LD_INT 0
83799: PPUSH
83800: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
83801: LD_ADDR_VAR 0 2
83805: PUSH
83806: LD_INT 22
83808: PUSH
83809: LD_OWVAR 2
83813: PUSH
83814: EMPTY
83815: LIST
83816: LIST
83817: PPUSH
83818: CALL_OW 69
83822: ST_TO_ADDR
// if not tmp then
83823: LD_VAR 0 2
83827: NOT
83828: IFFALSE 83832
// exit ;
83830: GO 83861
// for i in tmp do
83832: LD_ADDR_VAR 0 1
83836: PUSH
83837: LD_VAR 0 2
83841: PUSH
83842: FOR_IN
83843: IFFALSE 83859
// SetLives ( i , 600 ) ;
83845: LD_VAR 0 1
83849: PPUSH
83850: LD_INT 600
83852: PPUSH
83853: CALL_OW 234
83857: GO 83842
83859: POP
83860: POP
// end ;
83861: PPOPN 2
83863: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
83864: LD_INT 0
83866: PPUSH
// case cmd of 301 :
83867: LD_VAR 0 1
83871: PUSH
83872: LD_INT 301
83874: DOUBLE
83875: EQUAL
83876: IFTRUE 83880
83878: GO 83912
83880: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
83881: LD_VAR 0 6
83885: PPUSH
83886: LD_VAR 0 7
83890: PPUSH
83891: LD_VAR 0 8
83895: PPUSH
83896: LD_VAR 0 4
83900: PPUSH
83901: LD_VAR 0 5
83905: PPUSH
83906: CALL 85121 0 5
83910: GO 84033
83912: LD_INT 302
83914: DOUBLE
83915: EQUAL
83916: IFTRUE 83920
83918: GO 83957
83920: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
83921: LD_VAR 0 6
83925: PPUSH
83926: LD_VAR 0 7
83930: PPUSH
83931: LD_VAR 0 8
83935: PPUSH
83936: LD_VAR 0 9
83940: PPUSH
83941: LD_VAR 0 4
83945: PPUSH
83946: LD_VAR 0 5
83950: PPUSH
83951: CALL 85212 0 6
83955: GO 84033
83957: LD_INT 303
83959: DOUBLE
83960: EQUAL
83961: IFTRUE 83965
83963: GO 84002
83965: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
83966: LD_VAR 0 6
83970: PPUSH
83971: LD_VAR 0 7
83975: PPUSH
83976: LD_VAR 0 8
83980: PPUSH
83981: LD_VAR 0 9
83985: PPUSH
83986: LD_VAR 0 4
83990: PPUSH
83991: LD_VAR 0 5
83995: PPUSH
83996: CALL 84038 0 6
84000: GO 84033
84002: LD_INT 304
84004: DOUBLE
84005: EQUAL
84006: IFTRUE 84010
84008: GO 84032
84010: POP
// hHackTeleport ( unit , x , y ) ; end ;
84011: LD_VAR 0 2
84015: PPUSH
84016: LD_VAR 0 4
84020: PPUSH
84021: LD_VAR 0 5
84025: PPUSH
84026: CALL 85805 0 3
84030: GO 84033
84032: POP
// end ;
84033: LD_VAR 0 12
84037: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
84038: LD_INT 0
84040: PPUSH
84041: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
84042: LD_VAR 0 1
84046: PUSH
84047: LD_INT 1
84049: LESS
84050: PUSH
84051: LD_VAR 0 1
84055: PUSH
84056: LD_INT 3
84058: GREATER
84059: OR
84060: PUSH
84061: LD_VAR 0 5
84065: PPUSH
84066: LD_VAR 0 6
84070: PPUSH
84071: CALL_OW 428
84075: OR
84076: IFFALSE 84080
// exit ;
84078: GO 84808
// uc_side := your_side ;
84080: LD_ADDR_OWVAR 20
84084: PUSH
84085: LD_OWVAR 2
84089: ST_TO_ADDR
// uc_nation := nation ;
84090: LD_ADDR_OWVAR 21
84094: PUSH
84095: LD_VAR 0 1
84099: ST_TO_ADDR
// bc_level = 1 ;
84100: LD_ADDR_OWVAR 43
84104: PUSH
84105: LD_INT 1
84107: ST_TO_ADDR
// case btype of 1 :
84108: LD_VAR 0 2
84112: PUSH
84113: LD_INT 1
84115: DOUBLE
84116: EQUAL
84117: IFTRUE 84121
84119: GO 84132
84121: POP
// bc_type := b_depot ; 2 :
84122: LD_ADDR_OWVAR 42
84126: PUSH
84127: LD_INT 0
84129: ST_TO_ADDR
84130: GO 84752
84132: LD_INT 2
84134: DOUBLE
84135: EQUAL
84136: IFTRUE 84140
84138: GO 84151
84140: POP
// bc_type := b_warehouse ; 3 :
84141: LD_ADDR_OWVAR 42
84145: PUSH
84146: LD_INT 1
84148: ST_TO_ADDR
84149: GO 84752
84151: LD_INT 3
84153: DOUBLE
84154: EQUAL
84155: IFTRUE 84159
84157: GO 84170
84159: POP
// bc_type := b_lab ; 4 .. 9 :
84160: LD_ADDR_OWVAR 42
84164: PUSH
84165: LD_INT 6
84167: ST_TO_ADDR
84168: GO 84752
84170: LD_INT 4
84172: DOUBLE
84173: GREATEREQUAL
84174: IFFALSE 84182
84176: LD_INT 9
84178: DOUBLE
84179: LESSEQUAL
84180: IFTRUE 84184
84182: GO 84244
84184: POP
// begin bc_type := b_lab_half ;
84185: LD_ADDR_OWVAR 42
84189: PUSH
84190: LD_INT 7
84192: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
84193: LD_ADDR_OWVAR 44
84197: PUSH
84198: LD_INT 10
84200: PUSH
84201: LD_INT 11
84203: PUSH
84204: LD_INT 12
84206: PUSH
84207: LD_INT 15
84209: PUSH
84210: LD_INT 14
84212: PUSH
84213: LD_INT 13
84215: PUSH
84216: EMPTY
84217: LIST
84218: LIST
84219: LIST
84220: LIST
84221: LIST
84222: LIST
84223: PUSH
84224: LD_VAR 0 2
84228: PUSH
84229: LD_INT 3
84231: MINUS
84232: ARRAY
84233: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
84234: LD_ADDR_OWVAR 45
84238: PUSH
84239: LD_INT 9
84241: ST_TO_ADDR
// end ; 10 .. 13 :
84242: GO 84752
84244: LD_INT 10
84246: DOUBLE
84247: GREATEREQUAL
84248: IFFALSE 84256
84250: LD_INT 13
84252: DOUBLE
84253: LESSEQUAL
84254: IFTRUE 84258
84256: GO 84335
84258: POP
// begin bc_type := b_lab_full ;
84259: LD_ADDR_OWVAR 42
84263: PUSH
84264: LD_INT 8
84266: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
84267: LD_ADDR_OWVAR 44
84271: PUSH
84272: LD_INT 10
84274: PUSH
84275: LD_INT 12
84277: PUSH
84278: LD_INT 14
84280: PUSH
84281: LD_INT 13
84283: PUSH
84284: EMPTY
84285: LIST
84286: LIST
84287: LIST
84288: LIST
84289: PUSH
84290: LD_VAR 0 2
84294: PUSH
84295: LD_INT 9
84297: MINUS
84298: ARRAY
84299: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
84300: LD_ADDR_OWVAR 45
84304: PUSH
84305: LD_INT 11
84307: PUSH
84308: LD_INT 15
84310: PUSH
84311: LD_INT 12
84313: PUSH
84314: LD_INT 15
84316: PUSH
84317: EMPTY
84318: LIST
84319: LIST
84320: LIST
84321: LIST
84322: PUSH
84323: LD_VAR 0 2
84327: PUSH
84328: LD_INT 9
84330: MINUS
84331: ARRAY
84332: ST_TO_ADDR
// end ; 14 :
84333: GO 84752
84335: LD_INT 14
84337: DOUBLE
84338: EQUAL
84339: IFTRUE 84343
84341: GO 84354
84343: POP
// bc_type := b_workshop ; 15 :
84344: LD_ADDR_OWVAR 42
84348: PUSH
84349: LD_INT 2
84351: ST_TO_ADDR
84352: GO 84752
84354: LD_INT 15
84356: DOUBLE
84357: EQUAL
84358: IFTRUE 84362
84360: GO 84373
84362: POP
// bc_type := b_factory ; 16 :
84363: LD_ADDR_OWVAR 42
84367: PUSH
84368: LD_INT 3
84370: ST_TO_ADDR
84371: GO 84752
84373: LD_INT 16
84375: DOUBLE
84376: EQUAL
84377: IFTRUE 84381
84379: GO 84392
84381: POP
// bc_type := b_ext_gun ; 17 :
84382: LD_ADDR_OWVAR 42
84386: PUSH
84387: LD_INT 17
84389: ST_TO_ADDR
84390: GO 84752
84392: LD_INT 17
84394: DOUBLE
84395: EQUAL
84396: IFTRUE 84400
84398: GO 84428
84400: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
84401: LD_ADDR_OWVAR 42
84405: PUSH
84406: LD_INT 19
84408: PUSH
84409: LD_INT 23
84411: PUSH
84412: LD_INT 19
84414: PUSH
84415: EMPTY
84416: LIST
84417: LIST
84418: LIST
84419: PUSH
84420: LD_VAR 0 1
84424: ARRAY
84425: ST_TO_ADDR
84426: GO 84752
84428: LD_INT 18
84430: DOUBLE
84431: EQUAL
84432: IFTRUE 84436
84434: GO 84447
84436: POP
// bc_type := b_ext_radar ; 19 :
84437: LD_ADDR_OWVAR 42
84441: PUSH
84442: LD_INT 20
84444: ST_TO_ADDR
84445: GO 84752
84447: LD_INT 19
84449: DOUBLE
84450: EQUAL
84451: IFTRUE 84455
84453: GO 84466
84455: POP
// bc_type := b_ext_radio ; 20 :
84456: LD_ADDR_OWVAR 42
84460: PUSH
84461: LD_INT 22
84463: ST_TO_ADDR
84464: GO 84752
84466: LD_INT 20
84468: DOUBLE
84469: EQUAL
84470: IFTRUE 84474
84472: GO 84485
84474: POP
// bc_type := b_ext_siberium ; 21 :
84475: LD_ADDR_OWVAR 42
84479: PUSH
84480: LD_INT 21
84482: ST_TO_ADDR
84483: GO 84752
84485: LD_INT 21
84487: DOUBLE
84488: EQUAL
84489: IFTRUE 84493
84491: GO 84504
84493: POP
// bc_type := b_ext_computer ; 22 :
84494: LD_ADDR_OWVAR 42
84498: PUSH
84499: LD_INT 24
84501: ST_TO_ADDR
84502: GO 84752
84504: LD_INT 22
84506: DOUBLE
84507: EQUAL
84508: IFTRUE 84512
84510: GO 84523
84512: POP
// bc_type := b_ext_track ; 23 :
84513: LD_ADDR_OWVAR 42
84517: PUSH
84518: LD_INT 16
84520: ST_TO_ADDR
84521: GO 84752
84523: LD_INT 23
84525: DOUBLE
84526: EQUAL
84527: IFTRUE 84531
84529: GO 84542
84531: POP
// bc_type := b_ext_laser ; 24 :
84532: LD_ADDR_OWVAR 42
84536: PUSH
84537: LD_INT 25
84539: ST_TO_ADDR
84540: GO 84752
84542: LD_INT 24
84544: DOUBLE
84545: EQUAL
84546: IFTRUE 84550
84548: GO 84561
84550: POP
// bc_type := b_control_tower ; 25 :
84551: LD_ADDR_OWVAR 42
84555: PUSH
84556: LD_INT 36
84558: ST_TO_ADDR
84559: GO 84752
84561: LD_INT 25
84563: DOUBLE
84564: EQUAL
84565: IFTRUE 84569
84567: GO 84580
84569: POP
// bc_type := b_breastwork ; 26 :
84570: LD_ADDR_OWVAR 42
84574: PUSH
84575: LD_INT 31
84577: ST_TO_ADDR
84578: GO 84752
84580: LD_INT 26
84582: DOUBLE
84583: EQUAL
84584: IFTRUE 84588
84586: GO 84599
84588: POP
// bc_type := b_bunker ; 27 :
84589: LD_ADDR_OWVAR 42
84593: PUSH
84594: LD_INT 32
84596: ST_TO_ADDR
84597: GO 84752
84599: LD_INT 27
84601: DOUBLE
84602: EQUAL
84603: IFTRUE 84607
84605: GO 84618
84607: POP
// bc_type := b_turret ; 28 :
84608: LD_ADDR_OWVAR 42
84612: PUSH
84613: LD_INT 33
84615: ST_TO_ADDR
84616: GO 84752
84618: LD_INT 28
84620: DOUBLE
84621: EQUAL
84622: IFTRUE 84626
84624: GO 84637
84626: POP
// bc_type := b_armoury ; 29 :
84627: LD_ADDR_OWVAR 42
84631: PUSH
84632: LD_INT 4
84634: ST_TO_ADDR
84635: GO 84752
84637: LD_INT 29
84639: DOUBLE
84640: EQUAL
84641: IFTRUE 84645
84643: GO 84656
84645: POP
// bc_type := b_barracks ; 30 :
84646: LD_ADDR_OWVAR 42
84650: PUSH
84651: LD_INT 5
84653: ST_TO_ADDR
84654: GO 84752
84656: LD_INT 30
84658: DOUBLE
84659: EQUAL
84660: IFTRUE 84664
84662: GO 84675
84664: POP
// bc_type := b_solar_power ; 31 :
84665: LD_ADDR_OWVAR 42
84669: PUSH
84670: LD_INT 27
84672: ST_TO_ADDR
84673: GO 84752
84675: LD_INT 31
84677: DOUBLE
84678: EQUAL
84679: IFTRUE 84683
84681: GO 84694
84683: POP
// bc_type := b_oil_power ; 32 :
84684: LD_ADDR_OWVAR 42
84688: PUSH
84689: LD_INT 26
84691: ST_TO_ADDR
84692: GO 84752
84694: LD_INT 32
84696: DOUBLE
84697: EQUAL
84698: IFTRUE 84702
84700: GO 84713
84702: POP
// bc_type := b_siberite_power ; 33 :
84703: LD_ADDR_OWVAR 42
84707: PUSH
84708: LD_INT 28
84710: ST_TO_ADDR
84711: GO 84752
84713: LD_INT 33
84715: DOUBLE
84716: EQUAL
84717: IFTRUE 84721
84719: GO 84732
84721: POP
// bc_type := b_oil_mine ; 34 :
84722: LD_ADDR_OWVAR 42
84726: PUSH
84727: LD_INT 29
84729: ST_TO_ADDR
84730: GO 84752
84732: LD_INT 34
84734: DOUBLE
84735: EQUAL
84736: IFTRUE 84740
84738: GO 84751
84740: POP
// bc_type := b_siberite_mine ; end ;
84741: LD_ADDR_OWVAR 42
84745: PUSH
84746: LD_INT 30
84748: ST_TO_ADDR
84749: GO 84752
84751: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
84752: LD_ADDR_VAR 0 8
84756: PUSH
84757: LD_VAR 0 5
84761: PPUSH
84762: LD_VAR 0 6
84766: PPUSH
84767: LD_VAR 0 3
84771: PPUSH
84772: CALL_OW 47
84776: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
84777: LD_OWVAR 42
84781: PUSH
84782: LD_INT 32
84784: PUSH
84785: LD_INT 33
84787: PUSH
84788: EMPTY
84789: LIST
84790: LIST
84791: IN
84792: IFFALSE 84808
// PlaceWeaponTurret ( b , weapon ) ;
84794: LD_VAR 0 8
84798: PPUSH
84799: LD_VAR 0 4
84803: PPUSH
84804: CALL_OW 431
// end ;
84808: LD_VAR 0 7
84812: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
84813: LD_INT 0
84815: PPUSH
84816: PPUSH
84817: PPUSH
84818: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
84819: LD_ADDR_VAR 0 4
84823: PUSH
84824: LD_INT 22
84826: PUSH
84827: LD_OWVAR 2
84831: PUSH
84832: EMPTY
84833: LIST
84834: LIST
84835: PUSH
84836: LD_INT 2
84838: PUSH
84839: LD_INT 30
84841: PUSH
84842: LD_INT 0
84844: PUSH
84845: EMPTY
84846: LIST
84847: LIST
84848: PUSH
84849: LD_INT 30
84851: PUSH
84852: LD_INT 1
84854: PUSH
84855: EMPTY
84856: LIST
84857: LIST
84858: PUSH
84859: EMPTY
84860: LIST
84861: LIST
84862: LIST
84863: PUSH
84864: EMPTY
84865: LIST
84866: LIST
84867: PPUSH
84868: CALL_OW 69
84872: ST_TO_ADDR
// if not tmp then
84873: LD_VAR 0 4
84877: NOT
84878: IFFALSE 84882
// exit ;
84880: GO 84941
// for i in tmp do
84882: LD_ADDR_VAR 0 2
84886: PUSH
84887: LD_VAR 0 4
84891: PUSH
84892: FOR_IN
84893: IFFALSE 84939
// for j = 1 to 3 do
84895: LD_ADDR_VAR 0 3
84899: PUSH
84900: DOUBLE
84901: LD_INT 1
84903: DEC
84904: ST_TO_ADDR
84905: LD_INT 3
84907: PUSH
84908: FOR_TO
84909: IFFALSE 84935
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
84911: LD_VAR 0 2
84915: PPUSH
84916: CALL_OW 274
84920: PPUSH
84921: LD_VAR 0 3
84925: PPUSH
84926: LD_INT 99999
84928: PPUSH
84929: CALL_OW 277
84933: GO 84908
84935: POP
84936: POP
84937: GO 84892
84939: POP
84940: POP
// end ;
84941: LD_VAR 0 1
84945: RET
// export function hHackSetLevel10 ; var i , j ; begin
84946: LD_INT 0
84948: PPUSH
84949: PPUSH
84950: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
84951: LD_ADDR_VAR 0 2
84955: PUSH
84956: LD_INT 21
84958: PUSH
84959: LD_INT 1
84961: PUSH
84962: EMPTY
84963: LIST
84964: LIST
84965: PPUSH
84966: CALL_OW 69
84970: PUSH
84971: FOR_IN
84972: IFFALSE 85024
// if IsSelected ( i ) then
84974: LD_VAR 0 2
84978: PPUSH
84979: CALL_OW 306
84983: IFFALSE 85022
// begin for j := 1 to 4 do
84985: LD_ADDR_VAR 0 3
84989: PUSH
84990: DOUBLE
84991: LD_INT 1
84993: DEC
84994: ST_TO_ADDR
84995: LD_INT 4
84997: PUSH
84998: FOR_TO
84999: IFFALSE 85020
// SetSkill ( i , j , 10 ) ;
85001: LD_VAR 0 2
85005: PPUSH
85006: LD_VAR 0 3
85010: PPUSH
85011: LD_INT 10
85013: PPUSH
85014: CALL_OW 237
85018: GO 84998
85020: POP
85021: POP
// end ;
85022: GO 84971
85024: POP
85025: POP
// end ;
85026: LD_VAR 0 1
85030: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
85031: LD_INT 0
85033: PPUSH
85034: PPUSH
85035: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
85036: LD_ADDR_VAR 0 2
85040: PUSH
85041: LD_INT 22
85043: PUSH
85044: LD_OWVAR 2
85048: PUSH
85049: EMPTY
85050: LIST
85051: LIST
85052: PUSH
85053: LD_INT 21
85055: PUSH
85056: LD_INT 1
85058: PUSH
85059: EMPTY
85060: LIST
85061: LIST
85062: PUSH
85063: EMPTY
85064: LIST
85065: LIST
85066: PPUSH
85067: CALL_OW 69
85071: PUSH
85072: FOR_IN
85073: IFFALSE 85114
// begin for j := 1 to 4 do
85075: LD_ADDR_VAR 0 3
85079: PUSH
85080: DOUBLE
85081: LD_INT 1
85083: DEC
85084: ST_TO_ADDR
85085: LD_INT 4
85087: PUSH
85088: FOR_TO
85089: IFFALSE 85110
// SetSkill ( i , j , 10 ) ;
85091: LD_VAR 0 2
85095: PPUSH
85096: LD_VAR 0 3
85100: PPUSH
85101: LD_INT 10
85103: PPUSH
85104: CALL_OW 237
85108: GO 85088
85110: POP
85111: POP
// end ;
85112: GO 85072
85114: POP
85115: POP
// end ;
85116: LD_VAR 0 1
85120: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
85121: LD_INT 0
85123: PPUSH
// uc_side := your_side ;
85124: LD_ADDR_OWVAR 20
85128: PUSH
85129: LD_OWVAR 2
85133: ST_TO_ADDR
// uc_nation := nation ;
85134: LD_ADDR_OWVAR 21
85138: PUSH
85139: LD_VAR 0 1
85143: ST_TO_ADDR
// InitHc ;
85144: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
85148: LD_INT 0
85150: PPUSH
85151: LD_VAR 0 2
85155: PPUSH
85156: LD_VAR 0 3
85160: PPUSH
85161: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
85165: LD_VAR 0 4
85169: PPUSH
85170: LD_VAR 0 5
85174: PPUSH
85175: CALL_OW 428
85179: PUSH
85180: LD_INT 0
85182: EQUAL
85183: IFFALSE 85207
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
85185: CALL_OW 44
85189: PPUSH
85190: LD_VAR 0 4
85194: PPUSH
85195: LD_VAR 0 5
85199: PPUSH
85200: LD_INT 1
85202: PPUSH
85203: CALL_OW 48
// end ;
85207: LD_VAR 0 6
85211: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
85212: LD_INT 0
85214: PPUSH
85215: PPUSH
// uc_side := your_side ;
85216: LD_ADDR_OWVAR 20
85220: PUSH
85221: LD_OWVAR 2
85225: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
85226: LD_VAR 0 1
85230: PUSH
85231: LD_INT 1
85233: PUSH
85234: LD_INT 2
85236: PUSH
85237: LD_INT 3
85239: PUSH
85240: LD_INT 4
85242: PUSH
85243: LD_INT 5
85245: PUSH
85246: EMPTY
85247: LIST
85248: LIST
85249: LIST
85250: LIST
85251: LIST
85252: IN
85253: IFFALSE 85265
// uc_nation := nation_american else
85255: LD_ADDR_OWVAR 21
85259: PUSH
85260: LD_INT 1
85262: ST_TO_ADDR
85263: GO 85308
// if chassis in [ 11 , 12 , 13 , 14 ] then
85265: LD_VAR 0 1
85269: PUSH
85270: LD_INT 11
85272: PUSH
85273: LD_INT 12
85275: PUSH
85276: LD_INT 13
85278: PUSH
85279: LD_INT 14
85281: PUSH
85282: EMPTY
85283: LIST
85284: LIST
85285: LIST
85286: LIST
85287: IN
85288: IFFALSE 85300
// uc_nation := nation_arabian else
85290: LD_ADDR_OWVAR 21
85294: PUSH
85295: LD_INT 2
85297: ST_TO_ADDR
85298: GO 85308
// uc_nation := nation_russian ;
85300: LD_ADDR_OWVAR 21
85304: PUSH
85305: LD_INT 3
85307: ST_TO_ADDR
// vc_chassis := chassis ;
85308: LD_ADDR_OWVAR 37
85312: PUSH
85313: LD_VAR 0 1
85317: ST_TO_ADDR
// vc_engine := engine ;
85318: LD_ADDR_OWVAR 39
85322: PUSH
85323: LD_VAR 0 2
85327: ST_TO_ADDR
// vc_control := control ;
85328: LD_ADDR_OWVAR 38
85332: PUSH
85333: LD_VAR 0 3
85337: ST_TO_ADDR
// vc_weapon := weapon ;
85338: LD_ADDR_OWVAR 40
85342: PUSH
85343: LD_VAR 0 4
85347: ST_TO_ADDR
// un := CreateVehicle ;
85348: LD_ADDR_VAR 0 8
85352: PUSH
85353: CALL_OW 45
85357: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
85358: LD_VAR 0 8
85362: PPUSH
85363: LD_INT 0
85365: PPUSH
85366: LD_INT 5
85368: PPUSH
85369: CALL_OW 12
85373: PPUSH
85374: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
85378: LD_VAR 0 8
85382: PPUSH
85383: LD_VAR 0 5
85387: PPUSH
85388: LD_VAR 0 6
85392: PPUSH
85393: LD_INT 1
85395: PPUSH
85396: CALL_OW 48
// end ;
85400: LD_VAR 0 7
85404: RET
// export hInvincible ; every 1 do
85405: GO 85407
85407: DISABLE
// hInvincible := [ ] ;
85408: LD_ADDR_EXP 121
85412: PUSH
85413: EMPTY
85414: ST_TO_ADDR
85415: END
// every 10 do var i ;
85416: GO 85418
85418: DISABLE
85419: LD_INT 0
85421: PPUSH
// begin enable ;
85422: ENABLE
// if not hInvincible then
85423: LD_EXP 121
85427: NOT
85428: IFFALSE 85432
// exit ;
85430: GO 85476
// for i in hInvincible do
85432: LD_ADDR_VAR 0 1
85436: PUSH
85437: LD_EXP 121
85441: PUSH
85442: FOR_IN
85443: IFFALSE 85474
// if GetLives ( i ) < 1000 then
85445: LD_VAR 0 1
85449: PPUSH
85450: CALL_OW 256
85454: PUSH
85455: LD_INT 1000
85457: LESS
85458: IFFALSE 85472
// SetLives ( i , 1000 ) ;
85460: LD_VAR 0 1
85464: PPUSH
85465: LD_INT 1000
85467: PPUSH
85468: CALL_OW 234
85472: GO 85442
85474: POP
85475: POP
// end ;
85476: PPOPN 1
85478: END
// export function hHackInvincible ; var i ; begin
85479: LD_INT 0
85481: PPUSH
85482: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
85483: LD_ADDR_VAR 0 2
85487: PUSH
85488: LD_INT 2
85490: PUSH
85491: LD_INT 21
85493: PUSH
85494: LD_INT 1
85496: PUSH
85497: EMPTY
85498: LIST
85499: LIST
85500: PUSH
85501: LD_INT 21
85503: PUSH
85504: LD_INT 2
85506: PUSH
85507: EMPTY
85508: LIST
85509: LIST
85510: PUSH
85511: EMPTY
85512: LIST
85513: LIST
85514: LIST
85515: PPUSH
85516: CALL_OW 69
85520: PUSH
85521: FOR_IN
85522: IFFALSE 85583
// if IsSelected ( i ) then
85524: LD_VAR 0 2
85528: PPUSH
85529: CALL_OW 306
85533: IFFALSE 85581
// begin if i in hInvincible then
85535: LD_VAR 0 2
85539: PUSH
85540: LD_EXP 121
85544: IN
85545: IFFALSE 85565
// hInvincible := hInvincible diff i else
85547: LD_ADDR_EXP 121
85551: PUSH
85552: LD_EXP 121
85556: PUSH
85557: LD_VAR 0 2
85561: DIFF
85562: ST_TO_ADDR
85563: GO 85581
// hInvincible := hInvincible union i ;
85565: LD_ADDR_EXP 121
85569: PUSH
85570: LD_EXP 121
85574: PUSH
85575: LD_VAR 0 2
85579: UNION
85580: ST_TO_ADDR
// end ;
85581: GO 85521
85583: POP
85584: POP
// end ;
85585: LD_VAR 0 1
85589: RET
// export function hHackInvisible ; var i , j ; begin
85590: LD_INT 0
85592: PPUSH
85593: PPUSH
85594: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
85595: LD_ADDR_VAR 0 2
85599: PUSH
85600: LD_INT 21
85602: PUSH
85603: LD_INT 1
85605: PUSH
85606: EMPTY
85607: LIST
85608: LIST
85609: PPUSH
85610: CALL_OW 69
85614: PUSH
85615: FOR_IN
85616: IFFALSE 85640
// if IsSelected ( i ) then
85618: LD_VAR 0 2
85622: PPUSH
85623: CALL_OW 306
85627: IFFALSE 85638
// ComForceInvisible ( i ) ;
85629: LD_VAR 0 2
85633: PPUSH
85634: CALL_OW 496
85638: GO 85615
85640: POP
85641: POP
// end ;
85642: LD_VAR 0 1
85646: RET
// export function hHackChangeYourSide ; begin
85647: LD_INT 0
85649: PPUSH
// if your_side = 8 then
85650: LD_OWVAR 2
85654: PUSH
85655: LD_INT 8
85657: EQUAL
85658: IFFALSE 85670
// your_side := 0 else
85660: LD_ADDR_OWVAR 2
85664: PUSH
85665: LD_INT 0
85667: ST_TO_ADDR
85668: GO 85684
// your_side := your_side + 1 ;
85670: LD_ADDR_OWVAR 2
85674: PUSH
85675: LD_OWVAR 2
85679: PUSH
85680: LD_INT 1
85682: PLUS
85683: ST_TO_ADDR
// end ;
85684: LD_VAR 0 1
85688: RET
// export function hHackChangeUnitSide ; var i , j ; begin
85689: LD_INT 0
85691: PPUSH
85692: PPUSH
85693: PPUSH
// for i in all_units do
85694: LD_ADDR_VAR 0 2
85698: PUSH
85699: LD_OWVAR 3
85703: PUSH
85704: FOR_IN
85705: IFFALSE 85783
// if IsSelected ( i ) then
85707: LD_VAR 0 2
85711: PPUSH
85712: CALL_OW 306
85716: IFFALSE 85781
// begin j := GetSide ( i ) ;
85718: LD_ADDR_VAR 0 3
85722: PUSH
85723: LD_VAR 0 2
85727: PPUSH
85728: CALL_OW 255
85732: ST_TO_ADDR
// if j = 8 then
85733: LD_VAR 0 3
85737: PUSH
85738: LD_INT 8
85740: EQUAL
85741: IFFALSE 85753
// j := 0 else
85743: LD_ADDR_VAR 0 3
85747: PUSH
85748: LD_INT 0
85750: ST_TO_ADDR
85751: GO 85767
// j := j + 1 ;
85753: LD_ADDR_VAR 0 3
85757: PUSH
85758: LD_VAR 0 3
85762: PUSH
85763: LD_INT 1
85765: PLUS
85766: ST_TO_ADDR
// SetSide ( i , j ) ;
85767: LD_VAR 0 2
85771: PPUSH
85772: LD_VAR 0 3
85776: PPUSH
85777: CALL_OW 235
// end ;
85781: GO 85704
85783: POP
85784: POP
// end ;
85785: LD_VAR 0 1
85789: RET
// export function hHackFog ; begin
85790: LD_INT 0
85792: PPUSH
// FogOff ( true ) ;
85793: LD_INT 1
85795: PPUSH
85796: CALL_OW 344
// end ;
85800: LD_VAR 0 1
85804: RET
// export function hHackTeleport ( unit , x , y ) ; begin
85805: LD_INT 0
85807: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
85808: LD_VAR 0 1
85812: PPUSH
85813: LD_VAR 0 2
85817: PPUSH
85818: LD_VAR 0 3
85822: PPUSH
85823: LD_INT 1
85825: PPUSH
85826: LD_INT 1
85828: PPUSH
85829: CALL_OW 483
// CenterOnXY ( x , y ) ;
85833: LD_VAR 0 2
85837: PPUSH
85838: LD_VAR 0 3
85842: PPUSH
85843: CALL_OW 84
// end ;
85847: LD_VAR 0 4
85851: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
85852: LD_INT 0
85854: PPUSH
85855: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
85856: LD_VAR 0 1
85860: NOT
85861: PUSH
85862: LD_VAR 0 2
85866: PPUSH
85867: LD_VAR 0 3
85871: PPUSH
85872: CALL_OW 488
85876: NOT
85877: OR
85878: PUSH
85879: LD_VAR 0 1
85883: PPUSH
85884: CALL_OW 266
85888: PUSH
85889: LD_INT 3
85891: NONEQUAL
85892: PUSH
85893: LD_VAR 0 1
85897: PPUSH
85898: CALL_OW 247
85902: PUSH
85903: LD_INT 1
85905: EQUAL
85906: NOT
85907: AND
85908: OR
85909: IFFALSE 85913
// exit ;
85911: GO 86062
// if GetType ( factory ) = unit_human then
85913: LD_VAR 0 1
85917: PPUSH
85918: CALL_OW 247
85922: PUSH
85923: LD_INT 1
85925: EQUAL
85926: IFFALSE 85943
// factory := IsInUnit ( factory ) ;
85928: LD_ADDR_VAR 0 1
85932: PUSH
85933: LD_VAR 0 1
85937: PPUSH
85938: CALL_OW 310
85942: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
85943: LD_VAR 0 1
85947: PPUSH
85948: CALL_OW 266
85952: PUSH
85953: LD_INT 3
85955: NONEQUAL
85956: IFFALSE 85960
// exit ;
85958: GO 86062
// if HexInfo ( x , y ) = factory then
85960: LD_VAR 0 2
85964: PPUSH
85965: LD_VAR 0 3
85969: PPUSH
85970: CALL_OW 428
85974: PUSH
85975: LD_VAR 0 1
85979: EQUAL
85980: IFFALSE 86007
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
85982: LD_ADDR_EXP 122
85986: PUSH
85987: LD_EXP 122
85991: PPUSH
85992: LD_VAR 0 1
85996: PPUSH
85997: LD_INT 0
85999: PPUSH
86000: CALL_OW 1
86004: ST_TO_ADDR
86005: GO 86058
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
86007: LD_ADDR_EXP 122
86011: PUSH
86012: LD_EXP 122
86016: PPUSH
86017: LD_VAR 0 1
86021: PPUSH
86022: LD_VAR 0 1
86026: PPUSH
86027: CALL_OW 255
86031: PUSH
86032: LD_VAR 0 1
86036: PUSH
86037: LD_VAR 0 2
86041: PUSH
86042: LD_VAR 0 3
86046: PUSH
86047: EMPTY
86048: LIST
86049: LIST
86050: LIST
86051: LIST
86052: PPUSH
86053: CALL_OW 1
86057: ST_TO_ADDR
// UpdateFactoryWaypoints ;
86058: CALL 86067 0 0
// end ;
86062: LD_VAR 0 4
86066: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
86067: LD_INT 0
86069: PPUSH
86070: PPUSH
86071: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
86072: LD_STRING resetFactoryWaypoint();
86074: PPUSH
86075: CALL_OW 559
// if factoryWaypoints then
86079: LD_EXP 122
86083: IFFALSE 86209
// begin list := PrepareArray ( factoryWaypoints ) ;
86085: LD_ADDR_VAR 0 3
86089: PUSH
86090: LD_EXP 122
86094: PPUSH
86095: CALL 70897 0 1
86099: ST_TO_ADDR
// for i := 1 to list do
86100: LD_ADDR_VAR 0 2
86104: PUSH
86105: DOUBLE
86106: LD_INT 1
86108: DEC
86109: ST_TO_ADDR
86110: LD_VAR 0 3
86114: PUSH
86115: FOR_TO
86116: IFFALSE 86207
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
86118: LD_STRING setFactoryWaypointXY(
86120: PUSH
86121: LD_VAR 0 3
86125: PUSH
86126: LD_VAR 0 2
86130: ARRAY
86131: PUSH
86132: LD_INT 1
86134: ARRAY
86135: STR
86136: PUSH
86137: LD_STRING ,
86139: STR
86140: PUSH
86141: LD_VAR 0 3
86145: PUSH
86146: LD_VAR 0 2
86150: ARRAY
86151: PUSH
86152: LD_INT 2
86154: ARRAY
86155: STR
86156: PUSH
86157: LD_STRING ,
86159: STR
86160: PUSH
86161: LD_VAR 0 3
86165: PUSH
86166: LD_VAR 0 2
86170: ARRAY
86171: PUSH
86172: LD_INT 3
86174: ARRAY
86175: STR
86176: PUSH
86177: LD_STRING ,
86179: STR
86180: PUSH
86181: LD_VAR 0 3
86185: PUSH
86186: LD_VAR 0 2
86190: ARRAY
86191: PUSH
86192: LD_INT 4
86194: ARRAY
86195: STR
86196: PUSH
86197: LD_STRING )
86199: STR
86200: PPUSH
86201: CALL_OW 559
86205: GO 86115
86207: POP
86208: POP
// end ; end ;
86209: LD_VAR 0 1
86213: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
86214: LD_INT 0
86216: PPUSH
// if HexInfo ( x , y ) = warehouse then
86217: LD_VAR 0 2
86221: PPUSH
86222: LD_VAR 0 3
86226: PPUSH
86227: CALL_OW 428
86231: PUSH
86232: LD_VAR 0 1
86236: EQUAL
86237: IFFALSE 86264
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
86239: LD_ADDR_EXP 123
86243: PUSH
86244: LD_EXP 123
86248: PPUSH
86249: LD_VAR 0 1
86253: PPUSH
86254: LD_INT 0
86256: PPUSH
86257: CALL_OW 1
86261: ST_TO_ADDR
86262: GO 86315
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
86264: LD_ADDR_EXP 123
86268: PUSH
86269: LD_EXP 123
86273: PPUSH
86274: LD_VAR 0 1
86278: PPUSH
86279: LD_VAR 0 1
86283: PPUSH
86284: CALL_OW 255
86288: PUSH
86289: LD_VAR 0 1
86293: PUSH
86294: LD_VAR 0 2
86298: PUSH
86299: LD_VAR 0 3
86303: PUSH
86304: EMPTY
86305: LIST
86306: LIST
86307: LIST
86308: LIST
86309: PPUSH
86310: CALL_OW 1
86314: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
86315: CALL 86324 0 0
// end ;
86319: LD_VAR 0 4
86323: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
86324: LD_INT 0
86326: PPUSH
86327: PPUSH
86328: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
86329: LD_STRING resetWarehouseGatheringPoints();
86331: PPUSH
86332: CALL_OW 559
// if warehouseGatheringPoints then
86336: LD_EXP 123
86340: IFFALSE 86466
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
86342: LD_ADDR_VAR 0 3
86346: PUSH
86347: LD_EXP 123
86351: PPUSH
86352: CALL 70897 0 1
86356: ST_TO_ADDR
// for i := 1 to list do
86357: LD_ADDR_VAR 0 2
86361: PUSH
86362: DOUBLE
86363: LD_INT 1
86365: DEC
86366: ST_TO_ADDR
86367: LD_VAR 0 3
86371: PUSH
86372: FOR_TO
86373: IFFALSE 86464
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
86375: LD_STRING setWarehouseGatheringPointXY(
86377: PUSH
86378: LD_VAR 0 3
86382: PUSH
86383: LD_VAR 0 2
86387: ARRAY
86388: PUSH
86389: LD_INT 1
86391: ARRAY
86392: STR
86393: PUSH
86394: LD_STRING ,
86396: STR
86397: PUSH
86398: LD_VAR 0 3
86402: PUSH
86403: LD_VAR 0 2
86407: ARRAY
86408: PUSH
86409: LD_INT 2
86411: ARRAY
86412: STR
86413: PUSH
86414: LD_STRING ,
86416: STR
86417: PUSH
86418: LD_VAR 0 3
86422: PUSH
86423: LD_VAR 0 2
86427: ARRAY
86428: PUSH
86429: LD_INT 3
86431: ARRAY
86432: STR
86433: PUSH
86434: LD_STRING ,
86436: STR
86437: PUSH
86438: LD_VAR 0 3
86442: PUSH
86443: LD_VAR 0 2
86447: ARRAY
86448: PUSH
86449: LD_INT 4
86451: ARRAY
86452: STR
86453: PUSH
86454: LD_STRING )
86456: STR
86457: PPUSH
86458: CALL_OW 559
86462: GO 86372
86464: POP
86465: POP
// end ; end ;
86466: LD_VAR 0 1
86470: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
86471: LD_EXP 123
86475: IFFALSE 87160
86477: GO 86479
86479: DISABLE
86480: LD_INT 0
86482: PPUSH
86483: PPUSH
86484: PPUSH
86485: PPUSH
86486: PPUSH
86487: PPUSH
86488: PPUSH
86489: PPUSH
86490: PPUSH
// begin enable ;
86491: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
86492: LD_ADDR_VAR 0 3
86496: PUSH
86497: LD_EXP 123
86501: PPUSH
86502: CALL 70897 0 1
86506: ST_TO_ADDR
// if not list then
86507: LD_VAR 0 3
86511: NOT
86512: IFFALSE 86516
// exit ;
86514: GO 87160
// for i := 1 to list do
86516: LD_ADDR_VAR 0 1
86520: PUSH
86521: DOUBLE
86522: LD_INT 1
86524: DEC
86525: ST_TO_ADDR
86526: LD_VAR 0 3
86530: PUSH
86531: FOR_TO
86532: IFFALSE 87158
// begin depot := list [ i ] [ 2 ] ;
86534: LD_ADDR_VAR 0 8
86538: PUSH
86539: LD_VAR 0 3
86543: PUSH
86544: LD_VAR 0 1
86548: ARRAY
86549: PUSH
86550: LD_INT 2
86552: ARRAY
86553: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
86554: LD_ADDR_VAR 0 5
86558: PUSH
86559: LD_VAR 0 3
86563: PUSH
86564: LD_VAR 0 1
86568: ARRAY
86569: PUSH
86570: LD_INT 1
86572: ARRAY
86573: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
86574: LD_VAR 0 8
86578: PPUSH
86579: CALL_OW 301
86583: PUSH
86584: LD_VAR 0 5
86588: PUSH
86589: LD_VAR 0 8
86593: PPUSH
86594: CALL_OW 255
86598: NONEQUAL
86599: OR
86600: IFFALSE 86629
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
86602: LD_ADDR_EXP 123
86606: PUSH
86607: LD_EXP 123
86611: PPUSH
86612: LD_VAR 0 8
86616: PPUSH
86617: LD_INT 0
86619: PPUSH
86620: CALL_OW 1
86624: ST_TO_ADDR
// exit ;
86625: POP
86626: POP
86627: GO 87160
// end ; x := list [ i ] [ 3 ] ;
86629: LD_ADDR_VAR 0 6
86633: PUSH
86634: LD_VAR 0 3
86638: PUSH
86639: LD_VAR 0 1
86643: ARRAY
86644: PUSH
86645: LD_INT 3
86647: ARRAY
86648: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
86649: LD_ADDR_VAR 0 7
86653: PUSH
86654: LD_VAR 0 3
86658: PUSH
86659: LD_VAR 0 1
86663: ARRAY
86664: PUSH
86665: LD_INT 4
86667: ARRAY
86668: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
86669: LD_ADDR_VAR 0 9
86673: PUSH
86674: LD_VAR 0 6
86678: PPUSH
86679: LD_VAR 0 7
86683: PPUSH
86684: LD_INT 16
86686: PPUSH
86687: CALL 69485 0 3
86691: ST_TO_ADDR
// if not cratesNearbyPoint then
86692: LD_VAR 0 9
86696: NOT
86697: IFFALSE 86703
// exit ;
86699: POP
86700: POP
86701: GO 87160
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
86703: LD_ADDR_VAR 0 4
86707: PUSH
86708: LD_INT 22
86710: PUSH
86711: LD_VAR 0 5
86715: PUSH
86716: EMPTY
86717: LIST
86718: LIST
86719: PUSH
86720: LD_INT 3
86722: PUSH
86723: LD_INT 60
86725: PUSH
86726: EMPTY
86727: LIST
86728: PUSH
86729: EMPTY
86730: LIST
86731: LIST
86732: PUSH
86733: LD_INT 91
86735: PUSH
86736: LD_VAR 0 8
86740: PUSH
86741: LD_INT 6
86743: PUSH
86744: EMPTY
86745: LIST
86746: LIST
86747: LIST
86748: PUSH
86749: LD_INT 2
86751: PUSH
86752: LD_INT 25
86754: PUSH
86755: LD_INT 2
86757: PUSH
86758: EMPTY
86759: LIST
86760: LIST
86761: PUSH
86762: LD_INT 25
86764: PUSH
86765: LD_INT 16
86767: PUSH
86768: EMPTY
86769: LIST
86770: LIST
86771: PUSH
86772: EMPTY
86773: LIST
86774: LIST
86775: LIST
86776: PUSH
86777: EMPTY
86778: LIST
86779: LIST
86780: LIST
86781: LIST
86782: PPUSH
86783: CALL_OW 69
86787: PUSH
86788: LD_VAR 0 8
86792: PPUSH
86793: CALL_OW 313
86797: PPUSH
86798: LD_INT 3
86800: PUSH
86801: LD_INT 60
86803: PUSH
86804: EMPTY
86805: LIST
86806: PUSH
86807: EMPTY
86808: LIST
86809: LIST
86810: PUSH
86811: LD_INT 2
86813: PUSH
86814: LD_INT 25
86816: PUSH
86817: LD_INT 2
86819: PUSH
86820: EMPTY
86821: LIST
86822: LIST
86823: PUSH
86824: LD_INT 25
86826: PUSH
86827: LD_INT 16
86829: PUSH
86830: EMPTY
86831: LIST
86832: LIST
86833: PUSH
86834: EMPTY
86835: LIST
86836: LIST
86837: LIST
86838: PUSH
86839: EMPTY
86840: LIST
86841: LIST
86842: PPUSH
86843: CALL_OW 72
86847: UNION
86848: ST_TO_ADDR
// if tmp then
86849: LD_VAR 0 4
86853: IFFALSE 86933
// begin tmp := ShrinkArray ( tmp , 3 ) ;
86855: LD_ADDR_VAR 0 4
86859: PUSH
86860: LD_VAR 0 4
86864: PPUSH
86865: LD_INT 3
86867: PPUSH
86868: CALL 67454 0 2
86872: ST_TO_ADDR
// for j in tmp do
86873: LD_ADDR_VAR 0 2
86877: PUSH
86878: LD_VAR 0 4
86882: PUSH
86883: FOR_IN
86884: IFFALSE 86927
// begin if IsInUnit ( j ) then
86886: LD_VAR 0 2
86890: PPUSH
86891: CALL_OW 310
86895: IFFALSE 86906
// ComExit ( j ) ;
86897: LD_VAR 0 2
86901: PPUSH
86902: CALL 67537 0 1
// AddComCollect ( j , x , y ) ;
86906: LD_VAR 0 2
86910: PPUSH
86911: LD_VAR 0 6
86915: PPUSH
86916: LD_VAR 0 7
86920: PPUSH
86921: CALL_OW 177
// end ;
86925: GO 86883
86927: POP
86928: POP
// exit ;
86929: POP
86930: POP
86931: GO 87160
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
86933: LD_ADDR_VAR 0 4
86937: PUSH
86938: LD_INT 22
86940: PUSH
86941: LD_VAR 0 5
86945: PUSH
86946: EMPTY
86947: LIST
86948: LIST
86949: PUSH
86950: LD_INT 91
86952: PUSH
86953: LD_VAR 0 8
86957: PUSH
86958: LD_INT 8
86960: PUSH
86961: EMPTY
86962: LIST
86963: LIST
86964: LIST
86965: PUSH
86966: LD_INT 2
86968: PUSH
86969: LD_INT 34
86971: PUSH
86972: LD_INT 12
86974: PUSH
86975: EMPTY
86976: LIST
86977: LIST
86978: PUSH
86979: LD_INT 34
86981: PUSH
86982: LD_INT 51
86984: PUSH
86985: EMPTY
86986: LIST
86987: LIST
86988: PUSH
86989: LD_INT 34
86991: PUSH
86992: LD_INT 32
86994: PUSH
86995: EMPTY
86996: LIST
86997: LIST
86998: PUSH
86999: LD_INT 34
87001: PUSH
87002: LD_INT 89
87004: PUSH
87005: EMPTY
87006: LIST
87007: LIST
87008: PUSH
87009: EMPTY
87010: LIST
87011: LIST
87012: LIST
87013: LIST
87014: LIST
87015: PUSH
87016: EMPTY
87017: LIST
87018: LIST
87019: LIST
87020: PPUSH
87021: CALL_OW 69
87025: ST_TO_ADDR
// if tmp then
87026: LD_VAR 0 4
87030: IFFALSE 87156
// begin for j in tmp do
87032: LD_ADDR_VAR 0 2
87036: PUSH
87037: LD_VAR 0 4
87041: PUSH
87042: FOR_IN
87043: IFFALSE 87154
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
87045: LD_VAR 0 2
87049: PPUSH
87050: CALL_OW 262
87054: PUSH
87055: LD_INT 3
87057: EQUAL
87058: PUSH
87059: LD_VAR 0 2
87063: PPUSH
87064: CALL_OW 261
87068: PUSH
87069: LD_INT 20
87071: GREATER
87072: OR
87073: PUSH
87074: LD_VAR 0 2
87078: PPUSH
87079: CALL_OW 314
87083: NOT
87084: AND
87085: PUSH
87086: LD_VAR 0 2
87090: PPUSH
87091: CALL_OW 263
87095: PUSH
87096: LD_INT 1
87098: NONEQUAL
87099: PUSH
87100: LD_VAR 0 2
87104: PPUSH
87105: CALL_OW 311
87109: OR
87110: AND
87111: IFFALSE 87152
// begin ComCollect ( j , x , y ) ;
87113: LD_VAR 0 2
87117: PPUSH
87118: LD_VAR 0 6
87122: PPUSH
87123: LD_VAR 0 7
87127: PPUSH
87128: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
87132: LD_VAR 0 2
87136: PPUSH
87137: LD_VAR 0 8
87141: PPUSH
87142: CALL_OW 172
// exit ;
87146: POP
87147: POP
87148: POP
87149: POP
87150: GO 87160
// end ;
87152: GO 87042
87154: POP
87155: POP
// end ; end ;
87156: GO 86531
87158: POP
87159: POP
// end ; end_of_file
87160: PPOPN 9
87162: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
87163: LD_VAR 0 1
87167: PUSH
87168: LD_INT 200
87170: DOUBLE
87171: GREATEREQUAL
87172: IFFALSE 87180
87174: LD_INT 299
87176: DOUBLE
87177: LESSEQUAL
87178: IFTRUE 87182
87180: GO 87214
87182: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
87183: LD_VAR 0 1
87187: PPUSH
87188: LD_VAR 0 2
87192: PPUSH
87193: LD_VAR 0 3
87197: PPUSH
87198: LD_VAR 0 4
87202: PPUSH
87203: LD_VAR 0 5
87207: PPUSH
87208: CALL 87702 0 5
87212: GO 87291
87214: LD_INT 300
87216: DOUBLE
87217: GREATEREQUAL
87218: IFFALSE 87226
87220: LD_INT 399
87222: DOUBLE
87223: LESSEQUAL
87224: IFTRUE 87228
87226: GO 87290
87228: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
87229: LD_VAR 0 1
87233: PPUSH
87234: LD_VAR 0 2
87238: PPUSH
87239: LD_VAR 0 3
87243: PPUSH
87244: LD_VAR 0 4
87248: PPUSH
87249: LD_VAR 0 5
87253: PPUSH
87254: LD_VAR 0 6
87258: PPUSH
87259: LD_VAR 0 7
87263: PPUSH
87264: LD_VAR 0 8
87268: PPUSH
87269: LD_VAR 0 9
87273: PPUSH
87274: LD_VAR 0 10
87278: PPUSH
87279: LD_VAR 0 11
87283: PPUSH
87284: CALL 83864 0 11
87288: GO 87291
87290: POP
// end ;
87291: PPOPN 11
87293: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
87294: LD_VAR 0 1
87298: PPUSH
87299: LD_VAR 0 2
87303: PPUSH
87304: LD_VAR 0 3
87308: PPUSH
87309: LD_VAR 0 4
87313: PPUSH
87314: LD_VAR 0 5
87318: PPUSH
87319: CALL 87438 0 5
// end ; end_of_file
87323: PPOPN 5
87325: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
87326: LD_INT 0
87328: PPUSH
87329: PPUSH
87330: PPUSH
87331: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
87332: LD_VAR 0 1
87336: PPUSH
87337: CALL_OW 264
87341: PUSH
87342: LD_INT 91
87344: EQUAL
87345: IFFALSE 87417
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
87347: LD_INT 68
87349: PPUSH
87350: LD_VAR 0 1
87354: PPUSH
87355: CALL_OW 255
87359: PPUSH
87360: CALL_OW 321
87364: PUSH
87365: LD_INT 2
87367: EQUAL
87368: IFFALSE 87380
// eff := 70 else
87370: LD_ADDR_VAR 0 4
87374: PUSH
87375: LD_INT 70
87377: ST_TO_ADDR
87378: GO 87388
// eff := 30 ;
87380: LD_ADDR_VAR 0 4
87384: PUSH
87385: LD_INT 30
87387: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
87388: LD_VAR 0 1
87392: PPUSH
87393: CALL_OW 250
87397: PPUSH
87398: LD_VAR 0 1
87402: PPUSH
87403: CALL_OW 251
87407: PPUSH
87408: LD_VAR 0 4
87412: PPUSH
87413: CALL_OW 495
// end ; end ;
87417: LD_VAR 0 2
87421: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
87422: LD_INT 0
87424: PPUSH
// end ;
87425: LD_VAR 0 4
87429: RET
// export function SOS_Command ( cmd ) ; begin
87430: LD_INT 0
87432: PPUSH
// end ;
87433: LD_VAR 0 2
87437: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
87438: LD_INT 0
87440: PPUSH
// end ;
87441: LD_VAR 0 6
87445: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
87446: LD_INT 0
87448: PPUSH
87449: PPUSH
// if not vehicle or not factory then
87450: LD_VAR 0 1
87454: NOT
87455: PUSH
87456: LD_VAR 0 2
87460: NOT
87461: OR
87462: IFFALSE 87466
// exit ;
87464: GO 87697
// if factoryWaypoints >= factory then
87466: LD_EXP 122
87470: PUSH
87471: LD_VAR 0 2
87475: GREATEREQUAL
87476: IFFALSE 87697
// if factoryWaypoints [ factory ] then
87478: LD_EXP 122
87482: PUSH
87483: LD_VAR 0 2
87487: ARRAY
87488: IFFALSE 87697
// begin if GetControl ( vehicle ) = control_manual then
87490: LD_VAR 0 1
87494: PPUSH
87495: CALL_OW 263
87499: PUSH
87500: LD_INT 1
87502: EQUAL
87503: IFFALSE 87584
// begin driver := IsDrivenBy ( vehicle ) ;
87505: LD_ADDR_VAR 0 4
87509: PUSH
87510: LD_VAR 0 1
87514: PPUSH
87515: CALL_OW 311
87519: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
87520: LD_VAR 0 4
87524: PPUSH
87525: LD_EXP 122
87529: PUSH
87530: LD_VAR 0 2
87534: ARRAY
87535: PUSH
87536: LD_INT 3
87538: ARRAY
87539: PPUSH
87540: LD_EXP 122
87544: PUSH
87545: LD_VAR 0 2
87549: ARRAY
87550: PUSH
87551: LD_INT 4
87553: ARRAY
87554: PPUSH
87555: CALL_OW 171
// AddComExitVehicle ( driver ) ;
87559: LD_VAR 0 4
87563: PPUSH
87564: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
87568: LD_VAR 0 4
87572: PPUSH
87573: LD_VAR 0 2
87577: PPUSH
87578: CALL_OW 180
// end else
87582: GO 87697
// if GetControl ( vehicle ) = control_remote then
87584: LD_VAR 0 1
87588: PPUSH
87589: CALL_OW 263
87593: PUSH
87594: LD_INT 2
87596: EQUAL
87597: IFFALSE 87658
// begin wait ( 0 0$2 ) ;
87599: LD_INT 70
87601: PPUSH
87602: CALL_OW 67
// if Connect ( vehicle ) then
87606: LD_VAR 0 1
87610: PPUSH
87611: CALL 37745 0 1
87615: IFFALSE 87656
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
87617: LD_VAR 0 1
87621: PPUSH
87622: LD_EXP 122
87626: PUSH
87627: LD_VAR 0 2
87631: ARRAY
87632: PUSH
87633: LD_INT 3
87635: ARRAY
87636: PPUSH
87637: LD_EXP 122
87641: PUSH
87642: LD_VAR 0 2
87646: ARRAY
87647: PUSH
87648: LD_INT 4
87650: ARRAY
87651: PPUSH
87652: CALL_OW 171
// end else
87656: GO 87697
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
87658: LD_VAR 0 1
87662: PPUSH
87663: LD_EXP 122
87667: PUSH
87668: LD_VAR 0 2
87672: ARRAY
87673: PUSH
87674: LD_INT 3
87676: ARRAY
87677: PPUSH
87678: LD_EXP 122
87682: PUSH
87683: LD_VAR 0 2
87687: ARRAY
87688: PUSH
87689: LD_INT 4
87691: ARRAY
87692: PPUSH
87693: CALL_OW 171
// end ; end ;
87697: LD_VAR 0 3
87701: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
87702: LD_INT 0
87704: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
87705: LD_VAR 0 1
87709: PUSH
87710: LD_INT 250
87712: EQUAL
87713: PUSH
87714: LD_VAR 0 2
87718: PPUSH
87719: CALL_OW 264
87723: PUSH
87724: LD_INT 81
87726: EQUAL
87727: AND
87728: IFFALSE 87749
// MinerPlaceMine ( unit , x , y ) ;
87730: LD_VAR 0 2
87734: PPUSH
87735: LD_VAR 0 4
87739: PPUSH
87740: LD_VAR 0 5
87744: PPUSH
87745: CALL 90573 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
87749: LD_VAR 0 1
87753: PUSH
87754: LD_INT 251
87756: EQUAL
87757: PUSH
87758: LD_VAR 0 2
87762: PPUSH
87763: CALL_OW 264
87767: PUSH
87768: LD_INT 81
87770: EQUAL
87771: AND
87772: IFFALSE 87793
// MinerDetonateMine ( unit , x , y ) ;
87774: LD_VAR 0 2
87778: PPUSH
87779: LD_VAR 0 4
87783: PPUSH
87784: LD_VAR 0 5
87788: PPUSH
87789: CALL 90848 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
87793: LD_VAR 0 1
87797: PUSH
87798: LD_INT 252
87800: EQUAL
87801: PUSH
87802: LD_VAR 0 2
87806: PPUSH
87807: CALL_OW 264
87811: PUSH
87812: LD_INT 81
87814: EQUAL
87815: AND
87816: IFFALSE 87837
// MinerCreateMinefield ( unit , x , y ) ;
87818: LD_VAR 0 2
87822: PPUSH
87823: LD_VAR 0 4
87827: PPUSH
87828: LD_VAR 0 5
87832: PPUSH
87833: CALL 91265 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
87837: LD_VAR 0 1
87841: PUSH
87842: LD_INT 253
87844: EQUAL
87845: PUSH
87846: LD_VAR 0 2
87850: PPUSH
87851: CALL_OW 257
87855: PUSH
87856: LD_INT 5
87858: EQUAL
87859: AND
87860: IFFALSE 87881
// ComBinocular ( unit , x , y ) ;
87862: LD_VAR 0 2
87866: PPUSH
87867: LD_VAR 0 4
87871: PPUSH
87872: LD_VAR 0 5
87876: PPUSH
87877: CALL 91634 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
87881: LD_VAR 0 1
87885: PUSH
87886: LD_INT 254
87888: EQUAL
87889: PUSH
87890: LD_VAR 0 2
87894: PPUSH
87895: CALL_OW 264
87899: PUSH
87900: LD_INT 99
87902: EQUAL
87903: AND
87904: PUSH
87905: LD_VAR 0 3
87909: PPUSH
87910: CALL_OW 263
87914: PUSH
87915: LD_INT 3
87917: EQUAL
87918: AND
87919: IFFALSE 87935
// HackDestroyVehicle ( unit , selectedUnit ) ;
87921: LD_VAR 0 2
87925: PPUSH
87926: LD_VAR 0 3
87930: PPUSH
87931: CALL 89937 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
87935: LD_VAR 0 1
87939: PUSH
87940: LD_INT 255
87942: EQUAL
87943: PUSH
87944: LD_VAR 0 2
87948: PPUSH
87949: CALL_OW 264
87953: PUSH
87954: LD_INT 14
87956: PUSH
87957: LD_INT 53
87959: PUSH
87960: EMPTY
87961: LIST
87962: LIST
87963: IN
87964: AND
87965: PUSH
87966: LD_VAR 0 4
87970: PPUSH
87971: LD_VAR 0 5
87975: PPUSH
87976: CALL_OW 488
87980: AND
87981: IFFALSE 88005
// CutTreeXYR ( unit , x , y , 12 ) ;
87983: LD_VAR 0 2
87987: PPUSH
87988: LD_VAR 0 4
87992: PPUSH
87993: LD_VAR 0 5
87997: PPUSH
87998: LD_INT 12
88000: PPUSH
88001: CALL 88100 0 4
// if cmd = 256 then
88005: LD_VAR 0 1
88009: PUSH
88010: LD_INT 256
88012: EQUAL
88013: IFFALSE 88034
// SetFactoryWaypoint ( unit , x , y ) ;
88015: LD_VAR 0 2
88019: PPUSH
88020: LD_VAR 0 4
88024: PPUSH
88025: LD_VAR 0 5
88029: PPUSH
88030: CALL 85852 0 3
// if cmd = 257 then
88034: LD_VAR 0 1
88038: PUSH
88039: LD_INT 257
88041: EQUAL
88042: IFFALSE 88063
// SetWarehouseGatheringPoint ( unit , x , y ) ;
88044: LD_VAR 0 2
88048: PPUSH
88049: LD_VAR 0 4
88053: PPUSH
88054: LD_VAR 0 5
88058: PPUSH
88059: CALL 86214 0 3
// if cmd = 258 then
88063: LD_VAR 0 1
88067: PUSH
88068: LD_INT 258
88070: EQUAL
88071: IFFALSE 88095
// BurnTreeXYR ( unit , x , y , 8 ) ;
88073: LD_VAR 0 2
88077: PPUSH
88078: LD_VAR 0 4
88082: PPUSH
88083: LD_VAR 0 5
88087: PPUSH
88088: LD_INT 8
88090: PPUSH
88091: CALL 88494 0 4
// end ;
88095: LD_VAR 0 6
88099: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
88100: LD_INT 0
88102: PPUSH
88103: PPUSH
88104: PPUSH
88105: PPUSH
88106: PPUSH
88107: PPUSH
88108: PPUSH
88109: PPUSH
88110: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
88111: LD_VAR 0 1
88115: PPUSH
88116: CALL_OW 302
88120: NOT
88121: PUSH
88122: LD_VAR 0 2
88126: PPUSH
88127: LD_VAR 0 3
88131: PPUSH
88132: CALL_OW 488
88136: NOT
88137: OR
88138: PUSH
88139: LD_VAR 0 4
88143: NOT
88144: OR
88145: IFFALSE 88149
// exit ;
88147: GO 88489
// list := [ ] ;
88149: LD_ADDR_VAR 0 13
88153: PUSH
88154: EMPTY
88155: ST_TO_ADDR
// if x - r < 0 then
88156: LD_VAR 0 2
88160: PUSH
88161: LD_VAR 0 4
88165: MINUS
88166: PUSH
88167: LD_INT 0
88169: LESS
88170: IFFALSE 88182
// min_x := 0 else
88172: LD_ADDR_VAR 0 7
88176: PUSH
88177: LD_INT 0
88179: ST_TO_ADDR
88180: GO 88198
// min_x := x - r ;
88182: LD_ADDR_VAR 0 7
88186: PUSH
88187: LD_VAR 0 2
88191: PUSH
88192: LD_VAR 0 4
88196: MINUS
88197: ST_TO_ADDR
// if y - r < 0 then
88198: LD_VAR 0 3
88202: PUSH
88203: LD_VAR 0 4
88207: MINUS
88208: PUSH
88209: LD_INT 0
88211: LESS
88212: IFFALSE 88224
// min_y := 0 else
88214: LD_ADDR_VAR 0 8
88218: PUSH
88219: LD_INT 0
88221: ST_TO_ADDR
88222: GO 88240
// min_y := y - r ;
88224: LD_ADDR_VAR 0 8
88228: PUSH
88229: LD_VAR 0 3
88233: PUSH
88234: LD_VAR 0 4
88238: MINUS
88239: ST_TO_ADDR
// max_x := x + r ;
88240: LD_ADDR_VAR 0 9
88244: PUSH
88245: LD_VAR 0 2
88249: PUSH
88250: LD_VAR 0 4
88254: PLUS
88255: ST_TO_ADDR
// max_y := y + r ;
88256: LD_ADDR_VAR 0 10
88260: PUSH
88261: LD_VAR 0 3
88265: PUSH
88266: LD_VAR 0 4
88270: PLUS
88271: ST_TO_ADDR
// for _x = min_x to max_x do
88272: LD_ADDR_VAR 0 11
88276: PUSH
88277: DOUBLE
88278: LD_VAR 0 7
88282: DEC
88283: ST_TO_ADDR
88284: LD_VAR 0 9
88288: PUSH
88289: FOR_TO
88290: IFFALSE 88407
// for _y = min_y to max_y do
88292: LD_ADDR_VAR 0 12
88296: PUSH
88297: DOUBLE
88298: LD_VAR 0 8
88302: DEC
88303: ST_TO_ADDR
88304: LD_VAR 0 10
88308: PUSH
88309: FOR_TO
88310: IFFALSE 88403
// begin if not ValidHex ( _x , _y ) then
88312: LD_VAR 0 11
88316: PPUSH
88317: LD_VAR 0 12
88321: PPUSH
88322: CALL_OW 488
88326: NOT
88327: IFFALSE 88331
// continue ;
88329: GO 88309
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
88331: LD_VAR 0 11
88335: PPUSH
88336: LD_VAR 0 12
88340: PPUSH
88341: CALL_OW 351
88345: PUSH
88346: LD_VAR 0 11
88350: PPUSH
88351: LD_VAR 0 12
88355: PPUSH
88356: CALL_OW 554
88360: AND
88361: IFFALSE 88401
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
88363: LD_ADDR_VAR 0 13
88367: PUSH
88368: LD_VAR 0 13
88372: PPUSH
88373: LD_VAR 0 13
88377: PUSH
88378: LD_INT 1
88380: PLUS
88381: PPUSH
88382: LD_VAR 0 11
88386: PUSH
88387: LD_VAR 0 12
88391: PUSH
88392: EMPTY
88393: LIST
88394: LIST
88395: PPUSH
88396: CALL_OW 2
88400: ST_TO_ADDR
// end ;
88401: GO 88309
88403: POP
88404: POP
88405: GO 88289
88407: POP
88408: POP
// if not list then
88409: LD_VAR 0 13
88413: NOT
88414: IFFALSE 88418
// exit ;
88416: GO 88489
// for i in list do
88418: LD_ADDR_VAR 0 6
88422: PUSH
88423: LD_VAR 0 13
88427: PUSH
88428: FOR_IN
88429: IFFALSE 88487
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
88431: LD_VAR 0 1
88435: PPUSH
88436: LD_STRING M
88438: PUSH
88439: LD_VAR 0 6
88443: PUSH
88444: LD_INT 1
88446: ARRAY
88447: PUSH
88448: LD_VAR 0 6
88452: PUSH
88453: LD_INT 2
88455: ARRAY
88456: PUSH
88457: LD_INT 0
88459: PUSH
88460: LD_INT 0
88462: PUSH
88463: LD_INT 0
88465: PUSH
88466: LD_INT 0
88468: PUSH
88469: EMPTY
88470: LIST
88471: LIST
88472: LIST
88473: LIST
88474: LIST
88475: LIST
88476: LIST
88477: PUSH
88478: EMPTY
88479: LIST
88480: PPUSH
88481: CALL_OW 447
88485: GO 88428
88487: POP
88488: POP
// end ;
88489: LD_VAR 0 5
88493: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
88494: LD_INT 0
88496: PPUSH
88497: PPUSH
88498: PPUSH
88499: PPUSH
88500: PPUSH
88501: PPUSH
88502: PPUSH
88503: PPUSH
88504: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
88505: LD_VAR 0 1
88509: PPUSH
88510: CALL_OW 302
88514: NOT
88515: PUSH
88516: LD_VAR 0 2
88520: PPUSH
88521: LD_VAR 0 3
88525: PPUSH
88526: CALL_OW 488
88530: NOT
88531: OR
88532: PUSH
88533: LD_VAR 0 4
88537: NOT
88538: OR
88539: IFFALSE 88543
// exit ;
88541: GO 88891
// list := [ ] ;
88543: LD_ADDR_VAR 0 13
88547: PUSH
88548: EMPTY
88549: ST_TO_ADDR
// if x - r < 0 then
88550: LD_VAR 0 2
88554: PUSH
88555: LD_VAR 0 4
88559: MINUS
88560: PUSH
88561: LD_INT 0
88563: LESS
88564: IFFALSE 88576
// min_x := 0 else
88566: LD_ADDR_VAR 0 7
88570: PUSH
88571: LD_INT 0
88573: ST_TO_ADDR
88574: GO 88592
// min_x := x - r ;
88576: LD_ADDR_VAR 0 7
88580: PUSH
88581: LD_VAR 0 2
88585: PUSH
88586: LD_VAR 0 4
88590: MINUS
88591: ST_TO_ADDR
// if y - r < 0 then
88592: LD_VAR 0 3
88596: PUSH
88597: LD_VAR 0 4
88601: MINUS
88602: PUSH
88603: LD_INT 0
88605: LESS
88606: IFFALSE 88618
// min_y := 0 else
88608: LD_ADDR_VAR 0 8
88612: PUSH
88613: LD_INT 0
88615: ST_TO_ADDR
88616: GO 88634
// min_y := y - r ;
88618: LD_ADDR_VAR 0 8
88622: PUSH
88623: LD_VAR 0 3
88627: PUSH
88628: LD_VAR 0 4
88632: MINUS
88633: ST_TO_ADDR
// max_x := x + r ;
88634: LD_ADDR_VAR 0 9
88638: PUSH
88639: LD_VAR 0 2
88643: PUSH
88644: LD_VAR 0 4
88648: PLUS
88649: ST_TO_ADDR
// max_y := y + r ;
88650: LD_ADDR_VAR 0 10
88654: PUSH
88655: LD_VAR 0 3
88659: PUSH
88660: LD_VAR 0 4
88664: PLUS
88665: ST_TO_ADDR
// for _x = min_x to max_x do
88666: LD_ADDR_VAR 0 11
88670: PUSH
88671: DOUBLE
88672: LD_VAR 0 7
88676: DEC
88677: ST_TO_ADDR
88678: LD_VAR 0 9
88682: PUSH
88683: FOR_TO
88684: IFFALSE 88801
// for _y = min_y to max_y do
88686: LD_ADDR_VAR 0 12
88690: PUSH
88691: DOUBLE
88692: LD_VAR 0 8
88696: DEC
88697: ST_TO_ADDR
88698: LD_VAR 0 10
88702: PUSH
88703: FOR_TO
88704: IFFALSE 88797
// begin if not ValidHex ( _x , _y ) then
88706: LD_VAR 0 11
88710: PPUSH
88711: LD_VAR 0 12
88715: PPUSH
88716: CALL_OW 488
88720: NOT
88721: IFFALSE 88725
// continue ;
88723: GO 88703
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
88725: LD_VAR 0 11
88729: PPUSH
88730: LD_VAR 0 12
88734: PPUSH
88735: CALL_OW 351
88739: PUSH
88740: LD_VAR 0 11
88744: PPUSH
88745: LD_VAR 0 12
88749: PPUSH
88750: CALL_OW 554
88754: AND
88755: IFFALSE 88795
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
88757: LD_ADDR_VAR 0 13
88761: PUSH
88762: LD_VAR 0 13
88766: PPUSH
88767: LD_VAR 0 13
88771: PUSH
88772: LD_INT 1
88774: PLUS
88775: PPUSH
88776: LD_VAR 0 11
88780: PUSH
88781: LD_VAR 0 12
88785: PUSH
88786: EMPTY
88787: LIST
88788: LIST
88789: PPUSH
88790: CALL_OW 2
88794: ST_TO_ADDR
// end ;
88795: GO 88703
88797: POP
88798: POP
88799: GO 88683
88801: POP
88802: POP
// if not list then
88803: LD_VAR 0 13
88807: NOT
88808: IFFALSE 88812
// exit ;
88810: GO 88891
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
88812: LD_ADDR_VAR 0 13
88816: PUSH
88817: LD_VAR 0 1
88821: PPUSH
88822: LD_VAR 0 13
88826: PPUSH
88827: LD_INT 1
88829: PPUSH
88830: LD_INT 1
88832: PPUSH
88833: CALL 34887 0 4
88837: ST_TO_ADDR
// ComStop ( flame ) ;
88838: LD_VAR 0 1
88842: PPUSH
88843: CALL_OW 141
// for i in list do
88847: LD_ADDR_VAR 0 6
88851: PUSH
88852: LD_VAR 0 13
88856: PUSH
88857: FOR_IN
88858: IFFALSE 88889
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
88860: LD_VAR 0 1
88864: PPUSH
88865: LD_VAR 0 6
88869: PUSH
88870: LD_INT 1
88872: ARRAY
88873: PPUSH
88874: LD_VAR 0 6
88878: PUSH
88879: LD_INT 2
88881: ARRAY
88882: PPUSH
88883: CALL_OW 176
88887: GO 88857
88889: POP
88890: POP
// end ;
88891: LD_VAR 0 5
88895: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
88896: LD_EXP 125
88900: NOT
88901: IFFALSE 88951
88903: GO 88905
88905: DISABLE
// begin initHack := true ;
88906: LD_ADDR_EXP 125
88910: PUSH
88911: LD_INT 1
88913: ST_TO_ADDR
// hackTanks := [ ] ;
88914: LD_ADDR_EXP 126
88918: PUSH
88919: EMPTY
88920: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
88921: LD_ADDR_EXP 127
88925: PUSH
88926: EMPTY
88927: ST_TO_ADDR
// hackLimit := 3 ;
88928: LD_ADDR_EXP 128
88932: PUSH
88933: LD_INT 3
88935: ST_TO_ADDR
// hackDist := 12 ;
88936: LD_ADDR_EXP 129
88940: PUSH
88941: LD_INT 12
88943: ST_TO_ADDR
// hackCounter := [ ] ;
88944: LD_ADDR_EXP 130
88948: PUSH
88949: EMPTY
88950: ST_TO_ADDR
// end ;
88951: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
88952: LD_EXP 125
88956: PUSH
88957: LD_INT 34
88959: PUSH
88960: LD_INT 99
88962: PUSH
88963: EMPTY
88964: LIST
88965: LIST
88966: PPUSH
88967: CALL_OW 69
88971: AND
88972: IFFALSE 89225
88974: GO 88976
88976: DISABLE
88977: LD_INT 0
88979: PPUSH
88980: PPUSH
// begin enable ;
88981: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
88982: LD_ADDR_VAR 0 1
88986: PUSH
88987: LD_INT 34
88989: PUSH
88990: LD_INT 99
88992: PUSH
88993: EMPTY
88994: LIST
88995: LIST
88996: PPUSH
88997: CALL_OW 69
89001: PUSH
89002: FOR_IN
89003: IFFALSE 89223
// begin if not i in hackTanks then
89005: LD_VAR 0 1
89009: PUSH
89010: LD_EXP 126
89014: IN
89015: NOT
89016: IFFALSE 89099
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
89018: LD_ADDR_EXP 126
89022: PUSH
89023: LD_EXP 126
89027: PPUSH
89028: LD_EXP 126
89032: PUSH
89033: LD_INT 1
89035: PLUS
89036: PPUSH
89037: LD_VAR 0 1
89041: PPUSH
89042: CALL_OW 1
89046: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
89047: LD_ADDR_EXP 127
89051: PUSH
89052: LD_EXP 127
89056: PPUSH
89057: LD_EXP 127
89061: PUSH
89062: LD_INT 1
89064: PLUS
89065: PPUSH
89066: EMPTY
89067: PPUSH
89068: CALL_OW 1
89072: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
89073: LD_ADDR_EXP 130
89077: PUSH
89078: LD_EXP 130
89082: PPUSH
89083: LD_EXP 130
89087: PUSH
89088: LD_INT 1
89090: PLUS
89091: PPUSH
89092: EMPTY
89093: PPUSH
89094: CALL_OW 1
89098: ST_TO_ADDR
// end ; if not IsOk ( i ) then
89099: LD_VAR 0 1
89103: PPUSH
89104: CALL_OW 302
89108: NOT
89109: IFFALSE 89122
// begin HackUnlinkAll ( i ) ;
89111: LD_VAR 0 1
89115: PPUSH
89116: CALL 89228 0 1
// continue ;
89120: GO 89002
// end ; HackCheckCapturedStatus ( i ) ;
89122: LD_VAR 0 1
89126: PPUSH
89127: CALL 89671 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
89131: LD_ADDR_VAR 0 2
89135: PUSH
89136: LD_INT 81
89138: PUSH
89139: LD_VAR 0 1
89143: PPUSH
89144: CALL_OW 255
89148: PUSH
89149: EMPTY
89150: LIST
89151: LIST
89152: PUSH
89153: LD_INT 33
89155: PUSH
89156: LD_INT 3
89158: PUSH
89159: EMPTY
89160: LIST
89161: LIST
89162: PUSH
89163: LD_INT 91
89165: PUSH
89166: LD_VAR 0 1
89170: PUSH
89171: LD_EXP 129
89175: PUSH
89176: EMPTY
89177: LIST
89178: LIST
89179: LIST
89180: PUSH
89181: LD_INT 50
89183: PUSH
89184: EMPTY
89185: LIST
89186: PUSH
89187: EMPTY
89188: LIST
89189: LIST
89190: LIST
89191: LIST
89192: PPUSH
89193: CALL_OW 69
89197: ST_TO_ADDR
// if not tmp then
89198: LD_VAR 0 2
89202: NOT
89203: IFFALSE 89207
// continue ;
89205: GO 89002
// HackLink ( i , tmp ) ;
89207: LD_VAR 0 1
89211: PPUSH
89212: LD_VAR 0 2
89216: PPUSH
89217: CALL 89364 0 2
// end ;
89221: GO 89002
89223: POP
89224: POP
// end ;
89225: PPOPN 2
89227: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
89228: LD_INT 0
89230: PPUSH
89231: PPUSH
89232: PPUSH
// if not hack in hackTanks then
89233: LD_VAR 0 1
89237: PUSH
89238: LD_EXP 126
89242: IN
89243: NOT
89244: IFFALSE 89248
// exit ;
89246: GO 89359
// index := GetElementIndex ( hackTanks , hack ) ;
89248: LD_ADDR_VAR 0 4
89252: PUSH
89253: LD_EXP 126
89257: PPUSH
89258: LD_VAR 0 1
89262: PPUSH
89263: CALL 34184 0 2
89267: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
89268: LD_EXP 127
89272: PUSH
89273: LD_VAR 0 4
89277: ARRAY
89278: IFFALSE 89359
// begin for i in hackTanksCaptured [ index ] do
89280: LD_ADDR_VAR 0 3
89284: PUSH
89285: LD_EXP 127
89289: PUSH
89290: LD_VAR 0 4
89294: ARRAY
89295: PUSH
89296: FOR_IN
89297: IFFALSE 89323
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
89299: LD_VAR 0 3
89303: PUSH
89304: LD_INT 1
89306: ARRAY
89307: PPUSH
89308: LD_VAR 0 3
89312: PUSH
89313: LD_INT 2
89315: ARRAY
89316: PPUSH
89317: CALL_OW 235
89321: GO 89296
89323: POP
89324: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
89325: LD_ADDR_EXP 127
89329: PUSH
89330: LD_EXP 127
89334: PPUSH
89335: LD_VAR 0 4
89339: PPUSH
89340: EMPTY
89341: PPUSH
89342: CALL_OW 1
89346: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
89347: LD_VAR 0 1
89351: PPUSH
89352: LD_INT 0
89354: PPUSH
89355: CALL_OW 505
// end ; end ;
89359: LD_VAR 0 2
89363: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
89364: LD_INT 0
89366: PPUSH
89367: PPUSH
89368: PPUSH
// if not hack in hackTanks or not vehicles then
89369: LD_VAR 0 1
89373: PUSH
89374: LD_EXP 126
89378: IN
89379: NOT
89380: PUSH
89381: LD_VAR 0 2
89385: NOT
89386: OR
89387: IFFALSE 89391
// exit ;
89389: GO 89666
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
89391: LD_ADDR_VAR 0 2
89395: PUSH
89396: LD_VAR 0 1
89400: PPUSH
89401: LD_VAR 0 2
89405: PPUSH
89406: LD_INT 1
89408: PPUSH
89409: LD_INT 1
89411: PPUSH
89412: CALL 34834 0 4
89416: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
89417: LD_ADDR_VAR 0 5
89421: PUSH
89422: LD_EXP 126
89426: PPUSH
89427: LD_VAR 0 1
89431: PPUSH
89432: CALL 34184 0 2
89436: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
89437: LD_EXP 127
89441: PUSH
89442: LD_VAR 0 5
89446: ARRAY
89447: PUSH
89448: LD_EXP 128
89452: LESS
89453: IFFALSE 89642
// begin for i := 1 to vehicles do
89455: LD_ADDR_VAR 0 4
89459: PUSH
89460: DOUBLE
89461: LD_INT 1
89463: DEC
89464: ST_TO_ADDR
89465: LD_VAR 0 2
89469: PUSH
89470: FOR_TO
89471: IFFALSE 89640
// begin if hackTanksCaptured [ index ] = hackLimit then
89473: LD_EXP 127
89477: PUSH
89478: LD_VAR 0 5
89482: ARRAY
89483: PUSH
89484: LD_EXP 128
89488: EQUAL
89489: IFFALSE 89493
// break ;
89491: GO 89640
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
89493: LD_ADDR_EXP 130
89497: PUSH
89498: LD_EXP 130
89502: PPUSH
89503: LD_VAR 0 5
89507: PPUSH
89508: LD_EXP 130
89512: PUSH
89513: LD_VAR 0 5
89517: ARRAY
89518: PUSH
89519: LD_INT 1
89521: PLUS
89522: PPUSH
89523: CALL_OW 1
89527: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
89528: LD_ADDR_EXP 127
89532: PUSH
89533: LD_EXP 127
89537: PPUSH
89538: LD_VAR 0 5
89542: PUSH
89543: LD_EXP 127
89547: PUSH
89548: LD_VAR 0 5
89552: ARRAY
89553: PUSH
89554: LD_INT 1
89556: PLUS
89557: PUSH
89558: EMPTY
89559: LIST
89560: LIST
89561: PPUSH
89562: LD_VAR 0 2
89566: PUSH
89567: LD_VAR 0 4
89571: ARRAY
89572: PUSH
89573: LD_VAR 0 2
89577: PUSH
89578: LD_VAR 0 4
89582: ARRAY
89583: PPUSH
89584: CALL_OW 255
89588: PUSH
89589: EMPTY
89590: LIST
89591: LIST
89592: PPUSH
89593: CALL 34399 0 3
89597: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
89598: LD_VAR 0 2
89602: PUSH
89603: LD_VAR 0 4
89607: ARRAY
89608: PPUSH
89609: LD_VAR 0 1
89613: PPUSH
89614: CALL_OW 255
89618: PPUSH
89619: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
89623: LD_VAR 0 2
89627: PUSH
89628: LD_VAR 0 4
89632: ARRAY
89633: PPUSH
89634: CALL_OW 141
// end ;
89638: GO 89470
89640: POP
89641: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
89642: LD_VAR 0 1
89646: PPUSH
89647: LD_EXP 127
89651: PUSH
89652: LD_VAR 0 5
89656: ARRAY
89657: PUSH
89658: LD_INT 0
89660: PLUS
89661: PPUSH
89662: CALL_OW 505
// end ;
89666: LD_VAR 0 3
89670: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
89671: LD_INT 0
89673: PPUSH
89674: PPUSH
89675: PPUSH
89676: PPUSH
// if not hack in hackTanks then
89677: LD_VAR 0 1
89681: PUSH
89682: LD_EXP 126
89686: IN
89687: NOT
89688: IFFALSE 89692
// exit ;
89690: GO 89932
// index := GetElementIndex ( hackTanks , hack ) ;
89692: LD_ADDR_VAR 0 4
89696: PUSH
89697: LD_EXP 126
89701: PPUSH
89702: LD_VAR 0 1
89706: PPUSH
89707: CALL 34184 0 2
89711: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
89712: LD_ADDR_VAR 0 3
89716: PUSH
89717: DOUBLE
89718: LD_EXP 127
89722: PUSH
89723: LD_VAR 0 4
89727: ARRAY
89728: INC
89729: ST_TO_ADDR
89730: LD_INT 1
89732: PUSH
89733: FOR_DOWNTO
89734: IFFALSE 89906
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
89736: LD_ADDR_VAR 0 5
89740: PUSH
89741: LD_EXP 127
89745: PUSH
89746: LD_VAR 0 4
89750: ARRAY
89751: PUSH
89752: LD_VAR 0 3
89756: ARRAY
89757: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
89758: LD_VAR 0 5
89762: PUSH
89763: LD_INT 1
89765: ARRAY
89766: PPUSH
89767: CALL_OW 302
89771: NOT
89772: PUSH
89773: LD_VAR 0 5
89777: PUSH
89778: LD_INT 1
89780: ARRAY
89781: PPUSH
89782: CALL_OW 255
89786: PUSH
89787: LD_VAR 0 1
89791: PPUSH
89792: CALL_OW 255
89796: NONEQUAL
89797: OR
89798: IFFALSE 89904
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
89800: LD_VAR 0 5
89804: PUSH
89805: LD_INT 1
89807: ARRAY
89808: PPUSH
89809: CALL_OW 305
89813: PUSH
89814: LD_VAR 0 5
89818: PUSH
89819: LD_INT 1
89821: ARRAY
89822: PPUSH
89823: CALL_OW 255
89827: PUSH
89828: LD_VAR 0 1
89832: PPUSH
89833: CALL_OW 255
89837: EQUAL
89838: AND
89839: IFFALSE 89863
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
89841: LD_VAR 0 5
89845: PUSH
89846: LD_INT 1
89848: ARRAY
89849: PPUSH
89850: LD_VAR 0 5
89854: PUSH
89855: LD_INT 2
89857: ARRAY
89858: PPUSH
89859: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
89863: LD_ADDR_EXP 127
89867: PUSH
89868: LD_EXP 127
89872: PPUSH
89873: LD_VAR 0 4
89877: PPUSH
89878: LD_EXP 127
89882: PUSH
89883: LD_VAR 0 4
89887: ARRAY
89888: PPUSH
89889: LD_VAR 0 3
89893: PPUSH
89894: CALL_OW 3
89898: PPUSH
89899: CALL_OW 1
89903: ST_TO_ADDR
// end ; end ;
89904: GO 89733
89906: POP
89907: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
89908: LD_VAR 0 1
89912: PPUSH
89913: LD_EXP 127
89917: PUSH
89918: LD_VAR 0 4
89922: ARRAY
89923: PUSH
89924: LD_INT 0
89926: PLUS
89927: PPUSH
89928: CALL_OW 505
// end ;
89932: LD_VAR 0 2
89936: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
89937: LD_INT 0
89939: PPUSH
89940: PPUSH
89941: PPUSH
89942: PPUSH
// if not hack in hackTanks then
89943: LD_VAR 0 1
89947: PUSH
89948: LD_EXP 126
89952: IN
89953: NOT
89954: IFFALSE 89958
// exit ;
89956: GO 90043
// index := GetElementIndex ( hackTanks , hack ) ;
89958: LD_ADDR_VAR 0 5
89962: PUSH
89963: LD_EXP 126
89967: PPUSH
89968: LD_VAR 0 1
89972: PPUSH
89973: CALL 34184 0 2
89977: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
89978: LD_ADDR_VAR 0 4
89982: PUSH
89983: DOUBLE
89984: LD_INT 1
89986: DEC
89987: ST_TO_ADDR
89988: LD_EXP 127
89992: PUSH
89993: LD_VAR 0 5
89997: ARRAY
89998: PUSH
89999: FOR_TO
90000: IFFALSE 90041
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
90002: LD_EXP 127
90006: PUSH
90007: LD_VAR 0 5
90011: ARRAY
90012: PUSH
90013: LD_VAR 0 4
90017: ARRAY
90018: PUSH
90019: LD_INT 1
90021: ARRAY
90022: PUSH
90023: LD_VAR 0 2
90027: EQUAL
90028: IFFALSE 90039
// KillUnit ( vehicle ) ;
90030: LD_VAR 0 2
90034: PPUSH
90035: CALL_OW 66
90039: GO 89999
90041: POP
90042: POP
// end ;
90043: LD_VAR 0 3
90047: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
90048: LD_EXP 131
90052: NOT
90053: IFFALSE 90088
90055: GO 90057
90057: DISABLE
// begin initMiner := true ;
90058: LD_ADDR_EXP 131
90062: PUSH
90063: LD_INT 1
90065: ST_TO_ADDR
// minersList := [ ] ;
90066: LD_ADDR_EXP 132
90070: PUSH
90071: EMPTY
90072: ST_TO_ADDR
// minerMinesList := [ ] ;
90073: LD_ADDR_EXP 133
90077: PUSH
90078: EMPTY
90079: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
90080: LD_ADDR_EXP 134
90084: PUSH
90085: LD_INT 5
90087: ST_TO_ADDR
// end ;
90088: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
90089: LD_EXP 131
90093: PUSH
90094: LD_INT 34
90096: PUSH
90097: LD_INT 81
90099: PUSH
90100: EMPTY
90101: LIST
90102: LIST
90103: PPUSH
90104: CALL_OW 69
90108: AND
90109: IFFALSE 90570
90111: GO 90113
90113: DISABLE
90114: LD_INT 0
90116: PPUSH
90117: PPUSH
90118: PPUSH
90119: PPUSH
// begin enable ;
90120: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
90121: LD_ADDR_VAR 0 1
90125: PUSH
90126: LD_INT 34
90128: PUSH
90129: LD_INT 81
90131: PUSH
90132: EMPTY
90133: LIST
90134: LIST
90135: PPUSH
90136: CALL_OW 69
90140: PUSH
90141: FOR_IN
90142: IFFALSE 90214
// begin if not i in minersList then
90144: LD_VAR 0 1
90148: PUSH
90149: LD_EXP 132
90153: IN
90154: NOT
90155: IFFALSE 90212
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
90157: LD_ADDR_EXP 132
90161: PUSH
90162: LD_EXP 132
90166: PPUSH
90167: LD_EXP 132
90171: PUSH
90172: LD_INT 1
90174: PLUS
90175: PPUSH
90176: LD_VAR 0 1
90180: PPUSH
90181: CALL_OW 1
90185: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
90186: LD_ADDR_EXP 133
90190: PUSH
90191: LD_EXP 133
90195: PPUSH
90196: LD_EXP 133
90200: PUSH
90201: LD_INT 1
90203: PLUS
90204: PPUSH
90205: EMPTY
90206: PPUSH
90207: CALL_OW 1
90211: ST_TO_ADDR
// end end ;
90212: GO 90141
90214: POP
90215: POP
// for i := minerMinesList downto 1 do
90216: LD_ADDR_VAR 0 1
90220: PUSH
90221: DOUBLE
90222: LD_EXP 133
90226: INC
90227: ST_TO_ADDR
90228: LD_INT 1
90230: PUSH
90231: FOR_DOWNTO
90232: IFFALSE 90568
// begin if IsLive ( minersList [ i ] ) then
90234: LD_EXP 132
90238: PUSH
90239: LD_VAR 0 1
90243: ARRAY
90244: PPUSH
90245: CALL_OW 300
90249: IFFALSE 90277
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
90251: LD_EXP 132
90255: PUSH
90256: LD_VAR 0 1
90260: ARRAY
90261: PPUSH
90262: LD_EXP 133
90266: PUSH
90267: LD_VAR 0 1
90271: ARRAY
90272: PPUSH
90273: CALL_OW 505
// if not minerMinesList [ i ] then
90277: LD_EXP 133
90281: PUSH
90282: LD_VAR 0 1
90286: ARRAY
90287: NOT
90288: IFFALSE 90292
// continue ;
90290: GO 90231
// for j := minerMinesList [ i ] downto 1 do
90292: LD_ADDR_VAR 0 2
90296: PUSH
90297: DOUBLE
90298: LD_EXP 133
90302: PUSH
90303: LD_VAR 0 1
90307: ARRAY
90308: INC
90309: ST_TO_ADDR
90310: LD_INT 1
90312: PUSH
90313: FOR_DOWNTO
90314: IFFALSE 90564
// begin side := GetSide ( minersList [ i ] ) ;
90316: LD_ADDR_VAR 0 3
90320: PUSH
90321: LD_EXP 132
90325: PUSH
90326: LD_VAR 0 1
90330: ARRAY
90331: PPUSH
90332: CALL_OW 255
90336: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
90337: LD_ADDR_VAR 0 4
90341: PUSH
90342: LD_EXP 133
90346: PUSH
90347: LD_VAR 0 1
90351: ARRAY
90352: PUSH
90353: LD_VAR 0 2
90357: ARRAY
90358: PUSH
90359: LD_INT 1
90361: ARRAY
90362: PPUSH
90363: LD_EXP 133
90367: PUSH
90368: LD_VAR 0 1
90372: ARRAY
90373: PUSH
90374: LD_VAR 0 2
90378: ARRAY
90379: PUSH
90380: LD_INT 2
90382: ARRAY
90383: PPUSH
90384: CALL_OW 428
90388: ST_TO_ADDR
// if not tmp then
90389: LD_VAR 0 4
90393: NOT
90394: IFFALSE 90398
// continue ;
90396: GO 90313
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
90398: LD_VAR 0 4
90402: PUSH
90403: LD_INT 81
90405: PUSH
90406: LD_VAR 0 3
90410: PUSH
90411: EMPTY
90412: LIST
90413: LIST
90414: PPUSH
90415: CALL_OW 69
90419: IN
90420: PUSH
90421: LD_EXP 133
90425: PUSH
90426: LD_VAR 0 1
90430: ARRAY
90431: PUSH
90432: LD_VAR 0 2
90436: ARRAY
90437: PUSH
90438: LD_INT 1
90440: ARRAY
90441: PPUSH
90442: LD_EXP 133
90446: PUSH
90447: LD_VAR 0 1
90451: ARRAY
90452: PUSH
90453: LD_VAR 0 2
90457: ARRAY
90458: PUSH
90459: LD_INT 2
90461: ARRAY
90462: PPUSH
90463: CALL_OW 458
90467: AND
90468: IFFALSE 90562
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
90470: LD_EXP 133
90474: PUSH
90475: LD_VAR 0 1
90479: ARRAY
90480: PUSH
90481: LD_VAR 0 2
90485: ARRAY
90486: PUSH
90487: LD_INT 1
90489: ARRAY
90490: PPUSH
90491: LD_EXP 133
90495: PUSH
90496: LD_VAR 0 1
90500: ARRAY
90501: PUSH
90502: LD_VAR 0 2
90506: ARRAY
90507: PUSH
90508: LD_INT 2
90510: ARRAY
90511: PPUSH
90512: LD_VAR 0 3
90516: PPUSH
90517: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
90521: LD_ADDR_EXP 133
90525: PUSH
90526: LD_EXP 133
90530: PPUSH
90531: LD_VAR 0 1
90535: PPUSH
90536: LD_EXP 133
90540: PUSH
90541: LD_VAR 0 1
90545: ARRAY
90546: PPUSH
90547: LD_VAR 0 2
90551: PPUSH
90552: CALL_OW 3
90556: PPUSH
90557: CALL_OW 1
90561: ST_TO_ADDR
// end ; end ;
90562: GO 90313
90564: POP
90565: POP
// end ;
90566: GO 90231
90568: POP
90569: POP
// end ;
90570: PPOPN 4
90572: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
90573: LD_INT 0
90575: PPUSH
90576: PPUSH
// result := false ;
90577: LD_ADDR_VAR 0 4
90581: PUSH
90582: LD_INT 0
90584: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
90585: LD_VAR 0 1
90589: PPUSH
90590: CALL_OW 264
90594: PUSH
90595: LD_INT 81
90597: EQUAL
90598: NOT
90599: IFFALSE 90603
// exit ;
90601: GO 90843
// index := GetElementIndex ( minersList , unit ) ;
90603: LD_ADDR_VAR 0 5
90607: PUSH
90608: LD_EXP 132
90612: PPUSH
90613: LD_VAR 0 1
90617: PPUSH
90618: CALL 34184 0 2
90622: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
90623: LD_EXP 133
90627: PUSH
90628: LD_VAR 0 5
90632: ARRAY
90633: PUSH
90634: LD_EXP 134
90638: GREATEREQUAL
90639: IFFALSE 90643
// exit ;
90641: GO 90843
// ComMoveXY ( unit , x , y ) ;
90643: LD_VAR 0 1
90647: PPUSH
90648: LD_VAR 0 2
90652: PPUSH
90653: LD_VAR 0 3
90657: PPUSH
90658: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
90662: LD_INT 35
90664: PPUSH
90665: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
90669: LD_VAR 0 1
90673: PPUSH
90674: LD_VAR 0 2
90678: PPUSH
90679: LD_VAR 0 3
90683: PPUSH
90684: CALL 65936 0 3
90688: NOT
90689: PUSH
90690: LD_VAR 0 1
90694: PPUSH
90695: CALL_OW 314
90699: AND
90700: IFFALSE 90704
// exit ;
90702: GO 90843
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
90704: LD_VAR 0 2
90708: PPUSH
90709: LD_VAR 0 3
90713: PPUSH
90714: CALL_OW 428
90718: PUSH
90719: LD_VAR 0 1
90723: EQUAL
90724: PUSH
90725: LD_VAR 0 1
90729: PPUSH
90730: CALL_OW 314
90734: NOT
90735: AND
90736: IFFALSE 90662
// PlaySoundXY ( x , y , PlantMine ) ;
90738: LD_VAR 0 2
90742: PPUSH
90743: LD_VAR 0 3
90747: PPUSH
90748: LD_STRING PlantMine
90750: PPUSH
90751: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
90755: LD_VAR 0 2
90759: PPUSH
90760: LD_VAR 0 3
90764: PPUSH
90765: LD_VAR 0 1
90769: PPUSH
90770: CALL_OW 255
90774: PPUSH
90775: LD_INT 0
90777: PPUSH
90778: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
90782: LD_ADDR_EXP 133
90786: PUSH
90787: LD_EXP 133
90791: PPUSH
90792: LD_VAR 0 5
90796: PUSH
90797: LD_EXP 133
90801: PUSH
90802: LD_VAR 0 5
90806: ARRAY
90807: PUSH
90808: LD_INT 1
90810: PLUS
90811: PUSH
90812: EMPTY
90813: LIST
90814: LIST
90815: PPUSH
90816: LD_VAR 0 2
90820: PUSH
90821: LD_VAR 0 3
90825: PUSH
90826: EMPTY
90827: LIST
90828: LIST
90829: PPUSH
90830: CALL 34399 0 3
90834: ST_TO_ADDR
// result := true ;
90835: LD_ADDR_VAR 0 4
90839: PUSH
90840: LD_INT 1
90842: ST_TO_ADDR
// end ;
90843: LD_VAR 0 4
90847: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
90848: LD_INT 0
90850: PPUSH
90851: PPUSH
90852: PPUSH
// if not unit in minersList then
90853: LD_VAR 0 1
90857: PUSH
90858: LD_EXP 132
90862: IN
90863: NOT
90864: IFFALSE 90868
// exit ;
90866: GO 91260
// index := GetElementIndex ( minersList , unit ) ;
90868: LD_ADDR_VAR 0 6
90872: PUSH
90873: LD_EXP 132
90877: PPUSH
90878: LD_VAR 0 1
90882: PPUSH
90883: CALL 34184 0 2
90887: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
90888: LD_ADDR_VAR 0 5
90892: PUSH
90893: DOUBLE
90894: LD_EXP 133
90898: PUSH
90899: LD_VAR 0 6
90903: ARRAY
90904: INC
90905: ST_TO_ADDR
90906: LD_INT 1
90908: PUSH
90909: FOR_DOWNTO
90910: IFFALSE 91071
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
90912: LD_EXP 133
90916: PUSH
90917: LD_VAR 0 6
90921: ARRAY
90922: PUSH
90923: LD_VAR 0 5
90927: ARRAY
90928: PUSH
90929: LD_INT 1
90931: ARRAY
90932: PUSH
90933: LD_VAR 0 2
90937: EQUAL
90938: PUSH
90939: LD_EXP 133
90943: PUSH
90944: LD_VAR 0 6
90948: ARRAY
90949: PUSH
90950: LD_VAR 0 5
90954: ARRAY
90955: PUSH
90956: LD_INT 2
90958: ARRAY
90959: PUSH
90960: LD_VAR 0 3
90964: EQUAL
90965: AND
90966: IFFALSE 91069
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
90968: LD_EXP 133
90972: PUSH
90973: LD_VAR 0 6
90977: ARRAY
90978: PUSH
90979: LD_VAR 0 5
90983: ARRAY
90984: PUSH
90985: LD_INT 1
90987: ARRAY
90988: PPUSH
90989: LD_EXP 133
90993: PUSH
90994: LD_VAR 0 6
90998: ARRAY
90999: PUSH
91000: LD_VAR 0 5
91004: ARRAY
91005: PUSH
91006: LD_INT 2
91008: ARRAY
91009: PPUSH
91010: LD_VAR 0 1
91014: PPUSH
91015: CALL_OW 255
91019: PPUSH
91020: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
91024: LD_ADDR_EXP 133
91028: PUSH
91029: LD_EXP 133
91033: PPUSH
91034: LD_VAR 0 6
91038: PPUSH
91039: LD_EXP 133
91043: PUSH
91044: LD_VAR 0 6
91048: ARRAY
91049: PPUSH
91050: LD_VAR 0 5
91054: PPUSH
91055: CALL_OW 3
91059: PPUSH
91060: CALL_OW 1
91064: ST_TO_ADDR
// exit ;
91065: POP
91066: POP
91067: GO 91260
// end ; end ;
91069: GO 90909
91071: POP
91072: POP
// for i := minerMinesList [ index ] downto 1 do
91073: LD_ADDR_VAR 0 5
91077: PUSH
91078: DOUBLE
91079: LD_EXP 133
91083: PUSH
91084: LD_VAR 0 6
91088: ARRAY
91089: INC
91090: ST_TO_ADDR
91091: LD_INT 1
91093: PUSH
91094: FOR_DOWNTO
91095: IFFALSE 91258
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
91097: LD_EXP 133
91101: PUSH
91102: LD_VAR 0 6
91106: ARRAY
91107: PUSH
91108: LD_VAR 0 5
91112: ARRAY
91113: PUSH
91114: LD_INT 1
91116: ARRAY
91117: PPUSH
91118: LD_EXP 133
91122: PUSH
91123: LD_VAR 0 6
91127: ARRAY
91128: PUSH
91129: LD_VAR 0 5
91133: ARRAY
91134: PUSH
91135: LD_INT 2
91137: ARRAY
91138: PPUSH
91139: LD_VAR 0 2
91143: PPUSH
91144: LD_VAR 0 3
91148: PPUSH
91149: CALL_OW 298
91153: PUSH
91154: LD_INT 6
91156: LESS
91157: IFFALSE 91256
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
91159: LD_EXP 133
91163: PUSH
91164: LD_VAR 0 6
91168: ARRAY
91169: PUSH
91170: LD_VAR 0 5
91174: ARRAY
91175: PUSH
91176: LD_INT 1
91178: ARRAY
91179: PPUSH
91180: LD_EXP 133
91184: PUSH
91185: LD_VAR 0 6
91189: ARRAY
91190: PUSH
91191: LD_VAR 0 5
91195: ARRAY
91196: PUSH
91197: LD_INT 2
91199: ARRAY
91200: PPUSH
91201: LD_VAR 0 1
91205: PPUSH
91206: CALL_OW 255
91210: PPUSH
91211: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
91215: LD_ADDR_EXP 133
91219: PUSH
91220: LD_EXP 133
91224: PPUSH
91225: LD_VAR 0 6
91229: PPUSH
91230: LD_EXP 133
91234: PUSH
91235: LD_VAR 0 6
91239: ARRAY
91240: PPUSH
91241: LD_VAR 0 5
91245: PPUSH
91246: CALL_OW 3
91250: PPUSH
91251: CALL_OW 1
91255: ST_TO_ADDR
// end ; end ;
91256: GO 91094
91258: POP
91259: POP
// end ;
91260: LD_VAR 0 4
91264: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
91265: LD_INT 0
91267: PPUSH
91268: PPUSH
91269: PPUSH
91270: PPUSH
91271: PPUSH
91272: PPUSH
91273: PPUSH
91274: PPUSH
91275: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
91276: LD_VAR 0 1
91280: PPUSH
91281: CALL_OW 264
91285: PUSH
91286: LD_INT 81
91288: EQUAL
91289: NOT
91290: PUSH
91291: LD_VAR 0 1
91295: PUSH
91296: LD_EXP 132
91300: IN
91301: NOT
91302: OR
91303: IFFALSE 91307
// exit ;
91305: GO 91629
// index := GetElementIndex ( minersList , unit ) ;
91307: LD_ADDR_VAR 0 6
91311: PUSH
91312: LD_EXP 132
91316: PPUSH
91317: LD_VAR 0 1
91321: PPUSH
91322: CALL 34184 0 2
91326: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
91327: LD_ADDR_VAR 0 8
91331: PUSH
91332: LD_EXP 134
91336: PUSH
91337: LD_EXP 133
91341: PUSH
91342: LD_VAR 0 6
91346: ARRAY
91347: MINUS
91348: ST_TO_ADDR
// if not minesFreeAmount then
91349: LD_VAR 0 8
91353: NOT
91354: IFFALSE 91358
// exit ;
91356: GO 91629
// tmp := [ ] ;
91358: LD_ADDR_VAR 0 7
91362: PUSH
91363: EMPTY
91364: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
91365: LD_ADDR_VAR 0 5
91369: PUSH
91370: DOUBLE
91371: LD_INT 1
91373: DEC
91374: ST_TO_ADDR
91375: LD_VAR 0 8
91379: PUSH
91380: FOR_TO
91381: IFFALSE 91576
// begin _d := rand ( 0 , 5 ) ;
91383: LD_ADDR_VAR 0 11
91387: PUSH
91388: LD_INT 0
91390: PPUSH
91391: LD_INT 5
91393: PPUSH
91394: CALL_OW 12
91398: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
91399: LD_ADDR_VAR 0 12
91403: PUSH
91404: LD_INT 2
91406: PPUSH
91407: LD_INT 6
91409: PPUSH
91410: CALL_OW 12
91414: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
91415: LD_ADDR_VAR 0 9
91419: PUSH
91420: LD_VAR 0 2
91424: PPUSH
91425: LD_VAR 0 11
91429: PPUSH
91430: LD_VAR 0 12
91434: PPUSH
91435: CALL_OW 272
91439: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
91440: LD_ADDR_VAR 0 10
91444: PUSH
91445: LD_VAR 0 3
91449: PPUSH
91450: LD_VAR 0 11
91454: PPUSH
91455: LD_VAR 0 12
91459: PPUSH
91460: CALL_OW 273
91464: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
91465: LD_VAR 0 9
91469: PPUSH
91470: LD_VAR 0 10
91474: PPUSH
91475: CALL_OW 488
91479: PUSH
91480: LD_VAR 0 9
91484: PUSH
91485: LD_VAR 0 10
91489: PUSH
91490: EMPTY
91491: LIST
91492: LIST
91493: PUSH
91494: LD_VAR 0 7
91498: IN
91499: NOT
91500: AND
91501: PUSH
91502: LD_VAR 0 9
91506: PPUSH
91507: LD_VAR 0 10
91511: PPUSH
91512: CALL_OW 458
91516: NOT
91517: AND
91518: IFFALSE 91560
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
91520: LD_ADDR_VAR 0 7
91524: PUSH
91525: LD_VAR 0 7
91529: PPUSH
91530: LD_VAR 0 7
91534: PUSH
91535: LD_INT 1
91537: PLUS
91538: PPUSH
91539: LD_VAR 0 9
91543: PUSH
91544: LD_VAR 0 10
91548: PUSH
91549: EMPTY
91550: LIST
91551: LIST
91552: PPUSH
91553: CALL_OW 1
91557: ST_TO_ADDR
91558: GO 91574
// i := i - 1 ;
91560: LD_ADDR_VAR 0 5
91564: PUSH
91565: LD_VAR 0 5
91569: PUSH
91570: LD_INT 1
91572: MINUS
91573: ST_TO_ADDR
// end ;
91574: GO 91380
91576: POP
91577: POP
// for i in tmp do
91578: LD_ADDR_VAR 0 5
91582: PUSH
91583: LD_VAR 0 7
91587: PUSH
91588: FOR_IN
91589: IFFALSE 91627
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
91591: LD_VAR 0 1
91595: PPUSH
91596: LD_VAR 0 5
91600: PUSH
91601: LD_INT 1
91603: ARRAY
91604: PPUSH
91605: LD_VAR 0 5
91609: PUSH
91610: LD_INT 2
91612: ARRAY
91613: PPUSH
91614: CALL 90573 0 3
91618: NOT
91619: IFFALSE 91625
// exit ;
91621: POP
91622: POP
91623: GO 91629
91625: GO 91588
91627: POP
91628: POP
// end ;
91629: LD_VAR 0 4
91633: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
91634: LD_INT 0
91636: PPUSH
91637: PPUSH
91638: PPUSH
91639: PPUSH
91640: PPUSH
91641: PPUSH
91642: PPUSH
// if not GetClass ( unit ) = class_sniper then
91643: LD_VAR 0 1
91647: PPUSH
91648: CALL_OW 257
91652: PUSH
91653: LD_INT 5
91655: EQUAL
91656: NOT
91657: IFFALSE 91661
// exit ;
91659: GO 92049
// dist := 8 ;
91661: LD_ADDR_VAR 0 5
91665: PUSH
91666: LD_INT 8
91668: ST_TO_ADDR
// viewRange := 12 ;
91669: LD_ADDR_VAR 0 7
91673: PUSH
91674: LD_INT 12
91676: ST_TO_ADDR
// side := GetSide ( unit ) ;
91677: LD_ADDR_VAR 0 6
91681: PUSH
91682: LD_VAR 0 1
91686: PPUSH
91687: CALL_OW 255
91691: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
91692: LD_INT 61
91694: PPUSH
91695: LD_VAR 0 6
91699: PPUSH
91700: CALL_OW 321
91704: PUSH
91705: LD_INT 2
91707: EQUAL
91708: IFFALSE 91718
// viewRange := 16 ;
91710: LD_ADDR_VAR 0 7
91714: PUSH
91715: LD_INT 16
91717: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
91718: LD_VAR 0 1
91722: PPUSH
91723: LD_VAR 0 2
91727: PPUSH
91728: LD_VAR 0 3
91732: PPUSH
91733: CALL_OW 297
91737: PUSH
91738: LD_VAR 0 5
91742: GREATER
91743: IFFALSE 91822
// begin ComMoveXY ( unit , x , y ) ;
91745: LD_VAR 0 1
91749: PPUSH
91750: LD_VAR 0 2
91754: PPUSH
91755: LD_VAR 0 3
91759: PPUSH
91760: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
91764: LD_INT 35
91766: PPUSH
91767: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
91771: LD_VAR 0 1
91775: PPUSH
91776: LD_VAR 0 2
91780: PPUSH
91781: LD_VAR 0 3
91785: PPUSH
91786: CALL 65936 0 3
91790: NOT
91791: IFFALSE 91795
// exit ;
91793: GO 92049
// until GetDistUnitXY ( unit , x , y ) < dist ;
91795: LD_VAR 0 1
91799: PPUSH
91800: LD_VAR 0 2
91804: PPUSH
91805: LD_VAR 0 3
91809: PPUSH
91810: CALL_OW 297
91814: PUSH
91815: LD_VAR 0 5
91819: LESS
91820: IFFALSE 91764
// end ; ComTurnXY ( unit , x , y ) ;
91822: LD_VAR 0 1
91826: PPUSH
91827: LD_VAR 0 2
91831: PPUSH
91832: LD_VAR 0 3
91836: PPUSH
91837: CALL_OW 118
// wait ( 5 ) ;
91841: LD_INT 5
91843: PPUSH
91844: CALL_OW 67
// _d := GetDir ( unit ) ;
91848: LD_ADDR_VAR 0 10
91852: PUSH
91853: LD_VAR 0 1
91857: PPUSH
91858: CALL_OW 254
91862: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
91863: LD_ADDR_VAR 0 8
91867: PUSH
91868: LD_VAR 0 1
91872: PPUSH
91873: CALL_OW 250
91877: PPUSH
91878: LD_VAR 0 10
91882: PPUSH
91883: LD_VAR 0 5
91887: PPUSH
91888: CALL_OW 272
91892: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
91893: LD_ADDR_VAR 0 9
91897: PUSH
91898: LD_VAR 0 1
91902: PPUSH
91903: CALL_OW 251
91907: PPUSH
91908: LD_VAR 0 10
91912: PPUSH
91913: LD_VAR 0 5
91917: PPUSH
91918: CALL_OW 273
91922: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
91923: LD_VAR 0 8
91927: PPUSH
91928: LD_VAR 0 9
91932: PPUSH
91933: CALL_OW 488
91937: NOT
91938: IFFALSE 91942
// exit ;
91940: GO 92049
// ComAnimCustom ( unit , 1 ) ;
91942: LD_VAR 0 1
91946: PPUSH
91947: LD_INT 1
91949: PPUSH
91950: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
91954: LD_VAR 0 8
91958: PPUSH
91959: LD_VAR 0 9
91963: PPUSH
91964: LD_VAR 0 6
91968: PPUSH
91969: LD_VAR 0 7
91973: PPUSH
91974: CALL_OW 330
// repeat wait ( 1 ) ;
91978: LD_INT 1
91980: PPUSH
91981: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
91985: LD_VAR 0 1
91989: PPUSH
91990: CALL_OW 316
91994: PUSH
91995: LD_VAR 0 1
91999: PPUSH
92000: CALL_OW 314
92004: OR
92005: PUSH
92006: LD_VAR 0 1
92010: PPUSH
92011: CALL_OW 302
92015: NOT
92016: OR
92017: PUSH
92018: LD_VAR 0 1
92022: PPUSH
92023: CALL_OW 301
92027: OR
92028: IFFALSE 91978
// RemoveSeeing ( _x , _y , side ) ;
92030: LD_VAR 0 8
92034: PPUSH
92035: LD_VAR 0 9
92039: PPUSH
92040: LD_VAR 0 6
92044: PPUSH
92045: CALL_OW 331
// end ; end_of_file
92049: LD_VAR 0 4
92053: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
92054: LD_VAR 0 1
92058: PPUSH
92059: LD_VAR 0 2
92063: PPUSH
92064: LD_VAR 0 3
92068: PPUSH
92069: LD_VAR 0 4
92073: PPUSH
92074: LD_VAR 0 5
92078: PPUSH
92079: LD_VAR 0 6
92083: PPUSH
92084: CALL 71516 0 6
// end ;
92088: PPOPN 6
92090: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
92091: LD_INT 0
92093: PPUSH
// begin if not units then
92094: LD_VAR 0 1
92098: NOT
92099: IFFALSE 92103
// exit ;
92101: GO 92103
// end ;
92103: PPOPN 7
92105: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
92106: CALL 71420 0 0
// end ;
92110: PPOPN 1
92112: END
