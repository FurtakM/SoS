// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 63386 0 0
// Init ;
   8: CALL 62 0 0
// if debug then
  12: LD_EXP 1
  16: IFFALSE 26
// Difficulty := 1 ;
  18: LD_ADDR_OWVAR 67
  22: PUSH
  23: LD_INT 1
  25: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  26: LD_INT 1
  28: PPUSH
  29: LD_INT 3
  31: PPUSH
  32: CALL 6854 0 2
// PrepareArabian ;
  36: CALL 361 0 0
// PrepareRussian ;
  40: CALL 7701 0 0
// Action ;
  44: CALL 15416 0 0
// if debug then
  48: LD_EXP 1
  52: IFFALSE 61
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ;
  61: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 05_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 05_
  80: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_STRING 04_2_GaidarKilled
  88: PPUSH
  89: LD_INT 1
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_STRING 05_ConvoySavedCounter
 104: PPUSH
 105: LD_INT 0
 107: PPUSH
 108: CALL_OW 30
 112: ST_TO_ADDR
// bergkampfArrived := false ;
 113: LD_ADDR_EXP 3
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// omarArrived := false ;
 121: LD_ADDR_EXP 6
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// outpostDestroyed := false ;
 129: LD_ADDR_EXP 4
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// ruLoseCounter := 0 ;
 137: LD_ADDR_EXP 5
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// rolfScriptBase := false ;
 145: LD_ADDR_EXP 9
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// omarScriptBase := false ;
 153: LD_ADDR_EXP 10
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// linkedWithRolf := 0 ;
 161: LD_ADDR_EXP 12
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 169: LD_ADDR_EXP 26
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// rolfDied := false ;
 177: LD_ADDR_EXP 13
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// leninSpotted := false ;
 185: LD_ADDR_EXP 14
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// mortarConstructed := false ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// rolfHasVehicles := false ;
 201: LD_ADDR_EXP 16
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// leninScriptBase := true ;
 209: LD_ADDR_EXP 11
 213: PUSH
 214: LD_INT 1
 216: ST_TO_ADDR
// rolfWantVehicles := false ;
 217: LD_ADDR_EXP 17
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// omarWantVehicles := false ;
 225: LD_ADDR_EXP 18
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// omarHasVehicles := false ;
 233: LD_ADDR_EXP 22
 237: PUSH
 238: LD_INT 0
 240: ST_TO_ADDR
// escapeAllowed := false ;
 241: LD_ADDR_EXP 24
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 8 8$00 , 6 6$00 , 5 5$00 ] [ Difficulty ] ;
 249: LD_ADDR_EXP 19
 253: PUSH
 254: LD_INT 16800
 256: PUSH
 257: LD_INT 12600
 259: PUSH
 260: LD_INT 10500
 262: PUSH
 263: EMPTY
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] ;
 274: LD_ADDR_EXP 20
 278: PUSH
 279: LD_INT 21000
 281: PUSH
 282: LD_INT 18900
 284: PUSH
 285: LD_INT 16800
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: LIST
 292: PUSH
 293: LD_OWVAR 67
 297: ARRAY
 298: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 ] [ Difficulty ] ;
 299: LD_ADDR_EXP 21
 303: PUSH
 304: LD_INT 4
 306: PUSH
 307: LD_INT 5
 309: PUSH
 310: LD_INT 6
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: PUSH
 318: LD_OWVAR 67
 322: ARRAY
 323: ST_TO_ADDR
// omarAttack := false ;
 324: LD_ADDR_EXP 23
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// disableAttackOnHeike := false ;
 332: LD_ADDR_EXP 27
 336: PUSH
 337: LD_INT 0
 339: ST_TO_ADDR
// escapeTimer := 4 4$00 ;
 340: LD_ADDR_EXP 25
 344: PUSH
 345: LD_INT 8400
 347: ST_TO_ADDR
// firstAttack := true ;
 348: LD_ADDR_EXP 28
 352: PUSH
 353: LD_INT 1
 355: ST_TO_ADDR
// end ; end_of_file
 356: LD_VAR 0 1
 360: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , tmp ; begin
 361: LD_INT 0
 363: PPUSH
 364: PPUSH
 365: PPUSH
 366: PPUSH
 367: PPUSH
 368: PPUSH
 369: PPUSH
 370: PPUSH
 371: PPUSH
 372: PPUSH
 373: PPUSH
 374: PPUSH
// uc_nation := 2 ;
 375: LD_ADDR_OWVAR 21
 379: PUSH
 380: LD_INT 2
 382: ST_TO_ADDR
// uc_side := 5 ;
 383: LD_ADDR_OWVAR 20
 387: PUSH
 388: LD_INT 5
 390: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 391: LD_ADDR_EXP 37
 395: PUSH
 396: LD_STRING Abdul
 398: PPUSH
 399: LD_INT 0
 401: PPUSH
 402: LD_STRING 
 404: PPUSH
 405: CALL 24631 0 3
 409: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 410: LD_ADDR_EXP 39
 414: PUSH
 415: LD_STRING Omar
 417: PPUSH
 418: LD_INT 0
 420: PPUSH
 421: LD_STRING 
 423: PPUSH
 424: CALL 24631 0 3
 428: ST_TO_ADDR
// uc_side := 2 ;
 429: LD_ADDR_OWVAR 20
 433: PUSH
 434: LD_INT 2
 436: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 437: LD_ADDR_EXP 29
 441: PUSH
 442: LD_STRING Heike
 444: PPUSH
 445: LD_EXP 1
 449: NOT
 450: PPUSH
 451: LD_EXP 2
 455: PPUSH
 456: CALL 24631 0 3
 460: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 461: LD_ADDR_EXP 32
 465: PUSH
 466: LD_STRING Ibrahim
 468: PPUSH
 469: LD_EXP 1
 473: NOT
 474: PPUSH
 475: LD_EXP 2
 479: PPUSH
 480: CALL 24631 0 3
 484: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 485: LD_ADDR_EXP 30
 489: PUSH
 490: LD_STRING Givi
 492: PPUSH
 493: LD_EXP 1
 497: NOT
 498: PPUSH
 499: LD_EXP 2
 503: PPUSH
 504: CALL 24631 0 3
 508: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 509: LD_ADDR_EXP 33
 513: PUSH
 514: LD_STRING Kamil
 516: PPUSH
 517: LD_EXP 1
 521: NOT
 522: PPUSH
 523: LD_EXP 2
 527: PPUSH
 528: CALL 24631 0 3
 532: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 533: LD_ADDR_EXP 34
 537: PUSH
 538: LD_STRING Kaia
 540: PPUSH
 541: LD_EXP 1
 545: NOT
 546: PPUSH
 547: LD_EXP 2
 551: PPUSH
 552: CALL 24631 0 3
 556: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 557: LD_ADDR_EXP 35
 561: PUSH
 562: LD_STRING Sophia
 564: PPUSH
 565: LD_EXP 1
 569: NOT
 570: PPUSH
 571: LD_EXP 2
 575: PPUSH
 576: CALL 24631 0 3
 580: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 581: LD_ADDR_EXP 36
 585: PUSH
 586: LD_STRING Markov
 588: PPUSH
 589: LD_EXP 1
 593: NOT
 594: PPUSH
 595: LD_EXP 2
 599: PPUSH
 600: CALL 24631 0 3
 604: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 605: LD_ADDR_EXP 41
 609: PUSH
 610: LD_STRING Aviradze
 612: PPUSH
 613: LD_EXP 1
 617: NOT
 618: PPUSH
 619: LD_EXP 2
 623: PPUSH
 624: CALL 24631 0 3
 628: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 629: LD_ADDR_EXP 40
 633: PUSH
 634: LD_STRING Kurt
 636: PPUSH
 637: LD_EXP 1
 641: NOT
 642: PPUSH
 643: LD_EXP 2
 647: PPUSH
 648: CALL 24631 0 3
 652: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 653: LD_ADDR_EXP 31
 657: PUSH
 658: LD_STRING Mike
 660: PPUSH
 661: LD_EXP 1
 665: NOT
 666: PPUSH
 667: LD_EXP 2
 671: PPUSH
 672: CALL 24631 0 3
 676: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 677: LD_ADDR_EXP 38
 681: PUSH
 682: LD_STRING Olaf
 684: PPUSH
 685: LD_INT 0
 687: PPUSH
 688: LD_STRING 
 690: PPUSH
 691: CALL 24631 0 3
 695: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 696: LD_ADDR_EXP 44
 700: PUSH
 701: LD_STRING 05_others
 703: PPUSH
 704: CALL_OW 31
 708: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 709: LD_ADDR_EXP 45
 713: PUSH
 714: LD_STRING 05_apes
 716: PPUSH
 717: CALL_OW 31
 721: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 722: LD_ADDR_VAR 0 5
 726: PUSH
 727: LD_STRING 05_Radar
 729: PPUSH
 730: LD_EXP 1
 734: PPUSH
 735: CALL_OW 30
 739: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 740: LD_ADDR_VAR 0 6
 744: PUSH
 745: LD_STRING 05_RemoteControl
 747: PPUSH
 748: LD_EXP 1
 752: PPUSH
 753: CALL_OW 30
 757: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 758: LD_ADDR_VAR 0 7
 762: PUSH
 763: LD_STRING 05_DrugsTested
 765: PPUSH
 766: LD_EXP 1
 770: PPUSH
 771: CALL_OW 30
 775: ST_TO_ADDR
// if hasDrugs then
 776: LD_VAR 0 7
 780: IFFALSE 795
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 782: LD_INT 5
 784: PPUSH
 785: LD_INT 2
 787: PPUSH
 788: LD_INT 2
 790: PPUSH
 791: CALL_OW 322
// if hasRadar then
 795: LD_VAR 0 5
 799: IFFALSE 814
// SetTech ( tech_radar , 2 , state_researched ) ;
 801: LD_INT 6
 803: PPUSH
 804: LD_INT 2
 806: PPUSH
 807: LD_INT 2
 809: PPUSH
 810: CALL_OW 322
// if hasRemote then
 814: LD_VAR 0 6
 818: IFFALSE 833
// SetTech ( tech_remCont , 2 , state_researched ) ;
 820: LD_INT 15
 822: PPUSH
 823: LD_INT 2
 825: PPUSH
 826: LD_INT 2
 828: PPUSH
 829: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 833: LD_ADDR_VAR 0 12
 837: PUSH
 838: LD_INT 5
 840: PPUSH
 841: LD_INT 0
 843: PPUSH
 844: CALL_OW 517
 848: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 849: LD_ADDR_VAR 0 2
 853: PUSH
 854: DOUBLE
 855: LD_INT 1
 857: DEC
 858: ST_TO_ADDR
 859: LD_VAR 0 12
 863: PUSH
 864: LD_INT 1
 866: ARRAY
 867: PUSH
 868: FOR_TO
 869: IFFALSE 946
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
 871: LD_VAR 0 12
 875: PUSH
 876: LD_INT 1
 878: ARRAY
 879: PUSH
 880: LD_VAR 0 2
 884: ARRAY
 885: PPUSH
 886: LD_VAR 0 12
 890: PUSH
 891: LD_INT 2
 893: ARRAY
 894: PUSH
 895: LD_VAR 0 2
 899: ARRAY
 900: PPUSH
 901: CALL_OW 351
 905: IFFALSE 944
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
 907: LD_VAR 0 12
 911: PUSH
 912: LD_INT 1
 914: ARRAY
 915: PUSH
 916: LD_VAR 0 2
 920: ARRAY
 921: PPUSH
 922: LD_VAR 0 12
 926: PUSH
 927: LD_INT 2
 929: ARRAY
 930: PUSH
 931: LD_VAR 0 2
 935: ARRAY
 936: PPUSH
 937: LD_INT 2
 939: PPUSH
 940: CALL_OW 244
 944: GO 868
 946: POP
 947: POP
// base := [ [ b_depot , 206 , 80 , 1 ] , [ b_bunker , 221 , 95 , 5 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 ] , [ b_lab_full , 217 , 78 , 4 ] , [ b_solar_power , 220 , 99 , 1 ] , [ b_solar_power , 220 , 103 , 1 ] , [ b_solar_power , 216 , 102 , 1 ] , [ b_ext_gun , 203 , 94 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 ] , [ b_ext_track , 199 , 91 , 1 ] , [ b_oil_power , 197 , 81 , 1 ] , [ b_oil_power , 197 , 78 , 3 ] ] ;
 948: LD_ADDR_VAR 0 4
 952: PUSH
 953: LD_INT 0
 955: PUSH
 956: LD_INT 206
 958: PUSH
 959: LD_INT 80
 961: PUSH
 962: LD_INT 1
 964: PUSH
 965: EMPTY
 966: LIST
 967: LIST
 968: LIST
 969: LIST
 970: PUSH
 971: LD_INT 32
 973: PUSH
 974: LD_INT 221
 976: PUSH
 977: LD_INT 95
 979: PUSH
 980: LD_INT 5
 982: PUSH
 983: LD_INT 23
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_INT 32
 995: PUSH
 996: LD_INT 223
 998: PUSH
 999: LD_INT 88
1001: PUSH
1002: LD_INT 5
1004: PUSH
1005: LD_INT 24
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: LIST
1014: PUSH
1015: LD_INT 32
1017: PUSH
1018: LD_INT 202
1020: PUSH
1021: LD_INT 64
1023: PUSH
1024: LD_INT 2
1026: PUSH
1027: LD_INT 25
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: PUSH
1037: LD_INT 3
1039: PUSH
1040: LD_INT 203
1042: PUSH
1043: LD_INT 91
1045: PUSH
1046: LD_INT 1
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: PUSH
1055: LD_INT 8
1057: PUSH
1058: LD_INT 217
1060: PUSH
1061: LD_INT 78
1063: PUSH
1064: LD_INT 4
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: PUSH
1073: LD_INT 27
1075: PUSH
1076: LD_INT 220
1078: PUSH
1079: LD_INT 99
1081: PUSH
1082: LD_INT 1
1084: PUSH
1085: EMPTY
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: PUSH
1091: LD_INT 27
1093: PUSH
1094: LD_INT 220
1096: PUSH
1097: LD_INT 103
1099: PUSH
1100: LD_INT 1
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_INT 27
1111: PUSH
1112: LD_INT 216
1114: PUSH
1115: LD_INT 102
1117: PUSH
1118: LD_INT 1
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_INT 17
1129: PUSH
1130: LD_INT 203
1132: PUSH
1133: LD_INT 94
1135: PUSH
1136: LD_INT 0
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: PUSH
1145: LD_INT 23
1147: PUSH
1148: LD_INT 200
1150: PUSH
1151: LD_INT 88
1153: PUSH
1154: LD_INT 2
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: PUSH
1163: LD_INT 16
1165: PUSH
1166: LD_INT 199
1168: PUSH
1169: LD_INT 91
1171: PUSH
1172: LD_INT 1
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: LIST
1179: LIST
1180: PUSH
1181: LD_INT 26
1183: PUSH
1184: LD_INT 197
1186: PUSH
1187: LD_INT 81
1189: PUSH
1190: LD_INT 1
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: PUSH
1199: LD_INT 26
1201: PUSH
1202: LD_INT 197
1204: PUSH
1205: LD_INT 78
1207: PUSH
1208: LD_INT 3
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: LIST
1215: LIST
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: ST_TO_ADDR
// if hasRadar then
1233: LD_VAR 0 5
1237: IFFALSE 1281
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 ] ) ;
1239: LD_ADDR_VAR 0 4
1243: PUSH
1244: LD_VAR 0 4
1248: PPUSH
1249: LD_VAR 0 4
1253: PUSH
1254: LD_INT 1
1256: PLUS
1257: PPUSH
1258: LD_INT 20
1260: PUSH
1261: LD_INT 203
1263: PUSH
1264: LD_INT 87
1266: PUSH
1267: LD_INT 3
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: PPUSH
1276: CALL_OW 1
1280: ST_TO_ADDR
// if hasRemote then
1281: LD_VAR 0 6
1285: IFFALSE 1329
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 ] ) ;
1287: LD_ADDR_VAR 0 4
1291: PUSH
1292: LD_VAR 0 4
1296: PPUSH
1297: LD_VAR 0 4
1301: PUSH
1302: LD_INT 1
1304: PLUS
1305: PPUSH
1306: LD_INT 22
1308: PUSH
1309: LD_INT 207
1311: PUSH
1312: LD_INT 95
1314: PUSH
1315: LD_INT 5
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: PPUSH
1324: CALL_OW 1
1328: ST_TO_ADDR
// for i in base do
1329: LD_ADDR_VAR 0 2
1333: PUSH
1334: LD_VAR 0 4
1338: PUSH
1339: FOR_IN
1340: IFFALSE 1521
// begin bc_type := i [ 1 ] ;
1342: LD_ADDR_OWVAR 42
1346: PUSH
1347: LD_VAR 0 2
1351: PUSH
1352: LD_INT 1
1354: ARRAY
1355: ST_TO_ADDR
// bc_level := 3 ;
1356: LD_ADDR_OWVAR 43
1360: PUSH
1361: LD_INT 3
1363: ST_TO_ADDR
// if i [ 1 ] = b_lab_full then
1364: LD_VAR 0 2
1368: PUSH
1369: LD_INT 1
1371: ARRAY
1372: PUSH
1373: LD_INT 8
1375: EQUAL
1376: IFFALSE 1411
// begin bc_kind1 := b_lab_weapon ;
1378: LD_ADDR_OWVAR 44
1382: PUSH
1383: LD_INT 10
1385: ST_TO_ADDR
// if hasRadar then
1386: LD_VAR 0 5
1390: IFFALSE 1402
// bc_kind2 := b_lab_opto else
1392: LD_ADDR_OWVAR 45
1396: PUSH
1397: LD_INT 15
1399: ST_TO_ADDR
1400: GO 1411
// bc_kind2 := - 1 ;
1402: LD_ADDR_OWVAR 45
1406: PUSH
1407: LD_INT 1
1409: NEG
1410: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1411: LD_ADDR_VAR 0 3
1415: PUSH
1416: LD_VAR 0 2
1420: PUSH
1421: LD_INT 2
1423: ARRAY
1424: PPUSH
1425: LD_VAR 0 2
1429: PUSH
1430: LD_INT 3
1432: ARRAY
1433: PPUSH
1434: LD_VAR 0 2
1438: PUSH
1439: LD_INT 4
1441: ARRAY
1442: PPUSH
1443: CALL_OW 47
1447: ST_TO_ADDR
// if i > 4 then
1448: LD_VAR 0 2
1452: PUSH
1453: LD_INT 4
1455: GREATER
1456: IFFALSE 1476
// PlaceWeaponTurret ( b , i [ 5 ] ) ;
1458: LD_VAR 0 3
1462: PPUSH
1463: LD_VAR 0 2
1467: PUSH
1468: LD_INT 5
1470: ARRAY
1471: PPUSH
1472: CALL_OW 431
// if i [ 1 ] = b_bunker then
1476: LD_VAR 0 2
1480: PUSH
1481: LD_INT 1
1483: ARRAY
1484: PUSH
1485: LD_INT 32
1487: EQUAL
1488: IFFALSE 1519
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
1490: LD_ADDR_VAR 0 11
1494: PUSH
1495: LD_VAR 0 11
1499: PPUSH
1500: LD_VAR 0 11
1504: PUSH
1505: LD_INT 1
1507: PLUS
1508: PPUSH
1509: LD_VAR 0 3
1513: PPUSH
1514: CALL_OW 1
1518: ST_TO_ADDR
// end ;
1519: GO 1339
1521: POP
1522: POP
// depot := HexInfo ( 206 , 80 ) ;
1523: LD_ADDR_VAR 0 9
1527: PUSH
1528: LD_INT 206
1530: PPUSH
1531: LD_INT 80
1533: PPUSH
1534: CALL_OW 428
1538: ST_TO_ADDR
// factory := HexInfo ( 203 , 91 ) ;
1539: LD_ADDR_VAR 0 8
1543: PUSH
1544: LD_INT 203
1546: PPUSH
1547: LD_INT 91
1549: PPUSH
1550: CALL_OW 428
1554: ST_TO_ADDR
// lab := HexInfo ( 217 , 78 ) ;
1555: LD_ADDR_VAR 0 10
1559: PUSH
1560: LD_INT 217
1562: PPUSH
1563: LD_INT 78
1565: PPUSH
1566: CALL_OW 428
1570: ST_TO_ADDR
// arDepot := depot ;
1571: LD_ADDR_EXP 43
1575: PUSH
1576: LD_VAR 0 9
1580: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 160 ] [ Difficulty ] ) ;
1581: LD_VAR 0 9
1585: PPUSH
1586: CALL_OW 274
1590: PPUSH
1591: LD_INT 1
1593: PPUSH
1594: LD_INT 360
1596: PUSH
1597: LD_INT 260
1599: PUSH
1600: LD_INT 160
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: PUSH
1608: LD_OWVAR 67
1612: ARRAY
1613: PPUSH
1614: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 130 ] [ Difficulty ] ) ;
1618: LD_VAR 0 9
1622: PPUSH
1623: CALL_OW 274
1627: PPUSH
1628: LD_INT 2
1630: PPUSH
1631: LD_INT 200
1633: PUSH
1634: LD_INT 170
1636: PUSH
1637: LD_INT 130
1639: PUSH
1640: EMPTY
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: LD_OWVAR 67
1649: ARRAY
1650: PPUSH
1651: CALL_OW 277
// uc_nation := 2 ;
1655: LD_ADDR_OWVAR 21
1659: PUSH
1660: LD_INT 2
1662: ST_TO_ADDR
// uc_side := 2 ;
1663: LD_ADDR_OWVAR 20
1667: PUSH
1668: LD_INT 2
1670: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
1671: LD_INT 13
1673: PPUSH
1674: LD_INT 1
1676: PPUSH
1677: LD_INT 1
1679: PPUSH
1680: LD_INT 27
1682: PPUSH
1683: LD_INT 33
1685: PPUSH
1686: CALL 29495 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
1690: CALL_OW 45
1694: PPUSH
1695: LD_INT 190
1697: PPUSH
1698: LD_INT 64
1700: PPUSH
1701: LD_INT 5
1703: PPUSH
1704: LD_INT 0
1706: PPUSH
1707: CALL 63300 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
1711: LD_INT 13
1713: PPUSH
1714: LD_INT 1
1716: PPUSH
1717: LD_INT 1
1719: PPUSH
1720: LD_INT 25
1722: PPUSH
1723: LD_INT 22
1725: PPUSH
1726: CALL 29495 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
1730: CALL_OW 45
1734: PPUSH
1735: LD_INT 188
1737: PPUSH
1738: LD_INT 67
1740: PPUSH
1741: LD_INT 5
1743: PPUSH
1744: LD_INT 0
1746: PPUSH
1747: CALL 63300 0 5
// if hasRemote then
1751: LD_VAR 0 6
1755: IFFALSE 1837
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_control_tower , 35 ) ;
1757: LD_INT 13
1759: PPUSH
1760: LD_INT 1
1762: PPUSH
1763: LD_INT 1
1765: PPUSH
1766: LD_INT 31
1768: PPUSH
1769: LD_INT 35
1771: PPUSH
1772: CALL 29495 0 5
// PlaceUnitXYD ( CreateVehicle , 191 , 71 , 5 , false ) ;
1776: CALL_OW 45
1780: PPUSH
1781: LD_INT 191
1783: PPUSH
1784: LD_INT 71
1786: PPUSH
1787: LD_INT 5
1789: PPUSH
1790: LD_INT 0
1792: PPUSH
1793: CALL 63300 0 5
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_remote , ar_gun , 55 ) ;
1797: LD_INT 14
1799: PPUSH
1800: LD_INT 1
1802: PPUSH
1803: LD_INT 2
1805: PPUSH
1806: LD_INT 27
1808: PPUSH
1809: LD_INT 55
1811: PPUSH
1812: CALL 29495 0 5
// PlaceUnitXYD ( CreateVehicle , 199 , 67 , 0 , false ) ;
1816: CALL_OW 45
1820: PPUSH
1821: LD_INT 199
1823: PPUSH
1824: LD_INT 67
1826: PPUSH
1827: LD_INT 0
1829: PPUSH
1830: LD_INT 0
1832: PPUSH
1833: CALL 63300 0 5
// end ; PlaceUnitXY ( Heike , 213 , 87 , false ) ;
1837: LD_EXP 29
1841: PPUSH
1842: LD_INT 213
1844: PPUSH
1845: LD_INT 87
1847: PPUSH
1848: LD_INT 0
1850: PPUSH
1851: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
1855: LD_EXP 29
1859: PPUSH
1860: LD_INT 214
1862: PPUSH
1863: LD_INT 87
1865: PPUSH
1866: CALL_OW 118
// if Kaia then
1870: LD_EXP 34
1874: IFFALSE 1909
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
1876: LD_EXP 34
1880: PPUSH
1881: LD_INT 213
1883: PPUSH
1884: LD_INT 85
1886: PPUSH
1887: LD_INT 0
1889: PPUSH
1890: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
1894: LD_EXP 34
1898: PPUSH
1899: LD_INT 215
1901: PPUSH
1902: LD_INT 87
1904: PPUSH
1905: CALL_OW 118
// end ; if Olaf and Kaia then
1909: LD_EXP 38
1913: PUSH
1914: LD_EXP 34
1918: AND
1919: IFFALSE 1956
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
1921: LD_EXP 38
1925: PPUSH
1926: LD_INT 215
1928: PPUSH
1929: LD_INT 87
1931: PPUSH
1932: LD_INT 0
1934: PPUSH
1935: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
1939: LD_EXP 38
1943: PPUSH
1944: LD_INT 213
1946: PPUSH
1947: LD_INT 85
1949: PPUSH
1950: CALL_OW 118
// end else
1954: GO 1976
// if Olaf then
1956: LD_EXP 38
1960: IFFALSE 1976
// PlaceHumanInUnit ( Olaf , factory ) ;
1962: LD_EXP 38
1966: PPUSH
1967: LD_VAR 0 8
1971: PPUSH
1972: CALL_OW 52
// if Givi then
1976: LD_EXP 30
1980: IFFALSE 2061
// begin if Kaia and Olaf then
1982: LD_EXP 34
1986: PUSH
1987: LD_EXP 38
1991: AND
1992: IFFALSE 2029
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
1994: LD_EXP 30
1998: PPUSH
1999: LD_INT 247
2001: PPUSH
2002: LD_INT 117
2004: PPUSH
2005: LD_INT 0
2007: PPUSH
2008: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2012: LD_EXP 30
2016: PPUSH
2017: LD_INT 248
2019: PPUSH
2020: LD_INT 118
2022: PPUSH
2023: CALL_OW 118
// end else
2027: GO 2061
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2029: LD_EXP 30
2033: PPUSH
2034: LD_INT 216
2036: PPUSH
2037: LD_INT 88
2039: PPUSH
2040: LD_INT 0
2042: PPUSH
2043: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2047: LD_EXP 30
2051: PPUSH
2052: LD_EXP 29
2056: PPUSH
2057: CALL_OW 119
// end ; end ; if Kurt then
2061: LD_EXP 40
2065: IFFALSE 2085
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2067: LD_EXP 40
2071: PPUSH
2072: LD_VAR 0 11
2076: PUSH
2077: LD_INT 2
2079: ARRAY
2080: PPUSH
2081: CALL_OW 52
// if Mike then
2085: LD_EXP 31
2089: IFFALSE 2109
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2091: LD_EXP 31
2095: PPUSH
2096: LD_VAR 0 11
2100: PUSH
2101: LD_INT 3
2103: ARRAY
2104: PPUSH
2105: CALL_OW 52
// if Kamil then
2109: LD_EXP 33
2113: IFFALSE 2175
// begin if Kaia and Olaf then
2115: LD_EXP 34
2119: PUSH
2120: LD_EXP 38
2124: AND
2125: IFFALSE 2143
// PlaceHumanInUnit ( Kamil , depot ) else
2127: LD_EXP 33
2131: PPUSH
2132: LD_VAR 0 9
2136: PPUSH
2137: CALL_OW 52
2141: GO 2175
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
2143: LD_EXP 33
2147: PPUSH
2148: LD_INT 213
2150: PPUSH
2151: LD_INT 87
2153: PPUSH
2154: LD_INT 0
2156: PPUSH
2157: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
2161: LD_EXP 33
2165: PPUSH
2166: LD_EXP 29
2170: PPUSH
2171: CALL_OW 119
// end ; end ; if Sophia then
2175: LD_EXP 35
2179: IFFALSE 2195
// PlaceHumanInUnit ( Sophia , depot ) ;
2181: LD_EXP 35
2185: PPUSH
2186: LD_VAR 0 9
2190: PPUSH
2191: CALL_OW 52
// if Aviradze then
2195: LD_EXP 41
2199: IFFALSE 2215
// PlaceHumanInUnit ( Aviradze , lab ) ;
2201: LD_EXP 41
2205: PPUSH
2206: LD_VAR 0 10
2210: PPUSH
2211: CALL_OW 52
// if Ibrahim then
2215: LD_EXP 32
2219: IFFALSE 2235
// PlaceHumanInUnit ( Ibrahim , lab ) ;
2221: LD_EXP 32
2225: PPUSH
2226: LD_VAR 0 10
2230: PPUSH
2231: CALL_OW 52
// if Markov then
2235: LD_EXP 36
2239: IFFALSE 2255
// PlaceHumanInUnit ( Markov , factory ) ;
2241: LD_EXP 36
2245: PPUSH
2246: LD_VAR 0 8
2250: PPUSH
2251: CALL_OW 52
// if heikeSecondSquad then
2255: LD_EXP 44
2259: IFFALSE 2299
// for i in heikeSecondSquad do
2261: LD_ADDR_VAR 0 2
2265: PUSH
2266: LD_EXP 44
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2297
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
2274: LD_VAR 0 2
2278: PPUSH
2279: LD_INT 190
2281: PPUSH
2282: LD_INT 65
2284: PPUSH
2285: LD_INT 5
2287: PPUSH
2288: LD_INT 0
2290: PPUSH
2291: CALL_OW 50
2295: GO 2271
2297: POP
2298: POP
// if heikeApes then
2299: LD_EXP 45
2303: IFFALSE 2343
// for i in heikeApes do
2305: LD_ADDR_VAR 0 2
2309: PUSH
2310: LD_EXP 45
2314: PUSH
2315: FOR_IN
2316: IFFALSE 2341
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
2318: LD_VAR 0 2
2322: PPUSH
2323: LD_INT 190
2325: PPUSH
2326: LD_INT 70
2328: PPUSH
2329: LD_INT 5
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: CALL_OW 50
2339: GO 2315
2341: POP
2342: POP
// end ;
2343: LD_VAR 0 1
2347: RET
// export function PrepareRolfSquad ; var i , j ; begin
2348: LD_INT 0
2350: PPUSH
2351: PPUSH
2352: PPUSH
// uc_side := 8 ;
2353: LD_ADDR_OWVAR 20
2357: PUSH
2358: LD_INT 8
2360: ST_TO_ADDR
// uc_nation := 2 ;
2361: LD_ADDR_OWVAR 21
2365: PUSH
2366: LD_INT 2
2368: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
2369: LD_ADDR_EXP 42
2373: PUSH
2374: LD_STRING Bergkamp
2376: PPUSH
2377: CALL_OW 25
2381: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
2382: LD_ADDR_EXP 46
2386: PUSH
2387: LD_EXP 42
2391: PUSH
2392: EMPTY
2393: LIST
2394: ST_TO_ADDR
// for i := 1 to 4 do
2395: LD_ADDR_VAR 0 2
2399: PUSH
2400: DOUBLE
2401: LD_INT 1
2403: DEC
2404: ST_TO_ADDR
2405: LD_INT 4
2407: PUSH
2408: FOR_TO
2409: IFFALSE 2489
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
2411: LD_ADDR_VAR 0 3
2415: PUSH
2416: DOUBLE
2417: LD_INT 1
2419: DEC
2420: ST_TO_ADDR
2421: LD_INT 5
2423: PUSH
2424: LD_INT 2
2426: PUSH
2427: LD_INT 3
2429: PUSH
2430: LD_INT 1
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: PUSH
2439: LD_VAR 0 2
2443: ARRAY
2444: PUSH
2445: FOR_TO
2446: IFFALSE 2485
// begin PrepareHuman ( false , i , 5 ) ;
2448: LD_INT 0
2450: PPUSH
2451: LD_VAR 0 2
2455: PPUSH
2456: LD_INT 5
2458: PPUSH
2459: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
2463: LD_ADDR_EXP 46
2467: PUSH
2468: LD_EXP 46
2472: PPUSH
2473: CALL_OW 44
2477: PPUSH
2478: CALL 61369 0 2
2482: ST_TO_ADDR
// end ;
2483: GO 2445
2485: POP
2486: POP
// end ;
2487: GO 2408
2489: POP
2490: POP
// if HexInfo ( 5 , 3 ) then
2491: LD_INT 5
2493: PPUSH
2494: LD_INT 3
2496: PPUSH
2497: CALL_OW 428
2501: IFFALSE 2518
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
2503: LD_INT 5
2505: PPUSH
2506: LD_INT 3
2508: PPUSH
2509: CALL_OW 428
2513: PPUSH
2514: CALL_OW 64
// for i in rolfSquad do
2518: LD_ADDR_VAR 0 2
2522: PUSH
2523: LD_EXP 46
2527: PUSH
2528: FOR_IN
2529: IFFALSE 2665
// begin uc_direction := 2 ;
2531: LD_ADDR_OWVAR 24
2535: PUSH
2536: LD_INT 2
2538: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
2539: LD_VAR 0 2
2543: PPUSH
2544: CALL_OW 257
2548: PUSH
2549: LD_INT 3
2551: EQUAL
2552: IFFALSE 2626
// begin uc_side := 8 ;
2554: LD_ADDR_OWVAR 20
2558: PUSH
2559: LD_INT 8
2561: ST_TO_ADDR
// uc_nation := 2 ;
2562: LD_ADDR_OWVAR 21
2566: PUSH
2567: LD_INT 2
2569: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
2570: LD_INT 13
2572: PPUSH
2573: LD_INT 1
2575: PPUSH
2576: LD_INT 1
2578: PPUSH
2579: LD_INT 27
2581: PPUSH
2582: LD_INT 88
2584: PPUSH
2585: CALL 29495 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
2589: CALL_OW 45
2593: PPUSH
2594: LD_INT 11
2596: PPUSH
2597: LD_INT 0
2599: PPUSH
2600: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
2604: LD_VAR 0 2
2608: PPUSH
2609: LD_INT 5
2611: PPUSH
2612: LD_INT 3
2614: PPUSH
2615: CALL_OW 428
2619: PPUSH
2620: CALL_OW 52
// end else
2624: GO 2641
// PlaceUnitArea ( i , northSpawn , false ) ;
2626: LD_VAR 0 2
2630: PPUSH
2631: LD_INT 11
2633: PPUSH
2634: LD_INT 0
2636: PPUSH
2637: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
2641: LD_VAR 0 2
2645: PPUSH
2646: LD_INT 29
2648: PPUSH
2649: LD_INT 10
2651: PPUSH
2652: CALL_OW 111
// wait ( 0 0$2 ) ;
2656: LD_INT 70
2658: PPUSH
2659: CALL_OW 67
// end ;
2663: GO 2528
2665: POP
2666: POP
// wait ( 0 0$5 ) ;
2667: LD_INT 175
2669: PPUSH
2670: CALL_OW 67
// end ;
2674: LD_VAR 0 1
2678: RET
// export function PrepareRolfBase ; var i , tmp ; begin
2679: LD_INT 0
2681: PPUSH
2682: PPUSH
2683: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
2684: LD_EXP 42
2688: PPUSH
2689: LD_INT 94
2691: PPUSH
2692: LD_INT 63
2694: PPUSH
2695: CALL_OW 428
2699: PPUSH
2700: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
2704: LD_ADDR_VAR 0 3
2708: PUSH
2709: LD_INT 4
2711: PUSH
2712: LD_INT 82
2714: PUSH
2715: LD_INT 64
2717: PUSH
2718: LD_INT 1
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: LIST
2725: LIST
2726: PUSH
2727: LD_INT 31
2729: PUSH
2730: LD_INT 73
2732: PUSH
2733: LD_INT 58
2735: PUSH
2736: LD_INT 0
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: LIST
2743: LIST
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: ST_TO_ADDR
// for i in tmp do
2749: LD_ADDR_VAR 0 2
2753: PUSH
2754: LD_VAR 0 3
2758: PUSH
2759: FOR_IN
2760: IFFALSE 2824
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2762: LD_EXP 46
2766: PPUSH
2767: LD_INT 25
2769: PUSH
2770: LD_INT 2
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PPUSH
2777: CALL_OW 72
2781: PPUSH
2782: LD_VAR 0 2
2786: PUSH
2787: LD_INT 1
2789: ARRAY
2790: PPUSH
2791: LD_VAR 0 2
2795: PUSH
2796: LD_INT 2
2798: ARRAY
2799: PPUSH
2800: LD_VAR 0 2
2804: PUSH
2805: LD_INT 3
2807: ARRAY
2808: PPUSH
2809: LD_VAR 0 2
2813: PUSH
2814: LD_INT 4
2816: ARRAY
2817: PPUSH
2818: CALL_OW 205
2822: GO 2759
2824: POP
2825: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
2826: LD_EXP 46
2830: PUSH
2831: LD_INT 2
2833: ARRAY
2834: PPUSH
2835: LD_INT 63
2837: PPUSH
2838: LD_INT 42
2840: PPUSH
2841: CALL_OW 428
2845: PPUSH
2846: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
2850: LD_EXP 46
2854: PUSH
2855: LD_INT 3
2857: ARRAY
2858: PPUSH
2859: LD_INT 94
2861: PPUSH
2862: LD_INT 63
2864: PPUSH
2865: CALL_OW 428
2869: PPUSH
2870: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2874: LD_INT 35
2876: PPUSH
2877: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
2881: LD_EXP 46
2885: PPUSH
2886: LD_INT 25
2888: PUSH
2889: LD_INT 2
2891: PUSH
2892: EMPTY
2893: LIST
2894: LIST
2895: PUSH
2896: LD_INT 3
2898: PUSH
2899: LD_INT 60
2901: PUSH
2902: EMPTY
2903: LIST
2904: PUSH
2905: EMPTY
2906: LIST
2907: LIST
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: PPUSH
2913: CALL_OW 72
2917: IFFALSE 2874
// rolfScriptBase := true ;
2919: LD_ADDR_EXP 9
2923: PUSH
2924: LD_INT 1
2926: ST_TO_ADDR
// end ;
2927: LD_VAR 0 1
2931: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
2932: LD_EXP 9
2936: PUSH
2937: LD_EXP 42
2941: PPUSH
2942: CALL_OW 255
2946: PUSH
2947: LD_INT 8
2949: EQUAL
2950: AND
2951: IFFALSE 3958
2953: GO 2955
2955: DISABLE
2956: LD_INT 0
2958: PPUSH
2959: PPUSH
2960: PPUSH
2961: PPUSH
2962: PPUSH
2963: PPUSH
2964: PPUSH
2965: PPUSH
2966: PPUSH
2967: PPUSH
// begin enable ;
2968: ENABLE
// if not rolfSquad then
2969: LD_EXP 46
2973: NOT
2974: IFFALSE 2978
// exit ;
2976: GO 3958
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
2978: LD_ADDR_VAR 0 9
2982: PUSH
2983: LD_INT 12
2985: PPUSH
2986: LD_INT 81
2988: PUSH
2989: LD_INT 8
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PPUSH
2996: CALL_OW 70
3000: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
3001: LD_ADDR_VAR 0 5
3005: PUSH
3006: LD_EXP 46
3010: PPUSH
3011: LD_INT 25
3013: PUSH
3014: LD_INT 1
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PPUSH
3021: CALL_OW 72
3025: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
3026: LD_ADDR_VAR 0 6
3030: PUSH
3031: LD_EXP 46
3035: PPUSH
3036: LD_INT 25
3038: PUSH
3039: LD_INT 2
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PPUSH
3046: CALL_OW 72
3050: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
3051: LD_ADDR_VAR 0 8
3055: PUSH
3056: LD_EXP 46
3060: PPUSH
3061: LD_INT 25
3063: PUSH
3064: LD_INT 3
3066: PUSH
3067: EMPTY
3068: LIST
3069: LIST
3070: PPUSH
3071: CALL_OW 72
3075: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
3076: LD_ADDR_VAR 0 7
3080: PUSH
3081: LD_EXP 46
3085: PPUSH
3086: LD_INT 25
3088: PUSH
3089: LD_INT 4
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: PPUSH
3096: CALL_OW 72
3100: ST_TO_ADDR
// if sol then
3101: LD_VAR 0 5
3105: IFFALSE 3403
// for i in sol union Rolf do
3107: LD_ADDR_VAR 0 1
3111: PUSH
3112: LD_VAR 0 5
3116: PUSH
3117: LD_EXP 42
3121: UNION
3122: PUSH
3123: FOR_IN
3124: IFFALSE 3401
// if not IsInUnit ( i ) and not HasTask ( i ) then
3126: LD_VAR 0 1
3130: PPUSH
3131: CALL_OW 310
3135: NOT
3136: PUSH
3137: LD_VAR 0 1
3141: PPUSH
3142: CALL_OW 314
3146: NOT
3147: AND
3148: IFFALSE 3399
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
3150: LD_VAR 0 1
3154: PPUSH
3155: CALL_OW 256
3159: PUSH
3160: LD_INT 500
3162: LESS
3163: PUSH
3164: LD_VAR 0 1
3168: PPUSH
3169: LD_INT 80
3171: PPUSH
3172: LD_INT 49
3174: PPUSH
3175: CALL_OW 297
3179: PUSH
3180: LD_INT 6
3182: GREATER
3183: AND
3184: IFFALSE 3203
// begin ComMoveXY ( i , 80 , 49 ) ;
3186: LD_VAR 0 1
3190: PPUSH
3191: LD_INT 80
3193: PPUSH
3194: LD_INT 49
3196: PPUSH
3197: CALL_OW 111
// continue ;
3201: GO 3123
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
3203: LD_ADDR_VAR 0 4
3207: PUSH
3208: LD_INT 22
3210: PUSH
3211: LD_INT 8
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: PUSH
3218: LD_INT 50
3220: PUSH
3221: EMPTY
3222: LIST
3223: PUSH
3224: LD_INT 2
3226: PUSH
3227: LD_INT 30
3229: PUSH
3230: LD_INT 4
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PUSH
3237: LD_INT 30
3239: PUSH
3240: LD_INT 5
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: LD_INT 30
3249: PUSH
3250: LD_INT 32
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PUSH
3257: LD_INT 30
3259: PUSH
3260: LD_INT 31
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: LIST
3278: PPUSH
3279: CALL_OW 69
3283: ST_TO_ADDR
// if tmp then
3284: LD_VAR 0 4
3288: IFFALSE 3399
// begin for b in tmp do
3290: LD_ADDR_VAR 0 2
3294: PUSH
3295: LD_VAR 0 4
3299: PUSH
3300: FOR_IN
3301: IFFALSE 3397
// begin case GetBType ( b ) of b_armoury , b_barracks :
3303: LD_VAR 0 2
3307: PPUSH
3308: CALL_OW 266
3312: PUSH
3313: LD_INT 4
3315: DOUBLE
3316: EQUAL
3317: IFTRUE 3327
3319: LD_INT 5
3321: DOUBLE
3322: EQUAL
3323: IFTRUE 3327
3325: GO 3338
3327: POP
// p := 6 ; b_breastwork , b_bunker :
3328: LD_ADDR_VAR 0 3
3332: PUSH
3333: LD_INT 6
3335: ST_TO_ADDR
3336: GO 3364
3338: LD_INT 31
3340: DOUBLE
3341: EQUAL
3342: IFTRUE 3352
3344: LD_INT 32
3346: DOUBLE
3347: EQUAL
3348: IFTRUE 3352
3350: GO 3363
3352: POP
// p := 1 ; end ;
3353: LD_ADDR_VAR 0 3
3357: PUSH
3358: LD_INT 1
3360: ST_TO_ADDR
3361: GO 3364
3363: POP
// if UnitsInside ( b ) < p then
3364: LD_VAR 0 2
3368: PPUSH
3369: CALL_OW 313
3373: PUSH
3374: LD_VAR 0 3
3378: LESS
3379: IFFALSE 3395
// ComEnterUnit ( i , b ) ;
3381: LD_VAR 0 1
3385: PPUSH
3386: LD_VAR 0 2
3390: PPUSH
3391: CALL_OW 120
// end ;
3395: GO 3300
3397: POP
3398: POP
// end ; end ;
3399: GO 3123
3401: POP
3402: POP
// if sci then
3403: LD_VAR 0 7
3407: IFFALSE 3462
// for i in sci do
3409: LD_ADDR_VAR 0 1
3413: PUSH
3414: LD_VAR 0 7
3418: PUSH
3419: FOR_IN
3420: IFFALSE 3460
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
3422: LD_VAR 0 1
3426: PPUSH
3427: LD_INT 80
3429: PPUSH
3430: LD_INT 49
3432: PPUSH
3433: CALL_OW 297
3437: PUSH
3438: LD_INT 9
3440: GREATER
3441: IFFALSE 3458
// ComMoveXY ( i , 80 , 49 ) ;
3443: LD_VAR 0 1
3447: PPUSH
3448: LD_INT 80
3450: PPUSH
3451: LD_INT 49
3453: PPUSH
3454: CALL_OW 111
// end ;
3458: GO 3419
3460: POP
3461: POP
// if mech then
3462: LD_VAR 0 8
3466: IFFALSE 3680
// for i in mech do
3468: LD_ADDR_VAR 0 1
3472: PUSH
3473: LD_VAR 0 8
3477: PUSH
3478: FOR_IN
3479: IFFALSE 3678
// begin hasVehicle := IsInUnit ( i ) ;
3481: LD_ADDR_VAR 0 10
3485: PUSH
3486: LD_VAR 0 1
3490: PPUSH
3491: CALL_OW 310
3495: ST_TO_ADDR
// if enemyInBase then
3496: LD_VAR 0 9
3500: IFFALSE 3596
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
3502: LD_VAR 0 10
3506: PUSH
3507: LD_VAR 0 10
3511: PPUSH
3512: CALL_OW 256
3516: PUSH
3517: LD_INT 500
3519: GREATER
3520: AND
3521: IFFALSE 3549
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
3523: LD_VAR 0 10
3527: PPUSH
3528: LD_VAR 0 9
3532: PPUSH
3533: LD_VAR 0 10
3537: PPUSH
3538: CALL_OW 74
3542: PPUSH
3543: CALL_OW 115
3547: GO 3594
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
3549: LD_VAR 0 10
3553: PPUSH
3554: LD_INT 86
3556: PPUSH
3557: LD_INT 49
3559: PPUSH
3560: CALL_OW 297
3564: PUSH
3565: LD_INT 8
3567: GREATER
3568: IFFALSE 3594
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
3570: LD_VAR 0 10
3574: PPUSH
3575: LD_INT 86
3577: PPUSH
3578: LD_INT 49
3580: PPUSH
3581: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
3585: LD_VAR 0 1
3589: PPUSH
3590: CALL 62980 0 1
// end end else
3594: GO 3676
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
3596: LD_VAR 0 1
3600: PPUSH
3601: LD_INT 86
3603: PPUSH
3604: LD_INT 49
3606: PPUSH
3607: CALL_OW 297
3611: PUSH
3612: LD_INT 8
3614: GREATER
3615: IFFALSE 3634
// ComMoveXY ( i , 86 , 49 ) else
3617: LD_VAR 0 1
3621: PPUSH
3622: LD_INT 86
3624: PPUSH
3625: LD_INT 49
3627: PPUSH
3628: CALL_OW 111
3632: GO 3676
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
3634: LD_VAR 0 10
3638: PUSH
3639: LD_VAR 0 10
3643: PPUSH
3644: CALL_OW 256
3648: PUSH
3649: LD_INT 1000
3651: LESS
3652: AND
3653: IFFALSE 3676
// begin SetFuel ( hasVehicle , 100 ) ;
3655: LD_VAR 0 10
3659: PPUSH
3660: LD_INT 100
3662: PPUSH
3663: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
3667: LD_VAR 0 1
3671: PPUSH
3672: CALL 62860 0 1
// end ; end ; end ;
3676: GO 3478
3678: POP
3679: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3680: LD_ADDR_VAR 0 4
3684: PUSH
3685: LD_INT 12
3687: PPUSH
3688: LD_INT 3
3690: PUSH
3691: LD_INT 24
3693: PUSH
3694: LD_INT 1000
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: PUSH
3705: LD_INT 21
3707: PUSH
3708: LD_INT 3
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: PPUSH
3719: CALL_OW 70
3723: ST_TO_ADDR
// if tmp and eng then
3724: LD_VAR 0 4
3728: PUSH
3729: LD_VAR 0 6
3733: AND
3734: IFFALSE 3840
// begin for i in eng do
3736: LD_ADDR_VAR 0 1
3740: PUSH
3741: LD_VAR 0 6
3745: PUSH
3746: FOR_IN
3747: IFFALSE 3838
// if IsInUnit ( i ) then
3749: LD_VAR 0 1
3753: PPUSH
3754: CALL_OW 310
3758: IFFALSE 3771
// ComExitBuilding ( i ) else
3760: LD_VAR 0 1
3764: PPUSH
3765: CALL_OW 122
3769: GO 3836
// if GetLives ( i ) = 1000 then
3771: LD_VAR 0 1
3775: PPUSH
3776: CALL_OW 256
3780: PUSH
3781: LD_INT 1000
3783: EQUAL
3784: IFFALSE 3806
// ComRepairBuilding ( i , tmp [ 1 ] ) else
3786: LD_VAR 0 1
3790: PPUSH
3791: LD_VAR 0 4
3795: PUSH
3796: LD_INT 1
3798: ARRAY
3799: PPUSH
3800: CALL_OW 130
3804: GO 3836
// if GetLives ( i ) < 700 then
3806: LD_VAR 0 1
3810: PPUSH
3811: CALL_OW 256
3815: PUSH
3816: LD_INT 700
3818: LESS
3819: IFFALSE 3836
// ComMoveXY ( i , 80 , 49 ) ;
3821: LD_VAR 0 1
3825: PPUSH
3826: LD_INT 80
3828: PPUSH
3829: LD_INT 49
3831: PPUSH
3832: CALL_OW 111
3836: GO 3746
3838: POP
3839: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
3840: LD_VAR 0 4
3844: NOT
3845: PUSH
3846: LD_VAR 0 6
3850: PPUSH
3851: LD_INT 3
3853: PUSH
3854: LD_INT 54
3856: PUSH
3857: EMPTY
3858: LIST
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: PPUSH
3864: CALL_OW 72
3868: AND
3869: IFFALSE 3958
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
3871: LD_ADDR_VAR 0 1
3875: PUSH
3876: LD_VAR 0 6
3880: PPUSH
3881: LD_INT 3
3883: PUSH
3884: LD_INT 54
3886: PUSH
3887: EMPTY
3888: LIST
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: PPUSH
3894: CALL_OW 72
3898: PUSH
3899: FOR_IN
3900: IFFALSE 3956
// if GetLives ( i ) < 1000 then
3902: LD_VAR 0 1
3906: PPUSH
3907: CALL_OW 256
3911: PUSH
3912: LD_INT 1000
3914: LESS
3915: IFFALSE 3934
// ComMoveXY ( i , 80 , 49 ) else
3917: LD_VAR 0 1
3921: PPUSH
3922: LD_INT 80
3924: PPUSH
3925: LD_INT 49
3927: PPUSH
3928: CALL_OW 111
3932: GO 3954
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
3934: LD_VAR 0 1
3938: PPUSH
3939: LD_INT 86
3941: PPUSH
3942: LD_INT 54
3944: PPUSH
3945: CALL_OW 428
3949: PPUSH
3950: CALL_OW 120
3954: GO 3899
3956: POP
3957: POP
// end ;
3958: PPOPN 10
3960: END
// export function PrepareOmarSquad ; var i , j , p ; begin
3961: LD_INT 0
3963: PPUSH
3964: PPUSH
3965: PPUSH
3966: PPUSH
// uc_side := 5 ;
3967: LD_ADDR_OWVAR 20
3971: PUSH
3972: LD_INT 5
3974: ST_TO_ADDR
// uc_nation := 2 ;
3975: LD_ADDR_OWVAR 21
3979: PUSH
3980: LD_INT 2
3982: ST_TO_ADDR
// omarSquad := [ ] ;
3983: LD_ADDR_EXP 47
3987: PUSH
3988: EMPTY
3989: ST_TO_ADDR
// for i := 1 to 4 do
3990: LD_ADDR_VAR 0 2
3994: PUSH
3995: DOUBLE
3996: LD_INT 1
3998: DEC
3999: ST_TO_ADDR
4000: LD_INT 4
4002: PUSH
4003: FOR_TO
4004: IFFALSE 4127
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
4006: LD_ADDR_VAR 0 3
4010: PUSH
4011: DOUBLE
4012: LD_INT 1
4014: DEC
4015: ST_TO_ADDR
4016: LD_INT 6
4018: PUSH
4019: LD_INT 2
4021: PUSH
4022: LD_INT 2
4024: PUSH
4025: LD_EXP 21
4029: PLUS
4030: PUSH
4031: LD_INT 2
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: LIST
4038: LIST
4039: PUSH
4040: LD_VAR 0 2
4044: ARRAY
4045: PUSH
4046: FOR_TO
4047: IFFALSE 4123
// begin PrepareHuman ( false , i , 5 ) ;
4049: LD_INT 0
4051: PPUSH
4052: LD_VAR 0 2
4056: PPUSH
4057: LD_INT 5
4059: PPUSH
4060: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
4064: LD_ADDR_EXP 47
4068: PUSH
4069: LD_EXP 47
4073: PPUSH
4074: CALL_OW 44
4078: PPUSH
4079: CALL 61369 0 2
4083: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
4084: LD_VAR 0 2
4088: PUSH
4089: LD_INT 1
4091: EQUAL
4092: PUSH
4093: LD_INT 50
4095: PPUSH
4096: CALL_OW 13
4100: AND
4101: IFFALSE 4121
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
4103: LD_EXP 47
4107: PUSH
4108: LD_EXP 47
4112: ARRAY
4113: PPUSH
4114: LD_INT 8
4116: PPUSH
4117: CALL_OW 336
// end ;
4121: GO 4046
4123: POP
4124: POP
// end ;
4125: GO 4003
4127: POP
4128: POP
// if HexInfo ( 340 , 205 ) then
4129: LD_INT 340
4131: PPUSH
4132: LD_INT 205
4134: PPUSH
4135: CALL_OW 428
4139: IFFALSE 4156
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
4141: LD_INT 340
4143: PPUSH
4144: LD_INT 205
4146: PPUSH
4147: CALL_OW 428
4151: PPUSH
4152: CALL_OW 64
// p := 0 ;
4156: LD_ADDR_VAR 0 4
4160: PUSH
4161: LD_INT 0
4163: ST_TO_ADDR
// for i in omarSquad do
4164: LD_ADDR_VAR 0 2
4168: PUSH
4169: LD_EXP 47
4173: PUSH
4174: FOR_IN
4175: IFFALSE 4376
// begin uc_direction := 4 ;
4177: LD_ADDR_OWVAR 24
4181: PUSH
4182: LD_INT 4
4184: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
4185: LD_VAR 0 2
4189: PPUSH
4190: CALL_OW 257
4194: PUSH
4195: LD_INT 3
4197: EQUAL
4198: PUSH
4199: LD_VAR 0 4
4203: PUSH
4204: LD_INT 2
4206: LESS
4207: AND
4208: IFFALSE 4337
// begin p := p + 1 ;
4210: LD_ADDR_VAR 0 4
4214: PUSH
4215: LD_VAR 0 4
4219: PUSH
4220: LD_INT 1
4222: PLUS
4223: ST_TO_ADDR
// uc_side := 5 ;
4224: LD_ADDR_OWVAR 20
4228: PUSH
4229: LD_INT 5
4231: ST_TO_ADDR
// if rand ( 0 , 1 ) then
4232: LD_INT 0
4234: PPUSH
4235: LD_INT 1
4237: PPUSH
4238: CALL_OW 12
4242: IFFALSE 4273
// begin uc_nation := 2 ;
4244: LD_ADDR_OWVAR 21
4248: PUSH
4249: LD_INT 2
4251: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
4252: LD_INT 13
4254: PPUSH
4255: LD_INT 1
4257: PPUSH
4258: LD_INT 1
4260: PPUSH
4261: LD_INT 27
4263: PPUSH
4264: LD_INT 88
4266: PPUSH
4267: CALL 29495 0 5
// end else
4271: GO 4300
// begin uc_nation := 3 ;
4273: LD_ADDR_OWVAR 21
4277: PUSH
4278: LD_INT 3
4280: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
4281: LD_INT 22
4283: PPUSH
4284: LD_INT 1
4286: PPUSH
4287: LD_INT 1
4289: PPUSH
4290: LD_INT 45
4292: PPUSH
4293: LD_INT 88
4295: PPUSH
4296: CALL 29495 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
4300: CALL_OW 45
4304: PPUSH
4305: LD_INT 13
4307: PPUSH
4308: LD_INT 0
4310: PPUSH
4311: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
4315: LD_VAR 0 2
4319: PPUSH
4320: LD_INT 340
4322: PPUSH
4323: LD_INT 205
4325: PPUSH
4326: CALL_OW 428
4330: PPUSH
4331: CALL_OW 52
// end else
4335: GO 4352
// PlaceUnitArea ( i , southSpawn , false ) ;
4337: LD_VAR 0 2
4341: PPUSH
4342: LD_INT 13
4344: PPUSH
4345: LD_INT 0
4347: PPUSH
4348: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
4352: LD_VAR 0 2
4356: PPUSH
4357: LD_INT 333
4359: PPUSH
4360: LD_INT 210
4362: PPUSH
4363: CALL_OW 111
// wait ( 0 0$2 ) ;
4367: LD_INT 70
4369: PPUSH
4370: CALL_OW 67
// end ;
4374: GO 4174
4376: POP
4377: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
4378: LD_EXP 39
4382: PPUSH
4383: LD_INT 340
4385: PPUSH
4386: LD_INT 205
4388: PPUSH
4389: LD_INT 0
4391: PPUSH
4392: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
4396: LD_EXP 39
4400: PPUSH
4401: LD_INT 333
4403: PPUSH
4404: LD_INT 206
4406: PPUSH
4407: CALL_OW 111
// wait ( 0 0$2 ) ;
4411: LD_INT 70
4413: PPUSH
4414: CALL_OW 67
// ComHold ( omarSquad ) ;
4418: LD_EXP 47
4422: PPUSH
4423: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
4427: LD_EXP 39
4431: PUSH
4432: LD_EXP 47
4436: PPUSH
4437: LD_INT 2
4439: PUSH
4440: LD_INT 25
4442: PUSH
4443: LD_INT 1
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PUSH
4450: LD_INT 25
4452: PUSH
4453: LD_INT 8
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: LIST
4464: PPUSH
4465: CALL_OW 72
4469: UNION
4470: PUSH
4471: LD_INT 22
4473: PUSH
4474: LD_INT 5
4476: PUSH
4477: EMPTY
4478: LIST
4479: LIST
4480: PUSH
4481: LD_INT 21
4483: PUSH
4484: LD_INT 2
4486: PUSH
4487: EMPTY
4488: LIST
4489: LIST
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: PPUSH
4495: CALL_OW 69
4499: UNION
4500: PPUSH
4501: LD_INT 315
4503: PPUSH
4504: LD_INT 214
4506: PPUSH
4507: CALL_OW 114
// wait ( 0 0$22 ) ;
4511: LD_INT 770
4513: PPUSH
4514: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
4518: LD_EXP 47
4522: PUSH
4523: LD_EXP 39
4527: UNION
4528: PPUSH
4529: LD_INT 329
4531: PPUSH
4532: LD_INT 231
4534: PPUSH
4535: CALL_OW 114
// end ;
4539: LD_VAR 0 1
4543: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
4544: LD_EXP 10
4548: IFFALSE 5631
4550: GO 4552
4552: DISABLE
4553: LD_INT 0
4555: PPUSH
4556: PPUSH
4557: PPUSH
4558: PPUSH
4559: PPUSH
4560: PPUSH
4561: PPUSH
4562: PPUSH
4563: PPUSH
4564: PPUSH
4565: PPUSH
// begin enable ;
4566: ENABLE
// if not omarSquad then
4567: LD_EXP 47
4571: NOT
4572: IFFALSE 4576
// exit ;
4574: GO 5631
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
4576: LD_ADDR_VAR 0 10
4580: PUSH
4581: LD_INT 14
4583: PPUSH
4584: LD_INT 81
4586: PUSH
4587: LD_INT 5
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PPUSH
4594: CALL_OW 70
4598: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
4599: LD_ADDR_VAR 0 6
4603: PUSH
4604: LD_EXP 47
4608: PPUSH
4609: LD_INT 2
4611: PUSH
4612: LD_INT 25
4614: PUSH
4615: LD_INT 1
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: LD_INT 25
4624: PUSH
4625: LD_INT 8
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: LIST
4636: PPUSH
4637: CALL_OW 72
4641: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
4642: LD_ADDR_VAR 0 7
4646: PUSH
4647: LD_EXP 47
4651: PPUSH
4652: LD_INT 25
4654: PUSH
4655: LD_INT 2
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: PPUSH
4662: CALL_OW 72
4666: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
4667: LD_ADDR_VAR 0 9
4671: PUSH
4672: LD_EXP 47
4676: PPUSH
4677: LD_INT 25
4679: PUSH
4680: LD_INT 3
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: PPUSH
4687: CALL_OW 72
4691: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
4692: LD_ADDR_VAR 0 8
4696: PUSH
4697: LD_EXP 47
4701: PPUSH
4702: LD_INT 25
4704: PUSH
4705: LD_INT 4
4707: PUSH
4708: EMPTY
4709: LIST
4710: LIST
4711: PPUSH
4712: CALL_OW 72
4716: ST_TO_ADDR
// if sol then
4717: LD_VAR 0 6
4721: IFFALSE 5085
// for i in sol do
4723: LD_ADDR_VAR 0 1
4727: PUSH
4728: LD_VAR 0 6
4732: PUSH
4733: FOR_IN
4734: IFFALSE 5083
// if not HasTask ( i ) then
4736: LD_VAR 0 1
4740: PPUSH
4741: CALL_OW 314
4745: NOT
4746: IFFALSE 5081
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
4748: LD_VAR 0 1
4752: PPUSH
4753: CALL_OW 310
4757: NOT
4758: PUSH
4759: LD_VAR 0 1
4763: PPUSH
4764: CALL_OW 256
4768: PUSH
4769: LD_INT 500
4771: LESS
4772: AND
4773: PUSH
4774: LD_VAR 0 1
4778: PPUSH
4779: LD_INT 333
4781: PPUSH
4782: LD_INT 234
4784: PPUSH
4785: CALL_OW 297
4789: PUSH
4790: LD_INT 6
4792: GREATER
4793: AND
4794: IFFALSE 4813
// begin ComMoveXY ( i , 333 , 234 ) ;
4796: LD_VAR 0 1
4800: PPUSH
4801: LD_INT 333
4803: PPUSH
4804: LD_INT 234
4806: PPUSH
4807: CALL_OW 111
// continue ;
4811: GO 4733
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4813: LD_ADDR_VAR 0 5
4817: PUSH
4818: LD_INT 22
4820: PUSH
4821: LD_INT 5
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 58
4830: PUSH
4831: EMPTY
4832: LIST
4833: PUSH
4834: LD_INT 50
4836: PUSH
4837: EMPTY
4838: LIST
4839: PUSH
4840: LD_INT 2
4842: PUSH
4843: LD_INT 30
4845: PUSH
4846: LD_INT 32
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 30
4855: PUSH
4856: LD_INT 31
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: PPUSH
4874: CALL_OW 69
4878: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
4879: LD_VAR 0 5
4883: PUSH
4884: LD_VAR 0 1
4888: PPUSH
4889: CALL_OW 310
4893: PPUSH
4894: CALL_OW 266
4898: PUSH
4899: LD_INT 31
4901: NONEQUAL
4902: AND
4903: IFFALSE 4985
// begin for j in tmp do
4905: LD_ADDR_VAR 0 2
4909: PUSH
4910: LD_VAR 0 5
4914: PUSH
4915: FOR_IN
4916: IFFALSE 4981
// if GetTag ( j ) <> 1 then
4918: LD_VAR 0 2
4922: PPUSH
4923: CALL_OW 110
4927: PUSH
4928: LD_INT 1
4930: NONEQUAL
4931: IFFALSE 4979
// begin SetTag ( j , 1 ) ;
4933: LD_VAR 0 2
4937: PPUSH
4938: LD_INT 1
4940: PPUSH
4941: CALL_OW 109
// if IsInUnit ( i ) then
4945: LD_VAR 0 1
4949: PPUSH
4950: CALL_OW 310
4954: IFFALSE 4965
// ComExit ( i ) ;
4956: LD_VAR 0 1
4960: PPUSH
4961: CALL 61757 0 1
// AddComEnterUnit ( i , j ) ;
4965: LD_VAR 0 1
4969: PPUSH
4970: LD_VAR 0 2
4974: PPUSH
4975: CALL_OW 180
// end ;
4979: GO 4915
4981: POP
4982: POP
// end else
4983: GO 5081
// if not IsInUnit ( i ) then
4985: LD_VAR 0 1
4989: PPUSH
4990: CALL_OW 310
4994: NOT
4995: IFFALSE 5081
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
4997: LD_ADDR_VAR 0 5
5001: PUSH
5002: LD_INT 22
5004: PUSH
5005: LD_INT 5
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: LD_INT 50
5014: PUSH
5015: EMPTY
5016: LIST
5017: PUSH
5018: LD_INT 30
5020: PUSH
5021: LD_INT 4
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: PUSH
5028: EMPTY
5029: LIST
5030: LIST
5031: LIST
5032: PPUSH
5033: CALL_OW 69
5037: ST_TO_ADDR
// if tmp then
5038: LD_VAR 0 5
5042: IFFALSE 5081
// if UnitsInside ( tmp [ 1 ] ) < 6 then
5044: LD_VAR 0 5
5048: PUSH
5049: LD_INT 1
5051: ARRAY
5052: PPUSH
5053: CALL_OW 313
5057: PUSH
5058: LD_INT 6
5060: LESS
5061: IFFALSE 5081
// ComEnterUnit ( i , tmp [ 1 ] ) ;
5063: LD_VAR 0 1
5067: PPUSH
5068: LD_VAR 0 5
5072: PUSH
5073: LD_INT 1
5075: ARRAY
5076: PPUSH
5077: CALL_OW 120
// end ; end ;
5081: GO 4733
5083: POP
5084: POP
// if sci then
5085: LD_VAR 0 8
5089: IFFALSE 5144
// for i in sci do
5091: LD_ADDR_VAR 0 1
5095: PUSH
5096: LD_VAR 0 8
5100: PUSH
5101: FOR_IN
5102: IFFALSE 5142
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
5104: LD_VAR 0 1
5108: PPUSH
5109: LD_INT 333
5111: PPUSH
5112: LD_INT 234
5114: PPUSH
5115: CALL_OW 297
5119: PUSH
5120: LD_INT 9
5122: GREATER
5123: IFFALSE 5140
// ComMoveXY ( i , 333 , 234 ) ;
5125: LD_VAR 0 1
5129: PPUSH
5130: LD_INT 333
5132: PPUSH
5133: LD_INT 234
5135: PPUSH
5136: CALL_OW 111
// end ;
5140: GO 5101
5142: POP
5143: POP
// if mech then
5144: LD_VAR 0 9
5148: IFFALSE 5353
// for i in mech do
5150: LD_ADDR_VAR 0 1
5154: PUSH
5155: LD_VAR 0 9
5159: PUSH
5160: FOR_IN
5161: IFFALSE 5351
// begin hasVehicle := IsInUnit ( i ) ;
5163: LD_ADDR_VAR 0 11
5167: PUSH
5168: LD_VAR 0 1
5172: PPUSH
5173: CALL_OW 310
5177: ST_TO_ADDR
// if enemyInBase then
5178: LD_VAR 0 10
5182: IFFALSE 5269
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
5184: LD_VAR 0 11
5188: PUSH
5189: LD_VAR 0 11
5193: PPUSH
5194: CALL_OW 256
5198: PUSH
5199: LD_INT 500
5201: GREATER
5202: AND
5203: IFFALSE 5231
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
5205: LD_VAR 0 11
5209: PPUSH
5210: LD_VAR 0 10
5214: PPUSH
5215: LD_VAR 0 11
5219: PPUSH
5220: CALL_OW 74
5224: PPUSH
5225: CALL_OW 115
5229: GO 5267
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
5231: LD_VAR 0 11
5235: PPUSH
5236: LD_INT 333
5238: PPUSH
5239: LD_INT 234
5241: PPUSH
5242: CALL_OW 297
5246: PUSH
5247: LD_INT 6
5249: GREATER
5250: IFFALSE 5267
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
5252: LD_VAR 0 11
5256: PPUSH
5257: LD_INT 333
5259: PPUSH
5260: LD_INT 234
5262: PPUSH
5263: CALL_OW 111
// end else
5267: GO 5349
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
5269: LD_VAR 0 1
5273: PPUSH
5274: LD_INT 333
5276: PPUSH
5277: LD_INT 234
5279: PPUSH
5280: CALL_OW 297
5284: PUSH
5285: LD_INT 6
5287: GREATER
5288: IFFALSE 5307
// ComMoveXY ( i , 333 , 234 ) else
5290: LD_VAR 0 1
5294: PPUSH
5295: LD_INT 333
5297: PPUSH
5298: LD_INT 234
5300: PPUSH
5301: CALL_OW 111
5305: GO 5349
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
5307: LD_VAR 0 11
5311: PUSH
5312: LD_VAR 0 11
5316: PPUSH
5317: CALL_OW 256
5321: PUSH
5322: LD_INT 1000
5324: LESS
5325: AND
5326: IFFALSE 5349
// begin SetFuel ( hasVehicle , 100 ) ;
5328: LD_VAR 0 11
5332: PPUSH
5333: LD_INT 100
5335: PPUSH
5336: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
5340: LD_VAR 0 1
5344: PPUSH
5345: CALL 62860 0 1
// end ; end ; end ;
5349: GO 5160
5351: POP
5352: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
5353: LD_ADDR_VAR 0 5
5357: PUSH
5358: LD_INT 14
5360: PPUSH
5361: LD_INT 3
5363: PUSH
5364: LD_INT 24
5366: PUSH
5367: LD_INT 1000
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: PUSH
5374: EMPTY
5375: LIST
5376: LIST
5377: PUSH
5378: LD_INT 21
5380: PUSH
5381: LD_INT 3
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: PUSH
5388: EMPTY
5389: LIST
5390: LIST
5391: PPUSH
5392: CALL_OW 70
5396: ST_TO_ADDR
// if tmp and eng then
5397: LD_VAR 0 5
5401: PUSH
5402: LD_VAR 0 7
5406: AND
5407: IFFALSE 5513
// begin for i in eng do
5409: LD_ADDR_VAR 0 1
5413: PUSH
5414: LD_VAR 0 7
5418: PUSH
5419: FOR_IN
5420: IFFALSE 5511
// if IsInUnit ( i ) then
5422: LD_VAR 0 1
5426: PPUSH
5427: CALL_OW 310
5431: IFFALSE 5444
// ComExitBuilding ( i ) else
5433: LD_VAR 0 1
5437: PPUSH
5438: CALL_OW 122
5442: GO 5509
// if GetLives ( i ) = 1000 then
5444: LD_VAR 0 1
5448: PPUSH
5449: CALL_OW 256
5453: PUSH
5454: LD_INT 1000
5456: EQUAL
5457: IFFALSE 5479
// ComRepairBuilding ( i , tmp [ 1 ] ) else
5459: LD_VAR 0 1
5463: PPUSH
5464: LD_VAR 0 5
5468: PUSH
5469: LD_INT 1
5471: ARRAY
5472: PPUSH
5473: CALL_OW 130
5477: GO 5509
// if GetLives ( i ) < 700 then
5479: LD_VAR 0 1
5483: PPUSH
5484: CALL_OW 256
5488: PUSH
5489: LD_INT 700
5491: LESS
5492: IFFALSE 5509
// ComMoveXY ( i , 333 , 234 ) ;
5494: LD_VAR 0 1
5498: PPUSH
5499: LD_INT 333
5501: PPUSH
5502: LD_INT 234
5504: PPUSH
5505: CALL_OW 111
5509: GO 5419
5511: POP
5512: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
5513: LD_VAR 0 5
5517: NOT
5518: PUSH
5519: LD_VAR 0 7
5523: PPUSH
5524: LD_INT 3
5526: PUSH
5527: LD_INT 54
5529: PUSH
5530: EMPTY
5531: LIST
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PPUSH
5537: CALL_OW 72
5541: AND
5542: IFFALSE 5631
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
5544: LD_ADDR_VAR 0 1
5548: PUSH
5549: LD_VAR 0 7
5553: PPUSH
5554: LD_INT 3
5556: PUSH
5557: LD_INT 54
5559: PUSH
5560: EMPTY
5561: LIST
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PPUSH
5567: CALL_OW 72
5571: PUSH
5572: FOR_IN
5573: IFFALSE 5629
// if GetLives ( i ) < 1000 then
5575: LD_VAR 0 1
5579: PPUSH
5580: CALL_OW 256
5584: PUSH
5585: LD_INT 1000
5587: LESS
5588: IFFALSE 5607
// ComMoveXY ( i , 333 , 234 ) else
5590: LD_VAR 0 1
5594: PPUSH
5595: LD_INT 333
5597: PPUSH
5598: LD_INT 234
5600: PPUSH
5601: CALL_OW 111
5605: GO 5627
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
5607: LD_VAR 0 1
5611: PPUSH
5612: LD_INT 341
5614: PPUSH
5615: LD_INT 232
5617: PPUSH
5618: CALL_OW 428
5622: PPUSH
5623: CALL_OW 120
5627: GO 5572
5629: POP
5630: POP
// end ;
5631: PPOPN 11
5633: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
5634: LD_EXP 39
5638: PPUSH
5639: CALL_OW 256
5643: PUSH
5644: LD_INT 1000
5646: LESS
5647: IFFALSE 5665
5649: GO 5651
5651: DISABLE
// begin enable ;
5652: ENABLE
// SetLives ( Omar , 1000 ) ;
5653: LD_EXP 39
5657: PPUSH
5658: LD_INT 1000
5660: PPUSH
5661: CALL_OW 234
// end ;
5665: END
// every 0 0$1 trigger omarAttack do var i , nearestPoint ;
5666: LD_EXP 23
5670: IFFALSE 6546
5672: GO 5674
5674: DISABLE
5675: LD_INT 0
5677: PPUSH
5678: PPUSH
// begin wait ( 0 0$25 ) ;
5679: LD_INT 875
5681: PPUSH
5682: CALL_OW 67
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
5686: LD_EXP 47
5690: PPUSH
5691: LD_INT 2
5693: PUSH
5694: LD_INT 25
5696: PUSH
5697: LD_INT 1
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: PUSH
5704: LD_INT 25
5706: PUSH
5707: LD_INT 8
5709: PUSH
5710: EMPTY
5711: LIST
5712: LIST
5713: PUSH
5714: EMPTY
5715: LIST
5716: LIST
5717: LIST
5718: PPUSH
5719: CALL_OW 72
5723: PPUSH
5724: CALL_OW 122
// wait ( 0 0$3 ) ;
5728: LD_INT 105
5730: PPUSH
5731: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , 225 , 223 ) ;
5735: LD_EXP 47
5739: PUSH
5740: LD_EXP 39
5744: UNION
5745: PPUSH
5746: LD_INT 225
5748: PPUSH
5749: LD_INT 223
5751: PPUSH
5752: CALL_OW 174
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_type , unit_vehicle ] ] ] ) , 167 , 231 ) ;
5756: LD_INT 22
5758: PUSH
5759: LD_INT 5
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: PUSH
5766: LD_INT 2
5768: PUSH
5769: LD_INT 25
5771: PUSH
5772: LD_INT 1
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: PUSH
5779: LD_INT 25
5781: PUSH
5782: LD_INT 8
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PUSH
5789: LD_INT 21
5791: PUSH
5792: LD_INT 2
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: LIST
5803: LIST
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: PPUSH
5809: CALL_OW 69
5813: PPUSH
5814: LD_INT 167
5816: PPUSH
5817: LD_INT 231
5819: PPUSH
5820: CALL_OW 174
// AddComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 222 , 229 ) ;
5824: LD_EXP 47
5828: PPUSH
5829: LD_INT 25
5831: PUSH
5832: LD_INT 4
5834: PUSH
5835: EMPTY
5836: LIST
5837: LIST
5838: PPUSH
5839: CALL_OW 72
5843: PPUSH
5844: LD_INT 222
5846: PPUSH
5847: LD_INT 229
5849: PPUSH
5850: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5854: LD_INT 35
5856: PPUSH
5857: CALL_OW 67
// for i in omarSquad union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
5861: LD_ADDR_VAR 0 1
5865: PUSH
5866: LD_EXP 47
5870: PUSH
5871: LD_INT 22
5873: PUSH
5874: LD_INT 5
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: PUSH
5881: LD_INT 21
5883: PUSH
5884: LD_INT 2
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: PPUSH
5895: CALL_OW 69
5899: UNION
5900: PUSH
5901: FOR_IN
5902: IFFALSE 6537
// begin if IsDead ( i ) then
5904: LD_VAR 0 1
5908: PPUSH
5909: CALL_OW 301
5913: IFFALSE 5933
// begin omarSquad := omarSquad diff i ;
5915: LD_ADDR_EXP 47
5919: PUSH
5920: LD_EXP 47
5924: PUSH
5925: LD_VAR 0 1
5929: DIFF
5930: ST_TO_ADDR
// continue ;
5931: GO 5901
// end ; if GetClass ( i ) in [ 1 , 8 ] then
5933: LD_VAR 0 1
5937: PPUSH
5938: CALL_OW 257
5942: PUSH
5943: LD_INT 1
5945: PUSH
5946: LD_INT 8
5948: PUSH
5949: EMPTY
5950: LIST
5951: LIST
5952: IN
5953: IFFALSE 6147
// begin if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
5955: LD_VAR 0 1
5959: PPUSH
5960: CALL_OW 256
5964: PUSH
5965: LD_INT 700
5967: LESS
5968: PUSH
5969: LD_VAR 0 1
5973: PPUSH
5974: CALL_OW 110
5978: PUSH
5979: LD_INT 0
5981: EQUAL
5982: AND
5983: IFFALSE 6012
// begin SetTag ( i , 1 ) ;
5985: LD_VAR 0 1
5989: PPUSH
5990: LD_INT 1
5992: PPUSH
5993: CALL_OW 109
// ComMoveXY ( i , 222 , 229 ) ;
5997: LD_VAR 0 1
6001: PPUSH
6002: LD_INT 222
6004: PPUSH
6005: LD_INT 229
6007: PPUSH
6008: CALL_OW 111
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
6012: LD_VAR 0 1
6016: PPUSH
6017: CALL_OW 256
6021: PUSH
6022: LD_INT 1000
6024: EQUAL
6025: PUSH
6026: LD_VAR 0 1
6030: PPUSH
6031: CALL_OW 110
6035: PUSH
6036: LD_INT 1
6038: EQUAL
6039: AND
6040: IFFALSE 6054
// SetTag ( i , 0 ) ;
6042: LD_VAR 0 1
6046: PPUSH
6047: LD_INT 0
6049: PPUSH
6050: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and not HasTask ( i ) then
6054: LD_VAR 0 1
6058: PPUSH
6059: CALL_OW 110
6063: PUSH
6064: LD_INT 0
6066: EQUAL
6067: PUSH
6068: LD_VAR 0 1
6072: PPUSH
6073: CALL_OW 256
6077: PUSH
6078: LD_INT 700
6080: GREATEREQUAL
6081: AND
6082: PUSH
6083: LD_VAR 0 1
6087: PPUSH
6088: CALL_OW 314
6092: NOT
6093: AND
6094: IFFALSE 6147
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6096: LD_INT 18
6098: PPUSH
6099: LD_INT 22
6101: PUSH
6102: LD_INT 3
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PPUSH
6109: CALL_OW 70
6113: IFFALSE 6132
// ComAgressiveMove ( i , 167 , 231 ) else
6115: LD_VAR 0 1
6119: PPUSH
6120: LD_INT 167
6122: PPUSH
6123: LD_INT 231
6125: PPUSH
6126: CALL_OW 114
6130: GO 6147
// ComAgressiveMove ( i , 106 , 153 ) ;
6132: LD_VAR 0 1
6136: PPUSH
6137: LD_INT 106
6139: PPUSH
6140: LD_INT 153
6142: PPUSH
6143: CALL_OW 114
// end ; if GetType ( i ) = unit_vehicle then
6147: LD_VAR 0 1
6151: PPUSH
6152: CALL_OW 247
6156: PUSH
6157: LD_INT 2
6159: EQUAL
6160: IFFALSE 6535
// begin nearestPoint := [ 219 , 219 ] ;
6162: LD_ADDR_VAR 0 2
6166: PUSH
6167: LD_INT 219
6169: PUSH
6170: LD_INT 219
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: ST_TO_ADDR
// if GetDistUnitXY ( i , 156 , 202 ) < GetDistUnitXY ( i , 219 , 219 ) then
6177: LD_VAR 0 1
6181: PPUSH
6182: LD_INT 156
6184: PPUSH
6185: LD_INT 202
6187: PPUSH
6188: CALL_OW 297
6192: PUSH
6193: LD_VAR 0 1
6197: PPUSH
6198: LD_INT 219
6200: PPUSH
6201: LD_INT 219
6203: PPUSH
6204: CALL_OW 297
6208: LESS
6209: IFFALSE 6226
// nearestPoint := [ 156 , 202 ] ;
6211: LD_ADDR_VAR 0 2
6215: PUSH
6216: LD_INT 156
6218: PUSH
6219: LD_INT 202
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: ST_TO_ADDR
// if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
6226: LD_VAR 0 1
6230: PPUSH
6231: CALL_OW 256
6235: PUSH
6236: LD_INT 700
6238: LESS
6239: PUSH
6240: LD_VAR 0 1
6244: PPUSH
6245: CALL_OW 110
6249: PUSH
6250: LD_INT 0
6252: EQUAL
6253: AND
6254: IFFALSE 6295
// begin SetTag ( i , 1 ) ;
6256: LD_VAR 0 1
6260: PPUSH
6261: LD_INT 1
6263: PPUSH
6264: CALL_OW 109
// ComMoveXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) ;
6268: LD_VAR 0 1
6272: PPUSH
6273: LD_VAR 0 2
6277: PUSH
6278: LD_INT 1
6280: ARRAY
6281: PPUSH
6282: LD_VAR 0 2
6286: PUSH
6287: LD_INT 2
6289: ARRAY
6290: PPUSH
6291: CALL_OW 111
// end ; if GetLives ( i ) < 700 and GetTag ( i ) = 1 and IsDrivenBy ( i ) and GetDistUnitXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) < 10 then
6295: LD_VAR 0 1
6299: PPUSH
6300: CALL_OW 256
6304: PUSH
6305: LD_INT 700
6307: LESS
6308: PUSH
6309: LD_VAR 0 1
6313: PPUSH
6314: CALL_OW 110
6318: PUSH
6319: LD_INT 1
6321: EQUAL
6322: AND
6323: PUSH
6324: LD_VAR 0 1
6328: PPUSH
6329: CALL_OW 311
6333: AND
6334: PUSH
6335: LD_VAR 0 1
6339: PPUSH
6340: LD_VAR 0 2
6344: PUSH
6345: LD_INT 1
6347: ARRAY
6348: PPUSH
6349: LD_VAR 0 2
6353: PUSH
6354: LD_INT 2
6356: ARRAY
6357: PPUSH
6358: CALL_OW 297
6362: PUSH
6363: LD_INT 10
6365: LESS
6366: AND
6367: IFFALSE 6378
// ComRepairVehicleAndReturn ( i ) ;
6369: LD_VAR 0 1
6373: PPUSH
6374: CALL 62860 0 1
// if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
6378: LD_VAR 0 1
6382: PPUSH
6383: CALL_OW 256
6387: PUSH
6388: LD_INT 1000
6390: EQUAL
6391: PUSH
6392: LD_VAR 0 1
6396: PPUSH
6397: CALL_OW 110
6401: PUSH
6402: LD_INT 1
6404: EQUAL
6405: AND
6406: PUSH
6407: LD_VAR 0 1
6411: PPUSH
6412: CALL_OW 311
6416: AND
6417: IFFALSE 6431
// SetTag ( i , 0 ) ;
6419: LD_VAR 0 1
6423: PPUSH
6424: LD_INT 0
6426: PPUSH
6427: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and IsDrivenBy ( i ) and not HasTask ( i ) then
6431: LD_VAR 0 1
6435: PPUSH
6436: CALL_OW 110
6440: PUSH
6441: LD_INT 0
6443: EQUAL
6444: PUSH
6445: LD_VAR 0 1
6449: PPUSH
6450: CALL_OW 256
6454: PUSH
6455: LD_INT 700
6457: GREATEREQUAL
6458: AND
6459: PUSH
6460: LD_VAR 0 1
6464: PPUSH
6465: CALL_OW 311
6469: AND
6470: PUSH
6471: LD_VAR 0 1
6475: PPUSH
6476: CALL_OW 314
6480: NOT
6481: AND
6482: IFFALSE 6535
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6484: LD_INT 18
6486: PPUSH
6487: LD_INT 22
6489: PUSH
6490: LD_INT 3
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PPUSH
6497: CALL_OW 70
6501: IFFALSE 6520
// ComAgressiveMove ( i , 167 , 231 ) else
6503: LD_VAR 0 1
6507: PPUSH
6508: LD_INT 167
6510: PPUSH
6511: LD_INT 231
6513: PPUSH
6514: CALL_OW 114
6518: GO 6535
// ComAgressiveMove ( i , 106 , 153 ) ;
6520: LD_VAR 0 1
6524: PPUSH
6525: LD_INT 106
6527: PPUSH
6528: LD_INT 153
6530: PPUSH
6531: CALL_OW 114
// end ; end ;
6535: GO 5901
6537: POP
6538: POP
// until not omarSquad ;
6539: LD_EXP 47
6543: NOT
6544: IFFALSE 5854
// end ; end_of_file
6546: PPOPN 2
6548: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
6549: LD_INT 0
6551: PPUSH
// uc_side := side ;
6552: LD_ADDR_OWVAR 20
6556: PUSH
6557: LD_VAR 0 1
6561: ST_TO_ADDR
// uc_nation := nation ;
6562: LD_ADDR_OWVAR 21
6566: PUSH
6567: LD_VAR 0 2
6571: ST_TO_ADDR
// vc_chassis := chassis ;
6572: LD_ADDR_OWVAR 37
6576: PUSH
6577: LD_VAR 0 3
6581: ST_TO_ADDR
// vc_engine := engine ;
6582: LD_ADDR_OWVAR 39
6586: PUSH
6587: LD_VAR 0 4
6591: ST_TO_ADDR
// vc_control := control ;
6592: LD_ADDR_OWVAR 38
6596: PUSH
6597: LD_VAR 0 5
6601: ST_TO_ADDR
// vc_weapon := weapon ;
6602: LD_ADDR_OWVAR 40
6606: PUSH
6607: LD_VAR 0 6
6611: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6612: LD_ADDR_OWVAR 41
6616: PUSH
6617: LD_VAR 0 7
6621: ST_TO_ADDR
// result := CreateVehicle ;
6622: LD_ADDR_VAR 0 8
6626: PUSH
6627: CALL_OW 45
6631: ST_TO_ADDR
// end ;
6632: LD_VAR 0 8
6636: RET
// export function SayX ( units , ident ) ; var i ; begin
6637: LD_INT 0
6639: PPUSH
6640: PPUSH
// result := false ;
6641: LD_ADDR_VAR 0 3
6645: PUSH
6646: LD_INT 0
6648: ST_TO_ADDR
// if not units then
6649: LD_VAR 0 1
6653: NOT
6654: IFFALSE 6658
// exit ;
6656: GO 6712
// for i in units do
6658: LD_ADDR_VAR 0 4
6662: PUSH
6663: LD_VAR 0 1
6667: PUSH
6668: FOR_IN
6669: IFFALSE 6710
// if IsOk ( i ) then
6671: LD_VAR 0 4
6675: PPUSH
6676: CALL_OW 302
6680: IFFALSE 6708
// begin Say ( i , ident ) ;
6682: LD_VAR 0 4
6686: PPUSH
6687: LD_VAR 0 2
6691: PPUSH
6692: CALL_OW 88
// result := i ;
6696: LD_ADDR_VAR 0 3
6700: PUSH
6701: LD_VAR 0 4
6705: ST_TO_ADDR
// break ;
6706: GO 6710
// end ;
6708: GO 6668
6710: POP
6711: POP
// end ;
6712: LD_VAR 0 3
6716: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
6717: LD_INT 0
6719: PPUSH
6720: PPUSH
// InitUc ;
6721: CALL_OW 18
// InitHc ;
6725: CALL_OW 19
// uc_side := 0 ;
6729: LD_ADDR_OWVAR 20
6733: PUSH
6734: LD_INT 0
6736: ST_TO_ADDR
// uc_nation := 0 ;
6737: LD_ADDR_OWVAR 21
6741: PUSH
6742: LD_INT 0
6744: ST_TO_ADDR
// for i = 1 to amount do
6745: LD_ADDR_VAR 0 4
6749: PUSH
6750: DOUBLE
6751: LD_INT 1
6753: DEC
6754: ST_TO_ADDR
6755: LD_VAR 0 2
6759: PUSH
6760: FOR_TO
6761: IFFALSE 6843
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
6763: LD_ADDR_OWVAR 29
6767: PUSH
6768: LD_INT 9
6770: PPUSH
6771: LD_INT 12
6773: PPUSH
6774: CALL_OW 12
6778: PUSH
6779: LD_INT 9
6781: PPUSH
6782: LD_INT 12
6784: PPUSH
6785: CALL_OW 12
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
6794: LD_ADDR_OWVAR 35
6798: PUSH
6799: LD_INT 1
6801: NEG
6802: PPUSH
6803: LD_INT 1
6805: PPUSH
6806: CALL_OW 12
6810: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
6811: LD_INT 0
6813: PPUSH
6814: LD_INT 12
6816: PPUSH
6817: LD_INT 1
6819: PPUSH
6820: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
6824: CALL_OW 44
6828: PPUSH
6829: LD_VAR 0 1
6833: PPUSH
6834: LD_INT 0
6836: PPUSH
6837: CALL_OW 49
// end ;
6841: GO 6760
6843: POP
6844: POP
// InitHc ;
6845: CALL_OW 19
// end ;
6849: LD_VAR 0 3
6853: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
6854: LD_INT 0
6856: PPUSH
6857: PPUSH
// uc_side := 0 ;
6858: LD_ADDR_OWVAR 20
6862: PUSH
6863: LD_INT 0
6865: ST_TO_ADDR
// uc_nation := 0 ;
6866: LD_ADDR_OWVAR 21
6870: PUSH
6871: LD_INT 0
6873: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 ] [ Difficulty ] ) ;
6874: LD_INT 7
6876: PPUSH
6877: LD_INT 6
6879: PUSH
6880: LD_INT 5
6882: PUSH
6883: LD_INT 4
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: LIST
6890: PUSH
6891: LD_OWVAR 67
6895: ARRAY
6896: PPUSH
6897: CALL 6717 0 2
// for i = 1 to 2 do
6901: LD_ADDR_VAR 0 4
6905: PUSH
6906: DOUBLE
6907: LD_INT 1
6909: DEC
6910: ST_TO_ADDR
6911: LD_INT 2
6913: PUSH
6914: FOR_TO
6915: IFFALSE 6954
// begin vc_chassis := class_mastodont ;
6917: LD_ADDR_OWVAR 37
6921: PUSH
6922: LD_EXP 75
6926: ST_TO_ADDR
// vc_control := control_rider ;
6927: LD_ADDR_OWVAR 38
6931: PUSH
6932: LD_INT 4
6934: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
6935: CALL_OW 45
6939: PPUSH
6940: LD_VAR 0 1
6944: PPUSH
6945: LD_INT 0
6947: PPUSH
6948: CALL 60283 0 3
// end ;
6952: GO 6914
6954: POP
6955: POP
// for i := 1 to 4 do
6956: LD_ADDR_VAR 0 4
6960: PUSH
6961: DOUBLE
6962: LD_INT 1
6964: DEC
6965: ST_TO_ADDR
6966: LD_INT 4
6968: PUSH
6969: FOR_TO
6970: IFFALSE 7009
// begin hc_class := class_horse ;
6972: LD_ADDR_OWVAR 28
6976: PUSH
6977: LD_EXP 76
6981: ST_TO_ADDR
// hc_gallery :=  ;
6982: LD_ADDR_OWVAR 33
6986: PUSH
6987: LD_STRING 
6989: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
6990: CALL_OW 44
6994: PPUSH
6995: LD_VAR 0 1
6999: PPUSH
7000: LD_INT 0
7002: PPUSH
7003: CALL_OW 49
// end ;
7007: GO 6969
7009: POP
7010: POP
// for i = 1 to 5 do
7011: LD_ADDR_VAR 0 4
7015: PUSH
7016: DOUBLE
7017: LD_INT 1
7019: DEC
7020: ST_TO_ADDR
7021: LD_INT 5
7023: PUSH
7024: FOR_TO
7025: IFFALSE 7079
// begin hc_class = class_tiger ;
7027: LD_ADDR_OWVAR 28
7031: PUSH
7032: LD_INT 14
7034: ST_TO_ADDR
// hc_gallery =  ;
7035: LD_ADDR_OWVAR 33
7039: PUSH
7040: LD_STRING 
7042: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
7043: LD_ADDR_OWVAR 35
7047: PUSH
7048: LD_INT 7
7050: NEG
7051: PPUSH
7052: LD_INT 7
7054: PPUSH
7055: CALL_OW 12
7059: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
7060: CALL_OW 44
7064: PPUSH
7065: LD_VAR 0 1
7069: PPUSH
7070: LD_INT 0
7072: PPUSH
7073: CALL 60283 0 3
// end ;
7077: GO 7024
7079: POP
7080: POP
// for i := 1 to 4 do
7081: LD_ADDR_VAR 0 4
7085: PUSH
7086: DOUBLE
7087: LD_INT 1
7089: DEC
7090: ST_TO_ADDR
7091: LD_INT 4
7093: PUSH
7094: FOR_TO
7095: IFFALSE 7132
// begin hc_class := class_phororhacos ;
7097: LD_ADDR_OWVAR 28
7101: PUSH
7102: LD_INT 18
7104: ST_TO_ADDR
// hc_gallery :=  ;
7105: LD_ADDR_OWVAR 33
7109: PUSH
7110: LD_STRING 
7112: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7113: CALL_OW 44
7117: PPUSH
7118: LD_VAR 0 1
7122: PPUSH
7123: LD_INT 0
7125: PPUSH
7126: CALL_OW 49
// end ;
7130: GO 7094
7132: POP
7133: POP
// for i := 1 to 4 do
7134: LD_ADDR_VAR 0 4
7138: PUSH
7139: DOUBLE
7140: LD_INT 1
7142: DEC
7143: ST_TO_ADDR
7144: LD_INT 4
7146: PUSH
7147: FOR_TO
7148: IFFALSE 7185
// begin hc_class := class_baggie ;
7150: LD_ADDR_OWVAR 28
7154: PUSH
7155: LD_INT 13
7157: ST_TO_ADDR
// hc_gallery :=  ;
7158: LD_ADDR_OWVAR 33
7162: PUSH
7163: LD_STRING 
7165: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7166: CALL_OW 44
7170: PPUSH
7171: LD_VAR 0 1
7175: PPUSH
7176: LD_INT 0
7178: PPUSH
7179: CALL_OW 49
// end ;
7183: GO 7147
7185: POP
7186: POP
// for i := 1 to 7 do
7187: LD_ADDR_VAR 0 4
7191: PUSH
7192: DOUBLE
7193: LD_INT 1
7195: DEC
7196: ST_TO_ADDR
7197: LD_INT 7
7199: PUSH
7200: FOR_TO
7201: IFFALSE 7238
// begin hc_class := class_frog ;
7203: LD_ADDR_OWVAR 28
7207: PUSH
7208: LD_INT 19
7210: ST_TO_ADDR
// hc_gallery :=  ;
7211: LD_ADDR_OWVAR 33
7215: PUSH
7216: LD_STRING 
7218: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
7219: CALL_OW 44
7223: PPUSH
7224: LD_VAR 0 2
7228: PPUSH
7229: LD_INT 0
7231: PPUSH
7232: CALL_OW 49
// end ;
7236: GO 7200
7238: POP
7239: POP
// end ;
7240: LD_VAR 0 3
7244: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
7245: LD_INT 0
7247: PPUSH
7248: PPUSH
7249: PPUSH
// if not observer or not unit then
7250: LD_VAR 0 1
7254: NOT
7255: PUSH
7256: LD_VAR 0 2
7260: NOT
7261: OR
7262: IFFALSE 7266
// exit ;
7264: GO 7314
// if not See ( GetSide ( observer ) , unit ) then
7266: LD_VAR 0 1
7270: PPUSH
7271: CALL_OW 255
7275: PPUSH
7276: LD_VAR 0 2
7280: PPUSH
7281: CALL_OW 292
7285: NOT
7286: IFFALSE 7290
// exit ;
7288: GO 7314
// result := GetDistUnits ( observer , unit ) < 12 ;
7290: LD_ADDR_VAR 0 3
7294: PUSH
7295: LD_VAR 0 1
7299: PPUSH
7300: LD_VAR 0 2
7304: PPUSH
7305: CALL_OW 296
7309: PUSH
7310: LD_INT 12
7312: LESS
7313: ST_TO_ADDR
// end ;
7314: LD_VAR 0 3
7318: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
7319: LD_INT 0
7321: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
7322: LD_VAR 0 2
7326: PUSH
7327: LD_INT 1
7329: ARRAY
7330: PPUSH
7331: LD_VAR 0 2
7335: PUSH
7336: LD_INT 2
7338: ARRAY
7339: PPUSH
7340: CALL_OW 488
7344: PUSH
7345: LD_VAR 0 2
7349: PUSH
7350: LD_INT 1
7352: ARRAY
7353: PPUSH
7354: LD_VAR 0 2
7358: PUSH
7359: LD_INT 2
7361: ARRAY
7362: PPUSH
7363: CALL_OW 428
7367: PUSH
7368: LD_INT 0
7370: EQUAL
7371: AND
7372: IFFALSE 7406
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
7374: LD_VAR 0 1
7378: PPUSH
7379: LD_VAR 0 2
7383: PUSH
7384: LD_INT 1
7386: ARRAY
7387: PPUSH
7388: LD_VAR 0 2
7392: PUSH
7393: LD_INT 2
7395: ARRAY
7396: PPUSH
7397: LD_VAR 0 3
7401: PPUSH
7402: CALL_OW 48
// end ;
7406: LD_VAR 0 4
7410: RET
// export function ReverseArray ( array ) ; var i ; begin
7411: LD_INT 0
7413: PPUSH
7414: PPUSH
// if not array then
7415: LD_VAR 0 1
7419: NOT
7420: IFFALSE 7424
// exit ;
7422: GO 7482
// result := [ ] ;
7424: LD_ADDR_VAR 0 2
7428: PUSH
7429: EMPTY
7430: ST_TO_ADDR
// for i := 1 to array do
7431: LD_ADDR_VAR 0 3
7435: PUSH
7436: DOUBLE
7437: LD_INT 1
7439: DEC
7440: ST_TO_ADDR
7441: LD_VAR 0 1
7445: PUSH
7446: FOR_TO
7447: IFFALSE 7480
// result := Insert ( result , 1 , array [ i ] ) ;
7449: LD_ADDR_VAR 0 2
7453: PUSH
7454: LD_VAR 0 2
7458: PPUSH
7459: LD_INT 1
7461: PPUSH
7462: LD_VAR 0 1
7466: PUSH
7467: LD_VAR 0 3
7471: ARRAY
7472: PPUSH
7473: CALL_OW 2
7477: ST_TO_ADDR
7478: GO 7446
7480: POP
7481: POP
// end ;
7482: LD_VAR 0 2
7486: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
7487: LD_INT 0
7489: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
7490: LD_VAR 0 1
7494: PPUSH
7495: LD_VAR 0 2
7499: PPUSH
7500: LD_VAR 0 3
7504: PPUSH
7505: LD_VAR 0 4
7509: PPUSH
7510: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
7514: LD_VAR 0 1
7518: PPUSH
7519: LD_VAR 0 2
7523: PPUSH
7524: LD_VAR 0 3
7528: PPUSH
7529: CALL_OW 331
// end ;
7533: LD_VAR 0 5
7537: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
7538: LD_INT 0
7540: PPUSH
// if not units then
7541: LD_VAR 0 1
7545: NOT
7546: IFFALSE 7550
// exit ;
7548: GO 7633
// result := true ;
7550: LD_ADDR_VAR 0 4
7554: PUSH
7555: LD_INT 1
7557: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
7558: LD_VAR 0 1
7562: PPUSH
7563: LD_INT 26
7565: PUSH
7566: LD_INT 1
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PPUSH
7573: CALL_OW 72
7577: PUSH
7578: LD_INT 1
7580: ARRAY
7581: PPUSH
7582: LD_VAR 0 2
7586: PPUSH
7587: CALL_OW 88
7591: NOT
7592: IFFALSE 7633
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
7594: LD_ADDR_VAR 0 4
7598: PUSH
7599: LD_VAR 0 1
7603: PPUSH
7604: LD_INT 26
7606: PUSH
7607: LD_INT 2
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: PPUSH
7614: CALL_OW 72
7618: PUSH
7619: LD_INT 1
7621: ARRAY
7622: PPUSH
7623: LD_VAR 0 3
7627: PPUSH
7628: CALL_OW 88
7632: ST_TO_ADDR
// end ;
7633: LD_VAR 0 4
7637: RET
// export function SeeGroup ( side , group ) ; var i ; begin
7638: LD_INT 0
7640: PPUSH
7641: PPUSH
// if not group then
7642: LD_VAR 0 2
7646: NOT
7647: IFFALSE 7651
// exit ;
7649: GO 7696
// for i in group do
7651: LD_ADDR_VAR 0 4
7655: PUSH
7656: LD_VAR 0 2
7660: PUSH
7661: FOR_IN
7662: IFFALSE 7694
// if See ( side , i ) then
7664: LD_VAR 0 1
7668: PPUSH
7669: LD_VAR 0 4
7673: PPUSH
7674: CALL_OW 292
7678: IFFALSE 7692
// begin result := true ;
7680: LD_ADDR_VAR 0 3
7684: PUSH
7685: LD_INT 1
7687: ST_TO_ADDR
// exit ;
7688: POP
7689: POP
7690: GO 7696
// end ;
7692: GO 7661
7694: POP
7695: POP
// end ; end_of_file
7696: LD_VAR 0 3
7700: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
7701: LD_INT 0
7703: PPUSH
7704: PPUSH
7705: PPUSH
7706: PPUSH
7707: PPUSH
7708: PPUSH
7709: PPUSH
// uc_side := 3 ;
7710: LD_ADDR_OWVAR 20
7714: PUSH
7715: LD_INT 3
7717: ST_TO_ADDR
// uc_nation := 3 ;
7718: LD_ADDR_OWVAR 21
7722: PUSH
7723: LD_INT 3
7725: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
7726: LD_ADDR_EXP 48
7730: PUSH
7731: LD_STRING Morozov
7733: PPUSH
7734: CALL_OW 25
7738: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
7739: LD_EXP 48
7743: PPUSH
7744: LD_INT 52
7746: PPUSH
7747: CALL_OW 52
// if not gaidarKilled then
7751: LD_EXP 7
7755: NOT
7756: IFFALSE 7789
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
7758: LD_ADDR_EXP 49
7762: PUSH
7763: LD_STRING Gaydar
7765: PPUSH
7766: LD_INT 0
7768: PPUSH
7769: LD_STRING 
7771: PPUSH
7772: CALL 24631 0 3
7776: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
7777: LD_EXP 49
7781: PPUSH
7782: LD_INT 52
7784: PPUSH
7785: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
7789: LD_INT 52
7791: PPUSH
7792: LD_STRING lenin
7794: PPUSH
7795: CALL_OW 500
// ruOutsiders := [ ] ;
7799: LD_ADDR_EXP 51
7803: PUSH
7804: EMPTY
7805: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
7806: LD_ADDR_EXP 53
7810: PUSH
7811: EMPTY
7812: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
7813: LD_ADDR_EXP 54
7817: PUSH
7818: EMPTY
7819: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
7820: LD_ADDR_EXP 55
7824: PUSH
7825: EMPTY
7826: ST_TO_ADDR
// ruAttackers := [ ] ;
7827: LD_ADDR_EXP 56
7831: PUSH
7832: EMPTY
7833: ST_TO_ADDR
// waveStrength := 0 ;
7834: LD_ADDR_EXP 57
7838: PUSH
7839: LD_INT 0
7841: ST_TO_ADDR
// if not gaidarKilled then
7842: LD_EXP 7
7846: NOT
7847: IFFALSE 7857
// waveStrength := 2 ;
7849: LD_ADDR_EXP 57
7853: PUSH
7854: LD_INT 2
7856: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
7857: LD_ADDR_VAR 0 7
7861: PUSH
7862: LD_INT 22
7864: PUSH
7865: LD_INT 3
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: LD_INT 21
7874: PUSH
7875: LD_INT 3
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: PPUSH
7886: CALL_OW 69
7890: ST_TO_ADDR
// for i in tmp do
7891: LD_ADDR_VAR 0 2
7895: PUSH
7896: LD_VAR 0 7
7900: PUSH
7901: FOR_IN
7902: IFFALSE 7935
// SetBLevel ( i , [ 5 , 5 , 6 ] [ Difficulty ] ) ;
7904: LD_VAR 0 2
7908: PPUSH
7909: LD_INT 5
7911: PUSH
7912: LD_INT 5
7914: PUSH
7915: LD_INT 6
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: LIST
7922: PUSH
7923: LD_OWVAR 67
7927: ARRAY
7928: PPUSH
7929: CALL_OW 241
7933: GO 7901
7935: POP
7936: POP
// for i := 1 to 3 do
7937: LD_ADDR_VAR 0 2
7941: PUSH
7942: DOUBLE
7943: LD_INT 1
7945: DEC
7946: ST_TO_ADDR
7947: LD_INT 3
7949: PUSH
7950: FOR_TO
7951: IFFALSE 7989
// begin PrepareHuman ( false , 1 , 0 ) ;
7953: LD_INT 0
7955: PPUSH
7956: LD_INT 1
7958: PPUSH
7959: LD_INT 0
7961: PPUSH
7962: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
7966: CALL_OW 44
7970: PPUSH
7971: LD_INT 75
7973: PPUSH
7974: LD_INT 49
7976: PPUSH
7977: LD_INT 3
7979: PPUSH
7980: LD_INT 0
7982: PPUSH
7983: CALL_OW 50
// end ;
7987: GO 7950
7989: POP
7990: POP
// for i := 1 to 4 do
7991: LD_ADDR_VAR 0 2
7995: PUSH
7996: DOUBLE
7997: LD_INT 1
7999: DEC
8000: ST_TO_ADDR
8001: LD_INT 4
8003: PUSH
8004: FOR_TO
8005: IFFALSE 8051
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
8007: LD_INT 0
8009: PPUSH
8010: LD_INT 1
8012: PPUSH
8013: LD_INT 2
8015: PPUSH
8016: CALL_OW 12
8020: PPUSH
8021: LD_INT 0
8023: PPUSH
8024: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
8028: CALL_OW 44
8032: PPUSH
8033: LD_INT 330
8035: PPUSH
8036: LD_INT 231
8038: PPUSH
8039: LD_INT 5
8041: PPUSH
8042: LD_INT 0
8044: PPUSH
8045: CALL_OW 50
// end ;
8049: GO 8004
8051: POP
8052: POP
// hc_class := 1 ;
8053: LD_ADDR_OWVAR 28
8057: PUSH
8058: LD_INT 1
8060: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
8061: CALL_OW 44
8065: PPUSH
8066: LD_INT 324
8068: PPUSH
8069: LD_INT 219
8071: PPUSH
8072: CALL_OW 428
8076: PPUSH
8077: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
8081: CALL_OW 44
8085: PPUSH
8086: LD_INT 316
8088: PPUSH
8089: LD_INT 223
8091: PPUSH
8092: CALL_OW 428
8096: PPUSH
8097: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
8101: LD_ADDR_VAR 0 7
8105: PUSH
8106: LD_INT 172
8108: PPUSH
8109: LD_INT 198
8111: PPUSH
8112: CALL_OW 428
8116: PPUSH
8117: CALL_OW 274
8121: PUSH
8122: LD_INT 189
8124: PPUSH
8125: LD_INT 156
8127: PPUSH
8128: CALL_OW 428
8132: PPUSH
8133: CALL_OW 274
8137: PUSH
8138: LD_INT 341
8140: PPUSH
8141: LD_INT 232
8143: PPUSH
8144: CALL_OW 428
8148: PPUSH
8149: CALL_OW 274
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: LIST
8158: ST_TO_ADDR
// for i in tmp do
8159: LD_ADDR_VAR 0 2
8163: PUSH
8164: LD_VAR 0 7
8168: PUSH
8169: FOR_IN
8170: IFFALSE 8204
// begin SetResourceType ( i , mat_cans , 200 ) ;
8172: LD_VAR 0 2
8176: PPUSH
8177: LD_INT 1
8179: PPUSH
8180: LD_INT 200
8182: PPUSH
8183: CALL_OW 277
// SetResourceType ( i , mat_oil , 200 ) ;
8187: LD_VAR 0 2
8191: PPUSH
8192: LD_INT 2
8194: PPUSH
8195: LD_INT 200
8197: PPUSH
8198: CALL_OW 277
// end ;
8202: GO 8169
8204: POP
8205: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 177 , 114 ] , [ 138 , 96 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
8206: LD_ADDR_VAR 0 7
8210: PUSH
8211: LD_INT 198
8213: PUSH
8214: LD_INT 158
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: PUSH
8221: LD_INT 203
8223: PUSH
8224: LD_INT 166
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: PUSH
8231: LD_INT 177
8233: PUSH
8234: LD_INT 114
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: PUSH
8241: LD_INT 138
8243: PUSH
8244: LD_INT 96
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: PUSH
8251: LD_INT 181
8253: PUSH
8254: LD_INT 209
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: PUSH
8261: LD_INT 178
8263: PUSH
8264: LD_INT 196
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PUSH
8271: LD_INT 181
8273: PUSH
8274: LD_INT 212
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: ST_TO_ADDR
// for i := 1 to tmp do
8290: LD_ADDR_VAR 0 2
8294: PUSH
8295: DOUBLE
8296: LD_INT 1
8298: DEC
8299: ST_TO_ADDR
8300: LD_VAR 0 7
8304: PUSH
8305: FOR_TO
8306: IFFALSE 8423
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
8308: LD_INT 0
8310: PPUSH
8311: LD_INT 1
8313: PPUSH
8314: LD_INT 4
8316: PUSH
8317: LD_INT 5
8319: PUSH
8320: LD_INT 6
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: LIST
8327: PUSH
8328: LD_OWVAR 67
8332: ARRAY
8333: PPUSH
8334: CALL_OW 380
// un := CreateHuman ;
8338: LD_ADDR_VAR 0 5
8342: PUSH
8343: CALL_OW 44
8347: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
8348: LD_ADDR_VAR 0 4
8352: PUSH
8353: LD_VAR 0 7
8357: PUSH
8358: LD_VAR 0 2
8362: ARRAY
8363: PUSH
8364: LD_INT 1
8366: ARRAY
8367: PPUSH
8368: LD_VAR 0 7
8372: PUSH
8373: LD_VAR 0 2
8377: ARRAY
8378: PUSH
8379: LD_INT 2
8381: ARRAY
8382: PPUSH
8383: CALL_OW 428
8387: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
8388: LD_VAR 0 5
8392: PPUSH
8393: LD_VAR 0 4
8397: PPUSH
8398: CALL 57203 0 1
8402: PPUSH
8403: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8407: LD_VAR 0 5
8411: PPUSH
8412: LD_VAR 0 4
8416: PPUSH
8417: CALL_OW 52
// end ;
8421: GO 8305
8423: POP
8424: POP
// for i := 1 to 3 do
8425: LD_ADDR_VAR 0 2
8429: PUSH
8430: DOUBLE
8431: LD_INT 1
8433: DEC
8434: ST_TO_ADDR
8435: LD_INT 3
8437: PUSH
8438: FOR_TO
8439: IFFALSE 8494
// begin InitHc ;
8441: CALL_OW 19
// uc_nation := 0 ;
8445: LD_ADDR_OWVAR 21
8449: PUSH
8450: LD_INT 0
8452: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
8453: LD_ADDR_OWVAR 28
8457: PUSH
8458: LD_INT 16
8460: ST_TO_ADDR
// un := CreateHuman ;
8461: LD_ADDR_VAR 0 5
8465: PUSH
8466: CALL_OW 44
8470: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
8471: LD_VAR 0 5
8475: PPUSH
8476: LD_INT 194
8478: PPUSH
8479: LD_INT 164
8481: PPUSH
8482: LD_INT 6
8484: PPUSH
8485: LD_INT 0
8487: PPUSH
8488: CALL_OW 50
// end ;
8492: GO 8438
8494: POP
8495: POP
// uc_nation := 3 ;
8496: LD_ADDR_OWVAR 21
8500: PUSH
8501: LD_INT 3
8503: ST_TO_ADDR
// if Difficulty > 1 then
8504: LD_OWVAR 67
8508: PUSH
8509: LD_INT 1
8511: GREATER
8512: IFFALSE 8768
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
8514: LD_INT 24
8516: PPUSH
8517: LD_INT 1
8519: PPUSH
8520: LD_INT 1
8522: PPUSH
8523: LD_INT 44
8525: PPUSH
8526: LD_INT 10
8528: PPUSH
8529: CALL 29495 0 5
// un := CreateVehicle ;
8533: LD_ADDR_VAR 0 5
8537: PUSH
8538: CALL_OW 45
8542: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 162 , 1 , false ) ;
8543: LD_VAR 0 5
8547: PPUSH
8548: LD_INT 199
8550: PPUSH
8551: LD_INT 162
8553: PPUSH
8554: LD_INT 1
8556: PPUSH
8557: LD_INT 0
8559: PPUSH
8560: CALL 63300 0 5
// ComHold ( un ) ;
8564: LD_VAR 0 5
8568: PPUSH
8569: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
8573: LD_INT 0
8575: PPUSH
8576: LD_INT 3
8578: PPUSH
8579: LD_INT 4
8581: PPUSH
8582: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8586: CALL_OW 44
8590: PPUSH
8591: LD_VAR 0 5
8595: PPUSH
8596: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
8600: LD_INT 24
8602: PPUSH
8603: LD_INT 1
8605: PPUSH
8606: LD_INT 1
8608: PPUSH
8609: LD_INT 45
8611: PPUSH
8612: LD_INT 10
8614: PPUSH
8615: CALL 29495 0 5
// un := CreateVehicle ;
8619: LD_ADDR_VAR 0 5
8623: PUSH
8624: CALL_OW 45
8628: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
8629: LD_VAR 0 5
8633: PPUSH
8634: LD_INT 129
8636: PPUSH
8637: LD_INT 93
8639: PPUSH
8640: LD_INT 1
8642: PPUSH
8643: LD_INT 0
8645: PPUSH
8646: CALL 63300 0 5
// ComHold ( un ) ;
8650: LD_VAR 0 5
8654: PPUSH
8655: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
8659: LD_INT 0
8661: PPUSH
8662: LD_INT 3
8664: PPUSH
8665: LD_INT 4
8667: PPUSH
8668: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8672: CALL_OW 44
8676: PPUSH
8677: LD_VAR 0 5
8681: PPUSH
8682: CALL_OW 52
// bc_type := b_armoury ;
8686: LD_ADDR_OWVAR 42
8690: PUSH
8691: LD_INT 4
8693: ST_TO_ADDR
// bc_level := 6 ;
8694: LD_ADDR_OWVAR 43
8698: PUSH
8699: LD_INT 6
8701: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
8702: LD_INT 120
8704: PPUSH
8705: LD_INT 100
8707: PPUSH
8708: LD_INT 5
8710: PPUSH
8711: CALL_OW 47
// for i := 1 to 3 do
8715: LD_ADDR_VAR 0 2
8719: PUSH
8720: DOUBLE
8721: LD_INT 1
8723: DEC
8724: ST_TO_ADDR
8725: LD_INT 3
8727: PUSH
8728: FOR_TO
8729: IFFALSE 8766
// begin PrepareHuman ( false , 1 , 5 ) ;
8731: LD_INT 0
8733: PPUSH
8734: LD_INT 1
8736: PPUSH
8737: LD_INT 5
8739: PPUSH
8740: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
8744: CALL_OW 44
8748: PPUSH
8749: LD_INT 120
8751: PPUSH
8752: LD_INT 100
8754: PPUSH
8755: CALL_OW 428
8759: PPUSH
8760: CALL_OW 52
// end ;
8764: GO 8728
8766: POP
8767: POP
// end ; tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
8768: LD_ADDR_VAR 0 7
8772: PUSH
8773: LD_INT 135
8775: PUSH
8776: LD_INT 100
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: PUSH
8783: LD_INT 137
8785: PUSH
8786: LD_INT 92
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: ST_TO_ADDR
// for i := 1 to tmp do
8797: LD_ADDR_VAR 0 2
8801: PUSH
8802: DOUBLE
8803: LD_INT 1
8805: DEC
8806: ST_TO_ADDR
8807: LD_VAR 0 7
8811: PUSH
8812: FOR_TO
8813: IFFALSE 8979
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
8815: LD_INT 22
8817: PUSH
8818: LD_INT 22
8820: PUSH
8821: LD_INT 24
8823: PUSH
8824: LD_INT 24
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: PUSH
8833: LD_OWVAR 67
8837: PUSH
8838: LD_INT 0
8840: PPUSH
8841: LD_INT 1
8843: PPUSH
8844: CALL_OW 12
8848: PLUS
8849: ARRAY
8850: PPUSH
8851: LD_INT 1
8853: PPUSH
8854: LD_INT 1
8856: PPUSH
8857: LD_INT 44
8859: PPUSH
8860: LD_INT 25
8862: PPUSH
8863: CALL 29495 0 5
// veh := CreateVehicle ;
8867: LD_ADDR_VAR 0 6
8871: PUSH
8872: CALL_OW 45
8876: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8877: LD_VAR 0 6
8881: PPUSH
8882: LD_INT 2
8884: PPUSH
8885: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
8889: LD_VAR 0 6
8893: PPUSH
8894: LD_VAR 0 7
8898: PUSH
8899: LD_VAR 0 2
8903: ARRAY
8904: PUSH
8905: LD_INT 1
8907: ARRAY
8908: PPUSH
8909: LD_VAR 0 7
8913: PUSH
8914: LD_VAR 0 2
8918: ARRAY
8919: PUSH
8920: LD_INT 2
8922: ARRAY
8923: PPUSH
8924: LD_INT 0
8926: PPUSH
8927: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
8931: LD_INT 0
8933: PPUSH
8934: LD_INT 3
8936: PPUSH
8937: LD_INT 6
8939: PPUSH
8940: CALL_OW 380
// un := CreateHuman ;
8944: LD_ADDR_VAR 0 5
8948: PUSH
8949: CALL_OW 44
8953: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8954: LD_VAR 0 5
8958: PPUSH
8959: LD_VAR 0 6
8963: PPUSH
8964: CALL_OW 52
// ComHold ( veh ) ;
8968: LD_VAR 0 6
8972: PPUSH
8973: CALL_OW 140
// end ;
8977: GO 8812
8979: POP
8980: POP
// tmp := [ 191 , 122 ] ;
8981: LD_ADDR_VAR 0 7
8985: PUSH
8986: LD_INT 191
8988: PUSH
8989: LD_INT 122
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
8996: LD_INT 24
8998: PPUSH
8999: LD_INT 1
9001: PPUSH
9002: LD_INT 1
9004: PPUSH
9005: LD_INT 44
9007: PPUSH
9008: LD_INT 30
9010: PPUSH
9011: CALL 29495 0 5
// ruBlockadeTank := CreateVehicle ;
9015: LD_ADDR_EXP 50
9019: PUSH
9020: CALL_OW 45
9024: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
9025: LD_EXP 50
9029: PPUSH
9030: LD_INT 2
9032: PPUSH
9033: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
9037: LD_EXP 50
9041: PPUSH
9042: LD_INT 191
9044: PPUSH
9045: LD_INT 122
9047: PPUSH
9048: LD_INT 0
9050: PPUSH
9051: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 ] [ Difficulty - 1 ] ) ;
9055: LD_INT 1
9057: PPUSH
9058: LD_INT 5
9060: PUSH
9061: LD_INT 6
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: PUSH
9068: LD_OWVAR 67
9072: PUSH
9073: LD_INT 1
9075: MINUS
9076: ARRAY
9077: PPUSH
9078: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
9082: CALL_OW 44
9086: PPUSH
9087: LD_EXP 50
9091: PPUSH
9092: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
9096: LD_EXP 50
9100: PPUSH
9101: CALL_OW 140
// ruBlockadeSquad := [ ] ;
9105: LD_ADDR_EXP 52
9109: PUSH
9110: EMPTY
9111: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 6 ] [ Difficulty ] do
9112: LD_ADDR_VAR 0 2
9116: PUSH
9117: DOUBLE
9118: LD_INT 1
9120: DEC
9121: ST_TO_ADDR
9122: LD_INT 3
9124: PUSH
9125: LD_INT 4
9127: PUSH
9128: LD_INT 6
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: LIST
9135: PUSH
9136: LD_OWVAR 67
9140: ARRAY
9141: PUSH
9142: FOR_TO
9143: IFFALSE 9255
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
9145: LD_INT 0
9147: PPUSH
9148: LD_INT 1
9150: PPUSH
9151: LD_INT 4
9153: PUSH
9154: LD_INT 5
9156: PUSH
9157: LD_INT 6
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: LIST
9164: PUSH
9165: LD_OWVAR 67
9169: ARRAY
9170: PPUSH
9171: CALL_OW 380
// un := CreateHuman ;
9175: LD_ADDR_VAR 0 5
9179: PUSH
9180: CALL_OW 44
9184: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
9185: LD_VAR 0 5
9189: PPUSH
9190: LD_INT 9
9192: PPUSH
9193: LD_INT 0
9195: PPUSH
9196: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
9200: LD_VAR 0 5
9204: PPUSH
9205: LD_INT 198
9207: PPUSH
9208: LD_INT 129
9210: PPUSH
9211: CALL_OW 118
// AddComCrawl ( un ) ;
9215: LD_VAR 0 5
9219: PPUSH
9220: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
9224: LD_ADDR_EXP 52
9228: PUSH
9229: LD_EXP 52
9233: PPUSH
9234: LD_EXP 52
9238: PUSH
9239: LD_INT 1
9241: PLUS
9242: PPUSH
9243: LD_VAR 0 5
9247: PPUSH
9248: CALL_OW 1
9252: ST_TO_ADDR
// end ;
9253: GO 9142
9255: POP
9256: POP
// PrepareHuman ( false , 4 , 5 ) ;
9257: LD_INT 0
9259: PPUSH
9260: LD_INT 4
9262: PPUSH
9263: LD_INT 5
9265: PPUSH
9266: CALL_OW 380
// un := CreateHuman ;
9270: LD_ADDR_VAR 0 5
9274: PUSH
9275: CALL_OW 44
9279: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
9280: LD_VAR 0 5
9284: PPUSH
9285: LD_INT 179
9287: PPUSH
9288: LD_INT 113
9290: PPUSH
9291: LD_INT 0
9293: PPUSH
9294: CALL_OW 48
// ComHold ( un ) ;
9298: LD_VAR 0 5
9302: PPUSH
9303: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
9307: LD_ADDR_EXP 52
9311: PUSH
9312: LD_EXP 52
9316: PPUSH
9317: LD_EXP 52
9321: PUSH
9322: LD_INT 1
9324: PLUS
9325: PPUSH
9326: LD_VAR 0 5
9330: PPUSH
9331: CALL_OW 1
9335: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
9336: LD_ADDR_VAR 0 7
9340: PUSH
9341: LD_INT 167
9343: PPUSH
9344: LD_INT 243
9346: PPUSH
9347: CALL_OW 428
9351: PPUSH
9352: CALL_OW 274
9356: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
9357: LD_VAR 0 7
9361: PPUSH
9362: LD_INT 1
9364: PPUSH
9365: LD_INT 1000
9367: PPUSH
9368: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
9372: LD_VAR 0 7
9376: PPUSH
9377: LD_INT 2
9379: PPUSH
9380: LD_INT 400
9382: PPUSH
9383: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
9387: LD_ADDR_VAR 0 7
9391: PUSH
9392: LD_INT 169
9394: PPUSH
9395: LD_INT 229
9397: PPUSH
9398: CALL_OW 428
9402: ST_TO_ADDR
// for i := 1 to 3 do
9403: LD_ADDR_VAR 0 2
9407: PUSH
9408: DOUBLE
9409: LD_INT 1
9411: DEC
9412: ST_TO_ADDR
9413: LD_INT 3
9415: PUSH
9416: FOR_TO
9417: IFFALSE 9504
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
9419: LD_INT 0
9421: PPUSH
9422: LD_INT 1
9424: PPUSH
9425: LD_INT 4
9427: PUSH
9428: LD_INT 5
9430: PUSH
9431: LD_INT 5
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: LIST
9438: PUSH
9439: LD_OWVAR 67
9443: ARRAY
9444: PPUSH
9445: CALL_OW 380
// un := CreateHuman ;
9449: LD_ADDR_VAR 0 5
9453: PUSH
9454: CALL_OW 44
9458: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
9459: LD_VAR 0 5
9463: PPUSH
9464: LD_VAR 0 7
9468: PPUSH
9469: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
9473: LD_ADDR_EXP 53
9477: PUSH
9478: LD_EXP 53
9482: PPUSH
9483: LD_EXP 53
9487: PUSH
9488: LD_INT 1
9490: PLUS
9491: PPUSH
9492: LD_VAR 0 5
9496: PPUSH
9497: CALL_OW 1
9501: ST_TO_ADDR
// end ;
9502: GO 9416
9504: POP
9505: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
9506: LD_ADDR_VAR 0 7
9510: PUSH
9511: LD_INT 165
9513: PUSH
9514: LD_INT 227
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 173
9523: PUSH
9524: LD_INT 231
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: ST_TO_ADDR
// for i := 1 to tmp do
9535: LD_ADDR_VAR 0 2
9539: PUSH
9540: DOUBLE
9541: LD_INT 1
9543: DEC
9544: ST_TO_ADDR
9545: LD_VAR 0 7
9549: PUSH
9550: FOR_TO
9551: IFFALSE 9668
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
9553: LD_INT 0
9555: PPUSH
9556: LD_INT 1
9558: PPUSH
9559: LD_INT 4
9561: PUSH
9562: LD_INT 5
9564: PUSH
9565: LD_INT 5
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: LIST
9572: PUSH
9573: LD_OWVAR 67
9577: ARRAY
9578: PPUSH
9579: CALL_OW 380
// un := CreateHuman ;
9583: LD_ADDR_VAR 0 5
9587: PUSH
9588: CALL_OW 44
9592: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
9593: LD_VAR 0 5
9597: PPUSH
9598: LD_VAR 0 7
9602: PUSH
9603: LD_VAR 0 2
9607: ARRAY
9608: PUSH
9609: LD_INT 1
9611: ARRAY
9612: PPUSH
9613: LD_VAR 0 7
9617: PUSH
9618: LD_VAR 0 2
9622: ARRAY
9623: PUSH
9624: LD_INT 2
9626: ARRAY
9627: PPUSH
9628: CALL_OW 428
9632: PPUSH
9633: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
9637: LD_ADDR_EXP 53
9641: PUSH
9642: LD_EXP 53
9646: PPUSH
9647: LD_EXP 53
9651: PUSH
9652: LD_INT 1
9654: PLUS
9655: PPUSH
9656: LD_VAR 0 5
9660: PPUSH
9661: CALL_OW 1
9665: ST_TO_ADDR
// end ;
9666: GO 9550
9668: POP
9669: POP
// for i := 1 to 2 do
9670: LD_ADDR_VAR 0 2
9674: PUSH
9675: DOUBLE
9676: LD_INT 1
9678: DEC
9679: ST_TO_ADDR
9680: LD_INT 2
9682: PUSH
9683: FOR_TO
9684: IFFALSE 9739
// begin InitHc ;
9686: CALL_OW 19
// uc_nation := 0 ;
9690: LD_ADDR_OWVAR 21
9694: PUSH
9695: LD_INT 0
9697: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
9698: LD_ADDR_OWVAR 28
9702: PUSH
9703: LD_INT 16
9705: ST_TO_ADDR
// un := CreateHuman ;
9706: LD_ADDR_VAR 0 5
9710: PUSH
9711: CALL_OW 44
9715: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
9716: LD_VAR 0 5
9720: PPUSH
9721: LD_INT 166
9723: PPUSH
9724: LD_INT 233
9726: PPUSH
9727: LD_INT 2
9729: PPUSH
9730: LD_INT 0
9732: PPUSH
9733: CALL_OW 50
// end ;
9737: GO 9683
9739: POP
9740: POP
// uc_nation := 3 ;
9741: LD_ADDR_OWVAR 21
9745: PUSH
9746: LD_INT 3
9748: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
9749: LD_ADDR_VAR 0 7
9753: PUSH
9754: LD_INT 71
9756: PUSH
9757: LD_INT 52
9759: PUSH
9760: LD_INT 11
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: ST_TO_ADDR
// for i in tmp do
9768: LD_ADDR_VAR 0 2
9772: PUSH
9773: LD_VAR 0 7
9777: PUSH
9778: FOR_IN
9779: IFFALSE 9823
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
9781: LD_VAR 0 2
9785: PPUSH
9786: CALL_OW 274
9790: PPUSH
9791: LD_INT 1
9793: PPUSH
9794: LD_INT 3000
9796: PPUSH
9797: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
9801: LD_VAR 0 2
9805: PPUSH
9806: CALL_OW 274
9810: PPUSH
9811: LD_INT 2
9813: PPUSH
9814: LD_INT 600
9816: PPUSH
9817: CALL_OW 277
// end ;
9821: GO 9778
9823: POP
9824: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
9825: LD_ADDR_VAR 0 7
9829: PUSH
9830: LD_INT 41
9832: PUSH
9833: LD_INT 57
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PUSH
9840: LD_INT 38
9842: PUSH
9843: LD_INT 55
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 50
9852: PUSH
9853: LD_INT 73
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: PUSH
9860: LD_INT 51
9862: PUSH
9863: LD_INT 65
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: PUSH
9870: LD_INT 82
9872: PUSH
9873: LD_INT 93
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PUSH
9880: LD_INT 87
9882: PUSH
9883: LD_INT 100
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PUSH
9890: LD_INT 91
9892: PUSH
9893: LD_INT 109
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: PUSH
9900: LD_INT 84
9902: PUSH
9903: LD_INT 120
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: PUSH
9910: LD_INT 113
9912: PUSH
9913: LD_INT 153
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: PUSH
9920: LD_INT 123
9922: PUSH
9923: LD_INT 171
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: PUSH
9930: LD_INT 125
9932: PUSH
9933: LD_INT 178
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: PUSH
9940: LD_INT 125
9942: PUSH
9943: LD_INT 188
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: PUSH
9950: LD_INT 125
9952: PUSH
9953: LD_INT 201
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: PUSH
9960: LD_INT 33
9962: PUSH
9963: LD_INT 60
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 76
9972: PUSH
9973: LD_INT 95
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PUSH
9980: LD_INT 84
9982: PUSH
9983: LD_INT 111
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: PUSH
9990: LD_INT 112
9992: PUSH
9993: LD_INT 165
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: ST_TO_ADDR
// for i := 1 to tmp do
10019: LD_ADDR_VAR 0 2
10023: PUSH
10024: DOUBLE
10025: LD_INT 1
10027: DEC
10028: ST_TO_ADDR
10029: LD_VAR 0 7
10033: PUSH
10034: FOR_TO
10035: IFFALSE 10274
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
10037: LD_ADDR_VAR 0 4
10041: PUSH
10042: LD_VAR 0 7
10046: PUSH
10047: LD_VAR 0 2
10051: ARRAY
10052: PUSH
10053: LD_INT 1
10055: ARRAY
10056: PPUSH
10057: LD_VAR 0 7
10061: PUSH
10062: LD_VAR 0 2
10066: ARRAY
10067: PUSH
10068: LD_INT 2
10070: ARRAY
10071: PPUSH
10072: CALL_OW 428
10076: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
10077: LD_VAR 0 4
10081: PPUSH
10082: CALL_OW 266
10086: PUSH
10087: LD_INT 4
10089: PUSH
10090: LD_INT 5
10092: PUSH
10093: EMPTY
10094: LIST
10095: LIST
10096: IN
10097: IFFALSE 10177
// begin for j := 1 to Difficulty do
10099: LD_ADDR_VAR 0 3
10103: PUSH
10104: DOUBLE
10105: LD_INT 1
10107: DEC
10108: ST_TO_ADDR
10109: LD_OWVAR 67
10113: PUSH
10114: FOR_TO
10115: IFFALSE 10173
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10117: LD_INT 0
10119: PPUSH
10120: LD_INT 1
10122: PPUSH
10123: LD_INT 4
10125: PUSH
10126: LD_INT 5
10128: PUSH
10129: LD_INT 5
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: LIST
10136: PUSH
10137: LD_OWVAR 67
10141: ARRAY
10142: PPUSH
10143: CALL_OW 380
// un := CreateHuman ;
10147: LD_ADDR_VAR 0 5
10151: PUSH
10152: CALL_OW 44
10156: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10157: LD_VAR 0 5
10161: PPUSH
10162: LD_VAR 0 4
10166: PPUSH
10167: CALL_OW 52
// end ;
10171: GO 10114
10173: POP
10174: POP
// end else
10175: GO 10243
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10177: LD_INT 0
10179: PPUSH
10180: LD_INT 1
10182: PPUSH
10183: LD_INT 4
10185: PUSH
10186: LD_INT 5
10188: PUSH
10189: LD_INT 5
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: LIST
10196: PUSH
10197: LD_OWVAR 67
10201: ARRAY
10202: PPUSH
10203: CALL_OW 380
// un := CreateHuman ;
10207: LD_ADDR_VAR 0 5
10211: PUSH
10212: CALL_OW 44
10216: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10217: LD_VAR 0 5
10221: PPUSH
10222: LD_VAR 0 4
10226: PPUSH
10227: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
10231: LD_VAR 0 5
10235: PPUSH
10236: LD_INT 9
10238: PPUSH
10239: CALL_OW 336
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10243: LD_ADDR_EXP 54
10247: PUSH
10248: LD_EXP 54
10252: PPUSH
10253: LD_EXP 54
10257: PUSH
10258: LD_INT 1
10260: PLUS
10261: PPUSH
10262: LD_VAR 0 5
10266: PPUSH
10267: CALL_OW 1
10271: ST_TO_ADDR
// end ;
10272: GO 10034
10274: POP
10275: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
10276: LD_ADDR_VAR 0 4
10280: PUSH
10281: LD_INT 10
10283: PPUSH
10284: LD_INT 22
10286: PUSH
10287: LD_INT 3
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: LD_INT 30
10296: PUSH
10297: LD_INT 32
10299: PUSH
10300: EMPTY
10301: LIST
10302: LIST
10303: PUSH
10304: LD_INT 58
10306: PUSH
10307: EMPTY
10308: LIST
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: LIST
10314: PPUSH
10315: CALL_OW 70
10319: PUSH
10320: FOR_IN
10321: IFFALSE 10447
// begin if not Prob ( [ 40 , 50 , 75 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
10323: LD_INT 40
10325: PUSH
10326: LD_INT 50
10328: PUSH
10329: LD_INT 75
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: LIST
10336: PUSH
10337: LD_OWVAR 67
10341: ARRAY
10342: PUSH
10343: LD_EXP 7
10347: PUSH
10348: LD_INT 10
10350: MUL
10351: MINUS
10352: PPUSH
10353: CALL_OW 13
10357: NOT
10358: IFFALSE 10362
// continue ;
10360: GO 10320
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10362: LD_INT 0
10364: PPUSH
10365: LD_INT 1
10367: PPUSH
10368: LD_INT 4
10370: PUSH
10371: LD_INT 5
10373: PUSH
10374: LD_INT 5
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: LIST
10381: PUSH
10382: LD_OWVAR 67
10386: ARRAY
10387: PPUSH
10388: CALL_OW 380
// un := CreateHuman ;
10392: LD_ADDR_VAR 0 5
10396: PUSH
10397: CALL_OW 44
10401: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10402: LD_VAR 0 5
10406: PPUSH
10407: LD_VAR 0 4
10411: PPUSH
10412: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10416: LD_ADDR_EXP 54
10420: PUSH
10421: LD_EXP 54
10425: PPUSH
10426: LD_EXP 54
10430: PUSH
10431: LD_INT 1
10433: PLUS
10434: PPUSH
10435: LD_VAR 0 5
10439: PPUSH
10440: CALL_OW 1
10444: ST_TO_ADDR
// end ;
10445: GO 10320
10447: POP
10448: POP
// for i := 1 to 5 do
10449: LD_ADDR_VAR 0 2
10453: PUSH
10454: DOUBLE
10455: LD_INT 1
10457: DEC
10458: ST_TO_ADDR
10459: LD_INT 5
10461: PUSH
10462: FOR_TO
10463: IFFALSE 10557
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10465: LD_INT 0
10467: PPUSH
10468: LD_INT 2
10470: PPUSH
10471: LD_INT 4
10473: PUSH
10474: LD_INT 5
10476: PUSH
10477: LD_INT 5
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: LIST
10484: PUSH
10485: LD_OWVAR 67
10489: ARRAY
10490: PPUSH
10491: CALL_OW 380
// un := CreateHuman ;
10495: LD_ADDR_VAR 0 5
10499: PUSH
10500: CALL_OW 44
10504: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
10505: LD_VAR 0 5
10509: PPUSH
10510: LD_INT 66
10512: PPUSH
10513: LD_INT 101
10515: PPUSH
10516: LD_INT 3
10518: PPUSH
10519: LD_INT 0
10521: PPUSH
10522: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10526: LD_ADDR_EXP 54
10530: PUSH
10531: LD_EXP 54
10535: PPUSH
10536: LD_EXP 54
10540: PUSH
10541: LD_INT 1
10543: PLUS
10544: PPUSH
10545: LD_VAR 0 5
10549: PPUSH
10550: CALL_OW 1
10554: ST_TO_ADDR
// end ;
10555: GO 10462
10557: POP
10558: POP
// tmp := [ ruFac1 , ruFac2 ] ;
10559: LD_ADDR_VAR 0 7
10563: PUSH
10564: LD_INT 72
10566: PUSH
10567: LD_INT 12
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: ST_TO_ADDR
// for i := 1 to tmp do
10574: LD_ADDR_VAR 0 2
10578: PUSH
10579: DOUBLE
10580: LD_INT 1
10582: DEC
10583: ST_TO_ADDR
10584: LD_VAR 0 7
10588: PUSH
10589: FOR_TO
10590: IFFALSE 10703
// for j := 1 to 6 do
10592: LD_ADDR_VAR 0 3
10596: PUSH
10597: DOUBLE
10598: LD_INT 1
10600: DEC
10601: ST_TO_ADDR
10602: LD_INT 6
10604: PUSH
10605: FOR_TO
10606: IFFALSE 10699
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10608: LD_INT 0
10610: PPUSH
10611: LD_INT 3
10613: PPUSH
10614: LD_INT 4
10616: PUSH
10617: LD_INT 5
10619: PUSH
10620: LD_INT 5
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: LIST
10627: PUSH
10628: LD_OWVAR 67
10632: ARRAY
10633: PPUSH
10634: CALL_OW 380
// un := CreateHuman ;
10638: LD_ADDR_VAR 0 5
10642: PUSH
10643: CALL_OW 44
10647: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
10648: LD_VAR 0 5
10652: PPUSH
10653: LD_VAR 0 7
10657: PUSH
10658: LD_VAR 0 2
10662: ARRAY
10663: PPUSH
10664: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10668: LD_ADDR_EXP 54
10672: PUSH
10673: LD_EXP 54
10677: PPUSH
10678: LD_EXP 54
10682: PUSH
10683: LD_INT 1
10685: PLUS
10686: PPUSH
10687: LD_VAR 0 5
10691: PPUSH
10692: CALL_OW 1
10696: ST_TO_ADDR
// end ;
10697: GO 10605
10699: POP
10700: POP
10701: GO 10589
10703: POP
10704: POP
// for i := 1 to 3 do
10705: LD_ADDR_VAR 0 2
10709: PUSH
10710: DOUBLE
10711: LD_INT 1
10713: DEC
10714: ST_TO_ADDR
10715: LD_INT 3
10717: PUSH
10718: FOR_TO
10719: IFFALSE 10804
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10721: LD_INT 0
10723: PPUSH
10724: LD_INT 4
10726: PPUSH
10727: LD_INT 4
10729: PUSH
10730: LD_INT 5
10732: PUSH
10733: LD_INT 5
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: LIST
10740: PUSH
10741: LD_OWVAR 67
10745: ARRAY
10746: PPUSH
10747: CALL_OW 380
// un := CreateHuman ;
10751: LD_ADDR_VAR 0 5
10755: PUSH
10756: CALL_OW 44
10760: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
10761: LD_VAR 0 5
10765: PPUSH
10766: LD_INT 17
10768: PPUSH
10769: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10773: LD_ADDR_EXP 54
10777: PUSH
10778: LD_EXP 54
10782: PPUSH
10783: LD_EXP 54
10787: PUSH
10788: LD_INT 1
10790: PLUS
10791: PPUSH
10792: LD_VAR 0 5
10796: PPUSH
10797: CALL_OW 1
10801: ST_TO_ADDR
// end ;
10802: GO 10718
10804: POP
10805: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
10806: LD_ADDR_VAR 0 2
10810: PUSH
10811: DOUBLE
10812: LD_INT 1
10814: DEC
10815: ST_TO_ADDR
10816: LD_INT 2
10818: PUSH
10819: LD_INT 3
10821: PUSH
10822: LD_INT 3
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: LIST
10829: PUSH
10830: LD_OWVAR 67
10834: ARRAY
10835: PUSH
10836: FOR_TO
10837: IFFALSE 10957
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
10839: LD_INT 22
10841: PPUSH
10842: LD_INT 1
10844: PPUSH
10845: LD_INT 1
10847: PPUSH
10848: LD_INT 52
10850: PPUSH
10851: LD_INT 100
10853: PPUSH
10854: CALL 29495 0 5
// veh := CreateVehicle ;
10858: LD_ADDR_VAR 0 6
10862: PUSH
10863: CALL_OW 45
10867: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
10868: LD_INT 0
10870: PPUSH
10871: LD_INT 3
10873: PPUSH
10874: LD_INT 4
10876: PPUSH
10877: CALL_OW 380
// un := CreateHuman ;
10881: LD_ADDR_VAR 0 5
10885: PUSH
10886: CALL_OW 44
10890: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
10891: LD_VAR 0 6
10895: PPUSH
10896: LD_INT 107
10898: PPUSH
10899: LD_INT 182
10901: PPUSH
10902: LD_INT 4
10904: PPUSH
10905: LD_INT 0
10907: PPUSH
10908: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10912: LD_VAR 0 5
10916: PPUSH
10917: LD_VAR 0 6
10921: PPUSH
10922: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10926: LD_ADDR_EXP 54
10930: PUSH
10931: LD_EXP 54
10935: PPUSH
10936: LD_EXP 54
10940: PUSH
10941: LD_INT 1
10943: PLUS
10944: PPUSH
10945: LD_VAR 0 5
10949: PPUSH
10950: CALL_OW 1
10954: ST_TO_ADDR
// end ;
10955: GO 10836
10957: POP
10958: POP
// InitHc ;
10959: CALL_OW 19
// for i := 1 to [ 6 , 8 , 10 ] [ Difficulty ] do
10963: LD_ADDR_VAR 0 2
10967: PUSH
10968: DOUBLE
10969: LD_INT 1
10971: DEC
10972: ST_TO_ADDR
10973: LD_INT 6
10975: PUSH
10976: LD_INT 8
10978: PUSH
10979: LD_INT 10
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: LIST
10986: PUSH
10987: LD_OWVAR 67
10991: ARRAY
10992: PUSH
10993: FOR_TO
10994: IFFALSE 11066
// begin uc_nation := 0 ;
10996: LD_ADDR_OWVAR 21
11000: PUSH
11001: LD_INT 0
11003: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
11004: LD_ADDR_OWVAR 28
11008: PUSH
11009: LD_INT 15
11011: ST_TO_ADDR
// un := CreateHuman ;
11012: LD_ADDR_VAR 0 5
11016: PUSH
11017: CALL_OW 44
11021: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
11022: LD_VAR 0 5
11026: PPUSH
11027: LD_INT 269
11029: PUSH
11030: LD_INT 300
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: LD_VAR 0 2
11041: PUSH
11042: LD_INT 2
11044: MOD
11045: PUSH
11046: LD_INT 1
11048: PLUS
11049: ARRAY
11050: PPUSH
11051: LD_INT 182
11053: PPUSH
11054: LD_INT 4
11056: PPUSH
11057: LD_INT 0
11059: PPUSH
11060: CALL_OW 50
// end ;
11064: GO 10993
11066: POP
11067: POP
// uc_nation := 3 ;
11068: LD_ADDR_OWVAR 21
11072: PUSH
11073: LD_INT 3
11075: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 ] [ Difficulty ] then
11076: LD_EXP 8
11080: PUSH
11081: LD_INT 10
11083: PUSH
11084: LD_INT 8
11086: PUSH
11087: LD_INT 6
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: LIST
11094: PUSH
11095: LD_OWVAR 67
11099: ARRAY
11100: LESS
11101: IFFALSE 11180
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
11103: LD_INT 21
11105: PPUSH
11106: LD_INT 1
11108: PPUSH
11109: LD_INT 1
11111: PPUSH
11112: LD_INT 51
11114: PPUSH
11115: LD_INT 12
11117: PPUSH
11118: CALL 29495 0 5
// veh := CreateVehicle ;
11122: LD_ADDR_VAR 0 6
11126: PUSH
11127: CALL_OW 45
11131: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
11132: LD_VAR 0 6
11136: PPUSH
11137: LD_INT 269
11139: PPUSH
11140: LD_INT 66
11142: PPUSH
11143: LD_INT 4
11145: PPUSH
11146: LD_INT 0
11148: PPUSH
11149: CALL 63300 0 5
// SetLives ( veh , 333 ) ;
11153: LD_VAR 0 6
11157: PPUSH
11158: LD_INT 333
11160: PPUSH
11161: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
11165: LD_VAR 0 6
11169: PPUSH
11170: LD_INT 2
11172: PPUSH
11173: LD_INT 100
11175: PPUSH
11176: CALL_OW 290
// end ; end ;
11180: LD_VAR 0 1
11184: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
11185: LD_EXP 50
11189: PUSH
11190: LD_EXP 50
11194: PPUSH
11195: CALL_OW 255
11199: PUSH
11200: LD_INT 3
11202: EQUAL
11203: AND
11204: IFFALSE 11367
11206: GO 11208
11208: DISABLE
11209: LD_INT 0
11211: PPUSH
// begin enable ;
11212: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
11213: LD_INT 81
11215: PUSH
11216: LD_INT 3
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PUSH
11223: LD_INT 91
11225: PUSH
11226: LD_EXP 50
11230: PUSH
11231: LD_INT 15
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: LIST
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PPUSH
11243: CALL_OW 69
11247: IFFALSE 11327
// begin if not IsDrivenBy ( ruBlockadeTank ) then
11249: LD_EXP 50
11253: PPUSH
11254: CALL_OW 311
11258: NOT
11259: IFFALSE 11325
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
11261: LD_ADDR_VAR 0 1
11265: PUSH
11266: LD_INT 22
11268: PUSH
11269: LD_INT 3
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: LD_INT 21
11278: PUSH
11279: LD_INT 1
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: PUSH
11286: EMPTY
11287: LIST
11288: LIST
11289: PPUSH
11290: CALL_OW 69
11294: PPUSH
11295: LD_EXP 50
11299: PPUSH
11300: CALL_OW 74
11304: ST_TO_ADDR
// if driver then
11305: LD_VAR 0 1
11309: IFFALSE 11325
// ComEnterUnit ( driver , ruBlockadeTank ) ;
11311: LD_VAR 0 1
11315: PPUSH
11316: LD_EXP 50
11320: PPUSH
11321: CALL_OW 120
// end ; exit ;
11325: GO 11367
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
11327: LD_EXP 50
11331: PPUSH
11332: CALL_OW 256
11336: PUSH
11337: LD_INT 1000
11339: LESS
11340: PUSH
11341: LD_EXP 50
11345: PPUSH
11346: CALL_OW 311
11350: AND
11351: IFFALSE 11367
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
11353: LD_EXP 50
11357: PPUSH
11358: CALL_OW 311
11362: PPUSH
11363: CALL 62860 0 1
// end ;
11367: PPOPN 1
11369: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
11370: LD_EXP 52
11374: PPUSH
11375: LD_INT 3
11377: PUSH
11378: LD_INT 24
11380: PUSH
11381: LD_INT 1000
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PPUSH
11392: CALL_OW 72
11396: PUSH
11397: LD_EXP 52
11401: PPUSH
11402: LD_INT 25
11404: PUSH
11405: LD_INT 4
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: LD_INT 50
11414: PUSH
11415: EMPTY
11416: LIST
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PPUSH
11422: CALL_OW 72
11426: AND
11427: IFFALSE 11615
11429: GO 11431
11431: DISABLE
11432: LD_INT 0
11434: PPUSH
11435: PPUSH
11436: PPUSH
// begin enable ;
11437: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
11438: LD_ADDR_VAR 0 3
11442: PUSH
11443: LD_EXP 52
11447: PPUSH
11448: LD_INT 3
11450: PUSH
11451: LD_INT 24
11453: PUSH
11454: LD_INT 1000
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PPUSH
11465: CALL_OW 72
11469: PPUSH
11470: LD_INT 1
11472: PPUSH
11473: CALL 63100 0 2
11477: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
11478: LD_ADDR_VAR 0 2
11482: PUSH
11483: LD_EXP 52
11487: PPUSH
11488: LD_INT 25
11490: PUSH
11491: LD_INT 4
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: PUSH
11498: LD_INT 50
11500: PUSH
11501: EMPTY
11502: LIST
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: PPUSH
11508: CALL_OW 72
11512: PUSH
11513: LD_INT 1
11515: ARRAY
11516: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
11517: LD_VAR 0 2
11521: PPUSH
11522: LD_VAR 0 3
11526: PUSH
11527: LD_INT 1
11529: ARRAY
11530: PPUSH
11531: CALL 58599 0 2
11535: NOT
11536: IFFALSE 11615
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
11538: LD_VAR 0 3
11542: PUSH
11543: LD_INT 1
11545: ARRAY
11546: PPUSH
11547: LD_INT 9
11549: PPUSH
11550: CALL_OW 308
11554: NOT
11555: IFFALSE 11573
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
11557: LD_VAR 0 3
11561: PUSH
11562: LD_INT 1
11564: ARRAY
11565: PPUSH
11566: LD_INT 9
11568: PPUSH
11569: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
11573: LD_VAR 0 2
11577: PPUSH
11578: LD_VAR 0 3
11582: PUSH
11583: LD_INT 1
11585: ARRAY
11586: PPUSH
11587: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
11591: LD_VAR 0 2
11595: PPUSH
11596: LD_INT 179
11598: PPUSH
11599: LD_INT 113
11601: PPUSH
11602: CALL_OW 171
// AddComHold ( sci ) ;
11606: LD_VAR 0 2
11610: PPUSH
11611: CALL_OW 200
// end ; end ;
11615: PPOPN 3
11617: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
11618: LD_INT 2
11620: PPUSH
11621: LD_INT 52
11623: PPUSH
11624: CALL_OW 292
11628: IFFALSE 11733
11630: GO 11632
11632: DISABLE
11633: LD_INT 0
11635: PPUSH
11636: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
11637: LD_ADDR_VAR 0 2
11641: PUSH
11642: LD_EXP 54
11646: PPUSH
11647: LD_INT 25
11649: PUSH
11650: LD_INT 1
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PUSH
11657: LD_INT 50
11659: PUSH
11660: EMPTY
11661: LIST
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PPUSH
11667: CALL_OW 72
11671: ST_TO_ADDR
// if not tmp then
11672: LD_VAR 0 2
11676: NOT
11677: IFFALSE 11681
// exit ;
11679: GO 11733
// for i in tmp do
11681: LD_ADDR_VAR 0 1
11685: PUSH
11686: LD_VAR 0 2
11690: PUSH
11691: FOR_IN
11692: IFFALSE 11731
// begin if IsInUnit ( i ) then
11694: LD_VAR 0 1
11698: PPUSH
11699: CALL_OW 310
11703: IFFALSE 11714
// ComExitBuilding ( i ) ;
11705: LD_VAR 0 1
11709: PPUSH
11710: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
11714: LD_VAR 0 1
11718: PPUSH
11719: LD_INT 84
11721: PPUSH
11722: LD_INT 133
11724: PPUSH
11725: CALL_OW 174
// end ;
11729: GO 11691
11731: POP
11732: POP
// end ;
11733: PPOPN 2
11735: END
// every 0 0$1 trigger leninSpotted do var i , tmp , weapon ;
11736: LD_EXP 14
11740: IFFALSE 11889
11742: GO 11744
11744: DISABLE
11745: LD_INT 0
11747: PPUSH
11748: PPUSH
11749: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
11750: LD_ADDR_VAR 0 2
11754: PUSH
11755: LD_INT 72
11757: PUSH
11758: LD_INT 12
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket , ru_gun ] , [ ru_rocket , ru_heavy_gun ] ] [ Difficulty ] ;
11765: LD_ADDR_VAR 0 3
11769: PUSH
11770: LD_INT 44
11772: PUSH
11773: LD_INT 43
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: PUSH
11780: LD_INT 47
11782: PUSH
11783: LD_INT 44
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: PUSH
11790: LD_INT 47
11792: PUSH
11793: LD_INT 46
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: LIST
11804: PUSH
11805: LD_OWVAR 67
11809: ARRAY
11810: ST_TO_ADDR
// for i := 1 to 6 do
11811: LD_ADDR_VAR 0 1
11815: PUSH
11816: DOUBLE
11817: LD_INT 1
11819: DEC
11820: ST_TO_ADDR
11821: LD_INT 6
11823: PUSH
11824: FOR_TO
11825: IFFALSE 11887
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
11827: LD_VAR 0 2
11831: PPUSH
11832: LD_INT 22
11834: PUSH
11835: LD_INT 23
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: PUSH
11842: LD_VAR 0 1
11846: PUSH
11847: LD_INT 2
11849: MOD
11850: PUSH
11851: LD_INT 1
11853: PLUS
11854: ARRAY
11855: PPUSH
11856: LD_INT 1
11858: PPUSH
11859: LD_INT 1
11861: PPUSH
11862: LD_VAR 0 3
11866: PUSH
11867: LD_VAR 0 1
11871: PUSH
11872: LD_INT 2
11874: MOD
11875: PUSH
11876: LD_INT 1
11878: PLUS
11879: ARRAY
11880: PPUSH
11881: CALL_OW 185
11885: GO 11824
11887: POP
11888: POP
// end ;
11889: PPOPN 3
11891: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
11892: LD_EXP 11
11896: IFFALSE 13045
11898: GO 11900
11900: DISABLE
11901: LD_INT 0
11903: PPUSH
11904: PPUSH
11905: PPUSH
11906: PPUSH
11907: PPUSH
11908: PPUSH
// begin enable ;
11909: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
11910: LD_ADDR_VAR 0 6
11914: PUSH
11915: LD_INT 10
11917: PPUSH
11918: LD_INT 81
11920: PUSH
11921: LD_INT 3
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PPUSH
11928: CALL_OW 70
11932: ST_TO_ADDR
// if ruSpecialVehicleGroup then
11933: LD_EXP 55
11937: IFFALSE 12203
// begin for i in ruSpecialVehicleGroup do
11939: LD_ADDR_VAR 0 1
11943: PUSH
11944: LD_EXP 55
11948: PUSH
11949: FOR_IN
11950: IFFALSE 12201
// begin if enemyInBase then
11952: LD_VAR 0 6
11956: IFFALSE 12199
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
11958: LD_VAR 0 1
11962: PPUSH
11963: CALL_OW 256
11967: PUSH
11968: LD_INT 500
11970: GREATER
11971: PUSH
11972: LD_VAR 0 1
11976: PPUSH
11977: CALL_OW 110
11981: PUSH
11982: LD_INT 0
11984: EQUAL
11985: AND
11986: IFFALSE 12012
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
11988: LD_VAR 0 1
11992: PPUSH
11993: LD_VAR 0 6
11997: PPUSH
11998: LD_VAR 0 1
12002: PPUSH
12003: CALL_OW 74
12007: PPUSH
12008: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
12012: LD_VAR 0 1
12016: PPUSH
12017: CALL_OW 256
12021: PUSH
12022: LD_INT 500
12024: LESSEQUAL
12025: PUSH
12026: LD_VAR 0 1
12030: PPUSH
12031: CALL_OW 110
12035: PUSH
12036: LD_INT 0
12038: EQUAL
12039: AND
12040: IFFALSE 12069
// begin SetTag ( i , 1 ) ;
12042: LD_VAR 0 1
12046: PPUSH
12047: LD_INT 1
12049: PPUSH
12050: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
12054: LD_VAR 0 1
12058: PPUSH
12059: LD_INT 83
12061: PPUSH
12062: LD_INT 134
12064: PPUSH
12065: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
12069: LD_VAR 0 1
12073: PPUSH
12074: CALL_OW 256
12078: PUSH
12079: LD_INT 1000
12081: LESS
12082: PUSH
12083: LD_VAR 0 1
12087: PPUSH
12088: CALL_OW 110
12092: PUSH
12093: LD_INT 1
12095: EQUAL
12096: AND
12097: PUSH
12098: LD_VAR 0 1
12102: PPUSH
12103: LD_INT 83
12105: PPUSH
12106: LD_INT 134
12108: PPUSH
12109: CALL_OW 297
12113: PUSH
12114: LD_INT 6
12116: LESS
12117: AND
12118: IFFALSE 12146
// begin SetFuel ( i , 100 ) ;
12120: LD_VAR 0 1
12124: PPUSH
12125: LD_INT 100
12127: PPUSH
12128: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
12132: LD_VAR 0 1
12136: PPUSH
12137: CALL_OW 310
12141: PPUSH
12142: CALL 62980 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
12146: LD_VAR 0 1
12150: PPUSH
12151: CALL_OW 256
12155: PUSH
12156: LD_INT 1000
12158: EQUAL
12159: PUSH
12160: LD_VAR 0 1
12164: PPUSH
12165: CALL_OW 110
12169: PUSH
12170: LD_INT 1
12172: EQUAL
12173: AND
12174: PUSH
12175: LD_VAR 0 1
12179: PPUSH
12180: CALL_OW 311
12184: AND
12185: IFFALSE 12199
// SetTag ( i , 0 ) ;
12187: LD_VAR 0 1
12191: PPUSH
12192: LD_INT 0
12194: PPUSH
12195: CALL_OW 109
// end ; end ;
12199: GO 11949
12201: POP
12202: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
12203: LD_ADDR_VAR 0 5
12207: PUSH
12208: LD_EXP 54
12212: PPUSH
12213: LD_INT 25
12215: PUSH
12216: LD_INT 4
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: PPUSH
12223: CALL_OW 72
12227: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12228: LD_ADDR_VAR 0 4
12232: PUSH
12233: LD_EXP 54
12237: PPUSH
12238: LD_INT 92
12240: PUSH
12241: LD_INT 92
12243: PUSH
12244: LD_INT 155
12246: PUSH
12247: LD_INT 12
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: PUSH
12256: LD_INT 3
12258: PUSH
12259: LD_INT 24
12261: PUSH
12262: LD_INT 1000
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PPUSH
12277: CALL_OW 72
12281: ST_TO_ADDR
// if sci then
12282: LD_VAR 0 5
12286: IFFALSE 12419
// begin if hurt then
12288: LD_VAR 0 4
12292: IFFALSE 12365
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
12294: LD_VAR 0 5
12298: PPUSH
12299: LD_INT 3
12301: PUSH
12302: LD_INT 54
12304: PUSH
12305: EMPTY
12306: LIST
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: PPUSH
12312: CALL_OW 72
12316: IFFALSE 12345
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
12318: LD_VAR 0 5
12322: PPUSH
12323: LD_INT 3
12325: PUSH
12326: LD_INT 54
12328: PUSH
12329: EMPTY
12330: LIST
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PPUSH
12336: CALL_OW 72
12340: PPUSH
12341: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
12345: LD_VAR 0 5
12349: PPUSH
12350: LD_VAR 0 4
12354: PUSH
12355: LD_INT 1
12357: ARRAY
12358: PPUSH
12359: CALL_OW 188
// end else
12363: GO 12419
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
12365: LD_VAR 0 5
12369: PPUSH
12370: LD_INT 3
12372: PUSH
12373: LD_INT 54
12375: PUSH
12376: EMPTY
12377: LIST
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PPUSH
12383: CALL_OW 72
12387: IFFALSE 12419
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
12389: LD_VAR 0 5
12393: PPUSH
12394: LD_INT 3
12396: PUSH
12397: LD_INT 54
12399: PUSH
12400: EMPTY
12401: LIST
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PPUSH
12407: CALL_OW 72
12411: PPUSH
12412: LD_INT 17
12414: PPUSH
12415: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12419: LD_ADDR_VAR 0 3
12423: PUSH
12424: LD_INT 10
12426: PPUSH
12427: LD_INT 21
12429: PUSH
12430: LD_INT 3
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PUSH
12437: LD_INT 3
12439: PUSH
12440: LD_INT 24
12442: PUSH
12443: LD_INT 1000
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: PPUSH
12458: CALL_OW 70
12462: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
12463: LD_ADDR_VAR 0 2
12467: PUSH
12468: LD_EXP 54
12472: PPUSH
12473: LD_INT 25
12475: PUSH
12476: LD_INT 2
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: PPUSH
12483: CALL_OW 72
12487: PUSH
12488: LD_INT 22
12490: PUSH
12491: LD_INT 3
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: PUSH
12498: LD_INT 34
12500: PUSH
12501: LD_INT 52
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PPUSH
12512: CALL_OW 69
12516: UNION
12517: ST_TO_ADDR
// if not tmp then
12518: LD_VAR 0 2
12522: NOT
12523: IFFALSE 12527
// exit ;
12525: GO 13045
// for i in tmp do
12527: LD_ADDR_VAR 0 1
12531: PUSH
12532: LD_VAR 0 2
12536: PUSH
12537: FOR_IN
12538: IFFALSE 13043
// begin if GetClass ( i ) = 2 then
12540: LD_VAR 0 1
12544: PPUSH
12545: CALL_OW 257
12549: PUSH
12550: LD_INT 2
12552: EQUAL
12553: IFFALSE 12776
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
12555: LD_VAR 0 1
12559: PPUSH
12560: CALL_OW 256
12564: PUSH
12565: LD_INT 1000
12567: EQUAL
12568: PUSH
12569: LD_VAR 0 1
12573: PPUSH
12574: CALL_OW 110
12578: PUSH
12579: LD_INT 1
12581: EQUAL
12582: AND
12583: IFFALSE 12597
// SetTag ( i , 0 ) ;
12585: LD_VAR 0 1
12589: PPUSH
12590: LD_INT 0
12592: PPUSH
12593: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
12597: LD_VAR 0 1
12601: PPUSH
12602: CALL_OW 256
12606: PUSH
12607: LD_INT 500
12609: LESSEQUAL
12610: PUSH
12611: LD_VAR 0 1
12615: PPUSH
12616: CALL_OW 110
12620: PUSH
12621: LD_INT 0
12623: EQUAL
12624: AND
12625: IFFALSE 12654
// begin SetTag ( i , 1 ) ;
12627: LD_VAR 0 1
12631: PPUSH
12632: LD_INT 1
12634: PPUSH
12635: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
12639: LD_VAR 0 1
12643: PPUSH
12644: LD_INT 92
12646: PPUSH
12647: LD_INT 155
12649: PPUSH
12650: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
12654: LD_VAR 0 3
12658: PUSH
12659: LD_VAR 0 1
12663: PPUSH
12664: CALL_OW 256
12668: PUSH
12669: LD_INT 500
12671: GREATER
12672: AND
12673: PUSH
12674: LD_VAR 0 1
12678: PPUSH
12679: CALL_OW 110
12683: PUSH
12684: LD_INT 0
12686: EQUAL
12687: AND
12688: PUSH
12689: LD_VAR 0 1
12693: PPUSH
12694: CALL_OW 314
12698: NOT
12699: AND
12700: IFFALSE 12774
// begin if b then
12702: LD_VAR 0 3
12706: IFFALSE 12738
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
12708: LD_VAR 0 1
12712: PPUSH
12713: LD_VAR 0 3
12717: PUSH
12718: LD_INT 1
12720: PPUSH
12721: LD_VAR 0 3
12725: PPUSH
12726: CALL_OW 12
12730: ARRAY
12731: PPUSH
12732: CALL_OW 130
12736: GO 12774
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
12738: LD_VAR 0 1
12742: PPUSH
12743: LD_INT 94
12745: PPUSH
12746: LD_INT 165
12748: PPUSH
12749: CALL_OW 297
12753: PUSH
12754: LD_INT 8
12756: GREATER
12757: IFFALSE 12774
// ComMoveXY ( i , 94 , 165 ) ;
12759: LD_VAR 0 1
12763: PPUSH
12764: LD_INT 94
12766: PPUSH
12767: LD_INT 165
12769: PPUSH
12770: CALL_OW 111
// end ; end else
12774: GO 13041
// if GetWeapon ( i ) = ru_crane then
12776: LD_VAR 0 1
12780: PPUSH
12781: CALL_OW 264
12785: PUSH
12786: LD_INT 52
12788: EQUAL
12789: IFFALSE 13041
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
12791: LD_VAR 0 1
12795: PPUSH
12796: CALL_OW 256
12800: PUSH
12801: LD_INT 1000
12803: EQUAL
12804: PUSH
12805: LD_VAR 0 1
12809: PPUSH
12810: CALL_OW 110
12814: PUSH
12815: LD_INT 1
12817: EQUAL
12818: AND
12819: IFFALSE 12845
// begin SetTag ( i , 0 ) ;
12821: LD_VAR 0 1
12825: PPUSH
12826: LD_INT 0
12828: PPUSH
12829: CALL_OW 109
// SetFuel ( i , 100 ) ;
12833: LD_VAR 0 1
12837: PPUSH
12838: LD_INT 100
12840: PPUSH
12841: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
12845: LD_VAR 0 1
12849: PPUSH
12850: CALL_OW 256
12854: PUSH
12855: LD_INT 500
12857: LESSEQUAL
12858: PUSH
12859: LD_VAR 0 1
12863: PPUSH
12864: CALL_OW 110
12868: PUSH
12869: LD_INT 0
12871: EQUAL
12872: AND
12873: IFFALSE 12916
// begin SetTag ( i , 1 ) ;
12875: LD_VAR 0 1
12879: PPUSH
12880: LD_INT 1
12882: PPUSH
12883: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
12887: LD_VAR 0 1
12891: PPUSH
12892: LD_INT 83
12894: PPUSH
12895: LD_INT 135
12897: PPUSH
12898: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
12902: LD_VAR 0 1
12906: PPUSH
12907: CALL_OW 310
12911: PPUSH
12912: CALL 62980 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
12916: LD_VAR 0 1
12920: PPUSH
12921: CALL_OW 256
12925: PUSH
12926: LD_INT 500
12928: GREATER
12929: PUSH
12930: LD_VAR 0 1
12934: PPUSH
12935: CALL_OW 110
12939: PUSH
12940: LD_INT 0
12942: EQUAL
12943: AND
12944: PUSH
12945: LD_VAR 0 1
12949: PPUSH
12950: CALL_OW 311
12954: AND
12955: PUSH
12956: LD_VAR 0 1
12960: PPUSH
12961: CALL_OW 314
12965: NOT
12966: AND
12967: IFFALSE 13041
// begin if b then
12969: LD_VAR 0 3
12973: IFFALSE 13005
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
12975: LD_VAR 0 1
12979: PPUSH
12980: LD_VAR 0 3
12984: PUSH
12985: LD_INT 1
12987: PPUSH
12988: LD_VAR 0 3
12992: PPUSH
12993: CALL_OW 12
12997: ARRAY
12998: PPUSH
12999: CALL_OW 130
13003: GO 13041
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
13005: LD_VAR 0 1
13009: PPUSH
13010: LD_INT 94
13012: PPUSH
13013: LD_INT 165
13015: PPUSH
13016: CALL_OW 297
13020: PUSH
13021: LD_INT 8
13023: GREATER
13024: IFFALSE 13041
// ComMoveXY ( i , 94 , 165 ) ;
13026: LD_VAR 0 1
13030: PPUSH
13031: LD_INT 94
13033: PPUSH
13034: LD_INT 165
13036: PPUSH
13037: CALL_OW 111
// end ; end ; end ;
13041: GO 12537
13043: POP
13044: POP
// end ;
13045: PPOPN 6
13047: END
// every 7 7$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp ;
13048: LD_EXP 23
13052: NOT
13053: PUSH
13054: LD_EXP 27
13058: NOT
13059: AND
13060: IFFALSE 13960
13062: GO 13064
13064: DISABLE
13065: LD_INT 0
13067: PPUSH
13068: PPUSH
13069: PPUSH
13070: PPUSH
// begin enable ;
13071: ENABLE
// if Prob ( [ 35 , 45 , 55 ] [ Difficulty ] ) then
13072: LD_INT 35
13074: PUSH
13075: LD_INT 45
13077: PUSH
13078: LD_INT 55
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: LIST
13085: PUSH
13086: LD_OWVAR 67
13090: ARRAY
13091: PPUSH
13092: CALL_OW 13
13096: IFFALSE 13112
// waveStrength := waveStrength + 1 ;
13098: LD_ADDR_EXP 57
13102: PUSH
13103: LD_EXP 57
13107: PUSH
13108: LD_INT 1
13110: PLUS
13111: ST_TO_ADDR
// if waveStrength > [ 4 , 5 , 6 ] [ Difficulty ] then
13112: LD_EXP 57
13116: PUSH
13117: LD_INT 4
13119: PUSH
13120: LD_INT 5
13122: PUSH
13123: LD_INT 6
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: LIST
13130: PUSH
13131: LD_OWVAR 67
13135: ARRAY
13136: GREATER
13137: IFFALSE 13170
// begin waveStrength := waveStrength + Difficulty ;
13139: LD_ADDR_EXP 57
13143: PUSH
13144: LD_EXP 57
13148: PUSH
13149: LD_OWVAR 67
13153: PLUS
13154: ST_TO_ADDR
// disableAttackOnHeike := true ;
13155: LD_ADDR_EXP 27
13159: PUSH
13160: LD_INT 1
13162: ST_TO_ADDR
// wait ( 3 3$00 ) ;
13163: LD_INT 6300
13165: PPUSH
13166: CALL_OW 67
// end ; if disableAttackOnHeike and Difficulty > 1 then
13170: LD_EXP 27
13174: PUSH
13175: LD_OWVAR 67
13179: PUSH
13180: LD_INT 1
13182: GREATER
13183: AND
13184: IFFALSE 13389
// begin for i := 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
13186: LD_ADDR_VAR 0 1
13190: PUSH
13191: DOUBLE
13192: LD_INT 1
13194: DEC
13195: ST_TO_ADDR
13196: LD_INT 3
13198: PUSH
13199: LD_INT 3
13201: PUSH
13202: LD_INT 4
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: LIST
13209: PUSH
13210: LD_OWVAR 67
13214: ARRAY
13215: PUSH
13216: FOR_TO
13217: IFFALSE 13387
// begin InitHc ;
13219: CALL_OW 19
// InitVc ;
13223: CALL_OW 20
// uc_side := 3 ;
13227: LD_ADDR_OWVAR 20
13231: PUSH
13232: LD_INT 3
13234: ST_TO_ADDR
// uc_nation := 3 ;
13235: LD_ADDR_OWVAR 21
13239: PUSH
13240: LD_INT 3
13242: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
13243: LD_INT 0
13245: PPUSH
13246: LD_INT 1
13248: PPUSH
13249: LD_OWVAR 67
13253: PUSH
13254: LD_INT 2
13256: PLUS
13257: PPUSH
13258: CALL_OW 380
// un := CreateHuman ;
13262: LD_ADDR_VAR 0 2
13266: PUSH
13267: CALL_OW 44
13271: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
13272: LD_VAR 0 2
13276: PPUSH
13277: LD_INT 160
13279: PPUSH
13280: LD_INT 3
13282: PPUSH
13283: LD_INT 2
13285: PPUSH
13286: LD_INT 0
13288: PPUSH
13289: CALL 63300 0 5
// SetClass ( un , class_bazooker ) ;
13293: LD_VAR 0 2
13297: PPUSH
13298: LD_INT 9
13300: PPUSH
13301: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
13305: LD_ADDR_EXP 56
13309: PUSH
13310: LD_EXP 56
13314: PPUSH
13315: LD_EXP 56
13319: PUSH
13320: LD_INT 1
13322: PLUS
13323: PPUSH
13324: LD_VAR 0 2
13328: PPUSH
13329: CALL_OW 1
13333: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
13334: LD_VAR 0 2
13338: PPUSH
13339: LD_INT 177
13341: PPUSH
13342: LD_INT 17
13344: PPUSH
13345: CALL_OW 111
// wait ( 0 0$2 ) ;
13349: LD_INT 70
13351: PPUSH
13352: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
13356: LD_ADDR_VAR 0 4
13360: PUSH
13361: LD_VAR 0 4
13365: PPUSH
13366: LD_VAR 0 4
13370: PUSH
13371: LD_INT 1
13373: PLUS
13374: PPUSH
13375: LD_VAR 0 2
13379: PPUSH
13380: CALL_OW 1
13384: ST_TO_ADDR
// end ;
13385: GO 13216
13387: POP
13388: POP
// end ; for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] + waveStrength do
13389: LD_ADDR_VAR 0 1
13393: PUSH
13394: DOUBLE
13395: LD_INT 1
13397: DEC
13398: ST_TO_ADDR
13399: LD_INT 2
13401: PUSH
13402: LD_INT 3
13404: PUSH
13405: LD_INT 4
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: LIST
13412: PUSH
13413: LD_OWVAR 67
13417: ARRAY
13418: PUSH
13419: LD_EXP 57
13423: PLUS
13424: PUSH
13425: FOR_TO
13426: IFFALSE 13735
// begin InitHc ;
13428: CALL_OW 19
// InitVc ;
13432: CALL_OW 20
// uc_side := 3 ;
13436: LD_ADDR_OWVAR 20
13440: PUSH
13441: LD_INT 3
13443: ST_TO_ADDR
// uc_nation := 3 ;
13444: LD_ADDR_OWVAR 21
13448: PUSH
13449: LD_INT 3
13451: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
13452: LD_INT 22
13454: PUSH
13455: LD_INT 23
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PUSH
13462: LD_INT 1
13464: PPUSH
13465: LD_INT 2
13467: PPUSH
13468: CALL_OW 12
13472: ARRAY
13473: PPUSH
13474: LD_INT 1
13476: PPUSH
13477: LD_INT 1
13479: PPUSH
13480: LD_INT 44
13482: PUSH
13483: LD_INT 45
13485: PUSH
13486: LD_INT 43
13488: PUSH
13489: LD_INT 42
13491: PUSH
13492: LD_INT 44
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: PUSH
13502: LD_INT 1
13504: PPUSH
13505: LD_INT 5
13507: PPUSH
13508: CALL_OW 12
13512: ARRAY
13513: PPUSH
13514: LD_INT 99
13516: PPUSH
13517: CALL 29495 0 5
// veh := CreateVehicle ;
13521: LD_ADDR_VAR 0 3
13525: PUSH
13526: CALL_OW 45
13530: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
13531: LD_VAR 0 3
13535: PPUSH
13536: LD_INT 160
13538: PPUSH
13539: LD_INT 3
13541: PPUSH
13542: LD_INT 2
13544: PPUSH
13545: LD_INT 0
13547: PPUSH
13548: CALL 63300 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
13552: LD_ADDR_EXP 56
13556: PUSH
13557: LD_EXP 56
13561: PPUSH
13562: LD_EXP 56
13566: PUSH
13567: LD_INT 1
13569: PLUS
13570: PPUSH
13571: LD_VAR 0 3
13575: PPUSH
13576: CALL_OW 1
13580: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
13581: LD_INT 0
13583: PPUSH
13584: LD_INT 3
13586: PPUSH
13587: LD_OWVAR 67
13591: PUSH
13592: LD_INT 2
13594: PLUS
13595: PPUSH
13596: CALL_OW 380
// un := CreateHuman ;
13600: LD_ADDR_VAR 0 2
13604: PUSH
13605: CALL_OW 44
13609: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13610: LD_VAR 0 2
13614: PPUSH
13615: LD_VAR 0 3
13619: PPUSH
13620: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
13624: LD_ADDR_EXP 56
13628: PUSH
13629: LD_EXP 56
13633: PPUSH
13634: LD_EXP 56
13638: PUSH
13639: LD_INT 1
13641: PLUS
13642: PPUSH
13643: LD_VAR 0 2
13647: PPUSH
13648: CALL_OW 1
13652: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
13653: LD_VAR 0 2
13657: PPUSH
13658: LD_INT 177
13660: PPUSH
13661: LD_INT 17
13663: PPUSH
13664: CALL_OW 111
// wait ( 0 0$2 ) ;
13668: LD_INT 70
13670: PPUSH
13671: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
13675: LD_ADDR_VAR 0 4
13679: PUSH
13680: LD_VAR 0 4
13684: PPUSH
13685: LD_VAR 0 4
13689: PUSH
13690: LD_INT 1
13692: PLUS
13693: PPUSH
13694: LD_VAR 0 3
13698: PPUSH
13699: CALL_OW 1
13703: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
13704: LD_ADDR_VAR 0 4
13708: PUSH
13709: LD_VAR 0 4
13713: PPUSH
13714: LD_VAR 0 4
13718: PUSH
13719: LD_INT 1
13721: PLUS
13722: PPUSH
13723: LD_VAR 0 2
13727: PPUSH
13728: CALL_OW 1
13732: ST_TO_ADDR
// end ;
13733: GO 13425
13735: POP
13736: POP
// for i in tmp do
13737: LD_ADDR_VAR 0 1
13741: PUSH
13742: LD_VAR 0 4
13746: PUSH
13747: FOR_IN
13748: IFFALSE 13838
// begin if Prob ( 50 ) then
13750: LD_INT 50
13752: PPUSH
13753: CALL_OW 13
13757: IFFALSE 13776
// ComAgressiveMove ( i , 206 , 73 ) else
13759: LD_VAR 0 1
13763: PPUSH
13764: LD_INT 206
13766: PPUSH
13767: LD_INT 73
13769: PPUSH
13770: CALL_OW 114
13774: GO 13836
// begin ComAgressiveMove ( i , 206 , 73 ) ;
13776: LD_VAR 0 1
13780: PPUSH
13781: LD_INT 206
13783: PPUSH
13784: LD_INT 73
13786: PPUSH
13787: CALL_OW 114
// AddComAgressiveMove ( i , 257 , 105 ) ;
13791: LD_VAR 0 1
13795: PPUSH
13796: LD_INT 257
13798: PPUSH
13799: LD_INT 105
13801: PPUSH
13802: CALL_OW 174
// AddComAgressiveMove ( i , 227 , 97 ) ;
13806: LD_VAR 0 1
13810: PPUSH
13811: LD_INT 227
13813: PPUSH
13814: LD_INT 97
13816: PPUSH
13817: CALL_OW 174
// AddComAgressiveMove ( i , 206 , 73 ) ;
13821: LD_VAR 0 1
13825: PPUSH
13826: LD_INT 206
13828: PPUSH
13829: LD_INT 73
13831: PPUSH
13832: CALL_OW 174
// end ; end ;
13836: GO 13747
13838: POP
13839: POP
// repeat wait ( 0 0$1 ) ;
13840: LD_INT 35
13842: PPUSH
13843: CALL_OW 67
// for i in tmp do
13847: LD_ADDR_VAR 0 1
13851: PUSH
13852: LD_VAR 0 4
13856: PUSH
13857: FOR_IN
13858: IFFALSE 13937
// if IsDead ( i ) then
13860: LD_VAR 0 1
13864: PPUSH
13865: CALL_OW 301
13869: IFFALSE 13889
// tmp := tmp diff i else
13871: LD_ADDR_VAR 0 4
13875: PUSH
13876: LD_VAR 0 4
13880: PUSH
13881: LD_VAR 0 1
13885: DIFF
13886: ST_TO_ADDR
13887: GO 13935
// if not HasTask ( i ) then
13889: LD_VAR 0 1
13893: PPUSH
13894: CALL_OW 314
13898: NOT
13899: IFFALSE 13935
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
13901: LD_VAR 0 1
13905: PPUSH
13906: LD_INT 81
13908: PUSH
13909: LD_INT 3
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PPUSH
13916: CALL_OW 69
13920: PPUSH
13921: LD_VAR 0 1
13925: PPUSH
13926: CALL_OW 74
13930: PPUSH
13931: CALL_OW 115
13935: GO 13857
13937: POP
13938: POP
// until not tmp ;
13939: LD_VAR 0 4
13943: NOT
13944: IFFALSE 13840
// if firstAttack then
13946: LD_EXP 28
13950: IFFALSE 13960
// firstAttack := false ;
13952: LD_ADDR_EXP 28
13956: PUSH
13957: LD_INT 0
13959: ST_TO_ADDR
// end ;
13960: PPOPN 4
13962: END
// every 8 8$00 trigger not omarAttack and bergkampfArrived and not rolfHasVehicles do var i , un , veh , tmp ;
13963: LD_EXP 23
13967: NOT
13968: PUSH
13969: LD_EXP 3
13973: AND
13974: PUSH
13975: LD_EXP 16
13979: NOT
13980: AND
13981: IFFALSE 14813
13983: GO 13985
13985: DISABLE
13986: LD_INT 0
13988: PPUSH
13989: PPUSH
13990: PPUSH
13991: PPUSH
// begin enable ;
13992: ENABLE
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
13993: LD_ADDR_VAR 0 1
13997: PUSH
13998: DOUBLE
13999: LD_INT 1
14001: DEC
14002: ST_TO_ADDR
14003: LD_INT 1
14005: PUSH
14006: LD_INT 2
14008: PUSH
14009: LD_INT 2
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: LIST
14016: PUSH
14017: LD_OWVAR 67
14021: ARRAY
14022: PUSH
14023: FOR_TO
14024: IFFALSE 14325
// begin InitHc ;
14026: CALL_OW 19
// InitVc ;
14030: CALL_OW 20
// uc_side := 3 ;
14034: LD_ADDR_OWVAR 20
14038: PUSH
14039: LD_INT 3
14041: ST_TO_ADDR
// uc_nation := 3 ;
14042: LD_ADDR_OWVAR 21
14046: PUSH
14047: LD_INT 3
14049: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
14050: LD_INT 22
14052: PUSH
14053: LD_INT 23
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PUSH
14060: LD_INT 1
14062: PPUSH
14063: LD_INT 2
14065: PPUSH
14066: CALL_OW 12
14070: ARRAY
14071: PPUSH
14072: LD_INT 1
14074: PPUSH
14075: LD_INT 1
14077: PPUSH
14078: LD_INT 44
14080: PUSH
14081: LD_INT 43
14083: PUSH
14084: LD_INT 42
14086: PUSH
14087: LD_INT 44
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: PUSH
14096: LD_INT 1
14098: PPUSH
14099: LD_INT 4
14101: PPUSH
14102: CALL_OW 12
14106: ARRAY
14107: PPUSH
14108: LD_INT 99
14110: PPUSH
14111: CALL 29495 0 5
// veh := CreateVehicle ;
14115: LD_ADDR_VAR 0 3
14119: PUSH
14120: CALL_OW 45
14124: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
14125: LD_VAR 0 3
14129: PPUSH
14130: LD_INT 5
14132: PPUSH
14133: LD_INT 3
14135: PPUSH
14136: LD_INT 2
14138: PPUSH
14139: LD_INT 0
14141: PPUSH
14142: CALL 63300 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14146: LD_ADDR_EXP 56
14150: PUSH
14151: LD_EXP 56
14155: PPUSH
14156: LD_EXP 56
14160: PUSH
14161: LD_INT 1
14163: PLUS
14164: PPUSH
14165: LD_VAR 0 3
14169: PPUSH
14170: CALL_OW 1
14174: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
14175: LD_INT 0
14177: PPUSH
14178: LD_INT 3
14180: PPUSH
14181: LD_OWVAR 67
14185: PPUSH
14186: CALL_OW 380
// un := CreateHuman ;
14190: LD_ADDR_VAR 0 2
14194: PUSH
14195: CALL_OW 44
14199: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14200: LD_VAR 0 2
14204: PPUSH
14205: LD_VAR 0 3
14209: PPUSH
14210: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14214: LD_ADDR_EXP 56
14218: PUSH
14219: LD_EXP 56
14223: PPUSH
14224: LD_EXP 56
14228: PUSH
14229: LD_INT 1
14231: PLUS
14232: PPUSH
14233: LD_VAR 0 2
14237: PPUSH
14238: CALL_OW 1
14242: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
14243: LD_VAR 0 2
14247: PPUSH
14248: LD_INT 23
14250: PPUSH
14251: LD_INT 7
14253: PPUSH
14254: CALL_OW 111
// wait ( 0 0$2 ) ;
14258: LD_INT 70
14260: PPUSH
14261: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14265: LD_ADDR_VAR 0 4
14269: PUSH
14270: LD_VAR 0 4
14274: PPUSH
14275: LD_VAR 0 4
14279: PUSH
14280: LD_INT 1
14282: PLUS
14283: PPUSH
14284: LD_VAR 0 3
14288: PPUSH
14289: CALL_OW 1
14293: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14294: LD_ADDR_VAR 0 4
14298: PUSH
14299: LD_VAR 0 4
14303: PPUSH
14304: LD_VAR 0 4
14308: PUSH
14309: LD_INT 1
14311: PLUS
14312: PPUSH
14313: LD_VAR 0 2
14317: PPUSH
14318: CALL_OW 1
14322: ST_TO_ADDR
// end ;
14323: GO 14023
14325: POP
14326: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + waveStrength do
14327: LD_ADDR_VAR 0 1
14331: PUSH
14332: DOUBLE
14333: LD_INT 1
14335: DEC
14336: ST_TO_ADDR
14337: LD_INT 2
14339: PUSH
14340: LD_INT 3
14342: PUSH
14343: LD_INT 3
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: LIST
14350: PUSH
14351: LD_OWVAR 67
14355: ARRAY
14356: PUSH
14357: LD_EXP 57
14361: PLUS
14362: PUSH
14363: FOR_TO
14364: IFFALSE 14673
// begin InitHc ;
14366: CALL_OW 19
// InitVc ;
14370: CALL_OW 20
// uc_side := 3 ;
14374: LD_ADDR_OWVAR 20
14378: PUSH
14379: LD_INT 3
14381: ST_TO_ADDR
// uc_nation := 3 ;
14382: LD_ADDR_OWVAR 21
14386: PUSH
14387: LD_INT 3
14389: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
14390: LD_INT 22
14392: PUSH
14393: LD_INT 23
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PUSH
14400: LD_INT 1
14402: PPUSH
14403: LD_INT 2
14405: PPUSH
14406: CALL_OW 12
14410: ARRAY
14411: PPUSH
14412: LD_INT 1
14414: PPUSH
14415: LD_INT 1
14417: PPUSH
14418: LD_INT 44
14420: PUSH
14421: LD_INT 45
14423: PUSH
14424: LD_INT 43
14426: PUSH
14427: LD_INT 42
14429: PUSH
14430: LD_INT 44
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: PUSH
14440: LD_INT 1
14442: PPUSH
14443: LD_INT 5
14445: PPUSH
14446: CALL_OW 12
14450: ARRAY
14451: PPUSH
14452: LD_INT 99
14454: PPUSH
14455: CALL 29495 0 5
// veh := CreateVehicle ;
14459: LD_ADDR_VAR 0 3
14463: PUSH
14464: CALL_OW 45
14468: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
14469: LD_VAR 0 3
14473: PPUSH
14474: LD_INT 127
14476: PPUSH
14477: LD_INT 243
14479: PPUSH
14480: LD_INT 0
14482: PPUSH
14483: LD_INT 0
14485: PPUSH
14486: CALL 63300 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14490: LD_ADDR_EXP 56
14494: PUSH
14495: LD_EXP 56
14499: PPUSH
14500: LD_EXP 56
14504: PUSH
14505: LD_INT 1
14507: PLUS
14508: PPUSH
14509: LD_VAR 0 3
14513: PPUSH
14514: CALL_OW 1
14518: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
14519: LD_INT 0
14521: PPUSH
14522: LD_INT 3
14524: PPUSH
14525: LD_OWVAR 67
14529: PUSH
14530: LD_INT 2
14532: PLUS
14533: PPUSH
14534: CALL_OW 380
// un := CreateHuman ;
14538: LD_ADDR_VAR 0 2
14542: PUSH
14543: CALL_OW 44
14547: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14548: LD_VAR 0 2
14552: PPUSH
14553: LD_VAR 0 3
14557: PPUSH
14558: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14562: LD_ADDR_EXP 56
14566: PUSH
14567: LD_EXP 56
14571: PPUSH
14572: LD_EXP 56
14576: PUSH
14577: LD_INT 1
14579: PLUS
14580: PPUSH
14581: LD_VAR 0 2
14585: PPUSH
14586: CALL_OW 1
14590: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
14591: LD_VAR 0 2
14595: PPUSH
14596: LD_INT 130
14598: PPUSH
14599: LD_INT 233
14601: PPUSH
14602: CALL_OW 111
// wait ( 0 0$2 ) ;
14606: LD_INT 70
14608: PPUSH
14609: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14613: LD_ADDR_VAR 0 4
14617: PUSH
14618: LD_VAR 0 4
14622: PPUSH
14623: LD_VAR 0 4
14627: PUSH
14628: LD_INT 1
14630: PLUS
14631: PPUSH
14632: LD_VAR 0 3
14636: PPUSH
14637: CALL_OW 1
14641: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14642: LD_ADDR_VAR 0 4
14646: PUSH
14647: LD_VAR 0 4
14651: PPUSH
14652: LD_VAR 0 4
14656: PUSH
14657: LD_INT 1
14659: PLUS
14660: PPUSH
14661: LD_VAR 0 2
14665: PPUSH
14666: CALL_OW 1
14670: ST_TO_ADDR
// end ;
14671: GO 14363
14673: POP
14674: POP
// for i in tmp do
14675: LD_ADDR_VAR 0 1
14679: PUSH
14680: LD_VAR 0 4
14684: PUSH
14685: FOR_IN
14686: IFFALSE 14705
// begin ComAgressiveMove ( i , 76 , 49 ) ;
14688: LD_VAR 0 1
14692: PPUSH
14693: LD_INT 76
14695: PPUSH
14696: LD_INT 49
14698: PPUSH
14699: CALL_OW 114
// end ;
14703: GO 14685
14705: POP
14706: POP
// repeat wait ( 0 0$1 ) ;
14707: LD_INT 35
14709: PPUSH
14710: CALL_OW 67
// for i in tmp do
14714: LD_ADDR_VAR 0 1
14718: PUSH
14719: LD_VAR 0 4
14723: PUSH
14724: FOR_IN
14725: IFFALSE 14804
// if IsDead ( i ) then
14727: LD_VAR 0 1
14731: PPUSH
14732: CALL_OW 301
14736: IFFALSE 14756
// tmp := tmp diff i else
14738: LD_ADDR_VAR 0 4
14742: PUSH
14743: LD_VAR 0 4
14747: PUSH
14748: LD_VAR 0 1
14752: DIFF
14753: ST_TO_ADDR
14754: GO 14802
// if not HasTask ( i ) then
14756: LD_VAR 0 1
14760: PPUSH
14761: CALL_OW 314
14765: NOT
14766: IFFALSE 14802
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
14768: LD_VAR 0 1
14772: PPUSH
14773: LD_INT 81
14775: PUSH
14776: LD_INT 3
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PPUSH
14783: CALL_OW 69
14787: PPUSH
14788: LD_VAR 0 1
14792: PPUSH
14793: CALL_OW 74
14797: PPUSH
14798: CALL_OW 115
14802: GO 14724
14804: POP
14805: POP
// until not tmp ;
14806: LD_VAR 0 4
14810: NOT
14811: IFFALSE 14707
// end ;
14813: PPOPN 4
14815: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
14816: LD_EXP 6
14820: IFFALSE 15291
14822: GO 14824
14824: DISABLE
14825: LD_INT 0
14827: PPUSH
14828: PPUSH
14829: PPUSH
14830: PPUSH
// begin wait ( 3 3$00 ) ;
14831: LD_INT 6300
14833: PPUSH
14834: CALL_OW 67
// for i := 1 to 3 do
14838: LD_ADDR_VAR 0 1
14842: PUSH
14843: DOUBLE
14844: LD_INT 1
14846: DEC
14847: ST_TO_ADDR
14848: LD_INT 3
14850: PUSH
14851: FOR_TO
14852: IFFALSE 15151
// begin InitHc ;
14854: CALL_OW 19
// InitVc ;
14858: CALL_OW 20
// uc_side := 3 ;
14862: LD_ADDR_OWVAR 20
14866: PUSH
14867: LD_INT 3
14869: ST_TO_ADDR
// uc_nation := 3 ;
14870: LD_ADDR_OWVAR 21
14874: PUSH
14875: LD_INT 3
14877: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
14878: LD_INT 22
14880: PUSH
14881: LD_INT 23
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: LD_INT 1
14890: PPUSH
14891: LD_INT 2
14893: PPUSH
14894: CALL_OW 12
14898: ARRAY
14899: PPUSH
14900: LD_INT 1
14902: PPUSH
14903: LD_INT 1
14905: PPUSH
14906: LD_INT 44
14908: PUSH
14909: LD_INT 43
14911: PUSH
14912: LD_INT 42
14914: PUSH
14915: LD_INT 44
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: PUSH
14924: LD_INT 1
14926: PPUSH
14927: LD_INT 4
14929: PPUSH
14930: CALL_OW 12
14934: ARRAY
14935: PPUSH
14936: LD_INT 99
14938: PPUSH
14939: CALL 29495 0 5
// veh := CreateVehicle ;
14943: LD_ADDR_VAR 0 3
14947: PUSH
14948: CALL_OW 45
14952: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
14953: LD_VAR 0 3
14957: PPUSH
14958: LD_INT 293
14960: PPUSH
14961: LD_INT 246
14963: PPUSH
14964: LD_INT 5
14966: PPUSH
14967: LD_INT 0
14969: PPUSH
14970: CALL 63300 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14974: LD_ADDR_EXP 56
14978: PUSH
14979: LD_EXP 56
14983: PPUSH
14984: LD_EXP 56
14988: PUSH
14989: LD_INT 1
14991: PLUS
14992: PPUSH
14993: LD_VAR 0 3
14997: PPUSH
14998: CALL_OW 1
15002: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
15003: LD_INT 0
15005: PPUSH
15006: LD_INT 3
15008: PPUSH
15009: LD_INT 3
15011: PPUSH
15012: CALL_OW 380
// un := CreateHuman ;
15016: LD_ADDR_VAR 0 2
15020: PUSH
15021: CALL_OW 44
15025: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15026: LD_VAR 0 2
15030: PPUSH
15031: LD_VAR 0 3
15035: PPUSH
15036: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
15040: LD_ADDR_EXP 56
15044: PUSH
15045: LD_EXP 56
15049: PPUSH
15050: LD_EXP 56
15054: PUSH
15055: LD_INT 1
15057: PLUS
15058: PPUSH
15059: LD_VAR 0 2
15063: PPUSH
15064: CALL_OW 1
15068: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
15069: LD_VAR 0 2
15073: PPUSH
15074: LD_INT 273
15076: PPUSH
15077: LD_INT 227
15079: PPUSH
15080: CALL_OW 111
// wait ( 0 0$2 ) ;
15084: LD_INT 70
15086: PPUSH
15087: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
15091: LD_ADDR_VAR 0 4
15095: PUSH
15096: LD_VAR 0 4
15100: PPUSH
15101: LD_VAR 0 4
15105: PUSH
15106: LD_INT 1
15108: PLUS
15109: PPUSH
15110: LD_VAR 0 3
15114: PPUSH
15115: CALL_OW 1
15119: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
15120: LD_ADDR_VAR 0 4
15124: PUSH
15125: LD_VAR 0 4
15129: PPUSH
15130: LD_VAR 0 4
15134: PUSH
15135: LD_INT 1
15137: PLUS
15138: PPUSH
15139: LD_VAR 0 2
15143: PPUSH
15144: CALL_OW 1
15148: ST_TO_ADDR
// end ;
15149: GO 14851
15151: POP
15152: POP
// for i in tmp do
15153: LD_ADDR_VAR 0 1
15157: PUSH
15158: LD_VAR 0 4
15162: PUSH
15163: FOR_IN
15164: IFFALSE 15183
// begin ComAgressiveMove ( i , 330 , 231 ) ;
15166: LD_VAR 0 1
15170: PPUSH
15171: LD_INT 330
15173: PPUSH
15174: LD_INT 231
15176: PPUSH
15177: CALL_OW 114
// end ;
15181: GO 15163
15183: POP
15184: POP
// repeat wait ( 0 0$1 ) ;
15185: LD_INT 35
15187: PPUSH
15188: CALL_OW 67
// for i in tmp do
15192: LD_ADDR_VAR 0 1
15196: PUSH
15197: LD_VAR 0 4
15201: PUSH
15202: FOR_IN
15203: IFFALSE 15282
// if IsDead ( i ) then
15205: LD_VAR 0 1
15209: PPUSH
15210: CALL_OW 301
15214: IFFALSE 15234
// tmp := tmp diff i else
15216: LD_ADDR_VAR 0 4
15220: PUSH
15221: LD_VAR 0 4
15225: PUSH
15226: LD_VAR 0 1
15230: DIFF
15231: ST_TO_ADDR
15232: GO 15280
// if not HasTask ( i ) then
15234: LD_VAR 0 1
15238: PPUSH
15239: CALL_OW 314
15243: NOT
15244: IFFALSE 15280
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
15246: LD_VAR 0 1
15250: PPUSH
15251: LD_INT 81
15253: PUSH
15254: LD_INT 3
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PPUSH
15261: CALL_OW 69
15265: PPUSH
15266: LD_VAR 0 1
15270: PPUSH
15271: CALL_OW 74
15275: PPUSH
15276: CALL_OW 115
15280: GO 15202
15282: POP
15283: POP
// until not tmp ;
15284: LD_VAR 0 4
15288: NOT
15289: IFFALSE 15185
// end ;
15291: PPOPN 4
15293: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
15294: LD_INT 3
15296: PUSH
15297: LD_INT 22
15299: PUSH
15300: LD_INT 2
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PUSH
15311: LD_INT 32
15313: PUSH
15314: LD_INT 1
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PPUSH
15325: CALL_OW 69
15329: IFFALSE 15413
15331: GO 15333
15333: DISABLE
15334: LD_INT 0
15336: PPUSH
// begin enable ;
15337: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
15338: LD_ADDR_VAR 0 1
15342: PUSH
15343: LD_INT 3
15345: PUSH
15346: LD_INT 22
15348: PUSH
15349: LD_INT 2
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: PUSH
15360: LD_INT 32
15362: PUSH
15363: LD_INT 1
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: PPUSH
15374: CALL_OW 69
15378: PUSH
15379: FOR_IN
15380: IFFALSE 15411
// if GetFuel ( i ) < 3 then
15382: LD_VAR 0 1
15386: PPUSH
15387: CALL_OW 261
15391: PUSH
15392: LD_INT 3
15394: LESS
15395: IFFALSE 15409
// SetFuel ( i , 3 ) ;
15397: LD_VAR 0 1
15401: PPUSH
15402: LD_INT 3
15404: PPUSH
15405: CALL_OW 240
15409: GO 15379
15411: POP
15412: POP
// end ; end_of_file
15413: PPOPN 1
15415: END
// export function Action ; begin
15416: LD_INT 0
15418: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
15419: LD_INT 2
15421: PPUSH
15422: LD_INT 4
15424: PPUSH
15425: CALL_OW 332
// Video ( true ) ;
15429: LD_INT 1
15431: PPUSH
15432: CALL 61341 0 1
// music_nat := 3 ;
15436: LD_ADDR_OWVAR 71
15440: PUSH
15441: LD_INT 3
15443: ST_TO_ADDR
// music_class := music_recon ;
15444: LD_ADDR_OWVAR 72
15448: PUSH
15449: LD_INT 3
15451: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
15452: LD_INT 213
15454: PPUSH
15455: LD_INT 89
15457: PPUSH
15458: CALL_OW 86
// if Kaia and Olaf then
15462: LD_EXP 34
15466: PUSH
15467: LD_EXP 38
15471: AND
15472: IFFALSE 15478
// SceneKaiaWithOlaf ;
15474: CALL 15533 0 0
// if Givi and Kamil then
15478: LD_EXP 30
15482: PUSH
15483: LD_EXP 33
15487: AND
15488: IFFALSE 15494
// SceneWithGiviAndKamil ;
15490: CALL 16104 0 0
// Video ( false ) ;
15494: LD_INT 0
15496: PPUSH
15497: CALL 61341 0 1
// ChangeMissionObjectives ( M1 ) ;
15501: LD_STRING M1
15503: PPUSH
15504: CALL_OW 337
// music_nat := music_auto ;
15508: LD_ADDR_OWVAR 71
15512: PUSH
15513: LD_INT 0
15515: ST_TO_ADDR
// music_class := music_auto ;
15516: LD_ADDR_OWVAR 72
15520: PUSH
15521: LD_INT 0
15523: ST_TO_ADDR
// SaveForQuickRestart ;
15524: CALL_OW 22
// end ;
15528: LD_VAR 0 1
15532: RET
// export function SceneKaiaWithOlaf ; begin
15533: LD_INT 0
15535: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
15536: LD_INT 22
15538: PUSH
15539: LD_INT 2
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 30
15548: PUSH
15549: LD_INT 3
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: PPUSH
15560: CALL_OW 69
15564: PPUSH
15565: LD_INT 14
15567: PPUSH
15568: LD_INT 1
15570: PPUSH
15571: LD_INT 1
15573: PPUSH
15574: LD_INT 26
15576: PPUSH
15577: CALL_OW 125
// wait ( 0 0$1 ) ;
15581: LD_INT 35
15583: PPUSH
15584: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
15588: LD_EXP 34
15592: PPUSH
15593: LD_STRING DK-Mem-1
15595: PPUSH
15596: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
15600: LD_EXP 34
15604: PPUSH
15605: LD_STRING DK-Mem-2
15607: PPUSH
15608: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
15612: LD_EXP 38
15616: PPUSH
15617: LD_STRING DO-Mem-3
15619: PPUSH
15620: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
15624: LD_EXP 34
15628: PPUSH
15629: LD_STRING DK-Mem-4
15631: PPUSH
15632: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
15636: LD_EXP 38
15640: PPUSH
15641: LD_STRING DO-Mem-5
15643: PPUSH
15644: CALL_OW 88
// wait ( 0 0$2 ) ;
15648: LD_INT 70
15650: PPUSH
15651: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
15655: LD_INT 22
15657: PUSH
15658: LD_INT 2
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PUSH
15665: LD_INT 30
15667: PUSH
15668: LD_INT 3
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PPUSH
15679: CALL_OW 69
15683: PPUSH
15684: LD_INT 90
15686: PPUSH
15687: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
15691: LD_EXP 38
15695: PPUSH
15696: LD_STRING DO-Mem-6
15698: PPUSH
15699: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
15703: LD_EXP 34
15707: PPUSH
15708: LD_STRING DK-Mem-7
15710: PPUSH
15711: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
15715: LD_EXP 29
15719: PPUSH
15720: LD_EXP 34
15724: PPUSH
15725: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
15729: LD_EXP 29
15733: PPUSH
15734: LD_STRING DH-Mem-8
15736: PPUSH
15737: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
15741: LD_EXP 34
15745: PUSH
15746: LD_EXP 38
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: PPUSH
15755: LD_EXP 29
15759: PPUSH
15760: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
15764: LD_EXP 38
15768: PPUSH
15769: LD_STRING DO-Mem-9
15771: PPUSH
15772: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
15776: LD_EXP 38
15780: PPUSH
15781: LD_STRING DO-Mem-10
15783: PPUSH
15784: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
15788: LD_EXP 38
15792: PPUSH
15793: LD_STRING DO-Mem-11
15795: PPUSH
15796: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
15800: LD_EXP 38
15804: PPUSH
15805: LD_STRING DO-Mem-12
15807: PPUSH
15808: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
15812: LD_EXP 34
15816: PPUSH
15817: LD_STRING DK-Mem-13
15819: PPUSH
15820: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
15824: LD_EXP 34
15828: PPUSH
15829: LD_STRING DK-Mem-14
15831: PPUSH
15832: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
15836: LD_EXP 34
15840: PPUSH
15841: LD_STRING DK-Mem-15
15843: PPUSH
15844: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
15848: LD_EXP 34
15852: PPUSH
15853: LD_STRING DK-Mem-16
15855: PPUSH
15856: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
15860: LD_EXP 34
15864: PPUSH
15865: LD_STRING DK-Mem-17
15867: PPUSH
15868: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
15872: LD_EXP 38
15876: PPUSH
15877: LD_EXP 34
15881: PPUSH
15882: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
15886: LD_EXP 38
15890: PPUSH
15891: LD_STRING DO-Mem-18
15893: PPUSH
15894: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
15898: LD_EXP 34
15902: PPUSH
15903: LD_EXP 38
15907: PPUSH
15908: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
15912: LD_EXP 34
15916: PPUSH
15917: LD_STRING DK-Mem-19
15919: PPUSH
15920: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
15924: LD_EXP 38
15928: PPUSH
15929: LD_INT 214
15931: PPUSH
15932: LD_INT 86
15934: PPUSH
15935: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
15939: LD_EXP 38
15943: PPUSH
15944: LD_EXP 34
15948: PPUSH
15949: CALL_OW 179
// if Givi then
15953: LD_EXP 30
15957: IFFALSE 15988
// begin ComMoveXY ( Givi , 217 , 86 ) ;
15959: LD_EXP 30
15963: PPUSH
15964: LD_INT 217
15966: PPUSH
15967: LD_INT 86
15969: PPUSH
15970: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
15974: LD_EXP 30
15978: PPUSH
15979: LD_EXP 29
15983: PPUSH
15984: CALL_OW 179
// end ; if Kamil then
15988: LD_EXP 33
15992: IFFALSE 16032
// begin ComExit ( Kamil ) ;
15994: LD_EXP 33
15998: PPUSH
15999: CALL 61757 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
16003: LD_EXP 33
16007: PPUSH
16008: LD_INT 212
16010: PPUSH
16011: LD_INT 86
16013: PPUSH
16014: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
16018: LD_EXP 33
16022: PPUSH
16023: LD_EXP 29
16027: PPUSH
16028: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
16032: LD_INT 70
16034: PPUSH
16035: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
16039: LD_EXP 29
16043: PPUSH
16044: LD_STRING DH-Mem-20
16046: PPUSH
16047: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
16051: LD_EXP 38
16055: PPUSH
16056: LD_INT 215
16058: PPUSH
16059: LD_INT 87
16061: PPUSH
16062: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
16066: LD_EXP 38
16070: PPUSH
16071: LD_EXP 34
16075: PPUSH
16076: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
16080: LD_EXP 34
16084: PPUSH
16085: LD_STRING DK-Mem-21
16087: PPUSH
16088: CALL_OW 88
// wait ( 0 0$2 ) ;
16092: LD_INT 70
16094: PPUSH
16095: CALL_OW 67
// end ;
16099: LD_VAR 0 1
16103: RET
// export function SceneWithGiviAndKamil ; begin
16104: LD_INT 0
16106: PPUSH
// if Markov then
16107: LD_EXP 36
16111: IFFALSE 16162
// begin if IsInUnit ( Markov ) then
16113: LD_EXP 36
16117: PPUSH
16118: CALL_OW 310
16122: IFFALSE 16133
// ComExit ( Markov ) ;
16124: LD_EXP 36
16128: PPUSH
16129: CALL 61757 0 1
// AddComMoveXY ( Markov , 212 , 88 ) ;
16133: LD_EXP 36
16137: PPUSH
16138: LD_INT 212
16140: PPUSH
16141: LD_INT 88
16143: PPUSH
16144: CALL_OW 171
// AddComTurnUnit ( Markov , Heike ) ;
16148: LD_EXP 36
16152: PPUSH
16153: LD_EXP 29
16157: PPUSH
16158: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
16162: LD_EXP 30
16166: PPUSH
16167: LD_STRING DG-Obj-1
16169: PPUSH
16170: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
16174: LD_EXP 33
16178: PPUSH
16179: LD_STRING DKam-Obj-2
16181: PPUSH
16182: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
16186: LD_EXP 29
16190: PPUSH
16191: LD_EXP 33
16195: PPUSH
16196: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
16200: LD_EXP 33
16204: PPUSH
16205: LD_STRING DKam-Obj-3
16207: PPUSH
16208: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
16212: LD_EXP 36
16216: PPUSH
16217: LD_STRING DMar-Obj-4
16219: PPUSH
16220: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
16224: LD_EXP 33
16228: PPUSH
16229: LD_STRING DKam-Obj-6
16231: PPUSH
16232: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
16236: LD_EXP 33
16240: PPUSH
16241: LD_STRING DKam-Obj-7
16243: PPUSH
16244: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
16248: LD_EXP 33
16252: PPUSH
16253: LD_STRING DKam-Obj-8
16255: PPUSH
16256: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
16260: LD_EXP 29
16264: PPUSH
16265: LD_STRING DH-Obj-9
16267: PPUSH
16268: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
16272: LD_EXP 33
16276: PPUSH
16277: LD_STRING DKam-Obj-10
16279: PPUSH
16280: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
16284: LD_EXP 33
16288: PPUSH
16289: LD_STRING DKam-Obj-11
16291: PPUSH
16292: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
16296: LD_EXP 36
16300: PPUSH
16301: LD_STRING DMar-Obj-12
16303: PPUSH
16304: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
16308: LD_EXP 36
16312: PPUSH
16313: LD_STRING DMar-Obj-13
16315: PPUSH
16316: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
16320: LD_EXP 36
16324: PPUSH
16325: LD_STRING DMar-Obj-14
16327: PPUSH
16328: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
16332: LD_EXP 38
16336: PPUSH
16337: LD_STRING DO-Obj-15
16339: PPUSH
16340: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
16344: LD_EXP 38
16348: PPUSH
16349: LD_STRING DO-Obj-16
16351: PPUSH
16352: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
16356: LD_EXP 29
16360: PPUSH
16361: LD_STRING DH-Obj-17
16363: PPUSH
16364: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
16368: LD_EXP 38
16372: PPUSH
16373: LD_STRING DO-Obj-18
16375: PPUSH
16376: CALL_OW 88
// end ;
16380: LD_VAR 0 1
16384: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
16385: LD_INT 34
16387: PUSH
16388: LD_EXP 63
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: PPUSH
16397: CALL_OW 69
16401: IFFALSE 16598
16403: GO 16405
16405: DISABLE
16406: LD_INT 0
16408: PPUSH
// begin wait ( 0 0$2 ) ;
16409: LD_INT 70
16411: PPUSH
16412: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
16416: LD_INT 34
16418: PUSH
16419: LD_EXP 63
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: PPUSH
16428: CALL_OW 69
16432: PPUSH
16433: CALL_OW 87
// DialogueOn ;
16437: CALL_OW 6
// if Markov then
16441: LD_EXP 36
16445: IFFALSE 16473
// begin Say ( Markov , DMar-Grn-1 ) ;
16447: LD_EXP 36
16451: PPUSH
16452: LD_STRING DMar-Grn-1
16454: PPUSH
16455: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
16459: LD_EXP 29
16463: PPUSH
16464: LD_STRING DH-Grn-2
16466: PPUSH
16467: CALL_OW 88
// end else
16471: GO 16572
// if heikeSecondSquad then
16473: LD_EXP 44
16477: IFFALSE 16572
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
16479: LD_ADDR_VAR 0 1
16483: PUSH
16484: LD_EXP 44
16488: PUSH
16489: LD_INT 1
16491: PPUSH
16492: LD_EXP 44
16496: PPUSH
16497: CALL_OW 12
16501: ARRAY
16502: ST_TO_ADDR
// case GetSex ( random ) of 1 :
16503: LD_VAR 0 1
16507: PPUSH
16508: CALL_OW 258
16512: PUSH
16513: LD_INT 1
16515: DOUBLE
16516: EQUAL
16517: IFTRUE 16521
16519: GO 16536
16521: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
16522: LD_VAR 0 1
16526: PPUSH
16527: LD_STRING DArm-Grn-1
16529: PPUSH
16530: CALL_OW 88
16534: GO 16560
16536: LD_INT 2
16538: DOUBLE
16539: EQUAL
16540: IFTRUE 16544
16542: GO 16559
16544: POP
// Say ( random , DArf-Grn-1 ) ; end ;
16545: LD_VAR 0 1
16549: PPUSH
16550: LD_STRING DArf-Grn-1
16552: PPUSH
16553: CALL_OW 88
16557: GO 16560
16559: POP
// Say ( Heike , DH-Grn-2 ) ;
16560: LD_EXP 29
16564: PPUSH
16565: LD_STRING DH-Grn-2
16567: PPUSH
16568: CALL_OW 88
// end ; DialogueOff ;
16572: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
16576: LD_STRING MortarConstructed
16578: PPUSH
16579: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
16583: LD_STRING SelfPropelledMortar
16585: PPUSH
16586: CALL_OW 339
// mortarConstructed := true ;
16590: LD_ADDR_EXP 15
16594: PUSH
16595: LD_INT 1
16597: ST_TO_ADDR
// end ;
16598: PPOPN 1
16600: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
16601: LD_INT 2
16603: PPUSH
16604: LD_INT 8
16606: PPUSH
16607: CALL_OW 294
16611: IFFALSE 16754
16613: GO 16615
16615: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
16616: LD_INT 200
16618: PPUSH
16619: LD_INT 162
16621: PPUSH
16622: LD_INT 2
16624: PPUSH
16625: LD_INT 6
16627: NEG
16628: PPUSH
16629: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
16633: LD_INT 200
16635: PPUSH
16636: LD_INT 162
16638: PPUSH
16639: LD_INT 2
16641: PPUSH
16642: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
16646: LD_INT 200
16648: PPUSH
16649: LD_INT 162
16651: PPUSH
16652: CALL_OW 84
// if not IsOk ( Kurt ) then
16656: LD_EXP 40
16660: PPUSH
16661: CALL_OW 302
16665: NOT
16666: IFFALSE 16670
// exit ;
16668: GO 16754
// Say ( Kurt , DKs-Otpst-2-1 ) ;
16670: LD_EXP 40
16674: PPUSH
16675: LD_STRING DKs-Otpst-2-1
16677: PPUSH
16678: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
16682: LD_EXP 34
16686: PPUSH
16687: LD_STRING DK-Otpst-2-2
16689: PPUSH
16690: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
16694: LD_EXP 40
16698: PPUSH
16699: LD_STRING DKs-Otpst-2-3
16701: PPUSH
16702: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
16706: LD_EXP 40
16710: PPUSH
16711: LD_STRING DKs-Otpst-2-4
16713: PPUSH
16714: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
16718: LD_EXP 40
16722: PPUSH
16723: LD_STRING DKs-Otpst-2-5
16725: PPUSH
16726: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
16730: LD_EXP 33
16734: PPUSH
16735: LD_STRING DKam-Otpst-2-6
16737: PPUSH
16738: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
16742: LD_EXP 40
16746: PPUSH
16747: LD_STRING DKs-Otpst-2-7
16749: PPUSH
16750: CALL_OW 88
// end ;
16754: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
16755: LD_INT 8
16757: PPUSH
16758: LD_INT 22
16760: PUSH
16761: LD_INT 3
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: LD_INT 21
16770: PUSH
16771: LD_INT 3
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PPUSH
16782: CALL_OW 70
16786: NOT
16787: PUSH
16788: LD_EXP 3
16792: NOT
16793: AND
16794: IFFALSE 17044
16796: GO 16798
16798: DISABLE
16799: LD_INT 0
16801: PPUSH
// begin outpostDestroyed := true ;
16802: LD_ADDR_EXP 4
16806: PUSH
16807: LD_INT 1
16809: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
16810: LD_INT 22
16812: PUSH
16813: LD_INT 2
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 34
16822: PUSH
16823: LD_EXP 63
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PUSH
16832: LD_INT 92
16834: PUSH
16835: LD_INT 195
16837: PUSH
16838: LD_INT 164
16840: PUSH
16841: LD_INT 12
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: LIST
16854: PPUSH
16855: CALL_OW 69
16859: NOT
16860: IFFALSE 16864
// exit ;
16862: GO 17044
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
16864: LD_EXP 30
16868: PPUSH
16869: CALL_OW 302
16873: NOT
16874: PUSH
16875: LD_EXP 34
16879: PPUSH
16880: CALL_OW 302
16884: NOT
16885: OR
16886: IFFALSE 16890
// exit ;
16888: GO 17044
// Say ( Givi , DG-Otpst-1-1 ) ;
16890: LD_EXP 30
16894: PPUSH
16895: LD_STRING DG-Otpst-1-1
16897: PPUSH
16898: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
16902: LD_EXP 34
16906: PPUSH
16907: LD_STRING DK-Otpst-1-2
16909: PPUSH
16910: CALL_OW 88
// if IsOk ( Markov ) then
16914: LD_EXP 36
16918: PPUSH
16919: CALL_OW 302
16923: IFFALSE 16951
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
16925: LD_EXP 36
16929: PPUSH
16930: LD_STRING DMar-Otpst-1-3
16932: PPUSH
16933: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
16937: LD_EXP 36
16941: PPUSH
16942: LD_STRING DMar-Otpst-1-4
16944: PPUSH
16945: CALL_OW 88
// end else
16949: GO 17032
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
16951: LD_ADDR_VAR 0 1
16955: PUSH
16956: LD_EXP 44
16960: PUSH
16961: LD_INT 1
16963: PPUSH
16964: LD_EXP 44
16968: PPUSH
16969: CALL_OW 12
16973: ARRAY
16974: ST_TO_ADDR
// case GetSex ( random ) of 1 :
16975: LD_VAR 0 1
16979: PPUSH
16980: CALL_OW 258
16984: PUSH
16985: LD_INT 1
16987: DOUBLE
16988: EQUAL
16989: IFTRUE 16993
16991: GO 17008
16993: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
16994: LD_VAR 0 1
16998: PPUSH
16999: LD_STRING DArm-Otpst-1-a-3
17001: PPUSH
17002: CALL_OW 88
17006: GO 17032
17008: LD_INT 2
17010: DOUBLE
17011: EQUAL
17012: IFTRUE 17016
17014: GO 17031
17016: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
17017: LD_VAR 0 1
17021: PPUSH
17022: LD_STRING DArf-Otpst-1-a-3
17024: PPUSH
17025: CALL_OW 88
17029: GO 17032
17031: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
17032: LD_EXP 30
17036: PPUSH
17037: LD_STRING DG-Otpst-1-5
17039: PPUSH
17040: CALL_OW 88
// end ;
17044: PPOPN 1
17046: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
17047: LD_EXP 34
17051: PPUSH
17052: CALL_OW 256
17056: PUSH
17057: LD_INT 10
17059: LESS
17060: IFFALSE 17174
17062: GO 17064
17064: DISABLE
// begin DialogueOn ;
17065: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17069: LD_EXP 34
17073: PPUSH
17074: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
17078: LD_EXP 34
17082: PPUSH
17083: LD_STRING DK-Dead-1
17085: PPUSH
17086: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
17090: LD_EXP 29
17094: PPUSH
17095: LD_STRING DH-Dead-2
17097: PPUSH
17098: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
17102: LD_EXP 34
17106: PPUSH
17107: LD_STRING DK-Dead-3
17109: PPUSH
17110: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
17114: LD_EXP 29
17118: PPUSH
17119: LD_STRING DH-Dead-4
17121: PPUSH
17122: CALL_OW 88
// if IsOk ( Mike ) then
17126: LD_EXP 31
17130: PPUSH
17131: CALL_OW 302
17135: IFFALSE 17161
// begin Say ( Mike , DM-Dead-5 ) ;
17137: LD_EXP 31
17141: PPUSH
17142: LD_STRING DM-Dead-5
17144: PPUSH
17145: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
17149: LD_EXP 29
17153: PPUSH
17154: LD_STRING DH-Dead-6
17156: PPUSH
17157: CALL_OW 88
// end ; DialogueOff ;
17161: CALL_OW 7
// KillUnit ( Kaia ) ;
17165: LD_EXP 34
17169: PPUSH
17170: CALL_OW 66
// end ;
17174: END
// every 0 0$1 trigger tick >= 10 10$20 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
17175: LD_OWVAR 1
17179: PUSH
17180: LD_INT 21700
17182: GREATEREQUAL
17183: PUSH
17184: LD_EXP 5
17188: PUSH
17189: LD_INT 5
17191: GREATER
17192: OR
17193: PUSH
17194: LD_INT 22
17196: PUSH
17197: LD_INT 2
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 92
17206: PUSH
17207: LD_INT 103
17209: PUSH
17210: LD_INT 81
17212: PUSH
17213: LD_INT 20
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PPUSH
17226: CALL_OW 69
17230: OR
17231: IFFALSE 17638
17233: GO 17235
17235: DISABLE
17236: LD_INT 0
17238: PPUSH
17239: PPUSH
17240: PPUSH
// begin PrepareRolfSquad ;
17241: CALL 2348 0 0
// dep := HexInfo ( 86 , 54 ) ;
17245: LD_ADDR_VAR 0 3
17249: PUSH
17250: LD_INT 86
17252: PPUSH
17253: LD_INT 54
17255: PPUSH
17256: CALL_OW 428
17260: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
17261: LD_VAR 0 3
17265: PPUSH
17266: CALL_OW 274
17270: PPUSH
17271: LD_INT 1
17273: PPUSH
17274: LD_INT 300
17276: PPUSH
17277: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
17281: LD_VAR 0 3
17285: PPUSH
17286: CALL_OW 274
17290: PPUSH
17291: LD_INT 2
17293: PPUSH
17294: LD_INT 300
17296: PPUSH
17297: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
17301: LD_EXP 46
17305: PPUSH
17306: LD_INT 79
17308: PPUSH
17309: LD_INT 52
17311: PPUSH
17312: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
17316: LD_INT 35
17318: PPUSH
17319: CALL_OW 67
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
17323: LD_INT 12
17325: PPUSH
17326: LD_INT 22
17328: PUSH
17329: LD_INT 3
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: PUSH
17336: LD_INT 21
17338: PUSH
17339: LD_INT 1
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: PPUSH
17350: CALL_OW 70
17354: NOT
17355: IFFALSE 17316
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
17357: LD_ADDR_VAR 0 2
17361: PUSH
17362: LD_INT 12
17364: PPUSH
17365: LD_INT 21
17367: PUSH
17368: LD_INT 3
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PPUSH
17375: CALL_OW 70
17379: ST_TO_ADDR
// for i in tmp do
17380: LD_ADDR_VAR 0 1
17384: PUSH
17385: LD_VAR 0 2
17389: PUSH
17390: FOR_IN
17391: IFFALSE 17407
// SetSide ( i , 8 ) ;
17393: LD_VAR 0 1
17397: PPUSH
17398: LD_INT 8
17400: PPUSH
17401: CALL_OW 235
17405: GO 17390
17407: POP
17408: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
17409: LD_INT 63
17411: PPUSH
17412: LD_INT 42
17414: PPUSH
17415: CALL_OW 428
17419: PPUSH
17420: LD_INT 320
17422: PPUSH
17423: CALL_OW 234
// wait ( 0 0$10 ) ;
17427: LD_INT 350
17429: PPUSH
17430: CALL_OW 67
// DialogueOn ;
17434: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
17438: LD_INT 8
17440: PPUSH
17441: LD_INT 2
17443: PPUSH
17444: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
17448: LD_INT 86
17450: PPUSH
17451: LD_INT 54
17453: PPUSH
17454: CALL_OW 428
17458: PPUSH
17459: LD_STRING antwerp
17461: PPUSH
17462: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
17466: LD_EXP 42
17470: PPUSH
17471: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
17475: LD_EXP 42
17479: PPUSH
17480: LD_STRING DRf-rast-1
17482: PPUSH
17483: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
17487: LD_EXP 29
17491: PPUSH
17492: LD_STRING DH-rast-2
17494: PPUSH
17495: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
17499: LD_EXP 42
17503: PPUSH
17504: LD_STRING DRf-rast-3
17506: PPUSH
17507: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
17511: LD_EXP 42
17515: PPUSH
17516: LD_STRING DRf-rast-4
17518: PPUSH
17519: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
17523: LD_EXP 42
17527: PPUSH
17528: LD_STRING DRf-rast-5
17530: PPUSH
17531: CALL_OW 94
// if IsOk ( Aviradze ) then
17535: LD_EXP 41
17539: PPUSH
17540: CALL_OW 302
17544: IFFALSE 17603
// begin CenterNowOnUnits ( Aviradze ) ;
17546: LD_EXP 41
17550: PPUSH
17551: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
17555: LD_EXP 41
17559: PPUSH
17560: LD_STRING DA-rast-6
17562: PPUSH
17563: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
17567: LD_EXP 29
17571: PPUSH
17572: LD_STRING DH-rast-7
17574: PPUSH
17575: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
17579: LD_EXP 30
17583: PPUSH
17584: LD_STRING DG-rast-8
17586: PPUSH
17587: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
17591: LD_EXP 30
17595: PPUSH
17596: LD_STRING DG-rast-9
17598: PPUSH
17599: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
17603: LD_EXP 29
17607: PPUSH
17608: LD_STRING DH-rast-10
17610: PPUSH
17611: CALL_OW 88
// DialogueOff ;
17615: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
17619: LD_STRING M2
17621: PPUSH
17622: CALL_OW 337
// bergkampfArrived := true ;
17626: LD_ADDR_EXP 3
17630: PUSH
17631: LD_INT 1
17633: ST_TO_ADDR
// PrepareRolfBase ;
17634: CALL 2679 0 0
// end ;
17638: PPOPN 3
17640: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) do var i ;
17641: LD_INT 12
17643: PPUSH
17644: LD_INT 22
17646: PUSH
17647: LD_INT 2
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PPUSH
17654: CALL_OW 70
17658: PUSH
17659: LD_EXP 42
17663: PPUSH
17664: CALL_OW 302
17668: AND
17669: IFFALSE 18229
17671: GO 17673
17673: DISABLE
17674: LD_INT 0
17676: PPUSH
// begin rolfScriptBase := false ;
17677: LD_ADDR_EXP 9
17681: PUSH
17682: LD_INT 0
17684: ST_TO_ADDR
// DialogueOn ;
17685: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
17689: LD_EXP 42
17693: PPUSH
17694: CALL_OW 87
// if rolfSquad >= 10 then
17698: LD_EXP 46
17702: PUSH
17703: LD_INT 10
17705: GREATEREQUAL
17706: IFFALSE 17885
// begin linkedWithRolf := 2 ;
17708: LD_ADDR_EXP 12
17712: PUSH
17713: LD_INT 2
17715: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
17716: LD_EXP 42
17720: PPUSH
17721: LD_STRING DRf-rast-11
17723: PPUSH
17724: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
17728: LD_EXP 29
17732: PPUSH
17733: LD_STRING DH-rast-12
17735: PPUSH
17736: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
17740: LD_EXP 42
17744: PPUSH
17745: LD_STRING DRf-rast-13
17747: PPUSH
17748: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
17752: LD_EXP 29
17756: PPUSH
17757: LD_STRING DH-rast-14
17759: PPUSH
17760: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
17764: LD_EXP 42
17768: PPUSH
17769: LD_STRING DRf-rast-15
17771: PPUSH
17772: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
17776: LD_EXP 29
17780: PPUSH
17781: LD_STRING DH-rast-16
17783: PPUSH
17784: CALL_OW 88
// if IsOk ( Mike ) then
17788: LD_EXP 31
17792: PPUSH
17793: CALL_OW 302
17797: IFFALSE 17871
// begin Say ( Mike , DM-rast-17 ) ;
17799: LD_EXP 31
17803: PPUSH
17804: LD_STRING DM-rast-17
17806: PPUSH
17807: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
17811: LD_EXP 29
17815: PPUSH
17816: LD_STRING DH-rast-18
17818: PPUSH
17819: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
17823: LD_EXP 31
17827: PPUSH
17828: LD_STRING DM-rast-19
17830: PPUSH
17831: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
17835: LD_EXP 29
17839: PPUSH
17840: LD_STRING DH-rast-20
17842: PPUSH
17843: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
17847: LD_EXP 31
17851: PPUSH
17852: LD_STRING DM-rast-21
17854: PPUSH
17855: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
17859: LD_EXP 29
17863: PPUSH
17864: LD_STRING DH-rast-22
17866: PPUSH
17867: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
17871: LD_EXP 29
17875: PPUSH
17876: LD_STRING DH-rast-23
17878: PPUSH
17879: CALL_OW 88
// end else
17883: GO 18035
// begin linkedWithRolf := 1 ;
17885: LD_ADDR_EXP 12
17889: PUSH
17890: LD_INT 1
17892: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
17893: LD_EXP 42
17897: PPUSH
17898: LD_STRING DRf-rast-a-11
17900: PPUSH
17901: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
17905: LD_EXP 29
17909: PPUSH
17910: LD_STRING DH-rast-a-12
17912: PPUSH
17913: CALL_OW 88
// if IsOk ( Kurt ) then
17917: LD_EXP 40
17921: PPUSH
17922: CALL_OW 302
17926: IFFALSE 18023
// begin Say ( Kurt , DKs-rast-a-13 ) ;
17928: LD_EXP 40
17932: PPUSH
17933: LD_STRING DKs-rast-a-13
17935: PPUSH
17936: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
17940: LD_EXP 42
17944: PPUSH
17945: LD_STRING DRf-rast-a-14
17947: PPUSH
17948: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
17952: LD_EXP 42
17956: PPUSH
17957: LD_STRING DRf-rast-a-15
17959: PPUSH
17960: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
17964: LD_EXP 40
17968: PPUSH
17969: LD_STRING DKs-rast-a-16
17971: PPUSH
17972: CALL_OW 88
// if IsOk ( Givi ) then
17976: LD_EXP 30
17980: PPUSH
17981: CALL_OW 302
17985: IFFALSE 18023
// begin Say ( Givi , DG-rast-a-17 ) ;
17987: LD_EXP 30
17991: PPUSH
17992: LD_STRING DG-rast-a-17
17994: PPUSH
17995: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
17999: LD_EXP 30
18003: PPUSH
18004: LD_STRING DG-rast-a-18
18006: PPUSH
18007: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
18011: LD_EXP 40
18015: PPUSH
18016: LD_STRING DKs-rast-a-19
18018: PPUSH
18019: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
18023: LD_EXP 29
18027: PPUSH
18028: LD_STRING DH-rast-a-20
18030: PPUSH
18031: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
18035: LD_EXP 42
18039: PPUSH
18040: LD_STRING DRf-rast-24
18042: PPUSH
18043: CALL_OW 88
// if IsOk ( Aviradze ) then
18047: LD_EXP 41
18051: PPUSH
18052: CALL_OW 302
18056: IFFALSE 18156
// begin Say ( Aviradze , DA-rast-25 ) ;
18058: LD_EXP 41
18062: PPUSH
18063: LD_STRING DA-rast-25
18065: PPUSH
18066: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
18070: LD_EXP 29
18074: PPUSH
18075: LD_STRING DH-rast-26
18077: PPUSH
18078: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
18082: LD_EXP 41
18086: PPUSH
18087: LD_STRING DA-rast-27
18089: PPUSH
18090: CALL_OW 88
// if IsOk ( Markov ) then
18094: LD_EXP 36
18098: PPUSH
18099: CALL_OW 302
18103: IFFALSE 18131
// begin Say ( Markov , DMar-rast-28 ) ;
18105: LD_EXP 36
18109: PPUSH
18110: LD_STRING DMar-rast-28
18112: PPUSH
18113: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
18117: LD_EXP 36
18121: PPUSH
18122: LD_STRING DMar-rast-29
18124: PPUSH
18125: CALL_OW 88
// end else
18129: GO 18154
// if IsOk ( Sophia ) then
18131: LD_EXP 35
18135: PPUSH
18136: CALL_OW 302
18140: IFFALSE 18154
// begin Say ( Sophia , DS-rast-28 ) ;
18142: LD_EXP 35
18146: PPUSH
18147: LD_STRING DS-rast-28
18149: PPUSH
18150: CALL_OW 88
// end ; end else
18154: GO 18179
// if IsOk ( Sophia ) then
18156: LD_EXP 35
18160: PPUSH
18161: CALL_OW 302
18165: IFFALSE 18179
// Say ( Sophia , DS-rast-29 ) ;
18167: LD_EXP 35
18171: PPUSH
18172: LD_STRING DS-rast-29
18174: PPUSH
18175: CALL_OW 88
// DialogueOff ;
18179: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
18183: LD_STRING M3
18185: PPUSH
18186: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
18190: LD_ADDR_VAR 0 1
18194: PUSH
18195: LD_INT 22
18197: PUSH
18198: LD_INT 8
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PPUSH
18205: CALL_OW 69
18209: PUSH
18210: FOR_IN
18211: IFFALSE 18227
// SetSide ( i , 2 ) ;
18213: LD_VAR 0 1
18217: PPUSH
18218: LD_INT 2
18220: PPUSH
18221: CALL_OW 235
18225: GO 18210
18227: POP
18228: POP
// end ;
18229: PPOPN 1
18231: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf do var random ;
18232: LD_EXP 3
18236: PUSH
18237: LD_EXP 42
18241: PPUSH
18242: CALL_OW 256
18246: PUSH
18247: LD_INT 400
18249: LESS
18250: AND
18251: PUSH
18252: LD_EXP 12
18256: NOT
18257: AND
18258: IFFALSE 18532
18260: GO 18262
18262: DISABLE
18263: LD_INT 0
18265: PPUSH
// begin DialogueOn ;
18266: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
18270: LD_EXP 42
18274: PPUSH
18275: LD_STRING DRf-rast-f-11
18277: PPUSH
18278: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
18282: LD_EXP 42
18286: PPUSH
18287: LD_STRING DRf-rast-f-12
18289: PPUSH
18290: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
18294: LD_EXP 42
18298: PPUSH
18299: LD_STRING DRf-rast-f-13
18301: PPUSH
18302: CALL_OW 94
// DialogueOff ;
18306: CALL_OW 7
// KillUnit ( Rolf ) ;
18310: LD_EXP 42
18314: PPUSH
18315: CALL_OW 66
// wait ( 0 0$1 ) ;
18319: LD_INT 35
18321: PPUSH
18322: CALL_OW 67
// if not IsOk ( Givi ) then
18326: LD_EXP 30
18330: PPUSH
18331: CALL_OW 302
18335: NOT
18336: IFFALSE 18340
// exit ;
18338: GO 18532
// DialogueOn ;
18340: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
18344: LD_EXP 30
18348: PPUSH
18349: LD_STRING DG-rast-f-14
18351: PPUSH
18352: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
18356: LD_EXP 30
18360: PPUSH
18361: LD_STRING DG-rast-f-15
18363: PPUSH
18364: CALL_OW 88
// if IsOk ( Kaia ) then
18368: LD_EXP 34
18372: PPUSH
18373: CALL_OW 302
18377: IFFALSE 18393
// Say ( Kaia , DK-rast-f-16 ) else
18379: LD_EXP 34
18383: PPUSH
18384: LD_STRING DK-rast-f-16
18386: PPUSH
18387: CALL_OW 88
18391: GO 18480
// if heikeSecondSquad then
18393: LD_EXP 44
18397: IFFALSE 18480
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
18399: LD_ADDR_VAR 0 1
18403: PUSH
18404: LD_EXP 44
18408: PUSH
18409: LD_INT 1
18411: PPUSH
18412: LD_EXP 44
18416: PPUSH
18417: CALL_OW 12
18421: ARRAY
18422: ST_TO_ADDR
// case GetSex ( random ) of 1 :
18423: LD_VAR 0 1
18427: PPUSH
18428: CALL_OW 258
18432: PUSH
18433: LD_INT 1
18435: DOUBLE
18436: EQUAL
18437: IFTRUE 18441
18439: GO 18456
18441: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
18442: LD_VAR 0 1
18446: PPUSH
18447: LD_STRING DArm-rast-f-a-16
18449: PPUSH
18450: CALL_OW 88
18454: GO 18480
18456: LD_INT 2
18458: DOUBLE
18459: EQUAL
18460: IFTRUE 18464
18462: GO 18479
18464: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
18465: LD_VAR 0 1
18469: PPUSH
18470: LD_STRING DArf-rast-f-a-16
18472: PPUSH
18473: CALL_OW 88
18477: GO 18480
18479: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
18480: LD_EXP 30
18484: PPUSH
18485: LD_STRING DG-rast-f-17
18487: PPUSH
18488: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
18492: LD_EXP 30
18496: PPUSH
18497: LD_STRING DG-rast-f-18
18499: PPUSH
18500: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
18504: LD_EXP 30
18508: PPUSH
18509: LD_STRING DG-rast-f-19
18511: PPUSH
18512: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
18516: LD_EXP 30
18520: PPUSH
18521: LD_STRING DG-rast-f-20
18523: PPUSH
18524: CALL_OW 88
// DialogueOff ;
18528: CALL_OW 7
// end ;
18532: PPOPN 1
18534: END
// every 0 0$1 trigger SeeArea ( 2 , ruMainBase ) do
18535: LD_INT 2
18537: PPUSH
18538: LD_INT 10
18540: PPUSH
18541: CALL_OW 294
18545: IFFALSE 18618
18547: GO 18549
18549: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
18550: LD_EXP 30
18554: PPUSH
18555: LD_STRING DG-Len-1
18557: PPUSH
18558: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
18562: LD_EXP 40
18566: PPUSH
18567: LD_STRING DKs-Len-2
18569: PPUSH
18570: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
18574: LD_EXP 40
18578: PPUSH
18579: LD_STRING DKs-Len-3
18581: PPUSH
18582: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
18586: LD_EXP 29
18590: PPUSH
18591: LD_STRING DH-Len-4
18593: PPUSH
18594: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
18598: LD_EXP 34
18602: PPUSH
18603: LD_STRING DK-Len-5
18605: PPUSH
18606: CALL_OW 88
// leninSpotted := true ;
18610: LD_ADDR_EXP 14
18614: PUSH
18615: LD_INT 1
18617: ST_TO_ADDR
// end ;
18618: END
// every 0 0$1 trigger ( bergkampfArrived and tick > 14 14$00 ) or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 322 , 215 , 20 ] ] ) do var i ;
18619: LD_EXP 3
18623: PUSH
18624: LD_OWVAR 1
18628: PUSH
18629: LD_INT 29400
18631: GREATER
18632: AND
18633: PUSH
18634: LD_INT 22
18636: PUSH
18637: LD_INT 2
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: LD_INT 92
18646: PUSH
18647: LD_INT 322
18649: PUSH
18650: LD_INT 215
18652: PUSH
18653: LD_INT 20
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PPUSH
18666: CALL_OW 69
18670: OR
18671: IFFALSE 19034
18673: GO 18675
18675: DISABLE
18676: LD_INT 0
18678: PPUSH
// begin PrepareOmarSquad ;
18679: CALL 3961 0 0
// repeat wait ( 0 0$1 ) ;
18683: LD_INT 35
18685: PPUSH
18686: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
18690: LD_INT 14
18692: PPUSH
18693: LD_INT 22
18695: PUSH
18696: LD_INT 3
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 2
18705: PUSH
18706: LD_INT 21
18708: PUSH
18709: LD_INT 1
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 59
18718: PUSH
18719: EMPTY
18720: LIST
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: LIST
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PPUSH
18731: CALL_OW 70
18735: NOT
18736: IFFALSE 18683
// for i in omarSquad do
18738: LD_ADDR_VAR 0 1
18742: PUSH
18743: LD_EXP 47
18747: PUSH
18748: FOR_IN
18749: IFFALSE 18780
// if GetLives ( i ) < 750 then
18751: LD_VAR 0 1
18755: PPUSH
18756: CALL_OW 256
18760: PUSH
18761: LD_INT 750
18763: LESS
18764: IFFALSE 18778
// SetLives ( i , 1000 ) ;
18766: LD_VAR 0 1
18770: PPUSH
18771: LD_INT 1000
18773: PPUSH
18774: CALL_OW 234
18778: GO 18748
18780: POP
18781: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
18782: LD_ADDR_VAR 0 1
18786: PUSH
18787: LD_INT 14
18789: PPUSH
18790: LD_INT 21
18792: PUSH
18793: LD_INT 3
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PPUSH
18800: CALL_OW 70
18804: PUSH
18805: FOR_IN
18806: IFFALSE 18822
// SetSide ( i , 5 ) ;
18808: LD_VAR 0 1
18812: PPUSH
18813: LD_INT 5
18815: PPUSH
18816: CALL_OW 235
18820: GO 18805
18822: POP
18823: POP
// wait ( 0 0$3 ) ;
18824: LD_INT 105
18826: PPUSH
18827: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
18831: LD_INT 5
18833: PPUSH
18834: LD_INT 2
18836: PPUSH
18837: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
18841: LD_EXP 39
18845: PPUSH
18846: CALL_OW 87
// DialogueOn ;
18850: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-1 ) ;
18854: LD_EXP 39
18858: PPUSH
18859: LD_STRING DOm-Veh-1
18861: PPUSH
18862: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
18866: LD_EXP 39
18870: PPUSH
18871: LD_STRING DOm-Veh-2
18873: PPUSH
18874: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
18878: LD_EXP 39
18882: PPUSH
18883: LD_STRING DOm-Veh-3
18885: PPUSH
18886: CALL_OW 94
// if mortarConstructed then
18890: LD_EXP 15
18894: IFFALSE 18908
// SayRadio ( Omar , DOm-Veh-4 ) ;
18896: LD_EXP 39
18900: PPUSH
18901: LD_STRING DOm-Veh-4
18903: PPUSH
18904: CALL_OW 94
// Say ( Heike , DH-Veh-5 ) ;
18908: LD_EXP 29
18912: PPUSH
18913: LD_STRING DH-Veh-5
18915: PPUSH
18916: CALL_OW 88
// if IsOk ( Kurt ) then
18920: LD_EXP 40
18924: PPUSH
18925: CALL_OW 302
18929: IFFALSE 18979
// begin Say ( Kurt , DKs-Veh-6 ) ;
18931: LD_EXP 40
18935: PPUSH
18936: LD_STRING DKs-Veh-6
18938: PPUSH
18939: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
18943: LD_EXP 40
18947: PPUSH
18948: LD_STRING DKs-Veh-7
18950: PPUSH
18951: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
18955: LD_EXP 30
18959: PPUSH
18960: LD_STRING DG-Veh-8
18962: PPUSH
18963: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
18967: LD_EXP 31
18971: PPUSH
18972: LD_STRING DM-Veh-9
18974: PPUSH
18975: CALL_OW 88
// end ; DialogueOff ;
18979: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
18983: LD_STRING M4
18985: PPUSH
18986: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
18990: LD_EXP 39
18994: PPUSH
18995: LD_INT 341
18997: PPUSH
18998: LD_INT 232
19000: PPUSH
19001: CALL_OW 428
19005: PPUSH
19006: CALL_OW 120
// omarArrived := true ;
19010: LD_ADDR_EXP 6
19014: PUSH
19015: LD_INT 1
19017: ST_TO_ADDR
// omarScriptBase := true ;
19018: LD_ADDR_EXP 10
19022: PUSH
19023: LD_INT 1
19025: ST_TO_ADDR
// omarWantVehicles := true ;
19026: LD_ADDR_EXP 18
19030: PUSH
19031: LD_INT 1
19033: ST_TO_ADDR
// end ;
19034: PPOPN 1
19036: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
19037: LD_EXP 42
19041: PPUSH
19042: CALL_OW 302
19046: PUSH
19047: LD_EXP 12
19051: AND
19052: PUSH
19053: LD_EXP 6
19057: AND
19058: IFFALSE 19155
19060: GO 19062
19062: DISABLE
// begin CenterNowOnUnits ( Rolf ) ;
19063: LD_EXP 42
19067: PPUSH
19068: CALL_OW 87
// DialogueOn ;
19072: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
19076: LD_EXP 42
19080: PPUSH
19081: LD_STRING DRf-Veh-10
19083: PPUSH
19084: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
19088: LD_EXP 42
19092: PPUSH
19093: LD_STRING DRf-Veh-11
19095: PPUSH
19096: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
19100: LD_EXP 29
19104: PPUSH
19105: LD_STRING DH-Veh-12
19107: PPUSH
19108: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
19112: LD_EXP 29
19116: PPUSH
19117: LD_STRING DH-Veh-13
19119: PPUSH
19120: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
19124: LD_EXP 42
19128: PPUSH
19129: LD_STRING DRf-Veh-14
19131: PPUSH
19132: CALL_OW 88
// DialogueOff ;
19136: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
19140: LD_STRING M5
19142: PPUSH
19143: CALL_OW 337
// rolfWantVehicles := true ;
19147: LD_ADDR_EXP 17
19151: PUSH
19152: LD_INT 1
19154: ST_TO_ADDR
// end ;
19155: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
19156: LD_EXP 18
19160: IFFALSE 19852
19162: GO 19164
19164: DISABLE
19165: LD_INT 0
19167: PPUSH
19168: PPUSH
19169: PPUSH
19170: PPUSH
19171: PPUSH
19172: PPUSH
// begin wait ( 0 0$3 ) ;
19173: LD_INT 105
19175: PPUSH
19176: CALL_OW 67
// Hint ( OmarVehicles ) ;
19180: LD_STRING OmarVehicles
19182: PPUSH
19183: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
19187: LD_INT 16
19189: PPUSH
19190: LD_INT 1
19192: PPUSH
19193: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
19197: LD_INT 35
19199: PPUSH
19200: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
19204: LD_ADDR_EXP 20
19208: PUSH
19209: LD_EXP 20
19213: PUSH
19214: LD_INT 35
19216: MINUS
19217: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
19218: LD_EXP 20
19222: PUSH
19223: LD_INT 0
19225: LESSEQUAL
19226: IFFALSE 19326
// begin display_strings := [ ] ;
19228: LD_ADDR_OWVAR 47
19232: PUSH
19233: EMPTY
19234: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
19235: LD_STRING M4a
19237: PPUSH
19238: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
19242: LD_INT 16
19244: PPUSH
19245: LD_INT 0
19247: PPUSH
19248: CALL_OW 424
// DialogueOn ;
19252: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
19256: LD_EXP 39
19260: PPUSH
19261: LD_STRING DOm-Veh-b-15
19263: PPUSH
19264: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
19268: LD_EXP 29
19272: PPUSH
19273: LD_STRING DH-Veh-b-16
19275: PPUSH
19276: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
19280: LD_EXP 39
19284: PPUSH
19285: LD_STRING DOm-Veh-b-17
19287: PPUSH
19288: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
19292: LD_EXP 34
19296: PPUSH
19297: LD_STRING DK-Veh-b-18
19299: PPUSH
19300: CALL_OW 88
// DialogueOff ;
19304: CALL_OW 7
// omarAttack := true ;
19308: LD_ADDR_EXP 23
19312: PUSH
19313: LD_INT 1
19315: ST_TO_ADDR
// omarScriptBase := false ;
19316: LD_ADDR_EXP 10
19320: PUSH
19321: LD_INT 0
19323: ST_TO_ADDR
// exit ;
19324: GO 19852
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
19326: LD_EXP 21
19330: PUSH
19331: LD_INT 16
19333: PPUSH
19334: LD_INT 22
19336: PUSH
19337: LD_INT 2
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 21
19346: PUSH
19347: LD_INT 2
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 33
19356: PUSH
19357: LD_INT 1
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 58
19366: PUSH
19367: EMPTY
19368: LIST
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: PPUSH
19376: CALL_OW 70
19380: LESSEQUAL
19381: IFFALSE 19197
// omarWaitingForVehiclesTimer := 0 0$00 ;
19383: LD_ADDR_EXP 20
19387: PUSH
19388: LD_INT 0
19390: ST_TO_ADDR
// display_strings := [ ] ;
19391: LD_ADDR_OWVAR 47
19395: PUSH
19396: EMPTY
19397: ST_TO_ADDR
// DialogueOn ;
19398: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
19402: LD_EXP 39
19406: PPUSH
19407: LD_STRING DOm-Veh-a-15
19409: PPUSH
19410: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
19414: LD_EXP 34
19418: PPUSH
19419: LD_STRING DK-Veh-a-16
19421: PPUSH
19422: CALL_OW 88
// DialogueOff ;
19426: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
19430: LD_STRING M4a
19432: PPUSH
19433: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
19437: LD_INT 16
19439: PPUSH
19440: LD_INT 0
19442: PPUSH
19443: CALL_OW 424
// omarHasVehicles := true ;
19447: LD_ADDR_EXP 22
19451: PUSH
19452: LD_INT 1
19454: ST_TO_ADDR
// omarAttack := true ;
19455: LD_ADDR_EXP 23
19459: PUSH
19460: LD_INT 1
19462: ST_TO_ADDR
// omarScriptBase := false ;
19463: LD_ADDR_EXP 10
19467: PUSH
19468: LD_INT 0
19470: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
19471: LD_ADDR_VAR 0 2
19475: PUSH
19476: LD_INT 16
19478: PPUSH
19479: LD_INT 22
19481: PUSH
19482: LD_INT 2
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 21
19491: PUSH
19492: LD_INT 2
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 33
19501: PUSH
19502: LD_INT 1
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 58
19511: PUSH
19512: EMPTY
19513: LIST
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: PPUSH
19521: CALL_OW 70
19525: ST_TO_ADDR
// for i in tmp do
19526: LD_ADDR_VAR 0 1
19530: PUSH
19531: LD_VAR 0 2
19535: PUSH
19536: FOR_IN
19537: IFFALSE 19565
// begin SetFuel ( i , 100 ) ;
19539: LD_VAR 0 1
19543: PPUSH
19544: LD_INT 100
19546: PPUSH
19547: CALL_OW 240
// SetSide ( i , 5 ) ;
19551: LD_VAR 0 1
19555: PPUSH
19556: LD_INT 5
19558: PPUSH
19559: CALL_OW 235
// end ;
19563: GO 19536
19565: POP
19566: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
19567: LD_ADDR_VAR 0 3
19571: PUSH
19572: LD_EXP 47
19576: PPUSH
19577: LD_INT 25
19579: PUSH
19580: LD_INT 2
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PPUSH
19587: CALL_OW 72
19591: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
19592: LD_ADDR_VAR 0 4
19596: PUSH
19597: LD_EXP 47
19601: PPUSH
19602: LD_INT 3
19604: PUSH
19605: LD_INT 55
19607: PUSH
19608: EMPTY
19609: LIST
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: LD_INT 25
19617: PUSH
19618: LD_INT 3
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PPUSH
19629: CALL_OW 72
19633: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
19634: LD_ADDR_VAR 0 5
19638: PUSH
19639: LD_INT 324
19641: PPUSH
19642: LD_INT 234
19644: PPUSH
19645: CALL_OW 428
19649: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
19650: LD_ADDR_VAR 0 6
19654: PUSH
19655: LD_INT 334
19657: PPUSH
19658: LD_INT 241
19660: PPUSH
19661: CALL_OW 428
19665: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
19666: LD_VAR 0 6
19670: PPUSH
19671: CALL_OW 313
19675: PPUSH
19676: CALL_OW 122
// if eng then
19680: LD_VAR 0 3
19684: IFFALSE 19792
// begin if eng + mech <= tmp then
19686: LD_VAR 0 3
19690: PUSH
19691: LD_VAR 0 4
19695: PLUS
19696: PUSH
19697: LD_VAR 0 2
19701: LESSEQUAL
19702: IFFALSE 19757
// begin ComEnterUnit ( eng , workshop ) ;
19704: LD_VAR 0 3
19708: PPUSH
19709: LD_VAR 0 5
19713: PPUSH
19714: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
19718: LD_VAR 0 3
19722: PPUSH
19723: LD_INT 3
19725: PPUSH
19726: CALL_OW 183
// AddComExitBuilding ( eng ) ;
19730: LD_VAR 0 3
19734: PPUSH
19735: CALL_OW 182
// mech := mech union eng ;
19739: LD_ADDR_VAR 0 4
19743: PUSH
19744: LD_VAR 0 4
19748: PUSH
19749: LD_VAR 0 3
19753: UNION
19754: ST_TO_ADDR
// end else
19755: GO 19792
// begin ComEnterUnit ( eng , armoury ) ;
19757: LD_VAR 0 3
19761: PPUSH
19762: LD_VAR 0 6
19766: PPUSH
19767: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
19771: LD_VAR 0 3
19775: PPUSH
19776: LD_INT 1
19778: PPUSH
19779: CALL_OW 183
// AddComExitBuilding ( eng ) ;
19783: LD_VAR 0 3
19787: PPUSH
19788: CALL_OW 182
// end ; end ; for i := 1 to tmp do
19792: LD_ADDR_VAR 0 1
19796: PUSH
19797: DOUBLE
19798: LD_INT 1
19800: DEC
19801: ST_TO_ADDR
19802: LD_VAR 0 2
19806: PUSH
19807: FOR_TO
19808: IFFALSE 19850
// if i <= mech then
19810: LD_VAR 0 1
19814: PUSH
19815: LD_VAR 0 4
19819: LESSEQUAL
19820: IFFALSE 19848
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
19822: LD_VAR 0 4
19826: PUSH
19827: LD_VAR 0 1
19831: ARRAY
19832: PPUSH
19833: LD_VAR 0 2
19837: PUSH
19838: LD_VAR 0 1
19842: ARRAY
19843: PPUSH
19844: CALL_OW 180
19848: GO 19807
19850: POP
19851: POP
// end ;
19852: PPOPN 6
19854: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i ;
19855: LD_EXP 42
19859: PPUSH
19860: CALL_OW 302
19864: PUSH
19865: LD_EXP 17
19869: AND
19870: IFFALSE 20326
19872: GO 19874
19874: DISABLE
19875: LD_INT 0
19877: PPUSH
// begin repeat wait ( 0 0$1 ) ;
19878: LD_INT 35
19880: PPUSH
19881: CALL_OW 67
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
19885: LD_ADDR_EXP 19
19889: PUSH
19890: LD_EXP 19
19894: PUSH
19895: LD_INT 35
19897: MINUS
19898: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 or omarAttack then
19899: LD_EXP 19
19903: PUSH
19904: LD_INT 0
19906: LESSEQUAL
19907: PUSH
19908: LD_EXP 23
19912: OR
19913: IFFALSE 20131
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
19915: LD_ADDR_EXP 19
19919: PUSH
19920: LD_INT 0
19922: ST_TO_ADDR
// display_strings := [ ] ;
19923: LD_ADDR_OWVAR 47
19927: PUSH
19928: EMPTY
19929: ST_TO_ADDR
// DialogueOn ;
19930: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
19934: LD_EXP 42
19938: PPUSH
19939: LD_STRING DRf-Veh-b-19
19941: PPUSH
19942: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
19946: LD_EXP 42
19950: PPUSH
19951: LD_STRING DRf-Veh-b-20
19953: PPUSH
19954: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
19958: LD_EXP 29
19962: PPUSH
19963: LD_STRING DH-Veh-b-21
19965: PPUSH
19966: CALL_OW 88
// if IsOk ( Givi ) then
19970: LD_EXP 30
19974: PPUSH
19975: CALL_OW 302
19979: IFFALSE 20017
// begin Say ( Givi , DG-Veh-b-22 ) ;
19981: LD_EXP 30
19985: PPUSH
19986: LD_STRING DG-Veh-b-22
19988: PPUSH
19989: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
19993: LD_EXP 29
19997: PPUSH
19998: LD_STRING DH-Veh-b-23
20000: PPUSH
20001: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
20005: LD_EXP 30
20009: PPUSH
20010: LD_STRING DG-Veh-b-24
20012: PPUSH
20013: CALL_OW 88
// end ; DialogueOff ;
20017: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
20021: LD_STRING M5a
20023: PPUSH
20024: CALL_OW 337
// for i in rolfSquad do
20028: LD_ADDR_VAR 0 1
20032: PUSH
20033: LD_EXP 46
20037: PUSH
20038: FOR_IN
20039: IFFALSE 20105
// begin SetSide ( i , 8 ) ;
20041: LD_VAR 0 1
20045: PPUSH
20046: LD_INT 8
20048: PPUSH
20049: CALL_OW 235
// if IsDriver ( i ) then
20053: LD_VAR 0 1
20057: PPUSH
20058: CALL 58975 0 1
20062: IFFALSE 20083
// SetSide ( IsInUnit ( i ) , 8 ) else
20064: LD_VAR 0 1
20068: PPUSH
20069: CALL_OW 310
20073: PPUSH
20074: LD_INT 8
20076: PPUSH
20077: CALL_OW 235
20081: GO 20103
// if IsInUnit ( i ) then
20083: LD_VAR 0 1
20087: PPUSH
20088: CALL_OW 310
20092: IFFALSE 20103
// ComExitBuilding ( i ) ;
20094: LD_VAR 0 1
20098: PPUSH
20099: CALL_OW 122
// end ;
20103: GO 20038
20105: POP
20106: POP
// wait ( 0 0$1 ) ;
20107: LD_INT 35
20109: PPUSH
20110: CALL_OW 67
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
20114: LD_EXP 46
20118: PPUSH
20119: LD_INT 229
20121: PPUSH
20122: LD_INT 154
20124: PPUSH
20125: CALL_OW 114
// exit ;
20129: GO 20326
// end ; if IsDead ( Rolf ) then
20131: LD_EXP 42
20135: PPUSH
20136: CALL_OW 301
20140: IFFALSE 20151
// begin ChangeMissionObjectives ( M5a ) ;
20142: LD_STRING M5a
20144: PPUSH
20145: CALL_OW 337
// exit ;
20149: GO 20326
// end ; until UnitFilter ( rolfSquad , [ f_driving ] ) + 0 = rolfSquad + 0 ;
20151: LD_EXP 46
20155: PPUSH
20156: LD_INT 55
20158: PUSH
20159: EMPTY
20160: LIST
20161: PPUSH
20162: CALL_OW 72
20166: PUSH
20167: LD_INT 0
20169: PLUS
20170: PUSH
20171: LD_EXP 46
20175: PUSH
20176: LD_INT 0
20178: PLUS
20179: EQUAL
20180: IFFALSE 19878
// rolfWaitingForVehiclesTimer := 0 0$00 ;
20182: LD_ADDR_EXP 19
20186: PUSH
20187: LD_INT 0
20189: ST_TO_ADDR
// display_strings := [ ] ;
20190: LD_ADDR_OWVAR 47
20194: PUSH
20195: EMPTY
20196: ST_TO_ADDR
// DialogueOn ;
20197: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
20201: LD_EXP 42
20205: PPUSH
20206: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
20210: LD_EXP 42
20214: PPUSH
20215: LD_STRING DRf-Veh-a-17
20217: PPUSH
20218: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
20222: LD_EXP 29
20226: PPUSH
20227: LD_STRING DH-08-Veh-a-18
20229: PPUSH
20230: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
20234: LD_EXP 42
20238: PPUSH
20239: LD_STRING DRf-Veh-a-19
20241: PPUSH
20242: CALL_OW 88
// DialogueOff ;
20246: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
20250: LD_STRING M5a
20252: PPUSH
20253: CALL_OW 337
// rolfHasVehicles := true ;
20257: LD_ADDR_EXP 16
20261: PUSH
20262: LD_INT 1
20264: ST_TO_ADDR
// for i in rolfSquad do
20265: LD_ADDR_VAR 0 1
20269: PUSH
20270: LD_EXP 46
20274: PUSH
20275: FOR_IN
20276: IFFALSE 20309
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
20278: LD_VAR 0 1
20282: PPUSH
20283: CALL_OW 310
20287: PPUSH
20288: LD_INT 8
20290: PPUSH
20291: CALL_OW 235
// SetSide ( i , 8 ) ;
20295: LD_VAR 0 1
20299: PPUSH
20300: LD_INT 8
20302: PPUSH
20303: CALL_OW 235
// end ;
20307: GO 20275
20309: POP
20310: POP
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
20311: LD_EXP 46
20315: PPUSH
20316: LD_INT 229
20318: PPUSH
20319: LD_INT 154
20321: PPUSH
20322: CALL_OW 114
// end ;
20326: PPOPN 1
20328: END
// every 0 0$1 trigger leninSpotted do
20329: LD_EXP 14
20333: IFFALSE 20421
20335: GO 20337
20337: DISABLE
// begin wait ( 0 0$10 ) ;
20338: LD_INT 350
20340: PPUSH
20341: CALL_OW 67
// DialogueOn ;
20345: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
20349: LD_EXP 41
20353: PPUSH
20354: LD_STRING DA-Transmission-1
20356: PPUSH
20357: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
20361: LD_EXP 48
20365: PPUSH
20366: LD_STRING DMzw-Transmission-2
20368: PPUSH
20369: CALL_OW 94
// if gaidarKilled then
20373: LD_EXP 7
20377: IFFALSE 20393
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
20379: LD_EXP 48
20383: PPUSH
20384: LD_STRING DMzw-Transmission-3
20386: PPUSH
20387: CALL_OW 94
20391: GO 20405
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
20393: LD_EXP 48
20397: PPUSH
20398: LD_STRING DMzw-Transmission-a-3
20400: PPUSH
20401: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
20405: LD_EXP 29
20409: PPUSH
20410: LD_STRING DH-Transmission-4
20412: PPUSH
20413: CALL_OW 88
// DialogueOff ;
20417: CALL_OW 7
// end ;
20421: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
20422: LD_INT 22
20424: PUSH
20425: LD_INT 3
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 25
20434: PUSH
20435: LD_INT 9
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 101
20444: PUSH
20445: LD_INT 2
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: LIST
20456: PPUSH
20457: CALL_OW 69
20461: PUSH
20462: LD_EXP 29
20466: PPUSH
20467: CALL_OW 302
20471: AND
20472: IFFALSE 20537
20474: GO 20476
20476: DISABLE
// begin CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
20477: LD_INT 22
20479: PUSH
20480: LD_INT 3
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: LD_INT 25
20489: PUSH
20490: LD_INT 9
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 101
20499: PUSH
20500: LD_INT 2
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: LIST
20511: PPUSH
20512: CALL_OW 69
20516: PUSH
20517: LD_INT 1
20519: ARRAY
20520: PPUSH
20521: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
20525: LD_EXP 29
20529: PPUSH
20530: LD_STRING DH-Rubazooka-1
20532: PPUSH
20533: CALL_OW 88
// end ;
20537: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
20538: LD_INT 19
20540: PPUSH
20541: LD_INT 22
20543: PUSH
20544: LD_INT 3
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: PPUSH
20551: CALL_OW 70
20555: PUSH
20556: LD_EXP 28
20560: AND
20561: IFFALSE 20612
20563: GO 20565
20565: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
20566: LD_INT 19
20568: PPUSH
20569: LD_INT 22
20571: PUSH
20572: LD_INT 3
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PPUSH
20579: CALL_OW 70
20583: PPUSH
20584: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
20588: LD_EXP 29
20592: PPUSH
20593: LD_STRING DH-Ruattfirst-1
20595: PPUSH
20596: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
20600: LD_EXP 29
20604: PPUSH
20605: LD_STRING DH-Ruattfirst-2
20607: PPUSH
20608: CALL_OW 88
// end ;
20612: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
20613: LD_INT 19
20615: PPUSH
20616: LD_INT 22
20618: PUSH
20619: LD_INT 3
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PPUSH
20626: CALL_OW 70
20630: PUSH
20631: LD_EXP 28
20635: NOT
20636: AND
20637: IFFALSE 20676
20639: GO 20641
20641: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
20642: LD_INT 19
20644: PPUSH
20645: LD_INT 22
20647: PUSH
20648: LD_INT 3
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PPUSH
20655: CALL_OW 70
20659: PPUSH
20660: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
20664: LD_EXP 29
20668: PPUSH
20669: LD_STRING DH-Ruattnext-1
20671: PPUSH
20672: CALL_OW 88
// end ;
20676: END
// every 0 0$1 trigger GetResourceType ( GetBase ( arDepot ) , mat_oil ) < 31 and IsOk ( Givi ) do var vehicle , driver , live ;
20677: LD_EXP 43
20681: PPUSH
20682: CALL_OW 274
20686: PPUSH
20687: LD_INT 2
20689: PPUSH
20690: CALL_OW 275
20694: PUSH
20695: LD_INT 31
20697: LESS
20698: PUSH
20699: LD_EXP 30
20703: PPUSH
20704: CALL_OW 302
20708: AND
20709: IFFALSE 21272
20711: GO 20713
20713: DISABLE
20714: LD_INT 0
20716: PPUSH
20717: PPUSH
20718: PPUSH
// begin DialogueOn ;
20719: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
20723: LD_EXP 29
20727: PPUSH
20728: LD_STRING DH-Fuel-1
20730: PPUSH
20731: CALL_OW 88
// Say ( Givi , DG-Fuel-2 ) ;
20735: LD_EXP 30
20739: PPUSH
20740: LD_STRING DG-Fuel-2
20742: PPUSH
20743: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
20747: LD_EXP 30
20751: PPUSH
20752: LD_STRING DG-Fuel-3
20754: PPUSH
20755: CALL_OW 88
// Say ( Givi , DG-Fuel-4 ) ;
20759: LD_EXP 30
20763: PPUSH
20764: LD_STRING DG-Fuel-4
20766: PPUSH
20767: CALL_OW 88
// DialogueOff ;
20771: CALL_OW 7
// Query ( Oil ) ;
20775: LD_STRING Oil
20777: PPUSH
20778: CALL_OW 97
// SetAreaMapShow ( oilArea , 1 ) ;
20782: LD_INT 20
20784: PPUSH
20785: LD_INT 1
20787: PPUSH
20788: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
20792: LD_INT 35
20794: PPUSH
20795: CALL_OW 67
// until FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) ;
20799: LD_INT 20
20801: PPUSH
20802: LD_INT 22
20804: PUSH
20805: LD_INT 2
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: LD_INT 33
20814: PUSH
20815: LD_INT 1
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: LD_INT 2
20824: PUSH
20825: LD_INT 34
20827: PUSH
20828: LD_INT 32
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PUSH
20835: LD_INT 34
20837: PUSH
20838: LD_INT 51
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: LIST
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: LIST
20854: PPUSH
20855: CALL_OW 70
20859: IFFALSE 20792
// SetAreaMapShow ( oilArea , 0 ) ;
20861: LD_INT 20
20863: PPUSH
20864: LD_INT 0
20866: PPUSH
20867: CALL_OW 424
// vehicle := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) [ 1 ] ;
20871: LD_ADDR_VAR 0 1
20875: PUSH
20876: LD_INT 20
20878: PPUSH
20879: LD_INT 22
20881: PUSH
20882: LD_INT 2
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PUSH
20889: LD_INT 33
20891: PUSH
20892: LD_INT 1
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: LD_INT 2
20901: PUSH
20902: LD_INT 34
20904: PUSH
20905: LD_INT 32
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PUSH
20912: LD_INT 34
20914: PUSH
20915: LD_INT 51
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: LIST
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: LIST
20931: PPUSH
20932: CALL_OW 70
20936: PUSH
20937: LD_INT 1
20939: ARRAY
20940: ST_TO_ADDR
// driver := IsDrivenBy ( vehicle ) ;
20941: LD_ADDR_VAR 0 2
20945: PUSH
20946: LD_VAR 0 1
20950: PPUSH
20951: CALL_OW 311
20955: ST_TO_ADDR
// live := GetLives ( vehicle ) ;
20956: LD_ADDR_VAR 0 3
20960: PUSH
20961: LD_VAR 0 1
20965: PPUSH
20966: CALL_OW 256
20970: ST_TO_ADDR
// RemoveUnit ( driver ) ;
20971: LD_VAR 0 2
20975: PPUSH
20976: CALL_OW 64
// RemoveUnit ( vehicle ) ;
20980: LD_VAR 0 1
20984: PPUSH
20985: CALL_OW 64
// wait ( rand ( 3 3$30 , 5 5$00 ) ) ;
20989: LD_INT 7350
20991: PPUSH
20992: LD_INT 10500
20994: PPUSH
20995: CALL_OW 12
20999: PPUSH
21000: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21004: LD_INT 35
21006: PPUSH
21007: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
21011: LD_INT 22
21013: PUSH
21014: LD_INT 3
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: LD_INT 92
21023: PUSH
21024: LD_INT 261
21026: PUSH
21027: LD_INT 71
21029: PUSH
21030: LD_INT 12
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PPUSH
21043: CALL_OW 69
21047: NOT
21048: PUSH
21049: LD_INT 277
21051: PPUSH
21052: LD_INT 80
21054: PPUSH
21055: CALL_OW 428
21059: NOT
21060: AND
21061: IFFALSE 21004
// uc_nation := GetNation ( vehicle ) ;
21063: LD_ADDR_OWVAR 21
21067: PUSH
21068: LD_VAR 0 1
21072: PPUSH
21073: CALL_OW 248
21077: ST_TO_ADDR
// uc_side := 2 ;
21078: LD_ADDR_OWVAR 20
21082: PUSH
21083: LD_INT 2
21085: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( vehicle ) , GetEngine ( vehicle ) , GetControl ( vehicle ) , GetWeapon ( vehicle ) , 66 ) ;
21086: LD_VAR 0 1
21090: PPUSH
21091: CALL_OW 265
21095: PPUSH
21096: LD_VAR 0 1
21100: PPUSH
21101: CALL_OW 262
21105: PPUSH
21106: LD_VAR 0 1
21110: PPUSH
21111: CALL_OW 263
21115: PPUSH
21116: LD_VAR 0 1
21120: PPUSH
21121: CALL_OW 264
21125: PPUSH
21126: LD_INT 66
21128: PPUSH
21129: CALL 29495 0 5
// vehicle := CreateVehicle ;
21133: LD_ADDR_VAR 0 1
21137: PUSH
21138: CALL_OW 45
21142: ST_TO_ADDR
// PlaceUnitXYD ( vehicle , 277 , 80 , 4 , false ) ;
21143: LD_VAR 0 1
21147: PPUSH
21148: LD_INT 277
21150: PPUSH
21151: LD_INT 80
21153: PPUSH
21154: LD_INT 4
21156: PPUSH
21157: LD_INT 0
21159: PPUSH
21160: CALL 63300 0 5
// PlaceHumanInUnit ( driver , vehicle ) ;
21164: LD_VAR 0 2
21168: PPUSH
21169: LD_VAR 0 1
21173: PPUSH
21174: CALL_OW 52
// SetLives ( vehicle , live ) ;
21178: LD_VAR 0 1
21182: PPUSH
21183: LD_VAR 0 3
21187: PPUSH
21188: CALL_OW 234
// if Prob ( [ 70 , 60 , 50 ] [ Difficulty ] ) then
21192: LD_INT 70
21194: PUSH
21195: LD_INT 60
21197: PUSH
21198: LD_INT 50
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: LIST
21205: PUSH
21206: LD_OWVAR 67
21210: ARRAY
21211: PPUSH
21212: CALL_OW 13
21216: IFFALSE 21235
// SetCargo ( vehicle , mat_oil , 100 ) else
21218: LD_VAR 0 1
21222: PPUSH
21223: LD_INT 2
21225: PPUSH
21226: LD_INT 100
21228: PPUSH
21229: CALL_OW 290
21233: GO 21257
// if live > 333 then
21235: LD_VAR 0 3
21239: PUSH
21240: LD_INT 333
21242: GREATER
21243: IFFALSE 21257
// SetLives ( vehicle , 333 ) ;
21245: LD_VAR 0 1
21249: PPUSH
21250: LD_INT 333
21252: PPUSH
21253: CALL_OW 234
// ComMoveXY ( vehicle , 250 , 119 ) ;
21257: LD_VAR 0 1
21261: PPUSH
21262: LD_INT 250
21264: PPUSH
21265: LD_INT 119
21267: PPUSH
21268: CALL_OW 111
// end ;
21272: PPOPN 3
21274: END
// every 0 0$1 trigger leninSpotted and omarAttack do
21275: LD_EXP 14
21279: PUSH
21280: LD_EXP 23
21284: AND
21285: IFFALSE 21585
21287: GO 21289
21289: DISABLE
// begin wait ( 0 0$45 ) ;
21290: LD_INT 1575
21292: PPUSH
21293: CALL_OW 67
// DialogueOn ;
21297: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
21301: LD_EXP 37
21305: PPUSH
21306: LD_STRING DShar-End-1
21308: PPUSH
21309: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
21313: LD_EXP 29
21317: PPUSH
21318: LD_STRING DH-End-2
21320: PPUSH
21321: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
21325: LD_EXP 37
21329: PPUSH
21330: LD_STRING DShar-End-3
21332: PPUSH
21333: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
21337: LD_EXP 29
21341: PPUSH
21342: LD_STRING DH-End-4
21344: PPUSH
21345: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
21349: LD_EXP 37
21353: PPUSH
21354: LD_STRING DShar-End-5
21356: PPUSH
21357: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
21361: LD_EXP 37
21365: PPUSH
21366: LD_STRING DShar-End-6
21368: PPUSH
21369: CALL_OW 94
// dwait ( 0 0$2 ) ;
21373: LD_INT 70
21375: PPUSH
21376: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
21380: LD_EXP 29
21384: PPUSH
21385: LD_STRING DH-End-7
21387: PPUSH
21388: CALL_OW 88
// DialogueOff ;
21392: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
21396: LD_STRING M6
21398: PPUSH
21399: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
21403: LD_INT 17
21405: PPUSH
21406: LD_INT 1
21408: PPUSH
21409: CALL_OW 424
// escapeAllowed := true ;
21413: LD_ADDR_EXP 24
21417: PUSH
21418: LD_INT 1
21420: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21421: LD_INT 35
21423: PPUSH
21424: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
21428: LD_EXP 40
21432: PPUSH
21433: LD_STRING DKs-End-8
21435: PPUSH
21436: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
21440: LD_EXP 34
21444: PPUSH
21445: LD_STRING DK-End-10
21447: PPUSH
21448: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
21452: LD_EXP 40
21456: PPUSH
21457: LD_STRING DKs-End-9
21459: PPUSH
21460: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
21464: LD_EXP 36
21468: PPUSH
21469: LD_STRING DMar-End-11
21471: PPUSH
21472: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
21476: LD_STRING 05_DrugsTested
21478: PPUSH
21479: LD_EXP 1
21483: PPUSH
21484: CALL_OW 30
21488: IFFALSE 21502
// Say ( Mike , DM-End-12 ) ;
21490: LD_EXP 31
21494: PPUSH
21495: LD_STRING DM-End-12
21497: PPUSH
21498: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
21502: LD_EXP 38
21506: PPUSH
21507: LD_STRING DO-End-13
21509: PPUSH
21510: CALL_OW 88
// if IsOk ( Sophia ) then
21514: LD_EXP 35
21518: PPUSH
21519: CALL_OW 302
21523: IFFALSE 21549
// begin Say ( Sophia , DS-End-15 ) ;
21525: LD_EXP 35
21529: PPUSH
21530: LD_STRING DS-End-15
21532: PPUSH
21533: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
21537: LD_EXP 34
21541: PPUSH
21542: LD_STRING DK-End-16
21544: PPUSH
21545: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
21549: LD_EXP 30
21553: PPUSH
21554: LD_STRING DG-End-17
21556: PPUSH
21557: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
21561: LD_EXP 30
21565: PPUSH
21566: LD_STRING DG-End-18
21568: PPUSH
21569: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
21573: LD_EXP 30
21577: PPUSH
21578: LD_STRING DG-End-19
21580: PPUSH
21581: CALL_OW 88
// end ;
21585: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
21586: LD_EXP 24
21590: IFFALSE 21718
21592: GO 21594
21594: DISABLE
21595: LD_INT 0
21597: PPUSH
21598: PPUSH
// begin enable ;
21599: ENABLE
// display_strings := [ #X106-2 , escapeTimer ] ;
21600: LD_ADDR_OWVAR 47
21604: PUSH
21605: LD_STRING #X106-2
21607: PUSH
21608: LD_EXP 25
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
21617: LD_ADDR_EXP 25
21621: PUSH
21622: LD_EXP 25
21626: PUSH
21627: LD_INT 35
21629: MINUS
21630: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
21631: LD_ADDR_VAR 0 2
21635: PUSH
21636: LD_INT 17
21638: PPUSH
21639: LD_INT 22
21641: PUSH
21642: LD_INT 2
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 21
21651: PUSH
21652: LD_INT 1
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 23
21661: PUSH
21662: LD_INT 2
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: LIST
21673: PPUSH
21674: CALL_OW 71
21678: ST_TO_ADDR
// if not outsiders then
21679: LD_VAR 0 2
21683: NOT
21684: IFFALSE 21701
// begin escapeAllowed := false ;
21686: LD_ADDR_EXP 24
21690: PUSH
21691: LD_INT 0
21693: ST_TO_ADDR
// disable ;
21694: DISABLE
// MissionWin ;
21695: CALL 21721 0 0
// exit ;
21699: GO 21718
// end ; if escapeTimer <= 0 0$00 then
21701: LD_EXP 25
21705: PUSH
21706: LD_INT 0
21708: LESSEQUAL
21709: IFFALSE 21718
// YouLost ( TimeOut ) ;
21711: LD_STRING TimeOut
21713: PPUSH
21714: CALL_OW 104
// end ;
21718: PPOPN 2
21720: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
21721: LD_INT 0
21723: PPUSH
21724: PPUSH
21725: PPUSH
21726: PPUSH
21727: PPUSH
// Say ( Heike , DH-End-20 ) ;
21728: LD_EXP 29
21732: PPUSH
21733: LD_STRING DH-End-20
21735: PPUSH
21736: CALL_OW 88
// if rolfDied then
21740: LD_EXP 13
21744: IFFALSE 21759
// AddMedal ( med1 , - 1 ) else
21746: LD_STRING med1
21748: PPUSH
21749: LD_INT 1
21751: NEG
21752: PPUSH
21753: CALL_OW 101
21757: GO 21769
// AddMedal ( med1 , 1 ) ;
21759: LD_STRING med1
21761: PPUSH
21762: LD_INT 1
21764: PPUSH
21765: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
21769: LD_EXP 22
21773: PUSH
21774: LD_EXP 16
21778: AND
21779: IFFALSE 21793
// AddMedal ( med2 , 1 ) else
21781: LD_STRING med2
21783: PPUSH
21784: LD_INT 1
21786: PPUSH
21787: CALL_OW 101
21791: GO 21842
// if omarHasVehicles then
21793: LD_EXP 22
21797: IFFALSE 21812
// AddMedal ( med2 , - 1 ) else
21799: LD_STRING med2
21801: PPUSH
21802: LD_INT 1
21804: NEG
21805: PPUSH
21806: CALL_OW 101
21810: GO 21842
// if rolfHasVehicles then
21812: LD_EXP 16
21816: IFFALSE 21831
// AddMedal ( med2 , - 2 ) else
21818: LD_STRING med2
21820: PPUSH
21821: LD_INT 2
21823: NEG
21824: PPUSH
21825: CALL_OW 101
21829: GO 21842
// AddMedal ( med2 , - 3 ) ;
21831: LD_STRING med2
21833: PPUSH
21834: LD_INT 3
21836: NEG
21837: PPUSH
21838: CALL_OW 101
// if ruLoseCounter >= [ 40 , 55 , 70 ] [ Difficulty ] and heikeLoseCounter = 0 then
21842: LD_EXP 5
21846: PUSH
21847: LD_INT 40
21849: PUSH
21850: LD_INT 55
21852: PUSH
21853: LD_INT 70
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: LIST
21860: PUSH
21861: LD_OWVAR 67
21865: ARRAY
21866: GREATEREQUAL
21867: PUSH
21868: LD_EXP 26
21872: PUSH
21873: LD_INT 0
21875: EQUAL
21876: AND
21877: IFFALSE 21891
// AddMedal ( med3 , 1 ) else
21879: LD_STRING med3
21881: PPUSH
21882: LD_INT 1
21884: PPUSH
21885: CALL_OW 101
21889: GO 21921
// if heikeLoseCounter then
21891: LD_EXP 26
21895: IFFALSE 21910
// AddMedal ( med3 , - 1 ) else
21897: LD_STRING med3
21899: PPUSH
21900: LD_INT 1
21902: NEG
21903: PPUSH
21904: CALL_OW 101
21908: GO 21921
// AddMedal ( med3 , - 2 ) ;
21910: LD_STRING med3
21912: PPUSH
21913: LD_INT 2
21915: NEG
21916: PPUSH
21917: CALL_OW 101
// GiveMedals ( MAIN ) ;
21921: LD_STRING MAIN
21923: PPUSH
21924: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
21928: LD_INT 22
21930: PUSH
21931: LD_INT 2
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 23
21940: PUSH
21941: LD_INT 2
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 21
21950: PUSH
21951: LD_INT 1
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: LIST
21962: PPUSH
21963: CALL_OW 69
21967: PPUSH
21968: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
21972: LD_EXP 29
21976: PPUSH
21977: LD_STRING 06_Heike
21979: PPUSH
21980: CALL_OW 38
// if Aviradze then
21984: LD_EXP 41
21988: IFFALSE 22002
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
21990: LD_EXP 41
21994: PPUSH
21995: LD_STRING 06_Aviradze
21997: PPUSH
21998: CALL_OW 38
// if Ibrahim then
22002: LD_EXP 32
22006: IFFALSE 22020
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
22008: LD_EXP 32
22012: PPUSH
22013: LD_STRING 06_Ibrahim
22015: PPUSH
22016: CALL_OW 38
// if Kamil then
22020: LD_EXP 33
22024: IFFALSE 22038
// SaveCharacters ( Kamil , 06_Kamil ) ;
22026: LD_EXP 33
22030: PPUSH
22031: LD_STRING 06_Kamil
22033: PPUSH
22034: CALL_OW 38
// if Sophia then
22038: LD_EXP 35
22042: IFFALSE 22056
// SaveCharacters ( Sophia , 06_Sophia ) ;
22044: LD_EXP 35
22048: PPUSH
22049: LD_STRING 06_Sophia
22051: PPUSH
22052: CALL_OW 38
// if Kaia then
22056: LD_EXP 34
22060: IFFALSE 22074
// SaveCharacters ( Kaia , 06_Kaia ) ;
22062: LD_EXP 34
22066: PPUSH
22067: LD_STRING 06_Kaia
22069: PPUSH
22070: CALL_OW 38
// if Givi then
22074: LD_EXP 30
22078: IFFALSE 22092
// SaveCharacters ( Givi , 06_Givi ) ;
22080: LD_EXP 30
22084: PPUSH
22085: LD_STRING 06_Givi
22087: PPUSH
22088: CALL_OW 38
// if Mike then
22092: LD_EXP 31
22096: IFFALSE 22110
// SaveCharacters ( Mike , 06_Mike ) ;
22098: LD_EXP 31
22102: PPUSH
22103: LD_STRING 06_Mike
22105: PPUSH
22106: CALL_OW 38
// if Markov then
22110: LD_EXP 36
22114: IFFALSE 22128
// SaveCharacters ( Markov , 06_Markov ) ;
22116: LD_EXP 36
22120: PPUSH
22121: LD_STRING 06_Markov
22123: PPUSH
22124: CALL_OW 38
// if Kurt then
22128: LD_EXP 40
22132: IFFALSE 22146
// SaveCharacters ( Kurt , 06_Kurt ) ;
22134: LD_EXP 40
22138: PPUSH
22139: LD_STRING 06_Kurt
22141: PPUSH
22142: CALL_OW 38
// if heikeSecondSquad then
22146: LD_EXP 44
22150: IFFALSE 22164
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
22152: LD_EXP 44
22156: PPUSH
22157: LD_STRING 06_others
22159: PPUSH
22160: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
22164: LD_ADDR_VAR 0 3
22168: PUSH
22169: LD_INT 22
22171: PUSH
22172: LD_INT 2
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 23
22181: PUSH
22182: LD_INT 0
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PPUSH
22193: CALL_OW 69
22197: ST_TO_ADDR
// if tmp then
22198: LD_VAR 0 3
22202: IFFALSE 22216
// SaveCharacters ( tmp , 06_apes ) ;
22204: LD_VAR 0 3
22208: PPUSH
22209: LD_STRING 06_apes
22211: PPUSH
22212: CALL_OW 38
// if Rolf then
22216: LD_EXP 42
22220: IFFALSE 22271
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
22222: LD_EXP 42
22226: PPUSH
22227: LD_STRING 06_Rolf
22229: PPUSH
22230: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
22234: LD_STRING enableBioCharacter(BIO_ROLF)
22236: PPUSH
22237: CALL_OW 559
// if rolfSquad diff Rolf then
22241: LD_EXP 46
22245: PUSH
22246: LD_EXP 42
22250: DIFF
22251: IFFALSE 22271
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
22253: LD_EXP 46
22257: PUSH
22258: LD_EXP 42
22262: DIFF
22263: PPUSH
22264: LD_STRING 06_RolfSquad
22266: PPUSH
22267: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
22271: LD_ADDR_VAR 0 3
22275: PUSH
22276: LD_INT 17
22278: PPUSH
22279: LD_INT 21
22281: PUSH
22282: LD_INT 2
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PPUSH
22289: CALL_OW 70
22293: ST_TO_ADDR
// if tmp then
22294: LD_VAR 0 3
22298: IFFALSE 22592
// begin tmp2 := [ ] ;
22300: LD_ADDR_VAR 0 4
22304: PUSH
22305: EMPTY
22306: ST_TO_ADDR
// for i in tmp do
22307: LD_ADDR_VAR 0 2
22311: PUSH
22312: LD_VAR 0 3
22316: PUSH
22317: FOR_IN
22318: IFFALSE 22578
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
22320: LD_VAR 0 2
22324: PPUSH
22325: CALL_OW 264
22329: PUSH
22330: LD_INT 32
22332: PUSH
22333: LD_INT 12
22335: PUSH
22336: LD_INT 51
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: LIST
22343: IN
22344: IFFALSE 22481
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
22346: LD_ADDR_VAR 0 5
22350: PUSH
22351: LD_VAR 0 2
22355: PPUSH
22356: LD_INT 1
22358: PPUSH
22359: CALL_OW 289
22363: PUSH
22364: LD_VAR 0 2
22368: PPUSH
22369: LD_INT 2
22371: PPUSH
22372: CALL_OW 289
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
22381: LD_ADDR_VAR 0 4
22385: PUSH
22386: LD_VAR 0 4
22390: PPUSH
22391: LD_VAR 0 4
22395: PUSH
22396: LD_INT 1
22398: PLUS
22399: PPUSH
22400: LD_VAR 0 2
22404: PPUSH
22405: CALL_OW 265
22409: PUSH
22410: LD_VAR 0 2
22414: PPUSH
22415: CALL_OW 262
22419: PUSH
22420: LD_VAR 0 2
22424: PPUSH
22425: CALL_OW 263
22429: PUSH
22430: LD_VAR 0 2
22434: PPUSH
22435: CALL_OW 264
22439: PUSH
22440: LD_VAR 0 2
22444: PPUSH
22445: CALL_OW 248
22449: PUSH
22450: LD_VAR 0 2
22454: PPUSH
22455: CALL_OW 256
22459: PUSH
22460: LD_VAR 0 5
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: PPUSH
22474: CALL_OW 1
22478: ST_TO_ADDR
// end else
22479: GO 22576
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
22481: LD_ADDR_VAR 0 4
22485: PUSH
22486: LD_VAR 0 4
22490: PPUSH
22491: LD_VAR 0 4
22495: PUSH
22496: LD_INT 1
22498: PLUS
22499: PPUSH
22500: LD_VAR 0 2
22504: PPUSH
22505: CALL_OW 265
22509: PUSH
22510: LD_VAR 0 2
22514: PPUSH
22515: CALL_OW 262
22519: PUSH
22520: LD_VAR 0 2
22524: PPUSH
22525: CALL_OW 263
22529: PUSH
22530: LD_VAR 0 2
22534: PPUSH
22535: CALL_OW 264
22539: PUSH
22540: LD_VAR 0 2
22544: PPUSH
22545: CALL_OW 248
22549: PUSH
22550: LD_VAR 0 2
22554: PPUSH
22555: CALL_OW 256
22559: PUSH
22560: EMPTY
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: PPUSH
22571: CALL_OW 1
22575: ST_TO_ADDR
22576: GO 22317
22578: POP
22579: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
22580: LD_VAR 0 4
22584: PPUSH
22585: LD_STRING 06_Vehicles
22587: PPUSH
22588: CALL_OW 39
// end ; YouWin ;
22592: CALL_OW 103
// end ; end_of_file
22596: LD_VAR 0 1
22600: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
22601: LD_INT 0
22603: PPUSH
// begin if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
22604: LD_VAR 0 1
22608: PPUSH
22609: CALL_OW 255
22613: PUSH
22614: LD_INT 2
22616: EQUAL
22617: PUSH
22618: LD_OWVAR 52
22622: AND
22623: PUSH
22624: LD_VAR 0 1
22628: PPUSH
22629: CALL_OW 263
22633: PUSH
22634: LD_INT 1
22636: EQUAL
22637: AND
22638: IFFALSE 22693
// begin driver := IsDrivenBy ( vehicle ) ;
22640: LD_ADDR_VAR 0 3
22644: PUSH
22645: LD_VAR 0 1
22649: PPUSH
22650: CALL_OW 311
22654: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
22655: LD_VAR 0 1
22659: PPUSH
22660: LD_INT 211
22662: PPUSH
22663: LD_INT 101
22665: PPUSH
22666: CALL_OW 111
// AddComExitVehicle ( driver ) ;
22670: LD_VAR 0 3
22674: PPUSH
22675: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
22679: LD_VAR 0 3
22683: PPUSH
22684: LD_VAR 0 2
22688: PPUSH
22689: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
22693: LD_VAR 0 1
22697: PPUSH
22698: CALL_OW 255
22702: PUSH
22703: LD_INT 3
22705: EQUAL
22706: IFFALSE 22737
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
22708: LD_ADDR_EXP 55
22712: PUSH
22713: LD_EXP 55
22717: PPUSH
22718: LD_EXP 55
22722: PUSH
22723: LD_INT 1
22725: PLUS
22726: PPUSH
22727: LD_VAR 0 1
22731: PPUSH
22732: CALL_OW 1
22736: ST_TO_ADDR
// end ;
22737: PPOPN 3
22739: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
22740: LD_VAR 0 1
22744: PPUSH
22745: CALL_OW 255
22749: PUSH
22750: LD_INT 8
22752: EQUAL
22753: PUSH
22754: LD_VAR 0 1
22758: PPUSH
22759: CALL_OW 266
22763: PUSH
22764: LD_INT 4
22766: EQUAL
22767: AND
22768: IFFALSE 22779
// ComUpgrade ( b ) ;
22770: LD_VAR 0 1
22774: PPUSH
22775: CALL_OW 146
// end ;
22779: PPOPN 1
22781: END
// on UnitDestroyed ( un ) do begin if un = Heike then
22782: LD_VAR 0 1
22786: PUSH
22787: LD_EXP 29
22791: EQUAL
22792: IFFALSE 22801
// YouLost ( Heike ) ;
22794: LD_STRING Heike
22796: PPUSH
22797: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] ] ) then
22801: LD_VAR 0 1
22805: PUSH
22806: LD_INT 22
22808: PUSH
22809: LD_INT 2
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 23
22818: PUSH
22819: LD_INT 2
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PPUSH
22830: CALL_OW 69
22834: IN
22835: IFFALSE 22851
// heikeLoseCounter := heikeLoseCounter + 1 ;
22837: LD_ADDR_EXP 26
22841: PUSH
22842: LD_EXP 26
22846: PUSH
22847: LD_INT 1
22849: PLUS
22850: ST_TO_ADDR
// if un = arDepot then
22851: LD_VAR 0 1
22855: PUSH
22856: LD_EXP 43
22860: EQUAL
22861: IFFALSE 22870
// YouLost ( Base ) ;
22863: LD_STRING Base
22865: PPUSH
22866: CALL_OW 104
// if un = Rolf then
22870: LD_VAR 0 1
22874: PUSH
22875: LD_EXP 42
22879: EQUAL
22880: IFFALSE 22890
// rolfDied := true ;
22882: LD_ADDR_EXP 13
22886: PUSH
22887: LD_INT 1
22889: ST_TO_ADDR
// if un in rolfSquad then
22890: LD_VAR 0 1
22894: PUSH
22895: LD_EXP 46
22899: IN
22900: IFFALSE 22918
// rolfSquad := rolfSquad diff un ;
22902: LD_ADDR_EXP 46
22906: PUSH
22907: LD_EXP 46
22911: PUSH
22912: LD_VAR 0 1
22916: DIFF
22917: ST_TO_ADDR
// if un in omarSquad then
22918: LD_VAR 0 1
22922: PUSH
22923: LD_EXP 47
22927: IN
22928: IFFALSE 22946
// omarSquad := omarSquad diff un ;
22930: LD_ADDR_EXP 47
22934: PUSH
22935: LD_EXP 47
22939: PUSH
22940: LD_VAR 0 1
22944: DIFF
22945: ST_TO_ADDR
// if GetSide ( un ) = 3 then
22946: LD_VAR 0 1
22950: PPUSH
22951: CALL_OW 255
22955: PUSH
22956: LD_INT 3
22958: EQUAL
22959: IFFALSE 22975
// ruLoseCounter := ruLoseCounter + 1 ;
22961: LD_ADDR_EXP 5
22965: PUSH
22966: LD_EXP 5
22970: PUSH
22971: LD_INT 1
22973: PLUS
22974: ST_TO_ADDR
// if un in ruAttackers then
22975: LD_VAR 0 1
22979: PUSH
22980: LD_EXP 56
22984: IN
22985: IFFALSE 23003
// ruAttackers := ruAttackers diff un ;
22987: LD_ADDR_EXP 56
22991: PUSH
22992: LD_EXP 56
22996: PUSH
22997: LD_VAR 0 1
23001: DIFF
23002: ST_TO_ADDR
// end ;
23003: PPOPN 1
23005: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
23006: LD_INT 0
23008: PPUSH
23009: PPUSH
23010: PPUSH
23011: PPUSH
// begin if GetSide ( un ) = 3 and not un in ruAttackers then
23012: LD_VAR 0 1
23016: PPUSH
23017: CALL_OW 255
23021: PUSH
23022: LD_INT 3
23024: EQUAL
23025: PUSH
23026: LD_VAR 0 1
23030: PUSH
23031: LD_EXP 56
23035: IN
23036: NOT
23037: AND
23038: IFFALSE 23534
// begin if not IsInArea ( un , ruMainBase ) then
23040: LD_VAR 0 1
23044: PPUSH
23045: LD_INT 10
23047: PPUSH
23048: CALL_OW 308
23052: NOT
23053: IFFALSE 23067
// ComMoveToArea ( un , ruMainBase ) ;
23055: LD_VAR 0 1
23059: PPUSH
23060: LD_INT 10
23062: PPUSH
23063: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
23067: LD_INT 35
23069: PPUSH
23070: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
23074: LD_VAR 0 1
23078: PPUSH
23079: CALL_OW 302
23083: NOT
23084: PUSH
23085: LD_VAR 0 1
23089: PPUSH
23090: LD_INT 10
23092: PPUSH
23093: CALL_OW 308
23097: OR
23098: IFFALSE 23067
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
23100: LD_ADDR_EXP 54
23104: PUSH
23105: LD_EXP 54
23109: PPUSH
23110: LD_EXP 54
23114: PUSH
23115: LD_INT 1
23117: PLUS
23118: PPUSH
23119: LD_VAR 0 1
23123: PPUSH
23124: CALL_OW 1
23128: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
23129: LD_ADDR_VAR 0 8
23133: PUSH
23134: LD_INT 72
23136: PUSH
23137: LD_INT 12
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: ST_TO_ADDR
// if tmp then
23144: LD_VAR 0 8
23148: IFFALSE 23263
// for i in tmp do
23150: LD_ADDR_VAR 0 5
23154: PUSH
23155: LD_VAR 0 8
23159: PUSH
23160: FOR_IN
23161: IFFALSE 23261
// if UnitsInside ( i ) < 6 then
23163: LD_VAR 0 5
23167: PPUSH
23168: CALL_OW 313
23172: PUSH
23173: LD_INT 6
23175: LESS
23176: IFFALSE 23259
// begin AddComEnterUnit ( un , i ) ;
23178: LD_VAR 0 1
23182: PPUSH
23183: LD_VAR 0 5
23187: PPUSH
23188: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
23192: LD_VAR 0 8
23196: PPUSH
23197: LD_INT 22
23199: PUSH
23200: LD_INT 23
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: LD_INT 1
23209: PPUSH
23210: LD_INT 2
23212: PPUSH
23213: CALL_OW 12
23217: ARRAY
23218: PPUSH
23219: LD_INT 1
23221: PPUSH
23222: LD_INT 1
23224: PPUSH
23225: LD_INT 44
23227: PUSH
23228: LD_INT 46
23230: PUSH
23231: LD_INT 47
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 1
23241: PPUSH
23242: LD_INT 3
23244: PPUSH
23245: CALL_OW 12
23249: ARRAY
23250: PPUSH
23251: CALL_OW 185
// exit ;
23255: POP
23256: POP
23257: GO 23534
// end ;
23259: GO 23160
23261: POP
23262: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
23263: LD_ADDR_VAR 0 8
23267: PUSH
23268: LD_INT 10
23270: PPUSH
23271: LD_INT 22
23273: PUSH
23274: LD_INT 3
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 50
23283: PUSH
23284: EMPTY
23285: LIST
23286: PUSH
23287: LD_INT 2
23289: PUSH
23290: LD_INT 30
23292: PUSH
23293: LD_INT 4
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 30
23302: PUSH
23303: LD_INT 5
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 30
23312: PUSH
23313: LD_INT 32
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: LD_INT 30
23322: PUSH
23323: LD_INT 31
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: LIST
23341: PPUSH
23342: CALL_OW 70
23346: ST_TO_ADDR
// if not tmp then
23347: LD_VAR 0 8
23351: NOT
23352: IFFALSE 23371
// begin ComMoveXY ( un , 83 , 133 ) ;
23354: LD_VAR 0 1
23358: PPUSH
23359: LD_INT 83
23361: PPUSH
23362: LD_INT 133
23364: PPUSH
23365: CALL_OW 111
// exit ;
23369: GO 23534
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
23371: LD_ADDR_VAR 0 6
23375: PUSH
23376: LD_VAR 0 1
23380: PPUSH
23381: LD_VAR 0 8
23385: PPUSH
23386: LD_INT 1
23388: PPUSH
23389: LD_INT 1
23391: PPUSH
23392: CALL 30052 0 4
23396: PUSH
23397: FOR_IN
23398: IFFALSE 23532
// begin case GetBType ( b ) of b_armoury , b_barracks :
23400: LD_VAR 0 6
23404: PPUSH
23405: CALL_OW 266
23409: PUSH
23410: LD_INT 4
23412: DOUBLE
23413: EQUAL
23414: IFTRUE 23424
23416: LD_INT 5
23418: DOUBLE
23419: EQUAL
23420: IFTRUE 23424
23422: GO 23435
23424: POP
// p := 6 ; b_breastwork , b_bunker :
23425: LD_ADDR_VAR 0 7
23429: PUSH
23430: LD_INT 6
23432: ST_TO_ADDR
23433: GO 23461
23435: LD_INT 31
23437: DOUBLE
23438: EQUAL
23439: IFTRUE 23449
23441: LD_INT 32
23443: DOUBLE
23444: EQUAL
23445: IFTRUE 23449
23447: GO 23460
23449: POP
// p := 1 ; end ;
23450: LD_ADDR_VAR 0 7
23454: PUSH
23455: LD_INT 1
23457: ST_TO_ADDR
23458: GO 23461
23460: POP
// if UnitsInside ( b ) < p then
23461: LD_VAR 0 6
23465: PPUSH
23466: CALL_OW 313
23470: PUSH
23471: LD_VAR 0 7
23475: LESS
23476: IFFALSE 23530
// begin ComEnterUnit ( un , b ) ;
23478: LD_VAR 0 1
23482: PPUSH
23483: LD_VAR 0 6
23487: PPUSH
23488: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
23492: LD_VAR 0 6
23496: PPUSH
23497: CALL_OW 266
23501: PUSH
23502: LD_INT 4
23504: PUSH
23505: LD_INT 5
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: IN
23512: IFFALSE 23526
// AddComChangeProfession ( un , class_soldier ) ;
23514: LD_VAR 0 1
23518: PPUSH
23519: LD_INT 1
23521: PPUSH
23522: CALL_OW 183
// exit ;
23526: POP
23527: POP
23528: GO 23534
// end ; end ;
23530: GO 23397
23532: POP
23533: POP
// end ; end ;
23534: PPOPN 8
23536: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
23537: LD_INT 0
23539: PPUSH
23540: PPUSH
23541: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
23542: LD_VAR 0 2
23546: PPUSH
23547: CALL_OW 255
23551: PUSH
23552: LD_INT 3
23554: EQUAL
23555: PUSH
23556: LD_VAR 0 2
23560: PPUSH
23561: CALL_OW 257
23565: PUSH
23566: LD_INT 1
23568: EQUAL
23569: AND
23570: PUSH
23571: LD_VAR 0 2
23575: PUSH
23576: LD_EXP 54
23580: IN
23581: NOT
23582: AND
23583: IFFALSE 23896
// begin ComMoveToArea ( un , ruMainBase ) ;
23585: LD_VAR 0 2
23589: PPUSH
23590: LD_INT 10
23592: PPUSH
23593: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
23597: LD_INT 35
23599: PPUSH
23600: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
23604: LD_VAR 0 2
23608: PPUSH
23609: CALL_OW 302
23613: NOT
23614: PUSH
23615: LD_VAR 0 2
23619: PPUSH
23620: LD_INT 10
23622: PPUSH
23623: CALL_OW 308
23627: OR
23628: IFFALSE 23597
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
23630: LD_ADDR_EXP 54
23634: PUSH
23635: LD_EXP 54
23639: PPUSH
23640: LD_EXP 54
23644: PUSH
23645: LD_INT 1
23647: PLUS
23648: PPUSH
23649: LD_VAR 0 2
23653: PPUSH
23654: CALL_OW 1
23658: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
23659: LD_ADDR_VAR 0 4
23663: PUSH
23664: LD_INT 10
23666: PPUSH
23667: LD_INT 22
23669: PUSH
23670: LD_INT 3
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 50
23679: PUSH
23680: EMPTY
23681: LIST
23682: PUSH
23683: LD_INT 2
23685: PUSH
23686: LD_INT 30
23688: PUSH
23689: LD_INT 4
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 30
23698: PUSH
23699: LD_INT 5
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 30
23708: PUSH
23709: LD_INT 32
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 30
23718: PUSH
23719: LD_INT 31
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: LIST
23737: PPUSH
23738: CALL_OW 70
23742: ST_TO_ADDR
// if not tmp then
23743: LD_VAR 0 4
23747: NOT
23748: IFFALSE 23767
// begin ComMoveXY ( un , 83 , 133 ) ;
23750: LD_VAR 0 2
23754: PPUSH
23755: LD_INT 83
23757: PPUSH
23758: LD_INT 133
23760: PPUSH
23761: CALL_OW 111
// exit ;
23765: GO 24145
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
23767: LD_ADDR_VAR 0 5
23771: PUSH
23772: LD_VAR 0 2
23776: PPUSH
23777: LD_VAR 0 4
23781: PPUSH
23782: LD_INT 1
23784: PPUSH
23785: LD_INT 1
23787: PPUSH
23788: CALL 30052 0 4
23792: PUSH
23793: FOR_IN
23794: IFFALSE 23894
// begin case GetBType ( b ) of b_armoury , b_barracks :
23796: LD_VAR 0 5
23800: PPUSH
23801: CALL_OW 266
23805: PUSH
23806: LD_INT 4
23808: DOUBLE
23809: EQUAL
23810: IFTRUE 23820
23812: LD_INT 5
23814: DOUBLE
23815: EQUAL
23816: IFTRUE 23820
23818: GO 23831
23820: POP
// p := 6 ; b_breastwork , b_bunker :
23821: LD_ADDR_VAR 0 3
23825: PUSH
23826: LD_INT 6
23828: ST_TO_ADDR
23829: GO 23857
23831: LD_INT 31
23833: DOUBLE
23834: EQUAL
23835: IFTRUE 23845
23837: LD_INT 32
23839: DOUBLE
23840: EQUAL
23841: IFTRUE 23845
23843: GO 23856
23845: POP
// p := 1 ; end ;
23846: LD_ADDR_VAR 0 3
23850: PUSH
23851: LD_INT 1
23853: ST_TO_ADDR
23854: GO 23857
23856: POP
// if UnitsInside ( b ) < p then
23857: LD_VAR 0 5
23861: PPUSH
23862: CALL_OW 313
23866: PUSH
23867: LD_VAR 0 3
23871: LESS
23872: IFFALSE 23892
// begin ComEnterUnit ( un , b ) ;
23874: LD_VAR 0 2
23878: PPUSH
23879: LD_VAR 0 5
23883: PPUSH
23884: CALL_OW 120
// exit ;
23888: POP
23889: POP
23890: GO 24145
// end ; end ;
23892: GO 23793
23894: POP
23895: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
23896: LD_VAR 0 2
23900: PUSH
23901: LD_EXP 54
23905: IN
23906: PUSH
23907: LD_VAR 0 2
23911: PPUSH
23912: CALL_OW 257
23916: PUSH
23917: LD_INT 1
23919: EQUAL
23920: AND
23921: IFFALSE 24145
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
23923: LD_ADDR_VAR 0 4
23927: PUSH
23928: LD_INT 10
23930: PPUSH
23931: LD_INT 22
23933: PUSH
23934: LD_INT 3
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 50
23943: PUSH
23944: EMPTY
23945: LIST
23946: PUSH
23947: LD_INT 2
23949: PUSH
23950: LD_INT 30
23952: PUSH
23953: LD_INT 4
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 30
23962: PUSH
23963: LD_INT 5
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 30
23972: PUSH
23973: LD_INT 32
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 30
23982: PUSH
23983: LD_INT 31
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: LIST
24001: PPUSH
24002: CALL_OW 70
24006: ST_TO_ADDR
// if not tmp then
24007: LD_VAR 0 4
24011: NOT
24012: IFFALSE 24016
// exit ;
24014: GO 24145
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
24016: LD_ADDR_VAR 0 5
24020: PUSH
24021: LD_VAR 0 2
24025: PPUSH
24026: LD_VAR 0 4
24030: PPUSH
24031: LD_INT 1
24033: PPUSH
24034: LD_INT 1
24036: PPUSH
24037: CALL 30052 0 4
24041: PUSH
24042: FOR_IN
24043: IFFALSE 24143
// begin case GetBType ( b ) of b_armoury , b_barracks :
24045: LD_VAR 0 5
24049: PPUSH
24050: CALL_OW 266
24054: PUSH
24055: LD_INT 4
24057: DOUBLE
24058: EQUAL
24059: IFTRUE 24069
24061: LD_INT 5
24063: DOUBLE
24064: EQUAL
24065: IFTRUE 24069
24067: GO 24080
24069: POP
// p := 6 ; b_breastwork , b_bunker :
24070: LD_ADDR_VAR 0 3
24074: PUSH
24075: LD_INT 6
24077: ST_TO_ADDR
24078: GO 24106
24080: LD_INT 31
24082: DOUBLE
24083: EQUAL
24084: IFTRUE 24094
24086: LD_INT 32
24088: DOUBLE
24089: EQUAL
24090: IFTRUE 24094
24092: GO 24105
24094: POP
// p := 1 ; end ;
24095: LD_ADDR_VAR 0 3
24099: PUSH
24100: LD_INT 1
24102: ST_TO_ADDR
24103: GO 24106
24105: POP
// if UnitsInside ( b ) < p then
24106: LD_VAR 0 5
24110: PPUSH
24111: CALL_OW 313
24115: PUSH
24116: LD_VAR 0 3
24120: LESS
24121: IFFALSE 24141
// begin ComEnterUnit ( un , b ) ;
24123: LD_VAR 0 2
24127: PPUSH
24128: LD_VAR 0 5
24132: PPUSH
24133: CALL_OW 120
// exit ;
24137: POP
24138: POP
24139: GO 24145
// end ; end ;
24141: GO 24042
24143: POP
24144: POP
// end ; end ;
24145: PPOPN 5
24147: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
24148: LD_VAR 0 1
24152: PUSH
24153: LD_INT 2
24155: EQUAL
24156: PUSH
24157: LD_VAR 0 2
24161: PUSH
24162: LD_INT 5
24164: PUSH
24165: LD_INT 8
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: IN
24172: AND
24173: IFFALSE 24182
// YouLost ( FriendlyFire ) ;
24175: LD_STRING FriendlyFire
24177: PPUSH
24178: CALL_OW 104
// end ;
24182: PPOPN 2
24184: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
24185: LD_VAR 0 1
24189: PPUSH
24190: CALL_OW 255
24194: PUSH
24195: LD_INT 8
24197: EQUAL
24198: PUSH
24199: LD_VAR 0 1
24203: PPUSH
24204: CALL_OW 266
24208: PUSH
24209: LD_INT 5
24211: EQUAL
24212: AND
24213: IFFALSE 24227
// SetClass ( unit , class_mortar ) ;
24215: LD_VAR 0 2
24219: PPUSH
24220: LD_INT 8
24222: PPUSH
24223: CALL_OW 336
// end ; end_of_file
24227: PPOPN 2
24229: END
// every 0 0$30 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 300 , 250 , 200 ] [ Difficulty ] do
24230: LD_INT 6
24232: PPUSH
24233: LD_INT 1
24235: PPUSH
24236: CALL_OW 287
24240: PUSH
24241: LD_INT 300
24243: PUSH
24244: LD_INT 250
24246: PUSH
24247: LD_INT 200
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: LIST
24254: PUSH
24255: LD_OWVAR 67
24259: ARRAY
24260: LESS
24261: IFFALSE 24288
24263: GO 24265
24265: DISABLE
// begin enable ;
24266: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
24267: LD_INT 1
24269: PPUSH
24270: LD_INT 5
24272: PPUSH
24273: CALL_OW 12
24277: PPUSH
24278: LD_INT 6
24280: PPUSH
24281: LD_INT 1
24283: PPUSH
24284: CALL_OW 55
// end ; end_of_file
24288: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
24289: LD_EXP 18
24293: PUSH
24294: LD_EXP 20
24298: AND
24299: PUSH
24300: LD_EXP 17
24304: PUSH
24305: LD_EXP 19
24309: AND
24310: OR
24311: IFFALSE 24630
24313: GO 24315
24315: DISABLE
// begin enable ;
24316: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
24317: LD_EXP 18
24321: PUSH
24322: LD_EXP 20
24326: AND
24327: PUSH
24328: LD_EXP 17
24332: PUSH
24333: LD_EXP 19
24337: AND
24338: AND
24339: IFFALSE 24476
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
24341: LD_ADDR_OWVAR 47
24345: PUSH
24346: LD_STRING #X106-1a
24348: PUSH
24349: LD_EXP 21
24353: PUSH
24354: LD_INT 16
24356: PPUSH
24357: LD_INT 22
24359: PUSH
24360: LD_INT 2
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: LD_INT 21
24369: PUSH
24370: LD_INT 2
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: LD_INT 33
24379: PUSH
24380: LD_INT 1
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 58
24389: PUSH
24390: EMPTY
24391: LIST
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: PPUSH
24399: CALL_OW 70
24403: MINUS
24404: PPUSH
24405: CALL 63346 0 1
24409: PUSH
24410: LD_STRING #X106-3a
24412: PUSH
24413: LD_EXP 20
24417: PUSH
24418: LD_STRING #X106-1
24420: PUSH
24421: LD_EXP 46
24425: PUSH
24426: LD_INT 0
24428: PLUS
24429: PUSH
24430: LD_EXP 46
24434: PPUSH
24435: LD_INT 55
24437: PUSH
24438: EMPTY
24439: LIST
24440: PPUSH
24441: CALL_OW 72
24445: PUSH
24446: LD_INT 0
24448: PLUS
24449: MINUS
24450: PPUSH
24451: CALL 63346 0 1
24455: PUSH
24456: LD_STRING #X106-3
24458: PUSH
24459: LD_EXP 19
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: ST_TO_ADDR
// end else
24474: GO 24630
// if omarWantVehicles and omarWaitingForVehiclesTimer then
24476: LD_EXP 18
24480: PUSH
24481: LD_EXP 20
24485: AND
24486: IFFALSE 24573
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
24488: LD_ADDR_OWVAR 47
24492: PUSH
24493: LD_STRING #X106-1a
24495: PUSH
24496: LD_EXP 21
24500: PUSH
24501: LD_INT 16
24503: PPUSH
24504: LD_INT 22
24506: PUSH
24507: LD_INT 2
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 21
24516: PUSH
24517: LD_INT 2
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 33
24526: PUSH
24527: LD_INT 1
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 58
24536: PUSH
24537: EMPTY
24538: LIST
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: PPUSH
24546: CALL_OW 70
24550: MINUS
24551: PPUSH
24552: CALL 63346 0 1
24556: PUSH
24557: LD_STRING #X106-3a
24559: PUSH
24560: LD_EXP 20
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: ST_TO_ADDR
// end else
24571: GO 24630
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
24573: LD_ADDR_OWVAR 47
24577: PUSH
24578: LD_STRING #X106-1
24580: PUSH
24581: LD_EXP 46
24585: PUSH
24586: LD_INT 0
24588: PLUS
24589: PUSH
24590: LD_EXP 46
24594: PPUSH
24595: LD_INT 55
24597: PUSH
24598: EMPTY
24599: LIST
24600: PPUSH
24601: CALL_OW 72
24605: PUSH
24606: LD_INT 0
24608: PLUS
24609: MINUS
24610: PPUSH
24611: CALL 63346 0 1
24615: PUSH
24616: LD_STRING #X106-3
24618: PUSH
24619: LD_EXP 19
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: ST_TO_ADDR
// end ; end ; end_of_file
24630: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24631: LD_INT 0
24633: PPUSH
24634: PPUSH
// if exist_mode then
24635: LD_VAR 0 2
24639: IFFALSE 24664
// unit := CreateCharacter ( prefix & ident ) else
24641: LD_ADDR_VAR 0 5
24645: PUSH
24646: LD_VAR 0 3
24650: PUSH
24651: LD_VAR 0 1
24655: STR
24656: PPUSH
24657: CALL_OW 34
24661: ST_TO_ADDR
24662: GO 24679
// unit := NewCharacter ( ident ) ;
24664: LD_ADDR_VAR 0 5
24668: PUSH
24669: LD_VAR 0 1
24673: PPUSH
24674: CALL_OW 25
24678: ST_TO_ADDR
// result := unit ;
24679: LD_ADDR_VAR 0 4
24683: PUSH
24684: LD_VAR 0 5
24688: ST_TO_ADDR
// end ;
24689: LD_VAR 0 4
24693: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24694: LD_INT 0
24696: PPUSH
24697: PPUSH
// if not side or not nation then
24698: LD_VAR 0 1
24702: NOT
24703: PUSH
24704: LD_VAR 0 2
24708: NOT
24709: OR
24710: IFFALSE 24714
// exit ;
24712: GO 25482
// case nation of nation_american :
24714: LD_VAR 0 2
24718: PUSH
24719: LD_INT 1
24721: DOUBLE
24722: EQUAL
24723: IFTRUE 24727
24725: GO 24941
24727: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24728: LD_ADDR_VAR 0 4
24732: PUSH
24733: LD_INT 35
24735: PUSH
24736: LD_INT 45
24738: PUSH
24739: LD_INT 46
24741: PUSH
24742: LD_INT 47
24744: PUSH
24745: LD_INT 82
24747: PUSH
24748: LD_INT 83
24750: PUSH
24751: LD_INT 84
24753: PUSH
24754: LD_INT 85
24756: PUSH
24757: LD_INT 86
24759: PUSH
24760: LD_INT 1
24762: PUSH
24763: LD_INT 2
24765: PUSH
24766: LD_INT 6
24768: PUSH
24769: LD_INT 15
24771: PUSH
24772: LD_INT 16
24774: PUSH
24775: LD_INT 7
24777: PUSH
24778: LD_INT 12
24780: PUSH
24781: LD_INT 13
24783: PUSH
24784: LD_INT 10
24786: PUSH
24787: LD_INT 14
24789: PUSH
24790: LD_INT 20
24792: PUSH
24793: LD_INT 21
24795: PUSH
24796: LD_INT 22
24798: PUSH
24799: LD_INT 25
24801: PUSH
24802: LD_INT 32
24804: PUSH
24805: LD_INT 27
24807: PUSH
24808: LD_INT 36
24810: PUSH
24811: LD_INT 69
24813: PUSH
24814: LD_INT 39
24816: PUSH
24817: LD_INT 34
24819: PUSH
24820: LD_INT 40
24822: PUSH
24823: LD_INT 48
24825: PUSH
24826: LD_INT 49
24828: PUSH
24829: LD_INT 50
24831: PUSH
24832: LD_INT 51
24834: PUSH
24835: LD_INT 52
24837: PUSH
24838: LD_INT 53
24840: PUSH
24841: LD_INT 54
24843: PUSH
24844: LD_INT 55
24846: PUSH
24847: LD_INT 56
24849: PUSH
24850: LD_INT 57
24852: PUSH
24853: LD_INT 58
24855: PUSH
24856: LD_INT 59
24858: PUSH
24859: LD_INT 60
24861: PUSH
24862: LD_INT 61
24864: PUSH
24865: LD_INT 62
24867: PUSH
24868: LD_INT 80
24870: PUSH
24871: LD_INT 82
24873: PUSH
24874: LD_INT 83
24876: PUSH
24877: LD_INT 84
24879: PUSH
24880: LD_INT 85
24882: PUSH
24883: LD_INT 86
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: ST_TO_ADDR
24939: GO 25406
24941: LD_INT 2
24943: DOUBLE
24944: EQUAL
24945: IFTRUE 24949
24947: GO 25175
24949: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24950: LD_ADDR_VAR 0 4
24954: PUSH
24955: LD_INT 35
24957: PUSH
24958: LD_INT 45
24960: PUSH
24961: LD_INT 46
24963: PUSH
24964: LD_INT 47
24966: PUSH
24967: LD_INT 82
24969: PUSH
24970: LD_INT 83
24972: PUSH
24973: LD_INT 84
24975: PUSH
24976: LD_INT 85
24978: PUSH
24979: LD_INT 87
24981: PUSH
24982: LD_INT 70
24984: PUSH
24985: LD_INT 1
24987: PUSH
24988: LD_INT 11
24990: PUSH
24991: LD_INT 3
24993: PUSH
24994: LD_INT 4
24996: PUSH
24997: LD_INT 5
24999: PUSH
25000: LD_INT 6
25002: PUSH
25003: LD_INT 15
25005: PUSH
25006: LD_INT 18
25008: PUSH
25009: LD_INT 7
25011: PUSH
25012: LD_INT 17
25014: PUSH
25015: LD_INT 8
25017: PUSH
25018: LD_INT 20
25020: PUSH
25021: LD_INT 21
25023: PUSH
25024: LD_INT 22
25026: PUSH
25027: LD_INT 72
25029: PUSH
25030: LD_INT 26
25032: PUSH
25033: LD_INT 69
25035: PUSH
25036: LD_INT 39
25038: PUSH
25039: LD_INT 40
25041: PUSH
25042: LD_INT 41
25044: PUSH
25045: LD_INT 42
25047: PUSH
25048: LD_INT 43
25050: PUSH
25051: LD_INT 48
25053: PUSH
25054: LD_INT 49
25056: PUSH
25057: LD_INT 50
25059: PUSH
25060: LD_INT 51
25062: PUSH
25063: LD_INT 52
25065: PUSH
25066: LD_INT 53
25068: PUSH
25069: LD_INT 54
25071: PUSH
25072: LD_INT 55
25074: PUSH
25075: LD_INT 56
25077: PUSH
25078: LD_INT 60
25080: PUSH
25081: LD_INT 61
25083: PUSH
25084: LD_INT 62
25086: PUSH
25087: LD_INT 66
25089: PUSH
25090: LD_INT 67
25092: PUSH
25093: LD_INT 68
25095: PUSH
25096: LD_INT 81
25098: PUSH
25099: LD_INT 82
25101: PUSH
25102: LD_INT 83
25104: PUSH
25105: LD_INT 84
25107: PUSH
25108: LD_INT 85
25110: PUSH
25111: LD_INT 87
25113: PUSH
25114: LD_INT 88
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: ST_TO_ADDR
25173: GO 25406
25175: LD_INT 3
25177: DOUBLE
25178: EQUAL
25179: IFTRUE 25183
25181: GO 25405
25183: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25184: LD_ADDR_VAR 0 4
25188: PUSH
25189: LD_INT 46
25191: PUSH
25192: LD_INT 47
25194: PUSH
25195: LD_INT 1
25197: PUSH
25198: LD_INT 2
25200: PUSH
25201: LD_INT 82
25203: PUSH
25204: LD_INT 83
25206: PUSH
25207: LD_INT 84
25209: PUSH
25210: LD_INT 85
25212: PUSH
25213: LD_INT 86
25215: PUSH
25216: LD_INT 11
25218: PUSH
25219: LD_INT 9
25221: PUSH
25222: LD_INT 20
25224: PUSH
25225: LD_INT 19
25227: PUSH
25228: LD_INT 21
25230: PUSH
25231: LD_INT 24
25233: PUSH
25234: LD_INT 22
25236: PUSH
25237: LD_INT 25
25239: PUSH
25240: LD_INT 28
25242: PUSH
25243: LD_INT 29
25245: PUSH
25246: LD_INT 30
25248: PUSH
25249: LD_INT 31
25251: PUSH
25252: LD_INT 37
25254: PUSH
25255: LD_INT 38
25257: PUSH
25258: LD_INT 32
25260: PUSH
25261: LD_INT 27
25263: PUSH
25264: LD_INT 33
25266: PUSH
25267: LD_INT 69
25269: PUSH
25270: LD_INT 39
25272: PUSH
25273: LD_INT 34
25275: PUSH
25276: LD_INT 40
25278: PUSH
25279: LD_INT 71
25281: PUSH
25282: LD_INT 23
25284: PUSH
25285: LD_INT 44
25287: PUSH
25288: LD_INT 48
25290: PUSH
25291: LD_INT 49
25293: PUSH
25294: LD_INT 50
25296: PUSH
25297: LD_INT 51
25299: PUSH
25300: LD_INT 52
25302: PUSH
25303: LD_INT 53
25305: PUSH
25306: LD_INT 54
25308: PUSH
25309: LD_INT 55
25311: PUSH
25312: LD_INT 56
25314: PUSH
25315: LD_INT 57
25317: PUSH
25318: LD_INT 58
25320: PUSH
25321: LD_INT 59
25323: PUSH
25324: LD_INT 63
25326: PUSH
25327: LD_INT 64
25329: PUSH
25330: LD_INT 65
25332: PUSH
25333: LD_INT 82
25335: PUSH
25336: LD_INT 83
25338: PUSH
25339: LD_INT 84
25341: PUSH
25342: LD_INT 85
25344: PUSH
25345: LD_INT 86
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: ST_TO_ADDR
25403: GO 25406
25405: POP
// if state > - 1 and state < 3 then
25406: LD_VAR 0 3
25410: PUSH
25411: LD_INT 1
25413: NEG
25414: GREATER
25415: PUSH
25416: LD_VAR 0 3
25420: PUSH
25421: LD_INT 3
25423: LESS
25424: AND
25425: IFFALSE 25482
// for i in result do
25427: LD_ADDR_VAR 0 5
25431: PUSH
25432: LD_VAR 0 4
25436: PUSH
25437: FOR_IN
25438: IFFALSE 25480
// if GetTech ( i , side ) <> state then
25440: LD_VAR 0 5
25444: PPUSH
25445: LD_VAR 0 1
25449: PPUSH
25450: CALL_OW 321
25454: PUSH
25455: LD_VAR 0 3
25459: NONEQUAL
25460: IFFALSE 25478
// result := result diff i ;
25462: LD_ADDR_VAR 0 4
25466: PUSH
25467: LD_VAR 0 4
25471: PUSH
25472: LD_VAR 0 5
25476: DIFF
25477: ST_TO_ADDR
25478: GO 25437
25480: POP
25481: POP
// end ;
25482: LD_VAR 0 4
25486: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25487: LD_INT 0
25489: PPUSH
25490: PPUSH
25491: PPUSH
// result := true ;
25492: LD_ADDR_VAR 0 3
25496: PUSH
25497: LD_INT 1
25499: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25500: LD_ADDR_VAR 0 5
25504: PUSH
25505: LD_VAR 0 2
25509: PPUSH
25510: CALL_OW 480
25514: ST_TO_ADDR
// if not tmp then
25515: LD_VAR 0 5
25519: NOT
25520: IFFALSE 25524
// exit ;
25522: GO 25573
// for i in tmp do
25524: LD_ADDR_VAR 0 4
25528: PUSH
25529: LD_VAR 0 5
25533: PUSH
25534: FOR_IN
25535: IFFALSE 25571
// if GetTech ( i , side ) <> state_researched then
25537: LD_VAR 0 4
25541: PPUSH
25542: LD_VAR 0 1
25546: PPUSH
25547: CALL_OW 321
25551: PUSH
25552: LD_INT 2
25554: NONEQUAL
25555: IFFALSE 25569
// begin result := false ;
25557: LD_ADDR_VAR 0 3
25561: PUSH
25562: LD_INT 0
25564: ST_TO_ADDR
// exit ;
25565: POP
25566: POP
25567: GO 25573
// end ;
25569: GO 25534
25571: POP
25572: POP
// end ;
25573: LD_VAR 0 3
25577: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25578: LD_INT 0
25580: PPUSH
25581: PPUSH
25582: PPUSH
25583: PPUSH
25584: PPUSH
25585: PPUSH
25586: PPUSH
25587: PPUSH
25588: PPUSH
25589: PPUSH
25590: PPUSH
25591: PPUSH
25592: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25593: LD_VAR 0 1
25597: NOT
25598: PUSH
25599: LD_VAR 0 1
25603: PPUSH
25604: CALL_OW 257
25608: PUSH
25609: LD_INT 9
25611: NONEQUAL
25612: OR
25613: IFFALSE 25617
// exit ;
25615: GO 26190
// side := GetSide ( unit ) ;
25617: LD_ADDR_VAR 0 9
25621: PUSH
25622: LD_VAR 0 1
25626: PPUSH
25627: CALL_OW 255
25631: ST_TO_ADDR
// tech_space := tech_spacanom ;
25632: LD_ADDR_VAR 0 12
25636: PUSH
25637: LD_INT 29
25639: ST_TO_ADDR
// tech_time := tech_taurad ;
25640: LD_ADDR_VAR 0 13
25644: PUSH
25645: LD_INT 28
25647: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25648: LD_ADDR_VAR 0 11
25652: PUSH
25653: LD_VAR 0 1
25657: PPUSH
25658: CALL_OW 310
25662: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25663: LD_VAR 0 11
25667: PPUSH
25668: CALL_OW 247
25672: PUSH
25673: LD_INT 2
25675: EQUAL
25676: IFFALSE 25680
// exit ;
25678: GO 26190
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25680: LD_ADDR_VAR 0 8
25684: PUSH
25685: LD_INT 81
25687: PUSH
25688: LD_VAR 0 9
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 3
25699: PUSH
25700: LD_INT 21
25702: PUSH
25703: LD_INT 3
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PPUSH
25718: CALL_OW 69
25722: ST_TO_ADDR
// if not tmp then
25723: LD_VAR 0 8
25727: NOT
25728: IFFALSE 25732
// exit ;
25730: GO 26190
// if in_unit then
25732: LD_VAR 0 11
25736: IFFALSE 25760
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25738: LD_ADDR_VAR 0 10
25742: PUSH
25743: LD_VAR 0 8
25747: PPUSH
25748: LD_VAR 0 11
25752: PPUSH
25753: CALL_OW 74
25757: ST_TO_ADDR
25758: GO 25780
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25760: LD_ADDR_VAR 0 10
25764: PUSH
25765: LD_VAR 0 8
25769: PPUSH
25770: LD_VAR 0 1
25774: PPUSH
25775: CALL_OW 74
25779: ST_TO_ADDR
// if not enemy then
25780: LD_VAR 0 10
25784: NOT
25785: IFFALSE 25789
// exit ;
25787: GO 26190
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25789: LD_VAR 0 11
25793: PUSH
25794: LD_VAR 0 11
25798: PPUSH
25799: LD_VAR 0 10
25803: PPUSH
25804: CALL_OW 296
25808: PUSH
25809: LD_INT 13
25811: GREATER
25812: AND
25813: PUSH
25814: LD_VAR 0 1
25818: PPUSH
25819: LD_VAR 0 10
25823: PPUSH
25824: CALL_OW 296
25828: PUSH
25829: LD_INT 12
25831: GREATER
25832: OR
25833: IFFALSE 25837
// exit ;
25835: GO 26190
// missile := [ 1 ] ;
25837: LD_ADDR_VAR 0 14
25841: PUSH
25842: LD_INT 1
25844: PUSH
25845: EMPTY
25846: LIST
25847: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25848: LD_VAR 0 9
25852: PPUSH
25853: LD_VAR 0 12
25857: PPUSH
25858: CALL_OW 325
25862: IFFALSE 25891
// missile := Insert ( missile , missile + 1 , 2 ) ;
25864: LD_ADDR_VAR 0 14
25868: PUSH
25869: LD_VAR 0 14
25873: PPUSH
25874: LD_VAR 0 14
25878: PUSH
25879: LD_INT 1
25881: PLUS
25882: PPUSH
25883: LD_INT 2
25885: PPUSH
25886: CALL_OW 2
25890: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25891: LD_VAR 0 9
25895: PPUSH
25896: LD_VAR 0 13
25900: PPUSH
25901: CALL_OW 325
25905: PUSH
25906: LD_VAR 0 10
25910: PPUSH
25911: CALL_OW 255
25915: PPUSH
25916: LD_VAR 0 13
25920: PPUSH
25921: CALL_OW 325
25925: NOT
25926: AND
25927: IFFALSE 25956
// missile := Insert ( missile , missile + 1 , 3 ) ;
25929: LD_ADDR_VAR 0 14
25933: PUSH
25934: LD_VAR 0 14
25938: PPUSH
25939: LD_VAR 0 14
25943: PUSH
25944: LD_INT 1
25946: PLUS
25947: PPUSH
25948: LD_INT 3
25950: PPUSH
25951: CALL_OW 2
25955: ST_TO_ADDR
// if missile < 2 then
25956: LD_VAR 0 14
25960: PUSH
25961: LD_INT 2
25963: LESS
25964: IFFALSE 25968
// exit ;
25966: GO 26190
// x := GetX ( enemy ) ;
25968: LD_ADDR_VAR 0 4
25972: PUSH
25973: LD_VAR 0 10
25977: PPUSH
25978: CALL_OW 250
25982: ST_TO_ADDR
// y := GetY ( enemy ) ;
25983: LD_ADDR_VAR 0 5
25987: PUSH
25988: LD_VAR 0 10
25992: PPUSH
25993: CALL_OW 251
25997: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25998: LD_ADDR_VAR 0 6
26002: PUSH
26003: LD_VAR 0 4
26007: PUSH
26008: LD_INT 1
26010: NEG
26011: PPUSH
26012: LD_INT 1
26014: PPUSH
26015: CALL_OW 12
26019: PLUS
26020: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26021: LD_ADDR_VAR 0 7
26025: PUSH
26026: LD_VAR 0 5
26030: PUSH
26031: LD_INT 1
26033: NEG
26034: PPUSH
26035: LD_INT 1
26037: PPUSH
26038: CALL_OW 12
26042: PLUS
26043: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26044: LD_VAR 0 6
26048: PPUSH
26049: LD_VAR 0 7
26053: PPUSH
26054: CALL_OW 488
26058: NOT
26059: IFFALSE 26081
// begin _x := x ;
26061: LD_ADDR_VAR 0 6
26065: PUSH
26066: LD_VAR 0 4
26070: ST_TO_ADDR
// _y := y ;
26071: LD_ADDR_VAR 0 7
26075: PUSH
26076: LD_VAR 0 5
26080: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26081: LD_ADDR_VAR 0 3
26085: PUSH
26086: LD_INT 1
26088: PPUSH
26089: LD_VAR 0 14
26093: PPUSH
26094: CALL_OW 12
26098: ST_TO_ADDR
// case i of 1 :
26099: LD_VAR 0 3
26103: PUSH
26104: LD_INT 1
26106: DOUBLE
26107: EQUAL
26108: IFTRUE 26112
26110: GO 26129
26112: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26113: LD_VAR 0 1
26117: PPUSH
26118: LD_VAR 0 10
26122: PPUSH
26123: CALL_OW 115
26127: GO 26190
26129: LD_INT 2
26131: DOUBLE
26132: EQUAL
26133: IFTRUE 26137
26135: GO 26159
26137: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26138: LD_VAR 0 1
26142: PPUSH
26143: LD_VAR 0 6
26147: PPUSH
26148: LD_VAR 0 7
26152: PPUSH
26153: CALL_OW 153
26157: GO 26190
26159: LD_INT 3
26161: DOUBLE
26162: EQUAL
26163: IFTRUE 26167
26165: GO 26189
26167: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26168: LD_VAR 0 1
26172: PPUSH
26173: LD_VAR 0 6
26177: PPUSH
26178: LD_VAR 0 7
26182: PPUSH
26183: CALL_OW 154
26187: GO 26190
26189: POP
// end ;
26190: LD_VAR 0 2
26194: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26195: LD_INT 0
26197: PPUSH
26198: PPUSH
26199: PPUSH
26200: PPUSH
26201: PPUSH
26202: PPUSH
// if not unit or not building then
26203: LD_VAR 0 1
26207: NOT
26208: PUSH
26209: LD_VAR 0 2
26213: NOT
26214: OR
26215: IFFALSE 26219
// exit ;
26217: GO 26377
// x := GetX ( building ) ;
26219: LD_ADDR_VAR 0 5
26223: PUSH
26224: LD_VAR 0 2
26228: PPUSH
26229: CALL_OW 250
26233: ST_TO_ADDR
// y := GetY ( building ) ;
26234: LD_ADDR_VAR 0 6
26238: PUSH
26239: LD_VAR 0 2
26243: PPUSH
26244: CALL_OW 251
26248: ST_TO_ADDR
// for i = 0 to 5 do
26249: LD_ADDR_VAR 0 4
26253: PUSH
26254: DOUBLE
26255: LD_INT 0
26257: DEC
26258: ST_TO_ADDR
26259: LD_INT 5
26261: PUSH
26262: FOR_TO
26263: IFFALSE 26375
// begin _x := ShiftX ( x , i , 3 ) ;
26265: LD_ADDR_VAR 0 7
26269: PUSH
26270: LD_VAR 0 5
26274: PPUSH
26275: LD_VAR 0 4
26279: PPUSH
26280: LD_INT 3
26282: PPUSH
26283: CALL_OW 272
26287: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26288: LD_ADDR_VAR 0 8
26292: PUSH
26293: LD_VAR 0 6
26297: PPUSH
26298: LD_VAR 0 4
26302: PPUSH
26303: LD_INT 3
26305: PPUSH
26306: CALL_OW 273
26310: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26311: LD_VAR 0 7
26315: PPUSH
26316: LD_VAR 0 8
26320: PPUSH
26321: CALL_OW 488
26325: NOT
26326: IFFALSE 26330
// continue ;
26328: GO 26262
// if HexInfo ( _x , _y ) = 0 then
26330: LD_VAR 0 7
26334: PPUSH
26335: LD_VAR 0 8
26339: PPUSH
26340: CALL_OW 428
26344: PUSH
26345: LD_INT 0
26347: EQUAL
26348: IFFALSE 26373
// begin ComMoveXY ( unit , _x , _y ) ;
26350: LD_VAR 0 1
26354: PPUSH
26355: LD_VAR 0 7
26359: PPUSH
26360: LD_VAR 0 8
26364: PPUSH
26365: CALL_OW 111
// exit ;
26369: POP
26370: POP
26371: GO 26377
// end ; end ;
26373: GO 26262
26375: POP
26376: POP
// end ;
26377: LD_VAR 0 3
26381: RET
// export function ScanBase ( side , base_area ) ; begin
26382: LD_INT 0
26384: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26385: LD_ADDR_VAR 0 3
26389: PUSH
26390: LD_VAR 0 2
26394: PPUSH
26395: LD_INT 81
26397: PUSH
26398: LD_VAR 0 1
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PPUSH
26407: CALL_OW 70
26411: ST_TO_ADDR
// end ;
26412: LD_VAR 0 3
26416: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26417: LD_INT 0
26419: PPUSH
26420: PPUSH
26421: PPUSH
26422: PPUSH
// result := false ;
26423: LD_ADDR_VAR 0 2
26427: PUSH
26428: LD_INT 0
26430: ST_TO_ADDR
// side := GetSide ( unit ) ;
26431: LD_ADDR_VAR 0 3
26435: PUSH
26436: LD_VAR 0 1
26440: PPUSH
26441: CALL_OW 255
26445: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26446: LD_ADDR_VAR 0 4
26450: PUSH
26451: LD_VAR 0 1
26455: PPUSH
26456: CALL_OW 248
26460: ST_TO_ADDR
// case nat of 1 :
26461: LD_VAR 0 4
26465: PUSH
26466: LD_INT 1
26468: DOUBLE
26469: EQUAL
26470: IFTRUE 26474
26472: GO 26485
26474: POP
// tech := tech_lassight ; 2 :
26475: LD_ADDR_VAR 0 5
26479: PUSH
26480: LD_INT 12
26482: ST_TO_ADDR
26483: GO 26524
26485: LD_INT 2
26487: DOUBLE
26488: EQUAL
26489: IFTRUE 26493
26491: GO 26504
26493: POP
// tech := tech_mortar ; 3 :
26494: LD_ADDR_VAR 0 5
26498: PUSH
26499: LD_INT 41
26501: ST_TO_ADDR
26502: GO 26524
26504: LD_INT 3
26506: DOUBLE
26507: EQUAL
26508: IFTRUE 26512
26510: GO 26523
26512: POP
// tech := tech_bazooka ; end ;
26513: LD_ADDR_VAR 0 5
26517: PUSH
26518: LD_INT 44
26520: ST_TO_ADDR
26521: GO 26524
26523: POP
// if Researched ( side , tech ) then
26524: LD_VAR 0 3
26528: PPUSH
26529: LD_VAR 0 5
26533: PPUSH
26534: CALL_OW 325
26538: IFFALSE 26565
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26540: LD_ADDR_VAR 0 2
26544: PUSH
26545: LD_INT 5
26547: PUSH
26548: LD_INT 8
26550: PUSH
26551: LD_INT 9
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: LIST
26558: PUSH
26559: LD_VAR 0 4
26563: ARRAY
26564: ST_TO_ADDR
// end ;
26565: LD_VAR 0 2
26569: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26570: LD_INT 0
26572: PPUSH
26573: PPUSH
26574: PPUSH
// if not mines then
26575: LD_VAR 0 2
26579: NOT
26580: IFFALSE 26584
// exit ;
26582: GO 26728
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26584: LD_ADDR_VAR 0 5
26588: PUSH
26589: LD_INT 81
26591: PUSH
26592: LD_VAR 0 1
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 3
26603: PUSH
26604: LD_INT 21
26606: PUSH
26607: LD_INT 3
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PPUSH
26622: CALL_OW 69
26626: ST_TO_ADDR
// for i in mines do
26627: LD_ADDR_VAR 0 4
26631: PUSH
26632: LD_VAR 0 2
26636: PUSH
26637: FOR_IN
26638: IFFALSE 26726
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26640: LD_VAR 0 4
26644: PUSH
26645: LD_INT 1
26647: ARRAY
26648: PPUSH
26649: LD_VAR 0 4
26653: PUSH
26654: LD_INT 2
26656: ARRAY
26657: PPUSH
26658: CALL_OW 458
26662: NOT
26663: IFFALSE 26667
// continue ;
26665: GO 26637
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26667: LD_VAR 0 4
26671: PUSH
26672: LD_INT 1
26674: ARRAY
26675: PPUSH
26676: LD_VAR 0 4
26680: PUSH
26681: LD_INT 2
26683: ARRAY
26684: PPUSH
26685: CALL_OW 428
26689: PUSH
26690: LD_VAR 0 5
26694: IN
26695: IFFALSE 26724
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26697: LD_VAR 0 4
26701: PUSH
26702: LD_INT 1
26704: ARRAY
26705: PPUSH
26706: LD_VAR 0 4
26710: PUSH
26711: LD_INT 2
26713: ARRAY
26714: PPUSH
26715: LD_VAR 0 1
26719: PPUSH
26720: CALL_OW 456
// end ;
26724: GO 26637
26726: POP
26727: POP
// end ;
26728: LD_VAR 0 3
26732: RET
// export function Count ( array ) ; var i ; begin
26733: LD_INT 0
26735: PPUSH
26736: PPUSH
// result := 0 ;
26737: LD_ADDR_VAR 0 2
26741: PUSH
26742: LD_INT 0
26744: ST_TO_ADDR
// for i in array do
26745: LD_ADDR_VAR 0 3
26749: PUSH
26750: LD_VAR 0 1
26754: PUSH
26755: FOR_IN
26756: IFFALSE 26780
// if i then
26758: LD_VAR 0 3
26762: IFFALSE 26778
// result := result + 1 ;
26764: LD_ADDR_VAR 0 2
26768: PUSH
26769: LD_VAR 0 2
26773: PUSH
26774: LD_INT 1
26776: PLUS
26777: ST_TO_ADDR
26778: GO 26755
26780: POP
26781: POP
// end ;
26782: LD_VAR 0 2
26786: RET
// export function IsEmpty ( building ) ; begin
26787: LD_INT 0
26789: PPUSH
// if not building then
26790: LD_VAR 0 1
26794: NOT
26795: IFFALSE 26799
// exit ;
26797: GO 26842
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26799: LD_ADDR_VAR 0 2
26803: PUSH
26804: LD_VAR 0 1
26808: PUSH
26809: LD_INT 22
26811: PUSH
26812: LD_VAR 0 1
26816: PPUSH
26817: CALL_OW 255
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 58
26828: PUSH
26829: EMPTY
26830: LIST
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PPUSH
26836: CALL_OW 69
26840: IN
26841: ST_TO_ADDR
// end ;
26842: LD_VAR 0 2
26846: RET
// export function IsNotFull ( building ) ; begin
26847: LD_INT 0
26849: PPUSH
// if not building then
26850: LD_VAR 0 1
26854: NOT
26855: IFFALSE 26859
// exit ;
26857: GO 26878
// result := UnitsInside ( building ) < 6 ;
26859: LD_ADDR_VAR 0 2
26863: PUSH
26864: LD_VAR 0 1
26868: PPUSH
26869: CALL_OW 313
26873: PUSH
26874: LD_INT 6
26876: LESS
26877: ST_TO_ADDR
// end ;
26878: LD_VAR 0 2
26882: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26883: LD_INT 0
26885: PPUSH
26886: PPUSH
26887: PPUSH
26888: PPUSH
// tmp := [ ] ;
26889: LD_ADDR_VAR 0 3
26893: PUSH
26894: EMPTY
26895: ST_TO_ADDR
// list := [ ] ;
26896: LD_ADDR_VAR 0 5
26900: PUSH
26901: EMPTY
26902: ST_TO_ADDR
// for i = 16 to 25 do
26903: LD_ADDR_VAR 0 4
26907: PUSH
26908: DOUBLE
26909: LD_INT 16
26911: DEC
26912: ST_TO_ADDR
26913: LD_INT 25
26915: PUSH
26916: FOR_TO
26917: IFFALSE 26990
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26919: LD_ADDR_VAR 0 3
26923: PUSH
26924: LD_VAR 0 3
26928: PUSH
26929: LD_INT 22
26931: PUSH
26932: LD_VAR 0 1
26936: PPUSH
26937: CALL_OW 255
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 91
26948: PUSH
26949: LD_VAR 0 1
26953: PUSH
26954: LD_INT 6
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 30
26964: PUSH
26965: LD_VAR 0 4
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: LIST
26978: PUSH
26979: EMPTY
26980: LIST
26981: PPUSH
26982: CALL_OW 69
26986: ADD
26987: ST_TO_ADDR
26988: GO 26916
26990: POP
26991: POP
// for i = 1 to tmp do
26992: LD_ADDR_VAR 0 4
26996: PUSH
26997: DOUBLE
26998: LD_INT 1
27000: DEC
27001: ST_TO_ADDR
27002: LD_VAR 0 3
27006: PUSH
27007: FOR_TO
27008: IFFALSE 27096
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27010: LD_ADDR_VAR 0 5
27014: PUSH
27015: LD_VAR 0 5
27019: PUSH
27020: LD_VAR 0 3
27024: PUSH
27025: LD_VAR 0 4
27029: ARRAY
27030: PPUSH
27031: CALL_OW 266
27035: PUSH
27036: LD_VAR 0 3
27040: PUSH
27041: LD_VAR 0 4
27045: ARRAY
27046: PPUSH
27047: CALL_OW 250
27051: PUSH
27052: LD_VAR 0 3
27056: PUSH
27057: LD_VAR 0 4
27061: ARRAY
27062: PPUSH
27063: CALL_OW 251
27067: PUSH
27068: LD_VAR 0 3
27072: PUSH
27073: LD_VAR 0 4
27077: ARRAY
27078: PPUSH
27079: CALL_OW 254
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: PUSH
27090: EMPTY
27091: LIST
27092: ADD
27093: ST_TO_ADDR
27094: GO 27007
27096: POP
27097: POP
// result := list ;
27098: LD_ADDR_VAR 0 2
27102: PUSH
27103: LD_VAR 0 5
27107: ST_TO_ADDR
// end ;
27108: LD_VAR 0 2
27112: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27113: LD_INT 0
27115: PPUSH
27116: PPUSH
27117: PPUSH
27118: PPUSH
27119: PPUSH
27120: PPUSH
27121: PPUSH
// if not factory then
27122: LD_VAR 0 1
27126: NOT
27127: IFFALSE 27131
// exit ;
27129: GO 27724
// if control = control_apeman then
27131: LD_VAR 0 4
27135: PUSH
27136: LD_INT 5
27138: EQUAL
27139: IFFALSE 27248
// begin tmp := UnitsInside ( factory ) ;
27141: LD_ADDR_VAR 0 8
27145: PUSH
27146: LD_VAR 0 1
27150: PPUSH
27151: CALL_OW 313
27155: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27156: LD_VAR 0 8
27160: PPUSH
27161: LD_INT 25
27163: PUSH
27164: LD_INT 12
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PPUSH
27171: CALL_OW 72
27175: NOT
27176: IFFALSE 27186
// control := control_manual ;
27178: LD_ADDR_VAR 0 4
27182: PUSH
27183: LD_INT 1
27185: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27186: LD_ADDR_VAR 0 8
27190: PUSH
27191: LD_VAR 0 1
27195: PPUSH
27196: CALL 26883 0 1
27200: ST_TO_ADDR
// if tmp then
27201: LD_VAR 0 8
27205: IFFALSE 27248
// begin for i in tmp do
27207: LD_ADDR_VAR 0 7
27211: PUSH
27212: LD_VAR 0 8
27216: PUSH
27217: FOR_IN
27218: IFFALSE 27246
// if i [ 1 ] = b_ext_radio then
27220: LD_VAR 0 7
27224: PUSH
27225: LD_INT 1
27227: ARRAY
27228: PUSH
27229: LD_INT 22
27231: EQUAL
27232: IFFALSE 27244
// begin control := control_remote ;
27234: LD_ADDR_VAR 0 4
27238: PUSH
27239: LD_INT 2
27241: ST_TO_ADDR
// break ;
27242: GO 27246
// end ;
27244: GO 27217
27246: POP
27247: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27248: LD_VAR 0 1
27252: PPUSH
27253: LD_VAR 0 2
27257: PPUSH
27258: LD_VAR 0 3
27262: PPUSH
27263: LD_VAR 0 4
27267: PPUSH
27268: LD_VAR 0 5
27272: PPUSH
27273: CALL_OW 448
27277: IFFALSE 27312
// begin result := [ chassis , engine , control , weapon ] ;
27279: LD_ADDR_VAR 0 6
27283: PUSH
27284: LD_VAR 0 2
27288: PUSH
27289: LD_VAR 0 3
27293: PUSH
27294: LD_VAR 0 4
27298: PUSH
27299: LD_VAR 0 5
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: ST_TO_ADDR
// exit ;
27310: GO 27724
// end ; _chassis := AvailableChassisList ( factory ) ;
27312: LD_ADDR_VAR 0 9
27316: PUSH
27317: LD_VAR 0 1
27321: PPUSH
27322: CALL_OW 475
27326: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27327: LD_ADDR_VAR 0 11
27331: PUSH
27332: LD_VAR 0 1
27336: PPUSH
27337: CALL_OW 476
27341: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27342: LD_ADDR_VAR 0 12
27346: PUSH
27347: LD_VAR 0 1
27351: PPUSH
27352: CALL_OW 477
27356: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27357: LD_ADDR_VAR 0 10
27361: PUSH
27362: LD_VAR 0 1
27366: PPUSH
27367: CALL_OW 478
27371: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27372: LD_VAR 0 9
27376: NOT
27377: PUSH
27378: LD_VAR 0 11
27382: NOT
27383: OR
27384: PUSH
27385: LD_VAR 0 12
27389: NOT
27390: OR
27391: PUSH
27392: LD_VAR 0 10
27396: NOT
27397: OR
27398: IFFALSE 27433
// begin result := [ chassis , engine , control , weapon ] ;
27400: LD_ADDR_VAR 0 6
27404: PUSH
27405: LD_VAR 0 2
27409: PUSH
27410: LD_VAR 0 3
27414: PUSH
27415: LD_VAR 0 4
27419: PUSH
27420: LD_VAR 0 5
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: ST_TO_ADDR
// exit ;
27431: GO 27724
// end ; if not chassis in _chassis then
27433: LD_VAR 0 2
27437: PUSH
27438: LD_VAR 0 9
27442: IN
27443: NOT
27444: IFFALSE 27470
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27446: LD_ADDR_VAR 0 2
27450: PUSH
27451: LD_VAR 0 9
27455: PUSH
27456: LD_INT 1
27458: PPUSH
27459: LD_VAR 0 9
27463: PPUSH
27464: CALL_OW 12
27468: ARRAY
27469: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27470: LD_VAR 0 2
27474: PPUSH
27475: LD_VAR 0 3
27479: PPUSH
27480: CALL 27729 0 2
27484: NOT
27485: IFFALSE 27544
// repeat engine := _engine [ 1 ] ;
27487: LD_ADDR_VAR 0 3
27491: PUSH
27492: LD_VAR 0 11
27496: PUSH
27497: LD_INT 1
27499: ARRAY
27500: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27501: LD_ADDR_VAR 0 11
27505: PUSH
27506: LD_VAR 0 11
27510: PPUSH
27511: LD_INT 1
27513: PPUSH
27514: CALL_OW 3
27518: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27519: LD_VAR 0 2
27523: PPUSH
27524: LD_VAR 0 3
27528: PPUSH
27529: CALL 27729 0 2
27533: PUSH
27534: LD_VAR 0 11
27538: PUSH
27539: EMPTY
27540: EQUAL
27541: OR
27542: IFFALSE 27487
// if not control in _control then
27544: LD_VAR 0 4
27548: PUSH
27549: LD_VAR 0 12
27553: IN
27554: NOT
27555: IFFALSE 27581
// control := _control [ rand ( 1 , _control ) ] ;
27557: LD_ADDR_VAR 0 4
27561: PUSH
27562: LD_VAR 0 12
27566: PUSH
27567: LD_INT 1
27569: PPUSH
27570: LD_VAR 0 12
27574: PPUSH
27575: CALL_OW 12
27579: ARRAY
27580: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27581: LD_VAR 0 2
27585: PPUSH
27586: LD_VAR 0 5
27590: PPUSH
27591: CALL 27949 0 2
27595: NOT
27596: IFFALSE 27655
// repeat weapon := _weapon [ 1 ] ;
27598: LD_ADDR_VAR 0 5
27602: PUSH
27603: LD_VAR 0 10
27607: PUSH
27608: LD_INT 1
27610: ARRAY
27611: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27612: LD_ADDR_VAR 0 10
27616: PUSH
27617: LD_VAR 0 10
27621: PPUSH
27622: LD_INT 1
27624: PPUSH
27625: CALL_OW 3
27629: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27630: LD_VAR 0 2
27634: PPUSH
27635: LD_VAR 0 5
27639: PPUSH
27640: CALL 27949 0 2
27644: PUSH
27645: LD_VAR 0 10
27649: PUSH
27650: EMPTY
27651: EQUAL
27652: OR
27653: IFFALSE 27598
// result := [ ] ;
27655: LD_ADDR_VAR 0 6
27659: PUSH
27660: EMPTY
27661: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27662: LD_VAR 0 1
27666: PPUSH
27667: LD_VAR 0 2
27671: PPUSH
27672: LD_VAR 0 3
27676: PPUSH
27677: LD_VAR 0 4
27681: PPUSH
27682: LD_VAR 0 5
27686: PPUSH
27687: CALL_OW 448
27691: IFFALSE 27724
// result := [ chassis , engine , control , weapon ] ;
27693: LD_ADDR_VAR 0 6
27697: PUSH
27698: LD_VAR 0 2
27702: PUSH
27703: LD_VAR 0 3
27707: PUSH
27708: LD_VAR 0 4
27712: PUSH
27713: LD_VAR 0 5
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: ST_TO_ADDR
// end ;
27724: LD_VAR 0 6
27728: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27729: LD_INT 0
27731: PPUSH
// if not chassis or not engine then
27732: LD_VAR 0 1
27736: NOT
27737: PUSH
27738: LD_VAR 0 2
27742: NOT
27743: OR
27744: IFFALSE 27748
// exit ;
27746: GO 27944
// case engine of engine_solar :
27748: LD_VAR 0 2
27752: PUSH
27753: LD_INT 2
27755: DOUBLE
27756: EQUAL
27757: IFTRUE 27761
27759: GO 27799
27761: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27762: LD_ADDR_VAR 0 3
27766: PUSH
27767: LD_INT 11
27769: PUSH
27770: LD_INT 12
27772: PUSH
27773: LD_INT 13
27775: PUSH
27776: LD_INT 14
27778: PUSH
27779: LD_INT 1
27781: PUSH
27782: LD_INT 2
27784: PUSH
27785: LD_INT 3
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: ST_TO_ADDR
27797: GO 27928
27799: LD_INT 1
27801: DOUBLE
27802: EQUAL
27803: IFTRUE 27807
27805: GO 27869
27807: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27808: LD_ADDR_VAR 0 3
27812: PUSH
27813: LD_INT 11
27815: PUSH
27816: LD_INT 12
27818: PUSH
27819: LD_INT 13
27821: PUSH
27822: LD_INT 14
27824: PUSH
27825: LD_INT 1
27827: PUSH
27828: LD_INT 2
27830: PUSH
27831: LD_INT 3
27833: PUSH
27834: LD_INT 4
27836: PUSH
27837: LD_INT 5
27839: PUSH
27840: LD_INT 21
27842: PUSH
27843: LD_INT 23
27845: PUSH
27846: LD_INT 22
27848: PUSH
27849: LD_INT 24
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: ST_TO_ADDR
27867: GO 27928
27869: LD_INT 3
27871: DOUBLE
27872: EQUAL
27873: IFTRUE 27877
27875: GO 27927
27877: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27878: LD_ADDR_VAR 0 3
27882: PUSH
27883: LD_INT 13
27885: PUSH
27886: LD_INT 14
27888: PUSH
27889: LD_INT 2
27891: PUSH
27892: LD_INT 3
27894: PUSH
27895: LD_INT 4
27897: PUSH
27898: LD_INT 5
27900: PUSH
27901: LD_INT 21
27903: PUSH
27904: LD_INT 22
27906: PUSH
27907: LD_INT 23
27909: PUSH
27910: LD_INT 24
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: ST_TO_ADDR
27925: GO 27928
27927: POP
// result := ( chassis in result ) ;
27928: LD_ADDR_VAR 0 3
27932: PUSH
27933: LD_VAR 0 1
27937: PUSH
27938: LD_VAR 0 3
27942: IN
27943: ST_TO_ADDR
// end ;
27944: LD_VAR 0 3
27948: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27949: LD_INT 0
27951: PPUSH
// if not chassis or not weapon then
27952: LD_VAR 0 1
27956: NOT
27957: PUSH
27958: LD_VAR 0 2
27962: NOT
27963: OR
27964: IFFALSE 27968
// exit ;
27966: GO 29030
// case weapon of us_machine_gun :
27968: LD_VAR 0 2
27972: PUSH
27973: LD_INT 2
27975: DOUBLE
27976: EQUAL
27977: IFTRUE 27981
27979: GO 28011
27981: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27982: LD_ADDR_VAR 0 3
27986: PUSH
27987: LD_INT 1
27989: PUSH
27990: LD_INT 2
27992: PUSH
27993: LD_INT 3
27995: PUSH
27996: LD_INT 4
27998: PUSH
27999: LD_INT 5
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: ST_TO_ADDR
28009: GO 29014
28011: LD_INT 3
28013: DOUBLE
28014: EQUAL
28015: IFTRUE 28019
28017: GO 28049
28019: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28020: LD_ADDR_VAR 0 3
28024: PUSH
28025: LD_INT 1
28027: PUSH
28028: LD_INT 2
28030: PUSH
28031: LD_INT 3
28033: PUSH
28034: LD_INT 4
28036: PUSH
28037: LD_INT 5
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: ST_TO_ADDR
28047: GO 29014
28049: LD_INT 11
28051: DOUBLE
28052: EQUAL
28053: IFTRUE 28057
28055: GO 28087
28057: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28058: LD_ADDR_VAR 0 3
28062: PUSH
28063: LD_INT 1
28065: PUSH
28066: LD_INT 2
28068: PUSH
28069: LD_INT 3
28071: PUSH
28072: LD_INT 4
28074: PUSH
28075: LD_INT 5
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: ST_TO_ADDR
28085: GO 29014
28087: LD_INT 4
28089: DOUBLE
28090: EQUAL
28091: IFTRUE 28095
28093: GO 28121
28095: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28096: LD_ADDR_VAR 0 3
28100: PUSH
28101: LD_INT 2
28103: PUSH
28104: LD_INT 3
28106: PUSH
28107: LD_INT 4
28109: PUSH
28110: LD_INT 5
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: ST_TO_ADDR
28119: GO 29014
28121: LD_INT 5
28123: DOUBLE
28124: EQUAL
28125: IFTRUE 28129
28127: GO 28155
28129: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28130: LD_ADDR_VAR 0 3
28134: PUSH
28135: LD_INT 2
28137: PUSH
28138: LD_INT 3
28140: PUSH
28141: LD_INT 4
28143: PUSH
28144: LD_INT 5
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: ST_TO_ADDR
28153: GO 29014
28155: LD_INT 9
28157: DOUBLE
28158: EQUAL
28159: IFTRUE 28163
28161: GO 28189
28163: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28164: LD_ADDR_VAR 0 3
28168: PUSH
28169: LD_INT 2
28171: PUSH
28172: LD_INT 3
28174: PUSH
28175: LD_INT 4
28177: PUSH
28178: LD_INT 5
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: ST_TO_ADDR
28187: GO 29014
28189: LD_INT 7
28191: DOUBLE
28192: EQUAL
28193: IFTRUE 28197
28195: GO 28223
28197: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28198: LD_ADDR_VAR 0 3
28202: PUSH
28203: LD_INT 2
28205: PUSH
28206: LD_INT 3
28208: PUSH
28209: LD_INT 4
28211: PUSH
28212: LD_INT 5
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: ST_TO_ADDR
28221: GO 29014
28223: LD_INT 12
28225: DOUBLE
28226: EQUAL
28227: IFTRUE 28231
28229: GO 28257
28231: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28232: LD_ADDR_VAR 0 3
28236: PUSH
28237: LD_INT 2
28239: PUSH
28240: LD_INT 3
28242: PUSH
28243: LD_INT 4
28245: PUSH
28246: LD_INT 5
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: ST_TO_ADDR
28255: GO 29014
28257: LD_INT 13
28259: DOUBLE
28260: EQUAL
28261: IFTRUE 28265
28263: GO 28291
28265: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28266: LD_ADDR_VAR 0 3
28270: PUSH
28271: LD_INT 2
28273: PUSH
28274: LD_INT 3
28276: PUSH
28277: LD_INT 4
28279: PUSH
28280: LD_INT 5
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: ST_TO_ADDR
28289: GO 29014
28291: LD_INT 14
28293: DOUBLE
28294: EQUAL
28295: IFTRUE 28299
28297: GO 28317
28299: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28300: LD_ADDR_VAR 0 3
28304: PUSH
28305: LD_INT 4
28307: PUSH
28308: LD_INT 5
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: ST_TO_ADDR
28315: GO 29014
28317: LD_INT 6
28319: DOUBLE
28320: EQUAL
28321: IFTRUE 28325
28323: GO 28343
28325: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28326: LD_ADDR_VAR 0 3
28330: PUSH
28331: LD_INT 4
28333: PUSH
28334: LD_INT 5
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: ST_TO_ADDR
28341: GO 29014
28343: LD_INT 10
28345: DOUBLE
28346: EQUAL
28347: IFTRUE 28351
28349: GO 28369
28351: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28352: LD_ADDR_VAR 0 3
28356: PUSH
28357: LD_INT 4
28359: PUSH
28360: LD_INT 5
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: ST_TO_ADDR
28367: GO 29014
28369: LD_INT 22
28371: DOUBLE
28372: EQUAL
28373: IFTRUE 28377
28375: GO 28403
28377: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28378: LD_ADDR_VAR 0 3
28382: PUSH
28383: LD_INT 11
28385: PUSH
28386: LD_INT 12
28388: PUSH
28389: LD_INT 13
28391: PUSH
28392: LD_INT 14
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: ST_TO_ADDR
28401: GO 29014
28403: LD_INT 23
28405: DOUBLE
28406: EQUAL
28407: IFTRUE 28411
28409: GO 28437
28411: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28412: LD_ADDR_VAR 0 3
28416: PUSH
28417: LD_INT 11
28419: PUSH
28420: LD_INT 12
28422: PUSH
28423: LD_INT 13
28425: PUSH
28426: LD_INT 14
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: LIST
28433: LIST
28434: ST_TO_ADDR
28435: GO 29014
28437: LD_INT 24
28439: DOUBLE
28440: EQUAL
28441: IFTRUE 28445
28443: GO 28471
28445: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28446: LD_ADDR_VAR 0 3
28450: PUSH
28451: LD_INT 11
28453: PUSH
28454: LD_INT 12
28456: PUSH
28457: LD_INT 13
28459: PUSH
28460: LD_INT 14
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: ST_TO_ADDR
28469: GO 29014
28471: LD_INT 30
28473: DOUBLE
28474: EQUAL
28475: IFTRUE 28479
28477: GO 28505
28479: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28480: LD_ADDR_VAR 0 3
28484: PUSH
28485: LD_INT 11
28487: PUSH
28488: LD_INT 12
28490: PUSH
28491: LD_INT 13
28493: PUSH
28494: LD_INT 14
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: ST_TO_ADDR
28503: GO 29014
28505: LD_INT 25
28507: DOUBLE
28508: EQUAL
28509: IFTRUE 28513
28511: GO 28531
28513: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28514: LD_ADDR_VAR 0 3
28518: PUSH
28519: LD_INT 13
28521: PUSH
28522: LD_INT 14
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: ST_TO_ADDR
28529: GO 29014
28531: LD_INT 27
28533: DOUBLE
28534: EQUAL
28535: IFTRUE 28539
28537: GO 28557
28539: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28540: LD_ADDR_VAR 0 3
28544: PUSH
28545: LD_INT 13
28547: PUSH
28548: LD_INT 14
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: ST_TO_ADDR
28555: GO 29014
28557: LD_EXP 63
28561: DOUBLE
28562: EQUAL
28563: IFTRUE 28567
28565: GO 28593
28567: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28568: LD_ADDR_VAR 0 3
28572: PUSH
28573: LD_INT 11
28575: PUSH
28576: LD_INT 12
28578: PUSH
28579: LD_INT 13
28581: PUSH
28582: LD_INT 14
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: ST_TO_ADDR
28591: GO 29014
28593: LD_INT 28
28595: DOUBLE
28596: EQUAL
28597: IFTRUE 28601
28599: GO 28619
28601: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28602: LD_ADDR_VAR 0 3
28606: PUSH
28607: LD_INT 13
28609: PUSH
28610: LD_INT 14
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: ST_TO_ADDR
28617: GO 29014
28619: LD_INT 29
28621: DOUBLE
28622: EQUAL
28623: IFTRUE 28627
28625: GO 28645
28627: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28628: LD_ADDR_VAR 0 3
28632: PUSH
28633: LD_INT 13
28635: PUSH
28636: LD_INT 14
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: ST_TO_ADDR
28643: GO 29014
28645: LD_INT 31
28647: DOUBLE
28648: EQUAL
28649: IFTRUE 28653
28651: GO 28671
28653: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28654: LD_ADDR_VAR 0 3
28658: PUSH
28659: LD_INT 13
28661: PUSH
28662: LD_INT 14
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: ST_TO_ADDR
28669: GO 29014
28671: LD_INT 26
28673: DOUBLE
28674: EQUAL
28675: IFTRUE 28679
28677: GO 28697
28679: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28680: LD_ADDR_VAR 0 3
28684: PUSH
28685: LD_INT 13
28687: PUSH
28688: LD_INT 14
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: ST_TO_ADDR
28695: GO 29014
28697: LD_INT 42
28699: DOUBLE
28700: EQUAL
28701: IFTRUE 28705
28703: GO 28731
28705: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28706: LD_ADDR_VAR 0 3
28710: PUSH
28711: LD_INT 21
28713: PUSH
28714: LD_INT 22
28716: PUSH
28717: LD_INT 23
28719: PUSH
28720: LD_INT 24
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: ST_TO_ADDR
28729: GO 29014
28731: LD_INT 43
28733: DOUBLE
28734: EQUAL
28735: IFTRUE 28739
28737: GO 28765
28739: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28740: LD_ADDR_VAR 0 3
28744: PUSH
28745: LD_INT 21
28747: PUSH
28748: LD_INT 22
28750: PUSH
28751: LD_INT 23
28753: PUSH
28754: LD_INT 24
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: ST_TO_ADDR
28763: GO 29014
28765: LD_INT 44
28767: DOUBLE
28768: EQUAL
28769: IFTRUE 28773
28771: GO 28799
28773: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28774: LD_ADDR_VAR 0 3
28778: PUSH
28779: LD_INT 21
28781: PUSH
28782: LD_INT 22
28784: PUSH
28785: LD_INT 23
28787: PUSH
28788: LD_INT 24
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: ST_TO_ADDR
28797: GO 29014
28799: LD_INT 45
28801: DOUBLE
28802: EQUAL
28803: IFTRUE 28807
28805: GO 28833
28807: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28808: LD_ADDR_VAR 0 3
28812: PUSH
28813: LD_INT 21
28815: PUSH
28816: LD_INT 22
28818: PUSH
28819: LD_INT 23
28821: PUSH
28822: LD_INT 24
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: ST_TO_ADDR
28831: GO 29014
28833: LD_INT 49
28835: DOUBLE
28836: EQUAL
28837: IFTRUE 28841
28839: GO 28867
28841: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28842: LD_ADDR_VAR 0 3
28846: PUSH
28847: LD_INT 21
28849: PUSH
28850: LD_INT 22
28852: PUSH
28853: LD_INT 23
28855: PUSH
28856: LD_INT 24
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: ST_TO_ADDR
28865: GO 29014
28867: LD_INT 51
28869: DOUBLE
28870: EQUAL
28871: IFTRUE 28875
28873: GO 28901
28875: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28876: LD_ADDR_VAR 0 3
28880: PUSH
28881: LD_INT 21
28883: PUSH
28884: LD_INT 22
28886: PUSH
28887: LD_INT 23
28889: PUSH
28890: LD_INT 24
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: ST_TO_ADDR
28899: GO 29014
28901: LD_INT 52
28903: DOUBLE
28904: EQUAL
28905: IFTRUE 28909
28907: GO 28935
28909: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28910: LD_ADDR_VAR 0 3
28914: PUSH
28915: LD_INT 21
28917: PUSH
28918: LD_INT 22
28920: PUSH
28921: LD_INT 23
28923: PUSH
28924: LD_INT 24
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: ST_TO_ADDR
28933: GO 29014
28935: LD_INT 53
28937: DOUBLE
28938: EQUAL
28939: IFTRUE 28943
28941: GO 28961
28943: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28944: LD_ADDR_VAR 0 3
28948: PUSH
28949: LD_INT 23
28951: PUSH
28952: LD_INT 24
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: ST_TO_ADDR
28959: GO 29014
28961: LD_INT 46
28963: DOUBLE
28964: EQUAL
28965: IFTRUE 28969
28967: GO 28987
28969: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28970: LD_ADDR_VAR 0 3
28974: PUSH
28975: LD_INT 23
28977: PUSH
28978: LD_INT 24
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: ST_TO_ADDR
28985: GO 29014
28987: LD_INT 47
28989: DOUBLE
28990: EQUAL
28991: IFTRUE 28995
28993: GO 29013
28995: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28996: LD_ADDR_VAR 0 3
29000: PUSH
29001: LD_INT 23
29003: PUSH
29004: LD_INT 24
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: ST_TO_ADDR
29011: GO 29014
29013: POP
// result := ( chassis in result ) ;
29014: LD_ADDR_VAR 0 3
29018: PUSH
29019: LD_VAR 0 1
29023: PUSH
29024: LD_VAR 0 3
29028: IN
29029: ST_TO_ADDR
// end ;
29030: LD_VAR 0 3
29034: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29035: LD_INT 0
29037: PPUSH
29038: PPUSH
29039: PPUSH
29040: PPUSH
29041: PPUSH
29042: PPUSH
29043: PPUSH
// result := array ;
29044: LD_ADDR_VAR 0 5
29048: PUSH
29049: LD_VAR 0 1
29053: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29054: LD_VAR 0 1
29058: NOT
29059: PUSH
29060: LD_VAR 0 2
29064: NOT
29065: OR
29066: PUSH
29067: LD_VAR 0 3
29071: NOT
29072: OR
29073: PUSH
29074: LD_VAR 0 2
29078: PUSH
29079: LD_VAR 0 1
29083: GREATER
29084: OR
29085: PUSH
29086: LD_VAR 0 3
29090: PUSH
29091: LD_VAR 0 1
29095: GREATER
29096: OR
29097: IFFALSE 29101
// exit ;
29099: GO 29397
// if direction then
29101: LD_VAR 0 4
29105: IFFALSE 29169
// begin d := 1 ;
29107: LD_ADDR_VAR 0 9
29111: PUSH
29112: LD_INT 1
29114: ST_TO_ADDR
// if i_from > i_to then
29115: LD_VAR 0 2
29119: PUSH
29120: LD_VAR 0 3
29124: GREATER
29125: IFFALSE 29151
// length := ( array - i_from ) + i_to else
29127: LD_ADDR_VAR 0 11
29131: PUSH
29132: LD_VAR 0 1
29136: PUSH
29137: LD_VAR 0 2
29141: MINUS
29142: PUSH
29143: LD_VAR 0 3
29147: PLUS
29148: ST_TO_ADDR
29149: GO 29167
// length := i_to - i_from ;
29151: LD_ADDR_VAR 0 11
29155: PUSH
29156: LD_VAR 0 3
29160: PUSH
29161: LD_VAR 0 2
29165: MINUS
29166: ST_TO_ADDR
// end else
29167: GO 29230
// begin d := - 1 ;
29169: LD_ADDR_VAR 0 9
29173: PUSH
29174: LD_INT 1
29176: NEG
29177: ST_TO_ADDR
// if i_from > i_to then
29178: LD_VAR 0 2
29182: PUSH
29183: LD_VAR 0 3
29187: GREATER
29188: IFFALSE 29208
// length := i_from - i_to else
29190: LD_ADDR_VAR 0 11
29194: PUSH
29195: LD_VAR 0 2
29199: PUSH
29200: LD_VAR 0 3
29204: MINUS
29205: ST_TO_ADDR
29206: GO 29230
// length := ( array - i_to ) + i_from ;
29208: LD_ADDR_VAR 0 11
29212: PUSH
29213: LD_VAR 0 1
29217: PUSH
29218: LD_VAR 0 3
29222: MINUS
29223: PUSH
29224: LD_VAR 0 2
29228: PLUS
29229: ST_TO_ADDR
// end ; if not length then
29230: LD_VAR 0 11
29234: NOT
29235: IFFALSE 29239
// exit ;
29237: GO 29397
// tmp := array ;
29239: LD_ADDR_VAR 0 10
29243: PUSH
29244: LD_VAR 0 1
29248: ST_TO_ADDR
// for i = 1 to length do
29249: LD_ADDR_VAR 0 6
29253: PUSH
29254: DOUBLE
29255: LD_INT 1
29257: DEC
29258: ST_TO_ADDR
29259: LD_VAR 0 11
29263: PUSH
29264: FOR_TO
29265: IFFALSE 29385
// begin for j = 1 to array do
29267: LD_ADDR_VAR 0 7
29271: PUSH
29272: DOUBLE
29273: LD_INT 1
29275: DEC
29276: ST_TO_ADDR
29277: LD_VAR 0 1
29281: PUSH
29282: FOR_TO
29283: IFFALSE 29371
// begin k := j + d ;
29285: LD_ADDR_VAR 0 8
29289: PUSH
29290: LD_VAR 0 7
29294: PUSH
29295: LD_VAR 0 9
29299: PLUS
29300: ST_TO_ADDR
// if k > array then
29301: LD_VAR 0 8
29305: PUSH
29306: LD_VAR 0 1
29310: GREATER
29311: IFFALSE 29321
// k := 1 ;
29313: LD_ADDR_VAR 0 8
29317: PUSH
29318: LD_INT 1
29320: ST_TO_ADDR
// if not k then
29321: LD_VAR 0 8
29325: NOT
29326: IFFALSE 29338
// k := array ;
29328: LD_ADDR_VAR 0 8
29332: PUSH
29333: LD_VAR 0 1
29337: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29338: LD_ADDR_VAR 0 10
29342: PUSH
29343: LD_VAR 0 10
29347: PPUSH
29348: LD_VAR 0 8
29352: PPUSH
29353: LD_VAR 0 1
29357: PUSH
29358: LD_VAR 0 7
29362: ARRAY
29363: PPUSH
29364: CALL_OW 1
29368: ST_TO_ADDR
// end ;
29369: GO 29282
29371: POP
29372: POP
// array := tmp ;
29373: LD_ADDR_VAR 0 1
29377: PUSH
29378: LD_VAR 0 10
29382: ST_TO_ADDR
// end ;
29383: GO 29264
29385: POP
29386: POP
// result := array ;
29387: LD_ADDR_VAR 0 5
29391: PUSH
29392: LD_VAR 0 1
29396: ST_TO_ADDR
// end ;
29397: LD_VAR 0 5
29401: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29402: LD_INT 0
29404: PPUSH
29405: PPUSH
// result := 0 ;
29406: LD_ADDR_VAR 0 3
29410: PUSH
29411: LD_INT 0
29413: ST_TO_ADDR
// if not array or not value in array then
29414: LD_VAR 0 1
29418: NOT
29419: PUSH
29420: LD_VAR 0 2
29424: PUSH
29425: LD_VAR 0 1
29429: IN
29430: NOT
29431: OR
29432: IFFALSE 29436
// exit ;
29434: GO 29490
// for i = 1 to array do
29436: LD_ADDR_VAR 0 4
29440: PUSH
29441: DOUBLE
29442: LD_INT 1
29444: DEC
29445: ST_TO_ADDR
29446: LD_VAR 0 1
29450: PUSH
29451: FOR_TO
29452: IFFALSE 29488
// if value = array [ i ] then
29454: LD_VAR 0 2
29458: PUSH
29459: LD_VAR 0 1
29463: PUSH
29464: LD_VAR 0 4
29468: ARRAY
29469: EQUAL
29470: IFFALSE 29486
// begin result := i ;
29472: LD_ADDR_VAR 0 3
29476: PUSH
29477: LD_VAR 0 4
29481: ST_TO_ADDR
// exit ;
29482: POP
29483: POP
29484: GO 29490
// end ;
29486: GO 29451
29488: POP
29489: POP
// end ;
29490: LD_VAR 0 3
29494: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29495: LD_INT 0
29497: PPUSH
// vc_chassis := chassis ;
29498: LD_ADDR_OWVAR 37
29502: PUSH
29503: LD_VAR 0 1
29507: ST_TO_ADDR
// vc_engine := engine ;
29508: LD_ADDR_OWVAR 39
29512: PUSH
29513: LD_VAR 0 2
29517: ST_TO_ADDR
// vc_control := control ;
29518: LD_ADDR_OWVAR 38
29522: PUSH
29523: LD_VAR 0 3
29527: ST_TO_ADDR
// vc_weapon := weapon ;
29528: LD_ADDR_OWVAR 40
29532: PUSH
29533: LD_VAR 0 4
29537: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29538: LD_ADDR_OWVAR 41
29542: PUSH
29543: LD_VAR 0 5
29547: ST_TO_ADDR
// end ;
29548: LD_VAR 0 6
29552: RET
// export function WantPlant ( unit ) ; var task ; begin
29553: LD_INT 0
29555: PPUSH
29556: PPUSH
// result := false ;
29557: LD_ADDR_VAR 0 2
29561: PUSH
29562: LD_INT 0
29564: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29565: LD_ADDR_VAR 0 3
29569: PUSH
29570: LD_VAR 0 1
29574: PPUSH
29575: CALL_OW 437
29579: ST_TO_ADDR
// if task then
29580: LD_VAR 0 3
29584: IFFALSE 29612
// if task [ 1 ] [ 1 ] = p then
29586: LD_VAR 0 3
29590: PUSH
29591: LD_INT 1
29593: ARRAY
29594: PUSH
29595: LD_INT 1
29597: ARRAY
29598: PUSH
29599: LD_STRING p
29601: EQUAL
29602: IFFALSE 29612
// result := true ;
29604: LD_ADDR_VAR 0 2
29608: PUSH
29609: LD_INT 1
29611: ST_TO_ADDR
// end ;
29612: LD_VAR 0 2
29616: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29617: LD_INT 0
29619: PPUSH
29620: PPUSH
29621: PPUSH
29622: PPUSH
// if pos < 1 then
29623: LD_VAR 0 2
29627: PUSH
29628: LD_INT 1
29630: LESS
29631: IFFALSE 29635
// exit ;
29633: GO 29938
// if pos = 1 then
29635: LD_VAR 0 2
29639: PUSH
29640: LD_INT 1
29642: EQUAL
29643: IFFALSE 29676
// result := Replace ( arr , pos [ 1 ] , value ) else
29645: LD_ADDR_VAR 0 4
29649: PUSH
29650: LD_VAR 0 1
29654: PPUSH
29655: LD_VAR 0 2
29659: PUSH
29660: LD_INT 1
29662: ARRAY
29663: PPUSH
29664: LD_VAR 0 3
29668: PPUSH
29669: CALL_OW 1
29673: ST_TO_ADDR
29674: GO 29938
// begin tmp := arr ;
29676: LD_ADDR_VAR 0 6
29680: PUSH
29681: LD_VAR 0 1
29685: ST_TO_ADDR
// s_arr := [ tmp ] ;
29686: LD_ADDR_VAR 0 7
29690: PUSH
29691: LD_VAR 0 6
29695: PUSH
29696: EMPTY
29697: LIST
29698: ST_TO_ADDR
// for i = 1 to pos - 1 do
29699: LD_ADDR_VAR 0 5
29703: PUSH
29704: DOUBLE
29705: LD_INT 1
29707: DEC
29708: ST_TO_ADDR
29709: LD_VAR 0 2
29713: PUSH
29714: LD_INT 1
29716: MINUS
29717: PUSH
29718: FOR_TO
29719: IFFALSE 29764
// begin tmp := tmp [ pos [ i ] ] ;
29721: LD_ADDR_VAR 0 6
29725: PUSH
29726: LD_VAR 0 6
29730: PUSH
29731: LD_VAR 0 2
29735: PUSH
29736: LD_VAR 0 5
29740: ARRAY
29741: ARRAY
29742: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29743: LD_ADDR_VAR 0 7
29747: PUSH
29748: LD_VAR 0 7
29752: PUSH
29753: LD_VAR 0 6
29757: PUSH
29758: EMPTY
29759: LIST
29760: ADD
29761: ST_TO_ADDR
// end ;
29762: GO 29718
29764: POP
29765: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29766: LD_ADDR_VAR 0 6
29770: PUSH
29771: LD_VAR 0 6
29775: PPUSH
29776: LD_VAR 0 2
29780: PUSH
29781: LD_VAR 0 2
29785: ARRAY
29786: PPUSH
29787: LD_VAR 0 3
29791: PPUSH
29792: CALL_OW 1
29796: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29797: LD_ADDR_VAR 0 7
29801: PUSH
29802: LD_VAR 0 7
29806: PPUSH
29807: LD_VAR 0 7
29811: PPUSH
29812: LD_VAR 0 6
29816: PPUSH
29817: CALL_OW 1
29821: ST_TO_ADDR
// for i = s_arr downto 2 do
29822: LD_ADDR_VAR 0 5
29826: PUSH
29827: DOUBLE
29828: LD_VAR 0 7
29832: INC
29833: ST_TO_ADDR
29834: LD_INT 2
29836: PUSH
29837: FOR_DOWNTO
29838: IFFALSE 29922
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29840: LD_ADDR_VAR 0 6
29844: PUSH
29845: LD_VAR 0 7
29849: PUSH
29850: LD_VAR 0 5
29854: PUSH
29855: LD_INT 1
29857: MINUS
29858: ARRAY
29859: PPUSH
29860: LD_VAR 0 2
29864: PUSH
29865: LD_VAR 0 5
29869: PUSH
29870: LD_INT 1
29872: MINUS
29873: ARRAY
29874: PPUSH
29875: LD_VAR 0 7
29879: PUSH
29880: LD_VAR 0 5
29884: ARRAY
29885: PPUSH
29886: CALL_OW 1
29890: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29891: LD_ADDR_VAR 0 7
29895: PUSH
29896: LD_VAR 0 7
29900: PPUSH
29901: LD_VAR 0 5
29905: PUSH
29906: LD_INT 1
29908: MINUS
29909: PPUSH
29910: LD_VAR 0 6
29914: PPUSH
29915: CALL_OW 1
29919: ST_TO_ADDR
// end ;
29920: GO 29837
29922: POP
29923: POP
// result := s_arr [ 1 ] ;
29924: LD_ADDR_VAR 0 4
29928: PUSH
29929: LD_VAR 0 7
29933: PUSH
29934: LD_INT 1
29936: ARRAY
29937: ST_TO_ADDR
// end ; end ;
29938: LD_VAR 0 4
29942: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29943: LD_INT 0
29945: PPUSH
29946: PPUSH
// if not list then
29947: LD_VAR 0 1
29951: NOT
29952: IFFALSE 29956
// exit ;
29954: GO 30047
// i := list [ pos1 ] ;
29956: LD_ADDR_VAR 0 5
29960: PUSH
29961: LD_VAR 0 1
29965: PUSH
29966: LD_VAR 0 2
29970: ARRAY
29971: ST_TO_ADDR
// if not i then
29972: LD_VAR 0 5
29976: NOT
29977: IFFALSE 29981
// exit ;
29979: GO 30047
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29981: LD_ADDR_VAR 0 1
29985: PUSH
29986: LD_VAR 0 1
29990: PPUSH
29991: LD_VAR 0 2
29995: PPUSH
29996: LD_VAR 0 1
30000: PUSH
30001: LD_VAR 0 3
30005: ARRAY
30006: PPUSH
30007: CALL_OW 1
30011: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30012: LD_ADDR_VAR 0 1
30016: PUSH
30017: LD_VAR 0 1
30021: PPUSH
30022: LD_VAR 0 3
30026: PPUSH
30027: LD_VAR 0 5
30031: PPUSH
30032: CALL_OW 1
30036: ST_TO_ADDR
// result := list ;
30037: LD_ADDR_VAR 0 4
30041: PUSH
30042: LD_VAR 0 1
30046: ST_TO_ADDR
// end ;
30047: LD_VAR 0 4
30051: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30052: LD_INT 0
30054: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30055: LD_ADDR_VAR 0 5
30059: PUSH
30060: LD_VAR 0 1
30064: PPUSH
30065: CALL_OW 250
30069: PPUSH
30070: LD_VAR 0 1
30074: PPUSH
30075: CALL_OW 251
30079: PPUSH
30080: LD_VAR 0 2
30084: PPUSH
30085: LD_VAR 0 3
30089: PPUSH
30090: LD_VAR 0 4
30094: PPUSH
30095: CALL 30105 0 5
30099: ST_TO_ADDR
// end ;
30100: LD_VAR 0 5
30104: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30105: LD_INT 0
30107: PPUSH
30108: PPUSH
30109: PPUSH
30110: PPUSH
// if not list then
30111: LD_VAR 0 3
30115: NOT
30116: IFFALSE 30120
// exit ;
30118: GO 30508
// result := [ ] ;
30120: LD_ADDR_VAR 0 6
30124: PUSH
30125: EMPTY
30126: ST_TO_ADDR
// for i in list do
30127: LD_ADDR_VAR 0 7
30131: PUSH
30132: LD_VAR 0 3
30136: PUSH
30137: FOR_IN
30138: IFFALSE 30340
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30140: LD_ADDR_VAR 0 9
30144: PUSH
30145: LD_VAR 0 7
30149: PPUSH
30150: LD_VAR 0 1
30154: PPUSH
30155: LD_VAR 0 2
30159: PPUSH
30160: CALL_OW 297
30164: ST_TO_ADDR
// if not result then
30165: LD_VAR 0 6
30169: NOT
30170: IFFALSE 30196
// result := [ [ i , tmp ] ] else
30172: LD_ADDR_VAR 0 6
30176: PUSH
30177: LD_VAR 0 7
30181: PUSH
30182: LD_VAR 0 9
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: EMPTY
30192: LIST
30193: ST_TO_ADDR
30194: GO 30338
// begin if result [ result ] [ 2 ] < tmp then
30196: LD_VAR 0 6
30200: PUSH
30201: LD_VAR 0 6
30205: ARRAY
30206: PUSH
30207: LD_INT 2
30209: ARRAY
30210: PUSH
30211: LD_VAR 0 9
30215: LESS
30216: IFFALSE 30258
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30218: LD_ADDR_VAR 0 6
30222: PUSH
30223: LD_VAR 0 6
30227: PPUSH
30228: LD_VAR 0 6
30232: PUSH
30233: LD_INT 1
30235: PLUS
30236: PPUSH
30237: LD_VAR 0 7
30241: PUSH
30242: LD_VAR 0 9
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PPUSH
30251: CALL_OW 2
30255: ST_TO_ADDR
30256: GO 30338
// for j = 1 to result do
30258: LD_ADDR_VAR 0 8
30262: PUSH
30263: DOUBLE
30264: LD_INT 1
30266: DEC
30267: ST_TO_ADDR
30268: LD_VAR 0 6
30272: PUSH
30273: FOR_TO
30274: IFFALSE 30336
// begin if tmp < result [ j ] [ 2 ] then
30276: LD_VAR 0 9
30280: PUSH
30281: LD_VAR 0 6
30285: PUSH
30286: LD_VAR 0 8
30290: ARRAY
30291: PUSH
30292: LD_INT 2
30294: ARRAY
30295: LESS
30296: IFFALSE 30334
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30298: LD_ADDR_VAR 0 6
30302: PUSH
30303: LD_VAR 0 6
30307: PPUSH
30308: LD_VAR 0 8
30312: PPUSH
30313: LD_VAR 0 7
30317: PUSH
30318: LD_VAR 0 9
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PPUSH
30327: CALL_OW 2
30331: ST_TO_ADDR
// break ;
30332: GO 30336
// end ; end ;
30334: GO 30273
30336: POP
30337: POP
// end ; end ;
30338: GO 30137
30340: POP
30341: POP
// if result and not asc then
30342: LD_VAR 0 6
30346: PUSH
30347: LD_VAR 0 4
30351: NOT
30352: AND
30353: IFFALSE 30428
// begin tmp := result ;
30355: LD_ADDR_VAR 0 9
30359: PUSH
30360: LD_VAR 0 6
30364: ST_TO_ADDR
// for i = tmp downto 1 do
30365: LD_ADDR_VAR 0 7
30369: PUSH
30370: DOUBLE
30371: LD_VAR 0 9
30375: INC
30376: ST_TO_ADDR
30377: LD_INT 1
30379: PUSH
30380: FOR_DOWNTO
30381: IFFALSE 30426
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30383: LD_ADDR_VAR 0 6
30387: PUSH
30388: LD_VAR 0 6
30392: PPUSH
30393: LD_VAR 0 9
30397: PUSH
30398: LD_VAR 0 7
30402: MINUS
30403: PUSH
30404: LD_INT 1
30406: PLUS
30407: PPUSH
30408: LD_VAR 0 9
30412: PUSH
30413: LD_VAR 0 7
30417: ARRAY
30418: PPUSH
30419: CALL_OW 1
30423: ST_TO_ADDR
30424: GO 30380
30426: POP
30427: POP
// end ; tmp := [ ] ;
30428: LD_ADDR_VAR 0 9
30432: PUSH
30433: EMPTY
30434: ST_TO_ADDR
// if mode then
30435: LD_VAR 0 5
30439: IFFALSE 30508
// begin for i = 1 to result do
30441: LD_ADDR_VAR 0 7
30445: PUSH
30446: DOUBLE
30447: LD_INT 1
30449: DEC
30450: ST_TO_ADDR
30451: LD_VAR 0 6
30455: PUSH
30456: FOR_TO
30457: IFFALSE 30496
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30459: LD_ADDR_VAR 0 9
30463: PUSH
30464: LD_VAR 0 9
30468: PPUSH
30469: LD_VAR 0 7
30473: PPUSH
30474: LD_VAR 0 6
30478: PUSH
30479: LD_VAR 0 7
30483: ARRAY
30484: PUSH
30485: LD_INT 1
30487: ARRAY
30488: PPUSH
30489: CALL_OW 1
30493: ST_TO_ADDR
30494: GO 30456
30496: POP
30497: POP
// result := tmp ;
30498: LD_ADDR_VAR 0 6
30502: PUSH
30503: LD_VAR 0 9
30507: ST_TO_ADDR
// end ; end ;
30508: LD_VAR 0 6
30512: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30513: LD_INT 0
30515: PPUSH
30516: PPUSH
30517: PPUSH
30518: PPUSH
30519: PPUSH
30520: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30521: LD_ADDR_VAR 0 5
30525: PUSH
30526: LD_INT 0
30528: PUSH
30529: LD_INT 0
30531: PUSH
30532: LD_INT 0
30534: PUSH
30535: EMPTY
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: ST_TO_ADDR
// if not x or not y then
30543: LD_VAR 0 2
30547: NOT
30548: PUSH
30549: LD_VAR 0 3
30553: NOT
30554: OR
30555: IFFALSE 30559
// exit ;
30557: GO 32211
// if not range then
30559: LD_VAR 0 4
30563: NOT
30564: IFFALSE 30574
// range := 10 ;
30566: LD_ADDR_VAR 0 4
30570: PUSH
30571: LD_INT 10
30573: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30574: LD_ADDR_VAR 0 8
30578: PUSH
30579: LD_INT 81
30581: PUSH
30582: LD_VAR 0 1
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 92
30593: PUSH
30594: LD_VAR 0 2
30598: PUSH
30599: LD_VAR 0 3
30603: PUSH
30604: LD_VAR 0 4
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 3
30617: PUSH
30618: LD_INT 21
30620: PUSH
30621: LD_INT 3
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: LIST
30636: PPUSH
30637: CALL_OW 69
30641: ST_TO_ADDR
// if not tmp then
30642: LD_VAR 0 8
30646: NOT
30647: IFFALSE 30651
// exit ;
30649: GO 32211
// for i in tmp do
30651: LD_ADDR_VAR 0 6
30655: PUSH
30656: LD_VAR 0 8
30660: PUSH
30661: FOR_IN
30662: IFFALSE 32186
// begin points := [ 0 , 0 , 0 ] ;
30664: LD_ADDR_VAR 0 9
30668: PUSH
30669: LD_INT 0
30671: PUSH
30672: LD_INT 0
30674: PUSH
30675: LD_INT 0
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: LIST
30682: ST_TO_ADDR
// bpoints := 1 ;
30683: LD_ADDR_VAR 0 10
30687: PUSH
30688: LD_INT 1
30690: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30691: LD_VAR 0 6
30695: PPUSH
30696: CALL_OW 247
30700: PUSH
30701: LD_INT 1
30703: DOUBLE
30704: EQUAL
30705: IFTRUE 30709
30707: GO 31287
30709: POP
// begin if GetClass ( i ) = 1 then
30710: LD_VAR 0 6
30714: PPUSH
30715: CALL_OW 257
30719: PUSH
30720: LD_INT 1
30722: EQUAL
30723: IFFALSE 30744
// points := [ 10 , 5 , 3 ] ;
30725: LD_ADDR_VAR 0 9
30729: PUSH
30730: LD_INT 10
30732: PUSH
30733: LD_INT 5
30735: PUSH
30736: LD_INT 3
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: LIST
30743: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30744: LD_VAR 0 6
30748: PPUSH
30749: CALL_OW 257
30753: PUSH
30754: LD_INT 2
30756: PUSH
30757: LD_INT 3
30759: PUSH
30760: LD_INT 4
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: LIST
30767: IN
30768: IFFALSE 30789
// points := [ 3 , 2 , 1 ] ;
30770: LD_ADDR_VAR 0 9
30774: PUSH
30775: LD_INT 3
30777: PUSH
30778: LD_INT 2
30780: PUSH
30781: LD_INT 1
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: LIST
30788: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30789: LD_VAR 0 6
30793: PPUSH
30794: CALL_OW 257
30798: PUSH
30799: LD_INT 5
30801: EQUAL
30802: IFFALSE 30823
// points := [ 130 , 5 , 2 ] ;
30804: LD_ADDR_VAR 0 9
30808: PUSH
30809: LD_INT 130
30811: PUSH
30812: LD_INT 5
30814: PUSH
30815: LD_INT 2
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: LIST
30822: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30823: LD_VAR 0 6
30827: PPUSH
30828: CALL_OW 257
30832: PUSH
30833: LD_INT 8
30835: EQUAL
30836: IFFALSE 30857
// points := [ 35 , 35 , 30 ] ;
30838: LD_ADDR_VAR 0 9
30842: PUSH
30843: LD_INT 35
30845: PUSH
30846: LD_INT 35
30848: PUSH
30849: LD_INT 30
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: LIST
30856: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30857: LD_VAR 0 6
30861: PPUSH
30862: CALL_OW 257
30866: PUSH
30867: LD_INT 9
30869: EQUAL
30870: IFFALSE 30891
// points := [ 20 , 55 , 40 ] ;
30872: LD_ADDR_VAR 0 9
30876: PUSH
30877: LD_INT 20
30879: PUSH
30880: LD_INT 55
30882: PUSH
30883: LD_INT 40
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: LIST
30890: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30891: LD_VAR 0 6
30895: PPUSH
30896: CALL_OW 257
30900: PUSH
30901: LD_INT 12
30903: PUSH
30904: LD_INT 16
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: IN
30911: IFFALSE 30932
// points := [ 5 , 3 , 2 ] ;
30913: LD_ADDR_VAR 0 9
30917: PUSH
30918: LD_INT 5
30920: PUSH
30921: LD_INT 3
30923: PUSH
30924: LD_INT 2
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: LIST
30931: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30932: LD_VAR 0 6
30936: PPUSH
30937: CALL_OW 257
30941: PUSH
30942: LD_INT 17
30944: EQUAL
30945: IFFALSE 30966
// points := [ 100 , 50 , 75 ] ;
30947: LD_ADDR_VAR 0 9
30951: PUSH
30952: LD_INT 100
30954: PUSH
30955: LD_INT 50
30957: PUSH
30958: LD_INT 75
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: LIST
30965: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30966: LD_VAR 0 6
30970: PPUSH
30971: CALL_OW 257
30975: PUSH
30976: LD_INT 15
30978: EQUAL
30979: IFFALSE 31000
// points := [ 10 , 5 , 3 ] ;
30981: LD_ADDR_VAR 0 9
30985: PUSH
30986: LD_INT 10
30988: PUSH
30989: LD_INT 5
30991: PUSH
30992: LD_INT 3
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: LIST
30999: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31000: LD_VAR 0 6
31004: PPUSH
31005: CALL_OW 257
31009: PUSH
31010: LD_INT 14
31012: EQUAL
31013: IFFALSE 31034
// points := [ 10 , 0 , 0 ] ;
31015: LD_ADDR_VAR 0 9
31019: PUSH
31020: LD_INT 10
31022: PUSH
31023: LD_INT 0
31025: PUSH
31026: LD_INT 0
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: LIST
31033: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31034: LD_VAR 0 6
31038: PPUSH
31039: CALL_OW 257
31043: PUSH
31044: LD_INT 11
31046: EQUAL
31047: IFFALSE 31068
// points := [ 30 , 10 , 5 ] ;
31049: LD_ADDR_VAR 0 9
31053: PUSH
31054: LD_INT 30
31056: PUSH
31057: LD_INT 10
31059: PUSH
31060: LD_INT 5
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: LIST
31067: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31068: LD_VAR 0 1
31072: PPUSH
31073: LD_INT 5
31075: PPUSH
31076: CALL_OW 321
31080: PUSH
31081: LD_INT 2
31083: EQUAL
31084: IFFALSE 31101
// bpoints := bpoints * 1.8 ;
31086: LD_ADDR_VAR 0 10
31090: PUSH
31091: LD_VAR 0 10
31095: PUSH
31096: LD_REAL  1.80000000000000E+0000
31099: MUL
31100: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31101: LD_VAR 0 6
31105: PPUSH
31106: CALL_OW 257
31110: PUSH
31111: LD_INT 1
31113: PUSH
31114: LD_INT 2
31116: PUSH
31117: LD_INT 3
31119: PUSH
31120: LD_INT 4
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: IN
31129: PUSH
31130: LD_VAR 0 1
31134: PPUSH
31135: LD_INT 51
31137: PPUSH
31138: CALL_OW 321
31142: PUSH
31143: LD_INT 2
31145: EQUAL
31146: AND
31147: IFFALSE 31164
// bpoints := bpoints * 1.2 ;
31149: LD_ADDR_VAR 0 10
31153: PUSH
31154: LD_VAR 0 10
31158: PUSH
31159: LD_REAL  1.20000000000000E+0000
31162: MUL
31163: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31164: LD_VAR 0 6
31168: PPUSH
31169: CALL_OW 257
31173: PUSH
31174: LD_INT 5
31176: PUSH
31177: LD_INT 7
31179: PUSH
31180: LD_INT 9
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: LIST
31187: IN
31188: PUSH
31189: LD_VAR 0 1
31193: PPUSH
31194: LD_INT 52
31196: PPUSH
31197: CALL_OW 321
31201: PUSH
31202: LD_INT 2
31204: EQUAL
31205: AND
31206: IFFALSE 31223
// bpoints := bpoints * 1.5 ;
31208: LD_ADDR_VAR 0 10
31212: PUSH
31213: LD_VAR 0 10
31217: PUSH
31218: LD_REAL  1.50000000000000E+0000
31221: MUL
31222: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31223: LD_VAR 0 1
31227: PPUSH
31228: LD_INT 66
31230: PPUSH
31231: CALL_OW 321
31235: PUSH
31236: LD_INT 2
31238: EQUAL
31239: IFFALSE 31256
// bpoints := bpoints * 1.1 ;
31241: LD_ADDR_VAR 0 10
31245: PUSH
31246: LD_VAR 0 10
31250: PUSH
31251: LD_REAL  1.10000000000000E+0000
31254: MUL
31255: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31256: LD_ADDR_VAR 0 10
31260: PUSH
31261: LD_VAR 0 10
31265: PUSH
31266: LD_VAR 0 6
31270: PPUSH
31271: LD_INT 1
31273: PPUSH
31274: CALL_OW 259
31278: PUSH
31279: LD_REAL  1.15000000000000E+0000
31282: MUL
31283: MUL
31284: ST_TO_ADDR
// end ; unit_vehicle :
31285: GO 32115
31287: LD_INT 2
31289: DOUBLE
31290: EQUAL
31291: IFTRUE 31295
31293: GO 32103
31295: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31296: LD_VAR 0 6
31300: PPUSH
31301: CALL_OW 264
31305: PUSH
31306: LD_INT 2
31308: PUSH
31309: LD_INT 42
31311: PUSH
31312: LD_INT 24
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: LIST
31319: IN
31320: IFFALSE 31341
// points := [ 25 , 5 , 3 ] ;
31322: LD_ADDR_VAR 0 9
31326: PUSH
31327: LD_INT 25
31329: PUSH
31330: LD_INT 5
31332: PUSH
31333: LD_INT 3
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: LIST
31340: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31341: LD_VAR 0 6
31345: PPUSH
31346: CALL_OW 264
31350: PUSH
31351: LD_INT 4
31353: PUSH
31354: LD_INT 43
31356: PUSH
31357: LD_INT 25
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: LIST
31364: IN
31365: IFFALSE 31386
// points := [ 40 , 15 , 5 ] ;
31367: LD_ADDR_VAR 0 9
31371: PUSH
31372: LD_INT 40
31374: PUSH
31375: LD_INT 15
31377: PUSH
31378: LD_INT 5
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: LIST
31385: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31386: LD_VAR 0 6
31390: PPUSH
31391: CALL_OW 264
31395: PUSH
31396: LD_INT 3
31398: PUSH
31399: LD_INT 23
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: IN
31406: IFFALSE 31427
// points := [ 7 , 25 , 8 ] ;
31408: LD_ADDR_VAR 0 9
31412: PUSH
31413: LD_INT 7
31415: PUSH
31416: LD_INT 25
31418: PUSH
31419: LD_INT 8
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: LIST
31426: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31427: LD_VAR 0 6
31431: PPUSH
31432: CALL_OW 264
31436: PUSH
31437: LD_INT 5
31439: PUSH
31440: LD_INT 27
31442: PUSH
31443: LD_INT 44
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: LIST
31450: IN
31451: IFFALSE 31472
// points := [ 14 , 50 , 16 ] ;
31453: LD_ADDR_VAR 0 9
31457: PUSH
31458: LD_INT 14
31460: PUSH
31461: LD_INT 50
31463: PUSH
31464: LD_INT 16
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: LIST
31471: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31472: LD_VAR 0 6
31476: PPUSH
31477: CALL_OW 264
31481: PUSH
31482: LD_INT 6
31484: PUSH
31485: LD_INT 46
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: IN
31492: IFFALSE 31513
// points := [ 32 , 120 , 70 ] ;
31494: LD_ADDR_VAR 0 9
31498: PUSH
31499: LD_INT 32
31501: PUSH
31502: LD_INT 120
31504: PUSH
31505: LD_INT 70
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: LIST
31512: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31513: LD_VAR 0 6
31517: PPUSH
31518: CALL_OW 264
31522: PUSH
31523: LD_INT 7
31525: PUSH
31526: LD_INT 28
31528: PUSH
31529: LD_INT 45
31531: PUSH
31532: LD_EXP 63
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: IN
31543: IFFALSE 31564
// points := [ 35 , 20 , 45 ] ;
31545: LD_ADDR_VAR 0 9
31549: PUSH
31550: LD_INT 35
31552: PUSH
31553: LD_INT 20
31555: PUSH
31556: LD_INT 45
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: LIST
31563: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31564: LD_VAR 0 6
31568: PPUSH
31569: CALL_OW 264
31573: PUSH
31574: LD_INT 47
31576: PUSH
31577: EMPTY
31578: LIST
31579: IN
31580: IFFALSE 31601
// points := [ 67 , 45 , 75 ] ;
31582: LD_ADDR_VAR 0 9
31586: PUSH
31587: LD_INT 67
31589: PUSH
31590: LD_INT 45
31592: PUSH
31593: LD_INT 75
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: LIST
31600: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31601: LD_VAR 0 6
31605: PPUSH
31606: CALL_OW 264
31610: PUSH
31611: LD_INT 26
31613: PUSH
31614: EMPTY
31615: LIST
31616: IN
31617: IFFALSE 31638
// points := [ 120 , 30 , 80 ] ;
31619: LD_ADDR_VAR 0 9
31623: PUSH
31624: LD_INT 120
31626: PUSH
31627: LD_INT 30
31629: PUSH
31630: LD_INT 80
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: LIST
31637: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31638: LD_VAR 0 6
31642: PPUSH
31643: CALL_OW 264
31647: PUSH
31648: LD_INT 22
31650: PUSH
31651: EMPTY
31652: LIST
31653: IN
31654: IFFALSE 31675
// points := [ 40 , 1 , 1 ] ;
31656: LD_ADDR_VAR 0 9
31660: PUSH
31661: LD_INT 40
31663: PUSH
31664: LD_INT 1
31666: PUSH
31667: LD_INT 1
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: LIST
31674: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31675: LD_VAR 0 6
31679: PPUSH
31680: CALL_OW 264
31684: PUSH
31685: LD_INT 29
31687: PUSH
31688: EMPTY
31689: LIST
31690: IN
31691: IFFALSE 31712
// points := [ 70 , 200 , 400 ] ;
31693: LD_ADDR_VAR 0 9
31697: PUSH
31698: LD_INT 70
31700: PUSH
31701: LD_INT 200
31703: PUSH
31704: LD_INT 400
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: LIST
31711: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31712: LD_VAR 0 6
31716: PPUSH
31717: CALL_OW 264
31721: PUSH
31722: LD_INT 14
31724: PUSH
31725: LD_INT 53
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: IN
31732: IFFALSE 31753
// points := [ 40 , 10 , 20 ] ;
31734: LD_ADDR_VAR 0 9
31738: PUSH
31739: LD_INT 40
31741: PUSH
31742: LD_INT 10
31744: PUSH
31745: LD_INT 20
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: LIST
31752: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31753: LD_VAR 0 6
31757: PPUSH
31758: CALL_OW 264
31762: PUSH
31763: LD_INT 9
31765: PUSH
31766: EMPTY
31767: LIST
31768: IN
31769: IFFALSE 31790
// points := [ 5 , 70 , 20 ] ;
31771: LD_ADDR_VAR 0 9
31775: PUSH
31776: LD_INT 5
31778: PUSH
31779: LD_INT 70
31781: PUSH
31782: LD_INT 20
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: LIST
31789: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31790: LD_VAR 0 6
31794: PPUSH
31795: CALL_OW 264
31799: PUSH
31800: LD_INT 10
31802: PUSH
31803: EMPTY
31804: LIST
31805: IN
31806: IFFALSE 31827
// points := [ 35 , 110 , 70 ] ;
31808: LD_ADDR_VAR 0 9
31812: PUSH
31813: LD_INT 35
31815: PUSH
31816: LD_INT 110
31818: PUSH
31819: LD_INT 70
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: LIST
31826: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31827: LD_VAR 0 6
31831: PPUSH
31832: CALL_OW 265
31836: PUSH
31837: LD_INT 25
31839: EQUAL
31840: IFFALSE 31861
// points := [ 80 , 65 , 100 ] ;
31842: LD_ADDR_VAR 0 9
31846: PUSH
31847: LD_INT 80
31849: PUSH
31850: LD_INT 65
31852: PUSH
31853: LD_INT 100
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: LIST
31860: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31861: LD_VAR 0 6
31865: PPUSH
31866: CALL_OW 263
31870: PUSH
31871: LD_INT 1
31873: EQUAL
31874: IFFALSE 31909
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31876: LD_ADDR_VAR 0 10
31880: PUSH
31881: LD_VAR 0 10
31885: PUSH
31886: LD_VAR 0 6
31890: PPUSH
31891: CALL_OW 311
31895: PPUSH
31896: LD_INT 3
31898: PPUSH
31899: CALL_OW 259
31903: PUSH
31904: LD_INT 4
31906: MUL
31907: MUL
31908: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31909: LD_VAR 0 6
31913: PPUSH
31914: CALL_OW 263
31918: PUSH
31919: LD_INT 2
31921: EQUAL
31922: IFFALSE 31973
// begin j := IsControledBy ( i ) ;
31924: LD_ADDR_VAR 0 7
31928: PUSH
31929: LD_VAR 0 6
31933: PPUSH
31934: CALL_OW 312
31938: ST_TO_ADDR
// if j then
31939: LD_VAR 0 7
31943: IFFALSE 31973
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31945: LD_ADDR_VAR 0 10
31949: PUSH
31950: LD_VAR 0 10
31954: PUSH
31955: LD_VAR 0 7
31959: PPUSH
31960: LD_INT 3
31962: PPUSH
31963: CALL_OW 259
31967: PUSH
31968: LD_INT 3
31970: MUL
31971: MUL
31972: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31973: LD_VAR 0 6
31977: PPUSH
31978: CALL_OW 264
31982: PUSH
31983: LD_INT 5
31985: PUSH
31986: LD_INT 6
31988: PUSH
31989: LD_INT 46
31991: PUSH
31992: LD_INT 44
31994: PUSH
31995: LD_INT 47
31997: PUSH
31998: LD_INT 45
32000: PUSH
32001: LD_INT 28
32003: PUSH
32004: LD_INT 7
32006: PUSH
32007: LD_INT 27
32009: PUSH
32010: LD_INT 29
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: IN
32025: PUSH
32026: LD_VAR 0 1
32030: PPUSH
32031: LD_INT 52
32033: PPUSH
32034: CALL_OW 321
32038: PUSH
32039: LD_INT 2
32041: EQUAL
32042: AND
32043: IFFALSE 32060
// bpoints := bpoints * 1.2 ;
32045: LD_ADDR_VAR 0 10
32049: PUSH
32050: LD_VAR 0 10
32054: PUSH
32055: LD_REAL  1.20000000000000E+0000
32058: MUL
32059: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32060: LD_VAR 0 6
32064: PPUSH
32065: CALL_OW 264
32069: PUSH
32070: LD_INT 6
32072: PUSH
32073: LD_INT 46
32075: PUSH
32076: LD_INT 47
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: LIST
32083: IN
32084: IFFALSE 32101
// bpoints := bpoints * 1.2 ;
32086: LD_ADDR_VAR 0 10
32090: PUSH
32091: LD_VAR 0 10
32095: PUSH
32096: LD_REAL  1.20000000000000E+0000
32099: MUL
32100: ST_TO_ADDR
// end ; unit_building :
32101: GO 32115
32103: LD_INT 3
32105: DOUBLE
32106: EQUAL
32107: IFTRUE 32111
32109: GO 32114
32111: POP
// ; end ;
32112: GO 32115
32114: POP
// for j = 1 to 3 do
32115: LD_ADDR_VAR 0 7
32119: PUSH
32120: DOUBLE
32121: LD_INT 1
32123: DEC
32124: ST_TO_ADDR
32125: LD_INT 3
32127: PUSH
32128: FOR_TO
32129: IFFALSE 32182
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32131: LD_ADDR_VAR 0 5
32135: PUSH
32136: LD_VAR 0 5
32140: PPUSH
32141: LD_VAR 0 7
32145: PPUSH
32146: LD_VAR 0 5
32150: PUSH
32151: LD_VAR 0 7
32155: ARRAY
32156: PUSH
32157: LD_VAR 0 9
32161: PUSH
32162: LD_VAR 0 7
32166: ARRAY
32167: PUSH
32168: LD_VAR 0 10
32172: MUL
32173: PLUS
32174: PPUSH
32175: CALL_OW 1
32179: ST_TO_ADDR
32180: GO 32128
32182: POP
32183: POP
// end ;
32184: GO 30661
32186: POP
32187: POP
// result := Replace ( result , 4 , tmp ) ;
32188: LD_ADDR_VAR 0 5
32192: PUSH
32193: LD_VAR 0 5
32197: PPUSH
32198: LD_INT 4
32200: PPUSH
32201: LD_VAR 0 8
32205: PPUSH
32206: CALL_OW 1
32210: ST_TO_ADDR
// end ;
32211: LD_VAR 0 5
32215: RET
// export function DangerAtRange ( unit , range ) ; begin
32216: LD_INT 0
32218: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32219: LD_ADDR_VAR 0 3
32223: PUSH
32224: LD_VAR 0 1
32228: PPUSH
32229: CALL_OW 255
32233: PPUSH
32234: LD_VAR 0 1
32238: PPUSH
32239: CALL_OW 250
32243: PPUSH
32244: LD_VAR 0 1
32248: PPUSH
32249: CALL_OW 251
32253: PPUSH
32254: LD_VAR 0 2
32258: PPUSH
32259: CALL 30513 0 4
32263: ST_TO_ADDR
// end ;
32264: LD_VAR 0 3
32268: RET
// export function DangerInArea ( side , area ) ; begin
32269: LD_INT 0
32271: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32272: LD_ADDR_VAR 0 3
32276: PUSH
32277: LD_VAR 0 2
32281: PPUSH
32282: LD_INT 81
32284: PUSH
32285: LD_VAR 0 1
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PPUSH
32294: CALL_OW 70
32298: ST_TO_ADDR
// end ;
32299: LD_VAR 0 3
32303: RET
// export function IsExtension ( b ) ; begin
32304: LD_INT 0
32306: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32307: LD_ADDR_VAR 0 2
32311: PUSH
32312: LD_VAR 0 1
32316: PUSH
32317: LD_INT 23
32319: PUSH
32320: LD_INT 20
32322: PUSH
32323: LD_INT 22
32325: PUSH
32326: LD_INT 17
32328: PUSH
32329: LD_INT 24
32331: PUSH
32332: LD_INT 21
32334: PUSH
32335: LD_INT 19
32337: PUSH
32338: LD_INT 16
32340: PUSH
32341: LD_INT 25
32343: PUSH
32344: LD_INT 18
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: IN
32359: ST_TO_ADDR
// end ;
32360: LD_VAR 0 2
32364: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32365: LD_INT 0
32367: PPUSH
32368: PPUSH
32369: PPUSH
// result := [ ] ;
32370: LD_ADDR_VAR 0 4
32374: PUSH
32375: EMPTY
32376: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32377: LD_ADDR_VAR 0 5
32381: PUSH
32382: LD_VAR 0 2
32386: PPUSH
32387: LD_INT 21
32389: PUSH
32390: LD_INT 3
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PPUSH
32397: CALL_OW 70
32401: ST_TO_ADDR
// if not tmp then
32402: LD_VAR 0 5
32406: NOT
32407: IFFALSE 32411
// exit ;
32409: GO 32475
// if checkLink then
32411: LD_VAR 0 3
32415: IFFALSE 32465
// begin for i in tmp do
32417: LD_ADDR_VAR 0 6
32421: PUSH
32422: LD_VAR 0 5
32426: PUSH
32427: FOR_IN
32428: IFFALSE 32463
// if GetBase ( i ) <> base then
32430: LD_VAR 0 6
32434: PPUSH
32435: CALL_OW 274
32439: PUSH
32440: LD_VAR 0 1
32444: NONEQUAL
32445: IFFALSE 32461
// ComLinkToBase ( base , i ) ;
32447: LD_VAR 0 1
32451: PPUSH
32452: LD_VAR 0 6
32456: PPUSH
32457: CALL_OW 169
32461: GO 32427
32463: POP
32464: POP
// end ; result := tmp ;
32465: LD_ADDR_VAR 0 4
32469: PUSH
32470: LD_VAR 0 5
32474: ST_TO_ADDR
// end ;
32475: LD_VAR 0 4
32479: RET
// export function ComComplete ( units , b ) ; var i ; begin
32480: LD_INT 0
32482: PPUSH
32483: PPUSH
// if not units then
32484: LD_VAR 0 1
32488: NOT
32489: IFFALSE 32493
// exit ;
32491: GO 32583
// for i in units do
32493: LD_ADDR_VAR 0 4
32497: PUSH
32498: LD_VAR 0 1
32502: PUSH
32503: FOR_IN
32504: IFFALSE 32581
// if BuildingStatus ( b ) = bs_build then
32506: LD_VAR 0 2
32510: PPUSH
32511: CALL_OW 461
32515: PUSH
32516: LD_INT 1
32518: EQUAL
32519: IFFALSE 32579
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32521: LD_VAR 0 4
32525: PPUSH
32526: LD_STRING h
32528: PUSH
32529: LD_VAR 0 2
32533: PPUSH
32534: CALL_OW 250
32538: PUSH
32539: LD_VAR 0 2
32543: PPUSH
32544: CALL_OW 251
32548: PUSH
32549: LD_VAR 0 2
32553: PUSH
32554: LD_INT 0
32556: PUSH
32557: LD_INT 0
32559: PUSH
32560: LD_INT 0
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: PUSH
32572: EMPTY
32573: LIST
32574: PPUSH
32575: CALL_OW 446
32579: GO 32503
32581: POP
32582: POP
// end ;
32583: LD_VAR 0 3
32587: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32588: LD_INT 0
32590: PPUSH
32591: PPUSH
32592: PPUSH
32593: PPUSH
32594: PPUSH
32595: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
32596: LD_VAR 0 1
32600: NOT
32601: PUSH
32602: LD_VAR 0 1
32606: PPUSH
32607: CALL_OW 263
32611: PUSH
32612: LD_INT 2
32614: EQUAL
32615: NOT
32616: OR
32617: IFFALSE 32621
// exit ;
32619: GO 32937
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32621: LD_ADDR_VAR 0 6
32625: PUSH
32626: LD_INT 22
32628: PUSH
32629: LD_VAR 0 1
32633: PPUSH
32634: CALL_OW 255
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 2
32645: PUSH
32646: LD_INT 30
32648: PUSH
32649: LD_INT 36
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 34
32658: PUSH
32659: LD_INT 31
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: LIST
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PPUSH
32675: CALL_OW 69
32679: ST_TO_ADDR
// if not tmp then
32680: LD_VAR 0 6
32684: NOT
32685: IFFALSE 32689
// exit ;
32687: GO 32937
// result := [ ] ;
32689: LD_ADDR_VAR 0 2
32693: PUSH
32694: EMPTY
32695: ST_TO_ADDR
// for i in tmp do
32696: LD_ADDR_VAR 0 3
32700: PUSH
32701: LD_VAR 0 6
32705: PUSH
32706: FOR_IN
32707: IFFALSE 32778
// begin t := UnitsInside ( i ) ;
32709: LD_ADDR_VAR 0 4
32713: PUSH
32714: LD_VAR 0 3
32718: PPUSH
32719: CALL_OW 313
32723: ST_TO_ADDR
// if t then
32724: LD_VAR 0 4
32728: IFFALSE 32776
// for j in t do
32730: LD_ADDR_VAR 0 7
32734: PUSH
32735: LD_VAR 0 4
32739: PUSH
32740: FOR_IN
32741: IFFALSE 32774
// result := Insert ( result , result + 1 , j ) ;
32743: LD_ADDR_VAR 0 2
32747: PUSH
32748: LD_VAR 0 2
32752: PPUSH
32753: LD_VAR 0 2
32757: PUSH
32758: LD_INT 1
32760: PLUS
32761: PPUSH
32762: LD_VAR 0 7
32766: PPUSH
32767: CALL_OW 2
32771: ST_TO_ADDR
32772: GO 32740
32774: POP
32775: POP
// end ;
32776: GO 32706
32778: POP
32779: POP
// if not result then
32780: LD_VAR 0 2
32784: NOT
32785: IFFALSE 32789
// exit ;
32787: GO 32937
// mech := result [ 1 ] ;
32789: LD_ADDR_VAR 0 5
32793: PUSH
32794: LD_VAR 0 2
32798: PUSH
32799: LD_INT 1
32801: ARRAY
32802: ST_TO_ADDR
// if result > 1 then
32803: LD_VAR 0 2
32807: PUSH
32808: LD_INT 1
32810: GREATER
32811: IFFALSE 32923
// for i = 2 to result do
32813: LD_ADDR_VAR 0 3
32817: PUSH
32818: DOUBLE
32819: LD_INT 2
32821: DEC
32822: ST_TO_ADDR
32823: LD_VAR 0 2
32827: PUSH
32828: FOR_TO
32829: IFFALSE 32921
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32831: LD_ADDR_VAR 0 4
32835: PUSH
32836: LD_VAR 0 2
32840: PUSH
32841: LD_VAR 0 3
32845: ARRAY
32846: PPUSH
32847: LD_INT 3
32849: PPUSH
32850: CALL_OW 259
32854: PUSH
32855: LD_VAR 0 2
32859: PUSH
32860: LD_VAR 0 3
32864: ARRAY
32865: PPUSH
32866: CALL_OW 432
32870: MINUS
32871: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32872: LD_VAR 0 4
32876: PUSH
32877: LD_VAR 0 5
32881: PPUSH
32882: LD_INT 3
32884: PPUSH
32885: CALL_OW 259
32889: PUSH
32890: LD_VAR 0 5
32894: PPUSH
32895: CALL_OW 432
32899: MINUS
32900: GREATEREQUAL
32901: IFFALSE 32919
// mech := result [ i ] ;
32903: LD_ADDR_VAR 0 5
32907: PUSH
32908: LD_VAR 0 2
32912: PUSH
32913: LD_VAR 0 3
32917: ARRAY
32918: ST_TO_ADDR
// end ;
32919: GO 32828
32921: POP
32922: POP
// ComLinkTo ( vehicle , mech ) ;
32923: LD_VAR 0 1
32927: PPUSH
32928: LD_VAR 0 5
32932: PPUSH
32933: CALL_OW 135
// end ;
32937: LD_VAR 0 2
32941: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32942: LD_INT 0
32944: PPUSH
32945: PPUSH
32946: PPUSH
32947: PPUSH
32948: PPUSH
32949: PPUSH
32950: PPUSH
32951: PPUSH
32952: PPUSH
32953: PPUSH
32954: PPUSH
32955: PPUSH
32956: PPUSH
// result := [ ] ;
32957: LD_ADDR_VAR 0 7
32961: PUSH
32962: EMPTY
32963: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32964: LD_VAR 0 1
32968: PPUSH
32969: CALL_OW 266
32973: PUSH
32974: LD_INT 0
32976: PUSH
32977: LD_INT 1
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: IN
32984: NOT
32985: IFFALSE 32989
// exit ;
32987: GO 34623
// if name then
32989: LD_VAR 0 3
32993: IFFALSE 33009
// SetBName ( base_dep , name ) ;
32995: LD_VAR 0 1
32999: PPUSH
33000: LD_VAR 0 3
33004: PPUSH
33005: CALL_OW 500
// base := GetBase ( base_dep ) ;
33009: LD_ADDR_VAR 0 15
33013: PUSH
33014: LD_VAR 0 1
33018: PPUSH
33019: CALL_OW 274
33023: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33024: LD_ADDR_VAR 0 16
33028: PUSH
33029: LD_VAR 0 1
33033: PPUSH
33034: CALL_OW 255
33038: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33039: LD_ADDR_VAR 0 17
33043: PUSH
33044: LD_VAR 0 1
33048: PPUSH
33049: CALL_OW 248
33053: ST_TO_ADDR
// if sources then
33054: LD_VAR 0 5
33058: IFFALSE 33105
// for i = 1 to 3 do
33060: LD_ADDR_VAR 0 8
33064: PUSH
33065: DOUBLE
33066: LD_INT 1
33068: DEC
33069: ST_TO_ADDR
33070: LD_INT 3
33072: PUSH
33073: FOR_TO
33074: IFFALSE 33103
// AddResourceType ( base , i , sources [ i ] ) ;
33076: LD_VAR 0 15
33080: PPUSH
33081: LD_VAR 0 8
33085: PPUSH
33086: LD_VAR 0 5
33090: PUSH
33091: LD_VAR 0 8
33095: ARRAY
33096: PPUSH
33097: CALL_OW 276
33101: GO 33073
33103: POP
33104: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33105: LD_ADDR_VAR 0 18
33109: PUSH
33110: LD_VAR 0 15
33114: PPUSH
33115: LD_VAR 0 2
33119: PPUSH
33120: LD_INT 1
33122: PPUSH
33123: CALL 32365 0 3
33127: ST_TO_ADDR
// InitHc ;
33128: CALL_OW 19
// InitUc ;
33132: CALL_OW 18
// uc_side := side ;
33136: LD_ADDR_OWVAR 20
33140: PUSH
33141: LD_VAR 0 16
33145: ST_TO_ADDR
// uc_nation := nation ;
33146: LD_ADDR_OWVAR 21
33150: PUSH
33151: LD_VAR 0 17
33155: ST_TO_ADDR
// if buildings then
33156: LD_VAR 0 18
33160: IFFALSE 34482
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33162: LD_ADDR_VAR 0 19
33166: PUSH
33167: LD_VAR 0 18
33171: PPUSH
33172: LD_INT 2
33174: PUSH
33175: LD_INT 30
33177: PUSH
33178: LD_INT 29
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 30
33187: PUSH
33188: LD_INT 30
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: LIST
33199: PPUSH
33200: CALL_OW 72
33204: ST_TO_ADDR
// if tmp then
33205: LD_VAR 0 19
33209: IFFALSE 33257
// for i in tmp do
33211: LD_ADDR_VAR 0 8
33215: PUSH
33216: LD_VAR 0 19
33220: PUSH
33221: FOR_IN
33222: IFFALSE 33255
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33224: LD_VAR 0 8
33228: PPUSH
33229: CALL_OW 250
33233: PPUSH
33234: LD_VAR 0 8
33238: PPUSH
33239: CALL_OW 251
33243: PPUSH
33244: LD_VAR 0 16
33248: PPUSH
33249: CALL_OW 441
33253: GO 33221
33255: POP
33256: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33257: LD_VAR 0 18
33261: PPUSH
33262: LD_INT 2
33264: PUSH
33265: LD_INT 30
33267: PUSH
33268: LD_INT 32
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 30
33277: PUSH
33278: LD_INT 33
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: LIST
33289: PPUSH
33290: CALL_OW 72
33294: IFFALSE 33382
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33296: LD_ADDR_VAR 0 8
33300: PUSH
33301: LD_VAR 0 18
33305: PPUSH
33306: LD_INT 2
33308: PUSH
33309: LD_INT 30
33311: PUSH
33312: LD_INT 32
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 30
33321: PUSH
33322: LD_INT 33
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: LIST
33333: PPUSH
33334: CALL_OW 72
33338: PUSH
33339: FOR_IN
33340: IFFALSE 33380
// begin if not GetBWeapon ( i ) then
33342: LD_VAR 0 8
33346: PPUSH
33347: CALL_OW 269
33351: NOT
33352: IFFALSE 33378
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33354: LD_VAR 0 8
33358: PPUSH
33359: LD_VAR 0 8
33363: PPUSH
33364: LD_VAR 0 2
33368: PPUSH
33369: CALL 34628 0 2
33373: PPUSH
33374: CALL_OW 431
// end ;
33378: GO 33339
33380: POP
33381: POP
// end ; for i = 1 to personel do
33382: LD_ADDR_VAR 0 8
33386: PUSH
33387: DOUBLE
33388: LD_INT 1
33390: DEC
33391: ST_TO_ADDR
33392: LD_VAR 0 6
33396: PUSH
33397: FOR_TO
33398: IFFALSE 34462
// begin if i > 4 then
33400: LD_VAR 0 8
33404: PUSH
33405: LD_INT 4
33407: GREATER
33408: IFFALSE 33412
// break ;
33410: GO 34462
// case i of 1 :
33412: LD_VAR 0 8
33416: PUSH
33417: LD_INT 1
33419: DOUBLE
33420: EQUAL
33421: IFTRUE 33425
33423: GO 33505
33425: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33426: LD_ADDR_VAR 0 12
33430: PUSH
33431: LD_VAR 0 18
33435: PPUSH
33436: LD_INT 22
33438: PUSH
33439: LD_VAR 0 16
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 58
33450: PUSH
33451: EMPTY
33452: LIST
33453: PUSH
33454: LD_INT 2
33456: PUSH
33457: LD_INT 30
33459: PUSH
33460: LD_INT 32
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 30
33469: PUSH
33470: LD_INT 4
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 30
33479: PUSH
33480: LD_INT 5
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: LIST
33497: PPUSH
33498: CALL_OW 72
33502: ST_TO_ADDR
33503: GO 33727
33505: LD_INT 2
33507: DOUBLE
33508: EQUAL
33509: IFTRUE 33513
33511: GO 33575
33513: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33514: LD_ADDR_VAR 0 12
33518: PUSH
33519: LD_VAR 0 18
33523: PPUSH
33524: LD_INT 22
33526: PUSH
33527: LD_VAR 0 16
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 2
33538: PUSH
33539: LD_INT 30
33541: PUSH
33542: LD_INT 0
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 30
33551: PUSH
33552: LD_INT 1
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: LIST
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PPUSH
33568: CALL_OW 72
33572: ST_TO_ADDR
33573: GO 33727
33575: LD_INT 3
33577: DOUBLE
33578: EQUAL
33579: IFTRUE 33583
33581: GO 33645
33583: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33584: LD_ADDR_VAR 0 12
33588: PUSH
33589: LD_VAR 0 18
33593: PPUSH
33594: LD_INT 22
33596: PUSH
33597: LD_VAR 0 16
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 2
33608: PUSH
33609: LD_INT 30
33611: PUSH
33612: LD_INT 2
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 30
33621: PUSH
33622: LD_INT 3
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: LIST
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PPUSH
33638: CALL_OW 72
33642: ST_TO_ADDR
33643: GO 33727
33645: LD_INT 4
33647: DOUBLE
33648: EQUAL
33649: IFTRUE 33653
33651: GO 33726
33653: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33654: LD_ADDR_VAR 0 12
33658: PUSH
33659: LD_VAR 0 18
33663: PPUSH
33664: LD_INT 22
33666: PUSH
33667: LD_VAR 0 16
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 2
33678: PUSH
33679: LD_INT 30
33681: PUSH
33682: LD_INT 6
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 30
33691: PUSH
33692: LD_INT 7
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 30
33701: PUSH
33702: LD_INT 8
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PPUSH
33719: CALL_OW 72
33723: ST_TO_ADDR
33724: GO 33727
33726: POP
// if i = 1 then
33727: LD_VAR 0 8
33731: PUSH
33732: LD_INT 1
33734: EQUAL
33735: IFFALSE 33846
// begin tmp := [ ] ;
33737: LD_ADDR_VAR 0 19
33741: PUSH
33742: EMPTY
33743: ST_TO_ADDR
// for j in f do
33744: LD_ADDR_VAR 0 9
33748: PUSH
33749: LD_VAR 0 12
33753: PUSH
33754: FOR_IN
33755: IFFALSE 33828
// if GetBType ( j ) = b_bunker then
33757: LD_VAR 0 9
33761: PPUSH
33762: CALL_OW 266
33766: PUSH
33767: LD_INT 32
33769: EQUAL
33770: IFFALSE 33797
// tmp := Insert ( tmp , 1 , j ) else
33772: LD_ADDR_VAR 0 19
33776: PUSH
33777: LD_VAR 0 19
33781: PPUSH
33782: LD_INT 1
33784: PPUSH
33785: LD_VAR 0 9
33789: PPUSH
33790: CALL_OW 2
33794: ST_TO_ADDR
33795: GO 33826
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33797: LD_ADDR_VAR 0 19
33801: PUSH
33802: LD_VAR 0 19
33806: PPUSH
33807: LD_VAR 0 19
33811: PUSH
33812: LD_INT 1
33814: PLUS
33815: PPUSH
33816: LD_VAR 0 9
33820: PPUSH
33821: CALL_OW 2
33825: ST_TO_ADDR
33826: GO 33754
33828: POP
33829: POP
// if tmp then
33830: LD_VAR 0 19
33834: IFFALSE 33846
// f := tmp ;
33836: LD_ADDR_VAR 0 12
33840: PUSH
33841: LD_VAR 0 19
33845: ST_TO_ADDR
// end ; x := personel [ i ] ;
33846: LD_ADDR_VAR 0 13
33850: PUSH
33851: LD_VAR 0 6
33855: PUSH
33856: LD_VAR 0 8
33860: ARRAY
33861: ST_TO_ADDR
// if x = - 1 then
33862: LD_VAR 0 13
33866: PUSH
33867: LD_INT 1
33869: NEG
33870: EQUAL
33871: IFFALSE 34080
// begin for j in f do
33873: LD_ADDR_VAR 0 9
33877: PUSH
33878: LD_VAR 0 12
33882: PUSH
33883: FOR_IN
33884: IFFALSE 34076
// repeat InitHc ;
33886: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33890: LD_VAR 0 9
33894: PPUSH
33895: CALL_OW 266
33899: PUSH
33900: LD_INT 5
33902: EQUAL
33903: IFFALSE 33973
// begin if UnitsInside ( j ) < 3 then
33905: LD_VAR 0 9
33909: PPUSH
33910: CALL_OW 313
33914: PUSH
33915: LD_INT 3
33917: LESS
33918: IFFALSE 33954
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33920: LD_INT 0
33922: PPUSH
33923: LD_INT 5
33925: PUSH
33926: LD_INT 8
33928: PUSH
33929: LD_INT 9
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: LIST
33936: PUSH
33937: LD_VAR 0 17
33941: ARRAY
33942: PPUSH
33943: LD_VAR 0 4
33947: PPUSH
33948: CALL_OW 380
33952: GO 33971
// PrepareHuman ( false , i , skill ) ;
33954: LD_INT 0
33956: PPUSH
33957: LD_VAR 0 8
33961: PPUSH
33962: LD_VAR 0 4
33966: PPUSH
33967: CALL_OW 380
// end else
33971: GO 33990
// PrepareHuman ( false , i , skill ) ;
33973: LD_INT 0
33975: PPUSH
33976: LD_VAR 0 8
33980: PPUSH
33981: LD_VAR 0 4
33985: PPUSH
33986: CALL_OW 380
// un := CreateHuman ;
33990: LD_ADDR_VAR 0 14
33994: PUSH
33995: CALL_OW 44
33999: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34000: LD_ADDR_VAR 0 7
34004: PUSH
34005: LD_VAR 0 7
34009: PPUSH
34010: LD_INT 1
34012: PPUSH
34013: LD_VAR 0 14
34017: PPUSH
34018: CALL_OW 2
34022: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34023: LD_VAR 0 14
34027: PPUSH
34028: LD_VAR 0 9
34032: PPUSH
34033: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34037: LD_VAR 0 9
34041: PPUSH
34042: CALL_OW 313
34046: PUSH
34047: LD_INT 6
34049: EQUAL
34050: PUSH
34051: LD_VAR 0 9
34055: PPUSH
34056: CALL_OW 266
34060: PUSH
34061: LD_INT 32
34063: PUSH
34064: LD_INT 31
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: IN
34071: OR
34072: IFFALSE 33886
34074: GO 33883
34076: POP
34077: POP
// end else
34078: GO 34460
// for j = 1 to x do
34080: LD_ADDR_VAR 0 9
34084: PUSH
34085: DOUBLE
34086: LD_INT 1
34088: DEC
34089: ST_TO_ADDR
34090: LD_VAR 0 13
34094: PUSH
34095: FOR_TO
34096: IFFALSE 34458
// begin InitHc ;
34098: CALL_OW 19
// if not f then
34102: LD_VAR 0 12
34106: NOT
34107: IFFALSE 34196
// begin PrepareHuman ( false , i , skill ) ;
34109: LD_INT 0
34111: PPUSH
34112: LD_VAR 0 8
34116: PPUSH
34117: LD_VAR 0 4
34121: PPUSH
34122: CALL_OW 380
// un := CreateHuman ;
34126: LD_ADDR_VAR 0 14
34130: PUSH
34131: CALL_OW 44
34135: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34136: LD_ADDR_VAR 0 7
34140: PUSH
34141: LD_VAR 0 7
34145: PPUSH
34146: LD_INT 1
34148: PPUSH
34149: LD_VAR 0 14
34153: PPUSH
34154: CALL_OW 2
34158: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34159: LD_VAR 0 14
34163: PPUSH
34164: LD_VAR 0 1
34168: PPUSH
34169: CALL_OW 250
34173: PPUSH
34174: LD_VAR 0 1
34178: PPUSH
34179: CALL_OW 251
34183: PPUSH
34184: LD_INT 10
34186: PPUSH
34187: LD_INT 0
34189: PPUSH
34190: CALL_OW 50
// continue ;
34194: GO 34095
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34196: LD_VAR 0 12
34200: PUSH
34201: LD_INT 1
34203: ARRAY
34204: PPUSH
34205: CALL_OW 313
34209: PUSH
34210: LD_VAR 0 12
34214: PUSH
34215: LD_INT 1
34217: ARRAY
34218: PPUSH
34219: CALL_OW 266
34223: PUSH
34224: LD_INT 32
34226: PUSH
34227: LD_INT 31
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: IN
34234: AND
34235: PUSH
34236: LD_VAR 0 12
34240: PUSH
34241: LD_INT 1
34243: ARRAY
34244: PPUSH
34245: CALL_OW 313
34249: PUSH
34250: LD_INT 6
34252: EQUAL
34253: OR
34254: IFFALSE 34274
// f := Delete ( f , 1 ) ;
34256: LD_ADDR_VAR 0 12
34260: PUSH
34261: LD_VAR 0 12
34265: PPUSH
34266: LD_INT 1
34268: PPUSH
34269: CALL_OW 3
34273: ST_TO_ADDR
// if not f then
34274: LD_VAR 0 12
34278: NOT
34279: IFFALSE 34297
// begin x := x + 2 ;
34281: LD_ADDR_VAR 0 13
34285: PUSH
34286: LD_VAR 0 13
34290: PUSH
34291: LD_INT 2
34293: PLUS
34294: ST_TO_ADDR
// continue ;
34295: GO 34095
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34297: LD_VAR 0 12
34301: PUSH
34302: LD_INT 1
34304: ARRAY
34305: PPUSH
34306: CALL_OW 266
34310: PUSH
34311: LD_INT 5
34313: EQUAL
34314: IFFALSE 34388
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34316: LD_VAR 0 12
34320: PUSH
34321: LD_INT 1
34323: ARRAY
34324: PPUSH
34325: CALL_OW 313
34329: PUSH
34330: LD_INT 3
34332: LESS
34333: IFFALSE 34369
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34335: LD_INT 0
34337: PPUSH
34338: LD_INT 5
34340: PUSH
34341: LD_INT 8
34343: PUSH
34344: LD_INT 9
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: LIST
34351: PUSH
34352: LD_VAR 0 17
34356: ARRAY
34357: PPUSH
34358: LD_VAR 0 4
34362: PPUSH
34363: CALL_OW 380
34367: GO 34386
// PrepareHuman ( false , i , skill ) ;
34369: LD_INT 0
34371: PPUSH
34372: LD_VAR 0 8
34376: PPUSH
34377: LD_VAR 0 4
34381: PPUSH
34382: CALL_OW 380
// end else
34386: GO 34405
// PrepareHuman ( false , i , skill ) ;
34388: LD_INT 0
34390: PPUSH
34391: LD_VAR 0 8
34395: PPUSH
34396: LD_VAR 0 4
34400: PPUSH
34401: CALL_OW 380
// un := CreateHuman ;
34405: LD_ADDR_VAR 0 14
34409: PUSH
34410: CALL_OW 44
34414: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34415: LD_ADDR_VAR 0 7
34419: PUSH
34420: LD_VAR 0 7
34424: PPUSH
34425: LD_INT 1
34427: PPUSH
34428: LD_VAR 0 14
34432: PPUSH
34433: CALL_OW 2
34437: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34438: LD_VAR 0 14
34442: PPUSH
34443: LD_VAR 0 12
34447: PUSH
34448: LD_INT 1
34450: ARRAY
34451: PPUSH
34452: CALL_OW 52
// end ;
34456: GO 34095
34458: POP
34459: POP
// end ;
34460: GO 33397
34462: POP
34463: POP
// result := result ^ buildings ;
34464: LD_ADDR_VAR 0 7
34468: PUSH
34469: LD_VAR 0 7
34473: PUSH
34474: LD_VAR 0 18
34478: ADD
34479: ST_TO_ADDR
// end else
34480: GO 34623
// begin for i = 1 to personel do
34482: LD_ADDR_VAR 0 8
34486: PUSH
34487: DOUBLE
34488: LD_INT 1
34490: DEC
34491: ST_TO_ADDR
34492: LD_VAR 0 6
34496: PUSH
34497: FOR_TO
34498: IFFALSE 34621
// begin if i > 4 then
34500: LD_VAR 0 8
34504: PUSH
34505: LD_INT 4
34507: GREATER
34508: IFFALSE 34512
// break ;
34510: GO 34621
// x := personel [ i ] ;
34512: LD_ADDR_VAR 0 13
34516: PUSH
34517: LD_VAR 0 6
34521: PUSH
34522: LD_VAR 0 8
34526: ARRAY
34527: ST_TO_ADDR
// if x = - 1 then
34528: LD_VAR 0 13
34532: PUSH
34533: LD_INT 1
34535: NEG
34536: EQUAL
34537: IFFALSE 34541
// continue ;
34539: GO 34497
// PrepareHuman ( false , i , skill ) ;
34541: LD_INT 0
34543: PPUSH
34544: LD_VAR 0 8
34548: PPUSH
34549: LD_VAR 0 4
34553: PPUSH
34554: CALL_OW 380
// un := CreateHuman ;
34558: LD_ADDR_VAR 0 14
34562: PUSH
34563: CALL_OW 44
34567: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34568: LD_VAR 0 14
34572: PPUSH
34573: LD_VAR 0 1
34577: PPUSH
34578: CALL_OW 250
34582: PPUSH
34583: LD_VAR 0 1
34587: PPUSH
34588: CALL_OW 251
34592: PPUSH
34593: LD_INT 10
34595: PPUSH
34596: LD_INT 0
34598: PPUSH
34599: CALL_OW 50
// result := result ^ un ;
34603: LD_ADDR_VAR 0 7
34607: PUSH
34608: LD_VAR 0 7
34612: PUSH
34613: LD_VAR 0 14
34617: ADD
34618: ST_TO_ADDR
// end ;
34619: GO 34497
34621: POP
34622: POP
// end ; end ;
34623: LD_VAR 0 7
34627: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34628: LD_INT 0
34630: PPUSH
34631: PPUSH
34632: PPUSH
34633: PPUSH
34634: PPUSH
34635: PPUSH
34636: PPUSH
34637: PPUSH
34638: PPUSH
34639: PPUSH
34640: PPUSH
34641: PPUSH
34642: PPUSH
34643: PPUSH
34644: PPUSH
34645: PPUSH
// result := false ;
34646: LD_ADDR_VAR 0 3
34650: PUSH
34651: LD_INT 0
34653: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34654: LD_VAR 0 1
34658: NOT
34659: PUSH
34660: LD_VAR 0 1
34664: PPUSH
34665: CALL_OW 266
34669: PUSH
34670: LD_INT 32
34672: PUSH
34673: LD_INT 33
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: IN
34680: NOT
34681: OR
34682: IFFALSE 34686
// exit ;
34684: GO 35795
// nat := GetNation ( tower ) ;
34686: LD_ADDR_VAR 0 12
34690: PUSH
34691: LD_VAR 0 1
34695: PPUSH
34696: CALL_OW 248
34700: ST_TO_ADDR
// side := GetSide ( tower ) ;
34701: LD_ADDR_VAR 0 16
34705: PUSH
34706: LD_VAR 0 1
34710: PPUSH
34711: CALL_OW 255
34715: ST_TO_ADDR
// x := GetX ( tower ) ;
34716: LD_ADDR_VAR 0 10
34720: PUSH
34721: LD_VAR 0 1
34725: PPUSH
34726: CALL_OW 250
34730: ST_TO_ADDR
// y := GetY ( tower ) ;
34731: LD_ADDR_VAR 0 11
34735: PUSH
34736: LD_VAR 0 1
34740: PPUSH
34741: CALL_OW 251
34745: ST_TO_ADDR
// if not x or not y then
34746: LD_VAR 0 10
34750: NOT
34751: PUSH
34752: LD_VAR 0 11
34756: NOT
34757: OR
34758: IFFALSE 34762
// exit ;
34760: GO 35795
// weapon := 0 ;
34762: LD_ADDR_VAR 0 18
34766: PUSH
34767: LD_INT 0
34769: ST_TO_ADDR
// fac_list := [ ] ;
34770: LD_ADDR_VAR 0 17
34774: PUSH
34775: EMPTY
34776: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34777: LD_ADDR_VAR 0 6
34781: PUSH
34782: LD_VAR 0 1
34786: PPUSH
34787: CALL_OW 274
34791: PPUSH
34792: LD_VAR 0 2
34796: PPUSH
34797: LD_INT 0
34799: PPUSH
34800: CALL 32365 0 3
34804: PPUSH
34805: LD_INT 30
34807: PUSH
34808: LD_INT 3
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PPUSH
34815: CALL_OW 72
34819: ST_TO_ADDR
// if not factories then
34820: LD_VAR 0 6
34824: NOT
34825: IFFALSE 34829
// exit ;
34827: GO 35795
// for i in factories do
34829: LD_ADDR_VAR 0 8
34833: PUSH
34834: LD_VAR 0 6
34838: PUSH
34839: FOR_IN
34840: IFFALSE 34865
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34842: LD_ADDR_VAR 0 17
34846: PUSH
34847: LD_VAR 0 17
34851: PUSH
34852: LD_VAR 0 8
34856: PPUSH
34857: CALL_OW 478
34861: UNION
34862: ST_TO_ADDR
34863: GO 34839
34865: POP
34866: POP
// if not fac_list then
34867: LD_VAR 0 17
34871: NOT
34872: IFFALSE 34876
// exit ;
34874: GO 35795
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34876: LD_ADDR_VAR 0 5
34880: PUSH
34881: LD_INT 4
34883: PUSH
34884: LD_INT 5
34886: PUSH
34887: LD_INT 9
34889: PUSH
34890: LD_INT 10
34892: PUSH
34893: LD_INT 6
34895: PUSH
34896: LD_INT 7
34898: PUSH
34899: LD_INT 11
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: PUSH
34911: LD_INT 27
34913: PUSH
34914: LD_INT 28
34916: PUSH
34917: LD_INT 26
34919: PUSH
34920: LD_INT 30
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 43
34931: PUSH
34932: LD_INT 44
34934: PUSH
34935: LD_INT 46
34937: PUSH
34938: LD_INT 45
34940: PUSH
34941: LD_INT 47
34943: PUSH
34944: LD_INT 49
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: LIST
34959: PUSH
34960: LD_VAR 0 12
34964: ARRAY
34965: ST_TO_ADDR
// list := list isect fac_list ;
34966: LD_ADDR_VAR 0 5
34970: PUSH
34971: LD_VAR 0 5
34975: PUSH
34976: LD_VAR 0 17
34980: ISECT
34981: ST_TO_ADDR
// if not list then
34982: LD_VAR 0 5
34986: NOT
34987: IFFALSE 34991
// exit ;
34989: GO 35795
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34991: LD_VAR 0 12
34995: PUSH
34996: LD_INT 3
34998: EQUAL
34999: PUSH
35000: LD_INT 49
35002: PUSH
35003: LD_VAR 0 5
35007: IN
35008: AND
35009: PUSH
35010: LD_INT 31
35012: PPUSH
35013: LD_VAR 0 16
35017: PPUSH
35018: CALL_OW 321
35022: PUSH
35023: LD_INT 2
35025: EQUAL
35026: AND
35027: IFFALSE 35087
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35029: LD_INT 22
35031: PUSH
35032: LD_VAR 0 16
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 35
35043: PUSH
35044: LD_INT 49
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 91
35053: PUSH
35054: LD_VAR 0 1
35058: PUSH
35059: LD_INT 10
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: LIST
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: LIST
35071: PPUSH
35072: CALL_OW 69
35076: NOT
35077: IFFALSE 35087
// weapon := ru_time_lapser ;
35079: LD_ADDR_VAR 0 18
35083: PUSH
35084: LD_INT 49
35086: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35087: LD_VAR 0 12
35091: PUSH
35092: LD_INT 1
35094: PUSH
35095: LD_INT 2
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: IN
35102: PUSH
35103: LD_INT 11
35105: PUSH
35106: LD_VAR 0 5
35110: IN
35111: PUSH
35112: LD_INT 30
35114: PUSH
35115: LD_VAR 0 5
35119: IN
35120: OR
35121: AND
35122: PUSH
35123: LD_INT 6
35125: PPUSH
35126: LD_VAR 0 16
35130: PPUSH
35131: CALL_OW 321
35135: PUSH
35136: LD_INT 2
35138: EQUAL
35139: AND
35140: IFFALSE 35305
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35142: LD_INT 22
35144: PUSH
35145: LD_VAR 0 16
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 2
35156: PUSH
35157: LD_INT 35
35159: PUSH
35160: LD_INT 11
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 35
35169: PUSH
35170: LD_INT 30
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 91
35184: PUSH
35185: LD_VAR 0 1
35189: PUSH
35190: LD_INT 18
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: LIST
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: LIST
35202: PPUSH
35203: CALL_OW 69
35207: NOT
35208: PUSH
35209: LD_INT 22
35211: PUSH
35212: LD_VAR 0 16
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 2
35223: PUSH
35224: LD_INT 30
35226: PUSH
35227: LD_INT 32
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 30
35236: PUSH
35237: LD_INT 33
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 91
35251: PUSH
35252: LD_VAR 0 1
35256: PUSH
35257: LD_INT 12
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: LIST
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: LIST
35269: PUSH
35270: EMPTY
35271: LIST
35272: PPUSH
35273: CALL_OW 69
35277: PUSH
35278: LD_INT 2
35280: GREATER
35281: AND
35282: IFFALSE 35305
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35284: LD_ADDR_VAR 0 18
35288: PUSH
35289: LD_INT 11
35291: PUSH
35292: LD_INT 30
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_VAR 0 12
35303: ARRAY
35304: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35305: LD_VAR 0 18
35309: NOT
35310: PUSH
35311: LD_INT 40
35313: PPUSH
35314: LD_VAR 0 16
35318: PPUSH
35319: CALL_OW 321
35323: PUSH
35324: LD_INT 2
35326: EQUAL
35327: AND
35328: PUSH
35329: LD_INT 7
35331: PUSH
35332: LD_VAR 0 5
35336: IN
35337: PUSH
35338: LD_INT 28
35340: PUSH
35341: LD_VAR 0 5
35345: IN
35346: OR
35347: PUSH
35348: LD_INT 45
35350: PUSH
35351: LD_VAR 0 5
35355: IN
35356: OR
35357: AND
35358: IFFALSE 35612
// begin hex := GetHexInfo ( x , y ) ;
35360: LD_ADDR_VAR 0 4
35364: PUSH
35365: LD_VAR 0 10
35369: PPUSH
35370: LD_VAR 0 11
35374: PPUSH
35375: CALL_OW 546
35379: ST_TO_ADDR
// if hex [ 1 ] then
35380: LD_VAR 0 4
35384: PUSH
35385: LD_INT 1
35387: ARRAY
35388: IFFALSE 35392
// exit ;
35390: GO 35795
// height := hex [ 2 ] ;
35392: LD_ADDR_VAR 0 15
35396: PUSH
35397: LD_VAR 0 4
35401: PUSH
35402: LD_INT 2
35404: ARRAY
35405: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35406: LD_ADDR_VAR 0 14
35410: PUSH
35411: LD_INT 0
35413: PUSH
35414: LD_INT 2
35416: PUSH
35417: LD_INT 3
35419: PUSH
35420: LD_INT 5
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: ST_TO_ADDR
// for i in tmp do
35429: LD_ADDR_VAR 0 8
35433: PUSH
35434: LD_VAR 0 14
35438: PUSH
35439: FOR_IN
35440: IFFALSE 35610
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35442: LD_ADDR_VAR 0 9
35446: PUSH
35447: LD_VAR 0 10
35451: PPUSH
35452: LD_VAR 0 8
35456: PPUSH
35457: LD_INT 5
35459: PPUSH
35460: CALL_OW 272
35464: PUSH
35465: LD_VAR 0 11
35469: PPUSH
35470: LD_VAR 0 8
35474: PPUSH
35475: LD_INT 5
35477: PPUSH
35478: CALL_OW 273
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35487: LD_VAR 0 9
35491: PUSH
35492: LD_INT 1
35494: ARRAY
35495: PPUSH
35496: LD_VAR 0 9
35500: PUSH
35501: LD_INT 2
35503: ARRAY
35504: PPUSH
35505: CALL_OW 488
35509: IFFALSE 35608
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35511: LD_ADDR_VAR 0 4
35515: PUSH
35516: LD_VAR 0 9
35520: PUSH
35521: LD_INT 1
35523: ARRAY
35524: PPUSH
35525: LD_VAR 0 9
35529: PUSH
35530: LD_INT 2
35532: ARRAY
35533: PPUSH
35534: CALL_OW 546
35538: ST_TO_ADDR
// if hex [ 1 ] then
35539: LD_VAR 0 4
35543: PUSH
35544: LD_INT 1
35546: ARRAY
35547: IFFALSE 35551
// continue ;
35549: GO 35439
// h := hex [ 2 ] ;
35551: LD_ADDR_VAR 0 13
35555: PUSH
35556: LD_VAR 0 4
35560: PUSH
35561: LD_INT 2
35563: ARRAY
35564: ST_TO_ADDR
// if h + 7 < height then
35565: LD_VAR 0 13
35569: PUSH
35570: LD_INT 7
35572: PLUS
35573: PUSH
35574: LD_VAR 0 15
35578: LESS
35579: IFFALSE 35608
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35581: LD_ADDR_VAR 0 18
35585: PUSH
35586: LD_INT 7
35588: PUSH
35589: LD_INT 28
35591: PUSH
35592: LD_INT 45
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: LIST
35599: PUSH
35600: LD_VAR 0 12
35604: ARRAY
35605: ST_TO_ADDR
// break ;
35606: GO 35610
// end ; end ; end ;
35608: GO 35439
35610: POP
35611: POP
// end ; if not weapon then
35612: LD_VAR 0 18
35616: NOT
35617: IFFALSE 35677
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35619: LD_ADDR_VAR 0 5
35623: PUSH
35624: LD_VAR 0 5
35628: PUSH
35629: LD_INT 11
35631: PUSH
35632: LD_INT 30
35634: PUSH
35635: LD_INT 49
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: LIST
35642: DIFF
35643: ST_TO_ADDR
// if not list then
35644: LD_VAR 0 5
35648: NOT
35649: IFFALSE 35653
// exit ;
35651: GO 35795
// weapon := list [ rand ( 1 , list ) ] ;
35653: LD_ADDR_VAR 0 18
35657: PUSH
35658: LD_VAR 0 5
35662: PUSH
35663: LD_INT 1
35665: PPUSH
35666: LD_VAR 0 5
35670: PPUSH
35671: CALL_OW 12
35675: ARRAY
35676: ST_TO_ADDR
// end ; if weapon then
35677: LD_VAR 0 18
35681: IFFALSE 35795
// begin tmp := CostOfWeapon ( weapon ) ;
35683: LD_ADDR_VAR 0 14
35687: PUSH
35688: LD_VAR 0 18
35692: PPUSH
35693: CALL_OW 451
35697: ST_TO_ADDR
// j := GetBase ( tower ) ;
35698: LD_ADDR_VAR 0 9
35702: PUSH
35703: LD_VAR 0 1
35707: PPUSH
35708: CALL_OW 274
35712: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35713: LD_VAR 0 9
35717: PPUSH
35718: LD_INT 1
35720: PPUSH
35721: CALL_OW 275
35725: PUSH
35726: LD_VAR 0 14
35730: PUSH
35731: LD_INT 1
35733: ARRAY
35734: GREATEREQUAL
35735: PUSH
35736: LD_VAR 0 9
35740: PPUSH
35741: LD_INT 2
35743: PPUSH
35744: CALL_OW 275
35748: PUSH
35749: LD_VAR 0 14
35753: PUSH
35754: LD_INT 2
35756: ARRAY
35757: GREATEREQUAL
35758: AND
35759: PUSH
35760: LD_VAR 0 9
35764: PPUSH
35765: LD_INT 3
35767: PPUSH
35768: CALL_OW 275
35772: PUSH
35773: LD_VAR 0 14
35777: PUSH
35778: LD_INT 3
35780: ARRAY
35781: GREATEREQUAL
35782: AND
35783: IFFALSE 35795
// result := weapon ;
35785: LD_ADDR_VAR 0 3
35789: PUSH
35790: LD_VAR 0 18
35794: ST_TO_ADDR
// end ; end ;
35795: LD_VAR 0 3
35799: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35800: LD_INT 0
35802: PPUSH
35803: PPUSH
// result := true ;
35804: LD_ADDR_VAR 0 3
35808: PUSH
35809: LD_INT 1
35811: ST_TO_ADDR
// if array1 = array2 then
35812: LD_VAR 0 1
35816: PUSH
35817: LD_VAR 0 2
35821: EQUAL
35822: IFFALSE 35882
// begin for i = 1 to array1 do
35824: LD_ADDR_VAR 0 4
35828: PUSH
35829: DOUBLE
35830: LD_INT 1
35832: DEC
35833: ST_TO_ADDR
35834: LD_VAR 0 1
35838: PUSH
35839: FOR_TO
35840: IFFALSE 35878
// if array1 [ i ] <> array2 [ i ] then
35842: LD_VAR 0 1
35846: PUSH
35847: LD_VAR 0 4
35851: ARRAY
35852: PUSH
35853: LD_VAR 0 2
35857: PUSH
35858: LD_VAR 0 4
35862: ARRAY
35863: NONEQUAL
35864: IFFALSE 35876
// begin result := false ;
35866: LD_ADDR_VAR 0 3
35870: PUSH
35871: LD_INT 0
35873: ST_TO_ADDR
// break ;
35874: GO 35878
// end ;
35876: GO 35839
35878: POP
35879: POP
// end else
35880: GO 35890
// result := false ;
35882: LD_ADDR_VAR 0 3
35886: PUSH
35887: LD_INT 0
35889: ST_TO_ADDR
// end ;
35890: LD_VAR 0 3
35894: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35895: LD_INT 0
35897: PPUSH
35898: PPUSH
// if not array1 or not array2 then
35899: LD_VAR 0 1
35903: NOT
35904: PUSH
35905: LD_VAR 0 2
35909: NOT
35910: OR
35911: IFFALSE 35915
// exit ;
35913: GO 35979
// result := true ;
35915: LD_ADDR_VAR 0 3
35919: PUSH
35920: LD_INT 1
35922: ST_TO_ADDR
// for i = 1 to array1 do
35923: LD_ADDR_VAR 0 4
35927: PUSH
35928: DOUBLE
35929: LD_INT 1
35931: DEC
35932: ST_TO_ADDR
35933: LD_VAR 0 1
35937: PUSH
35938: FOR_TO
35939: IFFALSE 35977
// if array1 [ i ] <> array2 [ i ] then
35941: LD_VAR 0 1
35945: PUSH
35946: LD_VAR 0 4
35950: ARRAY
35951: PUSH
35952: LD_VAR 0 2
35956: PUSH
35957: LD_VAR 0 4
35961: ARRAY
35962: NONEQUAL
35963: IFFALSE 35975
// begin result := false ;
35965: LD_ADDR_VAR 0 3
35969: PUSH
35970: LD_INT 0
35972: ST_TO_ADDR
// break ;
35973: GO 35977
// end ;
35975: GO 35938
35977: POP
35978: POP
// end ;
35979: LD_VAR 0 3
35983: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35984: LD_INT 0
35986: PPUSH
35987: PPUSH
35988: PPUSH
// pom := GetBase ( fac ) ;
35989: LD_ADDR_VAR 0 5
35993: PUSH
35994: LD_VAR 0 1
35998: PPUSH
35999: CALL_OW 274
36003: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36004: LD_ADDR_VAR 0 4
36008: PUSH
36009: LD_VAR 0 2
36013: PUSH
36014: LD_INT 1
36016: ARRAY
36017: PPUSH
36018: LD_VAR 0 2
36022: PUSH
36023: LD_INT 2
36025: ARRAY
36026: PPUSH
36027: LD_VAR 0 2
36031: PUSH
36032: LD_INT 3
36034: ARRAY
36035: PPUSH
36036: LD_VAR 0 2
36040: PUSH
36041: LD_INT 4
36043: ARRAY
36044: PPUSH
36045: CALL_OW 449
36049: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36050: LD_ADDR_VAR 0 3
36054: PUSH
36055: LD_VAR 0 5
36059: PPUSH
36060: LD_INT 1
36062: PPUSH
36063: CALL_OW 275
36067: PUSH
36068: LD_VAR 0 4
36072: PUSH
36073: LD_INT 1
36075: ARRAY
36076: GREATEREQUAL
36077: PUSH
36078: LD_VAR 0 5
36082: PPUSH
36083: LD_INT 2
36085: PPUSH
36086: CALL_OW 275
36090: PUSH
36091: LD_VAR 0 4
36095: PUSH
36096: LD_INT 2
36098: ARRAY
36099: GREATEREQUAL
36100: AND
36101: PUSH
36102: LD_VAR 0 5
36106: PPUSH
36107: LD_INT 3
36109: PPUSH
36110: CALL_OW 275
36114: PUSH
36115: LD_VAR 0 4
36119: PUSH
36120: LD_INT 3
36122: ARRAY
36123: GREATEREQUAL
36124: AND
36125: ST_TO_ADDR
// end ;
36126: LD_VAR 0 3
36130: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36131: LD_INT 0
36133: PPUSH
36134: PPUSH
36135: PPUSH
36136: PPUSH
// pom := GetBase ( building ) ;
36137: LD_ADDR_VAR 0 3
36141: PUSH
36142: LD_VAR 0 1
36146: PPUSH
36147: CALL_OW 274
36151: ST_TO_ADDR
// if not pom then
36152: LD_VAR 0 3
36156: NOT
36157: IFFALSE 36161
// exit ;
36159: GO 36331
// btype := GetBType ( building ) ;
36161: LD_ADDR_VAR 0 5
36165: PUSH
36166: LD_VAR 0 1
36170: PPUSH
36171: CALL_OW 266
36175: ST_TO_ADDR
// if btype = b_armoury then
36176: LD_VAR 0 5
36180: PUSH
36181: LD_INT 4
36183: EQUAL
36184: IFFALSE 36194
// btype := b_barracks ;
36186: LD_ADDR_VAR 0 5
36190: PUSH
36191: LD_INT 5
36193: ST_TO_ADDR
// if btype = b_depot then
36194: LD_VAR 0 5
36198: PUSH
36199: LD_INT 0
36201: EQUAL
36202: IFFALSE 36212
// btype := b_warehouse ;
36204: LD_ADDR_VAR 0 5
36208: PUSH
36209: LD_INT 1
36211: ST_TO_ADDR
// if btype = b_workshop then
36212: LD_VAR 0 5
36216: PUSH
36217: LD_INT 2
36219: EQUAL
36220: IFFALSE 36230
// btype := b_factory ;
36222: LD_ADDR_VAR 0 5
36226: PUSH
36227: LD_INT 3
36229: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36230: LD_ADDR_VAR 0 4
36234: PUSH
36235: LD_VAR 0 5
36239: PPUSH
36240: LD_VAR 0 1
36244: PPUSH
36245: CALL_OW 248
36249: PPUSH
36250: CALL_OW 450
36254: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36255: LD_ADDR_VAR 0 2
36259: PUSH
36260: LD_VAR 0 3
36264: PPUSH
36265: LD_INT 1
36267: PPUSH
36268: CALL_OW 275
36272: PUSH
36273: LD_VAR 0 4
36277: PUSH
36278: LD_INT 1
36280: ARRAY
36281: GREATEREQUAL
36282: PUSH
36283: LD_VAR 0 3
36287: PPUSH
36288: LD_INT 2
36290: PPUSH
36291: CALL_OW 275
36295: PUSH
36296: LD_VAR 0 4
36300: PUSH
36301: LD_INT 2
36303: ARRAY
36304: GREATEREQUAL
36305: AND
36306: PUSH
36307: LD_VAR 0 3
36311: PPUSH
36312: LD_INT 3
36314: PPUSH
36315: CALL_OW 275
36319: PUSH
36320: LD_VAR 0 4
36324: PUSH
36325: LD_INT 3
36327: ARRAY
36328: GREATEREQUAL
36329: AND
36330: ST_TO_ADDR
// end ;
36331: LD_VAR 0 2
36335: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36336: LD_INT 0
36338: PPUSH
36339: PPUSH
36340: PPUSH
// pom := GetBase ( building ) ;
36341: LD_ADDR_VAR 0 4
36345: PUSH
36346: LD_VAR 0 1
36350: PPUSH
36351: CALL_OW 274
36355: ST_TO_ADDR
// if not pom then
36356: LD_VAR 0 4
36360: NOT
36361: IFFALSE 36365
// exit ;
36363: GO 36466
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36365: LD_ADDR_VAR 0 5
36369: PUSH
36370: LD_VAR 0 2
36374: PPUSH
36375: LD_VAR 0 1
36379: PPUSH
36380: CALL_OW 248
36384: PPUSH
36385: CALL_OW 450
36389: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36390: LD_ADDR_VAR 0 3
36394: PUSH
36395: LD_VAR 0 4
36399: PPUSH
36400: LD_INT 1
36402: PPUSH
36403: CALL_OW 275
36407: PUSH
36408: LD_VAR 0 5
36412: PUSH
36413: LD_INT 1
36415: ARRAY
36416: GREATEREQUAL
36417: PUSH
36418: LD_VAR 0 4
36422: PPUSH
36423: LD_INT 2
36425: PPUSH
36426: CALL_OW 275
36430: PUSH
36431: LD_VAR 0 5
36435: PUSH
36436: LD_INT 2
36438: ARRAY
36439: GREATEREQUAL
36440: AND
36441: PUSH
36442: LD_VAR 0 4
36446: PPUSH
36447: LD_INT 3
36449: PPUSH
36450: CALL_OW 275
36454: PUSH
36455: LD_VAR 0 5
36459: PUSH
36460: LD_INT 3
36462: ARRAY
36463: GREATEREQUAL
36464: AND
36465: ST_TO_ADDR
// end ;
36466: LD_VAR 0 3
36470: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36471: LD_INT 0
36473: PPUSH
36474: PPUSH
36475: PPUSH
36476: PPUSH
36477: PPUSH
36478: PPUSH
36479: PPUSH
36480: PPUSH
36481: PPUSH
36482: PPUSH
36483: PPUSH
// result := false ;
36484: LD_ADDR_VAR 0 8
36488: PUSH
36489: LD_INT 0
36491: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36492: LD_VAR 0 5
36496: NOT
36497: PUSH
36498: LD_VAR 0 1
36502: NOT
36503: OR
36504: PUSH
36505: LD_VAR 0 2
36509: NOT
36510: OR
36511: PUSH
36512: LD_VAR 0 3
36516: NOT
36517: OR
36518: IFFALSE 36522
// exit ;
36520: GO 37336
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36522: LD_ADDR_VAR 0 14
36526: PUSH
36527: LD_VAR 0 1
36531: PPUSH
36532: LD_VAR 0 2
36536: PPUSH
36537: LD_VAR 0 3
36541: PPUSH
36542: LD_VAR 0 4
36546: PPUSH
36547: LD_VAR 0 5
36551: PUSH
36552: LD_INT 1
36554: ARRAY
36555: PPUSH
36556: CALL_OW 248
36560: PPUSH
36561: LD_INT 0
36563: PPUSH
36564: CALL 38573 0 6
36568: ST_TO_ADDR
// if not hexes then
36569: LD_VAR 0 14
36573: NOT
36574: IFFALSE 36578
// exit ;
36576: GO 37336
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36578: LD_ADDR_VAR 0 17
36582: PUSH
36583: LD_VAR 0 5
36587: PPUSH
36588: LD_INT 22
36590: PUSH
36591: LD_VAR 0 13
36595: PPUSH
36596: CALL_OW 255
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 2
36607: PUSH
36608: LD_INT 30
36610: PUSH
36611: LD_INT 0
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 30
36620: PUSH
36621: LD_INT 1
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: LIST
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PPUSH
36637: CALL_OW 72
36641: ST_TO_ADDR
// for i = 1 to hexes do
36642: LD_ADDR_VAR 0 9
36646: PUSH
36647: DOUBLE
36648: LD_INT 1
36650: DEC
36651: ST_TO_ADDR
36652: LD_VAR 0 14
36656: PUSH
36657: FOR_TO
36658: IFFALSE 37334
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36660: LD_ADDR_VAR 0 13
36664: PUSH
36665: LD_VAR 0 14
36669: PUSH
36670: LD_VAR 0 9
36674: ARRAY
36675: PUSH
36676: LD_INT 1
36678: ARRAY
36679: PPUSH
36680: LD_VAR 0 14
36684: PUSH
36685: LD_VAR 0 9
36689: ARRAY
36690: PUSH
36691: LD_INT 2
36693: ARRAY
36694: PPUSH
36695: CALL_OW 428
36699: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36700: LD_VAR 0 14
36704: PUSH
36705: LD_VAR 0 9
36709: ARRAY
36710: PUSH
36711: LD_INT 1
36713: ARRAY
36714: PPUSH
36715: LD_VAR 0 14
36719: PUSH
36720: LD_VAR 0 9
36724: ARRAY
36725: PUSH
36726: LD_INT 2
36728: ARRAY
36729: PPUSH
36730: CALL_OW 351
36734: PUSH
36735: LD_VAR 0 14
36739: PUSH
36740: LD_VAR 0 9
36744: ARRAY
36745: PUSH
36746: LD_INT 1
36748: ARRAY
36749: PPUSH
36750: LD_VAR 0 14
36754: PUSH
36755: LD_VAR 0 9
36759: ARRAY
36760: PUSH
36761: LD_INT 2
36763: ARRAY
36764: PPUSH
36765: CALL_OW 488
36769: NOT
36770: OR
36771: PUSH
36772: LD_VAR 0 13
36776: PPUSH
36777: CALL_OW 247
36781: PUSH
36782: LD_INT 3
36784: EQUAL
36785: OR
36786: IFFALSE 36792
// exit ;
36788: POP
36789: POP
36790: GO 37336
// if not tmp then
36792: LD_VAR 0 13
36796: NOT
36797: IFFALSE 36801
// continue ;
36799: GO 36657
// result := true ;
36801: LD_ADDR_VAR 0 8
36805: PUSH
36806: LD_INT 1
36808: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36809: LD_VAR 0 6
36813: PUSH
36814: LD_VAR 0 13
36818: PPUSH
36819: CALL_OW 247
36823: PUSH
36824: LD_INT 2
36826: EQUAL
36827: AND
36828: PUSH
36829: LD_VAR 0 13
36833: PPUSH
36834: CALL_OW 263
36838: PUSH
36839: LD_INT 1
36841: EQUAL
36842: AND
36843: IFFALSE 37007
// begin if IsDrivenBy ( tmp ) then
36845: LD_VAR 0 13
36849: PPUSH
36850: CALL_OW 311
36854: IFFALSE 36858
// continue ;
36856: GO 36657
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36858: LD_VAR 0 6
36862: PPUSH
36863: LD_INT 3
36865: PUSH
36866: LD_INT 60
36868: PUSH
36869: EMPTY
36870: LIST
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: LD_INT 3
36878: PUSH
36879: LD_INT 55
36881: PUSH
36882: EMPTY
36883: LIST
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PPUSH
36893: CALL_OW 72
36897: IFFALSE 37005
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36899: LD_ADDR_VAR 0 18
36903: PUSH
36904: LD_VAR 0 6
36908: PPUSH
36909: LD_INT 3
36911: PUSH
36912: LD_INT 60
36914: PUSH
36915: EMPTY
36916: LIST
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 3
36924: PUSH
36925: LD_INT 55
36927: PUSH
36928: EMPTY
36929: LIST
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PPUSH
36939: CALL_OW 72
36943: PUSH
36944: LD_INT 1
36946: ARRAY
36947: ST_TO_ADDR
// if IsInUnit ( driver ) then
36948: LD_VAR 0 18
36952: PPUSH
36953: CALL_OW 310
36957: IFFALSE 36968
// ComExit ( driver ) ;
36959: LD_VAR 0 18
36963: PPUSH
36964: CALL 61757 0 1
// AddComEnterUnit ( driver , tmp ) ;
36968: LD_VAR 0 18
36972: PPUSH
36973: LD_VAR 0 13
36977: PPUSH
36978: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36982: LD_VAR 0 18
36986: PPUSH
36987: LD_VAR 0 7
36991: PPUSH
36992: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36996: LD_VAR 0 18
37000: PPUSH
37001: CALL_OW 181
// end ; continue ;
37005: GO 36657
// end ; if not cleaners or not tmp in cleaners then
37007: LD_VAR 0 6
37011: NOT
37012: PUSH
37013: LD_VAR 0 13
37017: PUSH
37018: LD_VAR 0 6
37022: IN
37023: NOT
37024: OR
37025: IFFALSE 37332
// begin if dep then
37027: LD_VAR 0 17
37031: IFFALSE 37167
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37033: LD_ADDR_VAR 0 16
37037: PUSH
37038: LD_VAR 0 17
37042: PUSH
37043: LD_INT 1
37045: ARRAY
37046: PPUSH
37047: CALL_OW 250
37051: PPUSH
37052: LD_VAR 0 17
37056: PUSH
37057: LD_INT 1
37059: ARRAY
37060: PPUSH
37061: CALL_OW 254
37065: PPUSH
37066: LD_INT 5
37068: PPUSH
37069: CALL_OW 272
37073: PUSH
37074: LD_VAR 0 17
37078: PUSH
37079: LD_INT 1
37081: ARRAY
37082: PPUSH
37083: CALL_OW 251
37087: PPUSH
37088: LD_VAR 0 17
37092: PUSH
37093: LD_INT 1
37095: ARRAY
37096: PPUSH
37097: CALL_OW 254
37101: PPUSH
37102: LD_INT 5
37104: PPUSH
37105: CALL_OW 273
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37114: LD_VAR 0 16
37118: PUSH
37119: LD_INT 1
37121: ARRAY
37122: PPUSH
37123: LD_VAR 0 16
37127: PUSH
37128: LD_INT 2
37130: ARRAY
37131: PPUSH
37132: CALL_OW 488
37136: IFFALSE 37167
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37138: LD_VAR 0 13
37142: PPUSH
37143: LD_VAR 0 16
37147: PUSH
37148: LD_INT 1
37150: ARRAY
37151: PPUSH
37152: LD_VAR 0 16
37156: PUSH
37157: LD_INT 2
37159: ARRAY
37160: PPUSH
37161: CALL_OW 111
// continue ;
37165: GO 36657
// end ; end ; r := GetDir ( tmp ) ;
37167: LD_ADDR_VAR 0 15
37171: PUSH
37172: LD_VAR 0 13
37176: PPUSH
37177: CALL_OW 254
37181: ST_TO_ADDR
// if r = 5 then
37182: LD_VAR 0 15
37186: PUSH
37187: LD_INT 5
37189: EQUAL
37190: IFFALSE 37200
// r := 0 ;
37192: LD_ADDR_VAR 0 15
37196: PUSH
37197: LD_INT 0
37199: ST_TO_ADDR
// for j = r to 5 do
37200: LD_ADDR_VAR 0 10
37204: PUSH
37205: DOUBLE
37206: LD_VAR 0 15
37210: DEC
37211: ST_TO_ADDR
37212: LD_INT 5
37214: PUSH
37215: FOR_TO
37216: IFFALSE 37330
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37218: LD_ADDR_VAR 0 11
37222: PUSH
37223: LD_VAR 0 13
37227: PPUSH
37228: CALL_OW 250
37232: PPUSH
37233: LD_VAR 0 10
37237: PPUSH
37238: LD_INT 2
37240: PPUSH
37241: CALL_OW 272
37245: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37246: LD_ADDR_VAR 0 12
37250: PUSH
37251: LD_VAR 0 13
37255: PPUSH
37256: CALL_OW 251
37260: PPUSH
37261: LD_VAR 0 10
37265: PPUSH
37266: LD_INT 2
37268: PPUSH
37269: CALL_OW 273
37273: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37274: LD_VAR 0 11
37278: PPUSH
37279: LD_VAR 0 12
37283: PPUSH
37284: CALL_OW 488
37288: PUSH
37289: LD_VAR 0 11
37293: PPUSH
37294: LD_VAR 0 12
37298: PPUSH
37299: CALL_OW 428
37303: NOT
37304: AND
37305: IFFALSE 37328
// begin ComMoveXY ( tmp , _x , _y ) ;
37307: LD_VAR 0 13
37311: PPUSH
37312: LD_VAR 0 11
37316: PPUSH
37317: LD_VAR 0 12
37321: PPUSH
37322: CALL_OW 111
// break ;
37326: GO 37330
// end ; end ;
37328: GO 37215
37330: POP
37331: POP
// end ; end ;
37332: GO 36657
37334: POP
37335: POP
// end ;
37336: LD_VAR 0 8
37340: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37341: LD_INT 0
37343: PPUSH
// result := true ;
37344: LD_ADDR_VAR 0 3
37348: PUSH
37349: LD_INT 1
37351: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37352: LD_VAR 0 2
37356: PUSH
37357: LD_INT 24
37359: DOUBLE
37360: EQUAL
37361: IFTRUE 37371
37363: LD_INT 33
37365: DOUBLE
37366: EQUAL
37367: IFTRUE 37371
37369: GO 37396
37371: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37372: LD_ADDR_VAR 0 3
37376: PUSH
37377: LD_INT 32
37379: PPUSH
37380: LD_VAR 0 1
37384: PPUSH
37385: CALL_OW 321
37389: PUSH
37390: LD_INT 2
37392: EQUAL
37393: ST_TO_ADDR
37394: GO 37716
37396: LD_INT 20
37398: DOUBLE
37399: EQUAL
37400: IFTRUE 37404
37402: GO 37429
37404: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37405: LD_ADDR_VAR 0 3
37409: PUSH
37410: LD_INT 6
37412: PPUSH
37413: LD_VAR 0 1
37417: PPUSH
37418: CALL_OW 321
37422: PUSH
37423: LD_INT 2
37425: EQUAL
37426: ST_TO_ADDR
37427: GO 37716
37429: LD_INT 22
37431: DOUBLE
37432: EQUAL
37433: IFTRUE 37443
37435: LD_INT 36
37437: DOUBLE
37438: EQUAL
37439: IFTRUE 37443
37441: GO 37468
37443: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37444: LD_ADDR_VAR 0 3
37448: PUSH
37449: LD_INT 15
37451: PPUSH
37452: LD_VAR 0 1
37456: PPUSH
37457: CALL_OW 321
37461: PUSH
37462: LD_INT 2
37464: EQUAL
37465: ST_TO_ADDR
37466: GO 37716
37468: LD_INT 30
37470: DOUBLE
37471: EQUAL
37472: IFTRUE 37476
37474: GO 37501
37476: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37477: LD_ADDR_VAR 0 3
37481: PUSH
37482: LD_INT 20
37484: PPUSH
37485: LD_VAR 0 1
37489: PPUSH
37490: CALL_OW 321
37494: PUSH
37495: LD_INT 2
37497: EQUAL
37498: ST_TO_ADDR
37499: GO 37716
37501: LD_INT 28
37503: DOUBLE
37504: EQUAL
37505: IFTRUE 37515
37507: LD_INT 21
37509: DOUBLE
37510: EQUAL
37511: IFTRUE 37515
37513: GO 37540
37515: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37516: LD_ADDR_VAR 0 3
37520: PUSH
37521: LD_INT 21
37523: PPUSH
37524: LD_VAR 0 1
37528: PPUSH
37529: CALL_OW 321
37533: PUSH
37534: LD_INT 2
37536: EQUAL
37537: ST_TO_ADDR
37538: GO 37716
37540: LD_INT 16
37542: DOUBLE
37543: EQUAL
37544: IFTRUE 37548
37546: GO 37575
37548: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37549: LD_ADDR_VAR 0 3
37553: PUSH
37554: LD_EXP 70
37558: PPUSH
37559: LD_VAR 0 1
37563: PPUSH
37564: CALL_OW 321
37568: PUSH
37569: LD_INT 2
37571: EQUAL
37572: ST_TO_ADDR
37573: GO 37716
37575: LD_INT 19
37577: DOUBLE
37578: EQUAL
37579: IFTRUE 37589
37581: LD_INT 23
37583: DOUBLE
37584: EQUAL
37585: IFTRUE 37589
37587: GO 37616
37589: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37590: LD_ADDR_VAR 0 3
37594: PUSH
37595: LD_EXP 69
37599: PPUSH
37600: LD_VAR 0 1
37604: PPUSH
37605: CALL_OW 321
37609: PUSH
37610: LD_INT 2
37612: EQUAL
37613: ST_TO_ADDR
37614: GO 37716
37616: LD_INT 17
37618: DOUBLE
37619: EQUAL
37620: IFTRUE 37624
37622: GO 37649
37624: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37625: LD_ADDR_VAR 0 3
37629: PUSH
37630: LD_INT 39
37632: PPUSH
37633: LD_VAR 0 1
37637: PPUSH
37638: CALL_OW 321
37642: PUSH
37643: LD_INT 2
37645: EQUAL
37646: ST_TO_ADDR
37647: GO 37716
37649: LD_INT 18
37651: DOUBLE
37652: EQUAL
37653: IFTRUE 37657
37655: GO 37682
37657: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37658: LD_ADDR_VAR 0 3
37662: PUSH
37663: LD_INT 40
37665: PPUSH
37666: LD_VAR 0 1
37670: PPUSH
37671: CALL_OW 321
37675: PUSH
37676: LD_INT 2
37678: EQUAL
37679: ST_TO_ADDR
37680: GO 37716
37682: LD_INT 27
37684: DOUBLE
37685: EQUAL
37686: IFTRUE 37690
37688: GO 37715
37690: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37691: LD_ADDR_VAR 0 3
37695: PUSH
37696: LD_INT 35
37698: PPUSH
37699: LD_VAR 0 1
37703: PPUSH
37704: CALL_OW 321
37708: PUSH
37709: LD_INT 2
37711: EQUAL
37712: ST_TO_ADDR
37713: GO 37716
37715: POP
// end ;
37716: LD_VAR 0 3
37720: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37721: LD_INT 0
37723: PPUSH
37724: PPUSH
37725: PPUSH
37726: PPUSH
37727: PPUSH
37728: PPUSH
37729: PPUSH
37730: PPUSH
37731: PPUSH
37732: PPUSH
37733: PPUSH
// result := false ;
37734: LD_ADDR_VAR 0 6
37738: PUSH
37739: LD_INT 0
37741: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37742: LD_VAR 0 1
37746: NOT
37747: PUSH
37748: LD_VAR 0 1
37752: PPUSH
37753: CALL_OW 266
37757: PUSH
37758: LD_INT 0
37760: PUSH
37761: LD_INT 1
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: IN
37768: NOT
37769: OR
37770: PUSH
37771: LD_VAR 0 2
37775: NOT
37776: OR
37777: PUSH
37778: LD_VAR 0 5
37782: PUSH
37783: LD_INT 0
37785: PUSH
37786: LD_INT 1
37788: PUSH
37789: LD_INT 2
37791: PUSH
37792: LD_INT 3
37794: PUSH
37795: LD_INT 4
37797: PUSH
37798: LD_INT 5
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: IN
37809: NOT
37810: OR
37811: PUSH
37812: LD_VAR 0 3
37816: PPUSH
37817: LD_VAR 0 4
37821: PPUSH
37822: CALL_OW 488
37826: NOT
37827: OR
37828: IFFALSE 37832
// exit ;
37830: GO 38568
// side := GetSide ( depot ) ;
37832: LD_ADDR_VAR 0 9
37836: PUSH
37837: LD_VAR 0 1
37841: PPUSH
37842: CALL_OW 255
37846: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37847: LD_VAR 0 9
37851: PPUSH
37852: LD_VAR 0 2
37856: PPUSH
37857: CALL 37341 0 2
37861: NOT
37862: IFFALSE 37866
// exit ;
37864: GO 38568
// pom := GetBase ( depot ) ;
37866: LD_ADDR_VAR 0 10
37870: PUSH
37871: LD_VAR 0 1
37875: PPUSH
37876: CALL_OW 274
37880: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37881: LD_ADDR_VAR 0 11
37885: PUSH
37886: LD_VAR 0 2
37890: PPUSH
37891: LD_VAR 0 1
37895: PPUSH
37896: CALL_OW 248
37900: PPUSH
37901: CALL_OW 450
37905: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37906: LD_VAR 0 10
37910: PPUSH
37911: LD_INT 1
37913: PPUSH
37914: CALL_OW 275
37918: PUSH
37919: LD_VAR 0 11
37923: PUSH
37924: LD_INT 1
37926: ARRAY
37927: GREATEREQUAL
37928: PUSH
37929: LD_VAR 0 10
37933: PPUSH
37934: LD_INT 2
37936: PPUSH
37937: CALL_OW 275
37941: PUSH
37942: LD_VAR 0 11
37946: PUSH
37947: LD_INT 2
37949: ARRAY
37950: GREATEREQUAL
37951: AND
37952: PUSH
37953: LD_VAR 0 10
37957: PPUSH
37958: LD_INT 3
37960: PPUSH
37961: CALL_OW 275
37965: PUSH
37966: LD_VAR 0 11
37970: PUSH
37971: LD_INT 3
37973: ARRAY
37974: GREATEREQUAL
37975: AND
37976: NOT
37977: IFFALSE 37981
// exit ;
37979: GO 38568
// if GetBType ( depot ) = b_depot then
37981: LD_VAR 0 1
37985: PPUSH
37986: CALL_OW 266
37990: PUSH
37991: LD_INT 0
37993: EQUAL
37994: IFFALSE 38006
// dist := 28 else
37996: LD_ADDR_VAR 0 14
38000: PUSH
38001: LD_INT 28
38003: ST_TO_ADDR
38004: GO 38014
// dist := 36 ;
38006: LD_ADDR_VAR 0 14
38010: PUSH
38011: LD_INT 36
38013: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38014: LD_VAR 0 1
38018: PPUSH
38019: LD_VAR 0 3
38023: PPUSH
38024: LD_VAR 0 4
38028: PPUSH
38029: CALL_OW 297
38033: PUSH
38034: LD_VAR 0 14
38038: GREATER
38039: IFFALSE 38043
// exit ;
38041: GO 38568
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38043: LD_ADDR_VAR 0 12
38047: PUSH
38048: LD_VAR 0 2
38052: PPUSH
38053: LD_VAR 0 3
38057: PPUSH
38058: LD_VAR 0 4
38062: PPUSH
38063: LD_VAR 0 5
38067: PPUSH
38068: LD_VAR 0 1
38072: PPUSH
38073: CALL_OW 248
38077: PPUSH
38078: LD_INT 0
38080: PPUSH
38081: CALL 38573 0 6
38085: ST_TO_ADDR
// if not hexes then
38086: LD_VAR 0 12
38090: NOT
38091: IFFALSE 38095
// exit ;
38093: GO 38568
// hex := GetHexInfo ( x , y ) ;
38095: LD_ADDR_VAR 0 15
38099: PUSH
38100: LD_VAR 0 3
38104: PPUSH
38105: LD_VAR 0 4
38109: PPUSH
38110: CALL_OW 546
38114: ST_TO_ADDR
// if hex [ 1 ] then
38115: LD_VAR 0 15
38119: PUSH
38120: LD_INT 1
38122: ARRAY
38123: IFFALSE 38127
// exit ;
38125: GO 38568
// height := hex [ 2 ] ;
38127: LD_ADDR_VAR 0 13
38131: PUSH
38132: LD_VAR 0 15
38136: PUSH
38137: LD_INT 2
38139: ARRAY
38140: ST_TO_ADDR
// for i = 1 to hexes do
38141: LD_ADDR_VAR 0 7
38145: PUSH
38146: DOUBLE
38147: LD_INT 1
38149: DEC
38150: ST_TO_ADDR
38151: LD_VAR 0 12
38155: PUSH
38156: FOR_TO
38157: IFFALSE 38487
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38159: LD_VAR 0 12
38163: PUSH
38164: LD_VAR 0 7
38168: ARRAY
38169: PUSH
38170: LD_INT 1
38172: ARRAY
38173: PPUSH
38174: LD_VAR 0 12
38178: PUSH
38179: LD_VAR 0 7
38183: ARRAY
38184: PUSH
38185: LD_INT 2
38187: ARRAY
38188: PPUSH
38189: CALL_OW 488
38193: NOT
38194: PUSH
38195: LD_VAR 0 12
38199: PUSH
38200: LD_VAR 0 7
38204: ARRAY
38205: PUSH
38206: LD_INT 1
38208: ARRAY
38209: PPUSH
38210: LD_VAR 0 12
38214: PUSH
38215: LD_VAR 0 7
38219: ARRAY
38220: PUSH
38221: LD_INT 2
38223: ARRAY
38224: PPUSH
38225: CALL_OW 428
38229: PUSH
38230: LD_INT 0
38232: GREATER
38233: OR
38234: PUSH
38235: LD_VAR 0 12
38239: PUSH
38240: LD_VAR 0 7
38244: ARRAY
38245: PUSH
38246: LD_INT 1
38248: ARRAY
38249: PPUSH
38250: LD_VAR 0 12
38254: PUSH
38255: LD_VAR 0 7
38259: ARRAY
38260: PUSH
38261: LD_INT 2
38263: ARRAY
38264: PPUSH
38265: CALL_OW 351
38269: OR
38270: IFFALSE 38276
// exit ;
38272: POP
38273: POP
38274: GO 38568
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38276: LD_ADDR_VAR 0 8
38280: PUSH
38281: LD_VAR 0 12
38285: PUSH
38286: LD_VAR 0 7
38290: ARRAY
38291: PUSH
38292: LD_INT 1
38294: ARRAY
38295: PPUSH
38296: LD_VAR 0 12
38300: PUSH
38301: LD_VAR 0 7
38305: ARRAY
38306: PUSH
38307: LD_INT 2
38309: ARRAY
38310: PPUSH
38311: CALL_OW 546
38315: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38316: LD_VAR 0 8
38320: PUSH
38321: LD_INT 1
38323: ARRAY
38324: PUSH
38325: LD_VAR 0 8
38329: PUSH
38330: LD_INT 2
38332: ARRAY
38333: PUSH
38334: LD_VAR 0 13
38338: PUSH
38339: LD_INT 2
38341: PLUS
38342: GREATER
38343: OR
38344: PUSH
38345: LD_VAR 0 8
38349: PUSH
38350: LD_INT 2
38352: ARRAY
38353: PUSH
38354: LD_VAR 0 13
38358: PUSH
38359: LD_INT 2
38361: MINUS
38362: LESS
38363: OR
38364: PUSH
38365: LD_VAR 0 8
38369: PUSH
38370: LD_INT 3
38372: ARRAY
38373: PUSH
38374: LD_INT 0
38376: PUSH
38377: LD_INT 8
38379: PUSH
38380: LD_INT 9
38382: PUSH
38383: LD_INT 10
38385: PUSH
38386: LD_INT 11
38388: PUSH
38389: LD_INT 12
38391: PUSH
38392: LD_INT 13
38394: PUSH
38395: LD_INT 16
38397: PUSH
38398: LD_INT 17
38400: PUSH
38401: LD_INT 18
38403: PUSH
38404: LD_INT 19
38406: PUSH
38407: LD_INT 20
38409: PUSH
38410: LD_INT 21
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: IN
38428: NOT
38429: OR
38430: PUSH
38431: LD_VAR 0 8
38435: PUSH
38436: LD_INT 5
38438: ARRAY
38439: NOT
38440: OR
38441: PUSH
38442: LD_VAR 0 8
38446: PUSH
38447: LD_INT 6
38449: ARRAY
38450: PUSH
38451: LD_INT 1
38453: PUSH
38454: LD_INT 2
38456: PUSH
38457: LD_INT 7
38459: PUSH
38460: LD_INT 9
38462: PUSH
38463: LD_INT 10
38465: PUSH
38466: LD_INT 11
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: IN
38477: NOT
38478: OR
38479: IFFALSE 38485
// exit ;
38481: POP
38482: POP
38483: GO 38568
// end ;
38485: GO 38156
38487: POP
38488: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38489: LD_VAR 0 9
38493: PPUSH
38494: LD_VAR 0 3
38498: PPUSH
38499: LD_VAR 0 4
38503: PPUSH
38504: LD_INT 20
38506: PPUSH
38507: CALL 30513 0 4
38511: PUSH
38512: LD_INT 4
38514: ARRAY
38515: IFFALSE 38519
// exit ;
38517: GO 38568
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38519: LD_VAR 0 2
38523: PUSH
38524: LD_INT 29
38526: PUSH
38527: LD_INT 30
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: IN
38534: PUSH
38535: LD_VAR 0 3
38539: PPUSH
38540: LD_VAR 0 4
38544: PPUSH
38545: LD_VAR 0 9
38549: PPUSH
38550: CALL_OW 440
38554: NOT
38555: AND
38556: IFFALSE 38560
// exit ;
38558: GO 38568
// result := true ;
38560: LD_ADDR_VAR 0 6
38564: PUSH
38565: LD_INT 1
38567: ST_TO_ADDR
// end ;
38568: LD_VAR 0 6
38572: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38573: LD_INT 0
38575: PPUSH
38576: PPUSH
38577: PPUSH
38578: PPUSH
38579: PPUSH
38580: PPUSH
38581: PPUSH
38582: PPUSH
38583: PPUSH
38584: PPUSH
38585: PPUSH
38586: PPUSH
38587: PPUSH
38588: PPUSH
38589: PPUSH
38590: PPUSH
38591: PPUSH
38592: PPUSH
38593: PPUSH
38594: PPUSH
38595: PPUSH
38596: PPUSH
38597: PPUSH
38598: PPUSH
38599: PPUSH
38600: PPUSH
38601: PPUSH
38602: PPUSH
38603: PPUSH
38604: PPUSH
38605: PPUSH
38606: PPUSH
38607: PPUSH
38608: PPUSH
38609: PPUSH
38610: PPUSH
38611: PPUSH
38612: PPUSH
38613: PPUSH
38614: PPUSH
38615: PPUSH
38616: PPUSH
38617: PPUSH
38618: PPUSH
38619: PPUSH
38620: PPUSH
38621: PPUSH
38622: PPUSH
38623: PPUSH
38624: PPUSH
38625: PPUSH
38626: PPUSH
38627: PPUSH
38628: PPUSH
38629: PPUSH
38630: PPUSH
38631: PPUSH
38632: PPUSH
// result = [ ] ;
38633: LD_ADDR_VAR 0 7
38637: PUSH
38638: EMPTY
38639: ST_TO_ADDR
// temp_list = [ ] ;
38640: LD_ADDR_VAR 0 9
38644: PUSH
38645: EMPTY
38646: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38647: LD_VAR 0 4
38651: PUSH
38652: LD_INT 0
38654: PUSH
38655: LD_INT 1
38657: PUSH
38658: LD_INT 2
38660: PUSH
38661: LD_INT 3
38663: PUSH
38664: LD_INT 4
38666: PUSH
38667: LD_INT 5
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: IN
38678: NOT
38679: PUSH
38680: LD_VAR 0 1
38684: PUSH
38685: LD_INT 0
38687: PUSH
38688: LD_INT 1
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: IN
38695: PUSH
38696: LD_VAR 0 5
38700: PUSH
38701: LD_INT 1
38703: PUSH
38704: LD_INT 2
38706: PUSH
38707: LD_INT 3
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: LIST
38714: IN
38715: NOT
38716: AND
38717: OR
38718: IFFALSE 38722
// exit ;
38720: GO 57113
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38722: LD_VAR 0 1
38726: PUSH
38727: LD_INT 6
38729: PUSH
38730: LD_INT 7
38732: PUSH
38733: LD_INT 8
38735: PUSH
38736: LD_INT 13
38738: PUSH
38739: LD_INT 12
38741: PUSH
38742: LD_INT 15
38744: PUSH
38745: LD_INT 11
38747: PUSH
38748: LD_INT 14
38750: PUSH
38751: LD_INT 10
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: IN
38765: IFFALSE 38775
// btype = b_lab ;
38767: LD_ADDR_VAR 0 1
38771: PUSH
38772: LD_INT 6
38774: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38775: LD_VAR 0 6
38779: PUSH
38780: LD_INT 0
38782: PUSH
38783: LD_INT 1
38785: PUSH
38786: LD_INT 2
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: LIST
38793: IN
38794: NOT
38795: PUSH
38796: LD_VAR 0 1
38800: PUSH
38801: LD_INT 0
38803: PUSH
38804: LD_INT 1
38806: PUSH
38807: LD_INT 2
38809: PUSH
38810: LD_INT 3
38812: PUSH
38813: LD_INT 6
38815: PUSH
38816: LD_INT 36
38818: PUSH
38819: LD_INT 4
38821: PUSH
38822: LD_INT 5
38824: PUSH
38825: LD_INT 31
38827: PUSH
38828: LD_INT 32
38830: PUSH
38831: LD_INT 33
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: IN
38847: NOT
38848: PUSH
38849: LD_VAR 0 6
38853: PUSH
38854: LD_INT 1
38856: EQUAL
38857: AND
38858: OR
38859: PUSH
38860: LD_VAR 0 1
38864: PUSH
38865: LD_INT 2
38867: PUSH
38868: LD_INT 3
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: IN
38875: NOT
38876: PUSH
38877: LD_VAR 0 6
38881: PUSH
38882: LD_INT 2
38884: EQUAL
38885: AND
38886: OR
38887: IFFALSE 38897
// mode = 0 ;
38889: LD_ADDR_VAR 0 6
38893: PUSH
38894: LD_INT 0
38896: ST_TO_ADDR
// case mode of 0 :
38897: LD_VAR 0 6
38901: PUSH
38902: LD_INT 0
38904: DOUBLE
38905: EQUAL
38906: IFTRUE 38910
38908: GO 50363
38910: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38911: LD_ADDR_VAR 0 11
38915: PUSH
38916: LD_INT 0
38918: PUSH
38919: LD_INT 0
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 0
38928: PUSH
38929: LD_INT 1
38931: NEG
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 1
38939: PUSH
38940: LD_INT 0
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 1
38949: PUSH
38950: LD_INT 1
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 0
38959: PUSH
38960: LD_INT 1
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 1
38969: NEG
38970: PUSH
38971: LD_INT 0
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 1
38980: NEG
38981: PUSH
38982: LD_INT 1
38984: NEG
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 1
38992: NEG
38993: PUSH
38994: LD_INT 2
38996: NEG
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 0
39004: PUSH
39005: LD_INT 2
39007: NEG
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 1
39015: PUSH
39016: LD_INT 1
39018: NEG
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 1
39026: PUSH
39027: LD_INT 2
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 0
39036: PUSH
39037: LD_INT 2
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 1
39046: NEG
39047: PUSH
39048: LD_INT 1
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 1
39057: PUSH
39058: LD_INT 3
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 0
39067: PUSH
39068: LD_INT 3
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 1
39077: NEG
39078: PUSH
39079: LD_INT 2
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39104: LD_ADDR_VAR 0 12
39108: PUSH
39109: LD_INT 0
39111: PUSH
39112: LD_INT 0
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 0
39121: PUSH
39122: LD_INT 1
39124: NEG
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 1
39132: PUSH
39133: LD_INT 0
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 1
39142: PUSH
39143: LD_INT 1
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 0
39152: PUSH
39153: LD_INT 1
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 1
39162: NEG
39163: PUSH
39164: LD_INT 0
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 1
39173: NEG
39174: PUSH
39175: LD_INT 1
39177: NEG
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 1
39185: PUSH
39186: LD_INT 1
39188: NEG
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 2
39196: PUSH
39197: LD_INT 0
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 2
39206: PUSH
39207: LD_INT 1
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 1
39216: NEG
39217: PUSH
39218: LD_INT 1
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 2
39227: NEG
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 2
39238: NEG
39239: PUSH
39240: LD_INT 1
39242: NEG
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 2
39250: NEG
39251: PUSH
39252: LD_INT 1
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 3
39261: NEG
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 3
39272: NEG
39273: PUSH
39274: LD_INT 1
39276: NEG
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39300: LD_ADDR_VAR 0 13
39304: PUSH
39305: LD_INT 0
39307: PUSH
39308: LD_INT 0
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: LD_INT 1
39320: NEG
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 1
39328: PUSH
39329: LD_INT 0
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 1
39338: PUSH
39339: LD_INT 1
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 0
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 1
39358: NEG
39359: PUSH
39360: LD_INT 0
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 1
39369: NEG
39370: PUSH
39371: LD_INT 1
39373: NEG
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 1
39381: NEG
39382: PUSH
39383: LD_INT 2
39385: NEG
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 2
39393: PUSH
39394: LD_INT 1
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 2
39403: PUSH
39404: LD_INT 2
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 1
39413: PUSH
39414: LD_INT 2
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 2
39423: NEG
39424: PUSH
39425: LD_INT 1
39427: NEG
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 2
39435: NEG
39436: PUSH
39437: LD_INT 2
39439: NEG
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 2
39447: NEG
39448: PUSH
39449: LD_INT 3
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 3
39459: NEG
39460: PUSH
39461: LD_INT 2
39463: NEG
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 3
39471: NEG
39472: PUSH
39473: LD_INT 3
39475: NEG
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39499: LD_ADDR_VAR 0 14
39503: PUSH
39504: LD_INT 0
39506: PUSH
39507: LD_INT 0
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 0
39516: PUSH
39517: LD_INT 1
39519: NEG
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 1
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 1
39537: PUSH
39538: LD_INT 1
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 0
39547: PUSH
39548: LD_INT 1
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 1
39557: NEG
39558: PUSH
39559: LD_INT 0
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 1
39568: NEG
39569: PUSH
39570: LD_INT 1
39572: NEG
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 1
39580: NEG
39581: PUSH
39582: LD_INT 2
39584: NEG
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 0
39592: PUSH
39593: LD_INT 2
39595: NEG
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 1
39603: PUSH
39604: LD_INT 1
39606: NEG
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 1
39614: PUSH
39615: LD_INT 2
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 0
39624: PUSH
39625: LD_INT 2
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 1
39634: NEG
39635: PUSH
39636: LD_INT 1
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 1
39645: NEG
39646: PUSH
39647: LD_INT 3
39649: NEG
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 0
39657: PUSH
39658: LD_INT 3
39660: NEG
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 1
39668: PUSH
39669: LD_INT 2
39671: NEG
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39695: LD_ADDR_VAR 0 15
39699: PUSH
39700: LD_INT 0
39702: PUSH
39703: LD_INT 0
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 0
39712: PUSH
39713: LD_INT 1
39715: NEG
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 1
39723: PUSH
39724: LD_INT 0
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 1
39733: PUSH
39734: LD_INT 1
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 0
39743: PUSH
39744: LD_INT 1
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 1
39753: NEG
39754: PUSH
39755: LD_INT 0
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 1
39764: NEG
39765: PUSH
39766: LD_INT 1
39768: NEG
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 1
39776: PUSH
39777: LD_INT 1
39779: NEG
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 2
39787: PUSH
39788: LD_INT 0
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 2
39797: PUSH
39798: LD_INT 1
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 1
39807: NEG
39808: PUSH
39809: LD_INT 1
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 2
39818: NEG
39819: PUSH
39820: LD_INT 0
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 2
39829: NEG
39830: PUSH
39831: LD_INT 1
39833: NEG
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 2
39841: PUSH
39842: LD_INT 1
39844: NEG
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 3
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 3
39862: PUSH
39863: LD_INT 1
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39888: LD_ADDR_VAR 0 16
39892: PUSH
39893: LD_INT 0
39895: PUSH
39896: LD_INT 0
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 0
39905: PUSH
39906: LD_INT 1
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 1
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 1
39926: PUSH
39927: LD_INT 1
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 0
39936: PUSH
39937: LD_INT 1
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 1
39946: NEG
39947: PUSH
39948: LD_INT 0
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 1
39957: NEG
39958: PUSH
39959: LD_INT 1
39961: NEG
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 1
39969: NEG
39970: PUSH
39971: LD_INT 2
39973: NEG
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 2
39981: PUSH
39982: LD_INT 1
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 2
39991: PUSH
39992: LD_INT 2
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 1
40001: PUSH
40002: LD_INT 2
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 2
40011: NEG
40012: PUSH
40013: LD_INT 1
40015: NEG
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 2
40023: NEG
40024: PUSH
40025: LD_INT 2
40027: NEG
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 3
40035: PUSH
40036: LD_INT 2
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 3
40045: PUSH
40046: LD_INT 3
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 2
40055: PUSH
40056: LD_INT 3
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40081: LD_ADDR_VAR 0 17
40085: PUSH
40086: LD_INT 0
40088: PUSH
40089: LD_INT 0
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 0
40098: PUSH
40099: LD_INT 1
40101: NEG
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 1
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 1
40119: PUSH
40120: LD_INT 1
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 0
40129: PUSH
40130: LD_INT 1
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 1
40139: NEG
40140: PUSH
40141: LD_INT 0
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 1
40150: NEG
40151: PUSH
40152: LD_INT 1
40154: NEG
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 1
40162: NEG
40163: PUSH
40164: LD_INT 2
40166: NEG
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 0
40174: PUSH
40175: LD_INT 2
40177: NEG
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 1
40185: PUSH
40186: LD_INT 1
40188: NEG
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 2
40196: PUSH
40197: LD_INT 0
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 2
40206: PUSH
40207: LD_INT 1
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 2
40216: PUSH
40217: LD_INT 2
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 1
40226: PUSH
40227: LD_INT 2
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: LD_INT 2
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 1
40246: NEG
40247: PUSH
40248: LD_INT 1
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 2
40257: NEG
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 2
40268: NEG
40269: PUSH
40270: LD_INT 1
40272: NEG
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 2
40280: NEG
40281: PUSH
40282: LD_INT 2
40284: NEG
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40311: LD_ADDR_VAR 0 18
40315: PUSH
40316: LD_INT 0
40318: PUSH
40319: LD_INT 0
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 0
40328: PUSH
40329: LD_INT 1
40331: NEG
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 1
40339: PUSH
40340: LD_INT 0
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 1
40349: PUSH
40350: LD_INT 1
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 0
40359: PUSH
40360: LD_INT 1
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 1
40369: NEG
40370: PUSH
40371: LD_INT 0
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 1
40380: NEG
40381: PUSH
40382: LD_INT 1
40384: NEG
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 1
40392: NEG
40393: PUSH
40394: LD_INT 2
40396: NEG
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 0
40404: PUSH
40405: LD_INT 2
40407: NEG
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: LD_INT 1
40418: NEG
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 2
40426: PUSH
40427: LD_INT 0
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 2
40436: PUSH
40437: LD_INT 1
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 2
40446: PUSH
40447: LD_INT 2
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 1
40456: PUSH
40457: LD_INT 2
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 0
40466: PUSH
40467: LD_INT 2
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 1
40476: NEG
40477: PUSH
40478: LD_INT 1
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 2
40487: NEG
40488: PUSH
40489: LD_INT 0
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 2
40498: NEG
40499: PUSH
40500: LD_INT 1
40502: NEG
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 2
40510: NEG
40511: PUSH
40512: LD_INT 2
40514: NEG
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40541: LD_ADDR_VAR 0 19
40545: PUSH
40546: LD_INT 0
40548: PUSH
40549: LD_INT 0
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 0
40558: PUSH
40559: LD_INT 1
40561: NEG
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 1
40569: PUSH
40570: LD_INT 0
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 1
40579: PUSH
40580: LD_INT 1
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 0
40589: PUSH
40590: LD_INT 1
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 1
40599: NEG
40600: PUSH
40601: LD_INT 0
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 1
40610: NEG
40611: PUSH
40612: LD_INT 1
40614: NEG
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 1
40622: NEG
40623: PUSH
40624: LD_INT 2
40626: NEG
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: LD_INT 2
40637: NEG
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 1
40645: PUSH
40646: LD_INT 1
40648: NEG
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 2
40656: PUSH
40657: LD_INT 0
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 2
40666: PUSH
40667: LD_INT 1
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 2
40676: PUSH
40677: LD_INT 2
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 1
40686: PUSH
40687: LD_INT 2
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: LD_INT 2
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 1
40706: NEG
40707: PUSH
40708: LD_INT 1
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 2
40717: NEG
40718: PUSH
40719: LD_INT 0
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 2
40728: NEG
40729: PUSH
40730: LD_INT 1
40732: NEG
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 2
40740: NEG
40741: PUSH
40742: LD_INT 2
40744: NEG
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40771: LD_ADDR_VAR 0 20
40775: PUSH
40776: LD_INT 0
40778: PUSH
40779: LD_INT 0
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 0
40788: PUSH
40789: LD_INT 1
40791: NEG
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 1
40799: PUSH
40800: LD_INT 0
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 1
40809: PUSH
40810: LD_INT 1
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 0
40819: PUSH
40820: LD_INT 1
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 1
40829: NEG
40830: PUSH
40831: LD_INT 0
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 1
40840: NEG
40841: PUSH
40842: LD_INT 1
40844: NEG
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 1
40852: NEG
40853: PUSH
40854: LD_INT 2
40856: NEG
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 0
40864: PUSH
40865: LD_INT 2
40867: NEG
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 1
40875: PUSH
40876: LD_INT 1
40878: NEG
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 2
40886: PUSH
40887: LD_INT 0
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 2
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 2
40906: PUSH
40907: LD_INT 2
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 1
40916: PUSH
40917: LD_INT 2
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: LD_INT 2
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 1
40936: NEG
40937: PUSH
40938: LD_INT 1
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 2
40947: NEG
40948: PUSH
40949: LD_INT 0
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 2
40958: NEG
40959: PUSH
40960: LD_INT 1
40962: NEG
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 2
40970: NEG
40971: PUSH
40972: LD_INT 2
40974: NEG
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41001: LD_ADDR_VAR 0 21
41005: PUSH
41006: LD_INT 0
41008: PUSH
41009: LD_INT 0
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 0
41018: PUSH
41019: LD_INT 1
41021: NEG
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: LD_INT 0
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 1
41039: PUSH
41040: LD_INT 1
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 0
41049: PUSH
41050: LD_INT 1
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 1
41059: NEG
41060: PUSH
41061: LD_INT 0
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 1
41070: NEG
41071: PUSH
41072: LD_INT 1
41074: NEG
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 1
41082: NEG
41083: PUSH
41084: LD_INT 2
41086: NEG
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: LD_INT 2
41097: NEG
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 1
41105: PUSH
41106: LD_INT 1
41108: NEG
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 2
41116: PUSH
41117: LD_INT 0
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 2
41126: PUSH
41127: LD_INT 1
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 2
41136: PUSH
41137: LD_INT 2
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 1
41146: PUSH
41147: LD_INT 2
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: LD_INT 2
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 1
41166: NEG
41167: PUSH
41168: LD_INT 1
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 2
41177: NEG
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 2
41188: NEG
41189: PUSH
41190: LD_INT 1
41192: NEG
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 2
41200: NEG
41201: PUSH
41202: LD_INT 2
41204: NEG
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41231: LD_ADDR_VAR 0 22
41235: PUSH
41236: LD_INT 0
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 0
41248: PUSH
41249: LD_INT 1
41251: NEG
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: LD_INT 0
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 1
41269: PUSH
41270: LD_INT 1
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 0
41279: PUSH
41280: LD_INT 1
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 1
41289: NEG
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 1
41300: NEG
41301: PUSH
41302: LD_INT 1
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 1
41312: NEG
41313: PUSH
41314: LD_INT 2
41316: NEG
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 0
41324: PUSH
41325: LD_INT 2
41327: NEG
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 1
41335: PUSH
41336: LD_INT 1
41338: NEG
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 2
41346: PUSH
41347: LD_INT 0
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 2
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 2
41366: PUSH
41367: LD_INT 2
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 1
41376: PUSH
41377: LD_INT 2
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 0
41386: PUSH
41387: LD_INT 2
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 2
41407: NEG
41408: PUSH
41409: LD_INT 0
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 2
41418: NEG
41419: PUSH
41420: LD_INT 1
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 2
41430: NEG
41431: PUSH
41432: LD_INT 2
41434: NEG
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41461: LD_ADDR_VAR 0 23
41465: PUSH
41466: LD_INT 0
41468: PUSH
41469: LD_INT 0
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 0
41478: PUSH
41479: LD_INT 1
41481: NEG
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: LD_INT 1
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 0
41509: PUSH
41510: LD_INT 1
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 1
41519: NEG
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 1
41530: NEG
41531: PUSH
41532: LD_INT 1
41534: NEG
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 1
41542: NEG
41543: PUSH
41544: LD_INT 2
41546: NEG
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: LD_INT 2
41557: NEG
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 1
41565: PUSH
41566: LD_INT 1
41568: NEG
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 2
41576: PUSH
41577: LD_INT 0
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 2
41586: PUSH
41587: LD_INT 1
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 2
41596: PUSH
41597: LD_INT 2
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: PUSH
41607: LD_INT 2
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 0
41616: PUSH
41617: LD_INT 2
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 1
41626: NEG
41627: PUSH
41628: LD_INT 1
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 2
41637: NEG
41638: PUSH
41639: LD_INT 0
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 2
41648: NEG
41649: PUSH
41650: LD_INT 1
41652: NEG
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 2
41660: NEG
41661: PUSH
41662: LD_INT 2
41664: NEG
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 2
41672: NEG
41673: PUSH
41674: LD_INT 3
41676: NEG
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 1
41684: NEG
41685: PUSH
41686: LD_INT 3
41688: NEG
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: LD_INT 2
41699: NEG
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 2
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41741: LD_ADDR_VAR 0 24
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: LD_INT 0
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 0
41758: PUSH
41759: LD_INT 1
41761: NEG
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 1
41769: PUSH
41770: LD_INT 0
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 1
41779: PUSH
41780: LD_INT 1
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 0
41789: PUSH
41790: LD_INT 1
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 1
41799: NEG
41800: PUSH
41801: LD_INT 0
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 1
41810: NEG
41811: PUSH
41812: LD_INT 1
41814: NEG
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 1
41822: NEG
41823: PUSH
41824: LD_INT 2
41826: NEG
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 0
41834: PUSH
41835: LD_INT 2
41837: NEG
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 1
41845: PUSH
41846: LD_INT 1
41848: NEG
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 2
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 2
41866: PUSH
41867: LD_INT 1
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 2
41876: PUSH
41877: LD_INT 2
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 1
41886: PUSH
41887: LD_INT 2
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 0
41896: PUSH
41897: LD_INT 2
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 1
41906: NEG
41907: PUSH
41908: LD_INT 1
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 2
41917: NEG
41918: PUSH
41919: LD_INT 0
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 2
41928: NEG
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 2
41940: NEG
41941: PUSH
41942: LD_INT 2
41944: NEG
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 1
41952: PUSH
41953: LD_INT 2
41955: NEG
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 2
41963: PUSH
41964: LD_INT 1
41966: NEG
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 3
41974: PUSH
41975: LD_INT 1
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 3
41984: PUSH
41985: LD_INT 2
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42017: LD_ADDR_VAR 0 25
42021: PUSH
42022: LD_INT 0
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: LD_INT 1
42037: NEG
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 1
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: LD_INT 1
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 0
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 1
42086: NEG
42087: PUSH
42088: LD_INT 1
42090: NEG
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 1
42098: NEG
42099: PUSH
42100: LD_INT 2
42102: NEG
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: LD_INT 2
42113: NEG
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 1
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 2
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 2
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 2
42152: PUSH
42153: LD_INT 2
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: LD_INT 2
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: LD_INT 2
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 1
42182: NEG
42183: PUSH
42184: LD_INT 1
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 2
42193: NEG
42194: PUSH
42195: LD_INT 0
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 2
42204: NEG
42205: PUSH
42206: LD_INT 1
42208: NEG
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 2
42216: NEG
42217: PUSH
42218: LD_INT 2
42220: NEG
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 3
42228: PUSH
42229: LD_INT 1
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 3
42238: PUSH
42239: LD_INT 2
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 2
42248: PUSH
42249: LD_INT 3
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 1
42258: PUSH
42259: LD_INT 3
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42291: LD_ADDR_VAR 0 26
42295: PUSH
42296: LD_INT 0
42298: PUSH
42299: LD_INT 0
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: LD_INT 1
42311: NEG
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 1
42319: PUSH
42320: LD_INT 0
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 1
42329: PUSH
42330: LD_INT 1
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 0
42339: PUSH
42340: LD_INT 1
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 1
42349: NEG
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 1
42360: NEG
42361: PUSH
42362: LD_INT 1
42364: NEG
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 1
42372: NEG
42373: PUSH
42374: LD_INT 2
42376: NEG
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 0
42384: PUSH
42385: LD_INT 2
42387: NEG
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 1
42395: PUSH
42396: LD_INT 1
42398: NEG
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 2
42406: PUSH
42407: LD_INT 0
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 2
42416: PUSH
42417: LD_INT 1
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 2
42426: PUSH
42427: LD_INT 2
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 1
42436: PUSH
42437: LD_INT 2
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: LD_INT 2
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 1
42456: NEG
42457: PUSH
42458: LD_INT 1
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 2
42467: NEG
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 2
42478: NEG
42479: PUSH
42480: LD_INT 1
42482: NEG
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 2
42490: NEG
42491: PUSH
42492: LD_INT 2
42494: NEG
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 2
42502: PUSH
42503: LD_INT 3
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 1
42512: PUSH
42513: LD_INT 3
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 1
42522: NEG
42523: PUSH
42524: LD_INT 2
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 2
42533: NEG
42534: PUSH
42535: LD_INT 1
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42567: LD_ADDR_VAR 0 27
42571: PUSH
42572: LD_INT 0
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 0
42584: PUSH
42585: LD_INT 1
42587: NEG
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 1
42595: PUSH
42596: LD_INT 0
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: LD_INT 1
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: LD_INT 1
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 1
42625: NEG
42626: PUSH
42627: LD_INT 0
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: NEG
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 1
42648: NEG
42649: PUSH
42650: LD_INT 2
42652: NEG
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 0
42660: PUSH
42661: LD_INT 2
42663: NEG
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 1
42671: PUSH
42672: LD_INT 1
42674: NEG
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 2
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 2
42692: PUSH
42693: LD_INT 1
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 2
42702: PUSH
42703: LD_INT 2
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 1
42712: PUSH
42713: LD_INT 2
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: LD_INT 2
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: LD_INT 1
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 2
42743: NEG
42744: PUSH
42745: LD_INT 0
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 2
42754: NEG
42755: PUSH
42756: LD_INT 1
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 2
42766: NEG
42767: PUSH
42768: LD_INT 2
42770: NEG
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 1
42778: NEG
42779: PUSH
42780: LD_INT 2
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 2
42789: NEG
42790: PUSH
42791: LD_INT 1
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 3
42800: NEG
42801: PUSH
42802: LD_INT 1
42804: NEG
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 3
42812: NEG
42813: PUSH
42814: LD_INT 2
42816: NEG
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42847: LD_ADDR_VAR 0 28
42851: PUSH
42852: LD_INT 0
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 0
42864: PUSH
42865: LD_INT 1
42867: NEG
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 1
42875: PUSH
42876: LD_INT 0
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 1
42885: PUSH
42886: LD_INT 1
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 0
42895: PUSH
42896: LD_INT 1
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 1
42905: NEG
42906: PUSH
42907: LD_INT 0
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 1
42916: NEG
42917: PUSH
42918: LD_INT 1
42920: NEG
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 1
42928: NEG
42929: PUSH
42930: LD_INT 2
42932: NEG
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 0
42940: PUSH
42941: LD_INT 2
42943: NEG
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 1
42951: PUSH
42952: LD_INT 1
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 2
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 2
42972: PUSH
42973: LD_INT 1
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 2
42982: PUSH
42983: LD_INT 2
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: PUSH
42993: LD_INT 2
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: LD_INT 2
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 1
43012: NEG
43013: PUSH
43014: LD_INT 1
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 2
43023: NEG
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 2
43034: NEG
43035: PUSH
43036: LD_INT 1
43038: NEG
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 2
43046: NEG
43047: PUSH
43048: LD_INT 2
43050: NEG
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 2
43058: NEG
43059: PUSH
43060: LD_INT 3
43062: NEG
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 1
43070: NEG
43071: PUSH
43072: LD_INT 3
43074: NEG
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 3
43082: NEG
43083: PUSH
43084: LD_INT 1
43086: NEG
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 3
43094: NEG
43095: PUSH
43096: LD_INT 2
43098: NEG
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43129: LD_ADDR_VAR 0 29
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: LD_INT 0
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 0
43146: PUSH
43147: LD_INT 1
43149: NEG
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 1
43157: PUSH
43158: LD_INT 0
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 1
43167: PUSH
43168: LD_INT 1
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 0
43177: PUSH
43178: LD_INT 1
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: NEG
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 1
43198: NEG
43199: PUSH
43200: LD_INT 1
43202: NEG
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 1
43210: NEG
43211: PUSH
43212: LD_INT 2
43214: NEG
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: LD_INT 2
43225: NEG
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 1
43233: PUSH
43234: LD_INT 1
43236: NEG
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 2
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 2
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 1
43264: PUSH
43265: LD_INT 2
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 0
43274: PUSH
43275: LD_INT 2
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 1
43284: NEG
43285: PUSH
43286: LD_INT 1
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 2
43295: NEG
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 2
43307: NEG
43308: PUSH
43309: LD_INT 2
43311: NEG
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 2
43319: NEG
43320: PUSH
43321: LD_INT 3
43323: NEG
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 2
43331: PUSH
43332: LD_INT 1
43334: NEG
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 3
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 1
43352: PUSH
43353: LD_INT 3
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 1
43362: NEG
43363: PUSH
43364: LD_INT 2
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 3
43373: NEG
43374: PUSH
43375: LD_INT 2
43377: NEG
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43408: LD_ADDR_VAR 0 30
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: LD_INT 0
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: LD_INT 1
43428: NEG
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 1
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 0
43456: PUSH
43457: LD_INT 1
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 1
43466: NEG
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 1
43477: NEG
43478: PUSH
43479: LD_INT 1
43481: NEG
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 1
43489: NEG
43490: PUSH
43491: LD_INT 2
43493: NEG
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 0
43501: PUSH
43502: LD_INT 2
43504: NEG
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 1
43512: PUSH
43513: LD_INT 1
43515: NEG
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 2
43523: PUSH
43524: LD_INT 0
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 2
43533: PUSH
43534: LD_INT 1
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 2
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 1
43553: PUSH
43554: LD_INT 2
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 1
43563: NEG
43564: PUSH
43565: LD_INT 1
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 2
43574: NEG
43575: PUSH
43576: LD_INT 0
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 2
43585: NEG
43586: PUSH
43587: LD_INT 1
43589: NEG
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 1
43597: NEG
43598: PUSH
43599: LD_INT 3
43601: NEG
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 1
43609: PUSH
43610: LD_INT 2
43612: NEG
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 3
43620: PUSH
43621: LD_INT 2
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 2
43630: PUSH
43631: LD_INT 3
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 2
43640: NEG
43641: PUSH
43642: LD_INT 1
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 3
43651: NEG
43652: PUSH
43653: LD_INT 1
43655: NEG
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43686: LD_ADDR_VAR 0 31
43690: PUSH
43691: LD_INT 0
43693: PUSH
43694: LD_INT 0
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: LD_INT 1
43706: NEG
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 1
43714: PUSH
43715: LD_INT 0
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 1
43724: PUSH
43725: LD_INT 1
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 0
43734: PUSH
43735: LD_INT 1
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 1
43744: NEG
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 1
43755: NEG
43756: PUSH
43757: LD_INT 1
43759: NEG
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: LD_INT 2
43771: NEG
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: LD_INT 1
43782: NEG
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 2
43790: PUSH
43791: LD_INT 0
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 2
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 2
43810: PUSH
43811: LD_INT 2
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 1
43820: PUSH
43821: LD_INT 2
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: LD_INT 2
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 1
43840: NEG
43841: PUSH
43842: LD_INT 1
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 2
43851: NEG
43852: PUSH
43853: LD_INT 1
43855: NEG
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 2
43863: NEG
43864: PUSH
43865: LD_INT 2
43867: NEG
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 2
43875: NEG
43876: PUSH
43877: LD_INT 3
43879: NEG
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 2
43887: PUSH
43888: LD_INT 1
43890: NEG
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 3
43898: PUSH
43899: LD_INT 1
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 1
43908: PUSH
43909: LD_INT 3
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: LD_INT 2
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 3
43929: NEG
43930: PUSH
43931: LD_INT 2
43933: NEG
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43964: LD_ADDR_VAR 0 32
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 0
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: NEG
44023: PUSH
44024: LD_INT 0
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: NEG
44034: PUSH
44035: LD_INT 1
44037: NEG
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 1
44045: NEG
44046: PUSH
44047: LD_INT 2
44049: NEG
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 0
44057: PUSH
44058: LD_INT 2
44060: NEG
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 2
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 2
44089: PUSH
44090: LD_INT 2
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: PUSH
44100: LD_INT 2
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 0
44109: PUSH
44110: LD_INT 2
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 1
44119: NEG
44120: PUSH
44121: LD_INT 1
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 2
44130: NEG
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 2
44141: NEG
44142: PUSH
44143: LD_INT 1
44145: NEG
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: LD_INT 3
44157: NEG
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 1
44165: PUSH
44166: LD_INT 2
44168: NEG
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 3
44176: PUSH
44177: LD_INT 2
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 2
44186: PUSH
44187: LD_INT 3
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 2
44196: NEG
44197: PUSH
44198: LD_INT 1
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 3
44207: NEG
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44242: LD_ADDR_VAR 0 33
44246: PUSH
44247: LD_INT 0
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: LD_INT 1
44262: NEG
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 1
44270: PUSH
44271: LD_INT 0
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 1
44280: PUSH
44281: LD_INT 1
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 0
44290: PUSH
44291: LD_INT 1
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 1
44300: NEG
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: LD_INT 1
44315: NEG
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 1
44323: NEG
44324: PUSH
44325: LD_INT 2
44327: NEG
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 1
44335: PUSH
44336: LD_INT 1
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 2
44346: PUSH
44347: LD_INT 0
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 2
44356: PUSH
44357: LD_INT 1
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: LD_INT 2
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 0
44376: PUSH
44377: LD_INT 2
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 1
44386: NEG
44387: PUSH
44388: LD_INT 1
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 2
44397: NEG
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 2
44408: NEG
44409: PUSH
44410: LD_INT 1
44412: NEG
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 2
44420: NEG
44421: PUSH
44422: LD_INT 2
44424: NEG
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 2
44432: NEG
44433: PUSH
44434: LD_INT 3
44436: NEG
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 2
44444: PUSH
44445: LD_INT 1
44447: NEG
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 3
44455: PUSH
44456: LD_INT 1
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: LD_INT 3
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: LD_INT 2
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 3
44486: NEG
44487: PUSH
44488: LD_INT 2
44490: NEG
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44521: LD_ADDR_VAR 0 34
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 0
44538: PUSH
44539: LD_INT 1
44541: NEG
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 1
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 1
44559: PUSH
44560: LD_INT 1
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 0
44569: PUSH
44570: LD_INT 1
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 1
44579: NEG
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: LD_INT 1
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 1
44602: NEG
44603: PUSH
44604: LD_INT 2
44606: NEG
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: LD_INT 2
44617: NEG
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: LD_INT 1
44628: NEG
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 2
44636: PUSH
44637: LD_INT 1
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 2
44646: PUSH
44647: LD_INT 2
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 1
44656: PUSH
44657: LD_INT 2
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 2
44677: NEG
44678: PUSH
44679: LD_INT 0
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 2
44688: NEG
44689: PUSH
44690: LD_INT 1
44692: NEG
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 2
44700: NEG
44701: PUSH
44702: LD_INT 2
44704: NEG
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 1
44712: NEG
44713: PUSH
44714: LD_INT 3
44716: NEG
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: LD_INT 2
44727: NEG
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 3
44735: PUSH
44736: LD_INT 2
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 2
44745: PUSH
44746: LD_INT 3
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 2
44755: NEG
44756: PUSH
44757: LD_INT 1
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 3
44766: NEG
44767: PUSH
44768: LD_INT 1
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44801: LD_ADDR_VAR 0 35
44805: PUSH
44806: LD_INT 0
44808: PUSH
44809: LD_INT 0
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 0
44818: PUSH
44819: LD_INT 1
44821: NEG
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 1
44829: PUSH
44830: LD_INT 0
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 1
44839: PUSH
44840: LD_INT 1
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 0
44849: PUSH
44850: LD_INT 1
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: LD_INT 0
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 1
44870: NEG
44871: PUSH
44872: LD_INT 1
44874: NEG
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 2
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 2
44892: NEG
44893: PUSH
44894: LD_INT 1
44896: NEG
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44913: LD_ADDR_VAR 0 36
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 0
44930: PUSH
44931: LD_INT 1
44933: NEG
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: LD_INT 0
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: LD_INT 1
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: LD_INT 0
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 1
44982: NEG
44983: PUSH
44984: LD_INT 1
44986: NEG
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: LD_INT 2
44998: NEG
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 1
45006: PUSH
45007: LD_INT 2
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45025: LD_ADDR_VAR 0 37
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: LD_INT 1
45045: NEG
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 1
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 1
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 0
45073: PUSH
45074: LD_INT 1
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 1
45083: NEG
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 1
45094: NEG
45095: PUSH
45096: LD_INT 1
45098: NEG
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 1
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 1
45117: NEG
45118: PUSH
45119: LD_INT 1
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45137: LD_ADDR_VAR 0 38
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 1
45195: NEG
45196: PUSH
45197: LD_INT 0
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 1
45206: NEG
45207: PUSH
45208: LD_INT 1
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 2
45218: PUSH
45219: LD_INT 1
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 2
45228: NEG
45229: PUSH
45230: LD_INT 1
45232: NEG
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45249: LD_ADDR_VAR 0 39
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 1
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: LD_INT 1
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 1
45307: NEG
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 1
45330: NEG
45331: PUSH
45332: LD_INT 2
45334: NEG
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 1
45342: PUSH
45343: LD_INT 2
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45361: LD_ADDR_VAR 0 40
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: LD_INT 0
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: LD_INT 1
45381: NEG
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 1
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: LD_INT 0
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 1
45430: NEG
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 1
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45473: LD_ADDR_VAR 0 41
45477: PUSH
45478: LD_INT 0
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 0
45490: PUSH
45491: LD_INT 1
45493: NEG
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 1
45501: PUSH
45502: LD_INT 0
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 1
45511: PUSH
45512: LD_INT 1
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 0
45521: PUSH
45522: LD_INT 1
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: NEG
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: LD_INT 1
45546: NEG
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 1
45554: NEG
45555: PUSH
45556: LD_INT 2
45558: NEG
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: LD_INT 1
45569: NEG
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 2
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 2
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 2
45597: PUSH
45598: LD_INT 2
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: LD_INT 2
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 2
45628: NEG
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 2
45639: NEG
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 2
45651: NEG
45652: PUSH
45653: LD_INT 2
45655: NEG
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 2
45663: NEG
45664: PUSH
45665: LD_INT 3
45667: NEG
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 2
45675: PUSH
45676: LD_INT 1
45678: NEG
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 3
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 3
45696: PUSH
45697: LD_INT 1
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 3
45706: PUSH
45707: LD_INT 2
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 3
45716: PUSH
45717: LD_INT 3
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 2
45726: PUSH
45727: LD_INT 3
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 2
45736: NEG
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 3
45747: NEG
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 3
45758: NEG
45759: PUSH
45760: LD_INT 1
45762: NEG
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 3
45770: NEG
45771: PUSH
45772: LD_INT 2
45774: NEG
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 3
45782: NEG
45783: PUSH
45784: LD_INT 3
45786: NEG
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45823: LD_ADDR_VAR 0 42
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 0
45840: PUSH
45841: LD_INT 1
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: LD_INT 0
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 0
45871: PUSH
45872: LD_INT 1
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: NEG
45882: PUSH
45883: LD_INT 0
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 1
45892: NEG
45893: PUSH
45894: LD_INT 1
45896: NEG
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 1
45904: NEG
45905: PUSH
45906: LD_INT 2
45908: NEG
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: LD_INT 2
45919: NEG
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 1
45927: PUSH
45928: LD_INT 1
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 2
45938: PUSH
45939: LD_INT 1
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 2
45948: PUSH
45949: LD_INT 2
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 1
45958: PUSH
45959: LD_INT 2
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 0
45968: PUSH
45969: LD_INT 2
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: PUSH
45980: LD_INT 1
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 2
45989: NEG
45990: PUSH
45991: LD_INT 1
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 2
46001: NEG
46002: PUSH
46003: LD_INT 2
46005: NEG
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 2
46013: NEG
46014: PUSH
46015: LD_INT 3
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: LD_INT 3
46029: NEG
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: LD_INT 3
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: LD_INT 2
46051: NEG
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 3
46059: PUSH
46060: LD_INT 2
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 3
46069: PUSH
46070: LD_INT 3
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 2
46079: PUSH
46080: LD_INT 3
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 1
46089: PUSH
46090: LD_INT 3
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 0
46099: PUSH
46100: LD_INT 3
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: NEG
46110: PUSH
46111: LD_INT 2
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 3
46120: NEG
46121: PUSH
46122: LD_INT 2
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 3
46132: NEG
46133: PUSH
46134: LD_INT 3
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46173: LD_ADDR_VAR 0 43
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: LD_INT 1
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 1
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: LD_INT 1
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: LD_INT 0
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: LD_INT 2
46258: NEG
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: LD_INT 2
46269: NEG
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 1
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 2
46288: PUSH
46289: LD_INT 0
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 2
46298: PUSH
46299: LD_INT 1
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: PUSH
46309: LD_INT 2
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 0
46318: PUSH
46319: LD_INT 2
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 1
46328: NEG
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 2
46339: NEG
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 2
46350: NEG
46351: PUSH
46352: LD_INT 1
46354: NEG
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: LD_INT 3
46366: NEG
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: LD_INT 3
46377: NEG
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 1
46385: PUSH
46386: LD_INT 2
46388: NEG
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 2
46396: PUSH
46397: LD_INT 1
46399: NEG
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 3
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 3
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: LD_INT 3
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: LD_INT 3
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: NEG
46448: PUSH
46449: LD_INT 2
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 2
46458: NEG
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 3
46469: NEG
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 3
46480: NEG
46481: PUSH
46482: LD_INT 1
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46521: LD_ADDR_VAR 0 44
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: LD_INT 1
46541: NEG
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 1
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: LD_INT 1
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 0
46569: PUSH
46570: LD_INT 1
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: NEG
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: NEG
46591: PUSH
46592: LD_INT 1
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 1
46602: NEG
46603: PUSH
46604: LD_INT 2
46606: NEG
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: LD_INT 1
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 2
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 2
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 2
46645: PUSH
46646: LD_INT 2
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 1
46655: PUSH
46656: LD_INT 2
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 1
46665: NEG
46666: PUSH
46667: LD_INT 1
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 2
46676: NEG
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 2
46687: NEG
46688: PUSH
46689: LD_INT 1
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 2
46699: NEG
46700: PUSH
46701: LD_INT 2
46703: NEG
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 2
46711: NEG
46712: PUSH
46713: LD_INT 3
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 2
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 3
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 3
46744: PUSH
46745: LD_INT 1
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 3
46754: PUSH
46755: LD_INT 2
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 3
46764: PUSH
46765: LD_INT 3
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 2
46774: PUSH
46775: LD_INT 3
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 2
46784: NEG
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 3
46795: NEG
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 3
46806: NEG
46807: PUSH
46808: LD_INT 1
46810: NEG
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 3
46818: NEG
46819: PUSH
46820: LD_INT 2
46822: NEG
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 3
46830: NEG
46831: PUSH
46832: LD_INT 3
46834: NEG
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46871: LD_ADDR_VAR 0 45
46875: PUSH
46876: LD_INT 0
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 1
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 1
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: LD_INT 1
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 1
46929: NEG
46930: PUSH
46931: LD_INT 0
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: LD_INT 1
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 1
46952: NEG
46953: PUSH
46954: LD_INT 2
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: LD_INT 2
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 1
46975: PUSH
46976: LD_INT 1
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 2
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 2
46996: PUSH
46997: LD_INT 2
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 1
47006: PUSH
47007: LD_INT 2
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: LD_INT 2
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 1
47026: NEG
47027: PUSH
47028: LD_INT 1
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 2
47037: NEG
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 2
47049: NEG
47050: PUSH
47051: LD_INT 2
47053: NEG
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 2
47061: NEG
47062: PUSH
47063: LD_INT 3
47065: NEG
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: LD_INT 3
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: LD_INT 3
47088: NEG
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 1
47096: PUSH
47097: LD_INT 2
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 3
47107: PUSH
47108: LD_INT 2
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 3
47117: PUSH
47118: LD_INT 3
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 2
47127: PUSH
47128: LD_INT 3
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 1
47137: PUSH
47138: LD_INT 3
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: LD_INT 3
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 1
47157: NEG
47158: PUSH
47159: LD_INT 2
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 3
47168: NEG
47169: PUSH
47170: LD_INT 2
47172: NEG
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 3
47180: NEG
47181: PUSH
47182: LD_INT 3
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47221: LD_ADDR_VAR 0 46
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: LD_INT 1
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: LD_INT 0
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: PUSH
47260: LD_INT 1
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 0
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 1
47279: NEG
47280: PUSH
47281: LD_INT 0
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: LD_INT 1
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 1
47302: NEG
47303: PUSH
47304: LD_INT 2
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: LD_INT 2
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 1
47328: NEG
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 2
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 2
47346: PUSH
47347: LD_INT 1
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: PUSH
47357: LD_INT 2
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: LD_INT 2
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: NEG
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 2
47387: NEG
47388: PUSH
47389: LD_INT 0
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 2
47398: NEG
47399: PUSH
47400: LD_INT 1
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 1
47410: NEG
47411: PUSH
47412: LD_INT 3
47414: NEG
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: LD_INT 3
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: PUSH
47434: LD_INT 2
47436: NEG
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 2
47444: PUSH
47445: LD_INT 1
47447: NEG
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 3
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 3
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 1
47475: PUSH
47476: LD_INT 3
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 0
47485: PUSH
47486: LD_INT 3
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: LD_INT 2
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 2
47506: NEG
47507: PUSH
47508: LD_INT 1
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 3
47517: NEG
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 3
47528: NEG
47529: PUSH
47530: LD_INT 1
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47569: LD_ADDR_VAR 0 47
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: LD_INT 1
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: LD_INT 0
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: NEG
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: LD_INT 2
47654: NEG
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: LD_INT 2
47665: NEG
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: LD_INT 1
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 2
47684: NEG
47685: PUSH
47686: LD_INT 1
47688: NEG
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 2
47696: NEG
47697: PUSH
47698: LD_INT 2
47700: NEG
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47720: LD_ADDR_VAR 0 48
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: LD_INT 0
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 0
47737: PUSH
47738: LD_INT 1
47740: NEG
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 1
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 1
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 0
47768: PUSH
47769: LD_INT 1
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 1
47778: NEG
47779: PUSH
47780: LD_INT 0
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 1
47789: NEG
47790: PUSH
47791: LD_INT 1
47793: NEG
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 1
47801: NEG
47802: PUSH
47803: LD_INT 2
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 0
47813: PUSH
47814: LD_INT 2
47816: NEG
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 1
47824: PUSH
47825: LD_INT 1
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 2
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 2
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47867: LD_ADDR_VAR 0 49
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: LD_INT 1
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: LD_INT 1
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 0
47915: PUSH
47916: LD_INT 1
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 1
47925: NEG
47926: PUSH
47927: LD_INT 0
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: LD_INT 1
47940: NEG
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 1
47948: PUSH
47949: LD_INT 1
47951: NEG
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 2
47959: PUSH
47960: LD_INT 0
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 2
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 2
47979: PUSH
47980: LD_INT 2
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: LD_INT 2
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48011: LD_ADDR_VAR 0 50
48015: PUSH
48016: LD_INT 0
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: LD_INT 1
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 1
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 1
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 0
48059: PUSH
48060: LD_INT 1
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 1
48069: NEG
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 1
48080: NEG
48081: PUSH
48082: LD_INT 1
48084: NEG
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 2
48092: PUSH
48093: LD_INT 1
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 2
48102: PUSH
48103: LD_INT 2
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: LD_INT 2
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: LD_INT 2
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 1
48132: NEG
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48155: LD_ADDR_VAR 0 51
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: LD_INT 0
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: LD_INT 1
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 1
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 0
48203: PUSH
48204: LD_INT 1
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 1
48213: NEG
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 1
48224: NEG
48225: PUSH
48226: LD_INT 1
48228: NEG
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 1
48236: PUSH
48237: LD_INT 2
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 0
48246: PUSH
48247: LD_INT 2
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 1
48256: NEG
48257: PUSH
48258: LD_INT 1
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 2
48267: NEG
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 2
48278: NEG
48279: PUSH
48280: LD_INT 1
48282: NEG
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48302: LD_ADDR_VAR 0 52
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: LD_INT 1
48322: NEG
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: LD_INT 0
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: LD_INT 0
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 1
48371: NEG
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 1
48383: NEG
48384: PUSH
48385: LD_INT 2
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: NEG
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 2
48406: NEG
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 2
48417: NEG
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 2
48429: NEG
48430: PUSH
48431: LD_INT 2
48433: NEG
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48453: LD_ADDR_VAR 0 53
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: LD_INT 1
48473: NEG
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: LD_INT 1
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 0
48501: PUSH
48502: LD_INT 1
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 1
48511: NEG
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 1
48522: NEG
48523: PUSH
48524: LD_INT 1
48526: NEG
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: LD_INT 2
48538: NEG
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: LD_INT 2
48549: NEG
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 1
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 2
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 2
48578: PUSH
48579: LD_INT 1
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 2
48588: PUSH
48589: LD_INT 2
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: LD_INT 2
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: LD_INT 2
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: LD_INT 1
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 2
48629: NEG
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 2
48640: NEG
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 2
48652: NEG
48653: PUSH
48654: LD_INT 2
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48683: LD_ADDR_VAR 0 54
48687: PUSH
48688: LD_INT 0
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 0
48700: PUSH
48701: LD_INT 1
48703: NEG
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 1
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 1
48741: NEG
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 1
48752: NEG
48753: PUSH
48754: LD_INT 1
48756: NEG
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 1
48764: NEG
48765: PUSH
48766: LD_INT 2
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: LD_INT 2
48779: NEG
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 1
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 2
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 2
48808: PUSH
48809: LD_INT 1
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 2
48818: PUSH
48819: LD_INT 2
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 1
48828: PUSH
48829: LD_INT 2
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 0
48838: PUSH
48839: LD_INT 2
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 1
48848: NEG
48849: PUSH
48850: LD_INT 1
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 2
48859: NEG
48860: PUSH
48861: LD_INT 0
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 2
48870: NEG
48871: PUSH
48872: LD_INT 1
48874: NEG
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 2
48882: NEG
48883: PUSH
48884: LD_INT 2
48886: NEG
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48913: LD_ADDR_VAR 0 55
48917: PUSH
48918: LD_INT 0
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: NEG
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: LD_INT 2
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: LD_INT 2
49009: NEG
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 2
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 2
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 2
49048: PUSH
49049: LD_INT 2
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 1
49058: PUSH
49059: LD_INT 2
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: LD_INT 2
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 1
49078: NEG
49079: PUSH
49080: LD_INT 1
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 2
49089: NEG
49090: PUSH
49091: LD_INT 0
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 2
49100: NEG
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 2
49112: NEG
49113: PUSH
49114: LD_INT 2
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49143: LD_ADDR_VAR 0 56
49147: PUSH
49148: LD_INT 0
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: LD_INT 0
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: LD_INT 1
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 0
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 1
49201: NEG
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 1
49212: NEG
49213: PUSH
49214: LD_INT 1
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 1
49224: NEG
49225: PUSH
49226: LD_INT 2
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: LD_INT 2
49239: NEG
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: PUSH
49248: LD_INT 1
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 2
49258: PUSH
49259: LD_INT 0
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 2
49268: PUSH
49269: LD_INT 1
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 2
49278: PUSH
49279: LD_INT 2
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 1
49288: PUSH
49289: LD_INT 2
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: LD_INT 2
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 1
49308: NEG
49309: PUSH
49310: LD_INT 1
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 2
49319: NEG
49320: PUSH
49321: LD_INT 0
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 2
49330: NEG
49331: PUSH
49332: LD_INT 1
49334: NEG
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 2
49342: NEG
49343: PUSH
49344: LD_INT 2
49346: NEG
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49373: LD_ADDR_VAR 0 57
49377: PUSH
49378: LD_INT 0
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 0
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 0
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 1
49442: NEG
49443: PUSH
49444: LD_INT 1
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: LD_INT 2
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 0
49466: PUSH
49467: LD_INT 2
49469: NEG
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 2
49488: PUSH
49489: LD_INT 0
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 2
49498: PUSH
49499: LD_INT 1
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 2
49508: PUSH
49509: LD_INT 2
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: LD_INT 2
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: LD_INT 2
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 1
49538: NEG
49539: PUSH
49540: LD_INT 1
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 2
49549: NEG
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 2
49560: NEG
49561: PUSH
49562: LD_INT 1
49564: NEG
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 2
49572: NEG
49573: PUSH
49574: LD_INT 2
49576: NEG
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49603: LD_ADDR_VAR 0 58
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 0
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 1
49661: NEG
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: LD_INT 1
49676: NEG
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: LD_INT 2
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: LD_INT 2
49699: NEG
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 1
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 2
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 2
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 2
49738: PUSH
49739: LD_INT 2
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: LD_INT 2
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: LD_INT 2
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 1
49768: NEG
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 2
49779: NEG
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 2
49790: NEG
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 2
49802: NEG
49803: PUSH
49804: LD_INT 2
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49833: LD_ADDR_VAR 0 59
49837: PUSH
49838: LD_INT 0
49840: PUSH
49841: LD_INT 0
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: LD_INT 1
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 1
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: LD_INT 1
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: LD_INT 1
49906: NEG
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49921: LD_ADDR_VAR 0 60
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: LD_INT 0
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 0
49938: PUSH
49939: LD_INT 1
49941: NEG
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 1
49959: PUSH
49960: LD_INT 1
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 0
49969: PUSH
49970: LD_INT 1
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 1
49990: NEG
49991: PUSH
49992: LD_INT 1
49994: NEG
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50009: LD_ADDR_VAR 0 61
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: LD_INT 1
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: PUSH
50038: LD_INT 0
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 1
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: NEG
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: NEG
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50097: LD_ADDR_VAR 0 62
50101: PUSH
50102: LD_INT 0
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 0
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 1
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 1
50135: PUSH
50136: LD_INT 1
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 1
50155: NEG
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50185: LD_ADDR_VAR 0 63
50189: PUSH
50190: LD_INT 0
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 1
50223: PUSH
50224: LD_INT 1
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 0
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: NEG
50244: PUSH
50245: LD_INT 0
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 1
50254: NEG
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50273: LD_ADDR_VAR 0 64
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 1
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: LD_INT 1
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 1
50331: NEG
50332: PUSH
50333: LD_INT 0
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 1
50342: NEG
50343: PUSH
50344: LD_INT 1
50346: NEG
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: ST_TO_ADDR
// end ; 1 :
50361: GO 56258
50363: LD_INT 1
50365: DOUBLE
50366: EQUAL
50367: IFTRUE 50371
50369: GO 52994
50371: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50372: LD_ADDR_VAR 0 11
50376: PUSH
50377: LD_INT 1
50379: NEG
50380: PUSH
50381: LD_INT 3
50383: NEG
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: LD_INT 3
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: LD_INT 2
50405: NEG
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: LIST
50415: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50416: LD_ADDR_VAR 0 12
50420: PUSH
50421: LD_INT 2
50423: PUSH
50424: LD_INT 1
50426: NEG
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 3
50434: PUSH
50435: LD_INT 0
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 3
50444: PUSH
50445: LD_INT 1
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: LIST
50456: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50457: LD_ADDR_VAR 0 13
50461: PUSH
50462: LD_INT 3
50464: PUSH
50465: LD_INT 2
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 3
50474: PUSH
50475: LD_INT 3
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 2
50484: PUSH
50485: LD_INT 3
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: LIST
50496: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50497: LD_ADDR_VAR 0 14
50501: PUSH
50502: LD_INT 1
50504: PUSH
50505: LD_INT 3
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 0
50514: PUSH
50515: LD_INT 3
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: LD_INT 2
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: LIST
50537: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50538: LD_ADDR_VAR 0 15
50542: PUSH
50543: LD_INT 2
50545: NEG
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 3
50556: NEG
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 3
50567: NEG
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: LIST
50581: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50582: LD_ADDR_VAR 0 16
50586: PUSH
50587: LD_INT 2
50589: NEG
50590: PUSH
50591: LD_INT 3
50593: NEG
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 3
50601: NEG
50602: PUSH
50603: LD_INT 2
50605: NEG
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 3
50613: NEG
50614: PUSH
50615: LD_INT 3
50617: NEG
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: LIST
50627: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50628: LD_ADDR_VAR 0 17
50632: PUSH
50633: LD_INT 1
50635: NEG
50636: PUSH
50637: LD_INT 3
50639: NEG
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: LD_INT 3
50650: NEG
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 1
50658: PUSH
50659: LD_INT 2
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: LIST
50671: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50672: LD_ADDR_VAR 0 18
50676: PUSH
50677: LD_INT 2
50679: PUSH
50680: LD_INT 1
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 3
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 3
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: LIST
50712: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50713: LD_ADDR_VAR 0 19
50717: PUSH
50718: LD_INT 3
50720: PUSH
50721: LD_INT 2
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 3
50730: PUSH
50731: LD_INT 3
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 2
50740: PUSH
50741: LD_INT 3
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: LIST
50752: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50753: LD_ADDR_VAR 0 20
50757: PUSH
50758: LD_INT 1
50760: PUSH
50761: LD_INT 3
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: LD_INT 3
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 1
50780: NEG
50781: PUSH
50782: LD_INT 2
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: LIST
50793: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50794: LD_ADDR_VAR 0 21
50798: PUSH
50799: LD_INT 2
50801: NEG
50802: PUSH
50803: LD_INT 1
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 3
50812: NEG
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 3
50823: NEG
50824: PUSH
50825: LD_INT 1
50827: NEG
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: LIST
50837: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50838: LD_ADDR_VAR 0 22
50842: PUSH
50843: LD_INT 2
50845: NEG
50846: PUSH
50847: LD_INT 3
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 3
50857: NEG
50858: PUSH
50859: LD_INT 2
50861: NEG
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 3
50869: NEG
50870: PUSH
50871: LD_INT 3
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: LIST
50883: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50884: LD_ADDR_VAR 0 23
50888: PUSH
50889: LD_INT 0
50891: PUSH
50892: LD_INT 3
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 1
50902: NEG
50903: PUSH
50904: LD_INT 4
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: LD_INT 3
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: LIST
50927: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50928: LD_ADDR_VAR 0 24
50932: PUSH
50933: LD_INT 3
50935: PUSH
50936: LD_INT 0
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 3
50945: PUSH
50946: LD_INT 1
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 4
50956: PUSH
50957: LD_INT 1
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: LIST
50968: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50969: LD_ADDR_VAR 0 25
50973: PUSH
50974: LD_INT 3
50976: PUSH
50977: LD_INT 3
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 4
50986: PUSH
50987: LD_INT 3
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 3
50996: PUSH
50997: LD_INT 4
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: LIST
51008: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51009: LD_ADDR_VAR 0 26
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: LD_INT 3
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 1
51026: PUSH
51027: LD_INT 4
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: LD_INT 3
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: LIST
51049: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51050: LD_ADDR_VAR 0 27
51054: PUSH
51055: LD_INT 3
51057: NEG
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 3
51068: NEG
51069: PUSH
51070: LD_INT 1
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 4
51079: NEG
51080: PUSH
51081: LD_INT 1
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: LIST
51093: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51094: LD_ADDR_VAR 0 28
51098: PUSH
51099: LD_INT 3
51101: NEG
51102: PUSH
51103: LD_INT 3
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 3
51113: NEG
51114: PUSH
51115: LD_INT 4
51117: NEG
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 4
51125: NEG
51126: PUSH
51127: LD_INT 3
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: LIST
51139: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51140: LD_ADDR_VAR 0 29
51144: PUSH
51145: LD_INT 1
51147: NEG
51148: PUSH
51149: LD_INT 3
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: LD_INT 3
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: LD_INT 2
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: LD_INT 4
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: LD_INT 4
51196: NEG
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 1
51204: PUSH
51205: LD_INT 3
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: NEG
51216: PUSH
51217: LD_INT 5
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: LD_INT 5
51230: NEG
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: LD_INT 4
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: NEG
51250: PUSH
51251: LD_INT 6
51253: NEG
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: LD_INT 6
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: PUSH
51273: LD_INT 5
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51295: LD_ADDR_VAR 0 30
51299: PUSH
51300: LD_INT 2
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 3
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 3
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 3
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 4
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 4
51354: PUSH
51355: LD_INT 1
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 4
51364: PUSH
51365: LD_INT 1
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 5
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 5
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 5
51395: PUSH
51396: LD_INT 1
51398: NEG
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 6
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 6
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51438: LD_ADDR_VAR 0 31
51442: PUSH
51443: LD_INT 3
51445: PUSH
51446: LD_INT 2
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 3
51455: PUSH
51456: LD_INT 3
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 2
51465: PUSH
51466: LD_INT 3
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 4
51475: PUSH
51476: LD_INT 3
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 4
51485: PUSH
51486: LD_INT 4
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 3
51495: PUSH
51496: LD_INT 4
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 5
51505: PUSH
51506: LD_INT 4
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 5
51515: PUSH
51516: LD_INT 5
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 4
51525: PUSH
51526: LD_INT 5
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 6
51535: PUSH
51536: LD_INT 5
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 6
51545: PUSH
51546: LD_INT 6
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 5
51555: PUSH
51556: LD_INT 6
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51577: LD_ADDR_VAR 0 32
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: LD_INT 3
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: LD_INT 3
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: LD_INT 2
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: LD_INT 4
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: LD_INT 4
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 1
51635: NEG
51636: PUSH
51637: LD_INT 3
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 1
51646: PUSH
51647: LD_INT 5
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: LD_INT 5
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 1
51666: NEG
51667: PUSH
51668: LD_INT 4
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: PUSH
51678: LD_INT 6
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: LD_INT 6
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 1
51697: NEG
51698: PUSH
51699: LD_INT 5
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51720: LD_ADDR_VAR 0 33
51724: PUSH
51725: LD_INT 2
51727: NEG
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 3
51738: NEG
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 3
51749: NEG
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 3
51761: NEG
51762: PUSH
51763: LD_INT 1
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 4
51772: NEG
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 4
51783: NEG
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 4
51795: NEG
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 5
51806: NEG
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 5
51817: NEG
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 5
51829: NEG
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 6
51840: NEG
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 6
51851: NEG
51852: PUSH
51853: LD_INT 1
51855: NEG
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51875: LD_ADDR_VAR 0 34
51879: PUSH
51880: LD_INT 2
51882: NEG
51883: PUSH
51884: LD_INT 3
51886: NEG
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 3
51894: NEG
51895: PUSH
51896: LD_INT 2
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 3
51906: NEG
51907: PUSH
51908: LD_INT 3
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 3
51918: NEG
51919: PUSH
51920: LD_INT 4
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 4
51930: NEG
51931: PUSH
51932: LD_INT 3
51934: NEG
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 4
51942: NEG
51943: PUSH
51944: LD_INT 4
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 4
51954: NEG
51955: PUSH
51956: LD_INT 5
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 5
51966: NEG
51967: PUSH
51968: LD_INT 4
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 5
51978: NEG
51979: PUSH
51980: LD_INT 5
51982: NEG
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 5
51990: NEG
51991: PUSH
51992: LD_INT 6
51994: NEG
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 6
52002: NEG
52003: PUSH
52004: LD_INT 5
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 6
52014: NEG
52015: PUSH
52016: LD_INT 6
52018: NEG
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52038: LD_ADDR_VAR 0 41
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: LD_INT 2
52048: NEG
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 1
52056: NEG
52057: PUSH
52058: LD_INT 3
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: PUSH
52069: LD_INT 2
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: LIST
52081: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52082: LD_ADDR_VAR 0 42
52086: PUSH
52087: LD_INT 2
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 2
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 3
52110: PUSH
52111: LD_INT 1
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: LIST
52122: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52123: LD_ADDR_VAR 0 43
52127: PUSH
52128: LD_INT 2
52130: PUSH
52131: LD_INT 2
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 3
52140: PUSH
52141: LD_INT 2
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 2
52150: PUSH
52151: LD_INT 3
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: LIST
52162: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52163: LD_ADDR_VAR 0 44
52167: PUSH
52168: LD_INT 0
52170: PUSH
52171: LD_INT 2
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: LD_INT 3
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: NEG
52191: PUSH
52192: LD_INT 2
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: LIST
52203: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52204: LD_ADDR_VAR 0 45
52208: PUSH
52209: LD_INT 2
52211: NEG
52212: PUSH
52213: LD_INT 0
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 2
52222: NEG
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 3
52233: NEG
52234: PUSH
52235: LD_INT 1
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: LIST
52247: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52248: LD_ADDR_VAR 0 46
52252: PUSH
52253: LD_INT 2
52255: NEG
52256: PUSH
52257: LD_INT 2
52259: NEG
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 2
52267: NEG
52268: PUSH
52269: LD_INT 3
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 3
52279: NEG
52280: PUSH
52281: LD_INT 2
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: LIST
52293: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52294: LD_ADDR_VAR 0 47
52298: PUSH
52299: LD_INT 2
52301: NEG
52302: PUSH
52303: LD_INT 3
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 1
52313: NEG
52314: PUSH
52315: LD_INT 3
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52327: LD_ADDR_VAR 0 48
52331: PUSH
52332: LD_INT 1
52334: PUSH
52335: LD_INT 2
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 2
52345: PUSH
52346: LD_INT 1
52348: NEG
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52358: LD_ADDR_VAR 0 49
52362: PUSH
52363: LD_INT 3
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 3
52375: PUSH
52376: LD_INT 2
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52387: LD_ADDR_VAR 0 50
52391: PUSH
52392: LD_INT 2
52394: PUSH
52395: LD_INT 3
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: PUSH
52405: LD_INT 3
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52416: LD_ADDR_VAR 0 51
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: LD_INT 2
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 2
52434: NEG
52435: PUSH
52436: LD_INT 1
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52447: LD_ADDR_VAR 0 52
52451: PUSH
52452: LD_INT 3
52454: NEG
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 3
52466: NEG
52467: PUSH
52468: LD_INT 2
52470: NEG
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52480: LD_ADDR_VAR 0 53
52484: PUSH
52485: LD_INT 1
52487: NEG
52488: PUSH
52489: LD_INT 3
52491: NEG
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: LD_INT 3
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: LD_INT 2
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: LIST
52523: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52524: LD_ADDR_VAR 0 54
52528: PUSH
52529: LD_INT 2
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 3
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 3
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: LIST
52564: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52565: LD_ADDR_VAR 0 55
52569: PUSH
52570: LD_INT 3
52572: PUSH
52573: LD_INT 2
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 3
52582: PUSH
52583: LD_INT 3
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 2
52592: PUSH
52593: LD_INT 3
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: LIST
52604: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52605: LD_ADDR_VAR 0 56
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: LD_INT 3
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: LD_INT 3
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 1
52632: NEG
52633: PUSH
52634: LD_INT 2
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: LIST
52645: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52646: LD_ADDR_VAR 0 57
52650: PUSH
52651: LD_INT 2
52653: NEG
52654: PUSH
52655: LD_INT 1
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 3
52664: NEG
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 3
52675: NEG
52676: PUSH
52677: LD_INT 1
52679: NEG
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: LIST
52689: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52690: LD_ADDR_VAR 0 58
52694: PUSH
52695: LD_INT 2
52697: NEG
52698: PUSH
52699: LD_INT 3
52701: NEG
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 3
52709: NEG
52710: PUSH
52711: LD_INT 2
52713: NEG
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 3
52721: NEG
52722: PUSH
52723: LD_INT 3
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: LIST
52735: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52736: LD_ADDR_VAR 0 59
52740: PUSH
52741: LD_INT 1
52743: NEG
52744: PUSH
52745: LD_INT 2
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: LD_INT 2
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: LIST
52779: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52780: LD_ADDR_VAR 0 60
52784: PUSH
52785: LD_INT 1
52787: PUSH
52788: LD_INT 1
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 2
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 2
52808: PUSH
52809: LD_INT 1
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: LIST
52820: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52821: LD_ADDR_VAR 0 61
52825: PUSH
52826: LD_INT 2
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 2
52838: PUSH
52839: LD_INT 2
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: LD_INT 2
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: LIST
52860: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52861: LD_ADDR_VAR 0 62
52865: PUSH
52866: LD_INT 1
52868: PUSH
52869: LD_INT 2
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: LD_INT 2
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 1
52888: NEG
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: LIST
52901: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52902: LD_ADDR_VAR 0 63
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: LD_INT 1
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 2
52920: NEG
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 2
52931: NEG
52932: PUSH
52933: LD_INT 1
52935: NEG
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: LIST
52945: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52946: LD_ADDR_VAR 0 64
52950: PUSH
52951: LD_INT 1
52953: NEG
52954: PUSH
52955: LD_INT 2
52957: NEG
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 2
52965: NEG
52966: PUSH
52967: LD_INT 1
52969: NEG
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 2
52977: NEG
52978: PUSH
52979: LD_INT 2
52981: NEG
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: LIST
52991: ST_TO_ADDR
// end ; 2 :
52992: GO 56258
52994: LD_INT 2
52996: DOUBLE
52997: EQUAL
52998: IFTRUE 53002
53000: GO 56257
53002: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53003: LD_ADDR_VAR 0 29
53007: PUSH
53008: LD_INT 4
53010: PUSH
53011: LD_INT 0
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 4
53020: PUSH
53021: LD_INT 1
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 5
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 5
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 4
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 3
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 3
53071: PUSH
53072: LD_INT 1
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 3
53082: PUSH
53083: LD_INT 2
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 5
53093: PUSH
53094: LD_INT 2
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 3
53103: PUSH
53104: LD_INT 3
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 3
53113: PUSH
53114: LD_INT 2
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 4
53123: PUSH
53124: LD_INT 3
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 4
53133: PUSH
53134: LD_INT 4
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 3
53143: PUSH
53144: LD_INT 4
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 2
53153: PUSH
53154: LD_INT 3
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 2
53163: PUSH
53164: LD_INT 2
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 4
53173: PUSH
53174: LD_INT 2
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 2
53183: PUSH
53184: LD_INT 4
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: LD_INT 4
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: LD_INT 3
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: LD_INT 4
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: LD_INT 5
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: LD_INT 5
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: LD_INT 4
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: LD_INT 3
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 2
53265: PUSH
53266: LD_INT 5
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 2
53275: NEG
53276: PUSH
53277: LD_INT 3
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 3
53286: NEG
53287: PUSH
53288: LD_INT 0
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 3
53297: NEG
53298: PUSH
53299: LD_INT 1
53301: NEG
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 2
53309: NEG
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 2
53320: NEG
53321: PUSH
53322: LD_INT 1
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 3
53331: NEG
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 4
53342: NEG
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 4
53353: NEG
53354: PUSH
53355: LD_INT 1
53357: NEG
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 4
53365: NEG
53366: PUSH
53367: LD_INT 2
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 2
53377: NEG
53378: PUSH
53379: LD_INT 2
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 4
53388: NEG
53389: PUSH
53390: LD_INT 4
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 4
53400: NEG
53401: PUSH
53402: LD_INT 5
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 3
53412: NEG
53413: PUSH
53414: LD_INT 4
53416: NEG
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 3
53424: NEG
53425: PUSH
53426: LD_INT 3
53428: NEG
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 4
53436: NEG
53437: PUSH
53438: LD_INT 3
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 5
53448: NEG
53449: PUSH
53450: LD_INT 4
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 5
53460: NEG
53461: PUSH
53462: LD_INT 5
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 3
53472: NEG
53473: PUSH
53474: LD_INT 5
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 5
53484: NEG
53485: PUSH
53486: LD_INT 3
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53541: LD_ADDR_VAR 0 30
53545: PUSH
53546: LD_INT 4
53548: PUSH
53549: LD_INT 4
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 4
53558: PUSH
53559: LD_INT 3
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 5
53568: PUSH
53569: LD_INT 4
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 5
53578: PUSH
53579: LD_INT 5
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 4
53588: PUSH
53589: LD_INT 5
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 3
53598: PUSH
53599: LD_INT 4
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 3
53608: PUSH
53609: LD_INT 3
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 5
53618: PUSH
53619: LD_INT 3
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 3
53628: PUSH
53629: LD_INT 5
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 0
53638: PUSH
53639: LD_INT 3
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: LD_INT 2
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 1
53658: PUSH
53659: LD_INT 3
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: LD_INT 4
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 0
53678: PUSH
53679: LD_INT 4
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 1
53688: NEG
53689: PUSH
53690: LD_INT 3
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: LD_INT 2
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 2
53710: PUSH
53711: LD_INT 4
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 2
53720: NEG
53721: PUSH
53722: LD_INT 2
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 4
53731: NEG
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 4
53742: NEG
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 3
53754: NEG
53755: PUSH
53756: LD_INT 0
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 3
53765: NEG
53766: PUSH
53767: LD_INT 1
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 4
53776: NEG
53777: PUSH
53778: LD_INT 1
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 5
53787: NEG
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 5
53798: NEG
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 5
53810: NEG
53811: PUSH
53812: LD_INT 2
53814: NEG
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 3
53822: NEG
53823: PUSH
53824: LD_INT 2
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 3
53833: NEG
53834: PUSH
53835: LD_INT 3
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 3
53845: NEG
53846: PUSH
53847: LD_INT 4
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 2
53857: NEG
53858: PUSH
53859: LD_INT 3
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 2
53869: NEG
53870: PUSH
53871: LD_INT 2
53873: NEG
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 3
53881: NEG
53882: PUSH
53883: LD_INT 2
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 4
53893: NEG
53894: PUSH
53895: LD_INT 3
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 4
53905: NEG
53906: PUSH
53907: LD_INT 4
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 2
53917: NEG
53918: PUSH
53919: LD_INT 4
53921: NEG
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 4
53929: NEG
53930: PUSH
53931: LD_INT 2
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: LD_INT 4
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: LD_INT 5
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 1
53963: PUSH
53964: LD_INT 4
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 1
53974: PUSH
53975: LD_INT 3
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 0
53985: PUSH
53986: LD_INT 3
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: LD_INT 4
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 1
54008: NEG
54009: PUSH
54010: LD_INT 5
54012: NEG
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 2
54020: PUSH
54021: LD_INT 3
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 2
54031: NEG
54032: PUSH
54033: LD_INT 5
54035: NEG
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54088: LD_ADDR_VAR 0 31
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: LD_INT 4
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: LD_INT 3
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 1
54115: PUSH
54116: LD_INT 4
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: LD_INT 5
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: LD_INT 5
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 1
54145: NEG
54146: PUSH
54147: LD_INT 4
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: LD_INT 3
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 2
54167: PUSH
54168: LD_INT 5
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 2
54177: NEG
54178: PUSH
54179: LD_INT 3
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 3
54188: NEG
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 3
54199: NEG
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 2
54211: NEG
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 2
54222: NEG
54223: PUSH
54224: LD_INT 1
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 3
54233: NEG
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 4
54244: NEG
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 4
54255: NEG
54256: PUSH
54257: LD_INT 1
54259: NEG
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 4
54267: NEG
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 2
54279: NEG
54280: PUSH
54281: LD_INT 2
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 4
54290: NEG
54291: PUSH
54292: LD_INT 4
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 4
54302: NEG
54303: PUSH
54304: LD_INT 5
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 3
54314: NEG
54315: PUSH
54316: LD_INT 4
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 3
54326: NEG
54327: PUSH
54328: LD_INT 3
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 4
54338: NEG
54339: PUSH
54340: LD_INT 3
54342: NEG
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 5
54350: NEG
54351: PUSH
54352: LD_INT 4
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 5
54362: NEG
54363: PUSH
54364: LD_INT 5
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 3
54374: NEG
54375: PUSH
54376: LD_INT 5
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 5
54386: NEG
54387: PUSH
54388: LD_INT 3
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: LD_INT 3
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: LD_INT 4
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 1
54420: PUSH
54421: LD_INT 3
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: LD_INT 2
54434: NEG
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: LD_INT 2
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: LD_INT 3
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: LD_INT 4
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 2
54477: PUSH
54478: LD_INT 2
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 2
54488: NEG
54489: PUSH
54490: LD_INT 4
54492: NEG
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 4
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 4
54510: PUSH
54511: LD_INT 1
54513: NEG
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 5
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 5
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 4
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 3
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 3
54561: PUSH
54562: LD_INT 1
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 3
54572: PUSH
54573: LD_INT 2
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 5
54583: PUSH
54584: LD_INT 2
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54638: LD_ADDR_VAR 0 32
54642: PUSH
54643: LD_INT 4
54645: NEG
54646: PUSH
54647: LD_INT 0
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 4
54656: NEG
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 3
54668: NEG
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 3
54679: NEG
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 4
54690: NEG
54691: PUSH
54692: LD_INT 1
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 5
54701: NEG
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 5
54712: NEG
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 5
54724: NEG
54725: PUSH
54726: LD_INT 2
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 3
54736: NEG
54737: PUSH
54738: LD_INT 2
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 3
54747: NEG
54748: PUSH
54749: LD_INT 3
54751: NEG
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 3
54759: NEG
54760: PUSH
54761: LD_INT 4
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 2
54771: NEG
54772: PUSH
54773: LD_INT 3
54775: NEG
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 2
54783: NEG
54784: PUSH
54785: LD_INT 2
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 3
54795: NEG
54796: PUSH
54797: LD_INT 2
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 4
54807: NEG
54808: PUSH
54809: LD_INT 3
54811: NEG
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 4
54819: NEG
54820: PUSH
54821: LD_INT 4
54823: NEG
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 2
54831: NEG
54832: PUSH
54833: LD_INT 4
54835: NEG
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 4
54843: NEG
54844: PUSH
54845: LD_INT 2
54847: NEG
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: LD_INT 4
54858: NEG
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: LD_INT 5
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: PUSH
54878: LD_INT 4
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 1
54888: PUSH
54889: LD_INT 3
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: LD_INT 3
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: NEG
54911: PUSH
54912: LD_INT 4
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 1
54922: NEG
54923: PUSH
54924: LD_INT 5
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 2
54934: PUSH
54935: LD_INT 3
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 2
54945: NEG
54946: PUSH
54947: LD_INT 5
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 3
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 3
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 4
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 4
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 3
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 2
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 2
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 2
55029: PUSH
55030: LD_INT 2
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 4
55040: PUSH
55041: LD_INT 2
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 4
55050: PUSH
55051: LD_INT 4
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 4
55060: PUSH
55061: LD_INT 3
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 5
55070: PUSH
55071: LD_INT 4
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 5
55080: PUSH
55081: LD_INT 5
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 4
55090: PUSH
55091: LD_INT 5
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 3
55100: PUSH
55101: LD_INT 4
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 3
55110: PUSH
55111: LD_INT 3
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 5
55120: PUSH
55121: LD_INT 3
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 3
55130: PUSH
55131: LD_INT 5
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55185: LD_ADDR_VAR 0 33
55189: PUSH
55190: LD_INT 4
55192: NEG
55193: PUSH
55194: LD_INT 4
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 4
55204: NEG
55205: PUSH
55206: LD_INT 5
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 3
55216: NEG
55217: PUSH
55218: LD_INT 4
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 3
55228: NEG
55229: PUSH
55230: LD_INT 3
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 4
55240: NEG
55241: PUSH
55242: LD_INT 3
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 5
55252: NEG
55253: PUSH
55254: LD_INT 4
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 5
55264: NEG
55265: PUSH
55266: LD_INT 5
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 3
55276: NEG
55277: PUSH
55278: LD_INT 5
55280: NEG
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 5
55288: NEG
55289: PUSH
55290: LD_INT 3
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: LD_INT 3
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: LD_INT 4
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: LD_INT 3
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 1
55333: PUSH
55334: LD_INT 2
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: LD_INT 2
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 1
55355: NEG
55356: PUSH
55357: LD_INT 3
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 1
55367: NEG
55368: PUSH
55369: LD_INT 4
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 2
55379: PUSH
55380: LD_INT 2
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 2
55390: NEG
55391: PUSH
55392: LD_INT 4
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 4
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 4
55412: PUSH
55413: LD_INT 1
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 5
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 5
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 4
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 3
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 3
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 3
55474: PUSH
55475: LD_INT 2
55477: NEG
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 5
55485: PUSH
55486: LD_INT 2
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 3
55495: PUSH
55496: LD_INT 3
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 3
55505: PUSH
55506: LD_INT 2
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 4
55515: PUSH
55516: LD_INT 3
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 4
55525: PUSH
55526: LD_INT 4
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 3
55535: PUSH
55536: LD_INT 4
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 2
55545: PUSH
55546: LD_INT 3
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 2
55555: PUSH
55556: LD_INT 2
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 4
55565: PUSH
55566: LD_INT 2
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 2
55575: PUSH
55576: LD_INT 4
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: LD_INT 4
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: LD_INT 3
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: LD_INT 4
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: LD_INT 5
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: LD_INT 5
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 1
55635: NEG
55636: PUSH
55637: LD_INT 4
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: LD_INT 3
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 2
55657: PUSH
55658: LD_INT 5
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 2
55667: NEG
55668: PUSH
55669: LD_INT 3
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55723: LD_ADDR_VAR 0 34
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: LD_INT 4
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: LD_INT 5
55744: NEG
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: LD_INT 4
55755: NEG
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: LD_INT 3
55766: NEG
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: LD_INT 3
55777: NEG
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: LD_INT 4
55789: NEG
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: LD_INT 5
55801: NEG
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 2
55809: PUSH
55810: LD_INT 3
55812: NEG
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 2
55820: NEG
55821: PUSH
55822: LD_INT 5
55824: NEG
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 3
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 3
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 4
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 4
55863: PUSH
55864: LD_INT 1
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 3
55873: PUSH
55874: LD_INT 1
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 2
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 2
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 2
55904: PUSH
55905: LD_INT 2
55907: NEG
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 4
55915: PUSH
55916: LD_INT 2
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 4
55925: PUSH
55926: LD_INT 4
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 4
55935: PUSH
55936: LD_INT 3
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 5
55945: PUSH
55946: LD_INT 4
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 5
55955: PUSH
55956: LD_INT 5
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 4
55965: PUSH
55966: LD_INT 5
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 3
55975: PUSH
55976: LD_INT 4
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 3
55985: PUSH
55986: LD_INT 3
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 5
55995: PUSH
55996: LD_INT 3
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 3
56005: PUSH
56006: LD_INT 5
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 0
56015: PUSH
56016: LD_INT 3
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: LD_INT 2
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: LD_INT 3
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 1
56045: PUSH
56046: LD_INT 4
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: LD_INT 4
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: LD_INT 3
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 1
56076: NEG
56077: PUSH
56078: LD_INT 2
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 2
56087: PUSH
56088: LD_INT 4
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 2
56097: NEG
56098: PUSH
56099: LD_INT 2
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 4
56108: NEG
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 4
56119: NEG
56120: PUSH
56121: LD_INT 1
56123: NEG
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 3
56131: NEG
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 3
56142: NEG
56143: PUSH
56144: LD_INT 1
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 4
56153: NEG
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 5
56164: NEG
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 5
56175: NEG
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 5
56187: NEG
56188: PUSH
56189: LD_INT 2
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 3
56199: NEG
56200: PUSH
56201: LD_INT 2
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: ST_TO_ADDR
// end ; end ;
56255: GO 56258
56257: POP
// case btype of b_depot , b_warehouse :
56258: LD_VAR 0 1
56262: PUSH
56263: LD_INT 0
56265: DOUBLE
56266: EQUAL
56267: IFTRUE 56277
56269: LD_INT 1
56271: DOUBLE
56272: EQUAL
56273: IFTRUE 56277
56275: GO 56478
56277: POP
// case nation of nation_american :
56278: LD_VAR 0 5
56282: PUSH
56283: LD_INT 1
56285: DOUBLE
56286: EQUAL
56287: IFTRUE 56291
56289: GO 56347
56291: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56292: LD_ADDR_VAR 0 9
56296: PUSH
56297: LD_VAR 0 11
56301: PUSH
56302: LD_VAR 0 12
56306: PUSH
56307: LD_VAR 0 13
56311: PUSH
56312: LD_VAR 0 14
56316: PUSH
56317: LD_VAR 0 15
56321: PUSH
56322: LD_VAR 0 16
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: PUSH
56335: LD_VAR 0 4
56339: PUSH
56340: LD_INT 1
56342: PLUS
56343: ARRAY
56344: ST_TO_ADDR
56345: GO 56476
56347: LD_INT 2
56349: DOUBLE
56350: EQUAL
56351: IFTRUE 56355
56353: GO 56411
56355: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56356: LD_ADDR_VAR 0 9
56360: PUSH
56361: LD_VAR 0 17
56365: PUSH
56366: LD_VAR 0 18
56370: PUSH
56371: LD_VAR 0 19
56375: PUSH
56376: LD_VAR 0 20
56380: PUSH
56381: LD_VAR 0 21
56385: PUSH
56386: LD_VAR 0 22
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: PUSH
56399: LD_VAR 0 4
56403: PUSH
56404: LD_INT 1
56406: PLUS
56407: ARRAY
56408: ST_TO_ADDR
56409: GO 56476
56411: LD_INT 3
56413: DOUBLE
56414: EQUAL
56415: IFTRUE 56419
56417: GO 56475
56419: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56420: LD_ADDR_VAR 0 9
56424: PUSH
56425: LD_VAR 0 23
56429: PUSH
56430: LD_VAR 0 24
56434: PUSH
56435: LD_VAR 0 25
56439: PUSH
56440: LD_VAR 0 26
56444: PUSH
56445: LD_VAR 0 27
56449: PUSH
56450: LD_VAR 0 28
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: PUSH
56463: LD_VAR 0 4
56467: PUSH
56468: LD_INT 1
56470: PLUS
56471: ARRAY
56472: ST_TO_ADDR
56473: GO 56476
56475: POP
56476: GO 57031
56478: LD_INT 2
56480: DOUBLE
56481: EQUAL
56482: IFTRUE 56492
56484: LD_INT 3
56486: DOUBLE
56487: EQUAL
56488: IFTRUE 56492
56490: GO 56548
56492: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56493: LD_ADDR_VAR 0 9
56497: PUSH
56498: LD_VAR 0 29
56502: PUSH
56503: LD_VAR 0 30
56507: PUSH
56508: LD_VAR 0 31
56512: PUSH
56513: LD_VAR 0 32
56517: PUSH
56518: LD_VAR 0 33
56522: PUSH
56523: LD_VAR 0 34
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: PUSH
56536: LD_VAR 0 4
56540: PUSH
56541: LD_INT 1
56543: PLUS
56544: ARRAY
56545: ST_TO_ADDR
56546: GO 57031
56548: LD_INT 16
56550: DOUBLE
56551: EQUAL
56552: IFTRUE 56610
56554: LD_INT 17
56556: DOUBLE
56557: EQUAL
56558: IFTRUE 56610
56560: LD_INT 18
56562: DOUBLE
56563: EQUAL
56564: IFTRUE 56610
56566: LD_INT 19
56568: DOUBLE
56569: EQUAL
56570: IFTRUE 56610
56572: LD_INT 22
56574: DOUBLE
56575: EQUAL
56576: IFTRUE 56610
56578: LD_INT 20
56580: DOUBLE
56581: EQUAL
56582: IFTRUE 56610
56584: LD_INT 21
56586: DOUBLE
56587: EQUAL
56588: IFTRUE 56610
56590: LD_INT 23
56592: DOUBLE
56593: EQUAL
56594: IFTRUE 56610
56596: LD_INT 24
56598: DOUBLE
56599: EQUAL
56600: IFTRUE 56610
56602: LD_INT 25
56604: DOUBLE
56605: EQUAL
56606: IFTRUE 56610
56608: GO 56666
56610: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56611: LD_ADDR_VAR 0 9
56615: PUSH
56616: LD_VAR 0 35
56620: PUSH
56621: LD_VAR 0 36
56625: PUSH
56626: LD_VAR 0 37
56630: PUSH
56631: LD_VAR 0 38
56635: PUSH
56636: LD_VAR 0 39
56640: PUSH
56641: LD_VAR 0 40
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: PUSH
56654: LD_VAR 0 4
56658: PUSH
56659: LD_INT 1
56661: PLUS
56662: ARRAY
56663: ST_TO_ADDR
56664: GO 57031
56666: LD_INT 6
56668: DOUBLE
56669: EQUAL
56670: IFTRUE 56722
56672: LD_INT 7
56674: DOUBLE
56675: EQUAL
56676: IFTRUE 56722
56678: LD_INT 8
56680: DOUBLE
56681: EQUAL
56682: IFTRUE 56722
56684: LD_INT 13
56686: DOUBLE
56687: EQUAL
56688: IFTRUE 56722
56690: LD_INT 12
56692: DOUBLE
56693: EQUAL
56694: IFTRUE 56722
56696: LD_INT 15
56698: DOUBLE
56699: EQUAL
56700: IFTRUE 56722
56702: LD_INT 11
56704: DOUBLE
56705: EQUAL
56706: IFTRUE 56722
56708: LD_INT 14
56710: DOUBLE
56711: EQUAL
56712: IFTRUE 56722
56714: LD_INT 10
56716: DOUBLE
56717: EQUAL
56718: IFTRUE 56722
56720: GO 56778
56722: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56723: LD_ADDR_VAR 0 9
56727: PUSH
56728: LD_VAR 0 41
56732: PUSH
56733: LD_VAR 0 42
56737: PUSH
56738: LD_VAR 0 43
56742: PUSH
56743: LD_VAR 0 44
56747: PUSH
56748: LD_VAR 0 45
56752: PUSH
56753: LD_VAR 0 46
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: PUSH
56766: LD_VAR 0 4
56770: PUSH
56771: LD_INT 1
56773: PLUS
56774: ARRAY
56775: ST_TO_ADDR
56776: GO 57031
56778: LD_INT 36
56780: DOUBLE
56781: EQUAL
56782: IFTRUE 56786
56784: GO 56842
56786: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56787: LD_ADDR_VAR 0 9
56791: PUSH
56792: LD_VAR 0 47
56796: PUSH
56797: LD_VAR 0 48
56801: PUSH
56802: LD_VAR 0 49
56806: PUSH
56807: LD_VAR 0 50
56811: PUSH
56812: LD_VAR 0 51
56816: PUSH
56817: LD_VAR 0 52
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: PUSH
56830: LD_VAR 0 4
56834: PUSH
56835: LD_INT 1
56837: PLUS
56838: ARRAY
56839: ST_TO_ADDR
56840: GO 57031
56842: LD_INT 4
56844: DOUBLE
56845: EQUAL
56846: IFTRUE 56868
56848: LD_INT 5
56850: DOUBLE
56851: EQUAL
56852: IFTRUE 56868
56854: LD_INT 34
56856: DOUBLE
56857: EQUAL
56858: IFTRUE 56868
56860: LD_INT 37
56862: DOUBLE
56863: EQUAL
56864: IFTRUE 56868
56866: GO 56924
56868: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56869: LD_ADDR_VAR 0 9
56873: PUSH
56874: LD_VAR 0 53
56878: PUSH
56879: LD_VAR 0 54
56883: PUSH
56884: LD_VAR 0 55
56888: PUSH
56889: LD_VAR 0 56
56893: PUSH
56894: LD_VAR 0 57
56898: PUSH
56899: LD_VAR 0 58
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: PUSH
56912: LD_VAR 0 4
56916: PUSH
56917: LD_INT 1
56919: PLUS
56920: ARRAY
56921: ST_TO_ADDR
56922: GO 57031
56924: LD_INT 31
56926: DOUBLE
56927: EQUAL
56928: IFTRUE 56974
56930: LD_INT 32
56932: DOUBLE
56933: EQUAL
56934: IFTRUE 56974
56936: LD_INT 33
56938: DOUBLE
56939: EQUAL
56940: IFTRUE 56974
56942: LD_INT 27
56944: DOUBLE
56945: EQUAL
56946: IFTRUE 56974
56948: LD_INT 26
56950: DOUBLE
56951: EQUAL
56952: IFTRUE 56974
56954: LD_INT 28
56956: DOUBLE
56957: EQUAL
56958: IFTRUE 56974
56960: LD_INT 29
56962: DOUBLE
56963: EQUAL
56964: IFTRUE 56974
56966: LD_INT 30
56968: DOUBLE
56969: EQUAL
56970: IFTRUE 56974
56972: GO 57030
56974: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56975: LD_ADDR_VAR 0 9
56979: PUSH
56980: LD_VAR 0 59
56984: PUSH
56985: LD_VAR 0 60
56989: PUSH
56990: LD_VAR 0 61
56994: PUSH
56995: LD_VAR 0 62
56999: PUSH
57000: LD_VAR 0 63
57004: PUSH
57005: LD_VAR 0 64
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: PUSH
57018: LD_VAR 0 4
57022: PUSH
57023: LD_INT 1
57025: PLUS
57026: ARRAY
57027: ST_TO_ADDR
57028: GO 57031
57030: POP
// temp_list2 = [ ] ;
57031: LD_ADDR_VAR 0 10
57035: PUSH
57036: EMPTY
57037: ST_TO_ADDR
// for i in temp_list do
57038: LD_ADDR_VAR 0 8
57042: PUSH
57043: LD_VAR 0 9
57047: PUSH
57048: FOR_IN
57049: IFFALSE 57101
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57051: LD_ADDR_VAR 0 10
57055: PUSH
57056: LD_VAR 0 10
57060: PUSH
57061: LD_VAR 0 8
57065: PUSH
57066: LD_INT 1
57068: ARRAY
57069: PUSH
57070: LD_VAR 0 2
57074: PLUS
57075: PUSH
57076: LD_VAR 0 8
57080: PUSH
57081: LD_INT 2
57083: ARRAY
57084: PUSH
57085: LD_VAR 0 3
57089: PLUS
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: EMPTY
57096: LIST
57097: ADD
57098: ST_TO_ADDR
57099: GO 57048
57101: POP
57102: POP
// result = temp_list2 ;
57103: LD_ADDR_VAR 0 7
57107: PUSH
57108: LD_VAR 0 10
57112: ST_TO_ADDR
// end ;
57113: LD_VAR 0 7
57117: RET
// export function EnemyInRange ( unit , dist ) ; begin
57118: LD_INT 0
57120: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57121: LD_ADDR_VAR 0 3
57125: PUSH
57126: LD_VAR 0 1
57130: PPUSH
57131: CALL_OW 255
57135: PPUSH
57136: LD_VAR 0 1
57140: PPUSH
57141: CALL_OW 250
57145: PPUSH
57146: LD_VAR 0 1
57150: PPUSH
57151: CALL_OW 251
57155: PPUSH
57156: LD_VAR 0 2
57160: PPUSH
57161: CALL 30513 0 4
57165: PUSH
57166: LD_INT 4
57168: ARRAY
57169: ST_TO_ADDR
// end ;
57170: LD_VAR 0 3
57174: RET
// export function PlayerSeeMe ( unit ) ; begin
57175: LD_INT 0
57177: PPUSH
// result := See ( your_side , unit ) ;
57178: LD_ADDR_VAR 0 2
57182: PUSH
57183: LD_OWVAR 2
57187: PPUSH
57188: LD_VAR 0 1
57192: PPUSH
57193: CALL_OW 292
57197: ST_TO_ADDR
// end ;
57198: LD_VAR 0 2
57202: RET
// export function ReverseDir ( unit ) ; begin
57203: LD_INT 0
57205: PPUSH
// if not unit then
57206: LD_VAR 0 1
57210: NOT
57211: IFFALSE 57215
// exit ;
57213: GO 57238
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57215: LD_ADDR_VAR 0 2
57219: PUSH
57220: LD_VAR 0 1
57224: PPUSH
57225: CALL_OW 254
57229: PUSH
57230: LD_INT 3
57232: PLUS
57233: PUSH
57234: LD_INT 6
57236: MOD
57237: ST_TO_ADDR
// end ;
57238: LD_VAR 0 2
57242: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57243: LD_INT 0
57245: PPUSH
57246: PPUSH
57247: PPUSH
57248: PPUSH
57249: PPUSH
// if not hexes then
57250: LD_VAR 0 2
57254: NOT
57255: IFFALSE 57259
// exit ;
57257: GO 57407
// dist := 9999 ;
57259: LD_ADDR_VAR 0 5
57263: PUSH
57264: LD_INT 9999
57266: ST_TO_ADDR
// for i = 1 to hexes do
57267: LD_ADDR_VAR 0 4
57271: PUSH
57272: DOUBLE
57273: LD_INT 1
57275: DEC
57276: ST_TO_ADDR
57277: LD_VAR 0 2
57281: PUSH
57282: FOR_TO
57283: IFFALSE 57395
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57285: LD_VAR 0 1
57289: PPUSH
57290: LD_VAR 0 2
57294: PUSH
57295: LD_VAR 0 4
57299: ARRAY
57300: PUSH
57301: LD_INT 1
57303: ARRAY
57304: PPUSH
57305: LD_VAR 0 2
57309: PUSH
57310: LD_VAR 0 4
57314: ARRAY
57315: PUSH
57316: LD_INT 2
57318: ARRAY
57319: PPUSH
57320: CALL_OW 297
57324: PUSH
57325: LD_VAR 0 5
57329: LESS
57330: IFFALSE 57393
// begin hex := hexes [ i ] ;
57332: LD_ADDR_VAR 0 7
57336: PUSH
57337: LD_VAR 0 2
57341: PUSH
57342: LD_VAR 0 4
57346: ARRAY
57347: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57348: LD_ADDR_VAR 0 5
57352: PUSH
57353: LD_VAR 0 1
57357: PPUSH
57358: LD_VAR 0 2
57362: PUSH
57363: LD_VAR 0 4
57367: ARRAY
57368: PUSH
57369: LD_INT 1
57371: ARRAY
57372: PPUSH
57373: LD_VAR 0 2
57377: PUSH
57378: LD_VAR 0 4
57382: ARRAY
57383: PUSH
57384: LD_INT 2
57386: ARRAY
57387: PPUSH
57388: CALL_OW 297
57392: ST_TO_ADDR
// end ; end ;
57393: GO 57282
57395: POP
57396: POP
// result := hex ;
57397: LD_ADDR_VAR 0 3
57401: PUSH
57402: LD_VAR 0 7
57406: ST_TO_ADDR
// end ;
57407: LD_VAR 0 3
57411: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57412: LD_INT 0
57414: PPUSH
57415: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57416: LD_VAR 0 1
57420: NOT
57421: PUSH
57422: LD_VAR 0 1
57426: PUSH
57427: LD_INT 21
57429: PUSH
57430: LD_INT 2
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 23
57439: PUSH
57440: LD_INT 2
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PPUSH
57451: CALL_OW 69
57455: IN
57456: NOT
57457: OR
57458: IFFALSE 57462
// exit ;
57460: GO 57509
// for i = 1 to 3 do
57462: LD_ADDR_VAR 0 3
57466: PUSH
57467: DOUBLE
57468: LD_INT 1
57470: DEC
57471: ST_TO_ADDR
57472: LD_INT 3
57474: PUSH
57475: FOR_TO
57476: IFFALSE 57507
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57478: LD_VAR 0 1
57482: PPUSH
57483: CALL_OW 250
57487: PPUSH
57488: LD_VAR 0 1
57492: PPUSH
57493: CALL_OW 251
57497: PPUSH
57498: LD_INT 1
57500: PPUSH
57501: CALL_OW 453
57505: GO 57475
57507: POP
57508: POP
// end ;
57509: LD_VAR 0 2
57513: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57514: LD_INT 0
57516: PPUSH
57517: PPUSH
57518: PPUSH
57519: PPUSH
57520: PPUSH
57521: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57522: LD_VAR 0 1
57526: NOT
57527: PUSH
57528: LD_VAR 0 2
57532: NOT
57533: OR
57534: PUSH
57535: LD_VAR 0 1
57539: PPUSH
57540: CALL_OW 314
57544: OR
57545: IFFALSE 57549
// exit ;
57547: GO 57990
// x := GetX ( enemy_unit ) ;
57549: LD_ADDR_VAR 0 7
57553: PUSH
57554: LD_VAR 0 2
57558: PPUSH
57559: CALL_OW 250
57563: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57564: LD_ADDR_VAR 0 8
57568: PUSH
57569: LD_VAR 0 2
57573: PPUSH
57574: CALL_OW 251
57578: ST_TO_ADDR
// if not x or not y then
57579: LD_VAR 0 7
57583: NOT
57584: PUSH
57585: LD_VAR 0 8
57589: NOT
57590: OR
57591: IFFALSE 57595
// exit ;
57593: GO 57990
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57595: LD_ADDR_VAR 0 6
57599: PUSH
57600: LD_VAR 0 7
57604: PPUSH
57605: LD_INT 0
57607: PPUSH
57608: LD_INT 4
57610: PPUSH
57611: CALL_OW 272
57615: PUSH
57616: LD_VAR 0 8
57620: PPUSH
57621: LD_INT 0
57623: PPUSH
57624: LD_INT 4
57626: PPUSH
57627: CALL_OW 273
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_VAR 0 7
57640: PPUSH
57641: LD_INT 1
57643: PPUSH
57644: LD_INT 4
57646: PPUSH
57647: CALL_OW 272
57651: PUSH
57652: LD_VAR 0 8
57656: PPUSH
57657: LD_INT 1
57659: PPUSH
57660: LD_INT 4
57662: PPUSH
57663: CALL_OW 273
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_VAR 0 7
57676: PPUSH
57677: LD_INT 2
57679: PPUSH
57680: LD_INT 4
57682: PPUSH
57683: CALL_OW 272
57687: PUSH
57688: LD_VAR 0 8
57692: PPUSH
57693: LD_INT 2
57695: PPUSH
57696: LD_INT 4
57698: PPUSH
57699: CALL_OW 273
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_VAR 0 7
57712: PPUSH
57713: LD_INT 3
57715: PPUSH
57716: LD_INT 4
57718: PPUSH
57719: CALL_OW 272
57723: PUSH
57724: LD_VAR 0 8
57728: PPUSH
57729: LD_INT 3
57731: PPUSH
57732: LD_INT 4
57734: PPUSH
57735: CALL_OW 273
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_VAR 0 7
57748: PPUSH
57749: LD_INT 4
57751: PPUSH
57752: LD_INT 4
57754: PPUSH
57755: CALL_OW 272
57759: PUSH
57760: LD_VAR 0 8
57764: PPUSH
57765: LD_INT 4
57767: PPUSH
57768: LD_INT 4
57770: PPUSH
57771: CALL_OW 273
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_VAR 0 7
57784: PPUSH
57785: LD_INT 5
57787: PPUSH
57788: LD_INT 4
57790: PPUSH
57791: CALL_OW 272
57795: PUSH
57796: LD_VAR 0 8
57800: PPUSH
57801: LD_INT 5
57803: PPUSH
57804: LD_INT 4
57806: PPUSH
57807: CALL_OW 273
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: ST_TO_ADDR
// for i = tmp downto 1 do
57824: LD_ADDR_VAR 0 4
57828: PUSH
57829: DOUBLE
57830: LD_VAR 0 6
57834: INC
57835: ST_TO_ADDR
57836: LD_INT 1
57838: PUSH
57839: FOR_DOWNTO
57840: IFFALSE 57941
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57842: LD_VAR 0 6
57846: PUSH
57847: LD_VAR 0 4
57851: ARRAY
57852: PUSH
57853: LD_INT 1
57855: ARRAY
57856: PPUSH
57857: LD_VAR 0 6
57861: PUSH
57862: LD_VAR 0 4
57866: ARRAY
57867: PUSH
57868: LD_INT 2
57870: ARRAY
57871: PPUSH
57872: CALL_OW 488
57876: NOT
57877: PUSH
57878: LD_VAR 0 6
57882: PUSH
57883: LD_VAR 0 4
57887: ARRAY
57888: PUSH
57889: LD_INT 1
57891: ARRAY
57892: PPUSH
57893: LD_VAR 0 6
57897: PUSH
57898: LD_VAR 0 4
57902: ARRAY
57903: PUSH
57904: LD_INT 2
57906: ARRAY
57907: PPUSH
57908: CALL_OW 428
57912: PUSH
57913: LD_INT 0
57915: NONEQUAL
57916: OR
57917: IFFALSE 57939
// tmp := Delete ( tmp , i ) ;
57919: LD_ADDR_VAR 0 6
57923: PUSH
57924: LD_VAR 0 6
57928: PPUSH
57929: LD_VAR 0 4
57933: PPUSH
57934: CALL_OW 3
57938: ST_TO_ADDR
57939: GO 57839
57941: POP
57942: POP
// j := GetClosestHex ( unit , tmp ) ;
57943: LD_ADDR_VAR 0 5
57947: PUSH
57948: LD_VAR 0 1
57952: PPUSH
57953: LD_VAR 0 6
57957: PPUSH
57958: CALL 57243 0 2
57962: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57963: LD_VAR 0 1
57967: PPUSH
57968: LD_VAR 0 5
57972: PUSH
57973: LD_INT 1
57975: ARRAY
57976: PPUSH
57977: LD_VAR 0 5
57981: PUSH
57982: LD_INT 2
57984: ARRAY
57985: PPUSH
57986: CALL_OW 111
// end ;
57990: LD_VAR 0 3
57994: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57995: LD_INT 0
57997: PPUSH
57998: PPUSH
57999: PPUSH
// uc_side = 0 ;
58000: LD_ADDR_OWVAR 20
58004: PUSH
58005: LD_INT 0
58007: ST_TO_ADDR
// uc_nation = 0 ;
58008: LD_ADDR_OWVAR 21
58012: PUSH
58013: LD_INT 0
58015: ST_TO_ADDR
// InitHc_All ( ) ;
58016: CALL_OW 584
// InitVc ;
58020: CALL_OW 20
// if mastodonts then
58024: LD_VAR 0 6
58028: IFFALSE 58095
// for i = 1 to mastodonts do
58030: LD_ADDR_VAR 0 11
58034: PUSH
58035: DOUBLE
58036: LD_INT 1
58038: DEC
58039: ST_TO_ADDR
58040: LD_VAR 0 6
58044: PUSH
58045: FOR_TO
58046: IFFALSE 58093
// begin vc_chassis := 31 ;
58048: LD_ADDR_OWVAR 37
58052: PUSH
58053: LD_INT 31
58055: ST_TO_ADDR
// vc_control := control_rider ;
58056: LD_ADDR_OWVAR 38
58060: PUSH
58061: LD_INT 4
58063: ST_TO_ADDR
// animal := CreateVehicle ;
58064: LD_ADDR_VAR 0 12
58068: PUSH
58069: CALL_OW 45
58073: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58074: LD_VAR 0 12
58078: PPUSH
58079: LD_VAR 0 8
58083: PPUSH
58084: LD_INT 0
58086: PPUSH
58087: CALL 60283 0 3
// end ;
58091: GO 58045
58093: POP
58094: POP
// if horses then
58095: LD_VAR 0 5
58099: IFFALSE 58166
// for i = 1 to horses do
58101: LD_ADDR_VAR 0 11
58105: PUSH
58106: DOUBLE
58107: LD_INT 1
58109: DEC
58110: ST_TO_ADDR
58111: LD_VAR 0 5
58115: PUSH
58116: FOR_TO
58117: IFFALSE 58164
// begin hc_class := 21 ;
58119: LD_ADDR_OWVAR 28
58123: PUSH
58124: LD_INT 21
58126: ST_TO_ADDR
// hc_gallery :=  ;
58127: LD_ADDR_OWVAR 33
58131: PUSH
58132: LD_STRING 
58134: ST_TO_ADDR
// animal := CreateHuman ;
58135: LD_ADDR_VAR 0 12
58139: PUSH
58140: CALL_OW 44
58144: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58145: LD_VAR 0 12
58149: PPUSH
58150: LD_VAR 0 8
58154: PPUSH
58155: LD_INT 0
58157: PPUSH
58158: CALL 60283 0 3
// end ;
58162: GO 58116
58164: POP
58165: POP
// if birds then
58166: LD_VAR 0 1
58170: IFFALSE 58237
// for i = 1 to birds do
58172: LD_ADDR_VAR 0 11
58176: PUSH
58177: DOUBLE
58178: LD_INT 1
58180: DEC
58181: ST_TO_ADDR
58182: LD_VAR 0 1
58186: PUSH
58187: FOR_TO
58188: IFFALSE 58235
// begin hc_class = 18 ;
58190: LD_ADDR_OWVAR 28
58194: PUSH
58195: LD_INT 18
58197: ST_TO_ADDR
// hc_gallery =  ;
58198: LD_ADDR_OWVAR 33
58202: PUSH
58203: LD_STRING 
58205: ST_TO_ADDR
// animal := CreateHuman ;
58206: LD_ADDR_VAR 0 12
58210: PUSH
58211: CALL_OW 44
58215: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58216: LD_VAR 0 12
58220: PPUSH
58221: LD_VAR 0 8
58225: PPUSH
58226: LD_INT 0
58228: PPUSH
58229: CALL 60283 0 3
// end ;
58233: GO 58187
58235: POP
58236: POP
// if tigers then
58237: LD_VAR 0 2
58241: IFFALSE 58325
// for i = 1 to tigers do
58243: LD_ADDR_VAR 0 11
58247: PUSH
58248: DOUBLE
58249: LD_INT 1
58251: DEC
58252: ST_TO_ADDR
58253: LD_VAR 0 2
58257: PUSH
58258: FOR_TO
58259: IFFALSE 58323
// begin hc_class = class_tiger ;
58261: LD_ADDR_OWVAR 28
58265: PUSH
58266: LD_INT 14
58268: ST_TO_ADDR
// hc_gallery =  ;
58269: LD_ADDR_OWVAR 33
58273: PUSH
58274: LD_STRING 
58276: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58277: LD_ADDR_OWVAR 35
58281: PUSH
58282: LD_INT 7
58284: NEG
58285: PPUSH
58286: LD_INT 7
58288: PPUSH
58289: CALL_OW 12
58293: ST_TO_ADDR
// animal := CreateHuman ;
58294: LD_ADDR_VAR 0 12
58298: PUSH
58299: CALL_OW 44
58303: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58304: LD_VAR 0 12
58308: PPUSH
58309: LD_VAR 0 8
58313: PPUSH
58314: LD_INT 0
58316: PPUSH
58317: CALL 60283 0 3
// end ;
58321: GO 58258
58323: POP
58324: POP
// if apemans then
58325: LD_VAR 0 3
58329: IFFALSE 58452
// for i = 1 to apemans do
58331: LD_ADDR_VAR 0 11
58335: PUSH
58336: DOUBLE
58337: LD_INT 1
58339: DEC
58340: ST_TO_ADDR
58341: LD_VAR 0 3
58345: PUSH
58346: FOR_TO
58347: IFFALSE 58450
// begin hc_class = class_apeman ;
58349: LD_ADDR_OWVAR 28
58353: PUSH
58354: LD_INT 12
58356: ST_TO_ADDR
// hc_gallery =  ;
58357: LD_ADDR_OWVAR 33
58361: PUSH
58362: LD_STRING 
58364: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58365: LD_ADDR_OWVAR 35
58369: PUSH
58370: LD_INT 2
58372: NEG
58373: PPUSH
58374: LD_INT 2
58376: PPUSH
58377: CALL_OW 12
58381: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58382: LD_ADDR_OWVAR 31
58386: PUSH
58387: LD_INT 1
58389: PPUSH
58390: LD_INT 3
58392: PPUSH
58393: CALL_OW 12
58397: PUSH
58398: LD_INT 1
58400: PPUSH
58401: LD_INT 3
58403: PPUSH
58404: CALL_OW 12
58408: PUSH
58409: LD_INT 0
58411: PUSH
58412: LD_INT 0
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: ST_TO_ADDR
// animal := CreateHuman ;
58421: LD_ADDR_VAR 0 12
58425: PUSH
58426: CALL_OW 44
58430: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58431: LD_VAR 0 12
58435: PPUSH
58436: LD_VAR 0 8
58440: PPUSH
58441: LD_INT 0
58443: PPUSH
58444: CALL 60283 0 3
// end ;
58448: GO 58346
58450: POP
58451: POP
// if enchidnas then
58452: LD_VAR 0 4
58456: IFFALSE 58523
// for i = 1 to enchidnas do
58458: LD_ADDR_VAR 0 11
58462: PUSH
58463: DOUBLE
58464: LD_INT 1
58466: DEC
58467: ST_TO_ADDR
58468: LD_VAR 0 4
58472: PUSH
58473: FOR_TO
58474: IFFALSE 58521
// begin hc_class = 13 ;
58476: LD_ADDR_OWVAR 28
58480: PUSH
58481: LD_INT 13
58483: ST_TO_ADDR
// hc_gallery =  ;
58484: LD_ADDR_OWVAR 33
58488: PUSH
58489: LD_STRING 
58491: ST_TO_ADDR
// animal := CreateHuman ;
58492: LD_ADDR_VAR 0 12
58496: PUSH
58497: CALL_OW 44
58501: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58502: LD_VAR 0 12
58506: PPUSH
58507: LD_VAR 0 8
58511: PPUSH
58512: LD_INT 0
58514: PPUSH
58515: CALL 60283 0 3
// end ;
58519: GO 58473
58521: POP
58522: POP
// if fishes then
58523: LD_VAR 0 7
58527: IFFALSE 58594
// for i = 1 to fishes do
58529: LD_ADDR_VAR 0 11
58533: PUSH
58534: DOUBLE
58535: LD_INT 1
58537: DEC
58538: ST_TO_ADDR
58539: LD_VAR 0 7
58543: PUSH
58544: FOR_TO
58545: IFFALSE 58592
// begin hc_class = 20 ;
58547: LD_ADDR_OWVAR 28
58551: PUSH
58552: LD_INT 20
58554: ST_TO_ADDR
// hc_gallery =  ;
58555: LD_ADDR_OWVAR 33
58559: PUSH
58560: LD_STRING 
58562: ST_TO_ADDR
// animal := CreateHuman ;
58563: LD_ADDR_VAR 0 12
58567: PUSH
58568: CALL_OW 44
58572: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58573: LD_VAR 0 12
58577: PPUSH
58578: LD_VAR 0 9
58582: PPUSH
58583: LD_INT 0
58585: PPUSH
58586: CALL 60283 0 3
// end ;
58590: GO 58544
58592: POP
58593: POP
// end ;
58594: LD_VAR 0 10
58598: RET
// export function WantHeal ( sci , unit ) ; begin
58599: LD_INT 0
58601: PPUSH
// if GetTaskList ( sci ) > 0 then
58602: LD_VAR 0 1
58606: PPUSH
58607: CALL_OW 437
58611: PUSH
58612: LD_INT 0
58614: GREATER
58615: IFFALSE 58685
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58617: LD_VAR 0 1
58621: PPUSH
58622: CALL_OW 437
58626: PUSH
58627: LD_INT 1
58629: ARRAY
58630: PUSH
58631: LD_INT 1
58633: ARRAY
58634: PUSH
58635: LD_STRING l
58637: EQUAL
58638: PUSH
58639: LD_VAR 0 1
58643: PPUSH
58644: CALL_OW 437
58648: PUSH
58649: LD_INT 1
58651: ARRAY
58652: PUSH
58653: LD_INT 4
58655: ARRAY
58656: PUSH
58657: LD_VAR 0 2
58661: EQUAL
58662: AND
58663: IFFALSE 58675
// result := true else
58665: LD_ADDR_VAR 0 3
58669: PUSH
58670: LD_INT 1
58672: ST_TO_ADDR
58673: GO 58683
// result := false ;
58675: LD_ADDR_VAR 0 3
58679: PUSH
58680: LD_INT 0
58682: ST_TO_ADDR
// end else
58683: GO 58693
// result := false ;
58685: LD_ADDR_VAR 0 3
58689: PUSH
58690: LD_INT 0
58692: ST_TO_ADDR
// end ;
58693: LD_VAR 0 3
58697: RET
// export function HealTarget ( sci ) ; begin
58698: LD_INT 0
58700: PPUSH
// if not sci then
58701: LD_VAR 0 1
58705: NOT
58706: IFFALSE 58710
// exit ;
58708: GO 58775
// result := 0 ;
58710: LD_ADDR_VAR 0 2
58714: PUSH
58715: LD_INT 0
58717: ST_TO_ADDR
// if GetTaskList ( sci ) then
58718: LD_VAR 0 1
58722: PPUSH
58723: CALL_OW 437
58727: IFFALSE 58775
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58729: LD_VAR 0 1
58733: PPUSH
58734: CALL_OW 437
58738: PUSH
58739: LD_INT 1
58741: ARRAY
58742: PUSH
58743: LD_INT 1
58745: ARRAY
58746: PUSH
58747: LD_STRING l
58749: EQUAL
58750: IFFALSE 58775
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58752: LD_ADDR_VAR 0 2
58756: PUSH
58757: LD_VAR 0 1
58761: PPUSH
58762: CALL_OW 437
58766: PUSH
58767: LD_INT 1
58769: ARRAY
58770: PUSH
58771: LD_INT 4
58773: ARRAY
58774: ST_TO_ADDR
// end ;
58775: LD_VAR 0 2
58779: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58780: LD_INT 0
58782: PPUSH
58783: PPUSH
58784: PPUSH
58785: PPUSH
// if not base_units then
58786: LD_VAR 0 1
58790: NOT
58791: IFFALSE 58795
// exit ;
58793: GO 58882
// result := false ;
58795: LD_ADDR_VAR 0 2
58799: PUSH
58800: LD_INT 0
58802: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58803: LD_ADDR_VAR 0 5
58807: PUSH
58808: LD_VAR 0 1
58812: PPUSH
58813: LD_INT 21
58815: PUSH
58816: LD_INT 3
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PPUSH
58823: CALL_OW 72
58827: ST_TO_ADDR
// if not tmp then
58828: LD_VAR 0 5
58832: NOT
58833: IFFALSE 58837
// exit ;
58835: GO 58882
// for i in tmp do
58837: LD_ADDR_VAR 0 3
58841: PUSH
58842: LD_VAR 0 5
58846: PUSH
58847: FOR_IN
58848: IFFALSE 58880
// begin result := EnemyInRange ( i , 22 ) ;
58850: LD_ADDR_VAR 0 2
58854: PUSH
58855: LD_VAR 0 3
58859: PPUSH
58860: LD_INT 22
58862: PPUSH
58863: CALL 57118 0 2
58867: ST_TO_ADDR
// if result then
58868: LD_VAR 0 2
58872: IFFALSE 58878
// exit ;
58874: POP
58875: POP
58876: GO 58882
// end ;
58878: GO 58847
58880: POP
58881: POP
// end ;
58882: LD_VAR 0 2
58886: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
58887: LD_INT 0
58889: PPUSH
58890: PPUSH
// if not units then
58891: LD_VAR 0 1
58895: NOT
58896: IFFALSE 58900
// exit ;
58898: GO 58970
// result := [ ] ;
58900: LD_ADDR_VAR 0 3
58904: PUSH
58905: EMPTY
58906: ST_TO_ADDR
// for i in units do
58907: LD_ADDR_VAR 0 4
58911: PUSH
58912: LD_VAR 0 1
58916: PUSH
58917: FOR_IN
58918: IFFALSE 58968
// if GetTag ( i ) = tag then
58920: LD_VAR 0 4
58924: PPUSH
58925: CALL_OW 110
58929: PUSH
58930: LD_VAR 0 2
58934: EQUAL
58935: IFFALSE 58966
// result := Insert ( result , result + 1 , i ) ;
58937: LD_ADDR_VAR 0 3
58941: PUSH
58942: LD_VAR 0 3
58946: PPUSH
58947: LD_VAR 0 3
58951: PUSH
58952: LD_INT 1
58954: PLUS
58955: PPUSH
58956: LD_VAR 0 4
58960: PPUSH
58961: CALL_OW 2
58965: ST_TO_ADDR
58966: GO 58917
58968: POP
58969: POP
// end ;
58970: LD_VAR 0 3
58974: RET
// export function IsDriver ( un ) ; begin
58975: LD_INT 0
58977: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58978: LD_ADDR_VAR 0 2
58982: PUSH
58983: LD_VAR 0 1
58987: PUSH
58988: LD_INT 55
58990: PUSH
58991: EMPTY
58992: LIST
58993: PPUSH
58994: CALL_OW 69
58998: IN
58999: ST_TO_ADDR
// end ;
59000: LD_VAR 0 2
59004: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59005: LD_INT 0
59007: PPUSH
59008: PPUSH
// list := [ ] ;
59009: LD_ADDR_VAR 0 5
59013: PUSH
59014: EMPTY
59015: ST_TO_ADDR
// case d of 0 :
59016: LD_VAR 0 3
59020: PUSH
59021: LD_INT 0
59023: DOUBLE
59024: EQUAL
59025: IFTRUE 59029
59027: GO 59162
59029: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59030: LD_ADDR_VAR 0 5
59034: PUSH
59035: LD_VAR 0 1
59039: PUSH
59040: LD_INT 4
59042: MINUS
59043: PUSH
59044: LD_VAR 0 2
59048: PUSH
59049: LD_INT 4
59051: MINUS
59052: PUSH
59053: LD_INT 2
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: LIST
59060: PUSH
59061: LD_VAR 0 1
59065: PUSH
59066: LD_INT 3
59068: MINUS
59069: PUSH
59070: LD_VAR 0 2
59074: PUSH
59075: LD_INT 1
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: LIST
59082: PUSH
59083: LD_VAR 0 1
59087: PUSH
59088: LD_INT 4
59090: PLUS
59091: PUSH
59092: LD_VAR 0 2
59096: PUSH
59097: LD_INT 4
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: LIST
59104: PUSH
59105: LD_VAR 0 1
59109: PUSH
59110: LD_INT 3
59112: PLUS
59113: PUSH
59114: LD_VAR 0 2
59118: PUSH
59119: LD_INT 3
59121: PLUS
59122: PUSH
59123: LD_INT 5
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: LIST
59130: PUSH
59131: LD_VAR 0 1
59135: PUSH
59136: LD_VAR 0 2
59140: PUSH
59141: LD_INT 4
59143: PLUS
59144: PUSH
59145: LD_INT 0
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: LIST
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: ST_TO_ADDR
// end ; 1 :
59160: GO 59860
59162: LD_INT 1
59164: DOUBLE
59165: EQUAL
59166: IFTRUE 59170
59168: GO 59303
59170: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59171: LD_ADDR_VAR 0 5
59175: PUSH
59176: LD_VAR 0 1
59180: PUSH
59181: LD_VAR 0 2
59185: PUSH
59186: LD_INT 4
59188: MINUS
59189: PUSH
59190: LD_INT 3
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: LIST
59197: PUSH
59198: LD_VAR 0 1
59202: PUSH
59203: LD_INT 3
59205: MINUS
59206: PUSH
59207: LD_VAR 0 2
59211: PUSH
59212: LD_INT 3
59214: MINUS
59215: PUSH
59216: LD_INT 2
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: LIST
59223: PUSH
59224: LD_VAR 0 1
59228: PUSH
59229: LD_INT 4
59231: MINUS
59232: PUSH
59233: LD_VAR 0 2
59237: PUSH
59238: LD_INT 1
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: LIST
59245: PUSH
59246: LD_VAR 0 1
59250: PUSH
59251: LD_VAR 0 2
59255: PUSH
59256: LD_INT 3
59258: PLUS
59259: PUSH
59260: LD_INT 0
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: LIST
59267: PUSH
59268: LD_VAR 0 1
59272: PUSH
59273: LD_INT 4
59275: PLUS
59276: PUSH
59277: LD_VAR 0 2
59281: PUSH
59282: LD_INT 4
59284: PLUS
59285: PUSH
59286: LD_INT 5
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: LIST
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: ST_TO_ADDR
// end ; 2 :
59301: GO 59860
59303: LD_INT 2
59305: DOUBLE
59306: EQUAL
59307: IFTRUE 59311
59309: GO 59440
59311: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59312: LD_ADDR_VAR 0 5
59316: PUSH
59317: LD_VAR 0 1
59321: PUSH
59322: LD_VAR 0 2
59326: PUSH
59327: LD_INT 3
59329: MINUS
59330: PUSH
59331: LD_INT 3
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: LIST
59338: PUSH
59339: LD_VAR 0 1
59343: PUSH
59344: LD_INT 4
59346: PLUS
59347: PUSH
59348: LD_VAR 0 2
59352: PUSH
59353: LD_INT 4
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: LIST
59360: PUSH
59361: LD_VAR 0 1
59365: PUSH
59366: LD_VAR 0 2
59370: PUSH
59371: LD_INT 4
59373: PLUS
59374: PUSH
59375: LD_INT 0
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: LIST
59382: PUSH
59383: LD_VAR 0 1
59387: PUSH
59388: LD_INT 3
59390: MINUS
59391: PUSH
59392: LD_VAR 0 2
59396: PUSH
59397: LD_INT 1
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: LIST
59404: PUSH
59405: LD_VAR 0 1
59409: PUSH
59410: LD_INT 4
59412: MINUS
59413: PUSH
59414: LD_VAR 0 2
59418: PUSH
59419: LD_INT 4
59421: MINUS
59422: PUSH
59423: LD_INT 2
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: LIST
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: ST_TO_ADDR
// end ; 3 :
59438: GO 59860
59440: LD_INT 3
59442: DOUBLE
59443: EQUAL
59444: IFTRUE 59448
59446: GO 59581
59448: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59449: LD_ADDR_VAR 0 5
59453: PUSH
59454: LD_VAR 0 1
59458: PUSH
59459: LD_INT 3
59461: PLUS
59462: PUSH
59463: LD_VAR 0 2
59467: PUSH
59468: LD_INT 4
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: LIST
59475: PUSH
59476: LD_VAR 0 1
59480: PUSH
59481: LD_INT 4
59483: PLUS
59484: PUSH
59485: LD_VAR 0 2
59489: PUSH
59490: LD_INT 4
59492: PLUS
59493: PUSH
59494: LD_INT 5
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: LIST
59501: PUSH
59502: LD_VAR 0 1
59506: PUSH
59507: LD_INT 4
59509: MINUS
59510: PUSH
59511: LD_VAR 0 2
59515: PUSH
59516: LD_INT 1
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: LIST
59523: PUSH
59524: LD_VAR 0 1
59528: PUSH
59529: LD_VAR 0 2
59533: PUSH
59534: LD_INT 4
59536: MINUS
59537: PUSH
59538: LD_INT 3
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: LIST
59545: PUSH
59546: LD_VAR 0 1
59550: PUSH
59551: LD_INT 3
59553: MINUS
59554: PUSH
59555: LD_VAR 0 2
59559: PUSH
59560: LD_INT 3
59562: MINUS
59563: PUSH
59564: LD_INT 2
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: LIST
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: ST_TO_ADDR
// end ; 4 :
59579: GO 59860
59581: LD_INT 4
59583: DOUBLE
59584: EQUAL
59585: IFTRUE 59589
59587: GO 59722
59589: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59590: LD_ADDR_VAR 0 5
59594: PUSH
59595: LD_VAR 0 1
59599: PUSH
59600: LD_VAR 0 2
59604: PUSH
59605: LD_INT 4
59607: PLUS
59608: PUSH
59609: LD_INT 0
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: LIST
59616: PUSH
59617: LD_VAR 0 1
59621: PUSH
59622: LD_INT 3
59624: PLUS
59625: PUSH
59626: LD_VAR 0 2
59630: PUSH
59631: LD_INT 3
59633: PLUS
59634: PUSH
59635: LD_INT 5
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: LIST
59642: PUSH
59643: LD_VAR 0 1
59647: PUSH
59648: LD_INT 4
59650: PLUS
59651: PUSH
59652: LD_VAR 0 2
59656: PUSH
59657: LD_INT 4
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: LIST
59664: PUSH
59665: LD_VAR 0 1
59669: PUSH
59670: LD_VAR 0 2
59674: PUSH
59675: LD_INT 3
59677: MINUS
59678: PUSH
59679: LD_INT 3
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: LIST
59686: PUSH
59687: LD_VAR 0 1
59691: PUSH
59692: LD_INT 4
59694: MINUS
59695: PUSH
59696: LD_VAR 0 2
59700: PUSH
59701: LD_INT 4
59703: MINUS
59704: PUSH
59705: LD_INT 2
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: LIST
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: ST_TO_ADDR
// end ; 5 :
59720: GO 59860
59722: LD_INT 5
59724: DOUBLE
59725: EQUAL
59726: IFTRUE 59730
59728: GO 59859
59730: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59731: LD_ADDR_VAR 0 5
59735: PUSH
59736: LD_VAR 0 1
59740: PUSH
59741: LD_INT 4
59743: MINUS
59744: PUSH
59745: LD_VAR 0 2
59749: PUSH
59750: LD_INT 1
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: LIST
59757: PUSH
59758: LD_VAR 0 1
59762: PUSH
59763: LD_VAR 0 2
59767: PUSH
59768: LD_INT 4
59770: MINUS
59771: PUSH
59772: LD_INT 3
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: LIST
59779: PUSH
59780: LD_VAR 0 1
59784: PUSH
59785: LD_INT 4
59787: PLUS
59788: PUSH
59789: LD_VAR 0 2
59793: PUSH
59794: LD_INT 4
59796: PLUS
59797: PUSH
59798: LD_INT 5
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: LIST
59805: PUSH
59806: LD_VAR 0 1
59810: PUSH
59811: LD_INT 3
59813: PLUS
59814: PUSH
59815: LD_VAR 0 2
59819: PUSH
59820: LD_INT 4
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: LIST
59827: PUSH
59828: LD_VAR 0 1
59832: PUSH
59833: LD_VAR 0 2
59837: PUSH
59838: LD_INT 3
59840: PLUS
59841: PUSH
59842: LD_INT 0
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: LIST
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: ST_TO_ADDR
// end ; end ;
59857: GO 59860
59859: POP
// result := list ;
59860: LD_ADDR_VAR 0 4
59864: PUSH
59865: LD_VAR 0 5
59869: ST_TO_ADDR
// end ;
59870: LD_VAR 0 4
59874: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59875: LD_INT 0
59877: PPUSH
59878: PPUSH
59879: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59880: LD_VAR 0 1
59884: NOT
59885: PUSH
59886: LD_VAR 0 2
59890: PUSH
59891: LD_INT 1
59893: PUSH
59894: LD_INT 2
59896: PUSH
59897: LD_INT 3
59899: PUSH
59900: LD_INT 4
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: IN
59909: NOT
59910: OR
59911: IFFALSE 59915
// exit ;
59913: GO 60007
// tmp := [ ] ;
59915: LD_ADDR_VAR 0 5
59919: PUSH
59920: EMPTY
59921: ST_TO_ADDR
// for i in units do
59922: LD_ADDR_VAR 0 4
59926: PUSH
59927: LD_VAR 0 1
59931: PUSH
59932: FOR_IN
59933: IFFALSE 59976
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59935: LD_ADDR_VAR 0 5
59939: PUSH
59940: LD_VAR 0 5
59944: PPUSH
59945: LD_VAR 0 5
59949: PUSH
59950: LD_INT 1
59952: PLUS
59953: PPUSH
59954: LD_VAR 0 4
59958: PPUSH
59959: LD_VAR 0 2
59963: PPUSH
59964: CALL_OW 259
59968: PPUSH
59969: CALL_OW 2
59973: ST_TO_ADDR
59974: GO 59932
59976: POP
59977: POP
// if not tmp then
59978: LD_VAR 0 5
59982: NOT
59983: IFFALSE 59987
// exit ;
59985: GO 60007
// result := SortListByListDesc ( units , tmp ) ;
59987: LD_ADDR_VAR 0 3
59991: PUSH
59992: LD_VAR 0 1
59996: PPUSH
59997: LD_VAR 0 5
60001: PPUSH
60002: CALL_OW 77
60006: ST_TO_ADDR
// end ;
60007: LD_VAR 0 3
60011: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60012: LD_INT 0
60014: PPUSH
60015: PPUSH
60016: PPUSH
// result := false ;
60017: LD_ADDR_VAR 0 3
60021: PUSH
60022: LD_INT 0
60024: ST_TO_ADDR
// x := GetX ( building ) ;
60025: LD_ADDR_VAR 0 4
60029: PUSH
60030: LD_VAR 0 2
60034: PPUSH
60035: CALL_OW 250
60039: ST_TO_ADDR
// y := GetY ( building ) ;
60040: LD_ADDR_VAR 0 5
60044: PUSH
60045: LD_VAR 0 2
60049: PPUSH
60050: CALL_OW 251
60054: ST_TO_ADDR
// if not building or not x or not y then
60055: LD_VAR 0 2
60059: NOT
60060: PUSH
60061: LD_VAR 0 4
60065: NOT
60066: OR
60067: PUSH
60068: LD_VAR 0 5
60072: NOT
60073: OR
60074: IFFALSE 60078
// exit ;
60076: GO 60170
// if GetTaskList ( unit ) then
60078: LD_VAR 0 1
60082: PPUSH
60083: CALL_OW 437
60087: IFFALSE 60170
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60089: LD_STRING e
60091: PUSH
60092: LD_VAR 0 1
60096: PPUSH
60097: CALL_OW 437
60101: PUSH
60102: LD_INT 1
60104: ARRAY
60105: PUSH
60106: LD_INT 1
60108: ARRAY
60109: EQUAL
60110: PUSH
60111: LD_VAR 0 4
60115: PUSH
60116: LD_VAR 0 1
60120: PPUSH
60121: CALL_OW 437
60125: PUSH
60126: LD_INT 1
60128: ARRAY
60129: PUSH
60130: LD_INT 2
60132: ARRAY
60133: EQUAL
60134: AND
60135: PUSH
60136: LD_VAR 0 5
60140: PUSH
60141: LD_VAR 0 1
60145: PPUSH
60146: CALL_OW 437
60150: PUSH
60151: LD_INT 1
60153: ARRAY
60154: PUSH
60155: LD_INT 3
60157: ARRAY
60158: EQUAL
60159: AND
60160: IFFALSE 60170
// result := true end ;
60162: LD_ADDR_VAR 0 3
60166: PUSH
60167: LD_INT 1
60169: ST_TO_ADDR
// end ;
60170: LD_VAR 0 3
60174: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60175: LD_INT 0
60177: PPUSH
// result := false ;
60178: LD_ADDR_VAR 0 4
60182: PUSH
60183: LD_INT 0
60185: ST_TO_ADDR
// if GetTaskList ( unit ) then
60186: LD_VAR 0 1
60190: PPUSH
60191: CALL_OW 437
60195: IFFALSE 60278
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60197: LD_STRING M
60199: PUSH
60200: LD_VAR 0 1
60204: PPUSH
60205: CALL_OW 437
60209: PUSH
60210: LD_INT 1
60212: ARRAY
60213: PUSH
60214: LD_INT 1
60216: ARRAY
60217: EQUAL
60218: PUSH
60219: LD_VAR 0 2
60223: PUSH
60224: LD_VAR 0 1
60228: PPUSH
60229: CALL_OW 437
60233: PUSH
60234: LD_INT 1
60236: ARRAY
60237: PUSH
60238: LD_INT 2
60240: ARRAY
60241: EQUAL
60242: AND
60243: PUSH
60244: LD_VAR 0 3
60248: PUSH
60249: LD_VAR 0 1
60253: PPUSH
60254: CALL_OW 437
60258: PUSH
60259: LD_INT 1
60261: ARRAY
60262: PUSH
60263: LD_INT 3
60265: ARRAY
60266: EQUAL
60267: AND
60268: IFFALSE 60278
// result := true ;
60270: LD_ADDR_VAR 0 4
60274: PUSH
60275: LD_INT 1
60277: ST_TO_ADDR
// end ; end ;
60278: LD_VAR 0 4
60282: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60283: LD_INT 0
60285: PPUSH
60286: PPUSH
60287: PPUSH
60288: PPUSH
// if not unit or not area then
60289: LD_VAR 0 1
60293: NOT
60294: PUSH
60295: LD_VAR 0 2
60299: NOT
60300: OR
60301: IFFALSE 60305
// exit ;
60303: GO 60469
// tmp := AreaToList ( area , i ) ;
60305: LD_ADDR_VAR 0 6
60309: PUSH
60310: LD_VAR 0 2
60314: PPUSH
60315: LD_VAR 0 5
60319: PPUSH
60320: CALL_OW 517
60324: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60325: LD_ADDR_VAR 0 5
60329: PUSH
60330: DOUBLE
60331: LD_INT 1
60333: DEC
60334: ST_TO_ADDR
60335: LD_VAR 0 6
60339: PUSH
60340: LD_INT 1
60342: ARRAY
60343: PUSH
60344: FOR_TO
60345: IFFALSE 60467
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60347: LD_ADDR_VAR 0 7
60351: PUSH
60352: LD_VAR 0 6
60356: PUSH
60357: LD_INT 1
60359: ARRAY
60360: PUSH
60361: LD_VAR 0 5
60365: ARRAY
60366: PUSH
60367: LD_VAR 0 6
60371: PUSH
60372: LD_INT 2
60374: ARRAY
60375: PUSH
60376: LD_VAR 0 5
60380: ARRAY
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60386: LD_VAR 0 7
60390: PUSH
60391: LD_INT 1
60393: ARRAY
60394: PPUSH
60395: LD_VAR 0 7
60399: PUSH
60400: LD_INT 2
60402: ARRAY
60403: PPUSH
60404: CALL_OW 428
60408: PUSH
60409: LD_INT 0
60411: EQUAL
60412: IFFALSE 60465
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60414: LD_VAR 0 1
60418: PPUSH
60419: LD_VAR 0 7
60423: PUSH
60424: LD_INT 1
60426: ARRAY
60427: PPUSH
60428: LD_VAR 0 7
60432: PUSH
60433: LD_INT 2
60435: ARRAY
60436: PPUSH
60437: LD_VAR 0 3
60441: PPUSH
60442: CALL_OW 48
// result := IsPlaced ( unit ) ;
60446: LD_ADDR_VAR 0 4
60450: PUSH
60451: LD_VAR 0 1
60455: PPUSH
60456: CALL_OW 305
60460: ST_TO_ADDR
// exit ;
60461: POP
60462: POP
60463: GO 60469
// end ; end ;
60465: GO 60344
60467: POP
60468: POP
// end ;
60469: LD_VAR 0 4
60473: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60474: LD_INT 0
60476: PPUSH
60477: PPUSH
60478: PPUSH
// if not side or side > 8 then
60479: LD_VAR 0 1
60483: NOT
60484: PUSH
60485: LD_VAR 0 1
60489: PUSH
60490: LD_INT 8
60492: GREATER
60493: OR
60494: IFFALSE 60498
// exit ;
60496: GO 60685
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60498: LD_ADDR_VAR 0 4
60502: PUSH
60503: LD_INT 22
60505: PUSH
60506: LD_VAR 0 1
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 21
60517: PUSH
60518: LD_INT 3
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PPUSH
60529: CALL_OW 69
60533: ST_TO_ADDR
// if not tmp then
60534: LD_VAR 0 4
60538: NOT
60539: IFFALSE 60543
// exit ;
60541: GO 60685
// enable_addtolog := true ;
60543: LD_ADDR_OWVAR 81
60547: PUSH
60548: LD_INT 1
60550: ST_TO_ADDR
// AddToLog ( [ ) ;
60551: LD_STRING [
60553: PPUSH
60554: CALL_OW 561
// for i in tmp do
60558: LD_ADDR_VAR 0 3
60562: PUSH
60563: LD_VAR 0 4
60567: PUSH
60568: FOR_IN
60569: IFFALSE 60676
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60571: LD_STRING [
60573: PUSH
60574: LD_VAR 0 3
60578: PPUSH
60579: CALL_OW 266
60583: STR
60584: PUSH
60585: LD_STRING , 
60587: STR
60588: PUSH
60589: LD_VAR 0 3
60593: PPUSH
60594: CALL_OW 250
60598: STR
60599: PUSH
60600: LD_STRING , 
60602: STR
60603: PUSH
60604: LD_VAR 0 3
60608: PPUSH
60609: CALL_OW 251
60613: STR
60614: PUSH
60615: LD_STRING , 
60617: STR
60618: PUSH
60619: LD_VAR 0 3
60623: PPUSH
60624: CALL_OW 254
60628: STR
60629: PUSH
60630: LD_STRING , 
60632: STR
60633: PUSH
60634: LD_VAR 0 3
60638: PPUSH
60639: LD_INT 1
60641: PPUSH
60642: CALL_OW 268
60646: STR
60647: PUSH
60648: LD_STRING , 
60650: STR
60651: PUSH
60652: LD_VAR 0 3
60656: PPUSH
60657: LD_INT 2
60659: PPUSH
60660: CALL_OW 268
60664: STR
60665: PUSH
60666: LD_STRING ],
60668: STR
60669: PPUSH
60670: CALL_OW 561
// end ;
60674: GO 60568
60676: POP
60677: POP
// AddToLog ( ]; ) ;
60678: LD_STRING ];
60680: PPUSH
60681: CALL_OW 561
// end ;
60685: LD_VAR 0 2
60689: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60690: LD_INT 0
60692: PPUSH
60693: PPUSH
60694: PPUSH
60695: PPUSH
60696: PPUSH
// if not area or not rate or not max then
60697: LD_VAR 0 1
60701: NOT
60702: PUSH
60703: LD_VAR 0 2
60707: NOT
60708: OR
60709: PUSH
60710: LD_VAR 0 4
60714: NOT
60715: OR
60716: IFFALSE 60720
// exit ;
60718: GO 60912
// while 1 do
60720: LD_INT 1
60722: IFFALSE 60912
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60724: LD_ADDR_VAR 0 9
60728: PUSH
60729: LD_VAR 0 1
60733: PPUSH
60734: LD_INT 1
60736: PPUSH
60737: CALL_OW 287
60741: PUSH
60742: LD_INT 10
60744: MUL
60745: ST_TO_ADDR
// r := rate / 10 ;
60746: LD_ADDR_VAR 0 7
60750: PUSH
60751: LD_VAR 0 2
60755: PUSH
60756: LD_INT 10
60758: DIVREAL
60759: ST_TO_ADDR
// time := 1 1$00 ;
60760: LD_ADDR_VAR 0 8
60764: PUSH
60765: LD_INT 2100
60767: ST_TO_ADDR
// if amount < min then
60768: LD_VAR 0 9
60772: PUSH
60773: LD_VAR 0 3
60777: LESS
60778: IFFALSE 60796
// r := r * 2 else
60780: LD_ADDR_VAR 0 7
60784: PUSH
60785: LD_VAR 0 7
60789: PUSH
60790: LD_INT 2
60792: MUL
60793: ST_TO_ADDR
60794: GO 60822
// if amount > max then
60796: LD_VAR 0 9
60800: PUSH
60801: LD_VAR 0 4
60805: GREATER
60806: IFFALSE 60822
// r := r / 2 ;
60808: LD_ADDR_VAR 0 7
60812: PUSH
60813: LD_VAR 0 7
60817: PUSH
60818: LD_INT 2
60820: DIVREAL
60821: ST_TO_ADDR
// time := time / r ;
60822: LD_ADDR_VAR 0 8
60826: PUSH
60827: LD_VAR 0 8
60831: PUSH
60832: LD_VAR 0 7
60836: DIVREAL
60837: ST_TO_ADDR
// if time < 0 then
60838: LD_VAR 0 8
60842: PUSH
60843: LD_INT 0
60845: LESS
60846: IFFALSE 60863
// time := time * - 1 ;
60848: LD_ADDR_VAR 0 8
60852: PUSH
60853: LD_VAR 0 8
60857: PUSH
60858: LD_INT 1
60860: NEG
60861: MUL
60862: ST_TO_ADDR
// wait ( time ) ;
60863: LD_VAR 0 8
60867: PPUSH
60868: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
60872: LD_INT 35
60874: PPUSH
60875: LD_INT 875
60877: PPUSH
60878: CALL_OW 12
60882: PPUSH
60883: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60887: LD_INT 1
60889: PPUSH
60890: LD_INT 5
60892: PPUSH
60893: CALL_OW 12
60897: PPUSH
60898: LD_VAR 0 1
60902: PPUSH
60903: LD_INT 1
60905: PPUSH
60906: CALL_OW 55
// end ;
60910: GO 60720
// end ;
60912: LD_VAR 0 5
60916: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60917: LD_INT 0
60919: PPUSH
60920: PPUSH
60921: PPUSH
60922: PPUSH
60923: PPUSH
60924: PPUSH
60925: PPUSH
60926: PPUSH
// if not turrets or not factories then
60927: LD_VAR 0 1
60931: NOT
60932: PUSH
60933: LD_VAR 0 2
60937: NOT
60938: OR
60939: IFFALSE 60943
// exit ;
60941: GO 61250
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60943: LD_ADDR_VAR 0 10
60947: PUSH
60948: LD_INT 5
60950: PUSH
60951: LD_INT 6
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 2
60960: PUSH
60961: LD_INT 4
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 3
60970: PUSH
60971: LD_INT 5
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 24
60985: PUSH
60986: LD_INT 25
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 23
60995: PUSH
60996: LD_INT 27
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 42
61009: PUSH
61010: LD_INT 43
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 44
61019: PUSH
61020: LD_INT 46
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 45
61029: PUSH
61030: LD_INT 47
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: LIST
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: LIST
61046: ST_TO_ADDR
// result := [ ] ;
61047: LD_ADDR_VAR 0 3
61051: PUSH
61052: EMPTY
61053: ST_TO_ADDR
// for i in turrets do
61054: LD_ADDR_VAR 0 4
61058: PUSH
61059: LD_VAR 0 1
61063: PUSH
61064: FOR_IN
61065: IFFALSE 61248
// begin nat := GetNation ( i ) ;
61067: LD_ADDR_VAR 0 7
61071: PUSH
61072: LD_VAR 0 4
61076: PPUSH
61077: CALL_OW 248
61081: ST_TO_ADDR
// weapon := 0 ;
61082: LD_ADDR_VAR 0 8
61086: PUSH
61087: LD_INT 0
61089: ST_TO_ADDR
// if not nat then
61090: LD_VAR 0 7
61094: NOT
61095: IFFALSE 61099
// continue ;
61097: GO 61064
// for j in list [ nat ] do
61099: LD_ADDR_VAR 0 5
61103: PUSH
61104: LD_VAR 0 10
61108: PUSH
61109: LD_VAR 0 7
61113: ARRAY
61114: PUSH
61115: FOR_IN
61116: IFFALSE 61157
// if GetBWeapon ( i ) = j [ 1 ] then
61118: LD_VAR 0 4
61122: PPUSH
61123: CALL_OW 269
61127: PUSH
61128: LD_VAR 0 5
61132: PUSH
61133: LD_INT 1
61135: ARRAY
61136: EQUAL
61137: IFFALSE 61155
// begin weapon := j [ 2 ] ;
61139: LD_ADDR_VAR 0 8
61143: PUSH
61144: LD_VAR 0 5
61148: PUSH
61149: LD_INT 2
61151: ARRAY
61152: ST_TO_ADDR
// break ;
61153: GO 61157
// end ;
61155: GO 61115
61157: POP
61158: POP
// if not weapon then
61159: LD_VAR 0 8
61163: NOT
61164: IFFALSE 61168
// continue ;
61166: GO 61064
// for k in factories do
61168: LD_ADDR_VAR 0 6
61172: PUSH
61173: LD_VAR 0 2
61177: PUSH
61178: FOR_IN
61179: IFFALSE 61244
// begin weapons := AvailableWeaponList ( k ) ;
61181: LD_ADDR_VAR 0 9
61185: PUSH
61186: LD_VAR 0 6
61190: PPUSH
61191: CALL_OW 478
61195: ST_TO_ADDR
// if not weapons then
61196: LD_VAR 0 9
61200: NOT
61201: IFFALSE 61205
// continue ;
61203: GO 61178
// if weapon in weapons then
61205: LD_VAR 0 8
61209: PUSH
61210: LD_VAR 0 9
61214: IN
61215: IFFALSE 61242
// begin result := [ i , weapon ] ;
61217: LD_ADDR_VAR 0 3
61221: PUSH
61222: LD_VAR 0 4
61226: PUSH
61227: LD_VAR 0 8
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: ST_TO_ADDR
// exit ;
61236: POP
61237: POP
61238: POP
61239: POP
61240: GO 61250
// end ; end ;
61242: GO 61178
61244: POP
61245: POP
// end ;
61246: GO 61064
61248: POP
61249: POP
// end ;
61250: LD_VAR 0 3
61254: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61255: LD_INT 0
61257: PPUSH
// if not side or side > 8 then
61258: LD_VAR 0 3
61262: NOT
61263: PUSH
61264: LD_VAR 0 3
61268: PUSH
61269: LD_INT 8
61271: GREATER
61272: OR
61273: IFFALSE 61277
// exit ;
61275: GO 61336
// if not range then
61277: LD_VAR 0 4
61281: NOT
61282: IFFALSE 61293
// range := - 12 ;
61284: LD_ADDR_VAR 0 4
61288: PUSH
61289: LD_INT 12
61291: NEG
61292: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61293: LD_VAR 0 1
61297: PPUSH
61298: LD_VAR 0 2
61302: PPUSH
61303: LD_VAR 0 3
61307: PPUSH
61308: LD_VAR 0 4
61312: PPUSH
61313: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61317: LD_VAR 0 1
61321: PPUSH
61322: LD_VAR 0 2
61326: PPUSH
61327: LD_VAR 0 3
61331: PPUSH
61332: CALL_OW 331
// end ;
61336: LD_VAR 0 5
61340: RET
// export function Video ( mode ) ; begin
61341: LD_INT 0
61343: PPUSH
// ingame_video = mode ;
61344: LD_ADDR_OWVAR 52
61348: PUSH
61349: LD_VAR 0 1
61353: ST_TO_ADDR
// interface_hidden = mode ;
61354: LD_ADDR_OWVAR 54
61358: PUSH
61359: LD_VAR 0 1
61363: ST_TO_ADDR
// end ;
61364: LD_VAR 0 2
61368: RET
// export function Join ( array , element ) ; begin
61369: LD_INT 0
61371: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61372: LD_ADDR_VAR 0 3
61376: PUSH
61377: LD_VAR 0 1
61381: PPUSH
61382: LD_VAR 0 1
61386: PUSH
61387: LD_INT 1
61389: PLUS
61390: PPUSH
61391: LD_VAR 0 2
61395: PPUSH
61396: CALL_OW 1
61400: ST_TO_ADDR
// end ;
61401: LD_VAR 0 3
61405: RET
// export function JoinUnion ( array , element ) ; begin
61406: LD_INT 0
61408: PPUSH
// result := array union element ;
61409: LD_ADDR_VAR 0 3
61413: PUSH
61414: LD_VAR 0 1
61418: PUSH
61419: LD_VAR 0 2
61423: UNION
61424: ST_TO_ADDR
// end ;
61425: LD_VAR 0 3
61429: RET
// export function GetBehemoths ( side ) ; begin
61430: LD_INT 0
61432: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61433: LD_ADDR_VAR 0 2
61437: PUSH
61438: LD_INT 22
61440: PUSH
61441: LD_VAR 0 1
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 31
61452: PUSH
61453: LD_INT 25
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PPUSH
61464: CALL_OW 69
61468: ST_TO_ADDR
// end ;
61469: LD_VAR 0 2
61473: RET
// export function Shuffle ( array ) ; var i , index ; begin
61474: LD_INT 0
61476: PPUSH
61477: PPUSH
61478: PPUSH
// result := [ ] ;
61479: LD_ADDR_VAR 0 2
61483: PUSH
61484: EMPTY
61485: ST_TO_ADDR
// if not array then
61486: LD_VAR 0 1
61490: NOT
61491: IFFALSE 61495
// exit ;
61493: GO 61594
// Randomize ;
61495: CALL_OW 10
// for i = array downto 1 do
61499: LD_ADDR_VAR 0 3
61503: PUSH
61504: DOUBLE
61505: LD_VAR 0 1
61509: INC
61510: ST_TO_ADDR
61511: LD_INT 1
61513: PUSH
61514: FOR_DOWNTO
61515: IFFALSE 61592
// begin index := rand ( 1 , array ) ;
61517: LD_ADDR_VAR 0 4
61521: PUSH
61522: LD_INT 1
61524: PPUSH
61525: LD_VAR 0 1
61529: PPUSH
61530: CALL_OW 12
61534: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61535: LD_ADDR_VAR 0 2
61539: PUSH
61540: LD_VAR 0 2
61544: PPUSH
61545: LD_VAR 0 2
61549: PUSH
61550: LD_INT 1
61552: PLUS
61553: PPUSH
61554: LD_VAR 0 1
61558: PUSH
61559: LD_VAR 0 4
61563: ARRAY
61564: PPUSH
61565: CALL_OW 2
61569: ST_TO_ADDR
// array := Delete ( array , index ) ;
61570: LD_ADDR_VAR 0 1
61574: PUSH
61575: LD_VAR 0 1
61579: PPUSH
61580: LD_VAR 0 4
61584: PPUSH
61585: CALL_OW 3
61589: ST_TO_ADDR
// end ;
61590: GO 61514
61592: POP
61593: POP
// end ;
61594: LD_VAR 0 2
61598: RET
// export function GetBaseMaterials ( base ) ; begin
61599: LD_INT 0
61601: PPUSH
// result := [ 0 , 0 , 0 ] ;
61602: LD_ADDR_VAR 0 2
61606: PUSH
61607: LD_INT 0
61609: PUSH
61610: LD_INT 0
61612: PUSH
61613: LD_INT 0
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: LIST
61620: ST_TO_ADDR
// if not base then
61621: LD_VAR 0 1
61625: NOT
61626: IFFALSE 61630
// exit ;
61628: GO 61679
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61630: LD_ADDR_VAR 0 2
61634: PUSH
61635: LD_VAR 0 1
61639: PPUSH
61640: LD_INT 1
61642: PPUSH
61643: CALL_OW 275
61647: PUSH
61648: LD_VAR 0 1
61652: PPUSH
61653: LD_INT 2
61655: PPUSH
61656: CALL_OW 275
61660: PUSH
61661: LD_VAR 0 1
61665: PPUSH
61666: LD_INT 3
61668: PPUSH
61669: CALL_OW 275
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: LIST
61678: ST_TO_ADDR
// end ;
61679: LD_VAR 0 2
61683: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61684: LD_INT 0
61686: PPUSH
61687: PPUSH
// result := array ;
61688: LD_ADDR_VAR 0 3
61692: PUSH
61693: LD_VAR 0 1
61697: ST_TO_ADDR
// if size > 0 then
61698: LD_VAR 0 2
61702: PUSH
61703: LD_INT 0
61705: GREATER
61706: IFFALSE 61752
// for i := array downto size do
61708: LD_ADDR_VAR 0 4
61712: PUSH
61713: DOUBLE
61714: LD_VAR 0 1
61718: INC
61719: ST_TO_ADDR
61720: LD_VAR 0 2
61724: PUSH
61725: FOR_DOWNTO
61726: IFFALSE 61750
// result := Delete ( result , result ) ;
61728: LD_ADDR_VAR 0 3
61732: PUSH
61733: LD_VAR 0 3
61737: PPUSH
61738: LD_VAR 0 3
61742: PPUSH
61743: CALL_OW 3
61747: ST_TO_ADDR
61748: GO 61725
61750: POP
61751: POP
// end ;
61752: LD_VAR 0 3
61756: RET
// export function ComExit ( unit ) ; var tmp ; begin
61757: LD_INT 0
61759: PPUSH
61760: PPUSH
// if not IsInUnit ( unit ) then
61761: LD_VAR 0 1
61765: PPUSH
61766: CALL_OW 310
61770: NOT
61771: IFFALSE 61775
// exit ;
61773: GO 61835
// tmp := IsInUnit ( unit ) ;
61775: LD_ADDR_VAR 0 3
61779: PUSH
61780: LD_VAR 0 1
61784: PPUSH
61785: CALL_OW 310
61789: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61790: LD_VAR 0 3
61794: PPUSH
61795: CALL_OW 247
61799: PUSH
61800: LD_INT 2
61802: EQUAL
61803: IFFALSE 61816
// ComExitVehicle ( unit ) else
61805: LD_VAR 0 1
61809: PPUSH
61810: CALL_OW 121
61814: GO 61825
// ComExitBuilding ( unit ) ;
61816: LD_VAR 0 1
61820: PPUSH
61821: CALL_OW 122
// result := tmp ;
61825: LD_ADDR_VAR 0 2
61829: PUSH
61830: LD_VAR 0 3
61834: ST_TO_ADDR
// end ;
61835: LD_VAR 0 2
61839: RET
// export function ComExitAll ( units ) ; var i ; begin
61840: LD_INT 0
61842: PPUSH
61843: PPUSH
// if not units then
61844: LD_VAR 0 1
61848: NOT
61849: IFFALSE 61853
// exit ;
61851: GO 61879
// for i in units do
61853: LD_ADDR_VAR 0 3
61857: PUSH
61858: LD_VAR 0 1
61862: PUSH
61863: FOR_IN
61864: IFFALSE 61877
// ComExit ( i ) ;
61866: LD_VAR 0 3
61870: PPUSH
61871: CALL 61757 0 1
61875: GO 61863
61877: POP
61878: POP
// end ;
61879: LD_VAR 0 2
61883: RET
// export function ResetHc ; begin
61884: LD_INT 0
61886: PPUSH
// InitHc ;
61887: CALL_OW 19
// hc_importance := 0 ;
61891: LD_ADDR_OWVAR 32
61895: PUSH
61896: LD_INT 0
61898: ST_TO_ADDR
// end ;
61899: LD_VAR 0 1
61903: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61904: LD_INT 0
61906: PPUSH
61907: PPUSH
61908: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61909: LD_ADDR_VAR 0 6
61913: PUSH
61914: LD_VAR 0 1
61918: PUSH
61919: LD_VAR 0 3
61923: PLUS
61924: PUSH
61925: LD_INT 2
61927: DIV
61928: ST_TO_ADDR
// if _x < 0 then
61929: LD_VAR 0 6
61933: PUSH
61934: LD_INT 0
61936: LESS
61937: IFFALSE 61954
// _x := _x * - 1 ;
61939: LD_ADDR_VAR 0 6
61943: PUSH
61944: LD_VAR 0 6
61948: PUSH
61949: LD_INT 1
61951: NEG
61952: MUL
61953: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61954: LD_ADDR_VAR 0 7
61958: PUSH
61959: LD_VAR 0 2
61963: PUSH
61964: LD_VAR 0 4
61968: PLUS
61969: PUSH
61970: LD_INT 2
61972: DIV
61973: ST_TO_ADDR
// if _y < 0 then
61974: LD_VAR 0 7
61978: PUSH
61979: LD_INT 0
61981: LESS
61982: IFFALSE 61999
// _y := _y * - 1 ;
61984: LD_ADDR_VAR 0 7
61988: PUSH
61989: LD_VAR 0 7
61993: PUSH
61994: LD_INT 1
61996: NEG
61997: MUL
61998: ST_TO_ADDR
// result := [ _x , _y ] ;
61999: LD_ADDR_VAR 0 5
62003: PUSH
62004: LD_VAR 0 6
62008: PUSH
62009: LD_VAR 0 7
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: ST_TO_ADDR
// end ;
62018: LD_VAR 0 5
62022: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62023: LD_INT 0
62025: PPUSH
62026: PPUSH
62027: PPUSH
62028: PPUSH
// task := GetTaskList ( unit ) ;
62029: LD_ADDR_VAR 0 7
62033: PUSH
62034: LD_VAR 0 1
62038: PPUSH
62039: CALL_OW 437
62043: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62044: LD_VAR 0 7
62048: NOT
62049: PUSH
62050: LD_VAR 0 1
62054: PPUSH
62055: LD_VAR 0 2
62059: PPUSH
62060: CALL_OW 308
62064: NOT
62065: AND
62066: IFFALSE 62070
// exit ;
62068: GO 62188
// if IsInArea ( unit , area ) then
62070: LD_VAR 0 1
62074: PPUSH
62075: LD_VAR 0 2
62079: PPUSH
62080: CALL_OW 308
62084: IFFALSE 62102
// begin ComMoveToArea ( unit , goAway ) ;
62086: LD_VAR 0 1
62090: PPUSH
62091: LD_VAR 0 3
62095: PPUSH
62096: CALL_OW 113
// exit ;
62100: GO 62188
// end ; if task [ 1 ] [ 1 ] <> M then
62102: LD_VAR 0 7
62106: PUSH
62107: LD_INT 1
62109: ARRAY
62110: PUSH
62111: LD_INT 1
62113: ARRAY
62114: PUSH
62115: LD_STRING M
62117: NONEQUAL
62118: IFFALSE 62122
// exit ;
62120: GO 62188
// x := task [ 1 ] [ 2 ] ;
62122: LD_ADDR_VAR 0 5
62126: PUSH
62127: LD_VAR 0 7
62131: PUSH
62132: LD_INT 1
62134: ARRAY
62135: PUSH
62136: LD_INT 2
62138: ARRAY
62139: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62140: LD_ADDR_VAR 0 6
62144: PUSH
62145: LD_VAR 0 7
62149: PUSH
62150: LD_INT 1
62152: ARRAY
62153: PUSH
62154: LD_INT 3
62156: ARRAY
62157: ST_TO_ADDR
// if InArea ( x , y , area ) then
62158: LD_VAR 0 5
62162: PPUSH
62163: LD_VAR 0 6
62167: PPUSH
62168: LD_VAR 0 2
62172: PPUSH
62173: CALL_OW 309
62177: IFFALSE 62188
// ComStop ( unit ) ;
62179: LD_VAR 0 1
62183: PPUSH
62184: CALL_OW 141
// end ;
62188: LD_VAR 0 4
62192: RET
// export function Abs ( value ) ; begin
62193: LD_INT 0
62195: PPUSH
// result := value ;
62196: LD_ADDR_VAR 0 2
62200: PUSH
62201: LD_VAR 0 1
62205: ST_TO_ADDR
// if value < 0 then
62206: LD_VAR 0 1
62210: PUSH
62211: LD_INT 0
62213: LESS
62214: IFFALSE 62231
// result := value * - 1 ;
62216: LD_ADDR_VAR 0 2
62220: PUSH
62221: LD_VAR 0 1
62225: PUSH
62226: LD_INT 1
62228: NEG
62229: MUL
62230: ST_TO_ADDR
// end ;
62231: LD_VAR 0 2
62235: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62236: LD_INT 0
62238: PPUSH
62239: PPUSH
62240: PPUSH
62241: PPUSH
62242: PPUSH
62243: PPUSH
62244: PPUSH
62245: PPUSH
// if not unit or not building then
62246: LD_VAR 0 1
62250: NOT
62251: PUSH
62252: LD_VAR 0 2
62256: NOT
62257: OR
62258: IFFALSE 62262
// exit ;
62260: GO 62488
// x := GetX ( building ) ;
62262: LD_ADDR_VAR 0 4
62266: PUSH
62267: LD_VAR 0 2
62271: PPUSH
62272: CALL_OW 250
62276: ST_TO_ADDR
// y := GetY ( building ) ;
62277: LD_ADDR_VAR 0 6
62281: PUSH
62282: LD_VAR 0 2
62286: PPUSH
62287: CALL_OW 251
62291: ST_TO_ADDR
// d := GetDir ( building ) ;
62292: LD_ADDR_VAR 0 8
62296: PUSH
62297: LD_VAR 0 2
62301: PPUSH
62302: CALL_OW 254
62306: ST_TO_ADDR
// r := 4 ;
62307: LD_ADDR_VAR 0 9
62311: PUSH
62312: LD_INT 4
62314: ST_TO_ADDR
// for i := 1 to 5 do
62315: LD_ADDR_VAR 0 10
62319: PUSH
62320: DOUBLE
62321: LD_INT 1
62323: DEC
62324: ST_TO_ADDR
62325: LD_INT 5
62327: PUSH
62328: FOR_TO
62329: IFFALSE 62486
// begin _x := ShiftX ( x , d , r + i ) ;
62331: LD_ADDR_VAR 0 5
62335: PUSH
62336: LD_VAR 0 4
62340: PPUSH
62341: LD_VAR 0 8
62345: PPUSH
62346: LD_VAR 0 9
62350: PUSH
62351: LD_VAR 0 10
62355: PLUS
62356: PPUSH
62357: CALL_OW 272
62361: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62362: LD_ADDR_VAR 0 7
62366: PUSH
62367: LD_VAR 0 6
62371: PPUSH
62372: LD_VAR 0 8
62376: PPUSH
62377: LD_VAR 0 9
62381: PUSH
62382: LD_VAR 0 10
62386: PLUS
62387: PPUSH
62388: CALL_OW 273
62392: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62393: LD_VAR 0 5
62397: PPUSH
62398: LD_VAR 0 7
62402: PPUSH
62403: CALL_OW 488
62407: PUSH
62408: LD_VAR 0 5
62412: PPUSH
62413: LD_VAR 0 7
62417: PPUSH
62418: CALL_OW 428
62422: PPUSH
62423: CALL_OW 247
62427: PUSH
62428: LD_INT 3
62430: PUSH
62431: LD_INT 2
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: IN
62438: NOT
62439: AND
62440: IFFALSE 62484
// begin ComMoveXY ( unit , _x , _y ) ;
62442: LD_VAR 0 1
62446: PPUSH
62447: LD_VAR 0 5
62451: PPUSH
62452: LD_VAR 0 7
62456: PPUSH
62457: CALL_OW 111
// result := [ _x , _y ] ;
62461: LD_ADDR_VAR 0 3
62465: PUSH
62466: LD_VAR 0 5
62470: PUSH
62471: LD_VAR 0 7
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: ST_TO_ADDR
// exit ;
62480: POP
62481: POP
62482: GO 62488
// end ; end ;
62484: GO 62328
62486: POP
62487: POP
// end ;
62488: LD_VAR 0 3
62492: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62493: LD_INT 0
62495: PPUSH
62496: PPUSH
62497: PPUSH
// result := 0 ;
62498: LD_ADDR_VAR 0 3
62502: PUSH
62503: LD_INT 0
62505: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62506: LD_VAR 0 1
62510: PUSH
62511: LD_INT 0
62513: LESS
62514: PUSH
62515: LD_VAR 0 1
62519: PUSH
62520: LD_INT 8
62522: GREATER
62523: OR
62524: PUSH
62525: LD_VAR 0 2
62529: PUSH
62530: LD_INT 0
62532: LESS
62533: OR
62534: PUSH
62535: LD_VAR 0 2
62539: PUSH
62540: LD_INT 8
62542: GREATER
62543: OR
62544: IFFALSE 62548
// exit ;
62546: GO 62623
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62548: LD_ADDR_VAR 0 4
62552: PUSH
62553: LD_INT 22
62555: PUSH
62556: LD_VAR 0 2
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PPUSH
62565: CALL_OW 69
62569: PUSH
62570: FOR_IN
62571: IFFALSE 62621
// begin un := UnitShoot ( i ) ;
62573: LD_ADDR_VAR 0 5
62577: PUSH
62578: LD_VAR 0 4
62582: PPUSH
62583: CALL_OW 504
62587: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62588: LD_VAR 0 5
62592: PPUSH
62593: CALL_OW 255
62597: PUSH
62598: LD_VAR 0 1
62602: EQUAL
62603: IFFALSE 62619
// begin result := un ;
62605: LD_ADDR_VAR 0 3
62609: PUSH
62610: LD_VAR 0 5
62614: ST_TO_ADDR
// exit ;
62615: POP
62616: POP
62617: GO 62623
// end ; end ;
62619: GO 62570
62621: POP
62622: POP
// end ;
62623: LD_VAR 0 3
62627: RET
// export function GetCargoBay ( units ) ; begin
62628: LD_INT 0
62630: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62631: LD_ADDR_VAR 0 2
62635: PUSH
62636: LD_VAR 0 1
62640: PPUSH
62641: LD_INT 2
62643: PUSH
62644: LD_INT 34
62646: PUSH
62647: LD_INT 12
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 34
62656: PUSH
62657: LD_INT 51
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 34
62666: PUSH
62667: LD_INT 32
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 34
62676: PUSH
62677: LD_EXP 59
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: PPUSH
62693: CALL_OW 72
62697: ST_TO_ADDR
// end ;
62698: LD_VAR 0 2
62702: RET
// export function Negate ( value ) ; begin
62703: LD_INT 0
62705: PPUSH
// result := not value ;
62706: LD_ADDR_VAR 0 2
62710: PUSH
62711: LD_VAR 0 1
62715: NOT
62716: ST_TO_ADDR
// end ;
62717: LD_VAR 0 2
62721: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
62722: LD_INT 0
62724: PPUSH
// if x1 = x2 then
62725: LD_VAR 0 1
62729: PUSH
62730: LD_VAR 0 3
62734: EQUAL
62735: IFFALSE 62769
// begin if y1 > y2 then
62737: LD_VAR 0 2
62741: PUSH
62742: LD_VAR 0 4
62746: GREATER
62747: IFFALSE 62759
// result := 0 else
62749: LD_ADDR_VAR 0 5
62753: PUSH
62754: LD_INT 0
62756: ST_TO_ADDR
62757: GO 62767
// result := 3 ;
62759: LD_ADDR_VAR 0 5
62763: PUSH
62764: LD_INT 3
62766: ST_TO_ADDR
// exit ;
62767: GO 62855
// end ; if y1 = y2 then
62769: LD_VAR 0 2
62773: PUSH
62774: LD_VAR 0 4
62778: EQUAL
62779: IFFALSE 62813
// begin if x1 > x2 then
62781: LD_VAR 0 1
62785: PUSH
62786: LD_VAR 0 3
62790: GREATER
62791: IFFALSE 62803
// result := 1 else
62793: LD_ADDR_VAR 0 5
62797: PUSH
62798: LD_INT 1
62800: ST_TO_ADDR
62801: GO 62811
// result := 4 ;
62803: LD_ADDR_VAR 0 5
62807: PUSH
62808: LD_INT 4
62810: ST_TO_ADDR
// exit ;
62811: GO 62855
// end ; if x1 > x2 and y1 > y2 then
62813: LD_VAR 0 1
62817: PUSH
62818: LD_VAR 0 3
62822: GREATER
62823: PUSH
62824: LD_VAR 0 2
62828: PUSH
62829: LD_VAR 0 4
62833: GREATER
62834: AND
62835: IFFALSE 62847
// result := 2 else
62837: LD_ADDR_VAR 0 5
62841: PUSH
62842: LD_INT 2
62844: ST_TO_ADDR
62845: GO 62855
// result := 5 ;
62847: LD_ADDR_VAR 0 5
62851: PUSH
62852: LD_INT 5
62854: ST_TO_ADDR
// end ;
62855: LD_VAR 0 5
62859: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62860: LD_INT 0
62862: PPUSH
62863: PPUSH
// if not driver or not IsInUnit ( driver ) then
62864: LD_VAR 0 1
62868: NOT
62869: PUSH
62870: LD_VAR 0 1
62874: PPUSH
62875: CALL_OW 310
62879: NOT
62880: OR
62881: IFFALSE 62885
// exit ;
62883: GO 62975
// vehicle := IsInUnit ( driver ) ;
62885: LD_ADDR_VAR 0 3
62889: PUSH
62890: LD_VAR 0 1
62894: PPUSH
62895: CALL_OW 310
62899: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62900: LD_VAR 0 1
62904: PPUSH
62905: LD_STRING \
62907: PUSH
62908: LD_INT 0
62910: PUSH
62911: LD_INT 0
62913: PUSH
62914: LD_INT 0
62916: PUSH
62917: LD_INT 0
62919: PUSH
62920: LD_INT 0
62922: PUSH
62923: LD_INT 0
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: PUSH
62935: LD_STRING E
62937: PUSH
62938: LD_INT 0
62940: PUSH
62941: LD_INT 0
62943: PUSH
62944: LD_VAR 0 3
62948: PUSH
62949: LD_INT 0
62951: PUSH
62952: LD_INT 0
62954: PUSH
62955: LD_INT 0
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PPUSH
62971: CALL_OW 446
// end ;
62975: LD_VAR 0 2
62979: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62980: LD_INT 0
62982: PPUSH
62983: PPUSH
// if not driver or not IsInUnit ( driver ) then
62984: LD_VAR 0 1
62988: NOT
62989: PUSH
62990: LD_VAR 0 1
62994: PPUSH
62995: CALL_OW 310
62999: NOT
63000: OR
63001: IFFALSE 63005
// exit ;
63003: GO 63095
// vehicle := IsInUnit ( driver ) ;
63005: LD_ADDR_VAR 0 3
63009: PUSH
63010: LD_VAR 0 1
63014: PPUSH
63015: CALL_OW 310
63019: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63020: LD_VAR 0 1
63024: PPUSH
63025: LD_STRING \
63027: PUSH
63028: LD_INT 0
63030: PUSH
63031: LD_INT 0
63033: PUSH
63034: LD_INT 0
63036: PUSH
63037: LD_INT 0
63039: PUSH
63040: LD_INT 0
63042: PUSH
63043: LD_INT 0
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: PUSH
63055: LD_STRING E
63057: PUSH
63058: LD_INT 0
63060: PUSH
63061: LD_INT 0
63063: PUSH
63064: LD_VAR 0 3
63068: PUSH
63069: LD_INT 0
63071: PUSH
63072: LD_INT 0
63074: PUSH
63075: LD_INT 0
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PPUSH
63091: CALL_OW 447
// end ;
63095: LD_VAR 0 2
63099: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63100: LD_INT 0
63102: PPUSH
63103: PPUSH
63104: PPUSH
// tmp := [ ] ;
63105: LD_ADDR_VAR 0 5
63109: PUSH
63110: EMPTY
63111: ST_TO_ADDR
// for i in units do
63112: LD_ADDR_VAR 0 4
63116: PUSH
63117: LD_VAR 0 1
63121: PUSH
63122: FOR_IN
63123: IFFALSE 63161
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63125: LD_ADDR_VAR 0 5
63129: PUSH
63130: LD_VAR 0 5
63134: PPUSH
63135: LD_VAR 0 5
63139: PUSH
63140: LD_INT 1
63142: PLUS
63143: PPUSH
63144: LD_VAR 0 4
63148: PPUSH
63149: CALL_OW 256
63153: PPUSH
63154: CALL_OW 2
63158: ST_TO_ADDR
63159: GO 63122
63161: POP
63162: POP
// if not tmp then
63163: LD_VAR 0 5
63167: NOT
63168: IFFALSE 63172
// exit ;
63170: GO 63220
// if asc then
63172: LD_VAR 0 2
63176: IFFALSE 63200
// result := SortListByListAsc ( units , tmp ) else
63178: LD_ADDR_VAR 0 3
63182: PUSH
63183: LD_VAR 0 1
63187: PPUSH
63188: LD_VAR 0 5
63192: PPUSH
63193: CALL_OW 76
63197: ST_TO_ADDR
63198: GO 63220
// result := SortListByListDesc ( units , tmp ) ;
63200: LD_ADDR_VAR 0 3
63204: PUSH
63205: LD_VAR 0 1
63209: PPUSH
63210: LD_VAR 0 5
63214: PPUSH
63215: CALL_OW 77
63219: ST_TO_ADDR
// end ;
63220: LD_VAR 0 3
63224: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63225: LD_INT 0
63227: PPUSH
63228: PPUSH
// task := GetTaskList ( mech ) ;
63229: LD_ADDR_VAR 0 4
63233: PUSH
63234: LD_VAR 0 1
63238: PPUSH
63239: CALL_OW 437
63243: ST_TO_ADDR
// if not task then
63244: LD_VAR 0 4
63248: NOT
63249: IFFALSE 63253
// exit ;
63251: GO 63295
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63253: LD_ADDR_VAR 0 3
63257: PUSH
63258: LD_VAR 0 4
63262: PUSH
63263: LD_INT 1
63265: ARRAY
63266: PUSH
63267: LD_INT 1
63269: ARRAY
63270: PUSH
63271: LD_STRING r
63273: EQUAL
63274: PUSH
63275: LD_VAR 0 4
63279: PUSH
63280: LD_INT 1
63282: ARRAY
63283: PUSH
63284: LD_INT 4
63286: ARRAY
63287: PUSH
63288: LD_VAR 0 2
63292: EQUAL
63293: AND
63294: ST_TO_ADDR
// end ;
63295: LD_VAR 0 3
63299: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63300: LD_INT 0
63302: PPUSH
// SetDir ( unit , d ) ;
63303: LD_VAR 0 1
63307: PPUSH
63308: LD_VAR 0 4
63312: PPUSH
63313: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63317: LD_VAR 0 1
63321: PPUSH
63322: LD_VAR 0 2
63326: PPUSH
63327: LD_VAR 0 3
63331: PPUSH
63332: LD_VAR 0 5
63336: PPUSH
63337: CALL_OW 48
// end ;
63341: LD_VAR 0 6
63345: RET
// export function ToNaturalNumber ( number ) ; begin
63346: LD_INT 0
63348: PPUSH
// result := number div 1 ;
63349: LD_ADDR_VAR 0 2
63353: PUSH
63354: LD_VAR 0 1
63358: PUSH
63359: LD_INT 1
63361: DIV
63362: ST_TO_ADDR
// if number < 0 then
63363: LD_VAR 0 1
63367: PUSH
63368: LD_INT 0
63370: LESS
63371: IFFALSE 63381
// result := 0 ;
63373: LD_ADDR_VAR 0 2
63377: PUSH
63378: LD_INT 0
63380: ST_TO_ADDR
// end ; end_of_file
63381: LD_VAR 0 2
63385: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
63386: LD_INT 0
63388: PPUSH
// ar_miner := 81 ;
63389: LD_ADDR_EXP 65
63393: PUSH
63394: LD_INT 81
63396: ST_TO_ADDR
// ar_crane := 88 ;
63397: LD_ADDR_EXP 64
63401: PUSH
63402: LD_INT 88
63404: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
63405: LD_ADDR_EXP 59
63409: PUSH
63410: LD_INT 89
63412: ST_TO_ADDR
// us_hack := 99 ;
63413: LD_ADDR_EXP 60
63417: PUSH
63418: LD_INT 99
63420: ST_TO_ADDR
// us_artillery := 97 ;
63421: LD_ADDR_EXP 61
63425: PUSH
63426: LD_INT 97
63428: ST_TO_ADDR
// ar_bio_bomb := 91 ;
63429: LD_ADDR_EXP 62
63433: PUSH
63434: LD_INT 91
63436: ST_TO_ADDR
// ar_mortar := 92 ;
63437: LD_ADDR_EXP 63
63441: PUSH
63442: LD_INT 92
63444: ST_TO_ADDR
// ru_radar := 98 ;
63445: LD_ADDR_EXP 58
63449: PUSH
63450: LD_INT 98
63452: ST_TO_ADDR
// tech_Artillery := 80 ;
63453: LD_ADDR_EXP 66
63457: PUSH
63458: LD_INT 80
63460: ST_TO_ADDR
// tech_RadMat := 81 ;
63461: LD_ADDR_EXP 67
63465: PUSH
63466: LD_INT 81
63468: ST_TO_ADDR
// tech_BasicTools := 82 ;
63469: LD_ADDR_EXP 68
63473: PUSH
63474: LD_INT 82
63476: ST_TO_ADDR
// tech_Cargo := 83 ;
63477: LD_ADDR_EXP 69
63481: PUSH
63482: LD_INT 83
63484: ST_TO_ADDR
// tech_Track := 84 ;
63485: LD_ADDR_EXP 70
63489: PUSH
63490: LD_INT 84
63492: ST_TO_ADDR
// tech_Crane := 85 ;
63493: LD_ADDR_EXP 71
63497: PUSH
63498: LD_INT 85
63500: ST_TO_ADDR
// tech_Bulldozer := 86 ;
63501: LD_ADDR_EXP 72
63505: PUSH
63506: LD_INT 86
63508: ST_TO_ADDR
// tech_Hovercraft := 87 ;
63509: LD_ADDR_EXP 73
63513: PUSH
63514: LD_INT 87
63516: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
63517: LD_ADDR_EXP 74
63521: PUSH
63522: LD_INT 88
63524: ST_TO_ADDR
// class_mastodont := 31 ;
63525: LD_ADDR_EXP 75
63529: PUSH
63530: LD_INT 31
63532: ST_TO_ADDR
// class_horse := 21 ;
63533: LD_ADDR_EXP 76
63537: PUSH
63538: LD_INT 21
63540: ST_TO_ADDR
// end ;
63541: LD_VAR 0 1
63545: RET
// every 1 do
63546: GO 63548
63548: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
63549: CALL 63386 0 0
63553: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63554: LD_INT 0
63556: PPUSH
// if p2 = 100 then
63557: LD_VAR 0 2
63561: PUSH
63562: LD_INT 100
63564: EQUAL
63565: IFFALSE 64514
// begin if not StreamModeActive then
63567: LD_EXP 77
63571: NOT
63572: IFFALSE 63582
// StreamModeActive := true ;
63574: LD_ADDR_EXP 77
63578: PUSH
63579: LD_INT 1
63581: ST_TO_ADDR
// if p3 = 0 then
63582: LD_VAR 0 3
63586: PUSH
63587: LD_INT 0
63589: EQUAL
63590: IFFALSE 63596
// InitStreamMode ;
63592: CALL 64674 0 0
// if p3 = 1 then
63596: LD_VAR 0 3
63600: PUSH
63601: LD_INT 1
63603: EQUAL
63604: IFFALSE 63614
// sRocket := true ;
63606: LD_ADDR_EXP 82
63610: PUSH
63611: LD_INT 1
63613: ST_TO_ADDR
// if p3 = 2 then
63614: LD_VAR 0 3
63618: PUSH
63619: LD_INT 2
63621: EQUAL
63622: IFFALSE 63632
// sSpeed := true ;
63624: LD_ADDR_EXP 81
63628: PUSH
63629: LD_INT 1
63631: ST_TO_ADDR
// if p3 = 3 then
63632: LD_VAR 0 3
63636: PUSH
63637: LD_INT 3
63639: EQUAL
63640: IFFALSE 63650
// sEngine := true ;
63642: LD_ADDR_EXP 83
63646: PUSH
63647: LD_INT 1
63649: ST_TO_ADDR
// if p3 = 4 then
63650: LD_VAR 0 3
63654: PUSH
63655: LD_INT 4
63657: EQUAL
63658: IFFALSE 63668
// sSpec := true ;
63660: LD_ADDR_EXP 80
63664: PUSH
63665: LD_INT 1
63667: ST_TO_ADDR
// if p3 = 5 then
63668: LD_VAR 0 3
63672: PUSH
63673: LD_INT 5
63675: EQUAL
63676: IFFALSE 63686
// sLevel := true ;
63678: LD_ADDR_EXP 84
63682: PUSH
63683: LD_INT 1
63685: ST_TO_ADDR
// if p3 = 6 then
63686: LD_VAR 0 3
63690: PUSH
63691: LD_INT 6
63693: EQUAL
63694: IFFALSE 63704
// sArmoury := true ;
63696: LD_ADDR_EXP 85
63700: PUSH
63701: LD_INT 1
63703: ST_TO_ADDR
// if p3 = 7 then
63704: LD_VAR 0 3
63708: PUSH
63709: LD_INT 7
63711: EQUAL
63712: IFFALSE 63722
// sRadar := true ;
63714: LD_ADDR_EXP 86
63718: PUSH
63719: LD_INT 1
63721: ST_TO_ADDR
// if p3 = 8 then
63722: LD_VAR 0 3
63726: PUSH
63727: LD_INT 8
63729: EQUAL
63730: IFFALSE 63740
// sBunker := true ;
63732: LD_ADDR_EXP 87
63736: PUSH
63737: LD_INT 1
63739: ST_TO_ADDR
// if p3 = 9 then
63740: LD_VAR 0 3
63744: PUSH
63745: LD_INT 9
63747: EQUAL
63748: IFFALSE 63758
// sHack := true ;
63750: LD_ADDR_EXP 88
63754: PUSH
63755: LD_INT 1
63757: ST_TO_ADDR
// if p3 = 10 then
63758: LD_VAR 0 3
63762: PUSH
63763: LD_INT 10
63765: EQUAL
63766: IFFALSE 63776
// sFire := true ;
63768: LD_ADDR_EXP 89
63772: PUSH
63773: LD_INT 1
63775: ST_TO_ADDR
// if p3 = 11 then
63776: LD_VAR 0 3
63780: PUSH
63781: LD_INT 11
63783: EQUAL
63784: IFFALSE 63794
// sRefresh := true ;
63786: LD_ADDR_EXP 90
63790: PUSH
63791: LD_INT 1
63793: ST_TO_ADDR
// if p3 = 12 then
63794: LD_VAR 0 3
63798: PUSH
63799: LD_INT 12
63801: EQUAL
63802: IFFALSE 63812
// sExp := true ;
63804: LD_ADDR_EXP 91
63808: PUSH
63809: LD_INT 1
63811: ST_TO_ADDR
// if p3 = 13 then
63812: LD_VAR 0 3
63816: PUSH
63817: LD_INT 13
63819: EQUAL
63820: IFFALSE 63830
// sDepot := true ;
63822: LD_ADDR_EXP 92
63826: PUSH
63827: LD_INT 1
63829: ST_TO_ADDR
// if p3 = 14 then
63830: LD_VAR 0 3
63834: PUSH
63835: LD_INT 14
63837: EQUAL
63838: IFFALSE 63848
// sFlag := true ;
63840: LD_ADDR_EXP 93
63844: PUSH
63845: LD_INT 1
63847: ST_TO_ADDR
// if p3 = 15 then
63848: LD_VAR 0 3
63852: PUSH
63853: LD_INT 15
63855: EQUAL
63856: IFFALSE 63866
// sKamikadze := true ;
63858: LD_ADDR_EXP 101
63862: PUSH
63863: LD_INT 1
63865: ST_TO_ADDR
// if p3 = 16 then
63866: LD_VAR 0 3
63870: PUSH
63871: LD_INT 16
63873: EQUAL
63874: IFFALSE 63884
// sTroll := true ;
63876: LD_ADDR_EXP 102
63880: PUSH
63881: LD_INT 1
63883: ST_TO_ADDR
// if p3 = 17 then
63884: LD_VAR 0 3
63888: PUSH
63889: LD_INT 17
63891: EQUAL
63892: IFFALSE 63902
// sSlow := true ;
63894: LD_ADDR_EXP 103
63898: PUSH
63899: LD_INT 1
63901: ST_TO_ADDR
// if p3 = 18 then
63902: LD_VAR 0 3
63906: PUSH
63907: LD_INT 18
63909: EQUAL
63910: IFFALSE 63920
// sLack := true ;
63912: LD_ADDR_EXP 104
63916: PUSH
63917: LD_INT 1
63919: ST_TO_ADDR
// if p3 = 19 then
63920: LD_VAR 0 3
63924: PUSH
63925: LD_INT 19
63927: EQUAL
63928: IFFALSE 63938
// sTank := true ;
63930: LD_ADDR_EXP 106
63934: PUSH
63935: LD_INT 1
63937: ST_TO_ADDR
// if p3 = 20 then
63938: LD_VAR 0 3
63942: PUSH
63943: LD_INT 20
63945: EQUAL
63946: IFFALSE 63956
// sRemote := true ;
63948: LD_ADDR_EXP 107
63952: PUSH
63953: LD_INT 1
63955: ST_TO_ADDR
// if p3 = 21 then
63956: LD_VAR 0 3
63960: PUSH
63961: LD_INT 21
63963: EQUAL
63964: IFFALSE 63974
// sPowell := true ;
63966: LD_ADDR_EXP 108
63970: PUSH
63971: LD_INT 1
63973: ST_TO_ADDR
// if p3 = 22 then
63974: LD_VAR 0 3
63978: PUSH
63979: LD_INT 22
63981: EQUAL
63982: IFFALSE 63992
// sTeleport := true ;
63984: LD_ADDR_EXP 111
63988: PUSH
63989: LD_INT 1
63991: ST_TO_ADDR
// if p3 = 23 then
63992: LD_VAR 0 3
63996: PUSH
63997: LD_INT 23
63999: EQUAL
64000: IFFALSE 64010
// sOilTower := true ;
64002: LD_ADDR_EXP 113
64006: PUSH
64007: LD_INT 1
64009: ST_TO_ADDR
// if p3 = 24 then
64010: LD_VAR 0 3
64014: PUSH
64015: LD_INT 24
64017: EQUAL
64018: IFFALSE 64028
// sShovel := true ;
64020: LD_ADDR_EXP 114
64024: PUSH
64025: LD_INT 1
64027: ST_TO_ADDR
// if p3 = 25 then
64028: LD_VAR 0 3
64032: PUSH
64033: LD_INT 25
64035: EQUAL
64036: IFFALSE 64046
// sSheik := true ;
64038: LD_ADDR_EXP 115
64042: PUSH
64043: LD_INT 1
64045: ST_TO_ADDR
// if p3 = 26 then
64046: LD_VAR 0 3
64050: PUSH
64051: LD_INT 26
64053: EQUAL
64054: IFFALSE 64064
// sEarthquake := true ;
64056: LD_ADDR_EXP 117
64060: PUSH
64061: LD_INT 1
64063: ST_TO_ADDR
// if p3 = 27 then
64064: LD_VAR 0 3
64068: PUSH
64069: LD_INT 27
64071: EQUAL
64072: IFFALSE 64082
// sAI := true ;
64074: LD_ADDR_EXP 118
64078: PUSH
64079: LD_INT 1
64081: ST_TO_ADDR
// if p3 = 28 then
64082: LD_VAR 0 3
64086: PUSH
64087: LD_INT 28
64089: EQUAL
64090: IFFALSE 64100
// sCargo := true ;
64092: LD_ADDR_EXP 121
64096: PUSH
64097: LD_INT 1
64099: ST_TO_ADDR
// if p3 = 29 then
64100: LD_VAR 0 3
64104: PUSH
64105: LD_INT 29
64107: EQUAL
64108: IFFALSE 64118
// sDLaser := true ;
64110: LD_ADDR_EXP 122
64114: PUSH
64115: LD_INT 1
64117: ST_TO_ADDR
// if p3 = 30 then
64118: LD_VAR 0 3
64122: PUSH
64123: LD_INT 30
64125: EQUAL
64126: IFFALSE 64136
// sExchange := true ;
64128: LD_ADDR_EXP 123
64132: PUSH
64133: LD_INT 1
64135: ST_TO_ADDR
// if p3 = 31 then
64136: LD_VAR 0 3
64140: PUSH
64141: LD_INT 31
64143: EQUAL
64144: IFFALSE 64154
// sFac := true ;
64146: LD_ADDR_EXP 124
64150: PUSH
64151: LD_INT 1
64153: ST_TO_ADDR
// if p3 = 32 then
64154: LD_VAR 0 3
64158: PUSH
64159: LD_INT 32
64161: EQUAL
64162: IFFALSE 64172
// sPower := true ;
64164: LD_ADDR_EXP 125
64168: PUSH
64169: LD_INT 1
64171: ST_TO_ADDR
// if p3 = 33 then
64172: LD_VAR 0 3
64176: PUSH
64177: LD_INT 33
64179: EQUAL
64180: IFFALSE 64190
// sRandom := true ;
64182: LD_ADDR_EXP 126
64186: PUSH
64187: LD_INT 1
64189: ST_TO_ADDR
// if p3 = 34 then
64190: LD_VAR 0 3
64194: PUSH
64195: LD_INT 34
64197: EQUAL
64198: IFFALSE 64208
// sShield := true ;
64200: LD_ADDR_EXP 127
64204: PUSH
64205: LD_INT 1
64207: ST_TO_ADDR
// if p3 = 35 then
64208: LD_VAR 0 3
64212: PUSH
64213: LD_INT 35
64215: EQUAL
64216: IFFALSE 64226
// sTime := true ;
64218: LD_ADDR_EXP 128
64222: PUSH
64223: LD_INT 1
64225: ST_TO_ADDR
// if p3 = 36 then
64226: LD_VAR 0 3
64230: PUSH
64231: LD_INT 36
64233: EQUAL
64234: IFFALSE 64244
// sTools := true ;
64236: LD_ADDR_EXP 129
64240: PUSH
64241: LD_INT 1
64243: ST_TO_ADDR
// if p3 = 101 then
64244: LD_VAR 0 3
64248: PUSH
64249: LD_INT 101
64251: EQUAL
64252: IFFALSE 64262
// sSold := true ;
64254: LD_ADDR_EXP 94
64258: PUSH
64259: LD_INT 1
64261: ST_TO_ADDR
// if p3 = 102 then
64262: LD_VAR 0 3
64266: PUSH
64267: LD_INT 102
64269: EQUAL
64270: IFFALSE 64280
// sDiff := true ;
64272: LD_ADDR_EXP 95
64276: PUSH
64277: LD_INT 1
64279: ST_TO_ADDR
// if p3 = 103 then
64280: LD_VAR 0 3
64284: PUSH
64285: LD_INT 103
64287: EQUAL
64288: IFFALSE 64298
// sFog := true ;
64290: LD_ADDR_EXP 98
64294: PUSH
64295: LD_INT 1
64297: ST_TO_ADDR
// if p3 = 104 then
64298: LD_VAR 0 3
64302: PUSH
64303: LD_INT 104
64305: EQUAL
64306: IFFALSE 64316
// sReset := true ;
64308: LD_ADDR_EXP 99
64312: PUSH
64313: LD_INT 1
64315: ST_TO_ADDR
// if p3 = 105 then
64316: LD_VAR 0 3
64320: PUSH
64321: LD_INT 105
64323: EQUAL
64324: IFFALSE 64334
// sSun := true ;
64326: LD_ADDR_EXP 100
64330: PUSH
64331: LD_INT 1
64333: ST_TO_ADDR
// if p3 = 106 then
64334: LD_VAR 0 3
64338: PUSH
64339: LD_INT 106
64341: EQUAL
64342: IFFALSE 64352
// sTiger := true ;
64344: LD_ADDR_EXP 96
64348: PUSH
64349: LD_INT 1
64351: ST_TO_ADDR
// if p3 = 107 then
64352: LD_VAR 0 3
64356: PUSH
64357: LD_INT 107
64359: EQUAL
64360: IFFALSE 64370
// sBomb := true ;
64362: LD_ADDR_EXP 97
64366: PUSH
64367: LD_INT 1
64369: ST_TO_ADDR
// if p3 = 108 then
64370: LD_VAR 0 3
64374: PUSH
64375: LD_INT 108
64377: EQUAL
64378: IFFALSE 64388
// sWound := true ;
64380: LD_ADDR_EXP 105
64384: PUSH
64385: LD_INT 1
64387: ST_TO_ADDR
// if p3 = 109 then
64388: LD_VAR 0 3
64392: PUSH
64393: LD_INT 109
64395: EQUAL
64396: IFFALSE 64406
// sBetray := true ;
64398: LD_ADDR_EXP 109
64402: PUSH
64403: LD_INT 1
64405: ST_TO_ADDR
// if p3 = 110 then
64406: LD_VAR 0 3
64410: PUSH
64411: LD_INT 110
64413: EQUAL
64414: IFFALSE 64424
// sContamin := true ;
64416: LD_ADDR_EXP 110
64420: PUSH
64421: LD_INT 1
64423: ST_TO_ADDR
// if p3 = 111 then
64424: LD_VAR 0 3
64428: PUSH
64429: LD_INT 111
64431: EQUAL
64432: IFFALSE 64442
// sOil := true ;
64434: LD_ADDR_EXP 112
64438: PUSH
64439: LD_INT 1
64441: ST_TO_ADDR
// if p3 = 112 then
64442: LD_VAR 0 3
64446: PUSH
64447: LD_INT 112
64449: EQUAL
64450: IFFALSE 64460
// sStu := true ;
64452: LD_ADDR_EXP 116
64456: PUSH
64457: LD_INT 1
64459: ST_TO_ADDR
// if p3 = 113 then
64460: LD_VAR 0 3
64464: PUSH
64465: LD_INT 113
64467: EQUAL
64468: IFFALSE 64478
// sBazooka := true ;
64470: LD_ADDR_EXP 119
64474: PUSH
64475: LD_INT 1
64477: ST_TO_ADDR
// if p3 = 114 then
64478: LD_VAR 0 3
64482: PUSH
64483: LD_INT 114
64485: EQUAL
64486: IFFALSE 64496
// sMortar := true ;
64488: LD_ADDR_EXP 120
64492: PUSH
64493: LD_INT 1
64495: ST_TO_ADDR
// if p3 = 115 then
64496: LD_VAR 0 3
64500: PUSH
64501: LD_INT 115
64503: EQUAL
64504: IFFALSE 64514
// sRanger := true ;
64506: LD_ADDR_EXP 130
64510: PUSH
64511: LD_INT 1
64513: ST_TO_ADDR
// end ; if p2 = 101 then
64514: LD_VAR 0 2
64518: PUSH
64519: LD_INT 101
64521: EQUAL
64522: IFFALSE 64650
// begin case p3 of 1 :
64524: LD_VAR 0 3
64528: PUSH
64529: LD_INT 1
64531: DOUBLE
64532: EQUAL
64533: IFTRUE 64537
64535: GO 64544
64537: POP
// hHackUnlimitedResources ; 2 :
64538: CALL 75687 0 0
64542: GO 64650
64544: LD_INT 2
64546: DOUBLE
64547: EQUAL
64548: IFTRUE 64552
64550: GO 64559
64552: POP
// hHackSetLevel10 ; 3 :
64553: CALL 75820 0 0
64557: GO 64650
64559: LD_INT 3
64561: DOUBLE
64562: EQUAL
64563: IFTRUE 64567
64565: GO 64574
64567: POP
// hHackSetLevel10YourUnits ; 4 :
64568: CALL 75905 0 0
64572: GO 64650
64574: LD_INT 4
64576: DOUBLE
64577: EQUAL
64578: IFTRUE 64582
64580: GO 64589
64582: POP
// hHackInvincible ; 5 :
64583: CALL 76353 0 0
64587: GO 64650
64589: LD_INT 5
64591: DOUBLE
64592: EQUAL
64593: IFTRUE 64597
64595: GO 64604
64597: POP
// hHackInvisible ; 6 :
64598: CALL 76464 0 0
64602: GO 64650
64604: LD_INT 6
64606: DOUBLE
64607: EQUAL
64608: IFTRUE 64612
64610: GO 64619
64612: POP
// hHackChangeYourSide ; 7 :
64613: CALL 76521 0 0
64617: GO 64650
64619: LD_INT 7
64621: DOUBLE
64622: EQUAL
64623: IFTRUE 64627
64625: GO 64634
64627: POP
// hHackChangeUnitSide ; 8 :
64628: CALL 76563 0 0
64632: GO 64650
64634: LD_INT 8
64636: DOUBLE
64637: EQUAL
64638: IFTRUE 64642
64640: GO 64649
64642: POP
// hHackFog ; end ;
64643: CALL 76664 0 0
64647: GO 64650
64649: POP
// end ; end ;
64650: LD_VAR 0 7
64654: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
64655: GO 64657
64657: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
64658: LD_STRING initStreamRollete();
64660: PPUSH
64661: CALL_OW 559
// InitStreamMode ;
64665: CALL 64674 0 0
// DefineStreamItems ( ) ;
64669: CALL 65114 0 0
// end ;
64673: END
// function InitStreamMode ; begin
64674: LD_INT 0
64676: PPUSH
// streamModeActive := false ;
64677: LD_ADDR_EXP 77
64681: PUSH
64682: LD_INT 0
64684: ST_TO_ADDR
// normalCounter := 36 ;
64685: LD_ADDR_EXP 78
64689: PUSH
64690: LD_INT 36
64692: ST_TO_ADDR
// hardcoreCounter := 16 ;
64693: LD_ADDR_EXP 79
64697: PUSH
64698: LD_INT 16
64700: ST_TO_ADDR
// sRocket := false ;
64701: LD_ADDR_EXP 82
64705: PUSH
64706: LD_INT 0
64708: ST_TO_ADDR
// sSpeed := false ;
64709: LD_ADDR_EXP 81
64713: PUSH
64714: LD_INT 0
64716: ST_TO_ADDR
// sEngine := false ;
64717: LD_ADDR_EXP 83
64721: PUSH
64722: LD_INT 0
64724: ST_TO_ADDR
// sSpec := false ;
64725: LD_ADDR_EXP 80
64729: PUSH
64730: LD_INT 0
64732: ST_TO_ADDR
// sLevel := false ;
64733: LD_ADDR_EXP 84
64737: PUSH
64738: LD_INT 0
64740: ST_TO_ADDR
// sArmoury := false ;
64741: LD_ADDR_EXP 85
64745: PUSH
64746: LD_INT 0
64748: ST_TO_ADDR
// sRadar := false ;
64749: LD_ADDR_EXP 86
64753: PUSH
64754: LD_INT 0
64756: ST_TO_ADDR
// sBunker := false ;
64757: LD_ADDR_EXP 87
64761: PUSH
64762: LD_INT 0
64764: ST_TO_ADDR
// sHack := false ;
64765: LD_ADDR_EXP 88
64769: PUSH
64770: LD_INT 0
64772: ST_TO_ADDR
// sFire := false ;
64773: LD_ADDR_EXP 89
64777: PUSH
64778: LD_INT 0
64780: ST_TO_ADDR
// sRefresh := false ;
64781: LD_ADDR_EXP 90
64785: PUSH
64786: LD_INT 0
64788: ST_TO_ADDR
// sExp := false ;
64789: LD_ADDR_EXP 91
64793: PUSH
64794: LD_INT 0
64796: ST_TO_ADDR
// sDepot := false ;
64797: LD_ADDR_EXP 92
64801: PUSH
64802: LD_INT 0
64804: ST_TO_ADDR
// sFlag := false ;
64805: LD_ADDR_EXP 93
64809: PUSH
64810: LD_INT 0
64812: ST_TO_ADDR
// sKamikadze := false ;
64813: LD_ADDR_EXP 101
64817: PUSH
64818: LD_INT 0
64820: ST_TO_ADDR
// sTroll := false ;
64821: LD_ADDR_EXP 102
64825: PUSH
64826: LD_INT 0
64828: ST_TO_ADDR
// sSlow := false ;
64829: LD_ADDR_EXP 103
64833: PUSH
64834: LD_INT 0
64836: ST_TO_ADDR
// sLack := false ;
64837: LD_ADDR_EXP 104
64841: PUSH
64842: LD_INT 0
64844: ST_TO_ADDR
// sTank := false ;
64845: LD_ADDR_EXP 106
64849: PUSH
64850: LD_INT 0
64852: ST_TO_ADDR
// sRemote := false ;
64853: LD_ADDR_EXP 107
64857: PUSH
64858: LD_INT 0
64860: ST_TO_ADDR
// sPowell := false ;
64861: LD_ADDR_EXP 108
64865: PUSH
64866: LD_INT 0
64868: ST_TO_ADDR
// sTeleport := false ;
64869: LD_ADDR_EXP 111
64873: PUSH
64874: LD_INT 0
64876: ST_TO_ADDR
// sOilTower := false ;
64877: LD_ADDR_EXP 113
64881: PUSH
64882: LD_INT 0
64884: ST_TO_ADDR
// sShovel := false ;
64885: LD_ADDR_EXP 114
64889: PUSH
64890: LD_INT 0
64892: ST_TO_ADDR
// sSheik := false ;
64893: LD_ADDR_EXP 115
64897: PUSH
64898: LD_INT 0
64900: ST_TO_ADDR
// sEarthquake := false ;
64901: LD_ADDR_EXP 117
64905: PUSH
64906: LD_INT 0
64908: ST_TO_ADDR
// sAI := false ;
64909: LD_ADDR_EXP 118
64913: PUSH
64914: LD_INT 0
64916: ST_TO_ADDR
// sCargo := false ;
64917: LD_ADDR_EXP 121
64921: PUSH
64922: LD_INT 0
64924: ST_TO_ADDR
// sDLaser := false ;
64925: LD_ADDR_EXP 122
64929: PUSH
64930: LD_INT 0
64932: ST_TO_ADDR
// sExchange := false ;
64933: LD_ADDR_EXP 123
64937: PUSH
64938: LD_INT 0
64940: ST_TO_ADDR
// sFac := false ;
64941: LD_ADDR_EXP 124
64945: PUSH
64946: LD_INT 0
64948: ST_TO_ADDR
// sPower := false ;
64949: LD_ADDR_EXP 125
64953: PUSH
64954: LD_INT 0
64956: ST_TO_ADDR
// sRandom := false ;
64957: LD_ADDR_EXP 126
64961: PUSH
64962: LD_INT 0
64964: ST_TO_ADDR
// sShield := false ;
64965: LD_ADDR_EXP 127
64969: PUSH
64970: LD_INT 0
64972: ST_TO_ADDR
// sTime := false ;
64973: LD_ADDR_EXP 128
64977: PUSH
64978: LD_INT 0
64980: ST_TO_ADDR
// sTools := false ;
64981: LD_ADDR_EXP 129
64985: PUSH
64986: LD_INT 0
64988: ST_TO_ADDR
// sSold := false ;
64989: LD_ADDR_EXP 94
64993: PUSH
64994: LD_INT 0
64996: ST_TO_ADDR
// sDiff := false ;
64997: LD_ADDR_EXP 95
65001: PUSH
65002: LD_INT 0
65004: ST_TO_ADDR
// sFog := false ;
65005: LD_ADDR_EXP 98
65009: PUSH
65010: LD_INT 0
65012: ST_TO_ADDR
// sReset := false ;
65013: LD_ADDR_EXP 99
65017: PUSH
65018: LD_INT 0
65020: ST_TO_ADDR
// sSun := false ;
65021: LD_ADDR_EXP 100
65025: PUSH
65026: LD_INT 0
65028: ST_TO_ADDR
// sTiger := false ;
65029: LD_ADDR_EXP 96
65033: PUSH
65034: LD_INT 0
65036: ST_TO_ADDR
// sBomb := false ;
65037: LD_ADDR_EXP 97
65041: PUSH
65042: LD_INT 0
65044: ST_TO_ADDR
// sWound := false ;
65045: LD_ADDR_EXP 105
65049: PUSH
65050: LD_INT 0
65052: ST_TO_ADDR
// sBetray := false ;
65053: LD_ADDR_EXP 109
65057: PUSH
65058: LD_INT 0
65060: ST_TO_ADDR
// sContamin := false ;
65061: LD_ADDR_EXP 110
65065: PUSH
65066: LD_INT 0
65068: ST_TO_ADDR
// sOil := false ;
65069: LD_ADDR_EXP 112
65073: PUSH
65074: LD_INT 0
65076: ST_TO_ADDR
// sStu := false ;
65077: LD_ADDR_EXP 116
65081: PUSH
65082: LD_INT 0
65084: ST_TO_ADDR
// sBazooka := false ;
65085: LD_ADDR_EXP 119
65089: PUSH
65090: LD_INT 0
65092: ST_TO_ADDR
// sMortar := false ;
65093: LD_ADDR_EXP 120
65097: PUSH
65098: LD_INT 0
65100: ST_TO_ADDR
// sRanger := false ;
65101: LD_ADDR_EXP 130
65105: PUSH
65106: LD_INT 0
65108: ST_TO_ADDR
// end ;
65109: LD_VAR 0 1
65113: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
65114: LD_INT 0
65116: PPUSH
65117: PPUSH
65118: PPUSH
65119: PPUSH
65120: PPUSH
// result := [ ] ;
65121: LD_ADDR_VAR 0 1
65125: PUSH
65126: EMPTY
65127: ST_TO_ADDR
// if campaign_id = 1 then
65128: LD_OWVAR 69
65132: PUSH
65133: LD_INT 1
65135: EQUAL
65136: IFFALSE 68074
// begin case mission_number of 1 :
65138: LD_OWVAR 70
65142: PUSH
65143: LD_INT 1
65145: DOUBLE
65146: EQUAL
65147: IFTRUE 65151
65149: GO 65215
65151: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
65152: LD_ADDR_VAR 0 1
65156: PUSH
65157: LD_INT 2
65159: PUSH
65160: LD_INT 4
65162: PUSH
65163: LD_INT 11
65165: PUSH
65166: LD_INT 12
65168: PUSH
65169: LD_INT 15
65171: PUSH
65172: LD_INT 16
65174: PUSH
65175: LD_INT 22
65177: PUSH
65178: LD_INT 23
65180: PUSH
65181: LD_INT 26
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 101
65197: PUSH
65198: LD_INT 102
65200: PUSH
65201: LD_INT 106
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: LIST
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: ST_TO_ADDR
65213: GO 68072
65215: LD_INT 2
65217: DOUBLE
65218: EQUAL
65219: IFTRUE 65223
65221: GO 65295
65223: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
65224: LD_ADDR_VAR 0 1
65228: PUSH
65229: LD_INT 2
65231: PUSH
65232: LD_INT 4
65234: PUSH
65235: LD_INT 11
65237: PUSH
65238: LD_INT 12
65240: PUSH
65241: LD_INT 15
65243: PUSH
65244: LD_INT 16
65246: PUSH
65247: LD_INT 22
65249: PUSH
65250: LD_INT 23
65252: PUSH
65253: LD_INT 26
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 101
65269: PUSH
65270: LD_INT 102
65272: PUSH
65273: LD_INT 105
65275: PUSH
65276: LD_INT 106
65278: PUSH
65279: LD_INT 108
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: ST_TO_ADDR
65293: GO 68072
65295: LD_INT 3
65297: DOUBLE
65298: EQUAL
65299: IFTRUE 65303
65301: GO 65379
65303: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
65304: LD_ADDR_VAR 0 1
65308: PUSH
65309: LD_INT 2
65311: PUSH
65312: LD_INT 4
65314: PUSH
65315: LD_INT 5
65317: PUSH
65318: LD_INT 11
65320: PUSH
65321: LD_INT 12
65323: PUSH
65324: LD_INT 15
65326: PUSH
65327: LD_INT 16
65329: PUSH
65330: LD_INT 22
65332: PUSH
65333: LD_INT 26
65335: PUSH
65336: LD_INT 36
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 101
65353: PUSH
65354: LD_INT 102
65356: PUSH
65357: LD_INT 105
65359: PUSH
65360: LD_INT 106
65362: PUSH
65363: LD_INT 108
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: ST_TO_ADDR
65377: GO 68072
65379: LD_INT 4
65381: DOUBLE
65382: EQUAL
65383: IFTRUE 65387
65385: GO 65471
65387: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
65388: LD_ADDR_VAR 0 1
65392: PUSH
65393: LD_INT 2
65395: PUSH
65396: LD_INT 4
65398: PUSH
65399: LD_INT 5
65401: PUSH
65402: LD_INT 8
65404: PUSH
65405: LD_INT 11
65407: PUSH
65408: LD_INT 12
65410: PUSH
65411: LD_INT 15
65413: PUSH
65414: LD_INT 16
65416: PUSH
65417: LD_INT 22
65419: PUSH
65420: LD_INT 23
65422: PUSH
65423: LD_INT 26
65425: PUSH
65426: LD_INT 36
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 101
65445: PUSH
65446: LD_INT 102
65448: PUSH
65449: LD_INT 105
65451: PUSH
65452: LD_INT 106
65454: PUSH
65455: LD_INT 108
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: ST_TO_ADDR
65469: GO 68072
65471: LD_INT 5
65473: DOUBLE
65474: EQUAL
65475: IFTRUE 65479
65477: GO 65579
65479: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
65480: LD_ADDR_VAR 0 1
65484: PUSH
65485: LD_INT 2
65487: PUSH
65488: LD_INT 4
65490: PUSH
65491: LD_INT 5
65493: PUSH
65494: LD_INT 6
65496: PUSH
65497: LD_INT 8
65499: PUSH
65500: LD_INT 11
65502: PUSH
65503: LD_INT 12
65505: PUSH
65506: LD_INT 15
65508: PUSH
65509: LD_INT 16
65511: PUSH
65512: LD_INT 22
65514: PUSH
65515: LD_INT 23
65517: PUSH
65518: LD_INT 25
65520: PUSH
65521: LD_INT 26
65523: PUSH
65524: LD_INT 36
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 101
65545: PUSH
65546: LD_INT 102
65548: PUSH
65549: LD_INT 105
65551: PUSH
65552: LD_INT 106
65554: PUSH
65555: LD_INT 108
65557: PUSH
65558: LD_INT 109
65560: PUSH
65561: LD_INT 112
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: ST_TO_ADDR
65577: GO 68072
65579: LD_INT 6
65581: DOUBLE
65582: EQUAL
65583: IFTRUE 65587
65585: GO 65707
65587: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
65588: LD_ADDR_VAR 0 1
65592: PUSH
65593: LD_INT 2
65595: PUSH
65596: LD_INT 4
65598: PUSH
65599: LD_INT 5
65601: PUSH
65602: LD_INT 6
65604: PUSH
65605: LD_INT 8
65607: PUSH
65608: LD_INT 11
65610: PUSH
65611: LD_INT 12
65613: PUSH
65614: LD_INT 15
65616: PUSH
65617: LD_INT 16
65619: PUSH
65620: LD_INT 20
65622: PUSH
65623: LD_INT 21
65625: PUSH
65626: LD_INT 22
65628: PUSH
65629: LD_INT 23
65631: PUSH
65632: LD_INT 25
65634: PUSH
65635: LD_INT 26
65637: PUSH
65638: LD_INT 30
65640: PUSH
65641: LD_INT 31
65643: PUSH
65644: LD_INT 32
65646: PUSH
65647: LD_INT 36
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: PUSH
65671: LD_INT 101
65673: PUSH
65674: LD_INT 102
65676: PUSH
65677: LD_INT 105
65679: PUSH
65680: LD_INT 106
65682: PUSH
65683: LD_INT 108
65685: PUSH
65686: LD_INT 109
65688: PUSH
65689: LD_INT 112
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: ST_TO_ADDR
65705: GO 68072
65707: LD_INT 7
65709: DOUBLE
65710: EQUAL
65711: IFTRUE 65715
65713: GO 65815
65715: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
65716: LD_ADDR_VAR 0 1
65720: PUSH
65721: LD_INT 2
65723: PUSH
65724: LD_INT 4
65726: PUSH
65727: LD_INT 5
65729: PUSH
65730: LD_INT 7
65732: PUSH
65733: LD_INT 11
65735: PUSH
65736: LD_INT 12
65738: PUSH
65739: LD_INT 15
65741: PUSH
65742: LD_INT 16
65744: PUSH
65745: LD_INT 20
65747: PUSH
65748: LD_INT 21
65750: PUSH
65751: LD_INT 22
65753: PUSH
65754: LD_INT 23
65756: PUSH
65757: LD_INT 25
65759: PUSH
65760: LD_INT 26
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 101
65781: PUSH
65782: LD_INT 102
65784: PUSH
65785: LD_INT 103
65787: PUSH
65788: LD_INT 105
65790: PUSH
65791: LD_INT 106
65793: PUSH
65794: LD_INT 108
65796: PUSH
65797: LD_INT 112
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: ST_TO_ADDR
65813: GO 68072
65815: LD_INT 8
65817: DOUBLE
65818: EQUAL
65819: IFTRUE 65823
65821: GO 65951
65823: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
65824: LD_ADDR_VAR 0 1
65828: PUSH
65829: LD_INT 2
65831: PUSH
65832: LD_INT 4
65834: PUSH
65835: LD_INT 5
65837: PUSH
65838: LD_INT 6
65840: PUSH
65841: LD_INT 7
65843: PUSH
65844: LD_INT 8
65846: PUSH
65847: LD_INT 11
65849: PUSH
65850: LD_INT 12
65852: PUSH
65853: LD_INT 15
65855: PUSH
65856: LD_INT 16
65858: PUSH
65859: LD_INT 20
65861: PUSH
65862: LD_INT 21
65864: PUSH
65865: LD_INT 22
65867: PUSH
65868: LD_INT 23
65870: PUSH
65871: LD_INT 25
65873: PUSH
65874: LD_INT 26
65876: PUSH
65877: LD_INT 30
65879: PUSH
65880: LD_INT 31
65882: PUSH
65883: LD_INT 32
65885: PUSH
65886: LD_INT 36
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: PUSH
65911: LD_INT 101
65913: PUSH
65914: LD_INT 102
65916: PUSH
65917: LD_INT 103
65919: PUSH
65920: LD_INT 105
65922: PUSH
65923: LD_INT 106
65925: PUSH
65926: LD_INT 108
65928: PUSH
65929: LD_INT 109
65931: PUSH
65932: LD_INT 112
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: ST_TO_ADDR
65949: GO 68072
65951: LD_INT 9
65953: DOUBLE
65954: EQUAL
65955: IFTRUE 65959
65957: GO 66095
65959: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
65960: LD_ADDR_VAR 0 1
65964: PUSH
65965: LD_INT 2
65967: PUSH
65968: LD_INT 4
65970: PUSH
65971: LD_INT 5
65973: PUSH
65974: LD_INT 6
65976: PUSH
65977: LD_INT 7
65979: PUSH
65980: LD_INT 8
65982: PUSH
65983: LD_INT 11
65985: PUSH
65986: LD_INT 12
65988: PUSH
65989: LD_INT 15
65991: PUSH
65992: LD_INT 16
65994: PUSH
65995: LD_INT 20
65997: PUSH
65998: LD_INT 21
66000: PUSH
66001: LD_INT 22
66003: PUSH
66004: LD_INT 23
66006: PUSH
66007: LD_INT 25
66009: PUSH
66010: LD_INT 26
66012: PUSH
66013: LD_INT 28
66015: PUSH
66016: LD_INT 30
66018: PUSH
66019: LD_INT 31
66021: PUSH
66022: LD_INT 32
66024: PUSH
66025: LD_INT 36
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: LIST
66032: LIST
66033: LIST
66034: LIST
66035: LIST
66036: LIST
66037: LIST
66038: LIST
66039: LIST
66040: LIST
66041: LIST
66042: LIST
66043: LIST
66044: LIST
66045: LIST
66046: LIST
66047: LIST
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 101
66053: PUSH
66054: LD_INT 102
66056: PUSH
66057: LD_INT 103
66059: PUSH
66060: LD_INT 105
66062: PUSH
66063: LD_INT 106
66065: PUSH
66066: LD_INT 108
66068: PUSH
66069: LD_INT 109
66071: PUSH
66072: LD_INT 112
66074: PUSH
66075: LD_INT 114
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: ST_TO_ADDR
66093: GO 68072
66095: LD_INT 10
66097: DOUBLE
66098: EQUAL
66099: IFTRUE 66103
66101: GO 66287
66103: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
66104: LD_ADDR_VAR 0 1
66108: PUSH
66109: LD_INT 2
66111: PUSH
66112: LD_INT 4
66114: PUSH
66115: LD_INT 5
66117: PUSH
66118: LD_INT 6
66120: PUSH
66121: LD_INT 7
66123: PUSH
66124: LD_INT 8
66126: PUSH
66127: LD_INT 9
66129: PUSH
66130: LD_INT 10
66132: PUSH
66133: LD_INT 11
66135: PUSH
66136: LD_INT 12
66138: PUSH
66139: LD_INT 13
66141: PUSH
66142: LD_INT 14
66144: PUSH
66145: LD_INT 15
66147: PUSH
66148: LD_INT 16
66150: PUSH
66151: LD_INT 17
66153: PUSH
66154: LD_INT 18
66156: PUSH
66157: LD_INT 19
66159: PUSH
66160: LD_INT 20
66162: PUSH
66163: LD_INT 21
66165: PUSH
66166: LD_INT 22
66168: PUSH
66169: LD_INT 23
66171: PUSH
66172: LD_INT 24
66174: PUSH
66175: LD_INT 25
66177: PUSH
66178: LD_INT 26
66180: PUSH
66181: LD_INT 28
66183: PUSH
66184: LD_INT 30
66186: PUSH
66187: LD_INT 31
66189: PUSH
66190: LD_INT 32
66192: PUSH
66193: LD_INT 36
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 101
66229: PUSH
66230: LD_INT 102
66232: PUSH
66233: LD_INT 103
66235: PUSH
66236: LD_INT 104
66238: PUSH
66239: LD_INT 105
66241: PUSH
66242: LD_INT 106
66244: PUSH
66245: LD_INT 107
66247: PUSH
66248: LD_INT 108
66250: PUSH
66251: LD_INT 109
66253: PUSH
66254: LD_INT 110
66256: PUSH
66257: LD_INT 111
66259: PUSH
66260: LD_INT 112
66262: PUSH
66263: LD_INT 114
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: ST_TO_ADDR
66285: GO 68072
66287: LD_INT 11
66289: DOUBLE
66290: EQUAL
66291: IFTRUE 66295
66293: GO 66487
66295: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
66296: LD_ADDR_VAR 0 1
66300: PUSH
66301: LD_INT 2
66303: PUSH
66304: LD_INT 3
66306: PUSH
66307: LD_INT 4
66309: PUSH
66310: LD_INT 5
66312: PUSH
66313: LD_INT 6
66315: PUSH
66316: LD_INT 7
66318: PUSH
66319: LD_INT 8
66321: PUSH
66322: LD_INT 9
66324: PUSH
66325: LD_INT 10
66327: PUSH
66328: LD_INT 11
66330: PUSH
66331: LD_INT 12
66333: PUSH
66334: LD_INT 13
66336: PUSH
66337: LD_INT 14
66339: PUSH
66340: LD_INT 15
66342: PUSH
66343: LD_INT 16
66345: PUSH
66346: LD_INT 17
66348: PUSH
66349: LD_INT 18
66351: PUSH
66352: LD_INT 19
66354: PUSH
66355: LD_INT 20
66357: PUSH
66358: LD_INT 21
66360: PUSH
66361: LD_INT 22
66363: PUSH
66364: LD_INT 23
66366: PUSH
66367: LD_INT 24
66369: PUSH
66370: LD_INT 25
66372: PUSH
66373: LD_INT 26
66375: PUSH
66376: LD_INT 28
66378: PUSH
66379: LD_INT 30
66381: PUSH
66382: LD_INT 31
66384: PUSH
66385: LD_INT 32
66387: PUSH
66388: LD_INT 34
66390: PUSH
66391: LD_INT 36
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: LIST
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 101
66429: PUSH
66430: LD_INT 102
66432: PUSH
66433: LD_INT 103
66435: PUSH
66436: LD_INT 104
66438: PUSH
66439: LD_INT 105
66441: PUSH
66442: LD_INT 106
66444: PUSH
66445: LD_INT 107
66447: PUSH
66448: LD_INT 108
66450: PUSH
66451: LD_INT 109
66453: PUSH
66454: LD_INT 110
66456: PUSH
66457: LD_INT 111
66459: PUSH
66460: LD_INT 112
66462: PUSH
66463: LD_INT 114
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: ST_TO_ADDR
66485: GO 68072
66487: LD_INT 12
66489: DOUBLE
66490: EQUAL
66491: IFTRUE 66495
66493: GO 66703
66495: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
66496: LD_ADDR_VAR 0 1
66500: PUSH
66501: LD_INT 1
66503: PUSH
66504: LD_INT 2
66506: PUSH
66507: LD_INT 3
66509: PUSH
66510: LD_INT 4
66512: PUSH
66513: LD_INT 5
66515: PUSH
66516: LD_INT 6
66518: PUSH
66519: LD_INT 7
66521: PUSH
66522: LD_INT 8
66524: PUSH
66525: LD_INT 9
66527: PUSH
66528: LD_INT 10
66530: PUSH
66531: LD_INT 11
66533: PUSH
66534: LD_INT 12
66536: PUSH
66537: LD_INT 13
66539: PUSH
66540: LD_INT 14
66542: PUSH
66543: LD_INT 15
66545: PUSH
66546: LD_INT 16
66548: PUSH
66549: LD_INT 17
66551: PUSH
66552: LD_INT 18
66554: PUSH
66555: LD_INT 19
66557: PUSH
66558: LD_INT 20
66560: PUSH
66561: LD_INT 21
66563: PUSH
66564: LD_INT 22
66566: PUSH
66567: LD_INT 23
66569: PUSH
66570: LD_INT 24
66572: PUSH
66573: LD_INT 25
66575: PUSH
66576: LD_INT 26
66578: PUSH
66579: LD_INT 27
66581: PUSH
66582: LD_INT 28
66584: PUSH
66585: LD_INT 30
66587: PUSH
66588: LD_INT 31
66590: PUSH
66591: LD_INT 32
66593: PUSH
66594: LD_INT 33
66596: PUSH
66597: LD_INT 34
66599: PUSH
66600: LD_INT 36
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: PUSH
66639: LD_INT 101
66641: PUSH
66642: LD_INT 102
66644: PUSH
66645: LD_INT 103
66647: PUSH
66648: LD_INT 104
66650: PUSH
66651: LD_INT 105
66653: PUSH
66654: LD_INT 106
66656: PUSH
66657: LD_INT 107
66659: PUSH
66660: LD_INT 108
66662: PUSH
66663: LD_INT 109
66665: PUSH
66666: LD_INT 110
66668: PUSH
66669: LD_INT 111
66671: PUSH
66672: LD_INT 112
66674: PUSH
66675: LD_INT 113
66677: PUSH
66678: LD_INT 114
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: ST_TO_ADDR
66701: GO 68072
66703: LD_INT 13
66705: DOUBLE
66706: EQUAL
66707: IFTRUE 66711
66709: GO 66907
66711: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
66712: LD_ADDR_VAR 0 1
66716: PUSH
66717: LD_INT 1
66719: PUSH
66720: LD_INT 2
66722: PUSH
66723: LD_INT 3
66725: PUSH
66726: LD_INT 4
66728: PUSH
66729: LD_INT 5
66731: PUSH
66732: LD_INT 8
66734: PUSH
66735: LD_INT 9
66737: PUSH
66738: LD_INT 10
66740: PUSH
66741: LD_INT 11
66743: PUSH
66744: LD_INT 12
66746: PUSH
66747: LD_INT 14
66749: PUSH
66750: LD_INT 15
66752: PUSH
66753: LD_INT 16
66755: PUSH
66756: LD_INT 17
66758: PUSH
66759: LD_INT 18
66761: PUSH
66762: LD_INT 19
66764: PUSH
66765: LD_INT 20
66767: PUSH
66768: LD_INT 21
66770: PUSH
66771: LD_INT 22
66773: PUSH
66774: LD_INT 23
66776: PUSH
66777: LD_INT 24
66779: PUSH
66780: LD_INT 25
66782: PUSH
66783: LD_INT 26
66785: PUSH
66786: LD_INT 27
66788: PUSH
66789: LD_INT 28
66791: PUSH
66792: LD_INT 30
66794: PUSH
66795: LD_INT 31
66797: PUSH
66798: LD_INT 32
66800: PUSH
66801: LD_INT 33
66803: PUSH
66804: LD_INT 34
66806: PUSH
66807: LD_INT 36
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 101
66845: PUSH
66846: LD_INT 102
66848: PUSH
66849: LD_INT 103
66851: PUSH
66852: LD_INT 104
66854: PUSH
66855: LD_INT 105
66857: PUSH
66858: LD_INT 106
66860: PUSH
66861: LD_INT 107
66863: PUSH
66864: LD_INT 108
66866: PUSH
66867: LD_INT 109
66869: PUSH
66870: LD_INT 110
66872: PUSH
66873: LD_INT 111
66875: PUSH
66876: LD_INT 112
66878: PUSH
66879: LD_INT 113
66881: PUSH
66882: LD_INT 114
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: ST_TO_ADDR
66905: GO 68072
66907: LD_INT 14
66909: DOUBLE
66910: EQUAL
66911: IFTRUE 66915
66913: GO 67127
66915: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
66916: LD_ADDR_VAR 0 1
66920: PUSH
66921: LD_INT 1
66923: PUSH
66924: LD_INT 2
66926: PUSH
66927: LD_INT 3
66929: PUSH
66930: LD_INT 4
66932: PUSH
66933: LD_INT 5
66935: PUSH
66936: LD_INT 6
66938: PUSH
66939: LD_INT 7
66941: PUSH
66942: LD_INT 8
66944: PUSH
66945: LD_INT 9
66947: PUSH
66948: LD_INT 10
66950: PUSH
66951: LD_INT 11
66953: PUSH
66954: LD_INT 12
66956: PUSH
66957: LD_INT 13
66959: PUSH
66960: LD_INT 14
66962: PUSH
66963: LD_INT 15
66965: PUSH
66966: LD_INT 16
66968: PUSH
66969: LD_INT 17
66971: PUSH
66972: LD_INT 18
66974: PUSH
66975: LD_INT 19
66977: PUSH
66978: LD_INT 20
66980: PUSH
66981: LD_INT 21
66983: PUSH
66984: LD_INT 22
66986: PUSH
66987: LD_INT 23
66989: PUSH
66990: LD_INT 24
66992: PUSH
66993: LD_INT 25
66995: PUSH
66996: LD_INT 26
66998: PUSH
66999: LD_INT 27
67001: PUSH
67002: LD_INT 28
67004: PUSH
67005: LD_INT 29
67007: PUSH
67008: LD_INT 30
67010: PUSH
67011: LD_INT 31
67013: PUSH
67014: LD_INT 32
67016: PUSH
67017: LD_INT 33
67019: PUSH
67020: LD_INT 34
67022: PUSH
67023: LD_INT 36
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: LIST
67030: LIST
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: LIST
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 101
67065: PUSH
67066: LD_INT 102
67068: PUSH
67069: LD_INT 103
67071: PUSH
67072: LD_INT 104
67074: PUSH
67075: LD_INT 105
67077: PUSH
67078: LD_INT 106
67080: PUSH
67081: LD_INT 107
67083: PUSH
67084: LD_INT 108
67086: PUSH
67087: LD_INT 109
67089: PUSH
67090: LD_INT 110
67092: PUSH
67093: LD_INT 111
67095: PUSH
67096: LD_INT 112
67098: PUSH
67099: LD_INT 113
67101: PUSH
67102: LD_INT 114
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: LIST
67118: LIST
67119: LIST
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: ST_TO_ADDR
67125: GO 68072
67127: LD_INT 15
67129: DOUBLE
67130: EQUAL
67131: IFTRUE 67135
67133: GO 67347
67135: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
67136: LD_ADDR_VAR 0 1
67140: PUSH
67141: LD_INT 1
67143: PUSH
67144: LD_INT 2
67146: PUSH
67147: LD_INT 3
67149: PUSH
67150: LD_INT 4
67152: PUSH
67153: LD_INT 5
67155: PUSH
67156: LD_INT 6
67158: PUSH
67159: LD_INT 7
67161: PUSH
67162: LD_INT 8
67164: PUSH
67165: LD_INT 9
67167: PUSH
67168: LD_INT 10
67170: PUSH
67171: LD_INT 11
67173: PUSH
67174: LD_INT 12
67176: PUSH
67177: LD_INT 13
67179: PUSH
67180: LD_INT 14
67182: PUSH
67183: LD_INT 15
67185: PUSH
67186: LD_INT 16
67188: PUSH
67189: LD_INT 17
67191: PUSH
67192: LD_INT 18
67194: PUSH
67195: LD_INT 19
67197: PUSH
67198: LD_INT 20
67200: PUSH
67201: LD_INT 21
67203: PUSH
67204: LD_INT 22
67206: PUSH
67207: LD_INT 23
67209: PUSH
67210: LD_INT 24
67212: PUSH
67213: LD_INT 25
67215: PUSH
67216: LD_INT 26
67218: PUSH
67219: LD_INT 27
67221: PUSH
67222: LD_INT 28
67224: PUSH
67225: LD_INT 29
67227: PUSH
67228: LD_INT 30
67230: PUSH
67231: LD_INT 31
67233: PUSH
67234: LD_INT 32
67236: PUSH
67237: LD_INT 33
67239: PUSH
67240: LD_INT 34
67242: PUSH
67243: LD_INT 36
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 101
67285: PUSH
67286: LD_INT 102
67288: PUSH
67289: LD_INT 103
67291: PUSH
67292: LD_INT 104
67294: PUSH
67295: LD_INT 105
67297: PUSH
67298: LD_INT 106
67300: PUSH
67301: LD_INT 107
67303: PUSH
67304: LD_INT 108
67306: PUSH
67307: LD_INT 109
67309: PUSH
67310: LD_INT 110
67312: PUSH
67313: LD_INT 111
67315: PUSH
67316: LD_INT 112
67318: PUSH
67319: LD_INT 113
67321: PUSH
67322: LD_INT 114
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: ST_TO_ADDR
67345: GO 68072
67347: LD_INT 16
67349: DOUBLE
67350: EQUAL
67351: IFTRUE 67355
67353: GO 67479
67355: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
67356: LD_ADDR_VAR 0 1
67360: PUSH
67361: LD_INT 2
67363: PUSH
67364: LD_INT 4
67366: PUSH
67367: LD_INT 5
67369: PUSH
67370: LD_INT 7
67372: PUSH
67373: LD_INT 11
67375: PUSH
67376: LD_INT 12
67378: PUSH
67379: LD_INT 15
67381: PUSH
67382: LD_INT 16
67384: PUSH
67385: LD_INT 20
67387: PUSH
67388: LD_INT 21
67390: PUSH
67391: LD_INT 22
67393: PUSH
67394: LD_INT 23
67396: PUSH
67397: LD_INT 25
67399: PUSH
67400: LD_INT 26
67402: PUSH
67403: LD_INT 30
67405: PUSH
67406: LD_INT 31
67408: PUSH
67409: LD_INT 32
67411: PUSH
67412: LD_INT 33
67414: PUSH
67415: LD_INT 34
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: LIST
67432: LIST
67433: LIST
67434: LIST
67435: LIST
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 101
67441: PUSH
67442: LD_INT 102
67444: PUSH
67445: LD_INT 103
67447: PUSH
67448: LD_INT 106
67450: PUSH
67451: LD_INT 108
67453: PUSH
67454: LD_INT 112
67456: PUSH
67457: LD_INT 113
67459: PUSH
67460: LD_INT 114
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: ST_TO_ADDR
67477: GO 68072
67479: LD_INT 17
67481: DOUBLE
67482: EQUAL
67483: IFTRUE 67487
67485: GO 67699
67487: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
67488: LD_ADDR_VAR 0 1
67492: PUSH
67493: LD_INT 1
67495: PUSH
67496: LD_INT 2
67498: PUSH
67499: LD_INT 3
67501: PUSH
67502: LD_INT 4
67504: PUSH
67505: LD_INT 5
67507: PUSH
67508: LD_INT 6
67510: PUSH
67511: LD_INT 7
67513: PUSH
67514: LD_INT 8
67516: PUSH
67517: LD_INT 9
67519: PUSH
67520: LD_INT 10
67522: PUSH
67523: LD_INT 11
67525: PUSH
67526: LD_INT 12
67528: PUSH
67529: LD_INT 13
67531: PUSH
67532: LD_INT 14
67534: PUSH
67535: LD_INT 15
67537: PUSH
67538: LD_INT 16
67540: PUSH
67541: LD_INT 17
67543: PUSH
67544: LD_INT 18
67546: PUSH
67547: LD_INT 19
67549: PUSH
67550: LD_INT 20
67552: PUSH
67553: LD_INT 21
67555: PUSH
67556: LD_INT 22
67558: PUSH
67559: LD_INT 23
67561: PUSH
67562: LD_INT 24
67564: PUSH
67565: LD_INT 25
67567: PUSH
67568: LD_INT 26
67570: PUSH
67571: LD_INT 27
67573: PUSH
67574: LD_INT 28
67576: PUSH
67577: LD_INT 29
67579: PUSH
67580: LD_INT 30
67582: PUSH
67583: LD_INT 31
67585: PUSH
67586: LD_INT 32
67588: PUSH
67589: LD_INT 33
67591: PUSH
67592: LD_INT 34
67594: PUSH
67595: LD_INT 36
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: LIST
67602: LIST
67603: LIST
67604: LIST
67605: LIST
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: LIST
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: LIST
67634: PUSH
67635: LD_INT 101
67637: PUSH
67638: LD_INT 102
67640: PUSH
67641: LD_INT 103
67643: PUSH
67644: LD_INT 104
67646: PUSH
67647: LD_INT 105
67649: PUSH
67650: LD_INT 106
67652: PUSH
67653: LD_INT 107
67655: PUSH
67656: LD_INT 108
67658: PUSH
67659: LD_INT 109
67661: PUSH
67662: LD_INT 110
67664: PUSH
67665: LD_INT 111
67667: PUSH
67668: LD_INT 112
67670: PUSH
67671: LD_INT 113
67673: PUSH
67674: LD_INT 114
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: LIST
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: LIST
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: ST_TO_ADDR
67697: GO 68072
67699: LD_INT 18
67701: DOUBLE
67702: EQUAL
67703: IFTRUE 67707
67705: GO 67843
67707: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
67708: LD_ADDR_VAR 0 1
67712: PUSH
67713: LD_INT 2
67715: PUSH
67716: LD_INT 4
67718: PUSH
67719: LD_INT 5
67721: PUSH
67722: LD_INT 7
67724: PUSH
67725: LD_INT 11
67727: PUSH
67728: LD_INT 12
67730: PUSH
67731: LD_INT 15
67733: PUSH
67734: LD_INT 16
67736: PUSH
67737: LD_INT 20
67739: PUSH
67740: LD_INT 21
67742: PUSH
67743: LD_INT 22
67745: PUSH
67746: LD_INT 23
67748: PUSH
67749: LD_INT 25
67751: PUSH
67752: LD_INT 26
67754: PUSH
67755: LD_INT 30
67757: PUSH
67758: LD_INT 31
67760: PUSH
67761: LD_INT 32
67763: PUSH
67764: LD_INT 33
67766: PUSH
67767: LD_INT 34
67769: PUSH
67770: LD_INT 35
67772: PUSH
67773: LD_INT 36
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: LIST
67789: LIST
67790: LIST
67791: LIST
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: PUSH
67799: LD_INT 101
67801: PUSH
67802: LD_INT 102
67804: PUSH
67805: LD_INT 103
67807: PUSH
67808: LD_INT 106
67810: PUSH
67811: LD_INT 108
67813: PUSH
67814: LD_INT 112
67816: PUSH
67817: LD_INT 113
67819: PUSH
67820: LD_INT 114
67822: PUSH
67823: LD_INT 115
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: LIST
67833: LIST
67834: LIST
67835: LIST
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: ST_TO_ADDR
67841: GO 68072
67843: LD_INT 19
67845: DOUBLE
67846: EQUAL
67847: IFTRUE 67851
67849: GO 68071
67851: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
67852: LD_ADDR_VAR 0 1
67856: PUSH
67857: LD_INT 1
67859: PUSH
67860: LD_INT 2
67862: PUSH
67863: LD_INT 3
67865: PUSH
67866: LD_INT 4
67868: PUSH
67869: LD_INT 5
67871: PUSH
67872: LD_INT 6
67874: PUSH
67875: LD_INT 7
67877: PUSH
67878: LD_INT 8
67880: PUSH
67881: LD_INT 9
67883: PUSH
67884: LD_INT 10
67886: PUSH
67887: LD_INT 11
67889: PUSH
67890: LD_INT 12
67892: PUSH
67893: LD_INT 13
67895: PUSH
67896: LD_INT 14
67898: PUSH
67899: LD_INT 15
67901: PUSH
67902: LD_INT 16
67904: PUSH
67905: LD_INT 17
67907: PUSH
67908: LD_INT 18
67910: PUSH
67911: LD_INT 19
67913: PUSH
67914: LD_INT 20
67916: PUSH
67917: LD_INT 21
67919: PUSH
67920: LD_INT 22
67922: PUSH
67923: LD_INT 23
67925: PUSH
67926: LD_INT 24
67928: PUSH
67929: LD_INT 25
67931: PUSH
67932: LD_INT 26
67934: PUSH
67935: LD_INT 27
67937: PUSH
67938: LD_INT 28
67940: PUSH
67941: LD_INT 29
67943: PUSH
67944: LD_INT 30
67946: PUSH
67947: LD_INT 31
67949: PUSH
67950: LD_INT 32
67952: PUSH
67953: LD_INT 33
67955: PUSH
67956: LD_INT 34
67958: PUSH
67959: LD_INT 35
67961: PUSH
67962: LD_INT 36
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: LIST
67969: LIST
67970: LIST
67971: LIST
67972: LIST
67973: LIST
67974: LIST
67975: LIST
67976: LIST
67977: LIST
67978: LIST
67979: LIST
67980: LIST
67981: LIST
67982: LIST
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: LIST
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: PUSH
68003: LD_INT 101
68005: PUSH
68006: LD_INT 102
68008: PUSH
68009: LD_INT 103
68011: PUSH
68012: LD_INT 104
68014: PUSH
68015: LD_INT 105
68017: PUSH
68018: LD_INT 106
68020: PUSH
68021: LD_INT 107
68023: PUSH
68024: LD_INT 108
68026: PUSH
68027: LD_INT 109
68029: PUSH
68030: LD_INT 110
68032: PUSH
68033: LD_INT 111
68035: PUSH
68036: LD_INT 112
68038: PUSH
68039: LD_INT 113
68041: PUSH
68042: LD_INT 114
68044: PUSH
68045: LD_INT 115
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: ST_TO_ADDR
68069: GO 68072
68071: POP
// end else
68072: GO 68291
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
68074: LD_ADDR_VAR 0 1
68078: PUSH
68079: LD_INT 1
68081: PUSH
68082: LD_INT 2
68084: PUSH
68085: LD_INT 3
68087: PUSH
68088: LD_INT 4
68090: PUSH
68091: LD_INT 5
68093: PUSH
68094: LD_INT 6
68096: PUSH
68097: LD_INT 7
68099: PUSH
68100: LD_INT 8
68102: PUSH
68103: LD_INT 9
68105: PUSH
68106: LD_INT 10
68108: PUSH
68109: LD_INT 11
68111: PUSH
68112: LD_INT 12
68114: PUSH
68115: LD_INT 13
68117: PUSH
68118: LD_INT 14
68120: PUSH
68121: LD_INT 15
68123: PUSH
68124: LD_INT 16
68126: PUSH
68127: LD_INT 17
68129: PUSH
68130: LD_INT 18
68132: PUSH
68133: LD_INT 19
68135: PUSH
68136: LD_INT 20
68138: PUSH
68139: LD_INT 21
68141: PUSH
68142: LD_INT 22
68144: PUSH
68145: LD_INT 23
68147: PUSH
68148: LD_INT 24
68150: PUSH
68151: LD_INT 25
68153: PUSH
68154: LD_INT 26
68156: PUSH
68157: LD_INT 27
68159: PUSH
68160: LD_INT 28
68162: PUSH
68163: LD_INT 29
68165: PUSH
68166: LD_INT 30
68168: PUSH
68169: LD_INT 31
68171: PUSH
68172: LD_INT 32
68174: PUSH
68175: LD_INT 33
68177: PUSH
68178: LD_INT 34
68180: PUSH
68181: LD_INT 35
68183: PUSH
68184: LD_INT 36
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: LIST
68191: LIST
68192: LIST
68193: LIST
68194: LIST
68195: LIST
68196: LIST
68197: LIST
68198: LIST
68199: LIST
68200: LIST
68201: LIST
68202: LIST
68203: LIST
68204: LIST
68205: LIST
68206: LIST
68207: LIST
68208: LIST
68209: LIST
68210: LIST
68211: LIST
68212: LIST
68213: LIST
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: LIST
68221: LIST
68222: LIST
68223: LIST
68224: PUSH
68225: LD_INT 101
68227: PUSH
68228: LD_INT 102
68230: PUSH
68231: LD_INT 103
68233: PUSH
68234: LD_INT 104
68236: PUSH
68237: LD_INT 105
68239: PUSH
68240: LD_INT 106
68242: PUSH
68243: LD_INT 107
68245: PUSH
68246: LD_INT 108
68248: PUSH
68249: LD_INT 109
68251: PUSH
68252: LD_INT 110
68254: PUSH
68255: LD_INT 111
68257: PUSH
68258: LD_INT 112
68260: PUSH
68261: LD_INT 113
68263: PUSH
68264: LD_INT 114
68266: PUSH
68267: LD_INT 115
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: LIST
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: ST_TO_ADDR
// if result then
68291: LD_VAR 0 1
68295: IFFALSE 68584
// begin normal :=  ;
68297: LD_ADDR_VAR 0 3
68301: PUSH
68302: LD_STRING 
68304: ST_TO_ADDR
// hardcore :=  ;
68305: LD_ADDR_VAR 0 4
68309: PUSH
68310: LD_STRING 
68312: ST_TO_ADDR
// for i = 1 to normalCounter do
68313: LD_ADDR_VAR 0 5
68317: PUSH
68318: DOUBLE
68319: LD_INT 1
68321: DEC
68322: ST_TO_ADDR
68323: LD_EXP 78
68327: PUSH
68328: FOR_TO
68329: IFFALSE 68430
// begin tmp := 0 ;
68331: LD_ADDR_VAR 0 2
68335: PUSH
68336: LD_STRING 0
68338: ST_TO_ADDR
// if result [ 1 ] then
68339: LD_VAR 0 1
68343: PUSH
68344: LD_INT 1
68346: ARRAY
68347: IFFALSE 68412
// if result [ 1 ] [ 1 ] = i then
68349: LD_VAR 0 1
68353: PUSH
68354: LD_INT 1
68356: ARRAY
68357: PUSH
68358: LD_INT 1
68360: ARRAY
68361: PUSH
68362: LD_VAR 0 5
68366: EQUAL
68367: IFFALSE 68412
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
68369: LD_ADDR_VAR 0 1
68373: PUSH
68374: LD_VAR 0 1
68378: PPUSH
68379: LD_INT 1
68381: PPUSH
68382: LD_VAR 0 1
68386: PUSH
68387: LD_INT 1
68389: ARRAY
68390: PPUSH
68391: LD_INT 1
68393: PPUSH
68394: CALL_OW 3
68398: PPUSH
68399: CALL_OW 1
68403: ST_TO_ADDR
// tmp := 1 ;
68404: LD_ADDR_VAR 0 2
68408: PUSH
68409: LD_STRING 1
68411: ST_TO_ADDR
// end ; normal := normal & tmp ;
68412: LD_ADDR_VAR 0 3
68416: PUSH
68417: LD_VAR 0 3
68421: PUSH
68422: LD_VAR 0 2
68426: STR
68427: ST_TO_ADDR
// end ;
68428: GO 68328
68430: POP
68431: POP
// for i = 1 to hardcoreCounter do
68432: LD_ADDR_VAR 0 5
68436: PUSH
68437: DOUBLE
68438: LD_INT 1
68440: DEC
68441: ST_TO_ADDR
68442: LD_EXP 79
68446: PUSH
68447: FOR_TO
68448: IFFALSE 68553
// begin tmp := 0 ;
68450: LD_ADDR_VAR 0 2
68454: PUSH
68455: LD_STRING 0
68457: ST_TO_ADDR
// if result [ 2 ] then
68458: LD_VAR 0 1
68462: PUSH
68463: LD_INT 2
68465: ARRAY
68466: IFFALSE 68535
// if result [ 2 ] [ 1 ] = 100 + i then
68468: LD_VAR 0 1
68472: PUSH
68473: LD_INT 2
68475: ARRAY
68476: PUSH
68477: LD_INT 1
68479: ARRAY
68480: PUSH
68481: LD_INT 100
68483: PUSH
68484: LD_VAR 0 5
68488: PLUS
68489: EQUAL
68490: IFFALSE 68535
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
68492: LD_ADDR_VAR 0 1
68496: PUSH
68497: LD_VAR 0 1
68501: PPUSH
68502: LD_INT 2
68504: PPUSH
68505: LD_VAR 0 1
68509: PUSH
68510: LD_INT 2
68512: ARRAY
68513: PPUSH
68514: LD_INT 1
68516: PPUSH
68517: CALL_OW 3
68521: PPUSH
68522: CALL_OW 1
68526: ST_TO_ADDR
// tmp := 1 ;
68527: LD_ADDR_VAR 0 2
68531: PUSH
68532: LD_STRING 1
68534: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
68535: LD_ADDR_VAR 0 4
68539: PUSH
68540: LD_VAR 0 4
68544: PUSH
68545: LD_VAR 0 2
68549: STR
68550: ST_TO_ADDR
// end ;
68551: GO 68447
68553: POP
68554: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
68555: LD_STRING getStreamItemsFromMission("
68557: PUSH
68558: LD_VAR 0 3
68562: STR
68563: PUSH
68564: LD_STRING ","
68566: STR
68567: PUSH
68568: LD_VAR 0 4
68572: STR
68573: PUSH
68574: LD_STRING ")
68576: STR
68577: PPUSH
68578: CALL_OW 559
// end else
68582: GO 68591
// ToLua ( getStreamItemsFromMission("","") ) ;
68584: LD_STRING getStreamItemsFromMission("","")
68586: PPUSH
68587: CALL_OW 559
// end ;
68591: LD_VAR 0 1
68595: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
68596: LD_EXP 77
68600: PUSH
68601: LD_EXP 82
68605: AND
68606: IFFALSE 68730
68608: GO 68610
68610: DISABLE
68611: LD_INT 0
68613: PPUSH
68614: PPUSH
// begin enable ;
68615: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
68616: LD_ADDR_VAR 0 2
68620: PUSH
68621: LD_INT 22
68623: PUSH
68624: LD_OWVAR 2
68628: PUSH
68629: EMPTY
68630: LIST
68631: LIST
68632: PUSH
68633: LD_INT 2
68635: PUSH
68636: LD_INT 34
68638: PUSH
68639: LD_INT 7
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: LD_INT 34
68648: PUSH
68649: LD_INT 45
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: PUSH
68656: LD_INT 34
68658: PUSH
68659: LD_INT 28
68661: PUSH
68662: EMPTY
68663: LIST
68664: LIST
68665: PUSH
68666: LD_INT 34
68668: PUSH
68669: LD_INT 47
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PPUSH
68687: CALL_OW 69
68691: ST_TO_ADDR
// if not tmp then
68692: LD_VAR 0 2
68696: NOT
68697: IFFALSE 68701
// exit ;
68699: GO 68730
// for i in tmp do
68701: LD_ADDR_VAR 0 1
68705: PUSH
68706: LD_VAR 0 2
68710: PUSH
68711: FOR_IN
68712: IFFALSE 68728
// begin SetLives ( i , 0 ) ;
68714: LD_VAR 0 1
68718: PPUSH
68719: LD_INT 0
68721: PPUSH
68722: CALL_OW 234
// end ;
68726: GO 68711
68728: POP
68729: POP
// end ;
68730: PPOPN 2
68732: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
68733: LD_EXP 77
68737: PUSH
68738: LD_EXP 83
68742: AND
68743: IFFALSE 68827
68745: GO 68747
68747: DISABLE
68748: LD_INT 0
68750: PPUSH
68751: PPUSH
// begin enable ;
68752: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
68753: LD_ADDR_VAR 0 2
68757: PUSH
68758: LD_INT 22
68760: PUSH
68761: LD_OWVAR 2
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: PUSH
68770: LD_INT 32
68772: PUSH
68773: LD_INT 3
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PPUSH
68784: CALL_OW 69
68788: ST_TO_ADDR
// if not tmp then
68789: LD_VAR 0 2
68793: NOT
68794: IFFALSE 68798
// exit ;
68796: GO 68827
// for i in tmp do
68798: LD_ADDR_VAR 0 1
68802: PUSH
68803: LD_VAR 0 2
68807: PUSH
68808: FOR_IN
68809: IFFALSE 68825
// begin SetLives ( i , 0 ) ;
68811: LD_VAR 0 1
68815: PPUSH
68816: LD_INT 0
68818: PPUSH
68819: CALL_OW 234
// end ;
68823: GO 68808
68825: POP
68826: POP
// end ;
68827: PPOPN 2
68829: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
68830: LD_EXP 77
68834: PUSH
68835: LD_EXP 80
68839: AND
68840: IFFALSE 68933
68842: GO 68844
68844: DISABLE
68845: LD_INT 0
68847: PPUSH
// begin enable ;
68848: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
68849: LD_ADDR_VAR 0 1
68853: PUSH
68854: LD_INT 22
68856: PUSH
68857: LD_OWVAR 2
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: PUSH
68866: LD_INT 2
68868: PUSH
68869: LD_INT 25
68871: PUSH
68872: LD_INT 5
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: LD_INT 25
68881: PUSH
68882: LD_INT 9
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 25
68891: PUSH
68892: LD_INT 8
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: LIST
68903: LIST
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PPUSH
68909: CALL_OW 69
68913: PUSH
68914: FOR_IN
68915: IFFALSE 68931
// begin SetClass ( i , 1 ) ;
68917: LD_VAR 0 1
68921: PPUSH
68922: LD_INT 1
68924: PPUSH
68925: CALL_OW 336
// end ;
68929: GO 68914
68931: POP
68932: POP
// end ;
68933: PPOPN 1
68935: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
68936: LD_EXP 77
68940: PUSH
68941: LD_EXP 81
68945: AND
68946: PUSH
68947: LD_OWVAR 65
68951: PUSH
68952: LD_INT 7
68954: LESS
68955: AND
68956: IFFALSE 68970
68958: GO 68960
68960: DISABLE
// begin enable ;
68961: ENABLE
// game_speed := 7 ;
68962: LD_ADDR_OWVAR 65
68966: PUSH
68967: LD_INT 7
68969: ST_TO_ADDR
// end ;
68970: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
68971: LD_EXP 77
68975: PUSH
68976: LD_EXP 84
68980: AND
68981: IFFALSE 69183
68983: GO 68985
68985: DISABLE
68986: LD_INT 0
68988: PPUSH
68989: PPUSH
68990: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
68991: LD_ADDR_VAR 0 3
68995: PUSH
68996: LD_INT 81
68998: PUSH
68999: LD_OWVAR 2
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: LD_INT 21
69010: PUSH
69011: LD_INT 1
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: PPUSH
69022: CALL_OW 69
69026: ST_TO_ADDR
// if not tmp then
69027: LD_VAR 0 3
69031: NOT
69032: IFFALSE 69036
// exit ;
69034: GO 69183
// if tmp > 5 then
69036: LD_VAR 0 3
69040: PUSH
69041: LD_INT 5
69043: GREATER
69044: IFFALSE 69056
// k := 5 else
69046: LD_ADDR_VAR 0 2
69050: PUSH
69051: LD_INT 5
69053: ST_TO_ADDR
69054: GO 69066
// k := tmp ;
69056: LD_ADDR_VAR 0 2
69060: PUSH
69061: LD_VAR 0 3
69065: ST_TO_ADDR
// for i := 1 to k do
69066: LD_ADDR_VAR 0 1
69070: PUSH
69071: DOUBLE
69072: LD_INT 1
69074: DEC
69075: ST_TO_ADDR
69076: LD_VAR 0 2
69080: PUSH
69081: FOR_TO
69082: IFFALSE 69181
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
69084: LD_VAR 0 3
69088: PUSH
69089: LD_VAR 0 1
69093: ARRAY
69094: PPUSH
69095: LD_VAR 0 1
69099: PUSH
69100: LD_INT 4
69102: MOD
69103: PUSH
69104: LD_INT 1
69106: PLUS
69107: PPUSH
69108: CALL_OW 259
69112: PUSH
69113: LD_INT 10
69115: LESS
69116: IFFALSE 69179
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
69118: LD_VAR 0 3
69122: PUSH
69123: LD_VAR 0 1
69127: ARRAY
69128: PPUSH
69129: LD_VAR 0 1
69133: PUSH
69134: LD_INT 4
69136: MOD
69137: PUSH
69138: LD_INT 1
69140: PLUS
69141: PPUSH
69142: LD_VAR 0 3
69146: PUSH
69147: LD_VAR 0 1
69151: ARRAY
69152: PPUSH
69153: LD_VAR 0 1
69157: PUSH
69158: LD_INT 4
69160: MOD
69161: PUSH
69162: LD_INT 1
69164: PLUS
69165: PPUSH
69166: CALL_OW 259
69170: PUSH
69171: LD_INT 1
69173: PLUS
69174: PPUSH
69175: CALL_OW 237
69179: GO 69081
69181: POP
69182: POP
// end ;
69183: PPOPN 3
69185: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
69186: LD_EXP 77
69190: PUSH
69191: LD_EXP 85
69195: AND
69196: IFFALSE 69216
69198: GO 69200
69200: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
69201: LD_INT 4
69203: PPUSH
69204: LD_OWVAR 2
69208: PPUSH
69209: LD_INT 0
69211: PPUSH
69212: CALL_OW 324
69216: END
// every 0 0$1 trigger StreamModeActive and sShovel do
69217: LD_EXP 77
69221: PUSH
69222: LD_EXP 114
69226: AND
69227: IFFALSE 69247
69229: GO 69231
69231: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
69232: LD_INT 19
69234: PPUSH
69235: LD_OWVAR 2
69239: PPUSH
69240: LD_INT 0
69242: PPUSH
69243: CALL_OW 324
69247: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
69248: LD_EXP 77
69252: PUSH
69253: LD_EXP 86
69257: AND
69258: IFFALSE 69360
69260: GO 69262
69262: DISABLE
69263: LD_INT 0
69265: PPUSH
69266: PPUSH
// begin enable ;
69267: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
69268: LD_ADDR_VAR 0 2
69272: PUSH
69273: LD_INT 22
69275: PUSH
69276: LD_OWVAR 2
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: LD_INT 2
69287: PUSH
69288: LD_INT 34
69290: PUSH
69291: LD_INT 11
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 34
69300: PUSH
69301: LD_INT 30
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: LIST
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: PPUSH
69317: CALL_OW 69
69321: ST_TO_ADDR
// if not tmp then
69322: LD_VAR 0 2
69326: NOT
69327: IFFALSE 69331
// exit ;
69329: GO 69360
// for i in tmp do
69331: LD_ADDR_VAR 0 1
69335: PUSH
69336: LD_VAR 0 2
69340: PUSH
69341: FOR_IN
69342: IFFALSE 69358
// begin SetLives ( i , 0 ) ;
69344: LD_VAR 0 1
69348: PPUSH
69349: LD_INT 0
69351: PPUSH
69352: CALL_OW 234
// end ;
69356: GO 69341
69358: POP
69359: POP
// end ;
69360: PPOPN 2
69362: END
// every 0 0$1 trigger StreamModeActive and sBunker do
69363: LD_EXP 77
69367: PUSH
69368: LD_EXP 87
69372: AND
69373: IFFALSE 69393
69375: GO 69377
69377: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
69378: LD_INT 32
69380: PPUSH
69381: LD_OWVAR 2
69385: PPUSH
69386: LD_INT 0
69388: PPUSH
69389: CALL_OW 324
69393: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
69394: LD_EXP 77
69398: PUSH
69399: LD_EXP 88
69403: AND
69404: IFFALSE 69585
69406: GO 69408
69408: DISABLE
69409: LD_INT 0
69411: PPUSH
69412: PPUSH
69413: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
69414: LD_ADDR_VAR 0 2
69418: PUSH
69419: LD_INT 22
69421: PUSH
69422: LD_OWVAR 2
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: PUSH
69431: LD_INT 33
69433: PUSH
69434: LD_INT 3
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: PPUSH
69445: CALL_OW 69
69449: ST_TO_ADDR
// if not tmp then
69450: LD_VAR 0 2
69454: NOT
69455: IFFALSE 69459
// exit ;
69457: GO 69585
// side := 0 ;
69459: LD_ADDR_VAR 0 3
69463: PUSH
69464: LD_INT 0
69466: ST_TO_ADDR
// for i := 1 to 8 do
69467: LD_ADDR_VAR 0 1
69471: PUSH
69472: DOUBLE
69473: LD_INT 1
69475: DEC
69476: ST_TO_ADDR
69477: LD_INT 8
69479: PUSH
69480: FOR_TO
69481: IFFALSE 69529
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
69483: LD_OWVAR 2
69487: PUSH
69488: LD_VAR 0 1
69492: NONEQUAL
69493: PUSH
69494: LD_OWVAR 2
69498: PPUSH
69499: LD_VAR 0 1
69503: PPUSH
69504: CALL_OW 81
69508: PUSH
69509: LD_INT 2
69511: EQUAL
69512: AND
69513: IFFALSE 69527
// begin side := i ;
69515: LD_ADDR_VAR 0 3
69519: PUSH
69520: LD_VAR 0 1
69524: ST_TO_ADDR
// break ;
69525: GO 69529
// end ;
69527: GO 69480
69529: POP
69530: POP
// if not side then
69531: LD_VAR 0 3
69535: NOT
69536: IFFALSE 69540
// exit ;
69538: GO 69585
// for i := 1 to tmp do
69540: LD_ADDR_VAR 0 1
69544: PUSH
69545: DOUBLE
69546: LD_INT 1
69548: DEC
69549: ST_TO_ADDR
69550: LD_VAR 0 2
69554: PUSH
69555: FOR_TO
69556: IFFALSE 69583
// if Prob ( 60 ) then
69558: LD_INT 60
69560: PPUSH
69561: CALL_OW 13
69565: IFFALSE 69581
// SetSide ( i , side ) ;
69567: LD_VAR 0 1
69571: PPUSH
69572: LD_VAR 0 3
69576: PPUSH
69577: CALL_OW 235
69581: GO 69555
69583: POP
69584: POP
// end ;
69585: PPOPN 3
69587: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
69588: LD_EXP 77
69592: PUSH
69593: LD_EXP 90
69597: AND
69598: IFFALSE 69717
69600: GO 69602
69602: DISABLE
69603: LD_INT 0
69605: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
69606: LD_ADDR_VAR 0 1
69610: PUSH
69611: LD_INT 22
69613: PUSH
69614: LD_OWVAR 2
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: PUSH
69623: LD_INT 21
69625: PUSH
69626: LD_INT 1
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: PUSH
69633: LD_INT 3
69635: PUSH
69636: LD_INT 23
69638: PUSH
69639: LD_INT 0
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: LIST
69654: PPUSH
69655: CALL_OW 69
69659: PUSH
69660: FOR_IN
69661: IFFALSE 69715
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
69663: LD_VAR 0 1
69667: PPUSH
69668: CALL_OW 257
69672: PUSH
69673: LD_INT 1
69675: PUSH
69676: LD_INT 2
69678: PUSH
69679: LD_INT 3
69681: PUSH
69682: LD_INT 4
69684: PUSH
69685: EMPTY
69686: LIST
69687: LIST
69688: LIST
69689: LIST
69690: IN
69691: IFFALSE 69713
// SetClass ( un , rand ( 1 , 4 ) ) ;
69693: LD_VAR 0 1
69697: PPUSH
69698: LD_INT 1
69700: PPUSH
69701: LD_INT 4
69703: PPUSH
69704: CALL_OW 12
69708: PPUSH
69709: CALL_OW 336
69713: GO 69660
69715: POP
69716: POP
// end ;
69717: PPOPN 1
69719: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
69720: LD_EXP 77
69724: PUSH
69725: LD_EXP 89
69729: AND
69730: IFFALSE 69809
69732: GO 69734
69734: DISABLE
69735: LD_INT 0
69737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
69738: LD_ADDR_VAR 0 1
69742: PUSH
69743: LD_INT 22
69745: PUSH
69746: LD_OWVAR 2
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: PUSH
69755: LD_INT 21
69757: PUSH
69758: LD_INT 3
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PPUSH
69769: CALL_OW 69
69773: ST_TO_ADDR
// if not tmp then
69774: LD_VAR 0 1
69778: NOT
69779: IFFALSE 69783
// exit ;
69781: GO 69809
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
69783: LD_VAR 0 1
69787: PUSH
69788: LD_INT 1
69790: PPUSH
69791: LD_VAR 0 1
69795: PPUSH
69796: CALL_OW 12
69800: ARRAY
69801: PPUSH
69802: LD_INT 100
69804: PPUSH
69805: CALL_OW 234
// end ;
69809: PPOPN 1
69811: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
69812: LD_EXP 77
69816: PUSH
69817: LD_EXP 91
69821: AND
69822: IFFALSE 69920
69824: GO 69826
69826: DISABLE
69827: LD_INT 0
69829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
69830: LD_ADDR_VAR 0 1
69834: PUSH
69835: LD_INT 22
69837: PUSH
69838: LD_OWVAR 2
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PUSH
69847: LD_INT 21
69849: PUSH
69850: LD_INT 1
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: PPUSH
69861: CALL_OW 69
69865: ST_TO_ADDR
// if not tmp then
69866: LD_VAR 0 1
69870: NOT
69871: IFFALSE 69875
// exit ;
69873: GO 69920
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
69875: LD_VAR 0 1
69879: PUSH
69880: LD_INT 1
69882: PPUSH
69883: LD_VAR 0 1
69887: PPUSH
69888: CALL_OW 12
69892: ARRAY
69893: PPUSH
69894: LD_INT 1
69896: PPUSH
69897: LD_INT 4
69899: PPUSH
69900: CALL_OW 12
69904: PPUSH
69905: LD_INT 3000
69907: PPUSH
69908: LD_INT 9000
69910: PPUSH
69911: CALL_OW 12
69915: PPUSH
69916: CALL_OW 492
// end ;
69920: PPOPN 1
69922: END
// every 0 0$1 trigger StreamModeActive and sDepot do
69923: LD_EXP 77
69927: PUSH
69928: LD_EXP 92
69932: AND
69933: IFFALSE 69953
69935: GO 69937
69937: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
69938: LD_INT 1
69940: PPUSH
69941: LD_OWVAR 2
69945: PPUSH
69946: LD_INT 0
69948: PPUSH
69949: CALL_OW 324
69953: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
69954: LD_EXP 77
69958: PUSH
69959: LD_EXP 93
69963: AND
69964: IFFALSE 70047
69966: GO 69968
69968: DISABLE
69969: LD_INT 0
69971: PPUSH
69972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
69973: LD_ADDR_VAR 0 2
69977: PUSH
69978: LD_INT 22
69980: PUSH
69981: LD_OWVAR 2
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: PUSH
69990: LD_INT 21
69992: PUSH
69993: LD_INT 3
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: PUSH
70000: EMPTY
70001: LIST
70002: LIST
70003: PPUSH
70004: CALL_OW 69
70008: ST_TO_ADDR
// if not tmp then
70009: LD_VAR 0 2
70013: NOT
70014: IFFALSE 70018
// exit ;
70016: GO 70047
// for i in tmp do
70018: LD_ADDR_VAR 0 1
70022: PUSH
70023: LD_VAR 0 2
70027: PUSH
70028: FOR_IN
70029: IFFALSE 70045
// SetBLevel ( i , 10 ) ;
70031: LD_VAR 0 1
70035: PPUSH
70036: LD_INT 10
70038: PPUSH
70039: CALL_OW 241
70043: GO 70028
70045: POP
70046: POP
// end ;
70047: PPOPN 2
70049: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
70050: LD_EXP 77
70054: PUSH
70055: LD_EXP 94
70059: AND
70060: IFFALSE 70171
70062: GO 70064
70064: DISABLE
70065: LD_INT 0
70067: PPUSH
70068: PPUSH
70069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70070: LD_ADDR_VAR 0 3
70074: PUSH
70075: LD_INT 22
70077: PUSH
70078: LD_OWVAR 2
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PUSH
70087: LD_INT 25
70089: PUSH
70090: LD_INT 1
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: PPUSH
70101: CALL_OW 69
70105: ST_TO_ADDR
// if not tmp then
70106: LD_VAR 0 3
70110: NOT
70111: IFFALSE 70115
// exit ;
70113: GO 70171
// un := tmp [ rand ( 1 , tmp ) ] ;
70115: LD_ADDR_VAR 0 2
70119: PUSH
70120: LD_VAR 0 3
70124: PUSH
70125: LD_INT 1
70127: PPUSH
70128: LD_VAR 0 3
70132: PPUSH
70133: CALL_OW 12
70137: ARRAY
70138: ST_TO_ADDR
// if Crawls ( un ) then
70139: LD_VAR 0 2
70143: PPUSH
70144: CALL_OW 318
70148: IFFALSE 70159
// ComWalk ( un ) ;
70150: LD_VAR 0 2
70154: PPUSH
70155: CALL_OW 138
// SetClass ( un , class_sniper ) ;
70159: LD_VAR 0 2
70163: PPUSH
70164: LD_INT 5
70166: PPUSH
70167: CALL_OW 336
// end ;
70171: PPOPN 3
70173: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
70174: LD_EXP 77
70178: PUSH
70179: LD_EXP 95
70183: AND
70184: PUSH
70185: LD_OWVAR 67
70189: PUSH
70190: LD_INT 3
70192: LESS
70193: AND
70194: IFFALSE 70213
70196: GO 70198
70198: DISABLE
// Difficulty := Difficulty + 1 ;
70199: LD_ADDR_OWVAR 67
70203: PUSH
70204: LD_OWVAR 67
70208: PUSH
70209: LD_INT 1
70211: PLUS
70212: ST_TO_ADDR
70213: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
70214: LD_EXP 77
70218: PUSH
70219: LD_EXP 96
70223: AND
70224: IFFALSE 70327
70226: GO 70228
70228: DISABLE
70229: LD_INT 0
70231: PPUSH
// begin for i := 1 to 5 do
70232: LD_ADDR_VAR 0 1
70236: PUSH
70237: DOUBLE
70238: LD_INT 1
70240: DEC
70241: ST_TO_ADDR
70242: LD_INT 5
70244: PUSH
70245: FOR_TO
70246: IFFALSE 70325
// begin uc_nation := nation_nature ;
70248: LD_ADDR_OWVAR 21
70252: PUSH
70253: LD_INT 0
70255: ST_TO_ADDR
// uc_side := 0 ;
70256: LD_ADDR_OWVAR 20
70260: PUSH
70261: LD_INT 0
70263: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
70264: LD_ADDR_OWVAR 29
70268: PUSH
70269: LD_INT 12
70271: PUSH
70272: LD_INT 12
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: ST_TO_ADDR
// hc_agressivity := 20 ;
70279: LD_ADDR_OWVAR 35
70283: PUSH
70284: LD_INT 20
70286: ST_TO_ADDR
// hc_class := class_tiger ;
70287: LD_ADDR_OWVAR 28
70291: PUSH
70292: LD_INT 14
70294: ST_TO_ADDR
// hc_gallery :=  ;
70295: LD_ADDR_OWVAR 33
70299: PUSH
70300: LD_STRING 
70302: ST_TO_ADDR
// hc_name :=  ;
70303: LD_ADDR_OWVAR 26
70307: PUSH
70308: LD_STRING 
70310: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
70311: CALL_OW 44
70315: PPUSH
70316: LD_INT 0
70318: PPUSH
70319: CALL_OW 51
// end ;
70323: GO 70245
70325: POP
70326: POP
// end ;
70327: PPOPN 1
70329: END
// every 0 0$1 trigger StreamModeActive and sBomb do
70330: LD_EXP 77
70334: PUSH
70335: LD_EXP 97
70339: AND
70340: IFFALSE 70349
70342: GO 70344
70344: DISABLE
// StreamSibBomb ;
70345: CALL 70350 0 0
70349: END
// export function StreamSibBomb ; var i , x , y ; begin
70350: LD_INT 0
70352: PPUSH
70353: PPUSH
70354: PPUSH
70355: PPUSH
// result := false ;
70356: LD_ADDR_VAR 0 1
70360: PUSH
70361: LD_INT 0
70363: ST_TO_ADDR
// for i := 1 to 16 do
70364: LD_ADDR_VAR 0 2
70368: PUSH
70369: DOUBLE
70370: LD_INT 1
70372: DEC
70373: ST_TO_ADDR
70374: LD_INT 16
70376: PUSH
70377: FOR_TO
70378: IFFALSE 70577
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
70380: LD_ADDR_VAR 0 3
70384: PUSH
70385: LD_INT 10
70387: PUSH
70388: LD_INT 20
70390: PUSH
70391: LD_INT 30
70393: PUSH
70394: LD_INT 40
70396: PUSH
70397: LD_INT 50
70399: PUSH
70400: LD_INT 60
70402: PUSH
70403: LD_INT 70
70405: PUSH
70406: LD_INT 80
70408: PUSH
70409: LD_INT 90
70411: PUSH
70412: LD_INT 100
70414: PUSH
70415: LD_INT 110
70417: PUSH
70418: LD_INT 120
70420: PUSH
70421: LD_INT 130
70423: PUSH
70424: LD_INT 140
70426: PUSH
70427: LD_INT 150
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: LIST
70434: LIST
70435: LIST
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: LIST
70443: LIST
70444: LIST
70445: LIST
70446: PUSH
70447: LD_INT 1
70449: PPUSH
70450: LD_INT 15
70452: PPUSH
70453: CALL_OW 12
70457: ARRAY
70458: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
70459: LD_ADDR_VAR 0 4
70463: PUSH
70464: LD_INT 10
70466: PUSH
70467: LD_INT 20
70469: PUSH
70470: LD_INT 30
70472: PUSH
70473: LD_INT 40
70475: PUSH
70476: LD_INT 50
70478: PUSH
70479: LD_INT 60
70481: PUSH
70482: LD_INT 70
70484: PUSH
70485: LD_INT 80
70487: PUSH
70488: LD_INT 90
70490: PUSH
70491: LD_INT 100
70493: PUSH
70494: LD_INT 110
70496: PUSH
70497: LD_INT 120
70499: PUSH
70500: LD_INT 130
70502: PUSH
70503: LD_INT 140
70505: PUSH
70506: LD_INT 150
70508: PUSH
70509: EMPTY
70510: LIST
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: PUSH
70526: LD_INT 1
70528: PPUSH
70529: LD_INT 15
70531: PPUSH
70532: CALL_OW 12
70536: ARRAY
70537: ST_TO_ADDR
// if ValidHex ( x , y ) then
70538: LD_VAR 0 3
70542: PPUSH
70543: LD_VAR 0 4
70547: PPUSH
70548: CALL_OW 488
70552: IFFALSE 70575
// begin result := [ x , y ] ;
70554: LD_ADDR_VAR 0 1
70558: PUSH
70559: LD_VAR 0 3
70563: PUSH
70564: LD_VAR 0 4
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: ST_TO_ADDR
// break ;
70573: GO 70577
// end ; end ;
70575: GO 70377
70577: POP
70578: POP
// if result then
70579: LD_VAR 0 1
70583: IFFALSE 70643
// begin ToLua ( playSibBomb() ) ;
70585: LD_STRING playSibBomb()
70587: PPUSH
70588: CALL_OW 559
// wait ( 0 0$14 ) ;
70592: LD_INT 490
70594: PPUSH
70595: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
70599: LD_VAR 0 1
70603: PUSH
70604: LD_INT 1
70606: ARRAY
70607: PPUSH
70608: LD_VAR 0 1
70612: PUSH
70613: LD_INT 2
70615: ARRAY
70616: PPUSH
70617: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
70621: LD_VAR 0 1
70625: PUSH
70626: LD_INT 1
70628: ARRAY
70629: PPUSH
70630: LD_VAR 0 1
70634: PUSH
70635: LD_INT 2
70637: ARRAY
70638: PPUSH
70639: CALL_OW 429
// end ; end ;
70643: LD_VAR 0 1
70647: RET
// every 0 0$1 trigger StreamModeActive and sReset do
70648: LD_EXP 77
70652: PUSH
70653: LD_EXP 99
70657: AND
70658: IFFALSE 70670
70660: GO 70662
70662: DISABLE
// YouLost (  ) ;
70663: LD_STRING 
70665: PPUSH
70666: CALL_OW 104
70670: END
// every 0 0$1 trigger StreamModeActive and sFog do
70671: LD_EXP 77
70675: PUSH
70676: LD_EXP 98
70680: AND
70681: IFFALSE 70695
70683: GO 70685
70685: DISABLE
// FogOff ( your_side ) ;
70686: LD_OWVAR 2
70690: PPUSH
70691: CALL_OW 344
70695: END
// every 0 0$1 trigger StreamModeActive and sSun do
70696: LD_EXP 77
70700: PUSH
70701: LD_EXP 100
70705: AND
70706: IFFALSE 70734
70708: GO 70710
70710: DISABLE
// begin solar_recharge_percent := 0 ;
70711: LD_ADDR_OWVAR 79
70715: PUSH
70716: LD_INT 0
70718: ST_TO_ADDR
// wait ( 5 5$00 ) ;
70719: LD_INT 10500
70721: PPUSH
70722: CALL_OW 67
// solar_recharge_percent := 100 ;
70726: LD_ADDR_OWVAR 79
70730: PUSH
70731: LD_INT 100
70733: ST_TO_ADDR
// end ;
70734: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
70735: LD_EXP 77
70739: PUSH
70740: LD_EXP 101
70744: AND
70745: IFFALSE 70984
70747: GO 70749
70749: DISABLE
70750: LD_INT 0
70752: PPUSH
70753: PPUSH
70754: PPUSH
// begin tmp := [ ] ;
70755: LD_ADDR_VAR 0 3
70759: PUSH
70760: EMPTY
70761: ST_TO_ADDR
// for i := 1 to 6 do
70762: LD_ADDR_VAR 0 1
70766: PUSH
70767: DOUBLE
70768: LD_INT 1
70770: DEC
70771: ST_TO_ADDR
70772: LD_INT 6
70774: PUSH
70775: FOR_TO
70776: IFFALSE 70881
// begin uc_nation := nation_nature ;
70778: LD_ADDR_OWVAR 21
70782: PUSH
70783: LD_INT 0
70785: ST_TO_ADDR
// uc_side := 0 ;
70786: LD_ADDR_OWVAR 20
70790: PUSH
70791: LD_INT 0
70793: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
70794: LD_ADDR_OWVAR 29
70798: PUSH
70799: LD_INT 12
70801: PUSH
70802: LD_INT 12
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: ST_TO_ADDR
// hc_agressivity := 20 ;
70809: LD_ADDR_OWVAR 35
70813: PUSH
70814: LD_INT 20
70816: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
70817: LD_ADDR_OWVAR 28
70821: PUSH
70822: LD_INT 17
70824: ST_TO_ADDR
// hc_gallery :=  ;
70825: LD_ADDR_OWVAR 33
70829: PUSH
70830: LD_STRING 
70832: ST_TO_ADDR
// hc_name :=  ;
70833: LD_ADDR_OWVAR 26
70837: PUSH
70838: LD_STRING 
70840: ST_TO_ADDR
// un := CreateHuman ;
70841: LD_ADDR_VAR 0 2
70845: PUSH
70846: CALL_OW 44
70850: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
70851: LD_VAR 0 2
70855: PPUSH
70856: LD_INT 1
70858: PPUSH
70859: CALL_OW 51
// tmp := tmp ^ un ;
70863: LD_ADDR_VAR 0 3
70867: PUSH
70868: LD_VAR 0 3
70872: PUSH
70873: LD_VAR 0 2
70877: ADD
70878: ST_TO_ADDR
// end ;
70879: GO 70775
70881: POP
70882: POP
// repeat wait ( 0 0$1 ) ;
70883: LD_INT 35
70885: PPUSH
70886: CALL_OW 67
// for un in tmp do
70890: LD_ADDR_VAR 0 2
70894: PUSH
70895: LD_VAR 0 3
70899: PUSH
70900: FOR_IN
70901: IFFALSE 70975
// begin if IsDead ( un ) then
70903: LD_VAR 0 2
70907: PPUSH
70908: CALL_OW 301
70912: IFFALSE 70932
// begin tmp := tmp diff un ;
70914: LD_ADDR_VAR 0 3
70918: PUSH
70919: LD_VAR 0 3
70923: PUSH
70924: LD_VAR 0 2
70928: DIFF
70929: ST_TO_ADDR
// continue ;
70930: GO 70900
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
70932: LD_VAR 0 2
70936: PPUSH
70937: LD_INT 3
70939: PUSH
70940: LD_INT 22
70942: PUSH
70943: LD_INT 0
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PPUSH
70954: CALL_OW 69
70958: PPUSH
70959: LD_VAR 0 2
70963: PPUSH
70964: CALL_OW 74
70968: PPUSH
70969: CALL_OW 115
// end ;
70973: GO 70900
70975: POP
70976: POP
// until not tmp ;
70977: LD_VAR 0 3
70981: NOT
70982: IFFALSE 70883
// end ;
70984: PPOPN 3
70986: END
// every 0 0$1 trigger StreamModeActive and sTroll do
70987: LD_EXP 77
70991: PUSH
70992: LD_EXP 102
70996: AND
70997: IFFALSE 71051
70999: GO 71001
71001: DISABLE
// begin ToLua ( displayTroll(); ) ;
71002: LD_STRING displayTroll();
71004: PPUSH
71005: CALL_OW 559
// wait ( 3 3$00 ) ;
71009: LD_INT 6300
71011: PPUSH
71012: CALL_OW 67
// ToLua ( hideTroll(); ) ;
71016: LD_STRING hideTroll();
71018: PPUSH
71019: CALL_OW 559
// wait ( 1 1$00 ) ;
71023: LD_INT 2100
71025: PPUSH
71026: CALL_OW 67
// ToLua ( displayTroll(); ) ;
71030: LD_STRING displayTroll();
71032: PPUSH
71033: CALL_OW 559
// wait ( 1 1$00 ) ;
71037: LD_INT 2100
71039: PPUSH
71040: CALL_OW 67
// ToLua ( hideTroll(); ) ;
71044: LD_STRING hideTroll();
71046: PPUSH
71047: CALL_OW 559
// end ;
71051: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
71052: LD_EXP 77
71056: PUSH
71057: LD_EXP 103
71061: AND
71062: IFFALSE 71125
71064: GO 71066
71066: DISABLE
71067: LD_INT 0
71069: PPUSH
// begin p := 0 ;
71070: LD_ADDR_VAR 0 1
71074: PUSH
71075: LD_INT 0
71077: ST_TO_ADDR
// repeat game_speed := 1 ;
71078: LD_ADDR_OWVAR 65
71082: PUSH
71083: LD_INT 1
71085: ST_TO_ADDR
// wait ( 0 0$1 ) ;
71086: LD_INT 35
71088: PPUSH
71089: CALL_OW 67
// p := p + 1 ;
71093: LD_ADDR_VAR 0 1
71097: PUSH
71098: LD_VAR 0 1
71102: PUSH
71103: LD_INT 1
71105: PLUS
71106: ST_TO_ADDR
// until p >= 60 ;
71107: LD_VAR 0 1
71111: PUSH
71112: LD_INT 60
71114: GREATEREQUAL
71115: IFFALSE 71078
// game_speed := 4 ;
71117: LD_ADDR_OWVAR 65
71121: PUSH
71122: LD_INT 4
71124: ST_TO_ADDR
// end ;
71125: PPOPN 1
71127: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
71128: LD_EXP 77
71132: PUSH
71133: LD_EXP 104
71137: AND
71138: IFFALSE 71284
71140: GO 71142
71142: DISABLE
71143: LD_INT 0
71145: PPUSH
71146: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71147: LD_ADDR_VAR 0 1
71151: PUSH
71152: LD_INT 22
71154: PUSH
71155: LD_OWVAR 2
71159: PUSH
71160: EMPTY
71161: LIST
71162: LIST
71163: PUSH
71164: LD_INT 2
71166: PUSH
71167: LD_INT 30
71169: PUSH
71170: LD_INT 0
71172: PUSH
71173: EMPTY
71174: LIST
71175: LIST
71176: PUSH
71177: LD_INT 30
71179: PUSH
71180: LD_INT 1
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: PUSH
71187: EMPTY
71188: LIST
71189: LIST
71190: LIST
71191: PUSH
71192: EMPTY
71193: LIST
71194: LIST
71195: PPUSH
71196: CALL_OW 69
71200: ST_TO_ADDR
// if not depot then
71201: LD_VAR 0 1
71205: NOT
71206: IFFALSE 71210
// exit ;
71208: GO 71284
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
71210: LD_ADDR_VAR 0 2
71214: PUSH
71215: LD_VAR 0 1
71219: PUSH
71220: LD_INT 1
71222: PPUSH
71223: LD_VAR 0 1
71227: PPUSH
71228: CALL_OW 12
71232: ARRAY
71233: PPUSH
71234: CALL_OW 274
71238: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
71239: LD_VAR 0 2
71243: PPUSH
71244: LD_INT 1
71246: PPUSH
71247: LD_INT 0
71249: PPUSH
71250: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
71254: LD_VAR 0 2
71258: PPUSH
71259: LD_INT 2
71261: PPUSH
71262: LD_INT 0
71264: PPUSH
71265: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
71269: LD_VAR 0 2
71273: PPUSH
71274: LD_INT 3
71276: PPUSH
71277: LD_INT 0
71279: PPUSH
71280: CALL_OW 277
// end ;
71284: PPOPN 2
71286: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
71287: LD_EXP 77
71291: PUSH
71292: LD_EXP 105
71296: AND
71297: IFFALSE 71394
71299: GO 71301
71301: DISABLE
71302: LD_INT 0
71304: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71305: LD_ADDR_VAR 0 1
71309: PUSH
71310: LD_INT 22
71312: PUSH
71313: LD_OWVAR 2
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PUSH
71322: LD_INT 21
71324: PUSH
71325: LD_INT 1
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: PUSH
71332: LD_INT 3
71334: PUSH
71335: LD_INT 23
71337: PUSH
71338: LD_INT 0
71340: PUSH
71341: EMPTY
71342: LIST
71343: LIST
71344: PUSH
71345: EMPTY
71346: LIST
71347: LIST
71348: PUSH
71349: EMPTY
71350: LIST
71351: LIST
71352: LIST
71353: PPUSH
71354: CALL_OW 69
71358: ST_TO_ADDR
// if not tmp then
71359: LD_VAR 0 1
71363: NOT
71364: IFFALSE 71368
// exit ;
71366: GO 71394
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
71368: LD_VAR 0 1
71372: PUSH
71373: LD_INT 1
71375: PPUSH
71376: LD_VAR 0 1
71380: PPUSH
71381: CALL_OW 12
71385: ARRAY
71386: PPUSH
71387: LD_INT 200
71389: PPUSH
71390: CALL_OW 234
// end ;
71394: PPOPN 1
71396: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
71397: LD_EXP 77
71401: PUSH
71402: LD_EXP 106
71406: AND
71407: IFFALSE 71486
71409: GO 71411
71411: DISABLE
71412: LD_INT 0
71414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
71415: LD_ADDR_VAR 0 1
71419: PUSH
71420: LD_INT 22
71422: PUSH
71423: LD_OWVAR 2
71427: PUSH
71428: EMPTY
71429: LIST
71430: LIST
71431: PUSH
71432: LD_INT 21
71434: PUSH
71435: LD_INT 2
71437: PUSH
71438: EMPTY
71439: LIST
71440: LIST
71441: PUSH
71442: EMPTY
71443: LIST
71444: LIST
71445: PPUSH
71446: CALL_OW 69
71450: ST_TO_ADDR
// if not tmp then
71451: LD_VAR 0 1
71455: NOT
71456: IFFALSE 71460
// exit ;
71458: GO 71486
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
71460: LD_VAR 0 1
71464: PUSH
71465: LD_INT 1
71467: PPUSH
71468: LD_VAR 0 1
71472: PPUSH
71473: CALL_OW 12
71477: ARRAY
71478: PPUSH
71479: LD_INT 60
71481: PPUSH
71482: CALL_OW 234
// end ;
71486: PPOPN 1
71488: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
71489: LD_EXP 77
71493: PUSH
71494: LD_EXP 107
71498: AND
71499: IFFALSE 71598
71501: GO 71503
71503: DISABLE
71504: LD_INT 0
71506: PPUSH
71507: PPUSH
// begin enable ;
71508: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
71509: LD_ADDR_VAR 0 1
71513: PUSH
71514: LD_INT 22
71516: PUSH
71517: LD_OWVAR 2
71521: PUSH
71522: EMPTY
71523: LIST
71524: LIST
71525: PUSH
71526: LD_INT 61
71528: PUSH
71529: EMPTY
71530: LIST
71531: PUSH
71532: LD_INT 33
71534: PUSH
71535: LD_INT 2
71537: PUSH
71538: EMPTY
71539: LIST
71540: LIST
71541: PUSH
71542: EMPTY
71543: LIST
71544: LIST
71545: LIST
71546: PPUSH
71547: CALL_OW 69
71551: ST_TO_ADDR
// if not tmp then
71552: LD_VAR 0 1
71556: NOT
71557: IFFALSE 71561
// exit ;
71559: GO 71598
// for i in tmp do
71561: LD_ADDR_VAR 0 2
71565: PUSH
71566: LD_VAR 0 1
71570: PUSH
71571: FOR_IN
71572: IFFALSE 71596
// if IsControledBy ( i ) then
71574: LD_VAR 0 2
71578: PPUSH
71579: CALL_OW 312
71583: IFFALSE 71594
// ComUnlink ( i ) ;
71585: LD_VAR 0 2
71589: PPUSH
71590: CALL_OW 136
71594: GO 71571
71596: POP
71597: POP
// end ;
71598: PPOPN 2
71600: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
71601: LD_EXP 77
71605: PUSH
71606: LD_EXP 108
71610: AND
71611: IFFALSE 71751
71613: GO 71615
71615: DISABLE
71616: LD_INT 0
71618: PPUSH
71619: PPUSH
// begin ToLua ( displayPowell(); ) ;
71620: LD_STRING displayPowell();
71622: PPUSH
71623: CALL_OW 559
// uc_side := 0 ;
71627: LD_ADDR_OWVAR 20
71631: PUSH
71632: LD_INT 0
71634: ST_TO_ADDR
// uc_nation := 2 ;
71635: LD_ADDR_OWVAR 21
71639: PUSH
71640: LD_INT 2
71642: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
71643: LD_ADDR_OWVAR 37
71647: PUSH
71648: LD_INT 14
71650: ST_TO_ADDR
// vc_engine := engine_siberite ;
71651: LD_ADDR_OWVAR 39
71655: PUSH
71656: LD_INT 3
71658: ST_TO_ADDR
// vc_control := control_apeman ;
71659: LD_ADDR_OWVAR 38
71663: PUSH
71664: LD_INT 5
71666: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
71667: LD_ADDR_OWVAR 40
71671: PUSH
71672: LD_INT 29
71674: ST_TO_ADDR
// un := CreateVehicle ;
71675: LD_ADDR_VAR 0 2
71679: PUSH
71680: CALL_OW 45
71684: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71685: LD_VAR 0 2
71689: PPUSH
71690: LD_INT 1
71692: PPUSH
71693: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
71697: LD_INT 35
71699: PPUSH
71700: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
71704: LD_VAR 0 2
71708: PPUSH
71709: LD_INT 22
71711: PUSH
71712: LD_OWVAR 2
71716: PUSH
71717: EMPTY
71718: LIST
71719: LIST
71720: PPUSH
71721: CALL_OW 69
71725: PPUSH
71726: LD_VAR 0 2
71730: PPUSH
71731: CALL_OW 74
71735: PPUSH
71736: CALL_OW 115
// until IsDead ( un ) ;
71740: LD_VAR 0 2
71744: PPUSH
71745: CALL_OW 301
71749: IFFALSE 71697
// end ;
71751: PPOPN 2
71753: END
// every 0 0$1 trigger StreamModeActive and sStu do
71754: LD_EXP 77
71758: PUSH
71759: LD_EXP 116
71763: AND
71764: IFFALSE 71780
71766: GO 71768
71768: DISABLE
// begin ToLua ( displayStucuk(); ) ;
71769: LD_STRING displayStucuk();
71771: PPUSH
71772: CALL_OW 559
// ResetFog ;
71776: CALL_OW 335
// end ;
71780: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
71781: LD_EXP 77
71785: PUSH
71786: LD_EXP 109
71790: AND
71791: IFFALSE 71932
71793: GO 71795
71795: DISABLE
71796: LD_INT 0
71798: PPUSH
71799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
71800: LD_ADDR_VAR 0 2
71804: PUSH
71805: LD_INT 22
71807: PUSH
71808: LD_OWVAR 2
71812: PUSH
71813: EMPTY
71814: LIST
71815: LIST
71816: PUSH
71817: LD_INT 21
71819: PUSH
71820: LD_INT 1
71822: PUSH
71823: EMPTY
71824: LIST
71825: LIST
71826: PUSH
71827: EMPTY
71828: LIST
71829: LIST
71830: PPUSH
71831: CALL_OW 69
71835: ST_TO_ADDR
// if not tmp then
71836: LD_VAR 0 2
71840: NOT
71841: IFFALSE 71845
// exit ;
71843: GO 71932
// un := tmp [ rand ( 1 , tmp ) ] ;
71845: LD_ADDR_VAR 0 1
71849: PUSH
71850: LD_VAR 0 2
71854: PUSH
71855: LD_INT 1
71857: PPUSH
71858: LD_VAR 0 2
71862: PPUSH
71863: CALL_OW 12
71867: ARRAY
71868: ST_TO_ADDR
// SetSide ( un , 0 ) ;
71869: LD_VAR 0 1
71873: PPUSH
71874: LD_INT 0
71876: PPUSH
71877: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
71881: LD_VAR 0 1
71885: PPUSH
71886: LD_OWVAR 3
71890: PUSH
71891: LD_VAR 0 1
71895: DIFF
71896: PPUSH
71897: LD_VAR 0 1
71901: PPUSH
71902: CALL_OW 74
71906: PPUSH
71907: CALL_OW 115
// wait ( 0 0$20 ) ;
71911: LD_INT 700
71913: PPUSH
71914: CALL_OW 67
// SetSide ( un , your_side ) ;
71918: LD_VAR 0 1
71922: PPUSH
71923: LD_OWVAR 2
71927: PPUSH
71928: CALL_OW 235
// end ;
71932: PPOPN 2
71934: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
71935: LD_EXP 77
71939: PUSH
71940: LD_EXP 110
71944: AND
71945: IFFALSE 72051
71947: GO 71949
71949: DISABLE
71950: LD_INT 0
71952: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71953: LD_ADDR_VAR 0 1
71957: PUSH
71958: LD_INT 22
71960: PUSH
71961: LD_OWVAR 2
71965: PUSH
71966: EMPTY
71967: LIST
71968: LIST
71969: PUSH
71970: LD_INT 2
71972: PUSH
71973: LD_INT 30
71975: PUSH
71976: LD_INT 0
71978: PUSH
71979: EMPTY
71980: LIST
71981: LIST
71982: PUSH
71983: LD_INT 30
71985: PUSH
71986: LD_INT 1
71988: PUSH
71989: EMPTY
71990: LIST
71991: LIST
71992: PUSH
71993: EMPTY
71994: LIST
71995: LIST
71996: LIST
71997: PUSH
71998: EMPTY
71999: LIST
72000: LIST
72001: PPUSH
72002: CALL_OW 69
72006: ST_TO_ADDR
// if not depot then
72007: LD_VAR 0 1
72011: NOT
72012: IFFALSE 72016
// exit ;
72014: GO 72051
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
72016: LD_VAR 0 1
72020: PUSH
72021: LD_INT 1
72023: ARRAY
72024: PPUSH
72025: CALL_OW 250
72029: PPUSH
72030: LD_VAR 0 1
72034: PUSH
72035: LD_INT 1
72037: ARRAY
72038: PPUSH
72039: CALL_OW 251
72043: PPUSH
72044: LD_INT 70
72046: PPUSH
72047: CALL_OW 495
// end ;
72051: PPOPN 1
72053: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
72054: LD_EXP 77
72058: PUSH
72059: LD_EXP 111
72063: AND
72064: IFFALSE 72275
72066: GO 72068
72068: DISABLE
72069: LD_INT 0
72071: PPUSH
72072: PPUSH
72073: PPUSH
72074: PPUSH
72075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
72076: LD_ADDR_VAR 0 5
72080: PUSH
72081: LD_INT 22
72083: PUSH
72084: LD_OWVAR 2
72088: PUSH
72089: EMPTY
72090: LIST
72091: LIST
72092: PUSH
72093: LD_INT 21
72095: PUSH
72096: LD_INT 1
72098: PUSH
72099: EMPTY
72100: LIST
72101: LIST
72102: PUSH
72103: EMPTY
72104: LIST
72105: LIST
72106: PPUSH
72107: CALL_OW 69
72111: ST_TO_ADDR
// if not tmp then
72112: LD_VAR 0 5
72116: NOT
72117: IFFALSE 72121
// exit ;
72119: GO 72275
// for i in tmp do
72121: LD_ADDR_VAR 0 1
72125: PUSH
72126: LD_VAR 0 5
72130: PUSH
72131: FOR_IN
72132: IFFALSE 72273
// begin d := rand ( 0 , 5 ) ;
72134: LD_ADDR_VAR 0 4
72138: PUSH
72139: LD_INT 0
72141: PPUSH
72142: LD_INT 5
72144: PPUSH
72145: CALL_OW 12
72149: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
72150: LD_ADDR_VAR 0 2
72154: PUSH
72155: LD_VAR 0 1
72159: PPUSH
72160: CALL_OW 250
72164: PPUSH
72165: LD_VAR 0 4
72169: PPUSH
72170: LD_INT 3
72172: PPUSH
72173: LD_INT 12
72175: PPUSH
72176: CALL_OW 12
72180: PPUSH
72181: CALL_OW 272
72185: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
72186: LD_ADDR_VAR 0 3
72190: PUSH
72191: LD_VAR 0 1
72195: PPUSH
72196: CALL_OW 251
72200: PPUSH
72201: LD_VAR 0 4
72205: PPUSH
72206: LD_INT 3
72208: PPUSH
72209: LD_INT 12
72211: PPUSH
72212: CALL_OW 12
72216: PPUSH
72217: CALL_OW 273
72221: ST_TO_ADDR
// if ValidHex ( x , y ) then
72222: LD_VAR 0 2
72226: PPUSH
72227: LD_VAR 0 3
72231: PPUSH
72232: CALL_OW 488
72236: IFFALSE 72271
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
72238: LD_VAR 0 1
72242: PPUSH
72243: LD_VAR 0 2
72247: PPUSH
72248: LD_VAR 0 3
72252: PPUSH
72253: LD_INT 3
72255: PPUSH
72256: LD_INT 6
72258: PPUSH
72259: CALL_OW 12
72263: PPUSH
72264: LD_INT 1
72266: PPUSH
72267: CALL_OW 483
// end ;
72271: GO 72131
72273: POP
72274: POP
// end ;
72275: PPOPN 5
72277: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
72278: LD_EXP 77
72282: PUSH
72283: LD_EXP 112
72287: AND
72288: IFFALSE 72382
72290: GO 72292
72292: DISABLE
72293: LD_INT 0
72295: PPUSH
72296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
72297: LD_ADDR_VAR 0 2
72301: PUSH
72302: LD_INT 22
72304: PUSH
72305: LD_OWVAR 2
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: PUSH
72314: LD_INT 32
72316: PUSH
72317: LD_INT 1
72319: PUSH
72320: EMPTY
72321: LIST
72322: LIST
72323: PUSH
72324: LD_INT 21
72326: PUSH
72327: LD_INT 2
72329: PUSH
72330: EMPTY
72331: LIST
72332: LIST
72333: PUSH
72334: EMPTY
72335: LIST
72336: LIST
72337: LIST
72338: PPUSH
72339: CALL_OW 69
72343: ST_TO_ADDR
// if not tmp then
72344: LD_VAR 0 2
72348: NOT
72349: IFFALSE 72353
// exit ;
72351: GO 72382
// for i in tmp do
72353: LD_ADDR_VAR 0 1
72357: PUSH
72358: LD_VAR 0 2
72362: PUSH
72363: FOR_IN
72364: IFFALSE 72380
// SetFuel ( i , 0 ) ;
72366: LD_VAR 0 1
72370: PPUSH
72371: LD_INT 0
72373: PPUSH
72374: CALL_OW 240
72378: GO 72363
72380: POP
72381: POP
// end ;
72382: PPOPN 2
72384: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
72385: LD_EXP 77
72389: PUSH
72390: LD_EXP 113
72394: AND
72395: IFFALSE 72461
72397: GO 72399
72399: DISABLE
72400: LD_INT 0
72402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
72403: LD_ADDR_VAR 0 1
72407: PUSH
72408: LD_INT 22
72410: PUSH
72411: LD_OWVAR 2
72415: PUSH
72416: EMPTY
72417: LIST
72418: LIST
72419: PUSH
72420: LD_INT 30
72422: PUSH
72423: LD_INT 29
72425: PUSH
72426: EMPTY
72427: LIST
72428: LIST
72429: PUSH
72430: EMPTY
72431: LIST
72432: LIST
72433: PPUSH
72434: CALL_OW 69
72438: ST_TO_ADDR
// if not tmp then
72439: LD_VAR 0 1
72443: NOT
72444: IFFALSE 72448
// exit ;
72446: GO 72461
// DestroyUnit ( tmp [ 1 ] ) ;
72448: LD_VAR 0 1
72452: PUSH
72453: LD_INT 1
72455: ARRAY
72456: PPUSH
72457: CALL_OW 65
// end ;
72461: PPOPN 1
72463: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
72464: LD_EXP 77
72468: PUSH
72469: LD_EXP 115
72473: AND
72474: IFFALSE 72603
72476: GO 72478
72478: DISABLE
72479: LD_INT 0
72481: PPUSH
// begin uc_side := 0 ;
72482: LD_ADDR_OWVAR 20
72486: PUSH
72487: LD_INT 0
72489: ST_TO_ADDR
// uc_nation := nation_arabian ;
72490: LD_ADDR_OWVAR 21
72494: PUSH
72495: LD_INT 2
72497: ST_TO_ADDR
// hc_gallery :=  ;
72498: LD_ADDR_OWVAR 33
72502: PUSH
72503: LD_STRING 
72505: ST_TO_ADDR
// hc_name :=  ;
72506: LD_ADDR_OWVAR 26
72510: PUSH
72511: LD_STRING 
72513: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
72514: LD_INT 1
72516: PPUSH
72517: LD_INT 11
72519: PPUSH
72520: LD_INT 10
72522: PPUSH
72523: CALL_OW 380
// un := CreateHuman ;
72527: LD_ADDR_VAR 0 1
72531: PUSH
72532: CALL_OW 44
72536: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
72537: LD_VAR 0 1
72541: PPUSH
72542: LD_INT 1
72544: PPUSH
72545: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
72549: LD_INT 35
72551: PPUSH
72552: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
72556: LD_VAR 0 1
72560: PPUSH
72561: LD_INT 22
72563: PUSH
72564: LD_OWVAR 2
72568: PUSH
72569: EMPTY
72570: LIST
72571: LIST
72572: PPUSH
72573: CALL_OW 69
72577: PPUSH
72578: LD_VAR 0 1
72582: PPUSH
72583: CALL_OW 74
72587: PPUSH
72588: CALL_OW 115
// until IsDead ( un ) ;
72592: LD_VAR 0 1
72596: PPUSH
72597: CALL_OW 301
72601: IFFALSE 72549
// end ;
72603: PPOPN 1
72605: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
72606: LD_EXP 77
72610: PUSH
72611: LD_EXP 117
72615: AND
72616: IFFALSE 72628
72618: GO 72620
72620: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
72621: LD_STRING earthquake(getX(game), 0, 32)
72623: PPUSH
72624: CALL_OW 559
72628: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
72629: LD_EXP 77
72633: PUSH
72634: LD_EXP 118
72638: AND
72639: IFFALSE 72730
72641: GO 72643
72643: DISABLE
72644: LD_INT 0
72646: PPUSH
// begin enable ;
72647: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
72648: LD_ADDR_VAR 0 1
72652: PUSH
72653: LD_INT 22
72655: PUSH
72656: LD_OWVAR 2
72660: PUSH
72661: EMPTY
72662: LIST
72663: LIST
72664: PUSH
72665: LD_INT 21
72667: PUSH
72668: LD_INT 2
72670: PUSH
72671: EMPTY
72672: LIST
72673: LIST
72674: PUSH
72675: LD_INT 33
72677: PUSH
72678: LD_INT 3
72680: PUSH
72681: EMPTY
72682: LIST
72683: LIST
72684: PUSH
72685: EMPTY
72686: LIST
72687: LIST
72688: LIST
72689: PPUSH
72690: CALL_OW 69
72694: ST_TO_ADDR
// if not tmp then
72695: LD_VAR 0 1
72699: NOT
72700: IFFALSE 72704
// exit ;
72702: GO 72730
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
72704: LD_VAR 0 1
72708: PUSH
72709: LD_INT 1
72711: PPUSH
72712: LD_VAR 0 1
72716: PPUSH
72717: CALL_OW 12
72721: ARRAY
72722: PPUSH
72723: LD_INT 1
72725: PPUSH
72726: CALL_OW 234
// end ;
72730: PPOPN 1
72732: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
72733: LD_EXP 77
72737: PUSH
72738: LD_EXP 119
72742: AND
72743: IFFALSE 72884
72745: GO 72747
72747: DISABLE
72748: LD_INT 0
72750: PPUSH
72751: PPUSH
72752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72753: LD_ADDR_VAR 0 3
72757: PUSH
72758: LD_INT 22
72760: PUSH
72761: LD_OWVAR 2
72765: PUSH
72766: EMPTY
72767: LIST
72768: LIST
72769: PUSH
72770: LD_INT 25
72772: PUSH
72773: LD_INT 1
72775: PUSH
72776: EMPTY
72777: LIST
72778: LIST
72779: PUSH
72780: EMPTY
72781: LIST
72782: LIST
72783: PPUSH
72784: CALL_OW 69
72788: ST_TO_ADDR
// if not tmp then
72789: LD_VAR 0 3
72793: NOT
72794: IFFALSE 72798
// exit ;
72796: GO 72884
// un := tmp [ rand ( 1 , tmp ) ] ;
72798: LD_ADDR_VAR 0 2
72802: PUSH
72803: LD_VAR 0 3
72807: PUSH
72808: LD_INT 1
72810: PPUSH
72811: LD_VAR 0 3
72815: PPUSH
72816: CALL_OW 12
72820: ARRAY
72821: ST_TO_ADDR
// if Crawls ( un ) then
72822: LD_VAR 0 2
72826: PPUSH
72827: CALL_OW 318
72831: IFFALSE 72842
// ComWalk ( un ) ;
72833: LD_VAR 0 2
72837: PPUSH
72838: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
72842: LD_VAR 0 2
72846: PPUSH
72847: LD_INT 9
72849: PPUSH
72850: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
72854: LD_INT 28
72856: PPUSH
72857: LD_OWVAR 2
72861: PPUSH
72862: LD_INT 2
72864: PPUSH
72865: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
72869: LD_INT 29
72871: PPUSH
72872: LD_OWVAR 2
72876: PPUSH
72877: LD_INT 2
72879: PPUSH
72880: CALL_OW 322
// end ;
72884: PPOPN 3
72886: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
72887: LD_EXP 77
72891: PUSH
72892: LD_EXP 120
72896: AND
72897: IFFALSE 73008
72899: GO 72901
72901: DISABLE
72902: LD_INT 0
72904: PPUSH
72905: PPUSH
72906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72907: LD_ADDR_VAR 0 3
72911: PUSH
72912: LD_INT 22
72914: PUSH
72915: LD_OWVAR 2
72919: PUSH
72920: EMPTY
72921: LIST
72922: LIST
72923: PUSH
72924: LD_INT 25
72926: PUSH
72927: LD_INT 1
72929: PUSH
72930: EMPTY
72931: LIST
72932: LIST
72933: PUSH
72934: EMPTY
72935: LIST
72936: LIST
72937: PPUSH
72938: CALL_OW 69
72942: ST_TO_ADDR
// if not tmp then
72943: LD_VAR 0 3
72947: NOT
72948: IFFALSE 72952
// exit ;
72950: GO 73008
// un := tmp [ rand ( 1 , tmp ) ] ;
72952: LD_ADDR_VAR 0 2
72956: PUSH
72957: LD_VAR 0 3
72961: PUSH
72962: LD_INT 1
72964: PPUSH
72965: LD_VAR 0 3
72969: PPUSH
72970: CALL_OW 12
72974: ARRAY
72975: ST_TO_ADDR
// if Crawls ( un ) then
72976: LD_VAR 0 2
72980: PPUSH
72981: CALL_OW 318
72985: IFFALSE 72996
// ComWalk ( un ) ;
72987: LD_VAR 0 2
72991: PPUSH
72992: CALL_OW 138
// SetClass ( un , class_mortar ) ;
72996: LD_VAR 0 2
73000: PPUSH
73001: LD_INT 8
73003: PPUSH
73004: CALL_OW 336
// end ;
73008: PPOPN 3
73010: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
73011: LD_EXP 77
73015: PUSH
73016: LD_EXP 121
73020: AND
73021: IFFALSE 73165
73023: GO 73025
73025: DISABLE
73026: LD_INT 0
73028: PPUSH
73029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
73030: LD_ADDR_VAR 0 2
73034: PUSH
73035: LD_INT 22
73037: PUSH
73038: LD_OWVAR 2
73042: PUSH
73043: EMPTY
73044: LIST
73045: LIST
73046: PUSH
73047: LD_INT 21
73049: PUSH
73050: LD_INT 2
73052: PUSH
73053: EMPTY
73054: LIST
73055: LIST
73056: PUSH
73057: LD_INT 2
73059: PUSH
73060: LD_INT 34
73062: PUSH
73063: LD_INT 12
73065: PUSH
73066: EMPTY
73067: LIST
73068: LIST
73069: PUSH
73070: LD_INT 34
73072: PUSH
73073: LD_INT 51
73075: PUSH
73076: EMPTY
73077: LIST
73078: LIST
73079: PUSH
73080: LD_INT 34
73082: PUSH
73083: LD_INT 32
73085: PUSH
73086: EMPTY
73087: LIST
73088: LIST
73089: PUSH
73090: EMPTY
73091: LIST
73092: LIST
73093: LIST
73094: LIST
73095: PUSH
73096: EMPTY
73097: LIST
73098: LIST
73099: LIST
73100: PPUSH
73101: CALL_OW 69
73105: ST_TO_ADDR
// if not tmp then
73106: LD_VAR 0 2
73110: NOT
73111: IFFALSE 73115
// exit ;
73113: GO 73165
// for i in tmp do
73115: LD_ADDR_VAR 0 1
73119: PUSH
73120: LD_VAR 0 2
73124: PUSH
73125: FOR_IN
73126: IFFALSE 73163
// if GetCargo ( i , mat_artifact ) = 0 then
73128: LD_VAR 0 1
73132: PPUSH
73133: LD_INT 4
73135: PPUSH
73136: CALL_OW 289
73140: PUSH
73141: LD_INT 0
73143: EQUAL
73144: IFFALSE 73161
// SetCargo ( i , mat_siberit , 100 ) ;
73146: LD_VAR 0 1
73150: PPUSH
73151: LD_INT 3
73153: PPUSH
73154: LD_INT 100
73156: PPUSH
73157: CALL_OW 290
73161: GO 73125
73163: POP
73164: POP
// end ;
73165: PPOPN 2
73167: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
73168: LD_EXP 77
73172: PUSH
73173: LD_EXP 122
73177: AND
73178: IFFALSE 73361
73180: GO 73182
73182: DISABLE
73183: LD_INT 0
73185: PPUSH
73186: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73187: LD_ADDR_VAR 0 2
73191: PUSH
73192: LD_INT 22
73194: PUSH
73195: LD_OWVAR 2
73199: PUSH
73200: EMPTY
73201: LIST
73202: LIST
73203: PPUSH
73204: CALL_OW 69
73208: ST_TO_ADDR
// if not tmp then
73209: LD_VAR 0 2
73213: NOT
73214: IFFALSE 73218
// exit ;
73216: GO 73361
// for i := 1 to 2 do
73218: LD_ADDR_VAR 0 1
73222: PUSH
73223: DOUBLE
73224: LD_INT 1
73226: DEC
73227: ST_TO_ADDR
73228: LD_INT 2
73230: PUSH
73231: FOR_TO
73232: IFFALSE 73359
// begin uc_side := your_side ;
73234: LD_ADDR_OWVAR 20
73238: PUSH
73239: LD_OWVAR 2
73243: ST_TO_ADDR
// uc_nation := nation_american ;
73244: LD_ADDR_OWVAR 21
73248: PUSH
73249: LD_INT 1
73251: ST_TO_ADDR
// vc_chassis := us_morphling ;
73252: LD_ADDR_OWVAR 37
73256: PUSH
73257: LD_INT 5
73259: ST_TO_ADDR
// vc_engine := engine_siberite ;
73260: LD_ADDR_OWVAR 39
73264: PUSH
73265: LD_INT 3
73267: ST_TO_ADDR
// vc_control := control_computer ;
73268: LD_ADDR_OWVAR 38
73272: PUSH
73273: LD_INT 3
73275: ST_TO_ADDR
// vc_weapon := us_double_laser ;
73276: LD_ADDR_OWVAR 40
73280: PUSH
73281: LD_INT 10
73283: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
73284: LD_VAR 0 2
73288: PUSH
73289: LD_INT 1
73291: ARRAY
73292: PPUSH
73293: CALL_OW 310
73297: NOT
73298: IFFALSE 73345
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
73300: CALL_OW 45
73304: PPUSH
73305: LD_VAR 0 2
73309: PUSH
73310: LD_INT 1
73312: ARRAY
73313: PPUSH
73314: CALL_OW 250
73318: PPUSH
73319: LD_VAR 0 2
73323: PUSH
73324: LD_INT 1
73326: ARRAY
73327: PPUSH
73328: CALL_OW 251
73332: PPUSH
73333: LD_INT 12
73335: PPUSH
73336: LD_INT 1
73338: PPUSH
73339: CALL_OW 50
73343: GO 73357
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
73345: CALL_OW 45
73349: PPUSH
73350: LD_INT 1
73352: PPUSH
73353: CALL_OW 51
// end ;
73357: GO 73231
73359: POP
73360: POP
// end ;
73361: PPOPN 2
73363: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
73364: LD_EXP 77
73368: PUSH
73369: LD_EXP 123
73373: AND
73374: IFFALSE 73596
73376: GO 73378
73378: DISABLE
73379: LD_INT 0
73381: PPUSH
73382: PPUSH
73383: PPUSH
73384: PPUSH
73385: PPUSH
73386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73387: LD_ADDR_VAR 0 6
73391: PUSH
73392: LD_INT 22
73394: PUSH
73395: LD_OWVAR 2
73399: PUSH
73400: EMPTY
73401: LIST
73402: LIST
73403: PUSH
73404: LD_INT 21
73406: PUSH
73407: LD_INT 1
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: PUSH
73414: LD_INT 3
73416: PUSH
73417: LD_INT 23
73419: PUSH
73420: LD_INT 0
73422: PUSH
73423: EMPTY
73424: LIST
73425: LIST
73426: PUSH
73427: EMPTY
73428: LIST
73429: LIST
73430: PUSH
73431: EMPTY
73432: LIST
73433: LIST
73434: LIST
73435: PPUSH
73436: CALL_OW 69
73440: ST_TO_ADDR
// if not tmp then
73441: LD_VAR 0 6
73445: NOT
73446: IFFALSE 73450
// exit ;
73448: GO 73596
// s1 := rand ( 1 , 4 ) ;
73450: LD_ADDR_VAR 0 2
73454: PUSH
73455: LD_INT 1
73457: PPUSH
73458: LD_INT 4
73460: PPUSH
73461: CALL_OW 12
73465: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
73466: LD_ADDR_VAR 0 4
73470: PUSH
73471: LD_VAR 0 6
73475: PUSH
73476: LD_INT 1
73478: ARRAY
73479: PPUSH
73480: LD_VAR 0 2
73484: PPUSH
73485: CALL_OW 259
73489: ST_TO_ADDR
// if s1 = 1 then
73490: LD_VAR 0 2
73494: PUSH
73495: LD_INT 1
73497: EQUAL
73498: IFFALSE 73518
// s2 := rand ( 2 , 4 ) else
73500: LD_ADDR_VAR 0 3
73504: PUSH
73505: LD_INT 2
73507: PPUSH
73508: LD_INT 4
73510: PPUSH
73511: CALL_OW 12
73515: ST_TO_ADDR
73516: GO 73526
// s2 := 1 ;
73518: LD_ADDR_VAR 0 3
73522: PUSH
73523: LD_INT 1
73525: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
73526: LD_ADDR_VAR 0 5
73530: PUSH
73531: LD_VAR 0 6
73535: PUSH
73536: LD_INT 1
73538: ARRAY
73539: PPUSH
73540: LD_VAR 0 3
73544: PPUSH
73545: CALL_OW 259
73549: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
73550: LD_VAR 0 6
73554: PUSH
73555: LD_INT 1
73557: ARRAY
73558: PPUSH
73559: LD_VAR 0 2
73563: PPUSH
73564: LD_VAR 0 5
73568: PPUSH
73569: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
73573: LD_VAR 0 6
73577: PUSH
73578: LD_INT 1
73580: ARRAY
73581: PPUSH
73582: LD_VAR 0 3
73586: PPUSH
73587: LD_VAR 0 4
73591: PPUSH
73592: CALL_OW 237
// end ;
73596: PPOPN 6
73598: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
73599: LD_EXP 77
73603: PUSH
73604: LD_EXP 124
73608: AND
73609: IFFALSE 73688
73611: GO 73613
73613: DISABLE
73614: LD_INT 0
73616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
73617: LD_ADDR_VAR 0 1
73621: PUSH
73622: LD_INT 22
73624: PUSH
73625: LD_OWVAR 2
73629: PUSH
73630: EMPTY
73631: LIST
73632: LIST
73633: PUSH
73634: LD_INT 30
73636: PUSH
73637: LD_INT 3
73639: PUSH
73640: EMPTY
73641: LIST
73642: LIST
73643: PUSH
73644: EMPTY
73645: LIST
73646: LIST
73647: PPUSH
73648: CALL_OW 69
73652: ST_TO_ADDR
// if not tmp then
73653: LD_VAR 0 1
73657: NOT
73658: IFFALSE 73662
// exit ;
73660: GO 73688
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
73662: LD_VAR 0 1
73666: PUSH
73667: LD_INT 1
73669: PPUSH
73670: LD_VAR 0 1
73674: PPUSH
73675: CALL_OW 12
73679: ARRAY
73680: PPUSH
73681: LD_INT 1
73683: PPUSH
73684: CALL_OW 234
// end ;
73688: PPOPN 1
73690: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
73691: LD_EXP 77
73695: PUSH
73696: LD_EXP 125
73700: AND
73701: IFFALSE 73813
73703: GO 73705
73705: DISABLE
73706: LD_INT 0
73708: PPUSH
73709: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
73710: LD_ADDR_VAR 0 2
73714: PUSH
73715: LD_INT 22
73717: PUSH
73718: LD_OWVAR 2
73722: PUSH
73723: EMPTY
73724: LIST
73725: LIST
73726: PUSH
73727: LD_INT 2
73729: PUSH
73730: LD_INT 30
73732: PUSH
73733: LD_INT 27
73735: PUSH
73736: EMPTY
73737: LIST
73738: LIST
73739: PUSH
73740: LD_INT 30
73742: PUSH
73743: LD_INT 26
73745: PUSH
73746: EMPTY
73747: LIST
73748: LIST
73749: PUSH
73750: LD_INT 30
73752: PUSH
73753: LD_INT 28
73755: PUSH
73756: EMPTY
73757: LIST
73758: LIST
73759: PUSH
73760: EMPTY
73761: LIST
73762: LIST
73763: LIST
73764: LIST
73765: PUSH
73766: EMPTY
73767: LIST
73768: LIST
73769: PPUSH
73770: CALL_OW 69
73774: ST_TO_ADDR
// if not tmp then
73775: LD_VAR 0 2
73779: NOT
73780: IFFALSE 73784
// exit ;
73782: GO 73813
// for i in tmp do
73784: LD_ADDR_VAR 0 1
73788: PUSH
73789: LD_VAR 0 2
73793: PUSH
73794: FOR_IN
73795: IFFALSE 73811
// SetLives ( i , 1 ) ;
73797: LD_VAR 0 1
73801: PPUSH
73802: LD_INT 1
73804: PPUSH
73805: CALL_OW 234
73809: GO 73794
73811: POP
73812: POP
// end ;
73813: PPOPN 2
73815: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
73816: LD_EXP 77
73820: PUSH
73821: LD_EXP 126
73825: AND
73826: IFFALSE 74100
73828: GO 73830
73830: DISABLE
73831: LD_INT 0
73833: PPUSH
73834: PPUSH
73835: PPUSH
// begin i := rand ( 1 , 7 ) ;
73836: LD_ADDR_VAR 0 1
73840: PUSH
73841: LD_INT 1
73843: PPUSH
73844: LD_INT 7
73846: PPUSH
73847: CALL_OW 12
73851: ST_TO_ADDR
// case i of 1 :
73852: LD_VAR 0 1
73856: PUSH
73857: LD_INT 1
73859: DOUBLE
73860: EQUAL
73861: IFTRUE 73865
73863: GO 73875
73865: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
73866: LD_STRING earthquake(getX(game), 0, 32)
73868: PPUSH
73869: CALL_OW 559
73873: GO 74100
73875: LD_INT 2
73877: DOUBLE
73878: EQUAL
73879: IFTRUE 73883
73881: GO 73897
73883: POP
// begin ToLua ( displayStucuk(); ) ;
73884: LD_STRING displayStucuk();
73886: PPUSH
73887: CALL_OW 559
// ResetFog ;
73891: CALL_OW 335
// end ; 3 :
73895: GO 74100
73897: LD_INT 3
73899: DOUBLE
73900: EQUAL
73901: IFTRUE 73905
73903: GO 74009
73905: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73906: LD_ADDR_VAR 0 2
73910: PUSH
73911: LD_INT 22
73913: PUSH
73914: LD_OWVAR 2
73918: PUSH
73919: EMPTY
73920: LIST
73921: LIST
73922: PUSH
73923: LD_INT 25
73925: PUSH
73926: LD_INT 1
73928: PUSH
73929: EMPTY
73930: LIST
73931: LIST
73932: PUSH
73933: EMPTY
73934: LIST
73935: LIST
73936: PPUSH
73937: CALL_OW 69
73941: ST_TO_ADDR
// if not tmp then
73942: LD_VAR 0 2
73946: NOT
73947: IFFALSE 73951
// exit ;
73949: GO 74100
// un := tmp [ rand ( 1 , tmp ) ] ;
73951: LD_ADDR_VAR 0 3
73955: PUSH
73956: LD_VAR 0 2
73960: PUSH
73961: LD_INT 1
73963: PPUSH
73964: LD_VAR 0 2
73968: PPUSH
73969: CALL_OW 12
73973: ARRAY
73974: ST_TO_ADDR
// if Crawls ( un ) then
73975: LD_VAR 0 3
73979: PPUSH
73980: CALL_OW 318
73984: IFFALSE 73995
// ComWalk ( un ) ;
73986: LD_VAR 0 3
73990: PPUSH
73991: CALL_OW 138
// SetClass ( un , class_mortar ) ;
73995: LD_VAR 0 3
73999: PPUSH
74000: LD_INT 8
74002: PPUSH
74003: CALL_OW 336
// end ; 4 :
74007: GO 74100
74009: LD_INT 4
74011: DOUBLE
74012: EQUAL
74013: IFTRUE 74017
74015: GO 74078
74017: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
74018: LD_ADDR_VAR 0 2
74022: PUSH
74023: LD_INT 22
74025: PUSH
74026: LD_OWVAR 2
74030: PUSH
74031: EMPTY
74032: LIST
74033: LIST
74034: PUSH
74035: LD_INT 30
74037: PUSH
74038: LD_INT 29
74040: PUSH
74041: EMPTY
74042: LIST
74043: LIST
74044: PUSH
74045: EMPTY
74046: LIST
74047: LIST
74048: PPUSH
74049: CALL_OW 69
74053: ST_TO_ADDR
// if not tmp then
74054: LD_VAR 0 2
74058: NOT
74059: IFFALSE 74063
// exit ;
74061: GO 74100
// DestroyUnit ( tmp [ 1 ] ) ;
74063: LD_VAR 0 2
74067: PUSH
74068: LD_INT 1
74070: ARRAY
74071: PPUSH
74072: CALL_OW 65
// end ; 5 .. 7 :
74076: GO 74100
74078: LD_INT 5
74080: DOUBLE
74081: GREATEREQUAL
74082: IFFALSE 74090
74084: LD_INT 7
74086: DOUBLE
74087: LESSEQUAL
74088: IFTRUE 74092
74090: GO 74099
74092: POP
// StreamSibBomb ; end ;
74093: CALL 70350 0 0
74097: GO 74100
74099: POP
// end ;
74100: PPOPN 3
74102: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
74103: LD_EXP 77
74107: PUSH
74108: LD_EXP 127
74112: AND
74113: IFFALSE 74269
74115: GO 74117
74117: DISABLE
74118: LD_INT 0
74120: PPUSH
74121: PPUSH
74122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
74123: LD_ADDR_VAR 0 2
74127: PUSH
74128: LD_INT 81
74130: PUSH
74131: LD_OWVAR 2
74135: PUSH
74136: EMPTY
74137: LIST
74138: LIST
74139: PUSH
74140: LD_INT 2
74142: PUSH
74143: LD_INT 21
74145: PUSH
74146: LD_INT 1
74148: PUSH
74149: EMPTY
74150: LIST
74151: LIST
74152: PUSH
74153: LD_INT 21
74155: PUSH
74156: LD_INT 2
74158: PUSH
74159: EMPTY
74160: LIST
74161: LIST
74162: PUSH
74163: EMPTY
74164: LIST
74165: LIST
74166: LIST
74167: PUSH
74168: EMPTY
74169: LIST
74170: LIST
74171: PPUSH
74172: CALL_OW 69
74176: ST_TO_ADDR
// if not tmp then
74177: LD_VAR 0 2
74181: NOT
74182: IFFALSE 74186
// exit ;
74184: GO 74269
// p := 0 ;
74186: LD_ADDR_VAR 0 3
74190: PUSH
74191: LD_INT 0
74193: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
74194: LD_INT 35
74196: PPUSH
74197: CALL_OW 67
// p := p + 1 ;
74201: LD_ADDR_VAR 0 3
74205: PUSH
74206: LD_VAR 0 3
74210: PUSH
74211: LD_INT 1
74213: PLUS
74214: ST_TO_ADDR
// for i in tmp do
74215: LD_ADDR_VAR 0 1
74219: PUSH
74220: LD_VAR 0 2
74224: PUSH
74225: FOR_IN
74226: IFFALSE 74257
// if GetLives ( i ) < 1000 then
74228: LD_VAR 0 1
74232: PPUSH
74233: CALL_OW 256
74237: PUSH
74238: LD_INT 1000
74240: LESS
74241: IFFALSE 74255
// SetLives ( i , 1000 ) ;
74243: LD_VAR 0 1
74247: PPUSH
74248: LD_INT 1000
74250: PPUSH
74251: CALL_OW 234
74255: GO 74225
74257: POP
74258: POP
// until p > 20 ;
74259: LD_VAR 0 3
74263: PUSH
74264: LD_INT 20
74266: GREATER
74267: IFFALSE 74194
// end ;
74269: PPOPN 3
74271: END
// every 0 0$1 trigger StreamModeActive and sTime do
74272: LD_EXP 77
74276: PUSH
74277: LD_EXP 128
74281: AND
74282: IFFALSE 74317
74284: GO 74286
74286: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
74287: LD_INT 28
74289: PPUSH
74290: LD_OWVAR 2
74294: PPUSH
74295: LD_INT 2
74297: PPUSH
74298: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
74302: LD_INT 30
74304: PPUSH
74305: LD_OWVAR 2
74309: PPUSH
74310: LD_INT 2
74312: PPUSH
74313: CALL_OW 322
// end ;
74317: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
74318: LD_EXP 77
74322: PUSH
74323: LD_EXP 129
74327: AND
74328: IFFALSE 74449
74330: GO 74332
74332: DISABLE
74333: LD_INT 0
74335: PPUSH
74336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
74337: LD_ADDR_VAR 0 2
74341: PUSH
74342: LD_INT 22
74344: PUSH
74345: LD_OWVAR 2
74349: PUSH
74350: EMPTY
74351: LIST
74352: LIST
74353: PUSH
74354: LD_INT 21
74356: PUSH
74357: LD_INT 1
74359: PUSH
74360: EMPTY
74361: LIST
74362: LIST
74363: PUSH
74364: LD_INT 3
74366: PUSH
74367: LD_INT 23
74369: PUSH
74370: LD_INT 0
74372: PUSH
74373: EMPTY
74374: LIST
74375: LIST
74376: PUSH
74377: EMPTY
74378: LIST
74379: LIST
74380: PUSH
74381: EMPTY
74382: LIST
74383: LIST
74384: LIST
74385: PPUSH
74386: CALL_OW 69
74390: ST_TO_ADDR
// if not tmp then
74391: LD_VAR 0 2
74395: NOT
74396: IFFALSE 74400
// exit ;
74398: GO 74449
// for i in tmp do
74400: LD_ADDR_VAR 0 1
74404: PUSH
74405: LD_VAR 0 2
74409: PUSH
74410: FOR_IN
74411: IFFALSE 74447
// begin if Crawls ( i ) then
74413: LD_VAR 0 1
74417: PPUSH
74418: CALL_OW 318
74422: IFFALSE 74433
// ComWalk ( i ) ;
74424: LD_VAR 0 1
74428: PPUSH
74429: CALL_OW 138
// SetClass ( i , 2 ) ;
74433: LD_VAR 0 1
74437: PPUSH
74438: LD_INT 2
74440: PPUSH
74441: CALL_OW 336
// end ;
74445: GO 74410
74447: POP
74448: POP
// end ;
74449: PPOPN 2
74451: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
74452: LD_EXP 77
74456: PUSH
74457: LD_EXP 130
74461: AND
74462: IFFALSE 74743
74464: GO 74466
74466: DISABLE
74467: LD_INT 0
74469: PPUSH
74470: PPUSH
74471: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
74472: LD_OWVAR 2
74476: PPUSH
74477: LD_INT 9
74479: PPUSH
74480: LD_INT 1
74482: PPUSH
74483: LD_INT 1
74485: PPUSH
74486: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
74490: LD_INT 9
74492: PPUSH
74493: LD_OWVAR 2
74497: PPUSH
74498: CALL_OW 343
// uc_side := 9 ;
74502: LD_ADDR_OWVAR 20
74506: PUSH
74507: LD_INT 9
74509: ST_TO_ADDR
// uc_nation := 2 ;
74510: LD_ADDR_OWVAR 21
74514: PUSH
74515: LD_INT 2
74517: ST_TO_ADDR
// hc_name := Dark Warrior ;
74518: LD_ADDR_OWVAR 26
74522: PUSH
74523: LD_STRING Dark Warrior
74525: ST_TO_ADDR
// hc_gallery :=  ;
74526: LD_ADDR_OWVAR 33
74530: PUSH
74531: LD_STRING 
74533: ST_TO_ADDR
// hc_noskilllimit := true ;
74534: LD_ADDR_OWVAR 76
74538: PUSH
74539: LD_INT 1
74541: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
74542: LD_ADDR_OWVAR 31
74546: PUSH
74547: LD_INT 30
74549: PUSH
74550: LD_INT 30
74552: PUSH
74553: LD_INT 30
74555: PUSH
74556: LD_INT 30
74558: PUSH
74559: EMPTY
74560: LIST
74561: LIST
74562: LIST
74563: LIST
74564: ST_TO_ADDR
// un := CreateHuman ;
74565: LD_ADDR_VAR 0 3
74569: PUSH
74570: CALL_OW 44
74574: ST_TO_ADDR
// hc_noskilllimit := false ;
74575: LD_ADDR_OWVAR 76
74579: PUSH
74580: LD_INT 0
74582: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
74583: LD_VAR 0 3
74587: PPUSH
74588: LD_INT 1
74590: PPUSH
74591: CALL_OW 51
// p := 0 ;
74595: LD_ADDR_VAR 0 2
74599: PUSH
74600: LD_INT 0
74602: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
74603: LD_INT 35
74605: PPUSH
74606: CALL_OW 67
// p := p + 1 ;
74610: LD_ADDR_VAR 0 2
74614: PUSH
74615: LD_VAR 0 2
74619: PUSH
74620: LD_INT 1
74622: PLUS
74623: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
74624: LD_VAR 0 3
74628: PPUSH
74629: CALL_OW 256
74633: PUSH
74634: LD_INT 1000
74636: LESS
74637: IFFALSE 74651
// SetLives ( un , 1000 ) ;
74639: LD_VAR 0 3
74643: PPUSH
74644: LD_INT 1000
74646: PPUSH
74647: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
74651: LD_VAR 0 3
74655: PPUSH
74656: LD_INT 81
74658: PUSH
74659: LD_OWVAR 2
74663: PUSH
74664: EMPTY
74665: LIST
74666: LIST
74667: PUSH
74668: LD_INT 91
74670: PUSH
74671: LD_VAR 0 3
74675: PUSH
74676: LD_INT 30
74678: PUSH
74679: EMPTY
74680: LIST
74681: LIST
74682: LIST
74683: PUSH
74684: EMPTY
74685: LIST
74686: LIST
74687: PPUSH
74688: CALL_OW 69
74692: PPUSH
74693: LD_VAR 0 3
74697: PPUSH
74698: CALL_OW 74
74702: PPUSH
74703: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
74707: LD_VAR 0 2
74711: PUSH
74712: LD_INT 60
74714: GREATER
74715: PUSH
74716: LD_VAR 0 3
74720: PPUSH
74721: CALL_OW 301
74725: OR
74726: IFFALSE 74603
// if un then
74728: LD_VAR 0 3
74732: IFFALSE 74743
// RemoveUnit ( un ) ;
74734: LD_VAR 0 3
74738: PPUSH
74739: CALL_OW 64
// end ;
74743: PPOPN 3
74745: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
74746: LD_INT 0
74748: PPUSH
// case cmd of 301 :
74749: LD_VAR 0 1
74753: PUSH
74754: LD_INT 301
74756: DOUBLE
74757: EQUAL
74758: IFTRUE 74762
74760: GO 74794
74762: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
74763: LD_VAR 0 6
74767: PPUSH
74768: LD_VAR 0 7
74772: PPUSH
74773: LD_VAR 0 8
74777: PPUSH
74778: LD_VAR 0 4
74782: PPUSH
74783: LD_VAR 0 5
74787: PPUSH
74788: CALL 75995 0 5
74792: GO 74915
74794: LD_INT 302
74796: DOUBLE
74797: EQUAL
74798: IFTRUE 74802
74800: GO 74839
74802: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
74803: LD_VAR 0 6
74807: PPUSH
74808: LD_VAR 0 7
74812: PPUSH
74813: LD_VAR 0 8
74817: PPUSH
74818: LD_VAR 0 9
74822: PPUSH
74823: LD_VAR 0 4
74827: PPUSH
74828: LD_VAR 0 5
74832: PPUSH
74833: CALL 76086 0 6
74837: GO 74915
74839: LD_INT 303
74841: DOUBLE
74842: EQUAL
74843: IFTRUE 74847
74845: GO 74884
74847: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
74848: LD_VAR 0 6
74852: PPUSH
74853: LD_VAR 0 7
74857: PPUSH
74858: LD_VAR 0 8
74862: PPUSH
74863: LD_VAR 0 9
74867: PPUSH
74868: LD_VAR 0 4
74872: PPUSH
74873: LD_VAR 0 5
74877: PPUSH
74878: CALL 74920 0 6
74882: GO 74915
74884: LD_INT 304
74886: DOUBLE
74887: EQUAL
74888: IFTRUE 74892
74890: GO 74914
74892: POP
// hHackTeleport ( unit , x , y ) ; end ;
74893: LD_VAR 0 2
74897: PPUSH
74898: LD_VAR 0 4
74902: PPUSH
74903: LD_VAR 0 5
74907: PPUSH
74908: CALL 76679 0 3
74912: GO 74915
74914: POP
// end ;
74915: LD_VAR 0 12
74919: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
74920: LD_INT 0
74922: PPUSH
74923: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
74924: LD_VAR 0 1
74928: PUSH
74929: LD_INT 1
74931: LESS
74932: PUSH
74933: LD_VAR 0 1
74937: PUSH
74938: LD_INT 3
74940: GREATER
74941: OR
74942: PUSH
74943: LD_VAR 0 5
74947: PPUSH
74948: LD_VAR 0 6
74952: PPUSH
74953: CALL_OW 428
74957: OR
74958: IFFALSE 74962
// exit ;
74960: GO 75682
// uc_side := your_side ;
74962: LD_ADDR_OWVAR 20
74966: PUSH
74967: LD_OWVAR 2
74971: ST_TO_ADDR
// uc_nation := nation ;
74972: LD_ADDR_OWVAR 21
74976: PUSH
74977: LD_VAR 0 1
74981: ST_TO_ADDR
// bc_level = 1 ;
74982: LD_ADDR_OWVAR 43
74986: PUSH
74987: LD_INT 1
74989: ST_TO_ADDR
// case btype of 1 :
74990: LD_VAR 0 2
74994: PUSH
74995: LD_INT 1
74997: DOUBLE
74998: EQUAL
74999: IFTRUE 75003
75001: GO 75014
75003: POP
// bc_type := b_depot ; 2 :
75004: LD_ADDR_OWVAR 42
75008: PUSH
75009: LD_INT 0
75011: ST_TO_ADDR
75012: GO 75626
75014: LD_INT 2
75016: DOUBLE
75017: EQUAL
75018: IFTRUE 75022
75020: GO 75033
75022: POP
// bc_type := b_warehouse ; 3 :
75023: LD_ADDR_OWVAR 42
75027: PUSH
75028: LD_INT 1
75030: ST_TO_ADDR
75031: GO 75626
75033: LD_INT 3
75035: DOUBLE
75036: EQUAL
75037: IFTRUE 75041
75039: GO 75052
75041: POP
// bc_type := b_lab ; 4 .. 9 :
75042: LD_ADDR_OWVAR 42
75046: PUSH
75047: LD_INT 6
75049: ST_TO_ADDR
75050: GO 75626
75052: LD_INT 4
75054: DOUBLE
75055: GREATEREQUAL
75056: IFFALSE 75064
75058: LD_INT 9
75060: DOUBLE
75061: LESSEQUAL
75062: IFTRUE 75066
75064: GO 75118
75066: POP
// begin bc_type := b_lab_half ;
75067: LD_ADDR_OWVAR 42
75071: PUSH
75072: LD_INT 7
75074: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
75075: LD_ADDR_OWVAR 44
75079: PUSH
75080: LD_INT 10
75082: PUSH
75083: LD_INT 11
75085: PUSH
75086: LD_INT 12
75088: PUSH
75089: LD_INT 15
75091: PUSH
75092: LD_INT 14
75094: PUSH
75095: LD_INT 13
75097: PUSH
75098: EMPTY
75099: LIST
75100: LIST
75101: LIST
75102: LIST
75103: LIST
75104: LIST
75105: PUSH
75106: LD_VAR 0 2
75110: PUSH
75111: LD_INT 3
75113: MINUS
75114: ARRAY
75115: ST_TO_ADDR
// end ; 10 .. 13 :
75116: GO 75626
75118: LD_INT 10
75120: DOUBLE
75121: GREATEREQUAL
75122: IFFALSE 75130
75124: LD_INT 13
75126: DOUBLE
75127: LESSEQUAL
75128: IFTRUE 75132
75130: GO 75209
75132: POP
// begin bc_type := b_lab_full ;
75133: LD_ADDR_OWVAR 42
75137: PUSH
75138: LD_INT 8
75140: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
75141: LD_ADDR_OWVAR 44
75145: PUSH
75146: LD_INT 10
75148: PUSH
75149: LD_INT 12
75151: PUSH
75152: LD_INT 14
75154: PUSH
75155: LD_INT 13
75157: PUSH
75158: EMPTY
75159: LIST
75160: LIST
75161: LIST
75162: LIST
75163: PUSH
75164: LD_VAR 0 2
75168: PUSH
75169: LD_INT 9
75171: MINUS
75172: ARRAY
75173: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
75174: LD_ADDR_OWVAR 45
75178: PUSH
75179: LD_INT 11
75181: PUSH
75182: LD_INT 15
75184: PUSH
75185: LD_INT 12
75187: PUSH
75188: LD_INT 15
75190: PUSH
75191: EMPTY
75192: LIST
75193: LIST
75194: LIST
75195: LIST
75196: PUSH
75197: LD_VAR 0 2
75201: PUSH
75202: LD_INT 9
75204: MINUS
75205: ARRAY
75206: ST_TO_ADDR
// end ; 14 :
75207: GO 75626
75209: LD_INT 14
75211: DOUBLE
75212: EQUAL
75213: IFTRUE 75217
75215: GO 75228
75217: POP
// bc_type := b_workshop ; 15 :
75218: LD_ADDR_OWVAR 42
75222: PUSH
75223: LD_INT 2
75225: ST_TO_ADDR
75226: GO 75626
75228: LD_INT 15
75230: DOUBLE
75231: EQUAL
75232: IFTRUE 75236
75234: GO 75247
75236: POP
// bc_type := b_factory ; 16 :
75237: LD_ADDR_OWVAR 42
75241: PUSH
75242: LD_INT 3
75244: ST_TO_ADDR
75245: GO 75626
75247: LD_INT 16
75249: DOUBLE
75250: EQUAL
75251: IFTRUE 75255
75253: GO 75266
75255: POP
// bc_type := b_ext_gun ; 17 :
75256: LD_ADDR_OWVAR 42
75260: PUSH
75261: LD_INT 17
75263: ST_TO_ADDR
75264: GO 75626
75266: LD_INT 17
75268: DOUBLE
75269: EQUAL
75270: IFTRUE 75274
75272: GO 75302
75274: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
75275: LD_ADDR_OWVAR 42
75279: PUSH
75280: LD_INT 19
75282: PUSH
75283: LD_INT 23
75285: PUSH
75286: LD_INT 19
75288: PUSH
75289: EMPTY
75290: LIST
75291: LIST
75292: LIST
75293: PUSH
75294: LD_VAR 0 1
75298: ARRAY
75299: ST_TO_ADDR
75300: GO 75626
75302: LD_INT 18
75304: DOUBLE
75305: EQUAL
75306: IFTRUE 75310
75308: GO 75321
75310: POP
// bc_type := b_ext_radar ; 19 :
75311: LD_ADDR_OWVAR 42
75315: PUSH
75316: LD_INT 20
75318: ST_TO_ADDR
75319: GO 75626
75321: LD_INT 19
75323: DOUBLE
75324: EQUAL
75325: IFTRUE 75329
75327: GO 75340
75329: POP
// bc_type := b_ext_radio ; 20 :
75330: LD_ADDR_OWVAR 42
75334: PUSH
75335: LD_INT 22
75337: ST_TO_ADDR
75338: GO 75626
75340: LD_INT 20
75342: DOUBLE
75343: EQUAL
75344: IFTRUE 75348
75346: GO 75359
75348: POP
// bc_type := b_ext_siberium ; 21 :
75349: LD_ADDR_OWVAR 42
75353: PUSH
75354: LD_INT 21
75356: ST_TO_ADDR
75357: GO 75626
75359: LD_INT 21
75361: DOUBLE
75362: EQUAL
75363: IFTRUE 75367
75365: GO 75378
75367: POP
// bc_type := b_ext_computer ; 22 :
75368: LD_ADDR_OWVAR 42
75372: PUSH
75373: LD_INT 24
75375: ST_TO_ADDR
75376: GO 75626
75378: LD_INT 22
75380: DOUBLE
75381: EQUAL
75382: IFTRUE 75386
75384: GO 75397
75386: POP
// bc_type := b_ext_track ; 23 :
75387: LD_ADDR_OWVAR 42
75391: PUSH
75392: LD_INT 16
75394: ST_TO_ADDR
75395: GO 75626
75397: LD_INT 23
75399: DOUBLE
75400: EQUAL
75401: IFTRUE 75405
75403: GO 75416
75405: POP
// bc_type := b_ext_laser ; 24 :
75406: LD_ADDR_OWVAR 42
75410: PUSH
75411: LD_INT 25
75413: ST_TO_ADDR
75414: GO 75626
75416: LD_INT 24
75418: DOUBLE
75419: EQUAL
75420: IFTRUE 75424
75422: GO 75435
75424: POP
// bc_type := b_control_tower ; 25 :
75425: LD_ADDR_OWVAR 42
75429: PUSH
75430: LD_INT 36
75432: ST_TO_ADDR
75433: GO 75626
75435: LD_INT 25
75437: DOUBLE
75438: EQUAL
75439: IFTRUE 75443
75441: GO 75454
75443: POP
// bc_type := b_breastwork ; 26 :
75444: LD_ADDR_OWVAR 42
75448: PUSH
75449: LD_INT 31
75451: ST_TO_ADDR
75452: GO 75626
75454: LD_INT 26
75456: DOUBLE
75457: EQUAL
75458: IFTRUE 75462
75460: GO 75473
75462: POP
// bc_type := b_bunker ; 27 :
75463: LD_ADDR_OWVAR 42
75467: PUSH
75468: LD_INT 32
75470: ST_TO_ADDR
75471: GO 75626
75473: LD_INT 27
75475: DOUBLE
75476: EQUAL
75477: IFTRUE 75481
75479: GO 75492
75481: POP
// bc_type := b_turret ; 28 :
75482: LD_ADDR_OWVAR 42
75486: PUSH
75487: LD_INT 33
75489: ST_TO_ADDR
75490: GO 75626
75492: LD_INT 28
75494: DOUBLE
75495: EQUAL
75496: IFTRUE 75500
75498: GO 75511
75500: POP
// bc_type := b_armoury ; 29 :
75501: LD_ADDR_OWVAR 42
75505: PUSH
75506: LD_INT 4
75508: ST_TO_ADDR
75509: GO 75626
75511: LD_INT 29
75513: DOUBLE
75514: EQUAL
75515: IFTRUE 75519
75517: GO 75530
75519: POP
// bc_type := b_barracks ; 30 :
75520: LD_ADDR_OWVAR 42
75524: PUSH
75525: LD_INT 5
75527: ST_TO_ADDR
75528: GO 75626
75530: LD_INT 30
75532: DOUBLE
75533: EQUAL
75534: IFTRUE 75538
75536: GO 75549
75538: POP
// bc_type := b_solar_power ; 31 :
75539: LD_ADDR_OWVAR 42
75543: PUSH
75544: LD_INT 27
75546: ST_TO_ADDR
75547: GO 75626
75549: LD_INT 31
75551: DOUBLE
75552: EQUAL
75553: IFTRUE 75557
75555: GO 75568
75557: POP
// bc_type := b_oil_power ; 32 :
75558: LD_ADDR_OWVAR 42
75562: PUSH
75563: LD_INT 26
75565: ST_TO_ADDR
75566: GO 75626
75568: LD_INT 32
75570: DOUBLE
75571: EQUAL
75572: IFTRUE 75576
75574: GO 75587
75576: POP
// bc_type := b_siberite_power ; 33 :
75577: LD_ADDR_OWVAR 42
75581: PUSH
75582: LD_INT 28
75584: ST_TO_ADDR
75585: GO 75626
75587: LD_INT 33
75589: DOUBLE
75590: EQUAL
75591: IFTRUE 75595
75593: GO 75606
75595: POP
// bc_type := b_oil_mine ; 34 :
75596: LD_ADDR_OWVAR 42
75600: PUSH
75601: LD_INT 29
75603: ST_TO_ADDR
75604: GO 75626
75606: LD_INT 34
75608: DOUBLE
75609: EQUAL
75610: IFTRUE 75614
75612: GO 75625
75614: POP
// bc_type := b_siberite_mine ; end ;
75615: LD_ADDR_OWVAR 42
75619: PUSH
75620: LD_INT 30
75622: ST_TO_ADDR
75623: GO 75626
75625: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
75626: LD_ADDR_VAR 0 8
75630: PUSH
75631: LD_VAR 0 5
75635: PPUSH
75636: LD_VAR 0 6
75640: PPUSH
75641: LD_VAR 0 3
75645: PPUSH
75646: CALL_OW 47
75650: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
75651: LD_OWVAR 42
75655: PUSH
75656: LD_INT 32
75658: PUSH
75659: LD_INT 33
75661: PUSH
75662: EMPTY
75663: LIST
75664: LIST
75665: IN
75666: IFFALSE 75682
// PlaceWeaponTurret ( b , weapon ) ;
75668: LD_VAR 0 8
75672: PPUSH
75673: LD_VAR 0 4
75677: PPUSH
75678: CALL_OW 431
// end ;
75682: LD_VAR 0 7
75686: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
75687: LD_INT 0
75689: PPUSH
75690: PPUSH
75691: PPUSH
75692: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75693: LD_ADDR_VAR 0 4
75697: PUSH
75698: LD_INT 22
75700: PUSH
75701: LD_OWVAR 2
75705: PUSH
75706: EMPTY
75707: LIST
75708: LIST
75709: PUSH
75710: LD_INT 2
75712: PUSH
75713: LD_INT 30
75715: PUSH
75716: LD_INT 0
75718: PUSH
75719: EMPTY
75720: LIST
75721: LIST
75722: PUSH
75723: LD_INT 30
75725: PUSH
75726: LD_INT 1
75728: PUSH
75729: EMPTY
75730: LIST
75731: LIST
75732: PUSH
75733: EMPTY
75734: LIST
75735: LIST
75736: LIST
75737: PUSH
75738: EMPTY
75739: LIST
75740: LIST
75741: PPUSH
75742: CALL_OW 69
75746: ST_TO_ADDR
// if not tmp then
75747: LD_VAR 0 4
75751: NOT
75752: IFFALSE 75756
// exit ;
75754: GO 75815
// for i in tmp do
75756: LD_ADDR_VAR 0 2
75760: PUSH
75761: LD_VAR 0 4
75765: PUSH
75766: FOR_IN
75767: IFFALSE 75813
// for j = 1 to 3 do
75769: LD_ADDR_VAR 0 3
75773: PUSH
75774: DOUBLE
75775: LD_INT 1
75777: DEC
75778: ST_TO_ADDR
75779: LD_INT 3
75781: PUSH
75782: FOR_TO
75783: IFFALSE 75809
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
75785: LD_VAR 0 2
75789: PPUSH
75790: CALL_OW 274
75794: PPUSH
75795: LD_VAR 0 3
75799: PPUSH
75800: LD_INT 99999
75802: PPUSH
75803: CALL_OW 277
75807: GO 75782
75809: POP
75810: POP
75811: GO 75766
75813: POP
75814: POP
// end ;
75815: LD_VAR 0 1
75819: RET
// export function hHackSetLevel10 ; var i , j ; begin
75820: LD_INT 0
75822: PPUSH
75823: PPUSH
75824: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75825: LD_ADDR_VAR 0 2
75829: PUSH
75830: LD_INT 21
75832: PUSH
75833: LD_INT 1
75835: PUSH
75836: EMPTY
75837: LIST
75838: LIST
75839: PPUSH
75840: CALL_OW 69
75844: PUSH
75845: FOR_IN
75846: IFFALSE 75898
// if IsSelected ( i ) then
75848: LD_VAR 0 2
75852: PPUSH
75853: CALL_OW 306
75857: IFFALSE 75896
// begin for j := 1 to 4 do
75859: LD_ADDR_VAR 0 3
75863: PUSH
75864: DOUBLE
75865: LD_INT 1
75867: DEC
75868: ST_TO_ADDR
75869: LD_INT 4
75871: PUSH
75872: FOR_TO
75873: IFFALSE 75894
// SetSkill ( i , j , 10 ) ;
75875: LD_VAR 0 2
75879: PPUSH
75880: LD_VAR 0 3
75884: PPUSH
75885: LD_INT 10
75887: PPUSH
75888: CALL_OW 237
75892: GO 75872
75894: POP
75895: POP
// end ;
75896: GO 75845
75898: POP
75899: POP
// end ;
75900: LD_VAR 0 1
75904: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
75905: LD_INT 0
75907: PPUSH
75908: PPUSH
75909: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
75910: LD_ADDR_VAR 0 2
75914: PUSH
75915: LD_INT 22
75917: PUSH
75918: LD_OWVAR 2
75922: PUSH
75923: EMPTY
75924: LIST
75925: LIST
75926: PUSH
75927: LD_INT 21
75929: PUSH
75930: LD_INT 1
75932: PUSH
75933: EMPTY
75934: LIST
75935: LIST
75936: PUSH
75937: EMPTY
75938: LIST
75939: LIST
75940: PPUSH
75941: CALL_OW 69
75945: PUSH
75946: FOR_IN
75947: IFFALSE 75988
// begin for j := 1 to 4 do
75949: LD_ADDR_VAR 0 3
75953: PUSH
75954: DOUBLE
75955: LD_INT 1
75957: DEC
75958: ST_TO_ADDR
75959: LD_INT 4
75961: PUSH
75962: FOR_TO
75963: IFFALSE 75984
// SetSkill ( i , j , 10 ) ;
75965: LD_VAR 0 2
75969: PPUSH
75970: LD_VAR 0 3
75974: PPUSH
75975: LD_INT 10
75977: PPUSH
75978: CALL_OW 237
75982: GO 75962
75984: POP
75985: POP
// end ;
75986: GO 75946
75988: POP
75989: POP
// end ;
75990: LD_VAR 0 1
75994: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
75995: LD_INT 0
75997: PPUSH
// uc_side := your_side ;
75998: LD_ADDR_OWVAR 20
76002: PUSH
76003: LD_OWVAR 2
76007: ST_TO_ADDR
// uc_nation := nation ;
76008: LD_ADDR_OWVAR 21
76012: PUSH
76013: LD_VAR 0 1
76017: ST_TO_ADDR
// InitHc ;
76018: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
76022: LD_INT 0
76024: PPUSH
76025: LD_VAR 0 2
76029: PPUSH
76030: LD_VAR 0 3
76034: PPUSH
76035: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
76039: LD_VAR 0 4
76043: PPUSH
76044: LD_VAR 0 5
76048: PPUSH
76049: CALL_OW 428
76053: PUSH
76054: LD_INT 0
76056: EQUAL
76057: IFFALSE 76081
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
76059: CALL_OW 44
76063: PPUSH
76064: LD_VAR 0 4
76068: PPUSH
76069: LD_VAR 0 5
76073: PPUSH
76074: LD_INT 1
76076: PPUSH
76077: CALL_OW 48
// end ;
76081: LD_VAR 0 6
76085: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
76086: LD_INT 0
76088: PPUSH
76089: PPUSH
// uc_side := your_side ;
76090: LD_ADDR_OWVAR 20
76094: PUSH
76095: LD_OWVAR 2
76099: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
76100: LD_VAR 0 1
76104: PUSH
76105: LD_INT 1
76107: PUSH
76108: LD_INT 2
76110: PUSH
76111: LD_INT 3
76113: PUSH
76114: LD_INT 4
76116: PUSH
76117: LD_INT 5
76119: PUSH
76120: EMPTY
76121: LIST
76122: LIST
76123: LIST
76124: LIST
76125: LIST
76126: IN
76127: IFFALSE 76139
// uc_nation := nation_american else
76129: LD_ADDR_OWVAR 21
76133: PUSH
76134: LD_INT 1
76136: ST_TO_ADDR
76137: GO 76182
// if chassis in [ 11 , 12 , 13 , 14 ] then
76139: LD_VAR 0 1
76143: PUSH
76144: LD_INT 11
76146: PUSH
76147: LD_INT 12
76149: PUSH
76150: LD_INT 13
76152: PUSH
76153: LD_INT 14
76155: PUSH
76156: EMPTY
76157: LIST
76158: LIST
76159: LIST
76160: LIST
76161: IN
76162: IFFALSE 76174
// uc_nation := nation_arabian else
76164: LD_ADDR_OWVAR 21
76168: PUSH
76169: LD_INT 2
76171: ST_TO_ADDR
76172: GO 76182
// uc_nation := nation_russian ;
76174: LD_ADDR_OWVAR 21
76178: PUSH
76179: LD_INT 3
76181: ST_TO_ADDR
// vc_chassis := chassis ;
76182: LD_ADDR_OWVAR 37
76186: PUSH
76187: LD_VAR 0 1
76191: ST_TO_ADDR
// vc_engine := engine ;
76192: LD_ADDR_OWVAR 39
76196: PUSH
76197: LD_VAR 0 2
76201: ST_TO_ADDR
// vc_control := control ;
76202: LD_ADDR_OWVAR 38
76206: PUSH
76207: LD_VAR 0 3
76211: ST_TO_ADDR
// vc_weapon := weapon ;
76212: LD_ADDR_OWVAR 40
76216: PUSH
76217: LD_VAR 0 4
76221: ST_TO_ADDR
// un := CreateVehicle ;
76222: LD_ADDR_VAR 0 8
76226: PUSH
76227: CALL_OW 45
76231: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
76232: LD_VAR 0 8
76236: PPUSH
76237: LD_INT 0
76239: PPUSH
76240: LD_INT 5
76242: PPUSH
76243: CALL_OW 12
76247: PPUSH
76248: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
76252: LD_VAR 0 8
76256: PPUSH
76257: LD_VAR 0 5
76261: PPUSH
76262: LD_VAR 0 6
76266: PPUSH
76267: LD_INT 1
76269: PPUSH
76270: CALL_OW 48
// end ;
76274: LD_VAR 0 7
76278: RET
// export hInvincible ; every 1 do
76279: GO 76281
76281: DISABLE
// hInvincible := [ ] ;
76282: LD_ADDR_EXP 131
76286: PUSH
76287: EMPTY
76288: ST_TO_ADDR
76289: END
// every 10 do var i ;
76290: GO 76292
76292: DISABLE
76293: LD_INT 0
76295: PPUSH
// begin enable ;
76296: ENABLE
// if not hInvincible then
76297: LD_EXP 131
76301: NOT
76302: IFFALSE 76306
// exit ;
76304: GO 76350
// for i in hInvincible do
76306: LD_ADDR_VAR 0 1
76310: PUSH
76311: LD_EXP 131
76315: PUSH
76316: FOR_IN
76317: IFFALSE 76348
// if GetLives ( i ) < 1000 then
76319: LD_VAR 0 1
76323: PPUSH
76324: CALL_OW 256
76328: PUSH
76329: LD_INT 1000
76331: LESS
76332: IFFALSE 76346
// SetLives ( i , 1000 ) ;
76334: LD_VAR 0 1
76338: PPUSH
76339: LD_INT 1000
76341: PPUSH
76342: CALL_OW 234
76346: GO 76316
76348: POP
76349: POP
// end ;
76350: PPOPN 1
76352: END
// export function hHackInvincible ; var i ; begin
76353: LD_INT 0
76355: PPUSH
76356: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
76357: LD_ADDR_VAR 0 2
76361: PUSH
76362: LD_INT 2
76364: PUSH
76365: LD_INT 21
76367: PUSH
76368: LD_INT 1
76370: PUSH
76371: EMPTY
76372: LIST
76373: LIST
76374: PUSH
76375: LD_INT 21
76377: PUSH
76378: LD_INT 2
76380: PUSH
76381: EMPTY
76382: LIST
76383: LIST
76384: PUSH
76385: EMPTY
76386: LIST
76387: LIST
76388: LIST
76389: PPUSH
76390: CALL_OW 69
76394: PUSH
76395: FOR_IN
76396: IFFALSE 76457
// if IsSelected ( i ) then
76398: LD_VAR 0 2
76402: PPUSH
76403: CALL_OW 306
76407: IFFALSE 76455
// begin if i in hInvincible then
76409: LD_VAR 0 2
76413: PUSH
76414: LD_EXP 131
76418: IN
76419: IFFALSE 76439
// hInvincible := hInvincible diff i else
76421: LD_ADDR_EXP 131
76425: PUSH
76426: LD_EXP 131
76430: PUSH
76431: LD_VAR 0 2
76435: DIFF
76436: ST_TO_ADDR
76437: GO 76455
// hInvincible := hInvincible union i ;
76439: LD_ADDR_EXP 131
76443: PUSH
76444: LD_EXP 131
76448: PUSH
76449: LD_VAR 0 2
76453: UNION
76454: ST_TO_ADDR
// end ;
76455: GO 76395
76457: POP
76458: POP
// end ;
76459: LD_VAR 0 1
76463: RET
// export function hHackInvisible ; var i , j ; begin
76464: LD_INT 0
76466: PPUSH
76467: PPUSH
76468: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
76469: LD_ADDR_VAR 0 2
76473: PUSH
76474: LD_INT 21
76476: PUSH
76477: LD_INT 1
76479: PUSH
76480: EMPTY
76481: LIST
76482: LIST
76483: PPUSH
76484: CALL_OW 69
76488: PUSH
76489: FOR_IN
76490: IFFALSE 76514
// if IsSelected ( i ) then
76492: LD_VAR 0 2
76496: PPUSH
76497: CALL_OW 306
76501: IFFALSE 76512
// ComForceInvisible ( i ) ;
76503: LD_VAR 0 2
76507: PPUSH
76508: CALL_OW 496
76512: GO 76489
76514: POP
76515: POP
// end ;
76516: LD_VAR 0 1
76520: RET
// export function hHackChangeYourSide ; begin
76521: LD_INT 0
76523: PPUSH
// if your_side = 8 then
76524: LD_OWVAR 2
76528: PUSH
76529: LD_INT 8
76531: EQUAL
76532: IFFALSE 76544
// your_side := 0 else
76534: LD_ADDR_OWVAR 2
76538: PUSH
76539: LD_INT 0
76541: ST_TO_ADDR
76542: GO 76558
// your_side := your_side + 1 ;
76544: LD_ADDR_OWVAR 2
76548: PUSH
76549: LD_OWVAR 2
76553: PUSH
76554: LD_INT 1
76556: PLUS
76557: ST_TO_ADDR
// end ;
76558: LD_VAR 0 1
76562: RET
// export function hHackChangeUnitSide ; var i , j ; begin
76563: LD_INT 0
76565: PPUSH
76566: PPUSH
76567: PPUSH
// for i in all_units do
76568: LD_ADDR_VAR 0 2
76572: PUSH
76573: LD_OWVAR 3
76577: PUSH
76578: FOR_IN
76579: IFFALSE 76657
// if IsSelected ( i ) then
76581: LD_VAR 0 2
76585: PPUSH
76586: CALL_OW 306
76590: IFFALSE 76655
// begin j := GetSide ( i ) ;
76592: LD_ADDR_VAR 0 3
76596: PUSH
76597: LD_VAR 0 2
76601: PPUSH
76602: CALL_OW 255
76606: ST_TO_ADDR
// if j = 8 then
76607: LD_VAR 0 3
76611: PUSH
76612: LD_INT 8
76614: EQUAL
76615: IFFALSE 76627
// j := 0 else
76617: LD_ADDR_VAR 0 3
76621: PUSH
76622: LD_INT 0
76624: ST_TO_ADDR
76625: GO 76641
// j := j + 1 ;
76627: LD_ADDR_VAR 0 3
76631: PUSH
76632: LD_VAR 0 3
76636: PUSH
76637: LD_INT 1
76639: PLUS
76640: ST_TO_ADDR
// SetSide ( i , j ) ;
76641: LD_VAR 0 2
76645: PPUSH
76646: LD_VAR 0 3
76650: PPUSH
76651: CALL_OW 235
// end ;
76655: GO 76578
76657: POP
76658: POP
// end ;
76659: LD_VAR 0 1
76663: RET
// export function hHackFog ; begin
76664: LD_INT 0
76666: PPUSH
// FogOff ( true ) ;
76667: LD_INT 1
76669: PPUSH
76670: CALL_OW 344
// end ;
76674: LD_VAR 0 1
76678: RET
// export function hHackTeleport ( unit , x , y ) ; begin
76679: LD_INT 0
76681: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
76682: LD_VAR 0 1
76686: PPUSH
76687: LD_VAR 0 2
76691: PPUSH
76692: LD_VAR 0 3
76696: PPUSH
76697: LD_INT 1
76699: PPUSH
76700: LD_INT 1
76702: PPUSH
76703: CALL_OW 483
// CenterOnXY ( x , y ) ;
76707: LD_VAR 0 2
76711: PPUSH
76712: LD_VAR 0 3
76716: PPUSH
76717: CALL_OW 84
// end ; end_of_file
76721: LD_VAR 0 4
76725: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76726: LD_VAR 0 1
76730: PUSH
76731: LD_INT 200
76733: DOUBLE
76734: GREATEREQUAL
76735: IFFALSE 76743
76737: LD_INT 299
76739: DOUBLE
76740: LESSEQUAL
76741: IFTRUE 76745
76743: GO 76777
76745: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76746: LD_VAR 0 1
76750: PPUSH
76751: LD_VAR 0 2
76755: PPUSH
76756: LD_VAR 0 3
76760: PPUSH
76761: LD_VAR 0 4
76765: PPUSH
76766: LD_VAR 0 5
76770: PPUSH
76771: CALL 77021 0 5
76775: GO 76854
76777: LD_INT 300
76779: DOUBLE
76780: GREATEREQUAL
76781: IFFALSE 76789
76783: LD_INT 399
76785: DOUBLE
76786: LESSEQUAL
76787: IFTRUE 76791
76789: GO 76853
76791: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76792: LD_VAR 0 1
76796: PPUSH
76797: LD_VAR 0 2
76801: PPUSH
76802: LD_VAR 0 3
76806: PPUSH
76807: LD_VAR 0 4
76811: PPUSH
76812: LD_VAR 0 5
76816: PPUSH
76817: LD_VAR 0 6
76821: PPUSH
76822: LD_VAR 0 7
76826: PPUSH
76827: LD_VAR 0 8
76831: PPUSH
76832: LD_VAR 0 9
76836: PPUSH
76837: LD_VAR 0 10
76841: PPUSH
76842: LD_VAR 0 11
76846: PPUSH
76847: CALL 74746 0 11
76851: GO 76854
76853: POP
// end ;
76854: PPOPN 11
76856: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76857: LD_VAR 0 1
76861: PPUSH
76862: LD_VAR 0 2
76866: PPUSH
76867: LD_VAR 0 3
76871: PPUSH
76872: LD_VAR 0 4
76876: PPUSH
76877: LD_VAR 0 5
76881: PPUSH
76882: CALL 77003 0 5
// end ; end_of_file
76886: PPOPN 5
76888: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
76889: LD_INT 0
76891: PPUSH
76892: PPUSH
76893: PPUSH
76894: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
76895: LD_VAR 0 1
76899: PPUSH
76900: CALL_OW 264
76904: PUSH
76905: LD_EXP 62
76909: EQUAL
76910: IFFALSE 76982
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
76912: LD_INT 68
76914: PPUSH
76915: LD_VAR 0 1
76919: PPUSH
76920: CALL_OW 255
76924: PPUSH
76925: CALL_OW 321
76929: PUSH
76930: LD_INT 2
76932: EQUAL
76933: IFFALSE 76945
// eff := 70 else
76935: LD_ADDR_VAR 0 4
76939: PUSH
76940: LD_INT 70
76942: ST_TO_ADDR
76943: GO 76953
// eff := 30 ;
76945: LD_ADDR_VAR 0 4
76949: PUSH
76950: LD_INT 30
76952: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
76953: LD_VAR 0 1
76957: PPUSH
76958: CALL_OW 250
76962: PPUSH
76963: LD_VAR 0 1
76967: PPUSH
76968: CALL_OW 251
76972: PPUSH
76973: LD_VAR 0 4
76977: PPUSH
76978: CALL_OW 495
// end ; end ;
76982: LD_VAR 0 2
76986: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
76987: LD_INT 0
76989: PPUSH
// end ;
76990: LD_VAR 0 4
76994: RET
// export function SOS_Command ( cmd ) ; begin
76995: LD_INT 0
76997: PPUSH
// end ;
76998: LD_VAR 0 2
77002: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
77003: LD_INT 0
77005: PPUSH
// if cmd = 121 then
77006: LD_VAR 0 1
77010: PUSH
77011: LD_INT 121
77013: EQUAL
77014: IFFALSE 77016
// end ;
77016: LD_VAR 0 6
77020: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
77021: LD_INT 0
77023: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
77024: LD_VAR 0 1
77028: PUSH
77029: LD_INT 250
77031: EQUAL
77032: PUSH
77033: LD_VAR 0 2
77037: PPUSH
77038: CALL_OW 264
77042: PUSH
77043: LD_EXP 65
77047: EQUAL
77048: AND
77049: IFFALSE 77070
// MinerPlaceMine ( unit , x , y ) ;
77051: LD_VAR 0 2
77055: PPUSH
77056: LD_VAR 0 4
77060: PPUSH
77061: LD_VAR 0 5
77065: PPUSH
77066: CALL 79419 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
77070: LD_VAR 0 1
77074: PUSH
77075: LD_INT 251
77077: EQUAL
77078: PUSH
77079: LD_VAR 0 2
77083: PPUSH
77084: CALL_OW 264
77088: PUSH
77089: LD_EXP 65
77093: EQUAL
77094: AND
77095: IFFALSE 77116
// MinerDetonateMine ( unit , x , y ) ;
77097: LD_VAR 0 2
77101: PPUSH
77102: LD_VAR 0 4
77106: PPUSH
77107: LD_VAR 0 5
77111: PPUSH
77112: CALL 79696 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
77116: LD_VAR 0 1
77120: PUSH
77121: LD_INT 252
77123: EQUAL
77124: PUSH
77125: LD_VAR 0 2
77129: PPUSH
77130: CALL_OW 264
77134: PUSH
77135: LD_EXP 65
77139: EQUAL
77140: AND
77141: IFFALSE 77162
// MinerCreateMinefield ( unit , x , y ) ;
77143: LD_VAR 0 2
77147: PPUSH
77148: LD_VAR 0 4
77152: PPUSH
77153: LD_VAR 0 5
77157: PPUSH
77158: CALL 80113 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
77162: LD_VAR 0 1
77166: PUSH
77167: LD_INT 253
77169: EQUAL
77170: PUSH
77171: LD_VAR 0 2
77175: PPUSH
77176: CALL_OW 257
77180: PUSH
77181: LD_INT 5
77183: EQUAL
77184: AND
77185: IFFALSE 77206
// ComBinocular ( unit , x , y ) ;
77187: LD_VAR 0 2
77191: PPUSH
77192: LD_VAR 0 4
77196: PPUSH
77197: LD_VAR 0 5
77201: PPUSH
77202: CALL 80484 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
77206: LD_VAR 0 1
77210: PUSH
77211: LD_INT 254
77213: EQUAL
77214: PUSH
77215: LD_VAR 0 2
77219: PPUSH
77220: CALL_OW 264
77224: PUSH
77225: LD_EXP 60
77229: EQUAL
77230: AND
77231: PUSH
77232: LD_VAR 0 3
77236: PPUSH
77237: CALL_OW 263
77241: PUSH
77242: LD_INT 3
77244: EQUAL
77245: AND
77246: IFFALSE 77262
// HackDestroyVehicle ( unit , selectedUnit ) ;
77248: LD_VAR 0 2
77252: PPUSH
77253: LD_VAR 0 3
77257: PPUSH
77258: CALL 78779 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
77262: LD_VAR 0 1
77266: PUSH
77267: LD_INT 255
77269: EQUAL
77270: PUSH
77271: LD_VAR 0 2
77275: PPUSH
77276: CALL_OW 264
77280: PUSH
77281: LD_INT 14
77283: PUSH
77284: LD_INT 53
77286: PUSH
77287: EMPTY
77288: LIST
77289: LIST
77290: IN
77291: AND
77292: PUSH
77293: LD_VAR 0 4
77297: PPUSH
77298: LD_VAR 0 5
77302: PPUSH
77303: CALL_OW 488
77307: AND
77308: IFFALSE 77332
// CutTreeXYR ( unit , x , y , 12 ) ;
77310: LD_VAR 0 2
77314: PPUSH
77315: LD_VAR 0 4
77319: PPUSH
77320: LD_VAR 0 5
77324: PPUSH
77325: LD_INT 12
77327: PPUSH
77328: CALL 77345 0 4
// end ;
77332: LD_VAR 0 6
77336: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
77337: LD_INT 0
77339: PPUSH
// end ;
77340: LD_VAR 0 4
77344: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
77345: LD_INT 0
77347: PPUSH
77348: PPUSH
77349: PPUSH
77350: PPUSH
77351: PPUSH
77352: PPUSH
77353: PPUSH
77354: PPUSH
77355: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
77356: LD_VAR 0 1
77360: NOT
77361: PUSH
77362: LD_VAR 0 2
77366: PPUSH
77367: LD_VAR 0 3
77371: PPUSH
77372: CALL_OW 488
77376: NOT
77377: OR
77378: PUSH
77379: LD_VAR 0 4
77383: NOT
77384: OR
77385: IFFALSE 77389
// exit ;
77387: GO 77729
// list := [ ] ;
77389: LD_ADDR_VAR 0 13
77393: PUSH
77394: EMPTY
77395: ST_TO_ADDR
// if x - r < 0 then
77396: LD_VAR 0 2
77400: PUSH
77401: LD_VAR 0 4
77405: MINUS
77406: PUSH
77407: LD_INT 0
77409: LESS
77410: IFFALSE 77422
// min_x := 0 else
77412: LD_ADDR_VAR 0 7
77416: PUSH
77417: LD_INT 0
77419: ST_TO_ADDR
77420: GO 77438
// min_x := x - r ;
77422: LD_ADDR_VAR 0 7
77426: PUSH
77427: LD_VAR 0 2
77431: PUSH
77432: LD_VAR 0 4
77436: MINUS
77437: ST_TO_ADDR
// if y - r < 0 then
77438: LD_VAR 0 3
77442: PUSH
77443: LD_VAR 0 4
77447: MINUS
77448: PUSH
77449: LD_INT 0
77451: LESS
77452: IFFALSE 77464
// min_y := 0 else
77454: LD_ADDR_VAR 0 8
77458: PUSH
77459: LD_INT 0
77461: ST_TO_ADDR
77462: GO 77480
// min_y := y - r ;
77464: LD_ADDR_VAR 0 8
77468: PUSH
77469: LD_VAR 0 3
77473: PUSH
77474: LD_VAR 0 4
77478: MINUS
77479: ST_TO_ADDR
// max_x := x + r ;
77480: LD_ADDR_VAR 0 9
77484: PUSH
77485: LD_VAR 0 2
77489: PUSH
77490: LD_VAR 0 4
77494: PLUS
77495: ST_TO_ADDR
// max_y := y + r ;
77496: LD_ADDR_VAR 0 10
77500: PUSH
77501: LD_VAR 0 3
77505: PUSH
77506: LD_VAR 0 4
77510: PLUS
77511: ST_TO_ADDR
// for _x = min_x to max_x do
77512: LD_ADDR_VAR 0 11
77516: PUSH
77517: DOUBLE
77518: LD_VAR 0 7
77522: DEC
77523: ST_TO_ADDR
77524: LD_VAR 0 9
77528: PUSH
77529: FOR_TO
77530: IFFALSE 77647
// for _y = min_y to max_y do
77532: LD_ADDR_VAR 0 12
77536: PUSH
77537: DOUBLE
77538: LD_VAR 0 8
77542: DEC
77543: ST_TO_ADDR
77544: LD_VAR 0 10
77548: PUSH
77549: FOR_TO
77550: IFFALSE 77643
// begin if not ValidHex ( _x , _y ) then
77552: LD_VAR 0 11
77556: PPUSH
77557: LD_VAR 0 12
77561: PPUSH
77562: CALL_OW 488
77566: NOT
77567: IFFALSE 77571
// continue ;
77569: GO 77549
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
77571: LD_VAR 0 11
77575: PPUSH
77576: LD_VAR 0 12
77580: PPUSH
77581: CALL_OW 351
77585: PUSH
77586: LD_VAR 0 11
77590: PPUSH
77591: LD_VAR 0 12
77595: PPUSH
77596: CALL_OW 554
77600: AND
77601: IFFALSE 77641
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
77603: LD_ADDR_VAR 0 13
77607: PUSH
77608: LD_VAR 0 13
77612: PPUSH
77613: LD_VAR 0 13
77617: PUSH
77618: LD_INT 1
77620: PLUS
77621: PPUSH
77622: LD_VAR 0 11
77626: PUSH
77627: LD_VAR 0 12
77631: PUSH
77632: EMPTY
77633: LIST
77634: LIST
77635: PPUSH
77636: CALL_OW 2
77640: ST_TO_ADDR
// end ;
77641: GO 77549
77643: POP
77644: POP
77645: GO 77529
77647: POP
77648: POP
// if not list then
77649: LD_VAR 0 13
77653: NOT
77654: IFFALSE 77658
// exit ;
77656: GO 77729
// for i in list do
77658: LD_ADDR_VAR 0 6
77662: PUSH
77663: LD_VAR 0 13
77667: PUSH
77668: FOR_IN
77669: IFFALSE 77727
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
77671: LD_VAR 0 1
77675: PPUSH
77676: LD_STRING M
77678: PUSH
77679: LD_VAR 0 6
77683: PUSH
77684: LD_INT 1
77686: ARRAY
77687: PUSH
77688: LD_VAR 0 6
77692: PUSH
77693: LD_INT 2
77695: ARRAY
77696: PUSH
77697: LD_INT 0
77699: PUSH
77700: LD_INT 0
77702: PUSH
77703: LD_INT 0
77705: PUSH
77706: LD_INT 0
77708: PUSH
77709: EMPTY
77710: LIST
77711: LIST
77712: LIST
77713: LIST
77714: LIST
77715: LIST
77716: LIST
77717: PUSH
77718: EMPTY
77719: LIST
77720: PPUSH
77721: CALL_OW 447
77725: GO 77668
77727: POP
77728: POP
// end ;
77729: LD_VAR 0 5
77733: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
77734: LD_EXP 134
77738: NOT
77739: IFFALSE 77789
77741: GO 77743
77743: DISABLE
// begin initHack := true ;
77744: LD_ADDR_EXP 134
77748: PUSH
77749: LD_INT 1
77751: ST_TO_ADDR
// hackTanks := [ ] ;
77752: LD_ADDR_EXP 135
77756: PUSH
77757: EMPTY
77758: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
77759: LD_ADDR_EXP 136
77763: PUSH
77764: EMPTY
77765: ST_TO_ADDR
// hackLimit := 3 ;
77766: LD_ADDR_EXP 137
77770: PUSH
77771: LD_INT 3
77773: ST_TO_ADDR
// hackDist := 12 ;
77774: LD_ADDR_EXP 138
77778: PUSH
77779: LD_INT 12
77781: ST_TO_ADDR
// hackCounter := [ ] ;
77782: LD_ADDR_EXP 139
77786: PUSH
77787: EMPTY
77788: ST_TO_ADDR
// end ;
77789: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
77790: LD_EXP 134
77794: PUSH
77795: LD_INT 34
77797: PUSH
77798: LD_EXP 60
77802: PUSH
77803: EMPTY
77804: LIST
77805: LIST
77806: PPUSH
77807: CALL_OW 69
77811: AND
77812: IFFALSE 78067
77814: GO 77816
77816: DISABLE
77817: LD_INT 0
77819: PPUSH
77820: PPUSH
// begin enable ;
77821: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
77822: LD_ADDR_VAR 0 1
77826: PUSH
77827: LD_INT 34
77829: PUSH
77830: LD_EXP 60
77834: PUSH
77835: EMPTY
77836: LIST
77837: LIST
77838: PPUSH
77839: CALL_OW 69
77843: PUSH
77844: FOR_IN
77845: IFFALSE 78065
// begin if not i in hackTanks then
77847: LD_VAR 0 1
77851: PUSH
77852: LD_EXP 135
77856: IN
77857: NOT
77858: IFFALSE 77941
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
77860: LD_ADDR_EXP 135
77864: PUSH
77865: LD_EXP 135
77869: PPUSH
77870: LD_EXP 135
77874: PUSH
77875: LD_INT 1
77877: PLUS
77878: PPUSH
77879: LD_VAR 0 1
77883: PPUSH
77884: CALL_OW 1
77888: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
77889: LD_ADDR_EXP 136
77893: PUSH
77894: LD_EXP 136
77898: PPUSH
77899: LD_EXP 136
77903: PUSH
77904: LD_INT 1
77906: PLUS
77907: PPUSH
77908: EMPTY
77909: PPUSH
77910: CALL_OW 1
77914: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
77915: LD_ADDR_EXP 139
77919: PUSH
77920: LD_EXP 139
77924: PPUSH
77925: LD_EXP 139
77929: PUSH
77930: LD_INT 1
77932: PLUS
77933: PPUSH
77934: EMPTY
77935: PPUSH
77936: CALL_OW 1
77940: ST_TO_ADDR
// end ; if not IsOk ( i ) then
77941: LD_VAR 0 1
77945: PPUSH
77946: CALL_OW 302
77950: NOT
77951: IFFALSE 77964
// begin HackUnlinkAll ( i ) ;
77953: LD_VAR 0 1
77957: PPUSH
77958: CALL 78070 0 1
// continue ;
77962: GO 77844
// end ; HackCheckCapturedStatus ( i ) ;
77964: LD_VAR 0 1
77968: PPUSH
77969: CALL 78513 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
77973: LD_ADDR_VAR 0 2
77977: PUSH
77978: LD_INT 81
77980: PUSH
77981: LD_VAR 0 1
77985: PPUSH
77986: CALL_OW 255
77990: PUSH
77991: EMPTY
77992: LIST
77993: LIST
77994: PUSH
77995: LD_INT 33
77997: PUSH
77998: LD_INT 3
78000: PUSH
78001: EMPTY
78002: LIST
78003: LIST
78004: PUSH
78005: LD_INT 91
78007: PUSH
78008: LD_VAR 0 1
78012: PUSH
78013: LD_EXP 138
78017: PUSH
78018: EMPTY
78019: LIST
78020: LIST
78021: LIST
78022: PUSH
78023: LD_INT 50
78025: PUSH
78026: EMPTY
78027: LIST
78028: PUSH
78029: EMPTY
78030: LIST
78031: LIST
78032: LIST
78033: LIST
78034: PPUSH
78035: CALL_OW 69
78039: ST_TO_ADDR
// if not tmp then
78040: LD_VAR 0 2
78044: NOT
78045: IFFALSE 78049
// continue ;
78047: GO 77844
// HackLink ( i , tmp ) ;
78049: LD_VAR 0 1
78053: PPUSH
78054: LD_VAR 0 2
78058: PPUSH
78059: CALL 78206 0 2
// end ;
78063: GO 77844
78065: POP
78066: POP
// end ;
78067: PPOPN 2
78069: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
78070: LD_INT 0
78072: PPUSH
78073: PPUSH
78074: PPUSH
// if not hack in hackTanks then
78075: LD_VAR 0 1
78079: PUSH
78080: LD_EXP 135
78084: IN
78085: NOT
78086: IFFALSE 78090
// exit ;
78088: GO 78201
// index := GetElementIndex ( hackTanks , hack ) ;
78090: LD_ADDR_VAR 0 4
78094: PUSH
78095: LD_EXP 135
78099: PPUSH
78100: LD_VAR 0 1
78104: PPUSH
78105: CALL 29402 0 2
78109: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
78110: LD_EXP 136
78114: PUSH
78115: LD_VAR 0 4
78119: ARRAY
78120: IFFALSE 78201
// begin for i in hackTanksCaptured [ index ] do
78122: LD_ADDR_VAR 0 3
78126: PUSH
78127: LD_EXP 136
78131: PUSH
78132: LD_VAR 0 4
78136: ARRAY
78137: PUSH
78138: FOR_IN
78139: IFFALSE 78165
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
78141: LD_VAR 0 3
78145: PUSH
78146: LD_INT 1
78148: ARRAY
78149: PPUSH
78150: LD_VAR 0 3
78154: PUSH
78155: LD_INT 2
78157: ARRAY
78158: PPUSH
78159: CALL_OW 235
78163: GO 78138
78165: POP
78166: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
78167: LD_ADDR_EXP 136
78171: PUSH
78172: LD_EXP 136
78176: PPUSH
78177: LD_VAR 0 4
78181: PPUSH
78182: EMPTY
78183: PPUSH
78184: CALL_OW 1
78188: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
78189: LD_VAR 0 1
78193: PPUSH
78194: LD_INT 0
78196: PPUSH
78197: CALL_OW 505
// end ; end ;
78201: LD_VAR 0 2
78205: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
78206: LD_INT 0
78208: PPUSH
78209: PPUSH
78210: PPUSH
// if not hack in hackTanks or not vehicles then
78211: LD_VAR 0 1
78215: PUSH
78216: LD_EXP 135
78220: IN
78221: NOT
78222: PUSH
78223: LD_VAR 0 2
78227: NOT
78228: OR
78229: IFFALSE 78233
// exit ;
78231: GO 78508
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
78233: LD_ADDR_VAR 0 2
78237: PUSH
78238: LD_VAR 0 1
78242: PPUSH
78243: LD_VAR 0 2
78247: PPUSH
78248: LD_INT 1
78250: PPUSH
78251: LD_INT 1
78253: PPUSH
78254: CALL 30052 0 4
78258: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
78259: LD_ADDR_VAR 0 5
78263: PUSH
78264: LD_EXP 135
78268: PPUSH
78269: LD_VAR 0 1
78273: PPUSH
78274: CALL 29402 0 2
78278: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
78279: LD_EXP 136
78283: PUSH
78284: LD_VAR 0 5
78288: ARRAY
78289: PUSH
78290: LD_EXP 137
78294: LESS
78295: IFFALSE 78484
// begin for i := 1 to vehicles do
78297: LD_ADDR_VAR 0 4
78301: PUSH
78302: DOUBLE
78303: LD_INT 1
78305: DEC
78306: ST_TO_ADDR
78307: LD_VAR 0 2
78311: PUSH
78312: FOR_TO
78313: IFFALSE 78482
// begin if hackTanksCaptured [ index ] = hackLimit then
78315: LD_EXP 136
78319: PUSH
78320: LD_VAR 0 5
78324: ARRAY
78325: PUSH
78326: LD_EXP 137
78330: EQUAL
78331: IFFALSE 78335
// break ;
78333: GO 78482
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
78335: LD_ADDR_EXP 139
78339: PUSH
78340: LD_EXP 139
78344: PPUSH
78345: LD_VAR 0 5
78349: PPUSH
78350: LD_EXP 139
78354: PUSH
78355: LD_VAR 0 5
78359: ARRAY
78360: PUSH
78361: LD_INT 1
78363: PLUS
78364: PPUSH
78365: CALL_OW 1
78369: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
78370: LD_ADDR_EXP 136
78374: PUSH
78375: LD_EXP 136
78379: PPUSH
78380: LD_VAR 0 5
78384: PUSH
78385: LD_EXP 136
78389: PUSH
78390: LD_VAR 0 5
78394: ARRAY
78395: PUSH
78396: LD_INT 1
78398: PLUS
78399: PUSH
78400: EMPTY
78401: LIST
78402: LIST
78403: PPUSH
78404: LD_VAR 0 2
78408: PUSH
78409: LD_VAR 0 4
78413: ARRAY
78414: PUSH
78415: LD_VAR 0 2
78419: PUSH
78420: LD_VAR 0 4
78424: ARRAY
78425: PPUSH
78426: CALL_OW 255
78430: PUSH
78431: EMPTY
78432: LIST
78433: LIST
78434: PPUSH
78435: CALL 29617 0 3
78439: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
78440: LD_VAR 0 2
78444: PUSH
78445: LD_VAR 0 4
78449: ARRAY
78450: PPUSH
78451: LD_VAR 0 1
78455: PPUSH
78456: CALL_OW 255
78460: PPUSH
78461: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
78465: LD_VAR 0 2
78469: PUSH
78470: LD_VAR 0 4
78474: ARRAY
78475: PPUSH
78476: CALL_OW 141
// end ;
78480: GO 78312
78482: POP
78483: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
78484: LD_VAR 0 1
78488: PPUSH
78489: LD_EXP 136
78493: PUSH
78494: LD_VAR 0 5
78498: ARRAY
78499: PUSH
78500: LD_INT 0
78502: PLUS
78503: PPUSH
78504: CALL_OW 505
// end ;
78508: LD_VAR 0 3
78512: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
78513: LD_INT 0
78515: PPUSH
78516: PPUSH
78517: PPUSH
78518: PPUSH
// if not hack in hackTanks then
78519: LD_VAR 0 1
78523: PUSH
78524: LD_EXP 135
78528: IN
78529: NOT
78530: IFFALSE 78534
// exit ;
78532: GO 78774
// index := GetElementIndex ( hackTanks , hack ) ;
78534: LD_ADDR_VAR 0 4
78538: PUSH
78539: LD_EXP 135
78543: PPUSH
78544: LD_VAR 0 1
78548: PPUSH
78549: CALL 29402 0 2
78553: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
78554: LD_ADDR_VAR 0 3
78558: PUSH
78559: DOUBLE
78560: LD_EXP 136
78564: PUSH
78565: LD_VAR 0 4
78569: ARRAY
78570: INC
78571: ST_TO_ADDR
78572: LD_INT 1
78574: PUSH
78575: FOR_DOWNTO
78576: IFFALSE 78748
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
78578: LD_ADDR_VAR 0 5
78582: PUSH
78583: LD_EXP 136
78587: PUSH
78588: LD_VAR 0 4
78592: ARRAY
78593: PUSH
78594: LD_VAR 0 3
78598: ARRAY
78599: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
78600: LD_VAR 0 5
78604: PUSH
78605: LD_INT 1
78607: ARRAY
78608: PPUSH
78609: CALL_OW 302
78613: NOT
78614: PUSH
78615: LD_VAR 0 5
78619: PUSH
78620: LD_INT 1
78622: ARRAY
78623: PPUSH
78624: CALL_OW 255
78628: PUSH
78629: LD_VAR 0 1
78633: PPUSH
78634: CALL_OW 255
78638: NONEQUAL
78639: OR
78640: IFFALSE 78746
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
78642: LD_VAR 0 5
78646: PUSH
78647: LD_INT 1
78649: ARRAY
78650: PPUSH
78651: CALL_OW 305
78655: PUSH
78656: LD_VAR 0 5
78660: PUSH
78661: LD_INT 1
78663: ARRAY
78664: PPUSH
78665: CALL_OW 255
78669: PUSH
78670: LD_VAR 0 1
78674: PPUSH
78675: CALL_OW 255
78679: EQUAL
78680: AND
78681: IFFALSE 78705
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
78683: LD_VAR 0 5
78687: PUSH
78688: LD_INT 1
78690: ARRAY
78691: PPUSH
78692: LD_VAR 0 5
78696: PUSH
78697: LD_INT 2
78699: ARRAY
78700: PPUSH
78701: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
78705: LD_ADDR_EXP 136
78709: PUSH
78710: LD_EXP 136
78714: PPUSH
78715: LD_VAR 0 4
78719: PPUSH
78720: LD_EXP 136
78724: PUSH
78725: LD_VAR 0 4
78729: ARRAY
78730: PPUSH
78731: LD_VAR 0 3
78735: PPUSH
78736: CALL_OW 3
78740: PPUSH
78741: CALL_OW 1
78745: ST_TO_ADDR
// end ; end ;
78746: GO 78575
78748: POP
78749: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
78750: LD_VAR 0 1
78754: PPUSH
78755: LD_EXP 136
78759: PUSH
78760: LD_VAR 0 4
78764: ARRAY
78765: PUSH
78766: LD_INT 0
78768: PLUS
78769: PPUSH
78770: CALL_OW 505
// end ;
78774: LD_VAR 0 2
78778: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
78779: LD_INT 0
78781: PPUSH
78782: PPUSH
78783: PPUSH
78784: PPUSH
// if not hack in hackTanks then
78785: LD_VAR 0 1
78789: PUSH
78790: LD_EXP 135
78794: IN
78795: NOT
78796: IFFALSE 78800
// exit ;
78798: GO 78885
// index := GetElementIndex ( hackTanks , hack ) ;
78800: LD_ADDR_VAR 0 5
78804: PUSH
78805: LD_EXP 135
78809: PPUSH
78810: LD_VAR 0 1
78814: PPUSH
78815: CALL 29402 0 2
78819: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
78820: LD_ADDR_VAR 0 4
78824: PUSH
78825: DOUBLE
78826: LD_INT 1
78828: DEC
78829: ST_TO_ADDR
78830: LD_EXP 136
78834: PUSH
78835: LD_VAR 0 5
78839: ARRAY
78840: PUSH
78841: FOR_TO
78842: IFFALSE 78883
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
78844: LD_EXP 136
78848: PUSH
78849: LD_VAR 0 5
78853: ARRAY
78854: PUSH
78855: LD_VAR 0 4
78859: ARRAY
78860: PUSH
78861: LD_INT 1
78863: ARRAY
78864: PUSH
78865: LD_VAR 0 2
78869: EQUAL
78870: IFFALSE 78881
// KillUnit ( vehicle ) ;
78872: LD_VAR 0 2
78876: PPUSH
78877: CALL_OW 66
78881: GO 78841
78883: POP
78884: POP
// end ;
78885: LD_VAR 0 3
78889: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
78890: LD_EXP 140
78894: NOT
78895: IFFALSE 78930
78897: GO 78899
78899: DISABLE
// begin initMiner := true ;
78900: LD_ADDR_EXP 140
78904: PUSH
78905: LD_INT 1
78907: ST_TO_ADDR
// minersList := [ ] ;
78908: LD_ADDR_EXP 141
78912: PUSH
78913: EMPTY
78914: ST_TO_ADDR
// minerMinesList := [ ] ;
78915: LD_ADDR_EXP 142
78919: PUSH
78920: EMPTY
78921: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
78922: LD_ADDR_EXP 143
78926: PUSH
78927: LD_INT 5
78929: ST_TO_ADDR
// end ;
78930: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
78931: LD_EXP 140
78935: PUSH
78936: LD_INT 34
78938: PUSH
78939: LD_EXP 65
78943: PUSH
78944: EMPTY
78945: LIST
78946: LIST
78947: PPUSH
78948: CALL_OW 69
78952: AND
78953: IFFALSE 79416
78955: GO 78957
78957: DISABLE
78958: LD_INT 0
78960: PPUSH
78961: PPUSH
78962: PPUSH
78963: PPUSH
// begin enable ;
78964: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
78965: LD_ADDR_VAR 0 1
78969: PUSH
78970: LD_INT 34
78972: PUSH
78973: LD_EXP 65
78977: PUSH
78978: EMPTY
78979: LIST
78980: LIST
78981: PPUSH
78982: CALL_OW 69
78986: PUSH
78987: FOR_IN
78988: IFFALSE 79060
// begin if not i in minersList then
78990: LD_VAR 0 1
78994: PUSH
78995: LD_EXP 141
78999: IN
79000: NOT
79001: IFFALSE 79058
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
79003: LD_ADDR_EXP 141
79007: PUSH
79008: LD_EXP 141
79012: PPUSH
79013: LD_EXP 141
79017: PUSH
79018: LD_INT 1
79020: PLUS
79021: PPUSH
79022: LD_VAR 0 1
79026: PPUSH
79027: CALL_OW 1
79031: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
79032: LD_ADDR_EXP 142
79036: PUSH
79037: LD_EXP 142
79041: PPUSH
79042: LD_EXP 142
79046: PUSH
79047: LD_INT 1
79049: PLUS
79050: PPUSH
79051: EMPTY
79052: PPUSH
79053: CALL_OW 1
79057: ST_TO_ADDR
// end end ;
79058: GO 78987
79060: POP
79061: POP
// for i := minerMinesList downto 1 do
79062: LD_ADDR_VAR 0 1
79066: PUSH
79067: DOUBLE
79068: LD_EXP 142
79072: INC
79073: ST_TO_ADDR
79074: LD_INT 1
79076: PUSH
79077: FOR_DOWNTO
79078: IFFALSE 79414
// begin if IsLive ( minersList [ i ] ) then
79080: LD_EXP 141
79084: PUSH
79085: LD_VAR 0 1
79089: ARRAY
79090: PPUSH
79091: CALL_OW 300
79095: IFFALSE 79123
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
79097: LD_EXP 141
79101: PUSH
79102: LD_VAR 0 1
79106: ARRAY
79107: PPUSH
79108: LD_EXP 142
79112: PUSH
79113: LD_VAR 0 1
79117: ARRAY
79118: PPUSH
79119: CALL_OW 505
// if not minerMinesList [ i ] then
79123: LD_EXP 142
79127: PUSH
79128: LD_VAR 0 1
79132: ARRAY
79133: NOT
79134: IFFALSE 79138
// continue ;
79136: GO 79077
// for j := minerMinesList [ i ] downto 1 do
79138: LD_ADDR_VAR 0 2
79142: PUSH
79143: DOUBLE
79144: LD_EXP 142
79148: PUSH
79149: LD_VAR 0 1
79153: ARRAY
79154: INC
79155: ST_TO_ADDR
79156: LD_INT 1
79158: PUSH
79159: FOR_DOWNTO
79160: IFFALSE 79410
// begin side := GetSide ( minersList [ i ] ) ;
79162: LD_ADDR_VAR 0 3
79166: PUSH
79167: LD_EXP 141
79171: PUSH
79172: LD_VAR 0 1
79176: ARRAY
79177: PPUSH
79178: CALL_OW 255
79182: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
79183: LD_ADDR_VAR 0 4
79187: PUSH
79188: LD_EXP 142
79192: PUSH
79193: LD_VAR 0 1
79197: ARRAY
79198: PUSH
79199: LD_VAR 0 2
79203: ARRAY
79204: PUSH
79205: LD_INT 1
79207: ARRAY
79208: PPUSH
79209: LD_EXP 142
79213: PUSH
79214: LD_VAR 0 1
79218: ARRAY
79219: PUSH
79220: LD_VAR 0 2
79224: ARRAY
79225: PUSH
79226: LD_INT 2
79228: ARRAY
79229: PPUSH
79230: CALL_OW 428
79234: ST_TO_ADDR
// if not tmp then
79235: LD_VAR 0 4
79239: NOT
79240: IFFALSE 79244
// continue ;
79242: GO 79159
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
79244: LD_VAR 0 4
79248: PUSH
79249: LD_INT 81
79251: PUSH
79252: LD_VAR 0 3
79256: PUSH
79257: EMPTY
79258: LIST
79259: LIST
79260: PPUSH
79261: CALL_OW 69
79265: IN
79266: PUSH
79267: LD_EXP 142
79271: PUSH
79272: LD_VAR 0 1
79276: ARRAY
79277: PUSH
79278: LD_VAR 0 2
79282: ARRAY
79283: PUSH
79284: LD_INT 1
79286: ARRAY
79287: PPUSH
79288: LD_EXP 142
79292: PUSH
79293: LD_VAR 0 1
79297: ARRAY
79298: PUSH
79299: LD_VAR 0 2
79303: ARRAY
79304: PUSH
79305: LD_INT 2
79307: ARRAY
79308: PPUSH
79309: CALL_OW 458
79313: AND
79314: IFFALSE 79408
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
79316: LD_EXP 142
79320: PUSH
79321: LD_VAR 0 1
79325: ARRAY
79326: PUSH
79327: LD_VAR 0 2
79331: ARRAY
79332: PUSH
79333: LD_INT 1
79335: ARRAY
79336: PPUSH
79337: LD_EXP 142
79341: PUSH
79342: LD_VAR 0 1
79346: ARRAY
79347: PUSH
79348: LD_VAR 0 2
79352: ARRAY
79353: PUSH
79354: LD_INT 2
79356: ARRAY
79357: PPUSH
79358: LD_VAR 0 3
79362: PPUSH
79363: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
79367: LD_ADDR_EXP 142
79371: PUSH
79372: LD_EXP 142
79376: PPUSH
79377: LD_VAR 0 1
79381: PPUSH
79382: LD_EXP 142
79386: PUSH
79387: LD_VAR 0 1
79391: ARRAY
79392: PPUSH
79393: LD_VAR 0 2
79397: PPUSH
79398: CALL_OW 3
79402: PPUSH
79403: CALL_OW 1
79407: ST_TO_ADDR
// end ; end ;
79408: GO 79159
79410: POP
79411: POP
// end ;
79412: GO 79077
79414: POP
79415: POP
// end ;
79416: PPOPN 4
79418: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
79419: LD_INT 0
79421: PPUSH
79422: PPUSH
// result := false ;
79423: LD_ADDR_VAR 0 4
79427: PUSH
79428: LD_INT 0
79430: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
79431: LD_VAR 0 1
79435: PPUSH
79436: CALL_OW 264
79440: PUSH
79441: LD_EXP 65
79445: EQUAL
79446: NOT
79447: IFFALSE 79451
// exit ;
79449: GO 79691
// index := GetElementIndex ( minersList , unit ) ;
79451: LD_ADDR_VAR 0 5
79455: PUSH
79456: LD_EXP 141
79460: PPUSH
79461: LD_VAR 0 1
79465: PPUSH
79466: CALL 29402 0 2
79470: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
79471: LD_EXP 142
79475: PUSH
79476: LD_VAR 0 5
79480: ARRAY
79481: PUSH
79482: LD_EXP 143
79486: GREATEREQUAL
79487: IFFALSE 79491
// exit ;
79489: GO 79691
// ComMoveXY ( unit , x , y ) ;
79491: LD_VAR 0 1
79495: PPUSH
79496: LD_VAR 0 2
79500: PPUSH
79501: LD_VAR 0 3
79505: PPUSH
79506: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
79510: LD_INT 35
79512: PPUSH
79513: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
79517: LD_VAR 0 1
79521: PPUSH
79522: LD_VAR 0 2
79526: PPUSH
79527: LD_VAR 0 3
79531: PPUSH
79532: CALL 60175 0 3
79536: NOT
79537: PUSH
79538: LD_VAR 0 1
79542: PPUSH
79543: CALL_OW 314
79547: AND
79548: IFFALSE 79552
// exit ;
79550: GO 79691
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
79552: LD_VAR 0 2
79556: PPUSH
79557: LD_VAR 0 3
79561: PPUSH
79562: CALL_OW 428
79566: PUSH
79567: LD_VAR 0 1
79571: EQUAL
79572: PUSH
79573: LD_VAR 0 1
79577: PPUSH
79578: CALL_OW 314
79582: NOT
79583: AND
79584: IFFALSE 79510
// PlaySoundXY ( x , y , PlantMine ) ;
79586: LD_VAR 0 2
79590: PPUSH
79591: LD_VAR 0 3
79595: PPUSH
79596: LD_STRING PlantMine
79598: PPUSH
79599: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
79603: LD_VAR 0 2
79607: PPUSH
79608: LD_VAR 0 3
79612: PPUSH
79613: LD_VAR 0 1
79617: PPUSH
79618: CALL_OW 255
79622: PPUSH
79623: LD_INT 0
79625: PPUSH
79626: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
79630: LD_ADDR_EXP 142
79634: PUSH
79635: LD_EXP 142
79639: PPUSH
79640: LD_VAR 0 5
79644: PUSH
79645: LD_EXP 142
79649: PUSH
79650: LD_VAR 0 5
79654: ARRAY
79655: PUSH
79656: LD_INT 1
79658: PLUS
79659: PUSH
79660: EMPTY
79661: LIST
79662: LIST
79663: PPUSH
79664: LD_VAR 0 2
79668: PUSH
79669: LD_VAR 0 3
79673: PUSH
79674: EMPTY
79675: LIST
79676: LIST
79677: PPUSH
79678: CALL 29617 0 3
79682: ST_TO_ADDR
// result := true ;
79683: LD_ADDR_VAR 0 4
79687: PUSH
79688: LD_INT 1
79690: ST_TO_ADDR
// end ;
79691: LD_VAR 0 4
79695: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
79696: LD_INT 0
79698: PPUSH
79699: PPUSH
79700: PPUSH
// if not unit in minersList then
79701: LD_VAR 0 1
79705: PUSH
79706: LD_EXP 141
79710: IN
79711: NOT
79712: IFFALSE 79716
// exit ;
79714: GO 80108
// index := GetElementIndex ( minersList , unit ) ;
79716: LD_ADDR_VAR 0 6
79720: PUSH
79721: LD_EXP 141
79725: PPUSH
79726: LD_VAR 0 1
79730: PPUSH
79731: CALL 29402 0 2
79735: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
79736: LD_ADDR_VAR 0 5
79740: PUSH
79741: DOUBLE
79742: LD_EXP 142
79746: PUSH
79747: LD_VAR 0 6
79751: ARRAY
79752: INC
79753: ST_TO_ADDR
79754: LD_INT 1
79756: PUSH
79757: FOR_DOWNTO
79758: IFFALSE 79919
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
79760: LD_EXP 142
79764: PUSH
79765: LD_VAR 0 6
79769: ARRAY
79770: PUSH
79771: LD_VAR 0 5
79775: ARRAY
79776: PUSH
79777: LD_INT 1
79779: ARRAY
79780: PUSH
79781: LD_VAR 0 2
79785: EQUAL
79786: PUSH
79787: LD_EXP 142
79791: PUSH
79792: LD_VAR 0 6
79796: ARRAY
79797: PUSH
79798: LD_VAR 0 5
79802: ARRAY
79803: PUSH
79804: LD_INT 2
79806: ARRAY
79807: PUSH
79808: LD_VAR 0 3
79812: EQUAL
79813: AND
79814: IFFALSE 79917
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
79816: LD_EXP 142
79820: PUSH
79821: LD_VAR 0 6
79825: ARRAY
79826: PUSH
79827: LD_VAR 0 5
79831: ARRAY
79832: PUSH
79833: LD_INT 1
79835: ARRAY
79836: PPUSH
79837: LD_EXP 142
79841: PUSH
79842: LD_VAR 0 6
79846: ARRAY
79847: PUSH
79848: LD_VAR 0 5
79852: ARRAY
79853: PUSH
79854: LD_INT 2
79856: ARRAY
79857: PPUSH
79858: LD_VAR 0 1
79862: PPUSH
79863: CALL_OW 255
79867: PPUSH
79868: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
79872: LD_ADDR_EXP 142
79876: PUSH
79877: LD_EXP 142
79881: PPUSH
79882: LD_VAR 0 6
79886: PPUSH
79887: LD_EXP 142
79891: PUSH
79892: LD_VAR 0 6
79896: ARRAY
79897: PPUSH
79898: LD_VAR 0 5
79902: PPUSH
79903: CALL_OW 3
79907: PPUSH
79908: CALL_OW 1
79912: ST_TO_ADDR
// exit ;
79913: POP
79914: POP
79915: GO 80108
// end ; end ;
79917: GO 79757
79919: POP
79920: POP
// for i := minerMinesList [ index ] downto 1 do
79921: LD_ADDR_VAR 0 5
79925: PUSH
79926: DOUBLE
79927: LD_EXP 142
79931: PUSH
79932: LD_VAR 0 6
79936: ARRAY
79937: INC
79938: ST_TO_ADDR
79939: LD_INT 1
79941: PUSH
79942: FOR_DOWNTO
79943: IFFALSE 80106
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
79945: LD_EXP 142
79949: PUSH
79950: LD_VAR 0 6
79954: ARRAY
79955: PUSH
79956: LD_VAR 0 5
79960: ARRAY
79961: PUSH
79962: LD_INT 1
79964: ARRAY
79965: PPUSH
79966: LD_EXP 142
79970: PUSH
79971: LD_VAR 0 6
79975: ARRAY
79976: PUSH
79977: LD_VAR 0 5
79981: ARRAY
79982: PUSH
79983: LD_INT 2
79985: ARRAY
79986: PPUSH
79987: LD_VAR 0 2
79991: PPUSH
79992: LD_VAR 0 3
79996: PPUSH
79997: CALL_OW 298
80001: PUSH
80002: LD_INT 6
80004: LESS
80005: IFFALSE 80104
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
80007: LD_EXP 142
80011: PUSH
80012: LD_VAR 0 6
80016: ARRAY
80017: PUSH
80018: LD_VAR 0 5
80022: ARRAY
80023: PUSH
80024: LD_INT 1
80026: ARRAY
80027: PPUSH
80028: LD_EXP 142
80032: PUSH
80033: LD_VAR 0 6
80037: ARRAY
80038: PUSH
80039: LD_VAR 0 5
80043: ARRAY
80044: PUSH
80045: LD_INT 2
80047: ARRAY
80048: PPUSH
80049: LD_VAR 0 1
80053: PPUSH
80054: CALL_OW 255
80058: PPUSH
80059: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
80063: LD_ADDR_EXP 142
80067: PUSH
80068: LD_EXP 142
80072: PPUSH
80073: LD_VAR 0 6
80077: PPUSH
80078: LD_EXP 142
80082: PUSH
80083: LD_VAR 0 6
80087: ARRAY
80088: PPUSH
80089: LD_VAR 0 5
80093: PPUSH
80094: CALL_OW 3
80098: PPUSH
80099: CALL_OW 1
80103: ST_TO_ADDR
// end ; end ;
80104: GO 79942
80106: POP
80107: POP
// end ;
80108: LD_VAR 0 4
80112: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
80113: LD_INT 0
80115: PPUSH
80116: PPUSH
80117: PPUSH
80118: PPUSH
80119: PPUSH
80120: PPUSH
80121: PPUSH
80122: PPUSH
80123: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
80124: LD_VAR 0 1
80128: PPUSH
80129: CALL_OW 264
80133: PUSH
80134: LD_EXP 65
80138: EQUAL
80139: NOT
80140: PUSH
80141: LD_VAR 0 1
80145: PUSH
80146: LD_EXP 141
80150: IN
80151: NOT
80152: OR
80153: IFFALSE 80157
// exit ;
80155: GO 80479
// index := GetElementIndex ( minersList , unit ) ;
80157: LD_ADDR_VAR 0 6
80161: PUSH
80162: LD_EXP 141
80166: PPUSH
80167: LD_VAR 0 1
80171: PPUSH
80172: CALL 29402 0 2
80176: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
80177: LD_ADDR_VAR 0 8
80181: PUSH
80182: LD_EXP 143
80186: PUSH
80187: LD_EXP 142
80191: PUSH
80192: LD_VAR 0 6
80196: ARRAY
80197: MINUS
80198: ST_TO_ADDR
// if not minesFreeAmount then
80199: LD_VAR 0 8
80203: NOT
80204: IFFALSE 80208
// exit ;
80206: GO 80479
// tmp := [ ] ;
80208: LD_ADDR_VAR 0 7
80212: PUSH
80213: EMPTY
80214: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
80215: LD_ADDR_VAR 0 5
80219: PUSH
80220: DOUBLE
80221: LD_INT 1
80223: DEC
80224: ST_TO_ADDR
80225: LD_VAR 0 8
80229: PUSH
80230: FOR_TO
80231: IFFALSE 80426
// begin _d := rand ( 0 , 5 ) ;
80233: LD_ADDR_VAR 0 11
80237: PUSH
80238: LD_INT 0
80240: PPUSH
80241: LD_INT 5
80243: PPUSH
80244: CALL_OW 12
80248: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
80249: LD_ADDR_VAR 0 12
80253: PUSH
80254: LD_INT 2
80256: PPUSH
80257: LD_INT 6
80259: PPUSH
80260: CALL_OW 12
80264: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
80265: LD_ADDR_VAR 0 9
80269: PUSH
80270: LD_VAR 0 2
80274: PPUSH
80275: LD_VAR 0 11
80279: PPUSH
80280: LD_VAR 0 12
80284: PPUSH
80285: CALL_OW 272
80289: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
80290: LD_ADDR_VAR 0 10
80294: PUSH
80295: LD_VAR 0 3
80299: PPUSH
80300: LD_VAR 0 11
80304: PPUSH
80305: LD_VAR 0 12
80309: PPUSH
80310: CALL_OW 273
80314: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
80315: LD_VAR 0 9
80319: PPUSH
80320: LD_VAR 0 10
80324: PPUSH
80325: CALL_OW 488
80329: PUSH
80330: LD_VAR 0 9
80334: PUSH
80335: LD_VAR 0 10
80339: PUSH
80340: EMPTY
80341: LIST
80342: LIST
80343: PUSH
80344: LD_VAR 0 7
80348: IN
80349: NOT
80350: AND
80351: PUSH
80352: LD_VAR 0 9
80356: PPUSH
80357: LD_VAR 0 10
80361: PPUSH
80362: CALL_OW 458
80366: NOT
80367: AND
80368: IFFALSE 80410
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
80370: LD_ADDR_VAR 0 7
80374: PUSH
80375: LD_VAR 0 7
80379: PPUSH
80380: LD_VAR 0 7
80384: PUSH
80385: LD_INT 1
80387: PLUS
80388: PPUSH
80389: LD_VAR 0 9
80393: PUSH
80394: LD_VAR 0 10
80398: PUSH
80399: EMPTY
80400: LIST
80401: LIST
80402: PPUSH
80403: CALL_OW 1
80407: ST_TO_ADDR
80408: GO 80424
// i := i - 1 ;
80410: LD_ADDR_VAR 0 5
80414: PUSH
80415: LD_VAR 0 5
80419: PUSH
80420: LD_INT 1
80422: MINUS
80423: ST_TO_ADDR
// end ;
80424: GO 80230
80426: POP
80427: POP
// for i in tmp do
80428: LD_ADDR_VAR 0 5
80432: PUSH
80433: LD_VAR 0 7
80437: PUSH
80438: FOR_IN
80439: IFFALSE 80477
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
80441: LD_VAR 0 1
80445: PPUSH
80446: LD_VAR 0 5
80450: PUSH
80451: LD_INT 1
80453: ARRAY
80454: PPUSH
80455: LD_VAR 0 5
80459: PUSH
80460: LD_INT 2
80462: ARRAY
80463: PPUSH
80464: CALL 79419 0 3
80468: NOT
80469: IFFALSE 80475
// exit ;
80471: POP
80472: POP
80473: GO 80479
80475: GO 80438
80477: POP
80478: POP
// end ;
80479: LD_VAR 0 4
80483: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
80484: LD_INT 0
80486: PPUSH
80487: PPUSH
80488: PPUSH
80489: PPUSH
80490: PPUSH
80491: PPUSH
80492: PPUSH
// if not GetClass ( unit ) = class_sniper then
80493: LD_VAR 0 1
80497: PPUSH
80498: CALL_OW 257
80502: PUSH
80503: LD_INT 5
80505: EQUAL
80506: NOT
80507: IFFALSE 80511
// exit ;
80509: GO 80899
// dist := 8 ;
80511: LD_ADDR_VAR 0 5
80515: PUSH
80516: LD_INT 8
80518: ST_TO_ADDR
// viewRange := 12 ;
80519: LD_ADDR_VAR 0 7
80523: PUSH
80524: LD_INT 12
80526: ST_TO_ADDR
// side := GetSide ( unit ) ;
80527: LD_ADDR_VAR 0 6
80531: PUSH
80532: LD_VAR 0 1
80536: PPUSH
80537: CALL_OW 255
80541: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
80542: LD_INT 61
80544: PPUSH
80545: LD_VAR 0 6
80549: PPUSH
80550: CALL_OW 321
80554: PUSH
80555: LD_INT 2
80557: EQUAL
80558: IFFALSE 80568
// viewRange := 16 ;
80560: LD_ADDR_VAR 0 7
80564: PUSH
80565: LD_INT 16
80567: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
80568: LD_VAR 0 1
80572: PPUSH
80573: LD_VAR 0 2
80577: PPUSH
80578: LD_VAR 0 3
80582: PPUSH
80583: CALL_OW 297
80587: PUSH
80588: LD_VAR 0 5
80592: GREATER
80593: IFFALSE 80672
// begin ComMoveXY ( unit , x , y ) ;
80595: LD_VAR 0 1
80599: PPUSH
80600: LD_VAR 0 2
80604: PPUSH
80605: LD_VAR 0 3
80609: PPUSH
80610: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
80614: LD_INT 35
80616: PPUSH
80617: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
80621: LD_VAR 0 1
80625: PPUSH
80626: LD_VAR 0 2
80630: PPUSH
80631: LD_VAR 0 3
80635: PPUSH
80636: CALL 60175 0 3
80640: NOT
80641: IFFALSE 80645
// exit ;
80643: GO 80899
// until GetDistUnitXY ( unit , x , y ) < dist ;
80645: LD_VAR 0 1
80649: PPUSH
80650: LD_VAR 0 2
80654: PPUSH
80655: LD_VAR 0 3
80659: PPUSH
80660: CALL_OW 297
80664: PUSH
80665: LD_VAR 0 5
80669: LESS
80670: IFFALSE 80614
// end ; ComTurnXY ( unit , x , y ) ;
80672: LD_VAR 0 1
80676: PPUSH
80677: LD_VAR 0 2
80681: PPUSH
80682: LD_VAR 0 3
80686: PPUSH
80687: CALL_OW 118
// wait ( 5 ) ;
80691: LD_INT 5
80693: PPUSH
80694: CALL_OW 67
// _d := GetDir ( unit ) ;
80698: LD_ADDR_VAR 0 10
80702: PUSH
80703: LD_VAR 0 1
80707: PPUSH
80708: CALL_OW 254
80712: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
80713: LD_ADDR_VAR 0 8
80717: PUSH
80718: LD_VAR 0 1
80722: PPUSH
80723: CALL_OW 250
80727: PPUSH
80728: LD_VAR 0 10
80732: PPUSH
80733: LD_VAR 0 5
80737: PPUSH
80738: CALL_OW 272
80742: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
80743: LD_ADDR_VAR 0 9
80747: PUSH
80748: LD_VAR 0 1
80752: PPUSH
80753: CALL_OW 251
80757: PPUSH
80758: LD_VAR 0 10
80762: PPUSH
80763: LD_VAR 0 5
80767: PPUSH
80768: CALL_OW 273
80772: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80773: LD_VAR 0 8
80777: PPUSH
80778: LD_VAR 0 9
80782: PPUSH
80783: CALL_OW 488
80787: NOT
80788: IFFALSE 80792
// exit ;
80790: GO 80899
// ComAnimCustom ( unit , 1 ) ;
80792: LD_VAR 0 1
80796: PPUSH
80797: LD_INT 1
80799: PPUSH
80800: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
80804: LD_VAR 0 8
80808: PPUSH
80809: LD_VAR 0 9
80813: PPUSH
80814: LD_VAR 0 6
80818: PPUSH
80819: LD_VAR 0 7
80823: PPUSH
80824: CALL_OW 330
// repeat wait ( 1 ) ;
80828: LD_INT 1
80830: PPUSH
80831: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
80835: LD_VAR 0 1
80839: PPUSH
80840: CALL_OW 316
80844: PUSH
80845: LD_VAR 0 1
80849: PPUSH
80850: CALL_OW 314
80854: OR
80855: PUSH
80856: LD_VAR 0 1
80860: PPUSH
80861: CALL_OW 302
80865: NOT
80866: OR
80867: PUSH
80868: LD_VAR 0 1
80872: PPUSH
80873: CALL_OW 301
80877: OR
80878: IFFALSE 80828
// RemoveSeeing ( _x , _y , side ) ;
80880: LD_VAR 0 8
80884: PPUSH
80885: LD_VAR 0 9
80889: PPUSH
80890: LD_VAR 0 6
80894: PPUSH
80895: CALL_OW 331
// end ; end_of_file
80899: LD_VAR 0 4
80903: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80904: LD_VAR 0 1
80908: PPUSH
80909: LD_VAR 0 2
80913: PPUSH
80914: LD_VAR 0 3
80918: PPUSH
80919: LD_VAR 0 4
80923: PPUSH
80924: LD_VAR 0 5
80928: PPUSH
80929: LD_VAR 0 6
80933: PPUSH
80934: CALL 63554 0 6
// end ;
80938: PPOPN 6
80940: END
