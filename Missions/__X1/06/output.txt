// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 65609 0 0
// Init ;
   8: CALL 62 0 0
// if debug then
  12: LD_EXP 1
  16: IFFALSE 26
// Difficulty := 4 ;
  18: LD_ADDR_OWVAR 67
  22: PUSH
  23: LD_INT 4
  25: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  26: LD_INT 1
  28: PPUSH
  29: LD_INT 3
  31: PPUSH
  32: CALL 6882 0 2
// PrepareArabian ;
  36: CALL 381 0 0
// PrepareRussian ;
  40: CALL 7733 0 0
// Action ;
  44: CALL 15895 0 0
// if debug then
  48: LD_EXP 1
  52: IFFALSE 61
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ;
  61: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack , canRolfJoin ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 05_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 05_
  80: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_STRING 04_2_GaidarKilled
  88: PPUSH
  89: LD_INT 1
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_STRING 05_ConvoySavedCounter
 104: PPUSH
 105: LD_INT 0
 107: PPUSH
 108: CALL_OW 30
 112: ST_TO_ADDR
// bergkampfArrived := false ;
 113: LD_ADDR_EXP 3
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// omarArrived := false ;
 121: LD_ADDR_EXP 6
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// outpostDestroyed := false ;
 129: LD_ADDR_EXP 4
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// ruLoseCounter := 0 ;
 137: LD_ADDR_EXP 5
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// rolfScriptBase := false ;
 145: LD_ADDR_EXP 9
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// omarScriptBase := false ;
 153: LD_ADDR_EXP 10
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// linkedWithRolf := 0 ;
 161: LD_ADDR_EXP 12
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 169: LD_ADDR_EXP 26
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// rolfDied := false ;
 177: LD_ADDR_EXP 13
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// leninSpotted := false ;
 185: LD_ADDR_EXP 14
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// mortarConstructed := false ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// rolfHasVehicles := false ;
 201: LD_ADDR_EXP 16
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// leninScriptBase := true ;
 209: LD_ADDR_EXP 11
 213: PUSH
 214: LD_INT 1
 216: ST_TO_ADDR
// rolfWantVehicles := false ;
 217: LD_ADDR_EXP 17
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// omarWantVehicles := false ;
 225: LD_ADDR_EXP 18
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// omarHasVehicles := false ;
 233: LD_ADDR_EXP 22
 237: PUSH
 238: LD_INT 0
 240: ST_TO_ADDR
// escapeAllowed := false ;
 241: LD_ADDR_EXP 24
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 8 8$00 , 6 6$00 , 5 5$30 , 5 5$00 ] [ Difficulty ] ;
 249: LD_ADDR_EXP 19
 253: PUSH
 254: LD_INT 16800
 256: PUSH
 257: LD_INT 12600
 259: PUSH
 260: LD_INT 11550
 262: PUSH
 263: LD_INT 10500
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: PUSH
 272: LD_OWVAR 67
 276: ARRAY
 277: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 10 10$00 , 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] ;
 278: LD_ADDR_EXP 20
 282: PUSH
 283: LD_INT 21000
 285: PUSH
 286: LD_INT 18900
 288: PUSH
 289: LD_INT 16800
 291: PUSH
 292: LD_INT 14700
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: LIST
 299: LIST
 300: PUSH
 301: LD_OWVAR 67
 305: ARRAY
 306: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 307: LD_ADDR_EXP 21
 311: PUSH
 312: LD_INT 4
 314: PUSH
 315: LD_INT 5
 317: PUSH
 318: LD_INT 6
 320: PUSH
 321: LD_INT 6
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: PUSH
 330: LD_OWVAR 67
 334: ARRAY
 335: ST_TO_ADDR
// omarAttack := false ;
 336: LD_ADDR_EXP 23
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// disableAttackOnHeike := false ;
 344: LD_ADDR_EXP 27
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// escapeTimer := 4 4$00 ;
 352: LD_ADDR_EXP 25
 356: PUSH
 357: LD_INT 8400
 359: ST_TO_ADDR
// firstAttack := true ;
 360: LD_ADDR_EXP 28
 364: PUSH
 365: LD_INT 1
 367: ST_TO_ADDR
// canRolfJoin := true ;
 368: LD_ADDR_EXP 29
 372: PUSH
 373: LD_INT 1
 375: ST_TO_ADDR
// end ; end_of_file
 376: LD_VAR 0 1
 380: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , tmp ; begin
 381: LD_INT 0
 383: PPUSH
 384: PPUSH
 385: PPUSH
 386: PPUSH
 387: PPUSH
 388: PPUSH
 389: PPUSH
 390: PPUSH
 391: PPUSH
 392: PPUSH
 393: PPUSH
 394: PPUSH
// uc_nation := 2 ;
 395: LD_ADDR_OWVAR 21
 399: PUSH
 400: LD_INT 2
 402: ST_TO_ADDR
// uc_side := 5 ;
 403: LD_ADDR_OWVAR 20
 407: PUSH
 408: LD_INT 5
 410: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 411: LD_ADDR_EXP 38
 415: PUSH
 416: LD_STRING Abdul
 418: PPUSH
 419: LD_INT 0
 421: PPUSH
 422: LD_STRING 
 424: PPUSH
 425: CALL 25297 0 3
 429: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 430: LD_ADDR_EXP 40
 434: PUSH
 435: LD_STRING Omar
 437: PPUSH
 438: LD_INT 0
 440: PPUSH
 441: LD_STRING 
 443: PPUSH
 444: CALL 25297 0 3
 448: ST_TO_ADDR
// uc_side := 2 ;
 449: LD_ADDR_OWVAR 20
 453: PUSH
 454: LD_INT 2
 456: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 457: LD_ADDR_EXP 30
 461: PUSH
 462: LD_STRING Heike
 464: PPUSH
 465: LD_EXP 1
 469: NOT
 470: PPUSH
 471: LD_EXP 2
 475: PPUSH
 476: CALL 25297 0 3
 480: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 481: LD_ADDR_EXP 33
 485: PUSH
 486: LD_STRING Ibrahim
 488: PPUSH
 489: LD_EXP 1
 493: NOT
 494: PPUSH
 495: LD_EXP 2
 499: PPUSH
 500: CALL 25297 0 3
 504: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 505: LD_ADDR_EXP 31
 509: PUSH
 510: LD_STRING Givi
 512: PPUSH
 513: LD_EXP 1
 517: NOT
 518: PPUSH
 519: LD_EXP 2
 523: PPUSH
 524: CALL 25297 0 3
 528: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 529: LD_ADDR_EXP 34
 533: PUSH
 534: LD_STRING Kamil
 536: PPUSH
 537: LD_EXP 1
 541: NOT
 542: PPUSH
 543: LD_EXP 2
 547: PPUSH
 548: CALL 25297 0 3
 552: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 553: LD_ADDR_EXP 35
 557: PUSH
 558: LD_STRING Kaia
 560: PPUSH
 561: LD_EXP 1
 565: NOT
 566: PPUSH
 567: LD_EXP 2
 571: PPUSH
 572: CALL 25297 0 3
 576: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 577: LD_ADDR_EXP 36
 581: PUSH
 582: LD_STRING Sophia
 584: PPUSH
 585: LD_EXP 1
 589: NOT
 590: PPUSH
 591: LD_EXP 2
 595: PPUSH
 596: CALL 25297 0 3
 600: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 601: LD_ADDR_EXP 37
 605: PUSH
 606: LD_STRING Markov
 608: PPUSH
 609: LD_EXP 1
 613: NOT
 614: PPUSH
 615: LD_EXP 2
 619: PPUSH
 620: CALL 25297 0 3
 624: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 625: LD_ADDR_EXP 42
 629: PUSH
 630: LD_STRING Aviradze
 632: PPUSH
 633: LD_EXP 1
 637: NOT
 638: PPUSH
 639: LD_EXP 2
 643: PPUSH
 644: CALL 25297 0 3
 648: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 649: LD_ADDR_EXP 41
 653: PUSH
 654: LD_STRING Kurt
 656: PPUSH
 657: LD_EXP 1
 661: NOT
 662: PPUSH
 663: LD_EXP 2
 667: PPUSH
 668: CALL 25297 0 3
 672: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 673: LD_ADDR_EXP 32
 677: PUSH
 678: LD_STRING Mike
 680: PPUSH
 681: LD_EXP 1
 685: NOT
 686: PPUSH
 687: LD_EXP 2
 691: PPUSH
 692: CALL 25297 0 3
 696: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 697: LD_ADDR_EXP 39
 701: PUSH
 702: LD_STRING Olaf
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: LD_STRING 
 710: PPUSH
 711: CALL 25297 0 3
 715: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 716: LD_ADDR_EXP 45
 720: PUSH
 721: LD_STRING 05_others
 723: PPUSH
 724: CALL_OW 31
 728: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 729: LD_ADDR_EXP 46
 733: PUSH
 734: LD_STRING 05_apes
 736: PPUSH
 737: CALL_OW 31
 741: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 742: LD_ADDR_VAR 0 5
 746: PUSH
 747: LD_STRING 05_Radar
 749: PPUSH
 750: LD_EXP 1
 754: PPUSH
 755: CALL_OW 30
 759: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 760: LD_ADDR_VAR 0 6
 764: PUSH
 765: LD_STRING 05_RemoteControl
 767: PPUSH
 768: LD_EXP 1
 772: PPUSH
 773: CALL_OW 30
 777: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 778: LD_ADDR_VAR 0 7
 782: PUSH
 783: LD_STRING 05_DrugsTested
 785: PPUSH
 786: LD_EXP 1
 790: PPUSH
 791: CALL_OW 30
 795: ST_TO_ADDR
// if hasDrugs then
 796: LD_VAR 0 7
 800: IFFALSE 815
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 802: LD_INT 5
 804: PPUSH
 805: LD_INT 2
 807: PPUSH
 808: LD_INT 2
 810: PPUSH
 811: CALL_OW 322
// if hasRadar then
 815: LD_VAR 0 5
 819: IFFALSE 834
// SetTech ( tech_radar , 2 , state_researched ) ;
 821: LD_INT 6
 823: PPUSH
 824: LD_INT 2
 826: PPUSH
 827: LD_INT 2
 829: PPUSH
 830: CALL_OW 322
// if hasRemote then
 834: LD_VAR 0 6
 838: IFFALSE 853
// SetTech ( tech_remCont , 2 , state_researched ) ;
 840: LD_INT 15
 842: PPUSH
 843: LD_INT 2
 845: PPUSH
 846: LD_INT 2
 848: PPUSH
 849: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 853: LD_ADDR_VAR 0 12
 857: PUSH
 858: LD_INT 5
 860: PPUSH
 861: LD_INT 0
 863: PPUSH
 864: CALL_OW 517
 868: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: DOUBLE
 875: LD_INT 1
 877: DEC
 878: ST_TO_ADDR
 879: LD_VAR 0 12
 883: PUSH
 884: LD_INT 1
 886: ARRAY
 887: PUSH
 888: FOR_TO
 889: IFFALSE 966
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
 891: LD_VAR 0 12
 895: PUSH
 896: LD_INT 1
 898: ARRAY
 899: PUSH
 900: LD_VAR 0 2
 904: ARRAY
 905: PPUSH
 906: LD_VAR 0 12
 910: PUSH
 911: LD_INT 2
 913: ARRAY
 914: PUSH
 915: LD_VAR 0 2
 919: ARRAY
 920: PPUSH
 921: CALL_OW 351
 925: IFFALSE 964
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
 927: LD_VAR 0 12
 931: PUSH
 932: LD_INT 1
 934: ARRAY
 935: PUSH
 936: LD_VAR 0 2
 940: ARRAY
 941: PPUSH
 942: LD_VAR 0 12
 946: PUSH
 947: LD_INT 2
 949: ARRAY
 950: PUSH
 951: LD_VAR 0 2
 955: ARRAY
 956: PPUSH
 957: LD_INT 2
 959: PPUSH
 960: CALL_OW 244
 964: GO 888
 966: POP
 967: POP
// base := [ [ b_depot , 206 , 80 , 1 ] , [ b_bunker , 221 , 95 , 5 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 ] , [ b_lab_full , 217 , 78 , 4 ] , [ b_solar_power , 220 , 99 , 1 ] , [ b_solar_power , 220 , 103 , 1 ] , [ b_solar_power , 216 , 102 , 1 ] , [ b_ext_gun , 203 , 94 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 ] , [ b_ext_track , 199 , 91 , 1 ] , [ b_oil_power , 197 , 81 , 1 ] , [ b_oil_power , 197 , 78 , 3 ] ] ;
 968: LD_ADDR_VAR 0 4
 972: PUSH
 973: LD_INT 0
 975: PUSH
 976: LD_INT 206
 978: PUSH
 979: LD_INT 80
 981: PUSH
 982: LD_INT 1
 984: PUSH
 985: EMPTY
 986: LIST
 987: LIST
 988: LIST
 989: LIST
 990: PUSH
 991: LD_INT 32
 993: PUSH
 994: LD_INT 221
 996: PUSH
 997: LD_INT 95
 999: PUSH
1000: LD_INT 5
1002: PUSH
1003: LD_INT 23
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: PUSH
1013: LD_INT 32
1015: PUSH
1016: LD_INT 223
1018: PUSH
1019: LD_INT 88
1021: PUSH
1022: LD_INT 5
1024: PUSH
1025: LD_INT 24
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: PUSH
1035: LD_INT 32
1037: PUSH
1038: LD_INT 202
1040: PUSH
1041: LD_INT 64
1043: PUSH
1044: LD_INT 2
1046: PUSH
1047: LD_INT 25
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: PUSH
1057: LD_INT 3
1059: PUSH
1060: LD_INT 203
1062: PUSH
1063: LD_INT 91
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: EMPTY
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: PUSH
1075: LD_INT 8
1077: PUSH
1078: LD_INT 217
1080: PUSH
1081: LD_INT 78
1083: PUSH
1084: LD_INT 4
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: PUSH
1093: LD_INT 27
1095: PUSH
1096: LD_INT 220
1098: PUSH
1099: LD_INT 99
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: PUSH
1111: LD_INT 27
1113: PUSH
1114: LD_INT 220
1116: PUSH
1117: LD_INT 103
1119: PUSH
1120: LD_INT 1
1122: PUSH
1123: EMPTY
1124: LIST
1125: LIST
1126: LIST
1127: LIST
1128: PUSH
1129: LD_INT 27
1131: PUSH
1132: LD_INT 216
1134: PUSH
1135: LD_INT 102
1137: PUSH
1138: LD_INT 1
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: PUSH
1147: LD_INT 17
1149: PUSH
1150: LD_INT 203
1152: PUSH
1153: LD_INT 94
1155: PUSH
1156: LD_INT 0
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 23
1167: PUSH
1168: LD_INT 200
1170: PUSH
1171: LD_INT 88
1173: PUSH
1174: LD_INT 2
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: LIST
1181: LIST
1182: PUSH
1183: LD_INT 16
1185: PUSH
1186: LD_INT 199
1188: PUSH
1189: LD_INT 91
1191: PUSH
1192: LD_INT 1
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: LIST
1199: LIST
1200: PUSH
1201: LD_INT 26
1203: PUSH
1204: LD_INT 197
1206: PUSH
1207: LD_INT 81
1209: PUSH
1210: LD_INT 1
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: LIST
1217: LIST
1218: PUSH
1219: LD_INT 26
1221: PUSH
1222: LD_INT 197
1224: PUSH
1225: LD_INT 78
1227: PUSH
1228: LD_INT 3
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: ST_TO_ADDR
// if hasRadar then
1253: LD_VAR 0 5
1257: IFFALSE 1301
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 ] ) ;
1259: LD_ADDR_VAR 0 4
1263: PUSH
1264: LD_VAR 0 4
1268: PPUSH
1269: LD_VAR 0 4
1273: PUSH
1274: LD_INT 1
1276: PLUS
1277: PPUSH
1278: LD_INT 20
1280: PUSH
1281: LD_INT 203
1283: PUSH
1284: LD_INT 87
1286: PUSH
1287: LD_INT 3
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: PPUSH
1296: CALL_OW 1
1300: ST_TO_ADDR
// if hasRemote then
1301: LD_VAR 0 6
1305: IFFALSE 1349
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 ] ) ;
1307: LD_ADDR_VAR 0 4
1311: PUSH
1312: LD_VAR 0 4
1316: PPUSH
1317: LD_VAR 0 4
1321: PUSH
1322: LD_INT 1
1324: PLUS
1325: PPUSH
1326: LD_INT 22
1328: PUSH
1329: LD_INT 207
1331: PUSH
1332: LD_INT 95
1334: PUSH
1335: LD_INT 5
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: PPUSH
1344: CALL_OW 1
1348: ST_TO_ADDR
// for i in base do
1349: LD_ADDR_VAR 0 2
1353: PUSH
1354: LD_VAR 0 4
1358: PUSH
1359: FOR_IN
1360: IFFALSE 1541
// begin bc_type := i [ 1 ] ;
1362: LD_ADDR_OWVAR 42
1366: PUSH
1367: LD_VAR 0 2
1371: PUSH
1372: LD_INT 1
1374: ARRAY
1375: ST_TO_ADDR
// bc_level := 3 ;
1376: LD_ADDR_OWVAR 43
1380: PUSH
1381: LD_INT 3
1383: ST_TO_ADDR
// if i [ 1 ] = b_lab_full then
1384: LD_VAR 0 2
1388: PUSH
1389: LD_INT 1
1391: ARRAY
1392: PUSH
1393: LD_INT 8
1395: EQUAL
1396: IFFALSE 1431
// begin bc_kind1 := b_lab_weapon ;
1398: LD_ADDR_OWVAR 44
1402: PUSH
1403: LD_INT 10
1405: ST_TO_ADDR
// if hasRadar then
1406: LD_VAR 0 5
1410: IFFALSE 1422
// bc_kind2 := b_lab_opto else
1412: LD_ADDR_OWVAR 45
1416: PUSH
1417: LD_INT 15
1419: ST_TO_ADDR
1420: GO 1431
// bc_kind2 := - 1 ;
1422: LD_ADDR_OWVAR 45
1426: PUSH
1427: LD_INT 1
1429: NEG
1430: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1431: LD_ADDR_VAR 0 3
1435: PUSH
1436: LD_VAR 0 2
1440: PUSH
1441: LD_INT 2
1443: ARRAY
1444: PPUSH
1445: LD_VAR 0 2
1449: PUSH
1450: LD_INT 3
1452: ARRAY
1453: PPUSH
1454: LD_VAR 0 2
1458: PUSH
1459: LD_INT 4
1461: ARRAY
1462: PPUSH
1463: CALL_OW 47
1467: ST_TO_ADDR
// if i > 4 then
1468: LD_VAR 0 2
1472: PUSH
1473: LD_INT 4
1475: GREATER
1476: IFFALSE 1496
// PlaceWeaponTurret ( b , i [ 5 ] ) ;
1478: LD_VAR 0 3
1482: PPUSH
1483: LD_VAR 0 2
1487: PUSH
1488: LD_INT 5
1490: ARRAY
1491: PPUSH
1492: CALL_OW 431
// if i [ 1 ] = b_bunker then
1496: LD_VAR 0 2
1500: PUSH
1501: LD_INT 1
1503: ARRAY
1504: PUSH
1505: LD_INT 32
1507: EQUAL
1508: IFFALSE 1539
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
1510: LD_ADDR_VAR 0 11
1514: PUSH
1515: LD_VAR 0 11
1519: PPUSH
1520: LD_VAR 0 11
1524: PUSH
1525: LD_INT 1
1527: PLUS
1528: PPUSH
1529: LD_VAR 0 3
1533: PPUSH
1534: CALL_OW 1
1538: ST_TO_ADDR
// end ;
1539: GO 1359
1541: POP
1542: POP
// depot := HexInfo ( 206 , 80 ) ;
1543: LD_ADDR_VAR 0 9
1547: PUSH
1548: LD_INT 206
1550: PPUSH
1551: LD_INT 80
1553: PPUSH
1554: CALL_OW 428
1558: ST_TO_ADDR
// factory := HexInfo ( 203 , 91 ) ;
1559: LD_ADDR_VAR 0 8
1563: PUSH
1564: LD_INT 203
1566: PPUSH
1567: LD_INT 91
1569: PPUSH
1570: CALL_OW 428
1574: ST_TO_ADDR
// lab := HexInfo ( 217 , 78 ) ;
1575: LD_ADDR_VAR 0 10
1579: PUSH
1580: LD_INT 217
1582: PPUSH
1583: LD_INT 78
1585: PPUSH
1586: CALL_OW 428
1590: ST_TO_ADDR
// arDepot := depot ;
1591: LD_ADDR_EXP 44
1595: PUSH
1596: LD_VAR 0 9
1600: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 160 , 120 ] [ Difficulty ] ) ;
1601: LD_VAR 0 9
1605: PPUSH
1606: CALL_OW 274
1610: PPUSH
1611: LD_INT 1
1613: PPUSH
1614: LD_INT 360
1616: PUSH
1617: LD_INT 260
1619: PUSH
1620: LD_INT 160
1622: PUSH
1623: LD_INT 120
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: PUSH
1632: LD_OWVAR 67
1636: ARRAY
1637: PPUSH
1638: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 130 , 100 ] [ Difficulty ] ) ;
1642: LD_VAR 0 9
1646: PPUSH
1647: CALL_OW 274
1651: PPUSH
1652: LD_INT 2
1654: PPUSH
1655: LD_INT 200
1657: PUSH
1658: LD_INT 170
1660: PUSH
1661: LD_INT 130
1663: PUSH
1664: LD_INT 100
1666: PUSH
1667: EMPTY
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: PUSH
1673: LD_OWVAR 67
1677: ARRAY
1678: PPUSH
1679: CALL_OW 277
// uc_nation := 2 ;
1683: LD_ADDR_OWVAR 21
1687: PUSH
1688: LD_INT 2
1690: ST_TO_ADDR
// uc_side := 2 ;
1691: LD_ADDR_OWVAR 20
1695: PUSH
1696: LD_INT 2
1698: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
1699: LD_INT 13
1701: PPUSH
1702: LD_INT 1
1704: PPUSH
1705: LD_INT 1
1707: PPUSH
1708: LD_INT 27
1710: PPUSH
1711: LD_INT 33
1713: PPUSH
1714: CALL 30161 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
1718: CALL_OW 45
1722: PPUSH
1723: LD_INT 190
1725: PPUSH
1726: LD_INT 64
1728: PPUSH
1729: LD_INT 5
1731: PPUSH
1732: LD_INT 0
1734: PPUSH
1735: CALL 64110 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
1739: LD_INT 13
1741: PPUSH
1742: LD_INT 1
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: LD_INT 25
1750: PPUSH
1751: LD_INT 22
1753: PPUSH
1754: CALL 30161 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
1758: CALL_OW 45
1762: PPUSH
1763: LD_INT 188
1765: PPUSH
1766: LD_INT 67
1768: PPUSH
1769: LD_INT 5
1771: PPUSH
1772: LD_INT 0
1774: PPUSH
1775: CALL 64110 0 5
// if hasRemote then
1779: LD_VAR 0 6
1783: IFFALSE 1865
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_control_tower , 35 ) ;
1785: LD_INT 13
1787: PPUSH
1788: LD_INT 1
1790: PPUSH
1791: LD_INT 1
1793: PPUSH
1794: LD_INT 31
1796: PPUSH
1797: LD_INT 35
1799: PPUSH
1800: CALL 30161 0 5
// PlaceUnitXYD ( CreateVehicle , 191 , 71 , 5 , false ) ;
1804: CALL_OW 45
1808: PPUSH
1809: LD_INT 191
1811: PPUSH
1812: LD_INT 71
1814: PPUSH
1815: LD_INT 5
1817: PPUSH
1818: LD_INT 0
1820: PPUSH
1821: CALL 64110 0 5
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_remote , ar_gun , 55 ) ;
1825: LD_INT 14
1827: PPUSH
1828: LD_INT 1
1830: PPUSH
1831: LD_INT 2
1833: PPUSH
1834: LD_INT 27
1836: PPUSH
1837: LD_INT 55
1839: PPUSH
1840: CALL 30161 0 5
// PlaceUnitXYD ( CreateVehicle , 199 , 67 , 0 , false ) ;
1844: CALL_OW 45
1848: PPUSH
1849: LD_INT 199
1851: PPUSH
1852: LD_INT 67
1854: PPUSH
1855: LD_INT 0
1857: PPUSH
1858: LD_INT 0
1860: PPUSH
1861: CALL 64110 0 5
// end ; PlaceUnitXY ( Heike , 213 , 87 , false ) ;
1865: LD_EXP 30
1869: PPUSH
1870: LD_INT 213
1872: PPUSH
1873: LD_INT 87
1875: PPUSH
1876: LD_INT 0
1878: PPUSH
1879: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
1883: LD_EXP 30
1887: PPUSH
1888: LD_INT 214
1890: PPUSH
1891: LD_INT 87
1893: PPUSH
1894: CALL_OW 118
// if Kaia then
1898: LD_EXP 35
1902: IFFALSE 1937
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
1904: LD_EXP 35
1908: PPUSH
1909: LD_INT 213
1911: PPUSH
1912: LD_INT 85
1914: PPUSH
1915: LD_INT 0
1917: PPUSH
1918: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
1922: LD_EXP 35
1926: PPUSH
1927: LD_INT 215
1929: PPUSH
1930: LD_INT 87
1932: PPUSH
1933: CALL_OW 118
// end ; if Olaf and Kaia then
1937: LD_EXP 39
1941: PUSH
1942: LD_EXP 35
1946: AND
1947: IFFALSE 1984
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
1949: LD_EXP 39
1953: PPUSH
1954: LD_INT 215
1956: PPUSH
1957: LD_INT 87
1959: PPUSH
1960: LD_INT 0
1962: PPUSH
1963: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
1967: LD_EXP 39
1971: PPUSH
1972: LD_INT 213
1974: PPUSH
1975: LD_INT 85
1977: PPUSH
1978: CALL_OW 118
// end else
1982: GO 2004
// if Olaf then
1984: LD_EXP 39
1988: IFFALSE 2004
// PlaceHumanInUnit ( Olaf , factory ) ;
1990: LD_EXP 39
1994: PPUSH
1995: LD_VAR 0 8
1999: PPUSH
2000: CALL_OW 52
// if Givi then
2004: LD_EXP 31
2008: IFFALSE 2089
// begin if Kaia and Olaf then
2010: LD_EXP 35
2014: PUSH
2015: LD_EXP 39
2019: AND
2020: IFFALSE 2057
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
2022: LD_EXP 31
2026: PPUSH
2027: LD_INT 247
2029: PPUSH
2030: LD_INT 117
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2040: LD_EXP 31
2044: PPUSH
2045: LD_INT 248
2047: PPUSH
2048: LD_INT 118
2050: PPUSH
2051: CALL_OW 118
// end else
2055: GO 2089
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2057: LD_EXP 31
2061: PPUSH
2062: LD_INT 216
2064: PPUSH
2065: LD_INT 88
2067: PPUSH
2068: LD_INT 0
2070: PPUSH
2071: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2075: LD_EXP 31
2079: PPUSH
2080: LD_EXP 30
2084: PPUSH
2085: CALL_OW 119
// end ; end ; if Kurt then
2089: LD_EXP 41
2093: IFFALSE 2113
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2095: LD_EXP 41
2099: PPUSH
2100: LD_VAR 0 11
2104: PUSH
2105: LD_INT 2
2107: ARRAY
2108: PPUSH
2109: CALL_OW 52
// if Mike then
2113: LD_EXP 32
2117: IFFALSE 2137
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2119: LD_EXP 32
2123: PPUSH
2124: LD_VAR 0 11
2128: PUSH
2129: LD_INT 3
2131: ARRAY
2132: PPUSH
2133: CALL_OW 52
// if Kamil then
2137: LD_EXP 34
2141: IFFALSE 2203
// begin if Kaia and Olaf then
2143: LD_EXP 35
2147: PUSH
2148: LD_EXP 39
2152: AND
2153: IFFALSE 2171
// PlaceHumanInUnit ( Kamil , depot ) else
2155: LD_EXP 34
2159: PPUSH
2160: LD_VAR 0 9
2164: PPUSH
2165: CALL_OW 52
2169: GO 2203
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
2171: LD_EXP 34
2175: PPUSH
2176: LD_INT 213
2178: PPUSH
2179: LD_INT 87
2181: PPUSH
2182: LD_INT 0
2184: PPUSH
2185: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
2189: LD_EXP 34
2193: PPUSH
2194: LD_EXP 30
2198: PPUSH
2199: CALL_OW 119
// end ; end ; if Sophia then
2203: LD_EXP 36
2207: IFFALSE 2223
// PlaceHumanInUnit ( Sophia , depot ) ;
2209: LD_EXP 36
2213: PPUSH
2214: LD_VAR 0 9
2218: PPUSH
2219: CALL_OW 52
// if Aviradze then
2223: LD_EXP 42
2227: IFFALSE 2243
// PlaceHumanInUnit ( Aviradze , lab ) ;
2229: LD_EXP 42
2233: PPUSH
2234: LD_VAR 0 10
2238: PPUSH
2239: CALL_OW 52
// if Ibrahim then
2243: LD_EXP 33
2247: IFFALSE 2263
// PlaceHumanInUnit ( Ibrahim , lab ) ;
2249: LD_EXP 33
2253: PPUSH
2254: LD_VAR 0 10
2258: PPUSH
2259: CALL_OW 52
// if Markov then
2263: LD_EXP 37
2267: IFFALSE 2283
// PlaceHumanInUnit ( Markov , factory ) ;
2269: LD_EXP 37
2273: PPUSH
2274: LD_VAR 0 8
2278: PPUSH
2279: CALL_OW 52
// if heikeSecondSquad then
2283: LD_EXP 45
2287: IFFALSE 2327
// for i in heikeSecondSquad do
2289: LD_ADDR_VAR 0 2
2293: PUSH
2294: LD_EXP 45
2298: PUSH
2299: FOR_IN
2300: IFFALSE 2325
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
2302: LD_VAR 0 2
2306: PPUSH
2307: LD_INT 190
2309: PPUSH
2310: LD_INT 65
2312: PPUSH
2313: LD_INT 5
2315: PPUSH
2316: LD_INT 0
2318: PPUSH
2319: CALL_OW 50
2323: GO 2299
2325: POP
2326: POP
// if heikeApes then
2327: LD_EXP 46
2331: IFFALSE 2371
// for i in heikeApes do
2333: LD_ADDR_VAR 0 2
2337: PUSH
2338: LD_EXP 46
2342: PUSH
2343: FOR_IN
2344: IFFALSE 2369
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
2346: LD_VAR 0 2
2350: PPUSH
2351: LD_INT 190
2353: PPUSH
2354: LD_INT 70
2356: PPUSH
2357: LD_INT 5
2359: PPUSH
2360: LD_INT 0
2362: PPUSH
2363: CALL_OW 50
2367: GO 2343
2369: POP
2370: POP
// end ;
2371: LD_VAR 0 1
2375: RET
// export function PrepareRolfSquad ; var i , j ; begin
2376: LD_INT 0
2378: PPUSH
2379: PPUSH
2380: PPUSH
// uc_side := 8 ;
2381: LD_ADDR_OWVAR 20
2385: PUSH
2386: LD_INT 8
2388: ST_TO_ADDR
// uc_nation := 2 ;
2389: LD_ADDR_OWVAR 21
2393: PUSH
2394: LD_INT 2
2396: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
2397: LD_ADDR_EXP 43
2401: PUSH
2402: LD_STRING Bergkamp
2404: PPUSH
2405: CALL_OW 25
2409: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
2410: LD_ADDR_EXP 47
2414: PUSH
2415: LD_EXP 43
2419: PUSH
2420: EMPTY
2421: LIST
2422: ST_TO_ADDR
// for i := 1 to 4 do
2423: LD_ADDR_VAR 0 2
2427: PUSH
2428: DOUBLE
2429: LD_INT 1
2431: DEC
2432: ST_TO_ADDR
2433: LD_INT 4
2435: PUSH
2436: FOR_TO
2437: IFFALSE 2517
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
2439: LD_ADDR_VAR 0 3
2443: PUSH
2444: DOUBLE
2445: LD_INT 1
2447: DEC
2448: ST_TO_ADDR
2449: LD_INT 5
2451: PUSH
2452: LD_INT 2
2454: PUSH
2455: LD_INT 3
2457: PUSH
2458: LD_INT 1
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: LIST
2465: LIST
2466: PUSH
2467: LD_VAR 0 2
2471: ARRAY
2472: PUSH
2473: FOR_TO
2474: IFFALSE 2513
// begin PrepareHuman ( false , i , 5 ) ;
2476: LD_INT 0
2478: PPUSH
2479: LD_VAR 0 2
2483: PPUSH
2484: LD_INT 5
2486: PPUSH
2487: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
2491: LD_ADDR_EXP 47
2495: PUSH
2496: LD_EXP 47
2500: PPUSH
2501: CALL_OW 44
2505: PPUSH
2506: CALL 61978 0 2
2510: ST_TO_ADDR
// end ;
2511: GO 2473
2513: POP
2514: POP
// end ;
2515: GO 2436
2517: POP
2518: POP
// if HexInfo ( 5 , 3 ) then
2519: LD_INT 5
2521: PPUSH
2522: LD_INT 3
2524: PPUSH
2525: CALL_OW 428
2529: IFFALSE 2546
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
2531: LD_INT 5
2533: PPUSH
2534: LD_INT 3
2536: PPUSH
2537: CALL_OW 428
2541: PPUSH
2542: CALL_OW 64
// for i in rolfSquad do
2546: LD_ADDR_VAR 0 2
2550: PUSH
2551: LD_EXP 47
2555: PUSH
2556: FOR_IN
2557: IFFALSE 2693
// begin uc_direction := 2 ;
2559: LD_ADDR_OWVAR 24
2563: PUSH
2564: LD_INT 2
2566: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
2567: LD_VAR 0 2
2571: PPUSH
2572: CALL_OW 257
2576: PUSH
2577: LD_INT 3
2579: EQUAL
2580: IFFALSE 2654
// begin uc_side := 8 ;
2582: LD_ADDR_OWVAR 20
2586: PUSH
2587: LD_INT 8
2589: ST_TO_ADDR
// uc_nation := 2 ;
2590: LD_ADDR_OWVAR 21
2594: PUSH
2595: LD_INT 2
2597: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
2598: LD_INT 13
2600: PPUSH
2601: LD_INT 1
2603: PPUSH
2604: LD_INT 1
2606: PPUSH
2607: LD_INT 27
2609: PPUSH
2610: LD_INT 88
2612: PPUSH
2613: CALL 30161 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
2617: CALL_OW 45
2621: PPUSH
2622: LD_INT 11
2624: PPUSH
2625: LD_INT 0
2627: PPUSH
2628: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
2632: LD_VAR 0 2
2636: PPUSH
2637: LD_INT 5
2639: PPUSH
2640: LD_INT 3
2642: PPUSH
2643: CALL_OW 428
2647: PPUSH
2648: CALL_OW 52
// end else
2652: GO 2669
// PlaceUnitArea ( i , northSpawn , false ) ;
2654: LD_VAR 0 2
2658: PPUSH
2659: LD_INT 11
2661: PPUSH
2662: LD_INT 0
2664: PPUSH
2665: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
2669: LD_VAR 0 2
2673: PPUSH
2674: LD_INT 29
2676: PPUSH
2677: LD_INT 10
2679: PPUSH
2680: CALL_OW 111
// wait ( 0 0$2 ) ;
2684: LD_INT 70
2686: PPUSH
2687: CALL_OW 67
// end ;
2691: GO 2556
2693: POP
2694: POP
// wait ( 0 0$5 ) ;
2695: LD_INT 175
2697: PPUSH
2698: CALL_OW 67
// end ;
2702: LD_VAR 0 1
2706: RET
// export function PrepareRolfBase ; var i , tmp ; begin
2707: LD_INT 0
2709: PPUSH
2710: PPUSH
2711: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
2712: LD_EXP 43
2716: PPUSH
2717: LD_INT 94
2719: PPUSH
2720: LD_INT 63
2722: PPUSH
2723: CALL_OW 428
2727: PPUSH
2728: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
2732: LD_ADDR_VAR 0 3
2736: PUSH
2737: LD_INT 4
2739: PUSH
2740: LD_INT 82
2742: PUSH
2743: LD_INT 64
2745: PUSH
2746: LD_INT 1
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: LIST
2753: LIST
2754: PUSH
2755: LD_INT 31
2757: PUSH
2758: LD_INT 73
2760: PUSH
2761: LD_INT 58
2763: PUSH
2764: LD_INT 0
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: LIST
2771: LIST
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: ST_TO_ADDR
// for i in tmp do
2777: LD_ADDR_VAR 0 2
2781: PUSH
2782: LD_VAR 0 3
2786: PUSH
2787: FOR_IN
2788: IFFALSE 2852
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2790: LD_EXP 47
2794: PPUSH
2795: LD_INT 25
2797: PUSH
2798: LD_INT 2
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PPUSH
2805: CALL_OW 72
2809: PPUSH
2810: LD_VAR 0 2
2814: PUSH
2815: LD_INT 1
2817: ARRAY
2818: PPUSH
2819: LD_VAR 0 2
2823: PUSH
2824: LD_INT 2
2826: ARRAY
2827: PPUSH
2828: LD_VAR 0 2
2832: PUSH
2833: LD_INT 3
2835: ARRAY
2836: PPUSH
2837: LD_VAR 0 2
2841: PUSH
2842: LD_INT 4
2844: ARRAY
2845: PPUSH
2846: CALL_OW 205
2850: GO 2787
2852: POP
2853: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
2854: LD_EXP 47
2858: PUSH
2859: LD_INT 2
2861: ARRAY
2862: PPUSH
2863: LD_INT 63
2865: PPUSH
2866: LD_INT 42
2868: PPUSH
2869: CALL_OW 428
2873: PPUSH
2874: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
2878: LD_EXP 47
2882: PUSH
2883: LD_INT 3
2885: ARRAY
2886: PPUSH
2887: LD_INT 94
2889: PPUSH
2890: LD_INT 63
2892: PPUSH
2893: CALL_OW 428
2897: PPUSH
2898: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2902: LD_INT 35
2904: PPUSH
2905: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
2909: LD_EXP 47
2913: PPUSH
2914: LD_INT 25
2916: PUSH
2917: LD_INT 2
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: PUSH
2924: LD_INT 3
2926: PUSH
2927: LD_INT 60
2929: PUSH
2930: EMPTY
2931: LIST
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PPUSH
2941: CALL_OW 72
2945: IFFALSE 2902
// rolfScriptBase := true ;
2947: LD_ADDR_EXP 9
2951: PUSH
2952: LD_INT 1
2954: ST_TO_ADDR
// end ;
2955: LD_VAR 0 1
2959: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
2960: LD_EXP 9
2964: PUSH
2965: LD_EXP 43
2969: PPUSH
2970: CALL_OW 255
2974: PUSH
2975: LD_INT 8
2977: EQUAL
2978: AND
2979: IFFALSE 3986
2981: GO 2983
2983: DISABLE
2984: LD_INT 0
2986: PPUSH
2987: PPUSH
2988: PPUSH
2989: PPUSH
2990: PPUSH
2991: PPUSH
2992: PPUSH
2993: PPUSH
2994: PPUSH
2995: PPUSH
// begin enable ;
2996: ENABLE
// if not rolfSquad then
2997: LD_EXP 47
3001: NOT
3002: IFFALSE 3006
// exit ;
3004: GO 3986
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
3006: LD_ADDR_VAR 0 9
3010: PUSH
3011: LD_INT 12
3013: PPUSH
3014: LD_INT 81
3016: PUSH
3017: LD_INT 8
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: PPUSH
3024: CALL_OW 70
3028: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
3029: LD_ADDR_VAR 0 5
3033: PUSH
3034: LD_EXP 47
3038: PPUSH
3039: LD_INT 25
3041: PUSH
3042: LD_INT 1
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 72
3053: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
3054: LD_ADDR_VAR 0 6
3058: PUSH
3059: LD_EXP 47
3063: PPUSH
3064: LD_INT 25
3066: PUSH
3067: LD_INT 2
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: PPUSH
3074: CALL_OW 72
3078: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
3079: LD_ADDR_VAR 0 8
3083: PUSH
3084: LD_EXP 47
3088: PPUSH
3089: LD_INT 25
3091: PUSH
3092: LD_INT 3
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PPUSH
3099: CALL_OW 72
3103: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
3104: LD_ADDR_VAR 0 7
3108: PUSH
3109: LD_EXP 47
3113: PPUSH
3114: LD_INT 25
3116: PUSH
3117: LD_INT 4
3119: PUSH
3120: EMPTY
3121: LIST
3122: LIST
3123: PPUSH
3124: CALL_OW 72
3128: ST_TO_ADDR
// if sol then
3129: LD_VAR 0 5
3133: IFFALSE 3431
// for i in sol union Rolf do
3135: LD_ADDR_VAR 0 1
3139: PUSH
3140: LD_VAR 0 5
3144: PUSH
3145: LD_EXP 43
3149: UNION
3150: PUSH
3151: FOR_IN
3152: IFFALSE 3429
// if not IsInUnit ( i ) and not HasTask ( i ) then
3154: LD_VAR 0 1
3158: PPUSH
3159: CALL_OW 310
3163: NOT
3164: PUSH
3165: LD_VAR 0 1
3169: PPUSH
3170: CALL_OW 314
3174: NOT
3175: AND
3176: IFFALSE 3427
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
3178: LD_VAR 0 1
3182: PPUSH
3183: CALL_OW 256
3187: PUSH
3188: LD_INT 500
3190: LESS
3191: PUSH
3192: LD_VAR 0 1
3196: PPUSH
3197: LD_INT 80
3199: PPUSH
3200: LD_INT 49
3202: PPUSH
3203: CALL_OW 297
3207: PUSH
3208: LD_INT 6
3210: GREATER
3211: AND
3212: IFFALSE 3231
// begin ComMoveXY ( i , 80 , 49 ) ;
3214: LD_VAR 0 1
3218: PPUSH
3219: LD_INT 80
3221: PPUSH
3222: LD_INT 49
3224: PPUSH
3225: CALL_OW 111
// continue ;
3229: GO 3151
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
3231: LD_ADDR_VAR 0 4
3235: PUSH
3236: LD_INT 22
3238: PUSH
3239: LD_INT 8
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: PUSH
3246: LD_INT 50
3248: PUSH
3249: EMPTY
3250: LIST
3251: PUSH
3252: LD_INT 2
3254: PUSH
3255: LD_INT 30
3257: PUSH
3258: LD_INT 4
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: PUSH
3265: LD_INT 30
3267: PUSH
3268: LD_INT 5
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PUSH
3275: LD_INT 30
3277: PUSH
3278: LD_INT 32
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PUSH
3285: LD_INT 30
3287: PUSH
3288: LD_INT 31
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: LIST
3306: PPUSH
3307: CALL_OW 69
3311: ST_TO_ADDR
// if tmp then
3312: LD_VAR 0 4
3316: IFFALSE 3427
// begin for b in tmp do
3318: LD_ADDR_VAR 0 2
3322: PUSH
3323: LD_VAR 0 4
3327: PUSH
3328: FOR_IN
3329: IFFALSE 3425
// begin case GetBType ( b ) of b_armoury , b_barracks :
3331: LD_VAR 0 2
3335: PPUSH
3336: CALL_OW 266
3340: PUSH
3341: LD_INT 4
3343: DOUBLE
3344: EQUAL
3345: IFTRUE 3355
3347: LD_INT 5
3349: DOUBLE
3350: EQUAL
3351: IFTRUE 3355
3353: GO 3366
3355: POP
// p := 6 ; b_breastwork , b_bunker :
3356: LD_ADDR_VAR 0 3
3360: PUSH
3361: LD_INT 6
3363: ST_TO_ADDR
3364: GO 3392
3366: LD_INT 31
3368: DOUBLE
3369: EQUAL
3370: IFTRUE 3380
3372: LD_INT 32
3374: DOUBLE
3375: EQUAL
3376: IFTRUE 3380
3378: GO 3391
3380: POP
// p := 1 ; end ;
3381: LD_ADDR_VAR 0 3
3385: PUSH
3386: LD_INT 1
3388: ST_TO_ADDR
3389: GO 3392
3391: POP
// if UnitsInside ( b ) < p then
3392: LD_VAR 0 2
3396: PPUSH
3397: CALL_OW 313
3401: PUSH
3402: LD_VAR 0 3
3406: LESS
3407: IFFALSE 3423
// ComEnterUnit ( i , b ) ;
3409: LD_VAR 0 1
3413: PPUSH
3414: LD_VAR 0 2
3418: PPUSH
3419: CALL_OW 120
// end ;
3423: GO 3328
3425: POP
3426: POP
// end ; end ;
3427: GO 3151
3429: POP
3430: POP
// if sci then
3431: LD_VAR 0 7
3435: IFFALSE 3490
// for i in sci do
3437: LD_ADDR_VAR 0 1
3441: PUSH
3442: LD_VAR 0 7
3446: PUSH
3447: FOR_IN
3448: IFFALSE 3488
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
3450: LD_VAR 0 1
3454: PPUSH
3455: LD_INT 80
3457: PPUSH
3458: LD_INT 49
3460: PPUSH
3461: CALL_OW 297
3465: PUSH
3466: LD_INT 9
3468: GREATER
3469: IFFALSE 3486
// ComMoveXY ( i , 80 , 49 ) ;
3471: LD_VAR 0 1
3475: PPUSH
3476: LD_INT 80
3478: PPUSH
3479: LD_INT 49
3481: PPUSH
3482: CALL_OW 111
// end ;
3486: GO 3447
3488: POP
3489: POP
// if mech then
3490: LD_VAR 0 8
3494: IFFALSE 3708
// for i in mech do
3496: LD_ADDR_VAR 0 1
3500: PUSH
3501: LD_VAR 0 8
3505: PUSH
3506: FOR_IN
3507: IFFALSE 3706
// begin hasVehicle := IsInUnit ( i ) ;
3509: LD_ADDR_VAR 0 10
3513: PUSH
3514: LD_VAR 0 1
3518: PPUSH
3519: CALL_OW 310
3523: ST_TO_ADDR
// if enemyInBase then
3524: LD_VAR 0 9
3528: IFFALSE 3624
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
3530: LD_VAR 0 10
3534: PUSH
3535: LD_VAR 0 10
3539: PPUSH
3540: CALL_OW 256
3544: PUSH
3545: LD_INT 500
3547: GREATER
3548: AND
3549: IFFALSE 3577
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
3551: LD_VAR 0 10
3555: PPUSH
3556: LD_VAR 0 9
3560: PPUSH
3561: LD_VAR 0 10
3565: PPUSH
3566: CALL_OW 74
3570: PPUSH
3571: CALL_OW 115
3575: GO 3622
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
3577: LD_VAR 0 10
3581: PPUSH
3582: LD_INT 86
3584: PPUSH
3585: LD_INT 49
3587: PPUSH
3588: CALL_OW 297
3592: PUSH
3593: LD_INT 8
3595: GREATER
3596: IFFALSE 3622
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
3598: LD_VAR 0 10
3602: PPUSH
3603: LD_INT 86
3605: PPUSH
3606: LD_INT 49
3608: PPUSH
3609: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
3613: LD_VAR 0 1
3617: PPUSH
3618: CALL 63790 0 1
// end end else
3622: GO 3704
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
3624: LD_VAR 0 1
3628: PPUSH
3629: LD_INT 86
3631: PPUSH
3632: LD_INT 49
3634: PPUSH
3635: CALL_OW 297
3639: PUSH
3640: LD_INT 8
3642: GREATER
3643: IFFALSE 3662
// ComMoveXY ( i , 86 , 49 ) else
3645: LD_VAR 0 1
3649: PPUSH
3650: LD_INT 86
3652: PPUSH
3653: LD_INT 49
3655: PPUSH
3656: CALL_OW 111
3660: GO 3704
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
3662: LD_VAR 0 10
3666: PUSH
3667: LD_VAR 0 10
3671: PPUSH
3672: CALL_OW 256
3676: PUSH
3677: LD_INT 1000
3679: LESS
3680: AND
3681: IFFALSE 3704
// begin SetFuel ( hasVehicle , 100 ) ;
3683: LD_VAR 0 10
3687: PPUSH
3688: LD_INT 100
3690: PPUSH
3691: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
3695: LD_VAR 0 1
3699: PPUSH
3700: CALL 63670 0 1
// end ; end ; end ;
3704: GO 3506
3706: POP
3707: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3708: LD_ADDR_VAR 0 4
3712: PUSH
3713: LD_INT 12
3715: PPUSH
3716: LD_INT 3
3718: PUSH
3719: LD_INT 24
3721: PUSH
3722: LD_INT 1000
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: PUSH
3729: EMPTY
3730: LIST
3731: LIST
3732: PUSH
3733: LD_INT 21
3735: PUSH
3736: LD_INT 3
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PUSH
3743: EMPTY
3744: LIST
3745: LIST
3746: PPUSH
3747: CALL_OW 70
3751: ST_TO_ADDR
// if tmp and eng then
3752: LD_VAR 0 4
3756: PUSH
3757: LD_VAR 0 6
3761: AND
3762: IFFALSE 3868
// begin for i in eng do
3764: LD_ADDR_VAR 0 1
3768: PUSH
3769: LD_VAR 0 6
3773: PUSH
3774: FOR_IN
3775: IFFALSE 3866
// if IsInUnit ( i ) then
3777: LD_VAR 0 1
3781: PPUSH
3782: CALL_OW 310
3786: IFFALSE 3799
// ComExitBuilding ( i ) else
3788: LD_VAR 0 1
3792: PPUSH
3793: CALL_OW 122
3797: GO 3864
// if GetLives ( i ) = 1000 then
3799: LD_VAR 0 1
3803: PPUSH
3804: CALL_OW 256
3808: PUSH
3809: LD_INT 1000
3811: EQUAL
3812: IFFALSE 3834
// ComRepairBuilding ( i , tmp [ 1 ] ) else
3814: LD_VAR 0 1
3818: PPUSH
3819: LD_VAR 0 4
3823: PUSH
3824: LD_INT 1
3826: ARRAY
3827: PPUSH
3828: CALL_OW 130
3832: GO 3864
// if GetLives ( i ) < 700 then
3834: LD_VAR 0 1
3838: PPUSH
3839: CALL_OW 256
3843: PUSH
3844: LD_INT 700
3846: LESS
3847: IFFALSE 3864
// ComMoveXY ( i , 80 , 49 ) ;
3849: LD_VAR 0 1
3853: PPUSH
3854: LD_INT 80
3856: PPUSH
3857: LD_INT 49
3859: PPUSH
3860: CALL_OW 111
3864: GO 3774
3866: POP
3867: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
3868: LD_VAR 0 4
3872: NOT
3873: PUSH
3874: LD_VAR 0 6
3878: PPUSH
3879: LD_INT 3
3881: PUSH
3882: LD_INT 54
3884: PUSH
3885: EMPTY
3886: LIST
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: PPUSH
3892: CALL_OW 72
3896: AND
3897: IFFALSE 3986
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
3899: LD_ADDR_VAR 0 1
3903: PUSH
3904: LD_VAR 0 6
3908: PPUSH
3909: LD_INT 3
3911: PUSH
3912: LD_INT 54
3914: PUSH
3915: EMPTY
3916: LIST
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PPUSH
3922: CALL_OW 72
3926: PUSH
3927: FOR_IN
3928: IFFALSE 3984
// if GetLives ( i ) < 1000 then
3930: LD_VAR 0 1
3934: PPUSH
3935: CALL_OW 256
3939: PUSH
3940: LD_INT 1000
3942: LESS
3943: IFFALSE 3962
// ComMoveXY ( i , 80 , 49 ) else
3945: LD_VAR 0 1
3949: PPUSH
3950: LD_INT 80
3952: PPUSH
3953: LD_INT 49
3955: PPUSH
3956: CALL_OW 111
3960: GO 3982
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
3962: LD_VAR 0 1
3966: PPUSH
3967: LD_INT 86
3969: PPUSH
3970: LD_INT 54
3972: PPUSH
3973: CALL_OW 428
3977: PPUSH
3978: CALL_OW 120
3982: GO 3927
3984: POP
3985: POP
// end ;
3986: PPOPN 10
3988: END
// export function PrepareOmarSquad ; var i , j , p ; begin
3989: LD_INT 0
3991: PPUSH
3992: PPUSH
3993: PPUSH
3994: PPUSH
// uc_side := 5 ;
3995: LD_ADDR_OWVAR 20
3999: PUSH
4000: LD_INT 5
4002: ST_TO_ADDR
// uc_nation := 2 ;
4003: LD_ADDR_OWVAR 21
4007: PUSH
4008: LD_INT 2
4010: ST_TO_ADDR
// omarSquad := [ ] ;
4011: LD_ADDR_EXP 48
4015: PUSH
4016: EMPTY
4017: ST_TO_ADDR
// for i := 1 to 4 do
4018: LD_ADDR_VAR 0 2
4022: PUSH
4023: DOUBLE
4024: LD_INT 1
4026: DEC
4027: ST_TO_ADDR
4028: LD_INT 4
4030: PUSH
4031: FOR_TO
4032: IFFALSE 4155
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
4034: LD_ADDR_VAR 0 3
4038: PUSH
4039: DOUBLE
4040: LD_INT 1
4042: DEC
4043: ST_TO_ADDR
4044: LD_INT 6
4046: PUSH
4047: LD_INT 2
4049: PUSH
4050: LD_INT 2
4052: PUSH
4053: LD_EXP 21
4057: PLUS
4058: PUSH
4059: LD_INT 2
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: PUSH
4068: LD_VAR 0 2
4072: ARRAY
4073: PUSH
4074: FOR_TO
4075: IFFALSE 4151
// begin PrepareHuman ( false , i , 5 ) ;
4077: LD_INT 0
4079: PPUSH
4080: LD_VAR 0 2
4084: PPUSH
4085: LD_INT 5
4087: PPUSH
4088: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
4092: LD_ADDR_EXP 48
4096: PUSH
4097: LD_EXP 48
4101: PPUSH
4102: CALL_OW 44
4106: PPUSH
4107: CALL 61978 0 2
4111: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
4112: LD_VAR 0 2
4116: PUSH
4117: LD_INT 1
4119: EQUAL
4120: PUSH
4121: LD_INT 50
4123: PPUSH
4124: CALL_OW 13
4128: AND
4129: IFFALSE 4149
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
4131: LD_EXP 48
4135: PUSH
4136: LD_EXP 48
4140: ARRAY
4141: PPUSH
4142: LD_INT 8
4144: PPUSH
4145: CALL_OW 336
// end ;
4149: GO 4074
4151: POP
4152: POP
// end ;
4153: GO 4031
4155: POP
4156: POP
// if HexInfo ( 340 , 205 ) then
4157: LD_INT 340
4159: PPUSH
4160: LD_INT 205
4162: PPUSH
4163: CALL_OW 428
4167: IFFALSE 4184
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
4169: LD_INT 340
4171: PPUSH
4172: LD_INT 205
4174: PPUSH
4175: CALL_OW 428
4179: PPUSH
4180: CALL_OW 64
// p := 0 ;
4184: LD_ADDR_VAR 0 4
4188: PUSH
4189: LD_INT 0
4191: ST_TO_ADDR
// for i in omarSquad do
4192: LD_ADDR_VAR 0 2
4196: PUSH
4197: LD_EXP 48
4201: PUSH
4202: FOR_IN
4203: IFFALSE 4404
// begin uc_direction := 4 ;
4205: LD_ADDR_OWVAR 24
4209: PUSH
4210: LD_INT 4
4212: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
4213: LD_VAR 0 2
4217: PPUSH
4218: CALL_OW 257
4222: PUSH
4223: LD_INT 3
4225: EQUAL
4226: PUSH
4227: LD_VAR 0 4
4231: PUSH
4232: LD_INT 2
4234: LESS
4235: AND
4236: IFFALSE 4365
// begin p := p + 1 ;
4238: LD_ADDR_VAR 0 4
4242: PUSH
4243: LD_VAR 0 4
4247: PUSH
4248: LD_INT 1
4250: PLUS
4251: ST_TO_ADDR
// uc_side := 5 ;
4252: LD_ADDR_OWVAR 20
4256: PUSH
4257: LD_INT 5
4259: ST_TO_ADDR
// if rand ( 0 , 1 ) then
4260: LD_INT 0
4262: PPUSH
4263: LD_INT 1
4265: PPUSH
4266: CALL_OW 12
4270: IFFALSE 4301
// begin uc_nation := 2 ;
4272: LD_ADDR_OWVAR 21
4276: PUSH
4277: LD_INT 2
4279: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
4280: LD_INT 13
4282: PPUSH
4283: LD_INT 1
4285: PPUSH
4286: LD_INT 1
4288: PPUSH
4289: LD_INT 27
4291: PPUSH
4292: LD_INT 88
4294: PPUSH
4295: CALL 30161 0 5
// end else
4299: GO 4328
// begin uc_nation := 3 ;
4301: LD_ADDR_OWVAR 21
4305: PUSH
4306: LD_INT 3
4308: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
4309: LD_INT 22
4311: PPUSH
4312: LD_INT 1
4314: PPUSH
4315: LD_INT 1
4317: PPUSH
4318: LD_INT 45
4320: PPUSH
4321: LD_INT 88
4323: PPUSH
4324: CALL 30161 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
4328: CALL_OW 45
4332: PPUSH
4333: LD_INT 13
4335: PPUSH
4336: LD_INT 0
4338: PPUSH
4339: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
4343: LD_VAR 0 2
4347: PPUSH
4348: LD_INT 340
4350: PPUSH
4351: LD_INT 205
4353: PPUSH
4354: CALL_OW 428
4358: PPUSH
4359: CALL_OW 52
// end else
4363: GO 4380
// PlaceUnitArea ( i , southSpawn , false ) ;
4365: LD_VAR 0 2
4369: PPUSH
4370: LD_INT 13
4372: PPUSH
4373: LD_INT 0
4375: PPUSH
4376: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
4380: LD_VAR 0 2
4384: PPUSH
4385: LD_INT 333
4387: PPUSH
4388: LD_INT 210
4390: PPUSH
4391: CALL_OW 111
// wait ( 0 0$2 ) ;
4395: LD_INT 70
4397: PPUSH
4398: CALL_OW 67
// end ;
4402: GO 4202
4404: POP
4405: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
4406: LD_EXP 40
4410: PPUSH
4411: LD_INT 340
4413: PPUSH
4414: LD_INT 205
4416: PPUSH
4417: LD_INT 0
4419: PPUSH
4420: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
4424: LD_EXP 40
4428: PPUSH
4429: LD_INT 333
4431: PPUSH
4432: LD_INT 206
4434: PPUSH
4435: CALL_OW 111
// wait ( 0 0$2 ) ;
4439: LD_INT 70
4441: PPUSH
4442: CALL_OW 67
// ComHold ( omarSquad ) ;
4446: LD_EXP 48
4450: PPUSH
4451: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
4455: LD_EXP 40
4459: PUSH
4460: LD_EXP 48
4464: PPUSH
4465: LD_INT 2
4467: PUSH
4468: LD_INT 25
4470: PUSH
4471: LD_INT 1
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: PUSH
4478: LD_INT 25
4480: PUSH
4481: LD_INT 8
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: LIST
4492: PPUSH
4493: CALL_OW 72
4497: UNION
4498: PUSH
4499: LD_INT 22
4501: PUSH
4502: LD_INT 5
4504: PUSH
4505: EMPTY
4506: LIST
4507: LIST
4508: PUSH
4509: LD_INT 21
4511: PUSH
4512: LD_INT 2
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PPUSH
4523: CALL_OW 69
4527: UNION
4528: PPUSH
4529: LD_INT 315
4531: PPUSH
4532: LD_INT 214
4534: PPUSH
4535: CALL_OW 114
// wait ( 0 0$22 ) ;
4539: LD_INT 770
4541: PPUSH
4542: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
4546: LD_EXP 48
4550: PUSH
4551: LD_EXP 40
4555: UNION
4556: PPUSH
4557: LD_INT 329
4559: PPUSH
4560: LD_INT 231
4562: PPUSH
4563: CALL_OW 114
// end ;
4567: LD_VAR 0 1
4571: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
4572: LD_EXP 10
4576: IFFALSE 5659
4578: GO 4580
4580: DISABLE
4581: LD_INT 0
4583: PPUSH
4584: PPUSH
4585: PPUSH
4586: PPUSH
4587: PPUSH
4588: PPUSH
4589: PPUSH
4590: PPUSH
4591: PPUSH
4592: PPUSH
4593: PPUSH
// begin enable ;
4594: ENABLE
// if not omarSquad then
4595: LD_EXP 48
4599: NOT
4600: IFFALSE 4604
// exit ;
4602: GO 5659
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
4604: LD_ADDR_VAR 0 10
4608: PUSH
4609: LD_INT 14
4611: PPUSH
4612: LD_INT 81
4614: PUSH
4615: LD_INT 5
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PPUSH
4622: CALL_OW 70
4626: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
4627: LD_ADDR_VAR 0 6
4631: PUSH
4632: LD_EXP 48
4636: PPUSH
4637: LD_INT 2
4639: PUSH
4640: LD_INT 25
4642: PUSH
4643: LD_INT 1
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: PUSH
4650: LD_INT 25
4652: PUSH
4653: LD_INT 8
4655: PUSH
4656: EMPTY
4657: LIST
4658: LIST
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: LIST
4664: PPUSH
4665: CALL_OW 72
4669: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
4670: LD_ADDR_VAR 0 7
4674: PUSH
4675: LD_EXP 48
4679: PPUSH
4680: LD_INT 25
4682: PUSH
4683: LD_INT 2
4685: PUSH
4686: EMPTY
4687: LIST
4688: LIST
4689: PPUSH
4690: CALL_OW 72
4694: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
4695: LD_ADDR_VAR 0 9
4699: PUSH
4700: LD_EXP 48
4704: PPUSH
4705: LD_INT 25
4707: PUSH
4708: LD_INT 3
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: PPUSH
4715: CALL_OW 72
4719: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
4720: LD_ADDR_VAR 0 8
4724: PUSH
4725: LD_EXP 48
4729: PPUSH
4730: LD_INT 25
4732: PUSH
4733: LD_INT 4
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PPUSH
4740: CALL_OW 72
4744: ST_TO_ADDR
// if sol then
4745: LD_VAR 0 6
4749: IFFALSE 5113
// for i in sol do
4751: LD_ADDR_VAR 0 1
4755: PUSH
4756: LD_VAR 0 6
4760: PUSH
4761: FOR_IN
4762: IFFALSE 5111
// if not HasTask ( i ) then
4764: LD_VAR 0 1
4768: PPUSH
4769: CALL_OW 314
4773: NOT
4774: IFFALSE 5109
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
4776: LD_VAR 0 1
4780: PPUSH
4781: CALL_OW 310
4785: NOT
4786: PUSH
4787: LD_VAR 0 1
4791: PPUSH
4792: CALL_OW 256
4796: PUSH
4797: LD_INT 500
4799: LESS
4800: AND
4801: PUSH
4802: LD_VAR 0 1
4806: PPUSH
4807: LD_INT 333
4809: PPUSH
4810: LD_INT 234
4812: PPUSH
4813: CALL_OW 297
4817: PUSH
4818: LD_INT 6
4820: GREATER
4821: AND
4822: IFFALSE 4841
// begin ComMoveXY ( i , 333 , 234 ) ;
4824: LD_VAR 0 1
4828: PPUSH
4829: LD_INT 333
4831: PPUSH
4832: LD_INT 234
4834: PPUSH
4835: CALL_OW 111
// continue ;
4839: GO 4761
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4841: LD_ADDR_VAR 0 5
4845: PUSH
4846: LD_INT 22
4848: PUSH
4849: LD_INT 5
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PUSH
4856: LD_INT 58
4858: PUSH
4859: EMPTY
4860: LIST
4861: PUSH
4862: LD_INT 50
4864: PUSH
4865: EMPTY
4866: LIST
4867: PUSH
4868: LD_INT 2
4870: PUSH
4871: LD_INT 30
4873: PUSH
4874: LD_INT 32
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: LD_INT 30
4883: PUSH
4884: LD_INT 31
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: LIST
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: PPUSH
4902: CALL_OW 69
4906: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
4907: LD_VAR 0 5
4911: PUSH
4912: LD_VAR 0 1
4916: PPUSH
4917: CALL_OW 310
4921: PPUSH
4922: CALL_OW 266
4926: PUSH
4927: LD_INT 31
4929: NONEQUAL
4930: AND
4931: IFFALSE 5013
// begin for j in tmp do
4933: LD_ADDR_VAR 0 2
4937: PUSH
4938: LD_VAR 0 5
4942: PUSH
4943: FOR_IN
4944: IFFALSE 5009
// if GetTag ( j ) <> 1 then
4946: LD_VAR 0 2
4950: PPUSH
4951: CALL_OW 110
4955: PUSH
4956: LD_INT 1
4958: NONEQUAL
4959: IFFALSE 5007
// begin SetTag ( j , 1 ) ;
4961: LD_VAR 0 2
4965: PPUSH
4966: LD_INT 1
4968: PPUSH
4969: CALL_OW 109
// if IsInUnit ( i ) then
4973: LD_VAR 0 1
4977: PPUSH
4978: CALL_OW 310
4982: IFFALSE 4993
// ComExit ( i ) ;
4984: LD_VAR 0 1
4988: PPUSH
4989: CALL 62366 0 1
// AddComEnterUnit ( i , j ) ;
4993: LD_VAR 0 1
4997: PPUSH
4998: LD_VAR 0 2
5002: PPUSH
5003: CALL_OW 180
// end ;
5007: GO 4943
5009: POP
5010: POP
// end else
5011: GO 5109
// if not IsInUnit ( i ) then
5013: LD_VAR 0 1
5017: PPUSH
5018: CALL_OW 310
5022: NOT
5023: IFFALSE 5109
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
5025: LD_ADDR_VAR 0 5
5029: PUSH
5030: LD_INT 22
5032: PUSH
5033: LD_INT 5
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PUSH
5040: LD_INT 50
5042: PUSH
5043: EMPTY
5044: LIST
5045: PUSH
5046: LD_INT 30
5048: PUSH
5049: LD_INT 4
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: LIST
5060: PPUSH
5061: CALL_OW 69
5065: ST_TO_ADDR
// if tmp then
5066: LD_VAR 0 5
5070: IFFALSE 5109
// if UnitsInside ( tmp [ 1 ] ) < 6 then
5072: LD_VAR 0 5
5076: PUSH
5077: LD_INT 1
5079: ARRAY
5080: PPUSH
5081: CALL_OW 313
5085: PUSH
5086: LD_INT 6
5088: LESS
5089: IFFALSE 5109
// ComEnterUnit ( i , tmp [ 1 ] ) ;
5091: LD_VAR 0 1
5095: PPUSH
5096: LD_VAR 0 5
5100: PUSH
5101: LD_INT 1
5103: ARRAY
5104: PPUSH
5105: CALL_OW 120
// end ; end ;
5109: GO 4761
5111: POP
5112: POP
// if sci then
5113: LD_VAR 0 8
5117: IFFALSE 5172
// for i in sci do
5119: LD_ADDR_VAR 0 1
5123: PUSH
5124: LD_VAR 0 8
5128: PUSH
5129: FOR_IN
5130: IFFALSE 5170
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
5132: LD_VAR 0 1
5136: PPUSH
5137: LD_INT 333
5139: PPUSH
5140: LD_INT 234
5142: PPUSH
5143: CALL_OW 297
5147: PUSH
5148: LD_INT 9
5150: GREATER
5151: IFFALSE 5168
// ComMoveXY ( i , 333 , 234 ) ;
5153: LD_VAR 0 1
5157: PPUSH
5158: LD_INT 333
5160: PPUSH
5161: LD_INT 234
5163: PPUSH
5164: CALL_OW 111
// end ;
5168: GO 5129
5170: POP
5171: POP
// if mech then
5172: LD_VAR 0 9
5176: IFFALSE 5381
// for i in mech do
5178: LD_ADDR_VAR 0 1
5182: PUSH
5183: LD_VAR 0 9
5187: PUSH
5188: FOR_IN
5189: IFFALSE 5379
// begin hasVehicle := IsInUnit ( i ) ;
5191: LD_ADDR_VAR 0 11
5195: PUSH
5196: LD_VAR 0 1
5200: PPUSH
5201: CALL_OW 310
5205: ST_TO_ADDR
// if enemyInBase then
5206: LD_VAR 0 10
5210: IFFALSE 5297
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
5212: LD_VAR 0 11
5216: PUSH
5217: LD_VAR 0 11
5221: PPUSH
5222: CALL_OW 256
5226: PUSH
5227: LD_INT 500
5229: GREATER
5230: AND
5231: IFFALSE 5259
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
5233: LD_VAR 0 11
5237: PPUSH
5238: LD_VAR 0 10
5242: PPUSH
5243: LD_VAR 0 11
5247: PPUSH
5248: CALL_OW 74
5252: PPUSH
5253: CALL_OW 115
5257: GO 5295
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
5259: LD_VAR 0 11
5263: PPUSH
5264: LD_INT 333
5266: PPUSH
5267: LD_INT 234
5269: PPUSH
5270: CALL_OW 297
5274: PUSH
5275: LD_INT 6
5277: GREATER
5278: IFFALSE 5295
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
5280: LD_VAR 0 11
5284: PPUSH
5285: LD_INT 333
5287: PPUSH
5288: LD_INT 234
5290: PPUSH
5291: CALL_OW 111
// end else
5295: GO 5377
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
5297: LD_VAR 0 1
5301: PPUSH
5302: LD_INT 333
5304: PPUSH
5305: LD_INT 234
5307: PPUSH
5308: CALL_OW 297
5312: PUSH
5313: LD_INT 6
5315: GREATER
5316: IFFALSE 5335
// ComMoveXY ( i , 333 , 234 ) else
5318: LD_VAR 0 1
5322: PPUSH
5323: LD_INT 333
5325: PPUSH
5326: LD_INT 234
5328: PPUSH
5329: CALL_OW 111
5333: GO 5377
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
5335: LD_VAR 0 11
5339: PUSH
5340: LD_VAR 0 11
5344: PPUSH
5345: CALL_OW 256
5349: PUSH
5350: LD_INT 1000
5352: LESS
5353: AND
5354: IFFALSE 5377
// begin SetFuel ( hasVehicle , 100 ) ;
5356: LD_VAR 0 11
5360: PPUSH
5361: LD_INT 100
5363: PPUSH
5364: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
5368: LD_VAR 0 1
5372: PPUSH
5373: CALL 63670 0 1
// end ; end ; end ;
5377: GO 5188
5379: POP
5380: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
5381: LD_ADDR_VAR 0 5
5385: PUSH
5386: LD_INT 14
5388: PPUSH
5389: LD_INT 3
5391: PUSH
5392: LD_INT 24
5394: PUSH
5395: LD_INT 1000
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PUSH
5406: LD_INT 21
5408: PUSH
5409: LD_INT 3
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: PPUSH
5420: CALL_OW 70
5424: ST_TO_ADDR
// if tmp and eng then
5425: LD_VAR 0 5
5429: PUSH
5430: LD_VAR 0 7
5434: AND
5435: IFFALSE 5541
// begin for i in eng do
5437: LD_ADDR_VAR 0 1
5441: PUSH
5442: LD_VAR 0 7
5446: PUSH
5447: FOR_IN
5448: IFFALSE 5539
// if IsInUnit ( i ) then
5450: LD_VAR 0 1
5454: PPUSH
5455: CALL_OW 310
5459: IFFALSE 5472
// ComExitBuilding ( i ) else
5461: LD_VAR 0 1
5465: PPUSH
5466: CALL_OW 122
5470: GO 5537
// if GetLives ( i ) = 1000 then
5472: LD_VAR 0 1
5476: PPUSH
5477: CALL_OW 256
5481: PUSH
5482: LD_INT 1000
5484: EQUAL
5485: IFFALSE 5507
// ComRepairBuilding ( i , tmp [ 1 ] ) else
5487: LD_VAR 0 1
5491: PPUSH
5492: LD_VAR 0 5
5496: PUSH
5497: LD_INT 1
5499: ARRAY
5500: PPUSH
5501: CALL_OW 130
5505: GO 5537
// if GetLives ( i ) < 700 then
5507: LD_VAR 0 1
5511: PPUSH
5512: CALL_OW 256
5516: PUSH
5517: LD_INT 700
5519: LESS
5520: IFFALSE 5537
// ComMoveXY ( i , 333 , 234 ) ;
5522: LD_VAR 0 1
5526: PPUSH
5527: LD_INT 333
5529: PPUSH
5530: LD_INT 234
5532: PPUSH
5533: CALL_OW 111
5537: GO 5447
5539: POP
5540: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
5541: LD_VAR 0 5
5545: NOT
5546: PUSH
5547: LD_VAR 0 7
5551: PPUSH
5552: LD_INT 3
5554: PUSH
5555: LD_INT 54
5557: PUSH
5558: EMPTY
5559: LIST
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PPUSH
5565: CALL_OW 72
5569: AND
5570: IFFALSE 5659
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
5572: LD_ADDR_VAR 0 1
5576: PUSH
5577: LD_VAR 0 7
5581: PPUSH
5582: LD_INT 3
5584: PUSH
5585: LD_INT 54
5587: PUSH
5588: EMPTY
5589: LIST
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PPUSH
5595: CALL_OW 72
5599: PUSH
5600: FOR_IN
5601: IFFALSE 5657
// if GetLives ( i ) < 1000 then
5603: LD_VAR 0 1
5607: PPUSH
5608: CALL_OW 256
5612: PUSH
5613: LD_INT 1000
5615: LESS
5616: IFFALSE 5635
// ComMoveXY ( i , 333 , 234 ) else
5618: LD_VAR 0 1
5622: PPUSH
5623: LD_INT 333
5625: PPUSH
5626: LD_INT 234
5628: PPUSH
5629: CALL_OW 111
5633: GO 5655
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
5635: LD_VAR 0 1
5639: PPUSH
5640: LD_INT 341
5642: PPUSH
5643: LD_INT 232
5645: PPUSH
5646: CALL_OW 428
5650: PPUSH
5651: CALL_OW 120
5655: GO 5600
5657: POP
5658: POP
// end ;
5659: PPOPN 11
5661: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
5662: LD_EXP 40
5666: PPUSH
5667: CALL_OW 256
5671: PUSH
5672: LD_INT 1000
5674: LESS
5675: IFFALSE 5693
5677: GO 5679
5679: DISABLE
// begin enable ;
5680: ENABLE
// SetLives ( Omar , 1000 ) ;
5681: LD_EXP 40
5685: PPUSH
5686: LD_INT 1000
5688: PPUSH
5689: CALL_OW 234
// end ;
5693: END
// every 0 0$1 trigger omarAttack do var i , nearestPoint ;
5694: LD_EXP 23
5698: IFFALSE 6574
5700: GO 5702
5702: DISABLE
5703: LD_INT 0
5705: PPUSH
5706: PPUSH
// begin wait ( 0 0$25 ) ;
5707: LD_INT 875
5709: PPUSH
5710: CALL_OW 67
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
5714: LD_EXP 48
5718: PPUSH
5719: LD_INT 2
5721: PUSH
5722: LD_INT 25
5724: PUSH
5725: LD_INT 1
5727: PUSH
5728: EMPTY
5729: LIST
5730: LIST
5731: PUSH
5732: LD_INT 25
5734: PUSH
5735: LD_INT 8
5737: PUSH
5738: EMPTY
5739: LIST
5740: LIST
5741: PUSH
5742: EMPTY
5743: LIST
5744: LIST
5745: LIST
5746: PPUSH
5747: CALL_OW 72
5751: PPUSH
5752: CALL_OW 122
// wait ( 0 0$3 ) ;
5756: LD_INT 105
5758: PPUSH
5759: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , 225 , 223 ) ;
5763: LD_EXP 48
5767: PUSH
5768: LD_EXP 40
5772: UNION
5773: PPUSH
5774: LD_INT 225
5776: PPUSH
5777: LD_INT 223
5779: PPUSH
5780: CALL_OW 174
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_type , unit_vehicle ] ] ] ) , 167 , 231 ) ;
5784: LD_INT 22
5786: PUSH
5787: LD_INT 5
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: PUSH
5794: LD_INT 2
5796: PUSH
5797: LD_INT 25
5799: PUSH
5800: LD_INT 1
5802: PUSH
5803: EMPTY
5804: LIST
5805: LIST
5806: PUSH
5807: LD_INT 25
5809: PUSH
5810: LD_INT 8
5812: PUSH
5813: EMPTY
5814: LIST
5815: LIST
5816: PUSH
5817: LD_INT 21
5819: PUSH
5820: LD_INT 2
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: LIST
5831: LIST
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: PPUSH
5837: CALL_OW 69
5841: PPUSH
5842: LD_INT 167
5844: PPUSH
5845: LD_INT 231
5847: PPUSH
5848: CALL_OW 174
// AddComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 222 , 229 ) ;
5852: LD_EXP 48
5856: PPUSH
5857: LD_INT 25
5859: PUSH
5860: LD_INT 4
5862: PUSH
5863: EMPTY
5864: LIST
5865: LIST
5866: PPUSH
5867: CALL_OW 72
5871: PPUSH
5872: LD_INT 222
5874: PPUSH
5875: LD_INT 229
5877: PPUSH
5878: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5882: LD_INT 35
5884: PPUSH
5885: CALL_OW 67
// for i in omarSquad union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
5889: LD_ADDR_VAR 0 1
5893: PUSH
5894: LD_EXP 48
5898: PUSH
5899: LD_INT 22
5901: PUSH
5902: LD_INT 5
5904: PUSH
5905: EMPTY
5906: LIST
5907: LIST
5908: PUSH
5909: LD_INT 21
5911: PUSH
5912: LD_INT 2
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: PPUSH
5923: CALL_OW 69
5927: UNION
5928: PUSH
5929: FOR_IN
5930: IFFALSE 6565
// begin if IsDead ( i ) then
5932: LD_VAR 0 1
5936: PPUSH
5937: CALL_OW 301
5941: IFFALSE 5961
// begin omarSquad := omarSquad diff i ;
5943: LD_ADDR_EXP 48
5947: PUSH
5948: LD_EXP 48
5952: PUSH
5953: LD_VAR 0 1
5957: DIFF
5958: ST_TO_ADDR
// continue ;
5959: GO 5929
// end ; if GetClass ( i ) in [ 1 , 8 ] then
5961: LD_VAR 0 1
5965: PPUSH
5966: CALL_OW 257
5970: PUSH
5971: LD_INT 1
5973: PUSH
5974: LD_INT 8
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: IN
5981: IFFALSE 6175
// begin if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
5983: LD_VAR 0 1
5987: PPUSH
5988: CALL_OW 256
5992: PUSH
5993: LD_INT 700
5995: LESS
5996: PUSH
5997: LD_VAR 0 1
6001: PPUSH
6002: CALL_OW 110
6006: PUSH
6007: LD_INT 0
6009: EQUAL
6010: AND
6011: IFFALSE 6040
// begin SetTag ( i , 1 ) ;
6013: LD_VAR 0 1
6017: PPUSH
6018: LD_INT 1
6020: PPUSH
6021: CALL_OW 109
// ComMoveXY ( i , 222 , 229 ) ;
6025: LD_VAR 0 1
6029: PPUSH
6030: LD_INT 222
6032: PPUSH
6033: LD_INT 229
6035: PPUSH
6036: CALL_OW 111
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
6040: LD_VAR 0 1
6044: PPUSH
6045: CALL_OW 256
6049: PUSH
6050: LD_INT 1000
6052: EQUAL
6053: PUSH
6054: LD_VAR 0 1
6058: PPUSH
6059: CALL_OW 110
6063: PUSH
6064: LD_INT 1
6066: EQUAL
6067: AND
6068: IFFALSE 6082
// SetTag ( i , 0 ) ;
6070: LD_VAR 0 1
6074: PPUSH
6075: LD_INT 0
6077: PPUSH
6078: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and not HasTask ( i ) then
6082: LD_VAR 0 1
6086: PPUSH
6087: CALL_OW 110
6091: PUSH
6092: LD_INT 0
6094: EQUAL
6095: PUSH
6096: LD_VAR 0 1
6100: PPUSH
6101: CALL_OW 256
6105: PUSH
6106: LD_INT 700
6108: GREATEREQUAL
6109: AND
6110: PUSH
6111: LD_VAR 0 1
6115: PPUSH
6116: CALL_OW 314
6120: NOT
6121: AND
6122: IFFALSE 6175
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6124: LD_INT 18
6126: PPUSH
6127: LD_INT 22
6129: PUSH
6130: LD_INT 3
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: PPUSH
6137: CALL_OW 70
6141: IFFALSE 6160
// ComAgressiveMove ( i , 167 , 231 ) else
6143: LD_VAR 0 1
6147: PPUSH
6148: LD_INT 167
6150: PPUSH
6151: LD_INT 231
6153: PPUSH
6154: CALL_OW 114
6158: GO 6175
// ComAgressiveMove ( i , 106 , 153 ) ;
6160: LD_VAR 0 1
6164: PPUSH
6165: LD_INT 106
6167: PPUSH
6168: LD_INT 153
6170: PPUSH
6171: CALL_OW 114
// end ; if GetType ( i ) = unit_vehicle then
6175: LD_VAR 0 1
6179: PPUSH
6180: CALL_OW 247
6184: PUSH
6185: LD_INT 2
6187: EQUAL
6188: IFFALSE 6563
// begin nearestPoint := [ 219 , 219 ] ;
6190: LD_ADDR_VAR 0 2
6194: PUSH
6195: LD_INT 219
6197: PUSH
6198: LD_INT 219
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: ST_TO_ADDR
// if GetDistUnitXY ( i , 156 , 202 ) < GetDistUnitXY ( i , 219 , 219 ) then
6205: LD_VAR 0 1
6209: PPUSH
6210: LD_INT 156
6212: PPUSH
6213: LD_INT 202
6215: PPUSH
6216: CALL_OW 297
6220: PUSH
6221: LD_VAR 0 1
6225: PPUSH
6226: LD_INT 219
6228: PPUSH
6229: LD_INT 219
6231: PPUSH
6232: CALL_OW 297
6236: LESS
6237: IFFALSE 6254
// nearestPoint := [ 156 , 202 ] ;
6239: LD_ADDR_VAR 0 2
6243: PUSH
6244: LD_INT 156
6246: PUSH
6247: LD_INT 202
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: ST_TO_ADDR
// if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
6254: LD_VAR 0 1
6258: PPUSH
6259: CALL_OW 256
6263: PUSH
6264: LD_INT 700
6266: LESS
6267: PUSH
6268: LD_VAR 0 1
6272: PPUSH
6273: CALL_OW 110
6277: PUSH
6278: LD_INT 0
6280: EQUAL
6281: AND
6282: IFFALSE 6323
// begin SetTag ( i , 1 ) ;
6284: LD_VAR 0 1
6288: PPUSH
6289: LD_INT 1
6291: PPUSH
6292: CALL_OW 109
// ComMoveXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) ;
6296: LD_VAR 0 1
6300: PPUSH
6301: LD_VAR 0 2
6305: PUSH
6306: LD_INT 1
6308: ARRAY
6309: PPUSH
6310: LD_VAR 0 2
6314: PUSH
6315: LD_INT 2
6317: ARRAY
6318: PPUSH
6319: CALL_OW 111
// end ; if GetLives ( i ) < 700 and GetTag ( i ) = 1 and IsDrivenBy ( i ) and GetDistUnitXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) < 10 then
6323: LD_VAR 0 1
6327: PPUSH
6328: CALL_OW 256
6332: PUSH
6333: LD_INT 700
6335: LESS
6336: PUSH
6337: LD_VAR 0 1
6341: PPUSH
6342: CALL_OW 110
6346: PUSH
6347: LD_INT 1
6349: EQUAL
6350: AND
6351: PUSH
6352: LD_VAR 0 1
6356: PPUSH
6357: CALL_OW 311
6361: AND
6362: PUSH
6363: LD_VAR 0 1
6367: PPUSH
6368: LD_VAR 0 2
6372: PUSH
6373: LD_INT 1
6375: ARRAY
6376: PPUSH
6377: LD_VAR 0 2
6381: PUSH
6382: LD_INT 2
6384: ARRAY
6385: PPUSH
6386: CALL_OW 297
6390: PUSH
6391: LD_INT 10
6393: LESS
6394: AND
6395: IFFALSE 6406
// ComRepairVehicleAndReturn ( i ) ;
6397: LD_VAR 0 1
6401: PPUSH
6402: CALL 63670 0 1
// if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
6406: LD_VAR 0 1
6410: PPUSH
6411: CALL_OW 256
6415: PUSH
6416: LD_INT 1000
6418: EQUAL
6419: PUSH
6420: LD_VAR 0 1
6424: PPUSH
6425: CALL_OW 110
6429: PUSH
6430: LD_INT 1
6432: EQUAL
6433: AND
6434: PUSH
6435: LD_VAR 0 1
6439: PPUSH
6440: CALL_OW 311
6444: AND
6445: IFFALSE 6459
// SetTag ( i , 0 ) ;
6447: LD_VAR 0 1
6451: PPUSH
6452: LD_INT 0
6454: PPUSH
6455: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and IsDrivenBy ( i ) and not HasTask ( i ) then
6459: LD_VAR 0 1
6463: PPUSH
6464: CALL_OW 110
6468: PUSH
6469: LD_INT 0
6471: EQUAL
6472: PUSH
6473: LD_VAR 0 1
6477: PPUSH
6478: CALL_OW 256
6482: PUSH
6483: LD_INT 700
6485: GREATEREQUAL
6486: AND
6487: PUSH
6488: LD_VAR 0 1
6492: PPUSH
6493: CALL_OW 311
6497: AND
6498: PUSH
6499: LD_VAR 0 1
6503: PPUSH
6504: CALL_OW 314
6508: NOT
6509: AND
6510: IFFALSE 6563
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6512: LD_INT 18
6514: PPUSH
6515: LD_INT 22
6517: PUSH
6518: LD_INT 3
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: PPUSH
6525: CALL_OW 70
6529: IFFALSE 6548
// ComAgressiveMove ( i , 167 , 231 ) else
6531: LD_VAR 0 1
6535: PPUSH
6536: LD_INT 167
6538: PPUSH
6539: LD_INT 231
6541: PPUSH
6542: CALL_OW 114
6546: GO 6563
// ComAgressiveMove ( i , 106 , 153 ) ;
6548: LD_VAR 0 1
6552: PPUSH
6553: LD_INT 106
6555: PPUSH
6556: LD_INT 153
6558: PPUSH
6559: CALL_OW 114
// end ; end ;
6563: GO 5929
6565: POP
6566: POP
// until not omarSquad ;
6567: LD_EXP 48
6571: NOT
6572: IFFALSE 5882
// end ; end_of_file
6574: PPOPN 2
6576: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
6577: LD_INT 0
6579: PPUSH
// uc_side := side ;
6580: LD_ADDR_OWVAR 20
6584: PUSH
6585: LD_VAR 0 1
6589: ST_TO_ADDR
// uc_nation := nation ;
6590: LD_ADDR_OWVAR 21
6594: PUSH
6595: LD_VAR 0 2
6599: ST_TO_ADDR
// vc_chassis := chassis ;
6600: LD_ADDR_OWVAR 37
6604: PUSH
6605: LD_VAR 0 3
6609: ST_TO_ADDR
// vc_engine := engine ;
6610: LD_ADDR_OWVAR 39
6614: PUSH
6615: LD_VAR 0 4
6619: ST_TO_ADDR
// vc_control := control ;
6620: LD_ADDR_OWVAR 38
6624: PUSH
6625: LD_VAR 0 5
6629: ST_TO_ADDR
// vc_weapon := weapon ;
6630: LD_ADDR_OWVAR 40
6634: PUSH
6635: LD_VAR 0 6
6639: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6640: LD_ADDR_OWVAR 41
6644: PUSH
6645: LD_VAR 0 7
6649: ST_TO_ADDR
// result := CreateVehicle ;
6650: LD_ADDR_VAR 0 8
6654: PUSH
6655: CALL_OW 45
6659: ST_TO_ADDR
// end ;
6660: LD_VAR 0 8
6664: RET
// export function SayX ( units , ident ) ; var i ; begin
6665: LD_INT 0
6667: PPUSH
6668: PPUSH
// result := false ;
6669: LD_ADDR_VAR 0 3
6673: PUSH
6674: LD_INT 0
6676: ST_TO_ADDR
// if not units then
6677: LD_VAR 0 1
6681: NOT
6682: IFFALSE 6686
// exit ;
6684: GO 6740
// for i in units do
6686: LD_ADDR_VAR 0 4
6690: PUSH
6691: LD_VAR 0 1
6695: PUSH
6696: FOR_IN
6697: IFFALSE 6738
// if IsOk ( i ) then
6699: LD_VAR 0 4
6703: PPUSH
6704: CALL_OW 302
6708: IFFALSE 6736
// begin Say ( i , ident ) ;
6710: LD_VAR 0 4
6714: PPUSH
6715: LD_VAR 0 2
6719: PPUSH
6720: CALL_OW 88
// result := i ;
6724: LD_ADDR_VAR 0 3
6728: PUSH
6729: LD_VAR 0 4
6733: ST_TO_ADDR
// break ;
6734: GO 6738
// end ;
6736: GO 6696
6738: POP
6739: POP
// end ;
6740: LD_VAR 0 3
6744: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
6745: LD_INT 0
6747: PPUSH
6748: PPUSH
// InitUc ;
6749: CALL_OW 18
// InitHc ;
6753: CALL_OW 19
// uc_side := 0 ;
6757: LD_ADDR_OWVAR 20
6761: PUSH
6762: LD_INT 0
6764: ST_TO_ADDR
// uc_nation := 0 ;
6765: LD_ADDR_OWVAR 21
6769: PUSH
6770: LD_INT 0
6772: ST_TO_ADDR
// for i = 1 to amount do
6773: LD_ADDR_VAR 0 4
6777: PUSH
6778: DOUBLE
6779: LD_INT 1
6781: DEC
6782: ST_TO_ADDR
6783: LD_VAR 0 2
6787: PUSH
6788: FOR_TO
6789: IFFALSE 6871
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
6791: LD_ADDR_OWVAR 29
6795: PUSH
6796: LD_INT 9
6798: PPUSH
6799: LD_INT 12
6801: PPUSH
6802: CALL_OW 12
6806: PUSH
6807: LD_INT 9
6809: PPUSH
6810: LD_INT 12
6812: PPUSH
6813: CALL_OW 12
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
6822: LD_ADDR_OWVAR 35
6826: PUSH
6827: LD_INT 1
6829: NEG
6830: PPUSH
6831: LD_INT 1
6833: PPUSH
6834: CALL_OW 12
6838: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
6839: LD_INT 0
6841: PPUSH
6842: LD_INT 12
6844: PPUSH
6845: LD_INT 1
6847: PPUSH
6848: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
6852: CALL_OW 44
6856: PPUSH
6857: LD_VAR 0 1
6861: PPUSH
6862: LD_INT 0
6864: PPUSH
6865: CALL_OW 49
// end ;
6869: GO 6788
6871: POP
6872: POP
// InitHc ;
6873: CALL_OW 19
// end ;
6877: LD_VAR 0 3
6881: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
6882: LD_INT 0
6884: PPUSH
6885: PPUSH
// uc_side := 0 ;
6886: LD_ADDR_OWVAR 20
6890: PUSH
6891: LD_INT 0
6893: ST_TO_ADDR
// uc_nation := 0 ;
6894: LD_ADDR_OWVAR 21
6898: PUSH
6899: LD_INT 0
6901: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) ;
6902: LD_INT 7
6904: PPUSH
6905: LD_INT 6
6907: PUSH
6908: LD_INT 5
6910: PUSH
6911: LD_INT 4
6913: PUSH
6914: LD_INT 3
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: PUSH
6923: LD_OWVAR 67
6927: ARRAY
6928: PPUSH
6929: CALL 6745 0 2
// for i = 1 to 2 do
6933: LD_ADDR_VAR 0 4
6937: PUSH
6938: DOUBLE
6939: LD_INT 1
6941: DEC
6942: ST_TO_ADDR
6943: LD_INT 2
6945: PUSH
6946: FOR_TO
6947: IFFALSE 6986
// begin vc_chassis := class_mastodont ;
6949: LD_ADDR_OWVAR 37
6953: PUSH
6954: LD_EXP 77
6958: ST_TO_ADDR
// vc_control := control_rider ;
6959: LD_ADDR_OWVAR 38
6963: PUSH
6964: LD_INT 4
6966: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
6967: CALL_OW 45
6971: PPUSH
6972: LD_VAR 0 1
6976: PPUSH
6977: LD_INT 0
6979: PPUSH
6980: CALL 60895 0 3
// end ;
6984: GO 6946
6986: POP
6987: POP
// for i := 1 to 4 do
6988: LD_ADDR_VAR 0 4
6992: PUSH
6993: DOUBLE
6994: LD_INT 1
6996: DEC
6997: ST_TO_ADDR
6998: LD_INT 4
7000: PUSH
7001: FOR_TO
7002: IFFALSE 7041
// begin hc_class := class_horse ;
7004: LD_ADDR_OWVAR 28
7008: PUSH
7009: LD_EXP 78
7013: ST_TO_ADDR
// hc_gallery :=  ;
7014: LD_ADDR_OWVAR 33
7018: PUSH
7019: LD_STRING 
7021: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7022: CALL_OW 44
7026: PPUSH
7027: LD_VAR 0 1
7031: PPUSH
7032: LD_INT 0
7034: PPUSH
7035: CALL_OW 49
// end ;
7039: GO 7001
7041: POP
7042: POP
// for i = 1 to 5 do
7043: LD_ADDR_VAR 0 4
7047: PUSH
7048: DOUBLE
7049: LD_INT 1
7051: DEC
7052: ST_TO_ADDR
7053: LD_INT 5
7055: PUSH
7056: FOR_TO
7057: IFFALSE 7111
// begin hc_class = class_tiger ;
7059: LD_ADDR_OWVAR 28
7063: PUSH
7064: LD_INT 14
7066: ST_TO_ADDR
// hc_gallery =  ;
7067: LD_ADDR_OWVAR 33
7071: PUSH
7072: LD_STRING 
7074: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
7075: LD_ADDR_OWVAR 35
7079: PUSH
7080: LD_INT 7
7082: NEG
7083: PPUSH
7084: LD_INT 7
7086: PPUSH
7087: CALL_OW 12
7091: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
7092: CALL_OW 44
7096: PPUSH
7097: LD_VAR 0 1
7101: PPUSH
7102: LD_INT 0
7104: PPUSH
7105: CALL 60895 0 3
// end ;
7109: GO 7056
7111: POP
7112: POP
// for i := 1 to 4 do
7113: LD_ADDR_VAR 0 4
7117: PUSH
7118: DOUBLE
7119: LD_INT 1
7121: DEC
7122: ST_TO_ADDR
7123: LD_INT 4
7125: PUSH
7126: FOR_TO
7127: IFFALSE 7164
// begin hc_class := class_phororhacos ;
7129: LD_ADDR_OWVAR 28
7133: PUSH
7134: LD_INT 18
7136: ST_TO_ADDR
// hc_gallery :=  ;
7137: LD_ADDR_OWVAR 33
7141: PUSH
7142: LD_STRING 
7144: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7145: CALL_OW 44
7149: PPUSH
7150: LD_VAR 0 1
7154: PPUSH
7155: LD_INT 0
7157: PPUSH
7158: CALL_OW 49
// end ;
7162: GO 7126
7164: POP
7165: POP
// for i := 1 to 4 do
7166: LD_ADDR_VAR 0 4
7170: PUSH
7171: DOUBLE
7172: LD_INT 1
7174: DEC
7175: ST_TO_ADDR
7176: LD_INT 4
7178: PUSH
7179: FOR_TO
7180: IFFALSE 7217
// begin hc_class := class_baggie ;
7182: LD_ADDR_OWVAR 28
7186: PUSH
7187: LD_INT 13
7189: ST_TO_ADDR
// hc_gallery :=  ;
7190: LD_ADDR_OWVAR 33
7194: PUSH
7195: LD_STRING 
7197: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7198: CALL_OW 44
7202: PPUSH
7203: LD_VAR 0 1
7207: PPUSH
7208: LD_INT 0
7210: PPUSH
7211: CALL_OW 49
// end ;
7215: GO 7179
7217: POP
7218: POP
// for i := 1 to 7 do
7219: LD_ADDR_VAR 0 4
7223: PUSH
7224: DOUBLE
7225: LD_INT 1
7227: DEC
7228: ST_TO_ADDR
7229: LD_INT 7
7231: PUSH
7232: FOR_TO
7233: IFFALSE 7270
// begin hc_class := class_frog ;
7235: LD_ADDR_OWVAR 28
7239: PUSH
7240: LD_INT 19
7242: ST_TO_ADDR
// hc_gallery :=  ;
7243: LD_ADDR_OWVAR 33
7247: PUSH
7248: LD_STRING 
7250: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
7251: CALL_OW 44
7255: PPUSH
7256: LD_VAR 0 2
7260: PPUSH
7261: LD_INT 0
7263: PPUSH
7264: CALL_OW 49
// end ;
7268: GO 7232
7270: POP
7271: POP
// end ;
7272: LD_VAR 0 3
7276: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
7277: LD_INT 0
7279: PPUSH
7280: PPUSH
7281: PPUSH
// if not observer or not unit then
7282: LD_VAR 0 1
7286: NOT
7287: PUSH
7288: LD_VAR 0 2
7292: NOT
7293: OR
7294: IFFALSE 7298
// exit ;
7296: GO 7346
// if not See ( GetSide ( observer ) , unit ) then
7298: LD_VAR 0 1
7302: PPUSH
7303: CALL_OW 255
7307: PPUSH
7308: LD_VAR 0 2
7312: PPUSH
7313: CALL_OW 292
7317: NOT
7318: IFFALSE 7322
// exit ;
7320: GO 7346
// result := GetDistUnits ( observer , unit ) < 12 ;
7322: LD_ADDR_VAR 0 3
7326: PUSH
7327: LD_VAR 0 1
7331: PPUSH
7332: LD_VAR 0 2
7336: PPUSH
7337: CALL_OW 296
7341: PUSH
7342: LD_INT 12
7344: LESS
7345: ST_TO_ADDR
// end ;
7346: LD_VAR 0 3
7350: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
7351: LD_INT 0
7353: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
7354: LD_VAR 0 2
7358: PUSH
7359: LD_INT 1
7361: ARRAY
7362: PPUSH
7363: LD_VAR 0 2
7367: PUSH
7368: LD_INT 2
7370: ARRAY
7371: PPUSH
7372: CALL_OW 488
7376: PUSH
7377: LD_VAR 0 2
7381: PUSH
7382: LD_INT 1
7384: ARRAY
7385: PPUSH
7386: LD_VAR 0 2
7390: PUSH
7391: LD_INT 2
7393: ARRAY
7394: PPUSH
7395: CALL_OW 428
7399: PUSH
7400: LD_INT 0
7402: EQUAL
7403: AND
7404: IFFALSE 7438
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
7406: LD_VAR 0 1
7410: PPUSH
7411: LD_VAR 0 2
7415: PUSH
7416: LD_INT 1
7418: ARRAY
7419: PPUSH
7420: LD_VAR 0 2
7424: PUSH
7425: LD_INT 2
7427: ARRAY
7428: PPUSH
7429: LD_VAR 0 3
7433: PPUSH
7434: CALL_OW 48
// end ;
7438: LD_VAR 0 4
7442: RET
// export function ReverseArray ( array ) ; var i ; begin
7443: LD_INT 0
7445: PPUSH
7446: PPUSH
// if not array then
7447: LD_VAR 0 1
7451: NOT
7452: IFFALSE 7456
// exit ;
7454: GO 7514
// result := [ ] ;
7456: LD_ADDR_VAR 0 2
7460: PUSH
7461: EMPTY
7462: ST_TO_ADDR
// for i := 1 to array do
7463: LD_ADDR_VAR 0 3
7467: PUSH
7468: DOUBLE
7469: LD_INT 1
7471: DEC
7472: ST_TO_ADDR
7473: LD_VAR 0 1
7477: PUSH
7478: FOR_TO
7479: IFFALSE 7512
// result := Insert ( result , 1 , array [ i ] ) ;
7481: LD_ADDR_VAR 0 2
7485: PUSH
7486: LD_VAR 0 2
7490: PPUSH
7491: LD_INT 1
7493: PPUSH
7494: LD_VAR 0 1
7498: PUSH
7499: LD_VAR 0 3
7503: ARRAY
7504: PPUSH
7505: CALL_OW 2
7509: ST_TO_ADDR
7510: GO 7478
7512: POP
7513: POP
// end ;
7514: LD_VAR 0 2
7518: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
7519: LD_INT 0
7521: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
7522: LD_VAR 0 1
7526: PPUSH
7527: LD_VAR 0 2
7531: PPUSH
7532: LD_VAR 0 3
7536: PPUSH
7537: LD_VAR 0 4
7541: PPUSH
7542: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
7546: LD_VAR 0 1
7550: PPUSH
7551: LD_VAR 0 2
7555: PPUSH
7556: LD_VAR 0 3
7560: PPUSH
7561: CALL_OW 331
// end ;
7565: LD_VAR 0 5
7569: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
7570: LD_INT 0
7572: PPUSH
// if not units then
7573: LD_VAR 0 1
7577: NOT
7578: IFFALSE 7582
// exit ;
7580: GO 7665
// result := true ;
7582: LD_ADDR_VAR 0 4
7586: PUSH
7587: LD_INT 1
7589: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
7590: LD_VAR 0 1
7594: PPUSH
7595: LD_INT 26
7597: PUSH
7598: LD_INT 1
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: PPUSH
7605: CALL_OW 72
7609: PUSH
7610: LD_INT 1
7612: ARRAY
7613: PPUSH
7614: LD_VAR 0 2
7618: PPUSH
7619: CALL_OW 88
7623: NOT
7624: IFFALSE 7665
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
7626: LD_ADDR_VAR 0 4
7630: PUSH
7631: LD_VAR 0 1
7635: PPUSH
7636: LD_INT 26
7638: PUSH
7639: LD_INT 2
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PPUSH
7646: CALL_OW 72
7650: PUSH
7651: LD_INT 1
7653: ARRAY
7654: PPUSH
7655: LD_VAR 0 3
7659: PPUSH
7660: CALL_OW 88
7664: ST_TO_ADDR
// end ;
7665: LD_VAR 0 4
7669: RET
// export function SeeGroup ( side , group ) ; var i ; begin
7670: LD_INT 0
7672: PPUSH
7673: PPUSH
// if not group then
7674: LD_VAR 0 2
7678: NOT
7679: IFFALSE 7683
// exit ;
7681: GO 7728
// for i in group do
7683: LD_ADDR_VAR 0 4
7687: PUSH
7688: LD_VAR 0 2
7692: PUSH
7693: FOR_IN
7694: IFFALSE 7726
// if See ( side , i ) then
7696: LD_VAR 0 1
7700: PPUSH
7701: LD_VAR 0 4
7705: PPUSH
7706: CALL_OW 292
7710: IFFALSE 7724
// begin result := true ;
7712: LD_ADDR_VAR 0 3
7716: PUSH
7717: LD_INT 1
7719: ST_TO_ADDR
// exit ;
7720: POP
7721: POP
7722: GO 7728
// end ;
7724: GO 7693
7726: POP
7727: POP
// end ; end_of_file
7728: LD_VAR 0 3
7732: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
7733: LD_INT 0
7735: PPUSH
7736: PPUSH
7737: PPUSH
7738: PPUSH
7739: PPUSH
7740: PPUSH
7741: PPUSH
// uc_side := 3 ;
7742: LD_ADDR_OWVAR 20
7746: PUSH
7747: LD_INT 3
7749: ST_TO_ADDR
// uc_nation := 3 ;
7750: LD_ADDR_OWVAR 21
7754: PUSH
7755: LD_INT 3
7757: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
7758: LD_ADDR_EXP 49
7762: PUSH
7763: LD_STRING Morozov
7765: PPUSH
7766: CALL_OW 25
7770: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
7771: LD_EXP 49
7775: PPUSH
7776: LD_INT 52
7778: PPUSH
7779: CALL_OW 52
// if not gaidarKilled then
7783: LD_EXP 7
7787: NOT
7788: IFFALSE 7821
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
7790: LD_ADDR_EXP 50
7794: PUSH
7795: LD_STRING Gaydar
7797: PPUSH
7798: LD_INT 0
7800: PPUSH
7801: LD_STRING 
7803: PPUSH
7804: CALL 25297 0 3
7808: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
7809: LD_EXP 50
7813: PPUSH
7814: LD_INT 52
7816: PPUSH
7817: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
7821: LD_INT 52
7823: PPUSH
7824: LD_STRING lenin
7826: PPUSH
7827: CALL_OW 500
// ruOutsiders := [ ] ;
7831: LD_ADDR_EXP 52
7835: PUSH
7836: EMPTY
7837: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
7838: LD_ADDR_EXP 54
7842: PUSH
7843: EMPTY
7844: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
7845: LD_ADDR_EXP 55
7849: PUSH
7850: EMPTY
7851: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
7852: LD_ADDR_EXP 56
7856: PUSH
7857: EMPTY
7858: ST_TO_ADDR
// ruAttackers := [ ] ;
7859: LD_ADDR_EXP 57
7863: PUSH
7864: EMPTY
7865: ST_TO_ADDR
// waveStrength := 0 ;
7866: LD_ADDR_EXP 58
7870: PUSH
7871: LD_INT 0
7873: ST_TO_ADDR
// if not gaidarKilled then
7874: LD_EXP 7
7878: NOT
7879: IFFALSE 7889
// waveStrength := 2 ;
7881: LD_ADDR_EXP 58
7885: PUSH
7886: LD_INT 2
7888: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
7889: LD_ADDR_VAR 0 7
7893: PUSH
7894: LD_INT 22
7896: PUSH
7897: LD_INT 3
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PUSH
7904: LD_INT 21
7906: PUSH
7907: LD_INT 3
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PPUSH
7918: CALL_OW 69
7922: ST_TO_ADDR
// for i in tmp do
7923: LD_ADDR_VAR 0 2
7927: PUSH
7928: LD_VAR 0 7
7932: PUSH
7933: FOR_IN
7934: IFFALSE 7971
// SetBLevel ( i , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
7936: LD_VAR 0 2
7940: PPUSH
7941: LD_INT 5
7943: PUSH
7944: LD_INT 6
7946: PUSH
7947: LD_INT 7
7949: PUSH
7950: LD_INT 8
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: PUSH
7959: LD_OWVAR 67
7963: ARRAY
7964: PPUSH
7965: CALL_OW 241
7969: GO 7933
7971: POP
7972: POP
// for i := 1 to 3 do
7973: LD_ADDR_VAR 0 2
7977: PUSH
7978: DOUBLE
7979: LD_INT 1
7981: DEC
7982: ST_TO_ADDR
7983: LD_INT 3
7985: PUSH
7986: FOR_TO
7987: IFFALSE 8025
// begin PrepareHuman ( false , 1 , 0 ) ;
7989: LD_INT 0
7991: PPUSH
7992: LD_INT 1
7994: PPUSH
7995: LD_INT 0
7997: PPUSH
7998: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
8002: CALL_OW 44
8006: PPUSH
8007: LD_INT 75
8009: PPUSH
8010: LD_INT 49
8012: PPUSH
8013: LD_INT 3
8015: PPUSH
8016: LD_INT 0
8018: PPUSH
8019: CALL_OW 50
// end ;
8023: GO 7986
8025: POP
8026: POP
// for i := 1 to 4 do
8027: LD_ADDR_VAR 0 2
8031: PUSH
8032: DOUBLE
8033: LD_INT 1
8035: DEC
8036: ST_TO_ADDR
8037: LD_INT 4
8039: PUSH
8040: FOR_TO
8041: IFFALSE 8087
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
8043: LD_INT 0
8045: PPUSH
8046: LD_INT 1
8048: PPUSH
8049: LD_INT 2
8051: PPUSH
8052: CALL_OW 12
8056: PPUSH
8057: LD_INT 0
8059: PPUSH
8060: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
8064: CALL_OW 44
8068: PPUSH
8069: LD_INT 330
8071: PPUSH
8072: LD_INT 231
8074: PPUSH
8075: LD_INT 5
8077: PPUSH
8078: LD_INT 0
8080: PPUSH
8081: CALL_OW 50
// end ;
8085: GO 8040
8087: POP
8088: POP
// hc_class := 1 ;
8089: LD_ADDR_OWVAR 28
8093: PUSH
8094: LD_INT 1
8096: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
8097: CALL_OW 44
8101: PPUSH
8102: LD_INT 324
8104: PPUSH
8105: LD_INT 219
8107: PPUSH
8108: CALL_OW 428
8112: PPUSH
8113: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
8117: CALL_OW 44
8121: PPUSH
8122: LD_INT 316
8124: PPUSH
8125: LD_INT 223
8127: PPUSH
8128: CALL_OW 428
8132: PPUSH
8133: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
8137: LD_ADDR_VAR 0 7
8141: PUSH
8142: LD_INT 172
8144: PPUSH
8145: LD_INT 198
8147: PPUSH
8148: CALL_OW 428
8152: PPUSH
8153: CALL_OW 274
8157: PUSH
8158: LD_INT 189
8160: PPUSH
8161: LD_INT 156
8163: PPUSH
8164: CALL_OW 428
8168: PPUSH
8169: CALL_OW 274
8173: PUSH
8174: LD_INT 341
8176: PPUSH
8177: LD_INT 232
8179: PPUSH
8180: CALL_OW 428
8184: PPUSH
8185: CALL_OW 274
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: LIST
8194: ST_TO_ADDR
// for i in tmp do
8195: LD_ADDR_VAR 0 2
8199: PUSH
8200: LD_VAR 0 7
8204: PUSH
8205: FOR_IN
8206: IFFALSE 8240
// begin SetResourceType ( i , mat_cans , 200 ) ;
8208: LD_VAR 0 2
8212: PPUSH
8213: LD_INT 1
8215: PPUSH
8216: LD_INT 200
8218: PPUSH
8219: CALL_OW 277
// SetResourceType ( i , mat_oil , 200 ) ;
8223: LD_VAR 0 2
8227: PPUSH
8228: LD_INT 2
8230: PPUSH
8231: LD_INT 200
8233: PPUSH
8234: CALL_OW 277
// end ;
8238: GO 8205
8240: POP
8241: POP
// tmp := [ [ 177 , 114 ] , [ 138 , 96 ] ] ;
8242: LD_ADDR_VAR 0 7
8246: PUSH
8247: LD_INT 177
8249: PUSH
8250: LD_INT 114
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: PUSH
8257: LD_INT 138
8259: PUSH
8260: LD_INT 96
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: ST_TO_ADDR
// for i := 1 to tmp do
8271: LD_ADDR_VAR 0 2
8275: PUSH
8276: DOUBLE
8277: LD_INT 1
8279: DEC
8280: ST_TO_ADDR
8281: LD_VAR 0 7
8285: PUSH
8286: FOR_TO
8287: IFFALSE 8370
// begin PrepareHuman ( false , class_bazooker , 6 ) ;
8289: LD_INT 0
8291: PPUSH
8292: LD_INT 9
8294: PPUSH
8295: LD_INT 6
8297: PPUSH
8298: CALL_OW 380
// un := CreateHuman ;
8302: LD_ADDR_VAR 0 5
8306: PUSH
8307: CALL_OW 44
8311: ST_TO_ADDR
// SetDir ( un , 2 ) ;
8312: LD_VAR 0 5
8316: PPUSH
8317: LD_INT 2
8319: PPUSH
8320: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
8324: LD_VAR 0 5
8328: PPUSH
8329: LD_VAR 0 7
8333: PUSH
8334: LD_VAR 0 2
8338: ARRAY
8339: PUSH
8340: LD_INT 1
8342: ARRAY
8343: PPUSH
8344: LD_VAR 0 7
8348: PUSH
8349: LD_VAR 0 2
8353: ARRAY
8354: PUSH
8355: LD_INT 2
8357: ARRAY
8358: PPUSH
8359: CALL_OW 428
8363: PPUSH
8364: CALL_OW 52
// end ;
8368: GO 8286
8370: POP
8371: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
8372: LD_ADDR_VAR 0 7
8376: PUSH
8377: LD_INT 198
8379: PUSH
8380: LD_INT 158
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: PUSH
8387: LD_INT 203
8389: PUSH
8390: LD_INT 166
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: PUSH
8397: LD_INT 181
8399: PUSH
8400: LD_INT 209
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: PUSH
8407: LD_INT 178
8409: PUSH
8410: LD_INT 196
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: PUSH
8417: LD_INT 181
8419: PUSH
8420: LD_INT 212
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: ST_TO_ADDR
// for i := 1 to tmp do
8434: LD_ADDR_VAR 0 2
8438: PUSH
8439: DOUBLE
8440: LD_INT 1
8442: DEC
8443: ST_TO_ADDR
8444: LD_VAR 0 7
8448: PUSH
8449: FOR_TO
8450: IFFALSE 8571
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
8452: LD_INT 0
8454: PPUSH
8455: LD_INT 1
8457: PPUSH
8458: LD_INT 4
8460: PUSH
8461: LD_INT 5
8463: PUSH
8464: LD_INT 6
8466: PUSH
8467: LD_INT 7
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: PUSH
8476: LD_OWVAR 67
8480: ARRAY
8481: PPUSH
8482: CALL_OW 380
// un := CreateHuman ;
8486: LD_ADDR_VAR 0 5
8490: PUSH
8491: CALL_OW 44
8495: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
8496: LD_ADDR_VAR 0 4
8500: PUSH
8501: LD_VAR 0 7
8505: PUSH
8506: LD_VAR 0 2
8510: ARRAY
8511: PUSH
8512: LD_INT 1
8514: ARRAY
8515: PPUSH
8516: LD_VAR 0 7
8520: PUSH
8521: LD_VAR 0 2
8525: ARRAY
8526: PUSH
8527: LD_INT 2
8529: ARRAY
8530: PPUSH
8531: CALL_OW 428
8535: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
8536: LD_VAR 0 5
8540: PPUSH
8541: LD_VAR 0 4
8545: PPUSH
8546: CALL 57868 0 1
8550: PPUSH
8551: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8555: LD_VAR 0 5
8559: PPUSH
8560: LD_VAR 0 4
8564: PPUSH
8565: CALL_OW 52
// end ;
8569: GO 8449
8571: POP
8572: POP
// for i := 1 to 3 do
8573: LD_ADDR_VAR 0 2
8577: PUSH
8578: DOUBLE
8579: LD_INT 1
8581: DEC
8582: ST_TO_ADDR
8583: LD_INT 3
8585: PUSH
8586: FOR_TO
8587: IFFALSE 8642
// begin InitHc ;
8589: CALL_OW 19
// uc_nation := 0 ;
8593: LD_ADDR_OWVAR 21
8597: PUSH
8598: LD_INT 0
8600: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
8601: LD_ADDR_OWVAR 28
8605: PUSH
8606: LD_INT 16
8608: ST_TO_ADDR
// un := CreateHuman ;
8609: LD_ADDR_VAR 0 5
8613: PUSH
8614: CALL_OW 44
8618: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
8619: LD_VAR 0 5
8623: PPUSH
8624: LD_INT 194
8626: PPUSH
8627: LD_INT 164
8629: PPUSH
8630: LD_INT 6
8632: PPUSH
8633: LD_INT 0
8635: PPUSH
8636: CALL_OW 50
// end ;
8640: GO 8586
8642: POP
8643: POP
// uc_nation := 3 ;
8644: LD_ADDR_OWVAR 21
8648: PUSH
8649: LD_INT 3
8651: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
8652: LD_INT 24
8654: PPUSH
8655: LD_INT 1
8657: PPUSH
8658: LD_INT 1
8660: PPUSH
8661: LD_INT 44
8663: PPUSH
8664: LD_INT 10
8666: PPUSH
8667: CALL 30161 0 5
// un := CreateVehicle ;
8671: LD_ADDR_VAR 0 5
8675: PUSH
8676: CALL_OW 45
8680: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 162 , 1 , false ) ;
8681: LD_VAR 0 5
8685: PPUSH
8686: LD_INT 199
8688: PPUSH
8689: LD_INT 162
8691: PPUSH
8692: LD_INT 1
8694: PPUSH
8695: LD_INT 0
8697: PPUSH
8698: CALL 64110 0 5
// ComHold ( un ) ;
8702: LD_VAR 0 5
8706: PPUSH
8707: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
8711: LD_INT 0
8713: PPUSH
8714: LD_INT 3
8716: PPUSH
8717: LD_INT 4
8719: PPUSH
8720: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8724: CALL_OW 44
8728: PPUSH
8729: LD_VAR 0 5
8733: PPUSH
8734: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
8738: LD_INT 24
8740: PPUSH
8741: LD_INT 1
8743: PPUSH
8744: LD_INT 1
8746: PPUSH
8747: LD_INT 45
8749: PPUSH
8750: LD_INT 10
8752: PPUSH
8753: CALL 30161 0 5
// un := CreateVehicle ;
8757: LD_ADDR_VAR 0 5
8761: PUSH
8762: CALL_OW 45
8766: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
8767: LD_VAR 0 5
8771: PPUSH
8772: LD_INT 129
8774: PPUSH
8775: LD_INT 93
8777: PPUSH
8778: LD_INT 1
8780: PPUSH
8781: LD_INT 0
8783: PPUSH
8784: CALL 64110 0 5
// ComHold ( un ) ;
8788: LD_VAR 0 5
8792: PPUSH
8793: CALL_OW 140
// if Difficulty > 1 then
8797: LD_OWVAR 67
8801: PUSH
8802: LD_INT 1
8804: GREATER
8805: IFFALSE 8979
// begin PrepareHuman ( false , 3 , 4 ) ;
8807: LD_INT 0
8809: PPUSH
8810: LD_INT 3
8812: PPUSH
8813: LD_INT 4
8815: PPUSH
8816: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8820: CALL_OW 44
8824: PPUSH
8825: LD_VAR 0 5
8829: PPUSH
8830: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
8834: LD_INT 24
8836: PPUSH
8837: LD_INT 1
8839: PPUSH
8840: LD_INT 1
8842: PPUSH
8843: LD_INT 45
8845: PPUSH
8846: LD_INT 10
8848: PPUSH
8849: CALL 30161 0 5
// un := CreateVehicle ;
8853: LD_ADDR_VAR 0 5
8857: PUSH
8858: CALL_OW 45
8862: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 92 , 2 , false ) ;
8863: LD_VAR 0 5
8867: PPUSH
8868: LD_INT 134
8870: PPUSH
8871: LD_INT 92
8873: PPUSH
8874: LD_INT 2
8876: PPUSH
8877: LD_INT 0
8879: PPUSH
8880: CALL 64110 0 5
// ComHold ( un ) ;
8884: LD_VAR 0 5
8888: PPUSH
8889: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
8893: LD_INT 0
8895: PPUSH
8896: LD_INT 3
8898: PPUSH
8899: LD_INT 4
8901: PPUSH
8902: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8906: CALL_OW 44
8910: PPUSH
8911: LD_VAR 0 5
8915: PPUSH
8916: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
8920: LD_INT 24
8922: PPUSH
8923: LD_INT 1
8925: PPUSH
8926: LD_INT 1
8928: PPUSH
8929: LD_INT 45
8931: PPUSH
8932: LD_INT 10
8934: PPUSH
8935: CALL 30161 0 5
// un := CreateVehicle ;
8939: LD_ADDR_VAR 0 5
8943: PUSH
8944: CALL_OW 45
8948: ST_TO_ADDR
// PlaceUnitXYD ( un , 200 , 173 , 1 , false ) ;
8949: LD_VAR 0 5
8953: PPUSH
8954: LD_INT 200
8956: PPUSH
8957: LD_INT 173
8959: PPUSH
8960: LD_INT 1
8962: PPUSH
8963: LD_INT 0
8965: PPUSH
8966: CALL 64110 0 5
// ComHold ( un ) ;
8970: LD_VAR 0 5
8974: PPUSH
8975: CALL_OW 140
// end ; PrepareHuman ( false , 3 , 4 ) ;
8979: LD_INT 0
8981: PPUSH
8982: LD_INT 3
8984: PPUSH
8985: LD_INT 4
8987: PPUSH
8988: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8992: CALL_OW 44
8996: PPUSH
8997: LD_VAR 0 5
9001: PPUSH
9002: CALL_OW 52
// bc_type := b_armoury ;
9006: LD_ADDR_OWVAR 42
9010: PUSH
9011: LD_INT 4
9013: ST_TO_ADDR
// if Difficulty > 1 then
9014: LD_OWVAR 67
9018: PUSH
9019: LD_INT 1
9021: GREATER
9022: IFFALSE 9032
// bc_type := b_barracks ;
9024: LD_ADDR_OWVAR 42
9028: PUSH
9029: LD_INT 5
9031: ST_TO_ADDR
// bc_level := 6 ;
9032: LD_ADDR_OWVAR 43
9036: PUSH
9037: LD_INT 6
9039: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
9040: LD_INT 120
9042: PPUSH
9043: LD_INT 100
9045: PPUSH
9046: LD_INT 5
9048: PPUSH
9049: CALL_OW 47
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
9053: LD_ADDR_VAR 0 2
9057: PUSH
9058: DOUBLE
9059: LD_INT 1
9061: DEC
9062: ST_TO_ADDR
9063: LD_INT 3
9065: PUSH
9066: LD_INT 3
9068: PUSH
9069: LD_INT 4
9071: PUSH
9072: LD_INT 4
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: PUSH
9081: LD_OWVAR 67
9085: ARRAY
9086: PUSH
9087: FOR_TO
9088: IFFALSE 9146
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_bazooker , class_bazooker ] [ Difficulty ] , 5 ) ;
9090: LD_INT 0
9092: PPUSH
9093: LD_INT 1
9095: PUSH
9096: LD_INT 1
9098: PUSH
9099: LD_INT 9
9101: PUSH
9102: LD_INT 9
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: PUSH
9111: LD_OWVAR 67
9115: ARRAY
9116: PPUSH
9117: LD_INT 5
9119: PPUSH
9120: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
9124: CALL_OW 44
9128: PPUSH
9129: LD_INT 120
9131: PPUSH
9132: LD_INT 100
9134: PPUSH
9135: CALL_OW 428
9139: PPUSH
9140: CALL_OW 52
// end ;
9144: GO 9087
9146: POP
9147: POP
// tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
9148: LD_ADDR_VAR 0 7
9152: PUSH
9153: LD_INT 135
9155: PUSH
9156: LD_INT 100
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PUSH
9163: LD_INT 137
9165: PUSH
9166: LD_INT 92
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: PUSH
9173: EMPTY
9174: LIST
9175: LIST
9176: ST_TO_ADDR
// for i := 1 to tmp do
9177: LD_ADDR_VAR 0 2
9181: PUSH
9182: DOUBLE
9183: LD_INT 1
9185: DEC
9186: ST_TO_ADDR
9187: LD_VAR 0 7
9191: PUSH
9192: FOR_TO
9193: IFFALSE 9363
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
9195: LD_INT 22
9197: PUSH
9198: LD_INT 22
9200: PUSH
9201: LD_INT 24
9203: PUSH
9204: LD_INT 24
9206: PUSH
9207: LD_INT 24
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: PUSH
9217: LD_OWVAR 67
9221: PUSH
9222: LD_INT 0
9224: PPUSH
9225: LD_INT 1
9227: PPUSH
9228: CALL_OW 12
9232: PLUS
9233: ARRAY
9234: PPUSH
9235: LD_INT 1
9237: PPUSH
9238: LD_INT 1
9240: PPUSH
9241: LD_INT 44
9243: PPUSH
9244: LD_INT 25
9246: PPUSH
9247: CALL 30161 0 5
// veh := CreateVehicle ;
9251: LD_ADDR_VAR 0 6
9255: PUSH
9256: CALL_OW 45
9260: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
9261: LD_VAR 0 6
9265: PPUSH
9266: LD_INT 2
9268: PPUSH
9269: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
9273: LD_VAR 0 6
9277: PPUSH
9278: LD_VAR 0 7
9282: PUSH
9283: LD_VAR 0 2
9287: ARRAY
9288: PUSH
9289: LD_INT 1
9291: ARRAY
9292: PPUSH
9293: LD_VAR 0 7
9297: PUSH
9298: LD_VAR 0 2
9302: ARRAY
9303: PUSH
9304: LD_INT 2
9306: ARRAY
9307: PPUSH
9308: LD_INT 0
9310: PPUSH
9311: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
9315: LD_INT 0
9317: PPUSH
9318: LD_INT 3
9320: PPUSH
9321: LD_INT 6
9323: PPUSH
9324: CALL_OW 380
// un := CreateHuman ;
9328: LD_ADDR_VAR 0 5
9332: PUSH
9333: CALL_OW 44
9337: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9338: LD_VAR 0 5
9342: PPUSH
9343: LD_VAR 0 6
9347: PPUSH
9348: CALL_OW 52
// ComHold ( veh ) ;
9352: LD_VAR 0 6
9356: PPUSH
9357: CALL_OW 140
// end ;
9361: GO 9192
9363: POP
9364: POP
// tmp := [ 191 , 122 ] ;
9365: LD_ADDR_VAR 0 7
9369: PUSH
9370: LD_INT 191
9372: PUSH
9373: LD_INT 122
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
9380: LD_INT 24
9382: PPUSH
9383: LD_INT 1
9385: PPUSH
9386: LD_INT 1
9388: PPUSH
9389: LD_INT 44
9391: PPUSH
9392: LD_INT 30
9394: PPUSH
9395: CALL 30161 0 5
// ruBlockadeTank := CreateVehicle ;
9399: LD_ADDR_EXP 51
9403: PUSH
9404: CALL_OW 45
9408: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
9409: LD_EXP 51
9413: PPUSH
9414: LD_INT 2
9416: PPUSH
9417: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
9421: LD_EXP 51
9425: PPUSH
9426: LD_INT 191
9428: PPUSH
9429: LD_INT 122
9431: PPUSH
9432: LD_INT 0
9434: PPUSH
9435: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 , 7 ] [ Difficulty - 1 ] ) ;
9439: LD_INT 1
9441: PPUSH
9442: LD_INT 5
9444: PUSH
9445: LD_INT 6
9447: PUSH
9448: LD_INT 7
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: LIST
9455: PUSH
9456: LD_OWVAR 67
9460: PUSH
9461: LD_INT 1
9463: MINUS
9464: ARRAY
9465: PPUSH
9466: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
9470: CALL_OW 44
9474: PPUSH
9475: LD_EXP 51
9479: PPUSH
9480: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
9484: LD_EXP 51
9488: PPUSH
9489: CALL_OW 140
// ruBlockadeSquad := [ ] ;
9493: LD_ADDR_EXP 53
9497: PUSH
9498: EMPTY
9499: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 6 , 6 ] [ Difficulty ] do
9500: LD_ADDR_VAR 0 2
9504: PUSH
9505: DOUBLE
9506: LD_INT 1
9508: DEC
9509: ST_TO_ADDR
9510: LD_INT 3
9512: PUSH
9513: LD_INT 4
9515: PUSH
9516: LD_INT 6
9518: PUSH
9519: LD_INT 6
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: PUSH
9528: LD_OWVAR 67
9532: ARRAY
9533: PUSH
9534: FOR_TO
9535: IFFALSE 9651
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
9537: LD_INT 0
9539: PPUSH
9540: LD_INT 1
9542: PPUSH
9543: LD_INT 4
9545: PUSH
9546: LD_INT 5
9548: PUSH
9549: LD_INT 6
9551: PUSH
9552: LD_INT 7
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: PUSH
9561: LD_OWVAR 67
9565: ARRAY
9566: PPUSH
9567: CALL_OW 380
// un := CreateHuman ;
9571: LD_ADDR_VAR 0 5
9575: PUSH
9576: CALL_OW 44
9580: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
9581: LD_VAR 0 5
9585: PPUSH
9586: LD_INT 9
9588: PPUSH
9589: LD_INT 0
9591: PPUSH
9592: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
9596: LD_VAR 0 5
9600: PPUSH
9601: LD_INT 198
9603: PPUSH
9604: LD_INT 129
9606: PPUSH
9607: CALL_OW 118
// AddComCrawl ( un ) ;
9611: LD_VAR 0 5
9615: PPUSH
9616: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
9620: LD_ADDR_EXP 53
9624: PUSH
9625: LD_EXP 53
9629: PPUSH
9630: LD_EXP 53
9634: PUSH
9635: LD_INT 1
9637: PLUS
9638: PPUSH
9639: LD_VAR 0 5
9643: PPUSH
9644: CALL_OW 1
9648: ST_TO_ADDR
// end ;
9649: GO 9534
9651: POP
9652: POP
// PrepareHuman ( false , 4 , 5 ) ;
9653: LD_INT 0
9655: PPUSH
9656: LD_INT 4
9658: PPUSH
9659: LD_INT 5
9661: PPUSH
9662: CALL_OW 380
// un := CreateHuman ;
9666: LD_ADDR_VAR 0 5
9670: PUSH
9671: CALL_OW 44
9675: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
9676: LD_VAR 0 5
9680: PPUSH
9681: LD_INT 179
9683: PPUSH
9684: LD_INT 113
9686: PPUSH
9687: LD_INT 0
9689: PPUSH
9690: CALL_OW 48
// ComHold ( un ) ;
9694: LD_VAR 0 5
9698: PPUSH
9699: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
9703: LD_ADDR_EXP 53
9707: PUSH
9708: LD_EXP 53
9712: PPUSH
9713: LD_EXP 53
9717: PUSH
9718: LD_INT 1
9720: PLUS
9721: PPUSH
9722: LD_VAR 0 5
9726: PPUSH
9727: CALL_OW 1
9731: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
9732: LD_ADDR_VAR 0 7
9736: PUSH
9737: LD_INT 167
9739: PPUSH
9740: LD_INT 243
9742: PPUSH
9743: CALL_OW 428
9747: PPUSH
9748: CALL_OW 274
9752: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
9753: LD_VAR 0 7
9757: PPUSH
9758: LD_INT 1
9760: PPUSH
9761: LD_INT 1000
9763: PPUSH
9764: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
9768: LD_VAR 0 7
9772: PPUSH
9773: LD_INT 2
9775: PPUSH
9776: LD_INT 400
9778: PPUSH
9779: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
9783: LD_ADDR_VAR 0 7
9787: PUSH
9788: LD_INT 169
9790: PPUSH
9791: LD_INT 229
9793: PPUSH
9794: CALL_OW 428
9798: ST_TO_ADDR
// for i := 1 to 3 do
9799: LD_ADDR_VAR 0 2
9803: PUSH
9804: DOUBLE
9805: LD_INT 1
9807: DEC
9808: ST_TO_ADDR
9809: LD_INT 3
9811: PUSH
9812: FOR_TO
9813: IFFALSE 9904
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9815: LD_INT 0
9817: PPUSH
9818: LD_INT 1
9820: PPUSH
9821: LD_INT 4
9823: PUSH
9824: LD_INT 5
9826: PUSH
9827: LD_INT 5
9829: PUSH
9830: LD_INT 6
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: PUSH
9839: LD_OWVAR 67
9843: ARRAY
9844: PPUSH
9845: CALL_OW 380
// un := CreateHuman ;
9849: LD_ADDR_VAR 0 5
9853: PUSH
9854: CALL_OW 44
9858: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
9859: LD_VAR 0 5
9863: PPUSH
9864: LD_VAR 0 7
9868: PPUSH
9869: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
9873: LD_ADDR_EXP 54
9877: PUSH
9878: LD_EXP 54
9882: PPUSH
9883: LD_EXP 54
9887: PUSH
9888: LD_INT 1
9890: PLUS
9891: PPUSH
9892: LD_VAR 0 5
9896: PPUSH
9897: CALL_OW 1
9901: ST_TO_ADDR
// end ;
9902: GO 9812
9904: POP
9905: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
9906: LD_ADDR_VAR 0 7
9910: PUSH
9911: LD_INT 165
9913: PUSH
9914: LD_INT 227
9916: PUSH
9917: EMPTY
9918: LIST
9919: LIST
9920: PUSH
9921: LD_INT 173
9923: PUSH
9924: LD_INT 231
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: ST_TO_ADDR
// for i := 1 to tmp do
9935: LD_ADDR_VAR 0 2
9939: PUSH
9940: DOUBLE
9941: LD_INT 1
9943: DEC
9944: ST_TO_ADDR
9945: LD_VAR 0 7
9949: PUSH
9950: FOR_TO
9951: IFFALSE 10072
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9953: LD_INT 0
9955: PPUSH
9956: LD_INT 1
9958: PPUSH
9959: LD_INT 4
9961: PUSH
9962: LD_INT 5
9964: PUSH
9965: LD_INT 5
9967: PUSH
9968: LD_INT 6
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: PUSH
9977: LD_OWVAR 67
9981: ARRAY
9982: PPUSH
9983: CALL_OW 380
// un := CreateHuman ;
9987: LD_ADDR_VAR 0 5
9991: PUSH
9992: CALL_OW 44
9996: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
9997: LD_VAR 0 5
10001: PPUSH
10002: LD_VAR 0 7
10006: PUSH
10007: LD_VAR 0 2
10011: ARRAY
10012: PUSH
10013: LD_INT 1
10015: ARRAY
10016: PPUSH
10017: LD_VAR 0 7
10021: PUSH
10022: LD_VAR 0 2
10026: ARRAY
10027: PUSH
10028: LD_INT 2
10030: ARRAY
10031: PPUSH
10032: CALL_OW 428
10036: PPUSH
10037: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
10041: LD_ADDR_EXP 54
10045: PUSH
10046: LD_EXP 54
10050: PPUSH
10051: LD_EXP 54
10055: PUSH
10056: LD_INT 1
10058: PLUS
10059: PPUSH
10060: LD_VAR 0 5
10064: PPUSH
10065: CALL_OW 1
10069: ST_TO_ADDR
// end ;
10070: GO 9950
10072: POP
10073: POP
// for i := 1 to 2 do
10074: LD_ADDR_VAR 0 2
10078: PUSH
10079: DOUBLE
10080: LD_INT 1
10082: DEC
10083: ST_TO_ADDR
10084: LD_INT 2
10086: PUSH
10087: FOR_TO
10088: IFFALSE 10143
// begin InitHc ;
10090: CALL_OW 19
// uc_nation := 0 ;
10094: LD_ADDR_OWVAR 21
10098: PUSH
10099: LD_INT 0
10101: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
10102: LD_ADDR_OWVAR 28
10106: PUSH
10107: LD_INT 16
10109: ST_TO_ADDR
// un := CreateHuman ;
10110: LD_ADDR_VAR 0 5
10114: PUSH
10115: CALL_OW 44
10119: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
10120: LD_VAR 0 5
10124: PPUSH
10125: LD_INT 166
10127: PPUSH
10128: LD_INT 233
10130: PPUSH
10131: LD_INT 2
10133: PPUSH
10134: LD_INT 0
10136: PPUSH
10137: CALL_OW 50
// end ;
10141: GO 10087
10143: POP
10144: POP
// uc_nation := 3 ;
10145: LD_ADDR_OWVAR 21
10149: PUSH
10150: LD_INT 3
10152: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
10153: LD_ADDR_VAR 0 7
10157: PUSH
10158: LD_INT 71
10160: PUSH
10161: LD_INT 52
10163: PUSH
10164: LD_INT 11
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: LIST
10171: ST_TO_ADDR
// for i in tmp do
10172: LD_ADDR_VAR 0 2
10176: PUSH
10177: LD_VAR 0 7
10181: PUSH
10182: FOR_IN
10183: IFFALSE 10227
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
10185: LD_VAR 0 2
10189: PPUSH
10190: CALL_OW 274
10194: PPUSH
10195: LD_INT 1
10197: PPUSH
10198: LD_INT 3000
10200: PPUSH
10201: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
10205: LD_VAR 0 2
10209: PPUSH
10210: CALL_OW 274
10214: PPUSH
10215: LD_INT 2
10217: PPUSH
10218: LD_INT 600
10220: PPUSH
10221: CALL_OW 277
// end ;
10225: GO 10182
10227: POP
10228: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
10229: LD_ADDR_VAR 0 7
10233: PUSH
10234: LD_INT 41
10236: PUSH
10237: LD_INT 57
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: LD_INT 38
10246: PUSH
10247: LD_INT 55
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: LD_INT 50
10256: PUSH
10257: LD_INT 73
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: LD_INT 51
10266: PUSH
10267: LD_INT 65
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: PUSH
10274: LD_INT 82
10276: PUSH
10277: LD_INT 93
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PUSH
10284: LD_INT 87
10286: PUSH
10287: LD_INT 100
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: LD_INT 91
10296: PUSH
10297: LD_INT 109
10299: PUSH
10300: EMPTY
10301: LIST
10302: LIST
10303: PUSH
10304: LD_INT 84
10306: PUSH
10307: LD_INT 120
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: PUSH
10314: LD_INT 113
10316: PUSH
10317: LD_INT 153
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: PUSH
10324: LD_INT 123
10326: PUSH
10327: LD_INT 171
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: PUSH
10334: LD_INT 125
10336: PUSH
10337: LD_INT 178
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: PUSH
10344: LD_INT 125
10346: PUSH
10347: LD_INT 188
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PUSH
10354: LD_INT 125
10356: PUSH
10357: LD_INT 201
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: PUSH
10364: LD_INT 33
10366: PUSH
10367: LD_INT 60
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PUSH
10374: LD_INT 76
10376: PUSH
10377: LD_INT 95
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: LD_INT 84
10386: PUSH
10387: LD_INT 111
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: PUSH
10394: LD_INT 112
10396: PUSH
10397: LD_INT 165
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: ST_TO_ADDR
// for i := 1 to tmp do
10423: LD_ADDR_VAR 0 2
10427: PUSH
10428: DOUBLE
10429: LD_INT 1
10431: DEC
10432: ST_TO_ADDR
10433: LD_VAR 0 7
10437: PUSH
10438: FOR_TO
10439: IFFALSE 10686
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
10441: LD_ADDR_VAR 0 4
10445: PUSH
10446: LD_VAR 0 7
10450: PUSH
10451: LD_VAR 0 2
10455: ARRAY
10456: PUSH
10457: LD_INT 1
10459: ARRAY
10460: PPUSH
10461: LD_VAR 0 7
10465: PUSH
10466: LD_VAR 0 2
10470: ARRAY
10471: PUSH
10472: LD_INT 2
10474: ARRAY
10475: PPUSH
10476: CALL_OW 428
10480: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
10481: LD_VAR 0 4
10485: PPUSH
10486: CALL_OW 266
10490: PUSH
10491: LD_INT 4
10493: PUSH
10494: LD_INT 5
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: IN
10501: IFFALSE 10585
// begin for j := 1 to Difficulty do
10503: LD_ADDR_VAR 0 3
10507: PUSH
10508: DOUBLE
10509: LD_INT 1
10511: DEC
10512: ST_TO_ADDR
10513: LD_OWVAR 67
10517: PUSH
10518: FOR_TO
10519: IFFALSE 10581
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10521: LD_INT 0
10523: PPUSH
10524: LD_INT 1
10526: PPUSH
10527: LD_INT 4
10529: PUSH
10530: LD_INT 5
10532: PUSH
10533: LD_INT 5
10535: PUSH
10536: LD_INT 6
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: PUSH
10545: LD_OWVAR 67
10549: ARRAY
10550: PPUSH
10551: CALL_OW 380
// un := CreateHuman ;
10555: LD_ADDR_VAR 0 5
10559: PUSH
10560: CALL_OW 44
10564: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10565: LD_VAR 0 5
10569: PPUSH
10570: LD_VAR 0 4
10574: PPUSH
10575: CALL_OW 52
// end ;
10579: GO 10518
10581: POP
10582: POP
// end else
10583: GO 10655
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10585: LD_INT 0
10587: PPUSH
10588: LD_INT 1
10590: PPUSH
10591: LD_INT 4
10593: PUSH
10594: LD_INT 5
10596: PUSH
10597: LD_INT 5
10599: PUSH
10600: LD_INT 6
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: PUSH
10609: LD_OWVAR 67
10613: ARRAY
10614: PPUSH
10615: CALL_OW 380
// un := CreateHuman ;
10619: LD_ADDR_VAR 0 5
10623: PUSH
10624: CALL_OW 44
10628: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10629: LD_VAR 0 5
10633: PPUSH
10634: LD_VAR 0 4
10638: PPUSH
10639: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
10643: LD_VAR 0 5
10647: PPUSH
10648: LD_INT 9
10650: PPUSH
10651: CALL_OW 336
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10655: LD_ADDR_EXP 55
10659: PUSH
10660: LD_EXP 55
10664: PPUSH
10665: LD_EXP 55
10669: PUSH
10670: LD_INT 1
10672: PLUS
10673: PPUSH
10674: LD_VAR 0 5
10678: PPUSH
10679: CALL_OW 1
10683: ST_TO_ADDR
// end ;
10684: GO 10438
10686: POP
10687: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
10688: LD_ADDR_VAR 0 4
10692: PUSH
10693: LD_INT 10
10695: PPUSH
10696: LD_INT 22
10698: PUSH
10699: LD_INT 3
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PUSH
10706: LD_INT 30
10708: PUSH
10709: LD_INT 32
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: PUSH
10716: LD_INT 58
10718: PUSH
10719: EMPTY
10720: LIST
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: LIST
10726: PPUSH
10727: CALL_OW 70
10731: PUSH
10732: FOR_IN
10733: IFFALSE 10867
// begin if not Prob ( [ 40 , 50 , 75 , 80 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
10735: LD_INT 40
10737: PUSH
10738: LD_INT 50
10740: PUSH
10741: LD_INT 75
10743: PUSH
10744: LD_INT 80
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: PUSH
10753: LD_OWVAR 67
10757: ARRAY
10758: PUSH
10759: LD_EXP 7
10763: PUSH
10764: LD_INT 10
10766: MUL
10767: MINUS
10768: PPUSH
10769: CALL_OW 13
10773: NOT
10774: IFFALSE 10778
// continue ;
10776: GO 10732
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10778: LD_INT 0
10780: PPUSH
10781: LD_INT 1
10783: PPUSH
10784: LD_INT 4
10786: PUSH
10787: LD_INT 5
10789: PUSH
10790: LD_INT 5
10792: PUSH
10793: LD_INT 6
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: PUSH
10802: LD_OWVAR 67
10806: ARRAY
10807: PPUSH
10808: CALL_OW 380
// un := CreateHuman ;
10812: LD_ADDR_VAR 0 5
10816: PUSH
10817: CALL_OW 44
10821: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10822: LD_VAR 0 5
10826: PPUSH
10827: LD_VAR 0 4
10831: PPUSH
10832: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10836: LD_ADDR_EXP 55
10840: PUSH
10841: LD_EXP 55
10845: PPUSH
10846: LD_EXP 55
10850: PUSH
10851: LD_INT 1
10853: PLUS
10854: PPUSH
10855: LD_VAR 0 5
10859: PPUSH
10860: CALL_OW 1
10864: ST_TO_ADDR
// end ;
10865: GO 10732
10867: POP
10868: POP
// for i := 1 to 5 do
10869: LD_ADDR_VAR 0 2
10873: PUSH
10874: DOUBLE
10875: LD_INT 1
10877: DEC
10878: ST_TO_ADDR
10879: LD_INT 5
10881: PUSH
10882: FOR_TO
10883: IFFALSE 10981
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10885: LD_INT 0
10887: PPUSH
10888: LD_INT 2
10890: PPUSH
10891: LD_INT 4
10893: PUSH
10894: LD_INT 5
10896: PUSH
10897: LD_INT 5
10899: PUSH
10900: LD_INT 6
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: PUSH
10909: LD_OWVAR 67
10913: ARRAY
10914: PPUSH
10915: CALL_OW 380
// un := CreateHuman ;
10919: LD_ADDR_VAR 0 5
10923: PUSH
10924: CALL_OW 44
10928: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
10929: LD_VAR 0 5
10933: PPUSH
10934: LD_INT 66
10936: PPUSH
10937: LD_INT 101
10939: PPUSH
10940: LD_INT 3
10942: PPUSH
10943: LD_INT 0
10945: PPUSH
10946: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10950: LD_ADDR_EXP 55
10954: PUSH
10955: LD_EXP 55
10959: PPUSH
10960: LD_EXP 55
10964: PUSH
10965: LD_INT 1
10967: PLUS
10968: PPUSH
10969: LD_VAR 0 5
10973: PPUSH
10974: CALL_OW 1
10978: ST_TO_ADDR
// end ;
10979: GO 10882
10981: POP
10982: POP
// tmp := [ ruFac1 , ruFac2 ] ;
10983: LD_ADDR_VAR 0 7
10987: PUSH
10988: LD_INT 72
10990: PUSH
10991: LD_INT 12
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: ST_TO_ADDR
// for i := 1 to tmp do
10998: LD_ADDR_VAR 0 2
11002: PUSH
11003: DOUBLE
11004: LD_INT 1
11006: DEC
11007: ST_TO_ADDR
11008: LD_VAR 0 7
11012: PUSH
11013: FOR_TO
11014: IFFALSE 11131
// for j := 1 to 6 do
11016: LD_ADDR_VAR 0 3
11020: PUSH
11021: DOUBLE
11022: LD_INT 1
11024: DEC
11025: ST_TO_ADDR
11026: LD_INT 6
11028: PUSH
11029: FOR_TO
11030: IFFALSE 11127
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
11032: LD_INT 0
11034: PPUSH
11035: LD_INT 3
11037: PPUSH
11038: LD_INT 4
11040: PUSH
11041: LD_INT 5
11043: PUSH
11044: LD_INT 5
11046: PUSH
11047: LD_INT 6
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: PUSH
11056: LD_OWVAR 67
11060: ARRAY
11061: PPUSH
11062: CALL_OW 380
// un := CreateHuman ;
11066: LD_ADDR_VAR 0 5
11070: PUSH
11071: CALL_OW 44
11075: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
11076: LD_VAR 0 5
11080: PPUSH
11081: LD_VAR 0 7
11085: PUSH
11086: LD_VAR 0 2
11090: ARRAY
11091: PPUSH
11092: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
11096: LD_ADDR_EXP 55
11100: PUSH
11101: LD_EXP 55
11105: PPUSH
11106: LD_EXP 55
11110: PUSH
11111: LD_INT 1
11113: PLUS
11114: PPUSH
11115: LD_VAR 0 5
11119: PPUSH
11120: CALL_OW 1
11124: ST_TO_ADDR
// end ;
11125: GO 11029
11127: POP
11128: POP
11129: GO 11013
11131: POP
11132: POP
// for i := 1 to 3 do
11133: LD_ADDR_VAR 0 2
11137: PUSH
11138: DOUBLE
11139: LD_INT 1
11141: DEC
11142: ST_TO_ADDR
11143: LD_INT 3
11145: PUSH
11146: FOR_TO
11147: IFFALSE 11236
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
11149: LD_INT 0
11151: PPUSH
11152: LD_INT 4
11154: PPUSH
11155: LD_INT 4
11157: PUSH
11158: LD_INT 5
11160: PUSH
11161: LD_INT 5
11163: PUSH
11164: LD_INT 6
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: PUSH
11173: LD_OWVAR 67
11177: ARRAY
11178: PPUSH
11179: CALL_OW 380
// un := CreateHuman ;
11183: LD_ADDR_VAR 0 5
11187: PUSH
11188: CALL_OW 44
11192: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
11193: LD_VAR 0 5
11197: PPUSH
11198: LD_INT 17
11200: PPUSH
11201: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
11205: LD_ADDR_EXP 55
11209: PUSH
11210: LD_EXP 55
11214: PPUSH
11215: LD_EXP 55
11219: PUSH
11220: LD_INT 1
11222: PLUS
11223: PPUSH
11224: LD_VAR 0 5
11228: PPUSH
11229: CALL_OW 1
11233: ST_TO_ADDR
// end ;
11234: GO 11146
11236: POP
11237: POP
// for i := 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
11238: LD_ADDR_VAR 0 2
11242: PUSH
11243: DOUBLE
11244: LD_INT 1
11246: DEC
11247: ST_TO_ADDR
11248: LD_INT 2
11250: PUSH
11251: LD_INT 3
11253: PUSH
11254: LD_INT 3
11256: PUSH
11257: LD_INT 3
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: PUSH
11266: LD_OWVAR 67
11270: ARRAY
11271: PUSH
11272: FOR_TO
11273: IFFALSE 11393
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
11275: LD_INT 22
11277: PPUSH
11278: LD_INT 1
11280: PPUSH
11281: LD_INT 1
11283: PPUSH
11284: LD_INT 52
11286: PPUSH
11287: LD_INT 100
11289: PPUSH
11290: CALL 30161 0 5
// veh := CreateVehicle ;
11294: LD_ADDR_VAR 0 6
11298: PUSH
11299: CALL_OW 45
11303: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
11304: LD_INT 0
11306: PPUSH
11307: LD_INT 3
11309: PPUSH
11310: LD_INT 4
11312: PPUSH
11313: CALL_OW 380
// un := CreateHuman ;
11317: LD_ADDR_VAR 0 5
11321: PUSH
11322: CALL_OW 44
11326: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
11327: LD_VAR 0 6
11331: PPUSH
11332: LD_INT 107
11334: PPUSH
11335: LD_INT 182
11337: PPUSH
11338: LD_INT 4
11340: PPUSH
11341: LD_INT 0
11343: PPUSH
11344: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
11348: LD_VAR 0 5
11352: PPUSH
11353: LD_VAR 0 6
11357: PPUSH
11358: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
11362: LD_ADDR_EXP 55
11366: PUSH
11367: LD_EXP 55
11371: PPUSH
11372: LD_EXP 55
11376: PUSH
11377: LD_INT 1
11379: PLUS
11380: PPUSH
11381: LD_VAR 0 5
11385: PPUSH
11386: CALL_OW 1
11390: ST_TO_ADDR
// end ;
11391: GO 11272
11393: POP
11394: POP
// InitHc ;
11395: CALL_OW 19
// for i := 1 to [ 6 , 8 , 10 , 12 ] [ Difficulty ] do
11399: LD_ADDR_VAR 0 2
11403: PUSH
11404: DOUBLE
11405: LD_INT 1
11407: DEC
11408: ST_TO_ADDR
11409: LD_INT 6
11411: PUSH
11412: LD_INT 8
11414: PUSH
11415: LD_INT 10
11417: PUSH
11418: LD_INT 12
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: PUSH
11427: LD_OWVAR 67
11431: ARRAY
11432: PUSH
11433: FOR_TO
11434: IFFALSE 11506
// begin uc_nation := 0 ;
11436: LD_ADDR_OWVAR 21
11440: PUSH
11441: LD_INT 0
11443: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
11444: LD_ADDR_OWVAR 28
11448: PUSH
11449: LD_INT 15
11451: ST_TO_ADDR
// un := CreateHuman ;
11452: LD_ADDR_VAR 0 5
11456: PUSH
11457: CALL_OW 44
11461: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
11462: LD_VAR 0 5
11466: PPUSH
11467: LD_INT 269
11469: PUSH
11470: LD_INT 300
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: PUSH
11477: LD_VAR 0 2
11481: PUSH
11482: LD_INT 2
11484: MOD
11485: PUSH
11486: LD_INT 1
11488: PLUS
11489: ARRAY
11490: PPUSH
11491: LD_INT 182
11493: PPUSH
11494: LD_INT 4
11496: PPUSH
11497: LD_INT 0
11499: PPUSH
11500: CALL_OW 50
// end ;
11504: GO 11433
11506: POP
11507: POP
// uc_nation := 3 ;
11508: LD_ADDR_OWVAR 21
11512: PUSH
11513: LD_INT 3
11515: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
11516: LD_EXP 8
11520: PUSH
11521: LD_INT 10
11523: PUSH
11524: LD_INT 8
11526: PUSH
11527: LD_INT 6
11529: PUSH
11530: LD_INT 5
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: PUSH
11539: LD_OWVAR 67
11543: ARRAY
11544: LESS
11545: IFFALSE 11624
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
11547: LD_INT 21
11549: PPUSH
11550: LD_INT 1
11552: PPUSH
11553: LD_INT 1
11555: PPUSH
11556: LD_INT 51
11558: PPUSH
11559: LD_INT 12
11561: PPUSH
11562: CALL 30161 0 5
// veh := CreateVehicle ;
11566: LD_ADDR_VAR 0 6
11570: PUSH
11571: CALL_OW 45
11575: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
11576: LD_VAR 0 6
11580: PPUSH
11581: LD_INT 269
11583: PPUSH
11584: LD_INT 66
11586: PPUSH
11587: LD_INT 4
11589: PPUSH
11590: LD_INT 0
11592: PPUSH
11593: CALL 64110 0 5
// SetLives ( veh , 333 ) ;
11597: LD_VAR 0 6
11601: PPUSH
11602: LD_INT 333
11604: PPUSH
11605: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
11609: LD_VAR 0 6
11613: PPUSH
11614: LD_INT 2
11616: PPUSH
11617: LD_INT 100
11619: PPUSH
11620: CALL_OW 290
// end ; end ;
11624: LD_VAR 0 1
11628: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
11629: LD_EXP 51
11633: PUSH
11634: LD_EXP 51
11638: PPUSH
11639: CALL_OW 255
11643: PUSH
11644: LD_INT 3
11646: EQUAL
11647: AND
11648: IFFALSE 11811
11650: GO 11652
11652: DISABLE
11653: LD_INT 0
11655: PPUSH
// begin enable ;
11656: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
11657: LD_INT 81
11659: PUSH
11660: LD_INT 3
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PUSH
11667: LD_INT 91
11669: PUSH
11670: LD_EXP 51
11674: PUSH
11675: LD_INT 15
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: LIST
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PPUSH
11687: CALL_OW 69
11691: IFFALSE 11771
// begin if not IsDrivenBy ( ruBlockadeTank ) then
11693: LD_EXP 51
11697: PPUSH
11698: CALL_OW 311
11702: NOT
11703: IFFALSE 11769
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
11705: LD_ADDR_VAR 0 1
11709: PUSH
11710: LD_INT 22
11712: PUSH
11713: LD_INT 3
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: LD_INT 21
11722: PUSH
11723: LD_INT 1
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: PPUSH
11734: CALL_OW 69
11738: PPUSH
11739: LD_EXP 51
11743: PPUSH
11744: CALL_OW 74
11748: ST_TO_ADDR
// if driver then
11749: LD_VAR 0 1
11753: IFFALSE 11769
// ComEnterUnit ( driver , ruBlockadeTank ) ;
11755: LD_VAR 0 1
11759: PPUSH
11760: LD_EXP 51
11764: PPUSH
11765: CALL_OW 120
// end ; exit ;
11769: GO 11811
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
11771: LD_EXP 51
11775: PPUSH
11776: CALL_OW 256
11780: PUSH
11781: LD_INT 1000
11783: LESS
11784: PUSH
11785: LD_EXP 51
11789: PPUSH
11790: CALL_OW 311
11794: AND
11795: IFFALSE 11811
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
11797: LD_EXP 51
11801: PPUSH
11802: CALL_OW 311
11806: PPUSH
11807: CALL 63670 0 1
// end ;
11811: PPOPN 1
11813: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
11814: LD_EXP 53
11818: PPUSH
11819: LD_INT 3
11821: PUSH
11822: LD_INT 24
11824: PUSH
11825: LD_INT 1000
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PPUSH
11836: CALL_OW 72
11840: PUSH
11841: LD_EXP 53
11845: PPUSH
11846: LD_INT 25
11848: PUSH
11849: LD_INT 4
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: LD_INT 50
11858: PUSH
11859: EMPTY
11860: LIST
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PPUSH
11866: CALL_OW 72
11870: AND
11871: IFFALSE 12059
11873: GO 11875
11875: DISABLE
11876: LD_INT 0
11878: PPUSH
11879: PPUSH
11880: PPUSH
// begin enable ;
11881: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
11882: LD_ADDR_VAR 0 3
11886: PUSH
11887: LD_EXP 53
11891: PPUSH
11892: LD_INT 3
11894: PUSH
11895: LD_INT 24
11897: PUSH
11898: LD_INT 1000
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PPUSH
11909: CALL_OW 72
11913: PPUSH
11914: LD_INT 1
11916: PPUSH
11917: CALL 63910 0 2
11921: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
11922: LD_ADDR_VAR 0 2
11926: PUSH
11927: LD_EXP 53
11931: PPUSH
11932: LD_INT 25
11934: PUSH
11935: LD_INT 4
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: PUSH
11942: LD_INT 50
11944: PUSH
11945: EMPTY
11946: LIST
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PPUSH
11952: CALL_OW 72
11956: PUSH
11957: LD_INT 1
11959: ARRAY
11960: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
11961: LD_VAR 0 2
11965: PPUSH
11966: LD_VAR 0 3
11970: PUSH
11971: LD_INT 1
11973: ARRAY
11974: PPUSH
11975: CALL 59264 0 2
11979: NOT
11980: IFFALSE 12059
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
11982: LD_VAR 0 3
11986: PUSH
11987: LD_INT 1
11989: ARRAY
11990: PPUSH
11991: LD_INT 9
11993: PPUSH
11994: CALL_OW 308
11998: NOT
11999: IFFALSE 12017
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
12001: LD_VAR 0 3
12005: PUSH
12006: LD_INT 1
12008: ARRAY
12009: PPUSH
12010: LD_INT 9
12012: PPUSH
12013: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
12017: LD_VAR 0 2
12021: PPUSH
12022: LD_VAR 0 3
12026: PUSH
12027: LD_INT 1
12029: ARRAY
12030: PPUSH
12031: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
12035: LD_VAR 0 2
12039: PPUSH
12040: LD_INT 179
12042: PPUSH
12043: LD_INT 113
12045: PPUSH
12046: CALL_OW 171
// AddComHold ( sci ) ;
12050: LD_VAR 0 2
12054: PPUSH
12055: CALL_OW 200
// end ; end ;
12059: PPOPN 3
12061: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
12062: LD_INT 2
12064: PPUSH
12065: LD_INT 52
12067: PPUSH
12068: CALL_OW 292
12072: IFFALSE 12177
12074: GO 12076
12076: DISABLE
12077: LD_INT 0
12079: PPUSH
12080: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
12081: LD_ADDR_VAR 0 2
12085: PUSH
12086: LD_EXP 55
12090: PPUSH
12091: LD_INT 25
12093: PUSH
12094: LD_INT 1
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PUSH
12101: LD_INT 50
12103: PUSH
12104: EMPTY
12105: LIST
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PPUSH
12111: CALL_OW 72
12115: ST_TO_ADDR
// if not tmp then
12116: LD_VAR 0 2
12120: NOT
12121: IFFALSE 12125
// exit ;
12123: GO 12177
// for i in tmp do
12125: LD_ADDR_VAR 0 1
12129: PUSH
12130: LD_VAR 0 2
12134: PUSH
12135: FOR_IN
12136: IFFALSE 12175
// begin if IsInUnit ( i ) then
12138: LD_VAR 0 1
12142: PPUSH
12143: CALL_OW 310
12147: IFFALSE 12158
// ComExitBuilding ( i ) ;
12149: LD_VAR 0 1
12153: PPUSH
12154: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
12158: LD_VAR 0 1
12162: PPUSH
12163: LD_INT 84
12165: PPUSH
12166: LD_INT 133
12168: PPUSH
12169: CALL_OW 174
// end ;
12173: GO 12135
12175: POP
12176: POP
// end ;
12177: PPOPN 2
12179: END
// every 0 0$1 trigger leninSpotted do var i , tmp , weapon ;
12180: LD_EXP 14
12184: IFFALSE 12344
12186: GO 12188
12188: DISABLE
12189: LD_INT 0
12191: PPUSH
12192: PPUSH
12193: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
12194: LD_ADDR_VAR 0 2
12198: PUSH
12199: LD_INT 72
12201: PUSH
12202: LD_INT 12
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket_launcher , ru_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] ] [ Difficulty ] ;
12209: LD_ADDR_VAR 0 3
12213: PUSH
12214: LD_INT 44
12216: PUSH
12217: LD_INT 43
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: PUSH
12224: LD_INT 45
12226: PUSH
12227: LD_INT 44
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PUSH
12234: LD_INT 45
12236: PUSH
12237: LD_INT 46
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: LD_INT 45
12246: PUSH
12247: LD_INT 46
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: PUSH
12260: LD_OWVAR 67
12264: ARRAY
12265: ST_TO_ADDR
// for i := 1 to 6 do
12266: LD_ADDR_VAR 0 1
12270: PUSH
12271: DOUBLE
12272: LD_INT 1
12274: DEC
12275: ST_TO_ADDR
12276: LD_INT 6
12278: PUSH
12279: FOR_TO
12280: IFFALSE 12342
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
12282: LD_VAR 0 2
12286: PPUSH
12287: LD_INT 22
12289: PUSH
12290: LD_INT 23
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: PUSH
12297: LD_VAR 0 1
12301: PUSH
12302: LD_INT 2
12304: MOD
12305: PUSH
12306: LD_INT 1
12308: PLUS
12309: ARRAY
12310: PPUSH
12311: LD_INT 1
12313: PPUSH
12314: LD_INT 1
12316: PPUSH
12317: LD_VAR 0 3
12321: PUSH
12322: LD_VAR 0 1
12326: PUSH
12327: LD_INT 2
12329: MOD
12330: PUSH
12331: LD_INT 1
12333: PLUS
12334: ARRAY
12335: PPUSH
12336: CALL_OW 185
12340: GO 12279
12342: POP
12343: POP
// end ;
12344: PPOPN 3
12346: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
12347: LD_EXP 11
12351: IFFALSE 13500
12353: GO 12355
12355: DISABLE
12356: LD_INT 0
12358: PPUSH
12359: PPUSH
12360: PPUSH
12361: PPUSH
12362: PPUSH
12363: PPUSH
// begin enable ;
12364: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
12365: LD_ADDR_VAR 0 6
12369: PUSH
12370: LD_INT 10
12372: PPUSH
12373: LD_INT 81
12375: PUSH
12376: LD_INT 3
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PPUSH
12383: CALL_OW 70
12387: ST_TO_ADDR
// if ruSpecialVehicleGroup then
12388: LD_EXP 56
12392: IFFALSE 12658
// begin for i in ruSpecialVehicleGroup do
12394: LD_ADDR_VAR 0 1
12398: PUSH
12399: LD_EXP 56
12403: PUSH
12404: FOR_IN
12405: IFFALSE 12656
// begin if enemyInBase then
12407: LD_VAR 0 6
12411: IFFALSE 12654
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
12413: LD_VAR 0 1
12417: PPUSH
12418: CALL_OW 256
12422: PUSH
12423: LD_INT 500
12425: GREATER
12426: PUSH
12427: LD_VAR 0 1
12431: PPUSH
12432: CALL_OW 110
12436: PUSH
12437: LD_INT 0
12439: EQUAL
12440: AND
12441: IFFALSE 12467
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
12443: LD_VAR 0 1
12447: PPUSH
12448: LD_VAR 0 6
12452: PPUSH
12453: LD_VAR 0 1
12457: PPUSH
12458: CALL_OW 74
12462: PPUSH
12463: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
12467: LD_VAR 0 1
12471: PPUSH
12472: CALL_OW 256
12476: PUSH
12477: LD_INT 500
12479: LESSEQUAL
12480: PUSH
12481: LD_VAR 0 1
12485: PPUSH
12486: CALL_OW 110
12490: PUSH
12491: LD_INT 0
12493: EQUAL
12494: AND
12495: IFFALSE 12524
// begin SetTag ( i , 1 ) ;
12497: LD_VAR 0 1
12501: PPUSH
12502: LD_INT 1
12504: PPUSH
12505: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
12509: LD_VAR 0 1
12513: PPUSH
12514: LD_INT 83
12516: PPUSH
12517: LD_INT 134
12519: PPUSH
12520: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
12524: LD_VAR 0 1
12528: PPUSH
12529: CALL_OW 256
12533: PUSH
12534: LD_INT 1000
12536: LESS
12537: PUSH
12538: LD_VAR 0 1
12542: PPUSH
12543: CALL_OW 110
12547: PUSH
12548: LD_INT 1
12550: EQUAL
12551: AND
12552: PUSH
12553: LD_VAR 0 1
12557: PPUSH
12558: LD_INT 83
12560: PPUSH
12561: LD_INT 134
12563: PPUSH
12564: CALL_OW 297
12568: PUSH
12569: LD_INT 6
12571: LESS
12572: AND
12573: IFFALSE 12601
// begin SetFuel ( i , 100 ) ;
12575: LD_VAR 0 1
12579: PPUSH
12580: LD_INT 100
12582: PPUSH
12583: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
12587: LD_VAR 0 1
12591: PPUSH
12592: CALL_OW 310
12596: PPUSH
12597: CALL 63790 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
12601: LD_VAR 0 1
12605: PPUSH
12606: CALL_OW 256
12610: PUSH
12611: LD_INT 1000
12613: EQUAL
12614: PUSH
12615: LD_VAR 0 1
12619: PPUSH
12620: CALL_OW 110
12624: PUSH
12625: LD_INT 1
12627: EQUAL
12628: AND
12629: PUSH
12630: LD_VAR 0 1
12634: PPUSH
12635: CALL_OW 311
12639: AND
12640: IFFALSE 12654
// SetTag ( i , 0 ) ;
12642: LD_VAR 0 1
12646: PPUSH
12647: LD_INT 0
12649: PPUSH
12650: CALL_OW 109
// end ; end ;
12654: GO 12404
12656: POP
12657: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
12658: LD_ADDR_VAR 0 5
12662: PUSH
12663: LD_EXP 55
12667: PPUSH
12668: LD_INT 25
12670: PUSH
12671: LD_INT 4
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: PPUSH
12678: CALL_OW 72
12682: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12683: LD_ADDR_VAR 0 4
12687: PUSH
12688: LD_EXP 55
12692: PPUSH
12693: LD_INT 92
12695: PUSH
12696: LD_INT 92
12698: PUSH
12699: LD_INT 155
12701: PUSH
12702: LD_INT 12
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: PUSH
12711: LD_INT 3
12713: PUSH
12714: LD_INT 24
12716: PUSH
12717: LD_INT 1000
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PPUSH
12732: CALL_OW 72
12736: ST_TO_ADDR
// if sci then
12737: LD_VAR 0 5
12741: IFFALSE 12874
// begin if hurt then
12743: LD_VAR 0 4
12747: IFFALSE 12820
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
12749: LD_VAR 0 5
12753: PPUSH
12754: LD_INT 3
12756: PUSH
12757: LD_INT 54
12759: PUSH
12760: EMPTY
12761: LIST
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: PPUSH
12767: CALL_OW 72
12771: IFFALSE 12800
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
12773: LD_VAR 0 5
12777: PPUSH
12778: LD_INT 3
12780: PUSH
12781: LD_INT 54
12783: PUSH
12784: EMPTY
12785: LIST
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PPUSH
12791: CALL_OW 72
12795: PPUSH
12796: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
12800: LD_VAR 0 5
12804: PPUSH
12805: LD_VAR 0 4
12809: PUSH
12810: LD_INT 1
12812: ARRAY
12813: PPUSH
12814: CALL_OW 188
// end else
12818: GO 12874
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
12820: LD_VAR 0 5
12824: PPUSH
12825: LD_INT 3
12827: PUSH
12828: LD_INT 54
12830: PUSH
12831: EMPTY
12832: LIST
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PPUSH
12838: CALL_OW 72
12842: IFFALSE 12874
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
12844: LD_VAR 0 5
12848: PPUSH
12849: LD_INT 3
12851: PUSH
12852: LD_INT 54
12854: PUSH
12855: EMPTY
12856: LIST
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: PPUSH
12862: CALL_OW 72
12866: PPUSH
12867: LD_INT 17
12869: PPUSH
12870: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12874: LD_ADDR_VAR 0 3
12878: PUSH
12879: LD_INT 10
12881: PPUSH
12882: LD_INT 21
12884: PUSH
12885: LD_INT 3
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: PUSH
12892: LD_INT 3
12894: PUSH
12895: LD_INT 24
12897: PUSH
12898: LD_INT 1000
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PPUSH
12913: CALL_OW 70
12917: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
12918: LD_ADDR_VAR 0 2
12922: PUSH
12923: LD_EXP 55
12927: PPUSH
12928: LD_INT 25
12930: PUSH
12931: LD_INT 2
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: PPUSH
12938: CALL_OW 72
12942: PUSH
12943: LD_INT 22
12945: PUSH
12946: LD_INT 3
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: PUSH
12953: LD_INT 34
12955: PUSH
12956: LD_INT 52
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: PPUSH
12967: CALL_OW 69
12971: UNION
12972: ST_TO_ADDR
// if not tmp then
12973: LD_VAR 0 2
12977: NOT
12978: IFFALSE 12982
// exit ;
12980: GO 13500
// for i in tmp do
12982: LD_ADDR_VAR 0 1
12986: PUSH
12987: LD_VAR 0 2
12991: PUSH
12992: FOR_IN
12993: IFFALSE 13498
// begin if GetClass ( i ) = 2 then
12995: LD_VAR 0 1
12999: PPUSH
13000: CALL_OW 257
13004: PUSH
13005: LD_INT 2
13007: EQUAL
13008: IFFALSE 13231
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
13010: LD_VAR 0 1
13014: PPUSH
13015: CALL_OW 256
13019: PUSH
13020: LD_INT 1000
13022: EQUAL
13023: PUSH
13024: LD_VAR 0 1
13028: PPUSH
13029: CALL_OW 110
13033: PUSH
13034: LD_INT 1
13036: EQUAL
13037: AND
13038: IFFALSE 13052
// SetTag ( i , 0 ) ;
13040: LD_VAR 0 1
13044: PPUSH
13045: LD_INT 0
13047: PPUSH
13048: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
13052: LD_VAR 0 1
13056: PPUSH
13057: CALL_OW 256
13061: PUSH
13062: LD_INT 500
13064: LESSEQUAL
13065: PUSH
13066: LD_VAR 0 1
13070: PPUSH
13071: CALL_OW 110
13075: PUSH
13076: LD_INT 0
13078: EQUAL
13079: AND
13080: IFFALSE 13109
// begin SetTag ( i , 1 ) ;
13082: LD_VAR 0 1
13086: PPUSH
13087: LD_INT 1
13089: PPUSH
13090: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
13094: LD_VAR 0 1
13098: PPUSH
13099: LD_INT 92
13101: PPUSH
13102: LD_INT 155
13104: PPUSH
13105: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
13109: LD_VAR 0 3
13113: PUSH
13114: LD_VAR 0 1
13118: PPUSH
13119: CALL_OW 256
13123: PUSH
13124: LD_INT 500
13126: GREATER
13127: AND
13128: PUSH
13129: LD_VAR 0 1
13133: PPUSH
13134: CALL_OW 110
13138: PUSH
13139: LD_INT 0
13141: EQUAL
13142: AND
13143: PUSH
13144: LD_VAR 0 1
13148: PPUSH
13149: CALL_OW 314
13153: NOT
13154: AND
13155: IFFALSE 13229
// begin if b then
13157: LD_VAR 0 3
13161: IFFALSE 13193
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
13163: LD_VAR 0 1
13167: PPUSH
13168: LD_VAR 0 3
13172: PUSH
13173: LD_INT 1
13175: PPUSH
13176: LD_VAR 0 3
13180: PPUSH
13181: CALL_OW 12
13185: ARRAY
13186: PPUSH
13187: CALL_OW 130
13191: GO 13229
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
13193: LD_VAR 0 1
13197: PPUSH
13198: LD_INT 94
13200: PPUSH
13201: LD_INT 165
13203: PPUSH
13204: CALL_OW 297
13208: PUSH
13209: LD_INT 8
13211: GREATER
13212: IFFALSE 13229
// ComMoveXY ( i , 94 , 165 ) ;
13214: LD_VAR 0 1
13218: PPUSH
13219: LD_INT 94
13221: PPUSH
13222: LD_INT 165
13224: PPUSH
13225: CALL_OW 111
// end ; end else
13229: GO 13496
// if GetWeapon ( i ) = ru_crane then
13231: LD_VAR 0 1
13235: PPUSH
13236: CALL_OW 264
13240: PUSH
13241: LD_INT 52
13243: EQUAL
13244: IFFALSE 13496
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
13246: LD_VAR 0 1
13250: PPUSH
13251: CALL_OW 256
13255: PUSH
13256: LD_INT 1000
13258: EQUAL
13259: PUSH
13260: LD_VAR 0 1
13264: PPUSH
13265: CALL_OW 110
13269: PUSH
13270: LD_INT 1
13272: EQUAL
13273: AND
13274: IFFALSE 13300
// begin SetTag ( i , 0 ) ;
13276: LD_VAR 0 1
13280: PPUSH
13281: LD_INT 0
13283: PPUSH
13284: CALL_OW 109
// SetFuel ( i , 100 ) ;
13288: LD_VAR 0 1
13292: PPUSH
13293: LD_INT 100
13295: PPUSH
13296: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
13300: LD_VAR 0 1
13304: PPUSH
13305: CALL_OW 256
13309: PUSH
13310: LD_INT 500
13312: LESSEQUAL
13313: PUSH
13314: LD_VAR 0 1
13318: PPUSH
13319: CALL_OW 110
13323: PUSH
13324: LD_INT 0
13326: EQUAL
13327: AND
13328: IFFALSE 13371
// begin SetTag ( i , 1 ) ;
13330: LD_VAR 0 1
13334: PPUSH
13335: LD_INT 1
13337: PPUSH
13338: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
13342: LD_VAR 0 1
13346: PPUSH
13347: LD_INT 83
13349: PPUSH
13350: LD_INT 135
13352: PPUSH
13353: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
13357: LD_VAR 0 1
13361: PPUSH
13362: CALL_OW 310
13366: PPUSH
13367: CALL 63790 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
13371: LD_VAR 0 1
13375: PPUSH
13376: CALL_OW 256
13380: PUSH
13381: LD_INT 500
13383: GREATER
13384: PUSH
13385: LD_VAR 0 1
13389: PPUSH
13390: CALL_OW 110
13394: PUSH
13395: LD_INT 0
13397: EQUAL
13398: AND
13399: PUSH
13400: LD_VAR 0 1
13404: PPUSH
13405: CALL_OW 311
13409: AND
13410: PUSH
13411: LD_VAR 0 1
13415: PPUSH
13416: CALL_OW 314
13420: NOT
13421: AND
13422: IFFALSE 13496
// begin if b then
13424: LD_VAR 0 3
13428: IFFALSE 13460
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
13430: LD_VAR 0 1
13434: PPUSH
13435: LD_VAR 0 3
13439: PUSH
13440: LD_INT 1
13442: PPUSH
13443: LD_VAR 0 3
13447: PPUSH
13448: CALL_OW 12
13452: ARRAY
13453: PPUSH
13454: CALL_OW 130
13458: GO 13496
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
13460: LD_VAR 0 1
13464: PPUSH
13465: LD_INT 94
13467: PPUSH
13468: LD_INT 165
13470: PPUSH
13471: CALL_OW 297
13475: PUSH
13476: LD_INT 8
13478: GREATER
13479: IFFALSE 13496
// ComMoveXY ( i , 94 , 165 ) ;
13481: LD_VAR 0 1
13485: PPUSH
13486: LD_INT 94
13488: PPUSH
13489: LD_INT 165
13491: PPUSH
13492: CALL_OW 111
// end ; end ; end ;
13496: GO 12992
13498: POP
13499: POP
// end ;
13500: PPOPN 6
13502: END
// every 8 8$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp ;
13503: LD_EXP 23
13507: NOT
13508: PUSH
13509: LD_EXP 27
13513: NOT
13514: AND
13515: IFFALSE 14431
13517: GO 13519
13519: DISABLE
13520: LD_INT 0
13522: PPUSH
13523: PPUSH
13524: PPUSH
13525: PPUSH
// begin enable ;
13526: ENABLE
// if Prob ( [ 35 , 45 , 55 , 60 ] [ Difficulty ] ) then
13527: LD_INT 35
13529: PUSH
13530: LD_INT 45
13532: PUSH
13533: LD_INT 55
13535: PUSH
13536: LD_INT 60
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: PUSH
13545: LD_OWVAR 67
13549: ARRAY
13550: PPUSH
13551: CALL_OW 13
13555: IFFALSE 13571
// waveStrength := waveStrength + 1 ;
13557: LD_ADDR_EXP 58
13561: PUSH
13562: LD_EXP 58
13566: PUSH
13567: LD_INT 1
13569: PLUS
13570: ST_TO_ADDR
// if waveStrength > [ 4 , 5 , 6 , 7 ] [ Difficulty ] then
13571: LD_EXP 58
13575: PUSH
13576: LD_INT 4
13578: PUSH
13579: LD_INT 5
13581: PUSH
13582: LD_INT 6
13584: PUSH
13585: LD_INT 7
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: PUSH
13594: LD_OWVAR 67
13598: ARRAY
13599: GREATER
13600: IFFALSE 13633
// begin waveStrength := waveStrength + Difficulty ;
13602: LD_ADDR_EXP 58
13606: PUSH
13607: LD_EXP 58
13611: PUSH
13612: LD_OWVAR 67
13616: PLUS
13617: ST_TO_ADDR
// disableAttackOnHeike := true ;
13618: LD_ADDR_EXP 27
13622: PUSH
13623: LD_INT 1
13625: ST_TO_ADDR
// wait ( 3 3$00 ) ;
13626: LD_INT 6300
13628: PPUSH
13629: CALL_OW 67
// end ; if disableAttackOnHeike and Difficulty > 1 then
13633: LD_EXP 27
13637: PUSH
13638: LD_OWVAR 67
13642: PUSH
13643: LD_INT 1
13645: GREATER
13646: AND
13647: IFFALSE 13856
// begin for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
13649: LD_ADDR_VAR 0 1
13653: PUSH
13654: DOUBLE
13655: LD_INT 1
13657: DEC
13658: ST_TO_ADDR
13659: LD_INT 3
13661: PUSH
13662: LD_INT 3
13664: PUSH
13665: LD_INT 4
13667: PUSH
13668: LD_INT 4
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: PUSH
13677: LD_OWVAR 67
13681: ARRAY
13682: PUSH
13683: FOR_TO
13684: IFFALSE 13854
// begin InitHc ;
13686: CALL_OW 19
// InitVc ;
13690: CALL_OW 20
// uc_side := 3 ;
13694: LD_ADDR_OWVAR 20
13698: PUSH
13699: LD_INT 3
13701: ST_TO_ADDR
// uc_nation := 3 ;
13702: LD_ADDR_OWVAR 21
13706: PUSH
13707: LD_INT 3
13709: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
13710: LD_INT 0
13712: PPUSH
13713: LD_INT 1
13715: PPUSH
13716: LD_OWVAR 67
13720: PUSH
13721: LD_INT 2
13723: PLUS
13724: PPUSH
13725: CALL_OW 380
// un := CreateHuman ;
13729: LD_ADDR_VAR 0 2
13733: PUSH
13734: CALL_OW 44
13738: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
13739: LD_VAR 0 2
13743: PPUSH
13744: LD_INT 160
13746: PPUSH
13747: LD_INT 3
13749: PPUSH
13750: LD_INT 2
13752: PPUSH
13753: LD_INT 0
13755: PPUSH
13756: CALL 64110 0 5
// SetClass ( un , class_bazooker ) ;
13760: LD_VAR 0 2
13764: PPUSH
13765: LD_INT 9
13767: PPUSH
13768: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
13772: LD_ADDR_EXP 57
13776: PUSH
13777: LD_EXP 57
13781: PPUSH
13782: LD_EXP 57
13786: PUSH
13787: LD_INT 1
13789: PLUS
13790: PPUSH
13791: LD_VAR 0 2
13795: PPUSH
13796: CALL_OW 1
13800: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
13801: LD_VAR 0 2
13805: PPUSH
13806: LD_INT 177
13808: PPUSH
13809: LD_INT 17
13811: PPUSH
13812: CALL_OW 111
// wait ( 0 0$2 ) ;
13816: LD_INT 70
13818: PPUSH
13819: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
13823: LD_ADDR_VAR 0 4
13827: PUSH
13828: LD_VAR 0 4
13832: PPUSH
13833: LD_VAR 0 4
13837: PUSH
13838: LD_INT 1
13840: PLUS
13841: PPUSH
13842: LD_VAR 0 2
13846: PPUSH
13847: CALL_OW 1
13851: ST_TO_ADDR
// end ;
13852: GO 13683
13854: POP
13855: POP
// end ; for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] + waveStrength do
13856: LD_ADDR_VAR 0 1
13860: PUSH
13861: DOUBLE
13862: LD_INT 1
13864: DEC
13865: ST_TO_ADDR
13866: LD_INT 2
13868: PUSH
13869: LD_INT 3
13871: PUSH
13872: LD_INT 4
13874: PUSH
13875: LD_INT 5
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: PUSH
13884: LD_OWVAR 67
13888: ARRAY
13889: PUSH
13890: LD_EXP 58
13894: PLUS
13895: PUSH
13896: FOR_TO
13897: IFFALSE 14206
// begin InitHc ;
13899: CALL_OW 19
// InitVc ;
13903: CALL_OW 20
// uc_side := 3 ;
13907: LD_ADDR_OWVAR 20
13911: PUSH
13912: LD_INT 3
13914: ST_TO_ADDR
// uc_nation := 3 ;
13915: LD_ADDR_OWVAR 21
13919: PUSH
13920: LD_INT 3
13922: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
13923: LD_INT 22
13925: PUSH
13926: LD_INT 23
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PUSH
13933: LD_INT 1
13935: PPUSH
13936: LD_INT 2
13938: PPUSH
13939: CALL_OW 12
13943: ARRAY
13944: PPUSH
13945: LD_INT 1
13947: PPUSH
13948: LD_INT 1
13950: PPUSH
13951: LD_INT 44
13953: PUSH
13954: LD_INT 45
13956: PUSH
13957: LD_INT 43
13959: PUSH
13960: LD_INT 42
13962: PUSH
13963: LD_INT 44
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: PUSH
13973: LD_INT 1
13975: PPUSH
13976: LD_INT 5
13978: PPUSH
13979: CALL_OW 12
13983: ARRAY
13984: PPUSH
13985: LD_INT 99
13987: PPUSH
13988: CALL 30161 0 5
// veh := CreateVehicle ;
13992: LD_ADDR_VAR 0 3
13996: PUSH
13997: CALL_OW 45
14001: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
14002: LD_VAR 0 3
14006: PPUSH
14007: LD_INT 160
14009: PPUSH
14010: LD_INT 3
14012: PPUSH
14013: LD_INT 2
14015: PPUSH
14016: LD_INT 0
14018: PPUSH
14019: CALL 64110 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14023: LD_ADDR_EXP 57
14027: PUSH
14028: LD_EXP 57
14032: PPUSH
14033: LD_EXP 57
14037: PUSH
14038: LD_INT 1
14040: PLUS
14041: PPUSH
14042: LD_VAR 0 3
14046: PPUSH
14047: CALL_OW 1
14051: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
14052: LD_INT 0
14054: PPUSH
14055: LD_INT 3
14057: PPUSH
14058: LD_OWVAR 67
14062: PUSH
14063: LD_INT 2
14065: PLUS
14066: PPUSH
14067: CALL_OW 380
// un := CreateHuman ;
14071: LD_ADDR_VAR 0 2
14075: PUSH
14076: CALL_OW 44
14080: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14081: LD_VAR 0 2
14085: PPUSH
14086: LD_VAR 0 3
14090: PPUSH
14091: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14095: LD_ADDR_EXP 57
14099: PUSH
14100: LD_EXP 57
14104: PPUSH
14105: LD_EXP 57
14109: PUSH
14110: LD_INT 1
14112: PLUS
14113: PPUSH
14114: LD_VAR 0 2
14118: PPUSH
14119: CALL_OW 1
14123: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
14124: LD_VAR 0 2
14128: PPUSH
14129: LD_INT 177
14131: PPUSH
14132: LD_INT 17
14134: PPUSH
14135: CALL_OW 111
// wait ( 0 0$2 ) ;
14139: LD_INT 70
14141: PPUSH
14142: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14146: LD_ADDR_VAR 0 4
14150: PUSH
14151: LD_VAR 0 4
14155: PPUSH
14156: LD_VAR 0 4
14160: PUSH
14161: LD_INT 1
14163: PLUS
14164: PPUSH
14165: LD_VAR 0 3
14169: PPUSH
14170: CALL_OW 1
14174: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14175: LD_ADDR_VAR 0 4
14179: PUSH
14180: LD_VAR 0 4
14184: PPUSH
14185: LD_VAR 0 4
14189: PUSH
14190: LD_INT 1
14192: PLUS
14193: PPUSH
14194: LD_VAR 0 2
14198: PPUSH
14199: CALL_OW 1
14203: ST_TO_ADDR
// end ;
14204: GO 13896
14206: POP
14207: POP
// for i in tmp do
14208: LD_ADDR_VAR 0 1
14212: PUSH
14213: LD_VAR 0 4
14217: PUSH
14218: FOR_IN
14219: IFFALSE 14309
// begin if Prob ( 50 ) then
14221: LD_INT 50
14223: PPUSH
14224: CALL_OW 13
14228: IFFALSE 14247
// ComAgressiveMove ( i , 206 , 73 ) else
14230: LD_VAR 0 1
14234: PPUSH
14235: LD_INT 206
14237: PPUSH
14238: LD_INT 73
14240: PPUSH
14241: CALL_OW 114
14245: GO 14307
// begin ComAgressiveMove ( i , 206 , 73 ) ;
14247: LD_VAR 0 1
14251: PPUSH
14252: LD_INT 206
14254: PPUSH
14255: LD_INT 73
14257: PPUSH
14258: CALL_OW 114
// AddComAgressiveMove ( i , 257 , 105 ) ;
14262: LD_VAR 0 1
14266: PPUSH
14267: LD_INT 257
14269: PPUSH
14270: LD_INT 105
14272: PPUSH
14273: CALL_OW 174
// AddComAgressiveMove ( i , 227 , 97 ) ;
14277: LD_VAR 0 1
14281: PPUSH
14282: LD_INT 227
14284: PPUSH
14285: LD_INT 97
14287: PPUSH
14288: CALL_OW 174
// AddComAgressiveMove ( i , 206 , 73 ) ;
14292: LD_VAR 0 1
14296: PPUSH
14297: LD_INT 206
14299: PPUSH
14300: LD_INT 73
14302: PPUSH
14303: CALL_OW 174
// end ; end ;
14307: GO 14218
14309: POP
14310: POP
// repeat wait ( 0 0$1 ) ;
14311: LD_INT 35
14313: PPUSH
14314: CALL_OW 67
// for i in tmp do
14318: LD_ADDR_VAR 0 1
14322: PUSH
14323: LD_VAR 0 4
14327: PUSH
14328: FOR_IN
14329: IFFALSE 14408
// if IsDead ( i ) then
14331: LD_VAR 0 1
14335: PPUSH
14336: CALL_OW 301
14340: IFFALSE 14360
// tmp := tmp diff i else
14342: LD_ADDR_VAR 0 4
14346: PUSH
14347: LD_VAR 0 4
14351: PUSH
14352: LD_VAR 0 1
14356: DIFF
14357: ST_TO_ADDR
14358: GO 14406
// if not HasTask ( i ) then
14360: LD_VAR 0 1
14364: PPUSH
14365: CALL_OW 314
14369: NOT
14370: IFFALSE 14406
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
14372: LD_VAR 0 1
14376: PPUSH
14377: LD_INT 81
14379: PUSH
14380: LD_INT 3
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: PPUSH
14387: CALL_OW 69
14391: PPUSH
14392: LD_VAR 0 1
14396: PPUSH
14397: CALL_OW 74
14401: PPUSH
14402: CALL_OW 115
14406: GO 14328
14408: POP
14409: POP
// until not tmp ;
14410: LD_VAR 0 4
14414: NOT
14415: IFFALSE 14311
// if firstAttack then
14417: LD_EXP 28
14421: IFFALSE 14431
// firstAttack := false ;
14423: LD_ADDR_EXP 28
14427: PUSH
14428: LD_INT 0
14430: ST_TO_ADDR
// end ;
14431: PPOPN 4
14433: END
// every 8 8$00 trigger not omarAttack and bergkampfArrived and not rolfHasVehicles do var i , un , veh , tmp ;
14434: LD_EXP 23
14438: NOT
14439: PUSH
14440: LD_EXP 3
14444: AND
14445: PUSH
14446: LD_EXP 16
14450: NOT
14451: AND
14452: IFFALSE 15292
14454: GO 14456
14456: DISABLE
14457: LD_INT 0
14459: PPUSH
14460: PPUSH
14461: PPUSH
14462: PPUSH
// begin enable ;
14463: ENABLE
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
14464: LD_ADDR_VAR 0 1
14468: PUSH
14469: DOUBLE
14470: LD_INT 1
14472: DEC
14473: ST_TO_ADDR
14474: LD_INT 1
14476: PUSH
14477: LD_INT 2
14479: PUSH
14480: LD_INT 2
14482: PUSH
14483: LD_INT 3
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: PUSH
14492: LD_OWVAR 67
14496: ARRAY
14497: PUSH
14498: FOR_TO
14499: IFFALSE 14800
// begin InitHc ;
14501: CALL_OW 19
// InitVc ;
14505: CALL_OW 20
// uc_side := 3 ;
14509: LD_ADDR_OWVAR 20
14513: PUSH
14514: LD_INT 3
14516: ST_TO_ADDR
// uc_nation := 3 ;
14517: LD_ADDR_OWVAR 21
14521: PUSH
14522: LD_INT 3
14524: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
14525: LD_INT 22
14527: PUSH
14528: LD_INT 23
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: PUSH
14535: LD_INT 1
14537: PPUSH
14538: LD_INT 2
14540: PPUSH
14541: CALL_OW 12
14545: ARRAY
14546: PPUSH
14547: LD_INT 1
14549: PPUSH
14550: LD_INT 1
14552: PPUSH
14553: LD_INT 44
14555: PUSH
14556: LD_INT 43
14558: PUSH
14559: LD_INT 42
14561: PUSH
14562: LD_INT 44
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: PUSH
14571: LD_INT 1
14573: PPUSH
14574: LD_INT 4
14576: PPUSH
14577: CALL_OW 12
14581: ARRAY
14582: PPUSH
14583: LD_INT 99
14585: PPUSH
14586: CALL 30161 0 5
// veh := CreateVehicle ;
14590: LD_ADDR_VAR 0 3
14594: PUSH
14595: CALL_OW 45
14599: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
14600: LD_VAR 0 3
14604: PPUSH
14605: LD_INT 5
14607: PPUSH
14608: LD_INT 3
14610: PPUSH
14611: LD_INT 2
14613: PPUSH
14614: LD_INT 0
14616: PPUSH
14617: CALL 64110 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14621: LD_ADDR_EXP 57
14625: PUSH
14626: LD_EXP 57
14630: PPUSH
14631: LD_EXP 57
14635: PUSH
14636: LD_INT 1
14638: PLUS
14639: PPUSH
14640: LD_VAR 0 3
14644: PPUSH
14645: CALL_OW 1
14649: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
14650: LD_INT 0
14652: PPUSH
14653: LD_INT 3
14655: PPUSH
14656: LD_OWVAR 67
14660: PPUSH
14661: CALL_OW 380
// un := CreateHuman ;
14665: LD_ADDR_VAR 0 2
14669: PUSH
14670: CALL_OW 44
14674: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14675: LD_VAR 0 2
14679: PPUSH
14680: LD_VAR 0 3
14684: PPUSH
14685: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14689: LD_ADDR_EXP 57
14693: PUSH
14694: LD_EXP 57
14698: PPUSH
14699: LD_EXP 57
14703: PUSH
14704: LD_INT 1
14706: PLUS
14707: PPUSH
14708: LD_VAR 0 2
14712: PPUSH
14713: CALL_OW 1
14717: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
14718: LD_VAR 0 2
14722: PPUSH
14723: LD_INT 23
14725: PPUSH
14726: LD_INT 7
14728: PPUSH
14729: CALL_OW 111
// wait ( 0 0$2 ) ;
14733: LD_INT 70
14735: PPUSH
14736: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14740: LD_ADDR_VAR 0 4
14744: PUSH
14745: LD_VAR 0 4
14749: PPUSH
14750: LD_VAR 0 4
14754: PUSH
14755: LD_INT 1
14757: PLUS
14758: PPUSH
14759: LD_VAR 0 3
14763: PPUSH
14764: CALL_OW 1
14768: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14769: LD_ADDR_VAR 0 4
14773: PUSH
14774: LD_VAR 0 4
14778: PPUSH
14779: LD_VAR 0 4
14783: PUSH
14784: LD_INT 1
14786: PLUS
14787: PPUSH
14788: LD_VAR 0 2
14792: PPUSH
14793: CALL_OW 1
14797: ST_TO_ADDR
// end ;
14798: GO 14498
14800: POP
14801: POP
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + waveStrength do
14802: LD_ADDR_VAR 0 1
14806: PUSH
14807: DOUBLE
14808: LD_INT 1
14810: DEC
14811: ST_TO_ADDR
14812: LD_INT 3
14814: PUSH
14815: LD_INT 4
14817: PUSH
14818: LD_INT 4
14820: PUSH
14821: LD_INT 5
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: PUSH
14830: LD_OWVAR 67
14834: ARRAY
14835: PUSH
14836: LD_EXP 58
14840: PLUS
14841: PUSH
14842: FOR_TO
14843: IFFALSE 15152
// begin InitHc ;
14845: CALL_OW 19
// InitVc ;
14849: CALL_OW 20
// uc_side := 3 ;
14853: LD_ADDR_OWVAR 20
14857: PUSH
14858: LD_INT 3
14860: ST_TO_ADDR
// uc_nation := 3 ;
14861: LD_ADDR_OWVAR 21
14865: PUSH
14866: LD_INT 3
14868: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
14869: LD_INT 22
14871: PUSH
14872: LD_INT 23
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: LD_INT 1
14881: PPUSH
14882: LD_INT 2
14884: PPUSH
14885: CALL_OW 12
14889: ARRAY
14890: PPUSH
14891: LD_INT 1
14893: PPUSH
14894: LD_INT 1
14896: PPUSH
14897: LD_INT 44
14899: PUSH
14900: LD_INT 45
14902: PUSH
14903: LD_INT 43
14905: PUSH
14906: LD_INT 42
14908: PUSH
14909: LD_INT 44
14911: PUSH
14912: EMPTY
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: PUSH
14919: LD_INT 1
14921: PPUSH
14922: LD_INT 5
14924: PPUSH
14925: CALL_OW 12
14929: ARRAY
14930: PPUSH
14931: LD_INT 99
14933: PPUSH
14934: CALL 30161 0 5
// veh := CreateVehicle ;
14938: LD_ADDR_VAR 0 3
14942: PUSH
14943: CALL_OW 45
14947: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
14948: LD_VAR 0 3
14952: PPUSH
14953: LD_INT 127
14955: PPUSH
14956: LD_INT 243
14958: PPUSH
14959: LD_INT 0
14961: PPUSH
14962: LD_INT 0
14964: PPUSH
14965: CALL 64110 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14969: LD_ADDR_EXP 57
14973: PUSH
14974: LD_EXP 57
14978: PPUSH
14979: LD_EXP 57
14983: PUSH
14984: LD_INT 1
14986: PLUS
14987: PPUSH
14988: LD_VAR 0 3
14992: PPUSH
14993: CALL_OW 1
14997: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
14998: LD_INT 0
15000: PPUSH
15001: LD_INT 3
15003: PPUSH
15004: LD_OWVAR 67
15008: PUSH
15009: LD_INT 2
15011: PLUS
15012: PPUSH
15013: CALL_OW 380
// un := CreateHuman ;
15017: LD_ADDR_VAR 0 2
15021: PUSH
15022: CALL_OW 44
15026: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15027: LD_VAR 0 2
15031: PPUSH
15032: LD_VAR 0 3
15036: PPUSH
15037: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
15041: LD_ADDR_EXP 57
15045: PUSH
15046: LD_EXP 57
15050: PPUSH
15051: LD_EXP 57
15055: PUSH
15056: LD_INT 1
15058: PLUS
15059: PPUSH
15060: LD_VAR 0 2
15064: PPUSH
15065: CALL_OW 1
15069: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
15070: LD_VAR 0 2
15074: PPUSH
15075: LD_INT 130
15077: PPUSH
15078: LD_INT 233
15080: PPUSH
15081: CALL_OW 111
// wait ( 0 0$2 ) ;
15085: LD_INT 70
15087: PPUSH
15088: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
15092: LD_ADDR_VAR 0 4
15096: PUSH
15097: LD_VAR 0 4
15101: PPUSH
15102: LD_VAR 0 4
15106: PUSH
15107: LD_INT 1
15109: PLUS
15110: PPUSH
15111: LD_VAR 0 3
15115: PPUSH
15116: CALL_OW 1
15120: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
15121: LD_ADDR_VAR 0 4
15125: PUSH
15126: LD_VAR 0 4
15130: PPUSH
15131: LD_VAR 0 4
15135: PUSH
15136: LD_INT 1
15138: PLUS
15139: PPUSH
15140: LD_VAR 0 2
15144: PPUSH
15145: CALL_OW 1
15149: ST_TO_ADDR
// end ;
15150: GO 14842
15152: POP
15153: POP
// for i in tmp do
15154: LD_ADDR_VAR 0 1
15158: PUSH
15159: LD_VAR 0 4
15163: PUSH
15164: FOR_IN
15165: IFFALSE 15184
// ComAgressiveMove ( i , 76 , 49 ) ;
15167: LD_VAR 0 1
15171: PPUSH
15172: LD_INT 76
15174: PPUSH
15175: LD_INT 49
15177: PPUSH
15178: CALL_OW 114
15182: GO 15164
15184: POP
15185: POP
// repeat wait ( 0 0$1 ) ;
15186: LD_INT 35
15188: PPUSH
15189: CALL_OW 67
// for i in tmp do
15193: LD_ADDR_VAR 0 1
15197: PUSH
15198: LD_VAR 0 4
15202: PUSH
15203: FOR_IN
15204: IFFALSE 15283
// if IsDead ( i ) then
15206: LD_VAR 0 1
15210: PPUSH
15211: CALL_OW 301
15215: IFFALSE 15235
// tmp := tmp diff i else
15217: LD_ADDR_VAR 0 4
15221: PUSH
15222: LD_VAR 0 4
15226: PUSH
15227: LD_VAR 0 1
15231: DIFF
15232: ST_TO_ADDR
15233: GO 15281
// if not HasTask ( i ) then
15235: LD_VAR 0 1
15239: PPUSH
15240: CALL_OW 314
15244: NOT
15245: IFFALSE 15281
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
15247: LD_VAR 0 1
15251: PPUSH
15252: LD_INT 81
15254: PUSH
15255: LD_INT 3
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: PPUSH
15262: CALL_OW 69
15266: PPUSH
15267: LD_VAR 0 1
15271: PPUSH
15272: CALL_OW 74
15276: PPUSH
15277: CALL_OW 115
15281: GO 15203
15283: POP
15284: POP
// until not tmp ;
15285: LD_VAR 0 4
15289: NOT
15290: IFFALSE 15186
// end ;
15292: PPOPN 4
15294: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
15295: LD_EXP 6
15299: IFFALSE 15770
15301: GO 15303
15303: DISABLE
15304: LD_INT 0
15306: PPUSH
15307: PPUSH
15308: PPUSH
15309: PPUSH
// begin wait ( 3 3$00 ) ;
15310: LD_INT 6300
15312: PPUSH
15313: CALL_OW 67
// for i := 1 to 3 do
15317: LD_ADDR_VAR 0 1
15321: PUSH
15322: DOUBLE
15323: LD_INT 1
15325: DEC
15326: ST_TO_ADDR
15327: LD_INT 3
15329: PUSH
15330: FOR_TO
15331: IFFALSE 15630
// begin InitHc ;
15333: CALL_OW 19
// InitVc ;
15337: CALL_OW 20
// uc_side := 3 ;
15341: LD_ADDR_OWVAR 20
15345: PUSH
15346: LD_INT 3
15348: ST_TO_ADDR
// uc_nation := 3 ;
15349: LD_ADDR_OWVAR 21
15353: PUSH
15354: LD_INT 3
15356: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
15357: LD_INT 22
15359: PUSH
15360: LD_INT 23
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: LD_INT 1
15369: PPUSH
15370: LD_INT 2
15372: PPUSH
15373: CALL_OW 12
15377: ARRAY
15378: PPUSH
15379: LD_INT 1
15381: PPUSH
15382: LD_INT 1
15384: PPUSH
15385: LD_INT 44
15387: PUSH
15388: LD_INT 43
15390: PUSH
15391: LD_INT 42
15393: PUSH
15394: LD_INT 44
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: PUSH
15403: LD_INT 1
15405: PPUSH
15406: LD_INT 4
15408: PPUSH
15409: CALL_OW 12
15413: ARRAY
15414: PPUSH
15415: LD_INT 99
15417: PPUSH
15418: CALL 30161 0 5
// veh := CreateVehicle ;
15422: LD_ADDR_VAR 0 3
15426: PUSH
15427: CALL_OW 45
15431: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
15432: LD_VAR 0 3
15436: PPUSH
15437: LD_INT 293
15439: PPUSH
15440: LD_INT 246
15442: PPUSH
15443: LD_INT 5
15445: PPUSH
15446: LD_INT 0
15448: PPUSH
15449: CALL 64110 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
15453: LD_ADDR_EXP 57
15457: PUSH
15458: LD_EXP 57
15462: PPUSH
15463: LD_EXP 57
15467: PUSH
15468: LD_INT 1
15470: PLUS
15471: PPUSH
15472: LD_VAR 0 3
15476: PPUSH
15477: CALL_OW 1
15481: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
15482: LD_INT 0
15484: PPUSH
15485: LD_INT 3
15487: PPUSH
15488: LD_INT 3
15490: PPUSH
15491: CALL_OW 380
// un := CreateHuman ;
15495: LD_ADDR_VAR 0 2
15499: PUSH
15500: CALL_OW 44
15504: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15505: LD_VAR 0 2
15509: PPUSH
15510: LD_VAR 0 3
15514: PPUSH
15515: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
15519: LD_ADDR_EXP 57
15523: PUSH
15524: LD_EXP 57
15528: PPUSH
15529: LD_EXP 57
15533: PUSH
15534: LD_INT 1
15536: PLUS
15537: PPUSH
15538: LD_VAR 0 2
15542: PPUSH
15543: CALL_OW 1
15547: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
15548: LD_VAR 0 2
15552: PPUSH
15553: LD_INT 273
15555: PPUSH
15556: LD_INT 227
15558: PPUSH
15559: CALL_OW 111
// wait ( 0 0$2 ) ;
15563: LD_INT 70
15565: PPUSH
15566: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
15570: LD_ADDR_VAR 0 4
15574: PUSH
15575: LD_VAR 0 4
15579: PPUSH
15580: LD_VAR 0 4
15584: PUSH
15585: LD_INT 1
15587: PLUS
15588: PPUSH
15589: LD_VAR 0 3
15593: PPUSH
15594: CALL_OW 1
15598: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
15599: LD_ADDR_VAR 0 4
15603: PUSH
15604: LD_VAR 0 4
15608: PPUSH
15609: LD_VAR 0 4
15613: PUSH
15614: LD_INT 1
15616: PLUS
15617: PPUSH
15618: LD_VAR 0 2
15622: PPUSH
15623: CALL_OW 1
15627: ST_TO_ADDR
// end ;
15628: GO 15330
15630: POP
15631: POP
// for i in tmp do
15632: LD_ADDR_VAR 0 1
15636: PUSH
15637: LD_VAR 0 4
15641: PUSH
15642: FOR_IN
15643: IFFALSE 15662
// ComAgressiveMove ( i , 330 , 231 ) ;
15645: LD_VAR 0 1
15649: PPUSH
15650: LD_INT 330
15652: PPUSH
15653: LD_INT 231
15655: PPUSH
15656: CALL_OW 114
15660: GO 15642
15662: POP
15663: POP
// repeat wait ( 0 0$1 ) ;
15664: LD_INT 35
15666: PPUSH
15667: CALL_OW 67
// for i in tmp do
15671: LD_ADDR_VAR 0 1
15675: PUSH
15676: LD_VAR 0 4
15680: PUSH
15681: FOR_IN
15682: IFFALSE 15761
// if IsDead ( i ) then
15684: LD_VAR 0 1
15688: PPUSH
15689: CALL_OW 301
15693: IFFALSE 15713
// tmp := tmp diff i else
15695: LD_ADDR_VAR 0 4
15699: PUSH
15700: LD_VAR 0 4
15704: PUSH
15705: LD_VAR 0 1
15709: DIFF
15710: ST_TO_ADDR
15711: GO 15759
// if not HasTask ( i ) then
15713: LD_VAR 0 1
15717: PPUSH
15718: CALL_OW 314
15722: NOT
15723: IFFALSE 15759
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
15725: LD_VAR 0 1
15729: PPUSH
15730: LD_INT 81
15732: PUSH
15733: LD_INT 3
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: PPUSH
15740: CALL_OW 69
15744: PPUSH
15745: LD_VAR 0 1
15749: PPUSH
15750: CALL_OW 74
15754: PPUSH
15755: CALL_OW 115
15759: GO 15681
15761: POP
15762: POP
// until not tmp ;
15763: LD_VAR 0 4
15767: NOT
15768: IFFALSE 15664
// end ;
15770: PPOPN 4
15772: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
15773: LD_INT 3
15775: PUSH
15776: LD_INT 22
15778: PUSH
15779: LD_INT 2
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PUSH
15790: LD_INT 32
15792: PUSH
15793: LD_INT 1
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PPUSH
15804: CALL_OW 69
15808: IFFALSE 15892
15810: GO 15812
15812: DISABLE
15813: LD_INT 0
15815: PPUSH
// begin enable ;
15816: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
15817: LD_ADDR_VAR 0 1
15821: PUSH
15822: LD_INT 3
15824: PUSH
15825: LD_INT 22
15827: PUSH
15828: LD_INT 2
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: PUSH
15835: EMPTY
15836: LIST
15837: LIST
15838: PUSH
15839: LD_INT 32
15841: PUSH
15842: LD_INT 1
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: PPUSH
15853: CALL_OW 69
15857: PUSH
15858: FOR_IN
15859: IFFALSE 15890
// if GetFuel ( i ) < 3 then
15861: LD_VAR 0 1
15865: PPUSH
15866: CALL_OW 261
15870: PUSH
15871: LD_INT 3
15873: LESS
15874: IFFALSE 15888
// SetFuel ( i , 3 ) ;
15876: LD_VAR 0 1
15880: PPUSH
15881: LD_INT 3
15883: PPUSH
15884: CALL_OW 240
15888: GO 15858
15890: POP
15891: POP
// end ; end_of_file
15892: PPOPN 1
15894: END
// export function Action ; begin
15895: LD_INT 0
15897: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
15898: LD_INT 2
15900: PPUSH
15901: LD_INT 4
15903: PPUSH
15904: CALL_OW 332
// Video ( true ) ;
15908: LD_INT 1
15910: PPUSH
15911: CALL 61950 0 1
// music_nat := 3 ;
15915: LD_ADDR_OWVAR 71
15919: PUSH
15920: LD_INT 3
15922: ST_TO_ADDR
// music_class := music_recon ;
15923: LD_ADDR_OWVAR 72
15927: PUSH
15928: LD_INT 3
15930: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
15931: LD_INT 213
15933: PPUSH
15934: LD_INT 89
15936: PPUSH
15937: CALL_OW 86
// if not debug then
15941: LD_EXP 1
15945: NOT
15946: IFFALSE 15980
// begin if Kaia and Olaf then
15948: LD_EXP 35
15952: PUSH
15953: LD_EXP 39
15957: AND
15958: IFFALSE 15964
// SceneKaiaWithOlaf ;
15960: CALL 16019 0 0
// if Givi and Kamil then
15964: LD_EXP 31
15968: PUSH
15969: LD_EXP 34
15973: AND
15974: IFFALSE 15980
// SceneWithGiviAndKamil ;
15976: CALL 16590 0 0
// end ; Video ( false ) ;
15980: LD_INT 0
15982: PPUSH
15983: CALL 61950 0 1
// ChangeMissionObjectives ( M1 ) ;
15987: LD_STRING M1
15989: PPUSH
15990: CALL_OW 337
// music_nat := music_auto ;
15994: LD_ADDR_OWVAR 71
15998: PUSH
15999: LD_INT 0
16001: ST_TO_ADDR
// music_class := music_auto ;
16002: LD_ADDR_OWVAR 72
16006: PUSH
16007: LD_INT 0
16009: ST_TO_ADDR
// SaveForQuickRestart ;
16010: CALL_OW 22
// end ;
16014: LD_VAR 0 1
16018: RET
// export function SceneKaiaWithOlaf ; begin
16019: LD_INT 0
16021: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
16022: LD_INT 22
16024: PUSH
16025: LD_INT 2
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PUSH
16032: LD_INT 30
16034: PUSH
16035: LD_INT 3
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: PPUSH
16046: CALL_OW 69
16050: PPUSH
16051: LD_INT 14
16053: PPUSH
16054: LD_INT 1
16056: PPUSH
16057: LD_INT 1
16059: PPUSH
16060: LD_INT 26
16062: PPUSH
16063: CALL_OW 125
// wait ( 0 0$1 ) ;
16067: LD_INT 35
16069: PPUSH
16070: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
16074: LD_EXP 35
16078: PPUSH
16079: LD_STRING DK-Mem-1
16081: PPUSH
16082: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
16086: LD_EXP 35
16090: PPUSH
16091: LD_STRING DK-Mem-2
16093: PPUSH
16094: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
16098: LD_EXP 39
16102: PPUSH
16103: LD_STRING DO-Mem-3
16105: PPUSH
16106: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
16110: LD_EXP 35
16114: PPUSH
16115: LD_STRING DK-Mem-4
16117: PPUSH
16118: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
16122: LD_EXP 39
16126: PPUSH
16127: LD_STRING DO-Mem-5
16129: PPUSH
16130: CALL_OW 88
// wait ( 0 0$2 ) ;
16134: LD_INT 70
16136: PPUSH
16137: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
16141: LD_INT 22
16143: PUSH
16144: LD_INT 2
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: PUSH
16151: LD_INT 30
16153: PUSH
16154: LD_INT 3
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PPUSH
16165: CALL_OW 69
16169: PPUSH
16170: LD_INT 90
16172: PPUSH
16173: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
16177: LD_EXP 39
16181: PPUSH
16182: LD_STRING DO-Mem-6
16184: PPUSH
16185: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
16189: LD_EXP 35
16193: PPUSH
16194: LD_STRING DK-Mem-7
16196: PPUSH
16197: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
16201: LD_EXP 30
16205: PPUSH
16206: LD_EXP 35
16210: PPUSH
16211: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
16215: LD_EXP 30
16219: PPUSH
16220: LD_STRING DH-Mem-8
16222: PPUSH
16223: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
16227: LD_EXP 35
16231: PUSH
16232: LD_EXP 39
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: PPUSH
16241: LD_EXP 30
16245: PPUSH
16246: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
16250: LD_EXP 39
16254: PPUSH
16255: LD_STRING DO-Mem-9
16257: PPUSH
16258: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
16262: LD_EXP 39
16266: PPUSH
16267: LD_STRING DO-Mem-10
16269: PPUSH
16270: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
16274: LD_EXP 39
16278: PPUSH
16279: LD_STRING DO-Mem-11
16281: PPUSH
16282: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
16286: LD_EXP 39
16290: PPUSH
16291: LD_STRING DO-Mem-12
16293: PPUSH
16294: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
16298: LD_EXP 35
16302: PPUSH
16303: LD_STRING DK-Mem-13
16305: PPUSH
16306: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
16310: LD_EXP 35
16314: PPUSH
16315: LD_STRING DK-Mem-14
16317: PPUSH
16318: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
16322: LD_EXP 35
16326: PPUSH
16327: LD_STRING DK-Mem-15
16329: PPUSH
16330: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
16334: LD_EXP 35
16338: PPUSH
16339: LD_STRING DK-Mem-16
16341: PPUSH
16342: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
16346: LD_EXP 35
16350: PPUSH
16351: LD_STRING DK-Mem-17
16353: PPUSH
16354: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
16358: LD_EXP 39
16362: PPUSH
16363: LD_EXP 35
16367: PPUSH
16368: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
16372: LD_EXP 39
16376: PPUSH
16377: LD_STRING DO-Mem-18
16379: PPUSH
16380: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
16384: LD_EXP 35
16388: PPUSH
16389: LD_EXP 39
16393: PPUSH
16394: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
16398: LD_EXP 35
16402: PPUSH
16403: LD_STRING DK-Mem-19
16405: PPUSH
16406: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
16410: LD_EXP 39
16414: PPUSH
16415: LD_INT 214
16417: PPUSH
16418: LD_INT 86
16420: PPUSH
16421: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
16425: LD_EXP 39
16429: PPUSH
16430: LD_EXP 35
16434: PPUSH
16435: CALL_OW 179
// if Givi then
16439: LD_EXP 31
16443: IFFALSE 16474
// begin ComMoveXY ( Givi , 217 , 86 ) ;
16445: LD_EXP 31
16449: PPUSH
16450: LD_INT 217
16452: PPUSH
16453: LD_INT 86
16455: PPUSH
16456: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
16460: LD_EXP 31
16464: PPUSH
16465: LD_EXP 30
16469: PPUSH
16470: CALL_OW 179
// end ; if Kamil then
16474: LD_EXP 34
16478: IFFALSE 16518
// begin ComExit ( Kamil ) ;
16480: LD_EXP 34
16484: PPUSH
16485: CALL 62366 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
16489: LD_EXP 34
16493: PPUSH
16494: LD_INT 212
16496: PPUSH
16497: LD_INT 86
16499: PPUSH
16500: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
16504: LD_EXP 34
16508: PPUSH
16509: LD_EXP 30
16513: PPUSH
16514: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
16518: LD_INT 70
16520: PPUSH
16521: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
16525: LD_EXP 30
16529: PPUSH
16530: LD_STRING DH-Mem-20
16532: PPUSH
16533: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
16537: LD_EXP 39
16541: PPUSH
16542: LD_INT 215
16544: PPUSH
16545: LD_INT 87
16547: PPUSH
16548: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
16552: LD_EXP 39
16556: PPUSH
16557: LD_EXP 35
16561: PPUSH
16562: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
16566: LD_EXP 35
16570: PPUSH
16571: LD_STRING DK-Mem-21
16573: PPUSH
16574: CALL_OW 88
// wait ( 0 0$2 ) ;
16578: LD_INT 70
16580: PPUSH
16581: CALL_OW 67
// end ;
16585: LD_VAR 0 1
16589: RET
// export function SceneWithGiviAndKamil ; begin
16590: LD_INT 0
16592: PPUSH
// if Markov then
16593: LD_EXP 37
16597: IFFALSE 16648
// begin if IsInUnit ( Markov ) then
16599: LD_EXP 37
16603: PPUSH
16604: CALL_OW 310
16608: IFFALSE 16619
// ComExit ( Markov ) ;
16610: LD_EXP 37
16614: PPUSH
16615: CALL 62366 0 1
// AddComMoveXY ( Markov , 212 , 88 ) ;
16619: LD_EXP 37
16623: PPUSH
16624: LD_INT 212
16626: PPUSH
16627: LD_INT 88
16629: PPUSH
16630: CALL_OW 171
// AddComTurnUnit ( Markov , Heike ) ;
16634: LD_EXP 37
16638: PPUSH
16639: LD_EXP 30
16643: PPUSH
16644: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
16648: LD_EXP 31
16652: PPUSH
16653: LD_STRING DG-Obj-1
16655: PPUSH
16656: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
16660: LD_EXP 34
16664: PPUSH
16665: LD_STRING DKam-Obj-2
16667: PPUSH
16668: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
16672: LD_EXP 30
16676: PPUSH
16677: LD_EXP 34
16681: PPUSH
16682: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
16686: LD_EXP 34
16690: PPUSH
16691: LD_STRING DKam-Obj-3
16693: PPUSH
16694: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
16698: LD_EXP 37
16702: PPUSH
16703: LD_STRING DMar-Obj-4
16705: PPUSH
16706: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
16710: LD_EXP 34
16714: PPUSH
16715: LD_STRING DKam-Obj-6
16717: PPUSH
16718: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
16722: LD_EXP 34
16726: PPUSH
16727: LD_STRING DKam-Obj-7
16729: PPUSH
16730: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
16734: LD_EXP 34
16738: PPUSH
16739: LD_STRING DKam-Obj-8
16741: PPUSH
16742: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
16746: LD_EXP 30
16750: PPUSH
16751: LD_STRING DH-Obj-9
16753: PPUSH
16754: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
16758: LD_EXP 34
16762: PPUSH
16763: LD_STRING DKam-Obj-10
16765: PPUSH
16766: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
16770: LD_EXP 34
16774: PPUSH
16775: LD_STRING DKam-Obj-11
16777: PPUSH
16778: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
16782: LD_EXP 37
16786: PPUSH
16787: LD_STRING DMar-Obj-12
16789: PPUSH
16790: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
16794: LD_EXP 37
16798: PPUSH
16799: LD_STRING DMar-Obj-13
16801: PPUSH
16802: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
16806: LD_EXP 37
16810: PPUSH
16811: LD_STRING DMar-Obj-14
16813: PPUSH
16814: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
16818: LD_EXP 39
16822: PPUSH
16823: LD_STRING DO-Obj-15
16825: PPUSH
16826: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
16830: LD_EXP 39
16834: PPUSH
16835: LD_STRING DO-Obj-16
16837: PPUSH
16838: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
16842: LD_EXP 30
16846: PPUSH
16847: LD_STRING DH-Obj-17
16849: PPUSH
16850: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
16854: LD_EXP 39
16858: PPUSH
16859: LD_STRING DO-Obj-18
16861: PPUSH
16862: CALL_OW 88
// end ;
16866: LD_VAR 0 1
16870: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
16871: LD_INT 34
16873: PUSH
16874: LD_EXP 64
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PPUSH
16883: CALL_OW 69
16887: IFFALSE 17084
16889: GO 16891
16891: DISABLE
16892: LD_INT 0
16894: PPUSH
// begin wait ( 0 0$2 ) ;
16895: LD_INT 70
16897: PPUSH
16898: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
16902: LD_INT 34
16904: PUSH
16905: LD_EXP 64
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PPUSH
16914: CALL_OW 69
16918: PPUSH
16919: CALL_OW 87
// DialogueOn ;
16923: CALL_OW 6
// if Markov then
16927: LD_EXP 37
16931: IFFALSE 16959
// begin Say ( Markov , DMar-Grn-1 ) ;
16933: LD_EXP 37
16937: PPUSH
16938: LD_STRING DMar-Grn-1
16940: PPUSH
16941: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
16945: LD_EXP 30
16949: PPUSH
16950: LD_STRING DH-Grn-2
16952: PPUSH
16953: CALL_OW 88
// end else
16957: GO 17058
// if heikeSecondSquad then
16959: LD_EXP 45
16963: IFFALSE 17058
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
16965: LD_ADDR_VAR 0 1
16969: PUSH
16970: LD_EXP 45
16974: PUSH
16975: LD_INT 1
16977: PPUSH
16978: LD_EXP 45
16982: PPUSH
16983: CALL_OW 12
16987: ARRAY
16988: ST_TO_ADDR
// case GetSex ( random ) of 1 :
16989: LD_VAR 0 1
16993: PPUSH
16994: CALL_OW 258
16998: PUSH
16999: LD_INT 1
17001: DOUBLE
17002: EQUAL
17003: IFTRUE 17007
17005: GO 17022
17007: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
17008: LD_VAR 0 1
17012: PPUSH
17013: LD_STRING DArm-Grn-1
17015: PPUSH
17016: CALL_OW 88
17020: GO 17046
17022: LD_INT 2
17024: DOUBLE
17025: EQUAL
17026: IFTRUE 17030
17028: GO 17045
17030: POP
// Say ( random , DArf-Grn-1 ) ; end ;
17031: LD_VAR 0 1
17035: PPUSH
17036: LD_STRING DArf-Grn-1
17038: PPUSH
17039: CALL_OW 88
17043: GO 17046
17045: POP
// Say ( Heike , DH-Grn-2 ) ;
17046: LD_EXP 30
17050: PPUSH
17051: LD_STRING DH-Grn-2
17053: PPUSH
17054: CALL_OW 88
// end ; DialogueOff ;
17058: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
17062: LD_STRING MortarConstructed
17064: PPUSH
17065: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
17069: LD_STRING SelfPropelledMortar
17071: PPUSH
17072: CALL_OW 339
// mortarConstructed := true ;
17076: LD_ADDR_EXP 15
17080: PUSH
17081: LD_INT 1
17083: ST_TO_ADDR
// end ;
17084: PPOPN 1
17086: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
17087: LD_INT 2
17089: PPUSH
17090: LD_INT 8
17092: PPUSH
17093: CALL_OW 294
17097: IFFALSE 17240
17099: GO 17101
17101: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
17102: LD_INT 200
17104: PPUSH
17105: LD_INT 162
17107: PPUSH
17108: LD_INT 2
17110: PPUSH
17111: LD_INT 6
17113: NEG
17114: PPUSH
17115: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
17119: LD_INT 200
17121: PPUSH
17122: LD_INT 162
17124: PPUSH
17125: LD_INT 2
17127: PPUSH
17128: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
17132: LD_INT 200
17134: PPUSH
17135: LD_INT 162
17137: PPUSH
17138: CALL_OW 84
// if not IsOk ( Kurt ) then
17142: LD_EXP 41
17146: PPUSH
17147: CALL_OW 302
17151: NOT
17152: IFFALSE 17156
// exit ;
17154: GO 17240
// Say ( Kurt , DKs-Otpst-2-1 ) ;
17156: LD_EXP 41
17160: PPUSH
17161: LD_STRING DKs-Otpst-2-1
17163: PPUSH
17164: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
17168: LD_EXP 35
17172: PPUSH
17173: LD_STRING DK-Otpst-2-2
17175: PPUSH
17176: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
17180: LD_EXP 41
17184: PPUSH
17185: LD_STRING DKs-Otpst-2-3
17187: PPUSH
17188: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
17192: LD_EXP 41
17196: PPUSH
17197: LD_STRING DKs-Otpst-2-4
17199: PPUSH
17200: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
17204: LD_EXP 41
17208: PPUSH
17209: LD_STRING DKs-Otpst-2-5
17211: PPUSH
17212: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
17216: LD_EXP 34
17220: PPUSH
17221: LD_STRING DKam-Otpst-2-6
17223: PPUSH
17224: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
17228: LD_EXP 41
17232: PPUSH
17233: LD_STRING DKs-Otpst-2-7
17235: PPUSH
17236: CALL_OW 88
// end ;
17240: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
17241: LD_INT 8
17243: PPUSH
17244: LD_INT 22
17246: PUSH
17247: LD_INT 3
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: PUSH
17254: LD_INT 21
17256: PUSH
17257: LD_INT 3
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PPUSH
17268: CALL_OW 70
17272: NOT
17273: PUSH
17274: LD_EXP 3
17278: NOT
17279: AND
17280: IFFALSE 17530
17282: GO 17284
17284: DISABLE
17285: LD_INT 0
17287: PPUSH
// begin outpostDestroyed := true ;
17288: LD_ADDR_EXP 4
17292: PUSH
17293: LD_INT 1
17295: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
17296: LD_INT 22
17298: PUSH
17299: LD_INT 2
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: PUSH
17306: LD_INT 34
17308: PUSH
17309: LD_EXP 64
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: LD_INT 92
17320: PUSH
17321: LD_INT 195
17323: PUSH
17324: LD_INT 164
17326: PUSH
17327: LD_INT 12
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: LIST
17340: PPUSH
17341: CALL_OW 69
17345: NOT
17346: IFFALSE 17350
// exit ;
17348: GO 17530
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
17350: LD_EXP 31
17354: PPUSH
17355: CALL_OW 302
17359: NOT
17360: PUSH
17361: LD_EXP 35
17365: PPUSH
17366: CALL_OW 302
17370: NOT
17371: OR
17372: IFFALSE 17376
// exit ;
17374: GO 17530
// Say ( Givi , DG-Otpst-1-1 ) ;
17376: LD_EXP 31
17380: PPUSH
17381: LD_STRING DG-Otpst-1-1
17383: PPUSH
17384: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
17388: LD_EXP 35
17392: PPUSH
17393: LD_STRING DK-Otpst-1-2
17395: PPUSH
17396: CALL_OW 88
// if IsOk ( Markov ) then
17400: LD_EXP 37
17404: PPUSH
17405: CALL_OW 302
17409: IFFALSE 17437
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
17411: LD_EXP 37
17415: PPUSH
17416: LD_STRING DMar-Otpst-1-3
17418: PPUSH
17419: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
17423: LD_EXP 37
17427: PPUSH
17428: LD_STRING DMar-Otpst-1-4
17430: PPUSH
17431: CALL_OW 88
// end else
17435: GO 17518
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
17437: LD_ADDR_VAR 0 1
17441: PUSH
17442: LD_EXP 45
17446: PUSH
17447: LD_INT 1
17449: PPUSH
17450: LD_EXP 45
17454: PPUSH
17455: CALL_OW 12
17459: ARRAY
17460: ST_TO_ADDR
// case GetSex ( random ) of 1 :
17461: LD_VAR 0 1
17465: PPUSH
17466: CALL_OW 258
17470: PUSH
17471: LD_INT 1
17473: DOUBLE
17474: EQUAL
17475: IFTRUE 17479
17477: GO 17494
17479: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
17480: LD_VAR 0 1
17484: PPUSH
17485: LD_STRING DArm-Otpst-1-a-3
17487: PPUSH
17488: CALL_OW 88
17492: GO 17518
17494: LD_INT 2
17496: DOUBLE
17497: EQUAL
17498: IFTRUE 17502
17500: GO 17517
17502: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
17503: LD_VAR 0 1
17507: PPUSH
17508: LD_STRING DArf-Otpst-1-a-3
17510: PPUSH
17511: CALL_OW 88
17515: GO 17518
17517: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
17518: LD_EXP 31
17522: PPUSH
17523: LD_STRING DG-Otpst-1-5
17525: PPUSH
17526: CALL_OW 88
// end ;
17530: PPOPN 1
17532: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
17533: LD_EXP 35
17537: PPUSH
17538: CALL_OW 256
17542: PUSH
17543: LD_INT 10
17545: LESS
17546: IFFALSE 17660
17548: GO 17550
17550: DISABLE
// begin DialogueOn ;
17551: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17555: LD_EXP 35
17559: PPUSH
17560: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
17564: LD_EXP 35
17568: PPUSH
17569: LD_STRING DK-Dead-1
17571: PPUSH
17572: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
17576: LD_EXP 30
17580: PPUSH
17581: LD_STRING DH-Dead-2
17583: PPUSH
17584: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
17588: LD_EXP 35
17592: PPUSH
17593: LD_STRING DK-Dead-3
17595: PPUSH
17596: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
17600: LD_EXP 30
17604: PPUSH
17605: LD_STRING DH-Dead-4
17607: PPUSH
17608: CALL_OW 88
// if IsOk ( Mike ) then
17612: LD_EXP 32
17616: PPUSH
17617: CALL_OW 302
17621: IFFALSE 17647
// begin Say ( Mike , DM-Dead-5 ) ;
17623: LD_EXP 32
17627: PPUSH
17628: LD_STRING DM-Dead-5
17630: PPUSH
17631: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
17635: LD_EXP 30
17639: PPUSH
17640: LD_STRING DH-Dead-6
17642: PPUSH
17643: CALL_OW 88
// end ; DialogueOff ;
17647: CALL_OW 7
// KillUnit ( Kaia ) ;
17651: LD_EXP 35
17655: PPUSH
17656: CALL_OW 66
// end ;
17660: END
// every 0 0$1 trigger tick >= 10 10$20 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
17661: LD_OWVAR 1
17665: PUSH
17666: LD_INT 21700
17668: GREATEREQUAL
17669: PUSH
17670: LD_EXP 5
17674: PUSH
17675: LD_INT 5
17677: GREATER
17678: OR
17679: PUSH
17680: LD_INT 22
17682: PUSH
17683: LD_INT 2
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PUSH
17690: LD_INT 92
17692: PUSH
17693: LD_INT 103
17695: PUSH
17696: LD_INT 81
17698: PUSH
17699: LD_INT 20
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PPUSH
17712: CALL_OW 69
17716: OR
17717: IFFALSE 18124
17719: GO 17721
17721: DISABLE
17722: LD_INT 0
17724: PPUSH
17725: PPUSH
17726: PPUSH
// begin PrepareRolfSquad ;
17727: CALL 2376 0 0
// dep := HexInfo ( 86 , 54 ) ;
17731: LD_ADDR_VAR 0 3
17735: PUSH
17736: LD_INT 86
17738: PPUSH
17739: LD_INT 54
17741: PPUSH
17742: CALL_OW 428
17746: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
17747: LD_VAR 0 3
17751: PPUSH
17752: CALL_OW 274
17756: PPUSH
17757: LD_INT 1
17759: PPUSH
17760: LD_INT 300
17762: PPUSH
17763: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
17767: LD_VAR 0 3
17771: PPUSH
17772: CALL_OW 274
17776: PPUSH
17777: LD_INT 2
17779: PPUSH
17780: LD_INT 300
17782: PPUSH
17783: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
17787: LD_EXP 47
17791: PPUSH
17792: LD_INT 79
17794: PPUSH
17795: LD_INT 52
17797: PPUSH
17798: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
17802: LD_INT 35
17804: PPUSH
17805: CALL_OW 67
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
17809: LD_INT 12
17811: PPUSH
17812: LD_INT 22
17814: PUSH
17815: LD_INT 3
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: LD_INT 21
17824: PUSH
17825: LD_INT 1
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: PPUSH
17836: CALL_OW 70
17840: NOT
17841: IFFALSE 17802
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
17843: LD_ADDR_VAR 0 2
17847: PUSH
17848: LD_INT 12
17850: PPUSH
17851: LD_INT 21
17853: PUSH
17854: LD_INT 3
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PPUSH
17861: CALL_OW 70
17865: ST_TO_ADDR
// for i in tmp do
17866: LD_ADDR_VAR 0 1
17870: PUSH
17871: LD_VAR 0 2
17875: PUSH
17876: FOR_IN
17877: IFFALSE 17893
// SetSide ( i , 8 ) ;
17879: LD_VAR 0 1
17883: PPUSH
17884: LD_INT 8
17886: PPUSH
17887: CALL_OW 235
17891: GO 17876
17893: POP
17894: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
17895: LD_INT 63
17897: PPUSH
17898: LD_INT 42
17900: PPUSH
17901: CALL_OW 428
17905: PPUSH
17906: LD_INT 320
17908: PPUSH
17909: CALL_OW 234
// wait ( 0 0$10 ) ;
17913: LD_INT 350
17915: PPUSH
17916: CALL_OW 67
// DialogueOn ;
17920: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
17924: LD_INT 8
17926: PPUSH
17927: LD_INT 2
17929: PPUSH
17930: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
17934: LD_INT 86
17936: PPUSH
17937: LD_INT 54
17939: PPUSH
17940: CALL_OW 428
17944: PPUSH
17945: LD_STRING antwerp
17947: PPUSH
17948: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
17952: LD_EXP 43
17956: PPUSH
17957: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
17961: LD_EXP 43
17965: PPUSH
17966: LD_STRING DRf-rast-1
17968: PPUSH
17969: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
17973: LD_EXP 30
17977: PPUSH
17978: LD_STRING DH-rast-2
17980: PPUSH
17981: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
17985: LD_EXP 43
17989: PPUSH
17990: LD_STRING DRf-rast-3
17992: PPUSH
17993: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
17997: LD_EXP 43
18001: PPUSH
18002: LD_STRING DRf-rast-4
18004: PPUSH
18005: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
18009: LD_EXP 43
18013: PPUSH
18014: LD_STRING DRf-rast-5
18016: PPUSH
18017: CALL_OW 94
// if IsOk ( Aviradze ) then
18021: LD_EXP 42
18025: PPUSH
18026: CALL_OW 302
18030: IFFALSE 18089
// begin CenterNowOnUnits ( Aviradze ) ;
18032: LD_EXP 42
18036: PPUSH
18037: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
18041: LD_EXP 42
18045: PPUSH
18046: LD_STRING DA-rast-6
18048: PPUSH
18049: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
18053: LD_EXP 30
18057: PPUSH
18058: LD_STRING DH-rast-7
18060: PPUSH
18061: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
18065: LD_EXP 31
18069: PPUSH
18070: LD_STRING DG-rast-8
18072: PPUSH
18073: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
18077: LD_EXP 31
18081: PPUSH
18082: LD_STRING DG-rast-9
18084: PPUSH
18085: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
18089: LD_EXP 30
18093: PPUSH
18094: LD_STRING DH-rast-10
18096: PPUSH
18097: CALL_OW 88
// DialogueOff ;
18101: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18105: LD_STRING M2
18107: PPUSH
18108: CALL_OW 337
// bergkampfArrived := true ;
18112: LD_ADDR_EXP 3
18116: PUSH
18117: LD_INT 1
18119: ST_TO_ADDR
// PrepareRolfBase ;
18120: CALL 2707 0 0
// end ;
18124: PPOPN 3
18126: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) and canRolfJoin do var i ;
18127: LD_INT 12
18129: PPUSH
18130: LD_INT 22
18132: PUSH
18133: LD_INT 2
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PPUSH
18140: CALL_OW 70
18144: PUSH
18145: LD_EXP 43
18149: PPUSH
18150: CALL_OW 302
18154: AND
18155: PUSH
18156: LD_EXP 29
18160: AND
18161: IFFALSE 18721
18163: GO 18165
18165: DISABLE
18166: LD_INT 0
18168: PPUSH
// begin rolfScriptBase := false ;
18169: LD_ADDR_EXP 9
18173: PUSH
18174: LD_INT 0
18176: ST_TO_ADDR
// DialogueOn ;
18177: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
18181: LD_EXP 43
18185: PPUSH
18186: CALL_OW 87
// if rolfSquad >= 10 then
18190: LD_EXP 47
18194: PUSH
18195: LD_INT 10
18197: GREATEREQUAL
18198: IFFALSE 18377
// begin linkedWithRolf := 2 ;
18200: LD_ADDR_EXP 12
18204: PUSH
18205: LD_INT 2
18207: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
18208: LD_EXP 43
18212: PPUSH
18213: LD_STRING DRf-rast-11
18215: PPUSH
18216: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
18220: LD_EXP 30
18224: PPUSH
18225: LD_STRING DH-rast-12
18227: PPUSH
18228: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
18232: LD_EXP 43
18236: PPUSH
18237: LD_STRING DRf-rast-13
18239: PPUSH
18240: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
18244: LD_EXP 30
18248: PPUSH
18249: LD_STRING DH-rast-14
18251: PPUSH
18252: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
18256: LD_EXP 43
18260: PPUSH
18261: LD_STRING DRf-rast-15
18263: PPUSH
18264: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
18268: LD_EXP 30
18272: PPUSH
18273: LD_STRING DH-rast-16
18275: PPUSH
18276: CALL_OW 88
// if IsOk ( Mike ) then
18280: LD_EXP 32
18284: PPUSH
18285: CALL_OW 302
18289: IFFALSE 18363
// begin Say ( Mike , DM-rast-17 ) ;
18291: LD_EXP 32
18295: PPUSH
18296: LD_STRING DM-rast-17
18298: PPUSH
18299: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
18303: LD_EXP 30
18307: PPUSH
18308: LD_STRING DH-rast-18
18310: PPUSH
18311: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
18315: LD_EXP 32
18319: PPUSH
18320: LD_STRING DM-rast-19
18322: PPUSH
18323: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
18327: LD_EXP 30
18331: PPUSH
18332: LD_STRING DH-rast-20
18334: PPUSH
18335: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
18339: LD_EXP 32
18343: PPUSH
18344: LD_STRING DM-rast-21
18346: PPUSH
18347: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
18351: LD_EXP 30
18355: PPUSH
18356: LD_STRING DH-rast-22
18358: PPUSH
18359: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
18363: LD_EXP 30
18367: PPUSH
18368: LD_STRING DH-rast-23
18370: PPUSH
18371: CALL_OW 88
// end else
18375: GO 18527
// begin linkedWithRolf := 1 ;
18377: LD_ADDR_EXP 12
18381: PUSH
18382: LD_INT 1
18384: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
18385: LD_EXP 43
18389: PPUSH
18390: LD_STRING DRf-rast-a-11
18392: PPUSH
18393: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
18397: LD_EXP 30
18401: PPUSH
18402: LD_STRING DH-rast-a-12
18404: PPUSH
18405: CALL_OW 88
// if IsOk ( Kurt ) then
18409: LD_EXP 41
18413: PPUSH
18414: CALL_OW 302
18418: IFFALSE 18515
// begin Say ( Kurt , DKs-rast-a-13 ) ;
18420: LD_EXP 41
18424: PPUSH
18425: LD_STRING DKs-rast-a-13
18427: PPUSH
18428: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
18432: LD_EXP 43
18436: PPUSH
18437: LD_STRING DRf-rast-a-14
18439: PPUSH
18440: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
18444: LD_EXP 43
18448: PPUSH
18449: LD_STRING DRf-rast-a-15
18451: PPUSH
18452: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
18456: LD_EXP 41
18460: PPUSH
18461: LD_STRING DKs-rast-a-16
18463: PPUSH
18464: CALL_OW 88
// if IsOk ( Givi ) then
18468: LD_EXP 31
18472: PPUSH
18473: CALL_OW 302
18477: IFFALSE 18515
// begin Say ( Givi , DG-rast-a-17 ) ;
18479: LD_EXP 31
18483: PPUSH
18484: LD_STRING DG-rast-a-17
18486: PPUSH
18487: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
18491: LD_EXP 31
18495: PPUSH
18496: LD_STRING DG-rast-a-18
18498: PPUSH
18499: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
18503: LD_EXP 41
18507: PPUSH
18508: LD_STRING DKs-rast-a-19
18510: PPUSH
18511: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
18515: LD_EXP 30
18519: PPUSH
18520: LD_STRING DH-rast-a-20
18522: PPUSH
18523: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
18527: LD_EXP 43
18531: PPUSH
18532: LD_STRING DRf-rast-24
18534: PPUSH
18535: CALL_OW 88
// if IsOk ( Aviradze ) then
18539: LD_EXP 42
18543: PPUSH
18544: CALL_OW 302
18548: IFFALSE 18648
// begin Say ( Aviradze , DA-rast-25 ) ;
18550: LD_EXP 42
18554: PPUSH
18555: LD_STRING DA-rast-25
18557: PPUSH
18558: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
18562: LD_EXP 30
18566: PPUSH
18567: LD_STRING DH-rast-26
18569: PPUSH
18570: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
18574: LD_EXP 42
18578: PPUSH
18579: LD_STRING DA-rast-27
18581: PPUSH
18582: CALL_OW 88
// if IsOk ( Markov ) then
18586: LD_EXP 37
18590: PPUSH
18591: CALL_OW 302
18595: IFFALSE 18623
// begin Say ( Markov , DMar-rast-28 ) ;
18597: LD_EXP 37
18601: PPUSH
18602: LD_STRING DMar-rast-28
18604: PPUSH
18605: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
18609: LD_EXP 37
18613: PPUSH
18614: LD_STRING DMar-rast-29
18616: PPUSH
18617: CALL_OW 88
// end else
18621: GO 18646
// if IsOk ( Sophia ) then
18623: LD_EXP 36
18627: PPUSH
18628: CALL_OW 302
18632: IFFALSE 18646
// begin Say ( Sophia , DS-rast-28 ) ;
18634: LD_EXP 36
18638: PPUSH
18639: LD_STRING DS-rast-28
18641: PPUSH
18642: CALL_OW 88
// end ; end else
18646: GO 18671
// if IsOk ( Sophia ) then
18648: LD_EXP 36
18652: PPUSH
18653: CALL_OW 302
18657: IFFALSE 18671
// Say ( Sophia , DS-rast-29 ) ;
18659: LD_EXP 36
18663: PPUSH
18664: LD_STRING DS-rast-29
18666: PPUSH
18667: CALL_OW 88
// DialogueOff ;
18671: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
18675: LD_STRING M3
18677: PPUSH
18678: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
18682: LD_ADDR_VAR 0 1
18686: PUSH
18687: LD_INT 22
18689: PUSH
18690: LD_INT 8
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: PPUSH
18697: CALL_OW 69
18701: PUSH
18702: FOR_IN
18703: IFFALSE 18719
// SetSide ( i , 2 ) ;
18705: LD_VAR 0 1
18709: PPUSH
18710: LD_INT 2
18712: PPUSH
18713: CALL_OW 235
18717: GO 18702
18719: POP
18720: POP
// end ;
18721: PPOPN 1
18723: END
// every 0 0$1 trigger omarAttack and not linkedWithRolf and canRolfJoin do var i ;
18724: LD_EXP 23
18728: PUSH
18729: LD_EXP 12
18733: NOT
18734: AND
18735: PUSH
18736: LD_EXP 29
18740: AND
18741: IFFALSE 18832
18743: GO 18745
18745: DISABLE
18746: LD_INT 0
18748: PPUSH
// begin canRolfJoin := false ;
18749: LD_ADDR_EXP 29
18753: PUSH
18754: LD_INT 0
18756: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
18757: LD_STRING M3
18759: PPUSH
18760: CALL_OW 337
// for i in rolfSquad do
18764: LD_ADDR_VAR 0 1
18768: PUSH
18769: LD_EXP 47
18773: PUSH
18774: FOR_IN
18775: IFFALSE 18830
// begin ComExit ( i ) ;
18777: LD_VAR 0 1
18781: PPUSH
18782: CALL 62366 0 1
// AddComAgressiveMove ( i , 147 , 162 ) ;
18786: LD_VAR 0 1
18790: PPUSH
18791: LD_INT 147
18793: PPUSH
18794: LD_INT 162
18796: PPUSH
18797: CALL_OW 174
// AddComWait ( i , 0 0$30 ) ;
18801: LD_VAR 0 1
18805: PPUSH
18806: LD_INT 1050
18808: PPUSH
18809: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 162 ) ;
18813: LD_VAR 0 1
18817: PPUSH
18818: LD_INT 103
18820: PPUSH
18821: LD_INT 162
18823: PPUSH
18824: CALL_OW 174
// end ;
18828: GO 18774
18830: POP
18831: POP
// end ;
18832: PPOPN 1
18834: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf and canRolfJoin do var random ;
18835: LD_EXP 3
18839: PUSH
18840: LD_EXP 43
18844: PPUSH
18845: CALL_OW 256
18849: PUSH
18850: LD_INT 400
18852: LESS
18853: AND
18854: PUSH
18855: LD_EXP 12
18859: NOT
18860: AND
18861: PUSH
18862: LD_EXP 29
18866: AND
18867: IFFALSE 19141
18869: GO 18871
18871: DISABLE
18872: LD_INT 0
18874: PPUSH
// begin DialogueOn ;
18875: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
18879: LD_EXP 43
18883: PPUSH
18884: LD_STRING DRf-rast-f-11
18886: PPUSH
18887: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
18891: LD_EXP 43
18895: PPUSH
18896: LD_STRING DRf-rast-f-12
18898: PPUSH
18899: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
18903: LD_EXP 43
18907: PPUSH
18908: LD_STRING DRf-rast-f-13
18910: PPUSH
18911: CALL_OW 94
// DialogueOff ;
18915: CALL_OW 7
// KillUnit ( Rolf ) ;
18919: LD_EXP 43
18923: PPUSH
18924: CALL_OW 66
// wait ( 0 0$1 ) ;
18928: LD_INT 35
18930: PPUSH
18931: CALL_OW 67
// if not IsOk ( Givi ) then
18935: LD_EXP 31
18939: PPUSH
18940: CALL_OW 302
18944: NOT
18945: IFFALSE 18949
// exit ;
18947: GO 19141
// DialogueOn ;
18949: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
18953: LD_EXP 31
18957: PPUSH
18958: LD_STRING DG-rast-f-14
18960: PPUSH
18961: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
18965: LD_EXP 31
18969: PPUSH
18970: LD_STRING DG-rast-f-15
18972: PPUSH
18973: CALL_OW 88
// if IsOk ( Kaia ) then
18977: LD_EXP 35
18981: PPUSH
18982: CALL_OW 302
18986: IFFALSE 19002
// Say ( Kaia , DK-rast-f-16 ) else
18988: LD_EXP 35
18992: PPUSH
18993: LD_STRING DK-rast-f-16
18995: PPUSH
18996: CALL_OW 88
19000: GO 19089
// if heikeSecondSquad then
19002: LD_EXP 45
19006: IFFALSE 19089
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
19008: LD_ADDR_VAR 0 1
19012: PUSH
19013: LD_EXP 45
19017: PUSH
19018: LD_INT 1
19020: PPUSH
19021: LD_EXP 45
19025: PPUSH
19026: CALL_OW 12
19030: ARRAY
19031: ST_TO_ADDR
// case GetSex ( random ) of 1 :
19032: LD_VAR 0 1
19036: PPUSH
19037: CALL_OW 258
19041: PUSH
19042: LD_INT 1
19044: DOUBLE
19045: EQUAL
19046: IFTRUE 19050
19048: GO 19065
19050: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
19051: LD_VAR 0 1
19055: PPUSH
19056: LD_STRING DArm-rast-f-a-16
19058: PPUSH
19059: CALL_OW 88
19063: GO 19089
19065: LD_INT 2
19067: DOUBLE
19068: EQUAL
19069: IFTRUE 19073
19071: GO 19088
19073: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
19074: LD_VAR 0 1
19078: PPUSH
19079: LD_STRING DArf-rast-f-a-16
19081: PPUSH
19082: CALL_OW 88
19086: GO 19089
19088: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
19089: LD_EXP 31
19093: PPUSH
19094: LD_STRING DG-rast-f-17
19096: PPUSH
19097: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
19101: LD_EXP 31
19105: PPUSH
19106: LD_STRING DG-rast-f-18
19108: PPUSH
19109: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
19113: LD_EXP 31
19117: PPUSH
19118: LD_STRING DG-rast-f-19
19120: PPUSH
19121: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
19125: LD_EXP 31
19129: PPUSH
19130: LD_STRING DG-rast-f-20
19132: PPUSH
19133: CALL_OW 88
// DialogueOff ;
19137: CALL_OW 7
// end ;
19141: PPOPN 1
19143: END
// every 0 0$1 trigger SeeArea ( 2 , ruMainBase ) do
19144: LD_INT 2
19146: PPUSH
19147: LD_INT 10
19149: PPUSH
19150: CALL_OW 294
19154: IFFALSE 19227
19156: GO 19158
19158: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
19159: LD_EXP 31
19163: PPUSH
19164: LD_STRING DG-Len-1
19166: PPUSH
19167: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
19171: LD_EXP 41
19175: PPUSH
19176: LD_STRING DKs-Len-2
19178: PPUSH
19179: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
19183: LD_EXP 41
19187: PPUSH
19188: LD_STRING DKs-Len-3
19190: PPUSH
19191: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
19195: LD_EXP 30
19199: PPUSH
19200: LD_STRING DH-Len-4
19202: PPUSH
19203: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
19207: LD_EXP 35
19211: PPUSH
19212: LD_STRING DK-Len-5
19214: PPUSH
19215: CALL_OW 88
// leninSpotted := true ;
19219: LD_ADDR_EXP 14
19223: PUSH
19224: LD_INT 1
19226: ST_TO_ADDR
// end ;
19227: END
// every 0 0$1 trigger ( bergkampfArrived and tick > 17 17$00 ) or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 322 , 215 , 20 ] ] ) do var i ;
19228: LD_EXP 3
19232: PUSH
19233: LD_OWVAR 1
19237: PUSH
19238: LD_INT 35700
19240: GREATER
19241: AND
19242: PUSH
19243: LD_INT 22
19245: PUSH
19246: LD_INT 2
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: LD_INT 92
19255: PUSH
19256: LD_INT 322
19258: PUSH
19259: LD_INT 215
19261: PUSH
19262: LD_INT 20
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PPUSH
19275: CALL_OW 69
19279: OR
19280: IFFALSE 19643
19282: GO 19284
19284: DISABLE
19285: LD_INT 0
19287: PPUSH
// begin PrepareOmarSquad ;
19288: CALL 3989 0 0
// repeat wait ( 0 0$1 ) ;
19292: LD_INT 35
19294: PPUSH
19295: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
19299: LD_INT 14
19301: PPUSH
19302: LD_INT 22
19304: PUSH
19305: LD_INT 3
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: LD_INT 2
19314: PUSH
19315: LD_INT 21
19317: PUSH
19318: LD_INT 1
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: LD_INT 59
19327: PUSH
19328: EMPTY
19329: LIST
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: LIST
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PPUSH
19340: CALL_OW 70
19344: NOT
19345: IFFALSE 19292
// for i in omarSquad do
19347: LD_ADDR_VAR 0 1
19351: PUSH
19352: LD_EXP 48
19356: PUSH
19357: FOR_IN
19358: IFFALSE 19389
// if GetLives ( i ) < 750 then
19360: LD_VAR 0 1
19364: PPUSH
19365: CALL_OW 256
19369: PUSH
19370: LD_INT 750
19372: LESS
19373: IFFALSE 19387
// SetLives ( i , 1000 ) ;
19375: LD_VAR 0 1
19379: PPUSH
19380: LD_INT 1000
19382: PPUSH
19383: CALL_OW 234
19387: GO 19357
19389: POP
19390: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
19391: LD_ADDR_VAR 0 1
19395: PUSH
19396: LD_INT 14
19398: PPUSH
19399: LD_INT 21
19401: PUSH
19402: LD_INT 3
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PPUSH
19409: CALL_OW 70
19413: PUSH
19414: FOR_IN
19415: IFFALSE 19431
// SetSide ( i , 5 ) ;
19417: LD_VAR 0 1
19421: PPUSH
19422: LD_INT 5
19424: PPUSH
19425: CALL_OW 235
19429: GO 19414
19431: POP
19432: POP
// wait ( 0 0$3 ) ;
19433: LD_INT 105
19435: PPUSH
19436: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
19440: LD_INT 5
19442: PPUSH
19443: LD_INT 2
19445: PPUSH
19446: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
19450: LD_EXP 40
19454: PPUSH
19455: CALL_OW 87
// DialogueOn ;
19459: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-1 ) ;
19463: LD_EXP 40
19467: PPUSH
19468: LD_STRING DOm-Veh-1
19470: PPUSH
19471: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
19475: LD_EXP 40
19479: PPUSH
19480: LD_STRING DOm-Veh-2
19482: PPUSH
19483: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
19487: LD_EXP 40
19491: PPUSH
19492: LD_STRING DOm-Veh-3
19494: PPUSH
19495: CALL_OW 94
// if mortarConstructed then
19499: LD_EXP 15
19503: IFFALSE 19517
// SayRadio ( Omar , DOm-Veh-4 ) ;
19505: LD_EXP 40
19509: PPUSH
19510: LD_STRING DOm-Veh-4
19512: PPUSH
19513: CALL_OW 94
// Say ( Heike , DH-Veh-5 ) ;
19517: LD_EXP 30
19521: PPUSH
19522: LD_STRING DH-Veh-5
19524: PPUSH
19525: CALL_OW 88
// if IsOk ( Kurt ) then
19529: LD_EXP 41
19533: PPUSH
19534: CALL_OW 302
19538: IFFALSE 19588
// begin Say ( Kurt , DKs-Veh-6 ) ;
19540: LD_EXP 41
19544: PPUSH
19545: LD_STRING DKs-Veh-6
19547: PPUSH
19548: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
19552: LD_EXP 41
19556: PPUSH
19557: LD_STRING DKs-Veh-7
19559: PPUSH
19560: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
19564: LD_EXP 31
19568: PPUSH
19569: LD_STRING DG-Veh-8
19571: PPUSH
19572: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
19576: LD_EXP 32
19580: PPUSH
19581: LD_STRING DM-Veh-9
19583: PPUSH
19584: CALL_OW 88
// end ; DialogueOff ;
19588: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
19592: LD_STRING M4
19594: PPUSH
19595: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
19599: LD_EXP 40
19603: PPUSH
19604: LD_INT 341
19606: PPUSH
19607: LD_INT 232
19609: PPUSH
19610: CALL_OW 428
19614: PPUSH
19615: CALL_OW 120
// omarArrived := true ;
19619: LD_ADDR_EXP 6
19623: PUSH
19624: LD_INT 1
19626: ST_TO_ADDR
// omarScriptBase := true ;
19627: LD_ADDR_EXP 10
19631: PUSH
19632: LD_INT 1
19634: ST_TO_ADDR
// omarWantVehicles := true ;
19635: LD_ADDR_EXP 18
19639: PUSH
19640: LD_INT 1
19642: ST_TO_ADDR
// end ;
19643: PPOPN 1
19645: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
19646: LD_EXP 43
19650: PPUSH
19651: CALL_OW 302
19655: PUSH
19656: LD_EXP 12
19660: AND
19661: PUSH
19662: LD_EXP 6
19666: AND
19667: IFFALSE 19771
19669: GO 19671
19671: DISABLE
// begin wait ( 0 0$20 ) ;
19672: LD_INT 700
19674: PPUSH
19675: CALL_OW 67
// CenterNowOnUnits ( Rolf ) ;
19679: LD_EXP 43
19683: PPUSH
19684: CALL_OW 87
// DialogueOn ;
19688: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
19692: LD_EXP 43
19696: PPUSH
19697: LD_STRING DRf-Veh-10
19699: PPUSH
19700: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
19704: LD_EXP 43
19708: PPUSH
19709: LD_STRING DRf-Veh-11
19711: PPUSH
19712: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
19716: LD_EXP 30
19720: PPUSH
19721: LD_STRING DH-Veh-12
19723: PPUSH
19724: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
19728: LD_EXP 30
19732: PPUSH
19733: LD_STRING DH-Veh-13
19735: PPUSH
19736: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
19740: LD_EXP 43
19744: PPUSH
19745: LD_STRING DRf-Veh-14
19747: PPUSH
19748: CALL_OW 88
// DialogueOff ;
19752: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
19756: LD_STRING M5
19758: PPUSH
19759: CALL_OW 337
// rolfWantVehicles := true ;
19763: LD_ADDR_EXP 17
19767: PUSH
19768: LD_INT 1
19770: ST_TO_ADDR
// end ;
19771: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
19772: LD_EXP 18
19776: IFFALSE 20475
19778: GO 19780
19780: DISABLE
19781: LD_INT 0
19783: PPUSH
19784: PPUSH
19785: PPUSH
19786: PPUSH
19787: PPUSH
19788: PPUSH
// begin wait ( 0 0$3 ) ;
19789: LD_INT 105
19791: PPUSH
19792: CALL_OW 67
// Hint ( OmarVehicles ) ;
19796: LD_STRING OmarVehicles
19798: PPUSH
19799: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
19803: LD_INT 16
19805: PPUSH
19806: LD_INT 1
19808: PPUSH
19809: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
19813: LD_INT 35
19815: PPUSH
19816: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
19820: LD_ADDR_EXP 20
19824: PUSH
19825: LD_EXP 20
19829: PUSH
19830: LD_INT 35
19832: MINUS
19833: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
19834: LD_EXP 20
19838: PUSH
19839: LD_INT 0
19841: LESSEQUAL
19842: IFFALSE 19942
// begin display_strings := [ ] ;
19844: LD_ADDR_OWVAR 47
19848: PUSH
19849: EMPTY
19850: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
19851: LD_STRING M4a
19853: PPUSH
19854: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
19858: LD_INT 16
19860: PPUSH
19861: LD_INT 0
19863: PPUSH
19864: CALL_OW 424
// DialogueOn ;
19868: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
19872: LD_EXP 40
19876: PPUSH
19877: LD_STRING DOm-Veh-b-15
19879: PPUSH
19880: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
19884: LD_EXP 30
19888: PPUSH
19889: LD_STRING DH-Veh-b-16
19891: PPUSH
19892: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
19896: LD_EXP 40
19900: PPUSH
19901: LD_STRING DOm-Veh-b-17
19903: PPUSH
19904: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
19908: LD_EXP 35
19912: PPUSH
19913: LD_STRING DK-Veh-b-18
19915: PPUSH
19916: CALL_OW 88
// DialogueOff ;
19920: CALL_OW 7
// omarAttack := true ;
19924: LD_ADDR_EXP 23
19928: PUSH
19929: LD_INT 1
19931: ST_TO_ADDR
// omarScriptBase := false ;
19932: LD_ADDR_EXP 10
19936: PUSH
19937: LD_INT 0
19939: ST_TO_ADDR
// exit ;
19940: GO 20475
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
19942: LD_EXP 21
19946: PUSH
19947: LD_INT 16
19949: PPUSH
19950: LD_INT 22
19952: PUSH
19953: LD_INT 2
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: LD_INT 21
19962: PUSH
19963: LD_INT 2
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PUSH
19970: LD_INT 33
19972: PUSH
19973: LD_INT 1
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 58
19982: PUSH
19983: EMPTY
19984: LIST
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: PPUSH
19992: CALL_OW 70
19996: LESSEQUAL
19997: IFFALSE 19813
// omarWaitingForVehiclesTimer := 0 0$00 ;
19999: LD_ADDR_EXP 20
20003: PUSH
20004: LD_INT 0
20006: ST_TO_ADDR
// display_strings := [ ] ;
20007: LD_ADDR_OWVAR 47
20011: PUSH
20012: EMPTY
20013: ST_TO_ADDR
// DialogueOn ;
20014: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
20018: LD_EXP 40
20022: PPUSH
20023: LD_STRING DOm-Veh-a-15
20025: PPUSH
20026: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
20030: LD_EXP 35
20034: PPUSH
20035: LD_STRING DK-Veh-a-16
20037: PPUSH
20038: CALL_OW 88
// DialogueOff ;
20042: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
20046: LD_STRING M4a
20048: PPUSH
20049: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
20053: LD_INT 16
20055: PPUSH
20056: LD_INT 0
20058: PPUSH
20059: CALL_OW 424
// omarHasVehicles := true ;
20063: LD_ADDR_EXP 22
20067: PUSH
20068: LD_INT 1
20070: ST_TO_ADDR
// wait ( 1 1$00 ) ;
20071: LD_INT 2100
20073: PPUSH
20074: CALL_OW 67
// omarAttack := true ;
20078: LD_ADDR_EXP 23
20082: PUSH
20083: LD_INT 1
20085: ST_TO_ADDR
// omarScriptBase := false ;
20086: LD_ADDR_EXP 10
20090: PUSH
20091: LD_INT 0
20093: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
20094: LD_ADDR_VAR 0 2
20098: PUSH
20099: LD_INT 16
20101: PPUSH
20102: LD_INT 22
20104: PUSH
20105: LD_INT 2
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 21
20114: PUSH
20115: LD_INT 2
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: PUSH
20122: LD_INT 33
20124: PUSH
20125: LD_INT 1
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 58
20134: PUSH
20135: EMPTY
20136: LIST
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: PPUSH
20144: CALL_OW 70
20148: ST_TO_ADDR
// for i in tmp do
20149: LD_ADDR_VAR 0 1
20153: PUSH
20154: LD_VAR 0 2
20158: PUSH
20159: FOR_IN
20160: IFFALSE 20188
// begin SetFuel ( i , 100 ) ;
20162: LD_VAR 0 1
20166: PPUSH
20167: LD_INT 100
20169: PPUSH
20170: CALL_OW 240
// SetSide ( i , 5 ) ;
20174: LD_VAR 0 1
20178: PPUSH
20179: LD_INT 5
20181: PPUSH
20182: CALL_OW 235
// end ;
20186: GO 20159
20188: POP
20189: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
20190: LD_ADDR_VAR 0 3
20194: PUSH
20195: LD_EXP 48
20199: PPUSH
20200: LD_INT 25
20202: PUSH
20203: LD_INT 2
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PPUSH
20210: CALL_OW 72
20214: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
20215: LD_ADDR_VAR 0 4
20219: PUSH
20220: LD_EXP 48
20224: PPUSH
20225: LD_INT 3
20227: PUSH
20228: LD_INT 55
20230: PUSH
20231: EMPTY
20232: LIST
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: LD_INT 25
20240: PUSH
20241: LD_INT 3
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PPUSH
20252: CALL_OW 72
20256: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
20257: LD_ADDR_VAR 0 5
20261: PUSH
20262: LD_INT 324
20264: PPUSH
20265: LD_INT 234
20267: PPUSH
20268: CALL_OW 428
20272: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
20273: LD_ADDR_VAR 0 6
20277: PUSH
20278: LD_INT 334
20280: PPUSH
20281: LD_INT 241
20283: PPUSH
20284: CALL_OW 428
20288: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
20289: LD_VAR 0 6
20293: PPUSH
20294: CALL_OW 313
20298: PPUSH
20299: CALL_OW 122
// if eng then
20303: LD_VAR 0 3
20307: IFFALSE 20415
// begin if eng + mech <= tmp then
20309: LD_VAR 0 3
20313: PUSH
20314: LD_VAR 0 4
20318: PLUS
20319: PUSH
20320: LD_VAR 0 2
20324: LESSEQUAL
20325: IFFALSE 20380
// begin ComEnterUnit ( eng , workshop ) ;
20327: LD_VAR 0 3
20331: PPUSH
20332: LD_VAR 0 5
20336: PPUSH
20337: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
20341: LD_VAR 0 3
20345: PPUSH
20346: LD_INT 3
20348: PPUSH
20349: CALL_OW 183
// AddComExitBuilding ( eng ) ;
20353: LD_VAR 0 3
20357: PPUSH
20358: CALL_OW 182
// mech := mech union eng ;
20362: LD_ADDR_VAR 0 4
20366: PUSH
20367: LD_VAR 0 4
20371: PUSH
20372: LD_VAR 0 3
20376: UNION
20377: ST_TO_ADDR
// end else
20378: GO 20415
// begin ComEnterUnit ( eng , armoury ) ;
20380: LD_VAR 0 3
20384: PPUSH
20385: LD_VAR 0 6
20389: PPUSH
20390: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
20394: LD_VAR 0 3
20398: PPUSH
20399: LD_INT 1
20401: PPUSH
20402: CALL_OW 183
// AddComExitBuilding ( eng ) ;
20406: LD_VAR 0 3
20410: PPUSH
20411: CALL_OW 182
// end ; end ; for i := 1 to tmp do
20415: LD_ADDR_VAR 0 1
20419: PUSH
20420: DOUBLE
20421: LD_INT 1
20423: DEC
20424: ST_TO_ADDR
20425: LD_VAR 0 2
20429: PUSH
20430: FOR_TO
20431: IFFALSE 20473
// if i <= mech then
20433: LD_VAR 0 1
20437: PUSH
20438: LD_VAR 0 4
20442: LESSEQUAL
20443: IFFALSE 20471
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
20445: LD_VAR 0 4
20449: PUSH
20450: LD_VAR 0 1
20454: ARRAY
20455: PPUSH
20456: LD_VAR 0 2
20460: PUSH
20461: LD_VAR 0 1
20465: ARRAY
20466: PPUSH
20467: CALL_OW 180
20471: GO 20430
20473: POP
20474: POP
// end ;
20475: PPOPN 6
20477: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i ;
20478: LD_EXP 43
20482: PPUSH
20483: CALL_OW 302
20487: PUSH
20488: LD_EXP 17
20492: AND
20493: IFFALSE 20949
20495: GO 20497
20497: DISABLE
20498: LD_INT 0
20500: PPUSH
// begin repeat wait ( 0 0$1 ) ;
20501: LD_INT 35
20503: PPUSH
20504: CALL_OW 67
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
20508: LD_ADDR_EXP 19
20512: PUSH
20513: LD_EXP 19
20517: PUSH
20518: LD_INT 35
20520: MINUS
20521: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 or omarAttack then
20522: LD_EXP 19
20526: PUSH
20527: LD_INT 0
20529: LESSEQUAL
20530: PUSH
20531: LD_EXP 23
20535: OR
20536: IFFALSE 20754
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
20538: LD_ADDR_EXP 19
20542: PUSH
20543: LD_INT 0
20545: ST_TO_ADDR
// display_strings := [ ] ;
20546: LD_ADDR_OWVAR 47
20550: PUSH
20551: EMPTY
20552: ST_TO_ADDR
// DialogueOn ;
20553: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
20557: LD_EXP 43
20561: PPUSH
20562: LD_STRING DRf-Veh-b-19
20564: PPUSH
20565: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
20569: LD_EXP 43
20573: PPUSH
20574: LD_STRING DRf-Veh-b-20
20576: PPUSH
20577: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
20581: LD_EXP 30
20585: PPUSH
20586: LD_STRING DH-Veh-b-21
20588: PPUSH
20589: CALL_OW 88
// if IsOk ( Givi ) then
20593: LD_EXP 31
20597: PPUSH
20598: CALL_OW 302
20602: IFFALSE 20640
// begin Say ( Givi , DG-Veh-b-22 ) ;
20604: LD_EXP 31
20608: PPUSH
20609: LD_STRING DG-Veh-b-22
20611: PPUSH
20612: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
20616: LD_EXP 30
20620: PPUSH
20621: LD_STRING DH-Veh-b-23
20623: PPUSH
20624: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
20628: LD_EXP 31
20632: PPUSH
20633: LD_STRING DG-Veh-b-24
20635: PPUSH
20636: CALL_OW 88
// end ; DialogueOff ;
20640: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
20644: LD_STRING M5a
20646: PPUSH
20647: CALL_OW 337
// for i in rolfSquad do
20651: LD_ADDR_VAR 0 1
20655: PUSH
20656: LD_EXP 47
20660: PUSH
20661: FOR_IN
20662: IFFALSE 20728
// begin SetSide ( i , 8 ) ;
20664: LD_VAR 0 1
20668: PPUSH
20669: LD_INT 8
20671: PPUSH
20672: CALL_OW 235
// if IsDriver ( i ) then
20676: LD_VAR 0 1
20680: PPUSH
20681: CALL 59587 0 1
20685: IFFALSE 20706
// SetSide ( IsInUnit ( i ) , 8 ) else
20687: LD_VAR 0 1
20691: PPUSH
20692: CALL_OW 310
20696: PPUSH
20697: LD_INT 8
20699: PPUSH
20700: CALL_OW 235
20704: GO 20726
// if IsInUnit ( i ) then
20706: LD_VAR 0 1
20710: PPUSH
20711: CALL_OW 310
20715: IFFALSE 20726
// ComExitBuilding ( i ) ;
20717: LD_VAR 0 1
20721: PPUSH
20722: CALL_OW 122
// end ;
20726: GO 20661
20728: POP
20729: POP
// wait ( 0 0$1 ) ;
20730: LD_INT 35
20732: PPUSH
20733: CALL_OW 67
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
20737: LD_EXP 47
20741: PPUSH
20742: LD_INT 229
20744: PPUSH
20745: LD_INT 154
20747: PPUSH
20748: CALL_OW 114
// exit ;
20752: GO 20949
// end ; if IsDead ( Rolf ) then
20754: LD_EXP 43
20758: PPUSH
20759: CALL_OW 301
20763: IFFALSE 20774
// begin ChangeMissionObjectives ( M5a ) ;
20765: LD_STRING M5a
20767: PPUSH
20768: CALL_OW 337
// exit ;
20772: GO 20949
// end ; until UnitFilter ( rolfSquad , [ f_driving ] ) + 0 = rolfSquad + 0 ;
20774: LD_EXP 47
20778: PPUSH
20779: LD_INT 55
20781: PUSH
20782: EMPTY
20783: LIST
20784: PPUSH
20785: CALL_OW 72
20789: PUSH
20790: LD_INT 0
20792: PLUS
20793: PUSH
20794: LD_EXP 47
20798: PUSH
20799: LD_INT 0
20801: PLUS
20802: EQUAL
20803: IFFALSE 20501
// rolfWaitingForVehiclesTimer := 0 0$00 ;
20805: LD_ADDR_EXP 19
20809: PUSH
20810: LD_INT 0
20812: ST_TO_ADDR
// display_strings := [ ] ;
20813: LD_ADDR_OWVAR 47
20817: PUSH
20818: EMPTY
20819: ST_TO_ADDR
// DialogueOn ;
20820: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
20824: LD_EXP 43
20828: PPUSH
20829: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
20833: LD_EXP 43
20837: PPUSH
20838: LD_STRING DRf-Veh-a-17
20840: PPUSH
20841: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
20845: LD_EXP 30
20849: PPUSH
20850: LD_STRING DH-08-Veh-a-18
20852: PPUSH
20853: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
20857: LD_EXP 43
20861: PPUSH
20862: LD_STRING DRf-Veh-a-19
20864: PPUSH
20865: CALL_OW 88
// DialogueOff ;
20869: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
20873: LD_STRING M5a
20875: PPUSH
20876: CALL_OW 337
// rolfHasVehicles := true ;
20880: LD_ADDR_EXP 16
20884: PUSH
20885: LD_INT 1
20887: ST_TO_ADDR
// for i in rolfSquad do
20888: LD_ADDR_VAR 0 1
20892: PUSH
20893: LD_EXP 47
20897: PUSH
20898: FOR_IN
20899: IFFALSE 20932
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
20901: LD_VAR 0 1
20905: PPUSH
20906: CALL_OW 310
20910: PPUSH
20911: LD_INT 8
20913: PPUSH
20914: CALL_OW 235
// SetSide ( i , 8 ) ;
20918: LD_VAR 0 1
20922: PPUSH
20923: LD_INT 8
20925: PPUSH
20926: CALL_OW 235
// end ;
20930: GO 20898
20932: POP
20933: POP
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
20934: LD_EXP 47
20938: PPUSH
20939: LD_INT 229
20941: PPUSH
20942: LD_INT 154
20944: PPUSH
20945: CALL_OW 114
// end ;
20949: PPOPN 1
20951: END
// every 0 0$1 trigger leninSpotted do
20952: LD_EXP 14
20956: IFFALSE 21044
20958: GO 20960
20960: DISABLE
// begin wait ( 0 0$10 ) ;
20961: LD_INT 350
20963: PPUSH
20964: CALL_OW 67
// DialogueOn ;
20968: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
20972: LD_EXP 42
20976: PPUSH
20977: LD_STRING DA-Transmission-1
20979: PPUSH
20980: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
20984: LD_EXP 49
20988: PPUSH
20989: LD_STRING DMzw-Transmission-2
20991: PPUSH
20992: CALL_OW 94
// if gaidarKilled then
20996: LD_EXP 7
21000: IFFALSE 21016
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
21002: LD_EXP 49
21006: PPUSH
21007: LD_STRING DMzw-Transmission-3
21009: PPUSH
21010: CALL_OW 94
21014: GO 21028
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
21016: LD_EXP 49
21020: PPUSH
21021: LD_STRING DMzw-Transmission-a-3
21023: PPUSH
21024: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
21028: LD_EXP 30
21032: PPUSH
21033: LD_STRING DH-Transmission-4
21035: PPUSH
21036: CALL_OW 88
// DialogueOff ;
21040: CALL_OW 7
// end ;
21044: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
21045: LD_INT 22
21047: PUSH
21048: LD_INT 3
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: LD_INT 25
21057: PUSH
21058: LD_INT 9
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PUSH
21065: LD_INT 101
21067: PUSH
21068: LD_INT 2
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: LIST
21079: PPUSH
21080: CALL_OW 69
21084: PUSH
21085: LD_EXP 30
21089: PPUSH
21090: CALL_OW 302
21094: AND
21095: IFFALSE 21160
21097: GO 21099
21099: DISABLE
// begin CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
21100: LD_INT 22
21102: PUSH
21103: LD_INT 3
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 25
21112: PUSH
21113: LD_INT 9
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: LD_INT 101
21122: PUSH
21123: LD_INT 2
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: LIST
21134: PPUSH
21135: CALL_OW 69
21139: PUSH
21140: LD_INT 1
21142: ARRAY
21143: PPUSH
21144: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
21148: LD_EXP 30
21152: PPUSH
21153: LD_STRING DH-Rubazooka-1
21155: PPUSH
21156: CALL_OW 88
// end ;
21160: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
21161: LD_INT 19
21163: PPUSH
21164: LD_INT 22
21166: PUSH
21167: LD_INT 3
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PPUSH
21174: CALL_OW 70
21178: PUSH
21179: LD_EXP 28
21183: AND
21184: IFFALSE 21235
21186: GO 21188
21188: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
21189: LD_INT 19
21191: PPUSH
21192: LD_INT 22
21194: PUSH
21195: LD_INT 3
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PPUSH
21202: CALL_OW 70
21206: PPUSH
21207: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
21211: LD_EXP 30
21215: PPUSH
21216: LD_STRING DH-Ruattfirst-1
21218: PPUSH
21219: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
21223: LD_EXP 30
21227: PPUSH
21228: LD_STRING DH-Ruattfirst-2
21230: PPUSH
21231: CALL_OW 88
// end ;
21235: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
21236: LD_INT 19
21238: PPUSH
21239: LD_INT 22
21241: PUSH
21242: LD_INT 3
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PPUSH
21249: CALL_OW 70
21253: PUSH
21254: LD_EXP 28
21258: NOT
21259: AND
21260: IFFALSE 21299
21262: GO 21264
21264: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
21265: LD_INT 19
21267: PPUSH
21268: LD_INT 22
21270: PUSH
21271: LD_INT 3
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PPUSH
21278: CALL_OW 70
21282: PPUSH
21283: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
21287: LD_EXP 30
21291: PPUSH
21292: LD_STRING DH-Ruattnext-1
21294: PPUSH
21295: CALL_OW 88
// end ;
21299: END
// every 0 0$1 trigger GetResourceType ( GetBase ( arDepot ) , mat_oil ) < 31 and IsOk ( Givi ) do var vehicle , driver , live ;
21300: LD_EXP 44
21304: PPUSH
21305: CALL_OW 274
21309: PPUSH
21310: LD_INT 2
21312: PPUSH
21313: CALL_OW 275
21317: PUSH
21318: LD_INT 31
21320: LESS
21321: PUSH
21322: LD_EXP 31
21326: PPUSH
21327: CALL_OW 302
21331: AND
21332: IFFALSE 21887
21334: GO 21336
21336: DISABLE
21337: LD_INT 0
21339: PPUSH
21340: PPUSH
21341: PPUSH
// begin DialogueOn ;
21342: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
21346: LD_EXP 30
21350: PPUSH
21351: LD_STRING DH-Fuel-1
21353: PPUSH
21354: CALL_OW 88
// Say ( Givi , DG-Fuel-2 ) ;
21358: LD_EXP 31
21362: PPUSH
21363: LD_STRING DG-Fuel-2
21365: PPUSH
21366: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
21370: LD_EXP 31
21374: PPUSH
21375: LD_STRING DG-Fuel-3
21377: PPUSH
21378: CALL_OW 88
// DialogueOff ;
21382: CALL_OW 7
// Query ( Oil ) ;
21386: LD_STRING Oil
21388: PPUSH
21389: CALL_OW 97
// SetAreaMapShow ( oilArea , 1 ) ;
21393: LD_INT 20
21395: PPUSH
21396: LD_INT 1
21398: PPUSH
21399: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
21403: LD_INT 35
21405: PPUSH
21406: CALL_OW 67
// until FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) ;
21410: LD_INT 20
21412: PPUSH
21413: LD_INT 22
21415: PUSH
21416: LD_INT 2
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: LD_INT 33
21425: PUSH
21426: LD_INT 1
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 2
21435: PUSH
21436: LD_INT 34
21438: PUSH
21439: LD_INT 32
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: LD_INT 34
21448: PUSH
21449: LD_INT 51
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: LIST
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: LIST
21465: PPUSH
21466: CALL_OW 70
21470: IFFALSE 21403
// SetAreaMapShow ( oilArea , 0 ) ;
21472: LD_INT 20
21474: PPUSH
21475: LD_INT 0
21477: PPUSH
21478: CALL_OW 424
// vehicle := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) [ 1 ] ;
21482: LD_ADDR_VAR 0 1
21486: PUSH
21487: LD_INT 20
21489: PPUSH
21490: LD_INT 22
21492: PUSH
21493: LD_INT 2
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 33
21502: PUSH
21503: LD_INT 1
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 2
21512: PUSH
21513: LD_INT 34
21515: PUSH
21516: LD_INT 32
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 34
21525: PUSH
21526: LD_INT 51
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: LIST
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: LIST
21542: PPUSH
21543: CALL_OW 70
21547: PUSH
21548: LD_INT 1
21550: ARRAY
21551: ST_TO_ADDR
// driver := IsDrivenBy ( vehicle ) ;
21552: LD_ADDR_VAR 0 2
21556: PUSH
21557: LD_VAR 0 1
21561: PPUSH
21562: CALL_OW 311
21566: ST_TO_ADDR
// live := GetLives ( vehicle ) ;
21567: LD_ADDR_VAR 0 3
21571: PUSH
21572: LD_VAR 0 1
21576: PPUSH
21577: CALL_OW 256
21581: ST_TO_ADDR
// RemoveUnit ( driver ) ;
21582: LD_VAR 0 2
21586: PPUSH
21587: CALL_OW 64
// RemoveUnit ( vehicle ) ;
21591: LD_VAR 0 1
21595: PPUSH
21596: CALL_OW 64
// wait ( rand ( 4 4$30 , 5 5$30 ) ) ;
21600: LD_INT 9450
21602: PPUSH
21603: LD_INT 11550
21605: PPUSH
21606: CALL_OW 12
21610: PPUSH
21611: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21615: LD_INT 35
21617: PPUSH
21618: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
21622: LD_INT 22
21624: PUSH
21625: LD_INT 3
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: LD_INT 92
21634: PUSH
21635: LD_INT 261
21637: PUSH
21638: LD_INT 71
21640: PUSH
21641: LD_INT 12
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: PPUSH
21654: CALL_OW 69
21658: NOT
21659: PUSH
21660: LD_INT 277
21662: PPUSH
21663: LD_INT 80
21665: PPUSH
21666: CALL_OW 428
21670: NOT
21671: AND
21672: IFFALSE 21615
// uc_nation := GetNation ( vehicle ) ;
21674: LD_ADDR_OWVAR 21
21678: PUSH
21679: LD_VAR 0 1
21683: PPUSH
21684: CALL_OW 248
21688: ST_TO_ADDR
// uc_side := 2 ;
21689: LD_ADDR_OWVAR 20
21693: PUSH
21694: LD_INT 2
21696: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( vehicle ) , GetEngine ( vehicle ) , GetControl ( vehicle ) , GetWeapon ( vehicle ) , 66 ) ;
21697: LD_VAR 0 1
21701: PPUSH
21702: CALL_OW 265
21706: PPUSH
21707: LD_VAR 0 1
21711: PPUSH
21712: CALL_OW 262
21716: PPUSH
21717: LD_VAR 0 1
21721: PPUSH
21722: CALL_OW 263
21726: PPUSH
21727: LD_VAR 0 1
21731: PPUSH
21732: CALL_OW 264
21736: PPUSH
21737: LD_INT 66
21739: PPUSH
21740: CALL 30161 0 5
// vehicle := CreateVehicle ;
21744: LD_ADDR_VAR 0 1
21748: PUSH
21749: CALL_OW 45
21753: ST_TO_ADDR
// PlaceUnitXYD ( vehicle , 277 , 80 , 4 , false ) ;
21754: LD_VAR 0 1
21758: PPUSH
21759: LD_INT 277
21761: PPUSH
21762: LD_INT 80
21764: PPUSH
21765: LD_INT 4
21767: PPUSH
21768: LD_INT 0
21770: PPUSH
21771: CALL 64110 0 5
// PlaceHumanInUnit ( driver , vehicle ) ;
21775: LD_VAR 0 2
21779: PPUSH
21780: LD_VAR 0 1
21784: PPUSH
21785: CALL_OW 52
// SetLives ( vehicle , live ) ;
21789: LD_VAR 0 1
21793: PPUSH
21794: LD_VAR 0 3
21798: PPUSH
21799: CALL_OW 234
// if Prob ( [ 70 , 60 , 50 , 40 ] [ Difficulty ] ) then
21803: LD_INT 70
21805: PUSH
21806: LD_INT 60
21808: PUSH
21809: LD_INT 50
21811: PUSH
21812: LD_INT 40
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: PUSH
21821: LD_OWVAR 67
21825: ARRAY
21826: PPUSH
21827: CALL_OW 13
21831: IFFALSE 21850
// SetCargo ( vehicle , mat_oil , 100 ) else
21833: LD_VAR 0 1
21837: PPUSH
21838: LD_INT 2
21840: PPUSH
21841: LD_INT 100
21843: PPUSH
21844: CALL_OW 290
21848: GO 21872
// if live > 333 then
21850: LD_VAR 0 3
21854: PUSH
21855: LD_INT 333
21857: GREATER
21858: IFFALSE 21872
// SetLives ( vehicle , 333 ) ;
21860: LD_VAR 0 1
21864: PPUSH
21865: LD_INT 333
21867: PPUSH
21868: CALL_OW 234
// ComMoveXY ( vehicle , 250 , 119 ) ;
21872: LD_VAR 0 1
21876: PPUSH
21877: LD_INT 250
21879: PPUSH
21880: LD_INT 119
21882: PPUSH
21883: CALL_OW 111
// end ;
21887: PPOPN 3
21889: END
// every 0 0$1 trigger leninSpotted and omarAttack do
21890: LD_EXP 14
21894: PUSH
21895: LD_EXP 23
21899: AND
21900: IFFALSE 22200
21902: GO 21904
21904: DISABLE
// begin wait ( 0 0$45 ) ;
21905: LD_INT 1575
21907: PPUSH
21908: CALL_OW 67
// DialogueOn ;
21912: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
21916: LD_EXP 38
21920: PPUSH
21921: LD_STRING DShar-End-1
21923: PPUSH
21924: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
21928: LD_EXP 30
21932: PPUSH
21933: LD_STRING DH-End-2
21935: PPUSH
21936: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
21940: LD_EXP 38
21944: PPUSH
21945: LD_STRING DShar-End-3
21947: PPUSH
21948: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
21952: LD_EXP 30
21956: PPUSH
21957: LD_STRING DH-End-4
21959: PPUSH
21960: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
21964: LD_EXP 38
21968: PPUSH
21969: LD_STRING DShar-End-5
21971: PPUSH
21972: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
21976: LD_EXP 38
21980: PPUSH
21981: LD_STRING DShar-End-6
21983: PPUSH
21984: CALL_OW 94
// dwait ( 0 0$2 ) ;
21988: LD_INT 70
21990: PPUSH
21991: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
21995: LD_EXP 30
21999: PPUSH
22000: LD_STRING DH-End-7
22002: PPUSH
22003: CALL_OW 88
// DialogueOff ;
22007: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
22011: LD_STRING M6
22013: PPUSH
22014: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
22018: LD_INT 17
22020: PPUSH
22021: LD_INT 1
22023: PPUSH
22024: CALL_OW 424
// escapeAllowed := true ;
22028: LD_ADDR_EXP 24
22032: PUSH
22033: LD_INT 1
22035: ST_TO_ADDR
// wait ( 0 0$2 ) ;
22036: LD_INT 70
22038: PPUSH
22039: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
22043: LD_EXP 41
22047: PPUSH
22048: LD_STRING DKs-End-8
22050: PPUSH
22051: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
22055: LD_EXP 35
22059: PPUSH
22060: LD_STRING DK-End-10
22062: PPUSH
22063: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
22067: LD_EXP 41
22071: PPUSH
22072: LD_STRING DKs-End-9
22074: PPUSH
22075: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
22079: LD_EXP 37
22083: PPUSH
22084: LD_STRING DMar-End-11
22086: PPUSH
22087: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
22091: LD_STRING 05_DrugsTested
22093: PPUSH
22094: LD_EXP 1
22098: PPUSH
22099: CALL_OW 30
22103: IFFALSE 22117
// Say ( Mike , DM-End-12 ) ;
22105: LD_EXP 32
22109: PPUSH
22110: LD_STRING DM-End-12
22112: PPUSH
22113: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
22117: LD_EXP 39
22121: PPUSH
22122: LD_STRING DO-End-13
22124: PPUSH
22125: CALL_OW 88
// if IsOk ( Sophia ) then
22129: LD_EXP 36
22133: PPUSH
22134: CALL_OW 302
22138: IFFALSE 22164
// begin Say ( Sophia , DS-End-15 ) ;
22140: LD_EXP 36
22144: PPUSH
22145: LD_STRING DS-End-15
22147: PPUSH
22148: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
22152: LD_EXP 35
22156: PPUSH
22157: LD_STRING DK-End-16
22159: PPUSH
22160: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
22164: LD_EXP 31
22168: PPUSH
22169: LD_STRING DG-End-17
22171: PPUSH
22172: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
22176: LD_EXP 31
22180: PPUSH
22181: LD_STRING DG-End-18
22183: PPUSH
22184: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
22188: LD_EXP 31
22192: PPUSH
22193: LD_STRING DG-End-19
22195: PPUSH
22196: CALL_OW 88
// end ;
22200: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
22201: LD_EXP 24
22205: IFFALSE 22333
22207: GO 22209
22209: DISABLE
22210: LD_INT 0
22212: PPUSH
22213: PPUSH
// begin enable ;
22214: ENABLE
// display_strings := [ #X106-2 , escapeTimer ] ;
22215: LD_ADDR_OWVAR 47
22219: PUSH
22220: LD_STRING #X106-2
22222: PUSH
22223: LD_EXP 25
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
22232: LD_ADDR_EXP 25
22236: PUSH
22237: LD_EXP 25
22241: PUSH
22242: LD_INT 35
22244: MINUS
22245: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
22246: LD_ADDR_VAR 0 2
22250: PUSH
22251: LD_INT 17
22253: PPUSH
22254: LD_INT 22
22256: PUSH
22257: LD_INT 2
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: LD_INT 21
22266: PUSH
22267: LD_INT 1
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 23
22276: PUSH
22277: LD_INT 2
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: LIST
22288: PPUSH
22289: CALL_OW 71
22293: ST_TO_ADDR
// if not outsiders then
22294: LD_VAR 0 2
22298: NOT
22299: IFFALSE 22316
// begin escapeAllowed := false ;
22301: LD_ADDR_EXP 24
22305: PUSH
22306: LD_INT 0
22308: ST_TO_ADDR
// disable ;
22309: DISABLE
// MissionWin ;
22310: CALL 22336 0 0
// exit ;
22314: GO 22333
// end ; if escapeTimer <= 0 0$00 then
22316: LD_EXP 25
22320: PUSH
22321: LD_INT 0
22323: LESSEQUAL
22324: IFFALSE 22333
// YouLost ( TimeOut ) ;
22326: LD_STRING TimeOut
22328: PPUSH
22329: CALL_OW 104
// end ;
22333: PPOPN 2
22335: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
22336: LD_INT 0
22338: PPUSH
22339: PPUSH
22340: PPUSH
22341: PPUSH
22342: PPUSH
// Say ( Heike , DH-End-20 ) ;
22343: LD_EXP 30
22347: PPUSH
22348: LD_STRING DH-End-20
22350: PPUSH
22351: CALL_OW 88
// if rolfDied then
22355: LD_EXP 13
22359: IFFALSE 22374
// AddMedal ( med1 , - 1 ) else
22361: LD_STRING med1
22363: PPUSH
22364: LD_INT 1
22366: NEG
22367: PPUSH
22368: CALL_OW 101
22372: GO 22404
// if not canRolfJoin then
22374: LD_EXP 29
22378: NOT
22379: IFFALSE 22394
// AddMedal ( med1 , - 2 ) else
22381: LD_STRING med1
22383: PPUSH
22384: LD_INT 2
22386: NEG
22387: PPUSH
22388: CALL_OW 101
22392: GO 22404
// AddMedal ( med1 , 1 ) ;
22394: LD_STRING med1
22396: PPUSH
22397: LD_INT 1
22399: PPUSH
22400: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
22404: LD_EXP 22
22408: PUSH
22409: LD_EXP 16
22413: AND
22414: IFFALSE 22428
// AddMedal ( med2 , 1 ) else
22416: LD_STRING med2
22418: PPUSH
22419: LD_INT 1
22421: PPUSH
22422: CALL_OW 101
22426: GO 22477
// if omarHasVehicles then
22428: LD_EXP 22
22432: IFFALSE 22447
// AddMedal ( med2 , - 1 ) else
22434: LD_STRING med2
22436: PPUSH
22437: LD_INT 1
22439: NEG
22440: PPUSH
22441: CALL_OW 101
22445: GO 22477
// if rolfHasVehicles then
22447: LD_EXP 16
22451: IFFALSE 22466
// AddMedal ( med2 , - 2 ) else
22453: LD_STRING med2
22455: PPUSH
22456: LD_INT 2
22458: NEG
22459: PPUSH
22460: CALL_OW 101
22464: GO 22477
// AddMedal ( med2 , - 3 ) ;
22466: LD_STRING med2
22468: PPUSH
22469: LD_INT 3
22471: NEG
22472: PPUSH
22473: CALL_OW 101
// if ruLoseCounter >= [ 30 , 45 , 50 , 62 ] [ Difficulty ] and heikeLoseCounter = 0 then
22477: LD_EXP 5
22481: PUSH
22482: LD_INT 30
22484: PUSH
22485: LD_INT 45
22487: PUSH
22488: LD_INT 50
22490: PUSH
22491: LD_INT 62
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: PUSH
22500: LD_OWVAR 67
22504: ARRAY
22505: GREATEREQUAL
22506: PUSH
22507: LD_EXP 26
22511: PUSH
22512: LD_INT 0
22514: EQUAL
22515: AND
22516: IFFALSE 22530
// AddMedal ( med3 , 1 ) else
22518: LD_STRING med3
22520: PPUSH
22521: LD_INT 1
22523: PPUSH
22524: CALL_OW 101
22528: GO 22560
// if heikeLoseCounter then
22530: LD_EXP 26
22534: IFFALSE 22549
// AddMedal ( med3 , - 2 ) else
22536: LD_STRING med3
22538: PPUSH
22539: LD_INT 2
22541: NEG
22542: PPUSH
22543: CALL_OW 101
22547: GO 22560
// AddMedal ( med3 , - 1 ) ;
22549: LD_STRING med3
22551: PPUSH
22552: LD_INT 1
22554: NEG
22555: PPUSH
22556: CALL_OW 101
// GiveMedals ( MAIN ) ;
22560: LD_STRING MAIN
22562: PPUSH
22563: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
22567: LD_INT 22
22569: PUSH
22570: LD_INT 2
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 23
22579: PUSH
22580: LD_INT 2
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 21
22589: PUSH
22590: LD_INT 1
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: LIST
22601: PPUSH
22602: CALL_OW 69
22606: PPUSH
22607: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
22611: LD_EXP 30
22615: PPUSH
22616: LD_STRING 06_Heike
22618: PPUSH
22619: CALL_OW 38
// if Aviradze then
22623: LD_EXP 42
22627: IFFALSE 22641
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
22629: LD_EXP 42
22633: PPUSH
22634: LD_STRING 06_Aviradze
22636: PPUSH
22637: CALL_OW 38
// if Ibrahim then
22641: LD_EXP 33
22645: IFFALSE 22659
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
22647: LD_EXP 33
22651: PPUSH
22652: LD_STRING 06_Ibrahim
22654: PPUSH
22655: CALL_OW 38
// if Kamil then
22659: LD_EXP 34
22663: IFFALSE 22677
// SaveCharacters ( Kamil , 06_Kamil ) ;
22665: LD_EXP 34
22669: PPUSH
22670: LD_STRING 06_Kamil
22672: PPUSH
22673: CALL_OW 38
// if Sophia then
22677: LD_EXP 36
22681: IFFALSE 22695
// SaveCharacters ( Sophia , 06_Sophia ) ;
22683: LD_EXP 36
22687: PPUSH
22688: LD_STRING 06_Sophia
22690: PPUSH
22691: CALL_OW 38
// if Kaia then
22695: LD_EXP 35
22699: IFFALSE 22713
// SaveCharacters ( Kaia , 06_Kaia ) ;
22701: LD_EXP 35
22705: PPUSH
22706: LD_STRING 06_Kaia
22708: PPUSH
22709: CALL_OW 38
// if Givi then
22713: LD_EXP 31
22717: IFFALSE 22731
// SaveCharacters ( Givi , 06_Givi ) ;
22719: LD_EXP 31
22723: PPUSH
22724: LD_STRING 06_Givi
22726: PPUSH
22727: CALL_OW 38
// if Mike then
22731: LD_EXP 32
22735: IFFALSE 22749
// SaveCharacters ( Mike , 06_Mike ) ;
22737: LD_EXP 32
22741: PPUSH
22742: LD_STRING 06_Mike
22744: PPUSH
22745: CALL_OW 38
// if Markov then
22749: LD_EXP 37
22753: IFFALSE 22767
// SaveCharacters ( Markov , 06_Markov ) ;
22755: LD_EXP 37
22759: PPUSH
22760: LD_STRING 06_Markov
22762: PPUSH
22763: CALL_OW 38
// if Kurt then
22767: LD_EXP 41
22771: IFFALSE 22785
// SaveCharacters ( Kurt , 06_Kurt ) ;
22773: LD_EXP 41
22777: PPUSH
22778: LD_STRING 06_Kurt
22780: PPUSH
22781: CALL_OW 38
// if heikeSecondSquad then
22785: LD_EXP 45
22789: IFFALSE 22803
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
22791: LD_EXP 45
22795: PPUSH
22796: LD_STRING 06_others
22798: PPUSH
22799: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
22803: LD_ADDR_VAR 0 3
22807: PUSH
22808: LD_INT 22
22810: PUSH
22811: LD_INT 2
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 23
22820: PUSH
22821: LD_INT 0
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PPUSH
22832: CALL_OW 69
22836: ST_TO_ADDR
// if tmp then
22837: LD_VAR 0 3
22841: IFFALSE 22855
// SaveCharacters ( tmp , 06_apes ) ;
22843: LD_VAR 0 3
22847: PPUSH
22848: LD_STRING 06_apes
22850: PPUSH
22851: CALL_OW 38
// if Rolf then
22855: LD_EXP 43
22859: IFFALSE 22910
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
22861: LD_EXP 43
22865: PPUSH
22866: LD_STRING 06_Rolf
22868: PPUSH
22869: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
22873: LD_STRING enableBioCharacter(BIO_ROLF)
22875: PPUSH
22876: CALL_OW 559
// if rolfSquad diff Rolf then
22880: LD_EXP 47
22884: PUSH
22885: LD_EXP 43
22889: DIFF
22890: IFFALSE 22910
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
22892: LD_EXP 47
22896: PUSH
22897: LD_EXP 43
22901: DIFF
22902: PPUSH
22903: LD_STRING 06_RolfSquad
22905: PPUSH
22906: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
22910: LD_ADDR_VAR 0 3
22914: PUSH
22915: LD_INT 17
22917: PPUSH
22918: LD_INT 21
22920: PUSH
22921: LD_INT 2
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PPUSH
22928: CALL_OW 70
22932: ST_TO_ADDR
// if tmp then
22933: LD_VAR 0 3
22937: IFFALSE 23231
// begin tmp2 := [ ] ;
22939: LD_ADDR_VAR 0 4
22943: PUSH
22944: EMPTY
22945: ST_TO_ADDR
// for i in tmp do
22946: LD_ADDR_VAR 0 2
22950: PUSH
22951: LD_VAR 0 3
22955: PUSH
22956: FOR_IN
22957: IFFALSE 23217
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
22959: LD_VAR 0 2
22963: PPUSH
22964: CALL_OW 264
22968: PUSH
22969: LD_INT 32
22971: PUSH
22972: LD_INT 12
22974: PUSH
22975: LD_INT 51
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: LIST
22982: IN
22983: IFFALSE 23120
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
22985: LD_ADDR_VAR 0 5
22989: PUSH
22990: LD_VAR 0 2
22994: PPUSH
22995: LD_INT 1
22997: PPUSH
22998: CALL_OW 289
23002: PUSH
23003: LD_VAR 0 2
23007: PPUSH
23008: LD_INT 2
23010: PPUSH
23011: CALL_OW 289
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
23020: LD_ADDR_VAR 0 4
23024: PUSH
23025: LD_VAR 0 4
23029: PPUSH
23030: LD_VAR 0 4
23034: PUSH
23035: LD_INT 1
23037: PLUS
23038: PPUSH
23039: LD_VAR 0 2
23043: PPUSH
23044: CALL_OW 265
23048: PUSH
23049: LD_VAR 0 2
23053: PPUSH
23054: CALL_OW 262
23058: PUSH
23059: LD_VAR 0 2
23063: PPUSH
23064: CALL_OW 263
23068: PUSH
23069: LD_VAR 0 2
23073: PPUSH
23074: CALL_OW 264
23078: PUSH
23079: LD_VAR 0 2
23083: PPUSH
23084: CALL_OW 248
23088: PUSH
23089: LD_VAR 0 2
23093: PPUSH
23094: CALL_OW 256
23098: PUSH
23099: LD_VAR 0 5
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: PPUSH
23113: CALL_OW 1
23117: ST_TO_ADDR
// end else
23118: GO 23215
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
23120: LD_ADDR_VAR 0 4
23124: PUSH
23125: LD_VAR 0 4
23129: PPUSH
23130: LD_VAR 0 4
23134: PUSH
23135: LD_INT 1
23137: PLUS
23138: PPUSH
23139: LD_VAR 0 2
23143: PPUSH
23144: CALL_OW 265
23148: PUSH
23149: LD_VAR 0 2
23153: PPUSH
23154: CALL_OW 262
23158: PUSH
23159: LD_VAR 0 2
23163: PPUSH
23164: CALL_OW 263
23168: PUSH
23169: LD_VAR 0 2
23173: PPUSH
23174: CALL_OW 264
23178: PUSH
23179: LD_VAR 0 2
23183: PPUSH
23184: CALL_OW 248
23188: PUSH
23189: LD_VAR 0 2
23193: PPUSH
23194: CALL_OW 256
23198: PUSH
23199: EMPTY
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: PPUSH
23210: CALL_OW 1
23214: ST_TO_ADDR
23215: GO 22956
23217: POP
23218: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
23219: LD_VAR 0 4
23223: PPUSH
23224: LD_STRING 06_Vehicles
23226: PPUSH
23227: CALL_OW 39
// end ; YouWin ;
23231: CALL_OW 103
// end ; end_of_file
23235: LD_VAR 0 1
23239: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
23240: LD_INT 0
23242: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
23243: LD_VAR 0 1
23247: PPUSH
23248: LD_VAR 0 2
23252: PPUSH
23253: CALL 80404 0 2
// if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
23257: LD_VAR 0 1
23261: PPUSH
23262: CALL_OW 255
23266: PUSH
23267: LD_INT 2
23269: EQUAL
23270: PUSH
23271: LD_OWVAR 52
23275: AND
23276: PUSH
23277: LD_VAR 0 1
23281: PPUSH
23282: CALL_OW 263
23286: PUSH
23287: LD_INT 1
23289: EQUAL
23290: AND
23291: IFFALSE 23346
// begin driver := IsDrivenBy ( vehicle ) ;
23293: LD_ADDR_VAR 0 3
23297: PUSH
23298: LD_VAR 0 1
23302: PPUSH
23303: CALL_OW 311
23307: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
23308: LD_VAR 0 1
23312: PPUSH
23313: LD_INT 211
23315: PPUSH
23316: LD_INT 101
23318: PPUSH
23319: CALL_OW 111
// AddComExitVehicle ( driver ) ;
23323: LD_VAR 0 3
23327: PPUSH
23328: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23332: LD_VAR 0 3
23336: PPUSH
23337: LD_VAR 0 2
23341: PPUSH
23342: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
23346: LD_VAR 0 1
23350: PPUSH
23351: CALL_OW 255
23355: PUSH
23356: LD_INT 3
23358: EQUAL
23359: IFFALSE 23390
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
23361: LD_ADDR_EXP 56
23365: PUSH
23366: LD_EXP 56
23370: PPUSH
23371: LD_EXP 56
23375: PUSH
23376: LD_INT 1
23378: PLUS
23379: PPUSH
23380: LD_VAR 0 1
23384: PPUSH
23385: CALL_OW 1
23389: ST_TO_ADDR
// end ;
23390: PPOPN 3
23392: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
23393: LD_VAR 0 1
23397: PPUSH
23398: CALL_OW 255
23402: PUSH
23403: LD_INT 8
23405: EQUAL
23406: PUSH
23407: LD_VAR 0 1
23411: PPUSH
23412: CALL_OW 266
23416: PUSH
23417: LD_INT 4
23419: EQUAL
23420: AND
23421: IFFALSE 23432
// ComUpgrade ( b ) ;
23423: LD_VAR 0 1
23427: PPUSH
23428: CALL_OW 146
// end ;
23432: PPOPN 1
23434: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
23435: LD_VAR 0 1
23439: PPUSH
23440: CALL 80282 0 1
// if un = Heike then
23444: LD_VAR 0 1
23448: PUSH
23449: LD_EXP 30
23453: EQUAL
23454: IFFALSE 23463
// YouLost ( Heike ) ;
23456: LD_STRING Heike
23458: PPUSH
23459: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] ] ) then
23463: LD_VAR 0 1
23467: PUSH
23468: LD_INT 22
23470: PUSH
23471: LD_INT 2
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: PUSH
23478: LD_INT 23
23480: PUSH
23481: LD_INT 2
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PPUSH
23492: CALL_OW 69
23496: IN
23497: IFFALSE 23513
// heikeLoseCounter := heikeLoseCounter + 1 ;
23499: LD_ADDR_EXP 26
23503: PUSH
23504: LD_EXP 26
23508: PUSH
23509: LD_INT 1
23511: PLUS
23512: ST_TO_ADDR
// if un = arDepot then
23513: LD_VAR 0 1
23517: PUSH
23518: LD_EXP 44
23522: EQUAL
23523: IFFALSE 23532
// YouLost ( Base ) ;
23525: LD_STRING Base
23527: PPUSH
23528: CALL_OW 104
// if un = Rolf then
23532: LD_VAR 0 1
23536: PUSH
23537: LD_EXP 43
23541: EQUAL
23542: IFFALSE 23552
// rolfDied := true ;
23544: LD_ADDR_EXP 13
23548: PUSH
23549: LD_INT 1
23551: ST_TO_ADDR
// if un in rolfSquad then
23552: LD_VAR 0 1
23556: PUSH
23557: LD_EXP 47
23561: IN
23562: IFFALSE 23580
// rolfSquad := rolfSquad diff un ;
23564: LD_ADDR_EXP 47
23568: PUSH
23569: LD_EXP 47
23573: PUSH
23574: LD_VAR 0 1
23578: DIFF
23579: ST_TO_ADDR
// if un in omarSquad then
23580: LD_VAR 0 1
23584: PUSH
23585: LD_EXP 48
23589: IN
23590: IFFALSE 23608
// omarSquad := omarSquad diff un ;
23592: LD_ADDR_EXP 48
23596: PUSH
23597: LD_EXP 48
23601: PUSH
23602: LD_VAR 0 1
23606: DIFF
23607: ST_TO_ADDR
// if GetSide ( un ) = 3 then
23608: LD_VAR 0 1
23612: PPUSH
23613: CALL_OW 255
23617: PUSH
23618: LD_INT 3
23620: EQUAL
23621: IFFALSE 23637
// ruLoseCounter := ruLoseCounter + 1 ;
23623: LD_ADDR_EXP 5
23627: PUSH
23628: LD_EXP 5
23632: PUSH
23633: LD_INT 1
23635: PLUS
23636: ST_TO_ADDR
// if un in ruAttackers then
23637: LD_VAR 0 1
23641: PUSH
23642: LD_EXP 57
23646: IN
23647: IFFALSE 23665
// ruAttackers := ruAttackers diff un ;
23649: LD_ADDR_EXP 57
23653: PUSH
23654: LD_EXP 57
23658: PUSH
23659: LD_VAR 0 1
23663: DIFF
23664: ST_TO_ADDR
// end ;
23665: PPOPN 1
23667: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
23668: LD_INT 0
23670: PPUSH
23671: PPUSH
23672: PPUSH
23673: PPUSH
// begin if GetSide ( un ) = 3 and not un in ruAttackers then
23674: LD_VAR 0 1
23678: PPUSH
23679: CALL_OW 255
23683: PUSH
23684: LD_INT 3
23686: EQUAL
23687: PUSH
23688: LD_VAR 0 1
23692: PUSH
23693: LD_EXP 57
23697: IN
23698: NOT
23699: AND
23700: IFFALSE 24196
// begin if not IsInArea ( un , ruMainBase ) then
23702: LD_VAR 0 1
23706: PPUSH
23707: LD_INT 10
23709: PPUSH
23710: CALL_OW 308
23714: NOT
23715: IFFALSE 23729
// ComMoveToArea ( un , ruMainBase ) ;
23717: LD_VAR 0 1
23721: PPUSH
23722: LD_INT 10
23724: PPUSH
23725: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
23729: LD_INT 35
23731: PPUSH
23732: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
23736: LD_VAR 0 1
23740: PPUSH
23741: CALL_OW 302
23745: NOT
23746: PUSH
23747: LD_VAR 0 1
23751: PPUSH
23752: LD_INT 10
23754: PPUSH
23755: CALL_OW 308
23759: OR
23760: IFFALSE 23729
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
23762: LD_ADDR_EXP 55
23766: PUSH
23767: LD_EXP 55
23771: PPUSH
23772: LD_EXP 55
23776: PUSH
23777: LD_INT 1
23779: PLUS
23780: PPUSH
23781: LD_VAR 0 1
23785: PPUSH
23786: CALL_OW 1
23790: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
23791: LD_ADDR_VAR 0 8
23795: PUSH
23796: LD_INT 72
23798: PUSH
23799: LD_INT 12
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: ST_TO_ADDR
// if tmp then
23806: LD_VAR 0 8
23810: IFFALSE 23925
// for i in tmp do
23812: LD_ADDR_VAR 0 5
23816: PUSH
23817: LD_VAR 0 8
23821: PUSH
23822: FOR_IN
23823: IFFALSE 23923
// if UnitsInside ( i ) < 6 then
23825: LD_VAR 0 5
23829: PPUSH
23830: CALL_OW 313
23834: PUSH
23835: LD_INT 6
23837: LESS
23838: IFFALSE 23921
// begin AddComEnterUnit ( un , i ) ;
23840: LD_VAR 0 1
23844: PPUSH
23845: LD_VAR 0 5
23849: PPUSH
23850: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
23854: LD_VAR 0 8
23858: PPUSH
23859: LD_INT 22
23861: PUSH
23862: LD_INT 23
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 1
23871: PPUSH
23872: LD_INT 2
23874: PPUSH
23875: CALL_OW 12
23879: ARRAY
23880: PPUSH
23881: LD_INT 1
23883: PPUSH
23884: LD_INT 1
23886: PPUSH
23887: LD_INT 44
23889: PUSH
23890: LD_INT 46
23892: PUSH
23893: LD_INT 47
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 1
23903: PPUSH
23904: LD_INT 3
23906: PPUSH
23907: CALL_OW 12
23911: ARRAY
23912: PPUSH
23913: CALL_OW 185
// exit ;
23917: POP
23918: POP
23919: GO 24196
// end ;
23921: GO 23822
23923: POP
23924: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
23925: LD_ADDR_VAR 0 8
23929: PUSH
23930: LD_INT 10
23932: PPUSH
23933: LD_INT 22
23935: PUSH
23936: LD_INT 3
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 50
23945: PUSH
23946: EMPTY
23947: LIST
23948: PUSH
23949: LD_INT 2
23951: PUSH
23952: LD_INT 30
23954: PUSH
23955: LD_INT 4
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: LD_INT 30
23964: PUSH
23965: LD_INT 5
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 30
23974: PUSH
23975: LD_INT 32
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 30
23984: PUSH
23985: LD_INT 31
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: LIST
24003: PPUSH
24004: CALL_OW 70
24008: ST_TO_ADDR
// if not tmp then
24009: LD_VAR 0 8
24013: NOT
24014: IFFALSE 24033
// begin ComMoveXY ( un , 83 , 133 ) ;
24016: LD_VAR 0 1
24020: PPUSH
24021: LD_INT 83
24023: PPUSH
24024: LD_INT 133
24026: PPUSH
24027: CALL_OW 111
// exit ;
24031: GO 24196
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
24033: LD_ADDR_VAR 0 6
24037: PUSH
24038: LD_VAR 0 1
24042: PPUSH
24043: LD_VAR 0 8
24047: PPUSH
24048: LD_INT 1
24050: PPUSH
24051: LD_INT 1
24053: PPUSH
24054: CALL 30718 0 4
24058: PUSH
24059: FOR_IN
24060: IFFALSE 24194
// begin case GetBType ( b ) of b_armoury , b_barracks :
24062: LD_VAR 0 6
24066: PPUSH
24067: CALL_OW 266
24071: PUSH
24072: LD_INT 4
24074: DOUBLE
24075: EQUAL
24076: IFTRUE 24086
24078: LD_INT 5
24080: DOUBLE
24081: EQUAL
24082: IFTRUE 24086
24084: GO 24097
24086: POP
// p := 6 ; b_breastwork , b_bunker :
24087: LD_ADDR_VAR 0 7
24091: PUSH
24092: LD_INT 6
24094: ST_TO_ADDR
24095: GO 24123
24097: LD_INT 31
24099: DOUBLE
24100: EQUAL
24101: IFTRUE 24111
24103: LD_INT 32
24105: DOUBLE
24106: EQUAL
24107: IFTRUE 24111
24109: GO 24122
24111: POP
// p := 1 ; end ;
24112: LD_ADDR_VAR 0 7
24116: PUSH
24117: LD_INT 1
24119: ST_TO_ADDR
24120: GO 24123
24122: POP
// if UnitsInside ( b ) < p then
24123: LD_VAR 0 6
24127: PPUSH
24128: CALL_OW 313
24132: PUSH
24133: LD_VAR 0 7
24137: LESS
24138: IFFALSE 24192
// begin ComEnterUnit ( un , b ) ;
24140: LD_VAR 0 1
24144: PPUSH
24145: LD_VAR 0 6
24149: PPUSH
24150: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
24154: LD_VAR 0 6
24158: PPUSH
24159: CALL_OW 266
24163: PUSH
24164: LD_INT 4
24166: PUSH
24167: LD_INT 5
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: IN
24174: IFFALSE 24188
// AddComChangeProfession ( un , class_soldier ) ;
24176: LD_VAR 0 1
24180: PPUSH
24181: LD_INT 1
24183: PPUSH
24184: CALL_OW 183
// exit ;
24188: POP
24189: POP
24190: GO 24196
// end ; end ;
24192: GO 24059
24194: POP
24195: POP
// end ; end ;
24196: PPOPN 8
24198: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
24199: LD_INT 0
24201: PPUSH
24202: PPUSH
24203: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
24204: LD_VAR 0 2
24208: PPUSH
24209: CALL_OW 255
24213: PUSH
24214: LD_INT 3
24216: EQUAL
24217: PUSH
24218: LD_VAR 0 2
24222: PPUSH
24223: CALL_OW 257
24227: PUSH
24228: LD_INT 1
24230: EQUAL
24231: AND
24232: PUSH
24233: LD_VAR 0 2
24237: PUSH
24238: LD_EXP 55
24242: IN
24243: NOT
24244: AND
24245: IFFALSE 24558
// begin ComMoveToArea ( un , ruMainBase ) ;
24247: LD_VAR 0 2
24251: PPUSH
24252: LD_INT 10
24254: PPUSH
24255: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
24259: LD_INT 35
24261: PPUSH
24262: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
24266: LD_VAR 0 2
24270: PPUSH
24271: CALL_OW 302
24275: NOT
24276: PUSH
24277: LD_VAR 0 2
24281: PPUSH
24282: LD_INT 10
24284: PPUSH
24285: CALL_OW 308
24289: OR
24290: IFFALSE 24259
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
24292: LD_ADDR_EXP 55
24296: PUSH
24297: LD_EXP 55
24301: PPUSH
24302: LD_EXP 55
24306: PUSH
24307: LD_INT 1
24309: PLUS
24310: PPUSH
24311: LD_VAR 0 2
24315: PPUSH
24316: CALL_OW 1
24320: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
24321: LD_ADDR_VAR 0 4
24325: PUSH
24326: LD_INT 10
24328: PPUSH
24329: LD_INT 22
24331: PUSH
24332: LD_INT 3
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 50
24341: PUSH
24342: EMPTY
24343: LIST
24344: PUSH
24345: LD_INT 2
24347: PUSH
24348: LD_INT 30
24350: PUSH
24351: LD_INT 4
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 30
24360: PUSH
24361: LD_INT 5
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: PUSH
24368: LD_INT 30
24370: PUSH
24371: LD_INT 32
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: PUSH
24378: LD_INT 30
24380: PUSH
24381: LD_INT 31
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: LIST
24399: PPUSH
24400: CALL_OW 70
24404: ST_TO_ADDR
// if not tmp then
24405: LD_VAR 0 4
24409: NOT
24410: IFFALSE 24429
// begin ComMoveXY ( un , 83 , 133 ) ;
24412: LD_VAR 0 2
24416: PPUSH
24417: LD_INT 83
24419: PPUSH
24420: LD_INT 133
24422: PPUSH
24423: CALL_OW 111
// exit ;
24427: GO 24807
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
24429: LD_ADDR_VAR 0 5
24433: PUSH
24434: LD_VAR 0 2
24438: PPUSH
24439: LD_VAR 0 4
24443: PPUSH
24444: LD_INT 1
24446: PPUSH
24447: LD_INT 1
24449: PPUSH
24450: CALL 30718 0 4
24454: PUSH
24455: FOR_IN
24456: IFFALSE 24556
// begin case GetBType ( b ) of b_armoury , b_barracks :
24458: LD_VAR 0 5
24462: PPUSH
24463: CALL_OW 266
24467: PUSH
24468: LD_INT 4
24470: DOUBLE
24471: EQUAL
24472: IFTRUE 24482
24474: LD_INT 5
24476: DOUBLE
24477: EQUAL
24478: IFTRUE 24482
24480: GO 24493
24482: POP
// p := 6 ; b_breastwork , b_bunker :
24483: LD_ADDR_VAR 0 3
24487: PUSH
24488: LD_INT 6
24490: ST_TO_ADDR
24491: GO 24519
24493: LD_INT 31
24495: DOUBLE
24496: EQUAL
24497: IFTRUE 24507
24499: LD_INT 32
24501: DOUBLE
24502: EQUAL
24503: IFTRUE 24507
24505: GO 24518
24507: POP
// p := 1 ; end ;
24508: LD_ADDR_VAR 0 3
24512: PUSH
24513: LD_INT 1
24515: ST_TO_ADDR
24516: GO 24519
24518: POP
// if UnitsInside ( b ) < p then
24519: LD_VAR 0 5
24523: PPUSH
24524: CALL_OW 313
24528: PUSH
24529: LD_VAR 0 3
24533: LESS
24534: IFFALSE 24554
// begin ComEnterUnit ( un , b ) ;
24536: LD_VAR 0 2
24540: PPUSH
24541: LD_VAR 0 5
24545: PPUSH
24546: CALL_OW 120
// exit ;
24550: POP
24551: POP
24552: GO 24807
// end ; end ;
24554: GO 24455
24556: POP
24557: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
24558: LD_VAR 0 2
24562: PUSH
24563: LD_EXP 55
24567: IN
24568: PUSH
24569: LD_VAR 0 2
24573: PPUSH
24574: CALL_OW 257
24578: PUSH
24579: LD_INT 1
24581: EQUAL
24582: AND
24583: IFFALSE 24807
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
24585: LD_ADDR_VAR 0 4
24589: PUSH
24590: LD_INT 10
24592: PPUSH
24593: LD_INT 22
24595: PUSH
24596: LD_INT 3
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 50
24605: PUSH
24606: EMPTY
24607: LIST
24608: PUSH
24609: LD_INT 2
24611: PUSH
24612: LD_INT 30
24614: PUSH
24615: LD_INT 4
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 30
24624: PUSH
24625: LD_INT 5
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 30
24634: PUSH
24635: LD_INT 32
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: LD_INT 30
24644: PUSH
24645: LD_INT 31
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: LIST
24663: PPUSH
24664: CALL_OW 70
24668: ST_TO_ADDR
// if not tmp then
24669: LD_VAR 0 4
24673: NOT
24674: IFFALSE 24678
// exit ;
24676: GO 24807
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
24678: LD_ADDR_VAR 0 5
24682: PUSH
24683: LD_VAR 0 2
24687: PPUSH
24688: LD_VAR 0 4
24692: PPUSH
24693: LD_INT 1
24695: PPUSH
24696: LD_INT 1
24698: PPUSH
24699: CALL 30718 0 4
24703: PUSH
24704: FOR_IN
24705: IFFALSE 24805
// begin case GetBType ( b ) of b_armoury , b_barracks :
24707: LD_VAR 0 5
24711: PPUSH
24712: CALL_OW 266
24716: PUSH
24717: LD_INT 4
24719: DOUBLE
24720: EQUAL
24721: IFTRUE 24731
24723: LD_INT 5
24725: DOUBLE
24726: EQUAL
24727: IFTRUE 24731
24729: GO 24742
24731: POP
// p := 6 ; b_breastwork , b_bunker :
24732: LD_ADDR_VAR 0 3
24736: PUSH
24737: LD_INT 6
24739: ST_TO_ADDR
24740: GO 24768
24742: LD_INT 31
24744: DOUBLE
24745: EQUAL
24746: IFTRUE 24756
24748: LD_INT 32
24750: DOUBLE
24751: EQUAL
24752: IFTRUE 24756
24754: GO 24767
24756: POP
// p := 1 ; end ;
24757: LD_ADDR_VAR 0 3
24761: PUSH
24762: LD_INT 1
24764: ST_TO_ADDR
24765: GO 24768
24767: POP
// if UnitsInside ( b ) < p then
24768: LD_VAR 0 5
24772: PPUSH
24773: CALL_OW 313
24777: PUSH
24778: LD_VAR 0 3
24782: LESS
24783: IFFALSE 24803
// begin ComEnterUnit ( un , b ) ;
24785: LD_VAR 0 2
24789: PPUSH
24790: LD_VAR 0 5
24794: PPUSH
24795: CALL_OW 120
// exit ;
24799: POP
24800: POP
24801: GO 24807
// end ; end ;
24803: GO 24704
24805: POP
24806: POP
// end ; end ;
24807: PPOPN 5
24809: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
24810: LD_VAR 0 1
24814: PUSH
24815: LD_INT 2
24817: EQUAL
24818: PUSH
24819: LD_VAR 0 2
24823: PUSH
24824: LD_INT 5
24826: PUSH
24827: LD_INT 8
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: IN
24834: AND
24835: IFFALSE 24844
// YouLost ( FriendlyFire ) ;
24837: LD_STRING FriendlyFire
24839: PPUSH
24840: CALL_OW 104
// end ;
24844: PPOPN 2
24846: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
24847: LD_VAR 0 1
24851: PPUSH
24852: CALL_OW 255
24856: PUSH
24857: LD_INT 8
24859: EQUAL
24860: PUSH
24861: LD_VAR 0 1
24865: PPUSH
24866: CALL_OW 266
24870: PUSH
24871: LD_INT 5
24873: EQUAL
24874: AND
24875: IFFALSE 24889
// SetClass ( unit , class_mortar ) ;
24877: LD_VAR 0 2
24881: PPUSH
24882: LD_INT 8
24884: PPUSH
24885: CALL_OW 336
// end ; end_of_file
24889: PPOPN 2
24891: END
// every 0 0$50 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 300 , 250 , 200 , 150 ] [ Difficulty ] do
24892: LD_INT 6
24894: PPUSH
24895: LD_INT 1
24897: PPUSH
24898: CALL_OW 287
24902: PUSH
24903: LD_INT 300
24905: PUSH
24906: LD_INT 250
24908: PUSH
24909: LD_INT 200
24911: PUSH
24912: LD_INT 150
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: PUSH
24921: LD_OWVAR 67
24925: ARRAY
24926: LESS
24927: IFFALSE 24954
24929: GO 24931
24931: DISABLE
// begin enable ;
24932: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
24933: LD_INT 1
24935: PPUSH
24936: LD_INT 5
24938: PPUSH
24939: CALL_OW 12
24943: PPUSH
24944: LD_INT 6
24946: PPUSH
24947: LD_INT 1
24949: PPUSH
24950: CALL_OW 55
// end ; end_of_file
24954: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
24955: LD_EXP 18
24959: PUSH
24960: LD_EXP 20
24964: AND
24965: PUSH
24966: LD_EXP 17
24970: PUSH
24971: LD_EXP 19
24975: AND
24976: OR
24977: IFFALSE 25296
24979: GO 24981
24981: DISABLE
// begin enable ;
24982: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
24983: LD_EXP 18
24987: PUSH
24988: LD_EXP 20
24992: AND
24993: PUSH
24994: LD_EXP 17
24998: PUSH
24999: LD_EXP 19
25003: AND
25004: AND
25005: IFFALSE 25142
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
25007: LD_ADDR_OWVAR 47
25011: PUSH
25012: LD_STRING #X106-1a
25014: PUSH
25015: LD_EXP 21
25019: PUSH
25020: LD_INT 16
25022: PPUSH
25023: LD_INT 22
25025: PUSH
25026: LD_INT 2
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 21
25035: PUSH
25036: LD_INT 2
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 33
25045: PUSH
25046: LD_INT 1
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 58
25055: PUSH
25056: EMPTY
25057: LIST
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: PPUSH
25065: CALL_OW 70
25069: MINUS
25070: PPUSH
25071: CALL 64156 0 1
25075: PUSH
25076: LD_STRING #X106-3a
25078: PUSH
25079: LD_EXP 20
25083: PUSH
25084: LD_STRING #X106-1
25086: PUSH
25087: LD_EXP 47
25091: PUSH
25092: LD_INT 0
25094: PLUS
25095: PUSH
25096: LD_EXP 47
25100: PPUSH
25101: LD_INT 55
25103: PUSH
25104: EMPTY
25105: LIST
25106: PPUSH
25107: CALL_OW 72
25111: PUSH
25112: LD_INT 0
25114: PLUS
25115: MINUS
25116: PPUSH
25117: CALL 64156 0 1
25121: PUSH
25122: LD_STRING #X106-3
25124: PUSH
25125: LD_EXP 19
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: ST_TO_ADDR
// end else
25140: GO 25296
// if omarWantVehicles and omarWaitingForVehiclesTimer then
25142: LD_EXP 18
25146: PUSH
25147: LD_EXP 20
25151: AND
25152: IFFALSE 25239
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
25154: LD_ADDR_OWVAR 47
25158: PUSH
25159: LD_STRING #X106-1a
25161: PUSH
25162: LD_EXP 21
25166: PUSH
25167: LD_INT 16
25169: PPUSH
25170: LD_INT 22
25172: PUSH
25173: LD_INT 2
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 21
25182: PUSH
25183: LD_INT 2
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 33
25192: PUSH
25193: LD_INT 1
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 58
25202: PUSH
25203: EMPTY
25204: LIST
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: PPUSH
25212: CALL_OW 70
25216: MINUS
25217: PPUSH
25218: CALL 64156 0 1
25222: PUSH
25223: LD_STRING #X106-3a
25225: PUSH
25226: LD_EXP 20
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: ST_TO_ADDR
// end else
25237: GO 25296
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
25239: LD_ADDR_OWVAR 47
25243: PUSH
25244: LD_STRING #X106-1
25246: PUSH
25247: LD_EXP 47
25251: PUSH
25252: LD_INT 0
25254: PLUS
25255: PUSH
25256: LD_EXP 47
25260: PPUSH
25261: LD_INT 55
25263: PUSH
25264: EMPTY
25265: LIST
25266: PPUSH
25267: CALL_OW 72
25271: PUSH
25272: LD_INT 0
25274: PLUS
25275: MINUS
25276: PPUSH
25277: CALL 64156 0 1
25281: PUSH
25282: LD_STRING #X106-3
25284: PUSH
25285: LD_EXP 19
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: ST_TO_ADDR
// end ; end ; end_of_file
25296: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25297: LD_INT 0
25299: PPUSH
25300: PPUSH
// if exist_mode then
25301: LD_VAR 0 2
25305: IFFALSE 25330
// unit := CreateCharacter ( prefix & ident ) else
25307: LD_ADDR_VAR 0 5
25311: PUSH
25312: LD_VAR 0 3
25316: PUSH
25317: LD_VAR 0 1
25321: STR
25322: PPUSH
25323: CALL_OW 34
25327: ST_TO_ADDR
25328: GO 25345
// unit := NewCharacter ( ident ) ;
25330: LD_ADDR_VAR 0 5
25334: PUSH
25335: LD_VAR 0 1
25339: PPUSH
25340: CALL_OW 25
25344: ST_TO_ADDR
// result := unit ;
25345: LD_ADDR_VAR 0 4
25349: PUSH
25350: LD_VAR 0 5
25354: ST_TO_ADDR
// end ;
25355: LD_VAR 0 4
25359: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25360: LD_INT 0
25362: PPUSH
25363: PPUSH
// if not side or not nation then
25364: LD_VAR 0 1
25368: NOT
25369: PUSH
25370: LD_VAR 0 2
25374: NOT
25375: OR
25376: IFFALSE 25380
// exit ;
25378: GO 26148
// case nation of nation_american :
25380: LD_VAR 0 2
25384: PUSH
25385: LD_INT 1
25387: DOUBLE
25388: EQUAL
25389: IFTRUE 25393
25391: GO 25607
25393: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25394: LD_ADDR_VAR 0 4
25398: PUSH
25399: LD_INT 35
25401: PUSH
25402: LD_INT 45
25404: PUSH
25405: LD_INT 46
25407: PUSH
25408: LD_INT 47
25410: PUSH
25411: LD_INT 82
25413: PUSH
25414: LD_INT 83
25416: PUSH
25417: LD_INT 84
25419: PUSH
25420: LD_INT 85
25422: PUSH
25423: LD_INT 86
25425: PUSH
25426: LD_INT 1
25428: PUSH
25429: LD_INT 2
25431: PUSH
25432: LD_INT 6
25434: PUSH
25435: LD_INT 15
25437: PUSH
25438: LD_INT 16
25440: PUSH
25441: LD_INT 7
25443: PUSH
25444: LD_INT 12
25446: PUSH
25447: LD_INT 13
25449: PUSH
25450: LD_INT 10
25452: PUSH
25453: LD_INT 14
25455: PUSH
25456: LD_INT 20
25458: PUSH
25459: LD_INT 21
25461: PUSH
25462: LD_INT 22
25464: PUSH
25465: LD_INT 25
25467: PUSH
25468: LD_INT 32
25470: PUSH
25471: LD_INT 27
25473: PUSH
25474: LD_INT 36
25476: PUSH
25477: LD_INT 69
25479: PUSH
25480: LD_INT 39
25482: PUSH
25483: LD_INT 34
25485: PUSH
25486: LD_INT 40
25488: PUSH
25489: LD_INT 48
25491: PUSH
25492: LD_INT 49
25494: PUSH
25495: LD_INT 50
25497: PUSH
25498: LD_INT 51
25500: PUSH
25501: LD_INT 52
25503: PUSH
25504: LD_INT 53
25506: PUSH
25507: LD_INT 54
25509: PUSH
25510: LD_INT 55
25512: PUSH
25513: LD_INT 56
25515: PUSH
25516: LD_INT 57
25518: PUSH
25519: LD_INT 58
25521: PUSH
25522: LD_INT 59
25524: PUSH
25525: LD_INT 60
25527: PUSH
25528: LD_INT 61
25530: PUSH
25531: LD_INT 62
25533: PUSH
25534: LD_INT 80
25536: PUSH
25537: LD_INT 82
25539: PUSH
25540: LD_INT 83
25542: PUSH
25543: LD_INT 84
25545: PUSH
25546: LD_INT 85
25548: PUSH
25549: LD_INT 86
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: ST_TO_ADDR
25605: GO 26072
25607: LD_INT 2
25609: DOUBLE
25610: EQUAL
25611: IFTRUE 25615
25613: GO 25841
25615: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25616: LD_ADDR_VAR 0 4
25620: PUSH
25621: LD_INT 35
25623: PUSH
25624: LD_INT 45
25626: PUSH
25627: LD_INT 46
25629: PUSH
25630: LD_INT 47
25632: PUSH
25633: LD_INT 82
25635: PUSH
25636: LD_INT 83
25638: PUSH
25639: LD_INT 84
25641: PUSH
25642: LD_INT 85
25644: PUSH
25645: LD_INT 87
25647: PUSH
25648: LD_INT 70
25650: PUSH
25651: LD_INT 1
25653: PUSH
25654: LD_INT 11
25656: PUSH
25657: LD_INT 3
25659: PUSH
25660: LD_INT 4
25662: PUSH
25663: LD_INT 5
25665: PUSH
25666: LD_INT 6
25668: PUSH
25669: LD_INT 15
25671: PUSH
25672: LD_INT 18
25674: PUSH
25675: LD_INT 7
25677: PUSH
25678: LD_INT 17
25680: PUSH
25681: LD_INT 8
25683: PUSH
25684: LD_INT 20
25686: PUSH
25687: LD_INT 21
25689: PUSH
25690: LD_INT 22
25692: PUSH
25693: LD_INT 72
25695: PUSH
25696: LD_INT 26
25698: PUSH
25699: LD_INT 69
25701: PUSH
25702: LD_INT 39
25704: PUSH
25705: LD_INT 40
25707: PUSH
25708: LD_INT 41
25710: PUSH
25711: LD_INT 42
25713: PUSH
25714: LD_INT 43
25716: PUSH
25717: LD_INT 48
25719: PUSH
25720: LD_INT 49
25722: PUSH
25723: LD_INT 50
25725: PUSH
25726: LD_INT 51
25728: PUSH
25729: LD_INT 52
25731: PUSH
25732: LD_INT 53
25734: PUSH
25735: LD_INT 54
25737: PUSH
25738: LD_INT 55
25740: PUSH
25741: LD_INT 56
25743: PUSH
25744: LD_INT 60
25746: PUSH
25747: LD_INT 61
25749: PUSH
25750: LD_INT 62
25752: PUSH
25753: LD_INT 66
25755: PUSH
25756: LD_INT 67
25758: PUSH
25759: LD_INT 68
25761: PUSH
25762: LD_INT 81
25764: PUSH
25765: LD_INT 82
25767: PUSH
25768: LD_INT 83
25770: PUSH
25771: LD_INT 84
25773: PUSH
25774: LD_INT 85
25776: PUSH
25777: LD_INT 87
25779: PUSH
25780: LD_INT 88
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: ST_TO_ADDR
25839: GO 26072
25841: LD_INT 3
25843: DOUBLE
25844: EQUAL
25845: IFTRUE 25849
25847: GO 26071
25849: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25850: LD_ADDR_VAR 0 4
25854: PUSH
25855: LD_INT 46
25857: PUSH
25858: LD_INT 47
25860: PUSH
25861: LD_INT 1
25863: PUSH
25864: LD_INT 2
25866: PUSH
25867: LD_INT 82
25869: PUSH
25870: LD_INT 83
25872: PUSH
25873: LD_INT 84
25875: PUSH
25876: LD_INT 85
25878: PUSH
25879: LD_INT 86
25881: PUSH
25882: LD_INT 11
25884: PUSH
25885: LD_INT 9
25887: PUSH
25888: LD_INT 20
25890: PUSH
25891: LD_INT 19
25893: PUSH
25894: LD_INT 21
25896: PUSH
25897: LD_INT 24
25899: PUSH
25900: LD_INT 22
25902: PUSH
25903: LD_INT 25
25905: PUSH
25906: LD_INT 28
25908: PUSH
25909: LD_INT 29
25911: PUSH
25912: LD_INT 30
25914: PUSH
25915: LD_INT 31
25917: PUSH
25918: LD_INT 37
25920: PUSH
25921: LD_INT 38
25923: PUSH
25924: LD_INT 32
25926: PUSH
25927: LD_INT 27
25929: PUSH
25930: LD_INT 33
25932: PUSH
25933: LD_INT 69
25935: PUSH
25936: LD_INT 39
25938: PUSH
25939: LD_INT 34
25941: PUSH
25942: LD_INT 40
25944: PUSH
25945: LD_INT 71
25947: PUSH
25948: LD_INT 23
25950: PUSH
25951: LD_INT 44
25953: PUSH
25954: LD_INT 48
25956: PUSH
25957: LD_INT 49
25959: PUSH
25960: LD_INT 50
25962: PUSH
25963: LD_INT 51
25965: PUSH
25966: LD_INT 52
25968: PUSH
25969: LD_INT 53
25971: PUSH
25972: LD_INT 54
25974: PUSH
25975: LD_INT 55
25977: PUSH
25978: LD_INT 56
25980: PUSH
25981: LD_INT 57
25983: PUSH
25984: LD_INT 58
25986: PUSH
25987: LD_INT 59
25989: PUSH
25990: LD_INT 63
25992: PUSH
25993: LD_INT 64
25995: PUSH
25996: LD_INT 65
25998: PUSH
25999: LD_INT 82
26001: PUSH
26002: LD_INT 83
26004: PUSH
26005: LD_INT 84
26007: PUSH
26008: LD_INT 85
26010: PUSH
26011: LD_INT 86
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: ST_TO_ADDR
26069: GO 26072
26071: POP
// if state > - 1 and state < 3 then
26072: LD_VAR 0 3
26076: PUSH
26077: LD_INT 1
26079: NEG
26080: GREATER
26081: PUSH
26082: LD_VAR 0 3
26086: PUSH
26087: LD_INT 3
26089: LESS
26090: AND
26091: IFFALSE 26148
// for i in result do
26093: LD_ADDR_VAR 0 5
26097: PUSH
26098: LD_VAR 0 4
26102: PUSH
26103: FOR_IN
26104: IFFALSE 26146
// if GetTech ( i , side ) <> state then
26106: LD_VAR 0 5
26110: PPUSH
26111: LD_VAR 0 1
26115: PPUSH
26116: CALL_OW 321
26120: PUSH
26121: LD_VAR 0 3
26125: NONEQUAL
26126: IFFALSE 26144
// result := result diff i ;
26128: LD_ADDR_VAR 0 4
26132: PUSH
26133: LD_VAR 0 4
26137: PUSH
26138: LD_VAR 0 5
26142: DIFF
26143: ST_TO_ADDR
26144: GO 26103
26146: POP
26147: POP
// end ;
26148: LD_VAR 0 4
26152: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26153: LD_INT 0
26155: PPUSH
26156: PPUSH
26157: PPUSH
// result := true ;
26158: LD_ADDR_VAR 0 3
26162: PUSH
26163: LD_INT 1
26165: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26166: LD_ADDR_VAR 0 5
26170: PUSH
26171: LD_VAR 0 2
26175: PPUSH
26176: CALL_OW 480
26180: ST_TO_ADDR
// if not tmp then
26181: LD_VAR 0 5
26185: NOT
26186: IFFALSE 26190
// exit ;
26188: GO 26239
// for i in tmp do
26190: LD_ADDR_VAR 0 4
26194: PUSH
26195: LD_VAR 0 5
26199: PUSH
26200: FOR_IN
26201: IFFALSE 26237
// if GetTech ( i , side ) <> state_researched then
26203: LD_VAR 0 4
26207: PPUSH
26208: LD_VAR 0 1
26212: PPUSH
26213: CALL_OW 321
26217: PUSH
26218: LD_INT 2
26220: NONEQUAL
26221: IFFALSE 26235
// begin result := false ;
26223: LD_ADDR_VAR 0 3
26227: PUSH
26228: LD_INT 0
26230: ST_TO_ADDR
// exit ;
26231: POP
26232: POP
26233: GO 26239
// end ;
26235: GO 26200
26237: POP
26238: POP
// end ;
26239: LD_VAR 0 3
26243: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26244: LD_INT 0
26246: PPUSH
26247: PPUSH
26248: PPUSH
26249: PPUSH
26250: PPUSH
26251: PPUSH
26252: PPUSH
26253: PPUSH
26254: PPUSH
26255: PPUSH
26256: PPUSH
26257: PPUSH
26258: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26259: LD_VAR 0 1
26263: NOT
26264: PUSH
26265: LD_VAR 0 1
26269: PPUSH
26270: CALL_OW 257
26274: PUSH
26275: LD_INT 9
26277: NONEQUAL
26278: OR
26279: IFFALSE 26283
// exit ;
26281: GO 26856
// side := GetSide ( unit ) ;
26283: LD_ADDR_VAR 0 9
26287: PUSH
26288: LD_VAR 0 1
26292: PPUSH
26293: CALL_OW 255
26297: ST_TO_ADDR
// tech_space := tech_spacanom ;
26298: LD_ADDR_VAR 0 12
26302: PUSH
26303: LD_INT 29
26305: ST_TO_ADDR
// tech_time := tech_taurad ;
26306: LD_ADDR_VAR 0 13
26310: PUSH
26311: LD_INT 28
26313: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26314: LD_ADDR_VAR 0 11
26318: PUSH
26319: LD_VAR 0 1
26323: PPUSH
26324: CALL_OW 310
26328: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26329: LD_VAR 0 11
26333: PPUSH
26334: CALL_OW 247
26338: PUSH
26339: LD_INT 2
26341: EQUAL
26342: IFFALSE 26346
// exit ;
26344: GO 26856
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26346: LD_ADDR_VAR 0 8
26350: PUSH
26351: LD_INT 81
26353: PUSH
26354: LD_VAR 0 9
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 3
26365: PUSH
26366: LD_INT 21
26368: PUSH
26369: LD_INT 3
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PPUSH
26384: CALL_OW 69
26388: ST_TO_ADDR
// if not tmp then
26389: LD_VAR 0 8
26393: NOT
26394: IFFALSE 26398
// exit ;
26396: GO 26856
// if in_unit then
26398: LD_VAR 0 11
26402: IFFALSE 26426
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26404: LD_ADDR_VAR 0 10
26408: PUSH
26409: LD_VAR 0 8
26413: PPUSH
26414: LD_VAR 0 11
26418: PPUSH
26419: CALL_OW 74
26423: ST_TO_ADDR
26424: GO 26446
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26426: LD_ADDR_VAR 0 10
26430: PUSH
26431: LD_VAR 0 8
26435: PPUSH
26436: LD_VAR 0 1
26440: PPUSH
26441: CALL_OW 74
26445: ST_TO_ADDR
// if not enemy then
26446: LD_VAR 0 10
26450: NOT
26451: IFFALSE 26455
// exit ;
26453: GO 26856
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26455: LD_VAR 0 11
26459: PUSH
26460: LD_VAR 0 11
26464: PPUSH
26465: LD_VAR 0 10
26469: PPUSH
26470: CALL_OW 296
26474: PUSH
26475: LD_INT 13
26477: GREATER
26478: AND
26479: PUSH
26480: LD_VAR 0 1
26484: PPUSH
26485: LD_VAR 0 10
26489: PPUSH
26490: CALL_OW 296
26494: PUSH
26495: LD_INT 12
26497: GREATER
26498: OR
26499: IFFALSE 26503
// exit ;
26501: GO 26856
// missile := [ 1 ] ;
26503: LD_ADDR_VAR 0 14
26507: PUSH
26508: LD_INT 1
26510: PUSH
26511: EMPTY
26512: LIST
26513: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26514: LD_VAR 0 9
26518: PPUSH
26519: LD_VAR 0 12
26523: PPUSH
26524: CALL_OW 325
26528: IFFALSE 26557
// missile := Replace ( missile , missile + 1 , 2 ) ;
26530: LD_ADDR_VAR 0 14
26534: PUSH
26535: LD_VAR 0 14
26539: PPUSH
26540: LD_VAR 0 14
26544: PUSH
26545: LD_INT 1
26547: PLUS
26548: PPUSH
26549: LD_INT 2
26551: PPUSH
26552: CALL_OW 1
26556: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26557: LD_VAR 0 9
26561: PPUSH
26562: LD_VAR 0 13
26566: PPUSH
26567: CALL_OW 325
26571: PUSH
26572: LD_VAR 0 10
26576: PPUSH
26577: CALL_OW 255
26581: PPUSH
26582: LD_VAR 0 13
26586: PPUSH
26587: CALL_OW 325
26591: NOT
26592: AND
26593: IFFALSE 26622
// missile := Replace ( missile , missile + 1 , 3 ) ;
26595: LD_ADDR_VAR 0 14
26599: PUSH
26600: LD_VAR 0 14
26604: PPUSH
26605: LD_VAR 0 14
26609: PUSH
26610: LD_INT 1
26612: PLUS
26613: PPUSH
26614: LD_INT 3
26616: PPUSH
26617: CALL_OW 1
26621: ST_TO_ADDR
// if missile < 2 then
26622: LD_VAR 0 14
26626: PUSH
26627: LD_INT 2
26629: LESS
26630: IFFALSE 26634
// exit ;
26632: GO 26856
// x := GetX ( enemy ) ;
26634: LD_ADDR_VAR 0 4
26638: PUSH
26639: LD_VAR 0 10
26643: PPUSH
26644: CALL_OW 250
26648: ST_TO_ADDR
// y := GetY ( enemy ) ;
26649: LD_ADDR_VAR 0 5
26653: PUSH
26654: LD_VAR 0 10
26658: PPUSH
26659: CALL_OW 251
26663: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26664: LD_ADDR_VAR 0 6
26668: PUSH
26669: LD_VAR 0 4
26673: PUSH
26674: LD_INT 1
26676: NEG
26677: PPUSH
26678: LD_INT 1
26680: PPUSH
26681: CALL_OW 12
26685: PLUS
26686: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26687: LD_ADDR_VAR 0 7
26691: PUSH
26692: LD_VAR 0 5
26696: PUSH
26697: LD_INT 1
26699: NEG
26700: PPUSH
26701: LD_INT 1
26703: PPUSH
26704: CALL_OW 12
26708: PLUS
26709: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26710: LD_VAR 0 6
26714: PPUSH
26715: LD_VAR 0 7
26719: PPUSH
26720: CALL_OW 488
26724: NOT
26725: IFFALSE 26747
// begin _x := x ;
26727: LD_ADDR_VAR 0 6
26731: PUSH
26732: LD_VAR 0 4
26736: ST_TO_ADDR
// _y := y ;
26737: LD_ADDR_VAR 0 7
26741: PUSH
26742: LD_VAR 0 5
26746: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26747: LD_ADDR_VAR 0 3
26751: PUSH
26752: LD_INT 1
26754: PPUSH
26755: LD_VAR 0 14
26759: PPUSH
26760: CALL_OW 12
26764: ST_TO_ADDR
// case i of 1 :
26765: LD_VAR 0 3
26769: PUSH
26770: LD_INT 1
26772: DOUBLE
26773: EQUAL
26774: IFTRUE 26778
26776: GO 26795
26778: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26779: LD_VAR 0 1
26783: PPUSH
26784: LD_VAR 0 10
26788: PPUSH
26789: CALL_OW 115
26793: GO 26856
26795: LD_INT 2
26797: DOUBLE
26798: EQUAL
26799: IFTRUE 26803
26801: GO 26825
26803: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26804: LD_VAR 0 1
26808: PPUSH
26809: LD_VAR 0 6
26813: PPUSH
26814: LD_VAR 0 7
26818: PPUSH
26819: CALL_OW 153
26823: GO 26856
26825: LD_INT 3
26827: DOUBLE
26828: EQUAL
26829: IFTRUE 26833
26831: GO 26855
26833: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26834: LD_VAR 0 1
26838: PPUSH
26839: LD_VAR 0 6
26843: PPUSH
26844: LD_VAR 0 7
26848: PPUSH
26849: CALL_OW 154
26853: GO 26856
26855: POP
// end ;
26856: LD_VAR 0 2
26860: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26861: LD_INT 0
26863: PPUSH
26864: PPUSH
26865: PPUSH
26866: PPUSH
26867: PPUSH
26868: PPUSH
// if not unit or not building then
26869: LD_VAR 0 1
26873: NOT
26874: PUSH
26875: LD_VAR 0 2
26879: NOT
26880: OR
26881: IFFALSE 26885
// exit ;
26883: GO 27043
// x := GetX ( building ) ;
26885: LD_ADDR_VAR 0 5
26889: PUSH
26890: LD_VAR 0 2
26894: PPUSH
26895: CALL_OW 250
26899: ST_TO_ADDR
// y := GetY ( building ) ;
26900: LD_ADDR_VAR 0 6
26904: PUSH
26905: LD_VAR 0 2
26909: PPUSH
26910: CALL_OW 251
26914: ST_TO_ADDR
// for i = 0 to 5 do
26915: LD_ADDR_VAR 0 4
26919: PUSH
26920: DOUBLE
26921: LD_INT 0
26923: DEC
26924: ST_TO_ADDR
26925: LD_INT 5
26927: PUSH
26928: FOR_TO
26929: IFFALSE 27041
// begin _x := ShiftX ( x , i , 3 ) ;
26931: LD_ADDR_VAR 0 7
26935: PUSH
26936: LD_VAR 0 5
26940: PPUSH
26941: LD_VAR 0 4
26945: PPUSH
26946: LD_INT 3
26948: PPUSH
26949: CALL_OW 272
26953: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26954: LD_ADDR_VAR 0 8
26958: PUSH
26959: LD_VAR 0 6
26963: PPUSH
26964: LD_VAR 0 4
26968: PPUSH
26969: LD_INT 3
26971: PPUSH
26972: CALL_OW 273
26976: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26977: LD_VAR 0 7
26981: PPUSH
26982: LD_VAR 0 8
26986: PPUSH
26987: CALL_OW 488
26991: NOT
26992: IFFALSE 26996
// continue ;
26994: GO 26928
// if HexInfo ( _x , _y ) = 0 then
26996: LD_VAR 0 7
27000: PPUSH
27001: LD_VAR 0 8
27005: PPUSH
27006: CALL_OW 428
27010: PUSH
27011: LD_INT 0
27013: EQUAL
27014: IFFALSE 27039
// begin ComMoveXY ( unit , _x , _y ) ;
27016: LD_VAR 0 1
27020: PPUSH
27021: LD_VAR 0 7
27025: PPUSH
27026: LD_VAR 0 8
27030: PPUSH
27031: CALL_OW 111
// exit ;
27035: POP
27036: POP
27037: GO 27043
// end ; end ;
27039: GO 26928
27041: POP
27042: POP
// end ;
27043: LD_VAR 0 3
27047: RET
// export function ScanBase ( side , base_area ) ; begin
27048: LD_INT 0
27050: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27051: LD_ADDR_VAR 0 3
27055: PUSH
27056: LD_VAR 0 2
27060: PPUSH
27061: LD_INT 81
27063: PUSH
27064: LD_VAR 0 1
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PPUSH
27073: CALL_OW 70
27077: ST_TO_ADDR
// end ;
27078: LD_VAR 0 3
27082: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27083: LD_INT 0
27085: PPUSH
27086: PPUSH
27087: PPUSH
27088: PPUSH
// result := false ;
27089: LD_ADDR_VAR 0 2
27093: PUSH
27094: LD_INT 0
27096: ST_TO_ADDR
// side := GetSide ( unit ) ;
27097: LD_ADDR_VAR 0 3
27101: PUSH
27102: LD_VAR 0 1
27106: PPUSH
27107: CALL_OW 255
27111: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27112: LD_ADDR_VAR 0 4
27116: PUSH
27117: LD_VAR 0 1
27121: PPUSH
27122: CALL_OW 248
27126: ST_TO_ADDR
// case nat of 1 :
27127: LD_VAR 0 4
27131: PUSH
27132: LD_INT 1
27134: DOUBLE
27135: EQUAL
27136: IFTRUE 27140
27138: GO 27151
27140: POP
// tech := tech_lassight ; 2 :
27141: LD_ADDR_VAR 0 5
27145: PUSH
27146: LD_INT 12
27148: ST_TO_ADDR
27149: GO 27190
27151: LD_INT 2
27153: DOUBLE
27154: EQUAL
27155: IFTRUE 27159
27157: GO 27170
27159: POP
// tech := tech_mortar ; 3 :
27160: LD_ADDR_VAR 0 5
27164: PUSH
27165: LD_INT 41
27167: ST_TO_ADDR
27168: GO 27190
27170: LD_INT 3
27172: DOUBLE
27173: EQUAL
27174: IFTRUE 27178
27176: GO 27189
27178: POP
// tech := tech_bazooka ; end ;
27179: LD_ADDR_VAR 0 5
27183: PUSH
27184: LD_INT 44
27186: ST_TO_ADDR
27187: GO 27190
27189: POP
// if Researched ( side , tech ) then
27190: LD_VAR 0 3
27194: PPUSH
27195: LD_VAR 0 5
27199: PPUSH
27200: CALL_OW 325
27204: IFFALSE 27231
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27206: LD_ADDR_VAR 0 2
27210: PUSH
27211: LD_INT 5
27213: PUSH
27214: LD_INT 8
27216: PUSH
27217: LD_INT 9
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: LIST
27224: PUSH
27225: LD_VAR 0 4
27229: ARRAY
27230: ST_TO_ADDR
// end ;
27231: LD_VAR 0 2
27235: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27236: LD_INT 0
27238: PPUSH
27239: PPUSH
27240: PPUSH
// if not mines then
27241: LD_VAR 0 2
27245: NOT
27246: IFFALSE 27250
// exit ;
27248: GO 27394
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27250: LD_ADDR_VAR 0 5
27254: PUSH
27255: LD_INT 81
27257: PUSH
27258: LD_VAR 0 1
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 3
27269: PUSH
27270: LD_INT 21
27272: PUSH
27273: LD_INT 3
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PPUSH
27288: CALL_OW 69
27292: ST_TO_ADDR
// for i in mines do
27293: LD_ADDR_VAR 0 4
27297: PUSH
27298: LD_VAR 0 2
27302: PUSH
27303: FOR_IN
27304: IFFALSE 27392
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27306: LD_VAR 0 4
27310: PUSH
27311: LD_INT 1
27313: ARRAY
27314: PPUSH
27315: LD_VAR 0 4
27319: PUSH
27320: LD_INT 2
27322: ARRAY
27323: PPUSH
27324: CALL_OW 458
27328: NOT
27329: IFFALSE 27333
// continue ;
27331: GO 27303
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27333: LD_VAR 0 4
27337: PUSH
27338: LD_INT 1
27340: ARRAY
27341: PPUSH
27342: LD_VAR 0 4
27346: PUSH
27347: LD_INT 2
27349: ARRAY
27350: PPUSH
27351: CALL_OW 428
27355: PUSH
27356: LD_VAR 0 5
27360: IN
27361: IFFALSE 27390
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27363: LD_VAR 0 4
27367: PUSH
27368: LD_INT 1
27370: ARRAY
27371: PPUSH
27372: LD_VAR 0 4
27376: PUSH
27377: LD_INT 2
27379: ARRAY
27380: PPUSH
27381: LD_VAR 0 1
27385: PPUSH
27386: CALL_OW 456
// end ;
27390: GO 27303
27392: POP
27393: POP
// end ;
27394: LD_VAR 0 3
27398: RET
// export function Count ( array ) ; var i ; begin
27399: LD_INT 0
27401: PPUSH
27402: PPUSH
// result := 0 ;
27403: LD_ADDR_VAR 0 2
27407: PUSH
27408: LD_INT 0
27410: ST_TO_ADDR
// for i in array do
27411: LD_ADDR_VAR 0 3
27415: PUSH
27416: LD_VAR 0 1
27420: PUSH
27421: FOR_IN
27422: IFFALSE 27446
// if i then
27424: LD_VAR 0 3
27428: IFFALSE 27444
// result := result + 1 ;
27430: LD_ADDR_VAR 0 2
27434: PUSH
27435: LD_VAR 0 2
27439: PUSH
27440: LD_INT 1
27442: PLUS
27443: ST_TO_ADDR
27444: GO 27421
27446: POP
27447: POP
// end ;
27448: LD_VAR 0 2
27452: RET
// export function IsEmpty ( building ) ; begin
27453: LD_INT 0
27455: PPUSH
// if not building then
27456: LD_VAR 0 1
27460: NOT
27461: IFFALSE 27465
// exit ;
27463: GO 27508
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27465: LD_ADDR_VAR 0 2
27469: PUSH
27470: LD_VAR 0 1
27474: PUSH
27475: LD_INT 22
27477: PUSH
27478: LD_VAR 0 1
27482: PPUSH
27483: CALL_OW 255
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 58
27494: PUSH
27495: EMPTY
27496: LIST
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PPUSH
27502: CALL_OW 69
27506: IN
27507: ST_TO_ADDR
// end ;
27508: LD_VAR 0 2
27512: RET
// export function IsNotFull ( building ) ; begin
27513: LD_INT 0
27515: PPUSH
// if not building then
27516: LD_VAR 0 1
27520: NOT
27521: IFFALSE 27525
// exit ;
27523: GO 27544
// result := UnitsInside ( building ) < 6 ;
27525: LD_ADDR_VAR 0 2
27529: PUSH
27530: LD_VAR 0 1
27534: PPUSH
27535: CALL_OW 313
27539: PUSH
27540: LD_INT 6
27542: LESS
27543: ST_TO_ADDR
// end ;
27544: LD_VAR 0 2
27548: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27549: LD_INT 0
27551: PPUSH
27552: PPUSH
27553: PPUSH
27554: PPUSH
// tmp := [ ] ;
27555: LD_ADDR_VAR 0 3
27559: PUSH
27560: EMPTY
27561: ST_TO_ADDR
// list := [ ] ;
27562: LD_ADDR_VAR 0 5
27566: PUSH
27567: EMPTY
27568: ST_TO_ADDR
// for i = 16 to 25 do
27569: LD_ADDR_VAR 0 4
27573: PUSH
27574: DOUBLE
27575: LD_INT 16
27577: DEC
27578: ST_TO_ADDR
27579: LD_INT 25
27581: PUSH
27582: FOR_TO
27583: IFFALSE 27656
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27585: LD_ADDR_VAR 0 3
27589: PUSH
27590: LD_VAR 0 3
27594: PUSH
27595: LD_INT 22
27597: PUSH
27598: LD_VAR 0 1
27602: PPUSH
27603: CALL_OW 255
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PUSH
27612: LD_INT 91
27614: PUSH
27615: LD_VAR 0 1
27619: PUSH
27620: LD_INT 6
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 30
27630: PUSH
27631: LD_VAR 0 4
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: LIST
27644: PUSH
27645: EMPTY
27646: LIST
27647: PPUSH
27648: CALL_OW 69
27652: ADD
27653: ST_TO_ADDR
27654: GO 27582
27656: POP
27657: POP
// for i = 1 to tmp do
27658: LD_ADDR_VAR 0 4
27662: PUSH
27663: DOUBLE
27664: LD_INT 1
27666: DEC
27667: ST_TO_ADDR
27668: LD_VAR 0 3
27672: PUSH
27673: FOR_TO
27674: IFFALSE 27762
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27676: LD_ADDR_VAR 0 5
27680: PUSH
27681: LD_VAR 0 5
27685: PUSH
27686: LD_VAR 0 3
27690: PUSH
27691: LD_VAR 0 4
27695: ARRAY
27696: PPUSH
27697: CALL_OW 266
27701: PUSH
27702: LD_VAR 0 3
27706: PUSH
27707: LD_VAR 0 4
27711: ARRAY
27712: PPUSH
27713: CALL_OW 250
27717: PUSH
27718: LD_VAR 0 3
27722: PUSH
27723: LD_VAR 0 4
27727: ARRAY
27728: PPUSH
27729: CALL_OW 251
27733: PUSH
27734: LD_VAR 0 3
27738: PUSH
27739: LD_VAR 0 4
27743: ARRAY
27744: PPUSH
27745: CALL_OW 254
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: PUSH
27756: EMPTY
27757: LIST
27758: ADD
27759: ST_TO_ADDR
27760: GO 27673
27762: POP
27763: POP
// result := list ;
27764: LD_ADDR_VAR 0 2
27768: PUSH
27769: LD_VAR 0 5
27773: ST_TO_ADDR
// end ;
27774: LD_VAR 0 2
27778: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27779: LD_INT 0
27781: PPUSH
27782: PPUSH
27783: PPUSH
27784: PPUSH
27785: PPUSH
27786: PPUSH
27787: PPUSH
// if not factory then
27788: LD_VAR 0 1
27792: NOT
27793: IFFALSE 27797
// exit ;
27795: GO 28390
// if control = control_apeman then
27797: LD_VAR 0 4
27801: PUSH
27802: LD_INT 5
27804: EQUAL
27805: IFFALSE 27914
// begin tmp := UnitsInside ( factory ) ;
27807: LD_ADDR_VAR 0 8
27811: PUSH
27812: LD_VAR 0 1
27816: PPUSH
27817: CALL_OW 313
27821: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27822: LD_VAR 0 8
27826: PPUSH
27827: LD_INT 25
27829: PUSH
27830: LD_INT 12
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PPUSH
27837: CALL_OW 72
27841: NOT
27842: IFFALSE 27852
// control := control_manual ;
27844: LD_ADDR_VAR 0 4
27848: PUSH
27849: LD_INT 1
27851: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27852: LD_ADDR_VAR 0 8
27856: PUSH
27857: LD_VAR 0 1
27861: PPUSH
27862: CALL 27549 0 1
27866: ST_TO_ADDR
// if tmp then
27867: LD_VAR 0 8
27871: IFFALSE 27914
// begin for i in tmp do
27873: LD_ADDR_VAR 0 7
27877: PUSH
27878: LD_VAR 0 8
27882: PUSH
27883: FOR_IN
27884: IFFALSE 27912
// if i [ 1 ] = b_ext_radio then
27886: LD_VAR 0 7
27890: PUSH
27891: LD_INT 1
27893: ARRAY
27894: PUSH
27895: LD_INT 22
27897: EQUAL
27898: IFFALSE 27910
// begin control := control_remote ;
27900: LD_ADDR_VAR 0 4
27904: PUSH
27905: LD_INT 2
27907: ST_TO_ADDR
// break ;
27908: GO 27912
// end ;
27910: GO 27883
27912: POP
27913: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27914: LD_VAR 0 1
27918: PPUSH
27919: LD_VAR 0 2
27923: PPUSH
27924: LD_VAR 0 3
27928: PPUSH
27929: LD_VAR 0 4
27933: PPUSH
27934: LD_VAR 0 5
27938: PPUSH
27939: CALL_OW 448
27943: IFFALSE 27978
// begin result := [ chassis , engine , control , weapon ] ;
27945: LD_ADDR_VAR 0 6
27949: PUSH
27950: LD_VAR 0 2
27954: PUSH
27955: LD_VAR 0 3
27959: PUSH
27960: LD_VAR 0 4
27964: PUSH
27965: LD_VAR 0 5
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: ST_TO_ADDR
// exit ;
27976: GO 28390
// end ; _chassis := AvailableChassisList ( factory ) ;
27978: LD_ADDR_VAR 0 9
27982: PUSH
27983: LD_VAR 0 1
27987: PPUSH
27988: CALL_OW 475
27992: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27993: LD_ADDR_VAR 0 11
27997: PUSH
27998: LD_VAR 0 1
28002: PPUSH
28003: CALL_OW 476
28007: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28008: LD_ADDR_VAR 0 12
28012: PUSH
28013: LD_VAR 0 1
28017: PPUSH
28018: CALL_OW 477
28022: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28023: LD_ADDR_VAR 0 10
28027: PUSH
28028: LD_VAR 0 1
28032: PPUSH
28033: CALL_OW 478
28037: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28038: LD_VAR 0 9
28042: NOT
28043: PUSH
28044: LD_VAR 0 11
28048: NOT
28049: OR
28050: PUSH
28051: LD_VAR 0 12
28055: NOT
28056: OR
28057: PUSH
28058: LD_VAR 0 10
28062: NOT
28063: OR
28064: IFFALSE 28099
// begin result := [ chassis , engine , control , weapon ] ;
28066: LD_ADDR_VAR 0 6
28070: PUSH
28071: LD_VAR 0 2
28075: PUSH
28076: LD_VAR 0 3
28080: PUSH
28081: LD_VAR 0 4
28085: PUSH
28086: LD_VAR 0 5
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: ST_TO_ADDR
// exit ;
28097: GO 28390
// end ; if not chassis in _chassis then
28099: LD_VAR 0 2
28103: PUSH
28104: LD_VAR 0 9
28108: IN
28109: NOT
28110: IFFALSE 28136
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28112: LD_ADDR_VAR 0 2
28116: PUSH
28117: LD_VAR 0 9
28121: PUSH
28122: LD_INT 1
28124: PPUSH
28125: LD_VAR 0 9
28129: PPUSH
28130: CALL_OW 12
28134: ARRAY
28135: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28136: LD_VAR 0 2
28140: PPUSH
28141: LD_VAR 0 3
28145: PPUSH
28146: CALL 28395 0 2
28150: NOT
28151: IFFALSE 28210
// repeat engine := _engine [ 1 ] ;
28153: LD_ADDR_VAR 0 3
28157: PUSH
28158: LD_VAR 0 11
28162: PUSH
28163: LD_INT 1
28165: ARRAY
28166: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28167: LD_ADDR_VAR 0 11
28171: PUSH
28172: LD_VAR 0 11
28176: PPUSH
28177: LD_INT 1
28179: PPUSH
28180: CALL_OW 3
28184: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28185: LD_VAR 0 2
28189: PPUSH
28190: LD_VAR 0 3
28194: PPUSH
28195: CALL 28395 0 2
28199: PUSH
28200: LD_VAR 0 11
28204: PUSH
28205: EMPTY
28206: EQUAL
28207: OR
28208: IFFALSE 28153
// if not control in _control then
28210: LD_VAR 0 4
28214: PUSH
28215: LD_VAR 0 12
28219: IN
28220: NOT
28221: IFFALSE 28247
// control := _control [ rand ( 1 , _control ) ] ;
28223: LD_ADDR_VAR 0 4
28227: PUSH
28228: LD_VAR 0 12
28232: PUSH
28233: LD_INT 1
28235: PPUSH
28236: LD_VAR 0 12
28240: PPUSH
28241: CALL_OW 12
28245: ARRAY
28246: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28247: LD_VAR 0 2
28251: PPUSH
28252: LD_VAR 0 5
28256: PPUSH
28257: CALL 28615 0 2
28261: NOT
28262: IFFALSE 28321
// repeat weapon := _weapon [ 1 ] ;
28264: LD_ADDR_VAR 0 5
28268: PUSH
28269: LD_VAR 0 10
28273: PUSH
28274: LD_INT 1
28276: ARRAY
28277: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28278: LD_ADDR_VAR 0 10
28282: PUSH
28283: LD_VAR 0 10
28287: PPUSH
28288: LD_INT 1
28290: PPUSH
28291: CALL_OW 3
28295: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28296: LD_VAR 0 2
28300: PPUSH
28301: LD_VAR 0 5
28305: PPUSH
28306: CALL 28615 0 2
28310: PUSH
28311: LD_VAR 0 10
28315: PUSH
28316: EMPTY
28317: EQUAL
28318: OR
28319: IFFALSE 28264
// result := [ ] ;
28321: LD_ADDR_VAR 0 6
28325: PUSH
28326: EMPTY
28327: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28328: LD_VAR 0 1
28332: PPUSH
28333: LD_VAR 0 2
28337: PPUSH
28338: LD_VAR 0 3
28342: PPUSH
28343: LD_VAR 0 4
28347: PPUSH
28348: LD_VAR 0 5
28352: PPUSH
28353: CALL_OW 448
28357: IFFALSE 28390
// result := [ chassis , engine , control , weapon ] ;
28359: LD_ADDR_VAR 0 6
28363: PUSH
28364: LD_VAR 0 2
28368: PUSH
28369: LD_VAR 0 3
28373: PUSH
28374: LD_VAR 0 4
28378: PUSH
28379: LD_VAR 0 5
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: ST_TO_ADDR
// end ;
28390: LD_VAR 0 6
28394: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28395: LD_INT 0
28397: PPUSH
// if not chassis or not engine then
28398: LD_VAR 0 1
28402: NOT
28403: PUSH
28404: LD_VAR 0 2
28408: NOT
28409: OR
28410: IFFALSE 28414
// exit ;
28412: GO 28610
// case engine of engine_solar :
28414: LD_VAR 0 2
28418: PUSH
28419: LD_INT 2
28421: DOUBLE
28422: EQUAL
28423: IFTRUE 28427
28425: GO 28465
28427: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28428: LD_ADDR_VAR 0 3
28432: PUSH
28433: LD_INT 11
28435: PUSH
28436: LD_INT 12
28438: PUSH
28439: LD_INT 13
28441: PUSH
28442: LD_INT 14
28444: PUSH
28445: LD_INT 1
28447: PUSH
28448: LD_INT 2
28450: PUSH
28451: LD_INT 3
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: ST_TO_ADDR
28463: GO 28594
28465: LD_INT 1
28467: DOUBLE
28468: EQUAL
28469: IFTRUE 28473
28471: GO 28535
28473: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28474: LD_ADDR_VAR 0 3
28478: PUSH
28479: LD_INT 11
28481: PUSH
28482: LD_INT 12
28484: PUSH
28485: LD_INT 13
28487: PUSH
28488: LD_INT 14
28490: PUSH
28491: LD_INT 1
28493: PUSH
28494: LD_INT 2
28496: PUSH
28497: LD_INT 3
28499: PUSH
28500: LD_INT 4
28502: PUSH
28503: LD_INT 5
28505: PUSH
28506: LD_INT 21
28508: PUSH
28509: LD_INT 23
28511: PUSH
28512: LD_INT 22
28514: PUSH
28515: LD_INT 24
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: ST_TO_ADDR
28533: GO 28594
28535: LD_INT 3
28537: DOUBLE
28538: EQUAL
28539: IFTRUE 28543
28541: GO 28593
28543: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28544: LD_ADDR_VAR 0 3
28548: PUSH
28549: LD_INT 13
28551: PUSH
28552: LD_INT 14
28554: PUSH
28555: LD_INT 2
28557: PUSH
28558: LD_INT 3
28560: PUSH
28561: LD_INT 4
28563: PUSH
28564: LD_INT 5
28566: PUSH
28567: LD_INT 21
28569: PUSH
28570: LD_INT 22
28572: PUSH
28573: LD_INT 23
28575: PUSH
28576: LD_INT 24
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: ST_TO_ADDR
28591: GO 28594
28593: POP
// result := ( chassis in result ) ;
28594: LD_ADDR_VAR 0 3
28598: PUSH
28599: LD_VAR 0 1
28603: PUSH
28604: LD_VAR 0 3
28608: IN
28609: ST_TO_ADDR
// end ;
28610: LD_VAR 0 3
28614: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28615: LD_INT 0
28617: PPUSH
// if not chassis or not weapon then
28618: LD_VAR 0 1
28622: NOT
28623: PUSH
28624: LD_VAR 0 2
28628: NOT
28629: OR
28630: IFFALSE 28634
// exit ;
28632: GO 29696
// case weapon of us_machine_gun :
28634: LD_VAR 0 2
28638: PUSH
28639: LD_INT 2
28641: DOUBLE
28642: EQUAL
28643: IFTRUE 28647
28645: GO 28677
28647: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28648: LD_ADDR_VAR 0 3
28652: PUSH
28653: LD_INT 1
28655: PUSH
28656: LD_INT 2
28658: PUSH
28659: LD_INT 3
28661: PUSH
28662: LD_INT 4
28664: PUSH
28665: LD_INT 5
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: ST_TO_ADDR
28675: GO 29680
28677: LD_INT 3
28679: DOUBLE
28680: EQUAL
28681: IFTRUE 28685
28683: GO 28715
28685: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28686: LD_ADDR_VAR 0 3
28690: PUSH
28691: LD_INT 1
28693: PUSH
28694: LD_INT 2
28696: PUSH
28697: LD_INT 3
28699: PUSH
28700: LD_INT 4
28702: PUSH
28703: LD_INT 5
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: ST_TO_ADDR
28713: GO 29680
28715: LD_INT 11
28717: DOUBLE
28718: EQUAL
28719: IFTRUE 28723
28721: GO 28753
28723: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28724: LD_ADDR_VAR 0 3
28728: PUSH
28729: LD_INT 1
28731: PUSH
28732: LD_INT 2
28734: PUSH
28735: LD_INT 3
28737: PUSH
28738: LD_INT 4
28740: PUSH
28741: LD_INT 5
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: ST_TO_ADDR
28751: GO 29680
28753: LD_INT 4
28755: DOUBLE
28756: EQUAL
28757: IFTRUE 28761
28759: GO 28787
28761: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28762: LD_ADDR_VAR 0 3
28766: PUSH
28767: LD_INT 2
28769: PUSH
28770: LD_INT 3
28772: PUSH
28773: LD_INT 4
28775: PUSH
28776: LD_INT 5
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: ST_TO_ADDR
28785: GO 29680
28787: LD_INT 5
28789: DOUBLE
28790: EQUAL
28791: IFTRUE 28795
28793: GO 28821
28795: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28796: LD_ADDR_VAR 0 3
28800: PUSH
28801: LD_INT 2
28803: PUSH
28804: LD_INT 3
28806: PUSH
28807: LD_INT 4
28809: PUSH
28810: LD_INT 5
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: ST_TO_ADDR
28819: GO 29680
28821: LD_INT 9
28823: DOUBLE
28824: EQUAL
28825: IFTRUE 28829
28827: GO 28855
28829: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28830: LD_ADDR_VAR 0 3
28834: PUSH
28835: LD_INT 2
28837: PUSH
28838: LD_INT 3
28840: PUSH
28841: LD_INT 4
28843: PUSH
28844: LD_INT 5
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: ST_TO_ADDR
28853: GO 29680
28855: LD_INT 7
28857: DOUBLE
28858: EQUAL
28859: IFTRUE 28863
28861: GO 28889
28863: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28864: LD_ADDR_VAR 0 3
28868: PUSH
28869: LD_INT 2
28871: PUSH
28872: LD_INT 3
28874: PUSH
28875: LD_INT 4
28877: PUSH
28878: LD_INT 5
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: ST_TO_ADDR
28887: GO 29680
28889: LD_INT 12
28891: DOUBLE
28892: EQUAL
28893: IFTRUE 28897
28895: GO 28923
28897: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28898: LD_ADDR_VAR 0 3
28902: PUSH
28903: LD_INT 2
28905: PUSH
28906: LD_INT 3
28908: PUSH
28909: LD_INT 4
28911: PUSH
28912: LD_INT 5
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: ST_TO_ADDR
28921: GO 29680
28923: LD_INT 13
28925: DOUBLE
28926: EQUAL
28927: IFTRUE 28931
28929: GO 28957
28931: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28932: LD_ADDR_VAR 0 3
28936: PUSH
28937: LD_INT 2
28939: PUSH
28940: LD_INT 3
28942: PUSH
28943: LD_INT 4
28945: PUSH
28946: LD_INT 5
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: ST_TO_ADDR
28955: GO 29680
28957: LD_INT 14
28959: DOUBLE
28960: EQUAL
28961: IFTRUE 28965
28963: GO 28983
28965: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28966: LD_ADDR_VAR 0 3
28970: PUSH
28971: LD_INT 4
28973: PUSH
28974: LD_INT 5
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: ST_TO_ADDR
28981: GO 29680
28983: LD_INT 6
28985: DOUBLE
28986: EQUAL
28987: IFTRUE 28991
28989: GO 29009
28991: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28992: LD_ADDR_VAR 0 3
28996: PUSH
28997: LD_INT 4
28999: PUSH
29000: LD_INT 5
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: ST_TO_ADDR
29007: GO 29680
29009: LD_INT 10
29011: DOUBLE
29012: EQUAL
29013: IFTRUE 29017
29015: GO 29035
29017: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29018: LD_ADDR_VAR 0 3
29022: PUSH
29023: LD_INT 4
29025: PUSH
29026: LD_INT 5
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: ST_TO_ADDR
29033: GO 29680
29035: LD_INT 22
29037: DOUBLE
29038: EQUAL
29039: IFTRUE 29043
29041: GO 29069
29043: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29044: LD_ADDR_VAR 0 3
29048: PUSH
29049: LD_INT 11
29051: PUSH
29052: LD_INT 12
29054: PUSH
29055: LD_INT 13
29057: PUSH
29058: LD_INT 14
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: ST_TO_ADDR
29067: GO 29680
29069: LD_INT 23
29071: DOUBLE
29072: EQUAL
29073: IFTRUE 29077
29075: GO 29103
29077: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29078: LD_ADDR_VAR 0 3
29082: PUSH
29083: LD_INT 11
29085: PUSH
29086: LD_INT 12
29088: PUSH
29089: LD_INT 13
29091: PUSH
29092: LD_INT 14
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: ST_TO_ADDR
29101: GO 29680
29103: LD_INT 24
29105: DOUBLE
29106: EQUAL
29107: IFTRUE 29111
29109: GO 29137
29111: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29112: LD_ADDR_VAR 0 3
29116: PUSH
29117: LD_INT 11
29119: PUSH
29120: LD_INT 12
29122: PUSH
29123: LD_INT 13
29125: PUSH
29126: LD_INT 14
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: ST_TO_ADDR
29135: GO 29680
29137: LD_INT 30
29139: DOUBLE
29140: EQUAL
29141: IFTRUE 29145
29143: GO 29171
29145: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29146: LD_ADDR_VAR 0 3
29150: PUSH
29151: LD_INT 11
29153: PUSH
29154: LD_INT 12
29156: PUSH
29157: LD_INT 13
29159: PUSH
29160: LD_INT 14
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: ST_TO_ADDR
29169: GO 29680
29171: LD_INT 25
29173: DOUBLE
29174: EQUAL
29175: IFTRUE 29179
29177: GO 29197
29179: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29180: LD_ADDR_VAR 0 3
29184: PUSH
29185: LD_INT 13
29187: PUSH
29188: LD_INT 14
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: ST_TO_ADDR
29195: GO 29680
29197: LD_INT 27
29199: DOUBLE
29200: EQUAL
29201: IFTRUE 29205
29203: GO 29223
29205: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29206: LD_ADDR_VAR 0 3
29210: PUSH
29211: LD_INT 13
29213: PUSH
29214: LD_INT 14
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: ST_TO_ADDR
29221: GO 29680
29223: LD_EXP 64
29227: DOUBLE
29228: EQUAL
29229: IFTRUE 29233
29231: GO 29259
29233: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29234: LD_ADDR_VAR 0 3
29238: PUSH
29239: LD_INT 11
29241: PUSH
29242: LD_INT 12
29244: PUSH
29245: LD_INT 13
29247: PUSH
29248: LD_INT 14
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: ST_TO_ADDR
29257: GO 29680
29259: LD_INT 28
29261: DOUBLE
29262: EQUAL
29263: IFTRUE 29267
29265: GO 29285
29267: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29268: LD_ADDR_VAR 0 3
29272: PUSH
29273: LD_INT 13
29275: PUSH
29276: LD_INT 14
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: ST_TO_ADDR
29283: GO 29680
29285: LD_INT 29
29287: DOUBLE
29288: EQUAL
29289: IFTRUE 29293
29291: GO 29311
29293: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29294: LD_ADDR_VAR 0 3
29298: PUSH
29299: LD_INT 13
29301: PUSH
29302: LD_INT 14
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: ST_TO_ADDR
29309: GO 29680
29311: LD_INT 31
29313: DOUBLE
29314: EQUAL
29315: IFTRUE 29319
29317: GO 29337
29319: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29320: LD_ADDR_VAR 0 3
29324: PUSH
29325: LD_INT 13
29327: PUSH
29328: LD_INT 14
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: ST_TO_ADDR
29335: GO 29680
29337: LD_INT 26
29339: DOUBLE
29340: EQUAL
29341: IFTRUE 29345
29343: GO 29363
29345: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29346: LD_ADDR_VAR 0 3
29350: PUSH
29351: LD_INT 13
29353: PUSH
29354: LD_INT 14
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: ST_TO_ADDR
29361: GO 29680
29363: LD_INT 42
29365: DOUBLE
29366: EQUAL
29367: IFTRUE 29371
29369: GO 29397
29371: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29372: LD_ADDR_VAR 0 3
29376: PUSH
29377: LD_INT 21
29379: PUSH
29380: LD_INT 22
29382: PUSH
29383: LD_INT 23
29385: PUSH
29386: LD_INT 24
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: ST_TO_ADDR
29395: GO 29680
29397: LD_INT 43
29399: DOUBLE
29400: EQUAL
29401: IFTRUE 29405
29403: GO 29431
29405: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29406: LD_ADDR_VAR 0 3
29410: PUSH
29411: LD_INT 21
29413: PUSH
29414: LD_INT 22
29416: PUSH
29417: LD_INT 23
29419: PUSH
29420: LD_INT 24
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: ST_TO_ADDR
29429: GO 29680
29431: LD_INT 44
29433: DOUBLE
29434: EQUAL
29435: IFTRUE 29439
29437: GO 29465
29439: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29440: LD_ADDR_VAR 0 3
29444: PUSH
29445: LD_INT 21
29447: PUSH
29448: LD_INT 22
29450: PUSH
29451: LD_INT 23
29453: PUSH
29454: LD_INT 24
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: ST_TO_ADDR
29463: GO 29680
29465: LD_INT 45
29467: DOUBLE
29468: EQUAL
29469: IFTRUE 29473
29471: GO 29499
29473: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29474: LD_ADDR_VAR 0 3
29478: PUSH
29479: LD_INT 21
29481: PUSH
29482: LD_INT 22
29484: PUSH
29485: LD_INT 23
29487: PUSH
29488: LD_INT 24
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: ST_TO_ADDR
29497: GO 29680
29499: LD_INT 49
29501: DOUBLE
29502: EQUAL
29503: IFTRUE 29507
29505: GO 29533
29507: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29508: LD_ADDR_VAR 0 3
29512: PUSH
29513: LD_INT 21
29515: PUSH
29516: LD_INT 22
29518: PUSH
29519: LD_INT 23
29521: PUSH
29522: LD_INT 24
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: ST_TO_ADDR
29531: GO 29680
29533: LD_INT 51
29535: DOUBLE
29536: EQUAL
29537: IFTRUE 29541
29539: GO 29567
29541: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29542: LD_ADDR_VAR 0 3
29546: PUSH
29547: LD_INT 21
29549: PUSH
29550: LD_INT 22
29552: PUSH
29553: LD_INT 23
29555: PUSH
29556: LD_INT 24
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: ST_TO_ADDR
29565: GO 29680
29567: LD_INT 52
29569: DOUBLE
29570: EQUAL
29571: IFTRUE 29575
29573: GO 29601
29575: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29576: LD_ADDR_VAR 0 3
29580: PUSH
29581: LD_INT 21
29583: PUSH
29584: LD_INT 22
29586: PUSH
29587: LD_INT 23
29589: PUSH
29590: LD_INT 24
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: ST_TO_ADDR
29599: GO 29680
29601: LD_INT 53
29603: DOUBLE
29604: EQUAL
29605: IFTRUE 29609
29607: GO 29627
29609: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29610: LD_ADDR_VAR 0 3
29614: PUSH
29615: LD_INT 23
29617: PUSH
29618: LD_INT 24
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: ST_TO_ADDR
29625: GO 29680
29627: LD_INT 46
29629: DOUBLE
29630: EQUAL
29631: IFTRUE 29635
29633: GO 29653
29635: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29636: LD_ADDR_VAR 0 3
29640: PUSH
29641: LD_INT 23
29643: PUSH
29644: LD_INT 24
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: ST_TO_ADDR
29651: GO 29680
29653: LD_INT 47
29655: DOUBLE
29656: EQUAL
29657: IFTRUE 29661
29659: GO 29679
29661: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29662: LD_ADDR_VAR 0 3
29666: PUSH
29667: LD_INT 23
29669: PUSH
29670: LD_INT 24
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: ST_TO_ADDR
29677: GO 29680
29679: POP
// result := ( chassis in result ) ;
29680: LD_ADDR_VAR 0 3
29684: PUSH
29685: LD_VAR 0 1
29689: PUSH
29690: LD_VAR 0 3
29694: IN
29695: ST_TO_ADDR
// end ;
29696: LD_VAR 0 3
29700: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29701: LD_INT 0
29703: PPUSH
29704: PPUSH
29705: PPUSH
29706: PPUSH
29707: PPUSH
29708: PPUSH
29709: PPUSH
// result := array ;
29710: LD_ADDR_VAR 0 5
29714: PUSH
29715: LD_VAR 0 1
29719: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29720: LD_VAR 0 1
29724: NOT
29725: PUSH
29726: LD_VAR 0 2
29730: NOT
29731: OR
29732: PUSH
29733: LD_VAR 0 3
29737: NOT
29738: OR
29739: PUSH
29740: LD_VAR 0 2
29744: PUSH
29745: LD_VAR 0 1
29749: GREATER
29750: OR
29751: PUSH
29752: LD_VAR 0 3
29756: PUSH
29757: LD_VAR 0 1
29761: GREATER
29762: OR
29763: IFFALSE 29767
// exit ;
29765: GO 30063
// if direction then
29767: LD_VAR 0 4
29771: IFFALSE 29835
// begin d := 1 ;
29773: LD_ADDR_VAR 0 9
29777: PUSH
29778: LD_INT 1
29780: ST_TO_ADDR
// if i_from > i_to then
29781: LD_VAR 0 2
29785: PUSH
29786: LD_VAR 0 3
29790: GREATER
29791: IFFALSE 29817
// length := ( array - i_from ) + i_to else
29793: LD_ADDR_VAR 0 11
29797: PUSH
29798: LD_VAR 0 1
29802: PUSH
29803: LD_VAR 0 2
29807: MINUS
29808: PUSH
29809: LD_VAR 0 3
29813: PLUS
29814: ST_TO_ADDR
29815: GO 29833
// length := i_to - i_from ;
29817: LD_ADDR_VAR 0 11
29821: PUSH
29822: LD_VAR 0 3
29826: PUSH
29827: LD_VAR 0 2
29831: MINUS
29832: ST_TO_ADDR
// end else
29833: GO 29896
// begin d := - 1 ;
29835: LD_ADDR_VAR 0 9
29839: PUSH
29840: LD_INT 1
29842: NEG
29843: ST_TO_ADDR
// if i_from > i_to then
29844: LD_VAR 0 2
29848: PUSH
29849: LD_VAR 0 3
29853: GREATER
29854: IFFALSE 29874
// length := i_from - i_to else
29856: LD_ADDR_VAR 0 11
29860: PUSH
29861: LD_VAR 0 2
29865: PUSH
29866: LD_VAR 0 3
29870: MINUS
29871: ST_TO_ADDR
29872: GO 29896
// length := ( array - i_to ) + i_from ;
29874: LD_ADDR_VAR 0 11
29878: PUSH
29879: LD_VAR 0 1
29883: PUSH
29884: LD_VAR 0 3
29888: MINUS
29889: PUSH
29890: LD_VAR 0 2
29894: PLUS
29895: ST_TO_ADDR
// end ; if not length then
29896: LD_VAR 0 11
29900: NOT
29901: IFFALSE 29905
// exit ;
29903: GO 30063
// tmp := array ;
29905: LD_ADDR_VAR 0 10
29909: PUSH
29910: LD_VAR 0 1
29914: ST_TO_ADDR
// for i = 1 to length do
29915: LD_ADDR_VAR 0 6
29919: PUSH
29920: DOUBLE
29921: LD_INT 1
29923: DEC
29924: ST_TO_ADDR
29925: LD_VAR 0 11
29929: PUSH
29930: FOR_TO
29931: IFFALSE 30051
// begin for j = 1 to array do
29933: LD_ADDR_VAR 0 7
29937: PUSH
29938: DOUBLE
29939: LD_INT 1
29941: DEC
29942: ST_TO_ADDR
29943: LD_VAR 0 1
29947: PUSH
29948: FOR_TO
29949: IFFALSE 30037
// begin k := j + d ;
29951: LD_ADDR_VAR 0 8
29955: PUSH
29956: LD_VAR 0 7
29960: PUSH
29961: LD_VAR 0 9
29965: PLUS
29966: ST_TO_ADDR
// if k > array then
29967: LD_VAR 0 8
29971: PUSH
29972: LD_VAR 0 1
29976: GREATER
29977: IFFALSE 29987
// k := 1 ;
29979: LD_ADDR_VAR 0 8
29983: PUSH
29984: LD_INT 1
29986: ST_TO_ADDR
// if not k then
29987: LD_VAR 0 8
29991: NOT
29992: IFFALSE 30004
// k := array ;
29994: LD_ADDR_VAR 0 8
29998: PUSH
29999: LD_VAR 0 1
30003: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30004: LD_ADDR_VAR 0 10
30008: PUSH
30009: LD_VAR 0 10
30013: PPUSH
30014: LD_VAR 0 8
30018: PPUSH
30019: LD_VAR 0 1
30023: PUSH
30024: LD_VAR 0 7
30028: ARRAY
30029: PPUSH
30030: CALL_OW 1
30034: ST_TO_ADDR
// end ;
30035: GO 29948
30037: POP
30038: POP
// array := tmp ;
30039: LD_ADDR_VAR 0 1
30043: PUSH
30044: LD_VAR 0 10
30048: ST_TO_ADDR
// end ;
30049: GO 29930
30051: POP
30052: POP
// result := array ;
30053: LD_ADDR_VAR 0 5
30057: PUSH
30058: LD_VAR 0 1
30062: ST_TO_ADDR
// end ;
30063: LD_VAR 0 5
30067: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30068: LD_INT 0
30070: PPUSH
30071: PPUSH
// result := 0 ;
30072: LD_ADDR_VAR 0 3
30076: PUSH
30077: LD_INT 0
30079: ST_TO_ADDR
// if not array or not value in array then
30080: LD_VAR 0 1
30084: NOT
30085: PUSH
30086: LD_VAR 0 2
30090: PUSH
30091: LD_VAR 0 1
30095: IN
30096: NOT
30097: OR
30098: IFFALSE 30102
// exit ;
30100: GO 30156
// for i = 1 to array do
30102: LD_ADDR_VAR 0 4
30106: PUSH
30107: DOUBLE
30108: LD_INT 1
30110: DEC
30111: ST_TO_ADDR
30112: LD_VAR 0 1
30116: PUSH
30117: FOR_TO
30118: IFFALSE 30154
// if value = array [ i ] then
30120: LD_VAR 0 2
30124: PUSH
30125: LD_VAR 0 1
30129: PUSH
30130: LD_VAR 0 4
30134: ARRAY
30135: EQUAL
30136: IFFALSE 30152
// begin result := i ;
30138: LD_ADDR_VAR 0 3
30142: PUSH
30143: LD_VAR 0 4
30147: ST_TO_ADDR
// exit ;
30148: POP
30149: POP
30150: GO 30156
// end ;
30152: GO 30117
30154: POP
30155: POP
// end ;
30156: LD_VAR 0 3
30160: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30161: LD_INT 0
30163: PPUSH
// vc_chassis := chassis ;
30164: LD_ADDR_OWVAR 37
30168: PUSH
30169: LD_VAR 0 1
30173: ST_TO_ADDR
// vc_engine := engine ;
30174: LD_ADDR_OWVAR 39
30178: PUSH
30179: LD_VAR 0 2
30183: ST_TO_ADDR
// vc_control := control ;
30184: LD_ADDR_OWVAR 38
30188: PUSH
30189: LD_VAR 0 3
30193: ST_TO_ADDR
// vc_weapon := weapon ;
30194: LD_ADDR_OWVAR 40
30198: PUSH
30199: LD_VAR 0 4
30203: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30204: LD_ADDR_OWVAR 41
30208: PUSH
30209: LD_VAR 0 5
30213: ST_TO_ADDR
// end ;
30214: LD_VAR 0 6
30218: RET
// export function WantPlant ( unit ) ; var task ; begin
30219: LD_INT 0
30221: PPUSH
30222: PPUSH
// result := false ;
30223: LD_ADDR_VAR 0 2
30227: PUSH
30228: LD_INT 0
30230: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30231: LD_ADDR_VAR 0 3
30235: PUSH
30236: LD_VAR 0 1
30240: PPUSH
30241: CALL_OW 437
30245: ST_TO_ADDR
// if task then
30246: LD_VAR 0 3
30250: IFFALSE 30278
// if task [ 1 ] [ 1 ] = p then
30252: LD_VAR 0 3
30256: PUSH
30257: LD_INT 1
30259: ARRAY
30260: PUSH
30261: LD_INT 1
30263: ARRAY
30264: PUSH
30265: LD_STRING p
30267: EQUAL
30268: IFFALSE 30278
// result := true ;
30270: LD_ADDR_VAR 0 2
30274: PUSH
30275: LD_INT 1
30277: ST_TO_ADDR
// end ;
30278: LD_VAR 0 2
30282: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30283: LD_INT 0
30285: PPUSH
30286: PPUSH
30287: PPUSH
30288: PPUSH
// if pos < 1 then
30289: LD_VAR 0 2
30293: PUSH
30294: LD_INT 1
30296: LESS
30297: IFFALSE 30301
// exit ;
30299: GO 30604
// if pos = 1 then
30301: LD_VAR 0 2
30305: PUSH
30306: LD_INT 1
30308: EQUAL
30309: IFFALSE 30342
// result := Replace ( arr , pos [ 1 ] , value ) else
30311: LD_ADDR_VAR 0 4
30315: PUSH
30316: LD_VAR 0 1
30320: PPUSH
30321: LD_VAR 0 2
30325: PUSH
30326: LD_INT 1
30328: ARRAY
30329: PPUSH
30330: LD_VAR 0 3
30334: PPUSH
30335: CALL_OW 1
30339: ST_TO_ADDR
30340: GO 30604
// begin tmp := arr ;
30342: LD_ADDR_VAR 0 6
30346: PUSH
30347: LD_VAR 0 1
30351: ST_TO_ADDR
// s_arr := [ tmp ] ;
30352: LD_ADDR_VAR 0 7
30356: PUSH
30357: LD_VAR 0 6
30361: PUSH
30362: EMPTY
30363: LIST
30364: ST_TO_ADDR
// for i = 1 to pos - 1 do
30365: LD_ADDR_VAR 0 5
30369: PUSH
30370: DOUBLE
30371: LD_INT 1
30373: DEC
30374: ST_TO_ADDR
30375: LD_VAR 0 2
30379: PUSH
30380: LD_INT 1
30382: MINUS
30383: PUSH
30384: FOR_TO
30385: IFFALSE 30430
// begin tmp := tmp [ pos [ i ] ] ;
30387: LD_ADDR_VAR 0 6
30391: PUSH
30392: LD_VAR 0 6
30396: PUSH
30397: LD_VAR 0 2
30401: PUSH
30402: LD_VAR 0 5
30406: ARRAY
30407: ARRAY
30408: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30409: LD_ADDR_VAR 0 7
30413: PUSH
30414: LD_VAR 0 7
30418: PUSH
30419: LD_VAR 0 6
30423: PUSH
30424: EMPTY
30425: LIST
30426: ADD
30427: ST_TO_ADDR
// end ;
30428: GO 30384
30430: POP
30431: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30432: LD_ADDR_VAR 0 6
30436: PUSH
30437: LD_VAR 0 6
30441: PPUSH
30442: LD_VAR 0 2
30446: PUSH
30447: LD_VAR 0 2
30451: ARRAY
30452: PPUSH
30453: LD_VAR 0 3
30457: PPUSH
30458: CALL_OW 1
30462: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30463: LD_ADDR_VAR 0 7
30467: PUSH
30468: LD_VAR 0 7
30472: PPUSH
30473: LD_VAR 0 7
30477: PPUSH
30478: LD_VAR 0 6
30482: PPUSH
30483: CALL_OW 1
30487: ST_TO_ADDR
// for i = s_arr downto 2 do
30488: LD_ADDR_VAR 0 5
30492: PUSH
30493: DOUBLE
30494: LD_VAR 0 7
30498: INC
30499: ST_TO_ADDR
30500: LD_INT 2
30502: PUSH
30503: FOR_DOWNTO
30504: IFFALSE 30588
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30506: LD_ADDR_VAR 0 6
30510: PUSH
30511: LD_VAR 0 7
30515: PUSH
30516: LD_VAR 0 5
30520: PUSH
30521: LD_INT 1
30523: MINUS
30524: ARRAY
30525: PPUSH
30526: LD_VAR 0 2
30530: PUSH
30531: LD_VAR 0 5
30535: PUSH
30536: LD_INT 1
30538: MINUS
30539: ARRAY
30540: PPUSH
30541: LD_VAR 0 7
30545: PUSH
30546: LD_VAR 0 5
30550: ARRAY
30551: PPUSH
30552: CALL_OW 1
30556: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30557: LD_ADDR_VAR 0 7
30561: PUSH
30562: LD_VAR 0 7
30566: PPUSH
30567: LD_VAR 0 5
30571: PUSH
30572: LD_INT 1
30574: MINUS
30575: PPUSH
30576: LD_VAR 0 6
30580: PPUSH
30581: CALL_OW 1
30585: ST_TO_ADDR
// end ;
30586: GO 30503
30588: POP
30589: POP
// result := s_arr [ 1 ] ;
30590: LD_ADDR_VAR 0 4
30594: PUSH
30595: LD_VAR 0 7
30599: PUSH
30600: LD_INT 1
30602: ARRAY
30603: ST_TO_ADDR
// end ; end ;
30604: LD_VAR 0 4
30608: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30609: LD_INT 0
30611: PPUSH
30612: PPUSH
// if not list then
30613: LD_VAR 0 1
30617: NOT
30618: IFFALSE 30622
// exit ;
30620: GO 30713
// i := list [ pos1 ] ;
30622: LD_ADDR_VAR 0 5
30626: PUSH
30627: LD_VAR 0 1
30631: PUSH
30632: LD_VAR 0 2
30636: ARRAY
30637: ST_TO_ADDR
// if not i then
30638: LD_VAR 0 5
30642: NOT
30643: IFFALSE 30647
// exit ;
30645: GO 30713
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30647: LD_ADDR_VAR 0 1
30651: PUSH
30652: LD_VAR 0 1
30656: PPUSH
30657: LD_VAR 0 2
30661: PPUSH
30662: LD_VAR 0 1
30666: PUSH
30667: LD_VAR 0 3
30671: ARRAY
30672: PPUSH
30673: CALL_OW 1
30677: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30678: LD_ADDR_VAR 0 1
30682: PUSH
30683: LD_VAR 0 1
30687: PPUSH
30688: LD_VAR 0 3
30692: PPUSH
30693: LD_VAR 0 5
30697: PPUSH
30698: CALL_OW 1
30702: ST_TO_ADDR
// result := list ;
30703: LD_ADDR_VAR 0 4
30707: PUSH
30708: LD_VAR 0 1
30712: ST_TO_ADDR
// end ;
30713: LD_VAR 0 4
30717: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30718: LD_INT 0
30720: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30721: LD_ADDR_VAR 0 5
30725: PUSH
30726: LD_VAR 0 1
30730: PPUSH
30731: CALL_OW 250
30735: PPUSH
30736: LD_VAR 0 1
30740: PPUSH
30741: CALL_OW 251
30745: PPUSH
30746: LD_VAR 0 2
30750: PPUSH
30751: LD_VAR 0 3
30755: PPUSH
30756: LD_VAR 0 4
30760: PPUSH
30761: CALL 30771 0 5
30765: ST_TO_ADDR
// end ;
30766: LD_VAR 0 5
30770: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30771: LD_INT 0
30773: PPUSH
30774: PPUSH
30775: PPUSH
30776: PPUSH
// if not list then
30777: LD_VAR 0 3
30781: NOT
30782: IFFALSE 30786
// exit ;
30784: GO 31174
// result := [ ] ;
30786: LD_ADDR_VAR 0 6
30790: PUSH
30791: EMPTY
30792: ST_TO_ADDR
// for i in list do
30793: LD_ADDR_VAR 0 7
30797: PUSH
30798: LD_VAR 0 3
30802: PUSH
30803: FOR_IN
30804: IFFALSE 31006
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30806: LD_ADDR_VAR 0 9
30810: PUSH
30811: LD_VAR 0 7
30815: PPUSH
30816: LD_VAR 0 1
30820: PPUSH
30821: LD_VAR 0 2
30825: PPUSH
30826: CALL_OW 297
30830: ST_TO_ADDR
// if not result then
30831: LD_VAR 0 6
30835: NOT
30836: IFFALSE 30862
// result := [ [ i , tmp ] ] else
30838: LD_ADDR_VAR 0 6
30842: PUSH
30843: LD_VAR 0 7
30847: PUSH
30848: LD_VAR 0 9
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: EMPTY
30858: LIST
30859: ST_TO_ADDR
30860: GO 31004
// begin if result [ result ] [ 2 ] < tmp then
30862: LD_VAR 0 6
30866: PUSH
30867: LD_VAR 0 6
30871: ARRAY
30872: PUSH
30873: LD_INT 2
30875: ARRAY
30876: PUSH
30877: LD_VAR 0 9
30881: LESS
30882: IFFALSE 30924
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30884: LD_ADDR_VAR 0 6
30888: PUSH
30889: LD_VAR 0 6
30893: PPUSH
30894: LD_VAR 0 6
30898: PUSH
30899: LD_INT 1
30901: PLUS
30902: PPUSH
30903: LD_VAR 0 7
30907: PUSH
30908: LD_VAR 0 9
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PPUSH
30917: CALL_OW 2
30921: ST_TO_ADDR
30922: GO 31004
// for j = 1 to result do
30924: LD_ADDR_VAR 0 8
30928: PUSH
30929: DOUBLE
30930: LD_INT 1
30932: DEC
30933: ST_TO_ADDR
30934: LD_VAR 0 6
30938: PUSH
30939: FOR_TO
30940: IFFALSE 31002
// begin if tmp < result [ j ] [ 2 ] then
30942: LD_VAR 0 9
30946: PUSH
30947: LD_VAR 0 6
30951: PUSH
30952: LD_VAR 0 8
30956: ARRAY
30957: PUSH
30958: LD_INT 2
30960: ARRAY
30961: LESS
30962: IFFALSE 31000
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30964: LD_ADDR_VAR 0 6
30968: PUSH
30969: LD_VAR 0 6
30973: PPUSH
30974: LD_VAR 0 8
30978: PPUSH
30979: LD_VAR 0 7
30983: PUSH
30984: LD_VAR 0 9
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PPUSH
30993: CALL_OW 2
30997: ST_TO_ADDR
// break ;
30998: GO 31002
// end ; end ;
31000: GO 30939
31002: POP
31003: POP
// end ; end ;
31004: GO 30803
31006: POP
31007: POP
// if result and not asc then
31008: LD_VAR 0 6
31012: PUSH
31013: LD_VAR 0 4
31017: NOT
31018: AND
31019: IFFALSE 31094
// begin tmp := result ;
31021: LD_ADDR_VAR 0 9
31025: PUSH
31026: LD_VAR 0 6
31030: ST_TO_ADDR
// for i = tmp downto 1 do
31031: LD_ADDR_VAR 0 7
31035: PUSH
31036: DOUBLE
31037: LD_VAR 0 9
31041: INC
31042: ST_TO_ADDR
31043: LD_INT 1
31045: PUSH
31046: FOR_DOWNTO
31047: IFFALSE 31092
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31049: LD_ADDR_VAR 0 6
31053: PUSH
31054: LD_VAR 0 6
31058: PPUSH
31059: LD_VAR 0 9
31063: PUSH
31064: LD_VAR 0 7
31068: MINUS
31069: PUSH
31070: LD_INT 1
31072: PLUS
31073: PPUSH
31074: LD_VAR 0 9
31078: PUSH
31079: LD_VAR 0 7
31083: ARRAY
31084: PPUSH
31085: CALL_OW 1
31089: ST_TO_ADDR
31090: GO 31046
31092: POP
31093: POP
// end ; tmp := [ ] ;
31094: LD_ADDR_VAR 0 9
31098: PUSH
31099: EMPTY
31100: ST_TO_ADDR
// if mode then
31101: LD_VAR 0 5
31105: IFFALSE 31174
// begin for i = 1 to result do
31107: LD_ADDR_VAR 0 7
31111: PUSH
31112: DOUBLE
31113: LD_INT 1
31115: DEC
31116: ST_TO_ADDR
31117: LD_VAR 0 6
31121: PUSH
31122: FOR_TO
31123: IFFALSE 31162
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31125: LD_ADDR_VAR 0 9
31129: PUSH
31130: LD_VAR 0 9
31134: PPUSH
31135: LD_VAR 0 7
31139: PPUSH
31140: LD_VAR 0 6
31144: PUSH
31145: LD_VAR 0 7
31149: ARRAY
31150: PUSH
31151: LD_INT 1
31153: ARRAY
31154: PPUSH
31155: CALL_OW 1
31159: ST_TO_ADDR
31160: GO 31122
31162: POP
31163: POP
// result := tmp ;
31164: LD_ADDR_VAR 0 6
31168: PUSH
31169: LD_VAR 0 9
31173: ST_TO_ADDR
// end ; end ;
31174: LD_VAR 0 6
31178: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31179: LD_INT 0
31181: PPUSH
31182: PPUSH
31183: PPUSH
31184: PPUSH
31185: PPUSH
31186: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31187: LD_ADDR_VAR 0 5
31191: PUSH
31192: LD_INT 0
31194: PUSH
31195: LD_INT 0
31197: PUSH
31198: LD_INT 0
31200: PUSH
31201: EMPTY
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: ST_TO_ADDR
// if not x or not y then
31209: LD_VAR 0 2
31213: NOT
31214: PUSH
31215: LD_VAR 0 3
31219: NOT
31220: OR
31221: IFFALSE 31225
// exit ;
31223: GO 32877
// if not range then
31225: LD_VAR 0 4
31229: NOT
31230: IFFALSE 31240
// range := 10 ;
31232: LD_ADDR_VAR 0 4
31236: PUSH
31237: LD_INT 10
31239: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31240: LD_ADDR_VAR 0 8
31244: PUSH
31245: LD_INT 81
31247: PUSH
31248: LD_VAR 0 1
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: LD_INT 92
31259: PUSH
31260: LD_VAR 0 2
31264: PUSH
31265: LD_VAR 0 3
31269: PUSH
31270: LD_VAR 0 4
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 3
31283: PUSH
31284: LD_INT 21
31286: PUSH
31287: LD_INT 3
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: LIST
31302: PPUSH
31303: CALL_OW 69
31307: ST_TO_ADDR
// if not tmp then
31308: LD_VAR 0 8
31312: NOT
31313: IFFALSE 31317
// exit ;
31315: GO 32877
// for i in tmp do
31317: LD_ADDR_VAR 0 6
31321: PUSH
31322: LD_VAR 0 8
31326: PUSH
31327: FOR_IN
31328: IFFALSE 32852
// begin points := [ 0 , 0 , 0 ] ;
31330: LD_ADDR_VAR 0 9
31334: PUSH
31335: LD_INT 0
31337: PUSH
31338: LD_INT 0
31340: PUSH
31341: LD_INT 0
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: LIST
31348: ST_TO_ADDR
// bpoints := 1 ;
31349: LD_ADDR_VAR 0 10
31353: PUSH
31354: LD_INT 1
31356: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31357: LD_VAR 0 6
31361: PPUSH
31362: CALL_OW 247
31366: PUSH
31367: LD_INT 1
31369: DOUBLE
31370: EQUAL
31371: IFTRUE 31375
31373: GO 31953
31375: POP
// begin if GetClass ( i ) = 1 then
31376: LD_VAR 0 6
31380: PPUSH
31381: CALL_OW 257
31385: PUSH
31386: LD_INT 1
31388: EQUAL
31389: IFFALSE 31410
// points := [ 10 , 5 , 3 ] ;
31391: LD_ADDR_VAR 0 9
31395: PUSH
31396: LD_INT 10
31398: PUSH
31399: LD_INT 5
31401: PUSH
31402: LD_INT 3
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: LIST
31409: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31410: LD_VAR 0 6
31414: PPUSH
31415: CALL_OW 257
31419: PUSH
31420: LD_INT 2
31422: PUSH
31423: LD_INT 3
31425: PUSH
31426: LD_INT 4
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: LIST
31433: IN
31434: IFFALSE 31455
// points := [ 3 , 2 , 1 ] ;
31436: LD_ADDR_VAR 0 9
31440: PUSH
31441: LD_INT 3
31443: PUSH
31444: LD_INT 2
31446: PUSH
31447: LD_INT 1
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: LIST
31454: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31455: LD_VAR 0 6
31459: PPUSH
31460: CALL_OW 257
31464: PUSH
31465: LD_INT 5
31467: EQUAL
31468: IFFALSE 31489
// points := [ 130 , 5 , 2 ] ;
31470: LD_ADDR_VAR 0 9
31474: PUSH
31475: LD_INT 130
31477: PUSH
31478: LD_INT 5
31480: PUSH
31481: LD_INT 2
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: LIST
31488: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31489: LD_VAR 0 6
31493: PPUSH
31494: CALL_OW 257
31498: PUSH
31499: LD_INT 8
31501: EQUAL
31502: IFFALSE 31523
// points := [ 35 , 35 , 30 ] ;
31504: LD_ADDR_VAR 0 9
31508: PUSH
31509: LD_INT 35
31511: PUSH
31512: LD_INT 35
31514: PUSH
31515: LD_INT 30
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: LIST
31522: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31523: LD_VAR 0 6
31527: PPUSH
31528: CALL_OW 257
31532: PUSH
31533: LD_INT 9
31535: EQUAL
31536: IFFALSE 31557
// points := [ 20 , 55 , 40 ] ;
31538: LD_ADDR_VAR 0 9
31542: PUSH
31543: LD_INT 20
31545: PUSH
31546: LD_INT 55
31548: PUSH
31549: LD_INT 40
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: LIST
31556: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31557: LD_VAR 0 6
31561: PPUSH
31562: CALL_OW 257
31566: PUSH
31567: LD_INT 12
31569: PUSH
31570: LD_INT 16
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: IN
31577: IFFALSE 31598
// points := [ 5 , 3 , 2 ] ;
31579: LD_ADDR_VAR 0 9
31583: PUSH
31584: LD_INT 5
31586: PUSH
31587: LD_INT 3
31589: PUSH
31590: LD_INT 2
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: LIST
31597: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31598: LD_VAR 0 6
31602: PPUSH
31603: CALL_OW 257
31607: PUSH
31608: LD_INT 17
31610: EQUAL
31611: IFFALSE 31632
// points := [ 100 , 50 , 75 ] ;
31613: LD_ADDR_VAR 0 9
31617: PUSH
31618: LD_INT 100
31620: PUSH
31621: LD_INT 50
31623: PUSH
31624: LD_INT 75
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: LIST
31631: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31632: LD_VAR 0 6
31636: PPUSH
31637: CALL_OW 257
31641: PUSH
31642: LD_INT 15
31644: EQUAL
31645: IFFALSE 31666
// points := [ 10 , 5 , 3 ] ;
31647: LD_ADDR_VAR 0 9
31651: PUSH
31652: LD_INT 10
31654: PUSH
31655: LD_INT 5
31657: PUSH
31658: LD_INT 3
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: LIST
31665: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31666: LD_VAR 0 6
31670: PPUSH
31671: CALL_OW 257
31675: PUSH
31676: LD_INT 14
31678: EQUAL
31679: IFFALSE 31700
// points := [ 10 , 0 , 0 ] ;
31681: LD_ADDR_VAR 0 9
31685: PUSH
31686: LD_INT 10
31688: PUSH
31689: LD_INT 0
31691: PUSH
31692: LD_INT 0
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: LIST
31699: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31700: LD_VAR 0 6
31704: PPUSH
31705: CALL_OW 257
31709: PUSH
31710: LD_INT 11
31712: EQUAL
31713: IFFALSE 31734
// points := [ 30 , 10 , 5 ] ;
31715: LD_ADDR_VAR 0 9
31719: PUSH
31720: LD_INT 30
31722: PUSH
31723: LD_INT 10
31725: PUSH
31726: LD_INT 5
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: LIST
31733: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31734: LD_VAR 0 1
31738: PPUSH
31739: LD_INT 5
31741: PPUSH
31742: CALL_OW 321
31746: PUSH
31747: LD_INT 2
31749: EQUAL
31750: IFFALSE 31767
// bpoints := bpoints * 1.8 ;
31752: LD_ADDR_VAR 0 10
31756: PUSH
31757: LD_VAR 0 10
31761: PUSH
31762: LD_REAL  1.80000000000000E+0000
31765: MUL
31766: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31767: LD_VAR 0 6
31771: PPUSH
31772: CALL_OW 257
31776: PUSH
31777: LD_INT 1
31779: PUSH
31780: LD_INT 2
31782: PUSH
31783: LD_INT 3
31785: PUSH
31786: LD_INT 4
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: IN
31795: PUSH
31796: LD_VAR 0 1
31800: PPUSH
31801: LD_INT 51
31803: PPUSH
31804: CALL_OW 321
31808: PUSH
31809: LD_INT 2
31811: EQUAL
31812: AND
31813: IFFALSE 31830
// bpoints := bpoints * 1.2 ;
31815: LD_ADDR_VAR 0 10
31819: PUSH
31820: LD_VAR 0 10
31824: PUSH
31825: LD_REAL  1.20000000000000E+0000
31828: MUL
31829: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31830: LD_VAR 0 6
31834: PPUSH
31835: CALL_OW 257
31839: PUSH
31840: LD_INT 5
31842: PUSH
31843: LD_INT 7
31845: PUSH
31846: LD_INT 9
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: LIST
31853: IN
31854: PUSH
31855: LD_VAR 0 1
31859: PPUSH
31860: LD_INT 52
31862: PPUSH
31863: CALL_OW 321
31867: PUSH
31868: LD_INT 2
31870: EQUAL
31871: AND
31872: IFFALSE 31889
// bpoints := bpoints * 1.5 ;
31874: LD_ADDR_VAR 0 10
31878: PUSH
31879: LD_VAR 0 10
31883: PUSH
31884: LD_REAL  1.50000000000000E+0000
31887: MUL
31888: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31889: LD_VAR 0 1
31893: PPUSH
31894: LD_INT 66
31896: PPUSH
31897: CALL_OW 321
31901: PUSH
31902: LD_INT 2
31904: EQUAL
31905: IFFALSE 31922
// bpoints := bpoints * 1.1 ;
31907: LD_ADDR_VAR 0 10
31911: PUSH
31912: LD_VAR 0 10
31916: PUSH
31917: LD_REAL  1.10000000000000E+0000
31920: MUL
31921: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31922: LD_ADDR_VAR 0 10
31926: PUSH
31927: LD_VAR 0 10
31931: PUSH
31932: LD_VAR 0 6
31936: PPUSH
31937: LD_INT 1
31939: PPUSH
31940: CALL_OW 259
31944: PUSH
31945: LD_REAL  1.15000000000000E+0000
31948: MUL
31949: MUL
31950: ST_TO_ADDR
// end ; unit_vehicle :
31951: GO 32781
31953: LD_INT 2
31955: DOUBLE
31956: EQUAL
31957: IFTRUE 31961
31959: GO 32769
31961: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31962: LD_VAR 0 6
31966: PPUSH
31967: CALL_OW 264
31971: PUSH
31972: LD_INT 2
31974: PUSH
31975: LD_INT 42
31977: PUSH
31978: LD_INT 24
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: LIST
31985: IN
31986: IFFALSE 32007
// points := [ 25 , 5 , 3 ] ;
31988: LD_ADDR_VAR 0 9
31992: PUSH
31993: LD_INT 25
31995: PUSH
31996: LD_INT 5
31998: PUSH
31999: LD_INT 3
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: LIST
32006: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32007: LD_VAR 0 6
32011: PPUSH
32012: CALL_OW 264
32016: PUSH
32017: LD_INT 4
32019: PUSH
32020: LD_INT 43
32022: PUSH
32023: LD_INT 25
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: LIST
32030: IN
32031: IFFALSE 32052
// points := [ 40 , 15 , 5 ] ;
32033: LD_ADDR_VAR 0 9
32037: PUSH
32038: LD_INT 40
32040: PUSH
32041: LD_INT 15
32043: PUSH
32044: LD_INT 5
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: LIST
32051: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32052: LD_VAR 0 6
32056: PPUSH
32057: CALL_OW 264
32061: PUSH
32062: LD_INT 3
32064: PUSH
32065: LD_INT 23
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: IN
32072: IFFALSE 32093
// points := [ 7 , 25 , 8 ] ;
32074: LD_ADDR_VAR 0 9
32078: PUSH
32079: LD_INT 7
32081: PUSH
32082: LD_INT 25
32084: PUSH
32085: LD_INT 8
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: LIST
32092: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32093: LD_VAR 0 6
32097: PPUSH
32098: CALL_OW 264
32102: PUSH
32103: LD_INT 5
32105: PUSH
32106: LD_INT 27
32108: PUSH
32109: LD_INT 44
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: LIST
32116: IN
32117: IFFALSE 32138
// points := [ 14 , 50 , 16 ] ;
32119: LD_ADDR_VAR 0 9
32123: PUSH
32124: LD_INT 14
32126: PUSH
32127: LD_INT 50
32129: PUSH
32130: LD_INT 16
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: LIST
32137: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32138: LD_VAR 0 6
32142: PPUSH
32143: CALL_OW 264
32147: PUSH
32148: LD_INT 6
32150: PUSH
32151: LD_INT 46
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: IN
32158: IFFALSE 32179
// points := [ 32 , 120 , 70 ] ;
32160: LD_ADDR_VAR 0 9
32164: PUSH
32165: LD_INT 32
32167: PUSH
32168: LD_INT 120
32170: PUSH
32171: LD_INT 70
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: LIST
32178: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32179: LD_VAR 0 6
32183: PPUSH
32184: CALL_OW 264
32188: PUSH
32189: LD_INT 7
32191: PUSH
32192: LD_INT 28
32194: PUSH
32195: LD_INT 45
32197: PUSH
32198: LD_EXP 64
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: IN
32209: IFFALSE 32230
// points := [ 35 , 20 , 45 ] ;
32211: LD_ADDR_VAR 0 9
32215: PUSH
32216: LD_INT 35
32218: PUSH
32219: LD_INT 20
32221: PUSH
32222: LD_INT 45
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: LIST
32229: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32230: LD_VAR 0 6
32234: PPUSH
32235: CALL_OW 264
32239: PUSH
32240: LD_INT 47
32242: PUSH
32243: EMPTY
32244: LIST
32245: IN
32246: IFFALSE 32267
// points := [ 67 , 45 , 75 ] ;
32248: LD_ADDR_VAR 0 9
32252: PUSH
32253: LD_INT 67
32255: PUSH
32256: LD_INT 45
32258: PUSH
32259: LD_INT 75
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: LIST
32266: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32267: LD_VAR 0 6
32271: PPUSH
32272: CALL_OW 264
32276: PUSH
32277: LD_INT 26
32279: PUSH
32280: EMPTY
32281: LIST
32282: IN
32283: IFFALSE 32304
// points := [ 120 , 30 , 80 ] ;
32285: LD_ADDR_VAR 0 9
32289: PUSH
32290: LD_INT 120
32292: PUSH
32293: LD_INT 30
32295: PUSH
32296: LD_INT 80
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: LIST
32303: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32304: LD_VAR 0 6
32308: PPUSH
32309: CALL_OW 264
32313: PUSH
32314: LD_INT 22
32316: PUSH
32317: EMPTY
32318: LIST
32319: IN
32320: IFFALSE 32341
// points := [ 40 , 1 , 1 ] ;
32322: LD_ADDR_VAR 0 9
32326: PUSH
32327: LD_INT 40
32329: PUSH
32330: LD_INT 1
32332: PUSH
32333: LD_INT 1
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: LIST
32340: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32341: LD_VAR 0 6
32345: PPUSH
32346: CALL_OW 264
32350: PUSH
32351: LD_INT 29
32353: PUSH
32354: EMPTY
32355: LIST
32356: IN
32357: IFFALSE 32378
// points := [ 70 , 200 , 400 ] ;
32359: LD_ADDR_VAR 0 9
32363: PUSH
32364: LD_INT 70
32366: PUSH
32367: LD_INT 200
32369: PUSH
32370: LD_INT 400
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: LIST
32377: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32378: LD_VAR 0 6
32382: PPUSH
32383: CALL_OW 264
32387: PUSH
32388: LD_INT 14
32390: PUSH
32391: LD_INT 53
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: IN
32398: IFFALSE 32419
// points := [ 40 , 10 , 20 ] ;
32400: LD_ADDR_VAR 0 9
32404: PUSH
32405: LD_INT 40
32407: PUSH
32408: LD_INT 10
32410: PUSH
32411: LD_INT 20
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: LIST
32418: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32419: LD_VAR 0 6
32423: PPUSH
32424: CALL_OW 264
32428: PUSH
32429: LD_INT 9
32431: PUSH
32432: EMPTY
32433: LIST
32434: IN
32435: IFFALSE 32456
// points := [ 5 , 70 , 20 ] ;
32437: LD_ADDR_VAR 0 9
32441: PUSH
32442: LD_INT 5
32444: PUSH
32445: LD_INT 70
32447: PUSH
32448: LD_INT 20
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: LIST
32455: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32456: LD_VAR 0 6
32460: PPUSH
32461: CALL_OW 264
32465: PUSH
32466: LD_INT 10
32468: PUSH
32469: EMPTY
32470: LIST
32471: IN
32472: IFFALSE 32493
// points := [ 35 , 110 , 70 ] ;
32474: LD_ADDR_VAR 0 9
32478: PUSH
32479: LD_INT 35
32481: PUSH
32482: LD_INT 110
32484: PUSH
32485: LD_INT 70
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: LIST
32492: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32493: LD_VAR 0 6
32497: PPUSH
32498: CALL_OW 265
32502: PUSH
32503: LD_INT 25
32505: EQUAL
32506: IFFALSE 32527
// points := [ 80 , 65 , 100 ] ;
32508: LD_ADDR_VAR 0 9
32512: PUSH
32513: LD_INT 80
32515: PUSH
32516: LD_INT 65
32518: PUSH
32519: LD_INT 100
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: LIST
32526: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32527: LD_VAR 0 6
32531: PPUSH
32532: CALL_OW 263
32536: PUSH
32537: LD_INT 1
32539: EQUAL
32540: IFFALSE 32575
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32542: LD_ADDR_VAR 0 10
32546: PUSH
32547: LD_VAR 0 10
32551: PUSH
32552: LD_VAR 0 6
32556: PPUSH
32557: CALL_OW 311
32561: PPUSH
32562: LD_INT 3
32564: PPUSH
32565: CALL_OW 259
32569: PUSH
32570: LD_INT 4
32572: MUL
32573: MUL
32574: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32575: LD_VAR 0 6
32579: PPUSH
32580: CALL_OW 263
32584: PUSH
32585: LD_INT 2
32587: EQUAL
32588: IFFALSE 32639
// begin j := IsControledBy ( i ) ;
32590: LD_ADDR_VAR 0 7
32594: PUSH
32595: LD_VAR 0 6
32599: PPUSH
32600: CALL_OW 312
32604: ST_TO_ADDR
// if j then
32605: LD_VAR 0 7
32609: IFFALSE 32639
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32611: LD_ADDR_VAR 0 10
32615: PUSH
32616: LD_VAR 0 10
32620: PUSH
32621: LD_VAR 0 7
32625: PPUSH
32626: LD_INT 3
32628: PPUSH
32629: CALL_OW 259
32633: PUSH
32634: LD_INT 3
32636: MUL
32637: MUL
32638: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32639: LD_VAR 0 6
32643: PPUSH
32644: CALL_OW 264
32648: PUSH
32649: LD_INT 5
32651: PUSH
32652: LD_INT 6
32654: PUSH
32655: LD_INT 46
32657: PUSH
32658: LD_INT 44
32660: PUSH
32661: LD_INT 47
32663: PUSH
32664: LD_INT 45
32666: PUSH
32667: LD_INT 28
32669: PUSH
32670: LD_INT 7
32672: PUSH
32673: LD_INT 27
32675: PUSH
32676: LD_INT 29
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: IN
32691: PUSH
32692: LD_VAR 0 1
32696: PPUSH
32697: LD_INT 52
32699: PPUSH
32700: CALL_OW 321
32704: PUSH
32705: LD_INT 2
32707: EQUAL
32708: AND
32709: IFFALSE 32726
// bpoints := bpoints * 1.2 ;
32711: LD_ADDR_VAR 0 10
32715: PUSH
32716: LD_VAR 0 10
32720: PUSH
32721: LD_REAL  1.20000000000000E+0000
32724: MUL
32725: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32726: LD_VAR 0 6
32730: PPUSH
32731: CALL_OW 264
32735: PUSH
32736: LD_INT 6
32738: PUSH
32739: LD_INT 46
32741: PUSH
32742: LD_INT 47
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: LIST
32749: IN
32750: IFFALSE 32767
// bpoints := bpoints * 1.2 ;
32752: LD_ADDR_VAR 0 10
32756: PUSH
32757: LD_VAR 0 10
32761: PUSH
32762: LD_REAL  1.20000000000000E+0000
32765: MUL
32766: ST_TO_ADDR
// end ; unit_building :
32767: GO 32781
32769: LD_INT 3
32771: DOUBLE
32772: EQUAL
32773: IFTRUE 32777
32775: GO 32780
32777: POP
// ; end ;
32778: GO 32781
32780: POP
// for j = 1 to 3 do
32781: LD_ADDR_VAR 0 7
32785: PUSH
32786: DOUBLE
32787: LD_INT 1
32789: DEC
32790: ST_TO_ADDR
32791: LD_INT 3
32793: PUSH
32794: FOR_TO
32795: IFFALSE 32848
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32797: LD_ADDR_VAR 0 5
32801: PUSH
32802: LD_VAR 0 5
32806: PPUSH
32807: LD_VAR 0 7
32811: PPUSH
32812: LD_VAR 0 5
32816: PUSH
32817: LD_VAR 0 7
32821: ARRAY
32822: PUSH
32823: LD_VAR 0 9
32827: PUSH
32828: LD_VAR 0 7
32832: ARRAY
32833: PUSH
32834: LD_VAR 0 10
32838: MUL
32839: PLUS
32840: PPUSH
32841: CALL_OW 1
32845: ST_TO_ADDR
32846: GO 32794
32848: POP
32849: POP
// end ;
32850: GO 31327
32852: POP
32853: POP
// result := Replace ( result , 4 , tmp ) ;
32854: LD_ADDR_VAR 0 5
32858: PUSH
32859: LD_VAR 0 5
32863: PPUSH
32864: LD_INT 4
32866: PPUSH
32867: LD_VAR 0 8
32871: PPUSH
32872: CALL_OW 1
32876: ST_TO_ADDR
// end ;
32877: LD_VAR 0 5
32881: RET
// export function DangerAtRange ( unit , range ) ; begin
32882: LD_INT 0
32884: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32885: LD_ADDR_VAR 0 3
32889: PUSH
32890: LD_VAR 0 1
32894: PPUSH
32895: CALL_OW 255
32899: PPUSH
32900: LD_VAR 0 1
32904: PPUSH
32905: CALL_OW 250
32909: PPUSH
32910: LD_VAR 0 1
32914: PPUSH
32915: CALL_OW 251
32919: PPUSH
32920: LD_VAR 0 2
32924: PPUSH
32925: CALL 31179 0 4
32929: ST_TO_ADDR
// end ;
32930: LD_VAR 0 3
32934: RET
// export function DangerInArea ( side , area ) ; begin
32935: LD_INT 0
32937: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32938: LD_ADDR_VAR 0 3
32942: PUSH
32943: LD_VAR 0 2
32947: PPUSH
32948: LD_INT 81
32950: PUSH
32951: LD_VAR 0 1
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PPUSH
32960: CALL_OW 70
32964: ST_TO_ADDR
// end ;
32965: LD_VAR 0 3
32969: RET
// export function IsExtension ( b ) ; begin
32970: LD_INT 0
32972: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32973: LD_ADDR_VAR 0 2
32977: PUSH
32978: LD_VAR 0 1
32982: PUSH
32983: LD_INT 23
32985: PUSH
32986: LD_INT 20
32988: PUSH
32989: LD_INT 22
32991: PUSH
32992: LD_INT 17
32994: PUSH
32995: LD_INT 24
32997: PUSH
32998: LD_INT 21
33000: PUSH
33001: LD_INT 19
33003: PUSH
33004: LD_INT 16
33006: PUSH
33007: LD_INT 25
33009: PUSH
33010: LD_INT 18
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: IN
33025: ST_TO_ADDR
// end ;
33026: LD_VAR 0 2
33030: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33031: LD_INT 0
33033: PPUSH
33034: PPUSH
33035: PPUSH
// result := [ ] ;
33036: LD_ADDR_VAR 0 4
33040: PUSH
33041: EMPTY
33042: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33043: LD_ADDR_VAR 0 5
33047: PUSH
33048: LD_VAR 0 2
33052: PPUSH
33053: LD_INT 21
33055: PUSH
33056: LD_INT 3
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PPUSH
33063: CALL_OW 70
33067: ST_TO_ADDR
// if not tmp then
33068: LD_VAR 0 5
33072: NOT
33073: IFFALSE 33077
// exit ;
33075: GO 33141
// if checkLink then
33077: LD_VAR 0 3
33081: IFFALSE 33131
// begin for i in tmp do
33083: LD_ADDR_VAR 0 6
33087: PUSH
33088: LD_VAR 0 5
33092: PUSH
33093: FOR_IN
33094: IFFALSE 33129
// if GetBase ( i ) <> base then
33096: LD_VAR 0 6
33100: PPUSH
33101: CALL_OW 274
33105: PUSH
33106: LD_VAR 0 1
33110: NONEQUAL
33111: IFFALSE 33127
// ComLinkToBase ( base , i ) ;
33113: LD_VAR 0 1
33117: PPUSH
33118: LD_VAR 0 6
33122: PPUSH
33123: CALL_OW 169
33127: GO 33093
33129: POP
33130: POP
// end ; result := tmp ;
33131: LD_ADDR_VAR 0 4
33135: PUSH
33136: LD_VAR 0 5
33140: ST_TO_ADDR
// end ;
33141: LD_VAR 0 4
33145: RET
// export function ComComplete ( units , b ) ; var i ; begin
33146: LD_INT 0
33148: PPUSH
33149: PPUSH
// if not units then
33150: LD_VAR 0 1
33154: NOT
33155: IFFALSE 33159
// exit ;
33157: GO 33249
// for i in units do
33159: LD_ADDR_VAR 0 4
33163: PUSH
33164: LD_VAR 0 1
33168: PUSH
33169: FOR_IN
33170: IFFALSE 33247
// if BuildingStatus ( b ) = bs_build then
33172: LD_VAR 0 2
33176: PPUSH
33177: CALL_OW 461
33181: PUSH
33182: LD_INT 1
33184: EQUAL
33185: IFFALSE 33245
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33187: LD_VAR 0 4
33191: PPUSH
33192: LD_STRING h
33194: PUSH
33195: LD_VAR 0 2
33199: PPUSH
33200: CALL_OW 250
33204: PUSH
33205: LD_VAR 0 2
33209: PPUSH
33210: CALL_OW 251
33214: PUSH
33215: LD_VAR 0 2
33219: PUSH
33220: LD_INT 0
33222: PUSH
33223: LD_INT 0
33225: PUSH
33226: LD_INT 0
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: PUSH
33238: EMPTY
33239: LIST
33240: PPUSH
33241: CALL_OW 446
33245: GO 33169
33247: POP
33248: POP
// end ;
33249: LD_VAR 0 3
33253: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33254: LD_INT 0
33256: PPUSH
33257: PPUSH
33258: PPUSH
33259: PPUSH
33260: PPUSH
33261: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33262: LD_VAR 0 1
33266: NOT
33267: PUSH
33268: LD_VAR 0 1
33272: PPUSH
33273: CALL_OW 263
33277: PUSH
33278: LD_INT 2
33280: NONEQUAL
33281: OR
33282: IFFALSE 33286
// exit ;
33284: GO 33602
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33286: LD_ADDR_VAR 0 6
33290: PUSH
33291: LD_INT 22
33293: PUSH
33294: LD_VAR 0 1
33298: PPUSH
33299: CALL_OW 255
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 2
33310: PUSH
33311: LD_INT 30
33313: PUSH
33314: LD_INT 36
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 34
33323: PUSH
33324: LD_INT 31
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: LIST
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PPUSH
33340: CALL_OW 69
33344: ST_TO_ADDR
// if not tmp then
33345: LD_VAR 0 6
33349: NOT
33350: IFFALSE 33354
// exit ;
33352: GO 33602
// result := [ ] ;
33354: LD_ADDR_VAR 0 2
33358: PUSH
33359: EMPTY
33360: ST_TO_ADDR
// for i in tmp do
33361: LD_ADDR_VAR 0 3
33365: PUSH
33366: LD_VAR 0 6
33370: PUSH
33371: FOR_IN
33372: IFFALSE 33443
// begin t := UnitsInside ( i ) ;
33374: LD_ADDR_VAR 0 4
33378: PUSH
33379: LD_VAR 0 3
33383: PPUSH
33384: CALL_OW 313
33388: ST_TO_ADDR
// if t then
33389: LD_VAR 0 4
33393: IFFALSE 33441
// for j in t do
33395: LD_ADDR_VAR 0 7
33399: PUSH
33400: LD_VAR 0 4
33404: PUSH
33405: FOR_IN
33406: IFFALSE 33439
// result := Replace ( result , result + 1 , j ) ;
33408: LD_ADDR_VAR 0 2
33412: PUSH
33413: LD_VAR 0 2
33417: PPUSH
33418: LD_VAR 0 2
33422: PUSH
33423: LD_INT 1
33425: PLUS
33426: PPUSH
33427: LD_VAR 0 7
33431: PPUSH
33432: CALL_OW 1
33436: ST_TO_ADDR
33437: GO 33405
33439: POP
33440: POP
// end ;
33441: GO 33371
33443: POP
33444: POP
// if not result then
33445: LD_VAR 0 2
33449: NOT
33450: IFFALSE 33454
// exit ;
33452: GO 33602
// mech := result [ 1 ] ;
33454: LD_ADDR_VAR 0 5
33458: PUSH
33459: LD_VAR 0 2
33463: PUSH
33464: LD_INT 1
33466: ARRAY
33467: ST_TO_ADDR
// if result > 1 then
33468: LD_VAR 0 2
33472: PUSH
33473: LD_INT 1
33475: GREATER
33476: IFFALSE 33588
// begin for i = 2 to result do
33478: LD_ADDR_VAR 0 3
33482: PUSH
33483: DOUBLE
33484: LD_INT 2
33486: DEC
33487: ST_TO_ADDR
33488: LD_VAR 0 2
33492: PUSH
33493: FOR_TO
33494: IFFALSE 33586
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33496: LD_ADDR_VAR 0 4
33500: PUSH
33501: LD_VAR 0 2
33505: PUSH
33506: LD_VAR 0 3
33510: ARRAY
33511: PPUSH
33512: LD_INT 3
33514: PPUSH
33515: CALL_OW 259
33519: PUSH
33520: LD_VAR 0 2
33524: PUSH
33525: LD_VAR 0 3
33529: ARRAY
33530: PPUSH
33531: CALL_OW 432
33535: MINUS
33536: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33537: LD_VAR 0 4
33541: PUSH
33542: LD_VAR 0 5
33546: PPUSH
33547: LD_INT 3
33549: PPUSH
33550: CALL_OW 259
33554: PUSH
33555: LD_VAR 0 5
33559: PPUSH
33560: CALL_OW 432
33564: MINUS
33565: GREATEREQUAL
33566: IFFALSE 33584
// mech := result [ i ] ;
33568: LD_ADDR_VAR 0 5
33572: PUSH
33573: LD_VAR 0 2
33577: PUSH
33578: LD_VAR 0 3
33582: ARRAY
33583: ST_TO_ADDR
// end ;
33584: GO 33493
33586: POP
33587: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33588: LD_VAR 0 1
33592: PPUSH
33593: LD_VAR 0 5
33597: PPUSH
33598: CALL_OW 135
// end ;
33602: LD_VAR 0 2
33606: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33607: LD_INT 0
33609: PPUSH
33610: PPUSH
33611: PPUSH
33612: PPUSH
33613: PPUSH
33614: PPUSH
33615: PPUSH
33616: PPUSH
33617: PPUSH
33618: PPUSH
33619: PPUSH
33620: PPUSH
33621: PPUSH
// result := [ ] ;
33622: LD_ADDR_VAR 0 7
33626: PUSH
33627: EMPTY
33628: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33629: LD_VAR 0 1
33633: PPUSH
33634: CALL_OW 266
33638: PUSH
33639: LD_INT 0
33641: PUSH
33642: LD_INT 1
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: IN
33649: NOT
33650: IFFALSE 33654
// exit ;
33652: GO 35288
// if name then
33654: LD_VAR 0 3
33658: IFFALSE 33674
// SetBName ( base_dep , name ) ;
33660: LD_VAR 0 1
33664: PPUSH
33665: LD_VAR 0 3
33669: PPUSH
33670: CALL_OW 500
// base := GetBase ( base_dep ) ;
33674: LD_ADDR_VAR 0 15
33678: PUSH
33679: LD_VAR 0 1
33683: PPUSH
33684: CALL_OW 274
33688: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33689: LD_ADDR_VAR 0 16
33693: PUSH
33694: LD_VAR 0 1
33698: PPUSH
33699: CALL_OW 255
33703: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33704: LD_ADDR_VAR 0 17
33708: PUSH
33709: LD_VAR 0 1
33713: PPUSH
33714: CALL_OW 248
33718: ST_TO_ADDR
// if sources then
33719: LD_VAR 0 5
33723: IFFALSE 33770
// for i = 1 to 3 do
33725: LD_ADDR_VAR 0 8
33729: PUSH
33730: DOUBLE
33731: LD_INT 1
33733: DEC
33734: ST_TO_ADDR
33735: LD_INT 3
33737: PUSH
33738: FOR_TO
33739: IFFALSE 33768
// AddResourceType ( base , i , sources [ i ] ) ;
33741: LD_VAR 0 15
33745: PPUSH
33746: LD_VAR 0 8
33750: PPUSH
33751: LD_VAR 0 5
33755: PUSH
33756: LD_VAR 0 8
33760: ARRAY
33761: PPUSH
33762: CALL_OW 276
33766: GO 33738
33768: POP
33769: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33770: LD_ADDR_VAR 0 18
33774: PUSH
33775: LD_VAR 0 15
33779: PPUSH
33780: LD_VAR 0 2
33784: PPUSH
33785: LD_INT 1
33787: PPUSH
33788: CALL 33031 0 3
33792: ST_TO_ADDR
// InitHc ;
33793: CALL_OW 19
// InitUc ;
33797: CALL_OW 18
// uc_side := side ;
33801: LD_ADDR_OWVAR 20
33805: PUSH
33806: LD_VAR 0 16
33810: ST_TO_ADDR
// uc_nation := nation ;
33811: LD_ADDR_OWVAR 21
33815: PUSH
33816: LD_VAR 0 17
33820: ST_TO_ADDR
// if buildings then
33821: LD_VAR 0 18
33825: IFFALSE 35147
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33827: LD_ADDR_VAR 0 19
33831: PUSH
33832: LD_VAR 0 18
33836: PPUSH
33837: LD_INT 2
33839: PUSH
33840: LD_INT 30
33842: PUSH
33843: LD_INT 29
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 30
33852: PUSH
33853: LD_INT 30
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: LIST
33864: PPUSH
33865: CALL_OW 72
33869: ST_TO_ADDR
// if tmp then
33870: LD_VAR 0 19
33874: IFFALSE 33922
// for i in tmp do
33876: LD_ADDR_VAR 0 8
33880: PUSH
33881: LD_VAR 0 19
33885: PUSH
33886: FOR_IN
33887: IFFALSE 33920
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33889: LD_VAR 0 8
33893: PPUSH
33894: CALL_OW 250
33898: PPUSH
33899: LD_VAR 0 8
33903: PPUSH
33904: CALL_OW 251
33908: PPUSH
33909: LD_VAR 0 16
33913: PPUSH
33914: CALL_OW 441
33918: GO 33886
33920: POP
33921: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33922: LD_VAR 0 18
33926: PPUSH
33927: LD_INT 2
33929: PUSH
33930: LD_INT 30
33932: PUSH
33933: LD_INT 32
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 30
33942: PUSH
33943: LD_INT 33
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: LIST
33954: PPUSH
33955: CALL_OW 72
33959: IFFALSE 34047
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33961: LD_ADDR_VAR 0 8
33965: PUSH
33966: LD_VAR 0 18
33970: PPUSH
33971: LD_INT 2
33973: PUSH
33974: LD_INT 30
33976: PUSH
33977: LD_INT 32
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 30
33986: PUSH
33987: LD_INT 33
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: LIST
33998: PPUSH
33999: CALL_OW 72
34003: PUSH
34004: FOR_IN
34005: IFFALSE 34045
// begin if not GetBWeapon ( i ) then
34007: LD_VAR 0 8
34011: PPUSH
34012: CALL_OW 269
34016: NOT
34017: IFFALSE 34043
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34019: LD_VAR 0 8
34023: PPUSH
34024: LD_VAR 0 8
34028: PPUSH
34029: LD_VAR 0 2
34033: PPUSH
34034: CALL 35293 0 2
34038: PPUSH
34039: CALL_OW 431
// end ;
34043: GO 34004
34045: POP
34046: POP
// end ; for i = 1 to personel do
34047: LD_ADDR_VAR 0 8
34051: PUSH
34052: DOUBLE
34053: LD_INT 1
34055: DEC
34056: ST_TO_ADDR
34057: LD_VAR 0 6
34061: PUSH
34062: FOR_TO
34063: IFFALSE 35127
// begin if i > 4 then
34065: LD_VAR 0 8
34069: PUSH
34070: LD_INT 4
34072: GREATER
34073: IFFALSE 34077
// break ;
34075: GO 35127
// case i of 1 :
34077: LD_VAR 0 8
34081: PUSH
34082: LD_INT 1
34084: DOUBLE
34085: EQUAL
34086: IFTRUE 34090
34088: GO 34170
34090: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34091: LD_ADDR_VAR 0 12
34095: PUSH
34096: LD_VAR 0 18
34100: PPUSH
34101: LD_INT 22
34103: PUSH
34104: LD_VAR 0 16
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 58
34115: PUSH
34116: EMPTY
34117: LIST
34118: PUSH
34119: LD_INT 2
34121: PUSH
34122: LD_INT 30
34124: PUSH
34125: LD_INT 32
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 30
34134: PUSH
34135: LD_INT 4
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 30
34144: PUSH
34145: LD_INT 5
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: LIST
34162: PPUSH
34163: CALL_OW 72
34167: ST_TO_ADDR
34168: GO 34392
34170: LD_INT 2
34172: DOUBLE
34173: EQUAL
34174: IFTRUE 34178
34176: GO 34240
34178: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34179: LD_ADDR_VAR 0 12
34183: PUSH
34184: LD_VAR 0 18
34188: PPUSH
34189: LD_INT 22
34191: PUSH
34192: LD_VAR 0 16
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 2
34203: PUSH
34204: LD_INT 30
34206: PUSH
34207: LD_INT 0
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 30
34216: PUSH
34217: LD_INT 1
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: LIST
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PPUSH
34233: CALL_OW 72
34237: ST_TO_ADDR
34238: GO 34392
34240: LD_INT 3
34242: DOUBLE
34243: EQUAL
34244: IFTRUE 34248
34246: GO 34310
34248: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34249: LD_ADDR_VAR 0 12
34253: PUSH
34254: LD_VAR 0 18
34258: PPUSH
34259: LD_INT 22
34261: PUSH
34262: LD_VAR 0 16
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 2
34273: PUSH
34274: LD_INT 30
34276: PUSH
34277: LD_INT 2
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 30
34286: PUSH
34287: LD_INT 3
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: LIST
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PPUSH
34303: CALL_OW 72
34307: ST_TO_ADDR
34308: GO 34392
34310: LD_INT 4
34312: DOUBLE
34313: EQUAL
34314: IFTRUE 34318
34316: GO 34391
34318: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34319: LD_ADDR_VAR 0 12
34323: PUSH
34324: LD_VAR 0 18
34328: PPUSH
34329: LD_INT 22
34331: PUSH
34332: LD_VAR 0 16
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 2
34343: PUSH
34344: LD_INT 30
34346: PUSH
34347: LD_INT 6
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 30
34356: PUSH
34357: LD_INT 7
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 30
34366: PUSH
34367: LD_INT 8
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PPUSH
34384: CALL_OW 72
34388: ST_TO_ADDR
34389: GO 34392
34391: POP
// if i = 1 then
34392: LD_VAR 0 8
34396: PUSH
34397: LD_INT 1
34399: EQUAL
34400: IFFALSE 34511
// begin tmp := [ ] ;
34402: LD_ADDR_VAR 0 19
34406: PUSH
34407: EMPTY
34408: ST_TO_ADDR
// for j in f do
34409: LD_ADDR_VAR 0 9
34413: PUSH
34414: LD_VAR 0 12
34418: PUSH
34419: FOR_IN
34420: IFFALSE 34493
// if GetBType ( j ) = b_bunker then
34422: LD_VAR 0 9
34426: PPUSH
34427: CALL_OW 266
34431: PUSH
34432: LD_INT 32
34434: EQUAL
34435: IFFALSE 34462
// tmp := Insert ( tmp , 1 , j ) else
34437: LD_ADDR_VAR 0 19
34441: PUSH
34442: LD_VAR 0 19
34446: PPUSH
34447: LD_INT 1
34449: PPUSH
34450: LD_VAR 0 9
34454: PPUSH
34455: CALL_OW 2
34459: ST_TO_ADDR
34460: GO 34491
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34462: LD_ADDR_VAR 0 19
34466: PUSH
34467: LD_VAR 0 19
34471: PPUSH
34472: LD_VAR 0 19
34476: PUSH
34477: LD_INT 1
34479: PLUS
34480: PPUSH
34481: LD_VAR 0 9
34485: PPUSH
34486: CALL_OW 2
34490: ST_TO_ADDR
34491: GO 34419
34493: POP
34494: POP
// if tmp then
34495: LD_VAR 0 19
34499: IFFALSE 34511
// f := tmp ;
34501: LD_ADDR_VAR 0 12
34505: PUSH
34506: LD_VAR 0 19
34510: ST_TO_ADDR
// end ; x := personel [ i ] ;
34511: LD_ADDR_VAR 0 13
34515: PUSH
34516: LD_VAR 0 6
34520: PUSH
34521: LD_VAR 0 8
34525: ARRAY
34526: ST_TO_ADDR
// if x = - 1 then
34527: LD_VAR 0 13
34531: PUSH
34532: LD_INT 1
34534: NEG
34535: EQUAL
34536: IFFALSE 34745
// begin for j in f do
34538: LD_ADDR_VAR 0 9
34542: PUSH
34543: LD_VAR 0 12
34547: PUSH
34548: FOR_IN
34549: IFFALSE 34741
// repeat InitHc ;
34551: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34555: LD_VAR 0 9
34559: PPUSH
34560: CALL_OW 266
34564: PUSH
34565: LD_INT 5
34567: EQUAL
34568: IFFALSE 34638
// begin if UnitsInside ( j ) < 3 then
34570: LD_VAR 0 9
34574: PPUSH
34575: CALL_OW 313
34579: PUSH
34580: LD_INT 3
34582: LESS
34583: IFFALSE 34619
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34585: LD_INT 0
34587: PPUSH
34588: LD_INT 5
34590: PUSH
34591: LD_INT 8
34593: PUSH
34594: LD_INT 9
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: LIST
34601: PUSH
34602: LD_VAR 0 17
34606: ARRAY
34607: PPUSH
34608: LD_VAR 0 4
34612: PPUSH
34613: CALL_OW 380
34617: GO 34636
// PrepareHuman ( false , i , skill ) ;
34619: LD_INT 0
34621: PPUSH
34622: LD_VAR 0 8
34626: PPUSH
34627: LD_VAR 0 4
34631: PPUSH
34632: CALL_OW 380
// end else
34636: GO 34655
// PrepareHuman ( false , i , skill ) ;
34638: LD_INT 0
34640: PPUSH
34641: LD_VAR 0 8
34645: PPUSH
34646: LD_VAR 0 4
34650: PPUSH
34651: CALL_OW 380
// un := CreateHuman ;
34655: LD_ADDR_VAR 0 14
34659: PUSH
34660: CALL_OW 44
34664: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34665: LD_ADDR_VAR 0 7
34669: PUSH
34670: LD_VAR 0 7
34674: PPUSH
34675: LD_INT 1
34677: PPUSH
34678: LD_VAR 0 14
34682: PPUSH
34683: CALL_OW 2
34687: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34688: LD_VAR 0 14
34692: PPUSH
34693: LD_VAR 0 9
34697: PPUSH
34698: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34702: LD_VAR 0 9
34706: PPUSH
34707: CALL_OW 313
34711: PUSH
34712: LD_INT 6
34714: EQUAL
34715: PUSH
34716: LD_VAR 0 9
34720: PPUSH
34721: CALL_OW 266
34725: PUSH
34726: LD_INT 32
34728: PUSH
34729: LD_INT 31
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: IN
34736: OR
34737: IFFALSE 34551
34739: GO 34548
34741: POP
34742: POP
// end else
34743: GO 35125
// for j = 1 to x do
34745: LD_ADDR_VAR 0 9
34749: PUSH
34750: DOUBLE
34751: LD_INT 1
34753: DEC
34754: ST_TO_ADDR
34755: LD_VAR 0 13
34759: PUSH
34760: FOR_TO
34761: IFFALSE 35123
// begin InitHc ;
34763: CALL_OW 19
// if not f then
34767: LD_VAR 0 12
34771: NOT
34772: IFFALSE 34861
// begin PrepareHuman ( false , i , skill ) ;
34774: LD_INT 0
34776: PPUSH
34777: LD_VAR 0 8
34781: PPUSH
34782: LD_VAR 0 4
34786: PPUSH
34787: CALL_OW 380
// un := CreateHuman ;
34791: LD_ADDR_VAR 0 14
34795: PUSH
34796: CALL_OW 44
34800: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34801: LD_ADDR_VAR 0 7
34805: PUSH
34806: LD_VAR 0 7
34810: PPUSH
34811: LD_INT 1
34813: PPUSH
34814: LD_VAR 0 14
34818: PPUSH
34819: CALL_OW 2
34823: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34824: LD_VAR 0 14
34828: PPUSH
34829: LD_VAR 0 1
34833: PPUSH
34834: CALL_OW 250
34838: PPUSH
34839: LD_VAR 0 1
34843: PPUSH
34844: CALL_OW 251
34848: PPUSH
34849: LD_INT 10
34851: PPUSH
34852: LD_INT 0
34854: PPUSH
34855: CALL_OW 50
// continue ;
34859: GO 34760
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34861: LD_VAR 0 12
34865: PUSH
34866: LD_INT 1
34868: ARRAY
34869: PPUSH
34870: CALL_OW 313
34874: PUSH
34875: LD_VAR 0 12
34879: PUSH
34880: LD_INT 1
34882: ARRAY
34883: PPUSH
34884: CALL_OW 266
34888: PUSH
34889: LD_INT 32
34891: PUSH
34892: LD_INT 31
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: IN
34899: AND
34900: PUSH
34901: LD_VAR 0 12
34905: PUSH
34906: LD_INT 1
34908: ARRAY
34909: PPUSH
34910: CALL_OW 313
34914: PUSH
34915: LD_INT 6
34917: EQUAL
34918: OR
34919: IFFALSE 34939
// f := Delete ( f , 1 ) ;
34921: LD_ADDR_VAR 0 12
34925: PUSH
34926: LD_VAR 0 12
34930: PPUSH
34931: LD_INT 1
34933: PPUSH
34934: CALL_OW 3
34938: ST_TO_ADDR
// if not f then
34939: LD_VAR 0 12
34943: NOT
34944: IFFALSE 34962
// begin x := x + 2 ;
34946: LD_ADDR_VAR 0 13
34950: PUSH
34951: LD_VAR 0 13
34955: PUSH
34956: LD_INT 2
34958: PLUS
34959: ST_TO_ADDR
// continue ;
34960: GO 34760
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34962: LD_VAR 0 12
34966: PUSH
34967: LD_INT 1
34969: ARRAY
34970: PPUSH
34971: CALL_OW 266
34975: PUSH
34976: LD_INT 5
34978: EQUAL
34979: IFFALSE 35053
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34981: LD_VAR 0 12
34985: PUSH
34986: LD_INT 1
34988: ARRAY
34989: PPUSH
34990: CALL_OW 313
34994: PUSH
34995: LD_INT 3
34997: LESS
34998: IFFALSE 35034
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35000: LD_INT 0
35002: PPUSH
35003: LD_INT 5
35005: PUSH
35006: LD_INT 8
35008: PUSH
35009: LD_INT 9
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: LIST
35016: PUSH
35017: LD_VAR 0 17
35021: ARRAY
35022: PPUSH
35023: LD_VAR 0 4
35027: PPUSH
35028: CALL_OW 380
35032: GO 35051
// PrepareHuman ( false , i , skill ) ;
35034: LD_INT 0
35036: PPUSH
35037: LD_VAR 0 8
35041: PPUSH
35042: LD_VAR 0 4
35046: PPUSH
35047: CALL_OW 380
// end else
35051: GO 35070
// PrepareHuman ( false , i , skill ) ;
35053: LD_INT 0
35055: PPUSH
35056: LD_VAR 0 8
35060: PPUSH
35061: LD_VAR 0 4
35065: PPUSH
35066: CALL_OW 380
// un := CreateHuman ;
35070: LD_ADDR_VAR 0 14
35074: PUSH
35075: CALL_OW 44
35079: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35080: LD_ADDR_VAR 0 7
35084: PUSH
35085: LD_VAR 0 7
35089: PPUSH
35090: LD_INT 1
35092: PPUSH
35093: LD_VAR 0 14
35097: PPUSH
35098: CALL_OW 2
35102: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35103: LD_VAR 0 14
35107: PPUSH
35108: LD_VAR 0 12
35112: PUSH
35113: LD_INT 1
35115: ARRAY
35116: PPUSH
35117: CALL_OW 52
// end ;
35121: GO 34760
35123: POP
35124: POP
// end ;
35125: GO 34062
35127: POP
35128: POP
// result := result ^ buildings ;
35129: LD_ADDR_VAR 0 7
35133: PUSH
35134: LD_VAR 0 7
35138: PUSH
35139: LD_VAR 0 18
35143: ADD
35144: ST_TO_ADDR
// end else
35145: GO 35288
// begin for i = 1 to personel do
35147: LD_ADDR_VAR 0 8
35151: PUSH
35152: DOUBLE
35153: LD_INT 1
35155: DEC
35156: ST_TO_ADDR
35157: LD_VAR 0 6
35161: PUSH
35162: FOR_TO
35163: IFFALSE 35286
// begin if i > 4 then
35165: LD_VAR 0 8
35169: PUSH
35170: LD_INT 4
35172: GREATER
35173: IFFALSE 35177
// break ;
35175: GO 35286
// x := personel [ i ] ;
35177: LD_ADDR_VAR 0 13
35181: PUSH
35182: LD_VAR 0 6
35186: PUSH
35187: LD_VAR 0 8
35191: ARRAY
35192: ST_TO_ADDR
// if x = - 1 then
35193: LD_VAR 0 13
35197: PUSH
35198: LD_INT 1
35200: NEG
35201: EQUAL
35202: IFFALSE 35206
// continue ;
35204: GO 35162
// PrepareHuman ( false , i , skill ) ;
35206: LD_INT 0
35208: PPUSH
35209: LD_VAR 0 8
35213: PPUSH
35214: LD_VAR 0 4
35218: PPUSH
35219: CALL_OW 380
// un := CreateHuman ;
35223: LD_ADDR_VAR 0 14
35227: PUSH
35228: CALL_OW 44
35232: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35233: LD_VAR 0 14
35237: PPUSH
35238: LD_VAR 0 1
35242: PPUSH
35243: CALL_OW 250
35247: PPUSH
35248: LD_VAR 0 1
35252: PPUSH
35253: CALL_OW 251
35257: PPUSH
35258: LD_INT 10
35260: PPUSH
35261: LD_INT 0
35263: PPUSH
35264: CALL_OW 50
// result := result ^ un ;
35268: LD_ADDR_VAR 0 7
35272: PUSH
35273: LD_VAR 0 7
35277: PUSH
35278: LD_VAR 0 14
35282: ADD
35283: ST_TO_ADDR
// end ;
35284: GO 35162
35286: POP
35287: POP
// end ; end ;
35288: LD_VAR 0 7
35292: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35293: LD_INT 0
35295: PPUSH
35296: PPUSH
35297: PPUSH
35298: PPUSH
35299: PPUSH
35300: PPUSH
35301: PPUSH
35302: PPUSH
35303: PPUSH
35304: PPUSH
35305: PPUSH
35306: PPUSH
35307: PPUSH
35308: PPUSH
35309: PPUSH
35310: PPUSH
// result := false ;
35311: LD_ADDR_VAR 0 3
35315: PUSH
35316: LD_INT 0
35318: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35319: LD_VAR 0 1
35323: NOT
35324: PUSH
35325: LD_VAR 0 1
35329: PPUSH
35330: CALL_OW 266
35334: PUSH
35335: LD_INT 32
35337: PUSH
35338: LD_INT 33
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: IN
35345: NOT
35346: OR
35347: IFFALSE 35351
// exit ;
35349: GO 36460
// nat := GetNation ( tower ) ;
35351: LD_ADDR_VAR 0 12
35355: PUSH
35356: LD_VAR 0 1
35360: PPUSH
35361: CALL_OW 248
35365: ST_TO_ADDR
// side := GetSide ( tower ) ;
35366: LD_ADDR_VAR 0 16
35370: PUSH
35371: LD_VAR 0 1
35375: PPUSH
35376: CALL_OW 255
35380: ST_TO_ADDR
// x := GetX ( tower ) ;
35381: LD_ADDR_VAR 0 10
35385: PUSH
35386: LD_VAR 0 1
35390: PPUSH
35391: CALL_OW 250
35395: ST_TO_ADDR
// y := GetY ( tower ) ;
35396: LD_ADDR_VAR 0 11
35400: PUSH
35401: LD_VAR 0 1
35405: PPUSH
35406: CALL_OW 251
35410: ST_TO_ADDR
// if not x or not y then
35411: LD_VAR 0 10
35415: NOT
35416: PUSH
35417: LD_VAR 0 11
35421: NOT
35422: OR
35423: IFFALSE 35427
// exit ;
35425: GO 36460
// weapon := 0 ;
35427: LD_ADDR_VAR 0 18
35431: PUSH
35432: LD_INT 0
35434: ST_TO_ADDR
// fac_list := [ ] ;
35435: LD_ADDR_VAR 0 17
35439: PUSH
35440: EMPTY
35441: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35442: LD_ADDR_VAR 0 6
35446: PUSH
35447: LD_VAR 0 1
35451: PPUSH
35452: CALL_OW 274
35456: PPUSH
35457: LD_VAR 0 2
35461: PPUSH
35462: LD_INT 0
35464: PPUSH
35465: CALL 33031 0 3
35469: PPUSH
35470: LD_INT 30
35472: PUSH
35473: LD_INT 3
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PPUSH
35480: CALL_OW 72
35484: ST_TO_ADDR
// if not factories then
35485: LD_VAR 0 6
35489: NOT
35490: IFFALSE 35494
// exit ;
35492: GO 36460
// for i in factories do
35494: LD_ADDR_VAR 0 8
35498: PUSH
35499: LD_VAR 0 6
35503: PUSH
35504: FOR_IN
35505: IFFALSE 35530
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35507: LD_ADDR_VAR 0 17
35511: PUSH
35512: LD_VAR 0 17
35516: PUSH
35517: LD_VAR 0 8
35521: PPUSH
35522: CALL_OW 478
35526: UNION
35527: ST_TO_ADDR
35528: GO 35504
35530: POP
35531: POP
// if not fac_list then
35532: LD_VAR 0 17
35536: NOT
35537: IFFALSE 35541
// exit ;
35539: GO 36460
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35541: LD_ADDR_VAR 0 5
35545: PUSH
35546: LD_INT 4
35548: PUSH
35549: LD_INT 5
35551: PUSH
35552: LD_INT 9
35554: PUSH
35555: LD_INT 10
35557: PUSH
35558: LD_INT 6
35560: PUSH
35561: LD_INT 7
35563: PUSH
35564: LD_INT 11
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 27
35578: PUSH
35579: LD_INT 28
35581: PUSH
35582: LD_INT 26
35584: PUSH
35585: LD_INT 30
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 43
35596: PUSH
35597: LD_INT 44
35599: PUSH
35600: LD_INT 46
35602: PUSH
35603: LD_INT 45
35605: PUSH
35606: LD_INT 47
35608: PUSH
35609: LD_INT 49
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: LIST
35624: PUSH
35625: LD_VAR 0 12
35629: ARRAY
35630: ST_TO_ADDR
// list := list isect fac_list ;
35631: LD_ADDR_VAR 0 5
35635: PUSH
35636: LD_VAR 0 5
35640: PUSH
35641: LD_VAR 0 17
35645: ISECT
35646: ST_TO_ADDR
// if not list then
35647: LD_VAR 0 5
35651: NOT
35652: IFFALSE 35656
// exit ;
35654: GO 36460
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35656: LD_VAR 0 12
35660: PUSH
35661: LD_INT 3
35663: EQUAL
35664: PUSH
35665: LD_INT 49
35667: PUSH
35668: LD_VAR 0 5
35672: IN
35673: AND
35674: PUSH
35675: LD_INT 31
35677: PPUSH
35678: LD_VAR 0 16
35682: PPUSH
35683: CALL_OW 321
35687: PUSH
35688: LD_INT 2
35690: EQUAL
35691: AND
35692: IFFALSE 35752
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35694: LD_INT 22
35696: PUSH
35697: LD_VAR 0 16
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 35
35708: PUSH
35709: LD_INT 49
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 91
35718: PUSH
35719: LD_VAR 0 1
35723: PUSH
35724: LD_INT 10
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: LIST
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: LIST
35736: PPUSH
35737: CALL_OW 69
35741: NOT
35742: IFFALSE 35752
// weapon := ru_time_lapser ;
35744: LD_ADDR_VAR 0 18
35748: PUSH
35749: LD_INT 49
35751: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35752: LD_VAR 0 12
35756: PUSH
35757: LD_INT 1
35759: PUSH
35760: LD_INT 2
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: IN
35767: PUSH
35768: LD_INT 11
35770: PUSH
35771: LD_VAR 0 5
35775: IN
35776: PUSH
35777: LD_INT 30
35779: PUSH
35780: LD_VAR 0 5
35784: IN
35785: OR
35786: AND
35787: PUSH
35788: LD_INT 6
35790: PPUSH
35791: LD_VAR 0 16
35795: PPUSH
35796: CALL_OW 321
35800: PUSH
35801: LD_INT 2
35803: EQUAL
35804: AND
35805: IFFALSE 35970
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35807: LD_INT 22
35809: PUSH
35810: LD_VAR 0 16
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 2
35821: PUSH
35822: LD_INT 35
35824: PUSH
35825: LD_INT 11
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 35
35834: PUSH
35835: LD_INT 30
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 91
35849: PUSH
35850: LD_VAR 0 1
35854: PUSH
35855: LD_INT 18
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: LIST
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: LIST
35867: PPUSH
35868: CALL_OW 69
35872: NOT
35873: PUSH
35874: LD_INT 22
35876: PUSH
35877: LD_VAR 0 16
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 2
35888: PUSH
35889: LD_INT 30
35891: PUSH
35892: LD_INT 32
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 30
35901: PUSH
35902: LD_INT 33
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 91
35916: PUSH
35917: LD_VAR 0 1
35921: PUSH
35922: LD_INT 12
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: LIST
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: LIST
35934: PUSH
35935: EMPTY
35936: LIST
35937: PPUSH
35938: CALL_OW 69
35942: PUSH
35943: LD_INT 2
35945: GREATER
35946: AND
35947: IFFALSE 35970
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35949: LD_ADDR_VAR 0 18
35953: PUSH
35954: LD_INT 11
35956: PUSH
35957: LD_INT 30
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_VAR 0 12
35968: ARRAY
35969: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35970: LD_VAR 0 18
35974: NOT
35975: PUSH
35976: LD_INT 40
35978: PPUSH
35979: LD_VAR 0 16
35983: PPUSH
35984: CALL_OW 321
35988: PUSH
35989: LD_INT 2
35991: EQUAL
35992: AND
35993: PUSH
35994: LD_INT 7
35996: PUSH
35997: LD_VAR 0 5
36001: IN
36002: PUSH
36003: LD_INT 28
36005: PUSH
36006: LD_VAR 0 5
36010: IN
36011: OR
36012: PUSH
36013: LD_INT 45
36015: PUSH
36016: LD_VAR 0 5
36020: IN
36021: OR
36022: AND
36023: IFFALSE 36277
// begin hex := GetHexInfo ( x , y ) ;
36025: LD_ADDR_VAR 0 4
36029: PUSH
36030: LD_VAR 0 10
36034: PPUSH
36035: LD_VAR 0 11
36039: PPUSH
36040: CALL_OW 546
36044: ST_TO_ADDR
// if hex [ 1 ] then
36045: LD_VAR 0 4
36049: PUSH
36050: LD_INT 1
36052: ARRAY
36053: IFFALSE 36057
// exit ;
36055: GO 36460
// height := hex [ 2 ] ;
36057: LD_ADDR_VAR 0 15
36061: PUSH
36062: LD_VAR 0 4
36066: PUSH
36067: LD_INT 2
36069: ARRAY
36070: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36071: LD_ADDR_VAR 0 14
36075: PUSH
36076: LD_INT 0
36078: PUSH
36079: LD_INT 2
36081: PUSH
36082: LD_INT 3
36084: PUSH
36085: LD_INT 5
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: ST_TO_ADDR
// for i in tmp do
36094: LD_ADDR_VAR 0 8
36098: PUSH
36099: LD_VAR 0 14
36103: PUSH
36104: FOR_IN
36105: IFFALSE 36275
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36107: LD_ADDR_VAR 0 9
36111: PUSH
36112: LD_VAR 0 10
36116: PPUSH
36117: LD_VAR 0 8
36121: PPUSH
36122: LD_INT 5
36124: PPUSH
36125: CALL_OW 272
36129: PUSH
36130: LD_VAR 0 11
36134: PPUSH
36135: LD_VAR 0 8
36139: PPUSH
36140: LD_INT 5
36142: PPUSH
36143: CALL_OW 273
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36152: LD_VAR 0 9
36156: PUSH
36157: LD_INT 1
36159: ARRAY
36160: PPUSH
36161: LD_VAR 0 9
36165: PUSH
36166: LD_INT 2
36168: ARRAY
36169: PPUSH
36170: CALL_OW 488
36174: IFFALSE 36273
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36176: LD_ADDR_VAR 0 4
36180: PUSH
36181: LD_VAR 0 9
36185: PUSH
36186: LD_INT 1
36188: ARRAY
36189: PPUSH
36190: LD_VAR 0 9
36194: PUSH
36195: LD_INT 2
36197: ARRAY
36198: PPUSH
36199: CALL_OW 546
36203: ST_TO_ADDR
// if hex [ 1 ] then
36204: LD_VAR 0 4
36208: PUSH
36209: LD_INT 1
36211: ARRAY
36212: IFFALSE 36216
// continue ;
36214: GO 36104
// h := hex [ 2 ] ;
36216: LD_ADDR_VAR 0 13
36220: PUSH
36221: LD_VAR 0 4
36225: PUSH
36226: LD_INT 2
36228: ARRAY
36229: ST_TO_ADDR
// if h + 7 < height then
36230: LD_VAR 0 13
36234: PUSH
36235: LD_INT 7
36237: PLUS
36238: PUSH
36239: LD_VAR 0 15
36243: LESS
36244: IFFALSE 36273
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36246: LD_ADDR_VAR 0 18
36250: PUSH
36251: LD_INT 7
36253: PUSH
36254: LD_INT 28
36256: PUSH
36257: LD_INT 45
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: LIST
36264: PUSH
36265: LD_VAR 0 12
36269: ARRAY
36270: ST_TO_ADDR
// break ;
36271: GO 36275
// end ; end ; end ;
36273: GO 36104
36275: POP
36276: POP
// end ; if not weapon then
36277: LD_VAR 0 18
36281: NOT
36282: IFFALSE 36342
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36284: LD_ADDR_VAR 0 5
36288: PUSH
36289: LD_VAR 0 5
36293: PUSH
36294: LD_INT 11
36296: PUSH
36297: LD_INT 30
36299: PUSH
36300: LD_INT 49
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: LIST
36307: DIFF
36308: ST_TO_ADDR
// if not list then
36309: LD_VAR 0 5
36313: NOT
36314: IFFALSE 36318
// exit ;
36316: GO 36460
// weapon := list [ rand ( 1 , list ) ] ;
36318: LD_ADDR_VAR 0 18
36322: PUSH
36323: LD_VAR 0 5
36327: PUSH
36328: LD_INT 1
36330: PPUSH
36331: LD_VAR 0 5
36335: PPUSH
36336: CALL_OW 12
36340: ARRAY
36341: ST_TO_ADDR
// end ; if weapon then
36342: LD_VAR 0 18
36346: IFFALSE 36460
// begin tmp := CostOfWeapon ( weapon ) ;
36348: LD_ADDR_VAR 0 14
36352: PUSH
36353: LD_VAR 0 18
36357: PPUSH
36358: CALL_OW 451
36362: ST_TO_ADDR
// j := GetBase ( tower ) ;
36363: LD_ADDR_VAR 0 9
36367: PUSH
36368: LD_VAR 0 1
36372: PPUSH
36373: CALL_OW 274
36377: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36378: LD_VAR 0 9
36382: PPUSH
36383: LD_INT 1
36385: PPUSH
36386: CALL_OW 275
36390: PUSH
36391: LD_VAR 0 14
36395: PUSH
36396: LD_INT 1
36398: ARRAY
36399: GREATEREQUAL
36400: PUSH
36401: LD_VAR 0 9
36405: PPUSH
36406: LD_INT 2
36408: PPUSH
36409: CALL_OW 275
36413: PUSH
36414: LD_VAR 0 14
36418: PUSH
36419: LD_INT 2
36421: ARRAY
36422: GREATEREQUAL
36423: AND
36424: PUSH
36425: LD_VAR 0 9
36429: PPUSH
36430: LD_INT 3
36432: PPUSH
36433: CALL_OW 275
36437: PUSH
36438: LD_VAR 0 14
36442: PUSH
36443: LD_INT 3
36445: ARRAY
36446: GREATEREQUAL
36447: AND
36448: IFFALSE 36460
// result := weapon ;
36450: LD_ADDR_VAR 0 3
36454: PUSH
36455: LD_VAR 0 18
36459: ST_TO_ADDR
// end ; end ;
36460: LD_VAR 0 3
36464: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36465: LD_INT 0
36467: PPUSH
36468: PPUSH
// result := true ;
36469: LD_ADDR_VAR 0 3
36473: PUSH
36474: LD_INT 1
36476: ST_TO_ADDR
// if array1 = array2 then
36477: LD_VAR 0 1
36481: PUSH
36482: LD_VAR 0 2
36486: EQUAL
36487: IFFALSE 36547
// begin for i = 1 to array1 do
36489: LD_ADDR_VAR 0 4
36493: PUSH
36494: DOUBLE
36495: LD_INT 1
36497: DEC
36498: ST_TO_ADDR
36499: LD_VAR 0 1
36503: PUSH
36504: FOR_TO
36505: IFFALSE 36543
// if array1 [ i ] <> array2 [ i ] then
36507: LD_VAR 0 1
36511: PUSH
36512: LD_VAR 0 4
36516: ARRAY
36517: PUSH
36518: LD_VAR 0 2
36522: PUSH
36523: LD_VAR 0 4
36527: ARRAY
36528: NONEQUAL
36529: IFFALSE 36541
// begin result := false ;
36531: LD_ADDR_VAR 0 3
36535: PUSH
36536: LD_INT 0
36538: ST_TO_ADDR
// break ;
36539: GO 36543
// end ;
36541: GO 36504
36543: POP
36544: POP
// end else
36545: GO 36555
// result := false ;
36547: LD_ADDR_VAR 0 3
36551: PUSH
36552: LD_INT 0
36554: ST_TO_ADDR
// end ;
36555: LD_VAR 0 3
36559: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36560: LD_INT 0
36562: PPUSH
36563: PPUSH
// if not array1 or not array2 then
36564: LD_VAR 0 1
36568: NOT
36569: PUSH
36570: LD_VAR 0 2
36574: NOT
36575: OR
36576: IFFALSE 36580
// exit ;
36578: GO 36644
// result := true ;
36580: LD_ADDR_VAR 0 3
36584: PUSH
36585: LD_INT 1
36587: ST_TO_ADDR
// for i = 1 to array1 do
36588: LD_ADDR_VAR 0 4
36592: PUSH
36593: DOUBLE
36594: LD_INT 1
36596: DEC
36597: ST_TO_ADDR
36598: LD_VAR 0 1
36602: PUSH
36603: FOR_TO
36604: IFFALSE 36642
// if array1 [ i ] <> array2 [ i ] then
36606: LD_VAR 0 1
36610: PUSH
36611: LD_VAR 0 4
36615: ARRAY
36616: PUSH
36617: LD_VAR 0 2
36621: PUSH
36622: LD_VAR 0 4
36626: ARRAY
36627: NONEQUAL
36628: IFFALSE 36640
// begin result := false ;
36630: LD_ADDR_VAR 0 3
36634: PUSH
36635: LD_INT 0
36637: ST_TO_ADDR
// break ;
36638: GO 36642
// end ;
36640: GO 36603
36642: POP
36643: POP
// end ;
36644: LD_VAR 0 3
36648: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36649: LD_INT 0
36651: PPUSH
36652: PPUSH
36653: PPUSH
// pom := GetBase ( fac ) ;
36654: LD_ADDR_VAR 0 5
36658: PUSH
36659: LD_VAR 0 1
36663: PPUSH
36664: CALL_OW 274
36668: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36669: LD_ADDR_VAR 0 4
36673: PUSH
36674: LD_VAR 0 2
36678: PUSH
36679: LD_INT 1
36681: ARRAY
36682: PPUSH
36683: LD_VAR 0 2
36687: PUSH
36688: LD_INT 2
36690: ARRAY
36691: PPUSH
36692: LD_VAR 0 2
36696: PUSH
36697: LD_INT 3
36699: ARRAY
36700: PPUSH
36701: LD_VAR 0 2
36705: PUSH
36706: LD_INT 4
36708: ARRAY
36709: PPUSH
36710: CALL_OW 449
36714: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36715: LD_ADDR_VAR 0 3
36719: PUSH
36720: LD_VAR 0 5
36724: PPUSH
36725: LD_INT 1
36727: PPUSH
36728: CALL_OW 275
36732: PUSH
36733: LD_VAR 0 4
36737: PUSH
36738: LD_INT 1
36740: ARRAY
36741: GREATEREQUAL
36742: PUSH
36743: LD_VAR 0 5
36747: PPUSH
36748: LD_INT 2
36750: PPUSH
36751: CALL_OW 275
36755: PUSH
36756: LD_VAR 0 4
36760: PUSH
36761: LD_INT 2
36763: ARRAY
36764: GREATEREQUAL
36765: AND
36766: PUSH
36767: LD_VAR 0 5
36771: PPUSH
36772: LD_INT 3
36774: PPUSH
36775: CALL_OW 275
36779: PUSH
36780: LD_VAR 0 4
36784: PUSH
36785: LD_INT 3
36787: ARRAY
36788: GREATEREQUAL
36789: AND
36790: ST_TO_ADDR
// end ;
36791: LD_VAR 0 3
36795: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36796: LD_INT 0
36798: PPUSH
36799: PPUSH
36800: PPUSH
36801: PPUSH
// pom := GetBase ( building ) ;
36802: LD_ADDR_VAR 0 3
36806: PUSH
36807: LD_VAR 0 1
36811: PPUSH
36812: CALL_OW 274
36816: ST_TO_ADDR
// if not pom then
36817: LD_VAR 0 3
36821: NOT
36822: IFFALSE 36826
// exit ;
36824: GO 36996
// btype := GetBType ( building ) ;
36826: LD_ADDR_VAR 0 5
36830: PUSH
36831: LD_VAR 0 1
36835: PPUSH
36836: CALL_OW 266
36840: ST_TO_ADDR
// if btype = b_armoury then
36841: LD_VAR 0 5
36845: PUSH
36846: LD_INT 4
36848: EQUAL
36849: IFFALSE 36859
// btype := b_barracks ;
36851: LD_ADDR_VAR 0 5
36855: PUSH
36856: LD_INT 5
36858: ST_TO_ADDR
// if btype = b_depot then
36859: LD_VAR 0 5
36863: PUSH
36864: LD_INT 0
36866: EQUAL
36867: IFFALSE 36877
// btype := b_warehouse ;
36869: LD_ADDR_VAR 0 5
36873: PUSH
36874: LD_INT 1
36876: ST_TO_ADDR
// if btype = b_workshop then
36877: LD_VAR 0 5
36881: PUSH
36882: LD_INT 2
36884: EQUAL
36885: IFFALSE 36895
// btype := b_factory ;
36887: LD_ADDR_VAR 0 5
36891: PUSH
36892: LD_INT 3
36894: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36895: LD_ADDR_VAR 0 4
36899: PUSH
36900: LD_VAR 0 5
36904: PPUSH
36905: LD_VAR 0 1
36909: PPUSH
36910: CALL_OW 248
36914: PPUSH
36915: CALL_OW 450
36919: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36920: LD_ADDR_VAR 0 2
36924: PUSH
36925: LD_VAR 0 3
36929: PPUSH
36930: LD_INT 1
36932: PPUSH
36933: CALL_OW 275
36937: PUSH
36938: LD_VAR 0 4
36942: PUSH
36943: LD_INT 1
36945: ARRAY
36946: GREATEREQUAL
36947: PUSH
36948: LD_VAR 0 3
36952: PPUSH
36953: LD_INT 2
36955: PPUSH
36956: CALL_OW 275
36960: PUSH
36961: LD_VAR 0 4
36965: PUSH
36966: LD_INT 2
36968: ARRAY
36969: GREATEREQUAL
36970: AND
36971: PUSH
36972: LD_VAR 0 3
36976: PPUSH
36977: LD_INT 3
36979: PPUSH
36980: CALL_OW 275
36984: PUSH
36985: LD_VAR 0 4
36989: PUSH
36990: LD_INT 3
36992: ARRAY
36993: GREATEREQUAL
36994: AND
36995: ST_TO_ADDR
// end ;
36996: LD_VAR 0 2
37000: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37001: LD_INT 0
37003: PPUSH
37004: PPUSH
37005: PPUSH
// pom := GetBase ( building ) ;
37006: LD_ADDR_VAR 0 4
37010: PUSH
37011: LD_VAR 0 1
37015: PPUSH
37016: CALL_OW 274
37020: ST_TO_ADDR
// if not pom then
37021: LD_VAR 0 4
37025: NOT
37026: IFFALSE 37030
// exit ;
37028: GO 37131
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37030: LD_ADDR_VAR 0 5
37034: PUSH
37035: LD_VAR 0 2
37039: PPUSH
37040: LD_VAR 0 1
37044: PPUSH
37045: CALL_OW 248
37049: PPUSH
37050: CALL_OW 450
37054: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37055: LD_ADDR_VAR 0 3
37059: PUSH
37060: LD_VAR 0 4
37064: PPUSH
37065: LD_INT 1
37067: PPUSH
37068: CALL_OW 275
37072: PUSH
37073: LD_VAR 0 5
37077: PUSH
37078: LD_INT 1
37080: ARRAY
37081: GREATEREQUAL
37082: PUSH
37083: LD_VAR 0 4
37087: PPUSH
37088: LD_INT 2
37090: PPUSH
37091: CALL_OW 275
37095: PUSH
37096: LD_VAR 0 5
37100: PUSH
37101: LD_INT 2
37103: ARRAY
37104: GREATEREQUAL
37105: AND
37106: PUSH
37107: LD_VAR 0 4
37111: PPUSH
37112: LD_INT 3
37114: PPUSH
37115: CALL_OW 275
37119: PUSH
37120: LD_VAR 0 5
37124: PUSH
37125: LD_INT 3
37127: ARRAY
37128: GREATEREQUAL
37129: AND
37130: ST_TO_ADDR
// end ;
37131: LD_VAR 0 3
37135: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37136: LD_INT 0
37138: PPUSH
37139: PPUSH
37140: PPUSH
37141: PPUSH
37142: PPUSH
37143: PPUSH
37144: PPUSH
37145: PPUSH
37146: PPUSH
37147: PPUSH
37148: PPUSH
// result := false ;
37149: LD_ADDR_VAR 0 8
37153: PUSH
37154: LD_INT 0
37156: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37157: LD_VAR 0 5
37161: NOT
37162: PUSH
37163: LD_VAR 0 1
37167: NOT
37168: OR
37169: PUSH
37170: LD_VAR 0 2
37174: NOT
37175: OR
37176: PUSH
37177: LD_VAR 0 3
37181: NOT
37182: OR
37183: IFFALSE 37187
// exit ;
37185: GO 38001
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37187: LD_ADDR_VAR 0 14
37191: PUSH
37192: LD_VAR 0 1
37196: PPUSH
37197: LD_VAR 0 2
37201: PPUSH
37202: LD_VAR 0 3
37206: PPUSH
37207: LD_VAR 0 4
37211: PPUSH
37212: LD_VAR 0 5
37216: PUSH
37217: LD_INT 1
37219: ARRAY
37220: PPUSH
37221: CALL_OW 248
37225: PPUSH
37226: LD_INT 0
37228: PPUSH
37229: CALL 39238 0 6
37233: ST_TO_ADDR
// if not hexes then
37234: LD_VAR 0 14
37238: NOT
37239: IFFALSE 37243
// exit ;
37241: GO 38001
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37243: LD_ADDR_VAR 0 17
37247: PUSH
37248: LD_VAR 0 5
37252: PPUSH
37253: LD_INT 22
37255: PUSH
37256: LD_VAR 0 13
37260: PPUSH
37261: CALL_OW 255
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 2
37272: PUSH
37273: LD_INT 30
37275: PUSH
37276: LD_INT 0
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 30
37285: PUSH
37286: LD_INT 1
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: LIST
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PPUSH
37302: CALL_OW 72
37306: ST_TO_ADDR
// for i = 1 to hexes do
37307: LD_ADDR_VAR 0 9
37311: PUSH
37312: DOUBLE
37313: LD_INT 1
37315: DEC
37316: ST_TO_ADDR
37317: LD_VAR 0 14
37321: PUSH
37322: FOR_TO
37323: IFFALSE 37999
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37325: LD_ADDR_VAR 0 13
37329: PUSH
37330: LD_VAR 0 14
37334: PUSH
37335: LD_VAR 0 9
37339: ARRAY
37340: PUSH
37341: LD_INT 1
37343: ARRAY
37344: PPUSH
37345: LD_VAR 0 14
37349: PUSH
37350: LD_VAR 0 9
37354: ARRAY
37355: PUSH
37356: LD_INT 2
37358: ARRAY
37359: PPUSH
37360: CALL_OW 428
37364: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37365: LD_VAR 0 14
37369: PUSH
37370: LD_VAR 0 9
37374: ARRAY
37375: PUSH
37376: LD_INT 1
37378: ARRAY
37379: PPUSH
37380: LD_VAR 0 14
37384: PUSH
37385: LD_VAR 0 9
37389: ARRAY
37390: PUSH
37391: LD_INT 2
37393: ARRAY
37394: PPUSH
37395: CALL_OW 351
37399: PUSH
37400: LD_VAR 0 14
37404: PUSH
37405: LD_VAR 0 9
37409: ARRAY
37410: PUSH
37411: LD_INT 1
37413: ARRAY
37414: PPUSH
37415: LD_VAR 0 14
37419: PUSH
37420: LD_VAR 0 9
37424: ARRAY
37425: PUSH
37426: LD_INT 2
37428: ARRAY
37429: PPUSH
37430: CALL_OW 488
37434: NOT
37435: OR
37436: PUSH
37437: LD_VAR 0 13
37441: PPUSH
37442: CALL_OW 247
37446: PUSH
37447: LD_INT 3
37449: EQUAL
37450: OR
37451: IFFALSE 37457
// exit ;
37453: POP
37454: POP
37455: GO 38001
// if not tmp then
37457: LD_VAR 0 13
37461: NOT
37462: IFFALSE 37466
// continue ;
37464: GO 37322
// result := true ;
37466: LD_ADDR_VAR 0 8
37470: PUSH
37471: LD_INT 1
37473: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37474: LD_VAR 0 6
37478: PUSH
37479: LD_VAR 0 13
37483: PPUSH
37484: CALL_OW 247
37488: PUSH
37489: LD_INT 2
37491: EQUAL
37492: AND
37493: PUSH
37494: LD_VAR 0 13
37498: PPUSH
37499: CALL_OW 263
37503: PUSH
37504: LD_INT 1
37506: EQUAL
37507: AND
37508: IFFALSE 37672
// begin if IsDrivenBy ( tmp ) then
37510: LD_VAR 0 13
37514: PPUSH
37515: CALL_OW 311
37519: IFFALSE 37523
// continue ;
37521: GO 37322
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37523: LD_VAR 0 6
37527: PPUSH
37528: LD_INT 3
37530: PUSH
37531: LD_INT 60
37533: PUSH
37534: EMPTY
37535: LIST
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: LD_INT 3
37543: PUSH
37544: LD_INT 55
37546: PUSH
37547: EMPTY
37548: LIST
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PPUSH
37558: CALL_OW 72
37562: IFFALSE 37670
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37564: LD_ADDR_VAR 0 18
37568: PUSH
37569: LD_VAR 0 6
37573: PPUSH
37574: LD_INT 3
37576: PUSH
37577: LD_INT 60
37579: PUSH
37580: EMPTY
37581: LIST
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 3
37589: PUSH
37590: LD_INT 55
37592: PUSH
37593: EMPTY
37594: LIST
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PPUSH
37604: CALL_OW 72
37608: PUSH
37609: LD_INT 1
37611: ARRAY
37612: ST_TO_ADDR
// if IsInUnit ( driver ) then
37613: LD_VAR 0 18
37617: PPUSH
37618: CALL_OW 310
37622: IFFALSE 37633
// ComExit ( driver ) ;
37624: LD_VAR 0 18
37628: PPUSH
37629: CALL 62366 0 1
// AddComEnterUnit ( driver , tmp ) ;
37633: LD_VAR 0 18
37637: PPUSH
37638: LD_VAR 0 13
37642: PPUSH
37643: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37647: LD_VAR 0 18
37651: PPUSH
37652: LD_VAR 0 7
37656: PPUSH
37657: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37661: LD_VAR 0 18
37665: PPUSH
37666: CALL_OW 181
// end ; continue ;
37670: GO 37322
// end ; if not cleaners or not tmp in cleaners then
37672: LD_VAR 0 6
37676: NOT
37677: PUSH
37678: LD_VAR 0 13
37682: PUSH
37683: LD_VAR 0 6
37687: IN
37688: NOT
37689: OR
37690: IFFALSE 37997
// begin if dep then
37692: LD_VAR 0 17
37696: IFFALSE 37832
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37698: LD_ADDR_VAR 0 16
37702: PUSH
37703: LD_VAR 0 17
37707: PUSH
37708: LD_INT 1
37710: ARRAY
37711: PPUSH
37712: CALL_OW 250
37716: PPUSH
37717: LD_VAR 0 17
37721: PUSH
37722: LD_INT 1
37724: ARRAY
37725: PPUSH
37726: CALL_OW 254
37730: PPUSH
37731: LD_INT 5
37733: PPUSH
37734: CALL_OW 272
37738: PUSH
37739: LD_VAR 0 17
37743: PUSH
37744: LD_INT 1
37746: ARRAY
37747: PPUSH
37748: CALL_OW 251
37752: PPUSH
37753: LD_VAR 0 17
37757: PUSH
37758: LD_INT 1
37760: ARRAY
37761: PPUSH
37762: CALL_OW 254
37766: PPUSH
37767: LD_INT 5
37769: PPUSH
37770: CALL_OW 273
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37779: LD_VAR 0 16
37783: PUSH
37784: LD_INT 1
37786: ARRAY
37787: PPUSH
37788: LD_VAR 0 16
37792: PUSH
37793: LD_INT 2
37795: ARRAY
37796: PPUSH
37797: CALL_OW 488
37801: IFFALSE 37832
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37803: LD_VAR 0 13
37807: PPUSH
37808: LD_VAR 0 16
37812: PUSH
37813: LD_INT 1
37815: ARRAY
37816: PPUSH
37817: LD_VAR 0 16
37821: PUSH
37822: LD_INT 2
37824: ARRAY
37825: PPUSH
37826: CALL_OW 111
// continue ;
37830: GO 37322
// end ; end ; r := GetDir ( tmp ) ;
37832: LD_ADDR_VAR 0 15
37836: PUSH
37837: LD_VAR 0 13
37841: PPUSH
37842: CALL_OW 254
37846: ST_TO_ADDR
// if r = 5 then
37847: LD_VAR 0 15
37851: PUSH
37852: LD_INT 5
37854: EQUAL
37855: IFFALSE 37865
// r := 0 ;
37857: LD_ADDR_VAR 0 15
37861: PUSH
37862: LD_INT 0
37864: ST_TO_ADDR
// for j = r to 5 do
37865: LD_ADDR_VAR 0 10
37869: PUSH
37870: DOUBLE
37871: LD_VAR 0 15
37875: DEC
37876: ST_TO_ADDR
37877: LD_INT 5
37879: PUSH
37880: FOR_TO
37881: IFFALSE 37995
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37883: LD_ADDR_VAR 0 11
37887: PUSH
37888: LD_VAR 0 13
37892: PPUSH
37893: CALL_OW 250
37897: PPUSH
37898: LD_VAR 0 10
37902: PPUSH
37903: LD_INT 2
37905: PPUSH
37906: CALL_OW 272
37910: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37911: LD_ADDR_VAR 0 12
37915: PUSH
37916: LD_VAR 0 13
37920: PPUSH
37921: CALL_OW 251
37925: PPUSH
37926: LD_VAR 0 10
37930: PPUSH
37931: LD_INT 2
37933: PPUSH
37934: CALL_OW 273
37938: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37939: LD_VAR 0 11
37943: PPUSH
37944: LD_VAR 0 12
37948: PPUSH
37949: CALL_OW 488
37953: PUSH
37954: LD_VAR 0 11
37958: PPUSH
37959: LD_VAR 0 12
37963: PPUSH
37964: CALL_OW 428
37968: NOT
37969: AND
37970: IFFALSE 37993
// begin ComMoveXY ( tmp , _x , _y ) ;
37972: LD_VAR 0 13
37976: PPUSH
37977: LD_VAR 0 11
37981: PPUSH
37982: LD_VAR 0 12
37986: PPUSH
37987: CALL_OW 111
// break ;
37991: GO 37995
// end ; end ;
37993: GO 37880
37995: POP
37996: POP
// end ; end ;
37997: GO 37322
37999: POP
38000: POP
// end ;
38001: LD_VAR 0 8
38005: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38006: LD_INT 0
38008: PPUSH
// result := true ;
38009: LD_ADDR_VAR 0 3
38013: PUSH
38014: LD_INT 1
38016: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38017: LD_VAR 0 2
38021: PUSH
38022: LD_INT 24
38024: DOUBLE
38025: EQUAL
38026: IFTRUE 38036
38028: LD_INT 33
38030: DOUBLE
38031: EQUAL
38032: IFTRUE 38036
38034: GO 38061
38036: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38037: LD_ADDR_VAR 0 3
38041: PUSH
38042: LD_INT 32
38044: PPUSH
38045: LD_VAR 0 1
38049: PPUSH
38050: CALL_OW 321
38054: PUSH
38055: LD_INT 2
38057: EQUAL
38058: ST_TO_ADDR
38059: GO 38381
38061: LD_INT 20
38063: DOUBLE
38064: EQUAL
38065: IFTRUE 38069
38067: GO 38094
38069: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38070: LD_ADDR_VAR 0 3
38074: PUSH
38075: LD_INT 6
38077: PPUSH
38078: LD_VAR 0 1
38082: PPUSH
38083: CALL_OW 321
38087: PUSH
38088: LD_INT 2
38090: EQUAL
38091: ST_TO_ADDR
38092: GO 38381
38094: LD_INT 22
38096: DOUBLE
38097: EQUAL
38098: IFTRUE 38108
38100: LD_INT 36
38102: DOUBLE
38103: EQUAL
38104: IFTRUE 38108
38106: GO 38133
38108: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38109: LD_ADDR_VAR 0 3
38113: PUSH
38114: LD_INT 15
38116: PPUSH
38117: LD_VAR 0 1
38121: PPUSH
38122: CALL_OW 321
38126: PUSH
38127: LD_INT 2
38129: EQUAL
38130: ST_TO_ADDR
38131: GO 38381
38133: LD_INT 30
38135: DOUBLE
38136: EQUAL
38137: IFTRUE 38141
38139: GO 38166
38141: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38142: LD_ADDR_VAR 0 3
38146: PUSH
38147: LD_INT 20
38149: PPUSH
38150: LD_VAR 0 1
38154: PPUSH
38155: CALL_OW 321
38159: PUSH
38160: LD_INT 2
38162: EQUAL
38163: ST_TO_ADDR
38164: GO 38381
38166: LD_INT 28
38168: DOUBLE
38169: EQUAL
38170: IFTRUE 38180
38172: LD_INT 21
38174: DOUBLE
38175: EQUAL
38176: IFTRUE 38180
38178: GO 38205
38180: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38181: LD_ADDR_VAR 0 3
38185: PUSH
38186: LD_INT 21
38188: PPUSH
38189: LD_VAR 0 1
38193: PPUSH
38194: CALL_OW 321
38198: PUSH
38199: LD_INT 2
38201: EQUAL
38202: ST_TO_ADDR
38203: GO 38381
38205: LD_INT 16
38207: DOUBLE
38208: EQUAL
38209: IFTRUE 38213
38211: GO 38240
38213: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38214: LD_ADDR_VAR 0 3
38218: PUSH
38219: LD_EXP 72
38223: PPUSH
38224: LD_VAR 0 1
38228: PPUSH
38229: CALL_OW 321
38233: PUSH
38234: LD_INT 2
38236: EQUAL
38237: ST_TO_ADDR
38238: GO 38381
38240: LD_INT 19
38242: DOUBLE
38243: EQUAL
38244: IFTRUE 38254
38246: LD_INT 23
38248: DOUBLE
38249: EQUAL
38250: IFTRUE 38254
38252: GO 38281
38254: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38255: LD_ADDR_VAR 0 3
38259: PUSH
38260: LD_EXP 71
38264: PPUSH
38265: LD_VAR 0 1
38269: PPUSH
38270: CALL_OW 321
38274: PUSH
38275: LD_INT 2
38277: EQUAL
38278: ST_TO_ADDR
38279: GO 38381
38281: LD_INT 17
38283: DOUBLE
38284: EQUAL
38285: IFTRUE 38289
38287: GO 38314
38289: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38290: LD_ADDR_VAR 0 3
38294: PUSH
38295: LD_INT 39
38297: PPUSH
38298: LD_VAR 0 1
38302: PPUSH
38303: CALL_OW 321
38307: PUSH
38308: LD_INT 2
38310: EQUAL
38311: ST_TO_ADDR
38312: GO 38381
38314: LD_INT 18
38316: DOUBLE
38317: EQUAL
38318: IFTRUE 38322
38320: GO 38347
38322: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38323: LD_ADDR_VAR 0 3
38327: PUSH
38328: LD_INT 40
38330: PPUSH
38331: LD_VAR 0 1
38335: PPUSH
38336: CALL_OW 321
38340: PUSH
38341: LD_INT 2
38343: EQUAL
38344: ST_TO_ADDR
38345: GO 38381
38347: LD_INT 27
38349: DOUBLE
38350: EQUAL
38351: IFTRUE 38355
38353: GO 38380
38355: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38356: LD_ADDR_VAR 0 3
38360: PUSH
38361: LD_INT 35
38363: PPUSH
38364: LD_VAR 0 1
38368: PPUSH
38369: CALL_OW 321
38373: PUSH
38374: LD_INT 2
38376: EQUAL
38377: ST_TO_ADDR
38378: GO 38381
38380: POP
// end ;
38381: LD_VAR 0 3
38385: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38386: LD_INT 0
38388: PPUSH
38389: PPUSH
38390: PPUSH
38391: PPUSH
38392: PPUSH
38393: PPUSH
38394: PPUSH
38395: PPUSH
38396: PPUSH
38397: PPUSH
38398: PPUSH
// result := false ;
38399: LD_ADDR_VAR 0 6
38403: PUSH
38404: LD_INT 0
38406: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38407: LD_VAR 0 1
38411: NOT
38412: PUSH
38413: LD_VAR 0 1
38417: PPUSH
38418: CALL_OW 266
38422: PUSH
38423: LD_INT 0
38425: PUSH
38426: LD_INT 1
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: IN
38433: NOT
38434: OR
38435: PUSH
38436: LD_VAR 0 2
38440: NOT
38441: OR
38442: PUSH
38443: LD_VAR 0 5
38447: PUSH
38448: LD_INT 0
38450: PUSH
38451: LD_INT 1
38453: PUSH
38454: LD_INT 2
38456: PUSH
38457: LD_INT 3
38459: PUSH
38460: LD_INT 4
38462: PUSH
38463: LD_INT 5
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: IN
38474: NOT
38475: OR
38476: PUSH
38477: LD_VAR 0 3
38481: PPUSH
38482: LD_VAR 0 4
38486: PPUSH
38487: CALL_OW 488
38491: NOT
38492: OR
38493: IFFALSE 38497
// exit ;
38495: GO 39233
// side := GetSide ( depot ) ;
38497: LD_ADDR_VAR 0 9
38501: PUSH
38502: LD_VAR 0 1
38506: PPUSH
38507: CALL_OW 255
38511: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38512: LD_VAR 0 9
38516: PPUSH
38517: LD_VAR 0 2
38521: PPUSH
38522: CALL 38006 0 2
38526: NOT
38527: IFFALSE 38531
// exit ;
38529: GO 39233
// pom := GetBase ( depot ) ;
38531: LD_ADDR_VAR 0 10
38535: PUSH
38536: LD_VAR 0 1
38540: PPUSH
38541: CALL_OW 274
38545: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38546: LD_ADDR_VAR 0 11
38550: PUSH
38551: LD_VAR 0 2
38555: PPUSH
38556: LD_VAR 0 1
38560: PPUSH
38561: CALL_OW 248
38565: PPUSH
38566: CALL_OW 450
38570: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38571: LD_VAR 0 10
38575: PPUSH
38576: LD_INT 1
38578: PPUSH
38579: CALL_OW 275
38583: PUSH
38584: LD_VAR 0 11
38588: PUSH
38589: LD_INT 1
38591: ARRAY
38592: GREATEREQUAL
38593: PUSH
38594: LD_VAR 0 10
38598: PPUSH
38599: LD_INT 2
38601: PPUSH
38602: CALL_OW 275
38606: PUSH
38607: LD_VAR 0 11
38611: PUSH
38612: LD_INT 2
38614: ARRAY
38615: GREATEREQUAL
38616: AND
38617: PUSH
38618: LD_VAR 0 10
38622: PPUSH
38623: LD_INT 3
38625: PPUSH
38626: CALL_OW 275
38630: PUSH
38631: LD_VAR 0 11
38635: PUSH
38636: LD_INT 3
38638: ARRAY
38639: GREATEREQUAL
38640: AND
38641: NOT
38642: IFFALSE 38646
// exit ;
38644: GO 39233
// if GetBType ( depot ) = b_depot then
38646: LD_VAR 0 1
38650: PPUSH
38651: CALL_OW 266
38655: PUSH
38656: LD_INT 0
38658: EQUAL
38659: IFFALSE 38671
// dist := 28 else
38661: LD_ADDR_VAR 0 14
38665: PUSH
38666: LD_INT 28
38668: ST_TO_ADDR
38669: GO 38679
// dist := 36 ;
38671: LD_ADDR_VAR 0 14
38675: PUSH
38676: LD_INT 36
38678: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38679: LD_VAR 0 1
38683: PPUSH
38684: LD_VAR 0 3
38688: PPUSH
38689: LD_VAR 0 4
38693: PPUSH
38694: CALL_OW 297
38698: PUSH
38699: LD_VAR 0 14
38703: GREATER
38704: IFFALSE 38708
// exit ;
38706: GO 39233
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38708: LD_ADDR_VAR 0 12
38712: PUSH
38713: LD_VAR 0 2
38717: PPUSH
38718: LD_VAR 0 3
38722: PPUSH
38723: LD_VAR 0 4
38727: PPUSH
38728: LD_VAR 0 5
38732: PPUSH
38733: LD_VAR 0 1
38737: PPUSH
38738: CALL_OW 248
38742: PPUSH
38743: LD_INT 0
38745: PPUSH
38746: CALL 39238 0 6
38750: ST_TO_ADDR
// if not hexes then
38751: LD_VAR 0 12
38755: NOT
38756: IFFALSE 38760
// exit ;
38758: GO 39233
// hex := GetHexInfo ( x , y ) ;
38760: LD_ADDR_VAR 0 15
38764: PUSH
38765: LD_VAR 0 3
38769: PPUSH
38770: LD_VAR 0 4
38774: PPUSH
38775: CALL_OW 546
38779: ST_TO_ADDR
// if hex [ 1 ] then
38780: LD_VAR 0 15
38784: PUSH
38785: LD_INT 1
38787: ARRAY
38788: IFFALSE 38792
// exit ;
38790: GO 39233
// height := hex [ 2 ] ;
38792: LD_ADDR_VAR 0 13
38796: PUSH
38797: LD_VAR 0 15
38801: PUSH
38802: LD_INT 2
38804: ARRAY
38805: ST_TO_ADDR
// for i = 1 to hexes do
38806: LD_ADDR_VAR 0 7
38810: PUSH
38811: DOUBLE
38812: LD_INT 1
38814: DEC
38815: ST_TO_ADDR
38816: LD_VAR 0 12
38820: PUSH
38821: FOR_TO
38822: IFFALSE 39152
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38824: LD_VAR 0 12
38828: PUSH
38829: LD_VAR 0 7
38833: ARRAY
38834: PUSH
38835: LD_INT 1
38837: ARRAY
38838: PPUSH
38839: LD_VAR 0 12
38843: PUSH
38844: LD_VAR 0 7
38848: ARRAY
38849: PUSH
38850: LD_INT 2
38852: ARRAY
38853: PPUSH
38854: CALL_OW 488
38858: NOT
38859: PUSH
38860: LD_VAR 0 12
38864: PUSH
38865: LD_VAR 0 7
38869: ARRAY
38870: PUSH
38871: LD_INT 1
38873: ARRAY
38874: PPUSH
38875: LD_VAR 0 12
38879: PUSH
38880: LD_VAR 0 7
38884: ARRAY
38885: PUSH
38886: LD_INT 2
38888: ARRAY
38889: PPUSH
38890: CALL_OW 428
38894: PUSH
38895: LD_INT 0
38897: GREATER
38898: OR
38899: PUSH
38900: LD_VAR 0 12
38904: PUSH
38905: LD_VAR 0 7
38909: ARRAY
38910: PUSH
38911: LD_INT 1
38913: ARRAY
38914: PPUSH
38915: LD_VAR 0 12
38919: PUSH
38920: LD_VAR 0 7
38924: ARRAY
38925: PUSH
38926: LD_INT 2
38928: ARRAY
38929: PPUSH
38930: CALL_OW 351
38934: OR
38935: IFFALSE 38941
// exit ;
38937: POP
38938: POP
38939: GO 39233
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38941: LD_ADDR_VAR 0 8
38945: PUSH
38946: LD_VAR 0 12
38950: PUSH
38951: LD_VAR 0 7
38955: ARRAY
38956: PUSH
38957: LD_INT 1
38959: ARRAY
38960: PPUSH
38961: LD_VAR 0 12
38965: PUSH
38966: LD_VAR 0 7
38970: ARRAY
38971: PUSH
38972: LD_INT 2
38974: ARRAY
38975: PPUSH
38976: CALL_OW 546
38980: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38981: LD_VAR 0 8
38985: PUSH
38986: LD_INT 1
38988: ARRAY
38989: PUSH
38990: LD_VAR 0 8
38994: PUSH
38995: LD_INT 2
38997: ARRAY
38998: PUSH
38999: LD_VAR 0 13
39003: PUSH
39004: LD_INT 2
39006: PLUS
39007: GREATER
39008: OR
39009: PUSH
39010: LD_VAR 0 8
39014: PUSH
39015: LD_INT 2
39017: ARRAY
39018: PUSH
39019: LD_VAR 0 13
39023: PUSH
39024: LD_INT 2
39026: MINUS
39027: LESS
39028: OR
39029: PUSH
39030: LD_VAR 0 8
39034: PUSH
39035: LD_INT 3
39037: ARRAY
39038: PUSH
39039: LD_INT 0
39041: PUSH
39042: LD_INT 8
39044: PUSH
39045: LD_INT 9
39047: PUSH
39048: LD_INT 10
39050: PUSH
39051: LD_INT 11
39053: PUSH
39054: LD_INT 12
39056: PUSH
39057: LD_INT 13
39059: PUSH
39060: LD_INT 16
39062: PUSH
39063: LD_INT 17
39065: PUSH
39066: LD_INT 18
39068: PUSH
39069: LD_INT 19
39071: PUSH
39072: LD_INT 20
39074: PUSH
39075: LD_INT 21
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: IN
39093: NOT
39094: OR
39095: PUSH
39096: LD_VAR 0 8
39100: PUSH
39101: LD_INT 5
39103: ARRAY
39104: NOT
39105: OR
39106: PUSH
39107: LD_VAR 0 8
39111: PUSH
39112: LD_INT 6
39114: ARRAY
39115: PUSH
39116: LD_INT 1
39118: PUSH
39119: LD_INT 2
39121: PUSH
39122: LD_INT 7
39124: PUSH
39125: LD_INT 9
39127: PUSH
39128: LD_INT 10
39130: PUSH
39131: LD_INT 11
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: IN
39142: NOT
39143: OR
39144: IFFALSE 39150
// exit ;
39146: POP
39147: POP
39148: GO 39233
// end ;
39150: GO 38821
39152: POP
39153: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39154: LD_VAR 0 9
39158: PPUSH
39159: LD_VAR 0 3
39163: PPUSH
39164: LD_VAR 0 4
39168: PPUSH
39169: LD_INT 20
39171: PPUSH
39172: CALL 31179 0 4
39176: PUSH
39177: LD_INT 4
39179: ARRAY
39180: IFFALSE 39184
// exit ;
39182: GO 39233
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39184: LD_VAR 0 2
39188: PUSH
39189: LD_INT 29
39191: PUSH
39192: LD_INT 30
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: IN
39199: PUSH
39200: LD_VAR 0 3
39204: PPUSH
39205: LD_VAR 0 4
39209: PPUSH
39210: LD_VAR 0 9
39214: PPUSH
39215: CALL_OW 440
39219: NOT
39220: AND
39221: IFFALSE 39225
// exit ;
39223: GO 39233
// result := true ;
39225: LD_ADDR_VAR 0 6
39229: PUSH
39230: LD_INT 1
39232: ST_TO_ADDR
// end ;
39233: LD_VAR 0 6
39237: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39238: LD_INT 0
39240: PPUSH
39241: PPUSH
39242: PPUSH
39243: PPUSH
39244: PPUSH
39245: PPUSH
39246: PPUSH
39247: PPUSH
39248: PPUSH
39249: PPUSH
39250: PPUSH
39251: PPUSH
39252: PPUSH
39253: PPUSH
39254: PPUSH
39255: PPUSH
39256: PPUSH
39257: PPUSH
39258: PPUSH
39259: PPUSH
39260: PPUSH
39261: PPUSH
39262: PPUSH
39263: PPUSH
39264: PPUSH
39265: PPUSH
39266: PPUSH
39267: PPUSH
39268: PPUSH
39269: PPUSH
39270: PPUSH
39271: PPUSH
39272: PPUSH
39273: PPUSH
39274: PPUSH
39275: PPUSH
39276: PPUSH
39277: PPUSH
39278: PPUSH
39279: PPUSH
39280: PPUSH
39281: PPUSH
39282: PPUSH
39283: PPUSH
39284: PPUSH
39285: PPUSH
39286: PPUSH
39287: PPUSH
39288: PPUSH
39289: PPUSH
39290: PPUSH
39291: PPUSH
39292: PPUSH
39293: PPUSH
39294: PPUSH
39295: PPUSH
39296: PPUSH
39297: PPUSH
// result = [ ] ;
39298: LD_ADDR_VAR 0 7
39302: PUSH
39303: EMPTY
39304: ST_TO_ADDR
// temp_list = [ ] ;
39305: LD_ADDR_VAR 0 9
39309: PUSH
39310: EMPTY
39311: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39312: LD_VAR 0 4
39316: PUSH
39317: LD_INT 0
39319: PUSH
39320: LD_INT 1
39322: PUSH
39323: LD_INT 2
39325: PUSH
39326: LD_INT 3
39328: PUSH
39329: LD_INT 4
39331: PUSH
39332: LD_INT 5
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: IN
39343: NOT
39344: PUSH
39345: LD_VAR 0 1
39349: PUSH
39350: LD_INT 0
39352: PUSH
39353: LD_INT 1
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: IN
39360: PUSH
39361: LD_VAR 0 5
39365: PUSH
39366: LD_INT 1
39368: PUSH
39369: LD_INT 2
39371: PUSH
39372: LD_INT 3
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: LIST
39379: IN
39380: NOT
39381: AND
39382: OR
39383: IFFALSE 39387
// exit ;
39385: GO 57778
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39387: LD_VAR 0 1
39391: PUSH
39392: LD_INT 6
39394: PUSH
39395: LD_INT 7
39397: PUSH
39398: LD_INT 8
39400: PUSH
39401: LD_INT 13
39403: PUSH
39404: LD_INT 12
39406: PUSH
39407: LD_INT 15
39409: PUSH
39410: LD_INT 11
39412: PUSH
39413: LD_INT 14
39415: PUSH
39416: LD_INT 10
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: IN
39430: IFFALSE 39440
// btype = b_lab ;
39432: LD_ADDR_VAR 0 1
39436: PUSH
39437: LD_INT 6
39439: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39440: LD_VAR 0 6
39444: PUSH
39445: LD_INT 0
39447: PUSH
39448: LD_INT 1
39450: PUSH
39451: LD_INT 2
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: LIST
39458: IN
39459: NOT
39460: PUSH
39461: LD_VAR 0 1
39465: PUSH
39466: LD_INT 0
39468: PUSH
39469: LD_INT 1
39471: PUSH
39472: LD_INT 2
39474: PUSH
39475: LD_INT 3
39477: PUSH
39478: LD_INT 6
39480: PUSH
39481: LD_INT 36
39483: PUSH
39484: LD_INT 4
39486: PUSH
39487: LD_INT 5
39489: PUSH
39490: LD_INT 31
39492: PUSH
39493: LD_INT 32
39495: PUSH
39496: LD_INT 33
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: IN
39512: NOT
39513: PUSH
39514: LD_VAR 0 6
39518: PUSH
39519: LD_INT 1
39521: EQUAL
39522: AND
39523: OR
39524: PUSH
39525: LD_VAR 0 1
39529: PUSH
39530: LD_INT 2
39532: PUSH
39533: LD_INT 3
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: IN
39540: NOT
39541: PUSH
39542: LD_VAR 0 6
39546: PUSH
39547: LD_INT 2
39549: EQUAL
39550: AND
39551: OR
39552: IFFALSE 39562
// mode = 0 ;
39554: LD_ADDR_VAR 0 6
39558: PUSH
39559: LD_INT 0
39561: ST_TO_ADDR
// case mode of 0 :
39562: LD_VAR 0 6
39566: PUSH
39567: LD_INT 0
39569: DOUBLE
39570: EQUAL
39571: IFTRUE 39575
39573: GO 51028
39575: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39576: LD_ADDR_VAR 0 11
39580: PUSH
39581: LD_INT 0
39583: PUSH
39584: LD_INT 0
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 0
39593: PUSH
39594: LD_INT 1
39596: NEG
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 1
39604: PUSH
39605: LD_INT 0
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 1
39614: PUSH
39615: LD_INT 1
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 0
39624: PUSH
39625: LD_INT 1
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 1
39634: NEG
39635: PUSH
39636: LD_INT 0
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 1
39645: NEG
39646: PUSH
39647: LD_INT 1
39649: NEG
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 1
39657: NEG
39658: PUSH
39659: LD_INT 2
39661: NEG
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 0
39669: PUSH
39670: LD_INT 2
39672: NEG
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 1
39680: PUSH
39681: LD_INT 1
39683: NEG
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 1
39691: PUSH
39692: LD_INT 2
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 0
39701: PUSH
39702: LD_INT 2
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 1
39711: NEG
39712: PUSH
39713: LD_INT 1
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 1
39722: PUSH
39723: LD_INT 3
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 0
39732: PUSH
39733: LD_INT 3
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 1
39742: NEG
39743: PUSH
39744: LD_INT 2
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39769: LD_ADDR_VAR 0 12
39773: PUSH
39774: LD_INT 0
39776: PUSH
39777: LD_INT 0
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 0
39786: PUSH
39787: LD_INT 1
39789: NEG
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 1
39797: PUSH
39798: LD_INT 0
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 1
39807: PUSH
39808: LD_INT 1
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 0
39817: PUSH
39818: LD_INT 1
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 1
39827: NEG
39828: PUSH
39829: LD_INT 0
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 1
39838: NEG
39839: PUSH
39840: LD_INT 1
39842: NEG
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 1
39850: PUSH
39851: LD_INT 1
39853: NEG
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 2
39861: PUSH
39862: LD_INT 0
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 2
39871: PUSH
39872: LD_INT 1
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 1
39881: NEG
39882: PUSH
39883: LD_INT 1
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 2
39892: NEG
39893: PUSH
39894: LD_INT 0
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 2
39903: NEG
39904: PUSH
39905: LD_INT 1
39907: NEG
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 2
39915: NEG
39916: PUSH
39917: LD_INT 1
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 3
39926: NEG
39927: PUSH
39928: LD_INT 0
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 3
39937: NEG
39938: PUSH
39939: LD_INT 1
39941: NEG
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39965: LD_ADDR_VAR 0 13
39969: PUSH
39970: LD_INT 0
39972: PUSH
39973: LD_INT 0
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 0
39982: PUSH
39983: LD_INT 1
39985: NEG
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 1
39993: PUSH
39994: LD_INT 0
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 1
40003: PUSH
40004: LD_INT 1
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 0
40013: PUSH
40014: LD_INT 1
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 1
40023: NEG
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 1
40034: NEG
40035: PUSH
40036: LD_INT 1
40038: NEG
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 1
40046: NEG
40047: PUSH
40048: LD_INT 2
40050: NEG
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 2
40058: PUSH
40059: LD_INT 1
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 2
40068: PUSH
40069: LD_INT 2
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 1
40078: PUSH
40079: LD_INT 2
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 2
40088: NEG
40089: PUSH
40090: LD_INT 1
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 2
40100: NEG
40101: PUSH
40102: LD_INT 2
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 2
40112: NEG
40113: PUSH
40114: LD_INT 3
40116: NEG
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 3
40124: NEG
40125: PUSH
40126: LD_INT 2
40128: NEG
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 3
40136: NEG
40137: PUSH
40138: LD_INT 3
40140: NEG
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40164: LD_ADDR_VAR 0 14
40168: PUSH
40169: LD_INT 0
40171: PUSH
40172: LD_INT 0
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 0
40181: PUSH
40182: LD_INT 1
40184: NEG
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 1
40192: PUSH
40193: LD_INT 0
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 1
40202: PUSH
40203: LD_INT 1
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 0
40212: PUSH
40213: LD_INT 1
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 1
40222: NEG
40223: PUSH
40224: LD_INT 0
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 1
40233: NEG
40234: PUSH
40235: LD_INT 1
40237: NEG
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 1
40245: NEG
40246: PUSH
40247: LD_INT 2
40249: NEG
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 0
40257: PUSH
40258: LD_INT 2
40260: NEG
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 1
40268: PUSH
40269: LD_INT 1
40271: NEG
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 1
40279: PUSH
40280: LD_INT 2
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 0
40289: PUSH
40290: LD_INT 2
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 1
40299: NEG
40300: PUSH
40301: LD_INT 1
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 1
40310: NEG
40311: PUSH
40312: LD_INT 3
40314: NEG
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 0
40322: PUSH
40323: LD_INT 3
40325: NEG
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 1
40333: PUSH
40334: LD_INT 2
40336: NEG
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40360: LD_ADDR_VAR 0 15
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: LD_INT 0
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 0
40377: PUSH
40378: LD_INT 1
40380: NEG
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 1
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 0
40408: PUSH
40409: LD_INT 1
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 1
40418: NEG
40419: PUSH
40420: LD_INT 0
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 1
40429: NEG
40430: PUSH
40431: LD_INT 1
40433: NEG
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 1
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 2
40452: PUSH
40453: LD_INT 0
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 2
40462: PUSH
40463: LD_INT 1
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 1
40472: NEG
40473: PUSH
40474: LD_INT 1
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 2
40483: NEG
40484: PUSH
40485: LD_INT 0
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 2
40494: NEG
40495: PUSH
40496: LD_INT 1
40498: NEG
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 2
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 3
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 3
40527: PUSH
40528: LD_INT 1
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40553: LD_ADDR_VAR 0 16
40557: PUSH
40558: LD_INT 0
40560: PUSH
40561: LD_INT 0
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 0
40570: PUSH
40571: LD_INT 1
40573: NEG
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 1
40581: PUSH
40582: LD_INT 0
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 1
40591: PUSH
40592: LD_INT 1
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 0
40601: PUSH
40602: LD_INT 1
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 1
40611: NEG
40612: PUSH
40613: LD_INT 0
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 1
40622: NEG
40623: PUSH
40624: LD_INT 1
40626: NEG
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 1
40634: NEG
40635: PUSH
40636: LD_INT 2
40638: NEG
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 2
40646: PUSH
40647: LD_INT 1
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 2
40656: PUSH
40657: LD_INT 2
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 1
40666: PUSH
40667: LD_INT 2
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 2
40676: NEG
40677: PUSH
40678: LD_INT 1
40680: NEG
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 2
40688: NEG
40689: PUSH
40690: LD_INT 2
40692: NEG
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 3
40700: PUSH
40701: LD_INT 2
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 3
40710: PUSH
40711: LD_INT 3
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 2
40720: PUSH
40721: LD_INT 3
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40746: LD_ADDR_VAR 0 17
40750: PUSH
40751: LD_INT 0
40753: PUSH
40754: LD_INT 0
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 0
40763: PUSH
40764: LD_INT 1
40766: NEG
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 1
40774: PUSH
40775: LD_INT 0
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 1
40784: PUSH
40785: LD_INT 1
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 0
40794: PUSH
40795: LD_INT 1
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 1
40804: NEG
40805: PUSH
40806: LD_INT 0
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 1
40815: NEG
40816: PUSH
40817: LD_INT 1
40819: NEG
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 1
40827: NEG
40828: PUSH
40829: LD_INT 2
40831: NEG
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 0
40839: PUSH
40840: LD_INT 2
40842: NEG
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 1
40850: PUSH
40851: LD_INT 1
40853: NEG
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 2
40861: PUSH
40862: LD_INT 0
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 2
40871: PUSH
40872: LD_INT 1
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 2
40881: PUSH
40882: LD_INT 2
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 1
40891: PUSH
40892: LD_INT 2
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: LD_INT 2
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 1
40911: NEG
40912: PUSH
40913: LD_INT 1
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 2
40922: NEG
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 2
40933: NEG
40934: PUSH
40935: LD_INT 1
40937: NEG
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 2
40945: NEG
40946: PUSH
40947: LD_INT 2
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40976: LD_ADDR_VAR 0 18
40980: PUSH
40981: LD_INT 0
40983: PUSH
40984: LD_INT 0
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 0
40993: PUSH
40994: LD_INT 1
40996: NEG
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 1
41004: PUSH
41005: LD_INT 0
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 1
41014: PUSH
41015: LD_INT 1
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 0
41024: PUSH
41025: LD_INT 1
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 1
41034: NEG
41035: PUSH
41036: LD_INT 0
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 1
41045: NEG
41046: PUSH
41047: LD_INT 1
41049: NEG
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 1
41057: NEG
41058: PUSH
41059: LD_INT 2
41061: NEG
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 0
41069: PUSH
41070: LD_INT 2
41072: NEG
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 1
41080: PUSH
41081: LD_INT 1
41083: NEG
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 2
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 2
41101: PUSH
41102: LD_INT 1
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 2
41111: PUSH
41112: LD_INT 2
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 1
41121: PUSH
41122: LD_INT 2
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 0
41131: PUSH
41132: LD_INT 2
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 1
41141: NEG
41142: PUSH
41143: LD_INT 1
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 2
41152: NEG
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 2
41163: NEG
41164: PUSH
41165: LD_INT 1
41167: NEG
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 2
41175: NEG
41176: PUSH
41177: LD_INT 2
41179: NEG
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41206: LD_ADDR_VAR 0 19
41210: PUSH
41211: LD_INT 0
41213: PUSH
41214: LD_INT 0
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: LD_INT 1
41226: NEG
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 1
41234: PUSH
41235: LD_INT 0
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 1
41244: PUSH
41245: LD_INT 1
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 0
41254: PUSH
41255: LD_INT 1
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 1
41264: NEG
41265: PUSH
41266: LD_INT 0
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 1
41275: NEG
41276: PUSH
41277: LD_INT 1
41279: NEG
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 1
41287: NEG
41288: PUSH
41289: LD_INT 2
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 0
41299: PUSH
41300: LD_INT 2
41302: NEG
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 1
41310: PUSH
41311: LD_INT 1
41313: NEG
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 2
41321: PUSH
41322: LD_INT 0
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 2
41331: PUSH
41332: LD_INT 1
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 2
41341: PUSH
41342: LD_INT 2
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 1
41351: PUSH
41352: LD_INT 2
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 0
41361: PUSH
41362: LD_INT 2
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 1
41371: NEG
41372: PUSH
41373: LD_INT 1
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 2
41382: NEG
41383: PUSH
41384: LD_INT 0
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 2
41393: NEG
41394: PUSH
41395: LD_INT 1
41397: NEG
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 2
41405: NEG
41406: PUSH
41407: LD_INT 2
41409: NEG
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41436: LD_ADDR_VAR 0 20
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: LD_INT 0
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: LD_INT 1
41456: NEG
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 1
41464: PUSH
41465: LD_INT 0
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 1
41474: PUSH
41475: LD_INT 1
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 0
41484: PUSH
41485: LD_INT 1
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 1
41494: NEG
41495: PUSH
41496: LD_INT 0
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 1
41505: NEG
41506: PUSH
41507: LD_INT 1
41509: NEG
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 1
41517: NEG
41518: PUSH
41519: LD_INT 2
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 0
41529: PUSH
41530: LD_INT 2
41532: NEG
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 1
41540: PUSH
41541: LD_INT 1
41543: NEG
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 2
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 2
41561: PUSH
41562: LD_INT 1
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 2
41571: PUSH
41572: LD_INT 2
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 1
41581: PUSH
41582: LD_INT 2
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 0
41591: PUSH
41592: LD_INT 2
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 1
41601: NEG
41602: PUSH
41603: LD_INT 1
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 2
41612: NEG
41613: PUSH
41614: LD_INT 0
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 2
41623: NEG
41624: PUSH
41625: LD_INT 1
41627: NEG
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 2
41635: NEG
41636: PUSH
41637: LD_INT 2
41639: NEG
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41666: LD_ADDR_VAR 0 21
41670: PUSH
41671: LD_INT 0
41673: PUSH
41674: LD_INT 0
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 0
41683: PUSH
41684: LD_INT 1
41686: NEG
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 1
41694: PUSH
41695: LD_INT 0
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 1
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 0
41714: PUSH
41715: LD_INT 1
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 1
41724: NEG
41725: PUSH
41726: LD_INT 0
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 1
41735: NEG
41736: PUSH
41737: LD_INT 1
41739: NEG
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 1
41747: NEG
41748: PUSH
41749: LD_INT 2
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 0
41759: PUSH
41760: LD_INT 2
41762: NEG
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 1
41770: PUSH
41771: LD_INT 1
41773: NEG
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 2
41781: PUSH
41782: LD_INT 0
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 2
41791: PUSH
41792: LD_INT 1
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 2
41801: PUSH
41802: LD_INT 2
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 1
41811: PUSH
41812: LD_INT 2
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 0
41821: PUSH
41822: LD_INT 2
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 1
41831: NEG
41832: PUSH
41833: LD_INT 1
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 2
41842: NEG
41843: PUSH
41844: LD_INT 0
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 2
41853: NEG
41854: PUSH
41855: LD_INT 1
41857: NEG
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 2
41865: NEG
41866: PUSH
41867: LD_INT 2
41869: NEG
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41896: LD_ADDR_VAR 0 22
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: LD_INT 0
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 0
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 1
41924: PUSH
41925: LD_INT 0
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 1
41934: PUSH
41935: LD_INT 1
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 0
41944: PUSH
41945: LD_INT 1
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 1
41954: NEG
41955: PUSH
41956: LD_INT 0
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 1
41965: NEG
41966: PUSH
41967: LD_INT 1
41969: NEG
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 1
41977: NEG
41978: PUSH
41979: LD_INT 2
41981: NEG
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: LD_INT 2
41992: NEG
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 1
42000: PUSH
42001: LD_INT 1
42003: NEG
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 2
42011: PUSH
42012: LD_INT 0
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 2
42021: PUSH
42022: LD_INT 1
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 2
42031: PUSH
42032: LD_INT 2
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 1
42041: PUSH
42042: LD_INT 2
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 0
42051: PUSH
42052: LD_INT 2
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 1
42061: NEG
42062: PUSH
42063: LD_INT 1
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 2
42072: NEG
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 2
42083: NEG
42084: PUSH
42085: LD_INT 1
42087: NEG
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 2
42095: NEG
42096: PUSH
42097: LD_INT 2
42099: NEG
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42126: LD_ADDR_VAR 0 23
42130: PUSH
42131: LD_INT 0
42133: PUSH
42134: LD_INT 0
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 0
42143: PUSH
42144: LD_INT 1
42146: NEG
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 1
42154: PUSH
42155: LD_INT 0
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 1
42164: PUSH
42165: LD_INT 1
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 0
42174: PUSH
42175: LD_INT 1
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 1
42184: NEG
42185: PUSH
42186: LD_INT 0
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 1
42195: NEG
42196: PUSH
42197: LD_INT 1
42199: NEG
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 1
42207: NEG
42208: PUSH
42209: LD_INT 2
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 0
42219: PUSH
42220: LD_INT 2
42222: NEG
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 1
42230: PUSH
42231: LD_INT 1
42233: NEG
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 2
42241: PUSH
42242: LD_INT 0
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 2
42251: PUSH
42252: LD_INT 1
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 2
42261: PUSH
42262: LD_INT 2
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 1
42271: PUSH
42272: LD_INT 2
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 0
42281: PUSH
42282: LD_INT 2
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 1
42291: NEG
42292: PUSH
42293: LD_INT 1
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 2
42302: NEG
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 2
42313: NEG
42314: PUSH
42315: LD_INT 1
42317: NEG
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 2
42325: NEG
42326: PUSH
42327: LD_INT 2
42329: NEG
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 2
42337: NEG
42338: PUSH
42339: LD_INT 3
42341: NEG
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 1
42349: NEG
42350: PUSH
42351: LD_INT 3
42353: NEG
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 1
42361: PUSH
42362: LD_INT 2
42364: NEG
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 2
42372: PUSH
42373: LD_INT 1
42375: NEG
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42406: LD_ADDR_VAR 0 24
42410: PUSH
42411: LD_INT 0
42413: PUSH
42414: LD_INT 0
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: LD_INT 1
42426: NEG
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 1
42444: PUSH
42445: LD_INT 1
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 0
42454: PUSH
42455: LD_INT 1
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 1
42464: NEG
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 1
42475: NEG
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 1
42487: NEG
42488: PUSH
42489: LD_INT 2
42491: NEG
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 0
42499: PUSH
42500: LD_INT 2
42502: NEG
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 1
42510: PUSH
42511: LD_INT 1
42513: NEG
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 2
42521: PUSH
42522: LD_INT 0
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 2
42531: PUSH
42532: LD_INT 1
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 2
42541: PUSH
42542: LD_INT 2
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 1
42551: PUSH
42552: LD_INT 2
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: LD_INT 2
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 1
42571: NEG
42572: PUSH
42573: LD_INT 1
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 2
42582: NEG
42583: PUSH
42584: LD_INT 0
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 2
42593: NEG
42594: PUSH
42595: LD_INT 1
42597: NEG
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 2
42605: NEG
42606: PUSH
42607: LD_INT 2
42609: NEG
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 1
42617: PUSH
42618: LD_INT 2
42620: NEG
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 2
42628: PUSH
42629: LD_INT 1
42631: NEG
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 3
42639: PUSH
42640: LD_INT 1
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 3
42649: PUSH
42650: LD_INT 2
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42682: LD_ADDR_VAR 0 25
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: LD_INT 0
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 0
42699: PUSH
42700: LD_INT 1
42702: NEG
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 1
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 1
42720: PUSH
42721: LD_INT 1
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 0
42730: PUSH
42731: LD_INT 1
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 1
42740: NEG
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 1
42751: NEG
42752: PUSH
42753: LD_INT 1
42755: NEG
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: LD_INT 2
42767: NEG
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 0
42775: PUSH
42776: LD_INT 2
42778: NEG
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 1
42786: PUSH
42787: LD_INT 1
42789: NEG
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 2
42797: PUSH
42798: LD_INT 0
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 2
42807: PUSH
42808: LD_INT 1
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 2
42817: PUSH
42818: LD_INT 2
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: LD_INT 2
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: LD_INT 2
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 1
42847: NEG
42848: PUSH
42849: LD_INT 1
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 2
42858: NEG
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 2
42869: NEG
42870: PUSH
42871: LD_INT 1
42873: NEG
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 2
42881: NEG
42882: PUSH
42883: LD_INT 2
42885: NEG
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 3
42893: PUSH
42894: LD_INT 1
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 3
42903: PUSH
42904: LD_INT 2
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 2
42913: PUSH
42914: LD_INT 3
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 1
42923: PUSH
42924: LD_INT 3
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42956: LD_ADDR_VAR 0 26
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: LD_INT 1
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 0
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 1
43014: NEG
43015: PUSH
43016: LD_INT 0
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 1
43025: NEG
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: PUSH
43039: LD_INT 2
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: LD_INT 2
43052: NEG
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 1
43060: PUSH
43061: LD_INT 1
43063: NEG
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 2
43071: PUSH
43072: LD_INT 0
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 2
43081: PUSH
43082: LD_INT 1
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 2
43091: PUSH
43092: LD_INT 2
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 1
43101: PUSH
43102: LD_INT 2
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 0
43111: PUSH
43112: LD_INT 2
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 1
43121: NEG
43122: PUSH
43123: LD_INT 1
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 2
43132: NEG
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 2
43143: NEG
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 2
43155: NEG
43156: PUSH
43157: LD_INT 2
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 2
43167: PUSH
43168: LD_INT 3
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 1
43177: PUSH
43178: LD_INT 3
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: NEG
43188: PUSH
43189: LD_INT 2
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 2
43198: NEG
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43232: LD_ADDR_VAR 0 27
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: LD_INT 0
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: LD_INT 1
43252: NEG
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 1
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 1
43270: PUSH
43271: LD_INT 1
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 0
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 1
43290: NEG
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 1
43301: NEG
43302: PUSH
43303: LD_INT 1
43305: NEG
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 1
43313: NEG
43314: PUSH
43315: LD_INT 2
43317: NEG
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: LD_INT 2
43328: NEG
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: PUSH
43337: LD_INT 1
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 2
43347: PUSH
43348: LD_INT 0
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 2
43357: PUSH
43358: LD_INT 1
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 2
43367: PUSH
43368: LD_INT 2
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 1
43377: PUSH
43378: LD_INT 2
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 0
43387: PUSH
43388: LD_INT 2
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 1
43397: NEG
43398: PUSH
43399: LD_INT 1
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 2
43408: NEG
43409: PUSH
43410: LD_INT 0
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 2
43419: NEG
43420: PUSH
43421: LD_INT 1
43423: NEG
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 2
43431: NEG
43432: PUSH
43433: LD_INT 2
43435: NEG
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 1
43443: NEG
43444: PUSH
43445: LD_INT 2
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 2
43454: NEG
43455: PUSH
43456: LD_INT 1
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 3
43465: NEG
43466: PUSH
43467: LD_INT 1
43469: NEG
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 3
43477: NEG
43478: PUSH
43479: LD_INT 2
43481: NEG
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43512: LD_ADDR_VAR 0 28
43516: PUSH
43517: LD_INT 0
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 0
43529: PUSH
43530: LD_INT 1
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: LD_INT 0
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 1
43550: PUSH
43551: LD_INT 1
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 0
43560: PUSH
43561: LD_INT 1
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 1
43570: NEG
43571: PUSH
43572: LD_INT 0
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 1
43581: NEG
43582: PUSH
43583: LD_INT 1
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 1
43593: NEG
43594: PUSH
43595: LD_INT 2
43597: NEG
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 0
43605: PUSH
43606: LD_INT 2
43608: NEG
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 1
43616: PUSH
43617: LD_INT 1
43619: NEG
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 2
43627: PUSH
43628: LD_INT 0
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 2
43637: PUSH
43638: LD_INT 1
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 2
43647: PUSH
43648: LD_INT 2
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 1
43657: PUSH
43658: LD_INT 2
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 0
43667: PUSH
43668: LD_INT 2
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 1
43677: NEG
43678: PUSH
43679: LD_INT 1
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 2
43688: NEG
43689: PUSH
43690: LD_INT 0
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 2
43699: NEG
43700: PUSH
43701: LD_INT 1
43703: NEG
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 2
43711: NEG
43712: PUSH
43713: LD_INT 2
43715: NEG
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 2
43723: NEG
43724: PUSH
43725: LD_INT 3
43727: NEG
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: LD_INT 3
43739: NEG
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 3
43747: NEG
43748: PUSH
43749: LD_INT 1
43751: NEG
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 3
43759: NEG
43760: PUSH
43761: LD_INT 2
43763: NEG
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43794: LD_ADDR_VAR 0 29
43798: PUSH
43799: LD_INT 0
43801: PUSH
43802: LD_INT 0
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 0
43811: PUSH
43812: LD_INT 1
43814: NEG
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 1
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 1
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 0
43842: PUSH
43843: LD_INT 1
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 1
43852: NEG
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: LD_INT 1
43867: NEG
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 1
43875: NEG
43876: PUSH
43877: LD_INT 2
43879: NEG
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: LD_INT 2
43890: NEG
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 1
43898: PUSH
43899: LD_INT 1
43901: NEG
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 2
43909: PUSH
43910: LD_INT 0
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 2
43919: PUSH
43920: LD_INT 1
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: LD_INT 2
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 0
43939: PUSH
43940: LD_INT 2
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 1
43949: NEG
43950: PUSH
43951: LD_INT 1
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 2
43960: NEG
43961: PUSH
43962: LD_INT 1
43964: NEG
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 2
43972: NEG
43973: PUSH
43974: LD_INT 2
43976: NEG
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 2
43984: NEG
43985: PUSH
43986: LD_INT 3
43988: NEG
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 2
43996: PUSH
43997: LD_INT 1
43999: NEG
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 3
44007: PUSH
44008: LD_INT 1
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 1
44017: PUSH
44018: LD_INT 3
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 1
44027: NEG
44028: PUSH
44029: LD_INT 2
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 3
44038: NEG
44039: PUSH
44040: LD_INT 2
44042: NEG
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44073: LD_ADDR_VAR 0 30
44077: PUSH
44078: LD_INT 0
44080: PUSH
44081: LD_INT 0
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 0
44090: PUSH
44091: LD_INT 1
44093: NEG
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 1
44101: PUSH
44102: LD_INT 0
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 1
44111: PUSH
44112: LD_INT 1
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 0
44121: PUSH
44122: LD_INT 1
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: NEG
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 1
44142: NEG
44143: PUSH
44144: LD_INT 1
44146: NEG
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 1
44154: NEG
44155: PUSH
44156: LD_INT 2
44158: NEG
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: LD_INT 2
44169: NEG
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 1
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 2
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 2
44198: PUSH
44199: LD_INT 1
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 2
44208: PUSH
44209: LD_INT 2
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 1
44218: PUSH
44219: LD_INT 2
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 1
44228: NEG
44229: PUSH
44230: LD_INT 1
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 2
44239: NEG
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 2
44250: NEG
44251: PUSH
44252: LD_INT 1
44254: NEG
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 1
44262: NEG
44263: PUSH
44264: LD_INT 3
44266: NEG
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 1
44274: PUSH
44275: LD_INT 2
44277: NEG
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 3
44285: PUSH
44286: LD_INT 2
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 2
44295: PUSH
44296: LD_INT 3
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 2
44305: NEG
44306: PUSH
44307: LD_INT 1
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 3
44316: NEG
44317: PUSH
44318: LD_INT 1
44320: NEG
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44351: LD_ADDR_VAR 0 31
44355: PUSH
44356: LD_INT 0
44358: PUSH
44359: LD_INT 0
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: LD_INT 1
44371: NEG
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: PUSH
44380: LD_INT 0
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 1
44389: PUSH
44390: LD_INT 1
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 0
44399: PUSH
44400: LD_INT 1
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 1
44409: NEG
44410: PUSH
44411: LD_INT 0
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 1
44420: NEG
44421: PUSH
44422: LD_INT 1
44424: NEG
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 1
44432: NEG
44433: PUSH
44434: LD_INT 2
44436: NEG
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 1
44444: PUSH
44445: LD_INT 1
44447: NEG
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 2
44455: PUSH
44456: LD_INT 0
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 2
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 2
44475: PUSH
44476: LD_INT 2
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 1
44485: PUSH
44486: LD_INT 2
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: LD_INT 2
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 1
44505: NEG
44506: PUSH
44507: LD_INT 1
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 2
44516: NEG
44517: PUSH
44518: LD_INT 1
44520: NEG
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 2
44528: NEG
44529: PUSH
44530: LD_INT 2
44532: NEG
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 2
44540: NEG
44541: PUSH
44542: LD_INT 3
44544: NEG
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 2
44552: PUSH
44553: LD_INT 1
44555: NEG
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 3
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 1
44573: PUSH
44574: LD_INT 3
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 1
44583: NEG
44584: PUSH
44585: LD_INT 2
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 3
44594: NEG
44595: PUSH
44596: LD_INT 2
44598: NEG
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44629: LD_ADDR_VAR 0 32
44633: PUSH
44634: LD_INT 0
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 0
44646: PUSH
44647: LD_INT 1
44649: NEG
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 1
44657: PUSH
44658: LD_INT 0
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: LD_INT 0
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 1
44698: NEG
44699: PUSH
44700: LD_INT 1
44702: NEG
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 1
44710: NEG
44711: PUSH
44712: LD_INT 2
44714: NEG
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: LD_INT 2
44725: NEG
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 1
44733: PUSH
44734: LD_INT 1
44736: NEG
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 2
44744: PUSH
44745: LD_INT 1
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 2
44754: PUSH
44755: LD_INT 2
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 1
44764: PUSH
44765: LD_INT 2
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 0
44774: PUSH
44775: LD_INT 2
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 1
44784: NEG
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 2
44795: NEG
44796: PUSH
44797: LD_INT 0
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 2
44806: NEG
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: LD_INT 3
44822: NEG
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 1
44830: PUSH
44831: LD_INT 2
44833: NEG
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 3
44841: PUSH
44842: LD_INT 2
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 2
44851: PUSH
44852: LD_INT 3
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 2
44861: NEG
44862: PUSH
44863: LD_INT 1
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 3
44872: NEG
44873: PUSH
44874: LD_INT 1
44876: NEG
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44907: LD_ADDR_VAR 0 33
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: LD_INT 1
44927: NEG
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 1
44965: NEG
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 1
44976: NEG
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: NEG
44989: PUSH
44990: LD_INT 2
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: PUSH
45001: LD_INT 1
45003: NEG
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 2
45011: PUSH
45012: LD_INT 0
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 2
45021: PUSH
45022: LD_INT 1
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: LD_INT 2
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 0
45041: PUSH
45042: LD_INT 2
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 1
45051: NEG
45052: PUSH
45053: LD_INT 1
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 2
45062: NEG
45063: PUSH
45064: LD_INT 0
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 2
45073: NEG
45074: PUSH
45075: LD_INT 1
45077: NEG
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 2
45085: NEG
45086: PUSH
45087: LD_INT 2
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 2
45097: NEG
45098: PUSH
45099: LD_INT 3
45101: NEG
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 2
45109: PUSH
45110: LD_INT 1
45112: NEG
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 3
45120: PUSH
45121: LD_INT 1
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: LD_INT 3
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 1
45140: NEG
45141: PUSH
45142: LD_INT 2
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 3
45151: NEG
45152: PUSH
45153: LD_INT 2
45155: NEG
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45186: LD_ADDR_VAR 0 34
45190: PUSH
45191: LD_INT 0
45193: PUSH
45194: LD_INT 0
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: LD_INT 1
45206: NEG
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 1
45224: PUSH
45225: LD_INT 1
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 0
45234: PUSH
45235: LD_INT 1
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 1
45255: NEG
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 1
45267: NEG
45268: PUSH
45269: LD_INT 2
45271: NEG
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: LD_INT 2
45282: NEG
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 1
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 2
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 2
45311: PUSH
45312: LD_INT 2
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: LD_INT 2
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: LD_INT 1
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 2
45342: NEG
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 2
45353: NEG
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 2
45365: NEG
45366: PUSH
45367: LD_INT 2
45369: NEG
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: NEG
45378: PUSH
45379: LD_INT 3
45381: NEG
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: LD_INT 2
45392: NEG
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 3
45400: PUSH
45401: LD_INT 2
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 2
45410: PUSH
45411: LD_INT 3
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 2
45420: NEG
45421: PUSH
45422: LD_INT 1
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 3
45431: NEG
45432: PUSH
45433: LD_INT 1
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45466: LD_ADDR_VAR 0 35
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: LD_INT 0
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: LD_INT 1
45486: NEG
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: LD_INT 0
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: LD_INT 1
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 0
45514: PUSH
45515: LD_INT 1
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 1
45524: NEG
45525: PUSH
45526: LD_INT 0
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 1
45535: NEG
45536: PUSH
45537: LD_INT 1
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 2
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 2
45557: NEG
45558: PUSH
45559: LD_INT 1
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45578: LD_ADDR_VAR 0 36
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: LD_INT 1
45598: NEG
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: LD_INT 0
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: LD_INT 1
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 0
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 1
45647: NEG
45648: PUSH
45649: LD_INT 1
45651: NEG
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: LD_INT 2
45663: NEG
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: LD_INT 2
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45690: LD_ADDR_VAR 0 37
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 0
45707: PUSH
45708: LD_INT 1
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 1
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 1
45728: PUSH
45729: LD_INT 1
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 1
45748: NEG
45749: PUSH
45750: LD_INT 0
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: LD_INT 1
45774: NEG
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 1
45782: NEG
45783: PUSH
45784: LD_INT 1
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45802: LD_ADDR_VAR 0 38
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: LD_INT 1
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 1
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: LD_INT 1
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 1
45860: NEG
45861: PUSH
45862: LD_INT 0
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: LD_INT 1
45875: NEG
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 2
45883: PUSH
45884: LD_INT 1
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 2
45893: NEG
45894: PUSH
45895: LD_INT 1
45897: NEG
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45914: LD_ADDR_VAR 0 39
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: LD_INT 0
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: LD_INT 1
45934: NEG
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: LD_INT 0
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: LD_INT 1
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: NEG
45973: PUSH
45974: LD_INT 0
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 1
45995: NEG
45996: PUSH
45997: LD_INT 2
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 1
46007: PUSH
46008: LD_INT 2
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46026: LD_ADDR_VAR 0 40
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: LD_INT 1
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 1
46084: NEG
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: NEG
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46138: LD_ADDR_VAR 0 41
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 0
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 1
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 1
46196: NEG
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: PUSH
46209: LD_INT 1
46211: NEG
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: LD_INT 2
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: LD_INT 1
46234: NEG
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 2
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 2
46252: PUSH
46253: LD_INT 1
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 2
46262: PUSH
46263: LD_INT 2
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: LD_INT 2
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 1
46282: NEG
46283: PUSH
46284: LD_INT 1
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 2
46293: NEG
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 2
46304: NEG
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 2
46316: NEG
46317: PUSH
46318: LD_INT 2
46320: NEG
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 2
46328: NEG
46329: PUSH
46330: LD_INT 3
46332: NEG
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 2
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 3
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 3
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 3
46371: PUSH
46372: LD_INT 2
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 3
46381: PUSH
46382: LD_INT 3
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 2
46391: PUSH
46392: LD_INT 3
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 2
46401: NEG
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 3
46412: NEG
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 3
46423: NEG
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 3
46435: NEG
46436: PUSH
46437: LD_INT 2
46439: NEG
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 3
46447: NEG
46448: PUSH
46449: LD_INT 3
46451: NEG
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46488: LD_ADDR_VAR 0 42
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 1
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: LD_INT 1
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: LD_INT 1
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 1
46557: NEG
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: NEG
46570: PUSH
46571: LD_INT 2
46573: NEG
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 0
46581: PUSH
46582: LD_INT 2
46584: NEG
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 1
46592: PUSH
46593: LD_INT 1
46595: NEG
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 2
46603: PUSH
46604: LD_INT 1
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 2
46613: PUSH
46614: LD_INT 2
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: LD_INT 2
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: LD_INT 2
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: LD_INT 1
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 2
46654: NEG
46655: PUSH
46656: LD_INT 1
46658: NEG
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 2
46666: NEG
46667: PUSH
46668: LD_INT 2
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 2
46678: NEG
46679: PUSH
46680: LD_INT 3
46682: NEG
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: LD_INT 3
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 0
46702: PUSH
46703: LD_INT 3
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 1
46713: PUSH
46714: LD_INT 2
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 3
46724: PUSH
46725: LD_INT 2
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 3
46734: PUSH
46735: LD_INT 3
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 2
46744: PUSH
46745: LD_INT 3
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: LD_INT 3
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 0
46764: PUSH
46765: LD_INT 3
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 1
46774: NEG
46775: PUSH
46776: LD_INT 2
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 3
46785: NEG
46786: PUSH
46787: LD_INT 2
46789: NEG
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 3
46797: NEG
46798: PUSH
46799: LD_INT 3
46801: NEG
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46838: LD_ADDR_VAR 0 43
46842: PUSH
46843: LD_INT 0
46845: PUSH
46846: LD_INT 0
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: LD_INT 1
46858: NEG
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 1
46866: PUSH
46867: LD_INT 0
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 1
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 0
46886: PUSH
46887: LD_INT 1
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 1
46896: NEG
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 1
46907: NEG
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 1
46919: NEG
46920: PUSH
46921: LD_INT 2
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 0
46931: PUSH
46932: LD_INT 2
46934: NEG
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 1
46942: PUSH
46943: LD_INT 1
46945: NEG
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 2
46953: PUSH
46954: LD_INT 0
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 2
46963: PUSH
46964: LD_INT 1
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: LD_INT 2
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: LD_INT 2
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 1
46993: NEG
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 2
47004: NEG
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 2
47015: NEG
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: LD_INT 3
47031: NEG
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: LD_INT 3
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: LD_INT 2
47053: NEG
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 2
47061: PUSH
47062: LD_INT 1
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 3
47072: PUSH
47073: LD_INT 0
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 3
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: PUSH
47093: LD_INT 3
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 0
47102: PUSH
47103: LD_INT 3
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 1
47112: NEG
47113: PUSH
47114: LD_INT 2
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 2
47123: NEG
47124: PUSH
47125: LD_INT 1
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 3
47134: NEG
47135: PUSH
47136: LD_INT 0
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 3
47145: NEG
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47186: LD_ADDR_VAR 0 44
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: LD_INT 0
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: LD_INT 1
47206: NEG
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 1
47214: PUSH
47215: LD_INT 0
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 1
47224: PUSH
47225: LD_INT 1
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 0
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: LD_INT 0
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 1
47255: NEG
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: LD_INT 2
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: LD_INT 1
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 2
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 2
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 2
47310: PUSH
47311: LD_INT 2
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: LD_INT 2
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: NEG
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 2
47341: NEG
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 2
47352: NEG
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 2
47364: NEG
47365: PUSH
47366: LD_INT 2
47368: NEG
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 2
47376: NEG
47377: PUSH
47378: LD_INT 3
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 2
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 3
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 3
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 3
47419: PUSH
47420: LD_INT 2
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 3
47429: PUSH
47430: LD_INT 3
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 2
47439: PUSH
47440: LD_INT 3
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 2
47449: NEG
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 3
47460: NEG
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 3
47471: NEG
47472: PUSH
47473: LD_INT 1
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 3
47483: NEG
47484: PUSH
47485: LD_INT 2
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 3
47495: NEG
47496: PUSH
47497: LD_INT 3
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47536: LD_ADDR_VAR 0 45
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 1
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 0
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 1
47594: NEG
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 1
47605: NEG
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 1
47617: NEG
47618: PUSH
47619: LD_INT 2
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 0
47629: PUSH
47630: LD_INT 2
47632: NEG
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 1
47640: PUSH
47641: LD_INT 1
47643: NEG
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 2
47651: PUSH
47652: LD_INT 1
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 2
47661: PUSH
47662: LD_INT 2
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: LD_INT 2
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: LD_INT 2
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 2
47702: NEG
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 2
47714: NEG
47715: PUSH
47716: LD_INT 2
47718: NEG
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 2
47726: NEG
47727: PUSH
47728: LD_INT 3
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 1
47738: NEG
47739: PUSH
47740: LD_INT 3
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: LD_INT 3
47753: NEG
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: LD_INT 2
47764: NEG
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 3
47772: PUSH
47773: LD_INT 2
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 3
47782: PUSH
47783: LD_INT 3
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 2
47792: PUSH
47793: LD_INT 3
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 1
47802: PUSH
47803: LD_INT 3
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: LD_INT 3
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: LD_INT 2
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 3
47833: NEG
47834: PUSH
47835: LD_INT 2
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 3
47845: NEG
47846: PUSH
47847: LD_INT 3
47849: NEG
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47886: LD_ADDR_VAR 0 46
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: LD_INT 1
47906: NEG
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: LD_INT 1
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 1
47944: NEG
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 1
47955: NEG
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: LD_INT 2
47971: NEG
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 0
47979: PUSH
47980: LD_INT 2
47982: NEG
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 1
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 2
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 2
48011: PUSH
48012: LD_INT 1
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: PUSH
48022: LD_INT 2
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: LD_INT 2
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 1
48041: NEG
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 2
48052: NEG
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 2
48063: NEG
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: LD_INT 3
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: LD_INT 3
48090: NEG
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: PUSH
48099: LD_INT 2
48101: NEG
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 2
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 3
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 3
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 1
48140: PUSH
48141: LD_INT 3
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 0
48150: PUSH
48151: LD_INT 3
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: LD_INT 2
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 2
48171: NEG
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 3
48182: NEG
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 3
48193: NEG
48194: PUSH
48195: LD_INT 1
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48234: LD_ADDR_VAR 0 47
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: LD_INT 0
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: LD_INT 1
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: LD_INT 1
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: LD_INT 1
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 1
48292: NEG
48293: PUSH
48294: LD_INT 0
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 1
48303: NEG
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: NEG
48316: PUSH
48317: LD_INT 2
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: LD_INT 2
48330: NEG
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: LD_INT 1
48341: NEG
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 2
48349: NEG
48350: PUSH
48351: LD_INT 1
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 2
48361: NEG
48362: PUSH
48363: LD_INT 2
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48385: LD_ADDR_VAR 0 48
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: LD_INT 0
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: LD_INT 1
48405: NEG
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 1
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 1
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 0
48433: PUSH
48434: LD_INT 1
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 1
48443: NEG
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 1
48454: NEG
48455: PUSH
48456: LD_INT 1
48458: NEG
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: LD_INT 2
48470: NEG
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: LD_INT 2
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: PUSH
48490: LD_INT 1
48492: NEG
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 2
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 2
48510: PUSH
48511: LD_INT 1
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48532: LD_ADDR_VAR 0 49
48536: PUSH
48537: LD_INT 0
48539: PUSH
48540: LD_INT 0
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: LD_INT 1
48552: NEG
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: LD_INT 0
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: LD_INT 1
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 0
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 1
48590: NEG
48591: PUSH
48592: LD_INT 0
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: NEG
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: LD_INT 1
48616: NEG
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 2
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 2
48634: PUSH
48635: LD_INT 1
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 2
48644: PUSH
48645: LD_INT 2
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: LD_INT 2
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48676: LD_ADDR_VAR 0 50
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: LD_INT 1
48696: NEG
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 1
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: LD_INT 1
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 1
48734: NEG
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 1
48745: NEG
48746: PUSH
48747: LD_INT 1
48749: NEG
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 2
48757: PUSH
48758: LD_INT 1
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: LD_INT 2
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: LD_INT 2
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: LD_INT 2
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 1
48797: NEG
48798: PUSH
48799: LD_INT 1
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48820: LD_ADDR_VAR 0 51
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: LD_INT 1
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: LD_INT 1
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: LD_INT 2
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: LD_INT 2
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: LD_INT 1
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 2
48932: NEG
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 2
48943: NEG
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48967: LD_ADDR_VAR 0 52
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 0
48984: PUSH
48985: LD_INT 1
48987: NEG
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: LD_INT 0
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 1
49005: PUSH
49006: LD_INT 1
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 0
49015: PUSH
49016: LD_INT 1
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: NEG
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: LD_INT 2
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 1
49060: NEG
49061: PUSH
49062: LD_INT 1
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 2
49071: NEG
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 2
49082: NEG
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 2
49094: NEG
49095: PUSH
49096: LD_INT 2
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49118: LD_ADDR_VAR 0 53
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 0
49135: PUSH
49136: LD_INT 1
49138: NEG
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 1
49146: PUSH
49147: LD_INT 0
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: LD_INT 1
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 0
49166: PUSH
49167: LD_INT 1
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 1
49176: NEG
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 1
49187: NEG
49188: PUSH
49189: LD_INT 1
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: LD_INT 2
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: LD_INT 2
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 1
49222: PUSH
49223: LD_INT 1
49225: NEG
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 2
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 2
49243: PUSH
49244: LD_INT 1
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 2
49253: PUSH
49254: LD_INT 2
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: PUSH
49264: LD_INT 2
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: LD_INT 2
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: NEG
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 2
49294: NEG
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 2
49305: NEG
49306: PUSH
49307: LD_INT 1
49309: NEG
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: LD_INT 2
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49348: LD_ADDR_VAR 0 54
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: LD_INT 0
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 0
49365: PUSH
49366: LD_INT 1
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 1
49386: PUSH
49387: LD_INT 1
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 0
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: NEG
49407: PUSH
49408: LD_INT 0
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 1
49417: NEG
49418: PUSH
49419: LD_INT 1
49421: NEG
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: LD_INT 2
49433: NEG
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: LD_INT 2
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 1
49452: PUSH
49453: LD_INT 1
49455: NEG
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 2
49463: PUSH
49464: LD_INT 0
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 2
49473: PUSH
49474: LD_INT 1
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 2
49483: PUSH
49484: LD_INT 2
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 1
49493: PUSH
49494: LD_INT 2
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: LD_INT 2
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 2
49524: NEG
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 2
49535: NEG
49536: PUSH
49537: LD_INT 1
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 2
49547: NEG
49548: PUSH
49549: LD_INT 2
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49578: LD_ADDR_VAR 0 55
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: LD_INT 0
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 1
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 1
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 0
49626: PUSH
49627: LD_INT 1
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: LD_INT 0
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 1
49647: NEG
49648: PUSH
49649: LD_INT 1
49651: NEG
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 1
49659: NEG
49660: PUSH
49661: LD_INT 2
49663: NEG
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: LD_INT 2
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: LD_INT 1
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 2
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 2
49703: PUSH
49704: LD_INT 1
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 2
49713: PUSH
49714: LD_INT 2
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: LD_INT 2
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: LD_INT 2
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 1
49743: NEG
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 2
49754: NEG
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 2
49765: NEG
49766: PUSH
49767: LD_INT 1
49769: NEG
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 2
49777: NEG
49778: PUSH
49779: LD_INT 2
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49808: LD_ADDR_VAR 0 56
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 0
49825: PUSH
49826: LD_INT 1
49828: NEG
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 1
49836: PUSH
49837: LD_INT 0
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 1
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: LD_INT 1
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 1
49866: NEG
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: LD_INT 1
49881: NEG
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 1
49889: NEG
49890: PUSH
49891: LD_INT 2
49893: NEG
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: LD_INT 2
49904: NEG
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 1
49912: PUSH
49913: LD_INT 1
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 2
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 2
49933: PUSH
49934: LD_INT 1
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 2
49943: PUSH
49944: LD_INT 2
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: LD_INT 2
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: LD_INT 2
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 1
49973: NEG
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 2
49984: NEG
49985: PUSH
49986: LD_INT 0
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 2
49995: NEG
49996: PUSH
49997: LD_INT 1
49999: NEG
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 2
50007: NEG
50008: PUSH
50009: LD_INT 2
50011: NEG
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50038: LD_ADDR_VAR 0 57
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 1
50096: NEG
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 1
50107: NEG
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: LD_INT 2
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: LD_INT 2
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 2
50153: PUSH
50154: LD_INT 0
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 2
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 2
50173: PUSH
50174: LD_INT 2
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: LD_INT 2
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 0
50193: PUSH
50194: LD_INT 2
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 1
50203: NEG
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 2
50214: NEG
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 2
50225: NEG
50226: PUSH
50227: LD_INT 1
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 2
50237: NEG
50238: PUSH
50239: LD_INT 2
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50268: LD_ADDR_VAR 0 58
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 0
50285: PUSH
50286: LD_INT 1
50288: NEG
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 1
50296: PUSH
50297: LD_INT 0
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: LD_INT 1
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 0
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: NEG
50327: PUSH
50328: LD_INT 0
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 1
50337: NEG
50338: PUSH
50339: LD_INT 1
50341: NEG
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: LD_INT 2
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: LD_INT 2
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 1
50372: PUSH
50373: LD_INT 1
50375: NEG
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 2
50383: PUSH
50384: LD_INT 0
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 2
50393: PUSH
50394: LD_INT 1
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 2
50403: PUSH
50404: LD_INT 2
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 1
50413: PUSH
50414: LD_INT 2
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: LD_INT 2
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 2
50444: NEG
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 2
50455: NEG
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 2
50467: NEG
50468: PUSH
50469: LD_INT 2
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50498: LD_ADDR_VAR 0 59
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 0
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 1
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 1
50536: PUSH
50537: LD_INT 1
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 0
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 1
50567: NEG
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50586: LD_ADDR_VAR 0 60
50590: PUSH
50591: LD_INT 0
50593: PUSH
50594: LD_INT 0
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 0
50603: PUSH
50604: LD_INT 1
50606: NEG
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 1
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 1
50655: NEG
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50674: LD_ADDR_VAR 0 61
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: LD_INT 1
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: LD_INT 1
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: NEG
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50762: LD_ADDR_VAR 0 62
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 1
50790: PUSH
50791: LD_INT 0
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 1
50800: PUSH
50801: LD_INT 1
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: LD_INT 1
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 1
50820: NEG
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: NEG
50832: PUSH
50833: LD_INT 1
50835: NEG
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50850: LD_ADDR_VAR 0 63
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: LD_INT 0
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 1
50919: NEG
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50938: LD_ADDR_VAR 0 64
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: LD_INT 1
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: LD_INT 0
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: LD_INT 1
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 0
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 1
50996: NEG
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 1
51007: NEG
51008: PUSH
51009: LD_INT 1
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: ST_TO_ADDR
// end ; 1 :
51026: GO 56923
51028: LD_INT 1
51030: DOUBLE
51031: EQUAL
51032: IFTRUE 51036
51034: GO 53659
51036: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51037: LD_ADDR_VAR 0 11
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: LD_INT 3
51048: NEG
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: LD_INT 3
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: LD_INT 2
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: LIST
51080: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51081: LD_ADDR_VAR 0 12
51085: PUSH
51086: LD_INT 2
51088: PUSH
51089: LD_INT 1
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 3
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 3
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: LIST
51121: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51122: LD_ADDR_VAR 0 13
51126: PUSH
51127: LD_INT 3
51129: PUSH
51130: LD_INT 2
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 3
51139: PUSH
51140: LD_INT 3
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 2
51149: PUSH
51150: LD_INT 3
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: LIST
51161: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51162: LD_ADDR_VAR 0 14
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: LD_INT 3
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: LD_INT 3
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: NEG
51190: PUSH
51191: LD_INT 2
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: LIST
51202: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51203: LD_ADDR_VAR 0 15
51207: PUSH
51208: LD_INT 2
51210: NEG
51211: PUSH
51212: LD_INT 1
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 3
51221: NEG
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 3
51232: NEG
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: LIST
51246: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51247: LD_ADDR_VAR 0 16
51251: PUSH
51252: LD_INT 2
51254: NEG
51255: PUSH
51256: LD_INT 3
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 3
51266: NEG
51267: PUSH
51268: LD_INT 2
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 3
51278: NEG
51279: PUSH
51280: LD_INT 3
51282: NEG
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: LIST
51292: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51293: LD_ADDR_VAR 0 17
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: LD_INT 3
51304: NEG
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: LD_INT 3
51315: NEG
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 1
51323: PUSH
51324: LD_INT 2
51326: NEG
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: LIST
51336: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51337: LD_ADDR_VAR 0 18
51341: PUSH
51342: LD_INT 2
51344: PUSH
51345: LD_INT 1
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 3
51355: PUSH
51356: LD_INT 0
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 3
51365: PUSH
51366: LD_INT 1
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: LIST
51377: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51378: LD_ADDR_VAR 0 19
51382: PUSH
51383: LD_INT 3
51385: PUSH
51386: LD_INT 2
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 3
51395: PUSH
51396: LD_INT 3
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 2
51405: PUSH
51406: LD_INT 3
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: LIST
51417: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51418: LD_ADDR_VAR 0 20
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: LD_INT 3
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 0
51435: PUSH
51436: LD_INT 3
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: NEG
51446: PUSH
51447: LD_INT 2
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: LIST
51458: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51459: LD_ADDR_VAR 0 21
51463: PUSH
51464: LD_INT 2
51466: NEG
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 3
51477: NEG
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 3
51488: NEG
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: LIST
51502: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51503: LD_ADDR_VAR 0 22
51507: PUSH
51508: LD_INT 2
51510: NEG
51511: PUSH
51512: LD_INT 3
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 3
51522: NEG
51523: PUSH
51524: LD_INT 2
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 3
51534: NEG
51535: PUSH
51536: LD_INT 3
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: LIST
51548: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51549: LD_ADDR_VAR 0 23
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: LD_INT 3
51559: NEG
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: LD_INT 4
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: PUSH
51580: LD_INT 3
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: LIST
51592: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51593: LD_ADDR_VAR 0 24
51597: PUSH
51598: LD_INT 3
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 3
51610: PUSH
51611: LD_INT 1
51613: NEG
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 4
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: LIST
51633: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51634: LD_ADDR_VAR 0 25
51638: PUSH
51639: LD_INT 3
51641: PUSH
51642: LD_INT 3
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 4
51651: PUSH
51652: LD_INT 3
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 3
51661: PUSH
51662: LD_INT 4
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: LIST
51673: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51674: LD_ADDR_VAR 0 26
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: LD_INT 3
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: LD_INT 4
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 1
51701: NEG
51702: PUSH
51703: LD_INT 3
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: LIST
51714: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51715: LD_ADDR_VAR 0 27
51719: PUSH
51720: LD_INT 3
51722: NEG
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 3
51733: NEG
51734: PUSH
51735: LD_INT 1
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 4
51744: NEG
51745: PUSH
51746: LD_INT 1
51748: NEG
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: LIST
51758: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51759: LD_ADDR_VAR 0 28
51763: PUSH
51764: LD_INT 3
51766: NEG
51767: PUSH
51768: LD_INT 3
51770: NEG
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 3
51778: NEG
51779: PUSH
51780: LD_INT 4
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 4
51790: NEG
51791: PUSH
51792: LD_INT 3
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: LIST
51804: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51805: LD_ADDR_VAR 0 29
51809: PUSH
51810: LD_INT 1
51812: NEG
51813: PUSH
51814: LD_INT 3
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: LD_INT 3
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 1
51835: PUSH
51836: LD_INT 2
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 1
51846: NEG
51847: PUSH
51848: LD_INT 4
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 0
51858: PUSH
51859: LD_INT 4
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 1
51869: PUSH
51870: LD_INT 3
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 1
51880: NEG
51881: PUSH
51882: LD_INT 5
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 0
51892: PUSH
51893: LD_INT 5
51895: NEG
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: LD_INT 4
51906: NEG
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 1
51914: NEG
51915: PUSH
51916: LD_INT 6
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: LD_INT 6
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 1
51937: PUSH
51938: LD_INT 5
51940: NEG
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51960: LD_ADDR_VAR 0 30
51964: PUSH
51965: LD_INT 2
51967: PUSH
51968: LD_INT 1
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 3
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 3
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 3
51998: PUSH
51999: LD_INT 1
52001: NEG
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 4
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 4
52019: PUSH
52020: LD_INT 1
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 4
52029: PUSH
52030: LD_INT 1
52032: NEG
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 5
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 5
52050: PUSH
52051: LD_INT 1
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 5
52060: PUSH
52061: LD_INT 1
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 6
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 6
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52103: LD_ADDR_VAR 0 31
52107: PUSH
52108: LD_INT 3
52110: PUSH
52111: LD_INT 2
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 3
52120: PUSH
52121: LD_INT 3
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 2
52130: PUSH
52131: LD_INT 3
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 4
52140: PUSH
52141: LD_INT 3
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 4
52150: PUSH
52151: LD_INT 4
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 3
52160: PUSH
52161: LD_INT 4
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 5
52170: PUSH
52171: LD_INT 4
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 5
52180: PUSH
52181: LD_INT 5
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 4
52190: PUSH
52191: LD_INT 5
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 6
52200: PUSH
52201: LD_INT 5
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 6
52210: PUSH
52211: LD_INT 6
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 5
52220: PUSH
52221: LD_INT 6
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52242: LD_ADDR_VAR 0 32
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: LD_INT 3
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: LD_INT 3
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: LD_INT 2
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 1
52280: PUSH
52281: LD_INT 4
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 0
52290: PUSH
52291: LD_INT 4
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: LD_INT 3
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 1
52311: PUSH
52312: LD_INT 5
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: LD_INT 5
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: NEG
52332: PUSH
52333: LD_INT 4
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 1
52342: PUSH
52343: LD_INT 6
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: LD_INT 6
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: NEG
52363: PUSH
52364: LD_INT 5
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52385: LD_ADDR_VAR 0 33
52389: PUSH
52390: LD_INT 2
52392: NEG
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 3
52403: NEG
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 3
52414: NEG
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 3
52426: NEG
52427: PUSH
52428: LD_INT 1
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 4
52437: NEG
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 4
52448: NEG
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 4
52460: NEG
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 5
52471: NEG
52472: PUSH
52473: LD_INT 0
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 5
52482: NEG
52483: PUSH
52484: LD_INT 1
52486: NEG
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 5
52494: NEG
52495: PUSH
52496: LD_INT 1
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 6
52505: NEG
52506: PUSH
52507: LD_INT 0
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 6
52516: NEG
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52540: LD_ADDR_VAR 0 34
52544: PUSH
52545: LD_INT 2
52547: NEG
52548: PUSH
52549: LD_INT 3
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 3
52559: NEG
52560: PUSH
52561: LD_INT 2
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 3
52571: NEG
52572: PUSH
52573: LD_INT 3
52575: NEG
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 3
52583: NEG
52584: PUSH
52585: LD_INT 4
52587: NEG
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 4
52595: NEG
52596: PUSH
52597: LD_INT 3
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 4
52607: NEG
52608: PUSH
52609: LD_INT 4
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 4
52619: NEG
52620: PUSH
52621: LD_INT 5
52623: NEG
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 5
52631: NEG
52632: PUSH
52633: LD_INT 4
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 5
52643: NEG
52644: PUSH
52645: LD_INT 5
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 5
52655: NEG
52656: PUSH
52657: LD_INT 6
52659: NEG
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 6
52667: NEG
52668: PUSH
52669: LD_INT 5
52671: NEG
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 6
52679: NEG
52680: PUSH
52681: LD_INT 6
52683: NEG
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52703: LD_ADDR_VAR 0 41
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: LD_INT 2
52713: NEG
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 1
52721: NEG
52722: PUSH
52723: LD_INT 3
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 1
52733: PUSH
52734: LD_INT 2
52736: NEG
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: LIST
52746: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52747: LD_ADDR_VAR 0 42
52751: PUSH
52752: LD_INT 2
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 2
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 3
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: LIST
52787: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52788: LD_ADDR_VAR 0 43
52792: PUSH
52793: LD_INT 2
52795: PUSH
52796: LD_INT 2
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 3
52805: PUSH
52806: LD_INT 2
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 2
52815: PUSH
52816: LD_INT 3
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: LIST
52827: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52828: LD_ADDR_VAR 0 44
52832: PUSH
52833: LD_INT 0
52835: PUSH
52836: LD_INT 2
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 1
52845: PUSH
52846: LD_INT 3
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 1
52855: NEG
52856: PUSH
52857: LD_INT 2
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: LIST
52868: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52869: LD_ADDR_VAR 0 45
52873: PUSH
52874: LD_INT 2
52876: NEG
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 2
52887: NEG
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 3
52898: NEG
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: LIST
52912: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52913: LD_ADDR_VAR 0 46
52917: PUSH
52918: LD_INT 2
52920: NEG
52921: PUSH
52922: LD_INT 2
52924: NEG
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 2
52932: NEG
52933: PUSH
52934: LD_INT 3
52936: NEG
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 3
52944: NEG
52945: PUSH
52946: LD_INT 2
52948: NEG
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: LIST
52958: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52959: LD_ADDR_VAR 0 47
52963: PUSH
52964: LD_INT 2
52966: NEG
52967: PUSH
52968: LD_INT 3
52970: NEG
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 1
52978: NEG
52979: PUSH
52980: LD_INT 3
52982: NEG
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52992: LD_ADDR_VAR 0 48
52996: PUSH
52997: LD_INT 1
52999: PUSH
53000: LD_INT 2
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 2
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53023: LD_ADDR_VAR 0 49
53027: PUSH
53028: LD_INT 3
53030: PUSH
53031: LD_INT 1
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 3
53040: PUSH
53041: LD_INT 2
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53052: LD_ADDR_VAR 0 50
53056: PUSH
53057: LD_INT 2
53059: PUSH
53060: LD_INT 3
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: PUSH
53070: LD_INT 3
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53081: LD_ADDR_VAR 0 51
53085: PUSH
53086: LD_INT 1
53088: NEG
53089: PUSH
53090: LD_INT 2
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 2
53099: NEG
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53112: LD_ADDR_VAR 0 52
53116: PUSH
53117: LD_INT 3
53119: NEG
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 3
53131: NEG
53132: PUSH
53133: LD_INT 2
53135: NEG
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53145: LD_ADDR_VAR 0 53
53149: PUSH
53150: LD_INT 1
53152: NEG
53153: PUSH
53154: LD_INT 3
53156: NEG
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: LD_INT 3
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: LD_INT 2
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: LIST
53188: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53189: LD_ADDR_VAR 0 54
53193: PUSH
53194: LD_INT 2
53196: PUSH
53197: LD_INT 1
53199: NEG
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 3
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 3
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: LIST
53229: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53230: LD_ADDR_VAR 0 55
53234: PUSH
53235: LD_INT 3
53237: PUSH
53238: LD_INT 2
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 3
53247: PUSH
53248: LD_INT 3
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 2
53257: PUSH
53258: LD_INT 3
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: LIST
53269: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53270: LD_ADDR_VAR 0 56
53274: PUSH
53275: LD_INT 1
53277: PUSH
53278: LD_INT 3
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: LD_INT 3
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 1
53297: NEG
53298: PUSH
53299: LD_INT 2
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: LIST
53310: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53311: LD_ADDR_VAR 0 57
53315: PUSH
53316: LD_INT 2
53318: NEG
53319: PUSH
53320: LD_INT 1
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 3
53329: NEG
53330: PUSH
53331: LD_INT 0
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 3
53340: NEG
53341: PUSH
53342: LD_INT 1
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: LIST
53354: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53355: LD_ADDR_VAR 0 58
53359: PUSH
53360: LD_INT 2
53362: NEG
53363: PUSH
53364: LD_INT 3
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 3
53374: NEG
53375: PUSH
53376: LD_INT 2
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 3
53386: NEG
53387: PUSH
53388: LD_INT 3
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: LIST
53400: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53401: LD_ADDR_VAR 0 59
53405: PUSH
53406: LD_INT 1
53408: NEG
53409: PUSH
53410: LD_INT 2
53412: NEG
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: LD_INT 2
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: LD_INT 1
53434: NEG
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: LIST
53444: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53445: LD_ADDR_VAR 0 60
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: LD_INT 1
53455: NEG
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 2
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 2
53473: PUSH
53474: LD_INT 1
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: LIST
53485: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53486: LD_ADDR_VAR 0 61
53490: PUSH
53491: LD_INT 2
53493: PUSH
53494: LD_INT 1
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 2
53503: PUSH
53504: LD_INT 2
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 1
53513: PUSH
53514: LD_INT 2
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: LIST
53525: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53526: LD_ADDR_VAR 0 62
53530: PUSH
53531: LD_INT 1
53533: PUSH
53534: LD_INT 2
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: LD_INT 2
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: LD_INT 1
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: LIST
53566: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53567: LD_ADDR_VAR 0 63
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: LD_INT 1
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 2
53585: NEG
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 2
53596: NEG
53597: PUSH
53598: LD_INT 1
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: LIST
53610: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53611: LD_ADDR_VAR 0 64
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: LD_INT 2
53622: NEG
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 2
53630: NEG
53631: PUSH
53632: LD_INT 1
53634: NEG
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 2
53642: NEG
53643: PUSH
53644: LD_INT 2
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: LIST
53656: ST_TO_ADDR
// end ; 2 :
53657: GO 56923
53659: LD_INT 2
53661: DOUBLE
53662: EQUAL
53663: IFTRUE 53667
53665: GO 56922
53667: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53668: LD_ADDR_VAR 0 29
53672: PUSH
53673: LD_INT 4
53675: PUSH
53676: LD_INT 0
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 4
53685: PUSH
53686: LD_INT 1
53688: NEG
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 5
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 5
53706: PUSH
53707: LD_INT 1
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 4
53716: PUSH
53717: LD_INT 1
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 3
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 3
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 3
53747: PUSH
53748: LD_INT 2
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 5
53758: PUSH
53759: LD_INT 2
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 3
53768: PUSH
53769: LD_INT 3
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 3
53778: PUSH
53779: LD_INT 2
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 4
53788: PUSH
53789: LD_INT 3
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 4
53798: PUSH
53799: LD_INT 4
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 3
53808: PUSH
53809: LD_INT 4
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 2
53818: PUSH
53819: LD_INT 3
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 2
53828: PUSH
53829: LD_INT 2
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 4
53838: PUSH
53839: LD_INT 2
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 2
53848: PUSH
53849: LD_INT 4
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: LD_INT 4
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: LD_INT 3
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 1
53878: PUSH
53879: LD_INT 4
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 1
53888: PUSH
53889: LD_INT 5
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: LD_INT 5
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 1
53908: NEG
53909: PUSH
53910: LD_INT 4
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: LD_INT 3
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 2
53930: PUSH
53931: LD_INT 5
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 2
53940: NEG
53941: PUSH
53942: LD_INT 3
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 3
53951: NEG
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 3
53962: NEG
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 2
53974: NEG
53975: PUSH
53976: LD_INT 0
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 2
53985: NEG
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 3
53996: NEG
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 4
54007: NEG
54008: PUSH
54009: LD_INT 0
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 4
54018: NEG
54019: PUSH
54020: LD_INT 1
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 4
54030: NEG
54031: PUSH
54032: LD_INT 2
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: LD_INT 2
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 4
54053: NEG
54054: PUSH
54055: LD_INT 4
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 4
54065: NEG
54066: PUSH
54067: LD_INT 5
54069: NEG
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 3
54077: NEG
54078: PUSH
54079: LD_INT 4
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 3
54089: NEG
54090: PUSH
54091: LD_INT 3
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 4
54101: NEG
54102: PUSH
54103: LD_INT 3
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 5
54113: NEG
54114: PUSH
54115: LD_INT 4
54117: NEG
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 5
54125: NEG
54126: PUSH
54127: LD_INT 5
54129: NEG
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 3
54137: NEG
54138: PUSH
54139: LD_INT 5
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 5
54149: NEG
54150: PUSH
54151: LD_INT 3
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54206: LD_ADDR_VAR 0 30
54210: PUSH
54211: LD_INT 4
54213: PUSH
54214: LD_INT 4
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 4
54223: PUSH
54224: LD_INT 3
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 5
54233: PUSH
54234: LD_INT 4
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 5
54243: PUSH
54244: LD_INT 5
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 4
54253: PUSH
54254: LD_INT 5
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 3
54263: PUSH
54264: LD_INT 4
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 3
54273: PUSH
54274: LD_INT 3
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 5
54283: PUSH
54284: LD_INT 3
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 3
54293: PUSH
54294: LD_INT 5
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: LD_INT 3
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 0
54313: PUSH
54314: LD_INT 2
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 1
54323: PUSH
54324: LD_INT 3
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: LD_INT 4
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: LD_INT 4
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 1
54353: NEG
54354: PUSH
54355: LD_INT 3
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 1
54364: NEG
54365: PUSH
54366: LD_INT 2
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 2
54375: PUSH
54376: LD_INT 4
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 2
54385: NEG
54386: PUSH
54387: LD_INT 2
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 4
54396: NEG
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 4
54407: NEG
54408: PUSH
54409: LD_INT 1
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 3
54419: NEG
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 3
54430: NEG
54431: PUSH
54432: LD_INT 1
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 4
54441: NEG
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 5
54452: NEG
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 5
54463: NEG
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 5
54475: NEG
54476: PUSH
54477: LD_INT 2
54479: NEG
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 3
54487: NEG
54488: PUSH
54489: LD_INT 2
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 3
54498: NEG
54499: PUSH
54500: LD_INT 3
54502: NEG
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 3
54510: NEG
54511: PUSH
54512: LD_INT 4
54514: NEG
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 2
54522: NEG
54523: PUSH
54524: LD_INT 3
54526: NEG
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 2
54534: NEG
54535: PUSH
54536: LD_INT 2
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 3
54546: NEG
54547: PUSH
54548: LD_INT 2
54550: NEG
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 4
54558: NEG
54559: PUSH
54560: LD_INT 3
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 4
54570: NEG
54571: PUSH
54572: LD_INT 4
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 2
54582: NEG
54583: PUSH
54584: LD_INT 4
54586: NEG
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 4
54594: NEG
54595: PUSH
54596: LD_INT 2
54598: NEG
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: LD_INT 4
54609: NEG
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: LD_INT 5
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: LD_INT 4
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: LD_INT 3
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: LD_INT 3
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: LD_INT 4
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 1
54673: NEG
54674: PUSH
54675: LD_INT 5
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 2
54685: PUSH
54686: LD_INT 3
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 2
54696: NEG
54697: PUSH
54698: LD_INT 5
54700: NEG
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54753: LD_ADDR_VAR 0 31
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: LD_INT 4
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 0
54770: PUSH
54771: LD_INT 3
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 1
54780: PUSH
54781: LD_INT 4
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: LD_INT 5
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: LD_INT 5
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 1
54810: NEG
54811: PUSH
54812: LD_INT 4
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: NEG
54822: PUSH
54823: LD_INT 3
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 2
54832: PUSH
54833: LD_INT 5
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 2
54842: NEG
54843: PUSH
54844: LD_INT 3
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 3
54853: NEG
54854: PUSH
54855: LD_INT 0
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 3
54864: NEG
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 2
54876: NEG
54877: PUSH
54878: LD_INT 0
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 2
54887: NEG
54888: PUSH
54889: LD_INT 1
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 3
54898: NEG
54899: PUSH
54900: LD_INT 1
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 4
54909: NEG
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 4
54920: NEG
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 4
54932: NEG
54933: PUSH
54934: LD_INT 2
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 2
54944: NEG
54945: PUSH
54946: LD_INT 2
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 4
54955: NEG
54956: PUSH
54957: LD_INT 4
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 4
54967: NEG
54968: PUSH
54969: LD_INT 5
54971: NEG
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 3
54979: NEG
54980: PUSH
54981: LD_INT 4
54983: NEG
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 3
54991: NEG
54992: PUSH
54993: LD_INT 3
54995: NEG
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 4
55003: NEG
55004: PUSH
55005: LD_INT 3
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 5
55015: NEG
55016: PUSH
55017: LD_INT 4
55019: NEG
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 5
55027: NEG
55028: PUSH
55029: LD_INT 5
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 3
55039: NEG
55040: PUSH
55041: LD_INT 5
55043: NEG
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 5
55051: NEG
55052: PUSH
55053: LD_INT 3
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: LD_INT 3
55066: NEG
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: LD_INT 4
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: LD_INT 3
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 1
55096: PUSH
55097: LD_INT 2
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 0
55107: PUSH
55108: LD_INT 2
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: LD_INT 3
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 1
55130: NEG
55131: PUSH
55132: LD_INT 4
55134: NEG
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 2
55142: PUSH
55143: LD_INT 2
55145: NEG
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 2
55153: NEG
55154: PUSH
55155: LD_INT 4
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 4
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 4
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 5
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 5
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 4
55206: PUSH
55207: LD_INT 1
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 3
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 3
55226: PUSH
55227: LD_INT 1
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 3
55237: PUSH
55238: LD_INT 2
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 5
55248: PUSH
55249: LD_INT 2
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55303: LD_ADDR_VAR 0 32
55307: PUSH
55308: LD_INT 4
55310: NEG
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 4
55321: NEG
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 3
55333: NEG
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 3
55344: NEG
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 4
55355: NEG
55356: PUSH
55357: LD_INT 1
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 5
55366: NEG
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 5
55377: NEG
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 5
55389: NEG
55390: PUSH
55391: LD_INT 2
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 3
55401: NEG
55402: PUSH
55403: LD_INT 2
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 3
55412: NEG
55413: PUSH
55414: LD_INT 3
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 3
55424: NEG
55425: PUSH
55426: LD_INT 4
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 2
55436: NEG
55437: PUSH
55438: LD_INT 3
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 2
55448: NEG
55449: PUSH
55450: LD_INT 2
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 3
55460: NEG
55461: PUSH
55462: LD_INT 2
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 4
55472: NEG
55473: PUSH
55474: LD_INT 3
55476: NEG
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 4
55484: NEG
55485: PUSH
55486: LD_INT 4
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 2
55496: NEG
55497: PUSH
55498: LD_INT 4
55500: NEG
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 4
55508: NEG
55509: PUSH
55510: LD_INT 2
55512: NEG
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: LD_INT 4
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: LD_INT 5
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: LD_INT 4
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: PUSH
55554: LD_INT 3
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 0
55564: PUSH
55565: LD_INT 3
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 1
55575: NEG
55576: PUSH
55577: LD_INT 4
55579: NEG
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 1
55587: NEG
55588: PUSH
55589: LD_INT 5
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 2
55599: PUSH
55600: LD_INT 3
55602: NEG
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 2
55610: NEG
55611: PUSH
55612: LD_INT 5
55614: NEG
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 3
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 3
55632: PUSH
55633: LD_INT 1
55635: NEG
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 4
55643: PUSH
55644: LD_INT 0
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 4
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 3
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 2
55673: PUSH
55674: LD_INT 0
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 2
55683: PUSH
55684: LD_INT 1
55686: NEG
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 2
55694: PUSH
55695: LD_INT 2
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 4
55705: PUSH
55706: LD_INT 2
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 4
55715: PUSH
55716: LD_INT 4
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 4
55725: PUSH
55726: LD_INT 3
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 5
55735: PUSH
55736: LD_INT 4
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 5
55745: PUSH
55746: LD_INT 5
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 4
55755: PUSH
55756: LD_INT 5
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 3
55765: PUSH
55766: LD_INT 4
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 3
55775: PUSH
55776: LD_INT 3
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 5
55785: PUSH
55786: LD_INT 3
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 3
55795: PUSH
55796: LD_INT 5
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55850: LD_ADDR_VAR 0 33
55854: PUSH
55855: LD_INT 4
55857: NEG
55858: PUSH
55859: LD_INT 4
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 4
55869: NEG
55870: PUSH
55871: LD_INT 5
55873: NEG
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 3
55881: NEG
55882: PUSH
55883: LD_INT 4
55885: NEG
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 3
55893: NEG
55894: PUSH
55895: LD_INT 3
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 4
55905: NEG
55906: PUSH
55907: LD_INT 3
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 5
55917: NEG
55918: PUSH
55919: LD_INT 4
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 5
55929: NEG
55930: PUSH
55931: LD_INT 5
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 3
55941: NEG
55942: PUSH
55943: LD_INT 5
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 5
55953: NEG
55954: PUSH
55955: LD_INT 3
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: LD_INT 3
55968: NEG
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: LD_INT 4
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: LD_INT 3
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 1
55998: PUSH
55999: LD_INT 2
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: LD_INT 2
56012: NEG
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 1
56020: NEG
56021: PUSH
56022: LD_INT 3
56024: NEG
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: LD_INT 4
56036: NEG
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 2
56044: PUSH
56045: LD_INT 2
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 2
56055: NEG
56056: PUSH
56057: LD_INT 4
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 4
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 4
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 5
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 5
56098: PUSH
56099: LD_INT 1
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 4
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 3
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 3
56128: PUSH
56129: LD_INT 1
56131: NEG
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 3
56139: PUSH
56140: LD_INT 2
56142: NEG
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 5
56150: PUSH
56151: LD_INT 2
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 3
56160: PUSH
56161: LD_INT 3
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 3
56170: PUSH
56171: LD_INT 2
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 4
56180: PUSH
56181: LD_INT 3
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 4
56190: PUSH
56191: LD_INT 4
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 3
56200: PUSH
56201: LD_INT 4
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 2
56210: PUSH
56211: LD_INT 3
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 2
56220: PUSH
56221: LD_INT 2
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 4
56230: PUSH
56231: LD_INT 2
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 2
56240: PUSH
56241: LD_INT 4
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 0
56250: PUSH
56251: LD_INT 4
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: LD_INT 3
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 1
56270: PUSH
56271: LD_INT 4
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 1
56280: PUSH
56281: LD_INT 5
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: LD_INT 5
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 1
56300: NEG
56301: PUSH
56302: LD_INT 4
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 1
56311: NEG
56312: PUSH
56313: LD_INT 3
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 2
56322: PUSH
56323: LD_INT 5
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 2
56332: NEG
56333: PUSH
56334: LD_INT 3
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56388: LD_ADDR_VAR 0 34
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: LD_INT 4
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: LD_INT 5
56409: NEG
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 1
56417: PUSH
56418: LD_INT 4
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 1
56428: PUSH
56429: LD_INT 3
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 0
56439: PUSH
56440: LD_INT 3
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 1
56450: NEG
56451: PUSH
56452: LD_INT 4
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: NEG
56463: PUSH
56464: LD_INT 5
56466: NEG
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 2
56474: PUSH
56475: LD_INT 3
56477: NEG
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 2
56485: NEG
56486: PUSH
56487: LD_INT 5
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 3
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 3
56507: PUSH
56508: LD_INT 1
56510: NEG
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 4
56518: PUSH
56519: LD_INT 0
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 4
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 3
56538: PUSH
56539: LD_INT 1
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 2
56548: PUSH
56549: LD_INT 0
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 2
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 2
56569: PUSH
56570: LD_INT 2
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 4
56580: PUSH
56581: LD_INT 2
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 4
56590: PUSH
56591: LD_INT 4
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 4
56600: PUSH
56601: LD_INT 3
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 5
56610: PUSH
56611: LD_INT 4
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 5
56620: PUSH
56621: LD_INT 5
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 4
56630: PUSH
56631: LD_INT 5
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 3
56640: PUSH
56641: LD_INT 4
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 3
56650: PUSH
56651: LD_INT 3
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 5
56660: PUSH
56661: LD_INT 3
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 3
56670: PUSH
56671: LD_INT 5
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: LD_INT 3
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: LD_INT 2
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 1
56700: PUSH
56701: LD_INT 3
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: LD_INT 4
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: LD_INT 4
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 1
56730: NEG
56731: PUSH
56732: LD_INT 3
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 1
56741: NEG
56742: PUSH
56743: LD_INT 2
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 2
56752: PUSH
56753: LD_INT 4
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 2
56762: NEG
56763: PUSH
56764: LD_INT 2
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 4
56773: NEG
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 4
56784: NEG
56785: PUSH
56786: LD_INT 1
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 3
56796: NEG
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 3
56807: NEG
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 4
56818: NEG
56819: PUSH
56820: LD_INT 1
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 5
56829: NEG
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 5
56840: NEG
56841: PUSH
56842: LD_INT 1
56844: NEG
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 5
56852: NEG
56853: PUSH
56854: LD_INT 2
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 3
56864: NEG
56865: PUSH
56866: LD_INT 2
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: ST_TO_ADDR
// end ; end ;
56920: GO 56923
56922: POP
// case btype of b_depot , b_warehouse :
56923: LD_VAR 0 1
56927: PUSH
56928: LD_INT 0
56930: DOUBLE
56931: EQUAL
56932: IFTRUE 56942
56934: LD_INT 1
56936: DOUBLE
56937: EQUAL
56938: IFTRUE 56942
56940: GO 57143
56942: POP
// case nation of nation_american :
56943: LD_VAR 0 5
56947: PUSH
56948: LD_INT 1
56950: DOUBLE
56951: EQUAL
56952: IFTRUE 56956
56954: GO 57012
56956: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56957: LD_ADDR_VAR 0 9
56961: PUSH
56962: LD_VAR 0 11
56966: PUSH
56967: LD_VAR 0 12
56971: PUSH
56972: LD_VAR 0 13
56976: PUSH
56977: LD_VAR 0 14
56981: PUSH
56982: LD_VAR 0 15
56986: PUSH
56987: LD_VAR 0 16
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: PUSH
57000: LD_VAR 0 4
57004: PUSH
57005: LD_INT 1
57007: PLUS
57008: ARRAY
57009: ST_TO_ADDR
57010: GO 57141
57012: LD_INT 2
57014: DOUBLE
57015: EQUAL
57016: IFTRUE 57020
57018: GO 57076
57020: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57021: LD_ADDR_VAR 0 9
57025: PUSH
57026: LD_VAR 0 17
57030: PUSH
57031: LD_VAR 0 18
57035: PUSH
57036: LD_VAR 0 19
57040: PUSH
57041: LD_VAR 0 20
57045: PUSH
57046: LD_VAR 0 21
57050: PUSH
57051: LD_VAR 0 22
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: PUSH
57064: LD_VAR 0 4
57068: PUSH
57069: LD_INT 1
57071: PLUS
57072: ARRAY
57073: ST_TO_ADDR
57074: GO 57141
57076: LD_INT 3
57078: DOUBLE
57079: EQUAL
57080: IFTRUE 57084
57082: GO 57140
57084: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57085: LD_ADDR_VAR 0 9
57089: PUSH
57090: LD_VAR 0 23
57094: PUSH
57095: LD_VAR 0 24
57099: PUSH
57100: LD_VAR 0 25
57104: PUSH
57105: LD_VAR 0 26
57109: PUSH
57110: LD_VAR 0 27
57114: PUSH
57115: LD_VAR 0 28
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: PUSH
57128: LD_VAR 0 4
57132: PUSH
57133: LD_INT 1
57135: PLUS
57136: ARRAY
57137: ST_TO_ADDR
57138: GO 57141
57140: POP
57141: GO 57696
57143: LD_INT 2
57145: DOUBLE
57146: EQUAL
57147: IFTRUE 57157
57149: LD_INT 3
57151: DOUBLE
57152: EQUAL
57153: IFTRUE 57157
57155: GO 57213
57157: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57158: LD_ADDR_VAR 0 9
57162: PUSH
57163: LD_VAR 0 29
57167: PUSH
57168: LD_VAR 0 30
57172: PUSH
57173: LD_VAR 0 31
57177: PUSH
57178: LD_VAR 0 32
57182: PUSH
57183: LD_VAR 0 33
57187: PUSH
57188: LD_VAR 0 34
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: PUSH
57201: LD_VAR 0 4
57205: PUSH
57206: LD_INT 1
57208: PLUS
57209: ARRAY
57210: ST_TO_ADDR
57211: GO 57696
57213: LD_INT 16
57215: DOUBLE
57216: EQUAL
57217: IFTRUE 57275
57219: LD_INT 17
57221: DOUBLE
57222: EQUAL
57223: IFTRUE 57275
57225: LD_INT 18
57227: DOUBLE
57228: EQUAL
57229: IFTRUE 57275
57231: LD_INT 19
57233: DOUBLE
57234: EQUAL
57235: IFTRUE 57275
57237: LD_INT 22
57239: DOUBLE
57240: EQUAL
57241: IFTRUE 57275
57243: LD_INT 20
57245: DOUBLE
57246: EQUAL
57247: IFTRUE 57275
57249: LD_INT 21
57251: DOUBLE
57252: EQUAL
57253: IFTRUE 57275
57255: LD_INT 23
57257: DOUBLE
57258: EQUAL
57259: IFTRUE 57275
57261: LD_INT 24
57263: DOUBLE
57264: EQUAL
57265: IFTRUE 57275
57267: LD_INT 25
57269: DOUBLE
57270: EQUAL
57271: IFTRUE 57275
57273: GO 57331
57275: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57276: LD_ADDR_VAR 0 9
57280: PUSH
57281: LD_VAR 0 35
57285: PUSH
57286: LD_VAR 0 36
57290: PUSH
57291: LD_VAR 0 37
57295: PUSH
57296: LD_VAR 0 38
57300: PUSH
57301: LD_VAR 0 39
57305: PUSH
57306: LD_VAR 0 40
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: PUSH
57319: LD_VAR 0 4
57323: PUSH
57324: LD_INT 1
57326: PLUS
57327: ARRAY
57328: ST_TO_ADDR
57329: GO 57696
57331: LD_INT 6
57333: DOUBLE
57334: EQUAL
57335: IFTRUE 57387
57337: LD_INT 7
57339: DOUBLE
57340: EQUAL
57341: IFTRUE 57387
57343: LD_INT 8
57345: DOUBLE
57346: EQUAL
57347: IFTRUE 57387
57349: LD_INT 13
57351: DOUBLE
57352: EQUAL
57353: IFTRUE 57387
57355: LD_INT 12
57357: DOUBLE
57358: EQUAL
57359: IFTRUE 57387
57361: LD_INT 15
57363: DOUBLE
57364: EQUAL
57365: IFTRUE 57387
57367: LD_INT 11
57369: DOUBLE
57370: EQUAL
57371: IFTRUE 57387
57373: LD_INT 14
57375: DOUBLE
57376: EQUAL
57377: IFTRUE 57387
57379: LD_INT 10
57381: DOUBLE
57382: EQUAL
57383: IFTRUE 57387
57385: GO 57443
57387: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57388: LD_ADDR_VAR 0 9
57392: PUSH
57393: LD_VAR 0 41
57397: PUSH
57398: LD_VAR 0 42
57402: PUSH
57403: LD_VAR 0 43
57407: PUSH
57408: LD_VAR 0 44
57412: PUSH
57413: LD_VAR 0 45
57417: PUSH
57418: LD_VAR 0 46
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: PUSH
57431: LD_VAR 0 4
57435: PUSH
57436: LD_INT 1
57438: PLUS
57439: ARRAY
57440: ST_TO_ADDR
57441: GO 57696
57443: LD_INT 36
57445: DOUBLE
57446: EQUAL
57447: IFTRUE 57451
57449: GO 57507
57451: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57452: LD_ADDR_VAR 0 9
57456: PUSH
57457: LD_VAR 0 47
57461: PUSH
57462: LD_VAR 0 48
57466: PUSH
57467: LD_VAR 0 49
57471: PUSH
57472: LD_VAR 0 50
57476: PUSH
57477: LD_VAR 0 51
57481: PUSH
57482: LD_VAR 0 52
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: PUSH
57495: LD_VAR 0 4
57499: PUSH
57500: LD_INT 1
57502: PLUS
57503: ARRAY
57504: ST_TO_ADDR
57505: GO 57696
57507: LD_INT 4
57509: DOUBLE
57510: EQUAL
57511: IFTRUE 57533
57513: LD_INT 5
57515: DOUBLE
57516: EQUAL
57517: IFTRUE 57533
57519: LD_INT 34
57521: DOUBLE
57522: EQUAL
57523: IFTRUE 57533
57525: LD_INT 37
57527: DOUBLE
57528: EQUAL
57529: IFTRUE 57533
57531: GO 57589
57533: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57534: LD_ADDR_VAR 0 9
57538: PUSH
57539: LD_VAR 0 53
57543: PUSH
57544: LD_VAR 0 54
57548: PUSH
57549: LD_VAR 0 55
57553: PUSH
57554: LD_VAR 0 56
57558: PUSH
57559: LD_VAR 0 57
57563: PUSH
57564: LD_VAR 0 58
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: PUSH
57577: LD_VAR 0 4
57581: PUSH
57582: LD_INT 1
57584: PLUS
57585: ARRAY
57586: ST_TO_ADDR
57587: GO 57696
57589: LD_INT 31
57591: DOUBLE
57592: EQUAL
57593: IFTRUE 57639
57595: LD_INT 32
57597: DOUBLE
57598: EQUAL
57599: IFTRUE 57639
57601: LD_INT 33
57603: DOUBLE
57604: EQUAL
57605: IFTRUE 57639
57607: LD_INT 27
57609: DOUBLE
57610: EQUAL
57611: IFTRUE 57639
57613: LD_INT 26
57615: DOUBLE
57616: EQUAL
57617: IFTRUE 57639
57619: LD_INT 28
57621: DOUBLE
57622: EQUAL
57623: IFTRUE 57639
57625: LD_INT 29
57627: DOUBLE
57628: EQUAL
57629: IFTRUE 57639
57631: LD_INT 30
57633: DOUBLE
57634: EQUAL
57635: IFTRUE 57639
57637: GO 57695
57639: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57640: LD_ADDR_VAR 0 9
57644: PUSH
57645: LD_VAR 0 59
57649: PUSH
57650: LD_VAR 0 60
57654: PUSH
57655: LD_VAR 0 61
57659: PUSH
57660: LD_VAR 0 62
57664: PUSH
57665: LD_VAR 0 63
57669: PUSH
57670: LD_VAR 0 64
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: PUSH
57683: LD_VAR 0 4
57687: PUSH
57688: LD_INT 1
57690: PLUS
57691: ARRAY
57692: ST_TO_ADDR
57693: GO 57696
57695: POP
// temp_list2 = [ ] ;
57696: LD_ADDR_VAR 0 10
57700: PUSH
57701: EMPTY
57702: ST_TO_ADDR
// for i in temp_list do
57703: LD_ADDR_VAR 0 8
57707: PUSH
57708: LD_VAR 0 9
57712: PUSH
57713: FOR_IN
57714: IFFALSE 57766
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57716: LD_ADDR_VAR 0 10
57720: PUSH
57721: LD_VAR 0 10
57725: PUSH
57726: LD_VAR 0 8
57730: PUSH
57731: LD_INT 1
57733: ARRAY
57734: PUSH
57735: LD_VAR 0 2
57739: PLUS
57740: PUSH
57741: LD_VAR 0 8
57745: PUSH
57746: LD_INT 2
57748: ARRAY
57749: PUSH
57750: LD_VAR 0 3
57754: PLUS
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: EMPTY
57761: LIST
57762: ADD
57763: ST_TO_ADDR
57764: GO 57713
57766: POP
57767: POP
// result = temp_list2 ;
57768: LD_ADDR_VAR 0 7
57772: PUSH
57773: LD_VAR 0 10
57777: ST_TO_ADDR
// end ;
57778: LD_VAR 0 7
57782: RET
// export function EnemyInRange ( unit , dist ) ; begin
57783: LD_INT 0
57785: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57786: LD_ADDR_VAR 0 3
57790: PUSH
57791: LD_VAR 0 1
57795: PPUSH
57796: CALL_OW 255
57800: PPUSH
57801: LD_VAR 0 1
57805: PPUSH
57806: CALL_OW 250
57810: PPUSH
57811: LD_VAR 0 1
57815: PPUSH
57816: CALL_OW 251
57820: PPUSH
57821: LD_VAR 0 2
57825: PPUSH
57826: CALL 31179 0 4
57830: PUSH
57831: LD_INT 4
57833: ARRAY
57834: ST_TO_ADDR
// end ;
57835: LD_VAR 0 3
57839: RET
// export function PlayerSeeMe ( unit ) ; begin
57840: LD_INT 0
57842: PPUSH
// result := See ( your_side , unit ) ;
57843: LD_ADDR_VAR 0 2
57847: PUSH
57848: LD_OWVAR 2
57852: PPUSH
57853: LD_VAR 0 1
57857: PPUSH
57858: CALL_OW 292
57862: ST_TO_ADDR
// end ;
57863: LD_VAR 0 2
57867: RET
// export function ReverseDir ( unit ) ; begin
57868: LD_INT 0
57870: PPUSH
// if not unit then
57871: LD_VAR 0 1
57875: NOT
57876: IFFALSE 57880
// exit ;
57878: GO 57903
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57880: LD_ADDR_VAR 0 2
57884: PUSH
57885: LD_VAR 0 1
57889: PPUSH
57890: CALL_OW 254
57894: PUSH
57895: LD_INT 3
57897: PLUS
57898: PUSH
57899: LD_INT 6
57901: MOD
57902: ST_TO_ADDR
// end ;
57903: LD_VAR 0 2
57907: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57908: LD_INT 0
57910: PPUSH
57911: PPUSH
57912: PPUSH
57913: PPUSH
57914: PPUSH
// if not hexes then
57915: LD_VAR 0 2
57919: NOT
57920: IFFALSE 57924
// exit ;
57922: GO 58072
// dist := 9999 ;
57924: LD_ADDR_VAR 0 5
57928: PUSH
57929: LD_INT 9999
57931: ST_TO_ADDR
// for i = 1 to hexes do
57932: LD_ADDR_VAR 0 4
57936: PUSH
57937: DOUBLE
57938: LD_INT 1
57940: DEC
57941: ST_TO_ADDR
57942: LD_VAR 0 2
57946: PUSH
57947: FOR_TO
57948: IFFALSE 58060
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57950: LD_VAR 0 1
57954: PPUSH
57955: LD_VAR 0 2
57959: PUSH
57960: LD_VAR 0 4
57964: ARRAY
57965: PUSH
57966: LD_INT 1
57968: ARRAY
57969: PPUSH
57970: LD_VAR 0 2
57974: PUSH
57975: LD_VAR 0 4
57979: ARRAY
57980: PUSH
57981: LD_INT 2
57983: ARRAY
57984: PPUSH
57985: CALL_OW 297
57989: PUSH
57990: LD_VAR 0 5
57994: LESS
57995: IFFALSE 58058
// begin hex := hexes [ i ] ;
57997: LD_ADDR_VAR 0 7
58001: PUSH
58002: LD_VAR 0 2
58006: PUSH
58007: LD_VAR 0 4
58011: ARRAY
58012: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58013: LD_ADDR_VAR 0 5
58017: PUSH
58018: LD_VAR 0 1
58022: PPUSH
58023: LD_VAR 0 2
58027: PUSH
58028: LD_VAR 0 4
58032: ARRAY
58033: PUSH
58034: LD_INT 1
58036: ARRAY
58037: PPUSH
58038: LD_VAR 0 2
58042: PUSH
58043: LD_VAR 0 4
58047: ARRAY
58048: PUSH
58049: LD_INT 2
58051: ARRAY
58052: PPUSH
58053: CALL_OW 297
58057: ST_TO_ADDR
// end ; end ;
58058: GO 57947
58060: POP
58061: POP
// result := hex ;
58062: LD_ADDR_VAR 0 3
58066: PUSH
58067: LD_VAR 0 7
58071: ST_TO_ADDR
// end ;
58072: LD_VAR 0 3
58076: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58077: LD_INT 0
58079: PPUSH
58080: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58081: LD_VAR 0 1
58085: NOT
58086: PUSH
58087: LD_VAR 0 1
58091: PUSH
58092: LD_INT 21
58094: PUSH
58095: LD_INT 2
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 23
58104: PUSH
58105: LD_INT 2
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PPUSH
58116: CALL_OW 69
58120: IN
58121: NOT
58122: OR
58123: IFFALSE 58127
// exit ;
58125: GO 58174
// for i = 1 to 3 do
58127: LD_ADDR_VAR 0 3
58131: PUSH
58132: DOUBLE
58133: LD_INT 1
58135: DEC
58136: ST_TO_ADDR
58137: LD_INT 3
58139: PUSH
58140: FOR_TO
58141: IFFALSE 58172
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58143: LD_VAR 0 1
58147: PPUSH
58148: CALL_OW 250
58152: PPUSH
58153: LD_VAR 0 1
58157: PPUSH
58158: CALL_OW 251
58162: PPUSH
58163: LD_INT 1
58165: PPUSH
58166: CALL_OW 453
58170: GO 58140
58172: POP
58173: POP
// end ;
58174: LD_VAR 0 2
58178: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58179: LD_INT 0
58181: PPUSH
58182: PPUSH
58183: PPUSH
58184: PPUSH
58185: PPUSH
58186: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58187: LD_VAR 0 1
58191: NOT
58192: PUSH
58193: LD_VAR 0 2
58197: NOT
58198: OR
58199: PUSH
58200: LD_VAR 0 1
58204: PPUSH
58205: CALL_OW 314
58209: OR
58210: IFFALSE 58214
// exit ;
58212: GO 58655
// x := GetX ( enemy_unit ) ;
58214: LD_ADDR_VAR 0 7
58218: PUSH
58219: LD_VAR 0 2
58223: PPUSH
58224: CALL_OW 250
58228: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58229: LD_ADDR_VAR 0 8
58233: PUSH
58234: LD_VAR 0 2
58238: PPUSH
58239: CALL_OW 251
58243: ST_TO_ADDR
// if not x or not y then
58244: LD_VAR 0 7
58248: NOT
58249: PUSH
58250: LD_VAR 0 8
58254: NOT
58255: OR
58256: IFFALSE 58260
// exit ;
58258: GO 58655
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58260: LD_ADDR_VAR 0 6
58264: PUSH
58265: LD_VAR 0 7
58269: PPUSH
58270: LD_INT 0
58272: PPUSH
58273: LD_INT 4
58275: PPUSH
58276: CALL_OW 272
58280: PUSH
58281: LD_VAR 0 8
58285: PPUSH
58286: LD_INT 0
58288: PPUSH
58289: LD_INT 4
58291: PPUSH
58292: CALL_OW 273
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_VAR 0 7
58305: PPUSH
58306: LD_INT 1
58308: PPUSH
58309: LD_INT 4
58311: PPUSH
58312: CALL_OW 272
58316: PUSH
58317: LD_VAR 0 8
58321: PPUSH
58322: LD_INT 1
58324: PPUSH
58325: LD_INT 4
58327: PPUSH
58328: CALL_OW 273
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_VAR 0 7
58341: PPUSH
58342: LD_INT 2
58344: PPUSH
58345: LD_INT 4
58347: PPUSH
58348: CALL_OW 272
58352: PUSH
58353: LD_VAR 0 8
58357: PPUSH
58358: LD_INT 2
58360: PPUSH
58361: LD_INT 4
58363: PPUSH
58364: CALL_OW 273
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_VAR 0 7
58377: PPUSH
58378: LD_INT 3
58380: PPUSH
58381: LD_INT 4
58383: PPUSH
58384: CALL_OW 272
58388: PUSH
58389: LD_VAR 0 8
58393: PPUSH
58394: LD_INT 3
58396: PPUSH
58397: LD_INT 4
58399: PPUSH
58400: CALL_OW 273
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_VAR 0 7
58413: PPUSH
58414: LD_INT 4
58416: PPUSH
58417: LD_INT 4
58419: PPUSH
58420: CALL_OW 272
58424: PUSH
58425: LD_VAR 0 8
58429: PPUSH
58430: LD_INT 4
58432: PPUSH
58433: LD_INT 4
58435: PPUSH
58436: CALL_OW 273
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_VAR 0 7
58449: PPUSH
58450: LD_INT 5
58452: PPUSH
58453: LD_INT 4
58455: PPUSH
58456: CALL_OW 272
58460: PUSH
58461: LD_VAR 0 8
58465: PPUSH
58466: LD_INT 5
58468: PPUSH
58469: LD_INT 4
58471: PPUSH
58472: CALL_OW 273
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: ST_TO_ADDR
// for i = tmp downto 1 do
58489: LD_ADDR_VAR 0 4
58493: PUSH
58494: DOUBLE
58495: LD_VAR 0 6
58499: INC
58500: ST_TO_ADDR
58501: LD_INT 1
58503: PUSH
58504: FOR_DOWNTO
58505: IFFALSE 58606
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58507: LD_VAR 0 6
58511: PUSH
58512: LD_VAR 0 4
58516: ARRAY
58517: PUSH
58518: LD_INT 1
58520: ARRAY
58521: PPUSH
58522: LD_VAR 0 6
58526: PUSH
58527: LD_VAR 0 4
58531: ARRAY
58532: PUSH
58533: LD_INT 2
58535: ARRAY
58536: PPUSH
58537: CALL_OW 488
58541: NOT
58542: PUSH
58543: LD_VAR 0 6
58547: PUSH
58548: LD_VAR 0 4
58552: ARRAY
58553: PUSH
58554: LD_INT 1
58556: ARRAY
58557: PPUSH
58558: LD_VAR 0 6
58562: PUSH
58563: LD_VAR 0 4
58567: ARRAY
58568: PUSH
58569: LD_INT 2
58571: ARRAY
58572: PPUSH
58573: CALL_OW 428
58577: PUSH
58578: LD_INT 0
58580: NONEQUAL
58581: OR
58582: IFFALSE 58604
// tmp := Delete ( tmp , i ) ;
58584: LD_ADDR_VAR 0 6
58588: PUSH
58589: LD_VAR 0 6
58593: PPUSH
58594: LD_VAR 0 4
58598: PPUSH
58599: CALL_OW 3
58603: ST_TO_ADDR
58604: GO 58504
58606: POP
58607: POP
// j := GetClosestHex ( unit , tmp ) ;
58608: LD_ADDR_VAR 0 5
58612: PUSH
58613: LD_VAR 0 1
58617: PPUSH
58618: LD_VAR 0 6
58622: PPUSH
58623: CALL 57908 0 2
58627: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58628: LD_VAR 0 1
58632: PPUSH
58633: LD_VAR 0 5
58637: PUSH
58638: LD_INT 1
58640: ARRAY
58641: PPUSH
58642: LD_VAR 0 5
58646: PUSH
58647: LD_INT 2
58649: ARRAY
58650: PPUSH
58651: CALL_OW 111
// end ;
58655: LD_VAR 0 3
58659: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58660: LD_INT 0
58662: PPUSH
58663: PPUSH
58664: PPUSH
// uc_side = 0 ;
58665: LD_ADDR_OWVAR 20
58669: PUSH
58670: LD_INT 0
58672: ST_TO_ADDR
// uc_nation = 0 ;
58673: LD_ADDR_OWVAR 21
58677: PUSH
58678: LD_INT 0
58680: ST_TO_ADDR
// InitHc_All ( ) ;
58681: CALL_OW 584
// InitVc ;
58685: CALL_OW 20
// if mastodonts then
58689: LD_VAR 0 6
58693: IFFALSE 58760
// for i = 1 to mastodonts do
58695: LD_ADDR_VAR 0 11
58699: PUSH
58700: DOUBLE
58701: LD_INT 1
58703: DEC
58704: ST_TO_ADDR
58705: LD_VAR 0 6
58709: PUSH
58710: FOR_TO
58711: IFFALSE 58758
// begin vc_chassis := 31 ;
58713: LD_ADDR_OWVAR 37
58717: PUSH
58718: LD_INT 31
58720: ST_TO_ADDR
// vc_control := control_rider ;
58721: LD_ADDR_OWVAR 38
58725: PUSH
58726: LD_INT 4
58728: ST_TO_ADDR
// animal := CreateVehicle ;
58729: LD_ADDR_VAR 0 12
58733: PUSH
58734: CALL_OW 45
58738: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58739: LD_VAR 0 12
58743: PPUSH
58744: LD_VAR 0 8
58748: PPUSH
58749: LD_INT 0
58751: PPUSH
58752: CALL 60895 0 3
// end ;
58756: GO 58710
58758: POP
58759: POP
// if horses then
58760: LD_VAR 0 5
58764: IFFALSE 58831
// for i = 1 to horses do
58766: LD_ADDR_VAR 0 11
58770: PUSH
58771: DOUBLE
58772: LD_INT 1
58774: DEC
58775: ST_TO_ADDR
58776: LD_VAR 0 5
58780: PUSH
58781: FOR_TO
58782: IFFALSE 58829
// begin hc_class := 21 ;
58784: LD_ADDR_OWVAR 28
58788: PUSH
58789: LD_INT 21
58791: ST_TO_ADDR
// hc_gallery :=  ;
58792: LD_ADDR_OWVAR 33
58796: PUSH
58797: LD_STRING 
58799: ST_TO_ADDR
// animal := CreateHuman ;
58800: LD_ADDR_VAR 0 12
58804: PUSH
58805: CALL_OW 44
58809: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58810: LD_VAR 0 12
58814: PPUSH
58815: LD_VAR 0 8
58819: PPUSH
58820: LD_INT 0
58822: PPUSH
58823: CALL 60895 0 3
// end ;
58827: GO 58781
58829: POP
58830: POP
// if birds then
58831: LD_VAR 0 1
58835: IFFALSE 58902
// for i = 1 to birds do
58837: LD_ADDR_VAR 0 11
58841: PUSH
58842: DOUBLE
58843: LD_INT 1
58845: DEC
58846: ST_TO_ADDR
58847: LD_VAR 0 1
58851: PUSH
58852: FOR_TO
58853: IFFALSE 58900
// begin hc_class = 18 ;
58855: LD_ADDR_OWVAR 28
58859: PUSH
58860: LD_INT 18
58862: ST_TO_ADDR
// hc_gallery =  ;
58863: LD_ADDR_OWVAR 33
58867: PUSH
58868: LD_STRING 
58870: ST_TO_ADDR
// animal := CreateHuman ;
58871: LD_ADDR_VAR 0 12
58875: PUSH
58876: CALL_OW 44
58880: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58881: LD_VAR 0 12
58885: PPUSH
58886: LD_VAR 0 8
58890: PPUSH
58891: LD_INT 0
58893: PPUSH
58894: CALL 60895 0 3
// end ;
58898: GO 58852
58900: POP
58901: POP
// if tigers then
58902: LD_VAR 0 2
58906: IFFALSE 58990
// for i = 1 to tigers do
58908: LD_ADDR_VAR 0 11
58912: PUSH
58913: DOUBLE
58914: LD_INT 1
58916: DEC
58917: ST_TO_ADDR
58918: LD_VAR 0 2
58922: PUSH
58923: FOR_TO
58924: IFFALSE 58988
// begin hc_class = class_tiger ;
58926: LD_ADDR_OWVAR 28
58930: PUSH
58931: LD_INT 14
58933: ST_TO_ADDR
// hc_gallery =  ;
58934: LD_ADDR_OWVAR 33
58938: PUSH
58939: LD_STRING 
58941: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58942: LD_ADDR_OWVAR 35
58946: PUSH
58947: LD_INT 7
58949: NEG
58950: PPUSH
58951: LD_INT 7
58953: PPUSH
58954: CALL_OW 12
58958: ST_TO_ADDR
// animal := CreateHuman ;
58959: LD_ADDR_VAR 0 12
58963: PUSH
58964: CALL_OW 44
58968: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58969: LD_VAR 0 12
58973: PPUSH
58974: LD_VAR 0 8
58978: PPUSH
58979: LD_INT 0
58981: PPUSH
58982: CALL 60895 0 3
// end ;
58986: GO 58923
58988: POP
58989: POP
// if apemans then
58990: LD_VAR 0 3
58994: IFFALSE 59117
// for i = 1 to apemans do
58996: LD_ADDR_VAR 0 11
59000: PUSH
59001: DOUBLE
59002: LD_INT 1
59004: DEC
59005: ST_TO_ADDR
59006: LD_VAR 0 3
59010: PUSH
59011: FOR_TO
59012: IFFALSE 59115
// begin hc_class = class_apeman ;
59014: LD_ADDR_OWVAR 28
59018: PUSH
59019: LD_INT 12
59021: ST_TO_ADDR
// hc_gallery =  ;
59022: LD_ADDR_OWVAR 33
59026: PUSH
59027: LD_STRING 
59029: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59030: LD_ADDR_OWVAR 35
59034: PUSH
59035: LD_INT 2
59037: NEG
59038: PPUSH
59039: LD_INT 2
59041: PPUSH
59042: CALL_OW 12
59046: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59047: LD_ADDR_OWVAR 31
59051: PUSH
59052: LD_INT 1
59054: PPUSH
59055: LD_INT 3
59057: PPUSH
59058: CALL_OW 12
59062: PUSH
59063: LD_INT 1
59065: PPUSH
59066: LD_INT 3
59068: PPUSH
59069: CALL_OW 12
59073: PUSH
59074: LD_INT 0
59076: PUSH
59077: LD_INT 0
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: ST_TO_ADDR
// animal := CreateHuman ;
59086: LD_ADDR_VAR 0 12
59090: PUSH
59091: CALL_OW 44
59095: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59096: LD_VAR 0 12
59100: PPUSH
59101: LD_VAR 0 8
59105: PPUSH
59106: LD_INT 0
59108: PPUSH
59109: CALL 60895 0 3
// end ;
59113: GO 59011
59115: POP
59116: POP
// if enchidnas then
59117: LD_VAR 0 4
59121: IFFALSE 59188
// for i = 1 to enchidnas do
59123: LD_ADDR_VAR 0 11
59127: PUSH
59128: DOUBLE
59129: LD_INT 1
59131: DEC
59132: ST_TO_ADDR
59133: LD_VAR 0 4
59137: PUSH
59138: FOR_TO
59139: IFFALSE 59186
// begin hc_class = 13 ;
59141: LD_ADDR_OWVAR 28
59145: PUSH
59146: LD_INT 13
59148: ST_TO_ADDR
// hc_gallery =  ;
59149: LD_ADDR_OWVAR 33
59153: PUSH
59154: LD_STRING 
59156: ST_TO_ADDR
// animal := CreateHuman ;
59157: LD_ADDR_VAR 0 12
59161: PUSH
59162: CALL_OW 44
59166: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59167: LD_VAR 0 12
59171: PPUSH
59172: LD_VAR 0 8
59176: PPUSH
59177: LD_INT 0
59179: PPUSH
59180: CALL 60895 0 3
// end ;
59184: GO 59138
59186: POP
59187: POP
// if fishes then
59188: LD_VAR 0 7
59192: IFFALSE 59259
// for i = 1 to fishes do
59194: LD_ADDR_VAR 0 11
59198: PUSH
59199: DOUBLE
59200: LD_INT 1
59202: DEC
59203: ST_TO_ADDR
59204: LD_VAR 0 7
59208: PUSH
59209: FOR_TO
59210: IFFALSE 59257
// begin hc_class = 20 ;
59212: LD_ADDR_OWVAR 28
59216: PUSH
59217: LD_INT 20
59219: ST_TO_ADDR
// hc_gallery =  ;
59220: LD_ADDR_OWVAR 33
59224: PUSH
59225: LD_STRING 
59227: ST_TO_ADDR
// animal := CreateHuman ;
59228: LD_ADDR_VAR 0 12
59232: PUSH
59233: CALL_OW 44
59237: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59238: LD_VAR 0 12
59242: PPUSH
59243: LD_VAR 0 9
59247: PPUSH
59248: LD_INT 0
59250: PPUSH
59251: CALL 60895 0 3
// end ;
59255: GO 59209
59257: POP
59258: POP
// end ;
59259: LD_VAR 0 10
59263: RET
// export function WantHeal ( sci , unit ) ; begin
59264: LD_INT 0
59266: PPUSH
// if GetTaskList ( sci ) > 0 then
59267: LD_VAR 0 1
59271: PPUSH
59272: CALL_OW 437
59276: PUSH
59277: LD_INT 0
59279: GREATER
59280: IFFALSE 59350
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59282: LD_VAR 0 1
59286: PPUSH
59287: CALL_OW 437
59291: PUSH
59292: LD_INT 1
59294: ARRAY
59295: PUSH
59296: LD_INT 1
59298: ARRAY
59299: PUSH
59300: LD_STRING l
59302: EQUAL
59303: PUSH
59304: LD_VAR 0 1
59308: PPUSH
59309: CALL_OW 437
59313: PUSH
59314: LD_INT 1
59316: ARRAY
59317: PUSH
59318: LD_INT 4
59320: ARRAY
59321: PUSH
59322: LD_VAR 0 2
59326: EQUAL
59327: AND
59328: IFFALSE 59340
// result := true else
59330: LD_ADDR_VAR 0 3
59334: PUSH
59335: LD_INT 1
59337: ST_TO_ADDR
59338: GO 59348
// result := false ;
59340: LD_ADDR_VAR 0 3
59344: PUSH
59345: LD_INT 0
59347: ST_TO_ADDR
// end else
59348: GO 59358
// result := false ;
59350: LD_ADDR_VAR 0 3
59354: PUSH
59355: LD_INT 0
59357: ST_TO_ADDR
// end ;
59358: LD_VAR 0 3
59362: RET
// export function HealTarget ( sci ) ; begin
59363: LD_INT 0
59365: PPUSH
// if not sci then
59366: LD_VAR 0 1
59370: NOT
59371: IFFALSE 59375
// exit ;
59373: GO 59440
// result := 0 ;
59375: LD_ADDR_VAR 0 2
59379: PUSH
59380: LD_INT 0
59382: ST_TO_ADDR
// if GetTaskList ( sci ) then
59383: LD_VAR 0 1
59387: PPUSH
59388: CALL_OW 437
59392: IFFALSE 59440
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59394: LD_VAR 0 1
59398: PPUSH
59399: CALL_OW 437
59403: PUSH
59404: LD_INT 1
59406: ARRAY
59407: PUSH
59408: LD_INT 1
59410: ARRAY
59411: PUSH
59412: LD_STRING l
59414: EQUAL
59415: IFFALSE 59440
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59417: LD_ADDR_VAR 0 2
59421: PUSH
59422: LD_VAR 0 1
59426: PPUSH
59427: CALL_OW 437
59431: PUSH
59432: LD_INT 1
59434: ARRAY
59435: PUSH
59436: LD_INT 4
59438: ARRAY
59439: ST_TO_ADDR
// end ;
59440: LD_VAR 0 2
59444: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59445: LD_INT 0
59447: PPUSH
59448: PPUSH
59449: PPUSH
59450: PPUSH
// if not base_units then
59451: LD_VAR 0 1
59455: NOT
59456: IFFALSE 59460
// exit ;
59458: GO 59547
// result := false ;
59460: LD_ADDR_VAR 0 2
59464: PUSH
59465: LD_INT 0
59467: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59468: LD_ADDR_VAR 0 5
59472: PUSH
59473: LD_VAR 0 1
59477: PPUSH
59478: LD_INT 21
59480: PUSH
59481: LD_INT 3
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PPUSH
59488: CALL_OW 72
59492: ST_TO_ADDR
// if not tmp then
59493: LD_VAR 0 5
59497: NOT
59498: IFFALSE 59502
// exit ;
59500: GO 59547
// for i in tmp do
59502: LD_ADDR_VAR 0 3
59506: PUSH
59507: LD_VAR 0 5
59511: PUSH
59512: FOR_IN
59513: IFFALSE 59545
// begin result := EnemyInRange ( i , 22 ) ;
59515: LD_ADDR_VAR 0 2
59519: PUSH
59520: LD_VAR 0 3
59524: PPUSH
59525: LD_INT 22
59527: PPUSH
59528: CALL 57783 0 2
59532: ST_TO_ADDR
// if result then
59533: LD_VAR 0 2
59537: IFFALSE 59543
// exit ;
59539: POP
59540: POP
59541: GO 59547
// end ;
59543: GO 59512
59545: POP
59546: POP
// end ;
59547: LD_VAR 0 2
59551: RET
// export function FilterByTag ( units , tag ) ; begin
59552: LD_INT 0
59554: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59555: LD_ADDR_VAR 0 3
59559: PUSH
59560: LD_VAR 0 1
59564: PPUSH
59565: LD_INT 120
59567: PUSH
59568: LD_VAR 0 2
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PPUSH
59577: CALL_OW 72
59581: ST_TO_ADDR
// end ;
59582: LD_VAR 0 3
59586: RET
// export function IsDriver ( un ) ; begin
59587: LD_INT 0
59589: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59590: LD_ADDR_VAR 0 2
59594: PUSH
59595: LD_VAR 0 1
59599: PUSH
59600: LD_INT 55
59602: PUSH
59603: EMPTY
59604: LIST
59605: PPUSH
59606: CALL_OW 69
59610: IN
59611: ST_TO_ADDR
// end ;
59612: LD_VAR 0 2
59616: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59617: LD_INT 0
59619: PPUSH
59620: PPUSH
// list := [ ] ;
59621: LD_ADDR_VAR 0 5
59625: PUSH
59626: EMPTY
59627: ST_TO_ADDR
// case d of 0 :
59628: LD_VAR 0 3
59632: PUSH
59633: LD_INT 0
59635: DOUBLE
59636: EQUAL
59637: IFTRUE 59641
59639: GO 59774
59641: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59642: LD_ADDR_VAR 0 5
59646: PUSH
59647: LD_VAR 0 1
59651: PUSH
59652: LD_INT 4
59654: MINUS
59655: PUSH
59656: LD_VAR 0 2
59660: PUSH
59661: LD_INT 4
59663: MINUS
59664: PUSH
59665: LD_INT 2
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: LIST
59672: PUSH
59673: LD_VAR 0 1
59677: PUSH
59678: LD_INT 3
59680: MINUS
59681: PUSH
59682: LD_VAR 0 2
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: LIST
59694: PUSH
59695: LD_VAR 0 1
59699: PUSH
59700: LD_INT 4
59702: PLUS
59703: PUSH
59704: LD_VAR 0 2
59708: PUSH
59709: LD_INT 4
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: LIST
59716: PUSH
59717: LD_VAR 0 1
59721: PUSH
59722: LD_INT 3
59724: PLUS
59725: PUSH
59726: LD_VAR 0 2
59730: PUSH
59731: LD_INT 3
59733: PLUS
59734: PUSH
59735: LD_INT 5
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: LIST
59742: PUSH
59743: LD_VAR 0 1
59747: PUSH
59748: LD_VAR 0 2
59752: PUSH
59753: LD_INT 4
59755: PLUS
59756: PUSH
59757: LD_INT 0
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: LIST
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: ST_TO_ADDR
// end ; 1 :
59772: GO 60472
59774: LD_INT 1
59776: DOUBLE
59777: EQUAL
59778: IFTRUE 59782
59780: GO 59915
59782: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59783: LD_ADDR_VAR 0 5
59787: PUSH
59788: LD_VAR 0 1
59792: PUSH
59793: LD_VAR 0 2
59797: PUSH
59798: LD_INT 4
59800: MINUS
59801: PUSH
59802: LD_INT 3
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: LIST
59809: PUSH
59810: LD_VAR 0 1
59814: PUSH
59815: LD_INT 3
59817: MINUS
59818: PUSH
59819: LD_VAR 0 2
59823: PUSH
59824: LD_INT 3
59826: MINUS
59827: PUSH
59828: LD_INT 2
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: LIST
59835: PUSH
59836: LD_VAR 0 1
59840: PUSH
59841: LD_INT 4
59843: MINUS
59844: PUSH
59845: LD_VAR 0 2
59849: PUSH
59850: LD_INT 1
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: LIST
59857: PUSH
59858: LD_VAR 0 1
59862: PUSH
59863: LD_VAR 0 2
59867: PUSH
59868: LD_INT 3
59870: PLUS
59871: PUSH
59872: LD_INT 0
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: LIST
59879: PUSH
59880: LD_VAR 0 1
59884: PUSH
59885: LD_INT 4
59887: PLUS
59888: PUSH
59889: LD_VAR 0 2
59893: PUSH
59894: LD_INT 4
59896: PLUS
59897: PUSH
59898: LD_INT 5
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: LIST
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: ST_TO_ADDR
// end ; 2 :
59913: GO 60472
59915: LD_INT 2
59917: DOUBLE
59918: EQUAL
59919: IFTRUE 59923
59921: GO 60052
59923: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59924: LD_ADDR_VAR 0 5
59928: PUSH
59929: LD_VAR 0 1
59933: PUSH
59934: LD_VAR 0 2
59938: PUSH
59939: LD_INT 3
59941: MINUS
59942: PUSH
59943: LD_INT 3
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: LIST
59950: PUSH
59951: LD_VAR 0 1
59955: PUSH
59956: LD_INT 4
59958: PLUS
59959: PUSH
59960: LD_VAR 0 2
59964: PUSH
59965: LD_INT 4
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: LIST
59972: PUSH
59973: LD_VAR 0 1
59977: PUSH
59978: LD_VAR 0 2
59982: PUSH
59983: LD_INT 4
59985: PLUS
59986: PUSH
59987: LD_INT 0
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: LIST
59994: PUSH
59995: LD_VAR 0 1
59999: PUSH
60000: LD_INT 3
60002: MINUS
60003: PUSH
60004: LD_VAR 0 2
60008: PUSH
60009: LD_INT 1
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: LIST
60016: PUSH
60017: LD_VAR 0 1
60021: PUSH
60022: LD_INT 4
60024: MINUS
60025: PUSH
60026: LD_VAR 0 2
60030: PUSH
60031: LD_INT 4
60033: MINUS
60034: PUSH
60035: LD_INT 2
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: LIST
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: ST_TO_ADDR
// end ; 3 :
60050: GO 60472
60052: LD_INT 3
60054: DOUBLE
60055: EQUAL
60056: IFTRUE 60060
60058: GO 60193
60060: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60061: LD_ADDR_VAR 0 5
60065: PUSH
60066: LD_VAR 0 1
60070: PUSH
60071: LD_INT 3
60073: PLUS
60074: PUSH
60075: LD_VAR 0 2
60079: PUSH
60080: LD_INT 4
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: LIST
60087: PUSH
60088: LD_VAR 0 1
60092: PUSH
60093: LD_INT 4
60095: PLUS
60096: PUSH
60097: LD_VAR 0 2
60101: PUSH
60102: LD_INT 4
60104: PLUS
60105: PUSH
60106: LD_INT 5
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: LIST
60113: PUSH
60114: LD_VAR 0 1
60118: PUSH
60119: LD_INT 4
60121: MINUS
60122: PUSH
60123: LD_VAR 0 2
60127: PUSH
60128: LD_INT 1
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: LIST
60135: PUSH
60136: LD_VAR 0 1
60140: PUSH
60141: LD_VAR 0 2
60145: PUSH
60146: LD_INT 4
60148: MINUS
60149: PUSH
60150: LD_INT 3
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: LIST
60157: PUSH
60158: LD_VAR 0 1
60162: PUSH
60163: LD_INT 3
60165: MINUS
60166: PUSH
60167: LD_VAR 0 2
60171: PUSH
60172: LD_INT 3
60174: MINUS
60175: PUSH
60176: LD_INT 2
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: LIST
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: ST_TO_ADDR
// end ; 4 :
60191: GO 60472
60193: LD_INT 4
60195: DOUBLE
60196: EQUAL
60197: IFTRUE 60201
60199: GO 60334
60201: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60202: LD_ADDR_VAR 0 5
60206: PUSH
60207: LD_VAR 0 1
60211: PUSH
60212: LD_VAR 0 2
60216: PUSH
60217: LD_INT 4
60219: PLUS
60220: PUSH
60221: LD_INT 0
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: LIST
60228: PUSH
60229: LD_VAR 0 1
60233: PUSH
60234: LD_INT 3
60236: PLUS
60237: PUSH
60238: LD_VAR 0 2
60242: PUSH
60243: LD_INT 3
60245: PLUS
60246: PUSH
60247: LD_INT 5
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: LIST
60254: PUSH
60255: LD_VAR 0 1
60259: PUSH
60260: LD_INT 4
60262: PLUS
60263: PUSH
60264: LD_VAR 0 2
60268: PUSH
60269: LD_INT 4
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: LIST
60276: PUSH
60277: LD_VAR 0 1
60281: PUSH
60282: LD_VAR 0 2
60286: PUSH
60287: LD_INT 3
60289: MINUS
60290: PUSH
60291: LD_INT 3
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: LIST
60298: PUSH
60299: LD_VAR 0 1
60303: PUSH
60304: LD_INT 4
60306: MINUS
60307: PUSH
60308: LD_VAR 0 2
60312: PUSH
60313: LD_INT 4
60315: MINUS
60316: PUSH
60317: LD_INT 2
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: LIST
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: ST_TO_ADDR
// end ; 5 :
60332: GO 60472
60334: LD_INT 5
60336: DOUBLE
60337: EQUAL
60338: IFTRUE 60342
60340: GO 60471
60342: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60343: LD_ADDR_VAR 0 5
60347: PUSH
60348: LD_VAR 0 1
60352: PUSH
60353: LD_INT 4
60355: MINUS
60356: PUSH
60357: LD_VAR 0 2
60361: PUSH
60362: LD_INT 1
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: LIST
60369: PUSH
60370: LD_VAR 0 1
60374: PUSH
60375: LD_VAR 0 2
60379: PUSH
60380: LD_INT 4
60382: MINUS
60383: PUSH
60384: LD_INT 3
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: LIST
60391: PUSH
60392: LD_VAR 0 1
60396: PUSH
60397: LD_INT 4
60399: PLUS
60400: PUSH
60401: LD_VAR 0 2
60405: PUSH
60406: LD_INT 4
60408: PLUS
60409: PUSH
60410: LD_INT 5
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: LIST
60417: PUSH
60418: LD_VAR 0 1
60422: PUSH
60423: LD_INT 3
60425: PLUS
60426: PUSH
60427: LD_VAR 0 2
60431: PUSH
60432: LD_INT 4
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: LIST
60439: PUSH
60440: LD_VAR 0 1
60444: PUSH
60445: LD_VAR 0 2
60449: PUSH
60450: LD_INT 3
60452: PLUS
60453: PUSH
60454: LD_INT 0
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: LIST
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: ST_TO_ADDR
// end ; end ;
60469: GO 60472
60471: POP
// result := list ;
60472: LD_ADDR_VAR 0 4
60476: PUSH
60477: LD_VAR 0 5
60481: ST_TO_ADDR
// end ;
60482: LD_VAR 0 4
60486: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60487: LD_INT 0
60489: PPUSH
60490: PPUSH
60491: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60492: LD_VAR 0 1
60496: NOT
60497: PUSH
60498: LD_VAR 0 2
60502: PUSH
60503: LD_INT 1
60505: PUSH
60506: LD_INT 2
60508: PUSH
60509: LD_INT 3
60511: PUSH
60512: LD_INT 4
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: IN
60521: NOT
60522: OR
60523: IFFALSE 60527
// exit ;
60525: GO 60619
// tmp := [ ] ;
60527: LD_ADDR_VAR 0 5
60531: PUSH
60532: EMPTY
60533: ST_TO_ADDR
// for i in units do
60534: LD_ADDR_VAR 0 4
60538: PUSH
60539: LD_VAR 0 1
60543: PUSH
60544: FOR_IN
60545: IFFALSE 60588
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60547: LD_ADDR_VAR 0 5
60551: PUSH
60552: LD_VAR 0 5
60556: PPUSH
60557: LD_VAR 0 5
60561: PUSH
60562: LD_INT 1
60564: PLUS
60565: PPUSH
60566: LD_VAR 0 4
60570: PPUSH
60571: LD_VAR 0 2
60575: PPUSH
60576: CALL_OW 259
60580: PPUSH
60581: CALL_OW 2
60585: ST_TO_ADDR
60586: GO 60544
60588: POP
60589: POP
// if not tmp then
60590: LD_VAR 0 5
60594: NOT
60595: IFFALSE 60599
// exit ;
60597: GO 60619
// result := SortListByListDesc ( units , tmp ) ;
60599: LD_ADDR_VAR 0 3
60603: PUSH
60604: LD_VAR 0 1
60608: PPUSH
60609: LD_VAR 0 5
60613: PPUSH
60614: CALL_OW 77
60618: ST_TO_ADDR
// end ;
60619: LD_VAR 0 3
60623: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60624: LD_INT 0
60626: PPUSH
60627: PPUSH
60628: PPUSH
// result := false ;
60629: LD_ADDR_VAR 0 3
60633: PUSH
60634: LD_INT 0
60636: ST_TO_ADDR
// x := GetX ( building ) ;
60637: LD_ADDR_VAR 0 4
60641: PUSH
60642: LD_VAR 0 2
60646: PPUSH
60647: CALL_OW 250
60651: ST_TO_ADDR
// y := GetY ( building ) ;
60652: LD_ADDR_VAR 0 5
60656: PUSH
60657: LD_VAR 0 2
60661: PPUSH
60662: CALL_OW 251
60666: ST_TO_ADDR
// if not building or not x or not y then
60667: LD_VAR 0 2
60671: NOT
60672: PUSH
60673: LD_VAR 0 4
60677: NOT
60678: OR
60679: PUSH
60680: LD_VAR 0 5
60684: NOT
60685: OR
60686: IFFALSE 60690
// exit ;
60688: GO 60782
// if GetTaskList ( unit ) then
60690: LD_VAR 0 1
60694: PPUSH
60695: CALL_OW 437
60699: IFFALSE 60782
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60701: LD_STRING e
60703: PUSH
60704: LD_VAR 0 1
60708: PPUSH
60709: CALL_OW 437
60713: PUSH
60714: LD_INT 1
60716: ARRAY
60717: PUSH
60718: LD_INT 1
60720: ARRAY
60721: EQUAL
60722: PUSH
60723: LD_VAR 0 4
60727: PUSH
60728: LD_VAR 0 1
60732: PPUSH
60733: CALL_OW 437
60737: PUSH
60738: LD_INT 1
60740: ARRAY
60741: PUSH
60742: LD_INT 2
60744: ARRAY
60745: EQUAL
60746: AND
60747: PUSH
60748: LD_VAR 0 5
60752: PUSH
60753: LD_VAR 0 1
60757: PPUSH
60758: CALL_OW 437
60762: PUSH
60763: LD_INT 1
60765: ARRAY
60766: PUSH
60767: LD_INT 3
60769: ARRAY
60770: EQUAL
60771: AND
60772: IFFALSE 60782
// result := true end ;
60774: LD_ADDR_VAR 0 3
60778: PUSH
60779: LD_INT 1
60781: ST_TO_ADDR
// end ;
60782: LD_VAR 0 3
60786: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60787: LD_INT 0
60789: PPUSH
// result := false ;
60790: LD_ADDR_VAR 0 4
60794: PUSH
60795: LD_INT 0
60797: ST_TO_ADDR
// if GetTaskList ( unit ) then
60798: LD_VAR 0 1
60802: PPUSH
60803: CALL_OW 437
60807: IFFALSE 60890
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60809: LD_STRING M
60811: PUSH
60812: LD_VAR 0 1
60816: PPUSH
60817: CALL_OW 437
60821: PUSH
60822: LD_INT 1
60824: ARRAY
60825: PUSH
60826: LD_INT 1
60828: ARRAY
60829: EQUAL
60830: PUSH
60831: LD_VAR 0 2
60835: PUSH
60836: LD_VAR 0 1
60840: PPUSH
60841: CALL_OW 437
60845: PUSH
60846: LD_INT 1
60848: ARRAY
60849: PUSH
60850: LD_INT 2
60852: ARRAY
60853: EQUAL
60854: AND
60855: PUSH
60856: LD_VAR 0 3
60860: PUSH
60861: LD_VAR 0 1
60865: PPUSH
60866: CALL_OW 437
60870: PUSH
60871: LD_INT 1
60873: ARRAY
60874: PUSH
60875: LD_INT 3
60877: ARRAY
60878: EQUAL
60879: AND
60880: IFFALSE 60890
// result := true ;
60882: LD_ADDR_VAR 0 4
60886: PUSH
60887: LD_INT 1
60889: ST_TO_ADDR
// end ; end ;
60890: LD_VAR 0 4
60894: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60895: LD_INT 0
60897: PPUSH
60898: PPUSH
60899: PPUSH
60900: PPUSH
// if not unit or not area then
60901: LD_VAR 0 1
60905: NOT
60906: PUSH
60907: LD_VAR 0 2
60911: NOT
60912: OR
60913: IFFALSE 60917
// exit ;
60915: GO 61081
// tmp := AreaToList ( area , i ) ;
60917: LD_ADDR_VAR 0 6
60921: PUSH
60922: LD_VAR 0 2
60926: PPUSH
60927: LD_VAR 0 5
60931: PPUSH
60932: CALL_OW 517
60936: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60937: LD_ADDR_VAR 0 5
60941: PUSH
60942: DOUBLE
60943: LD_INT 1
60945: DEC
60946: ST_TO_ADDR
60947: LD_VAR 0 6
60951: PUSH
60952: LD_INT 1
60954: ARRAY
60955: PUSH
60956: FOR_TO
60957: IFFALSE 61079
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60959: LD_ADDR_VAR 0 7
60963: PUSH
60964: LD_VAR 0 6
60968: PUSH
60969: LD_INT 1
60971: ARRAY
60972: PUSH
60973: LD_VAR 0 5
60977: ARRAY
60978: PUSH
60979: LD_VAR 0 6
60983: PUSH
60984: LD_INT 2
60986: ARRAY
60987: PUSH
60988: LD_VAR 0 5
60992: ARRAY
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60998: LD_VAR 0 7
61002: PUSH
61003: LD_INT 1
61005: ARRAY
61006: PPUSH
61007: LD_VAR 0 7
61011: PUSH
61012: LD_INT 2
61014: ARRAY
61015: PPUSH
61016: CALL_OW 428
61020: PUSH
61021: LD_INT 0
61023: EQUAL
61024: IFFALSE 61077
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61026: LD_VAR 0 1
61030: PPUSH
61031: LD_VAR 0 7
61035: PUSH
61036: LD_INT 1
61038: ARRAY
61039: PPUSH
61040: LD_VAR 0 7
61044: PUSH
61045: LD_INT 2
61047: ARRAY
61048: PPUSH
61049: LD_VAR 0 3
61053: PPUSH
61054: CALL_OW 48
// result := IsPlaced ( unit ) ;
61058: LD_ADDR_VAR 0 4
61062: PUSH
61063: LD_VAR 0 1
61067: PPUSH
61068: CALL_OW 305
61072: ST_TO_ADDR
// exit ;
61073: POP
61074: POP
61075: GO 61081
// end ; end ;
61077: GO 60956
61079: POP
61080: POP
// end ;
61081: LD_VAR 0 4
61085: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61086: LD_INT 0
61088: PPUSH
61089: PPUSH
61090: PPUSH
// if not side or side > 8 then
61091: LD_VAR 0 1
61095: NOT
61096: PUSH
61097: LD_VAR 0 1
61101: PUSH
61102: LD_INT 8
61104: GREATER
61105: OR
61106: IFFALSE 61110
// exit ;
61108: GO 61297
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61110: LD_ADDR_VAR 0 4
61114: PUSH
61115: LD_INT 22
61117: PUSH
61118: LD_VAR 0 1
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 21
61129: PUSH
61130: LD_INT 3
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PPUSH
61141: CALL_OW 69
61145: ST_TO_ADDR
// if not tmp then
61146: LD_VAR 0 4
61150: NOT
61151: IFFALSE 61155
// exit ;
61153: GO 61297
// enable_addtolog := true ;
61155: LD_ADDR_OWVAR 81
61159: PUSH
61160: LD_INT 1
61162: ST_TO_ADDR
// AddToLog ( [ ) ;
61163: LD_STRING [
61165: PPUSH
61166: CALL_OW 561
// for i in tmp do
61170: LD_ADDR_VAR 0 3
61174: PUSH
61175: LD_VAR 0 4
61179: PUSH
61180: FOR_IN
61181: IFFALSE 61288
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61183: LD_STRING [
61185: PUSH
61186: LD_VAR 0 3
61190: PPUSH
61191: CALL_OW 266
61195: STR
61196: PUSH
61197: LD_STRING , 
61199: STR
61200: PUSH
61201: LD_VAR 0 3
61205: PPUSH
61206: CALL_OW 250
61210: STR
61211: PUSH
61212: LD_STRING , 
61214: STR
61215: PUSH
61216: LD_VAR 0 3
61220: PPUSH
61221: CALL_OW 251
61225: STR
61226: PUSH
61227: LD_STRING , 
61229: STR
61230: PUSH
61231: LD_VAR 0 3
61235: PPUSH
61236: CALL_OW 254
61240: STR
61241: PUSH
61242: LD_STRING , 
61244: STR
61245: PUSH
61246: LD_VAR 0 3
61250: PPUSH
61251: LD_INT 1
61253: PPUSH
61254: CALL_OW 268
61258: STR
61259: PUSH
61260: LD_STRING , 
61262: STR
61263: PUSH
61264: LD_VAR 0 3
61268: PPUSH
61269: LD_INT 2
61271: PPUSH
61272: CALL_OW 268
61276: STR
61277: PUSH
61278: LD_STRING ],
61280: STR
61281: PPUSH
61282: CALL_OW 561
// end ;
61286: GO 61180
61288: POP
61289: POP
// AddToLog ( ]; ) ;
61290: LD_STRING ];
61292: PPUSH
61293: CALL_OW 561
// end ;
61297: LD_VAR 0 2
61301: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61302: LD_INT 0
61304: PPUSH
61305: PPUSH
61306: PPUSH
61307: PPUSH
61308: PPUSH
// if not area or not rate or not max then
61309: LD_VAR 0 1
61313: NOT
61314: PUSH
61315: LD_VAR 0 2
61319: NOT
61320: OR
61321: PUSH
61322: LD_VAR 0 4
61326: NOT
61327: OR
61328: IFFALSE 61332
// exit ;
61330: GO 61521
// while 1 do
61332: LD_INT 1
61334: IFFALSE 61521
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61336: LD_ADDR_VAR 0 9
61340: PUSH
61341: LD_VAR 0 1
61345: PPUSH
61346: LD_INT 1
61348: PPUSH
61349: CALL_OW 287
61353: PUSH
61354: LD_INT 10
61356: MUL
61357: ST_TO_ADDR
// r := rate / 10 ;
61358: LD_ADDR_VAR 0 7
61362: PUSH
61363: LD_VAR 0 2
61367: PUSH
61368: LD_INT 10
61370: DIVREAL
61371: ST_TO_ADDR
// time := 1 1$00 ;
61372: LD_ADDR_VAR 0 8
61376: PUSH
61377: LD_INT 2100
61379: ST_TO_ADDR
// if amount < min then
61380: LD_VAR 0 9
61384: PUSH
61385: LD_VAR 0 3
61389: LESS
61390: IFFALSE 61408
// r := r * 2 else
61392: LD_ADDR_VAR 0 7
61396: PUSH
61397: LD_VAR 0 7
61401: PUSH
61402: LD_INT 2
61404: MUL
61405: ST_TO_ADDR
61406: GO 61434
// if amount > max then
61408: LD_VAR 0 9
61412: PUSH
61413: LD_VAR 0 4
61417: GREATER
61418: IFFALSE 61434
// r := r / 2 ;
61420: LD_ADDR_VAR 0 7
61424: PUSH
61425: LD_VAR 0 7
61429: PUSH
61430: LD_INT 2
61432: DIVREAL
61433: ST_TO_ADDR
// time := time / r ;
61434: LD_ADDR_VAR 0 8
61438: PUSH
61439: LD_VAR 0 8
61443: PUSH
61444: LD_VAR 0 7
61448: DIVREAL
61449: ST_TO_ADDR
// if time < 0 then
61450: LD_VAR 0 8
61454: PUSH
61455: LD_INT 0
61457: LESS
61458: IFFALSE 61475
// time := time * - 1 ;
61460: LD_ADDR_VAR 0 8
61464: PUSH
61465: LD_VAR 0 8
61469: PUSH
61470: LD_INT 1
61472: NEG
61473: MUL
61474: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61475: LD_VAR 0 8
61479: PUSH
61480: LD_INT 35
61482: PPUSH
61483: LD_INT 875
61485: PPUSH
61486: CALL_OW 12
61490: PLUS
61491: PPUSH
61492: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61496: LD_INT 1
61498: PPUSH
61499: LD_INT 5
61501: PPUSH
61502: CALL_OW 12
61506: PPUSH
61507: LD_VAR 0 1
61511: PPUSH
61512: LD_INT 1
61514: PPUSH
61515: CALL_OW 55
// end ;
61519: GO 61332
// end ;
61521: LD_VAR 0 5
61525: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61526: LD_INT 0
61528: PPUSH
61529: PPUSH
61530: PPUSH
61531: PPUSH
61532: PPUSH
61533: PPUSH
61534: PPUSH
61535: PPUSH
// if not turrets or not factories then
61536: LD_VAR 0 1
61540: NOT
61541: PUSH
61542: LD_VAR 0 2
61546: NOT
61547: OR
61548: IFFALSE 61552
// exit ;
61550: GO 61859
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61552: LD_ADDR_VAR 0 10
61556: PUSH
61557: LD_INT 5
61559: PUSH
61560: LD_INT 6
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 2
61569: PUSH
61570: LD_INT 4
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 3
61579: PUSH
61580: LD_INT 5
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 24
61594: PUSH
61595: LD_INT 25
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 23
61604: PUSH
61605: LD_INT 27
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 42
61618: PUSH
61619: LD_INT 43
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 44
61628: PUSH
61629: LD_INT 46
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 45
61638: PUSH
61639: LD_INT 47
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: LIST
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: LIST
61655: ST_TO_ADDR
// result := [ ] ;
61656: LD_ADDR_VAR 0 3
61660: PUSH
61661: EMPTY
61662: ST_TO_ADDR
// for i in turrets do
61663: LD_ADDR_VAR 0 4
61667: PUSH
61668: LD_VAR 0 1
61672: PUSH
61673: FOR_IN
61674: IFFALSE 61857
// begin nat := GetNation ( i ) ;
61676: LD_ADDR_VAR 0 7
61680: PUSH
61681: LD_VAR 0 4
61685: PPUSH
61686: CALL_OW 248
61690: ST_TO_ADDR
// weapon := 0 ;
61691: LD_ADDR_VAR 0 8
61695: PUSH
61696: LD_INT 0
61698: ST_TO_ADDR
// if not nat then
61699: LD_VAR 0 7
61703: NOT
61704: IFFALSE 61708
// continue ;
61706: GO 61673
// for j in list [ nat ] do
61708: LD_ADDR_VAR 0 5
61712: PUSH
61713: LD_VAR 0 10
61717: PUSH
61718: LD_VAR 0 7
61722: ARRAY
61723: PUSH
61724: FOR_IN
61725: IFFALSE 61766
// if GetBWeapon ( i ) = j [ 1 ] then
61727: LD_VAR 0 4
61731: PPUSH
61732: CALL_OW 269
61736: PUSH
61737: LD_VAR 0 5
61741: PUSH
61742: LD_INT 1
61744: ARRAY
61745: EQUAL
61746: IFFALSE 61764
// begin weapon := j [ 2 ] ;
61748: LD_ADDR_VAR 0 8
61752: PUSH
61753: LD_VAR 0 5
61757: PUSH
61758: LD_INT 2
61760: ARRAY
61761: ST_TO_ADDR
// break ;
61762: GO 61766
// end ;
61764: GO 61724
61766: POP
61767: POP
// if not weapon then
61768: LD_VAR 0 8
61772: NOT
61773: IFFALSE 61777
// continue ;
61775: GO 61673
// for k in factories do
61777: LD_ADDR_VAR 0 6
61781: PUSH
61782: LD_VAR 0 2
61786: PUSH
61787: FOR_IN
61788: IFFALSE 61853
// begin weapons := AvailableWeaponList ( k ) ;
61790: LD_ADDR_VAR 0 9
61794: PUSH
61795: LD_VAR 0 6
61799: PPUSH
61800: CALL_OW 478
61804: ST_TO_ADDR
// if not weapons then
61805: LD_VAR 0 9
61809: NOT
61810: IFFALSE 61814
// continue ;
61812: GO 61787
// if weapon in weapons then
61814: LD_VAR 0 8
61818: PUSH
61819: LD_VAR 0 9
61823: IN
61824: IFFALSE 61851
// begin result := [ i , weapon ] ;
61826: LD_ADDR_VAR 0 3
61830: PUSH
61831: LD_VAR 0 4
61835: PUSH
61836: LD_VAR 0 8
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: ST_TO_ADDR
// exit ;
61845: POP
61846: POP
61847: POP
61848: POP
61849: GO 61859
// end ; end ;
61851: GO 61787
61853: POP
61854: POP
// end ;
61855: GO 61673
61857: POP
61858: POP
// end ;
61859: LD_VAR 0 3
61863: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61864: LD_INT 0
61866: PPUSH
// if not side or side > 8 then
61867: LD_VAR 0 3
61871: NOT
61872: PUSH
61873: LD_VAR 0 3
61877: PUSH
61878: LD_INT 8
61880: GREATER
61881: OR
61882: IFFALSE 61886
// exit ;
61884: GO 61945
// if not range then
61886: LD_VAR 0 4
61890: NOT
61891: IFFALSE 61902
// range := - 12 ;
61893: LD_ADDR_VAR 0 4
61897: PUSH
61898: LD_INT 12
61900: NEG
61901: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61902: LD_VAR 0 1
61906: PPUSH
61907: LD_VAR 0 2
61911: PPUSH
61912: LD_VAR 0 3
61916: PPUSH
61917: LD_VAR 0 4
61921: PPUSH
61922: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61926: LD_VAR 0 1
61930: PPUSH
61931: LD_VAR 0 2
61935: PPUSH
61936: LD_VAR 0 3
61940: PPUSH
61941: CALL_OW 331
// end ;
61945: LD_VAR 0 5
61949: RET
// export function Video ( mode ) ; begin
61950: LD_INT 0
61952: PPUSH
// ingame_video = mode ;
61953: LD_ADDR_OWVAR 52
61957: PUSH
61958: LD_VAR 0 1
61962: ST_TO_ADDR
// interface_hidden = mode ;
61963: LD_ADDR_OWVAR 54
61967: PUSH
61968: LD_VAR 0 1
61972: ST_TO_ADDR
// end ;
61973: LD_VAR 0 2
61977: RET
// export function Join ( array , element ) ; begin
61978: LD_INT 0
61980: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61981: LD_ADDR_VAR 0 3
61985: PUSH
61986: LD_VAR 0 1
61990: PPUSH
61991: LD_VAR 0 1
61995: PUSH
61996: LD_INT 1
61998: PLUS
61999: PPUSH
62000: LD_VAR 0 2
62004: PPUSH
62005: CALL_OW 1
62009: ST_TO_ADDR
// end ;
62010: LD_VAR 0 3
62014: RET
// export function JoinUnion ( array , element ) ; begin
62015: LD_INT 0
62017: PPUSH
// result := array union element ;
62018: LD_ADDR_VAR 0 3
62022: PUSH
62023: LD_VAR 0 1
62027: PUSH
62028: LD_VAR 0 2
62032: UNION
62033: ST_TO_ADDR
// end ;
62034: LD_VAR 0 3
62038: RET
// export function GetBehemoths ( side ) ; begin
62039: LD_INT 0
62041: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62042: LD_ADDR_VAR 0 2
62046: PUSH
62047: LD_INT 22
62049: PUSH
62050: LD_VAR 0 1
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 31
62061: PUSH
62062: LD_INT 25
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PPUSH
62073: CALL_OW 69
62077: ST_TO_ADDR
// end ;
62078: LD_VAR 0 2
62082: RET
// export function Shuffle ( array ) ; var i , index ; begin
62083: LD_INT 0
62085: PPUSH
62086: PPUSH
62087: PPUSH
// result := [ ] ;
62088: LD_ADDR_VAR 0 2
62092: PUSH
62093: EMPTY
62094: ST_TO_ADDR
// if not array then
62095: LD_VAR 0 1
62099: NOT
62100: IFFALSE 62104
// exit ;
62102: GO 62203
// Randomize ;
62104: CALL_OW 10
// for i = array downto 1 do
62108: LD_ADDR_VAR 0 3
62112: PUSH
62113: DOUBLE
62114: LD_VAR 0 1
62118: INC
62119: ST_TO_ADDR
62120: LD_INT 1
62122: PUSH
62123: FOR_DOWNTO
62124: IFFALSE 62201
// begin index := rand ( 1 , array ) ;
62126: LD_ADDR_VAR 0 4
62130: PUSH
62131: LD_INT 1
62133: PPUSH
62134: LD_VAR 0 1
62138: PPUSH
62139: CALL_OW 12
62143: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62144: LD_ADDR_VAR 0 2
62148: PUSH
62149: LD_VAR 0 2
62153: PPUSH
62154: LD_VAR 0 2
62158: PUSH
62159: LD_INT 1
62161: PLUS
62162: PPUSH
62163: LD_VAR 0 1
62167: PUSH
62168: LD_VAR 0 4
62172: ARRAY
62173: PPUSH
62174: CALL_OW 2
62178: ST_TO_ADDR
// array := Delete ( array , index ) ;
62179: LD_ADDR_VAR 0 1
62183: PUSH
62184: LD_VAR 0 1
62188: PPUSH
62189: LD_VAR 0 4
62193: PPUSH
62194: CALL_OW 3
62198: ST_TO_ADDR
// end ;
62199: GO 62123
62201: POP
62202: POP
// end ;
62203: LD_VAR 0 2
62207: RET
// export function GetBaseMaterials ( base ) ; begin
62208: LD_INT 0
62210: PPUSH
// result := [ 0 , 0 , 0 ] ;
62211: LD_ADDR_VAR 0 2
62215: PUSH
62216: LD_INT 0
62218: PUSH
62219: LD_INT 0
62221: PUSH
62222: LD_INT 0
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: LIST
62229: ST_TO_ADDR
// if not base then
62230: LD_VAR 0 1
62234: NOT
62235: IFFALSE 62239
// exit ;
62237: GO 62288
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62239: LD_ADDR_VAR 0 2
62243: PUSH
62244: LD_VAR 0 1
62248: PPUSH
62249: LD_INT 1
62251: PPUSH
62252: CALL_OW 275
62256: PUSH
62257: LD_VAR 0 1
62261: PPUSH
62262: LD_INT 2
62264: PPUSH
62265: CALL_OW 275
62269: PUSH
62270: LD_VAR 0 1
62274: PPUSH
62275: LD_INT 3
62277: PPUSH
62278: CALL_OW 275
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: LIST
62287: ST_TO_ADDR
// end ;
62288: LD_VAR 0 2
62292: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62293: LD_INT 0
62295: PPUSH
62296: PPUSH
// result := array ;
62297: LD_ADDR_VAR 0 3
62301: PUSH
62302: LD_VAR 0 1
62306: ST_TO_ADDR
// if size > 0 then
62307: LD_VAR 0 2
62311: PUSH
62312: LD_INT 0
62314: GREATER
62315: IFFALSE 62361
// for i := array downto size do
62317: LD_ADDR_VAR 0 4
62321: PUSH
62322: DOUBLE
62323: LD_VAR 0 1
62327: INC
62328: ST_TO_ADDR
62329: LD_VAR 0 2
62333: PUSH
62334: FOR_DOWNTO
62335: IFFALSE 62359
// result := Delete ( result , result ) ;
62337: LD_ADDR_VAR 0 3
62341: PUSH
62342: LD_VAR 0 3
62346: PPUSH
62347: LD_VAR 0 3
62351: PPUSH
62352: CALL_OW 3
62356: ST_TO_ADDR
62357: GO 62334
62359: POP
62360: POP
// end ;
62361: LD_VAR 0 3
62365: RET
// export function ComExit ( unit ) ; var tmp ; begin
62366: LD_INT 0
62368: PPUSH
62369: PPUSH
// if not IsInUnit ( unit ) then
62370: LD_VAR 0 1
62374: PPUSH
62375: CALL_OW 310
62379: NOT
62380: IFFALSE 62384
// exit ;
62382: GO 62444
// tmp := IsInUnit ( unit ) ;
62384: LD_ADDR_VAR 0 3
62388: PUSH
62389: LD_VAR 0 1
62393: PPUSH
62394: CALL_OW 310
62398: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62399: LD_VAR 0 3
62403: PPUSH
62404: CALL_OW 247
62408: PUSH
62409: LD_INT 2
62411: EQUAL
62412: IFFALSE 62425
// ComExitVehicle ( unit ) else
62414: LD_VAR 0 1
62418: PPUSH
62419: CALL_OW 121
62423: GO 62434
// ComExitBuilding ( unit ) ;
62425: LD_VAR 0 1
62429: PPUSH
62430: CALL_OW 122
// result := tmp ;
62434: LD_ADDR_VAR 0 2
62438: PUSH
62439: LD_VAR 0 3
62443: ST_TO_ADDR
// end ;
62444: LD_VAR 0 2
62448: RET
// export function ComExitAll ( units ) ; var i ; begin
62449: LD_INT 0
62451: PPUSH
62452: PPUSH
// if not units then
62453: LD_VAR 0 1
62457: NOT
62458: IFFALSE 62462
// exit ;
62460: GO 62488
// for i in units do
62462: LD_ADDR_VAR 0 3
62466: PUSH
62467: LD_VAR 0 1
62471: PUSH
62472: FOR_IN
62473: IFFALSE 62486
// ComExit ( i ) ;
62475: LD_VAR 0 3
62479: PPUSH
62480: CALL 62366 0 1
62484: GO 62472
62486: POP
62487: POP
// end ;
62488: LD_VAR 0 2
62492: RET
// export function ResetHc ; begin
62493: LD_INT 0
62495: PPUSH
// InitHc ;
62496: CALL_OW 19
// hc_importance := 0 ;
62500: LD_ADDR_OWVAR 32
62504: PUSH
62505: LD_INT 0
62507: ST_TO_ADDR
// end ;
62508: LD_VAR 0 1
62512: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62513: LD_INT 0
62515: PPUSH
62516: PPUSH
62517: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62518: LD_ADDR_VAR 0 6
62522: PUSH
62523: LD_VAR 0 1
62527: PUSH
62528: LD_VAR 0 3
62532: PLUS
62533: PUSH
62534: LD_INT 2
62536: DIV
62537: ST_TO_ADDR
// if _x < 0 then
62538: LD_VAR 0 6
62542: PUSH
62543: LD_INT 0
62545: LESS
62546: IFFALSE 62563
// _x := _x * - 1 ;
62548: LD_ADDR_VAR 0 6
62552: PUSH
62553: LD_VAR 0 6
62557: PUSH
62558: LD_INT 1
62560: NEG
62561: MUL
62562: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62563: LD_ADDR_VAR 0 7
62567: PUSH
62568: LD_VAR 0 2
62572: PUSH
62573: LD_VAR 0 4
62577: PLUS
62578: PUSH
62579: LD_INT 2
62581: DIV
62582: ST_TO_ADDR
// if _y < 0 then
62583: LD_VAR 0 7
62587: PUSH
62588: LD_INT 0
62590: LESS
62591: IFFALSE 62608
// _y := _y * - 1 ;
62593: LD_ADDR_VAR 0 7
62597: PUSH
62598: LD_VAR 0 7
62602: PUSH
62603: LD_INT 1
62605: NEG
62606: MUL
62607: ST_TO_ADDR
// result := [ _x , _y ] ;
62608: LD_ADDR_VAR 0 5
62612: PUSH
62613: LD_VAR 0 6
62617: PUSH
62618: LD_VAR 0 7
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: ST_TO_ADDR
// end ;
62627: LD_VAR 0 5
62631: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62632: LD_INT 0
62634: PPUSH
62635: PPUSH
62636: PPUSH
62637: PPUSH
// task := GetTaskList ( unit ) ;
62638: LD_ADDR_VAR 0 7
62642: PUSH
62643: LD_VAR 0 1
62647: PPUSH
62648: CALL_OW 437
62652: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62653: LD_VAR 0 7
62657: NOT
62658: PUSH
62659: LD_VAR 0 1
62663: PPUSH
62664: LD_VAR 0 2
62668: PPUSH
62669: CALL_OW 308
62673: NOT
62674: AND
62675: IFFALSE 62679
// exit ;
62677: GO 62797
// if IsInArea ( unit , area ) then
62679: LD_VAR 0 1
62683: PPUSH
62684: LD_VAR 0 2
62688: PPUSH
62689: CALL_OW 308
62693: IFFALSE 62711
// begin ComMoveToArea ( unit , goAway ) ;
62695: LD_VAR 0 1
62699: PPUSH
62700: LD_VAR 0 3
62704: PPUSH
62705: CALL_OW 113
// exit ;
62709: GO 62797
// end ; if task [ 1 ] [ 1 ] <> M then
62711: LD_VAR 0 7
62715: PUSH
62716: LD_INT 1
62718: ARRAY
62719: PUSH
62720: LD_INT 1
62722: ARRAY
62723: PUSH
62724: LD_STRING M
62726: NONEQUAL
62727: IFFALSE 62731
// exit ;
62729: GO 62797
// x := task [ 1 ] [ 2 ] ;
62731: LD_ADDR_VAR 0 5
62735: PUSH
62736: LD_VAR 0 7
62740: PUSH
62741: LD_INT 1
62743: ARRAY
62744: PUSH
62745: LD_INT 2
62747: ARRAY
62748: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62749: LD_ADDR_VAR 0 6
62753: PUSH
62754: LD_VAR 0 7
62758: PUSH
62759: LD_INT 1
62761: ARRAY
62762: PUSH
62763: LD_INT 3
62765: ARRAY
62766: ST_TO_ADDR
// if InArea ( x , y , area ) then
62767: LD_VAR 0 5
62771: PPUSH
62772: LD_VAR 0 6
62776: PPUSH
62777: LD_VAR 0 2
62781: PPUSH
62782: CALL_OW 309
62786: IFFALSE 62797
// ComStop ( unit ) ;
62788: LD_VAR 0 1
62792: PPUSH
62793: CALL_OW 141
// end ;
62797: LD_VAR 0 4
62801: RET
// export function Abs ( value ) ; begin
62802: LD_INT 0
62804: PPUSH
// result := value ;
62805: LD_ADDR_VAR 0 2
62809: PUSH
62810: LD_VAR 0 1
62814: ST_TO_ADDR
// if value < 0 then
62815: LD_VAR 0 1
62819: PUSH
62820: LD_INT 0
62822: LESS
62823: IFFALSE 62840
// result := value * - 1 ;
62825: LD_ADDR_VAR 0 2
62829: PUSH
62830: LD_VAR 0 1
62834: PUSH
62835: LD_INT 1
62837: NEG
62838: MUL
62839: ST_TO_ADDR
// end ;
62840: LD_VAR 0 2
62844: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62845: LD_INT 0
62847: PPUSH
62848: PPUSH
62849: PPUSH
62850: PPUSH
62851: PPUSH
62852: PPUSH
62853: PPUSH
62854: PPUSH
// if not unit or not building then
62855: LD_VAR 0 1
62859: NOT
62860: PUSH
62861: LD_VAR 0 2
62865: NOT
62866: OR
62867: IFFALSE 62871
// exit ;
62869: GO 63097
// x := GetX ( building ) ;
62871: LD_ADDR_VAR 0 4
62875: PUSH
62876: LD_VAR 0 2
62880: PPUSH
62881: CALL_OW 250
62885: ST_TO_ADDR
// y := GetY ( building ) ;
62886: LD_ADDR_VAR 0 6
62890: PUSH
62891: LD_VAR 0 2
62895: PPUSH
62896: CALL_OW 251
62900: ST_TO_ADDR
// d := GetDir ( building ) ;
62901: LD_ADDR_VAR 0 8
62905: PUSH
62906: LD_VAR 0 2
62910: PPUSH
62911: CALL_OW 254
62915: ST_TO_ADDR
// r := 4 ;
62916: LD_ADDR_VAR 0 9
62920: PUSH
62921: LD_INT 4
62923: ST_TO_ADDR
// for i := 1 to 5 do
62924: LD_ADDR_VAR 0 10
62928: PUSH
62929: DOUBLE
62930: LD_INT 1
62932: DEC
62933: ST_TO_ADDR
62934: LD_INT 5
62936: PUSH
62937: FOR_TO
62938: IFFALSE 63095
// begin _x := ShiftX ( x , d , r + i ) ;
62940: LD_ADDR_VAR 0 5
62944: PUSH
62945: LD_VAR 0 4
62949: PPUSH
62950: LD_VAR 0 8
62954: PPUSH
62955: LD_VAR 0 9
62959: PUSH
62960: LD_VAR 0 10
62964: PLUS
62965: PPUSH
62966: CALL_OW 272
62970: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62971: LD_ADDR_VAR 0 7
62975: PUSH
62976: LD_VAR 0 6
62980: PPUSH
62981: LD_VAR 0 8
62985: PPUSH
62986: LD_VAR 0 9
62990: PUSH
62991: LD_VAR 0 10
62995: PLUS
62996: PPUSH
62997: CALL_OW 273
63001: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63002: LD_VAR 0 5
63006: PPUSH
63007: LD_VAR 0 7
63011: PPUSH
63012: CALL_OW 488
63016: PUSH
63017: LD_VAR 0 5
63021: PPUSH
63022: LD_VAR 0 7
63026: PPUSH
63027: CALL_OW 428
63031: PPUSH
63032: CALL_OW 247
63036: PUSH
63037: LD_INT 3
63039: PUSH
63040: LD_INT 2
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: IN
63047: NOT
63048: AND
63049: IFFALSE 63093
// begin ComMoveXY ( unit , _x , _y ) ;
63051: LD_VAR 0 1
63055: PPUSH
63056: LD_VAR 0 5
63060: PPUSH
63061: LD_VAR 0 7
63065: PPUSH
63066: CALL_OW 111
// result := [ _x , _y ] ;
63070: LD_ADDR_VAR 0 3
63074: PUSH
63075: LD_VAR 0 5
63079: PUSH
63080: LD_VAR 0 7
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: ST_TO_ADDR
// exit ;
63089: POP
63090: POP
63091: GO 63097
// end ; end ;
63093: GO 62937
63095: POP
63096: POP
// end ;
63097: LD_VAR 0 3
63101: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63102: LD_INT 0
63104: PPUSH
63105: PPUSH
63106: PPUSH
// result := 0 ;
63107: LD_ADDR_VAR 0 3
63111: PUSH
63112: LD_INT 0
63114: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63115: LD_VAR 0 1
63119: PUSH
63120: LD_INT 0
63122: LESS
63123: PUSH
63124: LD_VAR 0 1
63128: PUSH
63129: LD_INT 8
63131: GREATER
63132: OR
63133: PUSH
63134: LD_VAR 0 2
63138: PUSH
63139: LD_INT 0
63141: LESS
63142: OR
63143: PUSH
63144: LD_VAR 0 2
63148: PUSH
63149: LD_INT 8
63151: GREATER
63152: OR
63153: IFFALSE 63157
// exit ;
63155: GO 63232
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63157: LD_ADDR_VAR 0 4
63161: PUSH
63162: LD_INT 22
63164: PUSH
63165: LD_VAR 0 2
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PPUSH
63174: CALL_OW 69
63178: PUSH
63179: FOR_IN
63180: IFFALSE 63230
// begin un := UnitShoot ( i ) ;
63182: LD_ADDR_VAR 0 5
63186: PUSH
63187: LD_VAR 0 4
63191: PPUSH
63192: CALL_OW 504
63196: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63197: LD_VAR 0 5
63201: PPUSH
63202: CALL_OW 255
63206: PUSH
63207: LD_VAR 0 1
63211: EQUAL
63212: IFFALSE 63228
// begin result := un ;
63214: LD_ADDR_VAR 0 3
63218: PUSH
63219: LD_VAR 0 5
63223: ST_TO_ADDR
// exit ;
63224: POP
63225: POP
63226: GO 63232
// end ; end ;
63228: GO 63179
63230: POP
63231: POP
// end ;
63232: LD_VAR 0 3
63236: RET
// export function GetCargoBay ( units ) ; begin
63237: LD_INT 0
63239: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63240: LD_ADDR_VAR 0 2
63244: PUSH
63245: LD_VAR 0 1
63249: PPUSH
63250: LD_INT 2
63252: PUSH
63253: LD_INT 34
63255: PUSH
63256: LD_INT 12
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 34
63265: PUSH
63266: LD_INT 51
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 34
63275: PUSH
63276: LD_INT 32
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 34
63285: PUSH
63286: LD_EXP 60
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: PPUSH
63302: CALL_OW 72
63306: ST_TO_ADDR
// end ;
63307: LD_VAR 0 2
63311: RET
// export function Negate ( value ) ; begin
63312: LD_INT 0
63314: PPUSH
// result := not value ;
63315: LD_ADDR_VAR 0 2
63319: PUSH
63320: LD_VAR 0 1
63324: NOT
63325: ST_TO_ADDR
// end ;
63326: LD_VAR 0 2
63330: RET
// export function Inc ( value ) ; begin
63331: LD_INT 0
63333: PPUSH
// result := value + 1 ;
63334: LD_ADDR_VAR 0 2
63338: PUSH
63339: LD_VAR 0 1
63343: PUSH
63344: LD_INT 1
63346: PLUS
63347: ST_TO_ADDR
// end ;
63348: LD_VAR 0 2
63352: RET
// export function Dec ( value ) ; begin
63353: LD_INT 0
63355: PPUSH
// result := value - 1 ;
63356: LD_ADDR_VAR 0 2
63360: PUSH
63361: LD_VAR 0 1
63365: PUSH
63366: LD_INT 1
63368: MINUS
63369: ST_TO_ADDR
// end ;
63370: LD_VAR 0 2
63374: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63375: LD_INT 0
63377: PPUSH
63378: PPUSH
63379: PPUSH
63380: PPUSH
63381: PPUSH
63382: PPUSH
63383: PPUSH
63384: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63385: LD_VAR 0 1
63389: PPUSH
63390: LD_VAR 0 2
63394: PPUSH
63395: CALL_OW 488
63399: NOT
63400: PUSH
63401: LD_VAR 0 3
63405: PPUSH
63406: LD_VAR 0 4
63410: PPUSH
63411: CALL_OW 488
63415: NOT
63416: OR
63417: IFFALSE 63430
// begin result := - 1 ;
63419: LD_ADDR_VAR 0 5
63423: PUSH
63424: LD_INT 1
63426: NEG
63427: ST_TO_ADDR
// exit ;
63428: GO 63665
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63430: LD_ADDR_VAR 0 12
63434: PUSH
63435: LD_VAR 0 1
63439: PPUSH
63440: LD_VAR 0 2
63444: PPUSH
63445: LD_VAR 0 3
63449: PPUSH
63450: LD_VAR 0 4
63454: PPUSH
63455: CALL 62513 0 4
63459: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63460: LD_ADDR_VAR 0 11
63464: PUSH
63465: LD_VAR 0 1
63469: PPUSH
63470: LD_VAR 0 2
63474: PPUSH
63475: LD_VAR 0 12
63479: PUSH
63480: LD_INT 1
63482: ARRAY
63483: PPUSH
63484: LD_VAR 0 12
63488: PUSH
63489: LD_INT 2
63491: ARRAY
63492: PPUSH
63493: CALL_OW 298
63497: ST_TO_ADDR
// distance := 9999 ;
63498: LD_ADDR_VAR 0 10
63502: PUSH
63503: LD_INT 9999
63505: ST_TO_ADDR
// for i := 0 to 5 do
63506: LD_ADDR_VAR 0 6
63510: PUSH
63511: DOUBLE
63512: LD_INT 0
63514: DEC
63515: ST_TO_ADDR
63516: LD_INT 5
63518: PUSH
63519: FOR_TO
63520: IFFALSE 63663
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63522: LD_ADDR_VAR 0 7
63526: PUSH
63527: LD_VAR 0 1
63531: PPUSH
63532: LD_VAR 0 6
63536: PPUSH
63537: LD_VAR 0 11
63541: PPUSH
63542: CALL_OW 272
63546: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63547: LD_ADDR_VAR 0 8
63551: PUSH
63552: LD_VAR 0 2
63556: PPUSH
63557: LD_VAR 0 6
63561: PPUSH
63562: LD_VAR 0 11
63566: PPUSH
63567: CALL_OW 273
63571: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63572: LD_VAR 0 7
63576: PPUSH
63577: LD_VAR 0 8
63581: PPUSH
63582: CALL_OW 488
63586: NOT
63587: IFFALSE 63591
// continue ;
63589: GO 63519
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63591: LD_ADDR_VAR 0 9
63595: PUSH
63596: LD_VAR 0 12
63600: PUSH
63601: LD_INT 1
63603: ARRAY
63604: PPUSH
63605: LD_VAR 0 12
63609: PUSH
63610: LD_INT 2
63612: ARRAY
63613: PPUSH
63614: LD_VAR 0 7
63618: PPUSH
63619: LD_VAR 0 8
63623: PPUSH
63624: CALL_OW 298
63628: ST_TO_ADDR
// if tmp < distance then
63629: LD_VAR 0 9
63633: PUSH
63634: LD_VAR 0 10
63638: LESS
63639: IFFALSE 63661
// begin result := i ;
63641: LD_ADDR_VAR 0 5
63645: PUSH
63646: LD_VAR 0 6
63650: ST_TO_ADDR
// distance := tmp ;
63651: LD_ADDR_VAR 0 10
63655: PUSH
63656: LD_VAR 0 9
63660: ST_TO_ADDR
// end ; end ;
63661: GO 63519
63663: POP
63664: POP
// end ;
63665: LD_VAR 0 5
63669: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63670: LD_INT 0
63672: PPUSH
63673: PPUSH
// if not driver or not IsInUnit ( driver ) then
63674: LD_VAR 0 1
63678: NOT
63679: PUSH
63680: LD_VAR 0 1
63684: PPUSH
63685: CALL_OW 310
63689: NOT
63690: OR
63691: IFFALSE 63695
// exit ;
63693: GO 63785
// vehicle := IsInUnit ( driver ) ;
63695: LD_ADDR_VAR 0 3
63699: PUSH
63700: LD_VAR 0 1
63704: PPUSH
63705: CALL_OW 310
63709: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63710: LD_VAR 0 1
63714: PPUSH
63715: LD_STRING \
63717: PUSH
63718: LD_INT 0
63720: PUSH
63721: LD_INT 0
63723: PUSH
63724: LD_INT 0
63726: PUSH
63727: LD_INT 0
63729: PUSH
63730: LD_INT 0
63732: PUSH
63733: LD_INT 0
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: PUSH
63745: LD_STRING E
63747: PUSH
63748: LD_INT 0
63750: PUSH
63751: LD_INT 0
63753: PUSH
63754: LD_VAR 0 3
63758: PUSH
63759: LD_INT 0
63761: PUSH
63762: LD_INT 0
63764: PUSH
63765: LD_INT 0
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PPUSH
63781: CALL_OW 446
// end ;
63785: LD_VAR 0 2
63789: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63790: LD_INT 0
63792: PPUSH
63793: PPUSH
// if not driver or not IsInUnit ( driver ) then
63794: LD_VAR 0 1
63798: NOT
63799: PUSH
63800: LD_VAR 0 1
63804: PPUSH
63805: CALL_OW 310
63809: NOT
63810: OR
63811: IFFALSE 63815
// exit ;
63813: GO 63905
// vehicle := IsInUnit ( driver ) ;
63815: LD_ADDR_VAR 0 3
63819: PUSH
63820: LD_VAR 0 1
63824: PPUSH
63825: CALL_OW 310
63829: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63830: LD_VAR 0 1
63834: PPUSH
63835: LD_STRING \
63837: PUSH
63838: LD_INT 0
63840: PUSH
63841: LD_INT 0
63843: PUSH
63844: LD_INT 0
63846: PUSH
63847: LD_INT 0
63849: PUSH
63850: LD_INT 0
63852: PUSH
63853: LD_INT 0
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: PUSH
63865: LD_STRING E
63867: PUSH
63868: LD_INT 0
63870: PUSH
63871: LD_INT 0
63873: PUSH
63874: LD_VAR 0 3
63878: PUSH
63879: LD_INT 0
63881: PUSH
63882: LD_INT 0
63884: PUSH
63885: LD_INT 0
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PPUSH
63901: CALL_OW 447
// end ;
63905: LD_VAR 0 2
63909: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63910: LD_INT 0
63912: PPUSH
63913: PPUSH
63914: PPUSH
// tmp := [ ] ;
63915: LD_ADDR_VAR 0 5
63919: PUSH
63920: EMPTY
63921: ST_TO_ADDR
// for i in units do
63922: LD_ADDR_VAR 0 4
63926: PUSH
63927: LD_VAR 0 1
63931: PUSH
63932: FOR_IN
63933: IFFALSE 63971
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63935: LD_ADDR_VAR 0 5
63939: PUSH
63940: LD_VAR 0 5
63944: PPUSH
63945: LD_VAR 0 5
63949: PUSH
63950: LD_INT 1
63952: PLUS
63953: PPUSH
63954: LD_VAR 0 4
63958: PPUSH
63959: CALL_OW 256
63963: PPUSH
63964: CALL_OW 2
63968: ST_TO_ADDR
63969: GO 63932
63971: POP
63972: POP
// if not tmp then
63973: LD_VAR 0 5
63977: NOT
63978: IFFALSE 63982
// exit ;
63980: GO 64030
// if asc then
63982: LD_VAR 0 2
63986: IFFALSE 64010
// result := SortListByListAsc ( units , tmp ) else
63988: LD_ADDR_VAR 0 3
63992: PUSH
63993: LD_VAR 0 1
63997: PPUSH
63998: LD_VAR 0 5
64002: PPUSH
64003: CALL_OW 76
64007: ST_TO_ADDR
64008: GO 64030
// result := SortListByListDesc ( units , tmp ) ;
64010: LD_ADDR_VAR 0 3
64014: PUSH
64015: LD_VAR 0 1
64019: PPUSH
64020: LD_VAR 0 5
64024: PPUSH
64025: CALL_OW 77
64029: ST_TO_ADDR
// end ;
64030: LD_VAR 0 3
64034: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64035: LD_INT 0
64037: PPUSH
64038: PPUSH
// task := GetTaskList ( mech ) ;
64039: LD_ADDR_VAR 0 4
64043: PUSH
64044: LD_VAR 0 1
64048: PPUSH
64049: CALL_OW 437
64053: ST_TO_ADDR
// if not task then
64054: LD_VAR 0 4
64058: NOT
64059: IFFALSE 64063
// exit ;
64061: GO 64105
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64063: LD_ADDR_VAR 0 3
64067: PUSH
64068: LD_VAR 0 4
64072: PUSH
64073: LD_INT 1
64075: ARRAY
64076: PUSH
64077: LD_INT 1
64079: ARRAY
64080: PUSH
64081: LD_STRING r
64083: EQUAL
64084: PUSH
64085: LD_VAR 0 4
64089: PUSH
64090: LD_INT 1
64092: ARRAY
64093: PUSH
64094: LD_INT 4
64096: ARRAY
64097: PUSH
64098: LD_VAR 0 2
64102: EQUAL
64103: AND
64104: ST_TO_ADDR
// end ;
64105: LD_VAR 0 3
64109: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64110: LD_INT 0
64112: PPUSH
// SetDir ( unit , d ) ;
64113: LD_VAR 0 1
64117: PPUSH
64118: LD_VAR 0 4
64122: PPUSH
64123: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64127: LD_VAR 0 1
64131: PPUSH
64132: LD_VAR 0 2
64136: PPUSH
64137: LD_VAR 0 3
64141: PPUSH
64142: LD_VAR 0 5
64146: PPUSH
64147: CALL_OW 48
// end ;
64151: LD_VAR 0 6
64155: RET
// export function ToNaturalNumber ( number ) ; begin
64156: LD_INT 0
64158: PPUSH
// result := number div 1 ;
64159: LD_ADDR_VAR 0 2
64163: PUSH
64164: LD_VAR 0 1
64168: PUSH
64169: LD_INT 1
64171: DIV
64172: ST_TO_ADDR
// if number < 0 then
64173: LD_VAR 0 1
64177: PUSH
64178: LD_INT 0
64180: LESS
64181: IFFALSE 64191
// result := 0 ;
64183: LD_ADDR_VAR 0 2
64187: PUSH
64188: LD_INT 0
64190: ST_TO_ADDR
// end ;
64191: LD_VAR 0 2
64195: RET
// export function SortByClass ( units , class ) ; var un ; begin
64196: LD_INT 0
64198: PPUSH
64199: PPUSH
// if not units or not class then
64200: LD_VAR 0 1
64204: NOT
64205: PUSH
64206: LD_VAR 0 2
64210: NOT
64211: OR
64212: IFFALSE 64216
// exit ;
64214: GO 64311
// result := [ ] ;
64216: LD_ADDR_VAR 0 3
64220: PUSH
64221: EMPTY
64222: ST_TO_ADDR
// for un in units do
64223: LD_ADDR_VAR 0 4
64227: PUSH
64228: LD_VAR 0 1
64232: PUSH
64233: FOR_IN
64234: IFFALSE 64309
// if GetClass ( un ) = class then
64236: LD_VAR 0 4
64240: PPUSH
64241: CALL_OW 257
64245: PUSH
64246: LD_VAR 0 2
64250: EQUAL
64251: IFFALSE 64278
// result := Insert ( result , 1 , un ) else
64253: LD_ADDR_VAR 0 3
64257: PUSH
64258: LD_VAR 0 3
64262: PPUSH
64263: LD_INT 1
64265: PPUSH
64266: LD_VAR 0 4
64270: PPUSH
64271: CALL_OW 2
64275: ST_TO_ADDR
64276: GO 64307
// result := Replace ( result , result + 1 , un ) ;
64278: LD_ADDR_VAR 0 3
64282: PUSH
64283: LD_VAR 0 3
64287: PPUSH
64288: LD_VAR 0 3
64292: PUSH
64293: LD_INT 1
64295: PLUS
64296: PPUSH
64297: LD_VAR 0 4
64301: PPUSH
64302: CALL_OW 1
64306: ST_TO_ADDR
64307: GO 64233
64309: POP
64310: POP
// end ;
64311: LD_VAR 0 3
64315: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64316: LD_INT 0
64318: PPUSH
64319: PPUSH
64320: PPUSH
64321: PPUSH
64322: PPUSH
64323: PPUSH
64324: PPUSH
// result := [ ] ;
64325: LD_ADDR_VAR 0 4
64329: PUSH
64330: EMPTY
64331: ST_TO_ADDR
// if x - r < 0 then
64332: LD_VAR 0 1
64336: PUSH
64337: LD_VAR 0 3
64341: MINUS
64342: PUSH
64343: LD_INT 0
64345: LESS
64346: IFFALSE 64358
// min_x := 0 else
64348: LD_ADDR_VAR 0 8
64352: PUSH
64353: LD_INT 0
64355: ST_TO_ADDR
64356: GO 64374
// min_x := x - r ;
64358: LD_ADDR_VAR 0 8
64362: PUSH
64363: LD_VAR 0 1
64367: PUSH
64368: LD_VAR 0 3
64372: MINUS
64373: ST_TO_ADDR
// if y - r < 0 then
64374: LD_VAR 0 2
64378: PUSH
64379: LD_VAR 0 3
64383: MINUS
64384: PUSH
64385: LD_INT 0
64387: LESS
64388: IFFALSE 64400
// min_y := 0 else
64390: LD_ADDR_VAR 0 7
64394: PUSH
64395: LD_INT 0
64397: ST_TO_ADDR
64398: GO 64416
// min_y := y - r ;
64400: LD_ADDR_VAR 0 7
64404: PUSH
64405: LD_VAR 0 2
64409: PUSH
64410: LD_VAR 0 3
64414: MINUS
64415: ST_TO_ADDR
// max_x := x + r ;
64416: LD_ADDR_VAR 0 9
64420: PUSH
64421: LD_VAR 0 1
64425: PUSH
64426: LD_VAR 0 3
64430: PLUS
64431: ST_TO_ADDR
// max_y := y + r ;
64432: LD_ADDR_VAR 0 10
64436: PUSH
64437: LD_VAR 0 2
64441: PUSH
64442: LD_VAR 0 3
64446: PLUS
64447: ST_TO_ADDR
// for _x = min_x to max_x do
64448: LD_ADDR_VAR 0 5
64452: PUSH
64453: DOUBLE
64454: LD_VAR 0 8
64458: DEC
64459: ST_TO_ADDR
64460: LD_VAR 0 9
64464: PUSH
64465: FOR_TO
64466: IFFALSE 64567
// for _y = min_y to max_y do
64468: LD_ADDR_VAR 0 6
64472: PUSH
64473: DOUBLE
64474: LD_VAR 0 7
64478: DEC
64479: ST_TO_ADDR
64480: LD_VAR 0 10
64484: PUSH
64485: FOR_TO
64486: IFFALSE 64563
// begin if not ValidHex ( _x , _y ) then
64488: LD_VAR 0 5
64492: PPUSH
64493: LD_VAR 0 6
64497: PPUSH
64498: CALL_OW 488
64502: NOT
64503: IFFALSE 64507
// continue ;
64505: GO 64485
// if GetResourceTypeXY ( _x , _y ) then
64507: LD_VAR 0 5
64511: PPUSH
64512: LD_VAR 0 6
64516: PPUSH
64517: CALL_OW 283
64521: IFFALSE 64561
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64523: LD_ADDR_VAR 0 4
64527: PUSH
64528: LD_VAR 0 4
64532: PPUSH
64533: LD_VAR 0 4
64537: PUSH
64538: LD_INT 1
64540: PLUS
64541: PPUSH
64542: LD_VAR 0 5
64546: PUSH
64547: LD_VAR 0 6
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PPUSH
64556: CALL_OW 1
64560: ST_TO_ADDR
// end ;
64561: GO 64485
64563: POP
64564: POP
64565: GO 64465
64567: POP
64568: POP
// end ;
64569: LD_VAR 0 4
64573: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64574: LD_INT 0
64576: PPUSH
64577: PPUSH
64578: PPUSH
64579: PPUSH
64580: PPUSH
64581: PPUSH
64582: PPUSH
64583: PPUSH
// if not units then
64584: LD_VAR 0 1
64588: NOT
64589: IFFALSE 64593
// exit ;
64591: GO 65018
// result := UnitFilter ( units , [ f_ok ] ) ;
64593: LD_ADDR_VAR 0 3
64597: PUSH
64598: LD_VAR 0 1
64602: PPUSH
64603: LD_INT 50
64605: PUSH
64606: EMPTY
64607: LIST
64608: PPUSH
64609: CALL_OW 72
64613: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64614: LD_ADDR_VAR 0 8
64618: PUSH
64619: LD_VAR 0 1
64623: PUSH
64624: LD_INT 1
64626: ARRAY
64627: PPUSH
64628: CALL_OW 255
64632: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
64633: LD_ADDR_VAR 0 10
64637: PUSH
64638: LD_INT 29
64640: PUSH
64641: LD_EXP 63
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: ST_TO_ADDR
// if not result then
64650: LD_VAR 0 3
64654: NOT
64655: IFFALSE 64659
// exit ;
64657: GO 65018
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64659: LD_ADDR_VAR 0 5
64663: PUSH
64664: LD_INT 81
64666: PUSH
64667: LD_VAR 0 8
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PPUSH
64676: CALL_OW 69
64680: ST_TO_ADDR
// for i in result do
64681: LD_ADDR_VAR 0 4
64685: PUSH
64686: LD_VAR 0 3
64690: PUSH
64691: FOR_IN
64692: IFFALSE 65016
// begin tag := GetTag ( i ) + 1 ;
64694: LD_ADDR_VAR 0 9
64698: PUSH
64699: LD_VAR 0 4
64703: PPUSH
64704: CALL_OW 110
64708: PUSH
64709: LD_INT 1
64711: PLUS
64712: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64713: LD_ADDR_VAR 0 7
64717: PUSH
64718: LD_VAR 0 4
64722: PPUSH
64723: CALL_OW 250
64727: PPUSH
64728: LD_VAR 0 4
64732: PPUSH
64733: CALL_OW 251
64737: PPUSH
64738: LD_INT 6
64740: PPUSH
64741: CALL 64316 0 3
64745: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64746: LD_VAR 0 7
64750: PUSH
64751: LD_VAR 0 4
64755: PPUSH
64756: CALL_OW 264
64760: PUSH
64761: LD_VAR 0 10
64765: IN
64766: NOT
64767: AND
64768: IFFALSE 64807
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64770: LD_VAR 0 4
64774: PPUSH
64775: LD_VAR 0 7
64779: PUSH
64780: LD_INT 1
64782: ARRAY
64783: PUSH
64784: LD_INT 1
64786: ARRAY
64787: PPUSH
64788: LD_VAR 0 7
64792: PUSH
64793: LD_INT 1
64795: ARRAY
64796: PUSH
64797: LD_INT 2
64799: ARRAY
64800: PPUSH
64801: CALL_OW 116
64805: GO 65014
// if path > tag then
64807: LD_VAR 0 2
64811: PUSH
64812: LD_VAR 0 9
64816: GREATER
64817: IFFALSE 64984
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
64819: LD_ADDR_VAR 0 6
64823: PUSH
64824: LD_VAR 0 5
64828: PPUSH
64829: LD_INT 91
64831: PUSH
64832: LD_VAR 0 4
64836: PUSH
64837: LD_INT 12
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: LIST
64844: PPUSH
64845: CALL_OW 72
64849: ST_TO_ADDR
// if nearEnemy then
64850: LD_VAR 0 6
64854: IFFALSE 64882
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64856: LD_VAR 0 4
64860: PPUSH
64861: LD_VAR 0 6
64865: PPUSH
64866: LD_VAR 0 4
64870: PPUSH
64871: CALL_OW 74
64875: PPUSH
64876: CALL_OW 115
64880: GO 64982
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64882: LD_VAR 0 4
64886: PPUSH
64887: LD_VAR 0 2
64891: PUSH
64892: LD_VAR 0 9
64896: ARRAY
64897: PUSH
64898: LD_INT 1
64900: ARRAY
64901: PPUSH
64902: LD_VAR 0 2
64906: PUSH
64907: LD_VAR 0 9
64911: ARRAY
64912: PUSH
64913: LD_INT 2
64915: ARRAY
64916: PPUSH
64917: CALL_OW 297
64921: PUSH
64922: LD_INT 6
64924: GREATER
64925: IFFALSE 64968
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64927: LD_VAR 0 4
64931: PPUSH
64932: LD_VAR 0 2
64936: PUSH
64937: LD_VAR 0 9
64941: ARRAY
64942: PUSH
64943: LD_INT 1
64945: ARRAY
64946: PPUSH
64947: LD_VAR 0 2
64951: PUSH
64952: LD_VAR 0 9
64956: ARRAY
64957: PUSH
64958: LD_INT 2
64960: ARRAY
64961: PPUSH
64962: CALL_OW 114
64966: GO 64982
// SetTag ( i , tag ) ;
64968: LD_VAR 0 4
64972: PPUSH
64973: LD_VAR 0 9
64977: PPUSH
64978: CALL_OW 109
// end else
64982: GO 65014
// if enemy then
64984: LD_VAR 0 5
64988: IFFALSE 65014
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64990: LD_VAR 0 4
64994: PPUSH
64995: LD_VAR 0 5
64999: PPUSH
65000: LD_VAR 0 4
65004: PPUSH
65005: CALL_OW 74
65009: PPUSH
65010: CALL_OW 115
// end ;
65014: GO 64691
65016: POP
65017: POP
// end ;
65018: LD_VAR 0 3
65022: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65023: LD_INT 0
65025: PPUSH
65026: PPUSH
65027: PPUSH
// if not unit or IsInUnit ( unit ) then
65028: LD_VAR 0 1
65032: NOT
65033: PUSH
65034: LD_VAR 0 1
65038: PPUSH
65039: CALL_OW 310
65043: OR
65044: IFFALSE 65048
// exit ;
65046: GO 65139
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65048: LD_ADDR_VAR 0 4
65052: PUSH
65053: LD_VAR 0 1
65057: PPUSH
65058: CALL_OW 250
65062: PPUSH
65063: LD_VAR 0 2
65067: PPUSH
65068: LD_INT 1
65070: PPUSH
65071: CALL_OW 272
65075: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65076: LD_ADDR_VAR 0 5
65080: PUSH
65081: LD_VAR 0 1
65085: PPUSH
65086: CALL_OW 251
65090: PPUSH
65091: LD_VAR 0 2
65095: PPUSH
65096: LD_INT 1
65098: PPUSH
65099: CALL_OW 273
65103: ST_TO_ADDR
// if ValidHex ( x , y ) then
65104: LD_VAR 0 4
65108: PPUSH
65109: LD_VAR 0 5
65113: PPUSH
65114: CALL_OW 488
65118: IFFALSE 65139
// ComTurnXY ( unit , x , y ) ;
65120: LD_VAR 0 1
65124: PPUSH
65125: LD_VAR 0 4
65129: PPUSH
65130: LD_VAR 0 5
65134: PPUSH
65135: CALL_OW 118
// end ;
65139: LD_VAR 0 3
65143: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65144: LD_INT 0
65146: PPUSH
65147: PPUSH
// result := false ;
65148: LD_ADDR_VAR 0 3
65152: PUSH
65153: LD_INT 0
65155: ST_TO_ADDR
// if not units then
65156: LD_VAR 0 2
65160: NOT
65161: IFFALSE 65165
// exit ;
65163: GO 65210
// for i in units do
65165: LD_ADDR_VAR 0 4
65169: PUSH
65170: LD_VAR 0 2
65174: PUSH
65175: FOR_IN
65176: IFFALSE 65208
// if See ( side , i ) then
65178: LD_VAR 0 1
65182: PPUSH
65183: LD_VAR 0 4
65187: PPUSH
65188: CALL_OW 292
65192: IFFALSE 65206
// begin result := true ;
65194: LD_ADDR_VAR 0 3
65198: PUSH
65199: LD_INT 1
65201: ST_TO_ADDR
// exit ;
65202: POP
65203: POP
65204: GO 65210
// end ;
65206: GO 65175
65208: POP
65209: POP
// end ;
65210: LD_VAR 0 3
65214: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65215: LD_INT 0
65217: PPUSH
65218: PPUSH
65219: PPUSH
65220: PPUSH
// if not unit or not points then
65221: LD_VAR 0 1
65225: NOT
65226: PUSH
65227: LD_VAR 0 2
65231: NOT
65232: OR
65233: IFFALSE 65237
// exit ;
65235: GO 65327
// dist := 99999 ;
65237: LD_ADDR_VAR 0 5
65241: PUSH
65242: LD_INT 99999
65244: ST_TO_ADDR
// for i in points do
65245: LD_ADDR_VAR 0 4
65249: PUSH
65250: LD_VAR 0 2
65254: PUSH
65255: FOR_IN
65256: IFFALSE 65325
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65258: LD_ADDR_VAR 0 6
65262: PUSH
65263: LD_VAR 0 1
65267: PPUSH
65268: LD_VAR 0 4
65272: PUSH
65273: LD_INT 1
65275: ARRAY
65276: PPUSH
65277: LD_VAR 0 4
65281: PUSH
65282: LD_INT 2
65284: ARRAY
65285: PPUSH
65286: CALL_OW 297
65290: ST_TO_ADDR
// if tmpDist < dist then
65291: LD_VAR 0 6
65295: PUSH
65296: LD_VAR 0 5
65300: LESS
65301: IFFALSE 65323
// begin result := i ;
65303: LD_ADDR_VAR 0 3
65307: PUSH
65308: LD_VAR 0 4
65312: ST_TO_ADDR
// dist := tmpDist ;
65313: LD_ADDR_VAR 0 5
65317: PUSH
65318: LD_VAR 0 6
65322: ST_TO_ADDR
// end ; end ;
65323: GO 65255
65325: POP
65326: POP
// end ;
65327: LD_VAR 0 3
65331: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65332: LD_INT 0
65334: PPUSH
// uc_side := side ;
65335: LD_ADDR_OWVAR 20
65339: PUSH
65340: LD_VAR 0 1
65344: ST_TO_ADDR
// uc_nation := 3 ;
65345: LD_ADDR_OWVAR 21
65349: PUSH
65350: LD_INT 3
65352: ST_TO_ADDR
// vc_chassis := 25 ;
65353: LD_ADDR_OWVAR 37
65357: PUSH
65358: LD_INT 25
65360: ST_TO_ADDR
// vc_engine := engine_siberite ;
65361: LD_ADDR_OWVAR 39
65365: PUSH
65366: LD_INT 3
65368: ST_TO_ADDR
// vc_control := control_computer ;
65369: LD_ADDR_OWVAR 38
65373: PUSH
65374: LD_INT 3
65376: ST_TO_ADDR
// vc_weapon := 59 ;
65377: LD_ADDR_OWVAR 40
65381: PUSH
65382: LD_INT 59
65384: ST_TO_ADDR
// result := CreateVehicle ;
65385: LD_ADDR_VAR 0 5
65389: PUSH
65390: CALL_OW 45
65394: ST_TO_ADDR
// SetDir ( result , d ) ;
65395: LD_VAR 0 5
65399: PPUSH
65400: LD_VAR 0 4
65404: PPUSH
65405: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65409: LD_VAR 0 5
65413: PPUSH
65414: LD_VAR 0 2
65418: PPUSH
65419: LD_VAR 0 3
65423: PPUSH
65424: LD_INT 0
65426: PPUSH
65427: CALL_OW 48
// end ;
65431: LD_VAR 0 5
65435: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65436: LD_INT 0
65438: PPUSH
65439: PPUSH
65440: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65441: LD_ADDR_VAR 0 2
65445: PUSH
65446: LD_INT 0
65448: PUSH
65449: LD_INT 0
65451: PUSH
65452: LD_INT 0
65454: PUSH
65455: LD_INT 0
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65464: LD_VAR 0 1
65468: NOT
65469: PUSH
65470: LD_VAR 0 1
65474: PPUSH
65475: CALL_OW 264
65479: PUSH
65480: LD_INT 12
65482: PUSH
65483: LD_INT 51
65485: PUSH
65486: LD_INT 32
65488: PUSH
65489: LD_EXP 60
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: IN
65500: NOT
65501: OR
65502: IFFALSE 65506
// exit ;
65504: GO 65604
// for i := 1 to 3 do
65506: LD_ADDR_VAR 0 3
65510: PUSH
65511: DOUBLE
65512: LD_INT 1
65514: DEC
65515: ST_TO_ADDR
65516: LD_INT 3
65518: PUSH
65519: FOR_TO
65520: IFFALSE 65602
// begin tmp := GetCargo ( cargo , i ) ;
65522: LD_ADDR_VAR 0 4
65526: PUSH
65527: LD_VAR 0 1
65531: PPUSH
65532: LD_VAR 0 3
65536: PPUSH
65537: CALL_OW 289
65541: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65542: LD_ADDR_VAR 0 2
65546: PUSH
65547: LD_VAR 0 2
65551: PPUSH
65552: LD_VAR 0 3
65556: PPUSH
65557: LD_VAR 0 4
65561: PPUSH
65562: CALL_OW 1
65566: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65567: LD_ADDR_VAR 0 2
65571: PUSH
65572: LD_VAR 0 2
65576: PPUSH
65577: LD_INT 4
65579: PPUSH
65580: LD_VAR 0 2
65584: PUSH
65585: LD_INT 4
65587: ARRAY
65588: PUSH
65589: LD_VAR 0 4
65593: PLUS
65594: PPUSH
65595: CALL_OW 1
65599: ST_TO_ADDR
// end ;
65600: GO 65519
65602: POP
65603: POP
// end ; end_of_file
65604: LD_VAR 0 2
65608: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
65609: LD_INT 0
65611: PPUSH
// ar_miner := 81 ;
65612: LD_ADDR_EXP 66
65616: PUSH
65617: LD_INT 81
65619: ST_TO_ADDR
// ar_crane := 88 ;
65620: LD_ADDR_EXP 65
65624: PUSH
65625: LD_INT 88
65627: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
65628: LD_ADDR_EXP 60
65632: PUSH
65633: LD_INT 89
65635: ST_TO_ADDR
// us_hack := 99 ;
65636: LD_ADDR_EXP 61
65640: PUSH
65641: LD_INT 99
65643: ST_TO_ADDR
// us_artillery := 97 ;
65644: LD_ADDR_EXP 62
65648: PUSH
65649: LD_INT 97
65651: ST_TO_ADDR
// ar_bio_bomb := 91 ;
65652: LD_ADDR_EXP 63
65656: PUSH
65657: LD_INT 91
65659: ST_TO_ADDR
// ar_mortar := 92 ;
65660: LD_ADDR_EXP 64
65664: PUSH
65665: LD_INT 92
65667: ST_TO_ADDR
// ru_flamethrower := 93 ;
65668: LD_ADDR_EXP 67
65672: PUSH
65673: LD_INT 93
65675: ST_TO_ADDR
// ru_radar := 98 ;
65676: LD_ADDR_EXP 59
65680: PUSH
65681: LD_INT 98
65683: ST_TO_ADDR
// tech_Artillery := 80 ;
65684: LD_ADDR_EXP 68
65688: PUSH
65689: LD_INT 80
65691: ST_TO_ADDR
// tech_RadMat := 81 ;
65692: LD_ADDR_EXP 69
65696: PUSH
65697: LD_INT 81
65699: ST_TO_ADDR
// tech_BasicTools := 82 ;
65700: LD_ADDR_EXP 70
65704: PUSH
65705: LD_INT 82
65707: ST_TO_ADDR
// tech_Cargo := 83 ;
65708: LD_ADDR_EXP 71
65712: PUSH
65713: LD_INT 83
65715: ST_TO_ADDR
// tech_Track := 84 ;
65716: LD_ADDR_EXP 72
65720: PUSH
65721: LD_INT 84
65723: ST_TO_ADDR
// tech_Crane := 85 ;
65724: LD_ADDR_EXP 73
65728: PUSH
65729: LD_INT 85
65731: ST_TO_ADDR
// tech_Bulldozer := 86 ;
65732: LD_ADDR_EXP 74
65736: PUSH
65737: LD_INT 86
65739: ST_TO_ADDR
// tech_Hovercraft := 87 ;
65740: LD_ADDR_EXP 75
65744: PUSH
65745: LD_INT 87
65747: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
65748: LD_ADDR_EXP 76
65752: PUSH
65753: LD_INT 88
65755: ST_TO_ADDR
// class_mastodont := 31 ;
65756: LD_ADDR_EXP 77
65760: PUSH
65761: LD_INT 31
65763: ST_TO_ADDR
// class_horse := 21 ;
65764: LD_ADDR_EXP 78
65768: PUSH
65769: LD_INT 21
65771: ST_TO_ADDR
// end ;
65772: LD_VAR 0 1
65776: RET
// every 1 do
65777: GO 65779
65779: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
65780: CALL 65609 0 0
65784: END
// every 0 0$1 do
65785: GO 65787
65787: DISABLE
// begin enable ;
65788: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
65789: LD_STRING updateTimer(
65791: PUSH
65792: LD_OWVAR 1
65796: STR
65797: PUSH
65798: LD_STRING );
65800: STR
65801: PPUSH
65802: CALL_OW 559
// end ;
65806: END
// export function SOS_MapStart ( ) ; begin
65807: LD_INT 0
65809: PPUSH
// if streamModeActive then
65810: LD_EXP 79
65814: IFFALSE 65823
// DefineStreamItems ( true ) ;
65816: LD_INT 1
65818: PPUSH
65819: CALL 67473 0 1
// UpdateFactoryWaypoints ( ) ;
65823: CALL 81220 0 0
// end ;
65827: LD_VAR 0 1
65831: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
65832: LD_INT 0
65834: PPUSH
// if p2 = 100 then
65835: LD_VAR 0 2
65839: PUSH
65840: LD_INT 100
65842: EQUAL
65843: IFFALSE 66846
// begin if not StreamModeActive then
65845: LD_EXP 79
65849: NOT
65850: IFFALSE 65860
// StreamModeActive := true ;
65852: LD_ADDR_EXP 79
65856: PUSH
65857: LD_INT 1
65859: ST_TO_ADDR
// if p3 = 0 then
65860: LD_VAR 0 3
65864: PUSH
65865: LD_INT 0
65867: EQUAL
65868: IFFALSE 65874
// InitStreamMode ;
65870: CALL 67009 0 0
// if p3 = 1 then
65874: LD_VAR 0 3
65878: PUSH
65879: LD_INT 1
65881: EQUAL
65882: IFFALSE 65892
// sRocket := true ;
65884: LD_ADDR_EXP 84
65888: PUSH
65889: LD_INT 1
65891: ST_TO_ADDR
// if p3 = 2 then
65892: LD_VAR 0 3
65896: PUSH
65897: LD_INT 2
65899: EQUAL
65900: IFFALSE 65910
// sSpeed := true ;
65902: LD_ADDR_EXP 83
65906: PUSH
65907: LD_INT 1
65909: ST_TO_ADDR
// if p3 = 3 then
65910: LD_VAR 0 3
65914: PUSH
65915: LD_INT 3
65917: EQUAL
65918: IFFALSE 65928
// sEngine := true ;
65920: LD_ADDR_EXP 85
65924: PUSH
65925: LD_INT 1
65927: ST_TO_ADDR
// if p3 = 4 then
65928: LD_VAR 0 3
65932: PUSH
65933: LD_INT 4
65935: EQUAL
65936: IFFALSE 65946
// sSpec := true ;
65938: LD_ADDR_EXP 82
65942: PUSH
65943: LD_INT 1
65945: ST_TO_ADDR
// if p3 = 5 then
65946: LD_VAR 0 3
65950: PUSH
65951: LD_INT 5
65953: EQUAL
65954: IFFALSE 65964
// sLevel := true ;
65956: LD_ADDR_EXP 86
65960: PUSH
65961: LD_INT 1
65963: ST_TO_ADDR
// if p3 = 6 then
65964: LD_VAR 0 3
65968: PUSH
65969: LD_INT 6
65971: EQUAL
65972: IFFALSE 65982
// sArmoury := true ;
65974: LD_ADDR_EXP 87
65978: PUSH
65979: LD_INT 1
65981: ST_TO_ADDR
// if p3 = 7 then
65982: LD_VAR 0 3
65986: PUSH
65987: LD_INT 7
65989: EQUAL
65990: IFFALSE 66000
// sRadar := true ;
65992: LD_ADDR_EXP 88
65996: PUSH
65997: LD_INT 1
65999: ST_TO_ADDR
// if p3 = 8 then
66000: LD_VAR 0 3
66004: PUSH
66005: LD_INT 8
66007: EQUAL
66008: IFFALSE 66018
// sBunker := true ;
66010: LD_ADDR_EXP 89
66014: PUSH
66015: LD_INT 1
66017: ST_TO_ADDR
// if p3 = 9 then
66018: LD_VAR 0 3
66022: PUSH
66023: LD_INT 9
66025: EQUAL
66026: IFFALSE 66036
// sHack := true ;
66028: LD_ADDR_EXP 90
66032: PUSH
66033: LD_INT 1
66035: ST_TO_ADDR
// if p3 = 10 then
66036: LD_VAR 0 3
66040: PUSH
66041: LD_INT 10
66043: EQUAL
66044: IFFALSE 66054
// sFire := true ;
66046: LD_ADDR_EXP 91
66050: PUSH
66051: LD_INT 1
66053: ST_TO_ADDR
// if p3 = 11 then
66054: LD_VAR 0 3
66058: PUSH
66059: LD_INT 11
66061: EQUAL
66062: IFFALSE 66072
// sRefresh := true ;
66064: LD_ADDR_EXP 92
66068: PUSH
66069: LD_INT 1
66071: ST_TO_ADDR
// if p3 = 12 then
66072: LD_VAR 0 3
66076: PUSH
66077: LD_INT 12
66079: EQUAL
66080: IFFALSE 66090
// sExp := true ;
66082: LD_ADDR_EXP 93
66086: PUSH
66087: LD_INT 1
66089: ST_TO_ADDR
// if p3 = 13 then
66090: LD_VAR 0 3
66094: PUSH
66095: LD_INT 13
66097: EQUAL
66098: IFFALSE 66108
// sDepot := true ;
66100: LD_ADDR_EXP 94
66104: PUSH
66105: LD_INT 1
66107: ST_TO_ADDR
// if p3 = 14 then
66108: LD_VAR 0 3
66112: PUSH
66113: LD_INT 14
66115: EQUAL
66116: IFFALSE 66126
// sFlag := true ;
66118: LD_ADDR_EXP 95
66122: PUSH
66123: LD_INT 1
66125: ST_TO_ADDR
// if p3 = 15 then
66126: LD_VAR 0 3
66130: PUSH
66131: LD_INT 15
66133: EQUAL
66134: IFFALSE 66144
// sKamikadze := true ;
66136: LD_ADDR_EXP 103
66140: PUSH
66141: LD_INT 1
66143: ST_TO_ADDR
// if p3 = 16 then
66144: LD_VAR 0 3
66148: PUSH
66149: LD_INT 16
66151: EQUAL
66152: IFFALSE 66162
// sTroll := true ;
66154: LD_ADDR_EXP 104
66158: PUSH
66159: LD_INT 1
66161: ST_TO_ADDR
// if p3 = 17 then
66162: LD_VAR 0 3
66166: PUSH
66167: LD_INT 17
66169: EQUAL
66170: IFFALSE 66180
// sSlow := true ;
66172: LD_ADDR_EXP 105
66176: PUSH
66177: LD_INT 1
66179: ST_TO_ADDR
// if p3 = 18 then
66180: LD_VAR 0 3
66184: PUSH
66185: LD_INT 18
66187: EQUAL
66188: IFFALSE 66198
// sLack := true ;
66190: LD_ADDR_EXP 106
66194: PUSH
66195: LD_INT 1
66197: ST_TO_ADDR
// if p3 = 19 then
66198: LD_VAR 0 3
66202: PUSH
66203: LD_INT 19
66205: EQUAL
66206: IFFALSE 66216
// sTank := true ;
66208: LD_ADDR_EXP 108
66212: PUSH
66213: LD_INT 1
66215: ST_TO_ADDR
// if p3 = 20 then
66216: LD_VAR 0 3
66220: PUSH
66221: LD_INT 20
66223: EQUAL
66224: IFFALSE 66234
// sRemote := true ;
66226: LD_ADDR_EXP 109
66230: PUSH
66231: LD_INT 1
66233: ST_TO_ADDR
// if p3 = 21 then
66234: LD_VAR 0 3
66238: PUSH
66239: LD_INT 21
66241: EQUAL
66242: IFFALSE 66252
// sPowell := true ;
66244: LD_ADDR_EXP 110
66248: PUSH
66249: LD_INT 1
66251: ST_TO_ADDR
// if p3 = 22 then
66252: LD_VAR 0 3
66256: PUSH
66257: LD_INT 22
66259: EQUAL
66260: IFFALSE 66270
// sTeleport := true ;
66262: LD_ADDR_EXP 113
66266: PUSH
66267: LD_INT 1
66269: ST_TO_ADDR
// if p3 = 23 then
66270: LD_VAR 0 3
66274: PUSH
66275: LD_INT 23
66277: EQUAL
66278: IFFALSE 66288
// sOilTower := true ;
66280: LD_ADDR_EXP 115
66284: PUSH
66285: LD_INT 1
66287: ST_TO_ADDR
// if p3 = 24 then
66288: LD_VAR 0 3
66292: PUSH
66293: LD_INT 24
66295: EQUAL
66296: IFFALSE 66306
// sShovel := true ;
66298: LD_ADDR_EXP 116
66302: PUSH
66303: LD_INT 1
66305: ST_TO_ADDR
// if p3 = 25 then
66306: LD_VAR 0 3
66310: PUSH
66311: LD_INT 25
66313: EQUAL
66314: IFFALSE 66324
// sSheik := true ;
66316: LD_ADDR_EXP 117
66320: PUSH
66321: LD_INT 1
66323: ST_TO_ADDR
// if p3 = 26 then
66324: LD_VAR 0 3
66328: PUSH
66329: LD_INT 26
66331: EQUAL
66332: IFFALSE 66342
// sEarthquake := true ;
66334: LD_ADDR_EXP 119
66338: PUSH
66339: LD_INT 1
66341: ST_TO_ADDR
// if p3 = 27 then
66342: LD_VAR 0 3
66346: PUSH
66347: LD_INT 27
66349: EQUAL
66350: IFFALSE 66360
// sAI := true ;
66352: LD_ADDR_EXP 120
66356: PUSH
66357: LD_INT 1
66359: ST_TO_ADDR
// if p3 = 28 then
66360: LD_VAR 0 3
66364: PUSH
66365: LD_INT 28
66367: EQUAL
66368: IFFALSE 66378
// sCargo := true ;
66370: LD_ADDR_EXP 123
66374: PUSH
66375: LD_INT 1
66377: ST_TO_ADDR
// if p3 = 29 then
66378: LD_VAR 0 3
66382: PUSH
66383: LD_INT 29
66385: EQUAL
66386: IFFALSE 66396
// sDLaser := true ;
66388: LD_ADDR_EXP 124
66392: PUSH
66393: LD_INT 1
66395: ST_TO_ADDR
// if p3 = 30 then
66396: LD_VAR 0 3
66400: PUSH
66401: LD_INT 30
66403: EQUAL
66404: IFFALSE 66414
// sExchange := true ;
66406: LD_ADDR_EXP 125
66410: PUSH
66411: LD_INT 1
66413: ST_TO_ADDR
// if p3 = 31 then
66414: LD_VAR 0 3
66418: PUSH
66419: LD_INT 31
66421: EQUAL
66422: IFFALSE 66432
// sFac := true ;
66424: LD_ADDR_EXP 126
66428: PUSH
66429: LD_INT 1
66431: ST_TO_ADDR
// if p3 = 32 then
66432: LD_VAR 0 3
66436: PUSH
66437: LD_INT 32
66439: EQUAL
66440: IFFALSE 66450
// sPower := true ;
66442: LD_ADDR_EXP 127
66446: PUSH
66447: LD_INT 1
66449: ST_TO_ADDR
// if p3 = 33 then
66450: LD_VAR 0 3
66454: PUSH
66455: LD_INT 33
66457: EQUAL
66458: IFFALSE 66468
// sRandom := true ;
66460: LD_ADDR_EXP 128
66464: PUSH
66465: LD_INT 1
66467: ST_TO_ADDR
// if p3 = 34 then
66468: LD_VAR 0 3
66472: PUSH
66473: LD_INT 34
66475: EQUAL
66476: IFFALSE 66486
// sShield := true ;
66478: LD_ADDR_EXP 129
66482: PUSH
66483: LD_INT 1
66485: ST_TO_ADDR
// if p3 = 35 then
66486: LD_VAR 0 3
66490: PUSH
66491: LD_INT 35
66493: EQUAL
66494: IFFALSE 66504
// sTime := true ;
66496: LD_ADDR_EXP 130
66500: PUSH
66501: LD_INT 1
66503: ST_TO_ADDR
// if p3 = 36 then
66504: LD_VAR 0 3
66508: PUSH
66509: LD_INT 36
66511: EQUAL
66512: IFFALSE 66522
// sTools := true ;
66514: LD_ADDR_EXP 131
66518: PUSH
66519: LD_INT 1
66521: ST_TO_ADDR
// if p3 = 101 then
66522: LD_VAR 0 3
66526: PUSH
66527: LD_INT 101
66529: EQUAL
66530: IFFALSE 66540
// sSold := true ;
66532: LD_ADDR_EXP 96
66536: PUSH
66537: LD_INT 1
66539: ST_TO_ADDR
// if p3 = 102 then
66540: LD_VAR 0 3
66544: PUSH
66545: LD_INT 102
66547: EQUAL
66548: IFFALSE 66558
// sDiff := true ;
66550: LD_ADDR_EXP 97
66554: PUSH
66555: LD_INT 1
66557: ST_TO_ADDR
// if p3 = 103 then
66558: LD_VAR 0 3
66562: PUSH
66563: LD_INT 103
66565: EQUAL
66566: IFFALSE 66576
// sFog := true ;
66568: LD_ADDR_EXP 100
66572: PUSH
66573: LD_INT 1
66575: ST_TO_ADDR
// if p3 = 104 then
66576: LD_VAR 0 3
66580: PUSH
66581: LD_INT 104
66583: EQUAL
66584: IFFALSE 66594
// sReset := true ;
66586: LD_ADDR_EXP 101
66590: PUSH
66591: LD_INT 1
66593: ST_TO_ADDR
// if p3 = 105 then
66594: LD_VAR 0 3
66598: PUSH
66599: LD_INT 105
66601: EQUAL
66602: IFFALSE 66612
// sSun := true ;
66604: LD_ADDR_EXP 102
66608: PUSH
66609: LD_INT 1
66611: ST_TO_ADDR
// if p3 = 106 then
66612: LD_VAR 0 3
66616: PUSH
66617: LD_INT 106
66619: EQUAL
66620: IFFALSE 66630
// sTiger := true ;
66622: LD_ADDR_EXP 98
66626: PUSH
66627: LD_INT 1
66629: ST_TO_ADDR
// if p3 = 107 then
66630: LD_VAR 0 3
66634: PUSH
66635: LD_INT 107
66637: EQUAL
66638: IFFALSE 66648
// sBomb := true ;
66640: LD_ADDR_EXP 99
66644: PUSH
66645: LD_INT 1
66647: ST_TO_ADDR
// if p3 = 108 then
66648: LD_VAR 0 3
66652: PUSH
66653: LD_INT 108
66655: EQUAL
66656: IFFALSE 66666
// sWound := true ;
66658: LD_ADDR_EXP 107
66662: PUSH
66663: LD_INT 1
66665: ST_TO_ADDR
// if p3 = 109 then
66666: LD_VAR 0 3
66670: PUSH
66671: LD_INT 109
66673: EQUAL
66674: IFFALSE 66684
// sBetray := true ;
66676: LD_ADDR_EXP 111
66680: PUSH
66681: LD_INT 1
66683: ST_TO_ADDR
// if p3 = 110 then
66684: LD_VAR 0 3
66688: PUSH
66689: LD_INT 110
66691: EQUAL
66692: IFFALSE 66702
// sContamin := true ;
66694: LD_ADDR_EXP 112
66698: PUSH
66699: LD_INT 1
66701: ST_TO_ADDR
// if p3 = 111 then
66702: LD_VAR 0 3
66706: PUSH
66707: LD_INT 111
66709: EQUAL
66710: IFFALSE 66720
// sOil := true ;
66712: LD_ADDR_EXP 114
66716: PUSH
66717: LD_INT 1
66719: ST_TO_ADDR
// if p3 = 112 then
66720: LD_VAR 0 3
66724: PUSH
66725: LD_INT 112
66727: EQUAL
66728: IFFALSE 66738
// sStu := true ;
66730: LD_ADDR_EXP 118
66734: PUSH
66735: LD_INT 1
66737: ST_TO_ADDR
// if p3 = 113 then
66738: LD_VAR 0 3
66742: PUSH
66743: LD_INT 113
66745: EQUAL
66746: IFFALSE 66756
// sBazooka := true ;
66748: LD_ADDR_EXP 121
66752: PUSH
66753: LD_INT 1
66755: ST_TO_ADDR
// if p3 = 114 then
66756: LD_VAR 0 3
66760: PUSH
66761: LD_INT 114
66763: EQUAL
66764: IFFALSE 66774
// sMortar := true ;
66766: LD_ADDR_EXP 122
66770: PUSH
66771: LD_INT 1
66773: ST_TO_ADDR
// if p3 = 115 then
66774: LD_VAR 0 3
66778: PUSH
66779: LD_INT 115
66781: EQUAL
66782: IFFALSE 66792
// sRanger := true ;
66784: LD_ADDR_EXP 132
66788: PUSH
66789: LD_INT 1
66791: ST_TO_ADDR
// if p3 = 116 then
66792: LD_VAR 0 3
66796: PUSH
66797: LD_INT 116
66799: EQUAL
66800: IFFALSE 66810
// sComputer := true ;
66802: LD_ADDR_EXP 133
66806: PUSH
66807: LD_INT 1
66809: ST_TO_ADDR
// if p3 = 117 then
66810: LD_VAR 0 3
66814: PUSH
66815: LD_INT 117
66817: EQUAL
66818: IFFALSE 66828
// s30 := true ;
66820: LD_ADDR_EXP 134
66824: PUSH
66825: LD_INT 1
66827: ST_TO_ADDR
// if p3 = 118 then
66828: LD_VAR 0 3
66832: PUSH
66833: LD_INT 118
66835: EQUAL
66836: IFFALSE 66846
// s60 := true ;
66838: LD_ADDR_EXP 135
66842: PUSH
66843: LD_INT 1
66845: ST_TO_ADDR
// end ; if p2 = 101 then
66846: LD_VAR 0 2
66850: PUSH
66851: LD_INT 101
66853: EQUAL
66854: IFFALSE 66982
// begin case p3 of 1 :
66856: LD_VAR 0 3
66860: PUSH
66861: LD_INT 1
66863: DOUBLE
66864: EQUAL
66865: IFTRUE 66869
66867: GO 66876
66869: POP
// hHackUnlimitedResources ; 2 :
66870: CALL 79080 0 0
66874: GO 66982
66876: LD_INT 2
66878: DOUBLE
66879: EQUAL
66880: IFTRUE 66884
66882: GO 66891
66884: POP
// hHackSetLevel10 ; 3 :
66885: CALL 79213 0 0
66889: GO 66982
66891: LD_INT 3
66893: DOUBLE
66894: EQUAL
66895: IFTRUE 66899
66897: GO 66906
66899: POP
// hHackSetLevel10YourUnits ; 4 :
66900: CALL 79298 0 0
66904: GO 66982
66906: LD_INT 4
66908: DOUBLE
66909: EQUAL
66910: IFTRUE 66914
66912: GO 66921
66914: POP
// hHackInvincible ; 5 :
66915: CALL 79746 0 0
66919: GO 66982
66921: LD_INT 5
66923: DOUBLE
66924: EQUAL
66925: IFTRUE 66929
66927: GO 66936
66929: POP
// hHackInvisible ; 6 :
66930: CALL 79857 0 0
66934: GO 66982
66936: LD_INT 6
66938: DOUBLE
66939: EQUAL
66940: IFTRUE 66944
66942: GO 66951
66944: POP
// hHackChangeYourSide ; 7 :
66945: CALL 79914 0 0
66949: GO 66982
66951: LD_INT 7
66953: DOUBLE
66954: EQUAL
66955: IFTRUE 66959
66957: GO 66966
66959: POP
// hHackChangeUnitSide ; 8 :
66960: CALL 79956 0 0
66964: GO 66982
66966: LD_INT 8
66968: DOUBLE
66969: EQUAL
66970: IFTRUE 66974
66972: GO 66981
66974: POP
// hHackFog ; end ;
66975: CALL 80057 0 0
66979: GO 66982
66981: POP
// end ; end ;
66982: LD_VAR 0 7
66986: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
66987: GO 66989
66989: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
66990: LD_STRING initStreamRollete();
66992: PPUSH
66993: CALL_OW 559
// InitStreamMode ;
66997: CALL 67009 0 0
// DefineStreamItems ( false ) ;
67001: LD_INT 0
67003: PPUSH
67004: CALL 67473 0 1
// end ;
67008: END
// function InitStreamMode ; begin
67009: LD_INT 0
67011: PPUSH
// streamModeActive := false ;
67012: LD_ADDR_EXP 79
67016: PUSH
67017: LD_INT 0
67019: ST_TO_ADDR
// normalCounter := 36 ;
67020: LD_ADDR_EXP 80
67024: PUSH
67025: LD_INT 36
67027: ST_TO_ADDR
// hardcoreCounter := 18 ;
67028: LD_ADDR_EXP 81
67032: PUSH
67033: LD_INT 18
67035: ST_TO_ADDR
// sRocket := false ;
67036: LD_ADDR_EXP 84
67040: PUSH
67041: LD_INT 0
67043: ST_TO_ADDR
// sSpeed := false ;
67044: LD_ADDR_EXP 83
67048: PUSH
67049: LD_INT 0
67051: ST_TO_ADDR
// sEngine := false ;
67052: LD_ADDR_EXP 85
67056: PUSH
67057: LD_INT 0
67059: ST_TO_ADDR
// sSpec := false ;
67060: LD_ADDR_EXP 82
67064: PUSH
67065: LD_INT 0
67067: ST_TO_ADDR
// sLevel := false ;
67068: LD_ADDR_EXP 86
67072: PUSH
67073: LD_INT 0
67075: ST_TO_ADDR
// sArmoury := false ;
67076: LD_ADDR_EXP 87
67080: PUSH
67081: LD_INT 0
67083: ST_TO_ADDR
// sRadar := false ;
67084: LD_ADDR_EXP 88
67088: PUSH
67089: LD_INT 0
67091: ST_TO_ADDR
// sBunker := false ;
67092: LD_ADDR_EXP 89
67096: PUSH
67097: LD_INT 0
67099: ST_TO_ADDR
// sHack := false ;
67100: LD_ADDR_EXP 90
67104: PUSH
67105: LD_INT 0
67107: ST_TO_ADDR
// sFire := false ;
67108: LD_ADDR_EXP 91
67112: PUSH
67113: LD_INT 0
67115: ST_TO_ADDR
// sRefresh := false ;
67116: LD_ADDR_EXP 92
67120: PUSH
67121: LD_INT 0
67123: ST_TO_ADDR
// sExp := false ;
67124: LD_ADDR_EXP 93
67128: PUSH
67129: LD_INT 0
67131: ST_TO_ADDR
// sDepot := false ;
67132: LD_ADDR_EXP 94
67136: PUSH
67137: LD_INT 0
67139: ST_TO_ADDR
// sFlag := false ;
67140: LD_ADDR_EXP 95
67144: PUSH
67145: LD_INT 0
67147: ST_TO_ADDR
// sKamikadze := false ;
67148: LD_ADDR_EXP 103
67152: PUSH
67153: LD_INT 0
67155: ST_TO_ADDR
// sTroll := false ;
67156: LD_ADDR_EXP 104
67160: PUSH
67161: LD_INT 0
67163: ST_TO_ADDR
// sSlow := false ;
67164: LD_ADDR_EXP 105
67168: PUSH
67169: LD_INT 0
67171: ST_TO_ADDR
// sLack := false ;
67172: LD_ADDR_EXP 106
67176: PUSH
67177: LD_INT 0
67179: ST_TO_ADDR
// sTank := false ;
67180: LD_ADDR_EXP 108
67184: PUSH
67185: LD_INT 0
67187: ST_TO_ADDR
// sRemote := false ;
67188: LD_ADDR_EXP 109
67192: PUSH
67193: LD_INT 0
67195: ST_TO_ADDR
// sPowell := false ;
67196: LD_ADDR_EXP 110
67200: PUSH
67201: LD_INT 0
67203: ST_TO_ADDR
// sTeleport := false ;
67204: LD_ADDR_EXP 113
67208: PUSH
67209: LD_INT 0
67211: ST_TO_ADDR
// sOilTower := false ;
67212: LD_ADDR_EXP 115
67216: PUSH
67217: LD_INT 0
67219: ST_TO_ADDR
// sShovel := false ;
67220: LD_ADDR_EXP 116
67224: PUSH
67225: LD_INT 0
67227: ST_TO_ADDR
// sSheik := false ;
67228: LD_ADDR_EXP 117
67232: PUSH
67233: LD_INT 0
67235: ST_TO_ADDR
// sEarthquake := false ;
67236: LD_ADDR_EXP 119
67240: PUSH
67241: LD_INT 0
67243: ST_TO_ADDR
// sAI := false ;
67244: LD_ADDR_EXP 120
67248: PUSH
67249: LD_INT 0
67251: ST_TO_ADDR
// sCargo := false ;
67252: LD_ADDR_EXP 123
67256: PUSH
67257: LD_INT 0
67259: ST_TO_ADDR
// sDLaser := false ;
67260: LD_ADDR_EXP 124
67264: PUSH
67265: LD_INT 0
67267: ST_TO_ADDR
// sExchange := false ;
67268: LD_ADDR_EXP 125
67272: PUSH
67273: LD_INT 0
67275: ST_TO_ADDR
// sFac := false ;
67276: LD_ADDR_EXP 126
67280: PUSH
67281: LD_INT 0
67283: ST_TO_ADDR
// sPower := false ;
67284: LD_ADDR_EXP 127
67288: PUSH
67289: LD_INT 0
67291: ST_TO_ADDR
// sRandom := false ;
67292: LD_ADDR_EXP 128
67296: PUSH
67297: LD_INT 0
67299: ST_TO_ADDR
// sShield := false ;
67300: LD_ADDR_EXP 129
67304: PUSH
67305: LD_INT 0
67307: ST_TO_ADDR
// sTime := false ;
67308: LD_ADDR_EXP 130
67312: PUSH
67313: LD_INT 0
67315: ST_TO_ADDR
// sTools := false ;
67316: LD_ADDR_EXP 131
67320: PUSH
67321: LD_INT 0
67323: ST_TO_ADDR
// sSold := false ;
67324: LD_ADDR_EXP 96
67328: PUSH
67329: LD_INT 0
67331: ST_TO_ADDR
// sDiff := false ;
67332: LD_ADDR_EXP 97
67336: PUSH
67337: LD_INT 0
67339: ST_TO_ADDR
// sFog := false ;
67340: LD_ADDR_EXP 100
67344: PUSH
67345: LD_INT 0
67347: ST_TO_ADDR
// sReset := false ;
67348: LD_ADDR_EXP 101
67352: PUSH
67353: LD_INT 0
67355: ST_TO_ADDR
// sSun := false ;
67356: LD_ADDR_EXP 102
67360: PUSH
67361: LD_INT 0
67363: ST_TO_ADDR
// sTiger := false ;
67364: LD_ADDR_EXP 98
67368: PUSH
67369: LD_INT 0
67371: ST_TO_ADDR
// sBomb := false ;
67372: LD_ADDR_EXP 99
67376: PUSH
67377: LD_INT 0
67379: ST_TO_ADDR
// sWound := false ;
67380: LD_ADDR_EXP 107
67384: PUSH
67385: LD_INT 0
67387: ST_TO_ADDR
// sBetray := false ;
67388: LD_ADDR_EXP 111
67392: PUSH
67393: LD_INT 0
67395: ST_TO_ADDR
// sContamin := false ;
67396: LD_ADDR_EXP 112
67400: PUSH
67401: LD_INT 0
67403: ST_TO_ADDR
// sOil := false ;
67404: LD_ADDR_EXP 114
67408: PUSH
67409: LD_INT 0
67411: ST_TO_ADDR
// sStu := false ;
67412: LD_ADDR_EXP 118
67416: PUSH
67417: LD_INT 0
67419: ST_TO_ADDR
// sBazooka := false ;
67420: LD_ADDR_EXP 121
67424: PUSH
67425: LD_INT 0
67427: ST_TO_ADDR
// sMortar := false ;
67428: LD_ADDR_EXP 122
67432: PUSH
67433: LD_INT 0
67435: ST_TO_ADDR
// sRanger := false ;
67436: LD_ADDR_EXP 132
67440: PUSH
67441: LD_INT 0
67443: ST_TO_ADDR
// sComputer := false ;
67444: LD_ADDR_EXP 133
67448: PUSH
67449: LD_INT 0
67451: ST_TO_ADDR
// s30 := false ;
67452: LD_ADDR_EXP 134
67456: PUSH
67457: LD_INT 0
67459: ST_TO_ADDR
// s60 := false ;
67460: LD_ADDR_EXP 135
67464: PUSH
67465: LD_INT 0
67467: ST_TO_ADDR
// end ;
67468: LD_VAR 0 1
67472: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
67473: LD_INT 0
67475: PPUSH
67476: PPUSH
67477: PPUSH
67478: PPUSH
67479: PPUSH
67480: PPUSH
67481: PPUSH
// result := [ ] ;
67482: LD_ADDR_VAR 0 2
67486: PUSH
67487: EMPTY
67488: ST_TO_ADDR
// if campaign_id = 1 then
67489: LD_OWVAR 69
67493: PUSH
67494: LD_INT 1
67496: EQUAL
67497: IFFALSE 70663
// begin case mission_number of 1 :
67499: LD_OWVAR 70
67503: PUSH
67504: LD_INT 1
67506: DOUBLE
67507: EQUAL
67508: IFTRUE 67512
67510: GO 67588
67512: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
67513: LD_ADDR_VAR 0 2
67517: PUSH
67518: LD_INT 2
67520: PUSH
67521: LD_INT 4
67523: PUSH
67524: LD_INT 11
67526: PUSH
67527: LD_INT 12
67529: PUSH
67530: LD_INT 15
67532: PUSH
67533: LD_INT 16
67535: PUSH
67536: LD_INT 22
67538: PUSH
67539: LD_INT 23
67541: PUSH
67542: LD_INT 26
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: PUSH
67556: LD_INT 101
67558: PUSH
67559: LD_INT 102
67561: PUSH
67562: LD_INT 106
67564: PUSH
67565: LD_INT 116
67567: PUSH
67568: LD_INT 117
67570: PUSH
67571: LD_INT 118
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: LIST
67578: LIST
67579: LIST
67580: LIST
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: ST_TO_ADDR
67586: GO 70661
67588: LD_INT 2
67590: DOUBLE
67591: EQUAL
67592: IFTRUE 67596
67594: GO 67680
67596: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
67597: LD_ADDR_VAR 0 2
67601: PUSH
67602: LD_INT 2
67604: PUSH
67605: LD_INT 4
67607: PUSH
67608: LD_INT 11
67610: PUSH
67611: LD_INT 12
67613: PUSH
67614: LD_INT 15
67616: PUSH
67617: LD_INT 16
67619: PUSH
67620: LD_INT 22
67622: PUSH
67623: LD_INT 23
67625: PUSH
67626: LD_INT 26
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 101
67642: PUSH
67643: LD_INT 102
67645: PUSH
67646: LD_INT 105
67648: PUSH
67649: LD_INT 106
67651: PUSH
67652: LD_INT 108
67654: PUSH
67655: LD_INT 116
67657: PUSH
67658: LD_INT 117
67660: PUSH
67661: LD_INT 118
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: ST_TO_ADDR
67678: GO 70661
67680: LD_INT 3
67682: DOUBLE
67683: EQUAL
67684: IFTRUE 67688
67686: GO 67776
67688: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
67689: LD_ADDR_VAR 0 2
67693: PUSH
67694: LD_INT 2
67696: PUSH
67697: LD_INT 4
67699: PUSH
67700: LD_INT 5
67702: PUSH
67703: LD_INT 11
67705: PUSH
67706: LD_INT 12
67708: PUSH
67709: LD_INT 15
67711: PUSH
67712: LD_INT 16
67714: PUSH
67715: LD_INT 22
67717: PUSH
67718: LD_INT 26
67720: PUSH
67721: LD_INT 36
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: PUSH
67736: LD_INT 101
67738: PUSH
67739: LD_INT 102
67741: PUSH
67742: LD_INT 105
67744: PUSH
67745: LD_INT 106
67747: PUSH
67748: LD_INT 108
67750: PUSH
67751: LD_INT 116
67753: PUSH
67754: LD_INT 117
67756: PUSH
67757: LD_INT 118
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: LIST
67764: LIST
67765: LIST
67766: LIST
67767: LIST
67768: LIST
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: ST_TO_ADDR
67774: GO 70661
67776: LD_INT 4
67778: DOUBLE
67779: EQUAL
67780: IFTRUE 67784
67782: GO 67880
67784: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
67785: LD_ADDR_VAR 0 2
67789: PUSH
67790: LD_INT 2
67792: PUSH
67793: LD_INT 4
67795: PUSH
67796: LD_INT 5
67798: PUSH
67799: LD_INT 8
67801: PUSH
67802: LD_INT 11
67804: PUSH
67805: LD_INT 12
67807: PUSH
67808: LD_INT 15
67810: PUSH
67811: LD_INT 16
67813: PUSH
67814: LD_INT 22
67816: PUSH
67817: LD_INT 23
67819: PUSH
67820: LD_INT 26
67822: PUSH
67823: LD_INT 36
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: LIST
67833: LIST
67834: LIST
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 101
67842: PUSH
67843: LD_INT 102
67845: PUSH
67846: LD_INT 105
67848: PUSH
67849: LD_INT 106
67851: PUSH
67852: LD_INT 108
67854: PUSH
67855: LD_INT 116
67857: PUSH
67858: LD_INT 117
67860: PUSH
67861: LD_INT 118
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: ST_TO_ADDR
67878: GO 70661
67880: LD_INT 5
67882: DOUBLE
67883: EQUAL
67884: IFTRUE 67888
67886: GO 68000
67888: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
67889: LD_ADDR_VAR 0 2
67893: PUSH
67894: LD_INT 2
67896: PUSH
67897: LD_INT 4
67899: PUSH
67900: LD_INT 5
67902: PUSH
67903: LD_INT 6
67905: PUSH
67906: LD_INT 8
67908: PUSH
67909: LD_INT 11
67911: PUSH
67912: LD_INT 12
67914: PUSH
67915: LD_INT 15
67917: PUSH
67918: LD_INT 16
67920: PUSH
67921: LD_INT 22
67923: PUSH
67924: LD_INT 23
67926: PUSH
67927: LD_INT 25
67929: PUSH
67930: LD_INT 26
67932: PUSH
67933: LD_INT 36
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: PUSH
67952: LD_INT 101
67954: PUSH
67955: LD_INT 102
67957: PUSH
67958: LD_INT 105
67960: PUSH
67961: LD_INT 106
67963: PUSH
67964: LD_INT 108
67966: PUSH
67967: LD_INT 109
67969: PUSH
67970: LD_INT 112
67972: PUSH
67973: LD_INT 116
67975: PUSH
67976: LD_INT 117
67978: PUSH
67979: LD_INT 118
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: LIST
67992: LIST
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: ST_TO_ADDR
67998: GO 70661
68000: LD_INT 6
68002: DOUBLE
68003: EQUAL
68004: IFTRUE 68008
68006: GO 68140
68008: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
68009: LD_ADDR_VAR 0 2
68013: PUSH
68014: LD_INT 2
68016: PUSH
68017: LD_INT 4
68019: PUSH
68020: LD_INT 5
68022: PUSH
68023: LD_INT 6
68025: PUSH
68026: LD_INT 8
68028: PUSH
68029: LD_INT 11
68031: PUSH
68032: LD_INT 12
68034: PUSH
68035: LD_INT 15
68037: PUSH
68038: LD_INT 16
68040: PUSH
68041: LD_INT 20
68043: PUSH
68044: LD_INT 21
68046: PUSH
68047: LD_INT 22
68049: PUSH
68050: LD_INT 23
68052: PUSH
68053: LD_INT 25
68055: PUSH
68056: LD_INT 26
68058: PUSH
68059: LD_INT 30
68061: PUSH
68062: LD_INT 31
68064: PUSH
68065: LD_INT 32
68067: PUSH
68068: LD_INT 36
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: LIST
68075: LIST
68076: LIST
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: LIST
68082: LIST
68083: LIST
68084: LIST
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 101
68094: PUSH
68095: LD_INT 102
68097: PUSH
68098: LD_INT 105
68100: PUSH
68101: LD_INT 106
68103: PUSH
68104: LD_INT 108
68106: PUSH
68107: LD_INT 109
68109: PUSH
68110: LD_INT 112
68112: PUSH
68113: LD_INT 116
68115: PUSH
68116: LD_INT 117
68118: PUSH
68119: LD_INT 118
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: ST_TO_ADDR
68138: GO 70661
68140: LD_INT 7
68142: DOUBLE
68143: EQUAL
68144: IFTRUE 68148
68146: GO 68260
68148: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
68149: LD_ADDR_VAR 0 2
68153: PUSH
68154: LD_INT 2
68156: PUSH
68157: LD_INT 4
68159: PUSH
68160: LD_INT 5
68162: PUSH
68163: LD_INT 7
68165: PUSH
68166: LD_INT 11
68168: PUSH
68169: LD_INT 12
68171: PUSH
68172: LD_INT 15
68174: PUSH
68175: LD_INT 16
68177: PUSH
68178: LD_INT 20
68180: PUSH
68181: LD_INT 21
68183: PUSH
68184: LD_INT 22
68186: PUSH
68187: LD_INT 23
68189: PUSH
68190: LD_INT 25
68192: PUSH
68193: LD_INT 26
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: LIST
68200: LIST
68201: LIST
68202: LIST
68203: LIST
68204: LIST
68205: LIST
68206: LIST
68207: LIST
68208: LIST
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 101
68214: PUSH
68215: LD_INT 102
68217: PUSH
68218: LD_INT 103
68220: PUSH
68221: LD_INT 105
68223: PUSH
68224: LD_INT 106
68226: PUSH
68227: LD_INT 108
68229: PUSH
68230: LD_INT 112
68232: PUSH
68233: LD_INT 116
68235: PUSH
68236: LD_INT 117
68238: PUSH
68239: LD_INT 118
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: ST_TO_ADDR
68258: GO 70661
68260: LD_INT 8
68262: DOUBLE
68263: EQUAL
68264: IFTRUE 68268
68266: GO 68408
68268: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
68269: LD_ADDR_VAR 0 2
68273: PUSH
68274: LD_INT 2
68276: PUSH
68277: LD_INT 4
68279: PUSH
68280: LD_INT 5
68282: PUSH
68283: LD_INT 6
68285: PUSH
68286: LD_INT 7
68288: PUSH
68289: LD_INT 8
68291: PUSH
68292: LD_INT 11
68294: PUSH
68295: LD_INT 12
68297: PUSH
68298: LD_INT 15
68300: PUSH
68301: LD_INT 16
68303: PUSH
68304: LD_INT 20
68306: PUSH
68307: LD_INT 21
68309: PUSH
68310: LD_INT 22
68312: PUSH
68313: LD_INT 23
68315: PUSH
68316: LD_INT 25
68318: PUSH
68319: LD_INT 26
68321: PUSH
68322: LD_INT 30
68324: PUSH
68325: LD_INT 31
68327: PUSH
68328: LD_INT 32
68330: PUSH
68331: LD_INT 36
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 101
68358: PUSH
68359: LD_INT 102
68361: PUSH
68362: LD_INT 103
68364: PUSH
68365: LD_INT 105
68367: PUSH
68368: LD_INT 106
68370: PUSH
68371: LD_INT 108
68373: PUSH
68374: LD_INT 109
68376: PUSH
68377: LD_INT 112
68379: PUSH
68380: LD_INT 116
68382: PUSH
68383: LD_INT 117
68385: PUSH
68386: LD_INT 118
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: ST_TO_ADDR
68406: GO 70661
68408: LD_INT 9
68410: DOUBLE
68411: EQUAL
68412: IFTRUE 68416
68414: GO 68564
68416: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
68417: LD_ADDR_VAR 0 2
68421: PUSH
68422: LD_INT 2
68424: PUSH
68425: LD_INT 4
68427: PUSH
68428: LD_INT 5
68430: PUSH
68431: LD_INT 6
68433: PUSH
68434: LD_INT 7
68436: PUSH
68437: LD_INT 8
68439: PUSH
68440: LD_INT 11
68442: PUSH
68443: LD_INT 12
68445: PUSH
68446: LD_INT 15
68448: PUSH
68449: LD_INT 16
68451: PUSH
68452: LD_INT 20
68454: PUSH
68455: LD_INT 21
68457: PUSH
68458: LD_INT 22
68460: PUSH
68461: LD_INT 23
68463: PUSH
68464: LD_INT 25
68466: PUSH
68467: LD_INT 26
68469: PUSH
68470: LD_INT 28
68472: PUSH
68473: LD_INT 30
68475: PUSH
68476: LD_INT 31
68478: PUSH
68479: LD_INT 32
68481: PUSH
68482: LD_INT 36
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: LIST
68504: LIST
68505: LIST
68506: LIST
68507: PUSH
68508: LD_INT 101
68510: PUSH
68511: LD_INT 102
68513: PUSH
68514: LD_INT 103
68516: PUSH
68517: LD_INT 105
68519: PUSH
68520: LD_INT 106
68522: PUSH
68523: LD_INT 108
68525: PUSH
68526: LD_INT 109
68528: PUSH
68529: LD_INT 112
68531: PUSH
68532: LD_INT 114
68534: PUSH
68535: LD_INT 116
68537: PUSH
68538: LD_INT 117
68540: PUSH
68541: LD_INT 118
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: ST_TO_ADDR
68562: GO 70661
68564: LD_INT 10
68566: DOUBLE
68567: EQUAL
68568: IFTRUE 68572
68570: GO 68768
68572: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
68573: LD_ADDR_VAR 0 2
68577: PUSH
68578: LD_INT 2
68580: PUSH
68581: LD_INT 4
68583: PUSH
68584: LD_INT 5
68586: PUSH
68587: LD_INT 6
68589: PUSH
68590: LD_INT 7
68592: PUSH
68593: LD_INT 8
68595: PUSH
68596: LD_INT 9
68598: PUSH
68599: LD_INT 10
68601: PUSH
68602: LD_INT 11
68604: PUSH
68605: LD_INT 12
68607: PUSH
68608: LD_INT 13
68610: PUSH
68611: LD_INT 14
68613: PUSH
68614: LD_INT 15
68616: PUSH
68617: LD_INT 16
68619: PUSH
68620: LD_INT 17
68622: PUSH
68623: LD_INT 18
68625: PUSH
68626: LD_INT 19
68628: PUSH
68629: LD_INT 20
68631: PUSH
68632: LD_INT 21
68634: PUSH
68635: LD_INT 22
68637: PUSH
68638: LD_INT 23
68640: PUSH
68641: LD_INT 24
68643: PUSH
68644: LD_INT 25
68646: PUSH
68647: LD_INT 26
68649: PUSH
68650: LD_INT 28
68652: PUSH
68653: LD_INT 30
68655: PUSH
68656: LD_INT 31
68658: PUSH
68659: LD_INT 32
68661: PUSH
68662: LD_INT 36
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: PUSH
68696: LD_INT 101
68698: PUSH
68699: LD_INT 102
68701: PUSH
68702: LD_INT 103
68704: PUSH
68705: LD_INT 104
68707: PUSH
68708: LD_INT 105
68710: PUSH
68711: LD_INT 106
68713: PUSH
68714: LD_INT 107
68716: PUSH
68717: LD_INT 108
68719: PUSH
68720: LD_INT 109
68722: PUSH
68723: LD_INT 110
68725: PUSH
68726: LD_INT 111
68728: PUSH
68729: LD_INT 112
68731: PUSH
68732: LD_INT 114
68734: PUSH
68735: LD_INT 116
68737: PUSH
68738: LD_INT 117
68740: PUSH
68741: LD_INT 118
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: LIST
68759: LIST
68760: LIST
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: ST_TO_ADDR
68766: GO 70661
68768: LD_INT 11
68770: DOUBLE
68771: EQUAL
68772: IFTRUE 68776
68774: GO 68980
68776: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
68777: LD_ADDR_VAR 0 2
68781: PUSH
68782: LD_INT 2
68784: PUSH
68785: LD_INT 3
68787: PUSH
68788: LD_INT 4
68790: PUSH
68791: LD_INT 5
68793: PUSH
68794: LD_INT 6
68796: PUSH
68797: LD_INT 7
68799: PUSH
68800: LD_INT 8
68802: PUSH
68803: LD_INT 9
68805: PUSH
68806: LD_INT 10
68808: PUSH
68809: LD_INT 11
68811: PUSH
68812: LD_INT 12
68814: PUSH
68815: LD_INT 13
68817: PUSH
68818: LD_INT 14
68820: PUSH
68821: LD_INT 15
68823: PUSH
68824: LD_INT 16
68826: PUSH
68827: LD_INT 17
68829: PUSH
68830: LD_INT 18
68832: PUSH
68833: LD_INT 19
68835: PUSH
68836: LD_INT 20
68838: PUSH
68839: LD_INT 21
68841: PUSH
68842: LD_INT 22
68844: PUSH
68845: LD_INT 23
68847: PUSH
68848: LD_INT 24
68850: PUSH
68851: LD_INT 25
68853: PUSH
68854: LD_INT 26
68856: PUSH
68857: LD_INT 28
68859: PUSH
68860: LD_INT 30
68862: PUSH
68863: LD_INT 31
68865: PUSH
68866: LD_INT 32
68868: PUSH
68869: LD_INT 34
68871: PUSH
68872: LD_INT 36
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: LIST
68879: LIST
68880: LIST
68881: LIST
68882: LIST
68883: LIST
68884: LIST
68885: LIST
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: LIST
68897: LIST
68898: LIST
68899: LIST
68900: LIST
68901: LIST
68902: LIST
68903: LIST
68904: LIST
68905: LIST
68906: LIST
68907: PUSH
68908: LD_INT 101
68910: PUSH
68911: LD_INT 102
68913: PUSH
68914: LD_INT 103
68916: PUSH
68917: LD_INT 104
68919: PUSH
68920: LD_INT 105
68922: PUSH
68923: LD_INT 106
68925: PUSH
68926: LD_INT 107
68928: PUSH
68929: LD_INT 108
68931: PUSH
68932: LD_INT 109
68934: PUSH
68935: LD_INT 110
68937: PUSH
68938: LD_INT 111
68940: PUSH
68941: LD_INT 112
68943: PUSH
68944: LD_INT 114
68946: PUSH
68947: LD_INT 116
68949: PUSH
68950: LD_INT 117
68952: PUSH
68953: LD_INT 118
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: ST_TO_ADDR
68978: GO 70661
68980: LD_INT 12
68982: DOUBLE
68983: EQUAL
68984: IFTRUE 68988
68986: GO 69208
68988: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
68989: LD_ADDR_VAR 0 2
68993: PUSH
68994: LD_INT 1
68996: PUSH
68997: LD_INT 2
68999: PUSH
69000: LD_INT 3
69002: PUSH
69003: LD_INT 4
69005: PUSH
69006: LD_INT 5
69008: PUSH
69009: LD_INT 6
69011: PUSH
69012: LD_INT 7
69014: PUSH
69015: LD_INT 8
69017: PUSH
69018: LD_INT 9
69020: PUSH
69021: LD_INT 10
69023: PUSH
69024: LD_INT 11
69026: PUSH
69027: LD_INT 12
69029: PUSH
69030: LD_INT 13
69032: PUSH
69033: LD_INT 14
69035: PUSH
69036: LD_INT 15
69038: PUSH
69039: LD_INT 16
69041: PUSH
69042: LD_INT 17
69044: PUSH
69045: LD_INT 18
69047: PUSH
69048: LD_INT 19
69050: PUSH
69051: LD_INT 20
69053: PUSH
69054: LD_INT 21
69056: PUSH
69057: LD_INT 22
69059: PUSH
69060: LD_INT 23
69062: PUSH
69063: LD_INT 24
69065: PUSH
69066: LD_INT 25
69068: PUSH
69069: LD_INT 26
69071: PUSH
69072: LD_INT 27
69074: PUSH
69075: LD_INT 28
69077: PUSH
69078: LD_INT 30
69080: PUSH
69081: LD_INT 31
69083: PUSH
69084: LD_INT 32
69086: PUSH
69087: LD_INT 33
69089: PUSH
69090: LD_INT 34
69092: PUSH
69093: LD_INT 36
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: LIST
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: LIST
69130: LIST
69131: PUSH
69132: LD_INT 101
69134: PUSH
69135: LD_INT 102
69137: PUSH
69138: LD_INT 103
69140: PUSH
69141: LD_INT 104
69143: PUSH
69144: LD_INT 105
69146: PUSH
69147: LD_INT 106
69149: PUSH
69150: LD_INT 107
69152: PUSH
69153: LD_INT 108
69155: PUSH
69156: LD_INT 109
69158: PUSH
69159: LD_INT 110
69161: PUSH
69162: LD_INT 111
69164: PUSH
69165: LD_INT 112
69167: PUSH
69168: LD_INT 113
69170: PUSH
69171: LD_INT 114
69173: PUSH
69174: LD_INT 116
69176: PUSH
69177: LD_INT 117
69179: PUSH
69180: LD_INT 118
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: LIST
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: LIST
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: ST_TO_ADDR
69206: GO 70661
69208: LD_INT 13
69210: DOUBLE
69211: EQUAL
69212: IFTRUE 69216
69214: GO 69424
69216: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
69217: LD_ADDR_VAR 0 2
69221: PUSH
69222: LD_INT 1
69224: PUSH
69225: LD_INT 2
69227: PUSH
69228: LD_INT 3
69230: PUSH
69231: LD_INT 4
69233: PUSH
69234: LD_INT 5
69236: PUSH
69237: LD_INT 8
69239: PUSH
69240: LD_INT 9
69242: PUSH
69243: LD_INT 10
69245: PUSH
69246: LD_INT 11
69248: PUSH
69249: LD_INT 12
69251: PUSH
69252: LD_INT 14
69254: PUSH
69255: LD_INT 15
69257: PUSH
69258: LD_INT 16
69260: PUSH
69261: LD_INT 17
69263: PUSH
69264: LD_INT 18
69266: PUSH
69267: LD_INT 19
69269: PUSH
69270: LD_INT 20
69272: PUSH
69273: LD_INT 21
69275: PUSH
69276: LD_INT 22
69278: PUSH
69279: LD_INT 23
69281: PUSH
69282: LD_INT 24
69284: PUSH
69285: LD_INT 25
69287: PUSH
69288: LD_INT 26
69290: PUSH
69291: LD_INT 27
69293: PUSH
69294: LD_INT 28
69296: PUSH
69297: LD_INT 30
69299: PUSH
69300: LD_INT 31
69302: PUSH
69303: LD_INT 32
69305: PUSH
69306: LD_INT 33
69308: PUSH
69309: LD_INT 34
69311: PUSH
69312: LD_INT 36
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: LIST
69321: LIST
69322: LIST
69323: LIST
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: LIST
69341: LIST
69342: LIST
69343: LIST
69344: LIST
69345: LIST
69346: LIST
69347: PUSH
69348: LD_INT 101
69350: PUSH
69351: LD_INT 102
69353: PUSH
69354: LD_INT 103
69356: PUSH
69357: LD_INT 104
69359: PUSH
69360: LD_INT 105
69362: PUSH
69363: LD_INT 106
69365: PUSH
69366: LD_INT 107
69368: PUSH
69369: LD_INT 108
69371: PUSH
69372: LD_INT 109
69374: PUSH
69375: LD_INT 110
69377: PUSH
69378: LD_INT 111
69380: PUSH
69381: LD_INT 112
69383: PUSH
69384: LD_INT 113
69386: PUSH
69387: LD_INT 114
69389: PUSH
69390: LD_INT 116
69392: PUSH
69393: LD_INT 117
69395: PUSH
69396: LD_INT 118
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: LIST
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: LIST
69413: LIST
69414: LIST
69415: LIST
69416: LIST
69417: PUSH
69418: EMPTY
69419: LIST
69420: LIST
69421: ST_TO_ADDR
69422: GO 70661
69424: LD_INT 14
69426: DOUBLE
69427: EQUAL
69428: IFTRUE 69432
69430: GO 69656
69432: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
69433: LD_ADDR_VAR 0 2
69437: PUSH
69438: LD_INT 1
69440: PUSH
69441: LD_INT 2
69443: PUSH
69444: LD_INT 3
69446: PUSH
69447: LD_INT 4
69449: PUSH
69450: LD_INT 5
69452: PUSH
69453: LD_INT 6
69455: PUSH
69456: LD_INT 7
69458: PUSH
69459: LD_INT 8
69461: PUSH
69462: LD_INT 9
69464: PUSH
69465: LD_INT 10
69467: PUSH
69468: LD_INT 11
69470: PUSH
69471: LD_INT 12
69473: PUSH
69474: LD_INT 13
69476: PUSH
69477: LD_INT 14
69479: PUSH
69480: LD_INT 15
69482: PUSH
69483: LD_INT 16
69485: PUSH
69486: LD_INT 17
69488: PUSH
69489: LD_INT 18
69491: PUSH
69492: LD_INT 19
69494: PUSH
69495: LD_INT 20
69497: PUSH
69498: LD_INT 21
69500: PUSH
69501: LD_INT 22
69503: PUSH
69504: LD_INT 23
69506: PUSH
69507: LD_INT 24
69509: PUSH
69510: LD_INT 25
69512: PUSH
69513: LD_INT 26
69515: PUSH
69516: LD_INT 27
69518: PUSH
69519: LD_INT 28
69521: PUSH
69522: LD_INT 29
69524: PUSH
69525: LD_INT 30
69527: PUSH
69528: LD_INT 31
69530: PUSH
69531: LD_INT 32
69533: PUSH
69534: LD_INT 33
69536: PUSH
69537: LD_INT 34
69539: PUSH
69540: LD_INT 36
69542: PUSH
69543: EMPTY
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 101
69582: PUSH
69583: LD_INT 102
69585: PUSH
69586: LD_INT 103
69588: PUSH
69589: LD_INT 104
69591: PUSH
69592: LD_INT 105
69594: PUSH
69595: LD_INT 106
69597: PUSH
69598: LD_INT 107
69600: PUSH
69601: LD_INT 108
69603: PUSH
69604: LD_INT 109
69606: PUSH
69607: LD_INT 110
69609: PUSH
69610: LD_INT 111
69612: PUSH
69613: LD_INT 112
69615: PUSH
69616: LD_INT 113
69618: PUSH
69619: LD_INT 114
69621: PUSH
69622: LD_INT 116
69624: PUSH
69625: LD_INT 117
69627: PUSH
69628: LD_INT 118
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: LIST
69641: LIST
69642: LIST
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: LIST
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: ST_TO_ADDR
69654: GO 70661
69656: LD_INT 15
69658: DOUBLE
69659: EQUAL
69660: IFTRUE 69664
69662: GO 69888
69664: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
69665: LD_ADDR_VAR 0 2
69669: PUSH
69670: LD_INT 1
69672: PUSH
69673: LD_INT 2
69675: PUSH
69676: LD_INT 3
69678: PUSH
69679: LD_INT 4
69681: PUSH
69682: LD_INT 5
69684: PUSH
69685: LD_INT 6
69687: PUSH
69688: LD_INT 7
69690: PUSH
69691: LD_INT 8
69693: PUSH
69694: LD_INT 9
69696: PUSH
69697: LD_INT 10
69699: PUSH
69700: LD_INT 11
69702: PUSH
69703: LD_INT 12
69705: PUSH
69706: LD_INT 13
69708: PUSH
69709: LD_INT 14
69711: PUSH
69712: LD_INT 15
69714: PUSH
69715: LD_INT 16
69717: PUSH
69718: LD_INT 17
69720: PUSH
69721: LD_INT 18
69723: PUSH
69724: LD_INT 19
69726: PUSH
69727: LD_INT 20
69729: PUSH
69730: LD_INT 21
69732: PUSH
69733: LD_INT 22
69735: PUSH
69736: LD_INT 23
69738: PUSH
69739: LD_INT 24
69741: PUSH
69742: LD_INT 25
69744: PUSH
69745: LD_INT 26
69747: PUSH
69748: LD_INT 27
69750: PUSH
69751: LD_INT 28
69753: PUSH
69754: LD_INT 29
69756: PUSH
69757: LD_INT 30
69759: PUSH
69760: LD_INT 31
69762: PUSH
69763: LD_INT 32
69765: PUSH
69766: LD_INT 33
69768: PUSH
69769: LD_INT 34
69771: PUSH
69772: LD_INT 36
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: LIST
69809: LIST
69810: LIST
69811: PUSH
69812: LD_INT 101
69814: PUSH
69815: LD_INT 102
69817: PUSH
69818: LD_INT 103
69820: PUSH
69821: LD_INT 104
69823: PUSH
69824: LD_INT 105
69826: PUSH
69827: LD_INT 106
69829: PUSH
69830: LD_INT 107
69832: PUSH
69833: LD_INT 108
69835: PUSH
69836: LD_INT 109
69838: PUSH
69839: LD_INT 110
69841: PUSH
69842: LD_INT 111
69844: PUSH
69845: LD_INT 112
69847: PUSH
69848: LD_INT 113
69850: PUSH
69851: LD_INT 114
69853: PUSH
69854: LD_INT 116
69856: PUSH
69857: LD_INT 117
69859: PUSH
69860: LD_INT 118
69862: PUSH
69863: EMPTY
69864: LIST
69865: LIST
69866: LIST
69867: LIST
69868: LIST
69869: LIST
69870: LIST
69871: LIST
69872: LIST
69873: LIST
69874: LIST
69875: LIST
69876: LIST
69877: LIST
69878: LIST
69879: LIST
69880: LIST
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: ST_TO_ADDR
69886: GO 70661
69888: LD_INT 16
69890: DOUBLE
69891: EQUAL
69892: IFTRUE 69896
69894: GO 70032
69896: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
69897: LD_ADDR_VAR 0 2
69901: PUSH
69902: LD_INT 2
69904: PUSH
69905: LD_INT 4
69907: PUSH
69908: LD_INT 5
69910: PUSH
69911: LD_INT 7
69913: PUSH
69914: LD_INT 11
69916: PUSH
69917: LD_INT 12
69919: PUSH
69920: LD_INT 15
69922: PUSH
69923: LD_INT 16
69925: PUSH
69926: LD_INT 20
69928: PUSH
69929: LD_INT 21
69931: PUSH
69932: LD_INT 22
69934: PUSH
69935: LD_INT 23
69937: PUSH
69938: LD_INT 25
69940: PUSH
69941: LD_INT 26
69943: PUSH
69944: LD_INT 30
69946: PUSH
69947: LD_INT 31
69949: PUSH
69950: LD_INT 32
69952: PUSH
69953: LD_INT 33
69955: PUSH
69956: LD_INT 34
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: LIST
69963: LIST
69964: LIST
69965: LIST
69966: LIST
69967: LIST
69968: LIST
69969: LIST
69970: LIST
69971: LIST
69972: LIST
69973: LIST
69974: LIST
69975: LIST
69976: LIST
69977: LIST
69978: LIST
69979: PUSH
69980: LD_INT 101
69982: PUSH
69983: LD_INT 102
69985: PUSH
69986: LD_INT 103
69988: PUSH
69989: LD_INT 106
69991: PUSH
69992: LD_INT 108
69994: PUSH
69995: LD_INT 112
69997: PUSH
69998: LD_INT 113
70000: PUSH
70001: LD_INT 114
70003: PUSH
70004: LD_INT 116
70006: PUSH
70007: LD_INT 117
70009: PUSH
70010: LD_INT 118
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: LIST
70017: LIST
70018: LIST
70019: LIST
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: LIST
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: ST_TO_ADDR
70030: GO 70661
70032: LD_INT 17
70034: DOUBLE
70035: EQUAL
70036: IFTRUE 70040
70038: GO 70264
70040: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
70041: LD_ADDR_VAR 0 2
70045: PUSH
70046: LD_INT 1
70048: PUSH
70049: LD_INT 2
70051: PUSH
70052: LD_INT 3
70054: PUSH
70055: LD_INT 4
70057: PUSH
70058: LD_INT 5
70060: PUSH
70061: LD_INT 6
70063: PUSH
70064: LD_INT 7
70066: PUSH
70067: LD_INT 8
70069: PUSH
70070: LD_INT 9
70072: PUSH
70073: LD_INT 10
70075: PUSH
70076: LD_INT 11
70078: PUSH
70079: LD_INT 12
70081: PUSH
70082: LD_INT 13
70084: PUSH
70085: LD_INT 14
70087: PUSH
70088: LD_INT 15
70090: PUSH
70091: LD_INT 16
70093: PUSH
70094: LD_INT 17
70096: PUSH
70097: LD_INT 18
70099: PUSH
70100: LD_INT 19
70102: PUSH
70103: LD_INT 20
70105: PUSH
70106: LD_INT 21
70108: PUSH
70109: LD_INT 22
70111: PUSH
70112: LD_INT 23
70114: PUSH
70115: LD_INT 24
70117: PUSH
70118: LD_INT 25
70120: PUSH
70121: LD_INT 26
70123: PUSH
70124: LD_INT 27
70126: PUSH
70127: LD_INT 28
70129: PUSH
70130: LD_INT 29
70132: PUSH
70133: LD_INT 30
70135: PUSH
70136: LD_INT 31
70138: PUSH
70139: LD_INT 32
70141: PUSH
70142: LD_INT 33
70144: PUSH
70145: LD_INT 34
70147: PUSH
70148: LD_INT 36
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: LIST
70155: LIST
70156: LIST
70157: LIST
70158: LIST
70159: LIST
70160: LIST
70161: LIST
70162: LIST
70163: LIST
70164: LIST
70165: LIST
70166: LIST
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: LIST
70176: LIST
70177: LIST
70178: LIST
70179: LIST
70180: LIST
70181: LIST
70182: LIST
70183: LIST
70184: LIST
70185: LIST
70186: LIST
70187: PUSH
70188: LD_INT 101
70190: PUSH
70191: LD_INT 102
70193: PUSH
70194: LD_INT 103
70196: PUSH
70197: LD_INT 104
70199: PUSH
70200: LD_INT 105
70202: PUSH
70203: LD_INT 106
70205: PUSH
70206: LD_INT 107
70208: PUSH
70209: LD_INT 108
70211: PUSH
70212: LD_INT 109
70214: PUSH
70215: LD_INT 110
70217: PUSH
70218: LD_INT 111
70220: PUSH
70221: LD_INT 112
70223: PUSH
70224: LD_INT 113
70226: PUSH
70227: LD_INT 114
70229: PUSH
70230: LD_INT 116
70232: PUSH
70233: LD_INT 117
70235: PUSH
70236: LD_INT 118
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: LIST
70243: LIST
70244: LIST
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: LIST
70253: LIST
70254: LIST
70255: LIST
70256: LIST
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: ST_TO_ADDR
70262: GO 70661
70264: LD_INT 18
70266: DOUBLE
70267: EQUAL
70268: IFTRUE 70272
70270: GO 70420
70272: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
70273: LD_ADDR_VAR 0 2
70277: PUSH
70278: LD_INT 2
70280: PUSH
70281: LD_INT 4
70283: PUSH
70284: LD_INT 5
70286: PUSH
70287: LD_INT 7
70289: PUSH
70290: LD_INT 11
70292: PUSH
70293: LD_INT 12
70295: PUSH
70296: LD_INT 15
70298: PUSH
70299: LD_INT 16
70301: PUSH
70302: LD_INT 20
70304: PUSH
70305: LD_INT 21
70307: PUSH
70308: LD_INT 22
70310: PUSH
70311: LD_INT 23
70313: PUSH
70314: LD_INT 25
70316: PUSH
70317: LD_INT 26
70319: PUSH
70320: LD_INT 30
70322: PUSH
70323: LD_INT 31
70325: PUSH
70326: LD_INT 32
70328: PUSH
70329: LD_INT 33
70331: PUSH
70332: LD_INT 34
70334: PUSH
70335: LD_INT 35
70337: PUSH
70338: LD_INT 36
70340: PUSH
70341: EMPTY
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: LIST
70353: LIST
70354: LIST
70355: LIST
70356: LIST
70357: LIST
70358: LIST
70359: LIST
70360: LIST
70361: LIST
70362: LIST
70363: PUSH
70364: LD_INT 101
70366: PUSH
70367: LD_INT 102
70369: PUSH
70370: LD_INT 103
70372: PUSH
70373: LD_INT 106
70375: PUSH
70376: LD_INT 108
70378: PUSH
70379: LD_INT 112
70381: PUSH
70382: LD_INT 113
70384: PUSH
70385: LD_INT 114
70387: PUSH
70388: LD_INT 115
70390: PUSH
70391: LD_INT 116
70393: PUSH
70394: LD_INT 117
70396: PUSH
70397: LD_INT 118
70399: PUSH
70400: EMPTY
70401: LIST
70402: LIST
70403: LIST
70404: LIST
70405: LIST
70406: LIST
70407: LIST
70408: LIST
70409: LIST
70410: LIST
70411: LIST
70412: LIST
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: ST_TO_ADDR
70418: GO 70661
70420: LD_INT 19
70422: DOUBLE
70423: EQUAL
70424: IFTRUE 70428
70426: GO 70660
70428: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
70429: LD_ADDR_VAR 0 2
70433: PUSH
70434: LD_INT 1
70436: PUSH
70437: LD_INT 2
70439: PUSH
70440: LD_INT 3
70442: PUSH
70443: LD_INT 4
70445: PUSH
70446: LD_INT 5
70448: PUSH
70449: LD_INT 6
70451: PUSH
70452: LD_INT 7
70454: PUSH
70455: LD_INT 8
70457: PUSH
70458: LD_INT 9
70460: PUSH
70461: LD_INT 10
70463: PUSH
70464: LD_INT 11
70466: PUSH
70467: LD_INT 12
70469: PUSH
70470: LD_INT 13
70472: PUSH
70473: LD_INT 14
70475: PUSH
70476: LD_INT 15
70478: PUSH
70479: LD_INT 16
70481: PUSH
70482: LD_INT 17
70484: PUSH
70485: LD_INT 18
70487: PUSH
70488: LD_INT 19
70490: PUSH
70491: LD_INT 20
70493: PUSH
70494: LD_INT 21
70496: PUSH
70497: LD_INT 22
70499: PUSH
70500: LD_INT 23
70502: PUSH
70503: LD_INT 24
70505: PUSH
70506: LD_INT 25
70508: PUSH
70509: LD_INT 26
70511: PUSH
70512: LD_INT 27
70514: PUSH
70515: LD_INT 28
70517: PUSH
70518: LD_INT 29
70520: PUSH
70521: LD_INT 30
70523: PUSH
70524: LD_INT 31
70526: PUSH
70527: LD_INT 32
70529: PUSH
70530: LD_INT 33
70532: PUSH
70533: LD_INT 34
70535: PUSH
70536: LD_INT 35
70538: PUSH
70539: LD_INT 36
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: LIST
70546: LIST
70547: LIST
70548: LIST
70549: LIST
70550: LIST
70551: LIST
70552: LIST
70553: LIST
70554: LIST
70555: LIST
70556: LIST
70557: LIST
70558: LIST
70559: LIST
70560: LIST
70561: LIST
70562: LIST
70563: LIST
70564: LIST
70565: LIST
70566: LIST
70567: LIST
70568: LIST
70569: LIST
70570: LIST
70571: LIST
70572: LIST
70573: LIST
70574: LIST
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: PUSH
70580: LD_INT 101
70582: PUSH
70583: LD_INT 102
70585: PUSH
70586: LD_INT 103
70588: PUSH
70589: LD_INT 104
70591: PUSH
70592: LD_INT 105
70594: PUSH
70595: LD_INT 106
70597: PUSH
70598: LD_INT 107
70600: PUSH
70601: LD_INT 108
70603: PUSH
70604: LD_INT 109
70606: PUSH
70607: LD_INT 110
70609: PUSH
70610: LD_INT 111
70612: PUSH
70613: LD_INT 112
70615: PUSH
70616: LD_INT 113
70618: PUSH
70619: LD_INT 114
70621: PUSH
70622: LD_INT 115
70624: PUSH
70625: LD_INT 116
70627: PUSH
70628: LD_INT 117
70630: PUSH
70631: LD_INT 118
70633: PUSH
70634: EMPTY
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: LIST
70652: LIST
70653: PUSH
70654: EMPTY
70655: LIST
70656: LIST
70657: ST_TO_ADDR
70658: GO 70661
70660: POP
// end else
70661: GO 70892
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
70663: LD_ADDR_VAR 0 2
70667: PUSH
70668: LD_INT 1
70670: PUSH
70671: LD_INT 2
70673: PUSH
70674: LD_INT 3
70676: PUSH
70677: LD_INT 4
70679: PUSH
70680: LD_INT 5
70682: PUSH
70683: LD_INT 6
70685: PUSH
70686: LD_INT 7
70688: PUSH
70689: LD_INT 8
70691: PUSH
70692: LD_INT 9
70694: PUSH
70695: LD_INT 10
70697: PUSH
70698: LD_INT 11
70700: PUSH
70701: LD_INT 12
70703: PUSH
70704: LD_INT 13
70706: PUSH
70707: LD_INT 14
70709: PUSH
70710: LD_INT 15
70712: PUSH
70713: LD_INT 16
70715: PUSH
70716: LD_INT 17
70718: PUSH
70719: LD_INT 18
70721: PUSH
70722: LD_INT 19
70724: PUSH
70725: LD_INT 20
70727: PUSH
70728: LD_INT 21
70730: PUSH
70731: LD_INT 22
70733: PUSH
70734: LD_INT 23
70736: PUSH
70737: LD_INT 24
70739: PUSH
70740: LD_INT 25
70742: PUSH
70743: LD_INT 26
70745: PUSH
70746: LD_INT 27
70748: PUSH
70749: LD_INT 28
70751: PUSH
70752: LD_INT 29
70754: PUSH
70755: LD_INT 30
70757: PUSH
70758: LD_INT 31
70760: PUSH
70761: LD_INT 32
70763: PUSH
70764: LD_INT 33
70766: PUSH
70767: LD_INT 34
70769: PUSH
70770: LD_INT 35
70772: PUSH
70773: LD_INT 36
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: LIST
70780: LIST
70781: LIST
70782: LIST
70783: LIST
70784: LIST
70785: LIST
70786: LIST
70787: LIST
70788: LIST
70789: LIST
70790: LIST
70791: LIST
70792: LIST
70793: LIST
70794: LIST
70795: LIST
70796: LIST
70797: LIST
70798: LIST
70799: LIST
70800: LIST
70801: LIST
70802: LIST
70803: LIST
70804: LIST
70805: LIST
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: PUSH
70814: LD_INT 101
70816: PUSH
70817: LD_INT 102
70819: PUSH
70820: LD_INT 103
70822: PUSH
70823: LD_INT 104
70825: PUSH
70826: LD_INT 105
70828: PUSH
70829: LD_INT 106
70831: PUSH
70832: LD_INT 107
70834: PUSH
70835: LD_INT 108
70837: PUSH
70838: LD_INT 109
70840: PUSH
70841: LD_INT 110
70843: PUSH
70844: LD_INT 111
70846: PUSH
70847: LD_INT 112
70849: PUSH
70850: LD_INT 113
70852: PUSH
70853: LD_INT 114
70855: PUSH
70856: LD_INT 115
70858: PUSH
70859: LD_INT 116
70861: PUSH
70862: LD_INT 117
70864: PUSH
70865: LD_INT 118
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: LIST
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: LIST
70882: LIST
70883: LIST
70884: LIST
70885: LIST
70886: LIST
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: ST_TO_ADDR
// if result then
70892: LD_VAR 0 2
70896: IFFALSE 71682
// begin normal :=  ;
70898: LD_ADDR_VAR 0 5
70902: PUSH
70903: LD_STRING 
70905: ST_TO_ADDR
// hardcore :=  ;
70906: LD_ADDR_VAR 0 6
70910: PUSH
70911: LD_STRING 
70913: ST_TO_ADDR
// active :=  ;
70914: LD_ADDR_VAR 0 7
70918: PUSH
70919: LD_STRING 
70921: ST_TO_ADDR
// for i = 1 to normalCounter do
70922: LD_ADDR_VAR 0 8
70926: PUSH
70927: DOUBLE
70928: LD_INT 1
70930: DEC
70931: ST_TO_ADDR
70932: LD_EXP 80
70936: PUSH
70937: FOR_TO
70938: IFFALSE 71039
// begin tmp := 0 ;
70940: LD_ADDR_VAR 0 3
70944: PUSH
70945: LD_STRING 0
70947: ST_TO_ADDR
// if result [ 1 ] then
70948: LD_VAR 0 2
70952: PUSH
70953: LD_INT 1
70955: ARRAY
70956: IFFALSE 71021
// if result [ 1 ] [ 1 ] = i then
70958: LD_VAR 0 2
70962: PUSH
70963: LD_INT 1
70965: ARRAY
70966: PUSH
70967: LD_INT 1
70969: ARRAY
70970: PUSH
70971: LD_VAR 0 8
70975: EQUAL
70976: IFFALSE 71021
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
70978: LD_ADDR_VAR 0 2
70982: PUSH
70983: LD_VAR 0 2
70987: PPUSH
70988: LD_INT 1
70990: PPUSH
70991: LD_VAR 0 2
70995: PUSH
70996: LD_INT 1
70998: ARRAY
70999: PPUSH
71000: LD_INT 1
71002: PPUSH
71003: CALL_OW 3
71007: PPUSH
71008: CALL_OW 1
71012: ST_TO_ADDR
// tmp := 1 ;
71013: LD_ADDR_VAR 0 3
71017: PUSH
71018: LD_STRING 1
71020: ST_TO_ADDR
// end ; normal := normal & tmp ;
71021: LD_ADDR_VAR 0 5
71025: PUSH
71026: LD_VAR 0 5
71030: PUSH
71031: LD_VAR 0 3
71035: STR
71036: ST_TO_ADDR
// end ;
71037: GO 70937
71039: POP
71040: POP
// for i = 1 to hardcoreCounter do
71041: LD_ADDR_VAR 0 8
71045: PUSH
71046: DOUBLE
71047: LD_INT 1
71049: DEC
71050: ST_TO_ADDR
71051: LD_EXP 81
71055: PUSH
71056: FOR_TO
71057: IFFALSE 71162
// begin tmp := 0 ;
71059: LD_ADDR_VAR 0 3
71063: PUSH
71064: LD_STRING 0
71066: ST_TO_ADDR
// if result [ 2 ] then
71067: LD_VAR 0 2
71071: PUSH
71072: LD_INT 2
71074: ARRAY
71075: IFFALSE 71144
// if result [ 2 ] [ 1 ] = 100 + i then
71077: LD_VAR 0 2
71081: PUSH
71082: LD_INT 2
71084: ARRAY
71085: PUSH
71086: LD_INT 1
71088: ARRAY
71089: PUSH
71090: LD_INT 100
71092: PUSH
71093: LD_VAR 0 8
71097: PLUS
71098: EQUAL
71099: IFFALSE 71144
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
71101: LD_ADDR_VAR 0 2
71105: PUSH
71106: LD_VAR 0 2
71110: PPUSH
71111: LD_INT 2
71113: PPUSH
71114: LD_VAR 0 2
71118: PUSH
71119: LD_INT 2
71121: ARRAY
71122: PPUSH
71123: LD_INT 1
71125: PPUSH
71126: CALL_OW 3
71130: PPUSH
71131: CALL_OW 1
71135: ST_TO_ADDR
// tmp := 1 ;
71136: LD_ADDR_VAR 0 3
71140: PUSH
71141: LD_STRING 1
71143: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
71144: LD_ADDR_VAR 0 6
71148: PUSH
71149: LD_VAR 0 6
71153: PUSH
71154: LD_VAR 0 3
71158: STR
71159: ST_TO_ADDR
// end ;
71160: GO 71056
71162: POP
71163: POP
// if isGameLoad then
71164: LD_VAR 0 1
71168: IFFALSE 71643
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
71170: LD_ADDR_VAR 0 4
71174: PUSH
71175: LD_EXP 84
71179: PUSH
71180: LD_EXP 83
71184: PUSH
71185: LD_EXP 85
71189: PUSH
71190: LD_EXP 82
71194: PUSH
71195: LD_EXP 86
71199: PUSH
71200: LD_EXP 87
71204: PUSH
71205: LD_EXP 88
71209: PUSH
71210: LD_EXP 89
71214: PUSH
71215: LD_EXP 90
71219: PUSH
71220: LD_EXP 91
71224: PUSH
71225: LD_EXP 92
71229: PUSH
71230: LD_EXP 93
71234: PUSH
71235: LD_EXP 94
71239: PUSH
71240: LD_EXP 95
71244: PUSH
71245: LD_EXP 103
71249: PUSH
71250: LD_EXP 104
71254: PUSH
71255: LD_EXP 105
71259: PUSH
71260: LD_EXP 106
71264: PUSH
71265: LD_EXP 108
71269: PUSH
71270: LD_EXP 109
71274: PUSH
71275: LD_EXP 110
71279: PUSH
71280: LD_EXP 113
71284: PUSH
71285: LD_EXP 115
71289: PUSH
71290: LD_EXP 116
71294: PUSH
71295: LD_EXP 117
71299: PUSH
71300: LD_EXP 119
71304: PUSH
71305: LD_EXP 120
71309: PUSH
71310: LD_EXP 123
71314: PUSH
71315: LD_EXP 124
71319: PUSH
71320: LD_EXP 125
71324: PUSH
71325: LD_EXP 126
71329: PUSH
71330: LD_EXP 127
71334: PUSH
71335: LD_EXP 128
71339: PUSH
71340: LD_EXP 129
71344: PUSH
71345: LD_EXP 130
71349: PUSH
71350: LD_EXP 131
71354: PUSH
71355: LD_EXP 96
71359: PUSH
71360: LD_EXP 97
71364: PUSH
71365: LD_EXP 100
71369: PUSH
71370: LD_EXP 101
71374: PUSH
71375: LD_EXP 102
71379: PUSH
71380: LD_EXP 98
71384: PUSH
71385: LD_EXP 99
71389: PUSH
71390: LD_EXP 107
71394: PUSH
71395: LD_EXP 111
71399: PUSH
71400: LD_EXP 112
71404: PUSH
71405: LD_EXP 114
71409: PUSH
71410: LD_EXP 118
71414: PUSH
71415: LD_EXP 121
71419: PUSH
71420: LD_EXP 122
71424: PUSH
71425: LD_EXP 132
71429: PUSH
71430: LD_EXP 133
71434: PUSH
71435: LD_EXP 134
71439: PUSH
71440: LD_EXP 135
71444: PUSH
71445: EMPTY
71446: LIST
71447: LIST
71448: LIST
71449: LIST
71450: LIST
71451: LIST
71452: LIST
71453: LIST
71454: LIST
71455: LIST
71456: LIST
71457: LIST
71458: LIST
71459: LIST
71460: LIST
71461: LIST
71462: LIST
71463: LIST
71464: LIST
71465: LIST
71466: LIST
71467: LIST
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: LIST
71474: LIST
71475: LIST
71476: LIST
71477: LIST
71478: LIST
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: LIST
71484: LIST
71485: LIST
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: LIST
71496: LIST
71497: LIST
71498: LIST
71499: LIST
71500: ST_TO_ADDR
// tmp :=  ;
71501: LD_ADDR_VAR 0 3
71505: PUSH
71506: LD_STRING 
71508: ST_TO_ADDR
// for i = 1 to normalCounter do
71509: LD_ADDR_VAR 0 8
71513: PUSH
71514: DOUBLE
71515: LD_INT 1
71517: DEC
71518: ST_TO_ADDR
71519: LD_EXP 80
71523: PUSH
71524: FOR_TO
71525: IFFALSE 71561
// begin if flags [ i ] then
71527: LD_VAR 0 4
71531: PUSH
71532: LD_VAR 0 8
71536: ARRAY
71537: IFFALSE 71559
// tmp := tmp & i & ; ;
71539: LD_ADDR_VAR 0 3
71543: PUSH
71544: LD_VAR 0 3
71548: PUSH
71549: LD_VAR 0 8
71553: STR
71554: PUSH
71555: LD_STRING ;
71557: STR
71558: ST_TO_ADDR
// end ;
71559: GO 71524
71561: POP
71562: POP
// for i = 1 to hardcoreCounter do
71563: LD_ADDR_VAR 0 8
71567: PUSH
71568: DOUBLE
71569: LD_INT 1
71571: DEC
71572: ST_TO_ADDR
71573: LD_EXP 81
71577: PUSH
71578: FOR_TO
71579: IFFALSE 71625
// begin if flags [ normalCounter + i ] then
71581: LD_VAR 0 4
71585: PUSH
71586: LD_EXP 80
71590: PUSH
71591: LD_VAR 0 8
71595: PLUS
71596: ARRAY
71597: IFFALSE 71623
// tmp := tmp & ( 100 + i ) & ; ;
71599: LD_ADDR_VAR 0 3
71603: PUSH
71604: LD_VAR 0 3
71608: PUSH
71609: LD_INT 100
71611: PUSH
71612: LD_VAR 0 8
71616: PLUS
71617: STR
71618: PUSH
71619: LD_STRING ;
71621: STR
71622: ST_TO_ADDR
// end ;
71623: GO 71578
71625: POP
71626: POP
// if tmp then
71627: LD_VAR 0 3
71631: IFFALSE 71643
// active := tmp ;
71633: LD_ADDR_VAR 0 7
71637: PUSH
71638: LD_VAR 0 3
71642: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
71643: LD_STRING getStreamItemsFromMission("
71645: PUSH
71646: LD_VAR 0 5
71650: STR
71651: PUSH
71652: LD_STRING ","
71654: STR
71655: PUSH
71656: LD_VAR 0 6
71660: STR
71661: PUSH
71662: LD_STRING ","
71664: STR
71665: PUSH
71666: LD_VAR 0 7
71670: STR
71671: PUSH
71672: LD_STRING ")
71674: STR
71675: PPUSH
71676: CALL_OW 559
// end else
71680: GO 71689
// ToLua ( getStreamItemsFromMission("","","") ) ;
71682: LD_STRING getStreamItemsFromMission("","","")
71684: PPUSH
71685: CALL_OW 559
// end ;
71689: LD_VAR 0 2
71693: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
71694: LD_EXP 79
71698: PUSH
71699: LD_EXP 84
71703: AND
71704: IFFALSE 71828
71706: GO 71708
71708: DISABLE
71709: LD_INT 0
71711: PPUSH
71712: PPUSH
// begin enable ;
71713: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
71714: LD_ADDR_VAR 0 2
71718: PUSH
71719: LD_INT 22
71721: PUSH
71722: LD_OWVAR 2
71726: PUSH
71727: EMPTY
71728: LIST
71729: LIST
71730: PUSH
71731: LD_INT 2
71733: PUSH
71734: LD_INT 34
71736: PUSH
71737: LD_INT 7
71739: PUSH
71740: EMPTY
71741: LIST
71742: LIST
71743: PUSH
71744: LD_INT 34
71746: PUSH
71747: LD_INT 45
71749: PUSH
71750: EMPTY
71751: LIST
71752: LIST
71753: PUSH
71754: LD_INT 34
71756: PUSH
71757: LD_INT 28
71759: PUSH
71760: EMPTY
71761: LIST
71762: LIST
71763: PUSH
71764: LD_INT 34
71766: PUSH
71767: LD_INT 47
71769: PUSH
71770: EMPTY
71771: LIST
71772: LIST
71773: PUSH
71774: EMPTY
71775: LIST
71776: LIST
71777: LIST
71778: LIST
71779: LIST
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: PPUSH
71785: CALL_OW 69
71789: ST_TO_ADDR
// if not tmp then
71790: LD_VAR 0 2
71794: NOT
71795: IFFALSE 71799
// exit ;
71797: GO 71828
// for i in tmp do
71799: LD_ADDR_VAR 0 1
71803: PUSH
71804: LD_VAR 0 2
71808: PUSH
71809: FOR_IN
71810: IFFALSE 71826
// begin SetLives ( i , 0 ) ;
71812: LD_VAR 0 1
71816: PPUSH
71817: LD_INT 0
71819: PPUSH
71820: CALL_OW 234
// end ;
71824: GO 71809
71826: POP
71827: POP
// end ;
71828: PPOPN 2
71830: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
71831: LD_EXP 79
71835: PUSH
71836: LD_EXP 85
71840: AND
71841: IFFALSE 71925
71843: GO 71845
71845: DISABLE
71846: LD_INT 0
71848: PPUSH
71849: PPUSH
// begin enable ;
71850: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
71851: LD_ADDR_VAR 0 2
71855: PUSH
71856: LD_INT 22
71858: PUSH
71859: LD_OWVAR 2
71863: PUSH
71864: EMPTY
71865: LIST
71866: LIST
71867: PUSH
71868: LD_INT 32
71870: PUSH
71871: LD_INT 3
71873: PUSH
71874: EMPTY
71875: LIST
71876: LIST
71877: PUSH
71878: EMPTY
71879: LIST
71880: LIST
71881: PPUSH
71882: CALL_OW 69
71886: ST_TO_ADDR
// if not tmp then
71887: LD_VAR 0 2
71891: NOT
71892: IFFALSE 71896
// exit ;
71894: GO 71925
// for i in tmp do
71896: LD_ADDR_VAR 0 1
71900: PUSH
71901: LD_VAR 0 2
71905: PUSH
71906: FOR_IN
71907: IFFALSE 71923
// begin SetLives ( i , 0 ) ;
71909: LD_VAR 0 1
71913: PPUSH
71914: LD_INT 0
71916: PPUSH
71917: CALL_OW 234
// end ;
71921: GO 71906
71923: POP
71924: POP
// end ;
71925: PPOPN 2
71927: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
71928: LD_EXP 79
71932: PUSH
71933: LD_EXP 82
71937: AND
71938: IFFALSE 72031
71940: GO 71942
71942: DISABLE
71943: LD_INT 0
71945: PPUSH
// begin enable ;
71946: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
71947: LD_ADDR_VAR 0 1
71951: PUSH
71952: LD_INT 22
71954: PUSH
71955: LD_OWVAR 2
71959: PUSH
71960: EMPTY
71961: LIST
71962: LIST
71963: PUSH
71964: LD_INT 2
71966: PUSH
71967: LD_INT 25
71969: PUSH
71970: LD_INT 5
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: PUSH
71977: LD_INT 25
71979: PUSH
71980: LD_INT 9
71982: PUSH
71983: EMPTY
71984: LIST
71985: LIST
71986: PUSH
71987: LD_INT 25
71989: PUSH
71990: LD_INT 8
71992: PUSH
71993: EMPTY
71994: LIST
71995: LIST
71996: PUSH
71997: EMPTY
71998: LIST
71999: LIST
72000: LIST
72001: LIST
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: PPUSH
72007: CALL_OW 69
72011: PUSH
72012: FOR_IN
72013: IFFALSE 72029
// begin SetClass ( i , 1 ) ;
72015: LD_VAR 0 1
72019: PPUSH
72020: LD_INT 1
72022: PPUSH
72023: CALL_OW 336
// end ;
72027: GO 72012
72029: POP
72030: POP
// end ;
72031: PPOPN 1
72033: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
72034: LD_EXP 79
72038: PUSH
72039: LD_EXP 83
72043: AND
72044: PUSH
72045: LD_OWVAR 65
72049: PUSH
72050: LD_INT 7
72052: LESS
72053: AND
72054: IFFALSE 72068
72056: GO 72058
72058: DISABLE
// begin enable ;
72059: ENABLE
// game_speed := 7 ;
72060: LD_ADDR_OWVAR 65
72064: PUSH
72065: LD_INT 7
72067: ST_TO_ADDR
// end ;
72068: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
72069: LD_EXP 79
72073: PUSH
72074: LD_EXP 86
72078: AND
72079: IFFALSE 72281
72081: GO 72083
72083: DISABLE
72084: LD_INT 0
72086: PPUSH
72087: PPUSH
72088: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
72089: LD_ADDR_VAR 0 3
72093: PUSH
72094: LD_INT 81
72096: PUSH
72097: LD_OWVAR 2
72101: PUSH
72102: EMPTY
72103: LIST
72104: LIST
72105: PUSH
72106: LD_INT 21
72108: PUSH
72109: LD_INT 1
72111: PUSH
72112: EMPTY
72113: LIST
72114: LIST
72115: PUSH
72116: EMPTY
72117: LIST
72118: LIST
72119: PPUSH
72120: CALL_OW 69
72124: ST_TO_ADDR
// if not tmp then
72125: LD_VAR 0 3
72129: NOT
72130: IFFALSE 72134
// exit ;
72132: GO 72281
// if tmp > 5 then
72134: LD_VAR 0 3
72138: PUSH
72139: LD_INT 5
72141: GREATER
72142: IFFALSE 72154
// k := 5 else
72144: LD_ADDR_VAR 0 2
72148: PUSH
72149: LD_INT 5
72151: ST_TO_ADDR
72152: GO 72164
// k := tmp ;
72154: LD_ADDR_VAR 0 2
72158: PUSH
72159: LD_VAR 0 3
72163: ST_TO_ADDR
// for i := 1 to k do
72164: LD_ADDR_VAR 0 1
72168: PUSH
72169: DOUBLE
72170: LD_INT 1
72172: DEC
72173: ST_TO_ADDR
72174: LD_VAR 0 2
72178: PUSH
72179: FOR_TO
72180: IFFALSE 72279
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
72182: LD_VAR 0 3
72186: PUSH
72187: LD_VAR 0 1
72191: ARRAY
72192: PPUSH
72193: LD_VAR 0 1
72197: PUSH
72198: LD_INT 4
72200: MOD
72201: PUSH
72202: LD_INT 1
72204: PLUS
72205: PPUSH
72206: CALL_OW 259
72210: PUSH
72211: LD_INT 10
72213: LESS
72214: IFFALSE 72277
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
72216: LD_VAR 0 3
72220: PUSH
72221: LD_VAR 0 1
72225: ARRAY
72226: PPUSH
72227: LD_VAR 0 1
72231: PUSH
72232: LD_INT 4
72234: MOD
72235: PUSH
72236: LD_INT 1
72238: PLUS
72239: PPUSH
72240: LD_VAR 0 3
72244: PUSH
72245: LD_VAR 0 1
72249: ARRAY
72250: PPUSH
72251: LD_VAR 0 1
72255: PUSH
72256: LD_INT 4
72258: MOD
72259: PUSH
72260: LD_INT 1
72262: PLUS
72263: PPUSH
72264: CALL_OW 259
72268: PUSH
72269: LD_INT 1
72271: PLUS
72272: PPUSH
72273: CALL_OW 237
72277: GO 72179
72279: POP
72280: POP
// end ;
72281: PPOPN 3
72283: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
72284: LD_EXP 79
72288: PUSH
72289: LD_EXP 87
72293: AND
72294: IFFALSE 72314
72296: GO 72298
72298: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
72299: LD_INT 4
72301: PPUSH
72302: LD_OWVAR 2
72306: PPUSH
72307: LD_INT 0
72309: PPUSH
72310: CALL_OW 324
72314: END
// every 0 0$1 trigger StreamModeActive and sShovel do
72315: LD_EXP 79
72319: PUSH
72320: LD_EXP 116
72324: AND
72325: IFFALSE 72345
72327: GO 72329
72329: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
72330: LD_INT 19
72332: PPUSH
72333: LD_OWVAR 2
72337: PPUSH
72338: LD_INT 0
72340: PPUSH
72341: CALL_OW 324
72345: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
72346: LD_EXP 79
72350: PUSH
72351: LD_EXP 88
72355: AND
72356: IFFALSE 72458
72358: GO 72360
72360: DISABLE
72361: LD_INT 0
72363: PPUSH
72364: PPUSH
// begin enable ;
72365: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
72366: LD_ADDR_VAR 0 2
72370: PUSH
72371: LD_INT 22
72373: PUSH
72374: LD_OWVAR 2
72378: PUSH
72379: EMPTY
72380: LIST
72381: LIST
72382: PUSH
72383: LD_INT 2
72385: PUSH
72386: LD_INT 34
72388: PUSH
72389: LD_INT 11
72391: PUSH
72392: EMPTY
72393: LIST
72394: LIST
72395: PUSH
72396: LD_INT 34
72398: PUSH
72399: LD_INT 30
72401: PUSH
72402: EMPTY
72403: LIST
72404: LIST
72405: PUSH
72406: EMPTY
72407: LIST
72408: LIST
72409: LIST
72410: PUSH
72411: EMPTY
72412: LIST
72413: LIST
72414: PPUSH
72415: CALL_OW 69
72419: ST_TO_ADDR
// if not tmp then
72420: LD_VAR 0 2
72424: NOT
72425: IFFALSE 72429
// exit ;
72427: GO 72458
// for i in tmp do
72429: LD_ADDR_VAR 0 1
72433: PUSH
72434: LD_VAR 0 2
72438: PUSH
72439: FOR_IN
72440: IFFALSE 72456
// begin SetLives ( i , 0 ) ;
72442: LD_VAR 0 1
72446: PPUSH
72447: LD_INT 0
72449: PPUSH
72450: CALL_OW 234
// end ;
72454: GO 72439
72456: POP
72457: POP
// end ;
72458: PPOPN 2
72460: END
// every 0 0$1 trigger StreamModeActive and sBunker do
72461: LD_EXP 79
72465: PUSH
72466: LD_EXP 89
72470: AND
72471: IFFALSE 72491
72473: GO 72475
72475: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
72476: LD_INT 32
72478: PPUSH
72479: LD_OWVAR 2
72483: PPUSH
72484: LD_INT 0
72486: PPUSH
72487: CALL_OW 324
72491: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
72492: LD_EXP 79
72496: PUSH
72497: LD_EXP 90
72501: AND
72502: IFFALSE 72683
72504: GO 72506
72506: DISABLE
72507: LD_INT 0
72509: PPUSH
72510: PPUSH
72511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
72512: LD_ADDR_VAR 0 2
72516: PUSH
72517: LD_INT 22
72519: PUSH
72520: LD_OWVAR 2
72524: PUSH
72525: EMPTY
72526: LIST
72527: LIST
72528: PUSH
72529: LD_INT 33
72531: PUSH
72532: LD_INT 3
72534: PUSH
72535: EMPTY
72536: LIST
72537: LIST
72538: PUSH
72539: EMPTY
72540: LIST
72541: LIST
72542: PPUSH
72543: CALL_OW 69
72547: ST_TO_ADDR
// if not tmp then
72548: LD_VAR 0 2
72552: NOT
72553: IFFALSE 72557
// exit ;
72555: GO 72683
// side := 0 ;
72557: LD_ADDR_VAR 0 3
72561: PUSH
72562: LD_INT 0
72564: ST_TO_ADDR
// for i := 1 to 8 do
72565: LD_ADDR_VAR 0 1
72569: PUSH
72570: DOUBLE
72571: LD_INT 1
72573: DEC
72574: ST_TO_ADDR
72575: LD_INT 8
72577: PUSH
72578: FOR_TO
72579: IFFALSE 72627
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
72581: LD_OWVAR 2
72585: PUSH
72586: LD_VAR 0 1
72590: NONEQUAL
72591: PUSH
72592: LD_OWVAR 2
72596: PPUSH
72597: LD_VAR 0 1
72601: PPUSH
72602: CALL_OW 81
72606: PUSH
72607: LD_INT 2
72609: EQUAL
72610: AND
72611: IFFALSE 72625
// begin side := i ;
72613: LD_ADDR_VAR 0 3
72617: PUSH
72618: LD_VAR 0 1
72622: ST_TO_ADDR
// break ;
72623: GO 72627
// end ;
72625: GO 72578
72627: POP
72628: POP
// if not side then
72629: LD_VAR 0 3
72633: NOT
72634: IFFALSE 72638
// exit ;
72636: GO 72683
// for i := 1 to tmp do
72638: LD_ADDR_VAR 0 1
72642: PUSH
72643: DOUBLE
72644: LD_INT 1
72646: DEC
72647: ST_TO_ADDR
72648: LD_VAR 0 2
72652: PUSH
72653: FOR_TO
72654: IFFALSE 72681
// if Prob ( 60 ) then
72656: LD_INT 60
72658: PPUSH
72659: CALL_OW 13
72663: IFFALSE 72679
// SetSide ( i , side ) ;
72665: LD_VAR 0 1
72669: PPUSH
72670: LD_VAR 0 3
72674: PPUSH
72675: CALL_OW 235
72679: GO 72653
72681: POP
72682: POP
// end ;
72683: PPOPN 3
72685: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
72686: LD_EXP 79
72690: PUSH
72691: LD_EXP 92
72695: AND
72696: IFFALSE 72815
72698: GO 72700
72700: DISABLE
72701: LD_INT 0
72703: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
72704: LD_ADDR_VAR 0 1
72708: PUSH
72709: LD_INT 22
72711: PUSH
72712: LD_OWVAR 2
72716: PUSH
72717: EMPTY
72718: LIST
72719: LIST
72720: PUSH
72721: LD_INT 21
72723: PUSH
72724: LD_INT 1
72726: PUSH
72727: EMPTY
72728: LIST
72729: LIST
72730: PUSH
72731: LD_INT 3
72733: PUSH
72734: LD_INT 23
72736: PUSH
72737: LD_INT 0
72739: PUSH
72740: EMPTY
72741: LIST
72742: LIST
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: PUSH
72748: EMPTY
72749: LIST
72750: LIST
72751: LIST
72752: PPUSH
72753: CALL_OW 69
72757: PUSH
72758: FOR_IN
72759: IFFALSE 72813
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
72761: LD_VAR 0 1
72765: PPUSH
72766: CALL_OW 257
72770: PUSH
72771: LD_INT 1
72773: PUSH
72774: LD_INT 2
72776: PUSH
72777: LD_INT 3
72779: PUSH
72780: LD_INT 4
72782: PUSH
72783: EMPTY
72784: LIST
72785: LIST
72786: LIST
72787: LIST
72788: IN
72789: IFFALSE 72811
// SetClass ( un , rand ( 1 , 4 ) ) ;
72791: LD_VAR 0 1
72795: PPUSH
72796: LD_INT 1
72798: PPUSH
72799: LD_INT 4
72801: PPUSH
72802: CALL_OW 12
72806: PPUSH
72807: CALL_OW 336
72811: GO 72758
72813: POP
72814: POP
// end ;
72815: PPOPN 1
72817: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
72818: LD_EXP 79
72822: PUSH
72823: LD_EXP 91
72827: AND
72828: IFFALSE 72907
72830: GO 72832
72832: DISABLE
72833: LD_INT 0
72835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
72836: LD_ADDR_VAR 0 1
72840: PUSH
72841: LD_INT 22
72843: PUSH
72844: LD_OWVAR 2
72848: PUSH
72849: EMPTY
72850: LIST
72851: LIST
72852: PUSH
72853: LD_INT 21
72855: PUSH
72856: LD_INT 3
72858: PUSH
72859: EMPTY
72860: LIST
72861: LIST
72862: PUSH
72863: EMPTY
72864: LIST
72865: LIST
72866: PPUSH
72867: CALL_OW 69
72871: ST_TO_ADDR
// if not tmp then
72872: LD_VAR 0 1
72876: NOT
72877: IFFALSE 72881
// exit ;
72879: GO 72907
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
72881: LD_VAR 0 1
72885: PUSH
72886: LD_INT 1
72888: PPUSH
72889: LD_VAR 0 1
72893: PPUSH
72894: CALL_OW 12
72898: ARRAY
72899: PPUSH
72900: LD_INT 100
72902: PPUSH
72903: CALL_OW 234
// end ;
72907: PPOPN 1
72909: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
72910: LD_EXP 79
72914: PUSH
72915: LD_EXP 93
72919: AND
72920: IFFALSE 73018
72922: GO 72924
72924: DISABLE
72925: LD_INT 0
72927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
72928: LD_ADDR_VAR 0 1
72932: PUSH
72933: LD_INT 22
72935: PUSH
72936: LD_OWVAR 2
72940: PUSH
72941: EMPTY
72942: LIST
72943: LIST
72944: PUSH
72945: LD_INT 21
72947: PUSH
72948: LD_INT 1
72950: PUSH
72951: EMPTY
72952: LIST
72953: LIST
72954: PUSH
72955: EMPTY
72956: LIST
72957: LIST
72958: PPUSH
72959: CALL_OW 69
72963: ST_TO_ADDR
// if not tmp then
72964: LD_VAR 0 1
72968: NOT
72969: IFFALSE 72973
// exit ;
72971: GO 73018
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
72973: LD_VAR 0 1
72977: PUSH
72978: LD_INT 1
72980: PPUSH
72981: LD_VAR 0 1
72985: PPUSH
72986: CALL_OW 12
72990: ARRAY
72991: PPUSH
72992: LD_INT 1
72994: PPUSH
72995: LD_INT 4
72997: PPUSH
72998: CALL_OW 12
73002: PPUSH
73003: LD_INT 3000
73005: PPUSH
73006: LD_INT 9000
73008: PPUSH
73009: CALL_OW 12
73013: PPUSH
73014: CALL_OW 492
// end ;
73018: PPOPN 1
73020: END
// every 0 0$1 trigger StreamModeActive and sDepot do
73021: LD_EXP 79
73025: PUSH
73026: LD_EXP 94
73030: AND
73031: IFFALSE 73051
73033: GO 73035
73035: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
73036: LD_INT 1
73038: PPUSH
73039: LD_OWVAR 2
73043: PPUSH
73044: LD_INT 0
73046: PPUSH
73047: CALL_OW 324
73051: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
73052: LD_EXP 79
73056: PUSH
73057: LD_EXP 95
73061: AND
73062: IFFALSE 73145
73064: GO 73066
73066: DISABLE
73067: LD_INT 0
73069: PPUSH
73070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
73071: LD_ADDR_VAR 0 2
73075: PUSH
73076: LD_INT 22
73078: PUSH
73079: LD_OWVAR 2
73083: PUSH
73084: EMPTY
73085: LIST
73086: LIST
73087: PUSH
73088: LD_INT 21
73090: PUSH
73091: LD_INT 3
73093: PUSH
73094: EMPTY
73095: LIST
73096: LIST
73097: PUSH
73098: EMPTY
73099: LIST
73100: LIST
73101: PPUSH
73102: CALL_OW 69
73106: ST_TO_ADDR
// if not tmp then
73107: LD_VAR 0 2
73111: NOT
73112: IFFALSE 73116
// exit ;
73114: GO 73145
// for i in tmp do
73116: LD_ADDR_VAR 0 1
73120: PUSH
73121: LD_VAR 0 2
73125: PUSH
73126: FOR_IN
73127: IFFALSE 73143
// SetBLevel ( i , 10 ) ;
73129: LD_VAR 0 1
73133: PPUSH
73134: LD_INT 10
73136: PPUSH
73137: CALL_OW 241
73141: GO 73126
73143: POP
73144: POP
// end ;
73145: PPOPN 2
73147: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
73148: LD_EXP 79
73152: PUSH
73153: LD_EXP 96
73157: AND
73158: IFFALSE 73269
73160: GO 73162
73162: DISABLE
73163: LD_INT 0
73165: PPUSH
73166: PPUSH
73167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73168: LD_ADDR_VAR 0 3
73172: PUSH
73173: LD_INT 22
73175: PUSH
73176: LD_OWVAR 2
73180: PUSH
73181: EMPTY
73182: LIST
73183: LIST
73184: PUSH
73185: LD_INT 25
73187: PUSH
73188: LD_INT 1
73190: PUSH
73191: EMPTY
73192: LIST
73193: LIST
73194: PUSH
73195: EMPTY
73196: LIST
73197: LIST
73198: PPUSH
73199: CALL_OW 69
73203: ST_TO_ADDR
// if not tmp then
73204: LD_VAR 0 3
73208: NOT
73209: IFFALSE 73213
// exit ;
73211: GO 73269
// un := tmp [ rand ( 1 , tmp ) ] ;
73213: LD_ADDR_VAR 0 2
73217: PUSH
73218: LD_VAR 0 3
73222: PUSH
73223: LD_INT 1
73225: PPUSH
73226: LD_VAR 0 3
73230: PPUSH
73231: CALL_OW 12
73235: ARRAY
73236: ST_TO_ADDR
// if Crawls ( un ) then
73237: LD_VAR 0 2
73241: PPUSH
73242: CALL_OW 318
73246: IFFALSE 73257
// ComWalk ( un ) ;
73248: LD_VAR 0 2
73252: PPUSH
73253: CALL_OW 138
// SetClass ( un , class_sniper ) ;
73257: LD_VAR 0 2
73261: PPUSH
73262: LD_INT 5
73264: PPUSH
73265: CALL_OW 336
// end ;
73269: PPOPN 3
73271: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
73272: LD_EXP 79
73276: PUSH
73277: LD_EXP 97
73281: AND
73282: PUSH
73283: LD_OWVAR 67
73287: PUSH
73288: LD_INT 4
73290: LESS
73291: AND
73292: IFFALSE 73311
73294: GO 73296
73296: DISABLE
// begin Difficulty := Difficulty + 1 ;
73297: LD_ADDR_OWVAR 67
73301: PUSH
73302: LD_OWVAR 67
73306: PUSH
73307: LD_INT 1
73309: PLUS
73310: ST_TO_ADDR
// end ;
73311: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
73312: LD_EXP 79
73316: PUSH
73317: LD_EXP 98
73321: AND
73322: IFFALSE 73425
73324: GO 73326
73326: DISABLE
73327: LD_INT 0
73329: PPUSH
// begin for i := 1 to 5 do
73330: LD_ADDR_VAR 0 1
73334: PUSH
73335: DOUBLE
73336: LD_INT 1
73338: DEC
73339: ST_TO_ADDR
73340: LD_INT 5
73342: PUSH
73343: FOR_TO
73344: IFFALSE 73423
// begin uc_nation := nation_nature ;
73346: LD_ADDR_OWVAR 21
73350: PUSH
73351: LD_INT 0
73353: ST_TO_ADDR
// uc_side := 0 ;
73354: LD_ADDR_OWVAR 20
73358: PUSH
73359: LD_INT 0
73361: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
73362: LD_ADDR_OWVAR 29
73366: PUSH
73367: LD_INT 12
73369: PUSH
73370: LD_INT 12
73372: PUSH
73373: EMPTY
73374: LIST
73375: LIST
73376: ST_TO_ADDR
// hc_agressivity := 20 ;
73377: LD_ADDR_OWVAR 35
73381: PUSH
73382: LD_INT 20
73384: ST_TO_ADDR
// hc_class := class_tiger ;
73385: LD_ADDR_OWVAR 28
73389: PUSH
73390: LD_INT 14
73392: ST_TO_ADDR
// hc_gallery :=  ;
73393: LD_ADDR_OWVAR 33
73397: PUSH
73398: LD_STRING 
73400: ST_TO_ADDR
// hc_name :=  ;
73401: LD_ADDR_OWVAR 26
73405: PUSH
73406: LD_STRING 
73408: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
73409: CALL_OW 44
73413: PPUSH
73414: LD_INT 0
73416: PPUSH
73417: CALL_OW 51
// end ;
73421: GO 73343
73423: POP
73424: POP
// end ;
73425: PPOPN 1
73427: END
// every 0 0$1 trigger StreamModeActive and sBomb do
73428: LD_EXP 79
73432: PUSH
73433: LD_EXP 99
73437: AND
73438: IFFALSE 73447
73440: GO 73442
73442: DISABLE
// StreamSibBomb ;
73443: CALL 73448 0 0
73447: END
// export function StreamSibBomb ; var i , x , y ; begin
73448: LD_INT 0
73450: PPUSH
73451: PPUSH
73452: PPUSH
73453: PPUSH
// result := false ;
73454: LD_ADDR_VAR 0 1
73458: PUSH
73459: LD_INT 0
73461: ST_TO_ADDR
// for i := 1 to 16 do
73462: LD_ADDR_VAR 0 2
73466: PUSH
73467: DOUBLE
73468: LD_INT 1
73470: DEC
73471: ST_TO_ADDR
73472: LD_INT 16
73474: PUSH
73475: FOR_TO
73476: IFFALSE 73675
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
73478: LD_ADDR_VAR 0 3
73482: PUSH
73483: LD_INT 10
73485: PUSH
73486: LD_INT 20
73488: PUSH
73489: LD_INT 30
73491: PUSH
73492: LD_INT 40
73494: PUSH
73495: LD_INT 50
73497: PUSH
73498: LD_INT 60
73500: PUSH
73501: LD_INT 70
73503: PUSH
73504: LD_INT 80
73506: PUSH
73507: LD_INT 90
73509: PUSH
73510: LD_INT 100
73512: PUSH
73513: LD_INT 110
73515: PUSH
73516: LD_INT 120
73518: PUSH
73519: LD_INT 130
73521: PUSH
73522: LD_INT 140
73524: PUSH
73525: LD_INT 150
73527: PUSH
73528: EMPTY
73529: LIST
73530: LIST
73531: LIST
73532: LIST
73533: LIST
73534: LIST
73535: LIST
73536: LIST
73537: LIST
73538: LIST
73539: LIST
73540: LIST
73541: LIST
73542: LIST
73543: LIST
73544: PUSH
73545: LD_INT 1
73547: PPUSH
73548: LD_INT 15
73550: PPUSH
73551: CALL_OW 12
73555: ARRAY
73556: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
73557: LD_ADDR_VAR 0 4
73561: PUSH
73562: LD_INT 10
73564: PUSH
73565: LD_INT 20
73567: PUSH
73568: LD_INT 30
73570: PUSH
73571: LD_INT 40
73573: PUSH
73574: LD_INT 50
73576: PUSH
73577: LD_INT 60
73579: PUSH
73580: LD_INT 70
73582: PUSH
73583: LD_INT 80
73585: PUSH
73586: LD_INT 90
73588: PUSH
73589: LD_INT 100
73591: PUSH
73592: LD_INT 110
73594: PUSH
73595: LD_INT 120
73597: PUSH
73598: LD_INT 130
73600: PUSH
73601: LD_INT 140
73603: PUSH
73604: LD_INT 150
73606: PUSH
73607: EMPTY
73608: LIST
73609: LIST
73610: LIST
73611: LIST
73612: LIST
73613: LIST
73614: LIST
73615: LIST
73616: LIST
73617: LIST
73618: LIST
73619: LIST
73620: LIST
73621: LIST
73622: LIST
73623: PUSH
73624: LD_INT 1
73626: PPUSH
73627: LD_INT 15
73629: PPUSH
73630: CALL_OW 12
73634: ARRAY
73635: ST_TO_ADDR
// if ValidHex ( x , y ) then
73636: LD_VAR 0 3
73640: PPUSH
73641: LD_VAR 0 4
73645: PPUSH
73646: CALL_OW 488
73650: IFFALSE 73673
// begin result := [ x , y ] ;
73652: LD_ADDR_VAR 0 1
73656: PUSH
73657: LD_VAR 0 3
73661: PUSH
73662: LD_VAR 0 4
73666: PUSH
73667: EMPTY
73668: LIST
73669: LIST
73670: ST_TO_ADDR
// break ;
73671: GO 73675
// end ; end ;
73673: GO 73475
73675: POP
73676: POP
// if result then
73677: LD_VAR 0 1
73681: IFFALSE 73741
// begin ToLua ( playSibBomb() ) ;
73683: LD_STRING playSibBomb()
73685: PPUSH
73686: CALL_OW 559
// wait ( 0 0$14 ) ;
73690: LD_INT 490
73692: PPUSH
73693: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
73697: LD_VAR 0 1
73701: PUSH
73702: LD_INT 1
73704: ARRAY
73705: PPUSH
73706: LD_VAR 0 1
73710: PUSH
73711: LD_INT 2
73713: ARRAY
73714: PPUSH
73715: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
73719: LD_VAR 0 1
73723: PUSH
73724: LD_INT 1
73726: ARRAY
73727: PPUSH
73728: LD_VAR 0 1
73732: PUSH
73733: LD_INT 2
73735: ARRAY
73736: PPUSH
73737: CALL_OW 429
// end ; end ;
73741: LD_VAR 0 1
73745: RET
// every 0 0$1 trigger StreamModeActive and sReset do
73746: LD_EXP 79
73750: PUSH
73751: LD_EXP 101
73755: AND
73756: IFFALSE 73768
73758: GO 73760
73760: DISABLE
// YouLost (  ) ;
73761: LD_STRING 
73763: PPUSH
73764: CALL_OW 104
73768: END
// every 0 0$1 trigger StreamModeActive and sFog do
73769: LD_EXP 79
73773: PUSH
73774: LD_EXP 100
73778: AND
73779: IFFALSE 73793
73781: GO 73783
73783: DISABLE
// FogOff ( your_side ) ;
73784: LD_OWVAR 2
73788: PPUSH
73789: CALL_OW 344
73793: END
// every 0 0$1 trigger StreamModeActive and sSun do
73794: LD_EXP 79
73798: PUSH
73799: LD_EXP 102
73803: AND
73804: IFFALSE 73832
73806: GO 73808
73808: DISABLE
// begin solar_recharge_percent := 0 ;
73809: LD_ADDR_OWVAR 79
73813: PUSH
73814: LD_INT 0
73816: ST_TO_ADDR
// wait ( 5 5$00 ) ;
73817: LD_INT 10500
73819: PPUSH
73820: CALL_OW 67
// solar_recharge_percent := 100 ;
73824: LD_ADDR_OWVAR 79
73828: PUSH
73829: LD_INT 100
73831: ST_TO_ADDR
// end ;
73832: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
73833: LD_EXP 79
73837: PUSH
73838: LD_EXP 103
73842: AND
73843: IFFALSE 74082
73845: GO 73847
73847: DISABLE
73848: LD_INT 0
73850: PPUSH
73851: PPUSH
73852: PPUSH
// begin tmp := [ ] ;
73853: LD_ADDR_VAR 0 3
73857: PUSH
73858: EMPTY
73859: ST_TO_ADDR
// for i := 1 to 6 do
73860: LD_ADDR_VAR 0 1
73864: PUSH
73865: DOUBLE
73866: LD_INT 1
73868: DEC
73869: ST_TO_ADDR
73870: LD_INT 6
73872: PUSH
73873: FOR_TO
73874: IFFALSE 73979
// begin uc_nation := nation_nature ;
73876: LD_ADDR_OWVAR 21
73880: PUSH
73881: LD_INT 0
73883: ST_TO_ADDR
// uc_side := 0 ;
73884: LD_ADDR_OWVAR 20
73888: PUSH
73889: LD_INT 0
73891: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
73892: LD_ADDR_OWVAR 29
73896: PUSH
73897: LD_INT 12
73899: PUSH
73900: LD_INT 12
73902: PUSH
73903: EMPTY
73904: LIST
73905: LIST
73906: ST_TO_ADDR
// hc_agressivity := 20 ;
73907: LD_ADDR_OWVAR 35
73911: PUSH
73912: LD_INT 20
73914: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
73915: LD_ADDR_OWVAR 28
73919: PUSH
73920: LD_INT 17
73922: ST_TO_ADDR
// hc_gallery :=  ;
73923: LD_ADDR_OWVAR 33
73927: PUSH
73928: LD_STRING 
73930: ST_TO_ADDR
// hc_name :=  ;
73931: LD_ADDR_OWVAR 26
73935: PUSH
73936: LD_STRING 
73938: ST_TO_ADDR
// un := CreateHuman ;
73939: LD_ADDR_VAR 0 2
73943: PUSH
73944: CALL_OW 44
73948: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
73949: LD_VAR 0 2
73953: PPUSH
73954: LD_INT 1
73956: PPUSH
73957: CALL_OW 51
// tmp := tmp ^ un ;
73961: LD_ADDR_VAR 0 3
73965: PUSH
73966: LD_VAR 0 3
73970: PUSH
73971: LD_VAR 0 2
73975: ADD
73976: ST_TO_ADDR
// end ;
73977: GO 73873
73979: POP
73980: POP
// repeat wait ( 0 0$1 ) ;
73981: LD_INT 35
73983: PPUSH
73984: CALL_OW 67
// for un in tmp do
73988: LD_ADDR_VAR 0 2
73992: PUSH
73993: LD_VAR 0 3
73997: PUSH
73998: FOR_IN
73999: IFFALSE 74073
// begin if IsDead ( un ) then
74001: LD_VAR 0 2
74005: PPUSH
74006: CALL_OW 301
74010: IFFALSE 74030
// begin tmp := tmp diff un ;
74012: LD_ADDR_VAR 0 3
74016: PUSH
74017: LD_VAR 0 3
74021: PUSH
74022: LD_VAR 0 2
74026: DIFF
74027: ST_TO_ADDR
// continue ;
74028: GO 73998
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
74030: LD_VAR 0 2
74034: PPUSH
74035: LD_INT 3
74037: PUSH
74038: LD_INT 22
74040: PUSH
74041: LD_INT 0
74043: PUSH
74044: EMPTY
74045: LIST
74046: LIST
74047: PUSH
74048: EMPTY
74049: LIST
74050: LIST
74051: PPUSH
74052: CALL_OW 69
74056: PPUSH
74057: LD_VAR 0 2
74061: PPUSH
74062: CALL_OW 74
74066: PPUSH
74067: CALL_OW 115
// end ;
74071: GO 73998
74073: POP
74074: POP
// until not tmp ;
74075: LD_VAR 0 3
74079: NOT
74080: IFFALSE 73981
// end ;
74082: PPOPN 3
74084: END
// every 0 0$1 trigger StreamModeActive and sTroll do
74085: LD_EXP 79
74089: PUSH
74090: LD_EXP 104
74094: AND
74095: IFFALSE 74149
74097: GO 74099
74099: DISABLE
// begin ToLua ( displayTroll(); ) ;
74100: LD_STRING displayTroll();
74102: PPUSH
74103: CALL_OW 559
// wait ( 3 3$00 ) ;
74107: LD_INT 6300
74109: PPUSH
74110: CALL_OW 67
// ToLua ( hideTroll(); ) ;
74114: LD_STRING hideTroll();
74116: PPUSH
74117: CALL_OW 559
// wait ( 1 1$00 ) ;
74121: LD_INT 2100
74123: PPUSH
74124: CALL_OW 67
// ToLua ( displayTroll(); ) ;
74128: LD_STRING displayTroll();
74130: PPUSH
74131: CALL_OW 559
// wait ( 1 1$00 ) ;
74135: LD_INT 2100
74137: PPUSH
74138: CALL_OW 67
// ToLua ( hideTroll(); ) ;
74142: LD_STRING hideTroll();
74144: PPUSH
74145: CALL_OW 559
// end ;
74149: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
74150: LD_EXP 79
74154: PUSH
74155: LD_EXP 105
74159: AND
74160: IFFALSE 74223
74162: GO 74164
74164: DISABLE
74165: LD_INT 0
74167: PPUSH
// begin p := 0 ;
74168: LD_ADDR_VAR 0 1
74172: PUSH
74173: LD_INT 0
74175: ST_TO_ADDR
// repeat game_speed := 1 ;
74176: LD_ADDR_OWVAR 65
74180: PUSH
74181: LD_INT 1
74183: ST_TO_ADDR
// wait ( 0 0$1 ) ;
74184: LD_INT 35
74186: PPUSH
74187: CALL_OW 67
// p := p + 1 ;
74191: LD_ADDR_VAR 0 1
74195: PUSH
74196: LD_VAR 0 1
74200: PUSH
74201: LD_INT 1
74203: PLUS
74204: ST_TO_ADDR
// until p >= 60 ;
74205: LD_VAR 0 1
74209: PUSH
74210: LD_INT 60
74212: GREATEREQUAL
74213: IFFALSE 74176
// game_speed := 4 ;
74215: LD_ADDR_OWVAR 65
74219: PUSH
74220: LD_INT 4
74222: ST_TO_ADDR
// end ;
74223: PPOPN 1
74225: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
74226: LD_EXP 79
74230: PUSH
74231: LD_EXP 106
74235: AND
74236: IFFALSE 74382
74238: GO 74240
74240: DISABLE
74241: LD_INT 0
74243: PPUSH
74244: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
74245: LD_ADDR_VAR 0 1
74249: PUSH
74250: LD_INT 22
74252: PUSH
74253: LD_OWVAR 2
74257: PUSH
74258: EMPTY
74259: LIST
74260: LIST
74261: PUSH
74262: LD_INT 2
74264: PUSH
74265: LD_INT 30
74267: PUSH
74268: LD_INT 0
74270: PUSH
74271: EMPTY
74272: LIST
74273: LIST
74274: PUSH
74275: LD_INT 30
74277: PUSH
74278: LD_INT 1
74280: PUSH
74281: EMPTY
74282: LIST
74283: LIST
74284: PUSH
74285: EMPTY
74286: LIST
74287: LIST
74288: LIST
74289: PUSH
74290: EMPTY
74291: LIST
74292: LIST
74293: PPUSH
74294: CALL_OW 69
74298: ST_TO_ADDR
// if not depot then
74299: LD_VAR 0 1
74303: NOT
74304: IFFALSE 74308
// exit ;
74306: GO 74382
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
74308: LD_ADDR_VAR 0 2
74312: PUSH
74313: LD_VAR 0 1
74317: PUSH
74318: LD_INT 1
74320: PPUSH
74321: LD_VAR 0 1
74325: PPUSH
74326: CALL_OW 12
74330: ARRAY
74331: PPUSH
74332: CALL_OW 274
74336: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
74337: LD_VAR 0 2
74341: PPUSH
74342: LD_INT 1
74344: PPUSH
74345: LD_INT 0
74347: PPUSH
74348: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
74352: LD_VAR 0 2
74356: PPUSH
74357: LD_INT 2
74359: PPUSH
74360: LD_INT 0
74362: PPUSH
74363: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
74367: LD_VAR 0 2
74371: PPUSH
74372: LD_INT 3
74374: PPUSH
74375: LD_INT 0
74377: PPUSH
74378: CALL_OW 277
// end ;
74382: PPOPN 2
74384: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
74385: LD_EXP 79
74389: PUSH
74390: LD_EXP 107
74394: AND
74395: IFFALSE 74492
74397: GO 74399
74399: DISABLE
74400: LD_INT 0
74402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
74403: LD_ADDR_VAR 0 1
74407: PUSH
74408: LD_INT 22
74410: PUSH
74411: LD_OWVAR 2
74415: PUSH
74416: EMPTY
74417: LIST
74418: LIST
74419: PUSH
74420: LD_INT 21
74422: PUSH
74423: LD_INT 1
74425: PUSH
74426: EMPTY
74427: LIST
74428: LIST
74429: PUSH
74430: LD_INT 3
74432: PUSH
74433: LD_INT 23
74435: PUSH
74436: LD_INT 0
74438: PUSH
74439: EMPTY
74440: LIST
74441: LIST
74442: PUSH
74443: EMPTY
74444: LIST
74445: LIST
74446: PUSH
74447: EMPTY
74448: LIST
74449: LIST
74450: LIST
74451: PPUSH
74452: CALL_OW 69
74456: ST_TO_ADDR
// if not tmp then
74457: LD_VAR 0 1
74461: NOT
74462: IFFALSE 74466
// exit ;
74464: GO 74492
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
74466: LD_VAR 0 1
74470: PUSH
74471: LD_INT 1
74473: PPUSH
74474: LD_VAR 0 1
74478: PPUSH
74479: CALL_OW 12
74483: ARRAY
74484: PPUSH
74485: LD_INT 200
74487: PPUSH
74488: CALL_OW 234
// end ;
74492: PPOPN 1
74494: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
74495: LD_EXP 79
74499: PUSH
74500: LD_EXP 108
74504: AND
74505: IFFALSE 74584
74507: GO 74509
74509: DISABLE
74510: LD_INT 0
74512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
74513: LD_ADDR_VAR 0 1
74517: PUSH
74518: LD_INT 22
74520: PUSH
74521: LD_OWVAR 2
74525: PUSH
74526: EMPTY
74527: LIST
74528: LIST
74529: PUSH
74530: LD_INT 21
74532: PUSH
74533: LD_INT 2
74535: PUSH
74536: EMPTY
74537: LIST
74538: LIST
74539: PUSH
74540: EMPTY
74541: LIST
74542: LIST
74543: PPUSH
74544: CALL_OW 69
74548: ST_TO_ADDR
// if not tmp then
74549: LD_VAR 0 1
74553: NOT
74554: IFFALSE 74558
// exit ;
74556: GO 74584
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
74558: LD_VAR 0 1
74562: PUSH
74563: LD_INT 1
74565: PPUSH
74566: LD_VAR 0 1
74570: PPUSH
74571: CALL_OW 12
74575: ARRAY
74576: PPUSH
74577: LD_INT 60
74579: PPUSH
74580: CALL_OW 234
// end ;
74584: PPOPN 1
74586: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
74587: LD_EXP 79
74591: PUSH
74592: LD_EXP 109
74596: AND
74597: IFFALSE 74696
74599: GO 74601
74601: DISABLE
74602: LD_INT 0
74604: PPUSH
74605: PPUSH
// begin enable ;
74606: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
74607: LD_ADDR_VAR 0 1
74611: PUSH
74612: LD_INT 22
74614: PUSH
74615: LD_OWVAR 2
74619: PUSH
74620: EMPTY
74621: LIST
74622: LIST
74623: PUSH
74624: LD_INT 61
74626: PUSH
74627: EMPTY
74628: LIST
74629: PUSH
74630: LD_INT 33
74632: PUSH
74633: LD_INT 2
74635: PUSH
74636: EMPTY
74637: LIST
74638: LIST
74639: PUSH
74640: EMPTY
74641: LIST
74642: LIST
74643: LIST
74644: PPUSH
74645: CALL_OW 69
74649: ST_TO_ADDR
// if not tmp then
74650: LD_VAR 0 1
74654: NOT
74655: IFFALSE 74659
// exit ;
74657: GO 74696
// for i in tmp do
74659: LD_ADDR_VAR 0 2
74663: PUSH
74664: LD_VAR 0 1
74668: PUSH
74669: FOR_IN
74670: IFFALSE 74694
// if IsControledBy ( i ) then
74672: LD_VAR 0 2
74676: PPUSH
74677: CALL_OW 312
74681: IFFALSE 74692
// ComUnlink ( i ) ;
74683: LD_VAR 0 2
74687: PPUSH
74688: CALL_OW 136
74692: GO 74669
74694: POP
74695: POP
// end ;
74696: PPOPN 2
74698: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
74699: LD_EXP 79
74703: PUSH
74704: LD_EXP 110
74708: AND
74709: IFFALSE 74849
74711: GO 74713
74713: DISABLE
74714: LD_INT 0
74716: PPUSH
74717: PPUSH
// begin ToLua ( displayPowell(); ) ;
74718: LD_STRING displayPowell();
74720: PPUSH
74721: CALL_OW 559
// uc_side := 0 ;
74725: LD_ADDR_OWVAR 20
74729: PUSH
74730: LD_INT 0
74732: ST_TO_ADDR
// uc_nation := 2 ;
74733: LD_ADDR_OWVAR 21
74737: PUSH
74738: LD_INT 2
74740: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
74741: LD_ADDR_OWVAR 37
74745: PUSH
74746: LD_INT 14
74748: ST_TO_ADDR
// vc_engine := engine_siberite ;
74749: LD_ADDR_OWVAR 39
74753: PUSH
74754: LD_INT 3
74756: ST_TO_ADDR
// vc_control := control_apeman ;
74757: LD_ADDR_OWVAR 38
74761: PUSH
74762: LD_INT 5
74764: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
74765: LD_ADDR_OWVAR 40
74769: PUSH
74770: LD_INT 29
74772: ST_TO_ADDR
// un := CreateVehicle ;
74773: LD_ADDR_VAR 0 2
74777: PUSH
74778: CALL_OW 45
74782: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
74783: LD_VAR 0 2
74787: PPUSH
74788: LD_INT 1
74790: PPUSH
74791: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
74795: LD_INT 35
74797: PPUSH
74798: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
74802: LD_VAR 0 2
74806: PPUSH
74807: LD_INT 22
74809: PUSH
74810: LD_OWVAR 2
74814: PUSH
74815: EMPTY
74816: LIST
74817: LIST
74818: PPUSH
74819: CALL_OW 69
74823: PPUSH
74824: LD_VAR 0 2
74828: PPUSH
74829: CALL_OW 74
74833: PPUSH
74834: CALL_OW 115
// until IsDead ( un ) ;
74838: LD_VAR 0 2
74842: PPUSH
74843: CALL_OW 301
74847: IFFALSE 74795
// end ;
74849: PPOPN 2
74851: END
// every 0 0$1 trigger StreamModeActive and sStu do
74852: LD_EXP 79
74856: PUSH
74857: LD_EXP 118
74861: AND
74862: IFFALSE 74878
74864: GO 74866
74866: DISABLE
// begin ToLua ( displayStucuk(); ) ;
74867: LD_STRING displayStucuk();
74869: PPUSH
74870: CALL_OW 559
// ResetFog ;
74874: CALL_OW 335
// end ;
74878: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
74879: LD_EXP 79
74883: PUSH
74884: LD_EXP 111
74888: AND
74889: IFFALSE 75030
74891: GO 74893
74893: DISABLE
74894: LD_INT 0
74896: PPUSH
74897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
74898: LD_ADDR_VAR 0 2
74902: PUSH
74903: LD_INT 22
74905: PUSH
74906: LD_OWVAR 2
74910: PUSH
74911: EMPTY
74912: LIST
74913: LIST
74914: PUSH
74915: LD_INT 21
74917: PUSH
74918: LD_INT 1
74920: PUSH
74921: EMPTY
74922: LIST
74923: LIST
74924: PUSH
74925: EMPTY
74926: LIST
74927: LIST
74928: PPUSH
74929: CALL_OW 69
74933: ST_TO_ADDR
// if not tmp then
74934: LD_VAR 0 2
74938: NOT
74939: IFFALSE 74943
// exit ;
74941: GO 75030
// un := tmp [ rand ( 1 , tmp ) ] ;
74943: LD_ADDR_VAR 0 1
74947: PUSH
74948: LD_VAR 0 2
74952: PUSH
74953: LD_INT 1
74955: PPUSH
74956: LD_VAR 0 2
74960: PPUSH
74961: CALL_OW 12
74965: ARRAY
74966: ST_TO_ADDR
// SetSide ( un , 0 ) ;
74967: LD_VAR 0 1
74971: PPUSH
74972: LD_INT 0
74974: PPUSH
74975: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
74979: LD_VAR 0 1
74983: PPUSH
74984: LD_OWVAR 3
74988: PUSH
74989: LD_VAR 0 1
74993: DIFF
74994: PPUSH
74995: LD_VAR 0 1
74999: PPUSH
75000: CALL_OW 74
75004: PPUSH
75005: CALL_OW 115
// wait ( 0 0$20 ) ;
75009: LD_INT 700
75011: PPUSH
75012: CALL_OW 67
// SetSide ( un , your_side ) ;
75016: LD_VAR 0 1
75020: PPUSH
75021: LD_OWVAR 2
75025: PPUSH
75026: CALL_OW 235
// end ;
75030: PPOPN 2
75032: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
75033: LD_EXP 79
75037: PUSH
75038: LD_EXP 112
75042: AND
75043: IFFALSE 75149
75045: GO 75047
75047: DISABLE
75048: LD_INT 0
75050: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75051: LD_ADDR_VAR 0 1
75055: PUSH
75056: LD_INT 22
75058: PUSH
75059: LD_OWVAR 2
75063: PUSH
75064: EMPTY
75065: LIST
75066: LIST
75067: PUSH
75068: LD_INT 2
75070: PUSH
75071: LD_INT 30
75073: PUSH
75074: LD_INT 0
75076: PUSH
75077: EMPTY
75078: LIST
75079: LIST
75080: PUSH
75081: LD_INT 30
75083: PUSH
75084: LD_INT 1
75086: PUSH
75087: EMPTY
75088: LIST
75089: LIST
75090: PUSH
75091: EMPTY
75092: LIST
75093: LIST
75094: LIST
75095: PUSH
75096: EMPTY
75097: LIST
75098: LIST
75099: PPUSH
75100: CALL_OW 69
75104: ST_TO_ADDR
// if not depot then
75105: LD_VAR 0 1
75109: NOT
75110: IFFALSE 75114
// exit ;
75112: GO 75149
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
75114: LD_VAR 0 1
75118: PUSH
75119: LD_INT 1
75121: ARRAY
75122: PPUSH
75123: CALL_OW 250
75127: PPUSH
75128: LD_VAR 0 1
75132: PUSH
75133: LD_INT 1
75135: ARRAY
75136: PPUSH
75137: CALL_OW 251
75141: PPUSH
75142: LD_INT 70
75144: PPUSH
75145: CALL_OW 495
// end ;
75149: PPOPN 1
75151: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
75152: LD_EXP 79
75156: PUSH
75157: LD_EXP 113
75161: AND
75162: IFFALSE 75373
75164: GO 75166
75166: DISABLE
75167: LD_INT 0
75169: PPUSH
75170: PPUSH
75171: PPUSH
75172: PPUSH
75173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
75174: LD_ADDR_VAR 0 5
75178: PUSH
75179: LD_INT 22
75181: PUSH
75182: LD_OWVAR 2
75186: PUSH
75187: EMPTY
75188: LIST
75189: LIST
75190: PUSH
75191: LD_INT 21
75193: PUSH
75194: LD_INT 1
75196: PUSH
75197: EMPTY
75198: LIST
75199: LIST
75200: PUSH
75201: EMPTY
75202: LIST
75203: LIST
75204: PPUSH
75205: CALL_OW 69
75209: ST_TO_ADDR
// if not tmp then
75210: LD_VAR 0 5
75214: NOT
75215: IFFALSE 75219
// exit ;
75217: GO 75373
// for i in tmp do
75219: LD_ADDR_VAR 0 1
75223: PUSH
75224: LD_VAR 0 5
75228: PUSH
75229: FOR_IN
75230: IFFALSE 75371
// begin d := rand ( 0 , 5 ) ;
75232: LD_ADDR_VAR 0 4
75236: PUSH
75237: LD_INT 0
75239: PPUSH
75240: LD_INT 5
75242: PPUSH
75243: CALL_OW 12
75247: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
75248: LD_ADDR_VAR 0 2
75252: PUSH
75253: LD_VAR 0 1
75257: PPUSH
75258: CALL_OW 250
75262: PPUSH
75263: LD_VAR 0 4
75267: PPUSH
75268: LD_INT 3
75270: PPUSH
75271: LD_INT 12
75273: PPUSH
75274: CALL_OW 12
75278: PPUSH
75279: CALL_OW 272
75283: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
75284: LD_ADDR_VAR 0 3
75288: PUSH
75289: LD_VAR 0 1
75293: PPUSH
75294: CALL_OW 251
75298: PPUSH
75299: LD_VAR 0 4
75303: PPUSH
75304: LD_INT 3
75306: PPUSH
75307: LD_INT 12
75309: PPUSH
75310: CALL_OW 12
75314: PPUSH
75315: CALL_OW 273
75319: ST_TO_ADDR
// if ValidHex ( x , y ) then
75320: LD_VAR 0 2
75324: PPUSH
75325: LD_VAR 0 3
75329: PPUSH
75330: CALL_OW 488
75334: IFFALSE 75369
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
75336: LD_VAR 0 1
75340: PPUSH
75341: LD_VAR 0 2
75345: PPUSH
75346: LD_VAR 0 3
75350: PPUSH
75351: LD_INT 3
75353: PPUSH
75354: LD_INT 6
75356: PPUSH
75357: CALL_OW 12
75361: PPUSH
75362: LD_INT 1
75364: PPUSH
75365: CALL_OW 483
// end ;
75369: GO 75229
75371: POP
75372: POP
// end ;
75373: PPOPN 5
75375: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
75376: LD_EXP 79
75380: PUSH
75381: LD_EXP 114
75385: AND
75386: IFFALSE 75480
75388: GO 75390
75390: DISABLE
75391: LD_INT 0
75393: PPUSH
75394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
75395: LD_ADDR_VAR 0 2
75399: PUSH
75400: LD_INT 22
75402: PUSH
75403: LD_OWVAR 2
75407: PUSH
75408: EMPTY
75409: LIST
75410: LIST
75411: PUSH
75412: LD_INT 32
75414: PUSH
75415: LD_INT 1
75417: PUSH
75418: EMPTY
75419: LIST
75420: LIST
75421: PUSH
75422: LD_INT 21
75424: PUSH
75425: LD_INT 2
75427: PUSH
75428: EMPTY
75429: LIST
75430: LIST
75431: PUSH
75432: EMPTY
75433: LIST
75434: LIST
75435: LIST
75436: PPUSH
75437: CALL_OW 69
75441: ST_TO_ADDR
// if not tmp then
75442: LD_VAR 0 2
75446: NOT
75447: IFFALSE 75451
// exit ;
75449: GO 75480
// for i in tmp do
75451: LD_ADDR_VAR 0 1
75455: PUSH
75456: LD_VAR 0 2
75460: PUSH
75461: FOR_IN
75462: IFFALSE 75478
// SetFuel ( i , 0 ) ;
75464: LD_VAR 0 1
75468: PPUSH
75469: LD_INT 0
75471: PPUSH
75472: CALL_OW 240
75476: GO 75461
75478: POP
75479: POP
// end ;
75480: PPOPN 2
75482: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
75483: LD_EXP 79
75487: PUSH
75488: LD_EXP 115
75492: AND
75493: IFFALSE 75559
75495: GO 75497
75497: DISABLE
75498: LD_INT 0
75500: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
75501: LD_ADDR_VAR 0 1
75505: PUSH
75506: LD_INT 22
75508: PUSH
75509: LD_OWVAR 2
75513: PUSH
75514: EMPTY
75515: LIST
75516: LIST
75517: PUSH
75518: LD_INT 30
75520: PUSH
75521: LD_INT 29
75523: PUSH
75524: EMPTY
75525: LIST
75526: LIST
75527: PUSH
75528: EMPTY
75529: LIST
75530: LIST
75531: PPUSH
75532: CALL_OW 69
75536: ST_TO_ADDR
// if not tmp then
75537: LD_VAR 0 1
75541: NOT
75542: IFFALSE 75546
// exit ;
75544: GO 75559
// DestroyUnit ( tmp [ 1 ] ) ;
75546: LD_VAR 0 1
75550: PUSH
75551: LD_INT 1
75553: ARRAY
75554: PPUSH
75555: CALL_OW 65
// end ;
75559: PPOPN 1
75561: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
75562: LD_EXP 79
75566: PUSH
75567: LD_EXP 117
75571: AND
75572: IFFALSE 75701
75574: GO 75576
75576: DISABLE
75577: LD_INT 0
75579: PPUSH
// begin uc_side := 0 ;
75580: LD_ADDR_OWVAR 20
75584: PUSH
75585: LD_INT 0
75587: ST_TO_ADDR
// uc_nation := nation_arabian ;
75588: LD_ADDR_OWVAR 21
75592: PUSH
75593: LD_INT 2
75595: ST_TO_ADDR
// hc_gallery :=  ;
75596: LD_ADDR_OWVAR 33
75600: PUSH
75601: LD_STRING 
75603: ST_TO_ADDR
// hc_name :=  ;
75604: LD_ADDR_OWVAR 26
75608: PUSH
75609: LD_STRING 
75611: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
75612: LD_INT 1
75614: PPUSH
75615: LD_INT 11
75617: PPUSH
75618: LD_INT 10
75620: PPUSH
75621: CALL_OW 380
// un := CreateHuman ;
75625: LD_ADDR_VAR 0 1
75629: PUSH
75630: CALL_OW 44
75634: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
75635: LD_VAR 0 1
75639: PPUSH
75640: LD_INT 1
75642: PPUSH
75643: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
75647: LD_INT 35
75649: PPUSH
75650: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
75654: LD_VAR 0 1
75658: PPUSH
75659: LD_INT 22
75661: PUSH
75662: LD_OWVAR 2
75666: PUSH
75667: EMPTY
75668: LIST
75669: LIST
75670: PPUSH
75671: CALL_OW 69
75675: PPUSH
75676: LD_VAR 0 1
75680: PPUSH
75681: CALL_OW 74
75685: PPUSH
75686: CALL_OW 115
// until IsDead ( un ) ;
75690: LD_VAR 0 1
75694: PPUSH
75695: CALL_OW 301
75699: IFFALSE 75647
// end ;
75701: PPOPN 1
75703: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
75704: LD_EXP 79
75708: PUSH
75709: LD_EXP 119
75713: AND
75714: IFFALSE 75726
75716: GO 75718
75718: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
75719: LD_STRING earthquake(getX(game), 0, 32)
75721: PPUSH
75722: CALL_OW 559
75726: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
75727: LD_EXP 79
75731: PUSH
75732: LD_EXP 120
75736: AND
75737: IFFALSE 75828
75739: GO 75741
75741: DISABLE
75742: LD_INT 0
75744: PPUSH
// begin enable ;
75745: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
75746: LD_ADDR_VAR 0 1
75750: PUSH
75751: LD_INT 22
75753: PUSH
75754: LD_OWVAR 2
75758: PUSH
75759: EMPTY
75760: LIST
75761: LIST
75762: PUSH
75763: LD_INT 21
75765: PUSH
75766: LD_INT 2
75768: PUSH
75769: EMPTY
75770: LIST
75771: LIST
75772: PUSH
75773: LD_INT 33
75775: PUSH
75776: LD_INT 3
75778: PUSH
75779: EMPTY
75780: LIST
75781: LIST
75782: PUSH
75783: EMPTY
75784: LIST
75785: LIST
75786: LIST
75787: PPUSH
75788: CALL_OW 69
75792: ST_TO_ADDR
// if not tmp then
75793: LD_VAR 0 1
75797: NOT
75798: IFFALSE 75802
// exit ;
75800: GO 75828
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
75802: LD_VAR 0 1
75806: PUSH
75807: LD_INT 1
75809: PPUSH
75810: LD_VAR 0 1
75814: PPUSH
75815: CALL_OW 12
75819: ARRAY
75820: PPUSH
75821: LD_INT 1
75823: PPUSH
75824: CALL_OW 234
// end ;
75828: PPOPN 1
75830: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
75831: LD_EXP 79
75835: PUSH
75836: LD_EXP 121
75840: AND
75841: IFFALSE 75982
75843: GO 75845
75845: DISABLE
75846: LD_INT 0
75848: PPUSH
75849: PPUSH
75850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75851: LD_ADDR_VAR 0 3
75855: PUSH
75856: LD_INT 22
75858: PUSH
75859: LD_OWVAR 2
75863: PUSH
75864: EMPTY
75865: LIST
75866: LIST
75867: PUSH
75868: LD_INT 25
75870: PUSH
75871: LD_INT 1
75873: PUSH
75874: EMPTY
75875: LIST
75876: LIST
75877: PUSH
75878: EMPTY
75879: LIST
75880: LIST
75881: PPUSH
75882: CALL_OW 69
75886: ST_TO_ADDR
// if not tmp then
75887: LD_VAR 0 3
75891: NOT
75892: IFFALSE 75896
// exit ;
75894: GO 75982
// un := tmp [ rand ( 1 , tmp ) ] ;
75896: LD_ADDR_VAR 0 2
75900: PUSH
75901: LD_VAR 0 3
75905: PUSH
75906: LD_INT 1
75908: PPUSH
75909: LD_VAR 0 3
75913: PPUSH
75914: CALL_OW 12
75918: ARRAY
75919: ST_TO_ADDR
// if Crawls ( un ) then
75920: LD_VAR 0 2
75924: PPUSH
75925: CALL_OW 318
75929: IFFALSE 75940
// ComWalk ( un ) ;
75931: LD_VAR 0 2
75935: PPUSH
75936: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
75940: LD_VAR 0 2
75944: PPUSH
75945: LD_INT 9
75947: PPUSH
75948: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
75952: LD_INT 28
75954: PPUSH
75955: LD_OWVAR 2
75959: PPUSH
75960: LD_INT 2
75962: PPUSH
75963: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
75967: LD_INT 29
75969: PPUSH
75970: LD_OWVAR 2
75974: PPUSH
75975: LD_INT 2
75977: PPUSH
75978: CALL_OW 322
// end ;
75982: PPOPN 3
75984: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
75985: LD_EXP 79
75989: PUSH
75990: LD_EXP 122
75994: AND
75995: IFFALSE 76106
75997: GO 75999
75999: DISABLE
76000: LD_INT 0
76002: PPUSH
76003: PPUSH
76004: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
76005: LD_ADDR_VAR 0 3
76009: PUSH
76010: LD_INT 22
76012: PUSH
76013: LD_OWVAR 2
76017: PUSH
76018: EMPTY
76019: LIST
76020: LIST
76021: PUSH
76022: LD_INT 25
76024: PUSH
76025: LD_INT 1
76027: PUSH
76028: EMPTY
76029: LIST
76030: LIST
76031: PUSH
76032: EMPTY
76033: LIST
76034: LIST
76035: PPUSH
76036: CALL_OW 69
76040: ST_TO_ADDR
// if not tmp then
76041: LD_VAR 0 3
76045: NOT
76046: IFFALSE 76050
// exit ;
76048: GO 76106
// un := tmp [ rand ( 1 , tmp ) ] ;
76050: LD_ADDR_VAR 0 2
76054: PUSH
76055: LD_VAR 0 3
76059: PUSH
76060: LD_INT 1
76062: PPUSH
76063: LD_VAR 0 3
76067: PPUSH
76068: CALL_OW 12
76072: ARRAY
76073: ST_TO_ADDR
// if Crawls ( un ) then
76074: LD_VAR 0 2
76078: PPUSH
76079: CALL_OW 318
76083: IFFALSE 76094
// ComWalk ( un ) ;
76085: LD_VAR 0 2
76089: PPUSH
76090: CALL_OW 138
// SetClass ( un , class_mortar ) ;
76094: LD_VAR 0 2
76098: PPUSH
76099: LD_INT 8
76101: PPUSH
76102: CALL_OW 336
// end ;
76106: PPOPN 3
76108: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
76109: LD_EXP 79
76113: PUSH
76114: LD_EXP 123
76118: AND
76119: IFFALSE 76263
76121: GO 76123
76123: DISABLE
76124: LD_INT 0
76126: PPUSH
76127: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
76128: LD_ADDR_VAR 0 2
76132: PUSH
76133: LD_INT 22
76135: PUSH
76136: LD_OWVAR 2
76140: PUSH
76141: EMPTY
76142: LIST
76143: LIST
76144: PUSH
76145: LD_INT 21
76147: PUSH
76148: LD_INT 2
76150: PUSH
76151: EMPTY
76152: LIST
76153: LIST
76154: PUSH
76155: LD_INT 2
76157: PUSH
76158: LD_INT 34
76160: PUSH
76161: LD_INT 12
76163: PUSH
76164: EMPTY
76165: LIST
76166: LIST
76167: PUSH
76168: LD_INT 34
76170: PUSH
76171: LD_INT 51
76173: PUSH
76174: EMPTY
76175: LIST
76176: LIST
76177: PUSH
76178: LD_INT 34
76180: PUSH
76181: LD_INT 32
76183: PUSH
76184: EMPTY
76185: LIST
76186: LIST
76187: PUSH
76188: EMPTY
76189: LIST
76190: LIST
76191: LIST
76192: LIST
76193: PUSH
76194: EMPTY
76195: LIST
76196: LIST
76197: LIST
76198: PPUSH
76199: CALL_OW 69
76203: ST_TO_ADDR
// if not tmp then
76204: LD_VAR 0 2
76208: NOT
76209: IFFALSE 76213
// exit ;
76211: GO 76263
// for i in tmp do
76213: LD_ADDR_VAR 0 1
76217: PUSH
76218: LD_VAR 0 2
76222: PUSH
76223: FOR_IN
76224: IFFALSE 76261
// if GetCargo ( i , mat_artifact ) = 0 then
76226: LD_VAR 0 1
76230: PPUSH
76231: LD_INT 4
76233: PPUSH
76234: CALL_OW 289
76238: PUSH
76239: LD_INT 0
76241: EQUAL
76242: IFFALSE 76259
// SetCargo ( i , mat_siberit , 100 ) ;
76244: LD_VAR 0 1
76248: PPUSH
76249: LD_INT 3
76251: PPUSH
76252: LD_INT 100
76254: PPUSH
76255: CALL_OW 290
76259: GO 76223
76261: POP
76262: POP
// end ;
76263: PPOPN 2
76265: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
76266: LD_EXP 79
76270: PUSH
76271: LD_EXP 124
76275: AND
76276: IFFALSE 76459
76278: GO 76280
76280: DISABLE
76281: LD_INT 0
76283: PPUSH
76284: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
76285: LD_ADDR_VAR 0 2
76289: PUSH
76290: LD_INT 22
76292: PUSH
76293: LD_OWVAR 2
76297: PUSH
76298: EMPTY
76299: LIST
76300: LIST
76301: PPUSH
76302: CALL_OW 69
76306: ST_TO_ADDR
// if not tmp then
76307: LD_VAR 0 2
76311: NOT
76312: IFFALSE 76316
// exit ;
76314: GO 76459
// for i := 1 to 2 do
76316: LD_ADDR_VAR 0 1
76320: PUSH
76321: DOUBLE
76322: LD_INT 1
76324: DEC
76325: ST_TO_ADDR
76326: LD_INT 2
76328: PUSH
76329: FOR_TO
76330: IFFALSE 76457
// begin uc_side := your_side ;
76332: LD_ADDR_OWVAR 20
76336: PUSH
76337: LD_OWVAR 2
76341: ST_TO_ADDR
// uc_nation := nation_american ;
76342: LD_ADDR_OWVAR 21
76346: PUSH
76347: LD_INT 1
76349: ST_TO_ADDR
// vc_chassis := us_morphling ;
76350: LD_ADDR_OWVAR 37
76354: PUSH
76355: LD_INT 5
76357: ST_TO_ADDR
// vc_engine := engine_siberite ;
76358: LD_ADDR_OWVAR 39
76362: PUSH
76363: LD_INT 3
76365: ST_TO_ADDR
// vc_control := control_computer ;
76366: LD_ADDR_OWVAR 38
76370: PUSH
76371: LD_INT 3
76373: ST_TO_ADDR
// vc_weapon := us_double_laser ;
76374: LD_ADDR_OWVAR 40
76378: PUSH
76379: LD_INT 10
76381: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
76382: LD_VAR 0 2
76386: PUSH
76387: LD_INT 1
76389: ARRAY
76390: PPUSH
76391: CALL_OW 310
76395: NOT
76396: IFFALSE 76443
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
76398: CALL_OW 45
76402: PPUSH
76403: LD_VAR 0 2
76407: PUSH
76408: LD_INT 1
76410: ARRAY
76411: PPUSH
76412: CALL_OW 250
76416: PPUSH
76417: LD_VAR 0 2
76421: PUSH
76422: LD_INT 1
76424: ARRAY
76425: PPUSH
76426: CALL_OW 251
76430: PPUSH
76431: LD_INT 12
76433: PPUSH
76434: LD_INT 1
76436: PPUSH
76437: CALL_OW 50
76441: GO 76455
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
76443: CALL_OW 45
76447: PPUSH
76448: LD_INT 1
76450: PPUSH
76451: CALL_OW 51
// end ;
76455: GO 76329
76457: POP
76458: POP
// end ;
76459: PPOPN 2
76461: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
76462: LD_EXP 79
76466: PUSH
76467: LD_EXP 125
76471: AND
76472: IFFALSE 76694
76474: GO 76476
76476: DISABLE
76477: LD_INT 0
76479: PPUSH
76480: PPUSH
76481: PPUSH
76482: PPUSH
76483: PPUSH
76484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
76485: LD_ADDR_VAR 0 6
76489: PUSH
76490: LD_INT 22
76492: PUSH
76493: LD_OWVAR 2
76497: PUSH
76498: EMPTY
76499: LIST
76500: LIST
76501: PUSH
76502: LD_INT 21
76504: PUSH
76505: LD_INT 1
76507: PUSH
76508: EMPTY
76509: LIST
76510: LIST
76511: PUSH
76512: LD_INT 3
76514: PUSH
76515: LD_INT 23
76517: PUSH
76518: LD_INT 0
76520: PUSH
76521: EMPTY
76522: LIST
76523: LIST
76524: PUSH
76525: EMPTY
76526: LIST
76527: LIST
76528: PUSH
76529: EMPTY
76530: LIST
76531: LIST
76532: LIST
76533: PPUSH
76534: CALL_OW 69
76538: ST_TO_ADDR
// if not tmp then
76539: LD_VAR 0 6
76543: NOT
76544: IFFALSE 76548
// exit ;
76546: GO 76694
// s1 := rand ( 1 , 4 ) ;
76548: LD_ADDR_VAR 0 2
76552: PUSH
76553: LD_INT 1
76555: PPUSH
76556: LD_INT 4
76558: PPUSH
76559: CALL_OW 12
76563: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
76564: LD_ADDR_VAR 0 4
76568: PUSH
76569: LD_VAR 0 6
76573: PUSH
76574: LD_INT 1
76576: ARRAY
76577: PPUSH
76578: LD_VAR 0 2
76582: PPUSH
76583: CALL_OW 259
76587: ST_TO_ADDR
// if s1 = 1 then
76588: LD_VAR 0 2
76592: PUSH
76593: LD_INT 1
76595: EQUAL
76596: IFFALSE 76616
// s2 := rand ( 2 , 4 ) else
76598: LD_ADDR_VAR 0 3
76602: PUSH
76603: LD_INT 2
76605: PPUSH
76606: LD_INT 4
76608: PPUSH
76609: CALL_OW 12
76613: ST_TO_ADDR
76614: GO 76624
// s2 := 1 ;
76616: LD_ADDR_VAR 0 3
76620: PUSH
76621: LD_INT 1
76623: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
76624: LD_ADDR_VAR 0 5
76628: PUSH
76629: LD_VAR 0 6
76633: PUSH
76634: LD_INT 1
76636: ARRAY
76637: PPUSH
76638: LD_VAR 0 3
76642: PPUSH
76643: CALL_OW 259
76647: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
76648: LD_VAR 0 6
76652: PUSH
76653: LD_INT 1
76655: ARRAY
76656: PPUSH
76657: LD_VAR 0 2
76661: PPUSH
76662: LD_VAR 0 5
76666: PPUSH
76667: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
76671: LD_VAR 0 6
76675: PUSH
76676: LD_INT 1
76678: ARRAY
76679: PPUSH
76680: LD_VAR 0 3
76684: PPUSH
76685: LD_VAR 0 4
76689: PPUSH
76690: CALL_OW 237
// end ;
76694: PPOPN 6
76696: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
76697: LD_EXP 79
76701: PUSH
76702: LD_EXP 126
76706: AND
76707: IFFALSE 76786
76709: GO 76711
76711: DISABLE
76712: LD_INT 0
76714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
76715: LD_ADDR_VAR 0 1
76719: PUSH
76720: LD_INT 22
76722: PUSH
76723: LD_OWVAR 2
76727: PUSH
76728: EMPTY
76729: LIST
76730: LIST
76731: PUSH
76732: LD_INT 30
76734: PUSH
76735: LD_INT 3
76737: PUSH
76738: EMPTY
76739: LIST
76740: LIST
76741: PUSH
76742: EMPTY
76743: LIST
76744: LIST
76745: PPUSH
76746: CALL_OW 69
76750: ST_TO_ADDR
// if not tmp then
76751: LD_VAR 0 1
76755: NOT
76756: IFFALSE 76760
// exit ;
76758: GO 76786
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
76760: LD_VAR 0 1
76764: PUSH
76765: LD_INT 1
76767: PPUSH
76768: LD_VAR 0 1
76772: PPUSH
76773: CALL_OW 12
76777: ARRAY
76778: PPUSH
76779: LD_INT 1
76781: PPUSH
76782: CALL_OW 234
// end ;
76786: PPOPN 1
76788: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
76789: LD_EXP 79
76793: PUSH
76794: LD_EXP 127
76798: AND
76799: IFFALSE 76911
76801: GO 76803
76803: DISABLE
76804: LD_INT 0
76806: PPUSH
76807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
76808: LD_ADDR_VAR 0 2
76812: PUSH
76813: LD_INT 22
76815: PUSH
76816: LD_OWVAR 2
76820: PUSH
76821: EMPTY
76822: LIST
76823: LIST
76824: PUSH
76825: LD_INT 2
76827: PUSH
76828: LD_INT 30
76830: PUSH
76831: LD_INT 27
76833: PUSH
76834: EMPTY
76835: LIST
76836: LIST
76837: PUSH
76838: LD_INT 30
76840: PUSH
76841: LD_INT 26
76843: PUSH
76844: EMPTY
76845: LIST
76846: LIST
76847: PUSH
76848: LD_INT 30
76850: PUSH
76851: LD_INT 28
76853: PUSH
76854: EMPTY
76855: LIST
76856: LIST
76857: PUSH
76858: EMPTY
76859: LIST
76860: LIST
76861: LIST
76862: LIST
76863: PUSH
76864: EMPTY
76865: LIST
76866: LIST
76867: PPUSH
76868: CALL_OW 69
76872: ST_TO_ADDR
// if not tmp then
76873: LD_VAR 0 2
76877: NOT
76878: IFFALSE 76882
// exit ;
76880: GO 76911
// for i in tmp do
76882: LD_ADDR_VAR 0 1
76886: PUSH
76887: LD_VAR 0 2
76891: PUSH
76892: FOR_IN
76893: IFFALSE 76909
// SetLives ( i , 1 ) ;
76895: LD_VAR 0 1
76899: PPUSH
76900: LD_INT 1
76902: PPUSH
76903: CALL_OW 234
76907: GO 76892
76909: POP
76910: POP
// end ;
76911: PPOPN 2
76913: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
76914: LD_EXP 79
76918: PUSH
76919: LD_EXP 128
76923: AND
76924: IFFALSE 77211
76926: GO 76928
76928: DISABLE
76929: LD_INT 0
76931: PPUSH
76932: PPUSH
76933: PPUSH
// begin i := rand ( 1 , 7 ) ;
76934: LD_ADDR_VAR 0 1
76938: PUSH
76939: LD_INT 1
76941: PPUSH
76942: LD_INT 7
76944: PPUSH
76945: CALL_OW 12
76949: ST_TO_ADDR
// case i of 1 :
76950: LD_VAR 0 1
76954: PUSH
76955: LD_INT 1
76957: DOUBLE
76958: EQUAL
76959: IFTRUE 76963
76961: GO 76973
76963: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
76964: LD_STRING earthquake(getX(game), 0, 32)
76966: PPUSH
76967: CALL_OW 559
76971: GO 77211
76973: LD_INT 2
76975: DOUBLE
76976: EQUAL
76977: IFTRUE 76981
76979: GO 76995
76981: POP
// begin ToLua ( displayStucuk(); ) ;
76982: LD_STRING displayStucuk();
76984: PPUSH
76985: CALL_OW 559
// ResetFog ;
76989: CALL_OW 335
// end ; 3 :
76993: GO 77211
76995: LD_INT 3
76997: DOUBLE
76998: EQUAL
76999: IFTRUE 77003
77001: GO 77107
77003: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77004: LD_ADDR_VAR 0 2
77008: PUSH
77009: LD_INT 22
77011: PUSH
77012: LD_OWVAR 2
77016: PUSH
77017: EMPTY
77018: LIST
77019: LIST
77020: PUSH
77021: LD_INT 25
77023: PUSH
77024: LD_INT 1
77026: PUSH
77027: EMPTY
77028: LIST
77029: LIST
77030: PUSH
77031: EMPTY
77032: LIST
77033: LIST
77034: PPUSH
77035: CALL_OW 69
77039: ST_TO_ADDR
// if not tmp then
77040: LD_VAR 0 2
77044: NOT
77045: IFFALSE 77049
// exit ;
77047: GO 77211
// un := tmp [ rand ( 1 , tmp ) ] ;
77049: LD_ADDR_VAR 0 3
77053: PUSH
77054: LD_VAR 0 2
77058: PUSH
77059: LD_INT 1
77061: PPUSH
77062: LD_VAR 0 2
77066: PPUSH
77067: CALL_OW 12
77071: ARRAY
77072: ST_TO_ADDR
// if Crawls ( un ) then
77073: LD_VAR 0 3
77077: PPUSH
77078: CALL_OW 318
77082: IFFALSE 77093
// ComWalk ( un ) ;
77084: LD_VAR 0 3
77088: PPUSH
77089: CALL_OW 138
// SetClass ( un , class_mortar ) ;
77093: LD_VAR 0 3
77097: PPUSH
77098: LD_INT 8
77100: PPUSH
77101: CALL_OW 336
// end ; 4 :
77105: GO 77211
77107: LD_INT 4
77109: DOUBLE
77110: EQUAL
77111: IFTRUE 77115
77113: GO 77189
77115: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
77116: LD_ADDR_VAR 0 2
77120: PUSH
77121: LD_INT 22
77123: PUSH
77124: LD_OWVAR 2
77128: PUSH
77129: EMPTY
77130: LIST
77131: LIST
77132: PUSH
77133: LD_INT 30
77135: PUSH
77136: LD_INT 29
77138: PUSH
77139: EMPTY
77140: LIST
77141: LIST
77142: PUSH
77143: EMPTY
77144: LIST
77145: LIST
77146: PPUSH
77147: CALL_OW 69
77151: ST_TO_ADDR
// if not tmp then
77152: LD_VAR 0 2
77156: NOT
77157: IFFALSE 77161
// exit ;
77159: GO 77211
// CenterNowOnUnits ( tmp [ 1 ] ) ;
77161: LD_VAR 0 2
77165: PUSH
77166: LD_INT 1
77168: ARRAY
77169: PPUSH
77170: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
77174: LD_VAR 0 2
77178: PUSH
77179: LD_INT 1
77181: ARRAY
77182: PPUSH
77183: CALL_OW 65
// end ; 5 .. 7 :
77187: GO 77211
77189: LD_INT 5
77191: DOUBLE
77192: GREATEREQUAL
77193: IFFALSE 77201
77195: LD_INT 7
77197: DOUBLE
77198: LESSEQUAL
77199: IFTRUE 77203
77201: GO 77210
77203: POP
// StreamSibBomb ; end ;
77204: CALL 73448 0 0
77208: GO 77211
77210: POP
// end ;
77211: PPOPN 3
77213: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
77214: LD_EXP 79
77218: PUSH
77219: LD_EXP 129
77223: AND
77224: IFFALSE 77380
77226: GO 77228
77228: DISABLE
77229: LD_INT 0
77231: PPUSH
77232: PPUSH
77233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
77234: LD_ADDR_VAR 0 2
77238: PUSH
77239: LD_INT 81
77241: PUSH
77242: LD_OWVAR 2
77246: PUSH
77247: EMPTY
77248: LIST
77249: LIST
77250: PUSH
77251: LD_INT 2
77253: PUSH
77254: LD_INT 21
77256: PUSH
77257: LD_INT 1
77259: PUSH
77260: EMPTY
77261: LIST
77262: LIST
77263: PUSH
77264: LD_INT 21
77266: PUSH
77267: LD_INT 2
77269: PUSH
77270: EMPTY
77271: LIST
77272: LIST
77273: PUSH
77274: EMPTY
77275: LIST
77276: LIST
77277: LIST
77278: PUSH
77279: EMPTY
77280: LIST
77281: LIST
77282: PPUSH
77283: CALL_OW 69
77287: ST_TO_ADDR
// if not tmp then
77288: LD_VAR 0 2
77292: NOT
77293: IFFALSE 77297
// exit ;
77295: GO 77380
// p := 0 ;
77297: LD_ADDR_VAR 0 3
77301: PUSH
77302: LD_INT 0
77304: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
77305: LD_INT 35
77307: PPUSH
77308: CALL_OW 67
// p := p + 1 ;
77312: LD_ADDR_VAR 0 3
77316: PUSH
77317: LD_VAR 0 3
77321: PUSH
77322: LD_INT 1
77324: PLUS
77325: ST_TO_ADDR
// for i in tmp do
77326: LD_ADDR_VAR 0 1
77330: PUSH
77331: LD_VAR 0 2
77335: PUSH
77336: FOR_IN
77337: IFFALSE 77368
// if GetLives ( i ) < 1000 then
77339: LD_VAR 0 1
77343: PPUSH
77344: CALL_OW 256
77348: PUSH
77349: LD_INT 1000
77351: LESS
77352: IFFALSE 77366
// SetLives ( i , 1000 ) ;
77354: LD_VAR 0 1
77358: PPUSH
77359: LD_INT 1000
77361: PPUSH
77362: CALL_OW 234
77366: GO 77336
77368: POP
77369: POP
// until p > 20 ;
77370: LD_VAR 0 3
77374: PUSH
77375: LD_INT 20
77377: GREATER
77378: IFFALSE 77305
// end ;
77380: PPOPN 3
77382: END
// every 0 0$1 trigger StreamModeActive and sTime do
77383: LD_EXP 79
77387: PUSH
77388: LD_EXP 130
77392: AND
77393: IFFALSE 77428
77395: GO 77397
77397: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
77398: LD_INT 28
77400: PPUSH
77401: LD_OWVAR 2
77405: PPUSH
77406: LD_INT 2
77408: PPUSH
77409: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
77413: LD_INT 30
77415: PPUSH
77416: LD_OWVAR 2
77420: PPUSH
77421: LD_INT 2
77423: PPUSH
77424: CALL_OW 322
// end ;
77428: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
77429: LD_EXP 79
77433: PUSH
77434: LD_EXP 131
77438: AND
77439: IFFALSE 77560
77441: GO 77443
77443: DISABLE
77444: LD_INT 0
77446: PPUSH
77447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
77448: LD_ADDR_VAR 0 2
77452: PUSH
77453: LD_INT 22
77455: PUSH
77456: LD_OWVAR 2
77460: PUSH
77461: EMPTY
77462: LIST
77463: LIST
77464: PUSH
77465: LD_INT 21
77467: PUSH
77468: LD_INT 1
77470: PUSH
77471: EMPTY
77472: LIST
77473: LIST
77474: PUSH
77475: LD_INT 3
77477: PUSH
77478: LD_INT 23
77480: PUSH
77481: LD_INT 0
77483: PUSH
77484: EMPTY
77485: LIST
77486: LIST
77487: PUSH
77488: EMPTY
77489: LIST
77490: LIST
77491: PUSH
77492: EMPTY
77493: LIST
77494: LIST
77495: LIST
77496: PPUSH
77497: CALL_OW 69
77501: ST_TO_ADDR
// if not tmp then
77502: LD_VAR 0 2
77506: NOT
77507: IFFALSE 77511
// exit ;
77509: GO 77560
// for i in tmp do
77511: LD_ADDR_VAR 0 1
77515: PUSH
77516: LD_VAR 0 2
77520: PUSH
77521: FOR_IN
77522: IFFALSE 77558
// begin if Crawls ( i ) then
77524: LD_VAR 0 1
77528: PPUSH
77529: CALL_OW 318
77533: IFFALSE 77544
// ComWalk ( i ) ;
77535: LD_VAR 0 1
77539: PPUSH
77540: CALL_OW 138
// SetClass ( i , 2 ) ;
77544: LD_VAR 0 1
77548: PPUSH
77549: LD_INT 2
77551: PPUSH
77552: CALL_OW 336
// end ;
77556: GO 77521
77558: POP
77559: POP
// end ;
77560: PPOPN 2
77562: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
77563: LD_EXP 79
77567: PUSH
77568: LD_EXP 132
77572: AND
77573: IFFALSE 77861
77575: GO 77577
77577: DISABLE
77578: LD_INT 0
77580: PPUSH
77581: PPUSH
77582: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
77583: LD_OWVAR 2
77587: PPUSH
77588: LD_INT 9
77590: PPUSH
77591: LD_INT 1
77593: PPUSH
77594: LD_INT 1
77596: PPUSH
77597: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
77601: LD_INT 9
77603: PPUSH
77604: LD_OWVAR 2
77608: PPUSH
77609: CALL_OW 343
// uc_side := 9 ;
77613: LD_ADDR_OWVAR 20
77617: PUSH
77618: LD_INT 9
77620: ST_TO_ADDR
// uc_nation := 2 ;
77621: LD_ADDR_OWVAR 21
77625: PUSH
77626: LD_INT 2
77628: ST_TO_ADDR
// hc_name := Dark Warrior ;
77629: LD_ADDR_OWVAR 26
77633: PUSH
77634: LD_STRING Dark Warrior
77636: ST_TO_ADDR
// hc_gallery :=  ;
77637: LD_ADDR_OWVAR 33
77641: PUSH
77642: LD_STRING 
77644: ST_TO_ADDR
// hc_noskilllimit := true ;
77645: LD_ADDR_OWVAR 76
77649: PUSH
77650: LD_INT 1
77652: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
77653: LD_ADDR_OWVAR 31
77657: PUSH
77658: LD_INT 30
77660: PUSH
77661: LD_INT 30
77663: PUSH
77664: LD_INT 30
77666: PUSH
77667: LD_INT 30
77669: PUSH
77670: EMPTY
77671: LIST
77672: LIST
77673: LIST
77674: LIST
77675: ST_TO_ADDR
// un := CreateHuman ;
77676: LD_ADDR_VAR 0 3
77680: PUSH
77681: CALL_OW 44
77685: ST_TO_ADDR
// hc_noskilllimit := false ;
77686: LD_ADDR_OWVAR 76
77690: PUSH
77691: LD_INT 0
77693: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
77694: LD_VAR 0 3
77698: PPUSH
77699: LD_INT 1
77701: PPUSH
77702: CALL_OW 51
// ToLua ( playRanger() ) ;
77706: LD_STRING playRanger()
77708: PPUSH
77709: CALL_OW 559
// p := 0 ;
77713: LD_ADDR_VAR 0 2
77717: PUSH
77718: LD_INT 0
77720: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
77721: LD_INT 35
77723: PPUSH
77724: CALL_OW 67
// p := p + 1 ;
77728: LD_ADDR_VAR 0 2
77732: PUSH
77733: LD_VAR 0 2
77737: PUSH
77738: LD_INT 1
77740: PLUS
77741: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
77742: LD_VAR 0 3
77746: PPUSH
77747: CALL_OW 256
77751: PUSH
77752: LD_INT 1000
77754: LESS
77755: IFFALSE 77769
// SetLives ( un , 1000 ) ;
77757: LD_VAR 0 3
77761: PPUSH
77762: LD_INT 1000
77764: PPUSH
77765: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
77769: LD_VAR 0 3
77773: PPUSH
77774: LD_INT 81
77776: PUSH
77777: LD_OWVAR 2
77781: PUSH
77782: EMPTY
77783: LIST
77784: LIST
77785: PUSH
77786: LD_INT 91
77788: PUSH
77789: LD_VAR 0 3
77793: PUSH
77794: LD_INT 30
77796: PUSH
77797: EMPTY
77798: LIST
77799: LIST
77800: LIST
77801: PUSH
77802: EMPTY
77803: LIST
77804: LIST
77805: PPUSH
77806: CALL_OW 69
77810: PPUSH
77811: LD_VAR 0 3
77815: PPUSH
77816: CALL_OW 74
77820: PPUSH
77821: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
77825: LD_VAR 0 2
77829: PUSH
77830: LD_INT 80
77832: GREATER
77833: PUSH
77834: LD_VAR 0 3
77838: PPUSH
77839: CALL_OW 301
77843: OR
77844: IFFALSE 77721
// if un then
77846: LD_VAR 0 3
77850: IFFALSE 77861
// RemoveUnit ( un ) ;
77852: LD_VAR 0 3
77856: PPUSH
77857: CALL_OW 64
// end ;
77861: PPOPN 3
77863: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
77864: LD_EXP 133
77868: IFFALSE 77984
77870: GO 77872
77872: DISABLE
77873: LD_INT 0
77875: PPUSH
77876: PPUSH
77877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
77878: LD_ADDR_VAR 0 2
77882: PUSH
77883: LD_INT 81
77885: PUSH
77886: LD_OWVAR 2
77890: PUSH
77891: EMPTY
77892: LIST
77893: LIST
77894: PUSH
77895: LD_INT 21
77897: PUSH
77898: LD_INT 1
77900: PUSH
77901: EMPTY
77902: LIST
77903: LIST
77904: PUSH
77905: EMPTY
77906: LIST
77907: LIST
77908: PPUSH
77909: CALL_OW 69
77913: ST_TO_ADDR
// ToLua ( playComputer() ) ;
77914: LD_STRING playComputer()
77916: PPUSH
77917: CALL_OW 559
// if not tmp then
77921: LD_VAR 0 2
77925: NOT
77926: IFFALSE 77930
// exit ;
77928: GO 77984
// for i in tmp do
77930: LD_ADDR_VAR 0 1
77934: PUSH
77935: LD_VAR 0 2
77939: PUSH
77940: FOR_IN
77941: IFFALSE 77982
// for j := 1 to 4 do
77943: LD_ADDR_VAR 0 3
77947: PUSH
77948: DOUBLE
77949: LD_INT 1
77951: DEC
77952: ST_TO_ADDR
77953: LD_INT 4
77955: PUSH
77956: FOR_TO
77957: IFFALSE 77978
// SetSkill ( i , j , 10 ) ;
77959: LD_VAR 0 1
77963: PPUSH
77964: LD_VAR 0 3
77968: PPUSH
77969: LD_INT 10
77971: PPUSH
77972: CALL_OW 237
77976: GO 77956
77978: POP
77979: POP
77980: GO 77940
77982: POP
77983: POP
// end ;
77984: PPOPN 3
77986: END
// every 0 0$1 trigger s30 do var i , tmp ;
77987: LD_EXP 134
77991: IFFALSE 78060
77993: GO 77995
77995: DISABLE
77996: LD_INT 0
77998: PPUSH
77999: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
78000: LD_ADDR_VAR 0 2
78004: PUSH
78005: LD_INT 22
78007: PUSH
78008: LD_OWVAR 2
78012: PUSH
78013: EMPTY
78014: LIST
78015: LIST
78016: PPUSH
78017: CALL_OW 69
78021: ST_TO_ADDR
// if not tmp then
78022: LD_VAR 0 2
78026: NOT
78027: IFFALSE 78031
// exit ;
78029: GO 78060
// for i in tmp do
78031: LD_ADDR_VAR 0 1
78035: PUSH
78036: LD_VAR 0 2
78040: PUSH
78041: FOR_IN
78042: IFFALSE 78058
// SetLives ( i , 300 ) ;
78044: LD_VAR 0 1
78048: PPUSH
78049: LD_INT 300
78051: PPUSH
78052: CALL_OW 234
78056: GO 78041
78058: POP
78059: POP
// end ;
78060: PPOPN 2
78062: END
// every 0 0$1 trigger s60 do var i , tmp ;
78063: LD_EXP 135
78067: IFFALSE 78136
78069: GO 78071
78071: DISABLE
78072: LD_INT 0
78074: PPUSH
78075: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
78076: LD_ADDR_VAR 0 2
78080: PUSH
78081: LD_INT 22
78083: PUSH
78084: LD_OWVAR 2
78088: PUSH
78089: EMPTY
78090: LIST
78091: LIST
78092: PPUSH
78093: CALL_OW 69
78097: ST_TO_ADDR
// if not tmp then
78098: LD_VAR 0 2
78102: NOT
78103: IFFALSE 78107
// exit ;
78105: GO 78136
// for i in tmp do
78107: LD_ADDR_VAR 0 1
78111: PUSH
78112: LD_VAR 0 2
78116: PUSH
78117: FOR_IN
78118: IFFALSE 78134
// SetLives ( i , 600 ) ;
78120: LD_VAR 0 1
78124: PPUSH
78125: LD_INT 600
78127: PPUSH
78128: CALL_OW 234
78132: GO 78117
78134: POP
78135: POP
// end ;
78136: PPOPN 2
78138: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
78139: LD_INT 0
78141: PPUSH
// case cmd of 301 :
78142: LD_VAR 0 1
78146: PUSH
78147: LD_INT 301
78149: DOUBLE
78150: EQUAL
78151: IFTRUE 78155
78153: GO 78187
78155: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
78156: LD_VAR 0 6
78160: PPUSH
78161: LD_VAR 0 7
78165: PPUSH
78166: LD_VAR 0 8
78170: PPUSH
78171: LD_VAR 0 4
78175: PPUSH
78176: LD_VAR 0 5
78180: PPUSH
78181: CALL 79388 0 5
78185: GO 78308
78187: LD_INT 302
78189: DOUBLE
78190: EQUAL
78191: IFTRUE 78195
78193: GO 78232
78195: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
78196: LD_VAR 0 6
78200: PPUSH
78201: LD_VAR 0 7
78205: PPUSH
78206: LD_VAR 0 8
78210: PPUSH
78211: LD_VAR 0 9
78215: PPUSH
78216: LD_VAR 0 4
78220: PPUSH
78221: LD_VAR 0 5
78225: PPUSH
78226: CALL 79479 0 6
78230: GO 78308
78232: LD_INT 303
78234: DOUBLE
78235: EQUAL
78236: IFTRUE 78240
78238: GO 78277
78240: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
78241: LD_VAR 0 6
78245: PPUSH
78246: LD_VAR 0 7
78250: PPUSH
78251: LD_VAR 0 8
78255: PPUSH
78256: LD_VAR 0 9
78260: PPUSH
78261: LD_VAR 0 4
78265: PPUSH
78266: LD_VAR 0 5
78270: PPUSH
78271: CALL 78313 0 6
78275: GO 78308
78277: LD_INT 304
78279: DOUBLE
78280: EQUAL
78281: IFTRUE 78285
78283: GO 78307
78285: POP
// hHackTeleport ( unit , x , y ) ; end ;
78286: LD_VAR 0 2
78290: PPUSH
78291: LD_VAR 0 4
78295: PPUSH
78296: LD_VAR 0 5
78300: PPUSH
78301: CALL 80072 0 3
78305: GO 78308
78307: POP
// end ;
78308: LD_VAR 0 12
78312: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
78313: LD_INT 0
78315: PPUSH
78316: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
78317: LD_VAR 0 1
78321: PUSH
78322: LD_INT 1
78324: LESS
78325: PUSH
78326: LD_VAR 0 1
78330: PUSH
78331: LD_INT 3
78333: GREATER
78334: OR
78335: PUSH
78336: LD_VAR 0 5
78340: PPUSH
78341: LD_VAR 0 6
78345: PPUSH
78346: CALL_OW 428
78350: OR
78351: IFFALSE 78355
// exit ;
78353: GO 79075
// uc_side := your_side ;
78355: LD_ADDR_OWVAR 20
78359: PUSH
78360: LD_OWVAR 2
78364: ST_TO_ADDR
// uc_nation := nation ;
78365: LD_ADDR_OWVAR 21
78369: PUSH
78370: LD_VAR 0 1
78374: ST_TO_ADDR
// bc_level = 1 ;
78375: LD_ADDR_OWVAR 43
78379: PUSH
78380: LD_INT 1
78382: ST_TO_ADDR
// case btype of 1 :
78383: LD_VAR 0 2
78387: PUSH
78388: LD_INT 1
78390: DOUBLE
78391: EQUAL
78392: IFTRUE 78396
78394: GO 78407
78396: POP
// bc_type := b_depot ; 2 :
78397: LD_ADDR_OWVAR 42
78401: PUSH
78402: LD_INT 0
78404: ST_TO_ADDR
78405: GO 79019
78407: LD_INT 2
78409: DOUBLE
78410: EQUAL
78411: IFTRUE 78415
78413: GO 78426
78415: POP
// bc_type := b_warehouse ; 3 :
78416: LD_ADDR_OWVAR 42
78420: PUSH
78421: LD_INT 1
78423: ST_TO_ADDR
78424: GO 79019
78426: LD_INT 3
78428: DOUBLE
78429: EQUAL
78430: IFTRUE 78434
78432: GO 78445
78434: POP
// bc_type := b_lab ; 4 .. 9 :
78435: LD_ADDR_OWVAR 42
78439: PUSH
78440: LD_INT 6
78442: ST_TO_ADDR
78443: GO 79019
78445: LD_INT 4
78447: DOUBLE
78448: GREATEREQUAL
78449: IFFALSE 78457
78451: LD_INT 9
78453: DOUBLE
78454: LESSEQUAL
78455: IFTRUE 78459
78457: GO 78511
78459: POP
// begin bc_type := b_lab_half ;
78460: LD_ADDR_OWVAR 42
78464: PUSH
78465: LD_INT 7
78467: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
78468: LD_ADDR_OWVAR 44
78472: PUSH
78473: LD_INT 10
78475: PUSH
78476: LD_INT 11
78478: PUSH
78479: LD_INT 12
78481: PUSH
78482: LD_INT 15
78484: PUSH
78485: LD_INT 14
78487: PUSH
78488: LD_INT 13
78490: PUSH
78491: EMPTY
78492: LIST
78493: LIST
78494: LIST
78495: LIST
78496: LIST
78497: LIST
78498: PUSH
78499: LD_VAR 0 2
78503: PUSH
78504: LD_INT 3
78506: MINUS
78507: ARRAY
78508: ST_TO_ADDR
// end ; 10 .. 13 :
78509: GO 79019
78511: LD_INT 10
78513: DOUBLE
78514: GREATEREQUAL
78515: IFFALSE 78523
78517: LD_INT 13
78519: DOUBLE
78520: LESSEQUAL
78521: IFTRUE 78525
78523: GO 78602
78525: POP
// begin bc_type := b_lab_full ;
78526: LD_ADDR_OWVAR 42
78530: PUSH
78531: LD_INT 8
78533: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
78534: LD_ADDR_OWVAR 44
78538: PUSH
78539: LD_INT 10
78541: PUSH
78542: LD_INT 12
78544: PUSH
78545: LD_INT 14
78547: PUSH
78548: LD_INT 13
78550: PUSH
78551: EMPTY
78552: LIST
78553: LIST
78554: LIST
78555: LIST
78556: PUSH
78557: LD_VAR 0 2
78561: PUSH
78562: LD_INT 9
78564: MINUS
78565: ARRAY
78566: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
78567: LD_ADDR_OWVAR 45
78571: PUSH
78572: LD_INT 11
78574: PUSH
78575: LD_INT 15
78577: PUSH
78578: LD_INT 12
78580: PUSH
78581: LD_INT 15
78583: PUSH
78584: EMPTY
78585: LIST
78586: LIST
78587: LIST
78588: LIST
78589: PUSH
78590: LD_VAR 0 2
78594: PUSH
78595: LD_INT 9
78597: MINUS
78598: ARRAY
78599: ST_TO_ADDR
// end ; 14 :
78600: GO 79019
78602: LD_INT 14
78604: DOUBLE
78605: EQUAL
78606: IFTRUE 78610
78608: GO 78621
78610: POP
// bc_type := b_workshop ; 15 :
78611: LD_ADDR_OWVAR 42
78615: PUSH
78616: LD_INT 2
78618: ST_TO_ADDR
78619: GO 79019
78621: LD_INT 15
78623: DOUBLE
78624: EQUAL
78625: IFTRUE 78629
78627: GO 78640
78629: POP
// bc_type := b_factory ; 16 :
78630: LD_ADDR_OWVAR 42
78634: PUSH
78635: LD_INT 3
78637: ST_TO_ADDR
78638: GO 79019
78640: LD_INT 16
78642: DOUBLE
78643: EQUAL
78644: IFTRUE 78648
78646: GO 78659
78648: POP
// bc_type := b_ext_gun ; 17 :
78649: LD_ADDR_OWVAR 42
78653: PUSH
78654: LD_INT 17
78656: ST_TO_ADDR
78657: GO 79019
78659: LD_INT 17
78661: DOUBLE
78662: EQUAL
78663: IFTRUE 78667
78665: GO 78695
78667: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
78668: LD_ADDR_OWVAR 42
78672: PUSH
78673: LD_INT 19
78675: PUSH
78676: LD_INT 23
78678: PUSH
78679: LD_INT 19
78681: PUSH
78682: EMPTY
78683: LIST
78684: LIST
78685: LIST
78686: PUSH
78687: LD_VAR 0 1
78691: ARRAY
78692: ST_TO_ADDR
78693: GO 79019
78695: LD_INT 18
78697: DOUBLE
78698: EQUAL
78699: IFTRUE 78703
78701: GO 78714
78703: POP
// bc_type := b_ext_radar ; 19 :
78704: LD_ADDR_OWVAR 42
78708: PUSH
78709: LD_INT 20
78711: ST_TO_ADDR
78712: GO 79019
78714: LD_INT 19
78716: DOUBLE
78717: EQUAL
78718: IFTRUE 78722
78720: GO 78733
78722: POP
// bc_type := b_ext_radio ; 20 :
78723: LD_ADDR_OWVAR 42
78727: PUSH
78728: LD_INT 22
78730: ST_TO_ADDR
78731: GO 79019
78733: LD_INT 20
78735: DOUBLE
78736: EQUAL
78737: IFTRUE 78741
78739: GO 78752
78741: POP
// bc_type := b_ext_siberium ; 21 :
78742: LD_ADDR_OWVAR 42
78746: PUSH
78747: LD_INT 21
78749: ST_TO_ADDR
78750: GO 79019
78752: LD_INT 21
78754: DOUBLE
78755: EQUAL
78756: IFTRUE 78760
78758: GO 78771
78760: POP
// bc_type := b_ext_computer ; 22 :
78761: LD_ADDR_OWVAR 42
78765: PUSH
78766: LD_INT 24
78768: ST_TO_ADDR
78769: GO 79019
78771: LD_INT 22
78773: DOUBLE
78774: EQUAL
78775: IFTRUE 78779
78777: GO 78790
78779: POP
// bc_type := b_ext_track ; 23 :
78780: LD_ADDR_OWVAR 42
78784: PUSH
78785: LD_INT 16
78787: ST_TO_ADDR
78788: GO 79019
78790: LD_INT 23
78792: DOUBLE
78793: EQUAL
78794: IFTRUE 78798
78796: GO 78809
78798: POP
// bc_type := b_ext_laser ; 24 :
78799: LD_ADDR_OWVAR 42
78803: PUSH
78804: LD_INT 25
78806: ST_TO_ADDR
78807: GO 79019
78809: LD_INT 24
78811: DOUBLE
78812: EQUAL
78813: IFTRUE 78817
78815: GO 78828
78817: POP
// bc_type := b_control_tower ; 25 :
78818: LD_ADDR_OWVAR 42
78822: PUSH
78823: LD_INT 36
78825: ST_TO_ADDR
78826: GO 79019
78828: LD_INT 25
78830: DOUBLE
78831: EQUAL
78832: IFTRUE 78836
78834: GO 78847
78836: POP
// bc_type := b_breastwork ; 26 :
78837: LD_ADDR_OWVAR 42
78841: PUSH
78842: LD_INT 31
78844: ST_TO_ADDR
78845: GO 79019
78847: LD_INT 26
78849: DOUBLE
78850: EQUAL
78851: IFTRUE 78855
78853: GO 78866
78855: POP
// bc_type := b_bunker ; 27 :
78856: LD_ADDR_OWVAR 42
78860: PUSH
78861: LD_INT 32
78863: ST_TO_ADDR
78864: GO 79019
78866: LD_INT 27
78868: DOUBLE
78869: EQUAL
78870: IFTRUE 78874
78872: GO 78885
78874: POP
// bc_type := b_turret ; 28 :
78875: LD_ADDR_OWVAR 42
78879: PUSH
78880: LD_INT 33
78882: ST_TO_ADDR
78883: GO 79019
78885: LD_INT 28
78887: DOUBLE
78888: EQUAL
78889: IFTRUE 78893
78891: GO 78904
78893: POP
// bc_type := b_armoury ; 29 :
78894: LD_ADDR_OWVAR 42
78898: PUSH
78899: LD_INT 4
78901: ST_TO_ADDR
78902: GO 79019
78904: LD_INT 29
78906: DOUBLE
78907: EQUAL
78908: IFTRUE 78912
78910: GO 78923
78912: POP
// bc_type := b_barracks ; 30 :
78913: LD_ADDR_OWVAR 42
78917: PUSH
78918: LD_INT 5
78920: ST_TO_ADDR
78921: GO 79019
78923: LD_INT 30
78925: DOUBLE
78926: EQUAL
78927: IFTRUE 78931
78929: GO 78942
78931: POP
// bc_type := b_solar_power ; 31 :
78932: LD_ADDR_OWVAR 42
78936: PUSH
78937: LD_INT 27
78939: ST_TO_ADDR
78940: GO 79019
78942: LD_INT 31
78944: DOUBLE
78945: EQUAL
78946: IFTRUE 78950
78948: GO 78961
78950: POP
// bc_type := b_oil_power ; 32 :
78951: LD_ADDR_OWVAR 42
78955: PUSH
78956: LD_INT 26
78958: ST_TO_ADDR
78959: GO 79019
78961: LD_INT 32
78963: DOUBLE
78964: EQUAL
78965: IFTRUE 78969
78967: GO 78980
78969: POP
// bc_type := b_siberite_power ; 33 :
78970: LD_ADDR_OWVAR 42
78974: PUSH
78975: LD_INT 28
78977: ST_TO_ADDR
78978: GO 79019
78980: LD_INT 33
78982: DOUBLE
78983: EQUAL
78984: IFTRUE 78988
78986: GO 78999
78988: POP
// bc_type := b_oil_mine ; 34 :
78989: LD_ADDR_OWVAR 42
78993: PUSH
78994: LD_INT 29
78996: ST_TO_ADDR
78997: GO 79019
78999: LD_INT 34
79001: DOUBLE
79002: EQUAL
79003: IFTRUE 79007
79005: GO 79018
79007: POP
// bc_type := b_siberite_mine ; end ;
79008: LD_ADDR_OWVAR 42
79012: PUSH
79013: LD_INT 30
79015: ST_TO_ADDR
79016: GO 79019
79018: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
79019: LD_ADDR_VAR 0 8
79023: PUSH
79024: LD_VAR 0 5
79028: PPUSH
79029: LD_VAR 0 6
79033: PPUSH
79034: LD_VAR 0 3
79038: PPUSH
79039: CALL_OW 47
79043: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
79044: LD_OWVAR 42
79048: PUSH
79049: LD_INT 32
79051: PUSH
79052: LD_INT 33
79054: PUSH
79055: EMPTY
79056: LIST
79057: LIST
79058: IN
79059: IFFALSE 79075
// PlaceWeaponTurret ( b , weapon ) ;
79061: LD_VAR 0 8
79065: PPUSH
79066: LD_VAR 0 4
79070: PPUSH
79071: CALL_OW 431
// end ;
79075: LD_VAR 0 7
79079: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
79080: LD_INT 0
79082: PPUSH
79083: PPUSH
79084: PPUSH
79085: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79086: LD_ADDR_VAR 0 4
79090: PUSH
79091: LD_INT 22
79093: PUSH
79094: LD_OWVAR 2
79098: PUSH
79099: EMPTY
79100: LIST
79101: LIST
79102: PUSH
79103: LD_INT 2
79105: PUSH
79106: LD_INT 30
79108: PUSH
79109: LD_INT 0
79111: PUSH
79112: EMPTY
79113: LIST
79114: LIST
79115: PUSH
79116: LD_INT 30
79118: PUSH
79119: LD_INT 1
79121: PUSH
79122: EMPTY
79123: LIST
79124: LIST
79125: PUSH
79126: EMPTY
79127: LIST
79128: LIST
79129: LIST
79130: PUSH
79131: EMPTY
79132: LIST
79133: LIST
79134: PPUSH
79135: CALL_OW 69
79139: ST_TO_ADDR
// if not tmp then
79140: LD_VAR 0 4
79144: NOT
79145: IFFALSE 79149
// exit ;
79147: GO 79208
// for i in tmp do
79149: LD_ADDR_VAR 0 2
79153: PUSH
79154: LD_VAR 0 4
79158: PUSH
79159: FOR_IN
79160: IFFALSE 79206
// for j = 1 to 3 do
79162: LD_ADDR_VAR 0 3
79166: PUSH
79167: DOUBLE
79168: LD_INT 1
79170: DEC
79171: ST_TO_ADDR
79172: LD_INT 3
79174: PUSH
79175: FOR_TO
79176: IFFALSE 79202
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
79178: LD_VAR 0 2
79182: PPUSH
79183: CALL_OW 274
79187: PPUSH
79188: LD_VAR 0 3
79192: PPUSH
79193: LD_INT 99999
79195: PPUSH
79196: CALL_OW 277
79200: GO 79175
79202: POP
79203: POP
79204: GO 79159
79206: POP
79207: POP
// end ;
79208: LD_VAR 0 1
79212: RET
// export function hHackSetLevel10 ; var i , j ; begin
79213: LD_INT 0
79215: PPUSH
79216: PPUSH
79217: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
79218: LD_ADDR_VAR 0 2
79222: PUSH
79223: LD_INT 21
79225: PUSH
79226: LD_INT 1
79228: PUSH
79229: EMPTY
79230: LIST
79231: LIST
79232: PPUSH
79233: CALL_OW 69
79237: PUSH
79238: FOR_IN
79239: IFFALSE 79291
// if IsSelected ( i ) then
79241: LD_VAR 0 2
79245: PPUSH
79246: CALL_OW 306
79250: IFFALSE 79289
// begin for j := 1 to 4 do
79252: LD_ADDR_VAR 0 3
79256: PUSH
79257: DOUBLE
79258: LD_INT 1
79260: DEC
79261: ST_TO_ADDR
79262: LD_INT 4
79264: PUSH
79265: FOR_TO
79266: IFFALSE 79287
// SetSkill ( i , j , 10 ) ;
79268: LD_VAR 0 2
79272: PPUSH
79273: LD_VAR 0 3
79277: PPUSH
79278: LD_INT 10
79280: PPUSH
79281: CALL_OW 237
79285: GO 79265
79287: POP
79288: POP
// end ;
79289: GO 79238
79291: POP
79292: POP
// end ;
79293: LD_VAR 0 1
79297: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
79298: LD_INT 0
79300: PPUSH
79301: PPUSH
79302: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
79303: LD_ADDR_VAR 0 2
79307: PUSH
79308: LD_INT 22
79310: PUSH
79311: LD_OWVAR 2
79315: PUSH
79316: EMPTY
79317: LIST
79318: LIST
79319: PUSH
79320: LD_INT 21
79322: PUSH
79323: LD_INT 1
79325: PUSH
79326: EMPTY
79327: LIST
79328: LIST
79329: PUSH
79330: EMPTY
79331: LIST
79332: LIST
79333: PPUSH
79334: CALL_OW 69
79338: PUSH
79339: FOR_IN
79340: IFFALSE 79381
// begin for j := 1 to 4 do
79342: LD_ADDR_VAR 0 3
79346: PUSH
79347: DOUBLE
79348: LD_INT 1
79350: DEC
79351: ST_TO_ADDR
79352: LD_INT 4
79354: PUSH
79355: FOR_TO
79356: IFFALSE 79377
// SetSkill ( i , j , 10 ) ;
79358: LD_VAR 0 2
79362: PPUSH
79363: LD_VAR 0 3
79367: PPUSH
79368: LD_INT 10
79370: PPUSH
79371: CALL_OW 237
79375: GO 79355
79377: POP
79378: POP
// end ;
79379: GO 79339
79381: POP
79382: POP
// end ;
79383: LD_VAR 0 1
79387: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
79388: LD_INT 0
79390: PPUSH
// uc_side := your_side ;
79391: LD_ADDR_OWVAR 20
79395: PUSH
79396: LD_OWVAR 2
79400: ST_TO_ADDR
// uc_nation := nation ;
79401: LD_ADDR_OWVAR 21
79405: PUSH
79406: LD_VAR 0 1
79410: ST_TO_ADDR
// InitHc ;
79411: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
79415: LD_INT 0
79417: PPUSH
79418: LD_VAR 0 2
79422: PPUSH
79423: LD_VAR 0 3
79427: PPUSH
79428: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
79432: LD_VAR 0 4
79436: PPUSH
79437: LD_VAR 0 5
79441: PPUSH
79442: CALL_OW 428
79446: PUSH
79447: LD_INT 0
79449: EQUAL
79450: IFFALSE 79474
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
79452: CALL_OW 44
79456: PPUSH
79457: LD_VAR 0 4
79461: PPUSH
79462: LD_VAR 0 5
79466: PPUSH
79467: LD_INT 1
79469: PPUSH
79470: CALL_OW 48
// end ;
79474: LD_VAR 0 6
79478: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
79479: LD_INT 0
79481: PPUSH
79482: PPUSH
// uc_side := your_side ;
79483: LD_ADDR_OWVAR 20
79487: PUSH
79488: LD_OWVAR 2
79492: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
79493: LD_VAR 0 1
79497: PUSH
79498: LD_INT 1
79500: PUSH
79501: LD_INT 2
79503: PUSH
79504: LD_INT 3
79506: PUSH
79507: LD_INT 4
79509: PUSH
79510: LD_INT 5
79512: PUSH
79513: EMPTY
79514: LIST
79515: LIST
79516: LIST
79517: LIST
79518: LIST
79519: IN
79520: IFFALSE 79532
// uc_nation := nation_american else
79522: LD_ADDR_OWVAR 21
79526: PUSH
79527: LD_INT 1
79529: ST_TO_ADDR
79530: GO 79575
// if chassis in [ 11 , 12 , 13 , 14 ] then
79532: LD_VAR 0 1
79536: PUSH
79537: LD_INT 11
79539: PUSH
79540: LD_INT 12
79542: PUSH
79543: LD_INT 13
79545: PUSH
79546: LD_INT 14
79548: PUSH
79549: EMPTY
79550: LIST
79551: LIST
79552: LIST
79553: LIST
79554: IN
79555: IFFALSE 79567
// uc_nation := nation_arabian else
79557: LD_ADDR_OWVAR 21
79561: PUSH
79562: LD_INT 2
79564: ST_TO_ADDR
79565: GO 79575
// uc_nation := nation_russian ;
79567: LD_ADDR_OWVAR 21
79571: PUSH
79572: LD_INT 3
79574: ST_TO_ADDR
// vc_chassis := chassis ;
79575: LD_ADDR_OWVAR 37
79579: PUSH
79580: LD_VAR 0 1
79584: ST_TO_ADDR
// vc_engine := engine ;
79585: LD_ADDR_OWVAR 39
79589: PUSH
79590: LD_VAR 0 2
79594: ST_TO_ADDR
// vc_control := control ;
79595: LD_ADDR_OWVAR 38
79599: PUSH
79600: LD_VAR 0 3
79604: ST_TO_ADDR
// vc_weapon := weapon ;
79605: LD_ADDR_OWVAR 40
79609: PUSH
79610: LD_VAR 0 4
79614: ST_TO_ADDR
// un := CreateVehicle ;
79615: LD_ADDR_VAR 0 8
79619: PUSH
79620: CALL_OW 45
79624: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
79625: LD_VAR 0 8
79629: PPUSH
79630: LD_INT 0
79632: PPUSH
79633: LD_INT 5
79635: PPUSH
79636: CALL_OW 12
79640: PPUSH
79641: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
79645: LD_VAR 0 8
79649: PPUSH
79650: LD_VAR 0 5
79654: PPUSH
79655: LD_VAR 0 6
79659: PPUSH
79660: LD_INT 1
79662: PPUSH
79663: CALL_OW 48
// end ;
79667: LD_VAR 0 7
79671: RET
// export hInvincible ; every 1 do
79672: GO 79674
79674: DISABLE
// hInvincible := [ ] ;
79675: LD_ADDR_EXP 136
79679: PUSH
79680: EMPTY
79681: ST_TO_ADDR
79682: END
// every 10 do var i ;
79683: GO 79685
79685: DISABLE
79686: LD_INT 0
79688: PPUSH
// begin enable ;
79689: ENABLE
// if not hInvincible then
79690: LD_EXP 136
79694: NOT
79695: IFFALSE 79699
// exit ;
79697: GO 79743
// for i in hInvincible do
79699: LD_ADDR_VAR 0 1
79703: PUSH
79704: LD_EXP 136
79708: PUSH
79709: FOR_IN
79710: IFFALSE 79741
// if GetLives ( i ) < 1000 then
79712: LD_VAR 0 1
79716: PPUSH
79717: CALL_OW 256
79721: PUSH
79722: LD_INT 1000
79724: LESS
79725: IFFALSE 79739
// SetLives ( i , 1000 ) ;
79727: LD_VAR 0 1
79731: PPUSH
79732: LD_INT 1000
79734: PPUSH
79735: CALL_OW 234
79739: GO 79709
79741: POP
79742: POP
// end ;
79743: PPOPN 1
79745: END
// export function hHackInvincible ; var i ; begin
79746: LD_INT 0
79748: PPUSH
79749: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
79750: LD_ADDR_VAR 0 2
79754: PUSH
79755: LD_INT 2
79757: PUSH
79758: LD_INT 21
79760: PUSH
79761: LD_INT 1
79763: PUSH
79764: EMPTY
79765: LIST
79766: LIST
79767: PUSH
79768: LD_INT 21
79770: PUSH
79771: LD_INT 2
79773: PUSH
79774: EMPTY
79775: LIST
79776: LIST
79777: PUSH
79778: EMPTY
79779: LIST
79780: LIST
79781: LIST
79782: PPUSH
79783: CALL_OW 69
79787: PUSH
79788: FOR_IN
79789: IFFALSE 79850
// if IsSelected ( i ) then
79791: LD_VAR 0 2
79795: PPUSH
79796: CALL_OW 306
79800: IFFALSE 79848
// begin if i in hInvincible then
79802: LD_VAR 0 2
79806: PUSH
79807: LD_EXP 136
79811: IN
79812: IFFALSE 79832
// hInvincible := hInvincible diff i else
79814: LD_ADDR_EXP 136
79818: PUSH
79819: LD_EXP 136
79823: PUSH
79824: LD_VAR 0 2
79828: DIFF
79829: ST_TO_ADDR
79830: GO 79848
// hInvincible := hInvincible union i ;
79832: LD_ADDR_EXP 136
79836: PUSH
79837: LD_EXP 136
79841: PUSH
79842: LD_VAR 0 2
79846: UNION
79847: ST_TO_ADDR
// end ;
79848: GO 79788
79850: POP
79851: POP
// end ;
79852: LD_VAR 0 1
79856: RET
// export function hHackInvisible ; var i , j ; begin
79857: LD_INT 0
79859: PPUSH
79860: PPUSH
79861: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
79862: LD_ADDR_VAR 0 2
79866: PUSH
79867: LD_INT 21
79869: PUSH
79870: LD_INT 1
79872: PUSH
79873: EMPTY
79874: LIST
79875: LIST
79876: PPUSH
79877: CALL_OW 69
79881: PUSH
79882: FOR_IN
79883: IFFALSE 79907
// if IsSelected ( i ) then
79885: LD_VAR 0 2
79889: PPUSH
79890: CALL_OW 306
79894: IFFALSE 79905
// ComForceInvisible ( i ) ;
79896: LD_VAR 0 2
79900: PPUSH
79901: CALL_OW 496
79905: GO 79882
79907: POP
79908: POP
// end ;
79909: LD_VAR 0 1
79913: RET
// export function hHackChangeYourSide ; begin
79914: LD_INT 0
79916: PPUSH
// if your_side = 8 then
79917: LD_OWVAR 2
79921: PUSH
79922: LD_INT 8
79924: EQUAL
79925: IFFALSE 79937
// your_side := 0 else
79927: LD_ADDR_OWVAR 2
79931: PUSH
79932: LD_INT 0
79934: ST_TO_ADDR
79935: GO 79951
// your_side := your_side + 1 ;
79937: LD_ADDR_OWVAR 2
79941: PUSH
79942: LD_OWVAR 2
79946: PUSH
79947: LD_INT 1
79949: PLUS
79950: ST_TO_ADDR
// end ;
79951: LD_VAR 0 1
79955: RET
// export function hHackChangeUnitSide ; var i , j ; begin
79956: LD_INT 0
79958: PPUSH
79959: PPUSH
79960: PPUSH
// for i in all_units do
79961: LD_ADDR_VAR 0 2
79965: PUSH
79966: LD_OWVAR 3
79970: PUSH
79971: FOR_IN
79972: IFFALSE 80050
// if IsSelected ( i ) then
79974: LD_VAR 0 2
79978: PPUSH
79979: CALL_OW 306
79983: IFFALSE 80048
// begin j := GetSide ( i ) ;
79985: LD_ADDR_VAR 0 3
79989: PUSH
79990: LD_VAR 0 2
79994: PPUSH
79995: CALL_OW 255
79999: ST_TO_ADDR
// if j = 8 then
80000: LD_VAR 0 3
80004: PUSH
80005: LD_INT 8
80007: EQUAL
80008: IFFALSE 80020
// j := 0 else
80010: LD_ADDR_VAR 0 3
80014: PUSH
80015: LD_INT 0
80017: ST_TO_ADDR
80018: GO 80034
// j := j + 1 ;
80020: LD_ADDR_VAR 0 3
80024: PUSH
80025: LD_VAR 0 3
80029: PUSH
80030: LD_INT 1
80032: PLUS
80033: ST_TO_ADDR
// SetSide ( i , j ) ;
80034: LD_VAR 0 2
80038: PPUSH
80039: LD_VAR 0 3
80043: PPUSH
80044: CALL_OW 235
// end ;
80048: GO 79971
80050: POP
80051: POP
// end ;
80052: LD_VAR 0 1
80056: RET
// export function hHackFog ; begin
80057: LD_INT 0
80059: PPUSH
// FogOff ( true ) ;
80060: LD_INT 1
80062: PPUSH
80063: CALL_OW 344
// end ;
80067: LD_VAR 0 1
80071: RET
// export function hHackTeleport ( unit , x , y ) ; begin
80072: LD_INT 0
80074: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
80075: LD_VAR 0 1
80079: PPUSH
80080: LD_VAR 0 2
80084: PPUSH
80085: LD_VAR 0 3
80089: PPUSH
80090: LD_INT 1
80092: PPUSH
80093: LD_INT 1
80095: PPUSH
80096: CALL_OW 483
// CenterOnXY ( x , y ) ;
80100: LD_VAR 0 2
80104: PPUSH
80105: LD_VAR 0 3
80109: PPUSH
80110: CALL_OW 84
// end ; end_of_file
80114: LD_VAR 0 4
80118: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80119: LD_VAR 0 1
80123: PUSH
80124: LD_INT 200
80126: DOUBLE
80127: GREATEREQUAL
80128: IFFALSE 80136
80130: LD_INT 299
80132: DOUBLE
80133: LESSEQUAL
80134: IFTRUE 80138
80136: GO 80170
80138: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80139: LD_VAR 0 1
80143: PPUSH
80144: LD_VAR 0 2
80148: PPUSH
80149: LD_VAR 0 3
80153: PPUSH
80154: LD_VAR 0 4
80158: PPUSH
80159: LD_VAR 0 5
80163: PPUSH
80164: CALL 80660 0 5
80168: GO 80247
80170: LD_INT 300
80172: DOUBLE
80173: GREATEREQUAL
80174: IFFALSE 80182
80176: LD_INT 399
80178: DOUBLE
80179: LESSEQUAL
80180: IFTRUE 80184
80182: GO 80246
80184: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80185: LD_VAR 0 1
80189: PPUSH
80190: LD_VAR 0 2
80194: PPUSH
80195: LD_VAR 0 3
80199: PPUSH
80200: LD_VAR 0 4
80204: PPUSH
80205: LD_VAR 0 5
80209: PPUSH
80210: LD_VAR 0 6
80214: PPUSH
80215: LD_VAR 0 7
80219: PPUSH
80220: LD_VAR 0 8
80224: PPUSH
80225: LD_VAR 0 9
80229: PPUSH
80230: LD_VAR 0 10
80234: PPUSH
80235: LD_VAR 0 11
80239: PPUSH
80240: CALL 78139 0 11
80244: GO 80247
80246: POP
// end ;
80247: PPOPN 11
80249: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80250: LD_VAR 0 1
80254: PPUSH
80255: LD_VAR 0 2
80259: PPUSH
80260: LD_VAR 0 3
80264: PPUSH
80265: LD_VAR 0 4
80269: PPUSH
80270: LD_VAR 0 5
80274: PPUSH
80275: CALL 80396 0 5
// end ; end_of_file
80279: PPOPN 5
80281: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
80282: LD_INT 0
80284: PPUSH
80285: PPUSH
80286: PPUSH
80287: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
80288: LD_VAR 0 1
80292: PPUSH
80293: CALL_OW 264
80297: PUSH
80298: LD_EXP 63
80302: EQUAL
80303: IFFALSE 80375
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
80305: LD_INT 68
80307: PPUSH
80308: LD_VAR 0 1
80312: PPUSH
80313: CALL_OW 255
80317: PPUSH
80318: CALL_OW 321
80322: PUSH
80323: LD_INT 2
80325: EQUAL
80326: IFFALSE 80338
// eff := 70 else
80328: LD_ADDR_VAR 0 4
80332: PUSH
80333: LD_INT 70
80335: ST_TO_ADDR
80336: GO 80346
// eff := 30 ;
80338: LD_ADDR_VAR 0 4
80342: PUSH
80343: LD_INT 30
80345: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
80346: LD_VAR 0 1
80350: PPUSH
80351: CALL_OW 250
80355: PPUSH
80356: LD_VAR 0 1
80360: PPUSH
80361: CALL_OW 251
80365: PPUSH
80366: LD_VAR 0 4
80370: PPUSH
80371: CALL_OW 495
// end ; end ;
80375: LD_VAR 0 2
80379: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
80380: LD_INT 0
80382: PPUSH
// end ;
80383: LD_VAR 0 4
80387: RET
// export function SOS_Command ( cmd ) ; begin
80388: LD_INT 0
80390: PPUSH
// end ;
80391: LD_VAR 0 2
80395: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
80396: LD_INT 0
80398: PPUSH
// end ;
80399: LD_VAR 0 6
80403: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
80404: LD_INT 0
80406: PPUSH
80407: PPUSH
// if not vehicle or not factory then
80408: LD_VAR 0 1
80412: NOT
80413: PUSH
80414: LD_VAR 0 2
80418: NOT
80419: OR
80420: IFFALSE 80424
// exit ;
80422: GO 80655
// if factoryWaypoints >= factory then
80424: LD_EXP 137
80428: PUSH
80429: LD_VAR 0 2
80433: GREATEREQUAL
80434: IFFALSE 80655
// if factoryWaypoints [ factory ] then
80436: LD_EXP 137
80440: PUSH
80441: LD_VAR 0 2
80445: ARRAY
80446: IFFALSE 80655
// begin if GetControl ( vehicle ) = control_manual then
80448: LD_VAR 0 1
80452: PPUSH
80453: CALL_OW 263
80457: PUSH
80458: LD_INT 1
80460: EQUAL
80461: IFFALSE 80542
// begin driver := IsDrivenBy ( vehicle ) ;
80463: LD_ADDR_VAR 0 4
80467: PUSH
80468: LD_VAR 0 1
80472: PPUSH
80473: CALL_OW 311
80477: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
80478: LD_VAR 0 4
80482: PPUSH
80483: LD_EXP 137
80487: PUSH
80488: LD_VAR 0 2
80492: ARRAY
80493: PUSH
80494: LD_INT 3
80496: ARRAY
80497: PPUSH
80498: LD_EXP 137
80502: PUSH
80503: LD_VAR 0 2
80507: ARRAY
80508: PUSH
80509: LD_INT 4
80511: ARRAY
80512: PPUSH
80513: CALL_OW 171
// AddComExitVehicle ( driver ) ;
80517: LD_VAR 0 4
80521: PPUSH
80522: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
80526: LD_VAR 0 4
80530: PPUSH
80531: LD_VAR 0 2
80535: PPUSH
80536: CALL_OW 180
// end else
80540: GO 80655
// if GetControl ( vehicle ) = control_remote then
80542: LD_VAR 0 1
80546: PPUSH
80547: CALL_OW 263
80551: PUSH
80552: LD_INT 2
80554: EQUAL
80555: IFFALSE 80616
// begin wait ( 0 0$2 ) ;
80557: LD_INT 70
80559: PPUSH
80560: CALL_OW 67
// if Connect ( vehicle ) then
80564: LD_VAR 0 1
80568: PPUSH
80569: CALL 33254 0 1
80573: IFFALSE 80614
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
80575: LD_VAR 0 1
80579: PPUSH
80580: LD_EXP 137
80584: PUSH
80585: LD_VAR 0 2
80589: ARRAY
80590: PUSH
80591: LD_INT 3
80593: ARRAY
80594: PPUSH
80595: LD_EXP 137
80599: PUSH
80600: LD_VAR 0 2
80604: ARRAY
80605: PUSH
80606: LD_INT 4
80608: ARRAY
80609: PPUSH
80610: CALL_OW 171
// end else
80614: GO 80655
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
80616: LD_VAR 0 1
80620: PPUSH
80621: LD_EXP 137
80625: PUSH
80626: LD_VAR 0 2
80630: ARRAY
80631: PUSH
80632: LD_INT 3
80634: ARRAY
80635: PPUSH
80636: LD_EXP 137
80640: PUSH
80641: LD_VAR 0 2
80645: ARRAY
80646: PUSH
80647: LD_INT 4
80649: ARRAY
80650: PPUSH
80651: CALL_OW 171
// end ; end ;
80655: LD_VAR 0 3
80659: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
80660: LD_INT 0
80662: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
80663: LD_VAR 0 1
80667: PUSH
80668: LD_INT 250
80670: EQUAL
80671: PUSH
80672: LD_VAR 0 2
80676: PPUSH
80677: CALL_OW 264
80681: PUSH
80682: LD_EXP 66
80686: EQUAL
80687: AND
80688: IFFALSE 80709
// MinerPlaceMine ( unit , x , y ) ;
80690: LD_VAR 0 2
80694: PPUSH
80695: LD_VAR 0 4
80699: PPUSH
80700: LD_VAR 0 5
80704: PPUSH
80705: CALL 83437 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
80709: LD_VAR 0 1
80713: PUSH
80714: LD_INT 251
80716: EQUAL
80717: PUSH
80718: LD_VAR 0 2
80722: PPUSH
80723: CALL_OW 264
80727: PUSH
80728: LD_EXP 66
80732: EQUAL
80733: AND
80734: IFFALSE 80755
// MinerDetonateMine ( unit , x , y ) ;
80736: LD_VAR 0 2
80740: PPUSH
80741: LD_VAR 0 4
80745: PPUSH
80746: LD_VAR 0 5
80750: PPUSH
80751: CALL 83714 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
80755: LD_VAR 0 1
80759: PUSH
80760: LD_INT 252
80762: EQUAL
80763: PUSH
80764: LD_VAR 0 2
80768: PPUSH
80769: CALL_OW 264
80773: PUSH
80774: LD_EXP 66
80778: EQUAL
80779: AND
80780: IFFALSE 80801
// MinerCreateMinefield ( unit , x , y ) ;
80782: LD_VAR 0 2
80786: PPUSH
80787: LD_VAR 0 4
80791: PPUSH
80792: LD_VAR 0 5
80796: PPUSH
80797: CALL 84131 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
80801: LD_VAR 0 1
80805: PUSH
80806: LD_INT 253
80808: EQUAL
80809: PUSH
80810: LD_VAR 0 2
80814: PPUSH
80815: CALL_OW 257
80819: PUSH
80820: LD_INT 5
80822: EQUAL
80823: AND
80824: IFFALSE 80845
// ComBinocular ( unit , x , y ) ;
80826: LD_VAR 0 2
80830: PPUSH
80831: LD_VAR 0 4
80835: PPUSH
80836: LD_VAR 0 5
80840: PPUSH
80841: CALL 84502 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
80845: LD_VAR 0 1
80849: PUSH
80850: LD_INT 254
80852: EQUAL
80853: PUSH
80854: LD_VAR 0 2
80858: PPUSH
80859: CALL_OW 264
80863: PUSH
80864: LD_EXP 61
80868: EQUAL
80869: AND
80870: PUSH
80871: LD_VAR 0 3
80875: PPUSH
80876: CALL_OW 263
80880: PUSH
80881: LD_INT 3
80883: EQUAL
80884: AND
80885: IFFALSE 80901
// HackDestroyVehicle ( unit , selectedUnit ) ;
80887: LD_VAR 0 2
80891: PPUSH
80892: LD_VAR 0 3
80896: PPUSH
80897: CALL 82797 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
80901: LD_VAR 0 1
80905: PUSH
80906: LD_INT 255
80908: EQUAL
80909: PUSH
80910: LD_VAR 0 2
80914: PPUSH
80915: CALL_OW 264
80919: PUSH
80920: LD_INT 14
80922: PUSH
80923: LD_INT 53
80925: PUSH
80926: EMPTY
80927: LIST
80928: LIST
80929: IN
80930: AND
80931: PUSH
80932: LD_VAR 0 4
80936: PPUSH
80937: LD_VAR 0 5
80941: PPUSH
80942: CALL_OW 488
80946: AND
80947: IFFALSE 80971
// CutTreeXYR ( unit , x , y , 12 ) ;
80949: LD_VAR 0 2
80953: PPUSH
80954: LD_VAR 0 4
80958: PPUSH
80959: LD_VAR 0 5
80963: PPUSH
80964: LD_INT 12
80966: PPUSH
80967: CALL 81363 0 4
// if cmd = 256 then
80971: LD_VAR 0 1
80975: PUSH
80976: LD_INT 256
80978: EQUAL
80979: IFFALSE 81000
// SetFactoryWaypoint ( unit , x , y ) ;
80981: LD_VAR 0 2
80985: PPUSH
80986: LD_VAR 0 4
80990: PPUSH
80991: LD_VAR 0 5
80995: PPUSH
80996: CALL 81005 0 3
// end ;
81000: LD_VAR 0 6
81004: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
81005: LD_INT 0
81007: PPUSH
81008: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
81009: LD_VAR 0 1
81013: NOT
81014: PUSH
81015: LD_VAR 0 2
81019: PPUSH
81020: LD_VAR 0 3
81024: PPUSH
81025: CALL_OW 488
81029: NOT
81030: OR
81031: PUSH
81032: LD_VAR 0 1
81036: PPUSH
81037: CALL_OW 266
81041: PUSH
81042: LD_INT 3
81044: NONEQUAL
81045: PUSH
81046: LD_VAR 0 1
81050: PPUSH
81051: CALL_OW 247
81055: PUSH
81056: LD_INT 1
81058: EQUAL
81059: NOT
81060: AND
81061: OR
81062: IFFALSE 81066
// exit ;
81064: GO 81215
// if GetType ( factory ) = unit_human then
81066: LD_VAR 0 1
81070: PPUSH
81071: CALL_OW 247
81075: PUSH
81076: LD_INT 1
81078: EQUAL
81079: IFFALSE 81096
// factory := IsInUnit ( factory ) ;
81081: LD_ADDR_VAR 0 1
81085: PUSH
81086: LD_VAR 0 1
81090: PPUSH
81091: CALL_OW 310
81095: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
81096: LD_VAR 0 1
81100: PPUSH
81101: CALL_OW 266
81105: PUSH
81106: LD_INT 3
81108: NONEQUAL
81109: IFFALSE 81113
// exit ;
81111: GO 81215
// if HexInfo ( x , y ) = factory then
81113: LD_VAR 0 2
81117: PPUSH
81118: LD_VAR 0 3
81122: PPUSH
81123: CALL_OW 428
81127: PUSH
81128: LD_VAR 0 1
81132: EQUAL
81133: IFFALSE 81160
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
81135: LD_ADDR_EXP 137
81139: PUSH
81140: LD_EXP 137
81144: PPUSH
81145: LD_VAR 0 1
81149: PPUSH
81150: LD_INT 0
81152: PPUSH
81153: CALL_OW 1
81157: ST_TO_ADDR
81158: GO 81211
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
81160: LD_ADDR_EXP 137
81164: PUSH
81165: LD_EXP 137
81169: PPUSH
81170: LD_VAR 0 1
81174: PPUSH
81175: LD_VAR 0 1
81179: PPUSH
81180: CALL_OW 255
81184: PUSH
81185: LD_VAR 0 1
81189: PUSH
81190: LD_VAR 0 2
81194: PUSH
81195: LD_VAR 0 3
81199: PUSH
81200: EMPTY
81201: LIST
81202: LIST
81203: LIST
81204: LIST
81205: PPUSH
81206: CALL_OW 1
81210: ST_TO_ADDR
// UpdateFactoryWaypoints ;
81211: CALL 81220 0 0
// end ;
81215: LD_VAR 0 4
81219: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
81220: LD_INT 0
81222: PPUSH
81223: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
81224: LD_STRING resetFactoryWaypoint();
81226: PPUSH
81227: CALL_OW 559
// if factoryWaypoints then
81231: LD_EXP 137
81235: IFFALSE 81358
// begin for i := 1 to factoryWaypoints do
81237: LD_ADDR_VAR 0 2
81241: PUSH
81242: DOUBLE
81243: LD_INT 1
81245: DEC
81246: ST_TO_ADDR
81247: LD_EXP 137
81251: PUSH
81252: FOR_TO
81253: IFFALSE 81356
// if factoryWaypoints [ i ] then
81255: LD_EXP 137
81259: PUSH
81260: LD_VAR 0 2
81264: ARRAY
81265: IFFALSE 81354
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
81267: LD_STRING setFactoryWaypointXY(
81269: PUSH
81270: LD_EXP 137
81274: PUSH
81275: LD_VAR 0 2
81279: ARRAY
81280: PUSH
81281: LD_INT 1
81283: ARRAY
81284: STR
81285: PUSH
81286: LD_STRING ,
81288: STR
81289: PUSH
81290: LD_EXP 137
81294: PUSH
81295: LD_VAR 0 2
81299: ARRAY
81300: PUSH
81301: LD_INT 2
81303: ARRAY
81304: STR
81305: PUSH
81306: LD_STRING ,
81308: STR
81309: PUSH
81310: LD_EXP 137
81314: PUSH
81315: LD_VAR 0 2
81319: ARRAY
81320: PUSH
81321: LD_INT 3
81323: ARRAY
81324: STR
81325: PUSH
81326: LD_STRING ,
81328: STR
81329: PUSH
81330: LD_EXP 137
81334: PUSH
81335: LD_VAR 0 2
81339: ARRAY
81340: PUSH
81341: LD_INT 4
81343: ARRAY
81344: STR
81345: PUSH
81346: LD_STRING )
81348: STR
81349: PPUSH
81350: CALL_OW 559
81354: GO 81252
81356: POP
81357: POP
// end ; end ;
81358: LD_VAR 0 1
81362: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
81363: LD_INT 0
81365: PPUSH
81366: PPUSH
81367: PPUSH
81368: PPUSH
81369: PPUSH
81370: PPUSH
81371: PPUSH
81372: PPUSH
81373: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
81374: LD_VAR 0 1
81378: NOT
81379: PUSH
81380: LD_VAR 0 2
81384: PPUSH
81385: LD_VAR 0 3
81389: PPUSH
81390: CALL_OW 488
81394: NOT
81395: OR
81396: PUSH
81397: LD_VAR 0 4
81401: NOT
81402: OR
81403: IFFALSE 81407
// exit ;
81405: GO 81747
// list := [ ] ;
81407: LD_ADDR_VAR 0 13
81411: PUSH
81412: EMPTY
81413: ST_TO_ADDR
// if x - r < 0 then
81414: LD_VAR 0 2
81418: PUSH
81419: LD_VAR 0 4
81423: MINUS
81424: PUSH
81425: LD_INT 0
81427: LESS
81428: IFFALSE 81440
// min_x := 0 else
81430: LD_ADDR_VAR 0 7
81434: PUSH
81435: LD_INT 0
81437: ST_TO_ADDR
81438: GO 81456
// min_x := x - r ;
81440: LD_ADDR_VAR 0 7
81444: PUSH
81445: LD_VAR 0 2
81449: PUSH
81450: LD_VAR 0 4
81454: MINUS
81455: ST_TO_ADDR
// if y - r < 0 then
81456: LD_VAR 0 3
81460: PUSH
81461: LD_VAR 0 4
81465: MINUS
81466: PUSH
81467: LD_INT 0
81469: LESS
81470: IFFALSE 81482
// min_y := 0 else
81472: LD_ADDR_VAR 0 8
81476: PUSH
81477: LD_INT 0
81479: ST_TO_ADDR
81480: GO 81498
// min_y := y - r ;
81482: LD_ADDR_VAR 0 8
81486: PUSH
81487: LD_VAR 0 3
81491: PUSH
81492: LD_VAR 0 4
81496: MINUS
81497: ST_TO_ADDR
// max_x := x + r ;
81498: LD_ADDR_VAR 0 9
81502: PUSH
81503: LD_VAR 0 2
81507: PUSH
81508: LD_VAR 0 4
81512: PLUS
81513: ST_TO_ADDR
// max_y := y + r ;
81514: LD_ADDR_VAR 0 10
81518: PUSH
81519: LD_VAR 0 3
81523: PUSH
81524: LD_VAR 0 4
81528: PLUS
81529: ST_TO_ADDR
// for _x = min_x to max_x do
81530: LD_ADDR_VAR 0 11
81534: PUSH
81535: DOUBLE
81536: LD_VAR 0 7
81540: DEC
81541: ST_TO_ADDR
81542: LD_VAR 0 9
81546: PUSH
81547: FOR_TO
81548: IFFALSE 81665
// for _y = min_y to max_y do
81550: LD_ADDR_VAR 0 12
81554: PUSH
81555: DOUBLE
81556: LD_VAR 0 8
81560: DEC
81561: ST_TO_ADDR
81562: LD_VAR 0 10
81566: PUSH
81567: FOR_TO
81568: IFFALSE 81661
// begin if not ValidHex ( _x , _y ) then
81570: LD_VAR 0 11
81574: PPUSH
81575: LD_VAR 0 12
81579: PPUSH
81580: CALL_OW 488
81584: NOT
81585: IFFALSE 81589
// continue ;
81587: GO 81567
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
81589: LD_VAR 0 11
81593: PPUSH
81594: LD_VAR 0 12
81598: PPUSH
81599: CALL_OW 351
81603: PUSH
81604: LD_VAR 0 11
81608: PPUSH
81609: LD_VAR 0 12
81613: PPUSH
81614: CALL_OW 554
81618: AND
81619: IFFALSE 81659
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
81621: LD_ADDR_VAR 0 13
81625: PUSH
81626: LD_VAR 0 13
81630: PPUSH
81631: LD_VAR 0 13
81635: PUSH
81636: LD_INT 1
81638: PLUS
81639: PPUSH
81640: LD_VAR 0 11
81644: PUSH
81645: LD_VAR 0 12
81649: PUSH
81650: EMPTY
81651: LIST
81652: LIST
81653: PPUSH
81654: CALL_OW 2
81658: ST_TO_ADDR
// end ;
81659: GO 81567
81661: POP
81662: POP
81663: GO 81547
81665: POP
81666: POP
// if not list then
81667: LD_VAR 0 13
81671: NOT
81672: IFFALSE 81676
// exit ;
81674: GO 81747
// for i in list do
81676: LD_ADDR_VAR 0 6
81680: PUSH
81681: LD_VAR 0 13
81685: PUSH
81686: FOR_IN
81687: IFFALSE 81745
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
81689: LD_VAR 0 1
81693: PPUSH
81694: LD_STRING M
81696: PUSH
81697: LD_VAR 0 6
81701: PUSH
81702: LD_INT 1
81704: ARRAY
81705: PUSH
81706: LD_VAR 0 6
81710: PUSH
81711: LD_INT 2
81713: ARRAY
81714: PUSH
81715: LD_INT 0
81717: PUSH
81718: LD_INT 0
81720: PUSH
81721: LD_INT 0
81723: PUSH
81724: LD_INT 0
81726: PUSH
81727: EMPTY
81728: LIST
81729: LIST
81730: LIST
81731: LIST
81732: LIST
81733: LIST
81734: LIST
81735: PUSH
81736: EMPTY
81737: LIST
81738: PPUSH
81739: CALL_OW 447
81743: GO 81686
81745: POP
81746: POP
// end ;
81747: LD_VAR 0 5
81751: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
81752: LD_EXP 138
81756: NOT
81757: IFFALSE 81807
81759: GO 81761
81761: DISABLE
// begin initHack := true ;
81762: LD_ADDR_EXP 138
81766: PUSH
81767: LD_INT 1
81769: ST_TO_ADDR
// hackTanks := [ ] ;
81770: LD_ADDR_EXP 139
81774: PUSH
81775: EMPTY
81776: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
81777: LD_ADDR_EXP 140
81781: PUSH
81782: EMPTY
81783: ST_TO_ADDR
// hackLimit := 3 ;
81784: LD_ADDR_EXP 141
81788: PUSH
81789: LD_INT 3
81791: ST_TO_ADDR
// hackDist := 12 ;
81792: LD_ADDR_EXP 142
81796: PUSH
81797: LD_INT 12
81799: ST_TO_ADDR
// hackCounter := [ ] ;
81800: LD_ADDR_EXP 143
81804: PUSH
81805: EMPTY
81806: ST_TO_ADDR
// end ;
81807: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
81808: LD_EXP 138
81812: PUSH
81813: LD_INT 34
81815: PUSH
81816: LD_EXP 61
81820: PUSH
81821: EMPTY
81822: LIST
81823: LIST
81824: PPUSH
81825: CALL_OW 69
81829: AND
81830: IFFALSE 82085
81832: GO 81834
81834: DISABLE
81835: LD_INT 0
81837: PPUSH
81838: PPUSH
// begin enable ;
81839: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
81840: LD_ADDR_VAR 0 1
81844: PUSH
81845: LD_INT 34
81847: PUSH
81848: LD_EXP 61
81852: PUSH
81853: EMPTY
81854: LIST
81855: LIST
81856: PPUSH
81857: CALL_OW 69
81861: PUSH
81862: FOR_IN
81863: IFFALSE 82083
// begin if not i in hackTanks then
81865: LD_VAR 0 1
81869: PUSH
81870: LD_EXP 139
81874: IN
81875: NOT
81876: IFFALSE 81959
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
81878: LD_ADDR_EXP 139
81882: PUSH
81883: LD_EXP 139
81887: PPUSH
81888: LD_EXP 139
81892: PUSH
81893: LD_INT 1
81895: PLUS
81896: PPUSH
81897: LD_VAR 0 1
81901: PPUSH
81902: CALL_OW 1
81906: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
81907: LD_ADDR_EXP 140
81911: PUSH
81912: LD_EXP 140
81916: PPUSH
81917: LD_EXP 140
81921: PUSH
81922: LD_INT 1
81924: PLUS
81925: PPUSH
81926: EMPTY
81927: PPUSH
81928: CALL_OW 1
81932: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
81933: LD_ADDR_EXP 143
81937: PUSH
81938: LD_EXP 143
81942: PPUSH
81943: LD_EXP 143
81947: PUSH
81948: LD_INT 1
81950: PLUS
81951: PPUSH
81952: EMPTY
81953: PPUSH
81954: CALL_OW 1
81958: ST_TO_ADDR
// end ; if not IsOk ( i ) then
81959: LD_VAR 0 1
81963: PPUSH
81964: CALL_OW 302
81968: NOT
81969: IFFALSE 81982
// begin HackUnlinkAll ( i ) ;
81971: LD_VAR 0 1
81975: PPUSH
81976: CALL 82088 0 1
// continue ;
81980: GO 81862
// end ; HackCheckCapturedStatus ( i ) ;
81982: LD_VAR 0 1
81986: PPUSH
81987: CALL 82531 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
81991: LD_ADDR_VAR 0 2
81995: PUSH
81996: LD_INT 81
81998: PUSH
81999: LD_VAR 0 1
82003: PPUSH
82004: CALL_OW 255
82008: PUSH
82009: EMPTY
82010: LIST
82011: LIST
82012: PUSH
82013: LD_INT 33
82015: PUSH
82016: LD_INT 3
82018: PUSH
82019: EMPTY
82020: LIST
82021: LIST
82022: PUSH
82023: LD_INT 91
82025: PUSH
82026: LD_VAR 0 1
82030: PUSH
82031: LD_EXP 142
82035: PUSH
82036: EMPTY
82037: LIST
82038: LIST
82039: LIST
82040: PUSH
82041: LD_INT 50
82043: PUSH
82044: EMPTY
82045: LIST
82046: PUSH
82047: EMPTY
82048: LIST
82049: LIST
82050: LIST
82051: LIST
82052: PPUSH
82053: CALL_OW 69
82057: ST_TO_ADDR
// if not tmp then
82058: LD_VAR 0 2
82062: NOT
82063: IFFALSE 82067
// continue ;
82065: GO 81862
// HackLink ( i , tmp ) ;
82067: LD_VAR 0 1
82071: PPUSH
82072: LD_VAR 0 2
82076: PPUSH
82077: CALL 82224 0 2
// end ;
82081: GO 81862
82083: POP
82084: POP
// end ;
82085: PPOPN 2
82087: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
82088: LD_INT 0
82090: PPUSH
82091: PPUSH
82092: PPUSH
// if not hack in hackTanks then
82093: LD_VAR 0 1
82097: PUSH
82098: LD_EXP 139
82102: IN
82103: NOT
82104: IFFALSE 82108
// exit ;
82106: GO 82219
// index := GetElementIndex ( hackTanks , hack ) ;
82108: LD_ADDR_VAR 0 4
82112: PUSH
82113: LD_EXP 139
82117: PPUSH
82118: LD_VAR 0 1
82122: PPUSH
82123: CALL 30068 0 2
82127: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
82128: LD_EXP 140
82132: PUSH
82133: LD_VAR 0 4
82137: ARRAY
82138: IFFALSE 82219
// begin for i in hackTanksCaptured [ index ] do
82140: LD_ADDR_VAR 0 3
82144: PUSH
82145: LD_EXP 140
82149: PUSH
82150: LD_VAR 0 4
82154: ARRAY
82155: PUSH
82156: FOR_IN
82157: IFFALSE 82183
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
82159: LD_VAR 0 3
82163: PUSH
82164: LD_INT 1
82166: ARRAY
82167: PPUSH
82168: LD_VAR 0 3
82172: PUSH
82173: LD_INT 2
82175: ARRAY
82176: PPUSH
82177: CALL_OW 235
82181: GO 82156
82183: POP
82184: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
82185: LD_ADDR_EXP 140
82189: PUSH
82190: LD_EXP 140
82194: PPUSH
82195: LD_VAR 0 4
82199: PPUSH
82200: EMPTY
82201: PPUSH
82202: CALL_OW 1
82206: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
82207: LD_VAR 0 1
82211: PPUSH
82212: LD_INT 0
82214: PPUSH
82215: CALL_OW 505
// end ; end ;
82219: LD_VAR 0 2
82223: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
82224: LD_INT 0
82226: PPUSH
82227: PPUSH
82228: PPUSH
// if not hack in hackTanks or not vehicles then
82229: LD_VAR 0 1
82233: PUSH
82234: LD_EXP 139
82238: IN
82239: NOT
82240: PUSH
82241: LD_VAR 0 2
82245: NOT
82246: OR
82247: IFFALSE 82251
// exit ;
82249: GO 82526
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
82251: LD_ADDR_VAR 0 2
82255: PUSH
82256: LD_VAR 0 1
82260: PPUSH
82261: LD_VAR 0 2
82265: PPUSH
82266: LD_INT 1
82268: PPUSH
82269: LD_INT 1
82271: PPUSH
82272: CALL 30718 0 4
82276: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
82277: LD_ADDR_VAR 0 5
82281: PUSH
82282: LD_EXP 139
82286: PPUSH
82287: LD_VAR 0 1
82291: PPUSH
82292: CALL 30068 0 2
82296: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
82297: LD_EXP 140
82301: PUSH
82302: LD_VAR 0 5
82306: ARRAY
82307: PUSH
82308: LD_EXP 141
82312: LESS
82313: IFFALSE 82502
// begin for i := 1 to vehicles do
82315: LD_ADDR_VAR 0 4
82319: PUSH
82320: DOUBLE
82321: LD_INT 1
82323: DEC
82324: ST_TO_ADDR
82325: LD_VAR 0 2
82329: PUSH
82330: FOR_TO
82331: IFFALSE 82500
// begin if hackTanksCaptured [ index ] = hackLimit then
82333: LD_EXP 140
82337: PUSH
82338: LD_VAR 0 5
82342: ARRAY
82343: PUSH
82344: LD_EXP 141
82348: EQUAL
82349: IFFALSE 82353
// break ;
82351: GO 82500
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
82353: LD_ADDR_EXP 143
82357: PUSH
82358: LD_EXP 143
82362: PPUSH
82363: LD_VAR 0 5
82367: PPUSH
82368: LD_EXP 143
82372: PUSH
82373: LD_VAR 0 5
82377: ARRAY
82378: PUSH
82379: LD_INT 1
82381: PLUS
82382: PPUSH
82383: CALL_OW 1
82387: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
82388: LD_ADDR_EXP 140
82392: PUSH
82393: LD_EXP 140
82397: PPUSH
82398: LD_VAR 0 5
82402: PUSH
82403: LD_EXP 140
82407: PUSH
82408: LD_VAR 0 5
82412: ARRAY
82413: PUSH
82414: LD_INT 1
82416: PLUS
82417: PUSH
82418: EMPTY
82419: LIST
82420: LIST
82421: PPUSH
82422: LD_VAR 0 2
82426: PUSH
82427: LD_VAR 0 4
82431: ARRAY
82432: PUSH
82433: LD_VAR 0 2
82437: PUSH
82438: LD_VAR 0 4
82442: ARRAY
82443: PPUSH
82444: CALL_OW 255
82448: PUSH
82449: EMPTY
82450: LIST
82451: LIST
82452: PPUSH
82453: CALL 30283 0 3
82457: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
82458: LD_VAR 0 2
82462: PUSH
82463: LD_VAR 0 4
82467: ARRAY
82468: PPUSH
82469: LD_VAR 0 1
82473: PPUSH
82474: CALL_OW 255
82478: PPUSH
82479: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
82483: LD_VAR 0 2
82487: PUSH
82488: LD_VAR 0 4
82492: ARRAY
82493: PPUSH
82494: CALL_OW 141
// end ;
82498: GO 82330
82500: POP
82501: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
82502: LD_VAR 0 1
82506: PPUSH
82507: LD_EXP 140
82511: PUSH
82512: LD_VAR 0 5
82516: ARRAY
82517: PUSH
82518: LD_INT 0
82520: PLUS
82521: PPUSH
82522: CALL_OW 505
// end ;
82526: LD_VAR 0 3
82530: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
82531: LD_INT 0
82533: PPUSH
82534: PPUSH
82535: PPUSH
82536: PPUSH
// if not hack in hackTanks then
82537: LD_VAR 0 1
82541: PUSH
82542: LD_EXP 139
82546: IN
82547: NOT
82548: IFFALSE 82552
// exit ;
82550: GO 82792
// index := GetElementIndex ( hackTanks , hack ) ;
82552: LD_ADDR_VAR 0 4
82556: PUSH
82557: LD_EXP 139
82561: PPUSH
82562: LD_VAR 0 1
82566: PPUSH
82567: CALL 30068 0 2
82571: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
82572: LD_ADDR_VAR 0 3
82576: PUSH
82577: DOUBLE
82578: LD_EXP 140
82582: PUSH
82583: LD_VAR 0 4
82587: ARRAY
82588: INC
82589: ST_TO_ADDR
82590: LD_INT 1
82592: PUSH
82593: FOR_DOWNTO
82594: IFFALSE 82766
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
82596: LD_ADDR_VAR 0 5
82600: PUSH
82601: LD_EXP 140
82605: PUSH
82606: LD_VAR 0 4
82610: ARRAY
82611: PUSH
82612: LD_VAR 0 3
82616: ARRAY
82617: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
82618: LD_VAR 0 5
82622: PUSH
82623: LD_INT 1
82625: ARRAY
82626: PPUSH
82627: CALL_OW 302
82631: NOT
82632: PUSH
82633: LD_VAR 0 5
82637: PUSH
82638: LD_INT 1
82640: ARRAY
82641: PPUSH
82642: CALL_OW 255
82646: PUSH
82647: LD_VAR 0 1
82651: PPUSH
82652: CALL_OW 255
82656: NONEQUAL
82657: OR
82658: IFFALSE 82764
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
82660: LD_VAR 0 5
82664: PUSH
82665: LD_INT 1
82667: ARRAY
82668: PPUSH
82669: CALL_OW 305
82673: PUSH
82674: LD_VAR 0 5
82678: PUSH
82679: LD_INT 1
82681: ARRAY
82682: PPUSH
82683: CALL_OW 255
82687: PUSH
82688: LD_VAR 0 1
82692: PPUSH
82693: CALL_OW 255
82697: EQUAL
82698: AND
82699: IFFALSE 82723
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
82701: LD_VAR 0 5
82705: PUSH
82706: LD_INT 1
82708: ARRAY
82709: PPUSH
82710: LD_VAR 0 5
82714: PUSH
82715: LD_INT 2
82717: ARRAY
82718: PPUSH
82719: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
82723: LD_ADDR_EXP 140
82727: PUSH
82728: LD_EXP 140
82732: PPUSH
82733: LD_VAR 0 4
82737: PPUSH
82738: LD_EXP 140
82742: PUSH
82743: LD_VAR 0 4
82747: ARRAY
82748: PPUSH
82749: LD_VAR 0 3
82753: PPUSH
82754: CALL_OW 3
82758: PPUSH
82759: CALL_OW 1
82763: ST_TO_ADDR
// end ; end ;
82764: GO 82593
82766: POP
82767: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
82768: LD_VAR 0 1
82772: PPUSH
82773: LD_EXP 140
82777: PUSH
82778: LD_VAR 0 4
82782: ARRAY
82783: PUSH
82784: LD_INT 0
82786: PLUS
82787: PPUSH
82788: CALL_OW 505
// end ;
82792: LD_VAR 0 2
82796: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
82797: LD_INT 0
82799: PPUSH
82800: PPUSH
82801: PPUSH
82802: PPUSH
// if not hack in hackTanks then
82803: LD_VAR 0 1
82807: PUSH
82808: LD_EXP 139
82812: IN
82813: NOT
82814: IFFALSE 82818
// exit ;
82816: GO 82903
// index := GetElementIndex ( hackTanks , hack ) ;
82818: LD_ADDR_VAR 0 5
82822: PUSH
82823: LD_EXP 139
82827: PPUSH
82828: LD_VAR 0 1
82832: PPUSH
82833: CALL 30068 0 2
82837: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
82838: LD_ADDR_VAR 0 4
82842: PUSH
82843: DOUBLE
82844: LD_INT 1
82846: DEC
82847: ST_TO_ADDR
82848: LD_EXP 140
82852: PUSH
82853: LD_VAR 0 5
82857: ARRAY
82858: PUSH
82859: FOR_TO
82860: IFFALSE 82901
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
82862: LD_EXP 140
82866: PUSH
82867: LD_VAR 0 5
82871: ARRAY
82872: PUSH
82873: LD_VAR 0 4
82877: ARRAY
82878: PUSH
82879: LD_INT 1
82881: ARRAY
82882: PUSH
82883: LD_VAR 0 2
82887: EQUAL
82888: IFFALSE 82899
// KillUnit ( vehicle ) ;
82890: LD_VAR 0 2
82894: PPUSH
82895: CALL_OW 66
82899: GO 82859
82901: POP
82902: POP
// end ;
82903: LD_VAR 0 3
82907: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
82908: LD_EXP 144
82912: NOT
82913: IFFALSE 82948
82915: GO 82917
82917: DISABLE
// begin initMiner := true ;
82918: LD_ADDR_EXP 144
82922: PUSH
82923: LD_INT 1
82925: ST_TO_ADDR
// minersList := [ ] ;
82926: LD_ADDR_EXP 145
82930: PUSH
82931: EMPTY
82932: ST_TO_ADDR
// minerMinesList := [ ] ;
82933: LD_ADDR_EXP 146
82937: PUSH
82938: EMPTY
82939: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
82940: LD_ADDR_EXP 147
82944: PUSH
82945: LD_INT 5
82947: ST_TO_ADDR
// end ;
82948: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
82949: LD_EXP 144
82953: PUSH
82954: LD_INT 34
82956: PUSH
82957: LD_EXP 66
82961: PUSH
82962: EMPTY
82963: LIST
82964: LIST
82965: PPUSH
82966: CALL_OW 69
82970: AND
82971: IFFALSE 83434
82973: GO 82975
82975: DISABLE
82976: LD_INT 0
82978: PPUSH
82979: PPUSH
82980: PPUSH
82981: PPUSH
// begin enable ;
82982: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
82983: LD_ADDR_VAR 0 1
82987: PUSH
82988: LD_INT 34
82990: PUSH
82991: LD_EXP 66
82995: PUSH
82996: EMPTY
82997: LIST
82998: LIST
82999: PPUSH
83000: CALL_OW 69
83004: PUSH
83005: FOR_IN
83006: IFFALSE 83078
// begin if not i in minersList then
83008: LD_VAR 0 1
83012: PUSH
83013: LD_EXP 145
83017: IN
83018: NOT
83019: IFFALSE 83076
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
83021: LD_ADDR_EXP 145
83025: PUSH
83026: LD_EXP 145
83030: PPUSH
83031: LD_EXP 145
83035: PUSH
83036: LD_INT 1
83038: PLUS
83039: PPUSH
83040: LD_VAR 0 1
83044: PPUSH
83045: CALL_OW 1
83049: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
83050: LD_ADDR_EXP 146
83054: PUSH
83055: LD_EXP 146
83059: PPUSH
83060: LD_EXP 146
83064: PUSH
83065: LD_INT 1
83067: PLUS
83068: PPUSH
83069: EMPTY
83070: PPUSH
83071: CALL_OW 1
83075: ST_TO_ADDR
// end end ;
83076: GO 83005
83078: POP
83079: POP
// for i := minerMinesList downto 1 do
83080: LD_ADDR_VAR 0 1
83084: PUSH
83085: DOUBLE
83086: LD_EXP 146
83090: INC
83091: ST_TO_ADDR
83092: LD_INT 1
83094: PUSH
83095: FOR_DOWNTO
83096: IFFALSE 83432
// begin if IsLive ( minersList [ i ] ) then
83098: LD_EXP 145
83102: PUSH
83103: LD_VAR 0 1
83107: ARRAY
83108: PPUSH
83109: CALL_OW 300
83113: IFFALSE 83141
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
83115: LD_EXP 145
83119: PUSH
83120: LD_VAR 0 1
83124: ARRAY
83125: PPUSH
83126: LD_EXP 146
83130: PUSH
83131: LD_VAR 0 1
83135: ARRAY
83136: PPUSH
83137: CALL_OW 505
// if not minerMinesList [ i ] then
83141: LD_EXP 146
83145: PUSH
83146: LD_VAR 0 1
83150: ARRAY
83151: NOT
83152: IFFALSE 83156
// continue ;
83154: GO 83095
// for j := minerMinesList [ i ] downto 1 do
83156: LD_ADDR_VAR 0 2
83160: PUSH
83161: DOUBLE
83162: LD_EXP 146
83166: PUSH
83167: LD_VAR 0 1
83171: ARRAY
83172: INC
83173: ST_TO_ADDR
83174: LD_INT 1
83176: PUSH
83177: FOR_DOWNTO
83178: IFFALSE 83428
// begin side := GetSide ( minersList [ i ] ) ;
83180: LD_ADDR_VAR 0 3
83184: PUSH
83185: LD_EXP 145
83189: PUSH
83190: LD_VAR 0 1
83194: ARRAY
83195: PPUSH
83196: CALL_OW 255
83200: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
83201: LD_ADDR_VAR 0 4
83205: PUSH
83206: LD_EXP 146
83210: PUSH
83211: LD_VAR 0 1
83215: ARRAY
83216: PUSH
83217: LD_VAR 0 2
83221: ARRAY
83222: PUSH
83223: LD_INT 1
83225: ARRAY
83226: PPUSH
83227: LD_EXP 146
83231: PUSH
83232: LD_VAR 0 1
83236: ARRAY
83237: PUSH
83238: LD_VAR 0 2
83242: ARRAY
83243: PUSH
83244: LD_INT 2
83246: ARRAY
83247: PPUSH
83248: CALL_OW 428
83252: ST_TO_ADDR
// if not tmp then
83253: LD_VAR 0 4
83257: NOT
83258: IFFALSE 83262
// continue ;
83260: GO 83177
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
83262: LD_VAR 0 4
83266: PUSH
83267: LD_INT 81
83269: PUSH
83270: LD_VAR 0 3
83274: PUSH
83275: EMPTY
83276: LIST
83277: LIST
83278: PPUSH
83279: CALL_OW 69
83283: IN
83284: PUSH
83285: LD_EXP 146
83289: PUSH
83290: LD_VAR 0 1
83294: ARRAY
83295: PUSH
83296: LD_VAR 0 2
83300: ARRAY
83301: PUSH
83302: LD_INT 1
83304: ARRAY
83305: PPUSH
83306: LD_EXP 146
83310: PUSH
83311: LD_VAR 0 1
83315: ARRAY
83316: PUSH
83317: LD_VAR 0 2
83321: ARRAY
83322: PUSH
83323: LD_INT 2
83325: ARRAY
83326: PPUSH
83327: CALL_OW 458
83331: AND
83332: IFFALSE 83426
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
83334: LD_EXP 146
83338: PUSH
83339: LD_VAR 0 1
83343: ARRAY
83344: PUSH
83345: LD_VAR 0 2
83349: ARRAY
83350: PUSH
83351: LD_INT 1
83353: ARRAY
83354: PPUSH
83355: LD_EXP 146
83359: PUSH
83360: LD_VAR 0 1
83364: ARRAY
83365: PUSH
83366: LD_VAR 0 2
83370: ARRAY
83371: PUSH
83372: LD_INT 2
83374: ARRAY
83375: PPUSH
83376: LD_VAR 0 3
83380: PPUSH
83381: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
83385: LD_ADDR_EXP 146
83389: PUSH
83390: LD_EXP 146
83394: PPUSH
83395: LD_VAR 0 1
83399: PPUSH
83400: LD_EXP 146
83404: PUSH
83405: LD_VAR 0 1
83409: ARRAY
83410: PPUSH
83411: LD_VAR 0 2
83415: PPUSH
83416: CALL_OW 3
83420: PPUSH
83421: CALL_OW 1
83425: ST_TO_ADDR
// end ; end ;
83426: GO 83177
83428: POP
83429: POP
// end ;
83430: GO 83095
83432: POP
83433: POP
// end ;
83434: PPOPN 4
83436: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
83437: LD_INT 0
83439: PPUSH
83440: PPUSH
// result := false ;
83441: LD_ADDR_VAR 0 4
83445: PUSH
83446: LD_INT 0
83448: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
83449: LD_VAR 0 1
83453: PPUSH
83454: CALL_OW 264
83458: PUSH
83459: LD_EXP 66
83463: EQUAL
83464: NOT
83465: IFFALSE 83469
// exit ;
83467: GO 83709
// index := GetElementIndex ( minersList , unit ) ;
83469: LD_ADDR_VAR 0 5
83473: PUSH
83474: LD_EXP 145
83478: PPUSH
83479: LD_VAR 0 1
83483: PPUSH
83484: CALL 30068 0 2
83488: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
83489: LD_EXP 146
83493: PUSH
83494: LD_VAR 0 5
83498: ARRAY
83499: PUSH
83500: LD_EXP 147
83504: GREATEREQUAL
83505: IFFALSE 83509
// exit ;
83507: GO 83709
// ComMoveXY ( unit , x , y ) ;
83509: LD_VAR 0 1
83513: PPUSH
83514: LD_VAR 0 2
83518: PPUSH
83519: LD_VAR 0 3
83523: PPUSH
83524: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
83528: LD_INT 35
83530: PPUSH
83531: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
83535: LD_VAR 0 1
83539: PPUSH
83540: LD_VAR 0 2
83544: PPUSH
83545: LD_VAR 0 3
83549: PPUSH
83550: CALL 60787 0 3
83554: NOT
83555: PUSH
83556: LD_VAR 0 1
83560: PPUSH
83561: CALL_OW 314
83565: AND
83566: IFFALSE 83570
// exit ;
83568: GO 83709
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
83570: LD_VAR 0 2
83574: PPUSH
83575: LD_VAR 0 3
83579: PPUSH
83580: CALL_OW 428
83584: PUSH
83585: LD_VAR 0 1
83589: EQUAL
83590: PUSH
83591: LD_VAR 0 1
83595: PPUSH
83596: CALL_OW 314
83600: NOT
83601: AND
83602: IFFALSE 83528
// PlaySoundXY ( x , y , PlantMine ) ;
83604: LD_VAR 0 2
83608: PPUSH
83609: LD_VAR 0 3
83613: PPUSH
83614: LD_STRING PlantMine
83616: PPUSH
83617: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
83621: LD_VAR 0 2
83625: PPUSH
83626: LD_VAR 0 3
83630: PPUSH
83631: LD_VAR 0 1
83635: PPUSH
83636: CALL_OW 255
83640: PPUSH
83641: LD_INT 0
83643: PPUSH
83644: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
83648: LD_ADDR_EXP 146
83652: PUSH
83653: LD_EXP 146
83657: PPUSH
83658: LD_VAR 0 5
83662: PUSH
83663: LD_EXP 146
83667: PUSH
83668: LD_VAR 0 5
83672: ARRAY
83673: PUSH
83674: LD_INT 1
83676: PLUS
83677: PUSH
83678: EMPTY
83679: LIST
83680: LIST
83681: PPUSH
83682: LD_VAR 0 2
83686: PUSH
83687: LD_VAR 0 3
83691: PUSH
83692: EMPTY
83693: LIST
83694: LIST
83695: PPUSH
83696: CALL 30283 0 3
83700: ST_TO_ADDR
// result := true ;
83701: LD_ADDR_VAR 0 4
83705: PUSH
83706: LD_INT 1
83708: ST_TO_ADDR
// end ;
83709: LD_VAR 0 4
83713: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
83714: LD_INT 0
83716: PPUSH
83717: PPUSH
83718: PPUSH
// if not unit in minersList then
83719: LD_VAR 0 1
83723: PUSH
83724: LD_EXP 145
83728: IN
83729: NOT
83730: IFFALSE 83734
// exit ;
83732: GO 84126
// index := GetElementIndex ( minersList , unit ) ;
83734: LD_ADDR_VAR 0 6
83738: PUSH
83739: LD_EXP 145
83743: PPUSH
83744: LD_VAR 0 1
83748: PPUSH
83749: CALL 30068 0 2
83753: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
83754: LD_ADDR_VAR 0 5
83758: PUSH
83759: DOUBLE
83760: LD_EXP 146
83764: PUSH
83765: LD_VAR 0 6
83769: ARRAY
83770: INC
83771: ST_TO_ADDR
83772: LD_INT 1
83774: PUSH
83775: FOR_DOWNTO
83776: IFFALSE 83937
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
83778: LD_EXP 146
83782: PUSH
83783: LD_VAR 0 6
83787: ARRAY
83788: PUSH
83789: LD_VAR 0 5
83793: ARRAY
83794: PUSH
83795: LD_INT 1
83797: ARRAY
83798: PUSH
83799: LD_VAR 0 2
83803: EQUAL
83804: PUSH
83805: LD_EXP 146
83809: PUSH
83810: LD_VAR 0 6
83814: ARRAY
83815: PUSH
83816: LD_VAR 0 5
83820: ARRAY
83821: PUSH
83822: LD_INT 2
83824: ARRAY
83825: PUSH
83826: LD_VAR 0 3
83830: EQUAL
83831: AND
83832: IFFALSE 83935
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
83834: LD_EXP 146
83838: PUSH
83839: LD_VAR 0 6
83843: ARRAY
83844: PUSH
83845: LD_VAR 0 5
83849: ARRAY
83850: PUSH
83851: LD_INT 1
83853: ARRAY
83854: PPUSH
83855: LD_EXP 146
83859: PUSH
83860: LD_VAR 0 6
83864: ARRAY
83865: PUSH
83866: LD_VAR 0 5
83870: ARRAY
83871: PUSH
83872: LD_INT 2
83874: ARRAY
83875: PPUSH
83876: LD_VAR 0 1
83880: PPUSH
83881: CALL_OW 255
83885: PPUSH
83886: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
83890: LD_ADDR_EXP 146
83894: PUSH
83895: LD_EXP 146
83899: PPUSH
83900: LD_VAR 0 6
83904: PPUSH
83905: LD_EXP 146
83909: PUSH
83910: LD_VAR 0 6
83914: ARRAY
83915: PPUSH
83916: LD_VAR 0 5
83920: PPUSH
83921: CALL_OW 3
83925: PPUSH
83926: CALL_OW 1
83930: ST_TO_ADDR
// exit ;
83931: POP
83932: POP
83933: GO 84126
// end ; end ;
83935: GO 83775
83937: POP
83938: POP
// for i := minerMinesList [ index ] downto 1 do
83939: LD_ADDR_VAR 0 5
83943: PUSH
83944: DOUBLE
83945: LD_EXP 146
83949: PUSH
83950: LD_VAR 0 6
83954: ARRAY
83955: INC
83956: ST_TO_ADDR
83957: LD_INT 1
83959: PUSH
83960: FOR_DOWNTO
83961: IFFALSE 84124
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
83963: LD_EXP 146
83967: PUSH
83968: LD_VAR 0 6
83972: ARRAY
83973: PUSH
83974: LD_VAR 0 5
83978: ARRAY
83979: PUSH
83980: LD_INT 1
83982: ARRAY
83983: PPUSH
83984: LD_EXP 146
83988: PUSH
83989: LD_VAR 0 6
83993: ARRAY
83994: PUSH
83995: LD_VAR 0 5
83999: ARRAY
84000: PUSH
84001: LD_INT 2
84003: ARRAY
84004: PPUSH
84005: LD_VAR 0 2
84009: PPUSH
84010: LD_VAR 0 3
84014: PPUSH
84015: CALL_OW 298
84019: PUSH
84020: LD_INT 6
84022: LESS
84023: IFFALSE 84122
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
84025: LD_EXP 146
84029: PUSH
84030: LD_VAR 0 6
84034: ARRAY
84035: PUSH
84036: LD_VAR 0 5
84040: ARRAY
84041: PUSH
84042: LD_INT 1
84044: ARRAY
84045: PPUSH
84046: LD_EXP 146
84050: PUSH
84051: LD_VAR 0 6
84055: ARRAY
84056: PUSH
84057: LD_VAR 0 5
84061: ARRAY
84062: PUSH
84063: LD_INT 2
84065: ARRAY
84066: PPUSH
84067: LD_VAR 0 1
84071: PPUSH
84072: CALL_OW 255
84076: PPUSH
84077: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
84081: LD_ADDR_EXP 146
84085: PUSH
84086: LD_EXP 146
84090: PPUSH
84091: LD_VAR 0 6
84095: PPUSH
84096: LD_EXP 146
84100: PUSH
84101: LD_VAR 0 6
84105: ARRAY
84106: PPUSH
84107: LD_VAR 0 5
84111: PPUSH
84112: CALL_OW 3
84116: PPUSH
84117: CALL_OW 1
84121: ST_TO_ADDR
// end ; end ;
84122: GO 83960
84124: POP
84125: POP
// end ;
84126: LD_VAR 0 4
84130: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
84131: LD_INT 0
84133: PPUSH
84134: PPUSH
84135: PPUSH
84136: PPUSH
84137: PPUSH
84138: PPUSH
84139: PPUSH
84140: PPUSH
84141: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
84142: LD_VAR 0 1
84146: PPUSH
84147: CALL_OW 264
84151: PUSH
84152: LD_EXP 66
84156: EQUAL
84157: NOT
84158: PUSH
84159: LD_VAR 0 1
84163: PUSH
84164: LD_EXP 145
84168: IN
84169: NOT
84170: OR
84171: IFFALSE 84175
// exit ;
84173: GO 84497
// index := GetElementIndex ( minersList , unit ) ;
84175: LD_ADDR_VAR 0 6
84179: PUSH
84180: LD_EXP 145
84184: PPUSH
84185: LD_VAR 0 1
84189: PPUSH
84190: CALL 30068 0 2
84194: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
84195: LD_ADDR_VAR 0 8
84199: PUSH
84200: LD_EXP 147
84204: PUSH
84205: LD_EXP 146
84209: PUSH
84210: LD_VAR 0 6
84214: ARRAY
84215: MINUS
84216: ST_TO_ADDR
// if not minesFreeAmount then
84217: LD_VAR 0 8
84221: NOT
84222: IFFALSE 84226
// exit ;
84224: GO 84497
// tmp := [ ] ;
84226: LD_ADDR_VAR 0 7
84230: PUSH
84231: EMPTY
84232: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
84233: LD_ADDR_VAR 0 5
84237: PUSH
84238: DOUBLE
84239: LD_INT 1
84241: DEC
84242: ST_TO_ADDR
84243: LD_VAR 0 8
84247: PUSH
84248: FOR_TO
84249: IFFALSE 84444
// begin _d := rand ( 0 , 5 ) ;
84251: LD_ADDR_VAR 0 11
84255: PUSH
84256: LD_INT 0
84258: PPUSH
84259: LD_INT 5
84261: PPUSH
84262: CALL_OW 12
84266: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
84267: LD_ADDR_VAR 0 12
84271: PUSH
84272: LD_INT 2
84274: PPUSH
84275: LD_INT 6
84277: PPUSH
84278: CALL_OW 12
84282: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
84283: LD_ADDR_VAR 0 9
84287: PUSH
84288: LD_VAR 0 2
84292: PPUSH
84293: LD_VAR 0 11
84297: PPUSH
84298: LD_VAR 0 12
84302: PPUSH
84303: CALL_OW 272
84307: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
84308: LD_ADDR_VAR 0 10
84312: PUSH
84313: LD_VAR 0 3
84317: PPUSH
84318: LD_VAR 0 11
84322: PPUSH
84323: LD_VAR 0 12
84327: PPUSH
84328: CALL_OW 273
84332: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
84333: LD_VAR 0 9
84337: PPUSH
84338: LD_VAR 0 10
84342: PPUSH
84343: CALL_OW 488
84347: PUSH
84348: LD_VAR 0 9
84352: PUSH
84353: LD_VAR 0 10
84357: PUSH
84358: EMPTY
84359: LIST
84360: LIST
84361: PUSH
84362: LD_VAR 0 7
84366: IN
84367: NOT
84368: AND
84369: PUSH
84370: LD_VAR 0 9
84374: PPUSH
84375: LD_VAR 0 10
84379: PPUSH
84380: CALL_OW 458
84384: NOT
84385: AND
84386: IFFALSE 84428
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
84388: LD_ADDR_VAR 0 7
84392: PUSH
84393: LD_VAR 0 7
84397: PPUSH
84398: LD_VAR 0 7
84402: PUSH
84403: LD_INT 1
84405: PLUS
84406: PPUSH
84407: LD_VAR 0 9
84411: PUSH
84412: LD_VAR 0 10
84416: PUSH
84417: EMPTY
84418: LIST
84419: LIST
84420: PPUSH
84421: CALL_OW 1
84425: ST_TO_ADDR
84426: GO 84442
// i := i - 1 ;
84428: LD_ADDR_VAR 0 5
84432: PUSH
84433: LD_VAR 0 5
84437: PUSH
84438: LD_INT 1
84440: MINUS
84441: ST_TO_ADDR
// end ;
84442: GO 84248
84444: POP
84445: POP
// for i in tmp do
84446: LD_ADDR_VAR 0 5
84450: PUSH
84451: LD_VAR 0 7
84455: PUSH
84456: FOR_IN
84457: IFFALSE 84495
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
84459: LD_VAR 0 1
84463: PPUSH
84464: LD_VAR 0 5
84468: PUSH
84469: LD_INT 1
84471: ARRAY
84472: PPUSH
84473: LD_VAR 0 5
84477: PUSH
84478: LD_INT 2
84480: ARRAY
84481: PPUSH
84482: CALL 83437 0 3
84486: NOT
84487: IFFALSE 84493
// exit ;
84489: POP
84490: POP
84491: GO 84497
84493: GO 84456
84495: POP
84496: POP
// end ;
84497: LD_VAR 0 4
84501: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
84502: LD_INT 0
84504: PPUSH
84505: PPUSH
84506: PPUSH
84507: PPUSH
84508: PPUSH
84509: PPUSH
84510: PPUSH
// if not GetClass ( unit ) = class_sniper then
84511: LD_VAR 0 1
84515: PPUSH
84516: CALL_OW 257
84520: PUSH
84521: LD_INT 5
84523: EQUAL
84524: NOT
84525: IFFALSE 84529
// exit ;
84527: GO 84917
// dist := 8 ;
84529: LD_ADDR_VAR 0 5
84533: PUSH
84534: LD_INT 8
84536: ST_TO_ADDR
// viewRange := 12 ;
84537: LD_ADDR_VAR 0 7
84541: PUSH
84542: LD_INT 12
84544: ST_TO_ADDR
// side := GetSide ( unit ) ;
84545: LD_ADDR_VAR 0 6
84549: PUSH
84550: LD_VAR 0 1
84554: PPUSH
84555: CALL_OW 255
84559: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
84560: LD_INT 61
84562: PPUSH
84563: LD_VAR 0 6
84567: PPUSH
84568: CALL_OW 321
84572: PUSH
84573: LD_INT 2
84575: EQUAL
84576: IFFALSE 84586
// viewRange := 16 ;
84578: LD_ADDR_VAR 0 7
84582: PUSH
84583: LD_INT 16
84585: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
84586: LD_VAR 0 1
84590: PPUSH
84591: LD_VAR 0 2
84595: PPUSH
84596: LD_VAR 0 3
84600: PPUSH
84601: CALL_OW 297
84605: PUSH
84606: LD_VAR 0 5
84610: GREATER
84611: IFFALSE 84690
// begin ComMoveXY ( unit , x , y ) ;
84613: LD_VAR 0 1
84617: PPUSH
84618: LD_VAR 0 2
84622: PPUSH
84623: LD_VAR 0 3
84627: PPUSH
84628: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
84632: LD_INT 35
84634: PPUSH
84635: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
84639: LD_VAR 0 1
84643: PPUSH
84644: LD_VAR 0 2
84648: PPUSH
84649: LD_VAR 0 3
84653: PPUSH
84654: CALL 60787 0 3
84658: NOT
84659: IFFALSE 84663
// exit ;
84661: GO 84917
// until GetDistUnitXY ( unit , x , y ) < dist ;
84663: LD_VAR 0 1
84667: PPUSH
84668: LD_VAR 0 2
84672: PPUSH
84673: LD_VAR 0 3
84677: PPUSH
84678: CALL_OW 297
84682: PUSH
84683: LD_VAR 0 5
84687: LESS
84688: IFFALSE 84632
// end ; ComTurnXY ( unit , x , y ) ;
84690: LD_VAR 0 1
84694: PPUSH
84695: LD_VAR 0 2
84699: PPUSH
84700: LD_VAR 0 3
84704: PPUSH
84705: CALL_OW 118
// wait ( 5 ) ;
84709: LD_INT 5
84711: PPUSH
84712: CALL_OW 67
// _d := GetDir ( unit ) ;
84716: LD_ADDR_VAR 0 10
84720: PUSH
84721: LD_VAR 0 1
84725: PPUSH
84726: CALL_OW 254
84730: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
84731: LD_ADDR_VAR 0 8
84735: PUSH
84736: LD_VAR 0 1
84740: PPUSH
84741: CALL_OW 250
84745: PPUSH
84746: LD_VAR 0 10
84750: PPUSH
84751: LD_VAR 0 5
84755: PPUSH
84756: CALL_OW 272
84760: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
84761: LD_ADDR_VAR 0 9
84765: PUSH
84766: LD_VAR 0 1
84770: PPUSH
84771: CALL_OW 251
84775: PPUSH
84776: LD_VAR 0 10
84780: PPUSH
84781: LD_VAR 0 5
84785: PPUSH
84786: CALL_OW 273
84790: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
84791: LD_VAR 0 8
84795: PPUSH
84796: LD_VAR 0 9
84800: PPUSH
84801: CALL_OW 488
84805: NOT
84806: IFFALSE 84810
// exit ;
84808: GO 84917
// ComAnimCustom ( unit , 1 ) ;
84810: LD_VAR 0 1
84814: PPUSH
84815: LD_INT 1
84817: PPUSH
84818: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
84822: LD_VAR 0 8
84826: PPUSH
84827: LD_VAR 0 9
84831: PPUSH
84832: LD_VAR 0 6
84836: PPUSH
84837: LD_VAR 0 7
84841: PPUSH
84842: CALL_OW 330
// repeat wait ( 1 ) ;
84846: LD_INT 1
84848: PPUSH
84849: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
84853: LD_VAR 0 1
84857: PPUSH
84858: CALL_OW 316
84862: PUSH
84863: LD_VAR 0 1
84867: PPUSH
84868: CALL_OW 314
84872: OR
84873: PUSH
84874: LD_VAR 0 1
84878: PPUSH
84879: CALL_OW 302
84883: NOT
84884: OR
84885: PUSH
84886: LD_VAR 0 1
84890: PPUSH
84891: CALL_OW 301
84895: OR
84896: IFFALSE 84846
// RemoveSeeing ( _x , _y , side ) ;
84898: LD_VAR 0 8
84902: PPUSH
84903: LD_VAR 0 9
84907: PPUSH
84908: LD_VAR 0 6
84912: PPUSH
84913: CALL_OW 331
// end ; end_of_file
84917: LD_VAR 0 4
84921: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
84922: LD_VAR 0 1
84926: PPUSH
84927: LD_VAR 0 2
84931: PPUSH
84932: LD_VAR 0 3
84936: PPUSH
84937: LD_VAR 0 4
84941: PPUSH
84942: LD_VAR 0 5
84946: PPUSH
84947: LD_VAR 0 6
84951: PPUSH
84952: CALL 65832 0 6
// end ;
84956: PPOPN 6
84958: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
84959: CALL 65807 0 0
// end ;
84963: PPOPN 1
84965: END
