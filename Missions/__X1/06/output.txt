// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 64363 0 0
// Init ;
   8: CALL 62 0 0
// if debug then
  12: LD_EXP 1
  16: IFFALSE 26
// Difficulty := 1 ;
  18: LD_ADDR_OWVAR 67
  22: PUSH
  23: LD_INT 1
  25: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  26: LD_INT 1
  28: PPUSH
  29: LD_INT 3
  31: PPUSH
  32: CALL 6862 0 2
// PrepareArabian ;
  36: CALL 369 0 0
// PrepareRussian ;
  40: CALL 7709 0 0
// Action ;
  44: CALL 15440 0 0
// if debug then
  48: LD_EXP 1
  52: IFFALSE 61
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ;
  61: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack , canRolfJoin ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 05_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 05_
  80: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_STRING 04_2_GaidarKilled
  88: PPUSH
  89: LD_INT 1
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_STRING 05_ConvoySavedCounter
 104: PPUSH
 105: LD_INT 0
 107: PPUSH
 108: CALL_OW 30
 112: ST_TO_ADDR
// bergkampfArrived := false ;
 113: LD_ADDR_EXP 3
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// omarArrived := false ;
 121: LD_ADDR_EXP 6
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// outpostDestroyed := false ;
 129: LD_ADDR_EXP 4
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// ruLoseCounter := 0 ;
 137: LD_ADDR_EXP 5
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// rolfScriptBase := false ;
 145: LD_ADDR_EXP 9
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// omarScriptBase := false ;
 153: LD_ADDR_EXP 10
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// linkedWithRolf := 0 ;
 161: LD_ADDR_EXP 12
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 169: LD_ADDR_EXP 26
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// rolfDied := false ;
 177: LD_ADDR_EXP 13
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// leninSpotted := false ;
 185: LD_ADDR_EXP 14
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// mortarConstructed := false ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// rolfHasVehicles := false ;
 201: LD_ADDR_EXP 16
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// leninScriptBase := true ;
 209: LD_ADDR_EXP 11
 213: PUSH
 214: LD_INT 1
 216: ST_TO_ADDR
// rolfWantVehicles := false ;
 217: LD_ADDR_EXP 17
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// omarWantVehicles := false ;
 225: LD_ADDR_EXP 18
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// omarHasVehicles := false ;
 233: LD_ADDR_EXP 22
 237: PUSH
 238: LD_INT 0
 240: ST_TO_ADDR
// escapeAllowed := false ;
 241: LD_ADDR_EXP 24
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 8 8$00 , 6 6$00 , 5 5$00 ] [ Difficulty ] ;
 249: LD_ADDR_EXP 19
 253: PUSH
 254: LD_INT 16800
 256: PUSH
 257: LD_INT 12600
 259: PUSH
 260: LD_INT 10500
 262: PUSH
 263: EMPTY
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] ;
 274: LD_ADDR_EXP 20
 278: PUSH
 279: LD_INT 21000
 281: PUSH
 282: LD_INT 18900
 284: PUSH
 285: LD_INT 16800
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: LIST
 292: PUSH
 293: LD_OWVAR 67
 297: ARRAY
 298: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 ] [ Difficulty ] ;
 299: LD_ADDR_EXP 21
 303: PUSH
 304: LD_INT 4
 306: PUSH
 307: LD_INT 5
 309: PUSH
 310: LD_INT 6
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: PUSH
 318: LD_OWVAR 67
 322: ARRAY
 323: ST_TO_ADDR
// omarAttack := false ;
 324: LD_ADDR_EXP 23
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// disableAttackOnHeike := false ;
 332: LD_ADDR_EXP 27
 336: PUSH
 337: LD_INT 0
 339: ST_TO_ADDR
// escapeTimer := 4 4$00 ;
 340: LD_ADDR_EXP 25
 344: PUSH
 345: LD_INT 8400
 347: ST_TO_ADDR
// firstAttack := true ;
 348: LD_ADDR_EXP 28
 352: PUSH
 353: LD_INT 1
 355: ST_TO_ADDR
// canRolfJoin := true ;
 356: LD_ADDR_EXP 29
 360: PUSH
 361: LD_INT 1
 363: ST_TO_ADDR
// end ; end_of_file
 364: LD_VAR 0 1
 368: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , tmp ; begin
 369: LD_INT 0
 371: PPUSH
 372: PPUSH
 373: PPUSH
 374: PPUSH
 375: PPUSH
 376: PPUSH
 377: PPUSH
 378: PPUSH
 379: PPUSH
 380: PPUSH
 381: PPUSH
 382: PPUSH
// uc_nation := 2 ;
 383: LD_ADDR_OWVAR 21
 387: PUSH
 388: LD_INT 2
 390: ST_TO_ADDR
// uc_side := 5 ;
 391: LD_ADDR_OWVAR 20
 395: PUSH
 396: LD_INT 5
 398: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 399: LD_ADDR_EXP 38
 403: PUSH
 404: LD_STRING Abdul
 406: PPUSH
 407: LD_INT 0
 409: PPUSH
 410: LD_STRING 
 412: PPUSH
 413: CALL 24808 0 3
 417: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 418: LD_ADDR_EXP 40
 422: PUSH
 423: LD_STRING Omar
 425: PPUSH
 426: LD_INT 0
 428: PPUSH
 429: LD_STRING 
 431: PPUSH
 432: CALL 24808 0 3
 436: ST_TO_ADDR
// uc_side := 2 ;
 437: LD_ADDR_OWVAR 20
 441: PUSH
 442: LD_INT 2
 444: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 445: LD_ADDR_EXP 30
 449: PUSH
 450: LD_STRING Heike
 452: PPUSH
 453: LD_EXP 1
 457: NOT
 458: PPUSH
 459: LD_EXP 2
 463: PPUSH
 464: CALL 24808 0 3
 468: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 469: LD_ADDR_EXP 33
 473: PUSH
 474: LD_STRING Ibrahim
 476: PPUSH
 477: LD_EXP 1
 481: NOT
 482: PPUSH
 483: LD_EXP 2
 487: PPUSH
 488: CALL 24808 0 3
 492: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 493: LD_ADDR_EXP 31
 497: PUSH
 498: LD_STRING Givi
 500: PPUSH
 501: LD_EXP 1
 505: NOT
 506: PPUSH
 507: LD_EXP 2
 511: PPUSH
 512: CALL 24808 0 3
 516: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 517: LD_ADDR_EXP 34
 521: PUSH
 522: LD_STRING Kamil
 524: PPUSH
 525: LD_EXP 1
 529: NOT
 530: PPUSH
 531: LD_EXP 2
 535: PPUSH
 536: CALL 24808 0 3
 540: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 541: LD_ADDR_EXP 35
 545: PUSH
 546: LD_STRING Kaia
 548: PPUSH
 549: LD_EXP 1
 553: NOT
 554: PPUSH
 555: LD_EXP 2
 559: PPUSH
 560: CALL 24808 0 3
 564: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 565: LD_ADDR_EXP 36
 569: PUSH
 570: LD_STRING Sophia
 572: PPUSH
 573: LD_EXP 1
 577: NOT
 578: PPUSH
 579: LD_EXP 2
 583: PPUSH
 584: CALL 24808 0 3
 588: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 589: LD_ADDR_EXP 37
 593: PUSH
 594: LD_STRING Markov
 596: PPUSH
 597: LD_EXP 1
 601: NOT
 602: PPUSH
 603: LD_EXP 2
 607: PPUSH
 608: CALL 24808 0 3
 612: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 613: LD_ADDR_EXP 42
 617: PUSH
 618: LD_STRING Aviradze
 620: PPUSH
 621: LD_EXP 1
 625: NOT
 626: PPUSH
 627: LD_EXP 2
 631: PPUSH
 632: CALL 24808 0 3
 636: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 637: LD_ADDR_EXP 41
 641: PUSH
 642: LD_STRING Kurt
 644: PPUSH
 645: LD_EXP 1
 649: NOT
 650: PPUSH
 651: LD_EXP 2
 655: PPUSH
 656: CALL 24808 0 3
 660: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 661: LD_ADDR_EXP 32
 665: PUSH
 666: LD_STRING Mike
 668: PPUSH
 669: LD_EXP 1
 673: NOT
 674: PPUSH
 675: LD_EXP 2
 679: PPUSH
 680: CALL 24808 0 3
 684: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 685: LD_ADDR_EXP 39
 689: PUSH
 690: LD_STRING Olaf
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: LD_STRING 
 698: PPUSH
 699: CALL 24808 0 3
 703: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 704: LD_ADDR_EXP 45
 708: PUSH
 709: LD_STRING 05_others
 711: PPUSH
 712: CALL_OW 31
 716: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 717: LD_ADDR_EXP 46
 721: PUSH
 722: LD_STRING 05_apes
 724: PPUSH
 725: CALL_OW 31
 729: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 730: LD_ADDR_VAR 0 5
 734: PUSH
 735: LD_STRING 05_Radar
 737: PPUSH
 738: LD_EXP 1
 742: PPUSH
 743: CALL_OW 30
 747: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 748: LD_ADDR_VAR 0 6
 752: PUSH
 753: LD_STRING 05_RemoteControl
 755: PPUSH
 756: LD_EXP 1
 760: PPUSH
 761: CALL_OW 30
 765: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 766: LD_ADDR_VAR 0 7
 770: PUSH
 771: LD_STRING 05_DrugsTested
 773: PPUSH
 774: LD_EXP 1
 778: PPUSH
 779: CALL_OW 30
 783: ST_TO_ADDR
// if hasDrugs then
 784: LD_VAR 0 7
 788: IFFALSE 803
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 790: LD_INT 5
 792: PPUSH
 793: LD_INT 2
 795: PPUSH
 796: LD_INT 2
 798: PPUSH
 799: CALL_OW 322
// if hasRadar then
 803: LD_VAR 0 5
 807: IFFALSE 822
// SetTech ( tech_radar , 2 , state_researched ) ;
 809: LD_INT 6
 811: PPUSH
 812: LD_INT 2
 814: PPUSH
 815: LD_INT 2
 817: PPUSH
 818: CALL_OW 322
// if hasRemote then
 822: LD_VAR 0 6
 826: IFFALSE 841
// SetTech ( tech_remCont , 2 , state_researched ) ;
 828: LD_INT 15
 830: PPUSH
 831: LD_INT 2
 833: PPUSH
 834: LD_INT 2
 836: PPUSH
 837: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 841: LD_ADDR_VAR 0 12
 845: PUSH
 846: LD_INT 5
 848: PPUSH
 849: LD_INT 0
 851: PPUSH
 852: CALL_OW 517
 856: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 857: LD_ADDR_VAR 0 2
 861: PUSH
 862: DOUBLE
 863: LD_INT 1
 865: DEC
 866: ST_TO_ADDR
 867: LD_VAR 0 12
 871: PUSH
 872: LD_INT 1
 874: ARRAY
 875: PUSH
 876: FOR_TO
 877: IFFALSE 954
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
 879: LD_VAR 0 12
 883: PUSH
 884: LD_INT 1
 886: ARRAY
 887: PUSH
 888: LD_VAR 0 2
 892: ARRAY
 893: PPUSH
 894: LD_VAR 0 12
 898: PUSH
 899: LD_INT 2
 901: ARRAY
 902: PUSH
 903: LD_VAR 0 2
 907: ARRAY
 908: PPUSH
 909: CALL_OW 351
 913: IFFALSE 952
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
 915: LD_VAR 0 12
 919: PUSH
 920: LD_INT 1
 922: ARRAY
 923: PUSH
 924: LD_VAR 0 2
 928: ARRAY
 929: PPUSH
 930: LD_VAR 0 12
 934: PUSH
 935: LD_INT 2
 937: ARRAY
 938: PUSH
 939: LD_VAR 0 2
 943: ARRAY
 944: PPUSH
 945: LD_INT 2
 947: PPUSH
 948: CALL_OW 244
 952: GO 876
 954: POP
 955: POP
// base := [ [ b_depot , 206 , 80 , 1 ] , [ b_bunker , 221 , 95 , 5 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 ] , [ b_lab_full , 217 , 78 , 4 ] , [ b_solar_power , 220 , 99 , 1 ] , [ b_solar_power , 220 , 103 , 1 ] , [ b_solar_power , 216 , 102 , 1 ] , [ b_ext_gun , 203 , 94 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 ] , [ b_ext_track , 199 , 91 , 1 ] , [ b_oil_power , 197 , 81 , 1 ] , [ b_oil_power , 197 , 78 , 3 ] ] ;
 956: LD_ADDR_VAR 0 4
 960: PUSH
 961: LD_INT 0
 963: PUSH
 964: LD_INT 206
 966: PUSH
 967: LD_INT 80
 969: PUSH
 970: LD_INT 1
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: LIST
 977: LIST
 978: PUSH
 979: LD_INT 32
 981: PUSH
 982: LD_INT 221
 984: PUSH
 985: LD_INT 95
 987: PUSH
 988: LD_INT 5
 990: PUSH
 991: LD_INT 23
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: LIST
1000: PUSH
1001: LD_INT 32
1003: PUSH
1004: LD_INT 223
1006: PUSH
1007: LD_INT 88
1009: PUSH
1010: LD_INT 5
1012: PUSH
1013: LD_INT 24
1015: PUSH
1016: EMPTY
1017: LIST
1018: LIST
1019: LIST
1020: LIST
1021: LIST
1022: PUSH
1023: LD_INT 32
1025: PUSH
1026: LD_INT 202
1028: PUSH
1029: LD_INT 64
1031: PUSH
1032: LD_INT 2
1034: PUSH
1035: LD_INT 25
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: LIST
1044: PUSH
1045: LD_INT 3
1047: PUSH
1048: LD_INT 203
1050: PUSH
1051: LD_INT 91
1053: PUSH
1054: LD_INT 1
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: PUSH
1063: LD_INT 8
1065: PUSH
1066: LD_INT 217
1068: PUSH
1069: LD_INT 78
1071: PUSH
1072: LD_INT 4
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: PUSH
1081: LD_INT 27
1083: PUSH
1084: LD_INT 220
1086: PUSH
1087: LD_INT 99
1089: PUSH
1090: LD_INT 1
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: PUSH
1099: LD_INT 27
1101: PUSH
1102: LD_INT 220
1104: PUSH
1105: LD_INT 103
1107: PUSH
1108: LD_INT 1
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: LIST
1115: LIST
1116: PUSH
1117: LD_INT 27
1119: PUSH
1120: LD_INT 216
1122: PUSH
1123: LD_INT 102
1125: PUSH
1126: LD_INT 1
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: PUSH
1135: LD_INT 17
1137: PUSH
1138: LD_INT 203
1140: PUSH
1141: LD_INT 94
1143: PUSH
1144: LD_INT 0
1146: PUSH
1147: EMPTY
1148: LIST
1149: LIST
1150: LIST
1151: LIST
1152: PUSH
1153: LD_INT 23
1155: PUSH
1156: LD_INT 200
1158: PUSH
1159: LD_INT 88
1161: PUSH
1162: LD_INT 2
1164: PUSH
1165: EMPTY
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: PUSH
1171: LD_INT 16
1173: PUSH
1174: LD_INT 199
1176: PUSH
1177: LD_INT 91
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: EMPTY
1184: LIST
1185: LIST
1186: LIST
1187: LIST
1188: PUSH
1189: LD_INT 26
1191: PUSH
1192: LD_INT 197
1194: PUSH
1195: LD_INT 81
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: LIST
1205: LIST
1206: PUSH
1207: LD_INT 26
1209: PUSH
1210: LD_INT 197
1212: PUSH
1213: LD_INT 78
1215: PUSH
1216: LD_INT 3
1218: PUSH
1219: EMPTY
1220: LIST
1221: LIST
1222: LIST
1223: LIST
1224: PUSH
1225: EMPTY
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: ST_TO_ADDR
// if hasRadar then
1241: LD_VAR 0 5
1245: IFFALSE 1289
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 ] ) ;
1247: LD_ADDR_VAR 0 4
1251: PUSH
1252: LD_VAR 0 4
1256: PPUSH
1257: LD_VAR 0 4
1261: PUSH
1262: LD_INT 1
1264: PLUS
1265: PPUSH
1266: LD_INT 20
1268: PUSH
1269: LD_INT 203
1271: PUSH
1272: LD_INT 87
1274: PUSH
1275: LD_INT 3
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: PPUSH
1284: CALL_OW 1
1288: ST_TO_ADDR
// if hasRemote then
1289: LD_VAR 0 6
1293: IFFALSE 1337
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 ] ) ;
1295: LD_ADDR_VAR 0 4
1299: PUSH
1300: LD_VAR 0 4
1304: PPUSH
1305: LD_VAR 0 4
1309: PUSH
1310: LD_INT 1
1312: PLUS
1313: PPUSH
1314: LD_INT 22
1316: PUSH
1317: LD_INT 207
1319: PUSH
1320: LD_INT 95
1322: PUSH
1323: LD_INT 5
1325: PUSH
1326: EMPTY
1327: LIST
1328: LIST
1329: LIST
1330: LIST
1331: PPUSH
1332: CALL_OW 1
1336: ST_TO_ADDR
// for i in base do
1337: LD_ADDR_VAR 0 2
1341: PUSH
1342: LD_VAR 0 4
1346: PUSH
1347: FOR_IN
1348: IFFALSE 1529
// begin bc_type := i [ 1 ] ;
1350: LD_ADDR_OWVAR 42
1354: PUSH
1355: LD_VAR 0 2
1359: PUSH
1360: LD_INT 1
1362: ARRAY
1363: ST_TO_ADDR
// bc_level := 3 ;
1364: LD_ADDR_OWVAR 43
1368: PUSH
1369: LD_INT 3
1371: ST_TO_ADDR
// if i [ 1 ] = b_lab_full then
1372: LD_VAR 0 2
1376: PUSH
1377: LD_INT 1
1379: ARRAY
1380: PUSH
1381: LD_INT 8
1383: EQUAL
1384: IFFALSE 1419
// begin bc_kind1 := b_lab_weapon ;
1386: LD_ADDR_OWVAR 44
1390: PUSH
1391: LD_INT 10
1393: ST_TO_ADDR
// if hasRadar then
1394: LD_VAR 0 5
1398: IFFALSE 1410
// bc_kind2 := b_lab_opto else
1400: LD_ADDR_OWVAR 45
1404: PUSH
1405: LD_INT 15
1407: ST_TO_ADDR
1408: GO 1419
// bc_kind2 := - 1 ;
1410: LD_ADDR_OWVAR 45
1414: PUSH
1415: LD_INT 1
1417: NEG
1418: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1419: LD_ADDR_VAR 0 3
1423: PUSH
1424: LD_VAR 0 2
1428: PUSH
1429: LD_INT 2
1431: ARRAY
1432: PPUSH
1433: LD_VAR 0 2
1437: PUSH
1438: LD_INT 3
1440: ARRAY
1441: PPUSH
1442: LD_VAR 0 2
1446: PUSH
1447: LD_INT 4
1449: ARRAY
1450: PPUSH
1451: CALL_OW 47
1455: ST_TO_ADDR
// if i > 4 then
1456: LD_VAR 0 2
1460: PUSH
1461: LD_INT 4
1463: GREATER
1464: IFFALSE 1484
// PlaceWeaponTurret ( b , i [ 5 ] ) ;
1466: LD_VAR 0 3
1470: PPUSH
1471: LD_VAR 0 2
1475: PUSH
1476: LD_INT 5
1478: ARRAY
1479: PPUSH
1480: CALL_OW 431
// if i [ 1 ] = b_bunker then
1484: LD_VAR 0 2
1488: PUSH
1489: LD_INT 1
1491: ARRAY
1492: PUSH
1493: LD_INT 32
1495: EQUAL
1496: IFFALSE 1527
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
1498: LD_ADDR_VAR 0 11
1502: PUSH
1503: LD_VAR 0 11
1507: PPUSH
1508: LD_VAR 0 11
1512: PUSH
1513: LD_INT 1
1515: PLUS
1516: PPUSH
1517: LD_VAR 0 3
1521: PPUSH
1522: CALL_OW 1
1526: ST_TO_ADDR
// end ;
1527: GO 1347
1529: POP
1530: POP
// depot := HexInfo ( 206 , 80 ) ;
1531: LD_ADDR_VAR 0 9
1535: PUSH
1536: LD_INT 206
1538: PPUSH
1539: LD_INT 80
1541: PPUSH
1542: CALL_OW 428
1546: ST_TO_ADDR
// factory := HexInfo ( 203 , 91 ) ;
1547: LD_ADDR_VAR 0 8
1551: PUSH
1552: LD_INT 203
1554: PPUSH
1555: LD_INT 91
1557: PPUSH
1558: CALL_OW 428
1562: ST_TO_ADDR
// lab := HexInfo ( 217 , 78 ) ;
1563: LD_ADDR_VAR 0 10
1567: PUSH
1568: LD_INT 217
1570: PPUSH
1571: LD_INT 78
1573: PPUSH
1574: CALL_OW 428
1578: ST_TO_ADDR
// arDepot := depot ;
1579: LD_ADDR_EXP 44
1583: PUSH
1584: LD_VAR 0 9
1588: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 160 ] [ Difficulty ] ) ;
1589: LD_VAR 0 9
1593: PPUSH
1594: CALL_OW 274
1598: PPUSH
1599: LD_INT 1
1601: PPUSH
1602: LD_INT 360
1604: PUSH
1605: LD_INT 260
1607: PUSH
1608: LD_INT 160
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: LIST
1615: PUSH
1616: LD_OWVAR 67
1620: ARRAY
1621: PPUSH
1622: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 130 ] [ Difficulty ] ) ;
1626: LD_VAR 0 9
1630: PPUSH
1631: CALL_OW 274
1635: PPUSH
1636: LD_INT 2
1638: PPUSH
1639: LD_INT 200
1641: PUSH
1642: LD_INT 170
1644: PUSH
1645: LD_INT 130
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: LIST
1652: PUSH
1653: LD_OWVAR 67
1657: ARRAY
1658: PPUSH
1659: CALL_OW 277
// uc_nation := 2 ;
1663: LD_ADDR_OWVAR 21
1667: PUSH
1668: LD_INT 2
1670: ST_TO_ADDR
// uc_side := 2 ;
1671: LD_ADDR_OWVAR 20
1675: PUSH
1676: LD_INT 2
1678: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
1679: LD_INT 13
1681: PPUSH
1682: LD_INT 1
1684: PPUSH
1685: LD_INT 1
1687: PPUSH
1688: LD_INT 27
1690: PPUSH
1691: LD_INT 33
1693: PPUSH
1694: CALL 29672 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
1698: CALL_OW 45
1702: PPUSH
1703: LD_INT 190
1705: PPUSH
1706: LD_INT 64
1708: PPUSH
1709: LD_INT 5
1711: PPUSH
1712: LD_INT 0
1714: PPUSH
1715: CALL 63476 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
1719: LD_INT 13
1721: PPUSH
1722: LD_INT 1
1724: PPUSH
1725: LD_INT 1
1727: PPUSH
1728: LD_INT 25
1730: PPUSH
1731: LD_INT 22
1733: PPUSH
1734: CALL 29672 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
1738: CALL_OW 45
1742: PPUSH
1743: LD_INT 188
1745: PPUSH
1746: LD_INT 67
1748: PPUSH
1749: LD_INT 5
1751: PPUSH
1752: LD_INT 0
1754: PPUSH
1755: CALL 63476 0 5
// if hasRemote then
1759: LD_VAR 0 6
1763: IFFALSE 1845
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_control_tower , 35 ) ;
1765: LD_INT 13
1767: PPUSH
1768: LD_INT 1
1770: PPUSH
1771: LD_INT 1
1773: PPUSH
1774: LD_INT 31
1776: PPUSH
1777: LD_INT 35
1779: PPUSH
1780: CALL 29672 0 5
// PlaceUnitXYD ( CreateVehicle , 191 , 71 , 5 , false ) ;
1784: CALL_OW 45
1788: PPUSH
1789: LD_INT 191
1791: PPUSH
1792: LD_INT 71
1794: PPUSH
1795: LD_INT 5
1797: PPUSH
1798: LD_INT 0
1800: PPUSH
1801: CALL 63476 0 5
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_remote , ar_gun , 55 ) ;
1805: LD_INT 14
1807: PPUSH
1808: LD_INT 1
1810: PPUSH
1811: LD_INT 2
1813: PPUSH
1814: LD_INT 27
1816: PPUSH
1817: LD_INT 55
1819: PPUSH
1820: CALL 29672 0 5
// PlaceUnitXYD ( CreateVehicle , 199 , 67 , 0 , false ) ;
1824: CALL_OW 45
1828: PPUSH
1829: LD_INT 199
1831: PPUSH
1832: LD_INT 67
1834: PPUSH
1835: LD_INT 0
1837: PPUSH
1838: LD_INT 0
1840: PPUSH
1841: CALL 63476 0 5
// end ; PlaceUnitXY ( Heike , 213 , 87 , false ) ;
1845: LD_EXP 30
1849: PPUSH
1850: LD_INT 213
1852: PPUSH
1853: LD_INT 87
1855: PPUSH
1856: LD_INT 0
1858: PPUSH
1859: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
1863: LD_EXP 30
1867: PPUSH
1868: LD_INT 214
1870: PPUSH
1871: LD_INT 87
1873: PPUSH
1874: CALL_OW 118
// if Kaia then
1878: LD_EXP 35
1882: IFFALSE 1917
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
1884: LD_EXP 35
1888: PPUSH
1889: LD_INT 213
1891: PPUSH
1892: LD_INT 85
1894: PPUSH
1895: LD_INT 0
1897: PPUSH
1898: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
1902: LD_EXP 35
1906: PPUSH
1907: LD_INT 215
1909: PPUSH
1910: LD_INT 87
1912: PPUSH
1913: CALL_OW 118
// end ; if Olaf and Kaia then
1917: LD_EXP 39
1921: PUSH
1922: LD_EXP 35
1926: AND
1927: IFFALSE 1964
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
1929: LD_EXP 39
1933: PPUSH
1934: LD_INT 215
1936: PPUSH
1937: LD_INT 87
1939: PPUSH
1940: LD_INT 0
1942: PPUSH
1943: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
1947: LD_EXP 39
1951: PPUSH
1952: LD_INT 213
1954: PPUSH
1955: LD_INT 85
1957: PPUSH
1958: CALL_OW 118
// end else
1962: GO 1984
// if Olaf then
1964: LD_EXP 39
1968: IFFALSE 1984
// PlaceHumanInUnit ( Olaf , factory ) ;
1970: LD_EXP 39
1974: PPUSH
1975: LD_VAR 0 8
1979: PPUSH
1980: CALL_OW 52
// if Givi then
1984: LD_EXP 31
1988: IFFALSE 2069
// begin if Kaia and Olaf then
1990: LD_EXP 35
1994: PUSH
1995: LD_EXP 39
1999: AND
2000: IFFALSE 2037
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
2002: LD_EXP 31
2006: PPUSH
2007: LD_INT 247
2009: PPUSH
2010: LD_INT 117
2012: PPUSH
2013: LD_INT 0
2015: PPUSH
2016: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2020: LD_EXP 31
2024: PPUSH
2025: LD_INT 248
2027: PPUSH
2028: LD_INT 118
2030: PPUSH
2031: CALL_OW 118
// end else
2035: GO 2069
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2037: LD_EXP 31
2041: PPUSH
2042: LD_INT 216
2044: PPUSH
2045: LD_INT 88
2047: PPUSH
2048: LD_INT 0
2050: PPUSH
2051: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2055: LD_EXP 31
2059: PPUSH
2060: LD_EXP 30
2064: PPUSH
2065: CALL_OW 119
// end ; end ; if Kurt then
2069: LD_EXP 41
2073: IFFALSE 2093
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2075: LD_EXP 41
2079: PPUSH
2080: LD_VAR 0 11
2084: PUSH
2085: LD_INT 2
2087: ARRAY
2088: PPUSH
2089: CALL_OW 52
// if Mike then
2093: LD_EXP 32
2097: IFFALSE 2117
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2099: LD_EXP 32
2103: PPUSH
2104: LD_VAR 0 11
2108: PUSH
2109: LD_INT 3
2111: ARRAY
2112: PPUSH
2113: CALL_OW 52
// if Kamil then
2117: LD_EXP 34
2121: IFFALSE 2183
// begin if Kaia and Olaf then
2123: LD_EXP 35
2127: PUSH
2128: LD_EXP 39
2132: AND
2133: IFFALSE 2151
// PlaceHumanInUnit ( Kamil , depot ) else
2135: LD_EXP 34
2139: PPUSH
2140: LD_VAR 0 9
2144: PPUSH
2145: CALL_OW 52
2149: GO 2183
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
2151: LD_EXP 34
2155: PPUSH
2156: LD_INT 213
2158: PPUSH
2159: LD_INT 87
2161: PPUSH
2162: LD_INT 0
2164: PPUSH
2165: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
2169: LD_EXP 34
2173: PPUSH
2174: LD_EXP 30
2178: PPUSH
2179: CALL_OW 119
// end ; end ; if Sophia then
2183: LD_EXP 36
2187: IFFALSE 2203
// PlaceHumanInUnit ( Sophia , depot ) ;
2189: LD_EXP 36
2193: PPUSH
2194: LD_VAR 0 9
2198: PPUSH
2199: CALL_OW 52
// if Aviradze then
2203: LD_EXP 42
2207: IFFALSE 2223
// PlaceHumanInUnit ( Aviradze , lab ) ;
2209: LD_EXP 42
2213: PPUSH
2214: LD_VAR 0 10
2218: PPUSH
2219: CALL_OW 52
// if Ibrahim then
2223: LD_EXP 33
2227: IFFALSE 2243
// PlaceHumanInUnit ( Ibrahim , lab ) ;
2229: LD_EXP 33
2233: PPUSH
2234: LD_VAR 0 10
2238: PPUSH
2239: CALL_OW 52
// if Markov then
2243: LD_EXP 37
2247: IFFALSE 2263
// PlaceHumanInUnit ( Markov , factory ) ;
2249: LD_EXP 37
2253: PPUSH
2254: LD_VAR 0 8
2258: PPUSH
2259: CALL_OW 52
// if heikeSecondSquad then
2263: LD_EXP 45
2267: IFFALSE 2307
// for i in heikeSecondSquad do
2269: LD_ADDR_VAR 0 2
2273: PUSH
2274: LD_EXP 45
2278: PUSH
2279: FOR_IN
2280: IFFALSE 2305
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_INT 190
2289: PPUSH
2290: LD_INT 65
2292: PPUSH
2293: LD_INT 5
2295: PPUSH
2296: LD_INT 0
2298: PPUSH
2299: CALL_OW 50
2303: GO 2279
2305: POP
2306: POP
// if heikeApes then
2307: LD_EXP 46
2311: IFFALSE 2351
// for i in heikeApes do
2313: LD_ADDR_VAR 0 2
2317: PUSH
2318: LD_EXP 46
2322: PUSH
2323: FOR_IN
2324: IFFALSE 2349
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
2326: LD_VAR 0 2
2330: PPUSH
2331: LD_INT 190
2333: PPUSH
2334: LD_INT 70
2336: PPUSH
2337: LD_INT 5
2339: PPUSH
2340: LD_INT 0
2342: PPUSH
2343: CALL_OW 50
2347: GO 2323
2349: POP
2350: POP
// end ;
2351: LD_VAR 0 1
2355: RET
// export function PrepareRolfSquad ; var i , j ; begin
2356: LD_INT 0
2358: PPUSH
2359: PPUSH
2360: PPUSH
// uc_side := 8 ;
2361: LD_ADDR_OWVAR 20
2365: PUSH
2366: LD_INT 8
2368: ST_TO_ADDR
// uc_nation := 2 ;
2369: LD_ADDR_OWVAR 21
2373: PUSH
2374: LD_INT 2
2376: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
2377: LD_ADDR_EXP 43
2381: PUSH
2382: LD_STRING Bergkamp
2384: PPUSH
2385: CALL_OW 25
2389: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
2390: LD_ADDR_EXP 47
2394: PUSH
2395: LD_EXP 43
2399: PUSH
2400: EMPTY
2401: LIST
2402: ST_TO_ADDR
// for i := 1 to 4 do
2403: LD_ADDR_VAR 0 2
2407: PUSH
2408: DOUBLE
2409: LD_INT 1
2411: DEC
2412: ST_TO_ADDR
2413: LD_INT 4
2415: PUSH
2416: FOR_TO
2417: IFFALSE 2497
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
2419: LD_ADDR_VAR 0 3
2423: PUSH
2424: DOUBLE
2425: LD_INT 1
2427: DEC
2428: ST_TO_ADDR
2429: LD_INT 5
2431: PUSH
2432: LD_INT 2
2434: PUSH
2435: LD_INT 3
2437: PUSH
2438: LD_INT 1
2440: PUSH
2441: EMPTY
2442: LIST
2443: LIST
2444: LIST
2445: LIST
2446: PUSH
2447: LD_VAR 0 2
2451: ARRAY
2452: PUSH
2453: FOR_TO
2454: IFFALSE 2493
// begin PrepareHuman ( false , i , 5 ) ;
2456: LD_INT 0
2458: PPUSH
2459: LD_VAR 0 2
2463: PPUSH
2464: LD_INT 5
2466: PPUSH
2467: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
2471: LD_ADDR_EXP 47
2475: PUSH
2476: LD_EXP 47
2480: PPUSH
2481: CALL_OW 44
2485: PPUSH
2486: CALL 61545 0 2
2490: ST_TO_ADDR
// end ;
2491: GO 2453
2493: POP
2494: POP
// end ;
2495: GO 2416
2497: POP
2498: POP
// if HexInfo ( 5 , 3 ) then
2499: LD_INT 5
2501: PPUSH
2502: LD_INT 3
2504: PPUSH
2505: CALL_OW 428
2509: IFFALSE 2526
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
2511: LD_INT 5
2513: PPUSH
2514: LD_INT 3
2516: PPUSH
2517: CALL_OW 428
2521: PPUSH
2522: CALL_OW 64
// for i in rolfSquad do
2526: LD_ADDR_VAR 0 2
2530: PUSH
2531: LD_EXP 47
2535: PUSH
2536: FOR_IN
2537: IFFALSE 2673
// begin uc_direction := 2 ;
2539: LD_ADDR_OWVAR 24
2543: PUSH
2544: LD_INT 2
2546: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
2547: LD_VAR 0 2
2551: PPUSH
2552: CALL_OW 257
2556: PUSH
2557: LD_INT 3
2559: EQUAL
2560: IFFALSE 2634
// begin uc_side := 8 ;
2562: LD_ADDR_OWVAR 20
2566: PUSH
2567: LD_INT 8
2569: ST_TO_ADDR
// uc_nation := 2 ;
2570: LD_ADDR_OWVAR 21
2574: PUSH
2575: LD_INT 2
2577: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
2578: LD_INT 13
2580: PPUSH
2581: LD_INT 1
2583: PPUSH
2584: LD_INT 1
2586: PPUSH
2587: LD_INT 27
2589: PPUSH
2590: LD_INT 88
2592: PPUSH
2593: CALL 29672 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
2597: CALL_OW 45
2601: PPUSH
2602: LD_INT 11
2604: PPUSH
2605: LD_INT 0
2607: PPUSH
2608: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
2612: LD_VAR 0 2
2616: PPUSH
2617: LD_INT 5
2619: PPUSH
2620: LD_INT 3
2622: PPUSH
2623: CALL_OW 428
2627: PPUSH
2628: CALL_OW 52
// end else
2632: GO 2649
// PlaceUnitArea ( i , northSpawn , false ) ;
2634: LD_VAR 0 2
2638: PPUSH
2639: LD_INT 11
2641: PPUSH
2642: LD_INT 0
2644: PPUSH
2645: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
2649: LD_VAR 0 2
2653: PPUSH
2654: LD_INT 29
2656: PPUSH
2657: LD_INT 10
2659: PPUSH
2660: CALL_OW 111
// wait ( 0 0$2 ) ;
2664: LD_INT 70
2666: PPUSH
2667: CALL_OW 67
// end ;
2671: GO 2536
2673: POP
2674: POP
// wait ( 0 0$5 ) ;
2675: LD_INT 175
2677: PPUSH
2678: CALL_OW 67
// end ;
2682: LD_VAR 0 1
2686: RET
// export function PrepareRolfBase ; var i , tmp ; begin
2687: LD_INT 0
2689: PPUSH
2690: PPUSH
2691: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
2692: LD_EXP 43
2696: PPUSH
2697: LD_INT 94
2699: PPUSH
2700: LD_INT 63
2702: PPUSH
2703: CALL_OW 428
2707: PPUSH
2708: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
2712: LD_ADDR_VAR 0 3
2716: PUSH
2717: LD_INT 4
2719: PUSH
2720: LD_INT 82
2722: PUSH
2723: LD_INT 64
2725: PUSH
2726: LD_INT 1
2728: PUSH
2729: EMPTY
2730: LIST
2731: LIST
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 31
2737: PUSH
2738: LD_INT 73
2740: PUSH
2741: LD_INT 58
2743: PUSH
2744: LD_INT 0
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: LIST
2751: LIST
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: ST_TO_ADDR
// for i in tmp do
2757: LD_ADDR_VAR 0 2
2761: PUSH
2762: LD_VAR 0 3
2766: PUSH
2767: FOR_IN
2768: IFFALSE 2832
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2770: LD_EXP 47
2774: PPUSH
2775: LD_INT 25
2777: PUSH
2778: LD_INT 2
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: PPUSH
2785: CALL_OW 72
2789: PPUSH
2790: LD_VAR 0 2
2794: PUSH
2795: LD_INT 1
2797: ARRAY
2798: PPUSH
2799: LD_VAR 0 2
2803: PUSH
2804: LD_INT 2
2806: ARRAY
2807: PPUSH
2808: LD_VAR 0 2
2812: PUSH
2813: LD_INT 3
2815: ARRAY
2816: PPUSH
2817: LD_VAR 0 2
2821: PUSH
2822: LD_INT 4
2824: ARRAY
2825: PPUSH
2826: CALL_OW 205
2830: GO 2767
2832: POP
2833: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
2834: LD_EXP 47
2838: PUSH
2839: LD_INT 2
2841: ARRAY
2842: PPUSH
2843: LD_INT 63
2845: PPUSH
2846: LD_INT 42
2848: PPUSH
2849: CALL_OW 428
2853: PPUSH
2854: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
2858: LD_EXP 47
2862: PUSH
2863: LD_INT 3
2865: ARRAY
2866: PPUSH
2867: LD_INT 94
2869: PPUSH
2870: LD_INT 63
2872: PPUSH
2873: CALL_OW 428
2877: PPUSH
2878: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2882: LD_INT 35
2884: PPUSH
2885: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
2889: LD_EXP 47
2893: PPUSH
2894: LD_INT 25
2896: PUSH
2897: LD_INT 2
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: PUSH
2904: LD_INT 3
2906: PUSH
2907: LD_INT 60
2909: PUSH
2910: EMPTY
2911: LIST
2912: PUSH
2913: EMPTY
2914: LIST
2915: LIST
2916: PUSH
2917: EMPTY
2918: LIST
2919: LIST
2920: PPUSH
2921: CALL_OW 72
2925: IFFALSE 2882
// rolfScriptBase := true ;
2927: LD_ADDR_EXP 9
2931: PUSH
2932: LD_INT 1
2934: ST_TO_ADDR
// end ;
2935: LD_VAR 0 1
2939: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
2940: LD_EXP 9
2944: PUSH
2945: LD_EXP 43
2949: PPUSH
2950: CALL_OW 255
2954: PUSH
2955: LD_INT 8
2957: EQUAL
2958: AND
2959: IFFALSE 3966
2961: GO 2963
2963: DISABLE
2964: LD_INT 0
2966: PPUSH
2967: PPUSH
2968: PPUSH
2969: PPUSH
2970: PPUSH
2971: PPUSH
2972: PPUSH
2973: PPUSH
2974: PPUSH
2975: PPUSH
// begin enable ;
2976: ENABLE
// if not rolfSquad then
2977: LD_EXP 47
2981: NOT
2982: IFFALSE 2986
// exit ;
2984: GO 3966
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
2986: LD_ADDR_VAR 0 9
2990: PUSH
2991: LD_INT 12
2993: PPUSH
2994: LD_INT 81
2996: PUSH
2997: LD_INT 8
2999: PUSH
3000: EMPTY
3001: LIST
3002: LIST
3003: PPUSH
3004: CALL_OW 70
3008: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
3009: LD_ADDR_VAR 0 5
3013: PUSH
3014: LD_EXP 47
3018: PPUSH
3019: LD_INT 25
3021: PUSH
3022: LD_INT 1
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: PPUSH
3029: CALL_OW 72
3033: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
3034: LD_ADDR_VAR 0 6
3038: PUSH
3039: LD_EXP 47
3043: PPUSH
3044: LD_INT 25
3046: PUSH
3047: LD_INT 2
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: PPUSH
3054: CALL_OW 72
3058: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
3059: LD_ADDR_VAR 0 8
3063: PUSH
3064: LD_EXP 47
3068: PPUSH
3069: LD_INT 25
3071: PUSH
3072: LD_INT 3
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PPUSH
3079: CALL_OW 72
3083: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
3084: LD_ADDR_VAR 0 7
3088: PUSH
3089: LD_EXP 47
3093: PPUSH
3094: LD_INT 25
3096: PUSH
3097: LD_INT 4
3099: PUSH
3100: EMPTY
3101: LIST
3102: LIST
3103: PPUSH
3104: CALL_OW 72
3108: ST_TO_ADDR
// if sol then
3109: LD_VAR 0 5
3113: IFFALSE 3411
// for i in sol union Rolf do
3115: LD_ADDR_VAR 0 1
3119: PUSH
3120: LD_VAR 0 5
3124: PUSH
3125: LD_EXP 43
3129: UNION
3130: PUSH
3131: FOR_IN
3132: IFFALSE 3409
// if not IsInUnit ( i ) and not HasTask ( i ) then
3134: LD_VAR 0 1
3138: PPUSH
3139: CALL_OW 310
3143: NOT
3144: PUSH
3145: LD_VAR 0 1
3149: PPUSH
3150: CALL_OW 314
3154: NOT
3155: AND
3156: IFFALSE 3407
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
3158: LD_VAR 0 1
3162: PPUSH
3163: CALL_OW 256
3167: PUSH
3168: LD_INT 500
3170: LESS
3171: PUSH
3172: LD_VAR 0 1
3176: PPUSH
3177: LD_INT 80
3179: PPUSH
3180: LD_INT 49
3182: PPUSH
3183: CALL_OW 297
3187: PUSH
3188: LD_INT 6
3190: GREATER
3191: AND
3192: IFFALSE 3211
// begin ComMoveXY ( i , 80 , 49 ) ;
3194: LD_VAR 0 1
3198: PPUSH
3199: LD_INT 80
3201: PPUSH
3202: LD_INT 49
3204: PPUSH
3205: CALL_OW 111
// continue ;
3209: GO 3131
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
3211: LD_ADDR_VAR 0 4
3215: PUSH
3216: LD_INT 22
3218: PUSH
3219: LD_INT 8
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: LD_INT 50
3228: PUSH
3229: EMPTY
3230: LIST
3231: PUSH
3232: LD_INT 2
3234: PUSH
3235: LD_INT 30
3237: PUSH
3238: LD_INT 4
3240: PUSH
3241: EMPTY
3242: LIST
3243: LIST
3244: PUSH
3245: LD_INT 30
3247: PUSH
3248: LD_INT 5
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PUSH
3255: LD_INT 30
3257: PUSH
3258: LD_INT 32
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: PUSH
3265: LD_INT 30
3267: PUSH
3268: LD_INT 31
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: LIST
3286: PPUSH
3287: CALL_OW 69
3291: ST_TO_ADDR
// if tmp then
3292: LD_VAR 0 4
3296: IFFALSE 3407
// begin for b in tmp do
3298: LD_ADDR_VAR 0 2
3302: PUSH
3303: LD_VAR 0 4
3307: PUSH
3308: FOR_IN
3309: IFFALSE 3405
// begin case GetBType ( b ) of b_armoury , b_barracks :
3311: LD_VAR 0 2
3315: PPUSH
3316: CALL_OW 266
3320: PUSH
3321: LD_INT 4
3323: DOUBLE
3324: EQUAL
3325: IFTRUE 3335
3327: LD_INT 5
3329: DOUBLE
3330: EQUAL
3331: IFTRUE 3335
3333: GO 3346
3335: POP
// p := 6 ; b_breastwork , b_bunker :
3336: LD_ADDR_VAR 0 3
3340: PUSH
3341: LD_INT 6
3343: ST_TO_ADDR
3344: GO 3372
3346: LD_INT 31
3348: DOUBLE
3349: EQUAL
3350: IFTRUE 3360
3352: LD_INT 32
3354: DOUBLE
3355: EQUAL
3356: IFTRUE 3360
3358: GO 3371
3360: POP
// p := 1 ; end ;
3361: LD_ADDR_VAR 0 3
3365: PUSH
3366: LD_INT 1
3368: ST_TO_ADDR
3369: GO 3372
3371: POP
// if UnitsInside ( b ) < p then
3372: LD_VAR 0 2
3376: PPUSH
3377: CALL_OW 313
3381: PUSH
3382: LD_VAR 0 3
3386: LESS
3387: IFFALSE 3403
// ComEnterUnit ( i , b ) ;
3389: LD_VAR 0 1
3393: PPUSH
3394: LD_VAR 0 2
3398: PPUSH
3399: CALL_OW 120
// end ;
3403: GO 3308
3405: POP
3406: POP
// end ; end ;
3407: GO 3131
3409: POP
3410: POP
// if sci then
3411: LD_VAR 0 7
3415: IFFALSE 3470
// for i in sci do
3417: LD_ADDR_VAR 0 1
3421: PUSH
3422: LD_VAR 0 7
3426: PUSH
3427: FOR_IN
3428: IFFALSE 3468
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
3430: LD_VAR 0 1
3434: PPUSH
3435: LD_INT 80
3437: PPUSH
3438: LD_INT 49
3440: PPUSH
3441: CALL_OW 297
3445: PUSH
3446: LD_INT 9
3448: GREATER
3449: IFFALSE 3466
// ComMoveXY ( i , 80 , 49 ) ;
3451: LD_VAR 0 1
3455: PPUSH
3456: LD_INT 80
3458: PPUSH
3459: LD_INT 49
3461: PPUSH
3462: CALL_OW 111
// end ;
3466: GO 3427
3468: POP
3469: POP
// if mech then
3470: LD_VAR 0 8
3474: IFFALSE 3688
// for i in mech do
3476: LD_ADDR_VAR 0 1
3480: PUSH
3481: LD_VAR 0 8
3485: PUSH
3486: FOR_IN
3487: IFFALSE 3686
// begin hasVehicle := IsInUnit ( i ) ;
3489: LD_ADDR_VAR 0 10
3493: PUSH
3494: LD_VAR 0 1
3498: PPUSH
3499: CALL_OW 310
3503: ST_TO_ADDR
// if enemyInBase then
3504: LD_VAR 0 9
3508: IFFALSE 3604
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
3510: LD_VAR 0 10
3514: PUSH
3515: LD_VAR 0 10
3519: PPUSH
3520: CALL_OW 256
3524: PUSH
3525: LD_INT 500
3527: GREATER
3528: AND
3529: IFFALSE 3557
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
3531: LD_VAR 0 10
3535: PPUSH
3536: LD_VAR 0 9
3540: PPUSH
3541: LD_VAR 0 10
3545: PPUSH
3546: CALL_OW 74
3550: PPUSH
3551: CALL_OW 115
3555: GO 3602
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
3557: LD_VAR 0 10
3561: PPUSH
3562: LD_INT 86
3564: PPUSH
3565: LD_INT 49
3567: PPUSH
3568: CALL_OW 297
3572: PUSH
3573: LD_INT 8
3575: GREATER
3576: IFFALSE 3602
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
3578: LD_VAR 0 10
3582: PPUSH
3583: LD_INT 86
3585: PPUSH
3586: LD_INT 49
3588: PPUSH
3589: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
3593: LD_VAR 0 1
3597: PPUSH
3598: CALL 63156 0 1
// end end else
3602: GO 3684
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
3604: LD_VAR 0 1
3608: PPUSH
3609: LD_INT 86
3611: PPUSH
3612: LD_INT 49
3614: PPUSH
3615: CALL_OW 297
3619: PUSH
3620: LD_INT 8
3622: GREATER
3623: IFFALSE 3642
// ComMoveXY ( i , 86 , 49 ) else
3625: LD_VAR 0 1
3629: PPUSH
3630: LD_INT 86
3632: PPUSH
3633: LD_INT 49
3635: PPUSH
3636: CALL_OW 111
3640: GO 3684
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
3642: LD_VAR 0 10
3646: PUSH
3647: LD_VAR 0 10
3651: PPUSH
3652: CALL_OW 256
3656: PUSH
3657: LD_INT 1000
3659: LESS
3660: AND
3661: IFFALSE 3684
// begin SetFuel ( hasVehicle , 100 ) ;
3663: LD_VAR 0 10
3667: PPUSH
3668: LD_INT 100
3670: PPUSH
3671: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
3675: LD_VAR 0 1
3679: PPUSH
3680: CALL 63036 0 1
// end ; end ; end ;
3684: GO 3486
3686: POP
3687: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3688: LD_ADDR_VAR 0 4
3692: PUSH
3693: LD_INT 12
3695: PPUSH
3696: LD_INT 3
3698: PUSH
3699: LD_INT 24
3701: PUSH
3702: LD_INT 1000
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: PUSH
3713: LD_INT 21
3715: PUSH
3716: LD_INT 3
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: PUSH
3723: EMPTY
3724: LIST
3725: LIST
3726: PPUSH
3727: CALL_OW 70
3731: ST_TO_ADDR
// if tmp and eng then
3732: LD_VAR 0 4
3736: PUSH
3737: LD_VAR 0 6
3741: AND
3742: IFFALSE 3848
// begin for i in eng do
3744: LD_ADDR_VAR 0 1
3748: PUSH
3749: LD_VAR 0 6
3753: PUSH
3754: FOR_IN
3755: IFFALSE 3846
// if IsInUnit ( i ) then
3757: LD_VAR 0 1
3761: PPUSH
3762: CALL_OW 310
3766: IFFALSE 3779
// ComExitBuilding ( i ) else
3768: LD_VAR 0 1
3772: PPUSH
3773: CALL_OW 122
3777: GO 3844
// if GetLives ( i ) = 1000 then
3779: LD_VAR 0 1
3783: PPUSH
3784: CALL_OW 256
3788: PUSH
3789: LD_INT 1000
3791: EQUAL
3792: IFFALSE 3814
// ComRepairBuilding ( i , tmp [ 1 ] ) else
3794: LD_VAR 0 1
3798: PPUSH
3799: LD_VAR 0 4
3803: PUSH
3804: LD_INT 1
3806: ARRAY
3807: PPUSH
3808: CALL_OW 130
3812: GO 3844
// if GetLives ( i ) < 700 then
3814: LD_VAR 0 1
3818: PPUSH
3819: CALL_OW 256
3823: PUSH
3824: LD_INT 700
3826: LESS
3827: IFFALSE 3844
// ComMoveXY ( i , 80 , 49 ) ;
3829: LD_VAR 0 1
3833: PPUSH
3834: LD_INT 80
3836: PPUSH
3837: LD_INT 49
3839: PPUSH
3840: CALL_OW 111
3844: GO 3754
3846: POP
3847: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
3848: LD_VAR 0 4
3852: NOT
3853: PUSH
3854: LD_VAR 0 6
3858: PPUSH
3859: LD_INT 3
3861: PUSH
3862: LD_INT 54
3864: PUSH
3865: EMPTY
3866: LIST
3867: PUSH
3868: EMPTY
3869: LIST
3870: LIST
3871: PPUSH
3872: CALL_OW 72
3876: AND
3877: IFFALSE 3966
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
3879: LD_ADDR_VAR 0 1
3883: PUSH
3884: LD_VAR 0 6
3888: PPUSH
3889: LD_INT 3
3891: PUSH
3892: LD_INT 54
3894: PUSH
3895: EMPTY
3896: LIST
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: PPUSH
3902: CALL_OW 72
3906: PUSH
3907: FOR_IN
3908: IFFALSE 3964
// if GetLives ( i ) < 1000 then
3910: LD_VAR 0 1
3914: PPUSH
3915: CALL_OW 256
3919: PUSH
3920: LD_INT 1000
3922: LESS
3923: IFFALSE 3942
// ComMoveXY ( i , 80 , 49 ) else
3925: LD_VAR 0 1
3929: PPUSH
3930: LD_INT 80
3932: PPUSH
3933: LD_INT 49
3935: PPUSH
3936: CALL_OW 111
3940: GO 3962
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
3942: LD_VAR 0 1
3946: PPUSH
3947: LD_INT 86
3949: PPUSH
3950: LD_INT 54
3952: PPUSH
3953: CALL_OW 428
3957: PPUSH
3958: CALL_OW 120
3962: GO 3907
3964: POP
3965: POP
// end ;
3966: PPOPN 10
3968: END
// export function PrepareOmarSquad ; var i , j , p ; begin
3969: LD_INT 0
3971: PPUSH
3972: PPUSH
3973: PPUSH
3974: PPUSH
// uc_side := 5 ;
3975: LD_ADDR_OWVAR 20
3979: PUSH
3980: LD_INT 5
3982: ST_TO_ADDR
// uc_nation := 2 ;
3983: LD_ADDR_OWVAR 21
3987: PUSH
3988: LD_INT 2
3990: ST_TO_ADDR
// omarSquad := [ ] ;
3991: LD_ADDR_EXP 48
3995: PUSH
3996: EMPTY
3997: ST_TO_ADDR
// for i := 1 to 4 do
3998: LD_ADDR_VAR 0 2
4002: PUSH
4003: DOUBLE
4004: LD_INT 1
4006: DEC
4007: ST_TO_ADDR
4008: LD_INT 4
4010: PUSH
4011: FOR_TO
4012: IFFALSE 4135
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
4014: LD_ADDR_VAR 0 3
4018: PUSH
4019: DOUBLE
4020: LD_INT 1
4022: DEC
4023: ST_TO_ADDR
4024: LD_INT 6
4026: PUSH
4027: LD_INT 2
4029: PUSH
4030: LD_INT 2
4032: PUSH
4033: LD_EXP 21
4037: PLUS
4038: PUSH
4039: LD_INT 2
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: PUSH
4048: LD_VAR 0 2
4052: ARRAY
4053: PUSH
4054: FOR_TO
4055: IFFALSE 4131
// begin PrepareHuman ( false , i , 5 ) ;
4057: LD_INT 0
4059: PPUSH
4060: LD_VAR 0 2
4064: PPUSH
4065: LD_INT 5
4067: PPUSH
4068: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
4072: LD_ADDR_EXP 48
4076: PUSH
4077: LD_EXP 48
4081: PPUSH
4082: CALL_OW 44
4086: PPUSH
4087: CALL 61545 0 2
4091: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
4092: LD_VAR 0 2
4096: PUSH
4097: LD_INT 1
4099: EQUAL
4100: PUSH
4101: LD_INT 50
4103: PPUSH
4104: CALL_OW 13
4108: AND
4109: IFFALSE 4129
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
4111: LD_EXP 48
4115: PUSH
4116: LD_EXP 48
4120: ARRAY
4121: PPUSH
4122: LD_INT 8
4124: PPUSH
4125: CALL_OW 336
// end ;
4129: GO 4054
4131: POP
4132: POP
// end ;
4133: GO 4011
4135: POP
4136: POP
// if HexInfo ( 340 , 205 ) then
4137: LD_INT 340
4139: PPUSH
4140: LD_INT 205
4142: PPUSH
4143: CALL_OW 428
4147: IFFALSE 4164
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
4149: LD_INT 340
4151: PPUSH
4152: LD_INT 205
4154: PPUSH
4155: CALL_OW 428
4159: PPUSH
4160: CALL_OW 64
// p := 0 ;
4164: LD_ADDR_VAR 0 4
4168: PUSH
4169: LD_INT 0
4171: ST_TO_ADDR
// for i in omarSquad do
4172: LD_ADDR_VAR 0 2
4176: PUSH
4177: LD_EXP 48
4181: PUSH
4182: FOR_IN
4183: IFFALSE 4384
// begin uc_direction := 4 ;
4185: LD_ADDR_OWVAR 24
4189: PUSH
4190: LD_INT 4
4192: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
4193: LD_VAR 0 2
4197: PPUSH
4198: CALL_OW 257
4202: PUSH
4203: LD_INT 3
4205: EQUAL
4206: PUSH
4207: LD_VAR 0 4
4211: PUSH
4212: LD_INT 2
4214: LESS
4215: AND
4216: IFFALSE 4345
// begin p := p + 1 ;
4218: LD_ADDR_VAR 0 4
4222: PUSH
4223: LD_VAR 0 4
4227: PUSH
4228: LD_INT 1
4230: PLUS
4231: ST_TO_ADDR
// uc_side := 5 ;
4232: LD_ADDR_OWVAR 20
4236: PUSH
4237: LD_INT 5
4239: ST_TO_ADDR
// if rand ( 0 , 1 ) then
4240: LD_INT 0
4242: PPUSH
4243: LD_INT 1
4245: PPUSH
4246: CALL_OW 12
4250: IFFALSE 4281
// begin uc_nation := 2 ;
4252: LD_ADDR_OWVAR 21
4256: PUSH
4257: LD_INT 2
4259: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
4260: LD_INT 13
4262: PPUSH
4263: LD_INT 1
4265: PPUSH
4266: LD_INT 1
4268: PPUSH
4269: LD_INT 27
4271: PPUSH
4272: LD_INT 88
4274: PPUSH
4275: CALL 29672 0 5
// end else
4279: GO 4308
// begin uc_nation := 3 ;
4281: LD_ADDR_OWVAR 21
4285: PUSH
4286: LD_INT 3
4288: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
4289: LD_INT 22
4291: PPUSH
4292: LD_INT 1
4294: PPUSH
4295: LD_INT 1
4297: PPUSH
4298: LD_INT 45
4300: PPUSH
4301: LD_INT 88
4303: PPUSH
4304: CALL 29672 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
4308: CALL_OW 45
4312: PPUSH
4313: LD_INT 13
4315: PPUSH
4316: LD_INT 0
4318: PPUSH
4319: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
4323: LD_VAR 0 2
4327: PPUSH
4328: LD_INT 340
4330: PPUSH
4331: LD_INT 205
4333: PPUSH
4334: CALL_OW 428
4338: PPUSH
4339: CALL_OW 52
// end else
4343: GO 4360
// PlaceUnitArea ( i , southSpawn , false ) ;
4345: LD_VAR 0 2
4349: PPUSH
4350: LD_INT 13
4352: PPUSH
4353: LD_INT 0
4355: PPUSH
4356: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
4360: LD_VAR 0 2
4364: PPUSH
4365: LD_INT 333
4367: PPUSH
4368: LD_INT 210
4370: PPUSH
4371: CALL_OW 111
// wait ( 0 0$2 ) ;
4375: LD_INT 70
4377: PPUSH
4378: CALL_OW 67
// end ;
4382: GO 4182
4384: POP
4385: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
4386: LD_EXP 40
4390: PPUSH
4391: LD_INT 340
4393: PPUSH
4394: LD_INT 205
4396: PPUSH
4397: LD_INT 0
4399: PPUSH
4400: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
4404: LD_EXP 40
4408: PPUSH
4409: LD_INT 333
4411: PPUSH
4412: LD_INT 206
4414: PPUSH
4415: CALL_OW 111
// wait ( 0 0$2 ) ;
4419: LD_INT 70
4421: PPUSH
4422: CALL_OW 67
// ComHold ( omarSquad ) ;
4426: LD_EXP 48
4430: PPUSH
4431: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
4435: LD_EXP 40
4439: PUSH
4440: LD_EXP 48
4444: PPUSH
4445: LD_INT 2
4447: PUSH
4448: LD_INT 25
4450: PUSH
4451: LD_INT 1
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: PUSH
4458: LD_INT 25
4460: PUSH
4461: LD_INT 8
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: LIST
4472: PPUSH
4473: CALL_OW 72
4477: UNION
4478: PUSH
4479: LD_INT 22
4481: PUSH
4482: LD_INT 5
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: PUSH
4489: LD_INT 21
4491: PUSH
4492: LD_INT 2
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PPUSH
4503: CALL_OW 69
4507: UNION
4508: PPUSH
4509: LD_INT 315
4511: PPUSH
4512: LD_INT 214
4514: PPUSH
4515: CALL_OW 114
// wait ( 0 0$22 ) ;
4519: LD_INT 770
4521: PPUSH
4522: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
4526: LD_EXP 48
4530: PUSH
4531: LD_EXP 40
4535: UNION
4536: PPUSH
4537: LD_INT 329
4539: PPUSH
4540: LD_INT 231
4542: PPUSH
4543: CALL_OW 114
// end ;
4547: LD_VAR 0 1
4551: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
4552: LD_EXP 10
4556: IFFALSE 5639
4558: GO 4560
4560: DISABLE
4561: LD_INT 0
4563: PPUSH
4564: PPUSH
4565: PPUSH
4566: PPUSH
4567: PPUSH
4568: PPUSH
4569: PPUSH
4570: PPUSH
4571: PPUSH
4572: PPUSH
4573: PPUSH
// begin enable ;
4574: ENABLE
// if not omarSquad then
4575: LD_EXP 48
4579: NOT
4580: IFFALSE 4584
// exit ;
4582: GO 5639
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
4584: LD_ADDR_VAR 0 10
4588: PUSH
4589: LD_INT 14
4591: PPUSH
4592: LD_INT 81
4594: PUSH
4595: LD_INT 5
4597: PUSH
4598: EMPTY
4599: LIST
4600: LIST
4601: PPUSH
4602: CALL_OW 70
4606: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
4607: LD_ADDR_VAR 0 6
4611: PUSH
4612: LD_EXP 48
4616: PPUSH
4617: LD_INT 2
4619: PUSH
4620: LD_INT 25
4622: PUSH
4623: LD_INT 1
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: PUSH
4630: LD_INT 25
4632: PUSH
4633: LD_INT 8
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: LIST
4644: PPUSH
4645: CALL_OW 72
4649: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
4650: LD_ADDR_VAR 0 7
4654: PUSH
4655: LD_EXP 48
4659: PPUSH
4660: LD_INT 25
4662: PUSH
4663: LD_INT 2
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: PPUSH
4670: CALL_OW 72
4674: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
4675: LD_ADDR_VAR 0 9
4679: PUSH
4680: LD_EXP 48
4684: PPUSH
4685: LD_INT 25
4687: PUSH
4688: LD_INT 3
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: PPUSH
4695: CALL_OW 72
4699: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
4700: LD_ADDR_VAR 0 8
4704: PUSH
4705: LD_EXP 48
4709: PPUSH
4710: LD_INT 25
4712: PUSH
4713: LD_INT 4
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: PPUSH
4720: CALL_OW 72
4724: ST_TO_ADDR
// if sol then
4725: LD_VAR 0 6
4729: IFFALSE 5093
// for i in sol do
4731: LD_ADDR_VAR 0 1
4735: PUSH
4736: LD_VAR 0 6
4740: PUSH
4741: FOR_IN
4742: IFFALSE 5091
// if not HasTask ( i ) then
4744: LD_VAR 0 1
4748: PPUSH
4749: CALL_OW 314
4753: NOT
4754: IFFALSE 5089
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
4756: LD_VAR 0 1
4760: PPUSH
4761: CALL_OW 310
4765: NOT
4766: PUSH
4767: LD_VAR 0 1
4771: PPUSH
4772: CALL_OW 256
4776: PUSH
4777: LD_INT 500
4779: LESS
4780: AND
4781: PUSH
4782: LD_VAR 0 1
4786: PPUSH
4787: LD_INT 333
4789: PPUSH
4790: LD_INT 234
4792: PPUSH
4793: CALL_OW 297
4797: PUSH
4798: LD_INT 6
4800: GREATER
4801: AND
4802: IFFALSE 4821
// begin ComMoveXY ( i , 333 , 234 ) ;
4804: LD_VAR 0 1
4808: PPUSH
4809: LD_INT 333
4811: PPUSH
4812: LD_INT 234
4814: PPUSH
4815: CALL_OW 111
// continue ;
4819: GO 4741
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4821: LD_ADDR_VAR 0 5
4825: PUSH
4826: LD_INT 22
4828: PUSH
4829: LD_INT 5
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 58
4838: PUSH
4839: EMPTY
4840: LIST
4841: PUSH
4842: LD_INT 50
4844: PUSH
4845: EMPTY
4846: LIST
4847: PUSH
4848: LD_INT 2
4850: PUSH
4851: LD_INT 30
4853: PUSH
4854: LD_INT 32
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 30
4863: PUSH
4864: LD_INT 31
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: LIST
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: PPUSH
4882: CALL_OW 69
4886: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
4887: LD_VAR 0 5
4891: PUSH
4892: LD_VAR 0 1
4896: PPUSH
4897: CALL_OW 310
4901: PPUSH
4902: CALL_OW 266
4906: PUSH
4907: LD_INT 31
4909: NONEQUAL
4910: AND
4911: IFFALSE 4993
// begin for j in tmp do
4913: LD_ADDR_VAR 0 2
4917: PUSH
4918: LD_VAR 0 5
4922: PUSH
4923: FOR_IN
4924: IFFALSE 4989
// if GetTag ( j ) <> 1 then
4926: LD_VAR 0 2
4930: PPUSH
4931: CALL_OW 110
4935: PUSH
4936: LD_INT 1
4938: NONEQUAL
4939: IFFALSE 4987
// begin SetTag ( j , 1 ) ;
4941: LD_VAR 0 2
4945: PPUSH
4946: LD_INT 1
4948: PPUSH
4949: CALL_OW 109
// if IsInUnit ( i ) then
4953: LD_VAR 0 1
4957: PPUSH
4958: CALL_OW 310
4962: IFFALSE 4973
// ComExit ( i ) ;
4964: LD_VAR 0 1
4968: PPUSH
4969: CALL 61933 0 1
// AddComEnterUnit ( i , j ) ;
4973: LD_VAR 0 1
4977: PPUSH
4978: LD_VAR 0 2
4982: PPUSH
4983: CALL_OW 180
// end ;
4987: GO 4923
4989: POP
4990: POP
// end else
4991: GO 5089
// if not IsInUnit ( i ) then
4993: LD_VAR 0 1
4997: PPUSH
4998: CALL_OW 310
5002: NOT
5003: IFFALSE 5089
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
5005: LD_ADDR_VAR 0 5
5009: PUSH
5010: LD_INT 22
5012: PUSH
5013: LD_INT 5
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: PUSH
5020: LD_INT 50
5022: PUSH
5023: EMPTY
5024: LIST
5025: PUSH
5026: LD_INT 30
5028: PUSH
5029: LD_INT 4
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: LIST
5040: PPUSH
5041: CALL_OW 69
5045: ST_TO_ADDR
// if tmp then
5046: LD_VAR 0 5
5050: IFFALSE 5089
// if UnitsInside ( tmp [ 1 ] ) < 6 then
5052: LD_VAR 0 5
5056: PUSH
5057: LD_INT 1
5059: ARRAY
5060: PPUSH
5061: CALL_OW 313
5065: PUSH
5066: LD_INT 6
5068: LESS
5069: IFFALSE 5089
// ComEnterUnit ( i , tmp [ 1 ] ) ;
5071: LD_VAR 0 1
5075: PPUSH
5076: LD_VAR 0 5
5080: PUSH
5081: LD_INT 1
5083: ARRAY
5084: PPUSH
5085: CALL_OW 120
// end ; end ;
5089: GO 4741
5091: POP
5092: POP
// if sci then
5093: LD_VAR 0 8
5097: IFFALSE 5152
// for i in sci do
5099: LD_ADDR_VAR 0 1
5103: PUSH
5104: LD_VAR 0 8
5108: PUSH
5109: FOR_IN
5110: IFFALSE 5150
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
5112: LD_VAR 0 1
5116: PPUSH
5117: LD_INT 333
5119: PPUSH
5120: LD_INT 234
5122: PPUSH
5123: CALL_OW 297
5127: PUSH
5128: LD_INT 9
5130: GREATER
5131: IFFALSE 5148
// ComMoveXY ( i , 333 , 234 ) ;
5133: LD_VAR 0 1
5137: PPUSH
5138: LD_INT 333
5140: PPUSH
5141: LD_INT 234
5143: PPUSH
5144: CALL_OW 111
// end ;
5148: GO 5109
5150: POP
5151: POP
// if mech then
5152: LD_VAR 0 9
5156: IFFALSE 5361
// for i in mech do
5158: LD_ADDR_VAR 0 1
5162: PUSH
5163: LD_VAR 0 9
5167: PUSH
5168: FOR_IN
5169: IFFALSE 5359
// begin hasVehicle := IsInUnit ( i ) ;
5171: LD_ADDR_VAR 0 11
5175: PUSH
5176: LD_VAR 0 1
5180: PPUSH
5181: CALL_OW 310
5185: ST_TO_ADDR
// if enemyInBase then
5186: LD_VAR 0 10
5190: IFFALSE 5277
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
5192: LD_VAR 0 11
5196: PUSH
5197: LD_VAR 0 11
5201: PPUSH
5202: CALL_OW 256
5206: PUSH
5207: LD_INT 500
5209: GREATER
5210: AND
5211: IFFALSE 5239
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
5213: LD_VAR 0 11
5217: PPUSH
5218: LD_VAR 0 10
5222: PPUSH
5223: LD_VAR 0 11
5227: PPUSH
5228: CALL_OW 74
5232: PPUSH
5233: CALL_OW 115
5237: GO 5275
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
5239: LD_VAR 0 11
5243: PPUSH
5244: LD_INT 333
5246: PPUSH
5247: LD_INT 234
5249: PPUSH
5250: CALL_OW 297
5254: PUSH
5255: LD_INT 6
5257: GREATER
5258: IFFALSE 5275
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
5260: LD_VAR 0 11
5264: PPUSH
5265: LD_INT 333
5267: PPUSH
5268: LD_INT 234
5270: PPUSH
5271: CALL_OW 111
// end else
5275: GO 5357
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
5277: LD_VAR 0 1
5281: PPUSH
5282: LD_INT 333
5284: PPUSH
5285: LD_INT 234
5287: PPUSH
5288: CALL_OW 297
5292: PUSH
5293: LD_INT 6
5295: GREATER
5296: IFFALSE 5315
// ComMoveXY ( i , 333 , 234 ) else
5298: LD_VAR 0 1
5302: PPUSH
5303: LD_INT 333
5305: PPUSH
5306: LD_INT 234
5308: PPUSH
5309: CALL_OW 111
5313: GO 5357
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
5315: LD_VAR 0 11
5319: PUSH
5320: LD_VAR 0 11
5324: PPUSH
5325: CALL_OW 256
5329: PUSH
5330: LD_INT 1000
5332: LESS
5333: AND
5334: IFFALSE 5357
// begin SetFuel ( hasVehicle , 100 ) ;
5336: LD_VAR 0 11
5340: PPUSH
5341: LD_INT 100
5343: PPUSH
5344: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
5348: LD_VAR 0 1
5352: PPUSH
5353: CALL 63036 0 1
// end ; end ; end ;
5357: GO 5168
5359: POP
5360: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
5361: LD_ADDR_VAR 0 5
5365: PUSH
5366: LD_INT 14
5368: PPUSH
5369: LD_INT 3
5371: PUSH
5372: LD_INT 24
5374: PUSH
5375: LD_INT 1000
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: PUSH
5382: EMPTY
5383: LIST
5384: LIST
5385: PUSH
5386: LD_INT 21
5388: PUSH
5389: LD_INT 3
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PPUSH
5400: CALL_OW 70
5404: ST_TO_ADDR
// if tmp and eng then
5405: LD_VAR 0 5
5409: PUSH
5410: LD_VAR 0 7
5414: AND
5415: IFFALSE 5521
// begin for i in eng do
5417: LD_ADDR_VAR 0 1
5421: PUSH
5422: LD_VAR 0 7
5426: PUSH
5427: FOR_IN
5428: IFFALSE 5519
// if IsInUnit ( i ) then
5430: LD_VAR 0 1
5434: PPUSH
5435: CALL_OW 310
5439: IFFALSE 5452
// ComExitBuilding ( i ) else
5441: LD_VAR 0 1
5445: PPUSH
5446: CALL_OW 122
5450: GO 5517
// if GetLives ( i ) = 1000 then
5452: LD_VAR 0 1
5456: PPUSH
5457: CALL_OW 256
5461: PUSH
5462: LD_INT 1000
5464: EQUAL
5465: IFFALSE 5487
// ComRepairBuilding ( i , tmp [ 1 ] ) else
5467: LD_VAR 0 1
5471: PPUSH
5472: LD_VAR 0 5
5476: PUSH
5477: LD_INT 1
5479: ARRAY
5480: PPUSH
5481: CALL_OW 130
5485: GO 5517
// if GetLives ( i ) < 700 then
5487: LD_VAR 0 1
5491: PPUSH
5492: CALL_OW 256
5496: PUSH
5497: LD_INT 700
5499: LESS
5500: IFFALSE 5517
// ComMoveXY ( i , 333 , 234 ) ;
5502: LD_VAR 0 1
5506: PPUSH
5507: LD_INT 333
5509: PPUSH
5510: LD_INT 234
5512: PPUSH
5513: CALL_OW 111
5517: GO 5427
5519: POP
5520: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
5521: LD_VAR 0 5
5525: NOT
5526: PUSH
5527: LD_VAR 0 7
5531: PPUSH
5532: LD_INT 3
5534: PUSH
5535: LD_INT 54
5537: PUSH
5538: EMPTY
5539: LIST
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: PPUSH
5545: CALL_OW 72
5549: AND
5550: IFFALSE 5639
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
5552: LD_ADDR_VAR 0 1
5556: PUSH
5557: LD_VAR 0 7
5561: PPUSH
5562: LD_INT 3
5564: PUSH
5565: LD_INT 54
5567: PUSH
5568: EMPTY
5569: LIST
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PPUSH
5575: CALL_OW 72
5579: PUSH
5580: FOR_IN
5581: IFFALSE 5637
// if GetLives ( i ) < 1000 then
5583: LD_VAR 0 1
5587: PPUSH
5588: CALL_OW 256
5592: PUSH
5593: LD_INT 1000
5595: LESS
5596: IFFALSE 5615
// ComMoveXY ( i , 333 , 234 ) else
5598: LD_VAR 0 1
5602: PPUSH
5603: LD_INT 333
5605: PPUSH
5606: LD_INT 234
5608: PPUSH
5609: CALL_OW 111
5613: GO 5635
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
5615: LD_VAR 0 1
5619: PPUSH
5620: LD_INT 341
5622: PPUSH
5623: LD_INT 232
5625: PPUSH
5626: CALL_OW 428
5630: PPUSH
5631: CALL_OW 120
5635: GO 5580
5637: POP
5638: POP
// end ;
5639: PPOPN 11
5641: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
5642: LD_EXP 40
5646: PPUSH
5647: CALL_OW 256
5651: PUSH
5652: LD_INT 1000
5654: LESS
5655: IFFALSE 5673
5657: GO 5659
5659: DISABLE
// begin enable ;
5660: ENABLE
// SetLives ( Omar , 1000 ) ;
5661: LD_EXP 40
5665: PPUSH
5666: LD_INT 1000
5668: PPUSH
5669: CALL_OW 234
// end ;
5673: END
// every 0 0$1 trigger omarAttack do var i , nearestPoint ;
5674: LD_EXP 23
5678: IFFALSE 6554
5680: GO 5682
5682: DISABLE
5683: LD_INT 0
5685: PPUSH
5686: PPUSH
// begin wait ( 0 0$25 ) ;
5687: LD_INT 875
5689: PPUSH
5690: CALL_OW 67
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
5694: LD_EXP 48
5698: PPUSH
5699: LD_INT 2
5701: PUSH
5702: LD_INT 25
5704: PUSH
5705: LD_INT 1
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: PUSH
5712: LD_INT 25
5714: PUSH
5715: LD_INT 8
5717: PUSH
5718: EMPTY
5719: LIST
5720: LIST
5721: PUSH
5722: EMPTY
5723: LIST
5724: LIST
5725: LIST
5726: PPUSH
5727: CALL_OW 72
5731: PPUSH
5732: CALL_OW 122
// wait ( 0 0$3 ) ;
5736: LD_INT 105
5738: PPUSH
5739: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , 225 , 223 ) ;
5743: LD_EXP 48
5747: PUSH
5748: LD_EXP 40
5752: UNION
5753: PPUSH
5754: LD_INT 225
5756: PPUSH
5757: LD_INT 223
5759: PPUSH
5760: CALL_OW 174
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_type , unit_vehicle ] ] ] ) , 167 , 231 ) ;
5764: LD_INT 22
5766: PUSH
5767: LD_INT 5
5769: PUSH
5770: EMPTY
5771: LIST
5772: LIST
5773: PUSH
5774: LD_INT 2
5776: PUSH
5777: LD_INT 25
5779: PUSH
5780: LD_INT 1
5782: PUSH
5783: EMPTY
5784: LIST
5785: LIST
5786: PUSH
5787: LD_INT 25
5789: PUSH
5790: LD_INT 8
5792: PUSH
5793: EMPTY
5794: LIST
5795: LIST
5796: PUSH
5797: LD_INT 21
5799: PUSH
5800: LD_INT 2
5802: PUSH
5803: EMPTY
5804: LIST
5805: LIST
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: LIST
5811: LIST
5812: PUSH
5813: EMPTY
5814: LIST
5815: LIST
5816: PPUSH
5817: CALL_OW 69
5821: PPUSH
5822: LD_INT 167
5824: PPUSH
5825: LD_INT 231
5827: PPUSH
5828: CALL_OW 174
// AddComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 222 , 229 ) ;
5832: LD_EXP 48
5836: PPUSH
5837: LD_INT 25
5839: PUSH
5840: LD_INT 4
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PPUSH
5847: CALL_OW 72
5851: PPUSH
5852: LD_INT 222
5854: PPUSH
5855: LD_INT 229
5857: PPUSH
5858: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5862: LD_INT 35
5864: PPUSH
5865: CALL_OW 67
// for i in omarSquad union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
5869: LD_ADDR_VAR 0 1
5873: PUSH
5874: LD_EXP 48
5878: PUSH
5879: LD_INT 22
5881: PUSH
5882: LD_INT 5
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 21
5891: PUSH
5892: LD_INT 2
5894: PUSH
5895: EMPTY
5896: LIST
5897: LIST
5898: PUSH
5899: EMPTY
5900: LIST
5901: LIST
5902: PPUSH
5903: CALL_OW 69
5907: UNION
5908: PUSH
5909: FOR_IN
5910: IFFALSE 6545
// begin if IsDead ( i ) then
5912: LD_VAR 0 1
5916: PPUSH
5917: CALL_OW 301
5921: IFFALSE 5941
// begin omarSquad := omarSquad diff i ;
5923: LD_ADDR_EXP 48
5927: PUSH
5928: LD_EXP 48
5932: PUSH
5933: LD_VAR 0 1
5937: DIFF
5938: ST_TO_ADDR
// continue ;
5939: GO 5909
// end ; if GetClass ( i ) in [ 1 , 8 ] then
5941: LD_VAR 0 1
5945: PPUSH
5946: CALL_OW 257
5950: PUSH
5951: LD_INT 1
5953: PUSH
5954: LD_INT 8
5956: PUSH
5957: EMPTY
5958: LIST
5959: LIST
5960: IN
5961: IFFALSE 6155
// begin if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
5963: LD_VAR 0 1
5967: PPUSH
5968: CALL_OW 256
5972: PUSH
5973: LD_INT 700
5975: LESS
5976: PUSH
5977: LD_VAR 0 1
5981: PPUSH
5982: CALL_OW 110
5986: PUSH
5987: LD_INT 0
5989: EQUAL
5990: AND
5991: IFFALSE 6020
// begin SetTag ( i , 1 ) ;
5993: LD_VAR 0 1
5997: PPUSH
5998: LD_INT 1
6000: PPUSH
6001: CALL_OW 109
// ComMoveXY ( i , 222 , 229 ) ;
6005: LD_VAR 0 1
6009: PPUSH
6010: LD_INT 222
6012: PPUSH
6013: LD_INT 229
6015: PPUSH
6016: CALL_OW 111
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
6020: LD_VAR 0 1
6024: PPUSH
6025: CALL_OW 256
6029: PUSH
6030: LD_INT 1000
6032: EQUAL
6033: PUSH
6034: LD_VAR 0 1
6038: PPUSH
6039: CALL_OW 110
6043: PUSH
6044: LD_INT 1
6046: EQUAL
6047: AND
6048: IFFALSE 6062
// SetTag ( i , 0 ) ;
6050: LD_VAR 0 1
6054: PPUSH
6055: LD_INT 0
6057: PPUSH
6058: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and not HasTask ( i ) then
6062: LD_VAR 0 1
6066: PPUSH
6067: CALL_OW 110
6071: PUSH
6072: LD_INT 0
6074: EQUAL
6075: PUSH
6076: LD_VAR 0 1
6080: PPUSH
6081: CALL_OW 256
6085: PUSH
6086: LD_INT 700
6088: GREATEREQUAL
6089: AND
6090: PUSH
6091: LD_VAR 0 1
6095: PPUSH
6096: CALL_OW 314
6100: NOT
6101: AND
6102: IFFALSE 6155
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6104: LD_INT 18
6106: PPUSH
6107: LD_INT 22
6109: PUSH
6110: LD_INT 3
6112: PUSH
6113: EMPTY
6114: LIST
6115: LIST
6116: PPUSH
6117: CALL_OW 70
6121: IFFALSE 6140
// ComAgressiveMove ( i , 167 , 231 ) else
6123: LD_VAR 0 1
6127: PPUSH
6128: LD_INT 167
6130: PPUSH
6131: LD_INT 231
6133: PPUSH
6134: CALL_OW 114
6138: GO 6155
// ComAgressiveMove ( i , 106 , 153 ) ;
6140: LD_VAR 0 1
6144: PPUSH
6145: LD_INT 106
6147: PPUSH
6148: LD_INT 153
6150: PPUSH
6151: CALL_OW 114
// end ; if GetType ( i ) = unit_vehicle then
6155: LD_VAR 0 1
6159: PPUSH
6160: CALL_OW 247
6164: PUSH
6165: LD_INT 2
6167: EQUAL
6168: IFFALSE 6543
// begin nearestPoint := [ 219 , 219 ] ;
6170: LD_ADDR_VAR 0 2
6174: PUSH
6175: LD_INT 219
6177: PUSH
6178: LD_INT 219
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: ST_TO_ADDR
// if GetDistUnitXY ( i , 156 , 202 ) < GetDistUnitXY ( i , 219 , 219 ) then
6185: LD_VAR 0 1
6189: PPUSH
6190: LD_INT 156
6192: PPUSH
6193: LD_INT 202
6195: PPUSH
6196: CALL_OW 297
6200: PUSH
6201: LD_VAR 0 1
6205: PPUSH
6206: LD_INT 219
6208: PPUSH
6209: LD_INT 219
6211: PPUSH
6212: CALL_OW 297
6216: LESS
6217: IFFALSE 6234
// nearestPoint := [ 156 , 202 ] ;
6219: LD_ADDR_VAR 0 2
6223: PUSH
6224: LD_INT 156
6226: PUSH
6227: LD_INT 202
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: ST_TO_ADDR
// if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
6234: LD_VAR 0 1
6238: PPUSH
6239: CALL_OW 256
6243: PUSH
6244: LD_INT 700
6246: LESS
6247: PUSH
6248: LD_VAR 0 1
6252: PPUSH
6253: CALL_OW 110
6257: PUSH
6258: LD_INT 0
6260: EQUAL
6261: AND
6262: IFFALSE 6303
// begin SetTag ( i , 1 ) ;
6264: LD_VAR 0 1
6268: PPUSH
6269: LD_INT 1
6271: PPUSH
6272: CALL_OW 109
// ComMoveXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) ;
6276: LD_VAR 0 1
6280: PPUSH
6281: LD_VAR 0 2
6285: PUSH
6286: LD_INT 1
6288: ARRAY
6289: PPUSH
6290: LD_VAR 0 2
6294: PUSH
6295: LD_INT 2
6297: ARRAY
6298: PPUSH
6299: CALL_OW 111
// end ; if GetLives ( i ) < 700 and GetTag ( i ) = 1 and IsDrivenBy ( i ) and GetDistUnitXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) < 10 then
6303: LD_VAR 0 1
6307: PPUSH
6308: CALL_OW 256
6312: PUSH
6313: LD_INT 700
6315: LESS
6316: PUSH
6317: LD_VAR 0 1
6321: PPUSH
6322: CALL_OW 110
6326: PUSH
6327: LD_INT 1
6329: EQUAL
6330: AND
6331: PUSH
6332: LD_VAR 0 1
6336: PPUSH
6337: CALL_OW 311
6341: AND
6342: PUSH
6343: LD_VAR 0 1
6347: PPUSH
6348: LD_VAR 0 2
6352: PUSH
6353: LD_INT 1
6355: ARRAY
6356: PPUSH
6357: LD_VAR 0 2
6361: PUSH
6362: LD_INT 2
6364: ARRAY
6365: PPUSH
6366: CALL_OW 297
6370: PUSH
6371: LD_INT 10
6373: LESS
6374: AND
6375: IFFALSE 6386
// ComRepairVehicleAndReturn ( i ) ;
6377: LD_VAR 0 1
6381: PPUSH
6382: CALL 63036 0 1
// if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
6386: LD_VAR 0 1
6390: PPUSH
6391: CALL_OW 256
6395: PUSH
6396: LD_INT 1000
6398: EQUAL
6399: PUSH
6400: LD_VAR 0 1
6404: PPUSH
6405: CALL_OW 110
6409: PUSH
6410: LD_INT 1
6412: EQUAL
6413: AND
6414: PUSH
6415: LD_VAR 0 1
6419: PPUSH
6420: CALL_OW 311
6424: AND
6425: IFFALSE 6439
// SetTag ( i , 0 ) ;
6427: LD_VAR 0 1
6431: PPUSH
6432: LD_INT 0
6434: PPUSH
6435: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and IsDrivenBy ( i ) and not HasTask ( i ) then
6439: LD_VAR 0 1
6443: PPUSH
6444: CALL_OW 110
6448: PUSH
6449: LD_INT 0
6451: EQUAL
6452: PUSH
6453: LD_VAR 0 1
6457: PPUSH
6458: CALL_OW 256
6462: PUSH
6463: LD_INT 700
6465: GREATEREQUAL
6466: AND
6467: PUSH
6468: LD_VAR 0 1
6472: PPUSH
6473: CALL_OW 311
6477: AND
6478: PUSH
6479: LD_VAR 0 1
6483: PPUSH
6484: CALL_OW 314
6488: NOT
6489: AND
6490: IFFALSE 6543
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6492: LD_INT 18
6494: PPUSH
6495: LD_INT 22
6497: PUSH
6498: LD_INT 3
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PPUSH
6505: CALL_OW 70
6509: IFFALSE 6528
// ComAgressiveMove ( i , 167 , 231 ) else
6511: LD_VAR 0 1
6515: PPUSH
6516: LD_INT 167
6518: PPUSH
6519: LD_INT 231
6521: PPUSH
6522: CALL_OW 114
6526: GO 6543
// ComAgressiveMove ( i , 106 , 153 ) ;
6528: LD_VAR 0 1
6532: PPUSH
6533: LD_INT 106
6535: PPUSH
6536: LD_INT 153
6538: PPUSH
6539: CALL_OW 114
// end ; end ;
6543: GO 5909
6545: POP
6546: POP
// until not omarSquad ;
6547: LD_EXP 48
6551: NOT
6552: IFFALSE 5862
// end ; end_of_file
6554: PPOPN 2
6556: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
6557: LD_INT 0
6559: PPUSH
// uc_side := side ;
6560: LD_ADDR_OWVAR 20
6564: PUSH
6565: LD_VAR 0 1
6569: ST_TO_ADDR
// uc_nation := nation ;
6570: LD_ADDR_OWVAR 21
6574: PUSH
6575: LD_VAR 0 2
6579: ST_TO_ADDR
// vc_chassis := chassis ;
6580: LD_ADDR_OWVAR 37
6584: PUSH
6585: LD_VAR 0 3
6589: ST_TO_ADDR
// vc_engine := engine ;
6590: LD_ADDR_OWVAR 39
6594: PUSH
6595: LD_VAR 0 4
6599: ST_TO_ADDR
// vc_control := control ;
6600: LD_ADDR_OWVAR 38
6604: PUSH
6605: LD_VAR 0 5
6609: ST_TO_ADDR
// vc_weapon := weapon ;
6610: LD_ADDR_OWVAR 40
6614: PUSH
6615: LD_VAR 0 6
6619: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6620: LD_ADDR_OWVAR 41
6624: PUSH
6625: LD_VAR 0 7
6629: ST_TO_ADDR
// result := CreateVehicle ;
6630: LD_ADDR_VAR 0 8
6634: PUSH
6635: CALL_OW 45
6639: ST_TO_ADDR
// end ;
6640: LD_VAR 0 8
6644: RET
// export function SayX ( units , ident ) ; var i ; begin
6645: LD_INT 0
6647: PPUSH
6648: PPUSH
// result := false ;
6649: LD_ADDR_VAR 0 3
6653: PUSH
6654: LD_INT 0
6656: ST_TO_ADDR
// if not units then
6657: LD_VAR 0 1
6661: NOT
6662: IFFALSE 6666
// exit ;
6664: GO 6720
// for i in units do
6666: LD_ADDR_VAR 0 4
6670: PUSH
6671: LD_VAR 0 1
6675: PUSH
6676: FOR_IN
6677: IFFALSE 6718
// if IsOk ( i ) then
6679: LD_VAR 0 4
6683: PPUSH
6684: CALL_OW 302
6688: IFFALSE 6716
// begin Say ( i , ident ) ;
6690: LD_VAR 0 4
6694: PPUSH
6695: LD_VAR 0 2
6699: PPUSH
6700: CALL_OW 88
// result := i ;
6704: LD_ADDR_VAR 0 3
6708: PUSH
6709: LD_VAR 0 4
6713: ST_TO_ADDR
// break ;
6714: GO 6718
// end ;
6716: GO 6676
6718: POP
6719: POP
// end ;
6720: LD_VAR 0 3
6724: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
6725: LD_INT 0
6727: PPUSH
6728: PPUSH
// InitUc ;
6729: CALL_OW 18
// InitHc ;
6733: CALL_OW 19
// uc_side := 0 ;
6737: LD_ADDR_OWVAR 20
6741: PUSH
6742: LD_INT 0
6744: ST_TO_ADDR
// uc_nation := 0 ;
6745: LD_ADDR_OWVAR 21
6749: PUSH
6750: LD_INT 0
6752: ST_TO_ADDR
// for i = 1 to amount do
6753: LD_ADDR_VAR 0 4
6757: PUSH
6758: DOUBLE
6759: LD_INT 1
6761: DEC
6762: ST_TO_ADDR
6763: LD_VAR 0 2
6767: PUSH
6768: FOR_TO
6769: IFFALSE 6851
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
6771: LD_ADDR_OWVAR 29
6775: PUSH
6776: LD_INT 9
6778: PPUSH
6779: LD_INT 12
6781: PPUSH
6782: CALL_OW 12
6786: PUSH
6787: LD_INT 9
6789: PPUSH
6790: LD_INT 12
6792: PPUSH
6793: CALL_OW 12
6797: PUSH
6798: EMPTY
6799: LIST
6800: LIST
6801: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
6802: LD_ADDR_OWVAR 35
6806: PUSH
6807: LD_INT 1
6809: NEG
6810: PPUSH
6811: LD_INT 1
6813: PPUSH
6814: CALL_OW 12
6818: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
6819: LD_INT 0
6821: PPUSH
6822: LD_INT 12
6824: PPUSH
6825: LD_INT 1
6827: PPUSH
6828: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
6832: CALL_OW 44
6836: PPUSH
6837: LD_VAR 0 1
6841: PPUSH
6842: LD_INT 0
6844: PPUSH
6845: CALL_OW 49
// end ;
6849: GO 6768
6851: POP
6852: POP
// InitHc ;
6853: CALL_OW 19
// end ;
6857: LD_VAR 0 3
6861: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
6862: LD_INT 0
6864: PPUSH
6865: PPUSH
// uc_side := 0 ;
6866: LD_ADDR_OWVAR 20
6870: PUSH
6871: LD_INT 0
6873: ST_TO_ADDR
// uc_nation := 0 ;
6874: LD_ADDR_OWVAR 21
6878: PUSH
6879: LD_INT 0
6881: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 ] [ Difficulty ] ) ;
6882: LD_INT 7
6884: PPUSH
6885: LD_INT 6
6887: PUSH
6888: LD_INT 5
6890: PUSH
6891: LD_INT 4
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: LIST
6898: PUSH
6899: LD_OWVAR 67
6903: ARRAY
6904: PPUSH
6905: CALL 6725 0 2
// for i = 1 to 2 do
6909: LD_ADDR_VAR 0 4
6913: PUSH
6914: DOUBLE
6915: LD_INT 1
6917: DEC
6918: ST_TO_ADDR
6919: LD_INT 2
6921: PUSH
6922: FOR_TO
6923: IFFALSE 6962
// begin vc_chassis := class_mastodont ;
6925: LD_ADDR_OWVAR 37
6929: PUSH
6930: LD_EXP 76
6934: ST_TO_ADDR
// vc_control := control_rider ;
6935: LD_ADDR_OWVAR 38
6939: PUSH
6940: LD_INT 4
6942: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
6943: CALL_OW 45
6947: PPUSH
6948: LD_VAR 0 1
6952: PPUSH
6953: LD_INT 0
6955: PPUSH
6956: CALL 60459 0 3
// end ;
6960: GO 6922
6962: POP
6963: POP
// for i := 1 to 4 do
6964: LD_ADDR_VAR 0 4
6968: PUSH
6969: DOUBLE
6970: LD_INT 1
6972: DEC
6973: ST_TO_ADDR
6974: LD_INT 4
6976: PUSH
6977: FOR_TO
6978: IFFALSE 7017
// begin hc_class := class_horse ;
6980: LD_ADDR_OWVAR 28
6984: PUSH
6985: LD_EXP 77
6989: ST_TO_ADDR
// hc_gallery :=  ;
6990: LD_ADDR_OWVAR 33
6994: PUSH
6995: LD_STRING 
6997: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
6998: CALL_OW 44
7002: PPUSH
7003: LD_VAR 0 1
7007: PPUSH
7008: LD_INT 0
7010: PPUSH
7011: CALL_OW 49
// end ;
7015: GO 6977
7017: POP
7018: POP
// for i = 1 to 5 do
7019: LD_ADDR_VAR 0 4
7023: PUSH
7024: DOUBLE
7025: LD_INT 1
7027: DEC
7028: ST_TO_ADDR
7029: LD_INT 5
7031: PUSH
7032: FOR_TO
7033: IFFALSE 7087
// begin hc_class = class_tiger ;
7035: LD_ADDR_OWVAR 28
7039: PUSH
7040: LD_INT 14
7042: ST_TO_ADDR
// hc_gallery =  ;
7043: LD_ADDR_OWVAR 33
7047: PUSH
7048: LD_STRING 
7050: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
7051: LD_ADDR_OWVAR 35
7055: PUSH
7056: LD_INT 7
7058: NEG
7059: PPUSH
7060: LD_INT 7
7062: PPUSH
7063: CALL_OW 12
7067: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
7068: CALL_OW 44
7072: PPUSH
7073: LD_VAR 0 1
7077: PPUSH
7078: LD_INT 0
7080: PPUSH
7081: CALL 60459 0 3
// end ;
7085: GO 7032
7087: POP
7088: POP
// for i := 1 to 4 do
7089: LD_ADDR_VAR 0 4
7093: PUSH
7094: DOUBLE
7095: LD_INT 1
7097: DEC
7098: ST_TO_ADDR
7099: LD_INT 4
7101: PUSH
7102: FOR_TO
7103: IFFALSE 7140
// begin hc_class := class_phororhacos ;
7105: LD_ADDR_OWVAR 28
7109: PUSH
7110: LD_INT 18
7112: ST_TO_ADDR
// hc_gallery :=  ;
7113: LD_ADDR_OWVAR 33
7117: PUSH
7118: LD_STRING 
7120: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7121: CALL_OW 44
7125: PPUSH
7126: LD_VAR 0 1
7130: PPUSH
7131: LD_INT 0
7133: PPUSH
7134: CALL_OW 49
// end ;
7138: GO 7102
7140: POP
7141: POP
// for i := 1 to 4 do
7142: LD_ADDR_VAR 0 4
7146: PUSH
7147: DOUBLE
7148: LD_INT 1
7150: DEC
7151: ST_TO_ADDR
7152: LD_INT 4
7154: PUSH
7155: FOR_TO
7156: IFFALSE 7193
// begin hc_class := class_baggie ;
7158: LD_ADDR_OWVAR 28
7162: PUSH
7163: LD_INT 13
7165: ST_TO_ADDR
// hc_gallery :=  ;
7166: LD_ADDR_OWVAR 33
7170: PUSH
7171: LD_STRING 
7173: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7174: CALL_OW 44
7178: PPUSH
7179: LD_VAR 0 1
7183: PPUSH
7184: LD_INT 0
7186: PPUSH
7187: CALL_OW 49
// end ;
7191: GO 7155
7193: POP
7194: POP
// for i := 1 to 7 do
7195: LD_ADDR_VAR 0 4
7199: PUSH
7200: DOUBLE
7201: LD_INT 1
7203: DEC
7204: ST_TO_ADDR
7205: LD_INT 7
7207: PUSH
7208: FOR_TO
7209: IFFALSE 7246
// begin hc_class := class_frog ;
7211: LD_ADDR_OWVAR 28
7215: PUSH
7216: LD_INT 19
7218: ST_TO_ADDR
// hc_gallery :=  ;
7219: LD_ADDR_OWVAR 33
7223: PUSH
7224: LD_STRING 
7226: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
7227: CALL_OW 44
7231: PPUSH
7232: LD_VAR 0 2
7236: PPUSH
7237: LD_INT 0
7239: PPUSH
7240: CALL_OW 49
// end ;
7244: GO 7208
7246: POP
7247: POP
// end ;
7248: LD_VAR 0 3
7252: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
7253: LD_INT 0
7255: PPUSH
7256: PPUSH
7257: PPUSH
// if not observer or not unit then
7258: LD_VAR 0 1
7262: NOT
7263: PUSH
7264: LD_VAR 0 2
7268: NOT
7269: OR
7270: IFFALSE 7274
// exit ;
7272: GO 7322
// if not See ( GetSide ( observer ) , unit ) then
7274: LD_VAR 0 1
7278: PPUSH
7279: CALL_OW 255
7283: PPUSH
7284: LD_VAR 0 2
7288: PPUSH
7289: CALL_OW 292
7293: NOT
7294: IFFALSE 7298
// exit ;
7296: GO 7322
// result := GetDistUnits ( observer , unit ) < 12 ;
7298: LD_ADDR_VAR 0 3
7302: PUSH
7303: LD_VAR 0 1
7307: PPUSH
7308: LD_VAR 0 2
7312: PPUSH
7313: CALL_OW 296
7317: PUSH
7318: LD_INT 12
7320: LESS
7321: ST_TO_ADDR
// end ;
7322: LD_VAR 0 3
7326: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
7327: LD_INT 0
7329: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
7330: LD_VAR 0 2
7334: PUSH
7335: LD_INT 1
7337: ARRAY
7338: PPUSH
7339: LD_VAR 0 2
7343: PUSH
7344: LD_INT 2
7346: ARRAY
7347: PPUSH
7348: CALL_OW 488
7352: PUSH
7353: LD_VAR 0 2
7357: PUSH
7358: LD_INT 1
7360: ARRAY
7361: PPUSH
7362: LD_VAR 0 2
7366: PUSH
7367: LD_INT 2
7369: ARRAY
7370: PPUSH
7371: CALL_OW 428
7375: PUSH
7376: LD_INT 0
7378: EQUAL
7379: AND
7380: IFFALSE 7414
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
7382: LD_VAR 0 1
7386: PPUSH
7387: LD_VAR 0 2
7391: PUSH
7392: LD_INT 1
7394: ARRAY
7395: PPUSH
7396: LD_VAR 0 2
7400: PUSH
7401: LD_INT 2
7403: ARRAY
7404: PPUSH
7405: LD_VAR 0 3
7409: PPUSH
7410: CALL_OW 48
// end ;
7414: LD_VAR 0 4
7418: RET
// export function ReverseArray ( array ) ; var i ; begin
7419: LD_INT 0
7421: PPUSH
7422: PPUSH
// if not array then
7423: LD_VAR 0 1
7427: NOT
7428: IFFALSE 7432
// exit ;
7430: GO 7490
// result := [ ] ;
7432: LD_ADDR_VAR 0 2
7436: PUSH
7437: EMPTY
7438: ST_TO_ADDR
// for i := 1 to array do
7439: LD_ADDR_VAR 0 3
7443: PUSH
7444: DOUBLE
7445: LD_INT 1
7447: DEC
7448: ST_TO_ADDR
7449: LD_VAR 0 1
7453: PUSH
7454: FOR_TO
7455: IFFALSE 7488
// result := Insert ( result , 1 , array [ i ] ) ;
7457: LD_ADDR_VAR 0 2
7461: PUSH
7462: LD_VAR 0 2
7466: PPUSH
7467: LD_INT 1
7469: PPUSH
7470: LD_VAR 0 1
7474: PUSH
7475: LD_VAR 0 3
7479: ARRAY
7480: PPUSH
7481: CALL_OW 2
7485: ST_TO_ADDR
7486: GO 7454
7488: POP
7489: POP
// end ;
7490: LD_VAR 0 2
7494: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
7495: LD_INT 0
7497: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
7498: LD_VAR 0 1
7502: PPUSH
7503: LD_VAR 0 2
7507: PPUSH
7508: LD_VAR 0 3
7512: PPUSH
7513: LD_VAR 0 4
7517: PPUSH
7518: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
7522: LD_VAR 0 1
7526: PPUSH
7527: LD_VAR 0 2
7531: PPUSH
7532: LD_VAR 0 3
7536: PPUSH
7537: CALL_OW 331
// end ;
7541: LD_VAR 0 5
7545: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
7546: LD_INT 0
7548: PPUSH
// if not units then
7549: LD_VAR 0 1
7553: NOT
7554: IFFALSE 7558
// exit ;
7556: GO 7641
// result := true ;
7558: LD_ADDR_VAR 0 4
7562: PUSH
7563: LD_INT 1
7565: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
7566: LD_VAR 0 1
7570: PPUSH
7571: LD_INT 26
7573: PUSH
7574: LD_INT 1
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PPUSH
7581: CALL_OW 72
7585: PUSH
7586: LD_INT 1
7588: ARRAY
7589: PPUSH
7590: LD_VAR 0 2
7594: PPUSH
7595: CALL_OW 88
7599: NOT
7600: IFFALSE 7641
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
7602: LD_ADDR_VAR 0 4
7606: PUSH
7607: LD_VAR 0 1
7611: PPUSH
7612: LD_INT 26
7614: PUSH
7615: LD_INT 2
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PPUSH
7622: CALL_OW 72
7626: PUSH
7627: LD_INT 1
7629: ARRAY
7630: PPUSH
7631: LD_VAR 0 3
7635: PPUSH
7636: CALL_OW 88
7640: ST_TO_ADDR
// end ;
7641: LD_VAR 0 4
7645: RET
// export function SeeGroup ( side , group ) ; var i ; begin
7646: LD_INT 0
7648: PPUSH
7649: PPUSH
// if not group then
7650: LD_VAR 0 2
7654: NOT
7655: IFFALSE 7659
// exit ;
7657: GO 7704
// for i in group do
7659: LD_ADDR_VAR 0 4
7663: PUSH
7664: LD_VAR 0 2
7668: PUSH
7669: FOR_IN
7670: IFFALSE 7702
// if See ( side , i ) then
7672: LD_VAR 0 1
7676: PPUSH
7677: LD_VAR 0 4
7681: PPUSH
7682: CALL_OW 292
7686: IFFALSE 7700
// begin result := true ;
7688: LD_ADDR_VAR 0 3
7692: PUSH
7693: LD_INT 1
7695: ST_TO_ADDR
// exit ;
7696: POP
7697: POP
7698: GO 7704
// end ;
7700: GO 7669
7702: POP
7703: POP
// end ; end_of_file
7704: LD_VAR 0 3
7708: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
7709: LD_INT 0
7711: PPUSH
7712: PPUSH
7713: PPUSH
7714: PPUSH
7715: PPUSH
7716: PPUSH
7717: PPUSH
// uc_side := 3 ;
7718: LD_ADDR_OWVAR 20
7722: PUSH
7723: LD_INT 3
7725: ST_TO_ADDR
// uc_nation := 3 ;
7726: LD_ADDR_OWVAR 21
7730: PUSH
7731: LD_INT 3
7733: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
7734: LD_ADDR_EXP 49
7738: PUSH
7739: LD_STRING Morozov
7741: PPUSH
7742: CALL_OW 25
7746: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
7747: LD_EXP 49
7751: PPUSH
7752: LD_INT 52
7754: PPUSH
7755: CALL_OW 52
// if not gaidarKilled then
7759: LD_EXP 7
7763: NOT
7764: IFFALSE 7797
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
7766: LD_ADDR_EXP 50
7770: PUSH
7771: LD_STRING Gaydar
7773: PPUSH
7774: LD_INT 0
7776: PPUSH
7777: LD_STRING 
7779: PPUSH
7780: CALL 24808 0 3
7784: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
7785: LD_EXP 50
7789: PPUSH
7790: LD_INT 52
7792: PPUSH
7793: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
7797: LD_INT 52
7799: PPUSH
7800: LD_STRING lenin
7802: PPUSH
7803: CALL_OW 500
// ruOutsiders := [ ] ;
7807: LD_ADDR_EXP 52
7811: PUSH
7812: EMPTY
7813: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
7814: LD_ADDR_EXP 54
7818: PUSH
7819: EMPTY
7820: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
7821: LD_ADDR_EXP 55
7825: PUSH
7826: EMPTY
7827: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
7828: LD_ADDR_EXP 56
7832: PUSH
7833: EMPTY
7834: ST_TO_ADDR
// ruAttackers := [ ] ;
7835: LD_ADDR_EXP 57
7839: PUSH
7840: EMPTY
7841: ST_TO_ADDR
// waveStrength := 0 ;
7842: LD_ADDR_EXP 58
7846: PUSH
7847: LD_INT 0
7849: ST_TO_ADDR
// if not gaidarKilled then
7850: LD_EXP 7
7854: NOT
7855: IFFALSE 7865
// waveStrength := 2 ;
7857: LD_ADDR_EXP 58
7861: PUSH
7862: LD_INT 2
7864: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
7865: LD_ADDR_VAR 0 7
7869: PUSH
7870: LD_INT 22
7872: PUSH
7873: LD_INT 3
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PUSH
7880: LD_INT 21
7882: PUSH
7883: LD_INT 3
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: PPUSH
7894: CALL_OW 69
7898: ST_TO_ADDR
// for i in tmp do
7899: LD_ADDR_VAR 0 2
7903: PUSH
7904: LD_VAR 0 7
7908: PUSH
7909: FOR_IN
7910: IFFALSE 7943
// SetBLevel ( i , [ 5 , 5 , 6 ] [ Difficulty ] ) ;
7912: LD_VAR 0 2
7916: PPUSH
7917: LD_INT 5
7919: PUSH
7920: LD_INT 5
7922: PUSH
7923: LD_INT 6
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: LIST
7930: PUSH
7931: LD_OWVAR 67
7935: ARRAY
7936: PPUSH
7937: CALL_OW 241
7941: GO 7909
7943: POP
7944: POP
// for i := 1 to 3 do
7945: LD_ADDR_VAR 0 2
7949: PUSH
7950: DOUBLE
7951: LD_INT 1
7953: DEC
7954: ST_TO_ADDR
7955: LD_INT 3
7957: PUSH
7958: FOR_TO
7959: IFFALSE 7997
// begin PrepareHuman ( false , 1 , 0 ) ;
7961: LD_INT 0
7963: PPUSH
7964: LD_INT 1
7966: PPUSH
7967: LD_INT 0
7969: PPUSH
7970: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
7974: CALL_OW 44
7978: PPUSH
7979: LD_INT 75
7981: PPUSH
7982: LD_INT 49
7984: PPUSH
7985: LD_INT 3
7987: PPUSH
7988: LD_INT 0
7990: PPUSH
7991: CALL_OW 50
// end ;
7995: GO 7958
7997: POP
7998: POP
// for i := 1 to 4 do
7999: LD_ADDR_VAR 0 2
8003: PUSH
8004: DOUBLE
8005: LD_INT 1
8007: DEC
8008: ST_TO_ADDR
8009: LD_INT 4
8011: PUSH
8012: FOR_TO
8013: IFFALSE 8059
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
8015: LD_INT 0
8017: PPUSH
8018: LD_INT 1
8020: PPUSH
8021: LD_INT 2
8023: PPUSH
8024: CALL_OW 12
8028: PPUSH
8029: LD_INT 0
8031: PPUSH
8032: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
8036: CALL_OW 44
8040: PPUSH
8041: LD_INT 330
8043: PPUSH
8044: LD_INT 231
8046: PPUSH
8047: LD_INT 5
8049: PPUSH
8050: LD_INT 0
8052: PPUSH
8053: CALL_OW 50
// end ;
8057: GO 8012
8059: POP
8060: POP
// hc_class := 1 ;
8061: LD_ADDR_OWVAR 28
8065: PUSH
8066: LD_INT 1
8068: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
8069: CALL_OW 44
8073: PPUSH
8074: LD_INT 324
8076: PPUSH
8077: LD_INT 219
8079: PPUSH
8080: CALL_OW 428
8084: PPUSH
8085: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
8089: CALL_OW 44
8093: PPUSH
8094: LD_INT 316
8096: PPUSH
8097: LD_INT 223
8099: PPUSH
8100: CALL_OW 428
8104: PPUSH
8105: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
8109: LD_ADDR_VAR 0 7
8113: PUSH
8114: LD_INT 172
8116: PPUSH
8117: LD_INT 198
8119: PPUSH
8120: CALL_OW 428
8124: PPUSH
8125: CALL_OW 274
8129: PUSH
8130: LD_INT 189
8132: PPUSH
8133: LD_INT 156
8135: PPUSH
8136: CALL_OW 428
8140: PPUSH
8141: CALL_OW 274
8145: PUSH
8146: LD_INT 341
8148: PPUSH
8149: LD_INT 232
8151: PPUSH
8152: CALL_OW 428
8156: PPUSH
8157: CALL_OW 274
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: LIST
8166: ST_TO_ADDR
// for i in tmp do
8167: LD_ADDR_VAR 0 2
8171: PUSH
8172: LD_VAR 0 7
8176: PUSH
8177: FOR_IN
8178: IFFALSE 8212
// begin SetResourceType ( i , mat_cans , 200 ) ;
8180: LD_VAR 0 2
8184: PPUSH
8185: LD_INT 1
8187: PPUSH
8188: LD_INT 200
8190: PPUSH
8191: CALL_OW 277
// SetResourceType ( i , mat_oil , 200 ) ;
8195: LD_VAR 0 2
8199: PPUSH
8200: LD_INT 2
8202: PPUSH
8203: LD_INT 200
8205: PPUSH
8206: CALL_OW 277
// end ;
8210: GO 8177
8212: POP
8213: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 177 , 114 ] , [ 138 , 96 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
8214: LD_ADDR_VAR 0 7
8218: PUSH
8219: LD_INT 198
8221: PUSH
8222: LD_INT 158
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: PUSH
8229: LD_INT 203
8231: PUSH
8232: LD_INT 166
8234: PUSH
8235: EMPTY
8236: LIST
8237: LIST
8238: PUSH
8239: LD_INT 177
8241: PUSH
8242: LD_INT 114
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PUSH
8249: LD_INT 138
8251: PUSH
8252: LD_INT 96
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: PUSH
8259: LD_INT 181
8261: PUSH
8262: LD_INT 209
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PUSH
8269: LD_INT 178
8271: PUSH
8272: LD_INT 196
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: PUSH
8279: LD_INT 181
8281: PUSH
8282: LD_INT 212
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: ST_TO_ADDR
// for i := 1 to tmp do
8298: LD_ADDR_VAR 0 2
8302: PUSH
8303: DOUBLE
8304: LD_INT 1
8306: DEC
8307: ST_TO_ADDR
8308: LD_VAR 0 7
8312: PUSH
8313: FOR_TO
8314: IFFALSE 8431
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
8316: LD_INT 0
8318: PPUSH
8319: LD_INT 1
8321: PPUSH
8322: LD_INT 4
8324: PUSH
8325: LD_INT 5
8327: PUSH
8328: LD_INT 6
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: LIST
8335: PUSH
8336: LD_OWVAR 67
8340: ARRAY
8341: PPUSH
8342: CALL_OW 380
// un := CreateHuman ;
8346: LD_ADDR_VAR 0 5
8350: PUSH
8351: CALL_OW 44
8355: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
8356: LD_ADDR_VAR 0 4
8360: PUSH
8361: LD_VAR 0 7
8365: PUSH
8366: LD_VAR 0 2
8370: ARRAY
8371: PUSH
8372: LD_INT 1
8374: ARRAY
8375: PPUSH
8376: LD_VAR 0 7
8380: PUSH
8381: LD_VAR 0 2
8385: ARRAY
8386: PUSH
8387: LD_INT 2
8389: ARRAY
8390: PPUSH
8391: CALL_OW 428
8395: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
8396: LD_VAR 0 5
8400: PPUSH
8401: LD_VAR 0 4
8405: PPUSH
8406: CALL 57379 0 1
8410: PPUSH
8411: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8415: LD_VAR 0 5
8419: PPUSH
8420: LD_VAR 0 4
8424: PPUSH
8425: CALL_OW 52
// end ;
8429: GO 8313
8431: POP
8432: POP
// for i := 1 to 3 do
8433: LD_ADDR_VAR 0 2
8437: PUSH
8438: DOUBLE
8439: LD_INT 1
8441: DEC
8442: ST_TO_ADDR
8443: LD_INT 3
8445: PUSH
8446: FOR_TO
8447: IFFALSE 8502
// begin InitHc ;
8449: CALL_OW 19
// uc_nation := 0 ;
8453: LD_ADDR_OWVAR 21
8457: PUSH
8458: LD_INT 0
8460: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
8461: LD_ADDR_OWVAR 28
8465: PUSH
8466: LD_INT 16
8468: ST_TO_ADDR
// un := CreateHuman ;
8469: LD_ADDR_VAR 0 5
8473: PUSH
8474: CALL_OW 44
8478: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
8479: LD_VAR 0 5
8483: PPUSH
8484: LD_INT 194
8486: PPUSH
8487: LD_INT 164
8489: PPUSH
8490: LD_INT 6
8492: PPUSH
8493: LD_INT 0
8495: PPUSH
8496: CALL_OW 50
// end ;
8500: GO 8446
8502: POP
8503: POP
// uc_nation := 3 ;
8504: LD_ADDR_OWVAR 21
8508: PUSH
8509: LD_INT 3
8511: ST_TO_ADDR
// if Difficulty > 1 then
8512: LD_OWVAR 67
8516: PUSH
8517: LD_INT 1
8519: GREATER
8520: IFFALSE 8776
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
8522: LD_INT 24
8524: PPUSH
8525: LD_INT 1
8527: PPUSH
8528: LD_INT 1
8530: PPUSH
8531: LD_INT 44
8533: PPUSH
8534: LD_INT 10
8536: PPUSH
8537: CALL 29672 0 5
// un := CreateVehicle ;
8541: LD_ADDR_VAR 0 5
8545: PUSH
8546: CALL_OW 45
8550: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 162 , 1 , false ) ;
8551: LD_VAR 0 5
8555: PPUSH
8556: LD_INT 199
8558: PPUSH
8559: LD_INT 162
8561: PPUSH
8562: LD_INT 1
8564: PPUSH
8565: LD_INT 0
8567: PPUSH
8568: CALL 63476 0 5
// ComHold ( un ) ;
8572: LD_VAR 0 5
8576: PPUSH
8577: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
8581: LD_INT 0
8583: PPUSH
8584: LD_INT 3
8586: PPUSH
8587: LD_INT 4
8589: PPUSH
8590: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8594: CALL_OW 44
8598: PPUSH
8599: LD_VAR 0 5
8603: PPUSH
8604: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
8608: LD_INT 24
8610: PPUSH
8611: LD_INT 1
8613: PPUSH
8614: LD_INT 1
8616: PPUSH
8617: LD_INT 45
8619: PPUSH
8620: LD_INT 10
8622: PPUSH
8623: CALL 29672 0 5
// un := CreateVehicle ;
8627: LD_ADDR_VAR 0 5
8631: PUSH
8632: CALL_OW 45
8636: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
8637: LD_VAR 0 5
8641: PPUSH
8642: LD_INT 129
8644: PPUSH
8645: LD_INT 93
8647: PPUSH
8648: LD_INT 1
8650: PPUSH
8651: LD_INT 0
8653: PPUSH
8654: CALL 63476 0 5
// ComHold ( un ) ;
8658: LD_VAR 0 5
8662: PPUSH
8663: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
8667: LD_INT 0
8669: PPUSH
8670: LD_INT 3
8672: PPUSH
8673: LD_INT 4
8675: PPUSH
8676: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8680: CALL_OW 44
8684: PPUSH
8685: LD_VAR 0 5
8689: PPUSH
8690: CALL_OW 52
// bc_type := b_armoury ;
8694: LD_ADDR_OWVAR 42
8698: PUSH
8699: LD_INT 4
8701: ST_TO_ADDR
// bc_level := 6 ;
8702: LD_ADDR_OWVAR 43
8706: PUSH
8707: LD_INT 6
8709: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
8710: LD_INT 120
8712: PPUSH
8713: LD_INT 100
8715: PPUSH
8716: LD_INT 5
8718: PPUSH
8719: CALL_OW 47
// for i := 1 to 3 do
8723: LD_ADDR_VAR 0 2
8727: PUSH
8728: DOUBLE
8729: LD_INT 1
8731: DEC
8732: ST_TO_ADDR
8733: LD_INT 3
8735: PUSH
8736: FOR_TO
8737: IFFALSE 8774
// begin PrepareHuman ( false , 1 , 5 ) ;
8739: LD_INT 0
8741: PPUSH
8742: LD_INT 1
8744: PPUSH
8745: LD_INT 5
8747: PPUSH
8748: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
8752: CALL_OW 44
8756: PPUSH
8757: LD_INT 120
8759: PPUSH
8760: LD_INT 100
8762: PPUSH
8763: CALL_OW 428
8767: PPUSH
8768: CALL_OW 52
// end ;
8772: GO 8736
8774: POP
8775: POP
// end ; tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
8776: LD_ADDR_VAR 0 7
8780: PUSH
8781: LD_INT 135
8783: PUSH
8784: LD_INT 100
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: PUSH
8791: LD_INT 137
8793: PUSH
8794: LD_INT 92
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: ST_TO_ADDR
// for i := 1 to tmp do
8805: LD_ADDR_VAR 0 2
8809: PUSH
8810: DOUBLE
8811: LD_INT 1
8813: DEC
8814: ST_TO_ADDR
8815: LD_VAR 0 7
8819: PUSH
8820: FOR_TO
8821: IFFALSE 8987
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
8823: LD_INT 22
8825: PUSH
8826: LD_INT 22
8828: PUSH
8829: LD_INT 24
8831: PUSH
8832: LD_INT 24
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: PUSH
8841: LD_OWVAR 67
8845: PUSH
8846: LD_INT 0
8848: PPUSH
8849: LD_INT 1
8851: PPUSH
8852: CALL_OW 12
8856: PLUS
8857: ARRAY
8858: PPUSH
8859: LD_INT 1
8861: PPUSH
8862: LD_INT 1
8864: PPUSH
8865: LD_INT 44
8867: PPUSH
8868: LD_INT 25
8870: PPUSH
8871: CALL 29672 0 5
// veh := CreateVehicle ;
8875: LD_ADDR_VAR 0 6
8879: PUSH
8880: CALL_OW 45
8884: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8885: LD_VAR 0 6
8889: PPUSH
8890: LD_INT 2
8892: PPUSH
8893: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
8897: LD_VAR 0 6
8901: PPUSH
8902: LD_VAR 0 7
8906: PUSH
8907: LD_VAR 0 2
8911: ARRAY
8912: PUSH
8913: LD_INT 1
8915: ARRAY
8916: PPUSH
8917: LD_VAR 0 7
8921: PUSH
8922: LD_VAR 0 2
8926: ARRAY
8927: PUSH
8928: LD_INT 2
8930: ARRAY
8931: PPUSH
8932: LD_INT 0
8934: PPUSH
8935: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
8939: LD_INT 0
8941: PPUSH
8942: LD_INT 3
8944: PPUSH
8945: LD_INT 6
8947: PPUSH
8948: CALL_OW 380
// un := CreateHuman ;
8952: LD_ADDR_VAR 0 5
8956: PUSH
8957: CALL_OW 44
8961: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8962: LD_VAR 0 5
8966: PPUSH
8967: LD_VAR 0 6
8971: PPUSH
8972: CALL_OW 52
// ComHold ( veh ) ;
8976: LD_VAR 0 6
8980: PPUSH
8981: CALL_OW 140
// end ;
8985: GO 8820
8987: POP
8988: POP
// tmp := [ 191 , 122 ] ;
8989: LD_ADDR_VAR 0 7
8993: PUSH
8994: LD_INT 191
8996: PUSH
8997: LD_INT 122
8999: PUSH
9000: EMPTY
9001: LIST
9002: LIST
9003: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
9004: LD_INT 24
9006: PPUSH
9007: LD_INT 1
9009: PPUSH
9010: LD_INT 1
9012: PPUSH
9013: LD_INT 44
9015: PPUSH
9016: LD_INT 30
9018: PPUSH
9019: CALL 29672 0 5
// ruBlockadeTank := CreateVehicle ;
9023: LD_ADDR_EXP 51
9027: PUSH
9028: CALL_OW 45
9032: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
9033: LD_EXP 51
9037: PPUSH
9038: LD_INT 2
9040: PPUSH
9041: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
9045: LD_EXP 51
9049: PPUSH
9050: LD_INT 191
9052: PPUSH
9053: LD_INT 122
9055: PPUSH
9056: LD_INT 0
9058: PPUSH
9059: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 ] [ Difficulty - 1 ] ) ;
9063: LD_INT 1
9065: PPUSH
9066: LD_INT 5
9068: PUSH
9069: LD_INT 6
9071: PUSH
9072: EMPTY
9073: LIST
9074: LIST
9075: PUSH
9076: LD_OWVAR 67
9080: PUSH
9081: LD_INT 1
9083: MINUS
9084: ARRAY
9085: PPUSH
9086: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
9090: CALL_OW 44
9094: PPUSH
9095: LD_EXP 51
9099: PPUSH
9100: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
9104: LD_EXP 51
9108: PPUSH
9109: CALL_OW 140
// ruBlockadeSquad := [ ] ;
9113: LD_ADDR_EXP 53
9117: PUSH
9118: EMPTY
9119: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 6 ] [ Difficulty ] do
9120: LD_ADDR_VAR 0 2
9124: PUSH
9125: DOUBLE
9126: LD_INT 1
9128: DEC
9129: ST_TO_ADDR
9130: LD_INT 3
9132: PUSH
9133: LD_INT 4
9135: PUSH
9136: LD_INT 6
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: LIST
9143: PUSH
9144: LD_OWVAR 67
9148: ARRAY
9149: PUSH
9150: FOR_TO
9151: IFFALSE 9263
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
9153: LD_INT 0
9155: PPUSH
9156: LD_INT 1
9158: PPUSH
9159: LD_INT 4
9161: PUSH
9162: LD_INT 5
9164: PUSH
9165: LD_INT 6
9167: PUSH
9168: EMPTY
9169: LIST
9170: LIST
9171: LIST
9172: PUSH
9173: LD_OWVAR 67
9177: ARRAY
9178: PPUSH
9179: CALL_OW 380
// un := CreateHuman ;
9183: LD_ADDR_VAR 0 5
9187: PUSH
9188: CALL_OW 44
9192: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
9193: LD_VAR 0 5
9197: PPUSH
9198: LD_INT 9
9200: PPUSH
9201: LD_INT 0
9203: PPUSH
9204: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
9208: LD_VAR 0 5
9212: PPUSH
9213: LD_INT 198
9215: PPUSH
9216: LD_INT 129
9218: PPUSH
9219: CALL_OW 118
// AddComCrawl ( un ) ;
9223: LD_VAR 0 5
9227: PPUSH
9228: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
9232: LD_ADDR_EXP 53
9236: PUSH
9237: LD_EXP 53
9241: PPUSH
9242: LD_EXP 53
9246: PUSH
9247: LD_INT 1
9249: PLUS
9250: PPUSH
9251: LD_VAR 0 5
9255: PPUSH
9256: CALL_OW 1
9260: ST_TO_ADDR
// end ;
9261: GO 9150
9263: POP
9264: POP
// PrepareHuman ( false , 4 , 5 ) ;
9265: LD_INT 0
9267: PPUSH
9268: LD_INT 4
9270: PPUSH
9271: LD_INT 5
9273: PPUSH
9274: CALL_OW 380
// un := CreateHuman ;
9278: LD_ADDR_VAR 0 5
9282: PUSH
9283: CALL_OW 44
9287: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
9288: LD_VAR 0 5
9292: PPUSH
9293: LD_INT 179
9295: PPUSH
9296: LD_INT 113
9298: PPUSH
9299: LD_INT 0
9301: PPUSH
9302: CALL_OW 48
// ComHold ( un ) ;
9306: LD_VAR 0 5
9310: PPUSH
9311: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
9315: LD_ADDR_EXP 53
9319: PUSH
9320: LD_EXP 53
9324: PPUSH
9325: LD_EXP 53
9329: PUSH
9330: LD_INT 1
9332: PLUS
9333: PPUSH
9334: LD_VAR 0 5
9338: PPUSH
9339: CALL_OW 1
9343: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
9344: LD_ADDR_VAR 0 7
9348: PUSH
9349: LD_INT 167
9351: PPUSH
9352: LD_INT 243
9354: PPUSH
9355: CALL_OW 428
9359: PPUSH
9360: CALL_OW 274
9364: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
9365: LD_VAR 0 7
9369: PPUSH
9370: LD_INT 1
9372: PPUSH
9373: LD_INT 1000
9375: PPUSH
9376: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
9380: LD_VAR 0 7
9384: PPUSH
9385: LD_INT 2
9387: PPUSH
9388: LD_INT 400
9390: PPUSH
9391: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
9395: LD_ADDR_VAR 0 7
9399: PUSH
9400: LD_INT 169
9402: PPUSH
9403: LD_INT 229
9405: PPUSH
9406: CALL_OW 428
9410: ST_TO_ADDR
// for i := 1 to 3 do
9411: LD_ADDR_VAR 0 2
9415: PUSH
9416: DOUBLE
9417: LD_INT 1
9419: DEC
9420: ST_TO_ADDR
9421: LD_INT 3
9423: PUSH
9424: FOR_TO
9425: IFFALSE 9512
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
9427: LD_INT 0
9429: PPUSH
9430: LD_INT 1
9432: PPUSH
9433: LD_INT 4
9435: PUSH
9436: LD_INT 5
9438: PUSH
9439: LD_INT 5
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: LIST
9446: PUSH
9447: LD_OWVAR 67
9451: ARRAY
9452: PPUSH
9453: CALL_OW 380
// un := CreateHuman ;
9457: LD_ADDR_VAR 0 5
9461: PUSH
9462: CALL_OW 44
9466: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
9467: LD_VAR 0 5
9471: PPUSH
9472: LD_VAR 0 7
9476: PPUSH
9477: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
9481: LD_ADDR_EXP 54
9485: PUSH
9486: LD_EXP 54
9490: PPUSH
9491: LD_EXP 54
9495: PUSH
9496: LD_INT 1
9498: PLUS
9499: PPUSH
9500: LD_VAR 0 5
9504: PPUSH
9505: CALL_OW 1
9509: ST_TO_ADDR
// end ;
9510: GO 9424
9512: POP
9513: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
9514: LD_ADDR_VAR 0 7
9518: PUSH
9519: LD_INT 165
9521: PUSH
9522: LD_INT 227
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: PUSH
9529: LD_INT 173
9531: PUSH
9532: LD_INT 231
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: ST_TO_ADDR
// for i := 1 to tmp do
9543: LD_ADDR_VAR 0 2
9547: PUSH
9548: DOUBLE
9549: LD_INT 1
9551: DEC
9552: ST_TO_ADDR
9553: LD_VAR 0 7
9557: PUSH
9558: FOR_TO
9559: IFFALSE 9676
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
9561: LD_INT 0
9563: PPUSH
9564: LD_INT 1
9566: PPUSH
9567: LD_INT 4
9569: PUSH
9570: LD_INT 5
9572: PUSH
9573: LD_INT 5
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: LIST
9580: PUSH
9581: LD_OWVAR 67
9585: ARRAY
9586: PPUSH
9587: CALL_OW 380
// un := CreateHuman ;
9591: LD_ADDR_VAR 0 5
9595: PUSH
9596: CALL_OW 44
9600: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
9601: LD_VAR 0 5
9605: PPUSH
9606: LD_VAR 0 7
9610: PUSH
9611: LD_VAR 0 2
9615: ARRAY
9616: PUSH
9617: LD_INT 1
9619: ARRAY
9620: PPUSH
9621: LD_VAR 0 7
9625: PUSH
9626: LD_VAR 0 2
9630: ARRAY
9631: PUSH
9632: LD_INT 2
9634: ARRAY
9635: PPUSH
9636: CALL_OW 428
9640: PPUSH
9641: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
9645: LD_ADDR_EXP 54
9649: PUSH
9650: LD_EXP 54
9654: PPUSH
9655: LD_EXP 54
9659: PUSH
9660: LD_INT 1
9662: PLUS
9663: PPUSH
9664: LD_VAR 0 5
9668: PPUSH
9669: CALL_OW 1
9673: ST_TO_ADDR
// end ;
9674: GO 9558
9676: POP
9677: POP
// for i := 1 to 2 do
9678: LD_ADDR_VAR 0 2
9682: PUSH
9683: DOUBLE
9684: LD_INT 1
9686: DEC
9687: ST_TO_ADDR
9688: LD_INT 2
9690: PUSH
9691: FOR_TO
9692: IFFALSE 9747
// begin InitHc ;
9694: CALL_OW 19
// uc_nation := 0 ;
9698: LD_ADDR_OWVAR 21
9702: PUSH
9703: LD_INT 0
9705: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
9706: LD_ADDR_OWVAR 28
9710: PUSH
9711: LD_INT 16
9713: ST_TO_ADDR
// un := CreateHuman ;
9714: LD_ADDR_VAR 0 5
9718: PUSH
9719: CALL_OW 44
9723: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
9724: LD_VAR 0 5
9728: PPUSH
9729: LD_INT 166
9731: PPUSH
9732: LD_INT 233
9734: PPUSH
9735: LD_INT 2
9737: PPUSH
9738: LD_INT 0
9740: PPUSH
9741: CALL_OW 50
// end ;
9745: GO 9691
9747: POP
9748: POP
// uc_nation := 3 ;
9749: LD_ADDR_OWVAR 21
9753: PUSH
9754: LD_INT 3
9756: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
9757: LD_ADDR_VAR 0 7
9761: PUSH
9762: LD_INT 71
9764: PUSH
9765: LD_INT 52
9767: PUSH
9768: LD_INT 11
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: LIST
9775: ST_TO_ADDR
// for i in tmp do
9776: LD_ADDR_VAR 0 2
9780: PUSH
9781: LD_VAR 0 7
9785: PUSH
9786: FOR_IN
9787: IFFALSE 9831
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
9789: LD_VAR 0 2
9793: PPUSH
9794: CALL_OW 274
9798: PPUSH
9799: LD_INT 1
9801: PPUSH
9802: LD_INT 3000
9804: PPUSH
9805: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
9809: LD_VAR 0 2
9813: PPUSH
9814: CALL_OW 274
9818: PPUSH
9819: LD_INT 2
9821: PPUSH
9822: LD_INT 600
9824: PPUSH
9825: CALL_OW 277
// end ;
9829: GO 9786
9831: POP
9832: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
9833: LD_ADDR_VAR 0 7
9837: PUSH
9838: LD_INT 41
9840: PUSH
9841: LD_INT 57
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: PUSH
9848: LD_INT 38
9850: PUSH
9851: LD_INT 55
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PUSH
9858: LD_INT 50
9860: PUSH
9861: LD_INT 73
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: PUSH
9868: LD_INT 51
9870: PUSH
9871: LD_INT 65
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: PUSH
9878: LD_INT 82
9880: PUSH
9881: LD_INT 93
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: PUSH
9888: LD_INT 87
9890: PUSH
9891: LD_INT 100
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PUSH
9898: LD_INT 91
9900: PUSH
9901: LD_INT 109
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: PUSH
9908: LD_INT 84
9910: PUSH
9911: LD_INT 120
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: PUSH
9918: LD_INT 113
9920: PUSH
9921: LD_INT 153
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: PUSH
9928: LD_INT 123
9930: PUSH
9931: LD_INT 171
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PUSH
9938: LD_INT 125
9940: PUSH
9941: LD_INT 178
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PUSH
9948: LD_INT 125
9950: PUSH
9951: LD_INT 188
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: PUSH
9958: LD_INT 125
9960: PUSH
9961: LD_INT 201
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PUSH
9968: LD_INT 33
9970: PUSH
9971: LD_INT 60
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: PUSH
9978: LD_INT 76
9980: PUSH
9981: LD_INT 95
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: PUSH
9988: LD_INT 84
9990: PUSH
9991: LD_INT 111
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PUSH
9998: LD_INT 112
10000: PUSH
10001: LD_INT 165
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: ST_TO_ADDR
// for i := 1 to tmp do
10027: LD_ADDR_VAR 0 2
10031: PUSH
10032: DOUBLE
10033: LD_INT 1
10035: DEC
10036: ST_TO_ADDR
10037: LD_VAR 0 7
10041: PUSH
10042: FOR_TO
10043: IFFALSE 10282
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
10045: LD_ADDR_VAR 0 4
10049: PUSH
10050: LD_VAR 0 7
10054: PUSH
10055: LD_VAR 0 2
10059: ARRAY
10060: PUSH
10061: LD_INT 1
10063: ARRAY
10064: PPUSH
10065: LD_VAR 0 7
10069: PUSH
10070: LD_VAR 0 2
10074: ARRAY
10075: PUSH
10076: LD_INT 2
10078: ARRAY
10079: PPUSH
10080: CALL_OW 428
10084: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
10085: LD_VAR 0 4
10089: PPUSH
10090: CALL_OW 266
10094: PUSH
10095: LD_INT 4
10097: PUSH
10098: LD_INT 5
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: IN
10105: IFFALSE 10185
// begin for j := 1 to Difficulty do
10107: LD_ADDR_VAR 0 3
10111: PUSH
10112: DOUBLE
10113: LD_INT 1
10115: DEC
10116: ST_TO_ADDR
10117: LD_OWVAR 67
10121: PUSH
10122: FOR_TO
10123: IFFALSE 10181
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10125: LD_INT 0
10127: PPUSH
10128: LD_INT 1
10130: PPUSH
10131: LD_INT 4
10133: PUSH
10134: LD_INT 5
10136: PUSH
10137: LD_INT 5
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: LIST
10144: PUSH
10145: LD_OWVAR 67
10149: ARRAY
10150: PPUSH
10151: CALL_OW 380
// un := CreateHuman ;
10155: LD_ADDR_VAR 0 5
10159: PUSH
10160: CALL_OW 44
10164: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10165: LD_VAR 0 5
10169: PPUSH
10170: LD_VAR 0 4
10174: PPUSH
10175: CALL_OW 52
// end ;
10179: GO 10122
10181: POP
10182: POP
// end else
10183: GO 10251
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10185: LD_INT 0
10187: PPUSH
10188: LD_INT 1
10190: PPUSH
10191: LD_INT 4
10193: PUSH
10194: LD_INT 5
10196: PUSH
10197: LD_INT 5
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: LIST
10204: PUSH
10205: LD_OWVAR 67
10209: ARRAY
10210: PPUSH
10211: CALL_OW 380
// un := CreateHuman ;
10215: LD_ADDR_VAR 0 5
10219: PUSH
10220: CALL_OW 44
10224: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10225: LD_VAR 0 5
10229: PPUSH
10230: LD_VAR 0 4
10234: PPUSH
10235: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
10239: LD_VAR 0 5
10243: PPUSH
10244: LD_INT 9
10246: PPUSH
10247: CALL_OW 336
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10251: LD_ADDR_EXP 55
10255: PUSH
10256: LD_EXP 55
10260: PPUSH
10261: LD_EXP 55
10265: PUSH
10266: LD_INT 1
10268: PLUS
10269: PPUSH
10270: LD_VAR 0 5
10274: PPUSH
10275: CALL_OW 1
10279: ST_TO_ADDR
// end ;
10280: GO 10042
10282: POP
10283: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
10284: LD_ADDR_VAR 0 4
10288: PUSH
10289: LD_INT 10
10291: PPUSH
10292: LD_INT 22
10294: PUSH
10295: LD_INT 3
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: LD_INT 30
10304: PUSH
10305: LD_INT 32
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PUSH
10312: LD_INT 58
10314: PUSH
10315: EMPTY
10316: LIST
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: LIST
10322: PPUSH
10323: CALL_OW 70
10327: PUSH
10328: FOR_IN
10329: IFFALSE 10455
// begin if not Prob ( [ 40 , 50 , 75 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
10331: LD_INT 40
10333: PUSH
10334: LD_INT 50
10336: PUSH
10337: LD_INT 75
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: LIST
10344: PUSH
10345: LD_OWVAR 67
10349: ARRAY
10350: PUSH
10351: LD_EXP 7
10355: PUSH
10356: LD_INT 10
10358: MUL
10359: MINUS
10360: PPUSH
10361: CALL_OW 13
10365: NOT
10366: IFFALSE 10370
// continue ;
10368: GO 10328
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10370: LD_INT 0
10372: PPUSH
10373: LD_INT 1
10375: PPUSH
10376: LD_INT 4
10378: PUSH
10379: LD_INT 5
10381: PUSH
10382: LD_INT 5
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: LIST
10389: PUSH
10390: LD_OWVAR 67
10394: ARRAY
10395: PPUSH
10396: CALL_OW 380
// un := CreateHuman ;
10400: LD_ADDR_VAR 0 5
10404: PUSH
10405: CALL_OW 44
10409: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10410: LD_VAR 0 5
10414: PPUSH
10415: LD_VAR 0 4
10419: PPUSH
10420: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10424: LD_ADDR_EXP 55
10428: PUSH
10429: LD_EXP 55
10433: PPUSH
10434: LD_EXP 55
10438: PUSH
10439: LD_INT 1
10441: PLUS
10442: PPUSH
10443: LD_VAR 0 5
10447: PPUSH
10448: CALL_OW 1
10452: ST_TO_ADDR
// end ;
10453: GO 10328
10455: POP
10456: POP
// for i := 1 to 5 do
10457: LD_ADDR_VAR 0 2
10461: PUSH
10462: DOUBLE
10463: LD_INT 1
10465: DEC
10466: ST_TO_ADDR
10467: LD_INT 5
10469: PUSH
10470: FOR_TO
10471: IFFALSE 10565
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10473: LD_INT 0
10475: PPUSH
10476: LD_INT 2
10478: PPUSH
10479: LD_INT 4
10481: PUSH
10482: LD_INT 5
10484: PUSH
10485: LD_INT 5
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: LIST
10492: PUSH
10493: LD_OWVAR 67
10497: ARRAY
10498: PPUSH
10499: CALL_OW 380
// un := CreateHuman ;
10503: LD_ADDR_VAR 0 5
10507: PUSH
10508: CALL_OW 44
10512: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
10513: LD_VAR 0 5
10517: PPUSH
10518: LD_INT 66
10520: PPUSH
10521: LD_INT 101
10523: PPUSH
10524: LD_INT 3
10526: PPUSH
10527: LD_INT 0
10529: PPUSH
10530: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10534: LD_ADDR_EXP 55
10538: PUSH
10539: LD_EXP 55
10543: PPUSH
10544: LD_EXP 55
10548: PUSH
10549: LD_INT 1
10551: PLUS
10552: PPUSH
10553: LD_VAR 0 5
10557: PPUSH
10558: CALL_OW 1
10562: ST_TO_ADDR
// end ;
10563: GO 10470
10565: POP
10566: POP
// tmp := [ ruFac1 , ruFac2 ] ;
10567: LD_ADDR_VAR 0 7
10571: PUSH
10572: LD_INT 72
10574: PUSH
10575: LD_INT 12
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: ST_TO_ADDR
// for i := 1 to tmp do
10582: LD_ADDR_VAR 0 2
10586: PUSH
10587: DOUBLE
10588: LD_INT 1
10590: DEC
10591: ST_TO_ADDR
10592: LD_VAR 0 7
10596: PUSH
10597: FOR_TO
10598: IFFALSE 10711
// for j := 1 to 6 do
10600: LD_ADDR_VAR 0 3
10604: PUSH
10605: DOUBLE
10606: LD_INT 1
10608: DEC
10609: ST_TO_ADDR
10610: LD_INT 6
10612: PUSH
10613: FOR_TO
10614: IFFALSE 10707
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10616: LD_INT 0
10618: PPUSH
10619: LD_INT 3
10621: PPUSH
10622: LD_INT 4
10624: PUSH
10625: LD_INT 5
10627: PUSH
10628: LD_INT 5
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: LIST
10635: PUSH
10636: LD_OWVAR 67
10640: ARRAY
10641: PPUSH
10642: CALL_OW 380
// un := CreateHuman ;
10646: LD_ADDR_VAR 0 5
10650: PUSH
10651: CALL_OW 44
10655: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
10656: LD_VAR 0 5
10660: PPUSH
10661: LD_VAR 0 7
10665: PUSH
10666: LD_VAR 0 2
10670: ARRAY
10671: PPUSH
10672: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10676: LD_ADDR_EXP 55
10680: PUSH
10681: LD_EXP 55
10685: PPUSH
10686: LD_EXP 55
10690: PUSH
10691: LD_INT 1
10693: PLUS
10694: PPUSH
10695: LD_VAR 0 5
10699: PPUSH
10700: CALL_OW 1
10704: ST_TO_ADDR
// end ;
10705: GO 10613
10707: POP
10708: POP
10709: GO 10597
10711: POP
10712: POP
// for i := 1 to 3 do
10713: LD_ADDR_VAR 0 2
10717: PUSH
10718: DOUBLE
10719: LD_INT 1
10721: DEC
10722: ST_TO_ADDR
10723: LD_INT 3
10725: PUSH
10726: FOR_TO
10727: IFFALSE 10812
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10729: LD_INT 0
10731: PPUSH
10732: LD_INT 4
10734: PPUSH
10735: LD_INT 4
10737: PUSH
10738: LD_INT 5
10740: PUSH
10741: LD_INT 5
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: LIST
10748: PUSH
10749: LD_OWVAR 67
10753: ARRAY
10754: PPUSH
10755: CALL_OW 380
// un := CreateHuman ;
10759: LD_ADDR_VAR 0 5
10763: PUSH
10764: CALL_OW 44
10768: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
10769: LD_VAR 0 5
10773: PPUSH
10774: LD_INT 17
10776: PPUSH
10777: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10781: LD_ADDR_EXP 55
10785: PUSH
10786: LD_EXP 55
10790: PPUSH
10791: LD_EXP 55
10795: PUSH
10796: LD_INT 1
10798: PLUS
10799: PPUSH
10800: LD_VAR 0 5
10804: PPUSH
10805: CALL_OW 1
10809: ST_TO_ADDR
// end ;
10810: GO 10726
10812: POP
10813: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
10814: LD_ADDR_VAR 0 2
10818: PUSH
10819: DOUBLE
10820: LD_INT 1
10822: DEC
10823: ST_TO_ADDR
10824: LD_INT 2
10826: PUSH
10827: LD_INT 3
10829: PUSH
10830: LD_INT 3
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: LIST
10837: PUSH
10838: LD_OWVAR 67
10842: ARRAY
10843: PUSH
10844: FOR_TO
10845: IFFALSE 10965
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
10847: LD_INT 22
10849: PPUSH
10850: LD_INT 1
10852: PPUSH
10853: LD_INT 1
10855: PPUSH
10856: LD_INT 52
10858: PPUSH
10859: LD_INT 100
10861: PPUSH
10862: CALL 29672 0 5
// veh := CreateVehicle ;
10866: LD_ADDR_VAR 0 6
10870: PUSH
10871: CALL_OW 45
10875: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
10876: LD_INT 0
10878: PPUSH
10879: LD_INT 3
10881: PPUSH
10882: LD_INT 4
10884: PPUSH
10885: CALL_OW 380
// un := CreateHuman ;
10889: LD_ADDR_VAR 0 5
10893: PUSH
10894: CALL_OW 44
10898: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
10899: LD_VAR 0 6
10903: PPUSH
10904: LD_INT 107
10906: PPUSH
10907: LD_INT 182
10909: PPUSH
10910: LD_INT 4
10912: PPUSH
10913: LD_INT 0
10915: PPUSH
10916: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10920: LD_VAR 0 5
10924: PPUSH
10925: LD_VAR 0 6
10929: PPUSH
10930: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10934: LD_ADDR_EXP 55
10938: PUSH
10939: LD_EXP 55
10943: PPUSH
10944: LD_EXP 55
10948: PUSH
10949: LD_INT 1
10951: PLUS
10952: PPUSH
10953: LD_VAR 0 5
10957: PPUSH
10958: CALL_OW 1
10962: ST_TO_ADDR
// end ;
10963: GO 10844
10965: POP
10966: POP
// InitHc ;
10967: CALL_OW 19
// for i := 1 to [ 6 , 8 , 10 ] [ Difficulty ] do
10971: LD_ADDR_VAR 0 2
10975: PUSH
10976: DOUBLE
10977: LD_INT 1
10979: DEC
10980: ST_TO_ADDR
10981: LD_INT 6
10983: PUSH
10984: LD_INT 8
10986: PUSH
10987: LD_INT 10
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: LIST
10994: PUSH
10995: LD_OWVAR 67
10999: ARRAY
11000: PUSH
11001: FOR_TO
11002: IFFALSE 11074
// begin uc_nation := 0 ;
11004: LD_ADDR_OWVAR 21
11008: PUSH
11009: LD_INT 0
11011: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
11012: LD_ADDR_OWVAR 28
11016: PUSH
11017: LD_INT 15
11019: ST_TO_ADDR
// un := CreateHuman ;
11020: LD_ADDR_VAR 0 5
11024: PUSH
11025: CALL_OW 44
11029: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
11030: LD_VAR 0 5
11034: PPUSH
11035: LD_INT 269
11037: PUSH
11038: LD_INT 300
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PUSH
11045: LD_VAR 0 2
11049: PUSH
11050: LD_INT 2
11052: MOD
11053: PUSH
11054: LD_INT 1
11056: PLUS
11057: ARRAY
11058: PPUSH
11059: LD_INT 182
11061: PPUSH
11062: LD_INT 4
11064: PPUSH
11065: LD_INT 0
11067: PPUSH
11068: CALL_OW 50
// end ;
11072: GO 11001
11074: POP
11075: POP
// uc_nation := 3 ;
11076: LD_ADDR_OWVAR 21
11080: PUSH
11081: LD_INT 3
11083: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 ] [ Difficulty ] then
11084: LD_EXP 8
11088: PUSH
11089: LD_INT 10
11091: PUSH
11092: LD_INT 8
11094: PUSH
11095: LD_INT 6
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: LIST
11102: PUSH
11103: LD_OWVAR 67
11107: ARRAY
11108: LESS
11109: IFFALSE 11188
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
11111: LD_INT 21
11113: PPUSH
11114: LD_INT 1
11116: PPUSH
11117: LD_INT 1
11119: PPUSH
11120: LD_INT 51
11122: PPUSH
11123: LD_INT 12
11125: PPUSH
11126: CALL 29672 0 5
// veh := CreateVehicle ;
11130: LD_ADDR_VAR 0 6
11134: PUSH
11135: CALL_OW 45
11139: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
11140: LD_VAR 0 6
11144: PPUSH
11145: LD_INT 269
11147: PPUSH
11148: LD_INT 66
11150: PPUSH
11151: LD_INT 4
11153: PPUSH
11154: LD_INT 0
11156: PPUSH
11157: CALL 63476 0 5
// SetLives ( veh , 333 ) ;
11161: LD_VAR 0 6
11165: PPUSH
11166: LD_INT 333
11168: PPUSH
11169: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
11173: LD_VAR 0 6
11177: PPUSH
11178: LD_INT 2
11180: PPUSH
11181: LD_INT 100
11183: PPUSH
11184: CALL_OW 290
// end ; end ;
11188: LD_VAR 0 1
11192: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
11193: LD_EXP 51
11197: PUSH
11198: LD_EXP 51
11202: PPUSH
11203: CALL_OW 255
11207: PUSH
11208: LD_INT 3
11210: EQUAL
11211: AND
11212: IFFALSE 11375
11214: GO 11216
11216: DISABLE
11217: LD_INT 0
11219: PPUSH
// begin enable ;
11220: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
11221: LD_INT 81
11223: PUSH
11224: LD_INT 3
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: PUSH
11231: LD_INT 91
11233: PUSH
11234: LD_EXP 51
11238: PUSH
11239: LD_INT 15
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: LIST
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PPUSH
11251: CALL_OW 69
11255: IFFALSE 11335
// begin if not IsDrivenBy ( ruBlockadeTank ) then
11257: LD_EXP 51
11261: PPUSH
11262: CALL_OW 311
11266: NOT
11267: IFFALSE 11333
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
11269: LD_ADDR_VAR 0 1
11273: PUSH
11274: LD_INT 22
11276: PUSH
11277: LD_INT 3
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PUSH
11284: LD_INT 21
11286: PUSH
11287: LD_INT 1
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PPUSH
11298: CALL_OW 69
11302: PPUSH
11303: LD_EXP 51
11307: PPUSH
11308: CALL_OW 74
11312: ST_TO_ADDR
// if driver then
11313: LD_VAR 0 1
11317: IFFALSE 11333
// ComEnterUnit ( driver , ruBlockadeTank ) ;
11319: LD_VAR 0 1
11323: PPUSH
11324: LD_EXP 51
11328: PPUSH
11329: CALL_OW 120
// end ; exit ;
11333: GO 11375
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
11335: LD_EXP 51
11339: PPUSH
11340: CALL_OW 256
11344: PUSH
11345: LD_INT 1000
11347: LESS
11348: PUSH
11349: LD_EXP 51
11353: PPUSH
11354: CALL_OW 311
11358: AND
11359: IFFALSE 11375
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
11361: LD_EXP 51
11365: PPUSH
11366: CALL_OW 311
11370: PPUSH
11371: CALL 63036 0 1
// end ;
11375: PPOPN 1
11377: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
11378: LD_EXP 53
11382: PPUSH
11383: LD_INT 3
11385: PUSH
11386: LD_INT 24
11388: PUSH
11389: LD_INT 1000
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PPUSH
11400: CALL_OW 72
11404: PUSH
11405: LD_EXP 53
11409: PPUSH
11410: LD_INT 25
11412: PUSH
11413: LD_INT 4
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: PUSH
11420: LD_INT 50
11422: PUSH
11423: EMPTY
11424: LIST
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: PPUSH
11430: CALL_OW 72
11434: AND
11435: IFFALSE 11623
11437: GO 11439
11439: DISABLE
11440: LD_INT 0
11442: PPUSH
11443: PPUSH
11444: PPUSH
// begin enable ;
11445: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
11446: LD_ADDR_VAR 0 3
11450: PUSH
11451: LD_EXP 53
11455: PPUSH
11456: LD_INT 3
11458: PUSH
11459: LD_INT 24
11461: PUSH
11462: LD_INT 1000
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: PPUSH
11473: CALL_OW 72
11477: PPUSH
11478: LD_INT 1
11480: PPUSH
11481: CALL 63276 0 2
11485: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
11486: LD_ADDR_VAR 0 2
11490: PUSH
11491: LD_EXP 53
11495: PPUSH
11496: LD_INT 25
11498: PUSH
11499: LD_INT 4
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: PUSH
11506: LD_INT 50
11508: PUSH
11509: EMPTY
11510: LIST
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: PPUSH
11516: CALL_OW 72
11520: PUSH
11521: LD_INT 1
11523: ARRAY
11524: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
11525: LD_VAR 0 2
11529: PPUSH
11530: LD_VAR 0 3
11534: PUSH
11535: LD_INT 1
11537: ARRAY
11538: PPUSH
11539: CALL 58775 0 2
11543: NOT
11544: IFFALSE 11623
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
11546: LD_VAR 0 3
11550: PUSH
11551: LD_INT 1
11553: ARRAY
11554: PPUSH
11555: LD_INT 9
11557: PPUSH
11558: CALL_OW 308
11562: NOT
11563: IFFALSE 11581
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
11565: LD_VAR 0 3
11569: PUSH
11570: LD_INT 1
11572: ARRAY
11573: PPUSH
11574: LD_INT 9
11576: PPUSH
11577: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
11581: LD_VAR 0 2
11585: PPUSH
11586: LD_VAR 0 3
11590: PUSH
11591: LD_INT 1
11593: ARRAY
11594: PPUSH
11595: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
11599: LD_VAR 0 2
11603: PPUSH
11604: LD_INT 179
11606: PPUSH
11607: LD_INT 113
11609: PPUSH
11610: CALL_OW 171
// AddComHold ( sci ) ;
11614: LD_VAR 0 2
11618: PPUSH
11619: CALL_OW 200
// end ; end ;
11623: PPOPN 3
11625: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
11626: LD_INT 2
11628: PPUSH
11629: LD_INT 52
11631: PPUSH
11632: CALL_OW 292
11636: IFFALSE 11741
11638: GO 11640
11640: DISABLE
11641: LD_INT 0
11643: PPUSH
11644: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
11645: LD_ADDR_VAR 0 2
11649: PUSH
11650: LD_EXP 55
11654: PPUSH
11655: LD_INT 25
11657: PUSH
11658: LD_INT 1
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PUSH
11665: LD_INT 50
11667: PUSH
11668: EMPTY
11669: LIST
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: PPUSH
11675: CALL_OW 72
11679: ST_TO_ADDR
// if not tmp then
11680: LD_VAR 0 2
11684: NOT
11685: IFFALSE 11689
// exit ;
11687: GO 11741
// for i in tmp do
11689: LD_ADDR_VAR 0 1
11693: PUSH
11694: LD_VAR 0 2
11698: PUSH
11699: FOR_IN
11700: IFFALSE 11739
// begin if IsInUnit ( i ) then
11702: LD_VAR 0 1
11706: PPUSH
11707: CALL_OW 310
11711: IFFALSE 11722
// ComExitBuilding ( i ) ;
11713: LD_VAR 0 1
11717: PPUSH
11718: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
11722: LD_VAR 0 1
11726: PPUSH
11727: LD_INT 84
11729: PPUSH
11730: LD_INT 133
11732: PPUSH
11733: CALL_OW 174
// end ;
11737: GO 11699
11739: POP
11740: POP
// end ;
11741: PPOPN 2
11743: END
// every 0 0$1 trigger leninSpotted do var i , tmp , weapon ;
11744: LD_EXP 14
11748: IFFALSE 11897
11750: GO 11752
11752: DISABLE
11753: LD_INT 0
11755: PPUSH
11756: PPUSH
11757: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
11758: LD_ADDR_VAR 0 2
11762: PUSH
11763: LD_INT 72
11765: PUSH
11766: LD_INT 12
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket , ru_gun ] , [ ru_rocket , ru_heavy_gun ] ] [ Difficulty ] ;
11773: LD_ADDR_VAR 0 3
11777: PUSH
11778: LD_INT 44
11780: PUSH
11781: LD_INT 43
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: PUSH
11788: LD_INT 47
11790: PUSH
11791: LD_INT 44
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: PUSH
11798: LD_INT 47
11800: PUSH
11801: LD_INT 46
11803: PUSH
11804: EMPTY
11805: LIST
11806: LIST
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: LIST
11812: PUSH
11813: LD_OWVAR 67
11817: ARRAY
11818: ST_TO_ADDR
// for i := 1 to 6 do
11819: LD_ADDR_VAR 0 1
11823: PUSH
11824: DOUBLE
11825: LD_INT 1
11827: DEC
11828: ST_TO_ADDR
11829: LD_INT 6
11831: PUSH
11832: FOR_TO
11833: IFFALSE 11895
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
11835: LD_VAR 0 2
11839: PPUSH
11840: LD_INT 22
11842: PUSH
11843: LD_INT 23
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: PUSH
11850: LD_VAR 0 1
11854: PUSH
11855: LD_INT 2
11857: MOD
11858: PUSH
11859: LD_INT 1
11861: PLUS
11862: ARRAY
11863: PPUSH
11864: LD_INT 1
11866: PPUSH
11867: LD_INT 1
11869: PPUSH
11870: LD_VAR 0 3
11874: PUSH
11875: LD_VAR 0 1
11879: PUSH
11880: LD_INT 2
11882: MOD
11883: PUSH
11884: LD_INT 1
11886: PLUS
11887: ARRAY
11888: PPUSH
11889: CALL_OW 185
11893: GO 11832
11895: POP
11896: POP
// end ;
11897: PPOPN 3
11899: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
11900: LD_EXP 11
11904: IFFALSE 13053
11906: GO 11908
11908: DISABLE
11909: LD_INT 0
11911: PPUSH
11912: PPUSH
11913: PPUSH
11914: PPUSH
11915: PPUSH
11916: PPUSH
// begin enable ;
11917: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
11918: LD_ADDR_VAR 0 6
11922: PUSH
11923: LD_INT 10
11925: PPUSH
11926: LD_INT 81
11928: PUSH
11929: LD_INT 3
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PPUSH
11936: CALL_OW 70
11940: ST_TO_ADDR
// if ruSpecialVehicleGroup then
11941: LD_EXP 56
11945: IFFALSE 12211
// begin for i in ruSpecialVehicleGroup do
11947: LD_ADDR_VAR 0 1
11951: PUSH
11952: LD_EXP 56
11956: PUSH
11957: FOR_IN
11958: IFFALSE 12209
// begin if enemyInBase then
11960: LD_VAR 0 6
11964: IFFALSE 12207
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
11966: LD_VAR 0 1
11970: PPUSH
11971: CALL_OW 256
11975: PUSH
11976: LD_INT 500
11978: GREATER
11979: PUSH
11980: LD_VAR 0 1
11984: PPUSH
11985: CALL_OW 110
11989: PUSH
11990: LD_INT 0
11992: EQUAL
11993: AND
11994: IFFALSE 12020
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
11996: LD_VAR 0 1
12000: PPUSH
12001: LD_VAR 0 6
12005: PPUSH
12006: LD_VAR 0 1
12010: PPUSH
12011: CALL_OW 74
12015: PPUSH
12016: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
12020: LD_VAR 0 1
12024: PPUSH
12025: CALL_OW 256
12029: PUSH
12030: LD_INT 500
12032: LESSEQUAL
12033: PUSH
12034: LD_VAR 0 1
12038: PPUSH
12039: CALL_OW 110
12043: PUSH
12044: LD_INT 0
12046: EQUAL
12047: AND
12048: IFFALSE 12077
// begin SetTag ( i , 1 ) ;
12050: LD_VAR 0 1
12054: PPUSH
12055: LD_INT 1
12057: PPUSH
12058: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
12062: LD_VAR 0 1
12066: PPUSH
12067: LD_INT 83
12069: PPUSH
12070: LD_INT 134
12072: PPUSH
12073: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
12077: LD_VAR 0 1
12081: PPUSH
12082: CALL_OW 256
12086: PUSH
12087: LD_INT 1000
12089: LESS
12090: PUSH
12091: LD_VAR 0 1
12095: PPUSH
12096: CALL_OW 110
12100: PUSH
12101: LD_INT 1
12103: EQUAL
12104: AND
12105: PUSH
12106: LD_VAR 0 1
12110: PPUSH
12111: LD_INT 83
12113: PPUSH
12114: LD_INT 134
12116: PPUSH
12117: CALL_OW 297
12121: PUSH
12122: LD_INT 6
12124: LESS
12125: AND
12126: IFFALSE 12154
// begin SetFuel ( i , 100 ) ;
12128: LD_VAR 0 1
12132: PPUSH
12133: LD_INT 100
12135: PPUSH
12136: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
12140: LD_VAR 0 1
12144: PPUSH
12145: CALL_OW 310
12149: PPUSH
12150: CALL 63156 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
12154: LD_VAR 0 1
12158: PPUSH
12159: CALL_OW 256
12163: PUSH
12164: LD_INT 1000
12166: EQUAL
12167: PUSH
12168: LD_VAR 0 1
12172: PPUSH
12173: CALL_OW 110
12177: PUSH
12178: LD_INT 1
12180: EQUAL
12181: AND
12182: PUSH
12183: LD_VAR 0 1
12187: PPUSH
12188: CALL_OW 311
12192: AND
12193: IFFALSE 12207
// SetTag ( i , 0 ) ;
12195: LD_VAR 0 1
12199: PPUSH
12200: LD_INT 0
12202: PPUSH
12203: CALL_OW 109
// end ; end ;
12207: GO 11957
12209: POP
12210: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
12211: LD_ADDR_VAR 0 5
12215: PUSH
12216: LD_EXP 55
12220: PPUSH
12221: LD_INT 25
12223: PUSH
12224: LD_INT 4
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: PPUSH
12231: CALL_OW 72
12235: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12236: LD_ADDR_VAR 0 4
12240: PUSH
12241: LD_EXP 55
12245: PPUSH
12246: LD_INT 92
12248: PUSH
12249: LD_INT 92
12251: PUSH
12252: LD_INT 155
12254: PUSH
12255: LD_INT 12
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: PUSH
12264: LD_INT 3
12266: PUSH
12267: LD_INT 24
12269: PUSH
12270: LD_INT 1000
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: PPUSH
12285: CALL_OW 72
12289: ST_TO_ADDR
// if sci then
12290: LD_VAR 0 5
12294: IFFALSE 12427
// begin if hurt then
12296: LD_VAR 0 4
12300: IFFALSE 12373
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
12302: LD_VAR 0 5
12306: PPUSH
12307: LD_INT 3
12309: PUSH
12310: LD_INT 54
12312: PUSH
12313: EMPTY
12314: LIST
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: PPUSH
12320: CALL_OW 72
12324: IFFALSE 12353
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
12326: LD_VAR 0 5
12330: PPUSH
12331: LD_INT 3
12333: PUSH
12334: LD_INT 54
12336: PUSH
12337: EMPTY
12338: LIST
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PPUSH
12344: CALL_OW 72
12348: PPUSH
12349: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
12353: LD_VAR 0 5
12357: PPUSH
12358: LD_VAR 0 4
12362: PUSH
12363: LD_INT 1
12365: ARRAY
12366: PPUSH
12367: CALL_OW 188
// end else
12371: GO 12427
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
12373: LD_VAR 0 5
12377: PPUSH
12378: LD_INT 3
12380: PUSH
12381: LD_INT 54
12383: PUSH
12384: EMPTY
12385: LIST
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: PPUSH
12391: CALL_OW 72
12395: IFFALSE 12427
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
12397: LD_VAR 0 5
12401: PPUSH
12402: LD_INT 3
12404: PUSH
12405: LD_INT 54
12407: PUSH
12408: EMPTY
12409: LIST
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PPUSH
12415: CALL_OW 72
12419: PPUSH
12420: LD_INT 17
12422: PPUSH
12423: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12427: LD_ADDR_VAR 0 3
12431: PUSH
12432: LD_INT 10
12434: PPUSH
12435: LD_INT 21
12437: PUSH
12438: LD_INT 3
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: PUSH
12445: LD_INT 3
12447: PUSH
12448: LD_INT 24
12450: PUSH
12451: LD_INT 1000
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PPUSH
12466: CALL_OW 70
12470: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
12471: LD_ADDR_VAR 0 2
12475: PUSH
12476: LD_EXP 55
12480: PPUSH
12481: LD_INT 25
12483: PUSH
12484: LD_INT 2
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PPUSH
12491: CALL_OW 72
12495: PUSH
12496: LD_INT 22
12498: PUSH
12499: LD_INT 3
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PUSH
12506: LD_INT 34
12508: PUSH
12509: LD_INT 52
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: PPUSH
12520: CALL_OW 69
12524: UNION
12525: ST_TO_ADDR
// if not tmp then
12526: LD_VAR 0 2
12530: NOT
12531: IFFALSE 12535
// exit ;
12533: GO 13053
// for i in tmp do
12535: LD_ADDR_VAR 0 1
12539: PUSH
12540: LD_VAR 0 2
12544: PUSH
12545: FOR_IN
12546: IFFALSE 13051
// begin if GetClass ( i ) = 2 then
12548: LD_VAR 0 1
12552: PPUSH
12553: CALL_OW 257
12557: PUSH
12558: LD_INT 2
12560: EQUAL
12561: IFFALSE 12784
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
12563: LD_VAR 0 1
12567: PPUSH
12568: CALL_OW 256
12572: PUSH
12573: LD_INT 1000
12575: EQUAL
12576: PUSH
12577: LD_VAR 0 1
12581: PPUSH
12582: CALL_OW 110
12586: PUSH
12587: LD_INT 1
12589: EQUAL
12590: AND
12591: IFFALSE 12605
// SetTag ( i , 0 ) ;
12593: LD_VAR 0 1
12597: PPUSH
12598: LD_INT 0
12600: PPUSH
12601: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
12605: LD_VAR 0 1
12609: PPUSH
12610: CALL_OW 256
12614: PUSH
12615: LD_INT 500
12617: LESSEQUAL
12618: PUSH
12619: LD_VAR 0 1
12623: PPUSH
12624: CALL_OW 110
12628: PUSH
12629: LD_INT 0
12631: EQUAL
12632: AND
12633: IFFALSE 12662
// begin SetTag ( i , 1 ) ;
12635: LD_VAR 0 1
12639: PPUSH
12640: LD_INT 1
12642: PPUSH
12643: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
12647: LD_VAR 0 1
12651: PPUSH
12652: LD_INT 92
12654: PPUSH
12655: LD_INT 155
12657: PPUSH
12658: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
12662: LD_VAR 0 3
12666: PUSH
12667: LD_VAR 0 1
12671: PPUSH
12672: CALL_OW 256
12676: PUSH
12677: LD_INT 500
12679: GREATER
12680: AND
12681: PUSH
12682: LD_VAR 0 1
12686: PPUSH
12687: CALL_OW 110
12691: PUSH
12692: LD_INT 0
12694: EQUAL
12695: AND
12696: PUSH
12697: LD_VAR 0 1
12701: PPUSH
12702: CALL_OW 314
12706: NOT
12707: AND
12708: IFFALSE 12782
// begin if b then
12710: LD_VAR 0 3
12714: IFFALSE 12746
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
12716: LD_VAR 0 1
12720: PPUSH
12721: LD_VAR 0 3
12725: PUSH
12726: LD_INT 1
12728: PPUSH
12729: LD_VAR 0 3
12733: PPUSH
12734: CALL_OW 12
12738: ARRAY
12739: PPUSH
12740: CALL_OW 130
12744: GO 12782
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
12746: LD_VAR 0 1
12750: PPUSH
12751: LD_INT 94
12753: PPUSH
12754: LD_INT 165
12756: PPUSH
12757: CALL_OW 297
12761: PUSH
12762: LD_INT 8
12764: GREATER
12765: IFFALSE 12782
// ComMoveXY ( i , 94 , 165 ) ;
12767: LD_VAR 0 1
12771: PPUSH
12772: LD_INT 94
12774: PPUSH
12775: LD_INT 165
12777: PPUSH
12778: CALL_OW 111
// end ; end else
12782: GO 13049
// if GetWeapon ( i ) = ru_crane then
12784: LD_VAR 0 1
12788: PPUSH
12789: CALL_OW 264
12793: PUSH
12794: LD_INT 52
12796: EQUAL
12797: IFFALSE 13049
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
12799: LD_VAR 0 1
12803: PPUSH
12804: CALL_OW 256
12808: PUSH
12809: LD_INT 1000
12811: EQUAL
12812: PUSH
12813: LD_VAR 0 1
12817: PPUSH
12818: CALL_OW 110
12822: PUSH
12823: LD_INT 1
12825: EQUAL
12826: AND
12827: IFFALSE 12853
// begin SetTag ( i , 0 ) ;
12829: LD_VAR 0 1
12833: PPUSH
12834: LD_INT 0
12836: PPUSH
12837: CALL_OW 109
// SetFuel ( i , 100 ) ;
12841: LD_VAR 0 1
12845: PPUSH
12846: LD_INT 100
12848: PPUSH
12849: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
12853: LD_VAR 0 1
12857: PPUSH
12858: CALL_OW 256
12862: PUSH
12863: LD_INT 500
12865: LESSEQUAL
12866: PUSH
12867: LD_VAR 0 1
12871: PPUSH
12872: CALL_OW 110
12876: PUSH
12877: LD_INT 0
12879: EQUAL
12880: AND
12881: IFFALSE 12924
// begin SetTag ( i , 1 ) ;
12883: LD_VAR 0 1
12887: PPUSH
12888: LD_INT 1
12890: PPUSH
12891: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
12895: LD_VAR 0 1
12899: PPUSH
12900: LD_INT 83
12902: PPUSH
12903: LD_INT 135
12905: PPUSH
12906: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
12910: LD_VAR 0 1
12914: PPUSH
12915: CALL_OW 310
12919: PPUSH
12920: CALL 63156 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
12924: LD_VAR 0 1
12928: PPUSH
12929: CALL_OW 256
12933: PUSH
12934: LD_INT 500
12936: GREATER
12937: PUSH
12938: LD_VAR 0 1
12942: PPUSH
12943: CALL_OW 110
12947: PUSH
12948: LD_INT 0
12950: EQUAL
12951: AND
12952: PUSH
12953: LD_VAR 0 1
12957: PPUSH
12958: CALL_OW 311
12962: AND
12963: PUSH
12964: LD_VAR 0 1
12968: PPUSH
12969: CALL_OW 314
12973: NOT
12974: AND
12975: IFFALSE 13049
// begin if b then
12977: LD_VAR 0 3
12981: IFFALSE 13013
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
12983: LD_VAR 0 1
12987: PPUSH
12988: LD_VAR 0 3
12992: PUSH
12993: LD_INT 1
12995: PPUSH
12996: LD_VAR 0 3
13000: PPUSH
13001: CALL_OW 12
13005: ARRAY
13006: PPUSH
13007: CALL_OW 130
13011: GO 13049
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
13013: LD_VAR 0 1
13017: PPUSH
13018: LD_INT 94
13020: PPUSH
13021: LD_INT 165
13023: PPUSH
13024: CALL_OW 297
13028: PUSH
13029: LD_INT 8
13031: GREATER
13032: IFFALSE 13049
// ComMoveXY ( i , 94 , 165 ) ;
13034: LD_VAR 0 1
13038: PPUSH
13039: LD_INT 94
13041: PPUSH
13042: LD_INT 165
13044: PPUSH
13045: CALL_OW 111
// end ; end ; end ;
13049: GO 12545
13051: POP
13052: POP
// end ;
13053: PPOPN 6
13055: END
// every 8 8$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp ;
13056: LD_EXP 23
13060: NOT
13061: PUSH
13062: LD_EXP 27
13066: NOT
13067: AND
13068: IFFALSE 13976
13070: GO 13072
13072: DISABLE
13073: LD_INT 0
13075: PPUSH
13076: PPUSH
13077: PPUSH
13078: PPUSH
// begin enable ;
13079: ENABLE
// if Prob ( [ 35 , 45 , 55 ] [ Difficulty ] ) then
13080: LD_INT 35
13082: PUSH
13083: LD_INT 45
13085: PUSH
13086: LD_INT 55
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: LIST
13093: PUSH
13094: LD_OWVAR 67
13098: ARRAY
13099: PPUSH
13100: CALL_OW 13
13104: IFFALSE 13120
// waveStrength := waveStrength + 1 ;
13106: LD_ADDR_EXP 58
13110: PUSH
13111: LD_EXP 58
13115: PUSH
13116: LD_INT 1
13118: PLUS
13119: ST_TO_ADDR
// if waveStrength > [ 4 , 5 , 6 ] [ Difficulty ] then
13120: LD_EXP 58
13124: PUSH
13125: LD_INT 4
13127: PUSH
13128: LD_INT 5
13130: PUSH
13131: LD_INT 6
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: LIST
13138: PUSH
13139: LD_OWVAR 67
13143: ARRAY
13144: GREATER
13145: IFFALSE 13178
// begin waveStrength := waveStrength + Difficulty ;
13147: LD_ADDR_EXP 58
13151: PUSH
13152: LD_EXP 58
13156: PUSH
13157: LD_OWVAR 67
13161: PLUS
13162: ST_TO_ADDR
// disableAttackOnHeike := true ;
13163: LD_ADDR_EXP 27
13167: PUSH
13168: LD_INT 1
13170: ST_TO_ADDR
// wait ( 3 3$00 ) ;
13171: LD_INT 6300
13173: PPUSH
13174: CALL_OW 67
// end ; if disableAttackOnHeike and Difficulty > 1 then
13178: LD_EXP 27
13182: PUSH
13183: LD_OWVAR 67
13187: PUSH
13188: LD_INT 1
13190: GREATER
13191: AND
13192: IFFALSE 13401
// begin for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
13194: LD_ADDR_VAR 0 1
13198: PUSH
13199: DOUBLE
13200: LD_INT 1
13202: DEC
13203: ST_TO_ADDR
13204: LD_INT 3
13206: PUSH
13207: LD_INT 3
13209: PUSH
13210: LD_INT 4
13212: PUSH
13213: LD_INT 4
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: PUSH
13222: LD_OWVAR 67
13226: ARRAY
13227: PUSH
13228: FOR_TO
13229: IFFALSE 13399
// begin InitHc ;
13231: CALL_OW 19
// InitVc ;
13235: CALL_OW 20
// uc_side := 3 ;
13239: LD_ADDR_OWVAR 20
13243: PUSH
13244: LD_INT 3
13246: ST_TO_ADDR
// uc_nation := 3 ;
13247: LD_ADDR_OWVAR 21
13251: PUSH
13252: LD_INT 3
13254: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
13255: LD_INT 0
13257: PPUSH
13258: LD_INT 1
13260: PPUSH
13261: LD_OWVAR 67
13265: PUSH
13266: LD_INT 2
13268: PLUS
13269: PPUSH
13270: CALL_OW 380
// un := CreateHuman ;
13274: LD_ADDR_VAR 0 2
13278: PUSH
13279: CALL_OW 44
13283: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
13284: LD_VAR 0 2
13288: PPUSH
13289: LD_INT 160
13291: PPUSH
13292: LD_INT 3
13294: PPUSH
13295: LD_INT 2
13297: PPUSH
13298: LD_INT 0
13300: PPUSH
13301: CALL 63476 0 5
// SetClass ( un , class_bazooker ) ;
13305: LD_VAR 0 2
13309: PPUSH
13310: LD_INT 9
13312: PPUSH
13313: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
13317: LD_ADDR_EXP 57
13321: PUSH
13322: LD_EXP 57
13326: PPUSH
13327: LD_EXP 57
13331: PUSH
13332: LD_INT 1
13334: PLUS
13335: PPUSH
13336: LD_VAR 0 2
13340: PPUSH
13341: CALL_OW 1
13345: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
13346: LD_VAR 0 2
13350: PPUSH
13351: LD_INT 177
13353: PPUSH
13354: LD_INT 17
13356: PPUSH
13357: CALL_OW 111
// wait ( 0 0$2 ) ;
13361: LD_INT 70
13363: PPUSH
13364: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
13368: LD_ADDR_VAR 0 4
13372: PUSH
13373: LD_VAR 0 4
13377: PPUSH
13378: LD_VAR 0 4
13382: PUSH
13383: LD_INT 1
13385: PLUS
13386: PPUSH
13387: LD_VAR 0 2
13391: PPUSH
13392: CALL_OW 1
13396: ST_TO_ADDR
// end ;
13397: GO 13228
13399: POP
13400: POP
// end ; for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] + waveStrength do
13401: LD_ADDR_VAR 0 1
13405: PUSH
13406: DOUBLE
13407: LD_INT 1
13409: DEC
13410: ST_TO_ADDR
13411: LD_INT 2
13413: PUSH
13414: LD_INT 3
13416: PUSH
13417: LD_INT 4
13419: PUSH
13420: LD_INT 5
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: PUSH
13429: LD_OWVAR 67
13433: ARRAY
13434: PUSH
13435: LD_EXP 58
13439: PLUS
13440: PUSH
13441: FOR_TO
13442: IFFALSE 13751
// begin InitHc ;
13444: CALL_OW 19
// InitVc ;
13448: CALL_OW 20
// uc_side := 3 ;
13452: LD_ADDR_OWVAR 20
13456: PUSH
13457: LD_INT 3
13459: ST_TO_ADDR
// uc_nation := 3 ;
13460: LD_ADDR_OWVAR 21
13464: PUSH
13465: LD_INT 3
13467: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
13468: LD_INT 22
13470: PUSH
13471: LD_INT 23
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 1
13480: PPUSH
13481: LD_INT 2
13483: PPUSH
13484: CALL_OW 12
13488: ARRAY
13489: PPUSH
13490: LD_INT 1
13492: PPUSH
13493: LD_INT 1
13495: PPUSH
13496: LD_INT 44
13498: PUSH
13499: LD_INT 45
13501: PUSH
13502: LD_INT 43
13504: PUSH
13505: LD_INT 42
13507: PUSH
13508: LD_INT 44
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 1
13520: PPUSH
13521: LD_INT 5
13523: PPUSH
13524: CALL_OW 12
13528: ARRAY
13529: PPUSH
13530: LD_INT 99
13532: PPUSH
13533: CALL 29672 0 5
// veh := CreateVehicle ;
13537: LD_ADDR_VAR 0 3
13541: PUSH
13542: CALL_OW 45
13546: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
13547: LD_VAR 0 3
13551: PPUSH
13552: LD_INT 160
13554: PPUSH
13555: LD_INT 3
13557: PPUSH
13558: LD_INT 2
13560: PPUSH
13561: LD_INT 0
13563: PPUSH
13564: CALL 63476 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
13568: LD_ADDR_EXP 57
13572: PUSH
13573: LD_EXP 57
13577: PPUSH
13578: LD_EXP 57
13582: PUSH
13583: LD_INT 1
13585: PLUS
13586: PPUSH
13587: LD_VAR 0 3
13591: PPUSH
13592: CALL_OW 1
13596: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
13597: LD_INT 0
13599: PPUSH
13600: LD_INT 3
13602: PPUSH
13603: LD_OWVAR 67
13607: PUSH
13608: LD_INT 2
13610: PLUS
13611: PPUSH
13612: CALL_OW 380
// un := CreateHuman ;
13616: LD_ADDR_VAR 0 2
13620: PUSH
13621: CALL_OW 44
13625: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13626: LD_VAR 0 2
13630: PPUSH
13631: LD_VAR 0 3
13635: PPUSH
13636: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
13640: LD_ADDR_EXP 57
13644: PUSH
13645: LD_EXP 57
13649: PPUSH
13650: LD_EXP 57
13654: PUSH
13655: LD_INT 1
13657: PLUS
13658: PPUSH
13659: LD_VAR 0 2
13663: PPUSH
13664: CALL_OW 1
13668: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
13669: LD_VAR 0 2
13673: PPUSH
13674: LD_INT 177
13676: PPUSH
13677: LD_INT 17
13679: PPUSH
13680: CALL_OW 111
// wait ( 0 0$2 ) ;
13684: LD_INT 70
13686: PPUSH
13687: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
13691: LD_ADDR_VAR 0 4
13695: PUSH
13696: LD_VAR 0 4
13700: PPUSH
13701: LD_VAR 0 4
13705: PUSH
13706: LD_INT 1
13708: PLUS
13709: PPUSH
13710: LD_VAR 0 3
13714: PPUSH
13715: CALL_OW 1
13719: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
13720: LD_ADDR_VAR 0 4
13724: PUSH
13725: LD_VAR 0 4
13729: PPUSH
13730: LD_VAR 0 4
13734: PUSH
13735: LD_INT 1
13737: PLUS
13738: PPUSH
13739: LD_VAR 0 2
13743: PPUSH
13744: CALL_OW 1
13748: ST_TO_ADDR
// end ;
13749: GO 13441
13751: POP
13752: POP
// for i in tmp do
13753: LD_ADDR_VAR 0 1
13757: PUSH
13758: LD_VAR 0 4
13762: PUSH
13763: FOR_IN
13764: IFFALSE 13854
// begin if Prob ( 50 ) then
13766: LD_INT 50
13768: PPUSH
13769: CALL_OW 13
13773: IFFALSE 13792
// ComAgressiveMove ( i , 206 , 73 ) else
13775: LD_VAR 0 1
13779: PPUSH
13780: LD_INT 206
13782: PPUSH
13783: LD_INT 73
13785: PPUSH
13786: CALL_OW 114
13790: GO 13852
// begin ComAgressiveMove ( i , 206 , 73 ) ;
13792: LD_VAR 0 1
13796: PPUSH
13797: LD_INT 206
13799: PPUSH
13800: LD_INT 73
13802: PPUSH
13803: CALL_OW 114
// AddComAgressiveMove ( i , 257 , 105 ) ;
13807: LD_VAR 0 1
13811: PPUSH
13812: LD_INT 257
13814: PPUSH
13815: LD_INT 105
13817: PPUSH
13818: CALL_OW 174
// AddComAgressiveMove ( i , 227 , 97 ) ;
13822: LD_VAR 0 1
13826: PPUSH
13827: LD_INT 227
13829: PPUSH
13830: LD_INT 97
13832: PPUSH
13833: CALL_OW 174
// AddComAgressiveMove ( i , 206 , 73 ) ;
13837: LD_VAR 0 1
13841: PPUSH
13842: LD_INT 206
13844: PPUSH
13845: LD_INT 73
13847: PPUSH
13848: CALL_OW 174
// end ; end ;
13852: GO 13763
13854: POP
13855: POP
// repeat wait ( 0 0$1 ) ;
13856: LD_INT 35
13858: PPUSH
13859: CALL_OW 67
// for i in tmp do
13863: LD_ADDR_VAR 0 1
13867: PUSH
13868: LD_VAR 0 4
13872: PUSH
13873: FOR_IN
13874: IFFALSE 13953
// if IsDead ( i ) then
13876: LD_VAR 0 1
13880: PPUSH
13881: CALL_OW 301
13885: IFFALSE 13905
// tmp := tmp diff i else
13887: LD_ADDR_VAR 0 4
13891: PUSH
13892: LD_VAR 0 4
13896: PUSH
13897: LD_VAR 0 1
13901: DIFF
13902: ST_TO_ADDR
13903: GO 13951
// if not HasTask ( i ) then
13905: LD_VAR 0 1
13909: PPUSH
13910: CALL_OW 314
13914: NOT
13915: IFFALSE 13951
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
13917: LD_VAR 0 1
13921: PPUSH
13922: LD_INT 81
13924: PUSH
13925: LD_INT 3
13927: PUSH
13928: EMPTY
13929: LIST
13930: LIST
13931: PPUSH
13932: CALL_OW 69
13936: PPUSH
13937: LD_VAR 0 1
13941: PPUSH
13942: CALL_OW 74
13946: PPUSH
13947: CALL_OW 115
13951: GO 13873
13953: POP
13954: POP
// until not tmp ;
13955: LD_VAR 0 4
13959: NOT
13960: IFFALSE 13856
// if firstAttack then
13962: LD_EXP 28
13966: IFFALSE 13976
// firstAttack := false ;
13968: LD_ADDR_EXP 28
13972: PUSH
13973: LD_INT 0
13975: ST_TO_ADDR
// end ;
13976: PPOPN 4
13978: END
// every 8 8$00 trigger not omarAttack and bergkampfArrived and not rolfHasVehicles do var i , un , veh , tmp ;
13979: LD_EXP 23
13983: NOT
13984: PUSH
13985: LD_EXP 3
13989: AND
13990: PUSH
13991: LD_EXP 16
13995: NOT
13996: AND
13997: IFFALSE 14837
13999: GO 14001
14001: DISABLE
14002: LD_INT 0
14004: PPUSH
14005: PPUSH
14006: PPUSH
14007: PPUSH
// begin enable ;
14008: ENABLE
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
14009: LD_ADDR_VAR 0 1
14013: PUSH
14014: DOUBLE
14015: LD_INT 1
14017: DEC
14018: ST_TO_ADDR
14019: LD_INT 1
14021: PUSH
14022: LD_INT 2
14024: PUSH
14025: LD_INT 2
14027: PUSH
14028: LD_INT 3
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: PUSH
14037: LD_OWVAR 67
14041: ARRAY
14042: PUSH
14043: FOR_TO
14044: IFFALSE 14345
// begin InitHc ;
14046: CALL_OW 19
// InitVc ;
14050: CALL_OW 20
// uc_side := 3 ;
14054: LD_ADDR_OWVAR 20
14058: PUSH
14059: LD_INT 3
14061: ST_TO_ADDR
// uc_nation := 3 ;
14062: LD_ADDR_OWVAR 21
14066: PUSH
14067: LD_INT 3
14069: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
14070: LD_INT 22
14072: PUSH
14073: LD_INT 23
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 1
14082: PPUSH
14083: LD_INT 2
14085: PPUSH
14086: CALL_OW 12
14090: ARRAY
14091: PPUSH
14092: LD_INT 1
14094: PPUSH
14095: LD_INT 1
14097: PPUSH
14098: LD_INT 44
14100: PUSH
14101: LD_INT 43
14103: PUSH
14104: LD_INT 42
14106: PUSH
14107: LD_INT 44
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: PUSH
14116: LD_INT 1
14118: PPUSH
14119: LD_INT 4
14121: PPUSH
14122: CALL_OW 12
14126: ARRAY
14127: PPUSH
14128: LD_INT 99
14130: PPUSH
14131: CALL 29672 0 5
// veh := CreateVehicle ;
14135: LD_ADDR_VAR 0 3
14139: PUSH
14140: CALL_OW 45
14144: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
14145: LD_VAR 0 3
14149: PPUSH
14150: LD_INT 5
14152: PPUSH
14153: LD_INT 3
14155: PPUSH
14156: LD_INT 2
14158: PPUSH
14159: LD_INT 0
14161: PPUSH
14162: CALL 63476 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14166: LD_ADDR_EXP 57
14170: PUSH
14171: LD_EXP 57
14175: PPUSH
14176: LD_EXP 57
14180: PUSH
14181: LD_INT 1
14183: PLUS
14184: PPUSH
14185: LD_VAR 0 3
14189: PPUSH
14190: CALL_OW 1
14194: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
14195: LD_INT 0
14197: PPUSH
14198: LD_INT 3
14200: PPUSH
14201: LD_OWVAR 67
14205: PPUSH
14206: CALL_OW 380
// un := CreateHuman ;
14210: LD_ADDR_VAR 0 2
14214: PUSH
14215: CALL_OW 44
14219: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14220: LD_VAR 0 2
14224: PPUSH
14225: LD_VAR 0 3
14229: PPUSH
14230: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14234: LD_ADDR_EXP 57
14238: PUSH
14239: LD_EXP 57
14243: PPUSH
14244: LD_EXP 57
14248: PUSH
14249: LD_INT 1
14251: PLUS
14252: PPUSH
14253: LD_VAR 0 2
14257: PPUSH
14258: CALL_OW 1
14262: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
14263: LD_VAR 0 2
14267: PPUSH
14268: LD_INT 23
14270: PPUSH
14271: LD_INT 7
14273: PPUSH
14274: CALL_OW 111
// wait ( 0 0$2 ) ;
14278: LD_INT 70
14280: PPUSH
14281: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14285: LD_ADDR_VAR 0 4
14289: PUSH
14290: LD_VAR 0 4
14294: PPUSH
14295: LD_VAR 0 4
14299: PUSH
14300: LD_INT 1
14302: PLUS
14303: PPUSH
14304: LD_VAR 0 3
14308: PPUSH
14309: CALL_OW 1
14313: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14314: LD_ADDR_VAR 0 4
14318: PUSH
14319: LD_VAR 0 4
14323: PPUSH
14324: LD_VAR 0 4
14328: PUSH
14329: LD_INT 1
14331: PLUS
14332: PPUSH
14333: LD_VAR 0 2
14337: PPUSH
14338: CALL_OW 1
14342: ST_TO_ADDR
// end ;
14343: GO 14043
14345: POP
14346: POP
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + waveStrength do
14347: LD_ADDR_VAR 0 1
14351: PUSH
14352: DOUBLE
14353: LD_INT 1
14355: DEC
14356: ST_TO_ADDR
14357: LD_INT 3
14359: PUSH
14360: LD_INT 4
14362: PUSH
14363: LD_INT 4
14365: PUSH
14366: LD_INT 5
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: PUSH
14375: LD_OWVAR 67
14379: ARRAY
14380: PUSH
14381: LD_EXP 58
14385: PLUS
14386: PUSH
14387: FOR_TO
14388: IFFALSE 14697
// begin InitHc ;
14390: CALL_OW 19
// InitVc ;
14394: CALL_OW 20
// uc_side := 3 ;
14398: LD_ADDR_OWVAR 20
14402: PUSH
14403: LD_INT 3
14405: ST_TO_ADDR
// uc_nation := 3 ;
14406: LD_ADDR_OWVAR 21
14410: PUSH
14411: LD_INT 3
14413: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
14414: LD_INT 22
14416: PUSH
14417: LD_INT 23
14419: PUSH
14420: EMPTY
14421: LIST
14422: LIST
14423: PUSH
14424: LD_INT 1
14426: PPUSH
14427: LD_INT 2
14429: PPUSH
14430: CALL_OW 12
14434: ARRAY
14435: PPUSH
14436: LD_INT 1
14438: PPUSH
14439: LD_INT 1
14441: PPUSH
14442: LD_INT 44
14444: PUSH
14445: LD_INT 45
14447: PUSH
14448: LD_INT 43
14450: PUSH
14451: LD_INT 42
14453: PUSH
14454: LD_INT 44
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: PUSH
14464: LD_INT 1
14466: PPUSH
14467: LD_INT 5
14469: PPUSH
14470: CALL_OW 12
14474: ARRAY
14475: PPUSH
14476: LD_INT 99
14478: PPUSH
14479: CALL 29672 0 5
// veh := CreateVehicle ;
14483: LD_ADDR_VAR 0 3
14487: PUSH
14488: CALL_OW 45
14492: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
14493: LD_VAR 0 3
14497: PPUSH
14498: LD_INT 127
14500: PPUSH
14501: LD_INT 243
14503: PPUSH
14504: LD_INT 0
14506: PPUSH
14507: LD_INT 0
14509: PPUSH
14510: CALL 63476 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14514: LD_ADDR_EXP 57
14518: PUSH
14519: LD_EXP 57
14523: PPUSH
14524: LD_EXP 57
14528: PUSH
14529: LD_INT 1
14531: PLUS
14532: PPUSH
14533: LD_VAR 0 3
14537: PPUSH
14538: CALL_OW 1
14542: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
14543: LD_INT 0
14545: PPUSH
14546: LD_INT 3
14548: PPUSH
14549: LD_OWVAR 67
14553: PUSH
14554: LD_INT 2
14556: PLUS
14557: PPUSH
14558: CALL_OW 380
// un := CreateHuman ;
14562: LD_ADDR_VAR 0 2
14566: PUSH
14567: CALL_OW 44
14571: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14572: LD_VAR 0 2
14576: PPUSH
14577: LD_VAR 0 3
14581: PPUSH
14582: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14586: LD_ADDR_EXP 57
14590: PUSH
14591: LD_EXP 57
14595: PPUSH
14596: LD_EXP 57
14600: PUSH
14601: LD_INT 1
14603: PLUS
14604: PPUSH
14605: LD_VAR 0 2
14609: PPUSH
14610: CALL_OW 1
14614: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
14615: LD_VAR 0 2
14619: PPUSH
14620: LD_INT 130
14622: PPUSH
14623: LD_INT 233
14625: PPUSH
14626: CALL_OW 111
// wait ( 0 0$2 ) ;
14630: LD_INT 70
14632: PPUSH
14633: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14637: LD_ADDR_VAR 0 4
14641: PUSH
14642: LD_VAR 0 4
14646: PPUSH
14647: LD_VAR 0 4
14651: PUSH
14652: LD_INT 1
14654: PLUS
14655: PPUSH
14656: LD_VAR 0 3
14660: PPUSH
14661: CALL_OW 1
14665: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14666: LD_ADDR_VAR 0 4
14670: PUSH
14671: LD_VAR 0 4
14675: PPUSH
14676: LD_VAR 0 4
14680: PUSH
14681: LD_INT 1
14683: PLUS
14684: PPUSH
14685: LD_VAR 0 2
14689: PPUSH
14690: CALL_OW 1
14694: ST_TO_ADDR
// end ;
14695: GO 14387
14697: POP
14698: POP
// for i in tmp do
14699: LD_ADDR_VAR 0 1
14703: PUSH
14704: LD_VAR 0 4
14708: PUSH
14709: FOR_IN
14710: IFFALSE 14729
// ComAgressiveMove ( i , 76 , 49 ) ;
14712: LD_VAR 0 1
14716: PPUSH
14717: LD_INT 76
14719: PPUSH
14720: LD_INT 49
14722: PPUSH
14723: CALL_OW 114
14727: GO 14709
14729: POP
14730: POP
// repeat wait ( 0 0$1 ) ;
14731: LD_INT 35
14733: PPUSH
14734: CALL_OW 67
// for i in tmp do
14738: LD_ADDR_VAR 0 1
14742: PUSH
14743: LD_VAR 0 4
14747: PUSH
14748: FOR_IN
14749: IFFALSE 14828
// if IsDead ( i ) then
14751: LD_VAR 0 1
14755: PPUSH
14756: CALL_OW 301
14760: IFFALSE 14780
// tmp := tmp diff i else
14762: LD_ADDR_VAR 0 4
14766: PUSH
14767: LD_VAR 0 4
14771: PUSH
14772: LD_VAR 0 1
14776: DIFF
14777: ST_TO_ADDR
14778: GO 14826
// if not HasTask ( i ) then
14780: LD_VAR 0 1
14784: PPUSH
14785: CALL_OW 314
14789: NOT
14790: IFFALSE 14826
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
14792: LD_VAR 0 1
14796: PPUSH
14797: LD_INT 81
14799: PUSH
14800: LD_INT 3
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PPUSH
14807: CALL_OW 69
14811: PPUSH
14812: LD_VAR 0 1
14816: PPUSH
14817: CALL_OW 74
14821: PPUSH
14822: CALL_OW 115
14826: GO 14748
14828: POP
14829: POP
// until not tmp ;
14830: LD_VAR 0 4
14834: NOT
14835: IFFALSE 14731
// end ;
14837: PPOPN 4
14839: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
14840: LD_EXP 6
14844: IFFALSE 15315
14846: GO 14848
14848: DISABLE
14849: LD_INT 0
14851: PPUSH
14852: PPUSH
14853: PPUSH
14854: PPUSH
// begin wait ( 3 3$00 ) ;
14855: LD_INT 6300
14857: PPUSH
14858: CALL_OW 67
// for i := 1 to 3 do
14862: LD_ADDR_VAR 0 1
14866: PUSH
14867: DOUBLE
14868: LD_INT 1
14870: DEC
14871: ST_TO_ADDR
14872: LD_INT 3
14874: PUSH
14875: FOR_TO
14876: IFFALSE 15175
// begin InitHc ;
14878: CALL_OW 19
// InitVc ;
14882: CALL_OW 20
// uc_side := 3 ;
14886: LD_ADDR_OWVAR 20
14890: PUSH
14891: LD_INT 3
14893: ST_TO_ADDR
// uc_nation := 3 ;
14894: LD_ADDR_OWVAR 21
14898: PUSH
14899: LD_INT 3
14901: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
14902: LD_INT 22
14904: PUSH
14905: LD_INT 23
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: PUSH
14912: LD_INT 1
14914: PPUSH
14915: LD_INT 2
14917: PPUSH
14918: CALL_OW 12
14922: ARRAY
14923: PPUSH
14924: LD_INT 1
14926: PPUSH
14927: LD_INT 1
14929: PPUSH
14930: LD_INT 44
14932: PUSH
14933: LD_INT 43
14935: PUSH
14936: LD_INT 42
14938: PUSH
14939: LD_INT 44
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: PUSH
14948: LD_INT 1
14950: PPUSH
14951: LD_INT 4
14953: PPUSH
14954: CALL_OW 12
14958: ARRAY
14959: PPUSH
14960: LD_INT 99
14962: PPUSH
14963: CALL 29672 0 5
// veh := CreateVehicle ;
14967: LD_ADDR_VAR 0 3
14971: PUSH
14972: CALL_OW 45
14976: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
14977: LD_VAR 0 3
14981: PPUSH
14982: LD_INT 293
14984: PPUSH
14985: LD_INT 246
14987: PPUSH
14988: LD_INT 5
14990: PPUSH
14991: LD_INT 0
14993: PPUSH
14994: CALL 63476 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14998: LD_ADDR_EXP 57
15002: PUSH
15003: LD_EXP 57
15007: PPUSH
15008: LD_EXP 57
15012: PUSH
15013: LD_INT 1
15015: PLUS
15016: PPUSH
15017: LD_VAR 0 3
15021: PPUSH
15022: CALL_OW 1
15026: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
15027: LD_INT 0
15029: PPUSH
15030: LD_INT 3
15032: PPUSH
15033: LD_INT 3
15035: PPUSH
15036: CALL_OW 380
// un := CreateHuman ;
15040: LD_ADDR_VAR 0 2
15044: PUSH
15045: CALL_OW 44
15049: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15050: LD_VAR 0 2
15054: PPUSH
15055: LD_VAR 0 3
15059: PPUSH
15060: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
15064: LD_ADDR_EXP 57
15068: PUSH
15069: LD_EXP 57
15073: PPUSH
15074: LD_EXP 57
15078: PUSH
15079: LD_INT 1
15081: PLUS
15082: PPUSH
15083: LD_VAR 0 2
15087: PPUSH
15088: CALL_OW 1
15092: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
15093: LD_VAR 0 2
15097: PPUSH
15098: LD_INT 273
15100: PPUSH
15101: LD_INT 227
15103: PPUSH
15104: CALL_OW 111
// wait ( 0 0$2 ) ;
15108: LD_INT 70
15110: PPUSH
15111: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
15115: LD_ADDR_VAR 0 4
15119: PUSH
15120: LD_VAR 0 4
15124: PPUSH
15125: LD_VAR 0 4
15129: PUSH
15130: LD_INT 1
15132: PLUS
15133: PPUSH
15134: LD_VAR 0 3
15138: PPUSH
15139: CALL_OW 1
15143: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
15144: LD_ADDR_VAR 0 4
15148: PUSH
15149: LD_VAR 0 4
15153: PPUSH
15154: LD_VAR 0 4
15158: PUSH
15159: LD_INT 1
15161: PLUS
15162: PPUSH
15163: LD_VAR 0 2
15167: PPUSH
15168: CALL_OW 1
15172: ST_TO_ADDR
// end ;
15173: GO 14875
15175: POP
15176: POP
// for i in tmp do
15177: LD_ADDR_VAR 0 1
15181: PUSH
15182: LD_VAR 0 4
15186: PUSH
15187: FOR_IN
15188: IFFALSE 15207
// ComAgressiveMove ( i , 330 , 231 ) ;
15190: LD_VAR 0 1
15194: PPUSH
15195: LD_INT 330
15197: PPUSH
15198: LD_INT 231
15200: PPUSH
15201: CALL_OW 114
15205: GO 15187
15207: POP
15208: POP
// repeat wait ( 0 0$1 ) ;
15209: LD_INT 35
15211: PPUSH
15212: CALL_OW 67
// for i in tmp do
15216: LD_ADDR_VAR 0 1
15220: PUSH
15221: LD_VAR 0 4
15225: PUSH
15226: FOR_IN
15227: IFFALSE 15306
// if IsDead ( i ) then
15229: LD_VAR 0 1
15233: PPUSH
15234: CALL_OW 301
15238: IFFALSE 15258
// tmp := tmp diff i else
15240: LD_ADDR_VAR 0 4
15244: PUSH
15245: LD_VAR 0 4
15249: PUSH
15250: LD_VAR 0 1
15254: DIFF
15255: ST_TO_ADDR
15256: GO 15304
// if not HasTask ( i ) then
15258: LD_VAR 0 1
15262: PPUSH
15263: CALL_OW 314
15267: NOT
15268: IFFALSE 15304
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
15270: LD_VAR 0 1
15274: PPUSH
15275: LD_INT 81
15277: PUSH
15278: LD_INT 3
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: PPUSH
15285: CALL_OW 69
15289: PPUSH
15290: LD_VAR 0 1
15294: PPUSH
15295: CALL_OW 74
15299: PPUSH
15300: CALL_OW 115
15304: GO 15226
15306: POP
15307: POP
// until not tmp ;
15308: LD_VAR 0 4
15312: NOT
15313: IFFALSE 15209
// end ;
15315: PPOPN 4
15317: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
15318: LD_INT 3
15320: PUSH
15321: LD_INT 22
15323: PUSH
15324: LD_INT 2
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: PUSH
15335: LD_INT 32
15337: PUSH
15338: LD_INT 1
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: PPUSH
15349: CALL_OW 69
15353: IFFALSE 15437
15355: GO 15357
15357: DISABLE
15358: LD_INT 0
15360: PPUSH
// begin enable ;
15361: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
15362: LD_ADDR_VAR 0 1
15366: PUSH
15367: LD_INT 3
15369: PUSH
15370: LD_INT 22
15372: PUSH
15373: LD_INT 2
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: PUSH
15384: LD_INT 32
15386: PUSH
15387: LD_INT 1
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PPUSH
15398: CALL_OW 69
15402: PUSH
15403: FOR_IN
15404: IFFALSE 15435
// if GetFuel ( i ) < 3 then
15406: LD_VAR 0 1
15410: PPUSH
15411: CALL_OW 261
15415: PUSH
15416: LD_INT 3
15418: LESS
15419: IFFALSE 15433
// SetFuel ( i , 3 ) ;
15421: LD_VAR 0 1
15425: PPUSH
15426: LD_INT 3
15428: PPUSH
15429: CALL_OW 240
15433: GO 15403
15435: POP
15436: POP
// end ; end_of_file
15437: PPOPN 1
15439: END
// export function Action ; begin
15440: LD_INT 0
15442: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
15443: LD_INT 2
15445: PPUSH
15446: LD_INT 4
15448: PPUSH
15449: CALL_OW 332
// Video ( true ) ;
15453: LD_INT 1
15455: PPUSH
15456: CALL 61517 0 1
// music_nat := 3 ;
15460: LD_ADDR_OWVAR 71
15464: PUSH
15465: LD_INT 3
15467: ST_TO_ADDR
// music_class := music_recon ;
15468: LD_ADDR_OWVAR 72
15472: PUSH
15473: LD_INT 3
15475: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
15476: LD_INT 213
15478: PPUSH
15479: LD_INT 89
15481: PPUSH
15482: CALL_OW 86
// if Kaia and Olaf then
15486: LD_EXP 35
15490: PUSH
15491: LD_EXP 39
15495: AND
15496: IFFALSE 15502
// SceneKaiaWithOlaf ;
15498: CALL 15557 0 0
// if Givi and Kamil then
15502: LD_EXP 31
15506: PUSH
15507: LD_EXP 34
15511: AND
15512: IFFALSE 15518
// SceneWithGiviAndKamil ;
15514: CALL 16128 0 0
// Video ( false ) ;
15518: LD_INT 0
15520: PPUSH
15521: CALL 61517 0 1
// ChangeMissionObjectives ( M1 ) ;
15525: LD_STRING M1
15527: PPUSH
15528: CALL_OW 337
// music_nat := music_auto ;
15532: LD_ADDR_OWVAR 71
15536: PUSH
15537: LD_INT 0
15539: ST_TO_ADDR
// music_class := music_auto ;
15540: LD_ADDR_OWVAR 72
15544: PUSH
15545: LD_INT 0
15547: ST_TO_ADDR
// SaveForQuickRestart ;
15548: CALL_OW 22
// end ;
15552: LD_VAR 0 1
15556: RET
// export function SceneKaiaWithOlaf ; begin
15557: LD_INT 0
15559: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
15560: LD_INT 22
15562: PUSH
15563: LD_INT 2
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: PUSH
15570: LD_INT 30
15572: PUSH
15573: LD_INT 3
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PPUSH
15584: CALL_OW 69
15588: PPUSH
15589: LD_INT 14
15591: PPUSH
15592: LD_INT 1
15594: PPUSH
15595: LD_INT 1
15597: PPUSH
15598: LD_INT 26
15600: PPUSH
15601: CALL_OW 125
// wait ( 0 0$1 ) ;
15605: LD_INT 35
15607: PPUSH
15608: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
15612: LD_EXP 35
15616: PPUSH
15617: LD_STRING DK-Mem-1
15619: PPUSH
15620: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
15624: LD_EXP 35
15628: PPUSH
15629: LD_STRING DK-Mem-2
15631: PPUSH
15632: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
15636: LD_EXP 39
15640: PPUSH
15641: LD_STRING DO-Mem-3
15643: PPUSH
15644: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
15648: LD_EXP 35
15652: PPUSH
15653: LD_STRING DK-Mem-4
15655: PPUSH
15656: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
15660: LD_EXP 39
15664: PPUSH
15665: LD_STRING DO-Mem-5
15667: PPUSH
15668: CALL_OW 88
// wait ( 0 0$2 ) ;
15672: LD_INT 70
15674: PPUSH
15675: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
15679: LD_INT 22
15681: PUSH
15682: LD_INT 2
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PUSH
15689: LD_INT 30
15691: PUSH
15692: LD_INT 3
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: PPUSH
15703: CALL_OW 69
15707: PPUSH
15708: LD_INT 90
15710: PPUSH
15711: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
15715: LD_EXP 39
15719: PPUSH
15720: LD_STRING DO-Mem-6
15722: PPUSH
15723: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
15727: LD_EXP 35
15731: PPUSH
15732: LD_STRING DK-Mem-7
15734: PPUSH
15735: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
15739: LD_EXP 30
15743: PPUSH
15744: LD_EXP 35
15748: PPUSH
15749: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
15753: LD_EXP 30
15757: PPUSH
15758: LD_STRING DH-Mem-8
15760: PPUSH
15761: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
15765: LD_EXP 35
15769: PUSH
15770: LD_EXP 39
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PPUSH
15779: LD_EXP 30
15783: PPUSH
15784: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
15788: LD_EXP 39
15792: PPUSH
15793: LD_STRING DO-Mem-9
15795: PPUSH
15796: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
15800: LD_EXP 39
15804: PPUSH
15805: LD_STRING DO-Mem-10
15807: PPUSH
15808: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
15812: LD_EXP 39
15816: PPUSH
15817: LD_STRING DO-Mem-11
15819: PPUSH
15820: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
15824: LD_EXP 39
15828: PPUSH
15829: LD_STRING DO-Mem-12
15831: PPUSH
15832: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
15836: LD_EXP 35
15840: PPUSH
15841: LD_STRING DK-Mem-13
15843: PPUSH
15844: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
15848: LD_EXP 35
15852: PPUSH
15853: LD_STRING DK-Mem-14
15855: PPUSH
15856: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
15860: LD_EXP 35
15864: PPUSH
15865: LD_STRING DK-Mem-15
15867: PPUSH
15868: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
15872: LD_EXP 35
15876: PPUSH
15877: LD_STRING DK-Mem-16
15879: PPUSH
15880: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
15884: LD_EXP 35
15888: PPUSH
15889: LD_STRING DK-Mem-17
15891: PPUSH
15892: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
15896: LD_EXP 39
15900: PPUSH
15901: LD_EXP 35
15905: PPUSH
15906: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
15910: LD_EXP 39
15914: PPUSH
15915: LD_STRING DO-Mem-18
15917: PPUSH
15918: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
15922: LD_EXP 35
15926: PPUSH
15927: LD_EXP 39
15931: PPUSH
15932: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
15936: LD_EXP 35
15940: PPUSH
15941: LD_STRING DK-Mem-19
15943: PPUSH
15944: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
15948: LD_EXP 39
15952: PPUSH
15953: LD_INT 214
15955: PPUSH
15956: LD_INT 86
15958: PPUSH
15959: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
15963: LD_EXP 39
15967: PPUSH
15968: LD_EXP 35
15972: PPUSH
15973: CALL_OW 179
// if Givi then
15977: LD_EXP 31
15981: IFFALSE 16012
// begin ComMoveXY ( Givi , 217 , 86 ) ;
15983: LD_EXP 31
15987: PPUSH
15988: LD_INT 217
15990: PPUSH
15991: LD_INT 86
15993: PPUSH
15994: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
15998: LD_EXP 31
16002: PPUSH
16003: LD_EXP 30
16007: PPUSH
16008: CALL_OW 179
// end ; if Kamil then
16012: LD_EXP 34
16016: IFFALSE 16056
// begin ComExit ( Kamil ) ;
16018: LD_EXP 34
16022: PPUSH
16023: CALL 61933 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
16027: LD_EXP 34
16031: PPUSH
16032: LD_INT 212
16034: PPUSH
16035: LD_INT 86
16037: PPUSH
16038: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
16042: LD_EXP 34
16046: PPUSH
16047: LD_EXP 30
16051: PPUSH
16052: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
16056: LD_INT 70
16058: PPUSH
16059: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
16063: LD_EXP 30
16067: PPUSH
16068: LD_STRING DH-Mem-20
16070: PPUSH
16071: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
16075: LD_EXP 39
16079: PPUSH
16080: LD_INT 215
16082: PPUSH
16083: LD_INT 87
16085: PPUSH
16086: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
16090: LD_EXP 39
16094: PPUSH
16095: LD_EXP 35
16099: PPUSH
16100: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
16104: LD_EXP 35
16108: PPUSH
16109: LD_STRING DK-Mem-21
16111: PPUSH
16112: CALL_OW 88
// wait ( 0 0$2 ) ;
16116: LD_INT 70
16118: PPUSH
16119: CALL_OW 67
// end ;
16123: LD_VAR 0 1
16127: RET
// export function SceneWithGiviAndKamil ; begin
16128: LD_INT 0
16130: PPUSH
// if Markov then
16131: LD_EXP 37
16135: IFFALSE 16186
// begin if IsInUnit ( Markov ) then
16137: LD_EXP 37
16141: PPUSH
16142: CALL_OW 310
16146: IFFALSE 16157
// ComExit ( Markov ) ;
16148: LD_EXP 37
16152: PPUSH
16153: CALL 61933 0 1
// AddComMoveXY ( Markov , 212 , 88 ) ;
16157: LD_EXP 37
16161: PPUSH
16162: LD_INT 212
16164: PPUSH
16165: LD_INT 88
16167: PPUSH
16168: CALL_OW 171
// AddComTurnUnit ( Markov , Heike ) ;
16172: LD_EXP 37
16176: PPUSH
16177: LD_EXP 30
16181: PPUSH
16182: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
16186: LD_EXP 31
16190: PPUSH
16191: LD_STRING DG-Obj-1
16193: PPUSH
16194: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
16198: LD_EXP 34
16202: PPUSH
16203: LD_STRING DKam-Obj-2
16205: PPUSH
16206: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
16210: LD_EXP 30
16214: PPUSH
16215: LD_EXP 34
16219: PPUSH
16220: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
16224: LD_EXP 34
16228: PPUSH
16229: LD_STRING DKam-Obj-3
16231: PPUSH
16232: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
16236: LD_EXP 37
16240: PPUSH
16241: LD_STRING DMar-Obj-4
16243: PPUSH
16244: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
16248: LD_EXP 34
16252: PPUSH
16253: LD_STRING DKam-Obj-6
16255: PPUSH
16256: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
16260: LD_EXP 34
16264: PPUSH
16265: LD_STRING DKam-Obj-7
16267: PPUSH
16268: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
16272: LD_EXP 34
16276: PPUSH
16277: LD_STRING DKam-Obj-8
16279: PPUSH
16280: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
16284: LD_EXP 30
16288: PPUSH
16289: LD_STRING DH-Obj-9
16291: PPUSH
16292: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
16296: LD_EXP 34
16300: PPUSH
16301: LD_STRING DKam-Obj-10
16303: PPUSH
16304: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
16308: LD_EXP 34
16312: PPUSH
16313: LD_STRING DKam-Obj-11
16315: PPUSH
16316: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
16320: LD_EXP 37
16324: PPUSH
16325: LD_STRING DMar-Obj-12
16327: PPUSH
16328: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
16332: LD_EXP 37
16336: PPUSH
16337: LD_STRING DMar-Obj-13
16339: PPUSH
16340: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
16344: LD_EXP 37
16348: PPUSH
16349: LD_STRING DMar-Obj-14
16351: PPUSH
16352: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
16356: LD_EXP 39
16360: PPUSH
16361: LD_STRING DO-Obj-15
16363: PPUSH
16364: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
16368: LD_EXP 39
16372: PPUSH
16373: LD_STRING DO-Obj-16
16375: PPUSH
16376: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
16380: LD_EXP 30
16384: PPUSH
16385: LD_STRING DH-Obj-17
16387: PPUSH
16388: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
16392: LD_EXP 39
16396: PPUSH
16397: LD_STRING DO-Obj-18
16399: PPUSH
16400: CALL_OW 88
// end ;
16404: LD_VAR 0 1
16408: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
16409: LD_INT 34
16411: PUSH
16412: LD_EXP 64
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: PPUSH
16421: CALL_OW 69
16425: IFFALSE 16622
16427: GO 16429
16429: DISABLE
16430: LD_INT 0
16432: PPUSH
// begin wait ( 0 0$2 ) ;
16433: LD_INT 70
16435: PPUSH
16436: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
16440: LD_INT 34
16442: PUSH
16443: LD_EXP 64
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PPUSH
16452: CALL_OW 69
16456: PPUSH
16457: CALL_OW 87
// DialogueOn ;
16461: CALL_OW 6
// if Markov then
16465: LD_EXP 37
16469: IFFALSE 16497
// begin Say ( Markov , DMar-Grn-1 ) ;
16471: LD_EXP 37
16475: PPUSH
16476: LD_STRING DMar-Grn-1
16478: PPUSH
16479: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
16483: LD_EXP 30
16487: PPUSH
16488: LD_STRING DH-Grn-2
16490: PPUSH
16491: CALL_OW 88
// end else
16495: GO 16596
// if heikeSecondSquad then
16497: LD_EXP 45
16501: IFFALSE 16596
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
16503: LD_ADDR_VAR 0 1
16507: PUSH
16508: LD_EXP 45
16512: PUSH
16513: LD_INT 1
16515: PPUSH
16516: LD_EXP 45
16520: PPUSH
16521: CALL_OW 12
16525: ARRAY
16526: ST_TO_ADDR
// case GetSex ( random ) of 1 :
16527: LD_VAR 0 1
16531: PPUSH
16532: CALL_OW 258
16536: PUSH
16537: LD_INT 1
16539: DOUBLE
16540: EQUAL
16541: IFTRUE 16545
16543: GO 16560
16545: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
16546: LD_VAR 0 1
16550: PPUSH
16551: LD_STRING DArm-Grn-1
16553: PPUSH
16554: CALL_OW 88
16558: GO 16584
16560: LD_INT 2
16562: DOUBLE
16563: EQUAL
16564: IFTRUE 16568
16566: GO 16583
16568: POP
// Say ( random , DArf-Grn-1 ) ; end ;
16569: LD_VAR 0 1
16573: PPUSH
16574: LD_STRING DArf-Grn-1
16576: PPUSH
16577: CALL_OW 88
16581: GO 16584
16583: POP
// Say ( Heike , DH-Grn-2 ) ;
16584: LD_EXP 30
16588: PPUSH
16589: LD_STRING DH-Grn-2
16591: PPUSH
16592: CALL_OW 88
// end ; DialogueOff ;
16596: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
16600: LD_STRING MortarConstructed
16602: PPUSH
16603: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
16607: LD_STRING SelfPropelledMortar
16609: PPUSH
16610: CALL_OW 339
// mortarConstructed := true ;
16614: LD_ADDR_EXP 15
16618: PUSH
16619: LD_INT 1
16621: ST_TO_ADDR
// end ;
16622: PPOPN 1
16624: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
16625: LD_INT 2
16627: PPUSH
16628: LD_INT 8
16630: PPUSH
16631: CALL_OW 294
16635: IFFALSE 16778
16637: GO 16639
16639: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
16640: LD_INT 200
16642: PPUSH
16643: LD_INT 162
16645: PPUSH
16646: LD_INT 2
16648: PPUSH
16649: LD_INT 6
16651: NEG
16652: PPUSH
16653: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
16657: LD_INT 200
16659: PPUSH
16660: LD_INT 162
16662: PPUSH
16663: LD_INT 2
16665: PPUSH
16666: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
16670: LD_INT 200
16672: PPUSH
16673: LD_INT 162
16675: PPUSH
16676: CALL_OW 84
// if not IsOk ( Kurt ) then
16680: LD_EXP 41
16684: PPUSH
16685: CALL_OW 302
16689: NOT
16690: IFFALSE 16694
// exit ;
16692: GO 16778
// Say ( Kurt , DKs-Otpst-2-1 ) ;
16694: LD_EXP 41
16698: PPUSH
16699: LD_STRING DKs-Otpst-2-1
16701: PPUSH
16702: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
16706: LD_EXP 35
16710: PPUSH
16711: LD_STRING DK-Otpst-2-2
16713: PPUSH
16714: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
16718: LD_EXP 41
16722: PPUSH
16723: LD_STRING DKs-Otpst-2-3
16725: PPUSH
16726: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
16730: LD_EXP 41
16734: PPUSH
16735: LD_STRING DKs-Otpst-2-4
16737: PPUSH
16738: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
16742: LD_EXP 41
16746: PPUSH
16747: LD_STRING DKs-Otpst-2-5
16749: PPUSH
16750: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
16754: LD_EXP 34
16758: PPUSH
16759: LD_STRING DKam-Otpst-2-6
16761: PPUSH
16762: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
16766: LD_EXP 41
16770: PPUSH
16771: LD_STRING DKs-Otpst-2-7
16773: PPUSH
16774: CALL_OW 88
// end ;
16778: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
16779: LD_INT 8
16781: PPUSH
16782: LD_INT 22
16784: PUSH
16785: LD_INT 3
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: LD_INT 21
16794: PUSH
16795: LD_INT 3
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PPUSH
16806: CALL_OW 70
16810: NOT
16811: PUSH
16812: LD_EXP 3
16816: NOT
16817: AND
16818: IFFALSE 17068
16820: GO 16822
16822: DISABLE
16823: LD_INT 0
16825: PPUSH
// begin outpostDestroyed := true ;
16826: LD_ADDR_EXP 4
16830: PUSH
16831: LD_INT 1
16833: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
16834: LD_INT 22
16836: PUSH
16837: LD_INT 2
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PUSH
16844: LD_INT 34
16846: PUSH
16847: LD_EXP 64
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: PUSH
16856: LD_INT 92
16858: PUSH
16859: LD_INT 195
16861: PUSH
16862: LD_INT 164
16864: PUSH
16865: LD_INT 12
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: LIST
16878: PPUSH
16879: CALL_OW 69
16883: NOT
16884: IFFALSE 16888
// exit ;
16886: GO 17068
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
16888: LD_EXP 31
16892: PPUSH
16893: CALL_OW 302
16897: NOT
16898: PUSH
16899: LD_EXP 35
16903: PPUSH
16904: CALL_OW 302
16908: NOT
16909: OR
16910: IFFALSE 16914
// exit ;
16912: GO 17068
// Say ( Givi , DG-Otpst-1-1 ) ;
16914: LD_EXP 31
16918: PPUSH
16919: LD_STRING DG-Otpst-1-1
16921: PPUSH
16922: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
16926: LD_EXP 35
16930: PPUSH
16931: LD_STRING DK-Otpst-1-2
16933: PPUSH
16934: CALL_OW 88
// if IsOk ( Markov ) then
16938: LD_EXP 37
16942: PPUSH
16943: CALL_OW 302
16947: IFFALSE 16975
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
16949: LD_EXP 37
16953: PPUSH
16954: LD_STRING DMar-Otpst-1-3
16956: PPUSH
16957: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
16961: LD_EXP 37
16965: PPUSH
16966: LD_STRING DMar-Otpst-1-4
16968: PPUSH
16969: CALL_OW 88
// end else
16973: GO 17056
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
16975: LD_ADDR_VAR 0 1
16979: PUSH
16980: LD_EXP 45
16984: PUSH
16985: LD_INT 1
16987: PPUSH
16988: LD_EXP 45
16992: PPUSH
16993: CALL_OW 12
16997: ARRAY
16998: ST_TO_ADDR
// case GetSex ( random ) of 1 :
16999: LD_VAR 0 1
17003: PPUSH
17004: CALL_OW 258
17008: PUSH
17009: LD_INT 1
17011: DOUBLE
17012: EQUAL
17013: IFTRUE 17017
17015: GO 17032
17017: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
17018: LD_VAR 0 1
17022: PPUSH
17023: LD_STRING DArm-Otpst-1-a-3
17025: PPUSH
17026: CALL_OW 88
17030: GO 17056
17032: LD_INT 2
17034: DOUBLE
17035: EQUAL
17036: IFTRUE 17040
17038: GO 17055
17040: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
17041: LD_VAR 0 1
17045: PPUSH
17046: LD_STRING DArf-Otpst-1-a-3
17048: PPUSH
17049: CALL_OW 88
17053: GO 17056
17055: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
17056: LD_EXP 31
17060: PPUSH
17061: LD_STRING DG-Otpst-1-5
17063: PPUSH
17064: CALL_OW 88
// end ;
17068: PPOPN 1
17070: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
17071: LD_EXP 35
17075: PPUSH
17076: CALL_OW 256
17080: PUSH
17081: LD_INT 10
17083: LESS
17084: IFFALSE 17198
17086: GO 17088
17088: DISABLE
// begin DialogueOn ;
17089: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17093: LD_EXP 35
17097: PPUSH
17098: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
17102: LD_EXP 35
17106: PPUSH
17107: LD_STRING DK-Dead-1
17109: PPUSH
17110: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
17114: LD_EXP 30
17118: PPUSH
17119: LD_STRING DH-Dead-2
17121: PPUSH
17122: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
17126: LD_EXP 35
17130: PPUSH
17131: LD_STRING DK-Dead-3
17133: PPUSH
17134: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
17138: LD_EXP 30
17142: PPUSH
17143: LD_STRING DH-Dead-4
17145: PPUSH
17146: CALL_OW 88
// if IsOk ( Mike ) then
17150: LD_EXP 32
17154: PPUSH
17155: CALL_OW 302
17159: IFFALSE 17185
// begin Say ( Mike , DM-Dead-5 ) ;
17161: LD_EXP 32
17165: PPUSH
17166: LD_STRING DM-Dead-5
17168: PPUSH
17169: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
17173: LD_EXP 30
17177: PPUSH
17178: LD_STRING DH-Dead-6
17180: PPUSH
17181: CALL_OW 88
// end ; DialogueOff ;
17185: CALL_OW 7
// KillUnit ( Kaia ) ;
17189: LD_EXP 35
17193: PPUSH
17194: CALL_OW 66
// end ;
17198: END
// every 0 0$1 trigger tick >= 10 10$20 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
17199: LD_OWVAR 1
17203: PUSH
17204: LD_INT 21700
17206: GREATEREQUAL
17207: PUSH
17208: LD_EXP 5
17212: PUSH
17213: LD_INT 5
17215: GREATER
17216: OR
17217: PUSH
17218: LD_INT 22
17220: PUSH
17221: LD_INT 2
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PUSH
17228: LD_INT 92
17230: PUSH
17231: LD_INT 103
17233: PUSH
17234: LD_INT 81
17236: PUSH
17237: LD_INT 20
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PPUSH
17250: CALL_OW 69
17254: OR
17255: IFFALSE 17662
17257: GO 17259
17259: DISABLE
17260: LD_INT 0
17262: PPUSH
17263: PPUSH
17264: PPUSH
// begin PrepareRolfSquad ;
17265: CALL 2356 0 0
// dep := HexInfo ( 86 , 54 ) ;
17269: LD_ADDR_VAR 0 3
17273: PUSH
17274: LD_INT 86
17276: PPUSH
17277: LD_INT 54
17279: PPUSH
17280: CALL_OW 428
17284: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
17285: LD_VAR 0 3
17289: PPUSH
17290: CALL_OW 274
17294: PPUSH
17295: LD_INT 1
17297: PPUSH
17298: LD_INT 300
17300: PPUSH
17301: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
17305: LD_VAR 0 3
17309: PPUSH
17310: CALL_OW 274
17314: PPUSH
17315: LD_INT 2
17317: PPUSH
17318: LD_INT 300
17320: PPUSH
17321: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
17325: LD_EXP 47
17329: PPUSH
17330: LD_INT 79
17332: PPUSH
17333: LD_INT 52
17335: PPUSH
17336: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
17340: LD_INT 35
17342: PPUSH
17343: CALL_OW 67
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
17347: LD_INT 12
17349: PPUSH
17350: LD_INT 22
17352: PUSH
17353: LD_INT 3
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PUSH
17360: LD_INT 21
17362: PUSH
17363: LD_INT 1
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PPUSH
17374: CALL_OW 70
17378: NOT
17379: IFFALSE 17340
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
17381: LD_ADDR_VAR 0 2
17385: PUSH
17386: LD_INT 12
17388: PPUSH
17389: LD_INT 21
17391: PUSH
17392: LD_INT 3
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: PPUSH
17399: CALL_OW 70
17403: ST_TO_ADDR
// for i in tmp do
17404: LD_ADDR_VAR 0 1
17408: PUSH
17409: LD_VAR 0 2
17413: PUSH
17414: FOR_IN
17415: IFFALSE 17431
// SetSide ( i , 8 ) ;
17417: LD_VAR 0 1
17421: PPUSH
17422: LD_INT 8
17424: PPUSH
17425: CALL_OW 235
17429: GO 17414
17431: POP
17432: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
17433: LD_INT 63
17435: PPUSH
17436: LD_INT 42
17438: PPUSH
17439: CALL_OW 428
17443: PPUSH
17444: LD_INT 320
17446: PPUSH
17447: CALL_OW 234
// wait ( 0 0$10 ) ;
17451: LD_INT 350
17453: PPUSH
17454: CALL_OW 67
// DialogueOn ;
17458: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
17462: LD_INT 8
17464: PPUSH
17465: LD_INT 2
17467: PPUSH
17468: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
17472: LD_INT 86
17474: PPUSH
17475: LD_INT 54
17477: PPUSH
17478: CALL_OW 428
17482: PPUSH
17483: LD_STRING antwerp
17485: PPUSH
17486: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
17490: LD_EXP 43
17494: PPUSH
17495: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
17499: LD_EXP 43
17503: PPUSH
17504: LD_STRING DRf-rast-1
17506: PPUSH
17507: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
17511: LD_EXP 30
17515: PPUSH
17516: LD_STRING DH-rast-2
17518: PPUSH
17519: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
17523: LD_EXP 43
17527: PPUSH
17528: LD_STRING DRf-rast-3
17530: PPUSH
17531: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
17535: LD_EXP 43
17539: PPUSH
17540: LD_STRING DRf-rast-4
17542: PPUSH
17543: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
17547: LD_EXP 43
17551: PPUSH
17552: LD_STRING DRf-rast-5
17554: PPUSH
17555: CALL_OW 94
// if IsOk ( Aviradze ) then
17559: LD_EXP 42
17563: PPUSH
17564: CALL_OW 302
17568: IFFALSE 17627
// begin CenterNowOnUnits ( Aviradze ) ;
17570: LD_EXP 42
17574: PPUSH
17575: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
17579: LD_EXP 42
17583: PPUSH
17584: LD_STRING DA-rast-6
17586: PPUSH
17587: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
17591: LD_EXP 30
17595: PPUSH
17596: LD_STRING DH-rast-7
17598: PPUSH
17599: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
17603: LD_EXP 31
17607: PPUSH
17608: LD_STRING DG-rast-8
17610: PPUSH
17611: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
17615: LD_EXP 31
17619: PPUSH
17620: LD_STRING DG-rast-9
17622: PPUSH
17623: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
17627: LD_EXP 30
17631: PPUSH
17632: LD_STRING DH-rast-10
17634: PPUSH
17635: CALL_OW 88
// DialogueOff ;
17639: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
17643: LD_STRING M2
17645: PPUSH
17646: CALL_OW 337
// bergkampfArrived := true ;
17650: LD_ADDR_EXP 3
17654: PUSH
17655: LD_INT 1
17657: ST_TO_ADDR
// PrepareRolfBase ;
17658: CALL 2687 0 0
// end ;
17662: PPOPN 3
17664: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) and canRolfJoin do var i ;
17665: LD_INT 12
17667: PPUSH
17668: LD_INT 22
17670: PUSH
17671: LD_INT 2
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: PPUSH
17678: CALL_OW 70
17682: PUSH
17683: LD_EXP 43
17687: PPUSH
17688: CALL_OW 302
17692: AND
17693: PUSH
17694: LD_EXP 29
17698: AND
17699: IFFALSE 18259
17701: GO 17703
17703: DISABLE
17704: LD_INT 0
17706: PPUSH
// begin rolfScriptBase := false ;
17707: LD_ADDR_EXP 9
17711: PUSH
17712: LD_INT 0
17714: ST_TO_ADDR
// DialogueOn ;
17715: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
17719: LD_EXP 43
17723: PPUSH
17724: CALL_OW 87
// if rolfSquad >= 10 then
17728: LD_EXP 47
17732: PUSH
17733: LD_INT 10
17735: GREATEREQUAL
17736: IFFALSE 17915
// begin linkedWithRolf := 2 ;
17738: LD_ADDR_EXP 12
17742: PUSH
17743: LD_INT 2
17745: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
17746: LD_EXP 43
17750: PPUSH
17751: LD_STRING DRf-rast-11
17753: PPUSH
17754: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
17758: LD_EXP 30
17762: PPUSH
17763: LD_STRING DH-rast-12
17765: PPUSH
17766: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
17770: LD_EXP 43
17774: PPUSH
17775: LD_STRING DRf-rast-13
17777: PPUSH
17778: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
17782: LD_EXP 30
17786: PPUSH
17787: LD_STRING DH-rast-14
17789: PPUSH
17790: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
17794: LD_EXP 43
17798: PPUSH
17799: LD_STRING DRf-rast-15
17801: PPUSH
17802: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
17806: LD_EXP 30
17810: PPUSH
17811: LD_STRING DH-rast-16
17813: PPUSH
17814: CALL_OW 88
// if IsOk ( Mike ) then
17818: LD_EXP 32
17822: PPUSH
17823: CALL_OW 302
17827: IFFALSE 17901
// begin Say ( Mike , DM-rast-17 ) ;
17829: LD_EXP 32
17833: PPUSH
17834: LD_STRING DM-rast-17
17836: PPUSH
17837: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
17841: LD_EXP 30
17845: PPUSH
17846: LD_STRING DH-rast-18
17848: PPUSH
17849: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
17853: LD_EXP 32
17857: PPUSH
17858: LD_STRING DM-rast-19
17860: PPUSH
17861: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
17865: LD_EXP 30
17869: PPUSH
17870: LD_STRING DH-rast-20
17872: PPUSH
17873: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
17877: LD_EXP 32
17881: PPUSH
17882: LD_STRING DM-rast-21
17884: PPUSH
17885: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
17889: LD_EXP 30
17893: PPUSH
17894: LD_STRING DH-rast-22
17896: PPUSH
17897: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
17901: LD_EXP 30
17905: PPUSH
17906: LD_STRING DH-rast-23
17908: PPUSH
17909: CALL_OW 88
// end else
17913: GO 18065
// begin linkedWithRolf := 1 ;
17915: LD_ADDR_EXP 12
17919: PUSH
17920: LD_INT 1
17922: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
17923: LD_EXP 43
17927: PPUSH
17928: LD_STRING DRf-rast-a-11
17930: PPUSH
17931: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
17935: LD_EXP 30
17939: PPUSH
17940: LD_STRING DH-rast-a-12
17942: PPUSH
17943: CALL_OW 88
// if IsOk ( Kurt ) then
17947: LD_EXP 41
17951: PPUSH
17952: CALL_OW 302
17956: IFFALSE 18053
// begin Say ( Kurt , DKs-rast-a-13 ) ;
17958: LD_EXP 41
17962: PPUSH
17963: LD_STRING DKs-rast-a-13
17965: PPUSH
17966: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
17970: LD_EXP 43
17974: PPUSH
17975: LD_STRING DRf-rast-a-14
17977: PPUSH
17978: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
17982: LD_EXP 43
17986: PPUSH
17987: LD_STRING DRf-rast-a-15
17989: PPUSH
17990: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
17994: LD_EXP 41
17998: PPUSH
17999: LD_STRING DKs-rast-a-16
18001: PPUSH
18002: CALL_OW 88
// if IsOk ( Givi ) then
18006: LD_EXP 31
18010: PPUSH
18011: CALL_OW 302
18015: IFFALSE 18053
// begin Say ( Givi , DG-rast-a-17 ) ;
18017: LD_EXP 31
18021: PPUSH
18022: LD_STRING DG-rast-a-17
18024: PPUSH
18025: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
18029: LD_EXP 31
18033: PPUSH
18034: LD_STRING DG-rast-a-18
18036: PPUSH
18037: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
18041: LD_EXP 41
18045: PPUSH
18046: LD_STRING DKs-rast-a-19
18048: PPUSH
18049: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
18053: LD_EXP 30
18057: PPUSH
18058: LD_STRING DH-rast-a-20
18060: PPUSH
18061: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
18065: LD_EXP 43
18069: PPUSH
18070: LD_STRING DRf-rast-24
18072: PPUSH
18073: CALL_OW 88
// if IsOk ( Aviradze ) then
18077: LD_EXP 42
18081: PPUSH
18082: CALL_OW 302
18086: IFFALSE 18186
// begin Say ( Aviradze , DA-rast-25 ) ;
18088: LD_EXP 42
18092: PPUSH
18093: LD_STRING DA-rast-25
18095: PPUSH
18096: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
18100: LD_EXP 30
18104: PPUSH
18105: LD_STRING DH-rast-26
18107: PPUSH
18108: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
18112: LD_EXP 42
18116: PPUSH
18117: LD_STRING DA-rast-27
18119: PPUSH
18120: CALL_OW 88
// if IsOk ( Markov ) then
18124: LD_EXP 37
18128: PPUSH
18129: CALL_OW 302
18133: IFFALSE 18161
// begin Say ( Markov , DMar-rast-28 ) ;
18135: LD_EXP 37
18139: PPUSH
18140: LD_STRING DMar-rast-28
18142: PPUSH
18143: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
18147: LD_EXP 37
18151: PPUSH
18152: LD_STRING DMar-rast-29
18154: PPUSH
18155: CALL_OW 88
// end else
18159: GO 18184
// if IsOk ( Sophia ) then
18161: LD_EXP 36
18165: PPUSH
18166: CALL_OW 302
18170: IFFALSE 18184
// begin Say ( Sophia , DS-rast-28 ) ;
18172: LD_EXP 36
18176: PPUSH
18177: LD_STRING DS-rast-28
18179: PPUSH
18180: CALL_OW 88
// end ; end else
18184: GO 18209
// if IsOk ( Sophia ) then
18186: LD_EXP 36
18190: PPUSH
18191: CALL_OW 302
18195: IFFALSE 18209
// Say ( Sophia , DS-rast-29 ) ;
18197: LD_EXP 36
18201: PPUSH
18202: LD_STRING DS-rast-29
18204: PPUSH
18205: CALL_OW 88
// DialogueOff ;
18209: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
18213: LD_STRING M3
18215: PPUSH
18216: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
18220: LD_ADDR_VAR 0 1
18224: PUSH
18225: LD_INT 22
18227: PUSH
18228: LD_INT 8
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PPUSH
18235: CALL_OW 69
18239: PUSH
18240: FOR_IN
18241: IFFALSE 18257
// SetSide ( i , 2 ) ;
18243: LD_VAR 0 1
18247: PPUSH
18248: LD_INT 2
18250: PPUSH
18251: CALL_OW 235
18255: GO 18240
18257: POP
18258: POP
// end ;
18259: PPOPN 1
18261: END
// every 0 0$1 trigger omarAttack and not linkedWithRolf and canRolfJoin do var i ;
18262: LD_EXP 23
18266: PUSH
18267: LD_EXP 12
18271: NOT
18272: AND
18273: PUSH
18274: LD_EXP 29
18278: AND
18279: IFFALSE 18370
18281: GO 18283
18283: DISABLE
18284: LD_INT 0
18286: PPUSH
// begin canRolfJoin := false ;
18287: LD_ADDR_EXP 29
18291: PUSH
18292: LD_INT 0
18294: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
18295: LD_STRING M3
18297: PPUSH
18298: CALL_OW 337
// for i in rolfSquad do
18302: LD_ADDR_VAR 0 1
18306: PUSH
18307: LD_EXP 47
18311: PUSH
18312: FOR_IN
18313: IFFALSE 18368
// begin ComExit ( i ) ;
18315: LD_VAR 0 1
18319: PPUSH
18320: CALL 61933 0 1
// AddComAgressiveMove ( i , 147 , 162 ) ;
18324: LD_VAR 0 1
18328: PPUSH
18329: LD_INT 147
18331: PPUSH
18332: LD_INT 162
18334: PPUSH
18335: CALL_OW 174
// AddComWait ( i , 0 0$30 ) ;
18339: LD_VAR 0 1
18343: PPUSH
18344: LD_INT 1050
18346: PPUSH
18347: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 162 ) ;
18351: LD_VAR 0 1
18355: PPUSH
18356: LD_INT 103
18358: PPUSH
18359: LD_INT 162
18361: PPUSH
18362: CALL_OW 174
// end ;
18366: GO 18312
18368: POP
18369: POP
// end ;
18370: PPOPN 1
18372: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf and canRolfJoin do var random ;
18373: LD_EXP 3
18377: PUSH
18378: LD_EXP 43
18382: PPUSH
18383: CALL_OW 256
18387: PUSH
18388: LD_INT 400
18390: LESS
18391: AND
18392: PUSH
18393: LD_EXP 12
18397: NOT
18398: AND
18399: PUSH
18400: LD_EXP 29
18404: AND
18405: IFFALSE 18679
18407: GO 18409
18409: DISABLE
18410: LD_INT 0
18412: PPUSH
// begin DialogueOn ;
18413: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
18417: LD_EXP 43
18421: PPUSH
18422: LD_STRING DRf-rast-f-11
18424: PPUSH
18425: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
18429: LD_EXP 43
18433: PPUSH
18434: LD_STRING DRf-rast-f-12
18436: PPUSH
18437: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
18441: LD_EXP 43
18445: PPUSH
18446: LD_STRING DRf-rast-f-13
18448: PPUSH
18449: CALL_OW 94
// DialogueOff ;
18453: CALL_OW 7
// KillUnit ( Rolf ) ;
18457: LD_EXP 43
18461: PPUSH
18462: CALL_OW 66
// wait ( 0 0$1 ) ;
18466: LD_INT 35
18468: PPUSH
18469: CALL_OW 67
// if not IsOk ( Givi ) then
18473: LD_EXP 31
18477: PPUSH
18478: CALL_OW 302
18482: NOT
18483: IFFALSE 18487
// exit ;
18485: GO 18679
// DialogueOn ;
18487: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
18491: LD_EXP 31
18495: PPUSH
18496: LD_STRING DG-rast-f-14
18498: PPUSH
18499: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
18503: LD_EXP 31
18507: PPUSH
18508: LD_STRING DG-rast-f-15
18510: PPUSH
18511: CALL_OW 88
// if IsOk ( Kaia ) then
18515: LD_EXP 35
18519: PPUSH
18520: CALL_OW 302
18524: IFFALSE 18540
// Say ( Kaia , DK-rast-f-16 ) else
18526: LD_EXP 35
18530: PPUSH
18531: LD_STRING DK-rast-f-16
18533: PPUSH
18534: CALL_OW 88
18538: GO 18627
// if heikeSecondSquad then
18540: LD_EXP 45
18544: IFFALSE 18627
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
18546: LD_ADDR_VAR 0 1
18550: PUSH
18551: LD_EXP 45
18555: PUSH
18556: LD_INT 1
18558: PPUSH
18559: LD_EXP 45
18563: PPUSH
18564: CALL_OW 12
18568: ARRAY
18569: ST_TO_ADDR
// case GetSex ( random ) of 1 :
18570: LD_VAR 0 1
18574: PPUSH
18575: CALL_OW 258
18579: PUSH
18580: LD_INT 1
18582: DOUBLE
18583: EQUAL
18584: IFTRUE 18588
18586: GO 18603
18588: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
18589: LD_VAR 0 1
18593: PPUSH
18594: LD_STRING DArm-rast-f-a-16
18596: PPUSH
18597: CALL_OW 88
18601: GO 18627
18603: LD_INT 2
18605: DOUBLE
18606: EQUAL
18607: IFTRUE 18611
18609: GO 18626
18611: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
18612: LD_VAR 0 1
18616: PPUSH
18617: LD_STRING DArf-rast-f-a-16
18619: PPUSH
18620: CALL_OW 88
18624: GO 18627
18626: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
18627: LD_EXP 31
18631: PPUSH
18632: LD_STRING DG-rast-f-17
18634: PPUSH
18635: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
18639: LD_EXP 31
18643: PPUSH
18644: LD_STRING DG-rast-f-18
18646: PPUSH
18647: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
18651: LD_EXP 31
18655: PPUSH
18656: LD_STRING DG-rast-f-19
18658: PPUSH
18659: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
18663: LD_EXP 31
18667: PPUSH
18668: LD_STRING DG-rast-f-20
18670: PPUSH
18671: CALL_OW 88
// DialogueOff ;
18675: CALL_OW 7
// end ;
18679: PPOPN 1
18681: END
// every 0 0$1 trigger SeeArea ( 2 , ruMainBase ) do
18682: LD_INT 2
18684: PPUSH
18685: LD_INT 10
18687: PPUSH
18688: CALL_OW 294
18692: IFFALSE 18765
18694: GO 18696
18696: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
18697: LD_EXP 31
18701: PPUSH
18702: LD_STRING DG-Len-1
18704: PPUSH
18705: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
18709: LD_EXP 41
18713: PPUSH
18714: LD_STRING DKs-Len-2
18716: PPUSH
18717: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
18721: LD_EXP 41
18725: PPUSH
18726: LD_STRING DKs-Len-3
18728: PPUSH
18729: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
18733: LD_EXP 30
18737: PPUSH
18738: LD_STRING DH-Len-4
18740: PPUSH
18741: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
18745: LD_EXP 35
18749: PPUSH
18750: LD_STRING DK-Len-5
18752: PPUSH
18753: CALL_OW 88
// leninSpotted := true ;
18757: LD_ADDR_EXP 14
18761: PUSH
18762: LD_INT 1
18764: ST_TO_ADDR
// end ;
18765: END
// every 0 0$1 trigger ( bergkampfArrived and tick > 14 14$00 ) or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 322 , 215 , 20 ] ] ) do var i ;
18766: LD_EXP 3
18770: PUSH
18771: LD_OWVAR 1
18775: PUSH
18776: LD_INT 29400
18778: GREATER
18779: AND
18780: PUSH
18781: LD_INT 22
18783: PUSH
18784: LD_INT 2
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: LD_INT 92
18793: PUSH
18794: LD_INT 322
18796: PUSH
18797: LD_INT 215
18799: PUSH
18800: LD_INT 20
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PPUSH
18813: CALL_OW 69
18817: OR
18818: IFFALSE 19181
18820: GO 18822
18822: DISABLE
18823: LD_INT 0
18825: PPUSH
// begin PrepareOmarSquad ;
18826: CALL 3969 0 0
// repeat wait ( 0 0$1 ) ;
18830: LD_INT 35
18832: PPUSH
18833: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
18837: LD_INT 14
18839: PPUSH
18840: LD_INT 22
18842: PUSH
18843: LD_INT 3
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 2
18852: PUSH
18853: LD_INT 21
18855: PUSH
18856: LD_INT 1
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: PUSH
18863: LD_INT 59
18865: PUSH
18866: EMPTY
18867: LIST
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: LIST
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PPUSH
18878: CALL_OW 70
18882: NOT
18883: IFFALSE 18830
// for i in omarSquad do
18885: LD_ADDR_VAR 0 1
18889: PUSH
18890: LD_EXP 48
18894: PUSH
18895: FOR_IN
18896: IFFALSE 18927
// if GetLives ( i ) < 750 then
18898: LD_VAR 0 1
18902: PPUSH
18903: CALL_OW 256
18907: PUSH
18908: LD_INT 750
18910: LESS
18911: IFFALSE 18925
// SetLives ( i , 1000 ) ;
18913: LD_VAR 0 1
18917: PPUSH
18918: LD_INT 1000
18920: PPUSH
18921: CALL_OW 234
18925: GO 18895
18927: POP
18928: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
18929: LD_ADDR_VAR 0 1
18933: PUSH
18934: LD_INT 14
18936: PPUSH
18937: LD_INT 21
18939: PUSH
18940: LD_INT 3
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PPUSH
18947: CALL_OW 70
18951: PUSH
18952: FOR_IN
18953: IFFALSE 18969
// SetSide ( i , 5 ) ;
18955: LD_VAR 0 1
18959: PPUSH
18960: LD_INT 5
18962: PPUSH
18963: CALL_OW 235
18967: GO 18952
18969: POP
18970: POP
// wait ( 0 0$3 ) ;
18971: LD_INT 105
18973: PPUSH
18974: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
18978: LD_INT 5
18980: PPUSH
18981: LD_INT 2
18983: PPUSH
18984: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
18988: LD_EXP 40
18992: PPUSH
18993: CALL_OW 87
// DialogueOn ;
18997: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-1 ) ;
19001: LD_EXP 40
19005: PPUSH
19006: LD_STRING DOm-Veh-1
19008: PPUSH
19009: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
19013: LD_EXP 40
19017: PPUSH
19018: LD_STRING DOm-Veh-2
19020: PPUSH
19021: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
19025: LD_EXP 40
19029: PPUSH
19030: LD_STRING DOm-Veh-3
19032: PPUSH
19033: CALL_OW 94
// if mortarConstructed then
19037: LD_EXP 15
19041: IFFALSE 19055
// SayRadio ( Omar , DOm-Veh-4 ) ;
19043: LD_EXP 40
19047: PPUSH
19048: LD_STRING DOm-Veh-4
19050: PPUSH
19051: CALL_OW 94
// Say ( Heike , DH-Veh-5 ) ;
19055: LD_EXP 30
19059: PPUSH
19060: LD_STRING DH-Veh-5
19062: PPUSH
19063: CALL_OW 88
// if IsOk ( Kurt ) then
19067: LD_EXP 41
19071: PPUSH
19072: CALL_OW 302
19076: IFFALSE 19126
// begin Say ( Kurt , DKs-Veh-6 ) ;
19078: LD_EXP 41
19082: PPUSH
19083: LD_STRING DKs-Veh-6
19085: PPUSH
19086: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
19090: LD_EXP 41
19094: PPUSH
19095: LD_STRING DKs-Veh-7
19097: PPUSH
19098: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
19102: LD_EXP 31
19106: PPUSH
19107: LD_STRING DG-Veh-8
19109: PPUSH
19110: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
19114: LD_EXP 32
19118: PPUSH
19119: LD_STRING DM-Veh-9
19121: PPUSH
19122: CALL_OW 88
// end ; DialogueOff ;
19126: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
19130: LD_STRING M4
19132: PPUSH
19133: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
19137: LD_EXP 40
19141: PPUSH
19142: LD_INT 341
19144: PPUSH
19145: LD_INT 232
19147: PPUSH
19148: CALL_OW 428
19152: PPUSH
19153: CALL_OW 120
// omarArrived := true ;
19157: LD_ADDR_EXP 6
19161: PUSH
19162: LD_INT 1
19164: ST_TO_ADDR
// omarScriptBase := true ;
19165: LD_ADDR_EXP 10
19169: PUSH
19170: LD_INT 1
19172: ST_TO_ADDR
// omarWantVehicles := true ;
19173: LD_ADDR_EXP 18
19177: PUSH
19178: LD_INT 1
19180: ST_TO_ADDR
// end ;
19181: PPOPN 1
19183: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
19184: LD_EXP 43
19188: PPUSH
19189: CALL_OW 302
19193: PUSH
19194: LD_EXP 12
19198: AND
19199: PUSH
19200: LD_EXP 6
19204: AND
19205: IFFALSE 19309
19207: GO 19209
19209: DISABLE
// begin wait ( 0 0$20 ) ;
19210: LD_INT 700
19212: PPUSH
19213: CALL_OW 67
// CenterNowOnUnits ( Rolf ) ;
19217: LD_EXP 43
19221: PPUSH
19222: CALL_OW 87
// DialogueOn ;
19226: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
19230: LD_EXP 43
19234: PPUSH
19235: LD_STRING DRf-Veh-10
19237: PPUSH
19238: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
19242: LD_EXP 43
19246: PPUSH
19247: LD_STRING DRf-Veh-11
19249: PPUSH
19250: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
19254: LD_EXP 30
19258: PPUSH
19259: LD_STRING DH-Veh-12
19261: PPUSH
19262: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
19266: LD_EXP 30
19270: PPUSH
19271: LD_STRING DH-Veh-13
19273: PPUSH
19274: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
19278: LD_EXP 43
19282: PPUSH
19283: LD_STRING DRf-Veh-14
19285: PPUSH
19286: CALL_OW 88
// DialogueOff ;
19290: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
19294: LD_STRING M5
19296: PPUSH
19297: CALL_OW 337
// rolfWantVehicles := true ;
19301: LD_ADDR_EXP 17
19305: PUSH
19306: LD_INT 1
19308: ST_TO_ADDR
// end ;
19309: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
19310: LD_EXP 18
19314: IFFALSE 20013
19316: GO 19318
19318: DISABLE
19319: LD_INT 0
19321: PPUSH
19322: PPUSH
19323: PPUSH
19324: PPUSH
19325: PPUSH
19326: PPUSH
// begin wait ( 0 0$3 ) ;
19327: LD_INT 105
19329: PPUSH
19330: CALL_OW 67
// Hint ( OmarVehicles ) ;
19334: LD_STRING OmarVehicles
19336: PPUSH
19337: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
19341: LD_INT 16
19343: PPUSH
19344: LD_INT 1
19346: PPUSH
19347: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
19351: LD_INT 35
19353: PPUSH
19354: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
19358: LD_ADDR_EXP 20
19362: PUSH
19363: LD_EXP 20
19367: PUSH
19368: LD_INT 35
19370: MINUS
19371: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
19372: LD_EXP 20
19376: PUSH
19377: LD_INT 0
19379: LESSEQUAL
19380: IFFALSE 19480
// begin display_strings := [ ] ;
19382: LD_ADDR_OWVAR 47
19386: PUSH
19387: EMPTY
19388: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
19389: LD_STRING M4a
19391: PPUSH
19392: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
19396: LD_INT 16
19398: PPUSH
19399: LD_INT 0
19401: PPUSH
19402: CALL_OW 424
// DialogueOn ;
19406: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
19410: LD_EXP 40
19414: PPUSH
19415: LD_STRING DOm-Veh-b-15
19417: PPUSH
19418: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
19422: LD_EXP 30
19426: PPUSH
19427: LD_STRING DH-Veh-b-16
19429: PPUSH
19430: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
19434: LD_EXP 40
19438: PPUSH
19439: LD_STRING DOm-Veh-b-17
19441: PPUSH
19442: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
19446: LD_EXP 35
19450: PPUSH
19451: LD_STRING DK-Veh-b-18
19453: PPUSH
19454: CALL_OW 88
// DialogueOff ;
19458: CALL_OW 7
// omarAttack := true ;
19462: LD_ADDR_EXP 23
19466: PUSH
19467: LD_INT 1
19469: ST_TO_ADDR
// omarScriptBase := false ;
19470: LD_ADDR_EXP 10
19474: PUSH
19475: LD_INT 0
19477: ST_TO_ADDR
// exit ;
19478: GO 20013
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
19480: LD_EXP 21
19484: PUSH
19485: LD_INT 16
19487: PPUSH
19488: LD_INT 22
19490: PUSH
19491: LD_INT 2
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 21
19500: PUSH
19501: LD_INT 2
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 33
19510: PUSH
19511: LD_INT 1
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: LD_INT 58
19520: PUSH
19521: EMPTY
19522: LIST
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: PPUSH
19530: CALL_OW 70
19534: LESSEQUAL
19535: IFFALSE 19351
// omarWaitingForVehiclesTimer := 0 0$00 ;
19537: LD_ADDR_EXP 20
19541: PUSH
19542: LD_INT 0
19544: ST_TO_ADDR
// display_strings := [ ] ;
19545: LD_ADDR_OWVAR 47
19549: PUSH
19550: EMPTY
19551: ST_TO_ADDR
// DialogueOn ;
19552: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
19556: LD_EXP 40
19560: PPUSH
19561: LD_STRING DOm-Veh-a-15
19563: PPUSH
19564: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
19568: LD_EXP 35
19572: PPUSH
19573: LD_STRING DK-Veh-a-16
19575: PPUSH
19576: CALL_OW 88
// DialogueOff ;
19580: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
19584: LD_STRING M4a
19586: PPUSH
19587: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
19591: LD_INT 16
19593: PPUSH
19594: LD_INT 0
19596: PPUSH
19597: CALL_OW 424
// omarHasVehicles := true ;
19601: LD_ADDR_EXP 22
19605: PUSH
19606: LD_INT 1
19608: ST_TO_ADDR
// wait ( 1 1$00 ) ;
19609: LD_INT 2100
19611: PPUSH
19612: CALL_OW 67
// omarAttack := true ;
19616: LD_ADDR_EXP 23
19620: PUSH
19621: LD_INT 1
19623: ST_TO_ADDR
// omarScriptBase := false ;
19624: LD_ADDR_EXP 10
19628: PUSH
19629: LD_INT 0
19631: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
19632: LD_ADDR_VAR 0 2
19636: PUSH
19637: LD_INT 16
19639: PPUSH
19640: LD_INT 22
19642: PUSH
19643: LD_INT 2
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PUSH
19650: LD_INT 21
19652: PUSH
19653: LD_INT 2
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PUSH
19660: LD_INT 33
19662: PUSH
19663: LD_INT 1
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 58
19672: PUSH
19673: EMPTY
19674: LIST
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: PPUSH
19682: CALL_OW 70
19686: ST_TO_ADDR
// for i in tmp do
19687: LD_ADDR_VAR 0 1
19691: PUSH
19692: LD_VAR 0 2
19696: PUSH
19697: FOR_IN
19698: IFFALSE 19726
// begin SetFuel ( i , 100 ) ;
19700: LD_VAR 0 1
19704: PPUSH
19705: LD_INT 100
19707: PPUSH
19708: CALL_OW 240
// SetSide ( i , 5 ) ;
19712: LD_VAR 0 1
19716: PPUSH
19717: LD_INT 5
19719: PPUSH
19720: CALL_OW 235
// end ;
19724: GO 19697
19726: POP
19727: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
19728: LD_ADDR_VAR 0 3
19732: PUSH
19733: LD_EXP 48
19737: PPUSH
19738: LD_INT 25
19740: PUSH
19741: LD_INT 2
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PPUSH
19748: CALL_OW 72
19752: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
19753: LD_ADDR_VAR 0 4
19757: PUSH
19758: LD_EXP 48
19762: PPUSH
19763: LD_INT 3
19765: PUSH
19766: LD_INT 55
19768: PUSH
19769: EMPTY
19770: LIST
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: LD_INT 25
19778: PUSH
19779: LD_INT 3
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PPUSH
19790: CALL_OW 72
19794: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
19795: LD_ADDR_VAR 0 5
19799: PUSH
19800: LD_INT 324
19802: PPUSH
19803: LD_INT 234
19805: PPUSH
19806: CALL_OW 428
19810: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
19811: LD_ADDR_VAR 0 6
19815: PUSH
19816: LD_INT 334
19818: PPUSH
19819: LD_INT 241
19821: PPUSH
19822: CALL_OW 428
19826: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
19827: LD_VAR 0 6
19831: PPUSH
19832: CALL_OW 313
19836: PPUSH
19837: CALL_OW 122
// if eng then
19841: LD_VAR 0 3
19845: IFFALSE 19953
// begin if eng + mech <= tmp then
19847: LD_VAR 0 3
19851: PUSH
19852: LD_VAR 0 4
19856: PLUS
19857: PUSH
19858: LD_VAR 0 2
19862: LESSEQUAL
19863: IFFALSE 19918
// begin ComEnterUnit ( eng , workshop ) ;
19865: LD_VAR 0 3
19869: PPUSH
19870: LD_VAR 0 5
19874: PPUSH
19875: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
19879: LD_VAR 0 3
19883: PPUSH
19884: LD_INT 3
19886: PPUSH
19887: CALL_OW 183
// AddComExitBuilding ( eng ) ;
19891: LD_VAR 0 3
19895: PPUSH
19896: CALL_OW 182
// mech := mech union eng ;
19900: LD_ADDR_VAR 0 4
19904: PUSH
19905: LD_VAR 0 4
19909: PUSH
19910: LD_VAR 0 3
19914: UNION
19915: ST_TO_ADDR
// end else
19916: GO 19953
// begin ComEnterUnit ( eng , armoury ) ;
19918: LD_VAR 0 3
19922: PPUSH
19923: LD_VAR 0 6
19927: PPUSH
19928: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
19932: LD_VAR 0 3
19936: PPUSH
19937: LD_INT 1
19939: PPUSH
19940: CALL_OW 183
// AddComExitBuilding ( eng ) ;
19944: LD_VAR 0 3
19948: PPUSH
19949: CALL_OW 182
// end ; end ; for i := 1 to tmp do
19953: LD_ADDR_VAR 0 1
19957: PUSH
19958: DOUBLE
19959: LD_INT 1
19961: DEC
19962: ST_TO_ADDR
19963: LD_VAR 0 2
19967: PUSH
19968: FOR_TO
19969: IFFALSE 20011
// if i <= mech then
19971: LD_VAR 0 1
19975: PUSH
19976: LD_VAR 0 4
19980: LESSEQUAL
19981: IFFALSE 20009
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
19983: LD_VAR 0 4
19987: PUSH
19988: LD_VAR 0 1
19992: ARRAY
19993: PPUSH
19994: LD_VAR 0 2
19998: PUSH
19999: LD_VAR 0 1
20003: ARRAY
20004: PPUSH
20005: CALL_OW 180
20009: GO 19968
20011: POP
20012: POP
// end ;
20013: PPOPN 6
20015: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i ;
20016: LD_EXP 43
20020: PPUSH
20021: CALL_OW 302
20025: PUSH
20026: LD_EXP 17
20030: AND
20031: IFFALSE 20487
20033: GO 20035
20035: DISABLE
20036: LD_INT 0
20038: PPUSH
// begin repeat wait ( 0 0$1 ) ;
20039: LD_INT 35
20041: PPUSH
20042: CALL_OW 67
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
20046: LD_ADDR_EXP 19
20050: PUSH
20051: LD_EXP 19
20055: PUSH
20056: LD_INT 35
20058: MINUS
20059: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 or omarAttack then
20060: LD_EXP 19
20064: PUSH
20065: LD_INT 0
20067: LESSEQUAL
20068: PUSH
20069: LD_EXP 23
20073: OR
20074: IFFALSE 20292
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
20076: LD_ADDR_EXP 19
20080: PUSH
20081: LD_INT 0
20083: ST_TO_ADDR
// display_strings := [ ] ;
20084: LD_ADDR_OWVAR 47
20088: PUSH
20089: EMPTY
20090: ST_TO_ADDR
// DialogueOn ;
20091: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
20095: LD_EXP 43
20099: PPUSH
20100: LD_STRING DRf-Veh-b-19
20102: PPUSH
20103: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
20107: LD_EXP 43
20111: PPUSH
20112: LD_STRING DRf-Veh-b-20
20114: PPUSH
20115: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
20119: LD_EXP 30
20123: PPUSH
20124: LD_STRING DH-Veh-b-21
20126: PPUSH
20127: CALL_OW 88
// if IsOk ( Givi ) then
20131: LD_EXP 31
20135: PPUSH
20136: CALL_OW 302
20140: IFFALSE 20178
// begin Say ( Givi , DG-Veh-b-22 ) ;
20142: LD_EXP 31
20146: PPUSH
20147: LD_STRING DG-Veh-b-22
20149: PPUSH
20150: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
20154: LD_EXP 30
20158: PPUSH
20159: LD_STRING DH-Veh-b-23
20161: PPUSH
20162: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
20166: LD_EXP 31
20170: PPUSH
20171: LD_STRING DG-Veh-b-24
20173: PPUSH
20174: CALL_OW 88
// end ; DialogueOff ;
20178: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
20182: LD_STRING M5a
20184: PPUSH
20185: CALL_OW 337
// for i in rolfSquad do
20189: LD_ADDR_VAR 0 1
20193: PUSH
20194: LD_EXP 47
20198: PUSH
20199: FOR_IN
20200: IFFALSE 20266
// begin SetSide ( i , 8 ) ;
20202: LD_VAR 0 1
20206: PPUSH
20207: LD_INT 8
20209: PPUSH
20210: CALL_OW 235
// if IsDriver ( i ) then
20214: LD_VAR 0 1
20218: PPUSH
20219: CALL 59151 0 1
20223: IFFALSE 20244
// SetSide ( IsInUnit ( i ) , 8 ) else
20225: LD_VAR 0 1
20229: PPUSH
20230: CALL_OW 310
20234: PPUSH
20235: LD_INT 8
20237: PPUSH
20238: CALL_OW 235
20242: GO 20264
// if IsInUnit ( i ) then
20244: LD_VAR 0 1
20248: PPUSH
20249: CALL_OW 310
20253: IFFALSE 20264
// ComExitBuilding ( i ) ;
20255: LD_VAR 0 1
20259: PPUSH
20260: CALL_OW 122
// end ;
20264: GO 20199
20266: POP
20267: POP
// wait ( 0 0$1 ) ;
20268: LD_INT 35
20270: PPUSH
20271: CALL_OW 67
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
20275: LD_EXP 47
20279: PPUSH
20280: LD_INT 229
20282: PPUSH
20283: LD_INT 154
20285: PPUSH
20286: CALL_OW 114
// exit ;
20290: GO 20487
// end ; if IsDead ( Rolf ) then
20292: LD_EXP 43
20296: PPUSH
20297: CALL_OW 301
20301: IFFALSE 20312
// begin ChangeMissionObjectives ( M5a ) ;
20303: LD_STRING M5a
20305: PPUSH
20306: CALL_OW 337
// exit ;
20310: GO 20487
// end ; until UnitFilter ( rolfSquad , [ f_driving ] ) + 0 = rolfSquad + 0 ;
20312: LD_EXP 47
20316: PPUSH
20317: LD_INT 55
20319: PUSH
20320: EMPTY
20321: LIST
20322: PPUSH
20323: CALL_OW 72
20327: PUSH
20328: LD_INT 0
20330: PLUS
20331: PUSH
20332: LD_EXP 47
20336: PUSH
20337: LD_INT 0
20339: PLUS
20340: EQUAL
20341: IFFALSE 20039
// rolfWaitingForVehiclesTimer := 0 0$00 ;
20343: LD_ADDR_EXP 19
20347: PUSH
20348: LD_INT 0
20350: ST_TO_ADDR
// display_strings := [ ] ;
20351: LD_ADDR_OWVAR 47
20355: PUSH
20356: EMPTY
20357: ST_TO_ADDR
// DialogueOn ;
20358: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
20362: LD_EXP 43
20366: PPUSH
20367: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
20371: LD_EXP 43
20375: PPUSH
20376: LD_STRING DRf-Veh-a-17
20378: PPUSH
20379: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
20383: LD_EXP 30
20387: PPUSH
20388: LD_STRING DH-08-Veh-a-18
20390: PPUSH
20391: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
20395: LD_EXP 43
20399: PPUSH
20400: LD_STRING DRf-Veh-a-19
20402: PPUSH
20403: CALL_OW 88
// DialogueOff ;
20407: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
20411: LD_STRING M5a
20413: PPUSH
20414: CALL_OW 337
// rolfHasVehicles := true ;
20418: LD_ADDR_EXP 16
20422: PUSH
20423: LD_INT 1
20425: ST_TO_ADDR
// for i in rolfSquad do
20426: LD_ADDR_VAR 0 1
20430: PUSH
20431: LD_EXP 47
20435: PUSH
20436: FOR_IN
20437: IFFALSE 20470
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
20439: LD_VAR 0 1
20443: PPUSH
20444: CALL_OW 310
20448: PPUSH
20449: LD_INT 8
20451: PPUSH
20452: CALL_OW 235
// SetSide ( i , 8 ) ;
20456: LD_VAR 0 1
20460: PPUSH
20461: LD_INT 8
20463: PPUSH
20464: CALL_OW 235
// end ;
20468: GO 20436
20470: POP
20471: POP
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
20472: LD_EXP 47
20476: PPUSH
20477: LD_INT 229
20479: PPUSH
20480: LD_INT 154
20482: PPUSH
20483: CALL_OW 114
// end ;
20487: PPOPN 1
20489: END
// every 0 0$1 trigger leninSpotted do
20490: LD_EXP 14
20494: IFFALSE 20582
20496: GO 20498
20498: DISABLE
// begin wait ( 0 0$10 ) ;
20499: LD_INT 350
20501: PPUSH
20502: CALL_OW 67
// DialogueOn ;
20506: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
20510: LD_EXP 42
20514: PPUSH
20515: LD_STRING DA-Transmission-1
20517: PPUSH
20518: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
20522: LD_EXP 49
20526: PPUSH
20527: LD_STRING DMzw-Transmission-2
20529: PPUSH
20530: CALL_OW 94
// if gaidarKilled then
20534: LD_EXP 7
20538: IFFALSE 20554
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
20540: LD_EXP 49
20544: PPUSH
20545: LD_STRING DMzw-Transmission-3
20547: PPUSH
20548: CALL_OW 94
20552: GO 20566
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
20554: LD_EXP 49
20558: PPUSH
20559: LD_STRING DMzw-Transmission-a-3
20561: PPUSH
20562: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
20566: LD_EXP 30
20570: PPUSH
20571: LD_STRING DH-Transmission-4
20573: PPUSH
20574: CALL_OW 88
// DialogueOff ;
20578: CALL_OW 7
// end ;
20582: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
20583: LD_INT 22
20585: PUSH
20586: LD_INT 3
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: LD_INT 25
20595: PUSH
20596: LD_INT 9
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: LD_INT 101
20605: PUSH
20606: LD_INT 2
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: LIST
20617: PPUSH
20618: CALL_OW 69
20622: PUSH
20623: LD_EXP 30
20627: PPUSH
20628: CALL_OW 302
20632: AND
20633: IFFALSE 20698
20635: GO 20637
20637: DISABLE
// begin CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
20638: LD_INT 22
20640: PUSH
20641: LD_INT 3
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 25
20650: PUSH
20651: LD_INT 9
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 101
20660: PUSH
20661: LD_INT 2
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: LIST
20672: PPUSH
20673: CALL_OW 69
20677: PUSH
20678: LD_INT 1
20680: ARRAY
20681: PPUSH
20682: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
20686: LD_EXP 30
20690: PPUSH
20691: LD_STRING DH-Rubazooka-1
20693: PPUSH
20694: CALL_OW 88
// end ;
20698: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
20699: LD_INT 19
20701: PPUSH
20702: LD_INT 22
20704: PUSH
20705: LD_INT 3
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PPUSH
20712: CALL_OW 70
20716: PUSH
20717: LD_EXP 28
20721: AND
20722: IFFALSE 20773
20724: GO 20726
20726: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
20727: LD_INT 19
20729: PPUSH
20730: LD_INT 22
20732: PUSH
20733: LD_INT 3
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PPUSH
20740: CALL_OW 70
20744: PPUSH
20745: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
20749: LD_EXP 30
20753: PPUSH
20754: LD_STRING DH-Ruattfirst-1
20756: PPUSH
20757: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
20761: LD_EXP 30
20765: PPUSH
20766: LD_STRING DH-Ruattfirst-2
20768: PPUSH
20769: CALL_OW 88
// end ;
20773: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
20774: LD_INT 19
20776: PPUSH
20777: LD_INT 22
20779: PUSH
20780: LD_INT 3
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PPUSH
20787: CALL_OW 70
20791: PUSH
20792: LD_EXP 28
20796: NOT
20797: AND
20798: IFFALSE 20837
20800: GO 20802
20802: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
20803: LD_INT 19
20805: PPUSH
20806: LD_INT 22
20808: PUSH
20809: LD_INT 3
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PPUSH
20816: CALL_OW 70
20820: PPUSH
20821: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
20825: LD_EXP 30
20829: PPUSH
20830: LD_STRING DH-Ruattnext-1
20832: PPUSH
20833: CALL_OW 88
// end ;
20837: END
// every 0 0$1 trigger GetResourceType ( GetBase ( arDepot ) , mat_oil ) < 31 and IsOk ( Givi ) do var vehicle , driver , live ;
20838: LD_EXP 44
20842: PPUSH
20843: CALL_OW 274
20847: PPUSH
20848: LD_INT 2
20850: PPUSH
20851: CALL_OW 275
20855: PUSH
20856: LD_INT 31
20858: LESS
20859: PUSH
20860: LD_EXP 31
20864: PPUSH
20865: CALL_OW 302
20869: AND
20870: IFFALSE 21425
20872: GO 20874
20874: DISABLE
20875: LD_INT 0
20877: PPUSH
20878: PPUSH
20879: PPUSH
// begin DialogueOn ;
20880: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
20884: LD_EXP 30
20888: PPUSH
20889: LD_STRING DH-Fuel-1
20891: PPUSH
20892: CALL_OW 88
// Say ( Givi , DG-Fuel-2 ) ;
20896: LD_EXP 31
20900: PPUSH
20901: LD_STRING DG-Fuel-2
20903: PPUSH
20904: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
20908: LD_EXP 31
20912: PPUSH
20913: LD_STRING DG-Fuel-3
20915: PPUSH
20916: CALL_OW 88
// DialogueOff ;
20920: CALL_OW 7
// Query ( Oil ) ;
20924: LD_STRING Oil
20926: PPUSH
20927: CALL_OW 97
// SetAreaMapShow ( oilArea , 1 ) ;
20931: LD_INT 20
20933: PPUSH
20934: LD_INT 1
20936: PPUSH
20937: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
20941: LD_INT 35
20943: PPUSH
20944: CALL_OW 67
// until FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) ;
20948: LD_INT 20
20950: PPUSH
20951: LD_INT 22
20953: PUSH
20954: LD_INT 2
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 33
20963: PUSH
20964: LD_INT 1
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 2
20973: PUSH
20974: LD_INT 34
20976: PUSH
20977: LD_INT 32
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: LD_INT 34
20986: PUSH
20987: LD_INT 51
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: LIST
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: LIST
21003: PPUSH
21004: CALL_OW 70
21008: IFFALSE 20941
// SetAreaMapShow ( oilArea , 0 ) ;
21010: LD_INT 20
21012: PPUSH
21013: LD_INT 0
21015: PPUSH
21016: CALL_OW 424
// vehicle := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) [ 1 ] ;
21020: LD_ADDR_VAR 0 1
21024: PUSH
21025: LD_INT 20
21027: PPUSH
21028: LD_INT 22
21030: PUSH
21031: LD_INT 2
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 33
21040: PUSH
21041: LD_INT 1
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 2
21050: PUSH
21051: LD_INT 34
21053: PUSH
21054: LD_INT 32
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 34
21063: PUSH
21064: LD_INT 51
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: LIST
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: LIST
21080: PPUSH
21081: CALL_OW 70
21085: PUSH
21086: LD_INT 1
21088: ARRAY
21089: ST_TO_ADDR
// driver := IsDrivenBy ( vehicle ) ;
21090: LD_ADDR_VAR 0 2
21094: PUSH
21095: LD_VAR 0 1
21099: PPUSH
21100: CALL_OW 311
21104: ST_TO_ADDR
// live := GetLives ( vehicle ) ;
21105: LD_ADDR_VAR 0 3
21109: PUSH
21110: LD_VAR 0 1
21114: PPUSH
21115: CALL_OW 256
21119: ST_TO_ADDR
// RemoveUnit ( driver ) ;
21120: LD_VAR 0 2
21124: PPUSH
21125: CALL_OW 64
// RemoveUnit ( vehicle ) ;
21129: LD_VAR 0 1
21133: PPUSH
21134: CALL_OW 64
// wait ( rand ( 4 4$30 , 5 5$30 ) ) ;
21138: LD_INT 9450
21140: PPUSH
21141: LD_INT 11550
21143: PPUSH
21144: CALL_OW 12
21148: PPUSH
21149: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21153: LD_INT 35
21155: PPUSH
21156: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
21160: LD_INT 22
21162: PUSH
21163: LD_INT 3
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 92
21172: PUSH
21173: LD_INT 261
21175: PUSH
21176: LD_INT 71
21178: PUSH
21179: LD_INT 12
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PPUSH
21192: CALL_OW 69
21196: NOT
21197: PUSH
21198: LD_INT 277
21200: PPUSH
21201: LD_INT 80
21203: PPUSH
21204: CALL_OW 428
21208: NOT
21209: AND
21210: IFFALSE 21153
// uc_nation := GetNation ( vehicle ) ;
21212: LD_ADDR_OWVAR 21
21216: PUSH
21217: LD_VAR 0 1
21221: PPUSH
21222: CALL_OW 248
21226: ST_TO_ADDR
// uc_side := 2 ;
21227: LD_ADDR_OWVAR 20
21231: PUSH
21232: LD_INT 2
21234: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( vehicle ) , GetEngine ( vehicle ) , GetControl ( vehicle ) , GetWeapon ( vehicle ) , 66 ) ;
21235: LD_VAR 0 1
21239: PPUSH
21240: CALL_OW 265
21244: PPUSH
21245: LD_VAR 0 1
21249: PPUSH
21250: CALL_OW 262
21254: PPUSH
21255: LD_VAR 0 1
21259: PPUSH
21260: CALL_OW 263
21264: PPUSH
21265: LD_VAR 0 1
21269: PPUSH
21270: CALL_OW 264
21274: PPUSH
21275: LD_INT 66
21277: PPUSH
21278: CALL 29672 0 5
// vehicle := CreateVehicle ;
21282: LD_ADDR_VAR 0 1
21286: PUSH
21287: CALL_OW 45
21291: ST_TO_ADDR
// PlaceUnitXYD ( vehicle , 277 , 80 , 4 , false ) ;
21292: LD_VAR 0 1
21296: PPUSH
21297: LD_INT 277
21299: PPUSH
21300: LD_INT 80
21302: PPUSH
21303: LD_INT 4
21305: PPUSH
21306: LD_INT 0
21308: PPUSH
21309: CALL 63476 0 5
// PlaceHumanInUnit ( driver , vehicle ) ;
21313: LD_VAR 0 2
21317: PPUSH
21318: LD_VAR 0 1
21322: PPUSH
21323: CALL_OW 52
// SetLives ( vehicle , live ) ;
21327: LD_VAR 0 1
21331: PPUSH
21332: LD_VAR 0 3
21336: PPUSH
21337: CALL_OW 234
// if Prob ( [ 70 , 60 , 50 , 40 ] [ Difficulty ] ) then
21341: LD_INT 70
21343: PUSH
21344: LD_INT 60
21346: PUSH
21347: LD_INT 50
21349: PUSH
21350: LD_INT 40
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: PUSH
21359: LD_OWVAR 67
21363: ARRAY
21364: PPUSH
21365: CALL_OW 13
21369: IFFALSE 21388
// SetCargo ( vehicle , mat_oil , 100 ) else
21371: LD_VAR 0 1
21375: PPUSH
21376: LD_INT 2
21378: PPUSH
21379: LD_INT 100
21381: PPUSH
21382: CALL_OW 290
21386: GO 21410
// if live > 333 then
21388: LD_VAR 0 3
21392: PUSH
21393: LD_INT 333
21395: GREATER
21396: IFFALSE 21410
// SetLives ( vehicle , 333 ) ;
21398: LD_VAR 0 1
21402: PPUSH
21403: LD_INT 333
21405: PPUSH
21406: CALL_OW 234
// ComMoveXY ( vehicle , 250 , 119 ) ;
21410: LD_VAR 0 1
21414: PPUSH
21415: LD_INT 250
21417: PPUSH
21418: LD_INT 119
21420: PPUSH
21421: CALL_OW 111
// end ;
21425: PPOPN 3
21427: END
// every 0 0$1 trigger leninSpotted and omarAttack do
21428: LD_EXP 14
21432: PUSH
21433: LD_EXP 23
21437: AND
21438: IFFALSE 21738
21440: GO 21442
21442: DISABLE
// begin wait ( 0 0$45 ) ;
21443: LD_INT 1575
21445: PPUSH
21446: CALL_OW 67
// DialogueOn ;
21450: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
21454: LD_EXP 38
21458: PPUSH
21459: LD_STRING DShar-End-1
21461: PPUSH
21462: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
21466: LD_EXP 30
21470: PPUSH
21471: LD_STRING DH-End-2
21473: PPUSH
21474: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
21478: LD_EXP 38
21482: PPUSH
21483: LD_STRING DShar-End-3
21485: PPUSH
21486: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
21490: LD_EXP 30
21494: PPUSH
21495: LD_STRING DH-End-4
21497: PPUSH
21498: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
21502: LD_EXP 38
21506: PPUSH
21507: LD_STRING DShar-End-5
21509: PPUSH
21510: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
21514: LD_EXP 38
21518: PPUSH
21519: LD_STRING DShar-End-6
21521: PPUSH
21522: CALL_OW 94
// dwait ( 0 0$2 ) ;
21526: LD_INT 70
21528: PPUSH
21529: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
21533: LD_EXP 30
21537: PPUSH
21538: LD_STRING DH-End-7
21540: PPUSH
21541: CALL_OW 88
// DialogueOff ;
21545: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
21549: LD_STRING M6
21551: PPUSH
21552: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
21556: LD_INT 17
21558: PPUSH
21559: LD_INT 1
21561: PPUSH
21562: CALL_OW 424
// escapeAllowed := true ;
21566: LD_ADDR_EXP 24
21570: PUSH
21571: LD_INT 1
21573: ST_TO_ADDR
// wait ( 0 0$2 ) ;
21574: LD_INT 70
21576: PPUSH
21577: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
21581: LD_EXP 41
21585: PPUSH
21586: LD_STRING DKs-End-8
21588: PPUSH
21589: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
21593: LD_EXP 35
21597: PPUSH
21598: LD_STRING DK-End-10
21600: PPUSH
21601: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
21605: LD_EXP 41
21609: PPUSH
21610: LD_STRING DKs-End-9
21612: PPUSH
21613: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
21617: LD_EXP 37
21621: PPUSH
21622: LD_STRING DMar-End-11
21624: PPUSH
21625: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
21629: LD_STRING 05_DrugsTested
21631: PPUSH
21632: LD_EXP 1
21636: PPUSH
21637: CALL_OW 30
21641: IFFALSE 21655
// Say ( Mike , DM-End-12 ) ;
21643: LD_EXP 32
21647: PPUSH
21648: LD_STRING DM-End-12
21650: PPUSH
21651: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
21655: LD_EXP 39
21659: PPUSH
21660: LD_STRING DO-End-13
21662: PPUSH
21663: CALL_OW 88
// if IsOk ( Sophia ) then
21667: LD_EXP 36
21671: PPUSH
21672: CALL_OW 302
21676: IFFALSE 21702
// begin Say ( Sophia , DS-End-15 ) ;
21678: LD_EXP 36
21682: PPUSH
21683: LD_STRING DS-End-15
21685: PPUSH
21686: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
21690: LD_EXP 35
21694: PPUSH
21695: LD_STRING DK-End-16
21697: PPUSH
21698: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
21702: LD_EXP 31
21706: PPUSH
21707: LD_STRING DG-End-17
21709: PPUSH
21710: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
21714: LD_EXP 31
21718: PPUSH
21719: LD_STRING DG-End-18
21721: PPUSH
21722: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
21726: LD_EXP 31
21730: PPUSH
21731: LD_STRING DG-End-19
21733: PPUSH
21734: CALL_OW 88
// end ;
21738: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
21739: LD_EXP 24
21743: IFFALSE 21871
21745: GO 21747
21747: DISABLE
21748: LD_INT 0
21750: PPUSH
21751: PPUSH
// begin enable ;
21752: ENABLE
// display_strings := [ #X106-2 , escapeTimer ] ;
21753: LD_ADDR_OWVAR 47
21757: PUSH
21758: LD_STRING #X106-2
21760: PUSH
21761: LD_EXP 25
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
21770: LD_ADDR_EXP 25
21774: PUSH
21775: LD_EXP 25
21779: PUSH
21780: LD_INT 35
21782: MINUS
21783: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
21784: LD_ADDR_VAR 0 2
21788: PUSH
21789: LD_INT 17
21791: PPUSH
21792: LD_INT 22
21794: PUSH
21795: LD_INT 2
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 21
21804: PUSH
21805: LD_INT 1
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: LD_INT 23
21814: PUSH
21815: LD_INT 2
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: LIST
21826: PPUSH
21827: CALL_OW 71
21831: ST_TO_ADDR
// if not outsiders then
21832: LD_VAR 0 2
21836: NOT
21837: IFFALSE 21854
// begin escapeAllowed := false ;
21839: LD_ADDR_EXP 24
21843: PUSH
21844: LD_INT 0
21846: ST_TO_ADDR
// disable ;
21847: DISABLE
// MissionWin ;
21848: CALL 21874 0 0
// exit ;
21852: GO 21871
// end ; if escapeTimer <= 0 0$00 then
21854: LD_EXP 25
21858: PUSH
21859: LD_INT 0
21861: LESSEQUAL
21862: IFFALSE 21871
// YouLost ( TimeOut ) ;
21864: LD_STRING TimeOut
21866: PPUSH
21867: CALL_OW 104
// end ;
21871: PPOPN 2
21873: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
21874: LD_INT 0
21876: PPUSH
21877: PPUSH
21878: PPUSH
21879: PPUSH
21880: PPUSH
// Say ( Heike , DH-End-20 ) ;
21881: LD_EXP 30
21885: PPUSH
21886: LD_STRING DH-End-20
21888: PPUSH
21889: CALL_OW 88
// if rolfDied then
21893: LD_EXP 13
21897: IFFALSE 21912
// AddMedal ( med1 , - 1 ) else
21899: LD_STRING med1
21901: PPUSH
21902: LD_INT 1
21904: NEG
21905: PPUSH
21906: CALL_OW 101
21910: GO 21942
// if not canRolfJoin then
21912: LD_EXP 29
21916: NOT
21917: IFFALSE 21932
// AddMedal ( med1 , - 2 ) else
21919: LD_STRING med1
21921: PPUSH
21922: LD_INT 2
21924: NEG
21925: PPUSH
21926: CALL_OW 101
21930: GO 21942
// AddMedal ( med1 , 1 ) ;
21932: LD_STRING med1
21934: PPUSH
21935: LD_INT 1
21937: PPUSH
21938: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
21942: LD_EXP 22
21946: PUSH
21947: LD_EXP 16
21951: AND
21952: IFFALSE 21966
// AddMedal ( med2 , 1 ) else
21954: LD_STRING med2
21956: PPUSH
21957: LD_INT 1
21959: PPUSH
21960: CALL_OW 101
21964: GO 22015
// if omarHasVehicles then
21966: LD_EXP 22
21970: IFFALSE 21985
// AddMedal ( med2 , - 1 ) else
21972: LD_STRING med2
21974: PPUSH
21975: LD_INT 1
21977: NEG
21978: PPUSH
21979: CALL_OW 101
21983: GO 22015
// if rolfHasVehicles then
21985: LD_EXP 16
21989: IFFALSE 22004
// AddMedal ( med2 , - 2 ) else
21991: LD_STRING med2
21993: PPUSH
21994: LD_INT 2
21996: NEG
21997: PPUSH
21998: CALL_OW 101
22002: GO 22015
// AddMedal ( med2 , - 3 ) ;
22004: LD_STRING med2
22006: PPUSH
22007: LD_INT 3
22009: NEG
22010: PPUSH
22011: CALL_OW 101
// if ruLoseCounter >= [ 40 , 55 , 70 , 82 ] [ Difficulty ] and heikeLoseCounter = 0 then
22015: LD_EXP 5
22019: PUSH
22020: LD_INT 40
22022: PUSH
22023: LD_INT 55
22025: PUSH
22026: LD_INT 70
22028: PUSH
22029: LD_INT 82
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: PUSH
22038: LD_OWVAR 67
22042: ARRAY
22043: GREATEREQUAL
22044: PUSH
22045: LD_EXP 26
22049: PUSH
22050: LD_INT 0
22052: EQUAL
22053: AND
22054: IFFALSE 22068
// AddMedal ( med3 , 1 ) else
22056: LD_STRING med3
22058: PPUSH
22059: LD_INT 1
22061: PPUSH
22062: CALL_OW 101
22066: GO 22098
// if heikeLoseCounter then
22068: LD_EXP 26
22072: IFFALSE 22087
// AddMedal ( med3 , - 2 ) else
22074: LD_STRING med3
22076: PPUSH
22077: LD_INT 2
22079: NEG
22080: PPUSH
22081: CALL_OW 101
22085: GO 22098
// AddMedal ( med3 , - 1 ) ;
22087: LD_STRING med3
22089: PPUSH
22090: LD_INT 1
22092: NEG
22093: PPUSH
22094: CALL_OW 101
// GiveMedals ( MAIN ) ;
22098: LD_STRING MAIN
22100: PPUSH
22101: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
22105: LD_INT 22
22107: PUSH
22108: LD_INT 2
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: LD_INT 23
22117: PUSH
22118: LD_INT 2
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 21
22127: PUSH
22128: LD_INT 1
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: LIST
22139: PPUSH
22140: CALL_OW 69
22144: PPUSH
22145: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
22149: LD_EXP 30
22153: PPUSH
22154: LD_STRING 06_Heike
22156: PPUSH
22157: CALL_OW 38
// if Aviradze then
22161: LD_EXP 42
22165: IFFALSE 22179
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
22167: LD_EXP 42
22171: PPUSH
22172: LD_STRING 06_Aviradze
22174: PPUSH
22175: CALL_OW 38
// if Ibrahim then
22179: LD_EXP 33
22183: IFFALSE 22197
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
22185: LD_EXP 33
22189: PPUSH
22190: LD_STRING 06_Ibrahim
22192: PPUSH
22193: CALL_OW 38
// if Kamil then
22197: LD_EXP 34
22201: IFFALSE 22215
// SaveCharacters ( Kamil , 06_Kamil ) ;
22203: LD_EXP 34
22207: PPUSH
22208: LD_STRING 06_Kamil
22210: PPUSH
22211: CALL_OW 38
// if Sophia then
22215: LD_EXP 36
22219: IFFALSE 22233
// SaveCharacters ( Sophia , 06_Sophia ) ;
22221: LD_EXP 36
22225: PPUSH
22226: LD_STRING 06_Sophia
22228: PPUSH
22229: CALL_OW 38
// if Kaia then
22233: LD_EXP 35
22237: IFFALSE 22251
// SaveCharacters ( Kaia , 06_Kaia ) ;
22239: LD_EXP 35
22243: PPUSH
22244: LD_STRING 06_Kaia
22246: PPUSH
22247: CALL_OW 38
// if Givi then
22251: LD_EXP 31
22255: IFFALSE 22269
// SaveCharacters ( Givi , 06_Givi ) ;
22257: LD_EXP 31
22261: PPUSH
22262: LD_STRING 06_Givi
22264: PPUSH
22265: CALL_OW 38
// if Mike then
22269: LD_EXP 32
22273: IFFALSE 22287
// SaveCharacters ( Mike , 06_Mike ) ;
22275: LD_EXP 32
22279: PPUSH
22280: LD_STRING 06_Mike
22282: PPUSH
22283: CALL_OW 38
// if Markov then
22287: LD_EXP 37
22291: IFFALSE 22305
// SaveCharacters ( Markov , 06_Markov ) ;
22293: LD_EXP 37
22297: PPUSH
22298: LD_STRING 06_Markov
22300: PPUSH
22301: CALL_OW 38
// if Kurt then
22305: LD_EXP 41
22309: IFFALSE 22323
// SaveCharacters ( Kurt , 06_Kurt ) ;
22311: LD_EXP 41
22315: PPUSH
22316: LD_STRING 06_Kurt
22318: PPUSH
22319: CALL_OW 38
// if heikeSecondSquad then
22323: LD_EXP 45
22327: IFFALSE 22341
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
22329: LD_EXP 45
22333: PPUSH
22334: LD_STRING 06_others
22336: PPUSH
22337: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
22341: LD_ADDR_VAR 0 3
22345: PUSH
22346: LD_INT 22
22348: PUSH
22349: LD_INT 2
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 23
22358: PUSH
22359: LD_INT 0
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PPUSH
22370: CALL_OW 69
22374: ST_TO_ADDR
// if tmp then
22375: LD_VAR 0 3
22379: IFFALSE 22393
// SaveCharacters ( tmp , 06_apes ) ;
22381: LD_VAR 0 3
22385: PPUSH
22386: LD_STRING 06_apes
22388: PPUSH
22389: CALL_OW 38
// if Rolf then
22393: LD_EXP 43
22397: IFFALSE 22448
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
22399: LD_EXP 43
22403: PPUSH
22404: LD_STRING 06_Rolf
22406: PPUSH
22407: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
22411: LD_STRING enableBioCharacter(BIO_ROLF)
22413: PPUSH
22414: CALL_OW 559
// if rolfSquad diff Rolf then
22418: LD_EXP 47
22422: PUSH
22423: LD_EXP 43
22427: DIFF
22428: IFFALSE 22448
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
22430: LD_EXP 47
22434: PUSH
22435: LD_EXP 43
22439: DIFF
22440: PPUSH
22441: LD_STRING 06_RolfSquad
22443: PPUSH
22444: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
22448: LD_ADDR_VAR 0 3
22452: PUSH
22453: LD_INT 17
22455: PPUSH
22456: LD_INT 21
22458: PUSH
22459: LD_INT 2
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PPUSH
22466: CALL_OW 70
22470: ST_TO_ADDR
// if tmp then
22471: LD_VAR 0 3
22475: IFFALSE 22769
// begin tmp2 := [ ] ;
22477: LD_ADDR_VAR 0 4
22481: PUSH
22482: EMPTY
22483: ST_TO_ADDR
// for i in tmp do
22484: LD_ADDR_VAR 0 2
22488: PUSH
22489: LD_VAR 0 3
22493: PUSH
22494: FOR_IN
22495: IFFALSE 22755
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
22497: LD_VAR 0 2
22501: PPUSH
22502: CALL_OW 264
22506: PUSH
22507: LD_INT 32
22509: PUSH
22510: LD_INT 12
22512: PUSH
22513: LD_INT 51
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: LIST
22520: IN
22521: IFFALSE 22658
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
22523: LD_ADDR_VAR 0 5
22527: PUSH
22528: LD_VAR 0 2
22532: PPUSH
22533: LD_INT 1
22535: PPUSH
22536: CALL_OW 289
22540: PUSH
22541: LD_VAR 0 2
22545: PPUSH
22546: LD_INT 2
22548: PPUSH
22549: CALL_OW 289
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
22558: LD_ADDR_VAR 0 4
22562: PUSH
22563: LD_VAR 0 4
22567: PPUSH
22568: LD_VAR 0 4
22572: PUSH
22573: LD_INT 1
22575: PLUS
22576: PPUSH
22577: LD_VAR 0 2
22581: PPUSH
22582: CALL_OW 265
22586: PUSH
22587: LD_VAR 0 2
22591: PPUSH
22592: CALL_OW 262
22596: PUSH
22597: LD_VAR 0 2
22601: PPUSH
22602: CALL_OW 263
22606: PUSH
22607: LD_VAR 0 2
22611: PPUSH
22612: CALL_OW 264
22616: PUSH
22617: LD_VAR 0 2
22621: PPUSH
22622: CALL_OW 248
22626: PUSH
22627: LD_VAR 0 2
22631: PPUSH
22632: CALL_OW 256
22636: PUSH
22637: LD_VAR 0 5
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: PPUSH
22651: CALL_OW 1
22655: ST_TO_ADDR
// end else
22656: GO 22753
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
22658: LD_ADDR_VAR 0 4
22662: PUSH
22663: LD_VAR 0 4
22667: PPUSH
22668: LD_VAR 0 4
22672: PUSH
22673: LD_INT 1
22675: PLUS
22676: PPUSH
22677: LD_VAR 0 2
22681: PPUSH
22682: CALL_OW 265
22686: PUSH
22687: LD_VAR 0 2
22691: PPUSH
22692: CALL_OW 262
22696: PUSH
22697: LD_VAR 0 2
22701: PPUSH
22702: CALL_OW 263
22706: PUSH
22707: LD_VAR 0 2
22711: PPUSH
22712: CALL_OW 264
22716: PUSH
22717: LD_VAR 0 2
22721: PPUSH
22722: CALL_OW 248
22726: PUSH
22727: LD_VAR 0 2
22731: PPUSH
22732: CALL_OW 256
22736: PUSH
22737: EMPTY
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: PPUSH
22748: CALL_OW 1
22752: ST_TO_ADDR
22753: GO 22494
22755: POP
22756: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
22757: LD_VAR 0 4
22761: PPUSH
22762: LD_STRING 06_Vehicles
22764: PPUSH
22765: CALL_OW 39
// end ; YouWin ;
22769: CALL_OW 103
// end ; end_of_file
22773: LD_VAR 0 1
22777: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
22778: LD_INT 0
22780: PPUSH
// begin if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
22781: LD_VAR 0 1
22785: PPUSH
22786: CALL_OW 255
22790: PUSH
22791: LD_INT 2
22793: EQUAL
22794: PUSH
22795: LD_OWVAR 52
22799: AND
22800: PUSH
22801: LD_VAR 0 1
22805: PPUSH
22806: CALL_OW 263
22810: PUSH
22811: LD_INT 1
22813: EQUAL
22814: AND
22815: IFFALSE 22870
// begin driver := IsDrivenBy ( vehicle ) ;
22817: LD_ADDR_VAR 0 3
22821: PUSH
22822: LD_VAR 0 1
22826: PPUSH
22827: CALL_OW 311
22831: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
22832: LD_VAR 0 1
22836: PPUSH
22837: LD_INT 211
22839: PPUSH
22840: LD_INT 101
22842: PPUSH
22843: CALL_OW 111
// AddComExitVehicle ( driver ) ;
22847: LD_VAR 0 3
22851: PPUSH
22852: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
22856: LD_VAR 0 3
22860: PPUSH
22861: LD_VAR 0 2
22865: PPUSH
22866: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
22870: LD_VAR 0 1
22874: PPUSH
22875: CALL_OW 255
22879: PUSH
22880: LD_INT 3
22882: EQUAL
22883: IFFALSE 22914
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
22885: LD_ADDR_EXP 56
22889: PUSH
22890: LD_EXP 56
22894: PPUSH
22895: LD_EXP 56
22899: PUSH
22900: LD_INT 1
22902: PLUS
22903: PPUSH
22904: LD_VAR 0 1
22908: PPUSH
22909: CALL_OW 1
22913: ST_TO_ADDR
// end ;
22914: PPOPN 3
22916: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
22917: LD_VAR 0 1
22921: PPUSH
22922: CALL_OW 255
22926: PUSH
22927: LD_INT 8
22929: EQUAL
22930: PUSH
22931: LD_VAR 0 1
22935: PPUSH
22936: CALL_OW 266
22940: PUSH
22941: LD_INT 4
22943: EQUAL
22944: AND
22945: IFFALSE 22956
// ComUpgrade ( b ) ;
22947: LD_VAR 0 1
22951: PPUSH
22952: CALL_OW 146
// end ;
22956: PPOPN 1
22958: END
// on UnitDestroyed ( un ) do begin if un = Heike then
22959: LD_VAR 0 1
22963: PUSH
22964: LD_EXP 30
22968: EQUAL
22969: IFFALSE 22978
// YouLost ( Heike ) ;
22971: LD_STRING Heike
22973: PPUSH
22974: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] ] ) then
22978: LD_VAR 0 1
22982: PUSH
22983: LD_INT 22
22985: PUSH
22986: LD_INT 2
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 23
22995: PUSH
22996: LD_INT 2
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PPUSH
23007: CALL_OW 69
23011: IN
23012: IFFALSE 23028
// heikeLoseCounter := heikeLoseCounter + 1 ;
23014: LD_ADDR_EXP 26
23018: PUSH
23019: LD_EXP 26
23023: PUSH
23024: LD_INT 1
23026: PLUS
23027: ST_TO_ADDR
// if un = arDepot then
23028: LD_VAR 0 1
23032: PUSH
23033: LD_EXP 44
23037: EQUAL
23038: IFFALSE 23047
// YouLost ( Base ) ;
23040: LD_STRING Base
23042: PPUSH
23043: CALL_OW 104
// if un = Rolf then
23047: LD_VAR 0 1
23051: PUSH
23052: LD_EXP 43
23056: EQUAL
23057: IFFALSE 23067
// rolfDied := true ;
23059: LD_ADDR_EXP 13
23063: PUSH
23064: LD_INT 1
23066: ST_TO_ADDR
// if un in rolfSquad then
23067: LD_VAR 0 1
23071: PUSH
23072: LD_EXP 47
23076: IN
23077: IFFALSE 23095
// rolfSquad := rolfSquad diff un ;
23079: LD_ADDR_EXP 47
23083: PUSH
23084: LD_EXP 47
23088: PUSH
23089: LD_VAR 0 1
23093: DIFF
23094: ST_TO_ADDR
// if un in omarSquad then
23095: LD_VAR 0 1
23099: PUSH
23100: LD_EXP 48
23104: IN
23105: IFFALSE 23123
// omarSquad := omarSquad diff un ;
23107: LD_ADDR_EXP 48
23111: PUSH
23112: LD_EXP 48
23116: PUSH
23117: LD_VAR 0 1
23121: DIFF
23122: ST_TO_ADDR
// if GetSide ( un ) = 3 then
23123: LD_VAR 0 1
23127: PPUSH
23128: CALL_OW 255
23132: PUSH
23133: LD_INT 3
23135: EQUAL
23136: IFFALSE 23152
// ruLoseCounter := ruLoseCounter + 1 ;
23138: LD_ADDR_EXP 5
23142: PUSH
23143: LD_EXP 5
23147: PUSH
23148: LD_INT 1
23150: PLUS
23151: ST_TO_ADDR
// if un in ruAttackers then
23152: LD_VAR 0 1
23156: PUSH
23157: LD_EXP 57
23161: IN
23162: IFFALSE 23180
// ruAttackers := ruAttackers diff un ;
23164: LD_ADDR_EXP 57
23168: PUSH
23169: LD_EXP 57
23173: PUSH
23174: LD_VAR 0 1
23178: DIFF
23179: ST_TO_ADDR
// end ;
23180: PPOPN 1
23182: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
23183: LD_INT 0
23185: PPUSH
23186: PPUSH
23187: PPUSH
23188: PPUSH
// begin if GetSide ( un ) = 3 and not un in ruAttackers then
23189: LD_VAR 0 1
23193: PPUSH
23194: CALL_OW 255
23198: PUSH
23199: LD_INT 3
23201: EQUAL
23202: PUSH
23203: LD_VAR 0 1
23207: PUSH
23208: LD_EXP 57
23212: IN
23213: NOT
23214: AND
23215: IFFALSE 23711
// begin if not IsInArea ( un , ruMainBase ) then
23217: LD_VAR 0 1
23221: PPUSH
23222: LD_INT 10
23224: PPUSH
23225: CALL_OW 308
23229: NOT
23230: IFFALSE 23244
// ComMoveToArea ( un , ruMainBase ) ;
23232: LD_VAR 0 1
23236: PPUSH
23237: LD_INT 10
23239: PPUSH
23240: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
23244: LD_INT 35
23246: PPUSH
23247: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
23251: LD_VAR 0 1
23255: PPUSH
23256: CALL_OW 302
23260: NOT
23261: PUSH
23262: LD_VAR 0 1
23266: PPUSH
23267: LD_INT 10
23269: PPUSH
23270: CALL_OW 308
23274: OR
23275: IFFALSE 23244
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
23277: LD_ADDR_EXP 55
23281: PUSH
23282: LD_EXP 55
23286: PPUSH
23287: LD_EXP 55
23291: PUSH
23292: LD_INT 1
23294: PLUS
23295: PPUSH
23296: LD_VAR 0 1
23300: PPUSH
23301: CALL_OW 1
23305: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
23306: LD_ADDR_VAR 0 8
23310: PUSH
23311: LD_INT 72
23313: PUSH
23314: LD_INT 12
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: ST_TO_ADDR
// if tmp then
23321: LD_VAR 0 8
23325: IFFALSE 23440
// for i in tmp do
23327: LD_ADDR_VAR 0 5
23331: PUSH
23332: LD_VAR 0 8
23336: PUSH
23337: FOR_IN
23338: IFFALSE 23438
// if UnitsInside ( i ) < 6 then
23340: LD_VAR 0 5
23344: PPUSH
23345: CALL_OW 313
23349: PUSH
23350: LD_INT 6
23352: LESS
23353: IFFALSE 23436
// begin AddComEnterUnit ( un , i ) ;
23355: LD_VAR 0 1
23359: PPUSH
23360: LD_VAR 0 5
23364: PPUSH
23365: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
23369: LD_VAR 0 8
23373: PPUSH
23374: LD_INT 22
23376: PUSH
23377: LD_INT 23
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: PUSH
23384: LD_INT 1
23386: PPUSH
23387: LD_INT 2
23389: PPUSH
23390: CALL_OW 12
23394: ARRAY
23395: PPUSH
23396: LD_INT 1
23398: PPUSH
23399: LD_INT 1
23401: PPUSH
23402: LD_INT 44
23404: PUSH
23405: LD_INT 46
23407: PUSH
23408: LD_INT 47
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: LIST
23415: PUSH
23416: LD_INT 1
23418: PPUSH
23419: LD_INT 3
23421: PPUSH
23422: CALL_OW 12
23426: ARRAY
23427: PPUSH
23428: CALL_OW 185
// exit ;
23432: POP
23433: POP
23434: GO 23711
// end ;
23436: GO 23337
23438: POP
23439: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
23440: LD_ADDR_VAR 0 8
23444: PUSH
23445: LD_INT 10
23447: PPUSH
23448: LD_INT 22
23450: PUSH
23451: LD_INT 3
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PUSH
23458: LD_INT 50
23460: PUSH
23461: EMPTY
23462: LIST
23463: PUSH
23464: LD_INT 2
23466: PUSH
23467: LD_INT 30
23469: PUSH
23470: LD_INT 4
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 30
23479: PUSH
23480: LD_INT 5
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 30
23489: PUSH
23490: LD_INT 32
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 30
23499: PUSH
23500: LD_INT 31
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: LIST
23518: PPUSH
23519: CALL_OW 70
23523: ST_TO_ADDR
// if not tmp then
23524: LD_VAR 0 8
23528: NOT
23529: IFFALSE 23548
// begin ComMoveXY ( un , 83 , 133 ) ;
23531: LD_VAR 0 1
23535: PPUSH
23536: LD_INT 83
23538: PPUSH
23539: LD_INT 133
23541: PPUSH
23542: CALL_OW 111
// exit ;
23546: GO 23711
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
23548: LD_ADDR_VAR 0 6
23552: PUSH
23553: LD_VAR 0 1
23557: PPUSH
23558: LD_VAR 0 8
23562: PPUSH
23563: LD_INT 1
23565: PPUSH
23566: LD_INT 1
23568: PPUSH
23569: CALL 30229 0 4
23573: PUSH
23574: FOR_IN
23575: IFFALSE 23709
// begin case GetBType ( b ) of b_armoury , b_barracks :
23577: LD_VAR 0 6
23581: PPUSH
23582: CALL_OW 266
23586: PUSH
23587: LD_INT 4
23589: DOUBLE
23590: EQUAL
23591: IFTRUE 23601
23593: LD_INT 5
23595: DOUBLE
23596: EQUAL
23597: IFTRUE 23601
23599: GO 23612
23601: POP
// p := 6 ; b_breastwork , b_bunker :
23602: LD_ADDR_VAR 0 7
23606: PUSH
23607: LD_INT 6
23609: ST_TO_ADDR
23610: GO 23638
23612: LD_INT 31
23614: DOUBLE
23615: EQUAL
23616: IFTRUE 23626
23618: LD_INT 32
23620: DOUBLE
23621: EQUAL
23622: IFTRUE 23626
23624: GO 23637
23626: POP
// p := 1 ; end ;
23627: LD_ADDR_VAR 0 7
23631: PUSH
23632: LD_INT 1
23634: ST_TO_ADDR
23635: GO 23638
23637: POP
// if UnitsInside ( b ) < p then
23638: LD_VAR 0 6
23642: PPUSH
23643: CALL_OW 313
23647: PUSH
23648: LD_VAR 0 7
23652: LESS
23653: IFFALSE 23707
// begin ComEnterUnit ( un , b ) ;
23655: LD_VAR 0 1
23659: PPUSH
23660: LD_VAR 0 6
23664: PPUSH
23665: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
23669: LD_VAR 0 6
23673: PPUSH
23674: CALL_OW 266
23678: PUSH
23679: LD_INT 4
23681: PUSH
23682: LD_INT 5
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: IN
23689: IFFALSE 23703
// AddComChangeProfession ( un , class_soldier ) ;
23691: LD_VAR 0 1
23695: PPUSH
23696: LD_INT 1
23698: PPUSH
23699: CALL_OW 183
// exit ;
23703: POP
23704: POP
23705: GO 23711
// end ; end ;
23707: GO 23574
23709: POP
23710: POP
// end ; end ;
23711: PPOPN 8
23713: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
23714: LD_INT 0
23716: PPUSH
23717: PPUSH
23718: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
23719: LD_VAR 0 2
23723: PPUSH
23724: CALL_OW 255
23728: PUSH
23729: LD_INT 3
23731: EQUAL
23732: PUSH
23733: LD_VAR 0 2
23737: PPUSH
23738: CALL_OW 257
23742: PUSH
23743: LD_INT 1
23745: EQUAL
23746: AND
23747: PUSH
23748: LD_VAR 0 2
23752: PUSH
23753: LD_EXP 55
23757: IN
23758: NOT
23759: AND
23760: IFFALSE 24073
// begin ComMoveToArea ( un , ruMainBase ) ;
23762: LD_VAR 0 2
23766: PPUSH
23767: LD_INT 10
23769: PPUSH
23770: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
23774: LD_INT 35
23776: PPUSH
23777: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
23781: LD_VAR 0 2
23785: PPUSH
23786: CALL_OW 302
23790: NOT
23791: PUSH
23792: LD_VAR 0 2
23796: PPUSH
23797: LD_INT 10
23799: PPUSH
23800: CALL_OW 308
23804: OR
23805: IFFALSE 23774
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
23807: LD_ADDR_EXP 55
23811: PUSH
23812: LD_EXP 55
23816: PPUSH
23817: LD_EXP 55
23821: PUSH
23822: LD_INT 1
23824: PLUS
23825: PPUSH
23826: LD_VAR 0 2
23830: PPUSH
23831: CALL_OW 1
23835: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
23836: LD_ADDR_VAR 0 4
23840: PUSH
23841: LD_INT 10
23843: PPUSH
23844: LD_INT 22
23846: PUSH
23847: LD_INT 3
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 50
23856: PUSH
23857: EMPTY
23858: LIST
23859: PUSH
23860: LD_INT 2
23862: PUSH
23863: LD_INT 30
23865: PUSH
23866: LD_INT 4
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: PUSH
23873: LD_INT 30
23875: PUSH
23876: LD_INT 5
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 30
23885: PUSH
23886: LD_INT 32
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PUSH
23893: LD_INT 30
23895: PUSH
23896: LD_INT 31
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: LIST
23914: PPUSH
23915: CALL_OW 70
23919: ST_TO_ADDR
// if not tmp then
23920: LD_VAR 0 4
23924: NOT
23925: IFFALSE 23944
// begin ComMoveXY ( un , 83 , 133 ) ;
23927: LD_VAR 0 2
23931: PPUSH
23932: LD_INT 83
23934: PPUSH
23935: LD_INT 133
23937: PPUSH
23938: CALL_OW 111
// exit ;
23942: GO 24322
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
23944: LD_ADDR_VAR 0 5
23948: PUSH
23949: LD_VAR 0 2
23953: PPUSH
23954: LD_VAR 0 4
23958: PPUSH
23959: LD_INT 1
23961: PPUSH
23962: LD_INT 1
23964: PPUSH
23965: CALL 30229 0 4
23969: PUSH
23970: FOR_IN
23971: IFFALSE 24071
// begin case GetBType ( b ) of b_armoury , b_barracks :
23973: LD_VAR 0 5
23977: PPUSH
23978: CALL_OW 266
23982: PUSH
23983: LD_INT 4
23985: DOUBLE
23986: EQUAL
23987: IFTRUE 23997
23989: LD_INT 5
23991: DOUBLE
23992: EQUAL
23993: IFTRUE 23997
23995: GO 24008
23997: POP
// p := 6 ; b_breastwork , b_bunker :
23998: LD_ADDR_VAR 0 3
24002: PUSH
24003: LD_INT 6
24005: ST_TO_ADDR
24006: GO 24034
24008: LD_INT 31
24010: DOUBLE
24011: EQUAL
24012: IFTRUE 24022
24014: LD_INT 32
24016: DOUBLE
24017: EQUAL
24018: IFTRUE 24022
24020: GO 24033
24022: POP
// p := 1 ; end ;
24023: LD_ADDR_VAR 0 3
24027: PUSH
24028: LD_INT 1
24030: ST_TO_ADDR
24031: GO 24034
24033: POP
// if UnitsInside ( b ) < p then
24034: LD_VAR 0 5
24038: PPUSH
24039: CALL_OW 313
24043: PUSH
24044: LD_VAR 0 3
24048: LESS
24049: IFFALSE 24069
// begin ComEnterUnit ( un , b ) ;
24051: LD_VAR 0 2
24055: PPUSH
24056: LD_VAR 0 5
24060: PPUSH
24061: CALL_OW 120
// exit ;
24065: POP
24066: POP
24067: GO 24322
// end ; end ;
24069: GO 23970
24071: POP
24072: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
24073: LD_VAR 0 2
24077: PUSH
24078: LD_EXP 55
24082: IN
24083: PUSH
24084: LD_VAR 0 2
24088: PPUSH
24089: CALL_OW 257
24093: PUSH
24094: LD_INT 1
24096: EQUAL
24097: AND
24098: IFFALSE 24322
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
24100: LD_ADDR_VAR 0 4
24104: PUSH
24105: LD_INT 10
24107: PPUSH
24108: LD_INT 22
24110: PUSH
24111: LD_INT 3
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 50
24120: PUSH
24121: EMPTY
24122: LIST
24123: PUSH
24124: LD_INT 2
24126: PUSH
24127: LD_INT 30
24129: PUSH
24130: LD_INT 4
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 30
24139: PUSH
24140: LD_INT 5
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 30
24149: PUSH
24150: LD_INT 32
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 30
24159: PUSH
24160: LD_INT 31
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: LIST
24178: PPUSH
24179: CALL_OW 70
24183: ST_TO_ADDR
// if not tmp then
24184: LD_VAR 0 4
24188: NOT
24189: IFFALSE 24193
// exit ;
24191: GO 24322
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
24193: LD_ADDR_VAR 0 5
24197: PUSH
24198: LD_VAR 0 2
24202: PPUSH
24203: LD_VAR 0 4
24207: PPUSH
24208: LD_INT 1
24210: PPUSH
24211: LD_INT 1
24213: PPUSH
24214: CALL 30229 0 4
24218: PUSH
24219: FOR_IN
24220: IFFALSE 24320
// begin case GetBType ( b ) of b_armoury , b_barracks :
24222: LD_VAR 0 5
24226: PPUSH
24227: CALL_OW 266
24231: PUSH
24232: LD_INT 4
24234: DOUBLE
24235: EQUAL
24236: IFTRUE 24246
24238: LD_INT 5
24240: DOUBLE
24241: EQUAL
24242: IFTRUE 24246
24244: GO 24257
24246: POP
// p := 6 ; b_breastwork , b_bunker :
24247: LD_ADDR_VAR 0 3
24251: PUSH
24252: LD_INT 6
24254: ST_TO_ADDR
24255: GO 24283
24257: LD_INT 31
24259: DOUBLE
24260: EQUAL
24261: IFTRUE 24271
24263: LD_INT 32
24265: DOUBLE
24266: EQUAL
24267: IFTRUE 24271
24269: GO 24282
24271: POP
// p := 1 ; end ;
24272: LD_ADDR_VAR 0 3
24276: PUSH
24277: LD_INT 1
24279: ST_TO_ADDR
24280: GO 24283
24282: POP
// if UnitsInside ( b ) < p then
24283: LD_VAR 0 5
24287: PPUSH
24288: CALL_OW 313
24292: PUSH
24293: LD_VAR 0 3
24297: LESS
24298: IFFALSE 24318
// begin ComEnterUnit ( un , b ) ;
24300: LD_VAR 0 2
24304: PPUSH
24305: LD_VAR 0 5
24309: PPUSH
24310: CALL_OW 120
// exit ;
24314: POP
24315: POP
24316: GO 24322
// end ; end ;
24318: GO 24219
24320: POP
24321: POP
// end ; end ;
24322: PPOPN 5
24324: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
24325: LD_VAR 0 1
24329: PUSH
24330: LD_INT 2
24332: EQUAL
24333: PUSH
24334: LD_VAR 0 2
24338: PUSH
24339: LD_INT 5
24341: PUSH
24342: LD_INT 8
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: IN
24349: AND
24350: IFFALSE 24359
// YouLost ( FriendlyFire ) ;
24352: LD_STRING FriendlyFire
24354: PPUSH
24355: CALL_OW 104
// end ;
24359: PPOPN 2
24361: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
24362: LD_VAR 0 1
24366: PPUSH
24367: CALL_OW 255
24371: PUSH
24372: LD_INT 8
24374: EQUAL
24375: PUSH
24376: LD_VAR 0 1
24380: PPUSH
24381: CALL_OW 266
24385: PUSH
24386: LD_INT 5
24388: EQUAL
24389: AND
24390: IFFALSE 24404
// SetClass ( unit , class_mortar ) ;
24392: LD_VAR 0 2
24396: PPUSH
24397: LD_INT 8
24399: PPUSH
24400: CALL_OW 336
// end ; end_of_file
24404: PPOPN 2
24406: END
// every 0 0$30 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 300 , 250 , 200 ] [ Difficulty ] do
24407: LD_INT 6
24409: PPUSH
24410: LD_INT 1
24412: PPUSH
24413: CALL_OW 287
24417: PUSH
24418: LD_INT 300
24420: PUSH
24421: LD_INT 250
24423: PUSH
24424: LD_INT 200
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: LIST
24431: PUSH
24432: LD_OWVAR 67
24436: ARRAY
24437: LESS
24438: IFFALSE 24465
24440: GO 24442
24442: DISABLE
// begin enable ;
24443: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
24444: LD_INT 1
24446: PPUSH
24447: LD_INT 5
24449: PPUSH
24450: CALL_OW 12
24454: PPUSH
24455: LD_INT 6
24457: PPUSH
24458: LD_INT 1
24460: PPUSH
24461: CALL_OW 55
// end ; end_of_file
24465: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
24466: LD_EXP 18
24470: PUSH
24471: LD_EXP 20
24475: AND
24476: PUSH
24477: LD_EXP 17
24481: PUSH
24482: LD_EXP 19
24486: AND
24487: OR
24488: IFFALSE 24807
24490: GO 24492
24492: DISABLE
// begin enable ;
24493: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
24494: LD_EXP 18
24498: PUSH
24499: LD_EXP 20
24503: AND
24504: PUSH
24505: LD_EXP 17
24509: PUSH
24510: LD_EXP 19
24514: AND
24515: AND
24516: IFFALSE 24653
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
24518: LD_ADDR_OWVAR 47
24522: PUSH
24523: LD_STRING #X106-1a
24525: PUSH
24526: LD_EXP 21
24530: PUSH
24531: LD_INT 16
24533: PPUSH
24534: LD_INT 22
24536: PUSH
24537: LD_INT 2
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 21
24546: PUSH
24547: LD_INT 2
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 33
24556: PUSH
24557: LD_INT 1
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 58
24566: PUSH
24567: EMPTY
24568: LIST
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: PPUSH
24576: CALL_OW 70
24580: MINUS
24581: PPUSH
24582: CALL 63522 0 1
24586: PUSH
24587: LD_STRING #X106-3a
24589: PUSH
24590: LD_EXP 20
24594: PUSH
24595: LD_STRING #X106-1
24597: PUSH
24598: LD_EXP 47
24602: PUSH
24603: LD_INT 0
24605: PLUS
24606: PUSH
24607: LD_EXP 47
24611: PPUSH
24612: LD_INT 55
24614: PUSH
24615: EMPTY
24616: LIST
24617: PPUSH
24618: CALL_OW 72
24622: PUSH
24623: LD_INT 0
24625: PLUS
24626: MINUS
24627: PPUSH
24628: CALL 63522 0 1
24632: PUSH
24633: LD_STRING #X106-3
24635: PUSH
24636: LD_EXP 19
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: ST_TO_ADDR
// end else
24651: GO 24807
// if omarWantVehicles and omarWaitingForVehiclesTimer then
24653: LD_EXP 18
24657: PUSH
24658: LD_EXP 20
24662: AND
24663: IFFALSE 24750
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
24665: LD_ADDR_OWVAR 47
24669: PUSH
24670: LD_STRING #X106-1a
24672: PUSH
24673: LD_EXP 21
24677: PUSH
24678: LD_INT 16
24680: PPUSH
24681: LD_INT 22
24683: PUSH
24684: LD_INT 2
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 21
24693: PUSH
24694: LD_INT 2
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 33
24703: PUSH
24704: LD_INT 1
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 58
24713: PUSH
24714: EMPTY
24715: LIST
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: PPUSH
24723: CALL_OW 70
24727: MINUS
24728: PPUSH
24729: CALL 63522 0 1
24733: PUSH
24734: LD_STRING #X106-3a
24736: PUSH
24737: LD_EXP 20
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: ST_TO_ADDR
// end else
24748: GO 24807
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
24750: LD_ADDR_OWVAR 47
24754: PUSH
24755: LD_STRING #X106-1
24757: PUSH
24758: LD_EXP 47
24762: PUSH
24763: LD_INT 0
24765: PLUS
24766: PUSH
24767: LD_EXP 47
24771: PPUSH
24772: LD_INT 55
24774: PUSH
24775: EMPTY
24776: LIST
24777: PPUSH
24778: CALL_OW 72
24782: PUSH
24783: LD_INT 0
24785: PLUS
24786: MINUS
24787: PPUSH
24788: CALL 63522 0 1
24792: PUSH
24793: LD_STRING #X106-3
24795: PUSH
24796: LD_EXP 19
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: ST_TO_ADDR
// end ; end ; end_of_file
24807: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24808: LD_INT 0
24810: PPUSH
24811: PPUSH
// if exist_mode then
24812: LD_VAR 0 2
24816: IFFALSE 24841
// unit := CreateCharacter ( prefix & ident ) else
24818: LD_ADDR_VAR 0 5
24822: PUSH
24823: LD_VAR 0 3
24827: PUSH
24828: LD_VAR 0 1
24832: STR
24833: PPUSH
24834: CALL_OW 34
24838: ST_TO_ADDR
24839: GO 24856
// unit := NewCharacter ( ident ) ;
24841: LD_ADDR_VAR 0 5
24845: PUSH
24846: LD_VAR 0 1
24850: PPUSH
24851: CALL_OW 25
24855: ST_TO_ADDR
// result := unit ;
24856: LD_ADDR_VAR 0 4
24860: PUSH
24861: LD_VAR 0 5
24865: ST_TO_ADDR
// end ;
24866: LD_VAR 0 4
24870: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24871: LD_INT 0
24873: PPUSH
24874: PPUSH
// if not side or not nation then
24875: LD_VAR 0 1
24879: NOT
24880: PUSH
24881: LD_VAR 0 2
24885: NOT
24886: OR
24887: IFFALSE 24891
// exit ;
24889: GO 25659
// case nation of nation_american :
24891: LD_VAR 0 2
24895: PUSH
24896: LD_INT 1
24898: DOUBLE
24899: EQUAL
24900: IFTRUE 24904
24902: GO 25118
24904: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24905: LD_ADDR_VAR 0 4
24909: PUSH
24910: LD_INT 35
24912: PUSH
24913: LD_INT 45
24915: PUSH
24916: LD_INT 46
24918: PUSH
24919: LD_INT 47
24921: PUSH
24922: LD_INT 82
24924: PUSH
24925: LD_INT 83
24927: PUSH
24928: LD_INT 84
24930: PUSH
24931: LD_INT 85
24933: PUSH
24934: LD_INT 86
24936: PUSH
24937: LD_INT 1
24939: PUSH
24940: LD_INT 2
24942: PUSH
24943: LD_INT 6
24945: PUSH
24946: LD_INT 15
24948: PUSH
24949: LD_INT 16
24951: PUSH
24952: LD_INT 7
24954: PUSH
24955: LD_INT 12
24957: PUSH
24958: LD_INT 13
24960: PUSH
24961: LD_INT 10
24963: PUSH
24964: LD_INT 14
24966: PUSH
24967: LD_INT 20
24969: PUSH
24970: LD_INT 21
24972: PUSH
24973: LD_INT 22
24975: PUSH
24976: LD_INT 25
24978: PUSH
24979: LD_INT 32
24981: PUSH
24982: LD_INT 27
24984: PUSH
24985: LD_INT 36
24987: PUSH
24988: LD_INT 69
24990: PUSH
24991: LD_INT 39
24993: PUSH
24994: LD_INT 34
24996: PUSH
24997: LD_INT 40
24999: PUSH
25000: LD_INT 48
25002: PUSH
25003: LD_INT 49
25005: PUSH
25006: LD_INT 50
25008: PUSH
25009: LD_INT 51
25011: PUSH
25012: LD_INT 52
25014: PUSH
25015: LD_INT 53
25017: PUSH
25018: LD_INT 54
25020: PUSH
25021: LD_INT 55
25023: PUSH
25024: LD_INT 56
25026: PUSH
25027: LD_INT 57
25029: PUSH
25030: LD_INT 58
25032: PUSH
25033: LD_INT 59
25035: PUSH
25036: LD_INT 60
25038: PUSH
25039: LD_INT 61
25041: PUSH
25042: LD_INT 62
25044: PUSH
25045: LD_INT 80
25047: PUSH
25048: LD_INT 82
25050: PUSH
25051: LD_INT 83
25053: PUSH
25054: LD_INT 84
25056: PUSH
25057: LD_INT 85
25059: PUSH
25060: LD_INT 86
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: ST_TO_ADDR
25116: GO 25583
25118: LD_INT 2
25120: DOUBLE
25121: EQUAL
25122: IFTRUE 25126
25124: GO 25352
25126: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25127: LD_ADDR_VAR 0 4
25131: PUSH
25132: LD_INT 35
25134: PUSH
25135: LD_INT 45
25137: PUSH
25138: LD_INT 46
25140: PUSH
25141: LD_INT 47
25143: PUSH
25144: LD_INT 82
25146: PUSH
25147: LD_INT 83
25149: PUSH
25150: LD_INT 84
25152: PUSH
25153: LD_INT 85
25155: PUSH
25156: LD_INT 87
25158: PUSH
25159: LD_INT 70
25161: PUSH
25162: LD_INT 1
25164: PUSH
25165: LD_INT 11
25167: PUSH
25168: LD_INT 3
25170: PUSH
25171: LD_INT 4
25173: PUSH
25174: LD_INT 5
25176: PUSH
25177: LD_INT 6
25179: PUSH
25180: LD_INT 15
25182: PUSH
25183: LD_INT 18
25185: PUSH
25186: LD_INT 7
25188: PUSH
25189: LD_INT 17
25191: PUSH
25192: LD_INT 8
25194: PUSH
25195: LD_INT 20
25197: PUSH
25198: LD_INT 21
25200: PUSH
25201: LD_INT 22
25203: PUSH
25204: LD_INT 72
25206: PUSH
25207: LD_INT 26
25209: PUSH
25210: LD_INT 69
25212: PUSH
25213: LD_INT 39
25215: PUSH
25216: LD_INT 40
25218: PUSH
25219: LD_INT 41
25221: PUSH
25222: LD_INT 42
25224: PUSH
25225: LD_INT 43
25227: PUSH
25228: LD_INT 48
25230: PUSH
25231: LD_INT 49
25233: PUSH
25234: LD_INT 50
25236: PUSH
25237: LD_INT 51
25239: PUSH
25240: LD_INT 52
25242: PUSH
25243: LD_INT 53
25245: PUSH
25246: LD_INT 54
25248: PUSH
25249: LD_INT 55
25251: PUSH
25252: LD_INT 56
25254: PUSH
25255: LD_INT 60
25257: PUSH
25258: LD_INT 61
25260: PUSH
25261: LD_INT 62
25263: PUSH
25264: LD_INT 66
25266: PUSH
25267: LD_INT 67
25269: PUSH
25270: LD_INT 68
25272: PUSH
25273: LD_INT 81
25275: PUSH
25276: LD_INT 82
25278: PUSH
25279: LD_INT 83
25281: PUSH
25282: LD_INT 84
25284: PUSH
25285: LD_INT 85
25287: PUSH
25288: LD_INT 87
25290: PUSH
25291: LD_INT 88
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: ST_TO_ADDR
25350: GO 25583
25352: LD_INT 3
25354: DOUBLE
25355: EQUAL
25356: IFTRUE 25360
25358: GO 25582
25360: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25361: LD_ADDR_VAR 0 4
25365: PUSH
25366: LD_INT 46
25368: PUSH
25369: LD_INT 47
25371: PUSH
25372: LD_INT 1
25374: PUSH
25375: LD_INT 2
25377: PUSH
25378: LD_INT 82
25380: PUSH
25381: LD_INT 83
25383: PUSH
25384: LD_INT 84
25386: PUSH
25387: LD_INT 85
25389: PUSH
25390: LD_INT 86
25392: PUSH
25393: LD_INT 11
25395: PUSH
25396: LD_INT 9
25398: PUSH
25399: LD_INT 20
25401: PUSH
25402: LD_INT 19
25404: PUSH
25405: LD_INT 21
25407: PUSH
25408: LD_INT 24
25410: PUSH
25411: LD_INT 22
25413: PUSH
25414: LD_INT 25
25416: PUSH
25417: LD_INT 28
25419: PUSH
25420: LD_INT 29
25422: PUSH
25423: LD_INT 30
25425: PUSH
25426: LD_INT 31
25428: PUSH
25429: LD_INT 37
25431: PUSH
25432: LD_INT 38
25434: PUSH
25435: LD_INT 32
25437: PUSH
25438: LD_INT 27
25440: PUSH
25441: LD_INT 33
25443: PUSH
25444: LD_INT 69
25446: PUSH
25447: LD_INT 39
25449: PUSH
25450: LD_INT 34
25452: PUSH
25453: LD_INT 40
25455: PUSH
25456: LD_INT 71
25458: PUSH
25459: LD_INT 23
25461: PUSH
25462: LD_INT 44
25464: PUSH
25465: LD_INT 48
25467: PUSH
25468: LD_INT 49
25470: PUSH
25471: LD_INT 50
25473: PUSH
25474: LD_INT 51
25476: PUSH
25477: LD_INT 52
25479: PUSH
25480: LD_INT 53
25482: PUSH
25483: LD_INT 54
25485: PUSH
25486: LD_INT 55
25488: PUSH
25489: LD_INT 56
25491: PUSH
25492: LD_INT 57
25494: PUSH
25495: LD_INT 58
25497: PUSH
25498: LD_INT 59
25500: PUSH
25501: LD_INT 63
25503: PUSH
25504: LD_INT 64
25506: PUSH
25507: LD_INT 65
25509: PUSH
25510: LD_INT 82
25512: PUSH
25513: LD_INT 83
25515: PUSH
25516: LD_INT 84
25518: PUSH
25519: LD_INT 85
25521: PUSH
25522: LD_INT 86
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: ST_TO_ADDR
25580: GO 25583
25582: POP
// if state > - 1 and state < 3 then
25583: LD_VAR 0 3
25587: PUSH
25588: LD_INT 1
25590: NEG
25591: GREATER
25592: PUSH
25593: LD_VAR 0 3
25597: PUSH
25598: LD_INT 3
25600: LESS
25601: AND
25602: IFFALSE 25659
// for i in result do
25604: LD_ADDR_VAR 0 5
25608: PUSH
25609: LD_VAR 0 4
25613: PUSH
25614: FOR_IN
25615: IFFALSE 25657
// if GetTech ( i , side ) <> state then
25617: LD_VAR 0 5
25621: PPUSH
25622: LD_VAR 0 1
25626: PPUSH
25627: CALL_OW 321
25631: PUSH
25632: LD_VAR 0 3
25636: NONEQUAL
25637: IFFALSE 25655
// result := result diff i ;
25639: LD_ADDR_VAR 0 4
25643: PUSH
25644: LD_VAR 0 4
25648: PUSH
25649: LD_VAR 0 5
25653: DIFF
25654: ST_TO_ADDR
25655: GO 25614
25657: POP
25658: POP
// end ;
25659: LD_VAR 0 4
25663: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25664: LD_INT 0
25666: PPUSH
25667: PPUSH
25668: PPUSH
// result := true ;
25669: LD_ADDR_VAR 0 3
25673: PUSH
25674: LD_INT 1
25676: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25677: LD_ADDR_VAR 0 5
25681: PUSH
25682: LD_VAR 0 2
25686: PPUSH
25687: CALL_OW 480
25691: ST_TO_ADDR
// if not tmp then
25692: LD_VAR 0 5
25696: NOT
25697: IFFALSE 25701
// exit ;
25699: GO 25750
// for i in tmp do
25701: LD_ADDR_VAR 0 4
25705: PUSH
25706: LD_VAR 0 5
25710: PUSH
25711: FOR_IN
25712: IFFALSE 25748
// if GetTech ( i , side ) <> state_researched then
25714: LD_VAR 0 4
25718: PPUSH
25719: LD_VAR 0 1
25723: PPUSH
25724: CALL_OW 321
25728: PUSH
25729: LD_INT 2
25731: NONEQUAL
25732: IFFALSE 25746
// begin result := false ;
25734: LD_ADDR_VAR 0 3
25738: PUSH
25739: LD_INT 0
25741: ST_TO_ADDR
// exit ;
25742: POP
25743: POP
25744: GO 25750
// end ;
25746: GO 25711
25748: POP
25749: POP
// end ;
25750: LD_VAR 0 3
25754: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25755: LD_INT 0
25757: PPUSH
25758: PPUSH
25759: PPUSH
25760: PPUSH
25761: PPUSH
25762: PPUSH
25763: PPUSH
25764: PPUSH
25765: PPUSH
25766: PPUSH
25767: PPUSH
25768: PPUSH
25769: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25770: LD_VAR 0 1
25774: NOT
25775: PUSH
25776: LD_VAR 0 1
25780: PPUSH
25781: CALL_OW 257
25785: PUSH
25786: LD_INT 9
25788: NONEQUAL
25789: OR
25790: IFFALSE 25794
// exit ;
25792: GO 26367
// side := GetSide ( unit ) ;
25794: LD_ADDR_VAR 0 9
25798: PUSH
25799: LD_VAR 0 1
25803: PPUSH
25804: CALL_OW 255
25808: ST_TO_ADDR
// tech_space := tech_spacanom ;
25809: LD_ADDR_VAR 0 12
25813: PUSH
25814: LD_INT 29
25816: ST_TO_ADDR
// tech_time := tech_taurad ;
25817: LD_ADDR_VAR 0 13
25821: PUSH
25822: LD_INT 28
25824: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25825: LD_ADDR_VAR 0 11
25829: PUSH
25830: LD_VAR 0 1
25834: PPUSH
25835: CALL_OW 310
25839: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25840: LD_VAR 0 11
25844: PPUSH
25845: CALL_OW 247
25849: PUSH
25850: LD_INT 2
25852: EQUAL
25853: IFFALSE 25857
// exit ;
25855: GO 26367
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25857: LD_ADDR_VAR 0 8
25861: PUSH
25862: LD_INT 81
25864: PUSH
25865: LD_VAR 0 9
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 3
25876: PUSH
25877: LD_INT 21
25879: PUSH
25880: LD_INT 3
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PPUSH
25895: CALL_OW 69
25899: ST_TO_ADDR
// if not tmp then
25900: LD_VAR 0 8
25904: NOT
25905: IFFALSE 25909
// exit ;
25907: GO 26367
// if in_unit then
25909: LD_VAR 0 11
25913: IFFALSE 25937
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25915: LD_ADDR_VAR 0 10
25919: PUSH
25920: LD_VAR 0 8
25924: PPUSH
25925: LD_VAR 0 11
25929: PPUSH
25930: CALL_OW 74
25934: ST_TO_ADDR
25935: GO 25957
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25937: LD_ADDR_VAR 0 10
25941: PUSH
25942: LD_VAR 0 8
25946: PPUSH
25947: LD_VAR 0 1
25951: PPUSH
25952: CALL_OW 74
25956: ST_TO_ADDR
// if not enemy then
25957: LD_VAR 0 10
25961: NOT
25962: IFFALSE 25966
// exit ;
25964: GO 26367
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25966: LD_VAR 0 11
25970: PUSH
25971: LD_VAR 0 11
25975: PPUSH
25976: LD_VAR 0 10
25980: PPUSH
25981: CALL_OW 296
25985: PUSH
25986: LD_INT 13
25988: GREATER
25989: AND
25990: PUSH
25991: LD_VAR 0 1
25995: PPUSH
25996: LD_VAR 0 10
26000: PPUSH
26001: CALL_OW 296
26005: PUSH
26006: LD_INT 12
26008: GREATER
26009: OR
26010: IFFALSE 26014
// exit ;
26012: GO 26367
// missile := [ 1 ] ;
26014: LD_ADDR_VAR 0 14
26018: PUSH
26019: LD_INT 1
26021: PUSH
26022: EMPTY
26023: LIST
26024: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26025: LD_VAR 0 9
26029: PPUSH
26030: LD_VAR 0 12
26034: PPUSH
26035: CALL_OW 325
26039: IFFALSE 26068
// missile := Insert ( missile , missile + 1 , 2 ) ;
26041: LD_ADDR_VAR 0 14
26045: PUSH
26046: LD_VAR 0 14
26050: PPUSH
26051: LD_VAR 0 14
26055: PUSH
26056: LD_INT 1
26058: PLUS
26059: PPUSH
26060: LD_INT 2
26062: PPUSH
26063: CALL_OW 2
26067: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26068: LD_VAR 0 9
26072: PPUSH
26073: LD_VAR 0 13
26077: PPUSH
26078: CALL_OW 325
26082: PUSH
26083: LD_VAR 0 10
26087: PPUSH
26088: CALL_OW 255
26092: PPUSH
26093: LD_VAR 0 13
26097: PPUSH
26098: CALL_OW 325
26102: NOT
26103: AND
26104: IFFALSE 26133
// missile := Insert ( missile , missile + 1 , 3 ) ;
26106: LD_ADDR_VAR 0 14
26110: PUSH
26111: LD_VAR 0 14
26115: PPUSH
26116: LD_VAR 0 14
26120: PUSH
26121: LD_INT 1
26123: PLUS
26124: PPUSH
26125: LD_INT 3
26127: PPUSH
26128: CALL_OW 2
26132: ST_TO_ADDR
// if missile < 2 then
26133: LD_VAR 0 14
26137: PUSH
26138: LD_INT 2
26140: LESS
26141: IFFALSE 26145
// exit ;
26143: GO 26367
// x := GetX ( enemy ) ;
26145: LD_ADDR_VAR 0 4
26149: PUSH
26150: LD_VAR 0 10
26154: PPUSH
26155: CALL_OW 250
26159: ST_TO_ADDR
// y := GetY ( enemy ) ;
26160: LD_ADDR_VAR 0 5
26164: PUSH
26165: LD_VAR 0 10
26169: PPUSH
26170: CALL_OW 251
26174: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26175: LD_ADDR_VAR 0 6
26179: PUSH
26180: LD_VAR 0 4
26184: PUSH
26185: LD_INT 1
26187: NEG
26188: PPUSH
26189: LD_INT 1
26191: PPUSH
26192: CALL_OW 12
26196: PLUS
26197: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26198: LD_ADDR_VAR 0 7
26202: PUSH
26203: LD_VAR 0 5
26207: PUSH
26208: LD_INT 1
26210: NEG
26211: PPUSH
26212: LD_INT 1
26214: PPUSH
26215: CALL_OW 12
26219: PLUS
26220: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26221: LD_VAR 0 6
26225: PPUSH
26226: LD_VAR 0 7
26230: PPUSH
26231: CALL_OW 488
26235: NOT
26236: IFFALSE 26258
// begin _x := x ;
26238: LD_ADDR_VAR 0 6
26242: PUSH
26243: LD_VAR 0 4
26247: ST_TO_ADDR
// _y := y ;
26248: LD_ADDR_VAR 0 7
26252: PUSH
26253: LD_VAR 0 5
26257: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26258: LD_ADDR_VAR 0 3
26262: PUSH
26263: LD_INT 1
26265: PPUSH
26266: LD_VAR 0 14
26270: PPUSH
26271: CALL_OW 12
26275: ST_TO_ADDR
// case i of 1 :
26276: LD_VAR 0 3
26280: PUSH
26281: LD_INT 1
26283: DOUBLE
26284: EQUAL
26285: IFTRUE 26289
26287: GO 26306
26289: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26290: LD_VAR 0 1
26294: PPUSH
26295: LD_VAR 0 10
26299: PPUSH
26300: CALL_OW 115
26304: GO 26367
26306: LD_INT 2
26308: DOUBLE
26309: EQUAL
26310: IFTRUE 26314
26312: GO 26336
26314: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26315: LD_VAR 0 1
26319: PPUSH
26320: LD_VAR 0 6
26324: PPUSH
26325: LD_VAR 0 7
26329: PPUSH
26330: CALL_OW 153
26334: GO 26367
26336: LD_INT 3
26338: DOUBLE
26339: EQUAL
26340: IFTRUE 26344
26342: GO 26366
26344: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26345: LD_VAR 0 1
26349: PPUSH
26350: LD_VAR 0 6
26354: PPUSH
26355: LD_VAR 0 7
26359: PPUSH
26360: CALL_OW 154
26364: GO 26367
26366: POP
// end ;
26367: LD_VAR 0 2
26371: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26372: LD_INT 0
26374: PPUSH
26375: PPUSH
26376: PPUSH
26377: PPUSH
26378: PPUSH
26379: PPUSH
// if not unit or not building then
26380: LD_VAR 0 1
26384: NOT
26385: PUSH
26386: LD_VAR 0 2
26390: NOT
26391: OR
26392: IFFALSE 26396
// exit ;
26394: GO 26554
// x := GetX ( building ) ;
26396: LD_ADDR_VAR 0 5
26400: PUSH
26401: LD_VAR 0 2
26405: PPUSH
26406: CALL_OW 250
26410: ST_TO_ADDR
// y := GetY ( building ) ;
26411: LD_ADDR_VAR 0 6
26415: PUSH
26416: LD_VAR 0 2
26420: PPUSH
26421: CALL_OW 251
26425: ST_TO_ADDR
// for i = 0 to 5 do
26426: LD_ADDR_VAR 0 4
26430: PUSH
26431: DOUBLE
26432: LD_INT 0
26434: DEC
26435: ST_TO_ADDR
26436: LD_INT 5
26438: PUSH
26439: FOR_TO
26440: IFFALSE 26552
// begin _x := ShiftX ( x , i , 3 ) ;
26442: LD_ADDR_VAR 0 7
26446: PUSH
26447: LD_VAR 0 5
26451: PPUSH
26452: LD_VAR 0 4
26456: PPUSH
26457: LD_INT 3
26459: PPUSH
26460: CALL_OW 272
26464: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26465: LD_ADDR_VAR 0 8
26469: PUSH
26470: LD_VAR 0 6
26474: PPUSH
26475: LD_VAR 0 4
26479: PPUSH
26480: LD_INT 3
26482: PPUSH
26483: CALL_OW 273
26487: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26488: LD_VAR 0 7
26492: PPUSH
26493: LD_VAR 0 8
26497: PPUSH
26498: CALL_OW 488
26502: NOT
26503: IFFALSE 26507
// continue ;
26505: GO 26439
// if HexInfo ( _x , _y ) = 0 then
26507: LD_VAR 0 7
26511: PPUSH
26512: LD_VAR 0 8
26516: PPUSH
26517: CALL_OW 428
26521: PUSH
26522: LD_INT 0
26524: EQUAL
26525: IFFALSE 26550
// begin ComMoveXY ( unit , _x , _y ) ;
26527: LD_VAR 0 1
26531: PPUSH
26532: LD_VAR 0 7
26536: PPUSH
26537: LD_VAR 0 8
26541: PPUSH
26542: CALL_OW 111
// exit ;
26546: POP
26547: POP
26548: GO 26554
// end ; end ;
26550: GO 26439
26552: POP
26553: POP
// end ;
26554: LD_VAR 0 3
26558: RET
// export function ScanBase ( side , base_area ) ; begin
26559: LD_INT 0
26561: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26562: LD_ADDR_VAR 0 3
26566: PUSH
26567: LD_VAR 0 2
26571: PPUSH
26572: LD_INT 81
26574: PUSH
26575: LD_VAR 0 1
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PPUSH
26584: CALL_OW 70
26588: ST_TO_ADDR
// end ;
26589: LD_VAR 0 3
26593: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26594: LD_INT 0
26596: PPUSH
26597: PPUSH
26598: PPUSH
26599: PPUSH
// result := false ;
26600: LD_ADDR_VAR 0 2
26604: PUSH
26605: LD_INT 0
26607: ST_TO_ADDR
// side := GetSide ( unit ) ;
26608: LD_ADDR_VAR 0 3
26612: PUSH
26613: LD_VAR 0 1
26617: PPUSH
26618: CALL_OW 255
26622: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26623: LD_ADDR_VAR 0 4
26627: PUSH
26628: LD_VAR 0 1
26632: PPUSH
26633: CALL_OW 248
26637: ST_TO_ADDR
// case nat of 1 :
26638: LD_VAR 0 4
26642: PUSH
26643: LD_INT 1
26645: DOUBLE
26646: EQUAL
26647: IFTRUE 26651
26649: GO 26662
26651: POP
// tech := tech_lassight ; 2 :
26652: LD_ADDR_VAR 0 5
26656: PUSH
26657: LD_INT 12
26659: ST_TO_ADDR
26660: GO 26701
26662: LD_INT 2
26664: DOUBLE
26665: EQUAL
26666: IFTRUE 26670
26668: GO 26681
26670: POP
// tech := tech_mortar ; 3 :
26671: LD_ADDR_VAR 0 5
26675: PUSH
26676: LD_INT 41
26678: ST_TO_ADDR
26679: GO 26701
26681: LD_INT 3
26683: DOUBLE
26684: EQUAL
26685: IFTRUE 26689
26687: GO 26700
26689: POP
// tech := tech_bazooka ; end ;
26690: LD_ADDR_VAR 0 5
26694: PUSH
26695: LD_INT 44
26697: ST_TO_ADDR
26698: GO 26701
26700: POP
// if Researched ( side , tech ) then
26701: LD_VAR 0 3
26705: PPUSH
26706: LD_VAR 0 5
26710: PPUSH
26711: CALL_OW 325
26715: IFFALSE 26742
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26717: LD_ADDR_VAR 0 2
26721: PUSH
26722: LD_INT 5
26724: PUSH
26725: LD_INT 8
26727: PUSH
26728: LD_INT 9
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: LIST
26735: PUSH
26736: LD_VAR 0 4
26740: ARRAY
26741: ST_TO_ADDR
// end ;
26742: LD_VAR 0 2
26746: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26747: LD_INT 0
26749: PPUSH
26750: PPUSH
26751: PPUSH
// if not mines then
26752: LD_VAR 0 2
26756: NOT
26757: IFFALSE 26761
// exit ;
26759: GO 26905
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26761: LD_ADDR_VAR 0 5
26765: PUSH
26766: LD_INT 81
26768: PUSH
26769: LD_VAR 0 1
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 3
26780: PUSH
26781: LD_INT 21
26783: PUSH
26784: LD_INT 3
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PPUSH
26799: CALL_OW 69
26803: ST_TO_ADDR
// for i in mines do
26804: LD_ADDR_VAR 0 4
26808: PUSH
26809: LD_VAR 0 2
26813: PUSH
26814: FOR_IN
26815: IFFALSE 26903
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26817: LD_VAR 0 4
26821: PUSH
26822: LD_INT 1
26824: ARRAY
26825: PPUSH
26826: LD_VAR 0 4
26830: PUSH
26831: LD_INT 2
26833: ARRAY
26834: PPUSH
26835: CALL_OW 458
26839: NOT
26840: IFFALSE 26844
// continue ;
26842: GO 26814
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26844: LD_VAR 0 4
26848: PUSH
26849: LD_INT 1
26851: ARRAY
26852: PPUSH
26853: LD_VAR 0 4
26857: PUSH
26858: LD_INT 2
26860: ARRAY
26861: PPUSH
26862: CALL_OW 428
26866: PUSH
26867: LD_VAR 0 5
26871: IN
26872: IFFALSE 26901
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26874: LD_VAR 0 4
26878: PUSH
26879: LD_INT 1
26881: ARRAY
26882: PPUSH
26883: LD_VAR 0 4
26887: PUSH
26888: LD_INT 2
26890: ARRAY
26891: PPUSH
26892: LD_VAR 0 1
26896: PPUSH
26897: CALL_OW 456
// end ;
26901: GO 26814
26903: POP
26904: POP
// end ;
26905: LD_VAR 0 3
26909: RET
// export function Count ( array ) ; var i ; begin
26910: LD_INT 0
26912: PPUSH
26913: PPUSH
// result := 0 ;
26914: LD_ADDR_VAR 0 2
26918: PUSH
26919: LD_INT 0
26921: ST_TO_ADDR
// for i in array do
26922: LD_ADDR_VAR 0 3
26926: PUSH
26927: LD_VAR 0 1
26931: PUSH
26932: FOR_IN
26933: IFFALSE 26957
// if i then
26935: LD_VAR 0 3
26939: IFFALSE 26955
// result := result + 1 ;
26941: LD_ADDR_VAR 0 2
26945: PUSH
26946: LD_VAR 0 2
26950: PUSH
26951: LD_INT 1
26953: PLUS
26954: ST_TO_ADDR
26955: GO 26932
26957: POP
26958: POP
// end ;
26959: LD_VAR 0 2
26963: RET
// export function IsEmpty ( building ) ; begin
26964: LD_INT 0
26966: PPUSH
// if not building then
26967: LD_VAR 0 1
26971: NOT
26972: IFFALSE 26976
// exit ;
26974: GO 27019
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26976: LD_ADDR_VAR 0 2
26980: PUSH
26981: LD_VAR 0 1
26985: PUSH
26986: LD_INT 22
26988: PUSH
26989: LD_VAR 0 1
26993: PPUSH
26994: CALL_OW 255
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 58
27005: PUSH
27006: EMPTY
27007: LIST
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PPUSH
27013: CALL_OW 69
27017: IN
27018: ST_TO_ADDR
// end ;
27019: LD_VAR 0 2
27023: RET
// export function IsNotFull ( building ) ; begin
27024: LD_INT 0
27026: PPUSH
// if not building then
27027: LD_VAR 0 1
27031: NOT
27032: IFFALSE 27036
// exit ;
27034: GO 27055
// result := UnitsInside ( building ) < 6 ;
27036: LD_ADDR_VAR 0 2
27040: PUSH
27041: LD_VAR 0 1
27045: PPUSH
27046: CALL_OW 313
27050: PUSH
27051: LD_INT 6
27053: LESS
27054: ST_TO_ADDR
// end ;
27055: LD_VAR 0 2
27059: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27060: LD_INT 0
27062: PPUSH
27063: PPUSH
27064: PPUSH
27065: PPUSH
// tmp := [ ] ;
27066: LD_ADDR_VAR 0 3
27070: PUSH
27071: EMPTY
27072: ST_TO_ADDR
// list := [ ] ;
27073: LD_ADDR_VAR 0 5
27077: PUSH
27078: EMPTY
27079: ST_TO_ADDR
// for i = 16 to 25 do
27080: LD_ADDR_VAR 0 4
27084: PUSH
27085: DOUBLE
27086: LD_INT 16
27088: DEC
27089: ST_TO_ADDR
27090: LD_INT 25
27092: PUSH
27093: FOR_TO
27094: IFFALSE 27167
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27096: LD_ADDR_VAR 0 3
27100: PUSH
27101: LD_VAR 0 3
27105: PUSH
27106: LD_INT 22
27108: PUSH
27109: LD_VAR 0 1
27113: PPUSH
27114: CALL_OW 255
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 91
27125: PUSH
27126: LD_VAR 0 1
27130: PUSH
27131: LD_INT 6
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 30
27141: PUSH
27142: LD_VAR 0 4
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: LIST
27155: PUSH
27156: EMPTY
27157: LIST
27158: PPUSH
27159: CALL_OW 69
27163: ADD
27164: ST_TO_ADDR
27165: GO 27093
27167: POP
27168: POP
// for i = 1 to tmp do
27169: LD_ADDR_VAR 0 4
27173: PUSH
27174: DOUBLE
27175: LD_INT 1
27177: DEC
27178: ST_TO_ADDR
27179: LD_VAR 0 3
27183: PUSH
27184: FOR_TO
27185: IFFALSE 27273
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27187: LD_ADDR_VAR 0 5
27191: PUSH
27192: LD_VAR 0 5
27196: PUSH
27197: LD_VAR 0 3
27201: PUSH
27202: LD_VAR 0 4
27206: ARRAY
27207: PPUSH
27208: CALL_OW 266
27212: PUSH
27213: LD_VAR 0 3
27217: PUSH
27218: LD_VAR 0 4
27222: ARRAY
27223: PPUSH
27224: CALL_OW 250
27228: PUSH
27229: LD_VAR 0 3
27233: PUSH
27234: LD_VAR 0 4
27238: ARRAY
27239: PPUSH
27240: CALL_OW 251
27244: PUSH
27245: LD_VAR 0 3
27249: PUSH
27250: LD_VAR 0 4
27254: ARRAY
27255: PPUSH
27256: CALL_OW 254
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: PUSH
27267: EMPTY
27268: LIST
27269: ADD
27270: ST_TO_ADDR
27271: GO 27184
27273: POP
27274: POP
// result := list ;
27275: LD_ADDR_VAR 0 2
27279: PUSH
27280: LD_VAR 0 5
27284: ST_TO_ADDR
// end ;
27285: LD_VAR 0 2
27289: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27290: LD_INT 0
27292: PPUSH
27293: PPUSH
27294: PPUSH
27295: PPUSH
27296: PPUSH
27297: PPUSH
27298: PPUSH
// if not factory then
27299: LD_VAR 0 1
27303: NOT
27304: IFFALSE 27308
// exit ;
27306: GO 27901
// if control = control_apeman then
27308: LD_VAR 0 4
27312: PUSH
27313: LD_INT 5
27315: EQUAL
27316: IFFALSE 27425
// begin tmp := UnitsInside ( factory ) ;
27318: LD_ADDR_VAR 0 8
27322: PUSH
27323: LD_VAR 0 1
27327: PPUSH
27328: CALL_OW 313
27332: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27333: LD_VAR 0 8
27337: PPUSH
27338: LD_INT 25
27340: PUSH
27341: LD_INT 12
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PPUSH
27348: CALL_OW 72
27352: NOT
27353: IFFALSE 27363
// control := control_manual ;
27355: LD_ADDR_VAR 0 4
27359: PUSH
27360: LD_INT 1
27362: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27363: LD_ADDR_VAR 0 8
27367: PUSH
27368: LD_VAR 0 1
27372: PPUSH
27373: CALL 27060 0 1
27377: ST_TO_ADDR
// if tmp then
27378: LD_VAR 0 8
27382: IFFALSE 27425
// begin for i in tmp do
27384: LD_ADDR_VAR 0 7
27388: PUSH
27389: LD_VAR 0 8
27393: PUSH
27394: FOR_IN
27395: IFFALSE 27423
// if i [ 1 ] = b_ext_radio then
27397: LD_VAR 0 7
27401: PUSH
27402: LD_INT 1
27404: ARRAY
27405: PUSH
27406: LD_INT 22
27408: EQUAL
27409: IFFALSE 27421
// begin control := control_remote ;
27411: LD_ADDR_VAR 0 4
27415: PUSH
27416: LD_INT 2
27418: ST_TO_ADDR
// break ;
27419: GO 27423
// end ;
27421: GO 27394
27423: POP
27424: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27425: LD_VAR 0 1
27429: PPUSH
27430: LD_VAR 0 2
27434: PPUSH
27435: LD_VAR 0 3
27439: PPUSH
27440: LD_VAR 0 4
27444: PPUSH
27445: LD_VAR 0 5
27449: PPUSH
27450: CALL_OW 448
27454: IFFALSE 27489
// begin result := [ chassis , engine , control , weapon ] ;
27456: LD_ADDR_VAR 0 6
27460: PUSH
27461: LD_VAR 0 2
27465: PUSH
27466: LD_VAR 0 3
27470: PUSH
27471: LD_VAR 0 4
27475: PUSH
27476: LD_VAR 0 5
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: ST_TO_ADDR
// exit ;
27487: GO 27901
// end ; _chassis := AvailableChassisList ( factory ) ;
27489: LD_ADDR_VAR 0 9
27493: PUSH
27494: LD_VAR 0 1
27498: PPUSH
27499: CALL_OW 475
27503: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27504: LD_ADDR_VAR 0 11
27508: PUSH
27509: LD_VAR 0 1
27513: PPUSH
27514: CALL_OW 476
27518: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27519: LD_ADDR_VAR 0 12
27523: PUSH
27524: LD_VAR 0 1
27528: PPUSH
27529: CALL_OW 477
27533: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27534: LD_ADDR_VAR 0 10
27538: PUSH
27539: LD_VAR 0 1
27543: PPUSH
27544: CALL_OW 478
27548: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27549: LD_VAR 0 9
27553: NOT
27554: PUSH
27555: LD_VAR 0 11
27559: NOT
27560: OR
27561: PUSH
27562: LD_VAR 0 12
27566: NOT
27567: OR
27568: PUSH
27569: LD_VAR 0 10
27573: NOT
27574: OR
27575: IFFALSE 27610
// begin result := [ chassis , engine , control , weapon ] ;
27577: LD_ADDR_VAR 0 6
27581: PUSH
27582: LD_VAR 0 2
27586: PUSH
27587: LD_VAR 0 3
27591: PUSH
27592: LD_VAR 0 4
27596: PUSH
27597: LD_VAR 0 5
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: ST_TO_ADDR
// exit ;
27608: GO 27901
// end ; if not chassis in _chassis then
27610: LD_VAR 0 2
27614: PUSH
27615: LD_VAR 0 9
27619: IN
27620: NOT
27621: IFFALSE 27647
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27623: LD_ADDR_VAR 0 2
27627: PUSH
27628: LD_VAR 0 9
27632: PUSH
27633: LD_INT 1
27635: PPUSH
27636: LD_VAR 0 9
27640: PPUSH
27641: CALL_OW 12
27645: ARRAY
27646: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27647: LD_VAR 0 2
27651: PPUSH
27652: LD_VAR 0 3
27656: PPUSH
27657: CALL 27906 0 2
27661: NOT
27662: IFFALSE 27721
// repeat engine := _engine [ 1 ] ;
27664: LD_ADDR_VAR 0 3
27668: PUSH
27669: LD_VAR 0 11
27673: PUSH
27674: LD_INT 1
27676: ARRAY
27677: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27678: LD_ADDR_VAR 0 11
27682: PUSH
27683: LD_VAR 0 11
27687: PPUSH
27688: LD_INT 1
27690: PPUSH
27691: CALL_OW 3
27695: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27696: LD_VAR 0 2
27700: PPUSH
27701: LD_VAR 0 3
27705: PPUSH
27706: CALL 27906 0 2
27710: PUSH
27711: LD_VAR 0 11
27715: PUSH
27716: EMPTY
27717: EQUAL
27718: OR
27719: IFFALSE 27664
// if not control in _control then
27721: LD_VAR 0 4
27725: PUSH
27726: LD_VAR 0 12
27730: IN
27731: NOT
27732: IFFALSE 27758
// control := _control [ rand ( 1 , _control ) ] ;
27734: LD_ADDR_VAR 0 4
27738: PUSH
27739: LD_VAR 0 12
27743: PUSH
27744: LD_INT 1
27746: PPUSH
27747: LD_VAR 0 12
27751: PPUSH
27752: CALL_OW 12
27756: ARRAY
27757: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27758: LD_VAR 0 2
27762: PPUSH
27763: LD_VAR 0 5
27767: PPUSH
27768: CALL 28126 0 2
27772: NOT
27773: IFFALSE 27832
// repeat weapon := _weapon [ 1 ] ;
27775: LD_ADDR_VAR 0 5
27779: PUSH
27780: LD_VAR 0 10
27784: PUSH
27785: LD_INT 1
27787: ARRAY
27788: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27789: LD_ADDR_VAR 0 10
27793: PUSH
27794: LD_VAR 0 10
27798: PPUSH
27799: LD_INT 1
27801: PPUSH
27802: CALL_OW 3
27806: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27807: LD_VAR 0 2
27811: PPUSH
27812: LD_VAR 0 5
27816: PPUSH
27817: CALL 28126 0 2
27821: PUSH
27822: LD_VAR 0 10
27826: PUSH
27827: EMPTY
27828: EQUAL
27829: OR
27830: IFFALSE 27775
// result := [ ] ;
27832: LD_ADDR_VAR 0 6
27836: PUSH
27837: EMPTY
27838: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27839: LD_VAR 0 1
27843: PPUSH
27844: LD_VAR 0 2
27848: PPUSH
27849: LD_VAR 0 3
27853: PPUSH
27854: LD_VAR 0 4
27858: PPUSH
27859: LD_VAR 0 5
27863: PPUSH
27864: CALL_OW 448
27868: IFFALSE 27901
// result := [ chassis , engine , control , weapon ] ;
27870: LD_ADDR_VAR 0 6
27874: PUSH
27875: LD_VAR 0 2
27879: PUSH
27880: LD_VAR 0 3
27884: PUSH
27885: LD_VAR 0 4
27889: PUSH
27890: LD_VAR 0 5
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: ST_TO_ADDR
// end ;
27901: LD_VAR 0 6
27905: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27906: LD_INT 0
27908: PPUSH
// if not chassis or not engine then
27909: LD_VAR 0 1
27913: NOT
27914: PUSH
27915: LD_VAR 0 2
27919: NOT
27920: OR
27921: IFFALSE 27925
// exit ;
27923: GO 28121
// case engine of engine_solar :
27925: LD_VAR 0 2
27929: PUSH
27930: LD_INT 2
27932: DOUBLE
27933: EQUAL
27934: IFTRUE 27938
27936: GO 27976
27938: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27939: LD_ADDR_VAR 0 3
27943: PUSH
27944: LD_INT 11
27946: PUSH
27947: LD_INT 12
27949: PUSH
27950: LD_INT 13
27952: PUSH
27953: LD_INT 14
27955: PUSH
27956: LD_INT 1
27958: PUSH
27959: LD_INT 2
27961: PUSH
27962: LD_INT 3
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: ST_TO_ADDR
27974: GO 28105
27976: LD_INT 1
27978: DOUBLE
27979: EQUAL
27980: IFTRUE 27984
27982: GO 28046
27984: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27985: LD_ADDR_VAR 0 3
27989: PUSH
27990: LD_INT 11
27992: PUSH
27993: LD_INT 12
27995: PUSH
27996: LD_INT 13
27998: PUSH
27999: LD_INT 14
28001: PUSH
28002: LD_INT 1
28004: PUSH
28005: LD_INT 2
28007: PUSH
28008: LD_INT 3
28010: PUSH
28011: LD_INT 4
28013: PUSH
28014: LD_INT 5
28016: PUSH
28017: LD_INT 21
28019: PUSH
28020: LD_INT 23
28022: PUSH
28023: LD_INT 22
28025: PUSH
28026: LD_INT 24
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: ST_TO_ADDR
28044: GO 28105
28046: LD_INT 3
28048: DOUBLE
28049: EQUAL
28050: IFTRUE 28054
28052: GO 28104
28054: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28055: LD_ADDR_VAR 0 3
28059: PUSH
28060: LD_INT 13
28062: PUSH
28063: LD_INT 14
28065: PUSH
28066: LD_INT 2
28068: PUSH
28069: LD_INT 3
28071: PUSH
28072: LD_INT 4
28074: PUSH
28075: LD_INT 5
28077: PUSH
28078: LD_INT 21
28080: PUSH
28081: LD_INT 22
28083: PUSH
28084: LD_INT 23
28086: PUSH
28087: LD_INT 24
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: ST_TO_ADDR
28102: GO 28105
28104: POP
// result := ( chassis in result ) ;
28105: LD_ADDR_VAR 0 3
28109: PUSH
28110: LD_VAR 0 1
28114: PUSH
28115: LD_VAR 0 3
28119: IN
28120: ST_TO_ADDR
// end ;
28121: LD_VAR 0 3
28125: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28126: LD_INT 0
28128: PPUSH
// if not chassis or not weapon then
28129: LD_VAR 0 1
28133: NOT
28134: PUSH
28135: LD_VAR 0 2
28139: NOT
28140: OR
28141: IFFALSE 28145
// exit ;
28143: GO 29207
// case weapon of us_machine_gun :
28145: LD_VAR 0 2
28149: PUSH
28150: LD_INT 2
28152: DOUBLE
28153: EQUAL
28154: IFTRUE 28158
28156: GO 28188
28158: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28159: LD_ADDR_VAR 0 3
28163: PUSH
28164: LD_INT 1
28166: PUSH
28167: LD_INT 2
28169: PUSH
28170: LD_INT 3
28172: PUSH
28173: LD_INT 4
28175: PUSH
28176: LD_INT 5
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: ST_TO_ADDR
28186: GO 29191
28188: LD_INT 3
28190: DOUBLE
28191: EQUAL
28192: IFTRUE 28196
28194: GO 28226
28196: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28197: LD_ADDR_VAR 0 3
28201: PUSH
28202: LD_INT 1
28204: PUSH
28205: LD_INT 2
28207: PUSH
28208: LD_INT 3
28210: PUSH
28211: LD_INT 4
28213: PUSH
28214: LD_INT 5
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: ST_TO_ADDR
28224: GO 29191
28226: LD_INT 11
28228: DOUBLE
28229: EQUAL
28230: IFTRUE 28234
28232: GO 28264
28234: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28235: LD_ADDR_VAR 0 3
28239: PUSH
28240: LD_INT 1
28242: PUSH
28243: LD_INT 2
28245: PUSH
28246: LD_INT 3
28248: PUSH
28249: LD_INT 4
28251: PUSH
28252: LD_INT 5
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: ST_TO_ADDR
28262: GO 29191
28264: LD_INT 4
28266: DOUBLE
28267: EQUAL
28268: IFTRUE 28272
28270: GO 28298
28272: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28273: LD_ADDR_VAR 0 3
28277: PUSH
28278: LD_INT 2
28280: PUSH
28281: LD_INT 3
28283: PUSH
28284: LD_INT 4
28286: PUSH
28287: LD_INT 5
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: ST_TO_ADDR
28296: GO 29191
28298: LD_INT 5
28300: DOUBLE
28301: EQUAL
28302: IFTRUE 28306
28304: GO 28332
28306: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28307: LD_ADDR_VAR 0 3
28311: PUSH
28312: LD_INT 2
28314: PUSH
28315: LD_INT 3
28317: PUSH
28318: LD_INT 4
28320: PUSH
28321: LD_INT 5
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: ST_TO_ADDR
28330: GO 29191
28332: LD_INT 9
28334: DOUBLE
28335: EQUAL
28336: IFTRUE 28340
28338: GO 28366
28340: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28341: LD_ADDR_VAR 0 3
28345: PUSH
28346: LD_INT 2
28348: PUSH
28349: LD_INT 3
28351: PUSH
28352: LD_INT 4
28354: PUSH
28355: LD_INT 5
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: ST_TO_ADDR
28364: GO 29191
28366: LD_INT 7
28368: DOUBLE
28369: EQUAL
28370: IFTRUE 28374
28372: GO 28400
28374: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28375: LD_ADDR_VAR 0 3
28379: PUSH
28380: LD_INT 2
28382: PUSH
28383: LD_INT 3
28385: PUSH
28386: LD_INT 4
28388: PUSH
28389: LD_INT 5
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: ST_TO_ADDR
28398: GO 29191
28400: LD_INT 12
28402: DOUBLE
28403: EQUAL
28404: IFTRUE 28408
28406: GO 28434
28408: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28409: LD_ADDR_VAR 0 3
28413: PUSH
28414: LD_INT 2
28416: PUSH
28417: LD_INT 3
28419: PUSH
28420: LD_INT 4
28422: PUSH
28423: LD_INT 5
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: LIST
28430: LIST
28431: ST_TO_ADDR
28432: GO 29191
28434: LD_INT 13
28436: DOUBLE
28437: EQUAL
28438: IFTRUE 28442
28440: GO 28468
28442: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28443: LD_ADDR_VAR 0 3
28447: PUSH
28448: LD_INT 2
28450: PUSH
28451: LD_INT 3
28453: PUSH
28454: LD_INT 4
28456: PUSH
28457: LD_INT 5
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: ST_TO_ADDR
28466: GO 29191
28468: LD_INT 14
28470: DOUBLE
28471: EQUAL
28472: IFTRUE 28476
28474: GO 28494
28476: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28477: LD_ADDR_VAR 0 3
28481: PUSH
28482: LD_INT 4
28484: PUSH
28485: LD_INT 5
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: ST_TO_ADDR
28492: GO 29191
28494: LD_INT 6
28496: DOUBLE
28497: EQUAL
28498: IFTRUE 28502
28500: GO 28520
28502: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28503: LD_ADDR_VAR 0 3
28507: PUSH
28508: LD_INT 4
28510: PUSH
28511: LD_INT 5
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: ST_TO_ADDR
28518: GO 29191
28520: LD_INT 10
28522: DOUBLE
28523: EQUAL
28524: IFTRUE 28528
28526: GO 28546
28528: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28529: LD_ADDR_VAR 0 3
28533: PUSH
28534: LD_INT 4
28536: PUSH
28537: LD_INT 5
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: ST_TO_ADDR
28544: GO 29191
28546: LD_INT 22
28548: DOUBLE
28549: EQUAL
28550: IFTRUE 28554
28552: GO 28580
28554: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28555: LD_ADDR_VAR 0 3
28559: PUSH
28560: LD_INT 11
28562: PUSH
28563: LD_INT 12
28565: PUSH
28566: LD_INT 13
28568: PUSH
28569: LD_INT 14
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: ST_TO_ADDR
28578: GO 29191
28580: LD_INT 23
28582: DOUBLE
28583: EQUAL
28584: IFTRUE 28588
28586: GO 28614
28588: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28589: LD_ADDR_VAR 0 3
28593: PUSH
28594: LD_INT 11
28596: PUSH
28597: LD_INT 12
28599: PUSH
28600: LD_INT 13
28602: PUSH
28603: LD_INT 14
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: ST_TO_ADDR
28612: GO 29191
28614: LD_INT 24
28616: DOUBLE
28617: EQUAL
28618: IFTRUE 28622
28620: GO 28648
28622: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28623: LD_ADDR_VAR 0 3
28627: PUSH
28628: LD_INT 11
28630: PUSH
28631: LD_INT 12
28633: PUSH
28634: LD_INT 13
28636: PUSH
28637: LD_INT 14
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: ST_TO_ADDR
28646: GO 29191
28648: LD_INT 30
28650: DOUBLE
28651: EQUAL
28652: IFTRUE 28656
28654: GO 28682
28656: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28657: LD_ADDR_VAR 0 3
28661: PUSH
28662: LD_INT 11
28664: PUSH
28665: LD_INT 12
28667: PUSH
28668: LD_INT 13
28670: PUSH
28671: LD_INT 14
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: ST_TO_ADDR
28680: GO 29191
28682: LD_INT 25
28684: DOUBLE
28685: EQUAL
28686: IFTRUE 28690
28688: GO 28708
28690: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28691: LD_ADDR_VAR 0 3
28695: PUSH
28696: LD_INT 13
28698: PUSH
28699: LD_INT 14
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: ST_TO_ADDR
28706: GO 29191
28708: LD_INT 27
28710: DOUBLE
28711: EQUAL
28712: IFTRUE 28716
28714: GO 28734
28716: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28717: LD_ADDR_VAR 0 3
28721: PUSH
28722: LD_INT 13
28724: PUSH
28725: LD_INT 14
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: ST_TO_ADDR
28732: GO 29191
28734: LD_EXP 64
28738: DOUBLE
28739: EQUAL
28740: IFTRUE 28744
28742: GO 28770
28744: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28745: LD_ADDR_VAR 0 3
28749: PUSH
28750: LD_INT 11
28752: PUSH
28753: LD_INT 12
28755: PUSH
28756: LD_INT 13
28758: PUSH
28759: LD_INT 14
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: ST_TO_ADDR
28768: GO 29191
28770: LD_INT 28
28772: DOUBLE
28773: EQUAL
28774: IFTRUE 28778
28776: GO 28796
28778: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28779: LD_ADDR_VAR 0 3
28783: PUSH
28784: LD_INT 13
28786: PUSH
28787: LD_INT 14
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: ST_TO_ADDR
28794: GO 29191
28796: LD_INT 29
28798: DOUBLE
28799: EQUAL
28800: IFTRUE 28804
28802: GO 28822
28804: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28805: LD_ADDR_VAR 0 3
28809: PUSH
28810: LD_INT 13
28812: PUSH
28813: LD_INT 14
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: ST_TO_ADDR
28820: GO 29191
28822: LD_INT 31
28824: DOUBLE
28825: EQUAL
28826: IFTRUE 28830
28828: GO 28848
28830: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28831: LD_ADDR_VAR 0 3
28835: PUSH
28836: LD_INT 13
28838: PUSH
28839: LD_INT 14
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: ST_TO_ADDR
28846: GO 29191
28848: LD_INT 26
28850: DOUBLE
28851: EQUAL
28852: IFTRUE 28856
28854: GO 28874
28856: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28857: LD_ADDR_VAR 0 3
28861: PUSH
28862: LD_INT 13
28864: PUSH
28865: LD_INT 14
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: ST_TO_ADDR
28872: GO 29191
28874: LD_INT 42
28876: DOUBLE
28877: EQUAL
28878: IFTRUE 28882
28880: GO 28908
28882: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28883: LD_ADDR_VAR 0 3
28887: PUSH
28888: LD_INT 21
28890: PUSH
28891: LD_INT 22
28893: PUSH
28894: LD_INT 23
28896: PUSH
28897: LD_INT 24
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: ST_TO_ADDR
28906: GO 29191
28908: LD_INT 43
28910: DOUBLE
28911: EQUAL
28912: IFTRUE 28916
28914: GO 28942
28916: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28917: LD_ADDR_VAR 0 3
28921: PUSH
28922: LD_INT 21
28924: PUSH
28925: LD_INT 22
28927: PUSH
28928: LD_INT 23
28930: PUSH
28931: LD_INT 24
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: ST_TO_ADDR
28940: GO 29191
28942: LD_INT 44
28944: DOUBLE
28945: EQUAL
28946: IFTRUE 28950
28948: GO 28976
28950: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28951: LD_ADDR_VAR 0 3
28955: PUSH
28956: LD_INT 21
28958: PUSH
28959: LD_INT 22
28961: PUSH
28962: LD_INT 23
28964: PUSH
28965: LD_INT 24
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: ST_TO_ADDR
28974: GO 29191
28976: LD_INT 45
28978: DOUBLE
28979: EQUAL
28980: IFTRUE 28984
28982: GO 29010
28984: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28985: LD_ADDR_VAR 0 3
28989: PUSH
28990: LD_INT 21
28992: PUSH
28993: LD_INT 22
28995: PUSH
28996: LD_INT 23
28998: PUSH
28999: LD_INT 24
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: ST_TO_ADDR
29008: GO 29191
29010: LD_INT 49
29012: DOUBLE
29013: EQUAL
29014: IFTRUE 29018
29016: GO 29044
29018: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29019: LD_ADDR_VAR 0 3
29023: PUSH
29024: LD_INT 21
29026: PUSH
29027: LD_INT 22
29029: PUSH
29030: LD_INT 23
29032: PUSH
29033: LD_INT 24
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: ST_TO_ADDR
29042: GO 29191
29044: LD_INT 51
29046: DOUBLE
29047: EQUAL
29048: IFTRUE 29052
29050: GO 29078
29052: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29053: LD_ADDR_VAR 0 3
29057: PUSH
29058: LD_INT 21
29060: PUSH
29061: LD_INT 22
29063: PUSH
29064: LD_INT 23
29066: PUSH
29067: LD_INT 24
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: ST_TO_ADDR
29076: GO 29191
29078: LD_INT 52
29080: DOUBLE
29081: EQUAL
29082: IFTRUE 29086
29084: GO 29112
29086: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29087: LD_ADDR_VAR 0 3
29091: PUSH
29092: LD_INT 21
29094: PUSH
29095: LD_INT 22
29097: PUSH
29098: LD_INT 23
29100: PUSH
29101: LD_INT 24
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: ST_TO_ADDR
29110: GO 29191
29112: LD_INT 53
29114: DOUBLE
29115: EQUAL
29116: IFTRUE 29120
29118: GO 29138
29120: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29121: LD_ADDR_VAR 0 3
29125: PUSH
29126: LD_INT 23
29128: PUSH
29129: LD_INT 24
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: ST_TO_ADDR
29136: GO 29191
29138: LD_INT 46
29140: DOUBLE
29141: EQUAL
29142: IFTRUE 29146
29144: GO 29164
29146: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29147: LD_ADDR_VAR 0 3
29151: PUSH
29152: LD_INT 23
29154: PUSH
29155: LD_INT 24
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: ST_TO_ADDR
29162: GO 29191
29164: LD_INT 47
29166: DOUBLE
29167: EQUAL
29168: IFTRUE 29172
29170: GO 29190
29172: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29173: LD_ADDR_VAR 0 3
29177: PUSH
29178: LD_INT 23
29180: PUSH
29181: LD_INT 24
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: ST_TO_ADDR
29188: GO 29191
29190: POP
// result := ( chassis in result ) ;
29191: LD_ADDR_VAR 0 3
29195: PUSH
29196: LD_VAR 0 1
29200: PUSH
29201: LD_VAR 0 3
29205: IN
29206: ST_TO_ADDR
// end ;
29207: LD_VAR 0 3
29211: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29212: LD_INT 0
29214: PPUSH
29215: PPUSH
29216: PPUSH
29217: PPUSH
29218: PPUSH
29219: PPUSH
29220: PPUSH
// result := array ;
29221: LD_ADDR_VAR 0 5
29225: PUSH
29226: LD_VAR 0 1
29230: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29231: LD_VAR 0 1
29235: NOT
29236: PUSH
29237: LD_VAR 0 2
29241: NOT
29242: OR
29243: PUSH
29244: LD_VAR 0 3
29248: NOT
29249: OR
29250: PUSH
29251: LD_VAR 0 2
29255: PUSH
29256: LD_VAR 0 1
29260: GREATER
29261: OR
29262: PUSH
29263: LD_VAR 0 3
29267: PUSH
29268: LD_VAR 0 1
29272: GREATER
29273: OR
29274: IFFALSE 29278
// exit ;
29276: GO 29574
// if direction then
29278: LD_VAR 0 4
29282: IFFALSE 29346
// begin d := 1 ;
29284: LD_ADDR_VAR 0 9
29288: PUSH
29289: LD_INT 1
29291: ST_TO_ADDR
// if i_from > i_to then
29292: LD_VAR 0 2
29296: PUSH
29297: LD_VAR 0 3
29301: GREATER
29302: IFFALSE 29328
// length := ( array - i_from ) + i_to else
29304: LD_ADDR_VAR 0 11
29308: PUSH
29309: LD_VAR 0 1
29313: PUSH
29314: LD_VAR 0 2
29318: MINUS
29319: PUSH
29320: LD_VAR 0 3
29324: PLUS
29325: ST_TO_ADDR
29326: GO 29344
// length := i_to - i_from ;
29328: LD_ADDR_VAR 0 11
29332: PUSH
29333: LD_VAR 0 3
29337: PUSH
29338: LD_VAR 0 2
29342: MINUS
29343: ST_TO_ADDR
// end else
29344: GO 29407
// begin d := - 1 ;
29346: LD_ADDR_VAR 0 9
29350: PUSH
29351: LD_INT 1
29353: NEG
29354: ST_TO_ADDR
// if i_from > i_to then
29355: LD_VAR 0 2
29359: PUSH
29360: LD_VAR 0 3
29364: GREATER
29365: IFFALSE 29385
// length := i_from - i_to else
29367: LD_ADDR_VAR 0 11
29371: PUSH
29372: LD_VAR 0 2
29376: PUSH
29377: LD_VAR 0 3
29381: MINUS
29382: ST_TO_ADDR
29383: GO 29407
// length := ( array - i_to ) + i_from ;
29385: LD_ADDR_VAR 0 11
29389: PUSH
29390: LD_VAR 0 1
29394: PUSH
29395: LD_VAR 0 3
29399: MINUS
29400: PUSH
29401: LD_VAR 0 2
29405: PLUS
29406: ST_TO_ADDR
// end ; if not length then
29407: LD_VAR 0 11
29411: NOT
29412: IFFALSE 29416
// exit ;
29414: GO 29574
// tmp := array ;
29416: LD_ADDR_VAR 0 10
29420: PUSH
29421: LD_VAR 0 1
29425: ST_TO_ADDR
// for i = 1 to length do
29426: LD_ADDR_VAR 0 6
29430: PUSH
29431: DOUBLE
29432: LD_INT 1
29434: DEC
29435: ST_TO_ADDR
29436: LD_VAR 0 11
29440: PUSH
29441: FOR_TO
29442: IFFALSE 29562
// begin for j = 1 to array do
29444: LD_ADDR_VAR 0 7
29448: PUSH
29449: DOUBLE
29450: LD_INT 1
29452: DEC
29453: ST_TO_ADDR
29454: LD_VAR 0 1
29458: PUSH
29459: FOR_TO
29460: IFFALSE 29548
// begin k := j + d ;
29462: LD_ADDR_VAR 0 8
29466: PUSH
29467: LD_VAR 0 7
29471: PUSH
29472: LD_VAR 0 9
29476: PLUS
29477: ST_TO_ADDR
// if k > array then
29478: LD_VAR 0 8
29482: PUSH
29483: LD_VAR 0 1
29487: GREATER
29488: IFFALSE 29498
// k := 1 ;
29490: LD_ADDR_VAR 0 8
29494: PUSH
29495: LD_INT 1
29497: ST_TO_ADDR
// if not k then
29498: LD_VAR 0 8
29502: NOT
29503: IFFALSE 29515
// k := array ;
29505: LD_ADDR_VAR 0 8
29509: PUSH
29510: LD_VAR 0 1
29514: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29515: LD_ADDR_VAR 0 10
29519: PUSH
29520: LD_VAR 0 10
29524: PPUSH
29525: LD_VAR 0 8
29529: PPUSH
29530: LD_VAR 0 1
29534: PUSH
29535: LD_VAR 0 7
29539: ARRAY
29540: PPUSH
29541: CALL_OW 1
29545: ST_TO_ADDR
// end ;
29546: GO 29459
29548: POP
29549: POP
// array := tmp ;
29550: LD_ADDR_VAR 0 1
29554: PUSH
29555: LD_VAR 0 10
29559: ST_TO_ADDR
// end ;
29560: GO 29441
29562: POP
29563: POP
// result := array ;
29564: LD_ADDR_VAR 0 5
29568: PUSH
29569: LD_VAR 0 1
29573: ST_TO_ADDR
// end ;
29574: LD_VAR 0 5
29578: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29579: LD_INT 0
29581: PPUSH
29582: PPUSH
// result := 0 ;
29583: LD_ADDR_VAR 0 3
29587: PUSH
29588: LD_INT 0
29590: ST_TO_ADDR
// if not array or not value in array then
29591: LD_VAR 0 1
29595: NOT
29596: PUSH
29597: LD_VAR 0 2
29601: PUSH
29602: LD_VAR 0 1
29606: IN
29607: NOT
29608: OR
29609: IFFALSE 29613
// exit ;
29611: GO 29667
// for i = 1 to array do
29613: LD_ADDR_VAR 0 4
29617: PUSH
29618: DOUBLE
29619: LD_INT 1
29621: DEC
29622: ST_TO_ADDR
29623: LD_VAR 0 1
29627: PUSH
29628: FOR_TO
29629: IFFALSE 29665
// if value = array [ i ] then
29631: LD_VAR 0 2
29635: PUSH
29636: LD_VAR 0 1
29640: PUSH
29641: LD_VAR 0 4
29645: ARRAY
29646: EQUAL
29647: IFFALSE 29663
// begin result := i ;
29649: LD_ADDR_VAR 0 3
29653: PUSH
29654: LD_VAR 0 4
29658: ST_TO_ADDR
// exit ;
29659: POP
29660: POP
29661: GO 29667
// end ;
29663: GO 29628
29665: POP
29666: POP
// end ;
29667: LD_VAR 0 3
29671: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29672: LD_INT 0
29674: PPUSH
// vc_chassis := chassis ;
29675: LD_ADDR_OWVAR 37
29679: PUSH
29680: LD_VAR 0 1
29684: ST_TO_ADDR
// vc_engine := engine ;
29685: LD_ADDR_OWVAR 39
29689: PUSH
29690: LD_VAR 0 2
29694: ST_TO_ADDR
// vc_control := control ;
29695: LD_ADDR_OWVAR 38
29699: PUSH
29700: LD_VAR 0 3
29704: ST_TO_ADDR
// vc_weapon := weapon ;
29705: LD_ADDR_OWVAR 40
29709: PUSH
29710: LD_VAR 0 4
29714: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29715: LD_ADDR_OWVAR 41
29719: PUSH
29720: LD_VAR 0 5
29724: ST_TO_ADDR
// end ;
29725: LD_VAR 0 6
29729: RET
// export function WantPlant ( unit ) ; var task ; begin
29730: LD_INT 0
29732: PPUSH
29733: PPUSH
// result := false ;
29734: LD_ADDR_VAR 0 2
29738: PUSH
29739: LD_INT 0
29741: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29742: LD_ADDR_VAR 0 3
29746: PUSH
29747: LD_VAR 0 1
29751: PPUSH
29752: CALL_OW 437
29756: ST_TO_ADDR
// if task then
29757: LD_VAR 0 3
29761: IFFALSE 29789
// if task [ 1 ] [ 1 ] = p then
29763: LD_VAR 0 3
29767: PUSH
29768: LD_INT 1
29770: ARRAY
29771: PUSH
29772: LD_INT 1
29774: ARRAY
29775: PUSH
29776: LD_STRING p
29778: EQUAL
29779: IFFALSE 29789
// result := true ;
29781: LD_ADDR_VAR 0 2
29785: PUSH
29786: LD_INT 1
29788: ST_TO_ADDR
// end ;
29789: LD_VAR 0 2
29793: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29794: LD_INT 0
29796: PPUSH
29797: PPUSH
29798: PPUSH
29799: PPUSH
// if pos < 1 then
29800: LD_VAR 0 2
29804: PUSH
29805: LD_INT 1
29807: LESS
29808: IFFALSE 29812
// exit ;
29810: GO 30115
// if pos = 1 then
29812: LD_VAR 0 2
29816: PUSH
29817: LD_INT 1
29819: EQUAL
29820: IFFALSE 29853
// result := Replace ( arr , pos [ 1 ] , value ) else
29822: LD_ADDR_VAR 0 4
29826: PUSH
29827: LD_VAR 0 1
29831: PPUSH
29832: LD_VAR 0 2
29836: PUSH
29837: LD_INT 1
29839: ARRAY
29840: PPUSH
29841: LD_VAR 0 3
29845: PPUSH
29846: CALL_OW 1
29850: ST_TO_ADDR
29851: GO 30115
// begin tmp := arr ;
29853: LD_ADDR_VAR 0 6
29857: PUSH
29858: LD_VAR 0 1
29862: ST_TO_ADDR
// s_arr := [ tmp ] ;
29863: LD_ADDR_VAR 0 7
29867: PUSH
29868: LD_VAR 0 6
29872: PUSH
29873: EMPTY
29874: LIST
29875: ST_TO_ADDR
// for i = 1 to pos - 1 do
29876: LD_ADDR_VAR 0 5
29880: PUSH
29881: DOUBLE
29882: LD_INT 1
29884: DEC
29885: ST_TO_ADDR
29886: LD_VAR 0 2
29890: PUSH
29891: LD_INT 1
29893: MINUS
29894: PUSH
29895: FOR_TO
29896: IFFALSE 29941
// begin tmp := tmp [ pos [ i ] ] ;
29898: LD_ADDR_VAR 0 6
29902: PUSH
29903: LD_VAR 0 6
29907: PUSH
29908: LD_VAR 0 2
29912: PUSH
29913: LD_VAR 0 5
29917: ARRAY
29918: ARRAY
29919: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29920: LD_ADDR_VAR 0 7
29924: PUSH
29925: LD_VAR 0 7
29929: PUSH
29930: LD_VAR 0 6
29934: PUSH
29935: EMPTY
29936: LIST
29937: ADD
29938: ST_TO_ADDR
// end ;
29939: GO 29895
29941: POP
29942: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29943: LD_ADDR_VAR 0 6
29947: PUSH
29948: LD_VAR 0 6
29952: PPUSH
29953: LD_VAR 0 2
29957: PUSH
29958: LD_VAR 0 2
29962: ARRAY
29963: PPUSH
29964: LD_VAR 0 3
29968: PPUSH
29969: CALL_OW 1
29973: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29974: LD_ADDR_VAR 0 7
29978: PUSH
29979: LD_VAR 0 7
29983: PPUSH
29984: LD_VAR 0 7
29988: PPUSH
29989: LD_VAR 0 6
29993: PPUSH
29994: CALL_OW 1
29998: ST_TO_ADDR
// for i = s_arr downto 2 do
29999: LD_ADDR_VAR 0 5
30003: PUSH
30004: DOUBLE
30005: LD_VAR 0 7
30009: INC
30010: ST_TO_ADDR
30011: LD_INT 2
30013: PUSH
30014: FOR_DOWNTO
30015: IFFALSE 30099
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30017: LD_ADDR_VAR 0 6
30021: PUSH
30022: LD_VAR 0 7
30026: PUSH
30027: LD_VAR 0 5
30031: PUSH
30032: LD_INT 1
30034: MINUS
30035: ARRAY
30036: PPUSH
30037: LD_VAR 0 2
30041: PUSH
30042: LD_VAR 0 5
30046: PUSH
30047: LD_INT 1
30049: MINUS
30050: ARRAY
30051: PPUSH
30052: LD_VAR 0 7
30056: PUSH
30057: LD_VAR 0 5
30061: ARRAY
30062: PPUSH
30063: CALL_OW 1
30067: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30068: LD_ADDR_VAR 0 7
30072: PUSH
30073: LD_VAR 0 7
30077: PPUSH
30078: LD_VAR 0 5
30082: PUSH
30083: LD_INT 1
30085: MINUS
30086: PPUSH
30087: LD_VAR 0 6
30091: PPUSH
30092: CALL_OW 1
30096: ST_TO_ADDR
// end ;
30097: GO 30014
30099: POP
30100: POP
// result := s_arr [ 1 ] ;
30101: LD_ADDR_VAR 0 4
30105: PUSH
30106: LD_VAR 0 7
30110: PUSH
30111: LD_INT 1
30113: ARRAY
30114: ST_TO_ADDR
// end ; end ;
30115: LD_VAR 0 4
30119: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30120: LD_INT 0
30122: PPUSH
30123: PPUSH
// if not list then
30124: LD_VAR 0 1
30128: NOT
30129: IFFALSE 30133
// exit ;
30131: GO 30224
// i := list [ pos1 ] ;
30133: LD_ADDR_VAR 0 5
30137: PUSH
30138: LD_VAR 0 1
30142: PUSH
30143: LD_VAR 0 2
30147: ARRAY
30148: ST_TO_ADDR
// if not i then
30149: LD_VAR 0 5
30153: NOT
30154: IFFALSE 30158
// exit ;
30156: GO 30224
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30158: LD_ADDR_VAR 0 1
30162: PUSH
30163: LD_VAR 0 1
30167: PPUSH
30168: LD_VAR 0 2
30172: PPUSH
30173: LD_VAR 0 1
30177: PUSH
30178: LD_VAR 0 3
30182: ARRAY
30183: PPUSH
30184: CALL_OW 1
30188: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30189: LD_ADDR_VAR 0 1
30193: PUSH
30194: LD_VAR 0 1
30198: PPUSH
30199: LD_VAR 0 3
30203: PPUSH
30204: LD_VAR 0 5
30208: PPUSH
30209: CALL_OW 1
30213: ST_TO_ADDR
// result := list ;
30214: LD_ADDR_VAR 0 4
30218: PUSH
30219: LD_VAR 0 1
30223: ST_TO_ADDR
// end ;
30224: LD_VAR 0 4
30228: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30229: LD_INT 0
30231: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30232: LD_ADDR_VAR 0 5
30236: PUSH
30237: LD_VAR 0 1
30241: PPUSH
30242: CALL_OW 250
30246: PPUSH
30247: LD_VAR 0 1
30251: PPUSH
30252: CALL_OW 251
30256: PPUSH
30257: LD_VAR 0 2
30261: PPUSH
30262: LD_VAR 0 3
30266: PPUSH
30267: LD_VAR 0 4
30271: PPUSH
30272: CALL 30282 0 5
30276: ST_TO_ADDR
// end ;
30277: LD_VAR 0 5
30281: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30282: LD_INT 0
30284: PPUSH
30285: PPUSH
30286: PPUSH
30287: PPUSH
// if not list then
30288: LD_VAR 0 3
30292: NOT
30293: IFFALSE 30297
// exit ;
30295: GO 30685
// result := [ ] ;
30297: LD_ADDR_VAR 0 6
30301: PUSH
30302: EMPTY
30303: ST_TO_ADDR
// for i in list do
30304: LD_ADDR_VAR 0 7
30308: PUSH
30309: LD_VAR 0 3
30313: PUSH
30314: FOR_IN
30315: IFFALSE 30517
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30317: LD_ADDR_VAR 0 9
30321: PUSH
30322: LD_VAR 0 7
30326: PPUSH
30327: LD_VAR 0 1
30331: PPUSH
30332: LD_VAR 0 2
30336: PPUSH
30337: CALL_OW 297
30341: ST_TO_ADDR
// if not result then
30342: LD_VAR 0 6
30346: NOT
30347: IFFALSE 30373
// result := [ [ i , tmp ] ] else
30349: LD_ADDR_VAR 0 6
30353: PUSH
30354: LD_VAR 0 7
30358: PUSH
30359: LD_VAR 0 9
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: EMPTY
30369: LIST
30370: ST_TO_ADDR
30371: GO 30515
// begin if result [ result ] [ 2 ] < tmp then
30373: LD_VAR 0 6
30377: PUSH
30378: LD_VAR 0 6
30382: ARRAY
30383: PUSH
30384: LD_INT 2
30386: ARRAY
30387: PUSH
30388: LD_VAR 0 9
30392: LESS
30393: IFFALSE 30435
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30395: LD_ADDR_VAR 0 6
30399: PUSH
30400: LD_VAR 0 6
30404: PPUSH
30405: LD_VAR 0 6
30409: PUSH
30410: LD_INT 1
30412: PLUS
30413: PPUSH
30414: LD_VAR 0 7
30418: PUSH
30419: LD_VAR 0 9
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PPUSH
30428: CALL_OW 2
30432: ST_TO_ADDR
30433: GO 30515
// for j = 1 to result do
30435: LD_ADDR_VAR 0 8
30439: PUSH
30440: DOUBLE
30441: LD_INT 1
30443: DEC
30444: ST_TO_ADDR
30445: LD_VAR 0 6
30449: PUSH
30450: FOR_TO
30451: IFFALSE 30513
// begin if tmp < result [ j ] [ 2 ] then
30453: LD_VAR 0 9
30457: PUSH
30458: LD_VAR 0 6
30462: PUSH
30463: LD_VAR 0 8
30467: ARRAY
30468: PUSH
30469: LD_INT 2
30471: ARRAY
30472: LESS
30473: IFFALSE 30511
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30475: LD_ADDR_VAR 0 6
30479: PUSH
30480: LD_VAR 0 6
30484: PPUSH
30485: LD_VAR 0 8
30489: PPUSH
30490: LD_VAR 0 7
30494: PUSH
30495: LD_VAR 0 9
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PPUSH
30504: CALL_OW 2
30508: ST_TO_ADDR
// break ;
30509: GO 30513
// end ; end ;
30511: GO 30450
30513: POP
30514: POP
// end ; end ;
30515: GO 30314
30517: POP
30518: POP
// if result and not asc then
30519: LD_VAR 0 6
30523: PUSH
30524: LD_VAR 0 4
30528: NOT
30529: AND
30530: IFFALSE 30605
// begin tmp := result ;
30532: LD_ADDR_VAR 0 9
30536: PUSH
30537: LD_VAR 0 6
30541: ST_TO_ADDR
// for i = tmp downto 1 do
30542: LD_ADDR_VAR 0 7
30546: PUSH
30547: DOUBLE
30548: LD_VAR 0 9
30552: INC
30553: ST_TO_ADDR
30554: LD_INT 1
30556: PUSH
30557: FOR_DOWNTO
30558: IFFALSE 30603
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30560: LD_ADDR_VAR 0 6
30564: PUSH
30565: LD_VAR 0 6
30569: PPUSH
30570: LD_VAR 0 9
30574: PUSH
30575: LD_VAR 0 7
30579: MINUS
30580: PUSH
30581: LD_INT 1
30583: PLUS
30584: PPUSH
30585: LD_VAR 0 9
30589: PUSH
30590: LD_VAR 0 7
30594: ARRAY
30595: PPUSH
30596: CALL_OW 1
30600: ST_TO_ADDR
30601: GO 30557
30603: POP
30604: POP
// end ; tmp := [ ] ;
30605: LD_ADDR_VAR 0 9
30609: PUSH
30610: EMPTY
30611: ST_TO_ADDR
// if mode then
30612: LD_VAR 0 5
30616: IFFALSE 30685
// begin for i = 1 to result do
30618: LD_ADDR_VAR 0 7
30622: PUSH
30623: DOUBLE
30624: LD_INT 1
30626: DEC
30627: ST_TO_ADDR
30628: LD_VAR 0 6
30632: PUSH
30633: FOR_TO
30634: IFFALSE 30673
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30636: LD_ADDR_VAR 0 9
30640: PUSH
30641: LD_VAR 0 9
30645: PPUSH
30646: LD_VAR 0 7
30650: PPUSH
30651: LD_VAR 0 6
30655: PUSH
30656: LD_VAR 0 7
30660: ARRAY
30661: PUSH
30662: LD_INT 1
30664: ARRAY
30665: PPUSH
30666: CALL_OW 1
30670: ST_TO_ADDR
30671: GO 30633
30673: POP
30674: POP
// result := tmp ;
30675: LD_ADDR_VAR 0 6
30679: PUSH
30680: LD_VAR 0 9
30684: ST_TO_ADDR
// end ; end ;
30685: LD_VAR 0 6
30689: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30690: LD_INT 0
30692: PPUSH
30693: PPUSH
30694: PPUSH
30695: PPUSH
30696: PPUSH
30697: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30698: LD_ADDR_VAR 0 5
30702: PUSH
30703: LD_INT 0
30705: PUSH
30706: LD_INT 0
30708: PUSH
30709: LD_INT 0
30711: PUSH
30712: EMPTY
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: ST_TO_ADDR
// if not x or not y then
30720: LD_VAR 0 2
30724: NOT
30725: PUSH
30726: LD_VAR 0 3
30730: NOT
30731: OR
30732: IFFALSE 30736
// exit ;
30734: GO 32388
// if not range then
30736: LD_VAR 0 4
30740: NOT
30741: IFFALSE 30751
// range := 10 ;
30743: LD_ADDR_VAR 0 4
30747: PUSH
30748: LD_INT 10
30750: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30751: LD_ADDR_VAR 0 8
30755: PUSH
30756: LD_INT 81
30758: PUSH
30759: LD_VAR 0 1
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 92
30770: PUSH
30771: LD_VAR 0 2
30775: PUSH
30776: LD_VAR 0 3
30780: PUSH
30781: LD_VAR 0 4
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 3
30794: PUSH
30795: LD_INT 21
30797: PUSH
30798: LD_INT 3
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: LIST
30813: PPUSH
30814: CALL_OW 69
30818: ST_TO_ADDR
// if not tmp then
30819: LD_VAR 0 8
30823: NOT
30824: IFFALSE 30828
// exit ;
30826: GO 32388
// for i in tmp do
30828: LD_ADDR_VAR 0 6
30832: PUSH
30833: LD_VAR 0 8
30837: PUSH
30838: FOR_IN
30839: IFFALSE 32363
// begin points := [ 0 , 0 , 0 ] ;
30841: LD_ADDR_VAR 0 9
30845: PUSH
30846: LD_INT 0
30848: PUSH
30849: LD_INT 0
30851: PUSH
30852: LD_INT 0
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: LIST
30859: ST_TO_ADDR
// bpoints := 1 ;
30860: LD_ADDR_VAR 0 10
30864: PUSH
30865: LD_INT 1
30867: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30868: LD_VAR 0 6
30872: PPUSH
30873: CALL_OW 247
30877: PUSH
30878: LD_INT 1
30880: DOUBLE
30881: EQUAL
30882: IFTRUE 30886
30884: GO 31464
30886: POP
// begin if GetClass ( i ) = 1 then
30887: LD_VAR 0 6
30891: PPUSH
30892: CALL_OW 257
30896: PUSH
30897: LD_INT 1
30899: EQUAL
30900: IFFALSE 30921
// points := [ 10 , 5 , 3 ] ;
30902: LD_ADDR_VAR 0 9
30906: PUSH
30907: LD_INT 10
30909: PUSH
30910: LD_INT 5
30912: PUSH
30913: LD_INT 3
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: LIST
30920: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30921: LD_VAR 0 6
30925: PPUSH
30926: CALL_OW 257
30930: PUSH
30931: LD_INT 2
30933: PUSH
30934: LD_INT 3
30936: PUSH
30937: LD_INT 4
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: LIST
30944: IN
30945: IFFALSE 30966
// points := [ 3 , 2 , 1 ] ;
30947: LD_ADDR_VAR 0 9
30951: PUSH
30952: LD_INT 3
30954: PUSH
30955: LD_INT 2
30957: PUSH
30958: LD_INT 1
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: LIST
30965: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30966: LD_VAR 0 6
30970: PPUSH
30971: CALL_OW 257
30975: PUSH
30976: LD_INT 5
30978: EQUAL
30979: IFFALSE 31000
// points := [ 130 , 5 , 2 ] ;
30981: LD_ADDR_VAR 0 9
30985: PUSH
30986: LD_INT 130
30988: PUSH
30989: LD_INT 5
30991: PUSH
30992: LD_INT 2
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: LIST
30999: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31000: LD_VAR 0 6
31004: PPUSH
31005: CALL_OW 257
31009: PUSH
31010: LD_INT 8
31012: EQUAL
31013: IFFALSE 31034
// points := [ 35 , 35 , 30 ] ;
31015: LD_ADDR_VAR 0 9
31019: PUSH
31020: LD_INT 35
31022: PUSH
31023: LD_INT 35
31025: PUSH
31026: LD_INT 30
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: LIST
31033: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31034: LD_VAR 0 6
31038: PPUSH
31039: CALL_OW 257
31043: PUSH
31044: LD_INT 9
31046: EQUAL
31047: IFFALSE 31068
// points := [ 20 , 55 , 40 ] ;
31049: LD_ADDR_VAR 0 9
31053: PUSH
31054: LD_INT 20
31056: PUSH
31057: LD_INT 55
31059: PUSH
31060: LD_INT 40
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: LIST
31067: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31068: LD_VAR 0 6
31072: PPUSH
31073: CALL_OW 257
31077: PUSH
31078: LD_INT 12
31080: PUSH
31081: LD_INT 16
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: IN
31088: IFFALSE 31109
// points := [ 5 , 3 , 2 ] ;
31090: LD_ADDR_VAR 0 9
31094: PUSH
31095: LD_INT 5
31097: PUSH
31098: LD_INT 3
31100: PUSH
31101: LD_INT 2
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: LIST
31108: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31109: LD_VAR 0 6
31113: PPUSH
31114: CALL_OW 257
31118: PUSH
31119: LD_INT 17
31121: EQUAL
31122: IFFALSE 31143
// points := [ 100 , 50 , 75 ] ;
31124: LD_ADDR_VAR 0 9
31128: PUSH
31129: LD_INT 100
31131: PUSH
31132: LD_INT 50
31134: PUSH
31135: LD_INT 75
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: LIST
31142: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31143: LD_VAR 0 6
31147: PPUSH
31148: CALL_OW 257
31152: PUSH
31153: LD_INT 15
31155: EQUAL
31156: IFFALSE 31177
// points := [ 10 , 5 , 3 ] ;
31158: LD_ADDR_VAR 0 9
31162: PUSH
31163: LD_INT 10
31165: PUSH
31166: LD_INT 5
31168: PUSH
31169: LD_INT 3
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: LIST
31176: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31177: LD_VAR 0 6
31181: PPUSH
31182: CALL_OW 257
31186: PUSH
31187: LD_INT 14
31189: EQUAL
31190: IFFALSE 31211
// points := [ 10 , 0 , 0 ] ;
31192: LD_ADDR_VAR 0 9
31196: PUSH
31197: LD_INT 10
31199: PUSH
31200: LD_INT 0
31202: PUSH
31203: LD_INT 0
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: LIST
31210: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31211: LD_VAR 0 6
31215: PPUSH
31216: CALL_OW 257
31220: PUSH
31221: LD_INT 11
31223: EQUAL
31224: IFFALSE 31245
// points := [ 30 , 10 , 5 ] ;
31226: LD_ADDR_VAR 0 9
31230: PUSH
31231: LD_INT 30
31233: PUSH
31234: LD_INT 10
31236: PUSH
31237: LD_INT 5
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: LIST
31244: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31245: LD_VAR 0 1
31249: PPUSH
31250: LD_INT 5
31252: PPUSH
31253: CALL_OW 321
31257: PUSH
31258: LD_INT 2
31260: EQUAL
31261: IFFALSE 31278
// bpoints := bpoints * 1.8 ;
31263: LD_ADDR_VAR 0 10
31267: PUSH
31268: LD_VAR 0 10
31272: PUSH
31273: LD_REAL  1.80000000000000E+0000
31276: MUL
31277: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31278: LD_VAR 0 6
31282: PPUSH
31283: CALL_OW 257
31287: PUSH
31288: LD_INT 1
31290: PUSH
31291: LD_INT 2
31293: PUSH
31294: LD_INT 3
31296: PUSH
31297: LD_INT 4
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: IN
31306: PUSH
31307: LD_VAR 0 1
31311: PPUSH
31312: LD_INT 51
31314: PPUSH
31315: CALL_OW 321
31319: PUSH
31320: LD_INT 2
31322: EQUAL
31323: AND
31324: IFFALSE 31341
// bpoints := bpoints * 1.2 ;
31326: LD_ADDR_VAR 0 10
31330: PUSH
31331: LD_VAR 0 10
31335: PUSH
31336: LD_REAL  1.20000000000000E+0000
31339: MUL
31340: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31341: LD_VAR 0 6
31345: PPUSH
31346: CALL_OW 257
31350: PUSH
31351: LD_INT 5
31353: PUSH
31354: LD_INT 7
31356: PUSH
31357: LD_INT 9
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: LIST
31364: IN
31365: PUSH
31366: LD_VAR 0 1
31370: PPUSH
31371: LD_INT 52
31373: PPUSH
31374: CALL_OW 321
31378: PUSH
31379: LD_INT 2
31381: EQUAL
31382: AND
31383: IFFALSE 31400
// bpoints := bpoints * 1.5 ;
31385: LD_ADDR_VAR 0 10
31389: PUSH
31390: LD_VAR 0 10
31394: PUSH
31395: LD_REAL  1.50000000000000E+0000
31398: MUL
31399: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31400: LD_VAR 0 1
31404: PPUSH
31405: LD_INT 66
31407: PPUSH
31408: CALL_OW 321
31412: PUSH
31413: LD_INT 2
31415: EQUAL
31416: IFFALSE 31433
// bpoints := bpoints * 1.1 ;
31418: LD_ADDR_VAR 0 10
31422: PUSH
31423: LD_VAR 0 10
31427: PUSH
31428: LD_REAL  1.10000000000000E+0000
31431: MUL
31432: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31433: LD_ADDR_VAR 0 10
31437: PUSH
31438: LD_VAR 0 10
31442: PUSH
31443: LD_VAR 0 6
31447: PPUSH
31448: LD_INT 1
31450: PPUSH
31451: CALL_OW 259
31455: PUSH
31456: LD_REAL  1.15000000000000E+0000
31459: MUL
31460: MUL
31461: ST_TO_ADDR
// end ; unit_vehicle :
31462: GO 32292
31464: LD_INT 2
31466: DOUBLE
31467: EQUAL
31468: IFTRUE 31472
31470: GO 32280
31472: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31473: LD_VAR 0 6
31477: PPUSH
31478: CALL_OW 264
31482: PUSH
31483: LD_INT 2
31485: PUSH
31486: LD_INT 42
31488: PUSH
31489: LD_INT 24
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: LIST
31496: IN
31497: IFFALSE 31518
// points := [ 25 , 5 , 3 ] ;
31499: LD_ADDR_VAR 0 9
31503: PUSH
31504: LD_INT 25
31506: PUSH
31507: LD_INT 5
31509: PUSH
31510: LD_INT 3
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: LIST
31517: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31518: LD_VAR 0 6
31522: PPUSH
31523: CALL_OW 264
31527: PUSH
31528: LD_INT 4
31530: PUSH
31531: LD_INT 43
31533: PUSH
31534: LD_INT 25
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: LIST
31541: IN
31542: IFFALSE 31563
// points := [ 40 , 15 , 5 ] ;
31544: LD_ADDR_VAR 0 9
31548: PUSH
31549: LD_INT 40
31551: PUSH
31552: LD_INT 15
31554: PUSH
31555: LD_INT 5
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: LIST
31562: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31563: LD_VAR 0 6
31567: PPUSH
31568: CALL_OW 264
31572: PUSH
31573: LD_INT 3
31575: PUSH
31576: LD_INT 23
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: IN
31583: IFFALSE 31604
// points := [ 7 , 25 , 8 ] ;
31585: LD_ADDR_VAR 0 9
31589: PUSH
31590: LD_INT 7
31592: PUSH
31593: LD_INT 25
31595: PUSH
31596: LD_INT 8
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: LIST
31603: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31604: LD_VAR 0 6
31608: PPUSH
31609: CALL_OW 264
31613: PUSH
31614: LD_INT 5
31616: PUSH
31617: LD_INT 27
31619: PUSH
31620: LD_INT 44
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: LIST
31627: IN
31628: IFFALSE 31649
// points := [ 14 , 50 , 16 ] ;
31630: LD_ADDR_VAR 0 9
31634: PUSH
31635: LD_INT 14
31637: PUSH
31638: LD_INT 50
31640: PUSH
31641: LD_INT 16
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: LIST
31648: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31649: LD_VAR 0 6
31653: PPUSH
31654: CALL_OW 264
31658: PUSH
31659: LD_INT 6
31661: PUSH
31662: LD_INT 46
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: IN
31669: IFFALSE 31690
// points := [ 32 , 120 , 70 ] ;
31671: LD_ADDR_VAR 0 9
31675: PUSH
31676: LD_INT 32
31678: PUSH
31679: LD_INT 120
31681: PUSH
31682: LD_INT 70
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: LIST
31689: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31690: LD_VAR 0 6
31694: PPUSH
31695: CALL_OW 264
31699: PUSH
31700: LD_INT 7
31702: PUSH
31703: LD_INT 28
31705: PUSH
31706: LD_INT 45
31708: PUSH
31709: LD_EXP 64
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: IN
31720: IFFALSE 31741
// points := [ 35 , 20 , 45 ] ;
31722: LD_ADDR_VAR 0 9
31726: PUSH
31727: LD_INT 35
31729: PUSH
31730: LD_INT 20
31732: PUSH
31733: LD_INT 45
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: LIST
31740: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31741: LD_VAR 0 6
31745: PPUSH
31746: CALL_OW 264
31750: PUSH
31751: LD_INT 47
31753: PUSH
31754: EMPTY
31755: LIST
31756: IN
31757: IFFALSE 31778
// points := [ 67 , 45 , 75 ] ;
31759: LD_ADDR_VAR 0 9
31763: PUSH
31764: LD_INT 67
31766: PUSH
31767: LD_INT 45
31769: PUSH
31770: LD_INT 75
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: LIST
31777: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31778: LD_VAR 0 6
31782: PPUSH
31783: CALL_OW 264
31787: PUSH
31788: LD_INT 26
31790: PUSH
31791: EMPTY
31792: LIST
31793: IN
31794: IFFALSE 31815
// points := [ 120 , 30 , 80 ] ;
31796: LD_ADDR_VAR 0 9
31800: PUSH
31801: LD_INT 120
31803: PUSH
31804: LD_INT 30
31806: PUSH
31807: LD_INT 80
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: LIST
31814: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31815: LD_VAR 0 6
31819: PPUSH
31820: CALL_OW 264
31824: PUSH
31825: LD_INT 22
31827: PUSH
31828: EMPTY
31829: LIST
31830: IN
31831: IFFALSE 31852
// points := [ 40 , 1 , 1 ] ;
31833: LD_ADDR_VAR 0 9
31837: PUSH
31838: LD_INT 40
31840: PUSH
31841: LD_INT 1
31843: PUSH
31844: LD_INT 1
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: LIST
31851: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31852: LD_VAR 0 6
31856: PPUSH
31857: CALL_OW 264
31861: PUSH
31862: LD_INT 29
31864: PUSH
31865: EMPTY
31866: LIST
31867: IN
31868: IFFALSE 31889
// points := [ 70 , 200 , 400 ] ;
31870: LD_ADDR_VAR 0 9
31874: PUSH
31875: LD_INT 70
31877: PUSH
31878: LD_INT 200
31880: PUSH
31881: LD_INT 400
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: LIST
31888: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31889: LD_VAR 0 6
31893: PPUSH
31894: CALL_OW 264
31898: PUSH
31899: LD_INT 14
31901: PUSH
31902: LD_INT 53
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: IN
31909: IFFALSE 31930
// points := [ 40 , 10 , 20 ] ;
31911: LD_ADDR_VAR 0 9
31915: PUSH
31916: LD_INT 40
31918: PUSH
31919: LD_INT 10
31921: PUSH
31922: LD_INT 20
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: LIST
31929: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31930: LD_VAR 0 6
31934: PPUSH
31935: CALL_OW 264
31939: PUSH
31940: LD_INT 9
31942: PUSH
31943: EMPTY
31944: LIST
31945: IN
31946: IFFALSE 31967
// points := [ 5 , 70 , 20 ] ;
31948: LD_ADDR_VAR 0 9
31952: PUSH
31953: LD_INT 5
31955: PUSH
31956: LD_INT 70
31958: PUSH
31959: LD_INT 20
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: LIST
31966: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31967: LD_VAR 0 6
31971: PPUSH
31972: CALL_OW 264
31976: PUSH
31977: LD_INT 10
31979: PUSH
31980: EMPTY
31981: LIST
31982: IN
31983: IFFALSE 32004
// points := [ 35 , 110 , 70 ] ;
31985: LD_ADDR_VAR 0 9
31989: PUSH
31990: LD_INT 35
31992: PUSH
31993: LD_INT 110
31995: PUSH
31996: LD_INT 70
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: LIST
32003: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32004: LD_VAR 0 6
32008: PPUSH
32009: CALL_OW 265
32013: PUSH
32014: LD_INT 25
32016: EQUAL
32017: IFFALSE 32038
// points := [ 80 , 65 , 100 ] ;
32019: LD_ADDR_VAR 0 9
32023: PUSH
32024: LD_INT 80
32026: PUSH
32027: LD_INT 65
32029: PUSH
32030: LD_INT 100
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: LIST
32037: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32038: LD_VAR 0 6
32042: PPUSH
32043: CALL_OW 263
32047: PUSH
32048: LD_INT 1
32050: EQUAL
32051: IFFALSE 32086
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32053: LD_ADDR_VAR 0 10
32057: PUSH
32058: LD_VAR 0 10
32062: PUSH
32063: LD_VAR 0 6
32067: PPUSH
32068: CALL_OW 311
32072: PPUSH
32073: LD_INT 3
32075: PPUSH
32076: CALL_OW 259
32080: PUSH
32081: LD_INT 4
32083: MUL
32084: MUL
32085: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32086: LD_VAR 0 6
32090: PPUSH
32091: CALL_OW 263
32095: PUSH
32096: LD_INT 2
32098: EQUAL
32099: IFFALSE 32150
// begin j := IsControledBy ( i ) ;
32101: LD_ADDR_VAR 0 7
32105: PUSH
32106: LD_VAR 0 6
32110: PPUSH
32111: CALL_OW 312
32115: ST_TO_ADDR
// if j then
32116: LD_VAR 0 7
32120: IFFALSE 32150
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32122: LD_ADDR_VAR 0 10
32126: PUSH
32127: LD_VAR 0 10
32131: PUSH
32132: LD_VAR 0 7
32136: PPUSH
32137: LD_INT 3
32139: PPUSH
32140: CALL_OW 259
32144: PUSH
32145: LD_INT 3
32147: MUL
32148: MUL
32149: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32150: LD_VAR 0 6
32154: PPUSH
32155: CALL_OW 264
32159: PUSH
32160: LD_INT 5
32162: PUSH
32163: LD_INT 6
32165: PUSH
32166: LD_INT 46
32168: PUSH
32169: LD_INT 44
32171: PUSH
32172: LD_INT 47
32174: PUSH
32175: LD_INT 45
32177: PUSH
32178: LD_INT 28
32180: PUSH
32181: LD_INT 7
32183: PUSH
32184: LD_INT 27
32186: PUSH
32187: LD_INT 29
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: IN
32202: PUSH
32203: LD_VAR 0 1
32207: PPUSH
32208: LD_INT 52
32210: PPUSH
32211: CALL_OW 321
32215: PUSH
32216: LD_INT 2
32218: EQUAL
32219: AND
32220: IFFALSE 32237
// bpoints := bpoints * 1.2 ;
32222: LD_ADDR_VAR 0 10
32226: PUSH
32227: LD_VAR 0 10
32231: PUSH
32232: LD_REAL  1.20000000000000E+0000
32235: MUL
32236: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32237: LD_VAR 0 6
32241: PPUSH
32242: CALL_OW 264
32246: PUSH
32247: LD_INT 6
32249: PUSH
32250: LD_INT 46
32252: PUSH
32253: LD_INT 47
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: LIST
32260: IN
32261: IFFALSE 32278
// bpoints := bpoints * 1.2 ;
32263: LD_ADDR_VAR 0 10
32267: PUSH
32268: LD_VAR 0 10
32272: PUSH
32273: LD_REAL  1.20000000000000E+0000
32276: MUL
32277: ST_TO_ADDR
// end ; unit_building :
32278: GO 32292
32280: LD_INT 3
32282: DOUBLE
32283: EQUAL
32284: IFTRUE 32288
32286: GO 32291
32288: POP
// ; end ;
32289: GO 32292
32291: POP
// for j = 1 to 3 do
32292: LD_ADDR_VAR 0 7
32296: PUSH
32297: DOUBLE
32298: LD_INT 1
32300: DEC
32301: ST_TO_ADDR
32302: LD_INT 3
32304: PUSH
32305: FOR_TO
32306: IFFALSE 32359
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32308: LD_ADDR_VAR 0 5
32312: PUSH
32313: LD_VAR 0 5
32317: PPUSH
32318: LD_VAR 0 7
32322: PPUSH
32323: LD_VAR 0 5
32327: PUSH
32328: LD_VAR 0 7
32332: ARRAY
32333: PUSH
32334: LD_VAR 0 9
32338: PUSH
32339: LD_VAR 0 7
32343: ARRAY
32344: PUSH
32345: LD_VAR 0 10
32349: MUL
32350: PLUS
32351: PPUSH
32352: CALL_OW 1
32356: ST_TO_ADDR
32357: GO 32305
32359: POP
32360: POP
// end ;
32361: GO 30838
32363: POP
32364: POP
// result := Replace ( result , 4 , tmp ) ;
32365: LD_ADDR_VAR 0 5
32369: PUSH
32370: LD_VAR 0 5
32374: PPUSH
32375: LD_INT 4
32377: PPUSH
32378: LD_VAR 0 8
32382: PPUSH
32383: CALL_OW 1
32387: ST_TO_ADDR
// end ;
32388: LD_VAR 0 5
32392: RET
// export function DangerAtRange ( unit , range ) ; begin
32393: LD_INT 0
32395: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32396: LD_ADDR_VAR 0 3
32400: PUSH
32401: LD_VAR 0 1
32405: PPUSH
32406: CALL_OW 255
32410: PPUSH
32411: LD_VAR 0 1
32415: PPUSH
32416: CALL_OW 250
32420: PPUSH
32421: LD_VAR 0 1
32425: PPUSH
32426: CALL_OW 251
32430: PPUSH
32431: LD_VAR 0 2
32435: PPUSH
32436: CALL 30690 0 4
32440: ST_TO_ADDR
// end ;
32441: LD_VAR 0 3
32445: RET
// export function DangerInArea ( side , area ) ; begin
32446: LD_INT 0
32448: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32449: LD_ADDR_VAR 0 3
32453: PUSH
32454: LD_VAR 0 2
32458: PPUSH
32459: LD_INT 81
32461: PUSH
32462: LD_VAR 0 1
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PPUSH
32471: CALL_OW 70
32475: ST_TO_ADDR
// end ;
32476: LD_VAR 0 3
32480: RET
// export function IsExtension ( b ) ; begin
32481: LD_INT 0
32483: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32484: LD_ADDR_VAR 0 2
32488: PUSH
32489: LD_VAR 0 1
32493: PUSH
32494: LD_INT 23
32496: PUSH
32497: LD_INT 20
32499: PUSH
32500: LD_INT 22
32502: PUSH
32503: LD_INT 17
32505: PUSH
32506: LD_INT 24
32508: PUSH
32509: LD_INT 21
32511: PUSH
32512: LD_INT 19
32514: PUSH
32515: LD_INT 16
32517: PUSH
32518: LD_INT 25
32520: PUSH
32521: LD_INT 18
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: IN
32536: ST_TO_ADDR
// end ;
32537: LD_VAR 0 2
32541: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32542: LD_INT 0
32544: PPUSH
32545: PPUSH
32546: PPUSH
// result := [ ] ;
32547: LD_ADDR_VAR 0 4
32551: PUSH
32552: EMPTY
32553: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32554: LD_ADDR_VAR 0 5
32558: PUSH
32559: LD_VAR 0 2
32563: PPUSH
32564: LD_INT 21
32566: PUSH
32567: LD_INT 3
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PPUSH
32574: CALL_OW 70
32578: ST_TO_ADDR
// if not tmp then
32579: LD_VAR 0 5
32583: NOT
32584: IFFALSE 32588
// exit ;
32586: GO 32652
// if checkLink then
32588: LD_VAR 0 3
32592: IFFALSE 32642
// begin for i in tmp do
32594: LD_ADDR_VAR 0 6
32598: PUSH
32599: LD_VAR 0 5
32603: PUSH
32604: FOR_IN
32605: IFFALSE 32640
// if GetBase ( i ) <> base then
32607: LD_VAR 0 6
32611: PPUSH
32612: CALL_OW 274
32616: PUSH
32617: LD_VAR 0 1
32621: NONEQUAL
32622: IFFALSE 32638
// ComLinkToBase ( base , i ) ;
32624: LD_VAR 0 1
32628: PPUSH
32629: LD_VAR 0 6
32633: PPUSH
32634: CALL_OW 169
32638: GO 32604
32640: POP
32641: POP
// end ; result := tmp ;
32642: LD_ADDR_VAR 0 4
32646: PUSH
32647: LD_VAR 0 5
32651: ST_TO_ADDR
// end ;
32652: LD_VAR 0 4
32656: RET
// export function ComComplete ( units , b ) ; var i ; begin
32657: LD_INT 0
32659: PPUSH
32660: PPUSH
// if not units then
32661: LD_VAR 0 1
32665: NOT
32666: IFFALSE 32670
// exit ;
32668: GO 32760
// for i in units do
32670: LD_ADDR_VAR 0 4
32674: PUSH
32675: LD_VAR 0 1
32679: PUSH
32680: FOR_IN
32681: IFFALSE 32758
// if BuildingStatus ( b ) = bs_build then
32683: LD_VAR 0 2
32687: PPUSH
32688: CALL_OW 461
32692: PUSH
32693: LD_INT 1
32695: EQUAL
32696: IFFALSE 32756
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32698: LD_VAR 0 4
32702: PPUSH
32703: LD_STRING h
32705: PUSH
32706: LD_VAR 0 2
32710: PPUSH
32711: CALL_OW 250
32715: PUSH
32716: LD_VAR 0 2
32720: PPUSH
32721: CALL_OW 251
32725: PUSH
32726: LD_VAR 0 2
32730: PUSH
32731: LD_INT 0
32733: PUSH
32734: LD_INT 0
32736: PUSH
32737: LD_INT 0
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: PUSH
32749: EMPTY
32750: LIST
32751: PPUSH
32752: CALL_OW 446
32756: GO 32680
32758: POP
32759: POP
// end ;
32760: LD_VAR 0 3
32764: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32765: LD_INT 0
32767: PPUSH
32768: PPUSH
32769: PPUSH
32770: PPUSH
32771: PPUSH
32772: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32773: LD_VAR 0 1
32777: NOT
32778: PUSH
32779: LD_VAR 0 1
32783: PPUSH
32784: CALL_OW 263
32788: PUSH
32789: LD_INT 2
32791: NONEQUAL
32792: OR
32793: IFFALSE 32797
// exit ;
32795: GO 33113
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32797: LD_ADDR_VAR 0 6
32801: PUSH
32802: LD_INT 22
32804: PUSH
32805: LD_VAR 0 1
32809: PPUSH
32810: CALL_OW 255
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 2
32821: PUSH
32822: LD_INT 30
32824: PUSH
32825: LD_INT 36
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 34
32834: PUSH
32835: LD_INT 31
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: LIST
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PPUSH
32851: CALL_OW 69
32855: ST_TO_ADDR
// if not tmp then
32856: LD_VAR 0 6
32860: NOT
32861: IFFALSE 32865
// exit ;
32863: GO 33113
// result := [ ] ;
32865: LD_ADDR_VAR 0 2
32869: PUSH
32870: EMPTY
32871: ST_TO_ADDR
// for i in tmp do
32872: LD_ADDR_VAR 0 3
32876: PUSH
32877: LD_VAR 0 6
32881: PUSH
32882: FOR_IN
32883: IFFALSE 32954
// begin t := UnitsInside ( i ) ;
32885: LD_ADDR_VAR 0 4
32889: PUSH
32890: LD_VAR 0 3
32894: PPUSH
32895: CALL_OW 313
32899: ST_TO_ADDR
// if t then
32900: LD_VAR 0 4
32904: IFFALSE 32952
// for j in t do
32906: LD_ADDR_VAR 0 7
32910: PUSH
32911: LD_VAR 0 4
32915: PUSH
32916: FOR_IN
32917: IFFALSE 32950
// result := Replace ( result , result + 1 , j ) ;
32919: LD_ADDR_VAR 0 2
32923: PUSH
32924: LD_VAR 0 2
32928: PPUSH
32929: LD_VAR 0 2
32933: PUSH
32934: LD_INT 1
32936: PLUS
32937: PPUSH
32938: LD_VAR 0 7
32942: PPUSH
32943: CALL_OW 1
32947: ST_TO_ADDR
32948: GO 32916
32950: POP
32951: POP
// end ;
32952: GO 32882
32954: POP
32955: POP
// if not result then
32956: LD_VAR 0 2
32960: NOT
32961: IFFALSE 32965
// exit ;
32963: GO 33113
// mech := result [ 1 ] ;
32965: LD_ADDR_VAR 0 5
32969: PUSH
32970: LD_VAR 0 2
32974: PUSH
32975: LD_INT 1
32977: ARRAY
32978: ST_TO_ADDR
// if result > 1 then
32979: LD_VAR 0 2
32983: PUSH
32984: LD_INT 1
32986: GREATER
32987: IFFALSE 33099
// begin for i = 2 to result do
32989: LD_ADDR_VAR 0 3
32993: PUSH
32994: DOUBLE
32995: LD_INT 2
32997: DEC
32998: ST_TO_ADDR
32999: LD_VAR 0 2
33003: PUSH
33004: FOR_TO
33005: IFFALSE 33097
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33007: LD_ADDR_VAR 0 4
33011: PUSH
33012: LD_VAR 0 2
33016: PUSH
33017: LD_VAR 0 3
33021: ARRAY
33022: PPUSH
33023: LD_INT 3
33025: PPUSH
33026: CALL_OW 259
33030: PUSH
33031: LD_VAR 0 2
33035: PUSH
33036: LD_VAR 0 3
33040: ARRAY
33041: PPUSH
33042: CALL_OW 432
33046: MINUS
33047: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33048: LD_VAR 0 4
33052: PUSH
33053: LD_VAR 0 5
33057: PPUSH
33058: LD_INT 3
33060: PPUSH
33061: CALL_OW 259
33065: PUSH
33066: LD_VAR 0 5
33070: PPUSH
33071: CALL_OW 432
33075: MINUS
33076: GREATEREQUAL
33077: IFFALSE 33095
// mech := result [ i ] ;
33079: LD_ADDR_VAR 0 5
33083: PUSH
33084: LD_VAR 0 2
33088: PUSH
33089: LD_VAR 0 3
33093: ARRAY
33094: ST_TO_ADDR
// end ;
33095: GO 33004
33097: POP
33098: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33099: LD_VAR 0 1
33103: PPUSH
33104: LD_VAR 0 5
33108: PPUSH
33109: CALL_OW 135
// end ;
33113: LD_VAR 0 2
33117: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33118: LD_INT 0
33120: PPUSH
33121: PPUSH
33122: PPUSH
33123: PPUSH
33124: PPUSH
33125: PPUSH
33126: PPUSH
33127: PPUSH
33128: PPUSH
33129: PPUSH
33130: PPUSH
33131: PPUSH
33132: PPUSH
// result := [ ] ;
33133: LD_ADDR_VAR 0 7
33137: PUSH
33138: EMPTY
33139: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33140: LD_VAR 0 1
33144: PPUSH
33145: CALL_OW 266
33149: PUSH
33150: LD_INT 0
33152: PUSH
33153: LD_INT 1
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: IN
33160: NOT
33161: IFFALSE 33165
// exit ;
33163: GO 34799
// if name then
33165: LD_VAR 0 3
33169: IFFALSE 33185
// SetBName ( base_dep , name ) ;
33171: LD_VAR 0 1
33175: PPUSH
33176: LD_VAR 0 3
33180: PPUSH
33181: CALL_OW 500
// base := GetBase ( base_dep ) ;
33185: LD_ADDR_VAR 0 15
33189: PUSH
33190: LD_VAR 0 1
33194: PPUSH
33195: CALL_OW 274
33199: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33200: LD_ADDR_VAR 0 16
33204: PUSH
33205: LD_VAR 0 1
33209: PPUSH
33210: CALL_OW 255
33214: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33215: LD_ADDR_VAR 0 17
33219: PUSH
33220: LD_VAR 0 1
33224: PPUSH
33225: CALL_OW 248
33229: ST_TO_ADDR
// if sources then
33230: LD_VAR 0 5
33234: IFFALSE 33281
// for i = 1 to 3 do
33236: LD_ADDR_VAR 0 8
33240: PUSH
33241: DOUBLE
33242: LD_INT 1
33244: DEC
33245: ST_TO_ADDR
33246: LD_INT 3
33248: PUSH
33249: FOR_TO
33250: IFFALSE 33279
// AddResourceType ( base , i , sources [ i ] ) ;
33252: LD_VAR 0 15
33256: PPUSH
33257: LD_VAR 0 8
33261: PPUSH
33262: LD_VAR 0 5
33266: PUSH
33267: LD_VAR 0 8
33271: ARRAY
33272: PPUSH
33273: CALL_OW 276
33277: GO 33249
33279: POP
33280: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33281: LD_ADDR_VAR 0 18
33285: PUSH
33286: LD_VAR 0 15
33290: PPUSH
33291: LD_VAR 0 2
33295: PPUSH
33296: LD_INT 1
33298: PPUSH
33299: CALL 32542 0 3
33303: ST_TO_ADDR
// InitHc ;
33304: CALL_OW 19
// InitUc ;
33308: CALL_OW 18
// uc_side := side ;
33312: LD_ADDR_OWVAR 20
33316: PUSH
33317: LD_VAR 0 16
33321: ST_TO_ADDR
// uc_nation := nation ;
33322: LD_ADDR_OWVAR 21
33326: PUSH
33327: LD_VAR 0 17
33331: ST_TO_ADDR
// if buildings then
33332: LD_VAR 0 18
33336: IFFALSE 34658
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33338: LD_ADDR_VAR 0 19
33342: PUSH
33343: LD_VAR 0 18
33347: PPUSH
33348: LD_INT 2
33350: PUSH
33351: LD_INT 30
33353: PUSH
33354: LD_INT 29
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 30
33363: PUSH
33364: LD_INT 30
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: LIST
33375: PPUSH
33376: CALL_OW 72
33380: ST_TO_ADDR
// if tmp then
33381: LD_VAR 0 19
33385: IFFALSE 33433
// for i in tmp do
33387: LD_ADDR_VAR 0 8
33391: PUSH
33392: LD_VAR 0 19
33396: PUSH
33397: FOR_IN
33398: IFFALSE 33431
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33400: LD_VAR 0 8
33404: PPUSH
33405: CALL_OW 250
33409: PPUSH
33410: LD_VAR 0 8
33414: PPUSH
33415: CALL_OW 251
33419: PPUSH
33420: LD_VAR 0 16
33424: PPUSH
33425: CALL_OW 441
33429: GO 33397
33431: POP
33432: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33433: LD_VAR 0 18
33437: PPUSH
33438: LD_INT 2
33440: PUSH
33441: LD_INT 30
33443: PUSH
33444: LD_INT 32
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 30
33453: PUSH
33454: LD_INT 33
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: LIST
33465: PPUSH
33466: CALL_OW 72
33470: IFFALSE 33558
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33472: LD_ADDR_VAR 0 8
33476: PUSH
33477: LD_VAR 0 18
33481: PPUSH
33482: LD_INT 2
33484: PUSH
33485: LD_INT 30
33487: PUSH
33488: LD_INT 32
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 30
33497: PUSH
33498: LD_INT 33
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: LIST
33509: PPUSH
33510: CALL_OW 72
33514: PUSH
33515: FOR_IN
33516: IFFALSE 33556
// begin if not GetBWeapon ( i ) then
33518: LD_VAR 0 8
33522: PPUSH
33523: CALL_OW 269
33527: NOT
33528: IFFALSE 33554
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33530: LD_VAR 0 8
33534: PPUSH
33535: LD_VAR 0 8
33539: PPUSH
33540: LD_VAR 0 2
33544: PPUSH
33545: CALL 34804 0 2
33549: PPUSH
33550: CALL_OW 431
// end ;
33554: GO 33515
33556: POP
33557: POP
// end ; for i = 1 to personel do
33558: LD_ADDR_VAR 0 8
33562: PUSH
33563: DOUBLE
33564: LD_INT 1
33566: DEC
33567: ST_TO_ADDR
33568: LD_VAR 0 6
33572: PUSH
33573: FOR_TO
33574: IFFALSE 34638
// begin if i > 4 then
33576: LD_VAR 0 8
33580: PUSH
33581: LD_INT 4
33583: GREATER
33584: IFFALSE 33588
// break ;
33586: GO 34638
// case i of 1 :
33588: LD_VAR 0 8
33592: PUSH
33593: LD_INT 1
33595: DOUBLE
33596: EQUAL
33597: IFTRUE 33601
33599: GO 33681
33601: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33602: LD_ADDR_VAR 0 12
33606: PUSH
33607: LD_VAR 0 18
33611: PPUSH
33612: LD_INT 22
33614: PUSH
33615: LD_VAR 0 16
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 58
33626: PUSH
33627: EMPTY
33628: LIST
33629: PUSH
33630: LD_INT 2
33632: PUSH
33633: LD_INT 30
33635: PUSH
33636: LD_INT 32
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 30
33645: PUSH
33646: LD_INT 4
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 30
33655: PUSH
33656: LD_INT 5
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: LIST
33673: PPUSH
33674: CALL_OW 72
33678: ST_TO_ADDR
33679: GO 33903
33681: LD_INT 2
33683: DOUBLE
33684: EQUAL
33685: IFTRUE 33689
33687: GO 33751
33689: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33690: LD_ADDR_VAR 0 12
33694: PUSH
33695: LD_VAR 0 18
33699: PPUSH
33700: LD_INT 22
33702: PUSH
33703: LD_VAR 0 16
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 2
33714: PUSH
33715: LD_INT 30
33717: PUSH
33718: LD_INT 0
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 30
33727: PUSH
33728: LD_INT 1
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: LIST
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PPUSH
33744: CALL_OW 72
33748: ST_TO_ADDR
33749: GO 33903
33751: LD_INT 3
33753: DOUBLE
33754: EQUAL
33755: IFTRUE 33759
33757: GO 33821
33759: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33760: LD_ADDR_VAR 0 12
33764: PUSH
33765: LD_VAR 0 18
33769: PPUSH
33770: LD_INT 22
33772: PUSH
33773: LD_VAR 0 16
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PUSH
33782: LD_INT 2
33784: PUSH
33785: LD_INT 30
33787: PUSH
33788: LD_INT 2
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 30
33797: PUSH
33798: LD_INT 3
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: LIST
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PPUSH
33814: CALL_OW 72
33818: ST_TO_ADDR
33819: GO 33903
33821: LD_INT 4
33823: DOUBLE
33824: EQUAL
33825: IFTRUE 33829
33827: GO 33902
33829: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33830: LD_ADDR_VAR 0 12
33834: PUSH
33835: LD_VAR 0 18
33839: PPUSH
33840: LD_INT 22
33842: PUSH
33843: LD_VAR 0 16
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 2
33854: PUSH
33855: LD_INT 30
33857: PUSH
33858: LD_INT 6
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 30
33867: PUSH
33868: LD_INT 7
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 30
33877: PUSH
33878: LD_INT 8
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PPUSH
33895: CALL_OW 72
33899: ST_TO_ADDR
33900: GO 33903
33902: POP
// if i = 1 then
33903: LD_VAR 0 8
33907: PUSH
33908: LD_INT 1
33910: EQUAL
33911: IFFALSE 34022
// begin tmp := [ ] ;
33913: LD_ADDR_VAR 0 19
33917: PUSH
33918: EMPTY
33919: ST_TO_ADDR
// for j in f do
33920: LD_ADDR_VAR 0 9
33924: PUSH
33925: LD_VAR 0 12
33929: PUSH
33930: FOR_IN
33931: IFFALSE 34004
// if GetBType ( j ) = b_bunker then
33933: LD_VAR 0 9
33937: PPUSH
33938: CALL_OW 266
33942: PUSH
33943: LD_INT 32
33945: EQUAL
33946: IFFALSE 33973
// tmp := Insert ( tmp , 1 , j ) else
33948: LD_ADDR_VAR 0 19
33952: PUSH
33953: LD_VAR 0 19
33957: PPUSH
33958: LD_INT 1
33960: PPUSH
33961: LD_VAR 0 9
33965: PPUSH
33966: CALL_OW 2
33970: ST_TO_ADDR
33971: GO 34002
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33973: LD_ADDR_VAR 0 19
33977: PUSH
33978: LD_VAR 0 19
33982: PPUSH
33983: LD_VAR 0 19
33987: PUSH
33988: LD_INT 1
33990: PLUS
33991: PPUSH
33992: LD_VAR 0 9
33996: PPUSH
33997: CALL_OW 2
34001: ST_TO_ADDR
34002: GO 33930
34004: POP
34005: POP
// if tmp then
34006: LD_VAR 0 19
34010: IFFALSE 34022
// f := tmp ;
34012: LD_ADDR_VAR 0 12
34016: PUSH
34017: LD_VAR 0 19
34021: ST_TO_ADDR
// end ; x := personel [ i ] ;
34022: LD_ADDR_VAR 0 13
34026: PUSH
34027: LD_VAR 0 6
34031: PUSH
34032: LD_VAR 0 8
34036: ARRAY
34037: ST_TO_ADDR
// if x = - 1 then
34038: LD_VAR 0 13
34042: PUSH
34043: LD_INT 1
34045: NEG
34046: EQUAL
34047: IFFALSE 34256
// begin for j in f do
34049: LD_ADDR_VAR 0 9
34053: PUSH
34054: LD_VAR 0 12
34058: PUSH
34059: FOR_IN
34060: IFFALSE 34252
// repeat InitHc ;
34062: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34066: LD_VAR 0 9
34070: PPUSH
34071: CALL_OW 266
34075: PUSH
34076: LD_INT 5
34078: EQUAL
34079: IFFALSE 34149
// begin if UnitsInside ( j ) < 3 then
34081: LD_VAR 0 9
34085: PPUSH
34086: CALL_OW 313
34090: PUSH
34091: LD_INT 3
34093: LESS
34094: IFFALSE 34130
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34096: LD_INT 0
34098: PPUSH
34099: LD_INT 5
34101: PUSH
34102: LD_INT 8
34104: PUSH
34105: LD_INT 9
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: LIST
34112: PUSH
34113: LD_VAR 0 17
34117: ARRAY
34118: PPUSH
34119: LD_VAR 0 4
34123: PPUSH
34124: CALL_OW 380
34128: GO 34147
// PrepareHuman ( false , i , skill ) ;
34130: LD_INT 0
34132: PPUSH
34133: LD_VAR 0 8
34137: PPUSH
34138: LD_VAR 0 4
34142: PPUSH
34143: CALL_OW 380
// end else
34147: GO 34166
// PrepareHuman ( false , i , skill ) ;
34149: LD_INT 0
34151: PPUSH
34152: LD_VAR 0 8
34156: PPUSH
34157: LD_VAR 0 4
34161: PPUSH
34162: CALL_OW 380
// un := CreateHuman ;
34166: LD_ADDR_VAR 0 14
34170: PUSH
34171: CALL_OW 44
34175: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34176: LD_ADDR_VAR 0 7
34180: PUSH
34181: LD_VAR 0 7
34185: PPUSH
34186: LD_INT 1
34188: PPUSH
34189: LD_VAR 0 14
34193: PPUSH
34194: CALL_OW 2
34198: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34199: LD_VAR 0 14
34203: PPUSH
34204: LD_VAR 0 9
34208: PPUSH
34209: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34213: LD_VAR 0 9
34217: PPUSH
34218: CALL_OW 313
34222: PUSH
34223: LD_INT 6
34225: EQUAL
34226: PUSH
34227: LD_VAR 0 9
34231: PPUSH
34232: CALL_OW 266
34236: PUSH
34237: LD_INT 32
34239: PUSH
34240: LD_INT 31
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: IN
34247: OR
34248: IFFALSE 34062
34250: GO 34059
34252: POP
34253: POP
// end else
34254: GO 34636
// for j = 1 to x do
34256: LD_ADDR_VAR 0 9
34260: PUSH
34261: DOUBLE
34262: LD_INT 1
34264: DEC
34265: ST_TO_ADDR
34266: LD_VAR 0 13
34270: PUSH
34271: FOR_TO
34272: IFFALSE 34634
// begin InitHc ;
34274: CALL_OW 19
// if not f then
34278: LD_VAR 0 12
34282: NOT
34283: IFFALSE 34372
// begin PrepareHuman ( false , i , skill ) ;
34285: LD_INT 0
34287: PPUSH
34288: LD_VAR 0 8
34292: PPUSH
34293: LD_VAR 0 4
34297: PPUSH
34298: CALL_OW 380
// un := CreateHuman ;
34302: LD_ADDR_VAR 0 14
34306: PUSH
34307: CALL_OW 44
34311: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34312: LD_ADDR_VAR 0 7
34316: PUSH
34317: LD_VAR 0 7
34321: PPUSH
34322: LD_INT 1
34324: PPUSH
34325: LD_VAR 0 14
34329: PPUSH
34330: CALL_OW 2
34334: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34335: LD_VAR 0 14
34339: PPUSH
34340: LD_VAR 0 1
34344: PPUSH
34345: CALL_OW 250
34349: PPUSH
34350: LD_VAR 0 1
34354: PPUSH
34355: CALL_OW 251
34359: PPUSH
34360: LD_INT 10
34362: PPUSH
34363: LD_INT 0
34365: PPUSH
34366: CALL_OW 50
// continue ;
34370: GO 34271
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34372: LD_VAR 0 12
34376: PUSH
34377: LD_INT 1
34379: ARRAY
34380: PPUSH
34381: CALL_OW 313
34385: PUSH
34386: LD_VAR 0 12
34390: PUSH
34391: LD_INT 1
34393: ARRAY
34394: PPUSH
34395: CALL_OW 266
34399: PUSH
34400: LD_INT 32
34402: PUSH
34403: LD_INT 31
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: IN
34410: AND
34411: PUSH
34412: LD_VAR 0 12
34416: PUSH
34417: LD_INT 1
34419: ARRAY
34420: PPUSH
34421: CALL_OW 313
34425: PUSH
34426: LD_INT 6
34428: EQUAL
34429: OR
34430: IFFALSE 34450
// f := Delete ( f , 1 ) ;
34432: LD_ADDR_VAR 0 12
34436: PUSH
34437: LD_VAR 0 12
34441: PPUSH
34442: LD_INT 1
34444: PPUSH
34445: CALL_OW 3
34449: ST_TO_ADDR
// if not f then
34450: LD_VAR 0 12
34454: NOT
34455: IFFALSE 34473
// begin x := x + 2 ;
34457: LD_ADDR_VAR 0 13
34461: PUSH
34462: LD_VAR 0 13
34466: PUSH
34467: LD_INT 2
34469: PLUS
34470: ST_TO_ADDR
// continue ;
34471: GO 34271
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34473: LD_VAR 0 12
34477: PUSH
34478: LD_INT 1
34480: ARRAY
34481: PPUSH
34482: CALL_OW 266
34486: PUSH
34487: LD_INT 5
34489: EQUAL
34490: IFFALSE 34564
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34492: LD_VAR 0 12
34496: PUSH
34497: LD_INT 1
34499: ARRAY
34500: PPUSH
34501: CALL_OW 313
34505: PUSH
34506: LD_INT 3
34508: LESS
34509: IFFALSE 34545
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34511: LD_INT 0
34513: PPUSH
34514: LD_INT 5
34516: PUSH
34517: LD_INT 8
34519: PUSH
34520: LD_INT 9
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: LIST
34527: PUSH
34528: LD_VAR 0 17
34532: ARRAY
34533: PPUSH
34534: LD_VAR 0 4
34538: PPUSH
34539: CALL_OW 380
34543: GO 34562
// PrepareHuman ( false , i , skill ) ;
34545: LD_INT 0
34547: PPUSH
34548: LD_VAR 0 8
34552: PPUSH
34553: LD_VAR 0 4
34557: PPUSH
34558: CALL_OW 380
// end else
34562: GO 34581
// PrepareHuman ( false , i , skill ) ;
34564: LD_INT 0
34566: PPUSH
34567: LD_VAR 0 8
34571: PPUSH
34572: LD_VAR 0 4
34576: PPUSH
34577: CALL_OW 380
// un := CreateHuman ;
34581: LD_ADDR_VAR 0 14
34585: PUSH
34586: CALL_OW 44
34590: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34591: LD_ADDR_VAR 0 7
34595: PUSH
34596: LD_VAR 0 7
34600: PPUSH
34601: LD_INT 1
34603: PPUSH
34604: LD_VAR 0 14
34608: PPUSH
34609: CALL_OW 2
34613: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34614: LD_VAR 0 14
34618: PPUSH
34619: LD_VAR 0 12
34623: PUSH
34624: LD_INT 1
34626: ARRAY
34627: PPUSH
34628: CALL_OW 52
// end ;
34632: GO 34271
34634: POP
34635: POP
// end ;
34636: GO 33573
34638: POP
34639: POP
// result := result ^ buildings ;
34640: LD_ADDR_VAR 0 7
34644: PUSH
34645: LD_VAR 0 7
34649: PUSH
34650: LD_VAR 0 18
34654: ADD
34655: ST_TO_ADDR
// end else
34656: GO 34799
// begin for i = 1 to personel do
34658: LD_ADDR_VAR 0 8
34662: PUSH
34663: DOUBLE
34664: LD_INT 1
34666: DEC
34667: ST_TO_ADDR
34668: LD_VAR 0 6
34672: PUSH
34673: FOR_TO
34674: IFFALSE 34797
// begin if i > 4 then
34676: LD_VAR 0 8
34680: PUSH
34681: LD_INT 4
34683: GREATER
34684: IFFALSE 34688
// break ;
34686: GO 34797
// x := personel [ i ] ;
34688: LD_ADDR_VAR 0 13
34692: PUSH
34693: LD_VAR 0 6
34697: PUSH
34698: LD_VAR 0 8
34702: ARRAY
34703: ST_TO_ADDR
// if x = - 1 then
34704: LD_VAR 0 13
34708: PUSH
34709: LD_INT 1
34711: NEG
34712: EQUAL
34713: IFFALSE 34717
// continue ;
34715: GO 34673
// PrepareHuman ( false , i , skill ) ;
34717: LD_INT 0
34719: PPUSH
34720: LD_VAR 0 8
34724: PPUSH
34725: LD_VAR 0 4
34729: PPUSH
34730: CALL_OW 380
// un := CreateHuman ;
34734: LD_ADDR_VAR 0 14
34738: PUSH
34739: CALL_OW 44
34743: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34744: LD_VAR 0 14
34748: PPUSH
34749: LD_VAR 0 1
34753: PPUSH
34754: CALL_OW 250
34758: PPUSH
34759: LD_VAR 0 1
34763: PPUSH
34764: CALL_OW 251
34768: PPUSH
34769: LD_INT 10
34771: PPUSH
34772: LD_INT 0
34774: PPUSH
34775: CALL_OW 50
// result := result ^ un ;
34779: LD_ADDR_VAR 0 7
34783: PUSH
34784: LD_VAR 0 7
34788: PUSH
34789: LD_VAR 0 14
34793: ADD
34794: ST_TO_ADDR
// end ;
34795: GO 34673
34797: POP
34798: POP
// end ; end ;
34799: LD_VAR 0 7
34803: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34804: LD_INT 0
34806: PPUSH
34807: PPUSH
34808: PPUSH
34809: PPUSH
34810: PPUSH
34811: PPUSH
34812: PPUSH
34813: PPUSH
34814: PPUSH
34815: PPUSH
34816: PPUSH
34817: PPUSH
34818: PPUSH
34819: PPUSH
34820: PPUSH
34821: PPUSH
// result := false ;
34822: LD_ADDR_VAR 0 3
34826: PUSH
34827: LD_INT 0
34829: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34830: LD_VAR 0 1
34834: NOT
34835: PUSH
34836: LD_VAR 0 1
34840: PPUSH
34841: CALL_OW 266
34845: PUSH
34846: LD_INT 32
34848: PUSH
34849: LD_INT 33
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: IN
34856: NOT
34857: OR
34858: IFFALSE 34862
// exit ;
34860: GO 35971
// nat := GetNation ( tower ) ;
34862: LD_ADDR_VAR 0 12
34866: PUSH
34867: LD_VAR 0 1
34871: PPUSH
34872: CALL_OW 248
34876: ST_TO_ADDR
// side := GetSide ( tower ) ;
34877: LD_ADDR_VAR 0 16
34881: PUSH
34882: LD_VAR 0 1
34886: PPUSH
34887: CALL_OW 255
34891: ST_TO_ADDR
// x := GetX ( tower ) ;
34892: LD_ADDR_VAR 0 10
34896: PUSH
34897: LD_VAR 0 1
34901: PPUSH
34902: CALL_OW 250
34906: ST_TO_ADDR
// y := GetY ( tower ) ;
34907: LD_ADDR_VAR 0 11
34911: PUSH
34912: LD_VAR 0 1
34916: PPUSH
34917: CALL_OW 251
34921: ST_TO_ADDR
// if not x or not y then
34922: LD_VAR 0 10
34926: NOT
34927: PUSH
34928: LD_VAR 0 11
34932: NOT
34933: OR
34934: IFFALSE 34938
// exit ;
34936: GO 35971
// weapon := 0 ;
34938: LD_ADDR_VAR 0 18
34942: PUSH
34943: LD_INT 0
34945: ST_TO_ADDR
// fac_list := [ ] ;
34946: LD_ADDR_VAR 0 17
34950: PUSH
34951: EMPTY
34952: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34953: LD_ADDR_VAR 0 6
34957: PUSH
34958: LD_VAR 0 1
34962: PPUSH
34963: CALL_OW 274
34967: PPUSH
34968: LD_VAR 0 2
34972: PPUSH
34973: LD_INT 0
34975: PPUSH
34976: CALL 32542 0 3
34980: PPUSH
34981: LD_INT 30
34983: PUSH
34984: LD_INT 3
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PPUSH
34991: CALL_OW 72
34995: ST_TO_ADDR
// if not factories then
34996: LD_VAR 0 6
35000: NOT
35001: IFFALSE 35005
// exit ;
35003: GO 35971
// for i in factories do
35005: LD_ADDR_VAR 0 8
35009: PUSH
35010: LD_VAR 0 6
35014: PUSH
35015: FOR_IN
35016: IFFALSE 35041
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35018: LD_ADDR_VAR 0 17
35022: PUSH
35023: LD_VAR 0 17
35027: PUSH
35028: LD_VAR 0 8
35032: PPUSH
35033: CALL_OW 478
35037: UNION
35038: ST_TO_ADDR
35039: GO 35015
35041: POP
35042: POP
// if not fac_list then
35043: LD_VAR 0 17
35047: NOT
35048: IFFALSE 35052
// exit ;
35050: GO 35971
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35052: LD_ADDR_VAR 0 5
35056: PUSH
35057: LD_INT 4
35059: PUSH
35060: LD_INT 5
35062: PUSH
35063: LD_INT 9
35065: PUSH
35066: LD_INT 10
35068: PUSH
35069: LD_INT 6
35071: PUSH
35072: LD_INT 7
35074: PUSH
35075: LD_INT 11
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: PUSH
35087: LD_INT 27
35089: PUSH
35090: LD_INT 28
35092: PUSH
35093: LD_INT 26
35095: PUSH
35096: LD_INT 30
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 43
35107: PUSH
35108: LD_INT 44
35110: PUSH
35111: LD_INT 46
35113: PUSH
35114: LD_INT 45
35116: PUSH
35117: LD_INT 47
35119: PUSH
35120: LD_INT 49
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: LIST
35135: PUSH
35136: LD_VAR 0 12
35140: ARRAY
35141: ST_TO_ADDR
// list := list isect fac_list ;
35142: LD_ADDR_VAR 0 5
35146: PUSH
35147: LD_VAR 0 5
35151: PUSH
35152: LD_VAR 0 17
35156: ISECT
35157: ST_TO_ADDR
// if not list then
35158: LD_VAR 0 5
35162: NOT
35163: IFFALSE 35167
// exit ;
35165: GO 35971
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35167: LD_VAR 0 12
35171: PUSH
35172: LD_INT 3
35174: EQUAL
35175: PUSH
35176: LD_INT 49
35178: PUSH
35179: LD_VAR 0 5
35183: IN
35184: AND
35185: PUSH
35186: LD_INT 31
35188: PPUSH
35189: LD_VAR 0 16
35193: PPUSH
35194: CALL_OW 321
35198: PUSH
35199: LD_INT 2
35201: EQUAL
35202: AND
35203: IFFALSE 35263
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35205: LD_INT 22
35207: PUSH
35208: LD_VAR 0 16
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 35
35219: PUSH
35220: LD_INT 49
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 91
35229: PUSH
35230: LD_VAR 0 1
35234: PUSH
35235: LD_INT 10
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: LIST
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: LIST
35247: PPUSH
35248: CALL_OW 69
35252: NOT
35253: IFFALSE 35263
// weapon := ru_time_lapser ;
35255: LD_ADDR_VAR 0 18
35259: PUSH
35260: LD_INT 49
35262: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35263: LD_VAR 0 12
35267: PUSH
35268: LD_INT 1
35270: PUSH
35271: LD_INT 2
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: IN
35278: PUSH
35279: LD_INT 11
35281: PUSH
35282: LD_VAR 0 5
35286: IN
35287: PUSH
35288: LD_INT 30
35290: PUSH
35291: LD_VAR 0 5
35295: IN
35296: OR
35297: AND
35298: PUSH
35299: LD_INT 6
35301: PPUSH
35302: LD_VAR 0 16
35306: PPUSH
35307: CALL_OW 321
35311: PUSH
35312: LD_INT 2
35314: EQUAL
35315: AND
35316: IFFALSE 35481
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35318: LD_INT 22
35320: PUSH
35321: LD_VAR 0 16
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 2
35332: PUSH
35333: LD_INT 35
35335: PUSH
35336: LD_INT 11
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 35
35345: PUSH
35346: LD_INT 30
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 91
35360: PUSH
35361: LD_VAR 0 1
35365: PUSH
35366: LD_INT 18
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: LIST
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: LIST
35378: PPUSH
35379: CALL_OW 69
35383: NOT
35384: PUSH
35385: LD_INT 22
35387: PUSH
35388: LD_VAR 0 16
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 2
35399: PUSH
35400: LD_INT 30
35402: PUSH
35403: LD_INT 32
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 30
35412: PUSH
35413: LD_INT 33
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 91
35427: PUSH
35428: LD_VAR 0 1
35432: PUSH
35433: LD_INT 12
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: LIST
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: LIST
35445: PUSH
35446: EMPTY
35447: LIST
35448: PPUSH
35449: CALL_OW 69
35453: PUSH
35454: LD_INT 2
35456: GREATER
35457: AND
35458: IFFALSE 35481
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35460: LD_ADDR_VAR 0 18
35464: PUSH
35465: LD_INT 11
35467: PUSH
35468: LD_INT 30
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_VAR 0 12
35479: ARRAY
35480: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35481: LD_VAR 0 18
35485: NOT
35486: PUSH
35487: LD_INT 40
35489: PPUSH
35490: LD_VAR 0 16
35494: PPUSH
35495: CALL_OW 321
35499: PUSH
35500: LD_INT 2
35502: EQUAL
35503: AND
35504: PUSH
35505: LD_INT 7
35507: PUSH
35508: LD_VAR 0 5
35512: IN
35513: PUSH
35514: LD_INT 28
35516: PUSH
35517: LD_VAR 0 5
35521: IN
35522: OR
35523: PUSH
35524: LD_INT 45
35526: PUSH
35527: LD_VAR 0 5
35531: IN
35532: OR
35533: AND
35534: IFFALSE 35788
// begin hex := GetHexInfo ( x , y ) ;
35536: LD_ADDR_VAR 0 4
35540: PUSH
35541: LD_VAR 0 10
35545: PPUSH
35546: LD_VAR 0 11
35550: PPUSH
35551: CALL_OW 546
35555: ST_TO_ADDR
// if hex [ 1 ] then
35556: LD_VAR 0 4
35560: PUSH
35561: LD_INT 1
35563: ARRAY
35564: IFFALSE 35568
// exit ;
35566: GO 35971
// height := hex [ 2 ] ;
35568: LD_ADDR_VAR 0 15
35572: PUSH
35573: LD_VAR 0 4
35577: PUSH
35578: LD_INT 2
35580: ARRAY
35581: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35582: LD_ADDR_VAR 0 14
35586: PUSH
35587: LD_INT 0
35589: PUSH
35590: LD_INT 2
35592: PUSH
35593: LD_INT 3
35595: PUSH
35596: LD_INT 5
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: ST_TO_ADDR
// for i in tmp do
35605: LD_ADDR_VAR 0 8
35609: PUSH
35610: LD_VAR 0 14
35614: PUSH
35615: FOR_IN
35616: IFFALSE 35786
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35618: LD_ADDR_VAR 0 9
35622: PUSH
35623: LD_VAR 0 10
35627: PPUSH
35628: LD_VAR 0 8
35632: PPUSH
35633: LD_INT 5
35635: PPUSH
35636: CALL_OW 272
35640: PUSH
35641: LD_VAR 0 11
35645: PPUSH
35646: LD_VAR 0 8
35650: PPUSH
35651: LD_INT 5
35653: PPUSH
35654: CALL_OW 273
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35663: LD_VAR 0 9
35667: PUSH
35668: LD_INT 1
35670: ARRAY
35671: PPUSH
35672: LD_VAR 0 9
35676: PUSH
35677: LD_INT 2
35679: ARRAY
35680: PPUSH
35681: CALL_OW 488
35685: IFFALSE 35784
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35687: LD_ADDR_VAR 0 4
35691: PUSH
35692: LD_VAR 0 9
35696: PUSH
35697: LD_INT 1
35699: ARRAY
35700: PPUSH
35701: LD_VAR 0 9
35705: PUSH
35706: LD_INT 2
35708: ARRAY
35709: PPUSH
35710: CALL_OW 546
35714: ST_TO_ADDR
// if hex [ 1 ] then
35715: LD_VAR 0 4
35719: PUSH
35720: LD_INT 1
35722: ARRAY
35723: IFFALSE 35727
// continue ;
35725: GO 35615
// h := hex [ 2 ] ;
35727: LD_ADDR_VAR 0 13
35731: PUSH
35732: LD_VAR 0 4
35736: PUSH
35737: LD_INT 2
35739: ARRAY
35740: ST_TO_ADDR
// if h + 7 < height then
35741: LD_VAR 0 13
35745: PUSH
35746: LD_INT 7
35748: PLUS
35749: PUSH
35750: LD_VAR 0 15
35754: LESS
35755: IFFALSE 35784
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35757: LD_ADDR_VAR 0 18
35761: PUSH
35762: LD_INT 7
35764: PUSH
35765: LD_INT 28
35767: PUSH
35768: LD_INT 45
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: LIST
35775: PUSH
35776: LD_VAR 0 12
35780: ARRAY
35781: ST_TO_ADDR
// break ;
35782: GO 35786
// end ; end ; end ;
35784: GO 35615
35786: POP
35787: POP
// end ; if not weapon then
35788: LD_VAR 0 18
35792: NOT
35793: IFFALSE 35853
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35795: LD_ADDR_VAR 0 5
35799: PUSH
35800: LD_VAR 0 5
35804: PUSH
35805: LD_INT 11
35807: PUSH
35808: LD_INT 30
35810: PUSH
35811: LD_INT 49
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: LIST
35818: DIFF
35819: ST_TO_ADDR
// if not list then
35820: LD_VAR 0 5
35824: NOT
35825: IFFALSE 35829
// exit ;
35827: GO 35971
// weapon := list [ rand ( 1 , list ) ] ;
35829: LD_ADDR_VAR 0 18
35833: PUSH
35834: LD_VAR 0 5
35838: PUSH
35839: LD_INT 1
35841: PPUSH
35842: LD_VAR 0 5
35846: PPUSH
35847: CALL_OW 12
35851: ARRAY
35852: ST_TO_ADDR
// end ; if weapon then
35853: LD_VAR 0 18
35857: IFFALSE 35971
// begin tmp := CostOfWeapon ( weapon ) ;
35859: LD_ADDR_VAR 0 14
35863: PUSH
35864: LD_VAR 0 18
35868: PPUSH
35869: CALL_OW 451
35873: ST_TO_ADDR
// j := GetBase ( tower ) ;
35874: LD_ADDR_VAR 0 9
35878: PUSH
35879: LD_VAR 0 1
35883: PPUSH
35884: CALL_OW 274
35888: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35889: LD_VAR 0 9
35893: PPUSH
35894: LD_INT 1
35896: PPUSH
35897: CALL_OW 275
35901: PUSH
35902: LD_VAR 0 14
35906: PUSH
35907: LD_INT 1
35909: ARRAY
35910: GREATEREQUAL
35911: PUSH
35912: LD_VAR 0 9
35916: PPUSH
35917: LD_INT 2
35919: PPUSH
35920: CALL_OW 275
35924: PUSH
35925: LD_VAR 0 14
35929: PUSH
35930: LD_INT 2
35932: ARRAY
35933: GREATEREQUAL
35934: AND
35935: PUSH
35936: LD_VAR 0 9
35940: PPUSH
35941: LD_INT 3
35943: PPUSH
35944: CALL_OW 275
35948: PUSH
35949: LD_VAR 0 14
35953: PUSH
35954: LD_INT 3
35956: ARRAY
35957: GREATEREQUAL
35958: AND
35959: IFFALSE 35971
// result := weapon ;
35961: LD_ADDR_VAR 0 3
35965: PUSH
35966: LD_VAR 0 18
35970: ST_TO_ADDR
// end ; end ;
35971: LD_VAR 0 3
35975: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35976: LD_INT 0
35978: PPUSH
35979: PPUSH
// result := true ;
35980: LD_ADDR_VAR 0 3
35984: PUSH
35985: LD_INT 1
35987: ST_TO_ADDR
// if array1 = array2 then
35988: LD_VAR 0 1
35992: PUSH
35993: LD_VAR 0 2
35997: EQUAL
35998: IFFALSE 36058
// begin for i = 1 to array1 do
36000: LD_ADDR_VAR 0 4
36004: PUSH
36005: DOUBLE
36006: LD_INT 1
36008: DEC
36009: ST_TO_ADDR
36010: LD_VAR 0 1
36014: PUSH
36015: FOR_TO
36016: IFFALSE 36054
// if array1 [ i ] <> array2 [ i ] then
36018: LD_VAR 0 1
36022: PUSH
36023: LD_VAR 0 4
36027: ARRAY
36028: PUSH
36029: LD_VAR 0 2
36033: PUSH
36034: LD_VAR 0 4
36038: ARRAY
36039: NONEQUAL
36040: IFFALSE 36052
// begin result := false ;
36042: LD_ADDR_VAR 0 3
36046: PUSH
36047: LD_INT 0
36049: ST_TO_ADDR
// break ;
36050: GO 36054
// end ;
36052: GO 36015
36054: POP
36055: POP
// end else
36056: GO 36066
// result := false ;
36058: LD_ADDR_VAR 0 3
36062: PUSH
36063: LD_INT 0
36065: ST_TO_ADDR
// end ;
36066: LD_VAR 0 3
36070: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36071: LD_INT 0
36073: PPUSH
36074: PPUSH
// if not array1 or not array2 then
36075: LD_VAR 0 1
36079: NOT
36080: PUSH
36081: LD_VAR 0 2
36085: NOT
36086: OR
36087: IFFALSE 36091
// exit ;
36089: GO 36155
// result := true ;
36091: LD_ADDR_VAR 0 3
36095: PUSH
36096: LD_INT 1
36098: ST_TO_ADDR
// for i = 1 to array1 do
36099: LD_ADDR_VAR 0 4
36103: PUSH
36104: DOUBLE
36105: LD_INT 1
36107: DEC
36108: ST_TO_ADDR
36109: LD_VAR 0 1
36113: PUSH
36114: FOR_TO
36115: IFFALSE 36153
// if array1 [ i ] <> array2 [ i ] then
36117: LD_VAR 0 1
36121: PUSH
36122: LD_VAR 0 4
36126: ARRAY
36127: PUSH
36128: LD_VAR 0 2
36132: PUSH
36133: LD_VAR 0 4
36137: ARRAY
36138: NONEQUAL
36139: IFFALSE 36151
// begin result := false ;
36141: LD_ADDR_VAR 0 3
36145: PUSH
36146: LD_INT 0
36148: ST_TO_ADDR
// break ;
36149: GO 36153
// end ;
36151: GO 36114
36153: POP
36154: POP
// end ;
36155: LD_VAR 0 3
36159: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36160: LD_INT 0
36162: PPUSH
36163: PPUSH
36164: PPUSH
// pom := GetBase ( fac ) ;
36165: LD_ADDR_VAR 0 5
36169: PUSH
36170: LD_VAR 0 1
36174: PPUSH
36175: CALL_OW 274
36179: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36180: LD_ADDR_VAR 0 4
36184: PUSH
36185: LD_VAR 0 2
36189: PUSH
36190: LD_INT 1
36192: ARRAY
36193: PPUSH
36194: LD_VAR 0 2
36198: PUSH
36199: LD_INT 2
36201: ARRAY
36202: PPUSH
36203: LD_VAR 0 2
36207: PUSH
36208: LD_INT 3
36210: ARRAY
36211: PPUSH
36212: LD_VAR 0 2
36216: PUSH
36217: LD_INT 4
36219: ARRAY
36220: PPUSH
36221: CALL_OW 449
36225: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36226: LD_ADDR_VAR 0 3
36230: PUSH
36231: LD_VAR 0 5
36235: PPUSH
36236: LD_INT 1
36238: PPUSH
36239: CALL_OW 275
36243: PUSH
36244: LD_VAR 0 4
36248: PUSH
36249: LD_INT 1
36251: ARRAY
36252: GREATEREQUAL
36253: PUSH
36254: LD_VAR 0 5
36258: PPUSH
36259: LD_INT 2
36261: PPUSH
36262: CALL_OW 275
36266: PUSH
36267: LD_VAR 0 4
36271: PUSH
36272: LD_INT 2
36274: ARRAY
36275: GREATEREQUAL
36276: AND
36277: PUSH
36278: LD_VAR 0 5
36282: PPUSH
36283: LD_INT 3
36285: PPUSH
36286: CALL_OW 275
36290: PUSH
36291: LD_VAR 0 4
36295: PUSH
36296: LD_INT 3
36298: ARRAY
36299: GREATEREQUAL
36300: AND
36301: ST_TO_ADDR
// end ;
36302: LD_VAR 0 3
36306: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36307: LD_INT 0
36309: PPUSH
36310: PPUSH
36311: PPUSH
36312: PPUSH
// pom := GetBase ( building ) ;
36313: LD_ADDR_VAR 0 3
36317: PUSH
36318: LD_VAR 0 1
36322: PPUSH
36323: CALL_OW 274
36327: ST_TO_ADDR
// if not pom then
36328: LD_VAR 0 3
36332: NOT
36333: IFFALSE 36337
// exit ;
36335: GO 36507
// btype := GetBType ( building ) ;
36337: LD_ADDR_VAR 0 5
36341: PUSH
36342: LD_VAR 0 1
36346: PPUSH
36347: CALL_OW 266
36351: ST_TO_ADDR
// if btype = b_armoury then
36352: LD_VAR 0 5
36356: PUSH
36357: LD_INT 4
36359: EQUAL
36360: IFFALSE 36370
// btype := b_barracks ;
36362: LD_ADDR_VAR 0 5
36366: PUSH
36367: LD_INT 5
36369: ST_TO_ADDR
// if btype = b_depot then
36370: LD_VAR 0 5
36374: PUSH
36375: LD_INT 0
36377: EQUAL
36378: IFFALSE 36388
// btype := b_warehouse ;
36380: LD_ADDR_VAR 0 5
36384: PUSH
36385: LD_INT 1
36387: ST_TO_ADDR
// if btype = b_workshop then
36388: LD_VAR 0 5
36392: PUSH
36393: LD_INT 2
36395: EQUAL
36396: IFFALSE 36406
// btype := b_factory ;
36398: LD_ADDR_VAR 0 5
36402: PUSH
36403: LD_INT 3
36405: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36406: LD_ADDR_VAR 0 4
36410: PUSH
36411: LD_VAR 0 5
36415: PPUSH
36416: LD_VAR 0 1
36420: PPUSH
36421: CALL_OW 248
36425: PPUSH
36426: CALL_OW 450
36430: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36431: LD_ADDR_VAR 0 2
36435: PUSH
36436: LD_VAR 0 3
36440: PPUSH
36441: LD_INT 1
36443: PPUSH
36444: CALL_OW 275
36448: PUSH
36449: LD_VAR 0 4
36453: PUSH
36454: LD_INT 1
36456: ARRAY
36457: GREATEREQUAL
36458: PUSH
36459: LD_VAR 0 3
36463: PPUSH
36464: LD_INT 2
36466: PPUSH
36467: CALL_OW 275
36471: PUSH
36472: LD_VAR 0 4
36476: PUSH
36477: LD_INT 2
36479: ARRAY
36480: GREATEREQUAL
36481: AND
36482: PUSH
36483: LD_VAR 0 3
36487: PPUSH
36488: LD_INT 3
36490: PPUSH
36491: CALL_OW 275
36495: PUSH
36496: LD_VAR 0 4
36500: PUSH
36501: LD_INT 3
36503: ARRAY
36504: GREATEREQUAL
36505: AND
36506: ST_TO_ADDR
// end ;
36507: LD_VAR 0 2
36511: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36512: LD_INT 0
36514: PPUSH
36515: PPUSH
36516: PPUSH
// pom := GetBase ( building ) ;
36517: LD_ADDR_VAR 0 4
36521: PUSH
36522: LD_VAR 0 1
36526: PPUSH
36527: CALL_OW 274
36531: ST_TO_ADDR
// if not pom then
36532: LD_VAR 0 4
36536: NOT
36537: IFFALSE 36541
// exit ;
36539: GO 36642
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36541: LD_ADDR_VAR 0 5
36545: PUSH
36546: LD_VAR 0 2
36550: PPUSH
36551: LD_VAR 0 1
36555: PPUSH
36556: CALL_OW 248
36560: PPUSH
36561: CALL_OW 450
36565: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36566: LD_ADDR_VAR 0 3
36570: PUSH
36571: LD_VAR 0 4
36575: PPUSH
36576: LD_INT 1
36578: PPUSH
36579: CALL_OW 275
36583: PUSH
36584: LD_VAR 0 5
36588: PUSH
36589: LD_INT 1
36591: ARRAY
36592: GREATEREQUAL
36593: PUSH
36594: LD_VAR 0 4
36598: PPUSH
36599: LD_INT 2
36601: PPUSH
36602: CALL_OW 275
36606: PUSH
36607: LD_VAR 0 5
36611: PUSH
36612: LD_INT 2
36614: ARRAY
36615: GREATEREQUAL
36616: AND
36617: PUSH
36618: LD_VAR 0 4
36622: PPUSH
36623: LD_INT 3
36625: PPUSH
36626: CALL_OW 275
36630: PUSH
36631: LD_VAR 0 5
36635: PUSH
36636: LD_INT 3
36638: ARRAY
36639: GREATEREQUAL
36640: AND
36641: ST_TO_ADDR
// end ;
36642: LD_VAR 0 3
36646: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36647: LD_INT 0
36649: PPUSH
36650: PPUSH
36651: PPUSH
36652: PPUSH
36653: PPUSH
36654: PPUSH
36655: PPUSH
36656: PPUSH
36657: PPUSH
36658: PPUSH
36659: PPUSH
// result := false ;
36660: LD_ADDR_VAR 0 8
36664: PUSH
36665: LD_INT 0
36667: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36668: LD_VAR 0 5
36672: NOT
36673: PUSH
36674: LD_VAR 0 1
36678: NOT
36679: OR
36680: PUSH
36681: LD_VAR 0 2
36685: NOT
36686: OR
36687: PUSH
36688: LD_VAR 0 3
36692: NOT
36693: OR
36694: IFFALSE 36698
// exit ;
36696: GO 37512
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36698: LD_ADDR_VAR 0 14
36702: PUSH
36703: LD_VAR 0 1
36707: PPUSH
36708: LD_VAR 0 2
36712: PPUSH
36713: LD_VAR 0 3
36717: PPUSH
36718: LD_VAR 0 4
36722: PPUSH
36723: LD_VAR 0 5
36727: PUSH
36728: LD_INT 1
36730: ARRAY
36731: PPUSH
36732: CALL_OW 248
36736: PPUSH
36737: LD_INT 0
36739: PPUSH
36740: CALL 38749 0 6
36744: ST_TO_ADDR
// if not hexes then
36745: LD_VAR 0 14
36749: NOT
36750: IFFALSE 36754
// exit ;
36752: GO 37512
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36754: LD_ADDR_VAR 0 17
36758: PUSH
36759: LD_VAR 0 5
36763: PPUSH
36764: LD_INT 22
36766: PUSH
36767: LD_VAR 0 13
36771: PPUSH
36772: CALL_OW 255
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 2
36783: PUSH
36784: LD_INT 30
36786: PUSH
36787: LD_INT 0
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 30
36796: PUSH
36797: LD_INT 1
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: LIST
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PPUSH
36813: CALL_OW 72
36817: ST_TO_ADDR
// for i = 1 to hexes do
36818: LD_ADDR_VAR 0 9
36822: PUSH
36823: DOUBLE
36824: LD_INT 1
36826: DEC
36827: ST_TO_ADDR
36828: LD_VAR 0 14
36832: PUSH
36833: FOR_TO
36834: IFFALSE 37510
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36836: LD_ADDR_VAR 0 13
36840: PUSH
36841: LD_VAR 0 14
36845: PUSH
36846: LD_VAR 0 9
36850: ARRAY
36851: PUSH
36852: LD_INT 1
36854: ARRAY
36855: PPUSH
36856: LD_VAR 0 14
36860: PUSH
36861: LD_VAR 0 9
36865: ARRAY
36866: PUSH
36867: LD_INT 2
36869: ARRAY
36870: PPUSH
36871: CALL_OW 428
36875: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36876: LD_VAR 0 14
36880: PUSH
36881: LD_VAR 0 9
36885: ARRAY
36886: PUSH
36887: LD_INT 1
36889: ARRAY
36890: PPUSH
36891: LD_VAR 0 14
36895: PUSH
36896: LD_VAR 0 9
36900: ARRAY
36901: PUSH
36902: LD_INT 2
36904: ARRAY
36905: PPUSH
36906: CALL_OW 351
36910: PUSH
36911: LD_VAR 0 14
36915: PUSH
36916: LD_VAR 0 9
36920: ARRAY
36921: PUSH
36922: LD_INT 1
36924: ARRAY
36925: PPUSH
36926: LD_VAR 0 14
36930: PUSH
36931: LD_VAR 0 9
36935: ARRAY
36936: PUSH
36937: LD_INT 2
36939: ARRAY
36940: PPUSH
36941: CALL_OW 488
36945: NOT
36946: OR
36947: PUSH
36948: LD_VAR 0 13
36952: PPUSH
36953: CALL_OW 247
36957: PUSH
36958: LD_INT 3
36960: EQUAL
36961: OR
36962: IFFALSE 36968
// exit ;
36964: POP
36965: POP
36966: GO 37512
// if not tmp then
36968: LD_VAR 0 13
36972: NOT
36973: IFFALSE 36977
// continue ;
36975: GO 36833
// result := true ;
36977: LD_ADDR_VAR 0 8
36981: PUSH
36982: LD_INT 1
36984: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36985: LD_VAR 0 6
36989: PUSH
36990: LD_VAR 0 13
36994: PPUSH
36995: CALL_OW 247
36999: PUSH
37000: LD_INT 2
37002: EQUAL
37003: AND
37004: PUSH
37005: LD_VAR 0 13
37009: PPUSH
37010: CALL_OW 263
37014: PUSH
37015: LD_INT 1
37017: EQUAL
37018: AND
37019: IFFALSE 37183
// begin if IsDrivenBy ( tmp ) then
37021: LD_VAR 0 13
37025: PPUSH
37026: CALL_OW 311
37030: IFFALSE 37034
// continue ;
37032: GO 36833
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37034: LD_VAR 0 6
37038: PPUSH
37039: LD_INT 3
37041: PUSH
37042: LD_INT 60
37044: PUSH
37045: EMPTY
37046: LIST
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 3
37054: PUSH
37055: LD_INT 55
37057: PUSH
37058: EMPTY
37059: LIST
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PPUSH
37069: CALL_OW 72
37073: IFFALSE 37181
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37075: LD_ADDR_VAR 0 18
37079: PUSH
37080: LD_VAR 0 6
37084: PPUSH
37085: LD_INT 3
37087: PUSH
37088: LD_INT 60
37090: PUSH
37091: EMPTY
37092: LIST
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 3
37100: PUSH
37101: LD_INT 55
37103: PUSH
37104: EMPTY
37105: LIST
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PPUSH
37115: CALL_OW 72
37119: PUSH
37120: LD_INT 1
37122: ARRAY
37123: ST_TO_ADDR
// if IsInUnit ( driver ) then
37124: LD_VAR 0 18
37128: PPUSH
37129: CALL_OW 310
37133: IFFALSE 37144
// ComExit ( driver ) ;
37135: LD_VAR 0 18
37139: PPUSH
37140: CALL 61933 0 1
// AddComEnterUnit ( driver , tmp ) ;
37144: LD_VAR 0 18
37148: PPUSH
37149: LD_VAR 0 13
37153: PPUSH
37154: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37158: LD_VAR 0 18
37162: PPUSH
37163: LD_VAR 0 7
37167: PPUSH
37168: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37172: LD_VAR 0 18
37176: PPUSH
37177: CALL_OW 181
// end ; continue ;
37181: GO 36833
// end ; if not cleaners or not tmp in cleaners then
37183: LD_VAR 0 6
37187: NOT
37188: PUSH
37189: LD_VAR 0 13
37193: PUSH
37194: LD_VAR 0 6
37198: IN
37199: NOT
37200: OR
37201: IFFALSE 37508
// begin if dep then
37203: LD_VAR 0 17
37207: IFFALSE 37343
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37209: LD_ADDR_VAR 0 16
37213: PUSH
37214: LD_VAR 0 17
37218: PUSH
37219: LD_INT 1
37221: ARRAY
37222: PPUSH
37223: CALL_OW 250
37227: PPUSH
37228: LD_VAR 0 17
37232: PUSH
37233: LD_INT 1
37235: ARRAY
37236: PPUSH
37237: CALL_OW 254
37241: PPUSH
37242: LD_INT 5
37244: PPUSH
37245: CALL_OW 272
37249: PUSH
37250: LD_VAR 0 17
37254: PUSH
37255: LD_INT 1
37257: ARRAY
37258: PPUSH
37259: CALL_OW 251
37263: PPUSH
37264: LD_VAR 0 17
37268: PUSH
37269: LD_INT 1
37271: ARRAY
37272: PPUSH
37273: CALL_OW 254
37277: PPUSH
37278: LD_INT 5
37280: PPUSH
37281: CALL_OW 273
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37290: LD_VAR 0 16
37294: PUSH
37295: LD_INT 1
37297: ARRAY
37298: PPUSH
37299: LD_VAR 0 16
37303: PUSH
37304: LD_INT 2
37306: ARRAY
37307: PPUSH
37308: CALL_OW 488
37312: IFFALSE 37343
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37314: LD_VAR 0 13
37318: PPUSH
37319: LD_VAR 0 16
37323: PUSH
37324: LD_INT 1
37326: ARRAY
37327: PPUSH
37328: LD_VAR 0 16
37332: PUSH
37333: LD_INT 2
37335: ARRAY
37336: PPUSH
37337: CALL_OW 111
// continue ;
37341: GO 36833
// end ; end ; r := GetDir ( tmp ) ;
37343: LD_ADDR_VAR 0 15
37347: PUSH
37348: LD_VAR 0 13
37352: PPUSH
37353: CALL_OW 254
37357: ST_TO_ADDR
// if r = 5 then
37358: LD_VAR 0 15
37362: PUSH
37363: LD_INT 5
37365: EQUAL
37366: IFFALSE 37376
// r := 0 ;
37368: LD_ADDR_VAR 0 15
37372: PUSH
37373: LD_INT 0
37375: ST_TO_ADDR
// for j = r to 5 do
37376: LD_ADDR_VAR 0 10
37380: PUSH
37381: DOUBLE
37382: LD_VAR 0 15
37386: DEC
37387: ST_TO_ADDR
37388: LD_INT 5
37390: PUSH
37391: FOR_TO
37392: IFFALSE 37506
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37394: LD_ADDR_VAR 0 11
37398: PUSH
37399: LD_VAR 0 13
37403: PPUSH
37404: CALL_OW 250
37408: PPUSH
37409: LD_VAR 0 10
37413: PPUSH
37414: LD_INT 2
37416: PPUSH
37417: CALL_OW 272
37421: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37422: LD_ADDR_VAR 0 12
37426: PUSH
37427: LD_VAR 0 13
37431: PPUSH
37432: CALL_OW 251
37436: PPUSH
37437: LD_VAR 0 10
37441: PPUSH
37442: LD_INT 2
37444: PPUSH
37445: CALL_OW 273
37449: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37450: LD_VAR 0 11
37454: PPUSH
37455: LD_VAR 0 12
37459: PPUSH
37460: CALL_OW 488
37464: PUSH
37465: LD_VAR 0 11
37469: PPUSH
37470: LD_VAR 0 12
37474: PPUSH
37475: CALL_OW 428
37479: NOT
37480: AND
37481: IFFALSE 37504
// begin ComMoveXY ( tmp , _x , _y ) ;
37483: LD_VAR 0 13
37487: PPUSH
37488: LD_VAR 0 11
37492: PPUSH
37493: LD_VAR 0 12
37497: PPUSH
37498: CALL_OW 111
// break ;
37502: GO 37506
// end ; end ;
37504: GO 37391
37506: POP
37507: POP
// end ; end ;
37508: GO 36833
37510: POP
37511: POP
// end ;
37512: LD_VAR 0 8
37516: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37517: LD_INT 0
37519: PPUSH
// result := true ;
37520: LD_ADDR_VAR 0 3
37524: PUSH
37525: LD_INT 1
37527: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37528: LD_VAR 0 2
37532: PUSH
37533: LD_INT 24
37535: DOUBLE
37536: EQUAL
37537: IFTRUE 37547
37539: LD_INT 33
37541: DOUBLE
37542: EQUAL
37543: IFTRUE 37547
37545: GO 37572
37547: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37548: LD_ADDR_VAR 0 3
37552: PUSH
37553: LD_INT 32
37555: PPUSH
37556: LD_VAR 0 1
37560: PPUSH
37561: CALL_OW 321
37565: PUSH
37566: LD_INT 2
37568: EQUAL
37569: ST_TO_ADDR
37570: GO 37892
37572: LD_INT 20
37574: DOUBLE
37575: EQUAL
37576: IFTRUE 37580
37578: GO 37605
37580: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37581: LD_ADDR_VAR 0 3
37585: PUSH
37586: LD_INT 6
37588: PPUSH
37589: LD_VAR 0 1
37593: PPUSH
37594: CALL_OW 321
37598: PUSH
37599: LD_INT 2
37601: EQUAL
37602: ST_TO_ADDR
37603: GO 37892
37605: LD_INT 22
37607: DOUBLE
37608: EQUAL
37609: IFTRUE 37619
37611: LD_INT 36
37613: DOUBLE
37614: EQUAL
37615: IFTRUE 37619
37617: GO 37644
37619: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37620: LD_ADDR_VAR 0 3
37624: PUSH
37625: LD_INT 15
37627: PPUSH
37628: LD_VAR 0 1
37632: PPUSH
37633: CALL_OW 321
37637: PUSH
37638: LD_INT 2
37640: EQUAL
37641: ST_TO_ADDR
37642: GO 37892
37644: LD_INT 30
37646: DOUBLE
37647: EQUAL
37648: IFTRUE 37652
37650: GO 37677
37652: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37653: LD_ADDR_VAR 0 3
37657: PUSH
37658: LD_INT 20
37660: PPUSH
37661: LD_VAR 0 1
37665: PPUSH
37666: CALL_OW 321
37670: PUSH
37671: LD_INT 2
37673: EQUAL
37674: ST_TO_ADDR
37675: GO 37892
37677: LD_INT 28
37679: DOUBLE
37680: EQUAL
37681: IFTRUE 37691
37683: LD_INT 21
37685: DOUBLE
37686: EQUAL
37687: IFTRUE 37691
37689: GO 37716
37691: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37692: LD_ADDR_VAR 0 3
37696: PUSH
37697: LD_INT 21
37699: PPUSH
37700: LD_VAR 0 1
37704: PPUSH
37705: CALL_OW 321
37709: PUSH
37710: LD_INT 2
37712: EQUAL
37713: ST_TO_ADDR
37714: GO 37892
37716: LD_INT 16
37718: DOUBLE
37719: EQUAL
37720: IFTRUE 37724
37722: GO 37751
37724: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37725: LD_ADDR_VAR 0 3
37729: PUSH
37730: LD_EXP 71
37734: PPUSH
37735: LD_VAR 0 1
37739: PPUSH
37740: CALL_OW 321
37744: PUSH
37745: LD_INT 2
37747: EQUAL
37748: ST_TO_ADDR
37749: GO 37892
37751: LD_INT 19
37753: DOUBLE
37754: EQUAL
37755: IFTRUE 37765
37757: LD_INT 23
37759: DOUBLE
37760: EQUAL
37761: IFTRUE 37765
37763: GO 37792
37765: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37766: LD_ADDR_VAR 0 3
37770: PUSH
37771: LD_EXP 70
37775: PPUSH
37776: LD_VAR 0 1
37780: PPUSH
37781: CALL_OW 321
37785: PUSH
37786: LD_INT 2
37788: EQUAL
37789: ST_TO_ADDR
37790: GO 37892
37792: LD_INT 17
37794: DOUBLE
37795: EQUAL
37796: IFTRUE 37800
37798: GO 37825
37800: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37801: LD_ADDR_VAR 0 3
37805: PUSH
37806: LD_INT 39
37808: PPUSH
37809: LD_VAR 0 1
37813: PPUSH
37814: CALL_OW 321
37818: PUSH
37819: LD_INT 2
37821: EQUAL
37822: ST_TO_ADDR
37823: GO 37892
37825: LD_INT 18
37827: DOUBLE
37828: EQUAL
37829: IFTRUE 37833
37831: GO 37858
37833: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37834: LD_ADDR_VAR 0 3
37838: PUSH
37839: LD_INT 40
37841: PPUSH
37842: LD_VAR 0 1
37846: PPUSH
37847: CALL_OW 321
37851: PUSH
37852: LD_INT 2
37854: EQUAL
37855: ST_TO_ADDR
37856: GO 37892
37858: LD_INT 27
37860: DOUBLE
37861: EQUAL
37862: IFTRUE 37866
37864: GO 37891
37866: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37867: LD_ADDR_VAR 0 3
37871: PUSH
37872: LD_INT 35
37874: PPUSH
37875: LD_VAR 0 1
37879: PPUSH
37880: CALL_OW 321
37884: PUSH
37885: LD_INT 2
37887: EQUAL
37888: ST_TO_ADDR
37889: GO 37892
37891: POP
// end ;
37892: LD_VAR 0 3
37896: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37897: LD_INT 0
37899: PPUSH
37900: PPUSH
37901: PPUSH
37902: PPUSH
37903: PPUSH
37904: PPUSH
37905: PPUSH
37906: PPUSH
37907: PPUSH
37908: PPUSH
37909: PPUSH
// result := false ;
37910: LD_ADDR_VAR 0 6
37914: PUSH
37915: LD_INT 0
37917: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37918: LD_VAR 0 1
37922: NOT
37923: PUSH
37924: LD_VAR 0 1
37928: PPUSH
37929: CALL_OW 266
37933: PUSH
37934: LD_INT 0
37936: PUSH
37937: LD_INT 1
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: IN
37944: NOT
37945: OR
37946: PUSH
37947: LD_VAR 0 2
37951: NOT
37952: OR
37953: PUSH
37954: LD_VAR 0 5
37958: PUSH
37959: LD_INT 0
37961: PUSH
37962: LD_INT 1
37964: PUSH
37965: LD_INT 2
37967: PUSH
37968: LD_INT 3
37970: PUSH
37971: LD_INT 4
37973: PUSH
37974: LD_INT 5
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: IN
37985: NOT
37986: OR
37987: PUSH
37988: LD_VAR 0 3
37992: PPUSH
37993: LD_VAR 0 4
37997: PPUSH
37998: CALL_OW 488
38002: NOT
38003: OR
38004: IFFALSE 38008
// exit ;
38006: GO 38744
// side := GetSide ( depot ) ;
38008: LD_ADDR_VAR 0 9
38012: PUSH
38013: LD_VAR 0 1
38017: PPUSH
38018: CALL_OW 255
38022: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38023: LD_VAR 0 9
38027: PPUSH
38028: LD_VAR 0 2
38032: PPUSH
38033: CALL 37517 0 2
38037: NOT
38038: IFFALSE 38042
// exit ;
38040: GO 38744
// pom := GetBase ( depot ) ;
38042: LD_ADDR_VAR 0 10
38046: PUSH
38047: LD_VAR 0 1
38051: PPUSH
38052: CALL_OW 274
38056: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38057: LD_ADDR_VAR 0 11
38061: PUSH
38062: LD_VAR 0 2
38066: PPUSH
38067: LD_VAR 0 1
38071: PPUSH
38072: CALL_OW 248
38076: PPUSH
38077: CALL_OW 450
38081: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38082: LD_VAR 0 10
38086: PPUSH
38087: LD_INT 1
38089: PPUSH
38090: CALL_OW 275
38094: PUSH
38095: LD_VAR 0 11
38099: PUSH
38100: LD_INT 1
38102: ARRAY
38103: GREATEREQUAL
38104: PUSH
38105: LD_VAR 0 10
38109: PPUSH
38110: LD_INT 2
38112: PPUSH
38113: CALL_OW 275
38117: PUSH
38118: LD_VAR 0 11
38122: PUSH
38123: LD_INT 2
38125: ARRAY
38126: GREATEREQUAL
38127: AND
38128: PUSH
38129: LD_VAR 0 10
38133: PPUSH
38134: LD_INT 3
38136: PPUSH
38137: CALL_OW 275
38141: PUSH
38142: LD_VAR 0 11
38146: PUSH
38147: LD_INT 3
38149: ARRAY
38150: GREATEREQUAL
38151: AND
38152: NOT
38153: IFFALSE 38157
// exit ;
38155: GO 38744
// if GetBType ( depot ) = b_depot then
38157: LD_VAR 0 1
38161: PPUSH
38162: CALL_OW 266
38166: PUSH
38167: LD_INT 0
38169: EQUAL
38170: IFFALSE 38182
// dist := 28 else
38172: LD_ADDR_VAR 0 14
38176: PUSH
38177: LD_INT 28
38179: ST_TO_ADDR
38180: GO 38190
// dist := 36 ;
38182: LD_ADDR_VAR 0 14
38186: PUSH
38187: LD_INT 36
38189: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38190: LD_VAR 0 1
38194: PPUSH
38195: LD_VAR 0 3
38199: PPUSH
38200: LD_VAR 0 4
38204: PPUSH
38205: CALL_OW 297
38209: PUSH
38210: LD_VAR 0 14
38214: GREATER
38215: IFFALSE 38219
// exit ;
38217: GO 38744
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38219: LD_ADDR_VAR 0 12
38223: PUSH
38224: LD_VAR 0 2
38228: PPUSH
38229: LD_VAR 0 3
38233: PPUSH
38234: LD_VAR 0 4
38238: PPUSH
38239: LD_VAR 0 5
38243: PPUSH
38244: LD_VAR 0 1
38248: PPUSH
38249: CALL_OW 248
38253: PPUSH
38254: LD_INT 0
38256: PPUSH
38257: CALL 38749 0 6
38261: ST_TO_ADDR
// if not hexes then
38262: LD_VAR 0 12
38266: NOT
38267: IFFALSE 38271
// exit ;
38269: GO 38744
// hex := GetHexInfo ( x , y ) ;
38271: LD_ADDR_VAR 0 15
38275: PUSH
38276: LD_VAR 0 3
38280: PPUSH
38281: LD_VAR 0 4
38285: PPUSH
38286: CALL_OW 546
38290: ST_TO_ADDR
// if hex [ 1 ] then
38291: LD_VAR 0 15
38295: PUSH
38296: LD_INT 1
38298: ARRAY
38299: IFFALSE 38303
// exit ;
38301: GO 38744
// height := hex [ 2 ] ;
38303: LD_ADDR_VAR 0 13
38307: PUSH
38308: LD_VAR 0 15
38312: PUSH
38313: LD_INT 2
38315: ARRAY
38316: ST_TO_ADDR
// for i = 1 to hexes do
38317: LD_ADDR_VAR 0 7
38321: PUSH
38322: DOUBLE
38323: LD_INT 1
38325: DEC
38326: ST_TO_ADDR
38327: LD_VAR 0 12
38331: PUSH
38332: FOR_TO
38333: IFFALSE 38663
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38335: LD_VAR 0 12
38339: PUSH
38340: LD_VAR 0 7
38344: ARRAY
38345: PUSH
38346: LD_INT 1
38348: ARRAY
38349: PPUSH
38350: LD_VAR 0 12
38354: PUSH
38355: LD_VAR 0 7
38359: ARRAY
38360: PUSH
38361: LD_INT 2
38363: ARRAY
38364: PPUSH
38365: CALL_OW 488
38369: NOT
38370: PUSH
38371: LD_VAR 0 12
38375: PUSH
38376: LD_VAR 0 7
38380: ARRAY
38381: PUSH
38382: LD_INT 1
38384: ARRAY
38385: PPUSH
38386: LD_VAR 0 12
38390: PUSH
38391: LD_VAR 0 7
38395: ARRAY
38396: PUSH
38397: LD_INT 2
38399: ARRAY
38400: PPUSH
38401: CALL_OW 428
38405: PUSH
38406: LD_INT 0
38408: GREATER
38409: OR
38410: PUSH
38411: LD_VAR 0 12
38415: PUSH
38416: LD_VAR 0 7
38420: ARRAY
38421: PUSH
38422: LD_INT 1
38424: ARRAY
38425: PPUSH
38426: LD_VAR 0 12
38430: PUSH
38431: LD_VAR 0 7
38435: ARRAY
38436: PUSH
38437: LD_INT 2
38439: ARRAY
38440: PPUSH
38441: CALL_OW 351
38445: OR
38446: IFFALSE 38452
// exit ;
38448: POP
38449: POP
38450: GO 38744
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38452: LD_ADDR_VAR 0 8
38456: PUSH
38457: LD_VAR 0 12
38461: PUSH
38462: LD_VAR 0 7
38466: ARRAY
38467: PUSH
38468: LD_INT 1
38470: ARRAY
38471: PPUSH
38472: LD_VAR 0 12
38476: PUSH
38477: LD_VAR 0 7
38481: ARRAY
38482: PUSH
38483: LD_INT 2
38485: ARRAY
38486: PPUSH
38487: CALL_OW 546
38491: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38492: LD_VAR 0 8
38496: PUSH
38497: LD_INT 1
38499: ARRAY
38500: PUSH
38501: LD_VAR 0 8
38505: PUSH
38506: LD_INT 2
38508: ARRAY
38509: PUSH
38510: LD_VAR 0 13
38514: PUSH
38515: LD_INT 2
38517: PLUS
38518: GREATER
38519: OR
38520: PUSH
38521: LD_VAR 0 8
38525: PUSH
38526: LD_INT 2
38528: ARRAY
38529: PUSH
38530: LD_VAR 0 13
38534: PUSH
38535: LD_INT 2
38537: MINUS
38538: LESS
38539: OR
38540: PUSH
38541: LD_VAR 0 8
38545: PUSH
38546: LD_INT 3
38548: ARRAY
38549: PUSH
38550: LD_INT 0
38552: PUSH
38553: LD_INT 8
38555: PUSH
38556: LD_INT 9
38558: PUSH
38559: LD_INT 10
38561: PUSH
38562: LD_INT 11
38564: PUSH
38565: LD_INT 12
38567: PUSH
38568: LD_INT 13
38570: PUSH
38571: LD_INT 16
38573: PUSH
38574: LD_INT 17
38576: PUSH
38577: LD_INT 18
38579: PUSH
38580: LD_INT 19
38582: PUSH
38583: LD_INT 20
38585: PUSH
38586: LD_INT 21
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: IN
38604: NOT
38605: OR
38606: PUSH
38607: LD_VAR 0 8
38611: PUSH
38612: LD_INT 5
38614: ARRAY
38615: NOT
38616: OR
38617: PUSH
38618: LD_VAR 0 8
38622: PUSH
38623: LD_INT 6
38625: ARRAY
38626: PUSH
38627: LD_INT 1
38629: PUSH
38630: LD_INT 2
38632: PUSH
38633: LD_INT 7
38635: PUSH
38636: LD_INT 9
38638: PUSH
38639: LD_INT 10
38641: PUSH
38642: LD_INT 11
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: IN
38653: NOT
38654: OR
38655: IFFALSE 38661
// exit ;
38657: POP
38658: POP
38659: GO 38744
// end ;
38661: GO 38332
38663: POP
38664: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38665: LD_VAR 0 9
38669: PPUSH
38670: LD_VAR 0 3
38674: PPUSH
38675: LD_VAR 0 4
38679: PPUSH
38680: LD_INT 20
38682: PPUSH
38683: CALL 30690 0 4
38687: PUSH
38688: LD_INT 4
38690: ARRAY
38691: IFFALSE 38695
// exit ;
38693: GO 38744
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38695: LD_VAR 0 2
38699: PUSH
38700: LD_INT 29
38702: PUSH
38703: LD_INT 30
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: IN
38710: PUSH
38711: LD_VAR 0 3
38715: PPUSH
38716: LD_VAR 0 4
38720: PPUSH
38721: LD_VAR 0 9
38725: PPUSH
38726: CALL_OW 440
38730: NOT
38731: AND
38732: IFFALSE 38736
// exit ;
38734: GO 38744
// result := true ;
38736: LD_ADDR_VAR 0 6
38740: PUSH
38741: LD_INT 1
38743: ST_TO_ADDR
// end ;
38744: LD_VAR 0 6
38748: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38749: LD_INT 0
38751: PPUSH
38752: PPUSH
38753: PPUSH
38754: PPUSH
38755: PPUSH
38756: PPUSH
38757: PPUSH
38758: PPUSH
38759: PPUSH
38760: PPUSH
38761: PPUSH
38762: PPUSH
38763: PPUSH
38764: PPUSH
38765: PPUSH
38766: PPUSH
38767: PPUSH
38768: PPUSH
38769: PPUSH
38770: PPUSH
38771: PPUSH
38772: PPUSH
38773: PPUSH
38774: PPUSH
38775: PPUSH
38776: PPUSH
38777: PPUSH
38778: PPUSH
38779: PPUSH
38780: PPUSH
38781: PPUSH
38782: PPUSH
38783: PPUSH
38784: PPUSH
38785: PPUSH
38786: PPUSH
38787: PPUSH
38788: PPUSH
38789: PPUSH
38790: PPUSH
38791: PPUSH
38792: PPUSH
38793: PPUSH
38794: PPUSH
38795: PPUSH
38796: PPUSH
38797: PPUSH
38798: PPUSH
38799: PPUSH
38800: PPUSH
38801: PPUSH
38802: PPUSH
38803: PPUSH
38804: PPUSH
38805: PPUSH
38806: PPUSH
38807: PPUSH
38808: PPUSH
// result = [ ] ;
38809: LD_ADDR_VAR 0 7
38813: PUSH
38814: EMPTY
38815: ST_TO_ADDR
// temp_list = [ ] ;
38816: LD_ADDR_VAR 0 9
38820: PUSH
38821: EMPTY
38822: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38823: LD_VAR 0 4
38827: PUSH
38828: LD_INT 0
38830: PUSH
38831: LD_INT 1
38833: PUSH
38834: LD_INT 2
38836: PUSH
38837: LD_INT 3
38839: PUSH
38840: LD_INT 4
38842: PUSH
38843: LD_INT 5
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: IN
38854: NOT
38855: PUSH
38856: LD_VAR 0 1
38860: PUSH
38861: LD_INT 0
38863: PUSH
38864: LD_INT 1
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: IN
38871: PUSH
38872: LD_VAR 0 5
38876: PUSH
38877: LD_INT 1
38879: PUSH
38880: LD_INT 2
38882: PUSH
38883: LD_INT 3
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: LIST
38890: IN
38891: NOT
38892: AND
38893: OR
38894: IFFALSE 38898
// exit ;
38896: GO 57289
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38898: LD_VAR 0 1
38902: PUSH
38903: LD_INT 6
38905: PUSH
38906: LD_INT 7
38908: PUSH
38909: LD_INT 8
38911: PUSH
38912: LD_INT 13
38914: PUSH
38915: LD_INT 12
38917: PUSH
38918: LD_INT 15
38920: PUSH
38921: LD_INT 11
38923: PUSH
38924: LD_INT 14
38926: PUSH
38927: LD_INT 10
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: IN
38941: IFFALSE 38951
// btype = b_lab ;
38943: LD_ADDR_VAR 0 1
38947: PUSH
38948: LD_INT 6
38950: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38951: LD_VAR 0 6
38955: PUSH
38956: LD_INT 0
38958: PUSH
38959: LD_INT 1
38961: PUSH
38962: LD_INT 2
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: LIST
38969: IN
38970: NOT
38971: PUSH
38972: LD_VAR 0 1
38976: PUSH
38977: LD_INT 0
38979: PUSH
38980: LD_INT 1
38982: PUSH
38983: LD_INT 2
38985: PUSH
38986: LD_INT 3
38988: PUSH
38989: LD_INT 6
38991: PUSH
38992: LD_INT 36
38994: PUSH
38995: LD_INT 4
38997: PUSH
38998: LD_INT 5
39000: PUSH
39001: LD_INT 31
39003: PUSH
39004: LD_INT 32
39006: PUSH
39007: LD_INT 33
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: IN
39023: NOT
39024: PUSH
39025: LD_VAR 0 6
39029: PUSH
39030: LD_INT 1
39032: EQUAL
39033: AND
39034: OR
39035: PUSH
39036: LD_VAR 0 1
39040: PUSH
39041: LD_INT 2
39043: PUSH
39044: LD_INT 3
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: IN
39051: NOT
39052: PUSH
39053: LD_VAR 0 6
39057: PUSH
39058: LD_INT 2
39060: EQUAL
39061: AND
39062: OR
39063: IFFALSE 39073
// mode = 0 ;
39065: LD_ADDR_VAR 0 6
39069: PUSH
39070: LD_INT 0
39072: ST_TO_ADDR
// case mode of 0 :
39073: LD_VAR 0 6
39077: PUSH
39078: LD_INT 0
39080: DOUBLE
39081: EQUAL
39082: IFTRUE 39086
39084: GO 50539
39086: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39087: LD_ADDR_VAR 0 11
39091: PUSH
39092: LD_INT 0
39094: PUSH
39095: LD_INT 0
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 0
39104: PUSH
39105: LD_INT 1
39107: NEG
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 1
39115: PUSH
39116: LD_INT 0
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 1
39125: PUSH
39126: LD_INT 1
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 0
39135: PUSH
39136: LD_INT 1
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 1
39145: NEG
39146: PUSH
39147: LD_INT 0
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 1
39156: NEG
39157: PUSH
39158: LD_INT 1
39160: NEG
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 1
39168: NEG
39169: PUSH
39170: LD_INT 2
39172: NEG
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 0
39180: PUSH
39181: LD_INT 2
39183: NEG
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 1
39191: PUSH
39192: LD_INT 1
39194: NEG
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 1
39202: PUSH
39203: LD_INT 2
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 0
39212: PUSH
39213: LD_INT 2
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 1
39222: NEG
39223: PUSH
39224: LD_INT 1
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 1
39233: PUSH
39234: LD_INT 3
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 0
39243: PUSH
39244: LD_INT 3
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 1
39253: NEG
39254: PUSH
39255: LD_INT 2
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39280: LD_ADDR_VAR 0 12
39284: PUSH
39285: LD_INT 0
39287: PUSH
39288: LD_INT 0
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: LD_INT 1
39300: NEG
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 1
39308: PUSH
39309: LD_INT 0
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 1
39318: PUSH
39319: LD_INT 1
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 0
39328: PUSH
39329: LD_INT 1
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 1
39338: NEG
39339: PUSH
39340: LD_INT 0
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 1
39349: NEG
39350: PUSH
39351: LD_INT 1
39353: NEG
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 1
39361: PUSH
39362: LD_INT 1
39364: NEG
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 2
39372: PUSH
39373: LD_INT 0
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 2
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 1
39392: NEG
39393: PUSH
39394: LD_INT 1
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 2
39403: NEG
39404: PUSH
39405: LD_INT 0
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 2
39414: NEG
39415: PUSH
39416: LD_INT 1
39418: NEG
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 2
39426: NEG
39427: PUSH
39428: LD_INT 1
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 3
39437: NEG
39438: PUSH
39439: LD_INT 0
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 3
39448: NEG
39449: PUSH
39450: LD_INT 1
39452: NEG
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39476: LD_ADDR_VAR 0 13
39480: PUSH
39481: LD_INT 0
39483: PUSH
39484: LD_INT 0
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: LD_INT 1
39496: NEG
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 1
39504: PUSH
39505: LD_INT 0
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: LD_INT 1
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 0
39524: PUSH
39525: LD_INT 1
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 1
39534: NEG
39535: PUSH
39536: LD_INT 0
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 1
39545: NEG
39546: PUSH
39547: LD_INT 1
39549: NEG
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 1
39557: NEG
39558: PUSH
39559: LD_INT 2
39561: NEG
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 2
39569: PUSH
39570: LD_INT 1
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 2
39579: PUSH
39580: LD_INT 2
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 1
39589: PUSH
39590: LD_INT 2
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 2
39599: NEG
39600: PUSH
39601: LD_INT 1
39603: NEG
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 2
39611: NEG
39612: PUSH
39613: LD_INT 2
39615: NEG
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 2
39623: NEG
39624: PUSH
39625: LD_INT 3
39627: NEG
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 3
39635: NEG
39636: PUSH
39637: LD_INT 2
39639: NEG
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 3
39647: NEG
39648: PUSH
39649: LD_INT 3
39651: NEG
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39675: LD_ADDR_VAR 0 14
39679: PUSH
39680: LD_INT 0
39682: PUSH
39683: LD_INT 0
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 0
39692: PUSH
39693: LD_INT 1
39695: NEG
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 1
39703: PUSH
39704: LD_INT 0
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 1
39713: PUSH
39714: LD_INT 1
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: LD_INT 1
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 1
39733: NEG
39734: PUSH
39735: LD_INT 0
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 1
39744: NEG
39745: PUSH
39746: LD_INT 1
39748: NEG
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 1
39756: NEG
39757: PUSH
39758: LD_INT 2
39760: NEG
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 0
39768: PUSH
39769: LD_INT 2
39771: NEG
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 1
39779: PUSH
39780: LD_INT 1
39782: NEG
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 1
39790: PUSH
39791: LD_INT 2
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 0
39800: PUSH
39801: LD_INT 2
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 1
39810: NEG
39811: PUSH
39812: LD_INT 1
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 1
39821: NEG
39822: PUSH
39823: LD_INT 3
39825: NEG
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 0
39833: PUSH
39834: LD_INT 3
39836: NEG
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 1
39844: PUSH
39845: LD_INT 2
39847: NEG
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39871: LD_ADDR_VAR 0 15
39875: PUSH
39876: LD_INT 0
39878: PUSH
39879: LD_INT 0
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: LD_INT 1
39891: NEG
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 1
39899: PUSH
39900: LD_INT 0
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 1
39909: PUSH
39910: LD_INT 1
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: LD_INT 1
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 1
39929: NEG
39930: PUSH
39931: LD_INT 0
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 1
39940: NEG
39941: PUSH
39942: LD_INT 1
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 1
39952: PUSH
39953: LD_INT 1
39955: NEG
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 2
39963: PUSH
39964: LD_INT 0
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 2
39973: PUSH
39974: LD_INT 1
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 1
39983: NEG
39984: PUSH
39985: LD_INT 1
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 2
39994: NEG
39995: PUSH
39996: LD_INT 0
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 2
40005: NEG
40006: PUSH
40007: LD_INT 1
40009: NEG
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 2
40017: PUSH
40018: LD_INT 1
40020: NEG
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 3
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 3
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40064: LD_ADDR_VAR 0 16
40068: PUSH
40069: LD_INT 0
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 0
40081: PUSH
40082: LD_INT 1
40084: NEG
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 1
40092: PUSH
40093: LD_INT 0
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 1
40102: PUSH
40103: LD_INT 1
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: LD_INT 1
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 1
40122: NEG
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 1
40133: NEG
40134: PUSH
40135: LD_INT 1
40137: NEG
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 1
40145: NEG
40146: PUSH
40147: LD_INT 2
40149: NEG
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 2
40157: PUSH
40158: LD_INT 1
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 2
40167: PUSH
40168: LD_INT 2
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 1
40177: PUSH
40178: LD_INT 2
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 2
40187: NEG
40188: PUSH
40189: LD_INT 1
40191: NEG
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 2
40199: NEG
40200: PUSH
40201: LD_INT 2
40203: NEG
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 3
40211: PUSH
40212: LD_INT 2
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 3
40221: PUSH
40222: LD_INT 3
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 2
40231: PUSH
40232: LD_INT 3
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40257: LD_ADDR_VAR 0 17
40261: PUSH
40262: LD_INT 0
40264: PUSH
40265: LD_INT 0
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 0
40274: PUSH
40275: LD_INT 1
40277: NEG
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 1
40285: PUSH
40286: LD_INT 0
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 1
40295: PUSH
40296: LD_INT 1
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: LD_INT 1
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 1
40315: NEG
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 1
40326: NEG
40327: PUSH
40328: LD_INT 1
40330: NEG
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 1
40338: NEG
40339: PUSH
40340: LD_INT 2
40342: NEG
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 0
40350: PUSH
40351: LD_INT 2
40353: NEG
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 1
40361: PUSH
40362: LD_INT 1
40364: NEG
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 2
40372: PUSH
40373: LD_INT 0
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 2
40382: PUSH
40383: LD_INT 1
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 2
40392: PUSH
40393: LD_INT 2
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 1
40402: PUSH
40403: LD_INT 2
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: LD_INT 2
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 1
40422: NEG
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 2
40433: NEG
40434: PUSH
40435: LD_INT 0
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 2
40444: NEG
40445: PUSH
40446: LD_INT 1
40448: NEG
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 2
40456: NEG
40457: PUSH
40458: LD_INT 2
40460: NEG
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40487: LD_ADDR_VAR 0 18
40491: PUSH
40492: LD_INT 0
40494: PUSH
40495: LD_INT 0
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 0
40504: PUSH
40505: LD_INT 1
40507: NEG
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 1
40515: PUSH
40516: LD_INT 0
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 1
40525: PUSH
40526: LD_INT 1
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 0
40535: PUSH
40536: LD_INT 1
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 1
40545: NEG
40546: PUSH
40547: LD_INT 0
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 1
40556: NEG
40557: PUSH
40558: LD_INT 1
40560: NEG
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 1
40568: NEG
40569: PUSH
40570: LD_INT 2
40572: NEG
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 0
40580: PUSH
40581: LD_INT 2
40583: NEG
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 1
40591: PUSH
40592: LD_INT 1
40594: NEG
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 2
40602: PUSH
40603: LD_INT 0
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 2
40612: PUSH
40613: LD_INT 1
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 2
40622: PUSH
40623: LD_INT 2
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 1
40632: PUSH
40633: LD_INT 2
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 0
40642: PUSH
40643: LD_INT 2
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 1
40652: NEG
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 2
40663: NEG
40664: PUSH
40665: LD_INT 0
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 2
40674: NEG
40675: PUSH
40676: LD_INT 1
40678: NEG
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 2
40686: NEG
40687: PUSH
40688: LD_INT 2
40690: NEG
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40717: LD_ADDR_VAR 0 19
40721: PUSH
40722: LD_INT 0
40724: PUSH
40725: LD_INT 0
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 0
40734: PUSH
40735: LD_INT 1
40737: NEG
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 1
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 1
40755: PUSH
40756: LD_INT 1
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: LD_INT 1
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 1
40775: NEG
40776: PUSH
40777: LD_INT 0
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 1
40786: NEG
40787: PUSH
40788: LD_INT 1
40790: NEG
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 1
40798: NEG
40799: PUSH
40800: LD_INT 2
40802: NEG
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: LD_INT 2
40813: NEG
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 1
40821: PUSH
40822: LD_INT 1
40824: NEG
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 2
40832: PUSH
40833: LD_INT 0
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 2
40842: PUSH
40843: LD_INT 1
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 2
40852: PUSH
40853: LD_INT 2
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 1
40862: PUSH
40863: LD_INT 2
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: LD_INT 2
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 1
40882: NEG
40883: PUSH
40884: LD_INT 1
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 2
40893: NEG
40894: PUSH
40895: LD_INT 0
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 2
40904: NEG
40905: PUSH
40906: LD_INT 1
40908: NEG
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 2
40916: NEG
40917: PUSH
40918: LD_INT 2
40920: NEG
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40947: LD_ADDR_VAR 0 20
40951: PUSH
40952: LD_INT 0
40954: PUSH
40955: LD_INT 0
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 0
40964: PUSH
40965: LD_INT 1
40967: NEG
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 1
40975: PUSH
40976: LD_INT 0
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 1
40985: PUSH
40986: LD_INT 1
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: LD_INT 1
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 1
41005: NEG
41006: PUSH
41007: LD_INT 0
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 1
41016: NEG
41017: PUSH
41018: LD_INT 1
41020: NEG
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 1
41028: NEG
41029: PUSH
41030: LD_INT 2
41032: NEG
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: LD_INT 2
41043: NEG
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 1
41051: PUSH
41052: LD_INT 1
41054: NEG
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 2
41062: PUSH
41063: LD_INT 0
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 2
41072: PUSH
41073: LD_INT 1
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 2
41082: PUSH
41083: LD_INT 2
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 1
41092: PUSH
41093: LD_INT 2
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 0
41102: PUSH
41103: LD_INT 2
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 1
41112: NEG
41113: PUSH
41114: LD_INT 1
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 2
41123: NEG
41124: PUSH
41125: LD_INT 0
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 2
41134: NEG
41135: PUSH
41136: LD_INT 1
41138: NEG
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 2
41146: NEG
41147: PUSH
41148: LD_INT 2
41150: NEG
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41177: LD_ADDR_VAR 0 21
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: LD_INT 0
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: LD_INT 1
41197: NEG
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 1
41205: PUSH
41206: LD_INT 0
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 1
41215: PUSH
41216: LD_INT 1
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 0
41225: PUSH
41226: LD_INT 1
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 1
41235: NEG
41236: PUSH
41237: LD_INT 0
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 1
41246: NEG
41247: PUSH
41248: LD_INT 1
41250: NEG
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 1
41258: NEG
41259: PUSH
41260: LD_INT 2
41262: NEG
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: LD_INT 2
41273: NEG
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 1
41281: PUSH
41282: LD_INT 1
41284: NEG
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 2
41292: PUSH
41293: LD_INT 0
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 2
41302: PUSH
41303: LD_INT 1
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 2
41312: PUSH
41313: LD_INT 2
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 1
41322: PUSH
41323: LD_INT 2
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 0
41332: PUSH
41333: LD_INT 2
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 1
41342: NEG
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 2
41353: NEG
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 2
41364: NEG
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 2
41376: NEG
41377: PUSH
41378: LD_INT 2
41380: NEG
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41407: LD_ADDR_VAR 0 22
41411: PUSH
41412: LD_INT 0
41414: PUSH
41415: LD_INT 0
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 0
41424: PUSH
41425: LD_INT 1
41427: NEG
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 1
41435: PUSH
41436: LD_INT 0
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 1
41445: PUSH
41446: LD_INT 1
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: LD_INT 1
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 1
41465: NEG
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 1
41476: NEG
41477: PUSH
41478: LD_INT 1
41480: NEG
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 1
41488: NEG
41489: PUSH
41490: LD_INT 2
41492: NEG
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 0
41500: PUSH
41501: LD_INT 2
41503: NEG
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 1
41511: PUSH
41512: LD_INT 1
41514: NEG
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 2
41522: PUSH
41523: LD_INT 0
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 2
41532: PUSH
41533: LD_INT 1
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 2
41542: PUSH
41543: LD_INT 2
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 1
41552: PUSH
41553: LD_INT 2
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 0
41562: PUSH
41563: LD_INT 2
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 1
41572: NEG
41573: PUSH
41574: LD_INT 1
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 2
41583: NEG
41584: PUSH
41585: LD_INT 0
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 2
41594: NEG
41595: PUSH
41596: LD_INT 1
41598: NEG
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 2
41606: NEG
41607: PUSH
41608: LD_INT 2
41610: NEG
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41637: LD_ADDR_VAR 0 23
41641: PUSH
41642: LD_INT 0
41644: PUSH
41645: LD_INT 0
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 0
41654: PUSH
41655: LD_INT 1
41657: NEG
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 1
41665: PUSH
41666: LD_INT 0
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 1
41675: PUSH
41676: LD_INT 1
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 1
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 1
41695: NEG
41696: PUSH
41697: LD_INT 0
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: NEG
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 1
41718: NEG
41719: PUSH
41720: LD_INT 2
41722: NEG
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: LD_INT 2
41733: NEG
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 1
41741: PUSH
41742: LD_INT 1
41744: NEG
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 2
41752: PUSH
41753: LD_INT 0
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 2
41762: PUSH
41763: LD_INT 1
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 2
41772: PUSH
41773: LD_INT 2
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 1
41782: PUSH
41783: LD_INT 2
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: LD_INT 2
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 1
41802: NEG
41803: PUSH
41804: LD_INT 1
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 2
41813: NEG
41814: PUSH
41815: LD_INT 0
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 2
41824: NEG
41825: PUSH
41826: LD_INT 1
41828: NEG
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 2
41836: NEG
41837: PUSH
41838: LD_INT 2
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 2
41848: NEG
41849: PUSH
41850: LD_INT 3
41852: NEG
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 1
41860: NEG
41861: PUSH
41862: LD_INT 3
41864: NEG
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 1
41872: PUSH
41873: LD_INT 2
41875: NEG
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 2
41883: PUSH
41884: LD_INT 1
41886: NEG
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41917: LD_ADDR_VAR 0 24
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: LD_INT 0
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 0
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 1
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 1
41955: PUSH
41956: LD_INT 1
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: LD_INT 1
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 1
41975: NEG
41976: PUSH
41977: LD_INT 0
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 1
41986: NEG
41987: PUSH
41988: LD_INT 1
41990: NEG
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 1
41998: NEG
41999: PUSH
42000: LD_INT 2
42002: NEG
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 0
42010: PUSH
42011: LD_INT 2
42013: NEG
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 1
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 2
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 2
42042: PUSH
42043: LD_INT 1
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 2
42052: PUSH
42053: LD_INT 2
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 1
42062: PUSH
42063: LD_INT 2
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 0
42072: PUSH
42073: LD_INT 2
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 1
42082: NEG
42083: PUSH
42084: LD_INT 1
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 2
42093: NEG
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 2
42104: NEG
42105: PUSH
42106: LD_INT 1
42108: NEG
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 2
42116: NEG
42117: PUSH
42118: LD_INT 2
42120: NEG
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 1
42128: PUSH
42129: LD_INT 2
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 2
42139: PUSH
42140: LD_INT 1
42142: NEG
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 3
42150: PUSH
42151: LD_INT 1
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 3
42160: PUSH
42161: LD_INT 2
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42193: LD_ADDR_VAR 0 25
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: LD_INT 1
42213: NEG
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 1
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 1
42251: NEG
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 1
42262: NEG
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 1
42274: NEG
42275: PUSH
42276: LD_INT 2
42278: NEG
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: LD_INT 2
42289: NEG
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 1
42297: PUSH
42298: LD_INT 1
42300: NEG
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 2
42308: PUSH
42309: LD_INT 0
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 2
42318: PUSH
42319: LD_INT 1
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 2
42328: PUSH
42329: LD_INT 2
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 1
42338: PUSH
42339: LD_INT 2
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: LD_INT 2
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 1
42358: NEG
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 2
42369: NEG
42370: PUSH
42371: LD_INT 0
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 2
42380: NEG
42381: PUSH
42382: LD_INT 1
42384: NEG
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 2
42392: NEG
42393: PUSH
42394: LD_INT 2
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 3
42404: PUSH
42405: LD_INT 1
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 3
42414: PUSH
42415: LD_INT 2
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 2
42424: PUSH
42425: LD_INT 3
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: LD_INT 3
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42467: LD_ADDR_VAR 0 26
42471: PUSH
42472: LD_INT 0
42474: PUSH
42475: LD_INT 0
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 0
42484: PUSH
42485: LD_INT 1
42487: NEG
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 1
42495: PUSH
42496: LD_INT 0
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 1
42505: PUSH
42506: LD_INT 1
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 1
42525: NEG
42526: PUSH
42527: LD_INT 0
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: PUSH
42538: LD_INT 1
42540: NEG
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 1
42548: NEG
42549: PUSH
42550: LD_INT 2
42552: NEG
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 0
42560: PUSH
42561: LD_INT 2
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 1
42571: PUSH
42572: LD_INT 1
42574: NEG
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 2
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 2
42592: PUSH
42593: LD_INT 1
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 2
42602: PUSH
42603: LD_INT 2
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 1
42612: PUSH
42613: LD_INT 2
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: LD_INT 2
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 1
42632: NEG
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 2
42643: NEG
42644: PUSH
42645: LD_INT 0
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 2
42654: NEG
42655: PUSH
42656: LD_INT 1
42658: NEG
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 2
42666: NEG
42667: PUSH
42668: LD_INT 2
42670: NEG
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 2
42678: PUSH
42679: LD_INT 3
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 1
42688: PUSH
42689: LD_INT 3
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 1
42698: NEG
42699: PUSH
42700: LD_INT 2
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 2
42709: NEG
42710: PUSH
42711: LD_INT 1
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42743: LD_ADDR_VAR 0 27
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 0
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 1
42781: PUSH
42782: LD_INT 1
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 1
42801: NEG
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: LD_INT 1
42816: NEG
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 1
42824: NEG
42825: PUSH
42826: LD_INT 2
42828: NEG
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 0
42836: PUSH
42837: LD_INT 2
42839: NEG
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 1
42847: PUSH
42848: LD_INT 1
42850: NEG
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 2
42858: PUSH
42859: LD_INT 0
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 2
42868: PUSH
42869: LD_INT 1
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 2
42878: PUSH
42879: LD_INT 2
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 1
42888: PUSH
42889: LD_INT 2
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: LD_INT 2
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 1
42908: NEG
42909: PUSH
42910: LD_INT 1
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 2
42919: NEG
42920: PUSH
42921: LD_INT 0
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 2
42930: NEG
42931: PUSH
42932: LD_INT 1
42934: NEG
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 2
42942: NEG
42943: PUSH
42944: LD_INT 2
42946: NEG
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 1
42954: NEG
42955: PUSH
42956: LD_INT 2
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 2
42965: NEG
42966: PUSH
42967: LD_INT 1
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 3
42976: NEG
42977: PUSH
42978: LD_INT 1
42980: NEG
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 3
42988: NEG
42989: PUSH
42990: LD_INT 2
42992: NEG
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43023: LD_ADDR_VAR 0 28
43027: PUSH
43028: LD_INT 0
43030: PUSH
43031: LD_INT 0
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 0
43040: PUSH
43041: LD_INT 1
43043: NEG
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 1
43051: PUSH
43052: LD_INT 0
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 1
43061: PUSH
43062: LD_INT 1
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: LD_INT 1
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 1
43081: NEG
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 1
43092: NEG
43093: PUSH
43094: LD_INT 1
43096: NEG
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 1
43104: NEG
43105: PUSH
43106: LD_INT 2
43108: NEG
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 0
43116: PUSH
43117: LD_INT 2
43119: NEG
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 1
43127: PUSH
43128: LD_INT 1
43130: NEG
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 2
43138: PUSH
43139: LD_INT 0
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 2
43148: PUSH
43149: LD_INT 1
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 2
43158: PUSH
43159: LD_INT 2
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 1
43168: PUSH
43169: LD_INT 2
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: LD_INT 2
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 1
43188: NEG
43189: PUSH
43190: LD_INT 1
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 2
43199: NEG
43200: PUSH
43201: LD_INT 0
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 2
43210: NEG
43211: PUSH
43212: LD_INT 1
43214: NEG
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 2
43222: NEG
43223: PUSH
43224: LD_INT 2
43226: NEG
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 2
43234: NEG
43235: PUSH
43236: LD_INT 3
43238: NEG
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 1
43246: NEG
43247: PUSH
43248: LD_INT 3
43250: NEG
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 3
43258: NEG
43259: PUSH
43260: LD_INT 1
43262: NEG
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 3
43270: NEG
43271: PUSH
43272: LD_INT 2
43274: NEG
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43305: LD_ADDR_VAR 0 29
43309: PUSH
43310: LD_INT 0
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 0
43322: PUSH
43323: LD_INT 1
43325: NEG
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 1
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 1
43343: PUSH
43344: LD_INT 1
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: LD_INT 1
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 1
43363: NEG
43364: PUSH
43365: LD_INT 0
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 1
43374: NEG
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 1
43386: NEG
43387: PUSH
43388: LD_INT 2
43390: NEG
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: LD_INT 2
43401: NEG
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 1
43409: PUSH
43410: LD_INT 1
43412: NEG
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 2
43420: PUSH
43421: LD_INT 0
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 2
43430: PUSH
43431: LD_INT 1
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 1
43440: PUSH
43441: LD_INT 2
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 0
43450: PUSH
43451: LD_INT 2
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 1
43460: NEG
43461: PUSH
43462: LD_INT 1
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 2
43471: NEG
43472: PUSH
43473: LD_INT 1
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 2
43483: NEG
43484: PUSH
43485: LD_INT 2
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 2
43495: NEG
43496: PUSH
43497: LD_INT 3
43499: NEG
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 2
43507: PUSH
43508: LD_INT 1
43510: NEG
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 3
43518: PUSH
43519: LD_INT 1
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 1
43528: PUSH
43529: LD_INT 3
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 1
43538: NEG
43539: PUSH
43540: LD_INT 2
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 3
43549: NEG
43550: PUSH
43551: LD_INT 2
43553: NEG
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43584: LD_ADDR_VAR 0 30
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 0
43601: PUSH
43602: LD_INT 1
43604: NEG
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: LD_INT 0
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: LD_INT 1
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 0
43632: PUSH
43633: LD_INT 1
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 1
43642: NEG
43643: PUSH
43644: LD_INT 0
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 1
43653: NEG
43654: PUSH
43655: LD_INT 1
43657: NEG
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 1
43665: NEG
43666: PUSH
43667: LD_INT 2
43669: NEG
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: LD_INT 2
43680: NEG
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 1
43688: PUSH
43689: LD_INT 1
43691: NEG
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 2
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 2
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 2
43719: PUSH
43720: LD_INT 2
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 1
43729: PUSH
43730: LD_INT 2
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 1
43739: NEG
43740: PUSH
43741: LD_INT 1
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 2
43750: NEG
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 2
43761: NEG
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: LD_INT 3
43777: NEG
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 1
43785: PUSH
43786: LD_INT 2
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 3
43796: PUSH
43797: LD_INT 2
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 2
43806: PUSH
43807: LD_INT 3
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 2
43816: NEG
43817: PUSH
43818: LD_INT 1
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 3
43827: NEG
43828: PUSH
43829: LD_INT 1
43831: NEG
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43862: LD_ADDR_VAR 0 31
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 0
43879: PUSH
43880: LD_INT 1
43882: NEG
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 1
43890: PUSH
43891: LD_INT 0
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: LD_INT 1
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 0
43910: PUSH
43911: LD_INT 1
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 1
43920: NEG
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: LD_INT 1
43935: NEG
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 1
43943: NEG
43944: PUSH
43945: LD_INT 2
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 1
43955: PUSH
43956: LD_INT 1
43958: NEG
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 2
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 2
43976: PUSH
43977: LD_INT 1
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 2
43986: PUSH
43987: LD_INT 2
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: LD_INT 2
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 0
44006: PUSH
44007: LD_INT 2
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 1
44016: NEG
44017: PUSH
44018: LD_INT 1
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 2
44027: NEG
44028: PUSH
44029: LD_INT 1
44031: NEG
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 2
44039: NEG
44040: PUSH
44041: LD_INT 2
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 2
44051: NEG
44052: PUSH
44053: LD_INT 3
44055: NEG
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 2
44063: PUSH
44064: LD_INT 1
44066: NEG
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 3
44074: PUSH
44075: LD_INT 1
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 1
44084: PUSH
44085: LD_INT 3
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 1
44094: NEG
44095: PUSH
44096: LD_INT 2
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 3
44105: NEG
44106: PUSH
44107: LD_INT 2
44109: NEG
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44140: LD_ADDR_VAR 0 32
44144: PUSH
44145: LD_INT 0
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 0
44157: PUSH
44158: LD_INT 1
44160: NEG
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 1
44168: PUSH
44169: LD_INT 0
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 1
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: LD_INT 1
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 1
44198: NEG
44199: PUSH
44200: LD_INT 0
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 1
44209: NEG
44210: PUSH
44211: LD_INT 1
44213: NEG
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 1
44221: NEG
44222: PUSH
44223: LD_INT 2
44225: NEG
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 0
44233: PUSH
44234: LD_INT 2
44236: NEG
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 1
44244: PUSH
44245: LD_INT 1
44247: NEG
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 2
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 2
44265: PUSH
44266: LD_INT 2
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: LD_INT 2
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: LD_INT 2
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: LD_INT 1
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 2
44306: NEG
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 2
44317: NEG
44318: PUSH
44319: LD_INT 1
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: PUSH
44331: LD_INT 3
44333: NEG
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: LD_INT 2
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 3
44352: PUSH
44353: LD_INT 2
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 2
44362: PUSH
44363: LD_INT 3
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 2
44372: NEG
44373: PUSH
44374: LD_INT 1
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 3
44383: NEG
44384: PUSH
44385: LD_INT 1
44387: NEG
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44418: LD_ADDR_VAR 0 33
44422: PUSH
44423: LD_INT 0
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: LD_INT 1
44438: NEG
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 1
44446: PUSH
44447: LD_INT 0
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 1
44476: NEG
44477: PUSH
44478: LD_INT 0
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: LD_INT 1
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 1
44499: NEG
44500: PUSH
44501: LD_INT 2
44503: NEG
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 1
44511: PUSH
44512: LD_INT 1
44514: NEG
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 2
44522: PUSH
44523: LD_INT 0
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 2
44532: PUSH
44533: LD_INT 1
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: LD_INT 2
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: LD_INT 2
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 2
44573: NEG
44574: PUSH
44575: LD_INT 0
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 2
44584: NEG
44585: PUSH
44586: LD_INT 1
44588: NEG
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 2
44596: NEG
44597: PUSH
44598: LD_INT 2
44600: NEG
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 2
44608: NEG
44609: PUSH
44610: LD_INT 3
44612: NEG
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 2
44620: PUSH
44621: LD_INT 1
44623: NEG
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 3
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: PUSH
44642: LD_INT 3
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: NEG
44652: PUSH
44653: LD_INT 2
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 3
44662: NEG
44663: PUSH
44664: LD_INT 2
44666: NEG
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44697: LD_ADDR_VAR 0 34
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 0
44714: PUSH
44715: LD_INT 1
44717: NEG
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 1
44725: PUSH
44726: LD_INT 0
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 1
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 0
44745: PUSH
44746: LD_INT 1
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 1
44766: NEG
44767: PUSH
44768: LD_INT 1
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: LD_INT 2
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: LD_INT 2
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 2
44812: PUSH
44813: LD_INT 1
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 2
44822: PUSH
44823: LD_INT 2
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 1
44832: PUSH
44833: LD_INT 2
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 1
44842: NEG
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 2
44853: NEG
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 2
44864: NEG
44865: PUSH
44866: LD_INT 1
44868: NEG
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 2
44876: NEG
44877: PUSH
44878: LD_INT 2
44880: NEG
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 1
44888: NEG
44889: PUSH
44890: LD_INT 3
44892: NEG
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 1
44900: PUSH
44901: LD_INT 2
44903: NEG
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 3
44911: PUSH
44912: LD_INT 2
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 2
44921: PUSH
44922: LD_INT 3
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 2
44931: NEG
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 3
44942: NEG
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44977: LD_ADDR_VAR 0 35
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: LD_INT 0
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 1
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: LD_INT 0
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: LD_INT 1
45050: NEG
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 2
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 2
45068: NEG
45069: PUSH
45070: LD_INT 1
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45089: LD_ADDR_VAR 0 36
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 1
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: LD_INT 1
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: LD_INT 0
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: NEG
45159: PUSH
45160: LD_INT 1
45162: NEG
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: LD_INT 2
45174: NEG
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 1
45182: PUSH
45183: LD_INT 2
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45201: LD_ADDR_VAR 0 37
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: LD_INT 0
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 0
45218: PUSH
45219: LD_INT 1
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 1
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: LD_INT 1
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 1
45270: NEG
45271: PUSH
45272: LD_INT 1
45274: NEG
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: LD_INT 1
45285: NEG
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45313: LD_ADDR_VAR 0 38
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: LD_INT 0
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: LD_INT 1
45333: NEG
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 1
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: LD_INT 1
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 1
45371: NEG
45372: PUSH
45373: LD_INT 0
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 1
45382: NEG
45383: PUSH
45384: LD_INT 1
45386: NEG
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 2
45394: PUSH
45395: LD_INT 1
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 2
45404: NEG
45405: PUSH
45406: LD_INT 1
45408: NEG
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45425: LD_ADDR_VAR 0 39
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 1
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 1
45483: NEG
45484: PUSH
45485: LD_INT 0
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: NEG
45495: PUSH
45496: LD_INT 1
45498: NEG
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 1
45506: NEG
45507: PUSH
45508: LD_INT 2
45510: NEG
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 1
45518: PUSH
45519: LD_INT 2
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45537: LD_ADDR_VAR 0 40
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: LD_INT 0
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: LD_INT 1
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: LD_INT 1
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 1
45595: NEG
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: NEG
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 1
45629: NEG
45630: PUSH
45631: LD_INT 1
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45649: LD_ADDR_VAR 0 41
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: LD_INT 1
45669: NEG
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: PUSH
45678: LD_INT 0
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: LD_INT 1
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 1
45707: NEG
45708: PUSH
45709: LD_INT 0
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 1
45718: NEG
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 1
45730: NEG
45731: PUSH
45732: LD_INT 2
45734: NEG
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: LD_INT 1
45745: NEG
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 2
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 2
45763: PUSH
45764: LD_INT 1
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 2
45773: PUSH
45774: LD_INT 2
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: LD_INT 2
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 1
45793: NEG
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 2
45804: NEG
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 2
45815: NEG
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 2
45827: NEG
45828: PUSH
45829: LD_INT 2
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 2
45839: NEG
45840: PUSH
45841: LD_INT 3
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 2
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 3
45862: PUSH
45863: LD_INT 0
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 3
45872: PUSH
45873: LD_INT 1
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 3
45882: PUSH
45883: LD_INT 2
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 3
45892: PUSH
45893: LD_INT 3
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 2
45902: PUSH
45903: LD_INT 3
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 2
45912: NEG
45913: PUSH
45914: LD_INT 1
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 3
45923: NEG
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 3
45934: NEG
45935: PUSH
45936: LD_INT 1
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 3
45946: NEG
45947: PUSH
45948: LD_INT 2
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 3
45958: NEG
45959: PUSH
45960: LD_INT 3
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45999: LD_ADDR_VAR 0 42
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: LD_INT 1
46019: NEG
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: LD_INT 0
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: LD_INT 1
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: NEG
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 1
46080: NEG
46081: PUSH
46082: LD_INT 2
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 0
46092: PUSH
46093: LD_INT 2
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: LD_INT 1
46106: NEG
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 2
46114: PUSH
46115: LD_INT 1
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 2
46124: PUSH
46125: LD_INT 2
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: LD_INT 2
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: LD_INT 2
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 2
46165: NEG
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 2
46177: NEG
46178: PUSH
46179: LD_INT 2
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 2
46189: NEG
46190: PUSH
46191: LD_INT 3
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 1
46201: NEG
46202: PUSH
46203: LD_INT 3
46205: NEG
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: LD_INT 3
46216: NEG
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: LD_INT 2
46227: NEG
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 3
46235: PUSH
46236: LD_INT 2
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 3
46245: PUSH
46246: LD_INT 3
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 2
46255: PUSH
46256: LD_INT 3
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: LD_INT 3
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 0
46275: PUSH
46276: LD_INT 3
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 1
46285: NEG
46286: PUSH
46287: LD_INT 2
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 3
46296: NEG
46297: PUSH
46298: LD_INT 2
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 3
46308: NEG
46309: PUSH
46310: LD_INT 3
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46349: LD_ADDR_VAR 0 43
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: LD_INT 1
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 1
46407: NEG
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 1
46430: NEG
46431: PUSH
46432: LD_INT 2
46434: NEG
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: LD_INT 2
46445: NEG
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: PUSH
46454: LD_INT 1
46456: NEG
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 2
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 2
46474: PUSH
46475: LD_INT 1
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 1
46484: PUSH
46485: LD_INT 2
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: LD_INT 2
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 1
46504: NEG
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 2
46515: NEG
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 2
46526: NEG
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: LD_INT 3
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: LD_INT 3
46553: NEG
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 1
46561: PUSH
46562: LD_INT 2
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 2
46572: PUSH
46573: LD_INT 1
46575: NEG
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 3
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 3
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 1
46603: PUSH
46604: LD_INT 3
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: LD_INT 3
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: PUSH
46625: LD_INT 2
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 2
46634: NEG
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 3
46645: NEG
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 3
46656: NEG
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46697: LD_ADDR_VAR 0 44
46701: PUSH
46702: LD_INT 0
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 0
46714: PUSH
46715: LD_INT 1
46717: NEG
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 1
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 1
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 1
46755: NEG
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 1
46766: NEG
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 1
46778: NEG
46779: PUSH
46780: LD_INT 2
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: PUSH
46791: LD_INT 1
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 2
46801: PUSH
46802: LD_INT 0
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 2
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 2
46821: PUSH
46822: LD_INT 2
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 1
46831: PUSH
46832: LD_INT 2
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 1
46841: NEG
46842: PUSH
46843: LD_INT 1
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 2
46852: NEG
46853: PUSH
46854: LD_INT 0
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 2
46863: NEG
46864: PUSH
46865: LD_INT 1
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 2
46875: NEG
46876: PUSH
46877: LD_INT 2
46879: NEG
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 2
46887: NEG
46888: PUSH
46889: LD_INT 3
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 2
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 3
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 3
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 3
46930: PUSH
46931: LD_INT 2
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 3
46940: PUSH
46941: LD_INT 3
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 2
46950: PUSH
46951: LD_INT 3
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 2
46960: NEG
46961: PUSH
46962: LD_INT 1
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 3
46971: NEG
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 3
46982: NEG
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 3
46994: NEG
46995: PUSH
46996: LD_INT 2
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 3
47006: NEG
47007: PUSH
47008: LD_INT 3
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47047: LD_ADDR_VAR 0 45
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: LD_INT 1
47067: NEG
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: LD_INT 0
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: LD_INT 1
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: LD_INT 1
47120: NEG
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 1
47128: NEG
47129: PUSH
47130: LD_INT 2
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: LD_INT 2
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: LD_INT 1
47154: NEG
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 2
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 2
47172: PUSH
47173: LD_INT 2
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 1
47182: PUSH
47183: LD_INT 2
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: LD_INT 2
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 2
47213: NEG
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 2
47225: NEG
47226: PUSH
47227: LD_INT 2
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 2
47237: NEG
47238: PUSH
47239: LD_INT 3
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: NEG
47250: PUSH
47251: LD_INT 3
47253: NEG
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: LD_INT 3
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: LD_INT 2
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 3
47283: PUSH
47284: LD_INT 2
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 3
47293: PUSH
47294: LD_INT 3
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 2
47303: PUSH
47304: LD_INT 3
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 1
47313: PUSH
47314: LD_INT 3
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: LD_INT 3
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: PUSH
47335: LD_INT 2
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 3
47344: NEG
47345: PUSH
47346: LD_INT 2
47348: NEG
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 3
47356: NEG
47357: PUSH
47358: LD_INT 3
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47397: LD_ADDR_VAR 0 46
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: LD_INT 1
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: NEG
47467: PUSH
47468: LD_INT 1
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: LD_INT 2
47482: NEG
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: LD_INT 2
47493: NEG
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: LD_INT 1
47504: NEG
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 2
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 2
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: LD_INT 2
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 0
47542: PUSH
47543: LD_INT 2
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 2
47563: NEG
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 2
47574: NEG
47575: PUSH
47576: LD_INT 1
47578: NEG
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 1
47586: NEG
47587: PUSH
47588: LD_INT 3
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: LD_INT 3
47601: NEG
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 1
47609: PUSH
47610: LD_INT 2
47612: NEG
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 2
47620: PUSH
47621: LD_INT 1
47623: NEG
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 3
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 3
47641: PUSH
47642: LD_INT 1
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 1
47651: PUSH
47652: LD_INT 3
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: LD_INT 3
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: NEG
47672: PUSH
47673: LD_INT 2
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 2
47682: NEG
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 3
47693: NEG
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 3
47704: NEG
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47745: LD_ADDR_VAR 0 47
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: LD_INT 1
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: LD_INT 1
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 1
47826: NEG
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: LD_INT 2
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 1
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 2
47860: NEG
47861: PUSH
47862: LD_INT 1
47864: NEG
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 2
47872: NEG
47873: PUSH
47874: LD_INT 2
47876: NEG
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47896: LD_ADDR_VAR 0 48
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 1
47977: NEG
47978: PUSH
47979: LD_INT 2
47981: NEG
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: LD_INT 2
47992: NEG
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 1
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 2
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 2
48021: PUSH
48022: LD_INT 1
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48043: LD_ADDR_VAR 0 49
48047: PUSH
48048: LD_INT 0
48050: PUSH
48051: LD_INT 0
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: LD_INT 1
48063: NEG
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 1
48071: PUSH
48072: LD_INT 0
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 1
48101: NEG
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: LD_INT 1
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: PUSH
48125: LD_INT 1
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 2
48135: PUSH
48136: LD_INT 0
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 2
48145: PUSH
48146: LD_INT 1
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 2
48155: PUSH
48156: LD_INT 2
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 1
48165: PUSH
48166: LD_INT 2
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48187: LD_ADDR_VAR 0 50
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: LD_INT 1
48207: NEG
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 1
48225: PUSH
48226: LD_INT 1
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 1
48245: NEG
48246: PUSH
48247: LD_INT 0
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 1
48256: NEG
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 2
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 2
48278: PUSH
48279: LD_INT 2
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 1
48288: PUSH
48289: LD_INT 2
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: LD_INT 2
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 1
48308: NEG
48309: PUSH
48310: LD_INT 1
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48331: LD_ADDR_VAR 0 51
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: LD_INT 1
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: LD_INT 1
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 0
48379: PUSH
48380: LD_INT 1
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: LD_INT 2
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: LD_INT 2
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: LD_INT 1
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 2
48443: NEG
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 2
48454: NEG
48455: PUSH
48456: LD_INT 1
48458: NEG
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48478: LD_ADDR_VAR 0 52
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 1
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: LD_INT 1
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: LD_INT 2
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 1
48571: NEG
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 2
48582: NEG
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 2
48593: NEG
48594: PUSH
48595: LD_INT 1
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 2
48605: NEG
48606: PUSH
48607: LD_INT 2
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48629: LD_ADDR_VAR 0 53
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: LD_INT 0
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 0
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 1
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 1
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: LD_INT 1
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 1
48698: NEG
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 1
48710: NEG
48711: PUSH
48712: LD_INT 2
48714: NEG
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: LD_INT 2
48725: NEG
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 2
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 2
48754: PUSH
48755: LD_INT 1
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 2
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: LD_INT 2
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: LD_INT 2
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 2
48805: NEG
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 2
48816: NEG
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 2
48828: NEG
48829: PUSH
48830: LD_INT 2
48832: NEG
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48859: LD_ADDR_VAR 0 54
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: LD_INT 1
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: LD_INT 0
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 1
48917: NEG
48918: PUSH
48919: LD_INT 0
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: NEG
48929: PUSH
48930: LD_INT 1
48932: NEG
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 1
48940: NEG
48941: PUSH
48942: LD_INT 2
48944: NEG
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: LD_INT 2
48955: NEG
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: LD_INT 1
48966: NEG
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 2
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 2
48984: PUSH
48985: LD_INT 1
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 2
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: LD_INT 2
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: LD_INT 2
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: LD_INT 1
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 2
49035: NEG
49036: PUSH
49037: LD_INT 0
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 2
49046: NEG
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 2
49058: NEG
49059: PUSH
49060: LD_INT 2
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49089: LD_ADDR_VAR 0 55
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 0
49106: PUSH
49107: LD_INT 1
49109: NEG
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: LD_INT 0
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 1
49127: PUSH
49128: LD_INT 1
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: LD_INT 1
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 1
49147: NEG
49148: PUSH
49149: LD_INT 0
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: NEG
49159: PUSH
49160: LD_INT 1
49162: NEG
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 1
49170: NEG
49171: PUSH
49172: LD_INT 2
49174: NEG
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: LD_INT 2
49185: NEG
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 1
49193: PUSH
49194: LD_INT 1
49196: NEG
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 2
49204: PUSH
49205: LD_INT 0
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 2
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 2
49224: PUSH
49225: LD_INT 2
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: LD_INT 2
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 0
49244: PUSH
49245: LD_INT 2
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: PUSH
49256: LD_INT 1
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 2
49265: NEG
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 2
49276: NEG
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 2
49288: NEG
49289: PUSH
49290: LD_INT 2
49292: NEG
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49319: LD_ADDR_VAR 0 56
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: LD_INT 0
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 1
49357: PUSH
49358: LD_INT 1
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: LD_INT 1
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 1
49377: NEG
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: NEG
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 1
49400: NEG
49401: PUSH
49402: LD_INT 2
49404: NEG
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: LD_INT 2
49415: NEG
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 2
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 2
49444: PUSH
49445: LD_INT 1
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 2
49454: PUSH
49455: LD_INT 2
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: LD_INT 2
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 0
49474: PUSH
49475: LD_INT 2
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 1
49484: NEG
49485: PUSH
49486: LD_INT 1
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 2
49495: NEG
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 2
49506: NEG
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 2
49518: NEG
49519: PUSH
49520: LD_INT 2
49522: NEG
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49549: LD_ADDR_VAR 0 57
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 0
49566: PUSH
49567: LD_INT 1
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: PUSH
49578: LD_INT 0
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 1
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 0
49597: PUSH
49598: LD_INT 1
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 1
49607: NEG
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: LD_INT 1
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: NEG
49631: PUSH
49632: LD_INT 2
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 0
49642: PUSH
49643: LD_INT 2
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: LD_INT 1
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 2
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 2
49674: PUSH
49675: LD_INT 1
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 2
49684: PUSH
49685: LD_INT 2
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 1
49694: PUSH
49695: LD_INT 2
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: LD_INT 2
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 1
49714: NEG
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 2
49725: NEG
49726: PUSH
49727: LD_INT 0
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 2
49736: NEG
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 2
49748: NEG
49749: PUSH
49750: LD_INT 2
49752: NEG
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49779: LD_ADDR_VAR 0 58
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 1
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: LD_INT 1
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 1
49837: NEG
49838: PUSH
49839: LD_INT 0
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 1
49848: NEG
49849: PUSH
49850: LD_INT 1
49852: NEG
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 1
49860: NEG
49861: PUSH
49862: LD_INT 2
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: LD_INT 2
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: LD_INT 1
49886: NEG
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 2
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 2
49904: PUSH
49905: LD_INT 1
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 2
49914: PUSH
49915: LD_INT 2
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 1
49924: PUSH
49925: LD_INT 2
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: LD_INT 2
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 1
49944: NEG
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 2
49955: NEG
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 2
49966: NEG
49967: PUSH
49968: LD_INT 1
49970: NEG
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 2
49978: NEG
49979: PUSH
49980: LD_INT 2
49982: NEG
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50009: LD_ADDR_VAR 0 59
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: LD_INT 1
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: PUSH
50038: LD_INT 0
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 1
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: NEG
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: NEG
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50097: LD_ADDR_VAR 0 60
50101: PUSH
50102: LD_INT 0
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 0
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 1
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 1
50135: PUSH
50136: LD_INT 1
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 1
50155: NEG
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50185: LD_ADDR_VAR 0 61
50189: PUSH
50190: LD_INT 0
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 1
50223: PUSH
50224: LD_INT 1
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 0
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: NEG
50244: PUSH
50245: LD_INT 0
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 1
50254: NEG
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50273: LD_ADDR_VAR 0 62
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 1
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: LD_INT 1
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 1
50331: NEG
50332: PUSH
50333: LD_INT 0
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 1
50342: NEG
50343: PUSH
50344: LD_INT 1
50346: NEG
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50361: LD_ADDR_VAR 0 63
50365: PUSH
50366: LD_INT 0
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: LD_INT 1
50381: NEG
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 1
50430: NEG
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50449: LD_ADDR_VAR 0 64
50453: PUSH
50454: LD_INT 0
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: ST_TO_ADDR
// end ; 1 :
50537: GO 56434
50539: LD_INT 1
50541: DOUBLE
50542: EQUAL
50543: IFTRUE 50547
50545: GO 53170
50547: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50548: LD_ADDR_VAR 0 11
50552: PUSH
50553: LD_INT 1
50555: NEG
50556: PUSH
50557: LD_INT 3
50559: NEG
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: LD_INT 3
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: LD_INT 2
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: LIST
50591: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50592: LD_ADDR_VAR 0 12
50596: PUSH
50597: LD_INT 2
50599: PUSH
50600: LD_INT 1
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 3
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 3
50620: PUSH
50621: LD_INT 1
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: LIST
50632: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50633: LD_ADDR_VAR 0 13
50637: PUSH
50638: LD_INT 3
50640: PUSH
50641: LD_INT 2
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 3
50650: PUSH
50651: LD_INT 3
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 2
50660: PUSH
50661: LD_INT 3
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: LIST
50672: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50673: LD_ADDR_VAR 0 14
50677: PUSH
50678: LD_INT 1
50680: PUSH
50681: LD_INT 3
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: LD_INT 3
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 1
50700: NEG
50701: PUSH
50702: LD_INT 2
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: LIST
50713: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50714: LD_ADDR_VAR 0 15
50718: PUSH
50719: LD_INT 2
50721: NEG
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 3
50732: NEG
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 3
50743: NEG
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: LIST
50757: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50758: LD_ADDR_VAR 0 16
50762: PUSH
50763: LD_INT 2
50765: NEG
50766: PUSH
50767: LD_INT 3
50769: NEG
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 3
50777: NEG
50778: PUSH
50779: LD_INT 2
50781: NEG
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 3
50789: NEG
50790: PUSH
50791: LD_INT 3
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: LIST
50803: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50804: LD_ADDR_VAR 0 17
50808: PUSH
50809: LD_INT 1
50811: NEG
50812: PUSH
50813: LD_INT 3
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: LD_INT 3
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: LD_INT 2
50837: NEG
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: LIST
50847: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50848: LD_ADDR_VAR 0 18
50852: PUSH
50853: LD_INT 2
50855: PUSH
50856: LD_INT 1
50858: NEG
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 3
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 3
50876: PUSH
50877: LD_INT 1
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: LIST
50888: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50889: LD_ADDR_VAR 0 19
50893: PUSH
50894: LD_INT 3
50896: PUSH
50897: LD_INT 2
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 3
50906: PUSH
50907: LD_INT 3
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 2
50916: PUSH
50917: LD_INT 3
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: LIST
50928: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50929: LD_ADDR_VAR 0 20
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: LD_INT 3
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: LD_INT 3
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 1
50956: NEG
50957: PUSH
50958: LD_INT 2
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: LIST
50969: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50970: LD_ADDR_VAR 0 21
50974: PUSH
50975: LD_INT 2
50977: NEG
50978: PUSH
50979: LD_INT 1
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 3
50988: NEG
50989: PUSH
50990: LD_INT 0
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 3
50999: NEG
51000: PUSH
51001: LD_INT 1
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: LIST
51013: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51014: LD_ADDR_VAR 0 22
51018: PUSH
51019: LD_INT 2
51021: NEG
51022: PUSH
51023: LD_INT 3
51025: NEG
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 3
51033: NEG
51034: PUSH
51035: LD_INT 2
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 3
51045: NEG
51046: PUSH
51047: LD_INT 3
51049: NEG
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: LIST
51059: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51060: LD_ADDR_VAR 0 23
51064: PUSH
51065: LD_INT 0
51067: PUSH
51068: LD_INT 3
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: NEG
51079: PUSH
51080: LD_INT 4
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: LD_INT 3
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: LIST
51103: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51104: LD_ADDR_VAR 0 24
51108: PUSH
51109: LD_INT 3
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 3
51121: PUSH
51122: LD_INT 1
51124: NEG
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 4
51132: PUSH
51133: LD_INT 1
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: LIST
51144: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51145: LD_ADDR_VAR 0 25
51149: PUSH
51150: LD_INT 3
51152: PUSH
51153: LD_INT 3
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 4
51162: PUSH
51163: LD_INT 3
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 3
51172: PUSH
51173: LD_INT 4
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: LIST
51184: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51185: LD_ADDR_VAR 0 26
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: LD_INT 3
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 1
51202: PUSH
51203: LD_INT 4
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 1
51212: NEG
51213: PUSH
51214: LD_INT 3
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: LIST
51225: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51226: LD_ADDR_VAR 0 27
51230: PUSH
51231: LD_INT 3
51233: NEG
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 3
51244: NEG
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 4
51255: NEG
51256: PUSH
51257: LD_INT 1
51259: NEG
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: LIST
51269: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51270: LD_ADDR_VAR 0 28
51274: PUSH
51275: LD_INT 3
51277: NEG
51278: PUSH
51279: LD_INT 3
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 3
51289: NEG
51290: PUSH
51291: LD_INT 4
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 4
51301: NEG
51302: PUSH
51303: LD_INT 3
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: LIST
51315: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51316: LD_ADDR_VAR 0 29
51320: PUSH
51321: LD_INT 1
51323: NEG
51324: PUSH
51325: LD_INT 3
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 0
51335: PUSH
51336: LD_INT 3
51338: NEG
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 1
51346: PUSH
51347: LD_INT 2
51349: NEG
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: LD_INT 4
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: LD_INT 4
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: LD_INT 3
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: NEG
51392: PUSH
51393: LD_INT 5
51395: NEG
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: LD_INT 5
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: LD_INT 4
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: LD_INT 6
51429: NEG
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: LD_INT 6
51440: NEG
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: LD_INT 5
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51471: LD_ADDR_VAR 0 30
51475: PUSH
51476: LD_INT 2
51478: PUSH
51479: LD_INT 1
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 3
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 3
51499: PUSH
51500: LD_INT 1
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 3
51509: PUSH
51510: LD_INT 1
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 4
51520: PUSH
51521: LD_INT 0
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 4
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 4
51540: PUSH
51541: LD_INT 1
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 5
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 5
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 5
51571: PUSH
51572: LD_INT 1
51574: NEG
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 6
51582: PUSH
51583: LD_INT 0
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 6
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51614: LD_ADDR_VAR 0 31
51618: PUSH
51619: LD_INT 3
51621: PUSH
51622: LD_INT 2
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 3
51631: PUSH
51632: LD_INT 3
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 2
51641: PUSH
51642: LD_INT 3
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 4
51651: PUSH
51652: LD_INT 3
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 4
51661: PUSH
51662: LD_INT 4
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 3
51671: PUSH
51672: LD_INT 4
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 5
51681: PUSH
51682: LD_INT 4
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 5
51691: PUSH
51692: LD_INT 5
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 4
51701: PUSH
51702: LD_INT 5
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 6
51711: PUSH
51712: LD_INT 5
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 6
51721: PUSH
51722: LD_INT 6
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 5
51731: PUSH
51732: LD_INT 6
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51753: LD_ADDR_VAR 0 32
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: LD_INT 3
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: LD_INT 3
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: LD_INT 2
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 1
51791: PUSH
51792: LD_INT 4
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: LD_INT 4
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: NEG
51812: PUSH
51813: LD_INT 3
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: LD_INT 5
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 0
51832: PUSH
51833: LD_INT 5
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 1
51842: NEG
51843: PUSH
51844: LD_INT 4
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: LD_INT 6
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: LD_INT 6
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 1
51873: NEG
51874: PUSH
51875: LD_INT 5
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51896: LD_ADDR_VAR 0 33
51900: PUSH
51901: LD_INT 2
51903: NEG
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 3
51914: NEG
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 3
51925: NEG
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 3
51937: NEG
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 4
51948: NEG
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 4
51959: NEG
51960: PUSH
51961: LD_INT 1
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 4
51971: NEG
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 5
51982: NEG
51983: PUSH
51984: LD_INT 0
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 5
51993: NEG
51994: PUSH
51995: LD_INT 1
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 5
52005: NEG
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 6
52016: NEG
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 6
52027: NEG
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52051: LD_ADDR_VAR 0 34
52055: PUSH
52056: LD_INT 2
52058: NEG
52059: PUSH
52060: LD_INT 3
52062: NEG
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 3
52070: NEG
52071: PUSH
52072: LD_INT 2
52074: NEG
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 3
52082: NEG
52083: PUSH
52084: LD_INT 3
52086: NEG
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 3
52094: NEG
52095: PUSH
52096: LD_INT 4
52098: NEG
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 4
52106: NEG
52107: PUSH
52108: LD_INT 3
52110: NEG
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 4
52118: NEG
52119: PUSH
52120: LD_INT 4
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 4
52130: NEG
52131: PUSH
52132: LD_INT 5
52134: NEG
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 5
52142: NEG
52143: PUSH
52144: LD_INT 4
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 5
52154: NEG
52155: PUSH
52156: LD_INT 5
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 5
52166: NEG
52167: PUSH
52168: LD_INT 6
52170: NEG
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 6
52178: NEG
52179: PUSH
52180: LD_INT 5
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 6
52190: NEG
52191: PUSH
52192: LD_INT 6
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52214: LD_ADDR_VAR 0 41
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: LD_INT 2
52224: NEG
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: LD_INT 3
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 1
52244: PUSH
52245: LD_INT 2
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: LIST
52257: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52258: LD_ADDR_VAR 0 42
52262: PUSH
52263: LD_INT 2
52265: PUSH
52266: LD_INT 0
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 2
52275: PUSH
52276: LD_INT 1
52278: NEG
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 3
52286: PUSH
52287: LD_INT 1
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: LIST
52298: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52299: LD_ADDR_VAR 0 43
52303: PUSH
52304: LD_INT 2
52306: PUSH
52307: LD_INT 2
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 3
52316: PUSH
52317: LD_INT 2
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 2
52326: PUSH
52327: LD_INT 3
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: LIST
52338: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52339: LD_ADDR_VAR 0 44
52343: PUSH
52344: LD_INT 0
52346: PUSH
52347: LD_INT 2
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 1
52356: PUSH
52357: LD_INT 3
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: LD_INT 2
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: LIST
52379: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52380: LD_ADDR_VAR 0 45
52384: PUSH
52385: LD_INT 2
52387: NEG
52388: PUSH
52389: LD_INT 0
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 2
52398: NEG
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 3
52409: NEG
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: LIST
52423: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52424: LD_ADDR_VAR 0 46
52428: PUSH
52429: LD_INT 2
52431: NEG
52432: PUSH
52433: LD_INT 2
52435: NEG
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 2
52443: NEG
52444: PUSH
52445: LD_INT 3
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 3
52455: NEG
52456: PUSH
52457: LD_INT 2
52459: NEG
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: LIST
52469: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52470: LD_ADDR_VAR 0 47
52474: PUSH
52475: LD_INT 2
52477: NEG
52478: PUSH
52479: LD_INT 3
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: LD_INT 3
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52503: LD_ADDR_VAR 0 48
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: LD_INT 2
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 2
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52534: LD_ADDR_VAR 0 49
52538: PUSH
52539: LD_INT 3
52541: PUSH
52542: LD_INT 1
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 3
52551: PUSH
52552: LD_INT 2
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52563: LD_ADDR_VAR 0 50
52567: PUSH
52568: LD_INT 2
52570: PUSH
52571: LD_INT 3
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: LD_INT 3
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52592: LD_ADDR_VAR 0 51
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: LD_INT 2
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 2
52610: NEG
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52623: LD_ADDR_VAR 0 52
52627: PUSH
52628: LD_INT 3
52630: NEG
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 3
52642: NEG
52643: PUSH
52644: LD_INT 2
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52656: LD_ADDR_VAR 0 53
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: LD_INT 3
52667: NEG
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: LD_INT 3
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: LD_INT 2
52689: NEG
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: LIST
52699: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52700: LD_ADDR_VAR 0 54
52704: PUSH
52705: LD_INT 2
52707: PUSH
52708: LD_INT 1
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 3
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 3
52728: PUSH
52729: LD_INT 1
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: LIST
52740: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52741: LD_ADDR_VAR 0 55
52745: PUSH
52746: LD_INT 3
52748: PUSH
52749: LD_INT 2
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 3
52758: PUSH
52759: LD_INT 3
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 2
52768: PUSH
52769: LD_INT 3
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: LIST
52780: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52781: LD_ADDR_VAR 0 56
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: LD_INT 3
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: LD_INT 3
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: LD_INT 2
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: LIST
52821: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52822: LD_ADDR_VAR 0 57
52826: PUSH
52827: LD_INT 2
52829: NEG
52830: PUSH
52831: LD_INT 1
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 3
52840: NEG
52841: PUSH
52842: LD_INT 0
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 3
52851: NEG
52852: PUSH
52853: LD_INT 1
52855: NEG
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: LIST
52865: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52866: LD_ADDR_VAR 0 58
52870: PUSH
52871: LD_INT 2
52873: NEG
52874: PUSH
52875: LD_INT 3
52877: NEG
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 3
52885: NEG
52886: PUSH
52887: LD_INT 2
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 3
52897: NEG
52898: PUSH
52899: LD_INT 3
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: LIST
52911: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52912: LD_ADDR_VAR 0 59
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: LD_INT 2
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: LD_INT 2
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: LD_INT 1
52945: NEG
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: LIST
52955: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52956: LD_ADDR_VAR 0 60
52960: PUSH
52961: LD_INT 1
52963: PUSH
52964: LD_INT 1
52966: NEG
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 2
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 2
52984: PUSH
52985: LD_INT 1
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: LIST
52996: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52997: LD_ADDR_VAR 0 61
53001: PUSH
53002: LD_INT 2
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 2
53014: PUSH
53015: LD_INT 2
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: PUSH
53025: LD_INT 2
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: LIST
53036: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53037: LD_ADDR_VAR 0 62
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: LD_INT 2
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: LD_INT 2
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 1
53064: NEG
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: LIST
53077: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53078: LD_ADDR_VAR 0 63
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 2
53096: NEG
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 2
53107: NEG
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: LIST
53121: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53122: LD_ADDR_VAR 0 64
53126: PUSH
53127: LD_INT 1
53129: NEG
53130: PUSH
53131: LD_INT 2
53133: NEG
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 2
53141: NEG
53142: PUSH
53143: LD_INT 1
53145: NEG
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 2
53153: NEG
53154: PUSH
53155: LD_INT 2
53157: NEG
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: LIST
53167: ST_TO_ADDR
// end ; 2 :
53168: GO 56434
53170: LD_INT 2
53172: DOUBLE
53173: EQUAL
53174: IFTRUE 53178
53176: GO 56433
53178: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53179: LD_ADDR_VAR 0 29
53183: PUSH
53184: LD_INT 4
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 4
53196: PUSH
53197: LD_INT 1
53199: NEG
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 5
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 5
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 4
53227: PUSH
53228: LD_INT 1
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 3
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 3
53247: PUSH
53248: LD_INT 1
53250: NEG
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 3
53258: PUSH
53259: LD_INT 2
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 5
53269: PUSH
53270: LD_INT 2
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 3
53279: PUSH
53280: LD_INT 3
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 3
53289: PUSH
53290: LD_INT 2
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 4
53299: PUSH
53300: LD_INT 3
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 4
53309: PUSH
53310: LD_INT 4
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 3
53319: PUSH
53320: LD_INT 4
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 2
53329: PUSH
53330: LD_INT 3
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 2
53339: PUSH
53340: LD_INT 2
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 4
53349: PUSH
53350: LD_INT 2
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 2
53359: PUSH
53360: LD_INT 4
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: LD_INT 4
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: LD_INT 3
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 1
53389: PUSH
53390: LD_INT 4
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: LD_INT 5
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 0
53409: PUSH
53410: LD_INT 5
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 1
53419: NEG
53420: PUSH
53421: LD_INT 4
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 1
53430: NEG
53431: PUSH
53432: LD_INT 3
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 2
53441: PUSH
53442: LD_INT 5
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 2
53451: NEG
53452: PUSH
53453: LD_INT 3
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 3
53462: NEG
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 3
53473: NEG
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 2
53485: NEG
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 2
53496: NEG
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 3
53507: NEG
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 4
53518: NEG
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 4
53529: NEG
53530: PUSH
53531: LD_INT 1
53533: NEG
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 4
53541: NEG
53542: PUSH
53543: LD_INT 2
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 2
53553: NEG
53554: PUSH
53555: LD_INT 2
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 4
53564: NEG
53565: PUSH
53566: LD_INT 4
53568: NEG
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 4
53576: NEG
53577: PUSH
53578: LD_INT 5
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 3
53588: NEG
53589: PUSH
53590: LD_INT 4
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 3
53600: NEG
53601: PUSH
53602: LD_INT 3
53604: NEG
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 4
53612: NEG
53613: PUSH
53614: LD_INT 3
53616: NEG
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 5
53624: NEG
53625: PUSH
53626: LD_INT 4
53628: NEG
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 5
53636: NEG
53637: PUSH
53638: LD_INT 5
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 3
53648: NEG
53649: PUSH
53650: LD_INT 5
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 5
53660: NEG
53661: PUSH
53662: LD_INT 3
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53717: LD_ADDR_VAR 0 30
53721: PUSH
53722: LD_INT 4
53724: PUSH
53725: LD_INT 4
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 4
53734: PUSH
53735: LD_INT 3
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 5
53744: PUSH
53745: LD_INT 4
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 5
53754: PUSH
53755: LD_INT 5
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 4
53764: PUSH
53765: LD_INT 5
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 3
53774: PUSH
53775: LD_INT 4
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 3
53784: PUSH
53785: LD_INT 3
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 5
53794: PUSH
53795: LD_INT 3
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 3
53804: PUSH
53805: LD_INT 5
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: LD_INT 3
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 0
53824: PUSH
53825: LD_INT 2
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 1
53834: PUSH
53835: LD_INT 3
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 1
53844: PUSH
53845: LD_INT 4
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: LD_INT 4
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: NEG
53865: PUSH
53866: LD_INT 3
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 1
53875: NEG
53876: PUSH
53877: LD_INT 2
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 2
53886: PUSH
53887: LD_INT 4
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 2
53896: NEG
53897: PUSH
53898: LD_INT 2
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 4
53907: NEG
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 4
53918: NEG
53919: PUSH
53920: LD_INT 1
53922: NEG
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 3
53930: NEG
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 3
53941: NEG
53942: PUSH
53943: LD_INT 1
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 4
53952: NEG
53953: PUSH
53954: LD_INT 1
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 5
53963: NEG
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 5
53974: NEG
53975: PUSH
53976: LD_INT 1
53978: NEG
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 5
53986: NEG
53987: PUSH
53988: LD_INT 2
53990: NEG
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 3
53998: NEG
53999: PUSH
54000: LD_INT 2
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 3
54009: NEG
54010: PUSH
54011: LD_INT 3
54013: NEG
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 3
54021: NEG
54022: PUSH
54023: LD_INT 4
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 2
54033: NEG
54034: PUSH
54035: LD_INT 3
54037: NEG
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: LD_INT 2
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 3
54057: NEG
54058: PUSH
54059: LD_INT 2
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 4
54069: NEG
54070: PUSH
54071: LD_INT 3
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 4
54081: NEG
54082: PUSH
54083: LD_INT 4
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 2
54093: NEG
54094: PUSH
54095: LD_INT 4
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 4
54105: NEG
54106: PUSH
54107: LD_INT 2
54109: NEG
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 0
54117: PUSH
54118: LD_INT 4
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: LD_INT 5
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 1
54139: PUSH
54140: LD_INT 4
54142: NEG
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: LD_INT 3
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: LD_INT 3
54164: NEG
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: LD_INT 4
54176: NEG
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 1
54184: NEG
54185: PUSH
54186: LD_INT 5
54188: NEG
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 2
54196: PUSH
54197: LD_INT 3
54199: NEG
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 2
54207: NEG
54208: PUSH
54209: LD_INT 5
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54264: LD_ADDR_VAR 0 31
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: LD_INT 4
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: LD_INT 3
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: LD_INT 4
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: LD_INT 5
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 0
54311: PUSH
54312: LD_INT 5
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 1
54321: NEG
54322: PUSH
54323: LD_INT 4
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 1
54332: NEG
54333: PUSH
54334: LD_INT 3
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 2
54343: PUSH
54344: LD_INT 5
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 2
54353: NEG
54354: PUSH
54355: LD_INT 3
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 3
54364: NEG
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 3
54375: NEG
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 2
54387: NEG
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 2
54398: NEG
54399: PUSH
54400: LD_INT 1
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 3
54409: NEG
54410: PUSH
54411: LD_INT 1
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 4
54420: NEG
54421: PUSH
54422: LD_INT 0
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 4
54431: NEG
54432: PUSH
54433: LD_INT 1
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 4
54443: NEG
54444: PUSH
54445: LD_INT 2
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 2
54455: NEG
54456: PUSH
54457: LD_INT 2
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 4
54466: NEG
54467: PUSH
54468: LD_INT 4
54470: NEG
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 4
54478: NEG
54479: PUSH
54480: LD_INT 5
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 3
54490: NEG
54491: PUSH
54492: LD_INT 4
54494: NEG
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 3
54502: NEG
54503: PUSH
54504: LD_INT 3
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 4
54514: NEG
54515: PUSH
54516: LD_INT 3
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 5
54526: NEG
54527: PUSH
54528: LD_INT 4
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 5
54538: NEG
54539: PUSH
54540: LD_INT 5
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 3
54550: NEG
54551: PUSH
54552: LD_INT 5
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 5
54562: NEG
54563: PUSH
54564: LD_INT 3
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 0
54574: PUSH
54575: LD_INT 3
54577: NEG
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: LD_INT 4
54588: NEG
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: LD_INT 3
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: LD_INT 2
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 0
54618: PUSH
54619: LD_INT 2
54621: NEG
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: LD_INT 3
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: LD_INT 4
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 2
54653: PUSH
54654: LD_INT 2
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 2
54664: NEG
54665: PUSH
54666: LD_INT 4
54668: NEG
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 4
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 4
54686: PUSH
54687: LD_INT 1
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 5
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 5
54707: PUSH
54708: LD_INT 1
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 4
54717: PUSH
54718: LD_INT 1
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 3
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 3
54737: PUSH
54738: LD_INT 1
54740: NEG
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 3
54748: PUSH
54749: LD_INT 2
54751: NEG
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 5
54759: PUSH
54760: LD_INT 2
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54814: LD_ADDR_VAR 0 32
54818: PUSH
54819: LD_INT 4
54821: NEG
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 4
54832: NEG
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 3
54844: NEG
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 3
54855: NEG
54856: PUSH
54857: LD_INT 1
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 4
54866: NEG
54867: PUSH
54868: LD_INT 1
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 5
54877: NEG
54878: PUSH
54879: LD_INT 0
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 5
54888: NEG
54889: PUSH
54890: LD_INT 1
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 5
54900: NEG
54901: PUSH
54902: LD_INT 2
54904: NEG
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 3
54912: NEG
54913: PUSH
54914: LD_INT 2
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 3
54923: NEG
54924: PUSH
54925: LD_INT 3
54927: NEG
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 3
54935: NEG
54936: PUSH
54937: LD_INT 4
54939: NEG
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 2
54947: NEG
54948: PUSH
54949: LD_INT 3
54951: NEG
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 2
54959: NEG
54960: PUSH
54961: LD_INT 2
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 3
54971: NEG
54972: PUSH
54973: LD_INT 2
54975: NEG
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 4
54983: NEG
54984: PUSH
54985: LD_INT 3
54987: NEG
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 4
54995: NEG
54996: PUSH
54997: LD_INT 4
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 2
55007: NEG
55008: PUSH
55009: LD_INT 4
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 4
55019: NEG
55020: PUSH
55021: LD_INT 2
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 0
55031: PUSH
55032: LD_INT 4
55034: NEG
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: LD_INT 5
55045: NEG
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: LD_INT 4
55056: NEG
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: PUSH
55065: LD_INT 3
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 0
55075: PUSH
55076: LD_INT 3
55078: NEG
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 1
55086: NEG
55087: PUSH
55088: LD_INT 4
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: NEG
55099: PUSH
55100: LD_INT 5
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 2
55110: PUSH
55111: LD_INT 3
55113: NEG
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 2
55121: NEG
55122: PUSH
55123: LD_INT 5
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 3
55133: PUSH
55134: LD_INT 0
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 3
55143: PUSH
55144: LD_INT 1
55146: NEG
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 4
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 4
55164: PUSH
55165: LD_INT 1
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 3
55174: PUSH
55175: LD_INT 1
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 2
55184: PUSH
55185: LD_INT 0
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 2
55194: PUSH
55195: LD_INT 1
55197: NEG
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 2
55205: PUSH
55206: LD_INT 2
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 4
55216: PUSH
55217: LD_INT 2
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 4
55226: PUSH
55227: LD_INT 4
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 4
55236: PUSH
55237: LD_INT 3
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 5
55246: PUSH
55247: LD_INT 4
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 5
55256: PUSH
55257: LD_INT 5
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 4
55266: PUSH
55267: LD_INT 5
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 3
55276: PUSH
55277: LD_INT 4
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 3
55286: PUSH
55287: LD_INT 3
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 5
55296: PUSH
55297: LD_INT 3
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 3
55306: PUSH
55307: LD_INT 5
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55361: LD_ADDR_VAR 0 33
55365: PUSH
55366: LD_INT 4
55368: NEG
55369: PUSH
55370: LD_INT 4
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 4
55380: NEG
55381: PUSH
55382: LD_INT 5
55384: NEG
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 3
55392: NEG
55393: PUSH
55394: LD_INT 4
55396: NEG
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 3
55404: NEG
55405: PUSH
55406: LD_INT 3
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 4
55416: NEG
55417: PUSH
55418: LD_INT 3
55420: NEG
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 5
55428: NEG
55429: PUSH
55430: LD_INT 4
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 5
55440: NEG
55441: PUSH
55442: LD_INT 5
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 3
55452: NEG
55453: PUSH
55454: LD_INT 5
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 5
55464: NEG
55465: PUSH
55466: LD_INT 3
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: LD_INT 3
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 0
55487: PUSH
55488: LD_INT 4
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: PUSH
55499: LD_INT 3
55501: NEG
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 1
55509: PUSH
55510: LD_INT 2
55512: NEG
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: LD_INT 2
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: NEG
55532: PUSH
55533: LD_INT 3
55535: NEG
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 1
55543: NEG
55544: PUSH
55545: LD_INT 4
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 2
55555: PUSH
55556: LD_INT 2
55558: NEG
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 2
55566: NEG
55567: PUSH
55568: LD_INT 4
55570: NEG
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 4
55578: PUSH
55579: LD_INT 0
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 4
55588: PUSH
55589: LD_INT 1
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 5
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 5
55609: PUSH
55610: LD_INT 1
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 4
55619: PUSH
55620: LD_INT 1
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 3
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 3
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 3
55650: PUSH
55651: LD_INT 2
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 5
55661: PUSH
55662: LD_INT 2
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 3
55671: PUSH
55672: LD_INT 3
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 3
55681: PUSH
55682: LD_INT 2
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 4
55691: PUSH
55692: LD_INT 3
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 4
55701: PUSH
55702: LD_INT 4
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 3
55711: PUSH
55712: LD_INT 4
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 2
55721: PUSH
55722: LD_INT 3
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 2
55731: PUSH
55732: LD_INT 2
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 4
55741: PUSH
55742: LD_INT 2
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 2
55751: PUSH
55752: LD_INT 4
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: LD_INT 4
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: LD_INT 3
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: PUSH
55782: LD_INT 4
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: LD_INT 5
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: LD_INT 5
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 1
55811: NEG
55812: PUSH
55813: LD_INT 4
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: LD_INT 3
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 2
55833: PUSH
55834: LD_INT 5
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 2
55843: NEG
55844: PUSH
55845: LD_INT 3
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55899: LD_ADDR_VAR 0 34
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: LD_INT 4
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: LD_INT 5
55920: NEG
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 1
55928: PUSH
55929: LD_INT 4
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: PUSH
55940: LD_INT 3
55942: NEG
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: LD_INT 3
55953: NEG
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 1
55961: NEG
55962: PUSH
55963: LD_INT 4
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 1
55973: NEG
55974: PUSH
55975: LD_INT 5
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 2
55985: PUSH
55986: LD_INT 3
55988: NEG
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 2
55996: NEG
55997: PUSH
55998: LD_INT 5
56000: NEG
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 3
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 3
56018: PUSH
56019: LD_INT 1
56021: NEG
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 4
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 4
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 3
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 2
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 2
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 2
56080: PUSH
56081: LD_INT 2
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 4
56091: PUSH
56092: LD_INT 2
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 4
56101: PUSH
56102: LD_INT 4
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 4
56111: PUSH
56112: LD_INT 3
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 5
56121: PUSH
56122: LD_INT 4
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 5
56131: PUSH
56132: LD_INT 5
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 4
56141: PUSH
56142: LD_INT 5
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 3
56151: PUSH
56152: LD_INT 4
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 3
56161: PUSH
56162: LD_INT 3
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 5
56171: PUSH
56172: LD_INT 3
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 3
56181: PUSH
56182: LD_INT 5
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: LD_INT 3
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: LD_INT 2
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 1
56211: PUSH
56212: LD_INT 3
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 1
56221: PUSH
56222: LD_INT 4
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 0
56231: PUSH
56232: LD_INT 4
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 1
56241: NEG
56242: PUSH
56243: LD_INT 3
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: LD_INT 2
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 2
56263: PUSH
56264: LD_INT 4
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 2
56273: NEG
56274: PUSH
56275: LD_INT 2
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 4
56284: NEG
56285: PUSH
56286: LD_INT 0
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 4
56295: NEG
56296: PUSH
56297: LD_INT 1
56299: NEG
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 3
56307: NEG
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 3
56318: NEG
56319: PUSH
56320: LD_INT 1
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 4
56329: NEG
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 5
56340: NEG
56341: PUSH
56342: LD_INT 0
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 5
56351: NEG
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 5
56363: NEG
56364: PUSH
56365: LD_INT 2
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 3
56375: NEG
56376: PUSH
56377: LD_INT 2
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: ST_TO_ADDR
// end ; end ;
56431: GO 56434
56433: POP
// case btype of b_depot , b_warehouse :
56434: LD_VAR 0 1
56438: PUSH
56439: LD_INT 0
56441: DOUBLE
56442: EQUAL
56443: IFTRUE 56453
56445: LD_INT 1
56447: DOUBLE
56448: EQUAL
56449: IFTRUE 56453
56451: GO 56654
56453: POP
// case nation of nation_american :
56454: LD_VAR 0 5
56458: PUSH
56459: LD_INT 1
56461: DOUBLE
56462: EQUAL
56463: IFTRUE 56467
56465: GO 56523
56467: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56468: LD_ADDR_VAR 0 9
56472: PUSH
56473: LD_VAR 0 11
56477: PUSH
56478: LD_VAR 0 12
56482: PUSH
56483: LD_VAR 0 13
56487: PUSH
56488: LD_VAR 0 14
56492: PUSH
56493: LD_VAR 0 15
56497: PUSH
56498: LD_VAR 0 16
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: PUSH
56511: LD_VAR 0 4
56515: PUSH
56516: LD_INT 1
56518: PLUS
56519: ARRAY
56520: ST_TO_ADDR
56521: GO 56652
56523: LD_INT 2
56525: DOUBLE
56526: EQUAL
56527: IFTRUE 56531
56529: GO 56587
56531: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56532: LD_ADDR_VAR 0 9
56536: PUSH
56537: LD_VAR 0 17
56541: PUSH
56542: LD_VAR 0 18
56546: PUSH
56547: LD_VAR 0 19
56551: PUSH
56552: LD_VAR 0 20
56556: PUSH
56557: LD_VAR 0 21
56561: PUSH
56562: LD_VAR 0 22
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: PUSH
56575: LD_VAR 0 4
56579: PUSH
56580: LD_INT 1
56582: PLUS
56583: ARRAY
56584: ST_TO_ADDR
56585: GO 56652
56587: LD_INT 3
56589: DOUBLE
56590: EQUAL
56591: IFTRUE 56595
56593: GO 56651
56595: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56596: LD_ADDR_VAR 0 9
56600: PUSH
56601: LD_VAR 0 23
56605: PUSH
56606: LD_VAR 0 24
56610: PUSH
56611: LD_VAR 0 25
56615: PUSH
56616: LD_VAR 0 26
56620: PUSH
56621: LD_VAR 0 27
56625: PUSH
56626: LD_VAR 0 28
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: PUSH
56639: LD_VAR 0 4
56643: PUSH
56644: LD_INT 1
56646: PLUS
56647: ARRAY
56648: ST_TO_ADDR
56649: GO 56652
56651: POP
56652: GO 57207
56654: LD_INT 2
56656: DOUBLE
56657: EQUAL
56658: IFTRUE 56668
56660: LD_INT 3
56662: DOUBLE
56663: EQUAL
56664: IFTRUE 56668
56666: GO 56724
56668: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56669: LD_ADDR_VAR 0 9
56673: PUSH
56674: LD_VAR 0 29
56678: PUSH
56679: LD_VAR 0 30
56683: PUSH
56684: LD_VAR 0 31
56688: PUSH
56689: LD_VAR 0 32
56693: PUSH
56694: LD_VAR 0 33
56698: PUSH
56699: LD_VAR 0 34
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: PUSH
56712: LD_VAR 0 4
56716: PUSH
56717: LD_INT 1
56719: PLUS
56720: ARRAY
56721: ST_TO_ADDR
56722: GO 57207
56724: LD_INT 16
56726: DOUBLE
56727: EQUAL
56728: IFTRUE 56786
56730: LD_INT 17
56732: DOUBLE
56733: EQUAL
56734: IFTRUE 56786
56736: LD_INT 18
56738: DOUBLE
56739: EQUAL
56740: IFTRUE 56786
56742: LD_INT 19
56744: DOUBLE
56745: EQUAL
56746: IFTRUE 56786
56748: LD_INT 22
56750: DOUBLE
56751: EQUAL
56752: IFTRUE 56786
56754: LD_INT 20
56756: DOUBLE
56757: EQUAL
56758: IFTRUE 56786
56760: LD_INT 21
56762: DOUBLE
56763: EQUAL
56764: IFTRUE 56786
56766: LD_INT 23
56768: DOUBLE
56769: EQUAL
56770: IFTRUE 56786
56772: LD_INT 24
56774: DOUBLE
56775: EQUAL
56776: IFTRUE 56786
56778: LD_INT 25
56780: DOUBLE
56781: EQUAL
56782: IFTRUE 56786
56784: GO 56842
56786: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56787: LD_ADDR_VAR 0 9
56791: PUSH
56792: LD_VAR 0 35
56796: PUSH
56797: LD_VAR 0 36
56801: PUSH
56802: LD_VAR 0 37
56806: PUSH
56807: LD_VAR 0 38
56811: PUSH
56812: LD_VAR 0 39
56816: PUSH
56817: LD_VAR 0 40
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: PUSH
56830: LD_VAR 0 4
56834: PUSH
56835: LD_INT 1
56837: PLUS
56838: ARRAY
56839: ST_TO_ADDR
56840: GO 57207
56842: LD_INT 6
56844: DOUBLE
56845: EQUAL
56846: IFTRUE 56898
56848: LD_INT 7
56850: DOUBLE
56851: EQUAL
56852: IFTRUE 56898
56854: LD_INT 8
56856: DOUBLE
56857: EQUAL
56858: IFTRUE 56898
56860: LD_INT 13
56862: DOUBLE
56863: EQUAL
56864: IFTRUE 56898
56866: LD_INT 12
56868: DOUBLE
56869: EQUAL
56870: IFTRUE 56898
56872: LD_INT 15
56874: DOUBLE
56875: EQUAL
56876: IFTRUE 56898
56878: LD_INT 11
56880: DOUBLE
56881: EQUAL
56882: IFTRUE 56898
56884: LD_INT 14
56886: DOUBLE
56887: EQUAL
56888: IFTRUE 56898
56890: LD_INT 10
56892: DOUBLE
56893: EQUAL
56894: IFTRUE 56898
56896: GO 56954
56898: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56899: LD_ADDR_VAR 0 9
56903: PUSH
56904: LD_VAR 0 41
56908: PUSH
56909: LD_VAR 0 42
56913: PUSH
56914: LD_VAR 0 43
56918: PUSH
56919: LD_VAR 0 44
56923: PUSH
56924: LD_VAR 0 45
56928: PUSH
56929: LD_VAR 0 46
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: PUSH
56942: LD_VAR 0 4
56946: PUSH
56947: LD_INT 1
56949: PLUS
56950: ARRAY
56951: ST_TO_ADDR
56952: GO 57207
56954: LD_INT 36
56956: DOUBLE
56957: EQUAL
56958: IFTRUE 56962
56960: GO 57018
56962: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56963: LD_ADDR_VAR 0 9
56967: PUSH
56968: LD_VAR 0 47
56972: PUSH
56973: LD_VAR 0 48
56977: PUSH
56978: LD_VAR 0 49
56982: PUSH
56983: LD_VAR 0 50
56987: PUSH
56988: LD_VAR 0 51
56992: PUSH
56993: LD_VAR 0 52
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: PUSH
57006: LD_VAR 0 4
57010: PUSH
57011: LD_INT 1
57013: PLUS
57014: ARRAY
57015: ST_TO_ADDR
57016: GO 57207
57018: LD_INT 4
57020: DOUBLE
57021: EQUAL
57022: IFTRUE 57044
57024: LD_INT 5
57026: DOUBLE
57027: EQUAL
57028: IFTRUE 57044
57030: LD_INT 34
57032: DOUBLE
57033: EQUAL
57034: IFTRUE 57044
57036: LD_INT 37
57038: DOUBLE
57039: EQUAL
57040: IFTRUE 57044
57042: GO 57100
57044: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57045: LD_ADDR_VAR 0 9
57049: PUSH
57050: LD_VAR 0 53
57054: PUSH
57055: LD_VAR 0 54
57059: PUSH
57060: LD_VAR 0 55
57064: PUSH
57065: LD_VAR 0 56
57069: PUSH
57070: LD_VAR 0 57
57074: PUSH
57075: LD_VAR 0 58
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: PUSH
57088: LD_VAR 0 4
57092: PUSH
57093: LD_INT 1
57095: PLUS
57096: ARRAY
57097: ST_TO_ADDR
57098: GO 57207
57100: LD_INT 31
57102: DOUBLE
57103: EQUAL
57104: IFTRUE 57150
57106: LD_INT 32
57108: DOUBLE
57109: EQUAL
57110: IFTRUE 57150
57112: LD_INT 33
57114: DOUBLE
57115: EQUAL
57116: IFTRUE 57150
57118: LD_INT 27
57120: DOUBLE
57121: EQUAL
57122: IFTRUE 57150
57124: LD_INT 26
57126: DOUBLE
57127: EQUAL
57128: IFTRUE 57150
57130: LD_INT 28
57132: DOUBLE
57133: EQUAL
57134: IFTRUE 57150
57136: LD_INT 29
57138: DOUBLE
57139: EQUAL
57140: IFTRUE 57150
57142: LD_INT 30
57144: DOUBLE
57145: EQUAL
57146: IFTRUE 57150
57148: GO 57206
57150: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57151: LD_ADDR_VAR 0 9
57155: PUSH
57156: LD_VAR 0 59
57160: PUSH
57161: LD_VAR 0 60
57165: PUSH
57166: LD_VAR 0 61
57170: PUSH
57171: LD_VAR 0 62
57175: PUSH
57176: LD_VAR 0 63
57180: PUSH
57181: LD_VAR 0 64
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: PUSH
57194: LD_VAR 0 4
57198: PUSH
57199: LD_INT 1
57201: PLUS
57202: ARRAY
57203: ST_TO_ADDR
57204: GO 57207
57206: POP
// temp_list2 = [ ] ;
57207: LD_ADDR_VAR 0 10
57211: PUSH
57212: EMPTY
57213: ST_TO_ADDR
// for i in temp_list do
57214: LD_ADDR_VAR 0 8
57218: PUSH
57219: LD_VAR 0 9
57223: PUSH
57224: FOR_IN
57225: IFFALSE 57277
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57227: LD_ADDR_VAR 0 10
57231: PUSH
57232: LD_VAR 0 10
57236: PUSH
57237: LD_VAR 0 8
57241: PUSH
57242: LD_INT 1
57244: ARRAY
57245: PUSH
57246: LD_VAR 0 2
57250: PLUS
57251: PUSH
57252: LD_VAR 0 8
57256: PUSH
57257: LD_INT 2
57259: ARRAY
57260: PUSH
57261: LD_VAR 0 3
57265: PLUS
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: EMPTY
57272: LIST
57273: ADD
57274: ST_TO_ADDR
57275: GO 57224
57277: POP
57278: POP
// result = temp_list2 ;
57279: LD_ADDR_VAR 0 7
57283: PUSH
57284: LD_VAR 0 10
57288: ST_TO_ADDR
// end ;
57289: LD_VAR 0 7
57293: RET
// export function EnemyInRange ( unit , dist ) ; begin
57294: LD_INT 0
57296: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57297: LD_ADDR_VAR 0 3
57301: PUSH
57302: LD_VAR 0 1
57306: PPUSH
57307: CALL_OW 255
57311: PPUSH
57312: LD_VAR 0 1
57316: PPUSH
57317: CALL_OW 250
57321: PPUSH
57322: LD_VAR 0 1
57326: PPUSH
57327: CALL_OW 251
57331: PPUSH
57332: LD_VAR 0 2
57336: PPUSH
57337: CALL 30690 0 4
57341: PUSH
57342: LD_INT 4
57344: ARRAY
57345: ST_TO_ADDR
// end ;
57346: LD_VAR 0 3
57350: RET
// export function PlayerSeeMe ( unit ) ; begin
57351: LD_INT 0
57353: PPUSH
// result := See ( your_side , unit ) ;
57354: LD_ADDR_VAR 0 2
57358: PUSH
57359: LD_OWVAR 2
57363: PPUSH
57364: LD_VAR 0 1
57368: PPUSH
57369: CALL_OW 292
57373: ST_TO_ADDR
// end ;
57374: LD_VAR 0 2
57378: RET
// export function ReverseDir ( unit ) ; begin
57379: LD_INT 0
57381: PPUSH
// if not unit then
57382: LD_VAR 0 1
57386: NOT
57387: IFFALSE 57391
// exit ;
57389: GO 57414
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57391: LD_ADDR_VAR 0 2
57395: PUSH
57396: LD_VAR 0 1
57400: PPUSH
57401: CALL_OW 254
57405: PUSH
57406: LD_INT 3
57408: PLUS
57409: PUSH
57410: LD_INT 6
57412: MOD
57413: ST_TO_ADDR
// end ;
57414: LD_VAR 0 2
57418: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57419: LD_INT 0
57421: PPUSH
57422: PPUSH
57423: PPUSH
57424: PPUSH
57425: PPUSH
// if not hexes then
57426: LD_VAR 0 2
57430: NOT
57431: IFFALSE 57435
// exit ;
57433: GO 57583
// dist := 9999 ;
57435: LD_ADDR_VAR 0 5
57439: PUSH
57440: LD_INT 9999
57442: ST_TO_ADDR
// for i = 1 to hexes do
57443: LD_ADDR_VAR 0 4
57447: PUSH
57448: DOUBLE
57449: LD_INT 1
57451: DEC
57452: ST_TO_ADDR
57453: LD_VAR 0 2
57457: PUSH
57458: FOR_TO
57459: IFFALSE 57571
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57461: LD_VAR 0 1
57465: PPUSH
57466: LD_VAR 0 2
57470: PUSH
57471: LD_VAR 0 4
57475: ARRAY
57476: PUSH
57477: LD_INT 1
57479: ARRAY
57480: PPUSH
57481: LD_VAR 0 2
57485: PUSH
57486: LD_VAR 0 4
57490: ARRAY
57491: PUSH
57492: LD_INT 2
57494: ARRAY
57495: PPUSH
57496: CALL_OW 297
57500: PUSH
57501: LD_VAR 0 5
57505: LESS
57506: IFFALSE 57569
// begin hex := hexes [ i ] ;
57508: LD_ADDR_VAR 0 7
57512: PUSH
57513: LD_VAR 0 2
57517: PUSH
57518: LD_VAR 0 4
57522: ARRAY
57523: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57524: LD_ADDR_VAR 0 5
57528: PUSH
57529: LD_VAR 0 1
57533: PPUSH
57534: LD_VAR 0 2
57538: PUSH
57539: LD_VAR 0 4
57543: ARRAY
57544: PUSH
57545: LD_INT 1
57547: ARRAY
57548: PPUSH
57549: LD_VAR 0 2
57553: PUSH
57554: LD_VAR 0 4
57558: ARRAY
57559: PUSH
57560: LD_INT 2
57562: ARRAY
57563: PPUSH
57564: CALL_OW 297
57568: ST_TO_ADDR
// end ; end ;
57569: GO 57458
57571: POP
57572: POP
// result := hex ;
57573: LD_ADDR_VAR 0 3
57577: PUSH
57578: LD_VAR 0 7
57582: ST_TO_ADDR
// end ;
57583: LD_VAR 0 3
57587: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57588: LD_INT 0
57590: PPUSH
57591: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57592: LD_VAR 0 1
57596: NOT
57597: PUSH
57598: LD_VAR 0 1
57602: PUSH
57603: LD_INT 21
57605: PUSH
57606: LD_INT 2
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 23
57615: PUSH
57616: LD_INT 2
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PPUSH
57627: CALL_OW 69
57631: IN
57632: NOT
57633: OR
57634: IFFALSE 57638
// exit ;
57636: GO 57685
// for i = 1 to 3 do
57638: LD_ADDR_VAR 0 3
57642: PUSH
57643: DOUBLE
57644: LD_INT 1
57646: DEC
57647: ST_TO_ADDR
57648: LD_INT 3
57650: PUSH
57651: FOR_TO
57652: IFFALSE 57683
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57654: LD_VAR 0 1
57658: PPUSH
57659: CALL_OW 250
57663: PPUSH
57664: LD_VAR 0 1
57668: PPUSH
57669: CALL_OW 251
57673: PPUSH
57674: LD_INT 1
57676: PPUSH
57677: CALL_OW 453
57681: GO 57651
57683: POP
57684: POP
// end ;
57685: LD_VAR 0 2
57689: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57690: LD_INT 0
57692: PPUSH
57693: PPUSH
57694: PPUSH
57695: PPUSH
57696: PPUSH
57697: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57698: LD_VAR 0 1
57702: NOT
57703: PUSH
57704: LD_VAR 0 2
57708: NOT
57709: OR
57710: PUSH
57711: LD_VAR 0 1
57715: PPUSH
57716: CALL_OW 314
57720: OR
57721: IFFALSE 57725
// exit ;
57723: GO 58166
// x := GetX ( enemy_unit ) ;
57725: LD_ADDR_VAR 0 7
57729: PUSH
57730: LD_VAR 0 2
57734: PPUSH
57735: CALL_OW 250
57739: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57740: LD_ADDR_VAR 0 8
57744: PUSH
57745: LD_VAR 0 2
57749: PPUSH
57750: CALL_OW 251
57754: ST_TO_ADDR
// if not x or not y then
57755: LD_VAR 0 7
57759: NOT
57760: PUSH
57761: LD_VAR 0 8
57765: NOT
57766: OR
57767: IFFALSE 57771
// exit ;
57769: GO 58166
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57771: LD_ADDR_VAR 0 6
57775: PUSH
57776: LD_VAR 0 7
57780: PPUSH
57781: LD_INT 0
57783: PPUSH
57784: LD_INT 4
57786: PPUSH
57787: CALL_OW 272
57791: PUSH
57792: LD_VAR 0 8
57796: PPUSH
57797: LD_INT 0
57799: PPUSH
57800: LD_INT 4
57802: PPUSH
57803: CALL_OW 273
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_VAR 0 7
57816: PPUSH
57817: LD_INT 1
57819: PPUSH
57820: LD_INT 4
57822: PPUSH
57823: CALL_OW 272
57827: PUSH
57828: LD_VAR 0 8
57832: PPUSH
57833: LD_INT 1
57835: PPUSH
57836: LD_INT 4
57838: PPUSH
57839: CALL_OW 273
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_VAR 0 7
57852: PPUSH
57853: LD_INT 2
57855: PPUSH
57856: LD_INT 4
57858: PPUSH
57859: CALL_OW 272
57863: PUSH
57864: LD_VAR 0 8
57868: PPUSH
57869: LD_INT 2
57871: PPUSH
57872: LD_INT 4
57874: PPUSH
57875: CALL_OW 273
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_VAR 0 7
57888: PPUSH
57889: LD_INT 3
57891: PPUSH
57892: LD_INT 4
57894: PPUSH
57895: CALL_OW 272
57899: PUSH
57900: LD_VAR 0 8
57904: PPUSH
57905: LD_INT 3
57907: PPUSH
57908: LD_INT 4
57910: PPUSH
57911: CALL_OW 273
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_VAR 0 7
57924: PPUSH
57925: LD_INT 4
57927: PPUSH
57928: LD_INT 4
57930: PPUSH
57931: CALL_OW 272
57935: PUSH
57936: LD_VAR 0 8
57940: PPUSH
57941: LD_INT 4
57943: PPUSH
57944: LD_INT 4
57946: PPUSH
57947: CALL_OW 273
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_VAR 0 7
57960: PPUSH
57961: LD_INT 5
57963: PPUSH
57964: LD_INT 4
57966: PPUSH
57967: CALL_OW 272
57971: PUSH
57972: LD_VAR 0 8
57976: PPUSH
57977: LD_INT 5
57979: PPUSH
57980: LD_INT 4
57982: PPUSH
57983: CALL_OW 273
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: ST_TO_ADDR
// for i = tmp downto 1 do
58000: LD_ADDR_VAR 0 4
58004: PUSH
58005: DOUBLE
58006: LD_VAR 0 6
58010: INC
58011: ST_TO_ADDR
58012: LD_INT 1
58014: PUSH
58015: FOR_DOWNTO
58016: IFFALSE 58117
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58018: LD_VAR 0 6
58022: PUSH
58023: LD_VAR 0 4
58027: ARRAY
58028: PUSH
58029: LD_INT 1
58031: ARRAY
58032: PPUSH
58033: LD_VAR 0 6
58037: PUSH
58038: LD_VAR 0 4
58042: ARRAY
58043: PUSH
58044: LD_INT 2
58046: ARRAY
58047: PPUSH
58048: CALL_OW 488
58052: NOT
58053: PUSH
58054: LD_VAR 0 6
58058: PUSH
58059: LD_VAR 0 4
58063: ARRAY
58064: PUSH
58065: LD_INT 1
58067: ARRAY
58068: PPUSH
58069: LD_VAR 0 6
58073: PUSH
58074: LD_VAR 0 4
58078: ARRAY
58079: PUSH
58080: LD_INT 2
58082: ARRAY
58083: PPUSH
58084: CALL_OW 428
58088: PUSH
58089: LD_INT 0
58091: NONEQUAL
58092: OR
58093: IFFALSE 58115
// tmp := Delete ( tmp , i ) ;
58095: LD_ADDR_VAR 0 6
58099: PUSH
58100: LD_VAR 0 6
58104: PPUSH
58105: LD_VAR 0 4
58109: PPUSH
58110: CALL_OW 3
58114: ST_TO_ADDR
58115: GO 58015
58117: POP
58118: POP
// j := GetClosestHex ( unit , tmp ) ;
58119: LD_ADDR_VAR 0 5
58123: PUSH
58124: LD_VAR 0 1
58128: PPUSH
58129: LD_VAR 0 6
58133: PPUSH
58134: CALL 57419 0 2
58138: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58139: LD_VAR 0 1
58143: PPUSH
58144: LD_VAR 0 5
58148: PUSH
58149: LD_INT 1
58151: ARRAY
58152: PPUSH
58153: LD_VAR 0 5
58157: PUSH
58158: LD_INT 2
58160: ARRAY
58161: PPUSH
58162: CALL_OW 111
// end ;
58166: LD_VAR 0 3
58170: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58171: LD_INT 0
58173: PPUSH
58174: PPUSH
58175: PPUSH
// uc_side = 0 ;
58176: LD_ADDR_OWVAR 20
58180: PUSH
58181: LD_INT 0
58183: ST_TO_ADDR
// uc_nation = 0 ;
58184: LD_ADDR_OWVAR 21
58188: PUSH
58189: LD_INT 0
58191: ST_TO_ADDR
// InitHc_All ( ) ;
58192: CALL_OW 584
// InitVc ;
58196: CALL_OW 20
// if mastodonts then
58200: LD_VAR 0 6
58204: IFFALSE 58271
// for i = 1 to mastodonts do
58206: LD_ADDR_VAR 0 11
58210: PUSH
58211: DOUBLE
58212: LD_INT 1
58214: DEC
58215: ST_TO_ADDR
58216: LD_VAR 0 6
58220: PUSH
58221: FOR_TO
58222: IFFALSE 58269
// begin vc_chassis := 31 ;
58224: LD_ADDR_OWVAR 37
58228: PUSH
58229: LD_INT 31
58231: ST_TO_ADDR
// vc_control := control_rider ;
58232: LD_ADDR_OWVAR 38
58236: PUSH
58237: LD_INT 4
58239: ST_TO_ADDR
// animal := CreateVehicle ;
58240: LD_ADDR_VAR 0 12
58244: PUSH
58245: CALL_OW 45
58249: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58250: LD_VAR 0 12
58254: PPUSH
58255: LD_VAR 0 8
58259: PPUSH
58260: LD_INT 0
58262: PPUSH
58263: CALL 60459 0 3
// end ;
58267: GO 58221
58269: POP
58270: POP
// if horses then
58271: LD_VAR 0 5
58275: IFFALSE 58342
// for i = 1 to horses do
58277: LD_ADDR_VAR 0 11
58281: PUSH
58282: DOUBLE
58283: LD_INT 1
58285: DEC
58286: ST_TO_ADDR
58287: LD_VAR 0 5
58291: PUSH
58292: FOR_TO
58293: IFFALSE 58340
// begin hc_class := 21 ;
58295: LD_ADDR_OWVAR 28
58299: PUSH
58300: LD_INT 21
58302: ST_TO_ADDR
// hc_gallery :=  ;
58303: LD_ADDR_OWVAR 33
58307: PUSH
58308: LD_STRING 
58310: ST_TO_ADDR
// animal := CreateHuman ;
58311: LD_ADDR_VAR 0 12
58315: PUSH
58316: CALL_OW 44
58320: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58321: LD_VAR 0 12
58325: PPUSH
58326: LD_VAR 0 8
58330: PPUSH
58331: LD_INT 0
58333: PPUSH
58334: CALL 60459 0 3
// end ;
58338: GO 58292
58340: POP
58341: POP
// if birds then
58342: LD_VAR 0 1
58346: IFFALSE 58413
// for i = 1 to birds do
58348: LD_ADDR_VAR 0 11
58352: PUSH
58353: DOUBLE
58354: LD_INT 1
58356: DEC
58357: ST_TO_ADDR
58358: LD_VAR 0 1
58362: PUSH
58363: FOR_TO
58364: IFFALSE 58411
// begin hc_class = 18 ;
58366: LD_ADDR_OWVAR 28
58370: PUSH
58371: LD_INT 18
58373: ST_TO_ADDR
// hc_gallery =  ;
58374: LD_ADDR_OWVAR 33
58378: PUSH
58379: LD_STRING 
58381: ST_TO_ADDR
// animal := CreateHuman ;
58382: LD_ADDR_VAR 0 12
58386: PUSH
58387: CALL_OW 44
58391: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58392: LD_VAR 0 12
58396: PPUSH
58397: LD_VAR 0 8
58401: PPUSH
58402: LD_INT 0
58404: PPUSH
58405: CALL 60459 0 3
// end ;
58409: GO 58363
58411: POP
58412: POP
// if tigers then
58413: LD_VAR 0 2
58417: IFFALSE 58501
// for i = 1 to tigers do
58419: LD_ADDR_VAR 0 11
58423: PUSH
58424: DOUBLE
58425: LD_INT 1
58427: DEC
58428: ST_TO_ADDR
58429: LD_VAR 0 2
58433: PUSH
58434: FOR_TO
58435: IFFALSE 58499
// begin hc_class = class_tiger ;
58437: LD_ADDR_OWVAR 28
58441: PUSH
58442: LD_INT 14
58444: ST_TO_ADDR
// hc_gallery =  ;
58445: LD_ADDR_OWVAR 33
58449: PUSH
58450: LD_STRING 
58452: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58453: LD_ADDR_OWVAR 35
58457: PUSH
58458: LD_INT 7
58460: NEG
58461: PPUSH
58462: LD_INT 7
58464: PPUSH
58465: CALL_OW 12
58469: ST_TO_ADDR
// animal := CreateHuman ;
58470: LD_ADDR_VAR 0 12
58474: PUSH
58475: CALL_OW 44
58479: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58480: LD_VAR 0 12
58484: PPUSH
58485: LD_VAR 0 8
58489: PPUSH
58490: LD_INT 0
58492: PPUSH
58493: CALL 60459 0 3
// end ;
58497: GO 58434
58499: POP
58500: POP
// if apemans then
58501: LD_VAR 0 3
58505: IFFALSE 58628
// for i = 1 to apemans do
58507: LD_ADDR_VAR 0 11
58511: PUSH
58512: DOUBLE
58513: LD_INT 1
58515: DEC
58516: ST_TO_ADDR
58517: LD_VAR 0 3
58521: PUSH
58522: FOR_TO
58523: IFFALSE 58626
// begin hc_class = class_apeman ;
58525: LD_ADDR_OWVAR 28
58529: PUSH
58530: LD_INT 12
58532: ST_TO_ADDR
// hc_gallery =  ;
58533: LD_ADDR_OWVAR 33
58537: PUSH
58538: LD_STRING 
58540: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58541: LD_ADDR_OWVAR 35
58545: PUSH
58546: LD_INT 2
58548: NEG
58549: PPUSH
58550: LD_INT 2
58552: PPUSH
58553: CALL_OW 12
58557: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58558: LD_ADDR_OWVAR 31
58562: PUSH
58563: LD_INT 1
58565: PPUSH
58566: LD_INT 3
58568: PPUSH
58569: CALL_OW 12
58573: PUSH
58574: LD_INT 1
58576: PPUSH
58577: LD_INT 3
58579: PPUSH
58580: CALL_OW 12
58584: PUSH
58585: LD_INT 0
58587: PUSH
58588: LD_INT 0
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: ST_TO_ADDR
// animal := CreateHuman ;
58597: LD_ADDR_VAR 0 12
58601: PUSH
58602: CALL_OW 44
58606: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58607: LD_VAR 0 12
58611: PPUSH
58612: LD_VAR 0 8
58616: PPUSH
58617: LD_INT 0
58619: PPUSH
58620: CALL 60459 0 3
// end ;
58624: GO 58522
58626: POP
58627: POP
// if enchidnas then
58628: LD_VAR 0 4
58632: IFFALSE 58699
// for i = 1 to enchidnas do
58634: LD_ADDR_VAR 0 11
58638: PUSH
58639: DOUBLE
58640: LD_INT 1
58642: DEC
58643: ST_TO_ADDR
58644: LD_VAR 0 4
58648: PUSH
58649: FOR_TO
58650: IFFALSE 58697
// begin hc_class = 13 ;
58652: LD_ADDR_OWVAR 28
58656: PUSH
58657: LD_INT 13
58659: ST_TO_ADDR
// hc_gallery =  ;
58660: LD_ADDR_OWVAR 33
58664: PUSH
58665: LD_STRING 
58667: ST_TO_ADDR
// animal := CreateHuman ;
58668: LD_ADDR_VAR 0 12
58672: PUSH
58673: CALL_OW 44
58677: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58678: LD_VAR 0 12
58682: PPUSH
58683: LD_VAR 0 8
58687: PPUSH
58688: LD_INT 0
58690: PPUSH
58691: CALL 60459 0 3
// end ;
58695: GO 58649
58697: POP
58698: POP
// if fishes then
58699: LD_VAR 0 7
58703: IFFALSE 58770
// for i = 1 to fishes do
58705: LD_ADDR_VAR 0 11
58709: PUSH
58710: DOUBLE
58711: LD_INT 1
58713: DEC
58714: ST_TO_ADDR
58715: LD_VAR 0 7
58719: PUSH
58720: FOR_TO
58721: IFFALSE 58768
// begin hc_class = 20 ;
58723: LD_ADDR_OWVAR 28
58727: PUSH
58728: LD_INT 20
58730: ST_TO_ADDR
// hc_gallery =  ;
58731: LD_ADDR_OWVAR 33
58735: PUSH
58736: LD_STRING 
58738: ST_TO_ADDR
// animal := CreateHuman ;
58739: LD_ADDR_VAR 0 12
58743: PUSH
58744: CALL_OW 44
58748: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58749: LD_VAR 0 12
58753: PPUSH
58754: LD_VAR 0 9
58758: PPUSH
58759: LD_INT 0
58761: PPUSH
58762: CALL 60459 0 3
// end ;
58766: GO 58720
58768: POP
58769: POP
// end ;
58770: LD_VAR 0 10
58774: RET
// export function WantHeal ( sci , unit ) ; begin
58775: LD_INT 0
58777: PPUSH
// if GetTaskList ( sci ) > 0 then
58778: LD_VAR 0 1
58782: PPUSH
58783: CALL_OW 437
58787: PUSH
58788: LD_INT 0
58790: GREATER
58791: IFFALSE 58861
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58793: LD_VAR 0 1
58797: PPUSH
58798: CALL_OW 437
58802: PUSH
58803: LD_INT 1
58805: ARRAY
58806: PUSH
58807: LD_INT 1
58809: ARRAY
58810: PUSH
58811: LD_STRING l
58813: EQUAL
58814: PUSH
58815: LD_VAR 0 1
58819: PPUSH
58820: CALL_OW 437
58824: PUSH
58825: LD_INT 1
58827: ARRAY
58828: PUSH
58829: LD_INT 4
58831: ARRAY
58832: PUSH
58833: LD_VAR 0 2
58837: EQUAL
58838: AND
58839: IFFALSE 58851
// result := true else
58841: LD_ADDR_VAR 0 3
58845: PUSH
58846: LD_INT 1
58848: ST_TO_ADDR
58849: GO 58859
// result := false ;
58851: LD_ADDR_VAR 0 3
58855: PUSH
58856: LD_INT 0
58858: ST_TO_ADDR
// end else
58859: GO 58869
// result := false ;
58861: LD_ADDR_VAR 0 3
58865: PUSH
58866: LD_INT 0
58868: ST_TO_ADDR
// end ;
58869: LD_VAR 0 3
58873: RET
// export function HealTarget ( sci ) ; begin
58874: LD_INT 0
58876: PPUSH
// if not sci then
58877: LD_VAR 0 1
58881: NOT
58882: IFFALSE 58886
// exit ;
58884: GO 58951
// result := 0 ;
58886: LD_ADDR_VAR 0 2
58890: PUSH
58891: LD_INT 0
58893: ST_TO_ADDR
// if GetTaskList ( sci ) then
58894: LD_VAR 0 1
58898: PPUSH
58899: CALL_OW 437
58903: IFFALSE 58951
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58905: LD_VAR 0 1
58909: PPUSH
58910: CALL_OW 437
58914: PUSH
58915: LD_INT 1
58917: ARRAY
58918: PUSH
58919: LD_INT 1
58921: ARRAY
58922: PUSH
58923: LD_STRING l
58925: EQUAL
58926: IFFALSE 58951
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58928: LD_ADDR_VAR 0 2
58932: PUSH
58933: LD_VAR 0 1
58937: PPUSH
58938: CALL_OW 437
58942: PUSH
58943: LD_INT 1
58945: ARRAY
58946: PUSH
58947: LD_INT 4
58949: ARRAY
58950: ST_TO_ADDR
// end ;
58951: LD_VAR 0 2
58955: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58956: LD_INT 0
58958: PPUSH
58959: PPUSH
58960: PPUSH
58961: PPUSH
// if not base_units then
58962: LD_VAR 0 1
58966: NOT
58967: IFFALSE 58971
// exit ;
58969: GO 59058
// result := false ;
58971: LD_ADDR_VAR 0 2
58975: PUSH
58976: LD_INT 0
58978: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58979: LD_ADDR_VAR 0 5
58983: PUSH
58984: LD_VAR 0 1
58988: PPUSH
58989: LD_INT 21
58991: PUSH
58992: LD_INT 3
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PPUSH
58999: CALL_OW 72
59003: ST_TO_ADDR
// if not tmp then
59004: LD_VAR 0 5
59008: NOT
59009: IFFALSE 59013
// exit ;
59011: GO 59058
// for i in tmp do
59013: LD_ADDR_VAR 0 3
59017: PUSH
59018: LD_VAR 0 5
59022: PUSH
59023: FOR_IN
59024: IFFALSE 59056
// begin result := EnemyInRange ( i , 22 ) ;
59026: LD_ADDR_VAR 0 2
59030: PUSH
59031: LD_VAR 0 3
59035: PPUSH
59036: LD_INT 22
59038: PPUSH
59039: CALL 57294 0 2
59043: ST_TO_ADDR
// if result then
59044: LD_VAR 0 2
59048: IFFALSE 59054
// exit ;
59050: POP
59051: POP
59052: GO 59058
// end ;
59054: GO 59023
59056: POP
59057: POP
// end ;
59058: LD_VAR 0 2
59062: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59063: LD_INT 0
59065: PPUSH
59066: PPUSH
// if not units then
59067: LD_VAR 0 1
59071: NOT
59072: IFFALSE 59076
// exit ;
59074: GO 59146
// result := [ ] ;
59076: LD_ADDR_VAR 0 3
59080: PUSH
59081: EMPTY
59082: ST_TO_ADDR
// for i in units do
59083: LD_ADDR_VAR 0 4
59087: PUSH
59088: LD_VAR 0 1
59092: PUSH
59093: FOR_IN
59094: IFFALSE 59144
// if GetTag ( i ) = tag then
59096: LD_VAR 0 4
59100: PPUSH
59101: CALL_OW 110
59105: PUSH
59106: LD_VAR 0 2
59110: EQUAL
59111: IFFALSE 59142
// result := Replace ( result , result + 1 , i ) ;
59113: LD_ADDR_VAR 0 3
59117: PUSH
59118: LD_VAR 0 3
59122: PPUSH
59123: LD_VAR 0 3
59127: PUSH
59128: LD_INT 1
59130: PLUS
59131: PPUSH
59132: LD_VAR 0 4
59136: PPUSH
59137: CALL_OW 1
59141: ST_TO_ADDR
59142: GO 59093
59144: POP
59145: POP
// end ;
59146: LD_VAR 0 3
59150: RET
// export function IsDriver ( un ) ; begin
59151: LD_INT 0
59153: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59154: LD_ADDR_VAR 0 2
59158: PUSH
59159: LD_VAR 0 1
59163: PUSH
59164: LD_INT 55
59166: PUSH
59167: EMPTY
59168: LIST
59169: PPUSH
59170: CALL_OW 69
59174: IN
59175: ST_TO_ADDR
// end ;
59176: LD_VAR 0 2
59180: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59181: LD_INT 0
59183: PPUSH
59184: PPUSH
// list := [ ] ;
59185: LD_ADDR_VAR 0 5
59189: PUSH
59190: EMPTY
59191: ST_TO_ADDR
// case d of 0 :
59192: LD_VAR 0 3
59196: PUSH
59197: LD_INT 0
59199: DOUBLE
59200: EQUAL
59201: IFTRUE 59205
59203: GO 59338
59205: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59206: LD_ADDR_VAR 0 5
59210: PUSH
59211: LD_VAR 0 1
59215: PUSH
59216: LD_INT 4
59218: MINUS
59219: PUSH
59220: LD_VAR 0 2
59224: PUSH
59225: LD_INT 4
59227: MINUS
59228: PUSH
59229: LD_INT 2
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: LIST
59236: PUSH
59237: LD_VAR 0 1
59241: PUSH
59242: LD_INT 3
59244: MINUS
59245: PUSH
59246: LD_VAR 0 2
59250: PUSH
59251: LD_INT 1
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: LIST
59258: PUSH
59259: LD_VAR 0 1
59263: PUSH
59264: LD_INT 4
59266: PLUS
59267: PUSH
59268: LD_VAR 0 2
59272: PUSH
59273: LD_INT 4
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: LIST
59280: PUSH
59281: LD_VAR 0 1
59285: PUSH
59286: LD_INT 3
59288: PLUS
59289: PUSH
59290: LD_VAR 0 2
59294: PUSH
59295: LD_INT 3
59297: PLUS
59298: PUSH
59299: LD_INT 5
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: LIST
59306: PUSH
59307: LD_VAR 0 1
59311: PUSH
59312: LD_VAR 0 2
59316: PUSH
59317: LD_INT 4
59319: PLUS
59320: PUSH
59321: LD_INT 0
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: LIST
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: ST_TO_ADDR
// end ; 1 :
59336: GO 60036
59338: LD_INT 1
59340: DOUBLE
59341: EQUAL
59342: IFTRUE 59346
59344: GO 59479
59346: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59347: LD_ADDR_VAR 0 5
59351: PUSH
59352: LD_VAR 0 1
59356: PUSH
59357: LD_VAR 0 2
59361: PUSH
59362: LD_INT 4
59364: MINUS
59365: PUSH
59366: LD_INT 3
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: LIST
59373: PUSH
59374: LD_VAR 0 1
59378: PUSH
59379: LD_INT 3
59381: MINUS
59382: PUSH
59383: LD_VAR 0 2
59387: PUSH
59388: LD_INT 3
59390: MINUS
59391: PUSH
59392: LD_INT 2
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: LIST
59399: PUSH
59400: LD_VAR 0 1
59404: PUSH
59405: LD_INT 4
59407: MINUS
59408: PUSH
59409: LD_VAR 0 2
59413: PUSH
59414: LD_INT 1
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: LIST
59421: PUSH
59422: LD_VAR 0 1
59426: PUSH
59427: LD_VAR 0 2
59431: PUSH
59432: LD_INT 3
59434: PLUS
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: LIST
59443: PUSH
59444: LD_VAR 0 1
59448: PUSH
59449: LD_INT 4
59451: PLUS
59452: PUSH
59453: LD_VAR 0 2
59457: PUSH
59458: LD_INT 4
59460: PLUS
59461: PUSH
59462: LD_INT 5
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: LIST
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: ST_TO_ADDR
// end ; 2 :
59477: GO 60036
59479: LD_INT 2
59481: DOUBLE
59482: EQUAL
59483: IFTRUE 59487
59485: GO 59616
59487: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59488: LD_ADDR_VAR 0 5
59492: PUSH
59493: LD_VAR 0 1
59497: PUSH
59498: LD_VAR 0 2
59502: PUSH
59503: LD_INT 3
59505: MINUS
59506: PUSH
59507: LD_INT 3
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: LIST
59514: PUSH
59515: LD_VAR 0 1
59519: PUSH
59520: LD_INT 4
59522: PLUS
59523: PUSH
59524: LD_VAR 0 2
59528: PUSH
59529: LD_INT 4
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: LIST
59536: PUSH
59537: LD_VAR 0 1
59541: PUSH
59542: LD_VAR 0 2
59546: PUSH
59547: LD_INT 4
59549: PLUS
59550: PUSH
59551: LD_INT 0
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: LIST
59558: PUSH
59559: LD_VAR 0 1
59563: PUSH
59564: LD_INT 3
59566: MINUS
59567: PUSH
59568: LD_VAR 0 2
59572: PUSH
59573: LD_INT 1
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: LIST
59580: PUSH
59581: LD_VAR 0 1
59585: PUSH
59586: LD_INT 4
59588: MINUS
59589: PUSH
59590: LD_VAR 0 2
59594: PUSH
59595: LD_INT 4
59597: MINUS
59598: PUSH
59599: LD_INT 2
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: LIST
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: ST_TO_ADDR
// end ; 3 :
59614: GO 60036
59616: LD_INT 3
59618: DOUBLE
59619: EQUAL
59620: IFTRUE 59624
59622: GO 59757
59624: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59625: LD_ADDR_VAR 0 5
59629: PUSH
59630: LD_VAR 0 1
59634: PUSH
59635: LD_INT 3
59637: PLUS
59638: PUSH
59639: LD_VAR 0 2
59643: PUSH
59644: LD_INT 4
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: LIST
59651: PUSH
59652: LD_VAR 0 1
59656: PUSH
59657: LD_INT 4
59659: PLUS
59660: PUSH
59661: LD_VAR 0 2
59665: PUSH
59666: LD_INT 4
59668: PLUS
59669: PUSH
59670: LD_INT 5
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: LIST
59677: PUSH
59678: LD_VAR 0 1
59682: PUSH
59683: LD_INT 4
59685: MINUS
59686: PUSH
59687: LD_VAR 0 2
59691: PUSH
59692: LD_INT 1
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: LIST
59699: PUSH
59700: LD_VAR 0 1
59704: PUSH
59705: LD_VAR 0 2
59709: PUSH
59710: LD_INT 4
59712: MINUS
59713: PUSH
59714: LD_INT 3
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: LIST
59721: PUSH
59722: LD_VAR 0 1
59726: PUSH
59727: LD_INT 3
59729: MINUS
59730: PUSH
59731: LD_VAR 0 2
59735: PUSH
59736: LD_INT 3
59738: MINUS
59739: PUSH
59740: LD_INT 2
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: LIST
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: ST_TO_ADDR
// end ; 4 :
59755: GO 60036
59757: LD_INT 4
59759: DOUBLE
59760: EQUAL
59761: IFTRUE 59765
59763: GO 59898
59765: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59766: LD_ADDR_VAR 0 5
59770: PUSH
59771: LD_VAR 0 1
59775: PUSH
59776: LD_VAR 0 2
59780: PUSH
59781: LD_INT 4
59783: PLUS
59784: PUSH
59785: LD_INT 0
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: LIST
59792: PUSH
59793: LD_VAR 0 1
59797: PUSH
59798: LD_INT 3
59800: PLUS
59801: PUSH
59802: LD_VAR 0 2
59806: PUSH
59807: LD_INT 3
59809: PLUS
59810: PUSH
59811: LD_INT 5
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: LIST
59818: PUSH
59819: LD_VAR 0 1
59823: PUSH
59824: LD_INT 4
59826: PLUS
59827: PUSH
59828: LD_VAR 0 2
59832: PUSH
59833: LD_INT 4
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: LIST
59840: PUSH
59841: LD_VAR 0 1
59845: PUSH
59846: LD_VAR 0 2
59850: PUSH
59851: LD_INT 3
59853: MINUS
59854: PUSH
59855: LD_INT 3
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: LIST
59862: PUSH
59863: LD_VAR 0 1
59867: PUSH
59868: LD_INT 4
59870: MINUS
59871: PUSH
59872: LD_VAR 0 2
59876: PUSH
59877: LD_INT 4
59879: MINUS
59880: PUSH
59881: LD_INT 2
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: LIST
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: ST_TO_ADDR
// end ; 5 :
59896: GO 60036
59898: LD_INT 5
59900: DOUBLE
59901: EQUAL
59902: IFTRUE 59906
59904: GO 60035
59906: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59907: LD_ADDR_VAR 0 5
59911: PUSH
59912: LD_VAR 0 1
59916: PUSH
59917: LD_INT 4
59919: MINUS
59920: PUSH
59921: LD_VAR 0 2
59925: PUSH
59926: LD_INT 1
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: LIST
59933: PUSH
59934: LD_VAR 0 1
59938: PUSH
59939: LD_VAR 0 2
59943: PUSH
59944: LD_INT 4
59946: MINUS
59947: PUSH
59948: LD_INT 3
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: LIST
59955: PUSH
59956: LD_VAR 0 1
59960: PUSH
59961: LD_INT 4
59963: PLUS
59964: PUSH
59965: LD_VAR 0 2
59969: PUSH
59970: LD_INT 4
59972: PLUS
59973: PUSH
59974: LD_INT 5
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: LIST
59981: PUSH
59982: LD_VAR 0 1
59986: PUSH
59987: LD_INT 3
59989: PLUS
59990: PUSH
59991: LD_VAR 0 2
59995: PUSH
59996: LD_INT 4
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: LIST
60003: PUSH
60004: LD_VAR 0 1
60008: PUSH
60009: LD_VAR 0 2
60013: PUSH
60014: LD_INT 3
60016: PLUS
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: LIST
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: ST_TO_ADDR
// end ; end ;
60033: GO 60036
60035: POP
// result := list ;
60036: LD_ADDR_VAR 0 4
60040: PUSH
60041: LD_VAR 0 5
60045: ST_TO_ADDR
// end ;
60046: LD_VAR 0 4
60050: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60051: LD_INT 0
60053: PPUSH
60054: PPUSH
60055: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60056: LD_VAR 0 1
60060: NOT
60061: PUSH
60062: LD_VAR 0 2
60066: PUSH
60067: LD_INT 1
60069: PUSH
60070: LD_INT 2
60072: PUSH
60073: LD_INT 3
60075: PUSH
60076: LD_INT 4
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: IN
60085: NOT
60086: OR
60087: IFFALSE 60091
// exit ;
60089: GO 60183
// tmp := [ ] ;
60091: LD_ADDR_VAR 0 5
60095: PUSH
60096: EMPTY
60097: ST_TO_ADDR
// for i in units do
60098: LD_ADDR_VAR 0 4
60102: PUSH
60103: LD_VAR 0 1
60107: PUSH
60108: FOR_IN
60109: IFFALSE 60152
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60111: LD_ADDR_VAR 0 5
60115: PUSH
60116: LD_VAR 0 5
60120: PPUSH
60121: LD_VAR 0 5
60125: PUSH
60126: LD_INT 1
60128: PLUS
60129: PPUSH
60130: LD_VAR 0 4
60134: PPUSH
60135: LD_VAR 0 2
60139: PPUSH
60140: CALL_OW 259
60144: PPUSH
60145: CALL_OW 2
60149: ST_TO_ADDR
60150: GO 60108
60152: POP
60153: POP
// if not tmp then
60154: LD_VAR 0 5
60158: NOT
60159: IFFALSE 60163
// exit ;
60161: GO 60183
// result := SortListByListDesc ( units , tmp ) ;
60163: LD_ADDR_VAR 0 3
60167: PUSH
60168: LD_VAR 0 1
60172: PPUSH
60173: LD_VAR 0 5
60177: PPUSH
60178: CALL_OW 77
60182: ST_TO_ADDR
// end ;
60183: LD_VAR 0 3
60187: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60188: LD_INT 0
60190: PPUSH
60191: PPUSH
60192: PPUSH
// result := false ;
60193: LD_ADDR_VAR 0 3
60197: PUSH
60198: LD_INT 0
60200: ST_TO_ADDR
// x := GetX ( building ) ;
60201: LD_ADDR_VAR 0 4
60205: PUSH
60206: LD_VAR 0 2
60210: PPUSH
60211: CALL_OW 250
60215: ST_TO_ADDR
// y := GetY ( building ) ;
60216: LD_ADDR_VAR 0 5
60220: PUSH
60221: LD_VAR 0 2
60225: PPUSH
60226: CALL_OW 251
60230: ST_TO_ADDR
// if not building or not x or not y then
60231: LD_VAR 0 2
60235: NOT
60236: PUSH
60237: LD_VAR 0 4
60241: NOT
60242: OR
60243: PUSH
60244: LD_VAR 0 5
60248: NOT
60249: OR
60250: IFFALSE 60254
// exit ;
60252: GO 60346
// if GetTaskList ( unit ) then
60254: LD_VAR 0 1
60258: PPUSH
60259: CALL_OW 437
60263: IFFALSE 60346
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60265: LD_STRING e
60267: PUSH
60268: LD_VAR 0 1
60272: PPUSH
60273: CALL_OW 437
60277: PUSH
60278: LD_INT 1
60280: ARRAY
60281: PUSH
60282: LD_INT 1
60284: ARRAY
60285: EQUAL
60286: PUSH
60287: LD_VAR 0 4
60291: PUSH
60292: LD_VAR 0 1
60296: PPUSH
60297: CALL_OW 437
60301: PUSH
60302: LD_INT 1
60304: ARRAY
60305: PUSH
60306: LD_INT 2
60308: ARRAY
60309: EQUAL
60310: AND
60311: PUSH
60312: LD_VAR 0 5
60316: PUSH
60317: LD_VAR 0 1
60321: PPUSH
60322: CALL_OW 437
60326: PUSH
60327: LD_INT 1
60329: ARRAY
60330: PUSH
60331: LD_INT 3
60333: ARRAY
60334: EQUAL
60335: AND
60336: IFFALSE 60346
// result := true end ;
60338: LD_ADDR_VAR 0 3
60342: PUSH
60343: LD_INT 1
60345: ST_TO_ADDR
// end ;
60346: LD_VAR 0 3
60350: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60351: LD_INT 0
60353: PPUSH
// result := false ;
60354: LD_ADDR_VAR 0 4
60358: PUSH
60359: LD_INT 0
60361: ST_TO_ADDR
// if GetTaskList ( unit ) then
60362: LD_VAR 0 1
60366: PPUSH
60367: CALL_OW 437
60371: IFFALSE 60454
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60373: LD_STRING M
60375: PUSH
60376: LD_VAR 0 1
60380: PPUSH
60381: CALL_OW 437
60385: PUSH
60386: LD_INT 1
60388: ARRAY
60389: PUSH
60390: LD_INT 1
60392: ARRAY
60393: EQUAL
60394: PUSH
60395: LD_VAR 0 2
60399: PUSH
60400: LD_VAR 0 1
60404: PPUSH
60405: CALL_OW 437
60409: PUSH
60410: LD_INT 1
60412: ARRAY
60413: PUSH
60414: LD_INT 2
60416: ARRAY
60417: EQUAL
60418: AND
60419: PUSH
60420: LD_VAR 0 3
60424: PUSH
60425: LD_VAR 0 1
60429: PPUSH
60430: CALL_OW 437
60434: PUSH
60435: LD_INT 1
60437: ARRAY
60438: PUSH
60439: LD_INT 3
60441: ARRAY
60442: EQUAL
60443: AND
60444: IFFALSE 60454
// result := true ;
60446: LD_ADDR_VAR 0 4
60450: PUSH
60451: LD_INT 1
60453: ST_TO_ADDR
// end ; end ;
60454: LD_VAR 0 4
60458: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60459: LD_INT 0
60461: PPUSH
60462: PPUSH
60463: PPUSH
60464: PPUSH
// if not unit or not area then
60465: LD_VAR 0 1
60469: NOT
60470: PUSH
60471: LD_VAR 0 2
60475: NOT
60476: OR
60477: IFFALSE 60481
// exit ;
60479: GO 60645
// tmp := AreaToList ( area , i ) ;
60481: LD_ADDR_VAR 0 6
60485: PUSH
60486: LD_VAR 0 2
60490: PPUSH
60491: LD_VAR 0 5
60495: PPUSH
60496: CALL_OW 517
60500: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60501: LD_ADDR_VAR 0 5
60505: PUSH
60506: DOUBLE
60507: LD_INT 1
60509: DEC
60510: ST_TO_ADDR
60511: LD_VAR 0 6
60515: PUSH
60516: LD_INT 1
60518: ARRAY
60519: PUSH
60520: FOR_TO
60521: IFFALSE 60643
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60523: LD_ADDR_VAR 0 7
60527: PUSH
60528: LD_VAR 0 6
60532: PUSH
60533: LD_INT 1
60535: ARRAY
60536: PUSH
60537: LD_VAR 0 5
60541: ARRAY
60542: PUSH
60543: LD_VAR 0 6
60547: PUSH
60548: LD_INT 2
60550: ARRAY
60551: PUSH
60552: LD_VAR 0 5
60556: ARRAY
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60562: LD_VAR 0 7
60566: PUSH
60567: LD_INT 1
60569: ARRAY
60570: PPUSH
60571: LD_VAR 0 7
60575: PUSH
60576: LD_INT 2
60578: ARRAY
60579: PPUSH
60580: CALL_OW 428
60584: PUSH
60585: LD_INT 0
60587: EQUAL
60588: IFFALSE 60641
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60590: LD_VAR 0 1
60594: PPUSH
60595: LD_VAR 0 7
60599: PUSH
60600: LD_INT 1
60602: ARRAY
60603: PPUSH
60604: LD_VAR 0 7
60608: PUSH
60609: LD_INT 2
60611: ARRAY
60612: PPUSH
60613: LD_VAR 0 3
60617: PPUSH
60618: CALL_OW 48
// result := IsPlaced ( unit ) ;
60622: LD_ADDR_VAR 0 4
60626: PUSH
60627: LD_VAR 0 1
60631: PPUSH
60632: CALL_OW 305
60636: ST_TO_ADDR
// exit ;
60637: POP
60638: POP
60639: GO 60645
// end ; end ;
60641: GO 60520
60643: POP
60644: POP
// end ;
60645: LD_VAR 0 4
60649: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60650: LD_INT 0
60652: PPUSH
60653: PPUSH
60654: PPUSH
// if not side or side > 8 then
60655: LD_VAR 0 1
60659: NOT
60660: PUSH
60661: LD_VAR 0 1
60665: PUSH
60666: LD_INT 8
60668: GREATER
60669: OR
60670: IFFALSE 60674
// exit ;
60672: GO 60861
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60674: LD_ADDR_VAR 0 4
60678: PUSH
60679: LD_INT 22
60681: PUSH
60682: LD_VAR 0 1
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 21
60693: PUSH
60694: LD_INT 3
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PPUSH
60705: CALL_OW 69
60709: ST_TO_ADDR
// if not tmp then
60710: LD_VAR 0 4
60714: NOT
60715: IFFALSE 60719
// exit ;
60717: GO 60861
// enable_addtolog := true ;
60719: LD_ADDR_OWVAR 81
60723: PUSH
60724: LD_INT 1
60726: ST_TO_ADDR
// AddToLog ( [ ) ;
60727: LD_STRING [
60729: PPUSH
60730: CALL_OW 561
// for i in tmp do
60734: LD_ADDR_VAR 0 3
60738: PUSH
60739: LD_VAR 0 4
60743: PUSH
60744: FOR_IN
60745: IFFALSE 60852
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60747: LD_STRING [
60749: PUSH
60750: LD_VAR 0 3
60754: PPUSH
60755: CALL_OW 266
60759: STR
60760: PUSH
60761: LD_STRING , 
60763: STR
60764: PUSH
60765: LD_VAR 0 3
60769: PPUSH
60770: CALL_OW 250
60774: STR
60775: PUSH
60776: LD_STRING , 
60778: STR
60779: PUSH
60780: LD_VAR 0 3
60784: PPUSH
60785: CALL_OW 251
60789: STR
60790: PUSH
60791: LD_STRING , 
60793: STR
60794: PUSH
60795: LD_VAR 0 3
60799: PPUSH
60800: CALL_OW 254
60804: STR
60805: PUSH
60806: LD_STRING , 
60808: STR
60809: PUSH
60810: LD_VAR 0 3
60814: PPUSH
60815: LD_INT 1
60817: PPUSH
60818: CALL_OW 268
60822: STR
60823: PUSH
60824: LD_STRING , 
60826: STR
60827: PUSH
60828: LD_VAR 0 3
60832: PPUSH
60833: LD_INT 2
60835: PPUSH
60836: CALL_OW 268
60840: STR
60841: PUSH
60842: LD_STRING ],
60844: STR
60845: PPUSH
60846: CALL_OW 561
// end ;
60850: GO 60744
60852: POP
60853: POP
// AddToLog ( ]; ) ;
60854: LD_STRING ];
60856: PPUSH
60857: CALL_OW 561
// end ;
60861: LD_VAR 0 2
60865: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60866: LD_INT 0
60868: PPUSH
60869: PPUSH
60870: PPUSH
60871: PPUSH
60872: PPUSH
// if not area or not rate or not max then
60873: LD_VAR 0 1
60877: NOT
60878: PUSH
60879: LD_VAR 0 2
60883: NOT
60884: OR
60885: PUSH
60886: LD_VAR 0 4
60890: NOT
60891: OR
60892: IFFALSE 60896
// exit ;
60894: GO 61088
// while 1 do
60896: LD_INT 1
60898: IFFALSE 61088
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60900: LD_ADDR_VAR 0 9
60904: PUSH
60905: LD_VAR 0 1
60909: PPUSH
60910: LD_INT 1
60912: PPUSH
60913: CALL_OW 287
60917: PUSH
60918: LD_INT 10
60920: MUL
60921: ST_TO_ADDR
// r := rate / 10 ;
60922: LD_ADDR_VAR 0 7
60926: PUSH
60927: LD_VAR 0 2
60931: PUSH
60932: LD_INT 10
60934: DIVREAL
60935: ST_TO_ADDR
// time := 1 1$00 ;
60936: LD_ADDR_VAR 0 8
60940: PUSH
60941: LD_INT 2100
60943: ST_TO_ADDR
// if amount < min then
60944: LD_VAR 0 9
60948: PUSH
60949: LD_VAR 0 3
60953: LESS
60954: IFFALSE 60972
// r := r * 2 else
60956: LD_ADDR_VAR 0 7
60960: PUSH
60961: LD_VAR 0 7
60965: PUSH
60966: LD_INT 2
60968: MUL
60969: ST_TO_ADDR
60970: GO 60998
// if amount > max then
60972: LD_VAR 0 9
60976: PUSH
60977: LD_VAR 0 4
60981: GREATER
60982: IFFALSE 60998
// r := r / 2 ;
60984: LD_ADDR_VAR 0 7
60988: PUSH
60989: LD_VAR 0 7
60993: PUSH
60994: LD_INT 2
60996: DIVREAL
60997: ST_TO_ADDR
// time := time / r ;
60998: LD_ADDR_VAR 0 8
61002: PUSH
61003: LD_VAR 0 8
61007: PUSH
61008: LD_VAR 0 7
61012: DIVREAL
61013: ST_TO_ADDR
// if time < 0 then
61014: LD_VAR 0 8
61018: PUSH
61019: LD_INT 0
61021: LESS
61022: IFFALSE 61039
// time := time * - 1 ;
61024: LD_ADDR_VAR 0 8
61028: PUSH
61029: LD_VAR 0 8
61033: PUSH
61034: LD_INT 1
61036: NEG
61037: MUL
61038: ST_TO_ADDR
// wait ( time ) ;
61039: LD_VAR 0 8
61043: PPUSH
61044: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61048: LD_INT 35
61050: PPUSH
61051: LD_INT 875
61053: PPUSH
61054: CALL_OW 12
61058: PPUSH
61059: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61063: LD_INT 1
61065: PPUSH
61066: LD_INT 5
61068: PPUSH
61069: CALL_OW 12
61073: PPUSH
61074: LD_VAR 0 1
61078: PPUSH
61079: LD_INT 1
61081: PPUSH
61082: CALL_OW 55
// end ;
61086: GO 60896
// end ;
61088: LD_VAR 0 5
61092: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61093: LD_INT 0
61095: PPUSH
61096: PPUSH
61097: PPUSH
61098: PPUSH
61099: PPUSH
61100: PPUSH
61101: PPUSH
61102: PPUSH
// if not turrets or not factories then
61103: LD_VAR 0 1
61107: NOT
61108: PUSH
61109: LD_VAR 0 2
61113: NOT
61114: OR
61115: IFFALSE 61119
// exit ;
61117: GO 61426
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61119: LD_ADDR_VAR 0 10
61123: PUSH
61124: LD_INT 5
61126: PUSH
61127: LD_INT 6
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 2
61136: PUSH
61137: LD_INT 4
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 3
61146: PUSH
61147: LD_INT 5
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 24
61161: PUSH
61162: LD_INT 25
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 23
61171: PUSH
61172: LD_INT 27
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 42
61185: PUSH
61186: LD_INT 43
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 44
61195: PUSH
61196: LD_INT 46
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 45
61205: PUSH
61206: LD_INT 47
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: LIST
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: LIST
61222: ST_TO_ADDR
// result := [ ] ;
61223: LD_ADDR_VAR 0 3
61227: PUSH
61228: EMPTY
61229: ST_TO_ADDR
// for i in turrets do
61230: LD_ADDR_VAR 0 4
61234: PUSH
61235: LD_VAR 0 1
61239: PUSH
61240: FOR_IN
61241: IFFALSE 61424
// begin nat := GetNation ( i ) ;
61243: LD_ADDR_VAR 0 7
61247: PUSH
61248: LD_VAR 0 4
61252: PPUSH
61253: CALL_OW 248
61257: ST_TO_ADDR
// weapon := 0 ;
61258: LD_ADDR_VAR 0 8
61262: PUSH
61263: LD_INT 0
61265: ST_TO_ADDR
// if not nat then
61266: LD_VAR 0 7
61270: NOT
61271: IFFALSE 61275
// continue ;
61273: GO 61240
// for j in list [ nat ] do
61275: LD_ADDR_VAR 0 5
61279: PUSH
61280: LD_VAR 0 10
61284: PUSH
61285: LD_VAR 0 7
61289: ARRAY
61290: PUSH
61291: FOR_IN
61292: IFFALSE 61333
// if GetBWeapon ( i ) = j [ 1 ] then
61294: LD_VAR 0 4
61298: PPUSH
61299: CALL_OW 269
61303: PUSH
61304: LD_VAR 0 5
61308: PUSH
61309: LD_INT 1
61311: ARRAY
61312: EQUAL
61313: IFFALSE 61331
// begin weapon := j [ 2 ] ;
61315: LD_ADDR_VAR 0 8
61319: PUSH
61320: LD_VAR 0 5
61324: PUSH
61325: LD_INT 2
61327: ARRAY
61328: ST_TO_ADDR
// break ;
61329: GO 61333
// end ;
61331: GO 61291
61333: POP
61334: POP
// if not weapon then
61335: LD_VAR 0 8
61339: NOT
61340: IFFALSE 61344
// continue ;
61342: GO 61240
// for k in factories do
61344: LD_ADDR_VAR 0 6
61348: PUSH
61349: LD_VAR 0 2
61353: PUSH
61354: FOR_IN
61355: IFFALSE 61420
// begin weapons := AvailableWeaponList ( k ) ;
61357: LD_ADDR_VAR 0 9
61361: PUSH
61362: LD_VAR 0 6
61366: PPUSH
61367: CALL_OW 478
61371: ST_TO_ADDR
// if not weapons then
61372: LD_VAR 0 9
61376: NOT
61377: IFFALSE 61381
// continue ;
61379: GO 61354
// if weapon in weapons then
61381: LD_VAR 0 8
61385: PUSH
61386: LD_VAR 0 9
61390: IN
61391: IFFALSE 61418
// begin result := [ i , weapon ] ;
61393: LD_ADDR_VAR 0 3
61397: PUSH
61398: LD_VAR 0 4
61402: PUSH
61403: LD_VAR 0 8
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: ST_TO_ADDR
// exit ;
61412: POP
61413: POP
61414: POP
61415: POP
61416: GO 61426
// end ; end ;
61418: GO 61354
61420: POP
61421: POP
// end ;
61422: GO 61240
61424: POP
61425: POP
// end ;
61426: LD_VAR 0 3
61430: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61431: LD_INT 0
61433: PPUSH
// if not side or side > 8 then
61434: LD_VAR 0 3
61438: NOT
61439: PUSH
61440: LD_VAR 0 3
61444: PUSH
61445: LD_INT 8
61447: GREATER
61448: OR
61449: IFFALSE 61453
// exit ;
61451: GO 61512
// if not range then
61453: LD_VAR 0 4
61457: NOT
61458: IFFALSE 61469
// range := - 12 ;
61460: LD_ADDR_VAR 0 4
61464: PUSH
61465: LD_INT 12
61467: NEG
61468: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61469: LD_VAR 0 1
61473: PPUSH
61474: LD_VAR 0 2
61478: PPUSH
61479: LD_VAR 0 3
61483: PPUSH
61484: LD_VAR 0 4
61488: PPUSH
61489: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61493: LD_VAR 0 1
61497: PPUSH
61498: LD_VAR 0 2
61502: PPUSH
61503: LD_VAR 0 3
61507: PPUSH
61508: CALL_OW 331
// end ;
61512: LD_VAR 0 5
61516: RET
// export function Video ( mode ) ; begin
61517: LD_INT 0
61519: PPUSH
// ingame_video = mode ;
61520: LD_ADDR_OWVAR 52
61524: PUSH
61525: LD_VAR 0 1
61529: ST_TO_ADDR
// interface_hidden = mode ;
61530: LD_ADDR_OWVAR 54
61534: PUSH
61535: LD_VAR 0 1
61539: ST_TO_ADDR
// end ;
61540: LD_VAR 0 2
61544: RET
// export function Join ( array , element ) ; begin
61545: LD_INT 0
61547: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61548: LD_ADDR_VAR 0 3
61552: PUSH
61553: LD_VAR 0 1
61557: PPUSH
61558: LD_VAR 0 1
61562: PUSH
61563: LD_INT 1
61565: PLUS
61566: PPUSH
61567: LD_VAR 0 2
61571: PPUSH
61572: CALL_OW 1
61576: ST_TO_ADDR
// end ;
61577: LD_VAR 0 3
61581: RET
// export function JoinUnion ( array , element ) ; begin
61582: LD_INT 0
61584: PPUSH
// result := array union element ;
61585: LD_ADDR_VAR 0 3
61589: PUSH
61590: LD_VAR 0 1
61594: PUSH
61595: LD_VAR 0 2
61599: UNION
61600: ST_TO_ADDR
// end ;
61601: LD_VAR 0 3
61605: RET
// export function GetBehemoths ( side ) ; begin
61606: LD_INT 0
61608: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61609: LD_ADDR_VAR 0 2
61613: PUSH
61614: LD_INT 22
61616: PUSH
61617: LD_VAR 0 1
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 31
61628: PUSH
61629: LD_INT 25
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PPUSH
61640: CALL_OW 69
61644: ST_TO_ADDR
// end ;
61645: LD_VAR 0 2
61649: RET
// export function Shuffle ( array ) ; var i , index ; begin
61650: LD_INT 0
61652: PPUSH
61653: PPUSH
61654: PPUSH
// result := [ ] ;
61655: LD_ADDR_VAR 0 2
61659: PUSH
61660: EMPTY
61661: ST_TO_ADDR
// if not array then
61662: LD_VAR 0 1
61666: NOT
61667: IFFALSE 61671
// exit ;
61669: GO 61770
// Randomize ;
61671: CALL_OW 10
// for i = array downto 1 do
61675: LD_ADDR_VAR 0 3
61679: PUSH
61680: DOUBLE
61681: LD_VAR 0 1
61685: INC
61686: ST_TO_ADDR
61687: LD_INT 1
61689: PUSH
61690: FOR_DOWNTO
61691: IFFALSE 61768
// begin index := rand ( 1 , array ) ;
61693: LD_ADDR_VAR 0 4
61697: PUSH
61698: LD_INT 1
61700: PPUSH
61701: LD_VAR 0 1
61705: PPUSH
61706: CALL_OW 12
61710: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61711: LD_ADDR_VAR 0 2
61715: PUSH
61716: LD_VAR 0 2
61720: PPUSH
61721: LD_VAR 0 2
61725: PUSH
61726: LD_INT 1
61728: PLUS
61729: PPUSH
61730: LD_VAR 0 1
61734: PUSH
61735: LD_VAR 0 4
61739: ARRAY
61740: PPUSH
61741: CALL_OW 2
61745: ST_TO_ADDR
// array := Delete ( array , index ) ;
61746: LD_ADDR_VAR 0 1
61750: PUSH
61751: LD_VAR 0 1
61755: PPUSH
61756: LD_VAR 0 4
61760: PPUSH
61761: CALL_OW 3
61765: ST_TO_ADDR
// end ;
61766: GO 61690
61768: POP
61769: POP
// end ;
61770: LD_VAR 0 2
61774: RET
// export function GetBaseMaterials ( base ) ; begin
61775: LD_INT 0
61777: PPUSH
// result := [ 0 , 0 , 0 ] ;
61778: LD_ADDR_VAR 0 2
61782: PUSH
61783: LD_INT 0
61785: PUSH
61786: LD_INT 0
61788: PUSH
61789: LD_INT 0
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: LIST
61796: ST_TO_ADDR
// if not base then
61797: LD_VAR 0 1
61801: NOT
61802: IFFALSE 61806
// exit ;
61804: GO 61855
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61806: LD_ADDR_VAR 0 2
61810: PUSH
61811: LD_VAR 0 1
61815: PPUSH
61816: LD_INT 1
61818: PPUSH
61819: CALL_OW 275
61823: PUSH
61824: LD_VAR 0 1
61828: PPUSH
61829: LD_INT 2
61831: PPUSH
61832: CALL_OW 275
61836: PUSH
61837: LD_VAR 0 1
61841: PPUSH
61842: LD_INT 3
61844: PPUSH
61845: CALL_OW 275
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: LIST
61854: ST_TO_ADDR
// end ;
61855: LD_VAR 0 2
61859: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61860: LD_INT 0
61862: PPUSH
61863: PPUSH
// result := array ;
61864: LD_ADDR_VAR 0 3
61868: PUSH
61869: LD_VAR 0 1
61873: ST_TO_ADDR
// if size > 0 then
61874: LD_VAR 0 2
61878: PUSH
61879: LD_INT 0
61881: GREATER
61882: IFFALSE 61928
// for i := array downto size do
61884: LD_ADDR_VAR 0 4
61888: PUSH
61889: DOUBLE
61890: LD_VAR 0 1
61894: INC
61895: ST_TO_ADDR
61896: LD_VAR 0 2
61900: PUSH
61901: FOR_DOWNTO
61902: IFFALSE 61926
// result := Delete ( result , result ) ;
61904: LD_ADDR_VAR 0 3
61908: PUSH
61909: LD_VAR 0 3
61913: PPUSH
61914: LD_VAR 0 3
61918: PPUSH
61919: CALL_OW 3
61923: ST_TO_ADDR
61924: GO 61901
61926: POP
61927: POP
// end ;
61928: LD_VAR 0 3
61932: RET
// export function ComExit ( unit ) ; var tmp ; begin
61933: LD_INT 0
61935: PPUSH
61936: PPUSH
// if not IsInUnit ( unit ) then
61937: LD_VAR 0 1
61941: PPUSH
61942: CALL_OW 310
61946: NOT
61947: IFFALSE 61951
// exit ;
61949: GO 62011
// tmp := IsInUnit ( unit ) ;
61951: LD_ADDR_VAR 0 3
61955: PUSH
61956: LD_VAR 0 1
61960: PPUSH
61961: CALL_OW 310
61965: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61966: LD_VAR 0 3
61970: PPUSH
61971: CALL_OW 247
61975: PUSH
61976: LD_INT 2
61978: EQUAL
61979: IFFALSE 61992
// ComExitVehicle ( unit ) else
61981: LD_VAR 0 1
61985: PPUSH
61986: CALL_OW 121
61990: GO 62001
// ComExitBuilding ( unit ) ;
61992: LD_VAR 0 1
61996: PPUSH
61997: CALL_OW 122
// result := tmp ;
62001: LD_ADDR_VAR 0 2
62005: PUSH
62006: LD_VAR 0 3
62010: ST_TO_ADDR
// end ;
62011: LD_VAR 0 2
62015: RET
// export function ComExitAll ( units ) ; var i ; begin
62016: LD_INT 0
62018: PPUSH
62019: PPUSH
// if not units then
62020: LD_VAR 0 1
62024: NOT
62025: IFFALSE 62029
// exit ;
62027: GO 62055
// for i in units do
62029: LD_ADDR_VAR 0 3
62033: PUSH
62034: LD_VAR 0 1
62038: PUSH
62039: FOR_IN
62040: IFFALSE 62053
// ComExit ( i ) ;
62042: LD_VAR 0 3
62046: PPUSH
62047: CALL 61933 0 1
62051: GO 62039
62053: POP
62054: POP
// end ;
62055: LD_VAR 0 2
62059: RET
// export function ResetHc ; begin
62060: LD_INT 0
62062: PPUSH
// InitHc ;
62063: CALL_OW 19
// hc_importance := 0 ;
62067: LD_ADDR_OWVAR 32
62071: PUSH
62072: LD_INT 0
62074: ST_TO_ADDR
// end ;
62075: LD_VAR 0 1
62079: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62080: LD_INT 0
62082: PPUSH
62083: PPUSH
62084: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62085: LD_ADDR_VAR 0 6
62089: PUSH
62090: LD_VAR 0 1
62094: PUSH
62095: LD_VAR 0 3
62099: PLUS
62100: PUSH
62101: LD_INT 2
62103: DIV
62104: ST_TO_ADDR
// if _x < 0 then
62105: LD_VAR 0 6
62109: PUSH
62110: LD_INT 0
62112: LESS
62113: IFFALSE 62130
// _x := _x * - 1 ;
62115: LD_ADDR_VAR 0 6
62119: PUSH
62120: LD_VAR 0 6
62124: PUSH
62125: LD_INT 1
62127: NEG
62128: MUL
62129: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62130: LD_ADDR_VAR 0 7
62134: PUSH
62135: LD_VAR 0 2
62139: PUSH
62140: LD_VAR 0 4
62144: PLUS
62145: PUSH
62146: LD_INT 2
62148: DIV
62149: ST_TO_ADDR
// if _y < 0 then
62150: LD_VAR 0 7
62154: PUSH
62155: LD_INT 0
62157: LESS
62158: IFFALSE 62175
// _y := _y * - 1 ;
62160: LD_ADDR_VAR 0 7
62164: PUSH
62165: LD_VAR 0 7
62169: PUSH
62170: LD_INT 1
62172: NEG
62173: MUL
62174: ST_TO_ADDR
// result := [ _x , _y ] ;
62175: LD_ADDR_VAR 0 5
62179: PUSH
62180: LD_VAR 0 6
62184: PUSH
62185: LD_VAR 0 7
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: ST_TO_ADDR
// end ;
62194: LD_VAR 0 5
62198: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62199: LD_INT 0
62201: PPUSH
62202: PPUSH
62203: PPUSH
62204: PPUSH
// task := GetTaskList ( unit ) ;
62205: LD_ADDR_VAR 0 7
62209: PUSH
62210: LD_VAR 0 1
62214: PPUSH
62215: CALL_OW 437
62219: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62220: LD_VAR 0 7
62224: NOT
62225: PUSH
62226: LD_VAR 0 1
62230: PPUSH
62231: LD_VAR 0 2
62235: PPUSH
62236: CALL_OW 308
62240: NOT
62241: AND
62242: IFFALSE 62246
// exit ;
62244: GO 62364
// if IsInArea ( unit , area ) then
62246: LD_VAR 0 1
62250: PPUSH
62251: LD_VAR 0 2
62255: PPUSH
62256: CALL_OW 308
62260: IFFALSE 62278
// begin ComMoveToArea ( unit , goAway ) ;
62262: LD_VAR 0 1
62266: PPUSH
62267: LD_VAR 0 3
62271: PPUSH
62272: CALL_OW 113
// exit ;
62276: GO 62364
// end ; if task [ 1 ] [ 1 ] <> M then
62278: LD_VAR 0 7
62282: PUSH
62283: LD_INT 1
62285: ARRAY
62286: PUSH
62287: LD_INT 1
62289: ARRAY
62290: PUSH
62291: LD_STRING M
62293: NONEQUAL
62294: IFFALSE 62298
// exit ;
62296: GO 62364
// x := task [ 1 ] [ 2 ] ;
62298: LD_ADDR_VAR 0 5
62302: PUSH
62303: LD_VAR 0 7
62307: PUSH
62308: LD_INT 1
62310: ARRAY
62311: PUSH
62312: LD_INT 2
62314: ARRAY
62315: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62316: LD_ADDR_VAR 0 6
62320: PUSH
62321: LD_VAR 0 7
62325: PUSH
62326: LD_INT 1
62328: ARRAY
62329: PUSH
62330: LD_INT 3
62332: ARRAY
62333: ST_TO_ADDR
// if InArea ( x , y , area ) then
62334: LD_VAR 0 5
62338: PPUSH
62339: LD_VAR 0 6
62343: PPUSH
62344: LD_VAR 0 2
62348: PPUSH
62349: CALL_OW 309
62353: IFFALSE 62364
// ComStop ( unit ) ;
62355: LD_VAR 0 1
62359: PPUSH
62360: CALL_OW 141
// end ;
62364: LD_VAR 0 4
62368: RET
// export function Abs ( value ) ; begin
62369: LD_INT 0
62371: PPUSH
// result := value ;
62372: LD_ADDR_VAR 0 2
62376: PUSH
62377: LD_VAR 0 1
62381: ST_TO_ADDR
// if value < 0 then
62382: LD_VAR 0 1
62386: PUSH
62387: LD_INT 0
62389: LESS
62390: IFFALSE 62407
// result := value * - 1 ;
62392: LD_ADDR_VAR 0 2
62396: PUSH
62397: LD_VAR 0 1
62401: PUSH
62402: LD_INT 1
62404: NEG
62405: MUL
62406: ST_TO_ADDR
// end ;
62407: LD_VAR 0 2
62411: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62412: LD_INT 0
62414: PPUSH
62415: PPUSH
62416: PPUSH
62417: PPUSH
62418: PPUSH
62419: PPUSH
62420: PPUSH
62421: PPUSH
// if not unit or not building then
62422: LD_VAR 0 1
62426: NOT
62427: PUSH
62428: LD_VAR 0 2
62432: NOT
62433: OR
62434: IFFALSE 62438
// exit ;
62436: GO 62664
// x := GetX ( building ) ;
62438: LD_ADDR_VAR 0 4
62442: PUSH
62443: LD_VAR 0 2
62447: PPUSH
62448: CALL_OW 250
62452: ST_TO_ADDR
// y := GetY ( building ) ;
62453: LD_ADDR_VAR 0 6
62457: PUSH
62458: LD_VAR 0 2
62462: PPUSH
62463: CALL_OW 251
62467: ST_TO_ADDR
// d := GetDir ( building ) ;
62468: LD_ADDR_VAR 0 8
62472: PUSH
62473: LD_VAR 0 2
62477: PPUSH
62478: CALL_OW 254
62482: ST_TO_ADDR
// r := 4 ;
62483: LD_ADDR_VAR 0 9
62487: PUSH
62488: LD_INT 4
62490: ST_TO_ADDR
// for i := 1 to 5 do
62491: LD_ADDR_VAR 0 10
62495: PUSH
62496: DOUBLE
62497: LD_INT 1
62499: DEC
62500: ST_TO_ADDR
62501: LD_INT 5
62503: PUSH
62504: FOR_TO
62505: IFFALSE 62662
// begin _x := ShiftX ( x , d , r + i ) ;
62507: LD_ADDR_VAR 0 5
62511: PUSH
62512: LD_VAR 0 4
62516: PPUSH
62517: LD_VAR 0 8
62521: PPUSH
62522: LD_VAR 0 9
62526: PUSH
62527: LD_VAR 0 10
62531: PLUS
62532: PPUSH
62533: CALL_OW 272
62537: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62538: LD_ADDR_VAR 0 7
62542: PUSH
62543: LD_VAR 0 6
62547: PPUSH
62548: LD_VAR 0 8
62552: PPUSH
62553: LD_VAR 0 9
62557: PUSH
62558: LD_VAR 0 10
62562: PLUS
62563: PPUSH
62564: CALL_OW 273
62568: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62569: LD_VAR 0 5
62573: PPUSH
62574: LD_VAR 0 7
62578: PPUSH
62579: CALL_OW 488
62583: PUSH
62584: LD_VAR 0 5
62588: PPUSH
62589: LD_VAR 0 7
62593: PPUSH
62594: CALL_OW 428
62598: PPUSH
62599: CALL_OW 247
62603: PUSH
62604: LD_INT 3
62606: PUSH
62607: LD_INT 2
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: IN
62614: NOT
62615: AND
62616: IFFALSE 62660
// begin ComMoveXY ( unit , _x , _y ) ;
62618: LD_VAR 0 1
62622: PPUSH
62623: LD_VAR 0 5
62627: PPUSH
62628: LD_VAR 0 7
62632: PPUSH
62633: CALL_OW 111
// result := [ _x , _y ] ;
62637: LD_ADDR_VAR 0 3
62641: PUSH
62642: LD_VAR 0 5
62646: PUSH
62647: LD_VAR 0 7
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: ST_TO_ADDR
// exit ;
62656: POP
62657: POP
62658: GO 62664
// end ; end ;
62660: GO 62504
62662: POP
62663: POP
// end ;
62664: LD_VAR 0 3
62668: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62669: LD_INT 0
62671: PPUSH
62672: PPUSH
62673: PPUSH
// result := 0 ;
62674: LD_ADDR_VAR 0 3
62678: PUSH
62679: LD_INT 0
62681: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62682: LD_VAR 0 1
62686: PUSH
62687: LD_INT 0
62689: LESS
62690: PUSH
62691: LD_VAR 0 1
62695: PUSH
62696: LD_INT 8
62698: GREATER
62699: OR
62700: PUSH
62701: LD_VAR 0 2
62705: PUSH
62706: LD_INT 0
62708: LESS
62709: OR
62710: PUSH
62711: LD_VAR 0 2
62715: PUSH
62716: LD_INT 8
62718: GREATER
62719: OR
62720: IFFALSE 62724
// exit ;
62722: GO 62799
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62724: LD_ADDR_VAR 0 4
62728: PUSH
62729: LD_INT 22
62731: PUSH
62732: LD_VAR 0 2
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PPUSH
62741: CALL_OW 69
62745: PUSH
62746: FOR_IN
62747: IFFALSE 62797
// begin un := UnitShoot ( i ) ;
62749: LD_ADDR_VAR 0 5
62753: PUSH
62754: LD_VAR 0 4
62758: PPUSH
62759: CALL_OW 504
62763: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62764: LD_VAR 0 5
62768: PPUSH
62769: CALL_OW 255
62773: PUSH
62774: LD_VAR 0 1
62778: EQUAL
62779: IFFALSE 62795
// begin result := un ;
62781: LD_ADDR_VAR 0 3
62785: PUSH
62786: LD_VAR 0 5
62790: ST_TO_ADDR
// exit ;
62791: POP
62792: POP
62793: GO 62799
// end ; end ;
62795: GO 62746
62797: POP
62798: POP
// end ;
62799: LD_VAR 0 3
62803: RET
// export function GetCargoBay ( units ) ; begin
62804: LD_INT 0
62806: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62807: LD_ADDR_VAR 0 2
62811: PUSH
62812: LD_VAR 0 1
62816: PPUSH
62817: LD_INT 2
62819: PUSH
62820: LD_INT 34
62822: PUSH
62823: LD_INT 12
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 34
62832: PUSH
62833: LD_INT 51
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 34
62842: PUSH
62843: LD_INT 32
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 34
62852: PUSH
62853: LD_EXP 60
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: PPUSH
62869: CALL_OW 72
62873: ST_TO_ADDR
// end ;
62874: LD_VAR 0 2
62878: RET
// export function Negate ( value ) ; begin
62879: LD_INT 0
62881: PPUSH
// result := not value ;
62882: LD_ADDR_VAR 0 2
62886: PUSH
62887: LD_VAR 0 1
62891: NOT
62892: ST_TO_ADDR
// end ;
62893: LD_VAR 0 2
62897: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
62898: LD_INT 0
62900: PPUSH
// if x1 = x2 then
62901: LD_VAR 0 1
62905: PUSH
62906: LD_VAR 0 3
62910: EQUAL
62911: IFFALSE 62945
// begin if y1 > y2 then
62913: LD_VAR 0 2
62917: PUSH
62918: LD_VAR 0 4
62922: GREATER
62923: IFFALSE 62935
// result := 0 else
62925: LD_ADDR_VAR 0 5
62929: PUSH
62930: LD_INT 0
62932: ST_TO_ADDR
62933: GO 62943
// result := 3 ;
62935: LD_ADDR_VAR 0 5
62939: PUSH
62940: LD_INT 3
62942: ST_TO_ADDR
// exit ;
62943: GO 63031
// end ; if y1 = y2 then
62945: LD_VAR 0 2
62949: PUSH
62950: LD_VAR 0 4
62954: EQUAL
62955: IFFALSE 62989
// begin if x1 > x2 then
62957: LD_VAR 0 1
62961: PUSH
62962: LD_VAR 0 3
62966: GREATER
62967: IFFALSE 62979
// result := 1 else
62969: LD_ADDR_VAR 0 5
62973: PUSH
62974: LD_INT 1
62976: ST_TO_ADDR
62977: GO 62987
// result := 4 ;
62979: LD_ADDR_VAR 0 5
62983: PUSH
62984: LD_INT 4
62986: ST_TO_ADDR
// exit ;
62987: GO 63031
// end ; if x1 > x2 and y1 > y2 then
62989: LD_VAR 0 1
62993: PUSH
62994: LD_VAR 0 3
62998: GREATER
62999: PUSH
63000: LD_VAR 0 2
63004: PUSH
63005: LD_VAR 0 4
63009: GREATER
63010: AND
63011: IFFALSE 63023
// result := 2 else
63013: LD_ADDR_VAR 0 5
63017: PUSH
63018: LD_INT 2
63020: ST_TO_ADDR
63021: GO 63031
// result := 5 ;
63023: LD_ADDR_VAR 0 5
63027: PUSH
63028: LD_INT 5
63030: ST_TO_ADDR
// end ;
63031: LD_VAR 0 5
63035: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63036: LD_INT 0
63038: PPUSH
63039: PPUSH
// if not driver or not IsInUnit ( driver ) then
63040: LD_VAR 0 1
63044: NOT
63045: PUSH
63046: LD_VAR 0 1
63050: PPUSH
63051: CALL_OW 310
63055: NOT
63056: OR
63057: IFFALSE 63061
// exit ;
63059: GO 63151
// vehicle := IsInUnit ( driver ) ;
63061: LD_ADDR_VAR 0 3
63065: PUSH
63066: LD_VAR 0 1
63070: PPUSH
63071: CALL_OW 310
63075: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63076: LD_VAR 0 1
63080: PPUSH
63081: LD_STRING \
63083: PUSH
63084: LD_INT 0
63086: PUSH
63087: LD_INT 0
63089: PUSH
63090: LD_INT 0
63092: PUSH
63093: LD_INT 0
63095: PUSH
63096: LD_INT 0
63098: PUSH
63099: LD_INT 0
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: PUSH
63111: LD_STRING E
63113: PUSH
63114: LD_INT 0
63116: PUSH
63117: LD_INT 0
63119: PUSH
63120: LD_VAR 0 3
63124: PUSH
63125: LD_INT 0
63127: PUSH
63128: LD_INT 0
63130: PUSH
63131: LD_INT 0
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PPUSH
63147: CALL_OW 446
// end ;
63151: LD_VAR 0 2
63155: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63156: LD_INT 0
63158: PPUSH
63159: PPUSH
// if not driver or not IsInUnit ( driver ) then
63160: LD_VAR 0 1
63164: NOT
63165: PUSH
63166: LD_VAR 0 1
63170: PPUSH
63171: CALL_OW 310
63175: NOT
63176: OR
63177: IFFALSE 63181
// exit ;
63179: GO 63271
// vehicle := IsInUnit ( driver ) ;
63181: LD_ADDR_VAR 0 3
63185: PUSH
63186: LD_VAR 0 1
63190: PPUSH
63191: CALL_OW 310
63195: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63196: LD_VAR 0 1
63200: PPUSH
63201: LD_STRING \
63203: PUSH
63204: LD_INT 0
63206: PUSH
63207: LD_INT 0
63209: PUSH
63210: LD_INT 0
63212: PUSH
63213: LD_INT 0
63215: PUSH
63216: LD_INT 0
63218: PUSH
63219: LD_INT 0
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: PUSH
63231: LD_STRING E
63233: PUSH
63234: LD_INT 0
63236: PUSH
63237: LD_INT 0
63239: PUSH
63240: LD_VAR 0 3
63244: PUSH
63245: LD_INT 0
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: LD_INT 0
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PPUSH
63267: CALL_OW 447
// end ;
63271: LD_VAR 0 2
63275: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63276: LD_INT 0
63278: PPUSH
63279: PPUSH
63280: PPUSH
// tmp := [ ] ;
63281: LD_ADDR_VAR 0 5
63285: PUSH
63286: EMPTY
63287: ST_TO_ADDR
// for i in units do
63288: LD_ADDR_VAR 0 4
63292: PUSH
63293: LD_VAR 0 1
63297: PUSH
63298: FOR_IN
63299: IFFALSE 63337
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63301: LD_ADDR_VAR 0 5
63305: PUSH
63306: LD_VAR 0 5
63310: PPUSH
63311: LD_VAR 0 5
63315: PUSH
63316: LD_INT 1
63318: PLUS
63319: PPUSH
63320: LD_VAR 0 4
63324: PPUSH
63325: CALL_OW 256
63329: PPUSH
63330: CALL_OW 2
63334: ST_TO_ADDR
63335: GO 63298
63337: POP
63338: POP
// if not tmp then
63339: LD_VAR 0 5
63343: NOT
63344: IFFALSE 63348
// exit ;
63346: GO 63396
// if asc then
63348: LD_VAR 0 2
63352: IFFALSE 63376
// result := SortListByListAsc ( units , tmp ) else
63354: LD_ADDR_VAR 0 3
63358: PUSH
63359: LD_VAR 0 1
63363: PPUSH
63364: LD_VAR 0 5
63368: PPUSH
63369: CALL_OW 76
63373: ST_TO_ADDR
63374: GO 63396
// result := SortListByListDesc ( units , tmp ) ;
63376: LD_ADDR_VAR 0 3
63380: PUSH
63381: LD_VAR 0 1
63385: PPUSH
63386: LD_VAR 0 5
63390: PPUSH
63391: CALL_OW 77
63395: ST_TO_ADDR
// end ;
63396: LD_VAR 0 3
63400: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63401: LD_INT 0
63403: PPUSH
63404: PPUSH
// task := GetTaskList ( mech ) ;
63405: LD_ADDR_VAR 0 4
63409: PUSH
63410: LD_VAR 0 1
63414: PPUSH
63415: CALL_OW 437
63419: ST_TO_ADDR
// if not task then
63420: LD_VAR 0 4
63424: NOT
63425: IFFALSE 63429
// exit ;
63427: GO 63471
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63429: LD_ADDR_VAR 0 3
63433: PUSH
63434: LD_VAR 0 4
63438: PUSH
63439: LD_INT 1
63441: ARRAY
63442: PUSH
63443: LD_INT 1
63445: ARRAY
63446: PUSH
63447: LD_STRING r
63449: EQUAL
63450: PUSH
63451: LD_VAR 0 4
63455: PUSH
63456: LD_INT 1
63458: ARRAY
63459: PUSH
63460: LD_INT 4
63462: ARRAY
63463: PUSH
63464: LD_VAR 0 2
63468: EQUAL
63469: AND
63470: ST_TO_ADDR
// end ;
63471: LD_VAR 0 3
63475: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63476: LD_INT 0
63478: PPUSH
// SetDir ( unit , d ) ;
63479: LD_VAR 0 1
63483: PPUSH
63484: LD_VAR 0 4
63488: PPUSH
63489: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63493: LD_VAR 0 1
63497: PPUSH
63498: LD_VAR 0 2
63502: PPUSH
63503: LD_VAR 0 3
63507: PPUSH
63508: LD_VAR 0 5
63512: PPUSH
63513: CALL_OW 48
// end ;
63517: LD_VAR 0 6
63521: RET
// export function ToNaturalNumber ( number ) ; begin
63522: LD_INT 0
63524: PPUSH
// result := number div 1 ;
63525: LD_ADDR_VAR 0 2
63529: PUSH
63530: LD_VAR 0 1
63534: PUSH
63535: LD_INT 1
63537: DIV
63538: ST_TO_ADDR
// if number < 0 then
63539: LD_VAR 0 1
63543: PUSH
63544: LD_INT 0
63546: LESS
63547: IFFALSE 63557
// result := 0 ;
63549: LD_ADDR_VAR 0 2
63553: PUSH
63554: LD_INT 0
63556: ST_TO_ADDR
// end ;
63557: LD_VAR 0 2
63561: RET
// export function SortByClass ( units , class ) ; var un ; begin
63562: LD_INT 0
63564: PPUSH
63565: PPUSH
// if not units or not class then
63566: LD_VAR 0 1
63570: NOT
63571: PUSH
63572: LD_VAR 0 2
63576: NOT
63577: OR
63578: IFFALSE 63582
// exit ;
63580: GO 63677
// result := [ ] ;
63582: LD_ADDR_VAR 0 3
63586: PUSH
63587: EMPTY
63588: ST_TO_ADDR
// for un in units do
63589: LD_ADDR_VAR 0 4
63593: PUSH
63594: LD_VAR 0 1
63598: PUSH
63599: FOR_IN
63600: IFFALSE 63675
// if GetClass ( un ) = class then
63602: LD_VAR 0 4
63606: PPUSH
63607: CALL_OW 257
63611: PUSH
63612: LD_VAR 0 2
63616: EQUAL
63617: IFFALSE 63644
// result := Insert ( result , 1 , un ) else
63619: LD_ADDR_VAR 0 3
63623: PUSH
63624: LD_VAR 0 3
63628: PPUSH
63629: LD_INT 1
63631: PPUSH
63632: LD_VAR 0 4
63636: PPUSH
63637: CALL_OW 2
63641: ST_TO_ADDR
63642: GO 63673
// result := Replace ( result , result + 1 , un ) ;
63644: LD_ADDR_VAR 0 3
63648: PUSH
63649: LD_VAR 0 3
63653: PPUSH
63654: LD_VAR 0 3
63658: PUSH
63659: LD_INT 1
63661: PLUS
63662: PPUSH
63663: LD_VAR 0 4
63667: PPUSH
63668: CALL_OW 1
63672: ST_TO_ADDR
63673: GO 63599
63675: POP
63676: POP
// end ;
63677: LD_VAR 0 3
63681: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63682: LD_INT 0
63684: PPUSH
63685: PPUSH
63686: PPUSH
63687: PPUSH
63688: PPUSH
63689: PPUSH
63690: PPUSH
// result := [ ] ;
63691: LD_ADDR_VAR 0 4
63695: PUSH
63696: EMPTY
63697: ST_TO_ADDR
// if x - r < 0 then
63698: LD_VAR 0 1
63702: PUSH
63703: LD_VAR 0 3
63707: MINUS
63708: PUSH
63709: LD_INT 0
63711: LESS
63712: IFFALSE 63724
// min_x := 0 else
63714: LD_ADDR_VAR 0 8
63718: PUSH
63719: LD_INT 0
63721: ST_TO_ADDR
63722: GO 63740
// min_x := x - r ;
63724: LD_ADDR_VAR 0 8
63728: PUSH
63729: LD_VAR 0 1
63733: PUSH
63734: LD_VAR 0 3
63738: MINUS
63739: ST_TO_ADDR
// if y - r < 0 then
63740: LD_VAR 0 2
63744: PUSH
63745: LD_VAR 0 3
63749: MINUS
63750: PUSH
63751: LD_INT 0
63753: LESS
63754: IFFALSE 63766
// min_y := 0 else
63756: LD_ADDR_VAR 0 7
63760: PUSH
63761: LD_INT 0
63763: ST_TO_ADDR
63764: GO 63782
// min_y := y - r ;
63766: LD_ADDR_VAR 0 7
63770: PUSH
63771: LD_VAR 0 2
63775: PUSH
63776: LD_VAR 0 3
63780: MINUS
63781: ST_TO_ADDR
// max_x := x + r ;
63782: LD_ADDR_VAR 0 9
63786: PUSH
63787: LD_VAR 0 1
63791: PUSH
63792: LD_VAR 0 3
63796: PLUS
63797: ST_TO_ADDR
// max_y := y + r ;
63798: LD_ADDR_VAR 0 10
63802: PUSH
63803: LD_VAR 0 2
63807: PUSH
63808: LD_VAR 0 3
63812: PLUS
63813: ST_TO_ADDR
// for _x = min_x to max_x do
63814: LD_ADDR_VAR 0 5
63818: PUSH
63819: DOUBLE
63820: LD_VAR 0 8
63824: DEC
63825: ST_TO_ADDR
63826: LD_VAR 0 9
63830: PUSH
63831: FOR_TO
63832: IFFALSE 63933
// for _y = min_y to max_y do
63834: LD_ADDR_VAR 0 6
63838: PUSH
63839: DOUBLE
63840: LD_VAR 0 7
63844: DEC
63845: ST_TO_ADDR
63846: LD_VAR 0 10
63850: PUSH
63851: FOR_TO
63852: IFFALSE 63929
// begin if not ValidHex ( _x , _y ) then
63854: LD_VAR 0 5
63858: PPUSH
63859: LD_VAR 0 6
63863: PPUSH
63864: CALL_OW 488
63868: NOT
63869: IFFALSE 63873
// continue ;
63871: GO 63851
// if GetResourceTypeXY ( _x , _y ) then
63873: LD_VAR 0 5
63877: PPUSH
63878: LD_VAR 0 6
63882: PPUSH
63883: CALL_OW 283
63887: IFFALSE 63927
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63889: LD_ADDR_VAR 0 4
63893: PUSH
63894: LD_VAR 0 4
63898: PPUSH
63899: LD_VAR 0 4
63903: PUSH
63904: LD_INT 1
63906: PLUS
63907: PPUSH
63908: LD_VAR 0 5
63912: PUSH
63913: LD_VAR 0 6
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PPUSH
63922: CALL_OW 1
63926: ST_TO_ADDR
// end ;
63927: GO 63851
63929: POP
63930: POP
63931: GO 63831
63933: POP
63934: POP
// end ;
63935: LD_VAR 0 4
63939: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
63940: LD_INT 0
63942: PPUSH
63943: PPUSH
63944: PPUSH
63945: PPUSH
63946: PPUSH
63947: PPUSH
// if not units then
63948: LD_VAR 0 1
63952: NOT
63953: IFFALSE 63957
// exit ;
63955: GO 64358
// result := UnitFilter ( units , [ f_ok ] ) ;
63957: LD_ADDR_VAR 0 3
63961: PUSH
63962: LD_VAR 0 1
63966: PPUSH
63967: LD_INT 50
63969: PUSH
63970: EMPTY
63971: LIST
63972: PPUSH
63973: CALL_OW 72
63977: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63978: LD_ADDR_VAR 0 7
63982: PUSH
63983: LD_VAR 0 1
63987: PUSH
63988: LD_INT 1
63990: ARRAY
63991: PPUSH
63992: CALL_OW 255
63996: ST_TO_ADDR
// if not result then
63997: LD_VAR 0 3
64001: NOT
64002: IFFALSE 64006
// exit ;
64004: GO 64358
// for i in result do
64006: LD_ADDR_VAR 0 4
64010: PUSH
64011: LD_VAR 0 3
64015: PUSH
64016: FOR_IN
64017: IFFALSE 64356
// begin tag := GetTag ( i ) + 1 ;
64019: LD_ADDR_VAR 0 8
64023: PUSH
64024: LD_VAR 0 4
64028: PPUSH
64029: CALL_OW 110
64033: PUSH
64034: LD_INT 1
64036: PLUS
64037: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64038: LD_ADDR_VAR 0 6
64042: PUSH
64043: LD_VAR 0 4
64047: PPUSH
64048: CALL_OW 250
64052: PPUSH
64053: LD_VAR 0 4
64057: PPUSH
64058: CALL_OW 251
64062: PPUSH
64063: LD_INT 6
64065: PPUSH
64066: CALL 63682 0 3
64070: ST_TO_ADDR
// if cr then
64071: LD_VAR 0 6
64075: IFFALSE 64114
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64077: LD_VAR 0 4
64081: PPUSH
64082: LD_VAR 0 6
64086: PUSH
64087: LD_INT 1
64089: ARRAY
64090: PUSH
64091: LD_INT 1
64093: ARRAY
64094: PPUSH
64095: LD_VAR 0 6
64099: PUSH
64100: LD_INT 1
64102: ARRAY
64103: PUSH
64104: LD_INT 2
64106: ARRAY
64107: PPUSH
64108: CALL_OW 116
64112: GO 64354
// if path > tag then
64114: LD_VAR 0 2
64118: PUSH
64119: LD_VAR 0 8
64123: GREATER
64124: IFFALSE 64302
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
64126: LD_ADDR_VAR 0 5
64130: PUSH
64131: LD_INT 81
64133: PUSH
64134: LD_VAR 0 7
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 91
64145: PUSH
64146: LD_VAR 0 4
64150: PUSH
64151: LD_INT 12
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: LIST
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PPUSH
64163: CALL_OW 69
64167: ST_TO_ADDR
// if enemy then
64168: LD_VAR 0 5
64172: IFFALSE 64200
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
64174: LD_VAR 0 4
64178: PPUSH
64179: LD_VAR 0 5
64183: PPUSH
64184: LD_VAR 0 4
64188: PPUSH
64189: CALL_OW 74
64193: PPUSH
64194: CALL_OW 115
64198: GO 64300
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64200: LD_VAR 0 4
64204: PPUSH
64205: LD_VAR 0 2
64209: PUSH
64210: LD_VAR 0 8
64214: ARRAY
64215: PUSH
64216: LD_INT 1
64218: ARRAY
64219: PPUSH
64220: LD_VAR 0 2
64224: PUSH
64225: LD_VAR 0 8
64229: ARRAY
64230: PUSH
64231: LD_INT 2
64233: ARRAY
64234: PPUSH
64235: CALL_OW 297
64239: PUSH
64240: LD_INT 6
64242: GREATER
64243: IFFALSE 64286
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64245: LD_VAR 0 4
64249: PPUSH
64250: LD_VAR 0 2
64254: PUSH
64255: LD_VAR 0 8
64259: ARRAY
64260: PUSH
64261: LD_INT 1
64263: ARRAY
64264: PPUSH
64265: LD_VAR 0 2
64269: PUSH
64270: LD_VAR 0 8
64274: ARRAY
64275: PUSH
64276: LD_INT 2
64278: ARRAY
64279: PPUSH
64280: CALL_OW 114
64284: GO 64300
// SetTag ( i , tag ) ;
64286: LD_VAR 0 4
64290: PPUSH
64291: LD_VAR 0 8
64295: PPUSH
64296: CALL_OW 109
// end else
64300: GO 64354
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64302: LD_ADDR_VAR 0 5
64306: PUSH
64307: LD_INT 81
64309: PUSH
64310: LD_VAR 0 7
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PPUSH
64319: CALL_OW 69
64323: ST_TO_ADDR
// if enemy then
64324: LD_VAR 0 5
64328: IFFALSE 64354
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64330: LD_VAR 0 4
64334: PPUSH
64335: LD_VAR 0 5
64339: PPUSH
64340: LD_VAR 0 4
64344: PPUSH
64345: CALL_OW 74
64349: PPUSH
64350: CALL_OW 115
// end ; end ;
64354: GO 64016
64356: POP
64357: POP
// end ; end_of_file
64358: LD_VAR 0 3
64362: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
64363: LD_INT 0
64365: PPUSH
// ar_miner := 81 ;
64366: LD_ADDR_EXP 66
64370: PUSH
64371: LD_INT 81
64373: ST_TO_ADDR
// ar_crane := 88 ;
64374: LD_ADDR_EXP 65
64378: PUSH
64379: LD_INT 88
64381: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
64382: LD_ADDR_EXP 60
64386: PUSH
64387: LD_INT 89
64389: ST_TO_ADDR
// us_hack := 99 ;
64390: LD_ADDR_EXP 61
64394: PUSH
64395: LD_INT 99
64397: ST_TO_ADDR
// us_artillery := 97 ;
64398: LD_ADDR_EXP 62
64402: PUSH
64403: LD_INT 97
64405: ST_TO_ADDR
// ar_bio_bomb := 91 ;
64406: LD_ADDR_EXP 63
64410: PUSH
64411: LD_INT 91
64413: ST_TO_ADDR
// ar_mortar := 92 ;
64414: LD_ADDR_EXP 64
64418: PUSH
64419: LD_INT 92
64421: ST_TO_ADDR
// ru_radar := 98 ;
64422: LD_ADDR_EXP 59
64426: PUSH
64427: LD_INT 98
64429: ST_TO_ADDR
// tech_Artillery := 80 ;
64430: LD_ADDR_EXP 67
64434: PUSH
64435: LD_INT 80
64437: ST_TO_ADDR
// tech_RadMat := 81 ;
64438: LD_ADDR_EXP 68
64442: PUSH
64443: LD_INT 81
64445: ST_TO_ADDR
// tech_BasicTools := 82 ;
64446: LD_ADDR_EXP 69
64450: PUSH
64451: LD_INT 82
64453: ST_TO_ADDR
// tech_Cargo := 83 ;
64454: LD_ADDR_EXP 70
64458: PUSH
64459: LD_INT 83
64461: ST_TO_ADDR
// tech_Track := 84 ;
64462: LD_ADDR_EXP 71
64466: PUSH
64467: LD_INT 84
64469: ST_TO_ADDR
// tech_Crane := 85 ;
64470: LD_ADDR_EXP 72
64474: PUSH
64475: LD_INT 85
64477: ST_TO_ADDR
// tech_Bulldozer := 86 ;
64478: LD_ADDR_EXP 73
64482: PUSH
64483: LD_INT 86
64485: ST_TO_ADDR
// tech_Hovercraft := 87 ;
64486: LD_ADDR_EXP 74
64490: PUSH
64491: LD_INT 87
64493: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
64494: LD_ADDR_EXP 75
64498: PUSH
64499: LD_INT 88
64501: ST_TO_ADDR
// class_mastodont := 31 ;
64502: LD_ADDR_EXP 76
64506: PUSH
64507: LD_INT 31
64509: ST_TO_ADDR
// class_horse := 21 ;
64510: LD_ADDR_EXP 77
64514: PUSH
64515: LD_INT 21
64517: ST_TO_ADDR
// end ;
64518: LD_VAR 0 1
64522: RET
// every 1 do
64523: GO 64525
64525: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
64526: CALL 64363 0 0
64530: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64531: LD_INT 0
64533: PPUSH
// if p2 = 100 then
64534: LD_VAR 0 2
64538: PUSH
64539: LD_INT 100
64541: EQUAL
64542: IFFALSE 65491
// begin if not StreamModeActive then
64544: LD_EXP 78
64548: NOT
64549: IFFALSE 64559
// StreamModeActive := true ;
64551: LD_ADDR_EXP 78
64555: PUSH
64556: LD_INT 1
64558: ST_TO_ADDR
// if p3 = 0 then
64559: LD_VAR 0 3
64563: PUSH
64564: LD_INT 0
64566: EQUAL
64567: IFFALSE 64573
// InitStreamMode ;
64569: CALL 65651 0 0
// if p3 = 1 then
64573: LD_VAR 0 3
64577: PUSH
64578: LD_INT 1
64580: EQUAL
64581: IFFALSE 64591
// sRocket := true ;
64583: LD_ADDR_EXP 83
64587: PUSH
64588: LD_INT 1
64590: ST_TO_ADDR
// if p3 = 2 then
64591: LD_VAR 0 3
64595: PUSH
64596: LD_INT 2
64598: EQUAL
64599: IFFALSE 64609
// sSpeed := true ;
64601: LD_ADDR_EXP 82
64605: PUSH
64606: LD_INT 1
64608: ST_TO_ADDR
// if p3 = 3 then
64609: LD_VAR 0 3
64613: PUSH
64614: LD_INT 3
64616: EQUAL
64617: IFFALSE 64627
// sEngine := true ;
64619: LD_ADDR_EXP 84
64623: PUSH
64624: LD_INT 1
64626: ST_TO_ADDR
// if p3 = 4 then
64627: LD_VAR 0 3
64631: PUSH
64632: LD_INT 4
64634: EQUAL
64635: IFFALSE 64645
// sSpec := true ;
64637: LD_ADDR_EXP 81
64641: PUSH
64642: LD_INT 1
64644: ST_TO_ADDR
// if p3 = 5 then
64645: LD_VAR 0 3
64649: PUSH
64650: LD_INT 5
64652: EQUAL
64653: IFFALSE 64663
// sLevel := true ;
64655: LD_ADDR_EXP 85
64659: PUSH
64660: LD_INT 1
64662: ST_TO_ADDR
// if p3 = 6 then
64663: LD_VAR 0 3
64667: PUSH
64668: LD_INT 6
64670: EQUAL
64671: IFFALSE 64681
// sArmoury := true ;
64673: LD_ADDR_EXP 86
64677: PUSH
64678: LD_INT 1
64680: ST_TO_ADDR
// if p3 = 7 then
64681: LD_VAR 0 3
64685: PUSH
64686: LD_INT 7
64688: EQUAL
64689: IFFALSE 64699
// sRadar := true ;
64691: LD_ADDR_EXP 87
64695: PUSH
64696: LD_INT 1
64698: ST_TO_ADDR
// if p3 = 8 then
64699: LD_VAR 0 3
64703: PUSH
64704: LD_INT 8
64706: EQUAL
64707: IFFALSE 64717
// sBunker := true ;
64709: LD_ADDR_EXP 88
64713: PUSH
64714: LD_INT 1
64716: ST_TO_ADDR
// if p3 = 9 then
64717: LD_VAR 0 3
64721: PUSH
64722: LD_INT 9
64724: EQUAL
64725: IFFALSE 64735
// sHack := true ;
64727: LD_ADDR_EXP 89
64731: PUSH
64732: LD_INT 1
64734: ST_TO_ADDR
// if p3 = 10 then
64735: LD_VAR 0 3
64739: PUSH
64740: LD_INT 10
64742: EQUAL
64743: IFFALSE 64753
// sFire := true ;
64745: LD_ADDR_EXP 90
64749: PUSH
64750: LD_INT 1
64752: ST_TO_ADDR
// if p3 = 11 then
64753: LD_VAR 0 3
64757: PUSH
64758: LD_INT 11
64760: EQUAL
64761: IFFALSE 64771
// sRefresh := true ;
64763: LD_ADDR_EXP 91
64767: PUSH
64768: LD_INT 1
64770: ST_TO_ADDR
// if p3 = 12 then
64771: LD_VAR 0 3
64775: PUSH
64776: LD_INT 12
64778: EQUAL
64779: IFFALSE 64789
// sExp := true ;
64781: LD_ADDR_EXP 92
64785: PUSH
64786: LD_INT 1
64788: ST_TO_ADDR
// if p3 = 13 then
64789: LD_VAR 0 3
64793: PUSH
64794: LD_INT 13
64796: EQUAL
64797: IFFALSE 64807
// sDepot := true ;
64799: LD_ADDR_EXP 93
64803: PUSH
64804: LD_INT 1
64806: ST_TO_ADDR
// if p3 = 14 then
64807: LD_VAR 0 3
64811: PUSH
64812: LD_INT 14
64814: EQUAL
64815: IFFALSE 64825
// sFlag := true ;
64817: LD_ADDR_EXP 94
64821: PUSH
64822: LD_INT 1
64824: ST_TO_ADDR
// if p3 = 15 then
64825: LD_VAR 0 3
64829: PUSH
64830: LD_INT 15
64832: EQUAL
64833: IFFALSE 64843
// sKamikadze := true ;
64835: LD_ADDR_EXP 102
64839: PUSH
64840: LD_INT 1
64842: ST_TO_ADDR
// if p3 = 16 then
64843: LD_VAR 0 3
64847: PUSH
64848: LD_INT 16
64850: EQUAL
64851: IFFALSE 64861
// sTroll := true ;
64853: LD_ADDR_EXP 103
64857: PUSH
64858: LD_INT 1
64860: ST_TO_ADDR
// if p3 = 17 then
64861: LD_VAR 0 3
64865: PUSH
64866: LD_INT 17
64868: EQUAL
64869: IFFALSE 64879
// sSlow := true ;
64871: LD_ADDR_EXP 104
64875: PUSH
64876: LD_INT 1
64878: ST_TO_ADDR
// if p3 = 18 then
64879: LD_VAR 0 3
64883: PUSH
64884: LD_INT 18
64886: EQUAL
64887: IFFALSE 64897
// sLack := true ;
64889: LD_ADDR_EXP 105
64893: PUSH
64894: LD_INT 1
64896: ST_TO_ADDR
// if p3 = 19 then
64897: LD_VAR 0 3
64901: PUSH
64902: LD_INT 19
64904: EQUAL
64905: IFFALSE 64915
// sTank := true ;
64907: LD_ADDR_EXP 107
64911: PUSH
64912: LD_INT 1
64914: ST_TO_ADDR
// if p3 = 20 then
64915: LD_VAR 0 3
64919: PUSH
64920: LD_INT 20
64922: EQUAL
64923: IFFALSE 64933
// sRemote := true ;
64925: LD_ADDR_EXP 108
64929: PUSH
64930: LD_INT 1
64932: ST_TO_ADDR
// if p3 = 21 then
64933: LD_VAR 0 3
64937: PUSH
64938: LD_INT 21
64940: EQUAL
64941: IFFALSE 64951
// sPowell := true ;
64943: LD_ADDR_EXP 109
64947: PUSH
64948: LD_INT 1
64950: ST_TO_ADDR
// if p3 = 22 then
64951: LD_VAR 0 3
64955: PUSH
64956: LD_INT 22
64958: EQUAL
64959: IFFALSE 64969
// sTeleport := true ;
64961: LD_ADDR_EXP 112
64965: PUSH
64966: LD_INT 1
64968: ST_TO_ADDR
// if p3 = 23 then
64969: LD_VAR 0 3
64973: PUSH
64974: LD_INT 23
64976: EQUAL
64977: IFFALSE 64987
// sOilTower := true ;
64979: LD_ADDR_EXP 114
64983: PUSH
64984: LD_INT 1
64986: ST_TO_ADDR
// if p3 = 24 then
64987: LD_VAR 0 3
64991: PUSH
64992: LD_INT 24
64994: EQUAL
64995: IFFALSE 65005
// sShovel := true ;
64997: LD_ADDR_EXP 115
65001: PUSH
65002: LD_INT 1
65004: ST_TO_ADDR
// if p3 = 25 then
65005: LD_VAR 0 3
65009: PUSH
65010: LD_INT 25
65012: EQUAL
65013: IFFALSE 65023
// sSheik := true ;
65015: LD_ADDR_EXP 116
65019: PUSH
65020: LD_INT 1
65022: ST_TO_ADDR
// if p3 = 26 then
65023: LD_VAR 0 3
65027: PUSH
65028: LD_INT 26
65030: EQUAL
65031: IFFALSE 65041
// sEarthquake := true ;
65033: LD_ADDR_EXP 118
65037: PUSH
65038: LD_INT 1
65040: ST_TO_ADDR
// if p3 = 27 then
65041: LD_VAR 0 3
65045: PUSH
65046: LD_INT 27
65048: EQUAL
65049: IFFALSE 65059
// sAI := true ;
65051: LD_ADDR_EXP 119
65055: PUSH
65056: LD_INT 1
65058: ST_TO_ADDR
// if p3 = 28 then
65059: LD_VAR 0 3
65063: PUSH
65064: LD_INT 28
65066: EQUAL
65067: IFFALSE 65077
// sCargo := true ;
65069: LD_ADDR_EXP 122
65073: PUSH
65074: LD_INT 1
65076: ST_TO_ADDR
// if p3 = 29 then
65077: LD_VAR 0 3
65081: PUSH
65082: LD_INT 29
65084: EQUAL
65085: IFFALSE 65095
// sDLaser := true ;
65087: LD_ADDR_EXP 123
65091: PUSH
65092: LD_INT 1
65094: ST_TO_ADDR
// if p3 = 30 then
65095: LD_VAR 0 3
65099: PUSH
65100: LD_INT 30
65102: EQUAL
65103: IFFALSE 65113
// sExchange := true ;
65105: LD_ADDR_EXP 124
65109: PUSH
65110: LD_INT 1
65112: ST_TO_ADDR
// if p3 = 31 then
65113: LD_VAR 0 3
65117: PUSH
65118: LD_INT 31
65120: EQUAL
65121: IFFALSE 65131
// sFac := true ;
65123: LD_ADDR_EXP 125
65127: PUSH
65128: LD_INT 1
65130: ST_TO_ADDR
// if p3 = 32 then
65131: LD_VAR 0 3
65135: PUSH
65136: LD_INT 32
65138: EQUAL
65139: IFFALSE 65149
// sPower := true ;
65141: LD_ADDR_EXP 126
65145: PUSH
65146: LD_INT 1
65148: ST_TO_ADDR
// if p3 = 33 then
65149: LD_VAR 0 3
65153: PUSH
65154: LD_INT 33
65156: EQUAL
65157: IFFALSE 65167
// sRandom := true ;
65159: LD_ADDR_EXP 127
65163: PUSH
65164: LD_INT 1
65166: ST_TO_ADDR
// if p3 = 34 then
65167: LD_VAR 0 3
65171: PUSH
65172: LD_INT 34
65174: EQUAL
65175: IFFALSE 65185
// sShield := true ;
65177: LD_ADDR_EXP 128
65181: PUSH
65182: LD_INT 1
65184: ST_TO_ADDR
// if p3 = 35 then
65185: LD_VAR 0 3
65189: PUSH
65190: LD_INT 35
65192: EQUAL
65193: IFFALSE 65203
// sTime := true ;
65195: LD_ADDR_EXP 129
65199: PUSH
65200: LD_INT 1
65202: ST_TO_ADDR
// if p3 = 36 then
65203: LD_VAR 0 3
65207: PUSH
65208: LD_INT 36
65210: EQUAL
65211: IFFALSE 65221
// sTools := true ;
65213: LD_ADDR_EXP 130
65217: PUSH
65218: LD_INT 1
65220: ST_TO_ADDR
// if p3 = 101 then
65221: LD_VAR 0 3
65225: PUSH
65226: LD_INT 101
65228: EQUAL
65229: IFFALSE 65239
// sSold := true ;
65231: LD_ADDR_EXP 95
65235: PUSH
65236: LD_INT 1
65238: ST_TO_ADDR
// if p3 = 102 then
65239: LD_VAR 0 3
65243: PUSH
65244: LD_INT 102
65246: EQUAL
65247: IFFALSE 65257
// sDiff := true ;
65249: LD_ADDR_EXP 96
65253: PUSH
65254: LD_INT 1
65256: ST_TO_ADDR
// if p3 = 103 then
65257: LD_VAR 0 3
65261: PUSH
65262: LD_INT 103
65264: EQUAL
65265: IFFALSE 65275
// sFog := true ;
65267: LD_ADDR_EXP 99
65271: PUSH
65272: LD_INT 1
65274: ST_TO_ADDR
// if p3 = 104 then
65275: LD_VAR 0 3
65279: PUSH
65280: LD_INT 104
65282: EQUAL
65283: IFFALSE 65293
// sReset := true ;
65285: LD_ADDR_EXP 100
65289: PUSH
65290: LD_INT 1
65292: ST_TO_ADDR
// if p3 = 105 then
65293: LD_VAR 0 3
65297: PUSH
65298: LD_INT 105
65300: EQUAL
65301: IFFALSE 65311
// sSun := true ;
65303: LD_ADDR_EXP 101
65307: PUSH
65308: LD_INT 1
65310: ST_TO_ADDR
// if p3 = 106 then
65311: LD_VAR 0 3
65315: PUSH
65316: LD_INT 106
65318: EQUAL
65319: IFFALSE 65329
// sTiger := true ;
65321: LD_ADDR_EXP 97
65325: PUSH
65326: LD_INT 1
65328: ST_TO_ADDR
// if p3 = 107 then
65329: LD_VAR 0 3
65333: PUSH
65334: LD_INT 107
65336: EQUAL
65337: IFFALSE 65347
// sBomb := true ;
65339: LD_ADDR_EXP 98
65343: PUSH
65344: LD_INT 1
65346: ST_TO_ADDR
// if p3 = 108 then
65347: LD_VAR 0 3
65351: PUSH
65352: LD_INT 108
65354: EQUAL
65355: IFFALSE 65365
// sWound := true ;
65357: LD_ADDR_EXP 106
65361: PUSH
65362: LD_INT 1
65364: ST_TO_ADDR
// if p3 = 109 then
65365: LD_VAR 0 3
65369: PUSH
65370: LD_INT 109
65372: EQUAL
65373: IFFALSE 65383
// sBetray := true ;
65375: LD_ADDR_EXP 110
65379: PUSH
65380: LD_INT 1
65382: ST_TO_ADDR
// if p3 = 110 then
65383: LD_VAR 0 3
65387: PUSH
65388: LD_INT 110
65390: EQUAL
65391: IFFALSE 65401
// sContamin := true ;
65393: LD_ADDR_EXP 111
65397: PUSH
65398: LD_INT 1
65400: ST_TO_ADDR
// if p3 = 111 then
65401: LD_VAR 0 3
65405: PUSH
65406: LD_INT 111
65408: EQUAL
65409: IFFALSE 65419
// sOil := true ;
65411: LD_ADDR_EXP 113
65415: PUSH
65416: LD_INT 1
65418: ST_TO_ADDR
// if p3 = 112 then
65419: LD_VAR 0 3
65423: PUSH
65424: LD_INT 112
65426: EQUAL
65427: IFFALSE 65437
// sStu := true ;
65429: LD_ADDR_EXP 117
65433: PUSH
65434: LD_INT 1
65436: ST_TO_ADDR
// if p3 = 113 then
65437: LD_VAR 0 3
65441: PUSH
65442: LD_INT 113
65444: EQUAL
65445: IFFALSE 65455
// sBazooka := true ;
65447: LD_ADDR_EXP 120
65451: PUSH
65452: LD_INT 1
65454: ST_TO_ADDR
// if p3 = 114 then
65455: LD_VAR 0 3
65459: PUSH
65460: LD_INT 114
65462: EQUAL
65463: IFFALSE 65473
// sMortar := true ;
65465: LD_ADDR_EXP 121
65469: PUSH
65470: LD_INT 1
65472: ST_TO_ADDR
// if p3 = 115 then
65473: LD_VAR 0 3
65477: PUSH
65478: LD_INT 115
65480: EQUAL
65481: IFFALSE 65491
// sRanger := true ;
65483: LD_ADDR_EXP 131
65487: PUSH
65488: LD_INT 1
65490: ST_TO_ADDR
// end ; if p2 = 101 then
65491: LD_VAR 0 2
65495: PUSH
65496: LD_INT 101
65498: EQUAL
65499: IFFALSE 65627
// begin case p3 of 1 :
65501: LD_VAR 0 3
65505: PUSH
65506: LD_INT 1
65508: DOUBLE
65509: EQUAL
65510: IFTRUE 65514
65512: GO 65521
65514: POP
// hHackUnlimitedResources ; 2 :
65515: CALL 76664 0 0
65519: GO 65627
65521: LD_INT 2
65523: DOUBLE
65524: EQUAL
65525: IFTRUE 65529
65527: GO 65536
65529: POP
// hHackSetLevel10 ; 3 :
65530: CALL 76797 0 0
65534: GO 65627
65536: LD_INT 3
65538: DOUBLE
65539: EQUAL
65540: IFTRUE 65544
65542: GO 65551
65544: POP
// hHackSetLevel10YourUnits ; 4 :
65545: CALL 76882 0 0
65549: GO 65627
65551: LD_INT 4
65553: DOUBLE
65554: EQUAL
65555: IFTRUE 65559
65557: GO 65566
65559: POP
// hHackInvincible ; 5 :
65560: CALL 77330 0 0
65564: GO 65627
65566: LD_INT 5
65568: DOUBLE
65569: EQUAL
65570: IFTRUE 65574
65572: GO 65581
65574: POP
// hHackInvisible ; 6 :
65575: CALL 77441 0 0
65579: GO 65627
65581: LD_INT 6
65583: DOUBLE
65584: EQUAL
65585: IFTRUE 65589
65587: GO 65596
65589: POP
// hHackChangeYourSide ; 7 :
65590: CALL 77498 0 0
65594: GO 65627
65596: LD_INT 7
65598: DOUBLE
65599: EQUAL
65600: IFTRUE 65604
65602: GO 65611
65604: POP
// hHackChangeUnitSide ; 8 :
65605: CALL 77540 0 0
65609: GO 65627
65611: LD_INT 8
65613: DOUBLE
65614: EQUAL
65615: IFTRUE 65619
65617: GO 65626
65619: POP
// hHackFog ; end ;
65620: CALL 77641 0 0
65624: GO 65627
65626: POP
// end ; end ;
65627: LD_VAR 0 7
65631: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
65632: GO 65634
65634: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
65635: LD_STRING initStreamRollete();
65637: PPUSH
65638: CALL_OW 559
// InitStreamMode ;
65642: CALL 65651 0 0
// DefineStreamItems ( ) ;
65646: CALL 66091 0 0
// end ;
65650: END
// function InitStreamMode ; begin
65651: LD_INT 0
65653: PPUSH
// streamModeActive := false ;
65654: LD_ADDR_EXP 78
65658: PUSH
65659: LD_INT 0
65661: ST_TO_ADDR
// normalCounter := 36 ;
65662: LD_ADDR_EXP 79
65666: PUSH
65667: LD_INT 36
65669: ST_TO_ADDR
// hardcoreCounter := 16 ;
65670: LD_ADDR_EXP 80
65674: PUSH
65675: LD_INT 16
65677: ST_TO_ADDR
// sRocket := false ;
65678: LD_ADDR_EXP 83
65682: PUSH
65683: LD_INT 0
65685: ST_TO_ADDR
// sSpeed := false ;
65686: LD_ADDR_EXP 82
65690: PUSH
65691: LD_INT 0
65693: ST_TO_ADDR
// sEngine := false ;
65694: LD_ADDR_EXP 84
65698: PUSH
65699: LD_INT 0
65701: ST_TO_ADDR
// sSpec := false ;
65702: LD_ADDR_EXP 81
65706: PUSH
65707: LD_INT 0
65709: ST_TO_ADDR
// sLevel := false ;
65710: LD_ADDR_EXP 85
65714: PUSH
65715: LD_INT 0
65717: ST_TO_ADDR
// sArmoury := false ;
65718: LD_ADDR_EXP 86
65722: PUSH
65723: LD_INT 0
65725: ST_TO_ADDR
// sRadar := false ;
65726: LD_ADDR_EXP 87
65730: PUSH
65731: LD_INT 0
65733: ST_TO_ADDR
// sBunker := false ;
65734: LD_ADDR_EXP 88
65738: PUSH
65739: LD_INT 0
65741: ST_TO_ADDR
// sHack := false ;
65742: LD_ADDR_EXP 89
65746: PUSH
65747: LD_INT 0
65749: ST_TO_ADDR
// sFire := false ;
65750: LD_ADDR_EXP 90
65754: PUSH
65755: LD_INT 0
65757: ST_TO_ADDR
// sRefresh := false ;
65758: LD_ADDR_EXP 91
65762: PUSH
65763: LD_INT 0
65765: ST_TO_ADDR
// sExp := false ;
65766: LD_ADDR_EXP 92
65770: PUSH
65771: LD_INT 0
65773: ST_TO_ADDR
// sDepot := false ;
65774: LD_ADDR_EXP 93
65778: PUSH
65779: LD_INT 0
65781: ST_TO_ADDR
// sFlag := false ;
65782: LD_ADDR_EXP 94
65786: PUSH
65787: LD_INT 0
65789: ST_TO_ADDR
// sKamikadze := false ;
65790: LD_ADDR_EXP 102
65794: PUSH
65795: LD_INT 0
65797: ST_TO_ADDR
// sTroll := false ;
65798: LD_ADDR_EXP 103
65802: PUSH
65803: LD_INT 0
65805: ST_TO_ADDR
// sSlow := false ;
65806: LD_ADDR_EXP 104
65810: PUSH
65811: LD_INT 0
65813: ST_TO_ADDR
// sLack := false ;
65814: LD_ADDR_EXP 105
65818: PUSH
65819: LD_INT 0
65821: ST_TO_ADDR
// sTank := false ;
65822: LD_ADDR_EXP 107
65826: PUSH
65827: LD_INT 0
65829: ST_TO_ADDR
// sRemote := false ;
65830: LD_ADDR_EXP 108
65834: PUSH
65835: LD_INT 0
65837: ST_TO_ADDR
// sPowell := false ;
65838: LD_ADDR_EXP 109
65842: PUSH
65843: LD_INT 0
65845: ST_TO_ADDR
// sTeleport := false ;
65846: LD_ADDR_EXP 112
65850: PUSH
65851: LD_INT 0
65853: ST_TO_ADDR
// sOilTower := false ;
65854: LD_ADDR_EXP 114
65858: PUSH
65859: LD_INT 0
65861: ST_TO_ADDR
// sShovel := false ;
65862: LD_ADDR_EXP 115
65866: PUSH
65867: LD_INT 0
65869: ST_TO_ADDR
// sSheik := false ;
65870: LD_ADDR_EXP 116
65874: PUSH
65875: LD_INT 0
65877: ST_TO_ADDR
// sEarthquake := false ;
65878: LD_ADDR_EXP 118
65882: PUSH
65883: LD_INT 0
65885: ST_TO_ADDR
// sAI := false ;
65886: LD_ADDR_EXP 119
65890: PUSH
65891: LD_INT 0
65893: ST_TO_ADDR
// sCargo := false ;
65894: LD_ADDR_EXP 122
65898: PUSH
65899: LD_INT 0
65901: ST_TO_ADDR
// sDLaser := false ;
65902: LD_ADDR_EXP 123
65906: PUSH
65907: LD_INT 0
65909: ST_TO_ADDR
// sExchange := false ;
65910: LD_ADDR_EXP 124
65914: PUSH
65915: LD_INT 0
65917: ST_TO_ADDR
// sFac := false ;
65918: LD_ADDR_EXP 125
65922: PUSH
65923: LD_INT 0
65925: ST_TO_ADDR
// sPower := false ;
65926: LD_ADDR_EXP 126
65930: PUSH
65931: LD_INT 0
65933: ST_TO_ADDR
// sRandom := false ;
65934: LD_ADDR_EXP 127
65938: PUSH
65939: LD_INT 0
65941: ST_TO_ADDR
// sShield := false ;
65942: LD_ADDR_EXP 128
65946: PUSH
65947: LD_INT 0
65949: ST_TO_ADDR
// sTime := false ;
65950: LD_ADDR_EXP 129
65954: PUSH
65955: LD_INT 0
65957: ST_TO_ADDR
// sTools := false ;
65958: LD_ADDR_EXP 130
65962: PUSH
65963: LD_INT 0
65965: ST_TO_ADDR
// sSold := false ;
65966: LD_ADDR_EXP 95
65970: PUSH
65971: LD_INT 0
65973: ST_TO_ADDR
// sDiff := false ;
65974: LD_ADDR_EXP 96
65978: PUSH
65979: LD_INT 0
65981: ST_TO_ADDR
// sFog := false ;
65982: LD_ADDR_EXP 99
65986: PUSH
65987: LD_INT 0
65989: ST_TO_ADDR
// sReset := false ;
65990: LD_ADDR_EXP 100
65994: PUSH
65995: LD_INT 0
65997: ST_TO_ADDR
// sSun := false ;
65998: LD_ADDR_EXP 101
66002: PUSH
66003: LD_INT 0
66005: ST_TO_ADDR
// sTiger := false ;
66006: LD_ADDR_EXP 97
66010: PUSH
66011: LD_INT 0
66013: ST_TO_ADDR
// sBomb := false ;
66014: LD_ADDR_EXP 98
66018: PUSH
66019: LD_INT 0
66021: ST_TO_ADDR
// sWound := false ;
66022: LD_ADDR_EXP 106
66026: PUSH
66027: LD_INT 0
66029: ST_TO_ADDR
// sBetray := false ;
66030: LD_ADDR_EXP 110
66034: PUSH
66035: LD_INT 0
66037: ST_TO_ADDR
// sContamin := false ;
66038: LD_ADDR_EXP 111
66042: PUSH
66043: LD_INT 0
66045: ST_TO_ADDR
// sOil := false ;
66046: LD_ADDR_EXP 113
66050: PUSH
66051: LD_INT 0
66053: ST_TO_ADDR
// sStu := false ;
66054: LD_ADDR_EXP 117
66058: PUSH
66059: LD_INT 0
66061: ST_TO_ADDR
// sBazooka := false ;
66062: LD_ADDR_EXP 120
66066: PUSH
66067: LD_INT 0
66069: ST_TO_ADDR
// sMortar := false ;
66070: LD_ADDR_EXP 121
66074: PUSH
66075: LD_INT 0
66077: ST_TO_ADDR
// sRanger := false ;
66078: LD_ADDR_EXP 131
66082: PUSH
66083: LD_INT 0
66085: ST_TO_ADDR
// end ;
66086: LD_VAR 0 1
66090: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
66091: LD_INT 0
66093: PPUSH
66094: PPUSH
66095: PPUSH
66096: PPUSH
66097: PPUSH
// result := [ ] ;
66098: LD_ADDR_VAR 0 1
66102: PUSH
66103: EMPTY
66104: ST_TO_ADDR
// if campaign_id = 1 then
66105: LD_OWVAR 69
66109: PUSH
66110: LD_INT 1
66112: EQUAL
66113: IFFALSE 69051
// begin case mission_number of 1 :
66115: LD_OWVAR 70
66119: PUSH
66120: LD_INT 1
66122: DOUBLE
66123: EQUAL
66124: IFTRUE 66128
66126: GO 66192
66128: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
66129: LD_ADDR_VAR 0 1
66133: PUSH
66134: LD_INT 2
66136: PUSH
66137: LD_INT 4
66139: PUSH
66140: LD_INT 11
66142: PUSH
66143: LD_INT 12
66145: PUSH
66146: LD_INT 15
66148: PUSH
66149: LD_INT 16
66151: PUSH
66152: LD_INT 22
66154: PUSH
66155: LD_INT 23
66157: PUSH
66158: LD_INT 26
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: PUSH
66172: LD_INT 101
66174: PUSH
66175: LD_INT 102
66177: PUSH
66178: LD_INT 106
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: LIST
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: ST_TO_ADDR
66190: GO 69049
66192: LD_INT 2
66194: DOUBLE
66195: EQUAL
66196: IFTRUE 66200
66198: GO 66272
66200: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
66201: LD_ADDR_VAR 0 1
66205: PUSH
66206: LD_INT 2
66208: PUSH
66209: LD_INT 4
66211: PUSH
66212: LD_INT 11
66214: PUSH
66215: LD_INT 12
66217: PUSH
66218: LD_INT 15
66220: PUSH
66221: LD_INT 16
66223: PUSH
66224: LD_INT 22
66226: PUSH
66227: LD_INT 23
66229: PUSH
66230: LD_INT 26
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 101
66246: PUSH
66247: LD_INT 102
66249: PUSH
66250: LD_INT 105
66252: PUSH
66253: LD_INT 106
66255: PUSH
66256: LD_INT 108
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: ST_TO_ADDR
66270: GO 69049
66272: LD_INT 3
66274: DOUBLE
66275: EQUAL
66276: IFTRUE 66280
66278: GO 66356
66280: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
66281: LD_ADDR_VAR 0 1
66285: PUSH
66286: LD_INT 2
66288: PUSH
66289: LD_INT 4
66291: PUSH
66292: LD_INT 5
66294: PUSH
66295: LD_INT 11
66297: PUSH
66298: LD_INT 12
66300: PUSH
66301: LD_INT 15
66303: PUSH
66304: LD_INT 16
66306: PUSH
66307: LD_INT 22
66309: PUSH
66310: LD_INT 26
66312: PUSH
66313: LD_INT 36
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 101
66330: PUSH
66331: LD_INT 102
66333: PUSH
66334: LD_INT 105
66336: PUSH
66337: LD_INT 106
66339: PUSH
66340: LD_INT 108
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: ST_TO_ADDR
66354: GO 69049
66356: LD_INT 4
66358: DOUBLE
66359: EQUAL
66360: IFTRUE 66364
66362: GO 66448
66364: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
66365: LD_ADDR_VAR 0 1
66369: PUSH
66370: LD_INT 2
66372: PUSH
66373: LD_INT 4
66375: PUSH
66376: LD_INT 5
66378: PUSH
66379: LD_INT 8
66381: PUSH
66382: LD_INT 11
66384: PUSH
66385: LD_INT 12
66387: PUSH
66388: LD_INT 15
66390: PUSH
66391: LD_INT 16
66393: PUSH
66394: LD_INT 22
66396: PUSH
66397: LD_INT 23
66399: PUSH
66400: LD_INT 26
66402: PUSH
66403: LD_INT 36
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: PUSH
66420: LD_INT 101
66422: PUSH
66423: LD_INT 102
66425: PUSH
66426: LD_INT 105
66428: PUSH
66429: LD_INT 106
66431: PUSH
66432: LD_INT 108
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: ST_TO_ADDR
66446: GO 69049
66448: LD_INT 5
66450: DOUBLE
66451: EQUAL
66452: IFTRUE 66456
66454: GO 66556
66456: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
66457: LD_ADDR_VAR 0 1
66461: PUSH
66462: LD_INT 2
66464: PUSH
66465: LD_INT 4
66467: PUSH
66468: LD_INT 5
66470: PUSH
66471: LD_INT 6
66473: PUSH
66474: LD_INT 8
66476: PUSH
66477: LD_INT 11
66479: PUSH
66480: LD_INT 12
66482: PUSH
66483: LD_INT 15
66485: PUSH
66486: LD_INT 16
66488: PUSH
66489: LD_INT 22
66491: PUSH
66492: LD_INT 23
66494: PUSH
66495: LD_INT 25
66497: PUSH
66498: LD_INT 26
66500: PUSH
66501: LD_INT 36
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: LIST
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: LIST
66513: LIST
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 101
66522: PUSH
66523: LD_INT 102
66525: PUSH
66526: LD_INT 105
66528: PUSH
66529: LD_INT 106
66531: PUSH
66532: LD_INT 108
66534: PUSH
66535: LD_INT 109
66537: PUSH
66538: LD_INT 112
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: ST_TO_ADDR
66554: GO 69049
66556: LD_INT 6
66558: DOUBLE
66559: EQUAL
66560: IFTRUE 66564
66562: GO 66684
66564: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
66565: LD_ADDR_VAR 0 1
66569: PUSH
66570: LD_INT 2
66572: PUSH
66573: LD_INT 4
66575: PUSH
66576: LD_INT 5
66578: PUSH
66579: LD_INT 6
66581: PUSH
66582: LD_INT 8
66584: PUSH
66585: LD_INT 11
66587: PUSH
66588: LD_INT 12
66590: PUSH
66591: LD_INT 15
66593: PUSH
66594: LD_INT 16
66596: PUSH
66597: LD_INT 20
66599: PUSH
66600: LD_INT 21
66602: PUSH
66603: LD_INT 22
66605: PUSH
66606: LD_INT 23
66608: PUSH
66609: LD_INT 25
66611: PUSH
66612: LD_INT 26
66614: PUSH
66615: LD_INT 30
66617: PUSH
66618: LD_INT 31
66620: PUSH
66621: LD_INT 32
66623: PUSH
66624: LD_INT 36
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 101
66650: PUSH
66651: LD_INT 102
66653: PUSH
66654: LD_INT 105
66656: PUSH
66657: LD_INT 106
66659: PUSH
66660: LD_INT 108
66662: PUSH
66663: LD_INT 109
66665: PUSH
66666: LD_INT 112
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: ST_TO_ADDR
66682: GO 69049
66684: LD_INT 7
66686: DOUBLE
66687: EQUAL
66688: IFTRUE 66692
66690: GO 66792
66692: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
66693: LD_ADDR_VAR 0 1
66697: PUSH
66698: LD_INT 2
66700: PUSH
66701: LD_INT 4
66703: PUSH
66704: LD_INT 5
66706: PUSH
66707: LD_INT 7
66709: PUSH
66710: LD_INT 11
66712: PUSH
66713: LD_INT 12
66715: PUSH
66716: LD_INT 15
66718: PUSH
66719: LD_INT 16
66721: PUSH
66722: LD_INT 20
66724: PUSH
66725: LD_INT 21
66727: PUSH
66728: LD_INT 22
66730: PUSH
66731: LD_INT 23
66733: PUSH
66734: LD_INT 25
66736: PUSH
66737: LD_INT 26
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 101
66758: PUSH
66759: LD_INT 102
66761: PUSH
66762: LD_INT 103
66764: PUSH
66765: LD_INT 105
66767: PUSH
66768: LD_INT 106
66770: PUSH
66771: LD_INT 108
66773: PUSH
66774: LD_INT 112
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: ST_TO_ADDR
66790: GO 69049
66792: LD_INT 8
66794: DOUBLE
66795: EQUAL
66796: IFTRUE 66800
66798: GO 66928
66800: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
66801: LD_ADDR_VAR 0 1
66805: PUSH
66806: LD_INT 2
66808: PUSH
66809: LD_INT 4
66811: PUSH
66812: LD_INT 5
66814: PUSH
66815: LD_INT 6
66817: PUSH
66818: LD_INT 7
66820: PUSH
66821: LD_INT 8
66823: PUSH
66824: LD_INT 11
66826: PUSH
66827: LD_INT 12
66829: PUSH
66830: LD_INT 15
66832: PUSH
66833: LD_INT 16
66835: PUSH
66836: LD_INT 20
66838: PUSH
66839: LD_INT 21
66841: PUSH
66842: LD_INT 22
66844: PUSH
66845: LD_INT 23
66847: PUSH
66848: LD_INT 25
66850: PUSH
66851: LD_INT 26
66853: PUSH
66854: LD_INT 30
66856: PUSH
66857: LD_INT 31
66859: PUSH
66860: LD_INT 32
66862: PUSH
66863: LD_INT 36
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 101
66890: PUSH
66891: LD_INT 102
66893: PUSH
66894: LD_INT 103
66896: PUSH
66897: LD_INT 105
66899: PUSH
66900: LD_INT 106
66902: PUSH
66903: LD_INT 108
66905: PUSH
66906: LD_INT 109
66908: PUSH
66909: LD_INT 112
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: LIST
66916: LIST
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: ST_TO_ADDR
66926: GO 69049
66928: LD_INT 9
66930: DOUBLE
66931: EQUAL
66932: IFTRUE 66936
66934: GO 67072
66936: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
66937: LD_ADDR_VAR 0 1
66941: PUSH
66942: LD_INT 2
66944: PUSH
66945: LD_INT 4
66947: PUSH
66948: LD_INT 5
66950: PUSH
66951: LD_INT 6
66953: PUSH
66954: LD_INT 7
66956: PUSH
66957: LD_INT 8
66959: PUSH
66960: LD_INT 11
66962: PUSH
66963: LD_INT 12
66965: PUSH
66966: LD_INT 15
66968: PUSH
66969: LD_INT 16
66971: PUSH
66972: LD_INT 20
66974: PUSH
66975: LD_INT 21
66977: PUSH
66978: LD_INT 22
66980: PUSH
66981: LD_INT 23
66983: PUSH
66984: LD_INT 25
66986: PUSH
66987: LD_INT 26
66989: PUSH
66990: LD_INT 28
66992: PUSH
66993: LD_INT 30
66995: PUSH
66996: LD_INT 31
66998: PUSH
66999: LD_INT 32
67001: PUSH
67002: LD_INT 36
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: LIST
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 101
67030: PUSH
67031: LD_INT 102
67033: PUSH
67034: LD_INT 103
67036: PUSH
67037: LD_INT 105
67039: PUSH
67040: LD_INT 106
67042: PUSH
67043: LD_INT 108
67045: PUSH
67046: LD_INT 109
67048: PUSH
67049: LD_INT 112
67051: PUSH
67052: LD_INT 114
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: LIST
67061: LIST
67062: LIST
67063: LIST
67064: LIST
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: ST_TO_ADDR
67070: GO 69049
67072: LD_INT 10
67074: DOUBLE
67075: EQUAL
67076: IFTRUE 67080
67078: GO 67264
67080: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
67081: LD_ADDR_VAR 0 1
67085: PUSH
67086: LD_INT 2
67088: PUSH
67089: LD_INT 4
67091: PUSH
67092: LD_INT 5
67094: PUSH
67095: LD_INT 6
67097: PUSH
67098: LD_INT 7
67100: PUSH
67101: LD_INT 8
67103: PUSH
67104: LD_INT 9
67106: PUSH
67107: LD_INT 10
67109: PUSH
67110: LD_INT 11
67112: PUSH
67113: LD_INT 12
67115: PUSH
67116: LD_INT 13
67118: PUSH
67119: LD_INT 14
67121: PUSH
67122: LD_INT 15
67124: PUSH
67125: LD_INT 16
67127: PUSH
67128: LD_INT 17
67130: PUSH
67131: LD_INT 18
67133: PUSH
67134: LD_INT 19
67136: PUSH
67137: LD_INT 20
67139: PUSH
67140: LD_INT 21
67142: PUSH
67143: LD_INT 22
67145: PUSH
67146: LD_INT 23
67148: PUSH
67149: LD_INT 24
67151: PUSH
67152: LD_INT 25
67154: PUSH
67155: LD_INT 26
67157: PUSH
67158: LD_INT 28
67160: PUSH
67161: LD_INT 30
67163: PUSH
67164: LD_INT 31
67166: PUSH
67167: LD_INT 32
67169: PUSH
67170: LD_INT 36
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 101
67206: PUSH
67207: LD_INT 102
67209: PUSH
67210: LD_INT 103
67212: PUSH
67213: LD_INT 104
67215: PUSH
67216: LD_INT 105
67218: PUSH
67219: LD_INT 106
67221: PUSH
67222: LD_INT 107
67224: PUSH
67225: LD_INT 108
67227: PUSH
67228: LD_INT 109
67230: PUSH
67231: LD_INT 110
67233: PUSH
67234: LD_INT 111
67236: PUSH
67237: LD_INT 112
67239: PUSH
67240: LD_INT 114
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: ST_TO_ADDR
67262: GO 69049
67264: LD_INT 11
67266: DOUBLE
67267: EQUAL
67268: IFTRUE 67272
67270: GO 67464
67272: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
67273: LD_ADDR_VAR 0 1
67277: PUSH
67278: LD_INT 2
67280: PUSH
67281: LD_INT 3
67283: PUSH
67284: LD_INT 4
67286: PUSH
67287: LD_INT 5
67289: PUSH
67290: LD_INT 6
67292: PUSH
67293: LD_INT 7
67295: PUSH
67296: LD_INT 8
67298: PUSH
67299: LD_INT 9
67301: PUSH
67302: LD_INT 10
67304: PUSH
67305: LD_INT 11
67307: PUSH
67308: LD_INT 12
67310: PUSH
67311: LD_INT 13
67313: PUSH
67314: LD_INT 14
67316: PUSH
67317: LD_INT 15
67319: PUSH
67320: LD_INT 16
67322: PUSH
67323: LD_INT 17
67325: PUSH
67326: LD_INT 18
67328: PUSH
67329: LD_INT 19
67331: PUSH
67332: LD_INT 20
67334: PUSH
67335: LD_INT 21
67337: PUSH
67338: LD_INT 22
67340: PUSH
67341: LD_INT 23
67343: PUSH
67344: LD_INT 24
67346: PUSH
67347: LD_INT 25
67349: PUSH
67350: LD_INT 26
67352: PUSH
67353: LD_INT 28
67355: PUSH
67356: LD_INT 30
67358: PUSH
67359: LD_INT 31
67361: PUSH
67362: LD_INT 32
67364: PUSH
67365: LD_INT 34
67367: PUSH
67368: LD_INT 36
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: LIST
67375: LIST
67376: LIST
67377: LIST
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: LIST
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: LIST
67402: LIST
67403: PUSH
67404: LD_INT 101
67406: PUSH
67407: LD_INT 102
67409: PUSH
67410: LD_INT 103
67412: PUSH
67413: LD_INT 104
67415: PUSH
67416: LD_INT 105
67418: PUSH
67419: LD_INT 106
67421: PUSH
67422: LD_INT 107
67424: PUSH
67425: LD_INT 108
67427: PUSH
67428: LD_INT 109
67430: PUSH
67431: LD_INT 110
67433: PUSH
67434: LD_INT 111
67436: PUSH
67437: LD_INT 112
67439: PUSH
67440: LD_INT 114
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: ST_TO_ADDR
67462: GO 69049
67464: LD_INT 12
67466: DOUBLE
67467: EQUAL
67468: IFTRUE 67472
67470: GO 67680
67472: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
67473: LD_ADDR_VAR 0 1
67477: PUSH
67478: LD_INT 1
67480: PUSH
67481: LD_INT 2
67483: PUSH
67484: LD_INT 3
67486: PUSH
67487: LD_INT 4
67489: PUSH
67490: LD_INT 5
67492: PUSH
67493: LD_INT 6
67495: PUSH
67496: LD_INT 7
67498: PUSH
67499: LD_INT 8
67501: PUSH
67502: LD_INT 9
67504: PUSH
67505: LD_INT 10
67507: PUSH
67508: LD_INT 11
67510: PUSH
67511: LD_INT 12
67513: PUSH
67514: LD_INT 13
67516: PUSH
67517: LD_INT 14
67519: PUSH
67520: LD_INT 15
67522: PUSH
67523: LD_INT 16
67525: PUSH
67526: LD_INT 17
67528: PUSH
67529: LD_INT 18
67531: PUSH
67532: LD_INT 19
67534: PUSH
67535: LD_INT 20
67537: PUSH
67538: LD_INT 21
67540: PUSH
67541: LD_INT 22
67543: PUSH
67544: LD_INT 23
67546: PUSH
67547: LD_INT 24
67549: PUSH
67550: LD_INT 25
67552: PUSH
67553: LD_INT 26
67555: PUSH
67556: LD_INT 27
67558: PUSH
67559: LD_INT 28
67561: PUSH
67562: LD_INT 30
67564: PUSH
67565: LD_INT 31
67567: PUSH
67568: LD_INT 32
67570: PUSH
67571: LD_INT 33
67573: PUSH
67574: LD_INT 34
67576: PUSH
67577: LD_INT 36
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: LIST
67584: LIST
67585: LIST
67586: LIST
67587: LIST
67588: LIST
67589: LIST
67590: LIST
67591: LIST
67592: LIST
67593: LIST
67594: LIST
67595: LIST
67596: LIST
67597: LIST
67598: LIST
67599: LIST
67600: LIST
67601: LIST
67602: LIST
67603: LIST
67604: LIST
67605: LIST
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 101
67618: PUSH
67619: LD_INT 102
67621: PUSH
67622: LD_INT 103
67624: PUSH
67625: LD_INT 104
67627: PUSH
67628: LD_INT 105
67630: PUSH
67631: LD_INT 106
67633: PUSH
67634: LD_INT 107
67636: PUSH
67637: LD_INT 108
67639: PUSH
67640: LD_INT 109
67642: PUSH
67643: LD_INT 110
67645: PUSH
67646: LD_INT 111
67648: PUSH
67649: LD_INT 112
67651: PUSH
67652: LD_INT 113
67654: PUSH
67655: LD_INT 114
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: ST_TO_ADDR
67678: GO 69049
67680: LD_INT 13
67682: DOUBLE
67683: EQUAL
67684: IFTRUE 67688
67686: GO 67884
67688: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
67689: LD_ADDR_VAR 0 1
67693: PUSH
67694: LD_INT 1
67696: PUSH
67697: LD_INT 2
67699: PUSH
67700: LD_INT 3
67702: PUSH
67703: LD_INT 4
67705: PUSH
67706: LD_INT 5
67708: PUSH
67709: LD_INT 8
67711: PUSH
67712: LD_INT 9
67714: PUSH
67715: LD_INT 10
67717: PUSH
67718: LD_INT 11
67720: PUSH
67721: LD_INT 12
67723: PUSH
67724: LD_INT 14
67726: PUSH
67727: LD_INT 15
67729: PUSH
67730: LD_INT 16
67732: PUSH
67733: LD_INT 17
67735: PUSH
67736: LD_INT 18
67738: PUSH
67739: LD_INT 19
67741: PUSH
67742: LD_INT 20
67744: PUSH
67745: LD_INT 21
67747: PUSH
67748: LD_INT 22
67750: PUSH
67751: LD_INT 23
67753: PUSH
67754: LD_INT 24
67756: PUSH
67757: LD_INT 25
67759: PUSH
67760: LD_INT 26
67762: PUSH
67763: LD_INT 27
67765: PUSH
67766: LD_INT 28
67768: PUSH
67769: LD_INT 30
67771: PUSH
67772: LD_INT 31
67774: PUSH
67775: LD_INT 32
67777: PUSH
67778: LD_INT 33
67780: PUSH
67781: LD_INT 34
67783: PUSH
67784: LD_INT 36
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: LIST
67791: LIST
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: LIST
67802: LIST
67803: LIST
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: LIST
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: PUSH
67820: LD_INT 101
67822: PUSH
67823: LD_INT 102
67825: PUSH
67826: LD_INT 103
67828: PUSH
67829: LD_INT 104
67831: PUSH
67832: LD_INT 105
67834: PUSH
67835: LD_INT 106
67837: PUSH
67838: LD_INT 107
67840: PUSH
67841: LD_INT 108
67843: PUSH
67844: LD_INT 109
67846: PUSH
67847: LD_INT 110
67849: PUSH
67850: LD_INT 111
67852: PUSH
67853: LD_INT 112
67855: PUSH
67856: LD_INT 113
67858: PUSH
67859: LD_INT 114
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: ST_TO_ADDR
67882: GO 69049
67884: LD_INT 14
67886: DOUBLE
67887: EQUAL
67888: IFTRUE 67892
67890: GO 68104
67892: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
67893: LD_ADDR_VAR 0 1
67897: PUSH
67898: LD_INT 1
67900: PUSH
67901: LD_INT 2
67903: PUSH
67904: LD_INT 3
67906: PUSH
67907: LD_INT 4
67909: PUSH
67910: LD_INT 5
67912: PUSH
67913: LD_INT 6
67915: PUSH
67916: LD_INT 7
67918: PUSH
67919: LD_INT 8
67921: PUSH
67922: LD_INT 9
67924: PUSH
67925: LD_INT 10
67927: PUSH
67928: LD_INT 11
67930: PUSH
67931: LD_INT 12
67933: PUSH
67934: LD_INT 13
67936: PUSH
67937: LD_INT 14
67939: PUSH
67940: LD_INT 15
67942: PUSH
67943: LD_INT 16
67945: PUSH
67946: LD_INT 17
67948: PUSH
67949: LD_INT 18
67951: PUSH
67952: LD_INT 19
67954: PUSH
67955: LD_INT 20
67957: PUSH
67958: LD_INT 21
67960: PUSH
67961: LD_INT 22
67963: PUSH
67964: LD_INT 23
67966: PUSH
67967: LD_INT 24
67969: PUSH
67970: LD_INT 25
67972: PUSH
67973: LD_INT 26
67975: PUSH
67976: LD_INT 27
67978: PUSH
67979: LD_INT 28
67981: PUSH
67982: LD_INT 29
67984: PUSH
67985: LD_INT 30
67987: PUSH
67988: LD_INT 31
67990: PUSH
67991: LD_INT 32
67993: PUSH
67994: LD_INT 33
67996: PUSH
67997: LD_INT 34
67999: PUSH
68000: LD_INT 36
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: LIST
68028: LIST
68029: LIST
68030: LIST
68031: LIST
68032: LIST
68033: LIST
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: PUSH
68040: LD_INT 101
68042: PUSH
68043: LD_INT 102
68045: PUSH
68046: LD_INT 103
68048: PUSH
68049: LD_INT 104
68051: PUSH
68052: LD_INT 105
68054: PUSH
68055: LD_INT 106
68057: PUSH
68058: LD_INT 107
68060: PUSH
68061: LD_INT 108
68063: PUSH
68064: LD_INT 109
68066: PUSH
68067: LD_INT 110
68069: PUSH
68070: LD_INT 111
68072: PUSH
68073: LD_INT 112
68075: PUSH
68076: LD_INT 113
68078: PUSH
68079: LD_INT 114
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: ST_TO_ADDR
68102: GO 69049
68104: LD_INT 15
68106: DOUBLE
68107: EQUAL
68108: IFTRUE 68112
68110: GO 68324
68112: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
68113: LD_ADDR_VAR 0 1
68117: PUSH
68118: LD_INT 1
68120: PUSH
68121: LD_INT 2
68123: PUSH
68124: LD_INT 3
68126: PUSH
68127: LD_INT 4
68129: PUSH
68130: LD_INT 5
68132: PUSH
68133: LD_INT 6
68135: PUSH
68136: LD_INT 7
68138: PUSH
68139: LD_INT 8
68141: PUSH
68142: LD_INT 9
68144: PUSH
68145: LD_INT 10
68147: PUSH
68148: LD_INT 11
68150: PUSH
68151: LD_INT 12
68153: PUSH
68154: LD_INT 13
68156: PUSH
68157: LD_INT 14
68159: PUSH
68160: LD_INT 15
68162: PUSH
68163: LD_INT 16
68165: PUSH
68166: LD_INT 17
68168: PUSH
68169: LD_INT 18
68171: PUSH
68172: LD_INT 19
68174: PUSH
68175: LD_INT 20
68177: PUSH
68178: LD_INT 21
68180: PUSH
68181: LD_INT 22
68183: PUSH
68184: LD_INT 23
68186: PUSH
68187: LD_INT 24
68189: PUSH
68190: LD_INT 25
68192: PUSH
68193: LD_INT 26
68195: PUSH
68196: LD_INT 27
68198: PUSH
68199: LD_INT 28
68201: PUSH
68202: LD_INT 29
68204: PUSH
68205: LD_INT 30
68207: PUSH
68208: LD_INT 31
68210: PUSH
68211: LD_INT 32
68213: PUSH
68214: LD_INT 33
68216: PUSH
68217: LD_INT 34
68219: PUSH
68220: LD_INT 36
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: LIST
68227: LIST
68228: LIST
68229: LIST
68230: LIST
68231: LIST
68232: LIST
68233: LIST
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: LIST
68259: PUSH
68260: LD_INT 101
68262: PUSH
68263: LD_INT 102
68265: PUSH
68266: LD_INT 103
68268: PUSH
68269: LD_INT 104
68271: PUSH
68272: LD_INT 105
68274: PUSH
68275: LD_INT 106
68277: PUSH
68278: LD_INT 107
68280: PUSH
68281: LD_INT 108
68283: PUSH
68284: LD_INT 109
68286: PUSH
68287: LD_INT 110
68289: PUSH
68290: LD_INT 111
68292: PUSH
68293: LD_INT 112
68295: PUSH
68296: LD_INT 113
68298: PUSH
68299: LD_INT 114
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: LIST
68306: LIST
68307: LIST
68308: LIST
68309: LIST
68310: LIST
68311: LIST
68312: LIST
68313: LIST
68314: LIST
68315: LIST
68316: LIST
68317: PUSH
68318: EMPTY
68319: LIST
68320: LIST
68321: ST_TO_ADDR
68322: GO 69049
68324: LD_INT 16
68326: DOUBLE
68327: EQUAL
68328: IFTRUE 68332
68330: GO 68456
68332: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
68333: LD_ADDR_VAR 0 1
68337: PUSH
68338: LD_INT 2
68340: PUSH
68341: LD_INT 4
68343: PUSH
68344: LD_INT 5
68346: PUSH
68347: LD_INT 7
68349: PUSH
68350: LD_INT 11
68352: PUSH
68353: LD_INT 12
68355: PUSH
68356: LD_INT 15
68358: PUSH
68359: LD_INT 16
68361: PUSH
68362: LD_INT 20
68364: PUSH
68365: LD_INT 21
68367: PUSH
68368: LD_INT 22
68370: PUSH
68371: LD_INT 23
68373: PUSH
68374: LD_INT 25
68376: PUSH
68377: LD_INT 26
68379: PUSH
68380: LD_INT 30
68382: PUSH
68383: LD_INT 31
68385: PUSH
68386: LD_INT 32
68388: PUSH
68389: LD_INT 33
68391: PUSH
68392: LD_INT 34
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: PUSH
68416: LD_INT 101
68418: PUSH
68419: LD_INT 102
68421: PUSH
68422: LD_INT 103
68424: PUSH
68425: LD_INT 106
68427: PUSH
68428: LD_INT 108
68430: PUSH
68431: LD_INT 112
68433: PUSH
68434: LD_INT 113
68436: PUSH
68437: LD_INT 114
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: LIST
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: ST_TO_ADDR
68454: GO 69049
68456: LD_INT 17
68458: DOUBLE
68459: EQUAL
68460: IFTRUE 68464
68462: GO 68676
68464: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
68465: LD_ADDR_VAR 0 1
68469: PUSH
68470: LD_INT 1
68472: PUSH
68473: LD_INT 2
68475: PUSH
68476: LD_INT 3
68478: PUSH
68479: LD_INT 4
68481: PUSH
68482: LD_INT 5
68484: PUSH
68485: LD_INT 6
68487: PUSH
68488: LD_INT 7
68490: PUSH
68491: LD_INT 8
68493: PUSH
68494: LD_INT 9
68496: PUSH
68497: LD_INT 10
68499: PUSH
68500: LD_INT 11
68502: PUSH
68503: LD_INT 12
68505: PUSH
68506: LD_INT 13
68508: PUSH
68509: LD_INT 14
68511: PUSH
68512: LD_INT 15
68514: PUSH
68515: LD_INT 16
68517: PUSH
68518: LD_INT 17
68520: PUSH
68521: LD_INT 18
68523: PUSH
68524: LD_INT 19
68526: PUSH
68527: LD_INT 20
68529: PUSH
68530: LD_INT 21
68532: PUSH
68533: LD_INT 22
68535: PUSH
68536: LD_INT 23
68538: PUSH
68539: LD_INT 24
68541: PUSH
68542: LD_INT 25
68544: PUSH
68545: LD_INT 26
68547: PUSH
68548: LD_INT 27
68550: PUSH
68551: LD_INT 28
68553: PUSH
68554: LD_INT 29
68556: PUSH
68557: LD_INT 30
68559: PUSH
68560: LD_INT 31
68562: PUSH
68563: LD_INT 32
68565: PUSH
68566: LD_INT 33
68568: PUSH
68569: LD_INT 34
68571: PUSH
68572: LD_INT 36
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: LIST
68579: LIST
68580: LIST
68581: LIST
68582: LIST
68583: LIST
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: LIST
68592: LIST
68593: LIST
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: LIST
68608: LIST
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 101
68614: PUSH
68615: LD_INT 102
68617: PUSH
68618: LD_INT 103
68620: PUSH
68621: LD_INT 104
68623: PUSH
68624: LD_INT 105
68626: PUSH
68627: LD_INT 106
68629: PUSH
68630: LD_INT 107
68632: PUSH
68633: LD_INT 108
68635: PUSH
68636: LD_INT 109
68638: PUSH
68639: LD_INT 110
68641: PUSH
68642: LD_INT 111
68644: PUSH
68645: LD_INT 112
68647: PUSH
68648: LD_INT 113
68650: PUSH
68651: LD_INT 114
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: LIST
68658: LIST
68659: LIST
68660: LIST
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: ST_TO_ADDR
68674: GO 69049
68676: LD_INT 18
68678: DOUBLE
68679: EQUAL
68680: IFTRUE 68684
68682: GO 68820
68684: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
68685: LD_ADDR_VAR 0 1
68689: PUSH
68690: LD_INT 2
68692: PUSH
68693: LD_INT 4
68695: PUSH
68696: LD_INT 5
68698: PUSH
68699: LD_INT 7
68701: PUSH
68702: LD_INT 11
68704: PUSH
68705: LD_INT 12
68707: PUSH
68708: LD_INT 15
68710: PUSH
68711: LD_INT 16
68713: PUSH
68714: LD_INT 20
68716: PUSH
68717: LD_INT 21
68719: PUSH
68720: LD_INT 22
68722: PUSH
68723: LD_INT 23
68725: PUSH
68726: LD_INT 25
68728: PUSH
68729: LD_INT 26
68731: PUSH
68732: LD_INT 30
68734: PUSH
68735: LD_INT 31
68737: PUSH
68738: LD_INT 32
68740: PUSH
68741: LD_INT 33
68743: PUSH
68744: LD_INT 34
68746: PUSH
68747: LD_INT 35
68749: PUSH
68750: LD_INT 36
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: LIST
68759: LIST
68760: LIST
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 101
68778: PUSH
68779: LD_INT 102
68781: PUSH
68782: LD_INT 103
68784: PUSH
68785: LD_INT 106
68787: PUSH
68788: LD_INT 108
68790: PUSH
68791: LD_INT 112
68793: PUSH
68794: LD_INT 113
68796: PUSH
68797: LD_INT 114
68799: PUSH
68800: LD_INT 115
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: LIST
68807: LIST
68808: LIST
68809: LIST
68810: LIST
68811: LIST
68812: LIST
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: ST_TO_ADDR
68818: GO 69049
68820: LD_INT 19
68822: DOUBLE
68823: EQUAL
68824: IFTRUE 68828
68826: GO 69048
68828: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
68829: LD_ADDR_VAR 0 1
68833: PUSH
68834: LD_INT 1
68836: PUSH
68837: LD_INT 2
68839: PUSH
68840: LD_INT 3
68842: PUSH
68843: LD_INT 4
68845: PUSH
68846: LD_INT 5
68848: PUSH
68849: LD_INT 6
68851: PUSH
68852: LD_INT 7
68854: PUSH
68855: LD_INT 8
68857: PUSH
68858: LD_INT 9
68860: PUSH
68861: LD_INT 10
68863: PUSH
68864: LD_INT 11
68866: PUSH
68867: LD_INT 12
68869: PUSH
68870: LD_INT 13
68872: PUSH
68873: LD_INT 14
68875: PUSH
68876: LD_INT 15
68878: PUSH
68879: LD_INT 16
68881: PUSH
68882: LD_INT 17
68884: PUSH
68885: LD_INT 18
68887: PUSH
68888: LD_INT 19
68890: PUSH
68891: LD_INT 20
68893: PUSH
68894: LD_INT 21
68896: PUSH
68897: LD_INT 22
68899: PUSH
68900: LD_INT 23
68902: PUSH
68903: LD_INT 24
68905: PUSH
68906: LD_INT 25
68908: PUSH
68909: LD_INT 26
68911: PUSH
68912: LD_INT 27
68914: PUSH
68915: LD_INT 28
68917: PUSH
68918: LD_INT 29
68920: PUSH
68921: LD_INT 30
68923: PUSH
68924: LD_INT 31
68926: PUSH
68927: LD_INT 32
68929: PUSH
68930: LD_INT 33
68932: PUSH
68933: LD_INT 34
68935: PUSH
68936: LD_INT 35
68938: PUSH
68939: LD_INT 36
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: LIST
68978: LIST
68979: PUSH
68980: LD_INT 101
68982: PUSH
68983: LD_INT 102
68985: PUSH
68986: LD_INT 103
68988: PUSH
68989: LD_INT 104
68991: PUSH
68992: LD_INT 105
68994: PUSH
68995: LD_INT 106
68997: PUSH
68998: LD_INT 107
69000: PUSH
69001: LD_INT 108
69003: PUSH
69004: LD_INT 109
69006: PUSH
69007: LD_INT 110
69009: PUSH
69010: LD_INT 111
69012: PUSH
69013: LD_INT 112
69015: PUSH
69016: LD_INT 113
69018: PUSH
69019: LD_INT 114
69021: PUSH
69022: LD_INT 115
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: ST_TO_ADDR
69046: GO 69049
69048: POP
// end else
69049: GO 69268
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
69051: LD_ADDR_VAR 0 1
69055: PUSH
69056: LD_INT 1
69058: PUSH
69059: LD_INT 2
69061: PUSH
69062: LD_INT 3
69064: PUSH
69065: LD_INT 4
69067: PUSH
69068: LD_INT 5
69070: PUSH
69071: LD_INT 6
69073: PUSH
69074: LD_INT 7
69076: PUSH
69077: LD_INT 8
69079: PUSH
69080: LD_INT 9
69082: PUSH
69083: LD_INT 10
69085: PUSH
69086: LD_INT 11
69088: PUSH
69089: LD_INT 12
69091: PUSH
69092: LD_INT 13
69094: PUSH
69095: LD_INT 14
69097: PUSH
69098: LD_INT 15
69100: PUSH
69101: LD_INT 16
69103: PUSH
69104: LD_INT 17
69106: PUSH
69107: LD_INT 18
69109: PUSH
69110: LD_INT 19
69112: PUSH
69113: LD_INT 20
69115: PUSH
69116: LD_INT 21
69118: PUSH
69119: LD_INT 22
69121: PUSH
69122: LD_INT 23
69124: PUSH
69125: LD_INT 24
69127: PUSH
69128: LD_INT 25
69130: PUSH
69131: LD_INT 26
69133: PUSH
69134: LD_INT 27
69136: PUSH
69137: LD_INT 28
69139: PUSH
69140: LD_INT 29
69142: PUSH
69143: LD_INT 30
69145: PUSH
69146: LD_INT 31
69148: PUSH
69149: LD_INT 32
69151: PUSH
69152: LD_INT 33
69154: PUSH
69155: LD_INT 34
69157: PUSH
69158: LD_INT 35
69160: PUSH
69161: LD_INT 36
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: LIST
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: LIST
69201: PUSH
69202: LD_INT 101
69204: PUSH
69205: LD_INT 102
69207: PUSH
69208: LD_INT 103
69210: PUSH
69211: LD_INT 104
69213: PUSH
69214: LD_INT 105
69216: PUSH
69217: LD_INT 106
69219: PUSH
69220: LD_INT 107
69222: PUSH
69223: LD_INT 108
69225: PUSH
69226: LD_INT 109
69228: PUSH
69229: LD_INT 110
69231: PUSH
69232: LD_INT 111
69234: PUSH
69235: LD_INT 112
69237: PUSH
69238: LD_INT 113
69240: PUSH
69241: LD_INT 114
69243: PUSH
69244: LD_INT 115
69246: PUSH
69247: EMPTY
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: LIST
69253: LIST
69254: LIST
69255: LIST
69256: LIST
69257: LIST
69258: LIST
69259: LIST
69260: LIST
69261: LIST
69262: LIST
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: ST_TO_ADDR
// if result then
69268: LD_VAR 0 1
69272: IFFALSE 69561
// begin normal :=  ;
69274: LD_ADDR_VAR 0 3
69278: PUSH
69279: LD_STRING 
69281: ST_TO_ADDR
// hardcore :=  ;
69282: LD_ADDR_VAR 0 4
69286: PUSH
69287: LD_STRING 
69289: ST_TO_ADDR
// for i = 1 to normalCounter do
69290: LD_ADDR_VAR 0 5
69294: PUSH
69295: DOUBLE
69296: LD_INT 1
69298: DEC
69299: ST_TO_ADDR
69300: LD_EXP 79
69304: PUSH
69305: FOR_TO
69306: IFFALSE 69407
// begin tmp := 0 ;
69308: LD_ADDR_VAR 0 2
69312: PUSH
69313: LD_STRING 0
69315: ST_TO_ADDR
// if result [ 1 ] then
69316: LD_VAR 0 1
69320: PUSH
69321: LD_INT 1
69323: ARRAY
69324: IFFALSE 69389
// if result [ 1 ] [ 1 ] = i then
69326: LD_VAR 0 1
69330: PUSH
69331: LD_INT 1
69333: ARRAY
69334: PUSH
69335: LD_INT 1
69337: ARRAY
69338: PUSH
69339: LD_VAR 0 5
69343: EQUAL
69344: IFFALSE 69389
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
69346: LD_ADDR_VAR 0 1
69350: PUSH
69351: LD_VAR 0 1
69355: PPUSH
69356: LD_INT 1
69358: PPUSH
69359: LD_VAR 0 1
69363: PUSH
69364: LD_INT 1
69366: ARRAY
69367: PPUSH
69368: LD_INT 1
69370: PPUSH
69371: CALL_OW 3
69375: PPUSH
69376: CALL_OW 1
69380: ST_TO_ADDR
// tmp := 1 ;
69381: LD_ADDR_VAR 0 2
69385: PUSH
69386: LD_STRING 1
69388: ST_TO_ADDR
// end ; normal := normal & tmp ;
69389: LD_ADDR_VAR 0 3
69393: PUSH
69394: LD_VAR 0 3
69398: PUSH
69399: LD_VAR 0 2
69403: STR
69404: ST_TO_ADDR
// end ;
69405: GO 69305
69407: POP
69408: POP
// for i = 1 to hardcoreCounter do
69409: LD_ADDR_VAR 0 5
69413: PUSH
69414: DOUBLE
69415: LD_INT 1
69417: DEC
69418: ST_TO_ADDR
69419: LD_EXP 80
69423: PUSH
69424: FOR_TO
69425: IFFALSE 69530
// begin tmp := 0 ;
69427: LD_ADDR_VAR 0 2
69431: PUSH
69432: LD_STRING 0
69434: ST_TO_ADDR
// if result [ 2 ] then
69435: LD_VAR 0 1
69439: PUSH
69440: LD_INT 2
69442: ARRAY
69443: IFFALSE 69512
// if result [ 2 ] [ 1 ] = 100 + i then
69445: LD_VAR 0 1
69449: PUSH
69450: LD_INT 2
69452: ARRAY
69453: PUSH
69454: LD_INT 1
69456: ARRAY
69457: PUSH
69458: LD_INT 100
69460: PUSH
69461: LD_VAR 0 5
69465: PLUS
69466: EQUAL
69467: IFFALSE 69512
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
69469: LD_ADDR_VAR 0 1
69473: PUSH
69474: LD_VAR 0 1
69478: PPUSH
69479: LD_INT 2
69481: PPUSH
69482: LD_VAR 0 1
69486: PUSH
69487: LD_INT 2
69489: ARRAY
69490: PPUSH
69491: LD_INT 1
69493: PPUSH
69494: CALL_OW 3
69498: PPUSH
69499: CALL_OW 1
69503: ST_TO_ADDR
// tmp := 1 ;
69504: LD_ADDR_VAR 0 2
69508: PUSH
69509: LD_STRING 1
69511: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
69512: LD_ADDR_VAR 0 4
69516: PUSH
69517: LD_VAR 0 4
69521: PUSH
69522: LD_VAR 0 2
69526: STR
69527: ST_TO_ADDR
// end ;
69528: GO 69424
69530: POP
69531: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
69532: LD_STRING getStreamItemsFromMission("
69534: PUSH
69535: LD_VAR 0 3
69539: STR
69540: PUSH
69541: LD_STRING ","
69543: STR
69544: PUSH
69545: LD_VAR 0 4
69549: STR
69550: PUSH
69551: LD_STRING ")
69553: STR
69554: PPUSH
69555: CALL_OW 559
// end else
69559: GO 69568
// ToLua ( getStreamItemsFromMission("","") ) ;
69561: LD_STRING getStreamItemsFromMission("","")
69563: PPUSH
69564: CALL_OW 559
// end ;
69568: LD_VAR 0 1
69572: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
69573: LD_EXP 78
69577: PUSH
69578: LD_EXP 83
69582: AND
69583: IFFALSE 69707
69585: GO 69587
69587: DISABLE
69588: LD_INT 0
69590: PPUSH
69591: PPUSH
// begin enable ;
69592: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
69593: LD_ADDR_VAR 0 2
69597: PUSH
69598: LD_INT 22
69600: PUSH
69601: LD_OWVAR 2
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: LD_INT 2
69612: PUSH
69613: LD_INT 34
69615: PUSH
69616: LD_INT 7
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: PUSH
69623: LD_INT 34
69625: PUSH
69626: LD_INT 45
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: PUSH
69633: LD_INT 34
69635: PUSH
69636: LD_INT 28
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PUSH
69643: LD_INT 34
69645: PUSH
69646: LD_INT 47
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: LIST
69657: LIST
69658: LIST
69659: PUSH
69660: EMPTY
69661: LIST
69662: LIST
69663: PPUSH
69664: CALL_OW 69
69668: ST_TO_ADDR
// if not tmp then
69669: LD_VAR 0 2
69673: NOT
69674: IFFALSE 69678
// exit ;
69676: GO 69707
// for i in tmp do
69678: LD_ADDR_VAR 0 1
69682: PUSH
69683: LD_VAR 0 2
69687: PUSH
69688: FOR_IN
69689: IFFALSE 69705
// begin SetLives ( i , 0 ) ;
69691: LD_VAR 0 1
69695: PPUSH
69696: LD_INT 0
69698: PPUSH
69699: CALL_OW 234
// end ;
69703: GO 69688
69705: POP
69706: POP
// end ;
69707: PPOPN 2
69709: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
69710: LD_EXP 78
69714: PUSH
69715: LD_EXP 84
69719: AND
69720: IFFALSE 69804
69722: GO 69724
69724: DISABLE
69725: LD_INT 0
69727: PPUSH
69728: PPUSH
// begin enable ;
69729: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
69730: LD_ADDR_VAR 0 2
69734: PUSH
69735: LD_INT 22
69737: PUSH
69738: LD_OWVAR 2
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 32
69749: PUSH
69750: LD_INT 3
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: EMPTY
69758: LIST
69759: LIST
69760: PPUSH
69761: CALL_OW 69
69765: ST_TO_ADDR
// if not tmp then
69766: LD_VAR 0 2
69770: NOT
69771: IFFALSE 69775
// exit ;
69773: GO 69804
// for i in tmp do
69775: LD_ADDR_VAR 0 1
69779: PUSH
69780: LD_VAR 0 2
69784: PUSH
69785: FOR_IN
69786: IFFALSE 69802
// begin SetLives ( i , 0 ) ;
69788: LD_VAR 0 1
69792: PPUSH
69793: LD_INT 0
69795: PPUSH
69796: CALL_OW 234
// end ;
69800: GO 69785
69802: POP
69803: POP
// end ;
69804: PPOPN 2
69806: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
69807: LD_EXP 78
69811: PUSH
69812: LD_EXP 81
69816: AND
69817: IFFALSE 69910
69819: GO 69821
69821: DISABLE
69822: LD_INT 0
69824: PPUSH
// begin enable ;
69825: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
69826: LD_ADDR_VAR 0 1
69830: PUSH
69831: LD_INT 22
69833: PUSH
69834: LD_OWVAR 2
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: LD_INT 2
69845: PUSH
69846: LD_INT 25
69848: PUSH
69849: LD_INT 5
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: PUSH
69856: LD_INT 25
69858: PUSH
69859: LD_INT 9
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: PUSH
69866: LD_INT 25
69868: PUSH
69869: LD_INT 8
69871: PUSH
69872: EMPTY
69873: LIST
69874: LIST
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: LIST
69880: LIST
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: PPUSH
69886: CALL_OW 69
69890: PUSH
69891: FOR_IN
69892: IFFALSE 69908
// begin SetClass ( i , 1 ) ;
69894: LD_VAR 0 1
69898: PPUSH
69899: LD_INT 1
69901: PPUSH
69902: CALL_OW 336
// end ;
69906: GO 69891
69908: POP
69909: POP
// end ;
69910: PPOPN 1
69912: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
69913: LD_EXP 78
69917: PUSH
69918: LD_EXP 82
69922: AND
69923: PUSH
69924: LD_OWVAR 65
69928: PUSH
69929: LD_INT 7
69931: LESS
69932: AND
69933: IFFALSE 69947
69935: GO 69937
69937: DISABLE
// begin enable ;
69938: ENABLE
// game_speed := 7 ;
69939: LD_ADDR_OWVAR 65
69943: PUSH
69944: LD_INT 7
69946: ST_TO_ADDR
// end ;
69947: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
69948: LD_EXP 78
69952: PUSH
69953: LD_EXP 85
69957: AND
69958: IFFALSE 70160
69960: GO 69962
69962: DISABLE
69963: LD_INT 0
69965: PPUSH
69966: PPUSH
69967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
69968: LD_ADDR_VAR 0 3
69972: PUSH
69973: LD_INT 81
69975: PUSH
69976: LD_OWVAR 2
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: LD_INT 21
69987: PUSH
69988: LD_INT 1
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: PPUSH
69999: CALL_OW 69
70003: ST_TO_ADDR
// if not tmp then
70004: LD_VAR 0 3
70008: NOT
70009: IFFALSE 70013
// exit ;
70011: GO 70160
// if tmp > 5 then
70013: LD_VAR 0 3
70017: PUSH
70018: LD_INT 5
70020: GREATER
70021: IFFALSE 70033
// k := 5 else
70023: LD_ADDR_VAR 0 2
70027: PUSH
70028: LD_INT 5
70030: ST_TO_ADDR
70031: GO 70043
// k := tmp ;
70033: LD_ADDR_VAR 0 2
70037: PUSH
70038: LD_VAR 0 3
70042: ST_TO_ADDR
// for i := 1 to k do
70043: LD_ADDR_VAR 0 1
70047: PUSH
70048: DOUBLE
70049: LD_INT 1
70051: DEC
70052: ST_TO_ADDR
70053: LD_VAR 0 2
70057: PUSH
70058: FOR_TO
70059: IFFALSE 70158
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
70061: LD_VAR 0 3
70065: PUSH
70066: LD_VAR 0 1
70070: ARRAY
70071: PPUSH
70072: LD_VAR 0 1
70076: PUSH
70077: LD_INT 4
70079: MOD
70080: PUSH
70081: LD_INT 1
70083: PLUS
70084: PPUSH
70085: CALL_OW 259
70089: PUSH
70090: LD_INT 10
70092: LESS
70093: IFFALSE 70156
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
70095: LD_VAR 0 3
70099: PUSH
70100: LD_VAR 0 1
70104: ARRAY
70105: PPUSH
70106: LD_VAR 0 1
70110: PUSH
70111: LD_INT 4
70113: MOD
70114: PUSH
70115: LD_INT 1
70117: PLUS
70118: PPUSH
70119: LD_VAR 0 3
70123: PUSH
70124: LD_VAR 0 1
70128: ARRAY
70129: PPUSH
70130: LD_VAR 0 1
70134: PUSH
70135: LD_INT 4
70137: MOD
70138: PUSH
70139: LD_INT 1
70141: PLUS
70142: PPUSH
70143: CALL_OW 259
70147: PUSH
70148: LD_INT 1
70150: PLUS
70151: PPUSH
70152: CALL_OW 237
70156: GO 70058
70158: POP
70159: POP
// end ;
70160: PPOPN 3
70162: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
70163: LD_EXP 78
70167: PUSH
70168: LD_EXP 86
70172: AND
70173: IFFALSE 70193
70175: GO 70177
70177: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
70178: LD_INT 4
70180: PPUSH
70181: LD_OWVAR 2
70185: PPUSH
70186: LD_INT 0
70188: PPUSH
70189: CALL_OW 324
70193: END
// every 0 0$1 trigger StreamModeActive and sShovel do
70194: LD_EXP 78
70198: PUSH
70199: LD_EXP 115
70203: AND
70204: IFFALSE 70224
70206: GO 70208
70208: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
70209: LD_INT 19
70211: PPUSH
70212: LD_OWVAR 2
70216: PPUSH
70217: LD_INT 0
70219: PPUSH
70220: CALL_OW 324
70224: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
70225: LD_EXP 78
70229: PUSH
70230: LD_EXP 87
70234: AND
70235: IFFALSE 70337
70237: GO 70239
70239: DISABLE
70240: LD_INT 0
70242: PPUSH
70243: PPUSH
// begin enable ;
70244: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
70245: LD_ADDR_VAR 0 2
70249: PUSH
70250: LD_INT 22
70252: PUSH
70253: LD_OWVAR 2
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: PUSH
70262: LD_INT 2
70264: PUSH
70265: LD_INT 34
70267: PUSH
70268: LD_INT 11
70270: PUSH
70271: EMPTY
70272: LIST
70273: LIST
70274: PUSH
70275: LD_INT 34
70277: PUSH
70278: LD_INT 30
70280: PUSH
70281: EMPTY
70282: LIST
70283: LIST
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: LIST
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: PPUSH
70294: CALL_OW 69
70298: ST_TO_ADDR
// if not tmp then
70299: LD_VAR 0 2
70303: NOT
70304: IFFALSE 70308
// exit ;
70306: GO 70337
// for i in tmp do
70308: LD_ADDR_VAR 0 1
70312: PUSH
70313: LD_VAR 0 2
70317: PUSH
70318: FOR_IN
70319: IFFALSE 70335
// begin SetLives ( i , 0 ) ;
70321: LD_VAR 0 1
70325: PPUSH
70326: LD_INT 0
70328: PPUSH
70329: CALL_OW 234
// end ;
70333: GO 70318
70335: POP
70336: POP
// end ;
70337: PPOPN 2
70339: END
// every 0 0$1 trigger StreamModeActive and sBunker do
70340: LD_EXP 78
70344: PUSH
70345: LD_EXP 88
70349: AND
70350: IFFALSE 70370
70352: GO 70354
70354: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
70355: LD_INT 32
70357: PPUSH
70358: LD_OWVAR 2
70362: PPUSH
70363: LD_INT 0
70365: PPUSH
70366: CALL_OW 324
70370: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
70371: LD_EXP 78
70375: PUSH
70376: LD_EXP 89
70380: AND
70381: IFFALSE 70562
70383: GO 70385
70385: DISABLE
70386: LD_INT 0
70388: PPUSH
70389: PPUSH
70390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
70391: LD_ADDR_VAR 0 2
70395: PUSH
70396: LD_INT 22
70398: PUSH
70399: LD_OWVAR 2
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: PUSH
70408: LD_INT 33
70410: PUSH
70411: LD_INT 3
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: PPUSH
70422: CALL_OW 69
70426: ST_TO_ADDR
// if not tmp then
70427: LD_VAR 0 2
70431: NOT
70432: IFFALSE 70436
// exit ;
70434: GO 70562
// side := 0 ;
70436: LD_ADDR_VAR 0 3
70440: PUSH
70441: LD_INT 0
70443: ST_TO_ADDR
// for i := 1 to 8 do
70444: LD_ADDR_VAR 0 1
70448: PUSH
70449: DOUBLE
70450: LD_INT 1
70452: DEC
70453: ST_TO_ADDR
70454: LD_INT 8
70456: PUSH
70457: FOR_TO
70458: IFFALSE 70506
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
70460: LD_OWVAR 2
70464: PUSH
70465: LD_VAR 0 1
70469: NONEQUAL
70470: PUSH
70471: LD_OWVAR 2
70475: PPUSH
70476: LD_VAR 0 1
70480: PPUSH
70481: CALL_OW 81
70485: PUSH
70486: LD_INT 2
70488: EQUAL
70489: AND
70490: IFFALSE 70504
// begin side := i ;
70492: LD_ADDR_VAR 0 3
70496: PUSH
70497: LD_VAR 0 1
70501: ST_TO_ADDR
// break ;
70502: GO 70506
// end ;
70504: GO 70457
70506: POP
70507: POP
// if not side then
70508: LD_VAR 0 3
70512: NOT
70513: IFFALSE 70517
// exit ;
70515: GO 70562
// for i := 1 to tmp do
70517: LD_ADDR_VAR 0 1
70521: PUSH
70522: DOUBLE
70523: LD_INT 1
70525: DEC
70526: ST_TO_ADDR
70527: LD_VAR 0 2
70531: PUSH
70532: FOR_TO
70533: IFFALSE 70560
// if Prob ( 60 ) then
70535: LD_INT 60
70537: PPUSH
70538: CALL_OW 13
70542: IFFALSE 70558
// SetSide ( i , side ) ;
70544: LD_VAR 0 1
70548: PPUSH
70549: LD_VAR 0 3
70553: PPUSH
70554: CALL_OW 235
70558: GO 70532
70560: POP
70561: POP
// end ;
70562: PPOPN 3
70564: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
70565: LD_EXP 78
70569: PUSH
70570: LD_EXP 91
70574: AND
70575: IFFALSE 70694
70577: GO 70579
70579: DISABLE
70580: LD_INT 0
70582: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
70583: LD_ADDR_VAR 0 1
70587: PUSH
70588: LD_INT 22
70590: PUSH
70591: LD_OWVAR 2
70595: PUSH
70596: EMPTY
70597: LIST
70598: LIST
70599: PUSH
70600: LD_INT 21
70602: PUSH
70603: LD_INT 1
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PUSH
70610: LD_INT 3
70612: PUSH
70613: LD_INT 23
70615: PUSH
70616: LD_INT 0
70618: PUSH
70619: EMPTY
70620: LIST
70621: LIST
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: LIST
70631: PPUSH
70632: CALL_OW 69
70636: PUSH
70637: FOR_IN
70638: IFFALSE 70692
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
70640: LD_VAR 0 1
70644: PPUSH
70645: CALL_OW 257
70649: PUSH
70650: LD_INT 1
70652: PUSH
70653: LD_INT 2
70655: PUSH
70656: LD_INT 3
70658: PUSH
70659: LD_INT 4
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: LIST
70666: LIST
70667: IN
70668: IFFALSE 70690
// SetClass ( un , rand ( 1 , 4 ) ) ;
70670: LD_VAR 0 1
70674: PPUSH
70675: LD_INT 1
70677: PPUSH
70678: LD_INT 4
70680: PPUSH
70681: CALL_OW 12
70685: PPUSH
70686: CALL_OW 336
70690: GO 70637
70692: POP
70693: POP
// end ;
70694: PPOPN 1
70696: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
70697: LD_EXP 78
70701: PUSH
70702: LD_EXP 90
70706: AND
70707: IFFALSE 70786
70709: GO 70711
70711: DISABLE
70712: LD_INT 0
70714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
70715: LD_ADDR_VAR 0 1
70719: PUSH
70720: LD_INT 22
70722: PUSH
70723: LD_OWVAR 2
70727: PUSH
70728: EMPTY
70729: LIST
70730: LIST
70731: PUSH
70732: LD_INT 21
70734: PUSH
70735: LD_INT 3
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: EMPTY
70743: LIST
70744: LIST
70745: PPUSH
70746: CALL_OW 69
70750: ST_TO_ADDR
// if not tmp then
70751: LD_VAR 0 1
70755: NOT
70756: IFFALSE 70760
// exit ;
70758: GO 70786
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
70760: LD_VAR 0 1
70764: PUSH
70765: LD_INT 1
70767: PPUSH
70768: LD_VAR 0 1
70772: PPUSH
70773: CALL_OW 12
70777: ARRAY
70778: PPUSH
70779: LD_INT 100
70781: PPUSH
70782: CALL_OW 234
// end ;
70786: PPOPN 1
70788: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
70789: LD_EXP 78
70793: PUSH
70794: LD_EXP 92
70798: AND
70799: IFFALSE 70897
70801: GO 70803
70803: DISABLE
70804: LD_INT 0
70806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70807: LD_ADDR_VAR 0 1
70811: PUSH
70812: LD_INT 22
70814: PUSH
70815: LD_OWVAR 2
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: PUSH
70824: LD_INT 21
70826: PUSH
70827: LD_INT 1
70829: PUSH
70830: EMPTY
70831: LIST
70832: LIST
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: PPUSH
70838: CALL_OW 69
70842: ST_TO_ADDR
// if not tmp then
70843: LD_VAR 0 1
70847: NOT
70848: IFFALSE 70852
// exit ;
70850: GO 70897
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
70852: LD_VAR 0 1
70856: PUSH
70857: LD_INT 1
70859: PPUSH
70860: LD_VAR 0 1
70864: PPUSH
70865: CALL_OW 12
70869: ARRAY
70870: PPUSH
70871: LD_INT 1
70873: PPUSH
70874: LD_INT 4
70876: PPUSH
70877: CALL_OW 12
70881: PPUSH
70882: LD_INT 3000
70884: PPUSH
70885: LD_INT 9000
70887: PPUSH
70888: CALL_OW 12
70892: PPUSH
70893: CALL_OW 492
// end ;
70897: PPOPN 1
70899: END
// every 0 0$1 trigger StreamModeActive and sDepot do
70900: LD_EXP 78
70904: PUSH
70905: LD_EXP 93
70909: AND
70910: IFFALSE 70930
70912: GO 70914
70914: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
70915: LD_INT 1
70917: PPUSH
70918: LD_OWVAR 2
70922: PPUSH
70923: LD_INT 0
70925: PPUSH
70926: CALL_OW 324
70930: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
70931: LD_EXP 78
70935: PUSH
70936: LD_EXP 94
70940: AND
70941: IFFALSE 71024
70943: GO 70945
70945: DISABLE
70946: LD_INT 0
70948: PPUSH
70949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
70950: LD_ADDR_VAR 0 2
70954: PUSH
70955: LD_INT 22
70957: PUSH
70958: LD_OWVAR 2
70962: PUSH
70963: EMPTY
70964: LIST
70965: LIST
70966: PUSH
70967: LD_INT 21
70969: PUSH
70970: LD_INT 3
70972: PUSH
70973: EMPTY
70974: LIST
70975: LIST
70976: PUSH
70977: EMPTY
70978: LIST
70979: LIST
70980: PPUSH
70981: CALL_OW 69
70985: ST_TO_ADDR
// if not tmp then
70986: LD_VAR 0 2
70990: NOT
70991: IFFALSE 70995
// exit ;
70993: GO 71024
// for i in tmp do
70995: LD_ADDR_VAR 0 1
70999: PUSH
71000: LD_VAR 0 2
71004: PUSH
71005: FOR_IN
71006: IFFALSE 71022
// SetBLevel ( i , 10 ) ;
71008: LD_VAR 0 1
71012: PPUSH
71013: LD_INT 10
71015: PPUSH
71016: CALL_OW 241
71020: GO 71005
71022: POP
71023: POP
// end ;
71024: PPOPN 2
71026: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
71027: LD_EXP 78
71031: PUSH
71032: LD_EXP 95
71036: AND
71037: IFFALSE 71148
71039: GO 71041
71041: DISABLE
71042: LD_INT 0
71044: PPUSH
71045: PPUSH
71046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71047: LD_ADDR_VAR 0 3
71051: PUSH
71052: LD_INT 22
71054: PUSH
71055: LD_OWVAR 2
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: PUSH
71064: LD_INT 25
71066: PUSH
71067: LD_INT 1
71069: PUSH
71070: EMPTY
71071: LIST
71072: LIST
71073: PUSH
71074: EMPTY
71075: LIST
71076: LIST
71077: PPUSH
71078: CALL_OW 69
71082: ST_TO_ADDR
// if not tmp then
71083: LD_VAR 0 3
71087: NOT
71088: IFFALSE 71092
// exit ;
71090: GO 71148
// un := tmp [ rand ( 1 , tmp ) ] ;
71092: LD_ADDR_VAR 0 2
71096: PUSH
71097: LD_VAR 0 3
71101: PUSH
71102: LD_INT 1
71104: PPUSH
71105: LD_VAR 0 3
71109: PPUSH
71110: CALL_OW 12
71114: ARRAY
71115: ST_TO_ADDR
// if Crawls ( un ) then
71116: LD_VAR 0 2
71120: PPUSH
71121: CALL_OW 318
71125: IFFALSE 71136
// ComWalk ( un ) ;
71127: LD_VAR 0 2
71131: PPUSH
71132: CALL_OW 138
// SetClass ( un , class_sniper ) ;
71136: LD_VAR 0 2
71140: PPUSH
71141: LD_INT 5
71143: PPUSH
71144: CALL_OW 336
// end ;
71148: PPOPN 3
71150: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
71151: LD_EXP 78
71155: PUSH
71156: LD_EXP 96
71160: AND
71161: PUSH
71162: LD_OWVAR 67
71166: PUSH
71167: LD_INT 3
71169: LESS
71170: AND
71171: IFFALSE 71190
71173: GO 71175
71175: DISABLE
// Difficulty := Difficulty + 1 ;
71176: LD_ADDR_OWVAR 67
71180: PUSH
71181: LD_OWVAR 67
71185: PUSH
71186: LD_INT 1
71188: PLUS
71189: ST_TO_ADDR
71190: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
71191: LD_EXP 78
71195: PUSH
71196: LD_EXP 97
71200: AND
71201: IFFALSE 71304
71203: GO 71205
71205: DISABLE
71206: LD_INT 0
71208: PPUSH
// begin for i := 1 to 5 do
71209: LD_ADDR_VAR 0 1
71213: PUSH
71214: DOUBLE
71215: LD_INT 1
71217: DEC
71218: ST_TO_ADDR
71219: LD_INT 5
71221: PUSH
71222: FOR_TO
71223: IFFALSE 71302
// begin uc_nation := nation_nature ;
71225: LD_ADDR_OWVAR 21
71229: PUSH
71230: LD_INT 0
71232: ST_TO_ADDR
// uc_side := 0 ;
71233: LD_ADDR_OWVAR 20
71237: PUSH
71238: LD_INT 0
71240: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
71241: LD_ADDR_OWVAR 29
71245: PUSH
71246: LD_INT 12
71248: PUSH
71249: LD_INT 12
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: ST_TO_ADDR
// hc_agressivity := 20 ;
71256: LD_ADDR_OWVAR 35
71260: PUSH
71261: LD_INT 20
71263: ST_TO_ADDR
// hc_class := class_tiger ;
71264: LD_ADDR_OWVAR 28
71268: PUSH
71269: LD_INT 14
71271: ST_TO_ADDR
// hc_gallery :=  ;
71272: LD_ADDR_OWVAR 33
71276: PUSH
71277: LD_STRING 
71279: ST_TO_ADDR
// hc_name :=  ;
71280: LD_ADDR_OWVAR 26
71284: PUSH
71285: LD_STRING 
71287: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
71288: CALL_OW 44
71292: PPUSH
71293: LD_INT 0
71295: PPUSH
71296: CALL_OW 51
// end ;
71300: GO 71222
71302: POP
71303: POP
// end ;
71304: PPOPN 1
71306: END
// every 0 0$1 trigger StreamModeActive and sBomb do
71307: LD_EXP 78
71311: PUSH
71312: LD_EXP 98
71316: AND
71317: IFFALSE 71326
71319: GO 71321
71321: DISABLE
// StreamSibBomb ;
71322: CALL 71327 0 0
71326: END
// export function StreamSibBomb ; var i , x , y ; begin
71327: LD_INT 0
71329: PPUSH
71330: PPUSH
71331: PPUSH
71332: PPUSH
// result := false ;
71333: LD_ADDR_VAR 0 1
71337: PUSH
71338: LD_INT 0
71340: ST_TO_ADDR
// for i := 1 to 16 do
71341: LD_ADDR_VAR 0 2
71345: PUSH
71346: DOUBLE
71347: LD_INT 1
71349: DEC
71350: ST_TO_ADDR
71351: LD_INT 16
71353: PUSH
71354: FOR_TO
71355: IFFALSE 71554
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
71357: LD_ADDR_VAR 0 3
71361: PUSH
71362: LD_INT 10
71364: PUSH
71365: LD_INT 20
71367: PUSH
71368: LD_INT 30
71370: PUSH
71371: LD_INT 40
71373: PUSH
71374: LD_INT 50
71376: PUSH
71377: LD_INT 60
71379: PUSH
71380: LD_INT 70
71382: PUSH
71383: LD_INT 80
71385: PUSH
71386: LD_INT 90
71388: PUSH
71389: LD_INT 100
71391: PUSH
71392: LD_INT 110
71394: PUSH
71395: LD_INT 120
71397: PUSH
71398: LD_INT 130
71400: PUSH
71401: LD_INT 140
71403: PUSH
71404: LD_INT 150
71406: PUSH
71407: EMPTY
71408: LIST
71409: LIST
71410: LIST
71411: LIST
71412: LIST
71413: LIST
71414: LIST
71415: LIST
71416: LIST
71417: LIST
71418: LIST
71419: LIST
71420: LIST
71421: LIST
71422: LIST
71423: PUSH
71424: LD_INT 1
71426: PPUSH
71427: LD_INT 15
71429: PPUSH
71430: CALL_OW 12
71434: ARRAY
71435: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
71436: LD_ADDR_VAR 0 4
71440: PUSH
71441: LD_INT 10
71443: PUSH
71444: LD_INT 20
71446: PUSH
71447: LD_INT 30
71449: PUSH
71450: LD_INT 40
71452: PUSH
71453: LD_INT 50
71455: PUSH
71456: LD_INT 60
71458: PUSH
71459: LD_INT 70
71461: PUSH
71462: LD_INT 80
71464: PUSH
71465: LD_INT 90
71467: PUSH
71468: LD_INT 100
71470: PUSH
71471: LD_INT 110
71473: PUSH
71474: LD_INT 120
71476: PUSH
71477: LD_INT 130
71479: PUSH
71480: LD_INT 140
71482: PUSH
71483: LD_INT 150
71485: PUSH
71486: EMPTY
71487: LIST
71488: LIST
71489: LIST
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: LIST
71496: LIST
71497: LIST
71498: LIST
71499: LIST
71500: LIST
71501: LIST
71502: PUSH
71503: LD_INT 1
71505: PPUSH
71506: LD_INT 15
71508: PPUSH
71509: CALL_OW 12
71513: ARRAY
71514: ST_TO_ADDR
// if ValidHex ( x , y ) then
71515: LD_VAR 0 3
71519: PPUSH
71520: LD_VAR 0 4
71524: PPUSH
71525: CALL_OW 488
71529: IFFALSE 71552
// begin result := [ x , y ] ;
71531: LD_ADDR_VAR 0 1
71535: PUSH
71536: LD_VAR 0 3
71540: PUSH
71541: LD_VAR 0 4
71545: PUSH
71546: EMPTY
71547: LIST
71548: LIST
71549: ST_TO_ADDR
// break ;
71550: GO 71554
// end ; end ;
71552: GO 71354
71554: POP
71555: POP
// if result then
71556: LD_VAR 0 1
71560: IFFALSE 71620
// begin ToLua ( playSibBomb() ) ;
71562: LD_STRING playSibBomb()
71564: PPUSH
71565: CALL_OW 559
// wait ( 0 0$14 ) ;
71569: LD_INT 490
71571: PPUSH
71572: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
71576: LD_VAR 0 1
71580: PUSH
71581: LD_INT 1
71583: ARRAY
71584: PPUSH
71585: LD_VAR 0 1
71589: PUSH
71590: LD_INT 2
71592: ARRAY
71593: PPUSH
71594: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
71598: LD_VAR 0 1
71602: PUSH
71603: LD_INT 1
71605: ARRAY
71606: PPUSH
71607: LD_VAR 0 1
71611: PUSH
71612: LD_INT 2
71614: ARRAY
71615: PPUSH
71616: CALL_OW 429
// end ; end ;
71620: LD_VAR 0 1
71624: RET
// every 0 0$1 trigger StreamModeActive and sReset do
71625: LD_EXP 78
71629: PUSH
71630: LD_EXP 100
71634: AND
71635: IFFALSE 71647
71637: GO 71639
71639: DISABLE
// YouLost (  ) ;
71640: LD_STRING 
71642: PPUSH
71643: CALL_OW 104
71647: END
// every 0 0$1 trigger StreamModeActive and sFog do
71648: LD_EXP 78
71652: PUSH
71653: LD_EXP 99
71657: AND
71658: IFFALSE 71672
71660: GO 71662
71662: DISABLE
// FogOff ( your_side ) ;
71663: LD_OWVAR 2
71667: PPUSH
71668: CALL_OW 344
71672: END
// every 0 0$1 trigger StreamModeActive and sSun do
71673: LD_EXP 78
71677: PUSH
71678: LD_EXP 101
71682: AND
71683: IFFALSE 71711
71685: GO 71687
71687: DISABLE
// begin solar_recharge_percent := 0 ;
71688: LD_ADDR_OWVAR 79
71692: PUSH
71693: LD_INT 0
71695: ST_TO_ADDR
// wait ( 5 5$00 ) ;
71696: LD_INT 10500
71698: PPUSH
71699: CALL_OW 67
// solar_recharge_percent := 100 ;
71703: LD_ADDR_OWVAR 79
71707: PUSH
71708: LD_INT 100
71710: ST_TO_ADDR
// end ;
71711: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
71712: LD_EXP 78
71716: PUSH
71717: LD_EXP 102
71721: AND
71722: IFFALSE 71961
71724: GO 71726
71726: DISABLE
71727: LD_INT 0
71729: PPUSH
71730: PPUSH
71731: PPUSH
// begin tmp := [ ] ;
71732: LD_ADDR_VAR 0 3
71736: PUSH
71737: EMPTY
71738: ST_TO_ADDR
// for i := 1 to 6 do
71739: LD_ADDR_VAR 0 1
71743: PUSH
71744: DOUBLE
71745: LD_INT 1
71747: DEC
71748: ST_TO_ADDR
71749: LD_INT 6
71751: PUSH
71752: FOR_TO
71753: IFFALSE 71858
// begin uc_nation := nation_nature ;
71755: LD_ADDR_OWVAR 21
71759: PUSH
71760: LD_INT 0
71762: ST_TO_ADDR
// uc_side := 0 ;
71763: LD_ADDR_OWVAR 20
71767: PUSH
71768: LD_INT 0
71770: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
71771: LD_ADDR_OWVAR 29
71775: PUSH
71776: LD_INT 12
71778: PUSH
71779: LD_INT 12
71781: PUSH
71782: EMPTY
71783: LIST
71784: LIST
71785: ST_TO_ADDR
// hc_agressivity := 20 ;
71786: LD_ADDR_OWVAR 35
71790: PUSH
71791: LD_INT 20
71793: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
71794: LD_ADDR_OWVAR 28
71798: PUSH
71799: LD_INT 17
71801: ST_TO_ADDR
// hc_gallery :=  ;
71802: LD_ADDR_OWVAR 33
71806: PUSH
71807: LD_STRING 
71809: ST_TO_ADDR
// hc_name :=  ;
71810: LD_ADDR_OWVAR 26
71814: PUSH
71815: LD_STRING 
71817: ST_TO_ADDR
// un := CreateHuman ;
71818: LD_ADDR_VAR 0 2
71822: PUSH
71823: CALL_OW 44
71827: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
71828: LD_VAR 0 2
71832: PPUSH
71833: LD_INT 1
71835: PPUSH
71836: CALL_OW 51
// tmp := tmp ^ un ;
71840: LD_ADDR_VAR 0 3
71844: PUSH
71845: LD_VAR 0 3
71849: PUSH
71850: LD_VAR 0 2
71854: ADD
71855: ST_TO_ADDR
// end ;
71856: GO 71752
71858: POP
71859: POP
// repeat wait ( 0 0$1 ) ;
71860: LD_INT 35
71862: PPUSH
71863: CALL_OW 67
// for un in tmp do
71867: LD_ADDR_VAR 0 2
71871: PUSH
71872: LD_VAR 0 3
71876: PUSH
71877: FOR_IN
71878: IFFALSE 71952
// begin if IsDead ( un ) then
71880: LD_VAR 0 2
71884: PPUSH
71885: CALL_OW 301
71889: IFFALSE 71909
// begin tmp := tmp diff un ;
71891: LD_ADDR_VAR 0 3
71895: PUSH
71896: LD_VAR 0 3
71900: PUSH
71901: LD_VAR 0 2
71905: DIFF
71906: ST_TO_ADDR
// continue ;
71907: GO 71877
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
71909: LD_VAR 0 2
71913: PPUSH
71914: LD_INT 3
71916: PUSH
71917: LD_INT 22
71919: PUSH
71920: LD_INT 0
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: PUSH
71927: EMPTY
71928: LIST
71929: LIST
71930: PPUSH
71931: CALL_OW 69
71935: PPUSH
71936: LD_VAR 0 2
71940: PPUSH
71941: CALL_OW 74
71945: PPUSH
71946: CALL_OW 115
// end ;
71950: GO 71877
71952: POP
71953: POP
// until not tmp ;
71954: LD_VAR 0 3
71958: NOT
71959: IFFALSE 71860
// end ;
71961: PPOPN 3
71963: END
// every 0 0$1 trigger StreamModeActive and sTroll do
71964: LD_EXP 78
71968: PUSH
71969: LD_EXP 103
71973: AND
71974: IFFALSE 72028
71976: GO 71978
71978: DISABLE
// begin ToLua ( displayTroll(); ) ;
71979: LD_STRING displayTroll();
71981: PPUSH
71982: CALL_OW 559
// wait ( 3 3$00 ) ;
71986: LD_INT 6300
71988: PPUSH
71989: CALL_OW 67
// ToLua ( hideTroll(); ) ;
71993: LD_STRING hideTroll();
71995: PPUSH
71996: CALL_OW 559
// wait ( 1 1$00 ) ;
72000: LD_INT 2100
72002: PPUSH
72003: CALL_OW 67
// ToLua ( displayTroll(); ) ;
72007: LD_STRING displayTroll();
72009: PPUSH
72010: CALL_OW 559
// wait ( 1 1$00 ) ;
72014: LD_INT 2100
72016: PPUSH
72017: CALL_OW 67
// ToLua ( hideTroll(); ) ;
72021: LD_STRING hideTroll();
72023: PPUSH
72024: CALL_OW 559
// end ;
72028: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
72029: LD_EXP 78
72033: PUSH
72034: LD_EXP 104
72038: AND
72039: IFFALSE 72102
72041: GO 72043
72043: DISABLE
72044: LD_INT 0
72046: PPUSH
// begin p := 0 ;
72047: LD_ADDR_VAR 0 1
72051: PUSH
72052: LD_INT 0
72054: ST_TO_ADDR
// repeat game_speed := 1 ;
72055: LD_ADDR_OWVAR 65
72059: PUSH
72060: LD_INT 1
72062: ST_TO_ADDR
// wait ( 0 0$1 ) ;
72063: LD_INT 35
72065: PPUSH
72066: CALL_OW 67
// p := p + 1 ;
72070: LD_ADDR_VAR 0 1
72074: PUSH
72075: LD_VAR 0 1
72079: PUSH
72080: LD_INT 1
72082: PLUS
72083: ST_TO_ADDR
// until p >= 60 ;
72084: LD_VAR 0 1
72088: PUSH
72089: LD_INT 60
72091: GREATEREQUAL
72092: IFFALSE 72055
// game_speed := 4 ;
72094: LD_ADDR_OWVAR 65
72098: PUSH
72099: LD_INT 4
72101: ST_TO_ADDR
// end ;
72102: PPOPN 1
72104: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
72105: LD_EXP 78
72109: PUSH
72110: LD_EXP 105
72114: AND
72115: IFFALSE 72261
72117: GO 72119
72119: DISABLE
72120: LD_INT 0
72122: PPUSH
72123: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72124: LD_ADDR_VAR 0 1
72128: PUSH
72129: LD_INT 22
72131: PUSH
72132: LD_OWVAR 2
72136: PUSH
72137: EMPTY
72138: LIST
72139: LIST
72140: PUSH
72141: LD_INT 2
72143: PUSH
72144: LD_INT 30
72146: PUSH
72147: LD_INT 0
72149: PUSH
72150: EMPTY
72151: LIST
72152: LIST
72153: PUSH
72154: LD_INT 30
72156: PUSH
72157: LD_INT 1
72159: PUSH
72160: EMPTY
72161: LIST
72162: LIST
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: LIST
72168: PUSH
72169: EMPTY
72170: LIST
72171: LIST
72172: PPUSH
72173: CALL_OW 69
72177: ST_TO_ADDR
// if not depot then
72178: LD_VAR 0 1
72182: NOT
72183: IFFALSE 72187
// exit ;
72185: GO 72261
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
72187: LD_ADDR_VAR 0 2
72191: PUSH
72192: LD_VAR 0 1
72196: PUSH
72197: LD_INT 1
72199: PPUSH
72200: LD_VAR 0 1
72204: PPUSH
72205: CALL_OW 12
72209: ARRAY
72210: PPUSH
72211: CALL_OW 274
72215: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
72216: LD_VAR 0 2
72220: PPUSH
72221: LD_INT 1
72223: PPUSH
72224: LD_INT 0
72226: PPUSH
72227: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
72231: LD_VAR 0 2
72235: PPUSH
72236: LD_INT 2
72238: PPUSH
72239: LD_INT 0
72241: PPUSH
72242: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
72246: LD_VAR 0 2
72250: PPUSH
72251: LD_INT 3
72253: PPUSH
72254: LD_INT 0
72256: PPUSH
72257: CALL_OW 277
// end ;
72261: PPOPN 2
72263: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
72264: LD_EXP 78
72268: PUSH
72269: LD_EXP 106
72273: AND
72274: IFFALSE 72371
72276: GO 72278
72278: DISABLE
72279: LD_INT 0
72281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72282: LD_ADDR_VAR 0 1
72286: PUSH
72287: LD_INT 22
72289: PUSH
72290: LD_OWVAR 2
72294: PUSH
72295: EMPTY
72296: LIST
72297: LIST
72298: PUSH
72299: LD_INT 21
72301: PUSH
72302: LD_INT 1
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: PUSH
72309: LD_INT 3
72311: PUSH
72312: LD_INT 23
72314: PUSH
72315: LD_INT 0
72317: PUSH
72318: EMPTY
72319: LIST
72320: LIST
72321: PUSH
72322: EMPTY
72323: LIST
72324: LIST
72325: PUSH
72326: EMPTY
72327: LIST
72328: LIST
72329: LIST
72330: PPUSH
72331: CALL_OW 69
72335: ST_TO_ADDR
// if not tmp then
72336: LD_VAR 0 1
72340: NOT
72341: IFFALSE 72345
// exit ;
72343: GO 72371
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
72345: LD_VAR 0 1
72349: PUSH
72350: LD_INT 1
72352: PPUSH
72353: LD_VAR 0 1
72357: PPUSH
72358: CALL_OW 12
72362: ARRAY
72363: PPUSH
72364: LD_INT 200
72366: PPUSH
72367: CALL_OW 234
// end ;
72371: PPOPN 1
72373: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
72374: LD_EXP 78
72378: PUSH
72379: LD_EXP 107
72383: AND
72384: IFFALSE 72463
72386: GO 72388
72388: DISABLE
72389: LD_INT 0
72391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
72392: LD_ADDR_VAR 0 1
72396: PUSH
72397: LD_INT 22
72399: PUSH
72400: LD_OWVAR 2
72404: PUSH
72405: EMPTY
72406: LIST
72407: LIST
72408: PUSH
72409: LD_INT 21
72411: PUSH
72412: LD_INT 2
72414: PUSH
72415: EMPTY
72416: LIST
72417: LIST
72418: PUSH
72419: EMPTY
72420: LIST
72421: LIST
72422: PPUSH
72423: CALL_OW 69
72427: ST_TO_ADDR
// if not tmp then
72428: LD_VAR 0 1
72432: NOT
72433: IFFALSE 72437
// exit ;
72435: GO 72463
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
72437: LD_VAR 0 1
72441: PUSH
72442: LD_INT 1
72444: PPUSH
72445: LD_VAR 0 1
72449: PPUSH
72450: CALL_OW 12
72454: ARRAY
72455: PPUSH
72456: LD_INT 60
72458: PPUSH
72459: CALL_OW 234
// end ;
72463: PPOPN 1
72465: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
72466: LD_EXP 78
72470: PUSH
72471: LD_EXP 108
72475: AND
72476: IFFALSE 72575
72478: GO 72480
72480: DISABLE
72481: LD_INT 0
72483: PPUSH
72484: PPUSH
// begin enable ;
72485: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
72486: LD_ADDR_VAR 0 1
72490: PUSH
72491: LD_INT 22
72493: PUSH
72494: LD_OWVAR 2
72498: PUSH
72499: EMPTY
72500: LIST
72501: LIST
72502: PUSH
72503: LD_INT 61
72505: PUSH
72506: EMPTY
72507: LIST
72508: PUSH
72509: LD_INT 33
72511: PUSH
72512: LD_INT 2
72514: PUSH
72515: EMPTY
72516: LIST
72517: LIST
72518: PUSH
72519: EMPTY
72520: LIST
72521: LIST
72522: LIST
72523: PPUSH
72524: CALL_OW 69
72528: ST_TO_ADDR
// if not tmp then
72529: LD_VAR 0 1
72533: NOT
72534: IFFALSE 72538
// exit ;
72536: GO 72575
// for i in tmp do
72538: LD_ADDR_VAR 0 2
72542: PUSH
72543: LD_VAR 0 1
72547: PUSH
72548: FOR_IN
72549: IFFALSE 72573
// if IsControledBy ( i ) then
72551: LD_VAR 0 2
72555: PPUSH
72556: CALL_OW 312
72560: IFFALSE 72571
// ComUnlink ( i ) ;
72562: LD_VAR 0 2
72566: PPUSH
72567: CALL_OW 136
72571: GO 72548
72573: POP
72574: POP
// end ;
72575: PPOPN 2
72577: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
72578: LD_EXP 78
72582: PUSH
72583: LD_EXP 109
72587: AND
72588: IFFALSE 72728
72590: GO 72592
72592: DISABLE
72593: LD_INT 0
72595: PPUSH
72596: PPUSH
// begin ToLua ( displayPowell(); ) ;
72597: LD_STRING displayPowell();
72599: PPUSH
72600: CALL_OW 559
// uc_side := 0 ;
72604: LD_ADDR_OWVAR 20
72608: PUSH
72609: LD_INT 0
72611: ST_TO_ADDR
// uc_nation := 2 ;
72612: LD_ADDR_OWVAR 21
72616: PUSH
72617: LD_INT 2
72619: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
72620: LD_ADDR_OWVAR 37
72624: PUSH
72625: LD_INT 14
72627: ST_TO_ADDR
// vc_engine := engine_siberite ;
72628: LD_ADDR_OWVAR 39
72632: PUSH
72633: LD_INT 3
72635: ST_TO_ADDR
// vc_control := control_apeman ;
72636: LD_ADDR_OWVAR 38
72640: PUSH
72641: LD_INT 5
72643: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
72644: LD_ADDR_OWVAR 40
72648: PUSH
72649: LD_INT 29
72651: ST_TO_ADDR
// un := CreateVehicle ;
72652: LD_ADDR_VAR 0 2
72656: PUSH
72657: CALL_OW 45
72661: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
72662: LD_VAR 0 2
72666: PPUSH
72667: LD_INT 1
72669: PPUSH
72670: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
72674: LD_INT 35
72676: PPUSH
72677: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
72681: LD_VAR 0 2
72685: PPUSH
72686: LD_INT 22
72688: PUSH
72689: LD_OWVAR 2
72693: PUSH
72694: EMPTY
72695: LIST
72696: LIST
72697: PPUSH
72698: CALL_OW 69
72702: PPUSH
72703: LD_VAR 0 2
72707: PPUSH
72708: CALL_OW 74
72712: PPUSH
72713: CALL_OW 115
// until IsDead ( un ) ;
72717: LD_VAR 0 2
72721: PPUSH
72722: CALL_OW 301
72726: IFFALSE 72674
// end ;
72728: PPOPN 2
72730: END
// every 0 0$1 trigger StreamModeActive and sStu do
72731: LD_EXP 78
72735: PUSH
72736: LD_EXP 117
72740: AND
72741: IFFALSE 72757
72743: GO 72745
72745: DISABLE
// begin ToLua ( displayStucuk(); ) ;
72746: LD_STRING displayStucuk();
72748: PPUSH
72749: CALL_OW 559
// ResetFog ;
72753: CALL_OW 335
// end ;
72757: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
72758: LD_EXP 78
72762: PUSH
72763: LD_EXP 110
72767: AND
72768: IFFALSE 72909
72770: GO 72772
72772: DISABLE
72773: LD_INT 0
72775: PPUSH
72776: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
72777: LD_ADDR_VAR 0 2
72781: PUSH
72782: LD_INT 22
72784: PUSH
72785: LD_OWVAR 2
72789: PUSH
72790: EMPTY
72791: LIST
72792: LIST
72793: PUSH
72794: LD_INT 21
72796: PUSH
72797: LD_INT 1
72799: PUSH
72800: EMPTY
72801: LIST
72802: LIST
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: PPUSH
72808: CALL_OW 69
72812: ST_TO_ADDR
// if not tmp then
72813: LD_VAR 0 2
72817: NOT
72818: IFFALSE 72822
// exit ;
72820: GO 72909
// un := tmp [ rand ( 1 , tmp ) ] ;
72822: LD_ADDR_VAR 0 1
72826: PUSH
72827: LD_VAR 0 2
72831: PUSH
72832: LD_INT 1
72834: PPUSH
72835: LD_VAR 0 2
72839: PPUSH
72840: CALL_OW 12
72844: ARRAY
72845: ST_TO_ADDR
// SetSide ( un , 0 ) ;
72846: LD_VAR 0 1
72850: PPUSH
72851: LD_INT 0
72853: PPUSH
72854: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
72858: LD_VAR 0 1
72862: PPUSH
72863: LD_OWVAR 3
72867: PUSH
72868: LD_VAR 0 1
72872: DIFF
72873: PPUSH
72874: LD_VAR 0 1
72878: PPUSH
72879: CALL_OW 74
72883: PPUSH
72884: CALL_OW 115
// wait ( 0 0$20 ) ;
72888: LD_INT 700
72890: PPUSH
72891: CALL_OW 67
// SetSide ( un , your_side ) ;
72895: LD_VAR 0 1
72899: PPUSH
72900: LD_OWVAR 2
72904: PPUSH
72905: CALL_OW 235
// end ;
72909: PPOPN 2
72911: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
72912: LD_EXP 78
72916: PUSH
72917: LD_EXP 111
72921: AND
72922: IFFALSE 73028
72924: GO 72926
72926: DISABLE
72927: LD_INT 0
72929: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72930: LD_ADDR_VAR 0 1
72934: PUSH
72935: LD_INT 22
72937: PUSH
72938: LD_OWVAR 2
72942: PUSH
72943: EMPTY
72944: LIST
72945: LIST
72946: PUSH
72947: LD_INT 2
72949: PUSH
72950: LD_INT 30
72952: PUSH
72953: LD_INT 0
72955: PUSH
72956: EMPTY
72957: LIST
72958: LIST
72959: PUSH
72960: LD_INT 30
72962: PUSH
72963: LD_INT 1
72965: PUSH
72966: EMPTY
72967: LIST
72968: LIST
72969: PUSH
72970: EMPTY
72971: LIST
72972: LIST
72973: LIST
72974: PUSH
72975: EMPTY
72976: LIST
72977: LIST
72978: PPUSH
72979: CALL_OW 69
72983: ST_TO_ADDR
// if not depot then
72984: LD_VAR 0 1
72988: NOT
72989: IFFALSE 72993
// exit ;
72991: GO 73028
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
72993: LD_VAR 0 1
72997: PUSH
72998: LD_INT 1
73000: ARRAY
73001: PPUSH
73002: CALL_OW 250
73006: PPUSH
73007: LD_VAR 0 1
73011: PUSH
73012: LD_INT 1
73014: ARRAY
73015: PPUSH
73016: CALL_OW 251
73020: PPUSH
73021: LD_INT 70
73023: PPUSH
73024: CALL_OW 495
// end ;
73028: PPOPN 1
73030: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
73031: LD_EXP 78
73035: PUSH
73036: LD_EXP 112
73040: AND
73041: IFFALSE 73252
73043: GO 73045
73045: DISABLE
73046: LD_INT 0
73048: PPUSH
73049: PPUSH
73050: PPUSH
73051: PPUSH
73052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73053: LD_ADDR_VAR 0 5
73057: PUSH
73058: LD_INT 22
73060: PUSH
73061: LD_OWVAR 2
73065: PUSH
73066: EMPTY
73067: LIST
73068: LIST
73069: PUSH
73070: LD_INT 21
73072: PUSH
73073: LD_INT 1
73075: PUSH
73076: EMPTY
73077: LIST
73078: LIST
73079: PUSH
73080: EMPTY
73081: LIST
73082: LIST
73083: PPUSH
73084: CALL_OW 69
73088: ST_TO_ADDR
// if not tmp then
73089: LD_VAR 0 5
73093: NOT
73094: IFFALSE 73098
// exit ;
73096: GO 73252
// for i in tmp do
73098: LD_ADDR_VAR 0 1
73102: PUSH
73103: LD_VAR 0 5
73107: PUSH
73108: FOR_IN
73109: IFFALSE 73250
// begin d := rand ( 0 , 5 ) ;
73111: LD_ADDR_VAR 0 4
73115: PUSH
73116: LD_INT 0
73118: PPUSH
73119: LD_INT 5
73121: PPUSH
73122: CALL_OW 12
73126: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
73127: LD_ADDR_VAR 0 2
73131: PUSH
73132: LD_VAR 0 1
73136: PPUSH
73137: CALL_OW 250
73141: PPUSH
73142: LD_VAR 0 4
73146: PPUSH
73147: LD_INT 3
73149: PPUSH
73150: LD_INT 12
73152: PPUSH
73153: CALL_OW 12
73157: PPUSH
73158: CALL_OW 272
73162: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
73163: LD_ADDR_VAR 0 3
73167: PUSH
73168: LD_VAR 0 1
73172: PPUSH
73173: CALL_OW 251
73177: PPUSH
73178: LD_VAR 0 4
73182: PPUSH
73183: LD_INT 3
73185: PPUSH
73186: LD_INT 12
73188: PPUSH
73189: CALL_OW 12
73193: PPUSH
73194: CALL_OW 273
73198: ST_TO_ADDR
// if ValidHex ( x , y ) then
73199: LD_VAR 0 2
73203: PPUSH
73204: LD_VAR 0 3
73208: PPUSH
73209: CALL_OW 488
73213: IFFALSE 73248
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
73215: LD_VAR 0 1
73219: PPUSH
73220: LD_VAR 0 2
73224: PPUSH
73225: LD_VAR 0 3
73229: PPUSH
73230: LD_INT 3
73232: PPUSH
73233: LD_INT 6
73235: PPUSH
73236: CALL_OW 12
73240: PPUSH
73241: LD_INT 1
73243: PPUSH
73244: CALL_OW 483
// end ;
73248: GO 73108
73250: POP
73251: POP
// end ;
73252: PPOPN 5
73254: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
73255: LD_EXP 78
73259: PUSH
73260: LD_EXP 113
73264: AND
73265: IFFALSE 73359
73267: GO 73269
73269: DISABLE
73270: LD_INT 0
73272: PPUSH
73273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
73274: LD_ADDR_VAR 0 2
73278: PUSH
73279: LD_INT 22
73281: PUSH
73282: LD_OWVAR 2
73286: PUSH
73287: EMPTY
73288: LIST
73289: LIST
73290: PUSH
73291: LD_INT 32
73293: PUSH
73294: LD_INT 1
73296: PUSH
73297: EMPTY
73298: LIST
73299: LIST
73300: PUSH
73301: LD_INT 21
73303: PUSH
73304: LD_INT 2
73306: PUSH
73307: EMPTY
73308: LIST
73309: LIST
73310: PUSH
73311: EMPTY
73312: LIST
73313: LIST
73314: LIST
73315: PPUSH
73316: CALL_OW 69
73320: ST_TO_ADDR
// if not tmp then
73321: LD_VAR 0 2
73325: NOT
73326: IFFALSE 73330
// exit ;
73328: GO 73359
// for i in tmp do
73330: LD_ADDR_VAR 0 1
73334: PUSH
73335: LD_VAR 0 2
73339: PUSH
73340: FOR_IN
73341: IFFALSE 73357
// SetFuel ( i , 0 ) ;
73343: LD_VAR 0 1
73347: PPUSH
73348: LD_INT 0
73350: PPUSH
73351: CALL_OW 240
73355: GO 73340
73357: POP
73358: POP
// end ;
73359: PPOPN 2
73361: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
73362: LD_EXP 78
73366: PUSH
73367: LD_EXP 114
73371: AND
73372: IFFALSE 73438
73374: GO 73376
73376: DISABLE
73377: LD_INT 0
73379: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
73380: LD_ADDR_VAR 0 1
73384: PUSH
73385: LD_INT 22
73387: PUSH
73388: LD_OWVAR 2
73392: PUSH
73393: EMPTY
73394: LIST
73395: LIST
73396: PUSH
73397: LD_INT 30
73399: PUSH
73400: LD_INT 29
73402: PUSH
73403: EMPTY
73404: LIST
73405: LIST
73406: PUSH
73407: EMPTY
73408: LIST
73409: LIST
73410: PPUSH
73411: CALL_OW 69
73415: ST_TO_ADDR
// if not tmp then
73416: LD_VAR 0 1
73420: NOT
73421: IFFALSE 73425
// exit ;
73423: GO 73438
// DestroyUnit ( tmp [ 1 ] ) ;
73425: LD_VAR 0 1
73429: PUSH
73430: LD_INT 1
73432: ARRAY
73433: PPUSH
73434: CALL_OW 65
// end ;
73438: PPOPN 1
73440: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
73441: LD_EXP 78
73445: PUSH
73446: LD_EXP 116
73450: AND
73451: IFFALSE 73580
73453: GO 73455
73455: DISABLE
73456: LD_INT 0
73458: PPUSH
// begin uc_side := 0 ;
73459: LD_ADDR_OWVAR 20
73463: PUSH
73464: LD_INT 0
73466: ST_TO_ADDR
// uc_nation := nation_arabian ;
73467: LD_ADDR_OWVAR 21
73471: PUSH
73472: LD_INT 2
73474: ST_TO_ADDR
// hc_gallery :=  ;
73475: LD_ADDR_OWVAR 33
73479: PUSH
73480: LD_STRING 
73482: ST_TO_ADDR
// hc_name :=  ;
73483: LD_ADDR_OWVAR 26
73487: PUSH
73488: LD_STRING 
73490: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
73491: LD_INT 1
73493: PPUSH
73494: LD_INT 11
73496: PPUSH
73497: LD_INT 10
73499: PPUSH
73500: CALL_OW 380
// un := CreateHuman ;
73504: LD_ADDR_VAR 0 1
73508: PUSH
73509: CALL_OW 44
73513: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73514: LD_VAR 0 1
73518: PPUSH
73519: LD_INT 1
73521: PPUSH
73522: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
73526: LD_INT 35
73528: PPUSH
73529: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
73533: LD_VAR 0 1
73537: PPUSH
73538: LD_INT 22
73540: PUSH
73541: LD_OWVAR 2
73545: PUSH
73546: EMPTY
73547: LIST
73548: LIST
73549: PPUSH
73550: CALL_OW 69
73554: PPUSH
73555: LD_VAR 0 1
73559: PPUSH
73560: CALL_OW 74
73564: PPUSH
73565: CALL_OW 115
// until IsDead ( un ) ;
73569: LD_VAR 0 1
73573: PPUSH
73574: CALL_OW 301
73578: IFFALSE 73526
// end ;
73580: PPOPN 1
73582: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
73583: LD_EXP 78
73587: PUSH
73588: LD_EXP 118
73592: AND
73593: IFFALSE 73605
73595: GO 73597
73597: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
73598: LD_STRING earthquake(getX(game), 0, 32)
73600: PPUSH
73601: CALL_OW 559
73605: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
73606: LD_EXP 78
73610: PUSH
73611: LD_EXP 119
73615: AND
73616: IFFALSE 73707
73618: GO 73620
73620: DISABLE
73621: LD_INT 0
73623: PPUSH
// begin enable ;
73624: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
73625: LD_ADDR_VAR 0 1
73629: PUSH
73630: LD_INT 22
73632: PUSH
73633: LD_OWVAR 2
73637: PUSH
73638: EMPTY
73639: LIST
73640: LIST
73641: PUSH
73642: LD_INT 21
73644: PUSH
73645: LD_INT 2
73647: PUSH
73648: EMPTY
73649: LIST
73650: LIST
73651: PUSH
73652: LD_INT 33
73654: PUSH
73655: LD_INT 3
73657: PUSH
73658: EMPTY
73659: LIST
73660: LIST
73661: PUSH
73662: EMPTY
73663: LIST
73664: LIST
73665: LIST
73666: PPUSH
73667: CALL_OW 69
73671: ST_TO_ADDR
// if not tmp then
73672: LD_VAR 0 1
73676: NOT
73677: IFFALSE 73681
// exit ;
73679: GO 73707
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
73681: LD_VAR 0 1
73685: PUSH
73686: LD_INT 1
73688: PPUSH
73689: LD_VAR 0 1
73693: PPUSH
73694: CALL_OW 12
73698: ARRAY
73699: PPUSH
73700: LD_INT 1
73702: PPUSH
73703: CALL_OW 234
// end ;
73707: PPOPN 1
73709: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
73710: LD_EXP 78
73714: PUSH
73715: LD_EXP 120
73719: AND
73720: IFFALSE 73861
73722: GO 73724
73724: DISABLE
73725: LD_INT 0
73727: PPUSH
73728: PPUSH
73729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73730: LD_ADDR_VAR 0 3
73734: PUSH
73735: LD_INT 22
73737: PUSH
73738: LD_OWVAR 2
73742: PUSH
73743: EMPTY
73744: LIST
73745: LIST
73746: PUSH
73747: LD_INT 25
73749: PUSH
73750: LD_INT 1
73752: PUSH
73753: EMPTY
73754: LIST
73755: LIST
73756: PUSH
73757: EMPTY
73758: LIST
73759: LIST
73760: PPUSH
73761: CALL_OW 69
73765: ST_TO_ADDR
// if not tmp then
73766: LD_VAR 0 3
73770: NOT
73771: IFFALSE 73775
// exit ;
73773: GO 73861
// un := tmp [ rand ( 1 , tmp ) ] ;
73775: LD_ADDR_VAR 0 2
73779: PUSH
73780: LD_VAR 0 3
73784: PUSH
73785: LD_INT 1
73787: PPUSH
73788: LD_VAR 0 3
73792: PPUSH
73793: CALL_OW 12
73797: ARRAY
73798: ST_TO_ADDR
// if Crawls ( un ) then
73799: LD_VAR 0 2
73803: PPUSH
73804: CALL_OW 318
73808: IFFALSE 73819
// ComWalk ( un ) ;
73810: LD_VAR 0 2
73814: PPUSH
73815: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
73819: LD_VAR 0 2
73823: PPUSH
73824: LD_INT 9
73826: PPUSH
73827: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
73831: LD_INT 28
73833: PPUSH
73834: LD_OWVAR 2
73838: PPUSH
73839: LD_INT 2
73841: PPUSH
73842: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
73846: LD_INT 29
73848: PPUSH
73849: LD_OWVAR 2
73853: PPUSH
73854: LD_INT 2
73856: PPUSH
73857: CALL_OW 322
// end ;
73861: PPOPN 3
73863: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
73864: LD_EXP 78
73868: PUSH
73869: LD_EXP 121
73873: AND
73874: IFFALSE 73985
73876: GO 73878
73878: DISABLE
73879: LD_INT 0
73881: PPUSH
73882: PPUSH
73883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73884: LD_ADDR_VAR 0 3
73888: PUSH
73889: LD_INT 22
73891: PUSH
73892: LD_OWVAR 2
73896: PUSH
73897: EMPTY
73898: LIST
73899: LIST
73900: PUSH
73901: LD_INT 25
73903: PUSH
73904: LD_INT 1
73906: PUSH
73907: EMPTY
73908: LIST
73909: LIST
73910: PUSH
73911: EMPTY
73912: LIST
73913: LIST
73914: PPUSH
73915: CALL_OW 69
73919: ST_TO_ADDR
// if not tmp then
73920: LD_VAR 0 3
73924: NOT
73925: IFFALSE 73929
// exit ;
73927: GO 73985
// un := tmp [ rand ( 1 , tmp ) ] ;
73929: LD_ADDR_VAR 0 2
73933: PUSH
73934: LD_VAR 0 3
73938: PUSH
73939: LD_INT 1
73941: PPUSH
73942: LD_VAR 0 3
73946: PPUSH
73947: CALL_OW 12
73951: ARRAY
73952: ST_TO_ADDR
// if Crawls ( un ) then
73953: LD_VAR 0 2
73957: PPUSH
73958: CALL_OW 318
73962: IFFALSE 73973
// ComWalk ( un ) ;
73964: LD_VAR 0 2
73968: PPUSH
73969: CALL_OW 138
// SetClass ( un , class_mortar ) ;
73973: LD_VAR 0 2
73977: PPUSH
73978: LD_INT 8
73980: PPUSH
73981: CALL_OW 336
// end ;
73985: PPOPN 3
73987: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
73988: LD_EXP 78
73992: PUSH
73993: LD_EXP 122
73997: AND
73998: IFFALSE 74142
74000: GO 74002
74002: DISABLE
74003: LD_INT 0
74005: PPUSH
74006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
74007: LD_ADDR_VAR 0 2
74011: PUSH
74012: LD_INT 22
74014: PUSH
74015: LD_OWVAR 2
74019: PUSH
74020: EMPTY
74021: LIST
74022: LIST
74023: PUSH
74024: LD_INT 21
74026: PUSH
74027: LD_INT 2
74029: PUSH
74030: EMPTY
74031: LIST
74032: LIST
74033: PUSH
74034: LD_INT 2
74036: PUSH
74037: LD_INT 34
74039: PUSH
74040: LD_INT 12
74042: PUSH
74043: EMPTY
74044: LIST
74045: LIST
74046: PUSH
74047: LD_INT 34
74049: PUSH
74050: LD_INT 51
74052: PUSH
74053: EMPTY
74054: LIST
74055: LIST
74056: PUSH
74057: LD_INT 34
74059: PUSH
74060: LD_INT 32
74062: PUSH
74063: EMPTY
74064: LIST
74065: LIST
74066: PUSH
74067: EMPTY
74068: LIST
74069: LIST
74070: LIST
74071: LIST
74072: PUSH
74073: EMPTY
74074: LIST
74075: LIST
74076: LIST
74077: PPUSH
74078: CALL_OW 69
74082: ST_TO_ADDR
// if not tmp then
74083: LD_VAR 0 2
74087: NOT
74088: IFFALSE 74092
// exit ;
74090: GO 74142
// for i in tmp do
74092: LD_ADDR_VAR 0 1
74096: PUSH
74097: LD_VAR 0 2
74101: PUSH
74102: FOR_IN
74103: IFFALSE 74140
// if GetCargo ( i , mat_artifact ) = 0 then
74105: LD_VAR 0 1
74109: PPUSH
74110: LD_INT 4
74112: PPUSH
74113: CALL_OW 289
74117: PUSH
74118: LD_INT 0
74120: EQUAL
74121: IFFALSE 74138
// SetCargo ( i , mat_siberit , 100 ) ;
74123: LD_VAR 0 1
74127: PPUSH
74128: LD_INT 3
74130: PPUSH
74131: LD_INT 100
74133: PPUSH
74134: CALL_OW 290
74138: GO 74102
74140: POP
74141: POP
// end ;
74142: PPOPN 2
74144: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
74145: LD_EXP 78
74149: PUSH
74150: LD_EXP 123
74154: AND
74155: IFFALSE 74338
74157: GO 74159
74159: DISABLE
74160: LD_INT 0
74162: PPUSH
74163: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
74164: LD_ADDR_VAR 0 2
74168: PUSH
74169: LD_INT 22
74171: PUSH
74172: LD_OWVAR 2
74176: PUSH
74177: EMPTY
74178: LIST
74179: LIST
74180: PPUSH
74181: CALL_OW 69
74185: ST_TO_ADDR
// if not tmp then
74186: LD_VAR 0 2
74190: NOT
74191: IFFALSE 74195
// exit ;
74193: GO 74338
// for i := 1 to 2 do
74195: LD_ADDR_VAR 0 1
74199: PUSH
74200: DOUBLE
74201: LD_INT 1
74203: DEC
74204: ST_TO_ADDR
74205: LD_INT 2
74207: PUSH
74208: FOR_TO
74209: IFFALSE 74336
// begin uc_side := your_side ;
74211: LD_ADDR_OWVAR 20
74215: PUSH
74216: LD_OWVAR 2
74220: ST_TO_ADDR
// uc_nation := nation_american ;
74221: LD_ADDR_OWVAR 21
74225: PUSH
74226: LD_INT 1
74228: ST_TO_ADDR
// vc_chassis := us_morphling ;
74229: LD_ADDR_OWVAR 37
74233: PUSH
74234: LD_INT 5
74236: ST_TO_ADDR
// vc_engine := engine_siberite ;
74237: LD_ADDR_OWVAR 39
74241: PUSH
74242: LD_INT 3
74244: ST_TO_ADDR
// vc_control := control_computer ;
74245: LD_ADDR_OWVAR 38
74249: PUSH
74250: LD_INT 3
74252: ST_TO_ADDR
// vc_weapon := us_double_laser ;
74253: LD_ADDR_OWVAR 40
74257: PUSH
74258: LD_INT 10
74260: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
74261: LD_VAR 0 2
74265: PUSH
74266: LD_INT 1
74268: ARRAY
74269: PPUSH
74270: CALL_OW 310
74274: NOT
74275: IFFALSE 74322
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
74277: CALL_OW 45
74281: PPUSH
74282: LD_VAR 0 2
74286: PUSH
74287: LD_INT 1
74289: ARRAY
74290: PPUSH
74291: CALL_OW 250
74295: PPUSH
74296: LD_VAR 0 2
74300: PUSH
74301: LD_INT 1
74303: ARRAY
74304: PPUSH
74305: CALL_OW 251
74309: PPUSH
74310: LD_INT 12
74312: PPUSH
74313: LD_INT 1
74315: PPUSH
74316: CALL_OW 50
74320: GO 74334
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
74322: CALL_OW 45
74326: PPUSH
74327: LD_INT 1
74329: PPUSH
74330: CALL_OW 51
// end ;
74334: GO 74208
74336: POP
74337: POP
// end ;
74338: PPOPN 2
74340: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
74341: LD_EXP 78
74345: PUSH
74346: LD_EXP 124
74350: AND
74351: IFFALSE 74573
74353: GO 74355
74355: DISABLE
74356: LD_INT 0
74358: PPUSH
74359: PPUSH
74360: PPUSH
74361: PPUSH
74362: PPUSH
74363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
74364: LD_ADDR_VAR 0 6
74368: PUSH
74369: LD_INT 22
74371: PUSH
74372: LD_OWVAR 2
74376: PUSH
74377: EMPTY
74378: LIST
74379: LIST
74380: PUSH
74381: LD_INT 21
74383: PUSH
74384: LD_INT 1
74386: PUSH
74387: EMPTY
74388: LIST
74389: LIST
74390: PUSH
74391: LD_INT 3
74393: PUSH
74394: LD_INT 23
74396: PUSH
74397: LD_INT 0
74399: PUSH
74400: EMPTY
74401: LIST
74402: LIST
74403: PUSH
74404: EMPTY
74405: LIST
74406: LIST
74407: PUSH
74408: EMPTY
74409: LIST
74410: LIST
74411: LIST
74412: PPUSH
74413: CALL_OW 69
74417: ST_TO_ADDR
// if not tmp then
74418: LD_VAR 0 6
74422: NOT
74423: IFFALSE 74427
// exit ;
74425: GO 74573
// s1 := rand ( 1 , 4 ) ;
74427: LD_ADDR_VAR 0 2
74431: PUSH
74432: LD_INT 1
74434: PPUSH
74435: LD_INT 4
74437: PPUSH
74438: CALL_OW 12
74442: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
74443: LD_ADDR_VAR 0 4
74447: PUSH
74448: LD_VAR 0 6
74452: PUSH
74453: LD_INT 1
74455: ARRAY
74456: PPUSH
74457: LD_VAR 0 2
74461: PPUSH
74462: CALL_OW 259
74466: ST_TO_ADDR
// if s1 = 1 then
74467: LD_VAR 0 2
74471: PUSH
74472: LD_INT 1
74474: EQUAL
74475: IFFALSE 74495
// s2 := rand ( 2 , 4 ) else
74477: LD_ADDR_VAR 0 3
74481: PUSH
74482: LD_INT 2
74484: PPUSH
74485: LD_INT 4
74487: PPUSH
74488: CALL_OW 12
74492: ST_TO_ADDR
74493: GO 74503
// s2 := 1 ;
74495: LD_ADDR_VAR 0 3
74499: PUSH
74500: LD_INT 1
74502: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
74503: LD_ADDR_VAR 0 5
74507: PUSH
74508: LD_VAR 0 6
74512: PUSH
74513: LD_INT 1
74515: ARRAY
74516: PPUSH
74517: LD_VAR 0 3
74521: PPUSH
74522: CALL_OW 259
74526: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
74527: LD_VAR 0 6
74531: PUSH
74532: LD_INT 1
74534: ARRAY
74535: PPUSH
74536: LD_VAR 0 2
74540: PPUSH
74541: LD_VAR 0 5
74545: PPUSH
74546: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
74550: LD_VAR 0 6
74554: PUSH
74555: LD_INT 1
74557: ARRAY
74558: PPUSH
74559: LD_VAR 0 3
74563: PPUSH
74564: LD_VAR 0 4
74568: PPUSH
74569: CALL_OW 237
// end ;
74573: PPOPN 6
74575: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
74576: LD_EXP 78
74580: PUSH
74581: LD_EXP 125
74585: AND
74586: IFFALSE 74665
74588: GO 74590
74590: DISABLE
74591: LD_INT 0
74593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
74594: LD_ADDR_VAR 0 1
74598: PUSH
74599: LD_INT 22
74601: PUSH
74602: LD_OWVAR 2
74606: PUSH
74607: EMPTY
74608: LIST
74609: LIST
74610: PUSH
74611: LD_INT 30
74613: PUSH
74614: LD_INT 3
74616: PUSH
74617: EMPTY
74618: LIST
74619: LIST
74620: PUSH
74621: EMPTY
74622: LIST
74623: LIST
74624: PPUSH
74625: CALL_OW 69
74629: ST_TO_ADDR
// if not tmp then
74630: LD_VAR 0 1
74634: NOT
74635: IFFALSE 74639
// exit ;
74637: GO 74665
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
74639: LD_VAR 0 1
74643: PUSH
74644: LD_INT 1
74646: PPUSH
74647: LD_VAR 0 1
74651: PPUSH
74652: CALL_OW 12
74656: ARRAY
74657: PPUSH
74658: LD_INT 1
74660: PPUSH
74661: CALL_OW 234
// end ;
74665: PPOPN 1
74667: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
74668: LD_EXP 78
74672: PUSH
74673: LD_EXP 126
74677: AND
74678: IFFALSE 74790
74680: GO 74682
74682: DISABLE
74683: LD_INT 0
74685: PPUSH
74686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
74687: LD_ADDR_VAR 0 2
74691: PUSH
74692: LD_INT 22
74694: PUSH
74695: LD_OWVAR 2
74699: PUSH
74700: EMPTY
74701: LIST
74702: LIST
74703: PUSH
74704: LD_INT 2
74706: PUSH
74707: LD_INT 30
74709: PUSH
74710: LD_INT 27
74712: PUSH
74713: EMPTY
74714: LIST
74715: LIST
74716: PUSH
74717: LD_INT 30
74719: PUSH
74720: LD_INT 26
74722: PUSH
74723: EMPTY
74724: LIST
74725: LIST
74726: PUSH
74727: LD_INT 30
74729: PUSH
74730: LD_INT 28
74732: PUSH
74733: EMPTY
74734: LIST
74735: LIST
74736: PUSH
74737: EMPTY
74738: LIST
74739: LIST
74740: LIST
74741: LIST
74742: PUSH
74743: EMPTY
74744: LIST
74745: LIST
74746: PPUSH
74747: CALL_OW 69
74751: ST_TO_ADDR
// if not tmp then
74752: LD_VAR 0 2
74756: NOT
74757: IFFALSE 74761
// exit ;
74759: GO 74790
// for i in tmp do
74761: LD_ADDR_VAR 0 1
74765: PUSH
74766: LD_VAR 0 2
74770: PUSH
74771: FOR_IN
74772: IFFALSE 74788
// SetLives ( i , 1 ) ;
74774: LD_VAR 0 1
74778: PPUSH
74779: LD_INT 1
74781: PPUSH
74782: CALL_OW 234
74786: GO 74771
74788: POP
74789: POP
// end ;
74790: PPOPN 2
74792: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
74793: LD_EXP 78
74797: PUSH
74798: LD_EXP 127
74802: AND
74803: IFFALSE 75077
74805: GO 74807
74807: DISABLE
74808: LD_INT 0
74810: PPUSH
74811: PPUSH
74812: PPUSH
// begin i := rand ( 1 , 7 ) ;
74813: LD_ADDR_VAR 0 1
74817: PUSH
74818: LD_INT 1
74820: PPUSH
74821: LD_INT 7
74823: PPUSH
74824: CALL_OW 12
74828: ST_TO_ADDR
// case i of 1 :
74829: LD_VAR 0 1
74833: PUSH
74834: LD_INT 1
74836: DOUBLE
74837: EQUAL
74838: IFTRUE 74842
74840: GO 74852
74842: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
74843: LD_STRING earthquake(getX(game), 0, 32)
74845: PPUSH
74846: CALL_OW 559
74850: GO 75077
74852: LD_INT 2
74854: DOUBLE
74855: EQUAL
74856: IFTRUE 74860
74858: GO 74874
74860: POP
// begin ToLua ( displayStucuk(); ) ;
74861: LD_STRING displayStucuk();
74863: PPUSH
74864: CALL_OW 559
// ResetFog ;
74868: CALL_OW 335
// end ; 3 :
74872: GO 75077
74874: LD_INT 3
74876: DOUBLE
74877: EQUAL
74878: IFTRUE 74882
74880: GO 74986
74882: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74883: LD_ADDR_VAR 0 2
74887: PUSH
74888: LD_INT 22
74890: PUSH
74891: LD_OWVAR 2
74895: PUSH
74896: EMPTY
74897: LIST
74898: LIST
74899: PUSH
74900: LD_INT 25
74902: PUSH
74903: LD_INT 1
74905: PUSH
74906: EMPTY
74907: LIST
74908: LIST
74909: PUSH
74910: EMPTY
74911: LIST
74912: LIST
74913: PPUSH
74914: CALL_OW 69
74918: ST_TO_ADDR
// if not tmp then
74919: LD_VAR 0 2
74923: NOT
74924: IFFALSE 74928
// exit ;
74926: GO 75077
// un := tmp [ rand ( 1 , tmp ) ] ;
74928: LD_ADDR_VAR 0 3
74932: PUSH
74933: LD_VAR 0 2
74937: PUSH
74938: LD_INT 1
74940: PPUSH
74941: LD_VAR 0 2
74945: PPUSH
74946: CALL_OW 12
74950: ARRAY
74951: ST_TO_ADDR
// if Crawls ( un ) then
74952: LD_VAR 0 3
74956: PPUSH
74957: CALL_OW 318
74961: IFFALSE 74972
// ComWalk ( un ) ;
74963: LD_VAR 0 3
74967: PPUSH
74968: CALL_OW 138
// SetClass ( un , class_mortar ) ;
74972: LD_VAR 0 3
74976: PPUSH
74977: LD_INT 8
74979: PPUSH
74980: CALL_OW 336
// end ; 4 :
74984: GO 75077
74986: LD_INT 4
74988: DOUBLE
74989: EQUAL
74990: IFTRUE 74994
74992: GO 75055
74994: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
74995: LD_ADDR_VAR 0 2
74999: PUSH
75000: LD_INT 22
75002: PUSH
75003: LD_OWVAR 2
75007: PUSH
75008: EMPTY
75009: LIST
75010: LIST
75011: PUSH
75012: LD_INT 30
75014: PUSH
75015: LD_INT 29
75017: PUSH
75018: EMPTY
75019: LIST
75020: LIST
75021: PUSH
75022: EMPTY
75023: LIST
75024: LIST
75025: PPUSH
75026: CALL_OW 69
75030: ST_TO_ADDR
// if not tmp then
75031: LD_VAR 0 2
75035: NOT
75036: IFFALSE 75040
// exit ;
75038: GO 75077
// DestroyUnit ( tmp [ 1 ] ) ;
75040: LD_VAR 0 2
75044: PUSH
75045: LD_INT 1
75047: ARRAY
75048: PPUSH
75049: CALL_OW 65
// end ; 5 .. 7 :
75053: GO 75077
75055: LD_INT 5
75057: DOUBLE
75058: GREATEREQUAL
75059: IFFALSE 75067
75061: LD_INT 7
75063: DOUBLE
75064: LESSEQUAL
75065: IFTRUE 75069
75067: GO 75076
75069: POP
// StreamSibBomb ; end ;
75070: CALL 71327 0 0
75074: GO 75077
75076: POP
// end ;
75077: PPOPN 3
75079: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
75080: LD_EXP 78
75084: PUSH
75085: LD_EXP 128
75089: AND
75090: IFFALSE 75246
75092: GO 75094
75094: DISABLE
75095: LD_INT 0
75097: PPUSH
75098: PPUSH
75099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
75100: LD_ADDR_VAR 0 2
75104: PUSH
75105: LD_INT 81
75107: PUSH
75108: LD_OWVAR 2
75112: PUSH
75113: EMPTY
75114: LIST
75115: LIST
75116: PUSH
75117: LD_INT 2
75119: PUSH
75120: LD_INT 21
75122: PUSH
75123: LD_INT 1
75125: PUSH
75126: EMPTY
75127: LIST
75128: LIST
75129: PUSH
75130: LD_INT 21
75132: PUSH
75133: LD_INT 2
75135: PUSH
75136: EMPTY
75137: LIST
75138: LIST
75139: PUSH
75140: EMPTY
75141: LIST
75142: LIST
75143: LIST
75144: PUSH
75145: EMPTY
75146: LIST
75147: LIST
75148: PPUSH
75149: CALL_OW 69
75153: ST_TO_ADDR
// if not tmp then
75154: LD_VAR 0 2
75158: NOT
75159: IFFALSE 75163
// exit ;
75161: GO 75246
// p := 0 ;
75163: LD_ADDR_VAR 0 3
75167: PUSH
75168: LD_INT 0
75170: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
75171: LD_INT 35
75173: PPUSH
75174: CALL_OW 67
// p := p + 1 ;
75178: LD_ADDR_VAR 0 3
75182: PUSH
75183: LD_VAR 0 3
75187: PUSH
75188: LD_INT 1
75190: PLUS
75191: ST_TO_ADDR
// for i in tmp do
75192: LD_ADDR_VAR 0 1
75196: PUSH
75197: LD_VAR 0 2
75201: PUSH
75202: FOR_IN
75203: IFFALSE 75234
// if GetLives ( i ) < 1000 then
75205: LD_VAR 0 1
75209: PPUSH
75210: CALL_OW 256
75214: PUSH
75215: LD_INT 1000
75217: LESS
75218: IFFALSE 75232
// SetLives ( i , 1000 ) ;
75220: LD_VAR 0 1
75224: PPUSH
75225: LD_INT 1000
75227: PPUSH
75228: CALL_OW 234
75232: GO 75202
75234: POP
75235: POP
// until p > 20 ;
75236: LD_VAR 0 3
75240: PUSH
75241: LD_INT 20
75243: GREATER
75244: IFFALSE 75171
// end ;
75246: PPOPN 3
75248: END
// every 0 0$1 trigger StreamModeActive and sTime do
75249: LD_EXP 78
75253: PUSH
75254: LD_EXP 129
75258: AND
75259: IFFALSE 75294
75261: GO 75263
75263: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
75264: LD_INT 28
75266: PPUSH
75267: LD_OWVAR 2
75271: PPUSH
75272: LD_INT 2
75274: PPUSH
75275: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
75279: LD_INT 30
75281: PPUSH
75282: LD_OWVAR 2
75286: PPUSH
75287: LD_INT 2
75289: PPUSH
75290: CALL_OW 322
// end ;
75294: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
75295: LD_EXP 78
75299: PUSH
75300: LD_EXP 130
75304: AND
75305: IFFALSE 75426
75307: GO 75309
75309: DISABLE
75310: LD_INT 0
75312: PPUSH
75313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75314: LD_ADDR_VAR 0 2
75318: PUSH
75319: LD_INT 22
75321: PUSH
75322: LD_OWVAR 2
75326: PUSH
75327: EMPTY
75328: LIST
75329: LIST
75330: PUSH
75331: LD_INT 21
75333: PUSH
75334: LD_INT 1
75336: PUSH
75337: EMPTY
75338: LIST
75339: LIST
75340: PUSH
75341: LD_INT 3
75343: PUSH
75344: LD_INT 23
75346: PUSH
75347: LD_INT 0
75349: PUSH
75350: EMPTY
75351: LIST
75352: LIST
75353: PUSH
75354: EMPTY
75355: LIST
75356: LIST
75357: PUSH
75358: EMPTY
75359: LIST
75360: LIST
75361: LIST
75362: PPUSH
75363: CALL_OW 69
75367: ST_TO_ADDR
// if not tmp then
75368: LD_VAR 0 2
75372: NOT
75373: IFFALSE 75377
// exit ;
75375: GO 75426
// for i in tmp do
75377: LD_ADDR_VAR 0 1
75381: PUSH
75382: LD_VAR 0 2
75386: PUSH
75387: FOR_IN
75388: IFFALSE 75424
// begin if Crawls ( i ) then
75390: LD_VAR 0 1
75394: PPUSH
75395: CALL_OW 318
75399: IFFALSE 75410
// ComWalk ( i ) ;
75401: LD_VAR 0 1
75405: PPUSH
75406: CALL_OW 138
// SetClass ( i , 2 ) ;
75410: LD_VAR 0 1
75414: PPUSH
75415: LD_INT 2
75417: PPUSH
75418: CALL_OW 336
// end ;
75422: GO 75387
75424: POP
75425: POP
// end ;
75426: PPOPN 2
75428: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
75429: LD_EXP 78
75433: PUSH
75434: LD_EXP 131
75438: AND
75439: IFFALSE 75720
75441: GO 75443
75443: DISABLE
75444: LD_INT 0
75446: PPUSH
75447: PPUSH
75448: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
75449: LD_OWVAR 2
75453: PPUSH
75454: LD_INT 9
75456: PPUSH
75457: LD_INT 1
75459: PPUSH
75460: LD_INT 1
75462: PPUSH
75463: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
75467: LD_INT 9
75469: PPUSH
75470: LD_OWVAR 2
75474: PPUSH
75475: CALL_OW 343
// uc_side := 9 ;
75479: LD_ADDR_OWVAR 20
75483: PUSH
75484: LD_INT 9
75486: ST_TO_ADDR
// uc_nation := 2 ;
75487: LD_ADDR_OWVAR 21
75491: PUSH
75492: LD_INT 2
75494: ST_TO_ADDR
// hc_name := Dark Warrior ;
75495: LD_ADDR_OWVAR 26
75499: PUSH
75500: LD_STRING Dark Warrior
75502: ST_TO_ADDR
// hc_gallery :=  ;
75503: LD_ADDR_OWVAR 33
75507: PUSH
75508: LD_STRING 
75510: ST_TO_ADDR
// hc_noskilllimit := true ;
75511: LD_ADDR_OWVAR 76
75515: PUSH
75516: LD_INT 1
75518: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
75519: LD_ADDR_OWVAR 31
75523: PUSH
75524: LD_INT 30
75526: PUSH
75527: LD_INT 30
75529: PUSH
75530: LD_INT 30
75532: PUSH
75533: LD_INT 30
75535: PUSH
75536: EMPTY
75537: LIST
75538: LIST
75539: LIST
75540: LIST
75541: ST_TO_ADDR
// un := CreateHuman ;
75542: LD_ADDR_VAR 0 3
75546: PUSH
75547: CALL_OW 44
75551: ST_TO_ADDR
// hc_noskilllimit := false ;
75552: LD_ADDR_OWVAR 76
75556: PUSH
75557: LD_INT 0
75559: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
75560: LD_VAR 0 3
75564: PPUSH
75565: LD_INT 1
75567: PPUSH
75568: CALL_OW 51
// p := 0 ;
75572: LD_ADDR_VAR 0 2
75576: PUSH
75577: LD_INT 0
75579: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
75580: LD_INT 35
75582: PPUSH
75583: CALL_OW 67
// p := p + 1 ;
75587: LD_ADDR_VAR 0 2
75591: PUSH
75592: LD_VAR 0 2
75596: PUSH
75597: LD_INT 1
75599: PLUS
75600: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
75601: LD_VAR 0 3
75605: PPUSH
75606: CALL_OW 256
75610: PUSH
75611: LD_INT 1000
75613: LESS
75614: IFFALSE 75628
// SetLives ( un , 1000 ) ;
75616: LD_VAR 0 3
75620: PPUSH
75621: LD_INT 1000
75623: PPUSH
75624: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
75628: LD_VAR 0 3
75632: PPUSH
75633: LD_INT 81
75635: PUSH
75636: LD_OWVAR 2
75640: PUSH
75641: EMPTY
75642: LIST
75643: LIST
75644: PUSH
75645: LD_INT 91
75647: PUSH
75648: LD_VAR 0 3
75652: PUSH
75653: LD_INT 30
75655: PUSH
75656: EMPTY
75657: LIST
75658: LIST
75659: LIST
75660: PUSH
75661: EMPTY
75662: LIST
75663: LIST
75664: PPUSH
75665: CALL_OW 69
75669: PPUSH
75670: LD_VAR 0 3
75674: PPUSH
75675: CALL_OW 74
75679: PPUSH
75680: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
75684: LD_VAR 0 2
75688: PUSH
75689: LD_INT 60
75691: GREATER
75692: PUSH
75693: LD_VAR 0 3
75697: PPUSH
75698: CALL_OW 301
75702: OR
75703: IFFALSE 75580
// if un then
75705: LD_VAR 0 3
75709: IFFALSE 75720
// RemoveUnit ( un ) ;
75711: LD_VAR 0 3
75715: PPUSH
75716: CALL_OW 64
// end ;
75720: PPOPN 3
75722: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
75723: LD_INT 0
75725: PPUSH
// case cmd of 301 :
75726: LD_VAR 0 1
75730: PUSH
75731: LD_INT 301
75733: DOUBLE
75734: EQUAL
75735: IFTRUE 75739
75737: GO 75771
75739: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
75740: LD_VAR 0 6
75744: PPUSH
75745: LD_VAR 0 7
75749: PPUSH
75750: LD_VAR 0 8
75754: PPUSH
75755: LD_VAR 0 4
75759: PPUSH
75760: LD_VAR 0 5
75764: PPUSH
75765: CALL 76972 0 5
75769: GO 75892
75771: LD_INT 302
75773: DOUBLE
75774: EQUAL
75775: IFTRUE 75779
75777: GO 75816
75779: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
75780: LD_VAR 0 6
75784: PPUSH
75785: LD_VAR 0 7
75789: PPUSH
75790: LD_VAR 0 8
75794: PPUSH
75795: LD_VAR 0 9
75799: PPUSH
75800: LD_VAR 0 4
75804: PPUSH
75805: LD_VAR 0 5
75809: PPUSH
75810: CALL 77063 0 6
75814: GO 75892
75816: LD_INT 303
75818: DOUBLE
75819: EQUAL
75820: IFTRUE 75824
75822: GO 75861
75824: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
75825: LD_VAR 0 6
75829: PPUSH
75830: LD_VAR 0 7
75834: PPUSH
75835: LD_VAR 0 8
75839: PPUSH
75840: LD_VAR 0 9
75844: PPUSH
75845: LD_VAR 0 4
75849: PPUSH
75850: LD_VAR 0 5
75854: PPUSH
75855: CALL 75897 0 6
75859: GO 75892
75861: LD_INT 304
75863: DOUBLE
75864: EQUAL
75865: IFTRUE 75869
75867: GO 75891
75869: POP
// hHackTeleport ( unit , x , y ) ; end ;
75870: LD_VAR 0 2
75874: PPUSH
75875: LD_VAR 0 4
75879: PPUSH
75880: LD_VAR 0 5
75884: PPUSH
75885: CALL 77656 0 3
75889: GO 75892
75891: POP
// end ;
75892: LD_VAR 0 12
75896: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
75897: LD_INT 0
75899: PPUSH
75900: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
75901: LD_VAR 0 1
75905: PUSH
75906: LD_INT 1
75908: LESS
75909: PUSH
75910: LD_VAR 0 1
75914: PUSH
75915: LD_INT 3
75917: GREATER
75918: OR
75919: PUSH
75920: LD_VAR 0 5
75924: PPUSH
75925: LD_VAR 0 6
75929: PPUSH
75930: CALL_OW 428
75934: OR
75935: IFFALSE 75939
// exit ;
75937: GO 76659
// uc_side := your_side ;
75939: LD_ADDR_OWVAR 20
75943: PUSH
75944: LD_OWVAR 2
75948: ST_TO_ADDR
// uc_nation := nation ;
75949: LD_ADDR_OWVAR 21
75953: PUSH
75954: LD_VAR 0 1
75958: ST_TO_ADDR
// bc_level = 1 ;
75959: LD_ADDR_OWVAR 43
75963: PUSH
75964: LD_INT 1
75966: ST_TO_ADDR
// case btype of 1 :
75967: LD_VAR 0 2
75971: PUSH
75972: LD_INT 1
75974: DOUBLE
75975: EQUAL
75976: IFTRUE 75980
75978: GO 75991
75980: POP
// bc_type := b_depot ; 2 :
75981: LD_ADDR_OWVAR 42
75985: PUSH
75986: LD_INT 0
75988: ST_TO_ADDR
75989: GO 76603
75991: LD_INT 2
75993: DOUBLE
75994: EQUAL
75995: IFTRUE 75999
75997: GO 76010
75999: POP
// bc_type := b_warehouse ; 3 :
76000: LD_ADDR_OWVAR 42
76004: PUSH
76005: LD_INT 1
76007: ST_TO_ADDR
76008: GO 76603
76010: LD_INT 3
76012: DOUBLE
76013: EQUAL
76014: IFTRUE 76018
76016: GO 76029
76018: POP
// bc_type := b_lab ; 4 .. 9 :
76019: LD_ADDR_OWVAR 42
76023: PUSH
76024: LD_INT 6
76026: ST_TO_ADDR
76027: GO 76603
76029: LD_INT 4
76031: DOUBLE
76032: GREATEREQUAL
76033: IFFALSE 76041
76035: LD_INT 9
76037: DOUBLE
76038: LESSEQUAL
76039: IFTRUE 76043
76041: GO 76095
76043: POP
// begin bc_type := b_lab_half ;
76044: LD_ADDR_OWVAR 42
76048: PUSH
76049: LD_INT 7
76051: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
76052: LD_ADDR_OWVAR 44
76056: PUSH
76057: LD_INT 10
76059: PUSH
76060: LD_INT 11
76062: PUSH
76063: LD_INT 12
76065: PUSH
76066: LD_INT 15
76068: PUSH
76069: LD_INT 14
76071: PUSH
76072: LD_INT 13
76074: PUSH
76075: EMPTY
76076: LIST
76077: LIST
76078: LIST
76079: LIST
76080: LIST
76081: LIST
76082: PUSH
76083: LD_VAR 0 2
76087: PUSH
76088: LD_INT 3
76090: MINUS
76091: ARRAY
76092: ST_TO_ADDR
// end ; 10 .. 13 :
76093: GO 76603
76095: LD_INT 10
76097: DOUBLE
76098: GREATEREQUAL
76099: IFFALSE 76107
76101: LD_INT 13
76103: DOUBLE
76104: LESSEQUAL
76105: IFTRUE 76109
76107: GO 76186
76109: POP
// begin bc_type := b_lab_full ;
76110: LD_ADDR_OWVAR 42
76114: PUSH
76115: LD_INT 8
76117: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
76118: LD_ADDR_OWVAR 44
76122: PUSH
76123: LD_INT 10
76125: PUSH
76126: LD_INT 12
76128: PUSH
76129: LD_INT 14
76131: PUSH
76132: LD_INT 13
76134: PUSH
76135: EMPTY
76136: LIST
76137: LIST
76138: LIST
76139: LIST
76140: PUSH
76141: LD_VAR 0 2
76145: PUSH
76146: LD_INT 9
76148: MINUS
76149: ARRAY
76150: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
76151: LD_ADDR_OWVAR 45
76155: PUSH
76156: LD_INT 11
76158: PUSH
76159: LD_INT 15
76161: PUSH
76162: LD_INT 12
76164: PUSH
76165: LD_INT 15
76167: PUSH
76168: EMPTY
76169: LIST
76170: LIST
76171: LIST
76172: LIST
76173: PUSH
76174: LD_VAR 0 2
76178: PUSH
76179: LD_INT 9
76181: MINUS
76182: ARRAY
76183: ST_TO_ADDR
// end ; 14 :
76184: GO 76603
76186: LD_INT 14
76188: DOUBLE
76189: EQUAL
76190: IFTRUE 76194
76192: GO 76205
76194: POP
// bc_type := b_workshop ; 15 :
76195: LD_ADDR_OWVAR 42
76199: PUSH
76200: LD_INT 2
76202: ST_TO_ADDR
76203: GO 76603
76205: LD_INT 15
76207: DOUBLE
76208: EQUAL
76209: IFTRUE 76213
76211: GO 76224
76213: POP
// bc_type := b_factory ; 16 :
76214: LD_ADDR_OWVAR 42
76218: PUSH
76219: LD_INT 3
76221: ST_TO_ADDR
76222: GO 76603
76224: LD_INT 16
76226: DOUBLE
76227: EQUAL
76228: IFTRUE 76232
76230: GO 76243
76232: POP
// bc_type := b_ext_gun ; 17 :
76233: LD_ADDR_OWVAR 42
76237: PUSH
76238: LD_INT 17
76240: ST_TO_ADDR
76241: GO 76603
76243: LD_INT 17
76245: DOUBLE
76246: EQUAL
76247: IFTRUE 76251
76249: GO 76279
76251: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
76252: LD_ADDR_OWVAR 42
76256: PUSH
76257: LD_INT 19
76259: PUSH
76260: LD_INT 23
76262: PUSH
76263: LD_INT 19
76265: PUSH
76266: EMPTY
76267: LIST
76268: LIST
76269: LIST
76270: PUSH
76271: LD_VAR 0 1
76275: ARRAY
76276: ST_TO_ADDR
76277: GO 76603
76279: LD_INT 18
76281: DOUBLE
76282: EQUAL
76283: IFTRUE 76287
76285: GO 76298
76287: POP
// bc_type := b_ext_radar ; 19 :
76288: LD_ADDR_OWVAR 42
76292: PUSH
76293: LD_INT 20
76295: ST_TO_ADDR
76296: GO 76603
76298: LD_INT 19
76300: DOUBLE
76301: EQUAL
76302: IFTRUE 76306
76304: GO 76317
76306: POP
// bc_type := b_ext_radio ; 20 :
76307: LD_ADDR_OWVAR 42
76311: PUSH
76312: LD_INT 22
76314: ST_TO_ADDR
76315: GO 76603
76317: LD_INT 20
76319: DOUBLE
76320: EQUAL
76321: IFTRUE 76325
76323: GO 76336
76325: POP
// bc_type := b_ext_siberium ; 21 :
76326: LD_ADDR_OWVAR 42
76330: PUSH
76331: LD_INT 21
76333: ST_TO_ADDR
76334: GO 76603
76336: LD_INT 21
76338: DOUBLE
76339: EQUAL
76340: IFTRUE 76344
76342: GO 76355
76344: POP
// bc_type := b_ext_computer ; 22 :
76345: LD_ADDR_OWVAR 42
76349: PUSH
76350: LD_INT 24
76352: ST_TO_ADDR
76353: GO 76603
76355: LD_INT 22
76357: DOUBLE
76358: EQUAL
76359: IFTRUE 76363
76361: GO 76374
76363: POP
// bc_type := b_ext_track ; 23 :
76364: LD_ADDR_OWVAR 42
76368: PUSH
76369: LD_INT 16
76371: ST_TO_ADDR
76372: GO 76603
76374: LD_INT 23
76376: DOUBLE
76377: EQUAL
76378: IFTRUE 76382
76380: GO 76393
76382: POP
// bc_type := b_ext_laser ; 24 :
76383: LD_ADDR_OWVAR 42
76387: PUSH
76388: LD_INT 25
76390: ST_TO_ADDR
76391: GO 76603
76393: LD_INT 24
76395: DOUBLE
76396: EQUAL
76397: IFTRUE 76401
76399: GO 76412
76401: POP
// bc_type := b_control_tower ; 25 :
76402: LD_ADDR_OWVAR 42
76406: PUSH
76407: LD_INT 36
76409: ST_TO_ADDR
76410: GO 76603
76412: LD_INT 25
76414: DOUBLE
76415: EQUAL
76416: IFTRUE 76420
76418: GO 76431
76420: POP
// bc_type := b_breastwork ; 26 :
76421: LD_ADDR_OWVAR 42
76425: PUSH
76426: LD_INT 31
76428: ST_TO_ADDR
76429: GO 76603
76431: LD_INT 26
76433: DOUBLE
76434: EQUAL
76435: IFTRUE 76439
76437: GO 76450
76439: POP
// bc_type := b_bunker ; 27 :
76440: LD_ADDR_OWVAR 42
76444: PUSH
76445: LD_INT 32
76447: ST_TO_ADDR
76448: GO 76603
76450: LD_INT 27
76452: DOUBLE
76453: EQUAL
76454: IFTRUE 76458
76456: GO 76469
76458: POP
// bc_type := b_turret ; 28 :
76459: LD_ADDR_OWVAR 42
76463: PUSH
76464: LD_INT 33
76466: ST_TO_ADDR
76467: GO 76603
76469: LD_INT 28
76471: DOUBLE
76472: EQUAL
76473: IFTRUE 76477
76475: GO 76488
76477: POP
// bc_type := b_armoury ; 29 :
76478: LD_ADDR_OWVAR 42
76482: PUSH
76483: LD_INT 4
76485: ST_TO_ADDR
76486: GO 76603
76488: LD_INT 29
76490: DOUBLE
76491: EQUAL
76492: IFTRUE 76496
76494: GO 76507
76496: POP
// bc_type := b_barracks ; 30 :
76497: LD_ADDR_OWVAR 42
76501: PUSH
76502: LD_INT 5
76504: ST_TO_ADDR
76505: GO 76603
76507: LD_INT 30
76509: DOUBLE
76510: EQUAL
76511: IFTRUE 76515
76513: GO 76526
76515: POP
// bc_type := b_solar_power ; 31 :
76516: LD_ADDR_OWVAR 42
76520: PUSH
76521: LD_INT 27
76523: ST_TO_ADDR
76524: GO 76603
76526: LD_INT 31
76528: DOUBLE
76529: EQUAL
76530: IFTRUE 76534
76532: GO 76545
76534: POP
// bc_type := b_oil_power ; 32 :
76535: LD_ADDR_OWVAR 42
76539: PUSH
76540: LD_INT 26
76542: ST_TO_ADDR
76543: GO 76603
76545: LD_INT 32
76547: DOUBLE
76548: EQUAL
76549: IFTRUE 76553
76551: GO 76564
76553: POP
// bc_type := b_siberite_power ; 33 :
76554: LD_ADDR_OWVAR 42
76558: PUSH
76559: LD_INT 28
76561: ST_TO_ADDR
76562: GO 76603
76564: LD_INT 33
76566: DOUBLE
76567: EQUAL
76568: IFTRUE 76572
76570: GO 76583
76572: POP
// bc_type := b_oil_mine ; 34 :
76573: LD_ADDR_OWVAR 42
76577: PUSH
76578: LD_INT 29
76580: ST_TO_ADDR
76581: GO 76603
76583: LD_INT 34
76585: DOUBLE
76586: EQUAL
76587: IFTRUE 76591
76589: GO 76602
76591: POP
// bc_type := b_siberite_mine ; end ;
76592: LD_ADDR_OWVAR 42
76596: PUSH
76597: LD_INT 30
76599: ST_TO_ADDR
76600: GO 76603
76602: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
76603: LD_ADDR_VAR 0 8
76607: PUSH
76608: LD_VAR 0 5
76612: PPUSH
76613: LD_VAR 0 6
76617: PPUSH
76618: LD_VAR 0 3
76622: PPUSH
76623: CALL_OW 47
76627: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
76628: LD_OWVAR 42
76632: PUSH
76633: LD_INT 32
76635: PUSH
76636: LD_INT 33
76638: PUSH
76639: EMPTY
76640: LIST
76641: LIST
76642: IN
76643: IFFALSE 76659
// PlaceWeaponTurret ( b , weapon ) ;
76645: LD_VAR 0 8
76649: PPUSH
76650: LD_VAR 0 4
76654: PPUSH
76655: CALL_OW 431
// end ;
76659: LD_VAR 0 7
76663: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
76664: LD_INT 0
76666: PPUSH
76667: PPUSH
76668: PPUSH
76669: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
76670: LD_ADDR_VAR 0 4
76674: PUSH
76675: LD_INT 22
76677: PUSH
76678: LD_OWVAR 2
76682: PUSH
76683: EMPTY
76684: LIST
76685: LIST
76686: PUSH
76687: LD_INT 2
76689: PUSH
76690: LD_INT 30
76692: PUSH
76693: LD_INT 0
76695: PUSH
76696: EMPTY
76697: LIST
76698: LIST
76699: PUSH
76700: LD_INT 30
76702: PUSH
76703: LD_INT 1
76705: PUSH
76706: EMPTY
76707: LIST
76708: LIST
76709: PUSH
76710: EMPTY
76711: LIST
76712: LIST
76713: LIST
76714: PUSH
76715: EMPTY
76716: LIST
76717: LIST
76718: PPUSH
76719: CALL_OW 69
76723: ST_TO_ADDR
// if not tmp then
76724: LD_VAR 0 4
76728: NOT
76729: IFFALSE 76733
// exit ;
76731: GO 76792
// for i in tmp do
76733: LD_ADDR_VAR 0 2
76737: PUSH
76738: LD_VAR 0 4
76742: PUSH
76743: FOR_IN
76744: IFFALSE 76790
// for j = 1 to 3 do
76746: LD_ADDR_VAR 0 3
76750: PUSH
76751: DOUBLE
76752: LD_INT 1
76754: DEC
76755: ST_TO_ADDR
76756: LD_INT 3
76758: PUSH
76759: FOR_TO
76760: IFFALSE 76786
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
76762: LD_VAR 0 2
76766: PPUSH
76767: CALL_OW 274
76771: PPUSH
76772: LD_VAR 0 3
76776: PPUSH
76777: LD_INT 99999
76779: PPUSH
76780: CALL_OW 277
76784: GO 76759
76786: POP
76787: POP
76788: GO 76743
76790: POP
76791: POP
// end ;
76792: LD_VAR 0 1
76796: RET
// export function hHackSetLevel10 ; var i , j ; begin
76797: LD_INT 0
76799: PPUSH
76800: PPUSH
76801: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
76802: LD_ADDR_VAR 0 2
76806: PUSH
76807: LD_INT 21
76809: PUSH
76810: LD_INT 1
76812: PUSH
76813: EMPTY
76814: LIST
76815: LIST
76816: PPUSH
76817: CALL_OW 69
76821: PUSH
76822: FOR_IN
76823: IFFALSE 76875
// if IsSelected ( i ) then
76825: LD_VAR 0 2
76829: PPUSH
76830: CALL_OW 306
76834: IFFALSE 76873
// begin for j := 1 to 4 do
76836: LD_ADDR_VAR 0 3
76840: PUSH
76841: DOUBLE
76842: LD_INT 1
76844: DEC
76845: ST_TO_ADDR
76846: LD_INT 4
76848: PUSH
76849: FOR_TO
76850: IFFALSE 76871
// SetSkill ( i , j , 10 ) ;
76852: LD_VAR 0 2
76856: PPUSH
76857: LD_VAR 0 3
76861: PPUSH
76862: LD_INT 10
76864: PPUSH
76865: CALL_OW 237
76869: GO 76849
76871: POP
76872: POP
// end ;
76873: GO 76822
76875: POP
76876: POP
// end ;
76877: LD_VAR 0 1
76881: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
76882: LD_INT 0
76884: PPUSH
76885: PPUSH
76886: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
76887: LD_ADDR_VAR 0 2
76891: PUSH
76892: LD_INT 22
76894: PUSH
76895: LD_OWVAR 2
76899: PUSH
76900: EMPTY
76901: LIST
76902: LIST
76903: PUSH
76904: LD_INT 21
76906: PUSH
76907: LD_INT 1
76909: PUSH
76910: EMPTY
76911: LIST
76912: LIST
76913: PUSH
76914: EMPTY
76915: LIST
76916: LIST
76917: PPUSH
76918: CALL_OW 69
76922: PUSH
76923: FOR_IN
76924: IFFALSE 76965
// begin for j := 1 to 4 do
76926: LD_ADDR_VAR 0 3
76930: PUSH
76931: DOUBLE
76932: LD_INT 1
76934: DEC
76935: ST_TO_ADDR
76936: LD_INT 4
76938: PUSH
76939: FOR_TO
76940: IFFALSE 76961
// SetSkill ( i , j , 10 ) ;
76942: LD_VAR 0 2
76946: PPUSH
76947: LD_VAR 0 3
76951: PPUSH
76952: LD_INT 10
76954: PPUSH
76955: CALL_OW 237
76959: GO 76939
76961: POP
76962: POP
// end ;
76963: GO 76923
76965: POP
76966: POP
// end ;
76967: LD_VAR 0 1
76971: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
76972: LD_INT 0
76974: PPUSH
// uc_side := your_side ;
76975: LD_ADDR_OWVAR 20
76979: PUSH
76980: LD_OWVAR 2
76984: ST_TO_ADDR
// uc_nation := nation ;
76985: LD_ADDR_OWVAR 21
76989: PUSH
76990: LD_VAR 0 1
76994: ST_TO_ADDR
// InitHc ;
76995: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
76999: LD_INT 0
77001: PPUSH
77002: LD_VAR 0 2
77006: PPUSH
77007: LD_VAR 0 3
77011: PPUSH
77012: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
77016: LD_VAR 0 4
77020: PPUSH
77021: LD_VAR 0 5
77025: PPUSH
77026: CALL_OW 428
77030: PUSH
77031: LD_INT 0
77033: EQUAL
77034: IFFALSE 77058
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
77036: CALL_OW 44
77040: PPUSH
77041: LD_VAR 0 4
77045: PPUSH
77046: LD_VAR 0 5
77050: PPUSH
77051: LD_INT 1
77053: PPUSH
77054: CALL_OW 48
// end ;
77058: LD_VAR 0 6
77062: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
77063: LD_INT 0
77065: PPUSH
77066: PPUSH
// uc_side := your_side ;
77067: LD_ADDR_OWVAR 20
77071: PUSH
77072: LD_OWVAR 2
77076: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
77077: LD_VAR 0 1
77081: PUSH
77082: LD_INT 1
77084: PUSH
77085: LD_INT 2
77087: PUSH
77088: LD_INT 3
77090: PUSH
77091: LD_INT 4
77093: PUSH
77094: LD_INT 5
77096: PUSH
77097: EMPTY
77098: LIST
77099: LIST
77100: LIST
77101: LIST
77102: LIST
77103: IN
77104: IFFALSE 77116
// uc_nation := nation_american else
77106: LD_ADDR_OWVAR 21
77110: PUSH
77111: LD_INT 1
77113: ST_TO_ADDR
77114: GO 77159
// if chassis in [ 11 , 12 , 13 , 14 ] then
77116: LD_VAR 0 1
77120: PUSH
77121: LD_INT 11
77123: PUSH
77124: LD_INT 12
77126: PUSH
77127: LD_INT 13
77129: PUSH
77130: LD_INT 14
77132: PUSH
77133: EMPTY
77134: LIST
77135: LIST
77136: LIST
77137: LIST
77138: IN
77139: IFFALSE 77151
// uc_nation := nation_arabian else
77141: LD_ADDR_OWVAR 21
77145: PUSH
77146: LD_INT 2
77148: ST_TO_ADDR
77149: GO 77159
// uc_nation := nation_russian ;
77151: LD_ADDR_OWVAR 21
77155: PUSH
77156: LD_INT 3
77158: ST_TO_ADDR
// vc_chassis := chassis ;
77159: LD_ADDR_OWVAR 37
77163: PUSH
77164: LD_VAR 0 1
77168: ST_TO_ADDR
// vc_engine := engine ;
77169: LD_ADDR_OWVAR 39
77173: PUSH
77174: LD_VAR 0 2
77178: ST_TO_ADDR
// vc_control := control ;
77179: LD_ADDR_OWVAR 38
77183: PUSH
77184: LD_VAR 0 3
77188: ST_TO_ADDR
// vc_weapon := weapon ;
77189: LD_ADDR_OWVAR 40
77193: PUSH
77194: LD_VAR 0 4
77198: ST_TO_ADDR
// un := CreateVehicle ;
77199: LD_ADDR_VAR 0 8
77203: PUSH
77204: CALL_OW 45
77208: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
77209: LD_VAR 0 8
77213: PPUSH
77214: LD_INT 0
77216: PPUSH
77217: LD_INT 5
77219: PPUSH
77220: CALL_OW 12
77224: PPUSH
77225: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
77229: LD_VAR 0 8
77233: PPUSH
77234: LD_VAR 0 5
77238: PPUSH
77239: LD_VAR 0 6
77243: PPUSH
77244: LD_INT 1
77246: PPUSH
77247: CALL_OW 48
// end ;
77251: LD_VAR 0 7
77255: RET
// export hInvincible ; every 1 do
77256: GO 77258
77258: DISABLE
// hInvincible := [ ] ;
77259: LD_ADDR_EXP 132
77263: PUSH
77264: EMPTY
77265: ST_TO_ADDR
77266: END
// every 10 do var i ;
77267: GO 77269
77269: DISABLE
77270: LD_INT 0
77272: PPUSH
// begin enable ;
77273: ENABLE
// if not hInvincible then
77274: LD_EXP 132
77278: NOT
77279: IFFALSE 77283
// exit ;
77281: GO 77327
// for i in hInvincible do
77283: LD_ADDR_VAR 0 1
77287: PUSH
77288: LD_EXP 132
77292: PUSH
77293: FOR_IN
77294: IFFALSE 77325
// if GetLives ( i ) < 1000 then
77296: LD_VAR 0 1
77300: PPUSH
77301: CALL_OW 256
77305: PUSH
77306: LD_INT 1000
77308: LESS
77309: IFFALSE 77323
// SetLives ( i , 1000 ) ;
77311: LD_VAR 0 1
77315: PPUSH
77316: LD_INT 1000
77318: PPUSH
77319: CALL_OW 234
77323: GO 77293
77325: POP
77326: POP
// end ;
77327: PPOPN 1
77329: END
// export function hHackInvincible ; var i ; begin
77330: LD_INT 0
77332: PPUSH
77333: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
77334: LD_ADDR_VAR 0 2
77338: PUSH
77339: LD_INT 2
77341: PUSH
77342: LD_INT 21
77344: PUSH
77345: LD_INT 1
77347: PUSH
77348: EMPTY
77349: LIST
77350: LIST
77351: PUSH
77352: LD_INT 21
77354: PUSH
77355: LD_INT 2
77357: PUSH
77358: EMPTY
77359: LIST
77360: LIST
77361: PUSH
77362: EMPTY
77363: LIST
77364: LIST
77365: LIST
77366: PPUSH
77367: CALL_OW 69
77371: PUSH
77372: FOR_IN
77373: IFFALSE 77434
// if IsSelected ( i ) then
77375: LD_VAR 0 2
77379: PPUSH
77380: CALL_OW 306
77384: IFFALSE 77432
// begin if i in hInvincible then
77386: LD_VAR 0 2
77390: PUSH
77391: LD_EXP 132
77395: IN
77396: IFFALSE 77416
// hInvincible := hInvincible diff i else
77398: LD_ADDR_EXP 132
77402: PUSH
77403: LD_EXP 132
77407: PUSH
77408: LD_VAR 0 2
77412: DIFF
77413: ST_TO_ADDR
77414: GO 77432
// hInvincible := hInvincible union i ;
77416: LD_ADDR_EXP 132
77420: PUSH
77421: LD_EXP 132
77425: PUSH
77426: LD_VAR 0 2
77430: UNION
77431: ST_TO_ADDR
// end ;
77432: GO 77372
77434: POP
77435: POP
// end ;
77436: LD_VAR 0 1
77440: RET
// export function hHackInvisible ; var i , j ; begin
77441: LD_INT 0
77443: PPUSH
77444: PPUSH
77445: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
77446: LD_ADDR_VAR 0 2
77450: PUSH
77451: LD_INT 21
77453: PUSH
77454: LD_INT 1
77456: PUSH
77457: EMPTY
77458: LIST
77459: LIST
77460: PPUSH
77461: CALL_OW 69
77465: PUSH
77466: FOR_IN
77467: IFFALSE 77491
// if IsSelected ( i ) then
77469: LD_VAR 0 2
77473: PPUSH
77474: CALL_OW 306
77478: IFFALSE 77489
// ComForceInvisible ( i ) ;
77480: LD_VAR 0 2
77484: PPUSH
77485: CALL_OW 496
77489: GO 77466
77491: POP
77492: POP
// end ;
77493: LD_VAR 0 1
77497: RET
// export function hHackChangeYourSide ; begin
77498: LD_INT 0
77500: PPUSH
// if your_side = 8 then
77501: LD_OWVAR 2
77505: PUSH
77506: LD_INT 8
77508: EQUAL
77509: IFFALSE 77521
// your_side := 0 else
77511: LD_ADDR_OWVAR 2
77515: PUSH
77516: LD_INT 0
77518: ST_TO_ADDR
77519: GO 77535
// your_side := your_side + 1 ;
77521: LD_ADDR_OWVAR 2
77525: PUSH
77526: LD_OWVAR 2
77530: PUSH
77531: LD_INT 1
77533: PLUS
77534: ST_TO_ADDR
// end ;
77535: LD_VAR 0 1
77539: RET
// export function hHackChangeUnitSide ; var i , j ; begin
77540: LD_INT 0
77542: PPUSH
77543: PPUSH
77544: PPUSH
// for i in all_units do
77545: LD_ADDR_VAR 0 2
77549: PUSH
77550: LD_OWVAR 3
77554: PUSH
77555: FOR_IN
77556: IFFALSE 77634
// if IsSelected ( i ) then
77558: LD_VAR 0 2
77562: PPUSH
77563: CALL_OW 306
77567: IFFALSE 77632
// begin j := GetSide ( i ) ;
77569: LD_ADDR_VAR 0 3
77573: PUSH
77574: LD_VAR 0 2
77578: PPUSH
77579: CALL_OW 255
77583: ST_TO_ADDR
// if j = 8 then
77584: LD_VAR 0 3
77588: PUSH
77589: LD_INT 8
77591: EQUAL
77592: IFFALSE 77604
// j := 0 else
77594: LD_ADDR_VAR 0 3
77598: PUSH
77599: LD_INT 0
77601: ST_TO_ADDR
77602: GO 77618
// j := j + 1 ;
77604: LD_ADDR_VAR 0 3
77608: PUSH
77609: LD_VAR 0 3
77613: PUSH
77614: LD_INT 1
77616: PLUS
77617: ST_TO_ADDR
// SetSide ( i , j ) ;
77618: LD_VAR 0 2
77622: PPUSH
77623: LD_VAR 0 3
77627: PPUSH
77628: CALL_OW 235
// end ;
77632: GO 77555
77634: POP
77635: POP
// end ;
77636: LD_VAR 0 1
77640: RET
// export function hHackFog ; begin
77641: LD_INT 0
77643: PPUSH
// FogOff ( true ) ;
77644: LD_INT 1
77646: PPUSH
77647: CALL_OW 344
// end ;
77651: LD_VAR 0 1
77655: RET
// export function hHackTeleport ( unit , x , y ) ; begin
77656: LD_INT 0
77658: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
77659: LD_VAR 0 1
77663: PPUSH
77664: LD_VAR 0 2
77668: PPUSH
77669: LD_VAR 0 3
77673: PPUSH
77674: LD_INT 1
77676: PPUSH
77677: LD_INT 1
77679: PPUSH
77680: CALL_OW 483
// CenterOnXY ( x , y ) ;
77684: LD_VAR 0 2
77688: PPUSH
77689: LD_VAR 0 3
77693: PPUSH
77694: CALL_OW 84
// end ; end_of_file
77698: LD_VAR 0 4
77702: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77703: LD_VAR 0 1
77707: PUSH
77708: LD_INT 200
77710: DOUBLE
77711: GREATEREQUAL
77712: IFFALSE 77720
77714: LD_INT 299
77716: DOUBLE
77717: LESSEQUAL
77718: IFTRUE 77722
77720: GO 77754
77722: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77723: LD_VAR 0 1
77727: PPUSH
77728: LD_VAR 0 2
77732: PPUSH
77733: LD_VAR 0 3
77737: PPUSH
77738: LD_VAR 0 4
77742: PPUSH
77743: LD_VAR 0 5
77747: PPUSH
77748: CALL 77998 0 5
77752: GO 77831
77754: LD_INT 300
77756: DOUBLE
77757: GREATEREQUAL
77758: IFFALSE 77766
77760: LD_INT 399
77762: DOUBLE
77763: LESSEQUAL
77764: IFTRUE 77768
77766: GO 77830
77768: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77769: LD_VAR 0 1
77773: PPUSH
77774: LD_VAR 0 2
77778: PPUSH
77779: LD_VAR 0 3
77783: PPUSH
77784: LD_VAR 0 4
77788: PPUSH
77789: LD_VAR 0 5
77793: PPUSH
77794: LD_VAR 0 6
77798: PPUSH
77799: LD_VAR 0 7
77803: PPUSH
77804: LD_VAR 0 8
77808: PPUSH
77809: LD_VAR 0 9
77813: PPUSH
77814: LD_VAR 0 10
77818: PPUSH
77819: LD_VAR 0 11
77823: PPUSH
77824: CALL 75723 0 11
77828: GO 77831
77830: POP
// end ;
77831: PPOPN 11
77833: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77834: LD_VAR 0 1
77838: PPUSH
77839: LD_VAR 0 2
77843: PPUSH
77844: LD_VAR 0 3
77848: PPUSH
77849: LD_VAR 0 4
77853: PPUSH
77854: LD_VAR 0 5
77858: PPUSH
77859: CALL 77980 0 5
// end ; end_of_file
77863: PPOPN 5
77865: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
77866: LD_INT 0
77868: PPUSH
77869: PPUSH
77870: PPUSH
77871: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
77872: LD_VAR 0 1
77876: PPUSH
77877: CALL_OW 264
77881: PUSH
77882: LD_EXP 63
77886: EQUAL
77887: IFFALSE 77959
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
77889: LD_INT 68
77891: PPUSH
77892: LD_VAR 0 1
77896: PPUSH
77897: CALL_OW 255
77901: PPUSH
77902: CALL_OW 321
77906: PUSH
77907: LD_INT 2
77909: EQUAL
77910: IFFALSE 77922
// eff := 70 else
77912: LD_ADDR_VAR 0 4
77916: PUSH
77917: LD_INT 70
77919: ST_TO_ADDR
77920: GO 77930
// eff := 30 ;
77922: LD_ADDR_VAR 0 4
77926: PUSH
77927: LD_INT 30
77929: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
77930: LD_VAR 0 1
77934: PPUSH
77935: CALL_OW 250
77939: PPUSH
77940: LD_VAR 0 1
77944: PPUSH
77945: CALL_OW 251
77949: PPUSH
77950: LD_VAR 0 4
77954: PPUSH
77955: CALL_OW 495
// end ; end ;
77959: LD_VAR 0 2
77963: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
77964: LD_INT 0
77966: PPUSH
// end ;
77967: LD_VAR 0 4
77971: RET
// export function SOS_Command ( cmd ) ; begin
77972: LD_INT 0
77974: PPUSH
// end ;
77975: LD_VAR 0 2
77979: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
77980: LD_INT 0
77982: PPUSH
// if cmd = 121 then
77983: LD_VAR 0 1
77987: PUSH
77988: LD_INT 121
77990: EQUAL
77991: IFFALSE 77993
// end ;
77993: LD_VAR 0 6
77997: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
77998: LD_INT 0
78000: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
78001: LD_VAR 0 1
78005: PUSH
78006: LD_INT 250
78008: EQUAL
78009: PUSH
78010: LD_VAR 0 2
78014: PPUSH
78015: CALL_OW 264
78019: PUSH
78020: LD_EXP 66
78024: EQUAL
78025: AND
78026: IFFALSE 78047
// MinerPlaceMine ( unit , x , y ) ;
78028: LD_VAR 0 2
78032: PPUSH
78033: LD_VAR 0 4
78037: PPUSH
78038: LD_VAR 0 5
78042: PPUSH
78043: CALL 80396 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
78047: LD_VAR 0 1
78051: PUSH
78052: LD_INT 251
78054: EQUAL
78055: PUSH
78056: LD_VAR 0 2
78060: PPUSH
78061: CALL_OW 264
78065: PUSH
78066: LD_EXP 66
78070: EQUAL
78071: AND
78072: IFFALSE 78093
// MinerDetonateMine ( unit , x , y ) ;
78074: LD_VAR 0 2
78078: PPUSH
78079: LD_VAR 0 4
78083: PPUSH
78084: LD_VAR 0 5
78088: PPUSH
78089: CALL 80673 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
78093: LD_VAR 0 1
78097: PUSH
78098: LD_INT 252
78100: EQUAL
78101: PUSH
78102: LD_VAR 0 2
78106: PPUSH
78107: CALL_OW 264
78111: PUSH
78112: LD_EXP 66
78116: EQUAL
78117: AND
78118: IFFALSE 78139
// MinerCreateMinefield ( unit , x , y ) ;
78120: LD_VAR 0 2
78124: PPUSH
78125: LD_VAR 0 4
78129: PPUSH
78130: LD_VAR 0 5
78134: PPUSH
78135: CALL 81090 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
78139: LD_VAR 0 1
78143: PUSH
78144: LD_INT 253
78146: EQUAL
78147: PUSH
78148: LD_VAR 0 2
78152: PPUSH
78153: CALL_OW 257
78157: PUSH
78158: LD_INT 5
78160: EQUAL
78161: AND
78162: IFFALSE 78183
// ComBinocular ( unit , x , y ) ;
78164: LD_VAR 0 2
78168: PPUSH
78169: LD_VAR 0 4
78173: PPUSH
78174: LD_VAR 0 5
78178: PPUSH
78179: CALL 81461 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
78183: LD_VAR 0 1
78187: PUSH
78188: LD_INT 254
78190: EQUAL
78191: PUSH
78192: LD_VAR 0 2
78196: PPUSH
78197: CALL_OW 264
78201: PUSH
78202: LD_EXP 61
78206: EQUAL
78207: AND
78208: PUSH
78209: LD_VAR 0 3
78213: PPUSH
78214: CALL_OW 263
78218: PUSH
78219: LD_INT 3
78221: EQUAL
78222: AND
78223: IFFALSE 78239
// HackDestroyVehicle ( unit , selectedUnit ) ;
78225: LD_VAR 0 2
78229: PPUSH
78230: LD_VAR 0 3
78234: PPUSH
78235: CALL 79756 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
78239: LD_VAR 0 1
78243: PUSH
78244: LD_INT 255
78246: EQUAL
78247: PUSH
78248: LD_VAR 0 2
78252: PPUSH
78253: CALL_OW 264
78257: PUSH
78258: LD_INT 14
78260: PUSH
78261: LD_INT 53
78263: PUSH
78264: EMPTY
78265: LIST
78266: LIST
78267: IN
78268: AND
78269: PUSH
78270: LD_VAR 0 4
78274: PPUSH
78275: LD_VAR 0 5
78279: PPUSH
78280: CALL_OW 488
78284: AND
78285: IFFALSE 78309
// CutTreeXYR ( unit , x , y , 12 ) ;
78287: LD_VAR 0 2
78291: PPUSH
78292: LD_VAR 0 4
78296: PPUSH
78297: LD_VAR 0 5
78301: PPUSH
78302: LD_INT 12
78304: PPUSH
78305: CALL 78322 0 4
// end ;
78309: LD_VAR 0 6
78313: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
78314: LD_INT 0
78316: PPUSH
// end ;
78317: LD_VAR 0 4
78321: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
78322: LD_INT 0
78324: PPUSH
78325: PPUSH
78326: PPUSH
78327: PPUSH
78328: PPUSH
78329: PPUSH
78330: PPUSH
78331: PPUSH
78332: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
78333: LD_VAR 0 1
78337: NOT
78338: PUSH
78339: LD_VAR 0 2
78343: PPUSH
78344: LD_VAR 0 3
78348: PPUSH
78349: CALL_OW 488
78353: NOT
78354: OR
78355: PUSH
78356: LD_VAR 0 4
78360: NOT
78361: OR
78362: IFFALSE 78366
// exit ;
78364: GO 78706
// list := [ ] ;
78366: LD_ADDR_VAR 0 13
78370: PUSH
78371: EMPTY
78372: ST_TO_ADDR
// if x - r < 0 then
78373: LD_VAR 0 2
78377: PUSH
78378: LD_VAR 0 4
78382: MINUS
78383: PUSH
78384: LD_INT 0
78386: LESS
78387: IFFALSE 78399
// min_x := 0 else
78389: LD_ADDR_VAR 0 7
78393: PUSH
78394: LD_INT 0
78396: ST_TO_ADDR
78397: GO 78415
// min_x := x - r ;
78399: LD_ADDR_VAR 0 7
78403: PUSH
78404: LD_VAR 0 2
78408: PUSH
78409: LD_VAR 0 4
78413: MINUS
78414: ST_TO_ADDR
// if y - r < 0 then
78415: LD_VAR 0 3
78419: PUSH
78420: LD_VAR 0 4
78424: MINUS
78425: PUSH
78426: LD_INT 0
78428: LESS
78429: IFFALSE 78441
// min_y := 0 else
78431: LD_ADDR_VAR 0 8
78435: PUSH
78436: LD_INT 0
78438: ST_TO_ADDR
78439: GO 78457
// min_y := y - r ;
78441: LD_ADDR_VAR 0 8
78445: PUSH
78446: LD_VAR 0 3
78450: PUSH
78451: LD_VAR 0 4
78455: MINUS
78456: ST_TO_ADDR
// max_x := x + r ;
78457: LD_ADDR_VAR 0 9
78461: PUSH
78462: LD_VAR 0 2
78466: PUSH
78467: LD_VAR 0 4
78471: PLUS
78472: ST_TO_ADDR
// max_y := y + r ;
78473: LD_ADDR_VAR 0 10
78477: PUSH
78478: LD_VAR 0 3
78482: PUSH
78483: LD_VAR 0 4
78487: PLUS
78488: ST_TO_ADDR
// for _x = min_x to max_x do
78489: LD_ADDR_VAR 0 11
78493: PUSH
78494: DOUBLE
78495: LD_VAR 0 7
78499: DEC
78500: ST_TO_ADDR
78501: LD_VAR 0 9
78505: PUSH
78506: FOR_TO
78507: IFFALSE 78624
// for _y = min_y to max_y do
78509: LD_ADDR_VAR 0 12
78513: PUSH
78514: DOUBLE
78515: LD_VAR 0 8
78519: DEC
78520: ST_TO_ADDR
78521: LD_VAR 0 10
78525: PUSH
78526: FOR_TO
78527: IFFALSE 78620
// begin if not ValidHex ( _x , _y ) then
78529: LD_VAR 0 11
78533: PPUSH
78534: LD_VAR 0 12
78538: PPUSH
78539: CALL_OW 488
78543: NOT
78544: IFFALSE 78548
// continue ;
78546: GO 78526
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
78548: LD_VAR 0 11
78552: PPUSH
78553: LD_VAR 0 12
78557: PPUSH
78558: CALL_OW 351
78562: PUSH
78563: LD_VAR 0 11
78567: PPUSH
78568: LD_VAR 0 12
78572: PPUSH
78573: CALL_OW 554
78577: AND
78578: IFFALSE 78618
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
78580: LD_ADDR_VAR 0 13
78584: PUSH
78585: LD_VAR 0 13
78589: PPUSH
78590: LD_VAR 0 13
78594: PUSH
78595: LD_INT 1
78597: PLUS
78598: PPUSH
78599: LD_VAR 0 11
78603: PUSH
78604: LD_VAR 0 12
78608: PUSH
78609: EMPTY
78610: LIST
78611: LIST
78612: PPUSH
78613: CALL_OW 2
78617: ST_TO_ADDR
// end ;
78618: GO 78526
78620: POP
78621: POP
78622: GO 78506
78624: POP
78625: POP
// if not list then
78626: LD_VAR 0 13
78630: NOT
78631: IFFALSE 78635
// exit ;
78633: GO 78706
// for i in list do
78635: LD_ADDR_VAR 0 6
78639: PUSH
78640: LD_VAR 0 13
78644: PUSH
78645: FOR_IN
78646: IFFALSE 78704
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
78648: LD_VAR 0 1
78652: PPUSH
78653: LD_STRING M
78655: PUSH
78656: LD_VAR 0 6
78660: PUSH
78661: LD_INT 1
78663: ARRAY
78664: PUSH
78665: LD_VAR 0 6
78669: PUSH
78670: LD_INT 2
78672: ARRAY
78673: PUSH
78674: LD_INT 0
78676: PUSH
78677: LD_INT 0
78679: PUSH
78680: LD_INT 0
78682: PUSH
78683: LD_INT 0
78685: PUSH
78686: EMPTY
78687: LIST
78688: LIST
78689: LIST
78690: LIST
78691: LIST
78692: LIST
78693: LIST
78694: PUSH
78695: EMPTY
78696: LIST
78697: PPUSH
78698: CALL_OW 447
78702: GO 78645
78704: POP
78705: POP
// end ;
78706: LD_VAR 0 5
78710: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
78711: LD_EXP 135
78715: NOT
78716: IFFALSE 78766
78718: GO 78720
78720: DISABLE
// begin initHack := true ;
78721: LD_ADDR_EXP 135
78725: PUSH
78726: LD_INT 1
78728: ST_TO_ADDR
// hackTanks := [ ] ;
78729: LD_ADDR_EXP 136
78733: PUSH
78734: EMPTY
78735: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
78736: LD_ADDR_EXP 137
78740: PUSH
78741: EMPTY
78742: ST_TO_ADDR
// hackLimit := 3 ;
78743: LD_ADDR_EXP 138
78747: PUSH
78748: LD_INT 3
78750: ST_TO_ADDR
// hackDist := 12 ;
78751: LD_ADDR_EXP 139
78755: PUSH
78756: LD_INT 12
78758: ST_TO_ADDR
// hackCounter := [ ] ;
78759: LD_ADDR_EXP 140
78763: PUSH
78764: EMPTY
78765: ST_TO_ADDR
// end ;
78766: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
78767: LD_EXP 135
78771: PUSH
78772: LD_INT 34
78774: PUSH
78775: LD_EXP 61
78779: PUSH
78780: EMPTY
78781: LIST
78782: LIST
78783: PPUSH
78784: CALL_OW 69
78788: AND
78789: IFFALSE 79044
78791: GO 78793
78793: DISABLE
78794: LD_INT 0
78796: PPUSH
78797: PPUSH
// begin enable ;
78798: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
78799: LD_ADDR_VAR 0 1
78803: PUSH
78804: LD_INT 34
78806: PUSH
78807: LD_EXP 61
78811: PUSH
78812: EMPTY
78813: LIST
78814: LIST
78815: PPUSH
78816: CALL_OW 69
78820: PUSH
78821: FOR_IN
78822: IFFALSE 79042
// begin if not i in hackTanks then
78824: LD_VAR 0 1
78828: PUSH
78829: LD_EXP 136
78833: IN
78834: NOT
78835: IFFALSE 78918
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
78837: LD_ADDR_EXP 136
78841: PUSH
78842: LD_EXP 136
78846: PPUSH
78847: LD_EXP 136
78851: PUSH
78852: LD_INT 1
78854: PLUS
78855: PPUSH
78856: LD_VAR 0 1
78860: PPUSH
78861: CALL_OW 1
78865: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
78866: LD_ADDR_EXP 137
78870: PUSH
78871: LD_EXP 137
78875: PPUSH
78876: LD_EXP 137
78880: PUSH
78881: LD_INT 1
78883: PLUS
78884: PPUSH
78885: EMPTY
78886: PPUSH
78887: CALL_OW 1
78891: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
78892: LD_ADDR_EXP 140
78896: PUSH
78897: LD_EXP 140
78901: PPUSH
78902: LD_EXP 140
78906: PUSH
78907: LD_INT 1
78909: PLUS
78910: PPUSH
78911: EMPTY
78912: PPUSH
78913: CALL_OW 1
78917: ST_TO_ADDR
// end ; if not IsOk ( i ) then
78918: LD_VAR 0 1
78922: PPUSH
78923: CALL_OW 302
78927: NOT
78928: IFFALSE 78941
// begin HackUnlinkAll ( i ) ;
78930: LD_VAR 0 1
78934: PPUSH
78935: CALL 79047 0 1
// continue ;
78939: GO 78821
// end ; HackCheckCapturedStatus ( i ) ;
78941: LD_VAR 0 1
78945: PPUSH
78946: CALL 79490 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
78950: LD_ADDR_VAR 0 2
78954: PUSH
78955: LD_INT 81
78957: PUSH
78958: LD_VAR 0 1
78962: PPUSH
78963: CALL_OW 255
78967: PUSH
78968: EMPTY
78969: LIST
78970: LIST
78971: PUSH
78972: LD_INT 33
78974: PUSH
78975: LD_INT 3
78977: PUSH
78978: EMPTY
78979: LIST
78980: LIST
78981: PUSH
78982: LD_INT 91
78984: PUSH
78985: LD_VAR 0 1
78989: PUSH
78990: LD_EXP 139
78994: PUSH
78995: EMPTY
78996: LIST
78997: LIST
78998: LIST
78999: PUSH
79000: LD_INT 50
79002: PUSH
79003: EMPTY
79004: LIST
79005: PUSH
79006: EMPTY
79007: LIST
79008: LIST
79009: LIST
79010: LIST
79011: PPUSH
79012: CALL_OW 69
79016: ST_TO_ADDR
// if not tmp then
79017: LD_VAR 0 2
79021: NOT
79022: IFFALSE 79026
// continue ;
79024: GO 78821
// HackLink ( i , tmp ) ;
79026: LD_VAR 0 1
79030: PPUSH
79031: LD_VAR 0 2
79035: PPUSH
79036: CALL 79183 0 2
// end ;
79040: GO 78821
79042: POP
79043: POP
// end ;
79044: PPOPN 2
79046: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
79047: LD_INT 0
79049: PPUSH
79050: PPUSH
79051: PPUSH
// if not hack in hackTanks then
79052: LD_VAR 0 1
79056: PUSH
79057: LD_EXP 136
79061: IN
79062: NOT
79063: IFFALSE 79067
// exit ;
79065: GO 79178
// index := GetElementIndex ( hackTanks , hack ) ;
79067: LD_ADDR_VAR 0 4
79071: PUSH
79072: LD_EXP 136
79076: PPUSH
79077: LD_VAR 0 1
79081: PPUSH
79082: CALL 29579 0 2
79086: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
79087: LD_EXP 137
79091: PUSH
79092: LD_VAR 0 4
79096: ARRAY
79097: IFFALSE 79178
// begin for i in hackTanksCaptured [ index ] do
79099: LD_ADDR_VAR 0 3
79103: PUSH
79104: LD_EXP 137
79108: PUSH
79109: LD_VAR 0 4
79113: ARRAY
79114: PUSH
79115: FOR_IN
79116: IFFALSE 79142
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
79118: LD_VAR 0 3
79122: PUSH
79123: LD_INT 1
79125: ARRAY
79126: PPUSH
79127: LD_VAR 0 3
79131: PUSH
79132: LD_INT 2
79134: ARRAY
79135: PPUSH
79136: CALL_OW 235
79140: GO 79115
79142: POP
79143: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
79144: LD_ADDR_EXP 137
79148: PUSH
79149: LD_EXP 137
79153: PPUSH
79154: LD_VAR 0 4
79158: PPUSH
79159: EMPTY
79160: PPUSH
79161: CALL_OW 1
79165: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
79166: LD_VAR 0 1
79170: PPUSH
79171: LD_INT 0
79173: PPUSH
79174: CALL_OW 505
// end ; end ;
79178: LD_VAR 0 2
79182: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
79183: LD_INT 0
79185: PPUSH
79186: PPUSH
79187: PPUSH
// if not hack in hackTanks or not vehicles then
79188: LD_VAR 0 1
79192: PUSH
79193: LD_EXP 136
79197: IN
79198: NOT
79199: PUSH
79200: LD_VAR 0 2
79204: NOT
79205: OR
79206: IFFALSE 79210
// exit ;
79208: GO 79485
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
79210: LD_ADDR_VAR 0 2
79214: PUSH
79215: LD_VAR 0 1
79219: PPUSH
79220: LD_VAR 0 2
79224: PPUSH
79225: LD_INT 1
79227: PPUSH
79228: LD_INT 1
79230: PPUSH
79231: CALL 30229 0 4
79235: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
79236: LD_ADDR_VAR 0 5
79240: PUSH
79241: LD_EXP 136
79245: PPUSH
79246: LD_VAR 0 1
79250: PPUSH
79251: CALL 29579 0 2
79255: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
79256: LD_EXP 137
79260: PUSH
79261: LD_VAR 0 5
79265: ARRAY
79266: PUSH
79267: LD_EXP 138
79271: LESS
79272: IFFALSE 79461
// begin for i := 1 to vehicles do
79274: LD_ADDR_VAR 0 4
79278: PUSH
79279: DOUBLE
79280: LD_INT 1
79282: DEC
79283: ST_TO_ADDR
79284: LD_VAR 0 2
79288: PUSH
79289: FOR_TO
79290: IFFALSE 79459
// begin if hackTanksCaptured [ index ] = hackLimit then
79292: LD_EXP 137
79296: PUSH
79297: LD_VAR 0 5
79301: ARRAY
79302: PUSH
79303: LD_EXP 138
79307: EQUAL
79308: IFFALSE 79312
// break ;
79310: GO 79459
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
79312: LD_ADDR_EXP 140
79316: PUSH
79317: LD_EXP 140
79321: PPUSH
79322: LD_VAR 0 5
79326: PPUSH
79327: LD_EXP 140
79331: PUSH
79332: LD_VAR 0 5
79336: ARRAY
79337: PUSH
79338: LD_INT 1
79340: PLUS
79341: PPUSH
79342: CALL_OW 1
79346: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
79347: LD_ADDR_EXP 137
79351: PUSH
79352: LD_EXP 137
79356: PPUSH
79357: LD_VAR 0 5
79361: PUSH
79362: LD_EXP 137
79366: PUSH
79367: LD_VAR 0 5
79371: ARRAY
79372: PUSH
79373: LD_INT 1
79375: PLUS
79376: PUSH
79377: EMPTY
79378: LIST
79379: LIST
79380: PPUSH
79381: LD_VAR 0 2
79385: PUSH
79386: LD_VAR 0 4
79390: ARRAY
79391: PUSH
79392: LD_VAR 0 2
79396: PUSH
79397: LD_VAR 0 4
79401: ARRAY
79402: PPUSH
79403: CALL_OW 255
79407: PUSH
79408: EMPTY
79409: LIST
79410: LIST
79411: PPUSH
79412: CALL 29794 0 3
79416: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
79417: LD_VAR 0 2
79421: PUSH
79422: LD_VAR 0 4
79426: ARRAY
79427: PPUSH
79428: LD_VAR 0 1
79432: PPUSH
79433: CALL_OW 255
79437: PPUSH
79438: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
79442: LD_VAR 0 2
79446: PUSH
79447: LD_VAR 0 4
79451: ARRAY
79452: PPUSH
79453: CALL_OW 141
// end ;
79457: GO 79289
79459: POP
79460: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
79461: LD_VAR 0 1
79465: PPUSH
79466: LD_EXP 137
79470: PUSH
79471: LD_VAR 0 5
79475: ARRAY
79476: PUSH
79477: LD_INT 0
79479: PLUS
79480: PPUSH
79481: CALL_OW 505
// end ;
79485: LD_VAR 0 3
79489: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
79490: LD_INT 0
79492: PPUSH
79493: PPUSH
79494: PPUSH
79495: PPUSH
// if not hack in hackTanks then
79496: LD_VAR 0 1
79500: PUSH
79501: LD_EXP 136
79505: IN
79506: NOT
79507: IFFALSE 79511
// exit ;
79509: GO 79751
// index := GetElementIndex ( hackTanks , hack ) ;
79511: LD_ADDR_VAR 0 4
79515: PUSH
79516: LD_EXP 136
79520: PPUSH
79521: LD_VAR 0 1
79525: PPUSH
79526: CALL 29579 0 2
79530: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
79531: LD_ADDR_VAR 0 3
79535: PUSH
79536: DOUBLE
79537: LD_EXP 137
79541: PUSH
79542: LD_VAR 0 4
79546: ARRAY
79547: INC
79548: ST_TO_ADDR
79549: LD_INT 1
79551: PUSH
79552: FOR_DOWNTO
79553: IFFALSE 79725
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
79555: LD_ADDR_VAR 0 5
79559: PUSH
79560: LD_EXP 137
79564: PUSH
79565: LD_VAR 0 4
79569: ARRAY
79570: PUSH
79571: LD_VAR 0 3
79575: ARRAY
79576: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
79577: LD_VAR 0 5
79581: PUSH
79582: LD_INT 1
79584: ARRAY
79585: PPUSH
79586: CALL_OW 302
79590: NOT
79591: PUSH
79592: LD_VAR 0 5
79596: PUSH
79597: LD_INT 1
79599: ARRAY
79600: PPUSH
79601: CALL_OW 255
79605: PUSH
79606: LD_VAR 0 1
79610: PPUSH
79611: CALL_OW 255
79615: NONEQUAL
79616: OR
79617: IFFALSE 79723
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
79619: LD_VAR 0 5
79623: PUSH
79624: LD_INT 1
79626: ARRAY
79627: PPUSH
79628: CALL_OW 305
79632: PUSH
79633: LD_VAR 0 5
79637: PUSH
79638: LD_INT 1
79640: ARRAY
79641: PPUSH
79642: CALL_OW 255
79646: PUSH
79647: LD_VAR 0 1
79651: PPUSH
79652: CALL_OW 255
79656: EQUAL
79657: AND
79658: IFFALSE 79682
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
79660: LD_VAR 0 5
79664: PUSH
79665: LD_INT 1
79667: ARRAY
79668: PPUSH
79669: LD_VAR 0 5
79673: PUSH
79674: LD_INT 2
79676: ARRAY
79677: PPUSH
79678: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
79682: LD_ADDR_EXP 137
79686: PUSH
79687: LD_EXP 137
79691: PPUSH
79692: LD_VAR 0 4
79696: PPUSH
79697: LD_EXP 137
79701: PUSH
79702: LD_VAR 0 4
79706: ARRAY
79707: PPUSH
79708: LD_VAR 0 3
79712: PPUSH
79713: CALL_OW 3
79717: PPUSH
79718: CALL_OW 1
79722: ST_TO_ADDR
// end ; end ;
79723: GO 79552
79725: POP
79726: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
79727: LD_VAR 0 1
79731: PPUSH
79732: LD_EXP 137
79736: PUSH
79737: LD_VAR 0 4
79741: ARRAY
79742: PUSH
79743: LD_INT 0
79745: PLUS
79746: PPUSH
79747: CALL_OW 505
// end ;
79751: LD_VAR 0 2
79755: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
79756: LD_INT 0
79758: PPUSH
79759: PPUSH
79760: PPUSH
79761: PPUSH
// if not hack in hackTanks then
79762: LD_VAR 0 1
79766: PUSH
79767: LD_EXP 136
79771: IN
79772: NOT
79773: IFFALSE 79777
// exit ;
79775: GO 79862
// index := GetElementIndex ( hackTanks , hack ) ;
79777: LD_ADDR_VAR 0 5
79781: PUSH
79782: LD_EXP 136
79786: PPUSH
79787: LD_VAR 0 1
79791: PPUSH
79792: CALL 29579 0 2
79796: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
79797: LD_ADDR_VAR 0 4
79801: PUSH
79802: DOUBLE
79803: LD_INT 1
79805: DEC
79806: ST_TO_ADDR
79807: LD_EXP 137
79811: PUSH
79812: LD_VAR 0 5
79816: ARRAY
79817: PUSH
79818: FOR_TO
79819: IFFALSE 79860
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
79821: LD_EXP 137
79825: PUSH
79826: LD_VAR 0 5
79830: ARRAY
79831: PUSH
79832: LD_VAR 0 4
79836: ARRAY
79837: PUSH
79838: LD_INT 1
79840: ARRAY
79841: PUSH
79842: LD_VAR 0 2
79846: EQUAL
79847: IFFALSE 79858
// KillUnit ( vehicle ) ;
79849: LD_VAR 0 2
79853: PPUSH
79854: CALL_OW 66
79858: GO 79818
79860: POP
79861: POP
// end ;
79862: LD_VAR 0 3
79866: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
79867: LD_EXP 141
79871: NOT
79872: IFFALSE 79907
79874: GO 79876
79876: DISABLE
// begin initMiner := true ;
79877: LD_ADDR_EXP 141
79881: PUSH
79882: LD_INT 1
79884: ST_TO_ADDR
// minersList := [ ] ;
79885: LD_ADDR_EXP 142
79889: PUSH
79890: EMPTY
79891: ST_TO_ADDR
// minerMinesList := [ ] ;
79892: LD_ADDR_EXP 143
79896: PUSH
79897: EMPTY
79898: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
79899: LD_ADDR_EXP 144
79903: PUSH
79904: LD_INT 5
79906: ST_TO_ADDR
// end ;
79907: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
79908: LD_EXP 141
79912: PUSH
79913: LD_INT 34
79915: PUSH
79916: LD_EXP 66
79920: PUSH
79921: EMPTY
79922: LIST
79923: LIST
79924: PPUSH
79925: CALL_OW 69
79929: AND
79930: IFFALSE 80393
79932: GO 79934
79934: DISABLE
79935: LD_INT 0
79937: PPUSH
79938: PPUSH
79939: PPUSH
79940: PPUSH
// begin enable ;
79941: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
79942: LD_ADDR_VAR 0 1
79946: PUSH
79947: LD_INT 34
79949: PUSH
79950: LD_EXP 66
79954: PUSH
79955: EMPTY
79956: LIST
79957: LIST
79958: PPUSH
79959: CALL_OW 69
79963: PUSH
79964: FOR_IN
79965: IFFALSE 80037
// begin if not i in minersList then
79967: LD_VAR 0 1
79971: PUSH
79972: LD_EXP 142
79976: IN
79977: NOT
79978: IFFALSE 80035
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
79980: LD_ADDR_EXP 142
79984: PUSH
79985: LD_EXP 142
79989: PPUSH
79990: LD_EXP 142
79994: PUSH
79995: LD_INT 1
79997: PLUS
79998: PPUSH
79999: LD_VAR 0 1
80003: PPUSH
80004: CALL_OW 1
80008: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
80009: LD_ADDR_EXP 143
80013: PUSH
80014: LD_EXP 143
80018: PPUSH
80019: LD_EXP 143
80023: PUSH
80024: LD_INT 1
80026: PLUS
80027: PPUSH
80028: EMPTY
80029: PPUSH
80030: CALL_OW 1
80034: ST_TO_ADDR
// end end ;
80035: GO 79964
80037: POP
80038: POP
// for i := minerMinesList downto 1 do
80039: LD_ADDR_VAR 0 1
80043: PUSH
80044: DOUBLE
80045: LD_EXP 143
80049: INC
80050: ST_TO_ADDR
80051: LD_INT 1
80053: PUSH
80054: FOR_DOWNTO
80055: IFFALSE 80391
// begin if IsLive ( minersList [ i ] ) then
80057: LD_EXP 142
80061: PUSH
80062: LD_VAR 0 1
80066: ARRAY
80067: PPUSH
80068: CALL_OW 300
80072: IFFALSE 80100
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
80074: LD_EXP 142
80078: PUSH
80079: LD_VAR 0 1
80083: ARRAY
80084: PPUSH
80085: LD_EXP 143
80089: PUSH
80090: LD_VAR 0 1
80094: ARRAY
80095: PPUSH
80096: CALL_OW 505
// if not minerMinesList [ i ] then
80100: LD_EXP 143
80104: PUSH
80105: LD_VAR 0 1
80109: ARRAY
80110: NOT
80111: IFFALSE 80115
// continue ;
80113: GO 80054
// for j := minerMinesList [ i ] downto 1 do
80115: LD_ADDR_VAR 0 2
80119: PUSH
80120: DOUBLE
80121: LD_EXP 143
80125: PUSH
80126: LD_VAR 0 1
80130: ARRAY
80131: INC
80132: ST_TO_ADDR
80133: LD_INT 1
80135: PUSH
80136: FOR_DOWNTO
80137: IFFALSE 80387
// begin side := GetSide ( minersList [ i ] ) ;
80139: LD_ADDR_VAR 0 3
80143: PUSH
80144: LD_EXP 142
80148: PUSH
80149: LD_VAR 0 1
80153: ARRAY
80154: PPUSH
80155: CALL_OW 255
80159: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
80160: LD_ADDR_VAR 0 4
80164: PUSH
80165: LD_EXP 143
80169: PUSH
80170: LD_VAR 0 1
80174: ARRAY
80175: PUSH
80176: LD_VAR 0 2
80180: ARRAY
80181: PUSH
80182: LD_INT 1
80184: ARRAY
80185: PPUSH
80186: LD_EXP 143
80190: PUSH
80191: LD_VAR 0 1
80195: ARRAY
80196: PUSH
80197: LD_VAR 0 2
80201: ARRAY
80202: PUSH
80203: LD_INT 2
80205: ARRAY
80206: PPUSH
80207: CALL_OW 428
80211: ST_TO_ADDR
// if not tmp then
80212: LD_VAR 0 4
80216: NOT
80217: IFFALSE 80221
// continue ;
80219: GO 80136
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
80221: LD_VAR 0 4
80225: PUSH
80226: LD_INT 81
80228: PUSH
80229: LD_VAR 0 3
80233: PUSH
80234: EMPTY
80235: LIST
80236: LIST
80237: PPUSH
80238: CALL_OW 69
80242: IN
80243: PUSH
80244: LD_EXP 143
80248: PUSH
80249: LD_VAR 0 1
80253: ARRAY
80254: PUSH
80255: LD_VAR 0 2
80259: ARRAY
80260: PUSH
80261: LD_INT 1
80263: ARRAY
80264: PPUSH
80265: LD_EXP 143
80269: PUSH
80270: LD_VAR 0 1
80274: ARRAY
80275: PUSH
80276: LD_VAR 0 2
80280: ARRAY
80281: PUSH
80282: LD_INT 2
80284: ARRAY
80285: PPUSH
80286: CALL_OW 458
80290: AND
80291: IFFALSE 80385
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
80293: LD_EXP 143
80297: PUSH
80298: LD_VAR 0 1
80302: ARRAY
80303: PUSH
80304: LD_VAR 0 2
80308: ARRAY
80309: PUSH
80310: LD_INT 1
80312: ARRAY
80313: PPUSH
80314: LD_EXP 143
80318: PUSH
80319: LD_VAR 0 1
80323: ARRAY
80324: PUSH
80325: LD_VAR 0 2
80329: ARRAY
80330: PUSH
80331: LD_INT 2
80333: ARRAY
80334: PPUSH
80335: LD_VAR 0 3
80339: PPUSH
80340: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
80344: LD_ADDR_EXP 143
80348: PUSH
80349: LD_EXP 143
80353: PPUSH
80354: LD_VAR 0 1
80358: PPUSH
80359: LD_EXP 143
80363: PUSH
80364: LD_VAR 0 1
80368: ARRAY
80369: PPUSH
80370: LD_VAR 0 2
80374: PPUSH
80375: CALL_OW 3
80379: PPUSH
80380: CALL_OW 1
80384: ST_TO_ADDR
// end ; end ;
80385: GO 80136
80387: POP
80388: POP
// end ;
80389: GO 80054
80391: POP
80392: POP
// end ;
80393: PPOPN 4
80395: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
80396: LD_INT 0
80398: PPUSH
80399: PPUSH
// result := false ;
80400: LD_ADDR_VAR 0 4
80404: PUSH
80405: LD_INT 0
80407: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
80408: LD_VAR 0 1
80412: PPUSH
80413: CALL_OW 264
80417: PUSH
80418: LD_EXP 66
80422: EQUAL
80423: NOT
80424: IFFALSE 80428
// exit ;
80426: GO 80668
// index := GetElementIndex ( minersList , unit ) ;
80428: LD_ADDR_VAR 0 5
80432: PUSH
80433: LD_EXP 142
80437: PPUSH
80438: LD_VAR 0 1
80442: PPUSH
80443: CALL 29579 0 2
80447: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
80448: LD_EXP 143
80452: PUSH
80453: LD_VAR 0 5
80457: ARRAY
80458: PUSH
80459: LD_EXP 144
80463: GREATEREQUAL
80464: IFFALSE 80468
// exit ;
80466: GO 80668
// ComMoveXY ( unit , x , y ) ;
80468: LD_VAR 0 1
80472: PPUSH
80473: LD_VAR 0 2
80477: PPUSH
80478: LD_VAR 0 3
80482: PPUSH
80483: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
80487: LD_INT 35
80489: PPUSH
80490: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
80494: LD_VAR 0 1
80498: PPUSH
80499: LD_VAR 0 2
80503: PPUSH
80504: LD_VAR 0 3
80508: PPUSH
80509: CALL 60351 0 3
80513: NOT
80514: PUSH
80515: LD_VAR 0 1
80519: PPUSH
80520: CALL_OW 314
80524: AND
80525: IFFALSE 80529
// exit ;
80527: GO 80668
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
80529: LD_VAR 0 2
80533: PPUSH
80534: LD_VAR 0 3
80538: PPUSH
80539: CALL_OW 428
80543: PUSH
80544: LD_VAR 0 1
80548: EQUAL
80549: PUSH
80550: LD_VAR 0 1
80554: PPUSH
80555: CALL_OW 314
80559: NOT
80560: AND
80561: IFFALSE 80487
// PlaySoundXY ( x , y , PlantMine ) ;
80563: LD_VAR 0 2
80567: PPUSH
80568: LD_VAR 0 3
80572: PPUSH
80573: LD_STRING PlantMine
80575: PPUSH
80576: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
80580: LD_VAR 0 2
80584: PPUSH
80585: LD_VAR 0 3
80589: PPUSH
80590: LD_VAR 0 1
80594: PPUSH
80595: CALL_OW 255
80599: PPUSH
80600: LD_INT 0
80602: PPUSH
80603: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
80607: LD_ADDR_EXP 143
80611: PUSH
80612: LD_EXP 143
80616: PPUSH
80617: LD_VAR 0 5
80621: PUSH
80622: LD_EXP 143
80626: PUSH
80627: LD_VAR 0 5
80631: ARRAY
80632: PUSH
80633: LD_INT 1
80635: PLUS
80636: PUSH
80637: EMPTY
80638: LIST
80639: LIST
80640: PPUSH
80641: LD_VAR 0 2
80645: PUSH
80646: LD_VAR 0 3
80650: PUSH
80651: EMPTY
80652: LIST
80653: LIST
80654: PPUSH
80655: CALL 29794 0 3
80659: ST_TO_ADDR
// result := true ;
80660: LD_ADDR_VAR 0 4
80664: PUSH
80665: LD_INT 1
80667: ST_TO_ADDR
// end ;
80668: LD_VAR 0 4
80672: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
80673: LD_INT 0
80675: PPUSH
80676: PPUSH
80677: PPUSH
// if not unit in minersList then
80678: LD_VAR 0 1
80682: PUSH
80683: LD_EXP 142
80687: IN
80688: NOT
80689: IFFALSE 80693
// exit ;
80691: GO 81085
// index := GetElementIndex ( minersList , unit ) ;
80693: LD_ADDR_VAR 0 6
80697: PUSH
80698: LD_EXP 142
80702: PPUSH
80703: LD_VAR 0 1
80707: PPUSH
80708: CALL 29579 0 2
80712: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
80713: LD_ADDR_VAR 0 5
80717: PUSH
80718: DOUBLE
80719: LD_EXP 143
80723: PUSH
80724: LD_VAR 0 6
80728: ARRAY
80729: INC
80730: ST_TO_ADDR
80731: LD_INT 1
80733: PUSH
80734: FOR_DOWNTO
80735: IFFALSE 80896
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
80737: LD_EXP 143
80741: PUSH
80742: LD_VAR 0 6
80746: ARRAY
80747: PUSH
80748: LD_VAR 0 5
80752: ARRAY
80753: PUSH
80754: LD_INT 1
80756: ARRAY
80757: PUSH
80758: LD_VAR 0 2
80762: EQUAL
80763: PUSH
80764: LD_EXP 143
80768: PUSH
80769: LD_VAR 0 6
80773: ARRAY
80774: PUSH
80775: LD_VAR 0 5
80779: ARRAY
80780: PUSH
80781: LD_INT 2
80783: ARRAY
80784: PUSH
80785: LD_VAR 0 3
80789: EQUAL
80790: AND
80791: IFFALSE 80894
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
80793: LD_EXP 143
80797: PUSH
80798: LD_VAR 0 6
80802: ARRAY
80803: PUSH
80804: LD_VAR 0 5
80808: ARRAY
80809: PUSH
80810: LD_INT 1
80812: ARRAY
80813: PPUSH
80814: LD_EXP 143
80818: PUSH
80819: LD_VAR 0 6
80823: ARRAY
80824: PUSH
80825: LD_VAR 0 5
80829: ARRAY
80830: PUSH
80831: LD_INT 2
80833: ARRAY
80834: PPUSH
80835: LD_VAR 0 1
80839: PPUSH
80840: CALL_OW 255
80844: PPUSH
80845: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
80849: LD_ADDR_EXP 143
80853: PUSH
80854: LD_EXP 143
80858: PPUSH
80859: LD_VAR 0 6
80863: PPUSH
80864: LD_EXP 143
80868: PUSH
80869: LD_VAR 0 6
80873: ARRAY
80874: PPUSH
80875: LD_VAR 0 5
80879: PPUSH
80880: CALL_OW 3
80884: PPUSH
80885: CALL_OW 1
80889: ST_TO_ADDR
// exit ;
80890: POP
80891: POP
80892: GO 81085
// end ; end ;
80894: GO 80734
80896: POP
80897: POP
// for i := minerMinesList [ index ] downto 1 do
80898: LD_ADDR_VAR 0 5
80902: PUSH
80903: DOUBLE
80904: LD_EXP 143
80908: PUSH
80909: LD_VAR 0 6
80913: ARRAY
80914: INC
80915: ST_TO_ADDR
80916: LD_INT 1
80918: PUSH
80919: FOR_DOWNTO
80920: IFFALSE 81083
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
80922: LD_EXP 143
80926: PUSH
80927: LD_VAR 0 6
80931: ARRAY
80932: PUSH
80933: LD_VAR 0 5
80937: ARRAY
80938: PUSH
80939: LD_INT 1
80941: ARRAY
80942: PPUSH
80943: LD_EXP 143
80947: PUSH
80948: LD_VAR 0 6
80952: ARRAY
80953: PUSH
80954: LD_VAR 0 5
80958: ARRAY
80959: PUSH
80960: LD_INT 2
80962: ARRAY
80963: PPUSH
80964: LD_VAR 0 2
80968: PPUSH
80969: LD_VAR 0 3
80973: PPUSH
80974: CALL_OW 298
80978: PUSH
80979: LD_INT 6
80981: LESS
80982: IFFALSE 81081
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
80984: LD_EXP 143
80988: PUSH
80989: LD_VAR 0 6
80993: ARRAY
80994: PUSH
80995: LD_VAR 0 5
80999: ARRAY
81000: PUSH
81001: LD_INT 1
81003: ARRAY
81004: PPUSH
81005: LD_EXP 143
81009: PUSH
81010: LD_VAR 0 6
81014: ARRAY
81015: PUSH
81016: LD_VAR 0 5
81020: ARRAY
81021: PUSH
81022: LD_INT 2
81024: ARRAY
81025: PPUSH
81026: LD_VAR 0 1
81030: PPUSH
81031: CALL_OW 255
81035: PPUSH
81036: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
81040: LD_ADDR_EXP 143
81044: PUSH
81045: LD_EXP 143
81049: PPUSH
81050: LD_VAR 0 6
81054: PPUSH
81055: LD_EXP 143
81059: PUSH
81060: LD_VAR 0 6
81064: ARRAY
81065: PPUSH
81066: LD_VAR 0 5
81070: PPUSH
81071: CALL_OW 3
81075: PPUSH
81076: CALL_OW 1
81080: ST_TO_ADDR
// end ; end ;
81081: GO 80919
81083: POP
81084: POP
// end ;
81085: LD_VAR 0 4
81089: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
81090: LD_INT 0
81092: PPUSH
81093: PPUSH
81094: PPUSH
81095: PPUSH
81096: PPUSH
81097: PPUSH
81098: PPUSH
81099: PPUSH
81100: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
81101: LD_VAR 0 1
81105: PPUSH
81106: CALL_OW 264
81110: PUSH
81111: LD_EXP 66
81115: EQUAL
81116: NOT
81117: PUSH
81118: LD_VAR 0 1
81122: PUSH
81123: LD_EXP 142
81127: IN
81128: NOT
81129: OR
81130: IFFALSE 81134
// exit ;
81132: GO 81456
// index := GetElementIndex ( minersList , unit ) ;
81134: LD_ADDR_VAR 0 6
81138: PUSH
81139: LD_EXP 142
81143: PPUSH
81144: LD_VAR 0 1
81148: PPUSH
81149: CALL 29579 0 2
81153: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
81154: LD_ADDR_VAR 0 8
81158: PUSH
81159: LD_EXP 144
81163: PUSH
81164: LD_EXP 143
81168: PUSH
81169: LD_VAR 0 6
81173: ARRAY
81174: MINUS
81175: ST_TO_ADDR
// if not minesFreeAmount then
81176: LD_VAR 0 8
81180: NOT
81181: IFFALSE 81185
// exit ;
81183: GO 81456
// tmp := [ ] ;
81185: LD_ADDR_VAR 0 7
81189: PUSH
81190: EMPTY
81191: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
81192: LD_ADDR_VAR 0 5
81196: PUSH
81197: DOUBLE
81198: LD_INT 1
81200: DEC
81201: ST_TO_ADDR
81202: LD_VAR 0 8
81206: PUSH
81207: FOR_TO
81208: IFFALSE 81403
// begin _d := rand ( 0 , 5 ) ;
81210: LD_ADDR_VAR 0 11
81214: PUSH
81215: LD_INT 0
81217: PPUSH
81218: LD_INT 5
81220: PPUSH
81221: CALL_OW 12
81225: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
81226: LD_ADDR_VAR 0 12
81230: PUSH
81231: LD_INT 2
81233: PPUSH
81234: LD_INT 6
81236: PPUSH
81237: CALL_OW 12
81241: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
81242: LD_ADDR_VAR 0 9
81246: PUSH
81247: LD_VAR 0 2
81251: PPUSH
81252: LD_VAR 0 11
81256: PPUSH
81257: LD_VAR 0 12
81261: PPUSH
81262: CALL_OW 272
81266: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
81267: LD_ADDR_VAR 0 10
81271: PUSH
81272: LD_VAR 0 3
81276: PPUSH
81277: LD_VAR 0 11
81281: PPUSH
81282: LD_VAR 0 12
81286: PPUSH
81287: CALL_OW 273
81291: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
81292: LD_VAR 0 9
81296: PPUSH
81297: LD_VAR 0 10
81301: PPUSH
81302: CALL_OW 488
81306: PUSH
81307: LD_VAR 0 9
81311: PUSH
81312: LD_VAR 0 10
81316: PUSH
81317: EMPTY
81318: LIST
81319: LIST
81320: PUSH
81321: LD_VAR 0 7
81325: IN
81326: NOT
81327: AND
81328: PUSH
81329: LD_VAR 0 9
81333: PPUSH
81334: LD_VAR 0 10
81338: PPUSH
81339: CALL_OW 458
81343: NOT
81344: AND
81345: IFFALSE 81387
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
81347: LD_ADDR_VAR 0 7
81351: PUSH
81352: LD_VAR 0 7
81356: PPUSH
81357: LD_VAR 0 7
81361: PUSH
81362: LD_INT 1
81364: PLUS
81365: PPUSH
81366: LD_VAR 0 9
81370: PUSH
81371: LD_VAR 0 10
81375: PUSH
81376: EMPTY
81377: LIST
81378: LIST
81379: PPUSH
81380: CALL_OW 1
81384: ST_TO_ADDR
81385: GO 81401
// i := i - 1 ;
81387: LD_ADDR_VAR 0 5
81391: PUSH
81392: LD_VAR 0 5
81396: PUSH
81397: LD_INT 1
81399: MINUS
81400: ST_TO_ADDR
// end ;
81401: GO 81207
81403: POP
81404: POP
// for i in tmp do
81405: LD_ADDR_VAR 0 5
81409: PUSH
81410: LD_VAR 0 7
81414: PUSH
81415: FOR_IN
81416: IFFALSE 81454
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
81418: LD_VAR 0 1
81422: PPUSH
81423: LD_VAR 0 5
81427: PUSH
81428: LD_INT 1
81430: ARRAY
81431: PPUSH
81432: LD_VAR 0 5
81436: PUSH
81437: LD_INT 2
81439: ARRAY
81440: PPUSH
81441: CALL 80396 0 3
81445: NOT
81446: IFFALSE 81452
// exit ;
81448: POP
81449: POP
81450: GO 81456
81452: GO 81415
81454: POP
81455: POP
// end ;
81456: LD_VAR 0 4
81460: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
81461: LD_INT 0
81463: PPUSH
81464: PPUSH
81465: PPUSH
81466: PPUSH
81467: PPUSH
81468: PPUSH
81469: PPUSH
// if not GetClass ( unit ) = class_sniper then
81470: LD_VAR 0 1
81474: PPUSH
81475: CALL_OW 257
81479: PUSH
81480: LD_INT 5
81482: EQUAL
81483: NOT
81484: IFFALSE 81488
// exit ;
81486: GO 81876
// dist := 8 ;
81488: LD_ADDR_VAR 0 5
81492: PUSH
81493: LD_INT 8
81495: ST_TO_ADDR
// viewRange := 12 ;
81496: LD_ADDR_VAR 0 7
81500: PUSH
81501: LD_INT 12
81503: ST_TO_ADDR
// side := GetSide ( unit ) ;
81504: LD_ADDR_VAR 0 6
81508: PUSH
81509: LD_VAR 0 1
81513: PPUSH
81514: CALL_OW 255
81518: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
81519: LD_INT 61
81521: PPUSH
81522: LD_VAR 0 6
81526: PPUSH
81527: CALL_OW 321
81531: PUSH
81532: LD_INT 2
81534: EQUAL
81535: IFFALSE 81545
// viewRange := 16 ;
81537: LD_ADDR_VAR 0 7
81541: PUSH
81542: LD_INT 16
81544: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
81545: LD_VAR 0 1
81549: PPUSH
81550: LD_VAR 0 2
81554: PPUSH
81555: LD_VAR 0 3
81559: PPUSH
81560: CALL_OW 297
81564: PUSH
81565: LD_VAR 0 5
81569: GREATER
81570: IFFALSE 81649
// begin ComMoveXY ( unit , x , y ) ;
81572: LD_VAR 0 1
81576: PPUSH
81577: LD_VAR 0 2
81581: PPUSH
81582: LD_VAR 0 3
81586: PPUSH
81587: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
81591: LD_INT 35
81593: PPUSH
81594: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
81598: LD_VAR 0 1
81602: PPUSH
81603: LD_VAR 0 2
81607: PPUSH
81608: LD_VAR 0 3
81612: PPUSH
81613: CALL 60351 0 3
81617: NOT
81618: IFFALSE 81622
// exit ;
81620: GO 81876
// until GetDistUnitXY ( unit , x , y ) < dist ;
81622: LD_VAR 0 1
81626: PPUSH
81627: LD_VAR 0 2
81631: PPUSH
81632: LD_VAR 0 3
81636: PPUSH
81637: CALL_OW 297
81641: PUSH
81642: LD_VAR 0 5
81646: LESS
81647: IFFALSE 81591
// end ; ComTurnXY ( unit , x , y ) ;
81649: LD_VAR 0 1
81653: PPUSH
81654: LD_VAR 0 2
81658: PPUSH
81659: LD_VAR 0 3
81663: PPUSH
81664: CALL_OW 118
// wait ( 5 ) ;
81668: LD_INT 5
81670: PPUSH
81671: CALL_OW 67
// _d := GetDir ( unit ) ;
81675: LD_ADDR_VAR 0 10
81679: PUSH
81680: LD_VAR 0 1
81684: PPUSH
81685: CALL_OW 254
81689: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
81690: LD_ADDR_VAR 0 8
81694: PUSH
81695: LD_VAR 0 1
81699: PPUSH
81700: CALL_OW 250
81704: PPUSH
81705: LD_VAR 0 10
81709: PPUSH
81710: LD_VAR 0 5
81714: PPUSH
81715: CALL_OW 272
81719: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
81720: LD_ADDR_VAR 0 9
81724: PUSH
81725: LD_VAR 0 1
81729: PPUSH
81730: CALL_OW 251
81734: PPUSH
81735: LD_VAR 0 10
81739: PPUSH
81740: LD_VAR 0 5
81744: PPUSH
81745: CALL_OW 273
81749: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81750: LD_VAR 0 8
81754: PPUSH
81755: LD_VAR 0 9
81759: PPUSH
81760: CALL_OW 488
81764: NOT
81765: IFFALSE 81769
// exit ;
81767: GO 81876
// ComAnimCustom ( unit , 1 ) ;
81769: LD_VAR 0 1
81773: PPUSH
81774: LD_INT 1
81776: PPUSH
81777: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
81781: LD_VAR 0 8
81785: PPUSH
81786: LD_VAR 0 9
81790: PPUSH
81791: LD_VAR 0 6
81795: PPUSH
81796: LD_VAR 0 7
81800: PPUSH
81801: CALL_OW 330
// repeat wait ( 1 ) ;
81805: LD_INT 1
81807: PPUSH
81808: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
81812: LD_VAR 0 1
81816: PPUSH
81817: CALL_OW 316
81821: PUSH
81822: LD_VAR 0 1
81826: PPUSH
81827: CALL_OW 314
81831: OR
81832: PUSH
81833: LD_VAR 0 1
81837: PPUSH
81838: CALL_OW 302
81842: NOT
81843: OR
81844: PUSH
81845: LD_VAR 0 1
81849: PPUSH
81850: CALL_OW 301
81854: OR
81855: IFFALSE 81805
// RemoveSeeing ( _x , _y , side ) ;
81857: LD_VAR 0 8
81861: PPUSH
81862: LD_VAR 0 9
81866: PPUSH
81867: LD_VAR 0 6
81871: PPUSH
81872: CALL_OW 331
// end ; end_of_file
81876: LD_VAR 0 4
81880: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81881: LD_VAR 0 1
81885: PPUSH
81886: LD_VAR 0 2
81890: PPUSH
81891: LD_VAR 0 3
81895: PPUSH
81896: LD_VAR 0 4
81900: PPUSH
81901: LD_VAR 0 5
81905: PPUSH
81906: LD_VAR 0 6
81910: PPUSH
81911: CALL 64531 0 6
// end ;
81915: PPOPN 6
81917: END
