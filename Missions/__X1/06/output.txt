// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 44147 0 0
// Init ;
   8: CALL 42 0 0
// CreateNature ( natureArea , swampArea ) ;
  12: LD_INT 1
  14: PPUSH
  15: LD_INT 3
  17: PPUSH
  18: CALL 2144 0 2
// PrepareArabian ;
  22: CALL 82 0 0
// PrepareRussian ;
  26: CALL 2991 0 0
// Action ;
  30: CALL 4503 0 0
// FogOff ( 3 ) ;
  34: LD_INT 3
  36: PPUSH
  37: CALL_OW 344
// end ;
  41: END
// export debug , prefix , bergkampfArrived , outpostDestroyed ; function Init ; begin
  42: LD_INT 0
  44: PPUSH
// debug := true ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 1
  52: ST_TO_ADDR
// prefix := 05_ ;
  53: LD_ADDR_EXP 2
  57: PUSH
  58: LD_STRING 05_
  60: ST_TO_ADDR
// bergkampfArrived := false ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// outpostDestroyed := false ;
  69: LD_ADDR_EXP 4
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// end ; end_of_file
  77: LD_VAR 0 1
  81: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeApes ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , tmp ; begin
  82: LD_INT 0
  84: PPUSH
  85: PPUSH
  86: PPUSH
  87: PPUSH
  88: PPUSH
  89: PPUSH
  90: PPUSH
  91: PPUSH
  92: PPUSH
  93: PPUSH
  94: PPUSH
  95: PPUSH
// uc_nation := 2 ;
  96: LD_ADDR_OWVAR 21
 100: PUSH
 101: LD_INT 2
 103: ST_TO_ADDR
// uc_side := 5 ;
 104: LD_ADDR_OWVAR 20
 108: PUSH
 109: LD_INT 5
 111: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 112: LD_ADDR_EXP 13
 116: PUSH
 117: LD_STRING Abdul
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: LD_STRING 
 125: PPUSH
 126: CALL 6119 0 3
 130: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 131: LD_ADDR_EXP 15
 135: PUSH
 136: LD_STRING Omar
 138: PPUSH
 139: LD_INT 0
 141: PPUSH
 142: LD_STRING 
 144: PPUSH
 145: CALL 6119 0 3
 149: ST_TO_ADDR
// uc_side := 2 ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_INT 2
 157: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 158: LD_ADDR_EXP 5
 162: PUSH
 163: LD_STRING Heike
 165: PPUSH
 166: LD_EXP 1
 170: NOT
 171: PPUSH
 172: LD_EXP 2
 176: PPUSH
 177: CALL 6119 0 3
 181: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 182: LD_ADDR_EXP 8
 186: PUSH
 187: LD_STRING Ibrahim
 189: PPUSH
 190: LD_EXP 1
 194: NOT
 195: PPUSH
 196: LD_EXP 2
 200: PPUSH
 201: CALL 6119 0 3
 205: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 206: LD_ADDR_EXP 6
 210: PUSH
 211: LD_STRING Givi
 213: PPUSH
 214: LD_EXP 1
 218: NOT
 219: PPUSH
 220: LD_EXP 2
 224: PPUSH
 225: CALL 6119 0 3
 229: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 230: LD_ADDR_EXP 9
 234: PUSH
 235: LD_STRING Kamil
 237: PPUSH
 238: LD_EXP 1
 242: NOT
 243: PPUSH
 244: LD_EXP 2
 248: PPUSH
 249: CALL 6119 0 3
 253: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 254: LD_ADDR_EXP 10
 258: PUSH
 259: LD_STRING Kaia
 261: PPUSH
 262: LD_EXP 1
 266: NOT
 267: PPUSH
 268: LD_EXP 2
 272: PPUSH
 273: CALL 6119 0 3
 277: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 278: LD_ADDR_EXP 11
 282: PUSH
 283: LD_STRING Sophia
 285: PPUSH
 286: LD_EXP 1
 290: NOT
 291: PPUSH
 292: LD_EXP 2
 296: PPUSH
 297: CALL 6119 0 3
 301: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 302: LD_ADDR_EXP 12
 306: PUSH
 307: LD_STRING Markov
 309: PPUSH
 310: LD_EXP 1
 314: NOT
 315: PPUSH
 316: LD_EXP 2
 320: PPUSH
 321: CALL 6119 0 3
 325: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 326: LD_ADDR_EXP 17
 330: PUSH
 331: LD_STRING Aviradze
 333: PPUSH
 334: LD_EXP 1
 338: NOT
 339: PPUSH
 340: LD_EXP 2
 344: PPUSH
 345: CALL 6119 0 3
 349: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 350: LD_ADDR_EXP 16
 354: PUSH
 355: LD_STRING Kurt
 357: PPUSH
 358: LD_EXP 1
 362: NOT
 363: PPUSH
 364: LD_EXP 2
 368: PPUSH
 369: CALL 6119 0 3
 373: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 374: LD_ADDR_EXP 7
 378: PUSH
 379: LD_STRING Mike
 381: PPUSH
 382: LD_EXP 1
 386: NOT
 387: PPUSH
 388: LD_EXP 2
 392: PPUSH
 393: CALL 6119 0 3
 397: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 398: LD_ADDR_EXP 14
 402: PUSH
 403: LD_STRING Olaf
 405: PPUSH
 406: LD_INT 0
 408: PPUSH
 409: LD_STRING 
 411: PPUSH
 412: CALL 6119 0 3
 416: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 417: LD_ADDR_EXP 18
 421: PUSH
 422: LD_STRING 05_others
 424: PPUSH
 425: CALL_OW 31
 429: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 430: LD_ADDR_EXP 19
 434: PUSH
 435: LD_STRING 05_apes
 437: PPUSH
 438: CALL_OW 31
 442: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 443: LD_ADDR_VAR 0 5
 447: PUSH
 448: LD_STRING 05_Radar
 450: PPUSH
 451: LD_EXP 1
 455: PPUSH
 456: CALL_OW 30
 460: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 461: LD_ADDR_VAR 0 6
 465: PUSH
 466: LD_STRING 05_RemoteControl
 468: PPUSH
 469: LD_EXP 1
 473: PPUSH
 474: CALL_OW 30
 478: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 479: LD_ADDR_VAR 0 7
 483: PUSH
 484: LD_STRING 05_DrugsTested
 486: PPUSH
 487: LD_EXP 1
 491: PPUSH
 492: CALL_OW 30
 496: ST_TO_ADDR
// if hasDrugs then
 497: LD_VAR 0 7
 501: IFFALSE 516
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 503: LD_INT 5
 505: PPUSH
 506: LD_INT 2
 508: PPUSH
 509: LD_INT 2
 511: PPUSH
 512: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 516: LD_ADDR_VAR 0 12
 520: PUSH
 521: LD_INT 5
 523: PPUSH
 524: LD_INT 0
 526: PPUSH
 527: CALL_OW 517
 531: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 532: LD_ADDR_VAR 0 2
 536: PUSH
 537: DOUBLE
 538: LD_INT 1
 540: DEC
 541: ST_TO_ADDR
 542: LD_VAR 0 12
 546: PUSH
 547: LD_INT 1
 549: ARRAY
 550: PUSH
 551: FOR_TO
 552: IFFALSE 629
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
 554: LD_VAR 0 12
 558: PUSH
 559: LD_INT 1
 561: ARRAY
 562: PUSH
 563: LD_VAR 0 2
 567: ARRAY
 568: PPUSH
 569: LD_VAR 0 12
 573: PUSH
 574: LD_INT 2
 576: ARRAY
 577: PUSH
 578: LD_VAR 0 2
 582: ARRAY
 583: PPUSH
 584: CALL_OW 351
 588: IFFALSE 627
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
 590: LD_VAR 0 12
 594: PUSH
 595: LD_INT 1
 597: ARRAY
 598: PUSH
 599: LD_VAR 0 2
 603: ARRAY
 604: PPUSH
 605: LD_VAR 0 12
 609: PUSH
 610: LD_INT 2
 612: ARRAY
 613: PUSH
 614: LD_VAR 0 2
 618: ARRAY
 619: PPUSH
 620: LD_INT 2
 622: PPUSH
 623: CALL_OW 244
 627: GO 551
 629: POP
 630: POP
// base := [ [ b_depot , 206 , 80 , 1 ] , [ b_bunker , 221 , 95 , 5 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 ] , [ b_lab_full , 217 , 78 , 4 ] , [ b_solar_power , 220 , 99 , 1 ] , [ b_solar_power , 220 , 103 , 1 ] , [ b_solar_power , 216 , 102 , 1 ] , [ b_ext_gun , 203 , 94 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 ] , [ b_ext_track , 199 , 91 , 1 ] , [ b_oil_power , 197 , 81 , 1 ] , [ b_oil_power , 197 , 78 , 3 ] ] ;
 631: LD_ADDR_VAR 0 4
 635: PUSH
 636: LD_INT 0
 638: PUSH
 639: LD_INT 206
 641: PUSH
 642: LD_INT 80
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: PUSH
 654: LD_INT 32
 656: PUSH
 657: LD_INT 221
 659: PUSH
 660: LD_INT 95
 662: PUSH
 663: LD_INT 5
 665: PUSH
 666: LD_INT 23
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: PUSH
 676: LD_INT 32
 678: PUSH
 679: LD_INT 223
 681: PUSH
 682: LD_INT 88
 684: PUSH
 685: LD_INT 5
 687: PUSH
 688: LD_INT 24
 690: PUSH
 691: EMPTY
 692: LIST
 693: LIST
 694: LIST
 695: LIST
 696: LIST
 697: PUSH
 698: LD_INT 32
 700: PUSH
 701: LD_INT 202
 703: PUSH
 704: LD_INT 64
 706: PUSH
 707: LD_INT 2
 709: PUSH
 710: LD_INT 25
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: LIST
 717: LIST
 718: LIST
 719: PUSH
 720: LD_INT 3
 722: PUSH
 723: LD_INT 203
 725: PUSH
 726: LD_INT 91
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: EMPTY
 733: LIST
 734: LIST
 735: LIST
 736: LIST
 737: PUSH
 738: LD_INT 8
 740: PUSH
 741: LD_INT 217
 743: PUSH
 744: LD_INT 78
 746: PUSH
 747: LD_INT 4
 749: PUSH
 750: EMPTY
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: PUSH
 756: LD_INT 27
 758: PUSH
 759: LD_INT 220
 761: PUSH
 762: LD_INT 99
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: LIST
 772: LIST
 773: PUSH
 774: LD_INT 27
 776: PUSH
 777: LD_INT 220
 779: PUSH
 780: LD_INT 103
 782: PUSH
 783: LD_INT 1
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 27
 794: PUSH
 795: LD_INT 216
 797: PUSH
 798: LD_INT 102
 800: PUSH
 801: LD_INT 1
 803: PUSH
 804: EMPTY
 805: LIST
 806: LIST
 807: LIST
 808: LIST
 809: PUSH
 810: LD_INT 17
 812: PUSH
 813: LD_INT 203
 815: PUSH
 816: LD_INT 94
 818: PUSH
 819: LD_INT 0
 821: PUSH
 822: EMPTY
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: PUSH
 828: LD_INT 23
 830: PUSH
 831: LD_INT 200
 833: PUSH
 834: LD_INT 88
 836: PUSH
 837: LD_INT 2
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: LIST
 844: LIST
 845: PUSH
 846: LD_INT 16
 848: PUSH
 849: LD_INT 199
 851: PUSH
 852: LD_INT 91
 854: PUSH
 855: LD_INT 1
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 26
 866: PUSH
 867: LD_INT 197
 869: PUSH
 870: LD_INT 81
 872: PUSH
 873: LD_INT 1
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: PUSH
 882: LD_INT 26
 884: PUSH
 885: LD_INT 197
 887: PUSH
 888: LD_INT 78
 890: PUSH
 891: LD_INT 3
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: LIST
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: ST_TO_ADDR
// if hasRadar then
 916: LD_VAR 0 5
 920: IFFALSE 964
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 ] ) ;
 922: LD_ADDR_VAR 0 4
 926: PUSH
 927: LD_VAR 0 4
 931: PPUSH
 932: LD_VAR 0 4
 936: PUSH
 937: LD_INT 1
 939: PLUS
 940: PPUSH
 941: LD_INT 20
 943: PUSH
 944: LD_INT 203
 946: PUSH
 947: LD_INT 87
 949: PUSH
 950: LD_INT 3
 952: PUSH
 953: EMPTY
 954: LIST
 955: LIST
 956: LIST
 957: LIST
 958: PPUSH
 959: CALL_OW 1
 963: ST_TO_ADDR
// if hasRemote then
 964: LD_VAR 0 6
 968: IFFALSE 1012
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 ] ) ;
 970: LD_ADDR_VAR 0 4
 974: PUSH
 975: LD_VAR 0 4
 979: PPUSH
 980: LD_VAR 0 4
 984: PUSH
 985: LD_INT 1
 987: PLUS
 988: PPUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 207
 994: PUSH
 995: LD_INT 95
 997: PUSH
 998: LD_INT 5
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: PPUSH
1007: CALL_OW 1
1011: ST_TO_ADDR
// for i in base do
1012: LD_ADDR_VAR 0 2
1016: PUSH
1017: LD_VAR 0 4
1021: PUSH
1022: FOR_IN
1023: IFFALSE 1204
// begin bc_type := i [ 1 ] ;
1025: LD_ADDR_OWVAR 42
1029: PUSH
1030: LD_VAR 0 2
1034: PUSH
1035: LD_INT 1
1037: ARRAY
1038: ST_TO_ADDR
// bc_level := 3 ;
1039: LD_ADDR_OWVAR 43
1043: PUSH
1044: LD_INT 3
1046: ST_TO_ADDR
// if i [ 1 ] = b_lab_full then
1047: LD_VAR 0 2
1051: PUSH
1052: LD_INT 1
1054: ARRAY
1055: PUSH
1056: LD_INT 8
1058: EQUAL
1059: IFFALSE 1094
// begin bc_kind1 := b_lab_weapon ;
1061: LD_ADDR_OWVAR 44
1065: PUSH
1066: LD_INT 10
1068: ST_TO_ADDR
// if hasRadar then
1069: LD_VAR 0 5
1073: IFFALSE 1085
// bc_kind2 := b_lab_opto else
1075: LD_ADDR_OWVAR 45
1079: PUSH
1080: LD_INT 15
1082: ST_TO_ADDR
1083: GO 1094
// bc_kind2 := - 1 ;
1085: LD_ADDR_OWVAR 45
1089: PUSH
1090: LD_INT 1
1092: NEG
1093: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1094: LD_ADDR_VAR 0 3
1098: PUSH
1099: LD_VAR 0 2
1103: PUSH
1104: LD_INT 2
1106: ARRAY
1107: PPUSH
1108: LD_VAR 0 2
1112: PUSH
1113: LD_INT 3
1115: ARRAY
1116: PPUSH
1117: LD_VAR 0 2
1121: PUSH
1122: LD_INT 4
1124: ARRAY
1125: PPUSH
1126: CALL_OW 47
1130: ST_TO_ADDR
// if i > 4 then
1131: LD_VAR 0 2
1135: PUSH
1136: LD_INT 4
1138: GREATER
1139: IFFALSE 1159
// PlaceWeaponTurret ( b , i [ 5 ] ) ;
1141: LD_VAR 0 3
1145: PPUSH
1146: LD_VAR 0 2
1150: PUSH
1151: LD_INT 5
1153: ARRAY
1154: PPUSH
1155: CALL_OW 431
// if i [ 1 ] = b_bunker then
1159: LD_VAR 0 2
1163: PUSH
1164: LD_INT 1
1166: ARRAY
1167: PUSH
1168: LD_INT 32
1170: EQUAL
1171: IFFALSE 1202
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
1173: LD_ADDR_VAR 0 11
1177: PUSH
1178: LD_VAR 0 11
1182: PPUSH
1183: LD_VAR 0 11
1187: PUSH
1188: LD_INT 1
1190: PLUS
1191: PPUSH
1192: LD_VAR 0 3
1196: PPUSH
1197: CALL_OW 1
1201: ST_TO_ADDR
// end ;
1202: GO 1022
1204: POP
1205: POP
// depot := HexInfo ( 206 , 80 ) ;
1206: LD_ADDR_VAR 0 9
1210: PUSH
1211: LD_INT 206
1213: PPUSH
1214: LD_INT 80
1216: PPUSH
1217: CALL_OW 428
1221: ST_TO_ADDR
// factory := HexInfo ( 203 , 91 ) ;
1222: LD_ADDR_VAR 0 8
1226: PUSH
1227: LD_INT 203
1229: PPUSH
1230: LD_INT 91
1232: PPUSH
1233: CALL_OW 428
1237: ST_TO_ADDR
// lab := HexInfo ( 217 , 78 ) ;
1238: LD_ADDR_VAR 0 10
1242: PUSH
1243: LD_INT 217
1245: PPUSH
1246: LD_INT 78
1248: PPUSH
1249: CALL_OW 428
1253: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 160 ] [ Difficulty ] ) ;
1254: LD_VAR 0 9
1258: PPUSH
1259: CALL_OW 274
1263: PPUSH
1264: LD_INT 1
1266: PPUSH
1267: LD_INT 360
1269: PUSH
1270: LD_INT 260
1272: PUSH
1273: LD_INT 160
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: LIST
1280: PUSH
1281: LD_OWVAR 67
1285: ARRAY
1286: PPUSH
1287: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 150 , 100 ] [ Difficulty ] ) ;
1291: LD_VAR 0 9
1295: PPUSH
1296: CALL_OW 274
1300: PPUSH
1301: LD_INT 2
1303: PPUSH
1304: LD_INT 200
1306: PUSH
1307: LD_INT 150
1309: PUSH
1310: LD_INT 100
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: LIST
1317: PUSH
1318: LD_OWVAR 67
1322: ARRAY
1323: PPUSH
1324: CALL_OW 277
// PlaceUnitXY ( Heike , 213 , 87 , false ) ;
1328: LD_EXP 5
1332: PPUSH
1333: LD_INT 213
1335: PPUSH
1336: LD_INT 87
1338: PPUSH
1339: LD_INT 0
1341: PPUSH
1342: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
1346: LD_EXP 5
1350: PPUSH
1351: LD_INT 214
1353: PPUSH
1354: LD_INT 87
1356: PPUSH
1357: CALL_OW 118
// if Kaia then
1361: LD_EXP 10
1365: IFFALSE 1400
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
1367: LD_EXP 10
1371: PPUSH
1372: LD_INT 213
1374: PPUSH
1375: LD_INT 85
1377: PPUSH
1378: LD_INT 0
1380: PPUSH
1381: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
1385: LD_EXP 10
1389: PPUSH
1390: LD_INT 215
1392: PPUSH
1393: LD_INT 87
1395: PPUSH
1396: CALL_OW 118
// end ; if Olaf and Kaia then
1400: LD_EXP 14
1404: PUSH
1405: LD_EXP 10
1409: AND
1410: IFFALSE 1447
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
1412: LD_EXP 14
1416: PPUSH
1417: LD_INT 215
1419: PPUSH
1420: LD_INT 87
1422: PPUSH
1423: LD_INT 0
1425: PPUSH
1426: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
1430: LD_EXP 14
1434: PPUSH
1435: LD_INT 213
1437: PPUSH
1438: LD_INT 85
1440: PPUSH
1441: CALL_OW 118
// end else
1445: GO 1467
// if Olaf then
1447: LD_EXP 14
1451: IFFALSE 1467
// PlaceHumanInUnit ( Olaf , factory ) ;
1453: LD_EXP 14
1457: PPUSH
1458: LD_VAR 0 8
1462: PPUSH
1463: CALL_OW 52
// if Givi then
1467: LD_EXP 6
1471: IFFALSE 1552
// begin if Kaia and Olaf then
1473: LD_EXP 10
1477: PUSH
1478: LD_EXP 14
1482: AND
1483: IFFALSE 1520
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
1485: LD_EXP 6
1489: PPUSH
1490: LD_INT 247
1492: PPUSH
1493: LD_INT 117
1495: PPUSH
1496: LD_INT 0
1498: PPUSH
1499: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
1503: LD_EXP 6
1507: PPUSH
1508: LD_INT 248
1510: PPUSH
1511: LD_INT 118
1513: PPUSH
1514: CALL_OW 118
// end else
1518: GO 1552
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
1520: LD_EXP 6
1524: PPUSH
1525: LD_INT 216
1527: PPUSH
1528: LD_INT 88
1530: PPUSH
1531: LD_INT 0
1533: PPUSH
1534: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
1538: LD_EXP 6
1542: PPUSH
1543: LD_EXP 5
1547: PPUSH
1548: CALL_OW 119
// end ; end ; if Kurt then
1552: LD_EXP 16
1556: IFFALSE 1576
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
1558: LD_EXP 16
1562: PPUSH
1563: LD_VAR 0 11
1567: PUSH
1568: LD_INT 2
1570: ARRAY
1571: PPUSH
1572: CALL_OW 52
// if Mike then
1576: LD_EXP 7
1580: IFFALSE 1600
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
1582: LD_EXP 7
1586: PPUSH
1587: LD_VAR 0 11
1591: PUSH
1592: LD_INT 3
1594: ARRAY
1595: PPUSH
1596: CALL_OW 52
// if Kamil then
1600: LD_EXP 9
1604: IFFALSE 1666
// begin if Kaia and Olaf then
1606: LD_EXP 10
1610: PUSH
1611: LD_EXP 14
1615: AND
1616: IFFALSE 1634
// PlaceHumanInUnit ( Kamil , depot ) else
1618: LD_EXP 9
1622: PPUSH
1623: LD_VAR 0 9
1627: PPUSH
1628: CALL_OW 52
1632: GO 1666
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
1634: LD_EXP 9
1638: PPUSH
1639: LD_INT 213
1641: PPUSH
1642: LD_INT 87
1644: PPUSH
1645: LD_INT 0
1647: PPUSH
1648: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
1652: LD_EXP 9
1656: PPUSH
1657: LD_EXP 5
1661: PPUSH
1662: CALL_OW 119
// end ; end ; if Sophia then
1666: LD_EXP 11
1670: IFFALSE 1686
// PlaceHumanInUnit ( Sophia , depot ) ;
1672: LD_EXP 11
1676: PPUSH
1677: LD_VAR 0 9
1681: PPUSH
1682: CALL_OW 52
// if Aviradze then
1686: LD_EXP 17
1690: IFFALSE 1706
// PlaceHumanInUnit ( Aviradze , lab ) ;
1692: LD_EXP 17
1696: PPUSH
1697: LD_VAR 0 10
1701: PPUSH
1702: CALL_OW 52
// if Ibrahim then
1706: LD_EXP 8
1710: IFFALSE 1726
// PlaceHumanInUnit ( Ibrahim , lab ) ;
1712: LD_EXP 8
1716: PPUSH
1717: LD_VAR 0 10
1721: PPUSH
1722: CALL_OW 52
// if Markov then
1726: LD_EXP 12
1730: IFFALSE 1746
// PlaceHumanInUnit ( Markov , factory ) ;
1732: LD_EXP 12
1736: PPUSH
1737: LD_VAR 0 8
1741: PPUSH
1742: CALL_OW 52
// if heikeSecondSquad then
1746: LD_EXP 18
1750: IFFALSE 1790
// for i in heikeSecondSquad do
1752: LD_ADDR_VAR 0 2
1756: PUSH
1757: LD_EXP 18
1761: PUSH
1762: FOR_IN
1763: IFFALSE 1788
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
1765: LD_VAR 0 2
1769: PPUSH
1770: LD_INT 190
1772: PPUSH
1773: LD_INT 65
1775: PPUSH
1776: LD_INT 5
1778: PPUSH
1779: LD_INT 0
1781: PPUSH
1782: CALL_OW 50
1786: GO 1762
1788: POP
1789: POP
// if heikeApes then
1790: LD_EXP 19
1794: IFFALSE 1834
// for i in heikeApes do
1796: LD_ADDR_VAR 0 2
1800: PUSH
1801: LD_EXP 19
1805: PUSH
1806: FOR_IN
1807: IFFALSE 1832
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
1809: LD_VAR 0 2
1813: PPUSH
1814: LD_INT 190
1816: PPUSH
1817: LD_INT 70
1819: PPUSH
1820: LD_INT 5
1822: PPUSH
1823: LD_INT 0
1825: PPUSH
1826: CALL_OW 50
1830: GO 1806
1832: POP
1833: POP
// end ; end_of_file
1834: LD_VAR 0 1
1838: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
1839: LD_INT 0
1841: PPUSH
// uc_side := side ;
1842: LD_ADDR_OWVAR 20
1846: PUSH
1847: LD_VAR 0 1
1851: ST_TO_ADDR
// uc_nation := nation ;
1852: LD_ADDR_OWVAR 21
1856: PUSH
1857: LD_VAR 0 2
1861: ST_TO_ADDR
// vc_chassis := chassis ;
1862: LD_ADDR_OWVAR 37
1866: PUSH
1867: LD_VAR 0 3
1871: ST_TO_ADDR
// vc_engine := engine ;
1872: LD_ADDR_OWVAR 39
1876: PUSH
1877: LD_VAR 0 4
1881: ST_TO_ADDR
// vc_control := control ;
1882: LD_ADDR_OWVAR 38
1886: PUSH
1887: LD_VAR 0 5
1891: ST_TO_ADDR
// vc_weapon := weapon ;
1892: LD_ADDR_OWVAR 40
1896: PUSH
1897: LD_VAR 0 6
1901: ST_TO_ADDR
// vc_fuel_battery := fuel ;
1902: LD_ADDR_OWVAR 41
1906: PUSH
1907: LD_VAR 0 7
1911: ST_TO_ADDR
// result := CreateVehicle ;
1912: LD_ADDR_VAR 0 8
1916: PUSH
1917: CALL_OW 45
1921: ST_TO_ADDR
// end ;
1922: LD_VAR 0 8
1926: RET
// export function SayX ( units , ident ) ; var i ; begin
1927: LD_INT 0
1929: PPUSH
1930: PPUSH
// result := false ;
1931: LD_ADDR_VAR 0 3
1935: PUSH
1936: LD_INT 0
1938: ST_TO_ADDR
// if not units then
1939: LD_VAR 0 1
1943: NOT
1944: IFFALSE 1948
// exit ;
1946: GO 2002
// for i in units do
1948: LD_ADDR_VAR 0 4
1952: PUSH
1953: LD_VAR 0 1
1957: PUSH
1958: FOR_IN
1959: IFFALSE 2000
// if IsOk ( i ) then
1961: LD_VAR 0 4
1965: PPUSH
1966: CALL_OW 302
1970: IFFALSE 1998
// begin Say ( i , ident ) ;
1972: LD_VAR 0 4
1976: PPUSH
1977: LD_VAR 0 2
1981: PPUSH
1982: CALL_OW 88
// result := i ;
1986: LD_ADDR_VAR 0 3
1990: PUSH
1991: LD_VAR 0 4
1995: ST_TO_ADDR
// break ;
1996: GO 2000
// end ;
1998: GO 1958
2000: POP
2001: POP
// end ;
2002: LD_VAR 0 3
2006: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
2007: LD_INT 0
2009: PPUSH
2010: PPUSH
// InitUc ;
2011: CALL_OW 18
// InitHc ;
2015: CALL_OW 19
// uc_side := 0 ;
2019: LD_ADDR_OWVAR 20
2023: PUSH
2024: LD_INT 0
2026: ST_TO_ADDR
// uc_nation := 0 ;
2027: LD_ADDR_OWVAR 21
2031: PUSH
2032: LD_INT 0
2034: ST_TO_ADDR
// for i = 1 to amount do
2035: LD_ADDR_VAR 0 4
2039: PUSH
2040: DOUBLE
2041: LD_INT 1
2043: DEC
2044: ST_TO_ADDR
2045: LD_VAR 0 2
2049: PUSH
2050: FOR_TO
2051: IFFALSE 2133
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
2053: LD_ADDR_OWVAR 29
2057: PUSH
2058: LD_INT 9
2060: PPUSH
2061: LD_INT 12
2063: PPUSH
2064: CALL_OW 12
2068: PUSH
2069: LD_INT 9
2071: PPUSH
2072: LD_INT 12
2074: PPUSH
2075: CALL_OW 12
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
2084: LD_ADDR_OWVAR 35
2088: PUSH
2089: LD_INT 1
2091: NEG
2092: PPUSH
2093: LD_INT 1
2095: PPUSH
2096: CALL_OW 12
2100: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
2101: LD_INT 0
2103: PPUSH
2104: LD_INT 12
2106: PPUSH
2107: LD_INT 1
2109: PPUSH
2110: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
2114: CALL_OW 44
2118: PPUSH
2119: LD_VAR 0 1
2123: PPUSH
2124: LD_INT 0
2126: PPUSH
2127: CALL_OW 49
// end ;
2131: GO 2050
2133: POP
2134: POP
// InitHc ;
2135: CALL_OW 19
// end ;
2139: LD_VAR 0 3
2143: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
2144: LD_INT 0
2146: PPUSH
2147: PPUSH
// uc_side := 0 ;
2148: LD_ADDR_OWVAR 20
2152: PUSH
2153: LD_INT 0
2155: ST_TO_ADDR
// uc_nation := 0 ;
2156: LD_ADDR_OWVAR 21
2160: PUSH
2161: LD_INT 0
2163: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 ] [ Difficulty ] ) ;
2164: LD_INT 7
2166: PPUSH
2167: LD_INT 6
2169: PUSH
2170: LD_INT 5
2172: PUSH
2173: LD_INT 4
2175: PUSH
2176: EMPTY
2177: LIST
2178: LIST
2179: LIST
2180: PUSH
2181: LD_OWVAR 67
2185: ARRAY
2186: PPUSH
2187: CALL 2007 0 2
// for i = 1 to 2 do
2191: LD_ADDR_VAR 0 4
2195: PUSH
2196: DOUBLE
2197: LD_INT 1
2199: DEC
2200: ST_TO_ADDR
2201: LD_INT 2
2203: PUSH
2204: FOR_TO
2205: IFFALSE 2244
// begin vc_chassis := class_mastodont ;
2207: LD_ADDR_OWVAR 37
2211: PUSH
2212: LD_EXP 41
2216: ST_TO_ADDR
// vc_control := control_rider ;
2217: LD_ADDR_OWVAR 38
2221: PUSH
2222: LD_INT 4
2224: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
2225: CALL_OW 45
2229: PPUSH
2230: LD_VAR 0 1
2234: PPUSH
2235: LD_INT 0
2237: PPUSH
2238: CALL 41325 0 3
// end ;
2242: GO 2204
2244: POP
2245: POP
// for i := 1 to 4 do
2246: LD_ADDR_VAR 0 4
2250: PUSH
2251: DOUBLE
2252: LD_INT 1
2254: DEC
2255: ST_TO_ADDR
2256: LD_INT 4
2258: PUSH
2259: FOR_TO
2260: IFFALSE 2299
// begin hc_class := class_horse ;
2262: LD_ADDR_OWVAR 28
2266: PUSH
2267: LD_EXP 42
2271: ST_TO_ADDR
// hc_gallery :=  ;
2272: LD_ADDR_OWVAR 33
2276: PUSH
2277: LD_STRING 
2279: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
2280: CALL_OW 44
2284: PPUSH
2285: LD_VAR 0 1
2289: PPUSH
2290: LD_INT 0
2292: PPUSH
2293: CALL_OW 49
// end ;
2297: GO 2259
2299: POP
2300: POP
// for i = 1 to 5 do
2301: LD_ADDR_VAR 0 4
2305: PUSH
2306: DOUBLE
2307: LD_INT 1
2309: DEC
2310: ST_TO_ADDR
2311: LD_INT 5
2313: PUSH
2314: FOR_TO
2315: IFFALSE 2369
// begin hc_class = class_tiger ;
2317: LD_ADDR_OWVAR 28
2321: PUSH
2322: LD_INT 14
2324: ST_TO_ADDR
// hc_gallery =  ;
2325: LD_ADDR_OWVAR 33
2329: PUSH
2330: LD_STRING 
2332: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
2333: LD_ADDR_OWVAR 35
2337: PUSH
2338: LD_INT 7
2340: NEG
2341: PPUSH
2342: LD_INT 7
2344: PPUSH
2345: CALL_OW 12
2349: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
2350: CALL_OW 44
2354: PPUSH
2355: LD_VAR 0 1
2359: PPUSH
2360: LD_INT 0
2362: PPUSH
2363: CALL 41325 0 3
// end ;
2367: GO 2314
2369: POP
2370: POP
// for i := 1 to 4 do
2371: LD_ADDR_VAR 0 4
2375: PUSH
2376: DOUBLE
2377: LD_INT 1
2379: DEC
2380: ST_TO_ADDR
2381: LD_INT 4
2383: PUSH
2384: FOR_TO
2385: IFFALSE 2422
// begin hc_class := class_phororhacos ;
2387: LD_ADDR_OWVAR 28
2391: PUSH
2392: LD_INT 18
2394: ST_TO_ADDR
// hc_gallery :=  ;
2395: LD_ADDR_OWVAR 33
2399: PUSH
2400: LD_STRING 
2402: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
2403: CALL_OW 44
2407: PPUSH
2408: LD_VAR 0 1
2412: PPUSH
2413: LD_INT 0
2415: PPUSH
2416: CALL_OW 49
// end ;
2420: GO 2384
2422: POP
2423: POP
// for i := 1 to 4 do
2424: LD_ADDR_VAR 0 4
2428: PUSH
2429: DOUBLE
2430: LD_INT 1
2432: DEC
2433: ST_TO_ADDR
2434: LD_INT 4
2436: PUSH
2437: FOR_TO
2438: IFFALSE 2475
// begin hc_class := class_baggie ;
2440: LD_ADDR_OWVAR 28
2444: PUSH
2445: LD_INT 13
2447: ST_TO_ADDR
// hc_gallery :=  ;
2448: LD_ADDR_OWVAR 33
2452: PUSH
2453: LD_STRING 
2455: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
2456: CALL_OW 44
2460: PPUSH
2461: LD_VAR 0 1
2465: PPUSH
2466: LD_INT 0
2468: PPUSH
2469: CALL_OW 49
// end ;
2473: GO 2437
2475: POP
2476: POP
// for i := 1 to 7 do
2477: LD_ADDR_VAR 0 4
2481: PUSH
2482: DOUBLE
2483: LD_INT 1
2485: DEC
2486: ST_TO_ADDR
2487: LD_INT 7
2489: PUSH
2490: FOR_TO
2491: IFFALSE 2528
// begin hc_class := class_frog ;
2493: LD_ADDR_OWVAR 28
2497: PUSH
2498: LD_INT 19
2500: ST_TO_ADDR
// hc_gallery :=  ;
2501: LD_ADDR_OWVAR 33
2505: PUSH
2506: LD_STRING 
2508: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
2509: CALL_OW 44
2513: PPUSH
2514: LD_VAR 0 2
2518: PPUSH
2519: LD_INT 0
2521: PPUSH
2522: CALL_OW 49
// end ;
2526: GO 2490
2528: POP
2529: POP
// end ;
2530: LD_VAR 0 3
2534: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
2535: LD_INT 0
2537: PPUSH
2538: PPUSH
2539: PPUSH
// if not observer or not unit then
2540: LD_VAR 0 1
2544: NOT
2545: PUSH
2546: LD_VAR 0 2
2550: NOT
2551: OR
2552: IFFALSE 2556
// exit ;
2554: GO 2604
// if not See ( GetSide ( observer ) , unit ) then
2556: LD_VAR 0 1
2560: PPUSH
2561: CALL_OW 255
2565: PPUSH
2566: LD_VAR 0 2
2570: PPUSH
2571: CALL_OW 292
2575: NOT
2576: IFFALSE 2580
// exit ;
2578: GO 2604
// result := GetDistUnits ( observer , unit ) < 12 ;
2580: LD_ADDR_VAR 0 3
2584: PUSH
2585: LD_VAR 0 1
2589: PPUSH
2590: LD_VAR 0 2
2594: PPUSH
2595: CALL_OW 296
2599: PUSH
2600: LD_INT 12
2602: LESS
2603: ST_TO_ADDR
// end ;
2604: LD_VAR 0 3
2608: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
2609: LD_INT 0
2611: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
2612: LD_VAR 0 2
2616: PUSH
2617: LD_INT 1
2619: ARRAY
2620: PPUSH
2621: LD_VAR 0 2
2625: PUSH
2626: LD_INT 2
2628: ARRAY
2629: PPUSH
2630: CALL_OW 488
2634: PUSH
2635: LD_VAR 0 2
2639: PUSH
2640: LD_INT 1
2642: ARRAY
2643: PPUSH
2644: LD_VAR 0 2
2648: PUSH
2649: LD_INT 2
2651: ARRAY
2652: PPUSH
2653: CALL_OW 428
2657: PUSH
2658: LD_INT 0
2660: EQUAL
2661: AND
2662: IFFALSE 2696
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
2664: LD_VAR 0 1
2668: PPUSH
2669: LD_VAR 0 2
2673: PUSH
2674: LD_INT 1
2676: ARRAY
2677: PPUSH
2678: LD_VAR 0 2
2682: PUSH
2683: LD_INT 2
2685: ARRAY
2686: PPUSH
2687: LD_VAR 0 3
2691: PPUSH
2692: CALL_OW 48
// end ;
2696: LD_VAR 0 4
2700: RET
// export function ReverseArray ( array ) ; var i ; begin
2701: LD_INT 0
2703: PPUSH
2704: PPUSH
// if not array then
2705: LD_VAR 0 1
2709: NOT
2710: IFFALSE 2714
// exit ;
2712: GO 2772
// result := [ ] ;
2714: LD_ADDR_VAR 0 2
2718: PUSH
2719: EMPTY
2720: ST_TO_ADDR
// for i := 1 to array do
2721: LD_ADDR_VAR 0 3
2725: PUSH
2726: DOUBLE
2727: LD_INT 1
2729: DEC
2730: ST_TO_ADDR
2731: LD_VAR 0 1
2735: PUSH
2736: FOR_TO
2737: IFFALSE 2770
// result := Insert ( result , 1 , array [ i ] ) ;
2739: LD_ADDR_VAR 0 2
2743: PUSH
2744: LD_VAR 0 2
2748: PPUSH
2749: LD_INT 1
2751: PPUSH
2752: LD_VAR 0 1
2756: PUSH
2757: LD_VAR 0 3
2761: ARRAY
2762: PPUSH
2763: CALL_OW 2
2767: ST_TO_ADDR
2768: GO 2736
2770: POP
2771: POP
// end ;
2772: LD_VAR 0 2
2776: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
2777: LD_INT 0
2779: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
2780: LD_VAR 0 1
2784: PPUSH
2785: LD_VAR 0 2
2789: PPUSH
2790: LD_VAR 0 3
2794: PPUSH
2795: LD_VAR 0 4
2799: PPUSH
2800: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
2804: LD_VAR 0 1
2808: PPUSH
2809: LD_VAR 0 2
2813: PPUSH
2814: LD_VAR 0 3
2818: PPUSH
2819: CALL_OW 331
// end ;
2823: LD_VAR 0 5
2827: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
2828: LD_INT 0
2830: PPUSH
// if not units then
2831: LD_VAR 0 1
2835: NOT
2836: IFFALSE 2840
// exit ;
2838: GO 2923
// result := true ;
2840: LD_ADDR_VAR 0 4
2844: PUSH
2845: LD_INT 1
2847: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
2848: LD_VAR 0 1
2852: PPUSH
2853: LD_INT 26
2855: PUSH
2856: LD_INT 1
2858: PUSH
2859: EMPTY
2860: LIST
2861: LIST
2862: PPUSH
2863: CALL_OW 72
2867: PUSH
2868: LD_INT 1
2870: ARRAY
2871: PPUSH
2872: LD_VAR 0 2
2876: PPUSH
2877: CALL_OW 88
2881: NOT
2882: IFFALSE 2923
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
2884: LD_ADDR_VAR 0 4
2888: PUSH
2889: LD_VAR 0 1
2893: PPUSH
2894: LD_INT 26
2896: PUSH
2897: LD_INT 2
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: PPUSH
2904: CALL_OW 72
2908: PUSH
2909: LD_INT 1
2911: ARRAY
2912: PPUSH
2913: LD_VAR 0 3
2917: PPUSH
2918: CALL_OW 88
2922: ST_TO_ADDR
// end ;
2923: LD_VAR 0 4
2927: RET
// export function SeeGroup ( side , group ) ; var i ; begin
2928: LD_INT 0
2930: PPUSH
2931: PPUSH
// if not group then
2932: LD_VAR 0 2
2936: NOT
2937: IFFALSE 2941
// exit ;
2939: GO 2986
// for i in group do
2941: LD_ADDR_VAR 0 4
2945: PUSH
2946: LD_VAR 0 2
2950: PUSH
2951: FOR_IN
2952: IFFALSE 2984
// if See ( side , i ) then
2954: LD_VAR 0 1
2958: PPUSH
2959: LD_VAR 0 4
2963: PPUSH
2964: CALL_OW 292
2968: IFFALSE 2982
// begin result := true ;
2970: LD_ADDR_VAR 0 3
2974: PUSH
2975: LD_INT 1
2977: ST_TO_ADDR
// exit ;
2978: POP
2979: POP
2980: GO 2986
// end ;
2982: GO 2951
2984: POP
2985: POP
// end ; end_of_file
2986: LD_VAR 0 3
2990: RET
// export Morozov ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad ; export function PrepareRussian ; var i , b , un , veh , tmp , outpost ; begin
2991: LD_INT 0
2993: PPUSH
2994: PPUSH
2995: PPUSH
2996: PPUSH
2997: PPUSH
2998: PPUSH
2999: PPUSH
// uc_side := 3 ;
3000: LD_ADDR_OWVAR 20
3004: PUSH
3005: LD_INT 3
3007: ST_TO_ADDR
// uc_nation := 3 ;
3008: LD_ADDR_OWVAR 21
3012: PUSH
3013: LD_INT 3
3015: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
3016: LD_ADDR_EXP 20
3020: PUSH
3021: LD_STRING Morozov
3023: PPUSH
3024: CALL_OW 25
3028: ST_TO_ADDR
// SetBName ( ruLenin , lenin ) ;
3029: LD_INT 52
3031: PPUSH
3032: LD_STRING lenin
3034: PPUSH
3035: CALL_OW 500
// ruOutsiders := [ ] ;
3039: LD_ADDR_EXP 22
3043: PUSH
3044: EMPTY
3045: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3046: LD_ADDR_VAR 0 6
3050: PUSH
3051: LD_INT 22
3053: PUSH
3054: LD_INT 3
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: PUSH
3061: LD_INT 21
3063: PUSH
3064: LD_INT 3
3066: PUSH
3067: EMPTY
3068: LIST
3069: LIST
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PPUSH
3075: CALL_OW 69
3079: ST_TO_ADDR
// for i in tmp do
3080: LD_ADDR_VAR 0 2
3084: PUSH
3085: LD_VAR 0 6
3089: PUSH
3090: FOR_IN
3091: IFFALSE 3124
// SetBLevel ( i , [ 5 , 5 , 6 ] [ Difficulty ] ) ;
3093: LD_VAR 0 2
3097: PPUSH
3098: LD_INT 5
3100: PUSH
3101: LD_INT 5
3103: PUSH
3104: LD_INT 6
3106: PUSH
3107: EMPTY
3108: LIST
3109: LIST
3110: LIST
3111: PUSH
3112: LD_OWVAR 67
3116: ARRAY
3117: PPUSH
3118: CALL_OW 241
3122: GO 3090
3124: POP
3125: POP
// outpost := [ ] ;
3126: LD_ADDR_VAR 0 7
3130: PUSH
3131: EMPTY
3132: ST_TO_ADDR
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 177 , 114 ] , [ 138 , 96 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
3133: LD_ADDR_VAR 0 6
3137: PUSH
3138: LD_INT 198
3140: PUSH
3141: LD_INT 158
3143: PUSH
3144: EMPTY
3145: LIST
3146: LIST
3147: PUSH
3148: LD_INT 203
3150: PUSH
3151: LD_INT 166
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PUSH
3158: LD_INT 177
3160: PUSH
3161: LD_INT 114
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PUSH
3168: LD_INT 138
3170: PUSH
3171: LD_INT 96
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: PUSH
3178: LD_INT 181
3180: PUSH
3181: LD_INT 209
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: PUSH
3188: LD_INT 178
3190: PUSH
3191: LD_INT 196
3193: PUSH
3194: EMPTY
3195: LIST
3196: LIST
3197: PUSH
3198: LD_INT 181
3200: PUSH
3201: LD_INT 212
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: ST_TO_ADDR
// for i := 1 to tmp do
3217: LD_ADDR_VAR 0 2
3221: PUSH
3222: DOUBLE
3223: LD_INT 1
3225: DEC
3226: ST_TO_ADDR
3227: LD_VAR 0 6
3231: PUSH
3232: FOR_TO
3233: IFFALSE 3375
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 ] [ Difficulty ] ) ;
3235: LD_INT 0
3237: PPUSH
3238: LD_INT 1
3240: PPUSH
3241: LD_INT 5
3243: PUSH
3244: LD_INT 6
3246: PUSH
3247: LD_INT 7
3249: PUSH
3250: EMPTY
3251: LIST
3252: LIST
3253: LIST
3254: PUSH
3255: LD_OWVAR 67
3259: ARRAY
3260: PPUSH
3261: CALL_OW 380
// un := CreateHuman ;
3265: LD_ADDR_VAR 0 4
3269: PUSH
3270: CALL_OW 44
3274: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
3275: LD_ADDR_VAR 0 3
3279: PUSH
3280: LD_VAR 0 6
3284: PUSH
3285: LD_VAR 0 2
3289: ARRAY
3290: PUSH
3291: LD_INT 1
3293: ARRAY
3294: PPUSH
3295: LD_VAR 0 6
3299: PUSH
3300: LD_VAR 0 2
3304: ARRAY
3305: PUSH
3306: LD_INT 2
3308: ARRAY
3309: PPUSH
3310: CALL_OW 428
3314: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
3315: LD_VAR 0 4
3319: PPUSH
3320: LD_VAR 0 3
3324: PPUSH
3325: CALL 38245 0 1
3329: PPUSH
3330: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3334: LD_VAR 0 4
3338: PPUSH
3339: LD_VAR 0 3
3343: PPUSH
3344: CALL_OW 52
// outpost := Replace ( outpost , outpost , un ) ;
3348: LD_ADDR_VAR 0 7
3352: PUSH
3353: LD_VAR 0 7
3357: PPUSH
3358: LD_VAR 0 7
3362: PPUSH
3363: LD_VAR 0 4
3367: PPUSH
3368: CALL_OW 1
3372: ST_TO_ADDR
// end ;
3373: GO 3232
3375: POP
3376: POP
// for i := 1 to 2 do
3377: LD_ADDR_VAR 0 2
3381: PUSH
3382: DOUBLE
3383: LD_INT 1
3385: DEC
3386: ST_TO_ADDR
3387: LD_INT 2
3389: PUSH
3390: FOR_TO
3391: IFFALSE 3485
// begin PrepareHuman ( false , 2 , [ 5 , 6 , 7 ] [ Difficulty ] ) ;
3393: LD_INT 0
3395: PPUSH
3396: LD_INT 2
3398: PPUSH
3399: LD_INT 5
3401: PUSH
3402: LD_INT 6
3404: PUSH
3405: LD_INT 7
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: LIST
3412: PUSH
3413: LD_OWVAR 67
3417: ARRAY
3418: PPUSH
3419: CALL_OW 380
// un := CreateHuman ;
3423: LD_ADDR_VAR 0 4
3427: PUSH
3428: CALL_OW 44
3432: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
3433: LD_VAR 0 4
3437: PPUSH
3438: LD_INT 194
3440: PPUSH
3441: LD_INT 164
3443: PPUSH
3444: LD_INT 6
3446: PPUSH
3447: LD_INT 0
3449: PPUSH
3450: CALL_OW 50
// outpost := Replace ( outpost , outpost + 1 , un ) ;
3454: LD_ADDR_VAR 0 7
3458: PUSH
3459: LD_VAR 0 7
3463: PPUSH
3464: LD_VAR 0 7
3468: PUSH
3469: LD_INT 1
3471: PLUS
3472: PPUSH
3473: LD_VAR 0 4
3477: PPUSH
3478: CALL_OW 1
3482: ST_TO_ADDR
// end ;
3483: GO 3390
3485: POP
3486: POP
// tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
3487: LD_ADDR_VAR 0 6
3491: PUSH
3492: LD_INT 135
3494: PUSH
3495: LD_INT 100
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: PUSH
3502: LD_INT 137
3504: PUSH
3505: LD_INT 92
3507: PUSH
3508: EMPTY
3509: LIST
3510: LIST
3511: PUSH
3512: EMPTY
3513: LIST
3514: LIST
3515: ST_TO_ADDR
// for i := 1 to tmp do
3516: LD_ADDR_VAR 0 2
3520: PUSH
3521: DOUBLE
3522: LD_INT 1
3524: DEC
3525: ST_TO_ADDR
3526: LD_VAR 0 6
3530: PUSH
3531: FOR_TO
3532: IFFALSE 3698
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
3534: LD_INT 22
3536: PUSH
3537: LD_INT 22
3539: PUSH
3540: LD_INT 24
3542: PUSH
3543: LD_INT 24
3545: PUSH
3546: EMPTY
3547: LIST
3548: LIST
3549: LIST
3550: LIST
3551: PUSH
3552: LD_OWVAR 67
3556: PUSH
3557: LD_INT 0
3559: PPUSH
3560: LD_INT 1
3562: PPUSH
3563: CALL_OW 12
3567: PLUS
3568: ARRAY
3569: PPUSH
3570: LD_INT 1
3572: PPUSH
3573: LD_INT 1
3575: PPUSH
3576: LD_INT 44
3578: PPUSH
3579: LD_INT 25
3581: PPUSH
3582: CALL 10943 0 5
// veh := CreateVehicle ;
3586: LD_ADDR_VAR 0 5
3590: PUSH
3591: CALL_OW 45
3595: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
3596: LD_VAR 0 5
3600: PPUSH
3601: LD_INT 2
3603: PPUSH
3604: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
3608: LD_VAR 0 5
3612: PPUSH
3613: LD_VAR 0 6
3617: PUSH
3618: LD_VAR 0 2
3622: ARRAY
3623: PUSH
3624: LD_INT 1
3626: ARRAY
3627: PPUSH
3628: LD_VAR 0 6
3632: PUSH
3633: LD_VAR 0 2
3637: ARRAY
3638: PUSH
3639: LD_INT 2
3641: ARRAY
3642: PPUSH
3643: LD_INT 0
3645: PPUSH
3646: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
3650: LD_INT 0
3652: PPUSH
3653: LD_INT 3
3655: PPUSH
3656: LD_INT 6
3658: PPUSH
3659: CALL_OW 380
// un := CreateHuman ;
3663: LD_ADDR_VAR 0 4
3667: PUSH
3668: CALL_OW 44
3672: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3673: LD_VAR 0 4
3677: PPUSH
3678: LD_VAR 0 5
3682: PPUSH
3683: CALL_OW 52
// ComHold ( veh ) ;
3687: LD_VAR 0 5
3691: PPUSH
3692: CALL_OW 140
// end ;
3696: GO 3531
3698: POP
3699: POP
// if Difficulty > 1 then
3700: LD_OWVAR 67
3704: PUSH
3705: LD_INT 1
3707: GREATER
3708: IFFALSE 4065
// begin tmp := [ 191 , 122 ] ;
3710: LD_ADDR_VAR 0 6
3714: PUSH
3715: LD_INT 191
3717: PUSH
3718: LD_INT 122
3720: PUSH
3721: EMPTY
3722: LIST
3723: LIST
3724: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
3725: LD_INT 24
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_INT 44
3736: PPUSH
3737: LD_INT 30
3739: PPUSH
3740: CALL 10943 0 5
// ruBlockadeTank := CreateVehicle ;
3744: LD_ADDR_EXP 21
3748: PUSH
3749: CALL_OW 45
3753: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
3754: LD_EXP 21
3758: PPUSH
3759: LD_INT 2
3761: PPUSH
3762: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
3766: LD_EXP 21
3770: PPUSH
3771: LD_INT 191
3773: PPUSH
3774: LD_INT 122
3776: PPUSH
3777: LD_INT 0
3779: PPUSH
3780: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 ] [ Difficulty - 1 ] ) ;
3784: LD_INT 1
3786: PPUSH
3787: LD_INT 5
3789: PUSH
3790: LD_INT 6
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: PUSH
3797: LD_OWVAR 67
3801: PUSH
3802: LD_INT 1
3804: MINUS
3805: ARRAY
3806: PPUSH
3807: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
3811: CALL_OW 44
3815: PPUSH
3816: LD_EXP 21
3820: PPUSH
3821: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
3825: LD_EXP 21
3829: PPUSH
3830: CALL_OW 140
// ruBlockadeSquad := [ ] ;
3834: LD_ADDR_EXP 23
3838: PUSH
3839: EMPTY
3840: ST_TO_ADDR
// for i := 1 to [ 3 , 4 ] [ Difficulty - 1 ] do
3841: LD_ADDR_VAR 0 2
3845: PUSH
3846: DOUBLE
3847: LD_INT 1
3849: DEC
3850: ST_TO_ADDR
3851: LD_INT 3
3853: PUSH
3854: LD_INT 4
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: PUSH
3861: LD_OWVAR 67
3865: PUSH
3866: LD_INT 1
3868: MINUS
3869: ARRAY
3870: PUSH
3871: FOR_TO
3872: IFFALSE 3984
// begin PrepareHuman ( false , 1 , [ 5 , 6 ] [ Difficulty - 1 ] ) ;
3874: LD_INT 0
3876: PPUSH
3877: LD_INT 1
3879: PPUSH
3880: LD_INT 5
3882: PUSH
3883: LD_INT 6
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: PUSH
3890: LD_OWVAR 67
3894: PUSH
3895: LD_INT 1
3897: MINUS
3898: ARRAY
3899: PPUSH
3900: CALL_OW 380
// un := CreateHuman ;
3904: LD_ADDR_VAR 0 4
3908: PUSH
3909: CALL_OW 44
3913: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
3914: LD_VAR 0 4
3918: PPUSH
3919: LD_INT 9
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
3929: LD_VAR 0 4
3933: PPUSH
3934: LD_INT 198
3936: PPUSH
3937: LD_INT 129
3939: PPUSH
3940: CALL_OW 118
// AddComCrawl ( un ) ;
3944: LD_VAR 0 4
3948: PPUSH
3949: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
3953: LD_ADDR_EXP 23
3957: PUSH
3958: LD_EXP 23
3962: PPUSH
3963: LD_EXP 23
3967: PUSH
3968: LD_INT 1
3970: PLUS
3971: PPUSH
3972: LD_VAR 0 4
3976: PPUSH
3977: CALL_OW 1
3981: ST_TO_ADDR
// end ;
3982: GO 3871
3984: POP
3985: POP
// PrepareHuman ( false , 4 , 5 ) ;
3986: LD_INT 0
3988: PPUSH
3989: LD_INT 4
3991: PPUSH
3992: LD_INT 5
3994: PPUSH
3995: CALL_OW 380
// un := CreateHuman ;
3999: LD_ADDR_VAR 0 4
4003: PUSH
4004: CALL_OW 44
4008: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
4009: LD_VAR 0 4
4013: PPUSH
4014: LD_INT 179
4016: PPUSH
4017: LD_INT 113
4019: PPUSH
4020: LD_INT 0
4022: PPUSH
4023: CALL_OW 48
// ComHold ( un ) ;
4027: LD_VAR 0 4
4031: PPUSH
4032: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
4036: LD_ADDR_EXP 23
4040: PUSH
4041: LD_EXP 23
4045: PPUSH
4046: LD_EXP 23
4050: PUSH
4051: LD_INT 1
4053: PLUS
4054: PPUSH
4055: LD_VAR 0 4
4059: PPUSH
4060: CALL_OW 1
4064: ST_TO_ADDR
// end ; end ;
4065: LD_VAR 0 1
4069: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
4070: LD_EXP 21
4074: PUSH
4075: LD_EXP 21
4079: PPUSH
4080: CALL_OW 255
4084: PUSH
4085: LD_INT 3
4087: EQUAL
4088: AND
4089: IFFALSE 4252
4091: GO 4093
4093: DISABLE
4094: LD_INT 0
4096: PPUSH
// begin enable ;
4097: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
4098: LD_INT 81
4100: PUSH
4101: LD_INT 3
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PUSH
4108: LD_INT 91
4110: PUSH
4111: LD_EXP 21
4115: PUSH
4116: LD_INT 15
4118: PUSH
4119: EMPTY
4120: LIST
4121: LIST
4122: LIST
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: PPUSH
4128: CALL_OW 69
4132: IFFALSE 4212
// begin if not IsDrivenBy ( ruBlockadeTank ) then
4134: LD_EXP 21
4138: PPUSH
4139: CALL_OW 311
4143: NOT
4144: IFFALSE 4210
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
4146: LD_ADDR_VAR 0 1
4150: PUSH
4151: LD_INT 22
4153: PUSH
4154: LD_INT 3
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: PUSH
4161: LD_INT 21
4163: PUSH
4164: LD_INT 1
4166: PUSH
4167: EMPTY
4168: LIST
4169: LIST
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: PPUSH
4175: CALL_OW 69
4179: PPUSH
4180: LD_EXP 21
4184: PPUSH
4185: CALL_OW 74
4189: ST_TO_ADDR
// if driver then
4190: LD_VAR 0 1
4194: IFFALSE 4210
// ComEnterUnit ( driver , ruBlockadeTank ) ;
4196: LD_VAR 0 1
4200: PPUSH
4201: LD_EXP 21
4205: PPUSH
4206: CALL_OW 120
// end ; exit ;
4210: GO 4252
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
4212: LD_EXP 21
4216: PPUSH
4217: CALL_OW 256
4221: PUSH
4222: LD_INT 1000
4224: LESS
4225: PUSH
4226: LD_EXP 21
4230: PPUSH
4231: CALL_OW 311
4235: AND
4236: IFFALSE 4252
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
4238: LD_EXP 21
4242: PPUSH
4243: CALL_OW 311
4247: PPUSH
4248: CALL 43902 0 1
// end ;
4252: PPOPN 1
4254: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
4255: LD_EXP 23
4259: PPUSH
4260: LD_INT 3
4262: PUSH
4263: LD_INT 24
4265: PUSH
4266: LD_INT 1000
4268: PUSH
4269: EMPTY
4270: LIST
4271: LIST
4272: PUSH
4273: EMPTY
4274: LIST
4275: LIST
4276: PPUSH
4277: CALL_OW 72
4281: PUSH
4282: LD_EXP 23
4286: PPUSH
4287: LD_INT 25
4289: PUSH
4290: LD_INT 4
4292: PUSH
4293: EMPTY
4294: LIST
4295: LIST
4296: PUSH
4297: LD_INT 50
4299: PUSH
4300: EMPTY
4301: LIST
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: PPUSH
4307: CALL_OW 72
4311: AND
4312: IFFALSE 4500
4314: GO 4316
4316: DISABLE
4317: LD_INT 0
4319: PPUSH
4320: PPUSH
4321: PPUSH
// begin enable ;
4322: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
4323: LD_ADDR_VAR 0 3
4327: PUSH
4328: LD_EXP 23
4332: PPUSH
4333: LD_INT 3
4335: PUSH
4336: LD_INT 24
4338: PUSH
4339: LD_INT 1000
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: PPUSH
4350: CALL_OW 72
4354: PPUSH
4355: LD_INT 1
4357: PPUSH
4358: CALL 44022 0 2
4362: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
4363: LD_ADDR_VAR 0 2
4367: PUSH
4368: LD_EXP 23
4372: PPUSH
4373: LD_INT 25
4375: PUSH
4376: LD_INT 4
4378: PUSH
4379: EMPTY
4380: LIST
4381: LIST
4382: PUSH
4383: LD_INT 50
4385: PUSH
4386: EMPTY
4387: LIST
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: PPUSH
4393: CALL_OW 72
4397: PUSH
4398: LD_INT 1
4400: ARRAY
4401: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
4402: LD_VAR 0 2
4406: PPUSH
4407: LD_VAR 0 3
4411: PUSH
4412: LD_INT 1
4414: ARRAY
4415: PPUSH
4416: CALL 39641 0 2
4420: NOT
4421: IFFALSE 4500
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
4423: LD_VAR 0 3
4427: PUSH
4428: LD_INT 1
4430: ARRAY
4431: PPUSH
4432: LD_INT 9
4434: PPUSH
4435: CALL_OW 308
4439: NOT
4440: IFFALSE 4458
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
4442: LD_VAR 0 3
4446: PUSH
4447: LD_INT 1
4449: ARRAY
4450: PPUSH
4451: LD_INT 9
4453: PPUSH
4454: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
4458: LD_VAR 0 2
4462: PPUSH
4463: LD_VAR 0 3
4467: PUSH
4468: LD_INT 1
4470: ARRAY
4471: PPUSH
4472: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
4476: LD_VAR 0 2
4480: PPUSH
4481: LD_INT 179
4483: PPUSH
4484: LD_INT 113
4486: PPUSH
4487: CALL_OW 171
// AddComHold ( sci ) ;
4491: LD_VAR 0 2
4495: PPUSH
4496: CALL_OW 200
// end ; end ; end_of_file
4500: PPOPN 3
4502: END
// export function Action ; begin
4503: LD_INT 0
4505: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
4506: LD_INT 2
4508: PPUSH
4509: LD_INT 4
4511: PPUSH
4512: CALL_OW 332
// Video ( true ) ;
4516: LD_INT 1
4518: PPUSH
4519: CALL 42383 0 1
// CenterNowOnXY ( 213 , 89 ) ;
4523: LD_INT 213
4525: PPUSH
4526: LD_INT 89
4528: PPUSH
4529: CALL_OW 86
// if not debug then
4533: LD_EXP 1
4537: NOT
4538: IFFALSE 4572
// begin if Kaia and Olaf then
4540: LD_EXP 10
4544: PUSH
4545: LD_EXP 14
4549: AND
4550: IFFALSE 4556
// SceneKaiaWithOlaf ;
4552: CALL 4595 0 0
// if Givi and Kamil then
4556: LD_EXP 6
4560: PUSH
4561: LD_EXP 9
4565: AND
4566: IFFALSE 4572
// SceneWithGiviAndKamil ;
4568: CALL 5166 0 0
// end ; Video ( false ) ;
4572: LD_INT 0
4574: PPUSH
4575: CALL 42383 0 1
// ChangeMissionObjectives ( M1 ) ;
4579: LD_STRING M1
4581: PPUSH
4582: CALL_OW 337
// SaveForQuickRestart ;
4586: CALL_OW 22
// end ;
4590: LD_VAR 0 1
4594: RET
// export function SceneKaiaWithOlaf ; begin
4595: LD_INT 0
4597: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
4598: LD_INT 22
4600: PUSH
4601: LD_INT 2
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: PUSH
4608: LD_INT 30
4610: PUSH
4611: LD_INT 3
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PPUSH
4622: CALL_OW 69
4626: PPUSH
4627: LD_INT 14
4629: PPUSH
4630: LD_INT 1
4632: PPUSH
4633: LD_INT 1
4635: PPUSH
4636: LD_INT 26
4638: PPUSH
4639: CALL_OW 125
// wait ( 0 0$1 ) ;
4643: LD_INT 35
4645: PPUSH
4646: CALL_OW 67
// Say ( Kaia , DK-06-Mem-1 ) ;
4650: LD_EXP 10
4654: PPUSH
4655: LD_STRING DK-06-Mem-1
4657: PPUSH
4658: CALL_OW 88
// Say ( Kaia , DK-06-Mem-2 ) ;
4662: LD_EXP 10
4666: PPUSH
4667: LD_STRING DK-06-Mem-2
4669: PPUSH
4670: CALL_OW 88
// Say ( Olaf , DO-06-Mem-3 ) ;
4674: LD_EXP 14
4678: PPUSH
4679: LD_STRING DO-06-Mem-3
4681: PPUSH
4682: CALL_OW 88
// Say ( Kaia , DK-06-Mem-4 ) ;
4686: LD_EXP 10
4690: PPUSH
4691: LD_STRING DK-06-Mem-4
4693: PPUSH
4694: CALL_OW 88
// Say ( Olaf , DO-06-Mem-5 ) ;
4698: LD_EXP 14
4702: PPUSH
4703: LD_STRING DO-06-Mem-5
4705: PPUSH
4706: CALL_OW 88
// wait ( 0 0$2 ) ;
4710: LD_INT 70
4712: PPUSH
4713: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
4717: LD_INT 22
4719: PUSH
4720: LD_INT 2
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: PUSH
4727: LD_INT 30
4729: PUSH
4730: LD_INT 3
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: PPUSH
4741: CALL_OW 69
4745: PPUSH
4746: LD_INT 90
4748: PPUSH
4749: CALL_OW 329
// Say ( Olaf , DO-06-Mem-6 ) ;
4753: LD_EXP 14
4757: PPUSH
4758: LD_STRING DO-06-Mem-6
4760: PPUSH
4761: CALL_OW 88
// Say ( Kaia , DK-06-Mem-7 ) ;
4765: LD_EXP 10
4769: PPUSH
4770: LD_STRING DK-06-Mem-7
4772: PPUSH
4773: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
4777: LD_EXP 5
4781: PPUSH
4782: LD_EXP 10
4786: PPUSH
4787: CALL_OW 119
// Say ( Heike , DH-06-Mem-8 ) ;
4791: LD_EXP 5
4795: PPUSH
4796: LD_STRING DH-06-Mem-8
4798: PPUSH
4799: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
4803: LD_EXP 10
4807: PUSH
4808: LD_EXP 14
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: PPUSH
4817: LD_EXP 5
4821: PPUSH
4822: CALL_OW 119
// Say ( Olaf , DO-06-Mem-9 ) ;
4826: LD_EXP 14
4830: PPUSH
4831: LD_STRING DO-06-Mem-9
4833: PPUSH
4834: CALL_OW 88
// Say ( Olaf , DO-06-Mem-10 ) ;
4838: LD_EXP 14
4842: PPUSH
4843: LD_STRING DO-06-Mem-10
4845: PPUSH
4846: CALL_OW 88
// Say ( Olaf , DO-06-Mem-11 ) ;
4850: LD_EXP 14
4854: PPUSH
4855: LD_STRING DO-06-Mem-11
4857: PPUSH
4858: CALL_OW 88
// Say ( Olaf , DO-06-Mem-12 ) ;
4862: LD_EXP 14
4866: PPUSH
4867: LD_STRING DO-06-Mem-12
4869: PPUSH
4870: CALL_OW 88
// Say ( Kaia , DK-06-Mem-13 ) ;
4874: LD_EXP 10
4878: PPUSH
4879: LD_STRING DK-06-Mem-13
4881: PPUSH
4882: CALL_OW 88
// Say ( Kaia , DK-06-Mem-14 ) ;
4886: LD_EXP 10
4890: PPUSH
4891: LD_STRING DK-06-Mem-14
4893: PPUSH
4894: CALL_OW 88
// Say ( Kaia , DK-06-Mem-15 ) ;
4898: LD_EXP 10
4902: PPUSH
4903: LD_STRING DK-06-Mem-15
4905: PPUSH
4906: CALL_OW 88
// Say ( Kaia , DK-06-Mem-16 ) ;
4910: LD_EXP 10
4914: PPUSH
4915: LD_STRING DK-06-Mem-16
4917: PPUSH
4918: CALL_OW 88
// Say ( Kaia , DK-06-Mem-17 ) ;
4922: LD_EXP 10
4926: PPUSH
4927: LD_STRING DK-06-Mem-17
4929: PPUSH
4930: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
4934: LD_EXP 14
4938: PPUSH
4939: LD_EXP 10
4943: PPUSH
4944: CALL_OW 119
// Say ( Olaf , DO-06-Mem-18 ) ;
4948: LD_EXP 14
4952: PPUSH
4953: LD_STRING DO-06-Mem-18
4955: PPUSH
4956: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
4960: LD_EXP 10
4964: PPUSH
4965: LD_EXP 14
4969: PPUSH
4970: CALL_OW 119
// Say ( Kaia , DK-06-Mem-19 ) ;
4974: LD_EXP 10
4978: PPUSH
4979: LD_STRING DK-06-Mem-19
4981: PPUSH
4982: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
4986: LD_EXP 14
4990: PPUSH
4991: LD_INT 214
4993: PPUSH
4994: LD_INT 86
4996: PPUSH
4997: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
5001: LD_EXP 14
5005: PPUSH
5006: LD_EXP 10
5010: PPUSH
5011: CALL_OW 179
// if Givi then
5015: LD_EXP 6
5019: IFFALSE 5050
// begin ComMoveXY ( Givi , 217 , 86 ) ;
5021: LD_EXP 6
5025: PPUSH
5026: LD_INT 217
5028: PPUSH
5029: LD_INT 86
5031: PPUSH
5032: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
5036: LD_EXP 6
5040: PPUSH
5041: LD_EXP 5
5045: PPUSH
5046: CALL_OW 179
// end ; if Kamil then
5050: LD_EXP 9
5054: IFFALSE 5094
// begin ComExit ( Kamil ) ;
5056: LD_EXP 9
5060: PPUSH
5061: CALL 42799 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
5065: LD_EXP 9
5069: PPUSH
5070: LD_INT 212
5072: PPUSH
5073: LD_INT 86
5075: PPUSH
5076: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
5080: LD_EXP 9
5084: PPUSH
5085: LD_EXP 5
5089: PPUSH
5090: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
5094: LD_INT 70
5096: PPUSH
5097: CALL_OW 67
// Say ( Heike , DH-06-Mem-20 ) ;
5101: LD_EXP 5
5105: PPUSH
5106: LD_STRING DH-06-Mem-20
5108: PPUSH
5109: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
5113: LD_EXP 14
5117: PPUSH
5118: LD_INT 215
5120: PPUSH
5121: LD_INT 87
5123: PPUSH
5124: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
5128: LD_EXP 14
5132: PPUSH
5133: LD_EXP 10
5137: PPUSH
5138: CALL_OW 179
// Say ( Kaia , DK-06-Mem-21 ) ;
5142: LD_EXP 10
5146: PPUSH
5147: LD_STRING DK-06-Mem-21
5149: PPUSH
5150: CALL_OW 88
// wait ( 0 0$2 ) ;
5154: LD_INT 70
5156: PPUSH
5157: CALL_OW 67
// end ;
5161: LD_VAR 0 1
5165: RET
// export function SceneWithGiviAndKamil ; begin
5166: LD_INT 0
5168: PPUSH
// if Markov then
5169: LD_EXP 12
5173: IFFALSE 5224
// begin if IsInUnit ( Markov ) then
5175: LD_EXP 12
5179: PPUSH
5180: CALL_OW 310
5184: IFFALSE 5195
// ComExit ( Markov ) ;
5186: LD_EXP 12
5190: PPUSH
5191: CALL 42799 0 1
// AddComMoveXY ( Markov , 212 , 88 ) ;
5195: LD_EXP 12
5199: PPUSH
5200: LD_INT 212
5202: PPUSH
5203: LD_INT 88
5205: PPUSH
5206: CALL_OW 171
// AddComTurnUnit ( Markov , Heike ) ;
5210: LD_EXP 12
5214: PPUSH
5215: LD_EXP 5
5219: PPUSH
5220: CALL_OW 179
// end ; Say ( Givi , DG-06-Obj-1 ) ;
5224: LD_EXP 6
5228: PPUSH
5229: LD_STRING DG-06-Obj-1
5231: PPUSH
5232: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-2 ) ;
5236: LD_EXP 9
5240: PPUSH
5241: LD_STRING DKam-06-Obj-2
5243: PPUSH
5244: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
5248: LD_EXP 5
5252: PPUSH
5253: LD_EXP 9
5257: PPUSH
5258: CALL_OW 119
// Say ( Kamil , DKam-06-Obj-3 ) ;
5262: LD_EXP 9
5266: PPUSH
5267: LD_STRING DKam-06-Obj-3
5269: PPUSH
5270: CALL_OW 88
// Say ( Markov , DMar-06-Obj-4 ) ;
5274: LD_EXP 12
5278: PPUSH
5279: LD_STRING DMar-06-Obj-4
5281: PPUSH
5282: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-6 ) ;
5286: LD_EXP 9
5290: PPUSH
5291: LD_STRING DKam-06-Obj-6
5293: PPUSH
5294: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-7 ) ;
5298: LD_EXP 9
5302: PPUSH
5303: LD_STRING DKam-06-Obj-7
5305: PPUSH
5306: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-8 ) ;
5310: LD_EXP 9
5314: PPUSH
5315: LD_STRING DKam-06-Obj-8
5317: PPUSH
5318: CALL_OW 88
// Say ( Heike , DH-06-Obj-9 ) ;
5322: LD_EXP 5
5326: PPUSH
5327: LD_STRING DH-06-Obj-9
5329: PPUSH
5330: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-10 ) ;
5334: LD_EXP 9
5338: PPUSH
5339: LD_STRING DKam-06-Obj-10
5341: PPUSH
5342: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-11 ) ;
5346: LD_EXP 9
5350: PPUSH
5351: LD_STRING DKam-06-Obj-11
5353: PPUSH
5354: CALL_OW 88
// Say ( Markov , DMar-06-Obj-12 ) ;
5358: LD_EXP 12
5362: PPUSH
5363: LD_STRING DMar-06-Obj-12
5365: PPUSH
5366: CALL_OW 88
// Say ( Markov , DMar-06-Obj-13 ) ;
5370: LD_EXP 12
5374: PPUSH
5375: LD_STRING DMar-06-Obj-13
5377: PPUSH
5378: CALL_OW 88
// Say ( Markov , DMar-06-Obj-14 ) ;
5382: LD_EXP 12
5386: PPUSH
5387: LD_STRING DMar-06-Obj-14
5389: PPUSH
5390: CALL_OW 88
// Say ( Olaf , DO-06-Obj-15 ) ;
5394: LD_EXP 14
5398: PPUSH
5399: LD_STRING DO-06-Obj-15
5401: PPUSH
5402: CALL_OW 88
// Say ( Olaf , DO-06-Obj-16 ) ;
5406: LD_EXP 14
5410: PPUSH
5411: LD_STRING DO-06-Obj-16
5413: PPUSH
5414: CALL_OW 88
// Say ( Heike , DH-06-Obj-17 ) ;
5418: LD_EXP 5
5422: PPUSH
5423: LD_STRING DH-06-Obj-17
5425: PPUSH
5426: CALL_OW 88
// Say ( Olaf , DO-06-Obj-18 ) ;
5430: LD_EXP 14
5434: PPUSH
5435: LD_STRING DO-06-Obj-18
5437: PPUSH
5438: CALL_OW 88
// end ;
5442: LD_VAR 0 1
5446: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
5447: LD_INT 34
5449: PUSH
5450: LD_EXP 29
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: PPUSH
5459: CALL_OW 69
5463: IFFALSE 5645
5465: GO 5467
5467: DISABLE
5468: LD_INT 0
5470: PPUSH
// begin CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
5471: LD_INT 34
5473: PUSH
5474: LD_EXP 29
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: PPUSH
5483: CALL_OW 69
5487: PPUSH
5488: CALL_OW 87
// DialogueOn ;
5492: CALL_OW 6
// if Markov then
5496: LD_EXP 12
5500: IFFALSE 5528
// begin Say ( Markov , DMar-06-Grn-1 ) ;
5502: LD_EXP 12
5506: PPUSH
5507: LD_STRING DMar-06-Grn-1
5509: PPUSH
5510: CALL_OW 88
// Say ( Heike , DH-06-Grn-2 ) ;
5514: LD_EXP 5
5518: PPUSH
5519: LD_STRING DH-06-Grn-2
5521: PPUSH
5522: CALL_OW 88
// end else
5526: GO 5627
// if heikeSecondSquad then
5528: LD_EXP 18
5532: IFFALSE 5627
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
5534: LD_ADDR_VAR 0 1
5538: PUSH
5539: LD_EXP 18
5543: PUSH
5544: LD_INT 1
5546: PPUSH
5547: LD_EXP 18
5551: PPUSH
5552: CALL_OW 12
5556: ARRAY
5557: ST_TO_ADDR
// case GetSex ( random ) of 1 :
5558: LD_VAR 0 1
5562: PPUSH
5563: CALL_OW 258
5567: PUSH
5568: LD_INT 1
5570: DOUBLE
5571: EQUAL
5572: IFTRUE 5576
5574: GO 5591
5576: POP
// Say ( random , DArm-06-Grn-1 ) ; 2 :
5577: LD_VAR 0 1
5581: PPUSH
5582: LD_STRING DArm-06-Grn-1
5584: PPUSH
5585: CALL_OW 88
5589: GO 5615
5591: LD_INT 2
5593: DOUBLE
5594: EQUAL
5595: IFTRUE 5599
5597: GO 5614
5599: POP
// Say ( random , DArf-06-Grn-1 ) ; end ;
5600: LD_VAR 0 1
5604: PPUSH
5605: LD_STRING DArf-06-Grn-1
5607: PPUSH
5608: CALL_OW 88
5612: GO 5615
5614: POP
// Say ( Heike , DH-06-Grn-2 ) ;
5615: LD_EXP 5
5619: PPUSH
5620: LD_STRING DH-06-Grn-2
5622: PPUSH
5623: CALL_OW 88
// end ; DialogueOff ;
5627: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
5631: LD_STRING MortarConstructed
5633: PPUSH
5634: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
5638: LD_STRING SelfPropelledMortar
5640: PPUSH
5641: CALL_OW 339
// end ;
5645: PPOPN 1
5647: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
5648: LD_INT 8
5650: PPUSH
5651: LD_INT 22
5653: PUSH
5654: LD_INT 3
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PUSH
5661: LD_INT 21
5663: PUSH
5664: LD_INT 3
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: PUSH
5671: EMPTY
5672: LIST
5673: LIST
5674: PPUSH
5675: CALL_OW 70
5679: NOT
5680: PUSH
5681: LD_EXP 3
5685: NOT
5686: AND
5687: IFFALSE 5937
5689: GO 5691
5691: DISABLE
5692: LD_INT 0
5694: PPUSH
// begin outpostDestroyed := true ;
5695: LD_ADDR_EXP 4
5699: PUSH
5700: LD_INT 1
5702: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
5703: LD_INT 22
5705: PUSH
5706: LD_INT 2
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: PUSH
5713: LD_INT 34
5715: PUSH
5716: LD_EXP 29
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: PUSH
5725: LD_INT 92
5727: PUSH
5728: LD_INT 195
5730: PUSH
5731: LD_INT 164
5733: PUSH
5734: LD_INT 12
5736: PUSH
5737: EMPTY
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: LIST
5747: PPUSH
5748: CALL_OW 69
5752: NOT
5753: IFFALSE 5757
// exit ;
5755: GO 5937
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
5757: LD_EXP 6
5761: PPUSH
5762: CALL_OW 302
5766: NOT
5767: PUSH
5768: LD_EXP 10
5772: PPUSH
5773: CALL_OW 302
5777: NOT
5778: OR
5779: IFFALSE 5783
// exit ;
5781: GO 5937
// Say ( Givi , DG-06-Otpst-1-1 ) ;
5783: LD_EXP 6
5787: PPUSH
5788: LD_STRING DG-06-Otpst-1-1
5790: PPUSH
5791: CALL_OW 88
// Say ( Kaia , DK-06-Otpst-1-2 ) ;
5795: LD_EXP 10
5799: PPUSH
5800: LD_STRING DK-06-Otpst-1-2
5802: PPUSH
5803: CALL_OW 88
// if IsOk ( Markov ) then
5807: LD_EXP 12
5811: PPUSH
5812: CALL_OW 302
5816: IFFALSE 5844
// begin Say ( Markov , DMar-06-Otpst-1-3 ) ;
5818: LD_EXP 12
5822: PPUSH
5823: LD_STRING DMar-06-Otpst-1-3
5825: PPUSH
5826: CALL_OW 88
// Say ( Markov , DMar-06-Otpst-1-4 ) ;
5830: LD_EXP 12
5834: PPUSH
5835: LD_STRING DMar-06-Otpst-1-4
5837: PPUSH
5838: CALL_OW 88
// end else
5842: GO 5925
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
5844: LD_ADDR_VAR 0 1
5848: PUSH
5849: LD_EXP 18
5853: PUSH
5854: LD_INT 1
5856: PPUSH
5857: LD_EXP 18
5861: PPUSH
5862: CALL_OW 12
5866: ARRAY
5867: ST_TO_ADDR
// case GetSex ( random ) of 1 :
5868: LD_VAR 0 1
5872: PPUSH
5873: CALL_OW 258
5877: PUSH
5878: LD_INT 1
5880: DOUBLE
5881: EQUAL
5882: IFTRUE 5886
5884: GO 5901
5886: POP
// Say ( random , DArm-06-Otpst-1-a-3 ) ; 2 :
5887: LD_VAR 0 1
5891: PPUSH
5892: LD_STRING DArm-06-Otpst-1-a-3
5894: PPUSH
5895: CALL_OW 88
5899: GO 5925
5901: LD_INT 2
5903: DOUBLE
5904: EQUAL
5905: IFTRUE 5909
5907: GO 5924
5909: POP
// Say ( random , DArf-06-Otpst-1-a-3 ) ; end ;
5910: LD_VAR 0 1
5914: PPUSH
5915: LD_STRING DArf-06-Otpst-1-a-3
5917: PPUSH
5918: CALL_OW 88
5922: GO 5925
5924: POP
// end ; Say ( Givi , DG-06-Otpst-1-5 ) ;
5925: LD_EXP 6
5929: PPUSH
5930: LD_STRING DG-06-Otpst-1-5
5932: PPUSH
5933: CALL_OW 88
// end ; end_of_file
5937: PPOPN 1
5939: END
// on VehicleConstructed ( vehicle , factory ) do var driver ;
5940: LD_INT 0
5942: PPUSH
// begin if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
5943: LD_VAR 0 1
5947: PPUSH
5948: CALL_OW 255
5952: PUSH
5953: LD_INT 2
5955: EQUAL
5956: PUSH
5957: LD_OWVAR 52
5961: AND
5962: PUSH
5963: LD_VAR 0 1
5967: PPUSH
5968: CALL_OW 263
5972: PUSH
5973: LD_INT 1
5975: EQUAL
5976: AND
5977: IFFALSE 6032
// begin driver := IsDrivenBy ( vehicle ) ;
5979: LD_ADDR_VAR 0 3
5983: PUSH
5984: LD_VAR 0 1
5988: PPUSH
5989: CALL_OW 311
5993: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
5994: LD_VAR 0 1
5998: PPUSH
5999: LD_INT 211
6001: PPUSH
6002: LD_INT 101
6004: PPUSH
6005: CALL_OW 111
// AddComExitVehicle ( driver ) ;
6009: LD_VAR 0 3
6013: PPUSH
6014: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
6018: LD_VAR 0 3
6022: PPUSH
6023: LD_VAR 0 2
6027: PPUSH
6028: CALL_OW 180
// end ; end ;
6032: PPOPN 3
6034: END
// on UnitDestroyed ( un ) do begin if un = Heike then
6035: LD_VAR 0 1
6039: PUSH
6040: LD_EXP 5
6044: EQUAL
6045: IFFALSE 6054
// YouLost ( Heike ) ;
6047: LD_STRING Heike
6049: PPUSH
6050: CALL_OW 104
// end ;
6054: PPOPN 1
6056: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin end ; end_of_file
6057: PPOPN 4
6059: END
// every 0 0$30 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 300 , 250 , 200 ] [ Difficulty ] do
6060: LD_INT 6
6062: PPUSH
6063: LD_INT 1
6065: PPUSH
6066: CALL_OW 287
6070: PUSH
6071: LD_INT 300
6073: PUSH
6074: LD_INT 250
6076: PUSH
6077: LD_INT 200
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: LIST
6084: PUSH
6085: LD_OWVAR 67
6089: ARRAY
6090: LESS
6091: IFFALSE 6118
6093: GO 6095
6095: DISABLE
// begin enable ;
6096: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
6097: LD_INT 1
6099: PPUSH
6100: LD_INT 5
6102: PPUSH
6103: CALL_OW 12
6107: PPUSH
6108: LD_INT 6
6110: PPUSH
6111: LD_INT 1
6113: PPUSH
6114: CALL_OW 55
// end ; end_of_file
6118: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
6119: LD_INT 0
6121: PPUSH
6122: PPUSH
// if exist_mode then
6123: LD_VAR 0 2
6127: IFFALSE 6152
// unit := CreateCharacter ( prefix & ident ) else
6129: LD_ADDR_VAR 0 5
6133: PUSH
6134: LD_VAR 0 3
6138: PUSH
6139: LD_VAR 0 1
6143: STR
6144: PPUSH
6145: CALL_OW 34
6149: ST_TO_ADDR
6150: GO 6167
// unit := NewCharacter ( ident ) ;
6152: LD_ADDR_VAR 0 5
6156: PUSH
6157: LD_VAR 0 1
6161: PPUSH
6162: CALL_OW 25
6166: ST_TO_ADDR
// result := unit ;
6167: LD_ADDR_VAR 0 4
6171: PUSH
6172: LD_VAR 0 5
6176: ST_TO_ADDR
// end ;
6177: LD_VAR 0 4
6181: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
6182: LD_INT 0
6184: PPUSH
6185: PPUSH
// if not side or not nation then
6186: LD_VAR 0 1
6190: NOT
6191: PUSH
6192: LD_VAR 0 2
6196: NOT
6197: OR
6198: IFFALSE 6202
// exit ;
6200: GO 6966
// case nation of nation_american :
6202: LD_VAR 0 2
6206: PUSH
6207: LD_INT 1
6209: DOUBLE
6210: EQUAL
6211: IFTRUE 6215
6213: GO 6429
6215: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
6216: LD_ADDR_VAR 0 4
6220: PUSH
6221: LD_INT 35
6223: PUSH
6224: LD_INT 45
6226: PUSH
6227: LD_INT 46
6229: PUSH
6230: LD_INT 47
6232: PUSH
6233: LD_INT 82
6235: PUSH
6236: LD_INT 83
6238: PUSH
6239: LD_INT 84
6241: PUSH
6242: LD_INT 85
6244: PUSH
6245: LD_INT 86
6247: PUSH
6248: LD_INT 1
6250: PUSH
6251: LD_INT 2
6253: PUSH
6254: LD_INT 6
6256: PUSH
6257: LD_INT 15
6259: PUSH
6260: LD_INT 16
6262: PUSH
6263: LD_INT 7
6265: PUSH
6266: LD_INT 12
6268: PUSH
6269: LD_INT 13
6271: PUSH
6272: LD_INT 10
6274: PUSH
6275: LD_INT 14
6277: PUSH
6278: LD_INT 20
6280: PUSH
6281: LD_INT 21
6283: PUSH
6284: LD_INT 22
6286: PUSH
6287: LD_INT 25
6289: PUSH
6290: LD_INT 32
6292: PUSH
6293: LD_INT 27
6295: PUSH
6296: LD_INT 36
6298: PUSH
6299: LD_INT 69
6301: PUSH
6302: LD_INT 39
6304: PUSH
6305: LD_INT 34
6307: PUSH
6308: LD_INT 40
6310: PUSH
6311: LD_INT 48
6313: PUSH
6314: LD_INT 49
6316: PUSH
6317: LD_INT 50
6319: PUSH
6320: LD_INT 51
6322: PUSH
6323: LD_INT 52
6325: PUSH
6326: LD_INT 53
6328: PUSH
6329: LD_INT 54
6331: PUSH
6332: LD_INT 55
6334: PUSH
6335: LD_INT 56
6337: PUSH
6338: LD_INT 57
6340: PUSH
6341: LD_INT 58
6343: PUSH
6344: LD_INT 59
6346: PUSH
6347: LD_INT 60
6349: PUSH
6350: LD_INT 61
6352: PUSH
6353: LD_INT 62
6355: PUSH
6356: LD_INT 80
6358: PUSH
6359: LD_INT 82
6361: PUSH
6362: LD_INT 83
6364: PUSH
6365: LD_INT 84
6367: PUSH
6368: LD_INT 85
6370: PUSH
6371: LD_INT 86
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: ST_TO_ADDR
6427: GO 6890
6429: LD_INT 2
6431: DOUBLE
6432: EQUAL
6433: IFTRUE 6437
6435: GO 6659
6437: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
6438: LD_ADDR_VAR 0 4
6442: PUSH
6443: LD_INT 35
6445: PUSH
6446: LD_INT 45
6448: PUSH
6449: LD_INT 46
6451: PUSH
6452: LD_INT 47
6454: PUSH
6455: LD_INT 82
6457: PUSH
6458: LD_INT 83
6460: PUSH
6461: LD_INT 84
6463: PUSH
6464: LD_INT 85
6466: PUSH
6467: LD_INT 87
6469: PUSH
6470: LD_INT 70
6472: PUSH
6473: LD_INT 1
6475: PUSH
6476: LD_INT 11
6478: PUSH
6479: LD_INT 3
6481: PUSH
6482: LD_INT 4
6484: PUSH
6485: LD_INT 5
6487: PUSH
6488: LD_INT 6
6490: PUSH
6491: LD_INT 15
6493: PUSH
6494: LD_INT 18
6496: PUSH
6497: LD_INT 7
6499: PUSH
6500: LD_INT 17
6502: PUSH
6503: LD_INT 8
6505: PUSH
6506: LD_INT 20
6508: PUSH
6509: LD_INT 21
6511: PUSH
6512: LD_INT 22
6514: PUSH
6515: LD_INT 72
6517: PUSH
6518: LD_INT 26
6520: PUSH
6521: LD_INT 69
6523: PUSH
6524: LD_INT 39
6526: PUSH
6527: LD_INT 40
6529: PUSH
6530: LD_INT 41
6532: PUSH
6533: LD_INT 42
6535: PUSH
6536: LD_INT 43
6538: PUSH
6539: LD_INT 48
6541: PUSH
6542: LD_INT 49
6544: PUSH
6545: LD_INT 50
6547: PUSH
6548: LD_INT 51
6550: PUSH
6551: LD_INT 52
6553: PUSH
6554: LD_INT 53
6556: PUSH
6557: LD_INT 54
6559: PUSH
6560: LD_INT 55
6562: PUSH
6563: LD_INT 56
6565: PUSH
6566: LD_INT 60
6568: PUSH
6569: LD_INT 61
6571: PUSH
6572: LD_INT 62
6574: PUSH
6575: LD_INT 66
6577: PUSH
6578: LD_INT 67
6580: PUSH
6581: LD_INT 68
6583: PUSH
6584: LD_INT 81
6586: PUSH
6587: LD_INT 82
6589: PUSH
6590: LD_INT 83
6592: PUSH
6593: LD_INT 84
6595: PUSH
6596: LD_INT 85
6598: PUSH
6599: LD_INT 87
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: ST_TO_ADDR
6657: GO 6890
6659: LD_INT 3
6661: DOUBLE
6662: EQUAL
6663: IFTRUE 6667
6665: GO 6889
6667: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
6668: LD_ADDR_VAR 0 4
6672: PUSH
6673: LD_INT 46
6675: PUSH
6676: LD_INT 47
6678: PUSH
6679: LD_INT 1
6681: PUSH
6682: LD_INT 2
6684: PUSH
6685: LD_INT 82
6687: PUSH
6688: LD_INT 83
6690: PUSH
6691: LD_INT 84
6693: PUSH
6694: LD_INT 85
6696: PUSH
6697: LD_INT 86
6699: PUSH
6700: LD_INT 11
6702: PUSH
6703: LD_INT 9
6705: PUSH
6706: LD_INT 20
6708: PUSH
6709: LD_INT 19
6711: PUSH
6712: LD_INT 21
6714: PUSH
6715: LD_INT 24
6717: PUSH
6718: LD_INT 22
6720: PUSH
6721: LD_INT 25
6723: PUSH
6724: LD_INT 28
6726: PUSH
6727: LD_INT 29
6729: PUSH
6730: LD_INT 30
6732: PUSH
6733: LD_INT 31
6735: PUSH
6736: LD_INT 37
6738: PUSH
6739: LD_INT 38
6741: PUSH
6742: LD_INT 32
6744: PUSH
6745: LD_INT 27
6747: PUSH
6748: LD_INT 33
6750: PUSH
6751: LD_INT 69
6753: PUSH
6754: LD_INT 39
6756: PUSH
6757: LD_INT 34
6759: PUSH
6760: LD_INT 40
6762: PUSH
6763: LD_INT 71
6765: PUSH
6766: LD_INT 23
6768: PUSH
6769: LD_INT 44
6771: PUSH
6772: LD_INT 48
6774: PUSH
6775: LD_INT 49
6777: PUSH
6778: LD_INT 50
6780: PUSH
6781: LD_INT 51
6783: PUSH
6784: LD_INT 52
6786: PUSH
6787: LD_INT 53
6789: PUSH
6790: LD_INT 54
6792: PUSH
6793: LD_INT 55
6795: PUSH
6796: LD_INT 56
6798: PUSH
6799: LD_INT 57
6801: PUSH
6802: LD_INT 58
6804: PUSH
6805: LD_INT 59
6807: PUSH
6808: LD_INT 63
6810: PUSH
6811: LD_INT 64
6813: PUSH
6814: LD_INT 65
6816: PUSH
6817: LD_INT 82
6819: PUSH
6820: LD_INT 83
6822: PUSH
6823: LD_INT 84
6825: PUSH
6826: LD_INT 85
6828: PUSH
6829: LD_INT 86
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: ST_TO_ADDR
6887: GO 6890
6889: POP
// if state > - 1 and state < 3 then
6890: LD_VAR 0 3
6894: PUSH
6895: LD_INT 1
6897: NEG
6898: GREATER
6899: PUSH
6900: LD_VAR 0 3
6904: PUSH
6905: LD_INT 3
6907: LESS
6908: AND
6909: IFFALSE 6966
// for i in result do
6911: LD_ADDR_VAR 0 5
6915: PUSH
6916: LD_VAR 0 4
6920: PUSH
6921: FOR_IN
6922: IFFALSE 6964
// if GetTech ( i , side ) <> state then
6924: LD_VAR 0 5
6928: PPUSH
6929: LD_VAR 0 1
6933: PPUSH
6934: CALL_OW 321
6938: PUSH
6939: LD_VAR 0 3
6943: NONEQUAL
6944: IFFALSE 6962
// result := result diff i ;
6946: LD_ADDR_VAR 0 4
6950: PUSH
6951: LD_VAR 0 4
6955: PUSH
6956: LD_VAR 0 5
6960: DIFF
6961: ST_TO_ADDR
6962: GO 6921
6964: POP
6965: POP
// end ;
6966: LD_VAR 0 4
6970: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
6971: LD_INT 0
6973: PPUSH
6974: PPUSH
6975: PPUSH
// result := true ;
6976: LD_ADDR_VAR 0 3
6980: PUSH
6981: LD_INT 1
6983: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
6984: LD_ADDR_VAR 0 5
6988: PUSH
6989: LD_VAR 0 2
6993: PPUSH
6994: CALL_OW 480
6998: ST_TO_ADDR
// if not tmp then
6999: LD_VAR 0 5
7003: NOT
7004: IFFALSE 7008
// exit ;
7006: GO 7057
// for i in tmp do
7008: LD_ADDR_VAR 0 4
7012: PUSH
7013: LD_VAR 0 5
7017: PUSH
7018: FOR_IN
7019: IFFALSE 7055
// if GetTech ( i , side ) <> state_researched then
7021: LD_VAR 0 4
7025: PPUSH
7026: LD_VAR 0 1
7030: PPUSH
7031: CALL_OW 321
7035: PUSH
7036: LD_INT 2
7038: NONEQUAL
7039: IFFALSE 7053
// begin result := false ;
7041: LD_ADDR_VAR 0 3
7045: PUSH
7046: LD_INT 0
7048: ST_TO_ADDR
// exit ;
7049: POP
7050: POP
7051: GO 7057
// end ;
7053: GO 7018
7055: POP
7056: POP
// end ;
7057: LD_VAR 0 3
7061: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
7062: LD_INT 0
7064: PPUSH
7065: PPUSH
7066: PPUSH
7067: PPUSH
7068: PPUSH
7069: PPUSH
7070: PPUSH
7071: PPUSH
7072: PPUSH
7073: PPUSH
7074: PPUSH
7075: PPUSH
7076: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
7077: LD_VAR 0 1
7081: NOT
7082: PUSH
7083: LD_VAR 0 1
7087: PPUSH
7088: CALL_OW 257
7092: PUSH
7093: LD_INT 9
7095: NONEQUAL
7096: OR
7097: IFFALSE 7101
// exit ;
7099: GO 7674
// side := GetSide ( unit ) ;
7101: LD_ADDR_VAR 0 9
7105: PUSH
7106: LD_VAR 0 1
7110: PPUSH
7111: CALL_OW 255
7115: ST_TO_ADDR
// tech_space := tech_spacanom ;
7116: LD_ADDR_VAR 0 12
7120: PUSH
7121: LD_INT 29
7123: ST_TO_ADDR
// tech_time := tech_taurad ;
7124: LD_ADDR_VAR 0 13
7128: PUSH
7129: LD_INT 28
7131: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
7132: LD_ADDR_VAR 0 11
7136: PUSH
7137: LD_VAR 0 1
7141: PPUSH
7142: CALL_OW 310
7146: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
7147: LD_VAR 0 11
7151: PPUSH
7152: CALL_OW 247
7156: PUSH
7157: LD_INT 2
7159: EQUAL
7160: IFFALSE 7164
// exit ;
7162: GO 7674
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7164: LD_ADDR_VAR 0 8
7168: PUSH
7169: LD_INT 81
7171: PUSH
7172: LD_VAR 0 9
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PUSH
7181: LD_INT 3
7183: PUSH
7184: LD_INT 21
7186: PUSH
7187: LD_INT 3
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: PPUSH
7202: CALL_OW 69
7206: ST_TO_ADDR
// if not tmp then
7207: LD_VAR 0 8
7211: NOT
7212: IFFALSE 7216
// exit ;
7214: GO 7674
// if in_unit then
7216: LD_VAR 0 11
7220: IFFALSE 7244
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
7222: LD_ADDR_VAR 0 10
7226: PUSH
7227: LD_VAR 0 8
7231: PPUSH
7232: LD_VAR 0 11
7236: PPUSH
7237: CALL_OW 74
7241: ST_TO_ADDR
7242: GO 7264
// enemy := NearestUnitToUnit ( tmp , unit ) ;
7244: LD_ADDR_VAR 0 10
7248: PUSH
7249: LD_VAR 0 8
7253: PPUSH
7254: LD_VAR 0 1
7258: PPUSH
7259: CALL_OW 74
7263: ST_TO_ADDR
// if not enemy then
7264: LD_VAR 0 10
7268: NOT
7269: IFFALSE 7273
// exit ;
7271: GO 7674
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
7273: LD_VAR 0 11
7277: PUSH
7278: LD_VAR 0 11
7282: PPUSH
7283: LD_VAR 0 10
7287: PPUSH
7288: CALL_OW 296
7292: PUSH
7293: LD_INT 13
7295: GREATER
7296: AND
7297: PUSH
7298: LD_VAR 0 1
7302: PPUSH
7303: LD_VAR 0 10
7307: PPUSH
7308: CALL_OW 296
7312: PUSH
7313: LD_INT 12
7315: GREATER
7316: OR
7317: IFFALSE 7321
// exit ;
7319: GO 7674
// missile := [ 1 ] ;
7321: LD_ADDR_VAR 0 14
7325: PUSH
7326: LD_INT 1
7328: PUSH
7329: EMPTY
7330: LIST
7331: ST_TO_ADDR
// if Researched ( side , tech_space ) then
7332: LD_VAR 0 9
7336: PPUSH
7337: LD_VAR 0 12
7341: PPUSH
7342: CALL_OW 325
7346: IFFALSE 7375
// missile := Insert ( missile , missile + 1 , 2 ) ;
7348: LD_ADDR_VAR 0 14
7352: PUSH
7353: LD_VAR 0 14
7357: PPUSH
7358: LD_VAR 0 14
7362: PUSH
7363: LD_INT 1
7365: PLUS
7366: PPUSH
7367: LD_INT 2
7369: PPUSH
7370: CALL_OW 2
7374: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
7375: LD_VAR 0 9
7379: PPUSH
7380: LD_VAR 0 13
7384: PPUSH
7385: CALL_OW 325
7389: PUSH
7390: LD_VAR 0 10
7394: PPUSH
7395: CALL_OW 255
7399: PPUSH
7400: LD_VAR 0 13
7404: PPUSH
7405: CALL_OW 325
7409: NOT
7410: AND
7411: IFFALSE 7440
// missile := Insert ( missile , missile + 1 , 3 ) ;
7413: LD_ADDR_VAR 0 14
7417: PUSH
7418: LD_VAR 0 14
7422: PPUSH
7423: LD_VAR 0 14
7427: PUSH
7428: LD_INT 1
7430: PLUS
7431: PPUSH
7432: LD_INT 3
7434: PPUSH
7435: CALL_OW 2
7439: ST_TO_ADDR
// if missile < 2 then
7440: LD_VAR 0 14
7444: PUSH
7445: LD_INT 2
7447: LESS
7448: IFFALSE 7452
// exit ;
7450: GO 7674
// x := GetX ( enemy ) ;
7452: LD_ADDR_VAR 0 4
7456: PUSH
7457: LD_VAR 0 10
7461: PPUSH
7462: CALL_OW 250
7466: ST_TO_ADDR
// y := GetY ( enemy ) ;
7467: LD_ADDR_VAR 0 5
7471: PUSH
7472: LD_VAR 0 10
7476: PPUSH
7477: CALL_OW 251
7481: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
7482: LD_ADDR_VAR 0 6
7486: PUSH
7487: LD_VAR 0 4
7491: PUSH
7492: LD_INT 1
7494: NEG
7495: PPUSH
7496: LD_INT 1
7498: PPUSH
7499: CALL_OW 12
7503: PLUS
7504: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
7505: LD_ADDR_VAR 0 7
7509: PUSH
7510: LD_VAR 0 5
7514: PUSH
7515: LD_INT 1
7517: NEG
7518: PPUSH
7519: LD_INT 1
7521: PPUSH
7522: CALL_OW 12
7526: PLUS
7527: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
7528: LD_VAR 0 6
7532: PPUSH
7533: LD_VAR 0 7
7537: PPUSH
7538: CALL_OW 488
7542: NOT
7543: IFFALSE 7565
// begin _x := x ;
7545: LD_ADDR_VAR 0 6
7549: PUSH
7550: LD_VAR 0 4
7554: ST_TO_ADDR
// _y := y ;
7555: LD_ADDR_VAR 0 7
7559: PUSH
7560: LD_VAR 0 5
7564: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
7565: LD_ADDR_VAR 0 3
7569: PUSH
7570: LD_INT 1
7572: PPUSH
7573: LD_VAR 0 14
7577: PPUSH
7578: CALL_OW 12
7582: ST_TO_ADDR
// case i of 1 :
7583: LD_VAR 0 3
7587: PUSH
7588: LD_INT 1
7590: DOUBLE
7591: EQUAL
7592: IFTRUE 7596
7594: GO 7613
7596: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
7597: LD_VAR 0 1
7601: PPUSH
7602: LD_VAR 0 10
7606: PPUSH
7607: CALL_OW 115
7611: GO 7674
7613: LD_INT 2
7615: DOUBLE
7616: EQUAL
7617: IFTRUE 7621
7619: GO 7643
7621: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
7622: LD_VAR 0 1
7626: PPUSH
7627: LD_VAR 0 6
7631: PPUSH
7632: LD_VAR 0 7
7636: PPUSH
7637: CALL_OW 153
7641: GO 7674
7643: LD_INT 3
7645: DOUBLE
7646: EQUAL
7647: IFTRUE 7651
7649: GO 7673
7651: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
7652: LD_VAR 0 1
7656: PPUSH
7657: LD_VAR 0 6
7661: PPUSH
7662: LD_VAR 0 7
7666: PPUSH
7667: CALL_OW 154
7671: GO 7674
7673: POP
// end ;
7674: LD_VAR 0 2
7678: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
7679: LD_INT 0
7681: PPUSH
7682: PPUSH
7683: PPUSH
7684: PPUSH
7685: PPUSH
7686: PPUSH
// if not unit or not building then
7687: LD_VAR 0 1
7691: NOT
7692: PUSH
7693: LD_VAR 0 2
7697: NOT
7698: OR
7699: IFFALSE 7703
// exit ;
7701: GO 7861
// x := GetX ( building ) ;
7703: LD_ADDR_VAR 0 5
7707: PUSH
7708: LD_VAR 0 2
7712: PPUSH
7713: CALL_OW 250
7717: ST_TO_ADDR
// y := GetY ( building ) ;
7718: LD_ADDR_VAR 0 6
7722: PUSH
7723: LD_VAR 0 2
7727: PPUSH
7728: CALL_OW 251
7732: ST_TO_ADDR
// for i = 0 to 5 do
7733: LD_ADDR_VAR 0 4
7737: PUSH
7738: DOUBLE
7739: LD_INT 0
7741: DEC
7742: ST_TO_ADDR
7743: LD_INT 5
7745: PUSH
7746: FOR_TO
7747: IFFALSE 7859
// begin _x := ShiftX ( x , i , 3 ) ;
7749: LD_ADDR_VAR 0 7
7753: PUSH
7754: LD_VAR 0 5
7758: PPUSH
7759: LD_VAR 0 4
7763: PPUSH
7764: LD_INT 3
7766: PPUSH
7767: CALL_OW 272
7771: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
7772: LD_ADDR_VAR 0 8
7776: PUSH
7777: LD_VAR 0 6
7781: PPUSH
7782: LD_VAR 0 4
7786: PPUSH
7787: LD_INT 3
7789: PPUSH
7790: CALL_OW 273
7794: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
7795: LD_VAR 0 7
7799: PPUSH
7800: LD_VAR 0 8
7804: PPUSH
7805: CALL_OW 488
7809: NOT
7810: IFFALSE 7814
// continue ;
7812: GO 7746
// if HexInfo ( _x , _y ) = 0 then
7814: LD_VAR 0 7
7818: PPUSH
7819: LD_VAR 0 8
7823: PPUSH
7824: CALL_OW 428
7828: PUSH
7829: LD_INT 0
7831: EQUAL
7832: IFFALSE 7857
// begin ComMoveXY ( unit , _x , _y ) ;
7834: LD_VAR 0 1
7838: PPUSH
7839: LD_VAR 0 7
7843: PPUSH
7844: LD_VAR 0 8
7848: PPUSH
7849: CALL_OW 111
// exit ;
7853: POP
7854: POP
7855: GO 7861
// end ; end ;
7857: GO 7746
7859: POP
7860: POP
// end ;
7861: LD_VAR 0 3
7865: RET
// export function ScanBase ( side , base_area ) ; begin
7866: LD_INT 0
7868: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
7869: LD_ADDR_VAR 0 3
7873: PUSH
7874: LD_VAR 0 2
7878: PPUSH
7879: LD_INT 81
7881: PUSH
7882: LD_VAR 0 1
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PPUSH
7891: CALL_OW 70
7895: ST_TO_ADDR
// end ;
7896: LD_VAR 0 3
7900: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
7901: LD_INT 0
7903: PPUSH
7904: PPUSH
7905: PPUSH
7906: PPUSH
// result := false ;
7907: LD_ADDR_VAR 0 2
7911: PUSH
7912: LD_INT 0
7914: ST_TO_ADDR
// side := GetSide ( unit ) ;
7915: LD_ADDR_VAR 0 3
7919: PUSH
7920: LD_VAR 0 1
7924: PPUSH
7925: CALL_OW 255
7929: ST_TO_ADDR
// nat := GetNation ( unit ) ;
7930: LD_ADDR_VAR 0 4
7934: PUSH
7935: LD_VAR 0 1
7939: PPUSH
7940: CALL_OW 248
7944: ST_TO_ADDR
// case nat of 1 :
7945: LD_VAR 0 4
7949: PUSH
7950: LD_INT 1
7952: DOUBLE
7953: EQUAL
7954: IFTRUE 7958
7956: GO 7969
7958: POP
// tech := tech_lassight ; 2 :
7959: LD_ADDR_VAR 0 5
7963: PUSH
7964: LD_INT 12
7966: ST_TO_ADDR
7967: GO 8008
7969: LD_INT 2
7971: DOUBLE
7972: EQUAL
7973: IFTRUE 7977
7975: GO 7988
7977: POP
// tech := tech_mortar ; 3 :
7978: LD_ADDR_VAR 0 5
7982: PUSH
7983: LD_INT 41
7985: ST_TO_ADDR
7986: GO 8008
7988: LD_INT 3
7990: DOUBLE
7991: EQUAL
7992: IFTRUE 7996
7994: GO 8007
7996: POP
// tech := tech_bazooka ; end ;
7997: LD_ADDR_VAR 0 5
8001: PUSH
8002: LD_INT 44
8004: ST_TO_ADDR
8005: GO 8008
8007: POP
// if Researched ( side , tech ) then
8008: LD_VAR 0 3
8012: PPUSH
8013: LD_VAR 0 5
8017: PPUSH
8018: CALL_OW 325
8022: IFFALSE 8049
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
8024: LD_ADDR_VAR 0 2
8028: PUSH
8029: LD_INT 5
8031: PUSH
8032: LD_INT 8
8034: PUSH
8035: LD_INT 9
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: LIST
8042: PUSH
8043: LD_VAR 0 4
8047: ARRAY
8048: ST_TO_ADDR
// end ;
8049: LD_VAR 0 2
8053: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
8054: LD_INT 0
8056: PPUSH
8057: PPUSH
8058: PPUSH
// if not mines then
8059: LD_VAR 0 2
8063: NOT
8064: IFFALSE 8068
// exit ;
8066: GO 8212
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8068: LD_ADDR_VAR 0 5
8072: PUSH
8073: LD_INT 81
8075: PUSH
8076: LD_VAR 0 1
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: PUSH
8085: LD_INT 3
8087: PUSH
8088: LD_INT 21
8090: PUSH
8091: LD_INT 3
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: PPUSH
8106: CALL_OW 69
8110: ST_TO_ADDR
// for i in mines do
8111: LD_ADDR_VAR 0 4
8115: PUSH
8116: LD_VAR 0 2
8120: PUSH
8121: FOR_IN
8122: IFFALSE 8210
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
8124: LD_VAR 0 4
8128: PUSH
8129: LD_INT 1
8131: ARRAY
8132: PPUSH
8133: LD_VAR 0 4
8137: PUSH
8138: LD_INT 2
8140: ARRAY
8141: PPUSH
8142: CALL_OW 458
8146: NOT
8147: IFFALSE 8151
// continue ;
8149: GO 8121
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
8151: LD_VAR 0 4
8155: PUSH
8156: LD_INT 1
8158: ARRAY
8159: PPUSH
8160: LD_VAR 0 4
8164: PUSH
8165: LD_INT 2
8167: ARRAY
8168: PPUSH
8169: CALL_OW 428
8173: PUSH
8174: LD_VAR 0 5
8178: IN
8179: IFFALSE 8208
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
8181: LD_VAR 0 4
8185: PUSH
8186: LD_INT 1
8188: ARRAY
8189: PPUSH
8190: LD_VAR 0 4
8194: PUSH
8195: LD_INT 2
8197: ARRAY
8198: PPUSH
8199: LD_VAR 0 1
8203: PPUSH
8204: CALL_OW 456
// end ;
8208: GO 8121
8210: POP
8211: POP
// end ;
8212: LD_VAR 0 3
8216: RET
// export function Count ( array ) ; var i ; begin
8217: LD_INT 0
8219: PPUSH
8220: PPUSH
// result := 0 ;
8221: LD_ADDR_VAR 0 2
8225: PUSH
8226: LD_INT 0
8228: ST_TO_ADDR
// for i in array do
8229: LD_ADDR_VAR 0 3
8233: PUSH
8234: LD_VAR 0 1
8238: PUSH
8239: FOR_IN
8240: IFFALSE 8264
// if i then
8242: LD_VAR 0 3
8246: IFFALSE 8262
// result := result + 1 ;
8248: LD_ADDR_VAR 0 2
8252: PUSH
8253: LD_VAR 0 2
8257: PUSH
8258: LD_INT 1
8260: PLUS
8261: ST_TO_ADDR
8262: GO 8239
8264: POP
8265: POP
// end ;
8266: LD_VAR 0 2
8270: RET
// export function IsEmpty ( building ) ; begin
8271: LD_INT 0
8273: PPUSH
// if not building then
8274: LD_VAR 0 1
8278: NOT
8279: IFFALSE 8283
// exit ;
8281: GO 8326
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
8283: LD_ADDR_VAR 0 2
8287: PUSH
8288: LD_VAR 0 1
8292: PUSH
8293: LD_INT 22
8295: PUSH
8296: LD_VAR 0 1
8300: PPUSH
8301: CALL_OW 255
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: PUSH
8310: LD_INT 58
8312: PUSH
8313: EMPTY
8314: LIST
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PPUSH
8320: CALL_OW 69
8324: IN
8325: ST_TO_ADDR
// end ;
8326: LD_VAR 0 2
8330: RET
// export function IsNotFull ( building ) ; begin
8331: LD_INT 0
8333: PPUSH
// if not building then
8334: LD_VAR 0 1
8338: NOT
8339: IFFALSE 8343
// exit ;
8341: GO 8362
// result := UnitsInside ( building ) < 6 ;
8343: LD_ADDR_VAR 0 2
8347: PUSH
8348: LD_VAR 0 1
8352: PPUSH
8353: CALL_OW 313
8357: PUSH
8358: LD_INT 6
8360: LESS
8361: ST_TO_ADDR
// end ;
8362: LD_VAR 0 2
8366: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
8367: LD_INT 0
8369: PPUSH
8370: PPUSH
8371: PPUSH
8372: PPUSH
// tmp := [ ] ;
8373: LD_ADDR_VAR 0 3
8377: PUSH
8378: EMPTY
8379: ST_TO_ADDR
// list := [ ] ;
8380: LD_ADDR_VAR 0 5
8384: PUSH
8385: EMPTY
8386: ST_TO_ADDR
// for i = 16 to 25 do
8387: LD_ADDR_VAR 0 4
8391: PUSH
8392: DOUBLE
8393: LD_INT 16
8395: DEC
8396: ST_TO_ADDR
8397: LD_INT 25
8399: PUSH
8400: FOR_TO
8401: IFFALSE 8474
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
8403: LD_ADDR_VAR 0 3
8407: PUSH
8408: LD_VAR 0 3
8412: PUSH
8413: LD_INT 22
8415: PUSH
8416: LD_VAR 0 1
8420: PPUSH
8421: CALL_OW 255
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: PUSH
8430: LD_INT 91
8432: PUSH
8433: LD_VAR 0 1
8437: PUSH
8438: LD_INT 6
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: LIST
8445: PUSH
8446: LD_INT 30
8448: PUSH
8449: LD_VAR 0 4
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: LIST
8462: PUSH
8463: EMPTY
8464: LIST
8465: PPUSH
8466: CALL_OW 69
8470: ADD
8471: ST_TO_ADDR
8472: GO 8400
8474: POP
8475: POP
// for i = 1 to tmp do
8476: LD_ADDR_VAR 0 4
8480: PUSH
8481: DOUBLE
8482: LD_INT 1
8484: DEC
8485: ST_TO_ADDR
8486: LD_VAR 0 3
8490: PUSH
8491: FOR_TO
8492: IFFALSE 8580
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
8494: LD_ADDR_VAR 0 5
8498: PUSH
8499: LD_VAR 0 5
8503: PUSH
8504: LD_VAR 0 3
8508: PUSH
8509: LD_VAR 0 4
8513: ARRAY
8514: PPUSH
8515: CALL_OW 266
8519: PUSH
8520: LD_VAR 0 3
8524: PUSH
8525: LD_VAR 0 4
8529: ARRAY
8530: PPUSH
8531: CALL_OW 250
8535: PUSH
8536: LD_VAR 0 3
8540: PUSH
8541: LD_VAR 0 4
8545: ARRAY
8546: PPUSH
8547: CALL_OW 251
8551: PUSH
8552: LD_VAR 0 3
8556: PUSH
8557: LD_VAR 0 4
8561: ARRAY
8562: PPUSH
8563: CALL_OW 254
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: PUSH
8574: EMPTY
8575: LIST
8576: ADD
8577: ST_TO_ADDR
8578: GO 8491
8580: POP
8581: POP
// result := list ;
8582: LD_ADDR_VAR 0 2
8586: PUSH
8587: LD_VAR 0 5
8591: ST_TO_ADDR
// end ;
8592: LD_VAR 0 2
8596: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
8597: LD_INT 0
8599: PPUSH
8600: PPUSH
8601: PPUSH
8602: PPUSH
8603: PPUSH
8604: PPUSH
8605: PPUSH
// if not factory then
8606: LD_VAR 0 1
8610: NOT
8611: IFFALSE 8615
// exit ;
8613: GO 9208
// if control = control_apeman then
8615: LD_VAR 0 4
8619: PUSH
8620: LD_INT 5
8622: EQUAL
8623: IFFALSE 8732
// begin tmp := UnitsInside ( factory ) ;
8625: LD_ADDR_VAR 0 8
8629: PUSH
8630: LD_VAR 0 1
8634: PPUSH
8635: CALL_OW 313
8639: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
8640: LD_VAR 0 8
8644: PPUSH
8645: LD_INT 25
8647: PUSH
8648: LD_INT 12
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PPUSH
8655: CALL_OW 72
8659: NOT
8660: IFFALSE 8670
// control := control_manual ;
8662: LD_ADDR_VAR 0 4
8666: PUSH
8667: LD_INT 1
8669: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
8670: LD_ADDR_VAR 0 8
8674: PUSH
8675: LD_VAR 0 1
8679: PPUSH
8680: CALL 8367 0 1
8684: ST_TO_ADDR
// if tmp then
8685: LD_VAR 0 8
8689: IFFALSE 8732
// begin for i in tmp do
8691: LD_ADDR_VAR 0 7
8695: PUSH
8696: LD_VAR 0 8
8700: PUSH
8701: FOR_IN
8702: IFFALSE 8730
// if i [ 1 ] = b_ext_radio then
8704: LD_VAR 0 7
8708: PUSH
8709: LD_INT 1
8711: ARRAY
8712: PUSH
8713: LD_INT 22
8715: EQUAL
8716: IFFALSE 8728
// begin control := control_remote ;
8718: LD_ADDR_VAR 0 4
8722: PUSH
8723: LD_INT 2
8725: ST_TO_ADDR
// break ;
8726: GO 8730
// end ;
8728: GO 8701
8730: POP
8731: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
8732: LD_VAR 0 1
8736: PPUSH
8737: LD_VAR 0 2
8741: PPUSH
8742: LD_VAR 0 3
8746: PPUSH
8747: LD_VAR 0 4
8751: PPUSH
8752: LD_VAR 0 5
8756: PPUSH
8757: CALL_OW 448
8761: IFFALSE 8796
// begin result := [ chassis , engine , control , weapon ] ;
8763: LD_ADDR_VAR 0 6
8767: PUSH
8768: LD_VAR 0 2
8772: PUSH
8773: LD_VAR 0 3
8777: PUSH
8778: LD_VAR 0 4
8782: PUSH
8783: LD_VAR 0 5
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: ST_TO_ADDR
// exit ;
8794: GO 9208
// end ; _chassis := AvailableChassisList ( factory ) ;
8796: LD_ADDR_VAR 0 9
8800: PUSH
8801: LD_VAR 0 1
8805: PPUSH
8806: CALL_OW 475
8810: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
8811: LD_ADDR_VAR 0 11
8815: PUSH
8816: LD_VAR 0 1
8820: PPUSH
8821: CALL_OW 476
8825: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
8826: LD_ADDR_VAR 0 12
8830: PUSH
8831: LD_VAR 0 1
8835: PPUSH
8836: CALL_OW 477
8840: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
8841: LD_ADDR_VAR 0 10
8845: PUSH
8846: LD_VAR 0 1
8850: PPUSH
8851: CALL_OW 478
8855: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
8856: LD_VAR 0 9
8860: NOT
8861: PUSH
8862: LD_VAR 0 11
8866: NOT
8867: OR
8868: PUSH
8869: LD_VAR 0 12
8873: NOT
8874: OR
8875: PUSH
8876: LD_VAR 0 10
8880: NOT
8881: OR
8882: IFFALSE 8917
// begin result := [ chassis , engine , control , weapon ] ;
8884: LD_ADDR_VAR 0 6
8888: PUSH
8889: LD_VAR 0 2
8893: PUSH
8894: LD_VAR 0 3
8898: PUSH
8899: LD_VAR 0 4
8903: PUSH
8904: LD_VAR 0 5
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: ST_TO_ADDR
// exit ;
8915: GO 9208
// end ; if not chassis in _chassis then
8917: LD_VAR 0 2
8921: PUSH
8922: LD_VAR 0 9
8926: IN
8927: NOT
8928: IFFALSE 8954
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
8930: LD_ADDR_VAR 0 2
8934: PUSH
8935: LD_VAR 0 9
8939: PUSH
8940: LD_INT 1
8942: PPUSH
8943: LD_VAR 0 9
8947: PPUSH
8948: CALL_OW 12
8952: ARRAY
8953: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
8954: LD_VAR 0 2
8958: PPUSH
8959: LD_VAR 0 3
8963: PPUSH
8964: CALL 9213 0 2
8968: NOT
8969: IFFALSE 9028
// repeat engine := _engine [ 1 ] ;
8971: LD_ADDR_VAR 0 3
8975: PUSH
8976: LD_VAR 0 11
8980: PUSH
8981: LD_INT 1
8983: ARRAY
8984: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
8985: LD_ADDR_VAR 0 11
8989: PUSH
8990: LD_VAR 0 11
8994: PPUSH
8995: LD_INT 1
8997: PPUSH
8998: CALL_OW 3
9002: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
9003: LD_VAR 0 2
9007: PPUSH
9008: LD_VAR 0 3
9012: PPUSH
9013: CALL 9213 0 2
9017: PUSH
9018: LD_VAR 0 11
9022: PUSH
9023: EMPTY
9024: EQUAL
9025: OR
9026: IFFALSE 8971
// if not control in _control then
9028: LD_VAR 0 4
9032: PUSH
9033: LD_VAR 0 12
9037: IN
9038: NOT
9039: IFFALSE 9065
// control := _control [ rand ( 1 , _control ) ] ;
9041: LD_ADDR_VAR 0 4
9045: PUSH
9046: LD_VAR 0 12
9050: PUSH
9051: LD_INT 1
9053: PPUSH
9054: LD_VAR 0 12
9058: PPUSH
9059: CALL_OW 12
9063: ARRAY
9064: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
9065: LD_VAR 0 2
9069: PPUSH
9070: LD_VAR 0 5
9074: PPUSH
9075: CALL 9433 0 2
9079: NOT
9080: IFFALSE 9139
// repeat weapon := _weapon [ 1 ] ;
9082: LD_ADDR_VAR 0 5
9086: PUSH
9087: LD_VAR 0 10
9091: PUSH
9092: LD_INT 1
9094: ARRAY
9095: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
9096: LD_ADDR_VAR 0 10
9100: PUSH
9101: LD_VAR 0 10
9105: PPUSH
9106: LD_INT 1
9108: PPUSH
9109: CALL_OW 3
9113: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
9114: LD_VAR 0 2
9118: PPUSH
9119: LD_VAR 0 5
9123: PPUSH
9124: CALL 9433 0 2
9128: PUSH
9129: LD_VAR 0 10
9133: PUSH
9134: EMPTY
9135: EQUAL
9136: OR
9137: IFFALSE 9082
// result := [ ] ;
9139: LD_ADDR_VAR 0 6
9143: PUSH
9144: EMPTY
9145: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
9146: LD_VAR 0 1
9150: PPUSH
9151: LD_VAR 0 2
9155: PPUSH
9156: LD_VAR 0 3
9160: PPUSH
9161: LD_VAR 0 4
9165: PPUSH
9166: LD_VAR 0 5
9170: PPUSH
9171: CALL_OW 448
9175: IFFALSE 9208
// result := [ chassis , engine , control , weapon ] ;
9177: LD_ADDR_VAR 0 6
9181: PUSH
9182: LD_VAR 0 2
9186: PUSH
9187: LD_VAR 0 3
9191: PUSH
9192: LD_VAR 0 4
9196: PUSH
9197: LD_VAR 0 5
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: ST_TO_ADDR
// end ;
9208: LD_VAR 0 6
9212: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
9213: LD_INT 0
9215: PPUSH
// if not chassis or not engine then
9216: LD_VAR 0 1
9220: NOT
9221: PUSH
9222: LD_VAR 0 2
9226: NOT
9227: OR
9228: IFFALSE 9232
// exit ;
9230: GO 9428
// case engine of engine_solar :
9232: LD_VAR 0 2
9236: PUSH
9237: LD_INT 2
9239: DOUBLE
9240: EQUAL
9241: IFTRUE 9245
9243: GO 9283
9245: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
9246: LD_ADDR_VAR 0 3
9250: PUSH
9251: LD_INT 11
9253: PUSH
9254: LD_INT 12
9256: PUSH
9257: LD_INT 13
9259: PUSH
9260: LD_INT 14
9262: PUSH
9263: LD_INT 1
9265: PUSH
9266: LD_INT 2
9268: PUSH
9269: LD_INT 3
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: ST_TO_ADDR
9281: GO 9412
9283: LD_INT 1
9285: DOUBLE
9286: EQUAL
9287: IFTRUE 9291
9289: GO 9353
9291: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
9292: LD_ADDR_VAR 0 3
9296: PUSH
9297: LD_INT 11
9299: PUSH
9300: LD_INT 12
9302: PUSH
9303: LD_INT 13
9305: PUSH
9306: LD_INT 14
9308: PUSH
9309: LD_INT 1
9311: PUSH
9312: LD_INT 2
9314: PUSH
9315: LD_INT 3
9317: PUSH
9318: LD_INT 4
9320: PUSH
9321: LD_INT 5
9323: PUSH
9324: LD_INT 21
9326: PUSH
9327: LD_INT 23
9329: PUSH
9330: LD_INT 22
9332: PUSH
9333: LD_INT 24
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: ST_TO_ADDR
9351: GO 9412
9353: LD_INT 3
9355: DOUBLE
9356: EQUAL
9357: IFTRUE 9361
9359: GO 9411
9361: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
9362: LD_ADDR_VAR 0 3
9366: PUSH
9367: LD_INT 13
9369: PUSH
9370: LD_INT 14
9372: PUSH
9373: LD_INT 2
9375: PUSH
9376: LD_INT 3
9378: PUSH
9379: LD_INT 4
9381: PUSH
9382: LD_INT 5
9384: PUSH
9385: LD_INT 21
9387: PUSH
9388: LD_INT 22
9390: PUSH
9391: LD_INT 23
9393: PUSH
9394: LD_INT 24
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: ST_TO_ADDR
9409: GO 9412
9411: POP
// result := ( chassis in result ) ;
9412: LD_ADDR_VAR 0 3
9416: PUSH
9417: LD_VAR 0 1
9421: PUSH
9422: LD_VAR 0 3
9426: IN
9427: ST_TO_ADDR
// end ;
9428: LD_VAR 0 3
9432: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
9433: LD_INT 0
9435: PPUSH
// if not chassis or not weapon then
9436: LD_VAR 0 1
9440: NOT
9441: PUSH
9442: LD_VAR 0 2
9446: NOT
9447: OR
9448: IFFALSE 9452
// exit ;
9450: GO 10478
// case weapon of us_machine_gun :
9452: LD_VAR 0 2
9456: PUSH
9457: LD_INT 2
9459: DOUBLE
9460: EQUAL
9461: IFTRUE 9465
9463: GO 9495
9465: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
9466: LD_ADDR_VAR 0 3
9470: PUSH
9471: LD_INT 1
9473: PUSH
9474: LD_INT 2
9476: PUSH
9477: LD_INT 3
9479: PUSH
9480: LD_INT 4
9482: PUSH
9483: LD_INT 5
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: ST_TO_ADDR
9493: GO 10462
9495: LD_INT 3
9497: DOUBLE
9498: EQUAL
9499: IFTRUE 9503
9501: GO 9533
9503: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
9504: LD_ADDR_VAR 0 3
9508: PUSH
9509: LD_INT 1
9511: PUSH
9512: LD_INT 2
9514: PUSH
9515: LD_INT 3
9517: PUSH
9518: LD_INT 4
9520: PUSH
9521: LD_INT 5
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: ST_TO_ADDR
9531: GO 10462
9533: LD_INT 11
9535: DOUBLE
9536: EQUAL
9537: IFTRUE 9541
9539: GO 9571
9541: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
9542: LD_ADDR_VAR 0 3
9546: PUSH
9547: LD_INT 1
9549: PUSH
9550: LD_INT 2
9552: PUSH
9553: LD_INT 3
9555: PUSH
9556: LD_INT 4
9558: PUSH
9559: LD_INT 5
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: ST_TO_ADDR
9569: GO 10462
9571: LD_INT 4
9573: DOUBLE
9574: EQUAL
9575: IFTRUE 9579
9577: GO 9605
9579: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
9580: LD_ADDR_VAR 0 3
9584: PUSH
9585: LD_INT 2
9587: PUSH
9588: LD_INT 3
9590: PUSH
9591: LD_INT 4
9593: PUSH
9594: LD_INT 5
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: ST_TO_ADDR
9603: GO 10462
9605: LD_INT 5
9607: DOUBLE
9608: EQUAL
9609: IFTRUE 9613
9611: GO 9639
9613: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
9614: LD_ADDR_VAR 0 3
9618: PUSH
9619: LD_INT 2
9621: PUSH
9622: LD_INT 3
9624: PUSH
9625: LD_INT 4
9627: PUSH
9628: LD_INT 5
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: ST_TO_ADDR
9637: GO 10462
9639: LD_INT 9
9641: DOUBLE
9642: EQUAL
9643: IFTRUE 9647
9645: GO 9673
9647: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
9648: LD_ADDR_VAR 0 3
9652: PUSH
9653: LD_INT 2
9655: PUSH
9656: LD_INT 3
9658: PUSH
9659: LD_INT 4
9661: PUSH
9662: LD_INT 5
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: ST_TO_ADDR
9671: GO 10462
9673: LD_INT 7
9675: DOUBLE
9676: EQUAL
9677: IFTRUE 9681
9679: GO 9707
9681: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
9682: LD_ADDR_VAR 0 3
9686: PUSH
9687: LD_INT 2
9689: PUSH
9690: LD_INT 3
9692: PUSH
9693: LD_INT 4
9695: PUSH
9696: LD_INT 5
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: ST_TO_ADDR
9705: GO 10462
9707: LD_INT 12
9709: DOUBLE
9710: EQUAL
9711: IFTRUE 9715
9713: GO 9741
9715: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
9716: LD_ADDR_VAR 0 3
9720: PUSH
9721: LD_INT 2
9723: PUSH
9724: LD_INT 3
9726: PUSH
9727: LD_INT 4
9729: PUSH
9730: LD_INT 5
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: ST_TO_ADDR
9739: GO 10462
9741: LD_INT 13
9743: DOUBLE
9744: EQUAL
9745: IFTRUE 9749
9747: GO 9775
9749: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
9750: LD_ADDR_VAR 0 3
9754: PUSH
9755: LD_INT 2
9757: PUSH
9758: LD_INT 3
9760: PUSH
9761: LD_INT 4
9763: PUSH
9764: LD_INT 5
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: ST_TO_ADDR
9773: GO 10462
9775: LD_INT 14
9777: DOUBLE
9778: EQUAL
9779: IFTRUE 9783
9781: GO 9801
9783: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
9784: LD_ADDR_VAR 0 3
9788: PUSH
9789: LD_INT 4
9791: PUSH
9792: LD_INT 5
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: ST_TO_ADDR
9799: GO 10462
9801: LD_INT 6
9803: DOUBLE
9804: EQUAL
9805: IFTRUE 9809
9807: GO 9827
9809: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
9810: LD_ADDR_VAR 0 3
9814: PUSH
9815: LD_INT 4
9817: PUSH
9818: LD_INT 5
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: ST_TO_ADDR
9825: GO 10462
9827: LD_INT 10
9829: DOUBLE
9830: EQUAL
9831: IFTRUE 9835
9833: GO 9853
9835: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
9836: LD_ADDR_VAR 0 3
9840: PUSH
9841: LD_INT 4
9843: PUSH
9844: LD_INT 5
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: ST_TO_ADDR
9851: GO 10462
9853: LD_INT 22
9855: DOUBLE
9856: EQUAL
9857: IFTRUE 9861
9859: GO 9887
9861: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
9862: LD_ADDR_VAR 0 3
9866: PUSH
9867: LD_INT 11
9869: PUSH
9870: LD_INT 12
9872: PUSH
9873: LD_INT 13
9875: PUSH
9876: LD_INT 14
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: ST_TO_ADDR
9885: GO 10462
9887: LD_INT 23
9889: DOUBLE
9890: EQUAL
9891: IFTRUE 9895
9893: GO 9921
9895: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
9896: LD_ADDR_VAR 0 3
9900: PUSH
9901: LD_INT 11
9903: PUSH
9904: LD_INT 12
9906: PUSH
9907: LD_INT 13
9909: PUSH
9910: LD_INT 14
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: ST_TO_ADDR
9919: GO 10462
9921: LD_INT 24
9923: DOUBLE
9924: EQUAL
9925: IFTRUE 9929
9927: GO 9955
9929: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
9930: LD_ADDR_VAR 0 3
9934: PUSH
9935: LD_INT 11
9937: PUSH
9938: LD_INT 12
9940: PUSH
9941: LD_INT 13
9943: PUSH
9944: LD_INT 14
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: ST_TO_ADDR
9953: GO 10462
9955: LD_INT 30
9957: DOUBLE
9958: EQUAL
9959: IFTRUE 9963
9961: GO 9989
9963: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
9964: LD_ADDR_VAR 0 3
9968: PUSH
9969: LD_INT 11
9971: PUSH
9972: LD_INT 12
9974: PUSH
9975: LD_INT 13
9977: PUSH
9978: LD_INT 14
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: ST_TO_ADDR
9987: GO 10462
9989: LD_INT 25
9991: DOUBLE
9992: EQUAL
9993: IFTRUE 9997
9995: GO 10015
9997: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
9998: LD_ADDR_VAR 0 3
10002: PUSH
10003: LD_INT 13
10005: PUSH
10006: LD_INT 14
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: ST_TO_ADDR
10013: GO 10462
10015: LD_INT 27
10017: DOUBLE
10018: EQUAL
10019: IFTRUE 10023
10021: GO 10041
10023: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
10024: LD_ADDR_VAR 0 3
10028: PUSH
10029: LD_INT 13
10031: PUSH
10032: LD_INT 14
10034: PUSH
10035: EMPTY
10036: LIST
10037: LIST
10038: ST_TO_ADDR
10039: GO 10462
10041: LD_INT 28
10043: DOUBLE
10044: EQUAL
10045: IFTRUE 10049
10047: GO 10067
10049: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
10050: LD_ADDR_VAR 0 3
10054: PUSH
10055: LD_INT 13
10057: PUSH
10058: LD_INT 14
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: ST_TO_ADDR
10065: GO 10462
10067: LD_INT 29
10069: DOUBLE
10070: EQUAL
10071: IFTRUE 10075
10073: GO 10093
10075: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
10076: LD_ADDR_VAR 0 3
10080: PUSH
10081: LD_INT 13
10083: PUSH
10084: LD_INT 14
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: ST_TO_ADDR
10091: GO 10462
10093: LD_INT 31
10095: DOUBLE
10096: EQUAL
10097: IFTRUE 10101
10099: GO 10119
10101: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
10102: LD_ADDR_VAR 0 3
10106: PUSH
10107: LD_INT 13
10109: PUSH
10110: LD_INT 14
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: ST_TO_ADDR
10117: GO 10462
10119: LD_INT 26
10121: DOUBLE
10122: EQUAL
10123: IFTRUE 10127
10125: GO 10145
10127: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
10128: LD_ADDR_VAR 0 3
10132: PUSH
10133: LD_INT 13
10135: PUSH
10136: LD_INT 14
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: ST_TO_ADDR
10143: GO 10462
10145: LD_INT 42
10147: DOUBLE
10148: EQUAL
10149: IFTRUE 10153
10151: GO 10179
10153: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
10154: LD_ADDR_VAR 0 3
10158: PUSH
10159: LD_INT 21
10161: PUSH
10162: LD_INT 22
10164: PUSH
10165: LD_INT 23
10167: PUSH
10168: LD_INT 24
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: ST_TO_ADDR
10177: GO 10462
10179: LD_INT 43
10181: DOUBLE
10182: EQUAL
10183: IFTRUE 10187
10185: GO 10213
10187: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
10188: LD_ADDR_VAR 0 3
10192: PUSH
10193: LD_INT 21
10195: PUSH
10196: LD_INT 22
10198: PUSH
10199: LD_INT 23
10201: PUSH
10202: LD_INT 24
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: ST_TO_ADDR
10211: GO 10462
10213: LD_INT 44
10215: DOUBLE
10216: EQUAL
10217: IFTRUE 10221
10219: GO 10247
10221: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
10222: LD_ADDR_VAR 0 3
10226: PUSH
10227: LD_INT 21
10229: PUSH
10230: LD_INT 22
10232: PUSH
10233: LD_INT 23
10235: PUSH
10236: LD_INT 24
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: ST_TO_ADDR
10245: GO 10462
10247: LD_INT 45
10249: DOUBLE
10250: EQUAL
10251: IFTRUE 10255
10253: GO 10281
10255: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
10256: LD_ADDR_VAR 0 3
10260: PUSH
10261: LD_INT 21
10263: PUSH
10264: LD_INT 22
10266: PUSH
10267: LD_INT 23
10269: PUSH
10270: LD_INT 24
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: ST_TO_ADDR
10279: GO 10462
10281: LD_INT 49
10283: DOUBLE
10284: EQUAL
10285: IFTRUE 10289
10287: GO 10315
10289: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
10290: LD_ADDR_VAR 0 3
10294: PUSH
10295: LD_INT 21
10297: PUSH
10298: LD_INT 22
10300: PUSH
10301: LD_INT 23
10303: PUSH
10304: LD_INT 24
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: ST_TO_ADDR
10313: GO 10462
10315: LD_INT 51
10317: DOUBLE
10318: EQUAL
10319: IFTRUE 10323
10321: GO 10349
10323: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
10324: LD_ADDR_VAR 0 3
10328: PUSH
10329: LD_INT 21
10331: PUSH
10332: LD_INT 22
10334: PUSH
10335: LD_INT 23
10337: PUSH
10338: LD_INT 24
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: ST_TO_ADDR
10347: GO 10462
10349: LD_INT 52
10351: DOUBLE
10352: EQUAL
10353: IFTRUE 10357
10355: GO 10383
10357: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
10358: LD_ADDR_VAR 0 3
10362: PUSH
10363: LD_INT 21
10365: PUSH
10366: LD_INT 22
10368: PUSH
10369: LD_INT 23
10371: PUSH
10372: LD_INT 24
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: ST_TO_ADDR
10381: GO 10462
10383: LD_INT 53
10385: DOUBLE
10386: EQUAL
10387: IFTRUE 10391
10389: GO 10409
10391: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
10392: LD_ADDR_VAR 0 3
10396: PUSH
10397: LD_INT 23
10399: PUSH
10400: LD_INT 24
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: ST_TO_ADDR
10407: GO 10462
10409: LD_INT 46
10411: DOUBLE
10412: EQUAL
10413: IFTRUE 10417
10415: GO 10435
10417: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
10418: LD_ADDR_VAR 0 3
10422: PUSH
10423: LD_INT 23
10425: PUSH
10426: LD_INT 24
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: ST_TO_ADDR
10433: GO 10462
10435: LD_INT 47
10437: DOUBLE
10438: EQUAL
10439: IFTRUE 10443
10441: GO 10461
10443: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
10444: LD_ADDR_VAR 0 3
10448: PUSH
10449: LD_INT 23
10451: PUSH
10452: LD_INT 24
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: ST_TO_ADDR
10459: GO 10462
10461: POP
// result := ( chassis in result ) ;
10462: LD_ADDR_VAR 0 3
10466: PUSH
10467: LD_VAR 0 1
10471: PUSH
10472: LD_VAR 0 3
10476: IN
10477: ST_TO_ADDR
// end ;
10478: LD_VAR 0 3
10482: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
10483: LD_INT 0
10485: PPUSH
10486: PPUSH
10487: PPUSH
10488: PPUSH
10489: PPUSH
10490: PPUSH
10491: PPUSH
// result := array ;
10492: LD_ADDR_VAR 0 5
10496: PUSH
10497: LD_VAR 0 1
10501: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
10502: LD_VAR 0 1
10506: NOT
10507: PUSH
10508: LD_VAR 0 2
10512: NOT
10513: OR
10514: PUSH
10515: LD_VAR 0 3
10519: NOT
10520: OR
10521: PUSH
10522: LD_VAR 0 2
10526: PUSH
10527: LD_VAR 0 1
10531: GREATER
10532: OR
10533: PUSH
10534: LD_VAR 0 3
10538: PUSH
10539: LD_VAR 0 1
10543: GREATER
10544: OR
10545: IFFALSE 10549
// exit ;
10547: GO 10845
// if direction then
10549: LD_VAR 0 4
10553: IFFALSE 10617
// begin d := 1 ;
10555: LD_ADDR_VAR 0 9
10559: PUSH
10560: LD_INT 1
10562: ST_TO_ADDR
// if i_from > i_to then
10563: LD_VAR 0 2
10567: PUSH
10568: LD_VAR 0 3
10572: GREATER
10573: IFFALSE 10599
// length := ( array - i_from ) + i_to else
10575: LD_ADDR_VAR 0 11
10579: PUSH
10580: LD_VAR 0 1
10584: PUSH
10585: LD_VAR 0 2
10589: MINUS
10590: PUSH
10591: LD_VAR 0 3
10595: PLUS
10596: ST_TO_ADDR
10597: GO 10615
// length := i_to - i_from ;
10599: LD_ADDR_VAR 0 11
10603: PUSH
10604: LD_VAR 0 3
10608: PUSH
10609: LD_VAR 0 2
10613: MINUS
10614: ST_TO_ADDR
// end else
10615: GO 10678
// begin d := - 1 ;
10617: LD_ADDR_VAR 0 9
10621: PUSH
10622: LD_INT 1
10624: NEG
10625: ST_TO_ADDR
// if i_from > i_to then
10626: LD_VAR 0 2
10630: PUSH
10631: LD_VAR 0 3
10635: GREATER
10636: IFFALSE 10656
// length := i_from - i_to else
10638: LD_ADDR_VAR 0 11
10642: PUSH
10643: LD_VAR 0 2
10647: PUSH
10648: LD_VAR 0 3
10652: MINUS
10653: ST_TO_ADDR
10654: GO 10678
// length := ( array - i_to ) + i_from ;
10656: LD_ADDR_VAR 0 11
10660: PUSH
10661: LD_VAR 0 1
10665: PUSH
10666: LD_VAR 0 3
10670: MINUS
10671: PUSH
10672: LD_VAR 0 2
10676: PLUS
10677: ST_TO_ADDR
// end ; if not length then
10678: LD_VAR 0 11
10682: NOT
10683: IFFALSE 10687
// exit ;
10685: GO 10845
// tmp := array ;
10687: LD_ADDR_VAR 0 10
10691: PUSH
10692: LD_VAR 0 1
10696: ST_TO_ADDR
// for i = 1 to length do
10697: LD_ADDR_VAR 0 6
10701: PUSH
10702: DOUBLE
10703: LD_INT 1
10705: DEC
10706: ST_TO_ADDR
10707: LD_VAR 0 11
10711: PUSH
10712: FOR_TO
10713: IFFALSE 10833
// begin for j = 1 to array do
10715: LD_ADDR_VAR 0 7
10719: PUSH
10720: DOUBLE
10721: LD_INT 1
10723: DEC
10724: ST_TO_ADDR
10725: LD_VAR 0 1
10729: PUSH
10730: FOR_TO
10731: IFFALSE 10819
// begin k := j + d ;
10733: LD_ADDR_VAR 0 8
10737: PUSH
10738: LD_VAR 0 7
10742: PUSH
10743: LD_VAR 0 9
10747: PLUS
10748: ST_TO_ADDR
// if k > array then
10749: LD_VAR 0 8
10753: PUSH
10754: LD_VAR 0 1
10758: GREATER
10759: IFFALSE 10769
// k := 1 ;
10761: LD_ADDR_VAR 0 8
10765: PUSH
10766: LD_INT 1
10768: ST_TO_ADDR
// if not k then
10769: LD_VAR 0 8
10773: NOT
10774: IFFALSE 10786
// k := array ;
10776: LD_ADDR_VAR 0 8
10780: PUSH
10781: LD_VAR 0 1
10785: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
10786: LD_ADDR_VAR 0 10
10790: PUSH
10791: LD_VAR 0 10
10795: PPUSH
10796: LD_VAR 0 8
10800: PPUSH
10801: LD_VAR 0 1
10805: PUSH
10806: LD_VAR 0 7
10810: ARRAY
10811: PPUSH
10812: CALL_OW 1
10816: ST_TO_ADDR
// end ;
10817: GO 10730
10819: POP
10820: POP
// array := tmp ;
10821: LD_ADDR_VAR 0 1
10825: PUSH
10826: LD_VAR 0 10
10830: ST_TO_ADDR
// end ;
10831: GO 10712
10833: POP
10834: POP
// result := array ;
10835: LD_ADDR_VAR 0 5
10839: PUSH
10840: LD_VAR 0 1
10844: ST_TO_ADDR
// end ;
10845: LD_VAR 0 5
10849: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
10850: LD_INT 0
10852: PPUSH
10853: PPUSH
// result := 0 ;
10854: LD_ADDR_VAR 0 3
10858: PUSH
10859: LD_INT 0
10861: ST_TO_ADDR
// if not array or not value in array then
10862: LD_VAR 0 1
10866: NOT
10867: PUSH
10868: LD_VAR 0 2
10872: PUSH
10873: LD_VAR 0 1
10877: IN
10878: NOT
10879: OR
10880: IFFALSE 10884
// exit ;
10882: GO 10938
// for i = 1 to array do
10884: LD_ADDR_VAR 0 4
10888: PUSH
10889: DOUBLE
10890: LD_INT 1
10892: DEC
10893: ST_TO_ADDR
10894: LD_VAR 0 1
10898: PUSH
10899: FOR_TO
10900: IFFALSE 10936
// if value = array [ i ] then
10902: LD_VAR 0 2
10906: PUSH
10907: LD_VAR 0 1
10911: PUSH
10912: LD_VAR 0 4
10916: ARRAY
10917: EQUAL
10918: IFFALSE 10934
// begin result := i ;
10920: LD_ADDR_VAR 0 3
10924: PUSH
10925: LD_VAR 0 4
10929: ST_TO_ADDR
// exit ;
10930: POP
10931: POP
10932: GO 10938
// end ;
10934: GO 10899
10936: POP
10937: POP
// end ;
10938: LD_VAR 0 3
10942: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
10943: LD_INT 0
10945: PPUSH
// vc_chassis := chassis ;
10946: LD_ADDR_OWVAR 37
10950: PUSH
10951: LD_VAR 0 1
10955: ST_TO_ADDR
// vc_engine := engine ;
10956: LD_ADDR_OWVAR 39
10960: PUSH
10961: LD_VAR 0 2
10965: ST_TO_ADDR
// vc_control := control ;
10966: LD_ADDR_OWVAR 38
10970: PUSH
10971: LD_VAR 0 3
10975: ST_TO_ADDR
// vc_weapon := weapon ;
10976: LD_ADDR_OWVAR 40
10980: PUSH
10981: LD_VAR 0 4
10985: ST_TO_ADDR
// vc_fuel_battery := fuel ;
10986: LD_ADDR_OWVAR 41
10990: PUSH
10991: LD_VAR 0 5
10995: ST_TO_ADDR
// end ;
10996: LD_VAR 0 6
11000: RET
// export function WantPlant ( unit ) ; var task ; begin
11001: LD_INT 0
11003: PPUSH
11004: PPUSH
// result := false ;
11005: LD_ADDR_VAR 0 2
11009: PUSH
11010: LD_INT 0
11012: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
11013: LD_ADDR_VAR 0 3
11017: PUSH
11018: LD_VAR 0 1
11022: PPUSH
11023: CALL_OW 437
11027: ST_TO_ADDR
// if task then
11028: LD_VAR 0 3
11032: IFFALSE 11060
// if task [ 1 ] [ 1 ] = p then
11034: LD_VAR 0 3
11038: PUSH
11039: LD_INT 1
11041: ARRAY
11042: PUSH
11043: LD_INT 1
11045: ARRAY
11046: PUSH
11047: LD_STRING p
11049: EQUAL
11050: IFFALSE 11060
// result := true ;
11052: LD_ADDR_VAR 0 2
11056: PUSH
11057: LD_INT 1
11059: ST_TO_ADDR
// end ;
11060: LD_VAR 0 2
11064: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
11065: LD_INT 0
11067: PPUSH
11068: PPUSH
11069: PPUSH
11070: PPUSH
// if pos < 1 then
11071: LD_VAR 0 2
11075: PUSH
11076: LD_INT 1
11078: LESS
11079: IFFALSE 11083
// exit ;
11081: GO 11386
// if pos = 1 then
11083: LD_VAR 0 2
11087: PUSH
11088: LD_INT 1
11090: EQUAL
11091: IFFALSE 11124
// result := Replace ( arr , pos [ 1 ] , value ) else
11093: LD_ADDR_VAR 0 4
11097: PUSH
11098: LD_VAR 0 1
11102: PPUSH
11103: LD_VAR 0 2
11107: PUSH
11108: LD_INT 1
11110: ARRAY
11111: PPUSH
11112: LD_VAR 0 3
11116: PPUSH
11117: CALL_OW 1
11121: ST_TO_ADDR
11122: GO 11386
// begin tmp := arr ;
11124: LD_ADDR_VAR 0 6
11128: PUSH
11129: LD_VAR 0 1
11133: ST_TO_ADDR
// s_arr := [ tmp ] ;
11134: LD_ADDR_VAR 0 7
11138: PUSH
11139: LD_VAR 0 6
11143: PUSH
11144: EMPTY
11145: LIST
11146: ST_TO_ADDR
// for i = 1 to pos - 1 do
11147: LD_ADDR_VAR 0 5
11151: PUSH
11152: DOUBLE
11153: LD_INT 1
11155: DEC
11156: ST_TO_ADDR
11157: LD_VAR 0 2
11161: PUSH
11162: LD_INT 1
11164: MINUS
11165: PUSH
11166: FOR_TO
11167: IFFALSE 11212
// begin tmp := tmp [ pos [ i ] ] ;
11169: LD_ADDR_VAR 0 6
11173: PUSH
11174: LD_VAR 0 6
11178: PUSH
11179: LD_VAR 0 2
11183: PUSH
11184: LD_VAR 0 5
11188: ARRAY
11189: ARRAY
11190: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
11191: LD_ADDR_VAR 0 7
11195: PUSH
11196: LD_VAR 0 7
11200: PUSH
11201: LD_VAR 0 6
11205: PUSH
11206: EMPTY
11207: LIST
11208: ADD
11209: ST_TO_ADDR
// end ;
11210: GO 11166
11212: POP
11213: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
11214: LD_ADDR_VAR 0 6
11218: PUSH
11219: LD_VAR 0 6
11223: PPUSH
11224: LD_VAR 0 2
11228: PUSH
11229: LD_VAR 0 2
11233: ARRAY
11234: PPUSH
11235: LD_VAR 0 3
11239: PPUSH
11240: CALL_OW 1
11244: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
11245: LD_ADDR_VAR 0 7
11249: PUSH
11250: LD_VAR 0 7
11254: PPUSH
11255: LD_VAR 0 7
11259: PPUSH
11260: LD_VAR 0 6
11264: PPUSH
11265: CALL_OW 1
11269: ST_TO_ADDR
// for i = s_arr downto 2 do
11270: LD_ADDR_VAR 0 5
11274: PUSH
11275: DOUBLE
11276: LD_VAR 0 7
11280: INC
11281: ST_TO_ADDR
11282: LD_INT 2
11284: PUSH
11285: FOR_DOWNTO
11286: IFFALSE 11370
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
11288: LD_ADDR_VAR 0 6
11292: PUSH
11293: LD_VAR 0 7
11297: PUSH
11298: LD_VAR 0 5
11302: PUSH
11303: LD_INT 1
11305: MINUS
11306: ARRAY
11307: PPUSH
11308: LD_VAR 0 2
11312: PUSH
11313: LD_VAR 0 5
11317: PUSH
11318: LD_INT 1
11320: MINUS
11321: ARRAY
11322: PPUSH
11323: LD_VAR 0 7
11327: PUSH
11328: LD_VAR 0 5
11332: ARRAY
11333: PPUSH
11334: CALL_OW 1
11338: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
11339: LD_ADDR_VAR 0 7
11343: PUSH
11344: LD_VAR 0 7
11348: PPUSH
11349: LD_VAR 0 5
11353: PUSH
11354: LD_INT 1
11356: MINUS
11357: PPUSH
11358: LD_VAR 0 6
11362: PPUSH
11363: CALL_OW 1
11367: ST_TO_ADDR
// end ;
11368: GO 11285
11370: POP
11371: POP
// result := s_arr [ 1 ] ;
11372: LD_ADDR_VAR 0 4
11376: PUSH
11377: LD_VAR 0 7
11381: PUSH
11382: LD_INT 1
11384: ARRAY
11385: ST_TO_ADDR
// end ; end ;
11386: LD_VAR 0 4
11390: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
11391: LD_INT 0
11393: PPUSH
11394: PPUSH
// if not list then
11395: LD_VAR 0 1
11399: NOT
11400: IFFALSE 11404
// exit ;
11402: GO 11495
// i := list [ pos1 ] ;
11404: LD_ADDR_VAR 0 5
11408: PUSH
11409: LD_VAR 0 1
11413: PUSH
11414: LD_VAR 0 2
11418: ARRAY
11419: ST_TO_ADDR
// if not i then
11420: LD_VAR 0 5
11424: NOT
11425: IFFALSE 11429
// exit ;
11427: GO 11495
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
11429: LD_ADDR_VAR 0 1
11433: PUSH
11434: LD_VAR 0 1
11438: PPUSH
11439: LD_VAR 0 2
11443: PPUSH
11444: LD_VAR 0 1
11448: PUSH
11449: LD_VAR 0 3
11453: ARRAY
11454: PPUSH
11455: CALL_OW 1
11459: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
11460: LD_ADDR_VAR 0 1
11464: PUSH
11465: LD_VAR 0 1
11469: PPUSH
11470: LD_VAR 0 3
11474: PPUSH
11475: LD_VAR 0 5
11479: PPUSH
11480: CALL_OW 1
11484: ST_TO_ADDR
// result := list ;
11485: LD_ADDR_VAR 0 4
11489: PUSH
11490: LD_VAR 0 1
11494: ST_TO_ADDR
// end ;
11495: LD_VAR 0 4
11499: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
11500: LD_INT 0
11502: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
11503: LD_ADDR_VAR 0 5
11507: PUSH
11508: LD_VAR 0 1
11512: PPUSH
11513: CALL_OW 250
11517: PPUSH
11518: LD_VAR 0 1
11522: PPUSH
11523: CALL_OW 251
11527: PPUSH
11528: LD_VAR 0 2
11532: PPUSH
11533: LD_VAR 0 3
11537: PPUSH
11538: LD_VAR 0 4
11542: PPUSH
11543: CALL 11553 0 5
11547: ST_TO_ADDR
// end ;
11548: LD_VAR 0 5
11552: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
11553: LD_INT 0
11555: PPUSH
11556: PPUSH
11557: PPUSH
11558: PPUSH
// if not list then
11559: LD_VAR 0 3
11563: NOT
11564: IFFALSE 11568
// exit ;
11566: GO 11956
// result := [ ] ;
11568: LD_ADDR_VAR 0 6
11572: PUSH
11573: EMPTY
11574: ST_TO_ADDR
// for i in list do
11575: LD_ADDR_VAR 0 7
11579: PUSH
11580: LD_VAR 0 3
11584: PUSH
11585: FOR_IN
11586: IFFALSE 11788
// begin tmp := GetDistUnitXY ( i , x , y ) ;
11588: LD_ADDR_VAR 0 9
11592: PUSH
11593: LD_VAR 0 7
11597: PPUSH
11598: LD_VAR 0 1
11602: PPUSH
11603: LD_VAR 0 2
11607: PPUSH
11608: CALL_OW 297
11612: ST_TO_ADDR
// if not result then
11613: LD_VAR 0 6
11617: NOT
11618: IFFALSE 11644
// result := [ [ i , tmp ] ] else
11620: LD_ADDR_VAR 0 6
11624: PUSH
11625: LD_VAR 0 7
11629: PUSH
11630: LD_VAR 0 9
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: EMPTY
11640: LIST
11641: ST_TO_ADDR
11642: GO 11786
// begin if result [ result ] [ 2 ] < tmp then
11644: LD_VAR 0 6
11648: PUSH
11649: LD_VAR 0 6
11653: ARRAY
11654: PUSH
11655: LD_INT 2
11657: ARRAY
11658: PUSH
11659: LD_VAR 0 9
11663: LESS
11664: IFFALSE 11706
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
11666: LD_ADDR_VAR 0 6
11670: PUSH
11671: LD_VAR 0 6
11675: PPUSH
11676: LD_VAR 0 6
11680: PUSH
11681: LD_INT 1
11683: PLUS
11684: PPUSH
11685: LD_VAR 0 7
11689: PUSH
11690: LD_VAR 0 9
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: PPUSH
11699: CALL_OW 2
11703: ST_TO_ADDR
11704: GO 11786
// for j = 1 to result do
11706: LD_ADDR_VAR 0 8
11710: PUSH
11711: DOUBLE
11712: LD_INT 1
11714: DEC
11715: ST_TO_ADDR
11716: LD_VAR 0 6
11720: PUSH
11721: FOR_TO
11722: IFFALSE 11784
// begin if tmp < result [ j ] [ 2 ] then
11724: LD_VAR 0 9
11728: PUSH
11729: LD_VAR 0 6
11733: PUSH
11734: LD_VAR 0 8
11738: ARRAY
11739: PUSH
11740: LD_INT 2
11742: ARRAY
11743: LESS
11744: IFFALSE 11782
// begin result := Insert ( result , j , [ i , tmp ] ) ;
11746: LD_ADDR_VAR 0 6
11750: PUSH
11751: LD_VAR 0 6
11755: PPUSH
11756: LD_VAR 0 8
11760: PPUSH
11761: LD_VAR 0 7
11765: PUSH
11766: LD_VAR 0 9
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: PPUSH
11775: CALL_OW 2
11779: ST_TO_ADDR
// break ;
11780: GO 11784
// end ; end ;
11782: GO 11721
11784: POP
11785: POP
// end ; end ;
11786: GO 11585
11788: POP
11789: POP
// if result and not asc then
11790: LD_VAR 0 6
11794: PUSH
11795: LD_VAR 0 4
11799: NOT
11800: AND
11801: IFFALSE 11876
// begin tmp := result ;
11803: LD_ADDR_VAR 0 9
11807: PUSH
11808: LD_VAR 0 6
11812: ST_TO_ADDR
// for i = tmp downto 1 do
11813: LD_ADDR_VAR 0 7
11817: PUSH
11818: DOUBLE
11819: LD_VAR 0 9
11823: INC
11824: ST_TO_ADDR
11825: LD_INT 1
11827: PUSH
11828: FOR_DOWNTO
11829: IFFALSE 11874
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
11831: LD_ADDR_VAR 0 6
11835: PUSH
11836: LD_VAR 0 6
11840: PPUSH
11841: LD_VAR 0 9
11845: PUSH
11846: LD_VAR 0 7
11850: MINUS
11851: PUSH
11852: LD_INT 1
11854: PLUS
11855: PPUSH
11856: LD_VAR 0 9
11860: PUSH
11861: LD_VAR 0 7
11865: ARRAY
11866: PPUSH
11867: CALL_OW 1
11871: ST_TO_ADDR
11872: GO 11828
11874: POP
11875: POP
// end ; tmp := [ ] ;
11876: LD_ADDR_VAR 0 9
11880: PUSH
11881: EMPTY
11882: ST_TO_ADDR
// if mode then
11883: LD_VAR 0 5
11887: IFFALSE 11956
// begin for i = 1 to result do
11889: LD_ADDR_VAR 0 7
11893: PUSH
11894: DOUBLE
11895: LD_INT 1
11897: DEC
11898: ST_TO_ADDR
11899: LD_VAR 0 6
11903: PUSH
11904: FOR_TO
11905: IFFALSE 11944
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
11907: LD_ADDR_VAR 0 9
11911: PUSH
11912: LD_VAR 0 9
11916: PPUSH
11917: LD_VAR 0 7
11921: PPUSH
11922: LD_VAR 0 6
11926: PUSH
11927: LD_VAR 0 7
11931: ARRAY
11932: PUSH
11933: LD_INT 1
11935: ARRAY
11936: PPUSH
11937: CALL_OW 1
11941: ST_TO_ADDR
11942: GO 11904
11944: POP
11945: POP
// result := tmp ;
11946: LD_ADDR_VAR 0 6
11950: PUSH
11951: LD_VAR 0 9
11955: ST_TO_ADDR
// end ; end ;
11956: LD_VAR 0 6
11960: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
11961: LD_INT 0
11963: PPUSH
11964: PPUSH
11965: PPUSH
11966: PPUSH
11967: PPUSH
11968: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
11969: LD_ADDR_VAR 0 5
11973: PUSH
11974: LD_INT 0
11976: PUSH
11977: LD_INT 0
11979: PUSH
11980: LD_INT 0
11982: PUSH
11983: EMPTY
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: ST_TO_ADDR
// if not x or not y then
11991: LD_VAR 0 2
11995: NOT
11996: PUSH
11997: LD_VAR 0 3
12001: NOT
12002: OR
12003: IFFALSE 12007
// exit ;
12005: GO 13653
// if not range then
12007: LD_VAR 0 4
12011: NOT
12012: IFFALSE 12022
// range := 10 ;
12014: LD_ADDR_VAR 0 4
12018: PUSH
12019: LD_INT 10
12021: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12022: LD_ADDR_VAR 0 8
12026: PUSH
12027: LD_INT 81
12029: PUSH
12030: LD_VAR 0 1
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PUSH
12039: LD_INT 92
12041: PUSH
12042: LD_VAR 0 2
12046: PUSH
12047: LD_VAR 0 3
12051: PUSH
12052: LD_VAR 0 4
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: PUSH
12063: LD_INT 3
12065: PUSH
12066: LD_INT 21
12068: PUSH
12069: LD_INT 3
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: LIST
12084: PPUSH
12085: CALL_OW 69
12089: ST_TO_ADDR
// if not tmp then
12090: LD_VAR 0 8
12094: NOT
12095: IFFALSE 12099
// exit ;
12097: GO 13653
// for i in tmp do
12099: LD_ADDR_VAR 0 6
12103: PUSH
12104: LD_VAR 0 8
12108: PUSH
12109: FOR_IN
12110: IFFALSE 13628
// begin points := [ 0 , 0 , 0 ] ;
12112: LD_ADDR_VAR 0 9
12116: PUSH
12117: LD_INT 0
12119: PUSH
12120: LD_INT 0
12122: PUSH
12123: LD_INT 0
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: LIST
12130: ST_TO_ADDR
// bpoints := 1 ;
12131: LD_ADDR_VAR 0 10
12135: PUSH
12136: LD_INT 1
12138: ST_TO_ADDR
// case GetType ( i ) of unit_human :
12139: LD_VAR 0 6
12143: PPUSH
12144: CALL_OW 247
12148: PUSH
12149: LD_INT 1
12151: DOUBLE
12152: EQUAL
12153: IFTRUE 12157
12155: GO 12735
12157: POP
// begin if GetClass ( i ) = 1 then
12158: LD_VAR 0 6
12162: PPUSH
12163: CALL_OW 257
12167: PUSH
12168: LD_INT 1
12170: EQUAL
12171: IFFALSE 12192
// points := [ 10 , 5 , 3 ] ;
12173: LD_ADDR_VAR 0 9
12177: PUSH
12178: LD_INT 10
12180: PUSH
12181: LD_INT 5
12183: PUSH
12184: LD_INT 3
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: LIST
12191: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
12192: LD_VAR 0 6
12196: PPUSH
12197: CALL_OW 257
12201: PUSH
12202: LD_INT 2
12204: PUSH
12205: LD_INT 3
12207: PUSH
12208: LD_INT 4
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: LIST
12215: IN
12216: IFFALSE 12237
// points := [ 3 , 2 , 1 ] ;
12218: LD_ADDR_VAR 0 9
12222: PUSH
12223: LD_INT 3
12225: PUSH
12226: LD_INT 2
12228: PUSH
12229: LD_INT 1
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: LIST
12236: ST_TO_ADDR
// if GetClass ( i ) = 5 then
12237: LD_VAR 0 6
12241: PPUSH
12242: CALL_OW 257
12246: PUSH
12247: LD_INT 5
12249: EQUAL
12250: IFFALSE 12271
// points := [ 130 , 5 , 2 ] ;
12252: LD_ADDR_VAR 0 9
12256: PUSH
12257: LD_INT 130
12259: PUSH
12260: LD_INT 5
12262: PUSH
12263: LD_INT 2
12265: PUSH
12266: EMPTY
12267: LIST
12268: LIST
12269: LIST
12270: ST_TO_ADDR
// if GetClass ( i ) = 8 then
12271: LD_VAR 0 6
12275: PPUSH
12276: CALL_OW 257
12280: PUSH
12281: LD_INT 8
12283: EQUAL
12284: IFFALSE 12305
// points := [ 35 , 35 , 30 ] ;
12286: LD_ADDR_VAR 0 9
12290: PUSH
12291: LD_INT 35
12293: PUSH
12294: LD_INT 35
12296: PUSH
12297: LD_INT 30
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: LIST
12304: ST_TO_ADDR
// if GetClass ( i ) = 9 then
12305: LD_VAR 0 6
12309: PPUSH
12310: CALL_OW 257
12314: PUSH
12315: LD_INT 9
12317: EQUAL
12318: IFFALSE 12339
// points := [ 20 , 55 , 40 ] ;
12320: LD_ADDR_VAR 0 9
12324: PUSH
12325: LD_INT 20
12327: PUSH
12328: LD_INT 55
12330: PUSH
12331: LD_INT 40
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: LIST
12338: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
12339: LD_VAR 0 6
12343: PPUSH
12344: CALL_OW 257
12348: PUSH
12349: LD_INT 12
12351: PUSH
12352: LD_INT 16
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: IN
12359: IFFALSE 12380
// points := [ 5 , 3 , 2 ] ;
12361: LD_ADDR_VAR 0 9
12365: PUSH
12366: LD_INT 5
12368: PUSH
12369: LD_INT 3
12371: PUSH
12372: LD_INT 2
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: LIST
12379: ST_TO_ADDR
// if GetClass ( i ) = 17 then
12380: LD_VAR 0 6
12384: PPUSH
12385: CALL_OW 257
12389: PUSH
12390: LD_INT 17
12392: EQUAL
12393: IFFALSE 12414
// points := [ 100 , 50 , 75 ] ;
12395: LD_ADDR_VAR 0 9
12399: PUSH
12400: LD_INT 100
12402: PUSH
12403: LD_INT 50
12405: PUSH
12406: LD_INT 75
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: LIST
12413: ST_TO_ADDR
// if GetClass ( i ) = 15 then
12414: LD_VAR 0 6
12418: PPUSH
12419: CALL_OW 257
12423: PUSH
12424: LD_INT 15
12426: EQUAL
12427: IFFALSE 12448
// points := [ 10 , 5 , 3 ] ;
12429: LD_ADDR_VAR 0 9
12433: PUSH
12434: LD_INT 10
12436: PUSH
12437: LD_INT 5
12439: PUSH
12440: LD_INT 3
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: ST_TO_ADDR
// if GetClass ( i ) = 14 then
12448: LD_VAR 0 6
12452: PPUSH
12453: CALL_OW 257
12457: PUSH
12458: LD_INT 14
12460: EQUAL
12461: IFFALSE 12482
// points := [ 10 , 0 , 0 ] ;
12463: LD_ADDR_VAR 0 9
12467: PUSH
12468: LD_INT 10
12470: PUSH
12471: LD_INT 0
12473: PUSH
12474: LD_INT 0
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: LIST
12481: ST_TO_ADDR
// if GetClass ( i ) = 11 then
12482: LD_VAR 0 6
12486: PPUSH
12487: CALL_OW 257
12491: PUSH
12492: LD_INT 11
12494: EQUAL
12495: IFFALSE 12516
// points := [ 30 , 10 , 5 ] ;
12497: LD_ADDR_VAR 0 9
12501: PUSH
12502: LD_INT 30
12504: PUSH
12505: LD_INT 10
12507: PUSH
12508: LD_INT 5
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: LIST
12515: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
12516: LD_VAR 0 1
12520: PPUSH
12521: LD_INT 5
12523: PPUSH
12524: CALL_OW 321
12528: PUSH
12529: LD_INT 2
12531: EQUAL
12532: IFFALSE 12549
// bpoints := bpoints * 1.8 ;
12534: LD_ADDR_VAR 0 10
12538: PUSH
12539: LD_VAR 0 10
12543: PUSH
12544: LD_REAL  1.80000000000000E+0000
12547: MUL
12548: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
12549: LD_VAR 0 6
12553: PPUSH
12554: CALL_OW 257
12558: PUSH
12559: LD_INT 1
12561: PUSH
12562: LD_INT 2
12564: PUSH
12565: LD_INT 3
12567: PUSH
12568: LD_INT 4
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: IN
12577: PUSH
12578: LD_VAR 0 1
12582: PPUSH
12583: LD_INT 51
12585: PPUSH
12586: CALL_OW 321
12590: PUSH
12591: LD_INT 2
12593: EQUAL
12594: AND
12595: IFFALSE 12612
// bpoints := bpoints * 1.2 ;
12597: LD_ADDR_VAR 0 10
12601: PUSH
12602: LD_VAR 0 10
12606: PUSH
12607: LD_REAL  1.20000000000000E+0000
12610: MUL
12611: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
12612: LD_VAR 0 6
12616: PPUSH
12617: CALL_OW 257
12621: PUSH
12622: LD_INT 5
12624: PUSH
12625: LD_INT 7
12627: PUSH
12628: LD_INT 9
12630: PUSH
12631: EMPTY
12632: LIST
12633: LIST
12634: LIST
12635: IN
12636: PUSH
12637: LD_VAR 0 1
12641: PPUSH
12642: LD_INT 52
12644: PPUSH
12645: CALL_OW 321
12649: PUSH
12650: LD_INT 2
12652: EQUAL
12653: AND
12654: IFFALSE 12671
// bpoints := bpoints * 1.5 ;
12656: LD_ADDR_VAR 0 10
12660: PUSH
12661: LD_VAR 0 10
12665: PUSH
12666: LD_REAL  1.50000000000000E+0000
12669: MUL
12670: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
12671: LD_VAR 0 1
12675: PPUSH
12676: LD_INT 66
12678: PPUSH
12679: CALL_OW 321
12683: PUSH
12684: LD_INT 2
12686: EQUAL
12687: IFFALSE 12704
// bpoints := bpoints * 1.1 ;
12689: LD_ADDR_VAR 0 10
12693: PUSH
12694: LD_VAR 0 10
12698: PUSH
12699: LD_REAL  1.10000000000000E+0000
12702: MUL
12703: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
12704: LD_ADDR_VAR 0 10
12708: PUSH
12709: LD_VAR 0 10
12713: PUSH
12714: LD_VAR 0 6
12718: PPUSH
12719: LD_INT 1
12721: PPUSH
12722: CALL_OW 259
12726: PUSH
12727: LD_REAL  1.15000000000000E+0000
12730: MUL
12731: MUL
12732: ST_TO_ADDR
// end ; unit_vehicle :
12733: GO 13557
12735: LD_INT 2
12737: DOUBLE
12738: EQUAL
12739: IFTRUE 12743
12741: GO 13545
12743: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
12744: LD_VAR 0 6
12748: PPUSH
12749: CALL_OW 264
12753: PUSH
12754: LD_INT 2
12756: PUSH
12757: LD_INT 42
12759: PUSH
12760: LD_INT 24
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: LIST
12767: IN
12768: IFFALSE 12789
// points := [ 25 , 5 , 3 ] ;
12770: LD_ADDR_VAR 0 9
12774: PUSH
12775: LD_INT 25
12777: PUSH
12778: LD_INT 5
12780: PUSH
12781: LD_INT 3
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: LIST
12788: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
12789: LD_VAR 0 6
12793: PPUSH
12794: CALL_OW 264
12798: PUSH
12799: LD_INT 4
12801: PUSH
12802: LD_INT 43
12804: PUSH
12805: LD_INT 25
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: LIST
12812: IN
12813: IFFALSE 12834
// points := [ 40 , 15 , 5 ] ;
12815: LD_ADDR_VAR 0 9
12819: PUSH
12820: LD_INT 40
12822: PUSH
12823: LD_INT 15
12825: PUSH
12826: LD_INT 5
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: LIST
12833: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
12834: LD_VAR 0 6
12838: PPUSH
12839: CALL_OW 264
12843: PUSH
12844: LD_INT 3
12846: PUSH
12847: LD_INT 23
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: IN
12854: IFFALSE 12875
// points := [ 7 , 25 , 8 ] ;
12856: LD_ADDR_VAR 0 9
12860: PUSH
12861: LD_INT 7
12863: PUSH
12864: LD_INT 25
12866: PUSH
12867: LD_INT 8
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: LIST
12874: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
12875: LD_VAR 0 6
12879: PPUSH
12880: CALL_OW 264
12884: PUSH
12885: LD_INT 5
12887: PUSH
12888: LD_INT 27
12890: PUSH
12891: LD_INT 44
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: LIST
12898: IN
12899: IFFALSE 12920
// points := [ 14 , 50 , 16 ] ;
12901: LD_ADDR_VAR 0 9
12905: PUSH
12906: LD_INT 14
12908: PUSH
12909: LD_INT 50
12911: PUSH
12912: LD_INT 16
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: LIST
12919: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
12920: LD_VAR 0 6
12924: PPUSH
12925: CALL_OW 264
12929: PUSH
12930: LD_INT 6
12932: PUSH
12933: LD_INT 46
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: IN
12940: IFFALSE 12961
// points := [ 32 , 120 , 70 ] ;
12942: LD_ADDR_VAR 0 9
12946: PUSH
12947: LD_INT 32
12949: PUSH
12950: LD_INT 120
12952: PUSH
12953: LD_INT 70
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: LIST
12960: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
12961: LD_VAR 0 6
12965: PPUSH
12966: CALL_OW 264
12970: PUSH
12971: LD_INT 7
12973: PUSH
12974: LD_INT 28
12976: PUSH
12977: LD_INT 45
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: LIST
12984: IN
12985: IFFALSE 13006
// points := [ 35 , 20 , 45 ] ;
12987: LD_ADDR_VAR 0 9
12991: PUSH
12992: LD_INT 35
12994: PUSH
12995: LD_INT 20
12997: PUSH
12998: LD_INT 45
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: LIST
13005: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
13006: LD_VAR 0 6
13010: PPUSH
13011: CALL_OW 264
13015: PUSH
13016: LD_INT 47
13018: PUSH
13019: EMPTY
13020: LIST
13021: IN
13022: IFFALSE 13043
// points := [ 67 , 45 , 75 ] ;
13024: LD_ADDR_VAR 0 9
13028: PUSH
13029: LD_INT 67
13031: PUSH
13032: LD_INT 45
13034: PUSH
13035: LD_INT 75
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: LIST
13042: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
13043: LD_VAR 0 6
13047: PPUSH
13048: CALL_OW 264
13052: PUSH
13053: LD_INT 26
13055: PUSH
13056: EMPTY
13057: LIST
13058: IN
13059: IFFALSE 13080
// points := [ 120 , 30 , 80 ] ;
13061: LD_ADDR_VAR 0 9
13065: PUSH
13066: LD_INT 120
13068: PUSH
13069: LD_INT 30
13071: PUSH
13072: LD_INT 80
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: LIST
13079: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
13080: LD_VAR 0 6
13084: PPUSH
13085: CALL_OW 264
13089: PUSH
13090: LD_INT 22
13092: PUSH
13093: EMPTY
13094: LIST
13095: IN
13096: IFFALSE 13117
// points := [ 40 , 1 , 1 ] ;
13098: LD_ADDR_VAR 0 9
13102: PUSH
13103: LD_INT 40
13105: PUSH
13106: LD_INT 1
13108: PUSH
13109: LD_INT 1
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: LIST
13116: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
13117: LD_VAR 0 6
13121: PPUSH
13122: CALL_OW 264
13126: PUSH
13127: LD_INT 29
13129: PUSH
13130: EMPTY
13131: LIST
13132: IN
13133: IFFALSE 13154
// points := [ 70 , 200 , 400 ] ;
13135: LD_ADDR_VAR 0 9
13139: PUSH
13140: LD_INT 70
13142: PUSH
13143: LD_INT 200
13145: PUSH
13146: LD_INT 400
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: LIST
13153: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
13154: LD_VAR 0 6
13158: PPUSH
13159: CALL_OW 264
13163: PUSH
13164: LD_INT 14
13166: PUSH
13167: LD_INT 53
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: IN
13174: IFFALSE 13195
// points := [ 40 , 10 , 20 ] ;
13176: LD_ADDR_VAR 0 9
13180: PUSH
13181: LD_INT 40
13183: PUSH
13184: LD_INT 10
13186: PUSH
13187: LD_INT 20
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: LIST
13194: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
13195: LD_VAR 0 6
13199: PPUSH
13200: CALL_OW 264
13204: PUSH
13205: LD_INT 9
13207: PUSH
13208: EMPTY
13209: LIST
13210: IN
13211: IFFALSE 13232
// points := [ 5 , 70 , 20 ] ;
13213: LD_ADDR_VAR 0 9
13217: PUSH
13218: LD_INT 5
13220: PUSH
13221: LD_INT 70
13223: PUSH
13224: LD_INT 20
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: LIST
13231: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
13232: LD_VAR 0 6
13236: PPUSH
13237: CALL_OW 264
13241: PUSH
13242: LD_INT 10
13244: PUSH
13245: EMPTY
13246: LIST
13247: IN
13248: IFFALSE 13269
// points := [ 35 , 110 , 70 ] ;
13250: LD_ADDR_VAR 0 9
13254: PUSH
13255: LD_INT 35
13257: PUSH
13258: LD_INT 110
13260: PUSH
13261: LD_INT 70
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: LIST
13268: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
13269: LD_VAR 0 6
13273: PPUSH
13274: CALL_OW 265
13278: PUSH
13279: LD_INT 25
13281: EQUAL
13282: IFFALSE 13303
// points := [ 80 , 65 , 100 ] ;
13284: LD_ADDR_VAR 0 9
13288: PUSH
13289: LD_INT 80
13291: PUSH
13292: LD_INT 65
13294: PUSH
13295: LD_INT 100
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: LIST
13302: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
13303: LD_VAR 0 6
13307: PPUSH
13308: CALL_OW 263
13312: PUSH
13313: LD_INT 1
13315: EQUAL
13316: IFFALSE 13351
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
13318: LD_ADDR_VAR 0 10
13322: PUSH
13323: LD_VAR 0 10
13327: PUSH
13328: LD_VAR 0 6
13332: PPUSH
13333: CALL_OW 311
13337: PPUSH
13338: LD_INT 3
13340: PPUSH
13341: CALL_OW 259
13345: PUSH
13346: LD_INT 4
13348: MUL
13349: MUL
13350: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
13351: LD_VAR 0 6
13355: PPUSH
13356: CALL_OW 263
13360: PUSH
13361: LD_INT 2
13363: EQUAL
13364: IFFALSE 13415
// begin j := IsControledBy ( i ) ;
13366: LD_ADDR_VAR 0 7
13370: PUSH
13371: LD_VAR 0 6
13375: PPUSH
13376: CALL_OW 312
13380: ST_TO_ADDR
// if j then
13381: LD_VAR 0 7
13385: IFFALSE 13415
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
13387: LD_ADDR_VAR 0 10
13391: PUSH
13392: LD_VAR 0 10
13396: PUSH
13397: LD_VAR 0 7
13401: PPUSH
13402: LD_INT 3
13404: PPUSH
13405: CALL_OW 259
13409: PUSH
13410: LD_INT 3
13412: MUL
13413: MUL
13414: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
13415: LD_VAR 0 6
13419: PPUSH
13420: CALL_OW 264
13424: PUSH
13425: LD_INT 5
13427: PUSH
13428: LD_INT 6
13430: PUSH
13431: LD_INT 46
13433: PUSH
13434: LD_INT 44
13436: PUSH
13437: LD_INT 47
13439: PUSH
13440: LD_INT 45
13442: PUSH
13443: LD_INT 28
13445: PUSH
13446: LD_INT 7
13448: PUSH
13449: LD_INT 27
13451: PUSH
13452: LD_INT 29
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: IN
13467: PUSH
13468: LD_VAR 0 1
13472: PPUSH
13473: LD_INT 52
13475: PPUSH
13476: CALL_OW 321
13480: PUSH
13481: LD_INT 2
13483: EQUAL
13484: AND
13485: IFFALSE 13502
// bpoints := bpoints * 1.2 ;
13487: LD_ADDR_VAR 0 10
13491: PUSH
13492: LD_VAR 0 10
13496: PUSH
13497: LD_REAL  1.20000000000000E+0000
13500: MUL
13501: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
13502: LD_VAR 0 6
13506: PPUSH
13507: CALL_OW 264
13511: PUSH
13512: LD_INT 6
13514: PUSH
13515: LD_INT 46
13517: PUSH
13518: LD_INT 47
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: LIST
13525: IN
13526: IFFALSE 13543
// bpoints := bpoints * 1.2 ;
13528: LD_ADDR_VAR 0 10
13532: PUSH
13533: LD_VAR 0 10
13537: PUSH
13538: LD_REAL  1.20000000000000E+0000
13541: MUL
13542: ST_TO_ADDR
// end ; unit_building :
13543: GO 13557
13545: LD_INT 3
13547: DOUBLE
13548: EQUAL
13549: IFTRUE 13553
13551: GO 13556
13553: POP
// ; end ;
13554: GO 13557
13556: POP
// for j = 1 to 3 do
13557: LD_ADDR_VAR 0 7
13561: PUSH
13562: DOUBLE
13563: LD_INT 1
13565: DEC
13566: ST_TO_ADDR
13567: LD_INT 3
13569: PUSH
13570: FOR_TO
13571: IFFALSE 13624
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
13573: LD_ADDR_VAR 0 5
13577: PUSH
13578: LD_VAR 0 5
13582: PPUSH
13583: LD_VAR 0 7
13587: PPUSH
13588: LD_VAR 0 5
13592: PUSH
13593: LD_VAR 0 7
13597: ARRAY
13598: PUSH
13599: LD_VAR 0 9
13603: PUSH
13604: LD_VAR 0 7
13608: ARRAY
13609: PUSH
13610: LD_VAR 0 10
13614: MUL
13615: PLUS
13616: PPUSH
13617: CALL_OW 1
13621: ST_TO_ADDR
13622: GO 13570
13624: POP
13625: POP
// end ;
13626: GO 12109
13628: POP
13629: POP
// result := Replace ( result , 4 , tmp ) ;
13630: LD_ADDR_VAR 0 5
13634: PUSH
13635: LD_VAR 0 5
13639: PPUSH
13640: LD_INT 4
13642: PPUSH
13643: LD_VAR 0 8
13647: PPUSH
13648: CALL_OW 1
13652: ST_TO_ADDR
// end ;
13653: LD_VAR 0 5
13657: RET
// export function DangerAtRange ( unit , range ) ; begin
13658: LD_INT 0
13660: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
13661: LD_ADDR_VAR 0 3
13665: PUSH
13666: LD_VAR 0 1
13670: PPUSH
13671: CALL_OW 255
13675: PPUSH
13676: LD_VAR 0 1
13680: PPUSH
13681: CALL_OW 250
13685: PPUSH
13686: LD_VAR 0 1
13690: PPUSH
13691: CALL_OW 251
13695: PPUSH
13696: LD_VAR 0 2
13700: PPUSH
13701: CALL 11961 0 4
13705: ST_TO_ADDR
// end ;
13706: LD_VAR 0 3
13710: RET
// export function DangerInArea ( side , area ) ; begin
13711: LD_INT 0
13713: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
13714: LD_ADDR_VAR 0 3
13718: PUSH
13719: LD_VAR 0 2
13723: PPUSH
13724: LD_INT 81
13726: PUSH
13727: LD_VAR 0 1
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PPUSH
13736: CALL_OW 70
13740: ST_TO_ADDR
// end ;
13741: LD_VAR 0 3
13745: RET
// export function IsExtension ( b ) ; begin
13746: LD_INT 0
13748: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
13749: LD_ADDR_VAR 0 2
13753: PUSH
13754: LD_VAR 0 1
13758: PUSH
13759: LD_INT 23
13761: PUSH
13762: LD_INT 20
13764: PUSH
13765: LD_INT 22
13767: PUSH
13768: LD_INT 17
13770: PUSH
13771: LD_INT 24
13773: PUSH
13774: LD_INT 21
13776: PUSH
13777: LD_INT 19
13779: PUSH
13780: LD_INT 16
13782: PUSH
13783: LD_INT 25
13785: PUSH
13786: LD_INT 18
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: IN
13801: ST_TO_ADDR
// end ;
13802: LD_VAR 0 2
13806: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
13807: LD_INT 0
13809: PPUSH
13810: PPUSH
13811: PPUSH
// result := [ ] ;
13812: LD_ADDR_VAR 0 4
13816: PUSH
13817: EMPTY
13818: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
13819: LD_ADDR_VAR 0 5
13823: PUSH
13824: LD_VAR 0 2
13828: PPUSH
13829: LD_INT 21
13831: PUSH
13832: LD_INT 3
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: PPUSH
13839: CALL_OW 70
13843: ST_TO_ADDR
// if not tmp then
13844: LD_VAR 0 5
13848: NOT
13849: IFFALSE 13853
// exit ;
13851: GO 13917
// if checkLink then
13853: LD_VAR 0 3
13857: IFFALSE 13907
// begin for i in tmp do
13859: LD_ADDR_VAR 0 6
13863: PUSH
13864: LD_VAR 0 5
13868: PUSH
13869: FOR_IN
13870: IFFALSE 13905
// if GetBase ( i ) <> base then
13872: LD_VAR 0 6
13876: PPUSH
13877: CALL_OW 274
13881: PUSH
13882: LD_VAR 0 1
13886: NONEQUAL
13887: IFFALSE 13903
// ComLinkToBase ( base , i ) ;
13889: LD_VAR 0 1
13893: PPUSH
13894: LD_VAR 0 6
13898: PPUSH
13899: CALL_OW 169
13903: GO 13869
13905: POP
13906: POP
// end ; result := tmp ;
13907: LD_ADDR_VAR 0 4
13911: PUSH
13912: LD_VAR 0 5
13916: ST_TO_ADDR
// end ;
13917: LD_VAR 0 4
13921: RET
// export function ComComplete ( units , b ) ; var i ; begin
13922: LD_INT 0
13924: PPUSH
13925: PPUSH
// if not units then
13926: LD_VAR 0 1
13930: NOT
13931: IFFALSE 13935
// exit ;
13933: GO 14025
// for i in units do
13935: LD_ADDR_VAR 0 4
13939: PUSH
13940: LD_VAR 0 1
13944: PUSH
13945: FOR_IN
13946: IFFALSE 14023
// if BuildingStatus ( b ) = bs_build then
13948: LD_VAR 0 2
13952: PPUSH
13953: CALL_OW 461
13957: PUSH
13958: LD_INT 1
13960: EQUAL
13961: IFFALSE 14021
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
13963: LD_VAR 0 4
13967: PPUSH
13968: LD_STRING h
13970: PUSH
13971: LD_VAR 0 2
13975: PPUSH
13976: CALL_OW 250
13980: PUSH
13981: LD_VAR 0 2
13985: PPUSH
13986: CALL_OW 251
13990: PUSH
13991: LD_VAR 0 2
13995: PUSH
13996: LD_INT 0
13998: PUSH
13999: LD_INT 0
14001: PUSH
14002: LD_INT 0
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: PUSH
14014: EMPTY
14015: LIST
14016: PPUSH
14017: CALL_OW 446
14021: GO 13945
14023: POP
14024: POP
// end ;
14025: LD_VAR 0 3
14029: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
14030: LD_INT 0
14032: PPUSH
14033: PPUSH
14034: PPUSH
14035: PPUSH
14036: PPUSH
14037: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
14038: LD_VAR 0 1
14042: NOT
14043: PUSH
14044: LD_VAR 0 1
14048: PPUSH
14049: CALL_OW 263
14053: PUSH
14054: LD_INT 2
14056: EQUAL
14057: NOT
14058: OR
14059: IFFALSE 14063
// exit ;
14061: GO 14379
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
14063: LD_ADDR_VAR 0 6
14067: PUSH
14068: LD_INT 22
14070: PUSH
14071: LD_VAR 0 1
14075: PPUSH
14076: CALL_OW 255
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: PUSH
14085: LD_INT 2
14087: PUSH
14088: LD_INT 30
14090: PUSH
14091: LD_INT 36
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PUSH
14098: LD_INT 34
14100: PUSH
14101: LD_INT 31
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: LIST
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PPUSH
14117: CALL_OW 69
14121: ST_TO_ADDR
// if not tmp then
14122: LD_VAR 0 6
14126: NOT
14127: IFFALSE 14131
// exit ;
14129: GO 14379
// result := [ ] ;
14131: LD_ADDR_VAR 0 2
14135: PUSH
14136: EMPTY
14137: ST_TO_ADDR
// for i in tmp do
14138: LD_ADDR_VAR 0 3
14142: PUSH
14143: LD_VAR 0 6
14147: PUSH
14148: FOR_IN
14149: IFFALSE 14220
// begin t := UnitsInside ( i ) ;
14151: LD_ADDR_VAR 0 4
14155: PUSH
14156: LD_VAR 0 3
14160: PPUSH
14161: CALL_OW 313
14165: ST_TO_ADDR
// if t then
14166: LD_VAR 0 4
14170: IFFALSE 14218
// for j in t do
14172: LD_ADDR_VAR 0 7
14176: PUSH
14177: LD_VAR 0 4
14181: PUSH
14182: FOR_IN
14183: IFFALSE 14216
// result := Insert ( result , result + 1 , j ) ;
14185: LD_ADDR_VAR 0 2
14189: PUSH
14190: LD_VAR 0 2
14194: PPUSH
14195: LD_VAR 0 2
14199: PUSH
14200: LD_INT 1
14202: PLUS
14203: PPUSH
14204: LD_VAR 0 7
14208: PPUSH
14209: CALL_OW 2
14213: ST_TO_ADDR
14214: GO 14182
14216: POP
14217: POP
// end ;
14218: GO 14148
14220: POP
14221: POP
// if not result then
14222: LD_VAR 0 2
14226: NOT
14227: IFFALSE 14231
// exit ;
14229: GO 14379
// mech := result [ 1 ] ;
14231: LD_ADDR_VAR 0 5
14235: PUSH
14236: LD_VAR 0 2
14240: PUSH
14241: LD_INT 1
14243: ARRAY
14244: ST_TO_ADDR
// if result > 1 then
14245: LD_VAR 0 2
14249: PUSH
14250: LD_INT 1
14252: GREATER
14253: IFFALSE 14365
// for i = 2 to result do
14255: LD_ADDR_VAR 0 3
14259: PUSH
14260: DOUBLE
14261: LD_INT 2
14263: DEC
14264: ST_TO_ADDR
14265: LD_VAR 0 2
14269: PUSH
14270: FOR_TO
14271: IFFALSE 14363
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
14273: LD_ADDR_VAR 0 4
14277: PUSH
14278: LD_VAR 0 2
14282: PUSH
14283: LD_VAR 0 3
14287: ARRAY
14288: PPUSH
14289: LD_INT 3
14291: PPUSH
14292: CALL_OW 259
14296: PUSH
14297: LD_VAR 0 2
14301: PUSH
14302: LD_VAR 0 3
14306: ARRAY
14307: PPUSH
14308: CALL_OW 432
14312: MINUS
14313: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
14314: LD_VAR 0 4
14318: PUSH
14319: LD_VAR 0 5
14323: PPUSH
14324: LD_INT 3
14326: PPUSH
14327: CALL_OW 259
14331: PUSH
14332: LD_VAR 0 5
14336: PPUSH
14337: CALL_OW 432
14341: MINUS
14342: GREATEREQUAL
14343: IFFALSE 14361
// mech := result [ i ] ;
14345: LD_ADDR_VAR 0 5
14349: PUSH
14350: LD_VAR 0 2
14354: PUSH
14355: LD_VAR 0 3
14359: ARRAY
14360: ST_TO_ADDR
// end ;
14361: GO 14270
14363: POP
14364: POP
// ComLinkTo ( vehicle , mech ) ;
14365: LD_VAR 0 1
14369: PPUSH
14370: LD_VAR 0 5
14374: PPUSH
14375: CALL_OW 135
// end ;
14379: LD_VAR 0 2
14383: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
14384: LD_INT 0
14386: PPUSH
14387: PPUSH
14388: PPUSH
14389: PPUSH
14390: PPUSH
14391: PPUSH
14392: PPUSH
14393: PPUSH
14394: PPUSH
14395: PPUSH
14396: PPUSH
14397: PPUSH
14398: PPUSH
// result := [ ] ;
14399: LD_ADDR_VAR 0 7
14403: PUSH
14404: EMPTY
14405: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
14406: LD_VAR 0 1
14410: PPUSH
14411: CALL_OW 266
14415: PUSH
14416: LD_INT 0
14418: PUSH
14419: LD_INT 1
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: IN
14426: NOT
14427: IFFALSE 14431
// exit ;
14429: GO 16065
// if name then
14431: LD_VAR 0 3
14435: IFFALSE 14451
// SetBName ( base_dep , name ) ;
14437: LD_VAR 0 1
14441: PPUSH
14442: LD_VAR 0 3
14446: PPUSH
14447: CALL_OW 500
// base := GetBase ( base_dep ) ;
14451: LD_ADDR_VAR 0 15
14455: PUSH
14456: LD_VAR 0 1
14460: PPUSH
14461: CALL_OW 274
14465: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
14466: LD_ADDR_VAR 0 16
14470: PUSH
14471: LD_VAR 0 1
14475: PPUSH
14476: CALL_OW 255
14480: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
14481: LD_ADDR_VAR 0 17
14485: PUSH
14486: LD_VAR 0 1
14490: PPUSH
14491: CALL_OW 248
14495: ST_TO_ADDR
// if sources then
14496: LD_VAR 0 5
14500: IFFALSE 14547
// for i = 1 to 3 do
14502: LD_ADDR_VAR 0 8
14506: PUSH
14507: DOUBLE
14508: LD_INT 1
14510: DEC
14511: ST_TO_ADDR
14512: LD_INT 3
14514: PUSH
14515: FOR_TO
14516: IFFALSE 14545
// AddResourceType ( base , i , sources [ i ] ) ;
14518: LD_VAR 0 15
14522: PPUSH
14523: LD_VAR 0 8
14527: PPUSH
14528: LD_VAR 0 5
14532: PUSH
14533: LD_VAR 0 8
14537: ARRAY
14538: PPUSH
14539: CALL_OW 276
14543: GO 14515
14545: POP
14546: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
14547: LD_ADDR_VAR 0 18
14551: PUSH
14552: LD_VAR 0 15
14556: PPUSH
14557: LD_VAR 0 2
14561: PPUSH
14562: LD_INT 1
14564: PPUSH
14565: CALL 13807 0 3
14569: ST_TO_ADDR
// InitHc ;
14570: CALL_OW 19
// InitUc ;
14574: CALL_OW 18
// uc_side := side ;
14578: LD_ADDR_OWVAR 20
14582: PUSH
14583: LD_VAR 0 16
14587: ST_TO_ADDR
// uc_nation := nation ;
14588: LD_ADDR_OWVAR 21
14592: PUSH
14593: LD_VAR 0 17
14597: ST_TO_ADDR
// if buildings then
14598: LD_VAR 0 18
14602: IFFALSE 15924
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
14604: LD_ADDR_VAR 0 19
14608: PUSH
14609: LD_VAR 0 18
14613: PPUSH
14614: LD_INT 2
14616: PUSH
14617: LD_INT 30
14619: PUSH
14620: LD_INT 29
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: PUSH
14627: LD_INT 30
14629: PUSH
14630: LD_INT 30
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: LIST
14641: PPUSH
14642: CALL_OW 72
14646: ST_TO_ADDR
// if tmp then
14647: LD_VAR 0 19
14651: IFFALSE 14699
// for i in tmp do
14653: LD_ADDR_VAR 0 8
14657: PUSH
14658: LD_VAR 0 19
14662: PUSH
14663: FOR_IN
14664: IFFALSE 14697
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
14666: LD_VAR 0 8
14670: PPUSH
14671: CALL_OW 250
14675: PPUSH
14676: LD_VAR 0 8
14680: PPUSH
14681: CALL_OW 251
14685: PPUSH
14686: LD_VAR 0 16
14690: PPUSH
14691: CALL_OW 441
14695: GO 14663
14697: POP
14698: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
14699: LD_VAR 0 18
14703: PPUSH
14704: LD_INT 2
14706: PUSH
14707: LD_INT 30
14709: PUSH
14710: LD_INT 32
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PUSH
14717: LD_INT 30
14719: PUSH
14720: LD_INT 33
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: LIST
14731: PPUSH
14732: CALL_OW 72
14736: IFFALSE 14824
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
14738: LD_ADDR_VAR 0 8
14742: PUSH
14743: LD_VAR 0 18
14747: PPUSH
14748: LD_INT 2
14750: PUSH
14751: LD_INT 30
14753: PUSH
14754: LD_INT 32
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: PUSH
14761: LD_INT 30
14763: PUSH
14764: LD_INT 33
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: LIST
14775: PPUSH
14776: CALL_OW 72
14780: PUSH
14781: FOR_IN
14782: IFFALSE 14822
// begin if not GetBWeapon ( i ) then
14784: LD_VAR 0 8
14788: PPUSH
14789: CALL_OW 269
14793: NOT
14794: IFFALSE 14820
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
14796: LD_VAR 0 8
14800: PPUSH
14801: LD_VAR 0 8
14805: PPUSH
14806: LD_VAR 0 2
14810: PPUSH
14811: CALL 16070 0 2
14815: PPUSH
14816: CALL_OW 431
// end ;
14820: GO 14781
14822: POP
14823: POP
// end ; for i = 1 to personel do
14824: LD_ADDR_VAR 0 8
14828: PUSH
14829: DOUBLE
14830: LD_INT 1
14832: DEC
14833: ST_TO_ADDR
14834: LD_VAR 0 6
14838: PUSH
14839: FOR_TO
14840: IFFALSE 15904
// begin if i > 4 then
14842: LD_VAR 0 8
14846: PUSH
14847: LD_INT 4
14849: GREATER
14850: IFFALSE 14854
// break ;
14852: GO 15904
// case i of 1 :
14854: LD_VAR 0 8
14858: PUSH
14859: LD_INT 1
14861: DOUBLE
14862: EQUAL
14863: IFTRUE 14867
14865: GO 14947
14867: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
14868: LD_ADDR_VAR 0 12
14872: PUSH
14873: LD_VAR 0 18
14877: PPUSH
14878: LD_INT 22
14880: PUSH
14881: LD_VAR 0 16
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PUSH
14890: LD_INT 58
14892: PUSH
14893: EMPTY
14894: LIST
14895: PUSH
14896: LD_INT 2
14898: PUSH
14899: LD_INT 30
14901: PUSH
14902: LD_INT 32
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: PUSH
14909: LD_INT 30
14911: PUSH
14912: LD_INT 4
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: PUSH
14919: LD_INT 30
14921: PUSH
14922: LD_INT 5
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: LIST
14939: PPUSH
14940: CALL_OW 72
14944: ST_TO_ADDR
14945: GO 15169
14947: LD_INT 2
14949: DOUBLE
14950: EQUAL
14951: IFTRUE 14955
14953: GO 15017
14955: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
14956: LD_ADDR_VAR 0 12
14960: PUSH
14961: LD_VAR 0 18
14965: PPUSH
14966: LD_INT 22
14968: PUSH
14969: LD_VAR 0 16
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 2
14980: PUSH
14981: LD_INT 30
14983: PUSH
14984: LD_INT 0
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: PUSH
14991: LD_INT 30
14993: PUSH
14994: LD_INT 1
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: LIST
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: PPUSH
15010: CALL_OW 72
15014: ST_TO_ADDR
15015: GO 15169
15017: LD_INT 3
15019: DOUBLE
15020: EQUAL
15021: IFTRUE 15025
15023: GO 15087
15025: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
15026: LD_ADDR_VAR 0 12
15030: PUSH
15031: LD_VAR 0 18
15035: PPUSH
15036: LD_INT 22
15038: PUSH
15039: LD_VAR 0 16
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: LD_INT 2
15050: PUSH
15051: LD_INT 30
15053: PUSH
15054: LD_INT 2
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: PUSH
15061: LD_INT 30
15063: PUSH
15064: LD_INT 3
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: LIST
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: PPUSH
15080: CALL_OW 72
15084: ST_TO_ADDR
15085: GO 15169
15087: LD_INT 4
15089: DOUBLE
15090: EQUAL
15091: IFTRUE 15095
15093: GO 15168
15095: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
15096: LD_ADDR_VAR 0 12
15100: PUSH
15101: LD_VAR 0 18
15105: PPUSH
15106: LD_INT 22
15108: PUSH
15109: LD_VAR 0 16
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: PUSH
15118: LD_INT 2
15120: PUSH
15121: LD_INT 30
15123: PUSH
15124: LD_INT 6
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: LD_INT 30
15133: PUSH
15134: LD_INT 7
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: PUSH
15141: LD_INT 30
15143: PUSH
15144: LD_INT 8
15146: PUSH
15147: EMPTY
15148: LIST
15149: LIST
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: PPUSH
15161: CALL_OW 72
15165: ST_TO_ADDR
15166: GO 15169
15168: POP
// if i = 1 then
15169: LD_VAR 0 8
15173: PUSH
15174: LD_INT 1
15176: EQUAL
15177: IFFALSE 15288
// begin tmp := [ ] ;
15179: LD_ADDR_VAR 0 19
15183: PUSH
15184: EMPTY
15185: ST_TO_ADDR
// for j in f do
15186: LD_ADDR_VAR 0 9
15190: PUSH
15191: LD_VAR 0 12
15195: PUSH
15196: FOR_IN
15197: IFFALSE 15270
// if GetBType ( j ) = b_bunker then
15199: LD_VAR 0 9
15203: PPUSH
15204: CALL_OW 266
15208: PUSH
15209: LD_INT 32
15211: EQUAL
15212: IFFALSE 15239
// tmp := Insert ( tmp , 1 , j ) else
15214: LD_ADDR_VAR 0 19
15218: PUSH
15219: LD_VAR 0 19
15223: PPUSH
15224: LD_INT 1
15226: PPUSH
15227: LD_VAR 0 9
15231: PPUSH
15232: CALL_OW 2
15236: ST_TO_ADDR
15237: GO 15268
// tmp := Insert ( tmp , tmp + 1 , j ) ;
15239: LD_ADDR_VAR 0 19
15243: PUSH
15244: LD_VAR 0 19
15248: PPUSH
15249: LD_VAR 0 19
15253: PUSH
15254: LD_INT 1
15256: PLUS
15257: PPUSH
15258: LD_VAR 0 9
15262: PPUSH
15263: CALL_OW 2
15267: ST_TO_ADDR
15268: GO 15196
15270: POP
15271: POP
// if tmp then
15272: LD_VAR 0 19
15276: IFFALSE 15288
// f := tmp ;
15278: LD_ADDR_VAR 0 12
15282: PUSH
15283: LD_VAR 0 19
15287: ST_TO_ADDR
// end ; x := personel [ i ] ;
15288: LD_ADDR_VAR 0 13
15292: PUSH
15293: LD_VAR 0 6
15297: PUSH
15298: LD_VAR 0 8
15302: ARRAY
15303: ST_TO_ADDR
// if x = - 1 then
15304: LD_VAR 0 13
15308: PUSH
15309: LD_INT 1
15311: NEG
15312: EQUAL
15313: IFFALSE 15522
// begin for j in f do
15315: LD_ADDR_VAR 0 9
15319: PUSH
15320: LD_VAR 0 12
15324: PUSH
15325: FOR_IN
15326: IFFALSE 15518
// repeat InitHc ;
15328: CALL_OW 19
// if GetBType ( j ) = b_barracks then
15332: LD_VAR 0 9
15336: PPUSH
15337: CALL_OW 266
15341: PUSH
15342: LD_INT 5
15344: EQUAL
15345: IFFALSE 15415
// begin if UnitsInside ( j ) < 3 then
15347: LD_VAR 0 9
15351: PPUSH
15352: CALL_OW 313
15356: PUSH
15357: LD_INT 3
15359: LESS
15360: IFFALSE 15396
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
15362: LD_INT 0
15364: PPUSH
15365: LD_INT 5
15367: PUSH
15368: LD_INT 8
15370: PUSH
15371: LD_INT 9
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: LIST
15378: PUSH
15379: LD_VAR 0 17
15383: ARRAY
15384: PPUSH
15385: LD_VAR 0 4
15389: PPUSH
15390: CALL_OW 380
15394: GO 15413
// PrepareHuman ( false , i , skill ) ;
15396: LD_INT 0
15398: PPUSH
15399: LD_VAR 0 8
15403: PPUSH
15404: LD_VAR 0 4
15408: PPUSH
15409: CALL_OW 380
// end else
15413: GO 15432
// PrepareHuman ( false , i , skill ) ;
15415: LD_INT 0
15417: PPUSH
15418: LD_VAR 0 8
15422: PPUSH
15423: LD_VAR 0 4
15427: PPUSH
15428: CALL_OW 380
// un := CreateHuman ;
15432: LD_ADDR_VAR 0 14
15436: PUSH
15437: CALL_OW 44
15441: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
15442: LD_ADDR_VAR 0 7
15446: PUSH
15447: LD_VAR 0 7
15451: PPUSH
15452: LD_INT 1
15454: PPUSH
15455: LD_VAR 0 14
15459: PPUSH
15460: CALL_OW 2
15464: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
15465: LD_VAR 0 14
15469: PPUSH
15470: LD_VAR 0 9
15474: PPUSH
15475: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
15479: LD_VAR 0 9
15483: PPUSH
15484: CALL_OW 313
15488: PUSH
15489: LD_INT 6
15491: EQUAL
15492: PUSH
15493: LD_VAR 0 9
15497: PPUSH
15498: CALL_OW 266
15502: PUSH
15503: LD_INT 32
15505: PUSH
15506: LD_INT 31
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: IN
15513: OR
15514: IFFALSE 15328
15516: GO 15325
15518: POP
15519: POP
// end else
15520: GO 15902
// for j = 1 to x do
15522: LD_ADDR_VAR 0 9
15526: PUSH
15527: DOUBLE
15528: LD_INT 1
15530: DEC
15531: ST_TO_ADDR
15532: LD_VAR 0 13
15536: PUSH
15537: FOR_TO
15538: IFFALSE 15900
// begin InitHc ;
15540: CALL_OW 19
// if not f then
15544: LD_VAR 0 12
15548: NOT
15549: IFFALSE 15638
// begin PrepareHuman ( false , i , skill ) ;
15551: LD_INT 0
15553: PPUSH
15554: LD_VAR 0 8
15558: PPUSH
15559: LD_VAR 0 4
15563: PPUSH
15564: CALL_OW 380
// un := CreateHuman ;
15568: LD_ADDR_VAR 0 14
15572: PUSH
15573: CALL_OW 44
15577: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
15578: LD_ADDR_VAR 0 7
15582: PUSH
15583: LD_VAR 0 7
15587: PPUSH
15588: LD_INT 1
15590: PPUSH
15591: LD_VAR 0 14
15595: PPUSH
15596: CALL_OW 2
15600: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
15601: LD_VAR 0 14
15605: PPUSH
15606: LD_VAR 0 1
15610: PPUSH
15611: CALL_OW 250
15615: PPUSH
15616: LD_VAR 0 1
15620: PPUSH
15621: CALL_OW 251
15625: PPUSH
15626: LD_INT 10
15628: PPUSH
15629: LD_INT 0
15631: PPUSH
15632: CALL_OW 50
// continue ;
15636: GO 15537
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
15638: LD_VAR 0 12
15642: PUSH
15643: LD_INT 1
15645: ARRAY
15646: PPUSH
15647: CALL_OW 313
15651: PUSH
15652: LD_VAR 0 12
15656: PUSH
15657: LD_INT 1
15659: ARRAY
15660: PPUSH
15661: CALL_OW 266
15665: PUSH
15666: LD_INT 32
15668: PUSH
15669: LD_INT 31
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: IN
15676: AND
15677: PUSH
15678: LD_VAR 0 12
15682: PUSH
15683: LD_INT 1
15685: ARRAY
15686: PPUSH
15687: CALL_OW 313
15691: PUSH
15692: LD_INT 6
15694: EQUAL
15695: OR
15696: IFFALSE 15716
// f := Delete ( f , 1 ) ;
15698: LD_ADDR_VAR 0 12
15702: PUSH
15703: LD_VAR 0 12
15707: PPUSH
15708: LD_INT 1
15710: PPUSH
15711: CALL_OW 3
15715: ST_TO_ADDR
// if not f then
15716: LD_VAR 0 12
15720: NOT
15721: IFFALSE 15739
// begin x := x + 2 ;
15723: LD_ADDR_VAR 0 13
15727: PUSH
15728: LD_VAR 0 13
15732: PUSH
15733: LD_INT 2
15735: PLUS
15736: ST_TO_ADDR
// continue ;
15737: GO 15537
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
15739: LD_VAR 0 12
15743: PUSH
15744: LD_INT 1
15746: ARRAY
15747: PPUSH
15748: CALL_OW 266
15752: PUSH
15753: LD_INT 5
15755: EQUAL
15756: IFFALSE 15830
// begin if UnitsInside ( f [ 1 ] ) < 3 then
15758: LD_VAR 0 12
15762: PUSH
15763: LD_INT 1
15765: ARRAY
15766: PPUSH
15767: CALL_OW 313
15771: PUSH
15772: LD_INT 3
15774: LESS
15775: IFFALSE 15811
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
15777: LD_INT 0
15779: PPUSH
15780: LD_INT 5
15782: PUSH
15783: LD_INT 8
15785: PUSH
15786: LD_INT 9
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: LIST
15793: PUSH
15794: LD_VAR 0 17
15798: ARRAY
15799: PPUSH
15800: LD_VAR 0 4
15804: PPUSH
15805: CALL_OW 380
15809: GO 15828
// PrepareHuman ( false , i , skill ) ;
15811: LD_INT 0
15813: PPUSH
15814: LD_VAR 0 8
15818: PPUSH
15819: LD_VAR 0 4
15823: PPUSH
15824: CALL_OW 380
// end else
15828: GO 15847
// PrepareHuman ( false , i , skill ) ;
15830: LD_INT 0
15832: PPUSH
15833: LD_VAR 0 8
15837: PPUSH
15838: LD_VAR 0 4
15842: PPUSH
15843: CALL_OW 380
// un := CreateHuman ;
15847: LD_ADDR_VAR 0 14
15851: PUSH
15852: CALL_OW 44
15856: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
15857: LD_ADDR_VAR 0 7
15861: PUSH
15862: LD_VAR 0 7
15866: PPUSH
15867: LD_INT 1
15869: PPUSH
15870: LD_VAR 0 14
15874: PPUSH
15875: CALL_OW 2
15879: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
15880: LD_VAR 0 14
15884: PPUSH
15885: LD_VAR 0 12
15889: PUSH
15890: LD_INT 1
15892: ARRAY
15893: PPUSH
15894: CALL_OW 52
// end ;
15898: GO 15537
15900: POP
15901: POP
// end ;
15902: GO 14839
15904: POP
15905: POP
// result := result ^ buildings ;
15906: LD_ADDR_VAR 0 7
15910: PUSH
15911: LD_VAR 0 7
15915: PUSH
15916: LD_VAR 0 18
15920: ADD
15921: ST_TO_ADDR
// end else
15922: GO 16065
// begin for i = 1 to personel do
15924: LD_ADDR_VAR 0 8
15928: PUSH
15929: DOUBLE
15930: LD_INT 1
15932: DEC
15933: ST_TO_ADDR
15934: LD_VAR 0 6
15938: PUSH
15939: FOR_TO
15940: IFFALSE 16063
// begin if i > 4 then
15942: LD_VAR 0 8
15946: PUSH
15947: LD_INT 4
15949: GREATER
15950: IFFALSE 15954
// break ;
15952: GO 16063
// x := personel [ i ] ;
15954: LD_ADDR_VAR 0 13
15958: PUSH
15959: LD_VAR 0 6
15963: PUSH
15964: LD_VAR 0 8
15968: ARRAY
15969: ST_TO_ADDR
// if x = - 1 then
15970: LD_VAR 0 13
15974: PUSH
15975: LD_INT 1
15977: NEG
15978: EQUAL
15979: IFFALSE 15983
// continue ;
15981: GO 15939
// PrepareHuman ( false , i , skill ) ;
15983: LD_INT 0
15985: PPUSH
15986: LD_VAR 0 8
15990: PPUSH
15991: LD_VAR 0 4
15995: PPUSH
15996: CALL_OW 380
// un := CreateHuman ;
16000: LD_ADDR_VAR 0 14
16004: PUSH
16005: CALL_OW 44
16009: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
16010: LD_VAR 0 14
16014: PPUSH
16015: LD_VAR 0 1
16019: PPUSH
16020: CALL_OW 250
16024: PPUSH
16025: LD_VAR 0 1
16029: PPUSH
16030: CALL_OW 251
16034: PPUSH
16035: LD_INT 10
16037: PPUSH
16038: LD_INT 0
16040: PPUSH
16041: CALL_OW 50
// result := result ^ un ;
16045: LD_ADDR_VAR 0 7
16049: PUSH
16050: LD_VAR 0 7
16054: PUSH
16055: LD_VAR 0 14
16059: ADD
16060: ST_TO_ADDR
// end ;
16061: GO 15939
16063: POP
16064: POP
// end ; end ;
16065: LD_VAR 0 7
16069: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
16070: LD_INT 0
16072: PPUSH
16073: PPUSH
16074: PPUSH
16075: PPUSH
16076: PPUSH
16077: PPUSH
16078: PPUSH
16079: PPUSH
16080: PPUSH
16081: PPUSH
16082: PPUSH
16083: PPUSH
16084: PPUSH
16085: PPUSH
16086: PPUSH
16087: PPUSH
// result := false ;
16088: LD_ADDR_VAR 0 3
16092: PUSH
16093: LD_INT 0
16095: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
16096: LD_VAR 0 1
16100: NOT
16101: PUSH
16102: LD_VAR 0 1
16106: PPUSH
16107: CALL_OW 266
16111: PUSH
16112: LD_INT 32
16114: PUSH
16115: LD_INT 33
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: IN
16122: NOT
16123: OR
16124: IFFALSE 16128
// exit ;
16126: GO 17237
// nat := GetNation ( tower ) ;
16128: LD_ADDR_VAR 0 12
16132: PUSH
16133: LD_VAR 0 1
16137: PPUSH
16138: CALL_OW 248
16142: ST_TO_ADDR
// side := GetSide ( tower ) ;
16143: LD_ADDR_VAR 0 16
16147: PUSH
16148: LD_VAR 0 1
16152: PPUSH
16153: CALL_OW 255
16157: ST_TO_ADDR
// x := GetX ( tower ) ;
16158: LD_ADDR_VAR 0 10
16162: PUSH
16163: LD_VAR 0 1
16167: PPUSH
16168: CALL_OW 250
16172: ST_TO_ADDR
// y := GetY ( tower ) ;
16173: LD_ADDR_VAR 0 11
16177: PUSH
16178: LD_VAR 0 1
16182: PPUSH
16183: CALL_OW 251
16187: ST_TO_ADDR
// if not x or not y then
16188: LD_VAR 0 10
16192: NOT
16193: PUSH
16194: LD_VAR 0 11
16198: NOT
16199: OR
16200: IFFALSE 16204
// exit ;
16202: GO 17237
// weapon := 0 ;
16204: LD_ADDR_VAR 0 18
16208: PUSH
16209: LD_INT 0
16211: ST_TO_ADDR
// fac_list := [ ] ;
16212: LD_ADDR_VAR 0 17
16216: PUSH
16217: EMPTY
16218: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
16219: LD_ADDR_VAR 0 6
16223: PUSH
16224: LD_VAR 0 1
16228: PPUSH
16229: CALL_OW 274
16233: PPUSH
16234: LD_VAR 0 2
16238: PPUSH
16239: LD_INT 0
16241: PPUSH
16242: CALL 13807 0 3
16246: PPUSH
16247: LD_INT 30
16249: PUSH
16250: LD_INT 3
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PPUSH
16257: CALL_OW 72
16261: ST_TO_ADDR
// if not factories then
16262: LD_VAR 0 6
16266: NOT
16267: IFFALSE 16271
// exit ;
16269: GO 17237
// for i in factories do
16271: LD_ADDR_VAR 0 8
16275: PUSH
16276: LD_VAR 0 6
16280: PUSH
16281: FOR_IN
16282: IFFALSE 16307
// fac_list := fac_list union AvailableWeaponList ( i ) ;
16284: LD_ADDR_VAR 0 17
16288: PUSH
16289: LD_VAR 0 17
16293: PUSH
16294: LD_VAR 0 8
16298: PPUSH
16299: CALL_OW 478
16303: UNION
16304: ST_TO_ADDR
16305: GO 16281
16307: POP
16308: POP
// if not fac_list then
16309: LD_VAR 0 17
16313: NOT
16314: IFFALSE 16318
// exit ;
16316: GO 17237
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
16318: LD_ADDR_VAR 0 5
16322: PUSH
16323: LD_INT 4
16325: PUSH
16326: LD_INT 5
16328: PUSH
16329: LD_INT 9
16331: PUSH
16332: LD_INT 10
16334: PUSH
16335: LD_INT 6
16337: PUSH
16338: LD_INT 7
16340: PUSH
16341: LD_INT 11
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: PUSH
16353: LD_INT 27
16355: PUSH
16356: LD_INT 28
16358: PUSH
16359: LD_INT 26
16361: PUSH
16362: LD_INT 30
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: PUSH
16371: LD_INT 43
16373: PUSH
16374: LD_INT 44
16376: PUSH
16377: LD_INT 46
16379: PUSH
16380: LD_INT 45
16382: PUSH
16383: LD_INT 47
16385: PUSH
16386: LD_INT 49
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: LIST
16401: PUSH
16402: LD_VAR 0 12
16406: ARRAY
16407: ST_TO_ADDR
// list := list isect fac_list ;
16408: LD_ADDR_VAR 0 5
16412: PUSH
16413: LD_VAR 0 5
16417: PUSH
16418: LD_VAR 0 17
16422: ISECT
16423: ST_TO_ADDR
// if not list then
16424: LD_VAR 0 5
16428: NOT
16429: IFFALSE 16433
// exit ;
16431: GO 17237
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
16433: LD_VAR 0 12
16437: PUSH
16438: LD_INT 3
16440: EQUAL
16441: PUSH
16442: LD_INT 49
16444: PUSH
16445: LD_VAR 0 5
16449: IN
16450: AND
16451: PUSH
16452: LD_INT 31
16454: PPUSH
16455: LD_VAR 0 16
16459: PPUSH
16460: CALL_OW 321
16464: PUSH
16465: LD_INT 2
16467: EQUAL
16468: AND
16469: IFFALSE 16529
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
16471: LD_INT 22
16473: PUSH
16474: LD_VAR 0 16
16478: PUSH
16479: EMPTY
16480: LIST
16481: LIST
16482: PUSH
16483: LD_INT 35
16485: PUSH
16486: LD_INT 49
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PUSH
16493: LD_INT 91
16495: PUSH
16496: LD_VAR 0 1
16500: PUSH
16501: LD_INT 10
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: LIST
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: LIST
16513: PPUSH
16514: CALL_OW 69
16518: NOT
16519: IFFALSE 16529
// weapon := ru_time_lapser ;
16521: LD_ADDR_VAR 0 18
16525: PUSH
16526: LD_INT 49
16528: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
16529: LD_VAR 0 12
16533: PUSH
16534: LD_INT 1
16536: PUSH
16537: LD_INT 2
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: IN
16544: PUSH
16545: LD_INT 11
16547: PUSH
16548: LD_VAR 0 5
16552: IN
16553: PUSH
16554: LD_INT 30
16556: PUSH
16557: LD_VAR 0 5
16561: IN
16562: OR
16563: AND
16564: PUSH
16565: LD_INT 6
16567: PPUSH
16568: LD_VAR 0 16
16572: PPUSH
16573: CALL_OW 321
16577: PUSH
16578: LD_INT 2
16580: EQUAL
16581: AND
16582: IFFALSE 16747
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
16584: LD_INT 22
16586: PUSH
16587: LD_VAR 0 16
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: LD_INT 2
16598: PUSH
16599: LD_INT 35
16601: PUSH
16602: LD_INT 11
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: PUSH
16609: LD_INT 35
16611: PUSH
16612: LD_INT 30
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: LIST
16623: PUSH
16624: LD_INT 91
16626: PUSH
16627: LD_VAR 0 1
16631: PUSH
16632: LD_INT 18
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: LIST
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: LIST
16644: PPUSH
16645: CALL_OW 69
16649: NOT
16650: PUSH
16651: LD_INT 22
16653: PUSH
16654: LD_VAR 0 16
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: PUSH
16663: LD_INT 2
16665: PUSH
16666: LD_INT 30
16668: PUSH
16669: LD_INT 32
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 30
16678: PUSH
16679: LD_INT 33
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: LIST
16690: PUSH
16691: LD_INT 91
16693: PUSH
16694: LD_VAR 0 1
16698: PUSH
16699: LD_INT 12
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: LIST
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: LIST
16711: PUSH
16712: EMPTY
16713: LIST
16714: PPUSH
16715: CALL_OW 69
16719: PUSH
16720: LD_INT 2
16722: GREATER
16723: AND
16724: IFFALSE 16747
// weapon := [ us_radar , ar_radar ] [ nat ] ;
16726: LD_ADDR_VAR 0 18
16730: PUSH
16731: LD_INT 11
16733: PUSH
16734: LD_INT 30
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PUSH
16741: LD_VAR 0 12
16745: ARRAY
16746: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
16747: LD_VAR 0 18
16751: NOT
16752: PUSH
16753: LD_INT 40
16755: PPUSH
16756: LD_VAR 0 16
16760: PPUSH
16761: CALL_OW 321
16765: PUSH
16766: LD_INT 2
16768: EQUAL
16769: AND
16770: PUSH
16771: LD_INT 7
16773: PUSH
16774: LD_VAR 0 5
16778: IN
16779: PUSH
16780: LD_INT 28
16782: PUSH
16783: LD_VAR 0 5
16787: IN
16788: OR
16789: PUSH
16790: LD_INT 45
16792: PUSH
16793: LD_VAR 0 5
16797: IN
16798: OR
16799: AND
16800: IFFALSE 17054
// begin hex := GetHexInfo ( x , y ) ;
16802: LD_ADDR_VAR 0 4
16806: PUSH
16807: LD_VAR 0 10
16811: PPUSH
16812: LD_VAR 0 11
16816: PPUSH
16817: CALL_OW 546
16821: ST_TO_ADDR
// if hex [ 1 ] then
16822: LD_VAR 0 4
16826: PUSH
16827: LD_INT 1
16829: ARRAY
16830: IFFALSE 16834
// exit ;
16832: GO 17237
// height := hex [ 2 ] ;
16834: LD_ADDR_VAR 0 15
16838: PUSH
16839: LD_VAR 0 4
16843: PUSH
16844: LD_INT 2
16846: ARRAY
16847: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
16848: LD_ADDR_VAR 0 14
16852: PUSH
16853: LD_INT 0
16855: PUSH
16856: LD_INT 2
16858: PUSH
16859: LD_INT 3
16861: PUSH
16862: LD_INT 5
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: ST_TO_ADDR
// for i in tmp do
16871: LD_ADDR_VAR 0 8
16875: PUSH
16876: LD_VAR 0 14
16880: PUSH
16881: FOR_IN
16882: IFFALSE 17052
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
16884: LD_ADDR_VAR 0 9
16888: PUSH
16889: LD_VAR 0 10
16893: PPUSH
16894: LD_VAR 0 8
16898: PPUSH
16899: LD_INT 5
16901: PPUSH
16902: CALL_OW 272
16906: PUSH
16907: LD_VAR 0 11
16911: PPUSH
16912: LD_VAR 0 8
16916: PPUSH
16917: LD_INT 5
16919: PPUSH
16920: CALL_OW 273
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
16929: LD_VAR 0 9
16933: PUSH
16934: LD_INT 1
16936: ARRAY
16937: PPUSH
16938: LD_VAR 0 9
16942: PUSH
16943: LD_INT 2
16945: ARRAY
16946: PPUSH
16947: CALL_OW 488
16951: IFFALSE 17050
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
16953: LD_ADDR_VAR 0 4
16957: PUSH
16958: LD_VAR 0 9
16962: PUSH
16963: LD_INT 1
16965: ARRAY
16966: PPUSH
16967: LD_VAR 0 9
16971: PUSH
16972: LD_INT 2
16974: ARRAY
16975: PPUSH
16976: CALL_OW 546
16980: ST_TO_ADDR
// if hex [ 1 ] then
16981: LD_VAR 0 4
16985: PUSH
16986: LD_INT 1
16988: ARRAY
16989: IFFALSE 16993
// continue ;
16991: GO 16881
// h := hex [ 2 ] ;
16993: LD_ADDR_VAR 0 13
16997: PUSH
16998: LD_VAR 0 4
17002: PUSH
17003: LD_INT 2
17005: ARRAY
17006: ST_TO_ADDR
// if h + 7 < height then
17007: LD_VAR 0 13
17011: PUSH
17012: LD_INT 7
17014: PLUS
17015: PUSH
17016: LD_VAR 0 15
17020: LESS
17021: IFFALSE 17050
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
17023: LD_ADDR_VAR 0 18
17027: PUSH
17028: LD_INT 7
17030: PUSH
17031: LD_INT 28
17033: PUSH
17034: LD_INT 45
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: LIST
17041: PUSH
17042: LD_VAR 0 12
17046: ARRAY
17047: ST_TO_ADDR
// break ;
17048: GO 17052
// end ; end ; end ;
17050: GO 16881
17052: POP
17053: POP
// end ; if not weapon then
17054: LD_VAR 0 18
17058: NOT
17059: IFFALSE 17119
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
17061: LD_ADDR_VAR 0 5
17065: PUSH
17066: LD_VAR 0 5
17070: PUSH
17071: LD_INT 11
17073: PUSH
17074: LD_INT 30
17076: PUSH
17077: LD_INT 49
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: LIST
17084: DIFF
17085: ST_TO_ADDR
// if not list then
17086: LD_VAR 0 5
17090: NOT
17091: IFFALSE 17095
// exit ;
17093: GO 17237
// weapon := list [ rand ( 1 , list ) ] ;
17095: LD_ADDR_VAR 0 18
17099: PUSH
17100: LD_VAR 0 5
17104: PUSH
17105: LD_INT 1
17107: PPUSH
17108: LD_VAR 0 5
17112: PPUSH
17113: CALL_OW 12
17117: ARRAY
17118: ST_TO_ADDR
// end ; if weapon then
17119: LD_VAR 0 18
17123: IFFALSE 17237
// begin tmp := CostOfWeapon ( weapon ) ;
17125: LD_ADDR_VAR 0 14
17129: PUSH
17130: LD_VAR 0 18
17134: PPUSH
17135: CALL_OW 451
17139: ST_TO_ADDR
// j := GetBase ( tower ) ;
17140: LD_ADDR_VAR 0 9
17144: PUSH
17145: LD_VAR 0 1
17149: PPUSH
17150: CALL_OW 274
17154: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
17155: LD_VAR 0 9
17159: PPUSH
17160: LD_INT 1
17162: PPUSH
17163: CALL_OW 275
17167: PUSH
17168: LD_VAR 0 14
17172: PUSH
17173: LD_INT 1
17175: ARRAY
17176: GREATEREQUAL
17177: PUSH
17178: LD_VAR 0 9
17182: PPUSH
17183: LD_INT 2
17185: PPUSH
17186: CALL_OW 275
17190: PUSH
17191: LD_VAR 0 14
17195: PUSH
17196: LD_INT 2
17198: ARRAY
17199: GREATEREQUAL
17200: AND
17201: PUSH
17202: LD_VAR 0 9
17206: PPUSH
17207: LD_INT 3
17209: PPUSH
17210: CALL_OW 275
17214: PUSH
17215: LD_VAR 0 14
17219: PUSH
17220: LD_INT 3
17222: ARRAY
17223: GREATEREQUAL
17224: AND
17225: IFFALSE 17237
// result := weapon ;
17227: LD_ADDR_VAR 0 3
17231: PUSH
17232: LD_VAR 0 18
17236: ST_TO_ADDR
// end ; end ;
17237: LD_VAR 0 3
17241: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
17242: LD_INT 0
17244: PPUSH
17245: PPUSH
// result := true ;
17246: LD_ADDR_VAR 0 3
17250: PUSH
17251: LD_INT 1
17253: ST_TO_ADDR
// if array1 = array2 then
17254: LD_VAR 0 1
17258: PUSH
17259: LD_VAR 0 2
17263: EQUAL
17264: IFFALSE 17324
// begin for i = 1 to array1 do
17266: LD_ADDR_VAR 0 4
17270: PUSH
17271: DOUBLE
17272: LD_INT 1
17274: DEC
17275: ST_TO_ADDR
17276: LD_VAR 0 1
17280: PUSH
17281: FOR_TO
17282: IFFALSE 17320
// if array1 [ i ] <> array2 [ i ] then
17284: LD_VAR 0 1
17288: PUSH
17289: LD_VAR 0 4
17293: ARRAY
17294: PUSH
17295: LD_VAR 0 2
17299: PUSH
17300: LD_VAR 0 4
17304: ARRAY
17305: NONEQUAL
17306: IFFALSE 17318
// begin result := false ;
17308: LD_ADDR_VAR 0 3
17312: PUSH
17313: LD_INT 0
17315: ST_TO_ADDR
// break ;
17316: GO 17320
// end ;
17318: GO 17281
17320: POP
17321: POP
// end else
17322: GO 17332
// result := false ;
17324: LD_ADDR_VAR 0 3
17328: PUSH
17329: LD_INT 0
17331: ST_TO_ADDR
// end ;
17332: LD_VAR 0 3
17336: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
17337: LD_INT 0
17339: PPUSH
17340: PPUSH
// if not array1 or not array2 then
17341: LD_VAR 0 1
17345: NOT
17346: PUSH
17347: LD_VAR 0 2
17351: NOT
17352: OR
17353: IFFALSE 17357
// exit ;
17355: GO 17421
// result := true ;
17357: LD_ADDR_VAR 0 3
17361: PUSH
17362: LD_INT 1
17364: ST_TO_ADDR
// for i = 1 to array1 do
17365: LD_ADDR_VAR 0 4
17369: PUSH
17370: DOUBLE
17371: LD_INT 1
17373: DEC
17374: ST_TO_ADDR
17375: LD_VAR 0 1
17379: PUSH
17380: FOR_TO
17381: IFFALSE 17419
// if array1 [ i ] <> array2 [ i ] then
17383: LD_VAR 0 1
17387: PUSH
17388: LD_VAR 0 4
17392: ARRAY
17393: PUSH
17394: LD_VAR 0 2
17398: PUSH
17399: LD_VAR 0 4
17403: ARRAY
17404: NONEQUAL
17405: IFFALSE 17417
// begin result := false ;
17407: LD_ADDR_VAR 0 3
17411: PUSH
17412: LD_INT 0
17414: ST_TO_ADDR
// break ;
17415: GO 17419
// end ;
17417: GO 17380
17419: POP
17420: POP
// end ;
17421: LD_VAR 0 3
17425: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
17426: LD_INT 0
17428: PPUSH
17429: PPUSH
17430: PPUSH
// pom := GetBase ( fac ) ;
17431: LD_ADDR_VAR 0 5
17435: PUSH
17436: LD_VAR 0 1
17440: PPUSH
17441: CALL_OW 274
17445: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
17446: LD_ADDR_VAR 0 4
17450: PUSH
17451: LD_VAR 0 2
17455: PUSH
17456: LD_INT 1
17458: ARRAY
17459: PPUSH
17460: LD_VAR 0 2
17464: PUSH
17465: LD_INT 2
17467: ARRAY
17468: PPUSH
17469: LD_VAR 0 2
17473: PUSH
17474: LD_INT 3
17476: ARRAY
17477: PPUSH
17478: LD_VAR 0 2
17482: PUSH
17483: LD_INT 4
17485: ARRAY
17486: PPUSH
17487: CALL_OW 449
17491: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
17492: LD_ADDR_VAR 0 3
17496: PUSH
17497: LD_VAR 0 5
17501: PPUSH
17502: LD_INT 1
17504: PPUSH
17505: CALL_OW 275
17509: PUSH
17510: LD_VAR 0 4
17514: PUSH
17515: LD_INT 1
17517: ARRAY
17518: GREATEREQUAL
17519: PUSH
17520: LD_VAR 0 5
17524: PPUSH
17525: LD_INT 2
17527: PPUSH
17528: CALL_OW 275
17532: PUSH
17533: LD_VAR 0 4
17537: PUSH
17538: LD_INT 2
17540: ARRAY
17541: GREATEREQUAL
17542: AND
17543: PUSH
17544: LD_VAR 0 5
17548: PPUSH
17549: LD_INT 3
17551: PPUSH
17552: CALL_OW 275
17556: PUSH
17557: LD_VAR 0 4
17561: PUSH
17562: LD_INT 3
17564: ARRAY
17565: GREATEREQUAL
17566: AND
17567: ST_TO_ADDR
// end ;
17568: LD_VAR 0 3
17572: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
17573: LD_INT 0
17575: PPUSH
17576: PPUSH
17577: PPUSH
17578: PPUSH
// pom := GetBase ( building ) ;
17579: LD_ADDR_VAR 0 3
17583: PUSH
17584: LD_VAR 0 1
17588: PPUSH
17589: CALL_OW 274
17593: ST_TO_ADDR
// if not pom then
17594: LD_VAR 0 3
17598: NOT
17599: IFFALSE 17603
// exit ;
17601: GO 17773
// btype := GetBType ( building ) ;
17603: LD_ADDR_VAR 0 5
17607: PUSH
17608: LD_VAR 0 1
17612: PPUSH
17613: CALL_OW 266
17617: ST_TO_ADDR
// if btype = b_armoury then
17618: LD_VAR 0 5
17622: PUSH
17623: LD_INT 4
17625: EQUAL
17626: IFFALSE 17636
// btype := b_barracks ;
17628: LD_ADDR_VAR 0 5
17632: PUSH
17633: LD_INT 5
17635: ST_TO_ADDR
// if btype = b_depot then
17636: LD_VAR 0 5
17640: PUSH
17641: LD_INT 0
17643: EQUAL
17644: IFFALSE 17654
// btype := b_warehouse ;
17646: LD_ADDR_VAR 0 5
17650: PUSH
17651: LD_INT 1
17653: ST_TO_ADDR
// if btype = b_workshop then
17654: LD_VAR 0 5
17658: PUSH
17659: LD_INT 2
17661: EQUAL
17662: IFFALSE 17672
// btype := b_factory ;
17664: LD_ADDR_VAR 0 5
17668: PUSH
17669: LD_INT 3
17671: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
17672: LD_ADDR_VAR 0 4
17676: PUSH
17677: LD_VAR 0 5
17681: PPUSH
17682: LD_VAR 0 1
17686: PPUSH
17687: CALL_OW 248
17691: PPUSH
17692: CALL_OW 450
17696: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
17697: LD_ADDR_VAR 0 2
17701: PUSH
17702: LD_VAR 0 3
17706: PPUSH
17707: LD_INT 1
17709: PPUSH
17710: CALL_OW 275
17714: PUSH
17715: LD_VAR 0 4
17719: PUSH
17720: LD_INT 1
17722: ARRAY
17723: GREATEREQUAL
17724: PUSH
17725: LD_VAR 0 3
17729: PPUSH
17730: LD_INT 2
17732: PPUSH
17733: CALL_OW 275
17737: PUSH
17738: LD_VAR 0 4
17742: PUSH
17743: LD_INT 2
17745: ARRAY
17746: GREATEREQUAL
17747: AND
17748: PUSH
17749: LD_VAR 0 3
17753: PPUSH
17754: LD_INT 3
17756: PPUSH
17757: CALL_OW 275
17761: PUSH
17762: LD_VAR 0 4
17766: PUSH
17767: LD_INT 3
17769: ARRAY
17770: GREATEREQUAL
17771: AND
17772: ST_TO_ADDR
// end ;
17773: LD_VAR 0 2
17777: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
17778: LD_INT 0
17780: PPUSH
17781: PPUSH
17782: PPUSH
// pom := GetBase ( building ) ;
17783: LD_ADDR_VAR 0 4
17787: PUSH
17788: LD_VAR 0 1
17792: PPUSH
17793: CALL_OW 274
17797: ST_TO_ADDR
// if not pom then
17798: LD_VAR 0 4
17802: NOT
17803: IFFALSE 17807
// exit ;
17805: GO 17908
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
17807: LD_ADDR_VAR 0 5
17811: PUSH
17812: LD_VAR 0 2
17816: PPUSH
17817: LD_VAR 0 1
17821: PPUSH
17822: CALL_OW 248
17826: PPUSH
17827: CALL_OW 450
17831: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
17832: LD_ADDR_VAR 0 3
17836: PUSH
17837: LD_VAR 0 4
17841: PPUSH
17842: LD_INT 1
17844: PPUSH
17845: CALL_OW 275
17849: PUSH
17850: LD_VAR 0 5
17854: PUSH
17855: LD_INT 1
17857: ARRAY
17858: GREATEREQUAL
17859: PUSH
17860: LD_VAR 0 4
17864: PPUSH
17865: LD_INT 2
17867: PPUSH
17868: CALL_OW 275
17872: PUSH
17873: LD_VAR 0 5
17877: PUSH
17878: LD_INT 2
17880: ARRAY
17881: GREATEREQUAL
17882: AND
17883: PUSH
17884: LD_VAR 0 4
17888: PPUSH
17889: LD_INT 3
17891: PPUSH
17892: CALL_OW 275
17896: PUSH
17897: LD_VAR 0 5
17901: PUSH
17902: LD_INT 3
17904: ARRAY
17905: GREATEREQUAL
17906: AND
17907: ST_TO_ADDR
// end ;
17908: LD_VAR 0 3
17912: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
17913: LD_INT 0
17915: PPUSH
17916: PPUSH
17917: PPUSH
17918: PPUSH
17919: PPUSH
17920: PPUSH
17921: PPUSH
17922: PPUSH
17923: PPUSH
17924: PPUSH
17925: PPUSH
// result := false ;
17926: LD_ADDR_VAR 0 8
17930: PUSH
17931: LD_INT 0
17933: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
17934: LD_VAR 0 5
17938: NOT
17939: PUSH
17940: LD_VAR 0 1
17944: NOT
17945: OR
17946: PUSH
17947: LD_VAR 0 2
17951: NOT
17952: OR
17953: PUSH
17954: LD_VAR 0 3
17958: NOT
17959: OR
17960: IFFALSE 17964
// exit ;
17962: GO 18778
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
17964: LD_ADDR_VAR 0 14
17968: PUSH
17969: LD_VAR 0 1
17973: PPUSH
17974: LD_VAR 0 2
17978: PPUSH
17979: LD_VAR 0 3
17983: PPUSH
17984: LD_VAR 0 4
17988: PPUSH
17989: LD_VAR 0 5
17993: PUSH
17994: LD_INT 1
17996: ARRAY
17997: PPUSH
17998: CALL_OW 248
18002: PPUSH
18003: LD_INT 0
18005: PPUSH
18006: CALL 19615 0 6
18010: ST_TO_ADDR
// if not hexes then
18011: LD_VAR 0 14
18015: NOT
18016: IFFALSE 18020
// exit ;
18018: GO 18778
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18020: LD_ADDR_VAR 0 17
18024: PUSH
18025: LD_VAR 0 5
18029: PPUSH
18030: LD_INT 22
18032: PUSH
18033: LD_VAR 0 13
18037: PPUSH
18038: CALL_OW 255
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 2
18049: PUSH
18050: LD_INT 30
18052: PUSH
18053: LD_INT 0
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 30
18062: PUSH
18063: LD_INT 1
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: LIST
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: PPUSH
18079: CALL_OW 72
18083: ST_TO_ADDR
// for i = 1 to hexes do
18084: LD_ADDR_VAR 0 9
18088: PUSH
18089: DOUBLE
18090: LD_INT 1
18092: DEC
18093: ST_TO_ADDR
18094: LD_VAR 0 14
18098: PUSH
18099: FOR_TO
18100: IFFALSE 18776
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18102: LD_ADDR_VAR 0 13
18106: PUSH
18107: LD_VAR 0 14
18111: PUSH
18112: LD_VAR 0 9
18116: ARRAY
18117: PUSH
18118: LD_INT 1
18120: ARRAY
18121: PPUSH
18122: LD_VAR 0 14
18126: PUSH
18127: LD_VAR 0 9
18131: ARRAY
18132: PUSH
18133: LD_INT 2
18135: ARRAY
18136: PPUSH
18137: CALL_OW 428
18141: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
18142: LD_VAR 0 14
18146: PUSH
18147: LD_VAR 0 9
18151: ARRAY
18152: PUSH
18153: LD_INT 1
18155: ARRAY
18156: PPUSH
18157: LD_VAR 0 14
18161: PUSH
18162: LD_VAR 0 9
18166: ARRAY
18167: PUSH
18168: LD_INT 2
18170: ARRAY
18171: PPUSH
18172: CALL_OW 351
18176: PUSH
18177: LD_VAR 0 14
18181: PUSH
18182: LD_VAR 0 9
18186: ARRAY
18187: PUSH
18188: LD_INT 1
18190: ARRAY
18191: PPUSH
18192: LD_VAR 0 14
18196: PUSH
18197: LD_VAR 0 9
18201: ARRAY
18202: PUSH
18203: LD_INT 2
18205: ARRAY
18206: PPUSH
18207: CALL_OW 488
18211: NOT
18212: OR
18213: PUSH
18214: LD_VAR 0 13
18218: PPUSH
18219: CALL_OW 247
18223: PUSH
18224: LD_INT 3
18226: EQUAL
18227: OR
18228: IFFALSE 18234
// exit ;
18230: POP
18231: POP
18232: GO 18778
// if not tmp then
18234: LD_VAR 0 13
18238: NOT
18239: IFFALSE 18243
// continue ;
18241: GO 18099
// result := true ;
18243: LD_ADDR_VAR 0 8
18247: PUSH
18248: LD_INT 1
18250: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
18251: LD_VAR 0 6
18255: PUSH
18256: LD_VAR 0 13
18260: PPUSH
18261: CALL_OW 247
18265: PUSH
18266: LD_INT 2
18268: EQUAL
18269: AND
18270: PUSH
18271: LD_VAR 0 13
18275: PPUSH
18276: CALL_OW 263
18280: PUSH
18281: LD_INT 1
18283: EQUAL
18284: AND
18285: IFFALSE 18449
// begin if IsDrivenBy ( tmp ) then
18287: LD_VAR 0 13
18291: PPUSH
18292: CALL_OW 311
18296: IFFALSE 18300
// continue ;
18298: GO 18099
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
18300: LD_VAR 0 6
18304: PPUSH
18305: LD_INT 3
18307: PUSH
18308: LD_INT 60
18310: PUSH
18311: EMPTY
18312: LIST
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 3
18320: PUSH
18321: LD_INT 55
18323: PUSH
18324: EMPTY
18325: LIST
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PPUSH
18335: CALL_OW 72
18339: IFFALSE 18447
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
18341: LD_ADDR_VAR 0 18
18345: PUSH
18346: LD_VAR 0 6
18350: PPUSH
18351: LD_INT 3
18353: PUSH
18354: LD_INT 60
18356: PUSH
18357: EMPTY
18358: LIST
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: LD_INT 3
18366: PUSH
18367: LD_INT 55
18369: PUSH
18370: EMPTY
18371: LIST
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PPUSH
18381: CALL_OW 72
18385: PUSH
18386: LD_INT 1
18388: ARRAY
18389: ST_TO_ADDR
// if IsInUnit ( driver ) then
18390: LD_VAR 0 18
18394: PPUSH
18395: CALL_OW 310
18399: IFFALSE 18410
// ComExit ( driver ) ;
18401: LD_VAR 0 18
18405: PPUSH
18406: CALL 42799 0 1
// AddComEnterUnit ( driver , tmp ) ;
18410: LD_VAR 0 18
18414: PPUSH
18415: LD_VAR 0 13
18419: PPUSH
18420: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
18424: LD_VAR 0 18
18428: PPUSH
18429: LD_VAR 0 7
18433: PPUSH
18434: CALL_OW 173
// AddComExitVehicle ( driver ) ;
18438: LD_VAR 0 18
18442: PPUSH
18443: CALL_OW 181
// end ; continue ;
18447: GO 18099
// end ; if not cleaners or not tmp in cleaners then
18449: LD_VAR 0 6
18453: NOT
18454: PUSH
18455: LD_VAR 0 13
18459: PUSH
18460: LD_VAR 0 6
18464: IN
18465: NOT
18466: OR
18467: IFFALSE 18774
// begin if dep then
18469: LD_VAR 0 17
18473: IFFALSE 18609
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
18475: LD_ADDR_VAR 0 16
18479: PUSH
18480: LD_VAR 0 17
18484: PUSH
18485: LD_INT 1
18487: ARRAY
18488: PPUSH
18489: CALL_OW 250
18493: PPUSH
18494: LD_VAR 0 17
18498: PUSH
18499: LD_INT 1
18501: ARRAY
18502: PPUSH
18503: CALL_OW 254
18507: PPUSH
18508: LD_INT 5
18510: PPUSH
18511: CALL_OW 272
18515: PUSH
18516: LD_VAR 0 17
18520: PUSH
18521: LD_INT 1
18523: ARRAY
18524: PPUSH
18525: CALL_OW 251
18529: PPUSH
18530: LD_VAR 0 17
18534: PUSH
18535: LD_INT 1
18537: ARRAY
18538: PPUSH
18539: CALL_OW 254
18543: PPUSH
18544: LD_INT 5
18546: PPUSH
18547: CALL_OW 273
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
18556: LD_VAR 0 16
18560: PUSH
18561: LD_INT 1
18563: ARRAY
18564: PPUSH
18565: LD_VAR 0 16
18569: PUSH
18570: LD_INT 2
18572: ARRAY
18573: PPUSH
18574: CALL_OW 488
18578: IFFALSE 18609
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
18580: LD_VAR 0 13
18584: PPUSH
18585: LD_VAR 0 16
18589: PUSH
18590: LD_INT 1
18592: ARRAY
18593: PPUSH
18594: LD_VAR 0 16
18598: PUSH
18599: LD_INT 2
18601: ARRAY
18602: PPUSH
18603: CALL_OW 111
// continue ;
18607: GO 18099
// end ; end ; r := GetDir ( tmp ) ;
18609: LD_ADDR_VAR 0 15
18613: PUSH
18614: LD_VAR 0 13
18618: PPUSH
18619: CALL_OW 254
18623: ST_TO_ADDR
// if r = 5 then
18624: LD_VAR 0 15
18628: PUSH
18629: LD_INT 5
18631: EQUAL
18632: IFFALSE 18642
// r := 0 ;
18634: LD_ADDR_VAR 0 15
18638: PUSH
18639: LD_INT 0
18641: ST_TO_ADDR
// for j = r to 5 do
18642: LD_ADDR_VAR 0 10
18646: PUSH
18647: DOUBLE
18648: LD_VAR 0 15
18652: DEC
18653: ST_TO_ADDR
18654: LD_INT 5
18656: PUSH
18657: FOR_TO
18658: IFFALSE 18772
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
18660: LD_ADDR_VAR 0 11
18664: PUSH
18665: LD_VAR 0 13
18669: PPUSH
18670: CALL_OW 250
18674: PPUSH
18675: LD_VAR 0 10
18679: PPUSH
18680: LD_INT 2
18682: PPUSH
18683: CALL_OW 272
18687: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
18688: LD_ADDR_VAR 0 12
18692: PUSH
18693: LD_VAR 0 13
18697: PPUSH
18698: CALL_OW 251
18702: PPUSH
18703: LD_VAR 0 10
18707: PPUSH
18708: LD_INT 2
18710: PPUSH
18711: CALL_OW 273
18715: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
18716: LD_VAR 0 11
18720: PPUSH
18721: LD_VAR 0 12
18725: PPUSH
18726: CALL_OW 488
18730: PUSH
18731: LD_VAR 0 11
18735: PPUSH
18736: LD_VAR 0 12
18740: PPUSH
18741: CALL_OW 428
18745: NOT
18746: AND
18747: IFFALSE 18770
// begin ComMoveXY ( tmp , _x , _y ) ;
18749: LD_VAR 0 13
18753: PPUSH
18754: LD_VAR 0 11
18758: PPUSH
18759: LD_VAR 0 12
18763: PPUSH
18764: CALL_OW 111
// break ;
18768: GO 18772
// end ; end ;
18770: GO 18657
18772: POP
18773: POP
// end ; end ;
18774: GO 18099
18776: POP
18777: POP
// end ;
18778: LD_VAR 0 8
18782: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
18783: LD_INT 0
18785: PPUSH
18786: PPUSH
18787: PPUSH
18788: PPUSH
18789: PPUSH
18790: PPUSH
18791: PPUSH
18792: PPUSH
18793: PPUSH
18794: PPUSH
// result := false ;
18795: LD_ADDR_VAR 0 6
18799: PUSH
18800: LD_INT 0
18802: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
18803: LD_VAR 0 1
18807: NOT
18808: PUSH
18809: LD_VAR 0 1
18813: PPUSH
18814: CALL_OW 266
18818: PUSH
18819: LD_INT 0
18821: PUSH
18822: LD_INT 1
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: IN
18829: NOT
18830: OR
18831: PUSH
18832: LD_VAR 0 2
18836: NOT
18837: OR
18838: PUSH
18839: LD_VAR 0 5
18843: PUSH
18844: LD_INT 0
18846: PUSH
18847: LD_INT 1
18849: PUSH
18850: LD_INT 2
18852: PUSH
18853: LD_INT 3
18855: PUSH
18856: LD_INT 4
18858: PUSH
18859: LD_INT 5
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: IN
18870: NOT
18871: OR
18872: PUSH
18873: LD_VAR 0 3
18877: PPUSH
18878: LD_VAR 0 4
18882: PPUSH
18883: CALL_OW 488
18887: NOT
18888: OR
18889: IFFALSE 18893
// exit ;
18891: GO 19610
// pom := GetBase ( depot ) ;
18893: LD_ADDR_VAR 0 10
18897: PUSH
18898: LD_VAR 0 1
18902: PPUSH
18903: CALL_OW 274
18907: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
18908: LD_ADDR_VAR 0 11
18912: PUSH
18913: LD_VAR 0 2
18917: PPUSH
18918: LD_VAR 0 1
18922: PPUSH
18923: CALL_OW 248
18927: PPUSH
18928: CALL_OW 450
18932: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
18933: LD_VAR 0 10
18937: PPUSH
18938: LD_INT 1
18940: PPUSH
18941: CALL_OW 275
18945: PUSH
18946: LD_VAR 0 11
18950: PUSH
18951: LD_INT 1
18953: ARRAY
18954: GREATEREQUAL
18955: PUSH
18956: LD_VAR 0 10
18960: PPUSH
18961: LD_INT 2
18963: PPUSH
18964: CALL_OW 275
18968: PUSH
18969: LD_VAR 0 11
18973: PUSH
18974: LD_INT 2
18976: ARRAY
18977: GREATEREQUAL
18978: AND
18979: PUSH
18980: LD_VAR 0 10
18984: PPUSH
18985: LD_INT 3
18987: PPUSH
18988: CALL_OW 275
18992: PUSH
18993: LD_VAR 0 11
18997: PUSH
18998: LD_INT 3
19000: ARRAY
19001: GREATEREQUAL
19002: AND
19003: NOT
19004: IFFALSE 19008
// exit ;
19006: GO 19610
// if GetBType ( depot ) = b_depot then
19008: LD_VAR 0 1
19012: PPUSH
19013: CALL_OW 266
19017: PUSH
19018: LD_INT 0
19020: EQUAL
19021: IFFALSE 19033
// dist := 28 else
19023: LD_ADDR_VAR 0 14
19027: PUSH
19028: LD_INT 28
19030: ST_TO_ADDR
19031: GO 19041
// dist := 36 ;
19033: LD_ADDR_VAR 0 14
19037: PUSH
19038: LD_INT 36
19040: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
19041: LD_VAR 0 1
19045: PPUSH
19046: LD_VAR 0 3
19050: PPUSH
19051: LD_VAR 0 4
19055: PPUSH
19056: CALL_OW 297
19060: PUSH
19061: LD_VAR 0 14
19065: GREATER
19066: IFFALSE 19070
// exit ;
19068: GO 19610
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
19070: LD_ADDR_VAR 0 12
19074: PUSH
19075: LD_VAR 0 2
19079: PPUSH
19080: LD_VAR 0 3
19084: PPUSH
19085: LD_VAR 0 4
19089: PPUSH
19090: LD_VAR 0 5
19094: PPUSH
19095: LD_VAR 0 1
19099: PPUSH
19100: CALL_OW 248
19104: PPUSH
19105: LD_INT 0
19107: PPUSH
19108: CALL 19615 0 6
19112: ST_TO_ADDR
// if not hexes then
19113: LD_VAR 0 12
19117: NOT
19118: IFFALSE 19122
// exit ;
19120: GO 19610
// hex := GetHexInfo ( x , y ) ;
19122: LD_ADDR_VAR 0 15
19126: PUSH
19127: LD_VAR 0 3
19131: PPUSH
19132: LD_VAR 0 4
19136: PPUSH
19137: CALL_OW 546
19141: ST_TO_ADDR
// if hex [ 1 ] then
19142: LD_VAR 0 15
19146: PUSH
19147: LD_INT 1
19149: ARRAY
19150: IFFALSE 19154
// exit ;
19152: GO 19610
// height := hex [ 2 ] ;
19154: LD_ADDR_VAR 0 13
19158: PUSH
19159: LD_VAR 0 15
19163: PUSH
19164: LD_INT 2
19166: ARRAY
19167: ST_TO_ADDR
// for i = 1 to hexes do
19168: LD_ADDR_VAR 0 7
19172: PUSH
19173: DOUBLE
19174: LD_INT 1
19176: DEC
19177: ST_TO_ADDR
19178: LD_VAR 0 12
19182: PUSH
19183: FOR_TO
19184: IFFALSE 19514
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
19186: LD_VAR 0 12
19190: PUSH
19191: LD_VAR 0 7
19195: ARRAY
19196: PUSH
19197: LD_INT 1
19199: ARRAY
19200: PPUSH
19201: LD_VAR 0 12
19205: PUSH
19206: LD_VAR 0 7
19210: ARRAY
19211: PUSH
19212: LD_INT 2
19214: ARRAY
19215: PPUSH
19216: CALL_OW 488
19220: NOT
19221: PUSH
19222: LD_VAR 0 12
19226: PUSH
19227: LD_VAR 0 7
19231: ARRAY
19232: PUSH
19233: LD_INT 1
19235: ARRAY
19236: PPUSH
19237: LD_VAR 0 12
19241: PUSH
19242: LD_VAR 0 7
19246: ARRAY
19247: PUSH
19248: LD_INT 2
19250: ARRAY
19251: PPUSH
19252: CALL_OW 428
19256: PUSH
19257: LD_INT 0
19259: GREATER
19260: OR
19261: PUSH
19262: LD_VAR 0 12
19266: PUSH
19267: LD_VAR 0 7
19271: ARRAY
19272: PUSH
19273: LD_INT 1
19275: ARRAY
19276: PPUSH
19277: LD_VAR 0 12
19281: PUSH
19282: LD_VAR 0 7
19286: ARRAY
19287: PUSH
19288: LD_INT 2
19290: ARRAY
19291: PPUSH
19292: CALL_OW 351
19296: OR
19297: IFFALSE 19303
// exit ;
19299: POP
19300: POP
19301: GO 19610
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
19303: LD_ADDR_VAR 0 8
19307: PUSH
19308: LD_VAR 0 12
19312: PUSH
19313: LD_VAR 0 7
19317: ARRAY
19318: PUSH
19319: LD_INT 1
19321: ARRAY
19322: PPUSH
19323: LD_VAR 0 12
19327: PUSH
19328: LD_VAR 0 7
19332: ARRAY
19333: PUSH
19334: LD_INT 2
19336: ARRAY
19337: PPUSH
19338: CALL_OW 546
19342: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
19343: LD_VAR 0 8
19347: PUSH
19348: LD_INT 1
19350: ARRAY
19351: PUSH
19352: LD_VAR 0 8
19356: PUSH
19357: LD_INT 2
19359: ARRAY
19360: PUSH
19361: LD_VAR 0 13
19365: PUSH
19366: LD_INT 2
19368: PLUS
19369: GREATER
19370: OR
19371: PUSH
19372: LD_VAR 0 8
19376: PUSH
19377: LD_INT 2
19379: ARRAY
19380: PUSH
19381: LD_VAR 0 13
19385: PUSH
19386: LD_INT 2
19388: MINUS
19389: LESS
19390: OR
19391: PUSH
19392: LD_VAR 0 8
19396: PUSH
19397: LD_INT 3
19399: ARRAY
19400: PUSH
19401: LD_INT 0
19403: PUSH
19404: LD_INT 8
19406: PUSH
19407: LD_INT 9
19409: PUSH
19410: LD_INT 10
19412: PUSH
19413: LD_INT 11
19415: PUSH
19416: LD_INT 12
19418: PUSH
19419: LD_INT 13
19421: PUSH
19422: LD_INT 16
19424: PUSH
19425: LD_INT 17
19427: PUSH
19428: LD_INT 18
19430: PUSH
19431: LD_INT 19
19433: PUSH
19434: LD_INT 20
19436: PUSH
19437: LD_INT 21
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: IN
19455: NOT
19456: OR
19457: PUSH
19458: LD_VAR 0 8
19462: PUSH
19463: LD_INT 5
19465: ARRAY
19466: NOT
19467: OR
19468: PUSH
19469: LD_VAR 0 8
19473: PUSH
19474: LD_INT 6
19476: ARRAY
19477: PUSH
19478: LD_INT 1
19480: PUSH
19481: LD_INT 2
19483: PUSH
19484: LD_INT 7
19486: PUSH
19487: LD_INT 9
19489: PUSH
19490: LD_INT 10
19492: PUSH
19493: LD_INT 11
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: IN
19504: NOT
19505: OR
19506: IFFALSE 19512
// exit ;
19508: POP
19509: POP
19510: GO 19610
// end ;
19512: GO 19183
19514: POP
19515: POP
// side := GetSide ( depot ) ;
19516: LD_ADDR_VAR 0 9
19520: PUSH
19521: LD_VAR 0 1
19525: PPUSH
19526: CALL_OW 255
19530: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
19531: LD_VAR 0 9
19535: PPUSH
19536: LD_VAR 0 3
19540: PPUSH
19541: LD_VAR 0 4
19545: PPUSH
19546: LD_INT 20
19548: PPUSH
19549: CALL 11961 0 4
19553: PUSH
19554: LD_INT 4
19556: ARRAY
19557: IFFALSE 19561
// exit ;
19559: GO 19610
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
19561: LD_VAR 0 2
19565: PUSH
19566: LD_INT 29
19568: PUSH
19569: LD_INT 30
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: IN
19576: PUSH
19577: LD_VAR 0 3
19581: PPUSH
19582: LD_VAR 0 4
19586: PPUSH
19587: LD_VAR 0 9
19591: PPUSH
19592: CALL_OW 440
19596: NOT
19597: AND
19598: IFFALSE 19602
// exit ;
19600: GO 19610
// result := true ;
19602: LD_ADDR_VAR 0 6
19606: PUSH
19607: LD_INT 1
19609: ST_TO_ADDR
// end ;
19610: LD_VAR 0 6
19614: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
19615: LD_INT 0
19617: PPUSH
19618: PPUSH
19619: PPUSH
19620: PPUSH
19621: PPUSH
19622: PPUSH
19623: PPUSH
19624: PPUSH
19625: PPUSH
19626: PPUSH
19627: PPUSH
19628: PPUSH
19629: PPUSH
19630: PPUSH
19631: PPUSH
19632: PPUSH
19633: PPUSH
19634: PPUSH
19635: PPUSH
19636: PPUSH
19637: PPUSH
19638: PPUSH
19639: PPUSH
19640: PPUSH
19641: PPUSH
19642: PPUSH
19643: PPUSH
19644: PPUSH
19645: PPUSH
19646: PPUSH
19647: PPUSH
19648: PPUSH
19649: PPUSH
19650: PPUSH
19651: PPUSH
19652: PPUSH
19653: PPUSH
19654: PPUSH
19655: PPUSH
19656: PPUSH
19657: PPUSH
19658: PPUSH
19659: PPUSH
19660: PPUSH
19661: PPUSH
19662: PPUSH
19663: PPUSH
19664: PPUSH
19665: PPUSH
19666: PPUSH
19667: PPUSH
19668: PPUSH
19669: PPUSH
19670: PPUSH
19671: PPUSH
19672: PPUSH
19673: PPUSH
19674: PPUSH
// result = [ ] ;
19675: LD_ADDR_VAR 0 7
19679: PUSH
19680: EMPTY
19681: ST_TO_ADDR
// temp_list = [ ] ;
19682: LD_ADDR_VAR 0 9
19686: PUSH
19687: EMPTY
19688: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
19689: LD_VAR 0 4
19693: PUSH
19694: LD_INT 0
19696: PUSH
19697: LD_INT 1
19699: PUSH
19700: LD_INT 2
19702: PUSH
19703: LD_INT 3
19705: PUSH
19706: LD_INT 4
19708: PUSH
19709: LD_INT 5
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: IN
19720: NOT
19721: PUSH
19722: LD_VAR 0 1
19726: PUSH
19727: LD_INT 0
19729: PUSH
19730: LD_INT 1
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: IN
19737: PUSH
19738: LD_VAR 0 5
19742: PUSH
19743: LD_INT 1
19745: PUSH
19746: LD_INT 2
19748: PUSH
19749: LD_INT 3
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: LIST
19756: IN
19757: NOT
19758: AND
19759: OR
19760: IFFALSE 19764
// exit ;
19762: GO 38155
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
19764: LD_VAR 0 1
19768: PUSH
19769: LD_INT 6
19771: PUSH
19772: LD_INT 7
19774: PUSH
19775: LD_INT 8
19777: PUSH
19778: LD_INT 13
19780: PUSH
19781: LD_INT 12
19783: PUSH
19784: LD_INT 15
19786: PUSH
19787: LD_INT 11
19789: PUSH
19790: LD_INT 14
19792: PUSH
19793: LD_INT 10
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: IN
19807: IFFALSE 19817
// btype = b_lab ;
19809: LD_ADDR_VAR 0 1
19813: PUSH
19814: LD_INT 6
19816: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
19817: LD_VAR 0 6
19821: PUSH
19822: LD_INT 0
19824: PUSH
19825: LD_INT 1
19827: PUSH
19828: LD_INT 2
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: LIST
19835: IN
19836: NOT
19837: PUSH
19838: LD_VAR 0 1
19842: PUSH
19843: LD_INT 0
19845: PUSH
19846: LD_INT 1
19848: PUSH
19849: LD_INT 2
19851: PUSH
19852: LD_INT 3
19854: PUSH
19855: LD_INT 6
19857: PUSH
19858: LD_INT 36
19860: PUSH
19861: LD_INT 4
19863: PUSH
19864: LD_INT 5
19866: PUSH
19867: LD_INT 31
19869: PUSH
19870: LD_INT 32
19872: PUSH
19873: LD_INT 33
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: IN
19889: NOT
19890: PUSH
19891: LD_VAR 0 6
19895: PUSH
19896: LD_INT 1
19898: EQUAL
19899: AND
19900: OR
19901: PUSH
19902: LD_VAR 0 1
19906: PUSH
19907: LD_INT 2
19909: PUSH
19910: LD_INT 3
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: IN
19917: NOT
19918: PUSH
19919: LD_VAR 0 6
19923: PUSH
19924: LD_INT 2
19926: EQUAL
19927: AND
19928: OR
19929: IFFALSE 19939
// mode = 0 ;
19931: LD_ADDR_VAR 0 6
19935: PUSH
19936: LD_INT 0
19938: ST_TO_ADDR
// case mode of 0 :
19939: LD_VAR 0 6
19943: PUSH
19944: LD_INT 0
19946: DOUBLE
19947: EQUAL
19948: IFTRUE 19952
19950: GO 31405
19952: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
19953: LD_ADDR_VAR 0 11
19957: PUSH
19958: LD_INT 0
19960: PUSH
19961: LD_INT 0
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 0
19970: PUSH
19971: LD_INT 1
19973: NEG
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PUSH
19979: LD_INT 1
19981: PUSH
19982: LD_INT 0
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: LD_INT 1
19991: PUSH
19992: LD_INT 1
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: PUSH
19999: LD_INT 0
20001: PUSH
20002: LD_INT 1
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: PUSH
20009: LD_INT 1
20011: NEG
20012: PUSH
20013: LD_INT 0
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 1
20022: NEG
20023: PUSH
20024: LD_INT 1
20026: NEG
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 1
20034: NEG
20035: PUSH
20036: LD_INT 2
20038: NEG
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PUSH
20044: LD_INT 0
20046: PUSH
20047: LD_INT 2
20049: NEG
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 1
20057: PUSH
20058: LD_INT 1
20060: NEG
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PUSH
20066: LD_INT 1
20068: PUSH
20069: LD_INT 2
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 0
20078: PUSH
20079: LD_INT 2
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 1
20088: NEG
20089: PUSH
20090: LD_INT 1
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 1
20099: PUSH
20100: LD_INT 3
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 0
20109: PUSH
20110: LD_INT 3
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 1
20119: NEG
20120: PUSH
20121: LD_INT 2
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
20146: LD_ADDR_VAR 0 12
20150: PUSH
20151: LD_INT 0
20153: PUSH
20154: LD_INT 0
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 0
20163: PUSH
20164: LD_INT 1
20166: NEG
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: PUSH
20172: LD_INT 1
20174: PUSH
20175: LD_INT 0
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: LD_INT 1
20184: PUSH
20185: LD_INT 1
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 0
20194: PUSH
20195: LD_INT 1
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PUSH
20202: LD_INT 1
20204: NEG
20205: PUSH
20206: LD_INT 0
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 1
20215: NEG
20216: PUSH
20217: LD_INT 1
20219: NEG
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 1
20227: PUSH
20228: LD_INT 1
20230: NEG
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: LD_INT 2
20238: PUSH
20239: LD_INT 0
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: PUSH
20246: LD_INT 2
20248: PUSH
20249: LD_INT 1
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PUSH
20256: LD_INT 1
20258: NEG
20259: PUSH
20260: LD_INT 1
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PUSH
20267: LD_INT 2
20269: NEG
20270: PUSH
20271: LD_INT 0
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 2
20280: NEG
20281: PUSH
20282: LD_INT 1
20284: NEG
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: LD_INT 2
20292: NEG
20293: PUSH
20294: LD_INT 1
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: LD_INT 3
20303: NEG
20304: PUSH
20305: LD_INT 0
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: LD_INT 3
20314: NEG
20315: PUSH
20316: LD_INT 1
20318: NEG
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
20342: LD_ADDR_VAR 0 13
20346: PUSH
20347: LD_INT 0
20349: PUSH
20350: LD_INT 0
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 0
20359: PUSH
20360: LD_INT 1
20362: NEG
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 1
20370: PUSH
20371: LD_INT 0
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PUSH
20378: LD_INT 1
20380: PUSH
20381: LD_INT 1
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PUSH
20388: LD_INT 0
20390: PUSH
20391: LD_INT 1
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 1
20400: NEG
20401: PUSH
20402: LD_INT 0
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: LD_INT 1
20411: NEG
20412: PUSH
20413: LD_INT 1
20415: NEG
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 1
20423: NEG
20424: PUSH
20425: LD_INT 2
20427: NEG
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 2
20435: PUSH
20436: LD_INT 1
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 2
20445: PUSH
20446: LD_INT 2
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 1
20455: PUSH
20456: LD_INT 2
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 2
20465: NEG
20466: PUSH
20467: LD_INT 1
20469: NEG
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 2
20477: NEG
20478: PUSH
20479: LD_INT 2
20481: NEG
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: LD_INT 2
20489: NEG
20490: PUSH
20491: LD_INT 3
20493: NEG
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: PUSH
20499: LD_INT 3
20501: NEG
20502: PUSH
20503: LD_INT 2
20505: NEG
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PUSH
20511: LD_INT 3
20513: NEG
20514: PUSH
20515: LD_INT 3
20517: NEG
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
20541: LD_ADDR_VAR 0 14
20545: PUSH
20546: LD_INT 0
20548: PUSH
20549: LD_INT 0
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 0
20558: PUSH
20559: LD_INT 1
20561: NEG
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 1
20569: PUSH
20570: LD_INT 0
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 1
20579: PUSH
20580: LD_INT 1
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 0
20589: PUSH
20590: LD_INT 1
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: LD_INT 1
20599: NEG
20600: PUSH
20601: LD_INT 0
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: LD_INT 1
20610: NEG
20611: PUSH
20612: LD_INT 1
20614: NEG
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 1
20622: NEG
20623: PUSH
20624: LD_INT 2
20626: NEG
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 0
20634: PUSH
20635: LD_INT 2
20637: NEG
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: LD_INT 1
20645: PUSH
20646: LD_INT 1
20648: NEG
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: PUSH
20654: LD_INT 1
20656: PUSH
20657: LD_INT 2
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 0
20666: PUSH
20667: LD_INT 2
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: PUSH
20674: LD_INT 1
20676: NEG
20677: PUSH
20678: LD_INT 1
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PUSH
20685: LD_INT 1
20687: NEG
20688: PUSH
20689: LD_INT 3
20691: NEG
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: PUSH
20697: LD_INT 0
20699: PUSH
20700: LD_INT 3
20702: NEG
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 1
20710: PUSH
20711: LD_INT 2
20713: NEG
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
20737: LD_ADDR_VAR 0 15
20741: PUSH
20742: LD_INT 0
20744: PUSH
20745: LD_INT 0
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PUSH
20752: LD_INT 0
20754: PUSH
20755: LD_INT 1
20757: NEG
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 1
20765: PUSH
20766: LD_INT 0
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PUSH
20773: LD_INT 1
20775: PUSH
20776: LD_INT 1
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 0
20785: PUSH
20786: LD_INT 1
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_INT 1
20795: NEG
20796: PUSH
20797: LD_INT 0
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 1
20806: NEG
20807: PUSH
20808: LD_INT 1
20810: NEG
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 1
20818: PUSH
20819: LD_INT 1
20821: NEG
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 2
20829: PUSH
20830: LD_INT 0
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 2
20839: PUSH
20840: LD_INT 1
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 1
20849: NEG
20850: PUSH
20851: LD_INT 1
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PUSH
20858: LD_INT 2
20860: NEG
20861: PUSH
20862: LD_INT 0
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: LD_INT 2
20871: NEG
20872: PUSH
20873: LD_INT 1
20875: NEG
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 2
20883: PUSH
20884: LD_INT 1
20886: NEG
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 3
20894: PUSH
20895: LD_INT 0
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: LD_INT 3
20904: PUSH
20905: LD_INT 1
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
20930: LD_ADDR_VAR 0 16
20934: PUSH
20935: LD_INT 0
20937: PUSH
20938: LD_INT 0
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: LD_INT 0
20947: PUSH
20948: LD_INT 1
20950: NEG
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: PUSH
20956: LD_INT 1
20958: PUSH
20959: LD_INT 0
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: PUSH
20966: LD_INT 1
20968: PUSH
20969: LD_INT 1
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: LD_INT 0
20978: PUSH
20979: LD_INT 1
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 1
20988: NEG
20989: PUSH
20990: LD_INT 0
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 1
20999: NEG
21000: PUSH
21001: LD_INT 1
21003: NEG
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: LD_INT 1
21011: NEG
21012: PUSH
21013: LD_INT 2
21015: NEG
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: LD_INT 2
21023: PUSH
21024: LD_INT 1
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 2
21033: PUSH
21034: LD_INT 2
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 1
21043: PUSH
21044: LD_INT 2
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 2
21053: NEG
21054: PUSH
21055: LD_INT 1
21057: NEG
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 2
21065: NEG
21066: PUSH
21067: LD_INT 2
21069: NEG
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: LD_INT 3
21077: PUSH
21078: LD_INT 2
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PUSH
21085: LD_INT 3
21087: PUSH
21088: LD_INT 3
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 2
21097: PUSH
21098: LD_INT 3
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21123: LD_ADDR_VAR 0 17
21127: PUSH
21128: LD_INT 0
21130: PUSH
21131: LD_INT 0
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 0
21140: PUSH
21141: LD_INT 1
21143: NEG
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PUSH
21149: LD_INT 1
21151: PUSH
21152: LD_INT 0
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: PUSH
21159: LD_INT 1
21161: PUSH
21162: LD_INT 1
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PUSH
21169: LD_INT 0
21171: PUSH
21172: LD_INT 1
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: LD_INT 1
21181: NEG
21182: PUSH
21183: LD_INT 0
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 1
21192: NEG
21193: PUSH
21194: LD_INT 1
21196: NEG
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 1
21204: NEG
21205: PUSH
21206: LD_INT 2
21208: NEG
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: LD_INT 0
21216: PUSH
21217: LD_INT 2
21219: NEG
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: LD_INT 1
21227: PUSH
21228: LD_INT 1
21230: NEG
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 2
21238: PUSH
21239: LD_INT 0
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 2
21248: PUSH
21249: LD_INT 1
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: LD_INT 2
21258: PUSH
21259: LD_INT 2
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: PUSH
21266: LD_INT 1
21268: PUSH
21269: LD_INT 2
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PUSH
21276: LD_INT 0
21278: PUSH
21279: LD_INT 2
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: LD_INT 1
21288: NEG
21289: PUSH
21290: LD_INT 1
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PUSH
21297: LD_INT 2
21299: NEG
21300: PUSH
21301: LD_INT 0
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 2
21310: NEG
21311: PUSH
21312: LD_INT 1
21314: NEG
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 2
21322: NEG
21323: PUSH
21324: LD_INT 2
21326: NEG
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21353: LD_ADDR_VAR 0 18
21357: PUSH
21358: LD_INT 0
21360: PUSH
21361: LD_INT 0
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 0
21370: PUSH
21371: LD_INT 1
21373: NEG
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: LD_INT 1
21381: PUSH
21382: LD_INT 0
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 1
21391: PUSH
21392: LD_INT 1
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 0
21401: PUSH
21402: LD_INT 1
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 1
21411: NEG
21412: PUSH
21413: LD_INT 0
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: PUSH
21420: LD_INT 1
21422: NEG
21423: PUSH
21424: LD_INT 1
21426: NEG
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 1
21434: NEG
21435: PUSH
21436: LD_INT 2
21438: NEG
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 0
21446: PUSH
21447: LD_INT 2
21449: NEG
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: LD_INT 1
21457: PUSH
21458: LD_INT 1
21460: NEG
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 2
21468: PUSH
21469: LD_INT 0
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 2
21478: PUSH
21479: LD_INT 1
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: LD_INT 2
21488: PUSH
21489: LD_INT 2
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 1
21498: PUSH
21499: LD_INT 2
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 0
21508: PUSH
21509: LD_INT 2
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: LD_INT 1
21518: NEG
21519: PUSH
21520: LD_INT 1
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 2
21529: NEG
21530: PUSH
21531: LD_INT 0
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 2
21540: NEG
21541: PUSH
21542: LD_INT 1
21544: NEG
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: LD_INT 2
21552: NEG
21553: PUSH
21554: LD_INT 2
21556: NEG
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21583: LD_ADDR_VAR 0 19
21587: PUSH
21588: LD_INT 0
21590: PUSH
21591: LD_INT 0
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 0
21600: PUSH
21601: LD_INT 1
21603: NEG
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: LD_INT 1
21611: PUSH
21612: LD_INT 0
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 1
21621: PUSH
21622: LD_INT 1
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 0
21631: PUSH
21632: LD_INT 1
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 1
21641: NEG
21642: PUSH
21643: LD_INT 0
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 1
21652: NEG
21653: PUSH
21654: LD_INT 1
21656: NEG
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 1
21664: NEG
21665: PUSH
21666: LD_INT 2
21668: NEG
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PUSH
21674: LD_INT 0
21676: PUSH
21677: LD_INT 2
21679: NEG
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 1
21687: PUSH
21688: LD_INT 1
21690: NEG
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: LD_INT 2
21698: PUSH
21699: LD_INT 0
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PUSH
21706: LD_INT 2
21708: PUSH
21709: LD_INT 1
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PUSH
21716: LD_INT 2
21718: PUSH
21719: LD_INT 2
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: LD_INT 1
21728: PUSH
21729: LD_INT 2
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PUSH
21736: LD_INT 0
21738: PUSH
21739: LD_INT 2
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: PUSH
21746: LD_INT 1
21748: NEG
21749: PUSH
21750: LD_INT 1
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 2
21759: NEG
21760: PUSH
21761: LD_INT 0
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: LD_INT 2
21770: NEG
21771: PUSH
21772: LD_INT 1
21774: NEG
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: LD_INT 2
21782: NEG
21783: PUSH
21784: LD_INT 2
21786: NEG
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21813: LD_ADDR_VAR 0 20
21817: PUSH
21818: LD_INT 0
21820: PUSH
21821: LD_INT 0
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: PUSH
21828: LD_INT 0
21830: PUSH
21831: LD_INT 1
21833: NEG
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: PUSH
21839: LD_INT 1
21841: PUSH
21842: LD_INT 0
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PUSH
21849: LD_INT 1
21851: PUSH
21852: LD_INT 1
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: LD_INT 0
21861: PUSH
21862: LD_INT 1
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 1
21871: NEG
21872: PUSH
21873: LD_INT 0
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 1
21882: NEG
21883: PUSH
21884: LD_INT 1
21886: NEG
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: LD_INT 1
21894: NEG
21895: PUSH
21896: LD_INT 2
21898: NEG
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 0
21906: PUSH
21907: LD_INT 2
21909: NEG
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: PUSH
21915: LD_INT 1
21917: PUSH
21918: LD_INT 1
21920: NEG
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PUSH
21926: LD_INT 2
21928: PUSH
21929: LD_INT 0
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 2
21938: PUSH
21939: LD_INT 1
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: LD_INT 2
21948: PUSH
21949: LD_INT 2
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 1
21958: PUSH
21959: LD_INT 2
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PUSH
21966: LD_INT 0
21968: PUSH
21969: LD_INT 2
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 1
21978: NEG
21979: PUSH
21980: LD_INT 1
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 2
21989: NEG
21990: PUSH
21991: LD_INT 0
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 2
22000: NEG
22001: PUSH
22002: LD_INT 1
22004: NEG
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: LD_INT 2
22012: NEG
22013: PUSH
22014: LD_INT 2
22016: NEG
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22043: LD_ADDR_VAR 0 21
22047: PUSH
22048: LD_INT 0
22050: PUSH
22051: LD_INT 0
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: LD_INT 0
22060: PUSH
22061: LD_INT 1
22063: NEG
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 1
22071: PUSH
22072: LD_INT 0
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: LD_INT 1
22081: PUSH
22082: LD_INT 1
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 0
22091: PUSH
22092: LD_INT 1
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: LD_INT 1
22101: NEG
22102: PUSH
22103: LD_INT 0
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 1
22112: NEG
22113: PUSH
22114: LD_INT 1
22116: NEG
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 1
22124: NEG
22125: PUSH
22126: LD_INT 2
22128: NEG
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PUSH
22134: LD_INT 0
22136: PUSH
22137: LD_INT 2
22139: NEG
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: LD_INT 1
22147: PUSH
22148: LD_INT 1
22150: NEG
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 2
22158: PUSH
22159: LD_INT 0
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: LD_INT 2
22168: PUSH
22169: LD_INT 1
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 2
22178: PUSH
22179: LD_INT 2
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 1
22188: PUSH
22189: LD_INT 2
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: PUSH
22196: LD_INT 0
22198: PUSH
22199: LD_INT 2
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: PUSH
22206: LD_INT 1
22208: NEG
22209: PUSH
22210: LD_INT 1
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: LD_INT 2
22219: NEG
22220: PUSH
22221: LD_INT 0
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 2
22230: NEG
22231: PUSH
22232: LD_INT 1
22234: NEG
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 2
22242: NEG
22243: PUSH
22244: LD_INT 2
22246: NEG
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22273: LD_ADDR_VAR 0 22
22277: PUSH
22278: LD_INT 0
22280: PUSH
22281: LD_INT 0
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 0
22290: PUSH
22291: LD_INT 1
22293: NEG
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 1
22301: PUSH
22302: LD_INT 0
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 1
22311: PUSH
22312: LD_INT 1
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 0
22321: PUSH
22322: LD_INT 1
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 1
22331: NEG
22332: PUSH
22333: LD_INT 0
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 1
22342: NEG
22343: PUSH
22344: LD_INT 1
22346: NEG
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 1
22354: NEG
22355: PUSH
22356: LD_INT 2
22358: NEG
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: PUSH
22364: LD_INT 0
22366: PUSH
22367: LD_INT 2
22369: NEG
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: LD_INT 1
22377: PUSH
22378: LD_INT 1
22380: NEG
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: LD_INT 2
22388: PUSH
22389: LD_INT 0
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 2
22398: PUSH
22399: LD_INT 1
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 2
22408: PUSH
22409: LD_INT 2
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: PUSH
22416: LD_INT 1
22418: PUSH
22419: LD_INT 2
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 0
22428: PUSH
22429: LD_INT 2
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 1
22438: NEG
22439: PUSH
22440: LD_INT 1
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: PUSH
22447: LD_INT 2
22449: NEG
22450: PUSH
22451: LD_INT 0
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: LD_INT 2
22460: NEG
22461: PUSH
22462: LD_INT 1
22464: NEG
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 2
22472: NEG
22473: PUSH
22474: LD_INT 2
22476: NEG
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
22503: LD_ADDR_VAR 0 23
22507: PUSH
22508: LD_INT 0
22510: PUSH
22511: LD_INT 0
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: PUSH
22518: LD_INT 0
22520: PUSH
22521: LD_INT 1
22523: NEG
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 1
22531: PUSH
22532: LD_INT 0
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 1
22541: PUSH
22542: LD_INT 1
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 0
22551: PUSH
22552: LD_INT 1
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 1
22561: NEG
22562: PUSH
22563: LD_INT 0
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 1
22572: NEG
22573: PUSH
22574: LD_INT 1
22576: NEG
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 1
22584: NEG
22585: PUSH
22586: LD_INT 2
22588: NEG
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 0
22596: PUSH
22597: LD_INT 2
22599: NEG
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 1
22607: PUSH
22608: LD_INT 1
22610: NEG
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 2
22618: PUSH
22619: LD_INT 0
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: LD_INT 2
22628: PUSH
22629: LD_INT 1
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 2
22638: PUSH
22639: LD_INT 2
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 1
22648: PUSH
22649: LD_INT 2
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 0
22658: PUSH
22659: LD_INT 2
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 1
22668: NEG
22669: PUSH
22670: LD_INT 1
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 2
22679: NEG
22680: PUSH
22681: LD_INT 0
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: LD_INT 2
22690: NEG
22691: PUSH
22692: LD_INT 1
22694: NEG
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 2
22702: NEG
22703: PUSH
22704: LD_INT 2
22706: NEG
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PUSH
22712: LD_INT 2
22714: NEG
22715: PUSH
22716: LD_INT 3
22718: NEG
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 1
22726: NEG
22727: PUSH
22728: LD_INT 3
22730: NEG
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: PUSH
22736: LD_INT 1
22738: PUSH
22739: LD_INT 2
22741: NEG
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: PUSH
22747: LD_INT 2
22749: PUSH
22750: LD_INT 1
22752: NEG
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
22783: LD_ADDR_VAR 0 24
22787: PUSH
22788: LD_INT 0
22790: PUSH
22791: LD_INT 0
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: PUSH
22798: LD_INT 0
22800: PUSH
22801: LD_INT 1
22803: NEG
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PUSH
22809: LD_INT 1
22811: PUSH
22812: LD_INT 0
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: LD_INT 1
22821: PUSH
22822: LD_INT 1
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 0
22831: PUSH
22832: LD_INT 1
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 1
22841: NEG
22842: PUSH
22843: LD_INT 0
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 1
22852: NEG
22853: PUSH
22854: LD_INT 1
22856: NEG
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 1
22864: NEG
22865: PUSH
22866: LD_INT 2
22868: NEG
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 0
22876: PUSH
22877: LD_INT 2
22879: NEG
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: LD_INT 1
22887: PUSH
22888: LD_INT 1
22890: NEG
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 2
22898: PUSH
22899: LD_INT 0
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PUSH
22906: LD_INT 2
22908: PUSH
22909: LD_INT 1
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 2
22918: PUSH
22919: LD_INT 2
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 1
22928: PUSH
22929: LD_INT 2
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 0
22938: PUSH
22939: LD_INT 2
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 1
22948: NEG
22949: PUSH
22950: LD_INT 1
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 2
22959: NEG
22960: PUSH
22961: LD_INT 0
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 2
22970: NEG
22971: PUSH
22972: LD_INT 1
22974: NEG
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 2
22982: NEG
22983: PUSH
22984: LD_INT 2
22986: NEG
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 1
22994: PUSH
22995: LD_INT 2
22997: NEG
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PUSH
23003: LD_INT 2
23005: PUSH
23006: LD_INT 1
23008: NEG
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PUSH
23014: LD_INT 3
23016: PUSH
23017: LD_INT 1
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 3
23026: PUSH
23027: LD_INT 2
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
23059: LD_ADDR_VAR 0 25
23063: PUSH
23064: LD_INT 0
23066: PUSH
23067: LD_INT 0
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PUSH
23074: LD_INT 0
23076: PUSH
23077: LD_INT 1
23079: NEG
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PUSH
23085: LD_INT 1
23087: PUSH
23088: LD_INT 0
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: PUSH
23095: LD_INT 1
23097: PUSH
23098: LD_INT 1
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 0
23107: PUSH
23108: LD_INT 1
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PUSH
23115: LD_INT 1
23117: NEG
23118: PUSH
23119: LD_INT 0
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 1
23128: NEG
23129: PUSH
23130: LD_INT 1
23132: NEG
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: PUSH
23138: LD_INT 1
23140: NEG
23141: PUSH
23142: LD_INT 2
23144: NEG
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 0
23152: PUSH
23153: LD_INT 2
23155: NEG
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 1
23163: PUSH
23164: LD_INT 1
23166: NEG
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: LD_INT 2
23174: PUSH
23175: LD_INT 0
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 2
23184: PUSH
23185: LD_INT 1
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 2
23194: PUSH
23195: LD_INT 2
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 1
23204: PUSH
23205: LD_INT 2
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 0
23214: PUSH
23215: LD_INT 2
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PUSH
23222: LD_INT 1
23224: NEG
23225: PUSH
23226: LD_INT 1
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: LD_INT 2
23235: NEG
23236: PUSH
23237: LD_INT 0
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: PUSH
23244: LD_INT 2
23246: NEG
23247: PUSH
23248: LD_INT 1
23250: NEG
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PUSH
23256: LD_INT 2
23258: NEG
23259: PUSH
23260: LD_INT 2
23262: NEG
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: LD_INT 3
23270: PUSH
23271: LD_INT 1
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 3
23280: PUSH
23281: LD_INT 2
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 2
23290: PUSH
23291: LD_INT 3
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PUSH
23298: LD_INT 1
23300: PUSH
23301: LD_INT 3
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
23333: LD_ADDR_VAR 0 26
23337: PUSH
23338: LD_INT 0
23340: PUSH
23341: LD_INT 0
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 0
23350: PUSH
23351: LD_INT 1
23353: NEG
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: LD_INT 1
23361: PUSH
23362: LD_INT 0
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: LD_INT 1
23371: PUSH
23372: LD_INT 1
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 0
23381: PUSH
23382: LD_INT 1
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 1
23391: NEG
23392: PUSH
23393: LD_INT 0
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 1
23402: NEG
23403: PUSH
23404: LD_INT 1
23406: NEG
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PUSH
23412: LD_INT 1
23414: NEG
23415: PUSH
23416: LD_INT 2
23418: NEG
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 0
23426: PUSH
23427: LD_INT 2
23429: NEG
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 1
23437: PUSH
23438: LD_INT 1
23440: NEG
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 2
23448: PUSH
23449: LD_INT 0
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 2
23458: PUSH
23459: LD_INT 1
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: LD_INT 2
23468: PUSH
23469: LD_INT 2
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 1
23478: PUSH
23479: LD_INT 2
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: LD_INT 0
23488: PUSH
23489: LD_INT 2
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PUSH
23496: LD_INT 1
23498: NEG
23499: PUSH
23500: LD_INT 1
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 2
23509: NEG
23510: PUSH
23511: LD_INT 0
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 2
23520: NEG
23521: PUSH
23522: LD_INT 1
23524: NEG
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 2
23532: NEG
23533: PUSH
23534: LD_INT 2
23536: NEG
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 2
23544: PUSH
23545: LD_INT 3
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 1
23554: PUSH
23555: LD_INT 3
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PUSH
23562: LD_INT 1
23564: NEG
23565: PUSH
23566: LD_INT 2
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: PUSH
23573: LD_INT 2
23575: NEG
23576: PUSH
23577: LD_INT 1
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23609: LD_ADDR_VAR 0 27
23613: PUSH
23614: LD_INT 0
23616: PUSH
23617: LD_INT 0
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PUSH
23624: LD_INT 0
23626: PUSH
23627: LD_INT 1
23629: NEG
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PUSH
23635: LD_INT 1
23637: PUSH
23638: LD_INT 0
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 1
23647: PUSH
23648: LD_INT 1
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: LD_INT 0
23657: PUSH
23658: LD_INT 1
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 1
23667: NEG
23668: PUSH
23669: LD_INT 0
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 1
23678: NEG
23679: PUSH
23680: LD_INT 1
23682: NEG
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 1
23690: NEG
23691: PUSH
23692: LD_INT 2
23694: NEG
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 0
23702: PUSH
23703: LD_INT 2
23705: NEG
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PUSH
23711: LD_INT 1
23713: PUSH
23714: LD_INT 1
23716: NEG
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 2
23724: PUSH
23725: LD_INT 0
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 2
23734: PUSH
23735: LD_INT 1
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 2
23744: PUSH
23745: LD_INT 2
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 1
23754: PUSH
23755: LD_INT 2
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PUSH
23762: LD_INT 0
23764: PUSH
23765: LD_INT 2
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 1
23774: NEG
23775: PUSH
23776: LD_INT 1
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: PUSH
23783: LD_INT 2
23785: NEG
23786: PUSH
23787: LD_INT 0
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PUSH
23794: LD_INT 2
23796: NEG
23797: PUSH
23798: LD_INT 1
23800: NEG
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: LD_INT 2
23808: NEG
23809: PUSH
23810: LD_INT 2
23812: NEG
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PUSH
23818: LD_INT 1
23820: NEG
23821: PUSH
23822: LD_INT 2
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PUSH
23829: LD_INT 2
23831: NEG
23832: PUSH
23833: LD_INT 1
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 3
23842: NEG
23843: PUSH
23844: LD_INT 1
23846: NEG
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PUSH
23852: LD_INT 3
23854: NEG
23855: PUSH
23856: LD_INT 2
23858: NEG
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23889: LD_ADDR_VAR 0 28
23893: PUSH
23894: LD_INT 0
23896: PUSH
23897: LD_INT 0
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 0
23906: PUSH
23907: LD_INT 1
23909: NEG
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: LD_INT 1
23917: PUSH
23918: LD_INT 0
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 1
23927: PUSH
23928: LD_INT 1
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 0
23937: PUSH
23938: LD_INT 1
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 1
23947: NEG
23948: PUSH
23949: LD_INT 0
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 1
23958: NEG
23959: PUSH
23960: LD_INT 1
23962: NEG
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 1
23970: NEG
23971: PUSH
23972: LD_INT 2
23974: NEG
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 0
23982: PUSH
23983: LD_INT 2
23985: NEG
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PUSH
23991: LD_INT 1
23993: PUSH
23994: LD_INT 1
23996: NEG
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 2
24004: PUSH
24005: LD_INT 0
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 2
24014: PUSH
24015: LD_INT 1
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: PUSH
24022: LD_INT 2
24024: PUSH
24025: LD_INT 2
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: LD_INT 1
24034: PUSH
24035: LD_INT 2
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 0
24044: PUSH
24045: LD_INT 2
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 1
24054: NEG
24055: PUSH
24056: LD_INT 1
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PUSH
24063: LD_INT 2
24065: NEG
24066: PUSH
24067: LD_INT 0
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 2
24076: NEG
24077: PUSH
24078: LD_INT 1
24080: NEG
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PUSH
24086: LD_INT 2
24088: NEG
24089: PUSH
24090: LD_INT 2
24092: NEG
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 2
24100: NEG
24101: PUSH
24102: LD_INT 3
24104: NEG
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 1
24112: NEG
24113: PUSH
24114: LD_INT 3
24116: NEG
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 3
24124: NEG
24125: PUSH
24126: LD_INT 1
24128: NEG
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 3
24136: NEG
24137: PUSH
24138: LD_INT 2
24140: NEG
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24171: LD_ADDR_VAR 0 29
24175: PUSH
24176: LD_INT 0
24178: PUSH
24179: LD_INT 0
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 0
24188: PUSH
24189: LD_INT 1
24191: NEG
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 1
24199: PUSH
24200: LD_INT 0
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: LD_INT 1
24209: PUSH
24210: LD_INT 1
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PUSH
24217: LD_INT 0
24219: PUSH
24220: LD_INT 1
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PUSH
24227: LD_INT 1
24229: NEG
24230: PUSH
24231: LD_INT 0
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 1
24240: NEG
24241: PUSH
24242: LD_INT 1
24244: NEG
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: PUSH
24250: LD_INT 1
24252: NEG
24253: PUSH
24254: LD_INT 2
24256: NEG
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: LD_INT 0
24264: PUSH
24265: LD_INT 2
24267: NEG
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 1
24275: PUSH
24276: LD_INT 1
24278: NEG
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 2
24286: PUSH
24287: LD_INT 0
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 2
24296: PUSH
24297: LD_INT 1
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PUSH
24304: LD_INT 1
24306: PUSH
24307: LD_INT 2
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: LD_INT 0
24316: PUSH
24317: LD_INT 2
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 1
24326: NEG
24327: PUSH
24328: LD_INT 1
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 2
24337: NEG
24338: PUSH
24339: LD_INT 1
24341: NEG
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 2
24349: NEG
24350: PUSH
24351: LD_INT 2
24353: NEG
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 2
24361: NEG
24362: PUSH
24363: LD_INT 3
24365: NEG
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 2
24373: PUSH
24374: LD_INT 1
24376: NEG
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 3
24384: PUSH
24385: LD_INT 1
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 1
24394: PUSH
24395: LD_INT 3
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 1
24404: NEG
24405: PUSH
24406: LD_INT 2
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 3
24415: NEG
24416: PUSH
24417: LD_INT 2
24419: NEG
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24450: LD_ADDR_VAR 0 30
24454: PUSH
24455: LD_INT 0
24457: PUSH
24458: LD_INT 0
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: LD_INT 0
24467: PUSH
24468: LD_INT 1
24470: NEG
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 1
24478: PUSH
24479: LD_INT 0
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 1
24488: PUSH
24489: LD_INT 1
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: LD_INT 0
24498: PUSH
24499: LD_INT 1
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: LD_INT 1
24508: NEG
24509: PUSH
24510: LD_INT 0
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 1
24519: NEG
24520: PUSH
24521: LD_INT 1
24523: NEG
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 1
24531: NEG
24532: PUSH
24533: LD_INT 2
24535: NEG
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 0
24543: PUSH
24544: LD_INT 2
24546: NEG
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 1
24554: PUSH
24555: LD_INT 1
24557: NEG
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 2
24565: PUSH
24566: LD_INT 0
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 2
24575: PUSH
24576: LD_INT 1
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 2
24585: PUSH
24586: LD_INT 2
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 1
24595: PUSH
24596: LD_INT 2
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 1
24605: NEG
24606: PUSH
24607: LD_INT 1
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 2
24616: NEG
24617: PUSH
24618: LD_INT 0
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: LD_INT 2
24627: NEG
24628: PUSH
24629: LD_INT 1
24631: NEG
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 1
24639: NEG
24640: PUSH
24641: LD_INT 3
24643: NEG
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 1
24651: PUSH
24652: LD_INT 2
24654: NEG
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 3
24662: PUSH
24663: LD_INT 2
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 2
24672: PUSH
24673: LD_INT 3
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 2
24682: NEG
24683: PUSH
24684: LD_INT 1
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 3
24693: NEG
24694: PUSH
24695: LD_INT 1
24697: NEG
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24728: LD_ADDR_VAR 0 31
24732: PUSH
24733: LD_INT 0
24735: PUSH
24736: LD_INT 0
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 0
24745: PUSH
24746: LD_INT 1
24748: NEG
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 1
24756: PUSH
24757: LD_INT 0
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 1
24766: PUSH
24767: LD_INT 1
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 0
24776: PUSH
24777: LD_INT 1
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 1
24786: NEG
24787: PUSH
24788: LD_INT 0
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 1
24797: NEG
24798: PUSH
24799: LD_INT 1
24801: NEG
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 1
24809: NEG
24810: PUSH
24811: LD_INT 2
24813: NEG
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 1
24821: PUSH
24822: LD_INT 1
24824: NEG
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 2
24832: PUSH
24833: LD_INT 0
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 2
24842: PUSH
24843: LD_INT 1
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 2
24852: PUSH
24853: LD_INT 2
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 1
24862: PUSH
24863: LD_INT 2
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 0
24872: PUSH
24873: LD_INT 2
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 1
24882: NEG
24883: PUSH
24884: LD_INT 1
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 2
24893: NEG
24894: PUSH
24895: LD_INT 1
24897: NEG
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 2
24905: NEG
24906: PUSH
24907: LD_INT 2
24909: NEG
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 2
24917: NEG
24918: PUSH
24919: LD_INT 3
24921: NEG
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 2
24929: PUSH
24930: LD_INT 1
24932: NEG
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PUSH
24938: LD_INT 3
24940: PUSH
24941: LD_INT 1
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 1
24950: PUSH
24951: LD_INT 3
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 1
24960: NEG
24961: PUSH
24962: LD_INT 2
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 3
24971: NEG
24972: PUSH
24973: LD_INT 2
24975: NEG
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
25006: LD_ADDR_VAR 0 32
25010: PUSH
25011: LD_INT 0
25013: PUSH
25014: LD_INT 0
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 0
25023: PUSH
25024: LD_INT 1
25026: NEG
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 1
25034: PUSH
25035: LD_INT 0
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 1
25044: PUSH
25045: LD_INT 1
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 0
25054: PUSH
25055: LD_INT 1
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 1
25064: NEG
25065: PUSH
25066: LD_INT 0
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 1
25075: NEG
25076: PUSH
25077: LD_INT 1
25079: NEG
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 1
25087: NEG
25088: PUSH
25089: LD_INT 2
25091: NEG
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 0
25099: PUSH
25100: LD_INT 2
25102: NEG
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 1
25110: PUSH
25111: LD_INT 1
25113: NEG
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 2
25121: PUSH
25122: LD_INT 1
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 2
25131: PUSH
25132: LD_INT 2
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 1
25141: PUSH
25142: LD_INT 2
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: LD_INT 0
25151: PUSH
25152: LD_INT 2
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 1
25161: NEG
25162: PUSH
25163: LD_INT 1
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: LD_INT 2
25172: NEG
25173: PUSH
25174: LD_INT 0
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 2
25183: NEG
25184: PUSH
25185: LD_INT 1
25187: NEG
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 1
25195: NEG
25196: PUSH
25197: LD_INT 3
25199: NEG
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 1
25207: PUSH
25208: LD_INT 2
25210: NEG
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 3
25218: PUSH
25219: LD_INT 2
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: LD_INT 2
25228: PUSH
25229: LD_INT 3
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 2
25238: NEG
25239: PUSH
25240: LD_INT 1
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 3
25249: NEG
25250: PUSH
25251: LD_INT 1
25253: NEG
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
25284: LD_ADDR_VAR 0 33
25288: PUSH
25289: LD_INT 0
25291: PUSH
25292: LD_INT 0
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 0
25301: PUSH
25302: LD_INT 1
25304: NEG
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 1
25312: PUSH
25313: LD_INT 0
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 1
25322: PUSH
25323: LD_INT 1
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 0
25332: PUSH
25333: LD_INT 1
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 1
25342: NEG
25343: PUSH
25344: LD_INT 0
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 1
25353: NEG
25354: PUSH
25355: LD_INT 1
25357: NEG
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 1
25365: NEG
25366: PUSH
25367: LD_INT 2
25369: NEG
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 1
25377: PUSH
25378: LD_INT 1
25380: NEG
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 2
25388: PUSH
25389: LD_INT 0
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 2
25398: PUSH
25399: LD_INT 1
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PUSH
25406: LD_INT 1
25408: PUSH
25409: LD_INT 2
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 0
25418: PUSH
25419: LD_INT 2
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: LD_INT 1
25428: NEG
25429: PUSH
25430: LD_INT 1
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: LD_INT 2
25439: NEG
25440: PUSH
25441: LD_INT 0
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 2
25450: NEG
25451: PUSH
25452: LD_INT 1
25454: NEG
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 2
25462: NEG
25463: PUSH
25464: LD_INT 2
25466: NEG
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 2
25474: NEG
25475: PUSH
25476: LD_INT 3
25478: NEG
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 2
25486: PUSH
25487: LD_INT 1
25489: NEG
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 3
25497: PUSH
25498: LD_INT 1
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 1
25507: PUSH
25508: LD_INT 3
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 1
25517: NEG
25518: PUSH
25519: LD_INT 2
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 3
25528: NEG
25529: PUSH
25530: LD_INT 2
25532: NEG
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
25563: LD_ADDR_VAR 0 34
25567: PUSH
25568: LD_INT 0
25570: PUSH
25571: LD_INT 0
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 0
25580: PUSH
25581: LD_INT 1
25583: NEG
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 1
25591: PUSH
25592: LD_INT 0
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 1
25601: PUSH
25602: LD_INT 1
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 0
25611: PUSH
25612: LD_INT 1
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 1
25621: NEG
25622: PUSH
25623: LD_INT 0
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: PUSH
25630: LD_INT 1
25632: NEG
25633: PUSH
25634: LD_INT 1
25636: NEG
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 1
25644: NEG
25645: PUSH
25646: LD_INT 2
25648: NEG
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: LD_INT 0
25656: PUSH
25657: LD_INT 2
25659: NEG
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 1
25667: PUSH
25668: LD_INT 1
25670: NEG
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 2
25678: PUSH
25679: LD_INT 1
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: LD_INT 2
25688: PUSH
25689: LD_INT 2
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 1
25698: PUSH
25699: LD_INT 2
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 1
25708: NEG
25709: PUSH
25710: LD_INT 1
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 2
25719: NEG
25720: PUSH
25721: LD_INT 0
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 2
25730: NEG
25731: PUSH
25732: LD_INT 1
25734: NEG
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 2
25742: NEG
25743: PUSH
25744: LD_INT 2
25746: NEG
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 1
25754: NEG
25755: PUSH
25756: LD_INT 3
25758: NEG
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 1
25766: PUSH
25767: LD_INT 2
25769: NEG
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: LD_INT 3
25777: PUSH
25778: LD_INT 2
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 2
25787: PUSH
25788: LD_INT 3
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 2
25797: NEG
25798: PUSH
25799: LD_INT 1
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 3
25808: NEG
25809: PUSH
25810: LD_INT 1
25812: NEG
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25843: LD_ADDR_VAR 0 35
25847: PUSH
25848: LD_INT 0
25850: PUSH
25851: LD_INT 0
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: LD_INT 0
25860: PUSH
25861: LD_INT 1
25863: NEG
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 1
25871: PUSH
25872: LD_INT 0
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 1
25881: PUSH
25882: LD_INT 1
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: LD_INT 0
25891: PUSH
25892: LD_INT 1
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 1
25901: NEG
25902: PUSH
25903: LD_INT 0
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 1
25912: NEG
25913: PUSH
25914: LD_INT 1
25916: NEG
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 2
25924: PUSH
25925: LD_INT 1
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 2
25934: NEG
25935: PUSH
25936: LD_INT 1
25938: NEG
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25955: LD_ADDR_VAR 0 36
25959: PUSH
25960: LD_INT 0
25962: PUSH
25963: LD_INT 0
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 0
25972: PUSH
25973: LD_INT 1
25975: NEG
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 1
25983: PUSH
25984: LD_INT 0
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: LD_INT 1
25993: PUSH
25994: LD_INT 1
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 0
26003: PUSH
26004: LD_INT 1
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 1
26013: NEG
26014: PUSH
26015: LD_INT 0
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: LD_INT 1
26024: NEG
26025: PUSH
26026: LD_INT 1
26028: NEG
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 1
26036: NEG
26037: PUSH
26038: LD_INT 2
26040: NEG
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 1
26048: PUSH
26049: LD_INT 2
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
26067: LD_ADDR_VAR 0 37
26071: PUSH
26072: LD_INT 0
26074: PUSH
26075: LD_INT 0
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 0
26084: PUSH
26085: LD_INT 1
26087: NEG
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 1
26095: PUSH
26096: LD_INT 0
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 1
26105: PUSH
26106: LD_INT 1
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: LD_INT 0
26115: PUSH
26116: LD_INT 1
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 1
26125: NEG
26126: PUSH
26127: LD_INT 0
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 1
26136: NEG
26137: PUSH
26138: LD_INT 1
26140: NEG
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 1
26148: PUSH
26149: LD_INT 1
26151: NEG
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 1
26159: NEG
26160: PUSH
26161: LD_INT 1
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
26179: LD_ADDR_VAR 0 38
26183: PUSH
26184: LD_INT 0
26186: PUSH
26187: LD_INT 0
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: LD_INT 0
26196: PUSH
26197: LD_INT 1
26199: NEG
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 1
26207: PUSH
26208: LD_INT 0
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 1
26217: PUSH
26218: LD_INT 1
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 0
26227: PUSH
26228: LD_INT 1
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 1
26237: NEG
26238: PUSH
26239: LD_INT 0
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 1
26248: NEG
26249: PUSH
26250: LD_INT 1
26252: NEG
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 2
26260: PUSH
26261: LD_INT 1
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 2
26270: NEG
26271: PUSH
26272: LD_INT 1
26274: NEG
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
26291: LD_ADDR_VAR 0 39
26295: PUSH
26296: LD_INT 0
26298: PUSH
26299: LD_INT 0
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 0
26308: PUSH
26309: LD_INT 1
26311: NEG
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 1
26319: PUSH
26320: LD_INT 0
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 1
26329: PUSH
26330: LD_INT 1
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 0
26339: PUSH
26340: LD_INT 1
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 1
26349: NEG
26350: PUSH
26351: LD_INT 0
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 1
26360: NEG
26361: PUSH
26362: LD_INT 1
26364: NEG
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 1
26372: NEG
26373: PUSH
26374: LD_INT 2
26376: NEG
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 1
26384: PUSH
26385: LD_INT 2
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
26403: LD_ADDR_VAR 0 40
26407: PUSH
26408: LD_INT 0
26410: PUSH
26411: LD_INT 0
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 0
26420: PUSH
26421: LD_INT 1
26423: NEG
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 1
26431: PUSH
26432: LD_INT 0
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 1
26441: PUSH
26442: LD_INT 1
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 0
26451: PUSH
26452: LD_INT 1
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 1
26461: NEG
26462: PUSH
26463: LD_INT 0
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 1
26472: NEG
26473: PUSH
26474: LD_INT 1
26476: NEG
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 1
26484: PUSH
26485: LD_INT 1
26487: NEG
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 1
26495: NEG
26496: PUSH
26497: LD_INT 1
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26515: LD_ADDR_VAR 0 41
26519: PUSH
26520: LD_INT 0
26522: PUSH
26523: LD_INT 0
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 0
26532: PUSH
26533: LD_INT 1
26535: NEG
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 1
26543: PUSH
26544: LD_INT 0
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 1
26553: PUSH
26554: LD_INT 1
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 0
26563: PUSH
26564: LD_INT 1
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 1
26573: NEG
26574: PUSH
26575: LD_INT 0
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 1
26584: NEG
26585: PUSH
26586: LD_INT 1
26588: NEG
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 1
26596: NEG
26597: PUSH
26598: LD_INT 2
26600: NEG
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 1
26608: PUSH
26609: LD_INT 1
26611: NEG
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PUSH
26617: LD_INT 2
26619: PUSH
26620: LD_INT 0
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: LD_INT 2
26629: PUSH
26630: LD_INT 1
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 2
26639: PUSH
26640: LD_INT 2
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 1
26649: PUSH
26650: LD_INT 2
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PUSH
26657: LD_INT 1
26659: NEG
26660: PUSH
26661: LD_INT 1
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 2
26670: NEG
26671: PUSH
26672: LD_INT 0
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: LD_INT 2
26681: NEG
26682: PUSH
26683: LD_INT 1
26685: NEG
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 2
26693: NEG
26694: PUSH
26695: LD_INT 2
26697: NEG
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 2
26705: NEG
26706: PUSH
26707: LD_INT 3
26709: NEG
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 2
26717: PUSH
26718: LD_INT 1
26720: NEG
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 3
26728: PUSH
26729: LD_INT 0
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 3
26738: PUSH
26739: LD_INT 1
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 3
26748: PUSH
26749: LD_INT 2
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: PUSH
26756: LD_INT 3
26758: PUSH
26759: LD_INT 3
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PUSH
26766: LD_INT 2
26768: PUSH
26769: LD_INT 3
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 2
26778: NEG
26779: PUSH
26780: LD_INT 1
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 3
26789: NEG
26790: PUSH
26791: LD_INT 0
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 3
26800: NEG
26801: PUSH
26802: LD_INT 1
26804: NEG
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 3
26812: NEG
26813: PUSH
26814: LD_INT 2
26816: NEG
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 3
26824: NEG
26825: PUSH
26826: LD_INT 3
26828: NEG
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26865: LD_ADDR_VAR 0 42
26869: PUSH
26870: LD_INT 0
26872: PUSH
26873: LD_INT 0
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 0
26882: PUSH
26883: LD_INT 1
26885: NEG
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 1
26893: PUSH
26894: LD_INT 0
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: LD_INT 1
26903: PUSH
26904: LD_INT 1
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 0
26913: PUSH
26914: LD_INT 1
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 1
26923: NEG
26924: PUSH
26925: LD_INT 0
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 1
26934: NEG
26935: PUSH
26936: LD_INT 1
26938: NEG
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PUSH
26944: LD_INT 1
26946: NEG
26947: PUSH
26948: LD_INT 2
26950: NEG
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 0
26958: PUSH
26959: LD_INT 2
26961: NEG
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 1
26969: PUSH
26970: LD_INT 1
26972: NEG
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 2
26980: PUSH
26981: LD_INT 1
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 2
26990: PUSH
26991: LD_INT 2
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 1
27000: PUSH
27001: LD_INT 2
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 0
27010: PUSH
27011: LD_INT 2
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 1
27020: NEG
27021: PUSH
27022: LD_INT 1
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 2
27031: NEG
27032: PUSH
27033: LD_INT 1
27035: NEG
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 2
27043: NEG
27044: PUSH
27045: LD_INT 2
27047: NEG
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 2
27055: NEG
27056: PUSH
27057: LD_INT 3
27059: NEG
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 1
27067: NEG
27068: PUSH
27069: LD_INT 3
27071: NEG
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 0
27079: PUSH
27080: LD_INT 3
27082: NEG
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 1
27090: PUSH
27091: LD_INT 2
27093: NEG
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 3
27101: PUSH
27102: LD_INT 2
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 3
27111: PUSH
27112: LD_INT 3
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 2
27121: PUSH
27122: LD_INT 3
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 1
27131: PUSH
27132: LD_INT 3
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 0
27141: PUSH
27142: LD_INT 3
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 1
27151: NEG
27152: PUSH
27153: LD_INT 2
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 3
27162: NEG
27163: PUSH
27164: LD_INT 2
27166: NEG
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 3
27174: NEG
27175: PUSH
27176: LD_INT 3
27178: NEG
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27215: LD_ADDR_VAR 0 43
27219: PUSH
27220: LD_INT 0
27222: PUSH
27223: LD_INT 0
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: LD_INT 0
27232: PUSH
27233: LD_INT 1
27235: NEG
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 1
27243: PUSH
27244: LD_INT 0
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 1
27253: PUSH
27254: LD_INT 1
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 0
27263: PUSH
27264: LD_INT 1
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: LD_INT 1
27273: NEG
27274: PUSH
27275: LD_INT 0
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 1
27284: NEG
27285: PUSH
27286: LD_INT 1
27288: NEG
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 1
27296: NEG
27297: PUSH
27298: LD_INT 2
27300: NEG
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 0
27308: PUSH
27309: LD_INT 2
27311: NEG
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 1
27319: PUSH
27320: LD_INT 1
27322: NEG
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 2
27330: PUSH
27331: LD_INT 0
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: LD_INT 2
27340: PUSH
27341: LD_INT 1
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 1
27350: PUSH
27351: LD_INT 2
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: LD_INT 0
27360: PUSH
27361: LD_INT 2
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 1
27370: NEG
27371: PUSH
27372: LD_INT 1
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: LD_INT 2
27381: NEG
27382: PUSH
27383: LD_INT 0
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 2
27392: NEG
27393: PUSH
27394: LD_INT 1
27396: NEG
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 1
27404: NEG
27405: PUSH
27406: LD_INT 3
27408: NEG
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PUSH
27414: LD_INT 0
27416: PUSH
27417: LD_INT 3
27419: NEG
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 1
27427: PUSH
27428: LD_INT 2
27430: NEG
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 2
27438: PUSH
27439: LD_INT 1
27441: NEG
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 3
27449: PUSH
27450: LD_INT 0
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 3
27459: PUSH
27460: LD_INT 1
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 1
27469: PUSH
27470: LD_INT 3
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 0
27479: PUSH
27480: LD_INT 3
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 1
27489: NEG
27490: PUSH
27491: LD_INT 2
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 2
27500: NEG
27501: PUSH
27502: LD_INT 1
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 3
27511: NEG
27512: PUSH
27513: LD_INT 0
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 3
27522: NEG
27523: PUSH
27524: LD_INT 1
27526: NEG
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27563: LD_ADDR_VAR 0 44
27567: PUSH
27568: LD_INT 0
27570: PUSH
27571: LD_INT 0
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 0
27580: PUSH
27581: LD_INT 1
27583: NEG
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 1
27591: PUSH
27592: LD_INT 0
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 1
27601: PUSH
27602: LD_INT 1
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 0
27611: PUSH
27612: LD_INT 1
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 1
27621: NEG
27622: PUSH
27623: LD_INT 0
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 1
27632: NEG
27633: PUSH
27634: LD_INT 1
27636: NEG
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 1
27644: NEG
27645: PUSH
27646: LD_INT 2
27648: NEG
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 1
27656: PUSH
27657: LD_INT 1
27659: NEG
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 2
27667: PUSH
27668: LD_INT 0
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 2
27677: PUSH
27678: LD_INT 1
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 2
27687: PUSH
27688: LD_INT 2
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 1
27697: PUSH
27698: LD_INT 2
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 1
27707: NEG
27708: PUSH
27709: LD_INT 1
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 2
27718: NEG
27719: PUSH
27720: LD_INT 0
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 2
27729: NEG
27730: PUSH
27731: LD_INT 1
27733: NEG
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PUSH
27739: LD_INT 2
27741: NEG
27742: PUSH
27743: LD_INT 2
27745: NEG
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: PUSH
27751: LD_INT 2
27753: NEG
27754: PUSH
27755: LD_INT 3
27757: NEG
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 2
27765: PUSH
27766: LD_INT 1
27768: NEG
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 3
27776: PUSH
27777: LD_INT 0
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 3
27786: PUSH
27787: LD_INT 1
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 3
27796: PUSH
27797: LD_INT 2
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 3
27806: PUSH
27807: LD_INT 3
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 2
27816: PUSH
27817: LD_INT 3
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 2
27826: NEG
27827: PUSH
27828: LD_INT 1
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 3
27837: NEG
27838: PUSH
27839: LD_INT 0
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 3
27848: NEG
27849: PUSH
27850: LD_INT 1
27852: NEG
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PUSH
27858: LD_INT 3
27860: NEG
27861: PUSH
27862: LD_INT 2
27864: NEG
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 3
27872: NEG
27873: PUSH
27874: LD_INT 3
27876: NEG
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27913: LD_ADDR_VAR 0 45
27917: PUSH
27918: LD_INT 0
27920: PUSH
27921: LD_INT 0
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: LD_INT 0
27930: PUSH
27931: LD_INT 1
27933: NEG
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: LD_INT 1
27941: PUSH
27942: LD_INT 0
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 1
27951: PUSH
27952: LD_INT 1
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 0
27961: PUSH
27962: LD_INT 1
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 1
27971: NEG
27972: PUSH
27973: LD_INT 0
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 1
27982: NEG
27983: PUSH
27984: LD_INT 1
27986: NEG
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 1
27994: NEG
27995: PUSH
27996: LD_INT 2
27998: NEG
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: LD_INT 0
28006: PUSH
28007: LD_INT 2
28009: NEG
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 1
28017: PUSH
28018: LD_INT 1
28020: NEG
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 2
28028: PUSH
28029: LD_INT 1
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 2
28038: PUSH
28039: LD_INT 2
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 1
28048: PUSH
28049: LD_INT 2
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: LD_INT 0
28058: PUSH
28059: LD_INT 2
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: LD_INT 1
28068: NEG
28069: PUSH
28070: LD_INT 1
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 2
28079: NEG
28080: PUSH
28081: LD_INT 1
28083: NEG
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 2
28091: NEG
28092: PUSH
28093: LD_INT 2
28095: NEG
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 2
28103: NEG
28104: PUSH
28105: LD_INT 3
28107: NEG
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 1
28115: NEG
28116: PUSH
28117: LD_INT 3
28119: NEG
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 0
28127: PUSH
28128: LD_INT 3
28130: NEG
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 1
28138: PUSH
28139: LD_INT 2
28141: NEG
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 3
28149: PUSH
28150: LD_INT 2
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 3
28159: PUSH
28160: LD_INT 3
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 2
28169: PUSH
28170: LD_INT 3
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 1
28179: PUSH
28180: LD_INT 3
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 0
28189: PUSH
28190: LD_INT 3
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 1
28199: NEG
28200: PUSH
28201: LD_INT 2
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 3
28210: NEG
28211: PUSH
28212: LD_INT 2
28214: NEG
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 3
28222: NEG
28223: PUSH
28224: LD_INT 3
28226: NEG
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28263: LD_ADDR_VAR 0 46
28267: PUSH
28268: LD_INT 0
28270: PUSH
28271: LD_INT 0
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 0
28280: PUSH
28281: LD_INT 1
28283: NEG
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_INT 1
28291: PUSH
28292: LD_INT 0
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 1
28301: PUSH
28302: LD_INT 1
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 0
28311: PUSH
28312: LD_INT 1
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: LD_INT 1
28321: NEG
28322: PUSH
28323: LD_INT 0
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 1
28332: NEG
28333: PUSH
28334: LD_INT 1
28336: NEG
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PUSH
28342: LD_INT 1
28344: NEG
28345: PUSH
28346: LD_INT 2
28348: NEG
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 0
28356: PUSH
28357: LD_INT 2
28359: NEG
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 1
28367: PUSH
28368: LD_INT 1
28370: NEG
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 2
28378: PUSH
28379: LD_INT 0
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 2
28388: PUSH
28389: LD_INT 1
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 1
28398: PUSH
28399: LD_INT 2
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 0
28408: PUSH
28409: LD_INT 2
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: LD_INT 1
28418: NEG
28419: PUSH
28420: LD_INT 1
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 2
28429: NEG
28430: PUSH
28431: LD_INT 0
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 2
28440: NEG
28441: PUSH
28442: LD_INT 1
28444: NEG
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 1
28452: NEG
28453: PUSH
28454: LD_INT 3
28456: NEG
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 0
28464: PUSH
28465: LD_INT 3
28467: NEG
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 1
28475: PUSH
28476: LD_INT 2
28478: NEG
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: LD_INT 2
28486: PUSH
28487: LD_INT 1
28489: NEG
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: LD_INT 3
28497: PUSH
28498: LD_INT 0
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: LD_INT 3
28507: PUSH
28508: LD_INT 1
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 1
28517: PUSH
28518: LD_INT 3
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: LD_INT 0
28527: PUSH
28528: LD_INT 3
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 1
28537: NEG
28538: PUSH
28539: LD_INT 2
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 2
28548: NEG
28549: PUSH
28550: LD_INT 1
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 3
28559: NEG
28560: PUSH
28561: LD_INT 0
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: LD_INT 3
28570: NEG
28571: PUSH
28572: LD_INT 1
28574: NEG
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28611: LD_ADDR_VAR 0 47
28615: PUSH
28616: LD_INT 0
28618: PUSH
28619: LD_INT 0
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: LD_INT 0
28628: PUSH
28629: LD_INT 1
28631: NEG
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 1
28639: PUSH
28640: LD_INT 0
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 1
28649: PUSH
28650: LD_INT 1
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 0
28659: PUSH
28660: LD_INT 1
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 1
28669: NEG
28670: PUSH
28671: LD_INT 0
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 1
28680: NEG
28681: PUSH
28682: LD_INT 1
28684: NEG
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 1
28692: NEG
28693: PUSH
28694: LD_INT 2
28696: NEG
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 0
28704: PUSH
28705: LD_INT 2
28707: NEG
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 1
28715: PUSH
28716: LD_INT 1
28718: NEG
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: LD_INT 2
28726: NEG
28727: PUSH
28728: LD_INT 1
28730: NEG
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 2
28738: NEG
28739: PUSH
28740: LD_INT 2
28742: NEG
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28762: LD_ADDR_VAR 0 48
28766: PUSH
28767: LD_INT 0
28769: PUSH
28770: LD_INT 0
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 0
28779: PUSH
28780: LD_INT 1
28782: NEG
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 1
28790: PUSH
28791: LD_INT 0
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PUSH
28798: LD_INT 1
28800: PUSH
28801: LD_INT 1
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 0
28810: PUSH
28811: LD_INT 1
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: LD_INT 1
28820: NEG
28821: PUSH
28822: LD_INT 0
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 1
28831: NEG
28832: PUSH
28833: LD_INT 1
28835: NEG
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 1
28843: NEG
28844: PUSH
28845: LD_INT 2
28847: NEG
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: LD_INT 0
28855: PUSH
28856: LD_INT 2
28858: NEG
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: LD_INT 1
28866: PUSH
28867: LD_INT 1
28869: NEG
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: LD_INT 2
28877: PUSH
28878: LD_INT 0
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 2
28887: PUSH
28888: LD_INT 1
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28909: LD_ADDR_VAR 0 49
28913: PUSH
28914: LD_INT 0
28916: PUSH
28917: LD_INT 0
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 0
28926: PUSH
28927: LD_INT 1
28929: NEG
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 1
28937: PUSH
28938: LD_INT 0
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 1
28947: PUSH
28948: LD_INT 1
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 0
28957: PUSH
28958: LD_INT 1
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 1
28967: NEG
28968: PUSH
28969: LD_INT 0
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 1
28978: NEG
28979: PUSH
28980: LD_INT 1
28982: NEG
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 1
28990: PUSH
28991: LD_INT 1
28993: NEG
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 2
29001: PUSH
29002: LD_INT 0
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 2
29011: PUSH
29012: LD_INT 1
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 2
29021: PUSH
29022: LD_INT 2
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 1
29031: PUSH
29032: LD_INT 2
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29053: LD_ADDR_VAR 0 50
29057: PUSH
29058: LD_INT 0
29060: PUSH
29061: LD_INT 0
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 0
29070: PUSH
29071: LD_INT 1
29073: NEG
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 1
29081: PUSH
29082: LD_INT 0
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PUSH
29089: LD_INT 1
29091: PUSH
29092: LD_INT 1
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: PUSH
29099: LD_INT 0
29101: PUSH
29102: LD_INT 1
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 1
29111: NEG
29112: PUSH
29113: LD_INT 0
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 1
29122: NEG
29123: PUSH
29124: LD_INT 1
29126: NEG
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 2
29134: PUSH
29135: LD_INT 1
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 2
29144: PUSH
29145: LD_INT 2
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 1
29154: PUSH
29155: LD_INT 2
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 0
29164: PUSH
29165: LD_INT 2
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 1
29174: NEG
29175: PUSH
29176: LD_INT 1
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29197: LD_ADDR_VAR 0 51
29201: PUSH
29202: LD_INT 0
29204: PUSH
29205: LD_INT 0
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 0
29214: PUSH
29215: LD_INT 1
29217: NEG
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 1
29225: PUSH
29226: LD_INT 0
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 1
29235: PUSH
29236: LD_INT 1
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 0
29245: PUSH
29246: LD_INT 1
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: LD_INT 1
29255: NEG
29256: PUSH
29257: LD_INT 0
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: LD_INT 1
29266: NEG
29267: PUSH
29268: LD_INT 1
29270: NEG
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 1
29278: PUSH
29279: LD_INT 2
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PUSH
29286: LD_INT 0
29288: PUSH
29289: LD_INT 2
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 1
29298: NEG
29299: PUSH
29300: LD_INT 1
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 2
29309: NEG
29310: PUSH
29311: LD_INT 0
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 2
29320: NEG
29321: PUSH
29322: LD_INT 1
29324: NEG
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29344: LD_ADDR_VAR 0 52
29348: PUSH
29349: LD_INT 0
29351: PUSH
29352: LD_INT 0
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 0
29361: PUSH
29362: LD_INT 1
29364: NEG
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 1
29372: PUSH
29373: LD_INT 0
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 1
29382: PUSH
29383: LD_INT 1
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 0
29392: PUSH
29393: LD_INT 1
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 1
29402: NEG
29403: PUSH
29404: LD_INT 0
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 1
29413: NEG
29414: PUSH
29415: LD_INT 1
29417: NEG
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 1
29425: NEG
29426: PUSH
29427: LD_INT 2
29429: NEG
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 1
29437: NEG
29438: PUSH
29439: LD_INT 1
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 2
29448: NEG
29449: PUSH
29450: LD_INT 0
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 2
29459: NEG
29460: PUSH
29461: LD_INT 1
29463: NEG
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 2
29471: NEG
29472: PUSH
29473: LD_INT 2
29475: NEG
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29495: LD_ADDR_VAR 0 53
29499: PUSH
29500: LD_INT 0
29502: PUSH
29503: LD_INT 0
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 0
29512: PUSH
29513: LD_INT 1
29515: NEG
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 1
29523: PUSH
29524: LD_INT 0
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: LD_INT 1
29533: PUSH
29534: LD_INT 1
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 0
29543: PUSH
29544: LD_INT 1
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 1
29553: NEG
29554: PUSH
29555: LD_INT 0
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 1
29564: NEG
29565: PUSH
29566: LD_INT 1
29568: NEG
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 1
29576: NEG
29577: PUSH
29578: LD_INT 2
29580: NEG
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 0
29588: PUSH
29589: LD_INT 2
29591: NEG
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 1
29599: PUSH
29600: LD_INT 1
29602: NEG
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 2
29610: PUSH
29611: LD_INT 0
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 2
29620: PUSH
29621: LD_INT 1
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 2
29630: PUSH
29631: LD_INT 2
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 1
29640: PUSH
29641: LD_INT 2
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: LD_INT 0
29650: PUSH
29651: LD_INT 2
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 1
29660: NEG
29661: PUSH
29662: LD_INT 1
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: LD_INT 2
29671: NEG
29672: PUSH
29673: LD_INT 0
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 2
29682: NEG
29683: PUSH
29684: LD_INT 1
29686: NEG
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PUSH
29692: LD_INT 2
29694: NEG
29695: PUSH
29696: LD_INT 2
29698: NEG
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29725: LD_ADDR_VAR 0 54
29729: PUSH
29730: LD_INT 0
29732: PUSH
29733: LD_INT 0
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 0
29742: PUSH
29743: LD_INT 1
29745: NEG
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 1
29753: PUSH
29754: LD_INT 0
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 1
29763: PUSH
29764: LD_INT 1
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 0
29773: PUSH
29774: LD_INT 1
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 1
29783: NEG
29784: PUSH
29785: LD_INT 0
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 1
29794: NEG
29795: PUSH
29796: LD_INT 1
29798: NEG
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 1
29806: NEG
29807: PUSH
29808: LD_INT 2
29810: NEG
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 0
29818: PUSH
29819: LD_INT 2
29821: NEG
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 1
29829: PUSH
29830: LD_INT 1
29832: NEG
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 2
29840: PUSH
29841: LD_INT 0
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 2
29850: PUSH
29851: LD_INT 1
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 2
29860: PUSH
29861: LD_INT 2
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 1
29870: PUSH
29871: LD_INT 2
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 0
29880: PUSH
29881: LD_INT 2
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 1
29890: NEG
29891: PUSH
29892: LD_INT 1
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 2
29901: NEG
29902: PUSH
29903: LD_INT 0
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 2
29912: NEG
29913: PUSH
29914: LD_INT 1
29916: NEG
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 2
29924: NEG
29925: PUSH
29926: LD_INT 2
29928: NEG
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29955: LD_ADDR_VAR 0 55
29959: PUSH
29960: LD_INT 0
29962: PUSH
29963: LD_INT 0
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 0
29972: PUSH
29973: LD_INT 1
29975: NEG
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 1
29983: PUSH
29984: LD_INT 0
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 1
29993: PUSH
29994: LD_INT 1
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 0
30003: PUSH
30004: LD_INT 1
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: LD_INT 1
30013: NEG
30014: PUSH
30015: LD_INT 0
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 1
30024: NEG
30025: PUSH
30026: LD_INT 1
30028: NEG
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 1
30036: NEG
30037: PUSH
30038: LD_INT 2
30040: NEG
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 0
30048: PUSH
30049: LD_INT 2
30051: NEG
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 1
30059: PUSH
30060: LD_INT 1
30062: NEG
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 2
30070: PUSH
30071: LD_INT 0
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: LD_INT 2
30080: PUSH
30081: LD_INT 1
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: LD_INT 2
30090: PUSH
30091: LD_INT 2
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 1
30100: PUSH
30101: LD_INT 2
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 0
30110: PUSH
30111: LD_INT 2
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 1
30120: NEG
30121: PUSH
30122: LD_INT 1
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 2
30131: NEG
30132: PUSH
30133: LD_INT 0
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 2
30142: NEG
30143: PUSH
30144: LD_INT 1
30146: NEG
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 2
30154: NEG
30155: PUSH
30156: LD_INT 2
30158: NEG
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30185: LD_ADDR_VAR 0 56
30189: PUSH
30190: LD_INT 0
30192: PUSH
30193: LD_INT 0
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 0
30202: PUSH
30203: LD_INT 1
30205: NEG
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 1
30213: PUSH
30214: LD_INT 0
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 1
30223: PUSH
30224: LD_INT 1
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 0
30233: PUSH
30234: LD_INT 1
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 1
30243: NEG
30244: PUSH
30245: LD_INT 0
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 1
30254: NEG
30255: PUSH
30256: LD_INT 1
30258: NEG
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 1
30266: NEG
30267: PUSH
30268: LD_INT 2
30270: NEG
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 0
30278: PUSH
30279: LD_INT 2
30281: NEG
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 1
30289: PUSH
30290: LD_INT 1
30292: NEG
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 2
30300: PUSH
30301: LD_INT 0
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 2
30310: PUSH
30311: LD_INT 1
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: LD_INT 2
30320: PUSH
30321: LD_INT 2
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 1
30330: PUSH
30331: LD_INT 2
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: LD_INT 0
30340: PUSH
30341: LD_INT 2
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 1
30350: NEG
30351: PUSH
30352: LD_INT 1
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 2
30361: NEG
30362: PUSH
30363: LD_INT 0
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 2
30372: NEG
30373: PUSH
30374: LD_INT 1
30376: NEG
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 2
30384: NEG
30385: PUSH
30386: LD_INT 2
30388: NEG
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30415: LD_ADDR_VAR 0 57
30419: PUSH
30420: LD_INT 0
30422: PUSH
30423: LD_INT 0
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 0
30432: PUSH
30433: LD_INT 1
30435: NEG
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 1
30443: PUSH
30444: LD_INT 0
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 1
30453: PUSH
30454: LD_INT 1
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 0
30463: PUSH
30464: LD_INT 1
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 1
30473: NEG
30474: PUSH
30475: LD_INT 0
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 1
30484: NEG
30485: PUSH
30486: LD_INT 1
30488: NEG
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 1
30496: NEG
30497: PUSH
30498: LD_INT 2
30500: NEG
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: LD_INT 0
30508: PUSH
30509: LD_INT 2
30511: NEG
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 1
30519: PUSH
30520: LD_INT 1
30522: NEG
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 2
30530: PUSH
30531: LD_INT 0
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 2
30540: PUSH
30541: LD_INT 1
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 2
30550: PUSH
30551: LD_INT 2
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 1
30560: PUSH
30561: LD_INT 2
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 0
30570: PUSH
30571: LD_INT 2
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: LD_INT 1
30580: NEG
30581: PUSH
30582: LD_INT 1
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 2
30591: NEG
30592: PUSH
30593: LD_INT 0
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 2
30602: NEG
30603: PUSH
30604: LD_INT 1
30606: NEG
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: LD_INT 2
30614: NEG
30615: PUSH
30616: LD_INT 2
30618: NEG
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30645: LD_ADDR_VAR 0 58
30649: PUSH
30650: LD_INT 0
30652: PUSH
30653: LD_INT 0
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 0
30662: PUSH
30663: LD_INT 1
30665: NEG
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 1
30673: PUSH
30674: LD_INT 0
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 1
30683: PUSH
30684: LD_INT 1
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 0
30693: PUSH
30694: LD_INT 1
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 1
30703: NEG
30704: PUSH
30705: LD_INT 0
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 1
30714: NEG
30715: PUSH
30716: LD_INT 1
30718: NEG
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 1
30726: NEG
30727: PUSH
30728: LD_INT 2
30730: NEG
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 0
30738: PUSH
30739: LD_INT 2
30741: NEG
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 1
30749: PUSH
30750: LD_INT 1
30752: NEG
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 2
30760: PUSH
30761: LD_INT 0
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 2
30770: PUSH
30771: LD_INT 1
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 2
30780: PUSH
30781: LD_INT 2
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 1
30790: PUSH
30791: LD_INT 2
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 0
30800: PUSH
30801: LD_INT 2
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 1
30810: NEG
30811: PUSH
30812: LD_INT 1
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 2
30821: NEG
30822: PUSH
30823: LD_INT 0
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 2
30832: NEG
30833: PUSH
30834: LD_INT 1
30836: NEG
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 2
30844: NEG
30845: PUSH
30846: LD_INT 2
30848: NEG
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30875: LD_ADDR_VAR 0 59
30879: PUSH
30880: LD_INT 0
30882: PUSH
30883: LD_INT 0
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 0
30892: PUSH
30893: LD_INT 1
30895: NEG
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: LD_INT 1
30903: PUSH
30904: LD_INT 0
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 1
30913: PUSH
30914: LD_INT 1
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 0
30923: PUSH
30924: LD_INT 1
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 1
30933: NEG
30934: PUSH
30935: LD_INT 0
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 1
30944: NEG
30945: PUSH
30946: LD_INT 1
30948: NEG
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30963: LD_ADDR_VAR 0 60
30967: PUSH
30968: LD_INT 0
30970: PUSH
30971: LD_INT 0
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 0
30980: PUSH
30981: LD_INT 1
30983: NEG
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: LD_INT 1
30991: PUSH
30992: LD_INT 0
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: PUSH
30999: LD_INT 1
31001: PUSH
31002: LD_INT 1
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 0
31011: PUSH
31012: LD_INT 1
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 1
31021: NEG
31022: PUSH
31023: LD_INT 0
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 1
31032: NEG
31033: PUSH
31034: LD_INT 1
31036: NEG
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31051: LD_ADDR_VAR 0 61
31055: PUSH
31056: LD_INT 0
31058: PUSH
31059: LD_INT 0
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 0
31068: PUSH
31069: LD_INT 1
31071: NEG
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 1
31079: PUSH
31080: LD_INT 0
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 1
31089: PUSH
31090: LD_INT 1
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 0
31099: PUSH
31100: LD_INT 1
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 1
31109: NEG
31110: PUSH
31111: LD_INT 0
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 1
31120: NEG
31121: PUSH
31122: LD_INT 1
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31139: LD_ADDR_VAR 0 62
31143: PUSH
31144: LD_INT 0
31146: PUSH
31147: LD_INT 0
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 0
31156: PUSH
31157: LD_INT 1
31159: NEG
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 1
31167: PUSH
31168: LD_INT 0
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 1
31177: PUSH
31178: LD_INT 1
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 0
31187: PUSH
31188: LD_INT 1
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 1
31197: NEG
31198: PUSH
31199: LD_INT 0
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 1
31208: NEG
31209: PUSH
31210: LD_INT 1
31212: NEG
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31227: LD_ADDR_VAR 0 63
31231: PUSH
31232: LD_INT 0
31234: PUSH
31235: LD_INT 0
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 0
31244: PUSH
31245: LD_INT 1
31247: NEG
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 1
31255: PUSH
31256: LD_INT 0
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 1
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 0
31275: PUSH
31276: LD_INT 1
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 1
31285: NEG
31286: PUSH
31287: LD_INT 0
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 1
31296: NEG
31297: PUSH
31298: LD_INT 1
31300: NEG
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31315: LD_ADDR_VAR 0 64
31319: PUSH
31320: LD_INT 0
31322: PUSH
31323: LD_INT 0
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 0
31332: PUSH
31333: LD_INT 1
31335: NEG
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 1
31343: PUSH
31344: LD_INT 0
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 1
31353: PUSH
31354: LD_INT 1
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 0
31363: PUSH
31364: LD_INT 1
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 1
31373: NEG
31374: PUSH
31375: LD_INT 0
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 1
31384: NEG
31385: PUSH
31386: LD_INT 1
31388: NEG
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: ST_TO_ADDR
// end ; 1 :
31403: GO 37300
31405: LD_INT 1
31407: DOUBLE
31408: EQUAL
31409: IFTRUE 31413
31411: GO 34036
31413: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31414: LD_ADDR_VAR 0 11
31418: PUSH
31419: LD_INT 1
31421: NEG
31422: PUSH
31423: LD_INT 3
31425: NEG
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 0
31433: PUSH
31434: LD_INT 3
31436: NEG
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 1
31444: PUSH
31445: LD_INT 2
31447: NEG
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: LIST
31457: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31458: LD_ADDR_VAR 0 12
31462: PUSH
31463: LD_INT 2
31465: PUSH
31466: LD_INT 1
31468: NEG
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 3
31476: PUSH
31477: LD_INT 0
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 3
31486: PUSH
31487: LD_INT 1
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: LIST
31498: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31499: LD_ADDR_VAR 0 13
31503: PUSH
31504: LD_INT 3
31506: PUSH
31507: LD_INT 2
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 3
31516: PUSH
31517: LD_INT 3
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 2
31526: PUSH
31527: LD_INT 3
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: LIST
31538: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31539: LD_ADDR_VAR 0 14
31543: PUSH
31544: LD_INT 1
31546: PUSH
31547: LD_INT 3
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 0
31556: PUSH
31557: LD_INT 3
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 1
31566: NEG
31567: PUSH
31568: LD_INT 2
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: LIST
31579: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31580: LD_ADDR_VAR 0 15
31584: PUSH
31585: LD_INT 2
31587: NEG
31588: PUSH
31589: LD_INT 1
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 3
31598: NEG
31599: PUSH
31600: LD_INT 0
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 3
31609: NEG
31610: PUSH
31611: LD_INT 1
31613: NEG
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: LIST
31623: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31624: LD_ADDR_VAR 0 16
31628: PUSH
31629: LD_INT 2
31631: NEG
31632: PUSH
31633: LD_INT 3
31635: NEG
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 3
31643: NEG
31644: PUSH
31645: LD_INT 2
31647: NEG
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 3
31655: NEG
31656: PUSH
31657: LD_INT 3
31659: NEG
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: LIST
31669: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31670: LD_ADDR_VAR 0 17
31674: PUSH
31675: LD_INT 1
31677: NEG
31678: PUSH
31679: LD_INT 3
31681: NEG
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 0
31689: PUSH
31690: LD_INT 3
31692: NEG
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 1
31700: PUSH
31701: LD_INT 2
31703: NEG
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: LIST
31713: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31714: LD_ADDR_VAR 0 18
31718: PUSH
31719: LD_INT 2
31721: PUSH
31722: LD_INT 1
31724: NEG
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 3
31732: PUSH
31733: LD_INT 0
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 3
31742: PUSH
31743: LD_INT 1
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: LIST
31754: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31755: LD_ADDR_VAR 0 19
31759: PUSH
31760: LD_INT 3
31762: PUSH
31763: LD_INT 2
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 3
31772: PUSH
31773: LD_INT 3
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 2
31782: PUSH
31783: LD_INT 3
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: LIST
31794: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31795: LD_ADDR_VAR 0 20
31799: PUSH
31800: LD_INT 1
31802: PUSH
31803: LD_INT 3
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 0
31812: PUSH
31813: LD_INT 3
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 1
31822: NEG
31823: PUSH
31824: LD_INT 2
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: LIST
31835: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31836: LD_ADDR_VAR 0 21
31840: PUSH
31841: LD_INT 2
31843: NEG
31844: PUSH
31845: LD_INT 1
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 3
31854: NEG
31855: PUSH
31856: LD_INT 0
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 3
31865: NEG
31866: PUSH
31867: LD_INT 1
31869: NEG
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: LIST
31879: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31880: LD_ADDR_VAR 0 22
31884: PUSH
31885: LD_INT 2
31887: NEG
31888: PUSH
31889: LD_INT 3
31891: NEG
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 3
31899: NEG
31900: PUSH
31901: LD_INT 2
31903: NEG
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 3
31911: NEG
31912: PUSH
31913: LD_INT 3
31915: NEG
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: LIST
31925: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
31926: LD_ADDR_VAR 0 23
31930: PUSH
31931: LD_INT 0
31933: PUSH
31934: LD_INT 3
31936: NEG
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 1
31944: NEG
31945: PUSH
31946: LD_INT 4
31948: NEG
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 1
31956: PUSH
31957: LD_INT 3
31959: NEG
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: LIST
31969: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
31970: LD_ADDR_VAR 0 24
31974: PUSH
31975: LD_INT 3
31977: PUSH
31978: LD_INT 0
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 3
31987: PUSH
31988: LD_INT 1
31990: NEG
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 4
31998: PUSH
31999: LD_INT 1
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: LIST
32010: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
32011: LD_ADDR_VAR 0 25
32015: PUSH
32016: LD_INT 3
32018: PUSH
32019: LD_INT 3
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 4
32028: PUSH
32029: LD_INT 3
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 3
32038: PUSH
32039: LD_INT 4
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: LIST
32050: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
32051: LD_ADDR_VAR 0 26
32055: PUSH
32056: LD_INT 0
32058: PUSH
32059: LD_INT 3
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 1
32068: PUSH
32069: LD_INT 4
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 1
32078: NEG
32079: PUSH
32080: LD_INT 3
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: LIST
32091: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
32092: LD_ADDR_VAR 0 27
32096: PUSH
32097: LD_INT 3
32099: NEG
32100: PUSH
32101: LD_INT 0
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 3
32110: NEG
32111: PUSH
32112: LD_INT 1
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 4
32121: NEG
32122: PUSH
32123: LD_INT 1
32125: NEG
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: LIST
32135: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
32136: LD_ADDR_VAR 0 28
32140: PUSH
32141: LD_INT 3
32143: NEG
32144: PUSH
32145: LD_INT 3
32147: NEG
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 3
32155: NEG
32156: PUSH
32157: LD_INT 4
32159: NEG
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 4
32167: NEG
32168: PUSH
32169: LD_INT 3
32171: NEG
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: LIST
32181: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
32182: LD_ADDR_VAR 0 29
32186: PUSH
32187: LD_INT 1
32189: NEG
32190: PUSH
32191: LD_INT 3
32193: NEG
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 0
32201: PUSH
32202: LD_INT 3
32204: NEG
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 1
32212: PUSH
32213: LD_INT 2
32215: NEG
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 1
32223: NEG
32224: PUSH
32225: LD_INT 4
32227: NEG
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 0
32235: PUSH
32236: LD_INT 4
32238: NEG
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 1
32246: PUSH
32247: LD_INT 3
32249: NEG
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 1
32257: NEG
32258: PUSH
32259: LD_INT 5
32261: NEG
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 0
32269: PUSH
32270: LD_INT 5
32272: NEG
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 1
32280: PUSH
32281: LD_INT 4
32283: NEG
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 1
32291: NEG
32292: PUSH
32293: LD_INT 6
32295: NEG
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 0
32303: PUSH
32304: LD_INT 6
32306: NEG
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 1
32314: PUSH
32315: LD_INT 5
32317: NEG
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
32337: LD_ADDR_VAR 0 30
32341: PUSH
32342: LD_INT 2
32344: PUSH
32345: LD_INT 1
32347: NEG
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 3
32355: PUSH
32356: LD_INT 0
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 3
32365: PUSH
32366: LD_INT 1
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 3
32375: PUSH
32376: LD_INT 1
32378: NEG
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 4
32386: PUSH
32387: LD_INT 0
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: PUSH
32394: LD_INT 4
32396: PUSH
32397: LD_INT 1
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PUSH
32404: LD_INT 4
32406: PUSH
32407: LD_INT 1
32409: NEG
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 5
32417: PUSH
32418: LD_INT 0
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 5
32427: PUSH
32428: LD_INT 1
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 5
32437: PUSH
32438: LD_INT 1
32440: NEG
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 6
32448: PUSH
32449: LD_INT 0
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 6
32458: PUSH
32459: LD_INT 1
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
32480: LD_ADDR_VAR 0 31
32484: PUSH
32485: LD_INT 3
32487: PUSH
32488: LD_INT 2
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 3
32497: PUSH
32498: LD_INT 3
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 2
32507: PUSH
32508: LD_INT 3
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 4
32517: PUSH
32518: LD_INT 3
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 4
32527: PUSH
32528: LD_INT 4
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 3
32537: PUSH
32538: LD_INT 4
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 5
32547: PUSH
32548: LD_INT 4
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 5
32557: PUSH
32558: LD_INT 5
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 4
32567: PUSH
32568: LD_INT 5
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 6
32577: PUSH
32578: LD_INT 5
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 6
32587: PUSH
32588: LD_INT 6
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 5
32597: PUSH
32598: LD_INT 6
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
32619: LD_ADDR_VAR 0 32
32623: PUSH
32624: LD_INT 1
32626: PUSH
32627: LD_INT 3
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 0
32636: PUSH
32637: LD_INT 3
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 1
32646: NEG
32647: PUSH
32648: LD_INT 2
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 1
32657: PUSH
32658: LD_INT 4
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 0
32667: PUSH
32668: LD_INT 4
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 1
32677: NEG
32678: PUSH
32679: LD_INT 3
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 1
32688: PUSH
32689: LD_INT 5
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 0
32698: PUSH
32699: LD_INT 5
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 1
32708: NEG
32709: PUSH
32710: LD_INT 4
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 1
32719: PUSH
32720: LD_INT 6
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 0
32729: PUSH
32730: LD_INT 6
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 1
32739: NEG
32740: PUSH
32741: LD_INT 5
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
32762: LD_ADDR_VAR 0 33
32766: PUSH
32767: LD_INT 2
32769: NEG
32770: PUSH
32771: LD_INT 1
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 3
32780: NEG
32781: PUSH
32782: LD_INT 0
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 3
32791: NEG
32792: PUSH
32793: LD_INT 1
32795: NEG
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 3
32803: NEG
32804: PUSH
32805: LD_INT 1
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 4
32814: NEG
32815: PUSH
32816: LD_INT 0
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 4
32825: NEG
32826: PUSH
32827: LD_INT 1
32829: NEG
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 4
32837: NEG
32838: PUSH
32839: LD_INT 1
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 5
32848: NEG
32849: PUSH
32850: LD_INT 0
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 5
32859: NEG
32860: PUSH
32861: LD_INT 1
32863: NEG
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 5
32871: NEG
32872: PUSH
32873: LD_INT 1
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 6
32882: NEG
32883: PUSH
32884: LD_INT 0
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 6
32893: NEG
32894: PUSH
32895: LD_INT 1
32897: NEG
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
32917: LD_ADDR_VAR 0 34
32921: PUSH
32922: LD_INT 2
32924: NEG
32925: PUSH
32926: LD_INT 3
32928: NEG
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 3
32936: NEG
32937: PUSH
32938: LD_INT 2
32940: NEG
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 3
32948: NEG
32949: PUSH
32950: LD_INT 3
32952: NEG
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 3
32960: NEG
32961: PUSH
32962: LD_INT 4
32964: NEG
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 4
32972: NEG
32973: PUSH
32974: LD_INT 3
32976: NEG
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 4
32984: NEG
32985: PUSH
32986: LD_INT 4
32988: NEG
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 4
32996: NEG
32997: PUSH
32998: LD_INT 5
33000: NEG
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 5
33008: NEG
33009: PUSH
33010: LD_INT 4
33012: NEG
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 5
33020: NEG
33021: PUSH
33022: LD_INT 5
33024: NEG
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 5
33032: NEG
33033: PUSH
33034: LD_INT 6
33036: NEG
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 6
33044: NEG
33045: PUSH
33046: LD_INT 5
33048: NEG
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 6
33056: NEG
33057: PUSH
33058: LD_INT 6
33060: NEG
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
33080: LD_ADDR_VAR 0 41
33084: PUSH
33085: LD_INT 0
33087: PUSH
33088: LD_INT 2
33090: NEG
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 1
33098: NEG
33099: PUSH
33100: LD_INT 3
33102: NEG
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 1
33110: PUSH
33111: LD_INT 2
33113: NEG
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: LIST
33123: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
33124: LD_ADDR_VAR 0 42
33128: PUSH
33129: LD_INT 2
33131: PUSH
33132: LD_INT 0
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 2
33141: PUSH
33142: LD_INT 1
33144: NEG
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 3
33152: PUSH
33153: LD_INT 1
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: LIST
33164: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
33165: LD_ADDR_VAR 0 43
33169: PUSH
33170: LD_INT 2
33172: PUSH
33173: LD_INT 2
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 3
33182: PUSH
33183: LD_INT 2
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 2
33192: PUSH
33193: LD_INT 3
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: LIST
33204: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
33205: LD_ADDR_VAR 0 44
33209: PUSH
33210: LD_INT 0
33212: PUSH
33213: LD_INT 2
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 1
33222: PUSH
33223: LD_INT 3
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 1
33232: NEG
33233: PUSH
33234: LD_INT 2
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: LIST
33245: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33246: LD_ADDR_VAR 0 45
33250: PUSH
33251: LD_INT 2
33253: NEG
33254: PUSH
33255: LD_INT 0
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 2
33264: NEG
33265: PUSH
33266: LD_INT 1
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 3
33275: NEG
33276: PUSH
33277: LD_INT 1
33279: NEG
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: LIST
33289: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
33290: LD_ADDR_VAR 0 46
33294: PUSH
33295: LD_INT 2
33297: NEG
33298: PUSH
33299: LD_INT 2
33301: NEG
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 2
33309: NEG
33310: PUSH
33311: LD_INT 3
33313: NEG
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 3
33321: NEG
33322: PUSH
33323: LD_INT 2
33325: NEG
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: LIST
33335: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
33336: LD_ADDR_VAR 0 47
33340: PUSH
33341: LD_INT 2
33343: NEG
33344: PUSH
33345: LD_INT 3
33347: NEG
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 1
33355: NEG
33356: PUSH
33357: LD_INT 3
33359: NEG
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33369: LD_ADDR_VAR 0 48
33373: PUSH
33374: LD_INT 1
33376: PUSH
33377: LD_INT 2
33379: NEG
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 2
33387: PUSH
33388: LD_INT 1
33390: NEG
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
33400: LD_ADDR_VAR 0 49
33404: PUSH
33405: LD_INT 3
33407: PUSH
33408: LD_INT 1
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 3
33417: PUSH
33418: LD_INT 2
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
33429: LD_ADDR_VAR 0 50
33433: PUSH
33434: LD_INT 2
33436: PUSH
33437: LD_INT 3
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 1
33446: PUSH
33447: LD_INT 3
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33458: LD_ADDR_VAR 0 51
33462: PUSH
33463: LD_INT 1
33465: NEG
33466: PUSH
33467: LD_INT 2
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 2
33476: NEG
33477: PUSH
33478: LD_INT 1
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33489: LD_ADDR_VAR 0 52
33493: PUSH
33494: LD_INT 3
33496: NEG
33497: PUSH
33498: LD_INT 1
33500: NEG
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 3
33508: NEG
33509: PUSH
33510: LD_INT 2
33512: NEG
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33522: LD_ADDR_VAR 0 53
33526: PUSH
33527: LD_INT 1
33529: NEG
33530: PUSH
33531: LD_INT 3
33533: NEG
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 0
33541: PUSH
33542: LD_INT 3
33544: NEG
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 1
33552: PUSH
33553: LD_INT 2
33555: NEG
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: LIST
33565: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33566: LD_ADDR_VAR 0 54
33570: PUSH
33571: LD_INT 2
33573: PUSH
33574: LD_INT 1
33576: NEG
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 3
33584: PUSH
33585: LD_INT 0
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 3
33594: PUSH
33595: LD_INT 1
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: LIST
33606: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33607: LD_ADDR_VAR 0 55
33611: PUSH
33612: LD_INT 3
33614: PUSH
33615: LD_INT 2
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 3
33624: PUSH
33625: LD_INT 3
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 2
33634: PUSH
33635: LD_INT 3
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: LIST
33646: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33647: LD_ADDR_VAR 0 56
33651: PUSH
33652: LD_INT 1
33654: PUSH
33655: LD_INT 3
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 0
33664: PUSH
33665: LD_INT 3
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 1
33674: NEG
33675: PUSH
33676: LD_INT 2
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: LIST
33687: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33688: LD_ADDR_VAR 0 57
33692: PUSH
33693: LD_INT 2
33695: NEG
33696: PUSH
33697: LD_INT 1
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 3
33706: NEG
33707: PUSH
33708: LD_INT 0
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 3
33717: NEG
33718: PUSH
33719: LD_INT 1
33721: NEG
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: LIST
33731: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33732: LD_ADDR_VAR 0 58
33736: PUSH
33737: LD_INT 2
33739: NEG
33740: PUSH
33741: LD_INT 3
33743: NEG
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 3
33751: NEG
33752: PUSH
33753: LD_INT 2
33755: NEG
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 3
33763: NEG
33764: PUSH
33765: LD_INT 3
33767: NEG
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: LIST
33777: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
33778: LD_ADDR_VAR 0 59
33782: PUSH
33783: LD_INT 1
33785: NEG
33786: PUSH
33787: LD_INT 2
33789: NEG
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 0
33797: PUSH
33798: LD_INT 2
33800: NEG
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 1
33808: PUSH
33809: LD_INT 1
33811: NEG
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: LIST
33821: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33822: LD_ADDR_VAR 0 60
33826: PUSH
33827: LD_INT 1
33829: PUSH
33830: LD_INT 1
33832: NEG
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 2
33840: PUSH
33841: LD_INT 0
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 2
33850: PUSH
33851: LD_INT 1
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: LIST
33862: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33863: LD_ADDR_VAR 0 61
33867: PUSH
33868: LD_INT 2
33870: PUSH
33871: LD_INT 1
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 2
33880: PUSH
33881: LD_INT 2
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 1
33890: PUSH
33891: LD_INT 2
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: LIST
33902: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33903: LD_ADDR_VAR 0 62
33907: PUSH
33908: LD_INT 1
33910: PUSH
33911: LD_INT 2
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 0
33920: PUSH
33921: LD_INT 2
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 1
33930: NEG
33931: PUSH
33932: LD_INT 1
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: LIST
33943: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33944: LD_ADDR_VAR 0 63
33948: PUSH
33949: LD_INT 1
33951: NEG
33952: PUSH
33953: LD_INT 1
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 2
33962: NEG
33963: PUSH
33964: LD_INT 0
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 2
33973: NEG
33974: PUSH
33975: LD_INT 1
33977: NEG
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: LIST
33987: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33988: LD_ADDR_VAR 0 64
33992: PUSH
33993: LD_INT 1
33995: NEG
33996: PUSH
33997: LD_INT 2
33999: NEG
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 2
34007: NEG
34008: PUSH
34009: LD_INT 1
34011: NEG
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 2
34019: NEG
34020: PUSH
34021: LD_INT 2
34023: NEG
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: LIST
34033: ST_TO_ADDR
// end ; 2 :
34034: GO 37300
34036: LD_INT 2
34038: DOUBLE
34039: EQUAL
34040: IFTRUE 34044
34042: GO 37299
34044: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
34045: LD_ADDR_VAR 0 29
34049: PUSH
34050: LD_INT 4
34052: PUSH
34053: LD_INT 0
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 4
34062: PUSH
34063: LD_INT 1
34065: NEG
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 5
34073: PUSH
34074: LD_INT 0
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 5
34083: PUSH
34084: LD_INT 1
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 4
34093: PUSH
34094: LD_INT 1
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 3
34103: PUSH
34104: LD_INT 0
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 3
34113: PUSH
34114: LD_INT 1
34116: NEG
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 3
34124: PUSH
34125: LD_INT 2
34127: NEG
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 5
34135: PUSH
34136: LD_INT 2
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 3
34145: PUSH
34146: LD_INT 3
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 3
34155: PUSH
34156: LD_INT 2
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 4
34165: PUSH
34166: LD_INT 3
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 4
34175: PUSH
34176: LD_INT 4
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 3
34185: PUSH
34186: LD_INT 4
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 2
34195: PUSH
34196: LD_INT 3
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 2
34205: PUSH
34206: LD_INT 2
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 4
34215: PUSH
34216: LD_INT 2
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 2
34225: PUSH
34226: LD_INT 4
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 0
34235: PUSH
34236: LD_INT 4
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 0
34245: PUSH
34246: LD_INT 3
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 1
34255: PUSH
34256: LD_INT 4
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 1
34265: PUSH
34266: LD_INT 5
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 0
34275: PUSH
34276: LD_INT 5
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 1
34285: NEG
34286: PUSH
34287: LD_INT 4
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 1
34296: NEG
34297: PUSH
34298: LD_INT 3
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 2
34307: PUSH
34308: LD_INT 5
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 2
34317: NEG
34318: PUSH
34319: LD_INT 3
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 3
34328: NEG
34329: PUSH
34330: LD_INT 0
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 3
34339: NEG
34340: PUSH
34341: LD_INT 1
34343: NEG
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 2
34351: NEG
34352: PUSH
34353: LD_INT 0
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 2
34362: NEG
34363: PUSH
34364: LD_INT 1
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 3
34373: NEG
34374: PUSH
34375: LD_INT 1
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 4
34384: NEG
34385: PUSH
34386: LD_INT 0
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 4
34395: NEG
34396: PUSH
34397: LD_INT 1
34399: NEG
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 4
34407: NEG
34408: PUSH
34409: LD_INT 2
34411: NEG
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 2
34419: NEG
34420: PUSH
34421: LD_INT 2
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 4
34430: NEG
34431: PUSH
34432: LD_INT 4
34434: NEG
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 4
34442: NEG
34443: PUSH
34444: LD_INT 5
34446: NEG
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 3
34454: NEG
34455: PUSH
34456: LD_INT 4
34458: NEG
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 3
34466: NEG
34467: PUSH
34468: LD_INT 3
34470: NEG
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 4
34478: NEG
34479: PUSH
34480: LD_INT 3
34482: NEG
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 5
34490: NEG
34491: PUSH
34492: LD_INT 4
34494: NEG
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 5
34502: NEG
34503: PUSH
34504: LD_INT 5
34506: NEG
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 3
34514: NEG
34515: PUSH
34516: LD_INT 5
34518: NEG
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 5
34526: NEG
34527: PUSH
34528: LD_INT 3
34530: NEG
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
34583: LD_ADDR_VAR 0 30
34587: PUSH
34588: LD_INT 4
34590: PUSH
34591: LD_INT 4
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 4
34600: PUSH
34601: LD_INT 3
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 5
34610: PUSH
34611: LD_INT 4
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 5
34620: PUSH
34621: LD_INT 5
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 4
34630: PUSH
34631: LD_INT 5
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 3
34640: PUSH
34641: LD_INT 4
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 3
34650: PUSH
34651: LD_INT 3
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 5
34660: PUSH
34661: LD_INT 3
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 3
34670: PUSH
34671: LD_INT 5
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 0
34680: PUSH
34681: LD_INT 3
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PUSH
34688: LD_INT 0
34690: PUSH
34691: LD_INT 2
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 1
34700: PUSH
34701: LD_INT 3
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 1
34710: PUSH
34711: LD_INT 4
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 0
34720: PUSH
34721: LD_INT 4
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 1
34730: NEG
34731: PUSH
34732: LD_INT 3
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 1
34741: NEG
34742: PUSH
34743: LD_INT 2
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 2
34752: PUSH
34753: LD_INT 4
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 2
34762: NEG
34763: PUSH
34764: LD_INT 2
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 4
34773: NEG
34774: PUSH
34775: LD_INT 0
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 4
34784: NEG
34785: PUSH
34786: LD_INT 1
34788: NEG
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 3
34796: NEG
34797: PUSH
34798: LD_INT 0
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 3
34807: NEG
34808: PUSH
34809: LD_INT 1
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 4
34818: NEG
34819: PUSH
34820: LD_INT 1
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 5
34829: NEG
34830: PUSH
34831: LD_INT 0
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: LD_INT 5
34840: NEG
34841: PUSH
34842: LD_INT 1
34844: NEG
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 5
34852: NEG
34853: PUSH
34854: LD_INT 2
34856: NEG
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 3
34864: NEG
34865: PUSH
34866: LD_INT 2
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 3
34875: NEG
34876: PUSH
34877: LD_INT 3
34879: NEG
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 3
34887: NEG
34888: PUSH
34889: LD_INT 4
34891: NEG
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 2
34899: NEG
34900: PUSH
34901: LD_INT 3
34903: NEG
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 2
34911: NEG
34912: PUSH
34913: LD_INT 2
34915: NEG
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 3
34923: NEG
34924: PUSH
34925: LD_INT 2
34927: NEG
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 4
34935: NEG
34936: PUSH
34937: LD_INT 3
34939: NEG
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 4
34947: NEG
34948: PUSH
34949: LD_INT 4
34951: NEG
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 2
34959: NEG
34960: PUSH
34961: LD_INT 4
34963: NEG
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 4
34971: NEG
34972: PUSH
34973: LD_INT 2
34975: NEG
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 0
34983: PUSH
34984: LD_INT 4
34986: NEG
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 0
34994: PUSH
34995: LD_INT 5
34997: NEG
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 1
35005: PUSH
35006: LD_INT 4
35008: NEG
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 1
35016: PUSH
35017: LD_INT 3
35019: NEG
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 0
35027: PUSH
35028: LD_INT 3
35030: NEG
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 1
35038: NEG
35039: PUSH
35040: LD_INT 4
35042: NEG
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 1
35050: NEG
35051: PUSH
35052: LD_INT 5
35054: NEG
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 2
35062: PUSH
35063: LD_INT 3
35065: NEG
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 2
35073: NEG
35074: PUSH
35075: LD_INT 5
35077: NEG
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
35130: LD_ADDR_VAR 0 31
35134: PUSH
35135: LD_INT 0
35137: PUSH
35138: LD_INT 4
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 0
35147: PUSH
35148: LD_INT 3
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 1
35157: PUSH
35158: LD_INT 4
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 1
35167: PUSH
35168: LD_INT 5
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 0
35177: PUSH
35178: LD_INT 5
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: LD_INT 1
35187: NEG
35188: PUSH
35189: LD_INT 4
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 1
35198: NEG
35199: PUSH
35200: LD_INT 3
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 2
35209: PUSH
35210: LD_INT 5
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 2
35219: NEG
35220: PUSH
35221: LD_INT 3
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 3
35230: NEG
35231: PUSH
35232: LD_INT 0
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 3
35241: NEG
35242: PUSH
35243: LD_INT 1
35245: NEG
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 2
35253: NEG
35254: PUSH
35255: LD_INT 0
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 2
35264: NEG
35265: PUSH
35266: LD_INT 1
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 3
35275: NEG
35276: PUSH
35277: LD_INT 1
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 4
35286: NEG
35287: PUSH
35288: LD_INT 0
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 4
35297: NEG
35298: PUSH
35299: LD_INT 1
35301: NEG
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 4
35309: NEG
35310: PUSH
35311: LD_INT 2
35313: NEG
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 2
35321: NEG
35322: PUSH
35323: LD_INT 2
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 4
35332: NEG
35333: PUSH
35334: LD_INT 4
35336: NEG
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 4
35344: NEG
35345: PUSH
35346: LD_INT 5
35348: NEG
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 3
35356: NEG
35357: PUSH
35358: LD_INT 4
35360: NEG
35361: PUSH
35362: EMPTY
35363: LIST
35364: LIST
35365: PUSH
35366: LD_INT 3
35368: NEG
35369: PUSH
35370: LD_INT 3
35372: NEG
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: LD_INT 4
35380: NEG
35381: PUSH
35382: LD_INT 3
35384: NEG
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 5
35392: NEG
35393: PUSH
35394: LD_INT 4
35396: NEG
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 5
35404: NEG
35405: PUSH
35406: LD_INT 5
35408: NEG
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 3
35416: NEG
35417: PUSH
35418: LD_INT 5
35420: NEG
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 5
35428: NEG
35429: PUSH
35430: LD_INT 3
35432: NEG
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 0
35440: PUSH
35441: LD_INT 3
35443: NEG
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 0
35451: PUSH
35452: LD_INT 4
35454: NEG
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 1
35462: PUSH
35463: LD_INT 3
35465: NEG
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 1
35473: PUSH
35474: LD_INT 2
35476: NEG
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 0
35484: PUSH
35485: LD_INT 2
35487: NEG
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 1
35495: NEG
35496: PUSH
35497: LD_INT 3
35499: NEG
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 1
35507: NEG
35508: PUSH
35509: LD_INT 4
35511: NEG
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 2
35519: PUSH
35520: LD_INT 2
35522: NEG
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 2
35530: NEG
35531: PUSH
35532: LD_INT 4
35534: NEG
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 4
35542: PUSH
35543: LD_INT 0
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 4
35552: PUSH
35553: LD_INT 1
35555: NEG
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 5
35563: PUSH
35564: LD_INT 0
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 5
35573: PUSH
35574: LD_INT 1
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 4
35583: PUSH
35584: LD_INT 1
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 3
35593: PUSH
35594: LD_INT 0
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 3
35603: PUSH
35604: LD_INT 1
35606: NEG
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 3
35614: PUSH
35615: LD_INT 2
35617: NEG
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 5
35625: PUSH
35626: LD_INT 2
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
35680: LD_ADDR_VAR 0 32
35684: PUSH
35685: LD_INT 4
35687: NEG
35688: PUSH
35689: LD_INT 0
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 4
35698: NEG
35699: PUSH
35700: LD_INT 1
35702: NEG
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 3
35710: NEG
35711: PUSH
35712: LD_INT 0
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 3
35721: NEG
35722: PUSH
35723: LD_INT 1
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 4
35732: NEG
35733: PUSH
35734: LD_INT 1
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 5
35743: NEG
35744: PUSH
35745: LD_INT 0
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 5
35754: NEG
35755: PUSH
35756: LD_INT 1
35758: NEG
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 5
35766: NEG
35767: PUSH
35768: LD_INT 2
35770: NEG
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 3
35778: NEG
35779: PUSH
35780: LD_INT 2
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 3
35789: NEG
35790: PUSH
35791: LD_INT 3
35793: NEG
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 3
35801: NEG
35802: PUSH
35803: LD_INT 4
35805: NEG
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 2
35813: NEG
35814: PUSH
35815: LD_INT 3
35817: NEG
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 2
35825: NEG
35826: PUSH
35827: LD_INT 2
35829: NEG
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 3
35837: NEG
35838: PUSH
35839: LD_INT 2
35841: NEG
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 4
35849: NEG
35850: PUSH
35851: LD_INT 3
35853: NEG
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 4
35861: NEG
35862: PUSH
35863: LD_INT 4
35865: NEG
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 2
35873: NEG
35874: PUSH
35875: LD_INT 4
35877: NEG
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 4
35885: NEG
35886: PUSH
35887: LD_INT 2
35889: NEG
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 0
35897: PUSH
35898: LD_INT 4
35900: NEG
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 0
35908: PUSH
35909: LD_INT 5
35911: NEG
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 1
35919: PUSH
35920: LD_INT 4
35922: NEG
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 1
35930: PUSH
35931: LD_INT 3
35933: NEG
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 0
35941: PUSH
35942: LD_INT 3
35944: NEG
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 1
35952: NEG
35953: PUSH
35954: LD_INT 4
35956: NEG
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: PUSH
35962: LD_INT 1
35964: NEG
35965: PUSH
35966: LD_INT 5
35968: NEG
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 2
35976: PUSH
35977: LD_INT 3
35979: NEG
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 2
35987: NEG
35988: PUSH
35989: LD_INT 5
35991: NEG
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 3
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 3
36009: PUSH
36010: LD_INT 1
36012: NEG
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 4
36020: PUSH
36021: LD_INT 0
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 4
36030: PUSH
36031: LD_INT 1
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 3
36040: PUSH
36041: LD_INT 1
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 2
36050: PUSH
36051: LD_INT 0
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 2
36060: PUSH
36061: LD_INT 1
36063: NEG
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 2
36071: PUSH
36072: LD_INT 2
36074: NEG
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 4
36082: PUSH
36083: LD_INT 2
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 4
36092: PUSH
36093: LD_INT 4
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 4
36102: PUSH
36103: LD_INT 3
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 5
36112: PUSH
36113: LD_INT 4
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 5
36122: PUSH
36123: LD_INT 5
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 4
36132: PUSH
36133: LD_INT 5
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 3
36142: PUSH
36143: LD_INT 4
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 3
36152: PUSH
36153: LD_INT 3
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 5
36162: PUSH
36163: LD_INT 3
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 3
36172: PUSH
36173: LD_INT 5
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
36227: LD_ADDR_VAR 0 33
36231: PUSH
36232: LD_INT 4
36234: NEG
36235: PUSH
36236: LD_INT 4
36238: NEG
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 4
36246: NEG
36247: PUSH
36248: LD_INT 5
36250: NEG
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 3
36258: NEG
36259: PUSH
36260: LD_INT 4
36262: NEG
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 3
36270: NEG
36271: PUSH
36272: LD_INT 3
36274: NEG
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 4
36282: NEG
36283: PUSH
36284: LD_INT 3
36286: NEG
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 5
36294: NEG
36295: PUSH
36296: LD_INT 4
36298: NEG
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 5
36306: NEG
36307: PUSH
36308: LD_INT 5
36310: NEG
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 3
36318: NEG
36319: PUSH
36320: LD_INT 5
36322: NEG
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: LD_INT 5
36330: NEG
36331: PUSH
36332: LD_INT 3
36334: NEG
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 0
36342: PUSH
36343: LD_INT 3
36345: NEG
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: LD_INT 0
36353: PUSH
36354: LD_INT 4
36356: NEG
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 1
36364: PUSH
36365: LD_INT 3
36367: NEG
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 1
36375: PUSH
36376: LD_INT 2
36378: NEG
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 0
36386: PUSH
36387: LD_INT 2
36389: NEG
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 1
36397: NEG
36398: PUSH
36399: LD_INT 3
36401: NEG
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 1
36409: NEG
36410: PUSH
36411: LD_INT 4
36413: NEG
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 2
36421: PUSH
36422: LD_INT 2
36424: NEG
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 2
36432: NEG
36433: PUSH
36434: LD_INT 4
36436: NEG
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 4
36444: PUSH
36445: LD_INT 0
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 4
36454: PUSH
36455: LD_INT 1
36457: NEG
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 5
36465: PUSH
36466: LD_INT 0
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 5
36475: PUSH
36476: LD_INT 1
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 4
36485: PUSH
36486: LD_INT 1
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 3
36495: PUSH
36496: LD_INT 0
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 3
36505: PUSH
36506: LD_INT 1
36508: NEG
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: LD_INT 3
36516: PUSH
36517: LD_INT 2
36519: NEG
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 5
36527: PUSH
36528: LD_INT 2
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 3
36537: PUSH
36538: LD_INT 3
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 3
36547: PUSH
36548: LD_INT 2
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 4
36557: PUSH
36558: LD_INT 3
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 4
36567: PUSH
36568: LD_INT 4
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 3
36577: PUSH
36578: LD_INT 4
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 2
36587: PUSH
36588: LD_INT 3
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 2
36597: PUSH
36598: LD_INT 2
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 4
36607: PUSH
36608: LD_INT 2
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 2
36617: PUSH
36618: LD_INT 4
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 0
36627: PUSH
36628: LD_INT 4
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 0
36637: PUSH
36638: LD_INT 3
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 1
36647: PUSH
36648: LD_INT 4
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 1
36657: PUSH
36658: LD_INT 5
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 0
36667: PUSH
36668: LD_INT 5
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 1
36677: NEG
36678: PUSH
36679: LD_INT 4
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PUSH
36686: LD_INT 1
36688: NEG
36689: PUSH
36690: LD_INT 3
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 2
36699: PUSH
36700: LD_INT 5
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 2
36709: NEG
36710: PUSH
36711: LD_INT 3
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
36765: LD_ADDR_VAR 0 34
36769: PUSH
36770: LD_INT 0
36772: PUSH
36773: LD_INT 4
36775: NEG
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 0
36783: PUSH
36784: LD_INT 5
36786: NEG
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 1
36794: PUSH
36795: LD_INT 4
36797: NEG
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 1
36805: PUSH
36806: LD_INT 3
36808: NEG
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 0
36816: PUSH
36817: LD_INT 3
36819: NEG
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 1
36827: NEG
36828: PUSH
36829: LD_INT 4
36831: NEG
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 1
36839: NEG
36840: PUSH
36841: LD_INT 5
36843: NEG
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 2
36851: PUSH
36852: LD_INT 3
36854: NEG
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 2
36862: NEG
36863: PUSH
36864: LD_INT 5
36866: NEG
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 3
36874: PUSH
36875: LD_INT 0
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 3
36884: PUSH
36885: LD_INT 1
36887: NEG
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 4
36895: PUSH
36896: LD_INT 0
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 4
36905: PUSH
36906: LD_INT 1
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 3
36915: PUSH
36916: LD_INT 1
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 2
36925: PUSH
36926: LD_INT 0
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 2
36935: PUSH
36936: LD_INT 1
36938: NEG
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 2
36946: PUSH
36947: LD_INT 2
36949: NEG
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 4
36957: PUSH
36958: LD_INT 2
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 4
36967: PUSH
36968: LD_INT 4
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 4
36977: PUSH
36978: LD_INT 3
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 5
36987: PUSH
36988: LD_INT 4
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 5
36997: PUSH
36998: LD_INT 5
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 4
37007: PUSH
37008: LD_INT 5
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 3
37017: PUSH
37018: LD_INT 4
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 3
37027: PUSH
37028: LD_INT 3
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 5
37037: PUSH
37038: LD_INT 3
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 3
37047: PUSH
37048: LD_INT 5
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 0
37057: PUSH
37058: LD_INT 3
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 0
37067: PUSH
37068: LD_INT 2
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 1
37077: PUSH
37078: LD_INT 3
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 1
37087: PUSH
37088: LD_INT 4
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 0
37097: PUSH
37098: LD_INT 4
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 1
37107: NEG
37108: PUSH
37109: LD_INT 3
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 1
37118: NEG
37119: PUSH
37120: LD_INT 2
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 2
37129: PUSH
37130: LD_INT 4
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 2
37139: NEG
37140: PUSH
37141: LD_INT 2
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 4
37150: NEG
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 4
37161: NEG
37162: PUSH
37163: LD_INT 1
37165: NEG
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 3
37173: NEG
37174: PUSH
37175: LD_INT 0
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 3
37184: NEG
37185: PUSH
37186: LD_INT 1
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 4
37195: NEG
37196: PUSH
37197: LD_INT 1
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 5
37206: NEG
37207: PUSH
37208: LD_INT 0
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 5
37217: NEG
37218: PUSH
37219: LD_INT 1
37221: NEG
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 5
37229: NEG
37230: PUSH
37231: LD_INT 2
37233: NEG
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 3
37241: NEG
37242: PUSH
37243: LD_INT 2
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: ST_TO_ADDR
// end ; end ;
37297: GO 37300
37299: POP
// case btype of b_depot , b_warehouse :
37300: LD_VAR 0 1
37304: PUSH
37305: LD_INT 0
37307: DOUBLE
37308: EQUAL
37309: IFTRUE 37319
37311: LD_INT 1
37313: DOUBLE
37314: EQUAL
37315: IFTRUE 37319
37317: GO 37520
37319: POP
// case nation of nation_american :
37320: LD_VAR 0 5
37324: PUSH
37325: LD_INT 1
37327: DOUBLE
37328: EQUAL
37329: IFTRUE 37333
37331: GO 37389
37333: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
37334: LD_ADDR_VAR 0 9
37338: PUSH
37339: LD_VAR 0 11
37343: PUSH
37344: LD_VAR 0 12
37348: PUSH
37349: LD_VAR 0 13
37353: PUSH
37354: LD_VAR 0 14
37358: PUSH
37359: LD_VAR 0 15
37363: PUSH
37364: LD_VAR 0 16
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: PUSH
37377: LD_VAR 0 4
37381: PUSH
37382: LD_INT 1
37384: PLUS
37385: ARRAY
37386: ST_TO_ADDR
37387: GO 37518
37389: LD_INT 2
37391: DOUBLE
37392: EQUAL
37393: IFTRUE 37397
37395: GO 37453
37397: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
37398: LD_ADDR_VAR 0 9
37402: PUSH
37403: LD_VAR 0 17
37407: PUSH
37408: LD_VAR 0 18
37412: PUSH
37413: LD_VAR 0 19
37417: PUSH
37418: LD_VAR 0 20
37422: PUSH
37423: LD_VAR 0 21
37427: PUSH
37428: LD_VAR 0 22
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: PUSH
37441: LD_VAR 0 4
37445: PUSH
37446: LD_INT 1
37448: PLUS
37449: ARRAY
37450: ST_TO_ADDR
37451: GO 37518
37453: LD_INT 3
37455: DOUBLE
37456: EQUAL
37457: IFTRUE 37461
37459: GO 37517
37461: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
37462: LD_ADDR_VAR 0 9
37466: PUSH
37467: LD_VAR 0 23
37471: PUSH
37472: LD_VAR 0 24
37476: PUSH
37477: LD_VAR 0 25
37481: PUSH
37482: LD_VAR 0 26
37486: PUSH
37487: LD_VAR 0 27
37491: PUSH
37492: LD_VAR 0 28
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: PUSH
37505: LD_VAR 0 4
37509: PUSH
37510: LD_INT 1
37512: PLUS
37513: ARRAY
37514: ST_TO_ADDR
37515: GO 37518
37517: POP
37518: GO 38073
37520: LD_INT 2
37522: DOUBLE
37523: EQUAL
37524: IFTRUE 37534
37526: LD_INT 3
37528: DOUBLE
37529: EQUAL
37530: IFTRUE 37534
37532: GO 37590
37534: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
37535: LD_ADDR_VAR 0 9
37539: PUSH
37540: LD_VAR 0 29
37544: PUSH
37545: LD_VAR 0 30
37549: PUSH
37550: LD_VAR 0 31
37554: PUSH
37555: LD_VAR 0 32
37559: PUSH
37560: LD_VAR 0 33
37564: PUSH
37565: LD_VAR 0 34
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: PUSH
37578: LD_VAR 0 4
37582: PUSH
37583: LD_INT 1
37585: PLUS
37586: ARRAY
37587: ST_TO_ADDR
37588: GO 38073
37590: LD_INT 16
37592: DOUBLE
37593: EQUAL
37594: IFTRUE 37652
37596: LD_INT 17
37598: DOUBLE
37599: EQUAL
37600: IFTRUE 37652
37602: LD_INT 18
37604: DOUBLE
37605: EQUAL
37606: IFTRUE 37652
37608: LD_INT 19
37610: DOUBLE
37611: EQUAL
37612: IFTRUE 37652
37614: LD_INT 22
37616: DOUBLE
37617: EQUAL
37618: IFTRUE 37652
37620: LD_INT 20
37622: DOUBLE
37623: EQUAL
37624: IFTRUE 37652
37626: LD_INT 21
37628: DOUBLE
37629: EQUAL
37630: IFTRUE 37652
37632: LD_INT 23
37634: DOUBLE
37635: EQUAL
37636: IFTRUE 37652
37638: LD_INT 24
37640: DOUBLE
37641: EQUAL
37642: IFTRUE 37652
37644: LD_INT 25
37646: DOUBLE
37647: EQUAL
37648: IFTRUE 37652
37650: GO 37708
37652: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
37653: LD_ADDR_VAR 0 9
37657: PUSH
37658: LD_VAR 0 35
37662: PUSH
37663: LD_VAR 0 36
37667: PUSH
37668: LD_VAR 0 37
37672: PUSH
37673: LD_VAR 0 38
37677: PUSH
37678: LD_VAR 0 39
37682: PUSH
37683: LD_VAR 0 40
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: PUSH
37696: LD_VAR 0 4
37700: PUSH
37701: LD_INT 1
37703: PLUS
37704: ARRAY
37705: ST_TO_ADDR
37706: GO 38073
37708: LD_INT 6
37710: DOUBLE
37711: EQUAL
37712: IFTRUE 37764
37714: LD_INT 7
37716: DOUBLE
37717: EQUAL
37718: IFTRUE 37764
37720: LD_INT 8
37722: DOUBLE
37723: EQUAL
37724: IFTRUE 37764
37726: LD_INT 13
37728: DOUBLE
37729: EQUAL
37730: IFTRUE 37764
37732: LD_INT 12
37734: DOUBLE
37735: EQUAL
37736: IFTRUE 37764
37738: LD_INT 15
37740: DOUBLE
37741: EQUAL
37742: IFTRUE 37764
37744: LD_INT 11
37746: DOUBLE
37747: EQUAL
37748: IFTRUE 37764
37750: LD_INT 14
37752: DOUBLE
37753: EQUAL
37754: IFTRUE 37764
37756: LD_INT 10
37758: DOUBLE
37759: EQUAL
37760: IFTRUE 37764
37762: GO 37820
37764: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
37765: LD_ADDR_VAR 0 9
37769: PUSH
37770: LD_VAR 0 41
37774: PUSH
37775: LD_VAR 0 42
37779: PUSH
37780: LD_VAR 0 43
37784: PUSH
37785: LD_VAR 0 44
37789: PUSH
37790: LD_VAR 0 45
37794: PUSH
37795: LD_VAR 0 46
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: PUSH
37808: LD_VAR 0 4
37812: PUSH
37813: LD_INT 1
37815: PLUS
37816: ARRAY
37817: ST_TO_ADDR
37818: GO 38073
37820: LD_INT 36
37822: DOUBLE
37823: EQUAL
37824: IFTRUE 37828
37826: GO 37884
37828: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
37829: LD_ADDR_VAR 0 9
37833: PUSH
37834: LD_VAR 0 47
37838: PUSH
37839: LD_VAR 0 48
37843: PUSH
37844: LD_VAR 0 49
37848: PUSH
37849: LD_VAR 0 50
37853: PUSH
37854: LD_VAR 0 51
37858: PUSH
37859: LD_VAR 0 52
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: PUSH
37872: LD_VAR 0 4
37876: PUSH
37877: LD_INT 1
37879: PLUS
37880: ARRAY
37881: ST_TO_ADDR
37882: GO 38073
37884: LD_INT 4
37886: DOUBLE
37887: EQUAL
37888: IFTRUE 37910
37890: LD_INT 5
37892: DOUBLE
37893: EQUAL
37894: IFTRUE 37910
37896: LD_INT 34
37898: DOUBLE
37899: EQUAL
37900: IFTRUE 37910
37902: LD_INT 37
37904: DOUBLE
37905: EQUAL
37906: IFTRUE 37910
37908: GO 37966
37910: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
37911: LD_ADDR_VAR 0 9
37915: PUSH
37916: LD_VAR 0 53
37920: PUSH
37921: LD_VAR 0 54
37925: PUSH
37926: LD_VAR 0 55
37930: PUSH
37931: LD_VAR 0 56
37935: PUSH
37936: LD_VAR 0 57
37940: PUSH
37941: LD_VAR 0 58
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: PUSH
37954: LD_VAR 0 4
37958: PUSH
37959: LD_INT 1
37961: PLUS
37962: ARRAY
37963: ST_TO_ADDR
37964: GO 38073
37966: LD_INT 31
37968: DOUBLE
37969: EQUAL
37970: IFTRUE 38016
37972: LD_INT 32
37974: DOUBLE
37975: EQUAL
37976: IFTRUE 38016
37978: LD_INT 33
37980: DOUBLE
37981: EQUAL
37982: IFTRUE 38016
37984: LD_INT 27
37986: DOUBLE
37987: EQUAL
37988: IFTRUE 38016
37990: LD_INT 26
37992: DOUBLE
37993: EQUAL
37994: IFTRUE 38016
37996: LD_INT 28
37998: DOUBLE
37999: EQUAL
38000: IFTRUE 38016
38002: LD_INT 29
38004: DOUBLE
38005: EQUAL
38006: IFTRUE 38016
38008: LD_INT 30
38010: DOUBLE
38011: EQUAL
38012: IFTRUE 38016
38014: GO 38072
38016: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
38017: LD_ADDR_VAR 0 9
38021: PUSH
38022: LD_VAR 0 59
38026: PUSH
38027: LD_VAR 0 60
38031: PUSH
38032: LD_VAR 0 61
38036: PUSH
38037: LD_VAR 0 62
38041: PUSH
38042: LD_VAR 0 63
38046: PUSH
38047: LD_VAR 0 64
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: PUSH
38060: LD_VAR 0 4
38064: PUSH
38065: LD_INT 1
38067: PLUS
38068: ARRAY
38069: ST_TO_ADDR
38070: GO 38073
38072: POP
// temp_list2 = [ ] ;
38073: LD_ADDR_VAR 0 10
38077: PUSH
38078: EMPTY
38079: ST_TO_ADDR
// for i in temp_list do
38080: LD_ADDR_VAR 0 8
38084: PUSH
38085: LD_VAR 0 9
38089: PUSH
38090: FOR_IN
38091: IFFALSE 38143
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
38093: LD_ADDR_VAR 0 10
38097: PUSH
38098: LD_VAR 0 10
38102: PUSH
38103: LD_VAR 0 8
38107: PUSH
38108: LD_INT 1
38110: ARRAY
38111: PUSH
38112: LD_VAR 0 2
38116: PLUS
38117: PUSH
38118: LD_VAR 0 8
38122: PUSH
38123: LD_INT 2
38125: ARRAY
38126: PUSH
38127: LD_VAR 0 3
38131: PLUS
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: EMPTY
38138: LIST
38139: ADD
38140: ST_TO_ADDR
38141: GO 38090
38143: POP
38144: POP
// result = temp_list2 ;
38145: LD_ADDR_VAR 0 7
38149: PUSH
38150: LD_VAR 0 10
38154: ST_TO_ADDR
// end ;
38155: LD_VAR 0 7
38159: RET
// export function EnemyInRange ( unit , dist ) ; begin
38160: LD_INT 0
38162: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
38163: LD_ADDR_VAR 0 3
38167: PUSH
38168: LD_VAR 0 1
38172: PPUSH
38173: CALL_OW 255
38177: PPUSH
38178: LD_VAR 0 1
38182: PPUSH
38183: CALL_OW 250
38187: PPUSH
38188: LD_VAR 0 1
38192: PPUSH
38193: CALL_OW 251
38197: PPUSH
38198: LD_VAR 0 2
38202: PPUSH
38203: CALL 11961 0 4
38207: PUSH
38208: LD_INT 4
38210: ARRAY
38211: ST_TO_ADDR
// end ;
38212: LD_VAR 0 3
38216: RET
// export function PlayerSeeMe ( unit ) ; begin
38217: LD_INT 0
38219: PPUSH
// result := See ( your_side , unit ) ;
38220: LD_ADDR_VAR 0 2
38224: PUSH
38225: LD_OWVAR 2
38229: PPUSH
38230: LD_VAR 0 1
38234: PPUSH
38235: CALL_OW 292
38239: ST_TO_ADDR
// end ;
38240: LD_VAR 0 2
38244: RET
// export function ReverseDir ( unit ) ; begin
38245: LD_INT 0
38247: PPUSH
// if not unit then
38248: LD_VAR 0 1
38252: NOT
38253: IFFALSE 38257
// exit ;
38255: GO 38280
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
38257: LD_ADDR_VAR 0 2
38261: PUSH
38262: LD_VAR 0 1
38266: PPUSH
38267: CALL_OW 254
38271: PUSH
38272: LD_INT 3
38274: PLUS
38275: PUSH
38276: LD_INT 6
38278: MOD
38279: ST_TO_ADDR
// end ;
38280: LD_VAR 0 2
38284: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
38285: LD_INT 0
38287: PPUSH
38288: PPUSH
38289: PPUSH
38290: PPUSH
38291: PPUSH
// if not hexes then
38292: LD_VAR 0 2
38296: NOT
38297: IFFALSE 38301
// exit ;
38299: GO 38449
// dist := 9999 ;
38301: LD_ADDR_VAR 0 5
38305: PUSH
38306: LD_INT 9999
38308: ST_TO_ADDR
// for i = 1 to hexes do
38309: LD_ADDR_VAR 0 4
38313: PUSH
38314: DOUBLE
38315: LD_INT 1
38317: DEC
38318: ST_TO_ADDR
38319: LD_VAR 0 2
38323: PUSH
38324: FOR_TO
38325: IFFALSE 38437
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
38327: LD_VAR 0 1
38331: PPUSH
38332: LD_VAR 0 2
38336: PUSH
38337: LD_VAR 0 4
38341: ARRAY
38342: PUSH
38343: LD_INT 1
38345: ARRAY
38346: PPUSH
38347: LD_VAR 0 2
38351: PUSH
38352: LD_VAR 0 4
38356: ARRAY
38357: PUSH
38358: LD_INT 2
38360: ARRAY
38361: PPUSH
38362: CALL_OW 297
38366: PUSH
38367: LD_VAR 0 5
38371: LESS
38372: IFFALSE 38435
// begin hex := hexes [ i ] ;
38374: LD_ADDR_VAR 0 7
38378: PUSH
38379: LD_VAR 0 2
38383: PUSH
38384: LD_VAR 0 4
38388: ARRAY
38389: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38390: LD_ADDR_VAR 0 5
38394: PUSH
38395: LD_VAR 0 1
38399: PPUSH
38400: LD_VAR 0 2
38404: PUSH
38405: LD_VAR 0 4
38409: ARRAY
38410: PUSH
38411: LD_INT 1
38413: ARRAY
38414: PPUSH
38415: LD_VAR 0 2
38419: PUSH
38420: LD_VAR 0 4
38424: ARRAY
38425: PUSH
38426: LD_INT 2
38428: ARRAY
38429: PPUSH
38430: CALL_OW 297
38434: ST_TO_ADDR
// end ; end ;
38435: GO 38324
38437: POP
38438: POP
// result := hex ;
38439: LD_ADDR_VAR 0 3
38443: PUSH
38444: LD_VAR 0 7
38448: ST_TO_ADDR
// end ;
38449: LD_VAR 0 3
38453: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
38454: LD_INT 0
38456: PPUSH
38457: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
38458: LD_VAR 0 1
38462: NOT
38463: PUSH
38464: LD_VAR 0 1
38468: PUSH
38469: LD_INT 21
38471: PUSH
38472: LD_INT 2
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 23
38481: PUSH
38482: LD_INT 2
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PPUSH
38493: CALL_OW 69
38497: IN
38498: NOT
38499: OR
38500: IFFALSE 38504
// exit ;
38502: GO 38551
// for i = 1 to 3 do
38504: LD_ADDR_VAR 0 3
38508: PUSH
38509: DOUBLE
38510: LD_INT 1
38512: DEC
38513: ST_TO_ADDR
38514: LD_INT 3
38516: PUSH
38517: FOR_TO
38518: IFFALSE 38549
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
38520: LD_VAR 0 1
38524: PPUSH
38525: CALL_OW 250
38529: PPUSH
38530: LD_VAR 0 1
38534: PPUSH
38535: CALL_OW 251
38539: PPUSH
38540: LD_INT 1
38542: PPUSH
38543: CALL_OW 453
38547: GO 38517
38549: POP
38550: POP
// end ;
38551: LD_VAR 0 2
38555: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
38556: LD_INT 0
38558: PPUSH
38559: PPUSH
38560: PPUSH
38561: PPUSH
38562: PPUSH
38563: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
38564: LD_VAR 0 1
38568: NOT
38569: PUSH
38570: LD_VAR 0 2
38574: NOT
38575: OR
38576: PUSH
38577: LD_VAR 0 1
38581: PPUSH
38582: CALL_OW 314
38586: OR
38587: IFFALSE 38591
// exit ;
38589: GO 39032
// x := GetX ( enemy_unit ) ;
38591: LD_ADDR_VAR 0 7
38595: PUSH
38596: LD_VAR 0 2
38600: PPUSH
38601: CALL_OW 250
38605: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
38606: LD_ADDR_VAR 0 8
38610: PUSH
38611: LD_VAR 0 2
38615: PPUSH
38616: CALL_OW 251
38620: ST_TO_ADDR
// if not x or not y then
38621: LD_VAR 0 7
38625: NOT
38626: PUSH
38627: LD_VAR 0 8
38631: NOT
38632: OR
38633: IFFALSE 38637
// exit ;
38635: GO 39032
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
38637: LD_ADDR_VAR 0 6
38641: PUSH
38642: LD_VAR 0 7
38646: PPUSH
38647: LD_INT 0
38649: PPUSH
38650: LD_INT 4
38652: PPUSH
38653: CALL_OW 272
38657: PUSH
38658: LD_VAR 0 8
38662: PPUSH
38663: LD_INT 0
38665: PPUSH
38666: LD_INT 4
38668: PPUSH
38669: CALL_OW 273
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_VAR 0 7
38682: PPUSH
38683: LD_INT 1
38685: PPUSH
38686: LD_INT 4
38688: PPUSH
38689: CALL_OW 272
38693: PUSH
38694: LD_VAR 0 8
38698: PPUSH
38699: LD_INT 1
38701: PPUSH
38702: LD_INT 4
38704: PPUSH
38705: CALL_OW 273
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_VAR 0 7
38718: PPUSH
38719: LD_INT 2
38721: PPUSH
38722: LD_INT 4
38724: PPUSH
38725: CALL_OW 272
38729: PUSH
38730: LD_VAR 0 8
38734: PPUSH
38735: LD_INT 2
38737: PPUSH
38738: LD_INT 4
38740: PPUSH
38741: CALL_OW 273
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_VAR 0 7
38754: PPUSH
38755: LD_INT 3
38757: PPUSH
38758: LD_INT 4
38760: PPUSH
38761: CALL_OW 272
38765: PUSH
38766: LD_VAR 0 8
38770: PPUSH
38771: LD_INT 3
38773: PPUSH
38774: LD_INT 4
38776: PPUSH
38777: CALL_OW 273
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_VAR 0 7
38790: PPUSH
38791: LD_INT 4
38793: PPUSH
38794: LD_INT 4
38796: PPUSH
38797: CALL_OW 272
38801: PUSH
38802: LD_VAR 0 8
38806: PPUSH
38807: LD_INT 4
38809: PPUSH
38810: LD_INT 4
38812: PPUSH
38813: CALL_OW 273
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_VAR 0 7
38826: PPUSH
38827: LD_INT 5
38829: PPUSH
38830: LD_INT 4
38832: PPUSH
38833: CALL_OW 272
38837: PUSH
38838: LD_VAR 0 8
38842: PPUSH
38843: LD_INT 5
38845: PPUSH
38846: LD_INT 4
38848: PPUSH
38849: CALL_OW 273
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: ST_TO_ADDR
// for i = tmp downto 1 do
38866: LD_ADDR_VAR 0 4
38870: PUSH
38871: DOUBLE
38872: LD_VAR 0 6
38876: INC
38877: ST_TO_ADDR
38878: LD_INT 1
38880: PUSH
38881: FOR_DOWNTO
38882: IFFALSE 38983
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
38884: LD_VAR 0 6
38888: PUSH
38889: LD_VAR 0 4
38893: ARRAY
38894: PUSH
38895: LD_INT 1
38897: ARRAY
38898: PPUSH
38899: LD_VAR 0 6
38903: PUSH
38904: LD_VAR 0 4
38908: ARRAY
38909: PUSH
38910: LD_INT 2
38912: ARRAY
38913: PPUSH
38914: CALL_OW 488
38918: NOT
38919: PUSH
38920: LD_VAR 0 6
38924: PUSH
38925: LD_VAR 0 4
38929: ARRAY
38930: PUSH
38931: LD_INT 1
38933: ARRAY
38934: PPUSH
38935: LD_VAR 0 6
38939: PUSH
38940: LD_VAR 0 4
38944: ARRAY
38945: PUSH
38946: LD_INT 2
38948: ARRAY
38949: PPUSH
38950: CALL_OW 428
38954: PUSH
38955: LD_INT 0
38957: NONEQUAL
38958: OR
38959: IFFALSE 38981
// tmp := Delete ( tmp , i ) ;
38961: LD_ADDR_VAR 0 6
38965: PUSH
38966: LD_VAR 0 6
38970: PPUSH
38971: LD_VAR 0 4
38975: PPUSH
38976: CALL_OW 3
38980: ST_TO_ADDR
38981: GO 38881
38983: POP
38984: POP
// j := GetClosestHex ( unit , tmp ) ;
38985: LD_ADDR_VAR 0 5
38989: PUSH
38990: LD_VAR 0 1
38994: PPUSH
38995: LD_VAR 0 6
38999: PPUSH
39000: CALL 38285 0 2
39004: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
39005: LD_VAR 0 1
39009: PPUSH
39010: LD_VAR 0 5
39014: PUSH
39015: LD_INT 1
39017: ARRAY
39018: PPUSH
39019: LD_VAR 0 5
39023: PUSH
39024: LD_INT 2
39026: ARRAY
39027: PPUSH
39028: CALL_OW 111
// end ;
39032: LD_VAR 0 3
39036: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
39037: LD_INT 0
39039: PPUSH
39040: PPUSH
39041: PPUSH
// uc_side = 0 ;
39042: LD_ADDR_OWVAR 20
39046: PUSH
39047: LD_INT 0
39049: ST_TO_ADDR
// uc_nation = 0 ;
39050: LD_ADDR_OWVAR 21
39054: PUSH
39055: LD_INT 0
39057: ST_TO_ADDR
// InitHc_All ( ) ;
39058: CALL_OW 584
// InitVc ;
39062: CALL_OW 20
// if mastodonts then
39066: LD_VAR 0 6
39070: IFFALSE 39137
// for i = 1 to mastodonts do
39072: LD_ADDR_VAR 0 11
39076: PUSH
39077: DOUBLE
39078: LD_INT 1
39080: DEC
39081: ST_TO_ADDR
39082: LD_VAR 0 6
39086: PUSH
39087: FOR_TO
39088: IFFALSE 39135
// begin vc_chassis := 31 ;
39090: LD_ADDR_OWVAR 37
39094: PUSH
39095: LD_INT 31
39097: ST_TO_ADDR
// vc_control := control_rider ;
39098: LD_ADDR_OWVAR 38
39102: PUSH
39103: LD_INT 4
39105: ST_TO_ADDR
// animal := CreateVehicle ;
39106: LD_ADDR_VAR 0 12
39110: PUSH
39111: CALL_OW 45
39115: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39116: LD_VAR 0 12
39120: PPUSH
39121: LD_VAR 0 8
39125: PPUSH
39126: LD_INT 0
39128: PPUSH
39129: CALL 41325 0 3
// end ;
39133: GO 39087
39135: POP
39136: POP
// if horses then
39137: LD_VAR 0 5
39141: IFFALSE 39208
// for i = 1 to horses do
39143: LD_ADDR_VAR 0 11
39147: PUSH
39148: DOUBLE
39149: LD_INT 1
39151: DEC
39152: ST_TO_ADDR
39153: LD_VAR 0 5
39157: PUSH
39158: FOR_TO
39159: IFFALSE 39206
// begin hc_class := 21 ;
39161: LD_ADDR_OWVAR 28
39165: PUSH
39166: LD_INT 21
39168: ST_TO_ADDR
// hc_gallery :=  ;
39169: LD_ADDR_OWVAR 33
39173: PUSH
39174: LD_STRING 
39176: ST_TO_ADDR
// animal := CreateHuman ;
39177: LD_ADDR_VAR 0 12
39181: PUSH
39182: CALL_OW 44
39186: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39187: LD_VAR 0 12
39191: PPUSH
39192: LD_VAR 0 8
39196: PPUSH
39197: LD_INT 0
39199: PPUSH
39200: CALL 41325 0 3
// end ;
39204: GO 39158
39206: POP
39207: POP
// if birds then
39208: LD_VAR 0 1
39212: IFFALSE 39279
// for i = 1 to birds do
39214: LD_ADDR_VAR 0 11
39218: PUSH
39219: DOUBLE
39220: LD_INT 1
39222: DEC
39223: ST_TO_ADDR
39224: LD_VAR 0 1
39228: PUSH
39229: FOR_TO
39230: IFFALSE 39277
// begin hc_class = 18 ;
39232: LD_ADDR_OWVAR 28
39236: PUSH
39237: LD_INT 18
39239: ST_TO_ADDR
// hc_gallery =  ;
39240: LD_ADDR_OWVAR 33
39244: PUSH
39245: LD_STRING 
39247: ST_TO_ADDR
// animal := CreateHuman ;
39248: LD_ADDR_VAR 0 12
39252: PUSH
39253: CALL_OW 44
39257: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39258: LD_VAR 0 12
39262: PPUSH
39263: LD_VAR 0 8
39267: PPUSH
39268: LD_INT 0
39270: PPUSH
39271: CALL 41325 0 3
// end ;
39275: GO 39229
39277: POP
39278: POP
// if tigers then
39279: LD_VAR 0 2
39283: IFFALSE 39367
// for i = 1 to tigers do
39285: LD_ADDR_VAR 0 11
39289: PUSH
39290: DOUBLE
39291: LD_INT 1
39293: DEC
39294: ST_TO_ADDR
39295: LD_VAR 0 2
39299: PUSH
39300: FOR_TO
39301: IFFALSE 39365
// begin hc_class = class_tiger ;
39303: LD_ADDR_OWVAR 28
39307: PUSH
39308: LD_INT 14
39310: ST_TO_ADDR
// hc_gallery =  ;
39311: LD_ADDR_OWVAR 33
39315: PUSH
39316: LD_STRING 
39318: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
39319: LD_ADDR_OWVAR 35
39323: PUSH
39324: LD_INT 7
39326: NEG
39327: PPUSH
39328: LD_INT 7
39330: PPUSH
39331: CALL_OW 12
39335: ST_TO_ADDR
// animal := CreateHuman ;
39336: LD_ADDR_VAR 0 12
39340: PUSH
39341: CALL_OW 44
39345: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39346: LD_VAR 0 12
39350: PPUSH
39351: LD_VAR 0 8
39355: PPUSH
39356: LD_INT 0
39358: PPUSH
39359: CALL 41325 0 3
// end ;
39363: GO 39300
39365: POP
39366: POP
// if apemans then
39367: LD_VAR 0 3
39371: IFFALSE 39494
// for i = 1 to apemans do
39373: LD_ADDR_VAR 0 11
39377: PUSH
39378: DOUBLE
39379: LD_INT 1
39381: DEC
39382: ST_TO_ADDR
39383: LD_VAR 0 3
39387: PUSH
39388: FOR_TO
39389: IFFALSE 39492
// begin hc_class = class_apeman ;
39391: LD_ADDR_OWVAR 28
39395: PUSH
39396: LD_INT 12
39398: ST_TO_ADDR
// hc_gallery =  ;
39399: LD_ADDR_OWVAR 33
39403: PUSH
39404: LD_STRING 
39406: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
39407: LD_ADDR_OWVAR 35
39411: PUSH
39412: LD_INT 5
39414: NEG
39415: PPUSH
39416: LD_INT 5
39418: PPUSH
39419: CALL_OW 12
39423: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
39424: LD_ADDR_OWVAR 31
39428: PUSH
39429: LD_INT 1
39431: PPUSH
39432: LD_INT 3
39434: PPUSH
39435: CALL_OW 12
39439: PUSH
39440: LD_INT 1
39442: PPUSH
39443: LD_INT 3
39445: PPUSH
39446: CALL_OW 12
39450: PUSH
39451: LD_INT 0
39453: PUSH
39454: LD_INT 0
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: ST_TO_ADDR
// animal := CreateHuman ;
39463: LD_ADDR_VAR 0 12
39467: PUSH
39468: CALL_OW 44
39472: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39473: LD_VAR 0 12
39477: PPUSH
39478: LD_VAR 0 8
39482: PPUSH
39483: LD_INT 0
39485: PPUSH
39486: CALL 41325 0 3
// end ;
39490: GO 39388
39492: POP
39493: POP
// if enchidnas then
39494: LD_VAR 0 4
39498: IFFALSE 39565
// for i = 1 to enchidnas do
39500: LD_ADDR_VAR 0 11
39504: PUSH
39505: DOUBLE
39506: LD_INT 1
39508: DEC
39509: ST_TO_ADDR
39510: LD_VAR 0 4
39514: PUSH
39515: FOR_TO
39516: IFFALSE 39563
// begin hc_class = 13 ;
39518: LD_ADDR_OWVAR 28
39522: PUSH
39523: LD_INT 13
39525: ST_TO_ADDR
// hc_gallery =  ;
39526: LD_ADDR_OWVAR 33
39530: PUSH
39531: LD_STRING 
39533: ST_TO_ADDR
// animal := CreateHuman ;
39534: LD_ADDR_VAR 0 12
39538: PUSH
39539: CALL_OW 44
39543: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39544: LD_VAR 0 12
39548: PPUSH
39549: LD_VAR 0 8
39553: PPUSH
39554: LD_INT 0
39556: PPUSH
39557: CALL 41325 0 3
// end ;
39561: GO 39515
39563: POP
39564: POP
// if fishes then
39565: LD_VAR 0 7
39569: IFFALSE 39636
// for i = 1 to fishes do
39571: LD_ADDR_VAR 0 11
39575: PUSH
39576: DOUBLE
39577: LD_INT 1
39579: DEC
39580: ST_TO_ADDR
39581: LD_VAR 0 7
39585: PUSH
39586: FOR_TO
39587: IFFALSE 39634
// begin hc_class = 20 ;
39589: LD_ADDR_OWVAR 28
39593: PUSH
39594: LD_INT 20
39596: ST_TO_ADDR
// hc_gallery =  ;
39597: LD_ADDR_OWVAR 33
39601: PUSH
39602: LD_STRING 
39604: ST_TO_ADDR
// animal := CreateHuman ;
39605: LD_ADDR_VAR 0 12
39609: PUSH
39610: CALL_OW 44
39614: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
39615: LD_VAR 0 12
39619: PPUSH
39620: LD_VAR 0 9
39624: PPUSH
39625: LD_INT 0
39627: PPUSH
39628: CALL 41325 0 3
// end ;
39632: GO 39586
39634: POP
39635: POP
// end ;
39636: LD_VAR 0 10
39640: RET
// export function WantHeal ( sci , unit ) ; begin
39641: LD_INT 0
39643: PPUSH
// if GetTaskList ( sci ) > 0 then
39644: LD_VAR 0 1
39648: PPUSH
39649: CALL_OW 437
39653: PUSH
39654: LD_INT 0
39656: GREATER
39657: IFFALSE 39727
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
39659: LD_VAR 0 1
39663: PPUSH
39664: CALL_OW 437
39668: PUSH
39669: LD_INT 1
39671: ARRAY
39672: PUSH
39673: LD_INT 1
39675: ARRAY
39676: PUSH
39677: LD_STRING l
39679: EQUAL
39680: PUSH
39681: LD_VAR 0 1
39685: PPUSH
39686: CALL_OW 437
39690: PUSH
39691: LD_INT 1
39693: ARRAY
39694: PUSH
39695: LD_INT 4
39697: ARRAY
39698: PUSH
39699: LD_VAR 0 2
39703: EQUAL
39704: AND
39705: IFFALSE 39717
// result := true else
39707: LD_ADDR_VAR 0 3
39711: PUSH
39712: LD_INT 1
39714: ST_TO_ADDR
39715: GO 39725
// result := false ;
39717: LD_ADDR_VAR 0 3
39721: PUSH
39722: LD_INT 0
39724: ST_TO_ADDR
// end else
39725: GO 39735
// result := false ;
39727: LD_ADDR_VAR 0 3
39731: PUSH
39732: LD_INT 0
39734: ST_TO_ADDR
// end ;
39735: LD_VAR 0 3
39739: RET
// export function HealTarget ( sci ) ; begin
39740: LD_INT 0
39742: PPUSH
// if not sci then
39743: LD_VAR 0 1
39747: NOT
39748: IFFALSE 39752
// exit ;
39750: GO 39817
// result := 0 ;
39752: LD_ADDR_VAR 0 2
39756: PUSH
39757: LD_INT 0
39759: ST_TO_ADDR
// if GetTaskList ( sci ) then
39760: LD_VAR 0 1
39764: PPUSH
39765: CALL_OW 437
39769: IFFALSE 39817
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
39771: LD_VAR 0 1
39775: PPUSH
39776: CALL_OW 437
39780: PUSH
39781: LD_INT 1
39783: ARRAY
39784: PUSH
39785: LD_INT 1
39787: ARRAY
39788: PUSH
39789: LD_STRING l
39791: EQUAL
39792: IFFALSE 39817
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
39794: LD_ADDR_VAR 0 2
39798: PUSH
39799: LD_VAR 0 1
39803: PPUSH
39804: CALL_OW 437
39808: PUSH
39809: LD_INT 1
39811: ARRAY
39812: PUSH
39813: LD_INT 4
39815: ARRAY
39816: ST_TO_ADDR
// end ;
39817: LD_VAR 0 2
39821: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
39822: LD_INT 0
39824: PPUSH
39825: PPUSH
39826: PPUSH
39827: PPUSH
// if not base_units then
39828: LD_VAR 0 1
39832: NOT
39833: IFFALSE 39837
// exit ;
39835: GO 39924
// result := false ;
39837: LD_ADDR_VAR 0 2
39841: PUSH
39842: LD_INT 0
39844: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
39845: LD_ADDR_VAR 0 5
39849: PUSH
39850: LD_VAR 0 1
39854: PPUSH
39855: LD_INT 21
39857: PUSH
39858: LD_INT 3
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PPUSH
39865: CALL_OW 72
39869: ST_TO_ADDR
// if not tmp then
39870: LD_VAR 0 5
39874: NOT
39875: IFFALSE 39879
// exit ;
39877: GO 39924
// for i in tmp do
39879: LD_ADDR_VAR 0 3
39883: PUSH
39884: LD_VAR 0 5
39888: PUSH
39889: FOR_IN
39890: IFFALSE 39922
// begin result := EnemyInRange ( i , 22 ) ;
39892: LD_ADDR_VAR 0 2
39896: PUSH
39897: LD_VAR 0 3
39901: PPUSH
39902: LD_INT 22
39904: PPUSH
39905: CALL 38160 0 2
39909: ST_TO_ADDR
// if result then
39910: LD_VAR 0 2
39914: IFFALSE 39920
// exit ;
39916: POP
39917: POP
39918: GO 39924
// end ;
39920: GO 39889
39922: POP
39923: POP
// end ;
39924: LD_VAR 0 2
39928: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
39929: LD_INT 0
39931: PPUSH
39932: PPUSH
// if not units then
39933: LD_VAR 0 1
39937: NOT
39938: IFFALSE 39942
// exit ;
39940: GO 40012
// result := [ ] ;
39942: LD_ADDR_VAR 0 3
39946: PUSH
39947: EMPTY
39948: ST_TO_ADDR
// for i in units do
39949: LD_ADDR_VAR 0 4
39953: PUSH
39954: LD_VAR 0 1
39958: PUSH
39959: FOR_IN
39960: IFFALSE 40010
// if GetTag ( i ) = tag then
39962: LD_VAR 0 4
39966: PPUSH
39967: CALL_OW 110
39971: PUSH
39972: LD_VAR 0 2
39976: EQUAL
39977: IFFALSE 40008
// result := Insert ( result , result + 1 , i ) ;
39979: LD_ADDR_VAR 0 3
39983: PUSH
39984: LD_VAR 0 3
39988: PPUSH
39989: LD_VAR 0 3
39993: PUSH
39994: LD_INT 1
39996: PLUS
39997: PPUSH
39998: LD_VAR 0 4
40002: PPUSH
40003: CALL_OW 2
40007: ST_TO_ADDR
40008: GO 39959
40010: POP
40011: POP
// end ;
40012: LD_VAR 0 3
40016: RET
// export function IsDriver ( un ) ; begin
40017: LD_INT 0
40019: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
40020: LD_ADDR_VAR 0 2
40024: PUSH
40025: LD_VAR 0 1
40029: PUSH
40030: LD_INT 55
40032: PUSH
40033: EMPTY
40034: LIST
40035: PPUSH
40036: CALL_OW 69
40040: IN
40041: ST_TO_ADDR
// end ;
40042: LD_VAR 0 2
40046: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
40047: LD_INT 0
40049: PPUSH
40050: PPUSH
// list := [ ] ;
40051: LD_ADDR_VAR 0 5
40055: PUSH
40056: EMPTY
40057: ST_TO_ADDR
// case d of 0 :
40058: LD_VAR 0 3
40062: PUSH
40063: LD_INT 0
40065: DOUBLE
40066: EQUAL
40067: IFTRUE 40071
40069: GO 40204
40071: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
40072: LD_ADDR_VAR 0 5
40076: PUSH
40077: LD_VAR 0 1
40081: PUSH
40082: LD_INT 4
40084: MINUS
40085: PUSH
40086: LD_VAR 0 2
40090: PUSH
40091: LD_INT 4
40093: MINUS
40094: PUSH
40095: LD_INT 2
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: LIST
40102: PUSH
40103: LD_VAR 0 1
40107: PUSH
40108: LD_INT 3
40110: MINUS
40111: PUSH
40112: LD_VAR 0 2
40116: PUSH
40117: LD_INT 1
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: LIST
40124: PUSH
40125: LD_VAR 0 1
40129: PUSH
40130: LD_INT 4
40132: PLUS
40133: PUSH
40134: LD_VAR 0 2
40138: PUSH
40139: LD_INT 4
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: LIST
40146: PUSH
40147: LD_VAR 0 1
40151: PUSH
40152: LD_INT 3
40154: PLUS
40155: PUSH
40156: LD_VAR 0 2
40160: PUSH
40161: LD_INT 3
40163: PLUS
40164: PUSH
40165: LD_INT 5
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: LIST
40172: PUSH
40173: LD_VAR 0 1
40177: PUSH
40178: LD_VAR 0 2
40182: PUSH
40183: LD_INT 4
40185: PLUS
40186: PUSH
40187: LD_INT 0
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: LIST
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: ST_TO_ADDR
// end ; 1 :
40202: GO 40902
40204: LD_INT 1
40206: DOUBLE
40207: EQUAL
40208: IFTRUE 40212
40210: GO 40345
40212: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
40213: LD_ADDR_VAR 0 5
40217: PUSH
40218: LD_VAR 0 1
40222: PUSH
40223: LD_VAR 0 2
40227: PUSH
40228: LD_INT 4
40230: MINUS
40231: PUSH
40232: LD_INT 3
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: LIST
40239: PUSH
40240: LD_VAR 0 1
40244: PUSH
40245: LD_INT 3
40247: MINUS
40248: PUSH
40249: LD_VAR 0 2
40253: PUSH
40254: LD_INT 3
40256: MINUS
40257: PUSH
40258: LD_INT 2
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: LIST
40265: PUSH
40266: LD_VAR 0 1
40270: PUSH
40271: LD_INT 4
40273: MINUS
40274: PUSH
40275: LD_VAR 0 2
40279: PUSH
40280: LD_INT 1
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: LIST
40287: PUSH
40288: LD_VAR 0 1
40292: PUSH
40293: LD_VAR 0 2
40297: PUSH
40298: LD_INT 3
40300: PLUS
40301: PUSH
40302: LD_INT 0
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: LIST
40309: PUSH
40310: LD_VAR 0 1
40314: PUSH
40315: LD_INT 4
40317: PLUS
40318: PUSH
40319: LD_VAR 0 2
40323: PUSH
40324: LD_INT 4
40326: PLUS
40327: PUSH
40328: LD_INT 5
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: LIST
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: ST_TO_ADDR
// end ; 2 :
40343: GO 40902
40345: LD_INT 2
40347: DOUBLE
40348: EQUAL
40349: IFTRUE 40353
40351: GO 40482
40353: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
40354: LD_ADDR_VAR 0 5
40358: PUSH
40359: LD_VAR 0 1
40363: PUSH
40364: LD_VAR 0 2
40368: PUSH
40369: LD_INT 3
40371: MINUS
40372: PUSH
40373: LD_INT 3
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: LIST
40380: PUSH
40381: LD_VAR 0 1
40385: PUSH
40386: LD_INT 4
40388: PLUS
40389: PUSH
40390: LD_VAR 0 2
40394: PUSH
40395: LD_INT 4
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: LIST
40402: PUSH
40403: LD_VAR 0 1
40407: PUSH
40408: LD_VAR 0 2
40412: PUSH
40413: LD_INT 4
40415: PLUS
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: LIST
40424: PUSH
40425: LD_VAR 0 1
40429: PUSH
40430: LD_INT 3
40432: MINUS
40433: PUSH
40434: LD_VAR 0 2
40438: PUSH
40439: LD_INT 1
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: LIST
40446: PUSH
40447: LD_VAR 0 1
40451: PUSH
40452: LD_INT 4
40454: MINUS
40455: PUSH
40456: LD_VAR 0 2
40460: PUSH
40461: LD_INT 4
40463: MINUS
40464: PUSH
40465: LD_INT 2
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: LIST
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: ST_TO_ADDR
// end ; 3 :
40480: GO 40902
40482: LD_INT 3
40484: DOUBLE
40485: EQUAL
40486: IFTRUE 40490
40488: GO 40623
40490: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
40491: LD_ADDR_VAR 0 5
40495: PUSH
40496: LD_VAR 0 1
40500: PUSH
40501: LD_INT 3
40503: PLUS
40504: PUSH
40505: LD_VAR 0 2
40509: PUSH
40510: LD_INT 4
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: LIST
40517: PUSH
40518: LD_VAR 0 1
40522: PUSH
40523: LD_INT 4
40525: PLUS
40526: PUSH
40527: LD_VAR 0 2
40531: PUSH
40532: LD_INT 4
40534: PLUS
40535: PUSH
40536: LD_INT 5
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: LIST
40543: PUSH
40544: LD_VAR 0 1
40548: PUSH
40549: LD_INT 4
40551: MINUS
40552: PUSH
40553: LD_VAR 0 2
40557: PUSH
40558: LD_INT 1
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: LIST
40565: PUSH
40566: LD_VAR 0 1
40570: PUSH
40571: LD_VAR 0 2
40575: PUSH
40576: LD_INT 4
40578: MINUS
40579: PUSH
40580: LD_INT 3
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: LIST
40587: PUSH
40588: LD_VAR 0 1
40592: PUSH
40593: LD_INT 3
40595: MINUS
40596: PUSH
40597: LD_VAR 0 2
40601: PUSH
40602: LD_INT 3
40604: MINUS
40605: PUSH
40606: LD_INT 2
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: LIST
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: ST_TO_ADDR
// end ; 4 :
40621: GO 40902
40623: LD_INT 4
40625: DOUBLE
40626: EQUAL
40627: IFTRUE 40631
40629: GO 40764
40631: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
40632: LD_ADDR_VAR 0 5
40636: PUSH
40637: LD_VAR 0 1
40641: PUSH
40642: LD_VAR 0 2
40646: PUSH
40647: LD_INT 4
40649: PLUS
40650: PUSH
40651: LD_INT 0
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: LIST
40658: PUSH
40659: LD_VAR 0 1
40663: PUSH
40664: LD_INT 3
40666: PLUS
40667: PUSH
40668: LD_VAR 0 2
40672: PUSH
40673: LD_INT 3
40675: PLUS
40676: PUSH
40677: LD_INT 5
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: LIST
40684: PUSH
40685: LD_VAR 0 1
40689: PUSH
40690: LD_INT 4
40692: PLUS
40693: PUSH
40694: LD_VAR 0 2
40698: PUSH
40699: LD_INT 4
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: LIST
40706: PUSH
40707: LD_VAR 0 1
40711: PUSH
40712: LD_VAR 0 2
40716: PUSH
40717: LD_INT 3
40719: MINUS
40720: PUSH
40721: LD_INT 3
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: LIST
40728: PUSH
40729: LD_VAR 0 1
40733: PUSH
40734: LD_INT 4
40736: MINUS
40737: PUSH
40738: LD_VAR 0 2
40742: PUSH
40743: LD_INT 4
40745: MINUS
40746: PUSH
40747: LD_INT 2
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: LIST
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: ST_TO_ADDR
// end ; 5 :
40762: GO 40902
40764: LD_INT 5
40766: DOUBLE
40767: EQUAL
40768: IFTRUE 40772
40770: GO 40901
40772: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
40773: LD_ADDR_VAR 0 5
40777: PUSH
40778: LD_VAR 0 1
40782: PUSH
40783: LD_INT 4
40785: MINUS
40786: PUSH
40787: LD_VAR 0 2
40791: PUSH
40792: LD_INT 1
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: LIST
40799: PUSH
40800: LD_VAR 0 1
40804: PUSH
40805: LD_VAR 0 2
40809: PUSH
40810: LD_INT 4
40812: MINUS
40813: PUSH
40814: LD_INT 3
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: LIST
40821: PUSH
40822: LD_VAR 0 1
40826: PUSH
40827: LD_INT 4
40829: PLUS
40830: PUSH
40831: LD_VAR 0 2
40835: PUSH
40836: LD_INT 4
40838: PLUS
40839: PUSH
40840: LD_INT 5
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: LIST
40847: PUSH
40848: LD_VAR 0 1
40852: PUSH
40853: LD_INT 3
40855: PLUS
40856: PUSH
40857: LD_VAR 0 2
40861: PUSH
40862: LD_INT 4
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: LIST
40869: PUSH
40870: LD_VAR 0 1
40874: PUSH
40875: LD_VAR 0 2
40879: PUSH
40880: LD_INT 3
40882: PLUS
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: LIST
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: ST_TO_ADDR
// end ; end ;
40899: GO 40902
40901: POP
// result := list ;
40902: LD_ADDR_VAR 0 4
40906: PUSH
40907: LD_VAR 0 5
40911: ST_TO_ADDR
// end ;
40912: LD_VAR 0 4
40916: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
40917: LD_INT 0
40919: PPUSH
40920: PPUSH
40921: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
40922: LD_VAR 0 1
40926: NOT
40927: PUSH
40928: LD_VAR 0 2
40932: PUSH
40933: LD_INT 1
40935: PUSH
40936: LD_INT 2
40938: PUSH
40939: LD_INT 3
40941: PUSH
40942: LD_INT 4
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: IN
40951: NOT
40952: OR
40953: IFFALSE 40957
// exit ;
40955: GO 41049
// tmp := [ ] ;
40957: LD_ADDR_VAR 0 5
40961: PUSH
40962: EMPTY
40963: ST_TO_ADDR
// for i in units do
40964: LD_ADDR_VAR 0 4
40968: PUSH
40969: LD_VAR 0 1
40973: PUSH
40974: FOR_IN
40975: IFFALSE 41018
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
40977: LD_ADDR_VAR 0 5
40981: PUSH
40982: LD_VAR 0 5
40986: PPUSH
40987: LD_VAR 0 5
40991: PUSH
40992: LD_INT 1
40994: PLUS
40995: PPUSH
40996: LD_VAR 0 4
41000: PPUSH
41001: LD_VAR 0 2
41005: PPUSH
41006: CALL_OW 259
41010: PPUSH
41011: CALL_OW 2
41015: ST_TO_ADDR
41016: GO 40974
41018: POP
41019: POP
// if not tmp then
41020: LD_VAR 0 5
41024: NOT
41025: IFFALSE 41029
// exit ;
41027: GO 41049
// result := SortListByListDesc ( units , tmp ) ;
41029: LD_ADDR_VAR 0 3
41033: PUSH
41034: LD_VAR 0 1
41038: PPUSH
41039: LD_VAR 0 5
41043: PPUSH
41044: CALL_OW 77
41048: ST_TO_ADDR
// end ;
41049: LD_VAR 0 3
41053: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
41054: LD_INT 0
41056: PPUSH
41057: PPUSH
41058: PPUSH
// result := false ;
41059: LD_ADDR_VAR 0 3
41063: PUSH
41064: LD_INT 0
41066: ST_TO_ADDR
// x := GetX ( building ) ;
41067: LD_ADDR_VAR 0 4
41071: PUSH
41072: LD_VAR 0 2
41076: PPUSH
41077: CALL_OW 250
41081: ST_TO_ADDR
// y := GetY ( building ) ;
41082: LD_ADDR_VAR 0 5
41086: PUSH
41087: LD_VAR 0 2
41091: PPUSH
41092: CALL_OW 251
41096: ST_TO_ADDR
// if not building or not x or not y then
41097: LD_VAR 0 2
41101: NOT
41102: PUSH
41103: LD_VAR 0 4
41107: NOT
41108: OR
41109: PUSH
41110: LD_VAR 0 5
41114: NOT
41115: OR
41116: IFFALSE 41120
// exit ;
41118: GO 41212
// if GetTaskList ( unit ) then
41120: LD_VAR 0 1
41124: PPUSH
41125: CALL_OW 437
41129: IFFALSE 41212
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
41131: LD_STRING e
41133: PUSH
41134: LD_VAR 0 1
41138: PPUSH
41139: CALL_OW 437
41143: PUSH
41144: LD_INT 1
41146: ARRAY
41147: PUSH
41148: LD_INT 1
41150: ARRAY
41151: EQUAL
41152: PUSH
41153: LD_VAR 0 4
41157: PUSH
41158: LD_VAR 0 1
41162: PPUSH
41163: CALL_OW 437
41167: PUSH
41168: LD_INT 1
41170: ARRAY
41171: PUSH
41172: LD_INT 2
41174: ARRAY
41175: EQUAL
41176: AND
41177: PUSH
41178: LD_VAR 0 5
41182: PUSH
41183: LD_VAR 0 1
41187: PPUSH
41188: CALL_OW 437
41192: PUSH
41193: LD_INT 1
41195: ARRAY
41196: PUSH
41197: LD_INT 3
41199: ARRAY
41200: EQUAL
41201: AND
41202: IFFALSE 41212
// result := true end ;
41204: LD_ADDR_VAR 0 3
41208: PUSH
41209: LD_INT 1
41211: ST_TO_ADDR
// end ;
41212: LD_VAR 0 3
41216: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
41217: LD_INT 0
41219: PPUSH
// result := false ;
41220: LD_ADDR_VAR 0 4
41224: PUSH
41225: LD_INT 0
41227: ST_TO_ADDR
// if GetTaskList ( unit ) then
41228: LD_VAR 0 1
41232: PPUSH
41233: CALL_OW 437
41237: IFFALSE 41320
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
41239: LD_STRING M
41241: PUSH
41242: LD_VAR 0 1
41246: PPUSH
41247: CALL_OW 437
41251: PUSH
41252: LD_INT 1
41254: ARRAY
41255: PUSH
41256: LD_INT 1
41258: ARRAY
41259: EQUAL
41260: PUSH
41261: LD_VAR 0 2
41265: PUSH
41266: LD_VAR 0 1
41270: PPUSH
41271: CALL_OW 437
41275: PUSH
41276: LD_INT 1
41278: ARRAY
41279: PUSH
41280: LD_INT 2
41282: ARRAY
41283: EQUAL
41284: AND
41285: PUSH
41286: LD_VAR 0 3
41290: PUSH
41291: LD_VAR 0 1
41295: PPUSH
41296: CALL_OW 437
41300: PUSH
41301: LD_INT 1
41303: ARRAY
41304: PUSH
41305: LD_INT 3
41307: ARRAY
41308: EQUAL
41309: AND
41310: IFFALSE 41320
// result := true ;
41312: LD_ADDR_VAR 0 4
41316: PUSH
41317: LD_INT 1
41319: ST_TO_ADDR
// end ; end ;
41320: LD_VAR 0 4
41324: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
41325: LD_INT 0
41327: PPUSH
41328: PPUSH
41329: PPUSH
41330: PPUSH
// if not unit or not area then
41331: LD_VAR 0 1
41335: NOT
41336: PUSH
41337: LD_VAR 0 2
41341: NOT
41342: OR
41343: IFFALSE 41347
// exit ;
41345: GO 41511
// tmp := AreaToList ( area , i ) ;
41347: LD_ADDR_VAR 0 6
41351: PUSH
41352: LD_VAR 0 2
41356: PPUSH
41357: LD_VAR 0 5
41361: PPUSH
41362: CALL_OW 517
41366: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
41367: LD_ADDR_VAR 0 5
41371: PUSH
41372: DOUBLE
41373: LD_INT 1
41375: DEC
41376: ST_TO_ADDR
41377: LD_VAR 0 6
41381: PUSH
41382: LD_INT 1
41384: ARRAY
41385: PUSH
41386: FOR_TO
41387: IFFALSE 41509
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
41389: LD_ADDR_VAR 0 7
41393: PUSH
41394: LD_VAR 0 6
41398: PUSH
41399: LD_INT 1
41401: ARRAY
41402: PUSH
41403: LD_VAR 0 5
41407: ARRAY
41408: PUSH
41409: LD_VAR 0 6
41413: PUSH
41414: LD_INT 2
41416: ARRAY
41417: PUSH
41418: LD_VAR 0 5
41422: ARRAY
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
41428: LD_VAR 0 7
41432: PUSH
41433: LD_INT 1
41435: ARRAY
41436: PPUSH
41437: LD_VAR 0 7
41441: PUSH
41442: LD_INT 2
41444: ARRAY
41445: PPUSH
41446: CALL_OW 428
41450: PUSH
41451: LD_INT 0
41453: EQUAL
41454: IFFALSE 41507
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
41456: LD_VAR 0 1
41460: PPUSH
41461: LD_VAR 0 7
41465: PUSH
41466: LD_INT 1
41468: ARRAY
41469: PPUSH
41470: LD_VAR 0 7
41474: PUSH
41475: LD_INT 2
41477: ARRAY
41478: PPUSH
41479: LD_VAR 0 3
41483: PPUSH
41484: CALL_OW 48
// result := IsPlaced ( unit ) ;
41488: LD_ADDR_VAR 0 4
41492: PUSH
41493: LD_VAR 0 1
41497: PPUSH
41498: CALL_OW 305
41502: ST_TO_ADDR
// exit ;
41503: POP
41504: POP
41505: GO 41511
// end ; end ;
41507: GO 41386
41509: POP
41510: POP
// end ;
41511: LD_VAR 0 4
41515: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
41516: LD_INT 0
41518: PPUSH
41519: PPUSH
41520: PPUSH
// if not side or side > 8 then
41521: LD_VAR 0 1
41525: NOT
41526: PUSH
41527: LD_VAR 0 1
41531: PUSH
41532: LD_INT 8
41534: GREATER
41535: OR
41536: IFFALSE 41540
// exit ;
41538: GO 41727
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
41540: LD_ADDR_VAR 0 4
41544: PUSH
41545: LD_INT 22
41547: PUSH
41548: LD_VAR 0 1
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 21
41559: PUSH
41560: LD_INT 3
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PPUSH
41571: CALL_OW 69
41575: ST_TO_ADDR
// if not tmp then
41576: LD_VAR 0 4
41580: NOT
41581: IFFALSE 41585
// exit ;
41583: GO 41727
// enable_addtolog := true ;
41585: LD_ADDR_OWVAR 81
41589: PUSH
41590: LD_INT 1
41592: ST_TO_ADDR
// AddToLog ( [ ) ;
41593: LD_STRING [
41595: PPUSH
41596: CALL_OW 561
// for i in tmp do
41600: LD_ADDR_VAR 0 3
41604: PUSH
41605: LD_VAR 0 4
41609: PUSH
41610: FOR_IN
41611: IFFALSE 41718
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
41613: LD_STRING [
41615: PUSH
41616: LD_VAR 0 3
41620: PPUSH
41621: CALL_OW 266
41625: STR
41626: PUSH
41627: LD_STRING , 
41629: STR
41630: PUSH
41631: LD_VAR 0 3
41635: PPUSH
41636: CALL_OW 250
41640: STR
41641: PUSH
41642: LD_STRING , 
41644: STR
41645: PUSH
41646: LD_VAR 0 3
41650: PPUSH
41651: CALL_OW 251
41655: STR
41656: PUSH
41657: LD_STRING , 
41659: STR
41660: PUSH
41661: LD_VAR 0 3
41665: PPUSH
41666: CALL_OW 254
41670: STR
41671: PUSH
41672: LD_STRING , 
41674: STR
41675: PUSH
41676: LD_VAR 0 3
41680: PPUSH
41681: LD_INT 1
41683: PPUSH
41684: CALL_OW 268
41688: STR
41689: PUSH
41690: LD_STRING , 
41692: STR
41693: PUSH
41694: LD_VAR 0 3
41698: PPUSH
41699: LD_INT 2
41701: PPUSH
41702: CALL_OW 268
41706: STR
41707: PUSH
41708: LD_STRING ],
41710: STR
41711: PPUSH
41712: CALL_OW 561
// end ;
41716: GO 41610
41718: POP
41719: POP
// AddToLog ( ]; ) ;
41720: LD_STRING ];
41722: PPUSH
41723: CALL_OW 561
// end ;
41727: LD_VAR 0 2
41731: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
41732: LD_INT 0
41734: PPUSH
41735: PPUSH
41736: PPUSH
41737: PPUSH
41738: PPUSH
// if not area or not rate or not max then
41739: LD_VAR 0 1
41743: NOT
41744: PUSH
41745: LD_VAR 0 2
41749: NOT
41750: OR
41751: PUSH
41752: LD_VAR 0 4
41756: NOT
41757: OR
41758: IFFALSE 41762
// exit ;
41760: GO 41954
// while 1 do
41762: LD_INT 1
41764: IFFALSE 41954
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
41766: LD_ADDR_VAR 0 9
41770: PUSH
41771: LD_VAR 0 1
41775: PPUSH
41776: LD_INT 1
41778: PPUSH
41779: CALL_OW 287
41783: PUSH
41784: LD_INT 10
41786: MUL
41787: ST_TO_ADDR
// r := rate / 10 ;
41788: LD_ADDR_VAR 0 7
41792: PUSH
41793: LD_VAR 0 2
41797: PUSH
41798: LD_INT 10
41800: DIVREAL
41801: ST_TO_ADDR
// time := 1 1$00 ;
41802: LD_ADDR_VAR 0 8
41806: PUSH
41807: LD_INT 2100
41809: ST_TO_ADDR
// if amount < min then
41810: LD_VAR 0 9
41814: PUSH
41815: LD_VAR 0 3
41819: LESS
41820: IFFALSE 41838
// r := r * 2 else
41822: LD_ADDR_VAR 0 7
41826: PUSH
41827: LD_VAR 0 7
41831: PUSH
41832: LD_INT 2
41834: MUL
41835: ST_TO_ADDR
41836: GO 41864
// if amount > max then
41838: LD_VAR 0 9
41842: PUSH
41843: LD_VAR 0 4
41847: GREATER
41848: IFFALSE 41864
// r := r / 2 ;
41850: LD_ADDR_VAR 0 7
41854: PUSH
41855: LD_VAR 0 7
41859: PUSH
41860: LD_INT 2
41862: DIVREAL
41863: ST_TO_ADDR
// time := time / r ;
41864: LD_ADDR_VAR 0 8
41868: PUSH
41869: LD_VAR 0 8
41873: PUSH
41874: LD_VAR 0 7
41878: DIVREAL
41879: ST_TO_ADDR
// if time < 0 then
41880: LD_VAR 0 8
41884: PUSH
41885: LD_INT 0
41887: LESS
41888: IFFALSE 41905
// time := time * - 1 ;
41890: LD_ADDR_VAR 0 8
41894: PUSH
41895: LD_VAR 0 8
41899: PUSH
41900: LD_INT 1
41902: NEG
41903: MUL
41904: ST_TO_ADDR
// wait ( time ) ;
41905: LD_VAR 0 8
41909: PPUSH
41910: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
41914: LD_INT 35
41916: PPUSH
41917: LD_INT 875
41919: PPUSH
41920: CALL_OW 12
41924: PPUSH
41925: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
41929: LD_INT 1
41931: PPUSH
41932: LD_INT 5
41934: PPUSH
41935: CALL_OW 12
41939: PPUSH
41940: LD_VAR 0 1
41944: PPUSH
41945: LD_INT 1
41947: PPUSH
41948: CALL_OW 55
// end ;
41952: GO 41762
// end ;
41954: LD_VAR 0 5
41958: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
41959: LD_INT 0
41961: PPUSH
41962: PPUSH
41963: PPUSH
41964: PPUSH
41965: PPUSH
41966: PPUSH
41967: PPUSH
41968: PPUSH
// if not turrets or not factories then
41969: LD_VAR 0 1
41973: NOT
41974: PUSH
41975: LD_VAR 0 2
41979: NOT
41980: OR
41981: IFFALSE 41985
// exit ;
41983: GO 42292
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
41985: LD_ADDR_VAR 0 10
41989: PUSH
41990: LD_INT 5
41992: PUSH
41993: LD_INT 6
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 2
42002: PUSH
42003: LD_INT 4
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 3
42012: PUSH
42013: LD_INT 5
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 24
42027: PUSH
42028: LD_INT 25
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 23
42037: PUSH
42038: LD_INT 27
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 42
42051: PUSH
42052: LD_INT 43
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 44
42061: PUSH
42062: LD_INT 46
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 45
42071: PUSH
42072: LD_INT 47
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: LIST
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: LIST
42088: ST_TO_ADDR
// result := [ ] ;
42089: LD_ADDR_VAR 0 3
42093: PUSH
42094: EMPTY
42095: ST_TO_ADDR
// for i in turrets do
42096: LD_ADDR_VAR 0 4
42100: PUSH
42101: LD_VAR 0 1
42105: PUSH
42106: FOR_IN
42107: IFFALSE 42290
// begin nat := GetNation ( i ) ;
42109: LD_ADDR_VAR 0 7
42113: PUSH
42114: LD_VAR 0 4
42118: PPUSH
42119: CALL_OW 248
42123: ST_TO_ADDR
// weapon := 0 ;
42124: LD_ADDR_VAR 0 8
42128: PUSH
42129: LD_INT 0
42131: ST_TO_ADDR
// if not nat then
42132: LD_VAR 0 7
42136: NOT
42137: IFFALSE 42141
// continue ;
42139: GO 42106
// for j in list [ nat ] do
42141: LD_ADDR_VAR 0 5
42145: PUSH
42146: LD_VAR 0 10
42150: PUSH
42151: LD_VAR 0 7
42155: ARRAY
42156: PUSH
42157: FOR_IN
42158: IFFALSE 42199
// if GetBWeapon ( i ) = j [ 1 ] then
42160: LD_VAR 0 4
42164: PPUSH
42165: CALL_OW 269
42169: PUSH
42170: LD_VAR 0 5
42174: PUSH
42175: LD_INT 1
42177: ARRAY
42178: EQUAL
42179: IFFALSE 42197
// begin weapon := j [ 2 ] ;
42181: LD_ADDR_VAR 0 8
42185: PUSH
42186: LD_VAR 0 5
42190: PUSH
42191: LD_INT 2
42193: ARRAY
42194: ST_TO_ADDR
// break ;
42195: GO 42199
// end ;
42197: GO 42157
42199: POP
42200: POP
// if not weapon then
42201: LD_VAR 0 8
42205: NOT
42206: IFFALSE 42210
// continue ;
42208: GO 42106
// for k in factories do
42210: LD_ADDR_VAR 0 6
42214: PUSH
42215: LD_VAR 0 2
42219: PUSH
42220: FOR_IN
42221: IFFALSE 42286
// begin weapons := AvailableWeaponList ( k ) ;
42223: LD_ADDR_VAR 0 9
42227: PUSH
42228: LD_VAR 0 6
42232: PPUSH
42233: CALL_OW 478
42237: ST_TO_ADDR
// if not weapons then
42238: LD_VAR 0 9
42242: NOT
42243: IFFALSE 42247
// continue ;
42245: GO 42220
// if weapon in weapons then
42247: LD_VAR 0 8
42251: PUSH
42252: LD_VAR 0 9
42256: IN
42257: IFFALSE 42284
// begin result := [ i , weapon ] ;
42259: LD_ADDR_VAR 0 3
42263: PUSH
42264: LD_VAR 0 4
42268: PUSH
42269: LD_VAR 0 8
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: ST_TO_ADDR
// exit ;
42278: POP
42279: POP
42280: POP
42281: POP
42282: GO 42292
// end ; end ;
42284: GO 42220
42286: POP
42287: POP
// end ;
42288: GO 42106
42290: POP
42291: POP
// end ;
42292: LD_VAR 0 3
42296: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
42297: LD_INT 0
42299: PPUSH
// if not side or side > 8 then
42300: LD_VAR 0 3
42304: NOT
42305: PUSH
42306: LD_VAR 0 3
42310: PUSH
42311: LD_INT 8
42313: GREATER
42314: OR
42315: IFFALSE 42319
// exit ;
42317: GO 42378
// if not range then
42319: LD_VAR 0 4
42323: NOT
42324: IFFALSE 42335
// range := - 12 ;
42326: LD_ADDR_VAR 0 4
42330: PUSH
42331: LD_INT 12
42333: NEG
42334: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
42335: LD_VAR 0 1
42339: PPUSH
42340: LD_VAR 0 2
42344: PPUSH
42345: LD_VAR 0 3
42349: PPUSH
42350: LD_VAR 0 4
42354: PPUSH
42355: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
42359: LD_VAR 0 1
42363: PPUSH
42364: LD_VAR 0 2
42368: PPUSH
42369: LD_VAR 0 3
42373: PPUSH
42374: CALL_OW 331
// end ;
42378: LD_VAR 0 5
42382: RET
// export function Video ( mode ) ; begin
42383: LD_INT 0
42385: PPUSH
// ingame_video = mode ;
42386: LD_ADDR_OWVAR 52
42390: PUSH
42391: LD_VAR 0 1
42395: ST_TO_ADDR
// interface_hidden = mode ;
42396: LD_ADDR_OWVAR 54
42400: PUSH
42401: LD_VAR 0 1
42405: ST_TO_ADDR
// end ;
42406: LD_VAR 0 2
42410: RET
// export function Join ( array , element ) ; begin
42411: LD_INT 0
42413: PPUSH
// result := Replace ( array , array + 1 , element ) ;
42414: LD_ADDR_VAR 0 3
42418: PUSH
42419: LD_VAR 0 1
42423: PPUSH
42424: LD_VAR 0 1
42428: PUSH
42429: LD_INT 1
42431: PLUS
42432: PPUSH
42433: LD_VAR 0 2
42437: PPUSH
42438: CALL_OW 1
42442: ST_TO_ADDR
// end ;
42443: LD_VAR 0 3
42447: RET
// export function JoinUnion ( array , element ) ; begin
42448: LD_INT 0
42450: PPUSH
// result := array union element ;
42451: LD_ADDR_VAR 0 3
42455: PUSH
42456: LD_VAR 0 1
42460: PUSH
42461: LD_VAR 0 2
42465: UNION
42466: ST_TO_ADDR
// end ;
42467: LD_VAR 0 3
42471: RET
// export function GetBehemoths ( side ) ; begin
42472: LD_INT 0
42474: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
42475: LD_ADDR_VAR 0 2
42479: PUSH
42480: LD_INT 22
42482: PUSH
42483: LD_VAR 0 1
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 31
42494: PUSH
42495: LD_INT 25
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PPUSH
42506: CALL_OW 69
42510: ST_TO_ADDR
// end ;
42511: LD_VAR 0 2
42515: RET
// export function Shuffle ( array ) ; var i , index ; begin
42516: LD_INT 0
42518: PPUSH
42519: PPUSH
42520: PPUSH
// result := [ ] ;
42521: LD_ADDR_VAR 0 2
42525: PUSH
42526: EMPTY
42527: ST_TO_ADDR
// if not array then
42528: LD_VAR 0 1
42532: NOT
42533: IFFALSE 42537
// exit ;
42535: GO 42636
// Randomize ;
42537: CALL_OW 10
// for i = array downto 1 do
42541: LD_ADDR_VAR 0 3
42545: PUSH
42546: DOUBLE
42547: LD_VAR 0 1
42551: INC
42552: ST_TO_ADDR
42553: LD_INT 1
42555: PUSH
42556: FOR_DOWNTO
42557: IFFALSE 42634
// begin index := rand ( 1 , array ) ;
42559: LD_ADDR_VAR 0 4
42563: PUSH
42564: LD_INT 1
42566: PPUSH
42567: LD_VAR 0 1
42571: PPUSH
42572: CALL_OW 12
42576: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
42577: LD_ADDR_VAR 0 2
42581: PUSH
42582: LD_VAR 0 2
42586: PPUSH
42587: LD_VAR 0 2
42591: PUSH
42592: LD_INT 1
42594: PLUS
42595: PPUSH
42596: LD_VAR 0 1
42600: PUSH
42601: LD_VAR 0 4
42605: ARRAY
42606: PPUSH
42607: CALL_OW 2
42611: ST_TO_ADDR
// array := Delete ( array , index ) ;
42612: LD_ADDR_VAR 0 1
42616: PUSH
42617: LD_VAR 0 1
42621: PPUSH
42622: LD_VAR 0 4
42626: PPUSH
42627: CALL_OW 3
42631: ST_TO_ADDR
// end ;
42632: GO 42556
42634: POP
42635: POP
// end ;
42636: LD_VAR 0 2
42640: RET
// export function GetBaseMaterials ( base ) ; begin
42641: LD_INT 0
42643: PPUSH
// result := [ 0 , 0 , 0 ] ;
42644: LD_ADDR_VAR 0 2
42648: PUSH
42649: LD_INT 0
42651: PUSH
42652: LD_INT 0
42654: PUSH
42655: LD_INT 0
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: LIST
42662: ST_TO_ADDR
// if not base then
42663: LD_VAR 0 1
42667: NOT
42668: IFFALSE 42672
// exit ;
42670: GO 42721
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
42672: LD_ADDR_VAR 0 2
42676: PUSH
42677: LD_VAR 0 1
42681: PPUSH
42682: LD_INT 1
42684: PPUSH
42685: CALL_OW 275
42689: PUSH
42690: LD_VAR 0 1
42694: PPUSH
42695: LD_INT 2
42697: PPUSH
42698: CALL_OW 275
42702: PUSH
42703: LD_VAR 0 1
42707: PPUSH
42708: LD_INT 3
42710: PPUSH
42711: CALL_OW 275
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: LIST
42720: ST_TO_ADDR
// end ;
42721: LD_VAR 0 2
42725: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
42726: LD_INT 0
42728: PPUSH
42729: PPUSH
// result := array ;
42730: LD_ADDR_VAR 0 3
42734: PUSH
42735: LD_VAR 0 1
42739: ST_TO_ADDR
// if size > 0 then
42740: LD_VAR 0 2
42744: PUSH
42745: LD_INT 0
42747: GREATER
42748: IFFALSE 42794
// for i := array downto size do
42750: LD_ADDR_VAR 0 4
42754: PUSH
42755: DOUBLE
42756: LD_VAR 0 1
42760: INC
42761: ST_TO_ADDR
42762: LD_VAR 0 2
42766: PUSH
42767: FOR_DOWNTO
42768: IFFALSE 42792
// result := Delete ( result , result ) ;
42770: LD_ADDR_VAR 0 3
42774: PUSH
42775: LD_VAR 0 3
42779: PPUSH
42780: LD_VAR 0 3
42784: PPUSH
42785: CALL_OW 3
42789: ST_TO_ADDR
42790: GO 42767
42792: POP
42793: POP
// end ;
42794: LD_VAR 0 3
42798: RET
// export function ComExit ( unit ) ; var tmp ; begin
42799: LD_INT 0
42801: PPUSH
42802: PPUSH
// if not IsInUnit ( unit ) then
42803: LD_VAR 0 1
42807: PPUSH
42808: CALL_OW 310
42812: NOT
42813: IFFALSE 42817
// exit ;
42815: GO 42877
// tmp := IsInUnit ( unit ) ;
42817: LD_ADDR_VAR 0 3
42821: PUSH
42822: LD_VAR 0 1
42826: PPUSH
42827: CALL_OW 310
42831: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
42832: LD_VAR 0 3
42836: PPUSH
42837: CALL_OW 247
42841: PUSH
42842: LD_INT 2
42844: EQUAL
42845: IFFALSE 42858
// ComExitVehicle ( unit ) else
42847: LD_VAR 0 1
42851: PPUSH
42852: CALL_OW 121
42856: GO 42867
// ComExitBuilding ( unit ) ;
42858: LD_VAR 0 1
42862: PPUSH
42863: CALL_OW 122
// result := tmp ;
42867: LD_ADDR_VAR 0 2
42871: PUSH
42872: LD_VAR 0 3
42876: ST_TO_ADDR
// end ;
42877: LD_VAR 0 2
42881: RET
// export function ComExitAll ( units ) ; var i ; begin
42882: LD_INT 0
42884: PPUSH
42885: PPUSH
// if not units then
42886: LD_VAR 0 1
42890: NOT
42891: IFFALSE 42895
// exit ;
42893: GO 42921
// for i in units do
42895: LD_ADDR_VAR 0 3
42899: PUSH
42900: LD_VAR 0 1
42904: PUSH
42905: FOR_IN
42906: IFFALSE 42919
// ComExit ( i ) ;
42908: LD_VAR 0 3
42912: PPUSH
42913: CALL 42799 0 1
42917: GO 42905
42919: POP
42920: POP
// end ;
42921: LD_VAR 0 2
42925: RET
// export function ResetHc ; begin
42926: LD_INT 0
42928: PPUSH
// InitHc ;
42929: CALL_OW 19
// hc_importance := 0 ;
42933: LD_ADDR_OWVAR 32
42937: PUSH
42938: LD_INT 0
42940: ST_TO_ADDR
// end ;
42941: LD_VAR 0 1
42945: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
42946: LD_INT 0
42948: PPUSH
42949: PPUSH
42950: PPUSH
// _x := ( x1 + x2 ) div 2 ;
42951: LD_ADDR_VAR 0 6
42955: PUSH
42956: LD_VAR 0 1
42960: PUSH
42961: LD_VAR 0 3
42965: PLUS
42966: PUSH
42967: LD_INT 2
42969: DIV
42970: ST_TO_ADDR
// if _x < 0 then
42971: LD_VAR 0 6
42975: PUSH
42976: LD_INT 0
42978: LESS
42979: IFFALSE 42996
// _x := _x * - 1 ;
42981: LD_ADDR_VAR 0 6
42985: PUSH
42986: LD_VAR 0 6
42990: PUSH
42991: LD_INT 1
42993: NEG
42994: MUL
42995: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
42996: LD_ADDR_VAR 0 7
43000: PUSH
43001: LD_VAR 0 2
43005: PUSH
43006: LD_VAR 0 4
43010: PLUS
43011: PUSH
43012: LD_INT 2
43014: DIV
43015: ST_TO_ADDR
// if _y < 0 then
43016: LD_VAR 0 7
43020: PUSH
43021: LD_INT 0
43023: LESS
43024: IFFALSE 43041
// _y := _y * - 1 ;
43026: LD_ADDR_VAR 0 7
43030: PUSH
43031: LD_VAR 0 7
43035: PUSH
43036: LD_INT 1
43038: NEG
43039: MUL
43040: ST_TO_ADDR
// result := [ _x , _y ] ;
43041: LD_ADDR_VAR 0 5
43045: PUSH
43046: LD_VAR 0 6
43050: PUSH
43051: LD_VAR 0 7
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: ST_TO_ADDR
// end ;
43060: LD_VAR 0 5
43064: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
43065: LD_INT 0
43067: PPUSH
43068: PPUSH
43069: PPUSH
43070: PPUSH
// task := GetTaskList ( unit ) ;
43071: LD_ADDR_VAR 0 7
43075: PUSH
43076: LD_VAR 0 1
43080: PPUSH
43081: CALL_OW 437
43085: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
43086: LD_VAR 0 7
43090: NOT
43091: PUSH
43092: LD_VAR 0 1
43096: PPUSH
43097: LD_VAR 0 2
43101: PPUSH
43102: CALL_OW 308
43106: NOT
43107: AND
43108: IFFALSE 43112
// exit ;
43110: GO 43230
// if IsInArea ( unit , area ) then
43112: LD_VAR 0 1
43116: PPUSH
43117: LD_VAR 0 2
43121: PPUSH
43122: CALL_OW 308
43126: IFFALSE 43144
// begin ComMoveToArea ( unit , goAway ) ;
43128: LD_VAR 0 1
43132: PPUSH
43133: LD_VAR 0 3
43137: PPUSH
43138: CALL_OW 113
// exit ;
43142: GO 43230
// end ; if task [ 1 ] [ 1 ] <> M then
43144: LD_VAR 0 7
43148: PUSH
43149: LD_INT 1
43151: ARRAY
43152: PUSH
43153: LD_INT 1
43155: ARRAY
43156: PUSH
43157: LD_STRING M
43159: NONEQUAL
43160: IFFALSE 43164
// exit ;
43162: GO 43230
// x := task [ 1 ] [ 2 ] ;
43164: LD_ADDR_VAR 0 5
43168: PUSH
43169: LD_VAR 0 7
43173: PUSH
43174: LD_INT 1
43176: ARRAY
43177: PUSH
43178: LD_INT 2
43180: ARRAY
43181: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
43182: LD_ADDR_VAR 0 6
43186: PUSH
43187: LD_VAR 0 7
43191: PUSH
43192: LD_INT 1
43194: ARRAY
43195: PUSH
43196: LD_INT 3
43198: ARRAY
43199: ST_TO_ADDR
// if InArea ( x , y , area ) then
43200: LD_VAR 0 5
43204: PPUSH
43205: LD_VAR 0 6
43209: PPUSH
43210: LD_VAR 0 2
43214: PPUSH
43215: CALL_OW 309
43219: IFFALSE 43230
// ComStop ( unit ) ;
43221: LD_VAR 0 1
43225: PPUSH
43226: CALL_OW 141
// end ;
43230: LD_VAR 0 4
43234: RET
// export function Abs ( value ) ; begin
43235: LD_INT 0
43237: PPUSH
// result := value ;
43238: LD_ADDR_VAR 0 2
43242: PUSH
43243: LD_VAR 0 1
43247: ST_TO_ADDR
// if value < 0 then
43248: LD_VAR 0 1
43252: PUSH
43253: LD_INT 0
43255: LESS
43256: IFFALSE 43273
// result := value * - 1 ;
43258: LD_ADDR_VAR 0 2
43262: PUSH
43263: LD_VAR 0 1
43267: PUSH
43268: LD_INT 1
43270: NEG
43271: MUL
43272: ST_TO_ADDR
// end ;
43273: LD_VAR 0 2
43277: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
43278: LD_INT 0
43280: PPUSH
43281: PPUSH
43282: PPUSH
43283: PPUSH
43284: PPUSH
43285: PPUSH
43286: PPUSH
43287: PPUSH
// if not unit or not building then
43288: LD_VAR 0 1
43292: NOT
43293: PUSH
43294: LD_VAR 0 2
43298: NOT
43299: OR
43300: IFFALSE 43304
// exit ;
43302: GO 43530
// x := GetX ( building ) ;
43304: LD_ADDR_VAR 0 4
43308: PUSH
43309: LD_VAR 0 2
43313: PPUSH
43314: CALL_OW 250
43318: ST_TO_ADDR
// y := GetY ( building ) ;
43319: LD_ADDR_VAR 0 6
43323: PUSH
43324: LD_VAR 0 2
43328: PPUSH
43329: CALL_OW 251
43333: ST_TO_ADDR
// d := GetDir ( building ) ;
43334: LD_ADDR_VAR 0 8
43338: PUSH
43339: LD_VAR 0 2
43343: PPUSH
43344: CALL_OW 254
43348: ST_TO_ADDR
// r := 4 ;
43349: LD_ADDR_VAR 0 9
43353: PUSH
43354: LD_INT 4
43356: ST_TO_ADDR
// for i := 1 to 5 do
43357: LD_ADDR_VAR 0 10
43361: PUSH
43362: DOUBLE
43363: LD_INT 1
43365: DEC
43366: ST_TO_ADDR
43367: LD_INT 5
43369: PUSH
43370: FOR_TO
43371: IFFALSE 43528
// begin _x := ShiftX ( x , d , r + i ) ;
43373: LD_ADDR_VAR 0 5
43377: PUSH
43378: LD_VAR 0 4
43382: PPUSH
43383: LD_VAR 0 8
43387: PPUSH
43388: LD_VAR 0 9
43392: PUSH
43393: LD_VAR 0 10
43397: PLUS
43398: PPUSH
43399: CALL_OW 272
43403: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
43404: LD_ADDR_VAR 0 7
43408: PUSH
43409: LD_VAR 0 6
43413: PPUSH
43414: LD_VAR 0 8
43418: PPUSH
43419: LD_VAR 0 9
43423: PUSH
43424: LD_VAR 0 10
43428: PLUS
43429: PPUSH
43430: CALL_OW 273
43434: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
43435: LD_VAR 0 5
43439: PPUSH
43440: LD_VAR 0 7
43444: PPUSH
43445: CALL_OW 488
43449: PUSH
43450: LD_VAR 0 5
43454: PPUSH
43455: LD_VAR 0 7
43459: PPUSH
43460: CALL_OW 428
43464: PPUSH
43465: CALL_OW 247
43469: PUSH
43470: LD_INT 3
43472: PUSH
43473: LD_INT 2
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: IN
43480: NOT
43481: AND
43482: IFFALSE 43526
// begin ComMoveXY ( unit , _x , _y ) ;
43484: LD_VAR 0 1
43488: PPUSH
43489: LD_VAR 0 5
43493: PPUSH
43494: LD_VAR 0 7
43498: PPUSH
43499: CALL_OW 111
// result := [ _x , _y ] ;
43503: LD_ADDR_VAR 0 3
43507: PUSH
43508: LD_VAR 0 5
43512: PUSH
43513: LD_VAR 0 7
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: ST_TO_ADDR
// exit ;
43522: POP
43523: POP
43524: GO 43530
// end ; end ;
43526: GO 43370
43528: POP
43529: POP
// end ;
43530: LD_VAR 0 3
43534: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
43535: LD_INT 0
43537: PPUSH
43538: PPUSH
43539: PPUSH
// result := 0 ;
43540: LD_ADDR_VAR 0 3
43544: PUSH
43545: LD_INT 0
43547: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
43548: LD_VAR 0 1
43552: PUSH
43553: LD_INT 0
43555: LESS
43556: PUSH
43557: LD_VAR 0 1
43561: PUSH
43562: LD_INT 8
43564: GREATER
43565: OR
43566: PUSH
43567: LD_VAR 0 2
43571: PUSH
43572: LD_INT 0
43574: LESS
43575: OR
43576: PUSH
43577: LD_VAR 0 2
43581: PUSH
43582: LD_INT 8
43584: GREATER
43585: OR
43586: IFFALSE 43590
// exit ;
43588: GO 43665
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
43590: LD_ADDR_VAR 0 4
43594: PUSH
43595: LD_INT 22
43597: PUSH
43598: LD_VAR 0 2
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PPUSH
43607: CALL_OW 69
43611: PUSH
43612: FOR_IN
43613: IFFALSE 43663
// begin un := UnitShoot ( i ) ;
43615: LD_ADDR_VAR 0 5
43619: PUSH
43620: LD_VAR 0 4
43624: PPUSH
43625: CALL_OW 504
43629: ST_TO_ADDR
// if GetSide ( un ) = side1 then
43630: LD_VAR 0 5
43634: PPUSH
43635: CALL_OW 255
43639: PUSH
43640: LD_VAR 0 1
43644: EQUAL
43645: IFFALSE 43661
// begin result := un ;
43647: LD_ADDR_VAR 0 3
43651: PUSH
43652: LD_VAR 0 5
43656: ST_TO_ADDR
// exit ;
43657: POP
43658: POP
43659: GO 43665
// end ; end ;
43661: GO 43612
43663: POP
43664: POP
// end ;
43665: LD_VAR 0 3
43669: RET
// export function GetCargoBay ( units ) ; begin
43670: LD_INT 0
43672: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
43673: LD_ADDR_VAR 0 2
43677: PUSH
43678: LD_VAR 0 1
43682: PPUSH
43683: LD_INT 2
43685: PUSH
43686: LD_INT 34
43688: PUSH
43689: LD_INT 12
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 34
43698: PUSH
43699: LD_INT 51
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 34
43708: PUSH
43709: LD_INT 32
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 34
43718: PUSH
43719: LD_EXP 25
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: PPUSH
43735: CALL_OW 72
43739: ST_TO_ADDR
// end ;
43740: LD_VAR 0 2
43744: RET
// export function Negate ( value ) ; begin
43745: LD_INT 0
43747: PPUSH
// result := not value ;
43748: LD_ADDR_VAR 0 2
43752: PUSH
43753: LD_VAR 0 1
43757: NOT
43758: ST_TO_ADDR
// end ;
43759: LD_VAR 0 2
43763: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
43764: LD_INT 0
43766: PPUSH
// if x1 = x2 then
43767: LD_VAR 0 1
43771: PUSH
43772: LD_VAR 0 3
43776: EQUAL
43777: IFFALSE 43811
// begin if y1 > y2 then
43779: LD_VAR 0 2
43783: PUSH
43784: LD_VAR 0 4
43788: GREATER
43789: IFFALSE 43801
// result := 0 else
43791: LD_ADDR_VAR 0 5
43795: PUSH
43796: LD_INT 0
43798: ST_TO_ADDR
43799: GO 43809
// result := 3 ;
43801: LD_ADDR_VAR 0 5
43805: PUSH
43806: LD_INT 3
43808: ST_TO_ADDR
// exit ;
43809: GO 43897
// end ; if y1 = y2 then
43811: LD_VAR 0 2
43815: PUSH
43816: LD_VAR 0 4
43820: EQUAL
43821: IFFALSE 43855
// begin if x1 > x2 then
43823: LD_VAR 0 1
43827: PUSH
43828: LD_VAR 0 3
43832: GREATER
43833: IFFALSE 43845
// result := 1 else
43835: LD_ADDR_VAR 0 5
43839: PUSH
43840: LD_INT 1
43842: ST_TO_ADDR
43843: GO 43853
// result := 4 ;
43845: LD_ADDR_VAR 0 5
43849: PUSH
43850: LD_INT 4
43852: ST_TO_ADDR
// exit ;
43853: GO 43897
// end ; if x1 > x2 and y1 > y2 then
43855: LD_VAR 0 1
43859: PUSH
43860: LD_VAR 0 3
43864: GREATER
43865: PUSH
43866: LD_VAR 0 2
43870: PUSH
43871: LD_VAR 0 4
43875: GREATER
43876: AND
43877: IFFALSE 43889
// result := 2 else
43879: LD_ADDR_VAR 0 5
43883: PUSH
43884: LD_INT 2
43886: ST_TO_ADDR
43887: GO 43897
// result := 5 ;
43889: LD_ADDR_VAR 0 5
43893: PUSH
43894: LD_INT 5
43896: ST_TO_ADDR
// end ;
43897: LD_VAR 0 5
43901: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43902: LD_INT 0
43904: PPUSH
43905: PPUSH
// if not driver or not IsInUnit ( driver ) then
43906: LD_VAR 0 1
43910: NOT
43911: PUSH
43912: LD_VAR 0 1
43916: PPUSH
43917: CALL_OW 310
43921: NOT
43922: OR
43923: IFFALSE 43927
// exit ;
43925: GO 44017
// vehicle := IsInUnit ( driver ) ;
43927: LD_ADDR_VAR 0 3
43931: PUSH
43932: LD_VAR 0 1
43936: PPUSH
43937: CALL_OW 310
43941: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43942: LD_VAR 0 1
43946: PPUSH
43947: LD_STRING \
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: LD_INT 0
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: LD_INT 0
43961: PUSH
43962: LD_INT 0
43964: PUSH
43965: LD_INT 0
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: PUSH
43977: LD_STRING E
43979: PUSH
43980: LD_INT 0
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: LD_VAR 0 3
43990: PUSH
43991: LD_INT 0
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PPUSH
44013: CALL_OW 446
// end ;
44017: LD_VAR 0 2
44021: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
44022: LD_INT 0
44024: PPUSH
44025: PPUSH
44026: PPUSH
// tmp := [ ] ;
44027: LD_ADDR_VAR 0 5
44031: PUSH
44032: EMPTY
44033: ST_TO_ADDR
// for i in units do
44034: LD_ADDR_VAR 0 4
44038: PUSH
44039: LD_VAR 0 1
44043: PUSH
44044: FOR_IN
44045: IFFALSE 44083
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
44047: LD_ADDR_VAR 0 5
44051: PUSH
44052: LD_VAR 0 5
44056: PPUSH
44057: LD_VAR 0 5
44061: PUSH
44062: LD_INT 1
44064: PLUS
44065: PPUSH
44066: LD_VAR 0 4
44070: PPUSH
44071: CALL_OW 256
44075: PPUSH
44076: CALL_OW 2
44080: ST_TO_ADDR
44081: GO 44044
44083: POP
44084: POP
// if not tmp then
44085: LD_VAR 0 5
44089: NOT
44090: IFFALSE 44094
// exit ;
44092: GO 44142
// if asc then
44094: LD_VAR 0 2
44098: IFFALSE 44122
// result := SortListByListAsc ( units , tmp ) else
44100: LD_ADDR_VAR 0 3
44104: PUSH
44105: LD_VAR 0 1
44109: PPUSH
44110: LD_VAR 0 5
44114: PPUSH
44115: CALL_OW 76
44119: ST_TO_ADDR
44120: GO 44142
// result := SortListByListDesc ( units , tmp ) ;
44122: LD_ADDR_VAR 0 3
44126: PUSH
44127: LD_VAR 0 1
44131: PPUSH
44132: LD_VAR 0 5
44136: PPUSH
44137: CALL_OW 77
44141: ST_TO_ADDR
// end ; end_of_file
44142: LD_VAR 0 3
44146: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
44147: LD_INT 0
44149: PPUSH
// ar_miner := 81 ;
44150: LD_ADDR_EXP 31
44154: PUSH
44155: LD_INT 81
44157: ST_TO_ADDR
// ar_crane := 88 ;
44158: LD_ADDR_EXP 30
44162: PUSH
44163: LD_INT 88
44165: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
44166: LD_ADDR_EXP 25
44170: PUSH
44171: LD_INT 89
44173: ST_TO_ADDR
// us_hack := 99 ;
44174: LD_ADDR_EXP 26
44178: PUSH
44179: LD_INT 99
44181: ST_TO_ADDR
// us_artillery := 97 ;
44182: LD_ADDR_EXP 27
44186: PUSH
44187: LD_INT 97
44189: ST_TO_ADDR
// ar_bio_bomb := 91 ;
44190: LD_ADDR_EXP 28
44194: PUSH
44195: LD_INT 91
44197: ST_TO_ADDR
// ar_mortar := 92 ;
44198: LD_ADDR_EXP 29
44202: PUSH
44203: LD_INT 92
44205: ST_TO_ADDR
// ru_radar := 98 ;
44206: LD_ADDR_EXP 24
44210: PUSH
44211: LD_INT 98
44213: ST_TO_ADDR
// tech_Artillery := 80 ;
44214: LD_ADDR_EXP 32
44218: PUSH
44219: LD_INT 80
44221: ST_TO_ADDR
// tech_RadMat := 81 ;
44222: LD_ADDR_EXP 33
44226: PUSH
44227: LD_INT 81
44229: ST_TO_ADDR
// tech_BasicTools := 82 ;
44230: LD_ADDR_EXP 34
44234: PUSH
44235: LD_INT 82
44237: ST_TO_ADDR
// tech_Cargo := 83 ;
44238: LD_ADDR_EXP 35
44242: PUSH
44243: LD_INT 83
44245: ST_TO_ADDR
// tech_Track := 84 ;
44246: LD_ADDR_EXP 36
44250: PUSH
44251: LD_INT 84
44253: ST_TO_ADDR
// tech_Crane := 85 ;
44254: LD_ADDR_EXP 37
44258: PUSH
44259: LD_INT 85
44261: ST_TO_ADDR
// tech_Bulldozer := 86 ;
44262: LD_ADDR_EXP 38
44266: PUSH
44267: LD_INT 86
44269: ST_TO_ADDR
// tech_Hovercraft := 87 ;
44270: LD_ADDR_EXP 39
44274: PUSH
44275: LD_INT 87
44277: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
44278: LD_ADDR_EXP 40
44282: PUSH
44283: LD_INT 88
44285: ST_TO_ADDR
// class_mastodont := 31 ;
44286: LD_ADDR_EXP 41
44290: PUSH
44291: LD_INT 31
44293: ST_TO_ADDR
// class_horse := 21 ;
44294: LD_ADDR_EXP 42
44298: PUSH
44299: LD_INT 21
44301: ST_TO_ADDR
// end ;
44302: LD_VAR 0 1
44306: RET
// every 1 do
44307: GO 44309
44309: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
44310: CALL 44147 0 0
44314: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
44315: LD_INT 0
44317: PPUSH
// if p2 = 100 then
44318: LD_VAR 0 2
44322: PUSH
44323: LD_INT 100
44325: EQUAL
44326: IFFALSE 45275
// begin if not StreamModeActive then
44328: LD_EXP 43
44332: NOT
44333: IFFALSE 44343
// StreamModeActive := true ;
44335: LD_ADDR_EXP 43
44339: PUSH
44340: LD_INT 1
44342: ST_TO_ADDR
// if p3 = 0 then
44343: LD_VAR 0 3
44347: PUSH
44348: LD_INT 0
44350: EQUAL
44351: IFFALSE 44357
// InitStreamMode ;
44353: CALL 45435 0 0
// if p3 = 1 then
44357: LD_VAR 0 3
44361: PUSH
44362: LD_INT 1
44364: EQUAL
44365: IFFALSE 44375
// sRocket := true ;
44367: LD_ADDR_EXP 48
44371: PUSH
44372: LD_INT 1
44374: ST_TO_ADDR
// if p3 = 2 then
44375: LD_VAR 0 3
44379: PUSH
44380: LD_INT 2
44382: EQUAL
44383: IFFALSE 44393
// sSpeed := true ;
44385: LD_ADDR_EXP 47
44389: PUSH
44390: LD_INT 1
44392: ST_TO_ADDR
// if p3 = 3 then
44393: LD_VAR 0 3
44397: PUSH
44398: LD_INT 3
44400: EQUAL
44401: IFFALSE 44411
// sEngine := true ;
44403: LD_ADDR_EXP 49
44407: PUSH
44408: LD_INT 1
44410: ST_TO_ADDR
// if p3 = 4 then
44411: LD_VAR 0 3
44415: PUSH
44416: LD_INT 4
44418: EQUAL
44419: IFFALSE 44429
// sSpec := true ;
44421: LD_ADDR_EXP 46
44425: PUSH
44426: LD_INT 1
44428: ST_TO_ADDR
// if p3 = 5 then
44429: LD_VAR 0 3
44433: PUSH
44434: LD_INT 5
44436: EQUAL
44437: IFFALSE 44447
// sLevel := true ;
44439: LD_ADDR_EXP 50
44443: PUSH
44444: LD_INT 1
44446: ST_TO_ADDR
// if p3 = 6 then
44447: LD_VAR 0 3
44451: PUSH
44452: LD_INT 6
44454: EQUAL
44455: IFFALSE 44465
// sArmoury := true ;
44457: LD_ADDR_EXP 51
44461: PUSH
44462: LD_INT 1
44464: ST_TO_ADDR
// if p3 = 7 then
44465: LD_VAR 0 3
44469: PUSH
44470: LD_INT 7
44472: EQUAL
44473: IFFALSE 44483
// sRadar := true ;
44475: LD_ADDR_EXP 52
44479: PUSH
44480: LD_INT 1
44482: ST_TO_ADDR
// if p3 = 8 then
44483: LD_VAR 0 3
44487: PUSH
44488: LD_INT 8
44490: EQUAL
44491: IFFALSE 44501
// sBunker := true ;
44493: LD_ADDR_EXP 53
44497: PUSH
44498: LD_INT 1
44500: ST_TO_ADDR
// if p3 = 9 then
44501: LD_VAR 0 3
44505: PUSH
44506: LD_INT 9
44508: EQUAL
44509: IFFALSE 44519
// sHack := true ;
44511: LD_ADDR_EXP 54
44515: PUSH
44516: LD_INT 1
44518: ST_TO_ADDR
// if p3 = 10 then
44519: LD_VAR 0 3
44523: PUSH
44524: LD_INT 10
44526: EQUAL
44527: IFFALSE 44537
// sFire := true ;
44529: LD_ADDR_EXP 55
44533: PUSH
44534: LD_INT 1
44536: ST_TO_ADDR
// if p3 = 11 then
44537: LD_VAR 0 3
44541: PUSH
44542: LD_INT 11
44544: EQUAL
44545: IFFALSE 44555
// sRefresh := true ;
44547: LD_ADDR_EXP 56
44551: PUSH
44552: LD_INT 1
44554: ST_TO_ADDR
// if p3 = 12 then
44555: LD_VAR 0 3
44559: PUSH
44560: LD_INT 12
44562: EQUAL
44563: IFFALSE 44573
// sExp := true ;
44565: LD_ADDR_EXP 57
44569: PUSH
44570: LD_INT 1
44572: ST_TO_ADDR
// if p3 = 13 then
44573: LD_VAR 0 3
44577: PUSH
44578: LD_INT 13
44580: EQUAL
44581: IFFALSE 44591
// sDepot := true ;
44583: LD_ADDR_EXP 58
44587: PUSH
44588: LD_INT 1
44590: ST_TO_ADDR
// if p3 = 14 then
44591: LD_VAR 0 3
44595: PUSH
44596: LD_INT 14
44598: EQUAL
44599: IFFALSE 44609
// sFlag := true ;
44601: LD_ADDR_EXP 59
44605: PUSH
44606: LD_INT 1
44608: ST_TO_ADDR
// if p3 = 15 then
44609: LD_VAR 0 3
44613: PUSH
44614: LD_INT 15
44616: EQUAL
44617: IFFALSE 44627
// sKamikadze := true ;
44619: LD_ADDR_EXP 67
44623: PUSH
44624: LD_INT 1
44626: ST_TO_ADDR
// if p3 = 16 then
44627: LD_VAR 0 3
44631: PUSH
44632: LD_INT 16
44634: EQUAL
44635: IFFALSE 44645
// sTroll := true ;
44637: LD_ADDR_EXP 68
44641: PUSH
44642: LD_INT 1
44644: ST_TO_ADDR
// if p3 = 17 then
44645: LD_VAR 0 3
44649: PUSH
44650: LD_INT 17
44652: EQUAL
44653: IFFALSE 44663
// sSlow := true ;
44655: LD_ADDR_EXP 69
44659: PUSH
44660: LD_INT 1
44662: ST_TO_ADDR
// if p3 = 18 then
44663: LD_VAR 0 3
44667: PUSH
44668: LD_INT 18
44670: EQUAL
44671: IFFALSE 44681
// sLack := true ;
44673: LD_ADDR_EXP 70
44677: PUSH
44678: LD_INT 1
44680: ST_TO_ADDR
// if p3 = 19 then
44681: LD_VAR 0 3
44685: PUSH
44686: LD_INT 19
44688: EQUAL
44689: IFFALSE 44699
// sTank := true ;
44691: LD_ADDR_EXP 72
44695: PUSH
44696: LD_INT 1
44698: ST_TO_ADDR
// if p3 = 20 then
44699: LD_VAR 0 3
44703: PUSH
44704: LD_INT 20
44706: EQUAL
44707: IFFALSE 44717
// sRemote := true ;
44709: LD_ADDR_EXP 73
44713: PUSH
44714: LD_INT 1
44716: ST_TO_ADDR
// if p3 = 21 then
44717: LD_VAR 0 3
44721: PUSH
44722: LD_INT 21
44724: EQUAL
44725: IFFALSE 44735
// sPowell := true ;
44727: LD_ADDR_EXP 74
44731: PUSH
44732: LD_INT 1
44734: ST_TO_ADDR
// if p3 = 22 then
44735: LD_VAR 0 3
44739: PUSH
44740: LD_INT 22
44742: EQUAL
44743: IFFALSE 44753
// sTeleport := true ;
44745: LD_ADDR_EXP 77
44749: PUSH
44750: LD_INT 1
44752: ST_TO_ADDR
// if p3 = 23 then
44753: LD_VAR 0 3
44757: PUSH
44758: LD_INT 23
44760: EQUAL
44761: IFFALSE 44771
// sOilTower := true ;
44763: LD_ADDR_EXP 79
44767: PUSH
44768: LD_INT 1
44770: ST_TO_ADDR
// if p3 = 24 then
44771: LD_VAR 0 3
44775: PUSH
44776: LD_INT 24
44778: EQUAL
44779: IFFALSE 44789
// sShovel := true ;
44781: LD_ADDR_EXP 80
44785: PUSH
44786: LD_INT 1
44788: ST_TO_ADDR
// if p3 = 25 then
44789: LD_VAR 0 3
44793: PUSH
44794: LD_INT 25
44796: EQUAL
44797: IFFALSE 44807
// sSheik := true ;
44799: LD_ADDR_EXP 81
44803: PUSH
44804: LD_INT 1
44806: ST_TO_ADDR
// if p3 = 26 then
44807: LD_VAR 0 3
44811: PUSH
44812: LD_INT 26
44814: EQUAL
44815: IFFALSE 44825
// sEarthquake := true ;
44817: LD_ADDR_EXP 83
44821: PUSH
44822: LD_INT 1
44824: ST_TO_ADDR
// if p3 = 27 then
44825: LD_VAR 0 3
44829: PUSH
44830: LD_INT 27
44832: EQUAL
44833: IFFALSE 44843
// sAI := true ;
44835: LD_ADDR_EXP 84
44839: PUSH
44840: LD_INT 1
44842: ST_TO_ADDR
// if p3 = 28 then
44843: LD_VAR 0 3
44847: PUSH
44848: LD_INT 28
44850: EQUAL
44851: IFFALSE 44861
// sCargo := true ;
44853: LD_ADDR_EXP 87
44857: PUSH
44858: LD_INT 1
44860: ST_TO_ADDR
// if p3 = 29 then
44861: LD_VAR 0 3
44865: PUSH
44866: LD_INT 29
44868: EQUAL
44869: IFFALSE 44879
// sDLaser := true ;
44871: LD_ADDR_EXP 88
44875: PUSH
44876: LD_INT 1
44878: ST_TO_ADDR
// if p3 = 30 then
44879: LD_VAR 0 3
44883: PUSH
44884: LD_INT 30
44886: EQUAL
44887: IFFALSE 44897
// sExchange := true ;
44889: LD_ADDR_EXP 89
44893: PUSH
44894: LD_INT 1
44896: ST_TO_ADDR
// if p3 = 31 then
44897: LD_VAR 0 3
44901: PUSH
44902: LD_INT 31
44904: EQUAL
44905: IFFALSE 44915
// sFac := true ;
44907: LD_ADDR_EXP 90
44911: PUSH
44912: LD_INT 1
44914: ST_TO_ADDR
// if p3 = 32 then
44915: LD_VAR 0 3
44919: PUSH
44920: LD_INT 32
44922: EQUAL
44923: IFFALSE 44933
// sPower := true ;
44925: LD_ADDR_EXP 91
44929: PUSH
44930: LD_INT 1
44932: ST_TO_ADDR
// if p3 = 33 then
44933: LD_VAR 0 3
44937: PUSH
44938: LD_INT 33
44940: EQUAL
44941: IFFALSE 44951
// sRandom := true ;
44943: LD_ADDR_EXP 92
44947: PUSH
44948: LD_INT 1
44950: ST_TO_ADDR
// if p3 = 34 then
44951: LD_VAR 0 3
44955: PUSH
44956: LD_INT 34
44958: EQUAL
44959: IFFALSE 44969
// sShield := true ;
44961: LD_ADDR_EXP 93
44965: PUSH
44966: LD_INT 1
44968: ST_TO_ADDR
// if p3 = 35 then
44969: LD_VAR 0 3
44973: PUSH
44974: LD_INT 35
44976: EQUAL
44977: IFFALSE 44987
// sTime := true ;
44979: LD_ADDR_EXP 94
44983: PUSH
44984: LD_INT 1
44986: ST_TO_ADDR
// if p3 = 36 then
44987: LD_VAR 0 3
44991: PUSH
44992: LD_INT 36
44994: EQUAL
44995: IFFALSE 45005
// sTools := true ;
44997: LD_ADDR_EXP 95
45001: PUSH
45002: LD_INT 1
45004: ST_TO_ADDR
// if p3 = 101 then
45005: LD_VAR 0 3
45009: PUSH
45010: LD_INT 101
45012: EQUAL
45013: IFFALSE 45023
// sSold := true ;
45015: LD_ADDR_EXP 60
45019: PUSH
45020: LD_INT 1
45022: ST_TO_ADDR
// if p3 = 102 then
45023: LD_VAR 0 3
45027: PUSH
45028: LD_INT 102
45030: EQUAL
45031: IFFALSE 45041
// sDiff := true ;
45033: LD_ADDR_EXP 61
45037: PUSH
45038: LD_INT 1
45040: ST_TO_ADDR
// if p3 = 103 then
45041: LD_VAR 0 3
45045: PUSH
45046: LD_INT 103
45048: EQUAL
45049: IFFALSE 45059
// sFog := true ;
45051: LD_ADDR_EXP 64
45055: PUSH
45056: LD_INT 1
45058: ST_TO_ADDR
// if p3 = 104 then
45059: LD_VAR 0 3
45063: PUSH
45064: LD_INT 104
45066: EQUAL
45067: IFFALSE 45077
// sReset := true ;
45069: LD_ADDR_EXP 65
45073: PUSH
45074: LD_INT 1
45076: ST_TO_ADDR
// if p3 = 105 then
45077: LD_VAR 0 3
45081: PUSH
45082: LD_INT 105
45084: EQUAL
45085: IFFALSE 45095
// sSun := true ;
45087: LD_ADDR_EXP 66
45091: PUSH
45092: LD_INT 1
45094: ST_TO_ADDR
// if p3 = 106 then
45095: LD_VAR 0 3
45099: PUSH
45100: LD_INT 106
45102: EQUAL
45103: IFFALSE 45113
// sTiger := true ;
45105: LD_ADDR_EXP 62
45109: PUSH
45110: LD_INT 1
45112: ST_TO_ADDR
// if p3 = 107 then
45113: LD_VAR 0 3
45117: PUSH
45118: LD_INT 107
45120: EQUAL
45121: IFFALSE 45131
// sBomb := true ;
45123: LD_ADDR_EXP 63
45127: PUSH
45128: LD_INT 1
45130: ST_TO_ADDR
// if p3 = 108 then
45131: LD_VAR 0 3
45135: PUSH
45136: LD_INT 108
45138: EQUAL
45139: IFFALSE 45149
// sWound := true ;
45141: LD_ADDR_EXP 71
45145: PUSH
45146: LD_INT 1
45148: ST_TO_ADDR
// if p3 = 109 then
45149: LD_VAR 0 3
45153: PUSH
45154: LD_INT 109
45156: EQUAL
45157: IFFALSE 45167
// sBetray := true ;
45159: LD_ADDR_EXP 75
45163: PUSH
45164: LD_INT 1
45166: ST_TO_ADDR
// if p3 = 110 then
45167: LD_VAR 0 3
45171: PUSH
45172: LD_INT 110
45174: EQUAL
45175: IFFALSE 45185
// sContamin := true ;
45177: LD_ADDR_EXP 76
45181: PUSH
45182: LD_INT 1
45184: ST_TO_ADDR
// if p3 = 111 then
45185: LD_VAR 0 3
45189: PUSH
45190: LD_INT 111
45192: EQUAL
45193: IFFALSE 45203
// sOil := true ;
45195: LD_ADDR_EXP 78
45199: PUSH
45200: LD_INT 1
45202: ST_TO_ADDR
// if p3 = 112 then
45203: LD_VAR 0 3
45207: PUSH
45208: LD_INT 112
45210: EQUAL
45211: IFFALSE 45221
// sStu := true ;
45213: LD_ADDR_EXP 82
45217: PUSH
45218: LD_INT 1
45220: ST_TO_ADDR
// if p3 = 113 then
45221: LD_VAR 0 3
45225: PUSH
45226: LD_INT 113
45228: EQUAL
45229: IFFALSE 45239
// sBazooka := true ;
45231: LD_ADDR_EXP 85
45235: PUSH
45236: LD_INT 1
45238: ST_TO_ADDR
// if p3 = 114 then
45239: LD_VAR 0 3
45243: PUSH
45244: LD_INT 114
45246: EQUAL
45247: IFFALSE 45257
// sMortar := true ;
45249: LD_ADDR_EXP 86
45253: PUSH
45254: LD_INT 1
45256: ST_TO_ADDR
// if p3 = 115 then
45257: LD_VAR 0 3
45261: PUSH
45262: LD_INT 115
45264: EQUAL
45265: IFFALSE 45275
// sRanger := true ;
45267: LD_ADDR_EXP 96
45271: PUSH
45272: LD_INT 1
45274: ST_TO_ADDR
// end ; if p2 = 101 then
45275: LD_VAR 0 2
45279: PUSH
45280: LD_INT 101
45282: EQUAL
45283: IFFALSE 45411
// begin case p3 of 1 :
45285: LD_VAR 0 3
45289: PUSH
45290: LD_INT 1
45292: DOUBLE
45293: EQUAL
45294: IFTRUE 45298
45296: GO 45305
45298: POP
// hHackUnlimitedResources ; 2 :
45299: CALL 56448 0 0
45303: GO 45411
45305: LD_INT 2
45307: DOUBLE
45308: EQUAL
45309: IFTRUE 45313
45311: GO 45320
45313: POP
// hHackSetLevel10 ; 3 :
45314: CALL 56581 0 0
45318: GO 45411
45320: LD_INT 3
45322: DOUBLE
45323: EQUAL
45324: IFTRUE 45328
45326: GO 45335
45328: POP
// hHackSetLevel10YourUnits ; 4 :
45329: CALL 56666 0 0
45333: GO 45411
45335: LD_INT 4
45337: DOUBLE
45338: EQUAL
45339: IFTRUE 45343
45341: GO 45350
45343: POP
// hHackInvincible ; 5 :
45344: CALL 57114 0 0
45348: GO 45411
45350: LD_INT 5
45352: DOUBLE
45353: EQUAL
45354: IFTRUE 45358
45356: GO 45365
45358: POP
// hHackInvisible ; 6 :
45359: CALL 57225 0 0
45363: GO 45411
45365: LD_INT 6
45367: DOUBLE
45368: EQUAL
45369: IFTRUE 45373
45371: GO 45380
45373: POP
// hHackChangeYourSide ; 7 :
45374: CALL 57282 0 0
45378: GO 45411
45380: LD_INT 7
45382: DOUBLE
45383: EQUAL
45384: IFTRUE 45388
45386: GO 45395
45388: POP
// hHackChangeUnitSide ; 8 :
45389: CALL 57324 0 0
45393: GO 45411
45395: LD_INT 8
45397: DOUBLE
45398: EQUAL
45399: IFTRUE 45403
45401: GO 45410
45403: POP
// hHackFog ; end ;
45404: CALL 57425 0 0
45408: GO 45411
45410: POP
// end ; end ;
45411: LD_VAR 0 7
45415: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
45416: GO 45418
45418: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
45419: LD_STRING initStreamRollete();
45421: PPUSH
45422: CALL_OW 559
// InitStreamMode ;
45426: CALL 45435 0 0
// DefineStreamItems ( ) ;
45430: CALL 45875 0 0
// end ;
45434: END
// function InitStreamMode ; begin
45435: LD_INT 0
45437: PPUSH
// streamModeActive := false ;
45438: LD_ADDR_EXP 43
45442: PUSH
45443: LD_INT 0
45445: ST_TO_ADDR
// normalCounter := 36 ;
45446: LD_ADDR_EXP 44
45450: PUSH
45451: LD_INT 36
45453: ST_TO_ADDR
// hardcoreCounter := 16 ;
45454: LD_ADDR_EXP 45
45458: PUSH
45459: LD_INT 16
45461: ST_TO_ADDR
// sRocket := false ;
45462: LD_ADDR_EXP 48
45466: PUSH
45467: LD_INT 0
45469: ST_TO_ADDR
// sSpeed := false ;
45470: LD_ADDR_EXP 47
45474: PUSH
45475: LD_INT 0
45477: ST_TO_ADDR
// sEngine := false ;
45478: LD_ADDR_EXP 49
45482: PUSH
45483: LD_INT 0
45485: ST_TO_ADDR
// sSpec := false ;
45486: LD_ADDR_EXP 46
45490: PUSH
45491: LD_INT 0
45493: ST_TO_ADDR
// sLevel := false ;
45494: LD_ADDR_EXP 50
45498: PUSH
45499: LD_INT 0
45501: ST_TO_ADDR
// sArmoury := false ;
45502: LD_ADDR_EXP 51
45506: PUSH
45507: LD_INT 0
45509: ST_TO_ADDR
// sRadar := false ;
45510: LD_ADDR_EXP 52
45514: PUSH
45515: LD_INT 0
45517: ST_TO_ADDR
// sBunker := false ;
45518: LD_ADDR_EXP 53
45522: PUSH
45523: LD_INT 0
45525: ST_TO_ADDR
// sHack := false ;
45526: LD_ADDR_EXP 54
45530: PUSH
45531: LD_INT 0
45533: ST_TO_ADDR
// sFire := false ;
45534: LD_ADDR_EXP 55
45538: PUSH
45539: LD_INT 0
45541: ST_TO_ADDR
// sRefresh := false ;
45542: LD_ADDR_EXP 56
45546: PUSH
45547: LD_INT 0
45549: ST_TO_ADDR
// sExp := false ;
45550: LD_ADDR_EXP 57
45554: PUSH
45555: LD_INT 0
45557: ST_TO_ADDR
// sDepot := false ;
45558: LD_ADDR_EXP 58
45562: PUSH
45563: LD_INT 0
45565: ST_TO_ADDR
// sFlag := false ;
45566: LD_ADDR_EXP 59
45570: PUSH
45571: LD_INT 0
45573: ST_TO_ADDR
// sKamikadze := false ;
45574: LD_ADDR_EXP 67
45578: PUSH
45579: LD_INT 0
45581: ST_TO_ADDR
// sTroll := false ;
45582: LD_ADDR_EXP 68
45586: PUSH
45587: LD_INT 0
45589: ST_TO_ADDR
// sSlow := false ;
45590: LD_ADDR_EXP 69
45594: PUSH
45595: LD_INT 0
45597: ST_TO_ADDR
// sLack := false ;
45598: LD_ADDR_EXP 70
45602: PUSH
45603: LD_INT 0
45605: ST_TO_ADDR
// sTank := false ;
45606: LD_ADDR_EXP 72
45610: PUSH
45611: LD_INT 0
45613: ST_TO_ADDR
// sRemote := false ;
45614: LD_ADDR_EXP 73
45618: PUSH
45619: LD_INT 0
45621: ST_TO_ADDR
// sPowell := false ;
45622: LD_ADDR_EXP 74
45626: PUSH
45627: LD_INT 0
45629: ST_TO_ADDR
// sTeleport := false ;
45630: LD_ADDR_EXP 77
45634: PUSH
45635: LD_INT 0
45637: ST_TO_ADDR
// sOilTower := false ;
45638: LD_ADDR_EXP 79
45642: PUSH
45643: LD_INT 0
45645: ST_TO_ADDR
// sShovel := false ;
45646: LD_ADDR_EXP 80
45650: PUSH
45651: LD_INT 0
45653: ST_TO_ADDR
// sSheik := false ;
45654: LD_ADDR_EXP 81
45658: PUSH
45659: LD_INT 0
45661: ST_TO_ADDR
// sEarthquake := false ;
45662: LD_ADDR_EXP 83
45666: PUSH
45667: LD_INT 0
45669: ST_TO_ADDR
// sAI := false ;
45670: LD_ADDR_EXP 84
45674: PUSH
45675: LD_INT 0
45677: ST_TO_ADDR
// sCargo := false ;
45678: LD_ADDR_EXP 87
45682: PUSH
45683: LD_INT 0
45685: ST_TO_ADDR
// sDLaser := false ;
45686: LD_ADDR_EXP 88
45690: PUSH
45691: LD_INT 0
45693: ST_TO_ADDR
// sExchange := false ;
45694: LD_ADDR_EXP 89
45698: PUSH
45699: LD_INT 0
45701: ST_TO_ADDR
// sFac := false ;
45702: LD_ADDR_EXP 90
45706: PUSH
45707: LD_INT 0
45709: ST_TO_ADDR
// sPower := false ;
45710: LD_ADDR_EXP 91
45714: PUSH
45715: LD_INT 0
45717: ST_TO_ADDR
// sRandom := false ;
45718: LD_ADDR_EXP 92
45722: PUSH
45723: LD_INT 0
45725: ST_TO_ADDR
// sShield := false ;
45726: LD_ADDR_EXP 93
45730: PUSH
45731: LD_INT 0
45733: ST_TO_ADDR
// sTime := false ;
45734: LD_ADDR_EXP 94
45738: PUSH
45739: LD_INT 0
45741: ST_TO_ADDR
// sTools := false ;
45742: LD_ADDR_EXP 95
45746: PUSH
45747: LD_INT 0
45749: ST_TO_ADDR
// sSold := false ;
45750: LD_ADDR_EXP 60
45754: PUSH
45755: LD_INT 0
45757: ST_TO_ADDR
// sDiff := false ;
45758: LD_ADDR_EXP 61
45762: PUSH
45763: LD_INT 0
45765: ST_TO_ADDR
// sFog := false ;
45766: LD_ADDR_EXP 64
45770: PUSH
45771: LD_INT 0
45773: ST_TO_ADDR
// sReset := false ;
45774: LD_ADDR_EXP 65
45778: PUSH
45779: LD_INT 0
45781: ST_TO_ADDR
// sSun := false ;
45782: LD_ADDR_EXP 66
45786: PUSH
45787: LD_INT 0
45789: ST_TO_ADDR
// sTiger := false ;
45790: LD_ADDR_EXP 62
45794: PUSH
45795: LD_INT 0
45797: ST_TO_ADDR
// sBomb := false ;
45798: LD_ADDR_EXP 63
45802: PUSH
45803: LD_INT 0
45805: ST_TO_ADDR
// sWound := false ;
45806: LD_ADDR_EXP 71
45810: PUSH
45811: LD_INT 0
45813: ST_TO_ADDR
// sBetray := false ;
45814: LD_ADDR_EXP 75
45818: PUSH
45819: LD_INT 0
45821: ST_TO_ADDR
// sContamin := false ;
45822: LD_ADDR_EXP 76
45826: PUSH
45827: LD_INT 0
45829: ST_TO_ADDR
// sOil := false ;
45830: LD_ADDR_EXP 78
45834: PUSH
45835: LD_INT 0
45837: ST_TO_ADDR
// sStu := false ;
45838: LD_ADDR_EXP 82
45842: PUSH
45843: LD_INT 0
45845: ST_TO_ADDR
// sBazooka := false ;
45846: LD_ADDR_EXP 85
45850: PUSH
45851: LD_INT 0
45853: ST_TO_ADDR
// sMortar := false ;
45854: LD_ADDR_EXP 86
45858: PUSH
45859: LD_INT 0
45861: ST_TO_ADDR
// sRanger := false ;
45862: LD_ADDR_EXP 96
45866: PUSH
45867: LD_INT 0
45869: ST_TO_ADDR
// end ;
45870: LD_VAR 0 1
45874: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
45875: LD_INT 0
45877: PPUSH
45878: PPUSH
45879: PPUSH
45880: PPUSH
45881: PPUSH
// result := [ ] ;
45882: LD_ADDR_VAR 0 1
45886: PUSH
45887: EMPTY
45888: ST_TO_ADDR
// if campaign_id = 1 then
45889: LD_OWVAR 69
45893: PUSH
45894: LD_INT 1
45896: EQUAL
45897: IFFALSE 48835
// begin case mission_number of 1 :
45899: LD_OWVAR 70
45903: PUSH
45904: LD_INT 1
45906: DOUBLE
45907: EQUAL
45908: IFTRUE 45912
45910: GO 45976
45912: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
45913: LD_ADDR_VAR 0 1
45917: PUSH
45918: LD_INT 2
45920: PUSH
45921: LD_INT 4
45923: PUSH
45924: LD_INT 11
45926: PUSH
45927: LD_INT 12
45929: PUSH
45930: LD_INT 15
45932: PUSH
45933: LD_INT 16
45935: PUSH
45936: LD_INT 22
45938: PUSH
45939: LD_INT 23
45941: PUSH
45942: LD_INT 26
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 101
45958: PUSH
45959: LD_INT 102
45961: PUSH
45962: LD_INT 106
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: LIST
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: ST_TO_ADDR
45974: GO 48833
45976: LD_INT 2
45978: DOUBLE
45979: EQUAL
45980: IFTRUE 45984
45982: GO 46056
45984: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
45985: LD_ADDR_VAR 0 1
45989: PUSH
45990: LD_INT 2
45992: PUSH
45993: LD_INT 4
45995: PUSH
45996: LD_INT 11
45998: PUSH
45999: LD_INT 12
46001: PUSH
46002: LD_INT 15
46004: PUSH
46005: LD_INT 16
46007: PUSH
46008: LD_INT 22
46010: PUSH
46011: LD_INT 23
46013: PUSH
46014: LD_INT 26
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 101
46030: PUSH
46031: LD_INT 102
46033: PUSH
46034: LD_INT 105
46036: PUSH
46037: LD_INT 106
46039: PUSH
46040: LD_INT 108
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: ST_TO_ADDR
46054: GO 48833
46056: LD_INT 3
46058: DOUBLE
46059: EQUAL
46060: IFTRUE 46064
46062: GO 46140
46064: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
46065: LD_ADDR_VAR 0 1
46069: PUSH
46070: LD_INT 2
46072: PUSH
46073: LD_INT 4
46075: PUSH
46076: LD_INT 5
46078: PUSH
46079: LD_INT 11
46081: PUSH
46082: LD_INT 12
46084: PUSH
46085: LD_INT 15
46087: PUSH
46088: LD_INT 16
46090: PUSH
46091: LD_INT 22
46093: PUSH
46094: LD_INT 26
46096: PUSH
46097: LD_INT 36
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 101
46114: PUSH
46115: LD_INT 102
46117: PUSH
46118: LD_INT 105
46120: PUSH
46121: LD_INT 106
46123: PUSH
46124: LD_INT 108
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: ST_TO_ADDR
46138: GO 48833
46140: LD_INT 4
46142: DOUBLE
46143: EQUAL
46144: IFTRUE 46148
46146: GO 46232
46148: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
46149: LD_ADDR_VAR 0 1
46153: PUSH
46154: LD_INT 2
46156: PUSH
46157: LD_INT 4
46159: PUSH
46160: LD_INT 5
46162: PUSH
46163: LD_INT 8
46165: PUSH
46166: LD_INT 11
46168: PUSH
46169: LD_INT 12
46171: PUSH
46172: LD_INT 15
46174: PUSH
46175: LD_INT 16
46177: PUSH
46178: LD_INT 22
46180: PUSH
46181: LD_INT 23
46183: PUSH
46184: LD_INT 26
46186: PUSH
46187: LD_INT 36
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 101
46206: PUSH
46207: LD_INT 102
46209: PUSH
46210: LD_INT 105
46212: PUSH
46213: LD_INT 106
46215: PUSH
46216: LD_INT 108
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: ST_TO_ADDR
46230: GO 48833
46232: LD_INT 5
46234: DOUBLE
46235: EQUAL
46236: IFTRUE 46240
46238: GO 46340
46240: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
46241: LD_ADDR_VAR 0 1
46245: PUSH
46246: LD_INT 2
46248: PUSH
46249: LD_INT 4
46251: PUSH
46252: LD_INT 5
46254: PUSH
46255: LD_INT 6
46257: PUSH
46258: LD_INT 8
46260: PUSH
46261: LD_INT 11
46263: PUSH
46264: LD_INT 12
46266: PUSH
46267: LD_INT 15
46269: PUSH
46270: LD_INT 16
46272: PUSH
46273: LD_INT 22
46275: PUSH
46276: LD_INT 23
46278: PUSH
46279: LD_INT 25
46281: PUSH
46282: LD_INT 26
46284: PUSH
46285: LD_INT 36
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 101
46306: PUSH
46307: LD_INT 102
46309: PUSH
46310: LD_INT 105
46312: PUSH
46313: LD_INT 106
46315: PUSH
46316: LD_INT 108
46318: PUSH
46319: LD_INT 109
46321: PUSH
46322: LD_INT 112
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: ST_TO_ADDR
46338: GO 48833
46340: LD_INT 6
46342: DOUBLE
46343: EQUAL
46344: IFTRUE 46348
46346: GO 46468
46348: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
46349: LD_ADDR_VAR 0 1
46353: PUSH
46354: LD_INT 2
46356: PUSH
46357: LD_INT 4
46359: PUSH
46360: LD_INT 5
46362: PUSH
46363: LD_INT 6
46365: PUSH
46366: LD_INT 8
46368: PUSH
46369: LD_INT 11
46371: PUSH
46372: LD_INT 12
46374: PUSH
46375: LD_INT 15
46377: PUSH
46378: LD_INT 16
46380: PUSH
46381: LD_INT 20
46383: PUSH
46384: LD_INT 21
46386: PUSH
46387: LD_INT 22
46389: PUSH
46390: LD_INT 23
46392: PUSH
46393: LD_INT 25
46395: PUSH
46396: LD_INT 26
46398: PUSH
46399: LD_INT 30
46401: PUSH
46402: LD_INT 31
46404: PUSH
46405: LD_INT 32
46407: PUSH
46408: LD_INT 36
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 101
46434: PUSH
46435: LD_INT 102
46437: PUSH
46438: LD_INT 105
46440: PUSH
46441: LD_INT 106
46443: PUSH
46444: LD_INT 108
46446: PUSH
46447: LD_INT 109
46449: PUSH
46450: LD_INT 112
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: ST_TO_ADDR
46466: GO 48833
46468: LD_INT 7
46470: DOUBLE
46471: EQUAL
46472: IFTRUE 46476
46474: GO 46576
46476: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
46477: LD_ADDR_VAR 0 1
46481: PUSH
46482: LD_INT 2
46484: PUSH
46485: LD_INT 4
46487: PUSH
46488: LD_INT 5
46490: PUSH
46491: LD_INT 7
46493: PUSH
46494: LD_INT 11
46496: PUSH
46497: LD_INT 12
46499: PUSH
46500: LD_INT 15
46502: PUSH
46503: LD_INT 16
46505: PUSH
46506: LD_INT 20
46508: PUSH
46509: LD_INT 21
46511: PUSH
46512: LD_INT 22
46514: PUSH
46515: LD_INT 23
46517: PUSH
46518: LD_INT 25
46520: PUSH
46521: LD_INT 26
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 101
46542: PUSH
46543: LD_INT 102
46545: PUSH
46546: LD_INT 103
46548: PUSH
46549: LD_INT 105
46551: PUSH
46552: LD_INT 106
46554: PUSH
46555: LD_INT 108
46557: PUSH
46558: LD_INT 112
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: ST_TO_ADDR
46574: GO 48833
46576: LD_INT 8
46578: DOUBLE
46579: EQUAL
46580: IFTRUE 46584
46582: GO 46712
46584: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
46585: LD_ADDR_VAR 0 1
46589: PUSH
46590: LD_INT 2
46592: PUSH
46593: LD_INT 4
46595: PUSH
46596: LD_INT 5
46598: PUSH
46599: LD_INT 6
46601: PUSH
46602: LD_INT 7
46604: PUSH
46605: LD_INT 8
46607: PUSH
46608: LD_INT 11
46610: PUSH
46611: LD_INT 12
46613: PUSH
46614: LD_INT 15
46616: PUSH
46617: LD_INT 16
46619: PUSH
46620: LD_INT 20
46622: PUSH
46623: LD_INT 21
46625: PUSH
46626: LD_INT 22
46628: PUSH
46629: LD_INT 23
46631: PUSH
46632: LD_INT 25
46634: PUSH
46635: LD_INT 26
46637: PUSH
46638: LD_INT 30
46640: PUSH
46641: LD_INT 31
46643: PUSH
46644: LD_INT 32
46646: PUSH
46647: LD_INT 36
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 101
46674: PUSH
46675: LD_INT 102
46677: PUSH
46678: LD_INT 103
46680: PUSH
46681: LD_INT 105
46683: PUSH
46684: LD_INT 106
46686: PUSH
46687: LD_INT 108
46689: PUSH
46690: LD_INT 109
46692: PUSH
46693: LD_INT 112
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: ST_TO_ADDR
46710: GO 48833
46712: LD_INT 9
46714: DOUBLE
46715: EQUAL
46716: IFTRUE 46720
46718: GO 46856
46720: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
46721: LD_ADDR_VAR 0 1
46725: PUSH
46726: LD_INT 2
46728: PUSH
46729: LD_INT 4
46731: PUSH
46732: LD_INT 5
46734: PUSH
46735: LD_INT 6
46737: PUSH
46738: LD_INT 7
46740: PUSH
46741: LD_INT 8
46743: PUSH
46744: LD_INT 11
46746: PUSH
46747: LD_INT 12
46749: PUSH
46750: LD_INT 15
46752: PUSH
46753: LD_INT 16
46755: PUSH
46756: LD_INT 20
46758: PUSH
46759: LD_INT 21
46761: PUSH
46762: LD_INT 22
46764: PUSH
46765: LD_INT 23
46767: PUSH
46768: LD_INT 25
46770: PUSH
46771: LD_INT 26
46773: PUSH
46774: LD_INT 28
46776: PUSH
46777: LD_INT 30
46779: PUSH
46780: LD_INT 31
46782: PUSH
46783: LD_INT 32
46785: PUSH
46786: LD_INT 36
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 101
46814: PUSH
46815: LD_INT 102
46817: PUSH
46818: LD_INT 103
46820: PUSH
46821: LD_INT 105
46823: PUSH
46824: LD_INT 106
46826: PUSH
46827: LD_INT 108
46829: PUSH
46830: LD_INT 109
46832: PUSH
46833: LD_INT 112
46835: PUSH
46836: LD_INT 114
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: ST_TO_ADDR
46854: GO 48833
46856: LD_INT 10
46858: DOUBLE
46859: EQUAL
46860: IFTRUE 46864
46862: GO 47048
46864: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
46865: LD_ADDR_VAR 0 1
46869: PUSH
46870: LD_INT 2
46872: PUSH
46873: LD_INT 4
46875: PUSH
46876: LD_INT 5
46878: PUSH
46879: LD_INT 6
46881: PUSH
46882: LD_INT 7
46884: PUSH
46885: LD_INT 8
46887: PUSH
46888: LD_INT 9
46890: PUSH
46891: LD_INT 10
46893: PUSH
46894: LD_INT 11
46896: PUSH
46897: LD_INT 12
46899: PUSH
46900: LD_INT 13
46902: PUSH
46903: LD_INT 14
46905: PUSH
46906: LD_INT 15
46908: PUSH
46909: LD_INT 16
46911: PUSH
46912: LD_INT 17
46914: PUSH
46915: LD_INT 18
46917: PUSH
46918: LD_INT 19
46920: PUSH
46921: LD_INT 20
46923: PUSH
46924: LD_INT 21
46926: PUSH
46927: LD_INT 22
46929: PUSH
46930: LD_INT 23
46932: PUSH
46933: LD_INT 24
46935: PUSH
46936: LD_INT 25
46938: PUSH
46939: LD_INT 26
46941: PUSH
46942: LD_INT 28
46944: PUSH
46945: LD_INT 30
46947: PUSH
46948: LD_INT 31
46950: PUSH
46951: LD_INT 32
46953: PUSH
46954: LD_INT 36
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 101
46990: PUSH
46991: LD_INT 102
46993: PUSH
46994: LD_INT 103
46996: PUSH
46997: LD_INT 104
46999: PUSH
47000: LD_INT 105
47002: PUSH
47003: LD_INT 106
47005: PUSH
47006: LD_INT 107
47008: PUSH
47009: LD_INT 108
47011: PUSH
47012: LD_INT 109
47014: PUSH
47015: LD_INT 110
47017: PUSH
47018: LD_INT 111
47020: PUSH
47021: LD_INT 112
47023: PUSH
47024: LD_INT 114
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: ST_TO_ADDR
47046: GO 48833
47048: LD_INT 11
47050: DOUBLE
47051: EQUAL
47052: IFTRUE 47056
47054: GO 47248
47056: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
47057: LD_ADDR_VAR 0 1
47061: PUSH
47062: LD_INT 2
47064: PUSH
47065: LD_INT 3
47067: PUSH
47068: LD_INT 4
47070: PUSH
47071: LD_INT 5
47073: PUSH
47074: LD_INT 6
47076: PUSH
47077: LD_INT 7
47079: PUSH
47080: LD_INT 8
47082: PUSH
47083: LD_INT 9
47085: PUSH
47086: LD_INT 10
47088: PUSH
47089: LD_INT 11
47091: PUSH
47092: LD_INT 12
47094: PUSH
47095: LD_INT 13
47097: PUSH
47098: LD_INT 14
47100: PUSH
47101: LD_INT 15
47103: PUSH
47104: LD_INT 16
47106: PUSH
47107: LD_INT 17
47109: PUSH
47110: LD_INT 18
47112: PUSH
47113: LD_INT 19
47115: PUSH
47116: LD_INT 20
47118: PUSH
47119: LD_INT 21
47121: PUSH
47122: LD_INT 22
47124: PUSH
47125: LD_INT 23
47127: PUSH
47128: LD_INT 24
47130: PUSH
47131: LD_INT 25
47133: PUSH
47134: LD_INT 26
47136: PUSH
47137: LD_INT 28
47139: PUSH
47140: LD_INT 30
47142: PUSH
47143: LD_INT 31
47145: PUSH
47146: LD_INT 32
47148: PUSH
47149: LD_INT 34
47151: PUSH
47152: LD_INT 36
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 101
47190: PUSH
47191: LD_INT 102
47193: PUSH
47194: LD_INT 103
47196: PUSH
47197: LD_INT 104
47199: PUSH
47200: LD_INT 105
47202: PUSH
47203: LD_INT 106
47205: PUSH
47206: LD_INT 107
47208: PUSH
47209: LD_INT 108
47211: PUSH
47212: LD_INT 109
47214: PUSH
47215: LD_INT 110
47217: PUSH
47218: LD_INT 111
47220: PUSH
47221: LD_INT 112
47223: PUSH
47224: LD_INT 114
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: ST_TO_ADDR
47246: GO 48833
47248: LD_INT 12
47250: DOUBLE
47251: EQUAL
47252: IFTRUE 47256
47254: GO 47464
47256: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
47257: LD_ADDR_VAR 0 1
47261: PUSH
47262: LD_INT 1
47264: PUSH
47265: LD_INT 2
47267: PUSH
47268: LD_INT 3
47270: PUSH
47271: LD_INT 4
47273: PUSH
47274: LD_INT 5
47276: PUSH
47277: LD_INT 6
47279: PUSH
47280: LD_INT 7
47282: PUSH
47283: LD_INT 8
47285: PUSH
47286: LD_INT 9
47288: PUSH
47289: LD_INT 10
47291: PUSH
47292: LD_INT 11
47294: PUSH
47295: LD_INT 12
47297: PUSH
47298: LD_INT 13
47300: PUSH
47301: LD_INT 14
47303: PUSH
47304: LD_INT 15
47306: PUSH
47307: LD_INT 16
47309: PUSH
47310: LD_INT 17
47312: PUSH
47313: LD_INT 18
47315: PUSH
47316: LD_INT 19
47318: PUSH
47319: LD_INT 20
47321: PUSH
47322: LD_INT 21
47324: PUSH
47325: LD_INT 22
47327: PUSH
47328: LD_INT 23
47330: PUSH
47331: LD_INT 24
47333: PUSH
47334: LD_INT 25
47336: PUSH
47337: LD_INT 26
47339: PUSH
47340: LD_INT 27
47342: PUSH
47343: LD_INT 28
47345: PUSH
47346: LD_INT 30
47348: PUSH
47349: LD_INT 31
47351: PUSH
47352: LD_INT 32
47354: PUSH
47355: LD_INT 33
47357: PUSH
47358: LD_INT 34
47360: PUSH
47361: LD_INT 36
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 101
47402: PUSH
47403: LD_INT 102
47405: PUSH
47406: LD_INT 103
47408: PUSH
47409: LD_INT 104
47411: PUSH
47412: LD_INT 105
47414: PUSH
47415: LD_INT 106
47417: PUSH
47418: LD_INT 107
47420: PUSH
47421: LD_INT 108
47423: PUSH
47424: LD_INT 109
47426: PUSH
47427: LD_INT 110
47429: PUSH
47430: LD_INT 111
47432: PUSH
47433: LD_INT 112
47435: PUSH
47436: LD_INT 113
47438: PUSH
47439: LD_INT 114
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: ST_TO_ADDR
47462: GO 48833
47464: LD_INT 13
47466: DOUBLE
47467: EQUAL
47468: IFTRUE 47472
47470: GO 47668
47472: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
47473: LD_ADDR_VAR 0 1
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: LD_INT 2
47483: PUSH
47484: LD_INT 3
47486: PUSH
47487: LD_INT 4
47489: PUSH
47490: LD_INT 5
47492: PUSH
47493: LD_INT 8
47495: PUSH
47496: LD_INT 9
47498: PUSH
47499: LD_INT 10
47501: PUSH
47502: LD_INT 11
47504: PUSH
47505: LD_INT 12
47507: PUSH
47508: LD_INT 14
47510: PUSH
47511: LD_INT 15
47513: PUSH
47514: LD_INT 16
47516: PUSH
47517: LD_INT 17
47519: PUSH
47520: LD_INT 18
47522: PUSH
47523: LD_INT 19
47525: PUSH
47526: LD_INT 20
47528: PUSH
47529: LD_INT 21
47531: PUSH
47532: LD_INT 22
47534: PUSH
47535: LD_INT 23
47537: PUSH
47538: LD_INT 24
47540: PUSH
47541: LD_INT 25
47543: PUSH
47544: LD_INT 26
47546: PUSH
47547: LD_INT 27
47549: PUSH
47550: LD_INT 28
47552: PUSH
47553: LD_INT 30
47555: PUSH
47556: LD_INT 31
47558: PUSH
47559: LD_INT 32
47561: PUSH
47562: LD_INT 33
47564: PUSH
47565: LD_INT 34
47567: PUSH
47568: LD_INT 36
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 101
47606: PUSH
47607: LD_INT 102
47609: PUSH
47610: LD_INT 103
47612: PUSH
47613: LD_INT 104
47615: PUSH
47616: LD_INT 105
47618: PUSH
47619: LD_INT 106
47621: PUSH
47622: LD_INT 107
47624: PUSH
47625: LD_INT 108
47627: PUSH
47628: LD_INT 109
47630: PUSH
47631: LD_INT 110
47633: PUSH
47634: LD_INT 111
47636: PUSH
47637: LD_INT 112
47639: PUSH
47640: LD_INT 113
47642: PUSH
47643: LD_INT 114
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: ST_TO_ADDR
47666: GO 48833
47668: LD_INT 14
47670: DOUBLE
47671: EQUAL
47672: IFTRUE 47676
47674: GO 47888
47676: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
47677: LD_ADDR_VAR 0 1
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: LD_INT 2
47687: PUSH
47688: LD_INT 3
47690: PUSH
47691: LD_INT 4
47693: PUSH
47694: LD_INT 5
47696: PUSH
47697: LD_INT 6
47699: PUSH
47700: LD_INT 7
47702: PUSH
47703: LD_INT 8
47705: PUSH
47706: LD_INT 9
47708: PUSH
47709: LD_INT 10
47711: PUSH
47712: LD_INT 11
47714: PUSH
47715: LD_INT 12
47717: PUSH
47718: LD_INT 13
47720: PUSH
47721: LD_INT 14
47723: PUSH
47724: LD_INT 15
47726: PUSH
47727: LD_INT 16
47729: PUSH
47730: LD_INT 17
47732: PUSH
47733: LD_INT 18
47735: PUSH
47736: LD_INT 19
47738: PUSH
47739: LD_INT 20
47741: PUSH
47742: LD_INT 21
47744: PUSH
47745: LD_INT 22
47747: PUSH
47748: LD_INT 23
47750: PUSH
47751: LD_INT 24
47753: PUSH
47754: LD_INT 25
47756: PUSH
47757: LD_INT 26
47759: PUSH
47760: LD_INT 27
47762: PUSH
47763: LD_INT 28
47765: PUSH
47766: LD_INT 29
47768: PUSH
47769: LD_INT 30
47771: PUSH
47772: LD_INT 31
47774: PUSH
47775: LD_INT 32
47777: PUSH
47778: LD_INT 33
47780: PUSH
47781: LD_INT 34
47783: PUSH
47784: LD_INT 36
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 101
47826: PUSH
47827: LD_INT 102
47829: PUSH
47830: LD_INT 103
47832: PUSH
47833: LD_INT 104
47835: PUSH
47836: LD_INT 105
47838: PUSH
47839: LD_INT 106
47841: PUSH
47842: LD_INT 107
47844: PUSH
47845: LD_INT 108
47847: PUSH
47848: LD_INT 109
47850: PUSH
47851: LD_INT 110
47853: PUSH
47854: LD_INT 111
47856: PUSH
47857: LD_INT 112
47859: PUSH
47860: LD_INT 113
47862: PUSH
47863: LD_INT 114
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: ST_TO_ADDR
47886: GO 48833
47888: LD_INT 15
47890: DOUBLE
47891: EQUAL
47892: IFTRUE 47896
47894: GO 48108
47896: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
47897: LD_ADDR_VAR 0 1
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: LD_INT 2
47907: PUSH
47908: LD_INT 3
47910: PUSH
47911: LD_INT 4
47913: PUSH
47914: LD_INT 5
47916: PUSH
47917: LD_INT 6
47919: PUSH
47920: LD_INT 7
47922: PUSH
47923: LD_INT 8
47925: PUSH
47926: LD_INT 9
47928: PUSH
47929: LD_INT 10
47931: PUSH
47932: LD_INT 11
47934: PUSH
47935: LD_INT 12
47937: PUSH
47938: LD_INT 13
47940: PUSH
47941: LD_INT 14
47943: PUSH
47944: LD_INT 15
47946: PUSH
47947: LD_INT 16
47949: PUSH
47950: LD_INT 17
47952: PUSH
47953: LD_INT 18
47955: PUSH
47956: LD_INT 19
47958: PUSH
47959: LD_INT 20
47961: PUSH
47962: LD_INT 21
47964: PUSH
47965: LD_INT 22
47967: PUSH
47968: LD_INT 23
47970: PUSH
47971: LD_INT 24
47973: PUSH
47974: LD_INT 25
47976: PUSH
47977: LD_INT 26
47979: PUSH
47980: LD_INT 27
47982: PUSH
47983: LD_INT 28
47985: PUSH
47986: LD_INT 29
47988: PUSH
47989: LD_INT 30
47991: PUSH
47992: LD_INT 31
47994: PUSH
47995: LD_INT 32
47997: PUSH
47998: LD_INT 33
48000: PUSH
48001: LD_INT 34
48003: PUSH
48004: LD_INT 36
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 101
48046: PUSH
48047: LD_INT 102
48049: PUSH
48050: LD_INT 103
48052: PUSH
48053: LD_INT 104
48055: PUSH
48056: LD_INT 105
48058: PUSH
48059: LD_INT 106
48061: PUSH
48062: LD_INT 107
48064: PUSH
48065: LD_INT 108
48067: PUSH
48068: LD_INT 109
48070: PUSH
48071: LD_INT 110
48073: PUSH
48074: LD_INT 111
48076: PUSH
48077: LD_INT 112
48079: PUSH
48080: LD_INT 113
48082: PUSH
48083: LD_INT 114
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: ST_TO_ADDR
48106: GO 48833
48108: LD_INT 16
48110: DOUBLE
48111: EQUAL
48112: IFTRUE 48116
48114: GO 48240
48116: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
48117: LD_ADDR_VAR 0 1
48121: PUSH
48122: LD_INT 2
48124: PUSH
48125: LD_INT 4
48127: PUSH
48128: LD_INT 5
48130: PUSH
48131: LD_INT 7
48133: PUSH
48134: LD_INT 11
48136: PUSH
48137: LD_INT 12
48139: PUSH
48140: LD_INT 15
48142: PUSH
48143: LD_INT 16
48145: PUSH
48146: LD_INT 20
48148: PUSH
48149: LD_INT 21
48151: PUSH
48152: LD_INT 22
48154: PUSH
48155: LD_INT 23
48157: PUSH
48158: LD_INT 25
48160: PUSH
48161: LD_INT 26
48163: PUSH
48164: LD_INT 30
48166: PUSH
48167: LD_INT 31
48169: PUSH
48170: LD_INT 32
48172: PUSH
48173: LD_INT 33
48175: PUSH
48176: LD_INT 34
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 101
48202: PUSH
48203: LD_INT 102
48205: PUSH
48206: LD_INT 103
48208: PUSH
48209: LD_INT 106
48211: PUSH
48212: LD_INT 108
48214: PUSH
48215: LD_INT 112
48217: PUSH
48218: LD_INT 113
48220: PUSH
48221: LD_INT 114
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: ST_TO_ADDR
48238: GO 48833
48240: LD_INT 17
48242: DOUBLE
48243: EQUAL
48244: IFTRUE 48248
48246: GO 48460
48248: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
48249: LD_ADDR_VAR 0 1
48253: PUSH
48254: LD_INT 1
48256: PUSH
48257: LD_INT 2
48259: PUSH
48260: LD_INT 3
48262: PUSH
48263: LD_INT 4
48265: PUSH
48266: LD_INT 5
48268: PUSH
48269: LD_INT 6
48271: PUSH
48272: LD_INT 7
48274: PUSH
48275: LD_INT 8
48277: PUSH
48278: LD_INT 9
48280: PUSH
48281: LD_INT 10
48283: PUSH
48284: LD_INT 11
48286: PUSH
48287: LD_INT 12
48289: PUSH
48290: LD_INT 13
48292: PUSH
48293: LD_INT 14
48295: PUSH
48296: LD_INT 15
48298: PUSH
48299: LD_INT 16
48301: PUSH
48302: LD_INT 17
48304: PUSH
48305: LD_INT 18
48307: PUSH
48308: LD_INT 19
48310: PUSH
48311: LD_INT 20
48313: PUSH
48314: LD_INT 21
48316: PUSH
48317: LD_INT 22
48319: PUSH
48320: LD_INT 23
48322: PUSH
48323: LD_INT 24
48325: PUSH
48326: LD_INT 25
48328: PUSH
48329: LD_INT 26
48331: PUSH
48332: LD_INT 27
48334: PUSH
48335: LD_INT 28
48337: PUSH
48338: LD_INT 29
48340: PUSH
48341: LD_INT 30
48343: PUSH
48344: LD_INT 31
48346: PUSH
48347: LD_INT 32
48349: PUSH
48350: LD_INT 33
48352: PUSH
48353: LD_INT 34
48355: PUSH
48356: LD_INT 36
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 101
48398: PUSH
48399: LD_INT 102
48401: PUSH
48402: LD_INT 103
48404: PUSH
48405: LD_INT 104
48407: PUSH
48408: LD_INT 105
48410: PUSH
48411: LD_INT 106
48413: PUSH
48414: LD_INT 107
48416: PUSH
48417: LD_INT 108
48419: PUSH
48420: LD_INT 109
48422: PUSH
48423: LD_INT 110
48425: PUSH
48426: LD_INT 111
48428: PUSH
48429: LD_INT 112
48431: PUSH
48432: LD_INT 113
48434: PUSH
48435: LD_INT 114
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: ST_TO_ADDR
48458: GO 48833
48460: LD_INT 18
48462: DOUBLE
48463: EQUAL
48464: IFTRUE 48468
48466: GO 48604
48468: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
48469: LD_ADDR_VAR 0 1
48473: PUSH
48474: LD_INT 2
48476: PUSH
48477: LD_INT 4
48479: PUSH
48480: LD_INT 5
48482: PUSH
48483: LD_INT 7
48485: PUSH
48486: LD_INT 11
48488: PUSH
48489: LD_INT 12
48491: PUSH
48492: LD_INT 15
48494: PUSH
48495: LD_INT 16
48497: PUSH
48498: LD_INT 20
48500: PUSH
48501: LD_INT 21
48503: PUSH
48504: LD_INT 22
48506: PUSH
48507: LD_INT 23
48509: PUSH
48510: LD_INT 25
48512: PUSH
48513: LD_INT 26
48515: PUSH
48516: LD_INT 30
48518: PUSH
48519: LD_INT 31
48521: PUSH
48522: LD_INT 32
48524: PUSH
48525: LD_INT 33
48527: PUSH
48528: LD_INT 34
48530: PUSH
48531: LD_INT 35
48533: PUSH
48534: LD_INT 36
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 101
48562: PUSH
48563: LD_INT 102
48565: PUSH
48566: LD_INT 103
48568: PUSH
48569: LD_INT 106
48571: PUSH
48572: LD_INT 108
48574: PUSH
48575: LD_INT 112
48577: PUSH
48578: LD_INT 113
48580: PUSH
48581: LD_INT 114
48583: PUSH
48584: LD_INT 115
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: ST_TO_ADDR
48602: GO 48833
48604: LD_INT 19
48606: DOUBLE
48607: EQUAL
48608: IFTRUE 48612
48610: GO 48832
48612: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
48613: LD_ADDR_VAR 0 1
48617: PUSH
48618: LD_INT 1
48620: PUSH
48621: LD_INT 2
48623: PUSH
48624: LD_INT 3
48626: PUSH
48627: LD_INT 4
48629: PUSH
48630: LD_INT 5
48632: PUSH
48633: LD_INT 6
48635: PUSH
48636: LD_INT 7
48638: PUSH
48639: LD_INT 8
48641: PUSH
48642: LD_INT 9
48644: PUSH
48645: LD_INT 10
48647: PUSH
48648: LD_INT 11
48650: PUSH
48651: LD_INT 12
48653: PUSH
48654: LD_INT 13
48656: PUSH
48657: LD_INT 14
48659: PUSH
48660: LD_INT 15
48662: PUSH
48663: LD_INT 16
48665: PUSH
48666: LD_INT 17
48668: PUSH
48669: LD_INT 18
48671: PUSH
48672: LD_INT 19
48674: PUSH
48675: LD_INT 20
48677: PUSH
48678: LD_INT 21
48680: PUSH
48681: LD_INT 22
48683: PUSH
48684: LD_INT 23
48686: PUSH
48687: LD_INT 24
48689: PUSH
48690: LD_INT 25
48692: PUSH
48693: LD_INT 26
48695: PUSH
48696: LD_INT 27
48698: PUSH
48699: LD_INT 28
48701: PUSH
48702: LD_INT 29
48704: PUSH
48705: LD_INT 30
48707: PUSH
48708: LD_INT 31
48710: PUSH
48711: LD_INT 32
48713: PUSH
48714: LD_INT 33
48716: PUSH
48717: LD_INT 34
48719: PUSH
48720: LD_INT 35
48722: PUSH
48723: LD_INT 36
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 101
48766: PUSH
48767: LD_INT 102
48769: PUSH
48770: LD_INT 103
48772: PUSH
48773: LD_INT 104
48775: PUSH
48776: LD_INT 105
48778: PUSH
48779: LD_INT 106
48781: PUSH
48782: LD_INT 107
48784: PUSH
48785: LD_INT 108
48787: PUSH
48788: LD_INT 109
48790: PUSH
48791: LD_INT 110
48793: PUSH
48794: LD_INT 111
48796: PUSH
48797: LD_INT 112
48799: PUSH
48800: LD_INT 113
48802: PUSH
48803: LD_INT 114
48805: PUSH
48806: LD_INT 115
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: ST_TO_ADDR
48830: GO 48833
48832: POP
// end else
48833: GO 49052
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
48835: LD_ADDR_VAR 0 1
48839: PUSH
48840: LD_INT 1
48842: PUSH
48843: LD_INT 2
48845: PUSH
48846: LD_INT 3
48848: PUSH
48849: LD_INT 4
48851: PUSH
48852: LD_INT 5
48854: PUSH
48855: LD_INT 6
48857: PUSH
48858: LD_INT 7
48860: PUSH
48861: LD_INT 8
48863: PUSH
48864: LD_INT 9
48866: PUSH
48867: LD_INT 10
48869: PUSH
48870: LD_INT 11
48872: PUSH
48873: LD_INT 12
48875: PUSH
48876: LD_INT 13
48878: PUSH
48879: LD_INT 14
48881: PUSH
48882: LD_INT 15
48884: PUSH
48885: LD_INT 16
48887: PUSH
48888: LD_INT 17
48890: PUSH
48891: LD_INT 18
48893: PUSH
48894: LD_INT 19
48896: PUSH
48897: LD_INT 20
48899: PUSH
48900: LD_INT 21
48902: PUSH
48903: LD_INT 22
48905: PUSH
48906: LD_INT 23
48908: PUSH
48909: LD_INT 24
48911: PUSH
48912: LD_INT 25
48914: PUSH
48915: LD_INT 26
48917: PUSH
48918: LD_INT 27
48920: PUSH
48921: LD_INT 28
48923: PUSH
48924: LD_INT 29
48926: PUSH
48927: LD_INT 30
48929: PUSH
48930: LD_INT 31
48932: PUSH
48933: LD_INT 32
48935: PUSH
48936: LD_INT 33
48938: PUSH
48939: LD_INT 34
48941: PUSH
48942: LD_INT 35
48944: PUSH
48945: LD_INT 36
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 101
48988: PUSH
48989: LD_INT 102
48991: PUSH
48992: LD_INT 103
48994: PUSH
48995: LD_INT 104
48997: PUSH
48998: LD_INT 105
49000: PUSH
49001: LD_INT 106
49003: PUSH
49004: LD_INT 107
49006: PUSH
49007: LD_INT 108
49009: PUSH
49010: LD_INT 109
49012: PUSH
49013: LD_INT 110
49015: PUSH
49016: LD_INT 111
49018: PUSH
49019: LD_INT 112
49021: PUSH
49022: LD_INT 113
49024: PUSH
49025: LD_INT 114
49027: PUSH
49028: LD_INT 115
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: ST_TO_ADDR
// if result then
49052: LD_VAR 0 1
49056: IFFALSE 49345
// begin normal :=  ;
49058: LD_ADDR_VAR 0 3
49062: PUSH
49063: LD_STRING 
49065: ST_TO_ADDR
// hardcore :=  ;
49066: LD_ADDR_VAR 0 4
49070: PUSH
49071: LD_STRING 
49073: ST_TO_ADDR
// for i = 1 to normalCounter do
49074: LD_ADDR_VAR 0 5
49078: PUSH
49079: DOUBLE
49080: LD_INT 1
49082: DEC
49083: ST_TO_ADDR
49084: LD_EXP 44
49088: PUSH
49089: FOR_TO
49090: IFFALSE 49191
// begin tmp := 0 ;
49092: LD_ADDR_VAR 0 2
49096: PUSH
49097: LD_STRING 0
49099: ST_TO_ADDR
// if result [ 1 ] then
49100: LD_VAR 0 1
49104: PUSH
49105: LD_INT 1
49107: ARRAY
49108: IFFALSE 49173
// if result [ 1 ] [ 1 ] = i then
49110: LD_VAR 0 1
49114: PUSH
49115: LD_INT 1
49117: ARRAY
49118: PUSH
49119: LD_INT 1
49121: ARRAY
49122: PUSH
49123: LD_VAR 0 5
49127: EQUAL
49128: IFFALSE 49173
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
49130: LD_ADDR_VAR 0 1
49134: PUSH
49135: LD_VAR 0 1
49139: PPUSH
49140: LD_INT 1
49142: PPUSH
49143: LD_VAR 0 1
49147: PUSH
49148: LD_INT 1
49150: ARRAY
49151: PPUSH
49152: LD_INT 1
49154: PPUSH
49155: CALL_OW 3
49159: PPUSH
49160: CALL_OW 1
49164: ST_TO_ADDR
// tmp := 1 ;
49165: LD_ADDR_VAR 0 2
49169: PUSH
49170: LD_STRING 1
49172: ST_TO_ADDR
// end ; normal := normal & tmp ;
49173: LD_ADDR_VAR 0 3
49177: PUSH
49178: LD_VAR 0 3
49182: PUSH
49183: LD_VAR 0 2
49187: STR
49188: ST_TO_ADDR
// end ;
49189: GO 49089
49191: POP
49192: POP
// for i = 1 to hardcoreCounter do
49193: LD_ADDR_VAR 0 5
49197: PUSH
49198: DOUBLE
49199: LD_INT 1
49201: DEC
49202: ST_TO_ADDR
49203: LD_EXP 45
49207: PUSH
49208: FOR_TO
49209: IFFALSE 49314
// begin tmp := 0 ;
49211: LD_ADDR_VAR 0 2
49215: PUSH
49216: LD_STRING 0
49218: ST_TO_ADDR
// if result [ 2 ] then
49219: LD_VAR 0 1
49223: PUSH
49224: LD_INT 2
49226: ARRAY
49227: IFFALSE 49296
// if result [ 2 ] [ 1 ] = 100 + i then
49229: LD_VAR 0 1
49233: PUSH
49234: LD_INT 2
49236: ARRAY
49237: PUSH
49238: LD_INT 1
49240: ARRAY
49241: PUSH
49242: LD_INT 100
49244: PUSH
49245: LD_VAR 0 5
49249: PLUS
49250: EQUAL
49251: IFFALSE 49296
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
49253: LD_ADDR_VAR 0 1
49257: PUSH
49258: LD_VAR 0 1
49262: PPUSH
49263: LD_INT 2
49265: PPUSH
49266: LD_VAR 0 1
49270: PUSH
49271: LD_INT 2
49273: ARRAY
49274: PPUSH
49275: LD_INT 1
49277: PPUSH
49278: CALL_OW 3
49282: PPUSH
49283: CALL_OW 1
49287: ST_TO_ADDR
// tmp := 1 ;
49288: LD_ADDR_VAR 0 2
49292: PUSH
49293: LD_STRING 1
49295: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
49296: LD_ADDR_VAR 0 4
49300: PUSH
49301: LD_VAR 0 4
49305: PUSH
49306: LD_VAR 0 2
49310: STR
49311: ST_TO_ADDR
// end ;
49312: GO 49208
49314: POP
49315: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
49316: LD_STRING getStreamItemsFromMission("
49318: PUSH
49319: LD_VAR 0 3
49323: STR
49324: PUSH
49325: LD_STRING ","
49327: STR
49328: PUSH
49329: LD_VAR 0 4
49333: STR
49334: PUSH
49335: LD_STRING ")
49337: STR
49338: PPUSH
49339: CALL_OW 559
// end else
49343: GO 49352
// ToLua ( getStreamItemsFromMission("","") ) ;
49345: LD_STRING getStreamItemsFromMission("","")
49347: PPUSH
49348: CALL_OW 559
// end ;
49352: LD_VAR 0 1
49356: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
49357: LD_EXP 43
49361: PUSH
49362: LD_EXP 48
49366: AND
49367: IFFALSE 49491
49369: GO 49371
49371: DISABLE
49372: LD_INT 0
49374: PPUSH
49375: PPUSH
// begin enable ;
49376: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
49377: LD_ADDR_VAR 0 2
49381: PUSH
49382: LD_INT 22
49384: PUSH
49385: LD_OWVAR 2
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 2
49396: PUSH
49397: LD_INT 34
49399: PUSH
49400: LD_INT 7
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 34
49409: PUSH
49410: LD_INT 45
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 34
49419: PUSH
49420: LD_INT 28
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 34
49429: PUSH
49430: LD_INT 47
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PPUSH
49448: CALL_OW 69
49452: ST_TO_ADDR
// if not tmp then
49453: LD_VAR 0 2
49457: NOT
49458: IFFALSE 49462
// exit ;
49460: GO 49491
// for i in tmp do
49462: LD_ADDR_VAR 0 1
49466: PUSH
49467: LD_VAR 0 2
49471: PUSH
49472: FOR_IN
49473: IFFALSE 49489
// begin SetLives ( i , 0 ) ;
49475: LD_VAR 0 1
49479: PPUSH
49480: LD_INT 0
49482: PPUSH
49483: CALL_OW 234
// end ;
49487: GO 49472
49489: POP
49490: POP
// end ;
49491: PPOPN 2
49493: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
49494: LD_EXP 43
49498: PUSH
49499: LD_EXP 49
49503: AND
49504: IFFALSE 49588
49506: GO 49508
49508: DISABLE
49509: LD_INT 0
49511: PPUSH
49512: PPUSH
// begin enable ;
49513: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
49514: LD_ADDR_VAR 0 2
49518: PUSH
49519: LD_INT 22
49521: PUSH
49522: LD_OWVAR 2
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 32
49533: PUSH
49534: LD_INT 3
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PPUSH
49545: CALL_OW 69
49549: ST_TO_ADDR
// if not tmp then
49550: LD_VAR 0 2
49554: NOT
49555: IFFALSE 49559
// exit ;
49557: GO 49588
// for i in tmp do
49559: LD_ADDR_VAR 0 1
49563: PUSH
49564: LD_VAR 0 2
49568: PUSH
49569: FOR_IN
49570: IFFALSE 49586
// begin SetLives ( i , 0 ) ;
49572: LD_VAR 0 1
49576: PPUSH
49577: LD_INT 0
49579: PPUSH
49580: CALL_OW 234
// end ;
49584: GO 49569
49586: POP
49587: POP
// end ;
49588: PPOPN 2
49590: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
49591: LD_EXP 43
49595: PUSH
49596: LD_EXP 46
49600: AND
49601: IFFALSE 49694
49603: GO 49605
49605: DISABLE
49606: LD_INT 0
49608: PPUSH
// begin enable ;
49609: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
49610: LD_ADDR_VAR 0 1
49614: PUSH
49615: LD_INT 22
49617: PUSH
49618: LD_OWVAR 2
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 2
49629: PUSH
49630: LD_INT 25
49632: PUSH
49633: LD_INT 5
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 25
49642: PUSH
49643: LD_INT 9
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 25
49652: PUSH
49653: LD_INT 8
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PPUSH
49670: CALL_OW 69
49674: PUSH
49675: FOR_IN
49676: IFFALSE 49692
// begin SetClass ( i , 1 ) ;
49678: LD_VAR 0 1
49682: PPUSH
49683: LD_INT 1
49685: PPUSH
49686: CALL_OW 336
// end ;
49690: GO 49675
49692: POP
49693: POP
// end ;
49694: PPOPN 1
49696: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
49697: LD_EXP 43
49701: PUSH
49702: LD_EXP 47
49706: AND
49707: PUSH
49708: LD_OWVAR 65
49712: PUSH
49713: LD_INT 7
49715: LESS
49716: AND
49717: IFFALSE 49731
49719: GO 49721
49721: DISABLE
// begin enable ;
49722: ENABLE
// game_speed := 7 ;
49723: LD_ADDR_OWVAR 65
49727: PUSH
49728: LD_INT 7
49730: ST_TO_ADDR
// end ;
49731: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
49732: LD_EXP 43
49736: PUSH
49737: LD_EXP 50
49741: AND
49742: IFFALSE 49944
49744: GO 49746
49746: DISABLE
49747: LD_INT 0
49749: PPUSH
49750: PPUSH
49751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
49752: LD_ADDR_VAR 0 3
49756: PUSH
49757: LD_INT 81
49759: PUSH
49760: LD_OWVAR 2
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 21
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PPUSH
49783: CALL_OW 69
49787: ST_TO_ADDR
// if not tmp then
49788: LD_VAR 0 3
49792: NOT
49793: IFFALSE 49797
// exit ;
49795: GO 49944
// if tmp > 5 then
49797: LD_VAR 0 3
49801: PUSH
49802: LD_INT 5
49804: GREATER
49805: IFFALSE 49817
// k := 5 else
49807: LD_ADDR_VAR 0 2
49811: PUSH
49812: LD_INT 5
49814: ST_TO_ADDR
49815: GO 49827
// k := tmp ;
49817: LD_ADDR_VAR 0 2
49821: PUSH
49822: LD_VAR 0 3
49826: ST_TO_ADDR
// for i := 1 to k do
49827: LD_ADDR_VAR 0 1
49831: PUSH
49832: DOUBLE
49833: LD_INT 1
49835: DEC
49836: ST_TO_ADDR
49837: LD_VAR 0 2
49841: PUSH
49842: FOR_TO
49843: IFFALSE 49942
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
49845: LD_VAR 0 3
49849: PUSH
49850: LD_VAR 0 1
49854: ARRAY
49855: PPUSH
49856: LD_VAR 0 1
49860: PUSH
49861: LD_INT 4
49863: MOD
49864: PUSH
49865: LD_INT 1
49867: PLUS
49868: PPUSH
49869: CALL_OW 259
49873: PUSH
49874: LD_INT 10
49876: LESS
49877: IFFALSE 49940
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
49879: LD_VAR 0 3
49883: PUSH
49884: LD_VAR 0 1
49888: ARRAY
49889: PPUSH
49890: LD_VAR 0 1
49894: PUSH
49895: LD_INT 4
49897: MOD
49898: PUSH
49899: LD_INT 1
49901: PLUS
49902: PPUSH
49903: LD_VAR 0 3
49907: PUSH
49908: LD_VAR 0 1
49912: ARRAY
49913: PPUSH
49914: LD_VAR 0 1
49918: PUSH
49919: LD_INT 4
49921: MOD
49922: PUSH
49923: LD_INT 1
49925: PLUS
49926: PPUSH
49927: CALL_OW 259
49931: PUSH
49932: LD_INT 1
49934: PLUS
49935: PPUSH
49936: CALL_OW 237
49940: GO 49842
49942: POP
49943: POP
// end ;
49944: PPOPN 3
49946: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
49947: LD_EXP 43
49951: PUSH
49952: LD_EXP 51
49956: AND
49957: IFFALSE 49977
49959: GO 49961
49961: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
49962: LD_INT 4
49964: PPUSH
49965: LD_OWVAR 2
49969: PPUSH
49970: LD_INT 0
49972: PPUSH
49973: CALL_OW 324
49977: END
// every 0 0$1 trigger StreamModeActive and sShovel do
49978: LD_EXP 43
49982: PUSH
49983: LD_EXP 80
49987: AND
49988: IFFALSE 50008
49990: GO 49992
49992: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
49993: LD_INT 19
49995: PPUSH
49996: LD_OWVAR 2
50000: PPUSH
50001: LD_INT 0
50003: PPUSH
50004: CALL_OW 324
50008: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
50009: LD_EXP 43
50013: PUSH
50014: LD_EXP 52
50018: AND
50019: IFFALSE 50121
50021: GO 50023
50023: DISABLE
50024: LD_INT 0
50026: PPUSH
50027: PPUSH
// begin enable ;
50028: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
50029: LD_ADDR_VAR 0 2
50033: PUSH
50034: LD_INT 22
50036: PUSH
50037: LD_OWVAR 2
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 2
50048: PUSH
50049: LD_INT 34
50051: PUSH
50052: LD_INT 11
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 34
50061: PUSH
50062: LD_INT 30
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: LIST
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PPUSH
50078: CALL_OW 69
50082: ST_TO_ADDR
// if not tmp then
50083: LD_VAR 0 2
50087: NOT
50088: IFFALSE 50092
// exit ;
50090: GO 50121
// for i in tmp do
50092: LD_ADDR_VAR 0 1
50096: PUSH
50097: LD_VAR 0 2
50101: PUSH
50102: FOR_IN
50103: IFFALSE 50119
// begin SetLives ( i , 0 ) ;
50105: LD_VAR 0 1
50109: PPUSH
50110: LD_INT 0
50112: PPUSH
50113: CALL_OW 234
// end ;
50117: GO 50102
50119: POP
50120: POP
// end ;
50121: PPOPN 2
50123: END
// every 0 0$1 trigger StreamModeActive and sBunker do
50124: LD_EXP 43
50128: PUSH
50129: LD_EXP 53
50133: AND
50134: IFFALSE 50154
50136: GO 50138
50138: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
50139: LD_INT 32
50141: PPUSH
50142: LD_OWVAR 2
50146: PPUSH
50147: LD_INT 0
50149: PPUSH
50150: CALL_OW 324
50154: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
50155: LD_EXP 43
50159: PUSH
50160: LD_EXP 54
50164: AND
50165: IFFALSE 50346
50167: GO 50169
50169: DISABLE
50170: LD_INT 0
50172: PPUSH
50173: PPUSH
50174: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
50175: LD_ADDR_VAR 0 2
50179: PUSH
50180: LD_INT 22
50182: PUSH
50183: LD_OWVAR 2
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 33
50194: PUSH
50195: LD_INT 3
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PPUSH
50206: CALL_OW 69
50210: ST_TO_ADDR
// if not tmp then
50211: LD_VAR 0 2
50215: NOT
50216: IFFALSE 50220
// exit ;
50218: GO 50346
// side := 0 ;
50220: LD_ADDR_VAR 0 3
50224: PUSH
50225: LD_INT 0
50227: ST_TO_ADDR
// for i := 1 to 8 do
50228: LD_ADDR_VAR 0 1
50232: PUSH
50233: DOUBLE
50234: LD_INT 1
50236: DEC
50237: ST_TO_ADDR
50238: LD_INT 8
50240: PUSH
50241: FOR_TO
50242: IFFALSE 50290
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
50244: LD_OWVAR 2
50248: PUSH
50249: LD_VAR 0 1
50253: NONEQUAL
50254: PUSH
50255: LD_OWVAR 2
50259: PPUSH
50260: LD_VAR 0 1
50264: PPUSH
50265: CALL_OW 81
50269: PUSH
50270: LD_INT 2
50272: EQUAL
50273: AND
50274: IFFALSE 50288
// begin side := i ;
50276: LD_ADDR_VAR 0 3
50280: PUSH
50281: LD_VAR 0 1
50285: ST_TO_ADDR
// break ;
50286: GO 50290
// end ;
50288: GO 50241
50290: POP
50291: POP
// if not side then
50292: LD_VAR 0 3
50296: NOT
50297: IFFALSE 50301
// exit ;
50299: GO 50346
// for i := 1 to tmp do
50301: LD_ADDR_VAR 0 1
50305: PUSH
50306: DOUBLE
50307: LD_INT 1
50309: DEC
50310: ST_TO_ADDR
50311: LD_VAR 0 2
50315: PUSH
50316: FOR_TO
50317: IFFALSE 50344
// if Prob ( 60 ) then
50319: LD_INT 60
50321: PPUSH
50322: CALL_OW 13
50326: IFFALSE 50342
// SetSide ( i , side ) ;
50328: LD_VAR 0 1
50332: PPUSH
50333: LD_VAR 0 3
50337: PPUSH
50338: CALL_OW 235
50342: GO 50316
50344: POP
50345: POP
// end ;
50346: PPOPN 3
50348: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
50349: LD_EXP 43
50353: PUSH
50354: LD_EXP 56
50358: AND
50359: IFFALSE 50478
50361: GO 50363
50363: DISABLE
50364: LD_INT 0
50366: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
50367: LD_ADDR_VAR 0 1
50371: PUSH
50372: LD_INT 22
50374: PUSH
50375: LD_OWVAR 2
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 21
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 3
50396: PUSH
50397: LD_INT 23
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: LIST
50415: PPUSH
50416: CALL_OW 69
50420: PUSH
50421: FOR_IN
50422: IFFALSE 50476
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
50424: LD_VAR 0 1
50428: PPUSH
50429: CALL_OW 257
50433: PUSH
50434: LD_INT 1
50436: PUSH
50437: LD_INT 2
50439: PUSH
50440: LD_INT 3
50442: PUSH
50443: LD_INT 4
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: IN
50452: IFFALSE 50474
// SetClass ( un , rand ( 1 , 4 ) ) ;
50454: LD_VAR 0 1
50458: PPUSH
50459: LD_INT 1
50461: PPUSH
50462: LD_INT 4
50464: PPUSH
50465: CALL_OW 12
50469: PPUSH
50470: CALL_OW 336
50474: GO 50421
50476: POP
50477: POP
// end ;
50478: PPOPN 1
50480: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
50481: LD_EXP 43
50485: PUSH
50486: LD_EXP 55
50490: AND
50491: IFFALSE 50570
50493: GO 50495
50495: DISABLE
50496: LD_INT 0
50498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
50499: LD_ADDR_VAR 0 1
50503: PUSH
50504: LD_INT 22
50506: PUSH
50507: LD_OWVAR 2
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 21
50518: PUSH
50519: LD_INT 3
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PPUSH
50530: CALL_OW 69
50534: ST_TO_ADDR
// if not tmp then
50535: LD_VAR 0 1
50539: NOT
50540: IFFALSE 50544
// exit ;
50542: GO 50570
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
50544: LD_VAR 0 1
50548: PUSH
50549: LD_INT 1
50551: PPUSH
50552: LD_VAR 0 1
50556: PPUSH
50557: CALL_OW 12
50561: ARRAY
50562: PPUSH
50563: LD_INT 100
50565: PPUSH
50566: CALL_OW 234
// end ;
50570: PPOPN 1
50572: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
50573: LD_EXP 43
50577: PUSH
50578: LD_EXP 57
50582: AND
50583: IFFALSE 50681
50585: GO 50587
50587: DISABLE
50588: LD_INT 0
50590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
50591: LD_ADDR_VAR 0 1
50595: PUSH
50596: LD_INT 22
50598: PUSH
50599: LD_OWVAR 2
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 21
50610: PUSH
50611: LD_INT 1
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PPUSH
50622: CALL_OW 69
50626: ST_TO_ADDR
// if not tmp then
50627: LD_VAR 0 1
50631: NOT
50632: IFFALSE 50636
// exit ;
50634: GO 50681
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
50636: LD_VAR 0 1
50640: PUSH
50641: LD_INT 1
50643: PPUSH
50644: LD_VAR 0 1
50648: PPUSH
50649: CALL_OW 12
50653: ARRAY
50654: PPUSH
50655: LD_INT 1
50657: PPUSH
50658: LD_INT 4
50660: PPUSH
50661: CALL_OW 12
50665: PPUSH
50666: LD_INT 3000
50668: PPUSH
50669: LD_INT 9000
50671: PPUSH
50672: CALL_OW 12
50676: PPUSH
50677: CALL_OW 492
// end ;
50681: PPOPN 1
50683: END
// every 0 0$1 trigger StreamModeActive and sDepot do
50684: LD_EXP 43
50688: PUSH
50689: LD_EXP 58
50693: AND
50694: IFFALSE 50714
50696: GO 50698
50698: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
50699: LD_INT 1
50701: PPUSH
50702: LD_OWVAR 2
50706: PPUSH
50707: LD_INT 0
50709: PPUSH
50710: CALL_OW 324
50714: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
50715: LD_EXP 43
50719: PUSH
50720: LD_EXP 59
50724: AND
50725: IFFALSE 50808
50727: GO 50729
50729: DISABLE
50730: LD_INT 0
50732: PPUSH
50733: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
50734: LD_ADDR_VAR 0 2
50738: PUSH
50739: LD_INT 22
50741: PUSH
50742: LD_OWVAR 2
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 21
50753: PUSH
50754: LD_INT 3
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PPUSH
50765: CALL_OW 69
50769: ST_TO_ADDR
// if not tmp then
50770: LD_VAR 0 2
50774: NOT
50775: IFFALSE 50779
// exit ;
50777: GO 50808
// for i in tmp do
50779: LD_ADDR_VAR 0 1
50783: PUSH
50784: LD_VAR 0 2
50788: PUSH
50789: FOR_IN
50790: IFFALSE 50806
// SetBLevel ( i , 10 ) ;
50792: LD_VAR 0 1
50796: PPUSH
50797: LD_INT 10
50799: PPUSH
50800: CALL_OW 241
50804: GO 50789
50806: POP
50807: POP
// end ;
50808: PPOPN 2
50810: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
50811: LD_EXP 43
50815: PUSH
50816: LD_EXP 60
50820: AND
50821: IFFALSE 50932
50823: GO 50825
50825: DISABLE
50826: LD_INT 0
50828: PPUSH
50829: PPUSH
50830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
50831: LD_ADDR_VAR 0 3
50835: PUSH
50836: LD_INT 22
50838: PUSH
50839: LD_OWVAR 2
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 25
50850: PUSH
50851: LD_INT 1
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PPUSH
50862: CALL_OW 69
50866: ST_TO_ADDR
// if not tmp then
50867: LD_VAR 0 3
50871: NOT
50872: IFFALSE 50876
// exit ;
50874: GO 50932
// un := tmp [ rand ( 1 , tmp ) ] ;
50876: LD_ADDR_VAR 0 2
50880: PUSH
50881: LD_VAR 0 3
50885: PUSH
50886: LD_INT 1
50888: PPUSH
50889: LD_VAR 0 3
50893: PPUSH
50894: CALL_OW 12
50898: ARRAY
50899: ST_TO_ADDR
// if Crawls ( un ) then
50900: LD_VAR 0 2
50904: PPUSH
50905: CALL_OW 318
50909: IFFALSE 50920
// ComWalk ( un ) ;
50911: LD_VAR 0 2
50915: PPUSH
50916: CALL_OW 138
// SetClass ( un , class_sniper ) ;
50920: LD_VAR 0 2
50924: PPUSH
50925: LD_INT 5
50927: PPUSH
50928: CALL_OW 336
// end ;
50932: PPOPN 3
50934: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
50935: LD_EXP 43
50939: PUSH
50940: LD_EXP 61
50944: AND
50945: PUSH
50946: LD_OWVAR 67
50950: PUSH
50951: LD_INT 3
50953: LESS
50954: AND
50955: IFFALSE 50974
50957: GO 50959
50959: DISABLE
// Difficulty := Difficulty + 1 ;
50960: LD_ADDR_OWVAR 67
50964: PUSH
50965: LD_OWVAR 67
50969: PUSH
50970: LD_INT 1
50972: PLUS
50973: ST_TO_ADDR
50974: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
50975: LD_EXP 43
50979: PUSH
50980: LD_EXP 62
50984: AND
50985: IFFALSE 51088
50987: GO 50989
50989: DISABLE
50990: LD_INT 0
50992: PPUSH
// begin for i := 1 to 5 do
50993: LD_ADDR_VAR 0 1
50997: PUSH
50998: DOUBLE
50999: LD_INT 1
51001: DEC
51002: ST_TO_ADDR
51003: LD_INT 5
51005: PUSH
51006: FOR_TO
51007: IFFALSE 51086
// begin uc_nation := nation_nature ;
51009: LD_ADDR_OWVAR 21
51013: PUSH
51014: LD_INT 0
51016: ST_TO_ADDR
// uc_side := 0 ;
51017: LD_ADDR_OWVAR 20
51021: PUSH
51022: LD_INT 0
51024: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51025: LD_ADDR_OWVAR 29
51029: PUSH
51030: LD_INT 12
51032: PUSH
51033: LD_INT 12
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: ST_TO_ADDR
// hc_agressivity := 20 ;
51040: LD_ADDR_OWVAR 35
51044: PUSH
51045: LD_INT 20
51047: ST_TO_ADDR
// hc_class := class_tiger ;
51048: LD_ADDR_OWVAR 28
51052: PUSH
51053: LD_INT 14
51055: ST_TO_ADDR
// hc_gallery :=  ;
51056: LD_ADDR_OWVAR 33
51060: PUSH
51061: LD_STRING 
51063: ST_TO_ADDR
// hc_name :=  ;
51064: LD_ADDR_OWVAR 26
51068: PUSH
51069: LD_STRING 
51071: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
51072: CALL_OW 44
51076: PPUSH
51077: LD_INT 0
51079: PPUSH
51080: CALL_OW 51
// end ;
51084: GO 51006
51086: POP
51087: POP
// end ;
51088: PPOPN 1
51090: END
// every 0 0$1 trigger StreamModeActive and sBomb do
51091: LD_EXP 43
51095: PUSH
51096: LD_EXP 63
51100: AND
51101: IFFALSE 51110
51103: GO 51105
51105: DISABLE
// StreamSibBomb ;
51106: CALL 51111 0 0
51110: END
// export function StreamSibBomb ; var i , x , y ; begin
51111: LD_INT 0
51113: PPUSH
51114: PPUSH
51115: PPUSH
51116: PPUSH
// result := false ;
51117: LD_ADDR_VAR 0 1
51121: PUSH
51122: LD_INT 0
51124: ST_TO_ADDR
// for i := 1 to 16 do
51125: LD_ADDR_VAR 0 2
51129: PUSH
51130: DOUBLE
51131: LD_INT 1
51133: DEC
51134: ST_TO_ADDR
51135: LD_INT 16
51137: PUSH
51138: FOR_TO
51139: IFFALSE 51338
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
51141: LD_ADDR_VAR 0 3
51145: PUSH
51146: LD_INT 10
51148: PUSH
51149: LD_INT 20
51151: PUSH
51152: LD_INT 30
51154: PUSH
51155: LD_INT 40
51157: PUSH
51158: LD_INT 50
51160: PUSH
51161: LD_INT 60
51163: PUSH
51164: LD_INT 70
51166: PUSH
51167: LD_INT 80
51169: PUSH
51170: LD_INT 90
51172: PUSH
51173: LD_INT 100
51175: PUSH
51176: LD_INT 110
51178: PUSH
51179: LD_INT 120
51181: PUSH
51182: LD_INT 130
51184: PUSH
51185: LD_INT 140
51187: PUSH
51188: LD_INT 150
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: PPUSH
51211: LD_INT 15
51213: PPUSH
51214: CALL_OW 12
51218: ARRAY
51219: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
51220: LD_ADDR_VAR 0 4
51224: PUSH
51225: LD_INT 10
51227: PUSH
51228: LD_INT 20
51230: PUSH
51231: LD_INT 30
51233: PUSH
51234: LD_INT 40
51236: PUSH
51237: LD_INT 50
51239: PUSH
51240: LD_INT 60
51242: PUSH
51243: LD_INT 70
51245: PUSH
51246: LD_INT 80
51248: PUSH
51249: LD_INT 90
51251: PUSH
51252: LD_INT 100
51254: PUSH
51255: LD_INT 110
51257: PUSH
51258: LD_INT 120
51260: PUSH
51261: LD_INT 130
51263: PUSH
51264: LD_INT 140
51266: PUSH
51267: LD_INT 150
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 1
51289: PPUSH
51290: LD_INT 15
51292: PPUSH
51293: CALL_OW 12
51297: ARRAY
51298: ST_TO_ADDR
// if ValidHex ( x , y ) then
51299: LD_VAR 0 3
51303: PPUSH
51304: LD_VAR 0 4
51308: PPUSH
51309: CALL_OW 488
51313: IFFALSE 51336
// begin result := [ x , y ] ;
51315: LD_ADDR_VAR 0 1
51319: PUSH
51320: LD_VAR 0 3
51324: PUSH
51325: LD_VAR 0 4
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: ST_TO_ADDR
// break ;
51334: GO 51338
// end ; end ;
51336: GO 51138
51338: POP
51339: POP
// if result then
51340: LD_VAR 0 1
51344: IFFALSE 51404
// begin ToLua ( playSibBomb() ) ;
51346: LD_STRING playSibBomb()
51348: PPUSH
51349: CALL_OW 559
// wait ( 0 0$14 ) ;
51353: LD_INT 490
51355: PPUSH
51356: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
51360: LD_VAR 0 1
51364: PUSH
51365: LD_INT 1
51367: ARRAY
51368: PPUSH
51369: LD_VAR 0 1
51373: PUSH
51374: LD_INT 2
51376: ARRAY
51377: PPUSH
51378: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
51382: LD_VAR 0 1
51386: PUSH
51387: LD_INT 1
51389: ARRAY
51390: PPUSH
51391: LD_VAR 0 1
51395: PUSH
51396: LD_INT 2
51398: ARRAY
51399: PPUSH
51400: CALL_OW 429
// end ; end ;
51404: LD_VAR 0 1
51408: RET
// every 0 0$1 trigger StreamModeActive and sReset do
51409: LD_EXP 43
51413: PUSH
51414: LD_EXP 65
51418: AND
51419: IFFALSE 51431
51421: GO 51423
51423: DISABLE
// YouLost (  ) ;
51424: LD_STRING 
51426: PPUSH
51427: CALL_OW 104
51431: END
// every 0 0$1 trigger StreamModeActive and sFog do
51432: LD_EXP 43
51436: PUSH
51437: LD_EXP 64
51441: AND
51442: IFFALSE 51456
51444: GO 51446
51446: DISABLE
// FogOff ( your_side ) ;
51447: LD_OWVAR 2
51451: PPUSH
51452: CALL_OW 344
51456: END
// every 0 0$1 trigger StreamModeActive and sSun do
51457: LD_EXP 43
51461: PUSH
51462: LD_EXP 66
51466: AND
51467: IFFALSE 51495
51469: GO 51471
51471: DISABLE
// begin solar_recharge_percent := 0 ;
51472: LD_ADDR_OWVAR 79
51476: PUSH
51477: LD_INT 0
51479: ST_TO_ADDR
// wait ( 5 5$00 ) ;
51480: LD_INT 10500
51482: PPUSH
51483: CALL_OW 67
// solar_recharge_percent := 100 ;
51487: LD_ADDR_OWVAR 79
51491: PUSH
51492: LD_INT 100
51494: ST_TO_ADDR
// end ;
51495: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
51496: LD_EXP 43
51500: PUSH
51501: LD_EXP 67
51505: AND
51506: IFFALSE 51745
51508: GO 51510
51510: DISABLE
51511: LD_INT 0
51513: PPUSH
51514: PPUSH
51515: PPUSH
// begin tmp := [ ] ;
51516: LD_ADDR_VAR 0 3
51520: PUSH
51521: EMPTY
51522: ST_TO_ADDR
// for i := 1 to 6 do
51523: LD_ADDR_VAR 0 1
51527: PUSH
51528: DOUBLE
51529: LD_INT 1
51531: DEC
51532: ST_TO_ADDR
51533: LD_INT 6
51535: PUSH
51536: FOR_TO
51537: IFFALSE 51642
// begin uc_nation := nation_nature ;
51539: LD_ADDR_OWVAR 21
51543: PUSH
51544: LD_INT 0
51546: ST_TO_ADDR
// uc_side := 0 ;
51547: LD_ADDR_OWVAR 20
51551: PUSH
51552: LD_INT 0
51554: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51555: LD_ADDR_OWVAR 29
51559: PUSH
51560: LD_INT 12
51562: PUSH
51563: LD_INT 12
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: ST_TO_ADDR
// hc_agressivity := 20 ;
51570: LD_ADDR_OWVAR 35
51574: PUSH
51575: LD_INT 20
51577: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
51578: LD_ADDR_OWVAR 28
51582: PUSH
51583: LD_INT 17
51585: ST_TO_ADDR
// hc_gallery :=  ;
51586: LD_ADDR_OWVAR 33
51590: PUSH
51591: LD_STRING 
51593: ST_TO_ADDR
// hc_name :=  ;
51594: LD_ADDR_OWVAR 26
51598: PUSH
51599: LD_STRING 
51601: ST_TO_ADDR
// un := CreateHuman ;
51602: LD_ADDR_VAR 0 2
51606: PUSH
51607: CALL_OW 44
51611: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
51612: LD_VAR 0 2
51616: PPUSH
51617: LD_INT 1
51619: PPUSH
51620: CALL_OW 51
// tmp := tmp ^ un ;
51624: LD_ADDR_VAR 0 3
51628: PUSH
51629: LD_VAR 0 3
51633: PUSH
51634: LD_VAR 0 2
51638: ADD
51639: ST_TO_ADDR
// end ;
51640: GO 51536
51642: POP
51643: POP
// repeat wait ( 0 0$1 ) ;
51644: LD_INT 35
51646: PPUSH
51647: CALL_OW 67
// for un in tmp do
51651: LD_ADDR_VAR 0 2
51655: PUSH
51656: LD_VAR 0 3
51660: PUSH
51661: FOR_IN
51662: IFFALSE 51736
// begin if IsDead ( un ) then
51664: LD_VAR 0 2
51668: PPUSH
51669: CALL_OW 301
51673: IFFALSE 51693
// begin tmp := tmp diff un ;
51675: LD_ADDR_VAR 0 3
51679: PUSH
51680: LD_VAR 0 3
51684: PUSH
51685: LD_VAR 0 2
51689: DIFF
51690: ST_TO_ADDR
// continue ;
51691: GO 51661
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
51693: LD_VAR 0 2
51697: PPUSH
51698: LD_INT 3
51700: PUSH
51701: LD_INT 22
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PPUSH
51715: CALL_OW 69
51719: PPUSH
51720: LD_VAR 0 2
51724: PPUSH
51725: CALL_OW 74
51729: PPUSH
51730: CALL_OW 115
// end ;
51734: GO 51661
51736: POP
51737: POP
// until not tmp ;
51738: LD_VAR 0 3
51742: NOT
51743: IFFALSE 51644
// end ;
51745: PPOPN 3
51747: END
// every 0 0$1 trigger StreamModeActive and sTroll do
51748: LD_EXP 43
51752: PUSH
51753: LD_EXP 68
51757: AND
51758: IFFALSE 51812
51760: GO 51762
51762: DISABLE
// begin ToLua ( displayTroll(); ) ;
51763: LD_STRING displayTroll();
51765: PPUSH
51766: CALL_OW 559
// wait ( 3 3$00 ) ;
51770: LD_INT 6300
51772: PPUSH
51773: CALL_OW 67
// ToLua ( hideTroll(); ) ;
51777: LD_STRING hideTroll();
51779: PPUSH
51780: CALL_OW 559
// wait ( 1 1$00 ) ;
51784: LD_INT 2100
51786: PPUSH
51787: CALL_OW 67
// ToLua ( displayTroll(); ) ;
51791: LD_STRING displayTroll();
51793: PPUSH
51794: CALL_OW 559
// wait ( 1 1$00 ) ;
51798: LD_INT 2100
51800: PPUSH
51801: CALL_OW 67
// ToLua ( hideTroll(); ) ;
51805: LD_STRING hideTroll();
51807: PPUSH
51808: CALL_OW 559
// end ;
51812: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
51813: LD_EXP 43
51817: PUSH
51818: LD_EXP 69
51822: AND
51823: IFFALSE 51886
51825: GO 51827
51827: DISABLE
51828: LD_INT 0
51830: PPUSH
// begin p := 0 ;
51831: LD_ADDR_VAR 0 1
51835: PUSH
51836: LD_INT 0
51838: ST_TO_ADDR
// repeat game_speed := 1 ;
51839: LD_ADDR_OWVAR 65
51843: PUSH
51844: LD_INT 1
51846: ST_TO_ADDR
// wait ( 0 0$1 ) ;
51847: LD_INT 35
51849: PPUSH
51850: CALL_OW 67
// p := p + 1 ;
51854: LD_ADDR_VAR 0 1
51858: PUSH
51859: LD_VAR 0 1
51863: PUSH
51864: LD_INT 1
51866: PLUS
51867: ST_TO_ADDR
// until p >= 60 ;
51868: LD_VAR 0 1
51872: PUSH
51873: LD_INT 60
51875: GREATEREQUAL
51876: IFFALSE 51839
// game_speed := 4 ;
51878: LD_ADDR_OWVAR 65
51882: PUSH
51883: LD_INT 4
51885: ST_TO_ADDR
// end ;
51886: PPOPN 1
51888: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
51889: LD_EXP 43
51893: PUSH
51894: LD_EXP 70
51898: AND
51899: IFFALSE 52045
51901: GO 51903
51903: DISABLE
51904: LD_INT 0
51906: PPUSH
51907: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51908: LD_ADDR_VAR 0 1
51912: PUSH
51913: LD_INT 22
51915: PUSH
51916: LD_OWVAR 2
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 2
51927: PUSH
51928: LD_INT 30
51930: PUSH
51931: LD_INT 0
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 30
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: LIST
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PPUSH
51957: CALL_OW 69
51961: ST_TO_ADDR
// if not depot then
51962: LD_VAR 0 1
51966: NOT
51967: IFFALSE 51971
// exit ;
51969: GO 52045
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
51971: LD_ADDR_VAR 0 2
51975: PUSH
51976: LD_VAR 0 1
51980: PUSH
51981: LD_INT 1
51983: PPUSH
51984: LD_VAR 0 1
51988: PPUSH
51989: CALL_OW 12
51993: ARRAY
51994: PPUSH
51995: CALL_OW 274
51999: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
52000: LD_VAR 0 2
52004: PPUSH
52005: LD_INT 1
52007: PPUSH
52008: LD_INT 0
52010: PPUSH
52011: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
52015: LD_VAR 0 2
52019: PPUSH
52020: LD_INT 2
52022: PPUSH
52023: LD_INT 0
52025: PPUSH
52026: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
52030: LD_VAR 0 2
52034: PPUSH
52035: LD_INT 3
52037: PPUSH
52038: LD_INT 0
52040: PPUSH
52041: CALL_OW 277
// end ;
52045: PPOPN 2
52047: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
52048: LD_EXP 43
52052: PUSH
52053: LD_EXP 71
52057: AND
52058: IFFALSE 52155
52060: GO 52062
52062: DISABLE
52063: LD_INT 0
52065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
52066: LD_ADDR_VAR 0 1
52070: PUSH
52071: LD_INT 22
52073: PUSH
52074: LD_OWVAR 2
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 21
52085: PUSH
52086: LD_INT 1
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 3
52095: PUSH
52096: LD_INT 23
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: LIST
52114: PPUSH
52115: CALL_OW 69
52119: ST_TO_ADDR
// if not tmp then
52120: LD_VAR 0 1
52124: NOT
52125: IFFALSE 52129
// exit ;
52127: GO 52155
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
52129: LD_VAR 0 1
52133: PUSH
52134: LD_INT 1
52136: PPUSH
52137: LD_VAR 0 1
52141: PPUSH
52142: CALL_OW 12
52146: ARRAY
52147: PPUSH
52148: LD_INT 200
52150: PPUSH
52151: CALL_OW 234
// end ;
52155: PPOPN 1
52157: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
52158: LD_EXP 43
52162: PUSH
52163: LD_EXP 72
52167: AND
52168: IFFALSE 52247
52170: GO 52172
52172: DISABLE
52173: LD_INT 0
52175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
52176: LD_ADDR_VAR 0 1
52180: PUSH
52181: LD_INT 22
52183: PUSH
52184: LD_OWVAR 2
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 21
52195: PUSH
52196: LD_INT 2
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PPUSH
52207: CALL_OW 69
52211: ST_TO_ADDR
// if not tmp then
52212: LD_VAR 0 1
52216: NOT
52217: IFFALSE 52221
// exit ;
52219: GO 52247
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
52221: LD_VAR 0 1
52225: PUSH
52226: LD_INT 1
52228: PPUSH
52229: LD_VAR 0 1
52233: PPUSH
52234: CALL_OW 12
52238: ARRAY
52239: PPUSH
52240: LD_INT 60
52242: PPUSH
52243: CALL_OW 234
// end ;
52247: PPOPN 1
52249: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
52250: LD_EXP 43
52254: PUSH
52255: LD_EXP 73
52259: AND
52260: IFFALSE 52359
52262: GO 52264
52264: DISABLE
52265: LD_INT 0
52267: PPUSH
52268: PPUSH
// begin enable ;
52269: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
52270: LD_ADDR_VAR 0 1
52274: PUSH
52275: LD_INT 22
52277: PUSH
52278: LD_OWVAR 2
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 61
52289: PUSH
52290: EMPTY
52291: LIST
52292: PUSH
52293: LD_INT 33
52295: PUSH
52296: LD_INT 2
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: LIST
52307: PPUSH
52308: CALL_OW 69
52312: ST_TO_ADDR
// if not tmp then
52313: LD_VAR 0 1
52317: NOT
52318: IFFALSE 52322
// exit ;
52320: GO 52359
// for i in tmp do
52322: LD_ADDR_VAR 0 2
52326: PUSH
52327: LD_VAR 0 1
52331: PUSH
52332: FOR_IN
52333: IFFALSE 52357
// if IsControledBy ( i ) then
52335: LD_VAR 0 2
52339: PPUSH
52340: CALL_OW 312
52344: IFFALSE 52355
// ComUnlink ( i ) ;
52346: LD_VAR 0 2
52350: PPUSH
52351: CALL_OW 136
52355: GO 52332
52357: POP
52358: POP
// end ;
52359: PPOPN 2
52361: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
52362: LD_EXP 43
52366: PUSH
52367: LD_EXP 74
52371: AND
52372: IFFALSE 52512
52374: GO 52376
52376: DISABLE
52377: LD_INT 0
52379: PPUSH
52380: PPUSH
// begin ToLua ( displayPowell(); ) ;
52381: LD_STRING displayPowell();
52383: PPUSH
52384: CALL_OW 559
// uc_side := 0 ;
52388: LD_ADDR_OWVAR 20
52392: PUSH
52393: LD_INT 0
52395: ST_TO_ADDR
// uc_nation := 2 ;
52396: LD_ADDR_OWVAR 21
52400: PUSH
52401: LD_INT 2
52403: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
52404: LD_ADDR_OWVAR 37
52408: PUSH
52409: LD_INT 14
52411: ST_TO_ADDR
// vc_engine := engine_siberite ;
52412: LD_ADDR_OWVAR 39
52416: PUSH
52417: LD_INT 3
52419: ST_TO_ADDR
// vc_control := control_apeman ;
52420: LD_ADDR_OWVAR 38
52424: PUSH
52425: LD_INT 5
52427: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
52428: LD_ADDR_OWVAR 40
52432: PUSH
52433: LD_INT 29
52435: ST_TO_ADDR
// un := CreateVehicle ;
52436: LD_ADDR_VAR 0 2
52440: PUSH
52441: CALL_OW 45
52445: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
52446: LD_VAR 0 2
52450: PPUSH
52451: LD_INT 1
52453: PPUSH
52454: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
52458: LD_INT 35
52460: PPUSH
52461: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
52465: LD_VAR 0 2
52469: PPUSH
52470: LD_INT 22
52472: PUSH
52473: LD_OWVAR 2
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PPUSH
52482: CALL_OW 69
52486: PPUSH
52487: LD_VAR 0 2
52491: PPUSH
52492: CALL_OW 74
52496: PPUSH
52497: CALL_OW 115
// until IsDead ( un ) ;
52501: LD_VAR 0 2
52505: PPUSH
52506: CALL_OW 301
52510: IFFALSE 52458
// end ;
52512: PPOPN 2
52514: END
// every 0 0$1 trigger StreamModeActive and sStu do
52515: LD_EXP 43
52519: PUSH
52520: LD_EXP 82
52524: AND
52525: IFFALSE 52541
52527: GO 52529
52529: DISABLE
// begin ToLua ( displayStucuk(); ) ;
52530: LD_STRING displayStucuk();
52532: PPUSH
52533: CALL_OW 559
// ResetFog ;
52537: CALL_OW 335
// end ;
52541: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
52542: LD_EXP 43
52546: PUSH
52547: LD_EXP 75
52551: AND
52552: IFFALSE 52693
52554: GO 52556
52556: DISABLE
52557: LD_INT 0
52559: PPUSH
52560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
52561: LD_ADDR_VAR 0 2
52565: PUSH
52566: LD_INT 22
52568: PUSH
52569: LD_OWVAR 2
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 21
52580: PUSH
52581: LD_INT 1
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PPUSH
52592: CALL_OW 69
52596: ST_TO_ADDR
// if not tmp then
52597: LD_VAR 0 2
52601: NOT
52602: IFFALSE 52606
// exit ;
52604: GO 52693
// un := tmp [ rand ( 1 , tmp ) ] ;
52606: LD_ADDR_VAR 0 1
52610: PUSH
52611: LD_VAR 0 2
52615: PUSH
52616: LD_INT 1
52618: PPUSH
52619: LD_VAR 0 2
52623: PPUSH
52624: CALL_OW 12
52628: ARRAY
52629: ST_TO_ADDR
// SetSide ( un , 0 ) ;
52630: LD_VAR 0 1
52634: PPUSH
52635: LD_INT 0
52637: PPUSH
52638: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
52642: LD_VAR 0 1
52646: PPUSH
52647: LD_OWVAR 3
52651: PUSH
52652: LD_VAR 0 1
52656: DIFF
52657: PPUSH
52658: LD_VAR 0 1
52662: PPUSH
52663: CALL_OW 74
52667: PPUSH
52668: CALL_OW 115
// wait ( 0 0$20 ) ;
52672: LD_INT 700
52674: PPUSH
52675: CALL_OW 67
// SetSide ( un , your_side ) ;
52679: LD_VAR 0 1
52683: PPUSH
52684: LD_OWVAR 2
52688: PPUSH
52689: CALL_OW 235
// end ;
52693: PPOPN 2
52695: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
52696: LD_EXP 43
52700: PUSH
52701: LD_EXP 76
52705: AND
52706: IFFALSE 52812
52708: GO 52710
52710: DISABLE
52711: LD_INT 0
52713: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52714: LD_ADDR_VAR 0 1
52718: PUSH
52719: LD_INT 22
52721: PUSH
52722: LD_OWVAR 2
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 2
52733: PUSH
52734: LD_INT 30
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 30
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: LIST
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PPUSH
52763: CALL_OW 69
52767: ST_TO_ADDR
// if not depot then
52768: LD_VAR 0 1
52772: NOT
52773: IFFALSE 52777
// exit ;
52775: GO 52812
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
52777: LD_VAR 0 1
52781: PUSH
52782: LD_INT 1
52784: ARRAY
52785: PPUSH
52786: CALL_OW 250
52790: PPUSH
52791: LD_VAR 0 1
52795: PUSH
52796: LD_INT 1
52798: ARRAY
52799: PPUSH
52800: CALL_OW 251
52804: PPUSH
52805: LD_INT 70
52807: PPUSH
52808: CALL_OW 495
// end ;
52812: PPOPN 1
52814: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
52815: LD_EXP 43
52819: PUSH
52820: LD_EXP 77
52824: AND
52825: IFFALSE 53036
52827: GO 52829
52829: DISABLE
52830: LD_INT 0
52832: PPUSH
52833: PPUSH
52834: PPUSH
52835: PPUSH
52836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
52837: LD_ADDR_VAR 0 5
52841: PUSH
52842: LD_INT 22
52844: PUSH
52845: LD_OWVAR 2
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 21
52856: PUSH
52857: LD_INT 1
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PPUSH
52868: CALL_OW 69
52872: ST_TO_ADDR
// if not tmp then
52873: LD_VAR 0 5
52877: NOT
52878: IFFALSE 52882
// exit ;
52880: GO 53036
// for i in tmp do
52882: LD_ADDR_VAR 0 1
52886: PUSH
52887: LD_VAR 0 5
52891: PUSH
52892: FOR_IN
52893: IFFALSE 53034
// begin d := rand ( 0 , 5 ) ;
52895: LD_ADDR_VAR 0 4
52899: PUSH
52900: LD_INT 0
52902: PPUSH
52903: LD_INT 5
52905: PPUSH
52906: CALL_OW 12
52910: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
52911: LD_ADDR_VAR 0 2
52915: PUSH
52916: LD_VAR 0 1
52920: PPUSH
52921: CALL_OW 250
52925: PPUSH
52926: LD_VAR 0 4
52930: PPUSH
52931: LD_INT 3
52933: PPUSH
52934: LD_INT 12
52936: PPUSH
52937: CALL_OW 12
52941: PPUSH
52942: CALL_OW 272
52946: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
52947: LD_ADDR_VAR 0 3
52951: PUSH
52952: LD_VAR 0 1
52956: PPUSH
52957: CALL_OW 251
52961: PPUSH
52962: LD_VAR 0 4
52966: PPUSH
52967: LD_INT 3
52969: PPUSH
52970: LD_INT 12
52972: PPUSH
52973: CALL_OW 12
52977: PPUSH
52978: CALL_OW 273
52982: ST_TO_ADDR
// if ValidHex ( x , y ) then
52983: LD_VAR 0 2
52987: PPUSH
52988: LD_VAR 0 3
52992: PPUSH
52993: CALL_OW 488
52997: IFFALSE 53032
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
52999: LD_VAR 0 1
53003: PPUSH
53004: LD_VAR 0 2
53008: PPUSH
53009: LD_VAR 0 3
53013: PPUSH
53014: LD_INT 3
53016: PPUSH
53017: LD_INT 6
53019: PPUSH
53020: CALL_OW 12
53024: PPUSH
53025: LD_INT 1
53027: PPUSH
53028: CALL_OW 483
// end ;
53032: GO 52892
53034: POP
53035: POP
// end ;
53036: PPOPN 5
53038: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
53039: LD_EXP 43
53043: PUSH
53044: LD_EXP 78
53048: AND
53049: IFFALSE 53143
53051: GO 53053
53053: DISABLE
53054: LD_INT 0
53056: PPUSH
53057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
53058: LD_ADDR_VAR 0 2
53062: PUSH
53063: LD_INT 22
53065: PUSH
53066: LD_OWVAR 2
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 32
53077: PUSH
53078: LD_INT 1
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 21
53087: PUSH
53088: LD_INT 2
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: LIST
53099: PPUSH
53100: CALL_OW 69
53104: ST_TO_ADDR
// if not tmp then
53105: LD_VAR 0 2
53109: NOT
53110: IFFALSE 53114
// exit ;
53112: GO 53143
// for i in tmp do
53114: LD_ADDR_VAR 0 1
53118: PUSH
53119: LD_VAR 0 2
53123: PUSH
53124: FOR_IN
53125: IFFALSE 53141
// SetFuel ( i , 0 ) ;
53127: LD_VAR 0 1
53131: PPUSH
53132: LD_INT 0
53134: PPUSH
53135: CALL_OW 240
53139: GO 53124
53141: POP
53142: POP
// end ;
53143: PPOPN 2
53145: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
53146: LD_EXP 43
53150: PUSH
53151: LD_EXP 79
53155: AND
53156: IFFALSE 53222
53158: GO 53160
53160: DISABLE
53161: LD_INT 0
53163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
53164: LD_ADDR_VAR 0 1
53168: PUSH
53169: LD_INT 22
53171: PUSH
53172: LD_OWVAR 2
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 30
53183: PUSH
53184: LD_INT 29
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PPUSH
53195: CALL_OW 69
53199: ST_TO_ADDR
// if not tmp then
53200: LD_VAR 0 1
53204: NOT
53205: IFFALSE 53209
// exit ;
53207: GO 53222
// DestroyUnit ( tmp [ 1 ] ) ;
53209: LD_VAR 0 1
53213: PUSH
53214: LD_INT 1
53216: ARRAY
53217: PPUSH
53218: CALL_OW 65
// end ;
53222: PPOPN 1
53224: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
53225: LD_EXP 43
53229: PUSH
53230: LD_EXP 81
53234: AND
53235: IFFALSE 53364
53237: GO 53239
53239: DISABLE
53240: LD_INT 0
53242: PPUSH
// begin uc_side := 0 ;
53243: LD_ADDR_OWVAR 20
53247: PUSH
53248: LD_INT 0
53250: ST_TO_ADDR
// uc_nation := nation_arabian ;
53251: LD_ADDR_OWVAR 21
53255: PUSH
53256: LD_INT 2
53258: ST_TO_ADDR
// hc_gallery :=  ;
53259: LD_ADDR_OWVAR 33
53263: PUSH
53264: LD_STRING 
53266: ST_TO_ADDR
// hc_name :=  ;
53267: LD_ADDR_OWVAR 26
53271: PUSH
53272: LD_STRING 
53274: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
53275: LD_INT 1
53277: PPUSH
53278: LD_INT 11
53280: PPUSH
53281: LD_INT 10
53283: PPUSH
53284: CALL_OW 380
// un := CreateHuman ;
53288: LD_ADDR_VAR 0 1
53292: PUSH
53293: CALL_OW 44
53297: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
53298: LD_VAR 0 1
53302: PPUSH
53303: LD_INT 1
53305: PPUSH
53306: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
53310: LD_INT 35
53312: PPUSH
53313: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
53317: LD_VAR 0 1
53321: PPUSH
53322: LD_INT 22
53324: PUSH
53325: LD_OWVAR 2
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PPUSH
53334: CALL_OW 69
53338: PPUSH
53339: LD_VAR 0 1
53343: PPUSH
53344: CALL_OW 74
53348: PPUSH
53349: CALL_OW 115
// until IsDead ( un ) ;
53353: LD_VAR 0 1
53357: PPUSH
53358: CALL_OW 301
53362: IFFALSE 53310
// end ;
53364: PPOPN 1
53366: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
53367: LD_EXP 43
53371: PUSH
53372: LD_EXP 83
53376: AND
53377: IFFALSE 53389
53379: GO 53381
53381: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
53382: LD_STRING earthquake(getX(game), 0, 32)
53384: PPUSH
53385: CALL_OW 559
53389: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
53390: LD_EXP 43
53394: PUSH
53395: LD_EXP 84
53399: AND
53400: IFFALSE 53491
53402: GO 53404
53404: DISABLE
53405: LD_INT 0
53407: PPUSH
// begin enable ;
53408: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
53409: LD_ADDR_VAR 0 1
53413: PUSH
53414: LD_INT 22
53416: PUSH
53417: LD_OWVAR 2
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 21
53428: PUSH
53429: LD_INT 2
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 33
53438: PUSH
53439: LD_INT 3
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: LIST
53450: PPUSH
53451: CALL_OW 69
53455: ST_TO_ADDR
// if not tmp then
53456: LD_VAR 0 1
53460: NOT
53461: IFFALSE 53465
// exit ;
53463: GO 53491
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
53465: LD_VAR 0 1
53469: PUSH
53470: LD_INT 1
53472: PPUSH
53473: LD_VAR 0 1
53477: PPUSH
53478: CALL_OW 12
53482: ARRAY
53483: PPUSH
53484: LD_INT 1
53486: PPUSH
53487: CALL_OW 234
// end ;
53491: PPOPN 1
53493: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
53494: LD_EXP 43
53498: PUSH
53499: LD_EXP 85
53503: AND
53504: IFFALSE 53645
53506: GO 53508
53508: DISABLE
53509: LD_INT 0
53511: PPUSH
53512: PPUSH
53513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
53514: LD_ADDR_VAR 0 3
53518: PUSH
53519: LD_INT 22
53521: PUSH
53522: LD_OWVAR 2
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 25
53533: PUSH
53534: LD_INT 1
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PPUSH
53545: CALL_OW 69
53549: ST_TO_ADDR
// if not tmp then
53550: LD_VAR 0 3
53554: NOT
53555: IFFALSE 53559
// exit ;
53557: GO 53645
// un := tmp [ rand ( 1 , tmp ) ] ;
53559: LD_ADDR_VAR 0 2
53563: PUSH
53564: LD_VAR 0 3
53568: PUSH
53569: LD_INT 1
53571: PPUSH
53572: LD_VAR 0 3
53576: PPUSH
53577: CALL_OW 12
53581: ARRAY
53582: ST_TO_ADDR
// if Crawls ( un ) then
53583: LD_VAR 0 2
53587: PPUSH
53588: CALL_OW 318
53592: IFFALSE 53603
// ComWalk ( un ) ;
53594: LD_VAR 0 2
53598: PPUSH
53599: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
53603: LD_VAR 0 2
53607: PPUSH
53608: LD_INT 9
53610: PPUSH
53611: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
53615: LD_INT 28
53617: PPUSH
53618: LD_OWVAR 2
53622: PPUSH
53623: LD_INT 2
53625: PPUSH
53626: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
53630: LD_INT 29
53632: PPUSH
53633: LD_OWVAR 2
53637: PPUSH
53638: LD_INT 2
53640: PPUSH
53641: CALL_OW 322
// end ;
53645: PPOPN 3
53647: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
53648: LD_EXP 43
53652: PUSH
53653: LD_EXP 86
53657: AND
53658: IFFALSE 53769
53660: GO 53662
53662: DISABLE
53663: LD_INT 0
53665: PPUSH
53666: PPUSH
53667: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
53668: LD_ADDR_VAR 0 3
53672: PUSH
53673: LD_INT 22
53675: PUSH
53676: LD_OWVAR 2
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 25
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PPUSH
53699: CALL_OW 69
53703: ST_TO_ADDR
// if not tmp then
53704: LD_VAR 0 3
53708: NOT
53709: IFFALSE 53713
// exit ;
53711: GO 53769
// un := tmp [ rand ( 1 , tmp ) ] ;
53713: LD_ADDR_VAR 0 2
53717: PUSH
53718: LD_VAR 0 3
53722: PUSH
53723: LD_INT 1
53725: PPUSH
53726: LD_VAR 0 3
53730: PPUSH
53731: CALL_OW 12
53735: ARRAY
53736: ST_TO_ADDR
// if Crawls ( un ) then
53737: LD_VAR 0 2
53741: PPUSH
53742: CALL_OW 318
53746: IFFALSE 53757
// ComWalk ( un ) ;
53748: LD_VAR 0 2
53752: PPUSH
53753: CALL_OW 138
// SetClass ( un , class_mortar ) ;
53757: LD_VAR 0 2
53761: PPUSH
53762: LD_INT 8
53764: PPUSH
53765: CALL_OW 336
// end ;
53769: PPOPN 3
53771: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
53772: LD_EXP 43
53776: PUSH
53777: LD_EXP 87
53781: AND
53782: IFFALSE 53926
53784: GO 53786
53786: DISABLE
53787: LD_INT 0
53789: PPUSH
53790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
53791: LD_ADDR_VAR 0 2
53795: PUSH
53796: LD_INT 22
53798: PUSH
53799: LD_OWVAR 2
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 21
53810: PUSH
53811: LD_INT 2
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 2
53820: PUSH
53821: LD_INT 34
53823: PUSH
53824: LD_INT 12
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 34
53833: PUSH
53834: LD_INT 51
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 34
53843: PUSH
53844: LD_INT 32
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: LIST
53861: PPUSH
53862: CALL_OW 69
53866: ST_TO_ADDR
// if not tmp then
53867: LD_VAR 0 2
53871: NOT
53872: IFFALSE 53876
// exit ;
53874: GO 53926
// for i in tmp do
53876: LD_ADDR_VAR 0 1
53880: PUSH
53881: LD_VAR 0 2
53885: PUSH
53886: FOR_IN
53887: IFFALSE 53924
// if GetCargo ( i , mat_artifact ) = 0 then
53889: LD_VAR 0 1
53893: PPUSH
53894: LD_INT 4
53896: PPUSH
53897: CALL_OW 289
53901: PUSH
53902: LD_INT 0
53904: EQUAL
53905: IFFALSE 53922
// SetCargo ( i , mat_siberit , 100 ) ;
53907: LD_VAR 0 1
53911: PPUSH
53912: LD_INT 3
53914: PPUSH
53915: LD_INT 100
53917: PPUSH
53918: CALL_OW 290
53922: GO 53886
53924: POP
53925: POP
// end ;
53926: PPOPN 2
53928: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
53929: LD_EXP 43
53933: PUSH
53934: LD_EXP 88
53938: AND
53939: IFFALSE 54122
53941: GO 53943
53943: DISABLE
53944: LD_INT 0
53946: PPUSH
53947: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
53948: LD_ADDR_VAR 0 2
53952: PUSH
53953: LD_INT 22
53955: PUSH
53956: LD_OWVAR 2
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PPUSH
53965: CALL_OW 69
53969: ST_TO_ADDR
// if not tmp then
53970: LD_VAR 0 2
53974: NOT
53975: IFFALSE 53979
// exit ;
53977: GO 54122
// for i := 1 to 2 do
53979: LD_ADDR_VAR 0 1
53983: PUSH
53984: DOUBLE
53985: LD_INT 1
53987: DEC
53988: ST_TO_ADDR
53989: LD_INT 2
53991: PUSH
53992: FOR_TO
53993: IFFALSE 54120
// begin uc_side := your_side ;
53995: LD_ADDR_OWVAR 20
53999: PUSH
54000: LD_OWVAR 2
54004: ST_TO_ADDR
// uc_nation := nation_american ;
54005: LD_ADDR_OWVAR 21
54009: PUSH
54010: LD_INT 1
54012: ST_TO_ADDR
// vc_chassis := us_morphling ;
54013: LD_ADDR_OWVAR 37
54017: PUSH
54018: LD_INT 5
54020: ST_TO_ADDR
// vc_engine := engine_siberite ;
54021: LD_ADDR_OWVAR 39
54025: PUSH
54026: LD_INT 3
54028: ST_TO_ADDR
// vc_control := control_computer ;
54029: LD_ADDR_OWVAR 38
54033: PUSH
54034: LD_INT 3
54036: ST_TO_ADDR
// vc_weapon := us_double_laser ;
54037: LD_ADDR_OWVAR 40
54041: PUSH
54042: LD_INT 10
54044: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
54045: LD_VAR 0 2
54049: PUSH
54050: LD_INT 1
54052: ARRAY
54053: PPUSH
54054: CALL_OW 310
54058: NOT
54059: IFFALSE 54106
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
54061: CALL_OW 45
54065: PPUSH
54066: LD_VAR 0 2
54070: PUSH
54071: LD_INT 1
54073: ARRAY
54074: PPUSH
54075: CALL_OW 250
54079: PPUSH
54080: LD_VAR 0 2
54084: PUSH
54085: LD_INT 1
54087: ARRAY
54088: PPUSH
54089: CALL_OW 251
54093: PPUSH
54094: LD_INT 12
54096: PPUSH
54097: LD_INT 1
54099: PPUSH
54100: CALL_OW 50
54104: GO 54118
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
54106: CALL_OW 45
54110: PPUSH
54111: LD_INT 1
54113: PPUSH
54114: CALL_OW 51
// end ;
54118: GO 53992
54120: POP
54121: POP
// end ;
54122: PPOPN 2
54124: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
54125: LD_EXP 43
54129: PUSH
54130: LD_EXP 89
54134: AND
54135: IFFALSE 54357
54137: GO 54139
54139: DISABLE
54140: LD_INT 0
54142: PPUSH
54143: PPUSH
54144: PPUSH
54145: PPUSH
54146: PPUSH
54147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
54148: LD_ADDR_VAR 0 6
54152: PUSH
54153: LD_INT 22
54155: PUSH
54156: LD_OWVAR 2
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 21
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 3
54177: PUSH
54178: LD_INT 23
54180: PUSH
54181: LD_INT 0
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: LIST
54196: PPUSH
54197: CALL_OW 69
54201: ST_TO_ADDR
// if not tmp then
54202: LD_VAR 0 6
54206: NOT
54207: IFFALSE 54211
// exit ;
54209: GO 54357
// s1 := rand ( 1 , 4 ) ;
54211: LD_ADDR_VAR 0 2
54215: PUSH
54216: LD_INT 1
54218: PPUSH
54219: LD_INT 4
54221: PPUSH
54222: CALL_OW 12
54226: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
54227: LD_ADDR_VAR 0 4
54231: PUSH
54232: LD_VAR 0 6
54236: PUSH
54237: LD_INT 1
54239: ARRAY
54240: PPUSH
54241: LD_VAR 0 2
54245: PPUSH
54246: CALL_OW 259
54250: ST_TO_ADDR
// if s1 = 1 then
54251: LD_VAR 0 2
54255: PUSH
54256: LD_INT 1
54258: EQUAL
54259: IFFALSE 54279
// s2 := rand ( 2 , 4 ) else
54261: LD_ADDR_VAR 0 3
54265: PUSH
54266: LD_INT 2
54268: PPUSH
54269: LD_INT 4
54271: PPUSH
54272: CALL_OW 12
54276: ST_TO_ADDR
54277: GO 54287
// s2 := 1 ;
54279: LD_ADDR_VAR 0 3
54283: PUSH
54284: LD_INT 1
54286: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
54287: LD_ADDR_VAR 0 5
54291: PUSH
54292: LD_VAR 0 6
54296: PUSH
54297: LD_INT 1
54299: ARRAY
54300: PPUSH
54301: LD_VAR 0 3
54305: PPUSH
54306: CALL_OW 259
54310: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
54311: LD_VAR 0 6
54315: PUSH
54316: LD_INT 1
54318: ARRAY
54319: PPUSH
54320: LD_VAR 0 2
54324: PPUSH
54325: LD_VAR 0 5
54329: PPUSH
54330: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
54334: LD_VAR 0 6
54338: PUSH
54339: LD_INT 1
54341: ARRAY
54342: PPUSH
54343: LD_VAR 0 3
54347: PPUSH
54348: LD_VAR 0 4
54352: PPUSH
54353: CALL_OW 237
// end ;
54357: PPOPN 6
54359: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
54360: LD_EXP 43
54364: PUSH
54365: LD_EXP 90
54369: AND
54370: IFFALSE 54449
54372: GO 54374
54374: DISABLE
54375: LD_INT 0
54377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
54378: LD_ADDR_VAR 0 1
54382: PUSH
54383: LD_INT 22
54385: PUSH
54386: LD_OWVAR 2
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 30
54397: PUSH
54398: LD_INT 3
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PPUSH
54409: CALL_OW 69
54413: ST_TO_ADDR
// if not tmp then
54414: LD_VAR 0 1
54418: NOT
54419: IFFALSE 54423
// exit ;
54421: GO 54449
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
54423: LD_VAR 0 1
54427: PUSH
54428: LD_INT 1
54430: PPUSH
54431: LD_VAR 0 1
54435: PPUSH
54436: CALL_OW 12
54440: ARRAY
54441: PPUSH
54442: LD_INT 1
54444: PPUSH
54445: CALL_OW 234
// end ;
54449: PPOPN 1
54451: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
54452: LD_EXP 43
54456: PUSH
54457: LD_EXP 91
54461: AND
54462: IFFALSE 54574
54464: GO 54466
54466: DISABLE
54467: LD_INT 0
54469: PPUSH
54470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
54471: LD_ADDR_VAR 0 2
54475: PUSH
54476: LD_INT 22
54478: PUSH
54479: LD_OWVAR 2
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 2
54490: PUSH
54491: LD_INT 30
54493: PUSH
54494: LD_INT 27
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 30
54503: PUSH
54504: LD_INT 26
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 30
54513: PUSH
54514: LD_INT 28
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PPUSH
54531: CALL_OW 69
54535: ST_TO_ADDR
// if not tmp then
54536: LD_VAR 0 2
54540: NOT
54541: IFFALSE 54545
// exit ;
54543: GO 54574
// for i in tmp do
54545: LD_ADDR_VAR 0 1
54549: PUSH
54550: LD_VAR 0 2
54554: PUSH
54555: FOR_IN
54556: IFFALSE 54572
// SetLives ( i , 1 ) ;
54558: LD_VAR 0 1
54562: PPUSH
54563: LD_INT 1
54565: PPUSH
54566: CALL_OW 234
54570: GO 54555
54572: POP
54573: POP
// end ;
54574: PPOPN 2
54576: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
54577: LD_EXP 43
54581: PUSH
54582: LD_EXP 92
54586: AND
54587: IFFALSE 54861
54589: GO 54591
54591: DISABLE
54592: LD_INT 0
54594: PPUSH
54595: PPUSH
54596: PPUSH
// begin i := rand ( 1 , 7 ) ;
54597: LD_ADDR_VAR 0 1
54601: PUSH
54602: LD_INT 1
54604: PPUSH
54605: LD_INT 7
54607: PPUSH
54608: CALL_OW 12
54612: ST_TO_ADDR
// case i of 1 :
54613: LD_VAR 0 1
54617: PUSH
54618: LD_INT 1
54620: DOUBLE
54621: EQUAL
54622: IFTRUE 54626
54624: GO 54636
54626: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
54627: LD_STRING earthquake(getX(game), 0, 32)
54629: PPUSH
54630: CALL_OW 559
54634: GO 54861
54636: LD_INT 2
54638: DOUBLE
54639: EQUAL
54640: IFTRUE 54644
54642: GO 54658
54644: POP
// begin ToLua ( displayStucuk(); ) ;
54645: LD_STRING displayStucuk();
54647: PPUSH
54648: CALL_OW 559
// ResetFog ;
54652: CALL_OW 335
// end ; 3 :
54656: GO 54861
54658: LD_INT 3
54660: DOUBLE
54661: EQUAL
54662: IFTRUE 54666
54664: GO 54770
54666: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
54667: LD_ADDR_VAR 0 2
54671: PUSH
54672: LD_INT 22
54674: PUSH
54675: LD_OWVAR 2
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 25
54686: PUSH
54687: LD_INT 1
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PPUSH
54698: CALL_OW 69
54702: ST_TO_ADDR
// if not tmp then
54703: LD_VAR 0 2
54707: NOT
54708: IFFALSE 54712
// exit ;
54710: GO 54861
// un := tmp [ rand ( 1 , tmp ) ] ;
54712: LD_ADDR_VAR 0 3
54716: PUSH
54717: LD_VAR 0 2
54721: PUSH
54722: LD_INT 1
54724: PPUSH
54725: LD_VAR 0 2
54729: PPUSH
54730: CALL_OW 12
54734: ARRAY
54735: ST_TO_ADDR
// if Crawls ( un ) then
54736: LD_VAR 0 3
54740: PPUSH
54741: CALL_OW 318
54745: IFFALSE 54756
// ComWalk ( un ) ;
54747: LD_VAR 0 3
54751: PPUSH
54752: CALL_OW 138
// SetClass ( un , class_mortar ) ;
54756: LD_VAR 0 3
54760: PPUSH
54761: LD_INT 8
54763: PPUSH
54764: CALL_OW 336
// end ; 4 :
54768: GO 54861
54770: LD_INT 4
54772: DOUBLE
54773: EQUAL
54774: IFTRUE 54778
54776: GO 54839
54778: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
54779: LD_ADDR_VAR 0 2
54783: PUSH
54784: LD_INT 22
54786: PUSH
54787: LD_OWVAR 2
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 30
54798: PUSH
54799: LD_INT 29
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PPUSH
54810: CALL_OW 69
54814: ST_TO_ADDR
// if not tmp then
54815: LD_VAR 0 2
54819: NOT
54820: IFFALSE 54824
// exit ;
54822: GO 54861
// DestroyUnit ( tmp [ 1 ] ) ;
54824: LD_VAR 0 2
54828: PUSH
54829: LD_INT 1
54831: ARRAY
54832: PPUSH
54833: CALL_OW 65
// end ; 5 .. 7 :
54837: GO 54861
54839: LD_INT 5
54841: DOUBLE
54842: GREATEREQUAL
54843: IFFALSE 54851
54845: LD_INT 7
54847: DOUBLE
54848: LESSEQUAL
54849: IFTRUE 54853
54851: GO 54860
54853: POP
// StreamSibBomb ; end ;
54854: CALL 51111 0 0
54858: GO 54861
54860: POP
// end ;
54861: PPOPN 3
54863: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
54864: LD_EXP 43
54868: PUSH
54869: LD_EXP 93
54873: AND
54874: IFFALSE 55030
54876: GO 54878
54878: DISABLE
54879: LD_INT 0
54881: PPUSH
54882: PPUSH
54883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
54884: LD_ADDR_VAR 0 2
54888: PUSH
54889: LD_INT 81
54891: PUSH
54892: LD_OWVAR 2
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 2
54903: PUSH
54904: LD_INT 21
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 21
54916: PUSH
54917: LD_INT 2
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: LIST
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PPUSH
54933: CALL_OW 69
54937: ST_TO_ADDR
// if not tmp then
54938: LD_VAR 0 2
54942: NOT
54943: IFFALSE 54947
// exit ;
54945: GO 55030
// p := 0 ;
54947: LD_ADDR_VAR 0 3
54951: PUSH
54952: LD_INT 0
54954: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
54955: LD_INT 35
54957: PPUSH
54958: CALL_OW 67
// p := p + 1 ;
54962: LD_ADDR_VAR 0 3
54966: PUSH
54967: LD_VAR 0 3
54971: PUSH
54972: LD_INT 1
54974: PLUS
54975: ST_TO_ADDR
// for i in tmp do
54976: LD_ADDR_VAR 0 1
54980: PUSH
54981: LD_VAR 0 2
54985: PUSH
54986: FOR_IN
54987: IFFALSE 55018
// if GetLives ( i ) < 1000 then
54989: LD_VAR 0 1
54993: PPUSH
54994: CALL_OW 256
54998: PUSH
54999: LD_INT 1000
55001: LESS
55002: IFFALSE 55016
// SetLives ( i , 1000 ) ;
55004: LD_VAR 0 1
55008: PPUSH
55009: LD_INT 1000
55011: PPUSH
55012: CALL_OW 234
55016: GO 54986
55018: POP
55019: POP
// until p > 20 ;
55020: LD_VAR 0 3
55024: PUSH
55025: LD_INT 20
55027: GREATER
55028: IFFALSE 54955
// end ;
55030: PPOPN 3
55032: END
// every 0 0$1 trigger StreamModeActive and sTime do
55033: LD_EXP 43
55037: PUSH
55038: LD_EXP 94
55042: AND
55043: IFFALSE 55078
55045: GO 55047
55047: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
55048: LD_INT 28
55050: PPUSH
55051: LD_OWVAR 2
55055: PPUSH
55056: LD_INT 2
55058: PPUSH
55059: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
55063: LD_INT 30
55065: PPUSH
55066: LD_OWVAR 2
55070: PPUSH
55071: LD_INT 2
55073: PPUSH
55074: CALL_OW 322
// end ;
55078: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
55079: LD_EXP 43
55083: PUSH
55084: LD_EXP 95
55088: AND
55089: IFFALSE 55210
55091: GO 55093
55093: DISABLE
55094: LD_INT 0
55096: PPUSH
55097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
55098: LD_ADDR_VAR 0 2
55102: PUSH
55103: LD_INT 22
55105: PUSH
55106: LD_OWVAR 2
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 21
55117: PUSH
55118: LD_INT 1
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 3
55127: PUSH
55128: LD_INT 23
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: LIST
55146: PPUSH
55147: CALL_OW 69
55151: ST_TO_ADDR
// if not tmp then
55152: LD_VAR 0 2
55156: NOT
55157: IFFALSE 55161
// exit ;
55159: GO 55210
// for i in tmp do
55161: LD_ADDR_VAR 0 1
55165: PUSH
55166: LD_VAR 0 2
55170: PUSH
55171: FOR_IN
55172: IFFALSE 55208
// begin if Crawls ( i ) then
55174: LD_VAR 0 1
55178: PPUSH
55179: CALL_OW 318
55183: IFFALSE 55194
// ComWalk ( i ) ;
55185: LD_VAR 0 1
55189: PPUSH
55190: CALL_OW 138
// SetClass ( i , 2 ) ;
55194: LD_VAR 0 1
55198: PPUSH
55199: LD_INT 2
55201: PPUSH
55202: CALL_OW 336
// end ;
55206: GO 55171
55208: POP
55209: POP
// end ;
55210: PPOPN 2
55212: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
55213: LD_EXP 43
55217: PUSH
55218: LD_EXP 96
55222: AND
55223: IFFALSE 55504
55225: GO 55227
55227: DISABLE
55228: LD_INT 0
55230: PPUSH
55231: PPUSH
55232: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
55233: LD_OWVAR 2
55237: PPUSH
55238: LD_INT 9
55240: PPUSH
55241: LD_INT 1
55243: PPUSH
55244: LD_INT 1
55246: PPUSH
55247: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
55251: LD_INT 9
55253: PPUSH
55254: LD_OWVAR 2
55258: PPUSH
55259: CALL_OW 343
// uc_side := 9 ;
55263: LD_ADDR_OWVAR 20
55267: PUSH
55268: LD_INT 9
55270: ST_TO_ADDR
// uc_nation := 2 ;
55271: LD_ADDR_OWVAR 21
55275: PUSH
55276: LD_INT 2
55278: ST_TO_ADDR
// hc_name := Dark Warrior ;
55279: LD_ADDR_OWVAR 26
55283: PUSH
55284: LD_STRING Dark Warrior
55286: ST_TO_ADDR
// hc_gallery :=  ;
55287: LD_ADDR_OWVAR 33
55291: PUSH
55292: LD_STRING 
55294: ST_TO_ADDR
// hc_noskilllimit := true ;
55295: LD_ADDR_OWVAR 76
55299: PUSH
55300: LD_INT 1
55302: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
55303: LD_ADDR_OWVAR 31
55307: PUSH
55308: LD_INT 30
55310: PUSH
55311: LD_INT 30
55313: PUSH
55314: LD_INT 30
55316: PUSH
55317: LD_INT 30
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: ST_TO_ADDR
// un := CreateHuman ;
55326: LD_ADDR_VAR 0 3
55330: PUSH
55331: CALL_OW 44
55335: ST_TO_ADDR
// hc_noskilllimit := false ;
55336: LD_ADDR_OWVAR 76
55340: PUSH
55341: LD_INT 0
55343: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55344: LD_VAR 0 3
55348: PPUSH
55349: LD_INT 1
55351: PPUSH
55352: CALL_OW 51
// p := 0 ;
55356: LD_ADDR_VAR 0 2
55360: PUSH
55361: LD_INT 0
55363: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
55364: LD_INT 35
55366: PPUSH
55367: CALL_OW 67
// p := p + 1 ;
55371: LD_ADDR_VAR 0 2
55375: PUSH
55376: LD_VAR 0 2
55380: PUSH
55381: LD_INT 1
55383: PLUS
55384: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
55385: LD_VAR 0 3
55389: PPUSH
55390: CALL_OW 256
55394: PUSH
55395: LD_INT 1000
55397: LESS
55398: IFFALSE 55412
// SetLives ( un , 1000 ) ;
55400: LD_VAR 0 3
55404: PPUSH
55405: LD_INT 1000
55407: PPUSH
55408: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
55412: LD_VAR 0 3
55416: PPUSH
55417: LD_INT 81
55419: PUSH
55420: LD_OWVAR 2
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 91
55431: PUSH
55432: LD_VAR 0 3
55436: PUSH
55437: LD_INT 30
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: LIST
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PPUSH
55449: CALL_OW 69
55453: PPUSH
55454: LD_VAR 0 3
55458: PPUSH
55459: CALL_OW 74
55463: PPUSH
55464: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
55468: LD_VAR 0 2
55472: PUSH
55473: LD_INT 60
55475: GREATER
55476: PUSH
55477: LD_VAR 0 3
55481: PPUSH
55482: CALL_OW 301
55486: OR
55487: IFFALSE 55364
// if un then
55489: LD_VAR 0 3
55493: IFFALSE 55504
// RemoveUnit ( un ) ;
55495: LD_VAR 0 3
55499: PPUSH
55500: CALL_OW 64
// end ;
55504: PPOPN 3
55506: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
55507: LD_INT 0
55509: PPUSH
// case cmd of 301 :
55510: LD_VAR 0 1
55514: PUSH
55515: LD_INT 301
55517: DOUBLE
55518: EQUAL
55519: IFTRUE 55523
55521: GO 55555
55523: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
55524: LD_VAR 0 6
55528: PPUSH
55529: LD_VAR 0 7
55533: PPUSH
55534: LD_VAR 0 8
55538: PPUSH
55539: LD_VAR 0 4
55543: PPUSH
55544: LD_VAR 0 5
55548: PPUSH
55549: CALL 56756 0 5
55553: GO 55676
55555: LD_INT 302
55557: DOUBLE
55558: EQUAL
55559: IFTRUE 55563
55561: GO 55600
55563: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
55564: LD_VAR 0 6
55568: PPUSH
55569: LD_VAR 0 7
55573: PPUSH
55574: LD_VAR 0 8
55578: PPUSH
55579: LD_VAR 0 9
55583: PPUSH
55584: LD_VAR 0 4
55588: PPUSH
55589: LD_VAR 0 5
55593: PPUSH
55594: CALL 56847 0 6
55598: GO 55676
55600: LD_INT 303
55602: DOUBLE
55603: EQUAL
55604: IFTRUE 55608
55606: GO 55645
55608: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
55609: LD_VAR 0 6
55613: PPUSH
55614: LD_VAR 0 7
55618: PPUSH
55619: LD_VAR 0 8
55623: PPUSH
55624: LD_VAR 0 9
55628: PPUSH
55629: LD_VAR 0 4
55633: PPUSH
55634: LD_VAR 0 5
55638: PPUSH
55639: CALL 55681 0 6
55643: GO 55676
55645: LD_INT 304
55647: DOUBLE
55648: EQUAL
55649: IFTRUE 55653
55651: GO 55675
55653: POP
// hHackTeleport ( unit , x , y ) ; end ;
55654: LD_VAR 0 2
55658: PPUSH
55659: LD_VAR 0 4
55663: PPUSH
55664: LD_VAR 0 5
55668: PPUSH
55669: CALL 57440 0 3
55673: GO 55676
55675: POP
// end ;
55676: LD_VAR 0 12
55680: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
55681: LD_INT 0
55683: PPUSH
55684: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
55685: LD_VAR 0 1
55689: PUSH
55690: LD_INT 1
55692: LESS
55693: PUSH
55694: LD_VAR 0 1
55698: PUSH
55699: LD_INT 3
55701: GREATER
55702: OR
55703: PUSH
55704: LD_VAR 0 5
55708: PPUSH
55709: LD_VAR 0 6
55713: PPUSH
55714: CALL_OW 428
55718: OR
55719: IFFALSE 55723
// exit ;
55721: GO 56443
// uc_side := your_side ;
55723: LD_ADDR_OWVAR 20
55727: PUSH
55728: LD_OWVAR 2
55732: ST_TO_ADDR
// uc_nation := nation ;
55733: LD_ADDR_OWVAR 21
55737: PUSH
55738: LD_VAR 0 1
55742: ST_TO_ADDR
// bc_level = 1 ;
55743: LD_ADDR_OWVAR 43
55747: PUSH
55748: LD_INT 1
55750: ST_TO_ADDR
// case btype of 1 :
55751: LD_VAR 0 2
55755: PUSH
55756: LD_INT 1
55758: DOUBLE
55759: EQUAL
55760: IFTRUE 55764
55762: GO 55775
55764: POP
// bc_type := b_depot ; 2 :
55765: LD_ADDR_OWVAR 42
55769: PUSH
55770: LD_INT 0
55772: ST_TO_ADDR
55773: GO 56387
55775: LD_INT 2
55777: DOUBLE
55778: EQUAL
55779: IFTRUE 55783
55781: GO 55794
55783: POP
// bc_type := b_warehouse ; 3 :
55784: LD_ADDR_OWVAR 42
55788: PUSH
55789: LD_INT 1
55791: ST_TO_ADDR
55792: GO 56387
55794: LD_INT 3
55796: DOUBLE
55797: EQUAL
55798: IFTRUE 55802
55800: GO 55813
55802: POP
// bc_type := b_lab ; 4 .. 9 :
55803: LD_ADDR_OWVAR 42
55807: PUSH
55808: LD_INT 6
55810: ST_TO_ADDR
55811: GO 56387
55813: LD_INT 4
55815: DOUBLE
55816: GREATEREQUAL
55817: IFFALSE 55825
55819: LD_INT 9
55821: DOUBLE
55822: LESSEQUAL
55823: IFTRUE 55827
55825: GO 55879
55827: POP
// begin bc_type := b_lab_half ;
55828: LD_ADDR_OWVAR 42
55832: PUSH
55833: LD_INT 7
55835: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
55836: LD_ADDR_OWVAR 44
55840: PUSH
55841: LD_INT 10
55843: PUSH
55844: LD_INT 11
55846: PUSH
55847: LD_INT 12
55849: PUSH
55850: LD_INT 15
55852: PUSH
55853: LD_INT 14
55855: PUSH
55856: LD_INT 13
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: PUSH
55867: LD_VAR 0 2
55871: PUSH
55872: LD_INT 3
55874: MINUS
55875: ARRAY
55876: ST_TO_ADDR
// end ; 10 .. 13 :
55877: GO 56387
55879: LD_INT 10
55881: DOUBLE
55882: GREATEREQUAL
55883: IFFALSE 55891
55885: LD_INT 13
55887: DOUBLE
55888: LESSEQUAL
55889: IFTRUE 55893
55891: GO 55970
55893: POP
// begin bc_type := b_lab_full ;
55894: LD_ADDR_OWVAR 42
55898: PUSH
55899: LD_INT 8
55901: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
55902: LD_ADDR_OWVAR 44
55906: PUSH
55907: LD_INT 10
55909: PUSH
55910: LD_INT 12
55912: PUSH
55913: LD_INT 14
55915: PUSH
55916: LD_INT 13
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: PUSH
55925: LD_VAR 0 2
55929: PUSH
55930: LD_INT 9
55932: MINUS
55933: ARRAY
55934: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
55935: LD_ADDR_OWVAR 45
55939: PUSH
55940: LD_INT 11
55942: PUSH
55943: LD_INT 15
55945: PUSH
55946: LD_INT 12
55948: PUSH
55949: LD_INT 15
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: PUSH
55958: LD_VAR 0 2
55962: PUSH
55963: LD_INT 9
55965: MINUS
55966: ARRAY
55967: ST_TO_ADDR
// end ; 14 :
55968: GO 56387
55970: LD_INT 14
55972: DOUBLE
55973: EQUAL
55974: IFTRUE 55978
55976: GO 55989
55978: POP
// bc_type := b_workshop ; 15 :
55979: LD_ADDR_OWVAR 42
55983: PUSH
55984: LD_INT 2
55986: ST_TO_ADDR
55987: GO 56387
55989: LD_INT 15
55991: DOUBLE
55992: EQUAL
55993: IFTRUE 55997
55995: GO 56008
55997: POP
// bc_type := b_factory ; 16 :
55998: LD_ADDR_OWVAR 42
56002: PUSH
56003: LD_INT 3
56005: ST_TO_ADDR
56006: GO 56387
56008: LD_INT 16
56010: DOUBLE
56011: EQUAL
56012: IFTRUE 56016
56014: GO 56027
56016: POP
// bc_type := b_ext_gun ; 17 :
56017: LD_ADDR_OWVAR 42
56021: PUSH
56022: LD_INT 17
56024: ST_TO_ADDR
56025: GO 56387
56027: LD_INT 17
56029: DOUBLE
56030: EQUAL
56031: IFTRUE 56035
56033: GO 56063
56035: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
56036: LD_ADDR_OWVAR 42
56040: PUSH
56041: LD_INT 19
56043: PUSH
56044: LD_INT 23
56046: PUSH
56047: LD_INT 19
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: LIST
56054: PUSH
56055: LD_VAR 0 1
56059: ARRAY
56060: ST_TO_ADDR
56061: GO 56387
56063: LD_INT 18
56065: DOUBLE
56066: EQUAL
56067: IFTRUE 56071
56069: GO 56082
56071: POP
// bc_type := b_ext_radar ; 19 :
56072: LD_ADDR_OWVAR 42
56076: PUSH
56077: LD_INT 20
56079: ST_TO_ADDR
56080: GO 56387
56082: LD_INT 19
56084: DOUBLE
56085: EQUAL
56086: IFTRUE 56090
56088: GO 56101
56090: POP
// bc_type := b_ext_radio ; 20 :
56091: LD_ADDR_OWVAR 42
56095: PUSH
56096: LD_INT 22
56098: ST_TO_ADDR
56099: GO 56387
56101: LD_INT 20
56103: DOUBLE
56104: EQUAL
56105: IFTRUE 56109
56107: GO 56120
56109: POP
// bc_type := b_ext_siberium ; 21 :
56110: LD_ADDR_OWVAR 42
56114: PUSH
56115: LD_INT 21
56117: ST_TO_ADDR
56118: GO 56387
56120: LD_INT 21
56122: DOUBLE
56123: EQUAL
56124: IFTRUE 56128
56126: GO 56139
56128: POP
// bc_type := b_ext_computer ; 22 :
56129: LD_ADDR_OWVAR 42
56133: PUSH
56134: LD_INT 24
56136: ST_TO_ADDR
56137: GO 56387
56139: LD_INT 22
56141: DOUBLE
56142: EQUAL
56143: IFTRUE 56147
56145: GO 56158
56147: POP
// bc_type := b_ext_track ; 23 :
56148: LD_ADDR_OWVAR 42
56152: PUSH
56153: LD_INT 16
56155: ST_TO_ADDR
56156: GO 56387
56158: LD_INT 23
56160: DOUBLE
56161: EQUAL
56162: IFTRUE 56166
56164: GO 56177
56166: POP
// bc_type := b_ext_laser ; 24 :
56167: LD_ADDR_OWVAR 42
56171: PUSH
56172: LD_INT 25
56174: ST_TO_ADDR
56175: GO 56387
56177: LD_INT 24
56179: DOUBLE
56180: EQUAL
56181: IFTRUE 56185
56183: GO 56196
56185: POP
// bc_type := b_control_tower ; 25 :
56186: LD_ADDR_OWVAR 42
56190: PUSH
56191: LD_INT 36
56193: ST_TO_ADDR
56194: GO 56387
56196: LD_INT 25
56198: DOUBLE
56199: EQUAL
56200: IFTRUE 56204
56202: GO 56215
56204: POP
// bc_type := b_breastwork ; 26 :
56205: LD_ADDR_OWVAR 42
56209: PUSH
56210: LD_INT 31
56212: ST_TO_ADDR
56213: GO 56387
56215: LD_INT 26
56217: DOUBLE
56218: EQUAL
56219: IFTRUE 56223
56221: GO 56234
56223: POP
// bc_type := b_bunker ; 27 :
56224: LD_ADDR_OWVAR 42
56228: PUSH
56229: LD_INT 32
56231: ST_TO_ADDR
56232: GO 56387
56234: LD_INT 27
56236: DOUBLE
56237: EQUAL
56238: IFTRUE 56242
56240: GO 56253
56242: POP
// bc_type := b_turret ; 28 :
56243: LD_ADDR_OWVAR 42
56247: PUSH
56248: LD_INT 33
56250: ST_TO_ADDR
56251: GO 56387
56253: LD_INT 28
56255: DOUBLE
56256: EQUAL
56257: IFTRUE 56261
56259: GO 56272
56261: POP
// bc_type := b_armoury ; 29 :
56262: LD_ADDR_OWVAR 42
56266: PUSH
56267: LD_INT 4
56269: ST_TO_ADDR
56270: GO 56387
56272: LD_INT 29
56274: DOUBLE
56275: EQUAL
56276: IFTRUE 56280
56278: GO 56291
56280: POP
// bc_type := b_barracks ; 30 :
56281: LD_ADDR_OWVAR 42
56285: PUSH
56286: LD_INT 5
56288: ST_TO_ADDR
56289: GO 56387
56291: LD_INT 30
56293: DOUBLE
56294: EQUAL
56295: IFTRUE 56299
56297: GO 56310
56299: POP
// bc_type := b_solar_power ; 31 :
56300: LD_ADDR_OWVAR 42
56304: PUSH
56305: LD_INT 27
56307: ST_TO_ADDR
56308: GO 56387
56310: LD_INT 31
56312: DOUBLE
56313: EQUAL
56314: IFTRUE 56318
56316: GO 56329
56318: POP
// bc_type := b_oil_power ; 32 :
56319: LD_ADDR_OWVAR 42
56323: PUSH
56324: LD_INT 26
56326: ST_TO_ADDR
56327: GO 56387
56329: LD_INT 32
56331: DOUBLE
56332: EQUAL
56333: IFTRUE 56337
56335: GO 56348
56337: POP
// bc_type := b_siberite_power ; 33 :
56338: LD_ADDR_OWVAR 42
56342: PUSH
56343: LD_INT 28
56345: ST_TO_ADDR
56346: GO 56387
56348: LD_INT 33
56350: DOUBLE
56351: EQUAL
56352: IFTRUE 56356
56354: GO 56367
56356: POP
// bc_type := b_oil_mine ; 34 :
56357: LD_ADDR_OWVAR 42
56361: PUSH
56362: LD_INT 29
56364: ST_TO_ADDR
56365: GO 56387
56367: LD_INT 34
56369: DOUBLE
56370: EQUAL
56371: IFTRUE 56375
56373: GO 56386
56375: POP
// bc_type := b_siberite_mine ; end ;
56376: LD_ADDR_OWVAR 42
56380: PUSH
56381: LD_INT 30
56383: ST_TO_ADDR
56384: GO 56387
56386: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
56387: LD_ADDR_VAR 0 8
56391: PUSH
56392: LD_VAR 0 5
56396: PPUSH
56397: LD_VAR 0 6
56401: PPUSH
56402: LD_VAR 0 3
56406: PPUSH
56407: CALL_OW 47
56411: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
56412: LD_OWVAR 42
56416: PUSH
56417: LD_INT 32
56419: PUSH
56420: LD_INT 33
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: IN
56427: IFFALSE 56443
// PlaceWeaponTurret ( b , weapon ) ;
56429: LD_VAR 0 8
56433: PPUSH
56434: LD_VAR 0 4
56438: PPUSH
56439: CALL_OW 431
// end ;
56443: LD_VAR 0 7
56447: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
56448: LD_INT 0
56450: PPUSH
56451: PPUSH
56452: PPUSH
56453: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56454: LD_ADDR_VAR 0 4
56458: PUSH
56459: LD_INT 22
56461: PUSH
56462: LD_OWVAR 2
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 2
56473: PUSH
56474: LD_INT 30
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 30
56486: PUSH
56487: LD_INT 1
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: LIST
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PPUSH
56503: CALL_OW 69
56507: ST_TO_ADDR
// if not tmp then
56508: LD_VAR 0 4
56512: NOT
56513: IFFALSE 56517
// exit ;
56515: GO 56576
// for i in tmp do
56517: LD_ADDR_VAR 0 2
56521: PUSH
56522: LD_VAR 0 4
56526: PUSH
56527: FOR_IN
56528: IFFALSE 56574
// for j = 1 to 3 do
56530: LD_ADDR_VAR 0 3
56534: PUSH
56535: DOUBLE
56536: LD_INT 1
56538: DEC
56539: ST_TO_ADDR
56540: LD_INT 3
56542: PUSH
56543: FOR_TO
56544: IFFALSE 56570
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
56546: LD_VAR 0 2
56550: PPUSH
56551: CALL_OW 274
56555: PPUSH
56556: LD_VAR 0 3
56560: PPUSH
56561: LD_INT 99999
56563: PPUSH
56564: CALL_OW 277
56568: GO 56543
56570: POP
56571: POP
56572: GO 56527
56574: POP
56575: POP
// end ;
56576: LD_VAR 0 1
56580: RET
// export function hHackSetLevel10 ; var i , j ; begin
56581: LD_INT 0
56583: PPUSH
56584: PPUSH
56585: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
56586: LD_ADDR_VAR 0 2
56590: PUSH
56591: LD_INT 21
56593: PUSH
56594: LD_INT 1
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PPUSH
56601: CALL_OW 69
56605: PUSH
56606: FOR_IN
56607: IFFALSE 56659
// if IsSelected ( i ) then
56609: LD_VAR 0 2
56613: PPUSH
56614: CALL_OW 306
56618: IFFALSE 56657
// begin for j := 1 to 4 do
56620: LD_ADDR_VAR 0 3
56624: PUSH
56625: DOUBLE
56626: LD_INT 1
56628: DEC
56629: ST_TO_ADDR
56630: LD_INT 4
56632: PUSH
56633: FOR_TO
56634: IFFALSE 56655
// SetSkill ( i , j , 10 ) ;
56636: LD_VAR 0 2
56640: PPUSH
56641: LD_VAR 0 3
56645: PPUSH
56646: LD_INT 10
56648: PPUSH
56649: CALL_OW 237
56653: GO 56633
56655: POP
56656: POP
// end ;
56657: GO 56606
56659: POP
56660: POP
// end ;
56661: LD_VAR 0 1
56665: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
56666: LD_INT 0
56668: PPUSH
56669: PPUSH
56670: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
56671: LD_ADDR_VAR 0 2
56675: PUSH
56676: LD_INT 22
56678: PUSH
56679: LD_OWVAR 2
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 21
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PPUSH
56702: CALL_OW 69
56706: PUSH
56707: FOR_IN
56708: IFFALSE 56749
// begin for j := 1 to 4 do
56710: LD_ADDR_VAR 0 3
56714: PUSH
56715: DOUBLE
56716: LD_INT 1
56718: DEC
56719: ST_TO_ADDR
56720: LD_INT 4
56722: PUSH
56723: FOR_TO
56724: IFFALSE 56745
// SetSkill ( i , j , 10 ) ;
56726: LD_VAR 0 2
56730: PPUSH
56731: LD_VAR 0 3
56735: PPUSH
56736: LD_INT 10
56738: PPUSH
56739: CALL_OW 237
56743: GO 56723
56745: POP
56746: POP
// end ;
56747: GO 56707
56749: POP
56750: POP
// end ;
56751: LD_VAR 0 1
56755: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
56756: LD_INT 0
56758: PPUSH
// uc_side := your_side ;
56759: LD_ADDR_OWVAR 20
56763: PUSH
56764: LD_OWVAR 2
56768: ST_TO_ADDR
// uc_nation := nation ;
56769: LD_ADDR_OWVAR 21
56773: PUSH
56774: LD_VAR 0 1
56778: ST_TO_ADDR
// InitHc ;
56779: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
56783: LD_INT 0
56785: PPUSH
56786: LD_VAR 0 2
56790: PPUSH
56791: LD_VAR 0 3
56795: PPUSH
56796: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
56800: LD_VAR 0 4
56804: PPUSH
56805: LD_VAR 0 5
56809: PPUSH
56810: CALL_OW 428
56814: PUSH
56815: LD_INT 0
56817: EQUAL
56818: IFFALSE 56842
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
56820: CALL_OW 44
56824: PPUSH
56825: LD_VAR 0 4
56829: PPUSH
56830: LD_VAR 0 5
56834: PPUSH
56835: LD_INT 1
56837: PPUSH
56838: CALL_OW 48
// end ;
56842: LD_VAR 0 6
56846: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
56847: LD_INT 0
56849: PPUSH
56850: PPUSH
// uc_side := your_side ;
56851: LD_ADDR_OWVAR 20
56855: PUSH
56856: LD_OWVAR 2
56860: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
56861: LD_VAR 0 1
56865: PUSH
56866: LD_INT 1
56868: PUSH
56869: LD_INT 2
56871: PUSH
56872: LD_INT 3
56874: PUSH
56875: LD_INT 4
56877: PUSH
56878: LD_INT 5
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: IN
56888: IFFALSE 56900
// uc_nation := nation_american else
56890: LD_ADDR_OWVAR 21
56894: PUSH
56895: LD_INT 1
56897: ST_TO_ADDR
56898: GO 56943
// if chassis in [ 11 , 12 , 13 , 14 ] then
56900: LD_VAR 0 1
56904: PUSH
56905: LD_INT 11
56907: PUSH
56908: LD_INT 12
56910: PUSH
56911: LD_INT 13
56913: PUSH
56914: LD_INT 14
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: IN
56923: IFFALSE 56935
// uc_nation := nation_arabian else
56925: LD_ADDR_OWVAR 21
56929: PUSH
56930: LD_INT 2
56932: ST_TO_ADDR
56933: GO 56943
// uc_nation := nation_russian ;
56935: LD_ADDR_OWVAR 21
56939: PUSH
56940: LD_INT 3
56942: ST_TO_ADDR
// vc_chassis := chassis ;
56943: LD_ADDR_OWVAR 37
56947: PUSH
56948: LD_VAR 0 1
56952: ST_TO_ADDR
// vc_engine := engine ;
56953: LD_ADDR_OWVAR 39
56957: PUSH
56958: LD_VAR 0 2
56962: ST_TO_ADDR
// vc_control := control ;
56963: LD_ADDR_OWVAR 38
56967: PUSH
56968: LD_VAR 0 3
56972: ST_TO_ADDR
// vc_weapon := weapon ;
56973: LD_ADDR_OWVAR 40
56977: PUSH
56978: LD_VAR 0 4
56982: ST_TO_ADDR
// un := CreateVehicle ;
56983: LD_ADDR_VAR 0 8
56987: PUSH
56988: CALL_OW 45
56992: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
56993: LD_VAR 0 8
56997: PPUSH
56998: LD_INT 0
57000: PPUSH
57001: LD_INT 5
57003: PPUSH
57004: CALL_OW 12
57008: PPUSH
57009: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
57013: LD_VAR 0 8
57017: PPUSH
57018: LD_VAR 0 5
57022: PPUSH
57023: LD_VAR 0 6
57027: PPUSH
57028: LD_INT 1
57030: PPUSH
57031: CALL_OW 48
// end ;
57035: LD_VAR 0 7
57039: RET
// export hInvincible ; every 1 do
57040: GO 57042
57042: DISABLE
// hInvincible := [ ] ;
57043: LD_ADDR_EXP 97
57047: PUSH
57048: EMPTY
57049: ST_TO_ADDR
57050: END
// every 10 do var i ;
57051: GO 57053
57053: DISABLE
57054: LD_INT 0
57056: PPUSH
// begin enable ;
57057: ENABLE
// if not hInvincible then
57058: LD_EXP 97
57062: NOT
57063: IFFALSE 57067
// exit ;
57065: GO 57111
// for i in hInvincible do
57067: LD_ADDR_VAR 0 1
57071: PUSH
57072: LD_EXP 97
57076: PUSH
57077: FOR_IN
57078: IFFALSE 57109
// if GetLives ( i ) < 1000 then
57080: LD_VAR 0 1
57084: PPUSH
57085: CALL_OW 256
57089: PUSH
57090: LD_INT 1000
57092: LESS
57093: IFFALSE 57107
// SetLives ( i , 1000 ) ;
57095: LD_VAR 0 1
57099: PPUSH
57100: LD_INT 1000
57102: PPUSH
57103: CALL_OW 234
57107: GO 57077
57109: POP
57110: POP
// end ;
57111: PPOPN 1
57113: END
// export function hHackInvincible ; var i ; begin
57114: LD_INT 0
57116: PPUSH
57117: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
57118: LD_ADDR_VAR 0 2
57122: PUSH
57123: LD_INT 2
57125: PUSH
57126: LD_INT 21
57128: PUSH
57129: LD_INT 1
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 21
57138: PUSH
57139: LD_INT 2
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: LIST
57150: PPUSH
57151: CALL_OW 69
57155: PUSH
57156: FOR_IN
57157: IFFALSE 57218
// if IsSelected ( i ) then
57159: LD_VAR 0 2
57163: PPUSH
57164: CALL_OW 306
57168: IFFALSE 57216
// begin if i in hInvincible then
57170: LD_VAR 0 2
57174: PUSH
57175: LD_EXP 97
57179: IN
57180: IFFALSE 57200
// hInvincible := hInvincible diff i else
57182: LD_ADDR_EXP 97
57186: PUSH
57187: LD_EXP 97
57191: PUSH
57192: LD_VAR 0 2
57196: DIFF
57197: ST_TO_ADDR
57198: GO 57216
// hInvincible := hInvincible union i ;
57200: LD_ADDR_EXP 97
57204: PUSH
57205: LD_EXP 97
57209: PUSH
57210: LD_VAR 0 2
57214: UNION
57215: ST_TO_ADDR
// end ;
57216: GO 57156
57218: POP
57219: POP
// end ;
57220: LD_VAR 0 1
57224: RET
// export function hHackInvisible ; var i , j ; begin
57225: LD_INT 0
57227: PPUSH
57228: PPUSH
57229: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
57230: LD_ADDR_VAR 0 2
57234: PUSH
57235: LD_INT 21
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PPUSH
57245: CALL_OW 69
57249: PUSH
57250: FOR_IN
57251: IFFALSE 57275
// if IsSelected ( i ) then
57253: LD_VAR 0 2
57257: PPUSH
57258: CALL_OW 306
57262: IFFALSE 57273
// ComForceInvisible ( i ) ;
57264: LD_VAR 0 2
57268: PPUSH
57269: CALL_OW 496
57273: GO 57250
57275: POP
57276: POP
// end ;
57277: LD_VAR 0 1
57281: RET
// export function hHackChangeYourSide ; begin
57282: LD_INT 0
57284: PPUSH
// if your_side = 8 then
57285: LD_OWVAR 2
57289: PUSH
57290: LD_INT 8
57292: EQUAL
57293: IFFALSE 57305
// your_side := 0 else
57295: LD_ADDR_OWVAR 2
57299: PUSH
57300: LD_INT 0
57302: ST_TO_ADDR
57303: GO 57319
// your_side := your_side + 1 ;
57305: LD_ADDR_OWVAR 2
57309: PUSH
57310: LD_OWVAR 2
57314: PUSH
57315: LD_INT 1
57317: PLUS
57318: ST_TO_ADDR
// end ;
57319: LD_VAR 0 1
57323: RET
// export function hHackChangeUnitSide ; var i , j ; begin
57324: LD_INT 0
57326: PPUSH
57327: PPUSH
57328: PPUSH
// for i in all_units do
57329: LD_ADDR_VAR 0 2
57333: PUSH
57334: LD_OWVAR 3
57338: PUSH
57339: FOR_IN
57340: IFFALSE 57418
// if IsSelected ( i ) then
57342: LD_VAR 0 2
57346: PPUSH
57347: CALL_OW 306
57351: IFFALSE 57416
// begin j := GetSide ( i ) ;
57353: LD_ADDR_VAR 0 3
57357: PUSH
57358: LD_VAR 0 2
57362: PPUSH
57363: CALL_OW 255
57367: ST_TO_ADDR
// if j = 8 then
57368: LD_VAR 0 3
57372: PUSH
57373: LD_INT 8
57375: EQUAL
57376: IFFALSE 57388
// j := 0 else
57378: LD_ADDR_VAR 0 3
57382: PUSH
57383: LD_INT 0
57385: ST_TO_ADDR
57386: GO 57402
// j := j + 1 ;
57388: LD_ADDR_VAR 0 3
57392: PUSH
57393: LD_VAR 0 3
57397: PUSH
57398: LD_INT 1
57400: PLUS
57401: ST_TO_ADDR
// SetSide ( i , j ) ;
57402: LD_VAR 0 2
57406: PPUSH
57407: LD_VAR 0 3
57411: PPUSH
57412: CALL_OW 235
// end ;
57416: GO 57339
57418: POP
57419: POP
// end ;
57420: LD_VAR 0 1
57424: RET
// export function hHackFog ; begin
57425: LD_INT 0
57427: PPUSH
// FogOff ( true ) ;
57428: LD_INT 1
57430: PPUSH
57431: CALL_OW 344
// end ;
57435: LD_VAR 0 1
57439: RET
// export function hHackTeleport ( unit , x , y ) ; begin
57440: LD_INT 0
57442: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
57443: LD_VAR 0 1
57447: PPUSH
57448: LD_VAR 0 2
57452: PPUSH
57453: LD_VAR 0 3
57457: PPUSH
57458: LD_INT 1
57460: PPUSH
57461: LD_INT 1
57463: PPUSH
57464: CALL_OW 483
// CenterOnXY ( x , y ) ;
57468: LD_VAR 0 2
57472: PPUSH
57473: LD_VAR 0 3
57477: PPUSH
57478: CALL_OW 84
// end ; end_of_file
57482: LD_VAR 0 4
57486: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
57487: LD_VAR 0 1
57491: PUSH
57492: LD_INT 200
57494: DOUBLE
57495: GREATEREQUAL
57496: IFFALSE 57504
57498: LD_INT 299
57500: DOUBLE
57501: LESSEQUAL
57502: IFTRUE 57506
57504: GO 57538
57506: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
57507: LD_VAR 0 1
57511: PPUSH
57512: LD_VAR 0 2
57516: PPUSH
57517: LD_VAR 0 3
57521: PPUSH
57522: LD_VAR 0 4
57526: PPUSH
57527: LD_VAR 0 5
57531: PPUSH
57532: CALL 57782 0 5
57536: GO 57615
57538: LD_INT 300
57540: DOUBLE
57541: GREATEREQUAL
57542: IFFALSE 57550
57544: LD_INT 399
57546: DOUBLE
57547: LESSEQUAL
57548: IFTRUE 57552
57550: GO 57614
57552: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
57553: LD_VAR 0 1
57557: PPUSH
57558: LD_VAR 0 2
57562: PPUSH
57563: LD_VAR 0 3
57567: PPUSH
57568: LD_VAR 0 4
57572: PPUSH
57573: LD_VAR 0 5
57577: PPUSH
57578: LD_VAR 0 6
57582: PPUSH
57583: LD_VAR 0 7
57587: PPUSH
57588: LD_VAR 0 8
57592: PPUSH
57593: LD_VAR 0 9
57597: PPUSH
57598: LD_VAR 0 10
57602: PPUSH
57603: LD_VAR 0 11
57607: PPUSH
57608: CALL 55507 0 11
57612: GO 57615
57614: POP
// end ;
57615: PPOPN 11
57617: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
57618: LD_VAR 0 1
57622: PPUSH
57623: LD_VAR 0 2
57627: PPUSH
57628: LD_VAR 0 3
57632: PPUSH
57633: LD_VAR 0 4
57637: PPUSH
57638: LD_VAR 0 5
57642: PPUSH
57643: CALL 57764 0 5
// end ; end_of_file
57647: PPOPN 5
57649: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
57650: LD_INT 0
57652: PPUSH
57653: PPUSH
57654: PPUSH
57655: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
57656: LD_VAR 0 1
57660: PPUSH
57661: CALL_OW 264
57665: PUSH
57666: LD_EXP 28
57670: EQUAL
57671: IFFALSE 57743
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
57673: LD_INT 68
57675: PPUSH
57676: LD_VAR 0 1
57680: PPUSH
57681: CALL_OW 255
57685: PPUSH
57686: CALL_OW 321
57690: PUSH
57691: LD_INT 2
57693: EQUAL
57694: IFFALSE 57706
// eff := 70 else
57696: LD_ADDR_VAR 0 4
57700: PUSH
57701: LD_INT 70
57703: ST_TO_ADDR
57704: GO 57714
// eff := 30 ;
57706: LD_ADDR_VAR 0 4
57710: PUSH
57711: LD_INT 30
57713: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
57714: LD_VAR 0 1
57718: PPUSH
57719: CALL_OW 250
57723: PPUSH
57724: LD_VAR 0 1
57728: PPUSH
57729: CALL_OW 251
57733: PPUSH
57734: LD_VAR 0 4
57738: PPUSH
57739: CALL_OW 495
// end ; end ;
57743: LD_VAR 0 2
57747: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
57748: LD_INT 0
57750: PPUSH
// end ;
57751: LD_VAR 0 4
57755: RET
// export function SOS_Command ( cmd ) ; begin
57756: LD_INT 0
57758: PPUSH
// end ;
57759: LD_VAR 0 2
57763: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
57764: LD_INT 0
57766: PPUSH
// if cmd = 121 then
57767: LD_VAR 0 1
57771: PUSH
57772: LD_INT 121
57774: EQUAL
57775: IFFALSE 57777
// end ;
57777: LD_VAR 0 6
57781: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
57782: LD_INT 0
57784: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
57785: LD_VAR 0 1
57789: PUSH
57790: LD_INT 250
57792: EQUAL
57793: PUSH
57794: LD_VAR 0 2
57798: PPUSH
57799: CALL_OW 264
57803: PUSH
57804: LD_EXP 31
57808: EQUAL
57809: AND
57810: IFFALSE 57831
// MinerPlaceMine ( unit , x , y ) ;
57812: LD_VAR 0 2
57816: PPUSH
57817: LD_VAR 0 4
57821: PPUSH
57822: LD_VAR 0 5
57826: PPUSH
57827: CALL 60180 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
57831: LD_VAR 0 1
57835: PUSH
57836: LD_INT 251
57838: EQUAL
57839: PUSH
57840: LD_VAR 0 2
57844: PPUSH
57845: CALL_OW 264
57849: PUSH
57850: LD_EXP 31
57854: EQUAL
57855: AND
57856: IFFALSE 57877
// MinerDetonateMine ( unit , x , y ) ;
57858: LD_VAR 0 2
57862: PPUSH
57863: LD_VAR 0 4
57867: PPUSH
57868: LD_VAR 0 5
57872: PPUSH
57873: CALL 60457 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
57877: LD_VAR 0 1
57881: PUSH
57882: LD_INT 252
57884: EQUAL
57885: PUSH
57886: LD_VAR 0 2
57890: PPUSH
57891: CALL_OW 264
57895: PUSH
57896: LD_EXP 31
57900: EQUAL
57901: AND
57902: IFFALSE 57923
// MinerCreateMinefield ( unit , x , y ) ;
57904: LD_VAR 0 2
57908: PPUSH
57909: LD_VAR 0 4
57913: PPUSH
57914: LD_VAR 0 5
57918: PPUSH
57919: CALL 60874 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
57923: LD_VAR 0 1
57927: PUSH
57928: LD_INT 253
57930: EQUAL
57931: PUSH
57932: LD_VAR 0 2
57936: PPUSH
57937: CALL_OW 257
57941: PUSH
57942: LD_INT 5
57944: EQUAL
57945: AND
57946: IFFALSE 57967
// ComBinocular ( unit , x , y ) ;
57948: LD_VAR 0 2
57952: PPUSH
57953: LD_VAR 0 4
57957: PPUSH
57958: LD_VAR 0 5
57962: PPUSH
57963: CALL 61245 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57967: LD_VAR 0 1
57971: PUSH
57972: LD_INT 254
57974: EQUAL
57975: PUSH
57976: LD_VAR 0 2
57980: PPUSH
57981: CALL_OW 264
57985: PUSH
57986: LD_EXP 26
57990: EQUAL
57991: AND
57992: PUSH
57993: LD_VAR 0 3
57997: PPUSH
57998: CALL_OW 263
58002: PUSH
58003: LD_INT 3
58005: EQUAL
58006: AND
58007: IFFALSE 58023
// HackDestroyVehicle ( unit , selectedUnit ) ;
58009: LD_VAR 0 2
58013: PPUSH
58014: LD_VAR 0 3
58018: PPUSH
58019: CALL 59540 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
58023: LD_VAR 0 1
58027: PUSH
58028: LD_INT 255
58030: EQUAL
58031: PUSH
58032: LD_VAR 0 2
58036: PPUSH
58037: CALL_OW 264
58041: PUSH
58042: LD_INT 14
58044: PUSH
58045: LD_INT 53
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: IN
58052: AND
58053: PUSH
58054: LD_VAR 0 4
58058: PPUSH
58059: LD_VAR 0 5
58063: PPUSH
58064: CALL_OW 488
58068: AND
58069: IFFALSE 58093
// CutTreeXYR ( unit , x , y , 12 ) ;
58071: LD_VAR 0 2
58075: PPUSH
58076: LD_VAR 0 4
58080: PPUSH
58081: LD_VAR 0 5
58085: PPUSH
58086: LD_INT 12
58088: PPUSH
58089: CALL 58106 0 4
// end ;
58093: LD_VAR 0 6
58097: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
58098: LD_INT 0
58100: PPUSH
// end ;
58101: LD_VAR 0 4
58105: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
58106: LD_INT 0
58108: PPUSH
58109: PPUSH
58110: PPUSH
58111: PPUSH
58112: PPUSH
58113: PPUSH
58114: PPUSH
58115: PPUSH
58116: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
58117: LD_VAR 0 1
58121: NOT
58122: PUSH
58123: LD_VAR 0 2
58127: PPUSH
58128: LD_VAR 0 3
58132: PPUSH
58133: CALL_OW 488
58137: NOT
58138: OR
58139: PUSH
58140: LD_VAR 0 4
58144: NOT
58145: OR
58146: IFFALSE 58150
// exit ;
58148: GO 58490
// list := [ ] ;
58150: LD_ADDR_VAR 0 13
58154: PUSH
58155: EMPTY
58156: ST_TO_ADDR
// if x - r < 0 then
58157: LD_VAR 0 2
58161: PUSH
58162: LD_VAR 0 4
58166: MINUS
58167: PUSH
58168: LD_INT 0
58170: LESS
58171: IFFALSE 58183
// min_x := 0 else
58173: LD_ADDR_VAR 0 7
58177: PUSH
58178: LD_INT 0
58180: ST_TO_ADDR
58181: GO 58199
// min_x := x - r ;
58183: LD_ADDR_VAR 0 7
58187: PUSH
58188: LD_VAR 0 2
58192: PUSH
58193: LD_VAR 0 4
58197: MINUS
58198: ST_TO_ADDR
// if y - r < 0 then
58199: LD_VAR 0 3
58203: PUSH
58204: LD_VAR 0 4
58208: MINUS
58209: PUSH
58210: LD_INT 0
58212: LESS
58213: IFFALSE 58225
// min_y := 0 else
58215: LD_ADDR_VAR 0 8
58219: PUSH
58220: LD_INT 0
58222: ST_TO_ADDR
58223: GO 58241
// min_y := y - r ;
58225: LD_ADDR_VAR 0 8
58229: PUSH
58230: LD_VAR 0 3
58234: PUSH
58235: LD_VAR 0 4
58239: MINUS
58240: ST_TO_ADDR
// max_x := x + r ;
58241: LD_ADDR_VAR 0 9
58245: PUSH
58246: LD_VAR 0 2
58250: PUSH
58251: LD_VAR 0 4
58255: PLUS
58256: ST_TO_ADDR
// max_y := y + r ;
58257: LD_ADDR_VAR 0 10
58261: PUSH
58262: LD_VAR 0 3
58266: PUSH
58267: LD_VAR 0 4
58271: PLUS
58272: ST_TO_ADDR
// for _x = min_x to max_x do
58273: LD_ADDR_VAR 0 11
58277: PUSH
58278: DOUBLE
58279: LD_VAR 0 7
58283: DEC
58284: ST_TO_ADDR
58285: LD_VAR 0 9
58289: PUSH
58290: FOR_TO
58291: IFFALSE 58408
// for _y = min_y to max_y do
58293: LD_ADDR_VAR 0 12
58297: PUSH
58298: DOUBLE
58299: LD_VAR 0 8
58303: DEC
58304: ST_TO_ADDR
58305: LD_VAR 0 10
58309: PUSH
58310: FOR_TO
58311: IFFALSE 58404
// begin if not ValidHex ( _x , _y ) then
58313: LD_VAR 0 11
58317: PPUSH
58318: LD_VAR 0 12
58322: PPUSH
58323: CALL_OW 488
58327: NOT
58328: IFFALSE 58332
// continue ;
58330: GO 58310
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58332: LD_VAR 0 11
58336: PPUSH
58337: LD_VAR 0 12
58341: PPUSH
58342: CALL_OW 351
58346: PUSH
58347: LD_VAR 0 11
58351: PPUSH
58352: LD_VAR 0 12
58356: PPUSH
58357: CALL_OW 554
58361: AND
58362: IFFALSE 58402
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58364: LD_ADDR_VAR 0 13
58368: PUSH
58369: LD_VAR 0 13
58373: PPUSH
58374: LD_VAR 0 13
58378: PUSH
58379: LD_INT 1
58381: PLUS
58382: PPUSH
58383: LD_VAR 0 11
58387: PUSH
58388: LD_VAR 0 12
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PPUSH
58397: CALL_OW 2
58401: ST_TO_ADDR
// end ;
58402: GO 58310
58404: POP
58405: POP
58406: GO 58290
58408: POP
58409: POP
// if not list then
58410: LD_VAR 0 13
58414: NOT
58415: IFFALSE 58419
// exit ;
58417: GO 58490
// for i in list do
58419: LD_ADDR_VAR 0 6
58423: PUSH
58424: LD_VAR 0 13
58428: PUSH
58429: FOR_IN
58430: IFFALSE 58488
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
58432: LD_VAR 0 1
58436: PPUSH
58437: LD_STRING M
58439: PUSH
58440: LD_VAR 0 6
58444: PUSH
58445: LD_INT 1
58447: ARRAY
58448: PUSH
58449: LD_VAR 0 6
58453: PUSH
58454: LD_INT 2
58456: ARRAY
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: LD_INT 0
58463: PUSH
58464: LD_INT 0
58466: PUSH
58467: LD_INT 0
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: PUSH
58479: EMPTY
58480: LIST
58481: PPUSH
58482: CALL_OW 447
58486: GO 58429
58488: POP
58489: POP
// end ;
58490: LD_VAR 0 5
58494: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
58495: LD_EXP 100
58499: NOT
58500: IFFALSE 58550
58502: GO 58504
58504: DISABLE
// begin initHack := true ;
58505: LD_ADDR_EXP 100
58509: PUSH
58510: LD_INT 1
58512: ST_TO_ADDR
// hackTanks := [ ] ;
58513: LD_ADDR_EXP 101
58517: PUSH
58518: EMPTY
58519: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
58520: LD_ADDR_EXP 102
58524: PUSH
58525: EMPTY
58526: ST_TO_ADDR
// hackLimit := 3 ;
58527: LD_ADDR_EXP 103
58531: PUSH
58532: LD_INT 3
58534: ST_TO_ADDR
// hackDist := 12 ;
58535: LD_ADDR_EXP 104
58539: PUSH
58540: LD_INT 12
58542: ST_TO_ADDR
// hackCounter := [ ] ;
58543: LD_ADDR_EXP 105
58547: PUSH
58548: EMPTY
58549: ST_TO_ADDR
// end ;
58550: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
58551: LD_EXP 100
58555: PUSH
58556: LD_INT 34
58558: PUSH
58559: LD_EXP 26
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PPUSH
58568: CALL_OW 69
58572: AND
58573: IFFALSE 58828
58575: GO 58577
58577: DISABLE
58578: LD_INT 0
58580: PPUSH
58581: PPUSH
// begin enable ;
58582: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
58583: LD_ADDR_VAR 0 1
58587: PUSH
58588: LD_INT 34
58590: PUSH
58591: LD_EXP 26
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PPUSH
58600: CALL_OW 69
58604: PUSH
58605: FOR_IN
58606: IFFALSE 58826
// begin if not i in hackTanks then
58608: LD_VAR 0 1
58612: PUSH
58613: LD_EXP 101
58617: IN
58618: NOT
58619: IFFALSE 58702
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
58621: LD_ADDR_EXP 101
58625: PUSH
58626: LD_EXP 101
58630: PPUSH
58631: LD_EXP 101
58635: PUSH
58636: LD_INT 1
58638: PLUS
58639: PPUSH
58640: LD_VAR 0 1
58644: PPUSH
58645: CALL_OW 1
58649: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
58650: LD_ADDR_EXP 102
58654: PUSH
58655: LD_EXP 102
58659: PPUSH
58660: LD_EXP 102
58664: PUSH
58665: LD_INT 1
58667: PLUS
58668: PPUSH
58669: EMPTY
58670: PPUSH
58671: CALL_OW 1
58675: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
58676: LD_ADDR_EXP 105
58680: PUSH
58681: LD_EXP 105
58685: PPUSH
58686: LD_EXP 105
58690: PUSH
58691: LD_INT 1
58693: PLUS
58694: PPUSH
58695: EMPTY
58696: PPUSH
58697: CALL_OW 1
58701: ST_TO_ADDR
// end ; if not IsOk ( i ) then
58702: LD_VAR 0 1
58706: PPUSH
58707: CALL_OW 302
58711: NOT
58712: IFFALSE 58725
// begin HackUnlinkAll ( i ) ;
58714: LD_VAR 0 1
58718: PPUSH
58719: CALL 58831 0 1
// continue ;
58723: GO 58605
// end ; HackCheckCapturedStatus ( i ) ;
58725: LD_VAR 0 1
58729: PPUSH
58730: CALL 59274 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
58734: LD_ADDR_VAR 0 2
58738: PUSH
58739: LD_INT 81
58741: PUSH
58742: LD_VAR 0 1
58746: PPUSH
58747: CALL_OW 255
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 33
58758: PUSH
58759: LD_INT 3
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 91
58768: PUSH
58769: LD_VAR 0 1
58773: PUSH
58774: LD_EXP 104
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 50
58786: PUSH
58787: EMPTY
58788: LIST
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: PPUSH
58796: CALL_OW 69
58800: ST_TO_ADDR
// if not tmp then
58801: LD_VAR 0 2
58805: NOT
58806: IFFALSE 58810
// continue ;
58808: GO 58605
// HackLink ( i , tmp ) ;
58810: LD_VAR 0 1
58814: PPUSH
58815: LD_VAR 0 2
58819: PPUSH
58820: CALL 58967 0 2
// end ;
58824: GO 58605
58826: POP
58827: POP
// end ;
58828: PPOPN 2
58830: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
58831: LD_INT 0
58833: PPUSH
58834: PPUSH
58835: PPUSH
// if not hack in hackTanks then
58836: LD_VAR 0 1
58840: PUSH
58841: LD_EXP 101
58845: IN
58846: NOT
58847: IFFALSE 58851
// exit ;
58849: GO 58962
// index := GetElementIndex ( hackTanks , hack ) ;
58851: LD_ADDR_VAR 0 4
58855: PUSH
58856: LD_EXP 101
58860: PPUSH
58861: LD_VAR 0 1
58865: PPUSH
58866: CALL 10850 0 2
58870: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
58871: LD_EXP 102
58875: PUSH
58876: LD_VAR 0 4
58880: ARRAY
58881: IFFALSE 58962
// begin for i in hackTanksCaptured [ index ] do
58883: LD_ADDR_VAR 0 3
58887: PUSH
58888: LD_EXP 102
58892: PUSH
58893: LD_VAR 0 4
58897: ARRAY
58898: PUSH
58899: FOR_IN
58900: IFFALSE 58926
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58902: LD_VAR 0 3
58906: PUSH
58907: LD_INT 1
58909: ARRAY
58910: PPUSH
58911: LD_VAR 0 3
58915: PUSH
58916: LD_INT 2
58918: ARRAY
58919: PPUSH
58920: CALL_OW 235
58924: GO 58899
58926: POP
58927: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58928: LD_ADDR_EXP 102
58932: PUSH
58933: LD_EXP 102
58937: PPUSH
58938: LD_VAR 0 4
58942: PPUSH
58943: EMPTY
58944: PPUSH
58945: CALL_OW 1
58949: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58950: LD_VAR 0 1
58954: PPUSH
58955: LD_INT 0
58957: PPUSH
58958: CALL_OW 505
// end ; end ;
58962: LD_VAR 0 2
58966: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58967: LD_INT 0
58969: PPUSH
58970: PPUSH
58971: PPUSH
// if not hack in hackTanks or not vehicles then
58972: LD_VAR 0 1
58976: PUSH
58977: LD_EXP 101
58981: IN
58982: NOT
58983: PUSH
58984: LD_VAR 0 2
58988: NOT
58989: OR
58990: IFFALSE 58994
// exit ;
58992: GO 59269
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
58994: LD_ADDR_VAR 0 2
58998: PUSH
58999: LD_VAR 0 1
59003: PPUSH
59004: LD_VAR 0 2
59008: PPUSH
59009: LD_INT 1
59011: PPUSH
59012: LD_INT 1
59014: PPUSH
59015: CALL 11500 0 4
59019: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
59020: LD_ADDR_VAR 0 5
59024: PUSH
59025: LD_EXP 101
59029: PPUSH
59030: LD_VAR 0 1
59034: PPUSH
59035: CALL 10850 0 2
59039: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
59040: LD_EXP 102
59044: PUSH
59045: LD_VAR 0 5
59049: ARRAY
59050: PUSH
59051: LD_EXP 103
59055: LESS
59056: IFFALSE 59245
// begin for i := 1 to vehicles do
59058: LD_ADDR_VAR 0 4
59062: PUSH
59063: DOUBLE
59064: LD_INT 1
59066: DEC
59067: ST_TO_ADDR
59068: LD_VAR 0 2
59072: PUSH
59073: FOR_TO
59074: IFFALSE 59243
// begin if hackTanksCaptured [ index ] = hackLimit then
59076: LD_EXP 102
59080: PUSH
59081: LD_VAR 0 5
59085: ARRAY
59086: PUSH
59087: LD_EXP 103
59091: EQUAL
59092: IFFALSE 59096
// break ;
59094: GO 59243
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
59096: LD_ADDR_EXP 105
59100: PUSH
59101: LD_EXP 105
59105: PPUSH
59106: LD_VAR 0 5
59110: PPUSH
59111: LD_EXP 105
59115: PUSH
59116: LD_VAR 0 5
59120: ARRAY
59121: PUSH
59122: LD_INT 1
59124: PLUS
59125: PPUSH
59126: CALL_OW 1
59130: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
59131: LD_ADDR_EXP 102
59135: PUSH
59136: LD_EXP 102
59140: PPUSH
59141: LD_VAR 0 5
59145: PUSH
59146: LD_EXP 102
59150: PUSH
59151: LD_VAR 0 5
59155: ARRAY
59156: PUSH
59157: LD_INT 1
59159: PLUS
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PPUSH
59165: LD_VAR 0 2
59169: PUSH
59170: LD_VAR 0 4
59174: ARRAY
59175: PUSH
59176: LD_VAR 0 2
59180: PUSH
59181: LD_VAR 0 4
59185: ARRAY
59186: PPUSH
59187: CALL_OW 255
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PPUSH
59196: CALL 11065 0 3
59200: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
59201: LD_VAR 0 2
59205: PUSH
59206: LD_VAR 0 4
59210: ARRAY
59211: PPUSH
59212: LD_VAR 0 1
59216: PPUSH
59217: CALL_OW 255
59221: PPUSH
59222: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
59226: LD_VAR 0 2
59230: PUSH
59231: LD_VAR 0 4
59235: ARRAY
59236: PPUSH
59237: CALL_OW 141
// end ;
59241: GO 59073
59243: POP
59244: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59245: LD_VAR 0 1
59249: PPUSH
59250: LD_EXP 102
59254: PUSH
59255: LD_VAR 0 5
59259: ARRAY
59260: PUSH
59261: LD_INT 0
59263: PLUS
59264: PPUSH
59265: CALL_OW 505
// end ;
59269: LD_VAR 0 3
59273: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
59274: LD_INT 0
59276: PPUSH
59277: PPUSH
59278: PPUSH
59279: PPUSH
// if not hack in hackTanks then
59280: LD_VAR 0 1
59284: PUSH
59285: LD_EXP 101
59289: IN
59290: NOT
59291: IFFALSE 59295
// exit ;
59293: GO 59535
// index := GetElementIndex ( hackTanks , hack ) ;
59295: LD_ADDR_VAR 0 4
59299: PUSH
59300: LD_EXP 101
59304: PPUSH
59305: LD_VAR 0 1
59309: PPUSH
59310: CALL 10850 0 2
59314: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
59315: LD_ADDR_VAR 0 3
59319: PUSH
59320: DOUBLE
59321: LD_EXP 102
59325: PUSH
59326: LD_VAR 0 4
59330: ARRAY
59331: INC
59332: ST_TO_ADDR
59333: LD_INT 1
59335: PUSH
59336: FOR_DOWNTO
59337: IFFALSE 59509
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
59339: LD_ADDR_VAR 0 5
59343: PUSH
59344: LD_EXP 102
59348: PUSH
59349: LD_VAR 0 4
59353: ARRAY
59354: PUSH
59355: LD_VAR 0 3
59359: ARRAY
59360: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
59361: LD_VAR 0 5
59365: PUSH
59366: LD_INT 1
59368: ARRAY
59369: PPUSH
59370: CALL_OW 302
59374: NOT
59375: PUSH
59376: LD_VAR 0 5
59380: PUSH
59381: LD_INT 1
59383: ARRAY
59384: PPUSH
59385: CALL_OW 255
59389: PUSH
59390: LD_VAR 0 1
59394: PPUSH
59395: CALL_OW 255
59399: NONEQUAL
59400: OR
59401: IFFALSE 59507
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
59403: LD_VAR 0 5
59407: PUSH
59408: LD_INT 1
59410: ARRAY
59411: PPUSH
59412: CALL_OW 305
59416: PUSH
59417: LD_VAR 0 5
59421: PUSH
59422: LD_INT 1
59424: ARRAY
59425: PPUSH
59426: CALL_OW 255
59430: PUSH
59431: LD_VAR 0 1
59435: PPUSH
59436: CALL_OW 255
59440: EQUAL
59441: AND
59442: IFFALSE 59466
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
59444: LD_VAR 0 5
59448: PUSH
59449: LD_INT 1
59451: ARRAY
59452: PPUSH
59453: LD_VAR 0 5
59457: PUSH
59458: LD_INT 2
59460: ARRAY
59461: PPUSH
59462: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
59466: LD_ADDR_EXP 102
59470: PUSH
59471: LD_EXP 102
59475: PPUSH
59476: LD_VAR 0 4
59480: PPUSH
59481: LD_EXP 102
59485: PUSH
59486: LD_VAR 0 4
59490: ARRAY
59491: PPUSH
59492: LD_VAR 0 3
59496: PPUSH
59497: CALL_OW 3
59501: PPUSH
59502: CALL_OW 1
59506: ST_TO_ADDR
// end ; end ;
59507: GO 59336
59509: POP
59510: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59511: LD_VAR 0 1
59515: PPUSH
59516: LD_EXP 102
59520: PUSH
59521: LD_VAR 0 4
59525: ARRAY
59526: PUSH
59527: LD_INT 0
59529: PLUS
59530: PPUSH
59531: CALL_OW 505
// end ;
59535: LD_VAR 0 2
59539: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
59540: LD_INT 0
59542: PPUSH
59543: PPUSH
59544: PPUSH
59545: PPUSH
// if not hack in hackTanks then
59546: LD_VAR 0 1
59550: PUSH
59551: LD_EXP 101
59555: IN
59556: NOT
59557: IFFALSE 59561
// exit ;
59559: GO 59646
// index := GetElementIndex ( hackTanks , hack ) ;
59561: LD_ADDR_VAR 0 5
59565: PUSH
59566: LD_EXP 101
59570: PPUSH
59571: LD_VAR 0 1
59575: PPUSH
59576: CALL 10850 0 2
59580: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
59581: LD_ADDR_VAR 0 4
59585: PUSH
59586: DOUBLE
59587: LD_INT 1
59589: DEC
59590: ST_TO_ADDR
59591: LD_EXP 102
59595: PUSH
59596: LD_VAR 0 5
59600: ARRAY
59601: PUSH
59602: FOR_TO
59603: IFFALSE 59644
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
59605: LD_EXP 102
59609: PUSH
59610: LD_VAR 0 5
59614: ARRAY
59615: PUSH
59616: LD_VAR 0 4
59620: ARRAY
59621: PUSH
59622: LD_INT 1
59624: ARRAY
59625: PUSH
59626: LD_VAR 0 2
59630: EQUAL
59631: IFFALSE 59642
// KillUnit ( vehicle ) ;
59633: LD_VAR 0 2
59637: PPUSH
59638: CALL_OW 66
59642: GO 59602
59644: POP
59645: POP
// end ;
59646: LD_VAR 0 3
59650: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
59651: LD_EXP 106
59655: NOT
59656: IFFALSE 59691
59658: GO 59660
59660: DISABLE
// begin initMiner := true ;
59661: LD_ADDR_EXP 106
59665: PUSH
59666: LD_INT 1
59668: ST_TO_ADDR
// minersList := [ ] ;
59669: LD_ADDR_EXP 107
59673: PUSH
59674: EMPTY
59675: ST_TO_ADDR
// minerMinesList := [ ] ;
59676: LD_ADDR_EXP 108
59680: PUSH
59681: EMPTY
59682: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
59683: LD_ADDR_EXP 109
59687: PUSH
59688: LD_INT 5
59690: ST_TO_ADDR
// end ;
59691: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
59692: LD_EXP 106
59696: PUSH
59697: LD_INT 34
59699: PUSH
59700: LD_EXP 31
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PPUSH
59709: CALL_OW 69
59713: AND
59714: IFFALSE 60177
59716: GO 59718
59718: DISABLE
59719: LD_INT 0
59721: PPUSH
59722: PPUSH
59723: PPUSH
59724: PPUSH
// begin enable ;
59725: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
59726: LD_ADDR_VAR 0 1
59730: PUSH
59731: LD_INT 34
59733: PUSH
59734: LD_EXP 31
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PPUSH
59743: CALL_OW 69
59747: PUSH
59748: FOR_IN
59749: IFFALSE 59821
// begin if not i in minersList then
59751: LD_VAR 0 1
59755: PUSH
59756: LD_EXP 107
59760: IN
59761: NOT
59762: IFFALSE 59819
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
59764: LD_ADDR_EXP 107
59768: PUSH
59769: LD_EXP 107
59773: PPUSH
59774: LD_EXP 107
59778: PUSH
59779: LD_INT 1
59781: PLUS
59782: PPUSH
59783: LD_VAR 0 1
59787: PPUSH
59788: CALL_OW 1
59792: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59793: LD_ADDR_EXP 108
59797: PUSH
59798: LD_EXP 108
59802: PPUSH
59803: LD_EXP 108
59807: PUSH
59808: LD_INT 1
59810: PLUS
59811: PPUSH
59812: EMPTY
59813: PPUSH
59814: CALL_OW 1
59818: ST_TO_ADDR
// end end ;
59819: GO 59748
59821: POP
59822: POP
// for i := minerMinesList downto 1 do
59823: LD_ADDR_VAR 0 1
59827: PUSH
59828: DOUBLE
59829: LD_EXP 108
59833: INC
59834: ST_TO_ADDR
59835: LD_INT 1
59837: PUSH
59838: FOR_DOWNTO
59839: IFFALSE 60175
// begin if IsLive ( minersList [ i ] ) then
59841: LD_EXP 107
59845: PUSH
59846: LD_VAR 0 1
59850: ARRAY
59851: PPUSH
59852: CALL_OW 300
59856: IFFALSE 59884
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
59858: LD_EXP 107
59862: PUSH
59863: LD_VAR 0 1
59867: ARRAY
59868: PPUSH
59869: LD_EXP 108
59873: PUSH
59874: LD_VAR 0 1
59878: ARRAY
59879: PPUSH
59880: CALL_OW 505
// if not minerMinesList [ i ] then
59884: LD_EXP 108
59888: PUSH
59889: LD_VAR 0 1
59893: ARRAY
59894: NOT
59895: IFFALSE 59899
// continue ;
59897: GO 59838
// for j := minerMinesList [ i ] downto 1 do
59899: LD_ADDR_VAR 0 2
59903: PUSH
59904: DOUBLE
59905: LD_EXP 108
59909: PUSH
59910: LD_VAR 0 1
59914: ARRAY
59915: INC
59916: ST_TO_ADDR
59917: LD_INT 1
59919: PUSH
59920: FOR_DOWNTO
59921: IFFALSE 60171
// begin side := GetSide ( minersList [ i ] ) ;
59923: LD_ADDR_VAR 0 3
59927: PUSH
59928: LD_EXP 107
59932: PUSH
59933: LD_VAR 0 1
59937: ARRAY
59938: PPUSH
59939: CALL_OW 255
59943: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59944: LD_ADDR_VAR 0 4
59948: PUSH
59949: LD_EXP 108
59953: PUSH
59954: LD_VAR 0 1
59958: ARRAY
59959: PUSH
59960: LD_VAR 0 2
59964: ARRAY
59965: PUSH
59966: LD_INT 1
59968: ARRAY
59969: PPUSH
59970: LD_EXP 108
59974: PUSH
59975: LD_VAR 0 1
59979: ARRAY
59980: PUSH
59981: LD_VAR 0 2
59985: ARRAY
59986: PUSH
59987: LD_INT 2
59989: ARRAY
59990: PPUSH
59991: CALL_OW 428
59995: ST_TO_ADDR
// if not tmp then
59996: LD_VAR 0 4
60000: NOT
60001: IFFALSE 60005
// continue ;
60003: GO 59920
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
60005: LD_VAR 0 4
60009: PUSH
60010: LD_INT 81
60012: PUSH
60013: LD_VAR 0 3
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PPUSH
60022: CALL_OW 69
60026: IN
60027: PUSH
60028: LD_EXP 108
60032: PUSH
60033: LD_VAR 0 1
60037: ARRAY
60038: PUSH
60039: LD_VAR 0 2
60043: ARRAY
60044: PUSH
60045: LD_INT 1
60047: ARRAY
60048: PPUSH
60049: LD_EXP 108
60053: PUSH
60054: LD_VAR 0 1
60058: ARRAY
60059: PUSH
60060: LD_VAR 0 2
60064: ARRAY
60065: PUSH
60066: LD_INT 2
60068: ARRAY
60069: PPUSH
60070: CALL_OW 458
60074: AND
60075: IFFALSE 60169
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
60077: LD_EXP 108
60081: PUSH
60082: LD_VAR 0 1
60086: ARRAY
60087: PUSH
60088: LD_VAR 0 2
60092: ARRAY
60093: PUSH
60094: LD_INT 1
60096: ARRAY
60097: PPUSH
60098: LD_EXP 108
60102: PUSH
60103: LD_VAR 0 1
60107: ARRAY
60108: PUSH
60109: LD_VAR 0 2
60113: ARRAY
60114: PUSH
60115: LD_INT 2
60117: ARRAY
60118: PPUSH
60119: LD_VAR 0 3
60123: PPUSH
60124: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60128: LD_ADDR_EXP 108
60132: PUSH
60133: LD_EXP 108
60137: PPUSH
60138: LD_VAR 0 1
60142: PPUSH
60143: LD_EXP 108
60147: PUSH
60148: LD_VAR 0 1
60152: ARRAY
60153: PPUSH
60154: LD_VAR 0 2
60158: PPUSH
60159: CALL_OW 3
60163: PPUSH
60164: CALL_OW 1
60168: ST_TO_ADDR
// end ; end ;
60169: GO 59920
60171: POP
60172: POP
// end ;
60173: GO 59838
60175: POP
60176: POP
// end ;
60177: PPOPN 4
60179: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
60180: LD_INT 0
60182: PPUSH
60183: PPUSH
// result := false ;
60184: LD_ADDR_VAR 0 4
60188: PUSH
60189: LD_INT 0
60191: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
60192: LD_VAR 0 1
60196: PPUSH
60197: CALL_OW 264
60201: PUSH
60202: LD_EXP 31
60206: EQUAL
60207: NOT
60208: IFFALSE 60212
// exit ;
60210: GO 60452
// index := GetElementIndex ( minersList , unit ) ;
60212: LD_ADDR_VAR 0 5
60216: PUSH
60217: LD_EXP 107
60221: PPUSH
60222: LD_VAR 0 1
60226: PPUSH
60227: CALL 10850 0 2
60231: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
60232: LD_EXP 108
60236: PUSH
60237: LD_VAR 0 5
60241: ARRAY
60242: PUSH
60243: LD_EXP 109
60247: GREATEREQUAL
60248: IFFALSE 60252
// exit ;
60250: GO 60452
// ComMoveXY ( unit , x , y ) ;
60252: LD_VAR 0 1
60256: PPUSH
60257: LD_VAR 0 2
60261: PPUSH
60262: LD_VAR 0 3
60266: PPUSH
60267: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60271: LD_INT 35
60273: PPUSH
60274: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
60278: LD_VAR 0 1
60282: PPUSH
60283: LD_VAR 0 2
60287: PPUSH
60288: LD_VAR 0 3
60292: PPUSH
60293: CALL 41217 0 3
60297: NOT
60298: PUSH
60299: LD_VAR 0 1
60303: PPUSH
60304: CALL_OW 314
60308: AND
60309: IFFALSE 60313
// exit ;
60311: GO 60452
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
60313: LD_VAR 0 2
60317: PPUSH
60318: LD_VAR 0 3
60322: PPUSH
60323: CALL_OW 428
60327: PUSH
60328: LD_VAR 0 1
60332: EQUAL
60333: PUSH
60334: LD_VAR 0 1
60338: PPUSH
60339: CALL_OW 314
60343: NOT
60344: AND
60345: IFFALSE 60271
// PlaySoundXY ( x , y , PlantMine ) ;
60347: LD_VAR 0 2
60351: PPUSH
60352: LD_VAR 0 3
60356: PPUSH
60357: LD_STRING PlantMine
60359: PPUSH
60360: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
60364: LD_VAR 0 2
60368: PPUSH
60369: LD_VAR 0 3
60373: PPUSH
60374: LD_VAR 0 1
60378: PPUSH
60379: CALL_OW 255
60383: PPUSH
60384: LD_INT 0
60386: PPUSH
60387: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
60391: LD_ADDR_EXP 108
60395: PUSH
60396: LD_EXP 108
60400: PPUSH
60401: LD_VAR 0 5
60405: PUSH
60406: LD_EXP 108
60410: PUSH
60411: LD_VAR 0 5
60415: ARRAY
60416: PUSH
60417: LD_INT 1
60419: PLUS
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PPUSH
60425: LD_VAR 0 2
60429: PUSH
60430: LD_VAR 0 3
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PPUSH
60439: CALL 11065 0 3
60443: ST_TO_ADDR
// result := true ;
60444: LD_ADDR_VAR 0 4
60448: PUSH
60449: LD_INT 1
60451: ST_TO_ADDR
// end ;
60452: LD_VAR 0 4
60456: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
60457: LD_INT 0
60459: PPUSH
60460: PPUSH
60461: PPUSH
// if not unit in minersList then
60462: LD_VAR 0 1
60466: PUSH
60467: LD_EXP 107
60471: IN
60472: NOT
60473: IFFALSE 60477
// exit ;
60475: GO 60869
// index := GetElementIndex ( minersList , unit ) ;
60477: LD_ADDR_VAR 0 6
60481: PUSH
60482: LD_EXP 107
60486: PPUSH
60487: LD_VAR 0 1
60491: PPUSH
60492: CALL 10850 0 2
60496: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
60497: LD_ADDR_VAR 0 5
60501: PUSH
60502: DOUBLE
60503: LD_EXP 108
60507: PUSH
60508: LD_VAR 0 6
60512: ARRAY
60513: INC
60514: ST_TO_ADDR
60515: LD_INT 1
60517: PUSH
60518: FOR_DOWNTO
60519: IFFALSE 60680
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
60521: LD_EXP 108
60525: PUSH
60526: LD_VAR 0 6
60530: ARRAY
60531: PUSH
60532: LD_VAR 0 5
60536: ARRAY
60537: PUSH
60538: LD_INT 1
60540: ARRAY
60541: PUSH
60542: LD_VAR 0 2
60546: EQUAL
60547: PUSH
60548: LD_EXP 108
60552: PUSH
60553: LD_VAR 0 6
60557: ARRAY
60558: PUSH
60559: LD_VAR 0 5
60563: ARRAY
60564: PUSH
60565: LD_INT 2
60567: ARRAY
60568: PUSH
60569: LD_VAR 0 3
60573: EQUAL
60574: AND
60575: IFFALSE 60678
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60577: LD_EXP 108
60581: PUSH
60582: LD_VAR 0 6
60586: ARRAY
60587: PUSH
60588: LD_VAR 0 5
60592: ARRAY
60593: PUSH
60594: LD_INT 1
60596: ARRAY
60597: PPUSH
60598: LD_EXP 108
60602: PUSH
60603: LD_VAR 0 6
60607: ARRAY
60608: PUSH
60609: LD_VAR 0 5
60613: ARRAY
60614: PUSH
60615: LD_INT 2
60617: ARRAY
60618: PPUSH
60619: LD_VAR 0 1
60623: PPUSH
60624: CALL_OW 255
60628: PPUSH
60629: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60633: LD_ADDR_EXP 108
60637: PUSH
60638: LD_EXP 108
60642: PPUSH
60643: LD_VAR 0 6
60647: PPUSH
60648: LD_EXP 108
60652: PUSH
60653: LD_VAR 0 6
60657: ARRAY
60658: PPUSH
60659: LD_VAR 0 5
60663: PPUSH
60664: CALL_OW 3
60668: PPUSH
60669: CALL_OW 1
60673: ST_TO_ADDR
// exit ;
60674: POP
60675: POP
60676: GO 60869
// end ; end ;
60678: GO 60518
60680: POP
60681: POP
// for i := minerMinesList [ index ] downto 1 do
60682: LD_ADDR_VAR 0 5
60686: PUSH
60687: DOUBLE
60688: LD_EXP 108
60692: PUSH
60693: LD_VAR 0 6
60697: ARRAY
60698: INC
60699: ST_TO_ADDR
60700: LD_INT 1
60702: PUSH
60703: FOR_DOWNTO
60704: IFFALSE 60867
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
60706: LD_EXP 108
60710: PUSH
60711: LD_VAR 0 6
60715: ARRAY
60716: PUSH
60717: LD_VAR 0 5
60721: ARRAY
60722: PUSH
60723: LD_INT 1
60725: ARRAY
60726: PPUSH
60727: LD_EXP 108
60731: PUSH
60732: LD_VAR 0 6
60736: ARRAY
60737: PUSH
60738: LD_VAR 0 5
60742: ARRAY
60743: PUSH
60744: LD_INT 2
60746: ARRAY
60747: PPUSH
60748: LD_VAR 0 2
60752: PPUSH
60753: LD_VAR 0 3
60757: PPUSH
60758: CALL_OW 298
60762: PUSH
60763: LD_INT 6
60765: LESS
60766: IFFALSE 60865
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60768: LD_EXP 108
60772: PUSH
60773: LD_VAR 0 6
60777: ARRAY
60778: PUSH
60779: LD_VAR 0 5
60783: ARRAY
60784: PUSH
60785: LD_INT 1
60787: ARRAY
60788: PPUSH
60789: LD_EXP 108
60793: PUSH
60794: LD_VAR 0 6
60798: ARRAY
60799: PUSH
60800: LD_VAR 0 5
60804: ARRAY
60805: PUSH
60806: LD_INT 2
60808: ARRAY
60809: PPUSH
60810: LD_VAR 0 1
60814: PPUSH
60815: CALL_OW 255
60819: PPUSH
60820: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60824: LD_ADDR_EXP 108
60828: PUSH
60829: LD_EXP 108
60833: PPUSH
60834: LD_VAR 0 6
60838: PPUSH
60839: LD_EXP 108
60843: PUSH
60844: LD_VAR 0 6
60848: ARRAY
60849: PPUSH
60850: LD_VAR 0 5
60854: PPUSH
60855: CALL_OW 3
60859: PPUSH
60860: CALL_OW 1
60864: ST_TO_ADDR
// end ; end ;
60865: GO 60703
60867: POP
60868: POP
// end ;
60869: LD_VAR 0 4
60873: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60874: LD_INT 0
60876: PPUSH
60877: PPUSH
60878: PPUSH
60879: PPUSH
60880: PPUSH
60881: PPUSH
60882: PPUSH
60883: PPUSH
60884: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60885: LD_VAR 0 1
60889: PPUSH
60890: CALL_OW 264
60894: PUSH
60895: LD_EXP 31
60899: EQUAL
60900: NOT
60901: PUSH
60902: LD_VAR 0 1
60906: PUSH
60907: LD_EXP 107
60911: IN
60912: NOT
60913: OR
60914: IFFALSE 60918
// exit ;
60916: GO 61240
// index := GetElementIndex ( minersList , unit ) ;
60918: LD_ADDR_VAR 0 6
60922: PUSH
60923: LD_EXP 107
60927: PPUSH
60928: LD_VAR 0 1
60932: PPUSH
60933: CALL 10850 0 2
60937: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
60938: LD_ADDR_VAR 0 8
60942: PUSH
60943: LD_EXP 109
60947: PUSH
60948: LD_EXP 108
60952: PUSH
60953: LD_VAR 0 6
60957: ARRAY
60958: MINUS
60959: ST_TO_ADDR
// if not minesFreeAmount then
60960: LD_VAR 0 8
60964: NOT
60965: IFFALSE 60969
// exit ;
60967: GO 61240
// tmp := [ ] ;
60969: LD_ADDR_VAR 0 7
60973: PUSH
60974: EMPTY
60975: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
60976: LD_ADDR_VAR 0 5
60980: PUSH
60981: DOUBLE
60982: LD_INT 1
60984: DEC
60985: ST_TO_ADDR
60986: LD_VAR 0 8
60990: PUSH
60991: FOR_TO
60992: IFFALSE 61187
// begin _d := rand ( 0 , 5 ) ;
60994: LD_ADDR_VAR 0 11
60998: PUSH
60999: LD_INT 0
61001: PPUSH
61002: LD_INT 5
61004: PPUSH
61005: CALL_OW 12
61009: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
61010: LD_ADDR_VAR 0 12
61014: PUSH
61015: LD_INT 2
61017: PPUSH
61018: LD_INT 6
61020: PPUSH
61021: CALL_OW 12
61025: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
61026: LD_ADDR_VAR 0 9
61030: PUSH
61031: LD_VAR 0 2
61035: PPUSH
61036: LD_VAR 0 11
61040: PPUSH
61041: LD_VAR 0 12
61045: PPUSH
61046: CALL_OW 272
61050: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
61051: LD_ADDR_VAR 0 10
61055: PUSH
61056: LD_VAR 0 3
61060: PPUSH
61061: LD_VAR 0 11
61065: PPUSH
61066: LD_VAR 0 12
61070: PPUSH
61071: CALL_OW 273
61075: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
61076: LD_VAR 0 9
61080: PPUSH
61081: LD_VAR 0 10
61085: PPUSH
61086: CALL_OW 488
61090: PUSH
61091: LD_VAR 0 9
61095: PUSH
61096: LD_VAR 0 10
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_VAR 0 7
61109: IN
61110: NOT
61111: AND
61112: PUSH
61113: LD_VAR 0 9
61117: PPUSH
61118: LD_VAR 0 10
61122: PPUSH
61123: CALL_OW 458
61127: NOT
61128: AND
61129: IFFALSE 61171
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
61131: LD_ADDR_VAR 0 7
61135: PUSH
61136: LD_VAR 0 7
61140: PPUSH
61141: LD_VAR 0 7
61145: PUSH
61146: LD_INT 1
61148: PLUS
61149: PPUSH
61150: LD_VAR 0 9
61154: PUSH
61155: LD_VAR 0 10
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PPUSH
61164: CALL_OW 1
61168: ST_TO_ADDR
61169: GO 61185
// i := i - 1 ;
61171: LD_ADDR_VAR 0 5
61175: PUSH
61176: LD_VAR 0 5
61180: PUSH
61181: LD_INT 1
61183: MINUS
61184: ST_TO_ADDR
// end ;
61185: GO 60991
61187: POP
61188: POP
// for i in tmp do
61189: LD_ADDR_VAR 0 5
61193: PUSH
61194: LD_VAR 0 7
61198: PUSH
61199: FOR_IN
61200: IFFALSE 61238
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
61202: LD_VAR 0 1
61206: PPUSH
61207: LD_VAR 0 5
61211: PUSH
61212: LD_INT 1
61214: ARRAY
61215: PPUSH
61216: LD_VAR 0 5
61220: PUSH
61221: LD_INT 2
61223: ARRAY
61224: PPUSH
61225: CALL 60180 0 3
61229: NOT
61230: IFFALSE 61236
// exit ;
61232: POP
61233: POP
61234: GO 61240
61236: GO 61199
61238: POP
61239: POP
// end ;
61240: LD_VAR 0 4
61244: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
61245: LD_INT 0
61247: PPUSH
61248: PPUSH
61249: PPUSH
61250: PPUSH
61251: PPUSH
61252: PPUSH
61253: PPUSH
// if not GetClass ( unit ) = class_sniper then
61254: LD_VAR 0 1
61258: PPUSH
61259: CALL_OW 257
61263: PUSH
61264: LD_INT 5
61266: EQUAL
61267: NOT
61268: IFFALSE 61272
// exit ;
61270: GO 61660
// dist := 8 ;
61272: LD_ADDR_VAR 0 5
61276: PUSH
61277: LD_INT 8
61279: ST_TO_ADDR
// viewRange := 12 ;
61280: LD_ADDR_VAR 0 7
61284: PUSH
61285: LD_INT 12
61287: ST_TO_ADDR
// side := GetSide ( unit ) ;
61288: LD_ADDR_VAR 0 6
61292: PUSH
61293: LD_VAR 0 1
61297: PPUSH
61298: CALL_OW 255
61302: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
61303: LD_INT 61
61305: PPUSH
61306: LD_VAR 0 6
61310: PPUSH
61311: CALL_OW 321
61315: PUSH
61316: LD_INT 2
61318: EQUAL
61319: IFFALSE 61329
// viewRange := 16 ;
61321: LD_ADDR_VAR 0 7
61325: PUSH
61326: LD_INT 16
61328: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
61329: LD_VAR 0 1
61333: PPUSH
61334: LD_VAR 0 2
61338: PPUSH
61339: LD_VAR 0 3
61343: PPUSH
61344: CALL_OW 297
61348: PUSH
61349: LD_VAR 0 5
61353: GREATER
61354: IFFALSE 61433
// begin ComMoveXY ( unit , x , y ) ;
61356: LD_VAR 0 1
61360: PPUSH
61361: LD_VAR 0 2
61365: PPUSH
61366: LD_VAR 0 3
61370: PPUSH
61371: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61375: LD_INT 35
61377: PPUSH
61378: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
61382: LD_VAR 0 1
61386: PPUSH
61387: LD_VAR 0 2
61391: PPUSH
61392: LD_VAR 0 3
61396: PPUSH
61397: CALL 41217 0 3
61401: NOT
61402: IFFALSE 61406
// exit ;
61404: GO 61660
// until GetDistUnitXY ( unit , x , y ) < dist ;
61406: LD_VAR 0 1
61410: PPUSH
61411: LD_VAR 0 2
61415: PPUSH
61416: LD_VAR 0 3
61420: PPUSH
61421: CALL_OW 297
61425: PUSH
61426: LD_VAR 0 5
61430: LESS
61431: IFFALSE 61375
// end ; ComTurnXY ( unit , x , y ) ;
61433: LD_VAR 0 1
61437: PPUSH
61438: LD_VAR 0 2
61442: PPUSH
61443: LD_VAR 0 3
61447: PPUSH
61448: CALL_OW 118
// wait ( 5 ) ;
61452: LD_INT 5
61454: PPUSH
61455: CALL_OW 67
// _d := GetDir ( unit ) ;
61459: LD_ADDR_VAR 0 10
61463: PUSH
61464: LD_VAR 0 1
61468: PPUSH
61469: CALL_OW 254
61473: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
61474: LD_ADDR_VAR 0 8
61478: PUSH
61479: LD_VAR 0 1
61483: PPUSH
61484: CALL_OW 250
61488: PPUSH
61489: LD_VAR 0 10
61493: PPUSH
61494: LD_VAR 0 5
61498: PPUSH
61499: CALL_OW 272
61503: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
61504: LD_ADDR_VAR 0 9
61508: PUSH
61509: LD_VAR 0 1
61513: PPUSH
61514: CALL_OW 251
61518: PPUSH
61519: LD_VAR 0 10
61523: PPUSH
61524: LD_VAR 0 5
61528: PPUSH
61529: CALL_OW 273
61533: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61534: LD_VAR 0 8
61538: PPUSH
61539: LD_VAR 0 9
61543: PPUSH
61544: CALL_OW 488
61548: NOT
61549: IFFALSE 61553
// exit ;
61551: GO 61660
// ComAnimCustom ( unit , 1 ) ;
61553: LD_VAR 0 1
61557: PPUSH
61558: LD_INT 1
61560: PPUSH
61561: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
61565: LD_VAR 0 8
61569: PPUSH
61570: LD_VAR 0 9
61574: PPUSH
61575: LD_VAR 0 6
61579: PPUSH
61580: LD_VAR 0 7
61584: PPUSH
61585: CALL_OW 330
// repeat wait ( 1 ) ;
61589: LD_INT 1
61591: PPUSH
61592: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
61596: LD_VAR 0 1
61600: PPUSH
61601: CALL_OW 316
61605: PUSH
61606: LD_VAR 0 1
61610: PPUSH
61611: CALL_OW 314
61615: OR
61616: PUSH
61617: LD_VAR 0 1
61621: PPUSH
61622: CALL_OW 302
61626: NOT
61627: OR
61628: PUSH
61629: LD_VAR 0 1
61633: PPUSH
61634: CALL_OW 301
61638: OR
61639: IFFALSE 61589
// RemoveSeeing ( _x , _y , side ) ;
61641: LD_VAR 0 8
61645: PPUSH
61646: LD_VAR 0 9
61650: PPUSH
61651: LD_VAR 0 6
61655: PPUSH
61656: CALL_OW 331
// end ; end_of_file
61660: LD_VAR 0 4
61664: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
61665: LD_VAR 0 1
61669: PPUSH
61670: LD_VAR 0 2
61674: PPUSH
61675: LD_VAR 0 3
61679: PPUSH
61680: LD_VAR 0 4
61684: PPUSH
61685: LD_VAR 0 5
61689: PPUSH
61690: LD_VAR 0 6
61694: PPUSH
61695: CALL 44315 0 6
// end ;
61699: PPOPN 6
61701: END
