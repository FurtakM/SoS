// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 58 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 22
// Difficulty := 4 ;
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 4
  21: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  22: LD_INT 1
  24: PPUSH
  25: LD_INT 3
  27: PPUSH
  28: CALL 10352 0 2
// PrepareArabian ;
  32: CALL 505 0 0
// PrepareRussian ;
  36: CALL 11147 0 0
// Action ;
  40: CALL 19395 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 57
// FogOff ( 2 ) ;
  50: LD_INT 2
  52: PPUSH
  53: CALL_OW 344
// end ;
  57: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack , canRolfJoin , buildingsFromPrev , gameActive , rolfAttack , collectedOil ; function Init ; begin
  58: LD_INT 0
  60: PPUSH
// debug := false ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// prefix := 05_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 05_
  76: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_STRING 04_2_GaidarKilled
  84: PPUSH
  85: LD_INT 1
  87: PPUSH
  88: CALL_OW 30
  92: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  93: LD_ADDR_EXP 8
  97: PUSH
  98: LD_STRING 05_ConvoySavedCounter
 100: PPUSH
 101: LD_INT 0
 103: PPUSH
 104: CALL_OW 30
 108: ST_TO_ADDR
// buildingsFromPrev := LoadVariable ( 05_Buildings , [ ] ) ;
 109: LD_ADDR_EXP 30
 113: PUSH
 114: LD_STRING 05_Buildings
 116: PPUSH
 117: EMPTY
 118: PPUSH
 119: CALL_OW 30
 123: ST_TO_ADDR
// bergkampfArrived := false ;
 124: LD_ADDR_EXP 3
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// omarArrived := false ;
 132: LD_ADDR_EXP 6
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// outpostDestroyed := false ;
 140: LD_ADDR_EXP 4
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// ruLoseCounter := 0 ;
 148: LD_ADDR_EXP 5
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// rolfScriptBase := false ;
 156: LD_ADDR_EXP 9
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// omarScriptBase := false ;
 164: LD_ADDR_EXP 10
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// linkedWithRolf := 0 ;
 172: LD_ADDR_EXP 12
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 180: LD_ADDR_EXP 26
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// rolfDied := false ;
 188: LD_ADDR_EXP 13
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// leninSpotted := false ;
 196: LD_ADDR_EXP 14
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// mortarConstructed := false ;
 204: LD_ADDR_EXP 15
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// rolfHasVehicles := false ;
 212: LD_ADDR_EXP 16
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// leninScriptBase := true ;
 220: LD_ADDR_EXP 11
 224: PUSH
 225: LD_INT 1
 227: ST_TO_ADDR
// rolfWantVehicles := false ;
 228: LD_ADDR_EXP 17
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// omarWantVehicles := false ;
 236: LD_ADDR_EXP 18
 240: PUSH
 241: LD_INT 0
 243: ST_TO_ADDR
// omarHasVehicles := false ;
 244: LD_ADDR_EXP 22
 248: PUSH
 249: LD_INT 0
 251: ST_TO_ADDR
// escapeAllowed := false ;
 252: LD_ADDR_EXP 24
 256: PUSH
 257: LD_INT 0
 259: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 260: LD_ADDR_EXP 19
 264: PUSH
 265: LD_INT 31500
 267: PUSH
 268: LD_INT 28350
 270: PUSH
 271: LD_INT 25900
 273: PUSH
 274: LD_INT 24150
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: PUSH
 283: LD_OWVAR 67
 287: ARRAY
 288: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 289: LD_ADDR_EXP 20
 293: PUSH
 294: LD_INT 31500
 296: PUSH
 297: LD_INT 28350
 299: PUSH
 300: LD_INT 25900
 302: PUSH
 303: LD_INT 24150
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: LIST
 310: LIST
 311: PUSH
 312: LD_OWVAR 67
 316: ARRAY
 317: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 318: LD_ADDR_EXP 21
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: LD_INT 5
 328: PUSH
 329: LD_INT 6
 331: PUSH
 332: LD_INT 6
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: LIST
 339: LIST
 340: PUSH
 341: LD_OWVAR 67
 345: ARRAY
 346: ST_TO_ADDR
// omarAttack := false ;
 347: LD_ADDR_EXP 23
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// disableAttackOnHeike := false ;
 355: LD_ADDR_EXP 27
 359: PUSH
 360: LD_INT 0
 362: ST_TO_ADDR
// escapeTimer := 8 8$30 ;
 363: LD_ADDR_EXP 25
 367: PUSH
 368: LD_INT 17850
 370: ST_TO_ADDR
// firstAttack := true ;
 371: LD_ADDR_EXP 28
 375: PUSH
 376: LD_INT 1
 378: ST_TO_ADDR
// canRolfJoin := true ;
 379: LD_ADDR_EXP 29
 383: PUSH
 384: LD_INT 1
 386: ST_TO_ADDR
// gameActive := false ;
 387: LD_ADDR_EXP 31
 391: PUSH
 392: LD_INT 0
 394: ST_TO_ADDR
// rolfAttack := false ;
 395: LD_ADDR_EXP 32
 399: PUSH
 400: LD_INT 0
 402: ST_TO_ADDR
// collectedOil := 0 ;
 403: LD_ADDR_EXP 33
 407: PUSH
 408: LD_INT 0
 410: ST_TO_ADDR
// end ;
 411: LD_VAR 0 1
 415: RET
// every 0 0$2 trigger GetSide ( Rolf ) = 2 and IsOk ( Rolf ) and not omarArrived do
 416: LD_EXP 47
 420: PPUSH
 421: CALL_OW 255
 425: PUSH
 426: LD_INT 2
 428: EQUAL
 429: IFFALSE 442
 431: PUSH
 432: LD_EXP 47
 436: PPUSH
 437: CALL_OW 302
 441: AND
 442: IFFALSE 451
 444: PUSH
 445: LD_EXP 6
 449: NOT
 450: AND
 451: IFFALSE 463
 453: GO 455
 455: DISABLE
// SetAchievement ( ACH_ROLF ) ;
 456: LD_STRING ACH_ROLF
 458: PPUSH
 459: CALL_OW 543
 463: END
// every 0 0$2 trigger collectedOil >= 300 do
 464: LD_EXP 33
 468: PUSH
 469: LD_INT 300
 471: GREATEREQUAL
 472: IFFALSE 484
 474: GO 476
 476: DISABLE
// SetAchievement ( ACH_OIL ) ;
 477: LD_STRING ACH_OIL
 479: PPUSH
 480: CALL_OW 543
 484: END
// every 0 0$2 trigger IsDead ( ruLenin ) do
 485: LD_INT 52
 487: PPUSH
 488: CALL_OW 301
 492: IFFALSE 504
 494: GO 496
 496: DISABLE
// SetAchievement ( ACH_LENIN ) ; end_of_file
 497: LD_STRING ACH_LENIN
 499: PPUSH
 500: CALL_OW 543
 504: END
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , veh , tmp , limiter ; begin
 505: LD_INT 0
 507: PPUSH
 508: PPUSH
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
 515: PPUSH
 516: PPUSH
 517: PPUSH
 518: PPUSH
 519: PPUSH
 520: PPUSH
// uc_nation := 2 ;
 521: LD_ADDR_OWVAR 21
 525: PUSH
 526: LD_INT 2
 528: ST_TO_ADDR
// uc_side := 5 ;
 529: LD_ADDR_OWVAR 20
 533: PUSH
 534: LD_INT 5
 536: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 537: LD_ADDR_EXP 42
 541: PUSH
 542: LD_STRING Abdul
 544: PPUSH
 545: LD_INT 0
 547: PPUSH
 548: LD_STRING 
 550: PPUSH
 551: CALL 29722 0 3
 555: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 556: LD_ADDR_EXP 44
 560: PUSH
 561: LD_STRING Omar
 563: PPUSH
 564: LD_INT 0
 566: PPUSH
 567: LD_STRING 
 569: PPUSH
 570: CALL 29722 0 3
 574: ST_TO_ADDR
// uc_side := 2 ;
 575: LD_ADDR_OWVAR 20
 579: PUSH
 580: LD_INT 2
 582: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 583: LD_ADDR_EXP 34
 587: PUSH
 588: LD_STRING Heike
 590: PPUSH
 591: LD_EXP 1
 595: NOT
 596: PPUSH
 597: LD_EXP 2
 601: PPUSH
 602: CALL 29722 0 3
 606: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 607: LD_ADDR_EXP 37
 611: PUSH
 612: LD_STRING Ibrahim
 614: PPUSH
 615: LD_EXP 1
 619: NOT
 620: PPUSH
 621: LD_EXP 2
 625: PPUSH
 626: CALL 29722 0 3
 630: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 631: LD_ADDR_EXP 35
 635: PUSH
 636: LD_STRING Givi
 638: PPUSH
 639: LD_EXP 1
 643: NOT
 644: PPUSH
 645: LD_EXP 2
 649: PPUSH
 650: CALL 29722 0 3
 654: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 655: LD_ADDR_EXP 38
 659: PUSH
 660: LD_STRING Kamil
 662: PPUSH
 663: LD_EXP 1
 667: NOT
 668: PPUSH
 669: LD_EXP 2
 673: PPUSH
 674: CALL 29722 0 3
 678: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 679: LD_ADDR_EXP 39
 683: PUSH
 684: LD_STRING Kaia
 686: PPUSH
 687: LD_EXP 1
 691: NOT
 692: PPUSH
 693: LD_EXP 2
 697: PPUSH
 698: CALL 29722 0 3
 702: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 703: LD_ADDR_EXP 40
 707: PUSH
 708: LD_STRING Sophia
 710: PPUSH
 711: LD_EXP 1
 715: NOT
 716: PPUSH
 717: LD_EXP 2
 721: PPUSH
 722: CALL 29722 0 3
 726: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 727: LD_ADDR_EXP 41
 731: PUSH
 732: LD_STRING Markov
 734: PPUSH
 735: LD_EXP 1
 739: NOT
 740: PPUSH
 741: LD_EXP 2
 745: PPUSH
 746: CALL 29722 0 3
 750: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 751: LD_ADDR_EXP 46
 755: PUSH
 756: LD_STRING Aviradze
 758: PPUSH
 759: LD_EXP 1
 763: NOT
 764: PPUSH
 765: LD_EXP 2
 769: PPUSH
 770: CALL 29722 0 3
 774: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 775: LD_ADDR_EXP 45
 779: PUSH
 780: LD_STRING Kurt
 782: PPUSH
 783: LD_EXP 1
 787: NOT
 788: PPUSH
 789: LD_EXP 2
 793: PPUSH
 794: CALL 29722 0 3
 798: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 799: LD_ADDR_EXP 36
 803: PUSH
 804: LD_STRING Mike
 806: PPUSH
 807: LD_EXP 1
 811: NOT
 812: PPUSH
 813: LD_EXP 2
 817: PPUSH
 818: CALL 29722 0 3
 822: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 823: LD_ADDR_EXP 43
 827: PUSH
 828: LD_STRING Olaf
 830: PPUSH
 831: LD_INT 0
 833: PPUSH
 834: LD_STRING 
 836: PPUSH
 837: CALL 29722 0 3
 841: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 842: LD_ADDR_EXP 49
 846: PUSH
 847: LD_STRING 05_others
 849: PPUSH
 850: CALL_OW 31
 854: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 855: LD_ADDR_EXP 50
 859: PUSH
 860: LD_STRING 05_apes
 862: PPUSH
 863: CALL_OW 31
 867: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 868: LD_ADDR_VAR 0 5
 872: PUSH
 873: LD_STRING 05_Radar
 875: PPUSH
 876: LD_EXP 1
 880: PPUSH
 881: CALL_OW 30
 885: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 886: LD_ADDR_VAR 0 6
 890: PUSH
 891: LD_STRING 05_RemoteControl
 893: PPUSH
 894: LD_EXP 1
 898: PPUSH
 899: CALL_OW 30
 903: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 904: LD_ADDR_VAR 0 7
 908: PUSH
 909: LD_STRING 05_DrugsTested
 911: PPUSH
 912: LD_EXP 1
 916: PPUSH
 917: CALL_OW 30
 921: ST_TO_ADDR
// if hasDrugs then
 922: LD_VAR 0 7
 926: IFFALSE 941
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 928: LD_INT 5
 930: PPUSH
 931: LD_INT 2
 933: PPUSH
 934: LD_INT 2
 936: PPUSH
 937: CALL_OW 322
// if hasRadar then
 941: LD_VAR 0 5
 945: IFFALSE 960
// SetTech ( tech_radar , 2 , state_researched ) ;
 947: LD_INT 6
 949: PPUSH
 950: LD_INT 2
 952: PPUSH
 953: LD_INT 2
 955: PPUSH
 956: CALL_OW 322
// if hasRemote then
 960: LD_VAR 0 6
 964: IFFALSE 979
// SetTech ( tech_remCont , 2 , state_researched ) ;
 966: LD_INT 15
 968: PPUSH
 969: LD_INT 2
 971: PPUSH
 972: LD_INT 2
 974: PPUSH
 975: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 979: LD_ADDR_VAR 0 13
 983: PUSH
 984: LD_INT 5
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: CALL_OW 517
 994: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 995: LD_ADDR_VAR 0 2
 999: PUSH
1000: DOUBLE
1001: LD_INT 1
1003: DEC
1004: ST_TO_ADDR
1005: LD_VAR 0 13
1009: PUSH
1010: LD_INT 1
1012: ARRAY
1013: PUSH
1014: FOR_TO
1015: IFFALSE 1092
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
1017: LD_VAR 0 13
1021: PUSH
1022: LD_INT 1
1024: ARRAY
1025: PUSH
1026: LD_VAR 0 2
1030: ARRAY
1031: PPUSH
1032: LD_VAR 0 13
1036: PUSH
1037: LD_INT 2
1039: ARRAY
1040: PUSH
1041: LD_VAR 0 2
1045: ARRAY
1046: PPUSH
1047: CALL_OW 351
1051: IFFALSE 1090
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
1053: LD_VAR 0 13
1057: PUSH
1058: LD_INT 1
1060: ARRAY
1061: PUSH
1062: LD_VAR 0 2
1066: ARRAY
1067: PPUSH
1068: LD_VAR 0 13
1072: PUSH
1073: LD_INT 2
1075: ARRAY
1076: PUSH
1077: LD_VAR 0 2
1081: ARRAY
1082: PPUSH
1083: LD_INT 2
1085: PPUSH
1086: CALL_OW 244
1090: GO 1014
1092: POP
1093: POP
// base := [ ] ;
1094: LD_ADDR_VAR 0 4
1098: PUSH
1099: EMPTY
1100: ST_TO_ADDR
// if debug then
1101: LD_EXP 1
1105: IFFALSE 1155
// begin base := [ [ b_warehouse , 51 , 77 , 1 , nation_russian , 3 , 0 , 0 , 0 ] , ] ;
1107: LD_ADDR_VAR 0 4
1111: PUSH
1112: LD_INT 1
1114: PUSH
1115: LD_INT 51
1117: PUSH
1118: LD_INT 77
1120: PUSH
1121: LD_INT 1
1123: PUSH
1124: LD_INT 3
1126: PUSH
1127: LD_INT 3
1129: PUSH
1130: LD_INT 0
1132: PUSH
1133: LD_INT 0
1135: PUSH
1136: LD_INT 0
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: PUSH
1150: EMPTY
1151: LIST
1152: ST_TO_ADDR
// end else
1153: GO 1171
// if buildingsFromPrev then
1155: LD_EXP 30
1159: IFFALSE 1171
// base := buildingsFromPrev ;
1161: LD_ADDR_VAR 0 4
1165: PUSH
1166: LD_EXP 30
1170: ST_TO_ADDR
// if base then
1171: LD_VAR 0 4
1175: IFFALSE 1373
// for i := 1 to base do
1177: LD_ADDR_VAR 0 2
1181: PUSH
1182: DOUBLE
1183: LD_INT 1
1185: DEC
1186: ST_TO_ADDR
1187: LD_VAR 0 4
1191: PUSH
1192: FOR_TO
1193: IFFALSE 1371
// base := Replace ( base , i , [ base [ i ] [ 1 ] , base [ i ] [ 2 ] + 155 , base [ i ] [ 3 ] + 3 , base [ i ] [ 4 ] , base [ i ] [ 5 ] , base [ i ] [ 6 ] , base [ i ] [ 7 ] , base [ i ] [ 8 ] , base [ i ] [ 9 ] ] ) ;
1195: LD_ADDR_VAR 0 4
1199: PUSH
1200: LD_VAR 0 4
1204: PPUSH
1205: LD_VAR 0 2
1209: PPUSH
1210: LD_VAR 0 4
1214: PUSH
1215: LD_VAR 0 2
1219: ARRAY
1220: PUSH
1221: LD_INT 1
1223: ARRAY
1224: PUSH
1225: LD_VAR 0 4
1229: PUSH
1230: LD_VAR 0 2
1234: ARRAY
1235: PUSH
1236: LD_INT 2
1238: ARRAY
1239: PUSH
1240: LD_INT 155
1242: PLUS
1243: PUSH
1244: LD_VAR 0 4
1248: PUSH
1249: LD_VAR 0 2
1253: ARRAY
1254: PUSH
1255: LD_INT 3
1257: ARRAY
1258: PUSH
1259: LD_INT 3
1261: PLUS
1262: PUSH
1263: LD_VAR 0 4
1267: PUSH
1268: LD_VAR 0 2
1272: ARRAY
1273: PUSH
1274: LD_INT 4
1276: ARRAY
1277: PUSH
1278: LD_VAR 0 4
1282: PUSH
1283: LD_VAR 0 2
1287: ARRAY
1288: PUSH
1289: LD_INT 5
1291: ARRAY
1292: PUSH
1293: LD_VAR 0 4
1297: PUSH
1298: LD_VAR 0 2
1302: ARRAY
1303: PUSH
1304: LD_INT 6
1306: ARRAY
1307: PUSH
1308: LD_VAR 0 4
1312: PUSH
1313: LD_VAR 0 2
1317: ARRAY
1318: PUSH
1319: LD_INT 7
1321: ARRAY
1322: PUSH
1323: LD_VAR 0 4
1327: PUSH
1328: LD_VAR 0 2
1332: ARRAY
1333: PUSH
1334: LD_INT 8
1336: ARRAY
1337: PUSH
1338: LD_VAR 0 4
1342: PUSH
1343: LD_VAR 0 2
1347: ARRAY
1348: PUSH
1349: LD_INT 9
1351: ARRAY
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: PPUSH
1364: CALL_OW 1
1368: ST_TO_ADDR
1369: GO 1192
1371: POP
1372: POP
// base := base ^ [ [ b_depot , 206 , 80 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_bunker , 221 , 95 , 5 , nation_arabian , 3 , 0 , 0 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , nation_arabian , 3 , 0 , 0 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , nation_arabian , 3 , 0 , 0 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_lab_full , 217 , 78 , 4 , nation_arabian , 3 , b_lab_weapon , 0 , 0 ] , [ b_solar_power , 220 , 99 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 220 , 103 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 216 , 102 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_gun , 203 , 94 , 0 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_track , 199 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 81 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 78 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ] ;
1373: LD_ADDR_VAR 0 4
1377: PUSH
1378: LD_VAR 0 4
1382: PUSH
1383: LD_INT 0
1385: PUSH
1386: LD_INT 206
1388: PUSH
1389: LD_INT 80
1391: PUSH
1392: LD_INT 1
1394: PUSH
1395: LD_INT 2
1397: PUSH
1398: LD_INT 3
1400: PUSH
1401: LD_INT 0
1403: PUSH
1404: LD_INT 0
1406: PUSH
1407: LD_INT 0
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: LIST
1420: PUSH
1421: LD_INT 32
1423: PUSH
1424: LD_INT 221
1426: PUSH
1427: LD_INT 95
1429: PUSH
1430: LD_INT 5
1432: PUSH
1433: LD_INT 2
1435: PUSH
1436: LD_INT 3
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: LD_INT 0
1444: PUSH
1445: LD_INT 23
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 32
1461: PUSH
1462: LD_INT 223
1464: PUSH
1465: LD_INT 88
1467: PUSH
1468: LD_INT 5
1470: PUSH
1471: LD_INT 2
1473: PUSH
1474: LD_INT 3
1476: PUSH
1477: LD_INT 0
1479: PUSH
1480: LD_INT 0
1482: PUSH
1483: LD_INT 24
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: PUSH
1497: LD_INT 32
1499: PUSH
1500: LD_INT 202
1502: PUSH
1503: LD_INT 64
1505: PUSH
1506: LD_INT 2
1508: PUSH
1509: LD_INT 2
1511: PUSH
1512: LD_INT 3
1514: PUSH
1515: LD_INT 0
1517: PUSH
1518: LD_INT 0
1520: PUSH
1521: LD_INT 25
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: LIST
1532: LIST
1533: LIST
1534: PUSH
1535: LD_INT 3
1537: PUSH
1538: LD_INT 203
1540: PUSH
1541: LD_INT 91
1543: PUSH
1544: LD_INT 1
1546: PUSH
1547: LD_INT 2
1549: PUSH
1550: LD_INT 3
1552: PUSH
1553: LD_INT 0
1555: PUSH
1556: LD_INT 0
1558: PUSH
1559: LD_INT 0
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: PUSH
1573: LD_INT 8
1575: PUSH
1576: LD_INT 217
1578: PUSH
1579: LD_INT 78
1581: PUSH
1582: LD_INT 4
1584: PUSH
1585: LD_INT 2
1587: PUSH
1588: LD_INT 3
1590: PUSH
1591: LD_INT 10
1593: PUSH
1594: LD_INT 0
1596: PUSH
1597: LD_INT 0
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: PUSH
1611: LD_INT 27
1613: PUSH
1614: LD_INT 220
1616: PUSH
1617: LD_INT 99
1619: PUSH
1620: LD_INT 1
1622: PUSH
1623: LD_INT 2
1625: PUSH
1626: LD_INT 3
1628: PUSH
1629: LD_INT 0
1631: PUSH
1632: LD_INT 0
1634: PUSH
1635: LD_INT 0
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: PUSH
1649: LD_INT 27
1651: PUSH
1652: LD_INT 220
1654: PUSH
1655: LD_INT 103
1657: PUSH
1658: LD_INT 1
1660: PUSH
1661: LD_INT 2
1663: PUSH
1664: LD_INT 3
1666: PUSH
1667: LD_INT 0
1669: PUSH
1670: LD_INT 0
1672: PUSH
1673: LD_INT 0
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 27
1689: PUSH
1690: LD_INT 216
1692: PUSH
1693: LD_INT 102
1695: PUSH
1696: LD_INT 1
1698: PUSH
1699: LD_INT 2
1701: PUSH
1702: LD_INT 3
1704: PUSH
1705: LD_INT 0
1707: PUSH
1708: LD_INT 0
1710: PUSH
1711: LD_INT 0
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: PUSH
1725: LD_INT 17
1727: PUSH
1728: LD_INT 203
1730: PUSH
1731: LD_INT 94
1733: PUSH
1734: LD_INT 0
1736: PUSH
1737: LD_INT 2
1739: PUSH
1740: LD_INT 3
1742: PUSH
1743: LD_INT 0
1745: PUSH
1746: LD_INT 0
1748: PUSH
1749: LD_INT 0
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: LIST
1762: PUSH
1763: LD_INT 23
1765: PUSH
1766: LD_INT 200
1768: PUSH
1769: LD_INT 88
1771: PUSH
1772: LD_INT 2
1774: PUSH
1775: LD_INT 2
1777: PUSH
1778: LD_INT 3
1780: PUSH
1781: LD_INT 0
1783: PUSH
1784: LD_INT 0
1786: PUSH
1787: LD_INT 0
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 16
1803: PUSH
1804: LD_INT 199
1806: PUSH
1807: LD_INT 91
1809: PUSH
1810: LD_INT 1
1812: PUSH
1813: LD_INT 2
1815: PUSH
1816: LD_INT 3
1818: PUSH
1819: LD_INT 0
1821: PUSH
1822: LD_INT 0
1824: PUSH
1825: LD_INT 0
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: PUSH
1839: LD_INT 26
1841: PUSH
1842: LD_INT 197
1844: PUSH
1845: LD_INT 81
1847: PUSH
1848: LD_INT 1
1850: PUSH
1851: LD_INT 2
1853: PUSH
1854: LD_INT 3
1856: PUSH
1857: LD_INT 0
1859: PUSH
1860: LD_INT 0
1862: PUSH
1863: LD_INT 0
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 26
1879: PUSH
1880: LD_INT 197
1882: PUSH
1883: LD_INT 78
1885: PUSH
1886: LD_INT 3
1888: PUSH
1889: LD_INT 2
1891: PUSH
1892: LD_INT 3
1894: PUSH
1895: LD_INT 0
1897: PUSH
1898: LD_INT 0
1900: PUSH
1901: LD_INT 0
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: LIST
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: LIST
1930: ADD
1931: ST_TO_ADDR
// if hasRadar then
1932: LD_VAR 0 5
1936: IFFALSE 2000
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
1938: LD_ADDR_VAR 0 4
1942: PUSH
1943: LD_VAR 0 4
1947: PPUSH
1948: LD_VAR 0 4
1952: PUSH
1953: LD_INT 1
1955: PLUS
1956: PPUSH
1957: LD_INT 20
1959: PUSH
1960: LD_INT 203
1962: PUSH
1963: LD_INT 87
1965: PUSH
1966: LD_INT 3
1968: PUSH
1969: LD_INT 2
1971: PUSH
1972: LD_INT 3
1974: PUSH
1975: LD_INT 0
1977: PUSH
1978: LD_INT 0
1980: PUSH
1981: LD_INT 0
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: PPUSH
1995: CALL_OW 1
1999: ST_TO_ADDR
// if hasRemote then
2000: LD_VAR 0 6
2004: IFFALSE 2068
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
2006: LD_ADDR_VAR 0 4
2010: PUSH
2011: LD_VAR 0 4
2015: PPUSH
2016: LD_VAR 0 4
2020: PUSH
2021: LD_INT 1
2023: PLUS
2024: PPUSH
2025: LD_INT 22
2027: PUSH
2028: LD_INT 207
2030: PUSH
2031: LD_INT 95
2033: PUSH
2034: LD_INT 5
2036: PUSH
2037: LD_INT 2
2039: PUSH
2040: LD_INT 3
2042: PUSH
2043: LD_INT 0
2045: PUSH
2046: LD_INT 0
2048: PUSH
2049: LD_INT 0
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: PPUSH
2063: CALL_OW 1
2067: ST_TO_ADDR
// for i in base do
2068: LD_ADDR_VAR 0 2
2072: PUSH
2073: LD_VAR 0 4
2077: PUSH
2078: FOR_IN
2079: IFFALSE 2443
// begin if HexInfo ( i [ 2 ] , i [ 3 ] ) then
2081: LD_VAR 0 2
2085: PUSH
2086: LD_INT 2
2088: ARRAY
2089: PPUSH
2090: LD_VAR 0 2
2094: PUSH
2095: LD_INT 3
2097: ARRAY
2098: PPUSH
2099: CALL_OW 428
2103: IFFALSE 2107
// continue ;
2105: GO 2078
// uc_nation := i [ 5 ] ;
2107: LD_ADDR_OWVAR 21
2111: PUSH
2112: LD_VAR 0 2
2116: PUSH
2117: LD_INT 5
2119: ARRAY
2120: ST_TO_ADDR
// InitBc ;
2121: CALL_OW 21
// bc_type := i [ 1 ] ;
2125: LD_ADDR_OWVAR 42
2129: PUSH
2130: LD_VAR 0 2
2134: PUSH
2135: LD_INT 1
2137: ARRAY
2138: ST_TO_ADDR
// bc_level := i [ 6 ] ;
2139: LD_ADDR_OWVAR 43
2143: PUSH
2144: LD_VAR 0 2
2148: PUSH
2149: LD_INT 6
2151: ARRAY
2152: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2153: LD_ADDR_OWVAR 44
2157: PUSH
2158: LD_INT 9
2160: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2161: LD_ADDR_OWVAR 45
2165: PUSH
2166: LD_INT 9
2168: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 5 ] = nation_arabian and not i [ 8 ] then
2169: LD_VAR 0 2
2173: PUSH
2174: LD_INT 1
2176: ARRAY
2177: PUSH
2178: LD_INT 8
2180: EQUAL
2181: IFFALSE 2197
2183: PUSH
2184: LD_VAR 0 2
2188: PUSH
2189: LD_INT 5
2191: ARRAY
2192: PUSH
2193: LD_INT 2
2195: EQUAL
2196: AND
2197: IFFALSE 2210
2199: PUSH
2200: LD_VAR 0 2
2204: PUSH
2205: LD_INT 8
2207: ARRAY
2208: NOT
2209: AND
2210: IFFALSE 2246
// begin bc_kind1 := b_lab_weapon ;
2212: LD_ADDR_OWVAR 44
2216: PUSH
2217: LD_INT 10
2219: ST_TO_ADDR
// if hasRadar then
2220: LD_VAR 0 5
2224: IFFALSE 2236
// bc_kind2 := b_lab_opto else
2226: LD_ADDR_OWVAR 45
2230: PUSH
2231: LD_INT 15
2233: ST_TO_ADDR
2234: GO 2244
// bc_kind2 := b_lab_basic ;
2236: LD_ADDR_OWVAR 45
2240: PUSH
2241: LD_INT 9
2243: ST_TO_ADDR
// end else
2244: GO 2333
// begin if i [ 1 ] in [ b_lab_half , b_lab_full ] and i [ 7 ] then
2246: LD_VAR 0 2
2250: PUSH
2251: LD_INT 1
2253: ARRAY
2254: PUSH
2255: LD_INT 7
2257: PUSH
2258: LD_INT 8
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: IN
2265: IFFALSE 2277
2267: PUSH
2268: LD_VAR 0 2
2272: PUSH
2273: LD_INT 7
2275: ARRAY
2276: AND
2277: IFFALSE 2333
// begin bc_kind1 := i [ 7 ] ;
2279: LD_ADDR_OWVAR 44
2283: PUSH
2284: LD_VAR 0 2
2288: PUSH
2289: LD_INT 7
2291: ARRAY
2292: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 8 ] then
2293: LD_VAR 0 2
2297: PUSH
2298: LD_INT 1
2300: ARRAY
2301: PUSH
2302: LD_INT 8
2304: EQUAL
2305: IFFALSE 2317
2307: PUSH
2308: LD_VAR 0 2
2312: PUSH
2313: LD_INT 8
2315: ARRAY
2316: AND
2317: IFFALSE 2333
// bc_kind2 := i [ 8 ] ;
2319: LD_ADDR_OWVAR 45
2323: PUSH
2324: LD_VAR 0 2
2328: PUSH
2329: LD_INT 8
2331: ARRAY
2332: ST_TO_ADDR
// end ; end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2333: LD_ADDR_VAR 0 3
2337: PUSH
2338: LD_VAR 0 2
2342: PUSH
2343: LD_INT 2
2345: ARRAY
2346: PPUSH
2347: LD_VAR 0 2
2351: PUSH
2352: LD_INT 3
2354: ARRAY
2355: PPUSH
2356: LD_VAR 0 2
2360: PUSH
2361: LD_INT 4
2363: ARRAY
2364: PPUSH
2365: CALL_OW 47
2369: ST_TO_ADDR
// if i [ 9 ] then
2370: LD_VAR 0 2
2374: PUSH
2375: LD_INT 9
2377: ARRAY
2378: IFFALSE 2398
// PlaceWeaponTurret ( b , i [ 9 ] ) ;
2380: LD_VAR 0 3
2384: PPUSH
2385: LD_VAR 0 2
2389: PUSH
2390: LD_INT 9
2392: ARRAY
2393: PPUSH
2394: CALL_OW 431
// if i [ 1 ] = b_bunker then
2398: LD_VAR 0 2
2402: PUSH
2403: LD_INT 1
2405: ARRAY
2406: PUSH
2407: LD_INT 32
2409: EQUAL
2410: IFFALSE 2441
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
2412: LD_ADDR_VAR 0 11
2416: PUSH
2417: LD_VAR 0 11
2421: PPUSH
2422: LD_VAR 0 11
2426: PUSH
2427: LD_INT 1
2429: PLUS
2430: PPUSH
2431: LD_VAR 0 3
2435: PPUSH
2436: CALL_OW 1
2440: ST_TO_ADDR
// end ;
2441: GO 2078
2443: POP
2444: POP
// depot := HexInfo ( 206 , 80 ) ;
2445: LD_ADDR_VAR 0 9
2449: PUSH
2450: LD_INT 206
2452: PPUSH
2453: LD_INT 80
2455: PPUSH
2456: CALL_OW 428
2460: ST_TO_ADDR
// factory := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) ;
2461: LD_ADDR_VAR 0 8
2465: PUSH
2466: LD_INT 22
2468: PUSH
2469: LD_INT 2
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: PUSH
2476: LD_INT 30
2478: PUSH
2479: LD_INT 3
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: EMPTY
2487: LIST
2488: LIST
2489: PPUSH
2490: CALL_OW 69
2494: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2495: LD_ADDR_VAR 0 10
2499: PUSH
2500: LD_INT 22
2502: PUSH
2503: LD_INT 2
2505: PUSH
2506: EMPTY
2507: LIST
2508: LIST
2509: PUSH
2510: LD_INT 2
2512: PUSH
2513: LD_INT 30
2515: PUSH
2516: LD_INT 6
2518: PUSH
2519: EMPTY
2520: LIST
2521: LIST
2522: PUSH
2523: LD_INT 30
2525: PUSH
2526: LD_INT 7
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PUSH
2533: LD_INT 30
2535: PUSH
2536: LD_INT 8
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: PUSH
2543: EMPTY
2544: LIST
2545: LIST
2546: LIST
2547: LIST
2548: PUSH
2549: EMPTY
2550: LIST
2551: LIST
2552: PPUSH
2553: CALL_OW 69
2557: ST_TO_ADDR
// arDepot := depot ;
2558: LD_ADDR_EXP 48
2562: PUSH
2563: LD_VAR 0 9
2567: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 190 , 150 ] [ Difficulty ] ) ;
2568: LD_VAR 0 9
2572: PPUSH
2573: CALL_OW 274
2577: PPUSH
2578: LD_INT 1
2580: PPUSH
2581: LD_INT 360
2583: PUSH
2584: LD_INT 260
2586: PUSH
2587: LD_INT 190
2589: PUSH
2590: LD_INT 150
2592: PUSH
2593: EMPTY
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: PUSH
2599: LD_OWVAR 67
2603: ARRAY
2604: PPUSH
2605: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 150 , 120 ] [ Difficulty ] ) ;
2609: LD_VAR 0 9
2613: PPUSH
2614: CALL_OW 274
2618: PPUSH
2619: LD_INT 2
2621: PPUSH
2622: LD_INT 200
2624: PUSH
2625: LD_INT 170
2627: PUSH
2628: LD_INT 150
2630: PUSH
2631: LD_INT 120
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: LIST
2638: LIST
2639: PUSH
2640: LD_OWVAR 67
2644: ARRAY
2645: PPUSH
2646: CALL_OW 277
// uc_nation := 2 ;
2650: LD_ADDR_OWVAR 21
2654: PUSH
2655: LD_INT 2
2657: ST_TO_ADDR
// uc_side := 2 ;
2658: LD_ADDR_OWVAR 20
2662: PUSH
2663: LD_INT 2
2665: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
2666: LD_INT 13
2668: PPUSH
2669: LD_INT 1
2671: PPUSH
2672: LD_INT 1
2674: PPUSH
2675: LD_INT 27
2677: PPUSH
2678: LD_INT 33
2680: PPUSH
2681: CALL 34684 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
2685: CALL_OW 45
2689: PPUSH
2690: LD_INT 190
2692: PPUSH
2693: LD_INT 64
2695: PPUSH
2696: LD_INT 5
2698: PPUSH
2699: LD_INT 0
2701: PPUSH
2702: CALL 70014 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
2706: LD_INT 13
2708: PPUSH
2709: LD_INT 1
2711: PPUSH
2712: LD_INT 1
2714: PPUSH
2715: LD_INT 25
2717: PPUSH
2718: LD_INT 22
2720: PPUSH
2721: CALL 34684 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
2725: CALL_OW 45
2729: PPUSH
2730: LD_INT 188
2732: PPUSH
2733: LD_INT 67
2735: PPUSH
2736: LD_INT 5
2738: PPUSH
2739: LD_INT 0
2741: PPUSH
2742: CALL 70014 0 5
// PlaceUnitXY ( Heike , 213 , 87 , false ) ;
2746: LD_EXP 34
2750: PPUSH
2751: LD_INT 213
2753: PPUSH
2754: LD_INT 87
2756: PPUSH
2757: LD_INT 0
2759: PPUSH
2760: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
2764: LD_EXP 34
2768: PPUSH
2769: LD_INT 214
2771: PPUSH
2772: LD_INT 87
2774: PPUSH
2775: CALL_OW 118
// if Kaia then
2779: LD_EXP 39
2783: IFFALSE 2818
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
2785: LD_EXP 39
2789: PPUSH
2790: LD_INT 213
2792: PPUSH
2793: LD_INT 85
2795: PPUSH
2796: LD_INT 0
2798: PPUSH
2799: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
2803: LD_EXP 39
2807: PPUSH
2808: LD_INT 215
2810: PPUSH
2811: LD_INT 87
2813: PPUSH
2814: CALL_OW 118
// end ; if Olaf and Kaia then
2818: LD_EXP 43
2822: IFFALSE 2830
2824: PUSH
2825: LD_EXP 39
2829: AND
2830: IFFALSE 2867
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
2832: LD_EXP 43
2836: PPUSH
2837: LD_INT 215
2839: PPUSH
2840: LD_INT 87
2842: PPUSH
2843: LD_INT 0
2845: PPUSH
2846: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
2850: LD_EXP 43
2854: PPUSH
2855: LD_INT 213
2857: PPUSH
2858: LD_INT 85
2860: PPUSH
2861: CALL_OW 118
// end else
2865: GO 2887
// if Olaf then
2867: LD_EXP 43
2871: IFFALSE 2887
// PlaceHumanInUnit ( Olaf , factory ) ;
2873: LD_EXP 43
2877: PPUSH
2878: LD_VAR 0 8
2882: PPUSH
2883: CALL_OW 52
// if Givi then
2887: LD_EXP 35
2891: IFFALSE 2974
// begin if Kaia and Olaf then
2893: LD_EXP 39
2897: IFFALSE 2905
2899: PUSH
2900: LD_EXP 43
2904: AND
2905: IFFALSE 2942
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
2907: LD_EXP 35
2911: PPUSH
2912: LD_INT 247
2914: PPUSH
2915: LD_INT 117
2917: PPUSH
2918: LD_INT 0
2920: PPUSH
2921: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2925: LD_EXP 35
2929: PPUSH
2930: LD_INT 248
2932: PPUSH
2933: LD_INT 118
2935: PPUSH
2936: CALL_OW 118
// end else
2940: GO 2974
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2942: LD_EXP 35
2946: PPUSH
2947: LD_INT 216
2949: PPUSH
2950: LD_INT 88
2952: PPUSH
2953: LD_INT 0
2955: PPUSH
2956: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2960: LD_EXP 35
2964: PPUSH
2965: LD_EXP 34
2969: PPUSH
2970: CALL_OW 119
// end ; end ; if Kurt then
2974: LD_EXP 45
2978: IFFALSE 2998
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2980: LD_EXP 45
2984: PPUSH
2985: LD_VAR 0 11
2989: PUSH
2990: LD_INT 2
2992: ARRAY
2993: PPUSH
2994: CALL_OW 52
// if Mike then
2998: LD_EXP 36
3002: IFFALSE 3022
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
3004: LD_EXP 36
3008: PPUSH
3009: LD_VAR 0 11
3013: PUSH
3014: LD_INT 3
3016: ARRAY
3017: PPUSH
3018: CALL_OW 52
// if Kamil then
3022: LD_EXP 38
3026: IFFALSE 3090
// begin if Kaia and Olaf then
3028: LD_EXP 39
3032: IFFALSE 3040
3034: PUSH
3035: LD_EXP 43
3039: AND
3040: IFFALSE 3058
// PlaceHumanInUnit ( Kamil , depot ) else
3042: LD_EXP 38
3046: PPUSH
3047: LD_VAR 0 9
3051: PPUSH
3052: CALL_OW 52
3056: GO 3090
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
3058: LD_EXP 38
3062: PPUSH
3063: LD_INT 213
3065: PPUSH
3066: LD_INT 87
3068: PPUSH
3069: LD_INT 0
3071: PPUSH
3072: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
3076: LD_EXP 38
3080: PPUSH
3081: LD_EXP 34
3085: PPUSH
3086: CALL_OW 119
// end ; end ; if Sophia then
3090: LD_EXP 40
3094: IFFALSE 3110
// PlaceHumanInUnit ( Sophia , depot ) ;
3096: LD_EXP 40
3100: PPUSH
3101: LD_VAR 0 9
3105: PPUSH
3106: CALL_OW 52
// if Aviradze then
3110: LD_EXP 46
3114: IFFALSE 3163
// if lab then
3116: LD_VAR 0 10
3120: IFFALSE 3142
// PlaceHumanInUnit ( Aviradze , lab [ 1 ] ) else
3122: LD_EXP 46
3126: PPUSH
3127: LD_VAR 0 10
3131: PUSH
3132: LD_INT 1
3134: ARRAY
3135: PPUSH
3136: CALL_OW 52
3140: GO 3163
// PlaceUnitXYR ( Aviradze , 210 , 87 , 3 , false ) ;
3142: LD_EXP 46
3146: PPUSH
3147: LD_INT 210
3149: PPUSH
3150: LD_INT 87
3152: PPUSH
3153: LD_INT 3
3155: PPUSH
3156: LD_INT 0
3158: PPUSH
3159: CALL_OW 50
// if Ibrahim then
3163: LD_EXP 37
3167: IFFALSE 3216
// if lab then
3169: LD_VAR 0 10
3173: IFFALSE 3195
// PlaceHumanInUnit ( Ibrahim , lab [ 1 ] ) else
3175: LD_EXP 37
3179: PPUSH
3180: LD_VAR 0 10
3184: PUSH
3185: LD_INT 1
3187: ARRAY
3188: PPUSH
3189: CALL_OW 52
3193: GO 3216
// PlaceUnitXYR ( Ibrahim , 210 , 87 , 3 , false ) ;
3195: LD_EXP 37
3199: PPUSH
3200: LD_INT 210
3202: PPUSH
3203: LD_INT 87
3205: PPUSH
3206: LD_INT 3
3208: PPUSH
3209: LD_INT 0
3211: PPUSH
3212: CALL_OW 50
// if Markov then
3216: LD_EXP 41
3220: IFFALSE 3269
// if factory then
3222: LD_VAR 0 8
3226: IFFALSE 3248
// PlaceHumanInUnit ( Markov , factory [ 1 ] ) else
3228: LD_EXP 41
3232: PPUSH
3233: LD_VAR 0 8
3237: PUSH
3238: LD_INT 1
3240: ARRAY
3241: PPUSH
3242: CALL_OW 52
3246: GO 3269
// PlaceUnitXYR ( Markov , 210 , 87 , 3 , false ) ;
3248: LD_EXP 41
3252: PPUSH
3253: LD_INT 210
3255: PPUSH
3256: LD_INT 87
3258: PPUSH
3259: LD_INT 3
3261: PPUSH
3262: LD_INT 0
3264: PPUSH
3265: CALL_OW 50
// if heikeSecondSquad then
3269: LD_EXP 49
3273: IFFALSE 3313
// for i in heikeSecondSquad do
3275: LD_ADDR_VAR 0 2
3279: PUSH
3280: LD_EXP 49
3284: PUSH
3285: FOR_IN
3286: IFFALSE 3311
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
3288: LD_VAR 0 2
3292: PPUSH
3293: LD_INT 190
3295: PPUSH
3296: LD_INT 65
3298: PPUSH
3299: LD_INT 5
3301: PPUSH
3302: LD_INT 0
3304: PPUSH
3305: CALL_OW 50
3309: GO 3285
3311: POP
3312: POP
// if heikeApes then
3313: LD_EXP 50
3317: IFFALSE 3357
// for i in heikeApes do
3319: LD_ADDR_VAR 0 2
3323: PUSH
3324: LD_EXP 50
3328: PUSH
3329: FOR_IN
3330: IFFALSE 3355
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
3332: LD_VAR 0 2
3336: PPUSH
3337: LD_INT 190
3339: PPUSH
3340: LD_INT 70
3342: PPUSH
3343: LD_INT 5
3345: PPUSH
3346: LD_INT 0
3348: PPUSH
3349: CALL_OW 50
3353: GO 3329
3355: POP
3356: POP
// tmp := LoadVariable ( 05_Vehicles , [ ] ) ;
3357: LD_ADDR_VAR 0 13
3361: PUSH
3362: LD_STRING 05_Vehicles
3364: PPUSH
3365: EMPTY
3366: PPUSH
3367: CALL_OW 30
3371: ST_TO_ADDR
// if tmp then
3372: LD_VAR 0 13
3376: IFFALSE 3546
// begin limiter := 10 ;
3378: LD_ADDR_VAR 0 14
3382: PUSH
3383: LD_INT 10
3385: ST_TO_ADDR
// for i in tmp do
3386: LD_ADDR_VAR 0 2
3390: PUSH
3391: LD_VAR 0 13
3395: PUSH
3396: FOR_IN
3397: IFFALSE 3544
// begin limiter := Dec ( limiter ) ;
3399: LD_ADDR_VAR 0 14
3403: PUSH
3404: LD_VAR 0 14
3408: PPUSH
3409: CALL 69249 0 1
3413: ST_TO_ADDR
// if limiter = 0 then
3414: LD_VAR 0 14
3418: PUSH
3419: LD_INT 0
3421: EQUAL
3422: IFFALSE 3426
// break ;
3424: GO 3544
// uc_side := 2 ;
3426: LD_ADDR_OWVAR 20
3430: PUSH
3431: LD_INT 2
3433: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
3434: LD_ADDR_OWVAR 21
3438: PUSH
3439: LD_VAR 0 2
3443: PUSH
3444: LD_INT 5
3446: ARRAY
3447: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 20 ) ;
3448: LD_VAR 0 2
3452: PUSH
3453: LD_INT 1
3455: ARRAY
3456: PPUSH
3457: LD_VAR 0 2
3461: PUSH
3462: LD_INT 2
3464: ARRAY
3465: PPUSH
3466: LD_VAR 0 2
3470: PUSH
3471: LD_INT 3
3473: ARRAY
3474: PPUSH
3475: LD_VAR 0 2
3479: PUSH
3480: LD_INT 4
3482: ARRAY
3483: PPUSH
3484: LD_INT 20
3486: PPUSH
3487: CALL 34684 0 5
// veh := CreateVehicle ;
3491: LD_ADDR_VAR 0 12
3495: PUSH
3496: CALL_OW 45
3500: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
3501: LD_VAR 0 12
3505: PPUSH
3506: LD_INT 0
3508: PPUSH
3509: LD_INT 5
3511: PPUSH
3512: CALL_OW 12
3516: PPUSH
3517: CALL_OW 233
// PlaceUnitXYR ( veh , 252 , 111 , 8 , false ) ;
3521: LD_VAR 0 12
3525: PPUSH
3526: LD_INT 252
3528: PPUSH
3529: LD_INT 111
3531: PPUSH
3532: LD_INT 8
3534: PPUSH
3535: LD_INT 0
3537: PPUSH
3538: CALL_OW 50
// end ;
3542: GO 3396
3544: POP
3545: POP
// end ; end ;
3546: LD_VAR 0 1
3550: RET
// export function PrepareRolfSquad ; var i , j ; begin
3551: LD_INT 0
3553: PPUSH
3554: PPUSH
3555: PPUSH
// uc_side := 8 ;
3556: LD_ADDR_OWVAR 20
3560: PUSH
3561: LD_INT 8
3563: ST_TO_ADDR
// uc_nation := 2 ;
3564: LD_ADDR_OWVAR 21
3568: PUSH
3569: LD_INT 2
3571: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
3572: LD_ADDR_EXP 47
3576: PUSH
3577: LD_STRING Bergkamp
3579: PPUSH
3580: CALL_OW 25
3584: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
3585: LD_ADDR_EXP 51
3589: PUSH
3590: LD_EXP 47
3594: PUSH
3595: EMPTY
3596: LIST
3597: ST_TO_ADDR
// for i := 1 to 4 do
3598: LD_ADDR_VAR 0 2
3602: PUSH
3603: DOUBLE
3604: LD_INT 1
3606: DEC
3607: ST_TO_ADDR
3608: LD_INT 4
3610: PUSH
3611: FOR_TO
3612: IFFALSE 3692
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
3614: LD_ADDR_VAR 0 3
3618: PUSH
3619: DOUBLE
3620: LD_INT 1
3622: DEC
3623: ST_TO_ADDR
3624: LD_INT 5
3626: PUSH
3627: LD_INT 2
3629: PUSH
3630: LD_INT 3
3632: PUSH
3633: LD_INT 1
3635: PUSH
3636: EMPTY
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: PUSH
3642: LD_VAR 0 2
3646: ARRAY
3647: PUSH
3648: FOR_TO
3649: IFFALSE 3688
// begin PrepareHuman ( false , i , 5 ) ;
3651: LD_INT 0
3653: PPUSH
3654: LD_VAR 0 2
3658: PPUSH
3659: LD_INT 5
3661: PPUSH
3662: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
3666: LD_ADDR_EXP 51
3670: PUSH
3671: LD_EXP 51
3675: PPUSH
3676: CALL_OW 44
3680: PPUSH
3681: CALL 67854 0 2
3685: ST_TO_ADDR
// end ;
3686: GO 3648
3688: POP
3689: POP
// end ;
3690: GO 3611
3692: POP
3693: POP
// if HexInfo ( 5 , 3 ) then
3694: LD_INT 5
3696: PPUSH
3697: LD_INT 3
3699: PPUSH
3700: CALL_OW 428
3704: IFFALSE 3721
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
3706: LD_INT 5
3708: PPUSH
3709: LD_INT 3
3711: PPUSH
3712: CALL_OW 428
3716: PPUSH
3717: CALL_OW 64
// for i in rolfSquad do
3721: LD_ADDR_VAR 0 2
3725: PUSH
3726: LD_EXP 51
3730: PUSH
3731: FOR_IN
3732: IFFALSE 3868
// begin uc_direction := 2 ;
3734: LD_ADDR_OWVAR 24
3738: PUSH
3739: LD_INT 2
3741: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
3742: LD_VAR 0 2
3746: PPUSH
3747: CALL_OW 257
3751: PUSH
3752: LD_INT 3
3754: EQUAL
3755: IFFALSE 3829
// begin uc_side := 8 ;
3757: LD_ADDR_OWVAR 20
3761: PUSH
3762: LD_INT 8
3764: ST_TO_ADDR
// uc_nation := 2 ;
3765: LD_ADDR_OWVAR 21
3769: PUSH
3770: LD_INT 2
3772: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
3773: LD_INT 13
3775: PPUSH
3776: LD_INT 1
3778: PPUSH
3779: LD_INT 1
3781: PPUSH
3782: LD_INT 27
3784: PPUSH
3785: LD_INT 88
3787: PPUSH
3788: CALL 34684 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
3792: CALL_OW 45
3796: PPUSH
3797: LD_INT 11
3799: PPUSH
3800: LD_INT 0
3802: PPUSH
3803: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
3807: LD_VAR 0 2
3811: PPUSH
3812: LD_INT 5
3814: PPUSH
3815: LD_INT 3
3817: PPUSH
3818: CALL_OW 428
3822: PPUSH
3823: CALL_OW 52
// end else
3827: GO 3844
// PlaceUnitArea ( i , northSpawn , false ) ;
3829: LD_VAR 0 2
3833: PPUSH
3834: LD_INT 11
3836: PPUSH
3837: LD_INT 0
3839: PPUSH
3840: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
3844: LD_VAR 0 2
3848: PPUSH
3849: LD_INT 29
3851: PPUSH
3852: LD_INT 10
3854: PPUSH
3855: CALL_OW 111
// wait ( 0 0$2 ) ;
3859: LD_INT 70
3861: PPUSH
3862: CALL_OW 67
// end ;
3866: GO 3731
3868: POP
3869: POP
// wait ( 0 0$5 ) ;
3870: LD_INT 175
3872: PPUSH
3873: CALL_OW 67
// end ;
3877: LD_VAR 0 1
3881: RET
// export function PrepareRolfBase ; var i , tmp ; begin
3882: LD_INT 0
3884: PPUSH
3885: PPUSH
3886: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
3887: LD_EXP 47
3891: PPUSH
3892: LD_INT 94
3894: PPUSH
3895: LD_INT 63
3897: PPUSH
3898: CALL_OW 428
3902: PPUSH
3903: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
3907: LD_ADDR_VAR 0 3
3911: PUSH
3912: LD_INT 4
3914: PUSH
3915: LD_INT 82
3917: PUSH
3918: LD_INT 64
3920: PUSH
3921: LD_INT 1
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: PUSH
3930: LD_INT 31
3932: PUSH
3933: LD_INT 73
3935: PUSH
3936: LD_INT 58
3938: PUSH
3939: LD_INT 0
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: ST_TO_ADDR
// for i in tmp do
3952: LD_ADDR_VAR 0 2
3956: PUSH
3957: LD_VAR 0 3
3961: PUSH
3962: FOR_IN
3963: IFFALSE 4027
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3965: LD_EXP 51
3969: PPUSH
3970: LD_INT 25
3972: PUSH
3973: LD_INT 2
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: PPUSH
3980: CALL_OW 72
3984: PPUSH
3985: LD_VAR 0 2
3989: PUSH
3990: LD_INT 1
3992: ARRAY
3993: PPUSH
3994: LD_VAR 0 2
3998: PUSH
3999: LD_INT 2
4001: ARRAY
4002: PPUSH
4003: LD_VAR 0 2
4007: PUSH
4008: LD_INT 3
4010: ARRAY
4011: PPUSH
4012: LD_VAR 0 2
4016: PUSH
4017: LD_INT 4
4019: ARRAY
4020: PPUSH
4021: CALL_OW 205
4025: GO 3962
4027: POP
4028: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
4029: LD_EXP 51
4033: PUSH
4034: LD_INT 2
4036: ARRAY
4037: PPUSH
4038: LD_INT 63
4040: PPUSH
4041: LD_INT 42
4043: PPUSH
4044: CALL_OW 428
4048: PPUSH
4049: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
4053: LD_EXP 51
4057: PUSH
4058: LD_INT 3
4060: ARRAY
4061: PPUSH
4062: LD_INT 94
4064: PPUSH
4065: LD_INT 63
4067: PPUSH
4068: CALL_OW 428
4072: PPUSH
4073: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4077: LD_INT 35
4079: PPUSH
4080: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
4084: LD_EXP 51
4088: PPUSH
4089: LD_INT 25
4091: PUSH
4092: LD_INT 2
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: PUSH
4099: LD_INT 3
4101: PUSH
4102: LD_INT 60
4104: PUSH
4105: EMPTY
4106: LIST
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PPUSH
4116: CALL_OW 72
4120: IFFALSE 4077
// rolfScriptBase := true ;
4122: LD_ADDR_EXP 9
4126: PUSH
4127: LD_INT 1
4129: ST_TO_ADDR
// end ;
4130: LD_VAR 0 1
4134: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
4135: LD_EXP 9
4139: IFFALSE 4156
4141: PUSH
4142: LD_EXP 47
4146: PPUSH
4147: CALL_OW 255
4151: PUSH
4152: LD_INT 8
4154: EQUAL
4155: AND
4156: IFFALSE 5175
4158: GO 4160
4160: DISABLE
4161: LD_INT 0
4163: PPUSH
4164: PPUSH
4165: PPUSH
4166: PPUSH
4167: PPUSH
4168: PPUSH
4169: PPUSH
4170: PPUSH
4171: PPUSH
4172: PPUSH
// begin enable ;
4173: ENABLE
// if not rolfSquad then
4174: LD_EXP 51
4178: NOT
4179: IFFALSE 4183
// exit ;
4181: GO 5175
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
4183: LD_ADDR_VAR 0 9
4187: PUSH
4188: LD_INT 12
4190: PPUSH
4191: LD_INT 81
4193: PUSH
4194: LD_INT 8
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: PPUSH
4201: CALL_OW 70
4205: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
4206: LD_ADDR_VAR 0 5
4210: PUSH
4211: LD_EXP 51
4215: PPUSH
4216: LD_INT 25
4218: PUSH
4219: LD_INT 1
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: PPUSH
4226: CALL_OW 72
4230: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
4231: LD_ADDR_VAR 0 6
4235: PUSH
4236: LD_EXP 51
4240: PPUSH
4241: LD_INT 25
4243: PUSH
4244: LD_INT 2
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: PPUSH
4251: CALL_OW 72
4255: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
4256: LD_ADDR_VAR 0 8
4260: PUSH
4261: LD_EXP 51
4265: PPUSH
4266: LD_INT 25
4268: PUSH
4269: LD_INT 3
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: PPUSH
4276: CALL_OW 72
4280: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
4281: LD_ADDR_VAR 0 7
4285: PUSH
4286: LD_EXP 51
4290: PPUSH
4291: LD_INT 25
4293: PUSH
4294: LD_INT 4
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: PPUSH
4301: CALL_OW 72
4305: ST_TO_ADDR
// if sol then
4306: LD_VAR 0 5
4310: IFFALSE 4612
// for i in sol union Rolf do
4312: LD_ADDR_VAR 0 1
4316: PUSH
4317: LD_VAR 0 5
4321: PUSH
4322: LD_EXP 47
4326: UNION
4327: PUSH
4328: FOR_IN
4329: IFFALSE 4610
// if not IsInUnit ( i ) and not HasTask ( i ) then
4331: LD_VAR 0 1
4335: PPUSH
4336: CALL_OW 310
4340: NOT
4341: IFFALSE 4355
4343: PUSH
4344: LD_VAR 0 1
4348: PPUSH
4349: CALL_OW 314
4353: NOT
4354: AND
4355: IFFALSE 4608
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
4357: LD_VAR 0 1
4361: PPUSH
4362: CALL_OW 256
4366: PUSH
4367: LD_INT 500
4369: LESS
4370: IFFALSE 4393
4372: PUSH
4373: LD_VAR 0 1
4377: PPUSH
4378: LD_INT 80
4380: PPUSH
4381: LD_INT 49
4383: PPUSH
4384: CALL_OW 297
4388: PUSH
4389: LD_INT 6
4391: GREATER
4392: AND
4393: IFFALSE 4412
// begin ComMoveXY ( i , 80 , 49 ) ;
4395: LD_VAR 0 1
4399: PPUSH
4400: LD_INT 80
4402: PPUSH
4403: LD_INT 49
4405: PPUSH
4406: CALL_OW 111
// continue ;
4410: GO 4328
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4412: LD_ADDR_VAR 0 4
4416: PUSH
4417: LD_INT 22
4419: PUSH
4420: LD_INT 8
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PUSH
4427: LD_INT 50
4429: PUSH
4430: EMPTY
4431: LIST
4432: PUSH
4433: LD_INT 2
4435: PUSH
4436: LD_INT 30
4438: PUSH
4439: LD_INT 4
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: PUSH
4446: LD_INT 30
4448: PUSH
4449: LD_INT 5
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: PUSH
4456: LD_INT 30
4458: PUSH
4459: LD_INT 32
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: PUSH
4466: LD_INT 30
4468: PUSH
4469: LD_INT 31
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: LIST
4487: PPUSH
4488: CALL_OW 69
4492: ST_TO_ADDR
// if tmp then
4493: LD_VAR 0 4
4497: IFFALSE 4608
// begin for b in tmp do
4499: LD_ADDR_VAR 0 2
4503: PUSH
4504: LD_VAR 0 4
4508: PUSH
4509: FOR_IN
4510: IFFALSE 4606
// begin case GetBType ( b ) of b_armoury , b_barracks :
4512: LD_VAR 0 2
4516: PPUSH
4517: CALL_OW 266
4521: PUSH
4522: LD_INT 4
4524: DOUBLE
4525: EQUAL
4526: IFTRUE 4536
4528: LD_INT 5
4530: DOUBLE
4531: EQUAL
4532: IFTRUE 4536
4534: GO 4547
4536: POP
// p := 6 ; b_breastwork , b_bunker :
4537: LD_ADDR_VAR 0 3
4541: PUSH
4542: LD_INT 6
4544: ST_TO_ADDR
4545: GO 4573
4547: LD_INT 31
4549: DOUBLE
4550: EQUAL
4551: IFTRUE 4561
4553: LD_INT 32
4555: DOUBLE
4556: EQUAL
4557: IFTRUE 4561
4559: GO 4572
4561: POP
// p := 1 ; end ;
4562: LD_ADDR_VAR 0 3
4566: PUSH
4567: LD_INT 1
4569: ST_TO_ADDR
4570: GO 4573
4572: POP
// if UnitsInside ( b ) < p then
4573: LD_VAR 0 2
4577: PPUSH
4578: CALL_OW 313
4582: PUSH
4583: LD_VAR 0 3
4587: LESS
4588: IFFALSE 4604
// ComEnterUnit ( i , b ) ;
4590: LD_VAR 0 1
4594: PPUSH
4595: LD_VAR 0 2
4599: PPUSH
4600: CALL_OW 120
// end ;
4604: GO 4509
4606: POP
4607: POP
// end ; end ;
4608: GO 4328
4610: POP
4611: POP
// if sci then
4612: LD_VAR 0 7
4616: IFFALSE 4671
// for i in sci do
4618: LD_ADDR_VAR 0 1
4622: PUSH
4623: LD_VAR 0 7
4627: PUSH
4628: FOR_IN
4629: IFFALSE 4669
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
4631: LD_VAR 0 1
4635: PPUSH
4636: LD_INT 80
4638: PPUSH
4639: LD_INT 49
4641: PPUSH
4642: CALL_OW 297
4646: PUSH
4647: LD_INT 9
4649: GREATER
4650: IFFALSE 4667
// ComMoveXY ( i , 80 , 49 ) ;
4652: LD_VAR 0 1
4656: PPUSH
4657: LD_INT 80
4659: PPUSH
4660: LD_INT 49
4662: PPUSH
4663: CALL_OW 111
// end ;
4667: GO 4628
4669: POP
4670: POP
// if mech then
4671: LD_VAR 0 8
4675: IFFALSE 4893
// for i in mech do
4677: LD_ADDR_VAR 0 1
4681: PUSH
4682: LD_VAR 0 8
4686: PUSH
4687: FOR_IN
4688: IFFALSE 4891
// begin hasVehicle := IsInUnit ( i ) ;
4690: LD_ADDR_VAR 0 10
4694: PUSH
4695: LD_VAR 0 1
4699: PPUSH
4700: CALL_OW 310
4704: ST_TO_ADDR
// if enemyInBase then
4705: LD_VAR 0 9
4709: IFFALSE 4807
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
4711: LD_VAR 0 10
4715: IFFALSE 4732
4717: PUSH
4718: LD_VAR 0 10
4722: PPUSH
4723: CALL_OW 256
4727: PUSH
4728: LD_INT 500
4730: GREATER
4731: AND
4732: IFFALSE 4760
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
4734: LD_VAR 0 10
4738: PPUSH
4739: LD_VAR 0 9
4743: PPUSH
4744: LD_VAR 0 10
4748: PPUSH
4749: CALL_OW 74
4753: PPUSH
4754: CALL_OW 115
4758: GO 4805
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
4760: LD_VAR 0 10
4764: PPUSH
4765: LD_INT 86
4767: PPUSH
4768: LD_INT 49
4770: PPUSH
4771: CALL_OW 297
4775: PUSH
4776: LD_INT 8
4778: GREATER
4779: IFFALSE 4805
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
4781: LD_VAR 0 10
4785: PPUSH
4786: LD_INT 86
4788: PPUSH
4789: LD_INT 49
4791: PPUSH
4792: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
4796: LD_VAR 0 1
4800: PPUSH
4801: CALL 69690 0 1
// end end else
4805: GO 4889
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
4807: LD_VAR 0 1
4811: PPUSH
4812: LD_INT 86
4814: PPUSH
4815: LD_INT 49
4817: PPUSH
4818: CALL_OW 297
4822: PUSH
4823: LD_INT 8
4825: GREATER
4826: IFFALSE 4845
// ComMoveXY ( i , 86 , 49 ) else
4828: LD_VAR 0 1
4832: PPUSH
4833: LD_INT 86
4835: PPUSH
4836: LD_INT 49
4838: PPUSH
4839: CALL_OW 111
4843: GO 4889
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
4845: LD_VAR 0 10
4849: IFFALSE 4866
4851: PUSH
4852: LD_VAR 0 10
4856: PPUSH
4857: CALL_OW 256
4861: PUSH
4862: LD_INT 1000
4864: LESS
4865: AND
4866: IFFALSE 4889
// begin SetFuel ( hasVehicle , 100 ) ;
4868: LD_VAR 0 10
4872: PPUSH
4873: LD_INT 100
4875: PPUSH
4876: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
4880: LD_VAR 0 1
4884: PPUSH
4885: CALL 69568 0 1
// end ; end ; end ;
4889: GO 4687
4891: POP
4892: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4893: LD_ADDR_VAR 0 4
4897: PUSH
4898: LD_INT 12
4900: PPUSH
4901: LD_INT 3
4903: PUSH
4904: LD_INT 24
4906: PUSH
4907: LD_INT 1000
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 21
4920: PUSH
4921: LD_INT 3
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: PPUSH
4932: CALL_OW 70
4936: ST_TO_ADDR
// if tmp and eng then
4937: LD_VAR 0 4
4941: IFFALSE 4949
4943: PUSH
4944: LD_VAR 0 6
4948: AND
4949: IFFALSE 5055
// begin for i in eng do
4951: LD_ADDR_VAR 0 1
4955: PUSH
4956: LD_VAR 0 6
4960: PUSH
4961: FOR_IN
4962: IFFALSE 5053
// if IsInUnit ( i ) then
4964: LD_VAR 0 1
4968: PPUSH
4969: CALL_OW 310
4973: IFFALSE 4986
// ComExitBuilding ( i ) else
4975: LD_VAR 0 1
4979: PPUSH
4980: CALL_OW 122
4984: GO 5051
// if GetLives ( i ) = 1000 then
4986: LD_VAR 0 1
4990: PPUSH
4991: CALL_OW 256
4995: PUSH
4996: LD_INT 1000
4998: EQUAL
4999: IFFALSE 5021
// ComRepairBuilding ( i , tmp [ 1 ] ) else
5001: LD_VAR 0 1
5005: PPUSH
5006: LD_VAR 0 4
5010: PUSH
5011: LD_INT 1
5013: ARRAY
5014: PPUSH
5015: CALL_OW 130
5019: GO 5051
// if GetLives ( i ) < 700 then
5021: LD_VAR 0 1
5025: PPUSH
5026: CALL_OW 256
5030: PUSH
5031: LD_INT 700
5033: LESS
5034: IFFALSE 5051
// ComMoveXY ( i , 80 , 49 ) ;
5036: LD_VAR 0 1
5040: PPUSH
5041: LD_INT 80
5043: PPUSH
5044: LD_INT 49
5046: PPUSH
5047: CALL_OW 111
5051: GO 4961
5053: POP
5054: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
5055: LD_VAR 0 4
5059: NOT
5060: IFFALSE 5086
5062: PUSH
5063: LD_VAR 0 6
5067: PPUSH
5068: LD_INT 3
5070: PUSH
5071: LD_INT 54
5073: PUSH
5074: EMPTY
5075: LIST
5076: PUSH
5077: EMPTY
5078: LIST
5079: LIST
5080: PPUSH
5081: CALL_OW 72
5085: AND
5086: IFFALSE 5175
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
5088: LD_ADDR_VAR 0 1
5092: PUSH
5093: LD_VAR 0 6
5097: PPUSH
5098: LD_INT 3
5100: PUSH
5101: LD_INT 54
5103: PUSH
5104: EMPTY
5105: LIST
5106: PUSH
5107: EMPTY
5108: LIST
5109: LIST
5110: PPUSH
5111: CALL_OW 72
5115: PUSH
5116: FOR_IN
5117: IFFALSE 5173
// if GetLives ( i ) < 1000 then
5119: LD_VAR 0 1
5123: PPUSH
5124: CALL_OW 256
5128: PUSH
5129: LD_INT 1000
5131: LESS
5132: IFFALSE 5151
// ComMoveXY ( i , 80 , 49 ) else
5134: LD_VAR 0 1
5138: PPUSH
5139: LD_INT 80
5141: PPUSH
5142: LD_INT 49
5144: PPUSH
5145: CALL_OW 111
5149: GO 5171
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
5151: LD_VAR 0 1
5155: PPUSH
5156: LD_INT 86
5158: PPUSH
5159: LD_INT 54
5161: PPUSH
5162: CALL_OW 428
5166: PPUSH
5167: CALL_OW 120
5171: GO 5116
5173: POP
5174: POP
// end ;
5175: PPOPN 10
5177: END
// export function PrepareOmarSquad ; var i , j , p ; begin
5178: LD_INT 0
5180: PPUSH
5181: PPUSH
5182: PPUSH
5183: PPUSH
// uc_side := 5 ;
5184: LD_ADDR_OWVAR 20
5188: PUSH
5189: LD_INT 5
5191: ST_TO_ADDR
// uc_nation := 2 ;
5192: LD_ADDR_OWVAR 21
5196: PUSH
5197: LD_INT 2
5199: ST_TO_ADDR
// omarSquad := [ ] ;
5200: LD_ADDR_EXP 52
5204: PUSH
5205: EMPTY
5206: ST_TO_ADDR
// for i := 1 to 4 do
5207: LD_ADDR_VAR 0 2
5211: PUSH
5212: DOUBLE
5213: LD_INT 1
5215: DEC
5216: ST_TO_ADDR
5217: LD_INT 4
5219: PUSH
5220: FOR_TO
5221: IFFALSE 5346
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
5223: LD_ADDR_VAR 0 3
5227: PUSH
5228: DOUBLE
5229: LD_INT 1
5231: DEC
5232: ST_TO_ADDR
5233: LD_INT 6
5235: PUSH
5236: LD_INT 2
5238: PUSH
5239: LD_INT 2
5241: PUSH
5242: LD_EXP 21
5246: PLUS
5247: PUSH
5248: LD_INT 2
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: PUSH
5257: LD_VAR 0 2
5261: ARRAY
5262: PUSH
5263: FOR_TO
5264: IFFALSE 5342
// begin PrepareHuman ( false , i , 5 ) ;
5266: LD_INT 0
5268: PPUSH
5269: LD_VAR 0 2
5273: PPUSH
5274: LD_INT 5
5276: PPUSH
5277: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
5281: LD_ADDR_EXP 52
5285: PUSH
5286: LD_EXP 52
5290: PPUSH
5291: CALL_OW 44
5295: PPUSH
5296: CALL 67854 0 2
5300: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
5301: LD_VAR 0 2
5305: PUSH
5306: LD_INT 1
5308: EQUAL
5309: IFFALSE 5320
5311: PUSH
5312: LD_INT 50
5314: PPUSH
5315: CALL_OW 13
5319: AND
5320: IFFALSE 5340
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
5322: LD_EXP 52
5326: PUSH
5327: LD_EXP 52
5331: ARRAY
5332: PPUSH
5333: LD_INT 8
5335: PPUSH
5336: CALL_OW 336
// end ;
5340: GO 5263
5342: POP
5343: POP
// end ;
5344: GO 5220
5346: POP
5347: POP
// if HexInfo ( 340 , 205 ) then
5348: LD_INT 340
5350: PPUSH
5351: LD_INT 205
5353: PPUSH
5354: CALL_OW 428
5358: IFFALSE 5375
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
5360: LD_INT 340
5362: PPUSH
5363: LD_INT 205
5365: PPUSH
5366: CALL_OW 428
5370: PPUSH
5371: CALL_OW 64
// p := 0 ;
5375: LD_ADDR_VAR 0 4
5379: PUSH
5380: LD_INT 0
5382: ST_TO_ADDR
// for i in omarSquad do
5383: LD_ADDR_VAR 0 2
5387: PUSH
5388: LD_EXP 52
5392: PUSH
5393: FOR_IN
5394: IFFALSE 5597
// begin uc_direction := 4 ;
5396: LD_ADDR_OWVAR 24
5400: PUSH
5401: LD_INT 4
5403: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
5404: LD_VAR 0 2
5408: PPUSH
5409: CALL_OW 257
5413: PUSH
5414: LD_INT 3
5416: EQUAL
5417: IFFALSE 5429
5419: PUSH
5420: LD_VAR 0 4
5424: PUSH
5425: LD_INT 2
5427: LESS
5428: AND
5429: IFFALSE 5558
// begin p := p + 1 ;
5431: LD_ADDR_VAR 0 4
5435: PUSH
5436: LD_VAR 0 4
5440: PUSH
5441: LD_INT 1
5443: PLUS
5444: ST_TO_ADDR
// uc_side := 5 ;
5445: LD_ADDR_OWVAR 20
5449: PUSH
5450: LD_INT 5
5452: ST_TO_ADDR
// if rand ( 0 , 1 ) then
5453: LD_INT 0
5455: PPUSH
5456: LD_INT 1
5458: PPUSH
5459: CALL_OW 12
5463: IFFALSE 5494
// begin uc_nation := 2 ;
5465: LD_ADDR_OWVAR 21
5469: PUSH
5470: LD_INT 2
5472: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
5473: LD_INT 13
5475: PPUSH
5476: LD_INT 1
5478: PPUSH
5479: LD_INT 1
5481: PPUSH
5482: LD_INT 27
5484: PPUSH
5485: LD_INT 88
5487: PPUSH
5488: CALL 34684 0 5
// end else
5492: GO 5521
// begin uc_nation := 3 ;
5494: LD_ADDR_OWVAR 21
5498: PUSH
5499: LD_INT 3
5501: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
5502: LD_INT 22
5504: PPUSH
5505: LD_INT 1
5507: PPUSH
5508: LD_INT 1
5510: PPUSH
5511: LD_INT 45
5513: PPUSH
5514: LD_INT 88
5516: PPUSH
5517: CALL 34684 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
5521: CALL_OW 45
5525: PPUSH
5526: LD_INT 13
5528: PPUSH
5529: LD_INT 0
5531: PPUSH
5532: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
5536: LD_VAR 0 2
5540: PPUSH
5541: LD_INT 340
5543: PPUSH
5544: LD_INT 205
5546: PPUSH
5547: CALL_OW 428
5551: PPUSH
5552: CALL_OW 52
// end else
5556: GO 5573
// PlaceUnitArea ( i , southSpawn , false ) ;
5558: LD_VAR 0 2
5562: PPUSH
5563: LD_INT 13
5565: PPUSH
5566: LD_INT 0
5568: PPUSH
5569: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
5573: LD_VAR 0 2
5577: PPUSH
5578: LD_INT 333
5580: PPUSH
5581: LD_INT 210
5583: PPUSH
5584: CALL_OW 111
// wait ( 0 0$2 ) ;
5588: LD_INT 70
5590: PPUSH
5591: CALL_OW 67
// end ;
5595: GO 5393
5597: POP
5598: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
5599: LD_EXP 44
5603: PPUSH
5604: LD_INT 340
5606: PPUSH
5607: LD_INT 205
5609: PPUSH
5610: LD_INT 0
5612: PPUSH
5613: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
5617: LD_EXP 44
5621: PPUSH
5622: LD_INT 333
5624: PPUSH
5625: LD_INT 206
5627: PPUSH
5628: CALL_OW 111
// wait ( 0 0$2 ) ;
5632: LD_INT 70
5634: PPUSH
5635: CALL_OW 67
// ComHold ( omarSquad ) ;
5639: LD_EXP 52
5643: PPUSH
5644: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
5648: LD_EXP 44
5652: PUSH
5653: LD_EXP 52
5657: PPUSH
5658: LD_INT 2
5660: PUSH
5661: LD_INT 25
5663: PUSH
5664: LD_INT 1
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: PUSH
5671: LD_INT 25
5673: PUSH
5674: LD_INT 8
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: LIST
5685: PPUSH
5686: CALL_OW 72
5690: UNION
5691: PUSH
5692: LD_INT 22
5694: PUSH
5695: LD_INT 5
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: PUSH
5702: LD_INT 21
5704: PUSH
5705: LD_INT 2
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: PUSH
5712: EMPTY
5713: LIST
5714: LIST
5715: PPUSH
5716: CALL_OW 69
5720: UNION
5721: PPUSH
5722: LD_INT 315
5724: PPUSH
5725: LD_INT 214
5727: PPUSH
5728: CALL_OW 114
// wait ( 0 0$22 ) ;
5732: LD_INT 770
5734: PPUSH
5735: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
5739: LD_EXP 52
5743: PUSH
5744: LD_EXP 44
5748: UNION
5749: PPUSH
5750: LD_INT 329
5752: PPUSH
5753: LD_INT 231
5755: PPUSH
5756: CALL_OW 114
// end ;
5760: LD_VAR 0 1
5764: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
5765: LD_EXP 10
5769: IFFALSE 6866
5771: GO 5773
5773: DISABLE
5774: LD_INT 0
5776: PPUSH
5777: PPUSH
5778: PPUSH
5779: PPUSH
5780: PPUSH
5781: PPUSH
5782: PPUSH
5783: PPUSH
5784: PPUSH
5785: PPUSH
5786: PPUSH
// begin enable ;
5787: ENABLE
// if not omarSquad then
5788: LD_EXP 52
5792: NOT
5793: IFFALSE 5797
// exit ;
5795: GO 6866
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
5797: LD_ADDR_VAR 0 10
5801: PUSH
5802: LD_INT 14
5804: PPUSH
5805: LD_INT 81
5807: PUSH
5808: LD_INT 5
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: PPUSH
5815: CALL_OW 70
5819: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
5820: LD_ADDR_VAR 0 6
5824: PUSH
5825: LD_EXP 52
5829: PPUSH
5830: LD_INT 2
5832: PUSH
5833: LD_INT 25
5835: PUSH
5836: LD_INT 1
5838: PUSH
5839: EMPTY
5840: LIST
5841: LIST
5842: PUSH
5843: LD_INT 25
5845: PUSH
5846: LD_INT 8
5848: PUSH
5849: EMPTY
5850: LIST
5851: LIST
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: LIST
5857: PPUSH
5858: CALL_OW 72
5862: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
5863: LD_ADDR_VAR 0 7
5867: PUSH
5868: LD_EXP 52
5872: PPUSH
5873: LD_INT 25
5875: PUSH
5876: LD_INT 2
5878: PUSH
5879: EMPTY
5880: LIST
5881: LIST
5882: PPUSH
5883: CALL_OW 72
5887: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
5888: LD_ADDR_VAR 0 9
5892: PUSH
5893: LD_EXP 52
5897: PPUSH
5898: LD_INT 25
5900: PUSH
5901: LD_INT 3
5903: PUSH
5904: EMPTY
5905: LIST
5906: LIST
5907: PPUSH
5908: CALL_OW 72
5912: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
5913: LD_ADDR_VAR 0 8
5917: PUSH
5918: LD_EXP 52
5922: PPUSH
5923: LD_INT 25
5925: PUSH
5926: LD_INT 4
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: PPUSH
5933: CALL_OW 72
5937: ST_TO_ADDR
// if sol then
5938: LD_VAR 0 6
5942: IFFALSE 6312
// for i in sol do
5944: LD_ADDR_VAR 0 1
5948: PUSH
5949: LD_VAR 0 6
5953: PUSH
5954: FOR_IN
5955: IFFALSE 6310
// if not HasTask ( i ) then
5957: LD_VAR 0 1
5961: PPUSH
5962: CALL_OW 314
5966: NOT
5967: IFFALSE 6308
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
5969: LD_VAR 0 1
5973: PPUSH
5974: CALL_OW 310
5978: NOT
5979: IFFALSE 5996
5981: PUSH
5982: LD_VAR 0 1
5986: PPUSH
5987: CALL_OW 256
5991: PUSH
5992: LD_INT 500
5994: LESS
5995: AND
5996: IFFALSE 6019
5998: PUSH
5999: LD_VAR 0 1
6003: PPUSH
6004: LD_INT 333
6006: PPUSH
6007: LD_INT 234
6009: PPUSH
6010: CALL_OW 297
6014: PUSH
6015: LD_INT 6
6017: GREATER
6018: AND
6019: IFFALSE 6038
// begin ComMoveXY ( i , 333 , 234 ) ;
6021: LD_VAR 0 1
6025: PPUSH
6026: LD_INT 333
6028: PPUSH
6029: LD_INT 234
6031: PPUSH
6032: CALL_OW 111
// continue ;
6036: GO 5954
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
6038: LD_ADDR_VAR 0 5
6042: PUSH
6043: LD_INT 22
6045: PUSH
6046: LD_INT 5
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: PUSH
6053: LD_INT 58
6055: PUSH
6056: EMPTY
6057: LIST
6058: PUSH
6059: LD_INT 50
6061: PUSH
6062: EMPTY
6063: LIST
6064: PUSH
6065: LD_INT 2
6067: PUSH
6068: LD_INT 30
6070: PUSH
6071: LD_INT 32
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: PUSH
6078: LD_INT 30
6080: PUSH
6081: LD_INT 31
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: LIST
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: PPUSH
6099: CALL_OW 69
6103: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
6104: LD_VAR 0 5
6108: IFFALSE 6130
6110: PUSH
6111: LD_VAR 0 1
6115: PPUSH
6116: CALL_OW 310
6120: PPUSH
6121: CALL_OW 266
6125: PUSH
6126: LD_INT 31
6128: NONEQUAL
6129: AND
6130: IFFALSE 6212
// begin for j in tmp do
6132: LD_ADDR_VAR 0 2
6136: PUSH
6137: LD_VAR 0 5
6141: PUSH
6142: FOR_IN
6143: IFFALSE 6208
// if GetTag ( j ) <> 1 then
6145: LD_VAR 0 2
6149: PPUSH
6150: CALL_OW 110
6154: PUSH
6155: LD_INT 1
6157: NONEQUAL
6158: IFFALSE 6206
// begin SetTag ( j , 1 ) ;
6160: LD_VAR 0 2
6164: PPUSH
6165: LD_INT 1
6167: PPUSH
6168: CALL_OW 109
// if IsInUnit ( i ) then
6172: LD_VAR 0 1
6176: PPUSH
6177: CALL_OW 310
6181: IFFALSE 6192
// ComExit ( i ) ;
6183: LD_VAR 0 1
6187: PPUSH
6188: CALL 68252 0 1
// AddComEnterUnit ( i , j ) ;
6192: LD_VAR 0 1
6196: PPUSH
6197: LD_VAR 0 2
6201: PPUSH
6202: CALL_OW 180
// end ;
6206: GO 6142
6208: POP
6209: POP
// end else
6210: GO 6308
// if not IsInUnit ( i ) then
6212: LD_VAR 0 1
6216: PPUSH
6217: CALL_OW 310
6221: NOT
6222: IFFALSE 6308
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
6224: LD_ADDR_VAR 0 5
6228: PUSH
6229: LD_INT 22
6231: PUSH
6232: LD_INT 5
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PUSH
6239: LD_INT 50
6241: PUSH
6242: EMPTY
6243: LIST
6244: PUSH
6245: LD_INT 30
6247: PUSH
6248: LD_INT 4
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: EMPTY
6256: LIST
6257: LIST
6258: LIST
6259: PPUSH
6260: CALL_OW 69
6264: ST_TO_ADDR
// if tmp then
6265: LD_VAR 0 5
6269: IFFALSE 6308
// if UnitsInside ( tmp [ 1 ] ) < 6 then
6271: LD_VAR 0 5
6275: PUSH
6276: LD_INT 1
6278: ARRAY
6279: PPUSH
6280: CALL_OW 313
6284: PUSH
6285: LD_INT 6
6287: LESS
6288: IFFALSE 6308
// ComEnterUnit ( i , tmp [ 1 ] ) ;
6290: LD_VAR 0 1
6294: PPUSH
6295: LD_VAR 0 5
6299: PUSH
6300: LD_INT 1
6302: ARRAY
6303: PPUSH
6304: CALL_OW 120
// end ; end ;
6308: GO 5954
6310: POP
6311: POP
// if sci then
6312: LD_VAR 0 8
6316: IFFALSE 6371
// for i in sci do
6318: LD_ADDR_VAR 0 1
6322: PUSH
6323: LD_VAR 0 8
6327: PUSH
6328: FOR_IN
6329: IFFALSE 6369
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
6331: LD_VAR 0 1
6335: PPUSH
6336: LD_INT 333
6338: PPUSH
6339: LD_INT 234
6341: PPUSH
6342: CALL_OW 297
6346: PUSH
6347: LD_INT 9
6349: GREATER
6350: IFFALSE 6367
// ComMoveXY ( i , 333 , 234 ) ;
6352: LD_VAR 0 1
6356: PPUSH
6357: LD_INT 333
6359: PPUSH
6360: LD_INT 234
6362: PPUSH
6363: CALL_OW 111
// end ;
6367: GO 6328
6369: POP
6370: POP
// if mech then
6371: LD_VAR 0 9
6375: IFFALSE 6584
// for i in mech do
6377: LD_ADDR_VAR 0 1
6381: PUSH
6382: LD_VAR 0 9
6386: PUSH
6387: FOR_IN
6388: IFFALSE 6582
// begin hasVehicle := IsInUnit ( i ) ;
6390: LD_ADDR_VAR 0 11
6394: PUSH
6395: LD_VAR 0 1
6399: PPUSH
6400: CALL_OW 310
6404: ST_TO_ADDR
// if enemyInBase then
6405: LD_VAR 0 10
6409: IFFALSE 6498
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
6411: LD_VAR 0 11
6415: IFFALSE 6432
6417: PUSH
6418: LD_VAR 0 11
6422: PPUSH
6423: CALL_OW 256
6427: PUSH
6428: LD_INT 500
6430: GREATER
6431: AND
6432: IFFALSE 6460
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
6434: LD_VAR 0 11
6438: PPUSH
6439: LD_VAR 0 10
6443: PPUSH
6444: LD_VAR 0 11
6448: PPUSH
6449: CALL_OW 74
6453: PPUSH
6454: CALL_OW 115
6458: GO 6496
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
6460: LD_VAR 0 11
6464: PPUSH
6465: LD_INT 333
6467: PPUSH
6468: LD_INT 234
6470: PPUSH
6471: CALL_OW 297
6475: PUSH
6476: LD_INT 6
6478: GREATER
6479: IFFALSE 6496
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
6481: LD_VAR 0 11
6485: PPUSH
6486: LD_INT 333
6488: PPUSH
6489: LD_INT 234
6491: PPUSH
6492: CALL_OW 111
// end else
6496: GO 6580
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
6498: LD_VAR 0 1
6502: PPUSH
6503: LD_INT 333
6505: PPUSH
6506: LD_INT 234
6508: PPUSH
6509: CALL_OW 297
6513: PUSH
6514: LD_INT 6
6516: GREATER
6517: IFFALSE 6536
// ComMoveXY ( i , 333 , 234 ) else
6519: LD_VAR 0 1
6523: PPUSH
6524: LD_INT 333
6526: PPUSH
6527: LD_INT 234
6529: PPUSH
6530: CALL_OW 111
6534: GO 6580
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
6536: LD_VAR 0 11
6540: IFFALSE 6557
6542: PUSH
6543: LD_VAR 0 11
6547: PPUSH
6548: CALL_OW 256
6552: PUSH
6553: LD_INT 1000
6555: LESS
6556: AND
6557: IFFALSE 6580
// begin SetFuel ( hasVehicle , 100 ) ;
6559: LD_VAR 0 11
6563: PPUSH
6564: LD_INT 100
6566: PPUSH
6567: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
6571: LD_VAR 0 1
6575: PPUSH
6576: CALL 69568 0 1
// end ; end ; end ;
6580: GO 6387
6582: POP
6583: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6584: LD_ADDR_VAR 0 5
6588: PUSH
6589: LD_INT 14
6591: PPUSH
6592: LD_INT 3
6594: PUSH
6595: LD_INT 24
6597: PUSH
6598: LD_INT 1000
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: LD_INT 21
6611: PUSH
6612: LD_INT 3
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: PPUSH
6623: CALL_OW 70
6627: ST_TO_ADDR
// if tmp and eng then
6628: LD_VAR 0 5
6632: IFFALSE 6640
6634: PUSH
6635: LD_VAR 0 7
6639: AND
6640: IFFALSE 6746
// begin for i in eng do
6642: LD_ADDR_VAR 0 1
6646: PUSH
6647: LD_VAR 0 7
6651: PUSH
6652: FOR_IN
6653: IFFALSE 6744
// if IsInUnit ( i ) then
6655: LD_VAR 0 1
6659: PPUSH
6660: CALL_OW 310
6664: IFFALSE 6677
// ComExitBuilding ( i ) else
6666: LD_VAR 0 1
6670: PPUSH
6671: CALL_OW 122
6675: GO 6742
// if GetLives ( i ) = 1000 then
6677: LD_VAR 0 1
6681: PPUSH
6682: CALL_OW 256
6686: PUSH
6687: LD_INT 1000
6689: EQUAL
6690: IFFALSE 6712
// ComRepairBuilding ( i , tmp [ 1 ] ) else
6692: LD_VAR 0 1
6696: PPUSH
6697: LD_VAR 0 5
6701: PUSH
6702: LD_INT 1
6704: ARRAY
6705: PPUSH
6706: CALL_OW 130
6710: GO 6742
// if GetLives ( i ) < 700 then
6712: LD_VAR 0 1
6716: PPUSH
6717: CALL_OW 256
6721: PUSH
6722: LD_INT 700
6724: LESS
6725: IFFALSE 6742
// ComMoveXY ( i , 333 , 234 ) ;
6727: LD_VAR 0 1
6731: PPUSH
6732: LD_INT 333
6734: PPUSH
6735: LD_INT 234
6737: PPUSH
6738: CALL_OW 111
6742: GO 6652
6744: POP
6745: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
6746: LD_VAR 0 5
6750: NOT
6751: IFFALSE 6777
6753: PUSH
6754: LD_VAR 0 7
6758: PPUSH
6759: LD_INT 3
6761: PUSH
6762: LD_INT 54
6764: PUSH
6765: EMPTY
6766: LIST
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: PPUSH
6772: CALL_OW 72
6776: AND
6777: IFFALSE 6866
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
6779: LD_ADDR_VAR 0 1
6783: PUSH
6784: LD_VAR 0 7
6788: PPUSH
6789: LD_INT 3
6791: PUSH
6792: LD_INT 54
6794: PUSH
6795: EMPTY
6796: LIST
6797: PUSH
6798: EMPTY
6799: LIST
6800: LIST
6801: PPUSH
6802: CALL_OW 72
6806: PUSH
6807: FOR_IN
6808: IFFALSE 6864
// if GetLives ( i ) < 1000 then
6810: LD_VAR 0 1
6814: PPUSH
6815: CALL_OW 256
6819: PUSH
6820: LD_INT 1000
6822: LESS
6823: IFFALSE 6842
// ComMoveXY ( i , 333 , 234 ) else
6825: LD_VAR 0 1
6829: PPUSH
6830: LD_INT 333
6832: PPUSH
6833: LD_INT 234
6835: PPUSH
6836: CALL_OW 111
6840: GO 6862
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
6842: LD_VAR 0 1
6846: PPUSH
6847: LD_INT 341
6849: PPUSH
6850: LD_INT 232
6852: PPUSH
6853: CALL_OW 428
6857: PPUSH
6858: CALL_OW 120
6862: GO 6807
6864: POP
6865: POP
// end ;
6866: PPOPN 11
6868: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
6869: LD_EXP 44
6873: PPUSH
6874: CALL_OW 256
6878: PUSH
6879: LD_INT 1000
6881: LESS
6882: IFFALSE 6900
6884: GO 6886
6886: DISABLE
// begin enable ;
6887: ENABLE
// SetLives ( Omar , 1000 ) ;
6888: LD_EXP 44
6892: PPUSH
6893: LD_INT 1000
6895: PPUSH
6896: CALL_OW 234
// end ;
6900: END
// every 0 0$1 trigger GetLives ( Rolf ) < 1000 and rolfAttack do
6901: LD_EXP 47
6905: PPUSH
6906: CALL_OW 256
6910: PUSH
6911: LD_INT 1000
6913: LESS
6914: IFFALSE 6922
6916: PUSH
6917: LD_EXP 32
6921: AND
6922: IFFALSE 6940
6924: GO 6926
6926: DISABLE
// begin enable ;
6927: ENABLE
// SetLives ( Rolf , 1000 ) ;
6928: LD_EXP 47
6932: PPUSH
6933: LD_INT 1000
6935: PPUSH
6936: CALL_OW 234
// end ;
6940: END
// every 0 0$1 trigger rolfAttack do var i , tmp , mech , path , tag , rolfCoords ;
6941: LD_EXP 32
6945: IFFALSE 7635
6947: GO 6949
6949: DISABLE
6950: LD_INT 0
6952: PPUSH
6953: PPUSH
6954: PPUSH
6955: PPUSH
6956: PPUSH
6957: PPUSH
// begin path := [ [ 215 , 162 ] , [ 195 , 163 ] , [ 174 , 162 ] , [ 145 , 163 ] , [ 127 , 163 ] ] ;
6958: LD_ADDR_VAR 0 4
6962: PUSH
6963: LD_INT 215
6965: PUSH
6966: LD_INT 162
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: PUSH
6973: LD_INT 195
6975: PUSH
6976: LD_INT 163
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: PUSH
6983: LD_INT 174
6985: PUSH
6986: LD_INT 162
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 145
6995: PUSH
6996: LD_INT 163
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: LD_INT 127
7005: PUSH
7006: LD_INT 163
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: ST_TO_ADDR
// rolfCoords := [ 221 , 161 ] ;
7020: LD_ADDR_VAR 0 6
7024: PUSH
7025: LD_INT 221
7027: PUSH
7028: LD_INT 161
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: ST_TO_ADDR
// tmp := Rolf union rolfSquad ;
7035: LD_ADDR_VAR 0 2
7039: PUSH
7040: LD_EXP 47
7044: PUSH
7045: LD_EXP 51
7049: UNION
7050: ST_TO_ADDR
// if not tmp then
7051: LD_VAR 0 2
7055: NOT
7056: IFFALSE 7060
// exit ;
7058: GO 7635
// ComMoveXY ( tmp , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7060: LD_VAR 0 2
7064: PPUSH
7065: LD_VAR 0 6
7069: PUSH
7070: LD_INT 1
7072: ARRAY
7073: PPUSH
7074: LD_VAR 0 6
7078: PUSH
7079: LD_INT 2
7081: ARRAY
7082: PPUSH
7083: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7087: LD_INT 35
7089: PPUSH
7090: CALL_OW 67
// tmp := UnitFilter ( rolfSquad , [ [ f_not , [ f_driving ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) ;
7094: LD_ADDR_VAR 0 2
7098: PUSH
7099: LD_EXP 51
7103: PPUSH
7104: LD_INT 3
7106: PUSH
7107: LD_INT 55
7109: PUSH
7110: EMPTY
7111: LIST
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 2
7119: PUSH
7120: LD_INT 25
7122: PUSH
7123: LD_INT 1
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: PUSH
7130: LD_INT 25
7132: PUSH
7133: LD_INT 8
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: LIST
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PPUSH
7149: CALL_OW 72
7153: ST_TO_ADDR
// if tmp then
7154: LD_VAR 0 2
7158: IFFALSE 7313
// begin for i in tmp do
7160: LD_ADDR_VAR 0 1
7164: PUSH
7165: LD_VAR 0 2
7169: PUSH
7170: FOR_IN
7171: IFFALSE 7311
// begin tag := GetTag ( i ) ;
7173: LD_ADDR_VAR 0 5
7177: PUSH
7178: LD_VAR 0 1
7182: PPUSH
7183: CALL_OW 110
7187: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
7188: LD_VAR 0 1
7192: PPUSH
7193: CALL_OW 256
7197: PUSH
7198: LD_INT 800
7200: LESS
7201: IFFALSE 7213
7203: PUSH
7204: LD_VAR 0 5
7208: PUSH
7209: LD_INT 101
7211: LESS
7212: AND
7213: IFFALSE 7256
// begin SetTag ( i , 101 ) ;
7215: LD_VAR 0 1
7219: PPUSH
7220: LD_INT 101
7222: PPUSH
7223: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7227: LD_VAR 0 1
7231: PPUSH
7232: LD_VAR 0 6
7236: PUSH
7237: LD_INT 1
7239: ARRAY
7240: PPUSH
7241: LD_VAR 0 6
7245: PUSH
7246: LD_INT 2
7248: ARRAY
7249: PPUSH
7250: CALL_OW 111
// end else
7254: GO 7309
// if tag = 101 then
7256: LD_VAR 0 5
7260: PUSH
7261: LD_INT 101
7263: EQUAL
7264: IFFALSE 7295
// begin if GetLives ( i ) = 1000 then
7266: LD_VAR 0 1
7270: PPUSH
7271: CALL_OW 256
7275: PUSH
7276: LD_INT 1000
7278: EQUAL
7279: IFFALSE 7293
// SetTag ( i , 0 ) ;
7281: LD_VAR 0 1
7285: PPUSH
7286: LD_INT 0
7288: PPUSH
7289: CALL_OW 109
// end else
7293: GO 7309
// AgressiveMove ( i , path ) ;
7295: LD_VAR 0 1
7299: PPUSH
7300: LD_VAR 0 4
7304: PPUSH
7305: CALL 70620 0 2
// end ;
7309: GO 7170
7311: POP
7312: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
7313: LD_ADDR_VAR 0 2
7317: PUSH
7318: LD_INT 22
7320: PUSH
7321: LD_INT 8
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: PUSH
7328: LD_INT 21
7330: PUSH
7331: LD_INT 2
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: PUSH
7338: LD_INT 3
7340: PUSH
7341: LD_INT 34
7343: PUSH
7344: LD_INT 32
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: LIST
7359: PPUSH
7360: CALL_OW 69
7364: ST_TO_ADDR
// if not tmp then
7365: LD_VAR 0 2
7369: NOT
7370: IFFALSE 7374
// continue ;
7372: GO 7087
// for i in tmp do
7374: LD_ADDR_VAR 0 1
7378: PUSH
7379: LD_VAR 0 2
7383: PUSH
7384: FOR_IN
7385: IFFALSE 7626
// begin mech := IsDrivenBy ( i ) ;
7387: LD_ADDR_VAR 0 3
7391: PUSH
7392: LD_VAR 0 1
7396: PPUSH
7397: CALL_OW 311
7401: ST_TO_ADDR
// if not mech then
7402: LD_VAR 0 3
7406: NOT
7407: IFFALSE 7411
// continue ;
7409: GO 7384
// tag := GetTag ( i ) ;
7411: LD_ADDR_VAR 0 5
7415: PUSH
7416: LD_VAR 0 1
7420: PPUSH
7421: CALL_OW 110
7425: ST_TO_ADDR
// if GetLives ( i ) >= 600 and tag < 101 then
7426: LD_VAR 0 1
7430: PPUSH
7431: CALL_OW 256
7435: PUSH
7436: LD_INT 600
7438: GREATEREQUAL
7439: IFFALSE 7451
7441: PUSH
7442: LD_VAR 0 5
7446: PUSH
7447: LD_INT 101
7449: LESS
7450: AND
7451: IFFALSE 7467
// AgressiveMove ( i , path ) ;
7453: LD_VAR 0 1
7457: PPUSH
7458: LD_VAR 0 4
7462: PPUSH
7463: CALL 70620 0 2
// if GetLives ( i ) < 600 and tag < 101 then
7467: LD_VAR 0 1
7471: PPUSH
7472: CALL_OW 256
7476: PUSH
7477: LD_INT 600
7479: LESS
7480: IFFALSE 7492
7482: PUSH
7483: LD_VAR 0 5
7487: PUSH
7488: LD_INT 101
7490: LESS
7491: AND
7492: IFFALSE 7533
// begin SetTag ( i , 101 ) ;
7494: LD_VAR 0 1
7498: PPUSH
7499: LD_INT 101
7501: PPUSH
7502: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7506: LD_VAR 0 1
7510: PPUSH
7511: LD_VAR 0 6
7515: PUSH
7516: LD_INT 1
7518: ARRAY
7519: PPUSH
7520: LD_VAR 0 6
7524: PUSH
7525: LD_INT 2
7527: ARRAY
7528: PPUSH
7529: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) < 9 and mech then
7533: LD_VAR 0 5
7537: PUSH
7538: LD_INT 101
7540: EQUAL
7541: IFFALSE 7576
7543: PUSH
7544: LD_VAR 0 1
7548: PPUSH
7549: LD_VAR 0 6
7553: PUSH
7554: LD_INT 1
7556: ARRAY
7557: PPUSH
7558: LD_VAR 0 6
7562: PUSH
7563: LD_INT 2
7565: ARRAY
7566: PPUSH
7567: CALL_OW 297
7571: PUSH
7572: LD_INT 9
7574: LESS
7575: AND
7576: IFFALSE 7584
7578: PUSH
7579: LD_VAR 0 3
7583: AND
7584: IFFALSE 7624
// begin if GetLives ( i ) < 1000 then
7586: LD_VAR 0 1
7590: PPUSH
7591: CALL_OW 256
7595: PUSH
7596: LD_INT 1000
7598: LESS
7599: IFFALSE 7612
// AddComRepairVehicleAndReturn ( mech ) else
7601: LD_VAR 0 3
7605: PPUSH
7606: CALL 69690 0 1
7610: GO 7624
// SetTag ( i , 0 ) ;
7612: LD_VAR 0 1
7616: PPUSH
7617: LD_INT 0
7619: PPUSH
7620: CALL_OW 109
// end ; end ;
7624: GO 7384
7626: POP
7627: POP
// until not tmp ;
7628: LD_VAR 0 2
7632: NOT
7633: IFFALSE 7087
// end ;
7635: PPOPN 6
7637: END
// every 0 0$1 trigger omarAttack do var i , cargo , tmp , tag , mech , x , path , omarAttackCoords ;
7638: LD_EXP 23
7642: IFFALSE 8961
7644: GO 7646
7646: DISABLE
7647: LD_INT 0
7649: PPUSH
7650: PPUSH
7651: PPUSH
7652: PPUSH
7653: PPUSH
7654: PPUSH
7655: PPUSH
7656: PPUSH
// begin path := [ [ 209 , 221 ] , [ 190 , 220 ] , [ 177 , 220 ] , [ 168 , 223 ] , [ 150 , 206 ] ] ;
7657: LD_ADDR_VAR 0 7
7661: PUSH
7662: LD_INT 209
7664: PUSH
7665: LD_INT 221
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: LD_INT 190
7674: PUSH
7675: LD_INT 220
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PUSH
7682: LD_INT 177
7684: PUSH
7685: LD_INT 220
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PUSH
7692: LD_INT 168
7694: PUSH
7695: LD_INT 223
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PUSH
7702: LD_INT 150
7704: PUSH
7705: LD_INT 206
7707: PUSH
7708: EMPTY
7709: LIST
7710: LIST
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: ST_TO_ADDR
// omarAttackCoords := [ 219 , 225 , 0 ] ;
7719: LD_ADDR_VAR 0 8
7723: PUSH
7724: LD_INT 219
7726: PUSH
7727: LD_INT 225
7729: PUSH
7730: LD_INT 0
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: LIST
7737: ST_TO_ADDR
// for i := 1 to 2 do
7738: LD_ADDR_VAR 0 1
7742: PUSH
7743: DOUBLE
7744: LD_INT 1
7746: DEC
7747: ST_TO_ADDR
7748: LD_INT 2
7750: PUSH
7751: FOR_TO
7752: IFFALSE 7901
// begin uc_side := 5 ;
7754: LD_ADDR_OWVAR 20
7758: PUSH
7759: LD_INT 5
7761: ST_TO_ADDR
// uc_nation := 2 ;
7762: LD_ADDR_OWVAR 21
7766: PUSH
7767: LD_INT 2
7769: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
7770: LD_INT 14
7772: PPUSH
7773: LD_INT 1
7775: PPUSH
7776: LD_INT 1
7778: PPUSH
7779: LD_INT 32
7781: PPUSH
7782: LD_INT 80
7784: PPUSH
7785: CALL 34684 0 5
// cargo := Join ( cargo , CreateVehicle ) ;
7789: LD_ADDR_VAR 0 2
7793: PUSH
7794: LD_VAR 0 2
7798: PPUSH
7799: CALL_OW 45
7803: PPUSH
7804: CALL 67854 0 2
7808: ST_TO_ADDR
// SetDir ( cargo [ i ] , 4 ) ;
7809: LD_VAR 0 2
7813: PUSH
7814: LD_VAR 0 1
7818: ARRAY
7819: PPUSH
7820: LD_INT 4
7822: PPUSH
7823: CALL_OW 233
// PlaceUnitArea ( cargo [ i ] , omarVehiclesArea , false ) ;
7827: LD_VAR 0 2
7831: PUSH
7832: LD_VAR 0 1
7836: ARRAY
7837: PPUSH
7838: LD_INT 16
7840: PPUSH
7841: LD_INT 0
7843: PPUSH
7844: CALL_OW 49
// PrepareMechanic ( false , 4 ) ;
7848: LD_INT 0
7850: PPUSH
7851: LD_INT 4
7853: PPUSH
7854: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo [ i ] ) ;
7858: CALL_OW 44
7862: PPUSH
7863: LD_VAR 0 2
7867: PUSH
7868: LD_VAR 0 1
7872: ARRAY
7873: PPUSH
7874: CALL_OW 52
// ComMoveXY ( cargo [ i ] , 337 , 232 ) ;
7878: LD_VAR 0 2
7882: PUSH
7883: LD_VAR 0 1
7887: ARRAY
7888: PPUSH
7889: LD_INT 337
7891: PPUSH
7892: LD_INT 232
7894: PPUSH
7895: CALL_OW 111
// end ;
7899: GO 7751
7901: POP
7902: POP
// wait ( 0 0$25 ) ;
7903: LD_INT 875
7905: PPUSH
7906: CALL_OW 67
// for i := 1 to 2 do
7910: LD_ADDR_VAR 0 1
7914: PUSH
7915: DOUBLE
7916: LD_INT 1
7918: DEC
7919: ST_TO_ADDR
7920: LD_INT 2
7922: PUSH
7923: FOR_TO
7924: IFFALSE 7949
// SetCargo ( cargo [ i ] , mat_oil , 100 ) ;
7926: LD_VAR 0 2
7930: PUSH
7931: LD_VAR 0 1
7935: ARRAY
7936: PPUSH
7937: LD_INT 2
7939: PPUSH
7940: LD_INT 100
7942: PPUSH
7943: CALL_OW 290
7947: GO 7923
7949: POP
7950: POP
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
7951: LD_EXP 52
7955: PPUSH
7956: LD_INT 2
7958: PUSH
7959: LD_INT 25
7961: PUSH
7962: LD_INT 1
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: PUSH
7969: LD_INT 25
7971: PUSH
7972: LD_INT 8
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: PUSH
7979: EMPTY
7980: LIST
7981: LIST
7982: LIST
7983: PPUSH
7984: CALL_OW 72
7988: PPUSH
7989: CALL_OW 122
// wait ( 0 0$3 ) ;
7993: LD_INT 105
7995: PPUSH
7996: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8000: LD_EXP 52
8004: PUSH
8005: LD_EXP 44
8009: UNION
8010: PPUSH
8011: LD_VAR 0 8
8015: PUSH
8016: LD_INT 1
8018: ARRAY
8019: PPUSH
8020: LD_VAR 0 8
8024: PUSH
8025: LD_INT 2
8027: ARRAY
8028: PPUSH
8029: CALL_OW 174
// wait ( 0 0$3 ) ;
8033: LD_INT 105
8035: PPUSH
8036: CALL_OW 67
// AddComMoveXY ( cargo , 218 , 217 ) ;
8040: LD_VAR 0 2
8044: PPUSH
8045: LD_INT 218
8047: PPUSH
8048: LD_INT 217
8050: PPUSH
8051: CALL_OW 171
// wait ( 1 1$00 ) ;
8055: LD_INT 2100
8057: PPUSH
8058: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8062: LD_INT 35
8064: PPUSH
8065: CALL_OW 67
// if omarAttackCoords [ 3 ] = 0 then
8069: LD_VAR 0 8
8073: PUSH
8074: LD_INT 3
8076: ARRAY
8077: PUSH
8078: LD_INT 0
8080: EQUAL
8081: IFFALSE 8186
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 168 , 229 , 12 ] ] ) = 0 then
8083: LD_INT 22
8085: PUSH
8086: LD_INT 3
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: PUSH
8093: LD_INT 92
8095: PUSH
8096: LD_INT 168
8098: PUSH
8099: LD_INT 229
8101: PUSH
8102: LD_INT 12
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: PUSH
8111: EMPTY
8112: LIST
8113: LIST
8114: PPUSH
8115: CALL_OW 69
8119: PUSH
8120: LD_INT 0
8122: EQUAL
8123: IFFALSE 8186
// begin omarAttackCoords := [ 167 , 222 , 1 ] ;
8125: LD_ADDR_VAR 0 8
8129: PUSH
8130: LD_INT 167
8132: PUSH
8133: LD_INT 222
8135: PUSH
8136: LD_INT 1
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: LIST
8143: ST_TO_ADDR
// AddComMoveXY ( Omar ^ cargo ^ UnitFilter ( omarSquad , [ f_class , 4 ] ) , 167 , 222 ) ;
8144: LD_EXP 44
8148: PUSH
8149: LD_VAR 0 2
8153: ADD
8154: PUSH
8155: LD_EXP 52
8159: PPUSH
8160: LD_INT 25
8162: PUSH
8163: LD_INT 4
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 72
8174: ADD
8175: PPUSH
8176: LD_INT 167
8178: PPUSH
8179: LD_INT 222
8181: PPUSH
8182: CALL_OW 171
// end ; tmp := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) ;
8186: LD_ADDR_VAR 0 3
8190: PUSH
8191: LD_EXP 52
8195: PPUSH
8196: LD_INT 3
8198: PUSH
8199: LD_INT 55
8201: PUSH
8202: EMPTY
8203: LIST
8204: PUSH
8205: EMPTY
8206: LIST
8207: LIST
8208: PUSH
8209: LD_INT 2
8211: PUSH
8212: LD_INT 25
8214: PUSH
8215: LD_INT 1
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: PUSH
8222: LD_INT 25
8224: PUSH
8225: LD_INT 8
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: LIST
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: PPUSH
8241: CALL_OW 72
8245: ST_TO_ADDR
// if tmp then
8246: LD_VAR 0 3
8250: IFFALSE 8465
// begin for i in tmp do
8252: LD_ADDR_VAR 0 1
8256: PUSH
8257: LD_VAR 0 3
8261: PUSH
8262: FOR_IN
8263: IFFALSE 8463
// begin tag := GetTag ( i ) ;
8265: LD_ADDR_VAR 0 4
8269: PUSH
8270: LD_VAR 0 1
8274: PPUSH
8275: CALL_OW 110
8279: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
8280: LD_VAR 0 1
8284: PPUSH
8285: CALL_OW 256
8289: PUSH
8290: LD_INT 800
8292: LESS
8293: IFFALSE 8305
8295: PUSH
8296: LD_VAR 0 4
8300: PUSH
8301: LD_INT 101
8303: LESS
8304: AND
8305: IFFALSE 8348
// begin SetTag ( i , 101 ) ;
8307: LD_VAR 0 1
8311: PPUSH
8312: LD_INT 101
8314: PPUSH
8315: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8319: LD_VAR 0 1
8323: PPUSH
8324: LD_VAR 0 8
8328: PUSH
8329: LD_INT 1
8331: ARRAY
8332: PPUSH
8333: LD_VAR 0 8
8337: PUSH
8338: LD_INT 2
8340: ARRAY
8341: PPUSH
8342: CALL_OW 111
// end else
8346: GO 8461
// if tag = 101 then
8348: LD_VAR 0 4
8352: PUSH
8353: LD_INT 101
8355: EQUAL
8356: IFFALSE 8447
// begin if GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) > 10 then
8358: LD_VAR 0 1
8362: PPUSH
8363: LD_VAR 0 8
8367: PUSH
8368: LD_INT 1
8370: ARRAY
8371: PPUSH
8372: LD_VAR 0 8
8376: PUSH
8377: LD_INT 2
8379: ARRAY
8380: PPUSH
8381: CALL_OW 297
8385: PUSH
8386: LD_INT 10
8388: GREATER
8389: IFFALSE 8418
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8391: LD_VAR 0 1
8395: PPUSH
8396: LD_VAR 0 8
8400: PUSH
8401: LD_INT 1
8403: ARRAY
8404: PPUSH
8405: LD_VAR 0 8
8409: PUSH
8410: LD_INT 2
8412: ARRAY
8413: PPUSH
8414: CALL_OW 111
// if GetLives ( i ) = 1000 then
8418: LD_VAR 0 1
8422: PPUSH
8423: CALL_OW 256
8427: PUSH
8428: LD_INT 1000
8430: EQUAL
8431: IFFALSE 8445
// SetTag ( i , 0 ) ;
8433: LD_VAR 0 1
8437: PPUSH
8438: LD_INT 0
8440: PPUSH
8441: CALL_OW 109
// end else
8445: GO 8461
// AgressiveMove ( i , path ) ;
8447: LD_VAR 0 1
8451: PPUSH
8452: LD_VAR 0 7
8456: PPUSH
8457: CALL 70620 0 2
// end ;
8461: GO 8262
8463: POP
8464: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
8465: LD_ADDR_VAR 0 3
8469: PUSH
8470: LD_INT 22
8472: PUSH
8473: LD_INT 5
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PUSH
8480: LD_INT 21
8482: PUSH
8483: LD_INT 2
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: PUSH
8490: LD_INT 3
8492: PUSH
8493: LD_INT 34
8495: PUSH
8496: LD_INT 32
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: LIST
8511: PPUSH
8512: CALL_OW 69
8516: ST_TO_ADDR
// if not tmp then
8517: LD_VAR 0 3
8521: NOT
8522: IFFALSE 8526
// continue ;
8524: GO 8062
// for i in tmp do
8526: LD_ADDR_VAR 0 1
8530: PUSH
8531: LD_VAR 0 3
8535: PUSH
8536: FOR_IN
8537: IFFALSE 8952
// begin mech := IsDrivenBy ( i ) ;
8539: LD_ADDR_VAR 0 5
8543: PUSH
8544: LD_VAR 0 1
8548: PPUSH
8549: CALL_OW 311
8553: ST_TO_ADDR
// if not mech then
8554: LD_VAR 0 5
8558: NOT
8559: IFFALSE 8563
// continue ;
8561: GO 8536
// tag := GetTag ( i ) ;
8563: LD_ADDR_VAR 0 4
8567: PUSH
8568: LD_VAR 0 1
8572: PPUSH
8573: CALL_OW 110
8577: ST_TO_ADDR
// if GetFuel ( i ) > 90 and tag = 102 then
8578: LD_VAR 0 1
8582: PPUSH
8583: CALL_OW 261
8587: PUSH
8588: LD_INT 90
8590: GREATER
8591: IFFALSE 8603
8593: PUSH
8594: LD_VAR 0 4
8598: PUSH
8599: LD_INT 102
8601: EQUAL
8602: AND
8603: IFFALSE 8619
// SetTag ( i , 0 ) else
8605: LD_VAR 0 1
8609: PPUSH
8610: LD_INT 0
8612: PPUSH
8613: CALL_OW 109
8617: GO 8715
// if GetTag ( i ) = 102 then
8619: LD_VAR 0 1
8623: PPUSH
8624: CALL_OW 110
8628: PUSH
8629: LD_INT 102
8631: EQUAL
8632: IFFALSE 8715
// begin x := rand ( 1 , 2 ) ;
8634: LD_ADDR_VAR 0 6
8638: PUSH
8639: LD_INT 1
8641: PPUSH
8642: LD_INT 2
8644: PPUSH
8645: CALL_OW 12
8649: ST_TO_ADDR
// AddComMoveUnit ( i , cargo [ x ] ) ;
8650: LD_VAR 0 1
8654: PPUSH
8655: LD_VAR 0 2
8659: PUSH
8660: LD_VAR 0 6
8664: ARRAY
8665: PPUSH
8666: CALL_OW 172
// if GetCargo ( cargo [ x ] , mat_oil ) < 20 then
8670: LD_VAR 0 2
8674: PUSH
8675: LD_VAR 0 6
8679: ARRAY
8680: PPUSH
8681: LD_INT 2
8683: PPUSH
8684: CALL_OW 289
8688: PUSH
8689: LD_INT 20
8691: LESS
8692: IFFALSE 8715
// SetCargo ( cargo [ x ] , mat_oil , 100 ) ;
8694: LD_VAR 0 2
8698: PUSH
8699: LD_VAR 0 6
8703: ARRAY
8704: PPUSH
8705: LD_INT 2
8707: PPUSH
8708: LD_INT 100
8710: PPUSH
8711: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and tag < 101 then
8715: LD_VAR 0 1
8719: PPUSH
8720: CALL_OW 256
8724: PUSH
8725: LD_INT 600
8727: GREATEREQUAL
8728: IFFALSE 8740
8730: PUSH
8731: LD_VAR 0 4
8735: PUSH
8736: LD_INT 101
8738: LESS
8739: AND
8740: IFFALSE 8756
// AgressiveMove ( i , path ) ;
8742: LD_VAR 0 1
8746: PPUSH
8747: LD_VAR 0 7
8751: PPUSH
8752: CALL 70620 0 2
// if GetLives ( i ) < 600 and tag < 101 then
8756: LD_VAR 0 1
8760: PPUSH
8761: CALL_OW 256
8765: PUSH
8766: LD_INT 600
8768: LESS
8769: IFFALSE 8781
8771: PUSH
8772: LD_VAR 0 4
8776: PUSH
8777: LD_INT 101
8779: LESS
8780: AND
8781: IFFALSE 8822
// begin SetTag ( i , 101 ) ;
8783: LD_VAR 0 1
8787: PPUSH
8788: LD_INT 101
8790: PPUSH
8791: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8795: LD_VAR 0 1
8799: PPUSH
8800: LD_VAR 0 8
8804: PUSH
8805: LD_INT 1
8807: ARRAY
8808: PPUSH
8809: LD_VAR 0 8
8813: PUSH
8814: LD_INT 2
8816: ARRAY
8817: PPUSH
8818: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) < 9 and mech then
8822: LD_VAR 0 4
8826: PUSH
8827: LD_INT 101
8829: EQUAL
8830: IFFALSE 8865
8832: PUSH
8833: LD_VAR 0 1
8837: PPUSH
8838: LD_VAR 0 8
8842: PUSH
8843: LD_INT 1
8845: ARRAY
8846: PPUSH
8847: LD_VAR 0 8
8851: PUSH
8852: LD_INT 2
8854: ARRAY
8855: PPUSH
8856: CALL_OW 297
8860: PUSH
8861: LD_INT 9
8863: LESS
8864: AND
8865: IFFALSE 8873
8867: PUSH
8868: LD_VAR 0 5
8872: AND
8873: IFFALSE 8950
// begin if GetLives ( i ) < 1000 then
8875: LD_VAR 0 1
8879: PPUSH
8880: CALL_OW 256
8884: PUSH
8885: LD_INT 1000
8887: LESS
8888: IFFALSE 8901
// AddComRepairVehicleAndReturn ( mech ) else
8890: LD_VAR 0 5
8894: PPUSH
8895: CALL 69690 0 1
8899: GO 8950
// if GetFuel ( i ) <= 50 and cargo then
8901: LD_VAR 0 1
8905: PPUSH
8906: CALL_OW 261
8910: PUSH
8911: LD_INT 50
8913: LESSEQUAL
8914: IFFALSE 8922
8916: PUSH
8917: LD_VAR 0 2
8921: AND
8922: IFFALSE 8938
// SetTag ( i , 102 ) else
8924: LD_VAR 0 1
8928: PPUSH
8929: LD_INT 102
8931: PPUSH
8932: CALL_OW 109
8936: GO 8950
// SetTag ( i , 0 ) ;
8938: LD_VAR 0 1
8942: PPUSH
8943: LD_INT 0
8945: PPUSH
8946: CALL_OW 109
// end ; end ;
8950: GO 8536
8952: POP
8953: POP
// until not tmp ;
8954: LD_VAR 0 3
8958: NOT
8959: IFFALSE 8062
// end ;
8961: PPOPN 8
8963: END
// export function GoForOil ; var i , tmp , data , chance , vehicle , needOil , heikeInConvoy , success ; begin
8964: LD_INT 0
8966: PPUSH
8967: PPUSH
8968: PPUSH
8969: PPUSH
8970: PPUSH
8971: PPUSH
8972: PPUSH
8973: PPUSH
8974: PPUSH
// SetAreaMapShow ( oilArea , 1 ) ;
8975: LD_INT 20
8977: PPUSH
8978: LD_INT 1
8980: PPUSH
8981: CALL_OW 424
// repeat wait ( 0 0$5 ) ;
8985: LD_INT 175
8987: PPUSH
8988: CALL_OW 67
// heikeInConvoy := false ;
8992: LD_ADDR_VAR 0 8
8996: PUSH
8997: LD_INT 0
8999: ST_TO_ADDR
// needOil := false ;
9000: LD_ADDR_VAR 0 7
9004: PUSH
9005: LD_INT 0
9007: ST_TO_ADDR
// tmp := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] ] ) ;
9008: LD_ADDR_VAR 0 3
9012: PUSH
9013: LD_INT 20
9015: PPUSH
9016: LD_INT 22
9018: PUSH
9019: LD_INT 2
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PUSH
9026: LD_INT 3
9028: PUSH
9029: LD_INT 2
9031: PUSH
9032: LD_INT 34
9034: PUSH
9035: LD_INT 88
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PUSH
9042: LD_INT 34
9044: PUSH
9045: LD_INT 31
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: LIST
9056: PUSH
9057: EMPTY
9058: LIST
9059: LIST
9060: PUSH
9061: LD_INT 33
9063: PUSH
9064: LD_INT 1
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: LIST
9075: PPUSH
9076: CALL_OW 70
9080: ST_TO_ADDR
// for i in tmp do
9081: LD_ADDR_VAR 0 2
9085: PUSH
9086: LD_VAR 0 3
9090: PUSH
9091: FOR_IN
9092: IFFALSE 9179
// begin if IsDrivenBy ( i ) = Heike then
9094: LD_VAR 0 2
9098: PPUSH
9099: CALL_OW 311
9103: PUSH
9104: LD_EXP 34
9108: EQUAL
9109: IFFALSE 9128
// begin heikeInConvoy := true ;
9111: LD_ADDR_VAR 0 8
9115: PUSH
9116: LD_INT 1
9118: ST_TO_ADDR
// Query ( QHeikeConvoy ) ;
9119: LD_STRING QHeikeConvoy
9121: PPUSH
9122: CALL_OW 97
// break ;
9126: GO 9179
// end ; if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 10 then
9128: LD_VAR 0 2
9132: PPUSH
9133: CALL_OW 262
9137: PUSH
9138: LD_INT 1
9140: EQUAL
9141: IFFALSE 9158
9143: PUSH
9144: LD_VAR 0 2
9148: PPUSH
9149: CALL_OW 261
9153: PUSH
9154: LD_INT 10
9156: LESS
9157: AND
9158: IFFALSE 9177
// begin needOil := true ;
9160: LD_ADDR_VAR 0 7
9164: PUSH
9165: LD_INT 1
9167: ST_TO_ADDR
// Query ( QNeedOil ) ;
9168: LD_STRING QNeedOil
9170: PPUSH
9171: CALL_OW 97
// break ;
9175: GO 9179
// end ; end ;
9177: GO 9091
9179: POP
9180: POP
// if not needOil and not heikeInConvoy and UnitFilter ( tmp , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
9181: LD_VAR 0 7
9185: NOT
9186: IFFALSE 9195
9188: PUSH
9189: LD_VAR 0 8
9193: NOT
9194: AND
9195: IFFALSE 9236
9197: PUSH
9198: LD_VAR 0 3
9202: PPUSH
9203: LD_INT 2
9205: PUSH
9206: LD_INT 34
9208: PUSH
9209: LD_INT 32
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: PUSH
9216: LD_INT 34
9218: PUSH
9219: LD_INT 51
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: LIST
9230: PPUSH
9231: CALL_OW 72
9235: AND
9236: IFFALSE 9253
// if Query ( QConvoy ) = 1 then
9238: LD_STRING QConvoy
9240: PPUSH
9241: CALL_OW 97
9245: PUSH
9246: LD_INT 1
9248: EQUAL
9249: IFFALSE 9253
// break ;
9251: GO 9257
// until false ;
9253: LD_INT 0
9255: IFFALSE 8985
// SetAreaMapShow ( oilArea , 0 ) ;
9257: LD_INT 20
9259: PPUSH
9260: LD_INT 0
9262: PPUSH
9263: CALL_OW 424
// data := [ ] ;
9267: LD_ADDR_VAR 0 4
9271: PUSH
9272: EMPTY
9273: ST_TO_ADDR
// chance := [ 60 , 50 , 40 , 30 ] [ Difficulty ] ;
9274: LD_ADDR_VAR 0 5
9278: PUSH
9279: LD_INT 60
9281: PUSH
9282: LD_INT 50
9284: PUSH
9285: LD_INT 40
9287: PUSH
9288: LD_INT 30
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: PUSH
9297: LD_OWVAR 67
9301: ARRAY
9302: ST_TO_ADDR
// for i in tmp do
9303: LD_ADDR_VAR 0 2
9307: PUSH
9308: LD_VAR 0 3
9312: PUSH
9313: FOR_IN
9314: IFFALSE 9411
// begin data := Join ( data , [ i , IsDrivenBy ( i ) , GetLives ( i ) , GetFuel ( i ) , ] ) ;
9316: LD_ADDR_VAR 0 4
9320: PUSH
9321: LD_VAR 0 4
9325: PPUSH
9326: LD_VAR 0 2
9330: PUSH
9331: LD_VAR 0 2
9335: PPUSH
9336: CALL_OW 311
9340: PUSH
9341: LD_VAR 0 2
9345: PPUSH
9346: CALL_OW 256
9350: PUSH
9351: LD_VAR 0 2
9355: PPUSH
9356: CALL_OW 261
9360: PUSH
9361: EMPTY
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: PPUSH
9367: CALL 67854 0 2
9371: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
9372: LD_VAR 0 2
9376: PPUSH
9377: CALL_OW 311
9381: PPUSH
9382: CALL_OW 64
// RemoveUnit ( i ) ;
9386: LD_VAR 0 2
9390: PPUSH
9391: CALL_OW 64
// chance := chance + 20 ;
9395: LD_ADDR_VAR 0 5
9399: PUSH
9400: LD_VAR 0 5
9404: PUSH
9405: LD_INT 20
9407: PLUS
9408: ST_TO_ADDR
// end ;
9409: GO 9313
9411: POP
9412: POP
// wait ( rand ( 0 0$45 , 2 2$30 ) ) ;
9413: LD_INT 1575
9415: PPUSH
9416: LD_INT 5250
9418: PPUSH
9419: CALL_OW 12
9423: PPUSH
9424: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
9428: LD_INT 35
9430: PPUSH
9431: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
9435: LD_INT 22
9437: PUSH
9438: LD_INT 3
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: LD_INT 92
9447: PUSH
9448: LD_INT 261
9450: PUSH
9451: LD_INT 71
9453: PUSH
9454: LD_INT 12
9456: PUSH
9457: EMPTY
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PPUSH
9467: CALL_OW 69
9471: NOT
9472: IFFALSE 9487
9474: PUSH
9475: LD_INT 277
9477: PPUSH
9478: LD_INT 80
9480: PPUSH
9481: CALL_OW 428
9485: NOT
9486: AND
9487: IFFALSE 9428
// for i in data do
9489: LD_ADDR_VAR 0 2
9493: PUSH
9494: LD_VAR 0 4
9498: PUSH
9499: FOR_IN
9500: IFFALSE 9919
// begin uc_nation := GetNation ( i [ 1 ] ) ;
9502: LD_ADDR_OWVAR 21
9506: PUSH
9507: LD_VAR 0 2
9511: PUSH
9512: LD_INT 1
9514: ARRAY
9515: PPUSH
9516: CALL_OW 248
9520: ST_TO_ADDR
// uc_side := 2 ;
9521: LD_ADDR_OWVAR 20
9525: PUSH
9526: LD_INT 2
9528: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( i [ 1 ] ) , GetEngine ( i [ 1 ] ) , GetControl ( i [ 1 ] ) , GetWeapon ( i [ 1 ] ) , 66 ) ;
9529: LD_VAR 0 2
9533: PUSH
9534: LD_INT 1
9536: ARRAY
9537: PPUSH
9538: CALL_OW 265
9542: PPUSH
9543: LD_VAR 0 2
9547: PUSH
9548: LD_INT 1
9550: ARRAY
9551: PPUSH
9552: CALL_OW 262
9556: PPUSH
9557: LD_VAR 0 2
9561: PUSH
9562: LD_INT 1
9564: ARRAY
9565: PPUSH
9566: CALL_OW 263
9570: PPUSH
9571: LD_VAR 0 2
9575: PUSH
9576: LD_INT 1
9578: ARRAY
9579: PPUSH
9580: CALL_OW 264
9584: PPUSH
9585: LD_INT 66
9587: PPUSH
9588: CALL 34684 0 5
// vehicle := CreateVehicle ;
9592: LD_ADDR_VAR 0 6
9596: PUSH
9597: CALL_OW 45
9601: ST_TO_ADDR
// SetDir ( vehicle , 4 ) ;
9602: LD_VAR 0 6
9606: PPUSH
9607: LD_INT 4
9609: PPUSH
9610: CALL_OW 233
// repeat wait ( 10 ) ;
9614: LD_INT 10
9616: PPUSH
9617: CALL_OW 67
// until PlaceUnitXY ( vehicle , 277 , 80 , false ) ;
9621: LD_VAR 0 6
9625: PPUSH
9626: LD_INT 277
9628: PPUSH
9629: LD_INT 80
9631: PPUSH
9632: LD_INT 0
9634: PPUSH
9635: CALL_OW 48
9639: IFFALSE 9614
// PlaceHumanInUnit ( i [ 2 ] , vehicle ) ;
9641: LD_VAR 0 2
9645: PUSH
9646: LD_INT 2
9648: ARRAY
9649: PPUSH
9650: LD_VAR 0 6
9654: PPUSH
9655: CALL_OW 52
// SetLives ( vehicle , i [ 3 ] ) ;
9659: LD_VAR 0 6
9663: PPUSH
9664: LD_VAR 0 2
9668: PUSH
9669: LD_INT 3
9671: ARRAY
9672: PPUSH
9673: CALL_OW 234
// success := Prob ( chance ) ;
9677: LD_ADDR_VAR 0 9
9681: PUSH
9682: LD_VAR 0 5
9686: PPUSH
9687: CALL_OW 13
9691: ST_TO_ADDR
// if success then
9692: LD_VAR 0 9
9696: IFFALSE 9778
// begin if GetEngine ( vehicle ) = engine_combustion then
9698: LD_VAR 0 6
9702: PPUSH
9703: CALL_OW 262
9707: PUSH
9708: LD_INT 1
9710: EQUAL
9711: IFFALSE 9725
// SetFuel ( vehicle , 90 ) ;
9713: LD_VAR 0 6
9717: PPUSH
9718: LD_INT 90
9720: PPUSH
9721: CALL_OW 240
// if GetWeapon ( vehicle ) in [ ar_cargo_bay , ru_cargo_bay ] then
9725: LD_VAR 0 6
9729: PPUSH
9730: CALL_OW 264
9734: PUSH
9735: LD_INT 32
9737: PUSH
9738: LD_INT 51
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: IN
9745: IFFALSE 9776
// begin collectedOil := collectedOil + 100 ;
9747: LD_ADDR_EXP 33
9751: PUSH
9752: LD_EXP 33
9756: PUSH
9757: LD_INT 100
9759: PLUS
9760: ST_TO_ADDR
// SetCargo ( vehicle , mat_oil , 100 ) ;
9761: LD_VAR 0 6
9765: PPUSH
9766: LD_INT 2
9768: PPUSH
9769: LD_INT 100
9771: PPUSH
9772: CALL_OW 290
// end ; end else
9776: GO 9850
// begin if i [ 3 ] > 333 then
9778: LD_VAR 0 2
9782: PUSH
9783: LD_INT 3
9785: ARRAY
9786: PUSH
9787: LD_INT 333
9789: GREATER
9790: IFFALSE 9804
// SetLives ( vehicle , 333 ) ;
9792: LD_VAR 0 6
9796: PPUSH
9797: LD_INT 333
9799: PPUSH
9800: CALL_OW 234
// if i [ 4 ] > 20 then
9804: LD_VAR 0 2
9808: PUSH
9809: LD_INT 4
9811: ARRAY
9812: PUSH
9813: LD_INT 20
9815: GREATER
9816: IFFALSE 9832
// SetFuel ( vehicle , 20 ) else
9818: LD_VAR 0 6
9822: PPUSH
9823: LD_INT 20
9825: PPUSH
9826: CALL_OW 240
9830: GO 9850
// SetFuel ( vehicle , i [ 4 ] ) ;
9832: LD_VAR 0 6
9836: PPUSH
9837: LD_VAR 0 2
9841: PUSH
9842: LD_INT 4
9844: ARRAY
9845: PPUSH
9846: CALL_OW 240
// end ; ComMoveXY ( vehicle , 250 , 119 ) ;
9850: LD_VAR 0 6
9854: PPUSH
9855: LD_INT 250
9857: PPUSH
9858: LD_INT 119
9860: PPUSH
9861: CALL_OW 111
// AddComMoveXY ( vehicle , 211 , 80 ) ;
9865: LD_VAR 0 6
9869: PPUSH
9870: LD_INT 211
9872: PPUSH
9873: LD_INT 80
9875: PPUSH
9876: CALL_OW 171
// repeat wait ( 0 0$5 ) ;
9880: LD_INT 175
9882: PPUSH
9883: CALL_OW 67
// until not FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_placed ] ] ) ;
9887: LD_INT 20
9889: PPUSH
9890: LD_INT 22
9892: PUSH
9893: LD_INT 2
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: PUSH
9900: LD_INT 52
9902: PUSH
9903: EMPTY
9904: LIST
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: PPUSH
9910: CALL_OW 70
9914: NOT
9915: IFFALSE 9880
// end ;
9917: GO 9499
9919: POP
9920: POP
// wait ( 0 0$10 ) ;
9921: LD_INT 350
9923: PPUSH
9924: CALL_OW 67
// GoForOil ;
9928: CALL 8964 0 0
// end ;
9932: LD_VAR 0 1
9936: RET
// every 0 0$2 trigger FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do var i ;
9937: LD_INT 22
9939: PPUSH
9940: LD_INT 21
9942: PUSH
9943: LD_INT 2
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: PUSH
9950: LD_INT 22
9952: PUSH
9953: LD_INT 5
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: PUSH
9960: LD_INT 58
9962: PUSH
9963: EMPTY
9964: LIST
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: LIST
9970: PPUSH
9971: CALL_OW 70
9975: IFFALSE 10044
9977: GO 9979
9979: DISABLE
9980: LD_INT 0
9982: PPUSH
// begin enable ;
9983: ENABLE
// for i in FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do
9984: LD_ADDR_VAR 0 1
9988: PUSH
9989: LD_INT 22
9991: PPUSH
9992: LD_INT 21
9994: PUSH
9995: LD_INT 2
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PUSH
10002: LD_INT 22
10004: PUSH
10005: LD_INT 5
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PUSH
10012: LD_INT 58
10014: PUSH
10015: EMPTY
10016: LIST
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: LIST
10022: PPUSH
10023: CALL_OW 70
10027: PUSH
10028: FOR_IN
10029: IFFALSE 10042
// KillUnit ( i ) ;
10031: LD_VAR 0 1
10035: PPUSH
10036: CALL_OW 66
10040: GO 10028
10042: POP
10043: POP
// end ; end_of_file
10044: PPOPN 1
10046: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
10047: LD_INT 0
10049: PPUSH
// uc_side := side ;
10050: LD_ADDR_OWVAR 20
10054: PUSH
10055: LD_VAR 0 1
10059: ST_TO_ADDR
// uc_nation := nation ;
10060: LD_ADDR_OWVAR 21
10064: PUSH
10065: LD_VAR 0 2
10069: ST_TO_ADDR
// vc_chassis := chassis ;
10070: LD_ADDR_OWVAR 37
10074: PUSH
10075: LD_VAR 0 3
10079: ST_TO_ADDR
// vc_engine := engine ;
10080: LD_ADDR_OWVAR 39
10084: PUSH
10085: LD_VAR 0 4
10089: ST_TO_ADDR
// vc_control := control ;
10090: LD_ADDR_OWVAR 38
10094: PUSH
10095: LD_VAR 0 5
10099: ST_TO_ADDR
// vc_weapon := weapon ;
10100: LD_ADDR_OWVAR 40
10104: PUSH
10105: LD_VAR 0 6
10109: ST_TO_ADDR
// vc_fuel_battery := fuel ;
10110: LD_ADDR_OWVAR 41
10114: PUSH
10115: LD_VAR 0 7
10119: ST_TO_ADDR
// result := CreateVehicle ;
10120: LD_ADDR_VAR 0 8
10124: PUSH
10125: CALL_OW 45
10129: ST_TO_ADDR
// end ;
10130: LD_VAR 0 8
10134: RET
// export function SayX ( units , ident ) ; var i ; begin
10135: LD_INT 0
10137: PPUSH
10138: PPUSH
// result := false ;
10139: LD_ADDR_VAR 0 3
10143: PUSH
10144: LD_INT 0
10146: ST_TO_ADDR
// if not units then
10147: LD_VAR 0 1
10151: NOT
10152: IFFALSE 10156
// exit ;
10154: GO 10210
// for i in units do
10156: LD_ADDR_VAR 0 4
10160: PUSH
10161: LD_VAR 0 1
10165: PUSH
10166: FOR_IN
10167: IFFALSE 10208
// if IsOk ( i ) then
10169: LD_VAR 0 4
10173: PPUSH
10174: CALL_OW 302
10178: IFFALSE 10206
// begin Say ( i , ident ) ;
10180: LD_VAR 0 4
10184: PPUSH
10185: LD_VAR 0 2
10189: PPUSH
10190: CALL_OW 88
// result := i ;
10194: LD_ADDR_VAR 0 3
10198: PUSH
10199: LD_VAR 0 4
10203: ST_TO_ADDR
// break ;
10204: GO 10208
// end ;
10206: GO 10166
10208: POP
10209: POP
// end ;
10210: LD_VAR 0 3
10214: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
10215: LD_INT 0
10217: PPUSH
10218: PPUSH
// InitUc ;
10219: CALL_OW 18
// InitHc ;
10223: CALL_OW 19
// uc_side := 0 ;
10227: LD_ADDR_OWVAR 20
10231: PUSH
10232: LD_INT 0
10234: ST_TO_ADDR
// uc_nation := 0 ;
10235: LD_ADDR_OWVAR 21
10239: PUSH
10240: LD_INT 0
10242: ST_TO_ADDR
// for i = 1 to amount do
10243: LD_ADDR_VAR 0 4
10247: PUSH
10248: DOUBLE
10249: LD_INT 1
10251: DEC
10252: ST_TO_ADDR
10253: LD_VAR 0 2
10257: PUSH
10258: FOR_TO
10259: IFFALSE 10341
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
10261: LD_ADDR_OWVAR 29
10265: PUSH
10266: LD_INT 9
10268: PPUSH
10269: LD_INT 12
10271: PPUSH
10272: CALL_OW 12
10276: PUSH
10277: LD_INT 9
10279: PPUSH
10280: LD_INT 12
10282: PPUSH
10283: CALL_OW 12
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
10292: LD_ADDR_OWVAR 35
10296: PUSH
10297: LD_INT 1
10299: NEG
10300: PPUSH
10301: LD_INT 1
10303: PPUSH
10304: CALL_OW 12
10308: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
10309: LD_INT 0
10311: PPUSH
10312: LD_INT 12
10314: PPUSH
10315: LD_INT 1
10317: PPUSH
10318: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
10322: CALL_OW 44
10326: PPUSH
10327: LD_VAR 0 1
10331: PPUSH
10332: LD_INT 0
10334: PPUSH
10335: CALL_OW 49
// end ;
10339: GO 10258
10341: POP
10342: POP
// InitHc ;
10343: CALL_OW 19
// end ;
10347: LD_VAR 0 3
10351: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
10352: LD_INT 0
10354: PPUSH
10355: PPUSH
// uc_side := 0 ;
10356: LD_ADDR_OWVAR 20
10360: PUSH
10361: LD_INT 0
10363: ST_TO_ADDR
// uc_nation := 0 ;
10364: LD_ADDR_OWVAR 21
10368: PUSH
10369: LD_INT 0
10371: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) ;
10372: LD_INT 7
10374: PPUSH
10375: LD_INT 6
10377: PUSH
10378: LD_INT 5
10380: PUSH
10381: LD_INT 4
10383: PUSH
10384: LD_INT 3
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: PUSH
10393: LD_OWVAR 67
10397: ARRAY
10398: PPUSH
10399: CALL 10215 0 2
// for i = 1 to 2 do
10403: LD_ADDR_VAR 0 4
10407: PUSH
10408: DOUBLE
10409: LD_INT 1
10411: DEC
10412: ST_TO_ADDR
10413: LD_INT 2
10415: PUSH
10416: FOR_TO
10417: IFFALSE 10454
// begin vc_chassis := class_mastodont ;
10419: LD_ADDR_OWVAR 37
10423: PUSH
10424: LD_INT 31
10426: ST_TO_ADDR
// vc_control := control_rider ;
10427: LD_ADDR_OWVAR 38
10431: PUSH
10432: LD_INT 4
10434: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
10435: CALL_OW 45
10439: PPUSH
10440: LD_VAR 0 1
10444: PPUSH
10445: LD_INT 0
10447: PPUSH
10448: CALL 66747 0 3
// end ;
10452: GO 10416
10454: POP
10455: POP
// InitHc ;
10456: CALL_OW 19
// for i := 1 to 3 do
10460: LD_ADDR_VAR 0 4
10464: PUSH
10465: DOUBLE
10466: LD_INT 1
10468: DEC
10469: ST_TO_ADDR
10470: LD_INT 3
10472: PUSH
10473: FOR_TO
10474: IFFALSE 10511
// begin hc_class := class_horse ;
10476: LD_ADDR_OWVAR 28
10480: PUSH
10481: LD_INT 21
10483: ST_TO_ADDR
// hc_gallery :=  ;
10484: LD_ADDR_OWVAR 33
10488: PUSH
10489: LD_STRING 
10491: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10492: CALL_OW 44
10496: PPUSH
10497: LD_VAR 0 1
10501: PPUSH
10502: LD_INT 0
10504: PPUSH
10505: CALL_OW 49
// end ;
10509: GO 10473
10511: POP
10512: POP
// InitHc ;
10513: CALL_OW 19
// for i = 1 to 3 do
10517: LD_ADDR_VAR 0 4
10521: PUSH
10522: DOUBLE
10523: LD_INT 1
10525: DEC
10526: ST_TO_ADDR
10527: LD_INT 3
10529: PUSH
10530: FOR_TO
10531: IFFALSE 10585
// begin hc_class = class_tiger ;
10533: LD_ADDR_OWVAR 28
10537: PUSH
10538: LD_INT 14
10540: ST_TO_ADDR
// hc_gallery =  ;
10541: LD_ADDR_OWVAR 33
10545: PUSH
10546: LD_STRING 
10548: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
10549: LD_ADDR_OWVAR 35
10553: PUSH
10554: LD_INT 7
10556: NEG
10557: PPUSH
10558: LD_INT 7
10560: PPUSH
10561: CALL_OW 12
10565: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
10566: CALL_OW 44
10570: PPUSH
10571: LD_VAR 0 1
10575: PPUSH
10576: LD_INT 0
10578: PPUSH
10579: CALL 66747 0 3
// end ;
10583: GO 10530
10585: POP
10586: POP
// InitHc ;
10587: CALL_OW 19
// for i := 1 to 4 do
10591: LD_ADDR_VAR 0 4
10595: PUSH
10596: DOUBLE
10597: LD_INT 1
10599: DEC
10600: ST_TO_ADDR
10601: LD_INT 4
10603: PUSH
10604: FOR_TO
10605: IFFALSE 10642
// begin hc_class := class_phororhacos ;
10607: LD_ADDR_OWVAR 28
10611: PUSH
10612: LD_INT 18
10614: ST_TO_ADDR
// hc_gallery :=  ;
10615: LD_ADDR_OWVAR 33
10619: PUSH
10620: LD_STRING 
10622: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10623: CALL_OW 44
10627: PPUSH
10628: LD_VAR 0 1
10632: PPUSH
10633: LD_INT 0
10635: PPUSH
10636: CALL_OW 49
// end ;
10640: GO 10604
10642: POP
10643: POP
// InitHc ;
10644: CALL_OW 19
// for i := 1 to 4 do
10648: LD_ADDR_VAR 0 4
10652: PUSH
10653: DOUBLE
10654: LD_INT 1
10656: DEC
10657: ST_TO_ADDR
10658: LD_INT 4
10660: PUSH
10661: FOR_TO
10662: IFFALSE 10699
// begin hc_class := class_baggie ;
10664: LD_ADDR_OWVAR 28
10668: PUSH
10669: LD_INT 13
10671: ST_TO_ADDR
// hc_gallery :=  ;
10672: LD_ADDR_OWVAR 33
10676: PUSH
10677: LD_STRING 
10679: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10680: CALL_OW 44
10684: PPUSH
10685: LD_VAR 0 1
10689: PPUSH
10690: LD_INT 0
10692: PPUSH
10693: CALL_OW 49
// end ;
10697: GO 10661
10699: POP
10700: POP
// InitHc ;
10701: CALL_OW 19
// for i := 1 to 7 do
10705: LD_ADDR_VAR 0 4
10709: PUSH
10710: DOUBLE
10711: LD_INT 1
10713: DEC
10714: ST_TO_ADDR
10715: LD_INT 7
10717: PUSH
10718: FOR_TO
10719: IFFALSE 10756
// begin hc_class := class_frog ;
10721: LD_ADDR_OWVAR 28
10725: PUSH
10726: LD_INT 19
10728: ST_TO_ADDR
// hc_gallery :=  ;
10729: LD_ADDR_OWVAR 33
10733: PUSH
10734: LD_STRING 
10736: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
10737: CALL_OW 44
10741: PPUSH
10742: LD_VAR 0 2
10746: PPUSH
10747: LD_INT 0
10749: PPUSH
10750: CALL_OW 49
// end ;
10754: GO 10718
10756: POP
10757: POP
// end ;
10758: LD_VAR 0 3
10762: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
10763: LD_INT 0
10765: PPUSH
10766: PPUSH
10767: PPUSH
// if not observer or not unit then
10768: LD_VAR 0 1
10772: NOT
10773: IFTRUE 10782
10775: PUSH
10776: LD_VAR 0 2
10780: NOT
10781: OR
10782: IFFALSE 10786
// exit ;
10784: GO 10834
// if not See ( GetSide ( observer ) , unit ) then
10786: LD_VAR 0 1
10790: PPUSH
10791: CALL_OW 255
10795: PPUSH
10796: LD_VAR 0 2
10800: PPUSH
10801: CALL_OW 292
10805: NOT
10806: IFFALSE 10810
// exit ;
10808: GO 10834
// result := GetDistUnits ( observer , unit ) < 12 ;
10810: LD_ADDR_VAR 0 3
10814: PUSH
10815: LD_VAR 0 1
10819: PPUSH
10820: LD_VAR 0 2
10824: PPUSH
10825: CALL_OW 296
10829: PUSH
10830: LD_INT 12
10832: LESS
10833: ST_TO_ADDR
// end ;
10834: LD_VAR 0 3
10838: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
10839: LD_INT 0
10841: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
10842: LD_VAR 0 2
10846: PUSH
10847: LD_INT 1
10849: ARRAY
10850: PPUSH
10851: LD_VAR 0 2
10855: PUSH
10856: LD_INT 2
10858: ARRAY
10859: PPUSH
10860: CALL_OW 488
10864: IFFALSE 10894
10866: PUSH
10867: LD_VAR 0 2
10871: PUSH
10872: LD_INT 1
10874: ARRAY
10875: PPUSH
10876: LD_VAR 0 2
10880: PUSH
10881: LD_INT 2
10883: ARRAY
10884: PPUSH
10885: CALL_OW 428
10889: PUSH
10890: LD_INT 0
10892: EQUAL
10893: AND
10894: IFFALSE 10928
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
10896: LD_VAR 0 1
10900: PPUSH
10901: LD_VAR 0 2
10905: PUSH
10906: LD_INT 1
10908: ARRAY
10909: PPUSH
10910: LD_VAR 0 2
10914: PUSH
10915: LD_INT 2
10917: ARRAY
10918: PPUSH
10919: LD_VAR 0 3
10923: PPUSH
10924: CALL_OW 48
// end ;
10928: LD_VAR 0 4
10932: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
10933: LD_INT 0
10935: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
10936: LD_VAR 0 1
10940: PPUSH
10941: LD_VAR 0 2
10945: PPUSH
10946: LD_VAR 0 3
10950: PPUSH
10951: LD_VAR 0 4
10955: PPUSH
10956: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
10960: LD_VAR 0 1
10964: PPUSH
10965: LD_VAR 0 2
10969: PPUSH
10970: LD_VAR 0 3
10974: PPUSH
10975: CALL_OW 331
// end ;
10979: LD_VAR 0 5
10983: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
10984: LD_INT 0
10986: PPUSH
// if not units then
10987: LD_VAR 0 1
10991: NOT
10992: IFFALSE 10996
// exit ;
10994: GO 11079
// result := true ;
10996: LD_ADDR_VAR 0 4
11000: PUSH
11001: LD_INT 1
11003: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
11004: LD_VAR 0 1
11008: PPUSH
11009: LD_INT 26
11011: PUSH
11012: LD_INT 1
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PPUSH
11019: CALL_OW 72
11023: PUSH
11024: LD_INT 1
11026: ARRAY
11027: PPUSH
11028: LD_VAR 0 2
11032: PPUSH
11033: CALL_OW 88
11037: NOT
11038: IFFALSE 11079
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
11040: LD_ADDR_VAR 0 4
11044: PUSH
11045: LD_VAR 0 1
11049: PPUSH
11050: LD_INT 26
11052: PUSH
11053: LD_INT 2
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PPUSH
11060: CALL_OW 72
11064: PUSH
11065: LD_INT 1
11067: ARRAY
11068: PPUSH
11069: LD_VAR 0 3
11073: PPUSH
11074: CALL_OW 88
11078: ST_TO_ADDR
// end ;
11079: LD_VAR 0 4
11083: RET
// export function SeeGroup ( side , group ) ; var i ; begin
11084: LD_INT 0
11086: PPUSH
11087: PPUSH
// if not group then
11088: LD_VAR 0 2
11092: NOT
11093: IFFALSE 11097
// exit ;
11095: GO 11142
// for i in group do
11097: LD_ADDR_VAR 0 4
11101: PUSH
11102: LD_VAR 0 2
11106: PUSH
11107: FOR_IN
11108: IFFALSE 11140
// if See ( side , i ) then
11110: LD_VAR 0 1
11114: PPUSH
11115: LD_VAR 0 4
11119: PPUSH
11120: CALL_OW 292
11124: IFFALSE 11138
// begin result := true ;
11126: LD_ADDR_VAR 0 3
11130: PUSH
11131: LD_INT 1
11133: ST_TO_ADDR
// exit ;
11134: POP
11135: POP
11136: GO 11142
// end ;
11138: GO 11107
11140: POP
11141: POP
// end ; end_of_file
11142: LD_VAR 0 3
11146: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
11147: LD_INT 0
11149: PPUSH
11150: PPUSH
11151: PPUSH
11152: PPUSH
11153: PPUSH
11154: PPUSH
11155: PPUSH
// uc_side := 3 ;
11156: LD_ADDR_OWVAR 20
11160: PUSH
11161: LD_INT 3
11163: ST_TO_ADDR
// uc_nation := 3 ;
11164: LD_ADDR_OWVAR 21
11168: PUSH
11169: LD_INT 3
11171: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
11172: LD_ADDR_EXP 53
11176: PUSH
11177: LD_STRING Morozov
11179: PPUSH
11180: CALL_OW 25
11184: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
11185: LD_EXP 53
11189: PPUSH
11190: LD_INT 52
11192: PPUSH
11193: CALL_OW 52
// if not gaidarKilled then
11197: LD_EXP 7
11201: NOT
11202: IFFALSE 11235
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
11204: LD_ADDR_EXP 54
11208: PUSH
11209: LD_STRING Gaydar
11211: PPUSH
11212: LD_INT 0
11214: PPUSH
11215: LD_STRING 
11217: PPUSH
11218: CALL 29722 0 3
11222: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
11223: LD_EXP 54
11227: PPUSH
11228: LD_INT 52
11230: PPUSH
11231: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
11235: LD_INT 52
11237: PPUSH
11238: LD_STRING lenin
11240: PPUSH
11241: CALL_OW 500
// ruOutsiders := [ ] ;
11245: LD_ADDR_EXP 56
11249: PUSH
11250: EMPTY
11251: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
11252: LD_ADDR_EXP 58
11256: PUSH
11257: EMPTY
11258: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
11259: LD_ADDR_EXP 59
11263: PUSH
11264: EMPTY
11265: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
11266: LD_ADDR_EXP 60
11270: PUSH
11271: EMPTY
11272: ST_TO_ADDR
// ruAttackers := [ ] ;
11273: LD_ADDR_EXP 61
11277: PUSH
11278: EMPTY
11279: ST_TO_ADDR
// waveStrength := 0 ;
11280: LD_ADDR_EXP 62
11284: PUSH
11285: LD_INT 0
11287: ST_TO_ADDR
// if not gaidarKilled then
11288: LD_EXP 7
11292: NOT
11293: IFFALSE 11303
// waveStrength := 2 ;
11295: LD_ADDR_EXP 62
11299: PUSH
11300: LD_INT 2
11302: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
11303: LD_ADDR_VAR 0 7
11307: PUSH
11308: LD_INT 22
11310: PUSH
11311: LD_INT 3
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: PUSH
11318: LD_INT 21
11320: PUSH
11321: LD_INT 3
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: PPUSH
11332: CALL_OW 69
11336: ST_TO_ADDR
// for i in tmp do
11337: LD_ADDR_VAR 0 2
11341: PUSH
11342: LD_VAR 0 7
11346: PUSH
11347: FOR_IN
11348: IFFALSE 11385
// SetBLevel ( i , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
11350: LD_VAR 0 2
11354: PPUSH
11355: LD_INT 5
11357: PUSH
11358: LD_INT 6
11360: PUSH
11361: LD_INT 7
11363: PUSH
11364: LD_INT 8
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: PUSH
11373: LD_OWVAR 67
11377: ARRAY
11378: PPUSH
11379: CALL_OW 241
11383: GO 11347
11385: POP
11386: POP
// for i := 1 to 3 do
11387: LD_ADDR_VAR 0 2
11391: PUSH
11392: DOUBLE
11393: LD_INT 1
11395: DEC
11396: ST_TO_ADDR
11397: LD_INT 3
11399: PUSH
11400: FOR_TO
11401: IFFALSE 11439
// begin PrepareHuman ( false , 1 , 0 ) ;
11403: LD_INT 0
11405: PPUSH
11406: LD_INT 1
11408: PPUSH
11409: LD_INT 0
11411: PPUSH
11412: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
11416: CALL_OW 44
11420: PPUSH
11421: LD_INT 75
11423: PPUSH
11424: LD_INT 49
11426: PPUSH
11427: LD_INT 3
11429: PPUSH
11430: LD_INT 0
11432: PPUSH
11433: CALL_OW 50
// end ;
11437: GO 11400
11439: POP
11440: POP
// for i := 1 to 4 do
11441: LD_ADDR_VAR 0 2
11445: PUSH
11446: DOUBLE
11447: LD_INT 1
11449: DEC
11450: ST_TO_ADDR
11451: LD_INT 4
11453: PUSH
11454: FOR_TO
11455: IFFALSE 11501
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
11457: LD_INT 0
11459: PPUSH
11460: LD_INT 1
11462: PPUSH
11463: LD_INT 2
11465: PPUSH
11466: CALL_OW 12
11470: PPUSH
11471: LD_INT 0
11473: PPUSH
11474: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
11478: CALL_OW 44
11482: PPUSH
11483: LD_INT 330
11485: PPUSH
11486: LD_INT 231
11488: PPUSH
11489: LD_INT 5
11491: PPUSH
11492: LD_INT 0
11494: PPUSH
11495: CALL_OW 50
// end ;
11499: GO 11454
11501: POP
11502: POP
// hc_class := 1 ;
11503: LD_ADDR_OWVAR 28
11507: PUSH
11508: LD_INT 1
11510: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
11511: CALL_OW 44
11515: PPUSH
11516: LD_INT 324
11518: PPUSH
11519: LD_INT 219
11521: PPUSH
11522: CALL_OW 428
11526: PPUSH
11527: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
11531: CALL_OW 44
11535: PPUSH
11536: LD_INT 316
11538: PPUSH
11539: LD_INT 223
11541: PPUSH
11542: CALL_OW 428
11546: PPUSH
11547: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
11551: LD_ADDR_VAR 0 7
11555: PUSH
11556: LD_INT 172
11558: PPUSH
11559: LD_INT 198
11561: PPUSH
11562: CALL_OW 428
11566: PPUSH
11567: CALL_OW 274
11571: PUSH
11572: LD_INT 189
11574: PPUSH
11575: LD_INT 156
11577: PPUSH
11578: CALL_OW 428
11582: PPUSH
11583: CALL_OW 274
11587: PUSH
11588: LD_INT 341
11590: PPUSH
11591: LD_INT 232
11593: PPUSH
11594: CALL_OW 428
11598: PPUSH
11599: CALL_OW 274
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: LIST
11608: ST_TO_ADDR
// for i in tmp do
11609: LD_ADDR_VAR 0 2
11613: PUSH
11614: LD_VAR 0 7
11618: PUSH
11619: FOR_IN
11620: IFFALSE 11654
// begin SetResourceType ( i , mat_cans , 200 ) ;
11622: LD_VAR 0 2
11626: PPUSH
11627: LD_INT 1
11629: PPUSH
11630: LD_INT 200
11632: PPUSH
11633: CALL_OW 277
// SetResourceType ( i , mat_oil , 300 ) ;
11637: LD_VAR 0 2
11641: PPUSH
11642: LD_INT 2
11644: PPUSH
11645: LD_INT 300
11647: PPUSH
11648: CALL_OW 277
// end ;
11652: GO 11619
11654: POP
11655: POP
// tmp := [ [ 177 , 114 ] , [ 138 , 96 ] ] ;
11656: LD_ADDR_VAR 0 7
11660: PUSH
11661: LD_INT 177
11663: PUSH
11664: LD_INT 114
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PUSH
11671: LD_INT 138
11673: PUSH
11674: LD_INT 96
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: ST_TO_ADDR
// for i := 1 to tmp do
11685: LD_ADDR_VAR 0 2
11689: PUSH
11690: DOUBLE
11691: LD_INT 1
11693: DEC
11694: ST_TO_ADDR
11695: LD_VAR 0 7
11699: PUSH
11700: FOR_TO
11701: IFFALSE 11784
// begin PrepareHuman ( false , class_bazooker , 6 ) ;
11703: LD_INT 0
11705: PPUSH
11706: LD_INT 9
11708: PPUSH
11709: LD_INT 6
11711: PPUSH
11712: CALL_OW 380
// un := CreateHuman ;
11716: LD_ADDR_VAR 0 5
11720: PUSH
11721: CALL_OW 44
11725: ST_TO_ADDR
// SetDir ( un , 2 ) ;
11726: LD_VAR 0 5
11730: PPUSH
11731: LD_INT 2
11733: PPUSH
11734: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
11738: LD_VAR 0 5
11742: PPUSH
11743: LD_VAR 0 7
11747: PUSH
11748: LD_VAR 0 2
11752: ARRAY
11753: PUSH
11754: LD_INT 1
11756: ARRAY
11757: PPUSH
11758: LD_VAR 0 7
11762: PUSH
11763: LD_VAR 0 2
11767: ARRAY
11768: PUSH
11769: LD_INT 2
11771: ARRAY
11772: PPUSH
11773: CALL_OW 428
11777: PPUSH
11778: CALL_OW 52
// end ;
11782: GO 11700
11784: POP
11785: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
11786: LD_ADDR_VAR 0 7
11790: PUSH
11791: LD_INT 198
11793: PUSH
11794: LD_INT 158
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: LD_INT 203
11803: PUSH
11804: LD_INT 166
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: LD_INT 181
11813: PUSH
11814: LD_INT 209
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: LD_INT 178
11823: PUSH
11824: LD_INT 196
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: PUSH
11831: LD_INT 181
11833: PUSH
11834: LD_INT 212
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: ST_TO_ADDR
// for i := 1 to tmp do
11848: LD_ADDR_VAR 0 2
11852: PUSH
11853: DOUBLE
11854: LD_INT 1
11856: DEC
11857: ST_TO_ADDR
11858: LD_VAR 0 7
11862: PUSH
11863: FOR_TO
11864: IFFALSE 11985
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
11866: LD_INT 0
11868: PPUSH
11869: LD_INT 1
11871: PPUSH
11872: LD_INT 4
11874: PUSH
11875: LD_INT 5
11877: PUSH
11878: LD_INT 6
11880: PUSH
11881: LD_INT 7
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: PUSH
11890: LD_OWVAR 67
11894: ARRAY
11895: PPUSH
11896: CALL_OW 380
// un := CreateHuman ;
11900: LD_ADDR_VAR 0 5
11904: PUSH
11905: CALL_OW 44
11909: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
11910: LD_ADDR_VAR 0 4
11914: PUSH
11915: LD_VAR 0 7
11919: PUSH
11920: LD_VAR 0 2
11924: ARRAY
11925: PUSH
11926: LD_INT 1
11928: ARRAY
11929: PPUSH
11930: LD_VAR 0 7
11934: PUSH
11935: LD_VAR 0 2
11939: ARRAY
11940: PUSH
11941: LD_INT 2
11943: ARRAY
11944: PPUSH
11945: CALL_OW 428
11949: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
11950: LD_VAR 0 5
11954: PPUSH
11955: LD_VAR 0 4
11959: PPUSH
11960: CALL 62904 0 1
11964: PPUSH
11965: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
11969: LD_VAR 0 5
11973: PPUSH
11974: LD_VAR 0 4
11978: PPUSH
11979: CALL_OW 52
// end ;
11983: GO 11863
11985: POP
11986: POP
// for i := 1 to 3 do
11987: LD_ADDR_VAR 0 2
11991: PUSH
11992: DOUBLE
11993: LD_INT 1
11995: DEC
11996: ST_TO_ADDR
11997: LD_INT 3
11999: PUSH
12000: FOR_TO
12001: IFFALSE 12056
// begin InitHc ;
12003: CALL_OW 19
// uc_nation := 0 ;
12007: LD_ADDR_OWVAR 21
12011: PUSH
12012: LD_INT 0
12014: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
12015: LD_ADDR_OWVAR 28
12019: PUSH
12020: LD_INT 16
12022: ST_TO_ADDR
// un := CreateHuman ;
12023: LD_ADDR_VAR 0 5
12027: PUSH
12028: CALL_OW 44
12032: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
12033: LD_VAR 0 5
12037: PPUSH
12038: LD_INT 194
12040: PPUSH
12041: LD_INT 164
12043: PPUSH
12044: LD_INT 6
12046: PPUSH
12047: LD_INT 0
12049: PPUSH
12050: CALL_OW 50
// end ;
12054: GO 12000
12056: POP
12057: POP
// uc_nation := 3 ;
12058: LD_ADDR_OWVAR 21
12062: PUSH
12063: LD_INT 3
12065: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
12066: LD_INT 24
12068: PPUSH
12069: LD_INT 1
12071: PPUSH
12072: LD_INT 1
12074: PPUSH
12075: LD_INT 44
12077: PPUSH
12078: LD_INT 10
12080: PPUSH
12081: CALL 34684 0 5
// un := CreateVehicle ;
12085: LD_ADDR_VAR 0 5
12089: PUSH
12090: CALL_OW 45
12094: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 166 , 1 , false ) ;
12095: LD_VAR 0 5
12099: PPUSH
12100: LD_INT 199
12102: PPUSH
12103: LD_INT 166
12105: PPUSH
12106: LD_INT 1
12108: PPUSH
12109: LD_INT 0
12111: PPUSH
12112: CALL 70014 0 5
// ComHold ( un ) ;
12116: LD_VAR 0 5
12120: PPUSH
12121: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
12125: LD_INT 0
12127: PPUSH
12128: LD_INT 3
12130: PPUSH
12131: LD_INT 4
12133: PPUSH
12134: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12138: CALL_OW 44
12142: PPUSH
12143: LD_VAR 0 5
12147: PPUSH
12148: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
12152: LD_INT 24
12154: PPUSH
12155: LD_INT 1
12157: PPUSH
12158: LD_INT 1
12160: PPUSH
12161: LD_INT 45
12163: PPUSH
12164: LD_INT 10
12166: PPUSH
12167: CALL 34684 0 5
// un := CreateVehicle ;
12171: LD_ADDR_VAR 0 5
12175: PUSH
12176: CALL_OW 45
12180: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
12181: LD_VAR 0 5
12185: PPUSH
12186: LD_INT 129
12188: PPUSH
12189: LD_INT 93
12191: PPUSH
12192: LD_INT 1
12194: PPUSH
12195: LD_INT 0
12197: PPUSH
12198: CALL 70014 0 5
// ComHold ( un ) ;
12202: LD_VAR 0 5
12206: PPUSH
12207: CALL_OW 140
// if Difficulty > 1 then
12211: LD_OWVAR 67
12215: PUSH
12216: LD_INT 1
12218: GREATER
12219: IFFALSE 12307
// begin PrepareHuman ( false , 3 , 4 ) ;
12221: LD_INT 0
12223: PPUSH
12224: LD_INT 3
12226: PPUSH
12227: LD_INT 4
12229: PPUSH
12230: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12234: CALL_OW 44
12238: PPUSH
12239: LD_VAR 0 5
12243: PPUSH
12244: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
12248: LD_INT 24
12250: PPUSH
12251: LD_INT 1
12253: PPUSH
12254: LD_INT 1
12256: PPUSH
12257: LD_INT 45
12259: PPUSH
12260: LD_INT 10
12262: PPUSH
12263: CALL 34684 0 5
// un := CreateVehicle ;
12267: LD_ADDR_VAR 0 5
12271: PUSH
12272: CALL_OW 45
12276: ST_TO_ADDR
// PlaceUnitXYD ( un , 200 , 173 , 1 , false ) ;
12277: LD_VAR 0 5
12281: PPUSH
12282: LD_INT 200
12284: PPUSH
12285: LD_INT 173
12287: PPUSH
12288: LD_INT 1
12290: PPUSH
12291: LD_INT 0
12293: PPUSH
12294: CALL 70014 0 5
// ComHold ( un ) ;
12298: LD_VAR 0 5
12302: PPUSH
12303: CALL_OW 140
// end ; PrepareHuman ( false , 3 , 4 ) ;
12307: LD_INT 0
12309: PPUSH
12310: LD_INT 3
12312: PPUSH
12313: LD_INT 4
12315: PPUSH
12316: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12320: CALL_OW 44
12324: PPUSH
12325: LD_VAR 0 5
12329: PPUSH
12330: CALL_OW 52
// bc_type := b_armoury ;
12334: LD_ADDR_OWVAR 42
12338: PUSH
12339: LD_INT 4
12341: ST_TO_ADDR
// if Difficulty > 1 then
12342: LD_OWVAR 67
12346: PUSH
12347: LD_INT 1
12349: GREATER
12350: IFFALSE 12360
// bc_type := b_barracks ;
12352: LD_ADDR_OWVAR 42
12356: PUSH
12357: LD_INT 5
12359: ST_TO_ADDR
// bc_level := 6 ;
12360: LD_ADDR_OWVAR 43
12364: PUSH
12365: LD_INT 6
12367: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
12368: LD_INT 120
12370: PPUSH
12371: LD_INT 100
12373: PPUSH
12374: LD_INT 5
12376: PPUSH
12377: CALL_OW 47
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
12381: LD_ADDR_VAR 0 2
12385: PUSH
12386: DOUBLE
12387: LD_INT 1
12389: DEC
12390: ST_TO_ADDR
12391: LD_INT 3
12393: PUSH
12394: LD_INT 3
12396: PUSH
12397: LD_INT 4
12399: PUSH
12400: LD_INT 4
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: PUSH
12409: LD_OWVAR 67
12413: ARRAY
12414: PUSH
12415: FOR_TO
12416: IFFALSE 12474
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_bazooker , class_bazooker ] [ Difficulty ] , 5 ) ;
12418: LD_INT 0
12420: PPUSH
12421: LD_INT 1
12423: PUSH
12424: LD_INT 1
12426: PUSH
12427: LD_INT 9
12429: PUSH
12430: LD_INT 9
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: PUSH
12439: LD_OWVAR 67
12443: ARRAY
12444: PPUSH
12445: LD_INT 5
12447: PPUSH
12448: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
12452: CALL_OW 44
12456: PPUSH
12457: LD_INT 120
12459: PPUSH
12460: LD_INT 100
12462: PPUSH
12463: CALL_OW 428
12467: PPUSH
12468: CALL_OW 52
// end ;
12472: GO 12415
12474: POP
12475: POP
// tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
12476: LD_ADDR_VAR 0 7
12480: PUSH
12481: LD_INT 135
12483: PUSH
12484: LD_INT 100
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PUSH
12491: LD_INT 137
12493: PUSH
12494: LD_INT 92
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: ST_TO_ADDR
// for i := 1 to tmp do
12505: LD_ADDR_VAR 0 2
12509: PUSH
12510: DOUBLE
12511: LD_INT 1
12513: DEC
12514: ST_TO_ADDR
12515: LD_VAR 0 7
12519: PUSH
12520: FOR_TO
12521: IFFALSE 12691
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
12523: LD_INT 22
12525: PUSH
12526: LD_INT 22
12528: PUSH
12529: LD_INT 24
12531: PUSH
12532: LD_INT 24
12534: PUSH
12535: LD_INT 24
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: PUSH
12545: LD_OWVAR 67
12549: PUSH
12550: LD_INT 0
12552: PPUSH
12553: LD_INT 1
12555: PPUSH
12556: CALL_OW 12
12560: PLUS
12561: ARRAY
12562: PPUSH
12563: LD_INT 1
12565: PPUSH
12566: LD_INT 1
12568: PPUSH
12569: LD_INT 44
12571: PPUSH
12572: LD_INT 25
12574: PPUSH
12575: CALL 34684 0 5
// veh := CreateVehicle ;
12579: LD_ADDR_VAR 0 6
12583: PUSH
12584: CALL_OW 45
12588: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12589: LD_VAR 0 6
12593: PPUSH
12594: LD_INT 2
12596: PPUSH
12597: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
12601: LD_VAR 0 6
12605: PPUSH
12606: LD_VAR 0 7
12610: PUSH
12611: LD_VAR 0 2
12615: ARRAY
12616: PUSH
12617: LD_INT 1
12619: ARRAY
12620: PPUSH
12621: LD_VAR 0 7
12625: PUSH
12626: LD_VAR 0 2
12630: ARRAY
12631: PUSH
12632: LD_INT 2
12634: ARRAY
12635: PPUSH
12636: LD_INT 0
12638: PPUSH
12639: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
12643: LD_INT 0
12645: PPUSH
12646: LD_INT 3
12648: PPUSH
12649: LD_INT 6
12651: PPUSH
12652: CALL_OW 380
// un := CreateHuman ;
12656: LD_ADDR_VAR 0 5
12660: PUSH
12661: CALL_OW 44
12665: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12666: LD_VAR 0 5
12670: PPUSH
12671: LD_VAR 0 6
12675: PPUSH
12676: CALL_OW 52
// ComHold ( veh ) ;
12680: LD_VAR 0 6
12684: PPUSH
12685: CALL_OW 140
// end ;
12689: GO 12520
12691: POP
12692: POP
// tmp := [ 191 , 122 ] ;
12693: LD_ADDR_VAR 0 7
12697: PUSH
12698: LD_INT 191
12700: PUSH
12701: LD_INT 122
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
12708: LD_INT 24
12710: PPUSH
12711: LD_INT 1
12713: PPUSH
12714: LD_INT 1
12716: PPUSH
12717: LD_INT 44
12719: PPUSH
12720: LD_INT 30
12722: PPUSH
12723: CALL 34684 0 5
// ruBlockadeTank := CreateVehicle ;
12727: LD_ADDR_EXP 55
12731: PUSH
12732: CALL_OW 45
12736: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
12737: LD_EXP 55
12741: PPUSH
12742: LD_INT 2
12744: PPUSH
12745: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
12749: LD_EXP 55
12753: PPUSH
12754: LD_INT 191
12756: PPUSH
12757: LD_INT 122
12759: PPUSH
12760: LD_INT 0
12762: PPUSH
12763: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 , 7 ] [ Difficulty - 1 ] ) ;
12767: LD_INT 1
12769: PPUSH
12770: LD_INT 5
12772: PUSH
12773: LD_INT 6
12775: PUSH
12776: LD_INT 7
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: LIST
12783: PUSH
12784: LD_OWVAR 67
12788: PUSH
12789: LD_INT 1
12791: MINUS
12792: ARRAY
12793: PPUSH
12794: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
12798: CALL_OW 44
12802: PPUSH
12803: LD_EXP 55
12807: PPUSH
12808: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
12812: LD_EXP 55
12816: PPUSH
12817: CALL_OW 140
// ruBlockadeSquad := [ ] ;
12821: LD_ADDR_EXP 57
12825: PUSH
12826: EMPTY
12827: ST_TO_ADDR
// for i := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
12828: LD_ADDR_VAR 0 2
12832: PUSH
12833: DOUBLE
12834: LD_INT 1
12836: DEC
12837: ST_TO_ADDR
12838: LD_INT 2
12840: PUSH
12841: LD_INT 2
12843: PUSH
12844: LD_INT 3
12846: PUSH
12847: LD_INT 3
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: PUSH
12856: LD_OWVAR 67
12860: ARRAY
12861: PUSH
12862: FOR_TO
12863: IFFALSE 12979
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
12865: LD_INT 0
12867: PPUSH
12868: LD_INT 1
12870: PPUSH
12871: LD_INT 4
12873: PUSH
12874: LD_INT 5
12876: PUSH
12877: LD_INT 6
12879: PUSH
12880: LD_INT 7
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: PUSH
12889: LD_OWVAR 67
12893: ARRAY
12894: PPUSH
12895: CALL_OW 380
// un := CreateHuman ;
12899: LD_ADDR_VAR 0 5
12903: PUSH
12904: CALL_OW 44
12908: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
12909: LD_VAR 0 5
12913: PPUSH
12914: LD_INT 9
12916: PPUSH
12917: LD_INT 0
12919: PPUSH
12920: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
12924: LD_VAR 0 5
12928: PPUSH
12929: LD_INT 198
12931: PPUSH
12932: LD_INT 129
12934: PPUSH
12935: CALL_OW 118
// AddComCrawl ( un ) ;
12939: LD_VAR 0 5
12943: PPUSH
12944: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
12948: LD_ADDR_EXP 57
12952: PUSH
12953: LD_EXP 57
12957: PPUSH
12958: LD_EXP 57
12962: PUSH
12963: LD_INT 1
12965: PLUS
12966: PPUSH
12967: LD_VAR 0 5
12971: PPUSH
12972: CALL_OW 1
12976: ST_TO_ADDR
// end ;
12977: GO 12862
12979: POP
12980: POP
// PrepareHuman ( false , 4 , 5 ) ;
12981: LD_INT 0
12983: PPUSH
12984: LD_INT 4
12986: PPUSH
12987: LD_INT 5
12989: PPUSH
12990: CALL_OW 380
// un := CreateHuman ;
12994: LD_ADDR_VAR 0 5
12998: PUSH
12999: CALL_OW 44
13003: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
13004: LD_VAR 0 5
13008: PPUSH
13009: LD_INT 179
13011: PPUSH
13012: LD_INT 113
13014: PPUSH
13015: LD_INT 0
13017: PPUSH
13018: CALL_OW 48
// ComHold ( un ) ;
13022: LD_VAR 0 5
13026: PPUSH
13027: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
13031: LD_ADDR_EXP 57
13035: PUSH
13036: LD_EXP 57
13040: PPUSH
13041: LD_EXP 57
13045: PUSH
13046: LD_INT 1
13048: PLUS
13049: PPUSH
13050: LD_VAR 0 5
13054: PPUSH
13055: CALL_OW 1
13059: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
13060: LD_ADDR_VAR 0 7
13064: PUSH
13065: LD_INT 167
13067: PPUSH
13068: LD_INT 243
13070: PPUSH
13071: CALL_OW 428
13075: PPUSH
13076: CALL_OW 274
13080: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
13081: LD_VAR 0 7
13085: PPUSH
13086: LD_INT 1
13088: PPUSH
13089: LD_INT 1000
13091: PPUSH
13092: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
13096: LD_VAR 0 7
13100: PPUSH
13101: LD_INT 2
13103: PPUSH
13104: LD_INT 400
13106: PPUSH
13107: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
13111: LD_ADDR_VAR 0 7
13115: PUSH
13116: LD_INT 169
13118: PPUSH
13119: LD_INT 229
13121: PPUSH
13122: CALL_OW 428
13126: ST_TO_ADDR
// for i := 1 to 3 do
13127: LD_ADDR_VAR 0 2
13131: PUSH
13132: DOUBLE
13133: LD_INT 1
13135: DEC
13136: ST_TO_ADDR
13137: LD_INT 3
13139: PUSH
13140: FOR_TO
13141: IFFALSE 13232
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13143: LD_INT 0
13145: PPUSH
13146: LD_INT 1
13148: PPUSH
13149: LD_INT 4
13151: PUSH
13152: LD_INT 5
13154: PUSH
13155: LD_INT 5
13157: PUSH
13158: LD_INT 6
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: PUSH
13167: LD_OWVAR 67
13171: ARRAY
13172: PPUSH
13173: CALL_OW 380
// un := CreateHuman ;
13177: LD_ADDR_VAR 0 5
13181: PUSH
13182: CALL_OW 44
13186: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
13187: LD_VAR 0 5
13191: PPUSH
13192: LD_VAR 0 7
13196: PPUSH
13197: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
13201: LD_ADDR_EXP 58
13205: PUSH
13206: LD_EXP 58
13210: PPUSH
13211: LD_EXP 58
13215: PUSH
13216: LD_INT 1
13218: PLUS
13219: PPUSH
13220: LD_VAR 0 5
13224: PPUSH
13225: CALL_OW 1
13229: ST_TO_ADDR
// end ;
13230: GO 13140
13232: POP
13233: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
13234: LD_ADDR_VAR 0 7
13238: PUSH
13239: LD_INT 165
13241: PUSH
13242: LD_INT 227
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: PUSH
13249: LD_INT 173
13251: PUSH
13252: LD_INT 231
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: ST_TO_ADDR
// for i := 1 to tmp do
13263: LD_ADDR_VAR 0 2
13267: PUSH
13268: DOUBLE
13269: LD_INT 1
13271: DEC
13272: ST_TO_ADDR
13273: LD_VAR 0 7
13277: PUSH
13278: FOR_TO
13279: IFFALSE 13400
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13281: LD_INT 0
13283: PPUSH
13284: LD_INT 1
13286: PPUSH
13287: LD_INT 4
13289: PUSH
13290: LD_INT 5
13292: PUSH
13293: LD_INT 5
13295: PUSH
13296: LD_INT 6
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: PUSH
13305: LD_OWVAR 67
13309: ARRAY
13310: PPUSH
13311: CALL_OW 380
// un := CreateHuman ;
13315: LD_ADDR_VAR 0 5
13319: PUSH
13320: CALL_OW 44
13324: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
13325: LD_VAR 0 5
13329: PPUSH
13330: LD_VAR 0 7
13334: PUSH
13335: LD_VAR 0 2
13339: ARRAY
13340: PUSH
13341: LD_INT 1
13343: ARRAY
13344: PPUSH
13345: LD_VAR 0 7
13349: PUSH
13350: LD_VAR 0 2
13354: ARRAY
13355: PUSH
13356: LD_INT 2
13358: ARRAY
13359: PPUSH
13360: CALL_OW 428
13364: PPUSH
13365: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
13369: LD_ADDR_EXP 58
13373: PUSH
13374: LD_EXP 58
13378: PPUSH
13379: LD_EXP 58
13383: PUSH
13384: LD_INT 1
13386: PLUS
13387: PPUSH
13388: LD_VAR 0 5
13392: PPUSH
13393: CALL_OW 1
13397: ST_TO_ADDR
// end ;
13398: GO 13278
13400: POP
13401: POP
// for i := 1 to 2 do
13402: LD_ADDR_VAR 0 2
13406: PUSH
13407: DOUBLE
13408: LD_INT 1
13410: DEC
13411: ST_TO_ADDR
13412: LD_INT 2
13414: PUSH
13415: FOR_TO
13416: IFFALSE 13471
// begin InitHc ;
13418: CALL_OW 19
// uc_nation := 0 ;
13422: LD_ADDR_OWVAR 21
13426: PUSH
13427: LD_INT 0
13429: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
13430: LD_ADDR_OWVAR 28
13434: PUSH
13435: LD_INT 16
13437: ST_TO_ADDR
// un := CreateHuman ;
13438: LD_ADDR_VAR 0 5
13442: PUSH
13443: CALL_OW 44
13447: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
13448: LD_VAR 0 5
13452: PPUSH
13453: LD_INT 166
13455: PPUSH
13456: LD_INT 233
13458: PPUSH
13459: LD_INT 2
13461: PPUSH
13462: LD_INT 0
13464: PPUSH
13465: CALL_OW 50
// end ;
13469: GO 13415
13471: POP
13472: POP
// uc_nation := 3 ;
13473: LD_ADDR_OWVAR 21
13477: PUSH
13478: LD_INT 3
13480: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
13481: LD_ADDR_VAR 0 7
13485: PUSH
13486: LD_INT 71
13488: PUSH
13489: LD_INT 52
13491: PUSH
13492: LD_INT 11
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: LIST
13499: ST_TO_ADDR
// for i in tmp do
13500: LD_ADDR_VAR 0 2
13504: PUSH
13505: LD_VAR 0 7
13509: PUSH
13510: FOR_IN
13511: IFFALSE 13555
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
13513: LD_VAR 0 2
13517: PPUSH
13518: CALL_OW 274
13522: PPUSH
13523: LD_INT 1
13525: PPUSH
13526: LD_INT 3000
13528: PPUSH
13529: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
13533: LD_VAR 0 2
13537: PPUSH
13538: CALL_OW 274
13542: PPUSH
13543: LD_INT 2
13545: PPUSH
13546: LD_INT 600
13548: PPUSH
13549: CALL_OW 277
// end ;
13553: GO 13510
13555: POP
13556: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
13557: LD_ADDR_VAR 0 7
13561: PUSH
13562: LD_INT 41
13564: PUSH
13565: LD_INT 57
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: PUSH
13572: LD_INT 38
13574: PUSH
13575: LD_INT 55
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: LD_INT 50
13584: PUSH
13585: LD_INT 73
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PUSH
13592: LD_INT 51
13594: PUSH
13595: LD_INT 65
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: PUSH
13602: LD_INT 82
13604: PUSH
13605: LD_INT 93
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PUSH
13612: LD_INT 87
13614: PUSH
13615: LD_INT 100
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: PUSH
13622: LD_INT 91
13624: PUSH
13625: LD_INT 109
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: PUSH
13632: LD_INT 84
13634: PUSH
13635: LD_INT 120
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: PUSH
13642: LD_INT 113
13644: PUSH
13645: LD_INT 153
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: PUSH
13652: LD_INT 123
13654: PUSH
13655: LD_INT 171
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 125
13664: PUSH
13665: LD_INT 178
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: PUSH
13672: LD_INT 125
13674: PUSH
13675: LD_INT 188
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PUSH
13682: LD_INT 125
13684: PUSH
13685: LD_INT 201
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: PUSH
13692: LD_INT 33
13694: PUSH
13695: LD_INT 60
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: LD_INT 76
13704: PUSH
13705: LD_INT 95
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: LD_INT 84
13714: PUSH
13715: LD_INT 111
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: LD_INT 112
13724: PUSH
13725: LD_INT 165
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: ST_TO_ADDR
// for i := 1 to tmp do
13751: LD_ADDR_VAR 0 2
13755: PUSH
13756: DOUBLE
13757: LD_INT 1
13759: DEC
13760: ST_TO_ADDR
13761: LD_VAR 0 7
13765: PUSH
13766: FOR_TO
13767: IFFALSE 14014
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
13769: LD_ADDR_VAR 0 4
13773: PUSH
13774: LD_VAR 0 7
13778: PUSH
13779: LD_VAR 0 2
13783: ARRAY
13784: PUSH
13785: LD_INT 1
13787: ARRAY
13788: PPUSH
13789: LD_VAR 0 7
13793: PUSH
13794: LD_VAR 0 2
13798: ARRAY
13799: PUSH
13800: LD_INT 2
13802: ARRAY
13803: PPUSH
13804: CALL_OW 428
13808: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
13809: LD_VAR 0 4
13813: PPUSH
13814: CALL_OW 266
13818: PUSH
13819: LD_INT 4
13821: PUSH
13822: LD_INT 5
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: IN
13829: IFFALSE 13925
// begin for j := 1 to Difficulty do
13831: LD_ADDR_VAR 0 3
13835: PUSH
13836: DOUBLE
13837: LD_INT 1
13839: DEC
13840: ST_TO_ADDR
13841: LD_OWVAR 67
13845: PUSH
13846: FOR_TO
13847: IFFALSE 13921
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13849: LD_INT 0
13851: PPUSH
13852: LD_INT 1
13854: PPUSH
13855: LD_INT 4
13857: PUSH
13858: LD_INT 5
13860: PUSH
13861: LD_INT 5
13863: PUSH
13864: LD_INT 6
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: PUSH
13873: LD_OWVAR 67
13877: ARRAY
13878: PPUSH
13879: CALL_OW 380
// un := CreateHuman ;
13883: LD_ADDR_VAR 0 5
13887: PUSH
13888: CALL_OW 44
13892: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13893: LD_VAR 0 5
13897: PPUSH
13898: LD_VAR 0 4
13902: PPUSH
13903: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
13907: LD_VAR 0 5
13911: PPUSH
13912: LD_INT 9
13914: PPUSH
13915: CALL_OW 336
// end ;
13919: GO 13846
13921: POP
13922: POP
// end else
13923: GO 13983
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13925: LD_INT 0
13927: PPUSH
13928: LD_INT 1
13930: PPUSH
13931: LD_INT 4
13933: PUSH
13934: LD_INT 5
13936: PUSH
13937: LD_INT 5
13939: PUSH
13940: LD_INT 6
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: PUSH
13949: LD_OWVAR 67
13953: ARRAY
13954: PPUSH
13955: CALL_OW 380
// un := CreateHuman ;
13959: LD_ADDR_VAR 0 5
13963: PUSH
13964: CALL_OW 44
13968: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13969: LD_VAR 0 5
13973: PPUSH
13974: LD_VAR 0 4
13978: PPUSH
13979: CALL_OW 52
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13983: LD_ADDR_EXP 59
13987: PUSH
13988: LD_EXP 59
13992: PPUSH
13993: LD_EXP 59
13997: PUSH
13998: LD_INT 1
14000: PLUS
14001: PPUSH
14002: LD_VAR 0 5
14006: PPUSH
14007: CALL_OW 1
14011: ST_TO_ADDR
// end ;
14012: GO 13766
14014: POP
14015: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
14016: LD_ADDR_VAR 0 4
14020: PUSH
14021: LD_INT 10
14023: PPUSH
14024: LD_INT 22
14026: PUSH
14027: LD_INT 3
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PUSH
14034: LD_INT 30
14036: PUSH
14037: LD_INT 32
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PUSH
14044: LD_INT 58
14046: PUSH
14047: EMPTY
14048: LIST
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: LIST
14054: PPUSH
14055: CALL_OW 70
14059: PUSH
14060: FOR_IN
14061: IFFALSE 14195
// begin if not Prob ( [ 40 , 50 , 75 , 80 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
14063: LD_INT 40
14065: PUSH
14066: LD_INT 50
14068: PUSH
14069: LD_INT 75
14071: PUSH
14072: LD_INT 80
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: PUSH
14081: LD_OWVAR 67
14085: ARRAY
14086: PUSH
14087: LD_EXP 7
14091: PUSH
14092: LD_INT 10
14094: MUL
14095: MINUS
14096: PPUSH
14097: CALL_OW 13
14101: NOT
14102: IFFALSE 14106
// continue ;
14104: GO 14060
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14106: LD_INT 0
14108: PPUSH
14109: LD_INT 1
14111: PPUSH
14112: LD_INT 4
14114: PUSH
14115: LD_INT 5
14117: PUSH
14118: LD_INT 5
14120: PUSH
14121: LD_INT 6
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: PUSH
14130: LD_OWVAR 67
14134: ARRAY
14135: PPUSH
14136: CALL_OW 380
// un := CreateHuman ;
14140: LD_ADDR_VAR 0 5
14144: PUSH
14145: CALL_OW 44
14149: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
14150: LD_VAR 0 5
14154: PPUSH
14155: LD_VAR 0 4
14159: PPUSH
14160: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14164: LD_ADDR_EXP 59
14168: PUSH
14169: LD_EXP 59
14173: PPUSH
14174: LD_EXP 59
14178: PUSH
14179: LD_INT 1
14181: PLUS
14182: PPUSH
14183: LD_VAR 0 5
14187: PPUSH
14188: CALL_OW 1
14192: ST_TO_ADDR
// end ;
14193: GO 14060
14195: POP
14196: POP
// for i := 1 to 5 do
14197: LD_ADDR_VAR 0 2
14201: PUSH
14202: DOUBLE
14203: LD_INT 1
14205: DEC
14206: ST_TO_ADDR
14207: LD_INT 5
14209: PUSH
14210: FOR_TO
14211: IFFALSE 14309
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14213: LD_INT 0
14215: PPUSH
14216: LD_INT 2
14218: PPUSH
14219: LD_INT 4
14221: PUSH
14222: LD_INT 5
14224: PUSH
14225: LD_INT 5
14227: PUSH
14228: LD_INT 6
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: PUSH
14237: LD_OWVAR 67
14241: ARRAY
14242: PPUSH
14243: CALL_OW 380
// un := CreateHuman ;
14247: LD_ADDR_VAR 0 5
14251: PUSH
14252: CALL_OW 44
14256: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
14257: LD_VAR 0 5
14261: PPUSH
14262: LD_INT 66
14264: PPUSH
14265: LD_INT 101
14267: PPUSH
14268: LD_INT 3
14270: PPUSH
14271: LD_INT 0
14273: PPUSH
14274: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14278: LD_ADDR_EXP 59
14282: PUSH
14283: LD_EXP 59
14287: PPUSH
14288: LD_EXP 59
14292: PUSH
14293: LD_INT 1
14295: PLUS
14296: PPUSH
14297: LD_VAR 0 5
14301: PPUSH
14302: CALL_OW 1
14306: ST_TO_ADDR
// end ;
14307: GO 14210
14309: POP
14310: POP
// tmp := [ ruFac1 , ruFac2 ] ;
14311: LD_ADDR_VAR 0 7
14315: PUSH
14316: LD_INT 72
14318: PUSH
14319: LD_INT 12
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: ST_TO_ADDR
// for i := 1 to tmp do
14326: LD_ADDR_VAR 0 2
14330: PUSH
14331: DOUBLE
14332: LD_INT 1
14334: DEC
14335: ST_TO_ADDR
14336: LD_VAR 0 7
14340: PUSH
14341: FOR_TO
14342: IFFALSE 14459
// for j := 1 to 6 do
14344: LD_ADDR_VAR 0 3
14348: PUSH
14349: DOUBLE
14350: LD_INT 1
14352: DEC
14353: ST_TO_ADDR
14354: LD_INT 6
14356: PUSH
14357: FOR_TO
14358: IFFALSE 14455
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14360: LD_INT 0
14362: PPUSH
14363: LD_INT 3
14365: PPUSH
14366: LD_INT 4
14368: PUSH
14369: LD_INT 5
14371: PUSH
14372: LD_INT 5
14374: PUSH
14375: LD_INT 6
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: PUSH
14384: LD_OWVAR 67
14388: ARRAY
14389: PPUSH
14390: CALL_OW 380
// un := CreateHuman ;
14394: LD_ADDR_VAR 0 5
14398: PUSH
14399: CALL_OW 44
14403: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
14404: LD_VAR 0 5
14408: PPUSH
14409: LD_VAR 0 7
14413: PUSH
14414: LD_VAR 0 2
14418: ARRAY
14419: PPUSH
14420: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14424: LD_ADDR_EXP 59
14428: PUSH
14429: LD_EXP 59
14433: PPUSH
14434: LD_EXP 59
14438: PUSH
14439: LD_INT 1
14441: PLUS
14442: PPUSH
14443: LD_VAR 0 5
14447: PPUSH
14448: CALL_OW 1
14452: ST_TO_ADDR
// end ;
14453: GO 14357
14455: POP
14456: POP
14457: GO 14341
14459: POP
14460: POP
// for i := 1 to 3 do
14461: LD_ADDR_VAR 0 2
14465: PUSH
14466: DOUBLE
14467: LD_INT 1
14469: DEC
14470: ST_TO_ADDR
14471: LD_INT 3
14473: PUSH
14474: FOR_TO
14475: IFFALSE 14564
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14477: LD_INT 0
14479: PPUSH
14480: LD_INT 4
14482: PPUSH
14483: LD_INT 4
14485: PUSH
14486: LD_INT 5
14488: PUSH
14489: LD_INT 5
14491: PUSH
14492: LD_INT 6
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: PUSH
14501: LD_OWVAR 67
14505: ARRAY
14506: PPUSH
14507: CALL_OW 380
// un := CreateHuman ;
14511: LD_ADDR_VAR 0 5
14515: PUSH
14516: CALL_OW 44
14520: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
14521: LD_VAR 0 5
14525: PPUSH
14526: LD_INT 17
14528: PPUSH
14529: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14533: LD_ADDR_EXP 59
14537: PUSH
14538: LD_EXP 59
14542: PPUSH
14543: LD_EXP 59
14547: PUSH
14548: LD_INT 1
14550: PLUS
14551: PPUSH
14552: LD_VAR 0 5
14556: PPUSH
14557: CALL_OW 1
14561: ST_TO_ADDR
// end ;
14562: GO 14474
14564: POP
14565: POP
// for i := 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
14566: LD_ADDR_VAR 0 2
14570: PUSH
14571: DOUBLE
14572: LD_INT 1
14574: DEC
14575: ST_TO_ADDR
14576: LD_INT 2
14578: PUSH
14579: LD_INT 3
14581: PUSH
14582: LD_INT 3
14584: PUSH
14585: LD_INT 3
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: PUSH
14594: LD_OWVAR 67
14598: ARRAY
14599: PUSH
14600: FOR_TO
14601: IFFALSE 14721
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
14603: LD_INT 22
14605: PPUSH
14606: LD_INT 1
14608: PPUSH
14609: LD_INT 1
14611: PPUSH
14612: LD_INT 52
14614: PPUSH
14615: LD_INT 100
14617: PPUSH
14618: CALL 34684 0 5
// veh := CreateVehicle ;
14622: LD_ADDR_VAR 0 6
14626: PUSH
14627: CALL_OW 45
14631: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
14632: LD_INT 0
14634: PPUSH
14635: LD_INT 3
14637: PPUSH
14638: LD_INT 4
14640: PPUSH
14641: CALL_OW 380
// un := CreateHuman ;
14645: LD_ADDR_VAR 0 5
14649: PUSH
14650: CALL_OW 44
14654: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
14655: LD_VAR 0 6
14659: PPUSH
14660: LD_INT 107
14662: PPUSH
14663: LD_INT 182
14665: PPUSH
14666: LD_INT 4
14668: PPUSH
14669: LD_INT 0
14671: PPUSH
14672: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
14676: LD_VAR 0 5
14680: PPUSH
14681: LD_VAR 0 6
14685: PPUSH
14686: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14690: LD_ADDR_EXP 59
14694: PUSH
14695: LD_EXP 59
14699: PPUSH
14700: LD_EXP 59
14704: PUSH
14705: LD_INT 1
14707: PLUS
14708: PPUSH
14709: LD_VAR 0 5
14713: PPUSH
14714: CALL_OW 1
14718: ST_TO_ADDR
// end ;
14719: GO 14600
14721: POP
14722: POP
// InitHc ;
14723: CALL_OW 19
// for i := 1 to [ 3 , 5 , 6 , 8 ] [ Difficulty ] do
14727: LD_ADDR_VAR 0 2
14731: PUSH
14732: DOUBLE
14733: LD_INT 1
14735: DEC
14736: ST_TO_ADDR
14737: LD_INT 3
14739: PUSH
14740: LD_INT 5
14742: PUSH
14743: LD_INT 6
14745: PUSH
14746: LD_INT 8
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: PUSH
14755: LD_OWVAR 67
14759: ARRAY
14760: PUSH
14761: FOR_TO
14762: IFFALSE 14857
// begin uc_nation := 0 ;
14764: LD_ADDR_OWVAR 21
14768: PUSH
14769: LD_INT 0
14771: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
14772: LD_ADDR_OWVAR 28
14776: PUSH
14777: LD_INT 15
14779: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
14780: LD_ADDR_OWVAR 31
14784: PUSH
14785: LD_INT 3
14787: PUSH
14788: LD_INT 0
14790: PUSH
14791: LD_INT 0
14793: PUSH
14794: LD_INT 0
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: ST_TO_ADDR
// un := CreateHuman ;
14803: LD_ADDR_VAR 0 5
14807: PUSH
14808: CALL_OW 44
14812: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
14813: LD_VAR 0 5
14817: PPUSH
14818: LD_INT 269
14820: PUSH
14821: LD_INT 300
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: PUSH
14828: LD_VAR 0 2
14832: PUSH
14833: LD_INT 2
14835: MOD
14836: PUSH
14837: LD_INT 1
14839: PLUS
14840: ARRAY
14841: PPUSH
14842: LD_INT 182
14844: PPUSH
14845: LD_INT 4
14847: PPUSH
14848: LD_INT 0
14850: PPUSH
14851: CALL_OW 50
// end ;
14855: GO 14761
14857: POP
14858: POP
// uc_nation := 3 ;
14859: LD_ADDR_OWVAR 21
14863: PUSH
14864: LD_INT 3
14866: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
14867: LD_EXP 8
14871: PUSH
14872: LD_INT 10
14874: PUSH
14875: LD_INT 8
14877: PUSH
14878: LD_INT 6
14880: PUSH
14881: LD_INT 5
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: PUSH
14890: LD_OWVAR 67
14894: ARRAY
14895: LESS
14896: IFFALSE 14975
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
14898: LD_INT 21
14900: PPUSH
14901: LD_INT 1
14903: PPUSH
14904: LD_INT 1
14906: PPUSH
14907: LD_INT 51
14909: PPUSH
14910: LD_INT 12
14912: PPUSH
14913: CALL 34684 0 5
// veh := CreateVehicle ;
14917: LD_ADDR_VAR 0 6
14921: PUSH
14922: CALL_OW 45
14926: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
14927: LD_VAR 0 6
14931: PPUSH
14932: LD_INT 269
14934: PPUSH
14935: LD_INT 66
14937: PPUSH
14938: LD_INT 4
14940: PPUSH
14941: LD_INT 0
14943: PPUSH
14944: CALL 70014 0 5
// SetLives ( veh , 333 ) ;
14948: LD_VAR 0 6
14952: PPUSH
14953: LD_INT 333
14955: PPUSH
14956: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
14960: LD_VAR 0 6
14964: PPUSH
14965: LD_INT 2
14967: PPUSH
14968: LD_INT 100
14970: PPUSH
14971: CALL_OW 290
// end ; end ;
14975: LD_VAR 0 1
14979: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
14980: LD_EXP 55
14984: IFFALSE 15001
14986: PUSH
14987: LD_EXP 55
14991: PPUSH
14992: CALL_OW 255
14996: PUSH
14997: LD_INT 3
14999: EQUAL
15000: AND
15001: IFFALSE 15166
15003: GO 15005
15005: DISABLE
15006: LD_INT 0
15008: PPUSH
// begin enable ;
15009: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
15010: LD_INT 81
15012: PUSH
15013: LD_INT 3
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: PUSH
15020: LD_INT 91
15022: PUSH
15023: LD_EXP 55
15027: PUSH
15028: LD_INT 15
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: LIST
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: PPUSH
15040: CALL_OW 69
15044: IFFALSE 15124
// begin if not IsDrivenBy ( ruBlockadeTank ) then
15046: LD_EXP 55
15050: PPUSH
15051: CALL_OW 311
15055: NOT
15056: IFFALSE 15122
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
15058: LD_ADDR_VAR 0 1
15062: PUSH
15063: LD_INT 22
15065: PUSH
15066: LD_INT 3
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PUSH
15073: LD_INT 21
15075: PUSH
15076: LD_INT 1
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: PPUSH
15087: CALL_OW 69
15091: PPUSH
15092: LD_EXP 55
15096: PPUSH
15097: CALL_OW 74
15101: ST_TO_ADDR
// if driver then
15102: LD_VAR 0 1
15106: IFFALSE 15122
// ComEnterUnit ( driver , ruBlockadeTank ) ;
15108: LD_VAR 0 1
15112: PPUSH
15113: LD_EXP 55
15117: PPUSH
15118: CALL_OW 120
// end ; exit ;
15122: GO 15166
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
15124: LD_EXP 55
15128: PPUSH
15129: CALL_OW 256
15133: PUSH
15134: LD_INT 1000
15136: LESS
15137: IFFALSE 15150
15139: PUSH
15140: LD_EXP 55
15144: PPUSH
15145: CALL_OW 311
15149: AND
15150: IFFALSE 15166
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
15152: LD_EXP 55
15156: PPUSH
15157: CALL_OW 311
15161: PPUSH
15162: CALL 69568 0 1
// end ;
15166: PPOPN 1
15168: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
15169: LD_EXP 57
15173: PPUSH
15174: LD_INT 3
15176: PUSH
15177: LD_INT 24
15179: PUSH
15180: LD_INT 1000
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PPUSH
15191: CALL_OW 72
15195: IFFALSE 15228
15197: PUSH
15198: LD_EXP 57
15202: PPUSH
15203: LD_INT 25
15205: PUSH
15206: LD_INT 4
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: LD_INT 50
15215: PUSH
15216: EMPTY
15217: LIST
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: PPUSH
15223: CALL_OW 72
15227: AND
15228: IFFALSE 15416
15230: GO 15232
15232: DISABLE
15233: LD_INT 0
15235: PPUSH
15236: PPUSH
15237: PPUSH
// begin enable ;
15238: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
15239: LD_ADDR_VAR 0 3
15243: PUSH
15244: LD_EXP 57
15248: PPUSH
15249: LD_INT 3
15251: PUSH
15252: LD_INT 24
15254: PUSH
15255: LD_INT 1000
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PPUSH
15266: CALL_OW 72
15270: PPUSH
15271: LD_INT 1
15273: PPUSH
15274: CALL 69812 0 2
15278: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
15279: LD_ADDR_VAR 0 2
15283: PUSH
15284: LD_EXP 57
15288: PPUSH
15289: LD_INT 25
15291: PUSH
15292: LD_INT 4
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: PUSH
15299: LD_INT 50
15301: PUSH
15302: EMPTY
15303: LIST
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: PPUSH
15309: CALL_OW 72
15313: PUSH
15314: LD_INT 1
15316: ARRAY
15317: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
15318: LD_VAR 0 2
15322: PPUSH
15323: LD_VAR 0 3
15327: PUSH
15328: LD_INT 1
15330: ARRAY
15331: PPUSH
15332: CALL 65109 0 2
15336: NOT
15337: IFFALSE 15416
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
15339: LD_VAR 0 3
15343: PUSH
15344: LD_INT 1
15346: ARRAY
15347: PPUSH
15348: LD_INT 9
15350: PPUSH
15351: CALL_OW 308
15355: NOT
15356: IFFALSE 15374
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
15358: LD_VAR 0 3
15362: PUSH
15363: LD_INT 1
15365: ARRAY
15366: PPUSH
15367: LD_INT 9
15369: PPUSH
15370: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
15374: LD_VAR 0 2
15378: PPUSH
15379: LD_VAR 0 3
15383: PUSH
15384: LD_INT 1
15386: ARRAY
15387: PPUSH
15388: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
15392: LD_VAR 0 2
15396: PPUSH
15397: LD_INT 179
15399: PPUSH
15400: LD_INT 113
15402: PPUSH
15403: CALL_OW 171
// AddComHold ( sci ) ;
15407: LD_VAR 0 2
15411: PPUSH
15412: CALL_OW 200
// end ; end ;
15416: PPOPN 3
15418: END
// every 0 0$1 trigger not IsOk ( Morozov ) do var i , tmp ;
15419: LD_EXP 53
15423: PPUSH
15424: CALL_OW 302
15428: NOT
15429: IFFALSE 15545
15431: GO 15433
15433: DISABLE
15434: LD_INT 0
15436: PPUSH
15437: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
15438: LD_ADDR_VAR 0 2
15442: PUSH
15443: LD_EXP 59
15447: PPUSH
15448: LD_INT 25
15450: PUSH
15451: LD_INT 1
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: PUSH
15458: LD_INT 50
15460: PUSH
15461: EMPTY
15462: LIST
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PPUSH
15468: CALL_OW 72
15472: ST_TO_ADDR
// if not tmp then
15473: LD_VAR 0 2
15477: NOT
15478: IFFALSE 15482
// exit ;
15480: GO 15545
// for i in tmp do
15482: LD_ADDR_VAR 0 1
15486: PUSH
15487: LD_VAR 0 2
15491: PUSH
15492: FOR_IN
15493: IFFALSE 15543
// begin if Prob ( 50 ) then
15495: LD_INT 50
15497: PPUSH
15498: CALL_OW 13
15502: IFFALSE 15506
// continue ;
15504: GO 15492
// if IsInUnit ( i ) then
15506: LD_VAR 0 1
15510: PPUSH
15511: CALL_OW 310
15515: IFFALSE 15526
// ComExitBuilding ( i ) ;
15517: LD_VAR 0 1
15521: PPUSH
15522: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
15526: LD_VAR 0 1
15530: PPUSH
15531: LD_INT 84
15533: PPUSH
15534: LD_INT 133
15536: PPUSH
15537: CALL_OW 174
// end ;
15541: GO 15492
15543: POP
15544: POP
// end ;
15545: PPOPN 2
15547: END
// every 0 0$10 trigger leninSpotted do var i , tmp , weapon ;
15548: LD_EXP 14
15552: IFFALSE 15733
15554: GO 15556
15556: DISABLE
15557: LD_INT 0
15559: PPUSH
15560: PPUSH
15561: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
15562: LD_ADDR_VAR 0 2
15566: PUSH
15567: LD_INT 72
15569: PUSH
15570: LD_INT 12
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket_launcher , ru_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] ] [ Difficulty ] ;
15577: LD_ADDR_VAR 0 3
15581: PUSH
15582: LD_INT 44
15584: PUSH
15585: LD_INT 43
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: PUSH
15592: LD_INT 45
15594: PUSH
15595: LD_INT 44
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: PUSH
15602: LD_INT 45
15604: PUSH
15605: LD_INT 46
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PUSH
15612: LD_INT 45
15614: PUSH
15615: LD_INT 46
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: PUSH
15628: LD_OWVAR 67
15632: ARRAY
15633: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
15634: LD_ADDR_VAR 0 1
15638: PUSH
15639: DOUBLE
15640: LD_INT 1
15642: DEC
15643: ST_TO_ADDR
15644: LD_INT 1
15646: PUSH
15647: LD_INT 2
15649: PUSH
15650: LD_INT 2
15652: PUSH
15653: LD_INT 3
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: PUSH
15662: LD_OWVAR 67
15666: ARRAY
15667: PUSH
15668: FOR_TO
15669: IFFALSE 15731
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
15671: LD_VAR 0 2
15675: PPUSH
15676: LD_INT 22
15678: PUSH
15679: LD_INT 23
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: LD_VAR 0 1
15690: PUSH
15691: LD_INT 2
15693: MOD
15694: PUSH
15695: LD_INT 1
15697: PLUS
15698: ARRAY
15699: PPUSH
15700: LD_INT 1
15702: PPUSH
15703: LD_INT 1
15705: PPUSH
15706: LD_VAR 0 3
15710: PUSH
15711: LD_VAR 0 1
15715: PUSH
15716: LD_INT 2
15718: MOD
15719: PUSH
15720: LD_INT 1
15722: PLUS
15723: ARRAY
15724: PPUSH
15725: CALL_OW 185
15729: GO 15668
15731: POP
15732: POP
// end ;
15733: PPOPN 3
15735: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
15736: LD_EXP 11
15740: IFFALSE 16921
15742: GO 15744
15744: DISABLE
15745: LD_INT 0
15747: PPUSH
15748: PPUSH
15749: PPUSH
15750: PPUSH
15751: PPUSH
15752: PPUSH
// begin enable ;
15753: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
15754: LD_ADDR_VAR 0 6
15758: PUSH
15759: LD_INT 10
15761: PPUSH
15762: LD_INT 81
15764: PUSH
15765: LD_INT 3
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: PPUSH
15772: CALL_OW 70
15776: ST_TO_ADDR
// if ruSpecialVehicleGroup then
15777: LD_EXP 60
15781: IFFALSE 16059
// begin for i in ruSpecialVehicleGroup do
15783: LD_ADDR_VAR 0 1
15787: PUSH
15788: LD_EXP 60
15792: PUSH
15793: FOR_IN
15794: IFFALSE 16057
// begin if enemyInBase then
15796: LD_VAR 0 6
15800: IFFALSE 16055
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
15802: LD_VAR 0 1
15806: PPUSH
15807: CALL_OW 256
15811: PUSH
15812: LD_INT 500
15814: GREATER
15815: IFFALSE 15832
15817: PUSH
15818: LD_VAR 0 1
15822: PPUSH
15823: CALL_OW 110
15827: PUSH
15828: LD_INT 0
15830: EQUAL
15831: AND
15832: IFFALSE 15858
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
15834: LD_VAR 0 1
15838: PPUSH
15839: LD_VAR 0 6
15843: PPUSH
15844: LD_VAR 0 1
15848: PPUSH
15849: CALL_OW 74
15853: PPUSH
15854: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
15858: LD_VAR 0 1
15862: PPUSH
15863: CALL_OW 256
15867: PUSH
15868: LD_INT 500
15870: LESSEQUAL
15871: IFFALSE 15888
15873: PUSH
15874: LD_VAR 0 1
15878: PPUSH
15879: CALL_OW 110
15883: PUSH
15884: LD_INT 0
15886: EQUAL
15887: AND
15888: IFFALSE 15917
// begin SetTag ( i , 1 ) ;
15890: LD_VAR 0 1
15894: PPUSH
15895: LD_INT 1
15897: PPUSH
15898: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
15902: LD_VAR 0 1
15906: PPUSH
15907: LD_INT 83
15909: PPUSH
15910: LD_INT 134
15912: PPUSH
15913: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
15917: LD_VAR 0 1
15921: PPUSH
15922: CALL_OW 256
15926: PUSH
15927: LD_INT 1000
15929: LESS
15930: IFFALSE 15947
15932: PUSH
15933: LD_VAR 0 1
15937: PPUSH
15938: CALL_OW 110
15942: PUSH
15943: LD_INT 1
15945: EQUAL
15946: AND
15947: IFFALSE 15970
15949: PUSH
15950: LD_VAR 0 1
15954: PPUSH
15955: LD_INT 83
15957: PPUSH
15958: LD_INT 134
15960: PPUSH
15961: CALL_OW 297
15965: PUSH
15966: LD_INT 6
15968: LESS
15969: AND
15970: IFFALSE 15998
// begin SetFuel ( i , 100 ) ;
15972: LD_VAR 0 1
15976: PPUSH
15977: LD_INT 100
15979: PPUSH
15980: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
15984: LD_VAR 0 1
15988: PPUSH
15989: CALL_OW 310
15993: PPUSH
15994: CALL 69690 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
15998: LD_VAR 0 1
16002: PPUSH
16003: CALL_OW 256
16007: PUSH
16008: LD_INT 1000
16010: EQUAL
16011: IFFALSE 16028
16013: PUSH
16014: LD_VAR 0 1
16018: PPUSH
16019: CALL_OW 110
16023: PUSH
16024: LD_INT 1
16026: EQUAL
16027: AND
16028: IFFALSE 16041
16030: PUSH
16031: LD_VAR 0 1
16035: PPUSH
16036: CALL_OW 311
16040: AND
16041: IFFALSE 16055
// SetTag ( i , 0 ) ;
16043: LD_VAR 0 1
16047: PPUSH
16048: LD_INT 0
16050: PPUSH
16051: CALL_OW 109
// end ; end ;
16055: GO 15793
16057: POP
16058: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
16059: LD_ADDR_VAR 0 5
16063: PUSH
16064: LD_EXP 59
16068: PPUSH
16069: LD_INT 25
16071: PUSH
16072: LD_INT 4
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: PPUSH
16079: CALL_OW 72
16083: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16084: LD_ADDR_VAR 0 4
16088: PUSH
16089: LD_EXP 59
16093: PPUSH
16094: LD_INT 92
16096: PUSH
16097: LD_INT 92
16099: PUSH
16100: LD_INT 155
16102: PUSH
16103: LD_INT 12
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: PUSH
16112: LD_INT 3
16114: PUSH
16115: LD_INT 24
16117: PUSH
16118: LD_INT 1000
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: PPUSH
16133: CALL_OW 72
16137: ST_TO_ADDR
// if sci then
16138: LD_VAR 0 5
16142: IFFALSE 16275
// begin if hurt then
16144: LD_VAR 0 4
16148: IFFALSE 16221
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
16150: LD_VAR 0 5
16154: PPUSH
16155: LD_INT 3
16157: PUSH
16158: LD_INT 54
16160: PUSH
16161: EMPTY
16162: LIST
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PPUSH
16168: CALL_OW 72
16172: IFFALSE 16201
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
16174: LD_VAR 0 5
16178: PPUSH
16179: LD_INT 3
16181: PUSH
16182: LD_INT 54
16184: PUSH
16185: EMPTY
16186: LIST
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PPUSH
16192: CALL_OW 72
16196: PPUSH
16197: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
16201: LD_VAR 0 5
16205: PPUSH
16206: LD_VAR 0 4
16210: PUSH
16211: LD_INT 1
16213: ARRAY
16214: PPUSH
16215: CALL_OW 188
// end else
16219: GO 16275
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
16221: LD_VAR 0 5
16225: PPUSH
16226: LD_INT 3
16228: PUSH
16229: LD_INT 54
16231: PUSH
16232: EMPTY
16233: LIST
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PPUSH
16239: CALL_OW 72
16243: IFFALSE 16275
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
16245: LD_VAR 0 5
16249: PPUSH
16250: LD_INT 3
16252: PUSH
16253: LD_INT 54
16255: PUSH
16256: EMPTY
16257: LIST
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: PPUSH
16263: CALL_OW 72
16267: PPUSH
16268: LD_INT 17
16270: PPUSH
16271: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16275: LD_ADDR_VAR 0 3
16279: PUSH
16280: LD_INT 10
16282: PPUSH
16283: LD_INT 21
16285: PUSH
16286: LD_INT 3
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: PUSH
16293: LD_INT 3
16295: PUSH
16296: LD_INT 24
16298: PUSH
16299: LD_INT 1000
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PPUSH
16314: CALL_OW 70
16318: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
16319: LD_ADDR_VAR 0 2
16323: PUSH
16324: LD_EXP 59
16328: PPUSH
16329: LD_INT 25
16331: PUSH
16332: LD_INT 2
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PPUSH
16339: CALL_OW 72
16343: PUSH
16344: LD_INT 22
16346: PUSH
16347: LD_INT 3
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PUSH
16354: LD_INT 34
16356: PUSH
16357: LD_INT 52
16359: PUSH
16360: EMPTY
16361: LIST
16362: LIST
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PPUSH
16368: CALL_OW 69
16372: UNION
16373: ST_TO_ADDR
// if not tmp then
16374: LD_VAR 0 2
16378: NOT
16379: IFFALSE 16383
// exit ;
16381: GO 16921
// for i in tmp do
16383: LD_ADDR_VAR 0 1
16387: PUSH
16388: LD_VAR 0 2
16392: PUSH
16393: FOR_IN
16394: IFFALSE 16919
// begin if GetClass ( i ) = 2 then
16396: LD_VAR 0 1
16400: PPUSH
16401: CALL_OW 257
16405: PUSH
16406: LD_INT 2
16408: EQUAL
16409: IFFALSE 16642
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16411: LD_VAR 0 1
16415: PPUSH
16416: CALL_OW 256
16420: PUSH
16421: LD_INT 1000
16423: EQUAL
16424: IFFALSE 16441
16426: PUSH
16427: LD_VAR 0 1
16431: PPUSH
16432: CALL_OW 110
16436: PUSH
16437: LD_INT 1
16439: EQUAL
16440: AND
16441: IFFALSE 16455
// SetTag ( i , 0 ) ;
16443: LD_VAR 0 1
16447: PPUSH
16448: LD_INT 0
16450: PPUSH
16451: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16455: LD_VAR 0 1
16459: PPUSH
16460: CALL_OW 256
16464: PUSH
16465: LD_INT 500
16467: LESSEQUAL
16468: IFFALSE 16485
16470: PUSH
16471: LD_VAR 0 1
16475: PPUSH
16476: CALL_OW 110
16480: PUSH
16481: LD_INT 0
16483: EQUAL
16484: AND
16485: IFFALSE 16514
// begin SetTag ( i , 1 ) ;
16487: LD_VAR 0 1
16491: PPUSH
16492: LD_INT 1
16494: PPUSH
16495: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
16499: LD_VAR 0 1
16503: PPUSH
16504: LD_INT 92
16506: PPUSH
16507: LD_INT 155
16509: PPUSH
16510: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
16514: LD_VAR 0 3
16518: IFFALSE 16535
16520: PUSH
16521: LD_VAR 0 1
16525: PPUSH
16526: CALL_OW 256
16530: PUSH
16531: LD_INT 500
16533: GREATER
16534: AND
16535: IFFALSE 16552
16537: PUSH
16538: LD_VAR 0 1
16542: PPUSH
16543: CALL_OW 110
16547: PUSH
16548: LD_INT 0
16550: EQUAL
16551: AND
16552: IFFALSE 16566
16554: PUSH
16555: LD_VAR 0 1
16559: PPUSH
16560: CALL_OW 314
16564: NOT
16565: AND
16566: IFFALSE 16640
// begin if b then
16568: LD_VAR 0 3
16572: IFFALSE 16604
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16574: LD_VAR 0 1
16578: PPUSH
16579: LD_VAR 0 3
16583: PUSH
16584: LD_INT 1
16586: PPUSH
16587: LD_VAR 0 3
16591: PPUSH
16592: CALL_OW 12
16596: ARRAY
16597: PPUSH
16598: CALL_OW 130
16602: GO 16640
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16604: LD_VAR 0 1
16608: PPUSH
16609: LD_INT 94
16611: PPUSH
16612: LD_INT 165
16614: PPUSH
16615: CALL_OW 297
16619: PUSH
16620: LD_INT 8
16622: GREATER
16623: IFFALSE 16640
// ComMoveXY ( i , 94 , 165 ) ;
16625: LD_VAR 0 1
16629: PPUSH
16630: LD_INT 94
16632: PPUSH
16633: LD_INT 165
16635: PPUSH
16636: CALL_OW 111
// end ; end else
16640: GO 16917
// if GetWeapon ( i ) = ru_crane then
16642: LD_VAR 0 1
16646: PPUSH
16647: CALL_OW 264
16651: PUSH
16652: LD_INT 52
16654: EQUAL
16655: IFFALSE 16917
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16657: LD_VAR 0 1
16661: PPUSH
16662: CALL_OW 256
16666: PUSH
16667: LD_INT 1000
16669: EQUAL
16670: IFFALSE 16687
16672: PUSH
16673: LD_VAR 0 1
16677: PPUSH
16678: CALL_OW 110
16682: PUSH
16683: LD_INT 1
16685: EQUAL
16686: AND
16687: IFFALSE 16713
// begin SetTag ( i , 0 ) ;
16689: LD_VAR 0 1
16693: PPUSH
16694: LD_INT 0
16696: PPUSH
16697: CALL_OW 109
// SetFuel ( i , 100 ) ;
16701: LD_VAR 0 1
16705: PPUSH
16706: LD_INT 100
16708: PPUSH
16709: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16713: LD_VAR 0 1
16717: PPUSH
16718: CALL_OW 256
16722: PUSH
16723: LD_INT 500
16725: LESSEQUAL
16726: IFFALSE 16743
16728: PUSH
16729: LD_VAR 0 1
16733: PPUSH
16734: CALL_OW 110
16738: PUSH
16739: LD_INT 0
16741: EQUAL
16742: AND
16743: IFFALSE 16786
// begin SetTag ( i , 1 ) ;
16745: LD_VAR 0 1
16749: PPUSH
16750: LD_INT 1
16752: PPUSH
16753: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
16757: LD_VAR 0 1
16761: PPUSH
16762: LD_INT 83
16764: PPUSH
16765: LD_INT 135
16767: PPUSH
16768: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
16772: LD_VAR 0 1
16776: PPUSH
16777: CALL_OW 310
16781: PPUSH
16782: CALL 69690 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
16786: LD_VAR 0 1
16790: PPUSH
16791: CALL_OW 256
16795: PUSH
16796: LD_INT 500
16798: GREATER
16799: IFFALSE 16816
16801: PUSH
16802: LD_VAR 0 1
16806: PPUSH
16807: CALL_OW 110
16811: PUSH
16812: LD_INT 0
16814: EQUAL
16815: AND
16816: IFFALSE 16829
16818: PUSH
16819: LD_VAR 0 1
16823: PPUSH
16824: CALL_OW 311
16828: AND
16829: IFFALSE 16843
16831: PUSH
16832: LD_VAR 0 1
16836: PPUSH
16837: CALL_OW 314
16841: NOT
16842: AND
16843: IFFALSE 16917
// begin if b then
16845: LD_VAR 0 3
16849: IFFALSE 16881
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16851: LD_VAR 0 1
16855: PPUSH
16856: LD_VAR 0 3
16860: PUSH
16861: LD_INT 1
16863: PPUSH
16864: LD_VAR 0 3
16868: PPUSH
16869: CALL_OW 12
16873: ARRAY
16874: PPUSH
16875: CALL_OW 130
16879: GO 16917
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16881: LD_VAR 0 1
16885: PPUSH
16886: LD_INT 94
16888: PPUSH
16889: LD_INT 165
16891: PPUSH
16892: CALL_OW 297
16896: PUSH
16897: LD_INT 8
16899: GREATER
16900: IFFALSE 16917
// ComMoveXY ( i , 94 , 165 ) ;
16902: LD_VAR 0 1
16906: PPUSH
16907: LD_INT 94
16909: PPUSH
16910: LD_INT 165
16912: PPUSH
16913: CALL_OW 111
// end ; end ; end ;
16917: GO 16393
16919: POP
16920: POP
// end ;
16921: PPOPN 6
16923: END
// every 10 10$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp , tmp2 ;
16924: LD_EXP 23
16928: NOT
16929: IFFALSE 16938
16931: PUSH
16932: LD_EXP 27
16936: NOT
16937: AND
16938: IFFALSE 17853
16940: GO 16942
16942: DISABLE
16943: LD_INT 0
16945: PPUSH
16946: PPUSH
16947: PPUSH
16948: PPUSH
16949: PPUSH
// begin enable ;
16950: ENABLE
// if Prob ( [ 35 , 45 , 55 , 60 ] [ Difficulty ] ) then
16951: LD_INT 35
16953: PUSH
16954: LD_INT 45
16956: PUSH
16957: LD_INT 55
16959: PUSH
16960: LD_INT 60
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: PUSH
16969: LD_OWVAR 67
16973: ARRAY
16974: PPUSH
16975: CALL_OW 13
16979: IFFALSE 16995
// waveStrength := waveStrength + 1 ;
16981: LD_ADDR_EXP 62
16985: PUSH
16986: LD_EXP 62
16990: PUSH
16991: LD_INT 1
16993: PLUS
16994: ST_TO_ADDR
// if waveStrength > [ 2 , 3 , 4 , 4 ] [ Difficulty ] then
16995: LD_EXP 62
16999: PUSH
17000: LD_INT 2
17002: PUSH
17003: LD_INT 3
17005: PUSH
17006: LD_INT 4
17008: PUSH
17009: LD_INT 4
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: PUSH
17018: LD_OWVAR 67
17022: ARRAY
17023: GREATER
17024: IFFALSE 17056
// begin waveStrength := waveStrength + 2 ;
17026: LD_ADDR_EXP 62
17030: PUSH
17031: LD_EXP 62
17035: PUSH
17036: LD_INT 2
17038: PLUS
17039: ST_TO_ADDR
// disableAttackOnHeike := true ;
17040: LD_ADDR_EXP 27
17044: PUSH
17045: LD_INT 1
17047: ST_TO_ADDR
// disable ;
17048: DISABLE
// wait ( 3 3$00 ) ;
17049: LD_INT 6300
17051: PPUSH
17052: CALL_OW 67
// end ; for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
17056: LD_ADDR_VAR 0 1
17060: PUSH
17061: DOUBLE
17062: LD_INT 1
17064: DEC
17065: ST_TO_ADDR
17066: LD_INT 2
17068: PUSH
17069: LD_INT 2
17071: PUSH
17072: LD_INT 3
17074: PUSH
17075: LD_INT 4
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: PUSH
17084: LD_OWVAR 67
17088: ARRAY
17089: PUSH
17090: FOR_TO
17091: IFFALSE 17252
// begin InitHc ;
17093: CALL_OW 19
// InitVc ;
17097: CALL_OW 20
// uc_side := 3 ;
17101: LD_ADDR_OWVAR 20
17105: PUSH
17106: LD_INT 3
17108: ST_TO_ADDR
// uc_nation := 3 ;
17109: LD_ADDR_OWVAR 21
17113: PUSH
17114: LD_INT 3
17116: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
17117: LD_INT 0
17119: PPUSH
17120: LD_INT 1
17122: PPUSH
17123: LD_OWVAR 67
17127: PUSH
17128: LD_INT 2
17130: PLUS
17131: PPUSH
17132: CALL_OW 380
// un := CreateHuman ;
17136: LD_ADDR_VAR 0 2
17140: PUSH
17141: CALL_OW 44
17145: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
17146: LD_VAR 0 2
17150: PPUSH
17151: LD_INT 160
17153: PPUSH
17154: LD_INT 3
17156: PPUSH
17157: LD_INT 2
17159: PPUSH
17160: LD_INT 0
17162: PPUSH
17163: CALL 70014 0 5
// SetClass ( un , class_bazooker ) ;
17167: LD_VAR 0 2
17171: PPUSH
17172: LD_INT 9
17174: PPUSH
17175: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17179: LD_ADDR_EXP 61
17183: PUSH
17184: LD_EXP 61
17188: PPUSH
17189: LD_EXP 61
17193: PUSH
17194: LD_INT 1
17196: PLUS
17197: PPUSH
17198: LD_VAR 0 2
17202: PPUSH
17203: CALL_OW 1
17207: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
17208: LD_VAR 0 2
17212: PPUSH
17213: LD_INT 177
17215: PPUSH
17216: LD_INT 17
17218: PPUSH
17219: CALL_OW 111
// wait ( 0 0$2 ) ;
17223: LD_INT 70
17225: PPUSH
17226: CALL_OW 67
// tmp2 := Join ( tmp2 , un ) ;
17230: LD_ADDR_VAR 0 5
17234: PUSH
17235: LD_VAR 0 5
17239: PPUSH
17240: LD_VAR 0 2
17244: PPUSH
17245: CALL 67854 0 2
17249: ST_TO_ADDR
// end ;
17250: GO 17090
17252: POP
17253: POP
// AddComAgressiveMove ( tmp2 , 196 , 53 ) ;
17254: LD_VAR 0 5
17258: PPUSH
17259: LD_INT 196
17261: PPUSH
17262: LD_INT 53
17264: PPUSH
17265: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 199 , 62 ) ;
17269: LD_VAR 0 5
17273: PPUSH
17274: LD_INT 199
17276: PPUSH
17277: LD_INT 62
17279: PPUSH
17280: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 205 , 75 ) ;
17284: LD_VAR 0 5
17288: PPUSH
17289: LD_INT 205
17291: PPUSH
17292: LD_INT 75
17294: PPUSH
17295: CALL_OW 174
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + waveStrength do
17299: LD_ADDR_VAR 0 1
17303: PUSH
17304: DOUBLE
17305: LD_INT 1
17307: DEC
17308: ST_TO_ADDR
17309: LD_INT 2
17311: PUSH
17312: LD_INT 3
17314: PUSH
17315: LD_INT 3
17317: PUSH
17318: LD_INT 4
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: PUSH
17327: LD_OWVAR 67
17331: ARRAY
17332: PUSH
17333: LD_EXP 62
17337: PLUS
17338: PUSH
17339: FOR_TO
17340: IFFALSE 17649
// begin InitHc ;
17342: CALL_OW 19
// InitVc ;
17346: CALL_OW 20
// uc_side := 3 ;
17350: LD_ADDR_OWVAR 20
17354: PUSH
17355: LD_INT 3
17357: ST_TO_ADDR
// uc_nation := 3 ;
17358: LD_ADDR_OWVAR 21
17362: PUSH
17363: LD_INT 3
17365: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
17366: LD_INT 22
17368: PUSH
17369: LD_INT 23
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: PUSH
17376: LD_INT 1
17378: PPUSH
17379: LD_INT 2
17381: PPUSH
17382: CALL_OW 12
17386: ARRAY
17387: PPUSH
17388: LD_INT 1
17390: PPUSH
17391: LD_INT 1
17393: PPUSH
17394: LD_INT 44
17396: PUSH
17397: LD_INT 45
17399: PUSH
17400: LD_INT 43
17402: PUSH
17403: LD_INT 42
17405: PUSH
17406: LD_INT 44
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: PUSH
17416: LD_INT 1
17418: PPUSH
17419: LD_INT 5
17421: PPUSH
17422: CALL_OW 12
17426: ARRAY
17427: PPUSH
17428: LD_INT 99
17430: PPUSH
17431: CALL 34684 0 5
// veh := CreateVehicle ;
17435: LD_ADDR_VAR 0 3
17439: PUSH
17440: CALL_OW 45
17444: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
17445: LD_VAR 0 3
17449: PPUSH
17450: LD_INT 160
17452: PPUSH
17453: LD_INT 3
17455: PPUSH
17456: LD_INT 2
17458: PPUSH
17459: LD_INT 0
17461: PPUSH
17462: CALL 70014 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17466: LD_ADDR_EXP 61
17470: PUSH
17471: LD_EXP 61
17475: PPUSH
17476: LD_EXP 61
17480: PUSH
17481: LD_INT 1
17483: PLUS
17484: PPUSH
17485: LD_VAR 0 3
17489: PPUSH
17490: CALL_OW 1
17494: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
17495: LD_INT 0
17497: PPUSH
17498: LD_INT 3
17500: PPUSH
17501: LD_OWVAR 67
17505: PUSH
17506: LD_INT 2
17508: PLUS
17509: PPUSH
17510: CALL_OW 380
// un := CreateHuman ;
17514: LD_ADDR_VAR 0 2
17518: PUSH
17519: CALL_OW 44
17523: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17524: LD_VAR 0 2
17528: PPUSH
17529: LD_VAR 0 3
17533: PPUSH
17534: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17538: LD_ADDR_EXP 61
17542: PUSH
17543: LD_EXP 61
17547: PPUSH
17548: LD_EXP 61
17552: PUSH
17553: LD_INT 1
17555: PLUS
17556: PPUSH
17557: LD_VAR 0 2
17561: PPUSH
17562: CALL_OW 1
17566: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
17567: LD_VAR 0 2
17571: PPUSH
17572: LD_INT 177
17574: PPUSH
17575: LD_INT 17
17577: PPUSH
17578: CALL_OW 111
// wait ( 0 0$2 ) ;
17582: LD_INT 70
17584: PPUSH
17585: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17589: LD_ADDR_VAR 0 4
17593: PUSH
17594: LD_VAR 0 4
17598: PPUSH
17599: LD_VAR 0 4
17603: PUSH
17604: LD_INT 1
17606: PLUS
17607: PPUSH
17608: LD_VAR 0 3
17612: PPUSH
17613: CALL_OW 1
17617: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
17618: LD_ADDR_VAR 0 4
17622: PUSH
17623: LD_VAR 0 4
17627: PPUSH
17628: LD_VAR 0 4
17632: PUSH
17633: LD_INT 1
17635: PLUS
17636: PPUSH
17637: LD_VAR 0 2
17641: PPUSH
17642: CALL_OW 1
17646: ST_TO_ADDR
// end ;
17647: GO 17339
17649: POP
17650: POP
// for i in tmp do
17651: LD_ADDR_VAR 0 1
17655: PUSH
17656: LD_VAR 0 4
17660: PUSH
17661: FOR_IN
17662: IFFALSE 17743
// AgressiveMove ( i , [ [ 206 , 37 ] , [ 239 , 53 ] , [ 260 , 67 ] , [ 263 , 79 ] , [ 257 , 105 ] , [ 227 , 97 ] ] ) ;
17664: LD_VAR 0 1
17668: PPUSH
17669: LD_INT 206
17671: PUSH
17672: LD_INT 37
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 239
17681: PUSH
17682: LD_INT 53
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 260
17691: PUSH
17692: LD_INT 67
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: LD_INT 263
17701: PUSH
17702: LD_INT 79
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 257
17711: PUSH
17712: LD_INT 105
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PUSH
17719: LD_INT 227
17721: PUSH
17722: LD_INT 97
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: PPUSH
17737: CALL 70620 0 2
17741: GO 17661
17743: POP
17744: POP
// repeat wait ( 0 0$2 ) ;
17745: LD_INT 70
17747: PPUSH
17748: CALL_OW 67
// for i in tmp do
17752: LD_ADDR_VAR 0 1
17756: PUSH
17757: LD_VAR 0 4
17761: PUSH
17762: FOR_IN
17763: IFFALSE 17830
// if IsDead ( i ) then
17765: LD_VAR 0 1
17769: PPUSH
17770: CALL_OW 301
17774: IFFALSE 17794
// tmp := tmp diff i else
17776: LD_ADDR_VAR 0 4
17780: PUSH
17781: LD_VAR 0 4
17785: PUSH
17786: LD_VAR 0 1
17790: DIFF
17791: ST_TO_ADDR
17792: GO 17828
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
17794: LD_VAR 0 1
17798: PPUSH
17799: LD_INT 81
17801: PUSH
17802: LD_INT 3
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PPUSH
17809: CALL_OW 69
17813: PPUSH
17814: LD_VAR 0 1
17818: PPUSH
17819: CALL_OW 74
17823: PPUSH
17824: CALL_OW 115
17828: GO 17762
17830: POP
17831: POP
// until not tmp ;
17832: LD_VAR 0 4
17836: NOT
17837: IFFALSE 17745
// if firstAttack then
17839: LD_EXP 28
17843: IFFALSE 17853
// firstAttack := false ;
17845: LD_ADDR_EXP 28
17849: PUSH
17850: LD_INT 0
17852: ST_TO_ADDR
// end ;
17853: PPOPN 5
17855: END
// every 12 12$00 + 3 3$00 trigger not omarAttack and not rolfAttack and bergkampfArrived and not disableAttackOnHeike do var i , un , veh , tmp ;
17856: LD_EXP 23
17860: NOT
17861: IFFALSE 17870
17863: PUSH
17864: LD_EXP 32
17868: NOT
17869: AND
17870: IFFALSE 17878
17872: PUSH
17873: LD_EXP 3
17877: AND
17878: IFFALSE 17887
17880: PUSH
17881: LD_EXP 27
17885: NOT
17886: AND
17887: IFFALSE 18804
17889: GO 17891
17891: DISABLE
17892: LD_INT 0
17894: PPUSH
17895: PPUSH
17896: PPUSH
17897: PPUSH
// begin enable ;
17898: ENABLE
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
17899: LD_ADDR_VAR 0 1
17903: PUSH
17904: DOUBLE
17905: LD_INT 1
17907: DEC
17908: ST_TO_ADDR
17909: LD_INT 1
17911: PUSH
17912: LD_INT 2
17914: PUSH
17915: LD_INT 2
17917: PUSH
17918: LD_INT 3
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: PUSH
17927: LD_OWVAR 67
17931: ARRAY
17932: PUSH
17933: FOR_TO
17934: IFFALSE 18235
// begin InitHc ;
17936: CALL_OW 19
// InitVc ;
17940: CALL_OW 20
// uc_side := 3 ;
17944: LD_ADDR_OWVAR 20
17948: PUSH
17949: LD_INT 3
17951: ST_TO_ADDR
// uc_nation := 3 ;
17952: LD_ADDR_OWVAR 21
17956: PUSH
17957: LD_INT 3
17959: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
17960: LD_INT 22
17962: PUSH
17963: LD_INT 23
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 1
17972: PPUSH
17973: LD_INT 2
17975: PPUSH
17976: CALL_OW 12
17980: ARRAY
17981: PPUSH
17982: LD_INT 1
17984: PPUSH
17985: LD_INT 1
17987: PPUSH
17988: LD_INT 44
17990: PUSH
17991: LD_INT 43
17993: PUSH
17994: LD_INT 42
17996: PUSH
17997: LD_INT 44
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: PUSH
18006: LD_INT 1
18008: PPUSH
18009: LD_INT 4
18011: PPUSH
18012: CALL_OW 12
18016: ARRAY
18017: PPUSH
18018: LD_INT 99
18020: PPUSH
18021: CALL 34684 0 5
// veh := CreateVehicle ;
18025: LD_ADDR_VAR 0 3
18029: PUSH
18030: CALL_OW 45
18034: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
18035: LD_VAR 0 3
18039: PPUSH
18040: LD_INT 5
18042: PPUSH
18043: LD_INT 3
18045: PPUSH
18046: LD_INT 2
18048: PPUSH
18049: LD_INT 0
18051: PPUSH
18052: CALL 70014 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18056: LD_ADDR_EXP 61
18060: PUSH
18061: LD_EXP 61
18065: PPUSH
18066: LD_EXP 61
18070: PUSH
18071: LD_INT 1
18073: PLUS
18074: PPUSH
18075: LD_VAR 0 3
18079: PPUSH
18080: CALL_OW 1
18084: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
18085: LD_INT 0
18087: PPUSH
18088: LD_INT 3
18090: PPUSH
18091: LD_OWVAR 67
18095: PPUSH
18096: CALL_OW 380
// un := CreateHuman ;
18100: LD_ADDR_VAR 0 2
18104: PUSH
18105: CALL_OW 44
18109: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18110: LD_VAR 0 2
18114: PPUSH
18115: LD_VAR 0 3
18119: PPUSH
18120: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18124: LD_ADDR_EXP 61
18128: PUSH
18129: LD_EXP 61
18133: PPUSH
18134: LD_EXP 61
18138: PUSH
18139: LD_INT 1
18141: PLUS
18142: PPUSH
18143: LD_VAR 0 2
18147: PPUSH
18148: CALL_OW 1
18152: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
18153: LD_VAR 0 2
18157: PPUSH
18158: LD_INT 23
18160: PPUSH
18161: LD_INT 7
18163: PPUSH
18164: CALL_OW 111
// wait ( 0 0$2 ) ;
18168: LD_INT 70
18170: PPUSH
18171: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18175: LD_ADDR_VAR 0 4
18179: PUSH
18180: LD_VAR 0 4
18184: PPUSH
18185: LD_VAR 0 4
18189: PUSH
18190: LD_INT 1
18192: PLUS
18193: PPUSH
18194: LD_VAR 0 3
18198: PPUSH
18199: CALL_OW 1
18203: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18204: LD_ADDR_VAR 0 4
18208: PUSH
18209: LD_VAR 0 4
18213: PPUSH
18214: LD_VAR 0 4
18218: PUSH
18219: LD_INT 1
18221: PLUS
18222: PPUSH
18223: LD_VAR 0 2
18227: PPUSH
18228: CALL_OW 1
18232: ST_TO_ADDR
// end ;
18233: GO 17933
18235: POP
18236: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
18237: LD_ADDR_VAR 0 1
18241: PUSH
18242: DOUBLE
18243: LD_INT 1
18245: DEC
18246: ST_TO_ADDR
18247: LD_INT 2
18249: PUSH
18250: LD_INT 3
18252: PUSH
18253: LD_INT 3
18255: PUSH
18256: LD_INT 4
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: PUSH
18265: LD_OWVAR 67
18269: ARRAY
18270: PUSH
18271: FOR_TO
18272: IFFALSE 18581
// begin InitHc ;
18274: CALL_OW 19
// InitVc ;
18278: CALL_OW 20
// uc_side := 3 ;
18282: LD_ADDR_OWVAR 20
18286: PUSH
18287: LD_INT 3
18289: ST_TO_ADDR
// uc_nation := 3 ;
18290: LD_ADDR_OWVAR 21
18294: PUSH
18295: LD_INT 3
18297: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
18298: LD_INT 22
18300: PUSH
18301: LD_INT 23
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 1
18310: PPUSH
18311: LD_INT 2
18313: PPUSH
18314: CALL_OW 12
18318: ARRAY
18319: PPUSH
18320: LD_INT 1
18322: PPUSH
18323: LD_INT 1
18325: PPUSH
18326: LD_INT 44
18328: PUSH
18329: LD_INT 45
18331: PUSH
18332: LD_INT 43
18334: PUSH
18335: LD_INT 42
18337: PUSH
18338: LD_INT 44
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 1
18350: PPUSH
18351: LD_INT 5
18353: PPUSH
18354: CALL_OW 12
18358: ARRAY
18359: PPUSH
18360: LD_INT 99
18362: PPUSH
18363: CALL 34684 0 5
// veh := CreateVehicle ;
18367: LD_ADDR_VAR 0 3
18371: PUSH
18372: CALL_OW 45
18376: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
18377: LD_VAR 0 3
18381: PPUSH
18382: LD_INT 127
18384: PPUSH
18385: LD_INT 243
18387: PPUSH
18388: LD_INT 0
18390: PPUSH
18391: LD_INT 0
18393: PPUSH
18394: CALL 70014 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18398: LD_ADDR_EXP 61
18402: PUSH
18403: LD_EXP 61
18407: PPUSH
18408: LD_EXP 61
18412: PUSH
18413: LD_INT 1
18415: PLUS
18416: PPUSH
18417: LD_VAR 0 3
18421: PPUSH
18422: CALL_OW 1
18426: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
18427: LD_INT 0
18429: PPUSH
18430: LD_INT 3
18432: PPUSH
18433: LD_OWVAR 67
18437: PUSH
18438: LD_INT 2
18440: PLUS
18441: PPUSH
18442: CALL_OW 380
// un := CreateHuman ;
18446: LD_ADDR_VAR 0 2
18450: PUSH
18451: CALL_OW 44
18455: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18456: LD_VAR 0 2
18460: PPUSH
18461: LD_VAR 0 3
18465: PPUSH
18466: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18470: LD_ADDR_EXP 61
18474: PUSH
18475: LD_EXP 61
18479: PPUSH
18480: LD_EXP 61
18484: PUSH
18485: LD_INT 1
18487: PLUS
18488: PPUSH
18489: LD_VAR 0 2
18493: PPUSH
18494: CALL_OW 1
18498: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
18499: LD_VAR 0 2
18503: PPUSH
18504: LD_INT 130
18506: PPUSH
18507: LD_INT 233
18509: PPUSH
18510: CALL_OW 111
// wait ( 0 0$2 ) ;
18514: LD_INT 70
18516: PPUSH
18517: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18521: LD_ADDR_VAR 0 4
18525: PUSH
18526: LD_VAR 0 4
18530: PPUSH
18531: LD_VAR 0 4
18535: PUSH
18536: LD_INT 1
18538: PLUS
18539: PPUSH
18540: LD_VAR 0 3
18544: PPUSH
18545: CALL_OW 1
18549: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18550: LD_ADDR_VAR 0 4
18554: PUSH
18555: LD_VAR 0 4
18559: PPUSH
18560: LD_VAR 0 4
18564: PUSH
18565: LD_INT 1
18567: PLUS
18568: PPUSH
18569: LD_VAR 0 2
18573: PPUSH
18574: CALL_OW 1
18578: ST_TO_ADDR
// end ;
18579: GO 18271
18581: POP
18582: POP
// for i in tmp do
18583: LD_ADDR_VAR 0 1
18587: PUSH
18588: LD_VAR 0 4
18592: PUSH
18593: FOR_IN
18594: IFFALSE 18708
// AgressiveMove ( i , [ [ 130 , 229 ] , [ 137 , 216 ] , [ 142 , 194 ] , [ 140 , 169 ] , [ 146 , 162 ] , [ 174 , 161 ] , [ 158 , 134 ] , [ 136 , 107 ] , [ 115 , 89 ] ] ) ;
18596: LD_VAR 0 1
18600: PPUSH
18601: LD_INT 130
18603: PUSH
18604: LD_INT 229
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PUSH
18611: LD_INT 137
18613: PUSH
18614: LD_INT 216
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: LD_INT 142
18623: PUSH
18624: LD_INT 194
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 140
18633: PUSH
18634: LD_INT 169
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: LD_INT 146
18643: PUSH
18644: LD_INT 162
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 174
18653: PUSH
18654: LD_INT 161
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 158
18663: PUSH
18664: LD_INT 134
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: LD_INT 136
18673: PUSH
18674: LD_INT 107
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: LD_INT 115
18683: PUSH
18684: LD_INT 89
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: PPUSH
18702: CALL 70620 0 2
18706: GO 18593
18708: POP
18709: POP
// repeat wait ( 0 0$2 ) ;
18710: LD_INT 70
18712: PPUSH
18713: CALL_OW 67
// for i in tmp do
18717: LD_ADDR_VAR 0 1
18721: PUSH
18722: LD_VAR 0 4
18726: PUSH
18727: FOR_IN
18728: IFFALSE 18795
// if IsDead ( i ) then
18730: LD_VAR 0 1
18734: PPUSH
18735: CALL_OW 301
18739: IFFALSE 18759
// tmp := tmp diff i else
18741: LD_ADDR_VAR 0 4
18745: PUSH
18746: LD_VAR 0 4
18750: PUSH
18751: LD_VAR 0 1
18755: DIFF
18756: ST_TO_ADDR
18757: GO 18793
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18759: LD_VAR 0 1
18763: PPUSH
18764: LD_INT 81
18766: PUSH
18767: LD_INT 3
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PPUSH
18774: CALL_OW 69
18778: PPUSH
18779: LD_VAR 0 1
18783: PPUSH
18784: CALL_OW 74
18788: PPUSH
18789: CALL_OW 115
18793: GO 18727
18795: POP
18796: POP
// until not tmp ;
18797: LD_VAR 0 4
18801: NOT
18802: IFFALSE 18710
// end ;
18804: PPOPN 4
18806: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
18807: LD_EXP 6
18811: IFFALSE 19270
18813: GO 18815
18815: DISABLE
18816: LD_INT 0
18818: PPUSH
18819: PPUSH
18820: PPUSH
18821: PPUSH
// begin wait ( 3 3$00 ) ;
18822: LD_INT 6300
18824: PPUSH
18825: CALL_OW 67
// for i := 1 to 3 do
18829: LD_ADDR_VAR 0 1
18833: PUSH
18834: DOUBLE
18835: LD_INT 1
18837: DEC
18838: ST_TO_ADDR
18839: LD_INT 3
18841: PUSH
18842: FOR_TO
18843: IFFALSE 19142
// begin InitHc ;
18845: CALL_OW 19
// InitVc ;
18849: CALL_OW 20
// uc_side := 3 ;
18853: LD_ADDR_OWVAR 20
18857: PUSH
18858: LD_INT 3
18860: ST_TO_ADDR
// uc_nation := 3 ;
18861: LD_ADDR_OWVAR 21
18865: PUSH
18866: LD_INT 3
18868: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
18869: LD_INT 22
18871: PUSH
18872: LD_INT 23
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 1
18881: PPUSH
18882: LD_INT 2
18884: PPUSH
18885: CALL_OW 12
18889: ARRAY
18890: PPUSH
18891: LD_INT 1
18893: PPUSH
18894: LD_INT 1
18896: PPUSH
18897: LD_INT 44
18899: PUSH
18900: LD_INT 43
18902: PUSH
18903: LD_INT 42
18905: PUSH
18906: LD_INT 44
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: PUSH
18915: LD_INT 1
18917: PPUSH
18918: LD_INT 4
18920: PPUSH
18921: CALL_OW 12
18925: ARRAY
18926: PPUSH
18927: LD_INT 99
18929: PPUSH
18930: CALL 34684 0 5
// veh := CreateVehicle ;
18934: LD_ADDR_VAR 0 3
18938: PUSH
18939: CALL_OW 45
18943: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
18944: LD_VAR 0 3
18948: PPUSH
18949: LD_INT 293
18951: PPUSH
18952: LD_INT 246
18954: PPUSH
18955: LD_INT 5
18957: PPUSH
18958: LD_INT 0
18960: PPUSH
18961: CALL 70014 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18965: LD_ADDR_EXP 61
18969: PUSH
18970: LD_EXP 61
18974: PPUSH
18975: LD_EXP 61
18979: PUSH
18980: LD_INT 1
18982: PLUS
18983: PPUSH
18984: LD_VAR 0 3
18988: PPUSH
18989: CALL_OW 1
18993: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
18994: LD_INT 0
18996: PPUSH
18997: LD_INT 3
18999: PPUSH
19000: LD_INT 3
19002: PPUSH
19003: CALL_OW 380
// un := CreateHuman ;
19007: LD_ADDR_VAR 0 2
19011: PUSH
19012: CALL_OW 44
19016: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
19017: LD_VAR 0 2
19021: PPUSH
19022: LD_VAR 0 3
19026: PPUSH
19027: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
19031: LD_ADDR_EXP 61
19035: PUSH
19036: LD_EXP 61
19040: PPUSH
19041: LD_EXP 61
19045: PUSH
19046: LD_INT 1
19048: PLUS
19049: PPUSH
19050: LD_VAR 0 2
19054: PPUSH
19055: CALL_OW 1
19059: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
19060: LD_VAR 0 2
19064: PPUSH
19065: LD_INT 273
19067: PPUSH
19068: LD_INT 227
19070: PPUSH
19071: CALL_OW 111
// wait ( 0 0$2 ) ;
19075: LD_INT 70
19077: PPUSH
19078: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
19082: LD_ADDR_VAR 0 4
19086: PUSH
19087: LD_VAR 0 4
19091: PPUSH
19092: LD_VAR 0 4
19096: PUSH
19097: LD_INT 1
19099: PLUS
19100: PPUSH
19101: LD_VAR 0 3
19105: PPUSH
19106: CALL_OW 1
19110: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
19111: LD_ADDR_VAR 0 4
19115: PUSH
19116: LD_VAR 0 4
19120: PPUSH
19121: LD_VAR 0 4
19125: PUSH
19126: LD_INT 1
19128: PLUS
19129: PPUSH
19130: LD_VAR 0 2
19134: PPUSH
19135: CALL_OW 1
19139: ST_TO_ADDR
// end ;
19140: GO 18842
19142: POP
19143: POP
// for i in tmp do
19144: LD_ADDR_VAR 0 1
19148: PUSH
19149: LD_VAR 0 4
19153: PUSH
19154: FOR_IN
19155: IFFALSE 19174
// ComAgressiveMove ( i , 330 , 231 ) ;
19157: LD_VAR 0 1
19161: PPUSH
19162: LD_INT 330
19164: PPUSH
19165: LD_INT 231
19167: PPUSH
19168: CALL_OW 114
19172: GO 19154
19174: POP
19175: POP
// repeat wait ( 0 0$2 ) ;
19176: LD_INT 70
19178: PPUSH
19179: CALL_OW 67
// for i in tmp do
19183: LD_ADDR_VAR 0 1
19187: PUSH
19188: LD_VAR 0 4
19192: PUSH
19193: FOR_IN
19194: IFFALSE 19261
// if IsDead ( i ) then
19196: LD_VAR 0 1
19200: PPUSH
19201: CALL_OW 301
19205: IFFALSE 19225
// tmp := tmp diff i else
19207: LD_ADDR_VAR 0 4
19211: PUSH
19212: LD_VAR 0 4
19216: PUSH
19217: LD_VAR 0 1
19221: DIFF
19222: ST_TO_ADDR
19223: GO 19259
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
19225: LD_VAR 0 1
19229: PPUSH
19230: LD_INT 81
19232: PUSH
19233: LD_INT 3
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PPUSH
19240: CALL_OW 69
19244: PPUSH
19245: LD_VAR 0 1
19249: PPUSH
19250: CALL_OW 74
19254: PPUSH
19255: CALL_OW 115
19259: GO 19193
19261: POP
19262: POP
// until not tmp ;
19263: LD_VAR 0 4
19267: NOT
19268: IFFALSE 19176
// end ;
19270: PPOPN 4
19272: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
19273: LD_INT 3
19275: PUSH
19276: LD_INT 22
19278: PUSH
19279: LD_INT 2
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PUSH
19290: LD_INT 32
19292: PUSH
19293: LD_INT 1
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PPUSH
19304: CALL_OW 69
19308: IFFALSE 19392
19310: GO 19312
19312: DISABLE
19313: LD_INT 0
19315: PPUSH
// begin enable ;
19316: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
19317: LD_ADDR_VAR 0 1
19321: PUSH
19322: LD_INT 3
19324: PUSH
19325: LD_INT 22
19327: PUSH
19328: LD_INT 2
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: PUSH
19339: LD_INT 32
19341: PUSH
19342: LD_INT 1
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PPUSH
19353: CALL_OW 69
19357: PUSH
19358: FOR_IN
19359: IFFALSE 19390
// if GetFuel ( i ) < 3 then
19361: LD_VAR 0 1
19365: PPUSH
19366: CALL_OW 261
19370: PUSH
19371: LD_INT 3
19373: LESS
19374: IFFALSE 19388
// SetFuel ( i , 3 ) ;
19376: LD_VAR 0 1
19380: PPUSH
19381: LD_INT 3
19383: PPUSH
19384: CALL_OW 240
19388: GO 19358
19390: POP
19391: POP
// end ; end_of_file
19392: PPOPN 1
19394: END
// export function Action ; begin
19395: LD_INT 0
19397: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
19398: LD_INT 2
19400: PPUSH
19401: LD_INT 4
19403: PPUSH
19404: CALL_OW 332
// Video ( true ) ;
19408: LD_INT 1
19410: PPUSH
19411: CALL 67826 0 1
// music_nat := 3 ;
19415: LD_ADDR_OWVAR 71
19419: PUSH
19420: LD_INT 3
19422: ST_TO_ADDR
// music_class := music_recon ;
19423: LD_ADDR_OWVAR 72
19427: PUSH
19428: LD_INT 3
19430: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
19431: LD_INT 213
19433: PPUSH
19434: LD_INT 89
19436: PPUSH
19437: CALL_OW 86
// if Kaia and Olaf then
19441: LD_EXP 39
19445: IFFALSE 19453
19447: PUSH
19448: LD_EXP 43
19452: AND
19453: IFFALSE 19459
// SceneKaiaWithOlaf ;
19455: CALL 19539 0 0
// if Givi and Kamil then
19459: LD_EXP 35
19463: IFFALSE 19471
19465: PUSH
19466: LD_EXP 38
19470: AND
19471: IFFALSE 19477
// SceneWithGiviAndKamil ;
19473: CALL 20110 0 0
// tick := 0 ;
19477: LD_ADDR_OWVAR 1
19481: PUSH
19482: LD_INT 0
19484: ST_TO_ADDR
// wait ( 3 ) ;
19485: LD_INT 3
19487: PPUSH
19488: CALL_OW 67
// Video ( false ) ;
19492: LD_INT 0
19494: PPUSH
19495: CALL 67826 0 1
// ChangeMissionObjectives ( M1 ) ;
19499: LD_STRING M1
19501: PPUSH
19502: CALL_OW 337
// music_nat := music_auto ;
19506: LD_ADDR_OWVAR 71
19510: PUSH
19511: LD_INT 0
19513: ST_TO_ADDR
// music_class := music_auto ;
19514: LD_ADDR_OWVAR 72
19518: PUSH
19519: LD_INT 0
19521: ST_TO_ADDR
// SaveForQuickRestart ;
19522: CALL_OW 22
// gameActive := true ;
19526: LD_ADDR_EXP 31
19530: PUSH
19531: LD_INT 1
19533: ST_TO_ADDR
// end ;
19534: LD_VAR 0 1
19538: RET
// export function SceneKaiaWithOlaf ; begin
19539: LD_INT 0
19541: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
19542: LD_INT 22
19544: PUSH
19545: LD_INT 2
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 30
19554: PUSH
19555: LD_INT 3
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PPUSH
19566: CALL_OW 69
19570: PPUSH
19571: LD_INT 14
19573: PPUSH
19574: LD_INT 1
19576: PPUSH
19577: LD_INT 1
19579: PPUSH
19580: LD_INT 26
19582: PPUSH
19583: CALL_OW 125
// wait ( 0 0$1 ) ;
19587: LD_INT 35
19589: PPUSH
19590: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
19594: LD_EXP 39
19598: PPUSH
19599: LD_STRING DK-Mem-1
19601: PPUSH
19602: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
19606: LD_EXP 39
19610: PPUSH
19611: LD_STRING DK-Mem-2
19613: PPUSH
19614: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
19618: LD_EXP 43
19622: PPUSH
19623: LD_STRING DO-Mem-3
19625: PPUSH
19626: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
19630: LD_EXP 39
19634: PPUSH
19635: LD_STRING DK-Mem-4
19637: PPUSH
19638: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
19642: LD_EXP 43
19646: PPUSH
19647: LD_STRING DO-Mem-5
19649: PPUSH
19650: CALL_OW 88
// wait ( 0 0$2 ) ;
19654: LD_INT 70
19656: PPUSH
19657: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
19661: LD_INT 22
19663: PUSH
19664: LD_INT 2
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: LD_INT 30
19673: PUSH
19674: LD_INT 3
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PPUSH
19685: CALL_OW 69
19689: PPUSH
19690: LD_INT 90
19692: PPUSH
19693: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
19697: LD_EXP 43
19701: PPUSH
19702: LD_STRING DO-Mem-6
19704: PPUSH
19705: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
19709: LD_EXP 39
19713: PPUSH
19714: LD_STRING DK-Mem-7
19716: PPUSH
19717: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
19721: LD_EXP 34
19725: PPUSH
19726: LD_EXP 39
19730: PPUSH
19731: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
19735: LD_EXP 34
19739: PPUSH
19740: LD_STRING DH-Mem-8
19742: PPUSH
19743: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
19747: LD_EXP 39
19751: PUSH
19752: LD_EXP 43
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PPUSH
19761: LD_EXP 34
19765: PPUSH
19766: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
19770: LD_EXP 43
19774: PPUSH
19775: LD_STRING DO-Mem-9
19777: PPUSH
19778: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
19782: LD_EXP 43
19786: PPUSH
19787: LD_STRING DO-Mem-10
19789: PPUSH
19790: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
19794: LD_EXP 43
19798: PPUSH
19799: LD_STRING DO-Mem-11
19801: PPUSH
19802: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
19806: LD_EXP 43
19810: PPUSH
19811: LD_STRING DO-Mem-12
19813: PPUSH
19814: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
19818: LD_EXP 39
19822: PPUSH
19823: LD_STRING DK-Mem-13
19825: PPUSH
19826: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
19830: LD_EXP 39
19834: PPUSH
19835: LD_STRING DK-Mem-14
19837: PPUSH
19838: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
19842: LD_EXP 39
19846: PPUSH
19847: LD_STRING DK-Mem-15
19849: PPUSH
19850: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
19854: LD_EXP 39
19858: PPUSH
19859: LD_STRING DK-Mem-16
19861: PPUSH
19862: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
19866: LD_EXP 39
19870: PPUSH
19871: LD_STRING DK-Mem-17
19873: PPUSH
19874: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
19878: LD_EXP 43
19882: PPUSH
19883: LD_EXP 39
19887: PPUSH
19888: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
19892: LD_EXP 43
19896: PPUSH
19897: LD_STRING DO-Mem-18
19899: PPUSH
19900: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
19904: LD_EXP 39
19908: PPUSH
19909: LD_EXP 43
19913: PPUSH
19914: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
19918: LD_EXP 39
19922: PPUSH
19923: LD_STRING DK-Mem-19
19925: PPUSH
19926: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
19930: LD_EXP 43
19934: PPUSH
19935: LD_INT 214
19937: PPUSH
19938: LD_INT 86
19940: PPUSH
19941: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
19945: LD_EXP 43
19949: PPUSH
19950: LD_EXP 39
19954: PPUSH
19955: CALL_OW 179
// if Givi then
19959: LD_EXP 35
19963: IFFALSE 19994
// begin ComMoveXY ( Givi , 217 , 86 ) ;
19965: LD_EXP 35
19969: PPUSH
19970: LD_INT 217
19972: PPUSH
19973: LD_INT 86
19975: PPUSH
19976: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
19980: LD_EXP 35
19984: PPUSH
19985: LD_EXP 34
19989: PPUSH
19990: CALL_OW 179
// end ; if Kamil then
19994: LD_EXP 38
19998: IFFALSE 20038
// begin ComExit ( Kamil ) ;
20000: LD_EXP 38
20004: PPUSH
20005: CALL 68252 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
20009: LD_EXP 38
20013: PPUSH
20014: LD_INT 212
20016: PPUSH
20017: LD_INT 86
20019: PPUSH
20020: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
20024: LD_EXP 38
20028: PPUSH
20029: LD_EXP 34
20033: PPUSH
20034: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
20038: LD_INT 70
20040: PPUSH
20041: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
20045: LD_EXP 34
20049: PPUSH
20050: LD_STRING DH-Mem-20
20052: PPUSH
20053: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
20057: LD_EXP 43
20061: PPUSH
20062: LD_INT 215
20064: PPUSH
20065: LD_INT 87
20067: PPUSH
20068: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
20072: LD_EXP 43
20076: PPUSH
20077: LD_EXP 39
20081: PPUSH
20082: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
20086: LD_EXP 39
20090: PPUSH
20091: LD_STRING DK-Mem-21
20093: PPUSH
20094: CALL_OW 88
// wait ( 0 0$2 ) ;
20098: LD_INT 70
20100: PPUSH
20101: CALL_OW 67
// end ;
20105: LD_VAR 0 1
20109: RET
// export function SceneWithGiviAndKamil ; var p ; begin
20110: LD_INT 0
20112: PPUSH
20113: PPUSH
// if Markov then
20114: LD_EXP 41
20118: IFFALSE 20238
// begin p := 0 ;
20120: LD_ADDR_VAR 0 2
20124: PUSH
20125: LD_INT 0
20127: ST_TO_ADDR
// if IsInUnit ( Markov ) then
20128: LD_EXP 41
20132: PPUSH
20133: CALL_OW 310
20137: IFFALSE 20148
// ComExit ( Markov ) ;
20139: LD_EXP 41
20143: PPUSH
20144: CALL 68252 0 1
// wait ( 0 0$1 ) ;
20148: LD_INT 35
20150: PPUSH
20151: CALL_OW 67
// ComMoveXY ( Markov , 212 , 88 ) ;
20155: LD_EXP 41
20159: PPUSH
20160: LD_INT 212
20162: PPUSH
20163: LD_INT 88
20165: PPUSH
20166: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20170: LD_INT 35
20172: PPUSH
20173: CALL_OW 67
// p := Inc ( p ) ;
20177: LD_ADDR_VAR 0 2
20181: PUSH
20182: LD_VAR 0 2
20186: PPUSH
20187: CALL 69227 0 1
20191: ST_TO_ADDR
// until GetDistUnits ( Markov , Heike ) < 6 or p > 12 ;
20192: LD_EXP 41
20196: PPUSH
20197: LD_EXP 34
20201: PPUSH
20202: CALL_OW 296
20206: PUSH
20207: LD_INT 6
20209: LESS
20210: IFTRUE 20222
20212: PUSH
20213: LD_VAR 0 2
20217: PUSH
20218: LD_INT 12
20220: GREATER
20221: OR
20222: IFFALSE 20170
// AddComTurnUnit ( Markov , Heike ) ;
20224: LD_EXP 41
20228: PPUSH
20229: LD_EXP 34
20233: PPUSH
20234: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
20238: LD_EXP 35
20242: PPUSH
20243: LD_STRING DG-Obj-1
20245: PPUSH
20246: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
20250: LD_EXP 38
20254: PPUSH
20255: LD_STRING DKam-Obj-2
20257: PPUSH
20258: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
20262: LD_EXP 34
20266: PPUSH
20267: LD_EXP 38
20271: PPUSH
20272: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
20276: LD_EXP 38
20280: PPUSH
20281: LD_STRING DKam-Obj-3
20283: PPUSH
20284: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
20288: LD_EXP 41
20292: PPUSH
20293: LD_STRING DMar-Obj-4
20295: PPUSH
20296: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
20300: LD_EXP 38
20304: PPUSH
20305: LD_STRING DKam-Obj-6
20307: PPUSH
20308: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
20312: LD_EXP 38
20316: PPUSH
20317: LD_STRING DKam-Obj-7
20319: PPUSH
20320: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
20324: LD_EXP 38
20328: PPUSH
20329: LD_STRING DKam-Obj-8
20331: PPUSH
20332: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
20336: LD_EXP 34
20340: PPUSH
20341: LD_STRING DH-Obj-9
20343: PPUSH
20344: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
20348: LD_EXP 38
20352: PPUSH
20353: LD_STRING DKam-Obj-10
20355: PPUSH
20356: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
20360: LD_EXP 38
20364: PPUSH
20365: LD_STRING DKam-Obj-11
20367: PPUSH
20368: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
20372: LD_EXP 41
20376: PPUSH
20377: LD_STRING DMar-Obj-12
20379: PPUSH
20380: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
20384: LD_EXP 41
20388: PPUSH
20389: LD_STRING DMar-Obj-13
20391: PPUSH
20392: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
20396: LD_EXP 41
20400: PPUSH
20401: LD_STRING DMar-Obj-14
20403: PPUSH
20404: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
20408: LD_EXP 43
20412: PPUSH
20413: LD_STRING DO-Obj-15
20415: PPUSH
20416: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
20420: LD_EXP 43
20424: PPUSH
20425: LD_STRING DO-Obj-16
20427: PPUSH
20428: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
20432: LD_EXP 34
20436: PPUSH
20437: LD_STRING DH-Obj-17
20439: PPUSH
20440: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
20444: LD_EXP 43
20448: PPUSH
20449: LD_STRING DO-Obj-18
20451: PPUSH
20452: CALL_OW 88
// end ;
20456: LD_VAR 0 1
20460: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
20461: LD_INT 34
20463: PUSH
20464: LD_INT 92
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PPUSH
20471: CALL_OW 69
20475: IFFALSE 20670
20477: GO 20479
20479: DISABLE
20480: LD_INT 0
20482: PPUSH
// begin wait ( 0 0$2 ) ;
20483: LD_INT 70
20485: PPUSH
20486: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
20490: LD_INT 34
20492: PUSH
20493: LD_INT 92
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PPUSH
20500: CALL_OW 69
20504: PPUSH
20505: CALL_OW 87
// DialogueOn ;
20509: CALL_OW 6
// if Markov then
20513: LD_EXP 41
20517: IFFALSE 20545
// begin Say ( Markov , DMar-Grn-1 ) ;
20519: LD_EXP 41
20523: PPUSH
20524: LD_STRING DMar-Grn-1
20526: PPUSH
20527: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
20531: LD_EXP 34
20535: PPUSH
20536: LD_STRING DH-Grn-2
20538: PPUSH
20539: CALL_OW 88
// end else
20543: GO 20644
// if heikeSecondSquad then
20545: LD_EXP 49
20549: IFFALSE 20644
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20551: LD_ADDR_VAR 0 1
20555: PUSH
20556: LD_EXP 49
20560: PUSH
20561: LD_INT 1
20563: PPUSH
20564: LD_EXP 49
20568: PPUSH
20569: CALL_OW 12
20573: ARRAY
20574: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20575: LD_VAR 0 1
20579: PPUSH
20580: CALL_OW 258
20584: PUSH
20585: LD_INT 1
20587: DOUBLE
20588: EQUAL
20589: IFTRUE 20593
20591: GO 20608
20593: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
20594: LD_VAR 0 1
20598: PPUSH
20599: LD_STRING DArm-Grn-1
20601: PPUSH
20602: CALL_OW 88
20606: GO 20632
20608: LD_INT 2
20610: DOUBLE
20611: EQUAL
20612: IFTRUE 20616
20614: GO 20631
20616: POP
// Say ( random , DArf-Grn-1 ) ; end ;
20617: LD_VAR 0 1
20621: PPUSH
20622: LD_STRING DArf-Grn-1
20624: PPUSH
20625: CALL_OW 88
20629: GO 20632
20631: POP
// Say ( Heike , DH-Grn-2 ) ;
20632: LD_EXP 34
20636: PPUSH
20637: LD_STRING DH-Grn-2
20639: PPUSH
20640: CALL_OW 88
// end ; DialogueOff ;
20644: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
20648: LD_STRING MortarConstructed
20650: PPUSH
20651: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
20655: LD_STRING SelfPropelledMortar
20657: PPUSH
20658: CALL_OW 339
// mortarConstructed := true ;
20662: LD_ADDR_EXP 15
20666: PUSH
20667: LD_INT 1
20669: ST_TO_ADDR
// end ;
20670: PPOPN 1
20672: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
20673: LD_INT 2
20675: PPUSH
20676: LD_INT 8
20678: PPUSH
20679: CALL_OW 294
20683: IFFALSE 20826
20685: GO 20687
20687: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
20688: LD_INT 200
20690: PPUSH
20691: LD_INT 162
20693: PPUSH
20694: LD_INT 2
20696: PPUSH
20697: LD_INT 6
20699: NEG
20700: PPUSH
20701: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
20705: LD_INT 200
20707: PPUSH
20708: LD_INT 162
20710: PPUSH
20711: LD_INT 2
20713: PPUSH
20714: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
20718: LD_INT 200
20720: PPUSH
20721: LD_INT 162
20723: PPUSH
20724: CALL_OW 84
// if not IsOk ( Kurt ) then
20728: LD_EXP 45
20732: PPUSH
20733: CALL_OW 302
20737: NOT
20738: IFFALSE 20742
// exit ;
20740: GO 20826
// Say ( Kurt , DKs-Otpst-2-1 ) ;
20742: LD_EXP 45
20746: PPUSH
20747: LD_STRING DKs-Otpst-2-1
20749: PPUSH
20750: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
20754: LD_EXP 39
20758: PPUSH
20759: LD_STRING DK-Otpst-2-2
20761: PPUSH
20762: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
20766: LD_EXP 45
20770: PPUSH
20771: LD_STRING DKs-Otpst-2-3
20773: PPUSH
20774: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
20778: LD_EXP 45
20782: PPUSH
20783: LD_STRING DKs-Otpst-2-4
20785: PPUSH
20786: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
20790: LD_EXP 45
20794: PPUSH
20795: LD_STRING DKs-Otpst-2-5
20797: PPUSH
20798: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
20802: LD_EXP 38
20806: PPUSH
20807: LD_STRING DKam-Otpst-2-6
20809: PPUSH
20810: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
20814: LD_EXP 45
20818: PPUSH
20819: LD_STRING DKs-Otpst-2-7
20821: PPUSH
20822: CALL_OW 88
// end ;
20826: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
20827: LD_INT 8
20829: PPUSH
20830: LD_INT 22
20832: PUSH
20833: LD_INT 3
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 21
20842: PUSH
20843: LD_INT 3
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PPUSH
20854: CALL_OW 70
20858: NOT
20859: IFFALSE 20868
20861: PUSH
20862: LD_EXP 3
20866: NOT
20867: AND
20868: IFFALSE 21118
20870: GO 20872
20872: DISABLE
20873: LD_INT 0
20875: PPUSH
// begin outpostDestroyed := true ;
20876: LD_ADDR_EXP 4
20880: PUSH
20881: LD_INT 1
20883: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
20884: LD_INT 22
20886: PUSH
20887: LD_INT 2
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: LD_INT 34
20896: PUSH
20897: LD_INT 92
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PUSH
20904: LD_INT 92
20906: PUSH
20907: LD_INT 195
20909: PUSH
20910: LD_INT 164
20912: PUSH
20913: LD_INT 12
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: LIST
20926: PPUSH
20927: CALL_OW 69
20931: NOT
20932: IFFALSE 20936
// exit ;
20934: GO 21118
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
20936: LD_EXP 35
20940: PPUSH
20941: CALL_OW 302
20945: NOT
20946: IFTRUE 20960
20948: PUSH
20949: LD_EXP 39
20953: PPUSH
20954: CALL_OW 302
20958: NOT
20959: OR
20960: IFFALSE 20964
// exit ;
20962: GO 21118
// Say ( Givi , DG-Otpst-1-1 ) ;
20964: LD_EXP 35
20968: PPUSH
20969: LD_STRING DG-Otpst-1-1
20971: PPUSH
20972: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
20976: LD_EXP 39
20980: PPUSH
20981: LD_STRING DK-Otpst-1-2
20983: PPUSH
20984: CALL_OW 88
// if IsOk ( Markov ) then
20988: LD_EXP 41
20992: PPUSH
20993: CALL_OW 302
20997: IFFALSE 21025
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
20999: LD_EXP 41
21003: PPUSH
21004: LD_STRING DMar-Otpst-1-3
21006: PPUSH
21007: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
21011: LD_EXP 41
21015: PPUSH
21016: LD_STRING DMar-Otpst-1-4
21018: PPUSH
21019: CALL_OW 88
// end else
21023: GO 21106
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
21025: LD_ADDR_VAR 0 1
21029: PUSH
21030: LD_EXP 49
21034: PUSH
21035: LD_INT 1
21037: PPUSH
21038: LD_EXP 49
21042: PPUSH
21043: CALL_OW 12
21047: ARRAY
21048: ST_TO_ADDR
// case GetSex ( random ) of 1 :
21049: LD_VAR 0 1
21053: PPUSH
21054: CALL_OW 258
21058: PUSH
21059: LD_INT 1
21061: DOUBLE
21062: EQUAL
21063: IFTRUE 21067
21065: GO 21082
21067: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
21068: LD_VAR 0 1
21072: PPUSH
21073: LD_STRING DArm-Otpst-1-a-3
21075: PPUSH
21076: CALL_OW 88
21080: GO 21106
21082: LD_INT 2
21084: DOUBLE
21085: EQUAL
21086: IFTRUE 21090
21088: GO 21105
21090: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
21091: LD_VAR 0 1
21095: PPUSH
21096: LD_STRING DArf-Otpst-1-a-3
21098: PPUSH
21099: CALL_OW 88
21103: GO 21106
21105: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
21106: LD_EXP 35
21110: PPUSH
21111: LD_STRING DG-Otpst-1-5
21113: PPUSH
21114: CALL_OW 88
// end ;
21118: PPOPN 1
21120: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
21121: LD_EXP 39
21125: PPUSH
21126: CALL_OW 256
21130: PUSH
21131: LD_INT 10
21133: LESS
21134: IFFALSE 21248
21136: GO 21138
21138: DISABLE
// begin DialogueOn ;
21139: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
21143: LD_EXP 39
21147: PPUSH
21148: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
21152: LD_EXP 39
21156: PPUSH
21157: LD_STRING DK-Dead-1
21159: PPUSH
21160: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
21164: LD_EXP 34
21168: PPUSH
21169: LD_STRING DH-Dead-2
21171: PPUSH
21172: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
21176: LD_EXP 39
21180: PPUSH
21181: LD_STRING DK-Dead-3
21183: PPUSH
21184: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
21188: LD_EXP 34
21192: PPUSH
21193: LD_STRING DH-Dead-4
21195: PPUSH
21196: CALL_OW 88
// if IsOk ( Mike ) then
21200: LD_EXP 36
21204: PPUSH
21205: CALL_OW 302
21209: IFFALSE 21235
// begin Say ( Mike , DM-Dead-5 ) ;
21211: LD_EXP 36
21215: PPUSH
21216: LD_STRING DM-Dead-5
21218: PPUSH
21219: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
21223: LD_EXP 34
21227: PPUSH
21228: LD_STRING DH-Dead-6
21230: PPUSH
21231: CALL_OW 88
// end ; DialogueOff ;
21235: CALL_OW 7
// KillUnit ( Kaia ) ;
21239: LD_EXP 39
21243: PPUSH
21244: CALL_OW 66
// end ;
21248: END
// every 0 0$1 trigger tick >= 15 15$00 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
21249: LD_OWVAR 1
21253: PUSH
21254: LD_INT 31500
21256: GREATEREQUAL
21257: IFTRUE 21269
21259: PUSH
21260: LD_EXP 5
21264: PUSH
21265: LD_INT 5
21267: GREATER
21268: OR
21269: IFTRUE 21309
21271: PUSH
21272: LD_INT 22
21274: PUSH
21275: LD_INT 2
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 92
21284: PUSH
21285: LD_INT 103
21287: PUSH
21288: LD_INT 81
21290: PUSH
21291: LD_INT 20
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PPUSH
21304: CALL_OW 69
21308: OR
21309: IFFALSE 21749
21311: GO 21313
21313: DISABLE
21314: LD_INT 0
21316: PPUSH
21317: PPUSH
21318: PPUSH
// begin PrepareRolfSquad ;
21319: CALL 3551 0 0
// dep := HexInfo ( 86 , 54 ) ;
21323: LD_ADDR_VAR 0 3
21327: PUSH
21328: LD_INT 86
21330: PPUSH
21331: LD_INT 54
21333: PPUSH
21334: CALL_OW 428
21338: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
21339: LD_VAR 0 3
21343: PPUSH
21344: CALL_OW 274
21348: PPUSH
21349: LD_INT 1
21351: PPUSH
21352: LD_INT 300
21354: PPUSH
21355: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
21359: LD_VAR 0 3
21363: PPUSH
21364: CALL_OW 274
21368: PPUSH
21369: LD_INT 2
21371: PPUSH
21372: LD_INT 300
21374: PPUSH
21375: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
21379: LD_EXP 51
21383: PPUSH
21384: LD_INT 79
21386: PPUSH
21387: LD_INT 52
21389: PPUSH
21390: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
21394: LD_INT 35
21396: PPUSH
21397: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( rolfSquad , [ f_not , [ f_hastask ] ] ) , 79 , 52 ) ;
21401: LD_EXP 51
21405: PPUSH
21406: LD_INT 3
21408: PUSH
21409: LD_INT 60
21411: PUSH
21412: EMPTY
21413: LIST
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PPUSH
21419: CALL_OW 72
21423: PPUSH
21424: LD_INT 79
21426: PPUSH
21427: LD_INT 52
21429: PPUSH
21430: CALL_OW 114
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
21434: LD_INT 12
21436: PPUSH
21437: LD_INT 22
21439: PUSH
21440: LD_INT 3
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: LD_INT 21
21449: PUSH
21450: LD_INT 1
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PPUSH
21461: CALL_OW 70
21465: NOT
21466: IFFALSE 21394
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
21468: LD_ADDR_VAR 0 2
21472: PUSH
21473: LD_INT 12
21475: PPUSH
21476: LD_INT 21
21478: PUSH
21479: LD_INT 3
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PPUSH
21486: CALL_OW 70
21490: ST_TO_ADDR
// for i in tmp do
21491: LD_ADDR_VAR 0 1
21495: PUSH
21496: LD_VAR 0 2
21500: PUSH
21501: FOR_IN
21502: IFFALSE 21518
// SetSide ( i , 8 ) ;
21504: LD_VAR 0 1
21508: PPUSH
21509: LD_INT 8
21511: PPUSH
21512: CALL_OW 235
21516: GO 21501
21518: POP
21519: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
21520: LD_INT 63
21522: PPUSH
21523: LD_INT 42
21525: PPUSH
21526: CALL_OW 428
21530: PPUSH
21531: LD_INT 320
21533: PPUSH
21534: CALL_OW 234
// wait ( 0 0$10 ) ;
21538: LD_INT 350
21540: PPUSH
21541: CALL_OW 67
// DialogueOn ;
21545: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
21549: LD_INT 8
21551: PPUSH
21552: LD_INT 2
21554: PPUSH
21555: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
21559: LD_INT 86
21561: PPUSH
21562: LD_INT 54
21564: PPUSH
21565: CALL_OW 428
21569: PPUSH
21570: LD_STRING antwerp
21572: PPUSH
21573: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
21577: LD_EXP 47
21581: PPUSH
21582: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
21586: LD_EXP 47
21590: PPUSH
21591: LD_STRING DRf-rast-1
21593: PPUSH
21594: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
21598: LD_EXP 34
21602: PPUSH
21603: LD_STRING DH-rast-2
21605: PPUSH
21606: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
21610: LD_EXP 47
21614: PPUSH
21615: LD_STRING DRf-rast-3
21617: PPUSH
21618: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
21622: LD_EXP 47
21626: PPUSH
21627: LD_STRING DRf-rast-4
21629: PPUSH
21630: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
21634: LD_EXP 47
21638: PPUSH
21639: LD_STRING DRf-rast-5
21641: PPUSH
21642: CALL_OW 94
// if IsOk ( Aviradze ) then
21646: LD_EXP 46
21650: PPUSH
21651: CALL_OW 302
21655: IFFALSE 21714
// begin CenterNowOnUnits ( Aviradze ) ;
21657: LD_EXP 46
21661: PPUSH
21662: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
21666: LD_EXP 46
21670: PPUSH
21671: LD_STRING DA-rast-6
21673: PPUSH
21674: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
21678: LD_EXP 34
21682: PPUSH
21683: LD_STRING DH-rast-7
21685: PPUSH
21686: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
21690: LD_EXP 35
21694: PPUSH
21695: LD_STRING DG-rast-8
21697: PPUSH
21698: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
21702: LD_EXP 35
21706: PPUSH
21707: LD_STRING DG-rast-9
21709: PPUSH
21710: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
21714: LD_EXP 34
21718: PPUSH
21719: LD_STRING DH-rast-10
21721: PPUSH
21722: CALL_OW 88
// DialogueOff ;
21726: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
21730: LD_STRING M2
21732: PPUSH
21733: CALL_OW 337
// bergkampfArrived := true ;
21737: LD_ADDR_EXP 3
21741: PUSH
21742: LD_INT 1
21744: ST_TO_ADDR
// PrepareRolfBase ;
21745: CALL 3882 0 0
// end ;
21749: PPOPN 3
21751: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) and canRolfJoin do var i ;
21752: LD_INT 12
21754: PPUSH
21755: LD_INT 22
21757: PUSH
21758: LD_INT 2
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PPUSH
21765: CALL_OW 70
21769: IFFALSE 21782
21771: PUSH
21772: LD_EXP 47
21776: PPUSH
21777: CALL_OW 302
21781: AND
21782: IFFALSE 21790
21784: PUSH
21785: LD_EXP 29
21789: AND
21790: IFFALSE 22350
21792: GO 21794
21794: DISABLE
21795: LD_INT 0
21797: PPUSH
// begin rolfScriptBase := false ;
21798: LD_ADDR_EXP 9
21802: PUSH
21803: LD_INT 0
21805: ST_TO_ADDR
// DialogueOn ;
21806: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
21810: LD_EXP 47
21814: PPUSH
21815: CALL_OW 87
// if rolfSquad >= 10 then
21819: LD_EXP 51
21823: PUSH
21824: LD_INT 10
21826: GREATEREQUAL
21827: IFFALSE 22006
// begin linkedWithRolf := 2 ;
21829: LD_ADDR_EXP 12
21833: PUSH
21834: LD_INT 2
21836: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
21837: LD_EXP 47
21841: PPUSH
21842: LD_STRING DRf-rast-11
21844: PPUSH
21845: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
21849: LD_EXP 34
21853: PPUSH
21854: LD_STRING DH-rast-12
21856: PPUSH
21857: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
21861: LD_EXP 47
21865: PPUSH
21866: LD_STRING DRf-rast-13
21868: PPUSH
21869: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
21873: LD_EXP 34
21877: PPUSH
21878: LD_STRING DH-rast-14
21880: PPUSH
21881: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
21885: LD_EXP 47
21889: PPUSH
21890: LD_STRING DRf-rast-15
21892: PPUSH
21893: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
21897: LD_EXP 34
21901: PPUSH
21902: LD_STRING DH-rast-16
21904: PPUSH
21905: CALL_OW 88
// if IsOk ( Mike ) then
21909: LD_EXP 36
21913: PPUSH
21914: CALL_OW 302
21918: IFFALSE 21992
// begin Say ( Mike , DM-rast-17 ) ;
21920: LD_EXP 36
21924: PPUSH
21925: LD_STRING DM-rast-17
21927: PPUSH
21928: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
21932: LD_EXP 34
21936: PPUSH
21937: LD_STRING DH-rast-18
21939: PPUSH
21940: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
21944: LD_EXP 36
21948: PPUSH
21949: LD_STRING DM-rast-19
21951: PPUSH
21952: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
21956: LD_EXP 34
21960: PPUSH
21961: LD_STRING DH-rast-20
21963: PPUSH
21964: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
21968: LD_EXP 36
21972: PPUSH
21973: LD_STRING DM-rast-21
21975: PPUSH
21976: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
21980: LD_EXP 34
21984: PPUSH
21985: LD_STRING DH-rast-22
21987: PPUSH
21988: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
21992: LD_EXP 34
21996: PPUSH
21997: LD_STRING DH-rast-23
21999: PPUSH
22000: CALL_OW 88
// end else
22004: GO 22156
// begin linkedWithRolf := 1 ;
22006: LD_ADDR_EXP 12
22010: PUSH
22011: LD_INT 1
22013: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
22014: LD_EXP 47
22018: PPUSH
22019: LD_STRING DRf-rast-a-11
22021: PPUSH
22022: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
22026: LD_EXP 34
22030: PPUSH
22031: LD_STRING DH-rast-a-12
22033: PPUSH
22034: CALL_OW 88
// if IsOk ( Kurt ) then
22038: LD_EXP 45
22042: PPUSH
22043: CALL_OW 302
22047: IFFALSE 22144
// begin Say ( Kurt , DKs-rast-a-13 ) ;
22049: LD_EXP 45
22053: PPUSH
22054: LD_STRING DKs-rast-a-13
22056: PPUSH
22057: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
22061: LD_EXP 47
22065: PPUSH
22066: LD_STRING DRf-rast-a-14
22068: PPUSH
22069: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
22073: LD_EXP 47
22077: PPUSH
22078: LD_STRING DRf-rast-a-15
22080: PPUSH
22081: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
22085: LD_EXP 45
22089: PPUSH
22090: LD_STRING DKs-rast-a-16
22092: PPUSH
22093: CALL_OW 88
// if IsOk ( Givi ) then
22097: LD_EXP 35
22101: PPUSH
22102: CALL_OW 302
22106: IFFALSE 22144
// begin Say ( Givi , DG-rast-a-17 ) ;
22108: LD_EXP 35
22112: PPUSH
22113: LD_STRING DG-rast-a-17
22115: PPUSH
22116: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
22120: LD_EXP 35
22124: PPUSH
22125: LD_STRING DG-rast-a-18
22127: PPUSH
22128: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
22132: LD_EXP 45
22136: PPUSH
22137: LD_STRING DKs-rast-a-19
22139: PPUSH
22140: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
22144: LD_EXP 34
22148: PPUSH
22149: LD_STRING DH-rast-a-20
22151: PPUSH
22152: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
22156: LD_EXP 47
22160: PPUSH
22161: LD_STRING DRf-rast-24
22163: PPUSH
22164: CALL_OW 88
// if IsOk ( Aviradze ) then
22168: LD_EXP 46
22172: PPUSH
22173: CALL_OW 302
22177: IFFALSE 22277
// begin Say ( Aviradze , DA-rast-25 ) ;
22179: LD_EXP 46
22183: PPUSH
22184: LD_STRING DA-rast-25
22186: PPUSH
22187: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
22191: LD_EXP 34
22195: PPUSH
22196: LD_STRING DH-rast-26
22198: PPUSH
22199: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
22203: LD_EXP 46
22207: PPUSH
22208: LD_STRING DA-rast-27
22210: PPUSH
22211: CALL_OW 88
// if IsOk ( Markov ) then
22215: LD_EXP 41
22219: PPUSH
22220: CALL_OW 302
22224: IFFALSE 22252
// begin Say ( Markov , DMar-rast-28 ) ;
22226: LD_EXP 41
22230: PPUSH
22231: LD_STRING DMar-rast-28
22233: PPUSH
22234: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
22238: LD_EXP 41
22242: PPUSH
22243: LD_STRING DMar-rast-29
22245: PPUSH
22246: CALL_OW 88
// end else
22250: GO 22275
// if IsOk ( Sophia ) then
22252: LD_EXP 40
22256: PPUSH
22257: CALL_OW 302
22261: IFFALSE 22275
// begin Say ( Sophia , DS-rast-28 ) ;
22263: LD_EXP 40
22267: PPUSH
22268: LD_STRING DS-rast-28
22270: PPUSH
22271: CALL_OW 88
// end ; end else
22275: GO 22300
// if IsOk ( Sophia ) then
22277: LD_EXP 40
22281: PPUSH
22282: CALL_OW 302
22286: IFFALSE 22300
// Say ( Sophia , DS-rast-29 ) ;
22288: LD_EXP 40
22292: PPUSH
22293: LD_STRING DS-rast-29
22295: PPUSH
22296: CALL_OW 88
// DialogueOff ;
22300: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
22304: LD_STRING M3
22306: PPUSH
22307: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
22311: LD_ADDR_VAR 0 1
22315: PUSH
22316: LD_INT 22
22318: PUSH
22319: LD_INT 8
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PPUSH
22326: CALL_OW 69
22330: PUSH
22331: FOR_IN
22332: IFFALSE 22348
// SetSide ( i , 2 ) ;
22334: LD_VAR 0 1
22338: PPUSH
22339: LD_INT 2
22341: PPUSH
22342: CALL_OW 235
22346: GO 22331
22348: POP
22349: POP
// end ;
22350: PPOPN 1
22352: END
// every 0 0$1 trigger omarAttack and not linkedWithRolf and canRolfJoin do var i ;
22353: LD_EXP 23
22357: IFFALSE 22366
22359: PUSH
22360: LD_EXP 12
22364: NOT
22365: AND
22366: IFFALSE 22374
22368: PUSH
22369: LD_EXP 29
22373: AND
22374: IFFALSE 22465
22376: GO 22378
22378: DISABLE
22379: LD_INT 0
22381: PPUSH
// begin canRolfJoin := false ;
22382: LD_ADDR_EXP 29
22386: PUSH
22387: LD_INT 0
22389: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
22390: LD_STRING M3
22392: PPUSH
22393: CALL_OW 337
// for i in rolfSquad do
22397: LD_ADDR_VAR 0 1
22401: PUSH
22402: LD_EXP 51
22406: PUSH
22407: FOR_IN
22408: IFFALSE 22463
// begin ComExit ( i ) ;
22410: LD_VAR 0 1
22414: PPUSH
22415: CALL 68252 0 1
// AddComAgressiveMove ( i , 147 , 162 ) ;
22419: LD_VAR 0 1
22423: PPUSH
22424: LD_INT 147
22426: PPUSH
22427: LD_INT 162
22429: PPUSH
22430: CALL_OW 174
// AddComWait ( i , 0 0$30 ) ;
22434: LD_VAR 0 1
22438: PPUSH
22439: LD_INT 1050
22441: PPUSH
22442: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 162 ) ;
22446: LD_VAR 0 1
22450: PPUSH
22451: LD_INT 103
22453: PPUSH
22454: LD_INT 162
22456: PPUSH
22457: CALL_OW 174
// end ;
22461: GO 22407
22463: POP
22464: POP
// end ;
22465: PPOPN 1
22467: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf and canRolfJoin do var random ;
22468: LD_EXP 3
22472: IFFALSE 22489
22474: PUSH
22475: LD_EXP 47
22479: PPUSH
22480: CALL_OW 256
22484: PUSH
22485: LD_INT 400
22487: LESS
22488: AND
22489: IFFALSE 22498
22491: PUSH
22492: LD_EXP 12
22496: NOT
22497: AND
22498: IFFALSE 22506
22500: PUSH
22501: LD_EXP 29
22505: AND
22506: IFFALSE 22780
22508: GO 22510
22510: DISABLE
22511: LD_INT 0
22513: PPUSH
// begin DialogueOn ;
22514: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
22518: LD_EXP 47
22522: PPUSH
22523: LD_STRING DRf-rast-f-11
22525: PPUSH
22526: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
22530: LD_EXP 47
22534: PPUSH
22535: LD_STRING DRf-rast-f-12
22537: PPUSH
22538: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
22542: LD_EXP 47
22546: PPUSH
22547: LD_STRING DRf-rast-f-13
22549: PPUSH
22550: CALL_OW 94
// DialogueOff ;
22554: CALL_OW 7
// KillUnit ( Rolf ) ;
22558: LD_EXP 47
22562: PPUSH
22563: CALL_OW 66
// wait ( 0 0$1 ) ;
22567: LD_INT 35
22569: PPUSH
22570: CALL_OW 67
// if not IsOk ( Givi ) then
22574: LD_EXP 35
22578: PPUSH
22579: CALL_OW 302
22583: NOT
22584: IFFALSE 22588
// exit ;
22586: GO 22780
// DialogueOn ;
22588: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
22592: LD_EXP 35
22596: PPUSH
22597: LD_STRING DG-rast-f-14
22599: PPUSH
22600: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
22604: LD_EXP 35
22608: PPUSH
22609: LD_STRING DG-rast-f-15
22611: PPUSH
22612: CALL_OW 88
// if IsOk ( Kaia ) then
22616: LD_EXP 39
22620: PPUSH
22621: CALL_OW 302
22625: IFFALSE 22641
// Say ( Kaia , DK-rast-f-16 ) else
22627: LD_EXP 39
22631: PPUSH
22632: LD_STRING DK-rast-f-16
22634: PPUSH
22635: CALL_OW 88
22639: GO 22728
// if heikeSecondSquad then
22641: LD_EXP 49
22645: IFFALSE 22728
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
22647: LD_ADDR_VAR 0 1
22651: PUSH
22652: LD_EXP 49
22656: PUSH
22657: LD_INT 1
22659: PPUSH
22660: LD_EXP 49
22664: PPUSH
22665: CALL_OW 12
22669: ARRAY
22670: ST_TO_ADDR
// case GetSex ( random ) of 1 :
22671: LD_VAR 0 1
22675: PPUSH
22676: CALL_OW 258
22680: PUSH
22681: LD_INT 1
22683: DOUBLE
22684: EQUAL
22685: IFTRUE 22689
22687: GO 22704
22689: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
22690: LD_VAR 0 1
22694: PPUSH
22695: LD_STRING DArm-rast-f-a-16
22697: PPUSH
22698: CALL_OW 88
22702: GO 22728
22704: LD_INT 2
22706: DOUBLE
22707: EQUAL
22708: IFTRUE 22712
22710: GO 22727
22712: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
22713: LD_VAR 0 1
22717: PPUSH
22718: LD_STRING DArf-rast-f-a-16
22720: PPUSH
22721: CALL_OW 88
22725: GO 22728
22727: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
22728: LD_EXP 35
22732: PPUSH
22733: LD_STRING DG-rast-f-17
22735: PPUSH
22736: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
22740: LD_EXP 35
22744: PPUSH
22745: LD_STRING DG-rast-f-18
22747: PPUSH
22748: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
22752: LD_EXP 35
22756: PPUSH
22757: LD_STRING DG-rast-f-19
22759: PPUSH
22760: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
22764: LD_EXP 35
22768: PPUSH
22769: LD_STRING DG-rast-f-20
22771: PPUSH
22772: CALL_OW 88
// DialogueOff ;
22776: CALL_OW 7
// end ;
22780: PPOPN 1
22782: END
// every 0 0$1 trigger gameActive and SeeArea ( 2 , ruMainBase ) do
22783: LD_EXP 31
22787: IFFALSE 22801
22789: PUSH
22790: LD_INT 2
22792: PPUSH
22793: LD_INT 10
22795: PPUSH
22796: CALL_OW 294
22800: AND
22801: IFFALSE 22874
22803: GO 22805
22805: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
22806: LD_EXP 35
22810: PPUSH
22811: LD_STRING DG-Len-1
22813: PPUSH
22814: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
22818: LD_EXP 45
22822: PPUSH
22823: LD_STRING DKs-Len-2
22825: PPUSH
22826: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
22830: LD_EXP 45
22834: PPUSH
22835: LD_STRING DKs-Len-3
22837: PPUSH
22838: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
22842: LD_EXP 34
22846: PPUSH
22847: LD_STRING DH-Len-4
22849: PPUSH
22850: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
22854: LD_EXP 39
22858: PPUSH
22859: LD_STRING DK-Len-5
22861: PPUSH
22862: CALL_OW 88
// leninSpotted := true ;
22866: LD_ADDR_EXP 14
22870: PUSH
22871: LD_INT 1
22873: ST_TO_ADDR
// end ;
22874: END
// every 0 0$1 trigger debug or ( bergkampfArrived and tick > [ 32 32$00 , 30 30$00 , 28 28$00 , 26 26$00 ] [ Difficulty ] ) do var i , tmp , inOmarBase , heikeNearbyOmar ;
22875: LD_EXP 1
22879: IFTRUE 22920
22881: PUSH
22882: LD_EXP 3
22886: IFFALSE 22919
22888: PUSH
22889: LD_OWVAR 1
22893: PUSH
22894: LD_INT 67200
22896: PUSH
22897: LD_INT 63000
22899: PUSH
22900: LD_INT 58800
22902: PUSH
22903: LD_INT 54600
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: PUSH
22912: LD_OWVAR 67
22916: ARRAY
22917: GREATER
22918: AND
22919: OR
22920: IFFALSE 23657
22922: GO 22924
22924: DISABLE
22925: LD_INT 0
22927: PPUSH
22928: PPUSH
22929: PPUSH
22930: PPUSH
// begin PrepareOmarSquad ;
22931: CALL 5178 0 0
// repeat wait ( 0 0$1 ) ;
22935: LD_INT 35
22937: PPUSH
22938: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
22942: LD_INT 14
22944: PPUSH
22945: LD_INT 22
22947: PUSH
22948: LD_INT 3
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 2
22957: PUSH
22958: LD_INT 21
22960: PUSH
22961: LD_INT 1
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 59
22970: PUSH
22971: EMPTY
22972: LIST
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: LIST
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PPUSH
22983: CALL_OW 70
22987: NOT
22988: IFFALSE 22935
// tmp := FilterUnitsInArea ( ruOmarBase , [ f_side , 2 ] ) ;
22990: LD_ADDR_VAR 0 2
22994: PUSH
22995: LD_INT 14
22997: PPUSH
22998: LD_INT 22
23000: PUSH
23001: LD_INT 2
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PPUSH
23008: CALL_OW 70
23012: ST_TO_ADDR
// inOmarBase := tmp > 0 ;
23013: LD_ADDR_VAR 0 3
23017: PUSH
23018: LD_VAR 0 2
23022: PUSH
23023: LD_INT 0
23025: GREATER
23026: ST_TO_ADDR
// heikeNearbyOmar := IsInArea ( Heike , ruOmarBase ) ;
23027: LD_ADDR_VAR 0 4
23031: PUSH
23032: LD_EXP 34
23036: PPUSH
23037: LD_INT 14
23039: PPUSH
23040: CALL_OW 308
23044: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_type , unit_building ] ) then
23045: LD_VAR 0 2
23049: PPUSH
23050: LD_INT 21
23052: PUSH
23053: LD_INT 3
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PPUSH
23060: CALL_OW 72
23064: IFFALSE 23169
// begin if heikeNearbyOmar then
23066: LD_VAR 0 4
23070: IFFALSE 23086
// Say ( Omar , DOm-Base-1b ) else
23072: LD_EXP 44
23076: PPUSH
23077: LD_STRING DOm-Base-1b
23079: PPUSH
23080: CALL_OW 88
23084: GO 23098
// SayRadio ( Omar , DOm-Base-1br ) ;
23086: LD_EXP 44
23090: PPUSH
23091: LD_STRING DOm-Base-1br
23093: PPUSH
23094: CALL_OW 94
// for i in UnitFilter ( tmp , [ f_type , unit_building ] ) do
23098: LD_ADDR_VAR 0 1
23102: PUSH
23103: LD_VAR 0 2
23107: PPUSH
23108: LD_INT 21
23110: PUSH
23111: LD_INT 3
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PPUSH
23118: CALL_OW 72
23122: PUSH
23123: FOR_IN
23124: IFFALSE 23165
// begin if UnitsInside ( i ) then
23126: LD_VAR 0 1
23130: PPUSH
23131: CALL_OW 313
23135: IFFALSE 23151
// ComExitBuilding ( UnitsInside ( i ) ) ;
23137: LD_VAR 0 1
23141: PPUSH
23142: CALL_OW 313
23146: PPUSH
23147: CALL_OW 122
// SetSide ( i , 5 ) ;
23151: LD_VAR 0 1
23155: PPUSH
23156: LD_INT 5
23158: PPUSH
23159: CALL_OW 235
// end ;
23163: GO 23123
23165: POP
23166: POP
// end else
23167: GO 23262
// if UnitFilter ( tmp , [ f_type , unit_vehicle ] ) then
23169: LD_VAR 0 2
23173: PPUSH
23174: LD_INT 21
23176: PUSH
23177: LD_INT 2
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PPUSH
23184: CALL_OW 72
23188: IFFALSE 23224
// begin if heikeNearbyOmar then
23190: LD_VAR 0 4
23194: IFFALSE 23210
// Say ( Omar , DOm-Base-1v ) else
23196: LD_EXP 44
23200: PPUSH
23201: LD_STRING DOm-Base-1v
23203: PPUSH
23204: CALL_OW 88
23208: GO 23222
// SayRadio ( Omar , DOm-Base-1vr ) end else
23210: LD_EXP 44
23214: PPUSH
23215: LD_STRING DOm-Base-1vr
23217: PPUSH
23218: CALL_OW 94
23222: GO 23262
// if inOmarBase then
23224: LD_VAR 0 3
23228: IFFALSE 23262
// begin if heikeNearbyOmar then
23230: LD_VAR 0 4
23234: IFFALSE 23250
// Say ( Omar , DOm-Base-1h ) else
23236: LD_EXP 44
23240: PPUSH
23241: LD_STRING DOm-Base-1h
23243: PPUSH
23244: CALL_OW 88
23248: GO 23262
// SayRadio ( Omar , DOm-Base-1hr ) end ;
23250: LD_EXP 44
23254: PPUSH
23255: LD_STRING DOm-Base-1hr
23257: PPUSH
23258: CALL_OW 94
// for i in omarSquad do
23262: LD_ADDR_VAR 0 1
23266: PUSH
23267: LD_EXP 52
23271: PUSH
23272: FOR_IN
23273: IFFALSE 23304
// if GetLives ( i ) < 750 then
23275: LD_VAR 0 1
23279: PPUSH
23280: CALL_OW 256
23284: PUSH
23285: LD_INT 750
23287: LESS
23288: IFFALSE 23302
// SetLives ( i , 1000 ) ;
23290: LD_VAR 0 1
23294: PPUSH
23295: LD_INT 1000
23297: PPUSH
23298: CALL_OW 234
23302: GO 23272
23304: POP
23305: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
23306: LD_ADDR_VAR 0 1
23310: PUSH
23311: LD_INT 14
23313: PPUSH
23314: LD_INT 21
23316: PUSH
23317: LD_INT 3
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PPUSH
23324: CALL_OW 70
23328: PUSH
23329: FOR_IN
23330: IFFALSE 23346
// SetSide ( i , 5 ) ;
23332: LD_VAR 0 1
23336: PPUSH
23337: LD_INT 5
23339: PPUSH
23340: CALL_OW 235
23344: GO 23329
23346: POP
23347: POP
// wait ( 0 0$3 ) ;
23348: LD_INT 105
23350: PPUSH
23351: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
23355: LD_INT 5
23357: PPUSH
23358: LD_INT 2
23360: PPUSH
23361: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
23365: LD_EXP 44
23369: PPUSH
23370: CALL_OW 87
// DialogueOn ;
23374: CALL_OW 6
// if heikeNearbyOmar then
23378: LD_VAR 0 4
23382: IFFALSE 23440
// begin Say ( Omar , DOm-Veh-1a ) ;
23384: LD_EXP 44
23388: PPUSH
23389: LD_STRING DOm-Veh-1a
23391: PPUSH
23392: CALL_OW 88
// Say ( Omar , DOm-Veh-2a ) ;
23396: LD_EXP 44
23400: PPUSH
23401: LD_STRING DOm-Veh-2a
23403: PPUSH
23404: CALL_OW 88
// Say ( Omar , DOm-Veh-3a ) ;
23408: LD_EXP 44
23412: PPUSH
23413: LD_STRING DOm-Veh-3a
23415: PPUSH
23416: CALL_OW 88
// if mortarConstructed then
23420: LD_EXP 15
23424: IFFALSE 23438
// Say ( Omar , DOm-Veh-4a ) ;
23426: LD_EXP 44
23430: PPUSH
23431: LD_STRING DOm-Veh-4a
23433: PPUSH
23434: CALL_OW 88
// end else
23438: GO 23494
// begin SayRadio ( Omar , DOm-Veh-1 ) ;
23440: LD_EXP 44
23444: PPUSH
23445: LD_STRING DOm-Veh-1
23447: PPUSH
23448: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
23452: LD_EXP 44
23456: PPUSH
23457: LD_STRING DOm-Veh-2
23459: PPUSH
23460: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
23464: LD_EXP 44
23468: PPUSH
23469: LD_STRING DOm-Veh-3
23471: PPUSH
23472: CALL_OW 94
// if mortarConstructed then
23476: LD_EXP 15
23480: IFFALSE 23494
// SayRadio ( Omar , DOm-Veh-4 ) ;
23482: LD_EXP 44
23486: PPUSH
23487: LD_STRING DOm-Veh-4
23489: PPUSH
23490: CALL_OW 94
// end ; Say ( Heike , DH-Veh-5 ) ;
23494: LD_EXP 34
23498: PPUSH
23499: LD_STRING DH-Veh-5
23501: PPUSH
23502: CALL_OW 88
// if IsOk ( Kurt ) then
23506: LD_EXP 45
23510: PPUSH
23511: CALL_OW 302
23515: IFFALSE 23565
// begin Say ( Kurt , DKs-Veh-6 ) ;
23517: LD_EXP 45
23521: PPUSH
23522: LD_STRING DKs-Veh-6
23524: PPUSH
23525: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
23529: LD_EXP 45
23533: PPUSH
23534: LD_STRING DKs-Veh-7
23536: PPUSH
23537: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
23541: LD_EXP 35
23545: PPUSH
23546: LD_STRING DG-Veh-8
23548: PPUSH
23549: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
23553: LD_EXP 36
23557: PPUSH
23558: LD_STRING DM-Veh-9
23560: PPUSH
23561: CALL_OW 88
// end ; DialogueOff ;
23565: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
23569: LD_STRING M4
23571: PPUSH
23572: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
23576: LD_EXP 44
23580: PPUSH
23581: LD_INT 341
23583: PPUSH
23584: LD_INT 232
23586: PPUSH
23587: CALL_OW 428
23591: PPUSH
23592: CALL_OW 120
// omarArrived := true ;
23596: LD_ADDR_EXP 6
23600: PUSH
23601: LD_INT 1
23603: ST_TO_ADDR
// omarScriptBase := true ;
23604: LD_ADDR_EXP 10
23608: PUSH
23609: LD_INT 1
23611: ST_TO_ADDR
// omarWantVehicles := true ;
23612: LD_ADDR_EXP 18
23616: PUSH
23617: LD_INT 1
23619: ST_TO_ADDR
// if debug then
23620: LD_EXP 1
23624: IFFALSE 23657
// begin wait ( 0 0$25 ) ;
23626: LD_INT 875
23628: PPUSH
23629: CALL_OW 67
// omarScriptBase := false ;
23633: LD_ADDR_EXP 10
23637: PUSH
23638: LD_INT 0
23640: ST_TO_ADDR
// omarWantVehicles := false ;
23641: LD_ADDR_EXP 18
23645: PUSH
23646: LD_INT 0
23648: ST_TO_ADDR
// omarAttack := true ;
23649: LD_ADDR_EXP 23
23653: PUSH
23654: LD_INT 1
23656: ST_TO_ADDR
// end ; end ;
23657: PPOPN 4
23659: END
// every 0 0$1 trigger FilterUnitsInArea ( ruMainBase , [ f_side , 2 ] ) and omarArrived and IsOk ( Omar ) and not omarAttack do
23660: LD_INT 10
23662: PPUSH
23663: LD_INT 22
23665: PUSH
23666: LD_INT 2
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PPUSH
23673: CALL_OW 70
23677: IFFALSE 23685
23679: PUSH
23680: LD_EXP 6
23684: AND
23685: IFFALSE 23698
23687: PUSH
23688: LD_EXP 44
23692: PPUSH
23693: CALL_OW 302
23697: AND
23698: IFFALSE 23707
23700: PUSH
23701: LD_EXP 23
23705: NOT
23706: AND
23707: IFFALSE 23724
23709: GO 23711
23711: DISABLE
// SayRadio ( Omar , DOm-Lenin ) ;
23712: LD_EXP 44
23716: PPUSH
23717: LD_STRING DOm-Lenin
23719: PPUSH
23720: CALL_OW 94
23724: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
23725: LD_EXP 47
23729: PPUSH
23730: CALL_OW 302
23734: IFFALSE 23742
23736: PUSH
23737: LD_EXP 12
23741: AND
23742: IFFALSE 23750
23744: PUSH
23745: LD_EXP 6
23749: AND
23750: IFFALSE 23854
23752: GO 23754
23754: DISABLE
// begin wait ( 1 1$00 ) ;
23755: LD_INT 2100
23757: PPUSH
23758: CALL_OW 67
// CenterNowOnUnits ( Rolf ) ;
23762: LD_EXP 47
23766: PPUSH
23767: CALL_OW 87
// DialogueOn ;
23771: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
23775: LD_EXP 47
23779: PPUSH
23780: LD_STRING DRf-Veh-10
23782: PPUSH
23783: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
23787: LD_EXP 47
23791: PPUSH
23792: LD_STRING DRf-Veh-11
23794: PPUSH
23795: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
23799: LD_EXP 34
23803: PPUSH
23804: LD_STRING DH-Veh-12
23806: PPUSH
23807: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
23811: LD_EXP 34
23815: PPUSH
23816: LD_STRING DH-Veh-13
23818: PPUSH
23819: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
23823: LD_EXP 47
23827: PPUSH
23828: LD_STRING DRf-Veh-14
23830: PPUSH
23831: CALL_OW 88
// DialogueOff ;
23835: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
23839: LD_STRING M5
23841: PPUSH
23842: CALL_OW 337
// rolfWantVehicles := true ;
23846: LD_ADDR_EXP 17
23850: PUSH
23851: LD_INT 1
23853: ST_TO_ADDR
// end ;
23854: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
23855: LD_EXP 18
23859: IFFALSE 24622
23861: GO 23863
23863: DISABLE
23864: LD_INT 0
23866: PPUSH
23867: PPUSH
23868: PPUSH
23869: PPUSH
23870: PPUSH
23871: PPUSH
// begin wait ( 0 0$3 ) ;
23872: LD_INT 105
23874: PPUSH
23875: CALL_OW 67
// Hint ( OmarVehicles ) ;
23879: LD_STRING OmarVehicles
23881: PPUSH
23882: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
23886: LD_INT 16
23888: PPUSH
23889: LD_INT 1
23891: PPUSH
23892: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
23896: LD_INT 35
23898: PPUSH
23899: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
23903: LD_ADDR_EXP 20
23907: PUSH
23908: LD_EXP 20
23912: PUSH
23913: LD_INT 35
23915: MINUS
23916: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
23917: LD_EXP 20
23921: PUSH
23922: LD_INT 0
23924: LESSEQUAL
23925: IFFALSE 24025
// begin display_strings := [ ] ;
23927: LD_ADDR_OWVAR 47
23931: PUSH
23932: EMPTY
23933: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
23934: LD_STRING M4a
23936: PPUSH
23937: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
23941: LD_INT 16
23943: PPUSH
23944: LD_INT 0
23946: PPUSH
23947: CALL_OW 424
// DialogueOn ;
23951: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
23955: LD_EXP 44
23959: PPUSH
23960: LD_STRING DOm-Veh-b-15
23962: PPUSH
23963: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
23967: LD_EXP 34
23971: PPUSH
23972: LD_STRING DH-Veh-b-16
23974: PPUSH
23975: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
23979: LD_EXP 44
23983: PPUSH
23984: LD_STRING DOm-Veh-b-17
23986: PPUSH
23987: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
23991: LD_EXP 39
23995: PPUSH
23996: LD_STRING DK-Veh-b-18
23998: PPUSH
23999: CALL_OW 88
// DialogueOff ;
24003: CALL_OW 7
// omarAttack := true ;
24007: LD_ADDR_EXP 23
24011: PUSH
24012: LD_INT 1
24014: ST_TO_ADDR
// omarScriptBase := false ;
24015: LD_ADDR_EXP 10
24019: PUSH
24020: LD_INT 0
24022: ST_TO_ADDR
// exit ;
24023: GO 24622
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
24025: LD_EXP 21
24029: PUSH
24030: LD_INT 16
24032: PPUSH
24033: LD_INT 22
24035: PUSH
24036: LD_INT 2
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 21
24045: PUSH
24046: LD_INT 2
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 3
24055: PUSH
24056: LD_INT 2
24058: PUSH
24059: LD_INT 34
24061: PUSH
24062: LD_INT 32
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 34
24071: PUSH
24072: LD_INT 88
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 34
24081: PUSH
24082: LD_INT 31
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 33
24101: PUSH
24102: LD_INT 1
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 58
24111: PUSH
24112: EMPTY
24113: LIST
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: PPUSH
24122: CALL_OW 70
24126: LESSEQUAL
24127: IFFALSE 23896
// omarWaitingForVehiclesTimer := 0 0$00 ;
24129: LD_ADDR_EXP 20
24133: PUSH
24134: LD_INT 0
24136: ST_TO_ADDR
// display_strings := [ ] ;
24137: LD_ADDR_OWVAR 47
24141: PUSH
24142: EMPTY
24143: ST_TO_ADDR
// DialogueOn ;
24144: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
24148: LD_EXP 44
24152: PPUSH
24153: LD_STRING DOm-Veh-a-15
24155: PPUSH
24156: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
24160: LD_EXP 39
24164: PPUSH
24165: LD_STRING DK-Veh-a-16
24167: PPUSH
24168: CALL_OW 88
// DialogueOff ;
24172: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
24176: LD_STRING M4a
24178: PPUSH
24179: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
24183: LD_INT 16
24185: PPUSH
24186: LD_INT 0
24188: PPUSH
24189: CALL_OW 424
// omarHasVehicles := true ;
24193: LD_ADDR_EXP 22
24197: PUSH
24198: LD_INT 1
24200: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24201: LD_INT 35
24203: PPUSH
24204: CALL_OW 67
// until rolfWaitingForVehiclesTimer = 0 0$00 ;
24208: LD_EXP 19
24212: PUSH
24213: LD_INT 0
24215: EQUAL
24216: IFFALSE 24201
// wait ( 1 1$00 ) ;
24218: LD_INT 2100
24220: PPUSH
24221: CALL_OW 67
// omarAttack := true ;
24225: LD_ADDR_EXP 23
24229: PUSH
24230: LD_INT 1
24232: ST_TO_ADDR
// omarScriptBase := false ;
24233: LD_ADDR_EXP 10
24237: PUSH
24238: LD_INT 0
24240: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
24241: LD_ADDR_VAR 0 2
24245: PUSH
24246: LD_INT 16
24248: PPUSH
24249: LD_INT 22
24251: PUSH
24252: LD_INT 2
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 21
24261: PUSH
24262: LD_INT 2
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: LD_INT 33
24271: PUSH
24272: LD_INT 1
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 58
24281: PUSH
24282: EMPTY
24283: LIST
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: PPUSH
24291: CALL_OW 70
24295: ST_TO_ADDR
// for i in tmp do
24296: LD_ADDR_VAR 0 1
24300: PUSH
24301: LD_VAR 0 2
24305: PUSH
24306: FOR_IN
24307: IFFALSE 24335
// begin SetFuel ( i , 100 ) ;
24309: LD_VAR 0 1
24313: PPUSH
24314: LD_INT 100
24316: PPUSH
24317: CALL_OW 240
// SetSide ( i , 5 ) ;
24321: LD_VAR 0 1
24325: PPUSH
24326: LD_INT 5
24328: PPUSH
24329: CALL_OW 235
// end ;
24333: GO 24306
24335: POP
24336: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
24337: LD_ADDR_VAR 0 3
24341: PUSH
24342: LD_EXP 52
24346: PPUSH
24347: LD_INT 25
24349: PUSH
24350: LD_INT 2
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PPUSH
24357: CALL_OW 72
24361: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
24362: LD_ADDR_VAR 0 4
24366: PUSH
24367: LD_EXP 52
24371: PPUSH
24372: LD_INT 3
24374: PUSH
24375: LD_INT 55
24377: PUSH
24378: EMPTY
24379: LIST
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 25
24387: PUSH
24388: LD_INT 3
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PPUSH
24399: CALL_OW 72
24403: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
24404: LD_ADDR_VAR 0 5
24408: PUSH
24409: LD_INT 324
24411: PPUSH
24412: LD_INT 234
24414: PPUSH
24415: CALL_OW 428
24419: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
24420: LD_ADDR_VAR 0 6
24424: PUSH
24425: LD_INT 334
24427: PPUSH
24428: LD_INT 241
24430: PPUSH
24431: CALL_OW 428
24435: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
24436: LD_VAR 0 6
24440: PPUSH
24441: CALL_OW 313
24445: PPUSH
24446: CALL_OW 122
// if eng then
24450: LD_VAR 0 3
24454: IFFALSE 24562
// begin if eng + mech <= tmp then
24456: LD_VAR 0 3
24460: PUSH
24461: LD_VAR 0 4
24465: PLUS
24466: PUSH
24467: LD_VAR 0 2
24471: LESSEQUAL
24472: IFFALSE 24527
// begin ComEnterUnit ( eng , workshop ) ;
24474: LD_VAR 0 3
24478: PPUSH
24479: LD_VAR 0 5
24483: PPUSH
24484: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
24488: LD_VAR 0 3
24492: PPUSH
24493: LD_INT 3
24495: PPUSH
24496: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24500: LD_VAR 0 3
24504: PPUSH
24505: CALL_OW 182
// mech := mech union eng ;
24509: LD_ADDR_VAR 0 4
24513: PUSH
24514: LD_VAR 0 4
24518: PUSH
24519: LD_VAR 0 3
24523: UNION
24524: ST_TO_ADDR
// end else
24525: GO 24562
// begin ComEnterUnit ( eng , armoury ) ;
24527: LD_VAR 0 3
24531: PPUSH
24532: LD_VAR 0 6
24536: PPUSH
24537: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
24541: LD_VAR 0 3
24545: PPUSH
24546: LD_INT 1
24548: PPUSH
24549: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24553: LD_VAR 0 3
24557: PPUSH
24558: CALL_OW 182
// end ; end ; for i := 1 to tmp do
24562: LD_ADDR_VAR 0 1
24566: PUSH
24567: DOUBLE
24568: LD_INT 1
24570: DEC
24571: ST_TO_ADDR
24572: LD_VAR 0 2
24576: PUSH
24577: FOR_TO
24578: IFFALSE 24620
// if i <= mech then
24580: LD_VAR 0 1
24584: PUSH
24585: LD_VAR 0 4
24589: LESSEQUAL
24590: IFFALSE 24618
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
24592: LD_VAR 0 4
24596: PUSH
24597: LD_VAR 0 1
24601: ARRAY
24602: PPUSH
24603: LD_VAR 0 2
24607: PUSH
24608: LD_VAR 0 1
24612: ARRAY
24613: PPUSH
24614: CALL_OW 180
24618: GO 24577
24620: POP
24621: POP
// end ;
24622: PPOPN 6
24624: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i , hasBadWeapons ;
24625: LD_EXP 47
24629: PPUSH
24630: CALL_OW 302
24634: IFFALSE 24642
24636: PUSH
24637: LD_EXP 17
24641: AND
24642: IFFALSE 25266
24644: GO 24646
24646: DISABLE
24647: LD_INT 0
24649: PPUSH
24650: PPUSH
// begin repeat wait ( 0 0$1 ) ;
24651: LD_INT 35
24653: PPUSH
24654: CALL_OW 67
// hasBadWeapons := false ;
24658: LD_ADDR_VAR 0 2
24662: PUSH
24663: LD_INT 0
24665: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
24666: LD_ADDR_EXP 19
24670: PUSH
24671: LD_EXP 19
24675: PUSH
24676: LD_INT 35
24678: MINUS
24679: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 then
24680: LD_EXP 19
24684: PUSH
24685: LD_INT 0
24687: LESSEQUAL
24688: IFFALSE 24950
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
24690: LD_ADDR_EXP 19
24694: PUSH
24695: LD_INT 0
24697: ST_TO_ADDR
// display_strings := [ ] ;
24698: LD_ADDR_OWVAR 47
24702: PUSH
24703: EMPTY
24704: ST_TO_ADDR
// DialogueOn ;
24705: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
24709: LD_EXP 47
24713: PPUSH
24714: LD_STRING DRf-Veh-b-19
24716: PPUSH
24717: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
24721: LD_EXP 47
24725: PPUSH
24726: LD_STRING DRf-Veh-b-20
24728: PPUSH
24729: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
24733: LD_EXP 34
24737: PPUSH
24738: LD_STRING DH-Veh-b-21
24740: PPUSH
24741: CALL_OW 88
// if IsOk ( Givi ) then
24745: LD_EXP 35
24749: PPUSH
24750: CALL_OW 302
24754: IFFALSE 24792
// begin Say ( Givi , DG-Veh-b-22 ) ;
24756: LD_EXP 35
24760: PPUSH
24761: LD_STRING DG-Veh-b-22
24763: PPUSH
24764: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
24768: LD_EXP 34
24772: PPUSH
24773: LD_STRING DH-Veh-b-23
24775: PPUSH
24776: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
24780: LD_EXP 35
24784: PPUSH
24785: LD_STRING DG-Veh-b-24
24787: PPUSH
24788: CALL_OW 88
// end ; DialogueOff ;
24792: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
24796: LD_STRING M5a
24798: PPUSH
24799: CALL_OW 337
// for i in rolfSquad do
24803: LD_ADDR_VAR 0 1
24807: PUSH
24808: LD_EXP 51
24812: PUSH
24813: FOR_IN
24814: IFFALSE 24931
// begin SetSide ( i , 8 ) ;
24816: LD_VAR 0 1
24820: PPUSH
24821: LD_INT 8
24823: PPUSH
24824: CALL_OW 235
// if IsDriver ( i ) then
24828: LD_VAR 0 1
24832: PPUSH
24833: CALL 65434 0 1
24837: IFFALSE 24909
// begin if not GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
24839: LD_VAR 0 1
24843: PPUSH
24844: CALL_OW 310
24848: PPUSH
24849: CALL_OW 264
24853: PUSH
24854: LD_INT 51
24856: PUSH
24857: LD_INT 52
24859: PUSH
24860: LD_INT 32
24862: PUSH
24863: LD_INT 88
24865: PUSH
24866: LD_INT 31
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: IN
24876: NOT
24877: IFFALSE 24898
// SetSide ( IsInUnit ( i ) , 8 ) else
24879: LD_VAR 0 1
24883: PPUSH
24884: CALL_OW 310
24888: PPUSH
24889: LD_INT 8
24891: PPUSH
24892: CALL_OW 235
24896: GO 24907
// ComExitVehicle ( i ) ;
24898: LD_VAR 0 1
24902: PPUSH
24903: CALL_OW 121
// end else
24907: GO 24929
// if IsInUnit ( i ) then
24909: LD_VAR 0 1
24913: PPUSH
24914: CALL_OW 310
24918: IFFALSE 24929
// ComExitBuilding ( i ) ;
24920: LD_VAR 0 1
24924: PPUSH
24925: CALL_OW 122
// end ;
24929: GO 24813
24931: POP
24932: POP
// wait ( 0 0$10 ) ;
24933: LD_INT 350
24935: PPUSH
24936: CALL_OW 67
// rolfAttack := true ;
24940: LD_ADDR_EXP 32
24944: PUSH
24945: LD_INT 1
24947: ST_TO_ADDR
// exit ;
24948: GO 25266
// end ; if IsDead ( Rolf ) then
24950: LD_EXP 47
24954: PPUSH
24955: CALL_OW 301
24959: IFFALSE 24970
// begin ChangeMissionObjectives ( M5a ) ;
24961: LD_STRING M5a
24963: PPUSH
24964: CALL_OW 337
// exit ;
24968: GO 25266
// end ; if Count ( UnitFilter ( rolfSquad , [ f_driving ] ) ) = Count ( rolfSquad ) then
24970: LD_EXP 51
24974: PPUSH
24975: LD_INT 55
24977: PUSH
24978: EMPTY
24979: LIST
24980: PPUSH
24981: CALL_OW 72
24985: PPUSH
24986: CALL 31922 0 1
24990: PUSH
24991: LD_EXP 51
24995: PPUSH
24996: CALL 31922 0 1
25000: EQUAL
25001: IFFALSE 25118
// begin for i in UnitFilter ( rolfSquad , [ f_driving ] ) do
25003: LD_ADDR_VAR 0 1
25007: PUSH
25008: LD_EXP 51
25012: PPUSH
25013: LD_INT 55
25015: PUSH
25016: EMPTY
25017: LIST
25018: PPUSH
25019: CALL_OW 72
25023: PUSH
25024: FOR_IN
25025: IFFALSE 25085
// if GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
25027: LD_VAR 0 1
25031: PPUSH
25032: CALL_OW 310
25036: PPUSH
25037: CALL_OW 264
25041: PUSH
25042: LD_INT 51
25044: PUSH
25045: LD_INT 52
25047: PUSH
25048: LD_INT 32
25050: PUSH
25051: LD_INT 88
25053: PUSH
25054: LD_INT 31
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: IN
25064: IFFALSE 25083
// begin hasBadWeapons := true ;
25066: LD_ADDR_VAR 0 2
25070: PUSH
25071: LD_INT 1
25073: ST_TO_ADDR
// Query ( QBadWeapon ) ;
25074: LD_STRING QBadWeapon
25076: PPUSH
25077: CALL_OW 97
// break ;
25081: GO 25085
// end ;
25083: GO 25024
25085: POP
25086: POP
// if not hasBadWeapons then
25087: LD_VAR 0 2
25091: NOT
25092: IFFALSE 25118
// if Query ( QRolf ) = 1 then
25094: LD_STRING QRolf
25096: PPUSH
25097: CALL_OW 97
25101: PUSH
25102: LD_INT 1
25104: EQUAL
25105: IFFALSE 25111
// break else
25107: GO 25122
25109: GO 25118
// wait ( 0 0$15 ) ;
25111: LD_INT 525
25113: PPUSH
25114: CALL_OW 67
// end ; until false ;
25118: LD_INT 0
25120: IFFALSE 24651
// rolfWaitingForVehiclesTimer := 0 0$00 ;
25122: LD_ADDR_EXP 19
25126: PUSH
25127: LD_INT 0
25129: ST_TO_ADDR
// display_strings := [ ] ;
25130: LD_ADDR_OWVAR 47
25134: PUSH
25135: EMPTY
25136: ST_TO_ADDR
// DialogueOn ;
25137: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
25141: LD_EXP 47
25145: PPUSH
25146: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
25150: LD_EXP 47
25154: PPUSH
25155: LD_STRING DRf-Veh-a-17
25157: PPUSH
25158: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
25162: LD_EXP 34
25166: PPUSH
25167: LD_STRING DH-08-Veh-a-18
25169: PPUSH
25170: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
25174: LD_EXP 47
25178: PPUSH
25179: LD_STRING DRf-Veh-a-19
25181: PPUSH
25182: CALL_OW 88
// DialogueOff ;
25186: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
25190: LD_STRING M5a
25192: PPUSH
25193: CALL_OW 337
// rolfHasVehicles := true ;
25197: LD_ADDR_EXP 16
25201: PUSH
25202: LD_INT 1
25204: ST_TO_ADDR
// for i in rolfSquad do
25205: LD_ADDR_VAR 0 1
25209: PUSH
25210: LD_EXP 51
25214: PUSH
25215: FOR_IN
25216: IFFALSE 25249
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
25218: LD_VAR 0 1
25222: PPUSH
25223: CALL_OW 310
25227: PPUSH
25228: LD_INT 8
25230: PPUSH
25231: CALL_OW 235
// SetSide ( i , 8 ) ;
25235: LD_VAR 0 1
25239: PPUSH
25240: LD_INT 8
25242: PPUSH
25243: CALL_OW 235
// end ;
25247: GO 25215
25249: POP
25250: POP
// wait ( 0 0$10 ) ;
25251: LD_INT 350
25253: PPUSH
25254: CALL_OW 67
// rolfAttack := true ;
25258: LD_ADDR_EXP 32
25262: PUSH
25263: LD_INT 1
25265: ST_TO_ADDR
// end ;
25266: PPOPN 2
25268: END
// every 0 0$1 trigger rolfAttack and omarAttack do
25269: LD_EXP 32
25273: IFFALSE 25281
25275: PUSH
25276: LD_EXP 23
25280: AND
25281: IFFALSE 25293
25283: GO 25285
25285: DISABLE
// ChangeMissionObjectives ( M6a ) ;
25286: LD_STRING M6a
25288: PPUSH
25289: CALL_OW 337
25293: END
// every 0 0$1 trigger leninSpotted do
25294: LD_EXP 14
25298: IFFALSE 25386
25300: GO 25302
25302: DISABLE
// begin wait ( 0 0$10 ) ;
25303: LD_INT 350
25305: PPUSH
25306: CALL_OW 67
// DialogueOn ;
25310: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
25314: LD_EXP 46
25318: PPUSH
25319: LD_STRING DA-Transmission-1
25321: PPUSH
25322: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
25326: LD_EXP 53
25330: PPUSH
25331: LD_STRING DMzw-Transmission-2
25333: PPUSH
25334: CALL_OW 94
// if gaidarKilled then
25338: LD_EXP 7
25342: IFFALSE 25358
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
25344: LD_EXP 53
25348: PPUSH
25349: LD_STRING DMzw-Transmission-3
25351: PPUSH
25352: CALL_OW 94
25356: GO 25370
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
25358: LD_EXP 53
25362: PPUSH
25363: LD_STRING DMzw-Transmission-a-3
25365: PPUSH
25366: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
25370: LD_EXP 34
25374: PPUSH
25375: LD_STRING DH-Transmission-4
25377: PPUSH
25378: CALL_OW 88
// DialogueOff ;
25382: CALL_OW 7
// end ;
25386: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
25387: LD_INT 22
25389: PUSH
25390: LD_INT 3
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 25
25399: PUSH
25400: LD_INT 9
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 101
25409: PUSH
25410: LD_INT 2
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: LIST
25421: PPUSH
25422: CALL_OW 69
25426: IFFALSE 25439
25428: PUSH
25429: LD_EXP 34
25433: PPUSH
25434: CALL_OW 302
25438: AND
25439: IFFALSE 25519
25441: GO 25443
25443: DISABLE
// begin wait ( 0 0$3 ) ;
25444: LD_INT 105
25446: PPUSH
25447: CALL_OW 67
// DialogueOn ;
25451: CALL_OW 6
// CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
25455: LD_INT 22
25457: PUSH
25458: LD_INT 3
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 25
25467: PUSH
25468: LD_INT 9
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 101
25477: PUSH
25478: LD_INT 2
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: LIST
25489: PPUSH
25490: CALL_OW 69
25494: PUSH
25495: LD_INT 1
25497: ARRAY
25498: PPUSH
25499: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
25503: LD_EXP 34
25507: PPUSH
25508: LD_STRING DH-Rubazooka-1
25510: PPUSH
25511: CALL_OW 88
// DialogueOff ;
25515: CALL_OW 7
// end ;
25519: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
25520: LD_INT 19
25522: PPUSH
25523: LD_INT 22
25525: PUSH
25526: LD_INT 3
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PPUSH
25533: CALL_OW 70
25537: IFFALSE 25545
25539: PUSH
25540: LD_EXP 28
25544: AND
25545: IFFALSE 25604
25547: GO 25549
25549: DISABLE
// begin DialogueOn ;
25550: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25554: LD_INT 19
25556: PPUSH
25557: LD_INT 22
25559: PUSH
25560: LD_INT 3
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PPUSH
25567: CALL_OW 70
25571: PPUSH
25572: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
25576: LD_EXP 34
25580: PPUSH
25581: LD_STRING DH-Ruattfirst-1
25583: PPUSH
25584: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
25588: LD_EXP 34
25592: PPUSH
25593: LD_STRING DH-Ruattfirst-2
25595: PPUSH
25596: CALL_OW 88
// DialogueOff ;
25600: CALL_OW 7
// end ;
25604: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
25605: LD_INT 19
25607: PPUSH
25608: LD_INT 22
25610: PUSH
25611: LD_INT 3
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PPUSH
25618: CALL_OW 70
25622: IFFALSE 25631
25624: PUSH
25625: LD_EXP 28
25629: NOT
25630: AND
25631: IFFALSE 25678
25633: GO 25635
25635: DISABLE
// begin DialogueOn ;
25636: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25640: LD_INT 19
25642: PPUSH
25643: LD_INT 22
25645: PUSH
25646: LD_INT 3
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PPUSH
25653: CALL_OW 70
25657: PPUSH
25658: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
25662: LD_EXP 34
25666: PPUSH
25667: LD_STRING DH-Ruattnext-1
25669: PPUSH
25670: CALL_OW 88
// DialogueOff ;
25674: CALL_OW 7
// end ;
25678: END
// every 0 0$3 trigger IsDead ( Morozov ) and IsOk ( Omar ) do
25679: LD_EXP 53
25683: PPUSH
25684: CALL_OW 301
25688: IFFALSE 25701
25690: PUSH
25691: LD_EXP 44
25695: PPUSH
25696: CALL_OW 302
25700: AND
25701: IFFALSE 25718
25703: GO 25705
25705: DISABLE
// SayRadio ( Omar , DOm-Morozov ) ;
25706: LD_EXP 44
25710: PPUSH
25711: LD_STRING DOm-Morozov
25713: PPUSH
25714: CALL_OW 94
25718: END
// every 0 0$1 trigger gameActive and GetResourceType ( GetBase ( arDepot ) , mat_oil ) <= 30 do
25719: LD_EXP 31
25723: IFFALSE 25748
25725: PUSH
25726: LD_EXP 48
25730: PPUSH
25731: CALL_OW 274
25735: PPUSH
25736: LD_INT 2
25738: PPUSH
25739: CALL_OW 275
25743: PUSH
25744: LD_INT 30
25746: LESSEQUAL
25747: AND
25748: IFFALSE 25838
25750: GO 25752
25752: DISABLE
// begin wait ( 0 0$10 ) ;
25753: LD_INT 350
25755: PPUSH
25756: CALL_OW 67
// DialogueOn ;
25760: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
25764: LD_EXP 34
25768: PPUSH
25769: LD_STRING DH-Fuel-1
25771: PPUSH
25772: CALL_OW 88
// if IsOk ( Givi ) then
25776: LD_EXP 35
25780: PPUSH
25781: CALL_OW 302
25785: IFFALSE 25823
// begin Say ( Givi , DG-Fuel-2 ) ;
25787: LD_EXP 35
25791: PPUSH
25792: LD_STRING DG-Fuel-2
25794: PPUSH
25795: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
25799: LD_EXP 35
25803: PPUSH
25804: LD_STRING DG-Fuel-3
25806: PPUSH
25807: CALL_OW 88
// Say ( Givi , DG-Fuel-4 ) ;
25811: LD_EXP 35
25815: PPUSH
25816: LD_STRING DG-Fuel-4
25818: PPUSH
25819: CALL_OW 88
// end ; DialogueOff ;
25823: CALL_OW 7
// Query ( QOil ) ;
25827: LD_STRING QOil
25829: PPUSH
25830: CALL_OW 97
// GoForOil ( ) ;
25834: CALL 8964 0 0
// end ;
25838: END
// every 0 0$1 trigger leninSpotted and omarAttack and rolfAttack do
25839: LD_EXP 14
25843: IFFALSE 25851
25845: PUSH
25846: LD_EXP 23
25850: AND
25851: IFFALSE 25859
25853: PUSH
25854: LD_EXP 32
25858: AND
25859: IFFALSE 26200
25861: GO 25863
25863: DISABLE
// begin if IsDead ( Morozov ) then
25864: LD_EXP 53
25868: PPUSH
25869: CALL_OW 301
25873: IFFALSE 25884
// wait ( 1 1$45 ) else
25875: LD_INT 3675
25877: PPUSH
25878: CALL_OW 67
25882: GO 25912
// wait ( [ 9 9$30 , 8 8$00 , 7 7$40 , 6 6$30 ] [ Difficulty ] ) ;
25884: LD_INT 19950
25886: PUSH
25887: LD_INT 16800
25889: PUSH
25890: LD_INT 16100
25892: PUSH
25893: LD_INT 13650
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: PUSH
25902: LD_OWVAR 67
25906: ARRAY
25907: PPUSH
25908: CALL_OW 67
// DialogueOn ;
25912: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
25916: LD_EXP 42
25920: PPUSH
25921: LD_STRING DShar-End-1
25923: PPUSH
25924: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
25928: LD_EXP 34
25932: PPUSH
25933: LD_STRING DH-End-2
25935: PPUSH
25936: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
25940: LD_EXP 42
25944: PPUSH
25945: LD_STRING DShar-End-3
25947: PPUSH
25948: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
25952: LD_EXP 34
25956: PPUSH
25957: LD_STRING DH-End-4
25959: PPUSH
25960: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
25964: LD_EXP 42
25968: PPUSH
25969: LD_STRING DShar-End-5
25971: PPUSH
25972: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
25976: LD_EXP 42
25980: PPUSH
25981: LD_STRING DShar-End-6
25983: PPUSH
25984: CALL_OW 94
// dwait ( 0 0$2 ) ;
25988: LD_INT 70
25990: PPUSH
25991: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
25995: LD_EXP 34
25999: PPUSH
26000: LD_STRING DH-End-7
26002: PPUSH
26003: CALL_OW 88
// DialogueOff ;
26007: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
26011: LD_STRING M6
26013: PPUSH
26014: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
26018: LD_INT 17
26020: PPUSH
26021: LD_INT 1
26023: PPUSH
26024: CALL_OW 424
// escapeAllowed := true ;
26028: LD_ADDR_EXP 24
26032: PUSH
26033: LD_INT 1
26035: ST_TO_ADDR
// wait ( 0 0$2 ) ;
26036: LD_INT 70
26038: PPUSH
26039: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
26043: LD_EXP 45
26047: PPUSH
26048: LD_STRING DKs-End-8
26050: PPUSH
26051: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
26055: LD_EXP 39
26059: PPUSH
26060: LD_STRING DK-End-10
26062: PPUSH
26063: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
26067: LD_EXP 45
26071: PPUSH
26072: LD_STRING DKs-End-9
26074: PPUSH
26075: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
26079: LD_EXP 41
26083: PPUSH
26084: LD_STRING DMar-End-11
26086: PPUSH
26087: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
26091: LD_STRING 05_DrugsTested
26093: PPUSH
26094: LD_EXP 1
26098: PPUSH
26099: CALL_OW 30
26103: IFFALSE 26117
// Say ( Mike , DM-End-12 ) ;
26105: LD_EXP 36
26109: PPUSH
26110: LD_STRING DM-End-12
26112: PPUSH
26113: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
26117: LD_EXP 43
26121: PPUSH
26122: LD_STRING DO-End-13
26124: PPUSH
26125: CALL_OW 88
// if IsOk ( Sophia ) then
26129: LD_EXP 40
26133: PPUSH
26134: CALL_OW 302
26138: IFFALSE 26164
// begin Say ( Sophia , DS-End-15 ) ;
26140: LD_EXP 40
26144: PPUSH
26145: LD_STRING DS-End-15
26147: PPUSH
26148: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
26152: LD_EXP 39
26156: PPUSH
26157: LD_STRING DK-End-16
26159: PPUSH
26160: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
26164: LD_EXP 35
26168: PPUSH
26169: LD_STRING DG-End-17
26171: PPUSH
26172: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
26176: LD_EXP 35
26180: PPUSH
26181: LD_STRING DG-End-18
26183: PPUSH
26184: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
26188: LD_EXP 35
26192: PPUSH
26193: LD_STRING DG-End-19
26195: PPUSH
26196: CALL_OW 88
// end ;
26200: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
26201: LD_EXP 24
26205: IFFALSE 26344
26207: GO 26209
26209: DISABLE
26210: LD_INT 0
26212: PPUSH
26213: PPUSH
// begin repeat wait ( 0 0$1 ) ;
26214: LD_INT 35
26216: PPUSH
26217: CALL_OW 67
// display_strings := [ #X106-2 , escapeTimer ] ;
26221: LD_ADDR_OWVAR 47
26225: PUSH
26226: LD_STRING #X106-2
26228: PUSH
26229: LD_EXP 25
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
26238: LD_ADDR_EXP 25
26242: PUSH
26243: LD_EXP 25
26247: PUSH
26248: LD_INT 35
26250: MINUS
26251: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
26252: LD_ADDR_VAR 0 2
26256: PUSH
26257: LD_INT 17
26259: PPUSH
26260: LD_INT 22
26262: PUSH
26263: LD_INT 2
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 21
26272: PUSH
26273: LD_INT 1
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: LD_INT 23
26282: PUSH
26283: LD_INT 2
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: LIST
26294: PPUSH
26295: CALL_OW 71
26299: ST_TO_ADDR
// if not outsiders then
26300: LD_VAR 0 2
26304: NOT
26305: IFFALSE 26321
// begin escapeAllowed := false ;
26307: LD_ADDR_EXP 24
26311: PUSH
26312: LD_INT 0
26314: ST_TO_ADDR
// MissionWin ;
26315: CALL 26347 0 0
// exit ;
26319: GO 26344
// end ; if escapeTimer <= 0 0$00 then
26321: LD_EXP 25
26325: PUSH
26326: LD_INT 0
26328: LESSEQUAL
26329: IFFALSE 26340
// begin YouLost ( TimeOut ) ;
26331: LD_STRING TimeOut
26333: PPUSH
26334: CALL_OW 104
// exit ;
26338: GO 26344
// end ; until false ;
26340: LD_INT 0
26342: IFFALSE 26214
// end ;
26344: PPOPN 2
26346: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
26347: LD_INT 0
26349: PPUSH
26350: PPUSH
26351: PPUSH
26352: PPUSH
26353: PPUSH
// if tick <= 55 55$00 then
26354: LD_OWVAR 1
26358: PUSH
26359: LD_INT 115500
26361: LESSEQUAL
26362: IFFALSE 26371
// SetAchievement ( ACH_HSPEED_6 ) ;
26364: LD_STRING ACH_HSPEED_6
26366: PPUSH
26367: CALL_OW 543
// Say ( Heike , DH-End-20 ) ;
26371: LD_EXP 34
26375: PPUSH
26376: LD_STRING DH-End-20
26378: PPUSH
26379: CALL_OW 88
// if rolfDied then
26383: LD_EXP 13
26387: IFFALSE 26402
// AddMedal ( med1 , - 1 ) else
26389: LD_STRING med1
26391: PPUSH
26392: LD_INT 1
26394: NEG
26395: PPUSH
26396: CALL_OW 101
26400: GO 26432
// if not canRolfJoin then
26402: LD_EXP 29
26406: NOT
26407: IFFALSE 26422
// AddMedal ( med1 , - 2 ) else
26409: LD_STRING med1
26411: PPUSH
26412: LD_INT 2
26414: NEG
26415: PPUSH
26416: CALL_OW 101
26420: GO 26432
// AddMedal ( med1 , 1 ) ;
26422: LD_STRING med1
26424: PPUSH
26425: LD_INT 1
26427: PPUSH
26428: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
26432: LD_EXP 22
26436: IFFALSE 26444
26438: PUSH
26439: LD_EXP 16
26443: AND
26444: IFFALSE 26458
// AddMedal ( med2 , 1 ) else
26446: LD_STRING med2
26448: PPUSH
26449: LD_INT 1
26451: PPUSH
26452: CALL_OW 101
26456: GO 26507
// if omarHasVehicles then
26458: LD_EXP 22
26462: IFFALSE 26477
// AddMedal ( med2 , - 1 ) else
26464: LD_STRING med2
26466: PPUSH
26467: LD_INT 1
26469: NEG
26470: PPUSH
26471: CALL_OW 101
26475: GO 26507
// if rolfHasVehicles then
26477: LD_EXP 16
26481: IFFALSE 26496
// AddMedal ( med2 , - 2 ) else
26483: LD_STRING med2
26485: PPUSH
26486: LD_INT 2
26488: NEG
26489: PPUSH
26490: CALL_OW 101
26494: GO 26507
// AddMedal ( med2 , - 3 ) ;
26496: LD_STRING med2
26498: PPUSH
26499: LD_INT 3
26501: NEG
26502: PPUSH
26503: CALL_OW 101
// if ruLoseCounter >= [ 20 , 30 , 40 , 50 ] [ Difficulty ] and heikeLoseCounter = 0 then
26507: LD_EXP 5
26511: PUSH
26512: LD_INT 20
26514: PUSH
26515: LD_INT 30
26517: PUSH
26518: LD_INT 40
26520: PUSH
26521: LD_INT 50
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: PUSH
26530: LD_OWVAR 67
26534: ARRAY
26535: GREATEREQUAL
26536: IFFALSE 26548
26538: PUSH
26539: LD_EXP 26
26543: PUSH
26544: LD_INT 0
26546: EQUAL
26547: AND
26548: IFFALSE 26562
// AddMedal ( med3 , 1 ) else
26550: LD_STRING med3
26552: PPUSH
26553: LD_INT 1
26555: PPUSH
26556: CALL_OW 101
26560: GO 26592
// if heikeLoseCounter then
26562: LD_EXP 26
26566: IFFALSE 26581
// AddMedal ( med3 , - 1 ) else
26568: LD_STRING med3
26570: PPUSH
26571: LD_INT 1
26573: NEG
26574: PPUSH
26575: CALL_OW 101
26579: GO 26592
// AddMedal ( med3 , - 2 ) ;
26581: LD_STRING med3
26583: PPUSH
26584: LD_INT 2
26586: NEG
26587: PPUSH
26588: CALL_OW 101
// GiveMedals ( MAIN ) ;
26592: LD_STRING MAIN
26594: PPUSH
26595: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
26599: LD_INT 22
26601: PUSH
26602: LD_INT 2
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 23
26611: PUSH
26612: LD_INT 2
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 21
26621: PUSH
26622: LD_INT 1
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: LIST
26633: PPUSH
26634: CALL_OW 69
26638: PPUSH
26639: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
26643: LD_EXP 34
26647: PPUSH
26648: LD_STRING 06_Heike
26650: PPUSH
26651: CALL_OW 38
// if Aviradze then
26655: LD_EXP 46
26659: IFFALSE 26673
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
26661: LD_EXP 46
26665: PPUSH
26666: LD_STRING 06_Aviradze
26668: PPUSH
26669: CALL_OW 38
// if Ibrahim then
26673: LD_EXP 37
26677: IFFALSE 26691
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
26679: LD_EXP 37
26683: PPUSH
26684: LD_STRING 06_Ibrahim
26686: PPUSH
26687: CALL_OW 38
// if Kamil then
26691: LD_EXP 38
26695: IFFALSE 26709
// SaveCharacters ( Kamil , 06_Kamil ) ;
26697: LD_EXP 38
26701: PPUSH
26702: LD_STRING 06_Kamil
26704: PPUSH
26705: CALL_OW 38
// if Sophia then
26709: LD_EXP 40
26713: IFFALSE 26727
// SaveCharacters ( Sophia , 06_Sophia ) ;
26715: LD_EXP 40
26719: PPUSH
26720: LD_STRING 06_Sophia
26722: PPUSH
26723: CALL_OW 38
// if Kaia then
26727: LD_EXP 39
26731: IFFALSE 26745
// SaveCharacters ( Kaia , 06_Kaia ) ;
26733: LD_EXP 39
26737: PPUSH
26738: LD_STRING 06_Kaia
26740: PPUSH
26741: CALL_OW 38
// if Givi then
26745: LD_EXP 35
26749: IFFALSE 26763
// SaveCharacters ( Givi , 06_Givi ) ;
26751: LD_EXP 35
26755: PPUSH
26756: LD_STRING 06_Givi
26758: PPUSH
26759: CALL_OW 38
// if Olaf then
26763: LD_EXP 43
26767: IFFALSE 26781
// SaveCharacters ( Olaf , 06_Olaf ) ;
26769: LD_EXP 43
26773: PPUSH
26774: LD_STRING 06_Olaf
26776: PPUSH
26777: CALL_OW 38
// if Mike then
26781: LD_EXP 36
26785: IFFALSE 26799
// SaveCharacters ( Mike , 06_Mike ) ;
26787: LD_EXP 36
26791: PPUSH
26792: LD_STRING 06_Mike
26794: PPUSH
26795: CALL_OW 38
// if Markov then
26799: LD_EXP 41
26803: IFFALSE 26817
// SaveCharacters ( Markov , 06_Markov ) ;
26805: LD_EXP 41
26809: PPUSH
26810: LD_STRING 06_Markov
26812: PPUSH
26813: CALL_OW 38
// if Kurt then
26817: LD_EXP 45
26821: IFFALSE 26835
// SaveCharacters ( Kurt , 06_Kurt ) ;
26823: LD_EXP 45
26827: PPUSH
26828: LD_STRING 06_Kurt
26830: PPUSH
26831: CALL_OW 38
// if heikeSecondSquad then
26835: LD_EXP 49
26839: IFFALSE 26853
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
26841: LD_EXP 49
26845: PPUSH
26846: LD_STRING 06_others
26848: PPUSH
26849: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
26853: LD_ADDR_VAR 0 3
26857: PUSH
26858: LD_INT 22
26860: PUSH
26861: LD_INT 2
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 23
26870: PUSH
26871: LD_INT 0
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PPUSH
26882: CALL_OW 69
26886: ST_TO_ADDR
// if tmp then
26887: LD_VAR 0 3
26891: IFFALSE 26905
// SaveCharacters ( tmp , 06_apes ) ;
26893: LD_VAR 0 3
26897: PPUSH
26898: LD_STRING 06_apes
26900: PPUSH
26901: CALL_OW 38
// if Rolf then
26905: LD_EXP 47
26909: IFFALSE 26960
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
26911: LD_EXP 47
26915: PPUSH
26916: LD_STRING 06_Rolf
26918: PPUSH
26919: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
26923: LD_STRING enableBioCharacter(BIO_ROLF)
26925: PPUSH
26926: CALL_OW 559
// if rolfSquad diff Rolf then
26930: LD_EXP 51
26934: PUSH
26935: LD_EXP 47
26939: DIFF
26940: IFFALSE 26960
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
26942: LD_EXP 51
26946: PUSH
26947: LD_EXP 47
26951: DIFF
26952: PPUSH
26953: LD_STRING 06_RolfSquad
26955: PPUSH
26956: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
26960: LD_ADDR_VAR 0 3
26964: PUSH
26965: LD_INT 17
26967: PPUSH
26968: LD_INT 21
26970: PUSH
26971: LD_INT 2
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PPUSH
26978: CALL_OW 70
26982: ST_TO_ADDR
// if tmp then
26983: LD_VAR 0 3
26987: IFFALSE 27281
// begin tmp2 := [ ] ;
26989: LD_ADDR_VAR 0 4
26993: PUSH
26994: EMPTY
26995: ST_TO_ADDR
// for i in tmp do
26996: LD_ADDR_VAR 0 2
27000: PUSH
27001: LD_VAR 0 3
27005: PUSH
27006: FOR_IN
27007: IFFALSE 27267
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
27009: LD_VAR 0 2
27013: PPUSH
27014: CALL_OW 264
27018: PUSH
27019: LD_INT 32
27021: PUSH
27022: LD_INT 12
27024: PUSH
27025: LD_INT 51
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: LIST
27032: IN
27033: IFFALSE 27170
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
27035: LD_ADDR_VAR 0 5
27039: PUSH
27040: LD_VAR 0 2
27044: PPUSH
27045: LD_INT 1
27047: PPUSH
27048: CALL_OW 289
27052: PUSH
27053: LD_VAR 0 2
27057: PPUSH
27058: LD_INT 2
27060: PPUSH
27061: CALL_OW 289
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
27070: LD_ADDR_VAR 0 4
27074: PUSH
27075: LD_VAR 0 4
27079: PPUSH
27080: LD_VAR 0 4
27084: PUSH
27085: LD_INT 1
27087: PLUS
27088: PPUSH
27089: LD_VAR 0 2
27093: PPUSH
27094: CALL_OW 265
27098: PUSH
27099: LD_VAR 0 2
27103: PPUSH
27104: CALL_OW 262
27108: PUSH
27109: LD_VAR 0 2
27113: PPUSH
27114: CALL_OW 263
27118: PUSH
27119: LD_VAR 0 2
27123: PPUSH
27124: CALL_OW 264
27128: PUSH
27129: LD_VAR 0 2
27133: PPUSH
27134: CALL_OW 248
27138: PUSH
27139: LD_VAR 0 2
27143: PPUSH
27144: CALL_OW 256
27148: PUSH
27149: LD_VAR 0 5
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: PPUSH
27163: CALL_OW 1
27167: ST_TO_ADDR
// end else
27168: GO 27265
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
27170: LD_ADDR_VAR 0 4
27174: PUSH
27175: LD_VAR 0 4
27179: PPUSH
27180: LD_VAR 0 4
27184: PUSH
27185: LD_INT 1
27187: PLUS
27188: PPUSH
27189: LD_VAR 0 2
27193: PPUSH
27194: CALL_OW 265
27198: PUSH
27199: LD_VAR 0 2
27203: PPUSH
27204: CALL_OW 262
27208: PUSH
27209: LD_VAR 0 2
27213: PPUSH
27214: CALL_OW 263
27218: PUSH
27219: LD_VAR 0 2
27223: PPUSH
27224: CALL_OW 264
27228: PUSH
27229: LD_VAR 0 2
27233: PPUSH
27234: CALL_OW 248
27238: PUSH
27239: LD_VAR 0 2
27243: PPUSH
27244: CALL_OW 256
27248: PUSH
27249: EMPTY
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: PPUSH
27260: CALL_OW 1
27264: ST_TO_ADDR
27265: GO 27006
27267: POP
27268: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
27269: LD_VAR 0 4
27273: PPUSH
27274: LD_STRING 06_Vehicles
27276: PPUSH
27277: CALL_OW 39
// end ; YouWin ;
27281: CALL_OW 103
// end ; end_of_file
27285: LD_VAR 0 1
27289: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
27290: LD_INT 0
27292: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
27293: LD_VAR 0 1
27297: PPUSH
27298: LD_VAR 0 2
27302: PPUSH
27303: CALL 89508 0 2
// if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
27307: LD_VAR 0 1
27311: PPUSH
27312: CALL_OW 255
27316: PUSH
27317: LD_INT 2
27319: EQUAL
27320: IFFALSE 27328
27322: PUSH
27323: LD_OWVAR 52
27327: AND
27328: IFFALSE 27345
27330: PUSH
27331: LD_VAR 0 1
27335: PPUSH
27336: CALL_OW 263
27340: PUSH
27341: LD_INT 1
27343: EQUAL
27344: AND
27345: IFFALSE 27400
// begin driver := IsDrivenBy ( vehicle ) ;
27347: LD_ADDR_VAR 0 3
27351: PUSH
27352: LD_VAR 0 1
27356: PPUSH
27357: CALL_OW 311
27361: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
27362: LD_VAR 0 1
27366: PPUSH
27367: LD_INT 211
27369: PPUSH
27370: LD_INT 101
27372: PPUSH
27373: CALL_OW 111
// AddComExitVehicle ( driver ) ;
27377: LD_VAR 0 3
27381: PPUSH
27382: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27386: LD_VAR 0 3
27390: PPUSH
27391: LD_VAR 0 2
27395: PPUSH
27396: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
27400: LD_VAR 0 1
27404: PPUSH
27405: CALL_OW 255
27409: PUSH
27410: LD_INT 3
27412: EQUAL
27413: IFFALSE 27444
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
27415: LD_ADDR_EXP 60
27419: PUSH
27420: LD_EXP 60
27424: PPUSH
27425: LD_EXP 60
27429: PUSH
27430: LD_INT 1
27432: PLUS
27433: PPUSH
27434: LD_VAR 0 1
27438: PPUSH
27439: CALL_OW 1
27443: ST_TO_ADDR
// end ;
27444: PPOPN 3
27446: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
27447: LD_VAR 0 1
27451: PPUSH
27452: CALL_OW 255
27456: PUSH
27457: LD_INT 8
27459: EQUAL
27460: IFFALSE 27477
27462: PUSH
27463: LD_VAR 0 1
27467: PPUSH
27468: CALL_OW 266
27472: PUSH
27473: LD_INT 4
27475: EQUAL
27476: AND
27477: IFFALSE 27488
// ComUpgrade ( b ) ;
27479: LD_VAR 0 1
27483: PPUSH
27484: CALL_OW 146
// end ;
27488: PPOPN 1
27490: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
27491: LD_VAR 0 1
27495: PPUSH
27496: CALL 89450 0 1
// if un = Heike then
27500: LD_VAR 0 1
27504: PUSH
27505: LD_EXP 34
27509: EQUAL
27510: IFFALSE 27519
// YouLost ( Heike ) ;
27512: LD_STRING Heike
27514: PPUSH
27515: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
27519: LD_VAR 0 1
27523: PUSH
27524: LD_INT 22
27526: PUSH
27527: LD_INT 2
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 21
27536: PUSH
27537: LD_INT 1
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 23
27546: PUSH
27547: LD_INT 2
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: LIST
27558: PPUSH
27559: CALL_OW 69
27563: IN
27564: IFFALSE 27580
// heikeLoseCounter := heikeLoseCounter + 1 ;
27566: LD_ADDR_EXP 26
27570: PUSH
27571: LD_EXP 26
27575: PUSH
27576: LD_INT 1
27578: PLUS
27579: ST_TO_ADDR
// if un = arDepot then
27580: LD_VAR 0 1
27584: PUSH
27585: LD_EXP 48
27589: EQUAL
27590: IFFALSE 27599
// YouLost ( Base ) ;
27592: LD_STRING Base
27594: PPUSH
27595: CALL_OW 104
// if un = Rolf then
27599: LD_VAR 0 1
27603: PUSH
27604: LD_EXP 47
27608: EQUAL
27609: IFFALSE 27619
// rolfDied := true ;
27611: LD_ADDR_EXP 13
27615: PUSH
27616: LD_INT 1
27618: ST_TO_ADDR
// if un in rolfSquad then
27619: LD_VAR 0 1
27623: PUSH
27624: LD_EXP 51
27628: IN
27629: IFFALSE 27647
// rolfSquad := rolfSquad diff un ;
27631: LD_ADDR_EXP 51
27635: PUSH
27636: LD_EXP 51
27640: PUSH
27641: LD_VAR 0 1
27645: DIFF
27646: ST_TO_ADDR
// if un in omarSquad then
27647: LD_VAR 0 1
27651: PUSH
27652: LD_EXP 52
27656: IN
27657: IFFALSE 27675
// omarSquad := omarSquad diff un ;
27659: LD_ADDR_EXP 52
27663: PUSH
27664: LD_EXP 52
27668: PUSH
27669: LD_VAR 0 1
27673: DIFF
27674: ST_TO_ADDR
// if GetSide ( un ) = 3 then
27675: LD_VAR 0 1
27679: PPUSH
27680: CALL_OW 255
27684: PUSH
27685: LD_INT 3
27687: EQUAL
27688: IFFALSE 27704
// ruLoseCounter := ruLoseCounter + 1 ;
27690: LD_ADDR_EXP 5
27694: PUSH
27695: LD_EXP 5
27699: PUSH
27700: LD_INT 1
27702: PLUS
27703: ST_TO_ADDR
// if un in ruAttackers then
27704: LD_VAR 0 1
27708: PUSH
27709: LD_EXP 61
27713: IN
27714: IFFALSE 27732
// ruAttackers := ruAttackers diff un ;
27716: LD_ADDR_EXP 61
27720: PUSH
27721: LD_EXP 61
27725: PUSH
27726: LD_VAR 0 1
27730: DIFF
27731: ST_TO_ADDR
// end ;
27732: PPOPN 1
27734: END
// on EnterVehicle ( vehicle , unit ) do begin if GetSide ( unit ) in [ 5 , 8 ] and GetLives ( unit ) < 1000 then
27735: LD_VAR 0 2
27739: PPUSH
27740: CALL_OW 255
27744: PUSH
27745: LD_INT 5
27747: PUSH
27748: LD_INT 8
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: IN
27755: IFFALSE 27772
27757: PUSH
27758: LD_VAR 0 2
27762: PPUSH
27763: CALL_OW 256
27767: PUSH
27768: LD_INT 1000
27770: LESS
27771: AND
27772: IFFALSE 27786
// SetLives ( unit , 1000 ) ;
27774: LD_VAR 0 2
27778: PPUSH
27779: LD_INT 1000
27781: PPUSH
27782: CALL_OW 234
// end ;
27786: PPOPN 2
27788: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
27789: LD_INT 0
27791: PPUSH
27792: PPUSH
27793: PPUSH
27794: PPUSH
// begin if GetSide ( vehicle ) = 8 and rolfAttack then
27795: LD_VAR 0 2
27799: PPUSH
27800: CALL_OW 255
27804: PUSH
27805: LD_INT 8
27807: EQUAL
27808: IFFALSE 27816
27810: PUSH
27811: LD_EXP 32
27815: AND
27816: IFFALSE 27833
// ComMoveXY ( un , 221 , 161 ) ;
27818: LD_VAR 0 1
27822: PPUSH
27823: LD_INT 221
27825: PPUSH
27826: LD_INT 161
27828: PPUSH
27829: CALL_OW 111
// if GetSide ( vehicle ) = 5 and omarAttack then
27833: LD_VAR 0 2
27837: PPUSH
27838: CALL_OW 255
27842: PUSH
27843: LD_INT 5
27845: EQUAL
27846: IFFALSE 27854
27848: PUSH
27849: LD_EXP 23
27853: AND
27854: IFFALSE 27965
// begin ComMoveXY ( un , 333 , 233 ) ;
27856: LD_VAR 0 1
27860: PPUSH
27861: LD_INT 333
27863: PPUSH
27864: LD_INT 233
27866: PPUSH
27867: CALL_OW 111
// if not HexInfo ( 334 , 241 ) or not GetBType ( HexInfo ( 334 , 241 ) ) = b_armoury then
27871: LD_INT 334
27873: PPUSH
27874: LD_INT 241
27876: PPUSH
27877: CALL_OW 428
27881: NOT
27882: IFTRUE 27906
27884: PUSH
27885: LD_INT 334
27887: PPUSH
27888: LD_INT 241
27890: PPUSH
27891: CALL_OW 428
27895: PPUSH
27896: CALL_OW 266
27900: PUSH
27901: LD_INT 4
27903: EQUAL
27904: NOT
27905: OR
27906: IFFALSE 27910
// exit ;
27908: GO 28494
// AddComEnterUnit ( un , HexInfo ( 334 , 241 ) ) ;
27910: LD_VAR 0 1
27914: PPUSH
27915: LD_INT 334
27917: PPUSH
27918: LD_INT 241
27920: PPUSH
27921: CALL_OW 428
27925: PPUSH
27926: CALL_OW 180
// AddComChangeProfession ( un , class_soldier ) ;
27930: LD_VAR 0 1
27934: PPUSH
27935: LD_INT 1
27937: PPUSH
27938: CALL_OW 183
// AddComExitBuilding ( un ) ;
27942: LD_VAR 0 1
27946: PPUSH
27947: CALL_OW 182
// AddComMoveUnit ( un , Omar ) ;
27951: LD_VAR 0 1
27955: PPUSH
27956: LD_EXP 44
27960: PPUSH
27961: CALL_OW 172
// end ; if GetSide ( un ) = 3 and not un in ruAttackers then
27965: LD_VAR 0 1
27969: PPUSH
27970: CALL_OW 255
27974: PUSH
27975: LD_INT 3
27977: EQUAL
27978: IFFALSE 27993
27980: PUSH
27981: LD_VAR 0 1
27985: PUSH
27986: LD_EXP 61
27990: IN
27991: NOT
27992: AND
27993: IFFALSE 28494
// begin if not IsInArea ( un , ruMainBase ) then
27995: LD_VAR 0 1
27999: PPUSH
28000: LD_INT 10
28002: PPUSH
28003: CALL_OW 308
28007: NOT
28008: IFFALSE 28025
// ComMoveXY ( un , 62 , 98 ) ;
28010: LD_VAR 0 1
28014: PPUSH
28015: LD_INT 62
28017: PPUSH
28018: LD_INT 98
28020: PPUSH
28021: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28025: LD_INT 35
28027: PPUSH
28028: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
28032: LD_VAR 0 1
28036: PPUSH
28037: CALL_OW 302
28041: NOT
28042: IFTRUE 28058
28044: PUSH
28045: LD_VAR 0 1
28049: PPUSH
28050: LD_INT 10
28052: PPUSH
28053: CALL_OW 308
28057: OR
28058: IFFALSE 28025
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
28060: LD_ADDR_EXP 59
28064: PUSH
28065: LD_EXP 59
28069: PPUSH
28070: LD_EXP 59
28074: PUSH
28075: LD_INT 1
28077: PLUS
28078: PPUSH
28079: LD_VAR 0 1
28083: PPUSH
28084: CALL_OW 1
28088: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
28089: LD_ADDR_VAR 0 8
28093: PUSH
28094: LD_INT 72
28096: PUSH
28097: LD_INT 12
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: ST_TO_ADDR
// if tmp then
28104: LD_VAR 0 8
28108: IFFALSE 28223
// for i in tmp do
28110: LD_ADDR_VAR 0 5
28114: PUSH
28115: LD_VAR 0 8
28119: PUSH
28120: FOR_IN
28121: IFFALSE 28221
// if UnitsInside ( i ) < 6 then
28123: LD_VAR 0 5
28127: PPUSH
28128: CALL_OW 313
28132: PUSH
28133: LD_INT 6
28135: LESS
28136: IFFALSE 28219
// begin AddComEnterUnit ( un , i ) ;
28138: LD_VAR 0 1
28142: PPUSH
28143: LD_VAR 0 5
28147: PPUSH
28148: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
28152: LD_VAR 0 8
28156: PPUSH
28157: LD_INT 22
28159: PUSH
28160: LD_INT 23
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 1
28169: PPUSH
28170: LD_INT 2
28172: PPUSH
28173: CALL_OW 12
28177: ARRAY
28178: PPUSH
28179: LD_INT 1
28181: PPUSH
28182: LD_INT 1
28184: PPUSH
28185: LD_INT 44
28187: PUSH
28188: LD_INT 46
28190: PUSH
28191: LD_INT 47
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 1
28201: PPUSH
28202: LD_INT 3
28204: PPUSH
28205: CALL_OW 12
28209: ARRAY
28210: PPUSH
28211: CALL_OW 185
// exit ;
28215: POP
28216: POP
28217: GO 28494
// end ;
28219: GO 28120
28221: POP
28222: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28223: LD_ADDR_VAR 0 8
28227: PUSH
28228: LD_INT 10
28230: PPUSH
28231: LD_INT 22
28233: PUSH
28234: LD_INT 3
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 50
28243: PUSH
28244: EMPTY
28245: LIST
28246: PUSH
28247: LD_INT 2
28249: PUSH
28250: LD_INT 30
28252: PUSH
28253: LD_INT 4
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 30
28262: PUSH
28263: LD_INT 5
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: LD_INT 30
28272: PUSH
28273: LD_INT 32
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 30
28282: PUSH
28283: LD_INT 31
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: LIST
28301: PPUSH
28302: CALL_OW 70
28306: ST_TO_ADDR
// if not tmp then
28307: LD_VAR 0 8
28311: NOT
28312: IFFALSE 28331
// begin ComMoveXY ( un , 83 , 133 ) ;
28314: LD_VAR 0 1
28318: PPUSH
28319: LD_INT 83
28321: PPUSH
28322: LD_INT 133
28324: PPUSH
28325: CALL_OW 111
// exit ;
28329: GO 28494
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
28331: LD_ADDR_VAR 0 6
28335: PUSH
28336: LD_VAR 0 1
28340: PPUSH
28341: LD_VAR 0 8
28345: PPUSH
28346: LD_INT 1
28348: PPUSH
28349: LD_INT 1
28351: PPUSH
28352: CALL 35241 0 4
28356: PUSH
28357: FOR_IN
28358: IFFALSE 28492
// begin case GetBType ( b ) of b_armoury , b_barracks :
28360: LD_VAR 0 6
28364: PPUSH
28365: CALL_OW 266
28369: PUSH
28370: LD_INT 4
28372: DOUBLE
28373: EQUAL
28374: IFTRUE 28384
28376: LD_INT 5
28378: DOUBLE
28379: EQUAL
28380: IFTRUE 28384
28382: GO 28395
28384: POP
// p := 6 ; b_breastwork , b_bunker :
28385: LD_ADDR_VAR 0 7
28389: PUSH
28390: LD_INT 6
28392: ST_TO_ADDR
28393: GO 28421
28395: LD_INT 31
28397: DOUBLE
28398: EQUAL
28399: IFTRUE 28409
28401: LD_INT 32
28403: DOUBLE
28404: EQUAL
28405: IFTRUE 28409
28407: GO 28420
28409: POP
// p := 1 ; end ;
28410: LD_ADDR_VAR 0 7
28414: PUSH
28415: LD_INT 1
28417: ST_TO_ADDR
28418: GO 28421
28420: POP
// if UnitsInside ( b ) < p then
28421: LD_VAR 0 6
28425: PPUSH
28426: CALL_OW 313
28430: PUSH
28431: LD_VAR 0 7
28435: LESS
28436: IFFALSE 28490
// begin ComEnterUnit ( un , b ) ;
28438: LD_VAR 0 1
28442: PPUSH
28443: LD_VAR 0 6
28447: PPUSH
28448: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
28452: LD_VAR 0 6
28456: PPUSH
28457: CALL_OW 266
28461: PUSH
28462: LD_INT 4
28464: PUSH
28465: LD_INT 5
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: IN
28472: IFFALSE 28486
// AddComChangeProfession ( un , class_soldier ) ;
28474: LD_VAR 0 1
28478: PPUSH
28479: LD_INT 1
28481: PPUSH
28482: CALL_OW 183
// exit ;
28486: POP
28487: POP
28488: GO 28494
// end ; end ;
28490: GO 28357
28492: POP
28493: POP
// end ; end ;
28494: PPOPN 8
28496: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
28497: LD_INT 0
28499: PPUSH
28500: PPUSH
28501: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
28502: LD_VAR 0 2
28506: PPUSH
28507: CALL_OW 255
28511: PUSH
28512: LD_INT 3
28514: EQUAL
28515: IFFALSE 28532
28517: PUSH
28518: LD_VAR 0 2
28522: PPUSH
28523: CALL_OW 257
28527: PUSH
28528: LD_INT 1
28530: EQUAL
28531: AND
28532: IFFALSE 28547
28534: PUSH
28535: LD_VAR 0 2
28539: PUSH
28540: LD_EXP 59
28544: IN
28545: NOT
28546: AND
28547: IFFALSE 28862
// begin ComMoveToArea ( un , ruMainBase ) ;
28549: LD_VAR 0 2
28553: PPUSH
28554: LD_INT 10
28556: PPUSH
28557: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
28561: LD_INT 35
28563: PPUSH
28564: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
28568: LD_VAR 0 2
28572: PPUSH
28573: CALL_OW 302
28577: NOT
28578: IFTRUE 28594
28580: PUSH
28581: LD_VAR 0 2
28585: PPUSH
28586: LD_INT 10
28588: PPUSH
28589: CALL_OW 308
28593: OR
28594: IFFALSE 28561
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
28596: LD_ADDR_EXP 59
28600: PUSH
28601: LD_EXP 59
28605: PPUSH
28606: LD_EXP 59
28610: PUSH
28611: LD_INT 1
28613: PLUS
28614: PPUSH
28615: LD_VAR 0 2
28619: PPUSH
28620: CALL_OW 1
28624: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28625: LD_ADDR_VAR 0 4
28629: PUSH
28630: LD_INT 10
28632: PPUSH
28633: LD_INT 22
28635: PUSH
28636: LD_INT 3
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: LD_INT 50
28645: PUSH
28646: EMPTY
28647: LIST
28648: PUSH
28649: LD_INT 2
28651: PUSH
28652: LD_INT 30
28654: PUSH
28655: LD_INT 4
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 30
28664: PUSH
28665: LD_INT 5
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 30
28674: PUSH
28675: LD_INT 32
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 30
28684: PUSH
28685: LD_INT 31
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: LIST
28703: PPUSH
28704: CALL_OW 70
28708: ST_TO_ADDR
// if not tmp then
28709: LD_VAR 0 4
28713: NOT
28714: IFFALSE 28733
// begin ComMoveXY ( un , 83 , 133 ) ;
28716: LD_VAR 0 2
28720: PPUSH
28721: LD_INT 83
28723: PPUSH
28724: LD_INT 133
28726: PPUSH
28727: CALL_OW 111
// exit ;
28731: GO 29113
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
28733: LD_ADDR_VAR 0 5
28737: PUSH
28738: LD_VAR 0 2
28742: PPUSH
28743: LD_VAR 0 4
28747: PPUSH
28748: LD_INT 1
28750: PPUSH
28751: LD_INT 1
28753: PPUSH
28754: CALL 35241 0 4
28758: PUSH
28759: FOR_IN
28760: IFFALSE 28860
// begin case GetBType ( b ) of b_armoury , b_barracks :
28762: LD_VAR 0 5
28766: PPUSH
28767: CALL_OW 266
28771: PUSH
28772: LD_INT 4
28774: DOUBLE
28775: EQUAL
28776: IFTRUE 28786
28778: LD_INT 5
28780: DOUBLE
28781: EQUAL
28782: IFTRUE 28786
28784: GO 28797
28786: POP
// p := 6 ; b_breastwork , b_bunker :
28787: LD_ADDR_VAR 0 3
28791: PUSH
28792: LD_INT 6
28794: ST_TO_ADDR
28795: GO 28823
28797: LD_INT 31
28799: DOUBLE
28800: EQUAL
28801: IFTRUE 28811
28803: LD_INT 32
28805: DOUBLE
28806: EQUAL
28807: IFTRUE 28811
28809: GO 28822
28811: POP
// p := 1 ; end ;
28812: LD_ADDR_VAR 0 3
28816: PUSH
28817: LD_INT 1
28819: ST_TO_ADDR
28820: GO 28823
28822: POP
// if UnitsInside ( b ) < p then
28823: LD_VAR 0 5
28827: PPUSH
28828: CALL_OW 313
28832: PUSH
28833: LD_VAR 0 3
28837: LESS
28838: IFFALSE 28858
// begin ComEnterUnit ( un , b ) ;
28840: LD_VAR 0 2
28844: PPUSH
28845: LD_VAR 0 5
28849: PPUSH
28850: CALL_OW 120
// exit ;
28854: POP
28855: POP
28856: GO 29113
// end ; end ;
28858: GO 28759
28860: POP
28861: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
28862: LD_VAR 0 2
28866: PUSH
28867: LD_EXP 59
28871: IN
28872: IFFALSE 28889
28874: PUSH
28875: LD_VAR 0 2
28879: PPUSH
28880: CALL_OW 257
28884: PUSH
28885: LD_INT 1
28887: EQUAL
28888: AND
28889: IFFALSE 29113
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28891: LD_ADDR_VAR 0 4
28895: PUSH
28896: LD_INT 10
28898: PPUSH
28899: LD_INT 22
28901: PUSH
28902: LD_INT 3
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 50
28911: PUSH
28912: EMPTY
28913: LIST
28914: PUSH
28915: LD_INT 2
28917: PUSH
28918: LD_INT 30
28920: PUSH
28921: LD_INT 4
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 30
28930: PUSH
28931: LD_INT 5
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: LD_INT 30
28940: PUSH
28941: LD_INT 32
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 30
28950: PUSH
28951: LD_INT 31
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: LIST
28969: PPUSH
28970: CALL_OW 70
28974: ST_TO_ADDR
// if not tmp then
28975: LD_VAR 0 4
28979: NOT
28980: IFFALSE 28984
// exit ;
28982: GO 29113
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
28984: LD_ADDR_VAR 0 5
28988: PUSH
28989: LD_VAR 0 2
28993: PPUSH
28994: LD_VAR 0 4
28998: PPUSH
28999: LD_INT 1
29001: PPUSH
29002: LD_INT 1
29004: PPUSH
29005: CALL 35241 0 4
29009: PUSH
29010: FOR_IN
29011: IFFALSE 29111
// begin case GetBType ( b ) of b_armoury , b_barracks :
29013: LD_VAR 0 5
29017: PPUSH
29018: CALL_OW 266
29022: PUSH
29023: LD_INT 4
29025: DOUBLE
29026: EQUAL
29027: IFTRUE 29037
29029: LD_INT 5
29031: DOUBLE
29032: EQUAL
29033: IFTRUE 29037
29035: GO 29048
29037: POP
// p := 6 ; b_breastwork , b_bunker :
29038: LD_ADDR_VAR 0 3
29042: PUSH
29043: LD_INT 6
29045: ST_TO_ADDR
29046: GO 29074
29048: LD_INT 31
29050: DOUBLE
29051: EQUAL
29052: IFTRUE 29062
29054: LD_INT 32
29056: DOUBLE
29057: EQUAL
29058: IFTRUE 29062
29060: GO 29073
29062: POP
// p := 1 ; end ;
29063: LD_ADDR_VAR 0 3
29067: PUSH
29068: LD_INT 1
29070: ST_TO_ADDR
29071: GO 29074
29073: POP
// if UnitsInside ( b ) < p then
29074: LD_VAR 0 5
29078: PPUSH
29079: CALL_OW 313
29083: PUSH
29084: LD_VAR 0 3
29088: LESS
29089: IFFALSE 29109
// begin ComEnterUnit ( un , b ) ;
29091: LD_VAR 0 2
29095: PPUSH
29096: LD_VAR 0 5
29100: PPUSH
29101: CALL_OW 120
// exit ;
29105: POP
29106: POP
29107: GO 29113
// end ; end ;
29109: GO 29010
29111: POP
29112: POP
// end ; end ;
29113: PPOPN 5
29115: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
29116: LD_VAR 0 1
29120: PUSH
29121: LD_INT 2
29123: EQUAL
29124: IFFALSE 29143
29126: PUSH
29127: LD_VAR 0 2
29131: PUSH
29132: LD_INT 5
29134: PUSH
29135: LD_INT 8
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: IN
29142: AND
29143: IFFALSE 29152
// YouLost ( FriendlyFire ) ;
29145: LD_STRING FriendlyFire
29147: PPUSH
29148: CALL_OW 104
// end ;
29152: PPOPN 2
29154: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
29155: LD_VAR 0 1
29159: PPUSH
29160: CALL_OW 255
29164: PUSH
29165: LD_INT 8
29167: EQUAL
29168: IFFALSE 29185
29170: PUSH
29171: LD_VAR 0 1
29175: PPUSH
29176: CALL_OW 266
29180: PUSH
29181: LD_INT 5
29183: EQUAL
29184: AND
29185: IFFALSE 29199
// SetClass ( unit , class_mortar ) ;
29187: LD_VAR 0 2
29191: PPUSH
29192: LD_INT 8
29194: PPUSH
29195: CALL_OW 336
// end ; end_of_file
29199: PPOPN 2
29201: END
// every 0 0$35 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 20 , 18 , 16 , 12 ] [ Difficulty ] do
29202: LD_INT 6
29204: PPUSH
29205: LD_INT 1
29207: PPUSH
29208: CALL_OW 287
29212: PUSH
29213: LD_INT 20
29215: PUSH
29216: LD_INT 18
29218: PUSH
29219: LD_INT 16
29221: PUSH
29222: LD_INT 12
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: PUSH
29231: LD_OWVAR 67
29235: ARRAY
29236: LESS
29237: IFFALSE 29264
29239: GO 29241
29241: DISABLE
// begin enable ;
29242: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
29243: LD_INT 1
29245: PPUSH
29246: LD_INT 5
29248: PPUSH
29249: CALL_OW 12
29253: PPUSH
29254: LD_INT 6
29256: PPUSH
29257: LD_INT 1
29259: PPUSH
29260: CALL_OW 55
// end ;
29264: END
// every 0 0$25 trigger Prob ( 50 ) and tick < [ 28 28$00 , 27 27$00 , 26 26$00 , 25 25$00 ] [ Difficulty ] and GetResourceArea ( southCrates , mat_cans ) < 10 do
29265: LD_INT 50
29267: PPUSH
29268: CALL_OW 13
29272: IFFALSE 29305
29274: PUSH
29275: LD_OWVAR 1
29279: PUSH
29280: LD_INT 58800
29282: PUSH
29283: LD_INT 56700
29285: PUSH
29286: LD_INT 54600
29288: PUSH
29289: LD_INT 52500
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: PUSH
29298: LD_OWVAR 67
29302: ARRAY
29303: LESS
29304: AND
29305: IFFALSE 29323
29307: PUSH
29308: LD_INT 21
29310: PPUSH
29311: LD_INT 1
29313: PPUSH
29314: CALL_OW 287
29318: PUSH
29319: LD_INT 10
29321: LESS
29322: AND
29323: IFFALSE 29365
29325: GO 29327
29327: DISABLE
// begin enable ;
29328: ENABLE
// wait ( rand ( 0 0$1 , 0 0$10 ) ) ;
29329: LD_INT 35
29331: PPUSH
29332: LD_INT 350
29334: PPUSH
29335: CALL_OW 12
29339: PPUSH
29340: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , southCrates , true ) ;
29344: LD_INT 1
29346: PPUSH
29347: LD_INT 5
29349: PPUSH
29350: CALL_OW 12
29354: PPUSH
29355: LD_INT 21
29357: PPUSH
29358: LD_INT 1
29360: PPUSH
29361: CALL_OW 55
// end ; end_of_file
29365: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
29366: LD_EXP 18
29370: IFFALSE 29378
29372: PUSH
29373: LD_EXP 20
29377: AND
29378: IFTRUE 29394
29380: PUSH
29381: LD_EXP 17
29385: IFFALSE 29393
29387: PUSH
29388: LD_EXP 19
29392: AND
29393: OR
29394: IFFALSE 29721
29396: GO 29398
29398: DISABLE
// begin enable ;
29399: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
29400: LD_EXP 18
29404: IFFALSE 29412
29406: PUSH
29407: LD_EXP 20
29411: AND
29412: IFFALSE 29428
29414: PUSH
29415: LD_EXP 17
29419: IFFALSE 29427
29421: PUSH
29422: LD_EXP 19
29426: AND
29427: AND
29428: IFFALSE 29565
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
29430: LD_ADDR_OWVAR 47
29434: PUSH
29435: LD_STRING #X106-1a
29437: PUSH
29438: LD_EXP 21
29442: PUSH
29443: LD_INT 16
29445: PPUSH
29446: LD_INT 22
29448: PUSH
29449: LD_INT 2
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 21
29458: PUSH
29459: LD_INT 2
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: LD_INT 33
29468: PUSH
29469: LD_INT 1
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 58
29478: PUSH
29479: EMPTY
29480: LIST
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: PPUSH
29488: CALL_OW 70
29492: MINUS
29493: PPUSH
29494: CALL 70066 0 1
29498: PUSH
29499: LD_STRING #X106-3a
29501: PUSH
29502: LD_EXP 20
29506: PUSH
29507: LD_STRING #X106-1
29509: PUSH
29510: LD_EXP 51
29514: PUSH
29515: LD_INT 0
29517: PLUS
29518: PUSH
29519: LD_EXP 51
29523: PPUSH
29524: LD_INT 55
29526: PUSH
29527: EMPTY
29528: LIST
29529: PPUSH
29530: CALL_OW 72
29534: PUSH
29535: LD_INT 0
29537: PLUS
29538: MINUS
29539: PPUSH
29540: CALL 70066 0 1
29544: PUSH
29545: LD_STRING #X106-3
29547: PUSH
29548: LD_EXP 19
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: ST_TO_ADDR
// end else
29563: GO 29721
// if omarWantVehicles and omarWaitingForVehiclesTimer then
29565: LD_EXP 18
29569: IFFALSE 29577
29571: PUSH
29572: LD_EXP 20
29576: AND
29577: IFFALSE 29664
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
29579: LD_ADDR_OWVAR 47
29583: PUSH
29584: LD_STRING #X106-1a
29586: PUSH
29587: LD_EXP 21
29591: PUSH
29592: LD_INT 16
29594: PPUSH
29595: LD_INT 22
29597: PUSH
29598: LD_INT 2
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: LD_INT 21
29607: PUSH
29608: LD_INT 2
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 33
29617: PUSH
29618: LD_INT 1
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 58
29627: PUSH
29628: EMPTY
29629: LIST
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: PPUSH
29637: CALL_OW 70
29641: MINUS
29642: PPUSH
29643: CALL 70066 0 1
29647: PUSH
29648: LD_STRING #X106-3a
29650: PUSH
29651: LD_EXP 20
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: ST_TO_ADDR
// end else
29662: GO 29721
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
29664: LD_ADDR_OWVAR 47
29668: PUSH
29669: LD_STRING #X106-1
29671: PUSH
29672: LD_EXP 51
29676: PUSH
29677: LD_INT 0
29679: PLUS
29680: PUSH
29681: LD_EXP 51
29685: PPUSH
29686: LD_INT 55
29688: PUSH
29689: EMPTY
29690: LIST
29691: PPUSH
29692: CALL_OW 72
29696: PUSH
29697: LD_INT 0
29699: PLUS
29700: MINUS
29701: PPUSH
29702: CALL 70066 0 1
29706: PUSH
29707: LD_STRING #X106-3
29709: PUSH
29710: LD_EXP 19
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: ST_TO_ADDR
// end ; end ; end_of_file
29721: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29722: LD_INT 0
29724: PPUSH
29725: PPUSH
// if exist_mode then
29726: LD_VAR 0 2
29730: IFFALSE 29776
// begin unit := CreateCharacter ( prefix & ident ) ;
29732: LD_ADDR_VAR 0 5
29736: PUSH
29737: LD_VAR 0 3
29741: PUSH
29742: LD_VAR 0 1
29746: STR
29747: PPUSH
29748: CALL_OW 34
29752: ST_TO_ADDR
// if unit then
29753: LD_VAR 0 5
29757: IFFALSE 29774
// DeleteCharacters ( prefix & ident ) ;
29759: LD_VAR 0 3
29763: PUSH
29764: LD_VAR 0 1
29768: STR
29769: PPUSH
29770: CALL_OW 40
// end else
29774: GO 29791
// unit := NewCharacter ( ident ) ;
29776: LD_ADDR_VAR 0 5
29780: PUSH
29781: LD_VAR 0 1
29785: PPUSH
29786: CALL_OW 25
29790: ST_TO_ADDR
// result := unit ;
29791: LD_ADDR_VAR 0 4
29795: PUSH
29796: LD_VAR 0 5
29800: ST_TO_ADDR
// end ;
29801: LD_VAR 0 4
29805: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
29806: LD_INT 0
29808: PPUSH
29809: PPUSH
// if exist_mode then
29810: LD_VAR 0 2
29814: IFFALSE 29839
// unit := CreateCharacter ( prefix & ident ) else
29816: LD_ADDR_VAR 0 5
29820: PUSH
29821: LD_VAR 0 3
29825: PUSH
29826: LD_VAR 0 1
29830: STR
29831: PPUSH
29832: CALL_OW 34
29836: ST_TO_ADDR
29837: GO 29854
// unit := NewCharacter ( ident ) ;
29839: LD_ADDR_VAR 0 5
29843: PUSH
29844: LD_VAR 0 1
29848: PPUSH
29849: CALL_OW 25
29853: ST_TO_ADDR
// result := unit ;
29854: LD_ADDR_VAR 0 4
29858: PUSH
29859: LD_VAR 0 5
29863: ST_TO_ADDR
// end ;
29864: LD_VAR 0 4
29868: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29869: LD_INT 0
29871: PPUSH
29872: PPUSH
// if not side or not nation then
29873: LD_VAR 0 1
29877: NOT
29878: IFTRUE 29887
29880: PUSH
29881: LD_VAR 0 2
29885: NOT
29886: OR
29887: IFFALSE 29891
// exit ;
29889: GO 30661
// case nation of nation_american :
29891: LD_VAR 0 2
29895: PUSH
29896: LD_INT 1
29898: DOUBLE
29899: EQUAL
29900: IFTRUE 29904
29902: GO 30118
29904: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29905: LD_ADDR_VAR 0 4
29909: PUSH
29910: LD_INT 35
29912: PUSH
29913: LD_INT 45
29915: PUSH
29916: LD_INT 46
29918: PUSH
29919: LD_INT 47
29921: PUSH
29922: LD_INT 82
29924: PUSH
29925: LD_INT 83
29927: PUSH
29928: LD_INT 84
29930: PUSH
29931: LD_INT 85
29933: PUSH
29934: LD_INT 86
29936: PUSH
29937: LD_INT 1
29939: PUSH
29940: LD_INT 2
29942: PUSH
29943: LD_INT 6
29945: PUSH
29946: LD_INT 15
29948: PUSH
29949: LD_INT 16
29951: PUSH
29952: LD_INT 7
29954: PUSH
29955: LD_INT 12
29957: PUSH
29958: LD_INT 13
29960: PUSH
29961: LD_INT 10
29963: PUSH
29964: LD_INT 14
29966: PUSH
29967: LD_INT 20
29969: PUSH
29970: LD_INT 21
29972: PUSH
29973: LD_INT 22
29975: PUSH
29976: LD_INT 25
29978: PUSH
29979: LD_INT 32
29981: PUSH
29982: LD_INT 27
29984: PUSH
29985: LD_INT 36
29987: PUSH
29988: LD_INT 69
29990: PUSH
29991: LD_INT 39
29993: PUSH
29994: LD_INT 34
29996: PUSH
29997: LD_INT 40
29999: PUSH
30000: LD_INT 48
30002: PUSH
30003: LD_INT 49
30005: PUSH
30006: LD_INT 50
30008: PUSH
30009: LD_INT 51
30011: PUSH
30012: LD_INT 52
30014: PUSH
30015: LD_INT 53
30017: PUSH
30018: LD_INT 54
30020: PUSH
30021: LD_INT 55
30023: PUSH
30024: LD_INT 56
30026: PUSH
30027: LD_INT 57
30029: PUSH
30030: LD_INT 58
30032: PUSH
30033: LD_INT 59
30035: PUSH
30036: LD_INT 60
30038: PUSH
30039: LD_INT 61
30041: PUSH
30042: LD_INT 62
30044: PUSH
30045: LD_INT 80
30047: PUSH
30048: LD_INT 82
30050: PUSH
30051: LD_INT 83
30053: PUSH
30054: LD_INT 84
30056: PUSH
30057: LD_INT 85
30059: PUSH
30060: LD_INT 86
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: ST_TO_ADDR
30116: GO 30583
30118: LD_INT 2
30120: DOUBLE
30121: EQUAL
30122: IFTRUE 30126
30124: GO 30352
30126: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30127: LD_ADDR_VAR 0 4
30131: PUSH
30132: LD_INT 35
30134: PUSH
30135: LD_INT 45
30137: PUSH
30138: LD_INT 46
30140: PUSH
30141: LD_INT 47
30143: PUSH
30144: LD_INT 82
30146: PUSH
30147: LD_INT 83
30149: PUSH
30150: LD_INT 84
30152: PUSH
30153: LD_INT 85
30155: PUSH
30156: LD_INT 87
30158: PUSH
30159: LD_INT 70
30161: PUSH
30162: LD_INT 1
30164: PUSH
30165: LD_INT 11
30167: PUSH
30168: LD_INT 3
30170: PUSH
30171: LD_INT 4
30173: PUSH
30174: LD_INT 5
30176: PUSH
30177: LD_INT 6
30179: PUSH
30180: LD_INT 15
30182: PUSH
30183: LD_INT 18
30185: PUSH
30186: LD_INT 7
30188: PUSH
30189: LD_INT 17
30191: PUSH
30192: LD_INT 8
30194: PUSH
30195: LD_INT 20
30197: PUSH
30198: LD_INT 21
30200: PUSH
30201: LD_INT 22
30203: PUSH
30204: LD_INT 72
30206: PUSH
30207: LD_INT 26
30209: PUSH
30210: LD_INT 69
30212: PUSH
30213: LD_INT 39
30215: PUSH
30216: LD_INT 40
30218: PUSH
30219: LD_INT 41
30221: PUSH
30222: LD_INT 42
30224: PUSH
30225: LD_INT 43
30227: PUSH
30228: LD_INT 48
30230: PUSH
30231: LD_INT 49
30233: PUSH
30234: LD_INT 50
30236: PUSH
30237: LD_INT 51
30239: PUSH
30240: LD_INT 52
30242: PUSH
30243: LD_INT 53
30245: PUSH
30246: LD_INT 54
30248: PUSH
30249: LD_INT 55
30251: PUSH
30252: LD_INT 56
30254: PUSH
30255: LD_INT 60
30257: PUSH
30258: LD_INT 61
30260: PUSH
30261: LD_INT 62
30263: PUSH
30264: LD_INT 66
30266: PUSH
30267: LD_INT 67
30269: PUSH
30270: LD_INT 68
30272: PUSH
30273: LD_INT 81
30275: PUSH
30276: LD_INT 82
30278: PUSH
30279: LD_INT 83
30281: PUSH
30282: LD_INT 84
30284: PUSH
30285: LD_INT 85
30287: PUSH
30288: LD_INT 87
30290: PUSH
30291: LD_INT 88
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: ST_TO_ADDR
30350: GO 30583
30352: LD_INT 3
30354: DOUBLE
30355: EQUAL
30356: IFTRUE 30360
30358: GO 30582
30360: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30361: LD_ADDR_VAR 0 4
30365: PUSH
30366: LD_INT 46
30368: PUSH
30369: LD_INT 47
30371: PUSH
30372: LD_INT 1
30374: PUSH
30375: LD_INT 2
30377: PUSH
30378: LD_INT 82
30380: PUSH
30381: LD_INT 83
30383: PUSH
30384: LD_INT 84
30386: PUSH
30387: LD_INT 85
30389: PUSH
30390: LD_INT 86
30392: PUSH
30393: LD_INT 11
30395: PUSH
30396: LD_INT 9
30398: PUSH
30399: LD_INT 20
30401: PUSH
30402: LD_INT 19
30404: PUSH
30405: LD_INT 21
30407: PUSH
30408: LD_INT 24
30410: PUSH
30411: LD_INT 22
30413: PUSH
30414: LD_INT 25
30416: PUSH
30417: LD_INT 28
30419: PUSH
30420: LD_INT 29
30422: PUSH
30423: LD_INT 30
30425: PUSH
30426: LD_INT 31
30428: PUSH
30429: LD_INT 37
30431: PUSH
30432: LD_INT 38
30434: PUSH
30435: LD_INT 32
30437: PUSH
30438: LD_INT 27
30440: PUSH
30441: LD_INT 33
30443: PUSH
30444: LD_INT 69
30446: PUSH
30447: LD_INT 39
30449: PUSH
30450: LD_INT 34
30452: PUSH
30453: LD_INT 40
30455: PUSH
30456: LD_INT 71
30458: PUSH
30459: LD_INT 23
30461: PUSH
30462: LD_INT 44
30464: PUSH
30465: LD_INT 48
30467: PUSH
30468: LD_INT 49
30470: PUSH
30471: LD_INT 50
30473: PUSH
30474: LD_INT 51
30476: PUSH
30477: LD_INT 52
30479: PUSH
30480: LD_INT 53
30482: PUSH
30483: LD_INT 54
30485: PUSH
30486: LD_INT 55
30488: PUSH
30489: LD_INT 56
30491: PUSH
30492: LD_INT 57
30494: PUSH
30495: LD_INT 58
30497: PUSH
30498: LD_INT 59
30500: PUSH
30501: LD_INT 63
30503: PUSH
30504: LD_INT 64
30506: PUSH
30507: LD_INT 65
30509: PUSH
30510: LD_INT 82
30512: PUSH
30513: LD_INT 83
30515: PUSH
30516: LD_INT 84
30518: PUSH
30519: LD_INT 85
30521: PUSH
30522: LD_INT 86
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: ST_TO_ADDR
30580: GO 30583
30582: POP
// if state > - 1 and state < 3 then
30583: LD_VAR 0 3
30587: PUSH
30588: LD_INT 1
30590: NEG
30591: GREATER
30592: IFFALSE 30604
30594: PUSH
30595: LD_VAR 0 3
30599: PUSH
30600: LD_INT 3
30602: LESS
30603: AND
30604: IFFALSE 30661
// for i in result do
30606: LD_ADDR_VAR 0 5
30610: PUSH
30611: LD_VAR 0 4
30615: PUSH
30616: FOR_IN
30617: IFFALSE 30659
// if GetTech ( i , side ) <> state then
30619: LD_VAR 0 5
30623: PPUSH
30624: LD_VAR 0 1
30628: PPUSH
30629: CALL_OW 321
30633: PUSH
30634: LD_VAR 0 3
30638: NONEQUAL
30639: IFFALSE 30657
// result := result diff i ;
30641: LD_ADDR_VAR 0 4
30645: PUSH
30646: LD_VAR 0 4
30650: PUSH
30651: LD_VAR 0 5
30655: DIFF
30656: ST_TO_ADDR
30657: GO 30616
30659: POP
30660: POP
// end ;
30661: LD_VAR 0 4
30665: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30666: LD_INT 0
30668: PPUSH
30669: PPUSH
30670: PPUSH
// result := true ;
30671: LD_ADDR_VAR 0 3
30675: PUSH
30676: LD_INT 1
30678: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30679: LD_ADDR_VAR 0 5
30683: PUSH
30684: LD_VAR 0 2
30688: PPUSH
30689: CALL_OW 480
30693: ST_TO_ADDR
// if not tmp then
30694: LD_VAR 0 5
30698: NOT
30699: IFFALSE 30703
// exit ;
30701: GO 30752
// for i in tmp do
30703: LD_ADDR_VAR 0 4
30707: PUSH
30708: LD_VAR 0 5
30712: PUSH
30713: FOR_IN
30714: IFFALSE 30750
// if GetTech ( i , side ) <> state_researched then
30716: LD_VAR 0 4
30720: PPUSH
30721: LD_VAR 0 1
30725: PPUSH
30726: CALL_OW 321
30730: PUSH
30731: LD_INT 2
30733: NONEQUAL
30734: IFFALSE 30748
// begin result := false ;
30736: LD_ADDR_VAR 0 3
30740: PUSH
30741: LD_INT 0
30743: ST_TO_ADDR
// exit ;
30744: POP
30745: POP
30746: GO 30752
// end ;
30748: GO 30713
30750: POP
30751: POP
// end ;
30752: LD_VAR 0 3
30756: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30757: LD_INT 0
30759: PPUSH
30760: PPUSH
30761: PPUSH
30762: PPUSH
30763: PPUSH
30764: PPUSH
30765: PPUSH
30766: PPUSH
30767: PPUSH
30768: PPUSH
30769: PPUSH
30770: PPUSH
30771: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30772: LD_VAR 0 1
30776: NOT
30777: IFTRUE 30794
30779: PUSH
30780: LD_VAR 0 1
30784: PPUSH
30785: CALL_OW 257
30789: PUSH
30790: LD_INT 9
30792: NONEQUAL
30793: OR
30794: IFFALSE 30798
// exit ;
30796: GO 31377
// side := GetSide ( unit ) ;
30798: LD_ADDR_VAR 0 9
30802: PUSH
30803: LD_VAR 0 1
30807: PPUSH
30808: CALL_OW 255
30812: ST_TO_ADDR
// tech_space := tech_spacanom ;
30813: LD_ADDR_VAR 0 12
30817: PUSH
30818: LD_INT 29
30820: ST_TO_ADDR
// tech_time := tech_taurad ;
30821: LD_ADDR_VAR 0 13
30825: PUSH
30826: LD_INT 28
30828: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30829: LD_ADDR_VAR 0 11
30833: PUSH
30834: LD_VAR 0 1
30838: PPUSH
30839: CALL_OW 310
30843: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30844: LD_VAR 0 11
30848: PPUSH
30849: CALL_OW 247
30853: PUSH
30854: LD_INT 2
30856: EQUAL
30857: IFFALSE 30861
// exit ;
30859: GO 31377
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30861: LD_ADDR_VAR 0 8
30865: PUSH
30866: LD_INT 81
30868: PUSH
30869: LD_VAR 0 9
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 3
30880: PUSH
30881: LD_INT 21
30883: PUSH
30884: LD_INT 3
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PPUSH
30899: CALL_OW 69
30903: ST_TO_ADDR
// if not tmp then
30904: LD_VAR 0 8
30908: NOT
30909: IFFALSE 30913
// exit ;
30911: GO 31377
// if in_unit then
30913: LD_VAR 0 11
30917: IFFALSE 30941
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30919: LD_ADDR_VAR 0 10
30923: PUSH
30924: LD_VAR 0 8
30928: PPUSH
30929: LD_VAR 0 11
30933: PPUSH
30934: CALL_OW 74
30938: ST_TO_ADDR
30939: GO 30961
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30941: LD_ADDR_VAR 0 10
30945: PUSH
30946: LD_VAR 0 8
30950: PPUSH
30951: LD_VAR 0 1
30955: PPUSH
30956: CALL_OW 74
30960: ST_TO_ADDR
// if not enemy then
30961: LD_VAR 0 10
30965: NOT
30966: IFFALSE 30970
// exit ;
30968: GO 31377
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30970: LD_VAR 0 11
30974: IFFALSE 30996
30976: PUSH
30977: LD_VAR 0 11
30981: PPUSH
30982: LD_VAR 0 10
30986: PPUSH
30987: CALL_OW 296
30991: PUSH
30992: LD_INT 13
30994: GREATER
30995: AND
30996: IFTRUE 31018
30998: PUSH
30999: LD_VAR 0 1
31003: PPUSH
31004: LD_VAR 0 10
31008: PPUSH
31009: CALL_OW 296
31013: PUSH
31014: LD_INT 12
31016: GREATER
31017: OR
31018: IFFALSE 31022
// exit ;
31020: GO 31377
// missile := [ 1 ] ;
31022: LD_ADDR_VAR 0 14
31026: PUSH
31027: LD_INT 1
31029: PUSH
31030: EMPTY
31031: LIST
31032: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31033: LD_VAR 0 9
31037: PPUSH
31038: LD_VAR 0 12
31042: PPUSH
31043: CALL_OW 325
31047: IFFALSE 31076
// missile := Replace ( missile , missile + 1 , 2 ) ;
31049: LD_ADDR_VAR 0 14
31053: PUSH
31054: LD_VAR 0 14
31058: PPUSH
31059: LD_VAR 0 14
31063: PUSH
31064: LD_INT 1
31066: PLUS
31067: PPUSH
31068: LD_INT 2
31070: PPUSH
31071: CALL_OW 1
31075: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31076: LD_VAR 0 9
31080: PPUSH
31081: LD_VAR 0 13
31085: PPUSH
31086: CALL_OW 325
31090: IFFALSE 31114
31092: PUSH
31093: LD_VAR 0 10
31097: PPUSH
31098: CALL_OW 255
31102: PPUSH
31103: LD_VAR 0 13
31107: PPUSH
31108: CALL_OW 325
31112: NOT
31113: AND
31114: IFFALSE 31143
// missile := Replace ( missile , missile + 1 , 3 ) ;
31116: LD_ADDR_VAR 0 14
31120: PUSH
31121: LD_VAR 0 14
31125: PPUSH
31126: LD_VAR 0 14
31130: PUSH
31131: LD_INT 1
31133: PLUS
31134: PPUSH
31135: LD_INT 3
31137: PPUSH
31138: CALL_OW 1
31142: ST_TO_ADDR
// if missile < 2 then
31143: LD_VAR 0 14
31147: PUSH
31148: LD_INT 2
31150: LESS
31151: IFFALSE 31155
// exit ;
31153: GO 31377
// x := GetX ( enemy ) ;
31155: LD_ADDR_VAR 0 4
31159: PUSH
31160: LD_VAR 0 10
31164: PPUSH
31165: CALL_OW 250
31169: ST_TO_ADDR
// y := GetY ( enemy ) ;
31170: LD_ADDR_VAR 0 5
31174: PUSH
31175: LD_VAR 0 10
31179: PPUSH
31180: CALL_OW 251
31184: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31185: LD_ADDR_VAR 0 6
31189: PUSH
31190: LD_VAR 0 4
31194: PUSH
31195: LD_INT 1
31197: NEG
31198: PPUSH
31199: LD_INT 1
31201: PPUSH
31202: CALL_OW 12
31206: PLUS
31207: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31208: LD_ADDR_VAR 0 7
31212: PUSH
31213: LD_VAR 0 5
31217: PUSH
31218: LD_INT 1
31220: NEG
31221: PPUSH
31222: LD_INT 1
31224: PPUSH
31225: CALL_OW 12
31229: PLUS
31230: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31231: LD_VAR 0 6
31235: PPUSH
31236: LD_VAR 0 7
31240: PPUSH
31241: CALL_OW 488
31245: NOT
31246: IFFALSE 31268
// begin _x := x ;
31248: LD_ADDR_VAR 0 6
31252: PUSH
31253: LD_VAR 0 4
31257: ST_TO_ADDR
// _y := y ;
31258: LD_ADDR_VAR 0 7
31262: PUSH
31263: LD_VAR 0 5
31267: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31268: LD_ADDR_VAR 0 3
31272: PUSH
31273: LD_INT 1
31275: PPUSH
31276: LD_VAR 0 14
31280: PPUSH
31281: CALL_OW 12
31285: ST_TO_ADDR
// case i of 1 :
31286: LD_VAR 0 3
31290: PUSH
31291: LD_INT 1
31293: DOUBLE
31294: EQUAL
31295: IFTRUE 31299
31297: GO 31316
31299: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31300: LD_VAR 0 1
31304: PPUSH
31305: LD_VAR 0 10
31309: PPUSH
31310: CALL_OW 115
31314: GO 31377
31316: LD_INT 2
31318: DOUBLE
31319: EQUAL
31320: IFTRUE 31324
31322: GO 31346
31324: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31325: LD_VAR 0 1
31329: PPUSH
31330: LD_VAR 0 6
31334: PPUSH
31335: LD_VAR 0 7
31339: PPUSH
31340: CALL_OW 153
31344: GO 31377
31346: LD_INT 3
31348: DOUBLE
31349: EQUAL
31350: IFTRUE 31354
31352: GO 31376
31354: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31355: LD_VAR 0 1
31359: PPUSH
31360: LD_VAR 0 6
31364: PPUSH
31365: LD_VAR 0 7
31369: PPUSH
31370: CALL_OW 154
31374: GO 31377
31376: POP
// end ;
31377: LD_VAR 0 2
31381: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31382: LD_INT 0
31384: PPUSH
31385: PPUSH
31386: PPUSH
31387: PPUSH
31388: PPUSH
31389: PPUSH
// if not unit or not building then
31390: LD_VAR 0 1
31394: NOT
31395: IFTRUE 31404
31397: PUSH
31398: LD_VAR 0 2
31402: NOT
31403: OR
31404: IFFALSE 31408
// exit ;
31406: GO 31566
// x := GetX ( building ) ;
31408: LD_ADDR_VAR 0 5
31412: PUSH
31413: LD_VAR 0 2
31417: PPUSH
31418: CALL_OW 250
31422: ST_TO_ADDR
// y := GetY ( building ) ;
31423: LD_ADDR_VAR 0 6
31427: PUSH
31428: LD_VAR 0 2
31432: PPUSH
31433: CALL_OW 251
31437: ST_TO_ADDR
// for i := 0 to 5 do
31438: LD_ADDR_VAR 0 4
31442: PUSH
31443: DOUBLE
31444: LD_INT 0
31446: DEC
31447: ST_TO_ADDR
31448: LD_INT 5
31450: PUSH
31451: FOR_TO
31452: IFFALSE 31564
// begin _x := ShiftX ( x , i , 3 ) ;
31454: LD_ADDR_VAR 0 7
31458: PUSH
31459: LD_VAR 0 5
31463: PPUSH
31464: LD_VAR 0 4
31468: PPUSH
31469: LD_INT 3
31471: PPUSH
31472: CALL_OW 272
31476: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31477: LD_ADDR_VAR 0 8
31481: PUSH
31482: LD_VAR 0 6
31486: PPUSH
31487: LD_VAR 0 4
31491: PPUSH
31492: LD_INT 3
31494: PPUSH
31495: CALL_OW 273
31499: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31500: LD_VAR 0 7
31504: PPUSH
31505: LD_VAR 0 8
31509: PPUSH
31510: CALL_OW 488
31514: NOT
31515: IFFALSE 31519
// continue ;
31517: GO 31451
// if HexInfo ( _x , _y ) = 0 then
31519: LD_VAR 0 7
31523: PPUSH
31524: LD_VAR 0 8
31528: PPUSH
31529: CALL_OW 428
31533: PUSH
31534: LD_INT 0
31536: EQUAL
31537: IFFALSE 31562
// begin ComMoveXY ( unit , _x , _y ) ;
31539: LD_VAR 0 1
31543: PPUSH
31544: LD_VAR 0 7
31548: PPUSH
31549: LD_VAR 0 8
31553: PPUSH
31554: CALL_OW 111
// exit ;
31558: POP
31559: POP
31560: GO 31566
// end ; end ;
31562: GO 31451
31564: POP
31565: POP
// end ;
31566: LD_VAR 0 3
31570: RET
// export function ScanBase ( side , base_area ) ; begin
31571: LD_INT 0
31573: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31574: LD_ADDR_VAR 0 3
31578: PUSH
31579: LD_VAR 0 2
31583: PPUSH
31584: LD_INT 81
31586: PUSH
31587: LD_VAR 0 1
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PPUSH
31596: CALL_OW 70
31600: ST_TO_ADDR
// end ;
31601: LD_VAR 0 3
31605: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31606: LD_INT 0
31608: PPUSH
31609: PPUSH
31610: PPUSH
31611: PPUSH
// result := false ;
31612: LD_ADDR_VAR 0 2
31616: PUSH
31617: LD_INT 0
31619: ST_TO_ADDR
// side := GetSide ( unit ) ;
31620: LD_ADDR_VAR 0 3
31624: PUSH
31625: LD_VAR 0 1
31629: PPUSH
31630: CALL_OW 255
31634: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31635: LD_ADDR_VAR 0 4
31639: PUSH
31640: LD_VAR 0 1
31644: PPUSH
31645: CALL_OW 248
31649: ST_TO_ADDR
// case nat of 1 :
31650: LD_VAR 0 4
31654: PUSH
31655: LD_INT 1
31657: DOUBLE
31658: EQUAL
31659: IFTRUE 31663
31661: GO 31674
31663: POP
// tech := tech_lassight ; 2 :
31664: LD_ADDR_VAR 0 5
31668: PUSH
31669: LD_INT 12
31671: ST_TO_ADDR
31672: GO 31713
31674: LD_INT 2
31676: DOUBLE
31677: EQUAL
31678: IFTRUE 31682
31680: GO 31693
31682: POP
// tech := tech_mortar ; 3 :
31683: LD_ADDR_VAR 0 5
31687: PUSH
31688: LD_INT 41
31690: ST_TO_ADDR
31691: GO 31713
31693: LD_INT 3
31695: DOUBLE
31696: EQUAL
31697: IFTRUE 31701
31699: GO 31712
31701: POP
// tech := tech_bazooka ; end ;
31702: LD_ADDR_VAR 0 5
31706: PUSH
31707: LD_INT 44
31709: ST_TO_ADDR
31710: GO 31713
31712: POP
// if Researched ( side , tech ) then
31713: LD_VAR 0 3
31717: PPUSH
31718: LD_VAR 0 5
31722: PPUSH
31723: CALL_OW 325
31727: IFFALSE 31754
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31729: LD_ADDR_VAR 0 2
31733: PUSH
31734: LD_INT 5
31736: PUSH
31737: LD_INT 8
31739: PUSH
31740: LD_INT 9
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: LIST
31747: PUSH
31748: LD_VAR 0 4
31752: ARRAY
31753: ST_TO_ADDR
// end ;
31754: LD_VAR 0 2
31758: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31759: LD_INT 0
31761: PPUSH
31762: PPUSH
31763: PPUSH
// if not mines then
31764: LD_VAR 0 2
31768: NOT
31769: IFFALSE 31773
// exit ;
31771: GO 31917
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31773: LD_ADDR_VAR 0 5
31777: PUSH
31778: LD_INT 81
31780: PUSH
31781: LD_VAR 0 1
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 3
31792: PUSH
31793: LD_INT 21
31795: PUSH
31796: LD_INT 3
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PPUSH
31811: CALL_OW 69
31815: ST_TO_ADDR
// for i in mines do
31816: LD_ADDR_VAR 0 4
31820: PUSH
31821: LD_VAR 0 2
31825: PUSH
31826: FOR_IN
31827: IFFALSE 31915
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31829: LD_VAR 0 4
31833: PUSH
31834: LD_INT 1
31836: ARRAY
31837: PPUSH
31838: LD_VAR 0 4
31842: PUSH
31843: LD_INT 2
31845: ARRAY
31846: PPUSH
31847: CALL_OW 458
31851: NOT
31852: IFFALSE 31856
// continue ;
31854: GO 31826
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31856: LD_VAR 0 4
31860: PUSH
31861: LD_INT 1
31863: ARRAY
31864: PPUSH
31865: LD_VAR 0 4
31869: PUSH
31870: LD_INT 2
31872: ARRAY
31873: PPUSH
31874: CALL_OW 428
31878: PUSH
31879: LD_VAR 0 5
31883: IN
31884: IFFALSE 31913
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31886: LD_VAR 0 4
31890: PUSH
31891: LD_INT 1
31893: ARRAY
31894: PPUSH
31895: LD_VAR 0 4
31899: PUSH
31900: LD_INT 2
31902: ARRAY
31903: PPUSH
31904: LD_VAR 0 1
31908: PPUSH
31909: CALL_OW 456
// end ;
31913: GO 31826
31915: POP
31916: POP
// end ;
31917: LD_VAR 0 3
31921: RET
// export function Count ( array ) ; begin
31922: LD_INT 0
31924: PPUSH
// result := array + 0 ;
31925: LD_ADDR_VAR 0 2
31929: PUSH
31930: LD_VAR 0 1
31934: PUSH
31935: LD_INT 0
31937: PLUS
31938: ST_TO_ADDR
// end ;
31939: LD_VAR 0 2
31943: RET
// export function IsEmpty ( building ) ; begin
31944: LD_INT 0
31946: PPUSH
// if not building then
31947: LD_VAR 0 1
31951: NOT
31952: IFFALSE 31956
// exit ;
31954: GO 31999
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31956: LD_ADDR_VAR 0 2
31960: PUSH
31961: LD_VAR 0 1
31965: PUSH
31966: LD_INT 22
31968: PUSH
31969: LD_VAR 0 1
31973: PPUSH
31974: CALL_OW 255
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 58
31985: PUSH
31986: EMPTY
31987: LIST
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PPUSH
31993: CALL_OW 69
31997: IN
31998: ST_TO_ADDR
// end ;
31999: LD_VAR 0 2
32003: RET
// export function IsNotFull ( building ) ; var places ; begin
32004: LD_INT 0
32006: PPUSH
32007: PPUSH
// if not building then
32008: LD_VAR 0 1
32012: NOT
32013: IFFALSE 32017
// exit ;
32015: GO 32045
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
32017: LD_ADDR_VAR 0 2
32021: PUSH
32022: LD_VAR 0 1
32026: PPUSH
32027: LD_INT 3
32029: PUSH
32030: LD_INT 62
32032: PUSH
32033: EMPTY
32034: LIST
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PPUSH
32040: CALL_OW 72
32044: ST_TO_ADDR
// end ;
32045: LD_VAR 0 2
32049: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32050: LD_INT 0
32052: PPUSH
32053: PPUSH
32054: PPUSH
32055: PPUSH
// tmp := [ ] ;
32056: LD_ADDR_VAR 0 3
32060: PUSH
32061: EMPTY
32062: ST_TO_ADDR
// list := [ ] ;
32063: LD_ADDR_VAR 0 5
32067: PUSH
32068: EMPTY
32069: ST_TO_ADDR
// for i = 16 to 25 do
32070: LD_ADDR_VAR 0 4
32074: PUSH
32075: DOUBLE
32076: LD_INT 16
32078: DEC
32079: ST_TO_ADDR
32080: LD_INT 25
32082: PUSH
32083: FOR_TO
32084: IFFALSE 32157
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32086: LD_ADDR_VAR 0 3
32090: PUSH
32091: LD_VAR 0 3
32095: PUSH
32096: LD_INT 22
32098: PUSH
32099: LD_VAR 0 1
32103: PPUSH
32104: CALL_OW 255
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 91
32115: PUSH
32116: LD_VAR 0 1
32120: PUSH
32121: LD_INT 6
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 30
32131: PUSH
32132: LD_VAR 0 4
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: LIST
32145: PUSH
32146: EMPTY
32147: LIST
32148: PPUSH
32149: CALL_OW 69
32153: ADD
32154: ST_TO_ADDR
32155: GO 32083
32157: POP
32158: POP
// for i = 1 to tmp do
32159: LD_ADDR_VAR 0 4
32163: PUSH
32164: DOUBLE
32165: LD_INT 1
32167: DEC
32168: ST_TO_ADDR
32169: LD_VAR 0 3
32173: PUSH
32174: FOR_TO
32175: IFFALSE 32263
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32177: LD_ADDR_VAR 0 5
32181: PUSH
32182: LD_VAR 0 5
32186: PUSH
32187: LD_VAR 0 3
32191: PUSH
32192: LD_VAR 0 4
32196: ARRAY
32197: PPUSH
32198: CALL_OW 266
32202: PUSH
32203: LD_VAR 0 3
32207: PUSH
32208: LD_VAR 0 4
32212: ARRAY
32213: PPUSH
32214: CALL_OW 250
32218: PUSH
32219: LD_VAR 0 3
32223: PUSH
32224: LD_VAR 0 4
32228: ARRAY
32229: PPUSH
32230: CALL_OW 251
32234: PUSH
32235: LD_VAR 0 3
32239: PUSH
32240: LD_VAR 0 4
32244: ARRAY
32245: PPUSH
32246: CALL_OW 254
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: PUSH
32257: EMPTY
32258: LIST
32259: ADD
32260: ST_TO_ADDR
32261: GO 32174
32263: POP
32264: POP
// result := list ;
32265: LD_ADDR_VAR 0 2
32269: PUSH
32270: LD_VAR 0 5
32274: ST_TO_ADDR
// end ;
32275: LD_VAR 0 2
32279: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32280: LD_INT 0
32282: PPUSH
32283: PPUSH
32284: PPUSH
32285: PPUSH
32286: PPUSH
32287: PPUSH
32288: PPUSH
// if not factory then
32289: LD_VAR 0 1
32293: NOT
32294: IFFALSE 32298
// exit ;
32296: GO 32901
// if control = control_apeman then
32298: LD_VAR 0 4
32302: PUSH
32303: LD_INT 5
32305: EQUAL
32306: IFFALSE 32415
// begin tmp := UnitsInside ( factory ) ;
32308: LD_ADDR_VAR 0 8
32312: PUSH
32313: LD_VAR 0 1
32317: PPUSH
32318: CALL_OW 313
32322: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32323: LD_VAR 0 8
32327: PPUSH
32328: LD_INT 25
32330: PUSH
32331: LD_INT 12
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PPUSH
32338: CALL_OW 72
32342: NOT
32343: IFFALSE 32353
// control := control_manual ;
32345: LD_ADDR_VAR 0 4
32349: PUSH
32350: LD_INT 1
32352: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32353: LD_ADDR_VAR 0 8
32357: PUSH
32358: LD_VAR 0 1
32362: PPUSH
32363: CALL 32050 0 1
32367: ST_TO_ADDR
// if tmp then
32368: LD_VAR 0 8
32372: IFFALSE 32415
// begin for i in tmp do
32374: LD_ADDR_VAR 0 7
32378: PUSH
32379: LD_VAR 0 8
32383: PUSH
32384: FOR_IN
32385: IFFALSE 32413
// if i [ 1 ] = b_ext_radio then
32387: LD_VAR 0 7
32391: PUSH
32392: LD_INT 1
32394: ARRAY
32395: PUSH
32396: LD_INT 22
32398: EQUAL
32399: IFFALSE 32411
// begin control := control_remote ;
32401: LD_ADDR_VAR 0 4
32405: PUSH
32406: LD_INT 2
32408: ST_TO_ADDR
// break ;
32409: GO 32413
// end ;
32411: GO 32384
32413: POP
32414: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32415: LD_VAR 0 1
32419: PPUSH
32420: LD_VAR 0 2
32424: PPUSH
32425: LD_VAR 0 3
32429: PPUSH
32430: LD_VAR 0 4
32434: PPUSH
32435: LD_VAR 0 5
32439: PPUSH
32440: CALL_OW 448
32444: IFFALSE 32479
// begin result := [ chassis , engine , control , weapon ] ;
32446: LD_ADDR_VAR 0 6
32450: PUSH
32451: LD_VAR 0 2
32455: PUSH
32456: LD_VAR 0 3
32460: PUSH
32461: LD_VAR 0 4
32465: PUSH
32466: LD_VAR 0 5
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: ST_TO_ADDR
// exit ;
32477: GO 32901
// end ; _chassis := AvailableChassisList ( factory ) ;
32479: LD_ADDR_VAR 0 9
32483: PUSH
32484: LD_VAR 0 1
32488: PPUSH
32489: CALL_OW 475
32493: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32494: LD_ADDR_VAR 0 11
32498: PUSH
32499: LD_VAR 0 1
32503: PPUSH
32504: CALL_OW 476
32508: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32509: LD_ADDR_VAR 0 12
32513: PUSH
32514: LD_VAR 0 1
32518: PPUSH
32519: CALL_OW 477
32523: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32524: LD_ADDR_VAR 0 10
32528: PUSH
32529: LD_VAR 0 1
32533: PPUSH
32534: CALL_OW 478
32538: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32539: LD_VAR 0 9
32543: NOT
32544: IFTRUE 32553
32546: PUSH
32547: LD_VAR 0 11
32551: NOT
32552: OR
32553: IFTRUE 32562
32555: PUSH
32556: LD_VAR 0 12
32560: NOT
32561: OR
32562: IFTRUE 32571
32564: PUSH
32565: LD_VAR 0 10
32569: NOT
32570: OR
32571: IFFALSE 32606
// begin result := [ chassis , engine , control , weapon ] ;
32573: LD_ADDR_VAR 0 6
32577: PUSH
32578: LD_VAR 0 2
32582: PUSH
32583: LD_VAR 0 3
32587: PUSH
32588: LD_VAR 0 4
32592: PUSH
32593: LD_VAR 0 5
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: ST_TO_ADDR
// exit ;
32604: GO 32901
// end ; if not chassis in _chassis then
32606: LD_VAR 0 2
32610: PUSH
32611: LD_VAR 0 9
32615: IN
32616: NOT
32617: IFFALSE 32643
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32619: LD_ADDR_VAR 0 2
32623: PUSH
32624: LD_VAR 0 9
32628: PUSH
32629: LD_INT 1
32631: PPUSH
32632: LD_VAR 0 9
32636: PPUSH
32637: CALL_OW 12
32641: ARRAY
32642: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32643: LD_VAR 0 2
32647: PPUSH
32648: LD_VAR 0 3
32652: PPUSH
32653: CALL 32906 0 2
32657: NOT
32658: IFFALSE 32719
// repeat engine := _engine [ 1 ] ;
32660: LD_ADDR_VAR 0 3
32664: PUSH
32665: LD_VAR 0 11
32669: PUSH
32670: LD_INT 1
32672: ARRAY
32673: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32674: LD_ADDR_VAR 0 11
32678: PUSH
32679: LD_VAR 0 11
32683: PPUSH
32684: LD_INT 1
32686: PPUSH
32687: CALL_OW 3
32691: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32692: LD_VAR 0 2
32696: PPUSH
32697: LD_VAR 0 3
32701: PPUSH
32702: CALL 32906 0 2
32706: IFTRUE 32717
32708: PUSH
32709: LD_VAR 0 11
32713: PUSH
32714: EMPTY
32715: EQUAL
32716: OR
32717: IFFALSE 32660
// if not control in _control then
32719: LD_VAR 0 4
32723: PUSH
32724: LD_VAR 0 12
32728: IN
32729: NOT
32730: IFFALSE 32756
// control := _control [ rand ( 1 , _control ) ] ;
32732: LD_ADDR_VAR 0 4
32736: PUSH
32737: LD_VAR 0 12
32741: PUSH
32742: LD_INT 1
32744: PPUSH
32745: LD_VAR 0 12
32749: PPUSH
32750: CALL_OW 12
32754: ARRAY
32755: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32756: LD_VAR 0 2
32760: PPUSH
32761: LD_VAR 0 5
32765: PPUSH
32766: CALL 33128 0 2
32770: NOT
32771: IFFALSE 32832
// repeat weapon := _weapon [ 1 ] ;
32773: LD_ADDR_VAR 0 5
32777: PUSH
32778: LD_VAR 0 10
32782: PUSH
32783: LD_INT 1
32785: ARRAY
32786: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32787: LD_ADDR_VAR 0 10
32791: PUSH
32792: LD_VAR 0 10
32796: PPUSH
32797: LD_INT 1
32799: PPUSH
32800: CALL_OW 3
32804: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32805: LD_VAR 0 2
32809: PPUSH
32810: LD_VAR 0 5
32814: PPUSH
32815: CALL 33128 0 2
32819: IFTRUE 32830
32821: PUSH
32822: LD_VAR 0 10
32826: PUSH
32827: EMPTY
32828: EQUAL
32829: OR
32830: IFFALSE 32773
// result := [ ] ;
32832: LD_ADDR_VAR 0 6
32836: PUSH
32837: EMPTY
32838: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32839: LD_VAR 0 1
32843: PPUSH
32844: LD_VAR 0 2
32848: PPUSH
32849: LD_VAR 0 3
32853: PPUSH
32854: LD_VAR 0 4
32858: PPUSH
32859: LD_VAR 0 5
32863: PPUSH
32864: CALL_OW 448
32868: IFFALSE 32901
// result := [ chassis , engine , control , weapon ] ;
32870: LD_ADDR_VAR 0 6
32874: PUSH
32875: LD_VAR 0 2
32879: PUSH
32880: LD_VAR 0 3
32884: PUSH
32885: LD_VAR 0 4
32889: PUSH
32890: LD_VAR 0 5
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: ST_TO_ADDR
// end ;
32901: LD_VAR 0 6
32905: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32906: LD_INT 0
32908: PPUSH
// if not chassis or not engine then
32909: LD_VAR 0 1
32913: NOT
32914: IFTRUE 32923
32916: PUSH
32917: LD_VAR 0 2
32921: NOT
32922: OR
32923: IFFALSE 32927
// exit ;
32925: GO 33123
// case engine of engine_solar :
32927: LD_VAR 0 2
32931: PUSH
32932: LD_INT 2
32934: DOUBLE
32935: EQUAL
32936: IFTRUE 32940
32938: GO 32978
32940: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32941: LD_ADDR_VAR 0 3
32945: PUSH
32946: LD_INT 11
32948: PUSH
32949: LD_INT 12
32951: PUSH
32952: LD_INT 13
32954: PUSH
32955: LD_INT 14
32957: PUSH
32958: LD_INT 1
32960: PUSH
32961: LD_INT 2
32963: PUSH
32964: LD_INT 3
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: ST_TO_ADDR
32976: GO 33107
32978: LD_INT 1
32980: DOUBLE
32981: EQUAL
32982: IFTRUE 32986
32984: GO 33048
32986: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32987: LD_ADDR_VAR 0 3
32991: PUSH
32992: LD_INT 11
32994: PUSH
32995: LD_INT 12
32997: PUSH
32998: LD_INT 13
33000: PUSH
33001: LD_INT 14
33003: PUSH
33004: LD_INT 1
33006: PUSH
33007: LD_INT 2
33009: PUSH
33010: LD_INT 3
33012: PUSH
33013: LD_INT 4
33015: PUSH
33016: LD_INT 5
33018: PUSH
33019: LD_INT 21
33021: PUSH
33022: LD_INT 23
33024: PUSH
33025: LD_INT 22
33027: PUSH
33028: LD_INT 24
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: ST_TO_ADDR
33046: GO 33107
33048: LD_INT 3
33050: DOUBLE
33051: EQUAL
33052: IFTRUE 33056
33054: GO 33106
33056: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33057: LD_ADDR_VAR 0 3
33061: PUSH
33062: LD_INT 13
33064: PUSH
33065: LD_INT 14
33067: PUSH
33068: LD_INT 2
33070: PUSH
33071: LD_INT 3
33073: PUSH
33074: LD_INT 4
33076: PUSH
33077: LD_INT 5
33079: PUSH
33080: LD_INT 21
33082: PUSH
33083: LD_INT 22
33085: PUSH
33086: LD_INT 23
33088: PUSH
33089: LD_INT 24
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: ST_TO_ADDR
33104: GO 33107
33106: POP
// result := ( chassis in result ) ;
33107: LD_ADDR_VAR 0 3
33111: PUSH
33112: LD_VAR 0 1
33116: PUSH
33117: LD_VAR 0 3
33121: IN
33122: ST_TO_ADDR
// end ;
33123: LD_VAR 0 3
33127: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33128: LD_INT 0
33130: PPUSH
// if not chassis or not weapon then
33131: LD_VAR 0 1
33135: NOT
33136: IFTRUE 33145
33138: PUSH
33139: LD_VAR 0 2
33143: NOT
33144: OR
33145: IFFALSE 33149
// exit ;
33147: GO 34209
// case weapon of us_machine_gun :
33149: LD_VAR 0 2
33153: PUSH
33154: LD_INT 2
33156: DOUBLE
33157: EQUAL
33158: IFTRUE 33162
33160: GO 33192
33162: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33163: LD_ADDR_VAR 0 3
33167: PUSH
33168: LD_INT 1
33170: PUSH
33171: LD_INT 2
33173: PUSH
33174: LD_INT 3
33176: PUSH
33177: LD_INT 4
33179: PUSH
33180: LD_INT 5
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: ST_TO_ADDR
33190: GO 34193
33192: LD_INT 3
33194: DOUBLE
33195: EQUAL
33196: IFTRUE 33200
33198: GO 33230
33200: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33201: LD_ADDR_VAR 0 3
33205: PUSH
33206: LD_INT 1
33208: PUSH
33209: LD_INT 2
33211: PUSH
33212: LD_INT 3
33214: PUSH
33215: LD_INT 4
33217: PUSH
33218: LD_INT 5
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: ST_TO_ADDR
33228: GO 34193
33230: LD_INT 11
33232: DOUBLE
33233: EQUAL
33234: IFTRUE 33238
33236: GO 33268
33238: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33239: LD_ADDR_VAR 0 3
33243: PUSH
33244: LD_INT 1
33246: PUSH
33247: LD_INT 2
33249: PUSH
33250: LD_INT 3
33252: PUSH
33253: LD_INT 4
33255: PUSH
33256: LD_INT 5
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: ST_TO_ADDR
33266: GO 34193
33268: LD_INT 4
33270: DOUBLE
33271: EQUAL
33272: IFTRUE 33276
33274: GO 33302
33276: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33277: LD_ADDR_VAR 0 3
33281: PUSH
33282: LD_INT 2
33284: PUSH
33285: LD_INT 3
33287: PUSH
33288: LD_INT 4
33290: PUSH
33291: LD_INT 5
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: ST_TO_ADDR
33300: GO 34193
33302: LD_INT 5
33304: DOUBLE
33305: EQUAL
33306: IFTRUE 33310
33308: GO 33336
33310: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33311: LD_ADDR_VAR 0 3
33315: PUSH
33316: LD_INT 2
33318: PUSH
33319: LD_INT 3
33321: PUSH
33322: LD_INT 4
33324: PUSH
33325: LD_INT 5
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: ST_TO_ADDR
33334: GO 34193
33336: LD_INT 9
33338: DOUBLE
33339: EQUAL
33340: IFTRUE 33344
33342: GO 33370
33344: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33345: LD_ADDR_VAR 0 3
33349: PUSH
33350: LD_INT 2
33352: PUSH
33353: LD_INT 3
33355: PUSH
33356: LD_INT 4
33358: PUSH
33359: LD_INT 5
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: ST_TO_ADDR
33368: GO 34193
33370: LD_INT 7
33372: DOUBLE
33373: EQUAL
33374: IFTRUE 33378
33376: GO 33404
33378: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33379: LD_ADDR_VAR 0 3
33383: PUSH
33384: LD_INT 2
33386: PUSH
33387: LD_INT 3
33389: PUSH
33390: LD_INT 4
33392: PUSH
33393: LD_INT 5
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: ST_TO_ADDR
33402: GO 34193
33404: LD_INT 12
33406: DOUBLE
33407: EQUAL
33408: IFTRUE 33412
33410: GO 33438
33412: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33413: LD_ADDR_VAR 0 3
33417: PUSH
33418: LD_INT 2
33420: PUSH
33421: LD_INT 3
33423: PUSH
33424: LD_INT 4
33426: PUSH
33427: LD_INT 5
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: ST_TO_ADDR
33436: GO 34193
33438: LD_INT 13
33440: DOUBLE
33441: EQUAL
33442: IFTRUE 33446
33444: GO 33472
33446: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33447: LD_ADDR_VAR 0 3
33451: PUSH
33452: LD_INT 2
33454: PUSH
33455: LD_INT 3
33457: PUSH
33458: LD_INT 4
33460: PUSH
33461: LD_INT 5
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: ST_TO_ADDR
33470: GO 34193
33472: LD_INT 14
33474: DOUBLE
33475: EQUAL
33476: IFTRUE 33480
33478: GO 33498
33480: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33481: LD_ADDR_VAR 0 3
33485: PUSH
33486: LD_INT 4
33488: PUSH
33489: LD_INT 5
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: ST_TO_ADDR
33496: GO 34193
33498: LD_INT 6
33500: DOUBLE
33501: EQUAL
33502: IFTRUE 33506
33504: GO 33524
33506: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33507: LD_ADDR_VAR 0 3
33511: PUSH
33512: LD_INT 4
33514: PUSH
33515: LD_INT 5
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: ST_TO_ADDR
33522: GO 34193
33524: LD_INT 10
33526: DOUBLE
33527: EQUAL
33528: IFTRUE 33532
33530: GO 33550
33532: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33533: LD_ADDR_VAR 0 3
33537: PUSH
33538: LD_INT 4
33540: PUSH
33541: LD_INT 5
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: ST_TO_ADDR
33548: GO 34193
33550: LD_INT 22
33552: DOUBLE
33553: EQUAL
33554: IFTRUE 33558
33556: GO 33584
33558: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33559: LD_ADDR_VAR 0 3
33563: PUSH
33564: LD_INT 11
33566: PUSH
33567: LD_INT 12
33569: PUSH
33570: LD_INT 13
33572: PUSH
33573: LD_INT 14
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: ST_TO_ADDR
33582: GO 34193
33584: LD_INT 23
33586: DOUBLE
33587: EQUAL
33588: IFTRUE 33592
33590: GO 33618
33592: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33593: LD_ADDR_VAR 0 3
33597: PUSH
33598: LD_INT 11
33600: PUSH
33601: LD_INT 12
33603: PUSH
33604: LD_INT 13
33606: PUSH
33607: LD_INT 14
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: ST_TO_ADDR
33616: GO 34193
33618: LD_INT 24
33620: DOUBLE
33621: EQUAL
33622: IFTRUE 33626
33624: GO 33652
33626: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33627: LD_ADDR_VAR 0 3
33631: PUSH
33632: LD_INT 11
33634: PUSH
33635: LD_INT 12
33637: PUSH
33638: LD_INT 13
33640: PUSH
33641: LD_INT 14
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: ST_TO_ADDR
33650: GO 34193
33652: LD_INT 30
33654: DOUBLE
33655: EQUAL
33656: IFTRUE 33660
33658: GO 33686
33660: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33661: LD_ADDR_VAR 0 3
33665: PUSH
33666: LD_INT 11
33668: PUSH
33669: LD_INT 12
33671: PUSH
33672: LD_INT 13
33674: PUSH
33675: LD_INT 14
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: ST_TO_ADDR
33684: GO 34193
33686: LD_INT 25
33688: DOUBLE
33689: EQUAL
33690: IFTRUE 33694
33692: GO 33712
33694: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33695: LD_ADDR_VAR 0 3
33699: PUSH
33700: LD_INT 13
33702: PUSH
33703: LD_INT 14
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: ST_TO_ADDR
33710: GO 34193
33712: LD_INT 27
33714: DOUBLE
33715: EQUAL
33716: IFTRUE 33720
33718: GO 33738
33720: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33721: LD_ADDR_VAR 0 3
33725: PUSH
33726: LD_INT 13
33728: PUSH
33729: LD_INT 14
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: ST_TO_ADDR
33736: GO 34193
33738: LD_INT 92
33740: DOUBLE
33741: EQUAL
33742: IFTRUE 33746
33744: GO 33772
33746: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33747: LD_ADDR_VAR 0 3
33751: PUSH
33752: LD_INT 11
33754: PUSH
33755: LD_INT 12
33757: PUSH
33758: LD_INT 13
33760: PUSH
33761: LD_INT 14
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: ST_TO_ADDR
33770: GO 34193
33772: LD_INT 28
33774: DOUBLE
33775: EQUAL
33776: IFTRUE 33780
33778: GO 33798
33780: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33781: LD_ADDR_VAR 0 3
33785: PUSH
33786: LD_INT 13
33788: PUSH
33789: LD_INT 14
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: ST_TO_ADDR
33796: GO 34193
33798: LD_INT 29
33800: DOUBLE
33801: EQUAL
33802: IFTRUE 33806
33804: GO 33824
33806: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33807: LD_ADDR_VAR 0 3
33811: PUSH
33812: LD_INT 13
33814: PUSH
33815: LD_INT 14
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: ST_TO_ADDR
33822: GO 34193
33824: LD_INT 31
33826: DOUBLE
33827: EQUAL
33828: IFTRUE 33832
33830: GO 33850
33832: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33833: LD_ADDR_VAR 0 3
33837: PUSH
33838: LD_INT 13
33840: PUSH
33841: LD_INT 14
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: ST_TO_ADDR
33848: GO 34193
33850: LD_INT 26
33852: DOUBLE
33853: EQUAL
33854: IFTRUE 33858
33856: GO 33876
33858: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33859: LD_ADDR_VAR 0 3
33863: PUSH
33864: LD_INT 13
33866: PUSH
33867: LD_INT 14
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: ST_TO_ADDR
33874: GO 34193
33876: LD_INT 42
33878: DOUBLE
33879: EQUAL
33880: IFTRUE 33884
33882: GO 33910
33884: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33885: LD_ADDR_VAR 0 3
33889: PUSH
33890: LD_INT 21
33892: PUSH
33893: LD_INT 22
33895: PUSH
33896: LD_INT 23
33898: PUSH
33899: LD_INT 24
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: ST_TO_ADDR
33908: GO 34193
33910: LD_INT 43
33912: DOUBLE
33913: EQUAL
33914: IFTRUE 33918
33916: GO 33944
33918: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33919: LD_ADDR_VAR 0 3
33923: PUSH
33924: LD_INT 21
33926: PUSH
33927: LD_INT 22
33929: PUSH
33930: LD_INT 23
33932: PUSH
33933: LD_INT 24
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: ST_TO_ADDR
33942: GO 34193
33944: LD_INT 44
33946: DOUBLE
33947: EQUAL
33948: IFTRUE 33952
33950: GO 33978
33952: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33953: LD_ADDR_VAR 0 3
33957: PUSH
33958: LD_INT 21
33960: PUSH
33961: LD_INT 22
33963: PUSH
33964: LD_INT 23
33966: PUSH
33967: LD_INT 24
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: ST_TO_ADDR
33976: GO 34193
33978: LD_INT 45
33980: DOUBLE
33981: EQUAL
33982: IFTRUE 33986
33984: GO 34012
33986: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33987: LD_ADDR_VAR 0 3
33991: PUSH
33992: LD_INT 21
33994: PUSH
33995: LD_INT 22
33997: PUSH
33998: LD_INT 23
34000: PUSH
34001: LD_INT 24
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: ST_TO_ADDR
34010: GO 34193
34012: LD_INT 49
34014: DOUBLE
34015: EQUAL
34016: IFTRUE 34020
34018: GO 34046
34020: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34021: LD_ADDR_VAR 0 3
34025: PUSH
34026: LD_INT 21
34028: PUSH
34029: LD_INT 22
34031: PUSH
34032: LD_INT 23
34034: PUSH
34035: LD_INT 24
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: ST_TO_ADDR
34044: GO 34193
34046: LD_INT 51
34048: DOUBLE
34049: EQUAL
34050: IFTRUE 34054
34052: GO 34080
34054: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34055: LD_ADDR_VAR 0 3
34059: PUSH
34060: LD_INT 21
34062: PUSH
34063: LD_INT 22
34065: PUSH
34066: LD_INT 23
34068: PUSH
34069: LD_INT 24
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: ST_TO_ADDR
34078: GO 34193
34080: LD_INT 52
34082: DOUBLE
34083: EQUAL
34084: IFTRUE 34088
34086: GO 34114
34088: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34089: LD_ADDR_VAR 0 3
34093: PUSH
34094: LD_INT 21
34096: PUSH
34097: LD_INT 22
34099: PUSH
34100: LD_INT 23
34102: PUSH
34103: LD_INT 24
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: ST_TO_ADDR
34112: GO 34193
34114: LD_INT 53
34116: DOUBLE
34117: EQUAL
34118: IFTRUE 34122
34120: GO 34140
34122: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34123: LD_ADDR_VAR 0 3
34127: PUSH
34128: LD_INT 23
34130: PUSH
34131: LD_INT 24
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: ST_TO_ADDR
34138: GO 34193
34140: LD_INT 46
34142: DOUBLE
34143: EQUAL
34144: IFTRUE 34148
34146: GO 34166
34148: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34149: LD_ADDR_VAR 0 3
34153: PUSH
34154: LD_INT 23
34156: PUSH
34157: LD_INT 24
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: ST_TO_ADDR
34164: GO 34193
34166: LD_INT 47
34168: DOUBLE
34169: EQUAL
34170: IFTRUE 34174
34172: GO 34192
34174: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34175: LD_ADDR_VAR 0 3
34179: PUSH
34180: LD_INT 23
34182: PUSH
34183: LD_INT 24
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: ST_TO_ADDR
34190: GO 34193
34192: POP
// result := ( chassis in result ) ;
34193: LD_ADDR_VAR 0 3
34197: PUSH
34198: LD_VAR 0 1
34202: PUSH
34203: LD_VAR 0 3
34207: IN
34208: ST_TO_ADDR
// end ;
34209: LD_VAR 0 3
34213: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34214: LD_INT 0
34216: PPUSH
34217: PPUSH
34218: PPUSH
34219: PPUSH
34220: PPUSH
34221: PPUSH
34222: PPUSH
// result := array ;
34223: LD_ADDR_VAR 0 5
34227: PUSH
34228: LD_VAR 0 1
34232: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34233: LD_VAR 0 1
34237: NOT
34238: IFTRUE 34247
34240: PUSH
34241: LD_VAR 0 2
34245: NOT
34246: OR
34247: IFTRUE 34256
34249: PUSH
34250: LD_VAR 0 3
34254: NOT
34255: OR
34256: IFTRUE 34270
34258: PUSH
34259: LD_VAR 0 2
34263: PUSH
34264: LD_VAR 0 1
34268: GREATER
34269: OR
34270: IFTRUE 34284
34272: PUSH
34273: LD_VAR 0 3
34277: PUSH
34278: LD_VAR 0 1
34282: GREATER
34283: OR
34284: IFFALSE 34288
// exit ;
34286: GO 34584
// if direction then
34288: LD_VAR 0 4
34292: IFFALSE 34356
// begin d := 1 ;
34294: LD_ADDR_VAR 0 9
34298: PUSH
34299: LD_INT 1
34301: ST_TO_ADDR
// if i_from > i_to then
34302: LD_VAR 0 2
34306: PUSH
34307: LD_VAR 0 3
34311: GREATER
34312: IFFALSE 34338
// length := ( array - i_from ) + i_to else
34314: LD_ADDR_VAR 0 11
34318: PUSH
34319: LD_VAR 0 1
34323: PUSH
34324: LD_VAR 0 2
34328: MINUS
34329: PUSH
34330: LD_VAR 0 3
34334: PLUS
34335: ST_TO_ADDR
34336: GO 34354
// length := i_to - i_from ;
34338: LD_ADDR_VAR 0 11
34342: PUSH
34343: LD_VAR 0 3
34347: PUSH
34348: LD_VAR 0 2
34352: MINUS
34353: ST_TO_ADDR
// end else
34354: GO 34417
// begin d := - 1 ;
34356: LD_ADDR_VAR 0 9
34360: PUSH
34361: LD_INT 1
34363: NEG
34364: ST_TO_ADDR
// if i_from > i_to then
34365: LD_VAR 0 2
34369: PUSH
34370: LD_VAR 0 3
34374: GREATER
34375: IFFALSE 34395
// length := i_from - i_to else
34377: LD_ADDR_VAR 0 11
34381: PUSH
34382: LD_VAR 0 2
34386: PUSH
34387: LD_VAR 0 3
34391: MINUS
34392: ST_TO_ADDR
34393: GO 34417
// length := ( array - i_to ) + i_from ;
34395: LD_ADDR_VAR 0 11
34399: PUSH
34400: LD_VAR 0 1
34404: PUSH
34405: LD_VAR 0 3
34409: MINUS
34410: PUSH
34411: LD_VAR 0 2
34415: PLUS
34416: ST_TO_ADDR
// end ; if not length then
34417: LD_VAR 0 11
34421: NOT
34422: IFFALSE 34426
// exit ;
34424: GO 34584
// tmp := array ;
34426: LD_ADDR_VAR 0 10
34430: PUSH
34431: LD_VAR 0 1
34435: ST_TO_ADDR
// for i = 1 to length do
34436: LD_ADDR_VAR 0 6
34440: PUSH
34441: DOUBLE
34442: LD_INT 1
34444: DEC
34445: ST_TO_ADDR
34446: LD_VAR 0 11
34450: PUSH
34451: FOR_TO
34452: IFFALSE 34572
// begin for j = 1 to array do
34454: LD_ADDR_VAR 0 7
34458: PUSH
34459: DOUBLE
34460: LD_INT 1
34462: DEC
34463: ST_TO_ADDR
34464: LD_VAR 0 1
34468: PUSH
34469: FOR_TO
34470: IFFALSE 34558
// begin k := j + d ;
34472: LD_ADDR_VAR 0 8
34476: PUSH
34477: LD_VAR 0 7
34481: PUSH
34482: LD_VAR 0 9
34486: PLUS
34487: ST_TO_ADDR
// if k > array then
34488: LD_VAR 0 8
34492: PUSH
34493: LD_VAR 0 1
34497: GREATER
34498: IFFALSE 34508
// k := 1 ;
34500: LD_ADDR_VAR 0 8
34504: PUSH
34505: LD_INT 1
34507: ST_TO_ADDR
// if not k then
34508: LD_VAR 0 8
34512: NOT
34513: IFFALSE 34525
// k := array ;
34515: LD_ADDR_VAR 0 8
34519: PUSH
34520: LD_VAR 0 1
34524: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34525: LD_ADDR_VAR 0 10
34529: PUSH
34530: LD_VAR 0 10
34534: PPUSH
34535: LD_VAR 0 8
34539: PPUSH
34540: LD_VAR 0 1
34544: PUSH
34545: LD_VAR 0 7
34549: ARRAY
34550: PPUSH
34551: CALL_OW 1
34555: ST_TO_ADDR
// end ;
34556: GO 34469
34558: POP
34559: POP
// array := tmp ;
34560: LD_ADDR_VAR 0 1
34564: PUSH
34565: LD_VAR 0 10
34569: ST_TO_ADDR
// end ;
34570: GO 34451
34572: POP
34573: POP
// result := array ;
34574: LD_ADDR_VAR 0 5
34578: PUSH
34579: LD_VAR 0 1
34583: ST_TO_ADDR
// end ;
34584: LD_VAR 0 5
34588: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34589: LD_INT 0
34591: PPUSH
34592: PPUSH
// result := 0 ;
34593: LD_ADDR_VAR 0 3
34597: PUSH
34598: LD_INT 0
34600: ST_TO_ADDR
// if not array or not value in array then
34601: LD_VAR 0 1
34605: NOT
34606: IFTRUE 34621
34608: PUSH
34609: LD_VAR 0 2
34613: PUSH
34614: LD_VAR 0 1
34618: IN
34619: NOT
34620: OR
34621: IFFALSE 34625
// exit ;
34623: GO 34679
// for i = 1 to array do
34625: LD_ADDR_VAR 0 4
34629: PUSH
34630: DOUBLE
34631: LD_INT 1
34633: DEC
34634: ST_TO_ADDR
34635: LD_VAR 0 1
34639: PUSH
34640: FOR_TO
34641: IFFALSE 34677
// if value = array [ i ] then
34643: LD_VAR 0 2
34647: PUSH
34648: LD_VAR 0 1
34652: PUSH
34653: LD_VAR 0 4
34657: ARRAY
34658: EQUAL
34659: IFFALSE 34675
// begin result := i ;
34661: LD_ADDR_VAR 0 3
34665: PUSH
34666: LD_VAR 0 4
34670: ST_TO_ADDR
// exit ;
34671: POP
34672: POP
34673: GO 34679
// end ;
34675: GO 34640
34677: POP
34678: POP
// end ;
34679: LD_VAR 0 3
34683: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34684: LD_INT 0
34686: PPUSH
// vc_chassis := chassis ;
34687: LD_ADDR_OWVAR 37
34691: PUSH
34692: LD_VAR 0 1
34696: ST_TO_ADDR
// vc_engine := engine ;
34697: LD_ADDR_OWVAR 39
34701: PUSH
34702: LD_VAR 0 2
34706: ST_TO_ADDR
// vc_control := control ;
34707: LD_ADDR_OWVAR 38
34711: PUSH
34712: LD_VAR 0 3
34716: ST_TO_ADDR
// vc_weapon := weapon ;
34717: LD_ADDR_OWVAR 40
34721: PUSH
34722: LD_VAR 0 4
34726: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34727: LD_ADDR_OWVAR 41
34731: PUSH
34732: LD_VAR 0 5
34736: ST_TO_ADDR
// end ;
34737: LD_VAR 0 6
34741: RET
// export function WantPlant ( unit ) ; var task ; begin
34742: LD_INT 0
34744: PPUSH
34745: PPUSH
// result := false ;
34746: LD_ADDR_VAR 0 2
34750: PUSH
34751: LD_INT 0
34753: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34754: LD_ADDR_VAR 0 3
34758: PUSH
34759: LD_VAR 0 1
34763: PPUSH
34764: CALL_OW 437
34768: ST_TO_ADDR
// if task then
34769: LD_VAR 0 3
34773: IFFALSE 34801
// if task [ 1 ] [ 1 ] = p then
34775: LD_VAR 0 3
34779: PUSH
34780: LD_INT 1
34782: ARRAY
34783: PUSH
34784: LD_INT 1
34786: ARRAY
34787: PUSH
34788: LD_STRING p
34790: EQUAL
34791: IFFALSE 34801
// result := true ;
34793: LD_ADDR_VAR 0 2
34797: PUSH
34798: LD_INT 1
34800: ST_TO_ADDR
// end ;
34801: LD_VAR 0 2
34805: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34806: LD_INT 0
34808: PPUSH
34809: PPUSH
34810: PPUSH
34811: PPUSH
// if pos < 1 then
34812: LD_VAR 0 2
34816: PUSH
34817: LD_INT 1
34819: LESS
34820: IFFALSE 34824
// exit ;
34822: GO 35127
// if pos = 1 then
34824: LD_VAR 0 2
34828: PUSH
34829: LD_INT 1
34831: EQUAL
34832: IFFALSE 34865
// result := Replace ( arr , pos [ 1 ] , value ) else
34834: LD_ADDR_VAR 0 4
34838: PUSH
34839: LD_VAR 0 1
34843: PPUSH
34844: LD_VAR 0 2
34848: PUSH
34849: LD_INT 1
34851: ARRAY
34852: PPUSH
34853: LD_VAR 0 3
34857: PPUSH
34858: CALL_OW 1
34862: ST_TO_ADDR
34863: GO 35127
// begin tmp := arr ;
34865: LD_ADDR_VAR 0 6
34869: PUSH
34870: LD_VAR 0 1
34874: ST_TO_ADDR
// s_arr := [ tmp ] ;
34875: LD_ADDR_VAR 0 7
34879: PUSH
34880: LD_VAR 0 6
34884: PUSH
34885: EMPTY
34886: LIST
34887: ST_TO_ADDR
// for i = 1 to pos - 1 do
34888: LD_ADDR_VAR 0 5
34892: PUSH
34893: DOUBLE
34894: LD_INT 1
34896: DEC
34897: ST_TO_ADDR
34898: LD_VAR 0 2
34902: PUSH
34903: LD_INT 1
34905: MINUS
34906: PUSH
34907: FOR_TO
34908: IFFALSE 34953
// begin tmp := tmp [ pos [ i ] ] ;
34910: LD_ADDR_VAR 0 6
34914: PUSH
34915: LD_VAR 0 6
34919: PUSH
34920: LD_VAR 0 2
34924: PUSH
34925: LD_VAR 0 5
34929: ARRAY
34930: ARRAY
34931: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34932: LD_ADDR_VAR 0 7
34936: PUSH
34937: LD_VAR 0 7
34941: PUSH
34942: LD_VAR 0 6
34946: PUSH
34947: EMPTY
34948: LIST
34949: ADD
34950: ST_TO_ADDR
// end ;
34951: GO 34907
34953: POP
34954: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34955: LD_ADDR_VAR 0 6
34959: PUSH
34960: LD_VAR 0 6
34964: PPUSH
34965: LD_VAR 0 2
34969: PUSH
34970: LD_VAR 0 2
34974: ARRAY
34975: PPUSH
34976: LD_VAR 0 3
34980: PPUSH
34981: CALL_OW 1
34985: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34986: LD_ADDR_VAR 0 7
34990: PUSH
34991: LD_VAR 0 7
34995: PPUSH
34996: LD_VAR 0 7
35000: PPUSH
35001: LD_VAR 0 6
35005: PPUSH
35006: CALL_OW 1
35010: ST_TO_ADDR
// for i = s_arr downto 2 do
35011: LD_ADDR_VAR 0 5
35015: PUSH
35016: DOUBLE
35017: LD_VAR 0 7
35021: INC
35022: ST_TO_ADDR
35023: LD_INT 2
35025: PUSH
35026: FOR_DOWNTO
35027: IFFALSE 35111
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35029: LD_ADDR_VAR 0 6
35033: PUSH
35034: LD_VAR 0 7
35038: PUSH
35039: LD_VAR 0 5
35043: PUSH
35044: LD_INT 1
35046: MINUS
35047: ARRAY
35048: PPUSH
35049: LD_VAR 0 2
35053: PUSH
35054: LD_VAR 0 5
35058: PUSH
35059: LD_INT 1
35061: MINUS
35062: ARRAY
35063: PPUSH
35064: LD_VAR 0 7
35068: PUSH
35069: LD_VAR 0 5
35073: ARRAY
35074: PPUSH
35075: CALL_OW 1
35079: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35080: LD_ADDR_VAR 0 7
35084: PUSH
35085: LD_VAR 0 7
35089: PPUSH
35090: LD_VAR 0 5
35094: PUSH
35095: LD_INT 1
35097: MINUS
35098: PPUSH
35099: LD_VAR 0 6
35103: PPUSH
35104: CALL_OW 1
35108: ST_TO_ADDR
// end ;
35109: GO 35026
35111: POP
35112: POP
// result := s_arr [ 1 ] ;
35113: LD_ADDR_VAR 0 4
35117: PUSH
35118: LD_VAR 0 7
35122: PUSH
35123: LD_INT 1
35125: ARRAY
35126: ST_TO_ADDR
// end ; end ;
35127: LD_VAR 0 4
35131: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35132: LD_INT 0
35134: PPUSH
35135: PPUSH
// if not list then
35136: LD_VAR 0 1
35140: NOT
35141: IFFALSE 35145
// exit ;
35143: GO 35236
// i := list [ pos1 ] ;
35145: LD_ADDR_VAR 0 5
35149: PUSH
35150: LD_VAR 0 1
35154: PUSH
35155: LD_VAR 0 2
35159: ARRAY
35160: ST_TO_ADDR
// if not i then
35161: LD_VAR 0 5
35165: NOT
35166: IFFALSE 35170
// exit ;
35168: GO 35236
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35170: LD_ADDR_VAR 0 1
35174: PUSH
35175: LD_VAR 0 1
35179: PPUSH
35180: LD_VAR 0 2
35184: PPUSH
35185: LD_VAR 0 1
35189: PUSH
35190: LD_VAR 0 3
35194: ARRAY
35195: PPUSH
35196: CALL_OW 1
35200: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35201: LD_ADDR_VAR 0 1
35205: PUSH
35206: LD_VAR 0 1
35210: PPUSH
35211: LD_VAR 0 3
35215: PPUSH
35216: LD_VAR 0 5
35220: PPUSH
35221: CALL_OW 1
35225: ST_TO_ADDR
// result := list ;
35226: LD_ADDR_VAR 0 4
35230: PUSH
35231: LD_VAR 0 1
35235: ST_TO_ADDR
// end ;
35236: LD_VAR 0 4
35240: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35241: LD_INT 0
35243: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35244: LD_ADDR_VAR 0 5
35248: PUSH
35249: LD_VAR 0 1
35253: PPUSH
35254: CALL_OW 250
35258: PPUSH
35259: LD_VAR 0 1
35263: PPUSH
35264: CALL_OW 251
35268: PPUSH
35269: LD_VAR 0 2
35273: PPUSH
35274: LD_VAR 0 3
35278: PPUSH
35279: LD_VAR 0 4
35283: PPUSH
35284: CALL 35666 0 5
35288: ST_TO_ADDR
// end ;
35289: LD_VAR 0 5
35293: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
35294: LD_INT 0
35296: PPUSH
35297: PPUSH
35298: PPUSH
35299: PPUSH
// if not list or not unit then
35300: LD_VAR 0 2
35304: NOT
35305: IFTRUE 35314
35307: PUSH
35308: LD_VAR 0 1
35312: NOT
35313: OR
35314: IFFALSE 35318
// exit ;
35316: GO 35661
// result := [ ] ;
35318: LD_ADDR_VAR 0 5
35322: PUSH
35323: EMPTY
35324: ST_TO_ADDR
// for i in list do
35325: LD_ADDR_VAR 0 6
35329: PUSH
35330: LD_VAR 0 2
35334: PUSH
35335: FOR_IN
35336: IFFALSE 35554
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
35338: LD_ADDR_VAR 0 8
35342: PUSH
35343: LD_VAR 0 1
35347: PPUSH
35348: LD_VAR 0 6
35352: PUSH
35353: LD_INT 1
35355: ARRAY
35356: PPUSH
35357: LD_VAR 0 6
35361: PUSH
35362: LD_INT 2
35364: ARRAY
35365: PPUSH
35366: CALL_OW 297
35370: ST_TO_ADDR
// if not Count ( result ) then
35371: LD_VAR 0 5
35375: PPUSH
35376: CALL 31922 0 1
35380: NOT
35381: IFFALSE 35414
// begin result := Join ( result , [ i , tmp ] ) ;
35383: LD_ADDR_VAR 0 5
35387: PUSH
35388: LD_VAR 0 5
35392: PPUSH
35393: LD_VAR 0 6
35397: PUSH
35398: LD_VAR 0 8
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PPUSH
35407: CALL 67854 0 2
35411: ST_TO_ADDR
// continue ;
35412: GO 35335
// end ; if result [ result ] [ 2 ] <= tmp then
35414: LD_VAR 0 5
35418: PUSH
35419: LD_VAR 0 5
35423: ARRAY
35424: PUSH
35425: LD_INT 2
35427: ARRAY
35428: PUSH
35429: LD_VAR 0 8
35433: LESSEQUAL
35434: IFFALSE 35467
// result := Join ( result , [ i , tmp ] ) else
35436: LD_ADDR_VAR 0 5
35440: PUSH
35441: LD_VAR 0 5
35445: PPUSH
35446: LD_VAR 0 6
35450: PUSH
35451: LD_VAR 0 8
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PPUSH
35460: CALL 67854 0 2
35464: ST_TO_ADDR
35465: GO 35552
// begin for j := 1 to Count ( result ) do
35467: LD_ADDR_VAR 0 7
35471: PUSH
35472: DOUBLE
35473: LD_INT 1
35475: DEC
35476: ST_TO_ADDR
35477: LD_VAR 0 5
35481: PPUSH
35482: CALL 31922 0 1
35486: PUSH
35487: FOR_TO
35488: IFFALSE 35550
// begin if tmp < result [ j ] [ 2 ] then
35490: LD_VAR 0 8
35494: PUSH
35495: LD_VAR 0 5
35499: PUSH
35500: LD_VAR 0 7
35504: ARRAY
35505: PUSH
35506: LD_INT 2
35508: ARRAY
35509: LESS
35510: IFFALSE 35548
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35512: LD_ADDR_VAR 0 5
35516: PUSH
35517: LD_VAR 0 5
35521: PPUSH
35522: LD_VAR 0 7
35526: PPUSH
35527: LD_VAR 0 6
35531: PUSH
35532: LD_VAR 0 8
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PPUSH
35541: CALL_OW 2
35545: ST_TO_ADDR
// break ;
35546: GO 35550
// end ; end ;
35548: GO 35487
35550: POP
35551: POP
// end ; end ;
35552: GO 35335
35554: POP
35555: POP
// if result and not asc then
35556: LD_VAR 0 5
35560: IFFALSE 35569
35562: PUSH
35563: LD_VAR 0 3
35567: NOT
35568: AND
35569: IFFALSE 35586
// result := ReverseArray ( result ) ;
35571: LD_ADDR_VAR 0 5
35575: PUSH
35576: LD_VAR 0 5
35580: PPUSH
35581: CALL 62944 0 1
35585: ST_TO_ADDR
// tmp := [ ] ;
35586: LD_ADDR_VAR 0 8
35590: PUSH
35591: EMPTY
35592: ST_TO_ADDR
// if mode then
35593: LD_VAR 0 4
35597: IFFALSE 35661
// begin for i := 1 to result do
35599: LD_ADDR_VAR 0 6
35603: PUSH
35604: DOUBLE
35605: LD_INT 1
35607: DEC
35608: ST_TO_ADDR
35609: LD_VAR 0 5
35613: PUSH
35614: FOR_TO
35615: IFFALSE 35649
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
35617: LD_ADDR_VAR 0 8
35621: PUSH
35622: LD_VAR 0 8
35626: PPUSH
35627: LD_VAR 0 5
35631: PUSH
35632: LD_VAR 0 6
35636: ARRAY
35637: PUSH
35638: LD_INT 1
35640: ARRAY
35641: PPUSH
35642: CALL 67854 0 2
35646: ST_TO_ADDR
35647: GO 35614
35649: POP
35650: POP
// result := tmp ;
35651: LD_ADDR_VAR 0 5
35655: PUSH
35656: LD_VAR 0 8
35660: ST_TO_ADDR
// end ; end ;
35661: LD_VAR 0 5
35665: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35666: LD_INT 0
35668: PPUSH
35669: PPUSH
35670: PPUSH
35671: PPUSH
// if not list then
35672: LD_VAR 0 3
35676: NOT
35677: IFFALSE 35681
// exit ;
35679: GO 36071
// result := [ ] ;
35681: LD_ADDR_VAR 0 6
35685: PUSH
35686: EMPTY
35687: ST_TO_ADDR
// for i in list do
35688: LD_ADDR_VAR 0 7
35692: PUSH
35693: LD_VAR 0 3
35697: PUSH
35698: FOR_IN
35699: IFFALSE 35901
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35701: LD_ADDR_VAR 0 9
35705: PUSH
35706: LD_VAR 0 7
35710: PPUSH
35711: LD_VAR 0 1
35715: PPUSH
35716: LD_VAR 0 2
35720: PPUSH
35721: CALL_OW 297
35725: ST_TO_ADDR
// if not result then
35726: LD_VAR 0 6
35730: NOT
35731: IFFALSE 35757
// result := [ [ i , tmp ] ] else
35733: LD_ADDR_VAR 0 6
35737: PUSH
35738: LD_VAR 0 7
35742: PUSH
35743: LD_VAR 0 9
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: EMPTY
35753: LIST
35754: ST_TO_ADDR
35755: GO 35899
// begin if result [ result ] [ 2 ] <= tmp then
35757: LD_VAR 0 6
35761: PUSH
35762: LD_VAR 0 6
35766: ARRAY
35767: PUSH
35768: LD_INT 2
35770: ARRAY
35771: PUSH
35772: LD_VAR 0 9
35776: LESSEQUAL
35777: IFFALSE 35819
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35779: LD_ADDR_VAR 0 6
35783: PUSH
35784: LD_VAR 0 6
35788: PPUSH
35789: LD_VAR 0 6
35793: PUSH
35794: LD_INT 1
35796: PLUS
35797: PPUSH
35798: LD_VAR 0 7
35802: PUSH
35803: LD_VAR 0 9
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PPUSH
35812: CALL_OW 2
35816: ST_TO_ADDR
35817: GO 35899
// for j := 1 to result do
35819: LD_ADDR_VAR 0 8
35823: PUSH
35824: DOUBLE
35825: LD_INT 1
35827: DEC
35828: ST_TO_ADDR
35829: LD_VAR 0 6
35833: PUSH
35834: FOR_TO
35835: IFFALSE 35897
// begin if tmp < result [ j ] [ 2 ] then
35837: LD_VAR 0 9
35841: PUSH
35842: LD_VAR 0 6
35846: PUSH
35847: LD_VAR 0 8
35851: ARRAY
35852: PUSH
35853: LD_INT 2
35855: ARRAY
35856: LESS
35857: IFFALSE 35895
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35859: LD_ADDR_VAR 0 6
35863: PUSH
35864: LD_VAR 0 6
35868: PPUSH
35869: LD_VAR 0 8
35873: PPUSH
35874: LD_VAR 0 7
35878: PUSH
35879: LD_VAR 0 9
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PPUSH
35888: CALL_OW 2
35892: ST_TO_ADDR
// break ;
35893: GO 35897
// end ; end ;
35895: GO 35834
35897: POP
35898: POP
// end ; end ;
35899: GO 35698
35901: POP
35902: POP
// if result and not asc then
35903: LD_VAR 0 6
35907: IFFALSE 35916
35909: PUSH
35910: LD_VAR 0 4
35914: NOT
35915: AND
35916: IFFALSE 35991
// begin tmp := result ;
35918: LD_ADDR_VAR 0 9
35922: PUSH
35923: LD_VAR 0 6
35927: ST_TO_ADDR
// for i = tmp downto 1 do
35928: LD_ADDR_VAR 0 7
35932: PUSH
35933: DOUBLE
35934: LD_VAR 0 9
35938: INC
35939: ST_TO_ADDR
35940: LD_INT 1
35942: PUSH
35943: FOR_DOWNTO
35944: IFFALSE 35989
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35946: LD_ADDR_VAR 0 6
35950: PUSH
35951: LD_VAR 0 6
35955: PPUSH
35956: LD_VAR 0 9
35960: PUSH
35961: LD_VAR 0 7
35965: MINUS
35966: PUSH
35967: LD_INT 1
35969: PLUS
35970: PPUSH
35971: LD_VAR 0 9
35975: PUSH
35976: LD_VAR 0 7
35980: ARRAY
35981: PPUSH
35982: CALL_OW 1
35986: ST_TO_ADDR
35987: GO 35943
35989: POP
35990: POP
// end ; tmp := [ ] ;
35991: LD_ADDR_VAR 0 9
35995: PUSH
35996: EMPTY
35997: ST_TO_ADDR
// if mode then
35998: LD_VAR 0 5
36002: IFFALSE 36071
// begin for i = 1 to result do
36004: LD_ADDR_VAR 0 7
36008: PUSH
36009: DOUBLE
36010: LD_INT 1
36012: DEC
36013: ST_TO_ADDR
36014: LD_VAR 0 6
36018: PUSH
36019: FOR_TO
36020: IFFALSE 36059
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36022: LD_ADDR_VAR 0 9
36026: PUSH
36027: LD_VAR 0 9
36031: PPUSH
36032: LD_VAR 0 7
36036: PPUSH
36037: LD_VAR 0 6
36041: PUSH
36042: LD_VAR 0 7
36046: ARRAY
36047: PUSH
36048: LD_INT 1
36050: ARRAY
36051: PPUSH
36052: CALL_OW 1
36056: ST_TO_ADDR
36057: GO 36019
36059: POP
36060: POP
// result := tmp ;
36061: LD_ADDR_VAR 0 6
36065: PUSH
36066: LD_VAR 0 9
36070: ST_TO_ADDR
// end ; end ;
36071: LD_VAR 0 6
36075: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36076: LD_INT 0
36078: PPUSH
36079: PPUSH
36080: PPUSH
36081: PPUSH
36082: PPUSH
36083: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36084: LD_ADDR_VAR 0 5
36088: PUSH
36089: LD_INT 0
36091: PUSH
36092: LD_INT 0
36094: PUSH
36095: LD_INT 0
36097: PUSH
36098: EMPTY
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: ST_TO_ADDR
// if not x or not y then
36106: LD_VAR 0 2
36110: NOT
36111: IFTRUE 36120
36113: PUSH
36114: LD_VAR 0 3
36118: NOT
36119: OR
36120: IFFALSE 36124
// exit ;
36122: GO 37780
// if not range then
36124: LD_VAR 0 4
36128: NOT
36129: IFFALSE 36139
// range := 10 ;
36131: LD_ADDR_VAR 0 4
36135: PUSH
36136: LD_INT 10
36138: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36139: LD_ADDR_VAR 0 8
36143: PUSH
36144: LD_INT 81
36146: PUSH
36147: LD_VAR 0 1
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 92
36158: PUSH
36159: LD_VAR 0 2
36163: PUSH
36164: LD_VAR 0 3
36168: PUSH
36169: LD_VAR 0 4
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 3
36182: PUSH
36183: LD_INT 21
36185: PUSH
36186: LD_INT 3
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: LIST
36201: PPUSH
36202: CALL_OW 69
36206: ST_TO_ADDR
// if not tmp then
36207: LD_VAR 0 8
36211: NOT
36212: IFFALSE 36216
// exit ;
36214: GO 37780
// for i in tmp do
36216: LD_ADDR_VAR 0 6
36220: PUSH
36221: LD_VAR 0 8
36225: PUSH
36226: FOR_IN
36227: IFFALSE 37755
// begin points := [ 0 , 0 , 0 ] ;
36229: LD_ADDR_VAR 0 9
36233: PUSH
36234: LD_INT 0
36236: PUSH
36237: LD_INT 0
36239: PUSH
36240: LD_INT 0
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: LIST
36247: ST_TO_ADDR
// bpoints := 1 ;
36248: LD_ADDR_VAR 0 10
36252: PUSH
36253: LD_INT 1
36255: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36256: LD_VAR 0 6
36260: PPUSH
36261: CALL_OW 247
36265: PUSH
36266: LD_INT 1
36268: DOUBLE
36269: EQUAL
36270: IFTRUE 36274
36272: GO 36856
36274: POP
// begin if GetClass ( i ) = 1 then
36275: LD_VAR 0 6
36279: PPUSH
36280: CALL_OW 257
36284: PUSH
36285: LD_INT 1
36287: EQUAL
36288: IFFALSE 36309
// points := [ 10 , 5 , 3 ] ;
36290: LD_ADDR_VAR 0 9
36294: PUSH
36295: LD_INT 10
36297: PUSH
36298: LD_INT 5
36300: PUSH
36301: LD_INT 3
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: LIST
36308: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36309: LD_VAR 0 6
36313: PPUSH
36314: CALL_OW 257
36318: PUSH
36319: LD_INT 2
36321: PUSH
36322: LD_INT 3
36324: PUSH
36325: LD_INT 4
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: LIST
36332: IN
36333: IFFALSE 36354
// points := [ 3 , 2 , 1 ] ;
36335: LD_ADDR_VAR 0 9
36339: PUSH
36340: LD_INT 3
36342: PUSH
36343: LD_INT 2
36345: PUSH
36346: LD_INT 1
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: LIST
36353: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36354: LD_VAR 0 6
36358: PPUSH
36359: CALL_OW 257
36363: PUSH
36364: LD_INT 5
36366: EQUAL
36367: IFFALSE 36388
// points := [ 130 , 5 , 2 ] ;
36369: LD_ADDR_VAR 0 9
36373: PUSH
36374: LD_INT 130
36376: PUSH
36377: LD_INT 5
36379: PUSH
36380: LD_INT 2
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: LIST
36387: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36388: LD_VAR 0 6
36392: PPUSH
36393: CALL_OW 257
36397: PUSH
36398: LD_INT 8
36400: EQUAL
36401: IFFALSE 36422
// points := [ 35 , 35 , 30 ] ;
36403: LD_ADDR_VAR 0 9
36407: PUSH
36408: LD_INT 35
36410: PUSH
36411: LD_INT 35
36413: PUSH
36414: LD_INT 30
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: LIST
36421: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36422: LD_VAR 0 6
36426: PPUSH
36427: CALL_OW 257
36431: PUSH
36432: LD_INT 9
36434: EQUAL
36435: IFFALSE 36456
// points := [ 20 , 55 , 40 ] ;
36437: LD_ADDR_VAR 0 9
36441: PUSH
36442: LD_INT 20
36444: PUSH
36445: LD_INT 55
36447: PUSH
36448: LD_INT 40
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: LIST
36455: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36456: LD_VAR 0 6
36460: PPUSH
36461: CALL_OW 257
36465: PUSH
36466: LD_INT 12
36468: PUSH
36469: LD_INT 16
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: IN
36476: IFFALSE 36497
// points := [ 5 , 3 , 2 ] ;
36478: LD_ADDR_VAR 0 9
36482: PUSH
36483: LD_INT 5
36485: PUSH
36486: LD_INT 3
36488: PUSH
36489: LD_INT 2
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: LIST
36496: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36497: LD_VAR 0 6
36501: PPUSH
36502: CALL_OW 257
36506: PUSH
36507: LD_INT 17
36509: EQUAL
36510: IFFALSE 36531
// points := [ 100 , 50 , 75 ] ;
36512: LD_ADDR_VAR 0 9
36516: PUSH
36517: LD_INT 100
36519: PUSH
36520: LD_INT 50
36522: PUSH
36523: LD_INT 75
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: LIST
36530: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36531: LD_VAR 0 6
36535: PPUSH
36536: CALL_OW 257
36540: PUSH
36541: LD_INT 15
36543: EQUAL
36544: IFFALSE 36565
// points := [ 10 , 5 , 3 ] ;
36546: LD_ADDR_VAR 0 9
36550: PUSH
36551: LD_INT 10
36553: PUSH
36554: LD_INT 5
36556: PUSH
36557: LD_INT 3
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: LIST
36564: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36565: LD_VAR 0 6
36569: PPUSH
36570: CALL_OW 257
36574: PUSH
36575: LD_INT 14
36577: EQUAL
36578: IFFALSE 36599
// points := [ 10 , 0 , 0 ] ;
36580: LD_ADDR_VAR 0 9
36584: PUSH
36585: LD_INT 10
36587: PUSH
36588: LD_INT 0
36590: PUSH
36591: LD_INT 0
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: LIST
36598: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36599: LD_VAR 0 6
36603: PPUSH
36604: CALL_OW 257
36608: PUSH
36609: LD_INT 11
36611: EQUAL
36612: IFFALSE 36633
// points := [ 30 , 10 , 5 ] ;
36614: LD_ADDR_VAR 0 9
36618: PUSH
36619: LD_INT 30
36621: PUSH
36622: LD_INT 10
36624: PUSH
36625: LD_INT 5
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: LIST
36632: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36633: LD_VAR 0 1
36637: PPUSH
36638: LD_INT 5
36640: PPUSH
36641: CALL_OW 321
36645: PUSH
36646: LD_INT 2
36648: EQUAL
36649: IFFALSE 36666
// bpoints := bpoints * 1.8 ;
36651: LD_ADDR_VAR 0 10
36655: PUSH
36656: LD_VAR 0 10
36660: PUSH
36661: LD_REAL  1.80000000000000E+0000
36664: MUL
36665: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36666: LD_VAR 0 6
36670: PPUSH
36671: CALL_OW 257
36675: PUSH
36676: LD_INT 1
36678: PUSH
36679: LD_INT 2
36681: PUSH
36682: LD_INT 3
36684: PUSH
36685: LD_INT 4
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: IN
36694: IFFALSE 36714
36696: PUSH
36697: LD_VAR 0 1
36701: PPUSH
36702: LD_INT 51
36704: PPUSH
36705: CALL_OW 321
36709: PUSH
36710: LD_INT 2
36712: EQUAL
36713: AND
36714: IFFALSE 36731
// bpoints := bpoints * 1.2 ;
36716: LD_ADDR_VAR 0 10
36720: PUSH
36721: LD_VAR 0 10
36725: PUSH
36726: LD_REAL  1.20000000000000E+0000
36729: MUL
36730: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36731: LD_VAR 0 6
36735: PPUSH
36736: CALL_OW 257
36740: PUSH
36741: LD_INT 5
36743: PUSH
36744: LD_INT 7
36746: PUSH
36747: LD_INT 9
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: LIST
36754: IN
36755: IFFALSE 36775
36757: PUSH
36758: LD_VAR 0 1
36762: PPUSH
36763: LD_INT 52
36765: PPUSH
36766: CALL_OW 321
36770: PUSH
36771: LD_INT 2
36773: EQUAL
36774: AND
36775: IFFALSE 36792
// bpoints := bpoints * 1.5 ;
36777: LD_ADDR_VAR 0 10
36781: PUSH
36782: LD_VAR 0 10
36786: PUSH
36787: LD_REAL  1.50000000000000E+0000
36790: MUL
36791: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36792: LD_VAR 0 1
36796: PPUSH
36797: LD_INT 66
36799: PPUSH
36800: CALL_OW 321
36804: PUSH
36805: LD_INT 2
36807: EQUAL
36808: IFFALSE 36825
// bpoints := bpoints * 1.1 ;
36810: LD_ADDR_VAR 0 10
36814: PUSH
36815: LD_VAR 0 10
36819: PUSH
36820: LD_REAL  1.10000000000000E+0000
36823: MUL
36824: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36825: LD_ADDR_VAR 0 10
36829: PUSH
36830: LD_VAR 0 10
36834: PUSH
36835: LD_VAR 0 6
36839: PPUSH
36840: LD_INT 1
36842: PPUSH
36843: CALL_OW 259
36847: PUSH
36848: LD_REAL  1.15000000000000E+0000
36851: MUL
36852: MUL
36853: ST_TO_ADDR
// end ; unit_vehicle :
36854: GO 37684
36856: LD_INT 2
36858: DOUBLE
36859: EQUAL
36860: IFTRUE 36864
36862: GO 37672
36864: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36865: LD_VAR 0 6
36869: PPUSH
36870: CALL_OW 264
36874: PUSH
36875: LD_INT 2
36877: PUSH
36878: LD_INT 42
36880: PUSH
36881: LD_INT 24
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: LIST
36888: IN
36889: IFFALSE 36910
// points := [ 25 , 5 , 3 ] ;
36891: LD_ADDR_VAR 0 9
36895: PUSH
36896: LD_INT 25
36898: PUSH
36899: LD_INT 5
36901: PUSH
36902: LD_INT 3
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: LIST
36909: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36910: LD_VAR 0 6
36914: PPUSH
36915: CALL_OW 264
36919: PUSH
36920: LD_INT 4
36922: PUSH
36923: LD_INT 43
36925: PUSH
36926: LD_INT 25
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: LIST
36933: IN
36934: IFFALSE 36955
// points := [ 40 , 15 , 5 ] ;
36936: LD_ADDR_VAR 0 9
36940: PUSH
36941: LD_INT 40
36943: PUSH
36944: LD_INT 15
36946: PUSH
36947: LD_INT 5
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: LIST
36954: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36955: LD_VAR 0 6
36959: PPUSH
36960: CALL_OW 264
36964: PUSH
36965: LD_INT 3
36967: PUSH
36968: LD_INT 23
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: IN
36975: IFFALSE 36996
// points := [ 7 , 25 , 8 ] ;
36977: LD_ADDR_VAR 0 9
36981: PUSH
36982: LD_INT 7
36984: PUSH
36985: LD_INT 25
36987: PUSH
36988: LD_INT 8
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: LIST
36995: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36996: LD_VAR 0 6
37000: PPUSH
37001: CALL_OW 264
37005: PUSH
37006: LD_INT 5
37008: PUSH
37009: LD_INT 27
37011: PUSH
37012: LD_INT 44
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: LIST
37019: IN
37020: IFFALSE 37041
// points := [ 14 , 50 , 16 ] ;
37022: LD_ADDR_VAR 0 9
37026: PUSH
37027: LD_INT 14
37029: PUSH
37030: LD_INT 50
37032: PUSH
37033: LD_INT 16
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: LIST
37040: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37041: LD_VAR 0 6
37045: PPUSH
37046: CALL_OW 264
37050: PUSH
37051: LD_INT 6
37053: PUSH
37054: LD_INT 46
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: IN
37061: IFFALSE 37082
// points := [ 32 , 120 , 70 ] ;
37063: LD_ADDR_VAR 0 9
37067: PUSH
37068: LD_INT 32
37070: PUSH
37071: LD_INT 120
37073: PUSH
37074: LD_INT 70
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: LIST
37081: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37082: LD_VAR 0 6
37086: PPUSH
37087: CALL_OW 264
37091: PUSH
37092: LD_INT 7
37094: PUSH
37095: LD_INT 28
37097: PUSH
37098: LD_INT 45
37100: PUSH
37101: LD_INT 92
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: IN
37110: IFFALSE 37131
// points := [ 35 , 20 , 45 ] ;
37112: LD_ADDR_VAR 0 9
37116: PUSH
37117: LD_INT 35
37119: PUSH
37120: LD_INT 20
37122: PUSH
37123: LD_INT 45
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: LIST
37130: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37131: LD_VAR 0 6
37135: PPUSH
37136: CALL_OW 264
37140: PUSH
37141: LD_INT 47
37143: PUSH
37144: EMPTY
37145: LIST
37146: IN
37147: IFFALSE 37168
// points := [ 67 , 45 , 75 ] ;
37149: LD_ADDR_VAR 0 9
37153: PUSH
37154: LD_INT 67
37156: PUSH
37157: LD_INT 45
37159: PUSH
37160: LD_INT 75
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: LIST
37167: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37168: LD_VAR 0 6
37172: PPUSH
37173: CALL_OW 264
37177: PUSH
37178: LD_INT 26
37180: PUSH
37181: EMPTY
37182: LIST
37183: IN
37184: IFFALSE 37205
// points := [ 120 , 30 , 80 ] ;
37186: LD_ADDR_VAR 0 9
37190: PUSH
37191: LD_INT 120
37193: PUSH
37194: LD_INT 30
37196: PUSH
37197: LD_INT 80
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: LIST
37204: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37205: LD_VAR 0 6
37209: PPUSH
37210: CALL_OW 264
37214: PUSH
37215: LD_INT 22
37217: PUSH
37218: EMPTY
37219: LIST
37220: IN
37221: IFFALSE 37242
// points := [ 40 , 1 , 1 ] ;
37223: LD_ADDR_VAR 0 9
37227: PUSH
37228: LD_INT 40
37230: PUSH
37231: LD_INT 1
37233: PUSH
37234: LD_INT 1
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: LIST
37241: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37242: LD_VAR 0 6
37246: PPUSH
37247: CALL_OW 264
37251: PUSH
37252: LD_INT 29
37254: PUSH
37255: EMPTY
37256: LIST
37257: IN
37258: IFFALSE 37279
// points := [ 70 , 200 , 400 ] ;
37260: LD_ADDR_VAR 0 9
37264: PUSH
37265: LD_INT 70
37267: PUSH
37268: LD_INT 200
37270: PUSH
37271: LD_INT 400
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: LIST
37278: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37279: LD_VAR 0 6
37283: PPUSH
37284: CALL_OW 264
37288: PUSH
37289: LD_INT 14
37291: PUSH
37292: LD_INT 53
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: IN
37299: IFFALSE 37320
// points := [ 40 , 10 , 20 ] ;
37301: LD_ADDR_VAR 0 9
37305: PUSH
37306: LD_INT 40
37308: PUSH
37309: LD_INT 10
37311: PUSH
37312: LD_INT 20
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: LIST
37319: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37320: LD_VAR 0 6
37324: PPUSH
37325: CALL_OW 264
37329: PUSH
37330: LD_INT 9
37332: PUSH
37333: EMPTY
37334: LIST
37335: IN
37336: IFFALSE 37357
// points := [ 5 , 70 , 20 ] ;
37338: LD_ADDR_VAR 0 9
37342: PUSH
37343: LD_INT 5
37345: PUSH
37346: LD_INT 70
37348: PUSH
37349: LD_INT 20
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: LIST
37356: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37357: LD_VAR 0 6
37361: PPUSH
37362: CALL_OW 264
37366: PUSH
37367: LD_INT 10
37369: PUSH
37370: EMPTY
37371: LIST
37372: IN
37373: IFFALSE 37394
// points := [ 35 , 110 , 70 ] ;
37375: LD_ADDR_VAR 0 9
37379: PUSH
37380: LD_INT 35
37382: PUSH
37383: LD_INT 110
37385: PUSH
37386: LD_INT 70
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: LIST
37393: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37394: LD_VAR 0 6
37398: PPUSH
37399: CALL_OW 265
37403: PUSH
37404: LD_INT 25
37406: EQUAL
37407: IFFALSE 37428
// points := [ 80 , 65 , 100 ] ;
37409: LD_ADDR_VAR 0 9
37413: PUSH
37414: LD_INT 80
37416: PUSH
37417: LD_INT 65
37419: PUSH
37420: LD_INT 100
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: LIST
37427: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37428: LD_VAR 0 6
37432: PPUSH
37433: CALL_OW 263
37437: PUSH
37438: LD_INT 1
37440: EQUAL
37441: IFFALSE 37476
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37443: LD_ADDR_VAR 0 10
37447: PUSH
37448: LD_VAR 0 10
37452: PUSH
37453: LD_VAR 0 6
37457: PPUSH
37458: CALL_OW 311
37462: PPUSH
37463: LD_INT 3
37465: PPUSH
37466: CALL_OW 259
37470: PUSH
37471: LD_INT 4
37473: MUL
37474: MUL
37475: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37476: LD_VAR 0 6
37480: PPUSH
37481: CALL_OW 263
37485: PUSH
37486: LD_INT 2
37488: EQUAL
37489: IFFALSE 37540
// begin j := IsControledBy ( i ) ;
37491: LD_ADDR_VAR 0 7
37495: PUSH
37496: LD_VAR 0 6
37500: PPUSH
37501: CALL_OW 312
37505: ST_TO_ADDR
// if j then
37506: LD_VAR 0 7
37510: IFFALSE 37540
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37512: LD_ADDR_VAR 0 10
37516: PUSH
37517: LD_VAR 0 10
37521: PUSH
37522: LD_VAR 0 7
37526: PPUSH
37527: LD_INT 3
37529: PPUSH
37530: CALL_OW 259
37534: PUSH
37535: LD_INT 3
37537: MUL
37538: MUL
37539: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37540: LD_VAR 0 6
37544: PPUSH
37545: CALL_OW 264
37549: PUSH
37550: LD_INT 5
37552: PUSH
37553: LD_INT 6
37555: PUSH
37556: LD_INT 46
37558: PUSH
37559: LD_INT 44
37561: PUSH
37562: LD_INT 47
37564: PUSH
37565: LD_INT 45
37567: PUSH
37568: LD_INT 28
37570: PUSH
37571: LD_INT 7
37573: PUSH
37574: LD_INT 27
37576: PUSH
37577: LD_INT 29
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: IN
37592: IFFALSE 37612
37594: PUSH
37595: LD_VAR 0 1
37599: PPUSH
37600: LD_INT 52
37602: PPUSH
37603: CALL_OW 321
37607: PUSH
37608: LD_INT 2
37610: EQUAL
37611: AND
37612: IFFALSE 37629
// bpoints := bpoints * 1.2 ;
37614: LD_ADDR_VAR 0 10
37618: PUSH
37619: LD_VAR 0 10
37623: PUSH
37624: LD_REAL  1.20000000000000E+0000
37627: MUL
37628: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37629: LD_VAR 0 6
37633: PPUSH
37634: CALL_OW 264
37638: PUSH
37639: LD_INT 6
37641: PUSH
37642: LD_INT 46
37644: PUSH
37645: LD_INT 47
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: LIST
37652: IN
37653: IFFALSE 37670
// bpoints := bpoints * 1.2 ;
37655: LD_ADDR_VAR 0 10
37659: PUSH
37660: LD_VAR 0 10
37664: PUSH
37665: LD_REAL  1.20000000000000E+0000
37668: MUL
37669: ST_TO_ADDR
// end ; unit_building :
37670: GO 37684
37672: LD_INT 3
37674: DOUBLE
37675: EQUAL
37676: IFTRUE 37680
37678: GO 37683
37680: POP
// ; end ;
37681: GO 37684
37683: POP
// for j = 1 to 3 do
37684: LD_ADDR_VAR 0 7
37688: PUSH
37689: DOUBLE
37690: LD_INT 1
37692: DEC
37693: ST_TO_ADDR
37694: LD_INT 3
37696: PUSH
37697: FOR_TO
37698: IFFALSE 37751
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37700: LD_ADDR_VAR 0 5
37704: PUSH
37705: LD_VAR 0 5
37709: PPUSH
37710: LD_VAR 0 7
37714: PPUSH
37715: LD_VAR 0 5
37719: PUSH
37720: LD_VAR 0 7
37724: ARRAY
37725: PUSH
37726: LD_VAR 0 9
37730: PUSH
37731: LD_VAR 0 7
37735: ARRAY
37736: PUSH
37737: LD_VAR 0 10
37741: MUL
37742: PLUS
37743: PPUSH
37744: CALL_OW 1
37748: ST_TO_ADDR
37749: GO 37697
37751: POP
37752: POP
// end ;
37753: GO 36226
37755: POP
37756: POP
// result := Replace ( result , 4 , tmp ) ;
37757: LD_ADDR_VAR 0 5
37761: PUSH
37762: LD_VAR 0 5
37766: PPUSH
37767: LD_INT 4
37769: PPUSH
37770: LD_VAR 0 8
37774: PPUSH
37775: CALL_OW 1
37779: ST_TO_ADDR
// end ;
37780: LD_VAR 0 5
37784: RET
// export function DangerAtRange ( unit , range ) ; begin
37785: LD_INT 0
37787: PPUSH
// if not unit then
37788: LD_VAR 0 1
37792: NOT
37793: IFFALSE 37797
// exit ;
37795: GO 37842
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37797: LD_ADDR_VAR 0 3
37801: PUSH
37802: LD_VAR 0 1
37806: PPUSH
37807: CALL_OW 255
37811: PPUSH
37812: LD_VAR 0 1
37816: PPUSH
37817: CALL_OW 250
37821: PPUSH
37822: LD_VAR 0 1
37826: PPUSH
37827: CALL_OW 251
37831: PPUSH
37832: LD_VAR 0 2
37836: PPUSH
37837: CALL 36076 0 4
37841: ST_TO_ADDR
// end ;
37842: LD_VAR 0 3
37846: RET
// export function DangerInArea ( side , area ) ; begin
37847: LD_INT 0
37849: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37850: LD_ADDR_VAR 0 3
37854: PUSH
37855: LD_VAR 0 2
37859: PPUSH
37860: LD_INT 81
37862: PUSH
37863: LD_VAR 0 1
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PPUSH
37872: CALL_OW 70
37876: ST_TO_ADDR
// end ;
37877: LD_VAR 0 3
37881: RET
// export function IsExtension ( b ) ; begin
37882: LD_INT 0
37884: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37885: LD_ADDR_VAR 0 2
37889: PUSH
37890: LD_VAR 0 1
37894: PUSH
37895: LD_INT 23
37897: PUSH
37898: LD_INT 20
37900: PUSH
37901: LD_INT 22
37903: PUSH
37904: LD_INT 17
37906: PUSH
37907: LD_INT 24
37909: PUSH
37910: LD_INT 21
37912: PUSH
37913: LD_INT 19
37915: PUSH
37916: LD_INT 16
37918: PUSH
37919: LD_INT 25
37921: PUSH
37922: LD_INT 18
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: IN
37937: ST_TO_ADDR
// end ;
37938: LD_VAR 0 2
37942: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37943: LD_INT 0
37945: PPUSH
37946: PPUSH
37947: PPUSH
// result := [ ] ;
37948: LD_ADDR_VAR 0 4
37952: PUSH
37953: EMPTY
37954: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37955: LD_ADDR_VAR 0 5
37959: PUSH
37960: LD_VAR 0 2
37964: PPUSH
37965: LD_INT 21
37967: PUSH
37968: LD_INT 3
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PPUSH
37975: CALL_OW 70
37979: ST_TO_ADDR
// if not tmp then
37980: LD_VAR 0 5
37984: NOT
37985: IFFALSE 37989
// exit ;
37987: GO 38053
// if checkLink then
37989: LD_VAR 0 3
37993: IFFALSE 38043
// begin for i in tmp do
37995: LD_ADDR_VAR 0 6
37999: PUSH
38000: LD_VAR 0 5
38004: PUSH
38005: FOR_IN
38006: IFFALSE 38041
// if GetBase ( i ) <> base then
38008: LD_VAR 0 6
38012: PPUSH
38013: CALL_OW 274
38017: PUSH
38018: LD_VAR 0 1
38022: NONEQUAL
38023: IFFALSE 38039
// ComLinkToBase ( base , i ) ;
38025: LD_VAR 0 1
38029: PPUSH
38030: LD_VAR 0 6
38034: PPUSH
38035: CALL_OW 169
38039: GO 38005
38041: POP
38042: POP
// end ; result := tmp ;
38043: LD_ADDR_VAR 0 4
38047: PUSH
38048: LD_VAR 0 5
38052: ST_TO_ADDR
// end ;
38053: LD_VAR 0 4
38057: RET
// export function ComComplete ( units , b ) ; var i ; begin
38058: LD_INT 0
38060: PPUSH
38061: PPUSH
// if not units then
38062: LD_VAR 0 1
38066: NOT
38067: IFFALSE 38071
// exit ;
38069: GO 38161
// for i in units do
38071: LD_ADDR_VAR 0 4
38075: PUSH
38076: LD_VAR 0 1
38080: PUSH
38081: FOR_IN
38082: IFFALSE 38159
// if BuildingStatus ( b ) = bs_build then
38084: LD_VAR 0 2
38088: PPUSH
38089: CALL_OW 461
38093: PUSH
38094: LD_INT 1
38096: EQUAL
38097: IFFALSE 38157
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38099: LD_VAR 0 4
38103: PPUSH
38104: LD_STRING h
38106: PUSH
38107: LD_VAR 0 2
38111: PPUSH
38112: CALL_OW 250
38116: PUSH
38117: LD_VAR 0 2
38121: PPUSH
38122: CALL_OW 251
38126: PUSH
38127: LD_VAR 0 2
38131: PUSH
38132: LD_INT 0
38134: PUSH
38135: LD_INT 0
38137: PUSH
38138: LD_INT 0
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: PUSH
38150: EMPTY
38151: LIST
38152: PPUSH
38153: CALL_OW 446
38157: GO 38081
38159: POP
38160: POP
// end ;
38161: LD_VAR 0 3
38165: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38166: LD_INT 0
38168: PPUSH
38169: PPUSH
38170: PPUSH
38171: PPUSH
38172: PPUSH
38173: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38174: LD_VAR 0 1
38178: NOT
38179: IFTRUE 38196
38181: PUSH
38182: LD_VAR 0 1
38186: PPUSH
38187: CALL_OW 263
38191: PUSH
38192: LD_INT 2
38194: NONEQUAL
38195: OR
38196: IFFALSE 38200
// exit ;
38198: GO 38516
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38200: LD_ADDR_VAR 0 6
38204: PUSH
38205: LD_INT 22
38207: PUSH
38208: LD_VAR 0 1
38212: PPUSH
38213: CALL_OW 255
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 2
38224: PUSH
38225: LD_INT 30
38227: PUSH
38228: LD_INT 36
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 34
38237: PUSH
38238: LD_INT 31
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: LIST
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PPUSH
38254: CALL_OW 69
38258: ST_TO_ADDR
// if not tmp then
38259: LD_VAR 0 6
38263: NOT
38264: IFFALSE 38268
// exit ;
38266: GO 38516
// result := [ ] ;
38268: LD_ADDR_VAR 0 2
38272: PUSH
38273: EMPTY
38274: ST_TO_ADDR
// for i in tmp do
38275: LD_ADDR_VAR 0 3
38279: PUSH
38280: LD_VAR 0 6
38284: PUSH
38285: FOR_IN
38286: IFFALSE 38357
// begin t := UnitsInside ( i ) ;
38288: LD_ADDR_VAR 0 4
38292: PUSH
38293: LD_VAR 0 3
38297: PPUSH
38298: CALL_OW 313
38302: ST_TO_ADDR
// if t then
38303: LD_VAR 0 4
38307: IFFALSE 38355
// for j in t do
38309: LD_ADDR_VAR 0 7
38313: PUSH
38314: LD_VAR 0 4
38318: PUSH
38319: FOR_IN
38320: IFFALSE 38353
// result := Replace ( result , result + 1 , j ) ;
38322: LD_ADDR_VAR 0 2
38326: PUSH
38327: LD_VAR 0 2
38331: PPUSH
38332: LD_VAR 0 2
38336: PUSH
38337: LD_INT 1
38339: PLUS
38340: PPUSH
38341: LD_VAR 0 7
38345: PPUSH
38346: CALL_OW 1
38350: ST_TO_ADDR
38351: GO 38319
38353: POP
38354: POP
// end ;
38355: GO 38285
38357: POP
38358: POP
// if not result then
38359: LD_VAR 0 2
38363: NOT
38364: IFFALSE 38368
// exit ;
38366: GO 38516
// mech := result [ 1 ] ;
38368: LD_ADDR_VAR 0 5
38372: PUSH
38373: LD_VAR 0 2
38377: PUSH
38378: LD_INT 1
38380: ARRAY
38381: ST_TO_ADDR
// if result > 1 then
38382: LD_VAR 0 2
38386: PUSH
38387: LD_INT 1
38389: GREATER
38390: IFFALSE 38502
// begin for i = 2 to result do
38392: LD_ADDR_VAR 0 3
38396: PUSH
38397: DOUBLE
38398: LD_INT 2
38400: DEC
38401: ST_TO_ADDR
38402: LD_VAR 0 2
38406: PUSH
38407: FOR_TO
38408: IFFALSE 38500
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38410: LD_ADDR_VAR 0 4
38414: PUSH
38415: LD_VAR 0 2
38419: PUSH
38420: LD_VAR 0 3
38424: ARRAY
38425: PPUSH
38426: LD_INT 3
38428: PPUSH
38429: CALL_OW 259
38433: PUSH
38434: LD_VAR 0 2
38438: PUSH
38439: LD_VAR 0 3
38443: ARRAY
38444: PPUSH
38445: CALL_OW 432
38449: MINUS
38450: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38451: LD_VAR 0 4
38455: PUSH
38456: LD_VAR 0 5
38460: PPUSH
38461: LD_INT 3
38463: PPUSH
38464: CALL_OW 259
38468: PUSH
38469: LD_VAR 0 5
38473: PPUSH
38474: CALL_OW 432
38478: MINUS
38479: GREATEREQUAL
38480: IFFALSE 38498
// mech := result [ i ] ;
38482: LD_ADDR_VAR 0 5
38486: PUSH
38487: LD_VAR 0 2
38491: PUSH
38492: LD_VAR 0 3
38496: ARRAY
38497: ST_TO_ADDR
// end ;
38498: GO 38407
38500: POP
38501: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38502: LD_VAR 0 1
38506: PPUSH
38507: LD_VAR 0 5
38511: PPUSH
38512: CALL_OW 135
// end ;
38516: LD_VAR 0 2
38520: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38521: LD_INT 0
38523: PPUSH
38524: PPUSH
38525: PPUSH
38526: PPUSH
38527: PPUSH
38528: PPUSH
38529: PPUSH
38530: PPUSH
38531: PPUSH
38532: PPUSH
38533: PPUSH
38534: PPUSH
38535: PPUSH
// result := [ ] ;
38536: LD_ADDR_VAR 0 7
38540: PUSH
38541: EMPTY
38542: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38543: LD_VAR 0 1
38547: PPUSH
38548: CALL_OW 266
38552: PUSH
38553: LD_INT 0
38555: PUSH
38556: LD_INT 1
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: IN
38563: NOT
38564: IFFALSE 38568
// exit ;
38566: GO 40208
// if name then
38568: LD_VAR 0 3
38572: IFFALSE 38588
// SetBName ( base_dep , name ) ;
38574: LD_VAR 0 1
38578: PPUSH
38579: LD_VAR 0 3
38583: PPUSH
38584: CALL_OW 500
// base := GetBase ( base_dep ) ;
38588: LD_ADDR_VAR 0 15
38592: PUSH
38593: LD_VAR 0 1
38597: PPUSH
38598: CALL_OW 274
38602: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38603: LD_ADDR_VAR 0 16
38607: PUSH
38608: LD_VAR 0 1
38612: PPUSH
38613: CALL_OW 255
38617: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38618: LD_ADDR_VAR 0 17
38622: PUSH
38623: LD_VAR 0 1
38627: PPUSH
38628: CALL_OW 248
38632: ST_TO_ADDR
// if sources then
38633: LD_VAR 0 5
38637: IFFALSE 38684
// for i = 1 to 3 do
38639: LD_ADDR_VAR 0 8
38643: PUSH
38644: DOUBLE
38645: LD_INT 1
38647: DEC
38648: ST_TO_ADDR
38649: LD_INT 3
38651: PUSH
38652: FOR_TO
38653: IFFALSE 38682
// AddResourceType ( base , i , sources [ i ] ) ;
38655: LD_VAR 0 15
38659: PPUSH
38660: LD_VAR 0 8
38664: PPUSH
38665: LD_VAR 0 5
38669: PUSH
38670: LD_VAR 0 8
38674: ARRAY
38675: PPUSH
38676: CALL_OW 276
38680: GO 38652
38682: POP
38683: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38684: LD_ADDR_VAR 0 18
38688: PUSH
38689: LD_VAR 0 15
38693: PPUSH
38694: LD_VAR 0 2
38698: PPUSH
38699: LD_INT 1
38701: PPUSH
38702: CALL 37943 0 3
38706: ST_TO_ADDR
// InitHc ;
38707: CALL_OW 19
// InitUc ;
38711: CALL_OW 18
// uc_side := side ;
38715: LD_ADDR_OWVAR 20
38719: PUSH
38720: LD_VAR 0 16
38724: ST_TO_ADDR
// uc_nation := nation ;
38725: LD_ADDR_OWVAR 21
38729: PUSH
38730: LD_VAR 0 17
38734: ST_TO_ADDR
// if buildings then
38735: LD_VAR 0 18
38739: IFFALSE 40067
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38741: LD_ADDR_VAR 0 19
38745: PUSH
38746: LD_VAR 0 18
38750: PPUSH
38751: LD_INT 2
38753: PUSH
38754: LD_INT 30
38756: PUSH
38757: LD_INT 29
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 30
38766: PUSH
38767: LD_INT 30
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: LIST
38778: PPUSH
38779: CALL_OW 72
38783: ST_TO_ADDR
// if tmp then
38784: LD_VAR 0 19
38788: IFFALSE 38836
// for i in tmp do
38790: LD_ADDR_VAR 0 8
38794: PUSH
38795: LD_VAR 0 19
38799: PUSH
38800: FOR_IN
38801: IFFALSE 38834
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38803: LD_VAR 0 8
38807: PPUSH
38808: CALL_OW 250
38812: PPUSH
38813: LD_VAR 0 8
38817: PPUSH
38818: CALL_OW 251
38822: PPUSH
38823: LD_VAR 0 16
38827: PPUSH
38828: CALL_OW 441
38832: GO 38800
38834: POP
38835: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38836: LD_VAR 0 18
38840: PPUSH
38841: LD_INT 2
38843: PUSH
38844: LD_INT 30
38846: PUSH
38847: LD_INT 32
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 30
38856: PUSH
38857: LD_INT 33
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: LIST
38868: PPUSH
38869: CALL_OW 72
38873: IFFALSE 38961
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38875: LD_ADDR_VAR 0 8
38879: PUSH
38880: LD_VAR 0 18
38884: PPUSH
38885: LD_INT 2
38887: PUSH
38888: LD_INT 30
38890: PUSH
38891: LD_INT 32
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 30
38900: PUSH
38901: LD_INT 33
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: LIST
38912: PPUSH
38913: CALL_OW 72
38917: PUSH
38918: FOR_IN
38919: IFFALSE 38959
// begin if not GetBWeapon ( i ) then
38921: LD_VAR 0 8
38925: PPUSH
38926: CALL_OW 269
38930: NOT
38931: IFFALSE 38957
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38933: LD_VAR 0 8
38937: PPUSH
38938: LD_VAR 0 8
38942: PPUSH
38943: LD_VAR 0 2
38947: PPUSH
38948: CALL 40213 0 2
38952: PPUSH
38953: CALL_OW 431
// end ;
38957: GO 38918
38959: POP
38960: POP
// end ; for i = 1 to personel do
38961: LD_ADDR_VAR 0 8
38965: PUSH
38966: DOUBLE
38967: LD_INT 1
38969: DEC
38970: ST_TO_ADDR
38971: LD_VAR 0 6
38975: PUSH
38976: FOR_TO
38977: IFFALSE 40047
// begin if i > 4 then
38979: LD_VAR 0 8
38983: PUSH
38984: LD_INT 4
38986: GREATER
38987: IFFALSE 38991
// break ;
38989: GO 40047
// case i of 1 :
38991: LD_VAR 0 8
38995: PUSH
38996: LD_INT 1
38998: DOUBLE
38999: EQUAL
39000: IFTRUE 39004
39002: GO 39084
39004: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39005: LD_ADDR_VAR 0 12
39009: PUSH
39010: LD_VAR 0 18
39014: PPUSH
39015: LD_INT 22
39017: PUSH
39018: LD_VAR 0 16
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 58
39029: PUSH
39030: EMPTY
39031: LIST
39032: PUSH
39033: LD_INT 2
39035: PUSH
39036: LD_INT 30
39038: PUSH
39039: LD_INT 32
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 30
39048: PUSH
39049: LD_INT 4
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 30
39058: PUSH
39059: LD_INT 5
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: LIST
39076: PPUSH
39077: CALL_OW 72
39081: ST_TO_ADDR
39082: GO 39306
39084: LD_INT 2
39086: DOUBLE
39087: EQUAL
39088: IFTRUE 39092
39090: GO 39154
39092: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39093: LD_ADDR_VAR 0 12
39097: PUSH
39098: LD_VAR 0 18
39102: PPUSH
39103: LD_INT 22
39105: PUSH
39106: LD_VAR 0 16
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 2
39117: PUSH
39118: LD_INT 30
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 30
39130: PUSH
39131: LD_INT 1
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: LIST
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PPUSH
39147: CALL_OW 72
39151: ST_TO_ADDR
39152: GO 39306
39154: LD_INT 3
39156: DOUBLE
39157: EQUAL
39158: IFTRUE 39162
39160: GO 39224
39162: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39163: LD_ADDR_VAR 0 12
39167: PUSH
39168: LD_VAR 0 18
39172: PPUSH
39173: LD_INT 22
39175: PUSH
39176: LD_VAR 0 16
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 2
39187: PUSH
39188: LD_INT 30
39190: PUSH
39191: LD_INT 2
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 30
39200: PUSH
39201: LD_INT 3
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: LIST
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PPUSH
39217: CALL_OW 72
39221: ST_TO_ADDR
39222: GO 39306
39224: LD_INT 4
39226: DOUBLE
39227: EQUAL
39228: IFTRUE 39232
39230: GO 39305
39232: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39233: LD_ADDR_VAR 0 12
39237: PUSH
39238: LD_VAR 0 18
39242: PPUSH
39243: LD_INT 22
39245: PUSH
39246: LD_VAR 0 16
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 2
39257: PUSH
39258: LD_INT 30
39260: PUSH
39261: LD_INT 6
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 30
39270: PUSH
39271: LD_INT 7
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 30
39280: PUSH
39281: LD_INT 8
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PPUSH
39298: CALL_OW 72
39302: ST_TO_ADDR
39303: GO 39306
39305: POP
// if i = 1 then
39306: LD_VAR 0 8
39310: PUSH
39311: LD_INT 1
39313: EQUAL
39314: IFFALSE 39425
// begin tmp := [ ] ;
39316: LD_ADDR_VAR 0 19
39320: PUSH
39321: EMPTY
39322: ST_TO_ADDR
// for j in f do
39323: LD_ADDR_VAR 0 9
39327: PUSH
39328: LD_VAR 0 12
39332: PUSH
39333: FOR_IN
39334: IFFALSE 39407
// if GetBType ( j ) = b_bunker then
39336: LD_VAR 0 9
39340: PPUSH
39341: CALL_OW 266
39345: PUSH
39346: LD_INT 32
39348: EQUAL
39349: IFFALSE 39376
// tmp := Insert ( tmp , 1 , j ) else
39351: LD_ADDR_VAR 0 19
39355: PUSH
39356: LD_VAR 0 19
39360: PPUSH
39361: LD_INT 1
39363: PPUSH
39364: LD_VAR 0 9
39368: PPUSH
39369: CALL_OW 2
39373: ST_TO_ADDR
39374: GO 39405
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39376: LD_ADDR_VAR 0 19
39380: PUSH
39381: LD_VAR 0 19
39385: PPUSH
39386: LD_VAR 0 19
39390: PUSH
39391: LD_INT 1
39393: PLUS
39394: PPUSH
39395: LD_VAR 0 9
39399: PPUSH
39400: CALL_OW 2
39404: ST_TO_ADDR
39405: GO 39333
39407: POP
39408: POP
// if tmp then
39409: LD_VAR 0 19
39413: IFFALSE 39425
// f := tmp ;
39415: LD_ADDR_VAR 0 12
39419: PUSH
39420: LD_VAR 0 19
39424: ST_TO_ADDR
// end ; x := personel [ i ] ;
39425: LD_ADDR_VAR 0 13
39429: PUSH
39430: LD_VAR 0 6
39434: PUSH
39435: LD_VAR 0 8
39439: ARRAY
39440: ST_TO_ADDR
// if x = - 1 then
39441: LD_VAR 0 13
39445: PUSH
39446: LD_INT 1
39448: NEG
39449: EQUAL
39450: IFFALSE 39661
// begin for j in f do
39452: LD_ADDR_VAR 0 9
39456: PUSH
39457: LD_VAR 0 12
39461: PUSH
39462: FOR_IN
39463: IFFALSE 39657
// repeat InitHc ;
39465: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39469: LD_VAR 0 9
39473: PPUSH
39474: CALL_OW 266
39478: PUSH
39479: LD_INT 5
39481: EQUAL
39482: IFFALSE 39552
// begin if UnitsInside ( j ) < 3 then
39484: LD_VAR 0 9
39488: PPUSH
39489: CALL_OW 313
39493: PUSH
39494: LD_INT 3
39496: LESS
39497: IFFALSE 39533
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39499: LD_INT 0
39501: PPUSH
39502: LD_INT 5
39504: PUSH
39505: LD_INT 8
39507: PUSH
39508: LD_INT 9
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: LIST
39515: PUSH
39516: LD_VAR 0 17
39520: ARRAY
39521: PPUSH
39522: LD_VAR 0 4
39526: PPUSH
39527: CALL_OW 380
39531: GO 39550
// PrepareHuman ( false , i , skill ) ;
39533: LD_INT 0
39535: PPUSH
39536: LD_VAR 0 8
39540: PPUSH
39541: LD_VAR 0 4
39545: PPUSH
39546: CALL_OW 380
// end else
39550: GO 39569
// PrepareHuman ( false , i , skill ) ;
39552: LD_INT 0
39554: PPUSH
39555: LD_VAR 0 8
39559: PPUSH
39560: LD_VAR 0 4
39564: PPUSH
39565: CALL_OW 380
// un := CreateHuman ;
39569: LD_ADDR_VAR 0 14
39573: PUSH
39574: CALL_OW 44
39578: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39579: LD_ADDR_VAR 0 7
39583: PUSH
39584: LD_VAR 0 7
39588: PPUSH
39589: LD_INT 1
39591: PPUSH
39592: LD_VAR 0 14
39596: PPUSH
39597: CALL_OW 2
39601: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39602: LD_VAR 0 14
39606: PPUSH
39607: LD_VAR 0 9
39611: PPUSH
39612: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39616: LD_VAR 0 9
39620: PPUSH
39621: CALL_OW 313
39625: PUSH
39626: LD_INT 6
39628: EQUAL
39629: IFTRUE 39653
39631: PUSH
39632: LD_VAR 0 9
39636: PPUSH
39637: CALL_OW 266
39641: PUSH
39642: LD_INT 32
39644: PUSH
39645: LD_INT 31
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: IN
39652: OR
39653: IFFALSE 39465
39655: GO 39462
39657: POP
39658: POP
// end else
39659: GO 40045
// for j = 1 to x do
39661: LD_ADDR_VAR 0 9
39665: PUSH
39666: DOUBLE
39667: LD_INT 1
39669: DEC
39670: ST_TO_ADDR
39671: LD_VAR 0 13
39675: PUSH
39676: FOR_TO
39677: IFFALSE 40043
// begin InitHc ;
39679: CALL_OW 19
// if not f then
39683: LD_VAR 0 12
39687: NOT
39688: IFFALSE 39777
// begin PrepareHuman ( false , i , skill ) ;
39690: LD_INT 0
39692: PPUSH
39693: LD_VAR 0 8
39697: PPUSH
39698: LD_VAR 0 4
39702: PPUSH
39703: CALL_OW 380
// un := CreateHuman ;
39707: LD_ADDR_VAR 0 14
39711: PUSH
39712: CALL_OW 44
39716: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39717: LD_ADDR_VAR 0 7
39721: PUSH
39722: LD_VAR 0 7
39726: PPUSH
39727: LD_INT 1
39729: PPUSH
39730: LD_VAR 0 14
39734: PPUSH
39735: CALL_OW 2
39739: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39740: LD_VAR 0 14
39744: PPUSH
39745: LD_VAR 0 1
39749: PPUSH
39750: CALL_OW 250
39754: PPUSH
39755: LD_VAR 0 1
39759: PPUSH
39760: CALL_OW 251
39764: PPUSH
39765: LD_INT 10
39767: PPUSH
39768: LD_INT 0
39770: PPUSH
39771: CALL_OW 50
// continue ;
39775: GO 39676
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39777: LD_VAR 0 12
39781: PUSH
39782: LD_INT 1
39784: ARRAY
39785: PPUSH
39786: CALL_OW 313
39790: IFFALSE 39818
39792: PUSH
39793: LD_VAR 0 12
39797: PUSH
39798: LD_INT 1
39800: ARRAY
39801: PPUSH
39802: CALL_OW 266
39806: PUSH
39807: LD_INT 32
39809: PUSH
39810: LD_INT 31
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: IN
39817: AND
39818: IFTRUE 39839
39820: PUSH
39821: LD_VAR 0 12
39825: PUSH
39826: LD_INT 1
39828: ARRAY
39829: PPUSH
39830: CALL_OW 313
39834: PUSH
39835: LD_INT 6
39837: EQUAL
39838: OR
39839: IFFALSE 39859
// f := Delete ( f , 1 ) ;
39841: LD_ADDR_VAR 0 12
39845: PUSH
39846: LD_VAR 0 12
39850: PPUSH
39851: LD_INT 1
39853: PPUSH
39854: CALL_OW 3
39858: ST_TO_ADDR
// if not f then
39859: LD_VAR 0 12
39863: NOT
39864: IFFALSE 39882
// begin x := x + 2 ;
39866: LD_ADDR_VAR 0 13
39870: PUSH
39871: LD_VAR 0 13
39875: PUSH
39876: LD_INT 2
39878: PLUS
39879: ST_TO_ADDR
// continue ;
39880: GO 39676
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39882: LD_VAR 0 12
39886: PUSH
39887: LD_INT 1
39889: ARRAY
39890: PPUSH
39891: CALL_OW 266
39895: PUSH
39896: LD_INT 5
39898: EQUAL
39899: IFFALSE 39973
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39901: LD_VAR 0 12
39905: PUSH
39906: LD_INT 1
39908: ARRAY
39909: PPUSH
39910: CALL_OW 313
39914: PUSH
39915: LD_INT 3
39917: LESS
39918: IFFALSE 39954
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39920: LD_INT 0
39922: PPUSH
39923: LD_INT 5
39925: PUSH
39926: LD_INT 8
39928: PUSH
39929: LD_INT 9
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: LIST
39936: PUSH
39937: LD_VAR 0 17
39941: ARRAY
39942: PPUSH
39943: LD_VAR 0 4
39947: PPUSH
39948: CALL_OW 380
39952: GO 39971
// PrepareHuman ( false , i , skill ) ;
39954: LD_INT 0
39956: PPUSH
39957: LD_VAR 0 8
39961: PPUSH
39962: LD_VAR 0 4
39966: PPUSH
39967: CALL_OW 380
// end else
39971: GO 39990
// PrepareHuman ( false , i , skill ) ;
39973: LD_INT 0
39975: PPUSH
39976: LD_VAR 0 8
39980: PPUSH
39981: LD_VAR 0 4
39985: PPUSH
39986: CALL_OW 380
// un := CreateHuman ;
39990: LD_ADDR_VAR 0 14
39994: PUSH
39995: CALL_OW 44
39999: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40000: LD_ADDR_VAR 0 7
40004: PUSH
40005: LD_VAR 0 7
40009: PPUSH
40010: LD_INT 1
40012: PPUSH
40013: LD_VAR 0 14
40017: PPUSH
40018: CALL_OW 2
40022: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40023: LD_VAR 0 14
40027: PPUSH
40028: LD_VAR 0 12
40032: PUSH
40033: LD_INT 1
40035: ARRAY
40036: PPUSH
40037: CALL_OW 52
// end ;
40041: GO 39676
40043: POP
40044: POP
// end ;
40045: GO 38976
40047: POP
40048: POP
// result := result ^ buildings ;
40049: LD_ADDR_VAR 0 7
40053: PUSH
40054: LD_VAR 0 7
40058: PUSH
40059: LD_VAR 0 18
40063: ADD
40064: ST_TO_ADDR
// end else
40065: GO 40208
// begin for i = 1 to personel do
40067: LD_ADDR_VAR 0 8
40071: PUSH
40072: DOUBLE
40073: LD_INT 1
40075: DEC
40076: ST_TO_ADDR
40077: LD_VAR 0 6
40081: PUSH
40082: FOR_TO
40083: IFFALSE 40206
// begin if i > 4 then
40085: LD_VAR 0 8
40089: PUSH
40090: LD_INT 4
40092: GREATER
40093: IFFALSE 40097
// break ;
40095: GO 40206
// x := personel [ i ] ;
40097: LD_ADDR_VAR 0 13
40101: PUSH
40102: LD_VAR 0 6
40106: PUSH
40107: LD_VAR 0 8
40111: ARRAY
40112: ST_TO_ADDR
// if x = - 1 then
40113: LD_VAR 0 13
40117: PUSH
40118: LD_INT 1
40120: NEG
40121: EQUAL
40122: IFFALSE 40126
// continue ;
40124: GO 40082
// PrepareHuman ( false , i , skill ) ;
40126: LD_INT 0
40128: PPUSH
40129: LD_VAR 0 8
40133: PPUSH
40134: LD_VAR 0 4
40138: PPUSH
40139: CALL_OW 380
// un := CreateHuman ;
40143: LD_ADDR_VAR 0 14
40147: PUSH
40148: CALL_OW 44
40152: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40153: LD_VAR 0 14
40157: PPUSH
40158: LD_VAR 0 1
40162: PPUSH
40163: CALL_OW 250
40167: PPUSH
40168: LD_VAR 0 1
40172: PPUSH
40173: CALL_OW 251
40177: PPUSH
40178: LD_INT 10
40180: PPUSH
40181: LD_INT 0
40183: PPUSH
40184: CALL_OW 50
// result := result ^ un ;
40188: LD_ADDR_VAR 0 7
40192: PUSH
40193: LD_VAR 0 7
40197: PUSH
40198: LD_VAR 0 14
40202: ADD
40203: ST_TO_ADDR
// end ;
40204: GO 40082
40206: POP
40207: POP
// end ; end ;
40208: LD_VAR 0 7
40212: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40213: LD_INT 0
40215: PPUSH
40216: PPUSH
40217: PPUSH
40218: PPUSH
40219: PPUSH
40220: PPUSH
40221: PPUSH
40222: PPUSH
40223: PPUSH
40224: PPUSH
40225: PPUSH
40226: PPUSH
40227: PPUSH
40228: PPUSH
40229: PPUSH
40230: PPUSH
// result := false ;
40231: LD_ADDR_VAR 0 3
40235: PUSH
40236: LD_INT 0
40238: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40239: LD_VAR 0 1
40243: NOT
40244: IFTRUE 40269
40246: PUSH
40247: LD_VAR 0 1
40251: PPUSH
40252: CALL_OW 266
40256: PUSH
40257: LD_INT 32
40259: PUSH
40260: LD_INT 33
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: IN
40267: NOT
40268: OR
40269: IFFALSE 40273
// exit ;
40271: GO 41408
// nat := GetNation ( tower ) ;
40273: LD_ADDR_VAR 0 12
40277: PUSH
40278: LD_VAR 0 1
40282: PPUSH
40283: CALL_OW 248
40287: ST_TO_ADDR
// side := GetSide ( tower ) ;
40288: LD_ADDR_VAR 0 16
40292: PUSH
40293: LD_VAR 0 1
40297: PPUSH
40298: CALL_OW 255
40302: ST_TO_ADDR
// x := GetX ( tower ) ;
40303: LD_ADDR_VAR 0 10
40307: PUSH
40308: LD_VAR 0 1
40312: PPUSH
40313: CALL_OW 250
40317: ST_TO_ADDR
// y := GetY ( tower ) ;
40318: LD_ADDR_VAR 0 11
40322: PUSH
40323: LD_VAR 0 1
40327: PPUSH
40328: CALL_OW 251
40332: ST_TO_ADDR
// if not x or not y then
40333: LD_VAR 0 10
40337: NOT
40338: IFTRUE 40347
40340: PUSH
40341: LD_VAR 0 11
40345: NOT
40346: OR
40347: IFFALSE 40351
// exit ;
40349: GO 41408
// weapon := 0 ;
40351: LD_ADDR_VAR 0 18
40355: PUSH
40356: LD_INT 0
40358: ST_TO_ADDR
// fac_list := [ ] ;
40359: LD_ADDR_VAR 0 17
40363: PUSH
40364: EMPTY
40365: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40366: LD_ADDR_VAR 0 6
40370: PUSH
40371: LD_VAR 0 1
40375: PPUSH
40376: CALL_OW 274
40380: PPUSH
40381: LD_VAR 0 2
40385: PPUSH
40386: LD_INT 0
40388: PPUSH
40389: CALL 37943 0 3
40393: PPUSH
40394: LD_INT 30
40396: PUSH
40397: LD_INT 3
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PPUSH
40404: CALL_OW 72
40408: ST_TO_ADDR
// if not factories then
40409: LD_VAR 0 6
40413: NOT
40414: IFFALSE 40418
// exit ;
40416: GO 41408
// for i in factories do
40418: LD_ADDR_VAR 0 8
40422: PUSH
40423: LD_VAR 0 6
40427: PUSH
40428: FOR_IN
40429: IFFALSE 40454
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40431: LD_ADDR_VAR 0 17
40435: PUSH
40436: LD_VAR 0 17
40440: PUSH
40441: LD_VAR 0 8
40445: PPUSH
40446: CALL_OW 478
40450: UNION
40451: ST_TO_ADDR
40452: GO 40428
40454: POP
40455: POP
// if not fac_list then
40456: LD_VAR 0 17
40460: NOT
40461: IFFALSE 40465
// exit ;
40463: GO 41408
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40465: LD_ADDR_VAR 0 5
40469: PUSH
40470: LD_INT 4
40472: PUSH
40473: LD_INT 5
40475: PUSH
40476: LD_INT 9
40478: PUSH
40479: LD_INT 10
40481: PUSH
40482: LD_INT 6
40484: PUSH
40485: LD_INT 7
40487: PUSH
40488: LD_INT 11
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 27
40502: PUSH
40503: LD_INT 28
40505: PUSH
40506: LD_INT 26
40508: PUSH
40509: LD_INT 30
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 43
40520: PUSH
40521: LD_INT 44
40523: PUSH
40524: LD_INT 46
40526: PUSH
40527: LD_INT 45
40529: PUSH
40530: LD_INT 47
40532: PUSH
40533: LD_INT 49
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: LIST
40548: PUSH
40549: LD_VAR 0 12
40553: ARRAY
40554: ST_TO_ADDR
// list := list isect fac_list ;
40555: LD_ADDR_VAR 0 5
40559: PUSH
40560: LD_VAR 0 5
40564: PUSH
40565: LD_VAR 0 17
40569: ISECT
40570: ST_TO_ADDR
// if not list then
40571: LD_VAR 0 5
40575: NOT
40576: IFFALSE 40580
// exit ;
40578: GO 41408
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40580: LD_VAR 0 12
40584: PUSH
40585: LD_INT 3
40587: EQUAL
40588: IFFALSE 40600
40590: PUSH
40591: LD_INT 49
40593: PUSH
40594: LD_VAR 0 5
40598: IN
40599: AND
40600: IFFALSE 40620
40602: PUSH
40603: LD_INT 31
40605: PPUSH
40606: LD_VAR 0 16
40610: PPUSH
40611: CALL_OW 321
40615: PUSH
40616: LD_INT 2
40618: EQUAL
40619: AND
40620: IFFALSE 40680
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40622: LD_INT 22
40624: PUSH
40625: LD_VAR 0 16
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 35
40636: PUSH
40637: LD_INT 49
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 91
40646: PUSH
40647: LD_VAR 0 1
40651: PUSH
40652: LD_INT 10
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: LIST
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: LIST
40664: PPUSH
40665: CALL_OW 69
40669: NOT
40670: IFFALSE 40680
// weapon := ru_time_lapser ;
40672: LD_ADDR_VAR 0 18
40676: PUSH
40677: LD_INT 49
40679: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40680: LD_VAR 0 12
40684: PUSH
40685: LD_INT 1
40687: PUSH
40688: LD_INT 2
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: IN
40695: IFFALSE 40719
40697: PUSH
40698: LD_INT 11
40700: PUSH
40701: LD_VAR 0 5
40705: IN
40706: IFTRUE 40718
40708: PUSH
40709: LD_INT 30
40711: PUSH
40712: LD_VAR 0 5
40716: IN
40717: OR
40718: AND
40719: IFFALSE 40739
40721: PUSH
40722: LD_INT 6
40724: PPUSH
40725: LD_VAR 0 16
40729: PPUSH
40730: CALL_OW 321
40734: PUSH
40735: LD_INT 2
40737: EQUAL
40738: AND
40739: IFFALSE 40906
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40741: LD_INT 22
40743: PUSH
40744: LD_VAR 0 16
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 2
40755: PUSH
40756: LD_INT 35
40758: PUSH
40759: LD_INT 11
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 35
40768: PUSH
40769: LD_INT 30
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 91
40783: PUSH
40784: LD_VAR 0 1
40788: PUSH
40789: LD_INT 18
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: LIST
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: LIST
40801: PPUSH
40802: CALL_OW 69
40806: NOT
40807: IFFALSE 40883
40809: PUSH
40810: LD_INT 22
40812: PUSH
40813: LD_VAR 0 16
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 2
40824: PUSH
40825: LD_INT 30
40827: PUSH
40828: LD_INT 32
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 30
40837: PUSH
40838: LD_INT 33
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 91
40852: PUSH
40853: LD_VAR 0 1
40857: PUSH
40858: LD_INT 12
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: LIST
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: LIST
40870: PUSH
40871: EMPTY
40872: LIST
40873: PPUSH
40874: CALL_OW 69
40878: PUSH
40879: LD_INT 2
40881: GREATER
40882: AND
40883: IFFALSE 40906
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40885: LD_ADDR_VAR 0 18
40889: PUSH
40890: LD_INT 11
40892: PUSH
40893: LD_INT 30
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_VAR 0 12
40904: ARRAY
40905: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40906: LD_VAR 0 18
40910: NOT
40911: IFFALSE 40931
40913: PUSH
40914: LD_INT 40
40916: PPUSH
40917: LD_VAR 0 16
40921: PPUSH
40922: CALL_OW 321
40926: PUSH
40927: LD_INT 2
40929: EQUAL
40930: AND
40931: IFFALSE 40967
40933: PUSH
40934: LD_INT 7
40936: PUSH
40937: LD_VAR 0 5
40941: IN
40942: IFTRUE 40954
40944: PUSH
40945: LD_INT 28
40947: PUSH
40948: LD_VAR 0 5
40952: IN
40953: OR
40954: IFTRUE 40966
40956: PUSH
40957: LD_INT 45
40959: PUSH
40960: LD_VAR 0 5
40964: IN
40965: OR
40966: AND
40967: IFFALSE 41221
// begin hex := GetHexInfo ( x , y ) ;
40969: LD_ADDR_VAR 0 4
40973: PUSH
40974: LD_VAR 0 10
40978: PPUSH
40979: LD_VAR 0 11
40983: PPUSH
40984: CALL_OW 546
40988: ST_TO_ADDR
// if hex [ 1 ] then
40989: LD_VAR 0 4
40993: PUSH
40994: LD_INT 1
40996: ARRAY
40997: IFFALSE 41001
// exit ;
40999: GO 41408
// height := hex [ 2 ] ;
41001: LD_ADDR_VAR 0 15
41005: PUSH
41006: LD_VAR 0 4
41010: PUSH
41011: LD_INT 2
41013: ARRAY
41014: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41015: LD_ADDR_VAR 0 14
41019: PUSH
41020: LD_INT 0
41022: PUSH
41023: LD_INT 2
41025: PUSH
41026: LD_INT 3
41028: PUSH
41029: LD_INT 5
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: ST_TO_ADDR
// for i in tmp do
41038: LD_ADDR_VAR 0 8
41042: PUSH
41043: LD_VAR 0 14
41047: PUSH
41048: FOR_IN
41049: IFFALSE 41219
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41051: LD_ADDR_VAR 0 9
41055: PUSH
41056: LD_VAR 0 10
41060: PPUSH
41061: LD_VAR 0 8
41065: PPUSH
41066: LD_INT 5
41068: PPUSH
41069: CALL_OW 272
41073: PUSH
41074: LD_VAR 0 11
41078: PPUSH
41079: LD_VAR 0 8
41083: PPUSH
41084: LD_INT 5
41086: PPUSH
41087: CALL_OW 273
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41096: LD_VAR 0 9
41100: PUSH
41101: LD_INT 1
41103: ARRAY
41104: PPUSH
41105: LD_VAR 0 9
41109: PUSH
41110: LD_INT 2
41112: ARRAY
41113: PPUSH
41114: CALL_OW 488
41118: IFFALSE 41217
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41120: LD_ADDR_VAR 0 4
41124: PUSH
41125: LD_VAR 0 9
41129: PUSH
41130: LD_INT 1
41132: ARRAY
41133: PPUSH
41134: LD_VAR 0 9
41138: PUSH
41139: LD_INT 2
41141: ARRAY
41142: PPUSH
41143: CALL_OW 546
41147: ST_TO_ADDR
// if hex [ 1 ] then
41148: LD_VAR 0 4
41152: PUSH
41153: LD_INT 1
41155: ARRAY
41156: IFFALSE 41160
// continue ;
41158: GO 41048
// h := hex [ 2 ] ;
41160: LD_ADDR_VAR 0 13
41164: PUSH
41165: LD_VAR 0 4
41169: PUSH
41170: LD_INT 2
41172: ARRAY
41173: ST_TO_ADDR
// if h + 7 < height then
41174: LD_VAR 0 13
41178: PUSH
41179: LD_INT 7
41181: PLUS
41182: PUSH
41183: LD_VAR 0 15
41187: LESS
41188: IFFALSE 41217
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41190: LD_ADDR_VAR 0 18
41194: PUSH
41195: LD_INT 7
41197: PUSH
41198: LD_INT 28
41200: PUSH
41201: LD_INT 45
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: LIST
41208: PUSH
41209: LD_VAR 0 12
41213: ARRAY
41214: ST_TO_ADDR
// break ;
41215: GO 41219
// end ; end ; end ;
41217: GO 41048
41219: POP
41220: POP
// end ; if not weapon then
41221: LD_VAR 0 18
41225: NOT
41226: IFFALSE 41286
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41228: LD_ADDR_VAR 0 5
41232: PUSH
41233: LD_VAR 0 5
41237: PUSH
41238: LD_INT 11
41240: PUSH
41241: LD_INT 30
41243: PUSH
41244: LD_INT 49
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: LIST
41251: DIFF
41252: ST_TO_ADDR
// if not list then
41253: LD_VAR 0 5
41257: NOT
41258: IFFALSE 41262
// exit ;
41260: GO 41408
// weapon := list [ rand ( 1 , list ) ] ;
41262: LD_ADDR_VAR 0 18
41266: PUSH
41267: LD_VAR 0 5
41271: PUSH
41272: LD_INT 1
41274: PPUSH
41275: LD_VAR 0 5
41279: PPUSH
41280: CALL_OW 12
41284: ARRAY
41285: ST_TO_ADDR
// end ; if weapon then
41286: LD_VAR 0 18
41290: IFFALSE 41408
// begin tmp := CostOfWeapon ( weapon ) ;
41292: LD_ADDR_VAR 0 14
41296: PUSH
41297: LD_VAR 0 18
41301: PPUSH
41302: CALL_OW 451
41306: ST_TO_ADDR
// j := GetBase ( tower ) ;
41307: LD_ADDR_VAR 0 9
41311: PUSH
41312: LD_VAR 0 1
41316: PPUSH
41317: CALL_OW 274
41321: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41322: LD_VAR 0 9
41326: PPUSH
41327: LD_INT 1
41329: PPUSH
41330: CALL_OW 275
41334: PUSH
41335: LD_VAR 0 14
41339: PUSH
41340: LD_INT 1
41342: ARRAY
41343: GREATEREQUAL
41344: IFFALSE 41370
41346: PUSH
41347: LD_VAR 0 9
41351: PPUSH
41352: LD_INT 2
41354: PPUSH
41355: CALL_OW 275
41359: PUSH
41360: LD_VAR 0 14
41364: PUSH
41365: LD_INT 2
41367: ARRAY
41368: GREATEREQUAL
41369: AND
41370: IFFALSE 41396
41372: PUSH
41373: LD_VAR 0 9
41377: PPUSH
41378: LD_INT 3
41380: PPUSH
41381: CALL_OW 275
41385: PUSH
41386: LD_VAR 0 14
41390: PUSH
41391: LD_INT 3
41393: ARRAY
41394: GREATEREQUAL
41395: AND
41396: IFFALSE 41408
// result := weapon ;
41398: LD_ADDR_VAR 0 3
41402: PUSH
41403: LD_VAR 0 18
41407: ST_TO_ADDR
// end ; end ;
41408: LD_VAR 0 3
41412: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41413: LD_INT 0
41415: PPUSH
41416: PPUSH
// result := true ;
41417: LD_ADDR_VAR 0 3
41421: PUSH
41422: LD_INT 1
41424: ST_TO_ADDR
// if array1 = array2 then
41425: LD_VAR 0 1
41429: PUSH
41430: LD_VAR 0 2
41434: EQUAL
41435: IFFALSE 41495
// begin for i = 1 to array1 do
41437: LD_ADDR_VAR 0 4
41441: PUSH
41442: DOUBLE
41443: LD_INT 1
41445: DEC
41446: ST_TO_ADDR
41447: LD_VAR 0 1
41451: PUSH
41452: FOR_TO
41453: IFFALSE 41491
// if array1 [ i ] <> array2 [ i ] then
41455: LD_VAR 0 1
41459: PUSH
41460: LD_VAR 0 4
41464: ARRAY
41465: PUSH
41466: LD_VAR 0 2
41470: PUSH
41471: LD_VAR 0 4
41475: ARRAY
41476: NONEQUAL
41477: IFFALSE 41489
// begin result := false ;
41479: LD_ADDR_VAR 0 3
41483: PUSH
41484: LD_INT 0
41486: ST_TO_ADDR
// break ;
41487: GO 41491
// end ;
41489: GO 41452
41491: POP
41492: POP
// end else
41493: GO 41503
// result := false ;
41495: LD_ADDR_VAR 0 3
41499: PUSH
41500: LD_INT 0
41502: ST_TO_ADDR
// end ;
41503: LD_VAR 0 3
41507: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41508: LD_INT 0
41510: PPUSH
41511: PPUSH
// if not array1 or not array2 then
41512: LD_VAR 0 1
41516: NOT
41517: IFTRUE 41526
41519: PUSH
41520: LD_VAR 0 2
41524: NOT
41525: OR
41526: IFFALSE 41530
// exit ;
41528: GO 41594
// result := true ;
41530: LD_ADDR_VAR 0 3
41534: PUSH
41535: LD_INT 1
41537: ST_TO_ADDR
// for i = 1 to array1 do
41538: LD_ADDR_VAR 0 4
41542: PUSH
41543: DOUBLE
41544: LD_INT 1
41546: DEC
41547: ST_TO_ADDR
41548: LD_VAR 0 1
41552: PUSH
41553: FOR_TO
41554: IFFALSE 41592
// if array1 [ i ] <> array2 [ i ] then
41556: LD_VAR 0 1
41560: PUSH
41561: LD_VAR 0 4
41565: ARRAY
41566: PUSH
41567: LD_VAR 0 2
41571: PUSH
41572: LD_VAR 0 4
41576: ARRAY
41577: NONEQUAL
41578: IFFALSE 41590
// begin result := false ;
41580: LD_ADDR_VAR 0 3
41584: PUSH
41585: LD_INT 0
41587: ST_TO_ADDR
// break ;
41588: GO 41592
// end ;
41590: GO 41553
41592: POP
41593: POP
// end ;
41594: LD_VAR 0 3
41598: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41599: LD_INT 0
41601: PPUSH
41602: PPUSH
41603: PPUSH
// pom := GetBase ( fac ) ;
41604: LD_ADDR_VAR 0 5
41608: PUSH
41609: LD_VAR 0 1
41613: PPUSH
41614: CALL_OW 274
41618: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41619: LD_ADDR_VAR 0 4
41623: PUSH
41624: LD_VAR 0 2
41628: PUSH
41629: LD_INT 1
41631: ARRAY
41632: PPUSH
41633: LD_VAR 0 2
41637: PUSH
41638: LD_INT 2
41640: ARRAY
41641: PPUSH
41642: LD_VAR 0 2
41646: PUSH
41647: LD_INT 3
41649: ARRAY
41650: PPUSH
41651: LD_VAR 0 2
41655: PUSH
41656: LD_INT 4
41658: ARRAY
41659: PPUSH
41660: CALL_OW 449
41664: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41665: LD_ADDR_VAR 0 3
41669: PUSH
41670: LD_VAR 0 5
41674: PPUSH
41675: LD_INT 1
41677: PPUSH
41678: CALL_OW 275
41682: PUSH
41683: LD_VAR 0 4
41687: PUSH
41688: LD_INT 1
41690: ARRAY
41691: GREATEREQUAL
41692: IFFALSE 41718
41694: PUSH
41695: LD_VAR 0 5
41699: PPUSH
41700: LD_INT 2
41702: PPUSH
41703: CALL_OW 275
41707: PUSH
41708: LD_VAR 0 4
41712: PUSH
41713: LD_INT 2
41715: ARRAY
41716: GREATEREQUAL
41717: AND
41718: IFFALSE 41744
41720: PUSH
41721: LD_VAR 0 5
41725: PPUSH
41726: LD_INT 3
41728: PPUSH
41729: CALL_OW 275
41733: PUSH
41734: LD_VAR 0 4
41738: PUSH
41739: LD_INT 3
41741: ARRAY
41742: GREATEREQUAL
41743: AND
41744: ST_TO_ADDR
// end ;
41745: LD_VAR 0 3
41749: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41750: LD_INT 0
41752: PPUSH
41753: PPUSH
41754: PPUSH
41755: PPUSH
// pom := GetBase ( building ) ;
41756: LD_ADDR_VAR 0 3
41760: PUSH
41761: LD_VAR 0 1
41765: PPUSH
41766: CALL_OW 274
41770: ST_TO_ADDR
// if not pom then
41771: LD_VAR 0 3
41775: NOT
41776: IFFALSE 41780
// exit ;
41778: GO 41954
// btype := GetBType ( building ) ;
41780: LD_ADDR_VAR 0 5
41784: PUSH
41785: LD_VAR 0 1
41789: PPUSH
41790: CALL_OW 266
41794: ST_TO_ADDR
// if btype = b_armoury then
41795: LD_VAR 0 5
41799: PUSH
41800: LD_INT 4
41802: EQUAL
41803: IFFALSE 41813
// btype := b_barracks ;
41805: LD_ADDR_VAR 0 5
41809: PUSH
41810: LD_INT 5
41812: ST_TO_ADDR
// if btype = b_depot then
41813: LD_VAR 0 5
41817: PUSH
41818: LD_INT 0
41820: EQUAL
41821: IFFALSE 41831
// btype := b_warehouse ;
41823: LD_ADDR_VAR 0 5
41827: PUSH
41828: LD_INT 1
41830: ST_TO_ADDR
// if btype = b_workshop then
41831: LD_VAR 0 5
41835: PUSH
41836: LD_INT 2
41838: EQUAL
41839: IFFALSE 41849
// btype := b_factory ;
41841: LD_ADDR_VAR 0 5
41845: PUSH
41846: LD_INT 3
41848: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41849: LD_ADDR_VAR 0 4
41853: PUSH
41854: LD_VAR 0 5
41858: PPUSH
41859: LD_VAR 0 1
41863: PPUSH
41864: CALL_OW 248
41868: PPUSH
41869: CALL_OW 450
41873: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41874: LD_ADDR_VAR 0 2
41878: PUSH
41879: LD_VAR 0 3
41883: PPUSH
41884: LD_INT 1
41886: PPUSH
41887: CALL_OW 275
41891: PUSH
41892: LD_VAR 0 4
41896: PUSH
41897: LD_INT 1
41899: ARRAY
41900: GREATEREQUAL
41901: IFFALSE 41927
41903: PUSH
41904: LD_VAR 0 3
41908: PPUSH
41909: LD_INT 2
41911: PPUSH
41912: CALL_OW 275
41916: PUSH
41917: LD_VAR 0 4
41921: PUSH
41922: LD_INT 2
41924: ARRAY
41925: GREATEREQUAL
41926: AND
41927: IFFALSE 41953
41929: PUSH
41930: LD_VAR 0 3
41934: PPUSH
41935: LD_INT 3
41937: PPUSH
41938: CALL_OW 275
41942: PUSH
41943: LD_VAR 0 4
41947: PUSH
41948: LD_INT 3
41950: ARRAY
41951: GREATEREQUAL
41952: AND
41953: ST_TO_ADDR
// end ;
41954: LD_VAR 0 2
41958: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41959: LD_INT 0
41961: PPUSH
41962: PPUSH
41963: PPUSH
// pom := GetBase ( building ) ;
41964: LD_ADDR_VAR 0 4
41968: PUSH
41969: LD_VAR 0 1
41973: PPUSH
41974: CALL_OW 274
41978: ST_TO_ADDR
// if not pom then
41979: LD_VAR 0 4
41983: NOT
41984: IFFALSE 41988
// exit ;
41986: GO 42093
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41988: LD_ADDR_VAR 0 5
41992: PUSH
41993: LD_VAR 0 2
41997: PPUSH
41998: LD_VAR 0 1
42002: PPUSH
42003: CALL_OW 248
42007: PPUSH
42008: CALL_OW 450
42012: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42013: LD_ADDR_VAR 0 3
42017: PUSH
42018: LD_VAR 0 4
42022: PPUSH
42023: LD_INT 1
42025: PPUSH
42026: CALL_OW 275
42030: PUSH
42031: LD_VAR 0 5
42035: PUSH
42036: LD_INT 1
42038: ARRAY
42039: GREATEREQUAL
42040: IFFALSE 42066
42042: PUSH
42043: LD_VAR 0 4
42047: PPUSH
42048: LD_INT 2
42050: PPUSH
42051: CALL_OW 275
42055: PUSH
42056: LD_VAR 0 5
42060: PUSH
42061: LD_INT 2
42063: ARRAY
42064: GREATEREQUAL
42065: AND
42066: IFFALSE 42092
42068: PUSH
42069: LD_VAR 0 4
42073: PPUSH
42074: LD_INT 3
42076: PPUSH
42077: CALL_OW 275
42081: PUSH
42082: LD_VAR 0 5
42086: PUSH
42087: LD_INT 3
42089: ARRAY
42090: GREATEREQUAL
42091: AND
42092: ST_TO_ADDR
// end ;
42093: LD_VAR 0 3
42097: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42098: LD_INT 0
42100: PPUSH
42101: PPUSH
42102: PPUSH
42103: PPUSH
42104: PPUSH
42105: PPUSH
42106: PPUSH
42107: PPUSH
42108: PPUSH
42109: PPUSH
42110: PPUSH
// result := false ;
42111: LD_ADDR_VAR 0 8
42115: PUSH
42116: LD_INT 0
42118: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42119: LD_VAR 0 5
42123: NOT
42124: IFTRUE 42133
42126: PUSH
42127: LD_VAR 0 1
42131: NOT
42132: OR
42133: IFTRUE 42142
42135: PUSH
42136: LD_VAR 0 2
42140: NOT
42141: OR
42142: IFTRUE 42151
42144: PUSH
42145: LD_VAR 0 3
42149: NOT
42150: OR
42151: IFFALSE 42155
// exit ;
42153: GO 42981
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42155: LD_ADDR_VAR 0 14
42159: PUSH
42160: LD_VAR 0 1
42164: PPUSH
42165: LD_VAR 0 2
42169: PPUSH
42170: LD_VAR 0 3
42174: PPUSH
42175: LD_VAR 0 4
42179: PPUSH
42180: LD_VAR 0 5
42184: PUSH
42185: LD_INT 1
42187: ARRAY
42188: PPUSH
42189: CALL_OW 248
42193: PPUSH
42194: LD_INT 0
42196: PPUSH
42197: CALL 44262 0 6
42201: ST_TO_ADDR
// if not hexes then
42202: LD_VAR 0 14
42206: NOT
42207: IFFALSE 42211
// exit ;
42209: GO 42981
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42211: LD_ADDR_VAR 0 17
42215: PUSH
42216: LD_VAR 0 5
42220: PPUSH
42221: LD_INT 22
42223: PUSH
42224: LD_VAR 0 13
42228: PPUSH
42229: CALL_OW 255
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 2
42240: PUSH
42241: LD_INT 30
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 30
42253: PUSH
42254: LD_INT 1
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: LIST
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PPUSH
42270: CALL_OW 72
42274: ST_TO_ADDR
// for i = 1 to hexes do
42275: LD_ADDR_VAR 0 9
42279: PUSH
42280: DOUBLE
42281: LD_INT 1
42283: DEC
42284: ST_TO_ADDR
42285: LD_VAR 0 14
42289: PUSH
42290: FOR_TO
42291: IFFALSE 42979
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42293: LD_ADDR_VAR 0 13
42297: PUSH
42298: LD_VAR 0 14
42302: PUSH
42303: LD_VAR 0 9
42307: ARRAY
42308: PUSH
42309: LD_INT 1
42311: ARRAY
42312: PPUSH
42313: LD_VAR 0 14
42317: PUSH
42318: LD_VAR 0 9
42322: ARRAY
42323: PUSH
42324: LD_INT 2
42326: ARRAY
42327: PPUSH
42328: CALL_OW 428
42332: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42333: LD_VAR 0 14
42337: PUSH
42338: LD_VAR 0 9
42342: ARRAY
42343: PUSH
42344: LD_INT 1
42346: ARRAY
42347: PPUSH
42348: LD_VAR 0 14
42352: PUSH
42353: LD_VAR 0 9
42357: ARRAY
42358: PUSH
42359: LD_INT 2
42361: ARRAY
42362: PPUSH
42363: CALL_OW 351
42367: IFTRUE 42406
42369: PUSH
42370: LD_VAR 0 14
42374: PUSH
42375: LD_VAR 0 9
42379: ARRAY
42380: PUSH
42381: LD_INT 1
42383: ARRAY
42384: PPUSH
42385: LD_VAR 0 14
42389: PUSH
42390: LD_VAR 0 9
42394: ARRAY
42395: PUSH
42396: LD_INT 2
42398: ARRAY
42399: PPUSH
42400: CALL_OW 488
42404: NOT
42405: OR
42406: IFTRUE 42423
42408: PUSH
42409: LD_VAR 0 13
42413: PPUSH
42414: CALL_OW 247
42418: PUSH
42419: LD_INT 3
42421: EQUAL
42422: OR
42423: IFFALSE 42429
// exit ;
42425: POP
42426: POP
42427: GO 42981
// if not tmp then
42429: LD_VAR 0 13
42433: NOT
42434: IFFALSE 42438
// continue ;
42436: GO 42290
// result := true ;
42438: LD_ADDR_VAR 0 8
42442: PUSH
42443: LD_INT 1
42445: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42446: LD_VAR 0 6
42450: IFFALSE 42467
42452: PUSH
42453: LD_VAR 0 13
42457: PPUSH
42458: CALL_OW 247
42462: PUSH
42463: LD_INT 2
42465: EQUAL
42466: AND
42467: IFFALSE 42484
42469: PUSH
42470: LD_VAR 0 13
42474: PPUSH
42475: CALL_OW 263
42479: PUSH
42480: LD_INT 1
42482: EQUAL
42483: AND
42484: IFFALSE 42648
// begin if IsDrivenBy ( tmp ) then
42486: LD_VAR 0 13
42490: PPUSH
42491: CALL_OW 311
42495: IFFALSE 42499
// continue ;
42497: GO 42290
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42499: LD_VAR 0 6
42503: PPUSH
42504: LD_INT 3
42506: PUSH
42507: LD_INT 60
42509: PUSH
42510: EMPTY
42511: LIST
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 3
42519: PUSH
42520: LD_INT 55
42522: PUSH
42523: EMPTY
42524: LIST
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PPUSH
42534: CALL_OW 72
42538: IFFALSE 42646
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42540: LD_ADDR_VAR 0 18
42544: PUSH
42545: LD_VAR 0 6
42549: PPUSH
42550: LD_INT 3
42552: PUSH
42553: LD_INT 60
42555: PUSH
42556: EMPTY
42557: LIST
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 3
42565: PUSH
42566: LD_INT 55
42568: PUSH
42569: EMPTY
42570: LIST
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PPUSH
42580: CALL_OW 72
42584: PUSH
42585: LD_INT 1
42587: ARRAY
42588: ST_TO_ADDR
// if IsInUnit ( driver ) then
42589: LD_VAR 0 18
42593: PPUSH
42594: CALL_OW 310
42598: IFFALSE 42609
// ComExit ( driver ) ;
42600: LD_VAR 0 18
42604: PPUSH
42605: CALL 68252 0 1
// AddComEnterUnit ( driver , tmp ) ;
42609: LD_VAR 0 18
42613: PPUSH
42614: LD_VAR 0 13
42618: PPUSH
42619: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42623: LD_VAR 0 18
42627: PPUSH
42628: LD_VAR 0 7
42632: PPUSH
42633: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42637: LD_VAR 0 18
42641: PPUSH
42642: CALL_OW 181
// end ; continue ;
42646: GO 42290
// end ; if not cleaners or not tmp in cleaners then
42648: LD_VAR 0 6
42652: NOT
42653: IFTRUE 42668
42655: PUSH
42656: LD_VAR 0 13
42660: PUSH
42661: LD_VAR 0 6
42665: IN
42666: NOT
42667: OR
42668: IFFALSE 42977
// begin if dep then
42670: LD_VAR 0 17
42674: IFFALSE 42810
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42676: LD_ADDR_VAR 0 16
42680: PUSH
42681: LD_VAR 0 17
42685: PUSH
42686: LD_INT 1
42688: ARRAY
42689: PPUSH
42690: CALL_OW 250
42694: PPUSH
42695: LD_VAR 0 17
42699: PUSH
42700: LD_INT 1
42702: ARRAY
42703: PPUSH
42704: CALL_OW 254
42708: PPUSH
42709: LD_INT 5
42711: PPUSH
42712: CALL_OW 272
42716: PUSH
42717: LD_VAR 0 17
42721: PUSH
42722: LD_INT 1
42724: ARRAY
42725: PPUSH
42726: CALL_OW 251
42730: PPUSH
42731: LD_VAR 0 17
42735: PUSH
42736: LD_INT 1
42738: ARRAY
42739: PPUSH
42740: CALL_OW 254
42744: PPUSH
42745: LD_INT 5
42747: PPUSH
42748: CALL_OW 273
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42757: LD_VAR 0 16
42761: PUSH
42762: LD_INT 1
42764: ARRAY
42765: PPUSH
42766: LD_VAR 0 16
42770: PUSH
42771: LD_INT 2
42773: ARRAY
42774: PPUSH
42775: CALL_OW 488
42779: IFFALSE 42810
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42781: LD_VAR 0 13
42785: PPUSH
42786: LD_VAR 0 16
42790: PUSH
42791: LD_INT 1
42793: ARRAY
42794: PPUSH
42795: LD_VAR 0 16
42799: PUSH
42800: LD_INT 2
42802: ARRAY
42803: PPUSH
42804: CALL_OW 111
// continue ;
42808: GO 42290
// end ; end ; r := GetDir ( tmp ) ;
42810: LD_ADDR_VAR 0 15
42814: PUSH
42815: LD_VAR 0 13
42819: PPUSH
42820: CALL_OW 254
42824: ST_TO_ADDR
// if r = 5 then
42825: LD_VAR 0 15
42829: PUSH
42830: LD_INT 5
42832: EQUAL
42833: IFFALSE 42843
// r := 0 ;
42835: LD_ADDR_VAR 0 15
42839: PUSH
42840: LD_INT 0
42842: ST_TO_ADDR
// for j = r to 5 do
42843: LD_ADDR_VAR 0 10
42847: PUSH
42848: DOUBLE
42849: LD_VAR 0 15
42853: DEC
42854: ST_TO_ADDR
42855: LD_INT 5
42857: PUSH
42858: FOR_TO
42859: IFFALSE 42975
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42861: LD_ADDR_VAR 0 11
42865: PUSH
42866: LD_VAR 0 13
42870: PPUSH
42871: CALL_OW 250
42875: PPUSH
42876: LD_VAR 0 10
42880: PPUSH
42881: LD_INT 2
42883: PPUSH
42884: CALL_OW 272
42888: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42889: LD_ADDR_VAR 0 12
42893: PUSH
42894: LD_VAR 0 13
42898: PPUSH
42899: CALL_OW 251
42903: PPUSH
42904: LD_VAR 0 10
42908: PPUSH
42909: LD_INT 2
42911: PPUSH
42912: CALL_OW 273
42916: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42917: LD_VAR 0 11
42921: PPUSH
42922: LD_VAR 0 12
42926: PPUSH
42927: CALL_OW 488
42931: IFFALSE 42950
42933: PUSH
42934: LD_VAR 0 11
42938: PPUSH
42939: LD_VAR 0 12
42943: PPUSH
42944: CALL_OW 428
42948: NOT
42949: AND
42950: IFFALSE 42973
// begin ComMoveXY ( tmp , _x , _y ) ;
42952: LD_VAR 0 13
42956: PPUSH
42957: LD_VAR 0 11
42961: PPUSH
42962: LD_VAR 0 12
42966: PPUSH
42967: CALL_OW 111
// break ;
42971: GO 42975
// end ; end ;
42973: GO 42858
42975: POP
42976: POP
// end ; end ;
42977: GO 42290
42979: POP
42980: POP
// end ;
42981: LD_VAR 0 8
42985: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42986: LD_INT 0
42988: PPUSH
// result := true ;
42989: LD_ADDR_VAR 0 3
42993: PUSH
42994: LD_INT 1
42996: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42997: LD_VAR 0 2
43001: PUSH
43002: LD_INT 24
43004: DOUBLE
43005: EQUAL
43006: IFTRUE 43016
43008: LD_INT 33
43010: DOUBLE
43011: EQUAL
43012: IFTRUE 43016
43014: GO 43041
43016: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43017: LD_ADDR_VAR 0 3
43021: PUSH
43022: LD_INT 32
43024: PPUSH
43025: LD_VAR 0 1
43029: PPUSH
43030: CALL_OW 321
43034: PUSH
43035: LD_INT 2
43037: EQUAL
43038: ST_TO_ADDR
43039: GO 43357
43041: LD_INT 20
43043: DOUBLE
43044: EQUAL
43045: IFTRUE 43049
43047: GO 43074
43049: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43050: LD_ADDR_VAR 0 3
43054: PUSH
43055: LD_INT 6
43057: PPUSH
43058: LD_VAR 0 1
43062: PPUSH
43063: CALL_OW 321
43067: PUSH
43068: LD_INT 2
43070: EQUAL
43071: ST_TO_ADDR
43072: GO 43357
43074: LD_INT 22
43076: DOUBLE
43077: EQUAL
43078: IFTRUE 43088
43080: LD_INT 36
43082: DOUBLE
43083: EQUAL
43084: IFTRUE 43088
43086: GO 43113
43088: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43089: LD_ADDR_VAR 0 3
43093: PUSH
43094: LD_INT 15
43096: PPUSH
43097: LD_VAR 0 1
43101: PPUSH
43102: CALL_OW 321
43106: PUSH
43107: LD_INT 2
43109: EQUAL
43110: ST_TO_ADDR
43111: GO 43357
43113: LD_INT 30
43115: DOUBLE
43116: EQUAL
43117: IFTRUE 43121
43119: GO 43146
43121: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43122: LD_ADDR_VAR 0 3
43126: PUSH
43127: LD_INT 20
43129: PPUSH
43130: LD_VAR 0 1
43134: PPUSH
43135: CALL_OW 321
43139: PUSH
43140: LD_INT 2
43142: EQUAL
43143: ST_TO_ADDR
43144: GO 43357
43146: LD_INT 28
43148: DOUBLE
43149: EQUAL
43150: IFTRUE 43160
43152: LD_INT 21
43154: DOUBLE
43155: EQUAL
43156: IFTRUE 43160
43158: GO 43185
43160: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43161: LD_ADDR_VAR 0 3
43165: PUSH
43166: LD_INT 21
43168: PPUSH
43169: LD_VAR 0 1
43173: PPUSH
43174: CALL_OW 321
43178: PUSH
43179: LD_INT 2
43181: EQUAL
43182: ST_TO_ADDR
43183: GO 43357
43185: LD_INT 16
43187: DOUBLE
43188: EQUAL
43189: IFTRUE 43193
43191: GO 43218
43193: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43194: LD_ADDR_VAR 0 3
43198: PUSH
43199: LD_INT 84
43201: PPUSH
43202: LD_VAR 0 1
43206: PPUSH
43207: CALL_OW 321
43211: PUSH
43212: LD_INT 2
43214: EQUAL
43215: ST_TO_ADDR
43216: GO 43357
43218: LD_INT 19
43220: DOUBLE
43221: EQUAL
43222: IFTRUE 43232
43224: LD_INT 23
43226: DOUBLE
43227: EQUAL
43228: IFTRUE 43232
43230: GO 43257
43232: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43233: LD_ADDR_VAR 0 3
43237: PUSH
43238: LD_INT 83
43240: PPUSH
43241: LD_VAR 0 1
43245: PPUSH
43246: CALL_OW 321
43250: PUSH
43251: LD_INT 2
43253: EQUAL
43254: ST_TO_ADDR
43255: GO 43357
43257: LD_INT 17
43259: DOUBLE
43260: EQUAL
43261: IFTRUE 43265
43263: GO 43290
43265: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43266: LD_ADDR_VAR 0 3
43270: PUSH
43271: LD_INT 39
43273: PPUSH
43274: LD_VAR 0 1
43278: PPUSH
43279: CALL_OW 321
43283: PUSH
43284: LD_INT 2
43286: EQUAL
43287: ST_TO_ADDR
43288: GO 43357
43290: LD_INT 18
43292: DOUBLE
43293: EQUAL
43294: IFTRUE 43298
43296: GO 43323
43298: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43299: LD_ADDR_VAR 0 3
43303: PUSH
43304: LD_INT 40
43306: PPUSH
43307: LD_VAR 0 1
43311: PPUSH
43312: CALL_OW 321
43316: PUSH
43317: LD_INT 2
43319: EQUAL
43320: ST_TO_ADDR
43321: GO 43357
43323: LD_INT 27
43325: DOUBLE
43326: EQUAL
43327: IFTRUE 43331
43329: GO 43356
43331: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43332: LD_ADDR_VAR 0 3
43336: PUSH
43337: LD_INT 35
43339: PPUSH
43340: LD_VAR 0 1
43344: PPUSH
43345: CALL_OW 321
43349: PUSH
43350: LD_INT 2
43352: EQUAL
43353: ST_TO_ADDR
43354: GO 43357
43356: POP
// end ;
43357: LD_VAR 0 3
43361: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43362: LD_INT 0
43364: PPUSH
43365: PPUSH
43366: PPUSH
43367: PPUSH
43368: PPUSH
43369: PPUSH
43370: PPUSH
43371: PPUSH
43372: PPUSH
43373: PPUSH
43374: PPUSH
// result := false ;
43375: LD_ADDR_VAR 0 6
43379: PUSH
43380: LD_INT 0
43382: ST_TO_ADDR
// if btype = b_depot then
43383: LD_VAR 0 2
43387: PUSH
43388: LD_INT 0
43390: EQUAL
43391: IFFALSE 43403
// begin result := true ;
43393: LD_ADDR_VAR 0 6
43397: PUSH
43398: LD_INT 1
43400: ST_TO_ADDR
// exit ;
43401: GO 44257
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43403: LD_VAR 0 1
43407: NOT
43408: IFTRUE 43433
43410: PUSH
43411: LD_VAR 0 1
43415: PPUSH
43416: CALL_OW 266
43420: PUSH
43421: LD_INT 0
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: IN
43431: NOT
43432: OR
43433: IFTRUE 43442
43435: PUSH
43436: LD_VAR 0 2
43440: NOT
43441: OR
43442: IFTRUE 43478
43444: PUSH
43445: LD_VAR 0 5
43449: PUSH
43450: LD_INT 0
43452: PUSH
43453: LD_INT 1
43455: PUSH
43456: LD_INT 2
43458: PUSH
43459: LD_INT 3
43461: PUSH
43462: LD_INT 4
43464: PUSH
43465: LD_INT 5
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: IN
43476: NOT
43477: OR
43478: IFTRUE 43497
43480: PUSH
43481: LD_VAR 0 3
43485: PPUSH
43486: LD_VAR 0 4
43490: PPUSH
43491: CALL_OW 488
43495: NOT
43496: OR
43497: IFFALSE 43501
// exit ;
43499: GO 44257
// side := GetSide ( depot ) ;
43501: LD_ADDR_VAR 0 9
43505: PUSH
43506: LD_VAR 0 1
43510: PPUSH
43511: CALL_OW 255
43515: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43516: LD_VAR 0 9
43520: PPUSH
43521: LD_VAR 0 2
43525: PPUSH
43526: CALL 42986 0 2
43530: NOT
43531: IFFALSE 43535
// exit ;
43533: GO 44257
// pom := GetBase ( depot ) ;
43535: LD_ADDR_VAR 0 10
43539: PUSH
43540: LD_VAR 0 1
43544: PPUSH
43545: CALL_OW 274
43549: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43550: LD_ADDR_VAR 0 11
43554: PUSH
43555: LD_VAR 0 2
43559: PPUSH
43560: LD_VAR 0 1
43564: PPUSH
43565: CALL_OW 248
43569: PPUSH
43570: CALL_OW 450
43574: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43575: LD_VAR 0 10
43579: PPUSH
43580: LD_INT 1
43582: PPUSH
43583: CALL_OW 275
43587: PUSH
43588: LD_VAR 0 11
43592: PUSH
43593: LD_INT 1
43595: ARRAY
43596: GREATEREQUAL
43597: IFFALSE 43623
43599: PUSH
43600: LD_VAR 0 10
43604: PPUSH
43605: LD_INT 2
43607: PPUSH
43608: CALL_OW 275
43612: PUSH
43613: LD_VAR 0 11
43617: PUSH
43618: LD_INT 2
43620: ARRAY
43621: GREATEREQUAL
43622: AND
43623: IFFALSE 43649
43625: PUSH
43626: LD_VAR 0 10
43630: PPUSH
43631: LD_INT 3
43633: PPUSH
43634: CALL_OW 275
43638: PUSH
43639: LD_VAR 0 11
43643: PUSH
43644: LD_INT 3
43646: ARRAY
43647: GREATEREQUAL
43648: AND
43649: NOT
43650: IFFALSE 43654
// exit ;
43652: GO 44257
// if GetBType ( depot ) = b_depot then
43654: LD_VAR 0 1
43658: PPUSH
43659: CALL_OW 266
43663: PUSH
43664: LD_INT 0
43666: EQUAL
43667: IFFALSE 43679
// dist := 28 else
43669: LD_ADDR_VAR 0 14
43673: PUSH
43674: LD_INT 28
43676: ST_TO_ADDR
43677: GO 43687
// dist := 36 ;
43679: LD_ADDR_VAR 0 14
43683: PUSH
43684: LD_INT 36
43686: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43687: LD_VAR 0 1
43691: PPUSH
43692: LD_VAR 0 3
43696: PPUSH
43697: LD_VAR 0 4
43701: PPUSH
43702: CALL_OW 297
43706: PUSH
43707: LD_VAR 0 14
43711: GREATER
43712: IFFALSE 43716
// exit ;
43714: GO 44257
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43716: LD_ADDR_VAR 0 12
43720: PUSH
43721: LD_VAR 0 2
43725: PPUSH
43726: LD_VAR 0 3
43730: PPUSH
43731: LD_VAR 0 4
43735: PPUSH
43736: LD_VAR 0 5
43740: PPUSH
43741: LD_VAR 0 1
43745: PPUSH
43746: CALL_OW 248
43750: PPUSH
43751: LD_INT 0
43753: PPUSH
43754: CALL 44262 0 6
43758: ST_TO_ADDR
// if not hexes then
43759: LD_VAR 0 12
43763: NOT
43764: IFFALSE 43768
// exit ;
43766: GO 44257
// hex := GetHexInfo ( x , y ) ;
43768: LD_ADDR_VAR 0 15
43772: PUSH
43773: LD_VAR 0 3
43777: PPUSH
43778: LD_VAR 0 4
43782: PPUSH
43783: CALL_OW 546
43787: ST_TO_ADDR
// if hex [ 1 ] then
43788: LD_VAR 0 15
43792: PUSH
43793: LD_INT 1
43795: ARRAY
43796: IFFALSE 43800
// exit ;
43798: GO 44257
// height := hex [ 2 ] ;
43800: LD_ADDR_VAR 0 13
43804: PUSH
43805: LD_VAR 0 15
43809: PUSH
43810: LD_INT 2
43812: ARRAY
43813: ST_TO_ADDR
// for i = 1 to hexes do
43814: LD_ADDR_VAR 0 7
43818: PUSH
43819: DOUBLE
43820: LD_INT 1
43822: DEC
43823: ST_TO_ADDR
43824: LD_VAR 0 12
43828: PUSH
43829: FOR_TO
43830: IFFALSE 44174
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43832: LD_VAR 0 12
43836: PUSH
43837: LD_VAR 0 7
43841: ARRAY
43842: PUSH
43843: LD_INT 1
43845: ARRAY
43846: PPUSH
43847: LD_VAR 0 12
43851: PUSH
43852: LD_VAR 0 7
43856: ARRAY
43857: PUSH
43858: LD_INT 2
43860: ARRAY
43861: PPUSH
43862: CALL_OW 488
43866: NOT
43867: IFTRUE 43909
43869: PUSH
43870: LD_VAR 0 12
43874: PUSH
43875: LD_VAR 0 7
43879: ARRAY
43880: PUSH
43881: LD_INT 1
43883: ARRAY
43884: PPUSH
43885: LD_VAR 0 12
43889: PUSH
43890: LD_VAR 0 7
43894: ARRAY
43895: PUSH
43896: LD_INT 2
43898: ARRAY
43899: PPUSH
43900: CALL_OW 428
43904: PUSH
43905: LD_INT 0
43907: GREATER
43908: OR
43909: IFTRUE 43947
43911: PUSH
43912: LD_VAR 0 12
43916: PUSH
43917: LD_VAR 0 7
43921: ARRAY
43922: PUSH
43923: LD_INT 1
43925: ARRAY
43926: PPUSH
43927: LD_VAR 0 12
43931: PUSH
43932: LD_VAR 0 7
43936: ARRAY
43937: PUSH
43938: LD_INT 2
43940: ARRAY
43941: PPUSH
43942: CALL_OW 351
43946: OR
43947: IFFALSE 43953
// exit ;
43949: POP
43950: POP
43951: GO 44257
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43953: LD_ADDR_VAR 0 8
43957: PUSH
43958: LD_VAR 0 12
43962: PUSH
43963: LD_VAR 0 7
43967: ARRAY
43968: PUSH
43969: LD_INT 1
43971: ARRAY
43972: PPUSH
43973: LD_VAR 0 12
43977: PUSH
43978: LD_VAR 0 7
43982: ARRAY
43983: PUSH
43984: LD_INT 2
43986: ARRAY
43987: PPUSH
43988: CALL_OW 546
43992: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43993: LD_VAR 0 8
43997: PUSH
43998: LD_INT 1
44000: ARRAY
44001: IFTRUE 44023
44003: PUSH
44004: LD_VAR 0 8
44008: PUSH
44009: LD_INT 2
44011: ARRAY
44012: PUSH
44013: LD_VAR 0 13
44017: PUSH
44018: LD_INT 2
44020: PLUS
44021: GREATER
44022: OR
44023: IFTRUE 44045
44025: PUSH
44026: LD_VAR 0 8
44030: PUSH
44031: LD_INT 2
44033: ARRAY
44034: PUSH
44035: LD_VAR 0 13
44039: PUSH
44040: LD_INT 2
44042: MINUS
44043: LESS
44044: OR
44045: IFTRUE 44113
44047: PUSH
44048: LD_VAR 0 8
44052: PUSH
44053: LD_INT 3
44055: ARRAY
44056: PUSH
44057: LD_INT 0
44059: PUSH
44060: LD_INT 8
44062: PUSH
44063: LD_INT 9
44065: PUSH
44066: LD_INT 10
44068: PUSH
44069: LD_INT 11
44071: PUSH
44072: LD_INT 12
44074: PUSH
44075: LD_INT 13
44077: PUSH
44078: LD_INT 16
44080: PUSH
44081: LD_INT 17
44083: PUSH
44084: LD_INT 18
44086: PUSH
44087: LD_INT 19
44089: PUSH
44090: LD_INT 20
44092: PUSH
44093: LD_INT 21
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: IN
44111: NOT
44112: OR
44113: IFTRUE 44126
44115: PUSH
44116: LD_VAR 0 8
44120: PUSH
44121: LD_INT 5
44123: ARRAY
44124: NOT
44125: OR
44126: IFTRUE 44166
44128: PUSH
44129: LD_VAR 0 8
44133: PUSH
44134: LD_INT 6
44136: ARRAY
44137: PUSH
44138: LD_INT 1
44140: PUSH
44141: LD_INT 2
44143: PUSH
44144: LD_INT 7
44146: PUSH
44147: LD_INT 9
44149: PUSH
44150: LD_INT 10
44152: PUSH
44153: LD_INT 11
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: IN
44164: NOT
44165: OR
44166: IFFALSE 44172
// exit ;
44168: POP
44169: POP
44170: GO 44257
// end ;
44172: GO 43829
44174: POP
44175: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44176: LD_VAR 0 9
44180: PPUSH
44181: LD_VAR 0 3
44185: PPUSH
44186: LD_VAR 0 4
44190: PPUSH
44191: LD_INT 20
44193: PPUSH
44194: CALL 36076 0 4
44198: PUSH
44199: LD_INT 4
44201: ARRAY
44202: IFFALSE 44206
// exit ;
44204: GO 44257
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44206: LD_VAR 0 2
44210: PUSH
44211: LD_INT 29
44213: PUSH
44214: LD_INT 30
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: IN
44221: IFFALSE 44245
44223: PUSH
44224: LD_VAR 0 3
44228: PPUSH
44229: LD_VAR 0 4
44233: PPUSH
44234: LD_VAR 0 9
44238: PPUSH
44239: CALL_OW 440
44243: NOT
44244: AND
44245: IFFALSE 44249
// exit ;
44247: GO 44257
// result := true ;
44249: LD_ADDR_VAR 0 6
44253: PUSH
44254: LD_INT 1
44256: ST_TO_ADDR
// end ;
44257: LD_VAR 0 6
44261: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44262: LD_INT 0
44264: PPUSH
44265: PPUSH
44266: PPUSH
44267: PPUSH
44268: PPUSH
44269: PPUSH
44270: PPUSH
44271: PPUSH
44272: PPUSH
44273: PPUSH
44274: PPUSH
44275: PPUSH
44276: PPUSH
44277: PPUSH
44278: PPUSH
44279: PPUSH
44280: PPUSH
44281: PPUSH
44282: PPUSH
44283: PPUSH
44284: PPUSH
44285: PPUSH
44286: PPUSH
44287: PPUSH
44288: PPUSH
44289: PPUSH
44290: PPUSH
44291: PPUSH
44292: PPUSH
44293: PPUSH
44294: PPUSH
44295: PPUSH
44296: PPUSH
44297: PPUSH
44298: PPUSH
44299: PPUSH
44300: PPUSH
44301: PPUSH
44302: PPUSH
44303: PPUSH
44304: PPUSH
44305: PPUSH
44306: PPUSH
44307: PPUSH
44308: PPUSH
44309: PPUSH
44310: PPUSH
44311: PPUSH
44312: PPUSH
44313: PPUSH
44314: PPUSH
44315: PPUSH
44316: PPUSH
44317: PPUSH
44318: PPUSH
44319: PPUSH
44320: PPUSH
44321: PPUSH
// result = [ ] ;
44322: LD_ADDR_VAR 0 7
44326: PUSH
44327: EMPTY
44328: ST_TO_ADDR
// temp_list = [ ] ;
44329: LD_ADDR_VAR 0 9
44333: PUSH
44334: EMPTY
44335: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44336: LD_VAR 0 4
44340: PUSH
44341: LD_INT 0
44343: PUSH
44344: LD_INT 1
44346: PUSH
44347: LD_INT 2
44349: PUSH
44350: LD_INT 3
44352: PUSH
44353: LD_INT 4
44355: PUSH
44356: LD_INT 5
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: IN
44367: NOT
44368: IFTRUE 44411
44370: PUSH
44371: LD_VAR 0 1
44375: PUSH
44376: LD_INT 0
44378: PUSH
44379: LD_INT 1
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: IN
44386: IFFALSE 44410
44388: PUSH
44389: LD_VAR 0 5
44393: PUSH
44394: LD_INT 1
44396: PUSH
44397: LD_INT 2
44399: PUSH
44400: LD_INT 3
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: LIST
44407: IN
44408: NOT
44409: AND
44410: OR
44411: IFFALSE 44415
// exit ;
44413: GO 62814
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44415: LD_VAR 0 1
44419: PUSH
44420: LD_INT 6
44422: PUSH
44423: LD_INT 7
44425: PUSH
44426: LD_INT 8
44428: PUSH
44429: LD_INT 13
44431: PUSH
44432: LD_INT 12
44434: PUSH
44435: LD_INT 15
44437: PUSH
44438: LD_INT 11
44440: PUSH
44441: LD_INT 14
44443: PUSH
44444: LD_INT 10
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: IN
44458: IFFALSE 44468
// btype = b_lab ;
44460: LD_ADDR_VAR 0 1
44464: PUSH
44465: LD_INT 6
44467: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44468: LD_VAR 0 6
44472: PUSH
44473: LD_INT 0
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: LD_INT 2
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: LIST
44486: IN
44487: NOT
44488: IFTRUE 44556
44490: PUSH
44491: LD_VAR 0 1
44495: PUSH
44496: LD_INT 0
44498: PUSH
44499: LD_INT 1
44501: PUSH
44502: LD_INT 2
44504: PUSH
44505: LD_INT 3
44507: PUSH
44508: LD_INT 6
44510: PUSH
44511: LD_INT 36
44513: PUSH
44514: LD_INT 4
44516: PUSH
44517: LD_INT 5
44519: PUSH
44520: LD_INT 31
44522: PUSH
44523: LD_INT 32
44525: PUSH
44526: LD_INT 33
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: IN
44542: NOT
44543: IFFALSE 44555
44545: PUSH
44546: LD_VAR 0 6
44550: PUSH
44551: LD_INT 1
44553: EQUAL
44554: AND
44555: OR
44556: IFTRUE 44588
44558: PUSH
44559: LD_VAR 0 1
44563: PUSH
44564: LD_INT 2
44566: PUSH
44567: LD_INT 3
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: IN
44574: NOT
44575: IFFALSE 44587
44577: PUSH
44578: LD_VAR 0 6
44582: PUSH
44583: LD_INT 2
44585: EQUAL
44586: AND
44587: OR
44588: IFFALSE 44598
// mode = 0 ;
44590: LD_ADDR_VAR 0 6
44594: PUSH
44595: LD_INT 0
44597: ST_TO_ADDR
// case mode of 0 :
44598: LD_VAR 0 6
44602: PUSH
44603: LD_INT 0
44605: DOUBLE
44606: EQUAL
44607: IFTRUE 44611
44609: GO 56064
44611: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44612: LD_ADDR_VAR 0 11
44616: PUSH
44617: LD_INT 0
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 0
44629: PUSH
44630: LD_INT 1
44632: NEG
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: PUSH
44641: LD_INT 0
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 1
44650: PUSH
44651: LD_INT 1
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 0
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 1
44670: NEG
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 1
44681: NEG
44682: PUSH
44683: LD_INT 1
44685: NEG
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 1
44693: NEG
44694: PUSH
44695: LD_INT 2
44697: NEG
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: LD_INT 2
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: LD_INT 1
44719: NEG
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 1
44727: PUSH
44728: LD_INT 2
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 0
44737: PUSH
44738: LD_INT 2
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 1
44747: NEG
44748: PUSH
44749: LD_INT 1
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: LD_INT 3
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 0
44768: PUSH
44769: LD_INT 3
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: LD_INT 2
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44805: LD_ADDR_VAR 0 12
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: LD_INT 1
44825: NEG
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 1
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 1
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: LD_INT 1
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: LD_INT 0
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 1
44874: NEG
44875: PUSH
44876: LD_INT 1
44878: NEG
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: LD_INT 1
44889: NEG
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 2
44897: PUSH
44898: LD_INT 0
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 2
44907: PUSH
44908: LD_INT 1
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: LD_INT 1
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 2
44928: NEG
44929: PUSH
44930: LD_INT 0
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 2
44939: NEG
44940: PUSH
44941: LD_INT 1
44943: NEG
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 2
44951: NEG
44952: PUSH
44953: LD_INT 1
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 3
44962: NEG
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 3
44973: NEG
44974: PUSH
44975: LD_INT 1
44977: NEG
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45001: LD_ADDR_VAR 0 13
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 1
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 1
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 1
45059: NEG
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 1
45070: NEG
45071: PUSH
45072: LD_INT 1
45074: NEG
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: LD_INT 2
45086: NEG
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 2
45094: PUSH
45095: LD_INT 1
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 2
45104: PUSH
45105: LD_INT 2
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: LD_INT 2
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 2
45124: NEG
45125: PUSH
45126: LD_INT 1
45128: NEG
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 2
45136: NEG
45137: PUSH
45138: LD_INT 2
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 2
45148: NEG
45149: PUSH
45150: LD_INT 3
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 3
45160: NEG
45161: PUSH
45162: LD_INT 2
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 3
45172: NEG
45173: PUSH
45174: LD_INT 3
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45200: LD_ADDR_VAR 0 14
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: LD_INT 0
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: LD_INT 1
45220: NEG
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: LD_INT 1
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 1
45258: NEG
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: LD_INT 1
45273: NEG
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 1
45281: NEG
45282: PUSH
45283: LD_INT 2
45285: NEG
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: LD_INT 2
45296: NEG
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: LD_INT 1
45307: NEG
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: LD_INT 2
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: LD_INT 2
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 1
45346: NEG
45347: PUSH
45348: LD_INT 3
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: LD_INT 3
45361: NEG
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 1
45369: PUSH
45370: LD_INT 2
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45396: LD_ADDR_VAR 0 15
45400: PUSH
45401: LD_INT 0
45403: PUSH
45404: LD_INT 0
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 1
45424: PUSH
45425: LD_INT 0
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: LD_INT 0
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: NEG
45466: PUSH
45467: LD_INT 1
45469: NEG
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 1
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 2
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 2
45498: PUSH
45499: LD_INT 1
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 1
45508: NEG
45509: PUSH
45510: LD_INT 1
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 2
45519: NEG
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 2
45530: NEG
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 2
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 3
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 3
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45589: LD_ADDR_VAR 0 16
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: LD_INT 1
45609: NEG
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 1
45627: PUSH
45628: LD_INT 1
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: LD_INT 1
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 1
45647: NEG
45648: PUSH
45649: LD_INT 0
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: NEG
45659: PUSH
45660: LD_INT 1
45662: NEG
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 1
45670: NEG
45671: PUSH
45672: LD_INT 2
45674: NEG
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 2
45682: PUSH
45683: LD_INT 1
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 2
45692: PUSH
45693: LD_INT 2
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 1
45702: PUSH
45703: LD_INT 2
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 2
45712: NEG
45713: PUSH
45714: LD_INT 1
45716: NEG
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 2
45724: NEG
45725: PUSH
45726: LD_INT 2
45728: NEG
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 3
45736: PUSH
45737: LD_INT 2
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 3
45746: PUSH
45747: LD_INT 3
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 2
45756: PUSH
45757: LD_INT 3
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45782: LD_ADDR_VAR 0 17
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: LD_INT 1
45802: NEG
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 1
45810: PUSH
45811: LD_INT 0
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 1
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: LD_INT 1
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 1
45840: NEG
45841: PUSH
45842: LD_INT 0
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 1
45851: NEG
45852: PUSH
45853: LD_INT 1
45855: NEG
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: LD_INT 2
45867: NEG
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 0
45875: PUSH
45876: LD_INT 2
45878: NEG
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 1
45886: PUSH
45887: LD_INT 1
45889: NEG
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 2
45897: PUSH
45898: LD_INT 0
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 2
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 2
45917: PUSH
45918: LD_INT 2
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 1
45927: PUSH
45928: LD_INT 2
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: LD_INT 2
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: LD_INT 1
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 2
45958: NEG
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 2
45969: NEG
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 2
45981: NEG
45982: PUSH
45983: LD_INT 2
45985: NEG
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46012: LD_ADDR_VAR 0 18
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: LD_INT 0
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: LD_INT 1
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 1
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: LD_INT 1
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: LD_INT 1
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 1
46081: NEG
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 1
46093: NEG
46094: PUSH
46095: LD_INT 2
46097: NEG
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 0
46105: PUSH
46106: LD_INT 2
46108: NEG
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: LD_INT 1
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 2
46127: PUSH
46128: LD_INT 0
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 2
46137: PUSH
46138: LD_INT 1
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 2
46147: PUSH
46148: LD_INT 2
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 1
46157: PUSH
46158: LD_INT 2
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 0
46167: PUSH
46168: LD_INT 2
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: LD_INT 1
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 2
46188: NEG
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 2
46199: NEG
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 2
46211: NEG
46212: PUSH
46213: LD_INT 2
46215: NEG
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46242: LD_ADDR_VAR 0 19
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: PUSH
46281: LD_INT 1
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 1
46311: NEG
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: LD_INT 2
46327: NEG
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: LD_INT 2
46338: NEG
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 1
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 2
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 2
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 2
46377: PUSH
46378: LD_INT 2
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: LD_INT 2
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: LD_INT 2
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 1
46407: NEG
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 2
46418: NEG
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 2
46429: NEG
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 2
46441: NEG
46442: PUSH
46443: LD_INT 2
46445: NEG
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46472: LD_ADDR_VAR 0 20
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: LD_INT 0
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 0
46489: PUSH
46490: LD_INT 1
46492: NEG
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 1
46500: PUSH
46501: LD_INT 0
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: LD_INT 1
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 1
46541: NEG
46542: PUSH
46543: LD_INT 1
46545: NEG
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 1
46553: NEG
46554: PUSH
46555: LD_INT 2
46557: NEG
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 0
46565: PUSH
46566: LD_INT 2
46568: NEG
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: LD_INT 1
46579: NEG
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 2
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 2
46597: PUSH
46598: LD_INT 1
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 2
46607: PUSH
46608: LD_INT 2
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 1
46617: PUSH
46618: LD_INT 2
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 0
46627: PUSH
46628: LD_INT 2
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 1
46637: NEG
46638: PUSH
46639: LD_INT 1
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 2
46648: NEG
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 2
46659: NEG
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 2
46671: NEG
46672: PUSH
46673: LD_INT 2
46675: NEG
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46702: LD_ADDR_VAR 0 21
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: LD_INT 1
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 1
46730: PUSH
46731: LD_INT 0
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 1
46740: PUSH
46741: LD_INT 1
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 0
46750: PUSH
46751: LD_INT 1
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 1
46760: NEG
46761: PUSH
46762: LD_INT 0
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 1
46771: NEG
46772: PUSH
46773: LD_INT 1
46775: NEG
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 1
46783: NEG
46784: PUSH
46785: LD_INT 2
46787: NEG
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: LD_INT 2
46798: NEG
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 2
46817: PUSH
46818: LD_INT 0
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 2
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 2
46837: PUSH
46838: LD_INT 2
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 1
46847: PUSH
46848: LD_INT 2
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: LD_INT 2
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 1
46867: NEG
46868: PUSH
46869: LD_INT 1
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 2
46878: NEG
46879: PUSH
46880: LD_INT 0
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 2
46889: NEG
46890: PUSH
46891: LD_INT 1
46893: NEG
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 2
46901: NEG
46902: PUSH
46903: LD_INT 2
46905: NEG
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46932: LD_ADDR_VAR 0 22
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: LD_INT 1
46952: NEG
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 1
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 1
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 0
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 1
46990: NEG
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: LD_INT 1
47005: NEG
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 1
47013: NEG
47014: PUSH
47015: LD_INT 2
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: LD_INT 2
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 1
47036: PUSH
47037: LD_INT 1
47039: NEG
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 2
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 2
47057: PUSH
47058: LD_INT 1
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 2
47067: PUSH
47068: LD_INT 2
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 1
47077: PUSH
47078: LD_INT 2
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: LD_INT 2
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 1
47097: NEG
47098: PUSH
47099: LD_INT 1
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 2
47108: NEG
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 2
47119: NEG
47120: PUSH
47121: LD_INT 1
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 2
47131: NEG
47132: PUSH
47133: LD_INT 2
47135: NEG
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47162: LD_ADDR_VAR 0 23
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: LD_INT 0
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: LD_INT 1
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: LD_INT 0
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: LD_INT 1
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: NEG
47244: PUSH
47245: LD_INT 2
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 0
47255: PUSH
47256: LD_INT 2
47258: NEG
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 1
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 2
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 2
47287: PUSH
47288: LD_INT 1
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 2
47297: PUSH
47298: LD_INT 2
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 1
47307: PUSH
47308: LD_INT 2
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: LD_INT 2
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 1
47327: NEG
47328: PUSH
47329: LD_INT 1
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 2
47338: NEG
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 2
47349: NEG
47350: PUSH
47351: LD_INT 1
47353: NEG
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 2
47361: NEG
47362: PUSH
47363: LD_INT 2
47365: NEG
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 2
47373: NEG
47374: PUSH
47375: LD_INT 3
47377: NEG
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 1
47385: NEG
47386: PUSH
47387: LD_INT 3
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: LD_INT 2
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 2
47408: PUSH
47409: LD_INT 1
47411: NEG
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47442: LD_ADDR_VAR 0 24
47446: PUSH
47447: LD_INT 0
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: LD_INT 1
47462: NEG
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: LD_INT 0
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: LD_INT 1
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: LD_INT 1
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 1
47500: NEG
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: LD_INT 1
47515: NEG
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 1
47523: NEG
47524: PUSH
47525: LD_INT 2
47527: NEG
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: LD_INT 2
47538: NEG
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 1
47546: PUSH
47547: LD_INT 1
47549: NEG
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 2
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 2
47567: PUSH
47568: LD_INT 1
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 2
47577: PUSH
47578: LD_INT 2
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: LD_INT 2
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 0
47597: PUSH
47598: LD_INT 2
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: NEG
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 2
47618: NEG
47619: PUSH
47620: LD_INT 0
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 2
47629: NEG
47630: PUSH
47631: LD_INT 1
47633: NEG
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 2
47641: NEG
47642: PUSH
47643: LD_INT 2
47645: NEG
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 1
47653: PUSH
47654: LD_INT 2
47656: NEG
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 2
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 3
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 3
47685: PUSH
47686: LD_INT 2
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47718: LD_ADDR_VAR 0 25
47722: PUSH
47723: LD_INT 0
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: LD_INT 1
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: LD_INT 1
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: LD_INT 0
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: NEG
47788: PUSH
47789: LD_INT 1
47791: NEG
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: LD_INT 2
47803: NEG
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 0
47811: PUSH
47812: LD_INT 2
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 2
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 2
47843: PUSH
47844: LD_INT 1
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 2
47853: PUSH
47854: LD_INT 2
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: PUSH
47864: LD_INT 2
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 2
47894: NEG
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 2
47905: NEG
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 2
47917: NEG
47918: PUSH
47919: LD_INT 2
47921: NEG
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 3
47929: PUSH
47930: LD_INT 1
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 3
47939: PUSH
47940: LD_INT 2
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 2
47949: PUSH
47950: LD_INT 3
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 1
47959: PUSH
47960: LD_INT 3
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47992: LD_ADDR_VAR 0 26
47996: PUSH
47997: LD_INT 0
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 1
48020: PUSH
48021: LD_INT 0
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: LD_INT 1
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: LD_INT 1
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 1
48061: NEG
48062: PUSH
48063: LD_INT 1
48065: NEG
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 1
48073: NEG
48074: PUSH
48075: LD_INT 2
48077: NEG
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: LD_INT 2
48088: NEG
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 1
48096: PUSH
48097: LD_INT 1
48099: NEG
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 2
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 2
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 2
48127: PUSH
48128: LD_INT 2
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 1
48137: PUSH
48138: LD_INT 2
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 0
48147: PUSH
48148: LD_INT 2
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 1
48157: NEG
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 2
48168: NEG
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 2
48179: NEG
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 2
48191: NEG
48192: PUSH
48193: LD_INT 2
48195: NEG
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 2
48203: PUSH
48204: LD_INT 3
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 1
48213: PUSH
48214: LD_INT 3
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 1
48223: NEG
48224: PUSH
48225: LD_INT 2
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 2
48234: NEG
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48268: LD_ADDR_VAR 0 27
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 0
48285: PUSH
48286: LD_INT 1
48288: NEG
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 1
48306: PUSH
48307: LD_INT 1
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: LD_INT 1
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 1
48326: NEG
48327: PUSH
48328: LD_INT 0
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 1
48337: NEG
48338: PUSH
48339: LD_INT 1
48341: NEG
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: PUSH
48351: LD_INT 2
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 0
48361: PUSH
48362: LD_INT 2
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 1
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 2
48383: PUSH
48384: LD_INT 0
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 2
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 2
48403: PUSH
48404: LD_INT 2
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 1
48413: PUSH
48414: LD_INT 2
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: LD_INT 2
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 2
48444: NEG
48445: PUSH
48446: LD_INT 0
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 2
48455: NEG
48456: PUSH
48457: LD_INT 1
48459: NEG
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 2
48467: NEG
48468: PUSH
48469: LD_INT 2
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: PUSH
48481: LD_INT 2
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: LD_INT 1
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 3
48501: NEG
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 3
48513: NEG
48514: PUSH
48515: LD_INT 2
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48548: LD_ADDR_VAR 0 28
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: LD_INT 0
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 0
48565: PUSH
48566: LD_INT 1
48568: NEG
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 1
48576: PUSH
48577: LD_INT 0
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: PUSH
48587: LD_INT 1
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 0
48596: PUSH
48597: LD_INT 1
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 1
48606: NEG
48607: PUSH
48608: LD_INT 0
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: LD_INT 1
48621: NEG
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: LD_INT 2
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 0
48641: PUSH
48642: LD_INT 2
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: PUSH
48653: LD_INT 1
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 2
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 2
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 2
48683: PUSH
48684: LD_INT 2
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 1
48693: PUSH
48694: LD_INT 2
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: LD_INT 2
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 1
48713: NEG
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 2
48724: NEG
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 2
48735: NEG
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 2
48747: NEG
48748: PUSH
48749: LD_INT 2
48751: NEG
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 2
48759: NEG
48760: PUSH
48761: LD_INT 3
48763: NEG
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: LD_INT 3
48775: NEG
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 3
48783: NEG
48784: PUSH
48785: LD_INT 1
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 3
48795: NEG
48796: PUSH
48797: LD_INT 2
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48830: LD_ADDR_VAR 0 29
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: LD_INT 0
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: LD_INT 1
48850: NEG
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: LD_INT 1
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 1
48899: NEG
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 1
48911: NEG
48912: PUSH
48913: LD_INT 2
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: LD_INT 2
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 2
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 2
48955: PUSH
48956: LD_INT 1
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 1
48965: PUSH
48966: LD_INT 2
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: LD_INT 2
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 2
48996: NEG
48997: PUSH
48998: LD_INT 1
49000: NEG
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 2
49008: NEG
49009: PUSH
49010: LD_INT 2
49012: NEG
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 2
49020: NEG
49021: PUSH
49022: LD_INT 3
49024: NEG
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 2
49032: PUSH
49033: LD_INT 1
49035: NEG
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 3
49043: PUSH
49044: LD_INT 1
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: LD_INT 3
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: LD_INT 2
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 3
49074: NEG
49075: PUSH
49076: LD_INT 2
49078: NEG
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49109: LD_ADDR_VAR 0 30
49113: PUSH
49114: LD_INT 0
49116: PUSH
49117: LD_INT 0
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 1
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: LD_INT 1
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: LD_INT 1
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: NEG
49179: PUSH
49180: LD_INT 1
49182: NEG
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: LD_INT 2
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 0
49202: PUSH
49203: LD_INT 2
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: LD_INT 1
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 2
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 2
49234: PUSH
49235: LD_INT 1
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 2
49244: PUSH
49245: LD_INT 2
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: LD_INT 2
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 1
49264: NEG
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 2
49275: NEG
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 2
49286: NEG
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 1
49298: NEG
49299: PUSH
49300: LD_INT 3
49302: NEG
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: LD_INT 2
49313: NEG
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 3
49321: PUSH
49322: LD_INT 2
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 2
49331: PUSH
49332: LD_INT 3
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 2
49341: NEG
49342: PUSH
49343: LD_INT 1
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 3
49352: NEG
49353: PUSH
49354: LD_INT 1
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49387: LD_ADDR_VAR 0 31
49391: PUSH
49392: LD_INT 0
49394: PUSH
49395: LD_INT 0
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 1
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: LD_INT 1
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: LD_INT 1
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: LD_INT 0
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 1
49456: NEG
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: PUSH
49470: LD_INT 2
49472: NEG
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: LD_INT 1
49483: NEG
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 2
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 2
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 2
49511: PUSH
49512: LD_INT 2
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: LD_INT 2
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: LD_INT 2
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 1
49541: NEG
49542: PUSH
49543: LD_INT 1
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 2
49552: NEG
49553: PUSH
49554: LD_INT 1
49556: NEG
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 2
49564: NEG
49565: PUSH
49566: LD_INT 2
49568: NEG
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 2
49576: NEG
49577: PUSH
49578: LD_INT 3
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 2
49588: PUSH
49589: LD_INT 1
49591: NEG
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 3
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 1
49609: PUSH
49610: LD_INT 3
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: LD_INT 2
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 3
49630: NEG
49631: PUSH
49632: LD_INT 2
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49665: LD_ADDR_VAR 0 32
49669: PUSH
49670: LD_INT 0
49672: PUSH
49673: LD_INT 0
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: LD_INT 1
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 1
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 1
49703: PUSH
49704: LD_INT 1
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: LD_INT 1
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: LD_INT 0
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 1
49734: NEG
49735: PUSH
49736: LD_INT 1
49738: NEG
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: LD_INT 2
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: LD_INT 2
49761: NEG
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: LD_INT 1
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 2
49780: PUSH
49781: LD_INT 1
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 2
49790: PUSH
49791: LD_INT 2
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: LD_INT 2
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: LD_INT 2
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: LD_INT 1
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 2
49831: NEG
49832: PUSH
49833: LD_INT 0
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 2
49842: NEG
49843: PUSH
49844: LD_INT 1
49846: NEG
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: NEG
49855: PUSH
49856: LD_INT 3
49858: NEG
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 1
49866: PUSH
49867: LD_INT 2
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 3
49877: PUSH
49878: LD_INT 2
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 2
49887: PUSH
49888: LD_INT 3
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 2
49897: NEG
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 3
49908: NEG
49909: PUSH
49910: LD_INT 1
49912: NEG
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49943: LD_ADDR_VAR 0 33
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: LD_INT 0
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: LD_INT 1
50016: NEG
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: LD_INT 2
50028: NEG
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 2
50047: PUSH
50048: LD_INT 0
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 2
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: LD_INT 2
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: LD_INT 2
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 2
50098: NEG
50099: PUSH
50100: LD_INT 0
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 2
50109: NEG
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 2
50121: NEG
50122: PUSH
50123: LD_INT 2
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 2
50133: NEG
50134: PUSH
50135: LD_INT 3
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 2
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 3
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: LD_INT 3
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 1
50176: NEG
50177: PUSH
50178: LD_INT 2
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 3
50187: NEG
50188: PUSH
50189: LD_INT 2
50191: NEG
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50222: LD_ADDR_VAR 0 34
50226: PUSH
50227: LD_INT 0
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 0
50239: PUSH
50240: LD_INT 1
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 1
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: LD_INT 1
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: NEG
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 1
50303: NEG
50304: PUSH
50305: LD_INT 2
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 0
50315: PUSH
50316: LD_INT 2
50318: NEG
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 2
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 2
50347: PUSH
50348: LD_INT 2
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 1
50357: PUSH
50358: LD_INT 2
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 1
50367: NEG
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 2
50378: NEG
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 2
50389: NEG
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 2
50401: NEG
50402: PUSH
50403: LD_INT 2
50405: NEG
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: LD_INT 3
50417: NEG
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: LD_INT 2
50428: NEG
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 3
50436: PUSH
50437: LD_INT 2
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 2
50446: PUSH
50447: LD_INT 3
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 2
50456: NEG
50457: PUSH
50458: LD_INT 1
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 3
50467: NEG
50468: PUSH
50469: LD_INT 1
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50502: LD_ADDR_VAR 0 35
50506: PUSH
50507: LD_INT 0
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 1
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 0
50550: PUSH
50551: LD_INT 1
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 2
50583: PUSH
50584: LD_INT 1
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 2
50593: NEG
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50614: LD_ADDR_VAR 0 36
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: LD_INT 1
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 1
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: PUSH
50653: LD_INT 1
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 1
50672: NEG
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: LD_INT 2
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: LD_INT 2
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50726: LD_ADDR_VAR 0 37
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: LD_INT 1
50746: NEG
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 1
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: LD_INT 1
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 1
50784: NEG
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: LD_INT 1
50799: NEG
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: LD_INT 1
50810: NEG
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 1
50818: NEG
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50838: LD_ADDR_VAR 0 38
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 0
50855: PUSH
50856: LD_INT 1
50858: NEG
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 1
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: LD_INT 1
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: LD_INT 1
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 1
50907: NEG
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 2
50919: PUSH
50920: LD_INT 1
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 2
50929: NEG
50930: PUSH
50931: LD_INT 1
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50950: LD_ADDR_VAR 0 39
50954: PUSH
50955: LD_INT 0
50957: PUSH
50958: LD_INT 0
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 0
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 1
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 1
51008: NEG
51009: PUSH
51010: LD_INT 0
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 1
51019: NEG
51020: PUSH
51021: LD_INT 1
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: NEG
51032: PUSH
51033: LD_INT 2
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 1
51043: PUSH
51044: LD_INT 2
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51062: LD_ADDR_VAR 0 40
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 1
51100: PUSH
51101: LD_INT 1
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: LD_INT 1
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 1
51120: NEG
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: NEG
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 1
51154: NEG
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51174: LD_ADDR_VAR 0 41
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: LD_INT 1
51194: NEG
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 1
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 1
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 0
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 1
51232: NEG
51233: PUSH
51234: LD_INT 0
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: LD_INT 2
51259: NEG
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 1
51267: PUSH
51268: LD_INT 1
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 2
51278: PUSH
51279: LD_INT 0
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 2
51288: PUSH
51289: LD_INT 1
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 2
51298: PUSH
51299: LD_INT 2
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 1
51308: PUSH
51309: LD_INT 2
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: PUSH
51320: LD_INT 1
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 2
51329: NEG
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 2
51340: NEG
51341: PUSH
51342: LD_INT 1
51344: NEG
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 2
51352: NEG
51353: PUSH
51354: LD_INT 2
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 2
51364: NEG
51365: PUSH
51366: LD_INT 3
51368: NEG
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 2
51376: PUSH
51377: LD_INT 1
51379: NEG
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 3
51387: PUSH
51388: LD_INT 0
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 3
51397: PUSH
51398: LD_INT 1
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 3
51407: PUSH
51408: LD_INT 2
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 3
51417: PUSH
51418: LD_INT 3
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 2
51427: PUSH
51428: LD_INT 3
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 2
51437: NEG
51438: PUSH
51439: LD_INT 1
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 3
51448: NEG
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 3
51459: NEG
51460: PUSH
51461: LD_INT 1
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 3
51471: NEG
51472: PUSH
51473: LD_INT 2
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 3
51483: NEG
51484: PUSH
51485: LD_INT 3
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51524: LD_ADDR_VAR 0 42
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: LD_INT 1
51544: NEG
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 1
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: LD_INT 1
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 1
51582: NEG
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: LD_INT 1
51597: NEG
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: LD_INT 2
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: LD_INT 2
51620: NEG
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: LD_INT 1
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 2
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 2
51649: PUSH
51650: LD_INT 2
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: LD_INT 2
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: LD_INT 2
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 2
51690: NEG
51691: PUSH
51692: LD_INT 1
51694: NEG
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 2
51702: NEG
51703: PUSH
51704: LD_INT 2
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 2
51714: NEG
51715: PUSH
51716: LD_INT 3
51718: NEG
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 1
51726: NEG
51727: PUSH
51728: LD_INT 3
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: LD_INT 3
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 1
51749: PUSH
51750: LD_INT 2
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 3
51760: PUSH
51761: LD_INT 2
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 3
51770: PUSH
51771: LD_INT 3
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 2
51780: PUSH
51781: LD_INT 3
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: LD_INT 3
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: LD_INT 3
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: LD_INT 2
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 3
51821: NEG
51822: PUSH
51823: LD_INT 2
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 3
51833: NEG
51834: PUSH
51835: LD_INT 3
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51874: LD_ADDR_VAR 0 43
51878: PUSH
51879: LD_INT 0
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: LD_INT 1
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: LD_INT 1
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 1
51932: NEG
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: LD_INT 1
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 1
51955: NEG
51956: PUSH
51957: LD_INT 2
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 0
51967: PUSH
51968: LD_INT 2
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 1
51978: PUSH
51979: LD_INT 1
51981: NEG
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 2
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 2
51999: PUSH
52000: LD_INT 1
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: LD_INT 2
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 0
52019: PUSH
52020: LD_INT 2
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: LD_INT 1
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 2
52040: NEG
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 2
52051: NEG
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 1
52063: NEG
52064: PUSH
52065: LD_INT 3
52067: NEG
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 0
52075: PUSH
52076: LD_INT 3
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: LD_INT 2
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 2
52097: PUSH
52098: LD_INT 1
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 3
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 3
52118: PUSH
52119: LD_INT 1
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: LD_INT 3
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: LD_INT 3
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 1
52148: NEG
52149: PUSH
52150: LD_INT 2
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 2
52159: NEG
52160: PUSH
52161: LD_INT 1
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 3
52170: NEG
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 3
52181: NEG
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52222: LD_ADDR_VAR 0 44
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: LD_INT 0
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 0
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: LD_INT 1
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: LD_INT 1
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 1
52280: NEG
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: LD_INT 1
52295: NEG
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: LD_INT 2
52307: NEG
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: LD_INT 1
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 2
52326: PUSH
52327: LD_INT 0
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 2
52336: PUSH
52337: LD_INT 1
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 2
52346: PUSH
52347: LD_INT 2
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 1
52356: PUSH
52357: LD_INT 2
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: LD_INT 1
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 2
52377: NEG
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 2
52388: NEG
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 2
52400: NEG
52401: PUSH
52402: LD_INT 2
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 2
52412: NEG
52413: PUSH
52414: LD_INT 3
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 2
52424: PUSH
52425: LD_INT 1
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 3
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 3
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 3
52455: PUSH
52456: LD_INT 2
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 3
52465: PUSH
52466: LD_INT 3
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 2
52475: PUSH
52476: LD_INT 3
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 2
52485: NEG
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 3
52496: NEG
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 3
52507: NEG
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 3
52519: NEG
52520: PUSH
52521: LD_INT 2
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 3
52531: NEG
52532: PUSH
52533: LD_INT 3
52535: NEG
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52572: LD_ADDR_VAR 0 45
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 1
52600: PUSH
52601: LD_INT 0
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: LD_INT 1
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 0
52620: PUSH
52621: LD_INT 1
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: NEG
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 1
52641: NEG
52642: PUSH
52643: LD_INT 1
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 1
52653: NEG
52654: PUSH
52655: LD_INT 2
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: LD_INT 2
52668: NEG
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 1
52676: PUSH
52677: LD_INT 1
52679: NEG
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 2
52687: PUSH
52688: LD_INT 1
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 2
52697: PUSH
52698: LD_INT 2
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 1
52707: PUSH
52708: LD_INT 2
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: LD_INT 2
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: LD_INT 1
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 2
52738: NEG
52739: PUSH
52740: LD_INT 1
52742: NEG
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 2
52750: NEG
52751: PUSH
52752: LD_INT 2
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 2
52762: NEG
52763: PUSH
52764: LD_INT 3
52766: NEG
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: LD_INT 3
52778: NEG
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: LD_INT 3
52789: NEG
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 1
52797: PUSH
52798: LD_INT 2
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 3
52808: PUSH
52809: LD_INT 2
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 3
52818: PUSH
52819: LD_INT 3
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 2
52828: PUSH
52829: LD_INT 3
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: PUSH
52839: LD_INT 3
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 0
52848: PUSH
52849: LD_INT 3
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 1
52858: NEG
52859: PUSH
52860: LD_INT 2
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 3
52869: NEG
52870: PUSH
52871: LD_INT 2
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 3
52881: NEG
52882: PUSH
52883: LD_INT 3
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52922: LD_ADDR_VAR 0 46
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: LD_INT 0
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: LD_INT 1
52942: NEG
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: LD_INT 1
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 0
52970: PUSH
52971: LD_INT 1
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 1
52980: NEG
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: LD_INT 1
52995: NEG
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 1
53003: NEG
53004: PUSH
53005: LD_INT 2
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: LD_INT 2
53018: NEG
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: LD_INT 1
53029: NEG
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 2
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 2
53047: PUSH
53048: LD_INT 1
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: LD_INT 2
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 0
53067: PUSH
53068: LD_INT 2
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 1
53077: NEG
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 2
53088: NEG
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 2
53099: NEG
53100: PUSH
53101: LD_INT 1
53103: NEG
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: LD_INT 3
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: LD_INT 3
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: LD_INT 2
53137: NEG
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 2
53145: PUSH
53146: LD_INT 1
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 3
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 3
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 3
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: LD_INT 3
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: LD_INT 2
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 2
53207: NEG
53208: PUSH
53209: LD_INT 1
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 3
53218: NEG
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 3
53229: NEG
53230: PUSH
53231: LD_INT 1
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53270: LD_ADDR_VAR 0 47
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: LD_INT 0
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: LD_INT 1
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: LD_INT 1
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: LD_INT 1
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 1
53339: NEG
53340: PUSH
53341: LD_INT 1
53343: NEG
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: LD_INT 2
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: LD_INT 2
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: LD_INT 1
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 2
53385: NEG
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 2
53397: NEG
53398: PUSH
53399: LD_INT 2
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53421: LD_ADDR_VAR 0 48
53425: PUSH
53426: LD_INT 0
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 0
53438: PUSH
53439: LD_INT 1
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 1
53449: PUSH
53450: LD_INT 0
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 1
53459: PUSH
53460: LD_INT 1
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: LD_INT 1
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 1
53479: NEG
53480: PUSH
53481: LD_INT 0
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 1
53490: NEG
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 1
53502: NEG
53503: PUSH
53504: LD_INT 2
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: LD_INT 2
53517: NEG
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 1
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 2
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 2
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53568: LD_ADDR_VAR 0 49
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: LD_INT 1
53588: NEG
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 1
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 1
53626: NEG
53627: PUSH
53628: LD_INT 0
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 1
53637: NEG
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 1
53649: PUSH
53650: LD_INT 1
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 2
53660: PUSH
53661: LD_INT 0
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 2
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 2
53680: PUSH
53681: LD_INT 2
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: LD_INT 2
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53712: LD_ADDR_VAR 0 50
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: LD_INT 1
53732: NEG
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 1
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: LD_INT 1
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 1
53770: NEG
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 1
53781: NEG
53782: PUSH
53783: LD_INT 1
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 2
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 2
53803: PUSH
53804: LD_INT 2
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 1
53813: PUSH
53814: LD_INT 2
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 0
53823: PUSH
53824: LD_INT 2
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: LD_INT 1
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53856: LD_ADDR_VAR 0 51
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 0
53873: PUSH
53874: LD_INT 1
53876: NEG
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 1
53894: PUSH
53895: LD_INT 1
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: LD_INT 1
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 1
53925: NEG
53926: PUSH
53927: LD_INT 1
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 1
53937: PUSH
53938: LD_INT 2
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 0
53947: PUSH
53948: LD_INT 2
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: NEG
53958: PUSH
53959: LD_INT 1
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 2
53968: NEG
53969: PUSH
53970: LD_INT 0
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 2
53979: NEG
53980: PUSH
53981: LD_INT 1
53983: NEG
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54003: LD_ADDR_VAR 0 52
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 1
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 1
54041: PUSH
54042: LD_INT 1
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 1
54072: NEG
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: LD_INT 2
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: NEG
54097: PUSH
54098: LD_INT 1
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 2
54107: NEG
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 2
54118: NEG
54119: PUSH
54120: LD_INT 1
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 2
54130: NEG
54131: PUSH
54132: LD_INT 2
54134: NEG
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54154: LD_ADDR_VAR 0 53
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 1
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: PUSH
54193: LD_INT 1
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: LD_INT 1
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 1
54212: NEG
54213: PUSH
54214: LD_INT 0
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: NEG
54224: PUSH
54225: LD_INT 1
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: PUSH
54237: LD_INT 2
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: LD_INT 2
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 1
54258: PUSH
54259: LD_INT 1
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 2
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 2
54279: PUSH
54280: LD_INT 1
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 2
54289: PUSH
54290: LD_INT 2
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 1
54299: PUSH
54300: LD_INT 2
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 0
54309: PUSH
54310: LD_INT 2
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 1
54319: NEG
54320: PUSH
54321: LD_INT 1
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 2
54330: NEG
54331: PUSH
54332: LD_INT 0
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 2
54341: NEG
54342: PUSH
54343: LD_INT 1
54345: NEG
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 2
54353: NEG
54354: PUSH
54355: LD_INT 2
54357: NEG
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54384: LD_ADDR_VAR 0 54
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 1
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: LD_INT 1
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: LD_INT 2
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: LD_INT 2
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 2
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 2
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 2
54519: PUSH
54520: LD_INT 2
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 1
54529: PUSH
54530: LD_INT 2
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 0
54539: PUSH
54540: LD_INT 2
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: NEG
54550: PUSH
54551: LD_INT 1
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 2
54560: NEG
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 2
54571: NEG
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 2
54583: NEG
54584: PUSH
54585: LD_INT 2
54587: NEG
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54614: LD_ADDR_VAR 0 55
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: LD_INT 1
54634: NEG
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 1
54642: PUSH
54643: LD_INT 0
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: PUSH
54653: LD_INT 1
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: LD_INT 1
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: NEG
54684: PUSH
54685: LD_INT 1
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: LD_INT 2
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: LD_INT 2
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 1
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 2
54729: PUSH
54730: LD_INT 0
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 2
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 2
54749: PUSH
54750: LD_INT 2
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 1
54759: PUSH
54760: LD_INT 2
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: LD_INT 2
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: LD_INT 1
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 2
54790: NEG
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 2
54801: NEG
54802: PUSH
54803: LD_INT 1
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 2
54813: NEG
54814: PUSH
54815: LD_INT 2
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54844: LD_ADDR_VAR 0 56
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: LD_INT 0
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: LD_INT 1
54864: NEG
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 1
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 1
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: LD_INT 1
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: NEG
54914: PUSH
54915: LD_INT 1
54917: NEG
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 1
54925: NEG
54926: PUSH
54927: LD_INT 2
54929: NEG
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: LD_INT 2
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 2
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 2
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 2
54979: PUSH
54980: LD_INT 2
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 1
54989: PUSH
54990: LD_INT 2
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 0
54999: PUSH
55000: LD_INT 2
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: PUSH
55011: LD_INT 1
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 2
55020: NEG
55021: PUSH
55022: LD_INT 0
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 2
55031: NEG
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 2
55043: NEG
55044: PUSH
55045: LD_INT 2
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55074: LD_ADDR_VAR 0 57
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: LD_INT 1
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 1
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 1
55112: PUSH
55113: LD_INT 1
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: LD_INT 1
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: LD_INT 0
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: LD_INT 1
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: LD_INT 2
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: LD_INT 2
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 2
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 2
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 2
55209: PUSH
55210: LD_INT 2
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: LD_INT 2
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 0
55229: PUSH
55230: LD_INT 2
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 1
55239: NEG
55240: PUSH
55241: LD_INT 1
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 2
55250: NEG
55251: PUSH
55252: LD_INT 0
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 2
55261: NEG
55262: PUSH
55263: LD_INT 1
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 2
55273: NEG
55274: PUSH
55275: LD_INT 2
55277: NEG
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55304: LD_ADDR_VAR 0 58
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: LD_INT 1
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: LD_INT 0
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: PUSH
55343: LD_INT 1
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: LD_INT 1
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 1
55362: NEG
55363: PUSH
55364: LD_INT 0
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: LD_INT 1
55377: NEG
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 1
55385: NEG
55386: PUSH
55387: LD_INT 2
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: LD_INT 2
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 1
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 2
55419: PUSH
55420: LD_INT 0
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 2
55429: PUSH
55430: LD_INT 1
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 2
55439: PUSH
55440: LD_INT 2
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: LD_INT 2
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 0
55459: PUSH
55460: LD_INT 2
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: LD_INT 1
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 2
55480: NEG
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 2
55491: NEG
55492: PUSH
55493: LD_INT 1
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 2
55503: NEG
55504: PUSH
55505: LD_INT 2
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55534: LD_ADDR_VAR 0 59
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: LD_INT 1
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: LD_INT 1
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: LD_INT 1
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55622: LD_ADDR_VAR 0 60
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 1
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: LD_INT 1
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: NEG
55692: PUSH
55693: LD_INT 1
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55710: LD_ADDR_VAR 0 61
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 1
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 1
55779: NEG
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55798: LD_ADDR_VAR 0 62
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: LD_INT 1
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 1
55856: NEG
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 1
55867: NEG
55868: PUSH
55869: LD_INT 1
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55886: LD_ADDR_VAR 0 63
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: LD_INT 1
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55974: LD_ADDR_VAR 0 64
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 0
55991: PUSH
55992: LD_INT 1
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 1
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 1
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: LD_INT 1
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 1
56043: NEG
56044: PUSH
56045: LD_INT 1
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: ST_TO_ADDR
// end ; 1 :
56062: GO 61959
56064: LD_INT 1
56066: DOUBLE
56067: EQUAL
56068: IFTRUE 56072
56070: GO 58695
56072: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56073: LD_ADDR_VAR 0 11
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: LD_INT 3
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: LD_INT 3
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: LD_INT 2
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: LIST
56116: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56117: LD_ADDR_VAR 0 12
56121: PUSH
56122: LD_INT 2
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 3
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 3
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: LIST
56157: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56158: LD_ADDR_VAR 0 13
56162: PUSH
56163: LD_INT 3
56165: PUSH
56166: LD_INT 2
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 3
56175: PUSH
56176: LD_INT 3
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 2
56185: PUSH
56186: LD_INT 3
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: LIST
56197: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56198: LD_ADDR_VAR 0 14
56202: PUSH
56203: LD_INT 1
56205: PUSH
56206: LD_INT 3
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 0
56215: PUSH
56216: LD_INT 3
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 1
56225: NEG
56226: PUSH
56227: LD_INT 2
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: LIST
56238: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56239: LD_ADDR_VAR 0 15
56243: PUSH
56244: LD_INT 2
56246: NEG
56247: PUSH
56248: LD_INT 1
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 3
56257: NEG
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 3
56268: NEG
56269: PUSH
56270: LD_INT 1
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: LIST
56282: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56283: LD_ADDR_VAR 0 16
56287: PUSH
56288: LD_INT 2
56290: NEG
56291: PUSH
56292: LD_INT 3
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 3
56302: NEG
56303: PUSH
56304: LD_INT 2
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 3
56314: NEG
56315: PUSH
56316: LD_INT 3
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: LIST
56328: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56329: LD_ADDR_VAR 0 17
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: LD_INT 3
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: LD_INT 3
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: LD_INT 2
56362: NEG
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: LIST
56372: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56373: LD_ADDR_VAR 0 18
56377: PUSH
56378: LD_INT 2
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 3
56391: PUSH
56392: LD_INT 0
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 3
56401: PUSH
56402: LD_INT 1
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: LIST
56413: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56414: LD_ADDR_VAR 0 19
56418: PUSH
56419: LD_INT 3
56421: PUSH
56422: LD_INT 2
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 3
56431: PUSH
56432: LD_INT 3
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 2
56441: PUSH
56442: LD_INT 3
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: LIST
56453: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56454: LD_ADDR_VAR 0 20
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: LD_INT 3
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: LD_INT 3
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 1
56481: NEG
56482: PUSH
56483: LD_INT 2
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: LIST
56494: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56495: LD_ADDR_VAR 0 21
56499: PUSH
56500: LD_INT 2
56502: NEG
56503: PUSH
56504: LD_INT 1
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 3
56513: NEG
56514: PUSH
56515: LD_INT 0
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 3
56524: NEG
56525: PUSH
56526: LD_INT 1
56528: NEG
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: LIST
56538: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56539: LD_ADDR_VAR 0 22
56543: PUSH
56544: LD_INT 2
56546: NEG
56547: PUSH
56548: LD_INT 3
56550: NEG
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 3
56558: NEG
56559: PUSH
56560: LD_INT 2
56562: NEG
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 3
56570: NEG
56571: PUSH
56572: LD_INT 3
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: LIST
56584: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56585: LD_ADDR_VAR 0 23
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: LD_INT 3
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 1
56603: NEG
56604: PUSH
56605: LD_INT 4
56607: NEG
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 1
56615: PUSH
56616: LD_INT 3
56618: NEG
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: LIST
56628: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56629: LD_ADDR_VAR 0 24
56633: PUSH
56634: LD_INT 3
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 3
56646: PUSH
56647: LD_INT 1
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 4
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: LIST
56669: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56670: LD_ADDR_VAR 0 25
56674: PUSH
56675: LD_INT 3
56677: PUSH
56678: LD_INT 3
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 4
56687: PUSH
56688: LD_INT 3
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 3
56697: PUSH
56698: LD_INT 4
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: LIST
56709: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56710: LD_ADDR_VAR 0 26
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: LD_INT 3
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: LD_INT 4
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 1
56737: NEG
56738: PUSH
56739: LD_INT 3
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: LIST
56750: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56751: LD_ADDR_VAR 0 27
56755: PUSH
56756: LD_INT 3
56758: NEG
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 3
56769: NEG
56770: PUSH
56771: LD_INT 1
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 4
56780: NEG
56781: PUSH
56782: LD_INT 1
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: LIST
56794: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56795: LD_ADDR_VAR 0 28
56799: PUSH
56800: LD_INT 3
56802: NEG
56803: PUSH
56804: LD_INT 3
56806: NEG
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 3
56814: NEG
56815: PUSH
56816: LD_INT 4
56818: NEG
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 4
56826: NEG
56827: PUSH
56828: LD_INT 3
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: LIST
56840: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56841: LD_ADDR_VAR 0 29
56845: PUSH
56846: LD_INT 1
56848: NEG
56849: PUSH
56850: LD_INT 3
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: LD_INT 3
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 1
56871: PUSH
56872: LD_INT 2
56874: NEG
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 1
56882: NEG
56883: PUSH
56884: LD_INT 4
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 0
56894: PUSH
56895: LD_INT 4
56897: NEG
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 1
56905: PUSH
56906: LD_INT 3
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 1
56916: NEG
56917: PUSH
56918: LD_INT 5
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: LD_INT 5
56931: NEG
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 1
56939: PUSH
56940: LD_INT 4
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 1
56950: NEG
56951: PUSH
56952: LD_INT 6
56954: NEG
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: LD_INT 6
56965: NEG
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 1
56973: PUSH
56974: LD_INT 5
56976: NEG
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56996: LD_ADDR_VAR 0 30
57000: PUSH
57001: LD_INT 2
57003: PUSH
57004: LD_INT 1
57006: NEG
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 3
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 3
57024: PUSH
57025: LD_INT 1
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 3
57034: PUSH
57035: LD_INT 1
57037: NEG
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 4
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 4
57055: PUSH
57056: LD_INT 1
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 4
57065: PUSH
57066: LD_INT 1
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 5
57076: PUSH
57077: LD_INT 0
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 5
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 5
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 6
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 6
57117: PUSH
57118: LD_INT 1
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57139: LD_ADDR_VAR 0 31
57143: PUSH
57144: LD_INT 3
57146: PUSH
57147: LD_INT 2
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 3
57156: PUSH
57157: LD_INT 3
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 2
57166: PUSH
57167: LD_INT 3
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 4
57176: PUSH
57177: LD_INT 3
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 4
57186: PUSH
57187: LD_INT 4
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 3
57196: PUSH
57197: LD_INT 4
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 5
57206: PUSH
57207: LD_INT 4
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 5
57216: PUSH
57217: LD_INT 5
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 4
57226: PUSH
57227: LD_INT 5
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 6
57236: PUSH
57237: LD_INT 5
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 6
57246: PUSH
57247: LD_INT 6
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 5
57256: PUSH
57257: LD_INT 6
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57278: LD_ADDR_VAR 0 32
57282: PUSH
57283: LD_INT 1
57285: PUSH
57286: LD_INT 3
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 0
57295: PUSH
57296: LD_INT 3
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 1
57305: NEG
57306: PUSH
57307: LD_INT 2
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: LD_INT 4
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: LD_INT 4
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 1
57336: NEG
57337: PUSH
57338: LD_INT 3
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 1
57347: PUSH
57348: LD_INT 5
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: LD_INT 5
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 1
57367: NEG
57368: PUSH
57369: LD_INT 4
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: LD_INT 6
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 0
57388: PUSH
57389: LD_INT 6
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 1
57398: NEG
57399: PUSH
57400: LD_INT 5
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57421: LD_ADDR_VAR 0 33
57425: PUSH
57426: LD_INT 2
57428: NEG
57429: PUSH
57430: LD_INT 1
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 3
57439: NEG
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 3
57450: NEG
57451: PUSH
57452: LD_INT 1
57454: NEG
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 3
57462: NEG
57463: PUSH
57464: LD_INT 1
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 4
57473: NEG
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 4
57484: NEG
57485: PUSH
57486: LD_INT 1
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 4
57496: NEG
57497: PUSH
57498: LD_INT 1
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 5
57507: NEG
57508: PUSH
57509: LD_INT 0
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 5
57518: NEG
57519: PUSH
57520: LD_INT 1
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 5
57530: NEG
57531: PUSH
57532: LD_INT 1
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 6
57541: NEG
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 6
57552: NEG
57553: PUSH
57554: LD_INT 1
57556: NEG
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57576: LD_ADDR_VAR 0 34
57580: PUSH
57581: LD_INT 2
57583: NEG
57584: PUSH
57585: LD_INT 3
57587: NEG
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 3
57595: NEG
57596: PUSH
57597: LD_INT 2
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 3
57607: NEG
57608: PUSH
57609: LD_INT 3
57611: NEG
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 3
57619: NEG
57620: PUSH
57621: LD_INT 4
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 4
57631: NEG
57632: PUSH
57633: LD_INT 3
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 4
57643: NEG
57644: PUSH
57645: LD_INT 4
57647: NEG
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 4
57655: NEG
57656: PUSH
57657: LD_INT 5
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 5
57667: NEG
57668: PUSH
57669: LD_INT 4
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 5
57679: NEG
57680: PUSH
57681: LD_INT 5
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 5
57691: NEG
57692: PUSH
57693: LD_INT 6
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 6
57703: NEG
57704: PUSH
57705: LD_INT 5
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 6
57715: NEG
57716: PUSH
57717: LD_INT 6
57719: NEG
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57739: LD_ADDR_VAR 0 41
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: LD_INT 2
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 1
57757: NEG
57758: PUSH
57759: LD_INT 3
57761: NEG
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 1
57769: PUSH
57770: LD_INT 2
57772: NEG
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: LIST
57782: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57783: LD_ADDR_VAR 0 42
57787: PUSH
57788: LD_INT 2
57790: PUSH
57791: LD_INT 0
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 2
57800: PUSH
57801: LD_INT 1
57803: NEG
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 3
57811: PUSH
57812: LD_INT 1
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: LIST
57823: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57824: LD_ADDR_VAR 0 43
57828: PUSH
57829: LD_INT 2
57831: PUSH
57832: LD_INT 2
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 3
57841: PUSH
57842: LD_INT 2
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 2
57851: PUSH
57852: LD_INT 3
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: LIST
57863: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57864: LD_ADDR_VAR 0 44
57868: PUSH
57869: LD_INT 0
57871: PUSH
57872: LD_INT 2
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 1
57881: PUSH
57882: LD_INT 3
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 1
57891: NEG
57892: PUSH
57893: LD_INT 2
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: LIST
57904: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57905: LD_ADDR_VAR 0 45
57909: PUSH
57910: LD_INT 2
57912: NEG
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 2
57923: NEG
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 3
57934: NEG
57935: PUSH
57936: LD_INT 1
57938: NEG
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: LIST
57948: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57949: LD_ADDR_VAR 0 46
57953: PUSH
57954: LD_INT 2
57956: NEG
57957: PUSH
57958: LD_INT 2
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 2
57968: NEG
57969: PUSH
57970: LD_INT 3
57972: NEG
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 3
57980: NEG
57981: PUSH
57982: LD_INT 2
57984: NEG
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: LIST
57994: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57995: LD_ADDR_VAR 0 47
57999: PUSH
58000: LD_INT 2
58002: NEG
58003: PUSH
58004: LD_INT 3
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 1
58014: NEG
58015: PUSH
58016: LD_INT 3
58018: NEG
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58028: LD_ADDR_VAR 0 48
58032: PUSH
58033: LD_INT 1
58035: PUSH
58036: LD_INT 2
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 2
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58059: LD_ADDR_VAR 0 49
58063: PUSH
58064: LD_INT 3
58066: PUSH
58067: LD_INT 1
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 3
58076: PUSH
58077: LD_INT 2
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58088: LD_ADDR_VAR 0 50
58092: PUSH
58093: LD_INT 2
58095: PUSH
58096: LD_INT 3
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 1
58105: PUSH
58106: LD_INT 3
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58117: LD_ADDR_VAR 0 51
58121: PUSH
58122: LD_INT 1
58124: NEG
58125: PUSH
58126: LD_INT 2
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 2
58135: NEG
58136: PUSH
58137: LD_INT 1
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58148: LD_ADDR_VAR 0 52
58152: PUSH
58153: LD_INT 3
58155: NEG
58156: PUSH
58157: LD_INT 1
58159: NEG
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 3
58167: NEG
58168: PUSH
58169: LD_INT 2
58171: NEG
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58181: LD_ADDR_VAR 0 53
58185: PUSH
58186: LD_INT 1
58188: NEG
58189: PUSH
58190: LD_INT 3
58192: NEG
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: LD_INT 3
58203: NEG
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 1
58211: PUSH
58212: LD_INT 2
58214: NEG
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: LIST
58224: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58225: LD_ADDR_VAR 0 54
58229: PUSH
58230: LD_INT 2
58232: PUSH
58233: LD_INT 1
58235: NEG
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 3
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 3
58253: PUSH
58254: LD_INT 1
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: LIST
58265: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58266: LD_ADDR_VAR 0 55
58270: PUSH
58271: LD_INT 3
58273: PUSH
58274: LD_INT 2
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 3
58283: PUSH
58284: LD_INT 3
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 2
58293: PUSH
58294: LD_INT 3
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: LIST
58305: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58306: LD_ADDR_VAR 0 56
58310: PUSH
58311: LD_INT 1
58313: PUSH
58314: LD_INT 3
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: LD_INT 3
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 1
58333: NEG
58334: PUSH
58335: LD_INT 2
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: LIST
58346: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58347: LD_ADDR_VAR 0 57
58351: PUSH
58352: LD_INT 2
58354: NEG
58355: PUSH
58356: LD_INT 1
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 3
58365: NEG
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 3
58376: NEG
58377: PUSH
58378: LD_INT 1
58380: NEG
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: LIST
58390: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58391: LD_ADDR_VAR 0 58
58395: PUSH
58396: LD_INT 2
58398: NEG
58399: PUSH
58400: LD_INT 3
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 3
58410: NEG
58411: PUSH
58412: LD_INT 2
58414: NEG
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 3
58422: NEG
58423: PUSH
58424: LD_INT 3
58426: NEG
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: LIST
58436: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58437: LD_ADDR_VAR 0 59
58441: PUSH
58442: LD_INT 1
58444: NEG
58445: PUSH
58446: LD_INT 2
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: LD_INT 2
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 1
58467: PUSH
58468: LD_INT 1
58470: NEG
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: LIST
58480: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58481: LD_ADDR_VAR 0 60
58485: PUSH
58486: LD_INT 1
58488: PUSH
58489: LD_INT 1
58491: NEG
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 2
58499: PUSH
58500: LD_INT 0
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 2
58509: PUSH
58510: LD_INT 1
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: LIST
58521: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58522: LD_ADDR_VAR 0 61
58526: PUSH
58527: LD_INT 2
58529: PUSH
58530: LD_INT 1
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 2
58539: PUSH
58540: LD_INT 2
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 1
58549: PUSH
58550: LD_INT 2
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: LIST
58561: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58562: LD_ADDR_VAR 0 62
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: LD_INT 2
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 0
58579: PUSH
58580: LD_INT 2
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 1
58589: NEG
58590: PUSH
58591: LD_INT 1
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: LIST
58602: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58603: LD_ADDR_VAR 0 63
58607: PUSH
58608: LD_INT 1
58610: NEG
58611: PUSH
58612: LD_INT 1
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 2
58621: NEG
58622: PUSH
58623: LD_INT 0
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 2
58632: NEG
58633: PUSH
58634: LD_INT 1
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: LIST
58646: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58647: LD_ADDR_VAR 0 64
58651: PUSH
58652: LD_INT 1
58654: NEG
58655: PUSH
58656: LD_INT 2
58658: NEG
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 2
58666: NEG
58667: PUSH
58668: LD_INT 1
58670: NEG
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 2
58678: NEG
58679: PUSH
58680: LD_INT 2
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: LIST
58692: ST_TO_ADDR
// end ; 2 :
58693: GO 61959
58695: LD_INT 2
58697: DOUBLE
58698: EQUAL
58699: IFTRUE 58703
58701: GO 61958
58703: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58704: LD_ADDR_VAR 0 29
58708: PUSH
58709: LD_INT 4
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 4
58721: PUSH
58722: LD_INT 1
58724: NEG
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 5
58732: PUSH
58733: LD_INT 0
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 5
58742: PUSH
58743: LD_INT 1
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 4
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 3
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 3
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 3
58783: PUSH
58784: LD_INT 2
58786: NEG
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 5
58794: PUSH
58795: LD_INT 2
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 3
58804: PUSH
58805: LD_INT 3
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 3
58814: PUSH
58815: LD_INT 2
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 4
58824: PUSH
58825: LD_INT 3
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 4
58834: PUSH
58835: LD_INT 4
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 3
58844: PUSH
58845: LD_INT 4
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 2
58854: PUSH
58855: LD_INT 3
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 2
58864: PUSH
58865: LD_INT 2
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 4
58874: PUSH
58875: LD_INT 2
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 2
58884: PUSH
58885: LD_INT 4
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 0
58894: PUSH
58895: LD_INT 4
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: LD_INT 3
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 1
58914: PUSH
58915: LD_INT 4
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: LD_INT 5
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: LD_INT 5
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 1
58944: NEG
58945: PUSH
58946: LD_INT 4
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 1
58955: NEG
58956: PUSH
58957: LD_INT 3
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 2
58966: PUSH
58967: LD_INT 5
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 2
58976: NEG
58977: PUSH
58978: LD_INT 3
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 3
58987: NEG
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 3
58998: NEG
58999: PUSH
59000: LD_INT 1
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 2
59010: NEG
59011: PUSH
59012: LD_INT 0
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 2
59021: NEG
59022: PUSH
59023: LD_INT 1
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 3
59032: NEG
59033: PUSH
59034: LD_INT 1
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 4
59043: NEG
59044: PUSH
59045: LD_INT 0
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 4
59054: NEG
59055: PUSH
59056: LD_INT 1
59058: NEG
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 4
59066: NEG
59067: PUSH
59068: LD_INT 2
59070: NEG
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 2
59078: NEG
59079: PUSH
59080: LD_INT 2
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 4
59089: NEG
59090: PUSH
59091: LD_INT 4
59093: NEG
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 4
59101: NEG
59102: PUSH
59103: LD_INT 5
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 3
59113: NEG
59114: PUSH
59115: LD_INT 4
59117: NEG
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 3
59125: NEG
59126: PUSH
59127: LD_INT 3
59129: NEG
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 4
59137: NEG
59138: PUSH
59139: LD_INT 3
59141: NEG
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 5
59149: NEG
59150: PUSH
59151: LD_INT 4
59153: NEG
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 5
59161: NEG
59162: PUSH
59163: LD_INT 5
59165: NEG
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 3
59173: NEG
59174: PUSH
59175: LD_INT 5
59177: NEG
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 5
59185: NEG
59186: PUSH
59187: LD_INT 3
59189: NEG
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59242: LD_ADDR_VAR 0 30
59246: PUSH
59247: LD_INT 4
59249: PUSH
59250: LD_INT 4
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 4
59259: PUSH
59260: LD_INT 3
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 5
59269: PUSH
59270: LD_INT 4
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 5
59279: PUSH
59280: LD_INT 5
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 4
59289: PUSH
59290: LD_INT 5
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 3
59299: PUSH
59300: LD_INT 4
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 3
59309: PUSH
59310: LD_INT 3
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 5
59319: PUSH
59320: LD_INT 3
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 3
59329: PUSH
59330: LD_INT 5
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 0
59339: PUSH
59340: LD_INT 3
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 0
59349: PUSH
59350: LD_INT 2
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 1
59359: PUSH
59360: LD_INT 3
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 1
59369: PUSH
59370: LD_INT 4
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 0
59379: PUSH
59380: LD_INT 4
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 1
59389: NEG
59390: PUSH
59391: LD_INT 3
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 1
59400: NEG
59401: PUSH
59402: LD_INT 2
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 2
59411: PUSH
59412: LD_INT 4
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 2
59421: NEG
59422: PUSH
59423: LD_INT 2
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 4
59432: NEG
59433: PUSH
59434: LD_INT 0
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 4
59443: NEG
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 3
59455: NEG
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 3
59466: NEG
59467: PUSH
59468: LD_INT 1
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 4
59477: NEG
59478: PUSH
59479: LD_INT 1
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 5
59488: NEG
59489: PUSH
59490: LD_INT 0
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 5
59499: NEG
59500: PUSH
59501: LD_INT 1
59503: NEG
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 5
59511: NEG
59512: PUSH
59513: LD_INT 2
59515: NEG
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 3
59523: NEG
59524: PUSH
59525: LD_INT 2
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 3
59534: NEG
59535: PUSH
59536: LD_INT 3
59538: NEG
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 3
59546: NEG
59547: PUSH
59548: LD_INT 4
59550: NEG
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 2
59558: NEG
59559: PUSH
59560: LD_INT 3
59562: NEG
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 2
59570: NEG
59571: PUSH
59572: LD_INT 2
59574: NEG
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 3
59582: NEG
59583: PUSH
59584: LD_INT 2
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 4
59594: NEG
59595: PUSH
59596: LD_INT 3
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 4
59606: NEG
59607: PUSH
59608: LD_INT 4
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 2
59618: NEG
59619: PUSH
59620: LD_INT 4
59622: NEG
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 4
59630: NEG
59631: PUSH
59632: LD_INT 2
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 0
59642: PUSH
59643: LD_INT 4
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 0
59653: PUSH
59654: LD_INT 5
59656: NEG
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 1
59664: PUSH
59665: LD_INT 4
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 1
59675: PUSH
59676: LD_INT 3
59678: NEG
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 0
59686: PUSH
59687: LD_INT 3
59689: NEG
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 1
59697: NEG
59698: PUSH
59699: LD_INT 4
59701: NEG
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 1
59709: NEG
59710: PUSH
59711: LD_INT 5
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 2
59721: PUSH
59722: LD_INT 3
59724: NEG
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 2
59732: NEG
59733: PUSH
59734: LD_INT 5
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59789: LD_ADDR_VAR 0 31
59793: PUSH
59794: LD_INT 0
59796: PUSH
59797: LD_INT 4
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 0
59806: PUSH
59807: LD_INT 3
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 1
59816: PUSH
59817: LD_INT 4
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 1
59826: PUSH
59827: LD_INT 5
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 0
59836: PUSH
59837: LD_INT 5
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 1
59846: NEG
59847: PUSH
59848: LD_INT 4
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 1
59857: NEG
59858: PUSH
59859: LD_INT 3
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 2
59868: PUSH
59869: LD_INT 5
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 2
59878: NEG
59879: PUSH
59880: LD_INT 3
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 3
59889: NEG
59890: PUSH
59891: LD_INT 0
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 3
59900: NEG
59901: PUSH
59902: LD_INT 1
59904: NEG
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 2
59912: NEG
59913: PUSH
59914: LD_INT 0
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 2
59923: NEG
59924: PUSH
59925: LD_INT 1
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 3
59934: NEG
59935: PUSH
59936: LD_INT 1
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 4
59945: NEG
59946: PUSH
59947: LD_INT 0
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 4
59956: NEG
59957: PUSH
59958: LD_INT 1
59960: NEG
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 4
59968: NEG
59969: PUSH
59970: LD_INT 2
59972: NEG
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 2
59980: NEG
59981: PUSH
59982: LD_INT 2
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 4
59991: NEG
59992: PUSH
59993: LD_INT 4
59995: NEG
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 4
60003: NEG
60004: PUSH
60005: LD_INT 5
60007: NEG
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 3
60015: NEG
60016: PUSH
60017: LD_INT 4
60019: NEG
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 3
60027: NEG
60028: PUSH
60029: LD_INT 3
60031: NEG
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 4
60039: NEG
60040: PUSH
60041: LD_INT 3
60043: NEG
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 5
60051: NEG
60052: PUSH
60053: LD_INT 4
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 5
60063: NEG
60064: PUSH
60065: LD_INT 5
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 3
60075: NEG
60076: PUSH
60077: LD_INT 5
60079: NEG
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 5
60087: NEG
60088: PUSH
60089: LD_INT 3
60091: NEG
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 0
60099: PUSH
60100: LD_INT 3
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 0
60110: PUSH
60111: LD_INT 4
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 1
60121: PUSH
60122: LD_INT 3
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 1
60132: PUSH
60133: LD_INT 2
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 0
60143: PUSH
60144: LD_INT 2
60146: NEG
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 1
60154: NEG
60155: PUSH
60156: LD_INT 3
60158: NEG
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 1
60166: NEG
60167: PUSH
60168: LD_INT 4
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 2
60178: PUSH
60179: LD_INT 2
60181: NEG
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 2
60189: NEG
60190: PUSH
60191: LD_INT 4
60193: NEG
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 4
60201: PUSH
60202: LD_INT 0
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 4
60211: PUSH
60212: LD_INT 1
60214: NEG
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 5
60222: PUSH
60223: LD_INT 0
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 5
60232: PUSH
60233: LD_INT 1
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 4
60242: PUSH
60243: LD_INT 1
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 3
60252: PUSH
60253: LD_INT 0
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 3
60262: PUSH
60263: LD_INT 1
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 3
60273: PUSH
60274: LD_INT 2
60276: NEG
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 5
60284: PUSH
60285: LD_INT 2
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60339: LD_ADDR_VAR 0 32
60343: PUSH
60344: LD_INT 4
60346: NEG
60347: PUSH
60348: LD_INT 0
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 4
60357: NEG
60358: PUSH
60359: LD_INT 1
60361: NEG
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 3
60369: NEG
60370: PUSH
60371: LD_INT 0
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 3
60380: NEG
60381: PUSH
60382: LD_INT 1
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 4
60391: NEG
60392: PUSH
60393: LD_INT 1
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 5
60402: NEG
60403: PUSH
60404: LD_INT 0
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 5
60413: NEG
60414: PUSH
60415: LD_INT 1
60417: NEG
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 5
60425: NEG
60426: PUSH
60427: LD_INT 2
60429: NEG
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 3
60437: NEG
60438: PUSH
60439: LD_INT 2
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 3
60448: NEG
60449: PUSH
60450: LD_INT 3
60452: NEG
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 3
60460: NEG
60461: PUSH
60462: LD_INT 4
60464: NEG
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 2
60472: NEG
60473: PUSH
60474: LD_INT 3
60476: NEG
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 2
60484: NEG
60485: PUSH
60486: LD_INT 2
60488: NEG
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 3
60496: NEG
60497: PUSH
60498: LD_INT 2
60500: NEG
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 4
60508: NEG
60509: PUSH
60510: LD_INT 3
60512: NEG
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 4
60520: NEG
60521: PUSH
60522: LD_INT 4
60524: NEG
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 2
60532: NEG
60533: PUSH
60534: LD_INT 4
60536: NEG
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 4
60544: NEG
60545: PUSH
60546: LD_INT 2
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 0
60556: PUSH
60557: LD_INT 4
60559: NEG
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 0
60567: PUSH
60568: LD_INT 5
60570: NEG
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 1
60578: PUSH
60579: LD_INT 4
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 1
60589: PUSH
60590: LD_INT 3
60592: NEG
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 0
60600: PUSH
60601: LD_INT 3
60603: NEG
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 1
60611: NEG
60612: PUSH
60613: LD_INT 4
60615: NEG
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 1
60623: NEG
60624: PUSH
60625: LD_INT 5
60627: NEG
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 2
60635: PUSH
60636: LD_INT 3
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 2
60646: NEG
60647: PUSH
60648: LD_INT 5
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 3
60658: PUSH
60659: LD_INT 0
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 3
60668: PUSH
60669: LD_INT 1
60671: NEG
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 4
60679: PUSH
60680: LD_INT 0
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 4
60689: PUSH
60690: LD_INT 1
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 3
60699: PUSH
60700: LD_INT 1
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 2
60709: PUSH
60710: LD_INT 0
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 2
60719: PUSH
60720: LD_INT 1
60722: NEG
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 2
60730: PUSH
60731: LD_INT 2
60733: NEG
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 4
60741: PUSH
60742: LD_INT 2
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 4
60751: PUSH
60752: LD_INT 4
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 4
60761: PUSH
60762: LD_INT 3
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 5
60771: PUSH
60772: LD_INT 4
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 5
60781: PUSH
60782: LD_INT 5
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 4
60791: PUSH
60792: LD_INT 5
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 3
60801: PUSH
60802: LD_INT 4
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 3
60811: PUSH
60812: LD_INT 3
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 5
60821: PUSH
60822: LD_INT 3
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 3
60831: PUSH
60832: LD_INT 5
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60886: LD_ADDR_VAR 0 33
60890: PUSH
60891: LD_INT 4
60893: NEG
60894: PUSH
60895: LD_INT 4
60897: NEG
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 4
60905: NEG
60906: PUSH
60907: LD_INT 5
60909: NEG
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 3
60917: NEG
60918: PUSH
60919: LD_INT 4
60921: NEG
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 3
60929: NEG
60930: PUSH
60931: LD_INT 3
60933: NEG
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 4
60941: NEG
60942: PUSH
60943: LD_INT 3
60945: NEG
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 5
60953: NEG
60954: PUSH
60955: LD_INT 4
60957: NEG
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 5
60965: NEG
60966: PUSH
60967: LD_INT 5
60969: NEG
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 3
60977: NEG
60978: PUSH
60979: LD_INT 5
60981: NEG
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 5
60989: NEG
60990: PUSH
60991: LD_INT 3
60993: NEG
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 0
61001: PUSH
61002: LD_INT 3
61004: NEG
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: LD_INT 4
61015: NEG
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 1
61023: PUSH
61024: LD_INT 3
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 1
61034: PUSH
61035: LD_INT 2
61037: NEG
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 0
61045: PUSH
61046: LD_INT 2
61048: NEG
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 1
61056: NEG
61057: PUSH
61058: LD_INT 3
61060: NEG
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 1
61068: NEG
61069: PUSH
61070: LD_INT 4
61072: NEG
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 2
61080: PUSH
61081: LD_INT 2
61083: NEG
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 2
61091: NEG
61092: PUSH
61093: LD_INT 4
61095: NEG
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 4
61103: PUSH
61104: LD_INT 0
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 4
61113: PUSH
61114: LD_INT 1
61116: NEG
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 5
61124: PUSH
61125: LD_INT 0
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 5
61134: PUSH
61135: LD_INT 1
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 4
61144: PUSH
61145: LD_INT 1
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 3
61154: PUSH
61155: LD_INT 0
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 3
61164: PUSH
61165: LD_INT 1
61167: NEG
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 3
61175: PUSH
61176: LD_INT 2
61178: NEG
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 5
61186: PUSH
61187: LD_INT 2
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 3
61196: PUSH
61197: LD_INT 3
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 3
61206: PUSH
61207: LD_INT 2
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 4
61216: PUSH
61217: LD_INT 3
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 4
61226: PUSH
61227: LD_INT 4
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 3
61236: PUSH
61237: LD_INT 4
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 2
61246: PUSH
61247: LD_INT 3
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 2
61256: PUSH
61257: LD_INT 2
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 4
61266: PUSH
61267: LD_INT 2
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 2
61276: PUSH
61277: LD_INT 4
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 0
61286: PUSH
61287: LD_INT 4
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 0
61296: PUSH
61297: LD_INT 3
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 1
61306: PUSH
61307: LD_INT 4
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 1
61316: PUSH
61317: LD_INT 5
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 0
61326: PUSH
61327: LD_INT 5
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 1
61336: NEG
61337: PUSH
61338: LD_INT 4
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 1
61347: NEG
61348: PUSH
61349: LD_INT 3
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 2
61358: PUSH
61359: LD_INT 5
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 2
61368: NEG
61369: PUSH
61370: LD_INT 3
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61424: LD_ADDR_VAR 0 34
61428: PUSH
61429: LD_INT 0
61431: PUSH
61432: LD_INT 4
61434: NEG
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 0
61442: PUSH
61443: LD_INT 5
61445: NEG
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 1
61453: PUSH
61454: LD_INT 4
61456: NEG
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 1
61464: PUSH
61465: LD_INT 3
61467: NEG
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 0
61475: PUSH
61476: LD_INT 3
61478: NEG
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 1
61486: NEG
61487: PUSH
61488: LD_INT 4
61490: NEG
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 1
61498: NEG
61499: PUSH
61500: LD_INT 5
61502: NEG
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 2
61510: PUSH
61511: LD_INT 3
61513: NEG
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 2
61521: NEG
61522: PUSH
61523: LD_INT 5
61525: NEG
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 3
61533: PUSH
61534: LD_INT 0
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 3
61543: PUSH
61544: LD_INT 1
61546: NEG
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 4
61554: PUSH
61555: LD_INT 0
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 4
61564: PUSH
61565: LD_INT 1
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 3
61574: PUSH
61575: LD_INT 1
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 2
61584: PUSH
61585: LD_INT 0
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 2
61594: PUSH
61595: LD_INT 1
61597: NEG
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 2
61605: PUSH
61606: LD_INT 2
61608: NEG
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 4
61616: PUSH
61617: LD_INT 2
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 4
61626: PUSH
61627: LD_INT 4
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 4
61636: PUSH
61637: LD_INT 3
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 5
61646: PUSH
61647: LD_INT 4
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 5
61656: PUSH
61657: LD_INT 5
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 4
61666: PUSH
61667: LD_INT 5
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 3
61676: PUSH
61677: LD_INT 4
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 3
61686: PUSH
61687: LD_INT 3
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 5
61696: PUSH
61697: LD_INT 3
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 3
61706: PUSH
61707: LD_INT 5
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 0
61716: PUSH
61717: LD_INT 3
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 0
61726: PUSH
61727: LD_INT 2
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 1
61736: PUSH
61737: LD_INT 3
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: PUSH
61747: LD_INT 4
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 0
61756: PUSH
61757: LD_INT 4
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 1
61766: NEG
61767: PUSH
61768: LD_INT 3
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 1
61777: NEG
61778: PUSH
61779: LD_INT 2
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 2
61788: PUSH
61789: LD_INT 4
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 2
61798: NEG
61799: PUSH
61800: LD_INT 2
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 4
61809: NEG
61810: PUSH
61811: LD_INT 0
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 4
61820: NEG
61821: PUSH
61822: LD_INT 1
61824: NEG
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 3
61832: NEG
61833: PUSH
61834: LD_INT 0
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 3
61843: NEG
61844: PUSH
61845: LD_INT 1
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 4
61854: NEG
61855: PUSH
61856: LD_INT 1
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 5
61865: NEG
61866: PUSH
61867: LD_INT 0
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 5
61876: NEG
61877: PUSH
61878: LD_INT 1
61880: NEG
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 5
61888: NEG
61889: PUSH
61890: LD_INT 2
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 3
61900: NEG
61901: PUSH
61902: LD_INT 2
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: ST_TO_ADDR
// end ; end ;
61956: GO 61959
61958: POP
// case btype of b_depot , b_warehouse :
61959: LD_VAR 0 1
61963: PUSH
61964: LD_INT 0
61966: DOUBLE
61967: EQUAL
61968: IFTRUE 61978
61970: LD_INT 1
61972: DOUBLE
61973: EQUAL
61974: IFTRUE 61978
61976: GO 62179
61978: POP
// case nation of nation_american :
61979: LD_VAR 0 5
61983: PUSH
61984: LD_INT 1
61986: DOUBLE
61987: EQUAL
61988: IFTRUE 61992
61990: GO 62048
61992: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61993: LD_ADDR_VAR 0 9
61997: PUSH
61998: LD_VAR 0 11
62002: PUSH
62003: LD_VAR 0 12
62007: PUSH
62008: LD_VAR 0 13
62012: PUSH
62013: LD_VAR 0 14
62017: PUSH
62018: LD_VAR 0 15
62022: PUSH
62023: LD_VAR 0 16
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: PUSH
62036: LD_VAR 0 4
62040: PUSH
62041: LD_INT 1
62043: PLUS
62044: ARRAY
62045: ST_TO_ADDR
62046: GO 62177
62048: LD_INT 2
62050: DOUBLE
62051: EQUAL
62052: IFTRUE 62056
62054: GO 62112
62056: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62057: LD_ADDR_VAR 0 9
62061: PUSH
62062: LD_VAR 0 17
62066: PUSH
62067: LD_VAR 0 18
62071: PUSH
62072: LD_VAR 0 19
62076: PUSH
62077: LD_VAR 0 20
62081: PUSH
62082: LD_VAR 0 21
62086: PUSH
62087: LD_VAR 0 22
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: PUSH
62100: LD_VAR 0 4
62104: PUSH
62105: LD_INT 1
62107: PLUS
62108: ARRAY
62109: ST_TO_ADDR
62110: GO 62177
62112: LD_INT 3
62114: DOUBLE
62115: EQUAL
62116: IFTRUE 62120
62118: GO 62176
62120: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62121: LD_ADDR_VAR 0 9
62125: PUSH
62126: LD_VAR 0 23
62130: PUSH
62131: LD_VAR 0 24
62135: PUSH
62136: LD_VAR 0 25
62140: PUSH
62141: LD_VAR 0 26
62145: PUSH
62146: LD_VAR 0 27
62150: PUSH
62151: LD_VAR 0 28
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: PUSH
62164: LD_VAR 0 4
62168: PUSH
62169: LD_INT 1
62171: PLUS
62172: ARRAY
62173: ST_TO_ADDR
62174: GO 62177
62176: POP
62177: GO 62732
62179: LD_INT 2
62181: DOUBLE
62182: EQUAL
62183: IFTRUE 62193
62185: LD_INT 3
62187: DOUBLE
62188: EQUAL
62189: IFTRUE 62193
62191: GO 62249
62193: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62194: LD_ADDR_VAR 0 9
62198: PUSH
62199: LD_VAR 0 29
62203: PUSH
62204: LD_VAR 0 30
62208: PUSH
62209: LD_VAR 0 31
62213: PUSH
62214: LD_VAR 0 32
62218: PUSH
62219: LD_VAR 0 33
62223: PUSH
62224: LD_VAR 0 34
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: PUSH
62237: LD_VAR 0 4
62241: PUSH
62242: LD_INT 1
62244: PLUS
62245: ARRAY
62246: ST_TO_ADDR
62247: GO 62732
62249: LD_INT 16
62251: DOUBLE
62252: EQUAL
62253: IFTRUE 62311
62255: LD_INT 17
62257: DOUBLE
62258: EQUAL
62259: IFTRUE 62311
62261: LD_INT 18
62263: DOUBLE
62264: EQUAL
62265: IFTRUE 62311
62267: LD_INT 19
62269: DOUBLE
62270: EQUAL
62271: IFTRUE 62311
62273: LD_INT 22
62275: DOUBLE
62276: EQUAL
62277: IFTRUE 62311
62279: LD_INT 20
62281: DOUBLE
62282: EQUAL
62283: IFTRUE 62311
62285: LD_INT 21
62287: DOUBLE
62288: EQUAL
62289: IFTRUE 62311
62291: LD_INT 23
62293: DOUBLE
62294: EQUAL
62295: IFTRUE 62311
62297: LD_INT 24
62299: DOUBLE
62300: EQUAL
62301: IFTRUE 62311
62303: LD_INT 25
62305: DOUBLE
62306: EQUAL
62307: IFTRUE 62311
62309: GO 62367
62311: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62312: LD_ADDR_VAR 0 9
62316: PUSH
62317: LD_VAR 0 35
62321: PUSH
62322: LD_VAR 0 36
62326: PUSH
62327: LD_VAR 0 37
62331: PUSH
62332: LD_VAR 0 38
62336: PUSH
62337: LD_VAR 0 39
62341: PUSH
62342: LD_VAR 0 40
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: PUSH
62355: LD_VAR 0 4
62359: PUSH
62360: LD_INT 1
62362: PLUS
62363: ARRAY
62364: ST_TO_ADDR
62365: GO 62732
62367: LD_INT 6
62369: DOUBLE
62370: EQUAL
62371: IFTRUE 62423
62373: LD_INT 7
62375: DOUBLE
62376: EQUAL
62377: IFTRUE 62423
62379: LD_INT 8
62381: DOUBLE
62382: EQUAL
62383: IFTRUE 62423
62385: LD_INT 13
62387: DOUBLE
62388: EQUAL
62389: IFTRUE 62423
62391: LD_INT 12
62393: DOUBLE
62394: EQUAL
62395: IFTRUE 62423
62397: LD_INT 15
62399: DOUBLE
62400: EQUAL
62401: IFTRUE 62423
62403: LD_INT 11
62405: DOUBLE
62406: EQUAL
62407: IFTRUE 62423
62409: LD_INT 14
62411: DOUBLE
62412: EQUAL
62413: IFTRUE 62423
62415: LD_INT 10
62417: DOUBLE
62418: EQUAL
62419: IFTRUE 62423
62421: GO 62479
62423: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62424: LD_ADDR_VAR 0 9
62428: PUSH
62429: LD_VAR 0 41
62433: PUSH
62434: LD_VAR 0 42
62438: PUSH
62439: LD_VAR 0 43
62443: PUSH
62444: LD_VAR 0 44
62448: PUSH
62449: LD_VAR 0 45
62453: PUSH
62454: LD_VAR 0 46
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: PUSH
62467: LD_VAR 0 4
62471: PUSH
62472: LD_INT 1
62474: PLUS
62475: ARRAY
62476: ST_TO_ADDR
62477: GO 62732
62479: LD_INT 36
62481: DOUBLE
62482: EQUAL
62483: IFTRUE 62487
62485: GO 62543
62487: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62488: LD_ADDR_VAR 0 9
62492: PUSH
62493: LD_VAR 0 47
62497: PUSH
62498: LD_VAR 0 48
62502: PUSH
62503: LD_VAR 0 49
62507: PUSH
62508: LD_VAR 0 50
62512: PUSH
62513: LD_VAR 0 51
62517: PUSH
62518: LD_VAR 0 52
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: PUSH
62531: LD_VAR 0 4
62535: PUSH
62536: LD_INT 1
62538: PLUS
62539: ARRAY
62540: ST_TO_ADDR
62541: GO 62732
62543: LD_INT 4
62545: DOUBLE
62546: EQUAL
62547: IFTRUE 62569
62549: LD_INT 5
62551: DOUBLE
62552: EQUAL
62553: IFTRUE 62569
62555: LD_INT 34
62557: DOUBLE
62558: EQUAL
62559: IFTRUE 62569
62561: LD_INT 37
62563: DOUBLE
62564: EQUAL
62565: IFTRUE 62569
62567: GO 62625
62569: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62570: LD_ADDR_VAR 0 9
62574: PUSH
62575: LD_VAR 0 53
62579: PUSH
62580: LD_VAR 0 54
62584: PUSH
62585: LD_VAR 0 55
62589: PUSH
62590: LD_VAR 0 56
62594: PUSH
62595: LD_VAR 0 57
62599: PUSH
62600: LD_VAR 0 58
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: PUSH
62613: LD_VAR 0 4
62617: PUSH
62618: LD_INT 1
62620: PLUS
62621: ARRAY
62622: ST_TO_ADDR
62623: GO 62732
62625: LD_INT 31
62627: DOUBLE
62628: EQUAL
62629: IFTRUE 62675
62631: LD_INT 32
62633: DOUBLE
62634: EQUAL
62635: IFTRUE 62675
62637: LD_INT 33
62639: DOUBLE
62640: EQUAL
62641: IFTRUE 62675
62643: LD_INT 27
62645: DOUBLE
62646: EQUAL
62647: IFTRUE 62675
62649: LD_INT 26
62651: DOUBLE
62652: EQUAL
62653: IFTRUE 62675
62655: LD_INT 28
62657: DOUBLE
62658: EQUAL
62659: IFTRUE 62675
62661: LD_INT 29
62663: DOUBLE
62664: EQUAL
62665: IFTRUE 62675
62667: LD_INT 30
62669: DOUBLE
62670: EQUAL
62671: IFTRUE 62675
62673: GO 62731
62675: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62676: LD_ADDR_VAR 0 9
62680: PUSH
62681: LD_VAR 0 59
62685: PUSH
62686: LD_VAR 0 60
62690: PUSH
62691: LD_VAR 0 61
62695: PUSH
62696: LD_VAR 0 62
62700: PUSH
62701: LD_VAR 0 63
62705: PUSH
62706: LD_VAR 0 64
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: PUSH
62719: LD_VAR 0 4
62723: PUSH
62724: LD_INT 1
62726: PLUS
62727: ARRAY
62728: ST_TO_ADDR
62729: GO 62732
62731: POP
// temp_list2 = [ ] ;
62732: LD_ADDR_VAR 0 10
62736: PUSH
62737: EMPTY
62738: ST_TO_ADDR
// for i in temp_list do
62739: LD_ADDR_VAR 0 8
62743: PUSH
62744: LD_VAR 0 9
62748: PUSH
62749: FOR_IN
62750: IFFALSE 62802
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62752: LD_ADDR_VAR 0 10
62756: PUSH
62757: LD_VAR 0 10
62761: PUSH
62762: LD_VAR 0 8
62766: PUSH
62767: LD_INT 1
62769: ARRAY
62770: PUSH
62771: LD_VAR 0 2
62775: PLUS
62776: PUSH
62777: LD_VAR 0 8
62781: PUSH
62782: LD_INT 2
62784: ARRAY
62785: PUSH
62786: LD_VAR 0 3
62790: PLUS
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: EMPTY
62797: LIST
62798: ADD
62799: ST_TO_ADDR
62800: GO 62749
62802: POP
62803: POP
// result = temp_list2 ;
62804: LD_ADDR_VAR 0 7
62808: PUSH
62809: LD_VAR 0 10
62813: ST_TO_ADDR
// end ;
62814: LD_VAR 0 7
62818: RET
// export function EnemyInRange ( unit , dist ) ; begin
62819: LD_INT 0
62821: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62822: LD_ADDR_VAR 0 3
62826: PUSH
62827: LD_VAR 0 1
62831: PPUSH
62832: CALL_OW 255
62836: PPUSH
62837: LD_VAR 0 1
62841: PPUSH
62842: CALL_OW 250
62846: PPUSH
62847: LD_VAR 0 1
62851: PPUSH
62852: CALL_OW 251
62856: PPUSH
62857: LD_VAR 0 2
62861: PPUSH
62862: CALL 36076 0 4
62866: PUSH
62867: LD_INT 4
62869: ARRAY
62870: ST_TO_ADDR
// end ;
62871: LD_VAR 0 3
62875: RET
// export function PlayerSeeMe ( unit ) ; begin
62876: LD_INT 0
62878: PPUSH
// result := See ( your_side , unit ) ;
62879: LD_ADDR_VAR 0 2
62883: PUSH
62884: LD_OWVAR 2
62888: PPUSH
62889: LD_VAR 0 1
62893: PPUSH
62894: CALL_OW 292
62898: ST_TO_ADDR
// end ;
62899: LD_VAR 0 2
62903: RET
// export function ReverseDir ( unit ) ; begin
62904: LD_INT 0
62906: PPUSH
// if not unit then
62907: LD_VAR 0 1
62911: NOT
62912: IFFALSE 62916
// exit ;
62914: GO 62939
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62916: LD_ADDR_VAR 0 2
62920: PUSH
62921: LD_VAR 0 1
62925: PPUSH
62926: CALL_OW 254
62930: PUSH
62931: LD_INT 3
62933: PLUS
62934: PUSH
62935: LD_INT 6
62937: MOD
62938: ST_TO_ADDR
// end ;
62939: LD_VAR 0 2
62943: RET
// export function ReverseArray ( array ) ; var i ; begin
62944: LD_INT 0
62946: PPUSH
62947: PPUSH
// if not array then
62948: LD_VAR 0 1
62952: NOT
62953: IFFALSE 62957
// exit ;
62955: GO 63012
// result := [ ] ;
62957: LD_ADDR_VAR 0 2
62961: PUSH
62962: EMPTY
62963: ST_TO_ADDR
// for i := array downto 1 do
62964: LD_ADDR_VAR 0 3
62968: PUSH
62969: DOUBLE
62970: LD_VAR 0 1
62974: INC
62975: ST_TO_ADDR
62976: LD_INT 1
62978: PUSH
62979: FOR_DOWNTO
62980: IFFALSE 63010
// result := Join ( result , array [ i ] ) ;
62982: LD_ADDR_VAR 0 2
62986: PUSH
62987: LD_VAR 0 2
62991: PPUSH
62992: LD_VAR 0 1
62996: PUSH
62997: LD_VAR 0 3
63001: ARRAY
63002: PPUSH
63003: CALL 67854 0 2
63007: ST_TO_ADDR
63008: GO 62979
63010: POP
63011: POP
// end ;
63012: LD_VAR 0 2
63016: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63017: LD_INT 0
63019: PPUSH
63020: PPUSH
63021: PPUSH
63022: PPUSH
63023: PPUSH
63024: PPUSH
// if not unit or not hexes then
63025: LD_VAR 0 1
63029: NOT
63030: IFTRUE 63039
63032: PUSH
63033: LD_VAR 0 2
63037: NOT
63038: OR
63039: IFFALSE 63043
// exit ;
63041: GO 63166
// dist := 9999 ;
63043: LD_ADDR_VAR 0 5
63047: PUSH
63048: LD_INT 9999
63050: ST_TO_ADDR
// for i = 1 to hexes do
63051: LD_ADDR_VAR 0 4
63055: PUSH
63056: DOUBLE
63057: LD_INT 1
63059: DEC
63060: ST_TO_ADDR
63061: LD_VAR 0 2
63065: PUSH
63066: FOR_TO
63067: IFFALSE 63154
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63069: LD_ADDR_VAR 0 6
63073: PUSH
63074: LD_VAR 0 1
63078: PPUSH
63079: LD_VAR 0 2
63083: PUSH
63084: LD_VAR 0 4
63088: ARRAY
63089: PUSH
63090: LD_INT 1
63092: ARRAY
63093: PPUSH
63094: LD_VAR 0 2
63098: PUSH
63099: LD_VAR 0 4
63103: ARRAY
63104: PUSH
63105: LD_INT 2
63107: ARRAY
63108: PPUSH
63109: CALL_OW 297
63113: ST_TO_ADDR
// if tdist < dist then
63114: LD_VAR 0 6
63118: PUSH
63119: LD_VAR 0 5
63123: LESS
63124: IFFALSE 63152
// begin hex := hexes [ i ] ;
63126: LD_ADDR_VAR 0 8
63130: PUSH
63131: LD_VAR 0 2
63135: PUSH
63136: LD_VAR 0 4
63140: ARRAY
63141: ST_TO_ADDR
// dist := tdist ;
63142: LD_ADDR_VAR 0 5
63146: PUSH
63147: LD_VAR 0 6
63151: ST_TO_ADDR
// end ; end ;
63152: GO 63066
63154: POP
63155: POP
// result := hex ;
63156: LD_ADDR_VAR 0 3
63160: PUSH
63161: LD_VAR 0 8
63165: ST_TO_ADDR
// end ;
63166: LD_VAR 0 3
63170: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63171: LD_INT 0
63173: PPUSH
63174: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63175: LD_VAR 0 1
63179: NOT
63180: IFTRUE 63219
63182: PUSH
63183: LD_VAR 0 1
63187: PUSH
63188: LD_INT 21
63190: PUSH
63191: LD_INT 2
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 23
63200: PUSH
63201: LD_INT 2
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PPUSH
63212: CALL_OW 69
63216: IN
63217: NOT
63218: OR
63219: IFFALSE 63223
// exit ;
63221: GO 63270
// for i = 1 to 3 do
63223: LD_ADDR_VAR 0 3
63227: PUSH
63228: DOUBLE
63229: LD_INT 1
63231: DEC
63232: ST_TO_ADDR
63233: LD_INT 3
63235: PUSH
63236: FOR_TO
63237: IFFALSE 63268
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63239: LD_VAR 0 1
63243: PPUSH
63244: CALL_OW 250
63248: PPUSH
63249: LD_VAR 0 1
63253: PPUSH
63254: CALL_OW 251
63258: PPUSH
63259: LD_INT 1
63261: PPUSH
63262: CALL_OW 453
63266: GO 63236
63268: POP
63269: POP
// end ;
63270: LD_VAR 0 2
63274: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63275: LD_INT 0
63277: PPUSH
63278: PPUSH
63279: PPUSH
63280: PPUSH
63281: PPUSH
63282: PPUSH
// if not unit or not enemy_unit then
63283: LD_VAR 0 1
63287: NOT
63288: IFTRUE 63297
63290: PUSH
63291: LD_VAR 0 2
63295: NOT
63296: OR
63297: IFFALSE 63301
// exit ;
63299: GO 63772
// if GetLives ( i ) < 250 then
63301: LD_VAR 0 4
63305: PPUSH
63306: CALL_OW 256
63310: PUSH
63311: LD_INT 250
63313: LESS
63314: IFFALSE 63327
// begin ComAutodestruct ( i ) ;
63316: LD_VAR 0 4
63320: PPUSH
63321: CALL 63171 0 1
// exit ;
63325: GO 63772
// end ; x := GetX ( enemy_unit ) ;
63327: LD_ADDR_VAR 0 7
63331: PUSH
63332: LD_VAR 0 2
63336: PPUSH
63337: CALL_OW 250
63341: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63342: LD_ADDR_VAR 0 8
63346: PUSH
63347: LD_VAR 0 2
63351: PPUSH
63352: CALL_OW 251
63356: ST_TO_ADDR
// if not x or not y then
63357: LD_VAR 0 7
63361: NOT
63362: IFTRUE 63371
63364: PUSH
63365: LD_VAR 0 8
63369: NOT
63370: OR
63371: IFFALSE 63375
// exit ;
63373: GO 63772
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63375: LD_ADDR_VAR 0 6
63379: PUSH
63380: LD_VAR 0 7
63384: PPUSH
63385: LD_INT 0
63387: PPUSH
63388: LD_INT 4
63390: PPUSH
63391: CALL_OW 272
63395: PUSH
63396: LD_VAR 0 8
63400: PPUSH
63401: LD_INT 0
63403: PPUSH
63404: LD_INT 4
63406: PPUSH
63407: CALL_OW 273
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_VAR 0 7
63420: PPUSH
63421: LD_INT 1
63423: PPUSH
63424: LD_INT 4
63426: PPUSH
63427: CALL_OW 272
63431: PUSH
63432: LD_VAR 0 8
63436: PPUSH
63437: LD_INT 1
63439: PPUSH
63440: LD_INT 4
63442: PPUSH
63443: CALL_OW 273
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_VAR 0 7
63456: PPUSH
63457: LD_INT 2
63459: PPUSH
63460: LD_INT 4
63462: PPUSH
63463: CALL_OW 272
63467: PUSH
63468: LD_VAR 0 8
63472: PPUSH
63473: LD_INT 2
63475: PPUSH
63476: LD_INT 4
63478: PPUSH
63479: CALL_OW 273
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_VAR 0 7
63492: PPUSH
63493: LD_INT 3
63495: PPUSH
63496: LD_INT 4
63498: PPUSH
63499: CALL_OW 272
63503: PUSH
63504: LD_VAR 0 8
63508: PPUSH
63509: LD_INT 3
63511: PPUSH
63512: LD_INT 4
63514: PPUSH
63515: CALL_OW 273
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_VAR 0 7
63528: PPUSH
63529: LD_INT 4
63531: PPUSH
63532: LD_INT 4
63534: PPUSH
63535: CALL_OW 272
63539: PUSH
63540: LD_VAR 0 8
63544: PPUSH
63545: LD_INT 4
63547: PPUSH
63548: LD_INT 4
63550: PPUSH
63551: CALL_OW 273
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_VAR 0 7
63564: PPUSH
63565: LD_INT 5
63567: PPUSH
63568: LD_INT 4
63570: PPUSH
63571: CALL_OW 272
63575: PUSH
63576: LD_VAR 0 8
63580: PPUSH
63581: LD_INT 5
63583: PPUSH
63584: LD_INT 4
63586: PPUSH
63587: CALL_OW 273
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: ST_TO_ADDR
// for i = tmp downto 1 do
63604: LD_ADDR_VAR 0 4
63608: PUSH
63609: DOUBLE
63610: LD_VAR 0 6
63614: INC
63615: ST_TO_ADDR
63616: LD_INT 1
63618: PUSH
63619: FOR_DOWNTO
63620: IFFALSE 63723
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63622: LD_VAR 0 6
63626: PUSH
63627: LD_VAR 0 4
63631: ARRAY
63632: PUSH
63633: LD_INT 1
63635: ARRAY
63636: PPUSH
63637: LD_VAR 0 6
63641: PUSH
63642: LD_VAR 0 4
63646: ARRAY
63647: PUSH
63648: LD_INT 2
63650: ARRAY
63651: PPUSH
63652: CALL_OW 488
63656: NOT
63657: IFTRUE 63699
63659: PUSH
63660: LD_VAR 0 6
63664: PUSH
63665: LD_VAR 0 4
63669: ARRAY
63670: PUSH
63671: LD_INT 1
63673: ARRAY
63674: PPUSH
63675: LD_VAR 0 6
63679: PUSH
63680: LD_VAR 0 4
63684: ARRAY
63685: PUSH
63686: LD_INT 2
63688: ARRAY
63689: PPUSH
63690: CALL_OW 428
63694: PUSH
63695: LD_INT 0
63697: NONEQUAL
63698: OR
63699: IFFALSE 63721
// tmp := Delete ( tmp , i ) ;
63701: LD_ADDR_VAR 0 6
63705: PUSH
63706: LD_VAR 0 6
63710: PPUSH
63711: LD_VAR 0 4
63715: PPUSH
63716: CALL_OW 3
63720: ST_TO_ADDR
63721: GO 63619
63723: POP
63724: POP
// j := GetClosestHex ( unit , tmp ) ;
63725: LD_ADDR_VAR 0 5
63729: PUSH
63730: LD_VAR 0 1
63734: PPUSH
63735: LD_VAR 0 6
63739: PPUSH
63740: CALL 63017 0 2
63744: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63745: LD_VAR 0 1
63749: PPUSH
63750: LD_VAR 0 5
63754: PUSH
63755: LD_INT 1
63757: ARRAY
63758: PPUSH
63759: LD_VAR 0 5
63763: PUSH
63764: LD_INT 2
63766: ARRAY
63767: PPUSH
63768: CALL_OW 111
// end ;
63772: LD_VAR 0 3
63776: RET
// export function PrepareApemanSoldier ( ) ; begin
63777: LD_INT 0
63779: PPUSH
// uc_nation := 0 ;
63780: LD_ADDR_OWVAR 21
63784: PUSH
63785: LD_INT 0
63787: ST_TO_ADDR
// hc_sex := sex_male ;
63788: LD_ADDR_OWVAR 27
63792: PUSH
63793: LD_INT 1
63795: ST_TO_ADDR
// hc_name :=  ;
63796: LD_ADDR_OWVAR 26
63800: PUSH
63801: LD_STRING 
63803: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63804: LD_ADDR_OWVAR 28
63808: PUSH
63809: LD_INT 15
63811: ST_TO_ADDR
// hc_gallery :=  ;
63812: LD_ADDR_OWVAR 33
63816: PUSH
63817: LD_STRING 
63819: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63820: LD_ADDR_OWVAR 31
63824: PUSH
63825: LD_INT 0
63827: PPUSH
63828: LD_INT 3
63830: PPUSH
63831: CALL_OW 12
63835: PUSH
63836: LD_INT 0
63838: PPUSH
63839: LD_INT 3
63841: PPUSH
63842: CALL_OW 12
63846: PUSH
63847: LD_INT 0
63849: PUSH
63850: LD_INT 0
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
63859: LD_ADDR_OWVAR 29
63863: PUSH
63864: LD_INT 12
63866: PUSH
63867: LD_INT 12
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: ST_TO_ADDR
// end ;
63874: LD_VAR 0 1
63878: RET
// export function PrepareApemanEngineer ( ) ; begin
63879: LD_INT 0
63881: PPUSH
// uc_nation := 0 ;
63882: LD_ADDR_OWVAR 21
63886: PUSH
63887: LD_INT 0
63889: ST_TO_ADDR
// hc_sex := sex_male ;
63890: LD_ADDR_OWVAR 27
63894: PUSH
63895: LD_INT 1
63897: ST_TO_ADDR
// hc_name :=  ;
63898: LD_ADDR_OWVAR 26
63902: PUSH
63903: LD_STRING 
63905: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63906: LD_ADDR_OWVAR 28
63910: PUSH
63911: LD_INT 16
63913: ST_TO_ADDR
// hc_gallery :=  ;
63914: LD_ADDR_OWVAR 33
63918: PUSH
63919: LD_STRING 
63921: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63922: LD_ADDR_OWVAR 31
63926: PUSH
63927: LD_INT 0
63929: PPUSH
63930: LD_INT 3
63932: PPUSH
63933: CALL_OW 12
63937: PUSH
63938: LD_INT 0
63940: PPUSH
63941: LD_INT 3
63943: PPUSH
63944: CALL_OW 12
63948: PUSH
63949: LD_INT 0
63951: PUSH
63952: LD_INT 0
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
63961: LD_ADDR_OWVAR 29
63965: PUSH
63966: LD_INT 12
63968: PUSH
63969: LD_INT 12
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: ST_TO_ADDR
// end ;
63976: LD_VAR 0 1
63980: RET
// export function PrepareApeman ( agressivity ) ; begin
63981: LD_INT 0
63983: PPUSH
// uc_side := 0 ;
63984: LD_ADDR_OWVAR 20
63988: PUSH
63989: LD_INT 0
63991: ST_TO_ADDR
// uc_nation := 0 ;
63992: LD_ADDR_OWVAR 21
63996: PUSH
63997: LD_INT 0
63999: ST_TO_ADDR
// hc_sex := sex_male ;
64000: LD_ADDR_OWVAR 27
64004: PUSH
64005: LD_INT 1
64007: ST_TO_ADDR
// hc_class := class_apeman ;
64008: LD_ADDR_OWVAR 28
64012: PUSH
64013: LD_INT 12
64015: ST_TO_ADDR
// hc_gallery :=  ;
64016: LD_ADDR_OWVAR 33
64020: PUSH
64021: LD_STRING 
64023: ST_TO_ADDR
// hc_name :=  ;
64024: LD_ADDR_OWVAR 26
64028: PUSH
64029: LD_STRING 
64031: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64032: LD_ADDR_OWVAR 29
64036: PUSH
64037: LD_INT 12
64039: PUSH
64040: LD_INT 12
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: ST_TO_ADDR
// if agressivity = 0 then
64047: LD_VAR 0 1
64051: PUSH
64052: LD_INT 0
64054: EQUAL
64055: IFFALSE 64067
// hc_agressivity := 0 else
64057: LD_ADDR_OWVAR 35
64061: PUSH
64062: LD_INT 0
64064: ST_TO_ADDR
64065: GO 64088
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64067: LD_ADDR_OWVAR 35
64071: PUSH
64072: LD_VAR 0 1
64076: NEG
64077: PPUSH
64078: LD_VAR 0 1
64082: PPUSH
64083: CALL_OW 12
64087: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64088: LD_ADDR_OWVAR 31
64092: PUSH
64093: LD_INT 0
64095: PPUSH
64096: LD_INT 3
64098: PPUSH
64099: CALL_OW 12
64103: PUSH
64104: LD_INT 0
64106: PPUSH
64107: LD_INT 3
64109: PPUSH
64110: CALL_OW 12
64114: PUSH
64115: LD_INT 0
64117: PUSH
64118: LD_INT 0
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: ST_TO_ADDR
// end ;
64127: LD_VAR 0 2
64131: RET
// export function PrepareTiger ( agressivity ) ; begin
64132: LD_INT 0
64134: PPUSH
// uc_side := 0 ;
64135: LD_ADDR_OWVAR 20
64139: PUSH
64140: LD_INT 0
64142: ST_TO_ADDR
// uc_nation := 0 ;
64143: LD_ADDR_OWVAR 21
64147: PUSH
64148: LD_INT 0
64150: ST_TO_ADDR
// InitHc ;
64151: CALL_OW 19
// hc_class := class_tiger ;
64155: LD_ADDR_OWVAR 28
64159: PUSH
64160: LD_INT 14
64162: ST_TO_ADDR
// hc_gallery :=  ;
64163: LD_ADDR_OWVAR 33
64167: PUSH
64168: LD_STRING 
64170: ST_TO_ADDR
// hc_name :=  ;
64171: LD_ADDR_OWVAR 26
64175: PUSH
64176: LD_STRING 
64178: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64179: LD_ADDR_OWVAR 35
64183: PUSH
64184: LD_VAR 0 1
64188: NEG
64189: PPUSH
64190: LD_VAR 0 1
64194: PPUSH
64195: CALL_OW 12
64199: ST_TO_ADDR
// end ;
64200: LD_VAR 0 2
64204: RET
// export function PrepareEnchidna ( ) ; begin
64205: LD_INT 0
64207: PPUSH
// uc_side := 0 ;
64208: LD_ADDR_OWVAR 20
64212: PUSH
64213: LD_INT 0
64215: ST_TO_ADDR
// uc_nation := 0 ;
64216: LD_ADDR_OWVAR 21
64220: PUSH
64221: LD_INT 0
64223: ST_TO_ADDR
// InitHc ;
64224: CALL_OW 19
// hc_class := class_baggie ;
64228: LD_ADDR_OWVAR 28
64232: PUSH
64233: LD_INT 13
64235: ST_TO_ADDR
// hc_gallery :=  ;
64236: LD_ADDR_OWVAR 33
64240: PUSH
64241: LD_STRING 
64243: ST_TO_ADDR
// hc_name :=  ;
64244: LD_ADDR_OWVAR 26
64248: PUSH
64249: LD_STRING 
64251: ST_TO_ADDR
// end ;
64252: LD_VAR 0 1
64256: RET
// export function PrepareFrog ( ) ; begin
64257: LD_INT 0
64259: PPUSH
// uc_side := 0 ;
64260: LD_ADDR_OWVAR 20
64264: PUSH
64265: LD_INT 0
64267: ST_TO_ADDR
// uc_nation := 0 ;
64268: LD_ADDR_OWVAR 21
64272: PUSH
64273: LD_INT 0
64275: ST_TO_ADDR
// InitHc ;
64276: CALL_OW 19
// hc_class := class_frog ;
64280: LD_ADDR_OWVAR 28
64284: PUSH
64285: LD_INT 19
64287: ST_TO_ADDR
// hc_gallery :=  ;
64288: LD_ADDR_OWVAR 33
64292: PUSH
64293: LD_STRING 
64295: ST_TO_ADDR
// hc_name :=  ;
64296: LD_ADDR_OWVAR 26
64300: PUSH
64301: LD_STRING 
64303: ST_TO_ADDR
// end ;
64304: LD_VAR 0 1
64308: RET
// export function PrepareFish ( ) ; begin
64309: LD_INT 0
64311: PPUSH
// uc_side := 0 ;
64312: LD_ADDR_OWVAR 20
64316: PUSH
64317: LD_INT 0
64319: ST_TO_ADDR
// uc_nation := 0 ;
64320: LD_ADDR_OWVAR 21
64324: PUSH
64325: LD_INT 0
64327: ST_TO_ADDR
// InitHc ;
64328: CALL_OW 19
// hc_class := class_fish ;
64332: LD_ADDR_OWVAR 28
64336: PUSH
64337: LD_INT 20
64339: ST_TO_ADDR
// hc_gallery :=  ;
64340: LD_ADDR_OWVAR 33
64344: PUSH
64345: LD_STRING 
64347: ST_TO_ADDR
// hc_name :=  ;
64348: LD_ADDR_OWVAR 26
64352: PUSH
64353: LD_STRING 
64355: ST_TO_ADDR
// end ;
64356: LD_VAR 0 1
64360: RET
// export function PrepareBird ( ) ; begin
64361: LD_INT 0
64363: PPUSH
// uc_side := 0 ;
64364: LD_ADDR_OWVAR 20
64368: PUSH
64369: LD_INT 0
64371: ST_TO_ADDR
// uc_nation := 0 ;
64372: LD_ADDR_OWVAR 21
64376: PUSH
64377: LD_INT 0
64379: ST_TO_ADDR
// InitHc ;
64380: CALL_OW 19
// hc_class := class_phororhacos ;
64384: LD_ADDR_OWVAR 28
64388: PUSH
64389: LD_INT 18
64391: ST_TO_ADDR
// hc_gallery :=  ;
64392: LD_ADDR_OWVAR 33
64396: PUSH
64397: LD_STRING 
64399: ST_TO_ADDR
// hc_name :=  ;
64400: LD_ADDR_OWVAR 26
64404: PUSH
64405: LD_STRING 
64407: ST_TO_ADDR
// end ;
64408: LD_VAR 0 1
64412: RET
// export function PrepareHorse ( ) ; begin
64413: LD_INT 0
64415: PPUSH
// uc_side := 0 ;
64416: LD_ADDR_OWVAR 20
64420: PUSH
64421: LD_INT 0
64423: ST_TO_ADDR
// uc_nation := 0 ;
64424: LD_ADDR_OWVAR 21
64428: PUSH
64429: LD_INT 0
64431: ST_TO_ADDR
// InitHc ;
64432: CALL_OW 19
// hc_class := class_horse ;
64436: LD_ADDR_OWVAR 28
64440: PUSH
64441: LD_INT 21
64443: ST_TO_ADDR
// hc_gallery :=  ;
64444: LD_ADDR_OWVAR 33
64448: PUSH
64449: LD_STRING 
64451: ST_TO_ADDR
// hc_name :=  ;
64452: LD_ADDR_OWVAR 26
64456: PUSH
64457: LD_STRING 
64459: ST_TO_ADDR
// end ;
64460: LD_VAR 0 1
64464: RET
// export function PrepareMastodont ( ) ; begin
64465: LD_INT 0
64467: PPUSH
// uc_side := 0 ;
64468: LD_ADDR_OWVAR 20
64472: PUSH
64473: LD_INT 0
64475: ST_TO_ADDR
// uc_nation := 0 ;
64476: LD_ADDR_OWVAR 21
64480: PUSH
64481: LD_INT 0
64483: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64484: LD_ADDR_OWVAR 37
64488: PUSH
64489: LD_INT 31
64491: ST_TO_ADDR
// vc_control := control_rider ;
64492: LD_ADDR_OWVAR 38
64496: PUSH
64497: LD_INT 4
64499: ST_TO_ADDR
// end ;
64500: LD_VAR 0 1
64504: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64505: LD_INT 0
64507: PPUSH
64508: PPUSH
64509: PPUSH
// uc_side = 0 ;
64510: LD_ADDR_OWVAR 20
64514: PUSH
64515: LD_INT 0
64517: ST_TO_ADDR
// uc_nation = 0 ;
64518: LD_ADDR_OWVAR 21
64522: PUSH
64523: LD_INT 0
64525: ST_TO_ADDR
// InitHc_All ( ) ;
64526: CALL_OW 584
// InitVc ;
64530: CALL_OW 20
// if mastodonts then
64534: LD_VAR 0 6
64538: IFFALSE 64605
// for i = 1 to mastodonts do
64540: LD_ADDR_VAR 0 11
64544: PUSH
64545: DOUBLE
64546: LD_INT 1
64548: DEC
64549: ST_TO_ADDR
64550: LD_VAR 0 6
64554: PUSH
64555: FOR_TO
64556: IFFALSE 64603
// begin vc_chassis := 31 ;
64558: LD_ADDR_OWVAR 37
64562: PUSH
64563: LD_INT 31
64565: ST_TO_ADDR
// vc_control := control_rider ;
64566: LD_ADDR_OWVAR 38
64570: PUSH
64571: LD_INT 4
64573: ST_TO_ADDR
// animal := CreateVehicle ;
64574: LD_ADDR_VAR 0 12
64578: PUSH
64579: CALL_OW 45
64583: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64584: LD_VAR 0 12
64588: PPUSH
64589: LD_VAR 0 8
64593: PPUSH
64594: LD_INT 0
64596: PPUSH
64597: CALL 66747 0 3
// end ;
64601: GO 64555
64603: POP
64604: POP
// if horses then
64605: LD_VAR 0 5
64609: IFFALSE 64676
// for i = 1 to horses do
64611: LD_ADDR_VAR 0 11
64615: PUSH
64616: DOUBLE
64617: LD_INT 1
64619: DEC
64620: ST_TO_ADDR
64621: LD_VAR 0 5
64625: PUSH
64626: FOR_TO
64627: IFFALSE 64674
// begin hc_class := 21 ;
64629: LD_ADDR_OWVAR 28
64633: PUSH
64634: LD_INT 21
64636: ST_TO_ADDR
// hc_gallery :=  ;
64637: LD_ADDR_OWVAR 33
64641: PUSH
64642: LD_STRING 
64644: ST_TO_ADDR
// animal := CreateHuman ;
64645: LD_ADDR_VAR 0 12
64649: PUSH
64650: CALL_OW 44
64654: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64655: LD_VAR 0 12
64659: PPUSH
64660: LD_VAR 0 8
64664: PPUSH
64665: LD_INT 0
64667: PPUSH
64668: CALL 66747 0 3
// end ;
64672: GO 64626
64674: POP
64675: POP
// if birds then
64676: LD_VAR 0 1
64680: IFFALSE 64747
// for i = 1 to birds do
64682: LD_ADDR_VAR 0 11
64686: PUSH
64687: DOUBLE
64688: LD_INT 1
64690: DEC
64691: ST_TO_ADDR
64692: LD_VAR 0 1
64696: PUSH
64697: FOR_TO
64698: IFFALSE 64745
// begin hc_class := 18 ;
64700: LD_ADDR_OWVAR 28
64704: PUSH
64705: LD_INT 18
64707: ST_TO_ADDR
// hc_gallery =  ;
64708: LD_ADDR_OWVAR 33
64712: PUSH
64713: LD_STRING 
64715: ST_TO_ADDR
// animal := CreateHuman ;
64716: LD_ADDR_VAR 0 12
64720: PUSH
64721: CALL_OW 44
64725: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64726: LD_VAR 0 12
64730: PPUSH
64731: LD_VAR 0 8
64735: PPUSH
64736: LD_INT 0
64738: PPUSH
64739: CALL 66747 0 3
// end ;
64743: GO 64697
64745: POP
64746: POP
// if tigers then
64747: LD_VAR 0 2
64751: IFFALSE 64835
// for i = 1 to tigers do
64753: LD_ADDR_VAR 0 11
64757: PUSH
64758: DOUBLE
64759: LD_INT 1
64761: DEC
64762: ST_TO_ADDR
64763: LD_VAR 0 2
64767: PUSH
64768: FOR_TO
64769: IFFALSE 64833
// begin hc_class = class_tiger ;
64771: LD_ADDR_OWVAR 28
64775: PUSH
64776: LD_INT 14
64778: ST_TO_ADDR
// hc_gallery =  ;
64779: LD_ADDR_OWVAR 33
64783: PUSH
64784: LD_STRING 
64786: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64787: LD_ADDR_OWVAR 35
64791: PUSH
64792: LD_INT 7
64794: NEG
64795: PPUSH
64796: LD_INT 7
64798: PPUSH
64799: CALL_OW 12
64803: ST_TO_ADDR
// animal := CreateHuman ;
64804: LD_ADDR_VAR 0 12
64808: PUSH
64809: CALL_OW 44
64813: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64814: LD_VAR 0 12
64818: PPUSH
64819: LD_VAR 0 8
64823: PPUSH
64824: LD_INT 0
64826: PPUSH
64827: CALL 66747 0 3
// end ;
64831: GO 64768
64833: POP
64834: POP
// if apemans then
64835: LD_VAR 0 3
64839: IFFALSE 64962
// for i = 1 to apemans do
64841: LD_ADDR_VAR 0 11
64845: PUSH
64846: DOUBLE
64847: LD_INT 1
64849: DEC
64850: ST_TO_ADDR
64851: LD_VAR 0 3
64855: PUSH
64856: FOR_TO
64857: IFFALSE 64960
// begin hc_class = class_apeman ;
64859: LD_ADDR_OWVAR 28
64863: PUSH
64864: LD_INT 12
64866: ST_TO_ADDR
// hc_gallery =  ;
64867: LD_ADDR_OWVAR 33
64871: PUSH
64872: LD_STRING 
64874: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64875: LD_ADDR_OWVAR 35
64879: PUSH
64880: LD_INT 2
64882: NEG
64883: PPUSH
64884: LD_INT 2
64886: PPUSH
64887: CALL_OW 12
64891: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64892: LD_ADDR_OWVAR 31
64896: PUSH
64897: LD_INT 1
64899: PPUSH
64900: LD_INT 3
64902: PPUSH
64903: CALL_OW 12
64907: PUSH
64908: LD_INT 1
64910: PPUSH
64911: LD_INT 3
64913: PPUSH
64914: CALL_OW 12
64918: PUSH
64919: LD_INT 0
64921: PUSH
64922: LD_INT 0
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: ST_TO_ADDR
// animal := CreateHuman ;
64931: LD_ADDR_VAR 0 12
64935: PUSH
64936: CALL_OW 44
64940: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64941: LD_VAR 0 12
64945: PPUSH
64946: LD_VAR 0 8
64950: PPUSH
64951: LD_INT 0
64953: PPUSH
64954: CALL 66747 0 3
// end ;
64958: GO 64856
64960: POP
64961: POP
// if enchidnas then
64962: LD_VAR 0 4
64966: IFFALSE 65033
// for i = 1 to enchidnas do
64968: LD_ADDR_VAR 0 11
64972: PUSH
64973: DOUBLE
64974: LD_INT 1
64976: DEC
64977: ST_TO_ADDR
64978: LD_VAR 0 4
64982: PUSH
64983: FOR_TO
64984: IFFALSE 65031
// begin hc_class = 13 ;
64986: LD_ADDR_OWVAR 28
64990: PUSH
64991: LD_INT 13
64993: ST_TO_ADDR
// hc_gallery =  ;
64994: LD_ADDR_OWVAR 33
64998: PUSH
64999: LD_STRING 
65001: ST_TO_ADDR
// animal := CreateHuman ;
65002: LD_ADDR_VAR 0 12
65006: PUSH
65007: CALL_OW 44
65011: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65012: LD_VAR 0 12
65016: PPUSH
65017: LD_VAR 0 8
65021: PPUSH
65022: LD_INT 0
65024: PPUSH
65025: CALL 66747 0 3
// end ;
65029: GO 64983
65031: POP
65032: POP
// if fishes then
65033: LD_VAR 0 7
65037: IFFALSE 65104
// for i = 1 to fishes do
65039: LD_ADDR_VAR 0 11
65043: PUSH
65044: DOUBLE
65045: LD_INT 1
65047: DEC
65048: ST_TO_ADDR
65049: LD_VAR 0 7
65053: PUSH
65054: FOR_TO
65055: IFFALSE 65102
// begin hc_class = 20 ;
65057: LD_ADDR_OWVAR 28
65061: PUSH
65062: LD_INT 20
65064: ST_TO_ADDR
// hc_gallery =  ;
65065: LD_ADDR_OWVAR 33
65069: PUSH
65070: LD_STRING 
65072: ST_TO_ADDR
// animal := CreateHuman ;
65073: LD_ADDR_VAR 0 12
65077: PUSH
65078: CALL_OW 44
65082: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65083: LD_VAR 0 12
65087: PPUSH
65088: LD_VAR 0 9
65092: PPUSH
65093: LD_INT 0
65095: PPUSH
65096: CALL 66747 0 3
// end ;
65100: GO 65054
65102: POP
65103: POP
// end ;
65104: LD_VAR 0 10
65108: RET
// export function WantHeal ( sci , unit ) ; begin
65109: LD_INT 0
65111: PPUSH
// if GetTaskList ( sci ) > 0 then
65112: LD_VAR 0 1
65116: PPUSH
65117: CALL_OW 437
65121: PUSH
65122: LD_INT 0
65124: GREATER
65125: IFFALSE 65197
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65127: LD_VAR 0 1
65131: PPUSH
65132: CALL_OW 437
65136: PUSH
65137: LD_INT 1
65139: ARRAY
65140: PUSH
65141: LD_INT 1
65143: ARRAY
65144: PUSH
65145: LD_STRING l
65147: EQUAL
65148: IFFALSE 65175
65150: PUSH
65151: LD_VAR 0 1
65155: PPUSH
65156: CALL_OW 437
65160: PUSH
65161: LD_INT 1
65163: ARRAY
65164: PUSH
65165: LD_INT 4
65167: ARRAY
65168: PUSH
65169: LD_VAR 0 2
65173: EQUAL
65174: AND
65175: IFFALSE 65187
// result := true else
65177: LD_ADDR_VAR 0 3
65181: PUSH
65182: LD_INT 1
65184: ST_TO_ADDR
65185: GO 65195
// result := false ;
65187: LD_ADDR_VAR 0 3
65191: PUSH
65192: LD_INT 0
65194: ST_TO_ADDR
// end else
65195: GO 65205
// result := false ;
65197: LD_ADDR_VAR 0 3
65201: PUSH
65202: LD_INT 0
65204: ST_TO_ADDR
// end ;
65205: LD_VAR 0 3
65209: RET
// export function HealTarget ( sci ) ; begin
65210: LD_INT 0
65212: PPUSH
// if not sci then
65213: LD_VAR 0 1
65217: NOT
65218: IFFALSE 65222
// exit ;
65220: GO 65287
// result := 0 ;
65222: LD_ADDR_VAR 0 2
65226: PUSH
65227: LD_INT 0
65229: ST_TO_ADDR
// if GetTaskList ( sci ) then
65230: LD_VAR 0 1
65234: PPUSH
65235: CALL_OW 437
65239: IFFALSE 65287
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65241: LD_VAR 0 1
65245: PPUSH
65246: CALL_OW 437
65250: PUSH
65251: LD_INT 1
65253: ARRAY
65254: PUSH
65255: LD_INT 1
65257: ARRAY
65258: PUSH
65259: LD_STRING l
65261: EQUAL
65262: IFFALSE 65287
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65264: LD_ADDR_VAR 0 2
65268: PUSH
65269: LD_VAR 0 1
65273: PPUSH
65274: CALL_OW 437
65278: PUSH
65279: LD_INT 1
65281: ARRAY
65282: PUSH
65283: LD_INT 4
65285: ARRAY
65286: ST_TO_ADDR
// end ;
65287: LD_VAR 0 2
65291: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65292: LD_INT 0
65294: PPUSH
65295: PPUSH
65296: PPUSH
65297: PPUSH
// if not base_units then
65298: LD_VAR 0 1
65302: NOT
65303: IFFALSE 65307
// exit ;
65305: GO 65394
// result := false ;
65307: LD_ADDR_VAR 0 2
65311: PUSH
65312: LD_INT 0
65314: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65315: LD_ADDR_VAR 0 5
65319: PUSH
65320: LD_VAR 0 1
65324: PPUSH
65325: LD_INT 21
65327: PUSH
65328: LD_INT 3
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PPUSH
65335: CALL_OW 72
65339: ST_TO_ADDR
// if not tmp then
65340: LD_VAR 0 5
65344: NOT
65345: IFFALSE 65349
// exit ;
65347: GO 65394
// for i in tmp do
65349: LD_ADDR_VAR 0 3
65353: PUSH
65354: LD_VAR 0 5
65358: PUSH
65359: FOR_IN
65360: IFFALSE 65392
// begin result := EnemyInRange ( i , 22 ) ;
65362: LD_ADDR_VAR 0 2
65366: PUSH
65367: LD_VAR 0 3
65371: PPUSH
65372: LD_INT 22
65374: PPUSH
65375: CALL 62819 0 2
65379: ST_TO_ADDR
// if result then
65380: LD_VAR 0 2
65384: IFFALSE 65390
// exit ;
65386: POP
65387: POP
65388: GO 65394
// end ;
65390: GO 65359
65392: POP
65393: POP
// end ;
65394: LD_VAR 0 2
65398: RET
// export function FilterByTag ( units , tag ) ; begin
65399: LD_INT 0
65401: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65402: LD_ADDR_VAR 0 3
65406: PUSH
65407: LD_VAR 0 1
65411: PPUSH
65412: LD_INT 120
65414: PUSH
65415: LD_VAR 0 2
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PPUSH
65424: CALL_OW 72
65428: ST_TO_ADDR
// end ;
65429: LD_VAR 0 3
65433: RET
// export function IsDriver ( un ) ; begin
65434: LD_INT 0
65436: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65437: LD_ADDR_VAR 0 2
65441: PUSH
65442: LD_VAR 0 1
65446: PUSH
65447: LD_INT 55
65449: PUSH
65450: EMPTY
65451: LIST
65452: PPUSH
65453: CALL_OW 69
65457: IN
65458: ST_TO_ADDR
// end ;
65459: LD_VAR 0 2
65463: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65464: LD_INT 0
65466: PPUSH
65467: PPUSH
// list := [ ] ;
65468: LD_ADDR_VAR 0 5
65472: PUSH
65473: EMPTY
65474: ST_TO_ADDR
// case d of 0 :
65475: LD_VAR 0 3
65479: PUSH
65480: LD_INT 0
65482: DOUBLE
65483: EQUAL
65484: IFTRUE 65488
65486: GO 65621
65488: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65489: LD_ADDR_VAR 0 5
65493: PUSH
65494: LD_VAR 0 1
65498: PUSH
65499: LD_INT 4
65501: MINUS
65502: PUSH
65503: LD_VAR 0 2
65507: PUSH
65508: LD_INT 4
65510: MINUS
65511: PUSH
65512: LD_INT 2
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: LIST
65519: PUSH
65520: LD_VAR 0 1
65524: PUSH
65525: LD_INT 3
65527: MINUS
65528: PUSH
65529: LD_VAR 0 2
65533: PUSH
65534: LD_INT 1
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: LIST
65541: PUSH
65542: LD_VAR 0 1
65546: PUSH
65547: LD_INT 4
65549: PLUS
65550: PUSH
65551: LD_VAR 0 2
65555: PUSH
65556: LD_INT 4
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: LIST
65563: PUSH
65564: LD_VAR 0 1
65568: PUSH
65569: LD_INT 3
65571: PLUS
65572: PUSH
65573: LD_VAR 0 2
65577: PUSH
65578: LD_INT 3
65580: PLUS
65581: PUSH
65582: LD_INT 5
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: LIST
65589: PUSH
65590: LD_VAR 0 1
65594: PUSH
65595: LD_VAR 0 2
65599: PUSH
65600: LD_INT 4
65602: PLUS
65603: PUSH
65604: LD_INT 0
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: LIST
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: ST_TO_ADDR
// end ; 1 :
65619: GO 66319
65621: LD_INT 1
65623: DOUBLE
65624: EQUAL
65625: IFTRUE 65629
65627: GO 65762
65629: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65630: LD_ADDR_VAR 0 5
65634: PUSH
65635: LD_VAR 0 1
65639: PUSH
65640: LD_VAR 0 2
65644: PUSH
65645: LD_INT 4
65647: MINUS
65648: PUSH
65649: LD_INT 3
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: LIST
65656: PUSH
65657: LD_VAR 0 1
65661: PUSH
65662: LD_INT 3
65664: MINUS
65665: PUSH
65666: LD_VAR 0 2
65670: PUSH
65671: LD_INT 3
65673: MINUS
65674: PUSH
65675: LD_INT 2
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: LIST
65682: PUSH
65683: LD_VAR 0 1
65687: PUSH
65688: LD_INT 4
65690: MINUS
65691: PUSH
65692: LD_VAR 0 2
65696: PUSH
65697: LD_INT 1
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: LIST
65704: PUSH
65705: LD_VAR 0 1
65709: PUSH
65710: LD_VAR 0 2
65714: PUSH
65715: LD_INT 3
65717: PLUS
65718: PUSH
65719: LD_INT 0
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: LIST
65726: PUSH
65727: LD_VAR 0 1
65731: PUSH
65732: LD_INT 4
65734: PLUS
65735: PUSH
65736: LD_VAR 0 2
65740: PUSH
65741: LD_INT 4
65743: PLUS
65744: PUSH
65745: LD_INT 5
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: LIST
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: ST_TO_ADDR
// end ; 2 :
65760: GO 66319
65762: LD_INT 2
65764: DOUBLE
65765: EQUAL
65766: IFTRUE 65770
65768: GO 65899
65770: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65771: LD_ADDR_VAR 0 5
65775: PUSH
65776: LD_VAR 0 1
65780: PUSH
65781: LD_VAR 0 2
65785: PUSH
65786: LD_INT 3
65788: MINUS
65789: PUSH
65790: LD_INT 3
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: LIST
65797: PUSH
65798: LD_VAR 0 1
65802: PUSH
65803: LD_INT 4
65805: PLUS
65806: PUSH
65807: LD_VAR 0 2
65811: PUSH
65812: LD_INT 4
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: LIST
65819: PUSH
65820: LD_VAR 0 1
65824: PUSH
65825: LD_VAR 0 2
65829: PUSH
65830: LD_INT 4
65832: PLUS
65833: PUSH
65834: LD_INT 0
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: LIST
65841: PUSH
65842: LD_VAR 0 1
65846: PUSH
65847: LD_INT 3
65849: MINUS
65850: PUSH
65851: LD_VAR 0 2
65855: PUSH
65856: LD_INT 1
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: LIST
65863: PUSH
65864: LD_VAR 0 1
65868: PUSH
65869: LD_INT 4
65871: MINUS
65872: PUSH
65873: LD_VAR 0 2
65877: PUSH
65878: LD_INT 4
65880: MINUS
65881: PUSH
65882: LD_INT 2
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: LIST
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: ST_TO_ADDR
// end ; 3 :
65897: GO 66319
65899: LD_INT 3
65901: DOUBLE
65902: EQUAL
65903: IFTRUE 65907
65905: GO 66040
65907: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65908: LD_ADDR_VAR 0 5
65912: PUSH
65913: LD_VAR 0 1
65917: PUSH
65918: LD_INT 3
65920: PLUS
65921: PUSH
65922: LD_VAR 0 2
65926: PUSH
65927: LD_INT 4
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: LIST
65934: PUSH
65935: LD_VAR 0 1
65939: PUSH
65940: LD_INT 4
65942: PLUS
65943: PUSH
65944: LD_VAR 0 2
65948: PUSH
65949: LD_INT 4
65951: PLUS
65952: PUSH
65953: LD_INT 5
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: LIST
65960: PUSH
65961: LD_VAR 0 1
65965: PUSH
65966: LD_INT 4
65968: MINUS
65969: PUSH
65970: LD_VAR 0 2
65974: PUSH
65975: LD_INT 1
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: LIST
65982: PUSH
65983: LD_VAR 0 1
65987: PUSH
65988: LD_VAR 0 2
65992: PUSH
65993: LD_INT 4
65995: MINUS
65996: PUSH
65997: LD_INT 3
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: LIST
66004: PUSH
66005: LD_VAR 0 1
66009: PUSH
66010: LD_INT 3
66012: MINUS
66013: PUSH
66014: LD_VAR 0 2
66018: PUSH
66019: LD_INT 3
66021: MINUS
66022: PUSH
66023: LD_INT 2
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: LIST
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: LIST
66035: LIST
66036: LIST
66037: ST_TO_ADDR
// end ; 4 :
66038: GO 66319
66040: LD_INT 4
66042: DOUBLE
66043: EQUAL
66044: IFTRUE 66048
66046: GO 66181
66048: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66049: LD_ADDR_VAR 0 5
66053: PUSH
66054: LD_VAR 0 1
66058: PUSH
66059: LD_VAR 0 2
66063: PUSH
66064: LD_INT 4
66066: PLUS
66067: PUSH
66068: LD_INT 0
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: LIST
66075: PUSH
66076: LD_VAR 0 1
66080: PUSH
66081: LD_INT 3
66083: PLUS
66084: PUSH
66085: LD_VAR 0 2
66089: PUSH
66090: LD_INT 3
66092: PLUS
66093: PUSH
66094: LD_INT 5
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: LIST
66101: PUSH
66102: LD_VAR 0 1
66106: PUSH
66107: LD_INT 4
66109: PLUS
66110: PUSH
66111: LD_VAR 0 2
66115: PUSH
66116: LD_INT 4
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: LIST
66123: PUSH
66124: LD_VAR 0 1
66128: PUSH
66129: LD_VAR 0 2
66133: PUSH
66134: LD_INT 3
66136: MINUS
66137: PUSH
66138: LD_INT 3
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: LIST
66145: PUSH
66146: LD_VAR 0 1
66150: PUSH
66151: LD_INT 4
66153: MINUS
66154: PUSH
66155: LD_VAR 0 2
66159: PUSH
66160: LD_INT 4
66162: MINUS
66163: PUSH
66164: LD_INT 2
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: LIST
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: ST_TO_ADDR
// end ; 5 :
66179: GO 66319
66181: LD_INT 5
66183: DOUBLE
66184: EQUAL
66185: IFTRUE 66189
66187: GO 66318
66189: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66190: LD_ADDR_VAR 0 5
66194: PUSH
66195: LD_VAR 0 1
66199: PUSH
66200: LD_INT 4
66202: MINUS
66203: PUSH
66204: LD_VAR 0 2
66208: PUSH
66209: LD_INT 1
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: LIST
66216: PUSH
66217: LD_VAR 0 1
66221: PUSH
66222: LD_VAR 0 2
66226: PUSH
66227: LD_INT 4
66229: MINUS
66230: PUSH
66231: LD_INT 3
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: LIST
66238: PUSH
66239: LD_VAR 0 1
66243: PUSH
66244: LD_INT 4
66246: PLUS
66247: PUSH
66248: LD_VAR 0 2
66252: PUSH
66253: LD_INT 4
66255: PLUS
66256: PUSH
66257: LD_INT 5
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: LIST
66264: PUSH
66265: LD_VAR 0 1
66269: PUSH
66270: LD_INT 3
66272: PLUS
66273: PUSH
66274: LD_VAR 0 2
66278: PUSH
66279: LD_INT 4
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: LIST
66286: PUSH
66287: LD_VAR 0 1
66291: PUSH
66292: LD_VAR 0 2
66296: PUSH
66297: LD_INT 3
66299: PLUS
66300: PUSH
66301: LD_INT 0
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: LIST
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: ST_TO_ADDR
// end ; end ;
66316: GO 66319
66318: POP
// result := list ;
66319: LD_ADDR_VAR 0 4
66323: PUSH
66324: LD_VAR 0 5
66328: ST_TO_ADDR
// end ;
66329: LD_VAR 0 4
66333: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66334: LD_INT 0
66336: PPUSH
66337: PPUSH
66338: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66339: LD_VAR 0 1
66343: NOT
66344: IFTRUE 66372
66346: PUSH
66347: LD_VAR 0 2
66351: PUSH
66352: LD_INT 1
66354: PUSH
66355: LD_INT 2
66357: PUSH
66358: LD_INT 3
66360: PUSH
66361: LD_INT 4
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: IN
66370: NOT
66371: OR
66372: IFFALSE 66376
// exit ;
66374: GO 66459
// tmp := [ ] ;
66376: LD_ADDR_VAR 0 5
66380: PUSH
66381: EMPTY
66382: ST_TO_ADDR
// for i in units do
66383: LD_ADDR_VAR 0 4
66387: PUSH
66388: LD_VAR 0 1
66392: PUSH
66393: FOR_IN
66394: IFFALSE 66428
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66396: LD_ADDR_VAR 0 5
66400: PUSH
66401: LD_VAR 0 5
66405: PPUSH
66406: LD_VAR 0 4
66410: PPUSH
66411: LD_VAR 0 2
66415: PPUSH
66416: CALL_OW 259
66420: PPUSH
66421: CALL 67854 0 2
66425: ST_TO_ADDR
66426: GO 66393
66428: POP
66429: POP
// if not tmp then
66430: LD_VAR 0 5
66434: NOT
66435: IFFALSE 66439
// exit ;
66437: GO 66459
// result := SortListByListDesc ( units , tmp ) ;
66439: LD_ADDR_VAR 0 3
66443: PUSH
66444: LD_VAR 0 1
66448: PPUSH
66449: LD_VAR 0 5
66453: PPUSH
66454: CALL_OW 77
66458: ST_TO_ADDR
// end ;
66459: LD_VAR 0 3
66463: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66464: LD_INT 0
66466: PPUSH
66467: PPUSH
66468: PPUSH
// result := false ;
66469: LD_ADDR_VAR 0 3
66473: PUSH
66474: LD_INT 0
66476: ST_TO_ADDR
// if not building then
66477: LD_VAR 0 2
66481: NOT
66482: IFFALSE 66486
// exit ;
66484: GO 66630
// x := GetX ( building ) ;
66486: LD_ADDR_VAR 0 4
66490: PUSH
66491: LD_VAR 0 2
66495: PPUSH
66496: CALL_OW 250
66500: ST_TO_ADDR
// y := GetY ( building ) ;
66501: LD_ADDR_VAR 0 5
66505: PUSH
66506: LD_VAR 0 2
66510: PPUSH
66511: CALL_OW 251
66515: ST_TO_ADDR
// if not x or not y then
66516: LD_VAR 0 4
66520: NOT
66521: IFTRUE 66530
66523: PUSH
66524: LD_VAR 0 5
66528: NOT
66529: OR
66530: IFFALSE 66534
// exit ;
66532: GO 66630
// if GetTaskList ( unit ) then
66534: LD_VAR 0 1
66538: PPUSH
66539: CALL_OW 437
66543: IFFALSE 66630
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66545: LD_STRING e
66547: PUSH
66548: LD_VAR 0 1
66552: PPUSH
66553: CALL_OW 437
66557: PUSH
66558: LD_INT 1
66560: ARRAY
66561: PUSH
66562: LD_INT 1
66564: ARRAY
66565: EQUAL
66566: IFFALSE 66593
66568: PUSH
66569: LD_VAR 0 4
66573: PUSH
66574: LD_VAR 0 1
66578: PPUSH
66579: CALL_OW 437
66583: PUSH
66584: LD_INT 1
66586: ARRAY
66587: PUSH
66588: LD_INT 2
66590: ARRAY
66591: EQUAL
66592: AND
66593: IFFALSE 66620
66595: PUSH
66596: LD_VAR 0 5
66600: PUSH
66601: LD_VAR 0 1
66605: PPUSH
66606: CALL_OW 437
66610: PUSH
66611: LD_INT 1
66613: ARRAY
66614: PUSH
66615: LD_INT 3
66617: ARRAY
66618: EQUAL
66619: AND
66620: IFFALSE 66630
// result := true end ;
66622: LD_ADDR_VAR 0 3
66626: PUSH
66627: LD_INT 1
66629: ST_TO_ADDR
// end ;
66630: LD_VAR 0 3
66634: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66635: LD_INT 0
66637: PPUSH
// result := false ;
66638: LD_ADDR_VAR 0 4
66642: PUSH
66643: LD_INT 0
66645: ST_TO_ADDR
// if GetTaskList ( unit ) then
66646: LD_VAR 0 1
66650: PPUSH
66651: CALL_OW 437
66655: IFFALSE 66742
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66657: LD_STRING M
66659: PUSH
66660: LD_VAR 0 1
66664: PPUSH
66665: CALL_OW 437
66669: PUSH
66670: LD_INT 1
66672: ARRAY
66673: PUSH
66674: LD_INT 1
66676: ARRAY
66677: EQUAL
66678: IFFALSE 66705
66680: PUSH
66681: LD_VAR 0 2
66685: PUSH
66686: LD_VAR 0 1
66690: PPUSH
66691: CALL_OW 437
66695: PUSH
66696: LD_INT 1
66698: ARRAY
66699: PUSH
66700: LD_INT 2
66702: ARRAY
66703: EQUAL
66704: AND
66705: IFFALSE 66732
66707: PUSH
66708: LD_VAR 0 3
66712: PUSH
66713: LD_VAR 0 1
66717: PPUSH
66718: CALL_OW 437
66722: PUSH
66723: LD_INT 1
66725: ARRAY
66726: PUSH
66727: LD_INT 3
66729: ARRAY
66730: EQUAL
66731: AND
66732: IFFALSE 66742
// result := true ;
66734: LD_ADDR_VAR 0 4
66738: PUSH
66739: LD_INT 1
66741: ST_TO_ADDR
// end ; end ;
66742: LD_VAR 0 4
66746: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66747: LD_INT 0
66749: PPUSH
66750: PPUSH
66751: PPUSH
66752: PPUSH
// if not unit or not area then
66753: LD_VAR 0 1
66757: NOT
66758: IFTRUE 66767
66760: PUSH
66761: LD_VAR 0 2
66765: NOT
66766: OR
66767: IFFALSE 66771
// exit ;
66769: GO 66947
// tmp := AreaToList ( area , i ) ;
66771: LD_ADDR_VAR 0 6
66775: PUSH
66776: LD_VAR 0 2
66780: PPUSH
66781: LD_VAR 0 5
66785: PPUSH
66786: CALL_OW 517
66790: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66791: LD_ADDR_VAR 0 5
66795: PUSH
66796: DOUBLE
66797: LD_INT 1
66799: DEC
66800: ST_TO_ADDR
66801: LD_VAR 0 6
66805: PUSH
66806: LD_INT 1
66808: ARRAY
66809: PUSH
66810: FOR_TO
66811: IFFALSE 66945
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66813: LD_ADDR_VAR 0 7
66817: PUSH
66818: LD_VAR 0 6
66822: PUSH
66823: LD_INT 1
66825: ARRAY
66826: PUSH
66827: LD_VAR 0 5
66831: ARRAY
66832: PUSH
66833: LD_VAR 0 6
66837: PUSH
66838: LD_INT 2
66840: ARRAY
66841: PUSH
66842: LD_VAR 0 5
66846: ARRAY
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
66852: LD_INT 92
66854: PUSH
66855: LD_VAR 0 7
66859: PUSH
66860: LD_INT 1
66862: ARRAY
66863: PUSH
66864: LD_VAR 0 7
66868: PUSH
66869: LD_INT 2
66871: ARRAY
66872: PUSH
66873: LD_INT 2
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: PPUSH
66882: CALL_OW 69
66886: PUSH
66887: LD_INT 0
66889: EQUAL
66890: IFFALSE 66943
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66892: LD_VAR 0 1
66896: PPUSH
66897: LD_VAR 0 7
66901: PUSH
66902: LD_INT 1
66904: ARRAY
66905: PPUSH
66906: LD_VAR 0 7
66910: PUSH
66911: LD_INT 2
66913: ARRAY
66914: PPUSH
66915: LD_VAR 0 3
66919: PPUSH
66920: CALL_OW 48
// result := IsPlaced ( unit ) ;
66924: LD_ADDR_VAR 0 4
66928: PUSH
66929: LD_VAR 0 1
66933: PPUSH
66934: CALL_OW 305
66938: ST_TO_ADDR
// exit ;
66939: POP
66940: POP
66941: GO 66947
// end ; end ;
66943: GO 66810
66945: POP
66946: POP
// end ;
66947: LD_VAR 0 4
66951: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66952: LD_INT 0
66954: PPUSH
66955: PPUSH
66956: PPUSH
// if not side or side > 8 then
66957: LD_VAR 0 1
66961: NOT
66962: IFTRUE 66974
66964: PUSH
66965: LD_VAR 0 1
66969: PUSH
66970: LD_INT 8
66972: GREATER
66973: OR
66974: IFFALSE 66978
// exit ;
66976: GO 67165
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66978: LD_ADDR_VAR 0 4
66982: PUSH
66983: LD_INT 22
66985: PUSH
66986: LD_VAR 0 1
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: PUSH
66995: LD_INT 21
66997: PUSH
66998: LD_INT 3
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PPUSH
67009: CALL_OW 69
67013: ST_TO_ADDR
// if not tmp then
67014: LD_VAR 0 4
67018: NOT
67019: IFFALSE 67023
// exit ;
67021: GO 67165
// enable_addtolog := true ;
67023: LD_ADDR_OWVAR 81
67027: PUSH
67028: LD_INT 1
67030: ST_TO_ADDR
// AddToLog ( [ ) ;
67031: LD_STRING [
67033: PPUSH
67034: CALL_OW 561
// for i in tmp do
67038: LD_ADDR_VAR 0 3
67042: PUSH
67043: LD_VAR 0 4
67047: PUSH
67048: FOR_IN
67049: IFFALSE 67156
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67051: LD_STRING [
67053: PUSH
67054: LD_VAR 0 3
67058: PPUSH
67059: CALL_OW 266
67063: STR
67064: PUSH
67065: LD_STRING , 
67067: STR
67068: PUSH
67069: LD_VAR 0 3
67073: PPUSH
67074: CALL_OW 250
67078: STR
67079: PUSH
67080: LD_STRING , 
67082: STR
67083: PUSH
67084: LD_VAR 0 3
67088: PPUSH
67089: CALL_OW 251
67093: STR
67094: PUSH
67095: LD_STRING , 
67097: STR
67098: PUSH
67099: LD_VAR 0 3
67103: PPUSH
67104: CALL_OW 254
67108: STR
67109: PUSH
67110: LD_STRING , 
67112: STR
67113: PUSH
67114: LD_VAR 0 3
67118: PPUSH
67119: LD_INT 1
67121: PPUSH
67122: CALL_OW 268
67126: STR
67127: PUSH
67128: LD_STRING , 
67130: STR
67131: PUSH
67132: LD_VAR 0 3
67136: PPUSH
67137: LD_INT 2
67139: PPUSH
67140: CALL_OW 268
67144: STR
67145: PUSH
67146: LD_STRING ],
67148: STR
67149: PPUSH
67150: CALL_OW 561
// end ;
67154: GO 67048
67156: POP
67157: POP
// AddToLog ( ]; ) ;
67158: LD_STRING ];
67160: PPUSH
67161: CALL_OW 561
// end ;
67165: LD_VAR 0 2
67169: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67170: LD_INT 0
67172: PPUSH
67173: PPUSH
67174: PPUSH
67175: PPUSH
67176: PPUSH
// if not area or not rate or not max then
67177: LD_VAR 0 1
67181: NOT
67182: IFTRUE 67191
67184: PUSH
67185: LD_VAR 0 2
67189: NOT
67190: OR
67191: IFTRUE 67200
67193: PUSH
67194: LD_VAR 0 4
67198: NOT
67199: OR
67200: IFFALSE 67204
// exit ;
67202: GO 67393
// while 1 do
67204: LD_INT 1
67206: IFFALSE 67393
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67208: LD_ADDR_VAR 0 9
67212: PUSH
67213: LD_VAR 0 1
67217: PPUSH
67218: LD_INT 1
67220: PPUSH
67221: CALL_OW 287
67225: PUSH
67226: LD_INT 10
67228: MUL
67229: ST_TO_ADDR
// r := rate / 10 ;
67230: LD_ADDR_VAR 0 7
67234: PUSH
67235: LD_VAR 0 2
67239: PUSH
67240: LD_INT 10
67242: DIVREAL
67243: ST_TO_ADDR
// time := 1 1$00 ;
67244: LD_ADDR_VAR 0 8
67248: PUSH
67249: LD_INT 2100
67251: ST_TO_ADDR
// if amount < min then
67252: LD_VAR 0 9
67256: PUSH
67257: LD_VAR 0 3
67261: LESS
67262: IFFALSE 67280
// r := r * 2 else
67264: LD_ADDR_VAR 0 7
67268: PUSH
67269: LD_VAR 0 7
67273: PUSH
67274: LD_INT 2
67276: MUL
67277: ST_TO_ADDR
67278: GO 67306
// if amount > max then
67280: LD_VAR 0 9
67284: PUSH
67285: LD_VAR 0 4
67289: GREATER
67290: IFFALSE 67306
// r := r / 2 ;
67292: LD_ADDR_VAR 0 7
67296: PUSH
67297: LD_VAR 0 7
67301: PUSH
67302: LD_INT 2
67304: DIVREAL
67305: ST_TO_ADDR
// time := time / r ;
67306: LD_ADDR_VAR 0 8
67310: PUSH
67311: LD_VAR 0 8
67315: PUSH
67316: LD_VAR 0 7
67320: DIVREAL
67321: ST_TO_ADDR
// if time < 0 then
67322: LD_VAR 0 8
67326: PUSH
67327: LD_INT 0
67329: LESS
67330: IFFALSE 67347
// time := time * - 1 ;
67332: LD_ADDR_VAR 0 8
67336: PUSH
67337: LD_VAR 0 8
67341: PUSH
67342: LD_INT 1
67344: NEG
67345: MUL
67346: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67347: LD_VAR 0 8
67351: PUSH
67352: LD_INT 35
67354: PPUSH
67355: LD_INT 875
67357: PPUSH
67358: CALL_OW 12
67362: PLUS
67363: PPUSH
67364: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67368: LD_INT 1
67370: PPUSH
67371: LD_INT 5
67373: PPUSH
67374: CALL_OW 12
67378: PPUSH
67379: LD_VAR 0 1
67383: PPUSH
67384: LD_INT 1
67386: PPUSH
67387: CALL_OW 55
// end ;
67391: GO 67204
// end ;
67393: LD_VAR 0 5
67397: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67398: LD_INT 0
67400: PPUSH
67401: PPUSH
67402: PPUSH
67403: PPUSH
67404: PPUSH
67405: PPUSH
67406: PPUSH
67407: PPUSH
// if not turrets or not factories then
67408: LD_VAR 0 1
67412: NOT
67413: IFTRUE 67422
67415: PUSH
67416: LD_VAR 0 2
67420: NOT
67421: OR
67422: IFFALSE 67426
// exit ;
67424: GO 67733
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67426: LD_ADDR_VAR 0 10
67430: PUSH
67431: LD_INT 5
67433: PUSH
67434: LD_INT 6
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 2
67443: PUSH
67444: LD_INT 4
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 3
67453: PUSH
67454: LD_INT 5
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: LIST
67465: PUSH
67466: LD_INT 24
67468: PUSH
67469: LD_INT 25
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 23
67478: PUSH
67479: LD_INT 27
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PUSH
67490: LD_INT 42
67492: PUSH
67493: LD_INT 43
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PUSH
67500: LD_INT 44
67502: PUSH
67503: LD_INT 46
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: LD_INT 45
67512: PUSH
67513: LD_INT 47
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: LIST
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: LIST
67529: ST_TO_ADDR
// result := [ ] ;
67530: LD_ADDR_VAR 0 3
67534: PUSH
67535: EMPTY
67536: ST_TO_ADDR
// for i in turrets do
67537: LD_ADDR_VAR 0 4
67541: PUSH
67542: LD_VAR 0 1
67546: PUSH
67547: FOR_IN
67548: IFFALSE 67731
// begin nat := GetNation ( i ) ;
67550: LD_ADDR_VAR 0 7
67554: PUSH
67555: LD_VAR 0 4
67559: PPUSH
67560: CALL_OW 248
67564: ST_TO_ADDR
// weapon := 0 ;
67565: LD_ADDR_VAR 0 8
67569: PUSH
67570: LD_INT 0
67572: ST_TO_ADDR
// if not nat then
67573: LD_VAR 0 7
67577: NOT
67578: IFFALSE 67582
// continue ;
67580: GO 67547
// for j in list [ nat ] do
67582: LD_ADDR_VAR 0 5
67586: PUSH
67587: LD_VAR 0 10
67591: PUSH
67592: LD_VAR 0 7
67596: ARRAY
67597: PUSH
67598: FOR_IN
67599: IFFALSE 67640
// if GetBWeapon ( i ) = j [ 1 ] then
67601: LD_VAR 0 4
67605: PPUSH
67606: CALL_OW 269
67610: PUSH
67611: LD_VAR 0 5
67615: PUSH
67616: LD_INT 1
67618: ARRAY
67619: EQUAL
67620: IFFALSE 67638
// begin weapon := j [ 2 ] ;
67622: LD_ADDR_VAR 0 8
67626: PUSH
67627: LD_VAR 0 5
67631: PUSH
67632: LD_INT 2
67634: ARRAY
67635: ST_TO_ADDR
// break ;
67636: GO 67640
// end ;
67638: GO 67598
67640: POP
67641: POP
// if not weapon then
67642: LD_VAR 0 8
67646: NOT
67647: IFFALSE 67651
// continue ;
67649: GO 67547
// for k in factories do
67651: LD_ADDR_VAR 0 6
67655: PUSH
67656: LD_VAR 0 2
67660: PUSH
67661: FOR_IN
67662: IFFALSE 67727
// begin weapons := AvailableWeaponList ( k ) ;
67664: LD_ADDR_VAR 0 9
67668: PUSH
67669: LD_VAR 0 6
67673: PPUSH
67674: CALL_OW 478
67678: ST_TO_ADDR
// if not weapons then
67679: LD_VAR 0 9
67683: NOT
67684: IFFALSE 67688
// continue ;
67686: GO 67661
// if weapon in weapons then
67688: LD_VAR 0 8
67692: PUSH
67693: LD_VAR 0 9
67697: IN
67698: IFFALSE 67725
// begin result := [ i , weapon ] ;
67700: LD_ADDR_VAR 0 3
67704: PUSH
67705: LD_VAR 0 4
67709: PUSH
67710: LD_VAR 0 8
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: ST_TO_ADDR
// exit ;
67719: POP
67720: POP
67721: POP
67722: POP
67723: GO 67733
// end ; end ;
67725: GO 67661
67727: POP
67728: POP
// end ;
67729: GO 67547
67731: POP
67732: POP
// end ;
67733: LD_VAR 0 3
67737: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67738: LD_INT 0
67740: PPUSH
// if not side or side > 8 then
67741: LD_VAR 0 3
67745: NOT
67746: IFTRUE 67758
67748: PUSH
67749: LD_VAR 0 3
67753: PUSH
67754: LD_INT 8
67756: GREATER
67757: OR
67758: IFFALSE 67762
// exit ;
67760: GO 67821
// if not range then
67762: LD_VAR 0 4
67766: NOT
67767: IFFALSE 67778
// range := - 12 ;
67769: LD_ADDR_VAR 0 4
67773: PUSH
67774: LD_INT 12
67776: NEG
67777: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67778: LD_VAR 0 1
67782: PPUSH
67783: LD_VAR 0 2
67787: PPUSH
67788: LD_VAR 0 3
67792: PPUSH
67793: LD_VAR 0 4
67797: PPUSH
67798: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67802: LD_VAR 0 1
67806: PPUSH
67807: LD_VAR 0 2
67811: PPUSH
67812: LD_VAR 0 3
67816: PPUSH
67817: CALL_OW 331
// end ;
67821: LD_VAR 0 5
67825: RET
// export function Video ( mode ) ; begin
67826: LD_INT 0
67828: PPUSH
// ingame_video = mode ;
67829: LD_ADDR_OWVAR 52
67833: PUSH
67834: LD_VAR 0 1
67838: ST_TO_ADDR
// interface_hidden = mode ;
67839: LD_ADDR_OWVAR 54
67843: PUSH
67844: LD_VAR 0 1
67848: ST_TO_ADDR
// end ;
67849: LD_VAR 0 2
67853: RET
// export function Join ( array , element ) ; begin
67854: LD_INT 0
67856: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67857: LD_ADDR_VAR 0 3
67861: PUSH
67862: LD_VAR 0 1
67866: PPUSH
67867: LD_VAR 0 1
67871: PUSH
67872: LD_INT 1
67874: PLUS
67875: PPUSH
67876: LD_VAR 0 2
67880: PPUSH
67881: CALL_OW 1
67885: ST_TO_ADDR
// end ;
67886: LD_VAR 0 3
67890: RET
// export function JoinUnion ( array , element ) ; begin
67891: LD_INT 0
67893: PPUSH
// result := array union element ;
67894: LD_ADDR_VAR 0 3
67898: PUSH
67899: LD_VAR 0 1
67903: PUSH
67904: LD_VAR 0 2
67908: UNION
67909: ST_TO_ADDR
// end ;
67910: LD_VAR 0 3
67914: RET
// export function GetBehemoths ( side ) ; begin
67915: LD_INT 0
67917: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67918: LD_ADDR_VAR 0 2
67922: PUSH
67923: LD_INT 22
67925: PUSH
67926: LD_VAR 0 1
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 31
67937: PUSH
67938: LD_INT 25
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PPUSH
67949: CALL_OW 69
67953: ST_TO_ADDR
// end ;
67954: LD_VAR 0 2
67958: RET
// export function Shuffle ( array ) ; var i , index ; begin
67959: LD_INT 0
67961: PPUSH
67962: PPUSH
67963: PPUSH
// result := [ ] ;
67964: LD_ADDR_VAR 0 2
67968: PUSH
67969: EMPTY
67970: ST_TO_ADDR
// if not array then
67971: LD_VAR 0 1
67975: NOT
67976: IFFALSE 67980
// exit ;
67978: GO 68079
// Randomize ;
67980: CALL_OW 10
// for i = array downto 1 do
67984: LD_ADDR_VAR 0 3
67988: PUSH
67989: DOUBLE
67990: LD_VAR 0 1
67994: INC
67995: ST_TO_ADDR
67996: LD_INT 1
67998: PUSH
67999: FOR_DOWNTO
68000: IFFALSE 68077
// begin index := rand ( 1 , array ) ;
68002: LD_ADDR_VAR 0 4
68006: PUSH
68007: LD_INT 1
68009: PPUSH
68010: LD_VAR 0 1
68014: PPUSH
68015: CALL_OW 12
68019: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68020: LD_ADDR_VAR 0 2
68024: PUSH
68025: LD_VAR 0 2
68029: PPUSH
68030: LD_VAR 0 2
68034: PUSH
68035: LD_INT 1
68037: PLUS
68038: PPUSH
68039: LD_VAR 0 1
68043: PUSH
68044: LD_VAR 0 4
68048: ARRAY
68049: PPUSH
68050: CALL_OW 2
68054: ST_TO_ADDR
// array := Delete ( array , index ) ;
68055: LD_ADDR_VAR 0 1
68059: PUSH
68060: LD_VAR 0 1
68064: PPUSH
68065: LD_VAR 0 4
68069: PPUSH
68070: CALL_OW 3
68074: ST_TO_ADDR
// end ;
68075: GO 67999
68077: POP
68078: POP
// end ;
68079: LD_VAR 0 2
68083: RET
// export function GetBaseMaterials ( base ) ; begin
68084: LD_INT 0
68086: PPUSH
// result := [ 0 , 0 , 0 ] ;
68087: LD_ADDR_VAR 0 2
68091: PUSH
68092: LD_INT 0
68094: PUSH
68095: LD_INT 0
68097: PUSH
68098: LD_INT 0
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: LIST
68105: ST_TO_ADDR
// if not base then
68106: LD_VAR 0 1
68110: NOT
68111: IFFALSE 68115
// exit ;
68113: GO 68164
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68115: LD_ADDR_VAR 0 2
68119: PUSH
68120: LD_VAR 0 1
68124: PPUSH
68125: LD_INT 1
68127: PPUSH
68128: CALL_OW 275
68132: PUSH
68133: LD_VAR 0 1
68137: PPUSH
68138: LD_INT 2
68140: PPUSH
68141: CALL_OW 275
68145: PUSH
68146: LD_VAR 0 1
68150: PPUSH
68151: LD_INT 3
68153: PPUSH
68154: CALL_OW 275
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: LIST
68163: ST_TO_ADDR
// end ;
68164: LD_VAR 0 2
68168: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68169: LD_INT 0
68171: PPUSH
68172: PPUSH
// result := array ;
68173: LD_ADDR_VAR 0 3
68177: PUSH
68178: LD_VAR 0 1
68182: ST_TO_ADDR
// if size >= result then
68183: LD_VAR 0 2
68187: PUSH
68188: LD_VAR 0 3
68192: GREATEREQUAL
68193: IFFALSE 68197
// exit ;
68195: GO 68247
// if size then
68197: LD_VAR 0 2
68201: IFFALSE 68247
// for i := array downto size do
68203: LD_ADDR_VAR 0 4
68207: PUSH
68208: DOUBLE
68209: LD_VAR 0 1
68213: INC
68214: ST_TO_ADDR
68215: LD_VAR 0 2
68219: PUSH
68220: FOR_DOWNTO
68221: IFFALSE 68245
// result := Delete ( result , result ) ;
68223: LD_ADDR_VAR 0 3
68227: PUSH
68228: LD_VAR 0 3
68232: PPUSH
68233: LD_VAR 0 3
68237: PPUSH
68238: CALL_OW 3
68242: ST_TO_ADDR
68243: GO 68220
68245: POP
68246: POP
// end ;
68247: LD_VAR 0 3
68251: RET
// export function ComExit ( unit ) ; var tmp ; begin
68252: LD_INT 0
68254: PPUSH
68255: PPUSH
// if not IsInUnit ( unit ) then
68256: LD_VAR 0 1
68260: PPUSH
68261: CALL_OW 310
68265: NOT
68266: IFFALSE 68270
// exit ;
68268: GO 68330
// tmp := IsInUnit ( unit ) ;
68270: LD_ADDR_VAR 0 3
68274: PUSH
68275: LD_VAR 0 1
68279: PPUSH
68280: CALL_OW 310
68284: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68285: LD_VAR 0 3
68289: PPUSH
68290: CALL_OW 247
68294: PUSH
68295: LD_INT 2
68297: EQUAL
68298: IFFALSE 68311
// ComExitVehicle ( unit ) else
68300: LD_VAR 0 1
68304: PPUSH
68305: CALL_OW 121
68309: GO 68320
// ComExitBuilding ( unit ) ;
68311: LD_VAR 0 1
68315: PPUSH
68316: CALL_OW 122
// result := tmp ;
68320: LD_ADDR_VAR 0 2
68324: PUSH
68325: LD_VAR 0 3
68329: ST_TO_ADDR
// end ;
68330: LD_VAR 0 2
68334: RET
// export function ComExitAll ( units ) ; var i ; begin
68335: LD_INT 0
68337: PPUSH
68338: PPUSH
// if not units then
68339: LD_VAR 0 1
68343: NOT
68344: IFFALSE 68348
// exit ;
68346: GO 68374
// for i in units do
68348: LD_ADDR_VAR 0 3
68352: PUSH
68353: LD_VAR 0 1
68357: PUSH
68358: FOR_IN
68359: IFFALSE 68372
// ComExit ( i ) ;
68361: LD_VAR 0 3
68365: PPUSH
68366: CALL 68252 0 1
68370: GO 68358
68372: POP
68373: POP
// end ;
68374: LD_VAR 0 2
68378: RET
// export function ResetHc ; begin
68379: LD_INT 0
68381: PPUSH
// InitHc ;
68382: CALL_OW 19
// hc_importance := 0 ;
68386: LD_ADDR_OWVAR 32
68390: PUSH
68391: LD_INT 0
68393: ST_TO_ADDR
// end ;
68394: LD_VAR 0 1
68398: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68399: LD_INT 0
68401: PPUSH
68402: PPUSH
68403: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68404: LD_ADDR_VAR 0 6
68408: PUSH
68409: LD_VAR 0 1
68413: PUSH
68414: LD_VAR 0 3
68418: PLUS
68419: PUSH
68420: LD_INT 2
68422: DIV
68423: ST_TO_ADDR
// if _x < 0 then
68424: LD_VAR 0 6
68428: PUSH
68429: LD_INT 0
68431: LESS
68432: IFFALSE 68449
// _x := _x * - 1 ;
68434: LD_ADDR_VAR 0 6
68438: PUSH
68439: LD_VAR 0 6
68443: PUSH
68444: LD_INT 1
68446: NEG
68447: MUL
68448: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68449: LD_ADDR_VAR 0 7
68453: PUSH
68454: LD_VAR 0 2
68458: PUSH
68459: LD_VAR 0 4
68463: PLUS
68464: PUSH
68465: LD_INT 2
68467: DIV
68468: ST_TO_ADDR
// if _y < 0 then
68469: LD_VAR 0 7
68473: PUSH
68474: LD_INT 0
68476: LESS
68477: IFFALSE 68494
// _y := _y * - 1 ;
68479: LD_ADDR_VAR 0 7
68483: PUSH
68484: LD_VAR 0 7
68488: PUSH
68489: LD_INT 1
68491: NEG
68492: MUL
68493: ST_TO_ADDR
// result := [ _x , _y ] ;
68494: LD_ADDR_VAR 0 5
68498: PUSH
68499: LD_VAR 0 6
68503: PUSH
68504: LD_VAR 0 7
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: ST_TO_ADDR
// end ;
68513: LD_VAR 0 5
68517: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68518: LD_INT 0
68520: PPUSH
68521: PPUSH
68522: PPUSH
68523: PPUSH
// task := GetTaskList ( unit ) ;
68524: LD_ADDR_VAR 0 7
68528: PUSH
68529: LD_VAR 0 1
68533: PPUSH
68534: CALL_OW 437
68538: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68539: LD_VAR 0 7
68543: NOT
68544: IFFALSE 68563
68546: PUSH
68547: LD_VAR 0 1
68551: PPUSH
68552: LD_VAR 0 2
68556: PPUSH
68557: CALL_OW 308
68561: NOT
68562: AND
68563: IFFALSE 68567
// exit ;
68565: GO 68685
// if IsInArea ( unit , area ) then
68567: LD_VAR 0 1
68571: PPUSH
68572: LD_VAR 0 2
68576: PPUSH
68577: CALL_OW 308
68581: IFFALSE 68599
// begin ComMoveToArea ( unit , goAway ) ;
68583: LD_VAR 0 1
68587: PPUSH
68588: LD_VAR 0 3
68592: PPUSH
68593: CALL_OW 113
// exit ;
68597: GO 68685
// end ; if task [ 1 ] [ 1 ] <> M then
68599: LD_VAR 0 7
68603: PUSH
68604: LD_INT 1
68606: ARRAY
68607: PUSH
68608: LD_INT 1
68610: ARRAY
68611: PUSH
68612: LD_STRING M
68614: NONEQUAL
68615: IFFALSE 68619
// exit ;
68617: GO 68685
// x := task [ 1 ] [ 2 ] ;
68619: LD_ADDR_VAR 0 5
68623: PUSH
68624: LD_VAR 0 7
68628: PUSH
68629: LD_INT 1
68631: ARRAY
68632: PUSH
68633: LD_INT 2
68635: ARRAY
68636: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68637: LD_ADDR_VAR 0 6
68641: PUSH
68642: LD_VAR 0 7
68646: PUSH
68647: LD_INT 1
68649: ARRAY
68650: PUSH
68651: LD_INT 3
68653: ARRAY
68654: ST_TO_ADDR
// if InArea ( x , y , area ) then
68655: LD_VAR 0 5
68659: PPUSH
68660: LD_VAR 0 6
68664: PPUSH
68665: LD_VAR 0 2
68669: PPUSH
68670: CALL_OW 309
68674: IFFALSE 68685
// ComStop ( unit ) ;
68676: LD_VAR 0 1
68680: PPUSH
68681: CALL_OW 141
// end ;
68685: LD_VAR 0 4
68689: RET
// export function Abs ( value ) ; begin
68690: LD_INT 0
68692: PPUSH
// result := value ;
68693: LD_ADDR_VAR 0 2
68697: PUSH
68698: LD_VAR 0 1
68702: ST_TO_ADDR
// if value < 0 then
68703: LD_VAR 0 1
68707: PUSH
68708: LD_INT 0
68710: LESS
68711: IFFALSE 68728
// result := value * - 1 ;
68713: LD_ADDR_VAR 0 2
68717: PUSH
68718: LD_VAR 0 1
68722: PUSH
68723: LD_INT 1
68725: NEG
68726: MUL
68727: ST_TO_ADDR
// end ;
68728: LD_VAR 0 2
68732: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68733: LD_INT 0
68735: PPUSH
68736: PPUSH
68737: PPUSH
68738: PPUSH
68739: PPUSH
68740: PPUSH
68741: PPUSH
68742: PPUSH
// if not unit or not building then
68743: LD_VAR 0 1
68747: NOT
68748: IFTRUE 68757
68750: PUSH
68751: LD_VAR 0 2
68755: NOT
68756: OR
68757: IFFALSE 68761
// exit ;
68759: GO 68989
// x := GetX ( building ) ;
68761: LD_ADDR_VAR 0 4
68765: PUSH
68766: LD_VAR 0 2
68770: PPUSH
68771: CALL_OW 250
68775: ST_TO_ADDR
// y := GetY ( building ) ;
68776: LD_ADDR_VAR 0 6
68780: PUSH
68781: LD_VAR 0 2
68785: PPUSH
68786: CALL_OW 251
68790: ST_TO_ADDR
// d := GetDir ( building ) ;
68791: LD_ADDR_VAR 0 8
68795: PUSH
68796: LD_VAR 0 2
68800: PPUSH
68801: CALL_OW 254
68805: ST_TO_ADDR
// r := 4 ;
68806: LD_ADDR_VAR 0 9
68810: PUSH
68811: LD_INT 4
68813: ST_TO_ADDR
// for i := 1 to 5 do
68814: LD_ADDR_VAR 0 10
68818: PUSH
68819: DOUBLE
68820: LD_INT 1
68822: DEC
68823: ST_TO_ADDR
68824: LD_INT 5
68826: PUSH
68827: FOR_TO
68828: IFFALSE 68987
// begin _x := ShiftX ( x , d , r + i ) ;
68830: LD_ADDR_VAR 0 5
68834: PUSH
68835: LD_VAR 0 4
68839: PPUSH
68840: LD_VAR 0 8
68844: PPUSH
68845: LD_VAR 0 9
68849: PUSH
68850: LD_VAR 0 10
68854: PLUS
68855: PPUSH
68856: CALL_OW 272
68860: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68861: LD_ADDR_VAR 0 7
68865: PUSH
68866: LD_VAR 0 6
68870: PPUSH
68871: LD_VAR 0 8
68875: PPUSH
68876: LD_VAR 0 9
68880: PUSH
68881: LD_VAR 0 10
68885: PLUS
68886: PPUSH
68887: CALL_OW 273
68891: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68892: LD_VAR 0 5
68896: PPUSH
68897: LD_VAR 0 7
68901: PPUSH
68902: CALL_OW 488
68906: IFFALSE 68941
68908: PUSH
68909: LD_VAR 0 5
68913: PPUSH
68914: LD_VAR 0 7
68918: PPUSH
68919: CALL_OW 428
68923: PPUSH
68924: CALL_OW 247
68928: PUSH
68929: LD_INT 3
68931: PUSH
68932: LD_INT 2
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: IN
68939: NOT
68940: AND
68941: IFFALSE 68985
// begin ComMoveXY ( unit , _x , _y ) ;
68943: LD_VAR 0 1
68947: PPUSH
68948: LD_VAR 0 5
68952: PPUSH
68953: LD_VAR 0 7
68957: PPUSH
68958: CALL_OW 111
// result := [ _x , _y ] ;
68962: LD_ADDR_VAR 0 3
68966: PUSH
68967: LD_VAR 0 5
68971: PUSH
68972: LD_VAR 0 7
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: ST_TO_ADDR
// exit ;
68981: POP
68982: POP
68983: GO 68989
// end ; end ;
68985: GO 68827
68987: POP
68988: POP
// end ;
68989: LD_VAR 0 3
68993: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68994: LD_INT 0
68996: PPUSH
68997: PPUSH
68998: PPUSH
// result := 0 ;
68999: LD_ADDR_VAR 0 3
69003: PUSH
69004: LD_INT 0
69006: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69007: LD_VAR 0 1
69011: PUSH
69012: LD_INT 0
69014: LESS
69015: IFTRUE 69027
69017: PUSH
69018: LD_VAR 0 1
69022: PUSH
69023: LD_INT 8
69025: GREATER
69026: OR
69027: IFTRUE 69039
69029: PUSH
69030: LD_VAR 0 2
69034: PUSH
69035: LD_INT 0
69037: LESS
69038: OR
69039: IFTRUE 69051
69041: PUSH
69042: LD_VAR 0 2
69046: PUSH
69047: LD_INT 8
69049: GREATER
69050: OR
69051: IFFALSE 69055
// exit ;
69053: GO 69130
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69055: LD_ADDR_VAR 0 4
69059: PUSH
69060: LD_INT 22
69062: PUSH
69063: LD_VAR 0 2
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: PPUSH
69072: CALL_OW 69
69076: PUSH
69077: FOR_IN
69078: IFFALSE 69128
// begin un := UnitShoot ( i ) ;
69080: LD_ADDR_VAR 0 5
69084: PUSH
69085: LD_VAR 0 4
69089: PPUSH
69090: CALL_OW 504
69094: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69095: LD_VAR 0 5
69099: PPUSH
69100: CALL_OW 255
69104: PUSH
69105: LD_VAR 0 1
69109: EQUAL
69110: IFFALSE 69126
// begin result := un ;
69112: LD_ADDR_VAR 0 3
69116: PUSH
69117: LD_VAR 0 5
69121: ST_TO_ADDR
// exit ;
69122: POP
69123: POP
69124: GO 69130
// end ; end ;
69126: GO 69077
69128: POP
69129: POP
// end ;
69130: LD_VAR 0 3
69134: RET
// export function GetCargoBay ( units ) ; begin
69135: LD_INT 0
69137: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69138: LD_ADDR_VAR 0 2
69142: PUSH
69143: LD_VAR 0 1
69147: PPUSH
69148: LD_INT 2
69150: PUSH
69151: LD_INT 34
69153: PUSH
69154: LD_INT 12
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: PUSH
69161: LD_INT 34
69163: PUSH
69164: LD_INT 51
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: PUSH
69171: LD_INT 34
69173: PUSH
69174: LD_INT 32
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PUSH
69181: LD_INT 34
69183: PUSH
69184: LD_INT 89
69186: PUSH
69187: EMPTY
69188: LIST
69189: LIST
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: PPUSH
69198: CALL_OW 72
69202: ST_TO_ADDR
// end ;
69203: LD_VAR 0 2
69207: RET
// export function Negate ( value ) ; begin
69208: LD_INT 0
69210: PPUSH
// result := not value ;
69211: LD_ADDR_VAR 0 2
69215: PUSH
69216: LD_VAR 0 1
69220: NOT
69221: ST_TO_ADDR
// end ;
69222: LD_VAR 0 2
69226: RET
// export function Inc ( value ) ; begin
69227: LD_INT 0
69229: PPUSH
// result := value + 1 ;
69230: LD_ADDR_VAR 0 2
69234: PUSH
69235: LD_VAR 0 1
69239: PUSH
69240: LD_INT 1
69242: PLUS
69243: ST_TO_ADDR
// end ;
69244: LD_VAR 0 2
69248: RET
// export function Dec ( value ) ; begin
69249: LD_INT 0
69251: PPUSH
// result := value - 1 ;
69252: LD_ADDR_VAR 0 2
69256: PUSH
69257: LD_VAR 0 1
69261: PUSH
69262: LD_INT 1
69264: MINUS
69265: ST_TO_ADDR
// end ;
69266: LD_VAR 0 2
69270: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69271: LD_INT 0
69273: PPUSH
69274: PPUSH
69275: PPUSH
69276: PPUSH
69277: PPUSH
69278: PPUSH
69279: PPUSH
69280: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69281: LD_VAR 0 1
69285: PPUSH
69286: LD_VAR 0 2
69290: PPUSH
69291: CALL_OW 488
69295: NOT
69296: IFTRUE 69315
69298: PUSH
69299: LD_VAR 0 3
69303: PPUSH
69304: LD_VAR 0 4
69308: PPUSH
69309: CALL_OW 488
69313: NOT
69314: OR
69315: IFFALSE 69328
// begin result := - 1 ;
69317: LD_ADDR_VAR 0 5
69321: PUSH
69322: LD_INT 1
69324: NEG
69325: ST_TO_ADDR
// exit ;
69326: GO 69563
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69328: LD_ADDR_VAR 0 12
69332: PUSH
69333: LD_VAR 0 1
69337: PPUSH
69338: LD_VAR 0 2
69342: PPUSH
69343: LD_VAR 0 3
69347: PPUSH
69348: LD_VAR 0 4
69352: PPUSH
69353: CALL 68399 0 4
69357: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69358: LD_ADDR_VAR 0 11
69362: PUSH
69363: LD_VAR 0 1
69367: PPUSH
69368: LD_VAR 0 2
69372: PPUSH
69373: LD_VAR 0 12
69377: PUSH
69378: LD_INT 1
69380: ARRAY
69381: PPUSH
69382: LD_VAR 0 12
69386: PUSH
69387: LD_INT 2
69389: ARRAY
69390: PPUSH
69391: CALL_OW 298
69395: ST_TO_ADDR
// distance := 9999 ;
69396: LD_ADDR_VAR 0 10
69400: PUSH
69401: LD_INT 9999
69403: ST_TO_ADDR
// for i := 0 to 5 do
69404: LD_ADDR_VAR 0 6
69408: PUSH
69409: DOUBLE
69410: LD_INT 0
69412: DEC
69413: ST_TO_ADDR
69414: LD_INT 5
69416: PUSH
69417: FOR_TO
69418: IFFALSE 69561
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69420: LD_ADDR_VAR 0 7
69424: PUSH
69425: LD_VAR 0 1
69429: PPUSH
69430: LD_VAR 0 6
69434: PPUSH
69435: LD_VAR 0 11
69439: PPUSH
69440: CALL_OW 272
69444: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69445: LD_ADDR_VAR 0 8
69449: PUSH
69450: LD_VAR 0 2
69454: PPUSH
69455: LD_VAR 0 6
69459: PPUSH
69460: LD_VAR 0 11
69464: PPUSH
69465: CALL_OW 273
69469: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69470: LD_VAR 0 7
69474: PPUSH
69475: LD_VAR 0 8
69479: PPUSH
69480: CALL_OW 488
69484: NOT
69485: IFFALSE 69489
// continue ;
69487: GO 69417
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69489: LD_ADDR_VAR 0 9
69493: PUSH
69494: LD_VAR 0 12
69498: PUSH
69499: LD_INT 1
69501: ARRAY
69502: PPUSH
69503: LD_VAR 0 12
69507: PUSH
69508: LD_INT 2
69510: ARRAY
69511: PPUSH
69512: LD_VAR 0 7
69516: PPUSH
69517: LD_VAR 0 8
69521: PPUSH
69522: CALL_OW 298
69526: ST_TO_ADDR
// if tmp < distance then
69527: LD_VAR 0 9
69531: PUSH
69532: LD_VAR 0 10
69536: LESS
69537: IFFALSE 69559
// begin result := i ;
69539: LD_ADDR_VAR 0 5
69543: PUSH
69544: LD_VAR 0 6
69548: ST_TO_ADDR
// distance := tmp ;
69549: LD_ADDR_VAR 0 10
69553: PUSH
69554: LD_VAR 0 9
69558: ST_TO_ADDR
// end ; end ;
69559: GO 69417
69561: POP
69562: POP
// end ;
69563: LD_VAR 0 5
69567: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69568: LD_INT 0
69570: PPUSH
69571: PPUSH
// if not driver or not IsInUnit ( driver ) then
69572: LD_VAR 0 1
69576: NOT
69577: IFTRUE 69591
69579: PUSH
69580: LD_VAR 0 1
69584: PPUSH
69585: CALL_OW 310
69589: NOT
69590: OR
69591: IFFALSE 69595
// exit ;
69593: GO 69685
// vehicle := IsInUnit ( driver ) ;
69595: LD_ADDR_VAR 0 3
69599: PUSH
69600: LD_VAR 0 1
69604: PPUSH
69605: CALL_OW 310
69609: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69610: LD_VAR 0 1
69614: PPUSH
69615: LD_STRING \
69617: PUSH
69618: LD_INT 0
69620: PUSH
69621: LD_INT 0
69623: PUSH
69624: LD_INT 0
69626: PUSH
69627: LD_INT 0
69629: PUSH
69630: LD_INT 0
69632: PUSH
69633: LD_INT 0
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: LIST
69640: LIST
69641: LIST
69642: LIST
69643: LIST
69644: PUSH
69645: LD_STRING E
69647: PUSH
69648: LD_INT 0
69650: PUSH
69651: LD_INT 0
69653: PUSH
69654: LD_VAR 0 3
69658: PUSH
69659: LD_INT 0
69661: PUSH
69662: LD_INT 0
69664: PUSH
69665: LD_INT 0
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: PUSH
69677: EMPTY
69678: LIST
69679: LIST
69680: PPUSH
69681: CALL_OW 446
// end ;
69685: LD_VAR 0 2
69689: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69690: LD_INT 0
69692: PPUSH
69693: PPUSH
// if not driver or not IsInUnit ( driver ) then
69694: LD_VAR 0 1
69698: NOT
69699: IFTRUE 69713
69701: PUSH
69702: LD_VAR 0 1
69706: PPUSH
69707: CALL_OW 310
69711: NOT
69712: OR
69713: IFFALSE 69717
// exit ;
69715: GO 69807
// vehicle := IsInUnit ( driver ) ;
69717: LD_ADDR_VAR 0 3
69721: PUSH
69722: LD_VAR 0 1
69726: PPUSH
69727: CALL_OW 310
69731: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69732: LD_VAR 0 1
69736: PPUSH
69737: LD_STRING \
69739: PUSH
69740: LD_INT 0
69742: PUSH
69743: LD_INT 0
69745: PUSH
69746: LD_INT 0
69748: PUSH
69749: LD_INT 0
69751: PUSH
69752: LD_INT 0
69754: PUSH
69755: LD_INT 0
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: PUSH
69767: LD_STRING E
69769: PUSH
69770: LD_INT 0
69772: PUSH
69773: LD_INT 0
69775: PUSH
69776: LD_VAR 0 3
69780: PUSH
69781: LD_INT 0
69783: PUSH
69784: LD_INT 0
69786: PUSH
69787: LD_INT 0
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PPUSH
69803: CALL_OW 447
// end ;
69807: LD_VAR 0 2
69811: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69812: LD_INT 0
69814: PPUSH
69815: PPUSH
69816: PPUSH
// tmp := [ ] ;
69817: LD_ADDR_VAR 0 5
69821: PUSH
69822: EMPTY
69823: ST_TO_ADDR
// for i in units do
69824: LD_ADDR_VAR 0 4
69828: PUSH
69829: LD_VAR 0 1
69833: PUSH
69834: FOR_IN
69835: IFFALSE 69873
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69837: LD_ADDR_VAR 0 5
69841: PUSH
69842: LD_VAR 0 5
69846: PPUSH
69847: LD_VAR 0 5
69851: PUSH
69852: LD_INT 1
69854: PLUS
69855: PPUSH
69856: LD_VAR 0 4
69860: PPUSH
69861: CALL_OW 256
69865: PPUSH
69866: CALL_OW 2
69870: ST_TO_ADDR
69871: GO 69834
69873: POP
69874: POP
// if not tmp then
69875: LD_VAR 0 5
69879: NOT
69880: IFFALSE 69884
// exit ;
69882: GO 69932
// if asc then
69884: LD_VAR 0 2
69888: IFFALSE 69912
// result := SortListByListAsc ( units , tmp ) else
69890: LD_ADDR_VAR 0 3
69894: PUSH
69895: LD_VAR 0 1
69899: PPUSH
69900: LD_VAR 0 5
69904: PPUSH
69905: CALL_OW 76
69909: ST_TO_ADDR
69910: GO 69932
// result := SortListByListDesc ( units , tmp ) ;
69912: LD_ADDR_VAR 0 3
69916: PUSH
69917: LD_VAR 0 1
69921: PPUSH
69922: LD_VAR 0 5
69926: PPUSH
69927: CALL_OW 77
69931: ST_TO_ADDR
// end ;
69932: LD_VAR 0 3
69936: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69937: LD_INT 0
69939: PPUSH
69940: PPUSH
// task := GetTaskList ( mech ) ;
69941: LD_ADDR_VAR 0 4
69945: PUSH
69946: LD_VAR 0 1
69950: PPUSH
69951: CALL_OW 437
69955: ST_TO_ADDR
// if not task then
69956: LD_VAR 0 4
69960: NOT
69961: IFFALSE 69965
// exit ;
69963: GO 70009
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69965: LD_ADDR_VAR 0 3
69969: PUSH
69970: LD_VAR 0 4
69974: PUSH
69975: LD_INT 1
69977: ARRAY
69978: PUSH
69979: LD_INT 1
69981: ARRAY
69982: PUSH
69983: LD_STRING r
69985: EQUAL
69986: IFFALSE 70008
69988: PUSH
69989: LD_VAR 0 4
69993: PUSH
69994: LD_INT 1
69996: ARRAY
69997: PUSH
69998: LD_INT 4
70000: ARRAY
70001: PUSH
70002: LD_VAR 0 2
70006: EQUAL
70007: AND
70008: ST_TO_ADDR
// end ;
70009: LD_VAR 0 3
70013: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70014: LD_INT 0
70016: PPUSH
// SetDir ( unit , d ) ;
70017: LD_VAR 0 1
70021: PPUSH
70022: LD_VAR 0 4
70026: PPUSH
70027: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
70031: LD_ADDR_VAR 0 6
70035: PUSH
70036: LD_VAR 0 1
70040: PPUSH
70041: LD_VAR 0 2
70045: PPUSH
70046: LD_VAR 0 3
70050: PPUSH
70051: LD_VAR 0 5
70055: PPUSH
70056: CALL_OW 48
70060: ST_TO_ADDR
// end ;
70061: LD_VAR 0 6
70065: RET
// export function ToNaturalNumber ( number ) ; begin
70066: LD_INT 0
70068: PPUSH
// result := number div 1 ;
70069: LD_ADDR_VAR 0 2
70073: PUSH
70074: LD_VAR 0 1
70078: PUSH
70079: LD_INT 1
70081: DIV
70082: ST_TO_ADDR
// if number < 0 then
70083: LD_VAR 0 1
70087: PUSH
70088: LD_INT 0
70090: LESS
70091: IFFALSE 70101
// result := 0 ;
70093: LD_ADDR_VAR 0 2
70097: PUSH
70098: LD_INT 0
70100: ST_TO_ADDR
// end ;
70101: LD_VAR 0 2
70105: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
70106: LD_INT 0
70108: PPUSH
70109: PPUSH
70110: PPUSH
// if not buildings then
70111: LD_VAR 0 1
70115: NOT
70116: IFFALSE 70120
// exit ;
70118: GO 70235
// tmp := [ ] ;
70120: LD_ADDR_VAR 0 5
70124: PUSH
70125: EMPTY
70126: ST_TO_ADDR
// for b in buildings do
70127: LD_ADDR_VAR 0 4
70131: PUSH
70132: LD_VAR 0 1
70136: PUSH
70137: FOR_IN
70138: IFFALSE 70176
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
70140: LD_ADDR_VAR 0 5
70144: PUSH
70145: LD_VAR 0 5
70149: PPUSH
70150: LD_VAR 0 5
70154: PUSH
70155: LD_INT 1
70157: PLUS
70158: PPUSH
70159: LD_VAR 0 4
70163: PPUSH
70164: CALL_OW 266
70168: PPUSH
70169: CALL_OW 1
70173: ST_TO_ADDR
70174: GO 70137
70176: POP
70177: POP
// if not tmp then
70178: LD_VAR 0 5
70182: NOT
70183: IFFALSE 70187
// exit ;
70185: GO 70235
// if asc then
70187: LD_VAR 0 2
70191: IFFALSE 70215
// result := SortListByListAsc ( buildings , tmp ) else
70193: LD_ADDR_VAR 0 3
70197: PUSH
70198: LD_VAR 0 1
70202: PPUSH
70203: LD_VAR 0 5
70207: PPUSH
70208: CALL_OW 76
70212: ST_TO_ADDR
70213: GO 70235
// result := SortListByListDesc ( buildings , tmp ) ;
70215: LD_ADDR_VAR 0 3
70219: PUSH
70220: LD_VAR 0 1
70224: PPUSH
70225: LD_VAR 0 5
70229: PPUSH
70230: CALL_OW 77
70234: ST_TO_ADDR
// end ;
70235: LD_VAR 0 3
70239: RET
// export function SortByClass ( units , class ) ; var un ; begin
70240: LD_INT 0
70242: PPUSH
70243: PPUSH
// if not units or not class then
70244: LD_VAR 0 1
70248: NOT
70249: IFTRUE 70258
70251: PUSH
70252: LD_VAR 0 2
70256: NOT
70257: OR
70258: IFFALSE 70262
// exit ;
70260: GO 70357
// result := [ ] ;
70262: LD_ADDR_VAR 0 3
70266: PUSH
70267: EMPTY
70268: ST_TO_ADDR
// for un in units do
70269: LD_ADDR_VAR 0 4
70273: PUSH
70274: LD_VAR 0 1
70278: PUSH
70279: FOR_IN
70280: IFFALSE 70355
// if GetClass ( un ) = class then
70282: LD_VAR 0 4
70286: PPUSH
70287: CALL_OW 257
70291: PUSH
70292: LD_VAR 0 2
70296: EQUAL
70297: IFFALSE 70324
// result := Insert ( result , 1 , un ) else
70299: LD_ADDR_VAR 0 3
70303: PUSH
70304: LD_VAR 0 3
70308: PPUSH
70309: LD_INT 1
70311: PPUSH
70312: LD_VAR 0 4
70316: PPUSH
70317: CALL_OW 2
70321: ST_TO_ADDR
70322: GO 70353
// result := Replace ( result , result + 1 , un ) ;
70324: LD_ADDR_VAR 0 3
70328: PUSH
70329: LD_VAR 0 3
70333: PPUSH
70334: LD_VAR 0 3
70338: PUSH
70339: LD_INT 1
70341: PLUS
70342: PPUSH
70343: LD_VAR 0 4
70347: PPUSH
70348: CALL_OW 1
70352: ST_TO_ADDR
70353: GO 70279
70355: POP
70356: POP
// end ;
70357: LD_VAR 0 3
70361: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70362: LD_INT 0
70364: PPUSH
70365: PPUSH
70366: PPUSH
70367: PPUSH
70368: PPUSH
70369: PPUSH
70370: PPUSH
// result := [ ] ;
70371: LD_ADDR_VAR 0 4
70375: PUSH
70376: EMPTY
70377: ST_TO_ADDR
// if x - r < 0 then
70378: LD_VAR 0 1
70382: PUSH
70383: LD_VAR 0 3
70387: MINUS
70388: PUSH
70389: LD_INT 0
70391: LESS
70392: IFFALSE 70404
// min_x := 0 else
70394: LD_ADDR_VAR 0 8
70398: PUSH
70399: LD_INT 0
70401: ST_TO_ADDR
70402: GO 70420
// min_x := x - r ;
70404: LD_ADDR_VAR 0 8
70408: PUSH
70409: LD_VAR 0 1
70413: PUSH
70414: LD_VAR 0 3
70418: MINUS
70419: ST_TO_ADDR
// if y - r < 0 then
70420: LD_VAR 0 2
70424: PUSH
70425: LD_VAR 0 3
70429: MINUS
70430: PUSH
70431: LD_INT 0
70433: LESS
70434: IFFALSE 70446
// min_y := 0 else
70436: LD_ADDR_VAR 0 7
70440: PUSH
70441: LD_INT 0
70443: ST_TO_ADDR
70444: GO 70462
// min_y := y - r ;
70446: LD_ADDR_VAR 0 7
70450: PUSH
70451: LD_VAR 0 2
70455: PUSH
70456: LD_VAR 0 3
70460: MINUS
70461: ST_TO_ADDR
// max_x := x + r ;
70462: LD_ADDR_VAR 0 9
70466: PUSH
70467: LD_VAR 0 1
70471: PUSH
70472: LD_VAR 0 3
70476: PLUS
70477: ST_TO_ADDR
// max_y := y + r ;
70478: LD_ADDR_VAR 0 10
70482: PUSH
70483: LD_VAR 0 2
70487: PUSH
70488: LD_VAR 0 3
70492: PLUS
70493: ST_TO_ADDR
// for _x = min_x to max_x do
70494: LD_ADDR_VAR 0 5
70498: PUSH
70499: DOUBLE
70500: LD_VAR 0 8
70504: DEC
70505: ST_TO_ADDR
70506: LD_VAR 0 9
70510: PUSH
70511: FOR_TO
70512: IFFALSE 70613
// for _y = min_y to max_y do
70514: LD_ADDR_VAR 0 6
70518: PUSH
70519: DOUBLE
70520: LD_VAR 0 7
70524: DEC
70525: ST_TO_ADDR
70526: LD_VAR 0 10
70530: PUSH
70531: FOR_TO
70532: IFFALSE 70609
// begin if not ValidHex ( _x , _y ) then
70534: LD_VAR 0 5
70538: PPUSH
70539: LD_VAR 0 6
70543: PPUSH
70544: CALL_OW 488
70548: NOT
70549: IFFALSE 70553
// continue ;
70551: GO 70531
// if GetResourceTypeXY ( _x , _y ) then
70553: LD_VAR 0 5
70557: PPUSH
70558: LD_VAR 0 6
70562: PPUSH
70563: CALL_OW 283
70567: IFFALSE 70607
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70569: LD_ADDR_VAR 0 4
70573: PUSH
70574: LD_VAR 0 4
70578: PPUSH
70579: LD_VAR 0 4
70583: PUSH
70584: LD_INT 1
70586: PLUS
70587: PPUSH
70588: LD_VAR 0 5
70592: PUSH
70593: LD_VAR 0 6
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: PPUSH
70602: CALL_OW 1
70606: ST_TO_ADDR
// end ;
70607: GO 70531
70609: POP
70610: POP
70611: GO 70511
70613: POP
70614: POP
// end ;
70615: LD_VAR 0 4
70619: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70620: LD_INT 0
70622: PPUSH
70623: PPUSH
70624: PPUSH
70625: PPUSH
70626: PPUSH
70627: PPUSH
70628: PPUSH
70629: PPUSH
// if not units then
70630: LD_VAR 0 1
70634: NOT
70635: IFFALSE 70639
// exit ;
70637: GO 71171
// result := UnitFilter ( units , [ f_ok ] ) ;
70639: LD_ADDR_VAR 0 3
70643: PUSH
70644: LD_VAR 0 1
70648: PPUSH
70649: LD_INT 50
70651: PUSH
70652: EMPTY
70653: LIST
70654: PPUSH
70655: CALL_OW 72
70659: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70660: LD_ADDR_VAR 0 8
70664: PUSH
70665: LD_VAR 0 1
70669: PUSH
70670: LD_INT 1
70672: ARRAY
70673: PPUSH
70674: CALL_OW 255
70678: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70679: LD_ADDR_VAR 0 10
70683: PUSH
70684: LD_INT 29
70686: PUSH
70687: LD_INT 91
70689: PUSH
70690: LD_INT 49
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: LIST
70697: ST_TO_ADDR
// if not result then
70698: LD_VAR 0 3
70702: NOT
70703: IFFALSE 70707
// exit ;
70705: GO 71171
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70707: LD_ADDR_VAR 0 5
70711: PUSH
70712: LD_INT 81
70714: PUSH
70715: LD_VAR 0 8
70719: PUSH
70720: EMPTY
70721: LIST
70722: LIST
70723: PPUSH
70724: CALL_OW 69
70728: ST_TO_ADDR
// for i in result do
70729: LD_ADDR_VAR 0 4
70733: PUSH
70734: LD_VAR 0 3
70738: PUSH
70739: FOR_IN
70740: IFFALSE 71169
// begin tag := GetTag ( i ) + 1 ;
70742: LD_ADDR_VAR 0 9
70746: PUSH
70747: LD_VAR 0 4
70751: PPUSH
70752: CALL_OW 110
70756: PUSH
70757: LD_INT 1
70759: PLUS
70760: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
70761: LD_ADDR_VAR 0 7
70765: PUSH
70766: LD_VAR 0 4
70770: PPUSH
70771: CALL_OW 250
70775: PPUSH
70776: LD_VAR 0 4
70780: PPUSH
70781: CALL_OW 251
70785: PPUSH
70786: LD_INT 4
70788: PPUSH
70789: CALL 70362 0 3
70793: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
70794: LD_VAR 0 4
70798: PPUSH
70799: CALL_OW 247
70803: PUSH
70804: LD_INT 2
70806: EQUAL
70807: IFFALSE 70819
70809: PUSH
70810: LD_VAR 0 7
70814: PUSH
70815: LD_INT 2
70817: GREATER
70818: AND
70819: IFFALSE 70839
70821: PUSH
70822: LD_VAR 0 4
70826: PPUSH
70827: CALL_OW 264
70831: PUSH
70832: LD_VAR 0 10
70836: IN
70837: NOT
70838: AND
70839: IFFALSE 70878
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70841: LD_VAR 0 4
70845: PPUSH
70846: LD_VAR 0 7
70850: PUSH
70851: LD_INT 1
70853: ARRAY
70854: PUSH
70855: LD_INT 1
70857: ARRAY
70858: PPUSH
70859: LD_VAR 0 7
70863: PUSH
70864: LD_INT 1
70866: ARRAY
70867: PUSH
70868: LD_INT 2
70870: ARRAY
70871: PPUSH
70872: CALL_OW 116
70876: GO 71167
// if path > tag then
70878: LD_VAR 0 2
70882: PUSH
70883: LD_VAR 0 9
70887: GREATER
70888: IFFALSE 71096
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70890: LD_ADDR_VAR 0 6
70894: PUSH
70895: LD_VAR 0 5
70899: PPUSH
70900: LD_INT 91
70902: PUSH
70903: LD_VAR 0 4
70907: PUSH
70908: LD_INT 8
70910: PUSH
70911: EMPTY
70912: LIST
70913: LIST
70914: LIST
70915: PPUSH
70916: CALL_OW 72
70920: ST_TO_ADDR
// if nearEnemy then
70921: LD_VAR 0 6
70925: IFFALSE 70994
// begin if GetWeapon ( i ) = ru_time_lapser then
70927: LD_VAR 0 4
70931: PPUSH
70932: CALL_OW 264
70936: PUSH
70937: LD_INT 49
70939: EQUAL
70940: IFFALSE 70968
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70942: LD_VAR 0 4
70946: PPUSH
70947: LD_VAR 0 6
70951: PPUSH
70952: LD_VAR 0 4
70956: PPUSH
70957: CALL_OW 74
70961: PPUSH
70962: CALL_OW 112
70966: GO 70992
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70968: LD_VAR 0 4
70972: PPUSH
70973: LD_VAR 0 6
70977: PPUSH
70978: LD_VAR 0 4
70982: PPUSH
70983: CALL_OW 74
70987: PPUSH
70988: CALL 72252 0 2
// end else
70992: GO 71094
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70994: LD_VAR 0 4
70998: PPUSH
70999: LD_VAR 0 2
71003: PUSH
71004: LD_VAR 0 9
71008: ARRAY
71009: PUSH
71010: LD_INT 1
71012: ARRAY
71013: PPUSH
71014: LD_VAR 0 2
71018: PUSH
71019: LD_VAR 0 9
71023: ARRAY
71024: PUSH
71025: LD_INT 2
71027: ARRAY
71028: PPUSH
71029: CALL_OW 297
71033: PUSH
71034: LD_INT 6
71036: GREATER
71037: IFFALSE 71080
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71039: LD_VAR 0 4
71043: PPUSH
71044: LD_VAR 0 2
71048: PUSH
71049: LD_VAR 0 9
71053: ARRAY
71054: PUSH
71055: LD_INT 1
71057: ARRAY
71058: PPUSH
71059: LD_VAR 0 2
71063: PUSH
71064: LD_VAR 0 9
71068: ARRAY
71069: PUSH
71070: LD_INT 2
71072: ARRAY
71073: PPUSH
71074: CALL_OW 114
71078: GO 71094
// SetTag ( i , tag ) ;
71080: LD_VAR 0 4
71084: PPUSH
71085: LD_VAR 0 9
71089: PPUSH
71090: CALL_OW 109
// end else
71094: GO 71167
// if enemy then
71096: LD_VAR 0 5
71100: IFFALSE 71167
// begin if GetWeapon ( i ) = ru_time_lapser then
71102: LD_VAR 0 4
71106: PPUSH
71107: CALL_OW 264
71111: PUSH
71112: LD_INT 49
71114: EQUAL
71115: IFFALSE 71143
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71117: LD_VAR 0 4
71121: PPUSH
71122: LD_VAR 0 5
71126: PPUSH
71127: LD_VAR 0 4
71131: PPUSH
71132: CALL_OW 74
71136: PPUSH
71137: CALL_OW 112
71141: GO 71167
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71143: LD_VAR 0 4
71147: PPUSH
71148: LD_VAR 0 5
71152: PPUSH
71153: LD_VAR 0 4
71157: PPUSH
71158: CALL_OW 74
71162: PPUSH
71163: CALL 72252 0 2
// end ; end ;
71167: GO 70739
71169: POP
71170: POP
// end ;
71171: LD_VAR 0 3
71175: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71176: LD_INT 0
71178: PPUSH
71179: PPUSH
71180: PPUSH
// if not unit or IsInUnit ( unit ) then
71181: LD_VAR 0 1
71185: NOT
71186: IFTRUE 71199
71188: PUSH
71189: LD_VAR 0 1
71193: PPUSH
71194: CALL_OW 310
71198: OR
71199: IFFALSE 71203
// exit ;
71201: GO 71294
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71203: LD_ADDR_VAR 0 4
71207: PUSH
71208: LD_VAR 0 1
71212: PPUSH
71213: CALL_OW 250
71217: PPUSH
71218: LD_VAR 0 2
71222: PPUSH
71223: LD_INT 1
71225: PPUSH
71226: CALL_OW 272
71230: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71231: LD_ADDR_VAR 0 5
71235: PUSH
71236: LD_VAR 0 1
71240: PPUSH
71241: CALL_OW 251
71245: PPUSH
71246: LD_VAR 0 2
71250: PPUSH
71251: LD_INT 1
71253: PPUSH
71254: CALL_OW 273
71258: ST_TO_ADDR
// if ValidHex ( x , y ) then
71259: LD_VAR 0 4
71263: PPUSH
71264: LD_VAR 0 5
71268: PPUSH
71269: CALL_OW 488
71273: IFFALSE 71294
// ComTurnXY ( unit , x , y ) ;
71275: LD_VAR 0 1
71279: PPUSH
71280: LD_VAR 0 4
71284: PPUSH
71285: LD_VAR 0 5
71289: PPUSH
71290: CALL_OW 118
// end ;
71294: LD_VAR 0 3
71298: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71299: LD_INT 0
71301: PPUSH
71302: PPUSH
// result := false ;
71303: LD_ADDR_VAR 0 3
71307: PUSH
71308: LD_INT 0
71310: ST_TO_ADDR
// if not units then
71311: LD_VAR 0 2
71315: NOT
71316: IFFALSE 71320
// exit ;
71318: GO 71365
// for i in units do
71320: LD_ADDR_VAR 0 4
71324: PUSH
71325: LD_VAR 0 2
71329: PUSH
71330: FOR_IN
71331: IFFALSE 71363
// if See ( side , i ) then
71333: LD_VAR 0 1
71337: PPUSH
71338: LD_VAR 0 4
71342: PPUSH
71343: CALL_OW 292
71347: IFFALSE 71361
// begin result := true ;
71349: LD_ADDR_VAR 0 3
71353: PUSH
71354: LD_INT 1
71356: ST_TO_ADDR
// exit ;
71357: POP
71358: POP
71359: GO 71365
// end ;
71361: GO 71330
71363: POP
71364: POP
// end ;
71365: LD_VAR 0 3
71369: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71370: LD_INT 0
71372: PPUSH
71373: PPUSH
71374: PPUSH
71375: PPUSH
// if not unit or not points then
71376: LD_VAR 0 1
71380: NOT
71381: IFTRUE 71390
71383: PUSH
71384: LD_VAR 0 2
71388: NOT
71389: OR
71390: IFFALSE 71394
// exit ;
71392: GO 71484
// dist := 99999 ;
71394: LD_ADDR_VAR 0 5
71398: PUSH
71399: LD_INT 99999
71401: ST_TO_ADDR
// for i in points do
71402: LD_ADDR_VAR 0 4
71406: PUSH
71407: LD_VAR 0 2
71411: PUSH
71412: FOR_IN
71413: IFFALSE 71482
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71415: LD_ADDR_VAR 0 6
71419: PUSH
71420: LD_VAR 0 1
71424: PPUSH
71425: LD_VAR 0 4
71429: PUSH
71430: LD_INT 1
71432: ARRAY
71433: PPUSH
71434: LD_VAR 0 4
71438: PUSH
71439: LD_INT 2
71441: ARRAY
71442: PPUSH
71443: CALL_OW 297
71447: ST_TO_ADDR
// if tmpDist < dist then
71448: LD_VAR 0 6
71452: PUSH
71453: LD_VAR 0 5
71457: LESS
71458: IFFALSE 71480
// begin result := i ;
71460: LD_ADDR_VAR 0 3
71464: PUSH
71465: LD_VAR 0 4
71469: ST_TO_ADDR
// dist := tmpDist ;
71470: LD_ADDR_VAR 0 5
71474: PUSH
71475: LD_VAR 0 6
71479: ST_TO_ADDR
// end ; end ;
71480: GO 71412
71482: POP
71483: POP
// end ;
71484: LD_VAR 0 3
71488: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71489: LD_INT 0
71491: PPUSH
// uc_side := side ;
71492: LD_ADDR_OWVAR 20
71496: PUSH
71497: LD_VAR 0 1
71501: ST_TO_ADDR
// uc_nation := 3 ;
71502: LD_ADDR_OWVAR 21
71506: PUSH
71507: LD_INT 3
71509: ST_TO_ADDR
// vc_chassis := 25 ;
71510: LD_ADDR_OWVAR 37
71514: PUSH
71515: LD_INT 25
71517: ST_TO_ADDR
// vc_engine := engine_siberite ;
71518: LD_ADDR_OWVAR 39
71522: PUSH
71523: LD_INT 3
71525: ST_TO_ADDR
// vc_control := control_computer ;
71526: LD_ADDR_OWVAR 38
71530: PUSH
71531: LD_INT 3
71533: ST_TO_ADDR
// vc_weapon := 59 ;
71534: LD_ADDR_OWVAR 40
71538: PUSH
71539: LD_INT 59
71541: ST_TO_ADDR
// result := CreateVehicle ;
71542: LD_ADDR_VAR 0 5
71546: PUSH
71547: CALL_OW 45
71551: ST_TO_ADDR
// SetDir ( result , d ) ;
71552: LD_VAR 0 5
71556: PPUSH
71557: LD_VAR 0 4
71561: PPUSH
71562: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71566: LD_VAR 0 5
71570: PPUSH
71571: LD_VAR 0 2
71575: PPUSH
71576: LD_VAR 0 3
71580: PPUSH
71581: LD_INT 0
71583: PPUSH
71584: CALL_OW 48
// end ;
71588: LD_VAR 0 5
71592: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71593: LD_INT 0
71595: PPUSH
71596: PPUSH
71597: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71598: LD_ADDR_VAR 0 2
71602: PUSH
71603: LD_INT 0
71605: PUSH
71606: LD_INT 0
71608: PUSH
71609: LD_INT 0
71611: PUSH
71612: LD_INT 0
71614: PUSH
71615: EMPTY
71616: LIST
71617: LIST
71618: LIST
71619: LIST
71620: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71621: LD_VAR 0 1
71625: NOT
71626: IFTRUE 71659
71628: PUSH
71629: LD_VAR 0 1
71633: PPUSH
71634: CALL_OW 264
71638: PUSH
71639: LD_INT 12
71641: PUSH
71642: LD_INT 51
71644: PUSH
71645: LD_INT 32
71647: PUSH
71648: LD_INT 89
71650: PUSH
71651: EMPTY
71652: LIST
71653: LIST
71654: LIST
71655: LIST
71656: IN
71657: NOT
71658: OR
71659: IFFALSE 71663
// exit ;
71661: GO 71761
// for i := 1 to 3 do
71663: LD_ADDR_VAR 0 3
71667: PUSH
71668: DOUBLE
71669: LD_INT 1
71671: DEC
71672: ST_TO_ADDR
71673: LD_INT 3
71675: PUSH
71676: FOR_TO
71677: IFFALSE 71759
// begin tmp := GetCargo ( cargo , i ) ;
71679: LD_ADDR_VAR 0 4
71683: PUSH
71684: LD_VAR 0 1
71688: PPUSH
71689: LD_VAR 0 3
71693: PPUSH
71694: CALL_OW 289
71698: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71699: LD_ADDR_VAR 0 2
71703: PUSH
71704: LD_VAR 0 2
71708: PPUSH
71709: LD_VAR 0 3
71713: PPUSH
71714: LD_VAR 0 4
71718: PPUSH
71719: CALL_OW 1
71723: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71724: LD_ADDR_VAR 0 2
71728: PUSH
71729: LD_VAR 0 2
71733: PPUSH
71734: LD_INT 4
71736: PPUSH
71737: LD_VAR 0 2
71741: PUSH
71742: LD_INT 4
71744: ARRAY
71745: PUSH
71746: LD_VAR 0 4
71750: PLUS
71751: PPUSH
71752: CALL_OW 1
71756: ST_TO_ADDR
// end ;
71757: GO 71676
71759: POP
71760: POP
// end ;
71761: LD_VAR 0 2
71765: RET
// export function Length ( array ) ; begin
71766: LD_INT 0
71768: PPUSH
// result := array + 0 ;
71769: LD_ADDR_VAR 0 2
71773: PUSH
71774: LD_VAR 0 1
71778: PUSH
71779: LD_INT 0
71781: PLUS
71782: ST_TO_ADDR
// end ;
71783: LD_VAR 0 2
71787: RET
// export function PrepareArray ( array ) ; begin
71788: LD_INT 0
71790: PPUSH
// result := array diff 0 ;
71791: LD_ADDR_VAR 0 2
71795: PUSH
71796: LD_VAR 0 1
71800: PUSH
71801: LD_INT 0
71803: DIFF
71804: ST_TO_ADDR
// if not result [ 1 ] then
71805: LD_VAR 0 2
71809: PUSH
71810: LD_INT 1
71812: ARRAY
71813: NOT
71814: IFFALSE 71834
// result := Delete ( result , 1 ) ;
71816: LD_ADDR_VAR 0 2
71820: PUSH
71821: LD_VAR 0 2
71825: PPUSH
71826: LD_INT 1
71828: PPUSH
71829: CALL_OW 3
71833: ST_TO_ADDR
// end ;
71834: LD_VAR 0 2
71838: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71839: LD_INT 0
71841: PPUSH
71842: PPUSH
71843: PPUSH
71844: PPUSH
// sibRocketRange := 25 ;
71845: LD_ADDR_VAR 0 6
71849: PUSH
71850: LD_INT 25
71852: ST_TO_ADDR
// result := false ;
71853: LD_ADDR_VAR 0 4
71857: PUSH
71858: LD_INT 0
71860: ST_TO_ADDR
// for i := 0 to 5 do
71861: LD_ADDR_VAR 0 5
71865: PUSH
71866: DOUBLE
71867: LD_INT 0
71869: DEC
71870: ST_TO_ADDR
71871: LD_INT 5
71873: PUSH
71874: FOR_TO
71875: IFFALSE 71942
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71877: LD_VAR 0 1
71881: PPUSH
71882: LD_VAR 0 5
71886: PPUSH
71887: LD_VAR 0 6
71891: PPUSH
71892: CALL_OW 272
71896: PPUSH
71897: LD_VAR 0 2
71901: PPUSH
71902: LD_VAR 0 5
71906: PPUSH
71907: LD_VAR 0 6
71911: PPUSH
71912: CALL_OW 273
71916: PPUSH
71917: LD_VAR 0 3
71921: PPUSH
71922: CALL_OW 309
71926: IFFALSE 71940
// begin result := true ;
71928: LD_ADDR_VAR 0 4
71932: PUSH
71933: LD_INT 1
71935: ST_TO_ADDR
// exit ;
71936: POP
71937: POP
71938: GO 71944
// end ;
71940: GO 71874
71942: POP
71943: POP
// end ;
71944: LD_VAR 0 4
71948: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
71949: LD_INT 0
71951: PPUSH
71952: PPUSH
71953: PPUSH
// if btype = b_depot then
71954: LD_VAR 0 2
71958: PUSH
71959: LD_INT 0
71961: EQUAL
71962: IFFALSE 71974
// begin result := true ;
71964: LD_ADDR_VAR 0 3
71968: PUSH
71969: LD_INT 1
71971: ST_TO_ADDR
// exit ;
71972: GO 72094
// end ; pom := GetBase ( depot ) ;
71974: LD_ADDR_VAR 0 4
71978: PUSH
71979: LD_VAR 0 1
71983: PPUSH
71984: CALL_OW 274
71988: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
71989: LD_ADDR_VAR 0 5
71993: PUSH
71994: LD_VAR 0 2
71998: PPUSH
71999: LD_VAR 0 1
72003: PPUSH
72004: CALL_OW 248
72008: PPUSH
72009: CALL_OW 450
72013: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
72014: LD_ADDR_VAR 0 3
72018: PUSH
72019: LD_VAR 0 4
72023: PPUSH
72024: LD_INT 1
72026: PPUSH
72027: CALL_OW 275
72031: PUSH
72032: LD_VAR 0 5
72036: PUSH
72037: LD_INT 1
72039: ARRAY
72040: GREATEREQUAL
72041: IFFALSE 72067
72043: PUSH
72044: LD_VAR 0 4
72048: PPUSH
72049: LD_INT 2
72051: PPUSH
72052: CALL_OW 275
72056: PUSH
72057: LD_VAR 0 5
72061: PUSH
72062: LD_INT 2
72064: ARRAY
72065: GREATEREQUAL
72066: AND
72067: IFFALSE 72093
72069: PUSH
72070: LD_VAR 0 4
72074: PPUSH
72075: LD_INT 3
72077: PPUSH
72078: CALL_OW 275
72082: PUSH
72083: LD_VAR 0 5
72087: PUSH
72088: LD_INT 3
72090: ARRAY
72091: GREATEREQUAL
72092: AND
72093: ST_TO_ADDR
// end ;
72094: LD_VAR 0 3
72098: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72099: LD_INT 0
72101: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72102: LD_VAR 0 1
72106: PPUSH
72107: LD_VAR 0 2
72111: PPUSH
72112: LD_INT 0
72114: PPUSH
72115: LD_INT 0
72117: PPUSH
72118: LD_INT 1
72120: PPUSH
72121: LD_INT 0
72123: PPUSH
72124: CALL_OW 587
// end ;
72128: LD_VAR 0 3
72132: RET
// export function CenterOnNow ( unit ) ; begin
72133: LD_INT 0
72135: PPUSH
// result := IsInUnit ( unit ) ;
72136: LD_ADDR_VAR 0 2
72140: PUSH
72141: LD_VAR 0 1
72145: PPUSH
72146: CALL_OW 310
72150: ST_TO_ADDR
// if not result then
72151: LD_VAR 0 2
72155: NOT
72156: IFFALSE 72168
// result := unit ;
72158: LD_ADDR_VAR 0 2
72162: PUSH
72163: LD_VAR 0 1
72167: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72168: LD_VAR 0 1
72172: PPUSH
72173: CALL_OW 87
// end ;
72177: LD_VAR 0 2
72181: RET
// export function ComMoveHex ( unit , hex ) ; begin
72182: LD_INT 0
72184: PPUSH
// if not hex then
72185: LD_VAR 0 2
72189: NOT
72190: IFFALSE 72194
// exit ;
72192: GO 72247
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
72194: LD_VAR 0 2
72198: PUSH
72199: LD_INT 1
72201: ARRAY
72202: PPUSH
72203: LD_VAR 0 2
72207: PUSH
72208: LD_INT 2
72210: ARRAY
72211: PPUSH
72212: CALL_OW 428
72216: IFFALSE 72220
// exit ;
72218: GO 72247
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
72220: LD_VAR 0 1
72224: PPUSH
72225: LD_VAR 0 2
72229: PUSH
72230: LD_INT 1
72232: ARRAY
72233: PPUSH
72234: LD_VAR 0 2
72238: PUSH
72239: LD_INT 2
72241: ARRAY
72242: PPUSH
72243: CALL_OW 111
// end ;
72247: LD_VAR 0 3
72251: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
72252: LD_INT 0
72254: PPUSH
72255: PPUSH
72256: PPUSH
// if not unit or not enemy then
72257: LD_VAR 0 1
72261: NOT
72262: IFTRUE 72271
72264: PUSH
72265: LD_VAR 0 2
72269: NOT
72270: OR
72271: IFFALSE 72275
// exit ;
72273: GO 72401
// x := GetX ( enemy ) ;
72275: LD_ADDR_VAR 0 4
72279: PUSH
72280: LD_VAR 0 2
72284: PPUSH
72285: CALL_OW 250
72289: ST_TO_ADDR
// y := GetY ( enemy ) ;
72290: LD_ADDR_VAR 0 5
72294: PUSH
72295: LD_VAR 0 2
72299: PPUSH
72300: CALL_OW 251
72304: ST_TO_ADDR
// if ValidHex ( x , y ) then
72305: LD_VAR 0 4
72309: PPUSH
72310: LD_VAR 0 5
72314: PPUSH
72315: CALL_OW 488
72319: IFFALSE 72401
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
72321: LD_VAR 0 2
72325: PPUSH
72326: CALL_OW 247
72330: PUSH
72331: LD_INT 3
72333: PUSH
72334: LD_INT 2
72336: PUSH
72337: EMPTY
72338: LIST
72339: LIST
72340: IN
72341: IFTRUE 72364
72343: PUSH
72344: LD_VAR 0 1
72348: PPUSH
72349: CALL_OW 255
72353: PPUSH
72354: LD_VAR 0 2
72358: PPUSH
72359: CALL_OW 292
72363: OR
72364: IFFALSE 72382
// ComAttackUnit ( unit , enemy ) else
72366: LD_VAR 0 1
72370: PPUSH
72371: LD_VAR 0 2
72375: PPUSH
72376: CALL_OW 115
72380: GO 72401
// ComAgressiveMove ( unit , x , y ) ;
72382: LD_VAR 0 1
72386: PPUSH
72387: LD_VAR 0 4
72391: PPUSH
72392: LD_VAR 0 5
72396: PPUSH
72397: CALL_OW 114
// end ;
72401: LD_VAR 0 3
72405: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
72406: LD_INT 0
72408: PPUSH
72409: PPUSH
72410: PPUSH
// list := AreaToList ( area , 0 ) ;
72411: LD_ADDR_VAR 0 5
72415: PUSH
72416: LD_VAR 0 1
72420: PPUSH
72421: LD_INT 0
72423: PPUSH
72424: CALL_OW 517
72428: ST_TO_ADDR
// if not list then
72429: LD_VAR 0 5
72433: NOT
72434: IFFALSE 72438
// exit ;
72436: GO 72568
// if all then
72438: LD_VAR 0 2
72442: IFFALSE 72530
// begin for i := 1 to list [ 1 ] do
72444: LD_ADDR_VAR 0 4
72448: PUSH
72449: DOUBLE
72450: LD_INT 1
72452: DEC
72453: ST_TO_ADDR
72454: LD_VAR 0 5
72458: PUSH
72459: LD_INT 1
72461: ARRAY
72462: PUSH
72463: FOR_TO
72464: IFFALSE 72526
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
72466: LD_ADDR_VAR 0 3
72470: PUSH
72471: LD_VAR 0 3
72475: PPUSH
72476: LD_VAR 0 3
72480: PUSH
72481: LD_INT 1
72483: PLUS
72484: PPUSH
72485: LD_VAR 0 5
72489: PUSH
72490: LD_INT 1
72492: ARRAY
72493: PUSH
72494: LD_VAR 0 4
72498: ARRAY
72499: PUSH
72500: LD_VAR 0 5
72504: PUSH
72505: LD_INT 2
72507: ARRAY
72508: PUSH
72509: LD_VAR 0 4
72513: ARRAY
72514: PUSH
72515: EMPTY
72516: LIST
72517: LIST
72518: PPUSH
72519: CALL_OW 1
72523: ST_TO_ADDR
72524: GO 72463
72526: POP
72527: POP
// exit ;
72528: GO 72568
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
72530: LD_ADDR_VAR 0 3
72534: PUSH
72535: LD_VAR 0 5
72539: PUSH
72540: LD_INT 1
72542: ARRAY
72543: PUSH
72544: LD_INT 1
72546: ARRAY
72547: PUSH
72548: LD_VAR 0 5
72552: PUSH
72553: LD_INT 2
72555: ARRAY
72556: PUSH
72557: LD_INT 1
72559: ARRAY
72560: PUSH
72561: EMPTY
72562: LIST
72563: LIST
72564: PUSH
72565: EMPTY
72566: LIST
72567: ST_TO_ADDR
// end ;
72568: LD_VAR 0 3
72572: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
72573: LD_INT 0
72575: PPUSH
72576: PPUSH
// list := AreaToList ( area , 0 ) ;
72577: LD_ADDR_VAR 0 4
72581: PUSH
72582: LD_VAR 0 1
72586: PPUSH
72587: LD_INT 0
72589: PPUSH
72590: CALL_OW 517
72594: ST_TO_ADDR
// if not list then
72595: LD_VAR 0 4
72599: NOT
72600: IFFALSE 72604
// exit ;
72602: GO 72645
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
72604: LD_ADDR_VAR 0 3
72608: PUSH
72609: LD_VAR 0 4
72613: PUSH
72614: LD_INT 1
72616: ARRAY
72617: PUSH
72618: LD_INT 1
72620: ARRAY
72621: PUSH
72622: LD_VAR 0 4
72626: PUSH
72627: LD_INT 2
72629: ARRAY
72630: PUSH
72631: LD_INT 1
72633: ARRAY
72634: PUSH
72635: LD_VAR 0 2
72639: PUSH
72640: EMPTY
72641: LIST
72642: LIST
72643: LIST
72644: ST_TO_ADDR
// end ;
72645: LD_VAR 0 3
72649: RET
// export function First ( array ) ; begin
72650: LD_INT 0
72652: PPUSH
// if not array then
72653: LD_VAR 0 1
72657: NOT
72658: IFFALSE 72662
// exit ;
72660: GO 72676
// result := array [ 1 ] ;
72662: LD_ADDR_VAR 0 2
72666: PUSH
72667: LD_VAR 0 1
72671: PUSH
72672: LD_INT 1
72674: ARRAY
72675: ST_TO_ADDR
// end ;
72676: LD_VAR 0 2
72680: RET
// export function Last ( array ) ; begin
72681: LD_INT 0
72683: PPUSH
// if not array then
72684: LD_VAR 0 1
72688: NOT
72689: IFFALSE 72693
// exit ;
72691: GO 72709
// result := array [ array ] ;
72693: LD_ADDR_VAR 0 2
72697: PUSH
72698: LD_VAR 0 1
72702: PUSH
72703: LD_VAR 0 1
72707: ARRAY
72708: ST_TO_ADDR
// end ;
72709: LD_VAR 0 2
72713: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
72714: LD_INT 0
72716: PPUSH
72717: PPUSH
// result := [ ] ;
72718: LD_ADDR_VAR 0 5
72722: PUSH
72723: EMPTY
72724: ST_TO_ADDR
// if not array then
72725: LD_VAR 0 1
72729: NOT
72730: IFFALSE 72734
// exit ;
72732: GO 72846
// for i := 1 to array do
72734: LD_ADDR_VAR 0 6
72738: PUSH
72739: DOUBLE
72740: LD_INT 1
72742: DEC
72743: ST_TO_ADDR
72744: LD_VAR 0 1
72748: PUSH
72749: FOR_TO
72750: IFFALSE 72844
// if array [ i ] [ index ] = value then
72752: LD_VAR 0 1
72756: PUSH
72757: LD_VAR 0 6
72761: ARRAY
72762: PUSH
72763: LD_VAR 0 2
72767: ARRAY
72768: PUSH
72769: LD_VAR 0 3
72773: EQUAL
72774: IFFALSE 72842
// begin if indexColumn then
72776: LD_VAR 0 4
72780: IFFALSE 72816
// result := Join ( result , array [ i ] [ indexColumn ] ) else
72782: LD_ADDR_VAR 0 5
72786: PUSH
72787: LD_VAR 0 5
72791: PPUSH
72792: LD_VAR 0 1
72796: PUSH
72797: LD_VAR 0 6
72801: ARRAY
72802: PUSH
72803: LD_VAR 0 4
72807: ARRAY
72808: PPUSH
72809: CALL 67854 0 2
72813: ST_TO_ADDR
72814: GO 72842
// result := Join ( result , array [ i ] ) ;
72816: LD_ADDR_VAR 0 5
72820: PUSH
72821: LD_VAR 0 5
72825: PPUSH
72826: LD_VAR 0 1
72830: PUSH
72831: LD_VAR 0 6
72835: ARRAY
72836: PPUSH
72837: CALL 67854 0 2
72841: ST_TO_ADDR
// end ;
72842: GO 72749
72844: POP
72845: POP
// end ;
72846: LD_VAR 0 5
72850: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
72851: LD_INT 0
72853: PPUSH
// if not vehicles or not parkingPoint then
72854: LD_VAR 0 1
72858: NOT
72859: IFTRUE 72868
72861: PUSH
72862: LD_VAR 0 2
72866: NOT
72867: OR
72868: IFFALSE 72872
// exit ;
72870: GO 72970
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
72872: LD_ADDR_VAR 0 1
72876: PUSH
72877: LD_VAR 0 1
72881: PPUSH
72882: LD_INT 50
72884: PUSH
72885: EMPTY
72886: LIST
72887: PUSH
72888: LD_INT 3
72890: PUSH
72891: LD_INT 92
72893: PUSH
72894: LD_VAR 0 2
72898: PUSH
72899: LD_INT 1
72901: ARRAY
72902: PUSH
72903: LD_VAR 0 2
72907: PUSH
72908: LD_INT 2
72910: ARRAY
72911: PUSH
72912: LD_INT 8
72914: PUSH
72915: EMPTY
72916: LIST
72917: LIST
72918: LIST
72919: LIST
72920: PUSH
72921: EMPTY
72922: LIST
72923: LIST
72924: PUSH
72925: EMPTY
72926: LIST
72927: LIST
72928: PPUSH
72929: CALL_OW 72
72933: ST_TO_ADDR
// if not vehicles then
72934: LD_VAR 0 1
72938: NOT
72939: IFFALSE 72943
// exit ;
72941: GO 72970
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
72943: LD_VAR 0 1
72947: PPUSH
72948: LD_VAR 0 2
72952: PUSH
72953: LD_INT 1
72955: ARRAY
72956: PPUSH
72957: LD_VAR 0 2
72961: PUSH
72962: LD_INT 2
72964: ARRAY
72965: PPUSH
72966: CALL_OW 111
// end ;
72970: LD_VAR 0 3
72974: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
72975: LD_INT 0
72977: PPUSH
72978: PPUSH
72979: PPUSH
// if not side or not area then
72980: LD_VAR 0 1
72984: NOT
72985: IFTRUE 72994
72987: PUSH
72988: LD_VAR 0 2
72992: NOT
72993: OR
72994: IFFALSE 72998
// exit ;
72996: GO 73117
// tmp := AreaToList ( area , 0 ) ;
72998: LD_ADDR_VAR 0 5
73002: PUSH
73003: LD_VAR 0 2
73007: PPUSH
73008: LD_INT 0
73010: PPUSH
73011: CALL_OW 517
73015: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
73016: LD_ADDR_VAR 0 4
73020: PUSH
73021: DOUBLE
73022: LD_INT 1
73024: DEC
73025: ST_TO_ADDR
73026: LD_VAR 0 5
73030: PUSH
73031: LD_INT 1
73033: ARRAY
73034: PUSH
73035: FOR_TO
73036: IFFALSE 73115
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
73038: LD_VAR 0 5
73042: PUSH
73043: LD_INT 1
73045: ARRAY
73046: PUSH
73047: LD_VAR 0 4
73051: ARRAY
73052: PPUSH
73053: LD_VAR 0 5
73057: PUSH
73058: LD_INT 2
73060: ARRAY
73061: PUSH
73062: LD_VAR 0 4
73066: ARRAY
73067: PPUSH
73068: CALL_OW 351
73072: IFFALSE 73113
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
73074: LD_VAR 0 5
73078: PUSH
73079: LD_INT 1
73081: ARRAY
73082: PUSH
73083: LD_VAR 0 4
73087: ARRAY
73088: PPUSH
73089: LD_VAR 0 5
73093: PUSH
73094: LD_INT 2
73096: ARRAY
73097: PUSH
73098: LD_VAR 0 4
73102: ARRAY
73103: PPUSH
73104: LD_VAR 0 1
73108: PPUSH
73109: CALL_OW 244
// end ;
73113: GO 73035
73115: POP
73116: POP
// end ;
73117: LD_VAR 0 3
73121: RET
// export function UniqueArray ( array ) ; var i ; begin
73122: LD_INT 0
73124: PPUSH
73125: PPUSH
// result := [ ] ;
73126: LD_ADDR_VAR 0 2
73130: PUSH
73131: EMPTY
73132: ST_TO_ADDR
// if not array then
73133: LD_VAR 0 1
73137: NOT
73138: IFFALSE 73142
// exit ;
73140: GO 73203
// for i := 1 to array do
73142: LD_ADDR_VAR 0 3
73146: PUSH
73147: DOUBLE
73148: LD_INT 1
73150: DEC
73151: ST_TO_ADDR
73152: LD_VAR 0 1
73156: PUSH
73157: FOR_TO
73158: IFFALSE 73201
// if not array [ i ] in result then
73160: LD_VAR 0 1
73164: PUSH
73165: LD_VAR 0 3
73169: ARRAY
73170: PUSH
73171: LD_VAR 0 2
73175: IN
73176: NOT
73177: IFFALSE 73199
// result := Join ( result , i ) ;
73179: LD_ADDR_VAR 0 2
73183: PUSH
73184: LD_VAR 0 2
73188: PPUSH
73189: LD_VAR 0 3
73193: PPUSH
73194: CALL 67854 0 2
73198: ST_TO_ADDR
73199: GO 73157
73201: POP
73202: POP
// end ; end_of_file end_of_file
73203: LD_VAR 0 2
73207: RET
// export globalGameSaveCounter ; every 0 0$1 do
73208: GO 73210
73210: DISABLE
// begin enable ;
73211: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
73212: LD_STRING updateTimer(
73214: PUSH
73215: LD_OWVAR 1
73219: STR
73220: PUSH
73221: LD_STRING );
73223: STR
73224: PPUSH
73225: CALL_OW 559
// end ;
73229: END
// every 0 0$1 do
73230: GO 73232
73232: DISABLE
// begin globalGameSaveCounter := 0 ;
73233: LD_ADDR_EXP 63
73237: PUSH
73238: LD_INT 0
73240: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
73241: LD_STRING setGameSaveCounter(0)
73243: PPUSH
73244: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
73248: LD_STRING initStreamRollete();
73250: PPUSH
73251: CALL_OW 559
// InitStreamMode ;
73255: CALL 74600 0 0
// DefineStreamItems ( false ) ;
73259: LD_INT 0
73261: PPUSH
73262: CALL 75064 0 1
// end ;
73266: END
// export function SOS_MapStart ( ) ; begin
73267: LD_INT 0
73269: PPUSH
// if streamModeActive then
73270: LD_EXP 64
73274: IFFALSE 73283
// DefineStreamItems ( true ) ;
73276: LD_INT 1
73278: PPUSH
73279: CALL 75064 0 1
// UpdateLuaVariables ( ) ;
73283: CALL 73300 0 0
// UpdateFactoryWaypoints ( ) ;
73287: CALL 88186 0 0
// UpdateWarehouseGatheringPoints ( ) ;
73291: CALL 88438 0 0
// end ;
73295: LD_VAR 0 1
73299: RET
// function UpdateLuaVariables ( ) ; begin
73300: LD_INT 0
73302: PPUSH
// if globalGameSaveCounter then
73303: LD_EXP 63
73307: IFFALSE 73341
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
73309: LD_ADDR_EXP 63
73313: PUSH
73314: LD_EXP 63
73318: PPUSH
73319: CALL 69227 0 1
73323: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
73324: LD_STRING setGameSaveCounter(
73326: PUSH
73327: LD_EXP 63
73331: STR
73332: PUSH
73333: LD_STRING )
73335: STR
73336: PPUSH
73337: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
73341: LD_STRING setGameDifficulty(
73343: PUSH
73344: LD_OWVAR 67
73348: STR
73349: PUSH
73350: LD_STRING )
73352: STR
73353: PPUSH
73354: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
73358: LD_STRING displayDifficulty(
73360: PUSH
73361: LD_OWVAR 67
73365: STR
73366: PUSH
73367: LD_STRING )
73369: STR
73370: PPUSH
73371: CALL_OW 559
// end ;
73375: LD_VAR 0 1
73379: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
73380: LD_INT 0
73382: PPUSH
// if p2 = stream_mode then
73383: LD_VAR 0 2
73387: PUSH
73388: LD_INT 100
73390: EQUAL
73391: IFFALSE 74394
// begin if not StreamModeActive then
73393: LD_EXP 64
73397: NOT
73398: IFFALSE 73408
// StreamModeActive := true ;
73400: LD_ADDR_EXP 64
73404: PUSH
73405: LD_INT 1
73407: ST_TO_ADDR
// if p3 = 0 then
73408: LD_VAR 0 3
73412: PUSH
73413: LD_INT 0
73415: EQUAL
73416: IFFALSE 73422
// InitStreamMode ;
73418: CALL 74600 0 0
// if p3 = 1 then
73422: LD_VAR 0 3
73426: PUSH
73427: LD_INT 1
73429: EQUAL
73430: IFFALSE 73440
// sRocket := true ;
73432: LD_ADDR_EXP 69
73436: PUSH
73437: LD_INT 1
73439: ST_TO_ADDR
// if p3 = 2 then
73440: LD_VAR 0 3
73444: PUSH
73445: LD_INT 2
73447: EQUAL
73448: IFFALSE 73458
// sSpeed := true ;
73450: LD_ADDR_EXP 68
73454: PUSH
73455: LD_INT 1
73457: ST_TO_ADDR
// if p3 = 3 then
73458: LD_VAR 0 3
73462: PUSH
73463: LD_INT 3
73465: EQUAL
73466: IFFALSE 73476
// sEngine := true ;
73468: LD_ADDR_EXP 70
73472: PUSH
73473: LD_INT 1
73475: ST_TO_ADDR
// if p3 = 4 then
73476: LD_VAR 0 3
73480: PUSH
73481: LD_INT 4
73483: EQUAL
73484: IFFALSE 73494
// sSpec := true ;
73486: LD_ADDR_EXP 67
73490: PUSH
73491: LD_INT 1
73493: ST_TO_ADDR
// if p3 = 5 then
73494: LD_VAR 0 3
73498: PUSH
73499: LD_INT 5
73501: EQUAL
73502: IFFALSE 73512
// sLevel := true ;
73504: LD_ADDR_EXP 71
73508: PUSH
73509: LD_INT 1
73511: ST_TO_ADDR
// if p3 = 6 then
73512: LD_VAR 0 3
73516: PUSH
73517: LD_INT 6
73519: EQUAL
73520: IFFALSE 73530
// sArmoury := true ;
73522: LD_ADDR_EXP 72
73526: PUSH
73527: LD_INT 1
73529: ST_TO_ADDR
// if p3 = 7 then
73530: LD_VAR 0 3
73534: PUSH
73535: LD_INT 7
73537: EQUAL
73538: IFFALSE 73548
// sRadar := true ;
73540: LD_ADDR_EXP 73
73544: PUSH
73545: LD_INT 1
73547: ST_TO_ADDR
// if p3 = 8 then
73548: LD_VAR 0 3
73552: PUSH
73553: LD_INT 8
73555: EQUAL
73556: IFFALSE 73566
// sBunker := true ;
73558: LD_ADDR_EXP 74
73562: PUSH
73563: LD_INT 1
73565: ST_TO_ADDR
// if p3 = 9 then
73566: LD_VAR 0 3
73570: PUSH
73571: LD_INT 9
73573: EQUAL
73574: IFFALSE 73584
// sHack := true ;
73576: LD_ADDR_EXP 75
73580: PUSH
73581: LD_INT 1
73583: ST_TO_ADDR
// if p3 = 10 then
73584: LD_VAR 0 3
73588: PUSH
73589: LD_INT 10
73591: EQUAL
73592: IFFALSE 73602
// sFire := true ;
73594: LD_ADDR_EXP 76
73598: PUSH
73599: LD_INT 1
73601: ST_TO_ADDR
// if p3 = 11 then
73602: LD_VAR 0 3
73606: PUSH
73607: LD_INT 11
73609: EQUAL
73610: IFFALSE 73620
// sRefresh := true ;
73612: LD_ADDR_EXP 77
73616: PUSH
73617: LD_INT 1
73619: ST_TO_ADDR
// if p3 = 12 then
73620: LD_VAR 0 3
73624: PUSH
73625: LD_INT 12
73627: EQUAL
73628: IFFALSE 73638
// sExp := true ;
73630: LD_ADDR_EXP 78
73634: PUSH
73635: LD_INT 1
73637: ST_TO_ADDR
// if p3 = 13 then
73638: LD_VAR 0 3
73642: PUSH
73643: LD_INT 13
73645: EQUAL
73646: IFFALSE 73656
// sDepot := true ;
73648: LD_ADDR_EXP 79
73652: PUSH
73653: LD_INT 1
73655: ST_TO_ADDR
// if p3 = 14 then
73656: LD_VAR 0 3
73660: PUSH
73661: LD_INT 14
73663: EQUAL
73664: IFFALSE 73674
// sFlag := true ;
73666: LD_ADDR_EXP 80
73670: PUSH
73671: LD_INT 1
73673: ST_TO_ADDR
// if p3 = 15 then
73674: LD_VAR 0 3
73678: PUSH
73679: LD_INT 15
73681: EQUAL
73682: IFFALSE 73692
// sKamikadze := true ;
73684: LD_ADDR_EXP 88
73688: PUSH
73689: LD_INT 1
73691: ST_TO_ADDR
// if p3 = 16 then
73692: LD_VAR 0 3
73696: PUSH
73697: LD_INT 16
73699: EQUAL
73700: IFFALSE 73710
// sTroll := true ;
73702: LD_ADDR_EXP 89
73706: PUSH
73707: LD_INT 1
73709: ST_TO_ADDR
// if p3 = 17 then
73710: LD_VAR 0 3
73714: PUSH
73715: LD_INT 17
73717: EQUAL
73718: IFFALSE 73728
// sSlow := true ;
73720: LD_ADDR_EXP 90
73724: PUSH
73725: LD_INT 1
73727: ST_TO_ADDR
// if p3 = 18 then
73728: LD_VAR 0 3
73732: PUSH
73733: LD_INT 18
73735: EQUAL
73736: IFFALSE 73746
// sLack := true ;
73738: LD_ADDR_EXP 91
73742: PUSH
73743: LD_INT 1
73745: ST_TO_ADDR
// if p3 = 19 then
73746: LD_VAR 0 3
73750: PUSH
73751: LD_INT 19
73753: EQUAL
73754: IFFALSE 73764
// sTank := true ;
73756: LD_ADDR_EXP 93
73760: PUSH
73761: LD_INT 1
73763: ST_TO_ADDR
// if p3 = 20 then
73764: LD_VAR 0 3
73768: PUSH
73769: LD_INT 20
73771: EQUAL
73772: IFFALSE 73782
// sRemote := true ;
73774: LD_ADDR_EXP 94
73778: PUSH
73779: LD_INT 1
73781: ST_TO_ADDR
// if p3 = 21 then
73782: LD_VAR 0 3
73786: PUSH
73787: LD_INT 21
73789: EQUAL
73790: IFFALSE 73800
// sPowell := true ;
73792: LD_ADDR_EXP 95
73796: PUSH
73797: LD_INT 1
73799: ST_TO_ADDR
// if p3 = 22 then
73800: LD_VAR 0 3
73804: PUSH
73805: LD_INT 22
73807: EQUAL
73808: IFFALSE 73818
// sTeleport := true ;
73810: LD_ADDR_EXP 98
73814: PUSH
73815: LD_INT 1
73817: ST_TO_ADDR
// if p3 = 23 then
73818: LD_VAR 0 3
73822: PUSH
73823: LD_INT 23
73825: EQUAL
73826: IFFALSE 73836
// sOilTower := true ;
73828: LD_ADDR_EXP 100
73832: PUSH
73833: LD_INT 1
73835: ST_TO_ADDR
// if p3 = 24 then
73836: LD_VAR 0 3
73840: PUSH
73841: LD_INT 24
73843: EQUAL
73844: IFFALSE 73854
// sShovel := true ;
73846: LD_ADDR_EXP 101
73850: PUSH
73851: LD_INT 1
73853: ST_TO_ADDR
// if p3 = 25 then
73854: LD_VAR 0 3
73858: PUSH
73859: LD_INT 25
73861: EQUAL
73862: IFFALSE 73872
// sSheik := true ;
73864: LD_ADDR_EXP 102
73868: PUSH
73869: LD_INT 1
73871: ST_TO_ADDR
// if p3 = 26 then
73872: LD_VAR 0 3
73876: PUSH
73877: LD_INT 26
73879: EQUAL
73880: IFFALSE 73890
// sEarthquake := true ;
73882: LD_ADDR_EXP 104
73886: PUSH
73887: LD_INT 1
73889: ST_TO_ADDR
// if p3 = 27 then
73890: LD_VAR 0 3
73894: PUSH
73895: LD_INT 27
73897: EQUAL
73898: IFFALSE 73908
// sAI := true ;
73900: LD_ADDR_EXP 105
73904: PUSH
73905: LD_INT 1
73907: ST_TO_ADDR
// if p3 = 28 then
73908: LD_VAR 0 3
73912: PUSH
73913: LD_INT 28
73915: EQUAL
73916: IFFALSE 73926
// sCargo := true ;
73918: LD_ADDR_EXP 108
73922: PUSH
73923: LD_INT 1
73925: ST_TO_ADDR
// if p3 = 29 then
73926: LD_VAR 0 3
73930: PUSH
73931: LD_INT 29
73933: EQUAL
73934: IFFALSE 73944
// sDLaser := true ;
73936: LD_ADDR_EXP 109
73940: PUSH
73941: LD_INT 1
73943: ST_TO_ADDR
// if p3 = 30 then
73944: LD_VAR 0 3
73948: PUSH
73949: LD_INT 30
73951: EQUAL
73952: IFFALSE 73962
// sExchange := true ;
73954: LD_ADDR_EXP 110
73958: PUSH
73959: LD_INT 1
73961: ST_TO_ADDR
// if p3 = 31 then
73962: LD_VAR 0 3
73966: PUSH
73967: LD_INT 31
73969: EQUAL
73970: IFFALSE 73980
// sFac := true ;
73972: LD_ADDR_EXP 111
73976: PUSH
73977: LD_INT 1
73979: ST_TO_ADDR
// if p3 = 32 then
73980: LD_VAR 0 3
73984: PUSH
73985: LD_INT 32
73987: EQUAL
73988: IFFALSE 73998
// sPower := true ;
73990: LD_ADDR_EXP 112
73994: PUSH
73995: LD_INT 1
73997: ST_TO_ADDR
// if p3 = 33 then
73998: LD_VAR 0 3
74002: PUSH
74003: LD_INT 33
74005: EQUAL
74006: IFFALSE 74016
// sRandom := true ;
74008: LD_ADDR_EXP 113
74012: PUSH
74013: LD_INT 1
74015: ST_TO_ADDR
// if p3 = 34 then
74016: LD_VAR 0 3
74020: PUSH
74021: LD_INT 34
74023: EQUAL
74024: IFFALSE 74034
// sShield := true ;
74026: LD_ADDR_EXP 114
74030: PUSH
74031: LD_INT 1
74033: ST_TO_ADDR
// if p3 = 35 then
74034: LD_VAR 0 3
74038: PUSH
74039: LD_INT 35
74041: EQUAL
74042: IFFALSE 74052
// sTime := true ;
74044: LD_ADDR_EXP 115
74048: PUSH
74049: LD_INT 1
74051: ST_TO_ADDR
// if p3 = 36 then
74052: LD_VAR 0 3
74056: PUSH
74057: LD_INT 36
74059: EQUAL
74060: IFFALSE 74070
// sTools := true ;
74062: LD_ADDR_EXP 116
74066: PUSH
74067: LD_INT 1
74069: ST_TO_ADDR
// if p3 = 101 then
74070: LD_VAR 0 3
74074: PUSH
74075: LD_INT 101
74077: EQUAL
74078: IFFALSE 74088
// sSold := true ;
74080: LD_ADDR_EXP 81
74084: PUSH
74085: LD_INT 1
74087: ST_TO_ADDR
// if p3 = 102 then
74088: LD_VAR 0 3
74092: PUSH
74093: LD_INT 102
74095: EQUAL
74096: IFFALSE 74106
// sDiff := true ;
74098: LD_ADDR_EXP 82
74102: PUSH
74103: LD_INT 1
74105: ST_TO_ADDR
// if p3 = 103 then
74106: LD_VAR 0 3
74110: PUSH
74111: LD_INT 103
74113: EQUAL
74114: IFFALSE 74124
// sFog := true ;
74116: LD_ADDR_EXP 85
74120: PUSH
74121: LD_INT 1
74123: ST_TO_ADDR
// if p3 = 104 then
74124: LD_VAR 0 3
74128: PUSH
74129: LD_INT 104
74131: EQUAL
74132: IFFALSE 74142
// sReset := true ;
74134: LD_ADDR_EXP 86
74138: PUSH
74139: LD_INT 1
74141: ST_TO_ADDR
// if p3 = 105 then
74142: LD_VAR 0 3
74146: PUSH
74147: LD_INT 105
74149: EQUAL
74150: IFFALSE 74160
// sSun := true ;
74152: LD_ADDR_EXP 87
74156: PUSH
74157: LD_INT 1
74159: ST_TO_ADDR
// if p3 = 106 then
74160: LD_VAR 0 3
74164: PUSH
74165: LD_INT 106
74167: EQUAL
74168: IFFALSE 74178
// sTiger := true ;
74170: LD_ADDR_EXP 83
74174: PUSH
74175: LD_INT 1
74177: ST_TO_ADDR
// if p3 = 107 then
74178: LD_VAR 0 3
74182: PUSH
74183: LD_INT 107
74185: EQUAL
74186: IFFALSE 74196
// sBomb := true ;
74188: LD_ADDR_EXP 84
74192: PUSH
74193: LD_INT 1
74195: ST_TO_ADDR
// if p3 = 108 then
74196: LD_VAR 0 3
74200: PUSH
74201: LD_INT 108
74203: EQUAL
74204: IFFALSE 74214
// sWound := true ;
74206: LD_ADDR_EXP 92
74210: PUSH
74211: LD_INT 1
74213: ST_TO_ADDR
// if p3 = 109 then
74214: LD_VAR 0 3
74218: PUSH
74219: LD_INT 109
74221: EQUAL
74222: IFFALSE 74232
// sBetray := true ;
74224: LD_ADDR_EXP 96
74228: PUSH
74229: LD_INT 1
74231: ST_TO_ADDR
// if p3 = 110 then
74232: LD_VAR 0 3
74236: PUSH
74237: LD_INT 110
74239: EQUAL
74240: IFFALSE 74250
// sContamin := true ;
74242: LD_ADDR_EXP 97
74246: PUSH
74247: LD_INT 1
74249: ST_TO_ADDR
// if p3 = 111 then
74250: LD_VAR 0 3
74254: PUSH
74255: LD_INT 111
74257: EQUAL
74258: IFFALSE 74268
// sOil := true ;
74260: LD_ADDR_EXP 99
74264: PUSH
74265: LD_INT 1
74267: ST_TO_ADDR
// if p3 = 112 then
74268: LD_VAR 0 3
74272: PUSH
74273: LD_INT 112
74275: EQUAL
74276: IFFALSE 74286
// sStu := true ;
74278: LD_ADDR_EXP 103
74282: PUSH
74283: LD_INT 1
74285: ST_TO_ADDR
// if p3 = 113 then
74286: LD_VAR 0 3
74290: PUSH
74291: LD_INT 113
74293: EQUAL
74294: IFFALSE 74304
// sBazooka := true ;
74296: LD_ADDR_EXP 106
74300: PUSH
74301: LD_INT 1
74303: ST_TO_ADDR
// if p3 = 114 then
74304: LD_VAR 0 3
74308: PUSH
74309: LD_INT 114
74311: EQUAL
74312: IFFALSE 74322
// sMortar := true ;
74314: LD_ADDR_EXP 107
74318: PUSH
74319: LD_INT 1
74321: ST_TO_ADDR
// if p3 = 115 then
74322: LD_VAR 0 3
74326: PUSH
74327: LD_INT 115
74329: EQUAL
74330: IFFALSE 74340
// sRanger := true ;
74332: LD_ADDR_EXP 117
74336: PUSH
74337: LD_INT 1
74339: ST_TO_ADDR
// if p3 = 116 then
74340: LD_VAR 0 3
74344: PUSH
74345: LD_INT 116
74347: EQUAL
74348: IFFALSE 74358
// sComputer := true ;
74350: LD_ADDR_EXP 118
74354: PUSH
74355: LD_INT 1
74357: ST_TO_ADDR
// if p3 = 117 then
74358: LD_VAR 0 3
74362: PUSH
74363: LD_INT 117
74365: EQUAL
74366: IFFALSE 74376
// s30 := true ;
74368: LD_ADDR_EXP 119
74372: PUSH
74373: LD_INT 1
74375: ST_TO_ADDR
// if p3 = 118 then
74376: LD_VAR 0 3
74380: PUSH
74381: LD_INT 118
74383: EQUAL
74384: IFFALSE 74394
// s60 := true ;
74386: LD_ADDR_EXP 120
74390: PUSH
74391: LD_INT 1
74393: ST_TO_ADDR
// end ; if p2 = hack_mode then
74394: LD_VAR 0 2
74398: PUSH
74399: LD_INT 101
74401: EQUAL
74402: IFFALSE 74530
// begin case p3 of 1 :
74404: LD_VAR 0 3
74408: PUSH
74409: LD_INT 1
74411: DOUBLE
74412: EQUAL
74413: IFTRUE 74417
74415: GO 74424
74417: POP
// hHackUnlimitedResources ; 2 :
74418: CALL 86793 0 0
74422: GO 74530
74424: LD_INT 2
74426: DOUBLE
74427: EQUAL
74428: IFTRUE 74432
74430: GO 74439
74432: POP
// hHackSetLevel10 ; 3 :
74433: CALL 86926 0 0
74437: GO 74530
74439: LD_INT 3
74441: DOUBLE
74442: EQUAL
74443: IFTRUE 74447
74445: GO 74454
74447: POP
// hHackSetLevel10YourUnits ; 4 :
74448: CALL 87011 0 0
74452: GO 74530
74454: LD_INT 4
74456: DOUBLE
74457: EQUAL
74458: IFTRUE 74462
74460: GO 74469
74462: POP
// hHackInvincible ; 5 :
74463: CALL 87459 0 0
74467: GO 74530
74469: LD_INT 5
74471: DOUBLE
74472: EQUAL
74473: IFTRUE 74477
74475: GO 74484
74477: POP
// hHackInvisible ; 6 :
74478: CALL 87570 0 0
74482: GO 74530
74484: LD_INT 6
74486: DOUBLE
74487: EQUAL
74488: IFTRUE 74492
74490: GO 74499
74492: POP
// hHackChangeYourSide ; 7 :
74493: CALL 87627 0 0
74497: GO 74530
74499: LD_INT 7
74501: DOUBLE
74502: EQUAL
74503: IFTRUE 74507
74505: GO 74514
74507: POP
// hHackChangeUnitSide ; 8 :
74508: CALL 87669 0 0
74512: GO 74530
74514: LD_INT 8
74516: DOUBLE
74517: EQUAL
74518: IFTRUE 74522
74520: GO 74529
74522: POP
// hHackFog ; end ;
74523: CALL 87770 0 0
74527: GO 74530
74529: POP
// end ; if p2 = game_save_mode then
74530: LD_VAR 0 2
74534: PUSH
74535: LD_INT 102
74537: EQUAL
74538: IFFALSE 74595
// begin if p3 = 1 then
74540: LD_VAR 0 3
74544: PUSH
74545: LD_INT 1
74547: EQUAL
74548: IFFALSE 74560
// globalGameSaveCounter := p4 ;
74550: LD_ADDR_EXP 63
74554: PUSH
74555: LD_VAR 0 4
74559: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
74560: LD_VAR 0 3
74564: PUSH
74565: LD_INT 2
74567: EQUAL
74568: IFFALSE 74576
74570: PUSH
74571: LD_EXP 63
74575: AND
74576: IFFALSE 74595
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
74578: LD_STRING setGameSaveCounter(
74580: PUSH
74581: LD_EXP 63
74585: STR
74586: PUSH
74587: LD_STRING )
74589: STR
74590: PPUSH
74591: CALL_OW 559
// end ; end ;
74595: LD_VAR 0 7
74599: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
74600: LD_INT 0
74602: PPUSH
// streamModeActive := false ;
74603: LD_ADDR_EXP 64
74607: PUSH
74608: LD_INT 0
74610: ST_TO_ADDR
// normalCounter := 36 ;
74611: LD_ADDR_EXP 65
74615: PUSH
74616: LD_INT 36
74618: ST_TO_ADDR
// hardcoreCounter := 18 ;
74619: LD_ADDR_EXP 66
74623: PUSH
74624: LD_INT 18
74626: ST_TO_ADDR
// sRocket := false ;
74627: LD_ADDR_EXP 69
74631: PUSH
74632: LD_INT 0
74634: ST_TO_ADDR
// sSpeed := false ;
74635: LD_ADDR_EXP 68
74639: PUSH
74640: LD_INT 0
74642: ST_TO_ADDR
// sEngine := false ;
74643: LD_ADDR_EXP 70
74647: PUSH
74648: LD_INT 0
74650: ST_TO_ADDR
// sSpec := false ;
74651: LD_ADDR_EXP 67
74655: PUSH
74656: LD_INT 0
74658: ST_TO_ADDR
// sLevel := false ;
74659: LD_ADDR_EXP 71
74663: PUSH
74664: LD_INT 0
74666: ST_TO_ADDR
// sArmoury := false ;
74667: LD_ADDR_EXP 72
74671: PUSH
74672: LD_INT 0
74674: ST_TO_ADDR
// sRadar := false ;
74675: LD_ADDR_EXP 73
74679: PUSH
74680: LD_INT 0
74682: ST_TO_ADDR
// sBunker := false ;
74683: LD_ADDR_EXP 74
74687: PUSH
74688: LD_INT 0
74690: ST_TO_ADDR
// sHack := false ;
74691: LD_ADDR_EXP 75
74695: PUSH
74696: LD_INT 0
74698: ST_TO_ADDR
// sFire := false ;
74699: LD_ADDR_EXP 76
74703: PUSH
74704: LD_INT 0
74706: ST_TO_ADDR
// sRefresh := false ;
74707: LD_ADDR_EXP 77
74711: PUSH
74712: LD_INT 0
74714: ST_TO_ADDR
// sExp := false ;
74715: LD_ADDR_EXP 78
74719: PUSH
74720: LD_INT 0
74722: ST_TO_ADDR
// sDepot := false ;
74723: LD_ADDR_EXP 79
74727: PUSH
74728: LD_INT 0
74730: ST_TO_ADDR
// sFlag := false ;
74731: LD_ADDR_EXP 80
74735: PUSH
74736: LD_INT 0
74738: ST_TO_ADDR
// sKamikadze := false ;
74739: LD_ADDR_EXP 88
74743: PUSH
74744: LD_INT 0
74746: ST_TO_ADDR
// sTroll := false ;
74747: LD_ADDR_EXP 89
74751: PUSH
74752: LD_INT 0
74754: ST_TO_ADDR
// sSlow := false ;
74755: LD_ADDR_EXP 90
74759: PUSH
74760: LD_INT 0
74762: ST_TO_ADDR
// sLack := false ;
74763: LD_ADDR_EXP 91
74767: PUSH
74768: LD_INT 0
74770: ST_TO_ADDR
// sTank := false ;
74771: LD_ADDR_EXP 93
74775: PUSH
74776: LD_INT 0
74778: ST_TO_ADDR
// sRemote := false ;
74779: LD_ADDR_EXP 94
74783: PUSH
74784: LD_INT 0
74786: ST_TO_ADDR
// sPowell := false ;
74787: LD_ADDR_EXP 95
74791: PUSH
74792: LD_INT 0
74794: ST_TO_ADDR
// sTeleport := false ;
74795: LD_ADDR_EXP 98
74799: PUSH
74800: LD_INT 0
74802: ST_TO_ADDR
// sOilTower := false ;
74803: LD_ADDR_EXP 100
74807: PUSH
74808: LD_INT 0
74810: ST_TO_ADDR
// sShovel := false ;
74811: LD_ADDR_EXP 101
74815: PUSH
74816: LD_INT 0
74818: ST_TO_ADDR
// sSheik := false ;
74819: LD_ADDR_EXP 102
74823: PUSH
74824: LD_INT 0
74826: ST_TO_ADDR
// sEarthquake := false ;
74827: LD_ADDR_EXP 104
74831: PUSH
74832: LD_INT 0
74834: ST_TO_ADDR
// sAI := false ;
74835: LD_ADDR_EXP 105
74839: PUSH
74840: LD_INT 0
74842: ST_TO_ADDR
// sCargo := false ;
74843: LD_ADDR_EXP 108
74847: PUSH
74848: LD_INT 0
74850: ST_TO_ADDR
// sDLaser := false ;
74851: LD_ADDR_EXP 109
74855: PUSH
74856: LD_INT 0
74858: ST_TO_ADDR
// sExchange := false ;
74859: LD_ADDR_EXP 110
74863: PUSH
74864: LD_INT 0
74866: ST_TO_ADDR
// sFac := false ;
74867: LD_ADDR_EXP 111
74871: PUSH
74872: LD_INT 0
74874: ST_TO_ADDR
// sPower := false ;
74875: LD_ADDR_EXP 112
74879: PUSH
74880: LD_INT 0
74882: ST_TO_ADDR
// sRandom := false ;
74883: LD_ADDR_EXP 113
74887: PUSH
74888: LD_INT 0
74890: ST_TO_ADDR
// sShield := false ;
74891: LD_ADDR_EXP 114
74895: PUSH
74896: LD_INT 0
74898: ST_TO_ADDR
// sTime := false ;
74899: LD_ADDR_EXP 115
74903: PUSH
74904: LD_INT 0
74906: ST_TO_ADDR
// sTools := false ;
74907: LD_ADDR_EXP 116
74911: PUSH
74912: LD_INT 0
74914: ST_TO_ADDR
// sSold := false ;
74915: LD_ADDR_EXP 81
74919: PUSH
74920: LD_INT 0
74922: ST_TO_ADDR
// sDiff := false ;
74923: LD_ADDR_EXP 82
74927: PUSH
74928: LD_INT 0
74930: ST_TO_ADDR
// sFog := false ;
74931: LD_ADDR_EXP 85
74935: PUSH
74936: LD_INT 0
74938: ST_TO_ADDR
// sReset := false ;
74939: LD_ADDR_EXP 86
74943: PUSH
74944: LD_INT 0
74946: ST_TO_ADDR
// sSun := false ;
74947: LD_ADDR_EXP 87
74951: PUSH
74952: LD_INT 0
74954: ST_TO_ADDR
// sTiger := false ;
74955: LD_ADDR_EXP 83
74959: PUSH
74960: LD_INT 0
74962: ST_TO_ADDR
// sBomb := false ;
74963: LD_ADDR_EXP 84
74967: PUSH
74968: LD_INT 0
74970: ST_TO_ADDR
// sWound := false ;
74971: LD_ADDR_EXP 92
74975: PUSH
74976: LD_INT 0
74978: ST_TO_ADDR
// sBetray := false ;
74979: LD_ADDR_EXP 96
74983: PUSH
74984: LD_INT 0
74986: ST_TO_ADDR
// sContamin := false ;
74987: LD_ADDR_EXP 97
74991: PUSH
74992: LD_INT 0
74994: ST_TO_ADDR
// sOil := false ;
74995: LD_ADDR_EXP 99
74999: PUSH
75000: LD_INT 0
75002: ST_TO_ADDR
// sStu := false ;
75003: LD_ADDR_EXP 103
75007: PUSH
75008: LD_INT 0
75010: ST_TO_ADDR
// sBazooka := false ;
75011: LD_ADDR_EXP 106
75015: PUSH
75016: LD_INT 0
75018: ST_TO_ADDR
// sMortar := false ;
75019: LD_ADDR_EXP 107
75023: PUSH
75024: LD_INT 0
75026: ST_TO_ADDR
// sRanger := false ;
75027: LD_ADDR_EXP 117
75031: PUSH
75032: LD_INT 0
75034: ST_TO_ADDR
// sComputer := false ;
75035: LD_ADDR_EXP 118
75039: PUSH
75040: LD_INT 0
75042: ST_TO_ADDR
// s30 := false ;
75043: LD_ADDR_EXP 119
75047: PUSH
75048: LD_INT 0
75050: ST_TO_ADDR
// s60 := false ;
75051: LD_ADDR_EXP 120
75055: PUSH
75056: LD_INT 0
75058: ST_TO_ADDR
// end ;
75059: LD_VAR 0 1
75063: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
75064: LD_INT 0
75066: PPUSH
75067: PPUSH
75068: PPUSH
75069: PPUSH
75070: PPUSH
75071: PPUSH
75072: PPUSH
// result := [ ] ;
75073: LD_ADDR_VAR 0 2
75077: PUSH
75078: EMPTY
75079: ST_TO_ADDR
// if campaign_id = 1 then
75080: LD_OWVAR 69
75084: PUSH
75085: LD_INT 1
75087: EQUAL
75088: IFFALSE 78254
// begin case mission_number of 1 :
75090: LD_OWVAR 70
75094: PUSH
75095: LD_INT 1
75097: DOUBLE
75098: EQUAL
75099: IFTRUE 75103
75101: GO 75179
75103: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
75104: LD_ADDR_VAR 0 2
75108: PUSH
75109: LD_INT 2
75111: PUSH
75112: LD_INT 4
75114: PUSH
75115: LD_INT 11
75117: PUSH
75118: LD_INT 12
75120: PUSH
75121: LD_INT 15
75123: PUSH
75124: LD_INT 16
75126: PUSH
75127: LD_INT 22
75129: PUSH
75130: LD_INT 23
75132: PUSH
75133: LD_INT 26
75135: PUSH
75136: EMPTY
75137: LIST
75138: LIST
75139: LIST
75140: LIST
75141: LIST
75142: LIST
75143: LIST
75144: LIST
75145: LIST
75146: PUSH
75147: LD_INT 101
75149: PUSH
75150: LD_INT 102
75152: PUSH
75153: LD_INT 106
75155: PUSH
75156: LD_INT 116
75158: PUSH
75159: LD_INT 117
75161: PUSH
75162: LD_INT 118
75164: PUSH
75165: EMPTY
75166: LIST
75167: LIST
75168: LIST
75169: LIST
75170: LIST
75171: LIST
75172: PUSH
75173: EMPTY
75174: LIST
75175: LIST
75176: ST_TO_ADDR
75177: GO 78252
75179: LD_INT 2
75181: DOUBLE
75182: EQUAL
75183: IFTRUE 75187
75185: GO 75271
75187: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
75188: LD_ADDR_VAR 0 2
75192: PUSH
75193: LD_INT 2
75195: PUSH
75196: LD_INT 4
75198: PUSH
75199: LD_INT 11
75201: PUSH
75202: LD_INT 12
75204: PUSH
75205: LD_INT 15
75207: PUSH
75208: LD_INT 16
75210: PUSH
75211: LD_INT 22
75213: PUSH
75214: LD_INT 23
75216: PUSH
75217: LD_INT 26
75219: PUSH
75220: EMPTY
75221: LIST
75222: LIST
75223: LIST
75224: LIST
75225: LIST
75226: LIST
75227: LIST
75228: LIST
75229: LIST
75230: PUSH
75231: LD_INT 101
75233: PUSH
75234: LD_INT 102
75236: PUSH
75237: LD_INT 105
75239: PUSH
75240: LD_INT 106
75242: PUSH
75243: LD_INT 108
75245: PUSH
75246: LD_INT 116
75248: PUSH
75249: LD_INT 117
75251: PUSH
75252: LD_INT 118
75254: PUSH
75255: EMPTY
75256: LIST
75257: LIST
75258: LIST
75259: LIST
75260: LIST
75261: LIST
75262: LIST
75263: LIST
75264: PUSH
75265: EMPTY
75266: LIST
75267: LIST
75268: ST_TO_ADDR
75269: GO 78252
75271: LD_INT 3
75273: DOUBLE
75274: EQUAL
75275: IFTRUE 75279
75277: GO 75367
75279: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
75280: LD_ADDR_VAR 0 2
75284: PUSH
75285: LD_INT 2
75287: PUSH
75288: LD_INT 4
75290: PUSH
75291: LD_INT 5
75293: PUSH
75294: LD_INT 11
75296: PUSH
75297: LD_INT 12
75299: PUSH
75300: LD_INT 15
75302: PUSH
75303: LD_INT 16
75305: PUSH
75306: LD_INT 22
75308: PUSH
75309: LD_INT 26
75311: PUSH
75312: LD_INT 36
75314: PUSH
75315: EMPTY
75316: LIST
75317: LIST
75318: LIST
75319: LIST
75320: LIST
75321: LIST
75322: LIST
75323: LIST
75324: LIST
75325: LIST
75326: PUSH
75327: LD_INT 101
75329: PUSH
75330: LD_INT 102
75332: PUSH
75333: LD_INT 105
75335: PUSH
75336: LD_INT 106
75338: PUSH
75339: LD_INT 108
75341: PUSH
75342: LD_INT 116
75344: PUSH
75345: LD_INT 117
75347: PUSH
75348: LD_INT 118
75350: PUSH
75351: EMPTY
75352: LIST
75353: LIST
75354: LIST
75355: LIST
75356: LIST
75357: LIST
75358: LIST
75359: LIST
75360: PUSH
75361: EMPTY
75362: LIST
75363: LIST
75364: ST_TO_ADDR
75365: GO 78252
75367: LD_INT 4
75369: DOUBLE
75370: EQUAL
75371: IFTRUE 75375
75373: GO 75471
75375: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
75376: LD_ADDR_VAR 0 2
75380: PUSH
75381: LD_INT 2
75383: PUSH
75384: LD_INT 4
75386: PUSH
75387: LD_INT 5
75389: PUSH
75390: LD_INT 8
75392: PUSH
75393: LD_INT 11
75395: PUSH
75396: LD_INT 12
75398: PUSH
75399: LD_INT 15
75401: PUSH
75402: LD_INT 16
75404: PUSH
75405: LD_INT 22
75407: PUSH
75408: LD_INT 23
75410: PUSH
75411: LD_INT 26
75413: PUSH
75414: LD_INT 36
75416: PUSH
75417: EMPTY
75418: LIST
75419: LIST
75420: LIST
75421: LIST
75422: LIST
75423: LIST
75424: LIST
75425: LIST
75426: LIST
75427: LIST
75428: LIST
75429: LIST
75430: PUSH
75431: LD_INT 101
75433: PUSH
75434: LD_INT 102
75436: PUSH
75437: LD_INT 105
75439: PUSH
75440: LD_INT 106
75442: PUSH
75443: LD_INT 108
75445: PUSH
75446: LD_INT 116
75448: PUSH
75449: LD_INT 117
75451: PUSH
75452: LD_INT 118
75454: PUSH
75455: EMPTY
75456: LIST
75457: LIST
75458: LIST
75459: LIST
75460: LIST
75461: LIST
75462: LIST
75463: LIST
75464: PUSH
75465: EMPTY
75466: LIST
75467: LIST
75468: ST_TO_ADDR
75469: GO 78252
75471: LD_INT 5
75473: DOUBLE
75474: EQUAL
75475: IFTRUE 75479
75477: GO 75591
75479: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
75480: LD_ADDR_VAR 0 2
75484: PUSH
75485: LD_INT 2
75487: PUSH
75488: LD_INT 4
75490: PUSH
75491: LD_INT 5
75493: PUSH
75494: LD_INT 6
75496: PUSH
75497: LD_INT 8
75499: PUSH
75500: LD_INT 11
75502: PUSH
75503: LD_INT 12
75505: PUSH
75506: LD_INT 15
75508: PUSH
75509: LD_INT 16
75511: PUSH
75512: LD_INT 22
75514: PUSH
75515: LD_INT 23
75517: PUSH
75518: LD_INT 25
75520: PUSH
75521: LD_INT 26
75523: PUSH
75524: LD_INT 36
75526: PUSH
75527: EMPTY
75528: LIST
75529: LIST
75530: LIST
75531: LIST
75532: LIST
75533: LIST
75534: LIST
75535: LIST
75536: LIST
75537: LIST
75538: LIST
75539: LIST
75540: LIST
75541: LIST
75542: PUSH
75543: LD_INT 101
75545: PUSH
75546: LD_INT 102
75548: PUSH
75549: LD_INT 105
75551: PUSH
75552: LD_INT 106
75554: PUSH
75555: LD_INT 108
75557: PUSH
75558: LD_INT 109
75560: PUSH
75561: LD_INT 112
75563: PUSH
75564: LD_INT 116
75566: PUSH
75567: LD_INT 117
75569: PUSH
75570: LD_INT 118
75572: PUSH
75573: EMPTY
75574: LIST
75575: LIST
75576: LIST
75577: LIST
75578: LIST
75579: LIST
75580: LIST
75581: LIST
75582: LIST
75583: LIST
75584: PUSH
75585: EMPTY
75586: LIST
75587: LIST
75588: ST_TO_ADDR
75589: GO 78252
75591: LD_INT 6
75593: DOUBLE
75594: EQUAL
75595: IFTRUE 75599
75597: GO 75731
75599: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
75600: LD_ADDR_VAR 0 2
75604: PUSH
75605: LD_INT 2
75607: PUSH
75608: LD_INT 4
75610: PUSH
75611: LD_INT 5
75613: PUSH
75614: LD_INT 6
75616: PUSH
75617: LD_INT 8
75619: PUSH
75620: LD_INT 11
75622: PUSH
75623: LD_INT 12
75625: PUSH
75626: LD_INT 15
75628: PUSH
75629: LD_INT 16
75631: PUSH
75632: LD_INT 20
75634: PUSH
75635: LD_INT 21
75637: PUSH
75638: LD_INT 22
75640: PUSH
75641: LD_INT 23
75643: PUSH
75644: LD_INT 25
75646: PUSH
75647: LD_INT 26
75649: PUSH
75650: LD_INT 30
75652: PUSH
75653: LD_INT 31
75655: PUSH
75656: LD_INT 32
75658: PUSH
75659: LD_INT 36
75661: PUSH
75662: EMPTY
75663: LIST
75664: LIST
75665: LIST
75666: LIST
75667: LIST
75668: LIST
75669: LIST
75670: LIST
75671: LIST
75672: LIST
75673: LIST
75674: LIST
75675: LIST
75676: LIST
75677: LIST
75678: LIST
75679: LIST
75680: LIST
75681: LIST
75682: PUSH
75683: LD_INT 101
75685: PUSH
75686: LD_INT 102
75688: PUSH
75689: LD_INT 105
75691: PUSH
75692: LD_INT 106
75694: PUSH
75695: LD_INT 108
75697: PUSH
75698: LD_INT 109
75700: PUSH
75701: LD_INT 112
75703: PUSH
75704: LD_INT 116
75706: PUSH
75707: LD_INT 117
75709: PUSH
75710: LD_INT 118
75712: PUSH
75713: EMPTY
75714: LIST
75715: LIST
75716: LIST
75717: LIST
75718: LIST
75719: LIST
75720: LIST
75721: LIST
75722: LIST
75723: LIST
75724: PUSH
75725: EMPTY
75726: LIST
75727: LIST
75728: ST_TO_ADDR
75729: GO 78252
75731: LD_INT 7
75733: DOUBLE
75734: EQUAL
75735: IFTRUE 75739
75737: GO 75851
75739: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
75740: LD_ADDR_VAR 0 2
75744: PUSH
75745: LD_INT 2
75747: PUSH
75748: LD_INT 4
75750: PUSH
75751: LD_INT 5
75753: PUSH
75754: LD_INT 7
75756: PUSH
75757: LD_INT 11
75759: PUSH
75760: LD_INT 12
75762: PUSH
75763: LD_INT 15
75765: PUSH
75766: LD_INT 16
75768: PUSH
75769: LD_INT 20
75771: PUSH
75772: LD_INT 21
75774: PUSH
75775: LD_INT 22
75777: PUSH
75778: LD_INT 23
75780: PUSH
75781: LD_INT 25
75783: PUSH
75784: LD_INT 26
75786: PUSH
75787: EMPTY
75788: LIST
75789: LIST
75790: LIST
75791: LIST
75792: LIST
75793: LIST
75794: LIST
75795: LIST
75796: LIST
75797: LIST
75798: LIST
75799: LIST
75800: LIST
75801: LIST
75802: PUSH
75803: LD_INT 101
75805: PUSH
75806: LD_INT 102
75808: PUSH
75809: LD_INT 103
75811: PUSH
75812: LD_INT 105
75814: PUSH
75815: LD_INT 106
75817: PUSH
75818: LD_INT 108
75820: PUSH
75821: LD_INT 112
75823: PUSH
75824: LD_INT 116
75826: PUSH
75827: LD_INT 117
75829: PUSH
75830: LD_INT 118
75832: PUSH
75833: EMPTY
75834: LIST
75835: LIST
75836: LIST
75837: LIST
75838: LIST
75839: LIST
75840: LIST
75841: LIST
75842: LIST
75843: LIST
75844: PUSH
75845: EMPTY
75846: LIST
75847: LIST
75848: ST_TO_ADDR
75849: GO 78252
75851: LD_INT 8
75853: DOUBLE
75854: EQUAL
75855: IFTRUE 75859
75857: GO 75999
75859: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
75860: LD_ADDR_VAR 0 2
75864: PUSH
75865: LD_INT 2
75867: PUSH
75868: LD_INT 4
75870: PUSH
75871: LD_INT 5
75873: PUSH
75874: LD_INT 6
75876: PUSH
75877: LD_INT 7
75879: PUSH
75880: LD_INT 8
75882: PUSH
75883: LD_INT 11
75885: PUSH
75886: LD_INT 12
75888: PUSH
75889: LD_INT 15
75891: PUSH
75892: LD_INT 16
75894: PUSH
75895: LD_INT 20
75897: PUSH
75898: LD_INT 21
75900: PUSH
75901: LD_INT 22
75903: PUSH
75904: LD_INT 23
75906: PUSH
75907: LD_INT 25
75909: PUSH
75910: LD_INT 26
75912: PUSH
75913: LD_INT 30
75915: PUSH
75916: LD_INT 31
75918: PUSH
75919: LD_INT 32
75921: PUSH
75922: LD_INT 36
75924: PUSH
75925: EMPTY
75926: LIST
75927: LIST
75928: LIST
75929: LIST
75930: LIST
75931: LIST
75932: LIST
75933: LIST
75934: LIST
75935: LIST
75936: LIST
75937: LIST
75938: LIST
75939: LIST
75940: LIST
75941: LIST
75942: LIST
75943: LIST
75944: LIST
75945: LIST
75946: PUSH
75947: LD_INT 101
75949: PUSH
75950: LD_INT 102
75952: PUSH
75953: LD_INT 103
75955: PUSH
75956: LD_INT 105
75958: PUSH
75959: LD_INT 106
75961: PUSH
75962: LD_INT 108
75964: PUSH
75965: LD_INT 109
75967: PUSH
75968: LD_INT 112
75970: PUSH
75971: LD_INT 116
75973: PUSH
75974: LD_INT 117
75976: PUSH
75977: LD_INT 118
75979: PUSH
75980: EMPTY
75981: LIST
75982: LIST
75983: LIST
75984: LIST
75985: LIST
75986: LIST
75987: LIST
75988: LIST
75989: LIST
75990: LIST
75991: LIST
75992: PUSH
75993: EMPTY
75994: LIST
75995: LIST
75996: ST_TO_ADDR
75997: GO 78252
75999: LD_INT 9
76001: DOUBLE
76002: EQUAL
76003: IFTRUE 76007
76005: GO 76155
76007: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
76008: LD_ADDR_VAR 0 2
76012: PUSH
76013: LD_INT 2
76015: PUSH
76016: LD_INT 4
76018: PUSH
76019: LD_INT 5
76021: PUSH
76022: LD_INT 6
76024: PUSH
76025: LD_INT 7
76027: PUSH
76028: LD_INT 8
76030: PUSH
76031: LD_INT 11
76033: PUSH
76034: LD_INT 12
76036: PUSH
76037: LD_INT 15
76039: PUSH
76040: LD_INT 16
76042: PUSH
76043: LD_INT 20
76045: PUSH
76046: LD_INT 21
76048: PUSH
76049: LD_INT 22
76051: PUSH
76052: LD_INT 23
76054: PUSH
76055: LD_INT 25
76057: PUSH
76058: LD_INT 26
76060: PUSH
76061: LD_INT 28
76063: PUSH
76064: LD_INT 30
76066: PUSH
76067: LD_INT 31
76069: PUSH
76070: LD_INT 32
76072: PUSH
76073: LD_INT 36
76075: PUSH
76076: EMPTY
76077: LIST
76078: LIST
76079: LIST
76080: LIST
76081: LIST
76082: LIST
76083: LIST
76084: LIST
76085: LIST
76086: LIST
76087: LIST
76088: LIST
76089: LIST
76090: LIST
76091: LIST
76092: LIST
76093: LIST
76094: LIST
76095: LIST
76096: LIST
76097: LIST
76098: PUSH
76099: LD_INT 101
76101: PUSH
76102: LD_INT 102
76104: PUSH
76105: LD_INT 103
76107: PUSH
76108: LD_INT 105
76110: PUSH
76111: LD_INT 106
76113: PUSH
76114: LD_INT 108
76116: PUSH
76117: LD_INT 109
76119: PUSH
76120: LD_INT 112
76122: PUSH
76123: LD_INT 114
76125: PUSH
76126: LD_INT 116
76128: PUSH
76129: LD_INT 117
76131: PUSH
76132: LD_INT 118
76134: PUSH
76135: EMPTY
76136: LIST
76137: LIST
76138: LIST
76139: LIST
76140: LIST
76141: LIST
76142: LIST
76143: LIST
76144: LIST
76145: LIST
76146: LIST
76147: LIST
76148: PUSH
76149: EMPTY
76150: LIST
76151: LIST
76152: ST_TO_ADDR
76153: GO 78252
76155: LD_INT 10
76157: DOUBLE
76158: EQUAL
76159: IFTRUE 76163
76161: GO 76359
76163: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
76164: LD_ADDR_VAR 0 2
76168: PUSH
76169: LD_INT 2
76171: PUSH
76172: LD_INT 4
76174: PUSH
76175: LD_INT 5
76177: PUSH
76178: LD_INT 6
76180: PUSH
76181: LD_INT 7
76183: PUSH
76184: LD_INT 8
76186: PUSH
76187: LD_INT 9
76189: PUSH
76190: LD_INT 10
76192: PUSH
76193: LD_INT 11
76195: PUSH
76196: LD_INT 12
76198: PUSH
76199: LD_INT 13
76201: PUSH
76202: LD_INT 14
76204: PUSH
76205: LD_INT 15
76207: PUSH
76208: LD_INT 16
76210: PUSH
76211: LD_INT 17
76213: PUSH
76214: LD_INT 18
76216: PUSH
76217: LD_INT 19
76219: PUSH
76220: LD_INT 20
76222: PUSH
76223: LD_INT 21
76225: PUSH
76226: LD_INT 22
76228: PUSH
76229: LD_INT 23
76231: PUSH
76232: LD_INT 24
76234: PUSH
76235: LD_INT 25
76237: PUSH
76238: LD_INT 26
76240: PUSH
76241: LD_INT 28
76243: PUSH
76244: LD_INT 30
76246: PUSH
76247: LD_INT 31
76249: PUSH
76250: LD_INT 32
76252: PUSH
76253: LD_INT 36
76255: PUSH
76256: EMPTY
76257: LIST
76258: LIST
76259: LIST
76260: LIST
76261: LIST
76262: LIST
76263: LIST
76264: LIST
76265: LIST
76266: LIST
76267: LIST
76268: LIST
76269: LIST
76270: LIST
76271: LIST
76272: LIST
76273: LIST
76274: LIST
76275: LIST
76276: LIST
76277: LIST
76278: LIST
76279: LIST
76280: LIST
76281: LIST
76282: LIST
76283: LIST
76284: LIST
76285: LIST
76286: PUSH
76287: LD_INT 101
76289: PUSH
76290: LD_INT 102
76292: PUSH
76293: LD_INT 103
76295: PUSH
76296: LD_INT 104
76298: PUSH
76299: LD_INT 105
76301: PUSH
76302: LD_INT 106
76304: PUSH
76305: LD_INT 107
76307: PUSH
76308: LD_INT 108
76310: PUSH
76311: LD_INT 109
76313: PUSH
76314: LD_INT 110
76316: PUSH
76317: LD_INT 111
76319: PUSH
76320: LD_INT 112
76322: PUSH
76323: LD_INT 114
76325: PUSH
76326: LD_INT 116
76328: PUSH
76329: LD_INT 117
76331: PUSH
76332: LD_INT 118
76334: PUSH
76335: EMPTY
76336: LIST
76337: LIST
76338: LIST
76339: LIST
76340: LIST
76341: LIST
76342: LIST
76343: LIST
76344: LIST
76345: LIST
76346: LIST
76347: LIST
76348: LIST
76349: LIST
76350: LIST
76351: LIST
76352: PUSH
76353: EMPTY
76354: LIST
76355: LIST
76356: ST_TO_ADDR
76357: GO 78252
76359: LD_INT 11
76361: DOUBLE
76362: EQUAL
76363: IFTRUE 76367
76365: GO 76571
76367: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
76368: LD_ADDR_VAR 0 2
76372: PUSH
76373: LD_INT 2
76375: PUSH
76376: LD_INT 3
76378: PUSH
76379: LD_INT 4
76381: PUSH
76382: LD_INT 5
76384: PUSH
76385: LD_INT 6
76387: PUSH
76388: LD_INT 7
76390: PUSH
76391: LD_INT 8
76393: PUSH
76394: LD_INT 9
76396: PUSH
76397: LD_INT 10
76399: PUSH
76400: LD_INT 11
76402: PUSH
76403: LD_INT 12
76405: PUSH
76406: LD_INT 13
76408: PUSH
76409: LD_INT 14
76411: PUSH
76412: LD_INT 15
76414: PUSH
76415: LD_INT 16
76417: PUSH
76418: LD_INT 17
76420: PUSH
76421: LD_INT 18
76423: PUSH
76424: LD_INT 19
76426: PUSH
76427: LD_INT 20
76429: PUSH
76430: LD_INT 21
76432: PUSH
76433: LD_INT 22
76435: PUSH
76436: LD_INT 23
76438: PUSH
76439: LD_INT 24
76441: PUSH
76442: LD_INT 25
76444: PUSH
76445: LD_INT 26
76447: PUSH
76448: LD_INT 28
76450: PUSH
76451: LD_INT 30
76453: PUSH
76454: LD_INT 31
76456: PUSH
76457: LD_INT 32
76459: PUSH
76460: LD_INT 34
76462: PUSH
76463: LD_INT 36
76465: PUSH
76466: EMPTY
76467: LIST
76468: LIST
76469: LIST
76470: LIST
76471: LIST
76472: LIST
76473: LIST
76474: LIST
76475: LIST
76476: LIST
76477: LIST
76478: LIST
76479: LIST
76480: LIST
76481: LIST
76482: LIST
76483: LIST
76484: LIST
76485: LIST
76486: LIST
76487: LIST
76488: LIST
76489: LIST
76490: LIST
76491: LIST
76492: LIST
76493: LIST
76494: LIST
76495: LIST
76496: LIST
76497: LIST
76498: PUSH
76499: LD_INT 101
76501: PUSH
76502: LD_INT 102
76504: PUSH
76505: LD_INT 103
76507: PUSH
76508: LD_INT 104
76510: PUSH
76511: LD_INT 105
76513: PUSH
76514: LD_INT 106
76516: PUSH
76517: LD_INT 107
76519: PUSH
76520: LD_INT 108
76522: PUSH
76523: LD_INT 109
76525: PUSH
76526: LD_INT 110
76528: PUSH
76529: LD_INT 111
76531: PUSH
76532: LD_INT 112
76534: PUSH
76535: LD_INT 114
76537: PUSH
76538: LD_INT 116
76540: PUSH
76541: LD_INT 117
76543: PUSH
76544: LD_INT 118
76546: PUSH
76547: EMPTY
76548: LIST
76549: LIST
76550: LIST
76551: LIST
76552: LIST
76553: LIST
76554: LIST
76555: LIST
76556: LIST
76557: LIST
76558: LIST
76559: LIST
76560: LIST
76561: LIST
76562: LIST
76563: LIST
76564: PUSH
76565: EMPTY
76566: LIST
76567: LIST
76568: ST_TO_ADDR
76569: GO 78252
76571: LD_INT 12
76573: DOUBLE
76574: EQUAL
76575: IFTRUE 76579
76577: GO 76799
76579: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
76580: LD_ADDR_VAR 0 2
76584: PUSH
76585: LD_INT 1
76587: PUSH
76588: LD_INT 2
76590: PUSH
76591: LD_INT 3
76593: PUSH
76594: LD_INT 4
76596: PUSH
76597: LD_INT 5
76599: PUSH
76600: LD_INT 6
76602: PUSH
76603: LD_INT 7
76605: PUSH
76606: LD_INT 8
76608: PUSH
76609: LD_INT 9
76611: PUSH
76612: LD_INT 10
76614: PUSH
76615: LD_INT 11
76617: PUSH
76618: LD_INT 12
76620: PUSH
76621: LD_INT 13
76623: PUSH
76624: LD_INT 14
76626: PUSH
76627: LD_INT 15
76629: PUSH
76630: LD_INT 16
76632: PUSH
76633: LD_INT 17
76635: PUSH
76636: LD_INT 18
76638: PUSH
76639: LD_INT 19
76641: PUSH
76642: LD_INT 20
76644: PUSH
76645: LD_INT 21
76647: PUSH
76648: LD_INT 22
76650: PUSH
76651: LD_INT 23
76653: PUSH
76654: LD_INT 24
76656: PUSH
76657: LD_INT 25
76659: PUSH
76660: LD_INT 26
76662: PUSH
76663: LD_INT 27
76665: PUSH
76666: LD_INT 28
76668: PUSH
76669: LD_INT 30
76671: PUSH
76672: LD_INT 31
76674: PUSH
76675: LD_INT 32
76677: PUSH
76678: LD_INT 33
76680: PUSH
76681: LD_INT 34
76683: PUSH
76684: LD_INT 36
76686: PUSH
76687: EMPTY
76688: LIST
76689: LIST
76690: LIST
76691: LIST
76692: LIST
76693: LIST
76694: LIST
76695: LIST
76696: LIST
76697: LIST
76698: LIST
76699: LIST
76700: LIST
76701: LIST
76702: LIST
76703: LIST
76704: LIST
76705: LIST
76706: LIST
76707: LIST
76708: LIST
76709: LIST
76710: LIST
76711: LIST
76712: LIST
76713: LIST
76714: LIST
76715: LIST
76716: LIST
76717: LIST
76718: LIST
76719: LIST
76720: LIST
76721: LIST
76722: PUSH
76723: LD_INT 101
76725: PUSH
76726: LD_INT 102
76728: PUSH
76729: LD_INT 103
76731: PUSH
76732: LD_INT 104
76734: PUSH
76735: LD_INT 105
76737: PUSH
76738: LD_INT 106
76740: PUSH
76741: LD_INT 107
76743: PUSH
76744: LD_INT 108
76746: PUSH
76747: LD_INT 109
76749: PUSH
76750: LD_INT 110
76752: PUSH
76753: LD_INT 111
76755: PUSH
76756: LD_INT 112
76758: PUSH
76759: LD_INT 113
76761: PUSH
76762: LD_INT 114
76764: PUSH
76765: LD_INT 116
76767: PUSH
76768: LD_INT 117
76770: PUSH
76771: LD_INT 118
76773: PUSH
76774: EMPTY
76775: LIST
76776: LIST
76777: LIST
76778: LIST
76779: LIST
76780: LIST
76781: LIST
76782: LIST
76783: LIST
76784: LIST
76785: LIST
76786: LIST
76787: LIST
76788: LIST
76789: LIST
76790: LIST
76791: LIST
76792: PUSH
76793: EMPTY
76794: LIST
76795: LIST
76796: ST_TO_ADDR
76797: GO 78252
76799: LD_INT 13
76801: DOUBLE
76802: EQUAL
76803: IFTRUE 76807
76805: GO 77015
76807: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
76808: LD_ADDR_VAR 0 2
76812: PUSH
76813: LD_INT 1
76815: PUSH
76816: LD_INT 2
76818: PUSH
76819: LD_INT 3
76821: PUSH
76822: LD_INT 4
76824: PUSH
76825: LD_INT 5
76827: PUSH
76828: LD_INT 8
76830: PUSH
76831: LD_INT 9
76833: PUSH
76834: LD_INT 10
76836: PUSH
76837: LD_INT 11
76839: PUSH
76840: LD_INT 12
76842: PUSH
76843: LD_INT 14
76845: PUSH
76846: LD_INT 15
76848: PUSH
76849: LD_INT 16
76851: PUSH
76852: LD_INT 17
76854: PUSH
76855: LD_INT 18
76857: PUSH
76858: LD_INT 19
76860: PUSH
76861: LD_INT 20
76863: PUSH
76864: LD_INT 21
76866: PUSH
76867: LD_INT 22
76869: PUSH
76870: LD_INT 23
76872: PUSH
76873: LD_INT 24
76875: PUSH
76876: LD_INT 25
76878: PUSH
76879: LD_INT 26
76881: PUSH
76882: LD_INT 27
76884: PUSH
76885: LD_INT 28
76887: PUSH
76888: LD_INT 30
76890: PUSH
76891: LD_INT 31
76893: PUSH
76894: LD_INT 32
76896: PUSH
76897: LD_INT 33
76899: PUSH
76900: LD_INT 34
76902: PUSH
76903: LD_INT 36
76905: PUSH
76906: EMPTY
76907: LIST
76908: LIST
76909: LIST
76910: LIST
76911: LIST
76912: LIST
76913: LIST
76914: LIST
76915: LIST
76916: LIST
76917: LIST
76918: LIST
76919: LIST
76920: LIST
76921: LIST
76922: LIST
76923: LIST
76924: LIST
76925: LIST
76926: LIST
76927: LIST
76928: LIST
76929: LIST
76930: LIST
76931: LIST
76932: LIST
76933: LIST
76934: LIST
76935: LIST
76936: LIST
76937: LIST
76938: PUSH
76939: LD_INT 101
76941: PUSH
76942: LD_INT 102
76944: PUSH
76945: LD_INT 103
76947: PUSH
76948: LD_INT 104
76950: PUSH
76951: LD_INT 105
76953: PUSH
76954: LD_INT 106
76956: PUSH
76957: LD_INT 107
76959: PUSH
76960: LD_INT 108
76962: PUSH
76963: LD_INT 109
76965: PUSH
76966: LD_INT 110
76968: PUSH
76969: LD_INT 111
76971: PUSH
76972: LD_INT 112
76974: PUSH
76975: LD_INT 113
76977: PUSH
76978: LD_INT 114
76980: PUSH
76981: LD_INT 116
76983: PUSH
76984: LD_INT 117
76986: PUSH
76987: LD_INT 118
76989: PUSH
76990: EMPTY
76991: LIST
76992: LIST
76993: LIST
76994: LIST
76995: LIST
76996: LIST
76997: LIST
76998: LIST
76999: LIST
77000: LIST
77001: LIST
77002: LIST
77003: LIST
77004: LIST
77005: LIST
77006: LIST
77007: LIST
77008: PUSH
77009: EMPTY
77010: LIST
77011: LIST
77012: ST_TO_ADDR
77013: GO 78252
77015: LD_INT 14
77017: DOUBLE
77018: EQUAL
77019: IFTRUE 77023
77021: GO 77247
77023: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
77024: LD_ADDR_VAR 0 2
77028: PUSH
77029: LD_INT 1
77031: PUSH
77032: LD_INT 2
77034: PUSH
77035: LD_INT 3
77037: PUSH
77038: LD_INT 4
77040: PUSH
77041: LD_INT 5
77043: PUSH
77044: LD_INT 6
77046: PUSH
77047: LD_INT 7
77049: PUSH
77050: LD_INT 8
77052: PUSH
77053: LD_INT 9
77055: PUSH
77056: LD_INT 10
77058: PUSH
77059: LD_INT 11
77061: PUSH
77062: LD_INT 12
77064: PUSH
77065: LD_INT 13
77067: PUSH
77068: LD_INT 14
77070: PUSH
77071: LD_INT 15
77073: PUSH
77074: LD_INT 16
77076: PUSH
77077: LD_INT 17
77079: PUSH
77080: LD_INT 18
77082: PUSH
77083: LD_INT 19
77085: PUSH
77086: LD_INT 20
77088: PUSH
77089: LD_INT 21
77091: PUSH
77092: LD_INT 22
77094: PUSH
77095: LD_INT 23
77097: PUSH
77098: LD_INT 24
77100: PUSH
77101: LD_INT 25
77103: PUSH
77104: LD_INT 26
77106: PUSH
77107: LD_INT 27
77109: PUSH
77110: LD_INT 28
77112: PUSH
77113: LD_INT 29
77115: PUSH
77116: LD_INT 30
77118: PUSH
77119: LD_INT 31
77121: PUSH
77122: LD_INT 32
77124: PUSH
77125: LD_INT 33
77127: PUSH
77128: LD_INT 34
77130: PUSH
77131: LD_INT 36
77133: PUSH
77134: EMPTY
77135: LIST
77136: LIST
77137: LIST
77138: LIST
77139: LIST
77140: LIST
77141: LIST
77142: LIST
77143: LIST
77144: LIST
77145: LIST
77146: LIST
77147: LIST
77148: LIST
77149: LIST
77150: LIST
77151: LIST
77152: LIST
77153: LIST
77154: LIST
77155: LIST
77156: LIST
77157: LIST
77158: LIST
77159: LIST
77160: LIST
77161: LIST
77162: LIST
77163: LIST
77164: LIST
77165: LIST
77166: LIST
77167: LIST
77168: LIST
77169: LIST
77170: PUSH
77171: LD_INT 101
77173: PUSH
77174: LD_INT 102
77176: PUSH
77177: LD_INT 103
77179: PUSH
77180: LD_INT 104
77182: PUSH
77183: LD_INT 105
77185: PUSH
77186: LD_INT 106
77188: PUSH
77189: LD_INT 107
77191: PUSH
77192: LD_INT 108
77194: PUSH
77195: LD_INT 109
77197: PUSH
77198: LD_INT 110
77200: PUSH
77201: LD_INT 111
77203: PUSH
77204: LD_INT 112
77206: PUSH
77207: LD_INT 113
77209: PUSH
77210: LD_INT 114
77212: PUSH
77213: LD_INT 116
77215: PUSH
77216: LD_INT 117
77218: PUSH
77219: LD_INT 118
77221: PUSH
77222: EMPTY
77223: LIST
77224: LIST
77225: LIST
77226: LIST
77227: LIST
77228: LIST
77229: LIST
77230: LIST
77231: LIST
77232: LIST
77233: LIST
77234: LIST
77235: LIST
77236: LIST
77237: LIST
77238: LIST
77239: LIST
77240: PUSH
77241: EMPTY
77242: LIST
77243: LIST
77244: ST_TO_ADDR
77245: GO 78252
77247: LD_INT 15
77249: DOUBLE
77250: EQUAL
77251: IFTRUE 77255
77253: GO 77479
77255: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
77256: LD_ADDR_VAR 0 2
77260: PUSH
77261: LD_INT 1
77263: PUSH
77264: LD_INT 2
77266: PUSH
77267: LD_INT 3
77269: PUSH
77270: LD_INT 4
77272: PUSH
77273: LD_INT 5
77275: PUSH
77276: LD_INT 6
77278: PUSH
77279: LD_INT 7
77281: PUSH
77282: LD_INT 8
77284: PUSH
77285: LD_INT 9
77287: PUSH
77288: LD_INT 10
77290: PUSH
77291: LD_INT 11
77293: PUSH
77294: LD_INT 12
77296: PUSH
77297: LD_INT 13
77299: PUSH
77300: LD_INT 14
77302: PUSH
77303: LD_INT 15
77305: PUSH
77306: LD_INT 16
77308: PUSH
77309: LD_INT 17
77311: PUSH
77312: LD_INT 18
77314: PUSH
77315: LD_INT 19
77317: PUSH
77318: LD_INT 20
77320: PUSH
77321: LD_INT 21
77323: PUSH
77324: LD_INT 22
77326: PUSH
77327: LD_INT 23
77329: PUSH
77330: LD_INT 24
77332: PUSH
77333: LD_INT 25
77335: PUSH
77336: LD_INT 26
77338: PUSH
77339: LD_INT 27
77341: PUSH
77342: LD_INT 28
77344: PUSH
77345: LD_INT 29
77347: PUSH
77348: LD_INT 30
77350: PUSH
77351: LD_INT 31
77353: PUSH
77354: LD_INT 32
77356: PUSH
77357: LD_INT 33
77359: PUSH
77360: LD_INT 34
77362: PUSH
77363: LD_INT 36
77365: PUSH
77366: EMPTY
77367: LIST
77368: LIST
77369: LIST
77370: LIST
77371: LIST
77372: LIST
77373: LIST
77374: LIST
77375: LIST
77376: LIST
77377: LIST
77378: LIST
77379: LIST
77380: LIST
77381: LIST
77382: LIST
77383: LIST
77384: LIST
77385: LIST
77386: LIST
77387: LIST
77388: LIST
77389: LIST
77390: LIST
77391: LIST
77392: LIST
77393: LIST
77394: LIST
77395: LIST
77396: LIST
77397: LIST
77398: LIST
77399: LIST
77400: LIST
77401: LIST
77402: PUSH
77403: LD_INT 101
77405: PUSH
77406: LD_INT 102
77408: PUSH
77409: LD_INT 103
77411: PUSH
77412: LD_INT 104
77414: PUSH
77415: LD_INT 105
77417: PUSH
77418: LD_INT 106
77420: PUSH
77421: LD_INT 107
77423: PUSH
77424: LD_INT 108
77426: PUSH
77427: LD_INT 109
77429: PUSH
77430: LD_INT 110
77432: PUSH
77433: LD_INT 111
77435: PUSH
77436: LD_INT 112
77438: PUSH
77439: LD_INT 113
77441: PUSH
77442: LD_INT 114
77444: PUSH
77445: LD_INT 116
77447: PUSH
77448: LD_INT 117
77450: PUSH
77451: LD_INT 118
77453: PUSH
77454: EMPTY
77455: LIST
77456: LIST
77457: LIST
77458: LIST
77459: LIST
77460: LIST
77461: LIST
77462: LIST
77463: LIST
77464: LIST
77465: LIST
77466: LIST
77467: LIST
77468: LIST
77469: LIST
77470: LIST
77471: LIST
77472: PUSH
77473: EMPTY
77474: LIST
77475: LIST
77476: ST_TO_ADDR
77477: GO 78252
77479: LD_INT 16
77481: DOUBLE
77482: EQUAL
77483: IFTRUE 77487
77485: GO 77623
77487: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
77488: LD_ADDR_VAR 0 2
77492: PUSH
77493: LD_INT 2
77495: PUSH
77496: LD_INT 4
77498: PUSH
77499: LD_INT 5
77501: PUSH
77502: LD_INT 7
77504: PUSH
77505: LD_INT 11
77507: PUSH
77508: LD_INT 12
77510: PUSH
77511: LD_INT 15
77513: PUSH
77514: LD_INT 16
77516: PUSH
77517: LD_INT 20
77519: PUSH
77520: LD_INT 21
77522: PUSH
77523: LD_INT 22
77525: PUSH
77526: LD_INT 23
77528: PUSH
77529: LD_INT 25
77531: PUSH
77532: LD_INT 26
77534: PUSH
77535: LD_INT 30
77537: PUSH
77538: LD_INT 31
77540: PUSH
77541: LD_INT 32
77543: PUSH
77544: LD_INT 33
77546: PUSH
77547: LD_INT 34
77549: PUSH
77550: EMPTY
77551: LIST
77552: LIST
77553: LIST
77554: LIST
77555: LIST
77556: LIST
77557: LIST
77558: LIST
77559: LIST
77560: LIST
77561: LIST
77562: LIST
77563: LIST
77564: LIST
77565: LIST
77566: LIST
77567: LIST
77568: LIST
77569: LIST
77570: PUSH
77571: LD_INT 101
77573: PUSH
77574: LD_INT 102
77576: PUSH
77577: LD_INT 103
77579: PUSH
77580: LD_INT 106
77582: PUSH
77583: LD_INT 108
77585: PUSH
77586: LD_INT 112
77588: PUSH
77589: LD_INT 113
77591: PUSH
77592: LD_INT 114
77594: PUSH
77595: LD_INT 116
77597: PUSH
77598: LD_INT 117
77600: PUSH
77601: LD_INT 118
77603: PUSH
77604: EMPTY
77605: LIST
77606: LIST
77607: LIST
77608: LIST
77609: LIST
77610: LIST
77611: LIST
77612: LIST
77613: LIST
77614: LIST
77615: LIST
77616: PUSH
77617: EMPTY
77618: LIST
77619: LIST
77620: ST_TO_ADDR
77621: GO 78252
77623: LD_INT 17
77625: DOUBLE
77626: EQUAL
77627: IFTRUE 77631
77629: GO 77855
77631: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
77632: LD_ADDR_VAR 0 2
77636: PUSH
77637: LD_INT 1
77639: PUSH
77640: LD_INT 2
77642: PUSH
77643: LD_INT 3
77645: PUSH
77646: LD_INT 4
77648: PUSH
77649: LD_INT 5
77651: PUSH
77652: LD_INT 6
77654: PUSH
77655: LD_INT 7
77657: PUSH
77658: LD_INT 8
77660: PUSH
77661: LD_INT 9
77663: PUSH
77664: LD_INT 10
77666: PUSH
77667: LD_INT 11
77669: PUSH
77670: LD_INT 12
77672: PUSH
77673: LD_INT 13
77675: PUSH
77676: LD_INT 14
77678: PUSH
77679: LD_INT 15
77681: PUSH
77682: LD_INT 16
77684: PUSH
77685: LD_INT 17
77687: PUSH
77688: LD_INT 18
77690: PUSH
77691: LD_INT 19
77693: PUSH
77694: LD_INT 20
77696: PUSH
77697: LD_INT 21
77699: PUSH
77700: LD_INT 22
77702: PUSH
77703: LD_INT 23
77705: PUSH
77706: LD_INT 24
77708: PUSH
77709: LD_INT 25
77711: PUSH
77712: LD_INT 26
77714: PUSH
77715: LD_INT 27
77717: PUSH
77718: LD_INT 28
77720: PUSH
77721: LD_INT 29
77723: PUSH
77724: LD_INT 30
77726: PUSH
77727: LD_INT 31
77729: PUSH
77730: LD_INT 32
77732: PUSH
77733: LD_INT 33
77735: PUSH
77736: LD_INT 34
77738: PUSH
77739: LD_INT 36
77741: PUSH
77742: EMPTY
77743: LIST
77744: LIST
77745: LIST
77746: LIST
77747: LIST
77748: LIST
77749: LIST
77750: LIST
77751: LIST
77752: LIST
77753: LIST
77754: LIST
77755: LIST
77756: LIST
77757: LIST
77758: LIST
77759: LIST
77760: LIST
77761: LIST
77762: LIST
77763: LIST
77764: LIST
77765: LIST
77766: LIST
77767: LIST
77768: LIST
77769: LIST
77770: LIST
77771: LIST
77772: LIST
77773: LIST
77774: LIST
77775: LIST
77776: LIST
77777: LIST
77778: PUSH
77779: LD_INT 101
77781: PUSH
77782: LD_INT 102
77784: PUSH
77785: LD_INT 103
77787: PUSH
77788: LD_INT 104
77790: PUSH
77791: LD_INT 105
77793: PUSH
77794: LD_INT 106
77796: PUSH
77797: LD_INT 107
77799: PUSH
77800: LD_INT 108
77802: PUSH
77803: LD_INT 109
77805: PUSH
77806: LD_INT 110
77808: PUSH
77809: LD_INT 111
77811: PUSH
77812: LD_INT 112
77814: PUSH
77815: LD_INT 113
77817: PUSH
77818: LD_INT 114
77820: PUSH
77821: LD_INT 116
77823: PUSH
77824: LD_INT 117
77826: PUSH
77827: LD_INT 118
77829: PUSH
77830: EMPTY
77831: LIST
77832: LIST
77833: LIST
77834: LIST
77835: LIST
77836: LIST
77837: LIST
77838: LIST
77839: LIST
77840: LIST
77841: LIST
77842: LIST
77843: LIST
77844: LIST
77845: LIST
77846: LIST
77847: LIST
77848: PUSH
77849: EMPTY
77850: LIST
77851: LIST
77852: ST_TO_ADDR
77853: GO 78252
77855: LD_INT 18
77857: DOUBLE
77858: EQUAL
77859: IFTRUE 77863
77861: GO 78011
77863: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
77864: LD_ADDR_VAR 0 2
77868: PUSH
77869: LD_INT 2
77871: PUSH
77872: LD_INT 4
77874: PUSH
77875: LD_INT 5
77877: PUSH
77878: LD_INT 7
77880: PUSH
77881: LD_INT 11
77883: PUSH
77884: LD_INT 12
77886: PUSH
77887: LD_INT 15
77889: PUSH
77890: LD_INT 16
77892: PUSH
77893: LD_INT 20
77895: PUSH
77896: LD_INT 21
77898: PUSH
77899: LD_INT 22
77901: PUSH
77902: LD_INT 23
77904: PUSH
77905: LD_INT 25
77907: PUSH
77908: LD_INT 26
77910: PUSH
77911: LD_INT 30
77913: PUSH
77914: LD_INT 31
77916: PUSH
77917: LD_INT 32
77919: PUSH
77920: LD_INT 33
77922: PUSH
77923: LD_INT 34
77925: PUSH
77926: LD_INT 35
77928: PUSH
77929: LD_INT 36
77931: PUSH
77932: EMPTY
77933: LIST
77934: LIST
77935: LIST
77936: LIST
77937: LIST
77938: LIST
77939: LIST
77940: LIST
77941: LIST
77942: LIST
77943: LIST
77944: LIST
77945: LIST
77946: LIST
77947: LIST
77948: LIST
77949: LIST
77950: LIST
77951: LIST
77952: LIST
77953: LIST
77954: PUSH
77955: LD_INT 101
77957: PUSH
77958: LD_INT 102
77960: PUSH
77961: LD_INT 103
77963: PUSH
77964: LD_INT 106
77966: PUSH
77967: LD_INT 108
77969: PUSH
77970: LD_INT 112
77972: PUSH
77973: LD_INT 113
77975: PUSH
77976: LD_INT 114
77978: PUSH
77979: LD_INT 115
77981: PUSH
77982: LD_INT 116
77984: PUSH
77985: LD_INT 117
77987: PUSH
77988: LD_INT 118
77990: PUSH
77991: EMPTY
77992: LIST
77993: LIST
77994: LIST
77995: LIST
77996: LIST
77997: LIST
77998: LIST
77999: LIST
78000: LIST
78001: LIST
78002: LIST
78003: LIST
78004: PUSH
78005: EMPTY
78006: LIST
78007: LIST
78008: ST_TO_ADDR
78009: GO 78252
78011: LD_INT 19
78013: DOUBLE
78014: EQUAL
78015: IFTRUE 78019
78017: GO 78251
78019: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
78020: LD_ADDR_VAR 0 2
78024: PUSH
78025: LD_INT 1
78027: PUSH
78028: LD_INT 2
78030: PUSH
78031: LD_INT 3
78033: PUSH
78034: LD_INT 4
78036: PUSH
78037: LD_INT 5
78039: PUSH
78040: LD_INT 6
78042: PUSH
78043: LD_INT 7
78045: PUSH
78046: LD_INT 8
78048: PUSH
78049: LD_INT 9
78051: PUSH
78052: LD_INT 10
78054: PUSH
78055: LD_INT 11
78057: PUSH
78058: LD_INT 12
78060: PUSH
78061: LD_INT 13
78063: PUSH
78064: LD_INT 14
78066: PUSH
78067: LD_INT 15
78069: PUSH
78070: LD_INT 16
78072: PUSH
78073: LD_INT 17
78075: PUSH
78076: LD_INT 18
78078: PUSH
78079: LD_INT 19
78081: PUSH
78082: LD_INT 20
78084: PUSH
78085: LD_INT 21
78087: PUSH
78088: LD_INT 22
78090: PUSH
78091: LD_INT 23
78093: PUSH
78094: LD_INT 24
78096: PUSH
78097: LD_INT 25
78099: PUSH
78100: LD_INT 26
78102: PUSH
78103: LD_INT 27
78105: PUSH
78106: LD_INT 28
78108: PUSH
78109: LD_INT 29
78111: PUSH
78112: LD_INT 30
78114: PUSH
78115: LD_INT 31
78117: PUSH
78118: LD_INT 32
78120: PUSH
78121: LD_INT 33
78123: PUSH
78124: LD_INT 34
78126: PUSH
78127: LD_INT 35
78129: PUSH
78130: LD_INT 36
78132: PUSH
78133: EMPTY
78134: LIST
78135: LIST
78136: LIST
78137: LIST
78138: LIST
78139: LIST
78140: LIST
78141: LIST
78142: LIST
78143: LIST
78144: LIST
78145: LIST
78146: LIST
78147: LIST
78148: LIST
78149: LIST
78150: LIST
78151: LIST
78152: LIST
78153: LIST
78154: LIST
78155: LIST
78156: LIST
78157: LIST
78158: LIST
78159: LIST
78160: LIST
78161: LIST
78162: LIST
78163: LIST
78164: LIST
78165: LIST
78166: LIST
78167: LIST
78168: LIST
78169: LIST
78170: PUSH
78171: LD_INT 101
78173: PUSH
78174: LD_INT 102
78176: PUSH
78177: LD_INT 103
78179: PUSH
78180: LD_INT 104
78182: PUSH
78183: LD_INT 105
78185: PUSH
78186: LD_INT 106
78188: PUSH
78189: LD_INT 107
78191: PUSH
78192: LD_INT 108
78194: PUSH
78195: LD_INT 109
78197: PUSH
78198: LD_INT 110
78200: PUSH
78201: LD_INT 111
78203: PUSH
78204: LD_INT 112
78206: PUSH
78207: LD_INT 113
78209: PUSH
78210: LD_INT 114
78212: PUSH
78213: LD_INT 115
78215: PUSH
78216: LD_INT 116
78218: PUSH
78219: LD_INT 117
78221: PUSH
78222: LD_INT 118
78224: PUSH
78225: EMPTY
78226: LIST
78227: LIST
78228: LIST
78229: LIST
78230: LIST
78231: LIST
78232: LIST
78233: LIST
78234: LIST
78235: LIST
78236: LIST
78237: LIST
78238: LIST
78239: LIST
78240: LIST
78241: LIST
78242: LIST
78243: LIST
78244: PUSH
78245: EMPTY
78246: LIST
78247: LIST
78248: ST_TO_ADDR
78249: GO 78252
78251: POP
// end else
78252: GO 78483
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
78254: LD_ADDR_VAR 0 2
78258: PUSH
78259: LD_INT 1
78261: PUSH
78262: LD_INT 2
78264: PUSH
78265: LD_INT 3
78267: PUSH
78268: LD_INT 4
78270: PUSH
78271: LD_INT 5
78273: PUSH
78274: LD_INT 6
78276: PUSH
78277: LD_INT 7
78279: PUSH
78280: LD_INT 8
78282: PUSH
78283: LD_INT 9
78285: PUSH
78286: LD_INT 10
78288: PUSH
78289: LD_INT 11
78291: PUSH
78292: LD_INT 12
78294: PUSH
78295: LD_INT 13
78297: PUSH
78298: LD_INT 14
78300: PUSH
78301: LD_INT 15
78303: PUSH
78304: LD_INT 16
78306: PUSH
78307: LD_INT 17
78309: PUSH
78310: LD_INT 18
78312: PUSH
78313: LD_INT 19
78315: PUSH
78316: LD_INT 20
78318: PUSH
78319: LD_INT 21
78321: PUSH
78322: LD_INT 22
78324: PUSH
78325: LD_INT 23
78327: PUSH
78328: LD_INT 24
78330: PUSH
78331: LD_INT 25
78333: PUSH
78334: LD_INT 26
78336: PUSH
78337: LD_INT 27
78339: PUSH
78340: LD_INT 28
78342: PUSH
78343: LD_INT 29
78345: PUSH
78346: LD_INT 30
78348: PUSH
78349: LD_INT 31
78351: PUSH
78352: LD_INT 32
78354: PUSH
78355: LD_INT 33
78357: PUSH
78358: LD_INT 34
78360: PUSH
78361: LD_INT 35
78363: PUSH
78364: LD_INT 36
78366: PUSH
78367: EMPTY
78368: LIST
78369: LIST
78370: LIST
78371: LIST
78372: LIST
78373: LIST
78374: LIST
78375: LIST
78376: LIST
78377: LIST
78378: LIST
78379: LIST
78380: LIST
78381: LIST
78382: LIST
78383: LIST
78384: LIST
78385: LIST
78386: LIST
78387: LIST
78388: LIST
78389: LIST
78390: LIST
78391: LIST
78392: LIST
78393: LIST
78394: LIST
78395: LIST
78396: LIST
78397: LIST
78398: LIST
78399: LIST
78400: LIST
78401: LIST
78402: LIST
78403: LIST
78404: PUSH
78405: LD_INT 101
78407: PUSH
78408: LD_INT 102
78410: PUSH
78411: LD_INT 103
78413: PUSH
78414: LD_INT 104
78416: PUSH
78417: LD_INT 105
78419: PUSH
78420: LD_INT 106
78422: PUSH
78423: LD_INT 107
78425: PUSH
78426: LD_INT 108
78428: PUSH
78429: LD_INT 109
78431: PUSH
78432: LD_INT 110
78434: PUSH
78435: LD_INT 111
78437: PUSH
78438: LD_INT 112
78440: PUSH
78441: LD_INT 113
78443: PUSH
78444: LD_INT 114
78446: PUSH
78447: LD_INT 115
78449: PUSH
78450: LD_INT 116
78452: PUSH
78453: LD_INT 117
78455: PUSH
78456: LD_INT 118
78458: PUSH
78459: EMPTY
78460: LIST
78461: LIST
78462: LIST
78463: LIST
78464: LIST
78465: LIST
78466: LIST
78467: LIST
78468: LIST
78469: LIST
78470: LIST
78471: LIST
78472: LIST
78473: LIST
78474: LIST
78475: LIST
78476: LIST
78477: LIST
78478: PUSH
78479: EMPTY
78480: LIST
78481: LIST
78482: ST_TO_ADDR
// if result then
78483: LD_VAR 0 2
78487: IFFALSE 79273
// begin normal :=  ;
78489: LD_ADDR_VAR 0 5
78493: PUSH
78494: LD_STRING 
78496: ST_TO_ADDR
// hardcore :=  ;
78497: LD_ADDR_VAR 0 6
78501: PUSH
78502: LD_STRING 
78504: ST_TO_ADDR
// active :=  ;
78505: LD_ADDR_VAR 0 7
78509: PUSH
78510: LD_STRING 
78512: ST_TO_ADDR
// for i = 1 to normalCounter do
78513: LD_ADDR_VAR 0 8
78517: PUSH
78518: DOUBLE
78519: LD_INT 1
78521: DEC
78522: ST_TO_ADDR
78523: LD_EXP 65
78527: PUSH
78528: FOR_TO
78529: IFFALSE 78630
// begin tmp := 0 ;
78531: LD_ADDR_VAR 0 3
78535: PUSH
78536: LD_STRING 0
78538: ST_TO_ADDR
// if result [ 1 ] then
78539: LD_VAR 0 2
78543: PUSH
78544: LD_INT 1
78546: ARRAY
78547: IFFALSE 78612
// if result [ 1 ] [ 1 ] = i then
78549: LD_VAR 0 2
78553: PUSH
78554: LD_INT 1
78556: ARRAY
78557: PUSH
78558: LD_INT 1
78560: ARRAY
78561: PUSH
78562: LD_VAR 0 8
78566: EQUAL
78567: IFFALSE 78612
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
78569: LD_ADDR_VAR 0 2
78573: PUSH
78574: LD_VAR 0 2
78578: PPUSH
78579: LD_INT 1
78581: PPUSH
78582: LD_VAR 0 2
78586: PUSH
78587: LD_INT 1
78589: ARRAY
78590: PPUSH
78591: LD_INT 1
78593: PPUSH
78594: CALL_OW 3
78598: PPUSH
78599: CALL_OW 1
78603: ST_TO_ADDR
// tmp := 1 ;
78604: LD_ADDR_VAR 0 3
78608: PUSH
78609: LD_STRING 1
78611: ST_TO_ADDR
// end ; normal := normal & tmp ;
78612: LD_ADDR_VAR 0 5
78616: PUSH
78617: LD_VAR 0 5
78621: PUSH
78622: LD_VAR 0 3
78626: STR
78627: ST_TO_ADDR
// end ;
78628: GO 78528
78630: POP
78631: POP
// for i = 1 to hardcoreCounter do
78632: LD_ADDR_VAR 0 8
78636: PUSH
78637: DOUBLE
78638: LD_INT 1
78640: DEC
78641: ST_TO_ADDR
78642: LD_EXP 66
78646: PUSH
78647: FOR_TO
78648: IFFALSE 78753
// begin tmp := 0 ;
78650: LD_ADDR_VAR 0 3
78654: PUSH
78655: LD_STRING 0
78657: ST_TO_ADDR
// if result [ 2 ] then
78658: LD_VAR 0 2
78662: PUSH
78663: LD_INT 2
78665: ARRAY
78666: IFFALSE 78735
// if result [ 2 ] [ 1 ] = 100 + i then
78668: LD_VAR 0 2
78672: PUSH
78673: LD_INT 2
78675: ARRAY
78676: PUSH
78677: LD_INT 1
78679: ARRAY
78680: PUSH
78681: LD_INT 100
78683: PUSH
78684: LD_VAR 0 8
78688: PLUS
78689: EQUAL
78690: IFFALSE 78735
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
78692: LD_ADDR_VAR 0 2
78696: PUSH
78697: LD_VAR 0 2
78701: PPUSH
78702: LD_INT 2
78704: PPUSH
78705: LD_VAR 0 2
78709: PUSH
78710: LD_INT 2
78712: ARRAY
78713: PPUSH
78714: LD_INT 1
78716: PPUSH
78717: CALL_OW 3
78721: PPUSH
78722: CALL_OW 1
78726: ST_TO_ADDR
// tmp := 1 ;
78727: LD_ADDR_VAR 0 3
78731: PUSH
78732: LD_STRING 1
78734: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
78735: LD_ADDR_VAR 0 6
78739: PUSH
78740: LD_VAR 0 6
78744: PUSH
78745: LD_VAR 0 3
78749: STR
78750: ST_TO_ADDR
// end ;
78751: GO 78647
78753: POP
78754: POP
// if isGameLoad then
78755: LD_VAR 0 1
78759: IFFALSE 79234
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
78761: LD_ADDR_VAR 0 4
78765: PUSH
78766: LD_EXP 69
78770: PUSH
78771: LD_EXP 68
78775: PUSH
78776: LD_EXP 70
78780: PUSH
78781: LD_EXP 67
78785: PUSH
78786: LD_EXP 71
78790: PUSH
78791: LD_EXP 72
78795: PUSH
78796: LD_EXP 73
78800: PUSH
78801: LD_EXP 74
78805: PUSH
78806: LD_EXP 75
78810: PUSH
78811: LD_EXP 76
78815: PUSH
78816: LD_EXP 77
78820: PUSH
78821: LD_EXP 78
78825: PUSH
78826: LD_EXP 79
78830: PUSH
78831: LD_EXP 80
78835: PUSH
78836: LD_EXP 88
78840: PUSH
78841: LD_EXP 89
78845: PUSH
78846: LD_EXP 90
78850: PUSH
78851: LD_EXP 91
78855: PUSH
78856: LD_EXP 93
78860: PUSH
78861: LD_EXP 94
78865: PUSH
78866: LD_EXP 95
78870: PUSH
78871: LD_EXP 98
78875: PUSH
78876: LD_EXP 100
78880: PUSH
78881: LD_EXP 101
78885: PUSH
78886: LD_EXP 102
78890: PUSH
78891: LD_EXP 104
78895: PUSH
78896: LD_EXP 105
78900: PUSH
78901: LD_EXP 108
78905: PUSH
78906: LD_EXP 109
78910: PUSH
78911: LD_EXP 110
78915: PUSH
78916: LD_EXP 111
78920: PUSH
78921: LD_EXP 112
78925: PUSH
78926: LD_EXP 113
78930: PUSH
78931: LD_EXP 114
78935: PUSH
78936: LD_EXP 115
78940: PUSH
78941: LD_EXP 116
78945: PUSH
78946: LD_EXP 81
78950: PUSH
78951: LD_EXP 82
78955: PUSH
78956: LD_EXP 85
78960: PUSH
78961: LD_EXP 86
78965: PUSH
78966: LD_EXP 87
78970: PUSH
78971: LD_EXP 83
78975: PUSH
78976: LD_EXP 84
78980: PUSH
78981: LD_EXP 92
78985: PUSH
78986: LD_EXP 96
78990: PUSH
78991: LD_EXP 97
78995: PUSH
78996: LD_EXP 99
79000: PUSH
79001: LD_EXP 103
79005: PUSH
79006: LD_EXP 106
79010: PUSH
79011: LD_EXP 107
79015: PUSH
79016: LD_EXP 117
79020: PUSH
79021: LD_EXP 118
79025: PUSH
79026: LD_EXP 119
79030: PUSH
79031: LD_EXP 120
79035: PUSH
79036: EMPTY
79037: LIST
79038: LIST
79039: LIST
79040: LIST
79041: LIST
79042: LIST
79043: LIST
79044: LIST
79045: LIST
79046: LIST
79047: LIST
79048: LIST
79049: LIST
79050: LIST
79051: LIST
79052: LIST
79053: LIST
79054: LIST
79055: LIST
79056: LIST
79057: LIST
79058: LIST
79059: LIST
79060: LIST
79061: LIST
79062: LIST
79063: LIST
79064: LIST
79065: LIST
79066: LIST
79067: LIST
79068: LIST
79069: LIST
79070: LIST
79071: LIST
79072: LIST
79073: LIST
79074: LIST
79075: LIST
79076: LIST
79077: LIST
79078: LIST
79079: LIST
79080: LIST
79081: LIST
79082: LIST
79083: LIST
79084: LIST
79085: LIST
79086: LIST
79087: LIST
79088: LIST
79089: LIST
79090: LIST
79091: ST_TO_ADDR
// tmp :=  ;
79092: LD_ADDR_VAR 0 3
79096: PUSH
79097: LD_STRING 
79099: ST_TO_ADDR
// for i = 1 to normalCounter do
79100: LD_ADDR_VAR 0 8
79104: PUSH
79105: DOUBLE
79106: LD_INT 1
79108: DEC
79109: ST_TO_ADDR
79110: LD_EXP 65
79114: PUSH
79115: FOR_TO
79116: IFFALSE 79152
// begin if flags [ i ] then
79118: LD_VAR 0 4
79122: PUSH
79123: LD_VAR 0 8
79127: ARRAY
79128: IFFALSE 79150
// tmp := tmp & i & ; ;
79130: LD_ADDR_VAR 0 3
79134: PUSH
79135: LD_VAR 0 3
79139: PUSH
79140: LD_VAR 0 8
79144: STR
79145: PUSH
79146: LD_STRING ;
79148: STR
79149: ST_TO_ADDR
// end ;
79150: GO 79115
79152: POP
79153: POP
// for i = 1 to hardcoreCounter do
79154: LD_ADDR_VAR 0 8
79158: PUSH
79159: DOUBLE
79160: LD_INT 1
79162: DEC
79163: ST_TO_ADDR
79164: LD_EXP 66
79168: PUSH
79169: FOR_TO
79170: IFFALSE 79216
// begin if flags [ normalCounter + i ] then
79172: LD_VAR 0 4
79176: PUSH
79177: LD_EXP 65
79181: PUSH
79182: LD_VAR 0 8
79186: PLUS
79187: ARRAY
79188: IFFALSE 79214
// tmp := tmp & ( 100 + i ) & ; ;
79190: LD_ADDR_VAR 0 3
79194: PUSH
79195: LD_VAR 0 3
79199: PUSH
79200: LD_INT 100
79202: PUSH
79203: LD_VAR 0 8
79207: PLUS
79208: STR
79209: PUSH
79210: LD_STRING ;
79212: STR
79213: ST_TO_ADDR
// end ;
79214: GO 79169
79216: POP
79217: POP
// if tmp then
79218: LD_VAR 0 3
79222: IFFALSE 79234
// active := tmp ;
79224: LD_ADDR_VAR 0 7
79228: PUSH
79229: LD_VAR 0 3
79233: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
79234: LD_STRING getStreamItemsFromMission("
79236: PUSH
79237: LD_VAR 0 5
79241: STR
79242: PUSH
79243: LD_STRING ","
79245: STR
79246: PUSH
79247: LD_VAR 0 6
79251: STR
79252: PUSH
79253: LD_STRING ","
79255: STR
79256: PUSH
79257: LD_VAR 0 7
79261: STR
79262: PUSH
79263: LD_STRING ")
79265: STR
79266: PPUSH
79267: CALL_OW 559
// end else
79271: GO 79280
// ToLua ( getStreamItemsFromMission("","","") ) ;
79273: LD_STRING getStreamItemsFromMission("","","")
79275: PPUSH
79276: CALL_OW 559
// end ;
79280: LD_VAR 0 2
79284: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
79285: LD_EXP 64
79289: IFFALSE 79297
79291: PUSH
79292: LD_EXP 69
79296: AND
79297: IFFALSE 79421
79299: GO 79301
79301: DISABLE
79302: LD_INT 0
79304: PPUSH
79305: PPUSH
// begin enable ;
79306: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
79307: LD_ADDR_VAR 0 2
79311: PUSH
79312: LD_INT 22
79314: PUSH
79315: LD_OWVAR 2
79319: PUSH
79320: EMPTY
79321: LIST
79322: LIST
79323: PUSH
79324: LD_INT 2
79326: PUSH
79327: LD_INT 34
79329: PUSH
79330: LD_INT 7
79332: PUSH
79333: EMPTY
79334: LIST
79335: LIST
79336: PUSH
79337: LD_INT 34
79339: PUSH
79340: LD_INT 45
79342: PUSH
79343: EMPTY
79344: LIST
79345: LIST
79346: PUSH
79347: LD_INT 34
79349: PUSH
79350: LD_INT 28
79352: PUSH
79353: EMPTY
79354: LIST
79355: LIST
79356: PUSH
79357: LD_INT 34
79359: PUSH
79360: LD_INT 47
79362: PUSH
79363: EMPTY
79364: LIST
79365: LIST
79366: PUSH
79367: EMPTY
79368: LIST
79369: LIST
79370: LIST
79371: LIST
79372: LIST
79373: PUSH
79374: EMPTY
79375: LIST
79376: LIST
79377: PPUSH
79378: CALL_OW 69
79382: ST_TO_ADDR
// if not tmp then
79383: LD_VAR 0 2
79387: NOT
79388: IFFALSE 79392
// exit ;
79390: GO 79421
// for i in tmp do
79392: LD_ADDR_VAR 0 1
79396: PUSH
79397: LD_VAR 0 2
79401: PUSH
79402: FOR_IN
79403: IFFALSE 79419
// begin SetLives ( i , 0 ) ;
79405: LD_VAR 0 1
79409: PPUSH
79410: LD_INT 0
79412: PPUSH
79413: CALL_OW 234
// end ;
79417: GO 79402
79419: POP
79420: POP
// end ;
79421: PPOPN 2
79423: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
79424: LD_EXP 64
79428: IFFALSE 79436
79430: PUSH
79431: LD_EXP 70
79435: AND
79436: IFFALSE 79520
79438: GO 79440
79440: DISABLE
79441: LD_INT 0
79443: PPUSH
79444: PPUSH
// begin enable ;
79445: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
79446: LD_ADDR_VAR 0 2
79450: PUSH
79451: LD_INT 22
79453: PUSH
79454: LD_OWVAR 2
79458: PUSH
79459: EMPTY
79460: LIST
79461: LIST
79462: PUSH
79463: LD_INT 32
79465: PUSH
79466: LD_INT 3
79468: PUSH
79469: EMPTY
79470: LIST
79471: LIST
79472: PUSH
79473: EMPTY
79474: LIST
79475: LIST
79476: PPUSH
79477: CALL_OW 69
79481: ST_TO_ADDR
// if not tmp then
79482: LD_VAR 0 2
79486: NOT
79487: IFFALSE 79491
// exit ;
79489: GO 79520
// for i in tmp do
79491: LD_ADDR_VAR 0 1
79495: PUSH
79496: LD_VAR 0 2
79500: PUSH
79501: FOR_IN
79502: IFFALSE 79518
// begin SetLives ( i , 0 ) ;
79504: LD_VAR 0 1
79508: PPUSH
79509: LD_INT 0
79511: PPUSH
79512: CALL_OW 234
// end ;
79516: GO 79501
79518: POP
79519: POP
// end ;
79520: PPOPN 2
79522: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
79523: LD_EXP 64
79527: IFFALSE 79535
79529: PUSH
79530: LD_EXP 67
79534: AND
79535: IFFALSE 79628
79537: GO 79539
79539: DISABLE
79540: LD_INT 0
79542: PPUSH
// begin enable ;
79543: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
79544: LD_ADDR_VAR 0 1
79548: PUSH
79549: LD_INT 22
79551: PUSH
79552: LD_OWVAR 2
79556: PUSH
79557: EMPTY
79558: LIST
79559: LIST
79560: PUSH
79561: LD_INT 2
79563: PUSH
79564: LD_INT 25
79566: PUSH
79567: LD_INT 5
79569: PUSH
79570: EMPTY
79571: LIST
79572: LIST
79573: PUSH
79574: LD_INT 25
79576: PUSH
79577: LD_INT 9
79579: PUSH
79580: EMPTY
79581: LIST
79582: LIST
79583: PUSH
79584: LD_INT 25
79586: PUSH
79587: LD_INT 8
79589: PUSH
79590: EMPTY
79591: LIST
79592: LIST
79593: PUSH
79594: EMPTY
79595: LIST
79596: LIST
79597: LIST
79598: LIST
79599: PUSH
79600: EMPTY
79601: LIST
79602: LIST
79603: PPUSH
79604: CALL_OW 69
79608: PUSH
79609: FOR_IN
79610: IFFALSE 79626
// begin SetClass ( i , 1 ) ;
79612: LD_VAR 0 1
79616: PPUSH
79617: LD_INT 1
79619: PPUSH
79620: CALL_OW 336
// end ;
79624: GO 79609
79626: POP
79627: POP
// end ;
79628: PPOPN 1
79630: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
79631: LD_EXP 64
79635: IFFALSE 79643
79637: PUSH
79638: LD_EXP 68
79642: AND
79643: IFFALSE 79655
79645: PUSH
79646: LD_OWVAR 65
79650: PUSH
79651: LD_INT 7
79653: LESS
79654: AND
79655: IFFALSE 79669
79657: GO 79659
79659: DISABLE
// begin enable ;
79660: ENABLE
// game_speed := 7 ;
79661: LD_ADDR_OWVAR 65
79665: PUSH
79666: LD_INT 7
79668: ST_TO_ADDR
// end ;
79669: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
79670: LD_EXP 64
79674: IFFALSE 79682
79676: PUSH
79677: LD_EXP 71
79681: AND
79682: IFFALSE 79884
79684: GO 79686
79686: DISABLE
79687: LD_INT 0
79689: PPUSH
79690: PPUSH
79691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
79692: LD_ADDR_VAR 0 3
79696: PUSH
79697: LD_INT 81
79699: PUSH
79700: LD_OWVAR 2
79704: PUSH
79705: EMPTY
79706: LIST
79707: LIST
79708: PUSH
79709: LD_INT 21
79711: PUSH
79712: LD_INT 1
79714: PUSH
79715: EMPTY
79716: LIST
79717: LIST
79718: PUSH
79719: EMPTY
79720: LIST
79721: LIST
79722: PPUSH
79723: CALL_OW 69
79727: ST_TO_ADDR
// if not tmp then
79728: LD_VAR 0 3
79732: NOT
79733: IFFALSE 79737
// exit ;
79735: GO 79884
// if tmp > 5 then
79737: LD_VAR 0 3
79741: PUSH
79742: LD_INT 5
79744: GREATER
79745: IFFALSE 79757
// k := 5 else
79747: LD_ADDR_VAR 0 2
79751: PUSH
79752: LD_INT 5
79754: ST_TO_ADDR
79755: GO 79767
// k := tmp ;
79757: LD_ADDR_VAR 0 2
79761: PUSH
79762: LD_VAR 0 3
79766: ST_TO_ADDR
// for i := 1 to k do
79767: LD_ADDR_VAR 0 1
79771: PUSH
79772: DOUBLE
79773: LD_INT 1
79775: DEC
79776: ST_TO_ADDR
79777: LD_VAR 0 2
79781: PUSH
79782: FOR_TO
79783: IFFALSE 79882
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
79785: LD_VAR 0 3
79789: PUSH
79790: LD_VAR 0 1
79794: ARRAY
79795: PPUSH
79796: LD_VAR 0 1
79800: PUSH
79801: LD_INT 4
79803: MOD
79804: PUSH
79805: LD_INT 1
79807: PLUS
79808: PPUSH
79809: CALL_OW 259
79813: PUSH
79814: LD_INT 10
79816: LESS
79817: IFFALSE 79880
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
79819: LD_VAR 0 3
79823: PUSH
79824: LD_VAR 0 1
79828: ARRAY
79829: PPUSH
79830: LD_VAR 0 1
79834: PUSH
79835: LD_INT 4
79837: MOD
79838: PUSH
79839: LD_INT 1
79841: PLUS
79842: PPUSH
79843: LD_VAR 0 3
79847: PUSH
79848: LD_VAR 0 1
79852: ARRAY
79853: PPUSH
79854: LD_VAR 0 1
79858: PUSH
79859: LD_INT 4
79861: MOD
79862: PUSH
79863: LD_INT 1
79865: PLUS
79866: PPUSH
79867: CALL_OW 259
79871: PUSH
79872: LD_INT 1
79874: PLUS
79875: PPUSH
79876: CALL_OW 237
79880: GO 79782
79882: POP
79883: POP
// end ;
79884: PPOPN 3
79886: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
79887: LD_EXP 64
79891: IFFALSE 79899
79893: PUSH
79894: LD_EXP 72
79898: AND
79899: IFFALSE 79919
79901: GO 79903
79903: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
79904: LD_INT 4
79906: PPUSH
79907: LD_OWVAR 2
79911: PPUSH
79912: LD_INT 0
79914: PPUSH
79915: CALL_OW 324
79919: END
// every 0 0$1 trigger StreamModeActive and sShovel do
79920: LD_EXP 64
79924: IFFALSE 79932
79926: PUSH
79927: LD_EXP 101
79931: AND
79932: IFFALSE 79952
79934: GO 79936
79936: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
79937: LD_INT 19
79939: PPUSH
79940: LD_OWVAR 2
79944: PPUSH
79945: LD_INT 0
79947: PPUSH
79948: CALL_OW 324
79952: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
79953: LD_EXP 64
79957: IFFALSE 79965
79959: PUSH
79960: LD_EXP 73
79964: AND
79965: IFFALSE 80067
79967: GO 79969
79969: DISABLE
79970: LD_INT 0
79972: PPUSH
79973: PPUSH
// begin enable ;
79974: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
79975: LD_ADDR_VAR 0 2
79979: PUSH
79980: LD_INT 22
79982: PUSH
79983: LD_OWVAR 2
79987: PUSH
79988: EMPTY
79989: LIST
79990: LIST
79991: PUSH
79992: LD_INT 2
79994: PUSH
79995: LD_INT 34
79997: PUSH
79998: LD_INT 11
80000: PUSH
80001: EMPTY
80002: LIST
80003: LIST
80004: PUSH
80005: LD_INT 34
80007: PUSH
80008: LD_INT 30
80010: PUSH
80011: EMPTY
80012: LIST
80013: LIST
80014: PUSH
80015: EMPTY
80016: LIST
80017: LIST
80018: LIST
80019: PUSH
80020: EMPTY
80021: LIST
80022: LIST
80023: PPUSH
80024: CALL_OW 69
80028: ST_TO_ADDR
// if not tmp then
80029: LD_VAR 0 2
80033: NOT
80034: IFFALSE 80038
// exit ;
80036: GO 80067
// for i in tmp do
80038: LD_ADDR_VAR 0 1
80042: PUSH
80043: LD_VAR 0 2
80047: PUSH
80048: FOR_IN
80049: IFFALSE 80065
// begin SetLives ( i , 0 ) ;
80051: LD_VAR 0 1
80055: PPUSH
80056: LD_INT 0
80058: PPUSH
80059: CALL_OW 234
// end ;
80063: GO 80048
80065: POP
80066: POP
// end ;
80067: PPOPN 2
80069: END
// every 0 0$1 trigger StreamModeActive and sBunker do
80070: LD_EXP 64
80074: IFFALSE 80082
80076: PUSH
80077: LD_EXP 74
80081: AND
80082: IFFALSE 80102
80084: GO 80086
80086: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
80087: LD_INT 32
80089: PPUSH
80090: LD_OWVAR 2
80094: PPUSH
80095: LD_INT 0
80097: PPUSH
80098: CALL_OW 324
80102: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
80103: LD_EXP 64
80107: IFFALSE 80115
80109: PUSH
80110: LD_EXP 75
80114: AND
80115: IFFALSE 80298
80117: GO 80119
80119: DISABLE
80120: LD_INT 0
80122: PPUSH
80123: PPUSH
80124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
80125: LD_ADDR_VAR 0 2
80129: PUSH
80130: LD_INT 22
80132: PUSH
80133: LD_OWVAR 2
80137: PUSH
80138: EMPTY
80139: LIST
80140: LIST
80141: PUSH
80142: LD_INT 33
80144: PUSH
80145: LD_INT 3
80147: PUSH
80148: EMPTY
80149: LIST
80150: LIST
80151: PUSH
80152: EMPTY
80153: LIST
80154: LIST
80155: PPUSH
80156: CALL_OW 69
80160: ST_TO_ADDR
// if not tmp then
80161: LD_VAR 0 2
80165: NOT
80166: IFFALSE 80170
// exit ;
80168: GO 80298
// side := 0 ;
80170: LD_ADDR_VAR 0 3
80174: PUSH
80175: LD_INT 0
80177: ST_TO_ADDR
// for i := 1 to 8 do
80178: LD_ADDR_VAR 0 1
80182: PUSH
80183: DOUBLE
80184: LD_INT 1
80186: DEC
80187: ST_TO_ADDR
80188: LD_INT 8
80190: PUSH
80191: FOR_TO
80192: IFFALSE 80242
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
80194: LD_OWVAR 2
80198: PUSH
80199: LD_VAR 0 1
80203: NONEQUAL
80204: IFFALSE 80226
80206: PUSH
80207: LD_OWVAR 2
80211: PPUSH
80212: LD_VAR 0 1
80216: PPUSH
80217: CALL_OW 81
80221: PUSH
80222: LD_INT 2
80224: EQUAL
80225: AND
80226: IFFALSE 80240
// begin side := i ;
80228: LD_ADDR_VAR 0 3
80232: PUSH
80233: LD_VAR 0 1
80237: ST_TO_ADDR
// break ;
80238: GO 80242
// end ;
80240: GO 80191
80242: POP
80243: POP
// if not side then
80244: LD_VAR 0 3
80248: NOT
80249: IFFALSE 80253
// exit ;
80251: GO 80298
// for i := 1 to tmp do
80253: LD_ADDR_VAR 0 1
80257: PUSH
80258: DOUBLE
80259: LD_INT 1
80261: DEC
80262: ST_TO_ADDR
80263: LD_VAR 0 2
80267: PUSH
80268: FOR_TO
80269: IFFALSE 80296
// if Prob ( 60 ) then
80271: LD_INT 60
80273: PPUSH
80274: CALL_OW 13
80278: IFFALSE 80294
// SetSide ( i , side ) ;
80280: LD_VAR 0 1
80284: PPUSH
80285: LD_VAR 0 3
80289: PPUSH
80290: CALL_OW 235
80294: GO 80268
80296: POP
80297: POP
// end ;
80298: PPOPN 3
80300: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
80301: LD_EXP 64
80305: IFFALSE 80313
80307: PUSH
80308: LD_EXP 77
80312: AND
80313: IFFALSE 80432
80315: GO 80317
80317: DISABLE
80318: LD_INT 0
80320: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
80321: LD_ADDR_VAR 0 1
80325: PUSH
80326: LD_INT 22
80328: PUSH
80329: LD_OWVAR 2
80333: PUSH
80334: EMPTY
80335: LIST
80336: LIST
80337: PUSH
80338: LD_INT 21
80340: PUSH
80341: LD_INT 1
80343: PUSH
80344: EMPTY
80345: LIST
80346: LIST
80347: PUSH
80348: LD_INT 3
80350: PUSH
80351: LD_INT 23
80353: PUSH
80354: LD_INT 0
80356: PUSH
80357: EMPTY
80358: LIST
80359: LIST
80360: PUSH
80361: EMPTY
80362: LIST
80363: LIST
80364: PUSH
80365: EMPTY
80366: LIST
80367: LIST
80368: LIST
80369: PPUSH
80370: CALL_OW 69
80374: PUSH
80375: FOR_IN
80376: IFFALSE 80430
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
80378: LD_VAR 0 1
80382: PPUSH
80383: CALL_OW 257
80387: PUSH
80388: LD_INT 1
80390: PUSH
80391: LD_INT 2
80393: PUSH
80394: LD_INT 3
80396: PUSH
80397: LD_INT 4
80399: PUSH
80400: EMPTY
80401: LIST
80402: LIST
80403: LIST
80404: LIST
80405: IN
80406: IFFALSE 80428
// SetClass ( un , rand ( 1 , 4 ) ) ;
80408: LD_VAR 0 1
80412: PPUSH
80413: LD_INT 1
80415: PPUSH
80416: LD_INT 4
80418: PPUSH
80419: CALL_OW 12
80423: PPUSH
80424: CALL_OW 336
80428: GO 80375
80430: POP
80431: POP
// end ;
80432: PPOPN 1
80434: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
80435: LD_EXP 64
80439: IFFALSE 80447
80441: PUSH
80442: LD_EXP 76
80446: AND
80447: IFFALSE 80526
80449: GO 80451
80451: DISABLE
80452: LD_INT 0
80454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
80455: LD_ADDR_VAR 0 1
80459: PUSH
80460: LD_INT 22
80462: PUSH
80463: LD_OWVAR 2
80467: PUSH
80468: EMPTY
80469: LIST
80470: LIST
80471: PUSH
80472: LD_INT 21
80474: PUSH
80475: LD_INT 3
80477: PUSH
80478: EMPTY
80479: LIST
80480: LIST
80481: PUSH
80482: EMPTY
80483: LIST
80484: LIST
80485: PPUSH
80486: CALL_OW 69
80490: ST_TO_ADDR
// if not tmp then
80491: LD_VAR 0 1
80495: NOT
80496: IFFALSE 80500
// exit ;
80498: GO 80526
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
80500: LD_VAR 0 1
80504: PUSH
80505: LD_INT 1
80507: PPUSH
80508: LD_VAR 0 1
80512: PPUSH
80513: CALL_OW 12
80517: ARRAY
80518: PPUSH
80519: LD_INT 100
80521: PPUSH
80522: CALL_OW 234
// end ;
80526: PPOPN 1
80528: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
80529: LD_EXP 64
80533: IFFALSE 80541
80535: PUSH
80536: LD_EXP 78
80540: AND
80541: IFFALSE 80639
80543: GO 80545
80545: DISABLE
80546: LD_INT 0
80548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
80549: LD_ADDR_VAR 0 1
80553: PUSH
80554: LD_INT 22
80556: PUSH
80557: LD_OWVAR 2
80561: PUSH
80562: EMPTY
80563: LIST
80564: LIST
80565: PUSH
80566: LD_INT 21
80568: PUSH
80569: LD_INT 1
80571: PUSH
80572: EMPTY
80573: LIST
80574: LIST
80575: PUSH
80576: EMPTY
80577: LIST
80578: LIST
80579: PPUSH
80580: CALL_OW 69
80584: ST_TO_ADDR
// if not tmp then
80585: LD_VAR 0 1
80589: NOT
80590: IFFALSE 80594
// exit ;
80592: GO 80639
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
80594: LD_VAR 0 1
80598: PUSH
80599: LD_INT 1
80601: PPUSH
80602: LD_VAR 0 1
80606: PPUSH
80607: CALL_OW 12
80611: ARRAY
80612: PPUSH
80613: LD_INT 1
80615: PPUSH
80616: LD_INT 4
80618: PPUSH
80619: CALL_OW 12
80623: PPUSH
80624: LD_INT 3000
80626: PPUSH
80627: LD_INT 9000
80629: PPUSH
80630: CALL_OW 12
80634: PPUSH
80635: CALL_OW 492
// end ;
80639: PPOPN 1
80641: END
// every 0 0$1 trigger StreamModeActive and sDepot do
80642: LD_EXP 64
80646: IFFALSE 80654
80648: PUSH
80649: LD_EXP 79
80653: AND
80654: IFFALSE 80674
80656: GO 80658
80658: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
80659: LD_INT 1
80661: PPUSH
80662: LD_OWVAR 2
80666: PPUSH
80667: LD_INT 0
80669: PPUSH
80670: CALL_OW 324
80674: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
80675: LD_EXP 64
80679: IFFALSE 80687
80681: PUSH
80682: LD_EXP 80
80686: AND
80687: IFFALSE 80770
80689: GO 80691
80691: DISABLE
80692: LD_INT 0
80694: PPUSH
80695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
80696: LD_ADDR_VAR 0 2
80700: PUSH
80701: LD_INT 22
80703: PUSH
80704: LD_OWVAR 2
80708: PUSH
80709: EMPTY
80710: LIST
80711: LIST
80712: PUSH
80713: LD_INT 21
80715: PUSH
80716: LD_INT 3
80718: PUSH
80719: EMPTY
80720: LIST
80721: LIST
80722: PUSH
80723: EMPTY
80724: LIST
80725: LIST
80726: PPUSH
80727: CALL_OW 69
80731: ST_TO_ADDR
// if not tmp then
80732: LD_VAR 0 2
80736: NOT
80737: IFFALSE 80741
// exit ;
80739: GO 80770
// for i in tmp do
80741: LD_ADDR_VAR 0 1
80745: PUSH
80746: LD_VAR 0 2
80750: PUSH
80751: FOR_IN
80752: IFFALSE 80768
// SetBLevel ( i , 10 ) ;
80754: LD_VAR 0 1
80758: PPUSH
80759: LD_INT 10
80761: PPUSH
80762: CALL_OW 241
80766: GO 80751
80768: POP
80769: POP
// end ;
80770: PPOPN 2
80772: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
80773: LD_EXP 64
80777: IFFALSE 80785
80779: PUSH
80780: LD_EXP 81
80784: AND
80785: IFFALSE 80896
80787: GO 80789
80789: DISABLE
80790: LD_INT 0
80792: PPUSH
80793: PPUSH
80794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
80795: LD_ADDR_VAR 0 3
80799: PUSH
80800: LD_INT 22
80802: PUSH
80803: LD_OWVAR 2
80807: PUSH
80808: EMPTY
80809: LIST
80810: LIST
80811: PUSH
80812: LD_INT 25
80814: PUSH
80815: LD_INT 1
80817: PUSH
80818: EMPTY
80819: LIST
80820: LIST
80821: PUSH
80822: EMPTY
80823: LIST
80824: LIST
80825: PPUSH
80826: CALL_OW 69
80830: ST_TO_ADDR
// if not tmp then
80831: LD_VAR 0 3
80835: NOT
80836: IFFALSE 80840
// exit ;
80838: GO 80896
// un := tmp [ rand ( 1 , tmp ) ] ;
80840: LD_ADDR_VAR 0 2
80844: PUSH
80845: LD_VAR 0 3
80849: PUSH
80850: LD_INT 1
80852: PPUSH
80853: LD_VAR 0 3
80857: PPUSH
80858: CALL_OW 12
80862: ARRAY
80863: ST_TO_ADDR
// if Crawls ( un ) then
80864: LD_VAR 0 2
80868: PPUSH
80869: CALL_OW 318
80873: IFFALSE 80884
// ComWalk ( un ) ;
80875: LD_VAR 0 2
80879: PPUSH
80880: CALL_OW 138
// SetClass ( un , class_sniper ) ;
80884: LD_VAR 0 2
80888: PPUSH
80889: LD_INT 5
80891: PPUSH
80892: CALL_OW 336
// end ;
80896: PPOPN 3
80898: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
80899: LD_EXP 64
80903: IFFALSE 80911
80905: PUSH
80906: LD_EXP 82
80910: AND
80911: IFFALSE 80923
80913: PUSH
80914: LD_OWVAR 67
80918: PUSH
80919: LD_INT 4
80921: LESS
80922: AND
80923: IFFALSE 80942
80925: GO 80927
80927: DISABLE
// begin Difficulty := Difficulty + 1 ;
80928: LD_ADDR_OWVAR 67
80932: PUSH
80933: LD_OWVAR 67
80937: PUSH
80938: LD_INT 1
80940: PLUS
80941: ST_TO_ADDR
// end ;
80942: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
80943: LD_EXP 64
80947: IFFALSE 80955
80949: PUSH
80950: LD_EXP 83
80954: AND
80955: IFFALSE 81058
80957: GO 80959
80959: DISABLE
80960: LD_INT 0
80962: PPUSH
// begin for i := 1 to 5 do
80963: LD_ADDR_VAR 0 1
80967: PUSH
80968: DOUBLE
80969: LD_INT 1
80971: DEC
80972: ST_TO_ADDR
80973: LD_INT 5
80975: PUSH
80976: FOR_TO
80977: IFFALSE 81056
// begin uc_nation := nation_nature ;
80979: LD_ADDR_OWVAR 21
80983: PUSH
80984: LD_INT 0
80986: ST_TO_ADDR
// uc_side := 0 ;
80987: LD_ADDR_OWVAR 20
80991: PUSH
80992: LD_INT 0
80994: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
80995: LD_ADDR_OWVAR 29
80999: PUSH
81000: LD_INT 12
81002: PUSH
81003: LD_INT 12
81005: PUSH
81006: EMPTY
81007: LIST
81008: LIST
81009: ST_TO_ADDR
// hc_agressivity := 20 ;
81010: LD_ADDR_OWVAR 35
81014: PUSH
81015: LD_INT 20
81017: ST_TO_ADDR
// hc_class := class_tiger ;
81018: LD_ADDR_OWVAR 28
81022: PUSH
81023: LD_INT 14
81025: ST_TO_ADDR
// hc_gallery :=  ;
81026: LD_ADDR_OWVAR 33
81030: PUSH
81031: LD_STRING 
81033: ST_TO_ADDR
// hc_name :=  ;
81034: LD_ADDR_OWVAR 26
81038: PUSH
81039: LD_STRING 
81041: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
81042: CALL_OW 44
81046: PPUSH
81047: LD_INT 0
81049: PPUSH
81050: CALL_OW 51
// end ;
81054: GO 80976
81056: POP
81057: POP
// end ;
81058: PPOPN 1
81060: END
// every 0 0$1 trigger StreamModeActive and sBomb do
81061: LD_EXP 64
81065: IFFALSE 81073
81067: PUSH
81068: LD_EXP 84
81072: AND
81073: IFFALSE 81082
81075: GO 81077
81077: DISABLE
// StreamSibBomb ;
81078: CALL 81083 0 0
81082: END
// export function StreamSibBomb ; var i , x , y ; begin
81083: LD_INT 0
81085: PPUSH
81086: PPUSH
81087: PPUSH
81088: PPUSH
// result := false ;
81089: LD_ADDR_VAR 0 1
81093: PUSH
81094: LD_INT 0
81096: ST_TO_ADDR
// for i := 1 to 16 do
81097: LD_ADDR_VAR 0 2
81101: PUSH
81102: DOUBLE
81103: LD_INT 1
81105: DEC
81106: ST_TO_ADDR
81107: LD_INT 16
81109: PUSH
81110: FOR_TO
81111: IFFALSE 81310
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
81113: LD_ADDR_VAR 0 3
81117: PUSH
81118: LD_INT 10
81120: PUSH
81121: LD_INT 20
81123: PUSH
81124: LD_INT 30
81126: PUSH
81127: LD_INT 40
81129: PUSH
81130: LD_INT 50
81132: PUSH
81133: LD_INT 60
81135: PUSH
81136: LD_INT 70
81138: PUSH
81139: LD_INT 80
81141: PUSH
81142: LD_INT 90
81144: PUSH
81145: LD_INT 100
81147: PUSH
81148: LD_INT 110
81150: PUSH
81151: LD_INT 120
81153: PUSH
81154: LD_INT 130
81156: PUSH
81157: LD_INT 140
81159: PUSH
81160: LD_INT 150
81162: PUSH
81163: EMPTY
81164: LIST
81165: LIST
81166: LIST
81167: LIST
81168: LIST
81169: LIST
81170: LIST
81171: LIST
81172: LIST
81173: LIST
81174: LIST
81175: LIST
81176: LIST
81177: LIST
81178: LIST
81179: PUSH
81180: LD_INT 1
81182: PPUSH
81183: LD_INT 15
81185: PPUSH
81186: CALL_OW 12
81190: ARRAY
81191: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
81192: LD_ADDR_VAR 0 4
81196: PUSH
81197: LD_INT 10
81199: PUSH
81200: LD_INT 20
81202: PUSH
81203: LD_INT 30
81205: PUSH
81206: LD_INT 40
81208: PUSH
81209: LD_INT 50
81211: PUSH
81212: LD_INT 60
81214: PUSH
81215: LD_INT 70
81217: PUSH
81218: LD_INT 80
81220: PUSH
81221: LD_INT 90
81223: PUSH
81224: LD_INT 100
81226: PUSH
81227: LD_INT 110
81229: PUSH
81230: LD_INT 120
81232: PUSH
81233: LD_INT 130
81235: PUSH
81236: LD_INT 140
81238: PUSH
81239: LD_INT 150
81241: PUSH
81242: EMPTY
81243: LIST
81244: LIST
81245: LIST
81246: LIST
81247: LIST
81248: LIST
81249: LIST
81250: LIST
81251: LIST
81252: LIST
81253: LIST
81254: LIST
81255: LIST
81256: LIST
81257: LIST
81258: PUSH
81259: LD_INT 1
81261: PPUSH
81262: LD_INT 15
81264: PPUSH
81265: CALL_OW 12
81269: ARRAY
81270: ST_TO_ADDR
// if ValidHex ( x , y ) then
81271: LD_VAR 0 3
81275: PPUSH
81276: LD_VAR 0 4
81280: PPUSH
81281: CALL_OW 488
81285: IFFALSE 81308
// begin result := [ x , y ] ;
81287: LD_ADDR_VAR 0 1
81291: PUSH
81292: LD_VAR 0 3
81296: PUSH
81297: LD_VAR 0 4
81301: PUSH
81302: EMPTY
81303: LIST
81304: LIST
81305: ST_TO_ADDR
// break ;
81306: GO 81310
// end ; end ;
81308: GO 81110
81310: POP
81311: POP
// if result then
81312: LD_VAR 0 1
81316: IFFALSE 81376
// begin ToLua ( playSibBomb() ) ;
81318: LD_STRING playSibBomb()
81320: PPUSH
81321: CALL_OW 559
// wait ( 0 0$14 ) ;
81325: LD_INT 490
81327: PPUSH
81328: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
81332: LD_VAR 0 1
81336: PUSH
81337: LD_INT 1
81339: ARRAY
81340: PPUSH
81341: LD_VAR 0 1
81345: PUSH
81346: LD_INT 2
81348: ARRAY
81349: PPUSH
81350: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
81354: LD_VAR 0 1
81358: PUSH
81359: LD_INT 1
81361: ARRAY
81362: PPUSH
81363: LD_VAR 0 1
81367: PUSH
81368: LD_INT 2
81370: ARRAY
81371: PPUSH
81372: CALL_OW 429
// end ; end ;
81376: LD_VAR 0 1
81380: RET
// every 0 0$1 trigger StreamModeActive and sReset do
81381: LD_EXP 64
81385: IFFALSE 81393
81387: PUSH
81388: LD_EXP 86
81392: AND
81393: IFFALSE 81405
81395: GO 81397
81397: DISABLE
// YouLost (  ) ;
81398: LD_STRING 
81400: PPUSH
81401: CALL_OW 104
81405: END
// every 0 0$1 trigger StreamModeActive and sFog do
81406: LD_EXP 64
81410: IFFALSE 81418
81412: PUSH
81413: LD_EXP 85
81417: AND
81418: IFFALSE 81432
81420: GO 81422
81422: DISABLE
// FogOff ( your_side ) ;
81423: LD_OWVAR 2
81427: PPUSH
81428: CALL_OW 344
81432: END
// every 0 0$1 trigger StreamModeActive and sSun do
81433: LD_EXP 64
81437: IFFALSE 81445
81439: PUSH
81440: LD_EXP 87
81444: AND
81445: IFFALSE 81473
81447: GO 81449
81449: DISABLE
// begin solar_recharge_percent := 0 ;
81450: LD_ADDR_OWVAR 79
81454: PUSH
81455: LD_INT 0
81457: ST_TO_ADDR
// wait ( 5 5$00 ) ;
81458: LD_INT 10500
81460: PPUSH
81461: CALL_OW 67
// solar_recharge_percent := 100 ;
81465: LD_ADDR_OWVAR 79
81469: PUSH
81470: LD_INT 100
81472: ST_TO_ADDR
// end ;
81473: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
81474: LD_EXP 64
81478: IFFALSE 81486
81480: PUSH
81481: LD_EXP 88
81485: AND
81486: IFFALSE 81725
81488: GO 81490
81490: DISABLE
81491: LD_INT 0
81493: PPUSH
81494: PPUSH
81495: PPUSH
// begin tmp := [ ] ;
81496: LD_ADDR_VAR 0 3
81500: PUSH
81501: EMPTY
81502: ST_TO_ADDR
// for i := 1 to 6 do
81503: LD_ADDR_VAR 0 1
81507: PUSH
81508: DOUBLE
81509: LD_INT 1
81511: DEC
81512: ST_TO_ADDR
81513: LD_INT 6
81515: PUSH
81516: FOR_TO
81517: IFFALSE 81622
// begin uc_nation := nation_nature ;
81519: LD_ADDR_OWVAR 21
81523: PUSH
81524: LD_INT 0
81526: ST_TO_ADDR
// uc_side := 0 ;
81527: LD_ADDR_OWVAR 20
81531: PUSH
81532: LD_INT 0
81534: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
81535: LD_ADDR_OWVAR 29
81539: PUSH
81540: LD_INT 12
81542: PUSH
81543: LD_INT 12
81545: PUSH
81546: EMPTY
81547: LIST
81548: LIST
81549: ST_TO_ADDR
// hc_agressivity := 20 ;
81550: LD_ADDR_OWVAR 35
81554: PUSH
81555: LD_INT 20
81557: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
81558: LD_ADDR_OWVAR 28
81562: PUSH
81563: LD_INT 17
81565: ST_TO_ADDR
// hc_gallery :=  ;
81566: LD_ADDR_OWVAR 33
81570: PUSH
81571: LD_STRING 
81573: ST_TO_ADDR
// hc_name :=  ;
81574: LD_ADDR_OWVAR 26
81578: PUSH
81579: LD_STRING 
81581: ST_TO_ADDR
// un := CreateHuman ;
81582: LD_ADDR_VAR 0 2
81586: PUSH
81587: CALL_OW 44
81591: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
81592: LD_VAR 0 2
81596: PPUSH
81597: LD_INT 1
81599: PPUSH
81600: CALL_OW 51
// tmp := tmp ^ un ;
81604: LD_ADDR_VAR 0 3
81608: PUSH
81609: LD_VAR 0 3
81613: PUSH
81614: LD_VAR 0 2
81618: ADD
81619: ST_TO_ADDR
// end ;
81620: GO 81516
81622: POP
81623: POP
// repeat wait ( 0 0$1 ) ;
81624: LD_INT 35
81626: PPUSH
81627: CALL_OW 67
// for un in tmp do
81631: LD_ADDR_VAR 0 2
81635: PUSH
81636: LD_VAR 0 3
81640: PUSH
81641: FOR_IN
81642: IFFALSE 81716
// begin if IsDead ( un ) then
81644: LD_VAR 0 2
81648: PPUSH
81649: CALL_OW 301
81653: IFFALSE 81673
// begin tmp := tmp diff un ;
81655: LD_ADDR_VAR 0 3
81659: PUSH
81660: LD_VAR 0 3
81664: PUSH
81665: LD_VAR 0 2
81669: DIFF
81670: ST_TO_ADDR
// continue ;
81671: GO 81641
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
81673: LD_VAR 0 2
81677: PPUSH
81678: LD_INT 3
81680: PUSH
81681: LD_INT 22
81683: PUSH
81684: LD_INT 0
81686: PUSH
81687: EMPTY
81688: LIST
81689: LIST
81690: PUSH
81691: EMPTY
81692: LIST
81693: LIST
81694: PPUSH
81695: CALL_OW 69
81699: PPUSH
81700: LD_VAR 0 2
81704: PPUSH
81705: CALL_OW 74
81709: PPUSH
81710: CALL_OW 115
// end ;
81714: GO 81641
81716: POP
81717: POP
// until not tmp ;
81718: LD_VAR 0 3
81722: NOT
81723: IFFALSE 81624
// end ;
81725: PPOPN 3
81727: END
// every 0 0$1 trigger StreamModeActive and sTroll do
81728: LD_EXP 64
81732: IFFALSE 81740
81734: PUSH
81735: LD_EXP 89
81739: AND
81740: IFFALSE 81794
81742: GO 81744
81744: DISABLE
// begin ToLua ( displayTroll(); ) ;
81745: LD_STRING displayTroll();
81747: PPUSH
81748: CALL_OW 559
// wait ( 3 3$00 ) ;
81752: LD_INT 6300
81754: PPUSH
81755: CALL_OW 67
// ToLua ( hideTroll(); ) ;
81759: LD_STRING hideTroll();
81761: PPUSH
81762: CALL_OW 559
// wait ( 1 1$00 ) ;
81766: LD_INT 2100
81768: PPUSH
81769: CALL_OW 67
// ToLua ( displayTroll(); ) ;
81773: LD_STRING displayTroll();
81775: PPUSH
81776: CALL_OW 559
// wait ( 1 1$00 ) ;
81780: LD_INT 2100
81782: PPUSH
81783: CALL_OW 67
// ToLua ( hideTroll(); ) ;
81787: LD_STRING hideTroll();
81789: PPUSH
81790: CALL_OW 559
// end ;
81794: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
81795: LD_EXP 64
81799: IFFALSE 81807
81801: PUSH
81802: LD_EXP 90
81806: AND
81807: IFFALSE 81870
81809: GO 81811
81811: DISABLE
81812: LD_INT 0
81814: PPUSH
// begin p := 0 ;
81815: LD_ADDR_VAR 0 1
81819: PUSH
81820: LD_INT 0
81822: ST_TO_ADDR
// repeat game_speed := 1 ;
81823: LD_ADDR_OWVAR 65
81827: PUSH
81828: LD_INT 1
81830: ST_TO_ADDR
// wait ( 0 0$1 ) ;
81831: LD_INT 35
81833: PPUSH
81834: CALL_OW 67
// p := p + 1 ;
81838: LD_ADDR_VAR 0 1
81842: PUSH
81843: LD_VAR 0 1
81847: PUSH
81848: LD_INT 1
81850: PLUS
81851: ST_TO_ADDR
// until p >= 60 ;
81852: LD_VAR 0 1
81856: PUSH
81857: LD_INT 60
81859: GREATEREQUAL
81860: IFFALSE 81823
// game_speed := 4 ;
81862: LD_ADDR_OWVAR 65
81866: PUSH
81867: LD_INT 4
81869: ST_TO_ADDR
// end ;
81870: PPOPN 1
81872: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
81873: LD_EXP 64
81877: IFFALSE 81885
81879: PUSH
81880: LD_EXP 91
81884: AND
81885: IFFALSE 82031
81887: GO 81889
81889: DISABLE
81890: LD_INT 0
81892: PPUSH
81893: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
81894: LD_ADDR_VAR 0 1
81898: PUSH
81899: LD_INT 22
81901: PUSH
81902: LD_OWVAR 2
81906: PUSH
81907: EMPTY
81908: LIST
81909: LIST
81910: PUSH
81911: LD_INT 2
81913: PUSH
81914: LD_INT 30
81916: PUSH
81917: LD_INT 0
81919: PUSH
81920: EMPTY
81921: LIST
81922: LIST
81923: PUSH
81924: LD_INT 30
81926: PUSH
81927: LD_INT 1
81929: PUSH
81930: EMPTY
81931: LIST
81932: LIST
81933: PUSH
81934: EMPTY
81935: LIST
81936: LIST
81937: LIST
81938: PUSH
81939: EMPTY
81940: LIST
81941: LIST
81942: PPUSH
81943: CALL_OW 69
81947: ST_TO_ADDR
// if not depot then
81948: LD_VAR 0 1
81952: NOT
81953: IFFALSE 81957
// exit ;
81955: GO 82031
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
81957: LD_ADDR_VAR 0 2
81961: PUSH
81962: LD_VAR 0 1
81966: PUSH
81967: LD_INT 1
81969: PPUSH
81970: LD_VAR 0 1
81974: PPUSH
81975: CALL_OW 12
81979: ARRAY
81980: PPUSH
81981: CALL_OW 274
81985: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
81986: LD_VAR 0 2
81990: PPUSH
81991: LD_INT 1
81993: PPUSH
81994: LD_INT 0
81996: PPUSH
81997: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
82001: LD_VAR 0 2
82005: PPUSH
82006: LD_INT 2
82008: PPUSH
82009: LD_INT 0
82011: PPUSH
82012: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
82016: LD_VAR 0 2
82020: PPUSH
82021: LD_INT 3
82023: PPUSH
82024: LD_INT 0
82026: PPUSH
82027: CALL_OW 277
// end ;
82031: PPOPN 2
82033: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
82034: LD_EXP 64
82038: IFFALSE 82046
82040: PUSH
82041: LD_EXP 92
82045: AND
82046: IFFALSE 82143
82048: GO 82050
82050: DISABLE
82051: LD_INT 0
82053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
82054: LD_ADDR_VAR 0 1
82058: PUSH
82059: LD_INT 22
82061: PUSH
82062: LD_OWVAR 2
82066: PUSH
82067: EMPTY
82068: LIST
82069: LIST
82070: PUSH
82071: LD_INT 21
82073: PUSH
82074: LD_INT 1
82076: PUSH
82077: EMPTY
82078: LIST
82079: LIST
82080: PUSH
82081: LD_INT 3
82083: PUSH
82084: LD_INT 23
82086: PUSH
82087: LD_INT 0
82089: PUSH
82090: EMPTY
82091: LIST
82092: LIST
82093: PUSH
82094: EMPTY
82095: LIST
82096: LIST
82097: PUSH
82098: EMPTY
82099: LIST
82100: LIST
82101: LIST
82102: PPUSH
82103: CALL_OW 69
82107: ST_TO_ADDR
// if not tmp then
82108: LD_VAR 0 1
82112: NOT
82113: IFFALSE 82117
// exit ;
82115: GO 82143
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
82117: LD_VAR 0 1
82121: PUSH
82122: LD_INT 1
82124: PPUSH
82125: LD_VAR 0 1
82129: PPUSH
82130: CALL_OW 12
82134: ARRAY
82135: PPUSH
82136: LD_INT 200
82138: PPUSH
82139: CALL_OW 234
// end ;
82143: PPOPN 1
82145: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
82146: LD_EXP 64
82150: IFFALSE 82158
82152: PUSH
82153: LD_EXP 93
82157: AND
82158: IFFALSE 82237
82160: GO 82162
82162: DISABLE
82163: LD_INT 0
82165: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
82166: LD_ADDR_VAR 0 1
82170: PUSH
82171: LD_INT 22
82173: PUSH
82174: LD_OWVAR 2
82178: PUSH
82179: EMPTY
82180: LIST
82181: LIST
82182: PUSH
82183: LD_INT 21
82185: PUSH
82186: LD_INT 2
82188: PUSH
82189: EMPTY
82190: LIST
82191: LIST
82192: PUSH
82193: EMPTY
82194: LIST
82195: LIST
82196: PPUSH
82197: CALL_OW 69
82201: ST_TO_ADDR
// if not tmp then
82202: LD_VAR 0 1
82206: NOT
82207: IFFALSE 82211
// exit ;
82209: GO 82237
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
82211: LD_VAR 0 1
82215: PUSH
82216: LD_INT 1
82218: PPUSH
82219: LD_VAR 0 1
82223: PPUSH
82224: CALL_OW 12
82228: ARRAY
82229: PPUSH
82230: LD_INT 60
82232: PPUSH
82233: CALL_OW 234
// end ;
82237: PPOPN 1
82239: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
82240: LD_EXP 64
82244: IFFALSE 82252
82246: PUSH
82247: LD_EXP 94
82251: AND
82252: IFFALSE 82351
82254: GO 82256
82256: DISABLE
82257: LD_INT 0
82259: PPUSH
82260: PPUSH
// begin enable ;
82261: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
82262: LD_ADDR_VAR 0 1
82266: PUSH
82267: LD_INT 22
82269: PUSH
82270: LD_OWVAR 2
82274: PUSH
82275: EMPTY
82276: LIST
82277: LIST
82278: PUSH
82279: LD_INT 61
82281: PUSH
82282: EMPTY
82283: LIST
82284: PUSH
82285: LD_INT 33
82287: PUSH
82288: LD_INT 2
82290: PUSH
82291: EMPTY
82292: LIST
82293: LIST
82294: PUSH
82295: EMPTY
82296: LIST
82297: LIST
82298: LIST
82299: PPUSH
82300: CALL_OW 69
82304: ST_TO_ADDR
// if not tmp then
82305: LD_VAR 0 1
82309: NOT
82310: IFFALSE 82314
// exit ;
82312: GO 82351
// for i in tmp do
82314: LD_ADDR_VAR 0 2
82318: PUSH
82319: LD_VAR 0 1
82323: PUSH
82324: FOR_IN
82325: IFFALSE 82349
// if IsControledBy ( i ) then
82327: LD_VAR 0 2
82331: PPUSH
82332: CALL_OW 312
82336: IFFALSE 82347
// ComUnlink ( i ) ;
82338: LD_VAR 0 2
82342: PPUSH
82343: CALL_OW 136
82347: GO 82324
82349: POP
82350: POP
// end ;
82351: PPOPN 2
82353: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
82354: LD_EXP 64
82358: IFFALSE 82366
82360: PUSH
82361: LD_EXP 95
82365: AND
82366: IFFALSE 82506
82368: GO 82370
82370: DISABLE
82371: LD_INT 0
82373: PPUSH
82374: PPUSH
// begin ToLua ( displayPowell(); ) ;
82375: LD_STRING displayPowell();
82377: PPUSH
82378: CALL_OW 559
// uc_side := 0 ;
82382: LD_ADDR_OWVAR 20
82386: PUSH
82387: LD_INT 0
82389: ST_TO_ADDR
// uc_nation := 2 ;
82390: LD_ADDR_OWVAR 21
82394: PUSH
82395: LD_INT 2
82397: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
82398: LD_ADDR_OWVAR 37
82402: PUSH
82403: LD_INT 14
82405: ST_TO_ADDR
// vc_engine := engine_siberite ;
82406: LD_ADDR_OWVAR 39
82410: PUSH
82411: LD_INT 3
82413: ST_TO_ADDR
// vc_control := control_apeman ;
82414: LD_ADDR_OWVAR 38
82418: PUSH
82419: LD_INT 5
82421: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
82422: LD_ADDR_OWVAR 40
82426: PUSH
82427: LD_INT 29
82429: ST_TO_ADDR
// un := CreateVehicle ;
82430: LD_ADDR_VAR 0 2
82434: PUSH
82435: CALL_OW 45
82439: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
82440: LD_VAR 0 2
82444: PPUSH
82445: LD_INT 1
82447: PPUSH
82448: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
82452: LD_INT 35
82454: PPUSH
82455: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
82459: LD_VAR 0 2
82463: PPUSH
82464: LD_INT 22
82466: PUSH
82467: LD_OWVAR 2
82471: PUSH
82472: EMPTY
82473: LIST
82474: LIST
82475: PPUSH
82476: CALL_OW 69
82480: PPUSH
82481: LD_VAR 0 2
82485: PPUSH
82486: CALL_OW 74
82490: PPUSH
82491: CALL_OW 115
// until IsDead ( un ) ;
82495: LD_VAR 0 2
82499: PPUSH
82500: CALL_OW 301
82504: IFFALSE 82452
// end ;
82506: PPOPN 2
82508: END
// every 0 0$1 trigger StreamModeActive and sStu do
82509: LD_EXP 64
82513: IFFALSE 82521
82515: PUSH
82516: LD_EXP 103
82520: AND
82521: IFFALSE 82537
82523: GO 82525
82525: DISABLE
// begin ToLua ( displayStucuk(); ) ;
82526: LD_STRING displayStucuk();
82528: PPUSH
82529: CALL_OW 559
// ResetFog ;
82533: CALL_OW 335
// end ;
82537: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
82538: LD_EXP 64
82542: IFFALSE 82550
82544: PUSH
82545: LD_EXP 96
82549: AND
82550: IFFALSE 82691
82552: GO 82554
82554: DISABLE
82555: LD_INT 0
82557: PPUSH
82558: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
82559: LD_ADDR_VAR 0 2
82563: PUSH
82564: LD_INT 22
82566: PUSH
82567: LD_OWVAR 2
82571: PUSH
82572: EMPTY
82573: LIST
82574: LIST
82575: PUSH
82576: LD_INT 21
82578: PUSH
82579: LD_INT 1
82581: PUSH
82582: EMPTY
82583: LIST
82584: LIST
82585: PUSH
82586: EMPTY
82587: LIST
82588: LIST
82589: PPUSH
82590: CALL_OW 69
82594: ST_TO_ADDR
// if not tmp then
82595: LD_VAR 0 2
82599: NOT
82600: IFFALSE 82604
// exit ;
82602: GO 82691
// un := tmp [ rand ( 1 , tmp ) ] ;
82604: LD_ADDR_VAR 0 1
82608: PUSH
82609: LD_VAR 0 2
82613: PUSH
82614: LD_INT 1
82616: PPUSH
82617: LD_VAR 0 2
82621: PPUSH
82622: CALL_OW 12
82626: ARRAY
82627: ST_TO_ADDR
// SetSide ( un , 0 ) ;
82628: LD_VAR 0 1
82632: PPUSH
82633: LD_INT 0
82635: PPUSH
82636: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
82640: LD_VAR 0 1
82644: PPUSH
82645: LD_OWVAR 3
82649: PUSH
82650: LD_VAR 0 1
82654: DIFF
82655: PPUSH
82656: LD_VAR 0 1
82660: PPUSH
82661: CALL_OW 74
82665: PPUSH
82666: CALL_OW 115
// wait ( 0 0$20 ) ;
82670: LD_INT 700
82672: PPUSH
82673: CALL_OW 67
// SetSide ( un , your_side ) ;
82677: LD_VAR 0 1
82681: PPUSH
82682: LD_OWVAR 2
82686: PPUSH
82687: CALL_OW 235
// end ;
82691: PPOPN 2
82693: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
82694: LD_EXP 64
82698: IFFALSE 82706
82700: PUSH
82701: LD_EXP 97
82705: AND
82706: IFFALSE 82812
82708: GO 82710
82710: DISABLE
82711: LD_INT 0
82713: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
82714: LD_ADDR_VAR 0 1
82718: PUSH
82719: LD_INT 22
82721: PUSH
82722: LD_OWVAR 2
82726: PUSH
82727: EMPTY
82728: LIST
82729: LIST
82730: PUSH
82731: LD_INT 2
82733: PUSH
82734: LD_INT 30
82736: PUSH
82737: LD_INT 0
82739: PUSH
82740: EMPTY
82741: LIST
82742: LIST
82743: PUSH
82744: LD_INT 30
82746: PUSH
82747: LD_INT 1
82749: PUSH
82750: EMPTY
82751: LIST
82752: LIST
82753: PUSH
82754: EMPTY
82755: LIST
82756: LIST
82757: LIST
82758: PUSH
82759: EMPTY
82760: LIST
82761: LIST
82762: PPUSH
82763: CALL_OW 69
82767: ST_TO_ADDR
// if not depot then
82768: LD_VAR 0 1
82772: NOT
82773: IFFALSE 82777
// exit ;
82775: GO 82812
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
82777: LD_VAR 0 1
82781: PUSH
82782: LD_INT 1
82784: ARRAY
82785: PPUSH
82786: CALL_OW 250
82790: PPUSH
82791: LD_VAR 0 1
82795: PUSH
82796: LD_INT 1
82798: ARRAY
82799: PPUSH
82800: CALL_OW 251
82804: PPUSH
82805: LD_INT 70
82807: PPUSH
82808: CALL_OW 495
// end ;
82812: PPOPN 1
82814: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
82815: LD_EXP 64
82819: IFFALSE 82827
82821: PUSH
82822: LD_EXP 98
82826: AND
82827: IFFALSE 83038
82829: GO 82831
82831: DISABLE
82832: LD_INT 0
82834: PPUSH
82835: PPUSH
82836: PPUSH
82837: PPUSH
82838: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
82839: LD_ADDR_VAR 0 5
82843: PUSH
82844: LD_INT 22
82846: PUSH
82847: LD_OWVAR 2
82851: PUSH
82852: EMPTY
82853: LIST
82854: LIST
82855: PUSH
82856: LD_INT 21
82858: PUSH
82859: LD_INT 1
82861: PUSH
82862: EMPTY
82863: LIST
82864: LIST
82865: PUSH
82866: EMPTY
82867: LIST
82868: LIST
82869: PPUSH
82870: CALL_OW 69
82874: ST_TO_ADDR
// if not tmp then
82875: LD_VAR 0 5
82879: NOT
82880: IFFALSE 82884
// exit ;
82882: GO 83038
// for i in tmp do
82884: LD_ADDR_VAR 0 1
82888: PUSH
82889: LD_VAR 0 5
82893: PUSH
82894: FOR_IN
82895: IFFALSE 83036
// begin d := rand ( 0 , 5 ) ;
82897: LD_ADDR_VAR 0 4
82901: PUSH
82902: LD_INT 0
82904: PPUSH
82905: LD_INT 5
82907: PPUSH
82908: CALL_OW 12
82912: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
82913: LD_ADDR_VAR 0 2
82917: PUSH
82918: LD_VAR 0 1
82922: PPUSH
82923: CALL_OW 250
82927: PPUSH
82928: LD_VAR 0 4
82932: PPUSH
82933: LD_INT 3
82935: PPUSH
82936: LD_INT 12
82938: PPUSH
82939: CALL_OW 12
82943: PPUSH
82944: CALL_OW 272
82948: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
82949: LD_ADDR_VAR 0 3
82953: PUSH
82954: LD_VAR 0 1
82958: PPUSH
82959: CALL_OW 251
82963: PPUSH
82964: LD_VAR 0 4
82968: PPUSH
82969: LD_INT 3
82971: PPUSH
82972: LD_INT 12
82974: PPUSH
82975: CALL_OW 12
82979: PPUSH
82980: CALL_OW 273
82984: ST_TO_ADDR
// if ValidHex ( x , y ) then
82985: LD_VAR 0 2
82989: PPUSH
82990: LD_VAR 0 3
82994: PPUSH
82995: CALL_OW 488
82999: IFFALSE 83034
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
83001: LD_VAR 0 1
83005: PPUSH
83006: LD_VAR 0 2
83010: PPUSH
83011: LD_VAR 0 3
83015: PPUSH
83016: LD_INT 3
83018: PPUSH
83019: LD_INT 6
83021: PPUSH
83022: CALL_OW 12
83026: PPUSH
83027: LD_INT 1
83029: PPUSH
83030: CALL_OW 483
// end ;
83034: GO 82894
83036: POP
83037: POP
// end ;
83038: PPOPN 5
83040: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
83041: LD_EXP 64
83045: IFFALSE 83053
83047: PUSH
83048: LD_EXP 99
83052: AND
83053: IFFALSE 83147
83055: GO 83057
83057: DISABLE
83058: LD_INT 0
83060: PPUSH
83061: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
83062: LD_ADDR_VAR 0 2
83066: PUSH
83067: LD_INT 22
83069: PUSH
83070: LD_OWVAR 2
83074: PUSH
83075: EMPTY
83076: LIST
83077: LIST
83078: PUSH
83079: LD_INT 32
83081: PUSH
83082: LD_INT 1
83084: PUSH
83085: EMPTY
83086: LIST
83087: LIST
83088: PUSH
83089: LD_INT 21
83091: PUSH
83092: LD_INT 2
83094: PUSH
83095: EMPTY
83096: LIST
83097: LIST
83098: PUSH
83099: EMPTY
83100: LIST
83101: LIST
83102: LIST
83103: PPUSH
83104: CALL_OW 69
83108: ST_TO_ADDR
// if not tmp then
83109: LD_VAR 0 2
83113: NOT
83114: IFFALSE 83118
// exit ;
83116: GO 83147
// for i in tmp do
83118: LD_ADDR_VAR 0 1
83122: PUSH
83123: LD_VAR 0 2
83127: PUSH
83128: FOR_IN
83129: IFFALSE 83145
// SetFuel ( i , 0 ) ;
83131: LD_VAR 0 1
83135: PPUSH
83136: LD_INT 0
83138: PPUSH
83139: CALL_OW 240
83143: GO 83128
83145: POP
83146: POP
// end ;
83147: PPOPN 2
83149: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
83150: LD_EXP 64
83154: IFFALSE 83162
83156: PUSH
83157: LD_EXP 100
83161: AND
83162: IFFALSE 83228
83164: GO 83166
83166: DISABLE
83167: LD_INT 0
83169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
83170: LD_ADDR_VAR 0 1
83174: PUSH
83175: LD_INT 22
83177: PUSH
83178: LD_OWVAR 2
83182: PUSH
83183: EMPTY
83184: LIST
83185: LIST
83186: PUSH
83187: LD_INT 30
83189: PUSH
83190: LD_INT 29
83192: PUSH
83193: EMPTY
83194: LIST
83195: LIST
83196: PUSH
83197: EMPTY
83198: LIST
83199: LIST
83200: PPUSH
83201: CALL_OW 69
83205: ST_TO_ADDR
// if not tmp then
83206: LD_VAR 0 1
83210: NOT
83211: IFFALSE 83215
// exit ;
83213: GO 83228
// DestroyUnit ( tmp [ 1 ] ) ;
83215: LD_VAR 0 1
83219: PUSH
83220: LD_INT 1
83222: ARRAY
83223: PPUSH
83224: CALL_OW 65
// end ;
83228: PPOPN 1
83230: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
83231: LD_EXP 64
83235: IFFALSE 83243
83237: PUSH
83238: LD_EXP 102
83242: AND
83243: IFFALSE 83372
83245: GO 83247
83247: DISABLE
83248: LD_INT 0
83250: PPUSH
// begin uc_side := 0 ;
83251: LD_ADDR_OWVAR 20
83255: PUSH
83256: LD_INT 0
83258: ST_TO_ADDR
// uc_nation := nation_arabian ;
83259: LD_ADDR_OWVAR 21
83263: PUSH
83264: LD_INT 2
83266: ST_TO_ADDR
// hc_gallery :=  ;
83267: LD_ADDR_OWVAR 33
83271: PUSH
83272: LD_STRING 
83274: ST_TO_ADDR
// hc_name :=  ;
83275: LD_ADDR_OWVAR 26
83279: PUSH
83280: LD_STRING 
83282: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
83283: LD_INT 1
83285: PPUSH
83286: LD_INT 11
83288: PPUSH
83289: LD_INT 10
83291: PPUSH
83292: CALL_OW 380
// un := CreateHuman ;
83296: LD_ADDR_VAR 0 1
83300: PUSH
83301: CALL_OW 44
83305: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
83306: LD_VAR 0 1
83310: PPUSH
83311: LD_INT 1
83313: PPUSH
83314: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
83318: LD_INT 35
83320: PPUSH
83321: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
83325: LD_VAR 0 1
83329: PPUSH
83330: LD_INT 22
83332: PUSH
83333: LD_OWVAR 2
83337: PUSH
83338: EMPTY
83339: LIST
83340: LIST
83341: PPUSH
83342: CALL_OW 69
83346: PPUSH
83347: LD_VAR 0 1
83351: PPUSH
83352: CALL_OW 74
83356: PPUSH
83357: CALL_OW 115
// until IsDead ( un ) ;
83361: LD_VAR 0 1
83365: PPUSH
83366: CALL_OW 301
83370: IFFALSE 83318
// end ;
83372: PPOPN 1
83374: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
83375: LD_EXP 64
83379: IFFALSE 83387
83381: PUSH
83382: LD_EXP 104
83386: AND
83387: IFFALSE 83399
83389: GO 83391
83391: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
83392: LD_STRING earthquake(getX(game), 0, 32)
83394: PPUSH
83395: CALL_OW 559
83399: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
83400: LD_EXP 64
83404: IFFALSE 83412
83406: PUSH
83407: LD_EXP 105
83411: AND
83412: IFFALSE 83503
83414: GO 83416
83416: DISABLE
83417: LD_INT 0
83419: PPUSH
// begin enable ;
83420: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
83421: LD_ADDR_VAR 0 1
83425: PUSH
83426: LD_INT 22
83428: PUSH
83429: LD_OWVAR 2
83433: PUSH
83434: EMPTY
83435: LIST
83436: LIST
83437: PUSH
83438: LD_INT 21
83440: PUSH
83441: LD_INT 2
83443: PUSH
83444: EMPTY
83445: LIST
83446: LIST
83447: PUSH
83448: LD_INT 33
83450: PUSH
83451: LD_INT 3
83453: PUSH
83454: EMPTY
83455: LIST
83456: LIST
83457: PUSH
83458: EMPTY
83459: LIST
83460: LIST
83461: LIST
83462: PPUSH
83463: CALL_OW 69
83467: ST_TO_ADDR
// if not tmp then
83468: LD_VAR 0 1
83472: NOT
83473: IFFALSE 83477
// exit ;
83475: GO 83503
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
83477: LD_VAR 0 1
83481: PUSH
83482: LD_INT 1
83484: PPUSH
83485: LD_VAR 0 1
83489: PPUSH
83490: CALL_OW 12
83494: ARRAY
83495: PPUSH
83496: LD_INT 1
83498: PPUSH
83499: CALL_OW 234
// end ;
83503: PPOPN 1
83505: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
83506: LD_EXP 64
83510: IFFALSE 83518
83512: PUSH
83513: LD_EXP 106
83517: AND
83518: IFFALSE 83659
83520: GO 83522
83522: DISABLE
83523: LD_INT 0
83525: PPUSH
83526: PPUSH
83527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
83528: LD_ADDR_VAR 0 3
83532: PUSH
83533: LD_INT 22
83535: PUSH
83536: LD_OWVAR 2
83540: PUSH
83541: EMPTY
83542: LIST
83543: LIST
83544: PUSH
83545: LD_INT 25
83547: PUSH
83548: LD_INT 1
83550: PUSH
83551: EMPTY
83552: LIST
83553: LIST
83554: PUSH
83555: EMPTY
83556: LIST
83557: LIST
83558: PPUSH
83559: CALL_OW 69
83563: ST_TO_ADDR
// if not tmp then
83564: LD_VAR 0 3
83568: NOT
83569: IFFALSE 83573
// exit ;
83571: GO 83659
// un := tmp [ rand ( 1 , tmp ) ] ;
83573: LD_ADDR_VAR 0 2
83577: PUSH
83578: LD_VAR 0 3
83582: PUSH
83583: LD_INT 1
83585: PPUSH
83586: LD_VAR 0 3
83590: PPUSH
83591: CALL_OW 12
83595: ARRAY
83596: ST_TO_ADDR
// if Crawls ( un ) then
83597: LD_VAR 0 2
83601: PPUSH
83602: CALL_OW 318
83606: IFFALSE 83617
// ComWalk ( un ) ;
83608: LD_VAR 0 2
83612: PPUSH
83613: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
83617: LD_VAR 0 2
83621: PPUSH
83622: LD_INT 9
83624: PPUSH
83625: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
83629: LD_INT 28
83631: PPUSH
83632: LD_OWVAR 2
83636: PPUSH
83637: LD_INT 2
83639: PPUSH
83640: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
83644: LD_INT 29
83646: PPUSH
83647: LD_OWVAR 2
83651: PPUSH
83652: LD_INT 2
83654: PPUSH
83655: CALL_OW 322
// end ;
83659: PPOPN 3
83661: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
83662: LD_EXP 64
83666: IFFALSE 83674
83668: PUSH
83669: LD_EXP 107
83673: AND
83674: IFFALSE 83785
83676: GO 83678
83678: DISABLE
83679: LD_INT 0
83681: PPUSH
83682: PPUSH
83683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
83684: LD_ADDR_VAR 0 3
83688: PUSH
83689: LD_INT 22
83691: PUSH
83692: LD_OWVAR 2
83696: PUSH
83697: EMPTY
83698: LIST
83699: LIST
83700: PUSH
83701: LD_INT 25
83703: PUSH
83704: LD_INT 1
83706: PUSH
83707: EMPTY
83708: LIST
83709: LIST
83710: PUSH
83711: EMPTY
83712: LIST
83713: LIST
83714: PPUSH
83715: CALL_OW 69
83719: ST_TO_ADDR
// if not tmp then
83720: LD_VAR 0 3
83724: NOT
83725: IFFALSE 83729
// exit ;
83727: GO 83785
// un := tmp [ rand ( 1 , tmp ) ] ;
83729: LD_ADDR_VAR 0 2
83733: PUSH
83734: LD_VAR 0 3
83738: PUSH
83739: LD_INT 1
83741: PPUSH
83742: LD_VAR 0 3
83746: PPUSH
83747: CALL_OW 12
83751: ARRAY
83752: ST_TO_ADDR
// if Crawls ( un ) then
83753: LD_VAR 0 2
83757: PPUSH
83758: CALL_OW 318
83762: IFFALSE 83773
// ComWalk ( un ) ;
83764: LD_VAR 0 2
83768: PPUSH
83769: CALL_OW 138
// SetClass ( un , class_mortar ) ;
83773: LD_VAR 0 2
83777: PPUSH
83778: LD_INT 8
83780: PPUSH
83781: CALL_OW 336
// end ;
83785: PPOPN 3
83787: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
83788: LD_EXP 64
83792: IFFALSE 83800
83794: PUSH
83795: LD_EXP 108
83799: AND
83800: IFFALSE 83944
83802: GO 83804
83804: DISABLE
83805: LD_INT 0
83807: PPUSH
83808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
83809: LD_ADDR_VAR 0 2
83813: PUSH
83814: LD_INT 22
83816: PUSH
83817: LD_OWVAR 2
83821: PUSH
83822: EMPTY
83823: LIST
83824: LIST
83825: PUSH
83826: LD_INT 21
83828: PUSH
83829: LD_INT 2
83831: PUSH
83832: EMPTY
83833: LIST
83834: LIST
83835: PUSH
83836: LD_INT 2
83838: PUSH
83839: LD_INT 34
83841: PUSH
83842: LD_INT 12
83844: PUSH
83845: EMPTY
83846: LIST
83847: LIST
83848: PUSH
83849: LD_INT 34
83851: PUSH
83852: LD_INT 51
83854: PUSH
83855: EMPTY
83856: LIST
83857: LIST
83858: PUSH
83859: LD_INT 34
83861: PUSH
83862: LD_INT 32
83864: PUSH
83865: EMPTY
83866: LIST
83867: LIST
83868: PUSH
83869: EMPTY
83870: LIST
83871: LIST
83872: LIST
83873: LIST
83874: PUSH
83875: EMPTY
83876: LIST
83877: LIST
83878: LIST
83879: PPUSH
83880: CALL_OW 69
83884: ST_TO_ADDR
// if not tmp then
83885: LD_VAR 0 2
83889: NOT
83890: IFFALSE 83894
// exit ;
83892: GO 83944
// for i in tmp do
83894: LD_ADDR_VAR 0 1
83898: PUSH
83899: LD_VAR 0 2
83903: PUSH
83904: FOR_IN
83905: IFFALSE 83942
// if GetCargo ( i , mat_artifact ) = 0 then
83907: LD_VAR 0 1
83911: PPUSH
83912: LD_INT 4
83914: PPUSH
83915: CALL_OW 289
83919: PUSH
83920: LD_INT 0
83922: EQUAL
83923: IFFALSE 83940
// SetCargo ( i , mat_siberit , 100 ) ;
83925: LD_VAR 0 1
83929: PPUSH
83930: LD_INT 3
83932: PPUSH
83933: LD_INT 100
83935: PPUSH
83936: CALL_OW 290
83940: GO 83904
83942: POP
83943: POP
// end ;
83944: PPOPN 2
83946: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
83947: LD_EXP 64
83951: IFFALSE 83959
83953: PUSH
83954: LD_EXP 109
83958: AND
83959: IFFALSE 84142
83961: GO 83963
83963: DISABLE
83964: LD_INT 0
83966: PPUSH
83967: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
83968: LD_ADDR_VAR 0 2
83972: PUSH
83973: LD_INT 22
83975: PUSH
83976: LD_OWVAR 2
83980: PUSH
83981: EMPTY
83982: LIST
83983: LIST
83984: PPUSH
83985: CALL_OW 69
83989: ST_TO_ADDR
// if not tmp then
83990: LD_VAR 0 2
83994: NOT
83995: IFFALSE 83999
// exit ;
83997: GO 84142
// for i := 1 to 2 do
83999: LD_ADDR_VAR 0 1
84003: PUSH
84004: DOUBLE
84005: LD_INT 1
84007: DEC
84008: ST_TO_ADDR
84009: LD_INT 2
84011: PUSH
84012: FOR_TO
84013: IFFALSE 84140
// begin uc_side := your_side ;
84015: LD_ADDR_OWVAR 20
84019: PUSH
84020: LD_OWVAR 2
84024: ST_TO_ADDR
// uc_nation := nation_american ;
84025: LD_ADDR_OWVAR 21
84029: PUSH
84030: LD_INT 1
84032: ST_TO_ADDR
// vc_chassis := us_morphling ;
84033: LD_ADDR_OWVAR 37
84037: PUSH
84038: LD_INT 5
84040: ST_TO_ADDR
// vc_engine := engine_siberite ;
84041: LD_ADDR_OWVAR 39
84045: PUSH
84046: LD_INT 3
84048: ST_TO_ADDR
// vc_control := control_computer ;
84049: LD_ADDR_OWVAR 38
84053: PUSH
84054: LD_INT 3
84056: ST_TO_ADDR
// vc_weapon := us_double_laser ;
84057: LD_ADDR_OWVAR 40
84061: PUSH
84062: LD_INT 10
84064: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
84065: LD_VAR 0 2
84069: PUSH
84070: LD_INT 1
84072: ARRAY
84073: PPUSH
84074: CALL_OW 310
84078: NOT
84079: IFFALSE 84126
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
84081: CALL_OW 45
84085: PPUSH
84086: LD_VAR 0 2
84090: PUSH
84091: LD_INT 1
84093: ARRAY
84094: PPUSH
84095: CALL_OW 250
84099: PPUSH
84100: LD_VAR 0 2
84104: PUSH
84105: LD_INT 1
84107: ARRAY
84108: PPUSH
84109: CALL_OW 251
84113: PPUSH
84114: LD_INT 12
84116: PPUSH
84117: LD_INT 1
84119: PPUSH
84120: CALL_OW 50
84124: GO 84138
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
84126: CALL_OW 45
84130: PPUSH
84131: LD_INT 1
84133: PPUSH
84134: CALL_OW 51
// end ;
84138: GO 84012
84140: POP
84141: POP
// end ;
84142: PPOPN 2
84144: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
84145: LD_EXP 64
84149: IFFALSE 84157
84151: PUSH
84152: LD_EXP 110
84156: AND
84157: IFFALSE 84379
84159: GO 84161
84161: DISABLE
84162: LD_INT 0
84164: PPUSH
84165: PPUSH
84166: PPUSH
84167: PPUSH
84168: PPUSH
84169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
84170: LD_ADDR_VAR 0 6
84174: PUSH
84175: LD_INT 22
84177: PUSH
84178: LD_OWVAR 2
84182: PUSH
84183: EMPTY
84184: LIST
84185: LIST
84186: PUSH
84187: LD_INT 21
84189: PUSH
84190: LD_INT 1
84192: PUSH
84193: EMPTY
84194: LIST
84195: LIST
84196: PUSH
84197: LD_INT 3
84199: PUSH
84200: LD_INT 23
84202: PUSH
84203: LD_INT 0
84205: PUSH
84206: EMPTY
84207: LIST
84208: LIST
84209: PUSH
84210: EMPTY
84211: LIST
84212: LIST
84213: PUSH
84214: EMPTY
84215: LIST
84216: LIST
84217: LIST
84218: PPUSH
84219: CALL_OW 69
84223: ST_TO_ADDR
// if not tmp then
84224: LD_VAR 0 6
84228: NOT
84229: IFFALSE 84233
// exit ;
84231: GO 84379
// s1 := rand ( 1 , 4 ) ;
84233: LD_ADDR_VAR 0 2
84237: PUSH
84238: LD_INT 1
84240: PPUSH
84241: LD_INT 4
84243: PPUSH
84244: CALL_OW 12
84248: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
84249: LD_ADDR_VAR 0 4
84253: PUSH
84254: LD_VAR 0 6
84258: PUSH
84259: LD_INT 1
84261: ARRAY
84262: PPUSH
84263: LD_VAR 0 2
84267: PPUSH
84268: CALL_OW 259
84272: ST_TO_ADDR
// if s1 = 1 then
84273: LD_VAR 0 2
84277: PUSH
84278: LD_INT 1
84280: EQUAL
84281: IFFALSE 84301
// s2 := rand ( 2 , 4 ) else
84283: LD_ADDR_VAR 0 3
84287: PUSH
84288: LD_INT 2
84290: PPUSH
84291: LD_INT 4
84293: PPUSH
84294: CALL_OW 12
84298: ST_TO_ADDR
84299: GO 84309
// s2 := 1 ;
84301: LD_ADDR_VAR 0 3
84305: PUSH
84306: LD_INT 1
84308: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
84309: LD_ADDR_VAR 0 5
84313: PUSH
84314: LD_VAR 0 6
84318: PUSH
84319: LD_INT 1
84321: ARRAY
84322: PPUSH
84323: LD_VAR 0 3
84327: PPUSH
84328: CALL_OW 259
84332: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
84333: LD_VAR 0 6
84337: PUSH
84338: LD_INT 1
84340: ARRAY
84341: PPUSH
84342: LD_VAR 0 2
84346: PPUSH
84347: LD_VAR 0 5
84351: PPUSH
84352: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
84356: LD_VAR 0 6
84360: PUSH
84361: LD_INT 1
84363: ARRAY
84364: PPUSH
84365: LD_VAR 0 3
84369: PPUSH
84370: LD_VAR 0 4
84374: PPUSH
84375: CALL_OW 237
// end ;
84379: PPOPN 6
84381: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
84382: LD_EXP 64
84386: IFFALSE 84394
84388: PUSH
84389: LD_EXP 111
84393: AND
84394: IFFALSE 84473
84396: GO 84398
84398: DISABLE
84399: LD_INT 0
84401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
84402: LD_ADDR_VAR 0 1
84406: PUSH
84407: LD_INT 22
84409: PUSH
84410: LD_OWVAR 2
84414: PUSH
84415: EMPTY
84416: LIST
84417: LIST
84418: PUSH
84419: LD_INT 30
84421: PUSH
84422: LD_INT 3
84424: PUSH
84425: EMPTY
84426: LIST
84427: LIST
84428: PUSH
84429: EMPTY
84430: LIST
84431: LIST
84432: PPUSH
84433: CALL_OW 69
84437: ST_TO_ADDR
// if not tmp then
84438: LD_VAR 0 1
84442: NOT
84443: IFFALSE 84447
// exit ;
84445: GO 84473
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
84447: LD_VAR 0 1
84451: PUSH
84452: LD_INT 1
84454: PPUSH
84455: LD_VAR 0 1
84459: PPUSH
84460: CALL_OW 12
84464: ARRAY
84465: PPUSH
84466: LD_INT 1
84468: PPUSH
84469: CALL_OW 234
// end ;
84473: PPOPN 1
84475: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
84476: LD_EXP 64
84480: IFFALSE 84488
84482: PUSH
84483: LD_EXP 112
84487: AND
84488: IFFALSE 84600
84490: GO 84492
84492: DISABLE
84493: LD_INT 0
84495: PPUSH
84496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
84497: LD_ADDR_VAR 0 2
84501: PUSH
84502: LD_INT 22
84504: PUSH
84505: LD_OWVAR 2
84509: PUSH
84510: EMPTY
84511: LIST
84512: LIST
84513: PUSH
84514: LD_INT 2
84516: PUSH
84517: LD_INT 30
84519: PUSH
84520: LD_INT 27
84522: PUSH
84523: EMPTY
84524: LIST
84525: LIST
84526: PUSH
84527: LD_INT 30
84529: PUSH
84530: LD_INT 26
84532: PUSH
84533: EMPTY
84534: LIST
84535: LIST
84536: PUSH
84537: LD_INT 30
84539: PUSH
84540: LD_INT 28
84542: PUSH
84543: EMPTY
84544: LIST
84545: LIST
84546: PUSH
84547: EMPTY
84548: LIST
84549: LIST
84550: LIST
84551: LIST
84552: PUSH
84553: EMPTY
84554: LIST
84555: LIST
84556: PPUSH
84557: CALL_OW 69
84561: ST_TO_ADDR
// if not tmp then
84562: LD_VAR 0 2
84566: NOT
84567: IFFALSE 84571
// exit ;
84569: GO 84600
// for i in tmp do
84571: LD_ADDR_VAR 0 1
84575: PUSH
84576: LD_VAR 0 2
84580: PUSH
84581: FOR_IN
84582: IFFALSE 84598
// SetLives ( i , 1 ) ;
84584: LD_VAR 0 1
84588: PPUSH
84589: LD_INT 1
84591: PPUSH
84592: CALL_OW 234
84596: GO 84581
84598: POP
84599: POP
// end ;
84600: PPOPN 2
84602: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
84603: LD_EXP 64
84607: IFFALSE 84615
84609: PUSH
84610: LD_EXP 113
84614: AND
84615: IFFALSE 84902
84617: GO 84619
84619: DISABLE
84620: LD_INT 0
84622: PPUSH
84623: PPUSH
84624: PPUSH
// begin i := rand ( 1 , 7 ) ;
84625: LD_ADDR_VAR 0 1
84629: PUSH
84630: LD_INT 1
84632: PPUSH
84633: LD_INT 7
84635: PPUSH
84636: CALL_OW 12
84640: ST_TO_ADDR
// case i of 1 :
84641: LD_VAR 0 1
84645: PUSH
84646: LD_INT 1
84648: DOUBLE
84649: EQUAL
84650: IFTRUE 84654
84652: GO 84664
84654: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
84655: LD_STRING earthquake(getX(game), 0, 32)
84657: PPUSH
84658: CALL_OW 559
84662: GO 84902
84664: LD_INT 2
84666: DOUBLE
84667: EQUAL
84668: IFTRUE 84672
84670: GO 84686
84672: POP
// begin ToLua ( displayStucuk(); ) ;
84673: LD_STRING displayStucuk();
84675: PPUSH
84676: CALL_OW 559
// ResetFog ;
84680: CALL_OW 335
// end ; 3 :
84684: GO 84902
84686: LD_INT 3
84688: DOUBLE
84689: EQUAL
84690: IFTRUE 84694
84692: GO 84798
84694: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
84695: LD_ADDR_VAR 0 2
84699: PUSH
84700: LD_INT 22
84702: PUSH
84703: LD_OWVAR 2
84707: PUSH
84708: EMPTY
84709: LIST
84710: LIST
84711: PUSH
84712: LD_INT 25
84714: PUSH
84715: LD_INT 1
84717: PUSH
84718: EMPTY
84719: LIST
84720: LIST
84721: PUSH
84722: EMPTY
84723: LIST
84724: LIST
84725: PPUSH
84726: CALL_OW 69
84730: ST_TO_ADDR
// if not tmp then
84731: LD_VAR 0 2
84735: NOT
84736: IFFALSE 84740
// exit ;
84738: GO 84902
// un := tmp [ rand ( 1 , tmp ) ] ;
84740: LD_ADDR_VAR 0 3
84744: PUSH
84745: LD_VAR 0 2
84749: PUSH
84750: LD_INT 1
84752: PPUSH
84753: LD_VAR 0 2
84757: PPUSH
84758: CALL_OW 12
84762: ARRAY
84763: ST_TO_ADDR
// if Crawls ( un ) then
84764: LD_VAR 0 3
84768: PPUSH
84769: CALL_OW 318
84773: IFFALSE 84784
// ComWalk ( un ) ;
84775: LD_VAR 0 3
84779: PPUSH
84780: CALL_OW 138
// SetClass ( un , class_mortar ) ;
84784: LD_VAR 0 3
84788: PPUSH
84789: LD_INT 8
84791: PPUSH
84792: CALL_OW 336
// end ; 4 :
84796: GO 84902
84798: LD_INT 4
84800: DOUBLE
84801: EQUAL
84802: IFTRUE 84806
84804: GO 84880
84806: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
84807: LD_ADDR_VAR 0 2
84811: PUSH
84812: LD_INT 22
84814: PUSH
84815: LD_OWVAR 2
84819: PUSH
84820: EMPTY
84821: LIST
84822: LIST
84823: PUSH
84824: LD_INT 30
84826: PUSH
84827: LD_INT 29
84829: PUSH
84830: EMPTY
84831: LIST
84832: LIST
84833: PUSH
84834: EMPTY
84835: LIST
84836: LIST
84837: PPUSH
84838: CALL_OW 69
84842: ST_TO_ADDR
// if not tmp then
84843: LD_VAR 0 2
84847: NOT
84848: IFFALSE 84852
// exit ;
84850: GO 84902
// CenterNowOnUnits ( tmp [ 1 ] ) ;
84852: LD_VAR 0 2
84856: PUSH
84857: LD_INT 1
84859: ARRAY
84860: PPUSH
84861: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
84865: LD_VAR 0 2
84869: PUSH
84870: LD_INT 1
84872: ARRAY
84873: PPUSH
84874: CALL_OW 65
// end ; 5 .. 7 :
84878: GO 84902
84880: LD_INT 5
84882: DOUBLE
84883: GREATEREQUAL
84884: IFFALSE 84892
84886: LD_INT 7
84888: DOUBLE
84889: LESSEQUAL
84890: IFTRUE 84894
84892: GO 84901
84894: POP
// StreamSibBomb ; end ;
84895: CALL 81083 0 0
84899: GO 84902
84901: POP
// end ;
84902: PPOPN 3
84904: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
84905: LD_EXP 64
84909: IFFALSE 84917
84911: PUSH
84912: LD_EXP 114
84916: AND
84917: IFFALSE 85073
84919: GO 84921
84921: DISABLE
84922: LD_INT 0
84924: PPUSH
84925: PPUSH
84926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
84927: LD_ADDR_VAR 0 2
84931: PUSH
84932: LD_INT 81
84934: PUSH
84935: LD_OWVAR 2
84939: PUSH
84940: EMPTY
84941: LIST
84942: LIST
84943: PUSH
84944: LD_INT 2
84946: PUSH
84947: LD_INT 21
84949: PUSH
84950: LD_INT 1
84952: PUSH
84953: EMPTY
84954: LIST
84955: LIST
84956: PUSH
84957: LD_INT 21
84959: PUSH
84960: LD_INT 2
84962: PUSH
84963: EMPTY
84964: LIST
84965: LIST
84966: PUSH
84967: EMPTY
84968: LIST
84969: LIST
84970: LIST
84971: PUSH
84972: EMPTY
84973: LIST
84974: LIST
84975: PPUSH
84976: CALL_OW 69
84980: ST_TO_ADDR
// if not tmp then
84981: LD_VAR 0 2
84985: NOT
84986: IFFALSE 84990
// exit ;
84988: GO 85073
// p := 0 ;
84990: LD_ADDR_VAR 0 3
84994: PUSH
84995: LD_INT 0
84997: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
84998: LD_INT 35
85000: PPUSH
85001: CALL_OW 67
// p := p + 1 ;
85005: LD_ADDR_VAR 0 3
85009: PUSH
85010: LD_VAR 0 3
85014: PUSH
85015: LD_INT 1
85017: PLUS
85018: ST_TO_ADDR
// for i in tmp do
85019: LD_ADDR_VAR 0 1
85023: PUSH
85024: LD_VAR 0 2
85028: PUSH
85029: FOR_IN
85030: IFFALSE 85061
// if GetLives ( i ) < 1000 then
85032: LD_VAR 0 1
85036: PPUSH
85037: CALL_OW 256
85041: PUSH
85042: LD_INT 1000
85044: LESS
85045: IFFALSE 85059
// SetLives ( i , 1000 ) ;
85047: LD_VAR 0 1
85051: PPUSH
85052: LD_INT 1000
85054: PPUSH
85055: CALL_OW 234
85059: GO 85029
85061: POP
85062: POP
// until p > 20 ;
85063: LD_VAR 0 3
85067: PUSH
85068: LD_INT 20
85070: GREATER
85071: IFFALSE 84998
// end ;
85073: PPOPN 3
85075: END
// every 0 0$1 trigger StreamModeActive and sTime do
85076: LD_EXP 64
85080: IFFALSE 85088
85082: PUSH
85083: LD_EXP 115
85087: AND
85088: IFFALSE 85123
85090: GO 85092
85092: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
85093: LD_INT 28
85095: PPUSH
85096: LD_OWVAR 2
85100: PPUSH
85101: LD_INT 2
85103: PPUSH
85104: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
85108: LD_INT 30
85110: PPUSH
85111: LD_OWVAR 2
85115: PPUSH
85116: LD_INT 2
85118: PPUSH
85119: CALL_OW 322
// end ;
85123: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
85124: LD_EXP 64
85128: IFFALSE 85136
85130: PUSH
85131: LD_EXP 116
85135: AND
85136: IFFALSE 85257
85138: GO 85140
85140: DISABLE
85141: LD_INT 0
85143: PPUSH
85144: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
85145: LD_ADDR_VAR 0 2
85149: PUSH
85150: LD_INT 22
85152: PUSH
85153: LD_OWVAR 2
85157: PUSH
85158: EMPTY
85159: LIST
85160: LIST
85161: PUSH
85162: LD_INT 21
85164: PUSH
85165: LD_INT 1
85167: PUSH
85168: EMPTY
85169: LIST
85170: LIST
85171: PUSH
85172: LD_INT 3
85174: PUSH
85175: LD_INT 23
85177: PUSH
85178: LD_INT 0
85180: PUSH
85181: EMPTY
85182: LIST
85183: LIST
85184: PUSH
85185: EMPTY
85186: LIST
85187: LIST
85188: PUSH
85189: EMPTY
85190: LIST
85191: LIST
85192: LIST
85193: PPUSH
85194: CALL_OW 69
85198: ST_TO_ADDR
// if not tmp then
85199: LD_VAR 0 2
85203: NOT
85204: IFFALSE 85208
// exit ;
85206: GO 85257
// for i in tmp do
85208: LD_ADDR_VAR 0 1
85212: PUSH
85213: LD_VAR 0 2
85217: PUSH
85218: FOR_IN
85219: IFFALSE 85255
// begin if Crawls ( i ) then
85221: LD_VAR 0 1
85225: PPUSH
85226: CALL_OW 318
85230: IFFALSE 85241
// ComWalk ( i ) ;
85232: LD_VAR 0 1
85236: PPUSH
85237: CALL_OW 138
// SetClass ( i , 2 ) ;
85241: LD_VAR 0 1
85245: PPUSH
85246: LD_INT 2
85248: PPUSH
85249: CALL_OW 336
// end ;
85253: GO 85218
85255: POP
85256: POP
// end ;
85257: PPOPN 2
85259: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
85260: LD_EXP 64
85264: IFFALSE 85272
85266: PUSH
85267: LD_EXP 117
85271: AND
85272: IFFALSE 85562
85274: GO 85276
85276: DISABLE
85277: LD_INT 0
85279: PPUSH
85280: PPUSH
85281: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
85282: LD_OWVAR 2
85286: PPUSH
85287: LD_INT 9
85289: PPUSH
85290: LD_INT 1
85292: PPUSH
85293: LD_INT 1
85295: PPUSH
85296: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
85300: LD_INT 9
85302: PPUSH
85303: LD_OWVAR 2
85307: PPUSH
85308: CALL_OW 343
// uc_side := 9 ;
85312: LD_ADDR_OWVAR 20
85316: PUSH
85317: LD_INT 9
85319: ST_TO_ADDR
// uc_nation := 2 ;
85320: LD_ADDR_OWVAR 21
85324: PUSH
85325: LD_INT 2
85327: ST_TO_ADDR
// hc_name := Dark Warrior ;
85328: LD_ADDR_OWVAR 26
85332: PUSH
85333: LD_STRING Dark Warrior
85335: ST_TO_ADDR
// hc_gallery :=  ;
85336: LD_ADDR_OWVAR 33
85340: PUSH
85341: LD_STRING 
85343: ST_TO_ADDR
// hc_noskilllimit := true ;
85344: LD_ADDR_OWVAR 76
85348: PUSH
85349: LD_INT 1
85351: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
85352: LD_ADDR_OWVAR 31
85356: PUSH
85357: LD_INT 30
85359: PUSH
85360: LD_INT 30
85362: PUSH
85363: LD_INT 30
85365: PUSH
85366: LD_INT 30
85368: PUSH
85369: EMPTY
85370: LIST
85371: LIST
85372: LIST
85373: LIST
85374: ST_TO_ADDR
// un := CreateHuman ;
85375: LD_ADDR_VAR 0 3
85379: PUSH
85380: CALL_OW 44
85384: ST_TO_ADDR
// hc_noskilllimit := false ;
85385: LD_ADDR_OWVAR 76
85389: PUSH
85390: LD_INT 0
85392: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
85393: LD_VAR 0 3
85397: PPUSH
85398: LD_INT 1
85400: PPUSH
85401: CALL_OW 51
// ToLua ( playRanger() ) ;
85405: LD_STRING playRanger()
85407: PPUSH
85408: CALL_OW 559
// p := 0 ;
85412: LD_ADDR_VAR 0 2
85416: PUSH
85417: LD_INT 0
85419: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
85420: LD_INT 35
85422: PPUSH
85423: CALL_OW 67
// p := p + 1 ;
85427: LD_ADDR_VAR 0 2
85431: PUSH
85432: LD_VAR 0 2
85436: PUSH
85437: LD_INT 1
85439: PLUS
85440: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
85441: LD_VAR 0 3
85445: PPUSH
85446: CALL_OW 256
85450: PUSH
85451: LD_INT 1000
85453: LESS
85454: IFFALSE 85468
// SetLives ( un , 1000 ) ;
85456: LD_VAR 0 3
85460: PPUSH
85461: LD_INT 1000
85463: PPUSH
85464: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
85468: LD_VAR 0 3
85472: PPUSH
85473: LD_INT 81
85475: PUSH
85476: LD_OWVAR 2
85480: PUSH
85481: EMPTY
85482: LIST
85483: LIST
85484: PUSH
85485: LD_INT 91
85487: PUSH
85488: LD_VAR 0 3
85492: PUSH
85493: LD_INT 30
85495: PUSH
85496: EMPTY
85497: LIST
85498: LIST
85499: LIST
85500: PUSH
85501: EMPTY
85502: LIST
85503: LIST
85504: PPUSH
85505: CALL_OW 69
85509: PPUSH
85510: LD_VAR 0 3
85514: PPUSH
85515: CALL_OW 74
85519: PPUSH
85520: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
85524: LD_VAR 0 2
85528: PUSH
85529: LD_INT 80
85531: GREATER
85532: IFTRUE 85545
85534: PUSH
85535: LD_VAR 0 3
85539: PPUSH
85540: CALL_OW 301
85544: OR
85545: IFFALSE 85420
// if un then
85547: LD_VAR 0 3
85551: IFFALSE 85562
// RemoveUnit ( un ) ;
85553: LD_VAR 0 3
85557: PPUSH
85558: CALL_OW 64
// end ;
85562: PPOPN 3
85564: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
85565: LD_EXP 118
85569: IFFALSE 85685
85571: GO 85573
85573: DISABLE
85574: LD_INT 0
85576: PPUSH
85577: PPUSH
85578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
85579: LD_ADDR_VAR 0 2
85583: PUSH
85584: LD_INT 81
85586: PUSH
85587: LD_OWVAR 2
85591: PUSH
85592: EMPTY
85593: LIST
85594: LIST
85595: PUSH
85596: LD_INT 21
85598: PUSH
85599: LD_INT 1
85601: PUSH
85602: EMPTY
85603: LIST
85604: LIST
85605: PUSH
85606: EMPTY
85607: LIST
85608: LIST
85609: PPUSH
85610: CALL_OW 69
85614: ST_TO_ADDR
// ToLua ( playComputer() ) ;
85615: LD_STRING playComputer()
85617: PPUSH
85618: CALL_OW 559
// if not tmp then
85622: LD_VAR 0 2
85626: NOT
85627: IFFALSE 85631
// exit ;
85629: GO 85685
// for i in tmp do
85631: LD_ADDR_VAR 0 1
85635: PUSH
85636: LD_VAR 0 2
85640: PUSH
85641: FOR_IN
85642: IFFALSE 85683
// for j := 1 to 4 do
85644: LD_ADDR_VAR 0 3
85648: PUSH
85649: DOUBLE
85650: LD_INT 1
85652: DEC
85653: ST_TO_ADDR
85654: LD_INT 4
85656: PUSH
85657: FOR_TO
85658: IFFALSE 85679
// SetSkill ( i , j , 10 ) ;
85660: LD_VAR 0 1
85664: PPUSH
85665: LD_VAR 0 3
85669: PPUSH
85670: LD_INT 10
85672: PPUSH
85673: CALL_OW 237
85677: GO 85657
85679: POP
85680: POP
85681: GO 85641
85683: POP
85684: POP
// end ;
85685: PPOPN 3
85687: END
// every 0 0$1 trigger s30 do var i , tmp ;
85688: LD_EXP 119
85692: IFFALSE 85761
85694: GO 85696
85696: DISABLE
85697: LD_INT 0
85699: PPUSH
85700: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
85701: LD_ADDR_VAR 0 2
85705: PUSH
85706: LD_INT 22
85708: PUSH
85709: LD_OWVAR 2
85713: PUSH
85714: EMPTY
85715: LIST
85716: LIST
85717: PPUSH
85718: CALL_OW 69
85722: ST_TO_ADDR
// if not tmp then
85723: LD_VAR 0 2
85727: NOT
85728: IFFALSE 85732
// exit ;
85730: GO 85761
// for i in tmp do
85732: LD_ADDR_VAR 0 1
85736: PUSH
85737: LD_VAR 0 2
85741: PUSH
85742: FOR_IN
85743: IFFALSE 85759
// SetLives ( i , 300 ) ;
85745: LD_VAR 0 1
85749: PPUSH
85750: LD_INT 300
85752: PPUSH
85753: CALL_OW 234
85757: GO 85742
85759: POP
85760: POP
// end ;
85761: PPOPN 2
85763: END
// every 0 0$1 trigger s60 do var i , tmp ;
85764: LD_EXP 120
85768: IFFALSE 85837
85770: GO 85772
85772: DISABLE
85773: LD_INT 0
85775: PPUSH
85776: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
85777: LD_ADDR_VAR 0 2
85781: PUSH
85782: LD_INT 22
85784: PUSH
85785: LD_OWVAR 2
85789: PUSH
85790: EMPTY
85791: LIST
85792: LIST
85793: PPUSH
85794: CALL_OW 69
85798: ST_TO_ADDR
// if not tmp then
85799: LD_VAR 0 2
85803: NOT
85804: IFFALSE 85808
// exit ;
85806: GO 85837
// for i in tmp do
85808: LD_ADDR_VAR 0 1
85812: PUSH
85813: LD_VAR 0 2
85817: PUSH
85818: FOR_IN
85819: IFFALSE 85835
// SetLives ( i , 600 ) ;
85821: LD_VAR 0 1
85825: PPUSH
85826: LD_INT 600
85828: PPUSH
85829: CALL_OW 234
85833: GO 85818
85835: POP
85836: POP
// end ;
85837: PPOPN 2
85839: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
85840: LD_INT 0
85842: PPUSH
// case cmd of 301 :
85843: LD_VAR 0 1
85847: PUSH
85848: LD_INT 301
85850: DOUBLE
85851: EQUAL
85852: IFTRUE 85856
85854: GO 85888
85856: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
85857: LD_VAR 0 6
85861: PPUSH
85862: LD_VAR 0 7
85866: PPUSH
85867: LD_VAR 0 8
85871: PPUSH
85872: LD_VAR 0 4
85876: PPUSH
85877: LD_VAR 0 5
85881: PPUSH
85882: CALL 87101 0 5
85886: GO 86009
85888: LD_INT 302
85890: DOUBLE
85891: EQUAL
85892: IFTRUE 85896
85894: GO 85933
85896: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
85897: LD_VAR 0 6
85901: PPUSH
85902: LD_VAR 0 7
85906: PPUSH
85907: LD_VAR 0 8
85911: PPUSH
85912: LD_VAR 0 9
85916: PPUSH
85917: LD_VAR 0 4
85921: PPUSH
85922: LD_VAR 0 5
85926: PPUSH
85927: CALL 87192 0 6
85931: GO 86009
85933: LD_INT 303
85935: DOUBLE
85936: EQUAL
85937: IFTRUE 85941
85939: GO 85978
85941: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
85942: LD_VAR 0 6
85946: PPUSH
85947: LD_VAR 0 7
85951: PPUSH
85952: LD_VAR 0 8
85956: PPUSH
85957: LD_VAR 0 9
85961: PPUSH
85962: LD_VAR 0 4
85966: PPUSH
85967: LD_VAR 0 5
85971: PPUSH
85972: CALL 86014 0 6
85976: GO 86009
85978: LD_INT 304
85980: DOUBLE
85981: EQUAL
85982: IFTRUE 85986
85984: GO 86008
85986: POP
// hHackTeleport ( unit , x , y ) ; end ;
85987: LD_VAR 0 2
85991: PPUSH
85992: LD_VAR 0 4
85996: PPUSH
85997: LD_VAR 0 5
86001: PPUSH
86002: CALL 87785 0 3
86006: GO 86009
86008: POP
// end ;
86009: LD_VAR 0 12
86013: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
86014: LD_INT 0
86016: PPUSH
86017: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
86018: LD_VAR 0 1
86022: PUSH
86023: LD_INT 1
86025: LESS
86026: IFTRUE 86038
86028: PUSH
86029: LD_VAR 0 1
86033: PUSH
86034: LD_INT 3
86036: GREATER
86037: OR
86038: IFTRUE 86056
86040: PUSH
86041: LD_VAR 0 5
86045: PPUSH
86046: LD_VAR 0 6
86050: PPUSH
86051: CALL_OW 428
86055: OR
86056: IFFALSE 86060
// exit ;
86058: GO 86788
// uc_side := your_side ;
86060: LD_ADDR_OWVAR 20
86064: PUSH
86065: LD_OWVAR 2
86069: ST_TO_ADDR
// uc_nation := nation ;
86070: LD_ADDR_OWVAR 21
86074: PUSH
86075: LD_VAR 0 1
86079: ST_TO_ADDR
// bc_level = 1 ;
86080: LD_ADDR_OWVAR 43
86084: PUSH
86085: LD_INT 1
86087: ST_TO_ADDR
// case btype of 1 :
86088: LD_VAR 0 2
86092: PUSH
86093: LD_INT 1
86095: DOUBLE
86096: EQUAL
86097: IFTRUE 86101
86099: GO 86112
86101: POP
// bc_type := b_depot ; 2 :
86102: LD_ADDR_OWVAR 42
86106: PUSH
86107: LD_INT 0
86109: ST_TO_ADDR
86110: GO 86732
86112: LD_INT 2
86114: DOUBLE
86115: EQUAL
86116: IFTRUE 86120
86118: GO 86131
86120: POP
// bc_type := b_warehouse ; 3 :
86121: LD_ADDR_OWVAR 42
86125: PUSH
86126: LD_INT 1
86128: ST_TO_ADDR
86129: GO 86732
86131: LD_INT 3
86133: DOUBLE
86134: EQUAL
86135: IFTRUE 86139
86137: GO 86150
86139: POP
// bc_type := b_lab ; 4 .. 9 :
86140: LD_ADDR_OWVAR 42
86144: PUSH
86145: LD_INT 6
86147: ST_TO_ADDR
86148: GO 86732
86150: LD_INT 4
86152: DOUBLE
86153: GREATEREQUAL
86154: IFFALSE 86162
86156: LD_INT 9
86158: DOUBLE
86159: LESSEQUAL
86160: IFTRUE 86164
86162: GO 86224
86164: POP
// begin bc_type := b_lab_half ;
86165: LD_ADDR_OWVAR 42
86169: PUSH
86170: LD_INT 7
86172: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
86173: LD_ADDR_OWVAR 44
86177: PUSH
86178: LD_INT 10
86180: PUSH
86181: LD_INT 11
86183: PUSH
86184: LD_INT 12
86186: PUSH
86187: LD_INT 15
86189: PUSH
86190: LD_INT 14
86192: PUSH
86193: LD_INT 13
86195: PUSH
86196: EMPTY
86197: LIST
86198: LIST
86199: LIST
86200: LIST
86201: LIST
86202: LIST
86203: PUSH
86204: LD_VAR 0 2
86208: PUSH
86209: LD_INT 3
86211: MINUS
86212: ARRAY
86213: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
86214: LD_ADDR_OWVAR 45
86218: PUSH
86219: LD_INT 9
86221: ST_TO_ADDR
// end ; 10 .. 13 :
86222: GO 86732
86224: LD_INT 10
86226: DOUBLE
86227: GREATEREQUAL
86228: IFFALSE 86236
86230: LD_INT 13
86232: DOUBLE
86233: LESSEQUAL
86234: IFTRUE 86238
86236: GO 86315
86238: POP
// begin bc_type := b_lab_full ;
86239: LD_ADDR_OWVAR 42
86243: PUSH
86244: LD_INT 8
86246: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
86247: LD_ADDR_OWVAR 44
86251: PUSH
86252: LD_INT 10
86254: PUSH
86255: LD_INT 12
86257: PUSH
86258: LD_INT 14
86260: PUSH
86261: LD_INT 13
86263: PUSH
86264: EMPTY
86265: LIST
86266: LIST
86267: LIST
86268: LIST
86269: PUSH
86270: LD_VAR 0 2
86274: PUSH
86275: LD_INT 9
86277: MINUS
86278: ARRAY
86279: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
86280: LD_ADDR_OWVAR 45
86284: PUSH
86285: LD_INT 11
86287: PUSH
86288: LD_INT 15
86290: PUSH
86291: LD_INT 12
86293: PUSH
86294: LD_INT 15
86296: PUSH
86297: EMPTY
86298: LIST
86299: LIST
86300: LIST
86301: LIST
86302: PUSH
86303: LD_VAR 0 2
86307: PUSH
86308: LD_INT 9
86310: MINUS
86311: ARRAY
86312: ST_TO_ADDR
// end ; 14 :
86313: GO 86732
86315: LD_INT 14
86317: DOUBLE
86318: EQUAL
86319: IFTRUE 86323
86321: GO 86334
86323: POP
// bc_type := b_workshop ; 15 :
86324: LD_ADDR_OWVAR 42
86328: PUSH
86329: LD_INT 2
86331: ST_TO_ADDR
86332: GO 86732
86334: LD_INT 15
86336: DOUBLE
86337: EQUAL
86338: IFTRUE 86342
86340: GO 86353
86342: POP
// bc_type := b_factory ; 16 :
86343: LD_ADDR_OWVAR 42
86347: PUSH
86348: LD_INT 3
86350: ST_TO_ADDR
86351: GO 86732
86353: LD_INT 16
86355: DOUBLE
86356: EQUAL
86357: IFTRUE 86361
86359: GO 86372
86361: POP
// bc_type := b_ext_gun ; 17 :
86362: LD_ADDR_OWVAR 42
86366: PUSH
86367: LD_INT 17
86369: ST_TO_ADDR
86370: GO 86732
86372: LD_INT 17
86374: DOUBLE
86375: EQUAL
86376: IFTRUE 86380
86378: GO 86408
86380: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
86381: LD_ADDR_OWVAR 42
86385: PUSH
86386: LD_INT 19
86388: PUSH
86389: LD_INT 23
86391: PUSH
86392: LD_INT 19
86394: PUSH
86395: EMPTY
86396: LIST
86397: LIST
86398: LIST
86399: PUSH
86400: LD_VAR 0 1
86404: ARRAY
86405: ST_TO_ADDR
86406: GO 86732
86408: LD_INT 18
86410: DOUBLE
86411: EQUAL
86412: IFTRUE 86416
86414: GO 86427
86416: POP
// bc_type := b_ext_radar ; 19 :
86417: LD_ADDR_OWVAR 42
86421: PUSH
86422: LD_INT 20
86424: ST_TO_ADDR
86425: GO 86732
86427: LD_INT 19
86429: DOUBLE
86430: EQUAL
86431: IFTRUE 86435
86433: GO 86446
86435: POP
// bc_type := b_ext_radio ; 20 :
86436: LD_ADDR_OWVAR 42
86440: PUSH
86441: LD_INT 22
86443: ST_TO_ADDR
86444: GO 86732
86446: LD_INT 20
86448: DOUBLE
86449: EQUAL
86450: IFTRUE 86454
86452: GO 86465
86454: POP
// bc_type := b_ext_siberium ; 21 :
86455: LD_ADDR_OWVAR 42
86459: PUSH
86460: LD_INT 21
86462: ST_TO_ADDR
86463: GO 86732
86465: LD_INT 21
86467: DOUBLE
86468: EQUAL
86469: IFTRUE 86473
86471: GO 86484
86473: POP
// bc_type := b_ext_computer ; 22 :
86474: LD_ADDR_OWVAR 42
86478: PUSH
86479: LD_INT 24
86481: ST_TO_ADDR
86482: GO 86732
86484: LD_INT 22
86486: DOUBLE
86487: EQUAL
86488: IFTRUE 86492
86490: GO 86503
86492: POP
// bc_type := b_ext_track ; 23 :
86493: LD_ADDR_OWVAR 42
86497: PUSH
86498: LD_INT 16
86500: ST_TO_ADDR
86501: GO 86732
86503: LD_INT 23
86505: DOUBLE
86506: EQUAL
86507: IFTRUE 86511
86509: GO 86522
86511: POP
// bc_type := b_ext_laser ; 24 :
86512: LD_ADDR_OWVAR 42
86516: PUSH
86517: LD_INT 25
86519: ST_TO_ADDR
86520: GO 86732
86522: LD_INT 24
86524: DOUBLE
86525: EQUAL
86526: IFTRUE 86530
86528: GO 86541
86530: POP
// bc_type := b_control_tower ; 25 :
86531: LD_ADDR_OWVAR 42
86535: PUSH
86536: LD_INT 36
86538: ST_TO_ADDR
86539: GO 86732
86541: LD_INT 25
86543: DOUBLE
86544: EQUAL
86545: IFTRUE 86549
86547: GO 86560
86549: POP
// bc_type := b_breastwork ; 26 :
86550: LD_ADDR_OWVAR 42
86554: PUSH
86555: LD_INT 31
86557: ST_TO_ADDR
86558: GO 86732
86560: LD_INT 26
86562: DOUBLE
86563: EQUAL
86564: IFTRUE 86568
86566: GO 86579
86568: POP
// bc_type := b_bunker ; 27 :
86569: LD_ADDR_OWVAR 42
86573: PUSH
86574: LD_INT 32
86576: ST_TO_ADDR
86577: GO 86732
86579: LD_INT 27
86581: DOUBLE
86582: EQUAL
86583: IFTRUE 86587
86585: GO 86598
86587: POP
// bc_type := b_turret ; 28 :
86588: LD_ADDR_OWVAR 42
86592: PUSH
86593: LD_INT 33
86595: ST_TO_ADDR
86596: GO 86732
86598: LD_INT 28
86600: DOUBLE
86601: EQUAL
86602: IFTRUE 86606
86604: GO 86617
86606: POP
// bc_type := b_armoury ; 29 :
86607: LD_ADDR_OWVAR 42
86611: PUSH
86612: LD_INT 4
86614: ST_TO_ADDR
86615: GO 86732
86617: LD_INT 29
86619: DOUBLE
86620: EQUAL
86621: IFTRUE 86625
86623: GO 86636
86625: POP
// bc_type := b_barracks ; 30 :
86626: LD_ADDR_OWVAR 42
86630: PUSH
86631: LD_INT 5
86633: ST_TO_ADDR
86634: GO 86732
86636: LD_INT 30
86638: DOUBLE
86639: EQUAL
86640: IFTRUE 86644
86642: GO 86655
86644: POP
// bc_type := b_solar_power ; 31 :
86645: LD_ADDR_OWVAR 42
86649: PUSH
86650: LD_INT 27
86652: ST_TO_ADDR
86653: GO 86732
86655: LD_INT 31
86657: DOUBLE
86658: EQUAL
86659: IFTRUE 86663
86661: GO 86674
86663: POP
// bc_type := b_oil_power ; 32 :
86664: LD_ADDR_OWVAR 42
86668: PUSH
86669: LD_INT 26
86671: ST_TO_ADDR
86672: GO 86732
86674: LD_INT 32
86676: DOUBLE
86677: EQUAL
86678: IFTRUE 86682
86680: GO 86693
86682: POP
// bc_type := b_siberite_power ; 33 :
86683: LD_ADDR_OWVAR 42
86687: PUSH
86688: LD_INT 28
86690: ST_TO_ADDR
86691: GO 86732
86693: LD_INT 33
86695: DOUBLE
86696: EQUAL
86697: IFTRUE 86701
86699: GO 86712
86701: POP
// bc_type := b_oil_mine ; 34 :
86702: LD_ADDR_OWVAR 42
86706: PUSH
86707: LD_INT 29
86709: ST_TO_ADDR
86710: GO 86732
86712: LD_INT 34
86714: DOUBLE
86715: EQUAL
86716: IFTRUE 86720
86718: GO 86731
86720: POP
// bc_type := b_siberite_mine ; end ;
86721: LD_ADDR_OWVAR 42
86725: PUSH
86726: LD_INT 30
86728: ST_TO_ADDR
86729: GO 86732
86731: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
86732: LD_ADDR_VAR 0 8
86736: PUSH
86737: LD_VAR 0 5
86741: PPUSH
86742: LD_VAR 0 6
86746: PPUSH
86747: LD_VAR 0 3
86751: PPUSH
86752: CALL_OW 47
86756: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
86757: LD_OWVAR 42
86761: PUSH
86762: LD_INT 32
86764: PUSH
86765: LD_INT 33
86767: PUSH
86768: EMPTY
86769: LIST
86770: LIST
86771: IN
86772: IFFALSE 86788
// PlaceWeaponTurret ( b , weapon ) ;
86774: LD_VAR 0 8
86778: PPUSH
86779: LD_VAR 0 4
86783: PPUSH
86784: CALL_OW 431
// end ;
86788: LD_VAR 0 7
86792: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
86793: LD_INT 0
86795: PPUSH
86796: PPUSH
86797: PPUSH
86798: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
86799: LD_ADDR_VAR 0 4
86803: PUSH
86804: LD_INT 22
86806: PUSH
86807: LD_OWVAR 2
86811: PUSH
86812: EMPTY
86813: LIST
86814: LIST
86815: PUSH
86816: LD_INT 2
86818: PUSH
86819: LD_INT 30
86821: PUSH
86822: LD_INT 0
86824: PUSH
86825: EMPTY
86826: LIST
86827: LIST
86828: PUSH
86829: LD_INT 30
86831: PUSH
86832: LD_INT 1
86834: PUSH
86835: EMPTY
86836: LIST
86837: LIST
86838: PUSH
86839: EMPTY
86840: LIST
86841: LIST
86842: LIST
86843: PUSH
86844: EMPTY
86845: LIST
86846: LIST
86847: PPUSH
86848: CALL_OW 69
86852: ST_TO_ADDR
// if not tmp then
86853: LD_VAR 0 4
86857: NOT
86858: IFFALSE 86862
// exit ;
86860: GO 86921
// for i in tmp do
86862: LD_ADDR_VAR 0 2
86866: PUSH
86867: LD_VAR 0 4
86871: PUSH
86872: FOR_IN
86873: IFFALSE 86919
// for j = 1 to 3 do
86875: LD_ADDR_VAR 0 3
86879: PUSH
86880: DOUBLE
86881: LD_INT 1
86883: DEC
86884: ST_TO_ADDR
86885: LD_INT 3
86887: PUSH
86888: FOR_TO
86889: IFFALSE 86915
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
86891: LD_VAR 0 2
86895: PPUSH
86896: CALL_OW 274
86900: PPUSH
86901: LD_VAR 0 3
86905: PPUSH
86906: LD_INT 99999
86908: PPUSH
86909: CALL_OW 277
86913: GO 86888
86915: POP
86916: POP
86917: GO 86872
86919: POP
86920: POP
// end ;
86921: LD_VAR 0 1
86925: RET
// export function hHackSetLevel10 ; var i , j ; begin
86926: LD_INT 0
86928: PPUSH
86929: PPUSH
86930: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
86931: LD_ADDR_VAR 0 2
86935: PUSH
86936: LD_INT 21
86938: PUSH
86939: LD_INT 1
86941: PUSH
86942: EMPTY
86943: LIST
86944: LIST
86945: PPUSH
86946: CALL_OW 69
86950: PUSH
86951: FOR_IN
86952: IFFALSE 87004
// if IsSelected ( i ) then
86954: LD_VAR 0 2
86958: PPUSH
86959: CALL_OW 306
86963: IFFALSE 87002
// begin for j := 1 to 4 do
86965: LD_ADDR_VAR 0 3
86969: PUSH
86970: DOUBLE
86971: LD_INT 1
86973: DEC
86974: ST_TO_ADDR
86975: LD_INT 4
86977: PUSH
86978: FOR_TO
86979: IFFALSE 87000
// SetSkill ( i , j , 10 ) ;
86981: LD_VAR 0 2
86985: PPUSH
86986: LD_VAR 0 3
86990: PPUSH
86991: LD_INT 10
86993: PPUSH
86994: CALL_OW 237
86998: GO 86978
87000: POP
87001: POP
// end ;
87002: GO 86951
87004: POP
87005: POP
// end ;
87006: LD_VAR 0 1
87010: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
87011: LD_INT 0
87013: PPUSH
87014: PPUSH
87015: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
87016: LD_ADDR_VAR 0 2
87020: PUSH
87021: LD_INT 22
87023: PUSH
87024: LD_OWVAR 2
87028: PUSH
87029: EMPTY
87030: LIST
87031: LIST
87032: PUSH
87033: LD_INT 21
87035: PUSH
87036: LD_INT 1
87038: PUSH
87039: EMPTY
87040: LIST
87041: LIST
87042: PUSH
87043: EMPTY
87044: LIST
87045: LIST
87046: PPUSH
87047: CALL_OW 69
87051: PUSH
87052: FOR_IN
87053: IFFALSE 87094
// begin for j := 1 to 4 do
87055: LD_ADDR_VAR 0 3
87059: PUSH
87060: DOUBLE
87061: LD_INT 1
87063: DEC
87064: ST_TO_ADDR
87065: LD_INT 4
87067: PUSH
87068: FOR_TO
87069: IFFALSE 87090
// SetSkill ( i , j , 10 ) ;
87071: LD_VAR 0 2
87075: PPUSH
87076: LD_VAR 0 3
87080: PPUSH
87081: LD_INT 10
87083: PPUSH
87084: CALL_OW 237
87088: GO 87068
87090: POP
87091: POP
// end ;
87092: GO 87052
87094: POP
87095: POP
// end ;
87096: LD_VAR 0 1
87100: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
87101: LD_INT 0
87103: PPUSH
// uc_side := your_side ;
87104: LD_ADDR_OWVAR 20
87108: PUSH
87109: LD_OWVAR 2
87113: ST_TO_ADDR
// uc_nation := nation ;
87114: LD_ADDR_OWVAR 21
87118: PUSH
87119: LD_VAR 0 1
87123: ST_TO_ADDR
// InitHc ;
87124: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
87128: LD_INT 0
87130: PPUSH
87131: LD_VAR 0 2
87135: PPUSH
87136: LD_VAR 0 3
87140: PPUSH
87141: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
87145: LD_VAR 0 4
87149: PPUSH
87150: LD_VAR 0 5
87154: PPUSH
87155: CALL_OW 428
87159: PUSH
87160: LD_INT 0
87162: EQUAL
87163: IFFALSE 87187
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
87165: CALL_OW 44
87169: PPUSH
87170: LD_VAR 0 4
87174: PPUSH
87175: LD_VAR 0 5
87179: PPUSH
87180: LD_INT 1
87182: PPUSH
87183: CALL_OW 48
// end ;
87187: LD_VAR 0 6
87191: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
87192: LD_INT 0
87194: PPUSH
87195: PPUSH
// uc_side := your_side ;
87196: LD_ADDR_OWVAR 20
87200: PUSH
87201: LD_OWVAR 2
87205: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
87206: LD_VAR 0 1
87210: PUSH
87211: LD_INT 1
87213: PUSH
87214: LD_INT 2
87216: PUSH
87217: LD_INT 3
87219: PUSH
87220: LD_INT 4
87222: PUSH
87223: LD_INT 5
87225: PUSH
87226: EMPTY
87227: LIST
87228: LIST
87229: LIST
87230: LIST
87231: LIST
87232: IN
87233: IFFALSE 87245
// uc_nation := nation_american else
87235: LD_ADDR_OWVAR 21
87239: PUSH
87240: LD_INT 1
87242: ST_TO_ADDR
87243: GO 87288
// if chassis in [ 11 , 12 , 13 , 14 ] then
87245: LD_VAR 0 1
87249: PUSH
87250: LD_INT 11
87252: PUSH
87253: LD_INT 12
87255: PUSH
87256: LD_INT 13
87258: PUSH
87259: LD_INT 14
87261: PUSH
87262: EMPTY
87263: LIST
87264: LIST
87265: LIST
87266: LIST
87267: IN
87268: IFFALSE 87280
// uc_nation := nation_arabian else
87270: LD_ADDR_OWVAR 21
87274: PUSH
87275: LD_INT 2
87277: ST_TO_ADDR
87278: GO 87288
// uc_nation := nation_russian ;
87280: LD_ADDR_OWVAR 21
87284: PUSH
87285: LD_INT 3
87287: ST_TO_ADDR
// vc_chassis := chassis ;
87288: LD_ADDR_OWVAR 37
87292: PUSH
87293: LD_VAR 0 1
87297: ST_TO_ADDR
// vc_engine := engine ;
87298: LD_ADDR_OWVAR 39
87302: PUSH
87303: LD_VAR 0 2
87307: ST_TO_ADDR
// vc_control := control ;
87308: LD_ADDR_OWVAR 38
87312: PUSH
87313: LD_VAR 0 3
87317: ST_TO_ADDR
// vc_weapon := weapon ;
87318: LD_ADDR_OWVAR 40
87322: PUSH
87323: LD_VAR 0 4
87327: ST_TO_ADDR
// un := CreateVehicle ;
87328: LD_ADDR_VAR 0 8
87332: PUSH
87333: CALL_OW 45
87337: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
87338: LD_VAR 0 8
87342: PPUSH
87343: LD_INT 0
87345: PPUSH
87346: LD_INT 5
87348: PPUSH
87349: CALL_OW 12
87353: PPUSH
87354: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
87358: LD_VAR 0 8
87362: PPUSH
87363: LD_VAR 0 5
87367: PPUSH
87368: LD_VAR 0 6
87372: PPUSH
87373: LD_INT 1
87375: PPUSH
87376: CALL_OW 48
// end ;
87380: LD_VAR 0 7
87384: RET
// export hInvincible ; every 1 do
87385: GO 87387
87387: DISABLE
// hInvincible := [ ] ;
87388: LD_ADDR_EXP 121
87392: PUSH
87393: EMPTY
87394: ST_TO_ADDR
87395: END
// every 10 do var i ;
87396: GO 87398
87398: DISABLE
87399: LD_INT 0
87401: PPUSH
// begin enable ;
87402: ENABLE
// if not hInvincible then
87403: LD_EXP 121
87407: NOT
87408: IFFALSE 87412
// exit ;
87410: GO 87456
// for i in hInvincible do
87412: LD_ADDR_VAR 0 1
87416: PUSH
87417: LD_EXP 121
87421: PUSH
87422: FOR_IN
87423: IFFALSE 87454
// if GetLives ( i ) < 1000 then
87425: LD_VAR 0 1
87429: PPUSH
87430: CALL_OW 256
87434: PUSH
87435: LD_INT 1000
87437: LESS
87438: IFFALSE 87452
// SetLives ( i , 1000 ) ;
87440: LD_VAR 0 1
87444: PPUSH
87445: LD_INT 1000
87447: PPUSH
87448: CALL_OW 234
87452: GO 87422
87454: POP
87455: POP
// end ;
87456: PPOPN 1
87458: END
// export function hHackInvincible ; var i ; begin
87459: LD_INT 0
87461: PPUSH
87462: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
87463: LD_ADDR_VAR 0 2
87467: PUSH
87468: LD_INT 2
87470: PUSH
87471: LD_INT 21
87473: PUSH
87474: LD_INT 1
87476: PUSH
87477: EMPTY
87478: LIST
87479: LIST
87480: PUSH
87481: LD_INT 21
87483: PUSH
87484: LD_INT 2
87486: PUSH
87487: EMPTY
87488: LIST
87489: LIST
87490: PUSH
87491: EMPTY
87492: LIST
87493: LIST
87494: LIST
87495: PPUSH
87496: CALL_OW 69
87500: PUSH
87501: FOR_IN
87502: IFFALSE 87563
// if IsSelected ( i ) then
87504: LD_VAR 0 2
87508: PPUSH
87509: CALL_OW 306
87513: IFFALSE 87561
// begin if i in hInvincible then
87515: LD_VAR 0 2
87519: PUSH
87520: LD_EXP 121
87524: IN
87525: IFFALSE 87545
// hInvincible := hInvincible diff i else
87527: LD_ADDR_EXP 121
87531: PUSH
87532: LD_EXP 121
87536: PUSH
87537: LD_VAR 0 2
87541: DIFF
87542: ST_TO_ADDR
87543: GO 87561
// hInvincible := hInvincible union i ;
87545: LD_ADDR_EXP 121
87549: PUSH
87550: LD_EXP 121
87554: PUSH
87555: LD_VAR 0 2
87559: UNION
87560: ST_TO_ADDR
// end ;
87561: GO 87501
87563: POP
87564: POP
// end ;
87565: LD_VAR 0 1
87569: RET
// export function hHackInvisible ; var i , j ; begin
87570: LD_INT 0
87572: PPUSH
87573: PPUSH
87574: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
87575: LD_ADDR_VAR 0 2
87579: PUSH
87580: LD_INT 21
87582: PUSH
87583: LD_INT 1
87585: PUSH
87586: EMPTY
87587: LIST
87588: LIST
87589: PPUSH
87590: CALL_OW 69
87594: PUSH
87595: FOR_IN
87596: IFFALSE 87620
// if IsSelected ( i ) then
87598: LD_VAR 0 2
87602: PPUSH
87603: CALL_OW 306
87607: IFFALSE 87618
// ComForceInvisible ( i ) ;
87609: LD_VAR 0 2
87613: PPUSH
87614: CALL_OW 496
87618: GO 87595
87620: POP
87621: POP
// end ;
87622: LD_VAR 0 1
87626: RET
// export function hHackChangeYourSide ; begin
87627: LD_INT 0
87629: PPUSH
// if your_side = 8 then
87630: LD_OWVAR 2
87634: PUSH
87635: LD_INT 8
87637: EQUAL
87638: IFFALSE 87650
// your_side := 0 else
87640: LD_ADDR_OWVAR 2
87644: PUSH
87645: LD_INT 0
87647: ST_TO_ADDR
87648: GO 87664
// your_side := your_side + 1 ;
87650: LD_ADDR_OWVAR 2
87654: PUSH
87655: LD_OWVAR 2
87659: PUSH
87660: LD_INT 1
87662: PLUS
87663: ST_TO_ADDR
// end ;
87664: LD_VAR 0 1
87668: RET
// export function hHackChangeUnitSide ; var i , j ; begin
87669: LD_INT 0
87671: PPUSH
87672: PPUSH
87673: PPUSH
// for i in all_units do
87674: LD_ADDR_VAR 0 2
87678: PUSH
87679: LD_OWVAR 3
87683: PUSH
87684: FOR_IN
87685: IFFALSE 87763
// if IsSelected ( i ) then
87687: LD_VAR 0 2
87691: PPUSH
87692: CALL_OW 306
87696: IFFALSE 87761
// begin j := GetSide ( i ) ;
87698: LD_ADDR_VAR 0 3
87702: PUSH
87703: LD_VAR 0 2
87707: PPUSH
87708: CALL_OW 255
87712: ST_TO_ADDR
// if j = 8 then
87713: LD_VAR 0 3
87717: PUSH
87718: LD_INT 8
87720: EQUAL
87721: IFFALSE 87733
// j := 0 else
87723: LD_ADDR_VAR 0 3
87727: PUSH
87728: LD_INT 0
87730: ST_TO_ADDR
87731: GO 87747
// j := j + 1 ;
87733: LD_ADDR_VAR 0 3
87737: PUSH
87738: LD_VAR 0 3
87742: PUSH
87743: LD_INT 1
87745: PLUS
87746: ST_TO_ADDR
// SetSide ( i , j ) ;
87747: LD_VAR 0 2
87751: PPUSH
87752: LD_VAR 0 3
87756: PPUSH
87757: CALL_OW 235
// end ;
87761: GO 87684
87763: POP
87764: POP
// end ;
87765: LD_VAR 0 1
87769: RET
// export function hHackFog ; begin
87770: LD_INT 0
87772: PPUSH
// FogOff ( true ) ;
87773: LD_INT 1
87775: PPUSH
87776: CALL_OW 344
// end ;
87780: LD_VAR 0 1
87784: RET
// export function hHackTeleport ( unit , x , y ) ; begin
87785: LD_INT 0
87787: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
87788: LD_VAR 0 1
87792: PPUSH
87793: LD_VAR 0 2
87797: PPUSH
87798: LD_VAR 0 3
87802: PPUSH
87803: LD_INT 1
87805: PPUSH
87806: LD_INT 1
87808: PPUSH
87809: CALL_OW 483
// CenterOnXY ( x , y ) ;
87813: LD_VAR 0 2
87817: PPUSH
87818: LD_VAR 0 3
87822: PPUSH
87823: CALL_OW 84
// end ;
87827: LD_VAR 0 4
87831: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
87832: LD_INT 0
87834: PPUSH
87835: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
87836: LD_VAR 0 1
87840: NOT
87841: IFTRUE 87860
87843: PUSH
87844: LD_VAR 0 2
87848: PPUSH
87849: LD_VAR 0 3
87853: PPUSH
87854: CALL_OW 488
87858: NOT
87859: OR
87860: IFTRUE 87895
87862: PUSH
87863: LD_VAR 0 1
87867: PPUSH
87868: CALL_OW 266
87872: PUSH
87873: LD_INT 3
87875: NONEQUAL
87876: IFFALSE 87894
87878: PUSH
87879: LD_VAR 0 1
87883: PPUSH
87884: CALL_OW 247
87888: PUSH
87889: LD_INT 1
87891: EQUAL
87892: NOT
87893: AND
87894: OR
87895: IFFALSE 87899
// exit ;
87897: GO 88181
// if GetType ( factory ) = unit_human then
87899: LD_VAR 0 1
87903: PPUSH
87904: CALL_OW 247
87908: PUSH
87909: LD_INT 1
87911: EQUAL
87912: IFFALSE 87929
// factory := IsInUnit ( factory ) ;
87914: LD_ADDR_VAR 0 1
87918: PUSH
87919: LD_VAR 0 1
87923: PPUSH
87924: CALL_OW 310
87928: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
87929: LD_VAR 0 1
87933: PPUSH
87934: CALL_OW 266
87938: PUSH
87939: LD_INT 3
87941: NONEQUAL
87942: IFFALSE 87946
// exit ;
87944: GO 88181
// for i := 1 to Count ( factoryWaypoints ) do
87946: LD_ADDR_VAR 0 5
87950: PUSH
87951: DOUBLE
87952: LD_INT 1
87954: DEC
87955: ST_TO_ADDR
87956: LD_EXP 122
87960: PPUSH
87961: CALL 31922 0 1
87965: PUSH
87966: FOR_TO
87967: IFFALSE 88129
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
87969: LD_VAR 0 2
87973: PPUSH
87974: LD_VAR 0 3
87978: PPUSH
87979: CALL_OW 428
87983: PUSH
87984: LD_EXP 122
87988: PUSH
87989: LD_VAR 0 5
87993: ARRAY
87994: PUSH
87995: LD_INT 2
87997: ARRAY
87998: EQUAL
87999: IFFALSE 88031
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
88001: LD_ADDR_EXP 122
88005: PUSH
88006: LD_EXP 122
88010: PPUSH
88011: LD_VAR 0 5
88015: PPUSH
88016: CALL_OW 3
88020: ST_TO_ADDR
// UpdateFactoryWaypoints ;
88021: CALL 88186 0 0
// exit ;
88025: POP
88026: POP
88027: GO 88181
// end else
88029: GO 88127
// if factory = factoryWaypoints [ i ] [ 2 ] then
88031: LD_VAR 0 1
88035: PUSH
88036: LD_EXP 122
88040: PUSH
88041: LD_VAR 0 5
88045: ARRAY
88046: PUSH
88047: LD_INT 2
88049: ARRAY
88050: EQUAL
88051: IFFALSE 88127
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
88053: LD_ADDR_EXP 122
88057: PUSH
88058: LD_EXP 122
88062: PPUSH
88063: LD_VAR 0 5
88067: PPUSH
88068: CALL_OW 3
88072: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
88073: LD_ADDR_EXP 122
88077: PUSH
88078: LD_EXP 122
88082: PPUSH
88083: LD_VAR 0 1
88087: PPUSH
88088: CALL_OW 255
88092: PUSH
88093: LD_VAR 0 1
88097: PUSH
88098: LD_VAR 0 2
88102: PUSH
88103: LD_VAR 0 3
88107: PUSH
88108: EMPTY
88109: LIST
88110: LIST
88111: LIST
88112: LIST
88113: PPUSH
88114: CALL 67854 0 2
88118: ST_TO_ADDR
// UpdateFactoryWaypoints ;
88119: CALL 88186 0 0
// exit ;
88123: POP
88124: POP
88125: GO 88181
// end ; end ;
88127: GO 87966
88129: POP
88130: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
88131: LD_ADDR_EXP 122
88135: PUSH
88136: LD_EXP 122
88140: PPUSH
88141: LD_VAR 0 1
88145: PPUSH
88146: CALL_OW 255
88150: PUSH
88151: LD_VAR 0 1
88155: PUSH
88156: LD_VAR 0 2
88160: PUSH
88161: LD_VAR 0 3
88165: PUSH
88166: EMPTY
88167: LIST
88168: LIST
88169: LIST
88170: LIST
88171: PPUSH
88172: CALL 67854 0 2
88176: ST_TO_ADDR
// UpdateFactoryWaypoints ;
88177: CALL 88186 0 0
// end ;
88181: LD_VAR 0 4
88185: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
88186: LD_INT 0
88188: PPUSH
88189: PPUSH
88190: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
88191: LD_STRING resetFactoryWaypoint();
88193: PPUSH
88194: CALL_OW 559
// if factoryWaypoints then
88198: LD_EXP 122
88202: IFFALSE 88323
// begin list := factoryWaypoints ;
88204: LD_ADDR_VAR 0 3
88208: PUSH
88209: LD_EXP 122
88213: ST_TO_ADDR
// for i := 1 to list do
88214: LD_ADDR_VAR 0 2
88218: PUSH
88219: DOUBLE
88220: LD_INT 1
88222: DEC
88223: ST_TO_ADDR
88224: LD_VAR 0 3
88228: PUSH
88229: FOR_TO
88230: IFFALSE 88321
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
88232: LD_STRING setFactoryWaypointXY(
88234: PUSH
88235: LD_VAR 0 3
88239: PUSH
88240: LD_VAR 0 2
88244: ARRAY
88245: PUSH
88246: LD_INT 1
88248: ARRAY
88249: STR
88250: PUSH
88251: LD_STRING ,
88253: STR
88254: PUSH
88255: LD_VAR 0 3
88259: PUSH
88260: LD_VAR 0 2
88264: ARRAY
88265: PUSH
88266: LD_INT 2
88268: ARRAY
88269: STR
88270: PUSH
88271: LD_STRING ,
88273: STR
88274: PUSH
88275: LD_VAR 0 3
88279: PUSH
88280: LD_VAR 0 2
88284: ARRAY
88285: PUSH
88286: LD_INT 3
88288: ARRAY
88289: STR
88290: PUSH
88291: LD_STRING ,
88293: STR
88294: PUSH
88295: LD_VAR 0 3
88299: PUSH
88300: LD_VAR 0 2
88304: ARRAY
88305: PUSH
88306: LD_INT 4
88308: ARRAY
88309: STR
88310: PUSH
88311: LD_STRING )
88313: STR
88314: PPUSH
88315: CALL_OW 559
88319: GO 88229
88321: POP
88322: POP
// end ; end ;
88323: LD_VAR 0 1
88327: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
88328: LD_INT 0
88330: PPUSH
// if HexInfo ( x , y ) = warehouse then
88331: LD_VAR 0 2
88335: PPUSH
88336: LD_VAR 0 3
88340: PPUSH
88341: CALL_OW 428
88345: PUSH
88346: LD_VAR 0 1
88350: EQUAL
88351: IFFALSE 88378
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
88353: LD_ADDR_EXP 124
88357: PUSH
88358: LD_EXP 124
88362: PPUSH
88363: LD_VAR 0 1
88367: PPUSH
88368: LD_INT 0
88370: PPUSH
88371: CALL_OW 1
88375: ST_TO_ADDR
88376: GO 88429
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
88378: LD_ADDR_EXP 124
88382: PUSH
88383: LD_EXP 124
88387: PPUSH
88388: LD_VAR 0 1
88392: PPUSH
88393: LD_VAR 0 1
88397: PPUSH
88398: CALL_OW 255
88402: PUSH
88403: LD_VAR 0 1
88407: PUSH
88408: LD_VAR 0 2
88412: PUSH
88413: LD_VAR 0 3
88417: PUSH
88418: EMPTY
88419: LIST
88420: LIST
88421: LIST
88422: LIST
88423: PPUSH
88424: CALL_OW 1
88428: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
88429: CALL 88438 0 0
// end ;
88433: LD_VAR 0 4
88437: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
88438: LD_INT 0
88440: PPUSH
88441: PPUSH
88442: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
88443: LD_STRING resetWarehouseGatheringPoints();
88445: PPUSH
88446: CALL_OW 559
// if warehouseGatheringPoints then
88450: LD_EXP 124
88454: IFFALSE 88580
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
88456: LD_ADDR_VAR 0 3
88460: PUSH
88461: LD_EXP 124
88465: PPUSH
88466: CALL 71788 0 1
88470: ST_TO_ADDR
// for i := 1 to list do
88471: LD_ADDR_VAR 0 2
88475: PUSH
88476: DOUBLE
88477: LD_INT 1
88479: DEC
88480: ST_TO_ADDR
88481: LD_VAR 0 3
88485: PUSH
88486: FOR_TO
88487: IFFALSE 88578
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
88489: LD_STRING setWarehouseGatheringPointXY(
88491: PUSH
88492: LD_VAR 0 3
88496: PUSH
88497: LD_VAR 0 2
88501: ARRAY
88502: PUSH
88503: LD_INT 1
88505: ARRAY
88506: STR
88507: PUSH
88508: LD_STRING ,
88510: STR
88511: PUSH
88512: LD_VAR 0 3
88516: PUSH
88517: LD_VAR 0 2
88521: ARRAY
88522: PUSH
88523: LD_INT 2
88525: ARRAY
88526: STR
88527: PUSH
88528: LD_STRING ,
88530: STR
88531: PUSH
88532: LD_VAR 0 3
88536: PUSH
88537: LD_VAR 0 2
88541: ARRAY
88542: PUSH
88543: LD_INT 3
88545: ARRAY
88546: STR
88547: PUSH
88548: LD_STRING ,
88550: STR
88551: PUSH
88552: LD_VAR 0 3
88556: PUSH
88557: LD_VAR 0 2
88561: ARRAY
88562: PUSH
88563: LD_INT 4
88565: ARRAY
88566: STR
88567: PUSH
88568: LD_STRING )
88570: STR
88571: PPUSH
88572: CALL_OW 559
88576: GO 88486
88578: POP
88579: POP
// end ; end ;
88580: LD_VAR 0 1
88584: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
88585: LD_EXP 124
88589: IFFALSE 89284
88591: GO 88593
88593: DISABLE
88594: LD_INT 0
88596: PPUSH
88597: PPUSH
88598: PPUSH
88599: PPUSH
88600: PPUSH
88601: PPUSH
88602: PPUSH
88603: PPUSH
88604: PPUSH
// begin enable ;
88605: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
88606: LD_ADDR_VAR 0 3
88610: PUSH
88611: LD_EXP 124
88615: PPUSH
88616: CALL 71788 0 1
88620: ST_TO_ADDR
// if not list then
88621: LD_VAR 0 3
88625: NOT
88626: IFFALSE 88630
// exit ;
88628: GO 89284
// for i := 1 to list do
88630: LD_ADDR_VAR 0 1
88634: PUSH
88635: DOUBLE
88636: LD_INT 1
88638: DEC
88639: ST_TO_ADDR
88640: LD_VAR 0 3
88644: PUSH
88645: FOR_TO
88646: IFFALSE 89282
// begin depot := list [ i ] [ 2 ] ;
88648: LD_ADDR_VAR 0 8
88652: PUSH
88653: LD_VAR 0 3
88657: PUSH
88658: LD_VAR 0 1
88662: ARRAY
88663: PUSH
88664: LD_INT 2
88666: ARRAY
88667: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
88668: LD_ADDR_VAR 0 5
88672: PUSH
88673: LD_VAR 0 3
88677: PUSH
88678: LD_VAR 0 1
88682: ARRAY
88683: PUSH
88684: LD_INT 1
88686: ARRAY
88687: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
88688: LD_VAR 0 8
88692: PPUSH
88693: CALL_OW 301
88697: IFTRUE 88716
88699: PUSH
88700: LD_VAR 0 5
88704: PUSH
88705: LD_VAR 0 8
88709: PPUSH
88710: CALL_OW 255
88714: NONEQUAL
88715: OR
88716: IFFALSE 88745
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
88718: LD_ADDR_EXP 124
88722: PUSH
88723: LD_EXP 124
88727: PPUSH
88728: LD_VAR 0 8
88732: PPUSH
88733: LD_INT 0
88735: PPUSH
88736: CALL_OW 1
88740: ST_TO_ADDR
// exit ;
88741: POP
88742: POP
88743: GO 89284
// end ; x := list [ i ] [ 3 ] ;
88745: LD_ADDR_VAR 0 6
88749: PUSH
88750: LD_VAR 0 3
88754: PUSH
88755: LD_VAR 0 1
88759: ARRAY
88760: PUSH
88761: LD_INT 3
88763: ARRAY
88764: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
88765: LD_ADDR_VAR 0 7
88769: PUSH
88770: LD_VAR 0 3
88774: PUSH
88775: LD_VAR 0 1
88779: ARRAY
88780: PUSH
88781: LD_INT 4
88783: ARRAY
88784: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
88785: LD_ADDR_VAR 0 9
88789: PUSH
88790: LD_VAR 0 6
88794: PPUSH
88795: LD_VAR 0 7
88799: PPUSH
88800: LD_INT 16
88802: PPUSH
88803: CALL 70362 0 3
88807: ST_TO_ADDR
// if not cratesNearbyPoint then
88808: LD_VAR 0 9
88812: NOT
88813: IFFALSE 88819
// exit ;
88815: POP
88816: POP
88817: GO 89284
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
88819: LD_ADDR_VAR 0 4
88823: PUSH
88824: LD_INT 22
88826: PUSH
88827: LD_VAR 0 5
88831: PUSH
88832: EMPTY
88833: LIST
88834: LIST
88835: PUSH
88836: LD_INT 3
88838: PUSH
88839: LD_INT 60
88841: PUSH
88842: EMPTY
88843: LIST
88844: PUSH
88845: EMPTY
88846: LIST
88847: LIST
88848: PUSH
88849: LD_INT 91
88851: PUSH
88852: LD_VAR 0 8
88856: PUSH
88857: LD_INT 6
88859: PUSH
88860: EMPTY
88861: LIST
88862: LIST
88863: LIST
88864: PUSH
88865: LD_INT 2
88867: PUSH
88868: LD_INT 25
88870: PUSH
88871: LD_INT 2
88873: PUSH
88874: EMPTY
88875: LIST
88876: LIST
88877: PUSH
88878: LD_INT 25
88880: PUSH
88881: LD_INT 16
88883: PUSH
88884: EMPTY
88885: LIST
88886: LIST
88887: PUSH
88888: EMPTY
88889: LIST
88890: LIST
88891: LIST
88892: PUSH
88893: EMPTY
88894: LIST
88895: LIST
88896: LIST
88897: LIST
88898: PPUSH
88899: CALL_OW 69
88903: PUSH
88904: LD_VAR 0 8
88908: PPUSH
88909: CALL_OW 313
88913: PPUSH
88914: LD_INT 3
88916: PUSH
88917: LD_INT 60
88919: PUSH
88920: EMPTY
88921: LIST
88922: PUSH
88923: EMPTY
88924: LIST
88925: LIST
88926: PUSH
88927: LD_INT 2
88929: PUSH
88930: LD_INT 25
88932: PUSH
88933: LD_INT 2
88935: PUSH
88936: EMPTY
88937: LIST
88938: LIST
88939: PUSH
88940: LD_INT 25
88942: PUSH
88943: LD_INT 16
88945: PUSH
88946: EMPTY
88947: LIST
88948: LIST
88949: PUSH
88950: EMPTY
88951: LIST
88952: LIST
88953: LIST
88954: PUSH
88955: EMPTY
88956: LIST
88957: LIST
88958: PPUSH
88959: CALL_OW 72
88963: UNION
88964: ST_TO_ADDR
// if tmp then
88965: LD_VAR 0 4
88969: IFFALSE 89049
// begin tmp := ShrinkArray ( tmp , 3 ) ;
88971: LD_ADDR_VAR 0 4
88975: PUSH
88976: LD_VAR 0 4
88980: PPUSH
88981: LD_INT 3
88983: PPUSH
88984: CALL 68169 0 2
88988: ST_TO_ADDR
// for j in tmp do
88989: LD_ADDR_VAR 0 2
88993: PUSH
88994: LD_VAR 0 4
88998: PUSH
88999: FOR_IN
89000: IFFALSE 89043
// begin if IsInUnit ( j ) then
89002: LD_VAR 0 2
89006: PPUSH
89007: CALL_OW 310
89011: IFFALSE 89022
// ComExit ( j ) ;
89013: LD_VAR 0 2
89017: PPUSH
89018: CALL 68252 0 1
// AddComCollect ( j , x , y ) ;
89022: LD_VAR 0 2
89026: PPUSH
89027: LD_VAR 0 6
89031: PPUSH
89032: LD_VAR 0 7
89036: PPUSH
89037: CALL_OW 177
// end ;
89041: GO 88999
89043: POP
89044: POP
// exit ;
89045: POP
89046: POP
89047: GO 89284
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
89049: LD_ADDR_VAR 0 4
89053: PUSH
89054: LD_INT 22
89056: PUSH
89057: LD_VAR 0 5
89061: PUSH
89062: EMPTY
89063: LIST
89064: LIST
89065: PUSH
89066: LD_INT 91
89068: PUSH
89069: LD_VAR 0 8
89073: PUSH
89074: LD_INT 8
89076: PUSH
89077: EMPTY
89078: LIST
89079: LIST
89080: LIST
89081: PUSH
89082: LD_INT 2
89084: PUSH
89085: LD_INT 34
89087: PUSH
89088: LD_INT 12
89090: PUSH
89091: EMPTY
89092: LIST
89093: LIST
89094: PUSH
89095: LD_INT 34
89097: PUSH
89098: LD_INT 51
89100: PUSH
89101: EMPTY
89102: LIST
89103: LIST
89104: PUSH
89105: LD_INT 34
89107: PUSH
89108: LD_INT 32
89110: PUSH
89111: EMPTY
89112: LIST
89113: LIST
89114: PUSH
89115: LD_INT 34
89117: PUSH
89118: LD_INT 89
89120: PUSH
89121: EMPTY
89122: LIST
89123: LIST
89124: PUSH
89125: EMPTY
89126: LIST
89127: LIST
89128: LIST
89129: LIST
89130: LIST
89131: PUSH
89132: EMPTY
89133: LIST
89134: LIST
89135: LIST
89136: PPUSH
89137: CALL_OW 69
89141: ST_TO_ADDR
// if tmp then
89142: LD_VAR 0 4
89146: IFFALSE 89280
// begin for j in tmp do
89148: LD_ADDR_VAR 0 2
89152: PUSH
89153: LD_VAR 0 4
89157: PUSH
89158: FOR_IN
89159: IFFALSE 89278
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
89161: LD_VAR 0 2
89165: PPUSH
89166: CALL_OW 262
89170: PUSH
89171: LD_INT 3
89173: EQUAL
89174: IFTRUE 89191
89176: PUSH
89177: LD_VAR 0 2
89181: PPUSH
89182: CALL_OW 261
89186: PUSH
89187: LD_INT 20
89189: GREATER
89190: OR
89191: IFFALSE 89205
89193: PUSH
89194: LD_VAR 0 2
89198: PPUSH
89199: CALL_OW 314
89203: NOT
89204: AND
89205: IFFALSE 89235
89207: PUSH
89208: LD_VAR 0 2
89212: PPUSH
89213: CALL_OW 263
89217: PUSH
89218: LD_INT 1
89220: NONEQUAL
89221: IFTRUE 89234
89223: PUSH
89224: LD_VAR 0 2
89228: PPUSH
89229: CALL_OW 311
89233: OR
89234: AND
89235: IFFALSE 89276
// begin ComCollect ( j , x , y ) ;
89237: LD_VAR 0 2
89241: PPUSH
89242: LD_VAR 0 6
89246: PPUSH
89247: LD_VAR 0 7
89251: PPUSH
89252: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
89256: LD_VAR 0 2
89260: PPUSH
89261: LD_VAR 0 8
89265: PPUSH
89266: CALL_OW 172
// exit ;
89270: POP
89271: POP
89272: POP
89273: POP
89274: GO 89284
// end ;
89276: GO 89158
89278: POP
89279: POP
// end ; end ;
89280: GO 88645
89282: POP
89283: POP
// end ; end_of_file
89284: PPOPN 9
89286: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
89287: LD_VAR 0 1
89291: PUSH
89292: LD_INT 200
89294: DOUBLE
89295: GREATEREQUAL
89296: IFFALSE 89304
89298: LD_INT 299
89300: DOUBLE
89301: LESSEQUAL
89302: IFTRUE 89306
89304: GO 89338
89306: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
89307: LD_VAR 0 1
89311: PPUSH
89312: LD_VAR 0 2
89316: PPUSH
89317: LD_VAR 0 3
89321: PPUSH
89322: LD_VAR 0 4
89326: PPUSH
89327: LD_VAR 0 5
89331: PPUSH
89332: CALL 90119 0 5
89336: GO 89415
89338: LD_INT 300
89340: DOUBLE
89341: GREATEREQUAL
89342: IFFALSE 89350
89344: LD_INT 399
89346: DOUBLE
89347: LESSEQUAL
89348: IFTRUE 89352
89350: GO 89414
89352: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
89353: LD_VAR 0 1
89357: PPUSH
89358: LD_VAR 0 2
89362: PPUSH
89363: LD_VAR 0 3
89367: PPUSH
89368: LD_VAR 0 4
89372: PPUSH
89373: LD_VAR 0 5
89377: PPUSH
89378: LD_VAR 0 6
89382: PPUSH
89383: LD_VAR 0 7
89387: PPUSH
89388: LD_VAR 0 8
89392: PPUSH
89393: LD_VAR 0 9
89397: PPUSH
89398: LD_VAR 0 10
89402: PPUSH
89403: LD_VAR 0 11
89407: PPUSH
89408: CALL 85840 0 11
89412: GO 89415
89414: POP
// end ;
89415: PPOPN 11
89417: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
89418: LD_VAR 0 1
89422: PPUSH
89423: LD_VAR 0 2
89427: PPUSH
89428: LD_VAR 0 3
89432: PPUSH
89433: LD_VAR 0 4
89437: PPUSH
89438: LD_VAR 0 5
89442: PPUSH
89443: CALL 89500 0 5
// end ; end_of_file
89447: PPOPN 5
89449: END
// export function SOS_UnitDestroyed ( un ) ; begin
89450: LD_INT 0
89452: PPUSH
// ComRadiation ( un ) ;
89453: LD_VAR 0 1
89457: PPUSH
89458: CALL 90539 0 1
// end ;
89462: LD_VAR 0 2
89466: RET
// export function SOS_UnitKamikazed ( un ) ; begin
89467: LD_INT 0
89469: PPUSH
// ComRadiation ( un ) ;
89470: LD_VAR 0 1
89474: PPUSH
89475: CALL 90539 0 1
// end ;
89479: LD_VAR 0 2
89483: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
89484: LD_INT 0
89486: PPUSH
// end ;
89487: LD_VAR 0 4
89491: RET
// export function SOS_Command ( cmd ) ; begin
89492: LD_INT 0
89494: PPUSH
// end ;
89495: LD_VAR 0 2
89499: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
89500: LD_INT 0
89502: PPUSH
// end ;
89503: LD_VAR 0 6
89507: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
89508: LD_INT 0
89510: PPUSH
89511: PPUSH
89512: PPUSH
89513: PPUSH
// if not vehicle or not factory then
89514: LD_VAR 0 1
89518: NOT
89519: IFTRUE 89528
89521: PUSH
89522: LD_VAR 0 2
89526: NOT
89527: OR
89528: IFFALSE 89532
// exit ;
89530: GO 90114
// if not factoryWaypoints then
89532: LD_EXP 122
89536: NOT
89537: IFFALSE 89541
// exit ;
89539: GO 90114
// for i := 1 to Count ( factoryWaypoints ) do
89541: LD_ADDR_VAR 0 4
89545: PUSH
89546: DOUBLE
89547: LD_INT 1
89549: DEC
89550: ST_TO_ADDR
89551: LD_EXP 122
89555: PPUSH
89556: CALL 31922 0 1
89560: PUSH
89561: FOR_TO
89562: IFFALSE 90112
// if factoryWaypoints [ i ] [ 2 ] = factory then
89564: LD_EXP 122
89568: PUSH
89569: LD_VAR 0 4
89573: ARRAY
89574: PUSH
89575: LD_INT 2
89577: ARRAY
89578: PUSH
89579: LD_VAR 0 2
89583: EQUAL
89584: IFFALSE 90110
// begin if GetControl ( vehicle ) = control_manual then
89586: LD_VAR 0 1
89590: PPUSH
89591: CALL_OW 263
89595: PUSH
89596: LD_INT 1
89598: EQUAL
89599: IFFALSE 89963
// begin driver := IsDrivenBy ( vehicle ) ;
89601: LD_ADDR_VAR 0 5
89605: PUSH
89606: LD_VAR 0 1
89610: PPUSH
89611: CALL_OW 311
89615: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
89616: LD_VAR 0 5
89620: PUSH
89621: LD_EXP 123
89625: IN
89626: IFTRUE 89640
89628: PUSH
89629: LD_VAR 0 1
89633: PUSH
89634: LD_EXP 123
89638: IN
89639: OR
89640: IFFALSE 89646
// exit ;
89642: POP
89643: POP
89644: GO 90114
// if not HasTask ( driver ) then
89646: LD_VAR 0 5
89650: PPUSH
89651: CALL_OW 314
89655: NOT
89656: IFFALSE 89961
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
89658: LD_ADDR_EXP 123
89662: PUSH
89663: LD_EXP 123
89667: PPUSH
89668: LD_VAR 0 5
89672: PPUSH
89673: CALL 67854 0 2
89677: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
89678: LD_ADDR_EXP 123
89682: PUSH
89683: LD_EXP 123
89687: PPUSH
89688: LD_VAR 0 1
89692: PPUSH
89693: CALL 67854 0 2
89697: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
89698: LD_ADDR_VAR 0 6
89702: PUSH
89703: LD_EXP 122
89707: PUSH
89708: LD_VAR 0 4
89712: ARRAY
89713: PUSH
89714: LD_INT 3
89716: ARRAY
89717: PPUSH
89718: LD_EXP 122
89722: PUSH
89723: LD_VAR 0 4
89727: ARRAY
89728: PUSH
89729: LD_INT 4
89731: ARRAY
89732: PPUSH
89733: CALL_OW 428
89737: ST_TO_ADDR
// if hex then
89738: LD_VAR 0 6
89742: IFFALSE 89760
// ComMoveUnit ( driver , hex ) else
89744: LD_VAR 0 5
89748: PPUSH
89749: LD_VAR 0 6
89753: PPUSH
89754: CALL_OW 112
89758: GO 89844
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
89760: LD_VAR 0 1
89764: PPUSH
89765: LD_EXP 122
89769: PUSH
89770: LD_VAR 0 4
89774: ARRAY
89775: PUSH
89776: LD_INT 3
89778: ARRAY
89779: PPUSH
89780: LD_EXP 122
89784: PUSH
89785: LD_VAR 0 4
89789: ARRAY
89790: PUSH
89791: LD_INT 4
89793: ARRAY
89794: PPUSH
89795: CALL_OW 297
89799: PUSH
89800: LD_INT 0
89802: GREATER
89803: IFFALSE 89844
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
89805: LD_VAR 0 5
89809: PPUSH
89810: LD_EXP 122
89814: PUSH
89815: LD_VAR 0 4
89819: ARRAY
89820: PUSH
89821: LD_INT 3
89823: ARRAY
89824: PPUSH
89825: LD_EXP 122
89829: PUSH
89830: LD_VAR 0 4
89834: ARRAY
89835: PUSH
89836: LD_INT 4
89838: ARRAY
89839: PPUSH
89840: CALL_OW 111
// AddComExitVehicle ( driver ) ;
89844: LD_VAR 0 5
89848: PPUSH
89849: CALL_OW 181
// if Multiplayer then
89853: LD_OWVAR 4
89857: IFFALSE 89906
// begin repeat wait ( 10 ) ;
89859: LD_INT 10
89861: PPUSH
89862: CALL_OW 67
// until not IsInUnit ( driver ) ;
89866: LD_VAR 0 5
89870: PPUSH
89871: CALL_OW 310
89875: NOT
89876: IFFALSE 89859
// if not HasTask ( driver ) then
89878: LD_VAR 0 5
89882: PPUSH
89883: CALL_OW 314
89887: NOT
89888: IFFALSE 89904
// ComEnterUnit ( driver , factory ) ;
89890: LD_VAR 0 5
89894: PPUSH
89895: LD_VAR 0 2
89899: PPUSH
89900: CALL_OW 120
// end else
89904: GO 89920
// AddComEnterUnit ( driver , factory ) ;
89906: LD_VAR 0 5
89910: PPUSH
89911: LD_VAR 0 2
89915: PPUSH
89916: CALL_OW 180
// wait ( 0 0$1 ) ;
89920: LD_INT 35
89922: PPUSH
89923: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
89927: LD_ADDR_EXP 123
89931: PUSH
89932: LD_EXP 123
89936: PUSH
89937: LD_VAR 0 5
89941: DIFF
89942: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
89943: LD_ADDR_EXP 123
89947: PUSH
89948: LD_EXP 123
89952: PUSH
89953: LD_VAR 0 1
89957: DIFF
89958: ST_TO_ADDR
// break ;
89959: GO 90112
// end ; end else
89961: GO 90110
// if GetControl ( vehicle ) = control_remote then
89963: LD_VAR 0 1
89967: PPUSH
89968: CALL_OW 263
89972: PUSH
89973: LD_INT 2
89975: EQUAL
89976: IFFALSE 90062
// begin wait ( 0 0$2 ) ;
89978: LD_INT 70
89980: PPUSH
89981: CALL_OW 67
// repeat wait ( 10 ) ;
89985: LD_INT 10
89987: PPUSH
89988: CALL_OW 67
// Connect ( vehicle ) ;
89992: LD_VAR 0 1
89996: PPUSH
89997: CALL 38166 0 1
// until IsControledBy ( vehicle ) ;
90001: LD_VAR 0 1
90005: PPUSH
90006: CALL_OW 312
90010: IFFALSE 89985
// wait ( 10 ) ;
90012: LD_INT 10
90014: PPUSH
90015: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
90019: LD_VAR 0 1
90023: PPUSH
90024: LD_EXP 122
90028: PUSH
90029: LD_VAR 0 4
90033: ARRAY
90034: PUSH
90035: LD_INT 3
90037: ARRAY
90038: PPUSH
90039: LD_EXP 122
90043: PUSH
90044: LD_VAR 0 4
90048: ARRAY
90049: PUSH
90050: LD_INT 4
90052: ARRAY
90053: PPUSH
90054: CALL_OW 111
// break ;
90058: GO 90112
// end else
90060: GO 90110
// begin wait ( 0 0$3 ) ;
90062: LD_INT 105
90064: PPUSH
90065: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
90069: LD_VAR 0 1
90073: PPUSH
90074: LD_EXP 122
90078: PUSH
90079: LD_VAR 0 4
90083: ARRAY
90084: PUSH
90085: LD_INT 3
90087: ARRAY
90088: PPUSH
90089: LD_EXP 122
90093: PUSH
90094: LD_VAR 0 4
90098: ARRAY
90099: PUSH
90100: LD_INT 4
90102: ARRAY
90103: PPUSH
90104: CALL_OW 111
// break ;
90108: GO 90112
// end ; end ;
90110: GO 89561
90112: POP
90113: POP
// end ;
90114: LD_VAR 0 3
90118: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
90119: LD_INT 0
90121: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
90122: LD_VAR 0 1
90126: PUSH
90127: LD_INT 250
90129: EQUAL
90130: IFFALSE 90147
90132: PUSH
90133: LD_VAR 0 2
90137: PPUSH
90138: CALL_OW 264
90142: PUSH
90143: LD_INT 81
90145: EQUAL
90146: AND
90147: IFFALSE 90168
// MinerPlaceMine ( unit , x , y ) ;
90149: LD_VAR 0 2
90153: PPUSH
90154: LD_VAR 0 4
90158: PPUSH
90159: LD_VAR 0 5
90163: PPUSH
90164: CALL 93300 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
90168: LD_VAR 0 1
90172: PUSH
90173: LD_INT 251
90175: EQUAL
90176: IFFALSE 90193
90178: PUSH
90179: LD_VAR 0 2
90183: PPUSH
90184: CALL_OW 264
90188: PUSH
90189: LD_INT 81
90191: EQUAL
90192: AND
90193: IFFALSE 90214
// MinerDetonateMine ( unit , x , y ) ;
90195: LD_VAR 0 2
90199: PPUSH
90200: LD_VAR 0 4
90204: PPUSH
90205: LD_VAR 0 5
90209: PPUSH
90210: CALL 93579 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
90214: LD_VAR 0 1
90218: PUSH
90219: LD_INT 252
90221: EQUAL
90222: IFFALSE 90239
90224: PUSH
90225: LD_VAR 0 2
90229: PPUSH
90230: CALL_OW 264
90234: PUSH
90235: LD_INT 81
90237: EQUAL
90238: AND
90239: IFFALSE 90260
// MinerCreateMinefield ( unit , x , y ) ;
90241: LD_VAR 0 2
90245: PPUSH
90246: LD_VAR 0 4
90250: PPUSH
90251: LD_VAR 0 5
90255: PPUSH
90256: CALL 93998 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
90260: LD_VAR 0 1
90264: PUSH
90265: LD_INT 253
90267: EQUAL
90268: IFFALSE 90285
90270: PUSH
90271: LD_VAR 0 2
90275: PPUSH
90276: CALL_OW 257
90280: PUSH
90281: LD_INT 5
90283: EQUAL
90284: AND
90285: IFFALSE 90306
// ComBinocular ( unit , x , y ) ;
90287: LD_VAR 0 2
90291: PPUSH
90292: LD_VAR 0 4
90296: PPUSH
90297: LD_VAR 0 5
90301: PPUSH
90302: CALL 94373 0 3
// if selectedUnit then
90306: LD_VAR 0 3
90310: IFFALSE 90370
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
90312: LD_VAR 0 1
90316: PUSH
90317: LD_INT 254
90319: EQUAL
90320: IFFALSE 90337
90322: PUSH
90323: LD_VAR 0 2
90327: PPUSH
90328: CALL_OW 264
90332: PUSH
90333: LD_INT 99
90335: EQUAL
90336: AND
90337: IFFALSE 90354
90339: PUSH
90340: LD_VAR 0 3
90344: PPUSH
90345: CALL_OW 263
90349: PUSH
90350: LD_INT 3
90352: EQUAL
90353: AND
90354: IFFALSE 90370
// HackDestroyVehicle ( unit , selectedUnit ) ;
90356: LD_VAR 0 2
90360: PPUSH
90361: LD_VAR 0 3
90365: PPUSH
90366: CALL 92660 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
90370: LD_VAR 0 1
90374: PUSH
90375: LD_INT 255
90377: EQUAL
90378: IFFALSE 90402
90380: PUSH
90381: LD_VAR 0 2
90385: PPUSH
90386: CALL_OW 264
90390: PUSH
90391: LD_INT 14
90393: PUSH
90394: LD_INT 53
90396: PUSH
90397: EMPTY
90398: LIST
90399: LIST
90400: IN
90401: AND
90402: IFFALSE 90420
90404: PUSH
90405: LD_VAR 0 4
90409: PPUSH
90410: LD_VAR 0 5
90414: PPUSH
90415: CALL_OW 488
90419: AND
90420: IFFALSE 90444
// CutTreeXYR ( unit , x , y , 12 ) ;
90422: LD_VAR 0 2
90426: PPUSH
90427: LD_VAR 0 4
90431: PPUSH
90432: LD_VAR 0 5
90436: PPUSH
90437: LD_INT 12
90439: PPUSH
90440: CALL 90635 0 4
// if cmd = 256 then
90444: LD_VAR 0 1
90448: PUSH
90449: LD_INT 256
90451: EQUAL
90452: IFFALSE 90473
// SetFactoryWaypoint ( unit , x , y ) ;
90454: LD_VAR 0 2
90458: PPUSH
90459: LD_VAR 0 4
90463: PPUSH
90464: LD_VAR 0 5
90468: PPUSH
90469: CALL 87832 0 3
// if cmd = 257 then
90473: LD_VAR 0 1
90477: PUSH
90478: LD_INT 257
90480: EQUAL
90481: IFFALSE 90502
// SetWarehouseGatheringPoint ( unit , x , y ) ;
90483: LD_VAR 0 2
90487: PPUSH
90488: LD_VAR 0 4
90492: PPUSH
90493: LD_VAR 0 5
90497: PPUSH
90498: CALL 88328 0 3
// if cmd = 258 then
90502: LD_VAR 0 1
90506: PUSH
90507: LD_INT 258
90509: EQUAL
90510: IFFALSE 90534
// BurnTreeXYR ( unit , x , y , 8 ) ;
90512: LD_VAR 0 2
90516: PPUSH
90517: LD_VAR 0 4
90521: PPUSH
90522: LD_VAR 0 5
90526: PPUSH
90527: LD_INT 8
90529: PPUSH
90530: CALL 91035 0 4
// end ;
90534: LD_VAR 0 6
90538: RET
// export function ComRadiation ( un ) ; var eff ; begin
90539: LD_INT 0
90541: PPUSH
90542: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
90543: LD_VAR 0 1
90547: PPUSH
90548: CALL_OW 264
90552: PUSH
90553: LD_INT 91
90555: NONEQUAL
90556: IFFALSE 90560
// exit ;
90558: GO 90630
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
90560: LD_INT 68
90562: PPUSH
90563: LD_VAR 0 1
90567: PPUSH
90568: CALL_OW 255
90572: PPUSH
90573: CALL_OW 321
90577: PUSH
90578: LD_INT 2
90580: EQUAL
90581: IFFALSE 90593
// eff := 50 else
90583: LD_ADDR_VAR 0 3
90587: PUSH
90588: LD_INT 50
90590: ST_TO_ADDR
90591: GO 90601
// eff := 25 ;
90593: LD_ADDR_VAR 0 3
90597: PUSH
90598: LD_INT 25
90600: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
90601: LD_VAR 0 1
90605: PPUSH
90606: CALL_OW 250
90610: PPUSH
90611: LD_VAR 0 1
90615: PPUSH
90616: CALL_OW 251
90620: PPUSH
90621: LD_VAR 0 3
90625: PPUSH
90626: CALL_OW 495
// end ;
90630: LD_VAR 0 2
90634: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
90635: LD_INT 0
90637: PPUSH
90638: PPUSH
90639: PPUSH
90640: PPUSH
90641: PPUSH
90642: PPUSH
90643: PPUSH
90644: PPUSH
90645: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
90646: LD_VAR 0 1
90650: PPUSH
90651: CALL_OW 302
90655: NOT
90656: IFTRUE 90675
90658: PUSH
90659: LD_VAR 0 2
90663: PPUSH
90664: LD_VAR 0 3
90668: PPUSH
90669: CALL_OW 488
90673: NOT
90674: OR
90675: IFTRUE 90684
90677: PUSH
90678: LD_VAR 0 4
90682: NOT
90683: OR
90684: IFFALSE 90688
// exit ;
90686: GO 91030
// list := [ ] ;
90688: LD_ADDR_VAR 0 13
90692: PUSH
90693: EMPTY
90694: ST_TO_ADDR
// if x - r < 0 then
90695: LD_VAR 0 2
90699: PUSH
90700: LD_VAR 0 4
90704: MINUS
90705: PUSH
90706: LD_INT 0
90708: LESS
90709: IFFALSE 90721
// min_x := 0 else
90711: LD_ADDR_VAR 0 7
90715: PUSH
90716: LD_INT 0
90718: ST_TO_ADDR
90719: GO 90737
// min_x := x - r ;
90721: LD_ADDR_VAR 0 7
90725: PUSH
90726: LD_VAR 0 2
90730: PUSH
90731: LD_VAR 0 4
90735: MINUS
90736: ST_TO_ADDR
// if y - r < 0 then
90737: LD_VAR 0 3
90741: PUSH
90742: LD_VAR 0 4
90746: MINUS
90747: PUSH
90748: LD_INT 0
90750: LESS
90751: IFFALSE 90763
// min_y := 0 else
90753: LD_ADDR_VAR 0 8
90757: PUSH
90758: LD_INT 0
90760: ST_TO_ADDR
90761: GO 90779
// min_y := y - r ;
90763: LD_ADDR_VAR 0 8
90767: PUSH
90768: LD_VAR 0 3
90772: PUSH
90773: LD_VAR 0 4
90777: MINUS
90778: ST_TO_ADDR
// max_x := x + r ;
90779: LD_ADDR_VAR 0 9
90783: PUSH
90784: LD_VAR 0 2
90788: PUSH
90789: LD_VAR 0 4
90793: PLUS
90794: ST_TO_ADDR
// max_y := y + r ;
90795: LD_ADDR_VAR 0 10
90799: PUSH
90800: LD_VAR 0 3
90804: PUSH
90805: LD_VAR 0 4
90809: PLUS
90810: ST_TO_ADDR
// for _x = min_x to max_x do
90811: LD_ADDR_VAR 0 11
90815: PUSH
90816: DOUBLE
90817: LD_VAR 0 7
90821: DEC
90822: ST_TO_ADDR
90823: LD_VAR 0 9
90827: PUSH
90828: FOR_TO
90829: IFFALSE 90948
// for _y = min_y to max_y do
90831: LD_ADDR_VAR 0 12
90835: PUSH
90836: DOUBLE
90837: LD_VAR 0 8
90841: DEC
90842: ST_TO_ADDR
90843: LD_VAR 0 10
90847: PUSH
90848: FOR_TO
90849: IFFALSE 90944
// begin if not ValidHex ( _x , _y ) then
90851: LD_VAR 0 11
90855: PPUSH
90856: LD_VAR 0 12
90860: PPUSH
90861: CALL_OW 488
90865: NOT
90866: IFFALSE 90870
// continue ;
90868: GO 90848
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
90870: LD_VAR 0 11
90874: PPUSH
90875: LD_VAR 0 12
90879: PPUSH
90880: CALL_OW 351
90884: IFFALSE 90902
90886: PUSH
90887: LD_VAR 0 11
90891: PPUSH
90892: LD_VAR 0 12
90896: PPUSH
90897: CALL_OW 554
90901: AND
90902: IFFALSE 90942
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
90904: LD_ADDR_VAR 0 13
90908: PUSH
90909: LD_VAR 0 13
90913: PPUSH
90914: LD_VAR 0 13
90918: PUSH
90919: LD_INT 1
90921: PLUS
90922: PPUSH
90923: LD_VAR 0 11
90927: PUSH
90928: LD_VAR 0 12
90932: PUSH
90933: EMPTY
90934: LIST
90935: LIST
90936: PPUSH
90937: CALL_OW 2
90941: ST_TO_ADDR
// end ;
90942: GO 90848
90944: POP
90945: POP
90946: GO 90828
90948: POP
90949: POP
// if not list then
90950: LD_VAR 0 13
90954: NOT
90955: IFFALSE 90959
// exit ;
90957: GO 91030
// for i in list do
90959: LD_ADDR_VAR 0 6
90963: PUSH
90964: LD_VAR 0 13
90968: PUSH
90969: FOR_IN
90970: IFFALSE 91028
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
90972: LD_VAR 0 1
90976: PPUSH
90977: LD_STRING M
90979: PUSH
90980: LD_VAR 0 6
90984: PUSH
90985: LD_INT 1
90987: ARRAY
90988: PUSH
90989: LD_VAR 0 6
90993: PUSH
90994: LD_INT 2
90996: ARRAY
90997: PUSH
90998: LD_INT 0
91000: PUSH
91001: LD_INT 0
91003: PUSH
91004: LD_INT 0
91006: PUSH
91007: LD_INT 0
91009: PUSH
91010: EMPTY
91011: LIST
91012: LIST
91013: LIST
91014: LIST
91015: LIST
91016: LIST
91017: LIST
91018: PUSH
91019: EMPTY
91020: LIST
91021: PPUSH
91022: CALL_OW 447
91026: GO 90969
91028: POP
91029: POP
// end ;
91030: LD_VAR 0 5
91034: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
91035: LD_INT 0
91037: PPUSH
91038: PPUSH
91039: PPUSH
91040: PPUSH
91041: PPUSH
91042: PPUSH
91043: PPUSH
91044: PPUSH
91045: PPUSH
91046: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
91047: LD_VAR 0 1
91051: PPUSH
91052: CALL_OW 302
91056: NOT
91057: IFTRUE 91076
91059: PUSH
91060: LD_VAR 0 2
91064: PPUSH
91065: LD_VAR 0 3
91069: PPUSH
91070: CALL_OW 488
91074: NOT
91075: OR
91076: IFTRUE 91085
91078: PUSH
91079: LD_VAR 0 4
91083: NOT
91084: OR
91085: IFFALSE 91089
// exit ;
91087: GO 91606
// list := [ ] ;
91089: LD_ADDR_VAR 0 13
91093: PUSH
91094: EMPTY
91095: ST_TO_ADDR
// if x - r < 0 then
91096: LD_VAR 0 2
91100: PUSH
91101: LD_VAR 0 4
91105: MINUS
91106: PUSH
91107: LD_INT 0
91109: LESS
91110: IFFALSE 91122
// min_x := 0 else
91112: LD_ADDR_VAR 0 7
91116: PUSH
91117: LD_INT 0
91119: ST_TO_ADDR
91120: GO 91138
// min_x := x - r ;
91122: LD_ADDR_VAR 0 7
91126: PUSH
91127: LD_VAR 0 2
91131: PUSH
91132: LD_VAR 0 4
91136: MINUS
91137: ST_TO_ADDR
// if y - r < 0 then
91138: LD_VAR 0 3
91142: PUSH
91143: LD_VAR 0 4
91147: MINUS
91148: PUSH
91149: LD_INT 0
91151: LESS
91152: IFFALSE 91164
// min_y := 0 else
91154: LD_ADDR_VAR 0 8
91158: PUSH
91159: LD_INT 0
91161: ST_TO_ADDR
91162: GO 91180
// min_y := y - r ;
91164: LD_ADDR_VAR 0 8
91168: PUSH
91169: LD_VAR 0 3
91173: PUSH
91174: LD_VAR 0 4
91178: MINUS
91179: ST_TO_ADDR
// max_x := x + r ;
91180: LD_ADDR_VAR 0 9
91184: PUSH
91185: LD_VAR 0 2
91189: PUSH
91190: LD_VAR 0 4
91194: PLUS
91195: ST_TO_ADDR
// max_y := y + r ;
91196: LD_ADDR_VAR 0 10
91200: PUSH
91201: LD_VAR 0 3
91205: PUSH
91206: LD_VAR 0 4
91210: PLUS
91211: ST_TO_ADDR
// for _x = min_x to max_x do
91212: LD_ADDR_VAR 0 11
91216: PUSH
91217: DOUBLE
91218: LD_VAR 0 7
91222: DEC
91223: ST_TO_ADDR
91224: LD_VAR 0 9
91228: PUSH
91229: FOR_TO
91230: IFFALSE 91349
// for _y = min_y to max_y do
91232: LD_ADDR_VAR 0 12
91236: PUSH
91237: DOUBLE
91238: LD_VAR 0 8
91242: DEC
91243: ST_TO_ADDR
91244: LD_VAR 0 10
91248: PUSH
91249: FOR_TO
91250: IFFALSE 91345
// begin if not ValidHex ( _x , _y ) then
91252: LD_VAR 0 11
91256: PPUSH
91257: LD_VAR 0 12
91261: PPUSH
91262: CALL_OW 488
91266: NOT
91267: IFFALSE 91271
// continue ;
91269: GO 91249
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
91271: LD_VAR 0 11
91275: PPUSH
91276: LD_VAR 0 12
91280: PPUSH
91281: CALL_OW 351
91285: IFFALSE 91303
91287: PUSH
91288: LD_VAR 0 11
91292: PPUSH
91293: LD_VAR 0 12
91297: PPUSH
91298: CALL_OW 554
91302: AND
91303: IFFALSE 91343
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
91305: LD_ADDR_VAR 0 13
91309: PUSH
91310: LD_VAR 0 13
91314: PPUSH
91315: LD_VAR 0 13
91319: PUSH
91320: LD_INT 1
91322: PLUS
91323: PPUSH
91324: LD_VAR 0 11
91328: PUSH
91329: LD_VAR 0 12
91333: PUSH
91334: EMPTY
91335: LIST
91336: LIST
91337: PPUSH
91338: CALL_OW 2
91342: ST_TO_ADDR
// end ;
91343: GO 91249
91345: POP
91346: POP
91347: GO 91229
91349: POP
91350: POP
// if not list then
91351: LD_VAR 0 13
91355: NOT
91356: IFFALSE 91360
// exit ;
91358: GO 91606
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
91360: LD_ADDR_VAR 0 13
91364: PUSH
91365: LD_VAR 0 1
91369: PPUSH
91370: LD_VAR 0 13
91374: PPUSH
91375: LD_INT 1
91377: PPUSH
91378: LD_INT 1
91380: PPUSH
91381: CALL 35294 0 4
91385: ST_TO_ADDR
// ComStop ( flame ) ;
91386: LD_VAR 0 1
91390: PPUSH
91391: CALL_OW 141
// for i in list do
91395: LD_ADDR_VAR 0 6
91399: PUSH
91400: LD_VAR 0 13
91404: PUSH
91405: FOR_IN
91406: IFFALSE 91437
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
91408: LD_VAR 0 1
91412: PPUSH
91413: LD_VAR 0 6
91417: PUSH
91418: LD_INT 1
91420: ARRAY
91421: PPUSH
91422: LD_VAR 0 6
91426: PUSH
91427: LD_INT 2
91429: ARRAY
91430: PPUSH
91431: CALL_OW 176
91435: GO 91405
91437: POP
91438: POP
// repeat wait ( 0 0$1 ) ;
91439: LD_INT 35
91441: PPUSH
91442: CALL_OW 67
// task := GetTaskList ( flame ) ;
91446: LD_ADDR_VAR 0 14
91450: PUSH
91451: LD_VAR 0 1
91455: PPUSH
91456: CALL_OW 437
91460: ST_TO_ADDR
// if not task then
91461: LD_VAR 0 14
91465: NOT
91466: IFFALSE 91470
// exit ;
91468: GO 91606
// if task [ 1 ] [ 1 ] <> | then
91470: LD_VAR 0 14
91474: PUSH
91475: LD_INT 1
91477: ARRAY
91478: PUSH
91479: LD_INT 1
91481: ARRAY
91482: PUSH
91483: LD_STRING |
91485: NONEQUAL
91486: IFFALSE 91490
// exit ;
91488: GO 91606
// _x := task [ 1 ] [ 2 ] ;
91490: LD_ADDR_VAR 0 11
91494: PUSH
91495: LD_VAR 0 14
91499: PUSH
91500: LD_INT 1
91502: ARRAY
91503: PUSH
91504: LD_INT 2
91506: ARRAY
91507: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
91508: LD_ADDR_VAR 0 12
91512: PUSH
91513: LD_VAR 0 14
91517: PUSH
91518: LD_INT 1
91520: ARRAY
91521: PUSH
91522: LD_INT 3
91524: ARRAY
91525: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
91526: LD_VAR 0 11
91530: PPUSH
91531: LD_VAR 0 12
91535: PPUSH
91536: CALL_OW 351
91540: NOT
91541: IFTRUE 91560
91543: PUSH
91544: LD_VAR 0 11
91548: PPUSH
91549: LD_VAR 0 12
91553: PPUSH
91554: CALL_OW 554
91558: NOT
91559: OR
91560: IFFALSE 91594
// begin task := Delete ( task , 1 ) ;
91562: LD_ADDR_VAR 0 14
91566: PUSH
91567: LD_VAR 0 14
91571: PPUSH
91572: LD_INT 1
91574: PPUSH
91575: CALL_OW 3
91579: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
91580: LD_VAR 0 1
91584: PPUSH
91585: LD_VAR 0 14
91589: PPUSH
91590: CALL_OW 446
// end ; until not HasTask ( flame ) ;
91594: LD_VAR 0 1
91598: PPUSH
91599: CALL_OW 314
91603: NOT
91604: IFFALSE 91439
// end ;
91606: LD_VAR 0 5
91610: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
91611: LD_EXP 126
91615: NOT
91616: IFFALSE 91666
91618: GO 91620
91620: DISABLE
// begin initHack := true ;
91621: LD_ADDR_EXP 126
91625: PUSH
91626: LD_INT 1
91628: ST_TO_ADDR
// hackTanks := [ ] ;
91629: LD_ADDR_EXP 127
91633: PUSH
91634: EMPTY
91635: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
91636: LD_ADDR_EXP 128
91640: PUSH
91641: EMPTY
91642: ST_TO_ADDR
// hackLimit := 3 ;
91643: LD_ADDR_EXP 129
91647: PUSH
91648: LD_INT 3
91650: ST_TO_ADDR
// hackDist := 12 ;
91651: LD_ADDR_EXP 130
91655: PUSH
91656: LD_INT 12
91658: ST_TO_ADDR
// hackCounter := [ ] ;
91659: LD_ADDR_EXP 131
91663: PUSH
91664: EMPTY
91665: ST_TO_ADDR
// end ;
91666: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
91667: LD_EXP 126
91671: IFFALSE 91689
91673: PUSH
91674: LD_INT 34
91676: PUSH
91677: LD_INT 99
91679: PUSH
91680: EMPTY
91681: LIST
91682: LIST
91683: PPUSH
91684: CALL_OW 69
91688: AND
91689: IFFALSE 91942
91691: GO 91693
91693: DISABLE
91694: LD_INT 0
91696: PPUSH
91697: PPUSH
// begin enable ;
91698: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
91699: LD_ADDR_VAR 0 1
91703: PUSH
91704: LD_INT 34
91706: PUSH
91707: LD_INT 99
91709: PUSH
91710: EMPTY
91711: LIST
91712: LIST
91713: PPUSH
91714: CALL_OW 69
91718: PUSH
91719: FOR_IN
91720: IFFALSE 91940
// begin if not i in hackTanks then
91722: LD_VAR 0 1
91726: PUSH
91727: LD_EXP 127
91731: IN
91732: NOT
91733: IFFALSE 91816
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
91735: LD_ADDR_EXP 127
91739: PUSH
91740: LD_EXP 127
91744: PPUSH
91745: LD_EXP 127
91749: PUSH
91750: LD_INT 1
91752: PLUS
91753: PPUSH
91754: LD_VAR 0 1
91758: PPUSH
91759: CALL_OW 1
91763: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
91764: LD_ADDR_EXP 128
91768: PUSH
91769: LD_EXP 128
91773: PPUSH
91774: LD_EXP 128
91778: PUSH
91779: LD_INT 1
91781: PLUS
91782: PPUSH
91783: EMPTY
91784: PPUSH
91785: CALL_OW 1
91789: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
91790: LD_ADDR_EXP 131
91794: PUSH
91795: LD_EXP 131
91799: PPUSH
91800: LD_EXP 131
91804: PUSH
91805: LD_INT 1
91807: PLUS
91808: PPUSH
91809: EMPTY
91810: PPUSH
91811: CALL_OW 1
91815: ST_TO_ADDR
// end ; if not IsOk ( i ) then
91816: LD_VAR 0 1
91820: PPUSH
91821: CALL_OW 302
91825: NOT
91826: IFFALSE 91839
// begin HackUnlinkAll ( i ) ;
91828: LD_VAR 0 1
91832: PPUSH
91833: CALL 91945 0 1
// continue ;
91837: GO 91719
// end ; HackCheckCapturedStatus ( i ) ;
91839: LD_VAR 0 1
91843: PPUSH
91844: CALL 92390 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
91848: LD_ADDR_VAR 0 2
91852: PUSH
91853: LD_INT 81
91855: PUSH
91856: LD_VAR 0 1
91860: PPUSH
91861: CALL_OW 255
91865: PUSH
91866: EMPTY
91867: LIST
91868: LIST
91869: PUSH
91870: LD_INT 33
91872: PUSH
91873: LD_INT 3
91875: PUSH
91876: EMPTY
91877: LIST
91878: LIST
91879: PUSH
91880: LD_INT 91
91882: PUSH
91883: LD_VAR 0 1
91887: PUSH
91888: LD_EXP 130
91892: PUSH
91893: EMPTY
91894: LIST
91895: LIST
91896: LIST
91897: PUSH
91898: LD_INT 50
91900: PUSH
91901: EMPTY
91902: LIST
91903: PUSH
91904: EMPTY
91905: LIST
91906: LIST
91907: LIST
91908: LIST
91909: PPUSH
91910: CALL_OW 69
91914: ST_TO_ADDR
// if not tmp then
91915: LD_VAR 0 2
91919: NOT
91920: IFFALSE 91924
// continue ;
91922: GO 91719
// HackLink ( i , tmp ) ;
91924: LD_VAR 0 1
91928: PPUSH
91929: LD_VAR 0 2
91933: PPUSH
91934: CALL 92081 0 2
// end ;
91938: GO 91719
91940: POP
91941: POP
// end ;
91942: PPOPN 2
91944: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
91945: LD_INT 0
91947: PPUSH
91948: PPUSH
91949: PPUSH
// if not hack in hackTanks then
91950: LD_VAR 0 1
91954: PUSH
91955: LD_EXP 127
91959: IN
91960: NOT
91961: IFFALSE 91965
// exit ;
91963: GO 92076
// index := GetElementIndex ( hackTanks , hack ) ;
91965: LD_ADDR_VAR 0 4
91969: PUSH
91970: LD_EXP 127
91974: PPUSH
91975: LD_VAR 0 1
91979: PPUSH
91980: CALL 34589 0 2
91984: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
91985: LD_EXP 128
91989: PUSH
91990: LD_VAR 0 4
91994: ARRAY
91995: IFFALSE 92076
// begin for i in hackTanksCaptured [ index ] do
91997: LD_ADDR_VAR 0 3
92001: PUSH
92002: LD_EXP 128
92006: PUSH
92007: LD_VAR 0 4
92011: ARRAY
92012: PUSH
92013: FOR_IN
92014: IFFALSE 92040
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
92016: LD_VAR 0 3
92020: PUSH
92021: LD_INT 1
92023: ARRAY
92024: PPUSH
92025: LD_VAR 0 3
92029: PUSH
92030: LD_INT 2
92032: ARRAY
92033: PPUSH
92034: CALL_OW 235
92038: GO 92013
92040: POP
92041: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
92042: LD_ADDR_EXP 128
92046: PUSH
92047: LD_EXP 128
92051: PPUSH
92052: LD_VAR 0 4
92056: PPUSH
92057: EMPTY
92058: PPUSH
92059: CALL_OW 1
92063: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
92064: LD_VAR 0 1
92068: PPUSH
92069: LD_INT 0
92071: PPUSH
92072: CALL_OW 505
// end ; end ;
92076: LD_VAR 0 2
92080: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
92081: LD_INT 0
92083: PPUSH
92084: PPUSH
92085: PPUSH
// if not hack in hackTanks or not vehicles then
92086: LD_VAR 0 1
92090: PUSH
92091: LD_EXP 127
92095: IN
92096: NOT
92097: IFTRUE 92106
92099: PUSH
92100: LD_VAR 0 2
92104: NOT
92105: OR
92106: IFFALSE 92110
// exit ;
92108: GO 92385
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
92110: LD_ADDR_VAR 0 2
92114: PUSH
92115: LD_VAR 0 1
92119: PPUSH
92120: LD_VAR 0 2
92124: PPUSH
92125: LD_INT 1
92127: PPUSH
92128: LD_INT 1
92130: PPUSH
92131: CALL 35241 0 4
92135: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
92136: LD_ADDR_VAR 0 5
92140: PUSH
92141: LD_EXP 127
92145: PPUSH
92146: LD_VAR 0 1
92150: PPUSH
92151: CALL 34589 0 2
92155: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
92156: LD_EXP 128
92160: PUSH
92161: LD_VAR 0 5
92165: ARRAY
92166: PUSH
92167: LD_EXP 129
92171: LESS
92172: IFFALSE 92361
// begin for i := 1 to vehicles do
92174: LD_ADDR_VAR 0 4
92178: PUSH
92179: DOUBLE
92180: LD_INT 1
92182: DEC
92183: ST_TO_ADDR
92184: LD_VAR 0 2
92188: PUSH
92189: FOR_TO
92190: IFFALSE 92359
// begin if hackTanksCaptured [ index ] = hackLimit then
92192: LD_EXP 128
92196: PUSH
92197: LD_VAR 0 5
92201: ARRAY
92202: PUSH
92203: LD_EXP 129
92207: EQUAL
92208: IFFALSE 92212
// break ;
92210: GO 92359
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
92212: LD_ADDR_EXP 131
92216: PUSH
92217: LD_EXP 131
92221: PPUSH
92222: LD_VAR 0 5
92226: PPUSH
92227: LD_EXP 131
92231: PUSH
92232: LD_VAR 0 5
92236: ARRAY
92237: PUSH
92238: LD_INT 1
92240: PLUS
92241: PPUSH
92242: CALL_OW 1
92246: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
92247: LD_ADDR_EXP 128
92251: PUSH
92252: LD_EXP 128
92256: PPUSH
92257: LD_VAR 0 5
92261: PUSH
92262: LD_EXP 128
92266: PUSH
92267: LD_VAR 0 5
92271: ARRAY
92272: PUSH
92273: LD_INT 1
92275: PLUS
92276: PUSH
92277: EMPTY
92278: LIST
92279: LIST
92280: PPUSH
92281: LD_VAR 0 2
92285: PUSH
92286: LD_VAR 0 4
92290: ARRAY
92291: PUSH
92292: LD_VAR 0 2
92296: PUSH
92297: LD_VAR 0 4
92301: ARRAY
92302: PPUSH
92303: CALL_OW 255
92307: PUSH
92308: EMPTY
92309: LIST
92310: LIST
92311: PPUSH
92312: CALL 34806 0 3
92316: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
92317: LD_VAR 0 2
92321: PUSH
92322: LD_VAR 0 4
92326: ARRAY
92327: PPUSH
92328: LD_VAR 0 1
92332: PPUSH
92333: CALL_OW 255
92337: PPUSH
92338: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
92342: LD_VAR 0 2
92346: PUSH
92347: LD_VAR 0 4
92351: ARRAY
92352: PPUSH
92353: CALL_OW 141
// end ;
92357: GO 92189
92359: POP
92360: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
92361: LD_VAR 0 1
92365: PPUSH
92366: LD_EXP 128
92370: PUSH
92371: LD_VAR 0 5
92375: ARRAY
92376: PUSH
92377: LD_INT 0
92379: PLUS
92380: PPUSH
92381: CALL_OW 505
// end ;
92385: LD_VAR 0 3
92389: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
92390: LD_INT 0
92392: PPUSH
92393: PPUSH
92394: PPUSH
92395: PPUSH
// if not hack in hackTanks then
92396: LD_VAR 0 1
92400: PUSH
92401: LD_EXP 127
92405: IN
92406: NOT
92407: IFFALSE 92411
// exit ;
92409: GO 92655
// index := GetElementIndex ( hackTanks , hack ) ;
92411: LD_ADDR_VAR 0 4
92415: PUSH
92416: LD_EXP 127
92420: PPUSH
92421: LD_VAR 0 1
92425: PPUSH
92426: CALL 34589 0 2
92430: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
92431: LD_ADDR_VAR 0 3
92435: PUSH
92436: DOUBLE
92437: LD_EXP 128
92441: PUSH
92442: LD_VAR 0 4
92446: ARRAY
92447: INC
92448: ST_TO_ADDR
92449: LD_INT 1
92451: PUSH
92452: FOR_DOWNTO
92453: IFFALSE 92629
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
92455: LD_ADDR_VAR 0 5
92459: PUSH
92460: LD_EXP 128
92464: PUSH
92465: LD_VAR 0 4
92469: ARRAY
92470: PUSH
92471: LD_VAR 0 3
92475: ARRAY
92476: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
92477: LD_VAR 0 5
92481: PUSH
92482: LD_INT 1
92484: ARRAY
92485: PPUSH
92486: CALL_OW 302
92490: NOT
92491: IFTRUE 92519
92493: PUSH
92494: LD_VAR 0 5
92498: PUSH
92499: LD_INT 1
92501: ARRAY
92502: PPUSH
92503: CALL_OW 255
92507: PUSH
92508: LD_VAR 0 1
92512: PPUSH
92513: CALL_OW 255
92517: NONEQUAL
92518: OR
92519: IFFALSE 92627
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
92521: LD_VAR 0 5
92525: PUSH
92526: LD_INT 1
92528: ARRAY
92529: PPUSH
92530: CALL_OW 305
92534: IFFALSE 92562
92536: PUSH
92537: LD_VAR 0 5
92541: PUSH
92542: LD_INT 1
92544: ARRAY
92545: PPUSH
92546: CALL_OW 255
92550: PUSH
92551: LD_VAR 0 1
92555: PPUSH
92556: CALL_OW 255
92560: EQUAL
92561: AND
92562: IFFALSE 92586
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
92564: LD_VAR 0 5
92568: PUSH
92569: LD_INT 1
92571: ARRAY
92572: PPUSH
92573: LD_VAR 0 5
92577: PUSH
92578: LD_INT 2
92580: ARRAY
92581: PPUSH
92582: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
92586: LD_ADDR_EXP 128
92590: PUSH
92591: LD_EXP 128
92595: PPUSH
92596: LD_VAR 0 4
92600: PPUSH
92601: LD_EXP 128
92605: PUSH
92606: LD_VAR 0 4
92610: ARRAY
92611: PPUSH
92612: LD_VAR 0 3
92616: PPUSH
92617: CALL_OW 3
92621: PPUSH
92622: CALL_OW 1
92626: ST_TO_ADDR
// end ; end ;
92627: GO 92452
92629: POP
92630: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
92631: LD_VAR 0 1
92635: PPUSH
92636: LD_EXP 128
92640: PUSH
92641: LD_VAR 0 4
92645: ARRAY
92646: PUSH
92647: LD_INT 0
92649: PLUS
92650: PPUSH
92651: CALL_OW 505
// end ;
92655: LD_VAR 0 2
92659: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
92660: LD_INT 0
92662: PPUSH
92663: PPUSH
92664: PPUSH
92665: PPUSH
// if not hack in hackTanks then
92666: LD_VAR 0 1
92670: PUSH
92671: LD_EXP 127
92675: IN
92676: NOT
92677: IFFALSE 92681
// exit ;
92679: GO 92766
// index := GetElementIndex ( hackTanks , hack ) ;
92681: LD_ADDR_VAR 0 5
92685: PUSH
92686: LD_EXP 127
92690: PPUSH
92691: LD_VAR 0 1
92695: PPUSH
92696: CALL 34589 0 2
92700: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
92701: LD_ADDR_VAR 0 4
92705: PUSH
92706: DOUBLE
92707: LD_INT 1
92709: DEC
92710: ST_TO_ADDR
92711: LD_EXP 128
92715: PUSH
92716: LD_VAR 0 5
92720: ARRAY
92721: PUSH
92722: FOR_TO
92723: IFFALSE 92764
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
92725: LD_EXP 128
92729: PUSH
92730: LD_VAR 0 5
92734: ARRAY
92735: PUSH
92736: LD_VAR 0 4
92740: ARRAY
92741: PUSH
92742: LD_INT 1
92744: ARRAY
92745: PUSH
92746: LD_VAR 0 2
92750: EQUAL
92751: IFFALSE 92762
// KillUnit ( vehicle ) ;
92753: LD_VAR 0 2
92757: PPUSH
92758: CALL_OW 66
92762: GO 92722
92764: POP
92765: POP
// end ;
92766: LD_VAR 0 3
92770: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
92771: LD_EXP 132
92775: NOT
92776: IFFALSE 92811
92778: GO 92780
92780: DISABLE
// begin initMiner := true ;
92781: LD_ADDR_EXP 132
92785: PUSH
92786: LD_INT 1
92788: ST_TO_ADDR
// minersList := [ ] ;
92789: LD_ADDR_EXP 133
92793: PUSH
92794: EMPTY
92795: ST_TO_ADDR
// minerMinesList := [ ] ;
92796: LD_ADDR_EXP 134
92800: PUSH
92801: EMPTY
92802: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
92803: LD_ADDR_EXP 135
92807: PUSH
92808: LD_INT 5
92810: ST_TO_ADDR
// end ;
92811: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
92812: LD_EXP 132
92816: IFFALSE 92834
92818: PUSH
92819: LD_INT 34
92821: PUSH
92822: LD_INT 81
92824: PUSH
92825: EMPTY
92826: LIST
92827: LIST
92828: PPUSH
92829: CALL_OW 69
92833: AND
92834: IFFALSE 93297
92836: GO 92838
92838: DISABLE
92839: LD_INT 0
92841: PPUSH
92842: PPUSH
92843: PPUSH
92844: PPUSH
// begin enable ;
92845: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
92846: LD_ADDR_VAR 0 1
92850: PUSH
92851: LD_INT 34
92853: PUSH
92854: LD_INT 81
92856: PUSH
92857: EMPTY
92858: LIST
92859: LIST
92860: PPUSH
92861: CALL_OW 69
92865: PUSH
92866: FOR_IN
92867: IFFALSE 92939
// begin if not i in minersList then
92869: LD_VAR 0 1
92873: PUSH
92874: LD_EXP 133
92878: IN
92879: NOT
92880: IFFALSE 92937
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
92882: LD_ADDR_EXP 133
92886: PUSH
92887: LD_EXP 133
92891: PPUSH
92892: LD_EXP 133
92896: PUSH
92897: LD_INT 1
92899: PLUS
92900: PPUSH
92901: LD_VAR 0 1
92905: PPUSH
92906: CALL_OW 1
92910: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
92911: LD_ADDR_EXP 134
92915: PUSH
92916: LD_EXP 134
92920: PPUSH
92921: LD_EXP 134
92925: PUSH
92926: LD_INT 1
92928: PLUS
92929: PPUSH
92930: EMPTY
92931: PPUSH
92932: CALL_OW 1
92936: ST_TO_ADDR
// end end ;
92937: GO 92866
92939: POP
92940: POP
// for i := minerMinesList downto 1 do
92941: LD_ADDR_VAR 0 1
92945: PUSH
92946: DOUBLE
92947: LD_EXP 134
92951: INC
92952: ST_TO_ADDR
92953: LD_INT 1
92955: PUSH
92956: FOR_DOWNTO
92957: IFFALSE 93295
// begin if IsLive ( minersList [ i ] ) then
92959: LD_EXP 133
92963: PUSH
92964: LD_VAR 0 1
92968: ARRAY
92969: PPUSH
92970: CALL_OW 300
92974: IFFALSE 93002
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
92976: LD_EXP 133
92980: PUSH
92981: LD_VAR 0 1
92985: ARRAY
92986: PPUSH
92987: LD_EXP 134
92991: PUSH
92992: LD_VAR 0 1
92996: ARRAY
92997: PPUSH
92998: CALL_OW 505
// if not minerMinesList [ i ] then
93002: LD_EXP 134
93006: PUSH
93007: LD_VAR 0 1
93011: ARRAY
93012: NOT
93013: IFFALSE 93017
// continue ;
93015: GO 92956
// for j := minerMinesList [ i ] downto 1 do
93017: LD_ADDR_VAR 0 2
93021: PUSH
93022: DOUBLE
93023: LD_EXP 134
93027: PUSH
93028: LD_VAR 0 1
93032: ARRAY
93033: INC
93034: ST_TO_ADDR
93035: LD_INT 1
93037: PUSH
93038: FOR_DOWNTO
93039: IFFALSE 93291
// begin side := GetSide ( minersList [ i ] ) ;
93041: LD_ADDR_VAR 0 3
93045: PUSH
93046: LD_EXP 133
93050: PUSH
93051: LD_VAR 0 1
93055: ARRAY
93056: PPUSH
93057: CALL_OW 255
93061: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
93062: LD_ADDR_VAR 0 4
93066: PUSH
93067: LD_EXP 134
93071: PUSH
93072: LD_VAR 0 1
93076: ARRAY
93077: PUSH
93078: LD_VAR 0 2
93082: ARRAY
93083: PUSH
93084: LD_INT 1
93086: ARRAY
93087: PPUSH
93088: LD_EXP 134
93092: PUSH
93093: LD_VAR 0 1
93097: ARRAY
93098: PUSH
93099: LD_VAR 0 2
93103: ARRAY
93104: PUSH
93105: LD_INT 2
93107: ARRAY
93108: PPUSH
93109: CALL_OW 428
93113: ST_TO_ADDR
// if not tmp then
93114: LD_VAR 0 4
93118: NOT
93119: IFFALSE 93123
// continue ;
93121: GO 93038
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
93123: LD_VAR 0 4
93127: PUSH
93128: LD_INT 81
93130: PUSH
93131: LD_VAR 0 3
93135: PUSH
93136: EMPTY
93137: LIST
93138: LIST
93139: PPUSH
93140: CALL_OW 69
93144: IN
93145: IFFALSE 93195
93147: PUSH
93148: LD_EXP 134
93152: PUSH
93153: LD_VAR 0 1
93157: ARRAY
93158: PUSH
93159: LD_VAR 0 2
93163: ARRAY
93164: PUSH
93165: LD_INT 1
93167: ARRAY
93168: PPUSH
93169: LD_EXP 134
93173: PUSH
93174: LD_VAR 0 1
93178: ARRAY
93179: PUSH
93180: LD_VAR 0 2
93184: ARRAY
93185: PUSH
93186: LD_INT 2
93188: ARRAY
93189: PPUSH
93190: CALL_OW 458
93194: AND
93195: IFFALSE 93289
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
93197: LD_EXP 134
93201: PUSH
93202: LD_VAR 0 1
93206: ARRAY
93207: PUSH
93208: LD_VAR 0 2
93212: ARRAY
93213: PUSH
93214: LD_INT 1
93216: ARRAY
93217: PPUSH
93218: LD_EXP 134
93222: PUSH
93223: LD_VAR 0 1
93227: ARRAY
93228: PUSH
93229: LD_VAR 0 2
93233: ARRAY
93234: PUSH
93235: LD_INT 2
93237: ARRAY
93238: PPUSH
93239: LD_VAR 0 3
93243: PPUSH
93244: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
93248: LD_ADDR_EXP 134
93252: PUSH
93253: LD_EXP 134
93257: PPUSH
93258: LD_VAR 0 1
93262: PPUSH
93263: LD_EXP 134
93267: PUSH
93268: LD_VAR 0 1
93272: ARRAY
93273: PPUSH
93274: LD_VAR 0 2
93278: PPUSH
93279: CALL_OW 3
93283: PPUSH
93284: CALL_OW 1
93288: ST_TO_ADDR
// end ; end ;
93289: GO 93038
93291: POP
93292: POP
// end ;
93293: GO 92956
93295: POP
93296: POP
// end ;
93297: PPOPN 4
93299: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
93300: LD_INT 0
93302: PPUSH
93303: PPUSH
// result := false ;
93304: LD_ADDR_VAR 0 4
93308: PUSH
93309: LD_INT 0
93311: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
93312: LD_VAR 0 1
93316: PPUSH
93317: CALL_OW 264
93321: PUSH
93322: LD_INT 81
93324: EQUAL
93325: NOT
93326: IFFALSE 93330
// exit ;
93328: GO 93574
// index := GetElementIndex ( minersList , unit ) ;
93330: LD_ADDR_VAR 0 5
93334: PUSH
93335: LD_EXP 133
93339: PPUSH
93340: LD_VAR 0 1
93344: PPUSH
93345: CALL 34589 0 2
93349: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
93350: LD_EXP 134
93354: PUSH
93355: LD_VAR 0 5
93359: ARRAY
93360: PUSH
93361: LD_EXP 135
93365: GREATEREQUAL
93366: IFFALSE 93370
// exit ;
93368: GO 93574
// ComMoveXY ( unit , x , y ) ;
93370: LD_VAR 0 1
93374: PPUSH
93375: LD_VAR 0 2
93379: PPUSH
93380: LD_VAR 0 3
93384: PPUSH
93385: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
93389: LD_INT 35
93391: PPUSH
93392: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
93396: LD_VAR 0 1
93400: PPUSH
93401: LD_VAR 0 2
93405: PPUSH
93406: LD_VAR 0 3
93410: PPUSH
93411: CALL 66635 0 3
93415: NOT
93416: IFFALSE 93429
93418: PUSH
93419: LD_VAR 0 1
93423: PPUSH
93424: CALL_OW 314
93428: AND
93429: IFFALSE 93433
// exit ;
93431: GO 93574
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
93433: LD_VAR 0 2
93437: PPUSH
93438: LD_VAR 0 3
93442: PPUSH
93443: CALL_OW 428
93447: PUSH
93448: LD_VAR 0 1
93452: EQUAL
93453: IFFALSE 93467
93455: PUSH
93456: LD_VAR 0 1
93460: PPUSH
93461: CALL_OW 314
93465: NOT
93466: AND
93467: IFFALSE 93389
// PlaySoundXY ( x , y , PlantMine ) ;
93469: LD_VAR 0 2
93473: PPUSH
93474: LD_VAR 0 3
93478: PPUSH
93479: LD_STRING PlantMine
93481: PPUSH
93482: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
93486: LD_VAR 0 2
93490: PPUSH
93491: LD_VAR 0 3
93495: PPUSH
93496: LD_VAR 0 1
93500: PPUSH
93501: CALL_OW 255
93505: PPUSH
93506: LD_INT 0
93508: PPUSH
93509: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
93513: LD_ADDR_EXP 134
93517: PUSH
93518: LD_EXP 134
93522: PPUSH
93523: LD_VAR 0 5
93527: PUSH
93528: LD_EXP 134
93532: PUSH
93533: LD_VAR 0 5
93537: ARRAY
93538: PUSH
93539: LD_INT 1
93541: PLUS
93542: PUSH
93543: EMPTY
93544: LIST
93545: LIST
93546: PPUSH
93547: LD_VAR 0 2
93551: PUSH
93552: LD_VAR 0 3
93556: PUSH
93557: EMPTY
93558: LIST
93559: LIST
93560: PPUSH
93561: CALL 34806 0 3
93565: ST_TO_ADDR
// result := true ;
93566: LD_ADDR_VAR 0 4
93570: PUSH
93571: LD_INT 1
93573: ST_TO_ADDR
// end ;
93574: LD_VAR 0 4
93578: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
93579: LD_INT 0
93581: PPUSH
93582: PPUSH
93583: PPUSH
// if not unit in minersList then
93584: LD_VAR 0 1
93588: PUSH
93589: LD_EXP 133
93593: IN
93594: NOT
93595: IFFALSE 93599
// exit ;
93597: GO 93993
// index := GetElementIndex ( minersList , unit ) ;
93599: LD_ADDR_VAR 0 6
93603: PUSH
93604: LD_EXP 133
93608: PPUSH
93609: LD_VAR 0 1
93613: PPUSH
93614: CALL 34589 0 2
93618: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
93619: LD_ADDR_VAR 0 5
93623: PUSH
93624: DOUBLE
93625: LD_EXP 134
93629: PUSH
93630: LD_VAR 0 6
93634: ARRAY
93635: INC
93636: ST_TO_ADDR
93637: LD_INT 1
93639: PUSH
93640: FOR_DOWNTO
93641: IFFALSE 93804
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
93643: LD_EXP 134
93647: PUSH
93648: LD_VAR 0 6
93652: ARRAY
93653: PUSH
93654: LD_VAR 0 5
93658: ARRAY
93659: PUSH
93660: LD_INT 1
93662: ARRAY
93663: PUSH
93664: LD_VAR 0 2
93668: EQUAL
93669: IFFALSE 93699
93671: PUSH
93672: LD_EXP 134
93676: PUSH
93677: LD_VAR 0 6
93681: ARRAY
93682: PUSH
93683: LD_VAR 0 5
93687: ARRAY
93688: PUSH
93689: LD_INT 2
93691: ARRAY
93692: PUSH
93693: LD_VAR 0 3
93697: EQUAL
93698: AND
93699: IFFALSE 93802
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
93701: LD_EXP 134
93705: PUSH
93706: LD_VAR 0 6
93710: ARRAY
93711: PUSH
93712: LD_VAR 0 5
93716: ARRAY
93717: PUSH
93718: LD_INT 1
93720: ARRAY
93721: PPUSH
93722: LD_EXP 134
93726: PUSH
93727: LD_VAR 0 6
93731: ARRAY
93732: PUSH
93733: LD_VAR 0 5
93737: ARRAY
93738: PUSH
93739: LD_INT 2
93741: ARRAY
93742: PPUSH
93743: LD_VAR 0 1
93747: PPUSH
93748: CALL_OW 255
93752: PPUSH
93753: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
93757: LD_ADDR_EXP 134
93761: PUSH
93762: LD_EXP 134
93766: PPUSH
93767: LD_VAR 0 6
93771: PPUSH
93772: LD_EXP 134
93776: PUSH
93777: LD_VAR 0 6
93781: ARRAY
93782: PPUSH
93783: LD_VAR 0 5
93787: PPUSH
93788: CALL_OW 3
93792: PPUSH
93793: CALL_OW 1
93797: ST_TO_ADDR
// exit ;
93798: POP
93799: POP
93800: GO 93993
// end ; end ;
93802: GO 93640
93804: POP
93805: POP
// for i := minerMinesList [ index ] downto 1 do
93806: LD_ADDR_VAR 0 5
93810: PUSH
93811: DOUBLE
93812: LD_EXP 134
93816: PUSH
93817: LD_VAR 0 6
93821: ARRAY
93822: INC
93823: ST_TO_ADDR
93824: LD_INT 1
93826: PUSH
93827: FOR_DOWNTO
93828: IFFALSE 93991
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
93830: LD_EXP 134
93834: PUSH
93835: LD_VAR 0 6
93839: ARRAY
93840: PUSH
93841: LD_VAR 0 5
93845: ARRAY
93846: PUSH
93847: LD_INT 1
93849: ARRAY
93850: PPUSH
93851: LD_EXP 134
93855: PUSH
93856: LD_VAR 0 6
93860: ARRAY
93861: PUSH
93862: LD_VAR 0 5
93866: ARRAY
93867: PUSH
93868: LD_INT 2
93870: ARRAY
93871: PPUSH
93872: LD_VAR 0 2
93876: PPUSH
93877: LD_VAR 0 3
93881: PPUSH
93882: CALL_OW 298
93886: PUSH
93887: LD_INT 6
93889: LESS
93890: IFFALSE 93989
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
93892: LD_EXP 134
93896: PUSH
93897: LD_VAR 0 6
93901: ARRAY
93902: PUSH
93903: LD_VAR 0 5
93907: ARRAY
93908: PUSH
93909: LD_INT 1
93911: ARRAY
93912: PPUSH
93913: LD_EXP 134
93917: PUSH
93918: LD_VAR 0 6
93922: ARRAY
93923: PUSH
93924: LD_VAR 0 5
93928: ARRAY
93929: PUSH
93930: LD_INT 2
93932: ARRAY
93933: PPUSH
93934: LD_VAR 0 1
93938: PPUSH
93939: CALL_OW 255
93943: PPUSH
93944: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
93948: LD_ADDR_EXP 134
93952: PUSH
93953: LD_EXP 134
93957: PPUSH
93958: LD_VAR 0 6
93962: PPUSH
93963: LD_EXP 134
93967: PUSH
93968: LD_VAR 0 6
93972: ARRAY
93973: PPUSH
93974: LD_VAR 0 5
93978: PPUSH
93979: CALL_OW 3
93983: PPUSH
93984: CALL_OW 1
93988: ST_TO_ADDR
// end ; end ;
93989: GO 93827
93991: POP
93992: POP
// end ;
93993: LD_VAR 0 4
93997: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
93998: LD_INT 0
94000: PPUSH
94001: PPUSH
94002: PPUSH
94003: PPUSH
94004: PPUSH
94005: PPUSH
94006: PPUSH
94007: PPUSH
94008: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
94009: LD_VAR 0 1
94013: PPUSH
94014: CALL_OW 264
94018: PUSH
94019: LD_INT 81
94021: EQUAL
94022: NOT
94023: IFTRUE 94038
94025: PUSH
94026: LD_VAR 0 1
94030: PUSH
94031: LD_EXP 133
94035: IN
94036: NOT
94037: OR
94038: IFFALSE 94042
// exit ;
94040: GO 94368
// index := GetElementIndex ( minersList , unit ) ;
94042: LD_ADDR_VAR 0 6
94046: PUSH
94047: LD_EXP 133
94051: PPUSH
94052: LD_VAR 0 1
94056: PPUSH
94057: CALL 34589 0 2
94061: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
94062: LD_ADDR_VAR 0 8
94066: PUSH
94067: LD_EXP 135
94071: PUSH
94072: LD_EXP 134
94076: PUSH
94077: LD_VAR 0 6
94081: ARRAY
94082: MINUS
94083: ST_TO_ADDR
// if not minesFreeAmount then
94084: LD_VAR 0 8
94088: NOT
94089: IFFALSE 94093
// exit ;
94091: GO 94368
// tmp := [ ] ;
94093: LD_ADDR_VAR 0 7
94097: PUSH
94098: EMPTY
94099: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
94100: LD_ADDR_VAR 0 5
94104: PUSH
94105: DOUBLE
94106: LD_INT 1
94108: DEC
94109: ST_TO_ADDR
94110: LD_VAR 0 8
94114: PUSH
94115: FOR_TO
94116: IFFALSE 94315
// begin _d := rand ( 0 , 5 ) ;
94118: LD_ADDR_VAR 0 11
94122: PUSH
94123: LD_INT 0
94125: PPUSH
94126: LD_INT 5
94128: PPUSH
94129: CALL_OW 12
94133: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
94134: LD_ADDR_VAR 0 12
94138: PUSH
94139: LD_INT 2
94141: PPUSH
94142: LD_INT 6
94144: PPUSH
94145: CALL_OW 12
94149: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
94150: LD_ADDR_VAR 0 9
94154: PUSH
94155: LD_VAR 0 2
94159: PPUSH
94160: LD_VAR 0 11
94164: PPUSH
94165: LD_VAR 0 12
94169: PPUSH
94170: CALL_OW 272
94174: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
94175: LD_ADDR_VAR 0 10
94179: PUSH
94180: LD_VAR 0 3
94184: PPUSH
94185: LD_VAR 0 11
94189: PPUSH
94190: LD_VAR 0 12
94194: PPUSH
94195: CALL_OW 273
94199: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
94200: LD_VAR 0 9
94204: PPUSH
94205: LD_VAR 0 10
94209: PPUSH
94210: CALL_OW 488
94214: IFFALSE 94238
94216: PUSH
94217: LD_VAR 0 9
94221: PUSH
94222: LD_VAR 0 10
94226: PUSH
94227: EMPTY
94228: LIST
94229: LIST
94230: PUSH
94231: LD_VAR 0 7
94235: IN
94236: NOT
94237: AND
94238: IFFALSE 94257
94240: PUSH
94241: LD_VAR 0 9
94245: PPUSH
94246: LD_VAR 0 10
94250: PPUSH
94251: CALL_OW 458
94255: NOT
94256: AND
94257: IFFALSE 94299
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
94259: LD_ADDR_VAR 0 7
94263: PUSH
94264: LD_VAR 0 7
94268: PPUSH
94269: LD_VAR 0 7
94273: PUSH
94274: LD_INT 1
94276: PLUS
94277: PPUSH
94278: LD_VAR 0 9
94282: PUSH
94283: LD_VAR 0 10
94287: PUSH
94288: EMPTY
94289: LIST
94290: LIST
94291: PPUSH
94292: CALL_OW 1
94296: ST_TO_ADDR
94297: GO 94313
// i := i - 1 ;
94299: LD_ADDR_VAR 0 5
94303: PUSH
94304: LD_VAR 0 5
94308: PUSH
94309: LD_INT 1
94311: MINUS
94312: ST_TO_ADDR
// end ;
94313: GO 94115
94315: POP
94316: POP
// for i in tmp do
94317: LD_ADDR_VAR 0 5
94321: PUSH
94322: LD_VAR 0 7
94326: PUSH
94327: FOR_IN
94328: IFFALSE 94366
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
94330: LD_VAR 0 1
94334: PPUSH
94335: LD_VAR 0 5
94339: PUSH
94340: LD_INT 1
94342: ARRAY
94343: PPUSH
94344: LD_VAR 0 5
94348: PUSH
94349: LD_INT 2
94351: ARRAY
94352: PPUSH
94353: CALL 93300 0 3
94357: NOT
94358: IFFALSE 94364
// exit ;
94360: POP
94361: POP
94362: GO 94368
94364: GO 94327
94366: POP
94367: POP
// end ;
94368: LD_VAR 0 4
94372: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
94373: LD_INT 0
94375: PPUSH
94376: PPUSH
94377: PPUSH
94378: PPUSH
94379: PPUSH
94380: PPUSH
94381: PPUSH
94382: PPUSH
94383: PPUSH
// if GetClass ( unit ) <> class_sniper then
94384: LD_VAR 0 1
94388: PPUSH
94389: CALL_OW 257
94393: PUSH
94394: LD_INT 5
94396: NONEQUAL
94397: IFFALSE 94401
// exit ;
94399: GO 94871
// dist := 8 ;
94401: LD_ADDR_VAR 0 5
94405: PUSH
94406: LD_INT 8
94408: ST_TO_ADDR
// viewRange := 12 ;
94409: LD_ADDR_VAR 0 8
94413: PUSH
94414: LD_INT 12
94416: ST_TO_ADDR
// side := GetSide ( unit ) ;
94417: LD_ADDR_VAR 0 6
94421: PUSH
94422: LD_VAR 0 1
94426: PPUSH
94427: CALL_OW 255
94431: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
94432: LD_INT 61
94434: PPUSH
94435: LD_VAR 0 6
94439: PPUSH
94440: CALL_OW 321
94444: PUSH
94445: LD_INT 2
94447: EQUAL
94448: IFFALSE 94458
// viewRange := 16 ;
94450: LD_ADDR_VAR 0 8
94454: PUSH
94455: LD_INT 16
94457: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
94458: LD_VAR 0 1
94462: PPUSH
94463: LD_VAR 0 2
94467: PPUSH
94468: LD_VAR 0 3
94472: PPUSH
94473: CALL_OW 297
94477: PUSH
94478: LD_VAR 0 5
94482: GREATER
94483: IFFALSE 94562
// begin ComMoveXY ( unit , x , y ) ;
94485: LD_VAR 0 1
94489: PPUSH
94490: LD_VAR 0 2
94494: PPUSH
94495: LD_VAR 0 3
94499: PPUSH
94500: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
94504: LD_INT 35
94506: PPUSH
94507: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
94511: LD_VAR 0 1
94515: PPUSH
94516: LD_VAR 0 2
94520: PPUSH
94521: LD_VAR 0 3
94525: PPUSH
94526: CALL 66635 0 3
94530: NOT
94531: IFFALSE 94535
// exit ;
94533: GO 94871
// until GetDistUnitXY ( unit , x , y ) < dist ;
94535: LD_VAR 0 1
94539: PPUSH
94540: LD_VAR 0 2
94544: PPUSH
94545: LD_VAR 0 3
94549: PPUSH
94550: CALL_OW 297
94554: PUSH
94555: LD_VAR 0 5
94559: LESS
94560: IFFALSE 94504
// end ; ComTurnXY ( unit , x , y ) ;
94562: LD_VAR 0 1
94566: PPUSH
94567: LD_VAR 0 2
94571: PPUSH
94572: LD_VAR 0 3
94576: PPUSH
94577: CALL_OW 118
// repeat if Multiplayer then
94581: LD_OWVAR 4
94585: IFFALSE 94596
// wait ( 35 ) else
94587: LD_INT 35
94589: PPUSH
94590: CALL_OW 67
94594: GO 94603
// wait ( 5 ) ;
94596: LD_INT 5
94598: PPUSH
94599: CALL_OW 67
// _d := GetDir ( unit ) ;
94603: LD_ADDR_VAR 0 11
94607: PUSH
94608: LD_VAR 0 1
94612: PPUSH
94613: CALL_OW 254
94617: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
94618: LD_ADDR_VAR 0 7
94622: PUSH
94623: LD_VAR 0 1
94627: PPUSH
94628: CALL_OW 250
94632: PPUSH
94633: LD_VAR 0 1
94637: PPUSH
94638: CALL_OW 251
94642: PPUSH
94643: LD_VAR 0 2
94647: PPUSH
94648: LD_VAR 0 3
94652: PPUSH
94653: CALL 69271 0 4
94657: ST_TO_ADDR
// until dir = _d ;
94658: LD_VAR 0 7
94662: PUSH
94663: LD_VAR 0 11
94667: EQUAL
94668: IFFALSE 94581
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
94670: LD_ADDR_VAR 0 9
94674: PUSH
94675: LD_VAR 0 1
94679: PPUSH
94680: CALL_OW 250
94684: PPUSH
94685: LD_VAR 0 7
94689: PPUSH
94690: LD_VAR 0 5
94694: PPUSH
94695: CALL_OW 272
94699: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
94700: LD_ADDR_VAR 0 10
94704: PUSH
94705: LD_VAR 0 1
94709: PPUSH
94710: CALL_OW 251
94714: PPUSH
94715: LD_VAR 0 7
94719: PPUSH
94720: LD_VAR 0 5
94724: PPUSH
94725: CALL_OW 273
94729: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
94730: LD_VAR 0 9
94734: PPUSH
94735: LD_VAR 0 10
94739: PPUSH
94740: CALL_OW 488
94744: NOT
94745: IFFALSE 94749
// exit ;
94747: GO 94871
// ComAnimCustom ( unit , 1 ) ;
94749: LD_VAR 0 1
94753: PPUSH
94754: LD_INT 1
94756: PPUSH
94757: CALL_OW 592
// p := 0 ;
94761: LD_ADDR_VAR 0 12
94765: PUSH
94766: LD_INT 0
94768: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
94769: LD_VAR 0 9
94773: PPUSH
94774: LD_VAR 0 10
94778: PPUSH
94779: LD_VAR 0 6
94783: PPUSH
94784: LD_VAR 0 8
94788: PPUSH
94789: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
94793: LD_INT 35
94795: PPUSH
94796: CALL_OW 67
// p := Inc ( p ) ;
94800: LD_ADDR_VAR 0 12
94804: PUSH
94805: LD_VAR 0 12
94809: PPUSH
94810: CALL 69227 0 1
94814: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
94815: LD_VAR 0 12
94819: PUSH
94820: LD_INT 3
94822: EQUAL
94823: IFTRUE 94837
94825: PUSH
94826: LD_VAR 0 1
94830: PPUSH
94831: CALL_OW 302
94835: NOT
94836: OR
94837: IFTRUE 94850
94839: PUSH
94840: LD_VAR 0 1
94844: PPUSH
94845: CALL_OW 301
94849: OR
94850: IFFALSE 94793
// RemoveSeeing ( _x , _y , side ) ;
94852: LD_VAR 0 9
94856: PPUSH
94857: LD_VAR 0 10
94861: PPUSH
94862: LD_VAR 0 6
94866: PPUSH
94867: CALL_OW 331
// end ; end_of_file
94871: LD_VAR 0 4
94875: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
94876: LD_VAR 0 1
94880: PPUSH
94881: LD_VAR 0 2
94885: PPUSH
94886: LD_VAR 0 3
94890: PPUSH
94891: LD_VAR 0 4
94895: PPUSH
94896: LD_VAR 0 5
94900: PPUSH
94901: LD_VAR 0 6
94905: PPUSH
94906: CALL 73380 0 6
// end ;
94910: PPOPN 6
94912: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
94913: LD_INT 0
94915: PPUSH
// begin if not units then
94916: LD_VAR 0 1
94920: NOT
94921: IFFALSE 94925
// exit ;
94923: GO 94925
// end ;
94925: PPOPN 7
94927: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
94928: CALL 73267 0 0
// end ;
94932: PPOPN 1
94934: END
